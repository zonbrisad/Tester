   1              		.file	"jddctmgr.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.start_pass,"ax",@progbits
   5              		.p2align 4
   7              	start_pass:
   8              	.LVL0:
   9              	.LFB51:
  10              		.file 1 "fltk-1.3.4-1/jpeg/jddctmgr.c"
   1:fltk-1.3.4-1/jpeg/jddctmgr.c **** /*
   2:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * jddctmgr.c
   3:fltk-1.3.4-1/jpeg/jddctmgr.c ****  *
   4:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * Copyright (C) 1994-1996, Thomas G. Lane.
   5:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * Modified 2002-2013 by Guido Vollbeding.
   6:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * This file is part of the Independent JPEG Group's software.
   7:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * For conditions of distribution and use, see the accompanying README file.
   8:fltk-1.3.4-1/jpeg/jddctmgr.c ****  *
   9:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * This file contains the inverse-DCT management logic.
  10:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * This code selects a particular IDCT implementation to be used,
  11:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * and it performs related housekeeping chores.  No code in this file
  12:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * is executed per IDCT step, only during output pass setup.
  13:fltk-1.3.4-1/jpeg/jddctmgr.c ****  *
  14:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * Note that the IDCT routines are responsible for performing coefficient
  15:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * dequantization as well as the IDCT proper.  This module sets up the
  16:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * dequantization multiplier table needed by the IDCT routine.
  17:fltk-1.3.4-1/jpeg/jddctmgr.c ****  */
  18:fltk-1.3.4-1/jpeg/jddctmgr.c **** 
  19:fltk-1.3.4-1/jpeg/jddctmgr.c **** #define JPEG_INTERNALS
  20:fltk-1.3.4-1/jpeg/jddctmgr.c **** #include "jinclude.h"
  21:fltk-1.3.4-1/jpeg/jddctmgr.c **** #include "jpeglib.h"
  22:fltk-1.3.4-1/jpeg/jddctmgr.c **** #include "jdct.h"		/* Private declarations for DCT subsystem */
  23:fltk-1.3.4-1/jpeg/jddctmgr.c **** 
  24:fltk-1.3.4-1/jpeg/jddctmgr.c **** 
  25:fltk-1.3.4-1/jpeg/jddctmgr.c **** /*
  26:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * The decompressor input side (jdinput.c) saves away the appropriate
  27:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * quantization table for each component at the start of the first scan
  28:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * involving that component.  (This is necessary in order to correctly
  29:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * decode files that reuse Q-table slots.)
  30:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * When we are ready to make an output pass, the saved Q-table is converted
  31:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * to a multiplier table that will actually be used by the IDCT routine.
  32:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * The multiplier table contents are IDCT-method-dependent.  To support
  33:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * application changes in IDCT method between scans, we can remake the
  34:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * multiplier tables if necessary.
  35:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * In buffered-image mode, the first output pass may occur before any data
  36:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * has been seen for some components, and thus before their Q-tables have
  37:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * been saved away.  To handle this case, multiplier tables are preset
  38:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * to zeroes; the result of the IDCT will be a neutral gray level.
  39:fltk-1.3.4-1/jpeg/jddctmgr.c ****  */
  40:fltk-1.3.4-1/jpeg/jddctmgr.c **** 
  41:fltk-1.3.4-1/jpeg/jddctmgr.c **** 
  42:fltk-1.3.4-1/jpeg/jddctmgr.c **** /* Private subobject for this module */
  43:fltk-1.3.4-1/jpeg/jddctmgr.c **** 
  44:fltk-1.3.4-1/jpeg/jddctmgr.c **** typedef struct {
  45:fltk-1.3.4-1/jpeg/jddctmgr.c ****   struct jpeg_inverse_dct pub;	/* public fields */
  46:fltk-1.3.4-1/jpeg/jddctmgr.c **** 
  47:fltk-1.3.4-1/jpeg/jddctmgr.c ****   /* This array contains the IDCT method code that each multiplier table
  48:fltk-1.3.4-1/jpeg/jddctmgr.c ****    * is currently set up for, or -1 if it's not yet set up.
  49:fltk-1.3.4-1/jpeg/jddctmgr.c ****    * The actual multiplier tables are pointed to by dct_table in the
  50:fltk-1.3.4-1/jpeg/jddctmgr.c ****    * per-component comp_info structures.
  51:fltk-1.3.4-1/jpeg/jddctmgr.c ****    */
  52:fltk-1.3.4-1/jpeg/jddctmgr.c ****   int cur_method[MAX_COMPONENTS];
  53:fltk-1.3.4-1/jpeg/jddctmgr.c **** } my_idct_controller;
  54:fltk-1.3.4-1/jpeg/jddctmgr.c **** 
  55:fltk-1.3.4-1/jpeg/jddctmgr.c **** typedef my_idct_controller * my_idct_ptr;
  56:fltk-1.3.4-1/jpeg/jddctmgr.c **** 
  57:fltk-1.3.4-1/jpeg/jddctmgr.c **** 
  58:fltk-1.3.4-1/jpeg/jddctmgr.c **** /* Allocated multiplier tables: big enough for any supported variant */
  59:fltk-1.3.4-1/jpeg/jddctmgr.c **** 
  60:fltk-1.3.4-1/jpeg/jddctmgr.c **** typedef union {
  61:fltk-1.3.4-1/jpeg/jddctmgr.c ****   ISLOW_MULT_TYPE islow_array[DCTSIZE2];
  62:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef DCT_IFAST_SUPPORTED
  63:fltk-1.3.4-1/jpeg/jddctmgr.c ****   IFAST_MULT_TYPE ifast_array[DCTSIZE2];
  64:fltk-1.3.4-1/jpeg/jddctmgr.c **** #endif
  65:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef DCT_FLOAT_SUPPORTED
  66:fltk-1.3.4-1/jpeg/jddctmgr.c ****   FLOAT_MULT_TYPE float_array[DCTSIZE2];
  67:fltk-1.3.4-1/jpeg/jddctmgr.c **** #endif
  68:fltk-1.3.4-1/jpeg/jddctmgr.c **** } multiplier_table;
  69:fltk-1.3.4-1/jpeg/jddctmgr.c **** 
  70:fltk-1.3.4-1/jpeg/jddctmgr.c **** 
  71:fltk-1.3.4-1/jpeg/jddctmgr.c **** /* The current scaled-IDCT routines require ISLOW-style multiplier tables,
  72:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * so be sure to compile that code if either ISLOW or SCALING is requested.
  73:fltk-1.3.4-1/jpeg/jddctmgr.c ****  */
  74:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef DCT_ISLOW_SUPPORTED
  75:fltk-1.3.4-1/jpeg/jddctmgr.c **** #define PROVIDE_ISLOW_TABLES
  76:fltk-1.3.4-1/jpeg/jddctmgr.c **** #else
  77:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef IDCT_SCALING_SUPPORTED
  78:fltk-1.3.4-1/jpeg/jddctmgr.c **** #define PROVIDE_ISLOW_TABLES
  79:fltk-1.3.4-1/jpeg/jddctmgr.c **** #endif
  80:fltk-1.3.4-1/jpeg/jddctmgr.c **** #endif
  81:fltk-1.3.4-1/jpeg/jddctmgr.c **** 
  82:fltk-1.3.4-1/jpeg/jddctmgr.c **** 
  83:fltk-1.3.4-1/jpeg/jddctmgr.c **** /*
  84:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * Prepare for an output pass.
  85:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * Here we select the proper IDCT routine for each component and build
  86:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * a matching multiplier table.
  87:fltk-1.3.4-1/jpeg/jddctmgr.c ****  */
  88:fltk-1.3.4-1/jpeg/jddctmgr.c **** 
  89:fltk-1.3.4-1/jpeg/jddctmgr.c **** METHODDEF(void)
  90:fltk-1.3.4-1/jpeg/jddctmgr.c **** start_pass (j_decompress_ptr cinfo)
  91:fltk-1.3.4-1/jpeg/jddctmgr.c **** {
  11              		.loc 1 91 1 view -0
  12              		.cfi_startproc
  13              		.loc 1 91 1 is_stmt 0 view .LVU1
  14 0000 F30F1EFA 		endbr64
  92:fltk-1.3.4-1/jpeg/jddctmgr.c ****   my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
  15              		.loc 1 92 3 is_stmt 1 view .LVU2
  91:fltk-1.3.4-1/jpeg/jddctmgr.c ****   my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
  16              		.loc 1 91 1 is_stmt 0 view .LVU3
  17 0004 4157     		pushq	%r15
  18              		.cfi_def_cfa_offset 16
  19              		.cfi_offset 15, -16
  20 0006 4156     		pushq	%r14
  21              		.cfi_def_cfa_offset 24
  22              		.cfi_offset 14, -24
  23 0008 4155     		pushq	%r13
  24              		.cfi_def_cfa_offset 32
  25              		.cfi_offset 13, -32
  26 000a 4154     		pushq	%r12
  27              		.cfi_def_cfa_offset 40
  28              		.cfi_offset 12, -40
  29 000c 55       		pushq	%rbp
  30              		.cfi_def_cfa_offset 48
  31              		.cfi_offset 6, -48
  32 000d 53       		pushq	%rbx
  33              		.cfi_def_cfa_offset 56
  34              		.cfi_offset 3, -56
  35 000e 4883EC18 		subq	$24, %rsp
  36              		.cfi_def_cfa_offset 80
  93:fltk-1.3.4-1/jpeg/jddctmgr.c ****   int ci, i;
  94:fltk-1.3.4-1/jpeg/jddctmgr.c ****   jpeg_component_info *compptr;
  95:fltk-1.3.4-1/jpeg/jddctmgr.c ****   int method = 0;
  96:fltk-1.3.4-1/jpeg/jddctmgr.c ****   inverse_DCT_method_ptr method_ptr = NULL;
  97:fltk-1.3.4-1/jpeg/jddctmgr.c ****   JQUANT_TBL * qtbl;
  98:fltk-1.3.4-1/jpeg/jddctmgr.c **** 
  99:fltk-1.3.4-1/jpeg/jddctmgr.c ****   for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
  37              		.loc 1 99 3 view .LVU4
  38 0012 8B5738   		movl	56(%rdi), %edx
  92:fltk-1.3.4-1/jpeg/jddctmgr.c ****   int ci, i;
  39              		.loc 1 92 15 view .LVU5
  40 0015 4C8BBF78 		movq	632(%rdi), %r15
  40      020000
  41              	.LVL1:
  93:fltk-1.3.4-1/jpeg/jddctmgr.c ****   int ci, i;
  42              		.loc 1 93 3 is_stmt 1 view .LVU6
  94:fltk-1.3.4-1/jpeg/jddctmgr.c ****   int method = 0;
  43              		.loc 1 94 3 view .LVU7
  95:fltk-1.3.4-1/jpeg/jddctmgr.c ****   inverse_DCT_method_ptr method_ptr = NULL;
  44              		.loc 1 95 3 view .LVU8
  96:fltk-1.3.4-1/jpeg/jddctmgr.c ****   JQUANT_TBL * qtbl;
  45              		.loc 1 96 3 view .LVU9
  97:fltk-1.3.4-1/jpeg/jddctmgr.c **** 
  46              		.loc 1 97 3 view .LVU10
  47              		.loc 1 99 3 view .LVU11
  48              		.loc 1 99 24 is_stmt 0 view .LVU12
  49 001c 4C8BAF30 		movq	304(%rdi), %r13
  49      010000
  50              	.LVL2:
  51              		.loc 1 99 44 is_stmt 1 view .LVU13
  52              		.loc 1 99 3 is_stmt 0 view .LVU14
  53 0023 85D2     		testl	%edx, %edx
  54 0025 0F8EB503 		jle	.L1
  54      0000
  55              	.LBB4:
 100:fltk-1.3.4-1/jpeg/jddctmgr.c ****        ci++, compptr++) {
 101:fltk-1.3.4-1/jpeg/jddctmgr.c ****     /* Select the proper IDCT routine for this component's scaling */
 102:fltk-1.3.4-1/jpeg/jddctmgr.c ****     switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 103:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef IDCT_SCALING_SUPPORTED
 104:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((1 << 8) + 1):
 105:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_1x1;
 106:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 107:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 108:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((2 << 8) + 2):
 109:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_2x2;
 110:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 111:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 112:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((3 << 8) + 3):
 113:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_3x3;
 114:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 115:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 116:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((4 << 8) + 4):
 117:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_4x4;
 118:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 119:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 120:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((5 << 8) + 5):
 121:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_5x5;
 122:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 123:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 124:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((6 << 8) + 6):
 125:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_6x6;
 126:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 127:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 128:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((7 << 8) + 7):
 129:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_7x7;
 130:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 131:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 132:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((9 << 8) + 9):
 133:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_9x9;
 134:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 135:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 136:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((10 << 8) + 10):
 137:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_10x10;
 138:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 139:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 140:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((11 << 8) + 11):
 141:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_11x11;
 142:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 143:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 144:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((12 << 8) + 12):
 145:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_12x12;
 146:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 147:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 148:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((13 << 8) + 13):
 149:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_13x13;
 150:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 151:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 152:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((14 << 8) + 14):
 153:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_14x14;
 154:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 155:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 156:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((15 << 8) + 15):
 157:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_15x15;
 158:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 159:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 160:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((16 << 8) + 16):
 161:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_16x16;
 162:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 163:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 164:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((16 << 8) + 8):
 165:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_16x8;
 166:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 167:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 168:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((14 << 8) + 7):
 169:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_14x7;
 170:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 171:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 172:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((12 << 8) + 6):
 173:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_12x6;
 174:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 175:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 176:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((10 << 8) + 5):
 177:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_10x5;
 178:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 179:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 180:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((8 << 8) + 4):
 181:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_8x4;
 182:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 183:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 184:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((6 << 8) + 3):
 185:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_6x3;
 186:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 187:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 188:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((4 << 8) + 2):
 189:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_4x2;
 190:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 191:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 192:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((2 << 8) + 1):
 193:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_2x1;
 194:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 195:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 196:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((8 << 8) + 16):
 197:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_8x16;
 198:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 199:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 200:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((7 << 8) + 14):
 201:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_7x14;
 202:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 203:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 204:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((6 << 8) + 12):
 205:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_6x12;
 206:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 207:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 208:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((5 << 8) + 10):
 209:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_5x10;
 210:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 211:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 212:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((4 << 8) + 8):
 213:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_4x8;
 214:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 215:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 216:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((3 << 8) + 6):
 217:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_3x6;
 218:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 219:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 220:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((2 << 8) + 4):
 221:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_2x4;
 222:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 223:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 224:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((1 << 8) + 2):
 225:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method_ptr = jpeg_idct_1x2;
 226:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 227:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 228:fltk-1.3.4-1/jpeg/jddctmgr.c **** #endif
 229:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case ((DCTSIZE << 8) + DCTSIZE):
 230:fltk-1.3.4-1/jpeg/jddctmgr.c ****       switch (cinfo->dct_method) {
 231:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef DCT_ISLOW_SUPPORTED
 232:fltk-1.3.4-1/jpeg/jddctmgr.c ****       case JDCT_ISLOW:
 233:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	method_ptr = jpeg_idct_islow;
 234:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	method = JDCT_ISLOW;
 235:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	break;
 236:fltk-1.3.4-1/jpeg/jddctmgr.c **** #endif
 237:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef DCT_IFAST_SUPPORTED
 238:fltk-1.3.4-1/jpeg/jddctmgr.c ****       case JDCT_IFAST:
 239:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	method_ptr = jpeg_idct_ifast;
 240:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	method = JDCT_IFAST;
 241:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	break;
 242:fltk-1.3.4-1/jpeg/jddctmgr.c **** #endif
 243:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef DCT_FLOAT_SUPPORTED
 244:fltk-1.3.4-1/jpeg/jddctmgr.c ****       case JDCT_FLOAT:
 245:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	method_ptr = jpeg_idct_float;
 246:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	method = JDCT_FLOAT;
 247:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	break;
 248:fltk-1.3.4-1/jpeg/jddctmgr.c **** #endif
 249:fltk-1.3.4-1/jpeg/jddctmgr.c ****       default:
 250:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	ERREXIT(cinfo, JERR_NOT_COMPILED);
 251:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	break;
 252:fltk-1.3.4-1/jpeg/jddctmgr.c ****       }
 253:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 254:fltk-1.3.4-1/jpeg/jddctmgr.c ****     default:
 255:fltk-1.3.4-1/jpeg/jddctmgr.c ****       ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 256:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	       compptr->DCT_h_scaled_size, compptr->DCT_v_scaled_size);
 257:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 258:fltk-1.3.4-1/jpeg/jddctmgr.c ****     }
 259:fltk-1.3.4-1/jpeg/jddctmgr.c ****     idct->pub.inverse_DCT[ci] = method_ptr;
 260:fltk-1.3.4-1/jpeg/jddctmgr.c ****     /* Create multiplier table from quant table.
 261:fltk-1.3.4-1/jpeg/jddctmgr.c ****      * However, we can skip this if the component is uninteresting
 262:fltk-1.3.4-1/jpeg/jddctmgr.c ****      * or if we already built the table.  Also, if no quant table
 263:fltk-1.3.4-1/jpeg/jddctmgr.c ****      * has yet been saved for the component, we leave the
 264:fltk-1.3.4-1/jpeg/jddctmgr.c ****      * multiplier table all-zero; we'll be reading zeroes from the
 265:fltk-1.3.4-1/jpeg/jddctmgr.c ****      * coefficient controller's buffer anyway.
 266:fltk-1.3.4-1/jpeg/jddctmgr.c ****      */
 267:fltk-1.3.4-1/jpeg/jddctmgr.c ****     if (! compptr->component_needed || idct->cur_method[ci] == method)
 268:fltk-1.3.4-1/jpeg/jddctmgr.c ****       continue;
 269:fltk-1.3.4-1/jpeg/jddctmgr.c ****     qtbl = compptr->quant_table;
 270:fltk-1.3.4-1/jpeg/jddctmgr.c ****     if (qtbl == NULL)		/* happens if no data yet for component */
 271:fltk-1.3.4-1/jpeg/jddctmgr.c ****       continue;
 272:fltk-1.3.4-1/jpeg/jddctmgr.c ****     idct->cur_method[ci] = method;
 273:fltk-1.3.4-1/jpeg/jddctmgr.c ****     switch (method) {
 274:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef PROVIDE_ISLOW_TABLES
 275:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case JDCT_ISLOW:
 276:fltk-1.3.4-1/jpeg/jddctmgr.c ****       {
 277:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	/* For LL&M IDCT method, multipliers are equal to raw quantization
 278:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	 * coefficients, but are stored as ints to ensure access efficiency.
 279:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	 */
 280:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	ISLOW_MULT_TYPE * ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
 281:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	for (i = 0; i < DCTSIZE2; i++) {
 282:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 283:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	}
 284:fltk-1.3.4-1/jpeg/jddctmgr.c ****       }
 285:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 286:fltk-1.3.4-1/jpeg/jddctmgr.c **** #endif
 287:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef DCT_IFAST_SUPPORTED
 288:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case JDCT_IFAST:
 289:fltk-1.3.4-1/jpeg/jddctmgr.c ****       {
 290:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	/* For AA&N IDCT method, multipliers are equal to quantization
 291:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	 * coefficients scaled by scalefactor[row]*scalefactor[col], where
 292:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	 *   scalefactor[0] = 1
 293:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
 294:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	 * For integer operation, the multiplier table is to be scaled by
 295:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	 * IFAST_SCALE_BITS.
 296:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	 */
 297:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	IFAST_MULT_TYPE * ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
 298:fltk-1.3.4-1/jpeg/jddctmgr.c **** #define CONST_BITS 14
 299:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	static const INT16 aanscales[DCTSIZE2] = {
 300:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  /* precomputed values scaled up by 14 bits */
 301:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
 302:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  22725, 31521, 29692, 26722, 22725, 17855, 12299,  6270,
 303:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  21407, 29692, 27969, 25172, 21407, 16819, 11585,  5906,
 304:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  19266, 26722, 25172, 22654, 19266, 15137, 10426,  5315,
 305:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
 306:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  12873, 17855, 16819, 15137, 12873, 10114,  6967,  3552,
 307:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	   8867, 12299, 11585, 10426,  8867,  6967,  4799,  2446,
 308:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	   4520,  6270,  5906,  5315,  4520,  3552,  2446,  1247
 309:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	};
 310:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	SHIFT_TEMPS
 311:fltk-1.3.4-1/jpeg/jddctmgr.c **** 
 312:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	for (i = 0; i < DCTSIZE2; i++) {
 313:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  ifmtbl[i] = (IFAST_MULT_TYPE)
 314:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 315:fltk-1.3.4-1/jpeg/jddctmgr.c **** 				  (INT32) aanscales[i]),
 316:fltk-1.3.4-1/jpeg/jddctmgr.c **** 		    CONST_BITS-IFAST_SCALE_BITS);
 317:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	}
 318:fltk-1.3.4-1/jpeg/jddctmgr.c ****       }
 319:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 320:fltk-1.3.4-1/jpeg/jddctmgr.c **** #endif
 321:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef DCT_FLOAT_SUPPORTED
 322:fltk-1.3.4-1/jpeg/jddctmgr.c ****     case JDCT_FLOAT:
 323:fltk-1.3.4-1/jpeg/jddctmgr.c ****       {
 324:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	/* For float AA&N IDCT method, multipliers are equal to quantization
 325:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	 * coefficients scaled by scalefactor[row]*scalefactor[col], where
 326:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	 *   scalefactor[0] = 1
 327:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
 328:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	 * We apply a further scale factor of 1/8.
 329:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	 */
 330:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
  56              		.loc 1 330 20 view .LVU15
  57 002b F20F1025 		movsd	.LC0(%rip), %xmm4
  57      00000000 
  58 0033 4983C524 		addq	$36, %r13
  59              	.LVL3:
  60              		.loc 1 330 20 view .LVU16
  61              	.LBE4:
  96:fltk-1.3.4-1/jpeg/jddctmgr.c ****   JQUANT_TBL * qtbl;
  62              		.loc 1 96 26 view .LVU17
  63 0037 31ED     		xorl	%ebp, %ebp
  95:fltk-1.3.4-1/jpeg/jddctmgr.c ****   inverse_DCT_method_ptr method_ptr = NULL;
  64              		.loc 1 95 7 view .LVU18
  65 0039 31DB     		xorl	%ebx, %ebx
  99:fltk-1.3.4-1/jpeg/jddctmgr.c ****        ci++, compptr++) {
  66              		.loc 1 99 3 view .LVU19
  67 003b 4531F6   		xorl	%r14d, %r14d
  68 003e 4C8D2500 		leaq	aanscales.4808(%rip), %r12
  68      000000
  69 0045 E9B00000 		jmp	.L25
  69      00
  70              	.LVL4:
  71 004a 660F1F44 		.p2align 4,,10
  71      0000
  72              		.p2align 3
  73              	.L78:
 102:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef IDCT_SCALING_SUPPORTED
  74              		.loc 1 102 5 view .LVU20
  75 0050 3D040200 		cmpl	$516, %eax
  75      00
  76 0055 0F849503 		je	.L29
  76      0000
  77 005b 0F8E3702 		jle	.L75
  77      0000
  78 0061 3D060300 		cmpl	$774, %eax
  78      00
  79 0066 0F842403 		je	.L34
  79      0000
  80 006c 3D020400 		cmpl	$1026, %eax
  80      00
  81 0071 0F856002 		jne	.L76
  81      0000
 189:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
  82              		.loc 1 189 18 view .LVU21
  83 0077 488B2D00 		movq	jpeg_idct_4x2@GOTPCREL(%rip), %rbp
  83      000000
  84              	.LVL5:
 190:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
  85              		.loc 1 190 14 view .LVU22
  86 007e 31DB     		xorl	%ebx, %ebx
  87              	.LVL6:
  88              		.p2align 4,,10
  89              		.p2align 3
  90              	.L3:
 259:fltk-1.3.4-1/jpeg/jddctmgr.c ****     /* Create multiplier table from quant table.
  91              		.loc 1 259 5 is_stmt 1 view .LVU23
 259:fltk-1.3.4-1/jpeg/jddctmgr.c ****     /* Create multiplier table from quant table.
  92              		.loc 1 259 31 is_stmt 0 view .LVU24
  93 0080 4B896CF7 		movq	%rbp, 8(%r15,%r14,8)
  93      08
 267:fltk-1.3.4-1/jpeg/jddctmgr.c ****       continue;
  94              		.loc 1 267 5 is_stmt 1 view .LVU25
 267:fltk-1.3.4-1/jpeg/jddctmgr.c ****       continue;
  95              		.loc 1 267 8 is_stmt 0 view .LVU26
  96 0085 418B4510 		movl	16(%r13), %eax
  97 0089 85C0     		testl	%eax, %eax
  98 008b 745B     		je	.L15
 267:fltk-1.3.4-1/jpeg/jddctmgr.c ****       continue;
  99              		.loc 1 267 37 discriminator 1 view .LVU27
 100 008d 43395CB7 		cmpl	%ebx, 88(%r15,%r14,4)
 100      58
 101 0092 7454     		je	.L15
 269:fltk-1.3.4-1/jpeg/jddctmgr.c ****     if (qtbl == NULL)		/* happens if no data yet for component */
 102              		.loc 1 269 5 is_stmt 1 view .LVU28
 269:fltk-1.3.4-1/jpeg/jddctmgr.c ****     if (qtbl == NULL)		/* happens if no data yet for component */
 103              		.loc 1 269 10 is_stmt 0 view .LVU29
 104 0094 498B4D2C 		movq	44(%r13), %rcx
 105              	.LVL7:
 270:fltk-1.3.4-1/jpeg/jddctmgr.c ****       continue;
 106              		.loc 1 270 5 is_stmt 1 view .LVU30
 270:fltk-1.3.4-1/jpeg/jddctmgr.c ****       continue;
 107              		.loc 1 270 8 is_stmt 0 view .LVU31
 108 0098 4885C9   		testq	%rcx, %rcx
 109 009b 744B     		je	.L15
 272:fltk-1.3.4-1/jpeg/jddctmgr.c ****     switch (method) {
 110              		.loc 1 272 5 is_stmt 1 view .LVU32
 272:fltk-1.3.4-1/jpeg/jddctmgr.c ****     switch (method) {
 111              		.loc 1 272 26 is_stmt 0 view .LVU33
 112 009d 43895CB7 		movl	%ebx, 88(%r15,%r14,4)
 112      58
 273:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef PROVIDE_ISLOW_TABLES
 113              		.loc 1 273 5 is_stmt 1 view .LVU34
 114 00a2 83FB01   		cmpl	$1, %ebx
 115 00a5 0F841504 		je	.L17
 115      0000
 116 00ab 83FB02   		cmpl	$2, %ebx
 117 00ae 0F847C03 		je	.L18
 117      0000
 118 00b4 85DB     		testl	%ebx, %ebx
 119 00b6 0F844403 		je	.L77
 119      0000
 331:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	int row, col;
 332:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	static const double aanscalefactor[DCTSIZE] = {
 333:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  1.0, 1.387039845, 1.306562965, 1.175875602,
 334:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  1.0, 0.785694958, 0.541196100, 0.275899379
 335:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	};
 336:fltk-1.3.4-1/jpeg/jddctmgr.c **** 
 337:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	i = 0;
 338:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	for (row = 0; row < DCTSIZE; row++) {
 339:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  for (col = 0; col < DCTSIZE; col++) {
 340:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	    fmtbl[i] = (FLOAT_MULT_TYPE)
 341:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	      ((double) qtbl->quantval[i] *
 342:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 343:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	    i++;
 344:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  }
 345:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	}
 346:fltk-1.3.4-1/jpeg/jddctmgr.c ****       }
 347:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 348:fltk-1.3.4-1/jpeg/jddctmgr.c **** #endif
 349:fltk-1.3.4-1/jpeg/jddctmgr.c ****     default:
 350:fltk-1.3.4-1/jpeg/jddctmgr.c ****       ERREXIT(cinfo, JERR_NOT_COMPILED);
 120              		.loc 1 350 7 view .LVU35
 121 00bc 488B07   		movq	(%rdi), %rax
 122 00bf 48897C24 		movq	%rdi, 8(%rsp)
 122      08
 123 00c4 C7402831 		movl	$49, 40(%rax)
 123      000000
 124 00cb 488B07   		movq	(%rdi), %rax
 125 00ce FF10     		call	*(%rax)
 126              	.LVL8:
 127              		.loc 1 350 7 is_stmt 0 view .LVU36
 128 00d0 488B0500 		movq	.LC0(%rip), %rax
 128      000000
 129 00d7 488B7C24 		movq	8(%rsp), %rdi
 129      08
 351:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 130              		.loc 1 351 7 is_stmt 1 view .LVU37
 350:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 131              		.loc 1 350 7 is_stmt 0 view .LVU38
 132 00dc 66480F6E 		movq	%rax, %xmm4
 132      E0
 133              		.p2align 4,,10
 134 00e1 0F1F8000 		.p2align 3
 134      000000
 135              	.L15:
 100:fltk-1.3.4-1/jpeg/jddctmgr.c ****     /* Select the proper IDCT routine for this component's scaling */
 136              		.loc 1 100 8 is_stmt 1 view .LVU39
 137              	.LVL9:
  99:fltk-1.3.4-1/jpeg/jddctmgr.c ****        ci++, compptr++) {
 138              		.loc 1 99 44 view .LVU40
 139 00e8 4983C601 		addq	$1, %r14
 140              	.LVL10:
  99:fltk-1.3.4-1/jpeg/jddctmgr.c ****        ci++, compptr++) {
 141              		.loc 1 99 44 is_stmt 0 view .LVU41
 142 00ec 4983C560 		addq	$96, %r13
 143              	.LVL11:
  99:fltk-1.3.4-1/jpeg/jddctmgr.c ****        ci++, compptr++) {
 144              		.loc 1 99 3 view .LVU42
 145 00f0 44397738 		cmpl	%r14d, 56(%rdi)
 146 00f4 0F8EE602 		jle	.L1
 146      0000
 147              	.LVL12:
 148              	.L25:
 102:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef IDCT_SCALING_SUPPORTED
 149              		.loc 1 102 5 is_stmt 1 view .LVU43
 102:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef IDCT_SCALING_SUPPORTED
 150              		.loc 1 102 41 is_stmt 0 view .LVU44
 151 00fa 418B4500 		movl	0(%r13), %eax
 152 00fe C1E008   		sall	$8, %eax
 102:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef IDCT_SCALING_SUPPORTED
 153              		.loc 1 102 47 view .LVU45
 154 0101 41034504 		addl	4(%r13), %eax
 102:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef IDCT_SCALING_SUPPORTED
 155              		.loc 1 102 5 view .LVU46
 156 0105 3D0E0700 		cmpl	$1806, %eax
 156      00
 157 010a 0F840904 		je	.L27
 157      0000
 158 0110 7F46     		jg	.L4
 159 0112 3D040400 		cmpl	$1028, %eax
 159      00
 160 0117 0F84EE03 		je	.L28
 160      0000
 161 011d 0F8E2DFF 		jle	.L78
 161      FFFF
 162 0123 3D030600 		cmpl	$1539, %eax
 162      00
 163 0128 0F848202 		je	.L37
 163      0000
 164 012e 0F8E3F01 		jle	.L79
 164      0000
 165 0134 3D0C0600 		cmpl	$1548, %eax
 165      00
 166 0139 0F840102 		je	.L41
 166      0000
 167 013f 3D070700 		cmpl	$1799, %eax
 167      00
 168 0144 7550     		jne	.L80
 129:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 169              		.loc 1 129 18 view .LVU47
 170 0146 488B2D00 		movq	jpeg_idct_7x7@GOTPCREL(%rip), %rbp
 170      000000
 171              	.LVL13:
 130:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 172              		.loc 1 130 14 view .LVU48
 173 014d 31DB     		xorl	%ebx, %ebx
 174              	.LVL14:
 130:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 175              		.loc 1 130 14 view .LVU49
 176 014f E92CFFFF 		jmp	.L3
 176      FF
 177              	.LVL15:
 178              		.p2align 4,,10
 179 0154 0F1F4000 		.p2align 3
 180              	.L4:
 102:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef IDCT_SCALING_SUPPORTED
 181              		.loc 1 102 5 view .LVU50
 182 0158 3D060C00 		cmpl	$3078, %eax
 182      00
 183 015d 0F849A03 		je	.L44
 183      0000
 184 0163 0F8E8700 		jle	.L81
 184      0000
 185 0169 3D0E0E00 		cmpl	$3598, %eax
 185      00
 186 016e 0F844C02 		je	.L51
 186      0000
 187 0174 7E52     		jle	.L82
 188 0176 3D081000 		cmpl	$4104, %eax
 188      00
 189 017b 0F84CF01 		je	.L55
 189      0000
 190 0181 3D101000 		cmpl	$4112, %eax
 190      00
 191 0186 7527     		jne	.L83
 161:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 192              		.loc 1 161 18 view .LVU51
 193 0188 488B2D00 		movq	jpeg_idct_16x16@GOTPCREL(%rip), %rbp
 193      000000
 194              	.LVL16:
 162:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 195              		.loc 1 162 14 view .LVU52
 196 018f 31DB     		xorl	%ebx, %ebx
 197              	.LVL17:
 162:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 198              		.loc 1 162 14 view .LVU53
 199 0191 E9EAFEFF 		jmp	.L3
 199      FF
 200              	.LVL18:
 201              	.L80:
 102:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef IDCT_SCALING_SUPPORTED
 202              		.loc 1 102 5 view .LVU54
 203 0196 3D060600 		cmpl	$1542, %eax
 203      00
 204 019b 0F85AC03 		jne	.L8
 204      0000
 125:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 205              		.loc 1 125 18 view .LVU55
 206 01a1 488B2D00 		movq	jpeg_idct_6x6@GOTPCREL(%rip), %rbp
 206      000000
 207              	.LVL19:
 126:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 208              		.loc 1 126 14 view .LVU56
 209 01a8 31DB     		xorl	%ebx, %ebx
 210              	.LVL20:
 126:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 211              		.loc 1 126 14 view .LVU57
 212 01aa E9D1FEFF 		jmp	.L3
 212      FF
 213              	.LVL21:
 214              	.L83:
 102:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef IDCT_SCALING_SUPPORTED
 215              		.loc 1 102 5 view .LVU58
 216 01af 3D0F0F00 		cmpl	$3855, %eax
 216      00
 217 01b4 0F859303 		jne	.L8
 217      0000
 157:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 218              		.loc 1 157 18 view .LVU59
 219 01ba 488B2D00 		movq	jpeg_idct_15x15@GOTPCREL(%rip), %rbp
 219      000000
 220              	.LVL22:
 158:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 221              		.loc 1 158 14 view .LVU60
 222 01c1 31DB     		xorl	%ebx, %ebx
 223              	.LVL23:
 158:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 224              		.loc 1 158 14 view .LVU61
 225 01c3 E9B8FEFF 		jmp	.L3
 225      FF
 226              	.LVL24:
 227              	.L82:
 102:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef IDCT_SCALING_SUPPORTED
 228              		.loc 1 102 5 view .LVU62
 229 01c8 3D0D0D00 		cmpl	$3341, %eax
 229      00
 230 01cd 0F848D01 		je	.L52
 230      0000
 231 01d3 3D070E00 		cmpl	$3591, %eax
 231      00
 232 01d8 7543     		jne	.L84
 169:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 233              		.loc 1 169 18 view .LVU63
 234 01da 488B2D00 		movq	jpeg_idct_14x7@GOTPCREL(%rip), %rbp
 234      000000
 235              	.LVL25:
 170:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 236              		.loc 1 170 14 view .LVU64
 237 01e1 31DB     		xorl	%ebx, %ebx
 238              	.LVL26:
 170:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 239              		.loc 1 170 14 view .LVU65
 240 01e3 E998FEFF 		jmp	.L3
 240      FF
 241              	.LVL27:
 242 01e8 0F1F8400 		.p2align 4,,10
 242      00000000 
 243              		.p2align 3
 244              	.L81:
 102:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef IDCT_SCALING_SUPPORTED
 245              		.loc 1 102 5 view .LVU66
 246 01f0 3D090900 		cmpl	$2313, %eax
 246      00
 247 01f5 0F84D501 		je	.L45
 247      0000
 248 01fb 7E52     		jle	.L85
 249 01fd 3D0A0A00 		cmpl	$2570, %eax
 249      00
 250 0202 0F846801 		je	.L48
 250      0000
 251 0208 3D0B0B00 		cmpl	$2827, %eax
 251      00
 252 020d 7527     		jne	.L86
 141:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 253              		.loc 1 141 18 view .LVU67
 254 020f 488B2D00 		movq	jpeg_idct_11x11@GOTPCREL(%rip), %rbp
 254      000000
 255              	.LVL28:
 142:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 256              		.loc 1 142 14 view .LVU68
 257 0216 31DB     		xorl	%ebx, %ebx
 258              	.LVL29:
 142:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 259              		.loc 1 142 14 view .LVU69
 260 0218 E963FEFF 		jmp	.L3
 260      FF
 261              	.LVL30:
 262              	.L84:
 102:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef IDCT_SCALING_SUPPORTED
 263              		.loc 1 102 5 view .LVU70
 264 021d 3D0C0C00 		cmpl	$3084, %eax
 264      00
 265 0222 0F852503 		jne	.L8
 265      0000
 145:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 266              		.loc 1 145 18 view .LVU71
 267 0228 488B2D00 		movq	jpeg_idct_12x12@GOTPCREL(%rip), %rbp
 267      000000
 268              	.LVL31:
 146:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 269              		.loc 1 146 14 view .LVU72
 270 022f 31DB     		xorl	%ebx, %ebx
 271              	.LVL32:
 146:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 272              		.loc 1 146 14 view .LVU73
 273 0231 E94AFEFF 		jmp	.L3
 273      FF
 274              	.LVL33:
 275              	.L86:
 102:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef IDCT_SCALING_SUPPORTED
 276              		.loc 1 102 5 view .LVU74
 277 0236 3D050A00 		cmpl	$2565, %eax
 277      00
 278 023b 0F850C03 		jne	.L8
 278      0000
 177:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 279              		.loc 1 177 18 view .LVU75
 280 0241 488B2D00 		movq	jpeg_idct_10x5@GOTPCREL(%rip), %rbp
 280      000000
 281              	.LVL34:
 178:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 282              		.loc 1 178 14 view .LVU76
 283 0248 31DB     		xorl	%ebx, %ebx
 284              	.LVL35:
 178:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 285              		.loc 1 178 14 view .LVU77
 286 024a E931FEFF 		jmp	.L3
 286      FF
 287              	.LVL36:
 288              	.L85:
 102:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef IDCT_SCALING_SUPPORTED
 289              		.loc 1 102 5 view .LVU78
 290 024f 3D080800 		cmpl	$2056, %eax
 290      00
 291 0254 0F84D602 		je	.L12
 291      0000
 292 025a 3D100800 		cmpl	$2064, %eax
 292      00
 293 025f 0F858B00 		jne	.L87
 293      0000
 197:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 294              		.loc 1 197 18 view .LVU79
 295 0265 488B2D00 		movq	jpeg_idct_8x16@GOTPCREL(%rip), %rbp
 295      000000
 296              	.LVL37:
 198:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 297              		.loc 1 198 14 view .LVU80
 298 026c 31DB     		xorl	%ebx, %ebx
 299              	.LVL38:
 198:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 300              		.loc 1 198 14 view .LVU81
 301 026e E90DFEFF 		jmp	.L3
 301      FF
 302              	.LVL39:
 303              	.L79:
 102:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef IDCT_SCALING_SUPPORTED
 304              		.loc 1 102 5 view .LVU82
 305 0273 3D050500 		cmpl	$1285, %eax
 305      00
 306 0278 0F840201 		je	.L38
 306      0000
 307 027e 3D0A0500 		cmpl	$1290, %eax
 307      00
 308 0283 7539     		jne	.L88
 209:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 309              		.loc 1 209 18 view .LVU83
 310 0285 488B2D00 		movq	jpeg_idct_5x10@GOTPCREL(%rip), %rbp
 310      000000
 311              	.LVL40:
 210:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 312              		.loc 1 210 14 view .LVU84
 313 028c 31DB     		xorl	%ebx, %ebx
 314              	.LVL41:
 210:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 315              		.loc 1 210 14 view .LVU85
 316 028e E9EDFDFF 		jmp	.L3
 316      FF
 317              	.LVL42:
 318              		.p2align 4,,10
 319 0293 0F1F4400 		.p2align 3
 319      00
 320              	.L75:
 102:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef IDCT_SCALING_SUPPORTED
 321              		.loc 1 102 5 view .LVU86
 322 0298 3D010200 		cmpl	$513, %eax
 322      00
 323 029d 0F84FD00 		je	.L30
 323      0000
 324 02a3 7E64     		jle	.L89
 325 02a5 3D020200 		cmpl	$514, %eax
 325      00
 326 02aa 0F859D02 		jne	.L8
 326      0000
 327 02b0 488B2D00 		movq	jpeg_idct_2x2@GOTPCREL(%rip), %rbp
 327      000000
 328              	.LVL43:
 102:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef IDCT_SCALING_SUPPORTED
 329              		.loc 1 102 5 view .LVU87
 330 02b7 31DB     		xorl	%ebx, %ebx
 331              	.LVL44:
 102:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef IDCT_SCALING_SUPPORTED
 332              		.loc 1 102 5 view .LVU88
 333 02b9 E9C2FDFF 		jmp	.L3
 333      FF
 334              	.LVL45:
 335              	.L88:
 102:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef IDCT_SCALING_SUPPORTED
 336              		.loc 1 102 5 view .LVU89
 337 02be 3D080400 		cmpl	$1032, %eax
 337      00
 338 02c3 0F858402 		jne	.L8
 338      0000
 213:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 339              		.loc 1 213 18 view .LVU90
 340 02c9 488B2D00 		movq	jpeg_idct_4x8@GOTPCREL(%rip), %rbp
 340      000000
 341              	.LVL46:
 214:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 342              		.loc 1 214 14 view .LVU91
 343 02d0 31DB     		xorl	%ebx, %ebx
 344              	.LVL47:
 214:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 345              		.loc 1 214 14 view .LVU92
 346 02d2 E9A9FDFF 		jmp	.L3
 346      FF
 347              	.LVL48:
 348              	.L76:
 102:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef IDCT_SCALING_SUPPORTED
 349              		.loc 1 102 5 view .LVU93
 350 02d7 3D030300 		cmpl	$771, %eax
 350      00
 351 02dc 0F856B02 		jne	.L8
 351      0000
 113:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 352              		.loc 1 113 18 view .LVU94
 353 02e2 488B2D00 		movq	jpeg_idct_3x3@GOTPCREL(%rip), %rbp
 353      000000
 354              	.LVL49:
 114:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 355              		.loc 1 114 14 view .LVU95
 356 02e9 31DB     		xorl	%ebx, %ebx
 357              	.LVL50:
 114:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 358              		.loc 1 114 14 view .LVU96
 359 02eb E990FDFF 		jmp	.L3
 359      FF
 360              	.LVL51:
 361              	.L87:
 102:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef IDCT_SCALING_SUPPORTED
 362              		.loc 1 102 5 view .LVU97
 363 02f0 3D040800 		cmpl	$2052, %eax
 363      00
 364 02f5 0F855202 		jne	.L8
 364      0000
 181:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 365              		.loc 1 181 18 view .LVU98
 366 02fb 488B2D00 		movq	jpeg_idct_8x4@GOTPCREL(%rip), %rbp
 366      000000
 367              	.LVL52:
 182:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 368              		.loc 1 182 14 view .LVU99
 369 0302 31DB     		xorl	%ebx, %ebx
 370              	.LVL53:
 182:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 371              		.loc 1 182 14 view .LVU100
 372 0304 E977FDFF 		jmp	.L3
 372      FF
 373              	.LVL54:
 374              	.L89:
 102:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef IDCT_SCALING_SUPPORTED
 375              		.loc 1 102 5 view .LVU101
 376 0309 3D010100 		cmpl	$257, %eax
 376      00
 377 030e 7510     		jne	.L90
 105:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 378              		.loc 1 105 18 view .LVU102
 379 0310 488B2D00 		movq	jpeg_idct_1x1@GOTPCREL(%rip), %rbp
 379      000000
 380              	.LVL55:
 106:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 381              		.loc 1 106 14 view .LVU103
 382 0317 31DB     		xorl	%ebx, %ebx
 383              	.LVL56:
 106:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 384              		.loc 1 106 14 view .LVU104
 385 0319 E962FDFF 		jmp	.L3
 385      FF
 386              	.LVL57:
 387 031e 6690     		.p2align 4,,10
 388              		.p2align 3
 389              	.L90:
 102:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef IDCT_SCALING_SUPPORTED
 390              		.loc 1 102 5 view .LVU105
 391 0320 3D020100 		cmpl	$258, %eax
 391      00
 392 0325 0F852202 		jne	.L8
 392      0000
 225:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 393              		.loc 1 225 18 view .LVU106
 394 032b 488B2D00 		movq	jpeg_idct_1x2@GOTPCREL(%rip), %rbp
 394      000000
 395              	.LVL58:
 226:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 396              		.loc 1 226 14 view .LVU107
 397 0332 31DB     		xorl	%ebx, %ebx
 398              	.LVL59:
 226:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 399              		.loc 1 226 14 view .LVU108
 400 0334 E947FDFF 		jmp	.L3
 400      FF
 401              	.LVL60:
 402 0339 0F1F8000 		.p2align 4,,10
 402      000000
 403              		.p2align 3
 404              	.L41:
 205:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 405              		.loc 1 205 18 view .LVU109
 406 0340 488B2D00 		movq	jpeg_idct_6x12@GOTPCREL(%rip), %rbp
 406      000000
 407              	.LVL61:
 206:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 408              		.loc 1 206 14 view .LVU110
 409 0347 31DB     		xorl	%ebx, %ebx
 410              	.LVL62:
 206:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 411              		.loc 1 206 14 view .LVU111
 412 0349 E932FDFF 		jmp	.L3
 412      FF
 413              	.LVL63:
 414 034e 6690     		.p2align 4,,10
 415              		.p2align 3
 416              	.L55:
 165:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 417              		.loc 1 165 18 view .LVU112
 418 0350 488B2D00 		movq	jpeg_idct_16x8@GOTPCREL(%rip), %rbp
 418      000000
 419              	.LVL64:
 166:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 420              		.loc 1 166 14 view .LVU113
 421 0357 31DB     		xorl	%ebx, %ebx
 422              	.LVL65:
 166:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 423              		.loc 1 166 14 view .LVU114
 424 0359 E922FDFF 		jmp	.L3
 424      FF
 425              	.LVL66:
 426 035e 6690     		.p2align 4,,10
 427              		.p2align 3
 428              	.L52:
 149:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 429              		.loc 1 149 18 view .LVU115
 430 0360 488B2D00 		movq	jpeg_idct_13x13@GOTPCREL(%rip), %rbp
 430      000000
 431              	.LVL67:
 150:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 432              		.loc 1 150 14 view .LVU116
 433 0367 31DB     		xorl	%ebx, %ebx
 434              	.LVL68:
 150:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 435              		.loc 1 150 14 view .LVU117
 436 0369 E912FDFF 		jmp	.L3
 436      FF
 437              	.LVL69:
 438 036e 6690     		.p2align 4,,10
 439              		.p2align 3
 440              	.L48:
 137:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 441              		.loc 1 137 18 view .LVU118
 442 0370 488B2D00 		movq	jpeg_idct_10x10@GOTPCREL(%rip), %rbp
 442      000000
 443              	.LVL70:
 138:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 444              		.loc 1 138 14 view .LVU119
 445 0377 31DB     		xorl	%ebx, %ebx
 446              	.LVL71:
 138:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 447              		.loc 1 138 14 view .LVU120
 448 0379 E902FDFF 		jmp	.L3
 448      FF
 449              	.LVL72:
 450 037e 6690     		.p2align 4,,10
 451              		.p2align 3
 452              	.L38:
 121:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 453              		.loc 1 121 18 view .LVU121
 454 0380 488B2D00 		movq	jpeg_idct_5x5@GOTPCREL(%rip), %rbp
 454      000000
 455              	.LVL73:
 122:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 456              		.loc 1 122 14 view .LVU122
 457 0387 31DB     		xorl	%ebx, %ebx
 458              	.LVL74:
 122:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 459              		.loc 1 122 14 view .LVU123
 460 0389 E9F2FCFF 		jmp	.L3
 460      FF
 461              	.LVL75:
 462 038e 6690     		.p2align 4,,10
 463              		.p2align 3
 464              	.L34:
 217:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 465              		.loc 1 217 18 view .LVU124
 466 0390 488B2D00 		movq	jpeg_idct_3x6@GOTPCREL(%rip), %rbp
 466      000000
 467              	.LVL76:
 218:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 468              		.loc 1 218 14 view .LVU125
 469 0397 31DB     		xorl	%ebx, %ebx
 470              	.LVL77:
 218:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 471              		.loc 1 218 14 view .LVU126
 472 0399 E9E2FCFF 		jmp	.L3
 472      FF
 473              	.LVL78:
 474 039e 6690     		.p2align 4,,10
 475              		.p2align 3
 476              	.L30:
 193:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 477              		.loc 1 193 18 view .LVU127
 478 03a0 488B2D00 		movq	jpeg_idct_2x1@GOTPCREL(%rip), %rbp
 478      000000
 479              	.LVL79:
 194:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 480              		.loc 1 194 14 view .LVU128
 481 03a7 31DB     		xorl	%ebx, %ebx
 482              	.LVL80:
 194:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 483              		.loc 1 194 14 view .LVU129
 484 03a9 E9D2FCFF 		jmp	.L3
 484      FF
 485              	.LVL81:
 486 03ae 6690     		.p2align 4,,10
 487              		.p2align 3
 488              	.L37:
 185:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 489              		.loc 1 185 18 view .LVU130
 490 03b0 488B2D00 		movq	jpeg_idct_6x3@GOTPCREL(%rip), %rbp
 490      000000
 491              	.LVL82:
 186:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 492              		.loc 1 186 14 view .LVU131
 493 03b7 31DB     		xorl	%ebx, %ebx
 494              	.LVL83:
 186:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 495              		.loc 1 186 14 view .LVU132
 496 03b9 E9C2FCFF 		jmp	.L3
 496      FF
 497              	.LVL84:
 498 03be 6690     		.p2align 4,,10
 499              		.p2align 3
 500              	.L51:
 153:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 501              		.loc 1 153 18 view .LVU133
 502 03c0 488B2D00 		movq	jpeg_idct_14x14@GOTPCREL(%rip), %rbp
 502      000000
 503              	.LVL85:
 154:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 504              		.loc 1 154 14 view .LVU134
 505 03c7 31DB     		xorl	%ebx, %ebx
 506              	.LVL86:
 154:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 507              		.loc 1 154 14 view .LVU135
 508 03c9 E9B2FCFF 		jmp	.L3
 508      FF
 509              	.LVL87:
 510 03ce 6690     		.p2align 4,,10
 511              		.p2align 3
 512              	.L45:
 133:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 513              		.loc 1 133 18 view .LVU136
 514 03d0 488B2D00 		movq	jpeg_idct_9x9@GOTPCREL(%rip), %rbp
 514      000000
 515              	.LVL88:
 134:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 516              		.loc 1 134 14 view .LVU137
 517 03d7 31DB     		xorl	%ebx, %ebx
 518              	.LVL89:
 134:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 519              		.loc 1 134 14 view .LVU138
 520 03d9 E9A2FCFF 		jmp	.L3
 520      FF
 521              	.LVL90:
 522 03de 6690     		.p2align 4,,10
 523              		.p2align 3
 524              	.L1:
 352:fltk-1.3.4-1/jpeg/jddctmgr.c ****     }
 353:fltk-1.3.4-1/jpeg/jddctmgr.c ****   }
 354:fltk-1.3.4-1/jpeg/jddctmgr.c **** }
 525              		.loc 1 354 1 view .LVU139
 526 03e0 4883C418 		addq	$24, %rsp
 527              		.cfi_remember_state
 528              		.cfi_def_cfa_offset 56
 529 03e4 5B       		popq	%rbx
 530              		.cfi_def_cfa_offset 48
 531 03e5 5D       		popq	%rbp
 532              		.cfi_def_cfa_offset 40
 533 03e6 415C     		popq	%r12
 534              		.cfi_def_cfa_offset 32
 535 03e8 415D     		popq	%r13
 536              		.cfi_def_cfa_offset 24
 537 03ea 415E     		popq	%r14
 538              		.cfi_def_cfa_offset 16
 539 03ec 415F     		popq	%r15
 540              		.cfi_def_cfa_offset 8
 541              	.LVL91:
 542              		.loc 1 354 1 view .LVU140
 543 03ee C3       		ret
 544              	.LVL92:
 545 03ef 90       		.p2align 4,,10
 546              		.p2align 3
 547              	.L29:
 548              		.cfi_restore_state
 221:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 549              		.loc 1 221 18 view .LVU141
 550 03f0 488B2D00 		movq	jpeg_idct_2x4@GOTPCREL(%rip), %rbp
 550      000000
 551              	.LVL93:
 222:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 552              		.loc 1 222 14 view .LVU142
 553 03f7 31DB     		xorl	%ebx, %ebx
 554              	.LVL94:
 222:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 555              		.loc 1 222 14 view .LVU143
 556 03f9 E982FCFF 		jmp	.L3
 556      FF
 557              	.LVL95:
 558 03fe 6690     		.p2align 4,,10
 559              		.p2align 3
 560              	.L77:
 561              	.LBB5:
 280:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	for (i = 0; i < DCTSIZE2; i++) {
 562              		.loc 1 280 2 is_stmt 1 view .LVU144
 280:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	for (i = 0; i < DCTSIZE2; i++) {
 563              		.loc 1 280 20 is_stmt 0 view .LVU145
 564 0400 498B7534 		movq	52(%r13), %rsi
 565              	.LVL96:
 281:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 566              		.loc 1 281 2 is_stmt 1 view .LVU146
 281:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 567              		.loc 1 281 14 view .LVU147
 280:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	for (i = 0; i < DCTSIZE2; i++) {
 568              		.loc 1 280 20 is_stmt 0 view .LVU148
 569 0404 31C0     		xorl	%eax, %eax
 570              	.LVL97:
 571 0406 662E0F1F 		.p2align 4,,10
 571      84000000 
 571      0000
 572              		.p2align 3
 573              	.L20:
 282:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	}
 574              		.loc 1 282 4 is_stmt 1 discriminator 3 view .LVU149
 282:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	}
 575              		.loc 1 282 16 is_stmt 0 discriminator 3 view .LVU150
 576 0410 0FB71441 		movzwl	(%rcx,%rax,2), %edx
 577 0414 891486   		movl	%edx, (%rsi,%rax,4)
 281:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 578              		.loc 1 281 28 is_stmt 1 discriminator 3 view .LVU151
 579              	.LVL98:
 281:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 580              		.loc 1 281 14 discriminator 3 view .LVU152
 581 0417 4883C001 		addq	$1, %rax
 582              	.LVL99:
 281:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 583              		.loc 1 281 2 is_stmt 0 discriminator 3 view .LVU153
 584 041b 4883F840 		cmpq	$64, %rax
 585 041f 75EF     		jne	.L20
 586 0421 E9C2FCFF 		jmp	.L15
 586      FF
 587              	.LVL100:
 588 0426 662E0F1F 		.p2align 4,,10
 588      84000000 
 588      0000
 589              		.p2align 3
 590              	.L18:
 281:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 591              		.loc 1 281 2 discriminator 3 view .LVU154
 592              	.LBE5:
 593              	.LBB6:
 330:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	int row, col;
 594              		.loc 1 330 2 is_stmt 1 view .LVU155
 330:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	int row, col;
 595              		.loc 1 330 20 is_stmt 0 view .LVU156
 596 0430 4D8B4D34 		movq	52(%r13), %r9
 597              	.LVL101:
 331:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	static const double aanscalefactor[DCTSIZE] = {
 598              		.loc 1 331 2 is_stmt 1 view .LVU157
 332:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  1.0, 1.387039845, 1.306562965, 1.175875602,
 599              		.loc 1 332 2 view .LVU158
 337:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	for (row = 0; row < DCTSIZE; row++) {
 600              		.loc 1 337 2 view .LVU159
 338:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  for (col = 0; col < DCTSIZE; col++) {
 601              		.loc 1 338 2 view .LVU160
 338:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  for (col = 0; col < DCTSIZE; col++) {
 602              		.loc 1 338 16 view .LVU161
 330:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	int row, col;
 603              		.loc 1 330 20 is_stmt 0 view .LVU162
 604 0434 BE080000 		movl	$8, %esi
 604      00
 605 0439 4531D2   		xorl	%r10d, %r10d
 606 043c 660F28D4 		movapd	%xmm4, %xmm2
 607 0440 4C8D1D00 		leaq	aanscalefactor.4816(%rip), %r11
 607      000000
 608 0447 F20F101D 		movsd	.LC1(%rip), %xmm3
 608      00000000 
 609 044f 4D89D8   		movq	%r11, %r8
 610              	.LVL102:
 611              		.p2align 4,,10
 612 0452 660F1F44 		.p2align 3
 612      0000
 613              	.L22:
 339:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	    fmtbl[i] = (FLOAT_MULT_TYPE)
 614              		.loc 1 339 18 is_stmt 1 view .LVU163
 615              	.LBE6:
 616              	.LBB7:
 297:fltk-1.3.4-1/jpeg/jddctmgr.c **** #define CONST_BITS 14
 617              		.loc 1 297 20 is_stmt 0 view .LVU164
 618 0458 4C89D2   		movq	%r10, %rdx
 619 045b 660F28CC 		movapd	%xmm4, %xmm1
 620 045f EB0D     		jmp	.L24
 621              	.LVL103:
 622              		.p2align 4,,10
 623 0461 0F1F8000 		.p2align 3
 623      000000
 624              	.L23:
 297:fltk-1.3.4-1/jpeg/jddctmgr.c **** #define CONST_BITS 14
 625              		.loc 1 297 20 view .LVU165
 626 0468 F2410F10 		movsd	(%r8,%rdx,8), %xmm1
 626      0CD0
 627              	.L24:
 628              	.LVL104:
 297:fltk-1.3.4-1/jpeg/jddctmgr.c **** #define CONST_BITS 14
 629              		.loc 1 297 20 view .LVU166
 630              	.LBE7:
 631              	.LBB8:
 340:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	      ((double) qtbl->quantval[i] *
 632              		.loc 1 340 6 is_stmt 1 discriminator 3 view .LVU167
 341:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 633              		.loc 1 341 9 is_stmt 0 discriminator 3 view .LVU168
 634 046e 0FB70451 		movzwl	(%rcx,%rdx,2), %eax
 635 0472 660FEFC0 		pxor	%xmm0, %xmm0
 636 0476 F20F2AC0 		cvtsi2sdl	%eax, %xmm0
 341:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 637              		.loc 1 341 36 discriminator 3 view .LVU169
 638 047a F20F59C2 		mulsd	%xmm2, %xmm0
 342:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	    i++;
 639              		.loc 1 342 29 discriminator 3 view .LVU170
 640 047e F20F59C1 		mulsd	%xmm1, %xmm0
 342:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	    i++;
 641              		.loc 1 342 51 discriminator 3 view .LVU171
 642 0482 F20F59C3 		mulsd	%xmm3, %xmm0
 340:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	      ((double) qtbl->quantval[i] *
 643              		.loc 1 340 17 discriminator 3 view .LVU172
 644 0486 F20F5AC0 		cvtsd2ss	%xmm0, %xmm0
 645 048a F3410F11 		movss	%xmm0, (%r9,%rdx,4)
 645      0491
 343:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  }
 646              		.loc 1 343 6 is_stmt 1 discriminator 3 view .LVU173
 647              	.LVL105:
 339:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	    fmtbl[i] = (FLOAT_MULT_TYPE)
 648              		.loc 1 339 33 discriminator 3 view .LVU174
 339:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	    fmtbl[i] = (FLOAT_MULT_TYPE)
 649              		.loc 1 339 18 discriminator 3 view .LVU175
 650 0490 4883C201 		addq	$1, %rdx
 651              	.LVL106:
 339:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	    fmtbl[i] = (FLOAT_MULT_TYPE)
 652              		.loc 1 339 4 is_stmt 0 discriminator 3 view .LVU176
 653 0494 4839D6   		cmpq	%rdx, %rsi
 654 0497 75CF     		jne	.L23
 338:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  for (col = 0; col < DCTSIZE; col++) {
 655              		.loc 1 338 31 is_stmt 1 discriminator 2 view .LVU177
 656              	.LVL107:
 338:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  for (col = 0; col < DCTSIZE; col++) {
 657              		.loc 1 338 16 discriminator 2 view .LVU178
 658 0499 4983C208 		addq	$8, %r10
 659 049d 4983E840 		subq	$64, %r8
 338:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  for (col = 0; col < DCTSIZE; col++) {
 660              		.loc 1 338 2 is_stmt 0 discriminator 2 view .LVU179
 661 04a1 4883FE40 		cmpq	$64, %rsi
 662 04a5 0F843DFC 		je	.L15
 662      FFFF
 663 04ab F2410F10 		movsd	(%r11,%rsi), %xmm2
 663      1433
 664 04b1 4883C608 		addq	$8, %rsi
 665              	.LVL108:
 338:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  for (col = 0; col < DCTSIZE; col++) {
 666              		.loc 1 338 2 discriminator 2 view .LVU180
 667 04b5 EBA1     		jmp	.L22
 668              	.LVL109:
 669 04b7 660F1F84 		.p2align 4,,10
 669      00000000 
 669      00
 670              		.p2align 3
 671              	.L17:
 338:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  for (col = 0; col < DCTSIZE; col++) {
 672              		.loc 1 338 2 discriminator 2 view .LVU181
 673              	.LBE8:
 674              	.LBB9:
 297:fltk-1.3.4-1/jpeg/jddctmgr.c **** #define CONST_BITS 14
 675              		.loc 1 297 2 is_stmt 1 view .LVU182
 297:fltk-1.3.4-1/jpeg/jddctmgr.c **** #define CONST_BITS 14
 676              		.loc 1 297 20 is_stmt 0 view .LVU183
 677 04c0 4D8B4534 		movq	52(%r13), %r8
 678              	.LVL110:
 299:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  /* precomputed values scaled up by 14 bits */
 679              		.loc 1 299 2 is_stmt 1 view .LVU184
 312:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  ifmtbl[i] = (IFAST_MULT_TYPE)
 680              		.loc 1 312 2 view .LVU185
 312:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  ifmtbl[i] = (IFAST_MULT_TYPE)
 681              		.loc 1 312 14 view .LVU186
 297:fltk-1.3.4-1/jpeg/jddctmgr.c **** #define CONST_BITS 14
 682              		.loc 1 297 20 is_stmt 0 view .LVU187
 683 04c4 31D2     		xorl	%edx, %edx
 684 04c6 BE004000 		movl	$16384, %esi
 684      00
 685 04cb EB08     		jmp	.L21
 686              	.LVL111:
 687 04cd 0F1F00   		.p2align 4,,10
 688              		.p2align 3
 689              	.L91:
 297:fltk-1.3.4-1/jpeg/jddctmgr.c **** #define CONST_BITS 14
 690              		.loc 1 297 20 view .LVU188
 691 04d0 490FBF34 		movswq	(%r12,%rdx), %rsi
 691      14
 692              	.L21:
 313:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 693              		.loc 1 313 4 is_stmt 1 discriminator 3 view .LVU189
 314:fltk-1.3.4-1/jpeg/jddctmgr.c **** 				  (INT32) aanscales[i]),
 694              		.loc 1 314 6 is_stmt 0 discriminator 3 view .LVU190
 695 04d5 0FB70411 		movzwl	(%rcx,%rdx), %eax
 696 04d9 480FAFC6 		imulq	%rsi, %rax
 697 04dd 48050008 		addq	$2048, %rax
 697      0000
 698 04e3 48C1F80C 		sarq	$12, %rax
 313:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 699              		.loc 1 313 16 discriminator 3 view .LVU191
 700 04e7 41890450 		movl	%eax, (%r8,%rdx,2)
 312:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  ifmtbl[i] = (IFAST_MULT_TYPE)
 701              		.loc 1 312 28 is_stmt 1 discriminator 3 view .LVU192
 312:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  ifmtbl[i] = (IFAST_MULT_TYPE)
 702              		.loc 1 312 14 discriminator 3 view .LVU193
 703 04eb 4883C202 		addq	$2, %rdx
 312:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  ifmtbl[i] = (IFAST_MULT_TYPE)
 704              		.loc 1 312 2 is_stmt 0 discriminator 3 view .LVU194
 705 04ef 4881FA80 		cmpq	$128, %rdx
 705      000000
 706 04f6 75D8     		jne	.L91
 707 04f8 E9EBFBFF 		jmp	.L15
 707      FF
 708              	.LVL112:
 709              	.L44:
 312:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	  ifmtbl[i] = (IFAST_MULT_TYPE)
 710              		.loc 1 312 2 discriminator 3 view .LVU195
 711              	.LBE9:
 173:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 712              		.loc 1 173 18 view .LVU196
 713 04fd 488B2D00 		movq	jpeg_idct_12x6@GOTPCREL(%rip), %rbp
 713      000000
 714              	.LVL113:
 174:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 715              		.loc 1 174 14 view .LVU197
 716 0504 31DB     		xorl	%ebx, %ebx
 717              	.LVL114:
 174:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 718              		.loc 1 174 14 view .LVU198
 719 0506 E975FBFF 		jmp	.L3
 719      FF
 720              	.LVL115:
 721              	.L28:
 117:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 722              		.loc 1 117 18 view .LVU199
 723 050b 488B2D00 		movq	jpeg_idct_4x4@GOTPCREL(%rip), %rbp
 723      000000
 724              	.LVL116:
 118:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 725              		.loc 1 118 14 view .LVU200
 726 0512 31DB     		xorl	%ebx, %ebx
 727              	.LVL117:
 118:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 728              		.loc 1 118 14 view .LVU201
 729 0514 E967FBFF 		jmp	.L3
 729      FF
 730              	.LVL118:
 731              	.L27:
 201:fltk-1.3.4-1/jpeg/jddctmgr.c ****       method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 732              		.loc 1 201 18 view .LVU202
 733 0519 488B2D00 		movq	jpeg_idct_7x14@GOTPCREL(%rip), %rbp
 733      000000
 734              	.LVL119:
 202:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 735              		.loc 1 202 14 view .LVU203
 736 0520 31DB     		xorl	%ebx, %ebx
 737              	.LVL120:
 202:fltk-1.3.4-1/jpeg/jddctmgr.c ****       break;
 738              		.loc 1 202 14 view .LVU204
 739 0522 E959FBFF 		jmp	.L3
 739      FF
 740              	.LVL121:
 741 0527 660F1F84 		.p2align 4,,10
 741      00000000 
 741      00
 742              		.p2align 3
 743              	.L12:
 230:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef DCT_ISLOW_SUPPORTED
 744              		.loc 1 230 7 is_stmt 1 view .LVU205
 230:fltk-1.3.4-1/jpeg/jddctmgr.c **** #ifdef DCT_ISLOW_SUPPORTED
 745              		.loc 1 230 20 is_stmt 0 view .LVU206
 746 0530 8B4760   		movl	96(%rdi), %eax
 747 0533 83F801   		cmpl	$1, %eax
 748 0536 7472     		je	.L58
 749 0538 83F802   		cmpl	$2, %eax
 750 053b 744E     		je	.L59
 751 053d 85C0     		testl	%eax, %eax
 752 053f 745B     		je	.L60
 250:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	break;
 753              		.loc 1 250 2 is_stmt 1 view .LVU207
 754 0541 488B07   		movq	(%rdi), %rax
 755 0544 C7402831 		movl	$49, 40(%rax)
 755      000000
 756 054b EB1E     		jmp	.L73
 757              	.L8:
 255:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	       compptr->DCT_h_scaled_size, compptr->DCT_v_scaled_size);
 758              		.loc 1 255 7 view .LVU208
 759 054d 488B07   		movq	(%rdi), %rax
 760 0550 C7402807 		movl	$7, 40(%rax)
 760      000000
 761 0557 488B07   		movq	(%rdi), %rax
 762 055a 418B5500 		movl	0(%r13), %edx
 763 055e 89502C   		movl	%edx, 44(%rax)
 764 0561 488B07   		movq	(%rdi), %rax
 765 0564 418B5504 		movl	4(%r13), %edx
 766 0568 895030   		movl	%edx, 48(%rax)
 767              	.L73:
 255:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	       compptr->DCT_h_scaled_size, compptr->DCT_v_scaled_size);
 768              		.loc 1 255 7 is_stmt 0 view .LVU209
 769 056b 488B07   		movq	(%rdi), %rax
 770 056e 48897C24 		movq	%rdi, 8(%rsp)
 770      08
 771 0573 FF10     		call	*(%rax)
 772              	.LVL122:
 257:fltk-1.3.4-1/jpeg/jddctmgr.c ****     }
 773              		.loc 1 257 7 is_stmt 1 view .LVU210
 774 0575 488B0500 		movq	.LC0(%rip), %rax
 774      000000
 775 057c 488B7C24 		movq	8(%rsp), %rdi
 775      08
 776 0581 66480F6E 		movq	%rax, %xmm4
 776      E0
 777 0586 E9F5FAFF 		jmp	.L3
 777      FF
 778              	.L59:
 245:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	method = JDCT_FLOAT;
 779              		.loc 1 245 13 is_stmt 0 view .LVU211
 780 058b 488B2D00 		movq	jpeg_idct_float@GOTPCREL(%rip), %rbp
 780      000000
 781              	.LVL123:
 246:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	break;
 782              		.loc 1 246 9 view .LVU212
 783 0592 BB020000 		movl	$2, %ebx
 783      00
 784              	.LVL124:
 246:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	break;
 785              		.loc 1 246 9 view .LVU213
 786 0597 E9E4FAFF 		jmp	.L3
 786      FF
 787              	.LVL125:
 788              	.L60:
 233:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	method = JDCT_ISLOW;
 789              		.loc 1 233 13 view .LVU214
 790 059c 488B2D00 		movq	jpeg_idct_islow@GOTPCREL(%rip), %rbp
 790      000000
 791              	.LVL126:
 234:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	break;
 792              		.loc 1 234 9 view .LVU215
 793 05a3 31DB     		xorl	%ebx, %ebx
 794              	.LVL127:
 234:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	break;
 795              		.loc 1 234 9 view .LVU216
 796 05a5 E9D6FAFF 		jmp	.L3
 796      FF
 797              	.LVL128:
 798              	.L58:
 234:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	break;
 799              		.loc 1 234 9 view .LVU217
 800 05aa 488B2D00 		movq	jpeg_idct_ifast@GOTPCREL(%rip), %rbp
 800      000000
 801              	.LVL129:
 234:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	break;
 802              		.loc 1 234 9 view .LVU218
 803 05b1 BB010000 		movl	$1, %ebx
 803      00
 804              	.LVL130:
 234:fltk-1.3.4-1/jpeg/jddctmgr.c **** 	break;
 805              		.loc 1 234 9 view .LVU219
 806 05b6 E9C5FAFF 		jmp	.L3
 806      FF
 807              		.cfi_endproc
 808              	.LFE51:
 810              		.section	.text.jinit_inverse_dct,"ax",@progbits
 811              		.p2align 4
 812              		.globl	jinit_inverse_dct
 814              	jinit_inverse_dct:
 815              	.LVL131:
 816              	.LFB52:
 355:fltk-1.3.4-1/jpeg/jddctmgr.c **** 
 356:fltk-1.3.4-1/jpeg/jddctmgr.c **** 
 357:fltk-1.3.4-1/jpeg/jddctmgr.c **** /*
 358:fltk-1.3.4-1/jpeg/jddctmgr.c ****  * Initialize IDCT manager.
 359:fltk-1.3.4-1/jpeg/jddctmgr.c ****  */
 360:fltk-1.3.4-1/jpeg/jddctmgr.c **** 
 361:fltk-1.3.4-1/jpeg/jddctmgr.c **** GLOBAL(void)
 362:fltk-1.3.4-1/jpeg/jddctmgr.c **** jinit_inverse_dct (j_decompress_ptr cinfo)
 363:fltk-1.3.4-1/jpeg/jddctmgr.c **** {
 817              		.loc 1 363 1 is_stmt 1 view -0
 818              		.cfi_startproc
 819              		.loc 1 363 1 is_stmt 0 view .LVU221
 820 0000 F30F1EFA 		endbr64
 364:fltk-1.3.4-1/jpeg/jddctmgr.c ****   my_idct_ptr idct;
 821              		.loc 1 364 3 is_stmt 1 view .LVU222
 365:fltk-1.3.4-1/jpeg/jddctmgr.c ****   int ci;
 822              		.loc 1 365 3 view .LVU223
 366:fltk-1.3.4-1/jpeg/jddctmgr.c ****   jpeg_component_info *compptr;
 823              		.loc 1 366 3 view .LVU224
 367:fltk-1.3.4-1/jpeg/jddctmgr.c **** 
 368:fltk-1.3.4-1/jpeg/jddctmgr.c ****   idct = (my_idct_ptr)
 824              		.loc 1 368 3 view .LVU225
 363:fltk-1.3.4-1/jpeg/jddctmgr.c ****   my_idct_ptr idct;
 825              		.loc 1 363 1 is_stmt 0 view .LVU226
 826 0004 4156     		pushq	%r14
 827              		.cfi_def_cfa_offset 16
 828              		.cfi_offset 14, -16
 369:fltk-1.3.4-1/jpeg/jddctmgr.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 829              		.loc 1 369 6 view .LVU227
 830 0006 BA800000 		movl	$128, %edx
 830      00
 831 000b BE010000 		movl	$1, %esi
 831      00
 363:fltk-1.3.4-1/jpeg/jddctmgr.c ****   my_idct_ptr idct;
 832              		.loc 1 363 1 view .LVU228
 833 0010 4155     		pushq	%r13
 834              		.cfi_def_cfa_offset 24
 835              		.cfi_offset 13, -24
 836 0012 4989FD   		movq	%rdi, %r13
 837 0015 4154     		pushq	%r12
 838              		.cfi_def_cfa_offset 32
 839              		.cfi_offset 12, -32
 840 0017 55       		pushq	%rbp
 841              		.cfi_def_cfa_offset 40
 842              		.cfi_offset 6, -40
 843 0018 53       		pushq	%rbx
 844              		.cfi_def_cfa_offset 48
 845              		.cfi_offset 3, -48
 846              		.loc 1 369 6 view .LVU229
 847 0019 488B4708 		movq	8(%rdi), %rax
 848 001d FF10     		call	*(%rax)
 849              	.LVL132:
 370:fltk-1.3.4-1/jpeg/jddctmgr.c **** 				SIZEOF(my_idct_controller));
 371:fltk-1.3.4-1/jpeg/jddctmgr.c ****   cinfo->idct = &idct->pub;
 850              		.loc 1 371 15 view .LVU230
 851 001f 49898578 		movq	%rax, 632(%r13)
 851      020000
 369:fltk-1.3.4-1/jpeg/jddctmgr.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 852              		.loc 1 369 6 view .LVU231
 853 0026 4889C3   		movq	%rax, %rbx
 854              	.LVL133:
 855              		.loc 1 371 3 is_stmt 1 view .LVU232
 372:fltk-1.3.4-1/jpeg/jddctmgr.c ****   idct->pub.start_pass = start_pass;
 856              		.loc 1 372 3 view .LVU233
 857              		.loc 1 372 24 is_stmt 0 view .LVU234
 858 0029 488D0500 		leaq	start_pass(%rip), %rax
 858      000000
 859              	.LVL134:
 860              		.loc 1 372 24 view .LVU235
 861 0030 488903   		movq	%rax, (%rbx)
 373:fltk-1.3.4-1/jpeg/jddctmgr.c **** 
 374:fltk-1.3.4-1/jpeg/jddctmgr.c ****   for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 862              		.loc 1 374 3 is_stmt 1 view .LVU236
 863              	.LVL135:
 864              		.loc 1 374 3 is_stmt 0 view .LVU237
 865 0033 418B4538 		movl	56(%r13), %eax
 866              		.loc 1 374 24 view .LVU238
 867 0037 4D8BB530 		movq	304(%r13), %r14
 867      010000
 868              	.LVL136:
 869              		.loc 1 374 44 is_stmt 1 view .LVU239
 870              		.loc 1 374 3 is_stmt 0 view .LVU240
 871 003e 85C0     		testl	%eax, %eax
 872 0040 7E68     		jle	.L92
 873 0042 4531E4   		xorl	%r12d, %r12d
 874              	.LBB10:
 875              	.LBB11:
 876              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h"
   1:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** /* Copyright (C) 2004-2020 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    <https://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifndef _BITS_STRING_FORTIFIED_H
  19:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #define _BITS_STRING_FORTIFIED_H 1
  20:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  21:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifndef _STRING_H
  22:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** # error "Never use <bits/string_fortified.h> directly; include <string.h> instead."
  23:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  24:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  25:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #if !__GNUC_PREREQ (5,0)
  26:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __warndecl (__warn_memset_zero_len,
  27:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  28:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  29:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  30:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  32:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
  33:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  34:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  35:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  36:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  37:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  38:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memmove (void *__dest, const void *__src, size_t __len))
  39:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  40:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  41:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  42:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  43:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifdef __USE_GNU
  44:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  45:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
  46:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 		size_t __len))
  47:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  48:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
  49:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  50:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  51:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  52:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  53:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** /* The first two tests here help to catch a somewhat common problem
  54:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    where the second and third parameter are transposed.  This is
  55:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    especially problematic if the intended fill value is zero.  In this
  56:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    case no work is done at all.  We detect these problems by referring
  57:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    non-existing functions.  */
  58:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  59:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memset (void *__dest, int __ch, size_t __len))
  60:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  61:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   /* GCC-5.0 and newer implements these checks in the compiler, so we don't
  62:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****      need them here.  */
  63:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #if !__GNUC_PREREQ (5,0)
  64:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   if (__builtin_constant_p (__len) && __len == 0
  65:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       && (!__builtin_constant_p (__ch) || __ch != 0))
  66:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****     {
  67:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       __warn_memset_zero_len ();
  68:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       return __dest;
  69:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****     }
  70:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  71:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 877              		.loc 2 71 10 view .LVU241
 878 0045 31ED     		xorl	%ebp, %ebp
 879              	.LVL137:
 880 0047 660F1F84 		.p2align 4,,10
 880      00000000 
 880      00
 881              		.p2align 3
 882              	.L94:
 883              		.loc 2 71 10 view .LVU242
 884              	.LBE11:
 885              	.LBE10:
 375:fltk-1.3.4-1/jpeg/jddctmgr.c ****        ci++, compptr++) {
 376:fltk-1.3.4-1/jpeg/jddctmgr.c ****     /* Allocate and pre-zero a multiplier table for each component */
 377:fltk-1.3.4-1/jpeg/jddctmgr.c ****     compptr->dct_table =
 886              		.loc 1 377 5 is_stmt 1 view .LVU243
 378:fltk-1.3.4-1/jpeg/jddctmgr.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 887              		.loc 1 378 8 is_stmt 0 view .LVU244
 888 0050 498B4508 		movq	8(%r13), %rax
 889 0054 4C89EF   		movq	%r13, %rdi
 890 0057 BA000100 		movl	$256, %edx
 890      00
 375:fltk-1.3.4-1/jpeg/jddctmgr.c ****        ci++, compptr++) {
 891              		.loc 1 375 21 view .LVU245
 892 005c 4983C660 		addq	$96, %r14
 893              	.LVL138:
 894              		.loc 1 378 8 view .LVU246
 895 0060 BE010000 		movl	$1, %esi
 895      00
 896 0065 FF10     		call	*(%rax)
 897              	.LVL139:
 898              	.LBB14:
 899              	.LBB12:
 900              		.loc 2 71 10 view .LVU247
 901 0067 488D7808 		leaq	8(%rax), %rdi
 902              	.LBE12:
 903              	.LBE14:
 377:fltk-1.3.4-1/jpeg/jddctmgr.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 904              		.loc 1 377 24 view .LVU248
 905 006b 498946F8 		movq	%rax, -8(%r14)
 379:fltk-1.3.4-1/jpeg/jddctmgr.c **** 				  SIZEOF(multiplier_table));
 380:fltk-1.3.4-1/jpeg/jddctmgr.c ****     MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 906              		.loc 1 380 5 is_stmt 1 view .LVU249
 907              	.LVL140:
 908              	.LBB15:
 909              	.LBI10:
  59:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
 910              		.loc 2 59 1 view .LVU250
 911              	.LBB13:
 912              		.loc 2 71 3 view .LVU251
 913              		.loc 2 71 10 is_stmt 0 view .LVU252
 914 006f 4883E7F8 		andq	$-8, %rdi
 915 0073 48C70000 		movq	$0, (%rax)
 915      000000
 916 007a 48C780F8 		movq	$0, 248(%rax)
 916      00000000 
 916      000000
 917 0085 4829F8   		subq	%rdi, %rax
 918              	.LVL141:
 919              		.loc 2 71 10 view .LVU253
 920 0088 8D880001 		leal	256(%rax), %ecx
 920      0000
 921 008e 4889E8   		movq	%rbp, %rax
 922 0091 C1E903   		shrl	$3, %ecx
 923 0094 F348AB   		rep stosq
 924              	.LVL142:
 925              		.loc 2 71 10 view .LVU254
 926              	.LBE13:
 927              	.LBE15:
 381:fltk-1.3.4-1/jpeg/jddctmgr.c ****     /* Mark multiplier table not yet set up for any method */
 382:fltk-1.3.4-1/jpeg/jddctmgr.c ****     idct->cur_method[ci] = -1;
 928              		.loc 1 382 5 is_stmt 1 view .LVU255
 929              		.loc 1 382 26 is_stmt 0 view .LVU256
 930 0097 42C744A3 		movl	$-1, 88(%rbx,%r12,4)
 930      58FFFFFF 
 930      FF
 375:fltk-1.3.4-1/jpeg/jddctmgr.c ****     /* Allocate and pre-zero a multiplier table for each component */
 931              		.loc 1 375 8 is_stmt 1 view .LVU257
 932              	.LVL143:
 374:fltk-1.3.4-1/jpeg/jddctmgr.c ****        ci++, compptr++) {
 933              		.loc 1 374 44 view .LVU258
 934 00a0 4983C401 		addq	$1, %r12
 935              	.LVL144:
 374:fltk-1.3.4-1/jpeg/jddctmgr.c ****        ci++, compptr++) {
 936              		.loc 1 374 3 is_stmt 0 view .LVU259
 937 00a4 45396538 		cmpl	%r12d, 56(%r13)
 938 00a8 7FA6     		jg	.L94
 939              	.L92:
 383:fltk-1.3.4-1/jpeg/jddctmgr.c ****   }
 384:fltk-1.3.4-1/jpeg/jddctmgr.c **** }
 940              		.loc 1 384 1 view .LVU260
 941 00aa 5B       		popq	%rbx
 942              		.cfi_def_cfa_offset 40
 943              	.LVL145:
 944              		.loc 1 384 1 view .LVU261
 945 00ab 5D       		popq	%rbp
 946              		.cfi_def_cfa_offset 32
 947 00ac 415C     		popq	%r12
 948              		.cfi_def_cfa_offset 24
 949 00ae 415D     		popq	%r13
 950              		.cfi_def_cfa_offset 16
 951              	.LVL146:
 952              		.loc 1 384 1 view .LVU262
 953 00b0 415E     		popq	%r14
 954              		.cfi_def_cfa_offset 8
 955              	.LVL147:
 956              		.loc 1 384 1 view .LVU263
 957 00b2 C3       		ret
 958              		.cfi_endproc
 959              	.LFE52:
 961              		.section	.rodata.aanscalefactor.4816,"a"
 962              		.align 32
 965              	aanscalefactor.4816:
 966 0000 00000000 		.long	0
 967 0004 0000F03F 		.long	1072693248
 968 0008 EF6148B1 		.long	2974310895
 969 000c 5031F63F 		.long	1073099088
 970 0010 CA6F4D91 		.long	2437771210
 971 0014 AEE7F43F 		.long	1073014702
 972 0018 AA116CEF 		.long	4016837034
 973 001c 62D0F23F 		.long	1072877666
 974 0020 00000000 		.long	0
 975 0024 0000F03F 		.long	1072693248
 976 0028 3BBFA7C0 		.long	3232218939
 977 002c 6924E93F 		.long	1072243817
 978 0030 BB20C77B 		.long	2076647611
 979 0034 7A51E13F 		.long	1071731066
 980 0038 5DAB72DE 		.long	3732056925
 981 003c 55A8D13F 		.long	1070704725
 982              		.section	.rodata.aanscales.4808,"a"
 983              		.align 32
 986              	aanscales.4808:
 1051              		.section	.rodata.cst8,"aM",@progbits,8
 1052              		.align 8
 1053              	.LC0:
 1054 0000 00000000 		.long	0
 1055 0004 0000F03F 		.long	1072693248
 1056              		.align 8
 1057              	.LC1:
 1058 0008 00000000 		.long	0
 1059 000c 0000C03F 		.long	1069547520
 1060              		.text
 1061              	.Letext0:
 1062              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 1063              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 1064              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 1065              		.file 6 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 1066              		.file 7 "/usr/include/stdio.h"
 1067              		.file 8 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 1068              		.file 9 "fltk-1.3.4-1/jpeg/jmorecfg.h"
 1069              		.file 10 "fltk-1.3.4-1/jpeg/jpeglib.h"
 1070              		.file 11 "fltk-1.3.4-1/jpeg/jpegint.h"
 1071              		.file 12 "fltk-1.3.4-1/jpeg/jerror.h"
 1072              		.file 13 "fltk-1.3.4-1/jpeg/jdct.h"
 13251              		.section	.note.gnu.property,"a"
 13252              		.align 8
 13253 0000 04000000 		.long	 1f - 0f
 13254 0004 10000000 		.long	 4f - 1f
 13255 0008 05000000 		.long	 5
 13256              	0:
 13257 000c 474E5500 		.string	 "GNU"
 13258              	1:
 13259              		.align 8
 13260 0010 020000C0 		.long	 0xc0000002
 13261 0014 04000000 		.long	 3f - 2f
 13262              	2:
 13263 0018 03000000 		.long	 0x3
 13264              	3:
 13265 001c 00000000 		.align 8
 13266              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 jddctmgr.c
     /tmp/cczCwRLp.s:7      .text.start_pass:0000000000000000 start_pass
     /tmp/cczCwRLp.s:986    .rodata.aanscales.4808:0000000000000000 aanscales.4808
     /tmp/cczCwRLp.s:965    .rodata.aanscalefactor.4816:0000000000000000 aanscalefactor.4816
     /tmp/cczCwRLp.s:814    .text.jinit_inverse_dct:0000000000000000 jinit_inverse_dct
     /tmp/cczCwRLp.s:1053   .rodata.cst8:0000000000000000 .LC0
     /tmp/cczCwRLp.s:1057   .rodata.cst8:0000000000000008 .LC1
                           .group:0000000000000000 wm4.0.a6b23a418548ac0bda5d8549c4a2ec91
                           .group:0000000000000000 wm4.stdcpredef.h.19.8dc41bed5d9037ff9622e015fb5f0ce3
                           .group:0000000000000000 wm4.jconfig.h.10.247fc3ff67998f3074970b1373c70333
                           .group:0000000000000000 wm4.features.h.19.5b5f5a19624a0527f479fdc52d54808f
                           .group:0000000000000000 wm4.cdefs.h.19.98d80eddbb3f64f4f30cd9aee9c5593c
                           .group:0000000000000000 wm4.wordsize.h.4.baf119258a1e53d8dba67ceac44ab6bc
                           .group:0000000000000000 wm4.cdefs.h.475.fb75d2e4416aa349344e6f45f683bf28
                           .group:0000000000000000 wm4.stubs64.h.10.6ce4c34010988db072c080326a6b6319
                           .group:0000000000000000 wm4.libcheaderstart.h.37.d9274df4cc0172452960ad9644fa5579
                           .group:0000000000000000 wm4.stdlib.h.28.2cffa49d94c5d85f4538f55f7b59771d
                           .group:0000000000000000 wm4.stddef.h.181.13772e73e5434e8cc4fafaaddad2b5da
                           .group:0000000000000000 wm4.waitflags.h.25.41934de4af99038521c2782f418699b1
                           .group:0000000000000000 wm4.waitstatus.h.28.93f167f49d64e2b9b99f98d1162a93bf
                           .group:0000000000000000 wm4.stdlib.h.43.9fa4f727a2f1cb8d2450a574c9195553
                           .group:0000000000000000 wm4.floatn.h.20.80c7cf8a8dfad237004b28d051d5afda
                           .group:0000000000000000 wm4.floatncommon.h.34.7e1840d7dfb19e9bdb51aeb077d76637
                           .group:0000000000000000 wm4.stdlib.h.71.2927e068ec678159b4f68ec2f089f7e6
                           .group:0000000000000000 wm4.types.h.109.56eb9ae966b255288cc544f18746a7ff
                           .group:0000000000000000 wm4.typesizes.h.24.2c64f817c0dc4b6fb2a2c619d717be26
                           .group:0000000000000000 wm4.time64.h.24.a8166ae916ec910dab0d8987098d42ee
                           .group:0000000000000000 wm4.types.h.40.18f72bab8242c2bb4c532a2aa95b5f00
                           .group:0000000000000000 wm4.stddef.h.231.0adce5c8c1fd8096aaff50981b3d1f0f
                           .group:0000000000000000 wm4.endian.h.20.efabd1018df5d7b4052c27dc6bdd5ce5
                           .group:0000000000000000 wm4.endianness.h.2.2c6a211f7909f3af5e9e9cfa3b6b63c8
                           .group:0000000000000000 wm4.endian.h.40.9e5d395adda2f4eb53ae69b69b664084
                           .group:0000000000000000 wm4.endian.h.27.4c4f94262c4eaee2982fe00ed1b4f173
                           .group:0000000000000000 wm4.byteswap.h.24.5363c019348146aada5aeadf51456576
                           .group:0000000000000000 wm4.endian.h.39.30a606dbd99b6c3df61c1f06dbdabd4e
                           .group:0000000000000000 wm4.select.h.28.eb2f3debdbcffd1442ebddaebc4fb6ff
                           .group:0000000000000000 wm4.__sigset_t.h.2.6b1ab6ff3d7b8fd9c0c42b0d80afbd80
                           .group:0000000000000000 wm4.select.h.44.887a4ff60aa97fcd9c1be017735e1675
                           .group:0000000000000000 wm4.select2.h.27.f95f2ab0ffee66dc1b6575014894b21a
                           .group:0000000000000000 wm4.types.h.186.489a4ed8f2d29cd358843490f54ddea5
                           .group:0000000000000000 wm4.pthreadtypesarch.h.25.6063cba99664c916e22d3a912bcc348a
                           .group:0000000000000000 wm4.struct_mutex.h.20.ed51f515172b9be99e450ba83eb5dd99
                           .group:0000000000000000 wm4.struct_rwlock.h.21.0254880f2904e3833fb8ae683e0f0330
                           .group:0000000000000000 wm4.alloca.h.19.edefa922a76c1cbaaf1e416903ba2d1c
                           .group:0000000000000000 wm4.alloca.h.29.156e12058824cc23d961c4d3b13031f6
                           .group:0000000000000000 wm4.stdio.h.24.5c1b97eef3c86b7a2549420f69f4f128
                           .group:0000000000000000 wm4.libcheaderstart.h.31.87b3c285aeba93fe355ad19123070832
                           .group:0000000000000000 wm4.stdio.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.stddef.h.231.8136eebbab3406dbf57a7ec475dd5d83
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.struct_FILE.h.19.0888ac70396abe1031c03d393554032f
                           .group:0000000000000000 wm4.stdio.h.53.139e45cf040c0964b2932c0c1bdaf6b2
                           .group:0000000000000000 wm4.stdio_lim.h.19.e4b00b560d878dcfbc6635b3406640c5
                           .group:0000000000000000 wm4.stdio.h.141.d7a290e19ca077c9e4aa7c43ede17a73
                           .group:0000000000000000 wm4.stdio.h.20.b0caa08e5723aa5941367be0e5d2ec59
                           .group:0000000000000000 wm4.stdio2.h.20.f45a0373b68e1296c4aa8cc09d66a9df
                           .group:0000000000000000 wm4.string.h.23.93403f89af7dba8212345449bb14b09d
                           .group:0000000000000000 wm4.string.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.strings.h.19.a259f126920b1bb5ef76bc62b3984a3c
                           .group:0000000000000000 wm4.jinclude.h.67.b19f941ec97c4845fa4609292c7e2db4
                           .group:0000000000000000 wm4.jmorecfg.h.33.3b4c5f9cc07b3737823b06caf24d5b05
                           .group:0000000000000000 wm4.jpeglib.h.40.4f111c27252a38df39328d65454e82f4
                           .group:0000000000000000 wm4.jpegint.h.26.5219ef5d4e4921371d38e77b6091fd20
                           .group:0000000000000000 wm4.jerror.h.25.1dbd8674e70ab5215bc0037320e5c2a2
                           .group:0000000000000000 wm4.jdct.h.68.77a1fce97df2af4ec80ad9c80171cb02

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
jpeg_idct_4x2
jpeg_idct_7x7
jpeg_idct_16x16
jpeg_idct_6x6
jpeg_idct_15x15
jpeg_idct_14x7
jpeg_idct_11x11
jpeg_idct_12x12
jpeg_idct_10x5
jpeg_idct_8x16
jpeg_idct_5x10
jpeg_idct_2x2
jpeg_idct_4x8
jpeg_idct_3x3
jpeg_idct_8x4
jpeg_idct_1x1
jpeg_idct_1x2
jpeg_idct_6x12
jpeg_idct_16x8
jpeg_idct_13x13
jpeg_idct_10x10
jpeg_idct_5x5
jpeg_idct_3x6
jpeg_idct_2x1
jpeg_idct_6x3
jpeg_idct_14x14
jpeg_idct_9x9
jpeg_idct_2x4
jpeg_idct_12x6
jpeg_idct_4x4
jpeg_idct_7x14
jpeg_idct_float
jpeg_idct_islow
jpeg_idct_ifast
