   1              		.file	"jdmaster.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.unlikely.prepare_for_output_pass,"ax",@progbits
   5              	.LCOLDB0:
   6              		.section	.text.prepare_for_output_pass,"ax",@progbits
   7              	.LHOTB0:
   8              		.p2align 4,,15
   9              		.section	.text.unlikely.prepare_for_output_pass
  10              	.Ltext_cold0:
  11              		.section	.text.prepare_for_output_pass
  13              	prepare_for_output_pass:
  14              	.LFB65:
  15              		.file 1 "fltk-1.3.4-1/jpeg/jdmaster.c"
   1:fltk-1.3.4-1/jpeg/jdmaster.c **** /*
   2:fltk-1.3.4-1/jpeg/jdmaster.c ****  * jdmaster.c
   3:fltk-1.3.4-1/jpeg/jdmaster.c ****  *
   4:fltk-1.3.4-1/jpeg/jdmaster.c ****  * Copyright (C) 1991-1997, Thomas G. Lane.
   5:fltk-1.3.4-1/jpeg/jdmaster.c ****  * Modified 2002-2013 by Guido Vollbeding.
   6:fltk-1.3.4-1/jpeg/jdmaster.c ****  * This file is part of the Independent JPEG Group's software.
   7:fltk-1.3.4-1/jpeg/jdmaster.c ****  * For conditions of distribution and use, see the accompanying README file.
   8:fltk-1.3.4-1/jpeg/jdmaster.c ****  *
   9:fltk-1.3.4-1/jpeg/jdmaster.c ****  * This file contains master control logic for the JPEG decompressor.
  10:fltk-1.3.4-1/jpeg/jdmaster.c ****  * These routines are concerned with selecting the modules to be executed
  11:fltk-1.3.4-1/jpeg/jdmaster.c ****  * and with determining the number of passes and the work to be done in each
  12:fltk-1.3.4-1/jpeg/jdmaster.c ****  * pass.
  13:fltk-1.3.4-1/jpeg/jdmaster.c ****  */
  14:fltk-1.3.4-1/jpeg/jdmaster.c **** 
  15:fltk-1.3.4-1/jpeg/jdmaster.c **** #define JPEG_INTERNALS
  16:fltk-1.3.4-1/jpeg/jdmaster.c **** #include "jinclude.h"
  17:fltk-1.3.4-1/jpeg/jdmaster.c **** #include "jpeglib.h"
  18:fltk-1.3.4-1/jpeg/jdmaster.c **** 
  19:fltk-1.3.4-1/jpeg/jdmaster.c **** 
  20:fltk-1.3.4-1/jpeg/jdmaster.c **** /* Private state */
  21:fltk-1.3.4-1/jpeg/jdmaster.c **** 
  22:fltk-1.3.4-1/jpeg/jdmaster.c **** typedef struct {
  23:fltk-1.3.4-1/jpeg/jdmaster.c ****   struct jpeg_decomp_master pub; /* public fields */
  24:fltk-1.3.4-1/jpeg/jdmaster.c **** 
  25:fltk-1.3.4-1/jpeg/jdmaster.c ****   int pass_number;		/* # of passes completed */
  26:fltk-1.3.4-1/jpeg/jdmaster.c **** 
  27:fltk-1.3.4-1/jpeg/jdmaster.c ****   boolean using_merged_upsample; /* TRUE if using merged upsample/cconvert */
  28:fltk-1.3.4-1/jpeg/jdmaster.c **** 
  29:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* Saved references to initialized quantizer modules,
  30:fltk-1.3.4-1/jpeg/jdmaster.c ****    * in case we need to switch modes.
  31:fltk-1.3.4-1/jpeg/jdmaster.c ****    */
  32:fltk-1.3.4-1/jpeg/jdmaster.c ****   struct jpeg_color_quantizer * quantizer_1pass;
  33:fltk-1.3.4-1/jpeg/jdmaster.c ****   struct jpeg_color_quantizer * quantizer_2pass;
  34:fltk-1.3.4-1/jpeg/jdmaster.c **** } my_decomp_master;
  35:fltk-1.3.4-1/jpeg/jdmaster.c **** 
  36:fltk-1.3.4-1/jpeg/jdmaster.c **** typedef my_decomp_master * my_master_ptr;
  37:fltk-1.3.4-1/jpeg/jdmaster.c **** 
  38:fltk-1.3.4-1/jpeg/jdmaster.c **** 
  39:fltk-1.3.4-1/jpeg/jdmaster.c **** /*
  40:fltk-1.3.4-1/jpeg/jdmaster.c ****  * Determine whether merged upsample/color conversion should be used.
  41:fltk-1.3.4-1/jpeg/jdmaster.c ****  * CRUCIAL: this must match the actual capabilities of jdmerge.c!
  42:fltk-1.3.4-1/jpeg/jdmaster.c ****  */
  43:fltk-1.3.4-1/jpeg/jdmaster.c **** 
  44:fltk-1.3.4-1/jpeg/jdmaster.c **** LOCAL(boolean)
  45:fltk-1.3.4-1/jpeg/jdmaster.c **** use_merged_upsample (j_decompress_ptr cinfo)
  46:fltk-1.3.4-1/jpeg/jdmaster.c **** {
  47:fltk-1.3.4-1/jpeg/jdmaster.c **** #ifdef UPSAMPLE_MERGING_SUPPORTED
  48:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* Merging is the equivalent of plain box-filter upsampling */
  49:fltk-1.3.4-1/jpeg/jdmaster.c ****   if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
  50:fltk-1.3.4-1/jpeg/jdmaster.c ****     return FALSE;
  51:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* jdmerge.c only supports YCC=>RGB color conversion */
  52:fltk-1.3.4-1/jpeg/jdmaster.c ****   if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
  53:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->out_color_space != JCS_RGB ||
  54:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->out_color_components != RGB_PIXELSIZE ||
  55:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->color_transform)
  56:fltk-1.3.4-1/jpeg/jdmaster.c ****     return FALSE;
  57:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* and it only handles 2h1v or 2h2v sampling ratios */
  58:fltk-1.3.4-1/jpeg/jdmaster.c ****   if (cinfo->comp_info[0].h_samp_factor != 2 ||
  59:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->comp_info[1].h_samp_factor != 1 ||
  60:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->comp_info[2].h_samp_factor != 1 ||
  61:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->comp_info[0].v_samp_factor >  2 ||
  62:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->comp_info[1].v_samp_factor != 1 ||
  63:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->comp_info[2].v_samp_factor != 1)
  64:fltk-1.3.4-1/jpeg/jdmaster.c ****     return FALSE;
  65:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* furthermore, it doesn't work if we've scaled the IDCTs differently */
  66:fltk-1.3.4-1/jpeg/jdmaster.c ****   if (cinfo->comp_info[0].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
  67:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
  68:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
  69:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
  70:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
  71:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->comp_info[2].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size)
  72:fltk-1.3.4-1/jpeg/jdmaster.c ****     return FALSE;
  73:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* ??? also need to test for upsample-time rescaling, when & if supported */
  74:fltk-1.3.4-1/jpeg/jdmaster.c ****   return TRUE;			/* by golly, it'll work... */
  75:fltk-1.3.4-1/jpeg/jdmaster.c **** #else
  76:fltk-1.3.4-1/jpeg/jdmaster.c ****   return FALSE;
  77:fltk-1.3.4-1/jpeg/jdmaster.c **** #endif
  78:fltk-1.3.4-1/jpeg/jdmaster.c **** }
  79:fltk-1.3.4-1/jpeg/jdmaster.c **** 
  80:fltk-1.3.4-1/jpeg/jdmaster.c **** 
  81:fltk-1.3.4-1/jpeg/jdmaster.c **** /*
  82:fltk-1.3.4-1/jpeg/jdmaster.c ****  * Compute output image dimensions and related values.
  83:fltk-1.3.4-1/jpeg/jdmaster.c ****  * NOTE: this is exported for possible use by application.
  84:fltk-1.3.4-1/jpeg/jdmaster.c ****  * Hence it mustn't do anything that can't be done twice.
  85:fltk-1.3.4-1/jpeg/jdmaster.c ****  * Also note that it may be called before the master module is initialized!
  86:fltk-1.3.4-1/jpeg/jdmaster.c ****  */
  87:fltk-1.3.4-1/jpeg/jdmaster.c **** 
  88:fltk-1.3.4-1/jpeg/jdmaster.c **** GLOBAL(void)
  89:fltk-1.3.4-1/jpeg/jdmaster.c **** jpeg_calc_output_dimensions (j_decompress_ptr cinfo)
  90:fltk-1.3.4-1/jpeg/jdmaster.c **** /* Do computations that are needed before master selection phase.
  91:fltk-1.3.4-1/jpeg/jdmaster.c ****  * This function is used for full decompression.
  92:fltk-1.3.4-1/jpeg/jdmaster.c ****  */
  93:fltk-1.3.4-1/jpeg/jdmaster.c **** {
  94:fltk-1.3.4-1/jpeg/jdmaster.c **** #ifdef IDCT_SCALING_SUPPORTED
  95:fltk-1.3.4-1/jpeg/jdmaster.c ****   int ci;
  96:fltk-1.3.4-1/jpeg/jdmaster.c ****   jpeg_component_info *compptr;
  97:fltk-1.3.4-1/jpeg/jdmaster.c **** #endif
  98:fltk-1.3.4-1/jpeg/jdmaster.c **** 
  99:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* Prevent application from calling me at wrong times */
 100:fltk-1.3.4-1/jpeg/jdmaster.c ****   if (cinfo->global_state != DSTATE_READY)
 101:fltk-1.3.4-1/jpeg/jdmaster.c ****     ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 102:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 103:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* Compute core output image dimensions and DCT scaling choices. */
 104:fltk-1.3.4-1/jpeg/jdmaster.c ****   jpeg_core_output_dimensions(cinfo);
 105:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 106:fltk-1.3.4-1/jpeg/jdmaster.c **** #ifdef IDCT_SCALING_SUPPORTED
 107:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 108:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* In selecting the actual DCT scaling for each component, we try to
 109:fltk-1.3.4-1/jpeg/jdmaster.c ****    * scale up the chroma components via IDCT scaling rather than upsampling.
 110:fltk-1.3.4-1/jpeg/jdmaster.c ****    * This saves time if the upsampler gets to use 1:1 scaling.
 111:fltk-1.3.4-1/jpeg/jdmaster.c ****    * Note this code adapts subsampling ratios which are powers of 2.
 112:fltk-1.3.4-1/jpeg/jdmaster.c ****    */
 113:fltk-1.3.4-1/jpeg/jdmaster.c ****   for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 114:fltk-1.3.4-1/jpeg/jdmaster.c ****        ci++, compptr++) {
 115:fltk-1.3.4-1/jpeg/jdmaster.c ****     int ssize = 1;
 116:fltk-1.3.4-1/jpeg/jdmaster.c ****     while (cinfo->min_DCT_h_scaled_size * ssize <=
 117:fltk-1.3.4-1/jpeg/jdmaster.c **** 	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 118:fltk-1.3.4-1/jpeg/jdmaster.c **** 	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
 119:fltk-1.3.4-1/jpeg/jdmaster.c ****       ssize = ssize * 2;
 120:fltk-1.3.4-1/jpeg/jdmaster.c ****     }
 121:fltk-1.3.4-1/jpeg/jdmaster.c ****     compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
 122:fltk-1.3.4-1/jpeg/jdmaster.c ****     ssize = 1;
 123:fltk-1.3.4-1/jpeg/jdmaster.c ****     while (cinfo->min_DCT_v_scaled_size * ssize <=
 124:fltk-1.3.4-1/jpeg/jdmaster.c **** 	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 125:fltk-1.3.4-1/jpeg/jdmaster.c **** 	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
 126:fltk-1.3.4-1/jpeg/jdmaster.c ****       ssize = ssize * 2;
 127:fltk-1.3.4-1/jpeg/jdmaster.c ****     }
 128:fltk-1.3.4-1/jpeg/jdmaster.c ****     compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
 129:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 130:fltk-1.3.4-1/jpeg/jdmaster.c ****     /* We don't support IDCT ratios larger than 2. */
 131:fltk-1.3.4-1/jpeg/jdmaster.c ****     if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 132:fltk-1.3.4-1/jpeg/jdmaster.c **** 	compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
 133:fltk-1.3.4-1/jpeg/jdmaster.c ****     else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
 134:fltk-1.3.4-1/jpeg/jdmaster.c **** 	compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
 135:fltk-1.3.4-1/jpeg/jdmaster.c ****   }
 136:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 137:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* Recompute downsampled dimensions of components;
 138:fltk-1.3.4-1/jpeg/jdmaster.c ****    * application needs to know these if using raw downsampled data.
 139:fltk-1.3.4-1/jpeg/jdmaster.c ****    */
 140:fltk-1.3.4-1/jpeg/jdmaster.c ****   for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 141:fltk-1.3.4-1/jpeg/jdmaster.c ****        ci++, compptr++) {
 142:fltk-1.3.4-1/jpeg/jdmaster.c ****     /* Size in samples, after IDCT scaling */
 143:fltk-1.3.4-1/jpeg/jdmaster.c ****     compptr->downsampled_width = (JDIMENSION)
 144:fltk-1.3.4-1/jpeg/jdmaster.c ****       jdiv_round_up((long) cinfo->image_width *
 145:fltk-1.3.4-1/jpeg/jdmaster.c **** 		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 146:fltk-1.3.4-1/jpeg/jdmaster.c **** 		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 147:fltk-1.3.4-1/jpeg/jdmaster.c ****     compptr->downsampled_height = (JDIMENSION)
 148:fltk-1.3.4-1/jpeg/jdmaster.c ****       jdiv_round_up((long) cinfo->image_height *
 149:fltk-1.3.4-1/jpeg/jdmaster.c **** 		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 150:fltk-1.3.4-1/jpeg/jdmaster.c **** 		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 151:fltk-1.3.4-1/jpeg/jdmaster.c ****   }
 152:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 153:fltk-1.3.4-1/jpeg/jdmaster.c **** #endif /* IDCT_SCALING_SUPPORTED */
 154:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 155:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* Report number of components in selected colorspace. */
 156:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* Probably this should be in the color conversion module... */
 157:fltk-1.3.4-1/jpeg/jdmaster.c ****   switch (cinfo->out_color_space) {
 158:fltk-1.3.4-1/jpeg/jdmaster.c ****   case JCS_GRAYSCALE:
 159:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->out_color_components = 1;
 160:fltk-1.3.4-1/jpeg/jdmaster.c ****     break;
 161:fltk-1.3.4-1/jpeg/jdmaster.c ****   case JCS_RGB:
 162:fltk-1.3.4-1/jpeg/jdmaster.c ****   case JCS_BG_RGB:
 163:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->out_color_components = RGB_PIXELSIZE;
 164:fltk-1.3.4-1/jpeg/jdmaster.c ****     break;
 165:fltk-1.3.4-1/jpeg/jdmaster.c ****   case JCS_YCbCr:
 166:fltk-1.3.4-1/jpeg/jdmaster.c ****   case JCS_BG_YCC:
 167:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->out_color_components = 3;
 168:fltk-1.3.4-1/jpeg/jdmaster.c ****     break;
 169:fltk-1.3.4-1/jpeg/jdmaster.c ****   case JCS_CMYK:
 170:fltk-1.3.4-1/jpeg/jdmaster.c ****   case JCS_YCCK:
 171:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->out_color_components = 4;
 172:fltk-1.3.4-1/jpeg/jdmaster.c ****     break;
 173:fltk-1.3.4-1/jpeg/jdmaster.c ****   default:			/* else must be same colorspace as in file */
 174:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->out_color_components = cinfo->num_components;
 175:fltk-1.3.4-1/jpeg/jdmaster.c ****     break;
 176:fltk-1.3.4-1/jpeg/jdmaster.c ****   }
 177:fltk-1.3.4-1/jpeg/jdmaster.c ****   cinfo->output_components = (cinfo->quantize_colors ? 1 :
 178:fltk-1.3.4-1/jpeg/jdmaster.c **** 			      cinfo->out_color_components);
 179:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 180:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* See if upsampler will want to emit more than one row at a time */
 181:fltk-1.3.4-1/jpeg/jdmaster.c ****   if (use_merged_upsample(cinfo))
 182:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
 183:fltk-1.3.4-1/jpeg/jdmaster.c ****   else
 184:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->rec_outbuf_height = 1;
 185:fltk-1.3.4-1/jpeg/jdmaster.c **** }
 186:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 187:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 188:fltk-1.3.4-1/jpeg/jdmaster.c **** /*
 189:fltk-1.3.4-1/jpeg/jdmaster.c ****  * Several decompression processes need to range-limit values to the range
 190:fltk-1.3.4-1/jpeg/jdmaster.c ****  * 0..MAXJSAMPLE; the input value may fall somewhat outside this range
 191:fltk-1.3.4-1/jpeg/jdmaster.c ****  * due to noise introduced by quantization, roundoff error, etc.  These
 192:fltk-1.3.4-1/jpeg/jdmaster.c ****  * processes are inner loops and need to be as fast as possible.  On most
 193:fltk-1.3.4-1/jpeg/jdmaster.c ****  * machines, particularly CPUs with pipelines or instruction prefetch,
 194:fltk-1.3.4-1/jpeg/jdmaster.c ****  * a (subscript-check-less) C table lookup
 195:fltk-1.3.4-1/jpeg/jdmaster.c ****  *		x = sample_range_limit[x];
 196:fltk-1.3.4-1/jpeg/jdmaster.c ****  * is faster than explicit tests
 197:fltk-1.3.4-1/jpeg/jdmaster.c ****  *		if (x < 0)  x = 0;
 198:fltk-1.3.4-1/jpeg/jdmaster.c ****  *		else if (x > MAXJSAMPLE)  x = MAXJSAMPLE;
 199:fltk-1.3.4-1/jpeg/jdmaster.c ****  * These processes all use a common table prepared by the routine below.
 200:fltk-1.3.4-1/jpeg/jdmaster.c ****  *
 201:fltk-1.3.4-1/jpeg/jdmaster.c ****  * For most steps we can mathematically guarantee that the initial value
 202:fltk-1.3.4-1/jpeg/jdmaster.c ****  * of x is within MAXJSAMPLE+1 of the legal range, so a table running from
 203:fltk-1.3.4-1/jpeg/jdmaster.c ****  * -(MAXJSAMPLE+1) to 2*MAXJSAMPLE+1 is sufficient.  But for the initial
 204:fltk-1.3.4-1/jpeg/jdmaster.c ****  * limiting step (just after the IDCT), a wildly out-of-range value is 
 205:fltk-1.3.4-1/jpeg/jdmaster.c ****  * possible if the input data is corrupt.  To avoid any chance of indexing
 206:fltk-1.3.4-1/jpeg/jdmaster.c ****  * off the end of memory and getting a bad-pointer trap, we perform the
 207:fltk-1.3.4-1/jpeg/jdmaster.c ****  * post-IDCT limiting thus:
 208:fltk-1.3.4-1/jpeg/jdmaster.c ****  *		x = range_limit[x & MASK];
 209:fltk-1.3.4-1/jpeg/jdmaster.c ****  * where MASK is 2 bits wider than legal sample data, ie 10 bits for 8-bit
 210:fltk-1.3.4-1/jpeg/jdmaster.c ****  * samples.  Under normal circumstances this is more than enough range and
 211:fltk-1.3.4-1/jpeg/jdmaster.c ****  * a correct output will be generated; with bogus input data the mask will
 212:fltk-1.3.4-1/jpeg/jdmaster.c ****  * cause wraparound, and we will safely generate a bogus-but-in-range output.
 213:fltk-1.3.4-1/jpeg/jdmaster.c ****  * For the post-IDCT step, we want to convert the data from signed to unsigned
 214:fltk-1.3.4-1/jpeg/jdmaster.c ****  * representation by adding CENTERJSAMPLE at the same time that we limit it.
 215:fltk-1.3.4-1/jpeg/jdmaster.c ****  * So the post-IDCT limiting table ends up looking like this:
 216:fltk-1.3.4-1/jpeg/jdmaster.c ****  *   CENTERJSAMPLE,CENTERJSAMPLE+1,...,MAXJSAMPLE,
 217:fltk-1.3.4-1/jpeg/jdmaster.c ****  *   MAXJSAMPLE (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),
 218:fltk-1.3.4-1/jpeg/jdmaster.c ****  *   0          (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),
 219:fltk-1.3.4-1/jpeg/jdmaster.c ****  *   0,1,...,CENTERJSAMPLE-1
 220:fltk-1.3.4-1/jpeg/jdmaster.c ****  * Negative inputs select values from the upper half of the table after
 221:fltk-1.3.4-1/jpeg/jdmaster.c ****  * masking.
 222:fltk-1.3.4-1/jpeg/jdmaster.c ****  *
 223:fltk-1.3.4-1/jpeg/jdmaster.c ****  * We can save some space by overlapping the start of the post-IDCT table
 224:fltk-1.3.4-1/jpeg/jdmaster.c ****  * with the simpler range limiting table.  The post-IDCT table begins at
 225:fltk-1.3.4-1/jpeg/jdmaster.c ****  * sample_range_limit + CENTERJSAMPLE.
 226:fltk-1.3.4-1/jpeg/jdmaster.c ****  *
 227:fltk-1.3.4-1/jpeg/jdmaster.c ****  * Note that the table is allocated in near data space on PCs; it's small
 228:fltk-1.3.4-1/jpeg/jdmaster.c ****  * enough and used often enough to justify this.
 229:fltk-1.3.4-1/jpeg/jdmaster.c ****  */
 230:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 231:fltk-1.3.4-1/jpeg/jdmaster.c **** LOCAL(void)
 232:fltk-1.3.4-1/jpeg/jdmaster.c **** prepare_range_limit_table (j_decompress_ptr cinfo)
 233:fltk-1.3.4-1/jpeg/jdmaster.c **** /* Allocate and fill in the sample_range_limit table */
 234:fltk-1.3.4-1/jpeg/jdmaster.c **** {
 235:fltk-1.3.4-1/jpeg/jdmaster.c ****   JSAMPLE * table;
 236:fltk-1.3.4-1/jpeg/jdmaster.c ****   int i;
 237:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 238:fltk-1.3.4-1/jpeg/jdmaster.c ****   table = (JSAMPLE *)
 239:fltk-1.3.4-1/jpeg/jdmaster.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 240:fltk-1.3.4-1/jpeg/jdmaster.c **** 		(5 * (MAXJSAMPLE+1) + CENTERJSAMPLE) * SIZEOF(JSAMPLE));
 241:fltk-1.3.4-1/jpeg/jdmaster.c ****   table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
 242:fltk-1.3.4-1/jpeg/jdmaster.c ****   cinfo->sample_range_limit = table;
 243:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* First segment of "simple" table: limit[x] = 0 for x < 0 */
 244:fltk-1.3.4-1/jpeg/jdmaster.c ****   MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 245:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* Main part of "simple" table: limit[x] = x */
 246:fltk-1.3.4-1/jpeg/jdmaster.c ****   for (i = 0; i <= MAXJSAMPLE; i++)
 247:fltk-1.3.4-1/jpeg/jdmaster.c ****     table[i] = (JSAMPLE) i;
 248:fltk-1.3.4-1/jpeg/jdmaster.c ****   table += CENTERJSAMPLE;	/* Point to where post-IDCT table starts */
 249:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* End of simple table, rest of first half of post-IDCT table */
 250:fltk-1.3.4-1/jpeg/jdmaster.c ****   for (i = CENTERJSAMPLE; i < 2*(MAXJSAMPLE+1); i++)
 251:fltk-1.3.4-1/jpeg/jdmaster.c ****     table[i] = MAXJSAMPLE;
 252:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* Second half of post-IDCT table */
 253:fltk-1.3.4-1/jpeg/jdmaster.c ****   MEMZERO(table + (2 * (MAXJSAMPLE+1)),
 254:fltk-1.3.4-1/jpeg/jdmaster.c **** 	  (2 * (MAXJSAMPLE+1) - CENTERJSAMPLE) * SIZEOF(JSAMPLE));
 255:fltk-1.3.4-1/jpeg/jdmaster.c ****   MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
 256:fltk-1.3.4-1/jpeg/jdmaster.c **** 	  cinfo->sample_range_limit, CENTERJSAMPLE * SIZEOF(JSAMPLE));
 257:fltk-1.3.4-1/jpeg/jdmaster.c **** }
 258:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 259:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 260:fltk-1.3.4-1/jpeg/jdmaster.c **** /*
 261:fltk-1.3.4-1/jpeg/jdmaster.c ****  * Master selection of decompression modules.
 262:fltk-1.3.4-1/jpeg/jdmaster.c ****  * This is done once at jpeg_start_decompress time.  We determine
 263:fltk-1.3.4-1/jpeg/jdmaster.c ****  * which modules will be used and give them appropriate initialization calls.
 264:fltk-1.3.4-1/jpeg/jdmaster.c ****  * We also initialize the decompressor input side to begin consuming data.
 265:fltk-1.3.4-1/jpeg/jdmaster.c ****  *
 266:fltk-1.3.4-1/jpeg/jdmaster.c ****  * Since jpeg_read_header has finished, we know what is in the SOF
 267:fltk-1.3.4-1/jpeg/jdmaster.c ****  * and (first) SOS markers.  We also have all the application parameter
 268:fltk-1.3.4-1/jpeg/jdmaster.c ****  * settings.
 269:fltk-1.3.4-1/jpeg/jdmaster.c ****  */
 270:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 271:fltk-1.3.4-1/jpeg/jdmaster.c **** LOCAL(void)
 272:fltk-1.3.4-1/jpeg/jdmaster.c **** master_selection (j_decompress_ptr cinfo)
 273:fltk-1.3.4-1/jpeg/jdmaster.c **** {
 274:fltk-1.3.4-1/jpeg/jdmaster.c ****   my_master_ptr master = (my_master_ptr) cinfo->master;
 275:fltk-1.3.4-1/jpeg/jdmaster.c ****   boolean use_c_buffer;
 276:fltk-1.3.4-1/jpeg/jdmaster.c ****   long samplesperrow;
 277:fltk-1.3.4-1/jpeg/jdmaster.c ****   JDIMENSION jd_samplesperrow;
 278:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 279:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* For now, precision must match compiled-in value... */
 280:fltk-1.3.4-1/jpeg/jdmaster.c ****   if (cinfo->data_precision != BITS_IN_JSAMPLE)
 281:fltk-1.3.4-1/jpeg/jdmaster.c ****     ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 282:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 283:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* Initialize dimensions and other stuff */
 284:fltk-1.3.4-1/jpeg/jdmaster.c ****   jpeg_calc_output_dimensions(cinfo);
 285:fltk-1.3.4-1/jpeg/jdmaster.c ****   prepare_range_limit_table(cinfo);
 286:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 287:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* Sanity check on image dimensions */
 288:fltk-1.3.4-1/jpeg/jdmaster.c ****   if (cinfo->output_height <= 0 || cinfo->output_width <= 0 ||
 289:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->out_color_components <= 0)
 290:fltk-1.3.4-1/jpeg/jdmaster.c ****     ERREXIT(cinfo, JERR_EMPTY_IMAGE);
 291:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 292:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* Width of an output scanline must be representable as JDIMENSION. */
 293:fltk-1.3.4-1/jpeg/jdmaster.c ****   samplesperrow = (long) cinfo->output_width * (long) cinfo->out_color_components;
 294:fltk-1.3.4-1/jpeg/jdmaster.c ****   jd_samplesperrow = (JDIMENSION) samplesperrow;
 295:fltk-1.3.4-1/jpeg/jdmaster.c ****   if ((long) jd_samplesperrow != samplesperrow)
 296:fltk-1.3.4-1/jpeg/jdmaster.c ****     ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 297:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 298:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* Initialize my private state */
 299:fltk-1.3.4-1/jpeg/jdmaster.c ****   master->pass_number = 0;
 300:fltk-1.3.4-1/jpeg/jdmaster.c ****   master->using_merged_upsample = use_merged_upsample(cinfo);
 301:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 302:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* Color quantizer selection */
 303:fltk-1.3.4-1/jpeg/jdmaster.c ****   master->quantizer_1pass = NULL;
 304:fltk-1.3.4-1/jpeg/jdmaster.c ****   master->quantizer_2pass = NULL;
 305:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* No mode changes if not using buffered-image mode. */
 306:fltk-1.3.4-1/jpeg/jdmaster.c ****   if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 307:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->enable_1pass_quant = FALSE;
 308:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->enable_external_quant = FALSE;
 309:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->enable_2pass_quant = FALSE;
 310:fltk-1.3.4-1/jpeg/jdmaster.c ****   }
 311:fltk-1.3.4-1/jpeg/jdmaster.c ****   if (cinfo->quantize_colors) {
 312:fltk-1.3.4-1/jpeg/jdmaster.c ****     if (cinfo->raw_data_out)
 313:fltk-1.3.4-1/jpeg/jdmaster.c ****       ERREXIT(cinfo, JERR_NOTIMPL);
 314:fltk-1.3.4-1/jpeg/jdmaster.c ****     /* 2-pass quantizer only works in 3-component color space. */
 315:fltk-1.3.4-1/jpeg/jdmaster.c ****     if (cinfo->out_color_components != 3) {
 316:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->enable_1pass_quant = TRUE;
 317:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->enable_external_quant = FALSE;
 318:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->enable_2pass_quant = FALSE;
 319:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->colormap = NULL;
 320:fltk-1.3.4-1/jpeg/jdmaster.c ****     } else if (cinfo->colormap != NULL) {
 321:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->enable_external_quant = TRUE;
 322:fltk-1.3.4-1/jpeg/jdmaster.c ****     } else if (cinfo->two_pass_quantize) {
 323:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->enable_2pass_quant = TRUE;
 324:fltk-1.3.4-1/jpeg/jdmaster.c ****     } else {
 325:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->enable_1pass_quant = TRUE;
 326:fltk-1.3.4-1/jpeg/jdmaster.c ****     }
 327:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 328:fltk-1.3.4-1/jpeg/jdmaster.c ****     if (cinfo->enable_1pass_quant) {
 329:fltk-1.3.4-1/jpeg/jdmaster.c **** #ifdef QUANT_1PASS_SUPPORTED
 330:fltk-1.3.4-1/jpeg/jdmaster.c ****       jinit_1pass_quantizer(cinfo);
 331:fltk-1.3.4-1/jpeg/jdmaster.c ****       master->quantizer_1pass = cinfo->cquantize;
 332:fltk-1.3.4-1/jpeg/jdmaster.c **** #else
 333:fltk-1.3.4-1/jpeg/jdmaster.c ****       ERREXIT(cinfo, JERR_NOT_COMPILED);
 334:fltk-1.3.4-1/jpeg/jdmaster.c **** #endif
 335:fltk-1.3.4-1/jpeg/jdmaster.c ****     }
 336:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 337:fltk-1.3.4-1/jpeg/jdmaster.c ****     /* We use the 2-pass code to map to external colormaps. */
 338:fltk-1.3.4-1/jpeg/jdmaster.c ****     if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
 339:fltk-1.3.4-1/jpeg/jdmaster.c **** #ifdef QUANT_2PASS_SUPPORTED
 340:fltk-1.3.4-1/jpeg/jdmaster.c ****       jinit_2pass_quantizer(cinfo);
 341:fltk-1.3.4-1/jpeg/jdmaster.c ****       master->quantizer_2pass = cinfo->cquantize;
 342:fltk-1.3.4-1/jpeg/jdmaster.c **** #else
 343:fltk-1.3.4-1/jpeg/jdmaster.c ****       ERREXIT(cinfo, JERR_NOT_COMPILED);
 344:fltk-1.3.4-1/jpeg/jdmaster.c **** #endif
 345:fltk-1.3.4-1/jpeg/jdmaster.c ****     }
 346:fltk-1.3.4-1/jpeg/jdmaster.c ****     /* If both quantizers are initialized, the 2-pass one is left active;
 347:fltk-1.3.4-1/jpeg/jdmaster.c ****      * this is necessary for starting with quantization to an external map.
 348:fltk-1.3.4-1/jpeg/jdmaster.c ****      */
 349:fltk-1.3.4-1/jpeg/jdmaster.c ****   }
 350:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 351:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* Post-processing: in particular, color conversion first */
 352:fltk-1.3.4-1/jpeg/jdmaster.c ****   if (! cinfo->raw_data_out) {
 353:fltk-1.3.4-1/jpeg/jdmaster.c ****     if (master->using_merged_upsample) {
 354:fltk-1.3.4-1/jpeg/jdmaster.c **** #ifdef UPSAMPLE_MERGING_SUPPORTED
 355:fltk-1.3.4-1/jpeg/jdmaster.c ****       jinit_merged_upsampler(cinfo); /* does color conversion too */
 356:fltk-1.3.4-1/jpeg/jdmaster.c **** #else
 357:fltk-1.3.4-1/jpeg/jdmaster.c ****       ERREXIT(cinfo, JERR_NOT_COMPILED);
 358:fltk-1.3.4-1/jpeg/jdmaster.c **** #endif
 359:fltk-1.3.4-1/jpeg/jdmaster.c ****     } else {
 360:fltk-1.3.4-1/jpeg/jdmaster.c ****       jinit_color_deconverter(cinfo);
 361:fltk-1.3.4-1/jpeg/jdmaster.c ****       jinit_upsampler(cinfo);
 362:fltk-1.3.4-1/jpeg/jdmaster.c ****     }
 363:fltk-1.3.4-1/jpeg/jdmaster.c ****     jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
 364:fltk-1.3.4-1/jpeg/jdmaster.c ****   }
 365:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* Inverse DCT */
 366:fltk-1.3.4-1/jpeg/jdmaster.c ****   jinit_inverse_dct(cinfo);
 367:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* Entropy decoding: either Huffman or arithmetic coding. */
 368:fltk-1.3.4-1/jpeg/jdmaster.c ****   if (cinfo->arith_code)
 369:fltk-1.3.4-1/jpeg/jdmaster.c ****     jinit_arith_decoder(cinfo);
 370:fltk-1.3.4-1/jpeg/jdmaster.c ****   else {
 371:fltk-1.3.4-1/jpeg/jdmaster.c ****     jinit_huff_decoder(cinfo);
 372:fltk-1.3.4-1/jpeg/jdmaster.c ****   }
 373:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 374:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* Initialize principal buffer controllers. */
 375:fltk-1.3.4-1/jpeg/jdmaster.c ****   use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 376:fltk-1.3.4-1/jpeg/jdmaster.c ****   jinit_d_coef_controller(cinfo, use_c_buffer);
 377:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 378:fltk-1.3.4-1/jpeg/jdmaster.c ****   if (! cinfo->raw_data_out)
 379:fltk-1.3.4-1/jpeg/jdmaster.c ****     jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
 380:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 381:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* We can now tell the memory manager to allocate virtual arrays. */
 382:fltk-1.3.4-1/jpeg/jdmaster.c ****   (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
 383:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 384:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* Initialize input side of decompressor to consume first scan. */
 385:fltk-1.3.4-1/jpeg/jdmaster.c ****   (*cinfo->inputctl->start_input_pass) (cinfo);
 386:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 387:fltk-1.3.4-1/jpeg/jdmaster.c **** #ifdef D_MULTISCAN_FILES_SUPPORTED
 388:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* If jpeg_start_decompress will read the whole file, initialize
 389:fltk-1.3.4-1/jpeg/jdmaster.c ****    * progress monitoring appropriately.  The input step is counted
 390:fltk-1.3.4-1/jpeg/jdmaster.c ****    * as one pass.
 391:fltk-1.3.4-1/jpeg/jdmaster.c ****    */
 392:fltk-1.3.4-1/jpeg/jdmaster.c ****   if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 393:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->inputctl->has_multiple_scans) {
 394:fltk-1.3.4-1/jpeg/jdmaster.c ****     int nscans;
 395:fltk-1.3.4-1/jpeg/jdmaster.c ****     /* Estimate number of scans to set pass_limit. */
 396:fltk-1.3.4-1/jpeg/jdmaster.c ****     if (cinfo->progressive_mode) {
 397:fltk-1.3.4-1/jpeg/jdmaster.c ****       /* Arbitrarily estimate 2 interleaved DC scans + 3 AC scans/component. */
 398:fltk-1.3.4-1/jpeg/jdmaster.c ****       nscans = 2 + 3 * cinfo->num_components;
 399:fltk-1.3.4-1/jpeg/jdmaster.c ****     } else {
 400:fltk-1.3.4-1/jpeg/jdmaster.c ****       /* For a nonprogressive multiscan file, estimate 1 scan per component. */
 401:fltk-1.3.4-1/jpeg/jdmaster.c ****       nscans = cinfo->num_components;
 402:fltk-1.3.4-1/jpeg/jdmaster.c ****     }
 403:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->progress->pass_counter = 0L;
 404:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 405:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->progress->completed_passes = 0;
 406:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 407:fltk-1.3.4-1/jpeg/jdmaster.c ****     /* Count the input pass as done */
 408:fltk-1.3.4-1/jpeg/jdmaster.c ****     master->pass_number++;
 409:fltk-1.3.4-1/jpeg/jdmaster.c ****   }
 410:fltk-1.3.4-1/jpeg/jdmaster.c **** #endif /* D_MULTISCAN_FILES_SUPPORTED */
 411:fltk-1.3.4-1/jpeg/jdmaster.c **** }
 412:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 413:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 414:fltk-1.3.4-1/jpeg/jdmaster.c **** /*
 415:fltk-1.3.4-1/jpeg/jdmaster.c ****  * Per-pass setup.
 416:fltk-1.3.4-1/jpeg/jdmaster.c ****  * This is called at the beginning of each output pass.  We determine which
 417:fltk-1.3.4-1/jpeg/jdmaster.c ****  * modules will be active during this pass and give them appropriate
 418:fltk-1.3.4-1/jpeg/jdmaster.c ****  * start_pass calls.  We also set is_dummy_pass to indicate whether this
 419:fltk-1.3.4-1/jpeg/jdmaster.c ****  * is a "real" output pass or a dummy pass for color quantization.
 420:fltk-1.3.4-1/jpeg/jdmaster.c ****  * (In the latter case, jdapistd.c will crank the pass to completion.)
 421:fltk-1.3.4-1/jpeg/jdmaster.c ****  */
 422:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 423:fltk-1.3.4-1/jpeg/jdmaster.c **** METHODDEF(void)
 424:fltk-1.3.4-1/jpeg/jdmaster.c **** prepare_for_output_pass (j_decompress_ptr cinfo)
 425:fltk-1.3.4-1/jpeg/jdmaster.c **** {
  16              		.loc 1 425 0
  17              		.cfi_startproc
  18              	.LVL0:
  19 0000 55       		pushq	%rbp
  20              		.cfi_def_cfa_offset 16
  21              		.cfi_offset 6, -16
  22 0001 53       		pushq	%rbx
  23              		.cfi_def_cfa_offset 24
  24              		.cfi_offset 3, -24
  25 0002 4889FB   		movq	%rdi, %rbx
  26 0005 4883EC08 		subq	$8, %rsp
  27              		.cfi_def_cfa_offset 32
 426:fltk-1.3.4-1/jpeg/jdmaster.c ****   my_master_ptr master = (my_master_ptr) cinfo->master;
  28              		.loc 1 426 0
  29 0009 488BAF40 		movq	576(%rdi), %rbp
  29      020000
  30              	.LVL1:
 427:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 428:fltk-1.3.4-1/jpeg/jdmaster.c ****   if (master->pub.is_dummy_pass) {
  31              		.loc 1 428 0
  32 0010 8B4510   		movl	16(%rbp), %eax
  33 0013 85C0     		testl	%eax, %eax
  34 0015 0F85D500 		jne	.L20
  34      0000
 429:fltk-1.3.4-1/jpeg/jdmaster.c **** #ifdef QUANT_2PASS_SUPPORTED
 430:fltk-1.3.4-1/jpeg/jdmaster.c ****     /* Final pass of 2-pass quantization */
 431:fltk-1.3.4-1/jpeg/jdmaster.c ****     master->pub.is_dummy_pass = FALSE;
 432:fltk-1.3.4-1/jpeg/jdmaster.c ****     (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 433:fltk-1.3.4-1/jpeg/jdmaster.c ****     (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
 434:fltk-1.3.4-1/jpeg/jdmaster.c ****     (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
 435:fltk-1.3.4-1/jpeg/jdmaster.c **** #else
 436:fltk-1.3.4-1/jpeg/jdmaster.c ****     ERREXIT(cinfo, JERR_NOT_COMPILED);
 437:fltk-1.3.4-1/jpeg/jdmaster.c **** #endif /* QUANT_2PASS_SUPPORTED */
 438:fltk-1.3.4-1/jpeg/jdmaster.c ****   } else {
 439:fltk-1.3.4-1/jpeg/jdmaster.c ****     if (cinfo->quantize_colors && cinfo->colormap == NULL) {
  35              		.loc 1 439 0
  36 001b 448B5F6C 		movl	108(%rdi), %r11d
  37 001f 4585DB   		testl	%r11d, %r11d
  38 0022 740E     		je	.L4
  39              		.loc 1 439 0 is_stmt 0 discriminator 1
  40 0024 4883BFA0 		cmpq	$0, 160(%rdi)
  40      00000000 
  41 002c 0F84FE00 		je	.L21
  41      0000
  42              	.LVL2:
  43              	.L4:
 440:fltk-1.3.4-1/jpeg/jdmaster.c ****       /* Select new quantization method */
 441:fltk-1.3.4-1/jpeg/jdmaster.c ****       if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
 442:fltk-1.3.4-1/jpeg/jdmaster.c **** 	cinfo->cquantize = master->quantizer_2pass;
 443:fltk-1.3.4-1/jpeg/jdmaster.c **** 	master->pub.is_dummy_pass = TRUE;
 444:fltk-1.3.4-1/jpeg/jdmaster.c ****       } else if (cinfo->enable_1pass_quant) {
 445:fltk-1.3.4-1/jpeg/jdmaster.c **** 	cinfo->cquantize = master->quantizer_1pass;
 446:fltk-1.3.4-1/jpeg/jdmaster.c ****       } else {
 447:fltk-1.3.4-1/jpeg/jdmaster.c **** 	ERREXIT(cinfo, JERR_MODE_CHANGE);
 448:fltk-1.3.4-1/jpeg/jdmaster.c ****       }
 449:fltk-1.3.4-1/jpeg/jdmaster.c ****     }
 450:fltk-1.3.4-1/jpeg/jdmaster.c ****     (*cinfo->idct->start_pass) (cinfo);
  44              		.loc 1 450 0 is_stmt 1
  45 0032 488B8378 		movq	632(%rbx), %rax
  45      020000
  46 0039 4889DF   		movq	%rbx, %rdi
  47 003c FF10     		call	*(%rax)
  48              	.LVL3:
 451:fltk-1.3.4-1/jpeg/jdmaster.c ****     (*cinfo->coef->start_output_pass) (cinfo);
  49              		.loc 1 451 0
  50 003e 488B8350 		movq	592(%rbx), %rax
  50      020000
  51 0045 4889DF   		movq	%rbx, %rdi
  52 0048 FF5010   		call	*16(%rax)
  53              	.LVL4:
 452:fltk-1.3.4-1/jpeg/jdmaster.c ****     if (! cinfo->raw_data_out) {
  54              		.loc 1 452 0
  55 004b 8B7B5C   		movl	92(%rbx), %edi
  56 004e 85FF     		testl	%edi, %edi
  57 0050 7547     		jne	.L3
 453:fltk-1.3.4-1/jpeg/jdmaster.c ****       if (! master->using_merged_upsample)
  58              		.loc 1 453 0
  59 0052 8B751C   		movl	28(%rbp), %esi
  60 0055 85F6     		testl	%esi, %esi
  61 0057 0F841B01 		je	.L22
  61      0000
  62              	.L7:
 454:fltk-1.3.4-1/jpeg/jdmaster.c **** 	(*cinfo->cconvert->start_pass) (cinfo);
 455:fltk-1.3.4-1/jpeg/jdmaster.c ****       (*cinfo->upsample->start_pass) (cinfo);
  63              		.loc 1 455 0
  64 005d 488B8380 		movq	640(%rbx), %rax
  64      020000
  65 0064 4889DF   		movq	%rbx, %rdi
  66 0067 FF10     		call	*(%rax)
  67              	.LVL5:
 456:fltk-1.3.4-1/jpeg/jdmaster.c ****       if (cinfo->quantize_colors)
  68              		.loc 1 456 0
  69 0069 8B4B6C   		movl	108(%rbx), %ecx
  70 006c 85C9     		testl	%ecx, %ecx
  71 006e 0F85EC00 		jne	.L23
  71      0000
  72              	.L8:
 457:fltk-1.3.4-1/jpeg/jdmaster.c **** 	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
 458:fltk-1.3.4-1/jpeg/jdmaster.c ****       (*cinfo->post->start_pass) (cinfo,
  73              		.loc 1 458 0
  74 0074 837D1001 		cmpl	$1, 16(%rbp)
  75 0078 488B8358 		movq	600(%rbx), %rax
  75      020000
  76 007f 4889DF   		movq	%rbx, %rdi
  77 0082 19F6     		sbbl	%esi, %esi
  78 0084 F7D6     		notl	%esi
  79 0086 83E603   		andl	$3, %esi
  80 0089 FF10     		call	*(%rax)
  81              	.LVL6:
 459:fltk-1.3.4-1/jpeg/jdmaster.c **** 	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
 460:fltk-1.3.4-1/jpeg/jdmaster.c ****       (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
  82              		.loc 1 460 0
  83 008b 488B8348 		movq	584(%rbx), %rax
  83      020000
  84 0092 31F6     		xorl	%esi, %esi
  85 0094 4889DF   		movq	%rbx, %rdi
  86 0097 FF10     		call	*(%rax)
  87              	.LVL7:
  88              	.L3:
 461:fltk-1.3.4-1/jpeg/jdmaster.c ****     }
 462:fltk-1.3.4-1/jpeg/jdmaster.c ****   }
 463:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 464:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* Set up progress monitor's pass info if present */
 465:fltk-1.3.4-1/jpeg/jdmaster.c ****   if (cinfo->progress != NULL) {
  89              		.loc 1 465 0
  90 0099 488B4310 		movq	16(%rbx), %rax
  91 009d 4885C0   		testq	%rax, %rax
  92 00a0 7441     		je	.L1
 466:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->progress->completed_passes = master->pass_number;
  93              		.loc 1 466 0
  94 00a2 8B5518   		movl	24(%rbp), %edx
  95 00a5 895018   		movl	%edx, 24(%rax)
 467:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->progress->total_passes = master->pass_number +
 468:fltk-1.3.4-1/jpeg/jdmaster.c **** 				    (master->pub.is_dummy_pass ? 2 : 1);
  96              		.loc 1 468 0
  97 00a8 837D1001 		cmpl	$1, 16(%rbp)
 467:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->progress->total_passes = master->pass_number +
  98              		.loc 1 467 0
  99 00ac 488B5310 		movq	16(%rbx), %rdx
 100              		.loc 1 468 0
 101 00b0 19C0     		sbbl	%eax, %eax
 102 00b2 83C002   		addl	$2, %eax
 467:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->progress->total_passes = master->pass_number +
 103              		.loc 1 467 0
 104 00b5 034518   		addl	24(%rbp), %eax
 105 00b8 89421C   		movl	%eax, 28(%rdx)
 469:fltk-1.3.4-1/jpeg/jdmaster.c ****     /* In buffered-image mode, we assume one more output pass if EOI not
 470:fltk-1.3.4-1/jpeg/jdmaster.c ****      * yet reached, but no more passes if EOI has been reached.
 471:fltk-1.3.4-1/jpeg/jdmaster.c ****      */
 472:fltk-1.3.4-1/jpeg/jdmaster.c ****     if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 106              		.loc 1 472 0
 107 00bb 8B5358   		movl	88(%rbx), %edx
 108 00be 85D2     		testl	%edx, %edx
 109 00c0 7421     		je	.L1
 110              		.loc 1 472 0 is_stmt 0 discriminator 1
 111 00c2 488B8360 		movq	608(%rbx), %rax
 111      020000
 112 00c9 8B4024   		movl	36(%rax), %eax
 113 00cc 85C0     		testl	%eax, %eax
 114 00ce 7513     		jne	.L1
 473:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
 115              		.loc 1 473 0 is_stmt 1
 116 00d0 83BB8400 		cmpl	$1, 132(%rbx)
 116      000001
 117 00d7 488B5310 		movq	16(%rbx), %rdx
 118 00db 19C0     		sbbl	%eax, %eax
 119 00dd 83C002   		addl	$2, %eax
 120 00e0 01421C   		addl	%eax, 28(%rdx)
 121              	.L1:
 474:fltk-1.3.4-1/jpeg/jdmaster.c ****     }
 475:fltk-1.3.4-1/jpeg/jdmaster.c ****   }
 476:fltk-1.3.4-1/jpeg/jdmaster.c **** }
 122              		.loc 1 476 0
 123 00e3 4883C408 		addq	$8, %rsp
 124              		.cfi_remember_state
 125              		.cfi_def_cfa_offset 24
 126 00e7 5B       		popq	%rbx
 127              		.cfi_def_cfa_offset 16
 128              	.LVL8:
 129 00e8 5D       		popq	%rbp
 130              		.cfi_def_cfa_offset 8
 131              	.LVL9:
 132 00e9 C3       		ret
 133              	.LVL10:
 134 00ea 660F1F44 		.p2align 4,,10
 134      0000
 135              		.p2align 3
 136              	.L20:
 137              		.cfi_restore_state
 431:fltk-1.3.4-1/jpeg/jdmaster.c ****     (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 138              		.loc 1 431 0
 139 00f0 C7451000 		movl	$0, 16(%rbp)
 139      000000
 432:fltk-1.3.4-1/jpeg/jdmaster.c ****     (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
 140              		.loc 1 432 0
 141 00f7 488B8790 		movq	656(%rdi), %rax
 141      020000
 142 00fe 31F6     		xorl	%esi, %esi
 143 0100 FF10     		call	*(%rax)
 144              	.LVL11:
 433:fltk-1.3.4-1/jpeg/jdmaster.c ****     (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
 145              		.loc 1 433 0
 146 0102 488B8358 		movq	600(%rbx), %rax
 146      020000
 147 0109 4889DF   		movq	%rbx, %rdi
 148 010c BE020000 		movl	$2, %esi
 148      00
 149 0111 FF10     		call	*(%rax)
 150              	.LVL12:
 434:fltk-1.3.4-1/jpeg/jdmaster.c **** #else
 151              		.loc 1 434 0
 152 0113 488B8348 		movq	584(%rbx), %rax
 152      020000
 153 011a BE020000 		movl	$2, %esi
 153      00
 154 011f 4889DF   		movq	%rbx, %rdi
 155 0122 FF10     		call	*(%rax)
 156              	.LVL13:
 157 0124 E970FFFF 		jmp	.L3
 157      FF
 158 0129 0F1F8000 		.p2align 4,,10
 158      000000
 159              		.p2align 3
 160              	.L21:
 441:fltk-1.3.4-1/jpeg/jdmaster.c **** 	cinfo->cquantize = master->quantizer_2pass;
 161              		.loc 1 441 0
 162 0130 448B5774 		movl	116(%rdi), %r10d
 163 0134 4585D2   		testl	%r10d, %r10d
 164 0137 7457     		je	.L5
 441:fltk-1.3.4-1/jpeg/jdmaster.c **** 	cinfo->cquantize = master->quantizer_2pass;
 165              		.loc 1 441 0 is_stmt 0 discriminator 1
 166 0139 448B8F84 		movl	132(%rdi), %r9d
 166      000000
 167 0140 4585C9   		testl	%r9d, %r9d
 168 0143 744B     		je	.L5
 442:fltk-1.3.4-1/jpeg/jdmaster.c **** 	master->pub.is_dummy_pass = TRUE;
 169              		.loc 1 442 0 is_stmt 1
 170 0145 488B4528 		movq	40(%rbp), %rax
 171 0149 48898790 		movq	%rax, 656(%rdi)
 171      020000
 443:fltk-1.3.4-1/jpeg/jdmaster.c ****       } else if (cinfo->enable_1pass_quant) {
 172              		.loc 1 443 0
 173 0150 C7451001 		movl	$1, 16(%rbp)
 173      000000
 174 0157 E9D6FEFF 		jmp	.L4
 174      FF
 175 015c 0F1F4000 		.p2align 4,,10
 176              		.p2align 3
 177              	.L23:
 457:fltk-1.3.4-1/jpeg/jdmaster.c ****       (*cinfo->post->start_pass) (cinfo,
 178              		.loc 1 457 0
 179 0160 488B8390 		movq	656(%rbx), %rax
 179      020000
 180 0167 8B7510   		movl	16(%rbp), %esi
 181 016a 4889DF   		movq	%rbx, %rdi
 182 016d FF10     		call	*(%rax)
 183              	.LVL14:
 184 016f E900FFFF 		jmp	.L8
 184      FF
 185              		.p2align 4,,10
 186 0174 0F1F4000 		.p2align 3
 187              	.L22:
 454:fltk-1.3.4-1/jpeg/jdmaster.c ****       (*cinfo->upsample->start_pass) (cinfo);
 188              		.loc 1 454 0
 189 0178 488B8388 		movq	648(%rbx), %rax
 189      020000
 190 017f 4889DF   		movq	%rbx, %rdi
 191 0182 FF10     		call	*(%rax)
 192              	.LVL15:
 193 0184 E9D4FEFF 		jmp	.L7
 193      FF
 194 0189 0F1F8000 		.p2align 4,,10
 194      000000
 195              		.p2align 3
 196              	.L5:
 444:fltk-1.3.4-1/jpeg/jdmaster.c **** 	cinfo->cquantize = master->quantizer_1pass;
 197              		.loc 1 444 0
 198 0190 448B437C 		movl	124(%rbx), %r8d
 199 0194 4585C0   		testl	%r8d, %r8d
 200 0197 7417     		je	.L6
 445:fltk-1.3.4-1/jpeg/jdmaster.c ****       } else {
 201              		.loc 1 445 0
 202 0199 488B4520 		movq	32(%rbp), %rax
 203 019d 48898390 		movq	%rax, 656(%rbx)
 203      020000
 204 01a4 E989FEFF 		jmp	.L4
 204      FF
 205 01a9 0F1F8000 		.p2align 4,,10
 205      000000
 206              		.p2align 3
 207              	.L6:
 447:fltk-1.3.4-1/jpeg/jdmaster.c ****       }
 208              		.loc 1 447 0
 209 01b0 488B03   		movq	(%rbx), %rax
 210 01b3 4889DF   		movq	%rbx, %rdi
 211 01b6 C740282F 		movl	$47, 40(%rax)
 211      000000
 212 01bd 488B03   		movq	(%rbx), %rax
 213 01c0 FF10     		call	*(%rax)
 214              	.LVL16:
 215 01c2 E96BFEFF 		jmp	.L4
 215      FF
 216              		.cfi_endproc
 217              	.LFE65:
 219              		.section	.text.unlikely.prepare_for_output_pass
 220              	.LCOLDE0:
 221              		.section	.text.prepare_for_output_pass
 222              	.LHOTE0:
 223              		.section	.text.unlikely.finish_output_pass,"ax",@progbits
 224              	.LCOLDB1:
 225              		.section	.text.finish_output_pass,"ax",@progbits
 226              	.LHOTB1:
 227              		.p2align 4,,15
 229              	finish_output_pass:
 230              	.LFB66:
 477:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 478:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 479:fltk-1.3.4-1/jpeg/jdmaster.c **** /*
 480:fltk-1.3.4-1/jpeg/jdmaster.c ****  * Finish up at end of an output pass.
 481:fltk-1.3.4-1/jpeg/jdmaster.c ****  */
 482:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 483:fltk-1.3.4-1/jpeg/jdmaster.c **** METHODDEF(void)
 484:fltk-1.3.4-1/jpeg/jdmaster.c **** finish_output_pass (j_decompress_ptr cinfo)
 485:fltk-1.3.4-1/jpeg/jdmaster.c **** {
 231              		.loc 1 485 0
 232              		.cfi_startproc
 233              	.LVL17:
 486:fltk-1.3.4-1/jpeg/jdmaster.c ****   my_master_ptr master = (my_master_ptr) cinfo->master;
 487:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 488:fltk-1.3.4-1/jpeg/jdmaster.c ****   if (cinfo->quantize_colors)
 234              		.loc 1 488 0
 235 0000 8B476C   		movl	108(%rdi), %eax
 485:fltk-1.3.4-1/jpeg/jdmaster.c ****   my_master_ptr master = (my_master_ptr) cinfo->master;
 236              		.loc 1 485 0
 237 0003 53       		pushq	%rbx
 238              		.cfi_def_cfa_offset 16
 239              		.cfi_offset 3, -16
 486:fltk-1.3.4-1/jpeg/jdmaster.c ****   my_master_ptr master = (my_master_ptr) cinfo->master;
 240              		.loc 1 486 0
 241 0004 488B9F40 		movq	576(%rdi), %rbx
 241      020000
 242              	.LVL18:
 243              		.loc 1 488 0
 244 000b 85C0     		testl	%eax, %eax
 245 000d 740A     		je	.L25
 489:fltk-1.3.4-1/jpeg/jdmaster.c ****     (*cinfo->cquantize->finish_pass) (cinfo);
 246              		.loc 1 489 0
 247 000f 488B8790 		movq	656(%rdi), %rax
 247      020000
 248 0016 FF5010   		call	*16(%rax)
 249              	.LVL19:
 250              	.L25:
 490:fltk-1.3.4-1/jpeg/jdmaster.c ****   master->pass_number++;
 251              		.loc 1 490 0
 252 0019 83431801 		addl	$1, 24(%rbx)
 491:fltk-1.3.4-1/jpeg/jdmaster.c **** }
 253              		.loc 1 491 0
 254 001d 5B       		popq	%rbx
 255              		.cfi_def_cfa_offset 8
 256              	.LVL20:
 257 001e C3       		ret
 258              		.cfi_endproc
 259              	.LFE66:
 261              		.section	.text.unlikely.finish_output_pass
 262              	.LCOLDE1:
 263              		.section	.text.finish_output_pass
 264              	.LHOTE1:
 265              		.section	.text.unlikely.use_merged_upsample,"ax",@progbits
 266              	.LCOLDB2:
 267              		.section	.text.use_merged_upsample,"ax",@progbits
 268              	.LHOTB2:
 269              		.p2align 4,,15
 271              	use_merged_upsample:
 272              	.LFB61:
  46:fltk-1.3.4-1/jpeg/jdmaster.c **** #ifdef UPSAMPLE_MERGING_SUPPORTED
 273              		.loc 1 46 0
 274              		.cfi_startproc
 275              	.LVL21:
  49:fltk-1.3.4-1/jpeg/jdmaster.c ****     return FALSE;
 276              		.loc 1 49 0
 277 0000 8B4F64   		movl	100(%rdi), %ecx
  50:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* jdmerge.c only supports YCC=>RGB color conversion */
 278              		.loc 1 50 0
 279 0003 31C0     		xorl	%eax, %eax
  49:fltk-1.3.4-1/jpeg/jdmaster.c ****     return FALSE;
 280              		.loc 1 49 0
 281 0005 85C9     		testl	%ecx, %ecx
 282 0007 751A     		jne	.L28
  49:fltk-1.3.4-1/jpeg/jdmaster.c ****     return FALSE;
 283              		.loc 1 49 0 is_stmt 0 discriminator 1
 284 0009 8B879001 		movl	400(%rdi), %eax
 284      0000
 285 000f 85C0     		testl	%eax, %eax
 286 0011 7515     		jne	.L30
  52:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->out_color_space != JCS_RGB ||
 287              		.loc 1 52 0 is_stmt 1
 288 0013 48BA0300 		movabsq	$12884901891, %rdx
 288      00000300 
 288      0000
 289 001d 48395738 		cmpq	%rdx, 56(%rdi)
 290 0021 740D     		je	.L31
 291              	.L28:
  78:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 292              		.loc 1 78 0
 293 0023 F3C3     		rep ret
 294              		.p2align 4,,10
 295 0025 0F1F00   		.p2align 3
 296              	.L30:
  50:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* jdmerge.c only supports YCC=>RGB color conversion */
 297              		.loc 1 50 0
 298 0028 31C0     		xorl	%eax, %eax
  78:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 299              		.loc 1 78 0
 300 002a C3       		ret
 301 002b 0F1F4400 		.p2align 4,,10
 301      00
 302              		.p2align 3
 303              	.L31:
  52:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->out_color_space != JCS_RGB ||
 304              		.loc 1 52 0 discriminator 1
 305 0030 837F4002 		cmpl	$2, 64(%rdi)
 306 0034 75ED     		jne	.L28
  53:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->out_color_components != RGB_PIXELSIZE ||
 307              		.loc 1 53 0
 308 0036 83BF9000 		cmpl	$3, 144(%rdi)
 308      000003
 309 003d 75E4     		jne	.L28
  54:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->color_transform)
 310              		.loc 1 54 0
 311 003f 8B978C01 		movl	396(%rdi), %edx
 311      0000
 312 0045 85D2     		testl	%edx, %edx
 313 0047 75DA     		jne	.L28
 314              	.LVL22:
 315              	.LBB10:
 316              	.LBB11:
  58:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->comp_info[1].h_samp_factor != 1 ||
 317              		.loc 1 58 0
 318 0049 488B9730 		movq	304(%rdi), %rdx
 318      010000
 319 0050 837A0802 		cmpl	$2, 8(%rdx)
 320 0054 75CD     		jne	.L28
 321 0056 837A6801 		cmpl	$1, 104(%rdx)
 322 005a 75C7     		jne	.L28
  59:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->comp_info[2].h_samp_factor != 1 ||
 323              		.loc 1 59 0
 324 005c 83BAC800 		cmpl	$1, 200(%rdx)
 324      000001
 325 0063 75BE     		jne	.L28
  60:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->comp_info[0].v_samp_factor >  2 ||
 326              		.loc 1 60 0
 327 0065 837A0C02 		cmpl	$2, 12(%rdx)
 328 0069 7FB8     		jg	.L28
  61:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->comp_info[1].v_samp_factor != 1 ||
 329              		.loc 1 61 0
 330 006b 837A6C01 		cmpl	$1, 108(%rdx)
 331 006f 75B2     		jne	.L28
  62:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->comp_info[2].v_samp_factor != 1)
 332              		.loc 1 62 0
 333 0071 83BACC00 		cmpl	$1, 204(%rdx)
 333      000001
 334 0078 75A9     		jne	.L28
  66:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 335              		.loc 1 66 0
 336 007a 8B4A24   		movl	36(%rdx), %ecx
 337 007d 3B8FA801 		cmpl	424(%rdi), %ecx
 337      0000
 338 0083 759E     		jne	.L28
 339 0085 3B8A8400 		cmpl	132(%rdx), %ecx
 339      0000
 340 008b 7596     		jne	.L28
  67:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 341              		.loc 1 67 0
 342 008d 3B8AE400 		cmpl	228(%rdx), %ecx
 342      0000
 343 0093 758E     		jne	.L28
  69:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 344              		.loc 1 69 0
 345 0095 8B4A28   		movl	40(%rdx), %ecx
  68:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 346              		.loc 1 68 0
 347 0098 3B8FAC01 		cmpl	428(%rdi), %ecx
 347      0000
 348 009e 7583     		jne	.L28
  69:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 349              		.loc 1 69 0
 350 00a0 3B8A8800 		cmpl	136(%rdx), %ecx
 350      0000
 351 00a6 0F8577FF 		jne	.L28
 351      FFFF
 352              	.LBE11:
 353              	.LBE10:
  50:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* jdmerge.c only supports YCC=>RGB color conversion */
 354              		.loc 1 50 0
 355 00ac 31C0     		xorl	%eax, %eax
 356 00ae 398AE800 		cmpl	%ecx, 232(%rdx)
 356      0000
 357 00b4 0F94C0   		sete	%al
 358 00b7 C3       		ret
 359              		.cfi_endproc
 360              	.LFE61:
 362              		.section	.text.unlikely.use_merged_upsample
 363              	.LCOLDE2:
 364              		.section	.text.use_merged_upsample
 365              	.LHOTE2:
 366              		.section	.text.unlikely.jpeg_calc_output_dimensions,"ax",@progbits
 367              	.LCOLDB3:
 368              		.section	.text.jpeg_calc_output_dimensions,"ax",@progbits
 369              	.LHOTB3:
 370              		.p2align 4,,15
 371              		.globl	jpeg_calc_output_dimensions
 373              	jpeg_calc_output_dimensions:
 374              	.LFB62:
  93:fltk-1.3.4-1/jpeg/jdmaster.c **** #ifdef IDCT_SCALING_SUPPORTED
 375              		.loc 1 93 0
 376              		.cfi_startproc
 377              	.LVL23:
 378 0000 4154     		pushq	%r12
 379              		.cfi_def_cfa_offset 16
 380              		.cfi_offset 12, -16
 381 0002 55       		pushq	%rbp
 382              		.cfi_def_cfa_offset 24
 383              		.cfi_offset 6, -24
 384 0003 53       		pushq	%rbx
 385              		.cfi_def_cfa_offset 32
 386              		.cfi_offset 3, -32
 100:fltk-1.3.4-1/jpeg/jdmaster.c ****     ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 387              		.loc 1 100 0
 388 0004 817F24CA 		cmpl	$202, 36(%rdi)
 388      000000
  93:fltk-1.3.4-1/jpeg/jdmaster.c **** #ifdef IDCT_SCALING_SUPPORTED
 389              		.loc 1 93 0
 390 000b 4889FB   		movq	%rdi, %rbx
 100:fltk-1.3.4-1/jpeg/jdmaster.c ****     ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 391              		.loc 1 100 0
 392 000e 7418     		je	.L33
 101:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 393              		.loc 1 101 0
 394 0010 488B07   		movq	(%rdi), %rax
 395 0013 C7402815 		movl	$21, 40(%rax)
 395      000000
 396 001a 488B07   		movq	(%rdi), %rax
 397 001d 8B5724   		movl	36(%rdi), %edx
 398 0020 89502C   		movl	%edx, 44(%rax)
 399 0023 488B07   		movq	(%rdi), %rax
 400 0026 FF10     		call	*(%rax)
 401              	.LVL24:
 402              	.L33:
 104:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 403              		.loc 1 104 0
 404 0028 4889DF   		movq	%rbx, %rdi
 405 002b E8000000 		call	jpeg_core_output_dimensions
 405      00
 406              	.LVL25:
 113:fltk-1.3.4-1/jpeg/jdmaster.c ****        ci++, compptr++) {
 407              		.loc 1 113 0
 408 0030 8B4338   		movl	56(%rbx), %eax
 409 0033 4531C9   		xorl	%r9d, %r9d
 410 0036 488BBB30 		movq	304(%rbx), %rdi
 410      010000
 411              	.LVL26:
 412 003d 85C0     		testl	%eax, %eax
 413 003f 0F8E2B01 		jle	.L35
 413      0000
 414              	.LVL27:
 415              		.p2align 4,,10
 416 0045 0F1F00   		.p2align 3
 417              	.L58:
 418 0048 837B6401 		cmpl	$1, 100(%rbx)
 419 004c 448B9BA8 		movl	424(%rbx), %r11d
 419      010000
  93:fltk-1.3.4-1/jpeg/jdmaster.c **** #ifdef IDCT_SCALING_SUPPORTED
 420              		.loc 1 93 0
 421 0053 BE010000 		movl	$1, %esi
 421      00
 422 0058 4519D2   		sbbl	%r10d, %r10d
 423 005b 4183E2FC 		andl	$-4, %r10d
 424 005f 4183C208 		addl	$8, %r10d
 425 0063 EB1A     		jmp	.L45
 426              	.LVL28:
 427              		.p2align 4,,10
 428 0065 0F1F00   		.p2align 3
 429              	.L63:
 430              	.LBB12:
 117:fltk-1.3.4-1/jpeg/jdmaster.c **** 	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
 431              		.loc 1 117 0
 432 0068 8B4F08   		movl	8(%rdi), %ecx
 433 006b 8B83A001 		movl	416(%rbx), %eax
 433      0000
 434 0071 0FAFCE   		imull	%esi, %ecx
 435 0074 99       		cltd
 436 0075 01C9     		addl	%ecx, %ecx
 437 0077 F7F9     		idivl	%ecx
 438 0079 85D2     		testl	%edx, %edx
 439 007b 750E     		jne	.L36
 119:fltk-1.3.4-1/jpeg/jdmaster.c ****     }
 440              		.loc 1 119 0
 441 007d 01F6     		addl	%esi, %esi
 442              	.LVL29:
 443              	.L45:
 116:fltk-1.3.4-1/jpeg/jdmaster.c **** 	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 444              		.loc 1 116 0
 445 007f 4189F0   		movl	%esi, %r8d
 446 0082 450FAFC3 		imull	%r11d, %r8d
 447 0086 4539C2   		cmpl	%r8d, %r10d
 448 0089 7DDD     		jge	.L63
 449              	.L36:
 121:fltk-1.3.4-1/jpeg/jdmaster.c ****     ssize = 1;
 450              		.loc 1 121 0
 451 008b 44894724 		movl	%r8d, 36(%rdi)
 452              	.LVL30:
 453 008f 837B6401 		cmpl	$1, 100(%rbx)
 122:fltk-1.3.4-1/jpeg/jdmaster.c ****     while (cinfo->min_DCT_v_scaled_size * ssize <=
 454              		.loc 1 122 0
 455 0093 BE010000 		movl	$1, %esi
 455      00
 456 0098 8BABAC01 		movl	428(%rbx), %ebp
 456      0000
 457 009e 4519DB   		sbbl	%r11d, %r11d
 458 00a1 4183E3FC 		andl	$-4, %r11d
 459 00a5 4183C308 		addl	$8, %r11d
 123:fltk-1.3.4-1/jpeg/jdmaster.c **** 	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 460              		.loc 1 123 0
 461 00a9 EB1C     		jmp	.L38
 462              	.LVL31:
 463 00ab 0F1F4400 		.p2align 4,,10
 463      00
 464              		.p2align 3
 465              	.L64:
 124:fltk-1.3.4-1/jpeg/jdmaster.c **** 	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
 466              		.loc 1 124 0
 467 00b0 8B4F0C   		movl	12(%rdi), %ecx
 468 00b3 8B83A401 		movl	420(%rbx), %eax
 468      0000
 469 00b9 0FAFCE   		imull	%esi, %ecx
 470 00bc 99       		cltd
 471 00bd 01C9     		addl	%ecx, %ecx
 472 00bf F7F9     		idivl	%ecx
 473 00c1 85D2     		testl	%edx, %edx
 474 00c3 750E     		jne	.L39
 126:fltk-1.3.4-1/jpeg/jdmaster.c ****     }
 475              		.loc 1 126 0
 476 00c5 01F6     		addl	%esi, %esi
 477              	.LVL32:
 478              	.L38:
 123:fltk-1.3.4-1/jpeg/jdmaster.c **** 	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 479              		.loc 1 123 0
 480 00c7 4189F2   		movl	%esi, %r10d
 481 00ca 440FAFD5 		imull	%ebp, %r10d
 482 00ce 4539D3   		cmpl	%r10d, %r11d
 483 00d1 7DDD     		jge	.L64
 484              	.L39:
 131:fltk-1.3.4-1/jpeg/jdmaster.c **** 	compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
 485              		.loc 1 131 0
 486 00d3 438D0412 		leal	(%r10,%r10), %eax
 128:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 487              		.loc 1 128 0
 488 00d7 44895728 		movl	%r10d, 40(%rdi)
 131:fltk-1.3.4-1/jpeg/jdmaster.c **** 	compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
 489              		.loc 1 131 0
 490 00db 4139C0   		cmpl	%eax, %r8d
 491 00de 0F8E9C00 		jle	.L41
 491      0000
 132:fltk-1.3.4-1/jpeg/jdmaster.c ****     else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
 492              		.loc 1 132 0
 493 00e4 894724   		movl	%eax, 36(%rdi)
 494              	.L42:
 495              	.LBE12:
 113:fltk-1.3.4-1/jpeg/jdmaster.c ****        ci++, compptr++) {
 496              		.loc 1 113 0
 497 00e7 8B4338   		movl	56(%rbx), %eax
 114:fltk-1.3.4-1/jpeg/jdmaster.c ****     int ssize = 1;
 498              		.loc 1 114 0
 499 00ea 4183C101 		addl	$1, %r9d
 500              	.LVL33:
 501 00ee 4883C760 		addq	$96, %rdi
 502              	.LVL34:
 113:fltk-1.3.4-1/jpeg/jdmaster.c ****        ci++, compptr++) {
 503              		.loc 1 113 0
 504 00f2 4439C8   		cmpl	%r9d, %eax
 505 00f5 0F8F4DFF 		jg	.L58
 505      FFFF
 506              	.LVL35:
 140:fltk-1.3.4-1/jpeg/jdmaster.c ****        ci++, compptr++) {
 507              		.loc 1 140 0
 508 00fb 85C0     		testl	%eax, %eax
 509 00fd 488BAB30 		movq	304(%rbx), %rbp
 509      010000
 510              	.LVL36:
 511 0104 7E6A     		jle	.L35
 512 0106 4531E4   		xorl	%r12d, %r12d
 513              	.LVL37:
 514 0109 0F1F8000 		.p2align 4,,10
 514      000000
 515              		.p2align 3
 516              	.L46:
 144:fltk-1.3.4-1/jpeg/jdmaster.c **** 		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 517              		.loc 1 144 0
 518 0110 8B4508   		movl	8(%rbp), %eax
 519 0113 8B7B30   		movl	48(%rbx), %edi
 141:fltk-1.3.4-1/jpeg/jdmaster.c ****     /* Size in samples, after IDCT scaling */
 520              		.loc 1 141 0
 521 0116 4183C401 		addl	$1, %r12d
 522              	.LVL38:
 144:fltk-1.3.4-1/jpeg/jdmaster.c **** 		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 523              		.loc 1 144 0
 524 011a 0FAF4524 		imull	36(%rbp), %eax
 525 011e 8BB3A001 		movl	416(%rbx), %esi
 525      0000
 141:fltk-1.3.4-1/jpeg/jdmaster.c ****     /* Size in samples, after IDCT scaling */
 526              		.loc 1 141 0
 527 0124 4883C560 		addq	$96, %rbp
 528              	.LVL39:
 144:fltk-1.3.4-1/jpeg/jdmaster.c **** 		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 529              		.loc 1 144 0
 530 0128 0FAFB32C 		imull	556(%rbx), %esi
 530      020000
 531 012f 4898     		cltq
 532 0131 480FAFF8 		imulq	%rax, %rdi
 533 0135 4863F6   		movslq	%esi, %rsi
 534 0138 E8000000 		call	jdiv_round_up
 534      00
 535              	.LVL40:
 143:fltk-1.3.4-1/jpeg/jdmaster.c ****       jdiv_round_up((long) cinfo->image_width *
 536              		.loc 1 143 0
 537 013d 8945CC   		movl	%eax, -52(%rbp)
 148:fltk-1.3.4-1/jpeg/jdmaster.c **** 		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 538              		.loc 1 148 0
 539 0140 8B45AC   		movl	-84(%rbp), %eax
 540 0143 0FAF45C8 		imull	-56(%rbp), %eax
 541 0147 8B7B34   		movl	52(%rbx), %edi
 542 014a 8BB3A401 		movl	420(%rbx), %esi
 542      0000
 543 0150 0FAFB32C 		imull	556(%rbx), %esi
 543      020000
 544 0157 4898     		cltq
 545 0159 480FAFF8 		imulq	%rax, %rdi
 546 015d 4863F6   		movslq	%esi, %rsi
 547 0160 E8000000 		call	jdiv_round_up
 547      00
 548              	.LVL41:
 147:fltk-1.3.4-1/jpeg/jdmaster.c ****       jdiv_round_up((long) cinfo->image_height *
 549              		.loc 1 147 0
 550 0165 8945D0   		movl	%eax, -48(%rbp)
 551              	.LVL42:
 140:fltk-1.3.4-1/jpeg/jdmaster.c ****        ci++, compptr++) {
 552              		.loc 1 140 0
 553 0168 8B4338   		movl	56(%rbx), %eax
 554 016b 4439E0   		cmpl	%r12d, %eax
 555 016e 7FA0     		jg	.L46
 556              	.LVL43:
 557              	.L35:
 157:fltk-1.3.4-1/jpeg/jdmaster.c ****   case JCS_GRAYSCALE:
 558              		.loc 1 157 0
 559 0170 837B4007 		cmpl	$7, 64(%rbx)
 560 0174 7774     		ja	.L47
 561 0176 8B5340   		movl	64(%rbx), %edx
 562 0179 FF24D500 		jmp	*.L49(,%rdx,8)
 562      000000
 563              		.section	.rodata.jpeg_calc_output_dimensions,"a",@progbits
 564              		.align 8
 565              		.align 4
 566              	.L49:
 567 0000 00000000 		.quad	.L47
 567      00000000 
 568 0008 00000000 		.quad	.L48
 568      00000000 
 569 0010 00000000 		.quad	.L51
 569      00000000 
 570 0018 00000000 		.quad	.L51
 570      00000000 
 571 0020 00000000 		.quad	.L52
 571      00000000 
 572 0028 00000000 		.quad	.L52
 572      00000000 
 573 0030 00000000 		.quad	.L51
 573      00000000 
 574 0038 00000000 		.quad	.L51
 574      00000000 
 575              		.section	.text.jpeg_calc_output_dimensions
 576              	.LVL44:
 577              		.p2align 4,,10
 578              		.p2align 3
 579              	.L41:
 580              	.LBB13:
 133:fltk-1.3.4-1/jpeg/jdmaster.c **** 	compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
 581              		.loc 1 133 0
 582 0180 4501C0   		addl	%r8d, %r8d
 583 0183 4539C2   		cmpl	%r8d, %r10d
 584 0186 0F8E5BFF 		jle	.L42
 584      FFFF
 134:fltk-1.3.4-1/jpeg/jdmaster.c ****   }
 585              		.loc 1 134 0
 586 018c 44894728 		movl	%r8d, 40(%rdi)
 587 0190 E952FFFF 		jmp	.L42
 587      FF
 588              	.LVL45:
 589              	.L51:
 590              	.LBE13:
 167:fltk-1.3.4-1/jpeg/jdmaster.c ****     break;
 591              		.loc 1 167 0
 592 0195 C7839000 		movl	$3, 144(%rbx)
 592      00000300 
 592      0000
 593              	.L53:
 177:fltk-1.3.4-1/jpeg/jdmaster.c **** 			      cinfo->out_color_components);
 594              		.loc 1 177 0
 595 019f 8B536C   		movl	108(%rbx), %edx
 596 01a2 B8010000 		movl	$1, %eax
 596      00
 597 01a7 85D2     		testl	%edx, %edx
 598 01a9 7506     		jne	.L54
 177:fltk-1.3.4-1/jpeg/jdmaster.c **** 			      cinfo->out_color_components);
 599              		.loc 1 177 0 is_stmt 0 discriminator 1
 600 01ab 8B839000 		movl	144(%rbx), %eax
 600      0000
 601              	.L54:
 177:fltk-1.3.4-1/jpeg/jdmaster.c **** 			      cinfo->out_color_components);
 602              		.loc 1 177 0 discriminator 4
 603 01b1 89839400 		movl	%eax, 148(%rbx)
 603      0000
 181:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
 604              		.loc 1 181 0 is_stmt 1 discriminator 4
 605 01b7 4889DF   		movq	%rbx, %rdi
 606 01ba E8000000 		call	use_merged_upsample
 606      00
 607              	.LVL46:
 608 01bf 85C0     		testl	%eax, %eax
 609 01c1 752F     		jne	.L65
 184:fltk-1.3.4-1/jpeg/jdmaster.c **** }
 610              		.loc 1 184 0
 611 01c3 C7839800 		movl	$1, 152(%rbx)
 611      00000100 
 611      0000
 185:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 612              		.loc 1 185 0
 613 01cd 5B       		popq	%rbx
 614              		.cfi_remember_state
 615              		.cfi_def_cfa_offset 24
 616              	.LVL47:
 617 01ce 5D       		popq	%rbp
 618              		.cfi_def_cfa_offset 16
 619 01cf 415C     		popq	%r12
 620              		.cfi_def_cfa_offset 8
 621 01d1 C3       		ret
 622              	.LVL48:
 623              	.L52:
 624              		.cfi_restore_state
 171:fltk-1.3.4-1/jpeg/jdmaster.c ****     break;
 625              		.loc 1 171 0
 626 01d2 C7839000 		movl	$4, 144(%rbx)
 626      00000400 
 626      0000
 172:fltk-1.3.4-1/jpeg/jdmaster.c ****   default:			/* else must be same colorspace as in file */
 627              		.loc 1 172 0
 628 01dc EBC1     		jmp	.L53
 629              	.L48:
 159:fltk-1.3.4-1/jpeg/jdmaster.c ****     break;
 630              		.loc 1 159 0
 631 01de C7839000 		movl	$1, 144(%rbx)
 631      00000100 
 631      0000
 160:fltk-1.3.4-1/jpeg/jdmaster.c ****   case JCS_RGB:
 632              		.loc 1 160 0
 633 01e8 EBB5     		jmp	.L53
 634              	.L47:
 174:fltk-1.3.4-1/jpeg/jdmaster.c ****     break;
 635              		.loc 1 174 0
 636 01ea 89839000 		movl	%eax, 144(%rbx)
 636      0000
 175:fltk-1.3.4-1/jpeg/jdmaster.c ****   }
 637              		.loc 1 175 0
 638 01f0 EBAD     		jmp	.L53
 639              	.L65:
 182:fltk-1.3.4-1/jpeg/jdmaster.c ****   else
 640              		.loc 1 182 0
 641 01f2 8B83A401 		movl	420(%rbx), %eax
 641      0000
 642 01f8 89839800 		movl	%eax, 152(%rbx)
 642      0000
 185:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 643              		.loc 1 185 0
 644 01fe 5B       		popq	%rbx
 645              		.cfi_def_cfa_offset 24
 646              	.LVL49:
 647 01ff 5D       		popq	%rbp
 648              		.cfi_def_cfa_offset 16
 649 0200 415C     		popq	%r12
 650              		.cfi_def_cfa_offset 8
 651 0202 C3       		ret
 652              		.cfi_endproc
 653              	.LFE62:
 655              		.section	.text.unlikely.jpeg_calc_output_dimensions
 656              	.LCOLDE3:
 657              		.section	.text.jpeg_calc_output_dimensions
 658              	.LHOTE3:
 659              		.section	.text.unlikely.jpeg_new_colormap,"ax",@progbits
 660              	.LCOLDB4:
 661              		.section	.text.jpeg_new_colormap,"ax",@progbits
 662              	.LHOTB4:
 663              		.p2align 4,,15
 664              		.globl	jpeg_new_colormap
 666              	jpeg_new_colormap:
 667              	.LFB67:
 492:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 493:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 494:fltk-1.3.4-1/jpeg/jdmaster.c **** #ifdef D_MULTISCAN_FILES_SUPPORTED
 495:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 496:fltk-1.3.4-1/jpeg/jdmaster.c **** /*
 497:fltk-1.3.4-1/jpeg/jdmaster.c ****  * Switch to a new external colormap between output passes.
 498:fltk-1.3.4-1/jpeg/jdmaster.c ****  */
 499:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 500:fltk-1.3.4-1/jpeg/jdmaster.c **** GLOBAL(void)
 501:fltk-1.3.4-1/jpeg/jdmaster.c **** jpeg_new_colormap (j_decompress_ptr cinfo)
 502:fltk-1.3.4-1/jpeg/jdmaster.c **** {
 668              		.loc 1 502 0
 669              		.cfi_startproc
 670              	.LVL50:
 671 0000 55       		pushq	%rbp
 672              		.cfi_def_cfa_offset 16
 673              		.cfi_offset 6, -16
 674 0001 53       		pushq	%rbx
 675              		.cfi_def_cfa_offset 24
 676              		.cfi_offset 3, -24
 677 0002 4889FB   		movq	%rdi, %rbx
 678 0005 4883EC08 		subq	$8, %rsp
 679              		.cfi_def_cfa_offset 32
 503:fltk-1.3.4-1/jpeg/jdmaster.c ****   my_master_ptr master = (my_master_ptr) cinfo->master;
 504:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 505:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* Prevent application from calling me at wrong times */
 506:fltk-1.3.4-1/jpeg/jdmaster.c ****   if (cinfo->global_state != DSTATE_BUFIMAGE)
 680              		.loc 1 506 0
 681 0009 817F24CF 		cmpl	$207, 36(%rdi)
 681      000000
 503:fltk-1.3.4-1/jpeg/jdmaster.c ****   my_master_ptr master = (my_master_ptr) cinfo->master;
 682              		.loc 1 503 0
 683 0010 488BAF40 		movq	576(%rdi), %rbp
 683      020000
 684              	.LVL51:
 685              		.loc 1 506 0
 686 0017 7418     		je	.L67
 507:fltk-1.3.4-1/jpeg/jdmaster.c ****     ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 687              		.loc 1 507 0
 688 0019 488B07   		movq	(%rdi), %rax
 689 001c C7402815 		movl	$21, 40(%rax)
 689      000000
 690 0023 488B07   		movq	(%rdi), %rax
 691 0026 8B5724   		movl	36(%rdi), %edx
 692 0029 89502C   		movl	%edx, 44(%rax)
 693 002c 488B07   		movq	(%rdi), %rax
 694 002f FF10     		call	*(%rax)
 695              	.LVL52:
 696              	.L67:
 508:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 509:fltk-1.3.4-1/jpeg/jdmaster.c ****   if (cinfo->quantize_colors && cinfo->enable_external_quant &&
 697              		.loc 1 509 0
 698 0031 8B536C   		movl	108(%rbx), %edx
 699 0034 85D2     		testl	%edx, %edx
 700 0036 7438     		je	.L68
 701              		.loc 1 509 0 is_stmt 0 discriminator 1
 702 0038 8B838000 		movl	128(%rbx), %eax
 702      0000
 703 003e 85C0     		testl	%eax, %eax
 704 0040 742E     		je	.L68
 705              		.loc 1 509 0 discriminator 2
 706 0042 4883BBA0 		cmpq	$0, 160(%rbx)
 706      00000000 
 707 004a 7424     		je	.L68
 510:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->colormap != NULL) {
 511:fltk-1.3.4-1/jpeg/jdmaster.c ****     /* Select 2-pass quantizer for external colormap use */
 512:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->cquantize = master->quantizer_2pass;
 708              		.loc 1 512 0 is_stmt 1
 709 004c 488B4528 		movq	40(%rbp), %rax
 513:fltk-1.3.4-1/jpeg/jdmaster.c ****     /* Notify quantizer of colormap change */
 514:fltk-1.3.4-1/jpeg/jdmaster.c ****     (*cinfo->cquantize->new_color_map) (cinfo);
 710              		.loc 1 514 0
 711 0050 4889DF   		movq	%rbx, %rdi
 512:fltk-1.3.4-1/jpeg/jdmaster.c ****     /* Notify quantizer of colormap change */
 712              		.loc 1 512 0
 713 0053 48898390 		movq	%rax, 656(%rbx)
 713      020000
 714              		.loc 1 514 0
 715 005a FF5018   		call	*24(%rax)
 716              	.LVL53:
 515:fltk-1.3.4-1/jpeg/jdmaster.c ****     master->pub.is_dummy_pass = FALSE; /* just in case */
 717              		.loc 1 515 0
 718 005d C7451000 		movl	$0, 16(%rbp)
 718      000000
 516:fltk-1.3.4-1/jpeg/jdmaster.c ****   } else
 517:fltk-1.3.4-1/jpeg/jdmaster.c ****     ERREXIT(cinfo, JERR_MODE_CHANGE);
 518:fltk-1.3.4-1/jpeg/jdmaster.c **** }
 719              		.loc 1 518 0
 720 0064 4883C408 		addq	$8, %rsp
 721              		.cfi_remember_state
 722              		.cfi_def_cfa_offset 24
 723 0068 5B       		popq	%rbx
 724              		.cfi_def_cfa_offset 16
 725              	.LVL54:
 726 0069 5D       		popq	%rbp
 727              		.cfi_def_cfa_offset 8
 728              	.LVL55:
 729 006a C3       		ret
 730              	.LVL56:
 731 006b 0F1F4400 		.p2align 4,,10
 731      00
 732              		.p2align 3
 733              	.L68:
 734              		.cfi_restore_state
 517:fltk-1.3.4-1/jpeg/jdmaster.c **** }
 735              		.loc 1 517 0
 736 0070 488B03   		movq	(%rbx), %rax
 737 0073 4889DF   		movq	%rbx, %rdi
 738 0076 C740282F 		movl	$47, 40(%rax)
 738      000000
 739 007d 488B03   		movq	(%rbx), %rax
 740 0080 488B00   		movq	(%rax), %rax
 741              		.loc 1 518 0
 742 0083 4883C408 		addq	$8, %rsp
 743              		.cfi_def_cfa_offset 24
 744 0087 5B       		popq	%rbx
 745              		.cfi_def_cfa_offset 16
 746              	.LVL57:
 747 0088 5D       		popq	%rbp
 748              		.cfi_def_cfa_offset 8
 749              	.LVL58:
 517:fltk-1.3.4-1/jpeg/jdmaster.c **** }
 750              		.loc 1 517 0
 751 0089 FFE0     		jmp	*%rax
 752              	.LVL59:
 753              		.cfi_endproc
 754              	.LFE67:
 756              		.section	.text.unlikely.jpeg_new_colormap
 757              	.LCOLDE4:
 758              		.section	.text.jpeg_new_colormap
 759              	.LHOTE4:
 760              		.section	.text.unlikely.jinit_master_decompress,"ax",@progbits
 761              	.LCOLDB5:
 762              		.section	.text.jinit_master_decompress,"ax",@progbits
 763              	.LHOTB5:
 764              		.p2align 4,,15
 765              		.globl	jinit_master_decompress
 767              	jinit_master_decompress:
 768              	.LFB68:
 519:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 520:fltk-1.3.4-1/jpeg/jdmaster.c **** #endif /* D_MULTISCAN_FILES_SUPPORTED */
 521:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 522:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 523:fltk-1.3.4-1/jpeg/jdmaster.c **** /*
 524:fltk-1.3.4-1/jpeg/jdmaster.c ****  * Initialize master decompression control and select active modules.
 525:fltk-1.3.4-1/jpeg/jdmaster.c ****  * This is performed at the start of jpeg_start_decompress.
 526:fltk-1.3.4-1/jpeg/jdmaster.c ****  */
 527:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 528:fltk-1.3.4-1/jpeg/jdmaster.c **** GLOBAL(void)
 529:fltk-1.3.4-1/jpeg/jdmaster.c **** jinit_master_decompress (j_decompress_ptr cinfo)
 530:fltk-1.3.4-1/jpeg/jdmaster.c **** {
 769              		.loc 1 530 0
 770              		.cfi_startproc
 771              	.LVL60:
 772 0000 55       		pushq	%rbp
 773              		.cfi_def_cfa_offset 16
 774              		.cfi_offset 6, -16
 775 0001 53       		pushq	%rbx
 776              		.cfi_def_cfa_offset 24
 777              		.cfi_offset 3, -24
 778 0002 4889FD   		movq	%rdi, %rbp
 531:fltk-1.3.4-1/jpeg/jdmaster.c ****   my_master_ptr master;
 532:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 533:fltk-1.3.4-1/jpeg/jdmaster.c ****   master = (my_master_ptr)
 779              		.loc 1 533 0
 780 0005 BA300000 		movl	$48, %edx
 780      00
 781 000a BE010000 		movl	$1, %esi
 781      00
 530:fltk-1.3.4-1/jpeg/jdmaster.c ****   my_master_ptr master;
 782              		.loc 1 530 0
 783 000f 4883EC08 		subq	$8, %rsp
 784              		.cfi_def_cfa_offset 32
 534:fltk-1.3.4-1/jpeg/jdmaster.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 785              		.loc 1 534 0
 786 0013 488B4708 		movq	8(%rdi), %rax
 533:fltk-1.3.4-1/jpeg/jdmaster.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 787              		.loc 1 533 0
 788 0017 FF10     		call	*(%rax)
 789              	.LVL61:
 535:fltk-1.3.4-1/jpeg/jdmaster.c **** 				  SIZEOF(my_decomp_master));
 536:fltk-1.3.4-1/jpeg/jdmaster.c ****   cinfo->master = &master->pub;
 790              		.loc 1 536 0
 791 0019 48898540 		movq	%rax, 576(%rbp)
 791      020000
 537:fltk-1.3.4-1/jpeg/jdmaster.c ****   master->pub.prepare_for_output_pass = prepare_for_output_pass;
 792              		.loc 1 537 0
 793 0020 48C70000 		movq	$prepare_for_output_pass, (%rax)
 793      000000
 538:fltk-1.3.4-1/jpeg/jdmaster.c ****   master->pub.finish_output_pass = finish_output_pass;
 794              		.loc 1 538 0
 795 0027 48C74008 		movq	$finish_output_pass, 8(%rax)
 795      00000000 
 539:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 540:fltk-1.3.4-1/jpeg/jdmaster.c ****   master->pub.is_dummy_pass = FALSE;
 796              		.loc 1 540 0
 797 002f C7401000 		movl	$0, 16(%rax)
 797      000000
 798              	.LVL62:
 799              	.LBB25:
 800              	.LBB26:
 280:fltk-1.3.4-1/jpeg/jdmaster.c ****     ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 801              		.loc 1 280 0
 802 0036 83BD2801 		cmpl	$8, 296(%rbp)
 802      000008
 274:fltk-1.3.4-1/jpeg/jdmaster.c ****   boolean use_c_buffer;
 803              		.loc 1 274 0
 804 003d 488B9D40 		movq	576(%rbp), %rbx
 804      020000
 805              	.LVL63:
 280:fltk-1.3.4-1/jpeg/jdmaster.c ****     ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 806              		.loc 1 280 0
 807 0044 7421     		je	.L73
 281:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 808              		.loc 1 281 0
 809 0046 488B4500 		movq	0(%rbp), %rax
 810              	.LVL64:
 811 004a 4889EF   		movq	%rbp, %rdi
 812 004d C7402810 		movl	$16, 40(%rax)
 812      000000
 813 0054 488B4500 		movq	0(%rbp), %rax
 814 0058 8B952801 		movl	296(%rbp), %edx
 814      0000
 815 005e 89502C   		movl	%edx, 44(%rax)
 816 0061 488B4500 		movq	0(%rbp), %rax
 817 0065 FF10     		call	*(%rax)
 818              	.LVL65:
 819              	.L73:
 284:fltk-1.3.4-1/jpeg/jdmaster.c ****   prepare_range_limit_table(cinfo);
 820              		.loc 1 284 0
 821 0067 4889EF   		movq	%rbp, %rdi
 822 006a E8000000 		call	jpeg_calc_output_dimensions
 822      00
 823              	.LVL66:
 824              	.LBB27:
 825              	.LBB28:
 239:fltk-1.3.4-1/jpeg/jdmaster.c **** 		(5 * (MAXJSAMPLE+1) + CENTERJSAMPLE) * SIZEOF(JSAMPLE));
 826              		.loc 1 239 0
 827 006f 488B4508 		movq	8(%rbp), %rax
 238:fltk-1.3.4-1/jpeg/jdmaster.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 828              		.loc 1 238 0
 829 0073 BA800500 		movl	$1408, %edx
 829      00
 830 0078 4889EF   		movq	%rbp, %rdi
 831 007b BE010000 		movl	$1, %esi
 831      00
 832 0080 FF10     		call	*(%rax)
 833              	.LVL67:
 834 0082 4889C2   		movq	%rax, %rdx
 835              	.LVL68:
 242:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* First segment of "simple" table: limit[x] = 0 for x < 0 */
 836              		.loc 1 242 0
 837 0085 488D8000 		leaq	256(%rax), %rax
 837      010000
 838              	.LVL69:
 839              	.LBB29:
 840              	.LBB30:
 841              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string3.h"
   1:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* Copyright (C) 2004-2016 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string3.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string3.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string3.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string3.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string3.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string3.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string3.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string3.h ****    <http://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef _STRING_H
  19:/usr/include/x86_64-linux-gnu/bits/string3.h **** # error "Never use <bits/string3.h> directly; include <string.h> instead."
  20:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  21:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  22:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  23:/usr/include/x86_64-linux-gnu/bits/string3.h **** __warndecl (__warn_memset_zero_len,
  24:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  25:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  26:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  27:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef __cplusplus
  28:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* XXX This is temporarily.  We should not redefine any of the symbols
  29:/usr/include/x86_64-linux-gnu/bits/string3.h ****    and instead integrate the error checking into the original
  30:/usr/include/x86_64-linux-gnu/bits/string3.h ****    definitions.  */
  31:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memcpy
  32:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memmove
  33:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memset
  34:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcat
  35:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcpy
  36:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncat
  37:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncpy
  38:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_GNU
  39:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef mempcpy
  40:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef stpcpy
  41:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  42:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_MISC
  43:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bcopy
  44:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bzero
  45:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  46:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  47:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  48:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  49:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  50:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  51:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	       size_t __len))
  52:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  53:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  54:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  55:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  56:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  57:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memmove (void *__dest, const void *__src, size_t __len))
  58:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  59:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  60:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  61:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  62:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifdef __USE_GNU
  63:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  64:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
  65:/usr/include/x86_64-linux-gnu/bits/string3.h **** 		size_t __len))
  66:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  67:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
  68:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  69:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  70:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  71:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  72:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* The first two tests here help to catch a somewhat common problem
  73:/usr/include/x86_64-linux-gnu/bits/string3.h ****    where the second and third parameter are transposed.  This is
  74:/usr/include/x86_64-linux-gnu/bits/string3.h ****    especially problematic if the intended fill value is zero.  In this
  75:/usr/include/x86_64-linux-gnu/bits/string3.h ****    case no work is done at all.  We detect these problems by referring
  76:/usr/include/x86_64-linux-gnu/bits/string3.h ****    non-existing functions.  */
  77:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  78:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memset (void *__dest, int __ch, size_t __len))
  79:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  80:/usr/include/x86_64-linux-gnu/bits/string3.h ****   /* GCC-5.0 and newer implements these checks in the compiler, so we don't
  81:/usr/include/x86_64-linux-gnu/bits/string3.h ****      need them here.  */
  82:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  83:/usr/include/x86_64-linux-gnu/bits/string3.h ****   if (__builtin_constant_p (__len) && __len == 0
  84:/usr/include/x86_64-linux-gnu/bits/string3.h ****       && (!__builtin_constant_p (__ch) || __ch != 0))
  85:/usr/include/x86_64-linux-gnu/bits/string3.h ****     {
  86:/usr/include/x86_64-linux-gnu/bits/string3.h ****       __warn_memset_zero_len ();
  87:/usr/include/x86_64-linux-gnu/bits/string3.h ****       return __dest;
  88:/usr/include/x86_64-linux-gnu/bits/string3.h ****     }
  89:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  90:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 842              		.loc 2 90 0
 843 008c 488D7A08 		leaq	8(%rdx), %rdi
 844 0090 4889D1   		movq	%rdx, %rcx
 845              	.LBE30:
 846              	.LBE29:
 242:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* First segment of "simple" table: limit[x] = 0 for x < 0 */
 847              		.loc 1 242 0
 848 0093 488985B8 		movq	%rax, 440(%rbp)
 848      010000
 849              	.LVL70:
 850              	.LBB32:
 851              	.LBB31:
 852              		.loc 2 90 0
 853 009a 31C0     		xorl	%eax, %eax
 854              	.LVL71:
 855 009c 48C70200 		movq	$0, (%rdx)
 855      000000
 856              	.LVL72:
 857 00a3 4883E7F8 		andq	$-8, %rdi
 858 00a7 48C782F8 		movq	$0, 248(%rdx)
 858      00000000 
 858      000000
 859 00b2 4829F9   		subq	%rdi, %rcx
 860 00b5 81C10001 		addl	$256, %ecx
 860      0000
 861 00bb C1E903   		shrl	$3, %ecx
 862 00be F348AB   		rep stosq
 863              	.LVL73:
 864              		.p2align 4,,10
 865 00c1 0F1F8000 		.p2align 3
 865      000000
 866              	.L74:
 867              	.LBE31:
 868              	.LBE32:
 247:fltk-1.3.4-1/jpeg/jdmaster.c ****   table += CENTERJSAMPLE;	/* Point to where post-IDCT table starts */
 869              		.loc 1 247 0
 870 00c8 88840200 		movb	%al, 256(%rdx,%rax)
 870      010000
 871              	.LVL74:
 872 00cf 4883C001 		addq	$1, %rax
 873              	.LVL75:
 246:fltk-1.3.4-1/jpeg/jdmaster.c ****     table[i] = (JSAMPLE) i;
 874              		.loc 1 246 0
 875 00d3 483D0001 		cmpq	$256, %rax
 875      0000
 876 00d9 75ED     		jne	.L74
 877              	.LVL76:
 878 00db 488D8200 		leaq	512(%rdx), %rax
 878      020000
 879 00e2 488D8A80 		leaq	896(%rdx), %rcx
 879      030000
 880              	.LVL77:
 881 00e9 0F1F8000 		.p2align 4,,10
 881      000000
 882              		.p2align 3
 883              	.L75:
 251:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* Second half of post-IDCT table */
 884              		.loc 1 251 0
 885 00f0 C600FF   		movb	$-1, (%rax)
 886              	.LVL78:
 887 00f3 4883C001 		addq	$1, %rax
 888              	.LVL79:
 250:fltk-1.3.4-1/jpeg/jdmaster.c ****     table[i] = MAXJSAMPLE;
 889              		.loc 1 250 0
 890 00f7 4839C1   		cmpq	%rax, %rcx
 891 00fa 75F4     		jne	.L75
 892              	.LVL80:
 893              	.LBB33:
 894              	.LBB34:
 895              		.loc 2 90 0
 896 00fc 488DBA88 		leaq	904(%rdx), %rdi
 896      030000
 897 0103 31C0     		xorl	%eax, %eax
 898 0105 48C78280 		movq	$0, 896(%rdx)
 898      03000000 
 898      000000
 899 0110 48C782F8 		movq	$0, 1272(%rdx)
 899      04000000 
 899      000000
 900 011b 488DB200 		leaq	1280(%rdx), %rsi
 900      050000
 901 0122 4883E7F8 		andq	$-8, %rdi
 902 0126 4829F9   		subq	%rdi, %rcx
 903 0129 81C18001 		addl	$384, %ecx
 903      0000
 904 012f C1E903   		shrl	$3, %ecx
 905 0132 F348AB   		rep stosq
 906              	.LVL81:
 907              	.LBE34:
 908              	.LBE33:
 909              	.LBB35:
 910              	.LBB36:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 911              		.loc 2 53 0
 912 0135 488B85B8 		movq	440(%rbp), %rax
 912      010000
 913 013c 488B08   		movq	(%rax), %rcx
 914 013f 48898A00 		movq	%rcx, 1280(%rdx)
 914      050000
 915              	.LVL82:
 916 0146 488B5008 		movq	8(%rax), %rdx
 917              	.LVL83:
 918 014a 48895608 		movq	%rdx, 8(%rsi)
 919 014e 488B5010 		movq	16(%rax), %rdx
 920 0152 48895610 		movq	%rdx, 16(%rsi)
 921 0156 488B5018 		movq	24(%rax), %rdx
 922 015a 48895618 		movq	%rdx, 24(%rsi)
 923 015e 488B5020 		movq	32(%rax), %rdx
 924 0162 48895620 		movq	%rdx, 32(%rsi)
 925 0166 488B5028 		movq	40(%rax), %rdx
 926 016a 48895628 		movq	%rdx, 40(%rsi)
 927 016e 488B5030 		movq	48(%rax), %rdx
 928 0172 48895630 		movq	%rdx, 48(%rsi)
 929 0176 488B5038 		movq	56(%rax), %rdx
 930 017a 48895638 		movq	%rdx, 56(%rsi)
 931 017e 488B5040 		movq	64(%rax), %rdx
 932 0182 48895640 		movq	%rdx, 64(%rsi)
 933 0186 488B5048 		movq	72(%rax), %rdx
 934 018a 48895648 		movq	%rdx, 72(%rsi)
 935 018e 488B5050 		movq	80(%rax), %rdx
 936 0192 48895650 		movq	%rdx, 80(%rsi)
 937 0196 488B5058 		movq	88(%rax), %rdx
 938 019a 48895658 		movq	%rdx, 88(%rsi)
 939 019e 488B5060 		movq	96(%rax), %rdx
 940 01a2 48895660 		movq	%rdx, 96(%rsi)
 941 01a6 488B5068 		movq	104(%rax), %rdx
 942 01aa 48895668 		movq	%rdx, 104(%rsi)
 943 01ae 488B5070 		movq	112(%rax), %rdx
 944 01b2 48895670 		movq	%rdx, 112(%rsi)
 945 01b6 488B4078 		movq	120(%rax), %rax
 946              	.LVL84:
 947 01ba 48894678 		movq	%rax, 120(%rsi)
 948              	.LVL85:
 949              	.LBE36:
 950              	.LBE35:
 951              	.LBE28:
 952              	.LBE27:
 288:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->out_color_components <= 0)
 953              		.loc 1 288 0
 954 01be 8B958C00 		movl	140(%rbp), %edx
 954      0000
 955 01c4 85D2     		testl	%edx, %edx
 956 01c6 740E     		je	.L76
 957 01c8 8B858800 		movl	136(%rbp), %eax
 957      0000
 958 01ce 85C0     		testl	%eax, %eax
 959 01d0 0F854F02 		jne	.L112
 959      0000
 960              	.L76:
 290:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 961              		.loc 1 290 0
 962 01d6 488B4500 		movq	0(%rbp), %rax
 963 01da 4889EF   		movq	%rbp, %rdi
 964 01dd C7402821 		movl	$33, 40(%rax)
 964      000000
 965 01e4 488B4500 		movq	0(%rbp), %rax
 966 01e8 FF10     		call	*(%rax)
 967              	.LVL86:
 968 01ea 8B858800 		movl	136(%rbp), %eax
 968      0000
 969 01f0 48639590 		movslq	144(%rbp), %rdx
 969      000000
 970              	.L77:
 293:fltk-1.3.4-1/jpeg/jdmaster.c ****   jd_samplesperrow = (JDIMENSION) samplesperrow;
 971              		.loc 1 293 0
 972 01f7 480FAFC2 		imulq	%rdx, %rax
 973              	.LVL87:
 295:fltk-1.3.4-1/jpeg/jdmaster.c ****     ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 974              		.loc 1 295 0
 975 01fb 89C2     		movl	%eax, %edx
 976 01fd 4839D0   		cmpq	%rdx, %rax
 977 0200 7414     		je	.L78
 296:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 978              		.loc 1 296 0
 979 0202 488B4500 		movq	0(%rbp), %rax
 980              	.LVL88:
 981 0206 4889EF   		movq	%rbp, %rdi
 982 0209 C7402848 		movl	$72, 40(%rax)
 982      000000
 983 0210 488B4500 		movq	0(%rbp), %rax
 984 0214 FF10     		call	*(%rax)
 985              	.LVL89:
 986              	.L78:
 299:fltk-1.3.4-1/jpeg/jdmaster.c ****   master->using_merged_upsample = use_merged_upsample(cinfo);
 987              		.loc 1 299 0
 988 0216 C7431800 		movl	$0, 24(%rbx)
 988      000000
 300:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 989              		.loc 1 300 0
 990 021d 4889EF   		movq	%rbp, %rdi
 991 0220 E8000000 		call	use_merged_upsample
 991      00
 992              	.LVL90:
 303:fltk-1.3.4-1/jpeg/jdmaster.c ****   master->quantizer_2pass = NULL;
 993              		.loc 1 303 0
 994 0225 48C74320 		movq	$0, 32(%rbx)
 994      00000000 
 300:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 995              		.loc 1 300 0
 996 022d 89431C   		movl	%eax, 28(%rbx)
 304:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* No mode changes if not using buffered-image mode. */
 997              		.loc 1 304 0
 998 0230 48C74328 		movq	$0, 40(%rbx)
 998      00000000 
 306:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->enable_1pass_quant = FALSE;
 999              		.loc 1 306 0
 1000 0238 8B456C   		movl	108(%rbp), %eax
 1001 023b 85C0     		testl	%eax, %eax
 1002 023d 0F848601 		je	.L79
 1002      0000
 1003 0243 8B4558   		movl	88(%rbp), %eax
 1004 0246 85C0     		testl	%eax, %eax
 1005 0248 751B     		jne	.L99
 307:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->enable_external_quant = FALSE;
 1006              		.loc 1 307 0
 1007 024a C7457C00 		movl	$0, 124(%rbp)
 1007      000000
 308:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->enable_2pass_quant = FALSE;
 1008              		.loc 1 308 0
 1009 0251 C7858000 		movl	$0, 128(%rbp)
 1009      00000000 
 1009      0000
 309:fltk-1.3.4-1/jpeg/jdmaster.c ****   }
 1010              		.loc 1 309 0
 1011 025b C7858400 		movl	$0, 132(%rbp)
 1011      00000000 
 1011      0000
 1012              	.L99:
 312:fltk-1.3.4-1/jpeg/jdmaster.c ****       ERREXIT(cinfo, JERR_NOTIMPL);
 1013              		.loc 1 312 0
 1014 0265 8B455C   		movl	92(%rbp), %eax
 1015 0268 85C0     		testl	%eax, %eax
 1016 026a 0F85DF01 		jne	.L113
 1016      0000
 315:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->enable_1pass_quant = TRUE;
 1017              		.loc 1 315 0
 1018 0270 83BD9000 		cmpl	$3, 144(%rbp)
 1018      000003
 1019 0277 0F84F301 		je	.L82
 1019      0000
 1020              	.L117:
 316:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->enable_external_quant = FALSE;
 1021              		.loc 1 316 0
 1022 027d C7457C01 		movl	$1, 124(%rbp)
 1022      000000
 317:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->enable_2pass_quant = FALSE;
 1023              		.loc 1 317 0
 1024 0284 C7858000 		movl	$0, 128(%rbp)
 1024      00000000 
 1024      0000
 318:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->colormap = NULL;
 1025              		.loc 1 318 0
 1026 028e C7858400 		movl	$0, 132(%rbp)
 1026      00000000 
 1026      0000
 319:fltk-1.3.4-1/jpeg/jdmaster.c ****     } else if (cinfo->colormap != NULL) {
 1027              		.loc 1 319 0
 1028 0298 48C785A0 		movq	$0, 160(%rbp)
 1028      00000000 
 1028      000000
 1029              	.L83:
 330:fltk-1.3.4-1/jpeg/jdmaster.c ****       master->quantizer_1pass = cinfo->cquantize;
 1030              		.loc 1 330 0
 1031 02a3 4889EF   		movq	%rbp, %rdi
 1032 02a6 E8000000 		call	jinit_1pass_quantizer
 1032      00
 1033              	.LVL91:
 331:fltk-1.3.4-1/jpeg/jdmaster.c **** #else
 1034              		.loc 1 331 0
 1035 02ab 488B8590 		movq	656(%rbp), %rax
 1035      020000
 1036 02b2 48894320 		movq	%rax, 32(%rbx)
 1037              	.L100:
 338:fltk-1.3.4-1/jpeg/jdmaster.c **** #ifdef QUANT_2PASS_SUPPORTED
 1038              		.loc 1 338 0
 1039 02b6 4883BD80 		cmpq	$0, 128(%rbp)
 1039      00000000 
 1040 02be 0F842001 		je	.L87
 1040      0000
 340:fltk-1.3.4-1/jpeg/jdmaster.c ****       master->quantizer_2pass = cinfo->cquantize;
 1041              		.loc 1 340 0
 1042 02c4 4889EF   		movq	%rbp, %rdi
 1043 02c7 E8000000 		call	jinit_2pass_quantizer
 1043      00
 1044              	.LVL92:
 341:fltk-1.3.4-1/jpeg/jdmaster.c **** #else
 1045              		.loc 1 341 0
 1046 02cc 488B8590 		movq	656(%rbp), %rax
 1046      020000
 1047 02d3 48894328 		movq	%rax, 40(%rbx)
 352:fltk-1.3.4-1/jpeg/jdmaster.c ****     if (master->using_merged_upsample) {
 1048              		.loc 1 352 0
 1049 02d7 8B455C   		movl	92(%rbp), %eax
 1050 02da 85C0     		testl	%eax, %eax
 1051 02dc 0F840D01 		je	.L114
 1051      0000
 1052              		.p2align 4,,10
 1053 02e2 660F1F44 		.p2align 3
 1053      0000
 1054              	.L88:
 366:fltk-1.3.4-1/jpeg/jdmaster.c ****   /* Entropy decoding: either Huffman or arithmetic coding. */
 1055              		.loc 1 366 0
 1056 02e8 4889EF   		movq	%rbp, %rdi
 1057 02eb E8000000 		call	jinit_inverse_dct
 1057      00
 1058              	.LVL93:
 368:fltk-1.3.4-1/jpeg/jdmaster.c ****     jinit_arith_decoder(cinfo);
 1059              		.loc 1 368 0
 1060 02f0 448B9540 		movl	320(%rbp), %r10d
 1060      010000
 369:fltk-1.3.4-1/jpeg/jdmaster.c ****   else {
 1061              		.loc 1 369 0
 1062 02f7 4889EF   		movq	%rbp, %rdi
 368:fltk-1.3.4-1/jpeg/jdmaster.c ****     jinit_arith_decoder(cinfo);
 1063              		.loc 1 368 0
 1064 02fa 4585D2   		testl	%r10d, %r10d
 1065 02fd 0F841801 		je	.L91
 1065      0000
 1066              	.LVL94:
 369:fltk-1.3.4-1/jpeg/jdmaster.c ****   else {
 1067              		.loc 1 369 0
 1068 0303 E8000000 		call	jinit_arith_decoder
 1068      00
 1069              	.LVL95:
 1070              	.L92:
 375:fltk-1.3.4-1/jpeg/jdmaster.c ****   jinit_d_coef_controller(cinfo, use_c_buffer);
 1071              		.loc 1 375 0
 1072 0308 488B8560 		movq	608(%rbp), %rax
 1072      020000
 1073 030f BE010000 		movl	$1, %esi
 1073      00
 1074 0314 448B4820 		movl	32(%rax), %r9d
 1075 0318 4585C9   		testl	%r9d, %r9d
 1076 031b 750D     		jne	.L93
 1077 031d 448B4558 		movl	88(%rbp), %r8d
 1078 0321 31F6     		xorl	%esi, %esi
 1079 0323 4585C0   		testl	%r8d, %r8d
 1080 0326 400F95C6 		setne	%sil
 1081              	.L93:
 376:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 1082              		.loc 1 376 0
 1083 032a 4889EF   		movq	%rbp, %rdi
 1084 032d E8000000 		call	jinit_d_coef_controller
 1084      00
 1085              	.LVL96:
 378:fltk-1.3.4-1/jpeg/jdmaster.c ****     jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
 1086              		.loc 1 378 0
 1087 0332 8B7D5C   		movl	92(%rbp), %edi
 1088 0335 85FF     		testl	%edi, %edi
 1089 0337 0F840301 		je	.L115
 1089      0000
 1090              	.L94:
 382:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 1091              		.loc 1 382 0
 1092 033d 488B4508 		movq	8(%rbp), %rax
 1093 0341 4889EF   		movq	%rbp, %rdi
 1094 0344 FF5030   		call	*48(%rax)
 1095              	.LVL97:
 385:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 1096              		.loc 1 385 0
 1097 0347 488B8560 		movq	608(%rbp), %rax
 1097      020000
 1098 034e 4889EF   		movq	%rbp, %rdi
 1099 0351 FF5010   		call	*16(%rax)
 1100              	.LVL98:
 392:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->inputctl->has_multiple_scans) {
 1101              		.loc 1 392 0
 1102 0354 488B4510 		movq	16(%rbp), %rax
 1103 0358 4885C0   		testq	%rax, %rax
 1104 035b 7465     		je	.L72
 1105 035d 8B7558   		movl	88(%rbp), %esi
 1106 0360 85F6     		testl	%esi, %esi
 1107 0362 755E     		jne	.L72
 393:fltk-1.3.4-1/jpeg/jdmaster.c ****     int nscans;
 1108              		.loc 1 393 0
 1109 0364 488B9560 		movq	608(%rbp), %rdx
 1109      020000
 392:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->inputctl->has_multiple_scans) {
 1110              		.loc 1 392 0
 1111 036b 8B4A20   		movl	32(%rdx), %ecx
 1112 036e 85C9     		testl	%ecx, %ecx
 1113 0370 7450     		je	.L72
 1114              	.LBB37:
 396:fltk-1.3.4-1/jpeg/jdmaster.c ****       /* Arbitrarily estimate 2 interleaved DC scans + 3 AC scans/component. */
 1115              		.loc 1 396 0
 1116 0372 8B953C01 		movl	316(%rbp), %edx
 1116      0000
 1117 0378 85D2     		testl	%edx, %edx
 398:fltk-1.3.4-1/jpeg/jdmaster.c ****     } else {
 1118              		.loc 1 398 0
 1119 037a 8B5538   		movl	56(%rbp), %edx
 396:fltk-1.3.4-1/jpeg/jdmaster.c ****       /* Arbitrarily estimate 2 interleaved DC scans + 3 AC scans/component. */
 1120              		.loc 1 396 0
 1121 037d 7404     		je	.L97
 398:fltk-1.3.4-1/jpeg/jdmaster.c ****     } else {
 1122              		.loc 1 398 0
 1123 037f 8D545202 		leal	2(%rdx,%rdx,2), %edx
 1124              	.LVL99:
 1125              	.L97:
 403:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 1126              		.loc 1 403 0
 1127 0383 48C74008 		movq	$0, 8(%rax)
 1127      00000000 
 404:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->progress->completed_passes = 0;
 1128              		.loc 1 404 0
 1129 038b 8BB5B001 		movl	432(%rbp), %esi
 1129      0000
 1130 0391 4863C2   		movslq	%edx, %rax
 1131 0394 488B4D10 		movq	16(%rbp), %rcx
 1132 0398 480FAFC6 		imulq	%rsi, %rax
 1133 039c 48894110 		movq	%rax, 16(%rcx)
 405:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 1134              		.loc 1 405 0
 1135 03a0 488B4510 		movq	16(%rbp), %rax
 1136 03a4 C7401800 		movl	$0, 24(%rax)
 1136      000000
 406:fltk-1.3.4-1/jpeg/jdmaster.c ****     /* Count the input pass as done */
 1137              		.loc 1 406 0
 1138 03ab 83BD8400 		cmpl	$1, 132(%rbp)
 1138      000001
 1139 03b2 488B5510 		movq	16(%rbp), %rdx
 1140              	.LVL100:
 1141 03b6 19C0     		sbbl	%eax, %eax
 1142 03b8 83C003   		addl	$3, %eax
 1143 03bb 89421C   		movl	%eax, 28(%rdx)
 408:fltk-1.3.4-1/jpeg/jdmaster.c ****   }
 1144              		.loc 1 408 0
 1145 03be 83431801 		addl	$1, 24(%rbx)
 1146              	.LVL101:
 1147              	.L72:
 1148              	.LBE37:
 1149              	.LBE26:
 1150              	.LBE25:
 541:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 542:fltk-1.3.4-1/jpeg/jdmaster.c ****   master_selection(cinfo);
 543:fltk-1.3.4-1/jpeg/jdmaster.c **** }
 1151              		.loc 1 543 0
 1152 03c2 4883C408 		addq	$8, %rsp
 1153              		.cfi_remember_state
 1154              		.cfi_def_cfa_offset 24
 1155 03c6 5B       		popq	%rbx
 1156              		.cfi_def_cfa_offset 16
 1157 03c7 5D       		popq	%rbp
 1158              		.cfi_def_cfa_offset 8
 1159              	.LVL102:
 1160 03c8 C3       		ret
 1161              	.LVL103:
 1162              	.L79:
 1163              		.cfi_restore_state
 1164              	.LBB39:
 1165              	.LBB38:
 307:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->enable_external_quant = FALSE;
 1166              		.loc 1 307 0
 1167 03c9 C7457C00 		movl	$0, 124(%rbp)
 1167      000000
 308:fltk-1.3.4-1/jpeg/jdmaster.c ****     cinfo->enable_2pass_quant = FALSE;
 1168              		.loc 1 308 0
 1169 03d0 C7858000 		movl	$0, 128(%rbp)
 1169      00000000 
 1169      0000
 309:fltk-1.3.4-1/jpeg/jdmaster.c ****   }
 1170              		.loc 1 309 0
 1171 03da C7858400 		movl	$0, 132(%rbp)
 1171      00000000 
 1171      0000
 1172              	.L87:
 352:fltk-1.3.4-1/jpeg/jdmaster.c ****     if (master->using_merged_upsample) {
 1173              		.loc 1 352 0
 1174 03e4 8B455C   		movl	92(%rbp), %eax
 1175 03e7 85C0     		testl	%eax, %eax
 1176 03e9 0F85F9FE 		jne	.L88
 1176      FFFF
 1177              	.L114:
 353:fltk-1.3.4-1/jpeg/jdmaster.c **** #ifdef UPSAMPLE_MERGING_SUPPORTED
 1178              		.loc 1 353 0
 1179 03ef 448B5B1C 		movl	28(%rbx), %r11d
 355:fltk-1.3.4-1/jpeg/jdmaster.c **** #else
 1180              		.loc 1 355 0
 1181 03f3 4889EF   		movq	%rbp, %rdi
 353:fltk-1.3.4-1/jpeg/jdmaster.c **** #ifdef UPSAMPLE_MERGING_SUPPORTED
 1182              		.loc 1 353 0
 1183 03f6 4585DB   		testl	%r11d, %r11d
 1184 03f9 753E     		jne	.L116
 1185              	.LVL104:
 360:fltk-1.3.4-1/jpeg/jdmaster.c ****       jinit_upsampler(cinfo);
 1186              		.loc 1 360 0
 1187 03fb E8000000 		call	jinit_color_deconverter
 1187      00
 1188              	.LVL105:
 361:fltk-1.3.4-1/jpeg/jdmaster.c ****     }
 1189              		.loc 1 361 0
 1190 0400 4889EF   		movq	%rbp, %rdi
 1191 0403 E8000000 		call	jinit_upsampler
 1191      00
 1192              	.LVL106:
 1193              	.L90:
 363:fltk-1.3.4-1/jpeg/jdmaster.c ****   }
 1194              		.loc 1 363 0
 1195 0408 8BB58400 		movl	132(%rbp), %esi
 1195      0000
 1196 040e 4889EF   		movq	%rbp, %rdi
 1197 0411 E8000000 		call	jinit_d_post_controller
 1197      00
 1198              	.LVL107:
 1199 0416 E9CDFEFF 		jmp	.L88
 1199      FF
 1200              	.LVL108:
 1201              	.L91:
 371:fltk-1.3.4-1/jpeg/jdmaster.c ****   }
 1202              		.loc 1 371 0
 1203 041b E8000000 		call	jinit_huff_decoder
 1203      00
 1204              	.LVL109:
 1205 0420 E9E3FEFF 		jmp	.L92
 1205      FF
 1206              	.L112:
 289:fltk-1.3.4-1/jpeg/jdmaster.c ****     ERREXIT(cinfo, JERR_EMPTY_IMAGE);
 1207              		.loc 1 289 0
 1208 0425 48639590 		movslq	144(%rbp), %rdx
 1208      000000
 288:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->out_color_components <= 0)
 1209              		.loc 1 288 0
 1210 042c 85D2     		testl	%edx, %edx
 1211 042e 0F8FC3FD 		jg	.L77
 1211      FFFF
 1212 0434 E99DFDFF 		jmp	.L76
 1212      FF
 1213              	.LVL110:
 1214              	.L116:
 355:fltk-1.3.4-1/jpeg/jdmaster.c **** #else
 1215              		.loc 1 355 0
 1216 0439 E8000000 		call	jinit_merged_upsampler
 1216      00
 1217              	.LVL111:
 1218 043e EBC8     		jmp	.L90
 1219              	.L115:
 379:fltk-1.3.4-1/jpeg/jdmaster.c **** 
 1220              		.loc 1 379 0
 1221 0440 31F6     		xorl	%esi, %esi
 1222 0442 4889EF   		movq	%rbp, %rdi
 1223 0445 E8000000 		call	jinit_d_main_controller
 1223      00
 1224              	.LVL112:
 1225 044a E9EEFEFF 		jmp	.L94
 1225      FF
 1226              	.L113:
 313:fltk-1.3.4-1/jpeg/jdmaster.c ****     /* 2-pass quantizer only works in 3-component color space. */
 1227              		.loc 1 313 0
 1228 044f 488B4500 		movq	0(%rbp), %rax
 1229 0453 4889EF   		movq	%rbp, %rdi
 1230 0456 C7402830 		movl	$48, 40(%rax)
 1230      000000
 1231 045d 488B4500 		movq	0(%rbp), %rax
 1232 0461 FF10     		call	*(%rax)
 1233              	.LVL113:
 315:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->enable_1pass_quant = TRUE;
 1234              		.loc 1 315 0
 1235 0463 83BD9000 		cmpl	$3, 144(%rbp)
 1235      000003
 1236 046a 0F850DFE 		jne	.L117
 1236      FFFF
 1237              	.L82:
 320:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->enable_external_quant = TRUE;
 1238              		.loc 1 320 0
 1239 0470 4883BDA0 		cmpq	$0, 160(%rbp)
 1239      00000000 
 1240 0478 741E     		je	.L84
 321:fltk-1.3.4-1/jpeg/jdmaster.c ****     } else if (cinfo->two_pass_quantize) {
 1241              		.loc 1 321 0
 1242 047a C7858000 		movl	$1, 128(%rbp)
 1242      00000100 
 1242      0000
 1243              	.L85:
 328:fltk-1.3.4-1/jpeg/jdmaster.c **** #ifdef QUANT_1PASS_SUPPORTED
 1244              		.loc 1 328 0
 1245 0484 8B457C   		movl	124(%rbp), %eax
 1246 0487 85C0     		testl	%eax, %eax
 1247 0489 0F8427FE 		je	.L100
 1247      FFFF
 1248 048f E90FFEFF 		jmp	.L83
 1248      FF
 1249              		.p2align 4,,10
 1250 0494 0F1F4000 		.p2align 3
 1251              	.L84:
 322:fltk-1.3.4-1/jpeg/jdmaster.c ****       cinfo->enable_2pass_quant = TRUE;
 1252              		.loc 1 322 0
 1253 0498 8B4574   		movl	116(%rbp), %eax
 1254 049b 85C0     		testl	%eax, %eax
 1255 049d 740C     		je	.L86
 323:fltk-1.3.4-1/jpeg/jdmaster.c ****     } else {
 1256              		.loc 1 323 0
 1257 049f C7858400 		movl	$1, 132(%rbp)
 1257      00000100 
 1257      0000
 1258 04a9 EBD9     		jmp	.L85
 1259              	.L86:
 325:fltk-1.3.4-1/jpeg/jdmaster.c ****     }
 1260              		.loc 1 325 0
 1261 04ab C7457C01 		movl	$1, 124(%rbp)
 1261      000000
 1262 04b2 E9ECFDFF 		jmp	.L83
 1262      FF
 1263              	.LBE38:
 1264              	.LBE39:
 1265              		.cfi_endproc
 1266              	.LFE68:
 1268              		.section	.text.unlikely.jinit_master_decompress
 1269              	.LCOLDE5:
 1270              		.section	.text.jinit_master_decompress
 1271              	.LHOTE5:
 1272              		.text
 1273              	.Letext0:
 1274              		.section	.text.unlikely.prepare_for_output_pass
 1275              	.Letext_cold0:
 1276              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 1277              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 1278              		.file 5 "/usr/include/libio.h"
 1279              		.file 6 "fltk-1.3.4-1/jpeg/jmorecfg.h"
 1280              		.file 7 "fltk-1.3.4-1/jpeg/jpeglib.h"
 1281              		.file 8 "fltk-1.3.4-1/jpeg/jpegint.h"
 1282              		.file 9 "fltk-1.3.4-1/jpeg/jerror.h"
 1283              		.file 10 "/usr/include/stdio.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 jdmaster.c
     /tmp/cchWq6sP.s:13     .text.prepare_for_output_pass:0000000000000000 prepare_for_output_pass
     /tmp/cchWq6sP.s:229    .text.finish_output_pass:0000000000000000 finish_output_pass
     /tmp/cchWq6sP.s:271    .text.use_merged_upsample:0000000000000000 use_merged_upsample
     /tmp/cchWq6sP.s:373    .text.jpeg_calc_output_dimensions:0000000000000000 jpeg_calc_output_dimensions
     /tmp/cchWq6sP.s:666    .text.jpeg_new_colormap:0000000000000000 jpeg_new_colormap
     /tmp/cchWq6sP.s:767    .text.jinit_master_decompress:0000000000000000 jinit_master_decompress
                           .group:0000000000000000 wm4.0.cf9695abff4f49bdfe00dc4091904acd
                           .group:0000000000000000 wm4.stdcpredef.h.19.bf2bf6c5fb087dfb5ef2d2297c2795de
                           .group:0000000000000000 wm4.jconfig.h.10.247fc3ff67998f3074970b1373c70333
                           .group:0000000000000000 wm4.features.h.19.24da27e0a4d0d521fd057013d982b8b5
                           .group:0000000000000000 wm4.cdefs.h.19.56613e71f285ebad825b69b151170a81
                           .group:0000000000000000 wm4.wordsize.h.4.256e8fdbd37801980286acdbc40d0280
                           .group:0000000000000000 wm4.cdefs.h.432.619afd0aac7c4b439843706c1b28ddea
                           .group:0000000000000000 wm4.stubs64.h.10.918ceb5fa58268542bf143e4c1efbcf3
                           .group:0000000000000000 wm4.stdlib.h.27.59e2586c75bdbcb991b248ad7257b993
                           .group:0000000000000000 wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1
                           .group:0000000000000000 wm4.waitflags.h.25.e401b8bcfee800b540b27abd7cc78de9
                           .group:0000000000000000 wm4.waitstatus.h.28.93f167f49d64e2b9b99f98d1162a93bf
                           .group:0000000000000000 wm4.endian.h.19.ff00c9c0f5e9f9a9719c5de76ace57b4
                           .group:0000000000000000 wm4.endian.h.41.24cced64aef71195a51d4daa8e4f4a95
                           .group:0000000000000000 wm4.types.h.89.468e2451361e3b92f048f6cad51690ff
                           .group:0000000000000000 wm4.typesizes.h.24.40eb69a6270178f15d1bf3d7b6635a8b
                           .group:0000000000000000 wm4.byteswap.h.38.11ee5fdc0f6cc53a16c505b9233cecef
                           .group:0000000000000000 wm4.endian.h.63.97272d7c64d5db8020003b32e9289502
                           .group:0000000000000000 wm4.waitstatus.h.99.408b6270fa6eb71377201a241ef15f79
                           .group:0000000000000000 wm4.stdlib.h.50.84aeca2ac6f37d40e1e9b3cef757ba2d
                           .group:0000000000000000 wm4.types.h.23.f6dcbaa72f8f71361acef09804d45a5e
                           .group:0000000000000000 wm4.time.h.53.beb46e650cd406cb917b6b96b45e640a
                           .group:0000000000000000 wm4.stddef.h.238.847b6907dabda77be90a9ab7ad789e2e
                           .group:0000000000000000 wm4.types.h.187.bd5a05039b505b3620e6973f1b2ffeb1
                           .group:0000000000000000 wm4.select.h.28.eb2f3debdbcffd1442ebddaebc4fb6ff
                           .group:0000000000000000 wm4.sigset.h.20.f36413b6d2364ad847d3db53fb03e683
                           .group:0000000000000000 wm4.select.h.36.f76c3b9e55c871743863013cc4cc14c9
                           .group:0000000000000000 wm4.time.h.66.e70ce69790c975f0efb369340c432e0b
                           .group:0000000000000000 wm4.time.h.25.ae5284cdff565e87a9198d819340325d
                           .group:0000000000000000 wm4.select.h.49.e9d2041e5035cc68ebd1a20f7dbc8514
                           .group:0000000000000000 wm4.select2.h.27.f95f2ab0ffee66dc1b6575014894b21a
                           .group:0000000000000000 wm4.sysmacros.h.20.8a0c33ff175cd9b434a86c0aaa36f0a2
                           .group:0000000000000000 wm4.types.h.229.67b3f66bd74b06b451caec392a72a945
                           .group:0000000000000000 wm4.pthreadtypes.h.25.6892b1493314fcf446bbc76e7362acba
                           .group:0000000000000000 wm4.alloca.h.19.edefa922a76c1cbaaf1e416903ba2d1c
                           .group:0000000000000000 wm4.alloca.h.29.156e12058824cc23d961c4d3b13031f6
                           .group:0000000000000000 wm4.stdio.h.26.4719156f1aea2bb9662fd6c582dc9a4c
                           .group:0000000000000000 wm4.stddef.h.238.04cc7214bceba497b20d15c10fd97511
                           .group:0000000000000000 wm4.stdio.h.36.2dd12c1fd035242ad5cfd0152a01be5a
                           .group:0000000000000000 wm4._G_config.h.5.b0f37d9e474454cf6e459063458db32f
                           .group:0000000000000000 wm4.wchar.h.80.eea3eba2d2a17aace9470a8e0d8218dc
                           .group:0000000000000000 wm4._G_config.h.46.5187c97b14fd664662cb32e6b94fc49e
                           .group:0000000000000000 wm4.libio.h.33.a775b9ecae273f33bc59931e9891e4ca
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.libio.h.51.dab170798ec1df48c625aea7c30e1b63
                           .group:0000000000000000 wm4.stdio.h.80.17b7dd1ca72d8a61987532cb1d80194a
                           .group:0000000000000000 wm4.stdio_lim.h.23.557290a6cddeba0587f574f29e3a5fb9
                           .group:0000000000000000 wm4.stdio.h.172.df21df34a7396d7da2e08f9b617d582f
                           .group:0000000000000000 wm4.stdio.h.26.cae64f7ada9bb8327a89dba6a5e93655
                           .group:0000000000000000 wm4.string.h.23.8394011d5995a16f15d67d04e84a1d69
                           .group:0000000000000000 wm4.string.h.24.1b0dc67418e7128d207285861439c2f8
                           .group:0000000000000000 wm4.string2.h.45.00535b99420fc3014c2da41d6645330d
                           .group:0000000000000000 wm4.string3.h.31.0c4b9301b754a2db05eaafef869657d2
                           .group:0000000000000000 wm4.jinclude.h.67.b19f941ec97c4845fa4609292c7e2db4
                           .group:0000000000000000 wm4.jmorecfg.h.33.3b4c5f9cc07b3737823b06caf24d5b05
                           .group:0000000000000000 wm4.jpeglib.h.40.4f111c27252a38df39328d65454e82f4
                           .group:0000000000000000 wm4.jpegint.h.26.5219ef5d4e4921371d38e77b6091fd20
                           .group:0000000000000000 wm4.jerror.h.25.1dbd8674e70ab5215bc0037320e5c2a2

UNDEFINED SYMBOLS
jpeg_core_output_dimensions
jdiv_round_up
jinit_1pass_quantizer
jinit_2pass_quantizer
jinit_inverse_dct
jinit_arith_decoder
jinit_d_coef_controller
jinit_color_deconverter
jinit_upsampler
jinit_d_post_controller
jinit_huff_decoder
jinit_merged_upsampler
jinit_d_main_controller
