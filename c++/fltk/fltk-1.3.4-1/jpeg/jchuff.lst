   1              		.file	"jchuff.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.dump_buffer_e,"ax",@progbits
   5              		.p2align 4
   7              	dump_buffer_e:
   8              	.LVL0:
   9              	.LFB53:
  10              		.file 1 "fltk-1.3.4-1/jpeg/jchuff.c"
   1:fltk-1.3.4-1/jpeg/jchuff.c **** /*
   2:fltk-1.3.4-1/jpeg/jchuff.c ****  * jchuff.c
   3:fltk-1.3.4-1/jpeg/jchuff.c ****  *
   4:fltk-1.3.4-1/jpeg/jchuff.c ****  * Copyright (C) 1991-1997, Thomas G. Lane.
   5:fltk-1.3.4-1/jpeg/jchuff.c ****  * Modified 2006-2013 by Guido Vollbeding.
   6:fltk-1.3.4-1/jpeg/jchuff.c ****  * This file is part of the Independent JPEG Group's software.
   7:fltk-1.3.4-1/jpeg/jchuff.c ****  * For conditions of distribution and use, see the accompanying README file.
   8:fltk-1.3.4-1/jpeg/jchuff.c ****  *
   9:fltk-1.3.4-1/jpeg/jchuff.c ****  * This file contains Huffman entropy encoding routines.
  10:fltk-1.3.4-1/jpeg/jchuff.c ****  * Both sequential and progressive modes are supported in this single module.
  11:fltk-1.3.4-1/jpeg/jchuff.c ****  *
  12:fltk-1.3.4-1/jpeg/jchuff.c ****  * Much of the complexity here has to do with supporting output suspension.
  13:fltk-1.3.4-1/jpeg/jchuff.c ****  * If the data destination module demands suspension, we want to be able to
  14:fltk-1.3.4-1/jpeg/jchuff.c ****  * back up to the start of the current MCU.  To do this, we copy state
  15:fltk-1.3.4-1/jpeg/jchuff.c ****  * variables into local working storage, and update them back to the
  16:fltk-1.3.4-1/jpeg/jchuff.c ****  * permanent JPEG objects only upon successful completion of an MCU.
  17:fltk-1.3.4-1/jpeg/jchuff.c ****  *
  18:fltk-1.3.4-1/jpeg/jchuff.c ****  * We do not support output suspension for the progressive JPEG mode, since
  19:fltk-1.3.4-1/jpeg/jchuff.c ****  * the library currently does not allow multiple-scan files to be written
  20:fltk-1.3.4-1/jpeg/jchuff.c ****  * with output suspension.
  21:fltk-1.3.4-1/jpeg/jchuff.c ****  */
  22:fltk-1.3.4-1/jpeg/jchuff.c **** 
  23:fltk-1.3.4-1/jpeg/jchuff.c **** #define JPEG_INTERNALS
  24:fltk-1.3.4-1/jpeg/jchuff.c **** #include "jinclude.h"
  25:fltk-1.3.4-1/jpeg/jchuff.c **** #include "jpeglib.h"
  26:fltk-1.3.4-1/jpeg/jchuff.c **** 
  27:fltk-1.3.4-1/jpeg/jchuff.c **** 
  28:fltk-1.3.4-1/jpeg/jchuff.c **** /* The legal range of a DCT coefficient is
  29:fltk-1.3.4-1/jpeg/jchuff.c ****  *  -1024 .. +1023  for 8-bit data;
  30:fltk-1.3.4-1/jpeg/jchuff.c ****  * -16384 .. +16383 for 12-bit data.
  31:fltk-1.3.4-1/jpeg/jchuff.c ****  * Hence the magnitude should always fit in 10 or 14 bits respectively.
  32:fltk-1.3.4-1/jpeg/jchuff.c ****  */
  33:fltk-1.3.4-1/jpeg/jchuff.c **** 
  34:fltk-1.3.4-1/jpeg/jchuff.c **** #if BITS_IN_JSAMPLE == 8
  35:fltk-1.3.4-1/jpeg/jchuff.c **** #define MAX_COEF_BITS 10
  36:fltk-1.3.4-1/jpeg/jchuff.c **** #else
  37:fltk-1.3.4-1/jpeg/jchuff.c **** #define MAX_COEF_BITS 14
  38:fltk-1.3.4-1/jpeg/jchuff.c **** #endif
  39:fltk-1.3.4-1/jpeg/jchuff.c **** 
  40:fltk-1.3.4-1/jpeg/jchuff.c **** /* Derived data constructed for each Huffman table */
  41:fltk-1.3.4-1/jpeg/jchuff.c **** 
  42:fltk-1.3.4-1/jpeg/jchuff.c **** typedef struct {
  43:fltk-1.3.4-1/jpeg/jchuff.c ****   unsigned int ehufco[256];	/* code for each symbol */
  44:fltk-1.3.4-1/jpeg/jchuff.c ****   char ehufsi[256];		/* length of code for each symbol */
  45:fltk-1.3.4-1/jpeg/jchuff.c ****   /* If no code has been allocated for a symbol S, ehufsi[S] contains 0 */
  46:fltk-1.3.4-1/jpeg/jchuff.c **** } c_derived_tbl;
  47:fltk-1.3.4-1/jpeg/jchuff.c **** 
  48:fltk-1.3.4-1/jpeg/jchuff.c **** 
  49:fltk-1.3.4-1/jpeg/jchuff.c **** /* Expanded entropy encoder object for Huffman encoding.
  50:fltk-1.3.4-1/jpeg/jchuff.c ****  *
  51:fltk-1.3.4-1/jpeg/jchuff.c ****  * The savable_state subrecord contains fields that change within an MCU,
  52:fltk-1.3.4-1/jpeg/jchuff.c ****  * but must not be updated permanently until we complete the MCU.
  53:fltk-1.3.4-1/jpeg/jchuff.c ****  */
  54:fltk-1.3.4-1/jpeg/jchuff.c **** 
  55:fltk-1.3.4-1/jpeg/jchuff.c **** typedef struct {
  56:fltk-1.3.4-1/jpeg/jchuff.c ****   INT32 put_buffer;		/* current bit-accumulation buffer */
  57:fltk-1.3.4-1/jpeg/jchuff.c ****   int put_bits;			/* # of bits now in it */
  58:fltk-1.3.4-1/jpeg/jchuff.c ****   int last_dc_val[MAX_COMPS_IN_SCAN]; /* last DC coef for each component */
  59:fltk-1.3.4-1/jpeg/jchuff.c **** } savable_state;
  60:fltk-1.3.4-1/jpeg/jchuff.c **** 
  61:fltk-1.3.4-1/jpeg/jchuff.c **** /* This macro is to work around compilers with missing or broken
  62:fltk-1.3.4-1/jpeg/jchuff.c ****  * structure assignment.  You'll need to fix this code if you have
  63:fltk-1.3.4-1/jpeg/jchuff.c ****  * such a compiler and you change MAX_COMPS_IN_SCAN.
  64:fltk-1.3.4-1/jpeg/jchuff.c ****  */
  65:fltk-1.3.4-1/jpeg/jchuff.c **** 
  66:fltk-1.3.4-1/jpeg/jchuff.c **** #ifndef NO_STRUCT_ASSIGN
  67:fltk-1.3.4-1/jpeg/jchuff.c **** #define ASSIGN_STATE(dest,src)  ((dest) = (src))
  68:fltk-1.3.4-1/jpeg/jchuff.c **** #else
  69:fltk-1.3.4-1/jpeg/jchuff.c **** #if MAX_COMPS_IN_SCAN == 4
  70:fltk-1.3.4-1/jpeg/jchuff.c **** #define ASSIGN_STATE(dest,src)  \
  71:fltk-1.3.4-1/jpeg/jchuff.c **** 	((dest).put_buffer = (src).put_buffer, \
  72:fltk-1.3.4-1/jpeg/jchuff.c **** 	 (dest).put_bits = (src).put_bits, \
  73:fltk-1.3.4-1/jpeg/jchuff.c **** 	 (dest).last_dc_val[0] = (src).last_dc_val[0], \
  74:fltk-1.3.4-1/jpeg/jchuff.c **** 	 (dest).last_dc_val[1] = (src).last_dc_val[1], \
  75:fltk-1.3.4-1/jpeg/jchuff.c **** 	 (dest).last_dc_val[2] = (src).last_dc_val[2], \
  76:fltk-1.3.4-1/jpeg/jchuff.c **** 	 (dest).last_dc_val[3] = (src).last_dc_val[3])
  77:fltk-1.3.4-1/jpeg/jchuff.c **** #endif
  78:fltk-1.3.4-1/jpeg/jchuff.c **** #endif
  79:fltk-1.3.4-1/jpeg/jchuff.c **** 
  80:fltk-1.3.4-1/jpeg/jchuff.c **** 
  81:fltk-1.3.4-1/jpeg/jchuff.c **** typedef struct {
  82:fltk-1.3.4-1/jpeg/jchuff.c ****   struct jpeg_entropy_encoder pub; /* public fields */
  83:fltk-1.3.4-1/jpeg/jchuff.c **** 
  84:fltk-1.3.4-1/jpeg/jchuff.c ****   savable_state saved;		/* Bit buffer & DC state at start of MCU */
  85:fltk-1.3.4-1/jpeg/jchuff.c **** 
  86:fltk-1.3.4-1/jpeg/jchuff.c ****   /* These fields are NOT loaded into local working state. */
  87:fltk-1.3.4-1/jpeg/jchuff.c ****   unsigned int restarts_to_go;	/* MCUs left in this restart interval */
  88:fltk-1.3.4-1/jpeg/jchuff.c ****   int next_restart_num;		/* next restart number to write (0-7) */
  89:fltk-1.3.4-1/jpeg/jchuff.c **** 
  90:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Pointers to derived tables (these workspaces have image lifespan) */
  91:fltk-1.3.4-1/jpeg/jchuff.c ****   c_derived_tbl * dc_derived_tbls[NUM_HUFF_TBLS];
  92:fltk-1.3.4-1/jpeg/jchuff.c ****   c_derived_tbl * ac_derived_tbls[NUM_HUFF_TBLS];
  93:fltk-1.3.4-1/jpeg/jchuff.c **** 
  94:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Statistics tables for optimization */
  95:fltk-1.3.4-1/jpeg/jchuff.c ****   long * dc_count_ptrs[NUM_HUFF_TBLS];
  96:fltk-1.3.4-1/jpeg/jchuff.c ****   long * ac_count_ptrs[NUM_HUFF_TBLS];
  97:fltk-1.3.4-1/jpeg/jchuff.c **** 
  98:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Following fields used only in progressive mode */
  99:fltk-1.3.4-1/jpeg/jchuff.c **** 
 100:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Mode flag: TRUE for optimization, FALSE for actual data output */
 101:fltk-1.3.4-1/jpeg/jchuff.c ****   boolean gather_statistics;
 102:fltk-1.3.4-1/jpeg/jchuff.c **** 
 103:fltk-1.3.4-1/jpeg/jchuff.c ****   /* next_output_byte/free_in_buffer are local copies of cinfo->dest fields.
 104:fltk-1.3.4-1/jpeg/jchuff.c ****    */
 105:fltk-1.3.4-1/jpeg/jchuff.c ****   JOCTET * next_output_byte;	/* => next byte to write in buffer */
 106:fltk-1.3.4-1/jpeg/jchuff.c ****   size_t free_in_buffer;	/* # of byte spaces remaining in buffer */
 107:fltk-1.3.4-1/jpeg/jchuff.c ****   j_compress_ptr cinfo;		/* link to cinfo (needed for dump_buffer) */
 108:fltk-1.3.4-1/jpeg/jchuff.c **** 
 109:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Coding status for AC components */
 110:fltk-1.3.4-1/jpeg/jchuff.c ****   int ac_tbl_no;		/* the table number of the single component */
 111:fltk-1.3.4-1/jpeg/jchuff.c ****   unsigned int EOBRUN;		/* run length of EOBs */
 112:fltk-1.3.4-1/jpeg/jchuff.c ****   unsigned int BE;		/* # of buffered correction bits before MCU */
 113:fltk-1.3.4-1/jpeg/jchuff.c ****   char * bit_buffer;		/* buffer for correction bits (1 per char) */
 114:fltk-1.3.4-1/jpeg/jchuff.c ****   /* packing correction bits tightly would save some space but cost time... */
 115:fltk-1.3.4-1/jpeg/jchuff.c **** } huff_entropy_encoder;
 116:fltk-1.3.4-1/jpeg/jchuff.c **** 
 117:fltk-1.3.4-1/jpeg/jchuff.c **** typedef huff_entropy_encoder * huff_entropy_ptr;
 118:fltk-1.3.4-1/jpeg/jchuff.c **** 
 119:fltk-1.3.4-1/jpeg/jchuff.c **** /* Working state while writing an MCU (sequential mode).
 120:fltk-1.3.4-1/jpeg/jchuff.c ****  * This struct contains all the fields that are needed by subroutines.
 121:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 122:fltk-1.3.4-1/jpeg/jchuff.c **** 
 123:fltk-1.3.4-1/jpeg/jchuff.c **** typedef struct {
 124:fltk-1.3.4-1/jpeg/jchuff.c ****   JOCTET * next_output_byte;	/* => next byte to write in buffer */
 125:fltk-1.3.4-1/jpeg/jchuff.c ****   size_t free_in_buffer;	/* # of byte spaces remaining in buffer */
 126:fltk-1.3.4-1/jpeg/jchuff.c ****   savable_state cur;		/* Current bit buffer & DC state */
 127:fltk-1.3.4-1/jpeg/jchuff.c ****   j_compress_ptr cinfo;		/* dump_buffer needs access to this */
 128:fltk-1.3.4-1/jpeg/jchuff.c **** } working_state;
 129:fltk-1.3.4-1/jpeg/jchuff.c **** 
 130:fltk-1.3.4-1/jpeg/jchuff.c **** /* MAX_CORR_BITS is the number of bits the AC refinement correction-bit
 131:fltk-1.3.4-1/jpeg/jchuff.c ****  * buffer can hold.  Larger sizes may slightly improve compression, but
 132:fltk-1.3.4-1/jpeg/jchuff.c ****  * 1000 is already well into the realm of overkill.
 133:fltk-1.3.4-1/jpeg/jchuff.c ****  * The minimum safe size is 64 bits.
 134:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 135:fltk-1.3.4-1/jpeg/jchuff.c **** 
 136:fltk-1.3.4-1/jpeg/jchuff.c **** #define MAX_CORR_BITS  1000	/* Max # of correction bits I can buffer */
 137:fltk-1.3.4-1/jpeg/jchuff.c **** 
 138:fltk-1.3.4-1/jpeg/jchuff.c **** /* IRIGHT_SHIFT is like RIGHT_SHIFT, but works on int rather than INT32.
 139:fltk-1.3.4-1/jpeg/jchuff.c ****  * We assume that int right shift is unsigned if INT32 right shift is,
 140:fltk-1.3.4-1/jpeg/jchuff.c ****  * which should be safe.
 141:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 142:fltk-1.3.4-1/jpeg/jchuff.c **** 
 143:fltk-1.3.4-1/jpeg/jchuff.c **** #ifdef RIGHT_SHIFT_IS_UNSIGNED
 144:fltk-1.3.4-1/jpeg/jchuff.c **** #define ISHIFT_TEMPS	int ishift_temp;
 145:fltk-1.3.4-1/jpeg/jchuff.c **** #define IRIGHT_SHIFT(x,shft)  \
 146:fltk-1.3.4-1/jpeg/jchuff.c **** 	((ishift_temp = (x)) < 0 ? \
 147:fltk-1.3.4-1/jpeg/jchuff.c **** 	 (ishift_temp >> (shft)) | ((~0) << (16-(shft))) : \
 148:fltk-1.3.4-1/jpeg/jchuff.c **** 	 (ishift_temp >> (shft)))
 149:fltk-1.3.4-1/jpeg/jchuff.c **** #else
 150:fltk-1.3.4-1/jpeg/jchuff.c **** #define ISHIFT_TEMPS
 151:fltk-1.3.4-1/jpeg/jchuff.c **** #define IRIGHT_SHIFT(x,shft)	((x) >> (shft))
 152:fltk-1.3.4-1/jpeg/jchuff.c **** #endif
 153:fltk-1.3.4-1/jpeg/jchuff.c **** 
 154:fltk-1.3.4-1/jpeg/jchuff.c **** 
 155:fltk-1.3.4-1/jpeg/jchuff.c **** /*
 156:fltk-1.3.4-1/jpeg/jchuff.c ****  * Compute the derived values for a Huffman table.
 157:fltk-1.3.4-1/jpeg/jchuff.c ****  * This routine also performs some validation checks on the table.
 158:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 159:fltk-1.3.4-1/jpeg/jchuff.c **** 
 160:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(void)
 161:fltk-1.3.4-1/jpeg/jchuff.c **** jpeg_make_c_derived_tbl (j_compress_ptr cinfo, boolean isDC, int tblno,
 162:fltk-1.3.4-1/jpeg/jchuff.c **** 			 c_derived_tbl ** pdtbl)
 163:fltk-1.3.4-1/jpeg/jchuff.c **** {
 164:fltk-1.3.4-1/jpeg/jchuff.c ****   JHUFF_TBL *htbl;
 165:fltk-1.3.4-1/jpeg/jchuff.c ****   c_derived_tbl *dtbl;
 166:fltk-1.3.4-1/jpeg/jchuff.c ****   int p, i, l, lastp, si, maxsymbol;
 167:fltk-1.3.4-1/jpeg/jchuff.c ****   char huffsize[257];
 168:fltk-1.3.4-1/jpeg/jchuff.c ****   unsigned int huffcode[257];
 169:fltk-1.3.4-1/jpeg/jchuff.c ****   unsigned int code;
 170:fltk-1.3.4-1/jpeg/jchuff.c **** 
 171:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Note that huffsize[] and huffcode[] are filled in code-length order,
 172:fltk-1.3.4-1/jpeg/jchuff.c ****    * paralleling the order of the symbols themselves in htbl->huffval[].
 173:fltk-1.3.4-1/jpeg/jchuff.c ****    */
 174:fltk-1.3.4-1/jpeg/jchuff.c **** 
 175:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Find the input Huffman table */
 176:fltk-1.3.4-1/jpeg/jchuff.c ****   if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 177:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 178:fltk-1.3.4-1/jpeg/jchuff.c ****   htbl =
 179:fltk-1.3.4-1/jpeg/jchuff.c ****     isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 180:fltk-1.3.4-1/jpeg/jchuff.c ****   if (htbl == NULL)
 181:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 182:fltk-1.3.4-1/jpeg/jchuff.c **** 
 183:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Allocate a workspace if we haven't already done so. */
 184:fltk-1.3.4-1/jpeg/jchuff.c ****   if (*pdtbl == NULL)
 185:fltk-1.3.4-1/jpeg/jchuff.c ****     *pdtbl = (c_derived_tbl *)
 186:fltk-1.3.4-1/jpeg/jchuff.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 187:fltk-1.3.4-1/jpeg/jchuff.c **** 				  SIZEOF(c_derived_tbl));
 188:fltk-1.3.4-1/jpeg/jchuff.c ****   dtbl = *pdtbl;
 189:fltk-1.3.4-1/jpeg/jchuff.c ****   
 190:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Figure C.1: make table of Huffman code length for each symbol */
 191:fltk-1.3.4-1/jpeg/jchuff.c **** 
 192:fltk-1.3.4-1/jpeg/jchuff.c ****   p = 0;
 193:fltk-1.3.4-1/jpeg/jchuff.c ****   for (l = 1; l <= 16; l++) {
 194:fltk-1.3.4-1/jpeg/jchuff.c ****     i = (int) htbl->bits[l];
 195:fltk-1.3.4-1/jpeg/jchuff.c ****     if (i < 0 || p + i > 256)	/* protect against table overrun */
 196:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 197:fltk-1.3.4-1/jpeg/jchuff.c ****     while (i--)
 198:fltk-1.3.4-1/jpeg/jchuff.c ****       huffsize[p++] = (char) l;
 199:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 200:fltk-1.3.4-1/jpeg/jchuff.c ****   huffsize[p] = 0;
 201:fltk-1.3.4-1/jpeg/jchuff.c ****   lastp = p;
 202:fltk-1.3.4-1/jpeg/jchuff.c ****   
 203:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Figure C.2: generate the codes themselves */
 204:fltk-1.3.4-1/jpeg/jchuff.c ****   /* We also validate that the counts represent a legal Huffman code tree. */
 205:fltk-1.3.4-1/jpeg/jchuff.c **** 
 206:fltk-1.3.4-1/jpeg/jchuff.c ****   code = 0;
 207:fltk-1.3.4-1/jpeg/jchuff.c ****   si = huffsize[0];
 208:fltk-1.3.4-1/jpeg/jchuff.c ****   p = 0;
 209:fltk-1.3.4-1/jpeg/jchuff.c ****   while (huffsize[p]) {
 210:fltk-1.3.4-1/jpeg/jchuff.c ****     while (((int) huffsize[p]) == si) {
 211:fltk-1.3.4-1/jpeg/jchuff.c ****       huffcode[p++] = code;
 212:fltk-1.3.4-1/jpeg/jchuff.c ****       code++;
 213:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 214:fltk-1.3.4-1/jpeg/jchuff.c ****     /* code is now 1 more than the last code used for codelength si; but
 215:fltk-1.3.4-1/jpeg/jchuff.c ****      * it must still fit in si bits, since no code is allowed to be all ones.
 216:fltk-1.3.4-1/jpeg/jchuff.c ****      */
 217:fltk-1.3.4-1/jpeg/jchuff.c ****     if (((INT32) code) >= (((INT32) 1) << si))
 218:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 219:fltk-1.3.4-1/jpeg/jchuff.c ****     code <<= 1;
 220:fltk-1.3.4-1/jpeg/jchuff.c ****     si++;
 221:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 222:fltk-1.3.4-1/jpeg/jchuff.c ****   
 223:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Figure C.3: generate encoding tables */
 224:fltk-1.3.4-1/jpeg/jchuff.c ****   /* These are code and size indexed by symbol value */
 225:fltk-1.3.4-1/jpeg/jchuff.c **** 
 226:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Set all codeless symbols to have code length 0;
 227:fltk-1.3.4-1/jpeg/jchuff.c ****    * this lets us detect duplicate VAL entries here, and later
 228:fltk-1.3.4-1/jpeg/jchuff.c ****    * allows emit_bits to detect any attempt to emit such symbols.
 229:fltk-1.3.4-1/jpeg/jchuff.c ****    */
 230:fltk-1.3.4-1/jpeg/jchuff.c ****   MEMZERO(dtbl->ehufsi, SIZEOF(dtbl->ehufsi));
 231:fltk-1.3.4-1/jpeg/jchuff.c **** 
 232:fltk-1.3.4-1/jpeg/jchuff.c ****   /* This is also a convenient place to check for out-of-range
 233:fltk-1.3.4-1/jpeg/jchuff.c ****    * and duplicated VAL entries.  We allow 0..255 for AC symbols
 234:fltk-1.3.4-1/jpeg/jchuff.c ****    * but only 0..15 for DC.  (We could constrain them further
 235:fltk-1.3.4-1/jpeg/jchuff.c ****    * based on data depth and mode, but this seems enough.)
 236:fltk-1.3.4-1/jpeg/jchuff.c ****    */
 237:fltk-1.3.4-1/jpeg/jchuff.c ****   maxsymbol = isDC ? 15 : 255;
 238:fltk-1.3.4-1/jpeg/jchuff.c **** 
 239:fltk-1.3.4-1/jpeg/jchuff.c ****   for (p = 0; p < lastp; p++) {
 240:fltk-1.3.4-1/jpeg/jchuff.c ****     i = htbl->huffval[p];
 241:fltk-1.3.4-1/jpeg/jchuff.c ****     if (i < 0 || i > maxsymbol || dtbl->ehufsi[i])
 242:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 243:fltk-1.3.4-1/jpeg/jchuff.c ****     dtbl->ehufco[i] = huffcode[p];
 244:fltk-1.3.4-1/jpeg/jchuff.c ****     dtbl->ehufsi[i] = huffsize[p];
 245:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 246:fltk-1.3.4-1/jpeg/jchuff.c **** }
 247:fltk-1.3.4-1/jpeg/jchuff.c **** 
 248:fltk-1.3.4-1/jpeg/jchuff.c **** 
 249:fltk-1.3.4-1/jpeg/jchuff.c **** /* Outputting bytes to the file.
 250:fltk-1.3.4-1/jpeg/jchuff.c ****  * NB: these must be called only when actually outputting,
 251:fltk-1.3.4-1/jpeg/jchuff.c ****  * that is, entropy->gather_statistics == FALSE.
 252:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 253:fltk-1.3.4-1/jpeg/jchuff.c **** 
 254:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit a byte, taking 'action' if must suspend. */
 255:fltk-1.3.4-1/jpeg/jchuff.c **** #define emit_byte_s(state,val,action)  \
 256:fltk-1.3.4-1/jpeg/jchuff.c **** 	{ *(state)->next_output_byte++ = (JOCTET) (val);  \
 257:fltk-1.3.4-1/jpeg/jchuff.c **** 	  if (--(state)->free_in_buffer == 0)  \
 258:fltk-1.3.4-1/jpeg/jchuff.c **** 	    if (! dump_buffer_s(state))  \
 259:fltk-1.3.4-1/jpeg/jchuff.c **** 	      { action; } }
 260:fltk-1.3.4-1/jpeg/jchuff.c **** 
 261:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit a byte */
 262:fltk-1.3.4-1/jpeg/jchuff.c **** #define emit_byte_e(entropy,val)  \
 263:fltk-1.3.4-1/jpeg/jchuff.c **** 	{ *(entropy)->next_output_byte++ = (JOCTET) (val);  \
 264:fltk-1.3.4-1/jpeg/jchuff.c **** 	  if (--(entropy)->free_in_buffer == 0)  \
 265:fltk-1.3.4-1/jpeg/jchuff.c **** 	    dump_buffer_e(entropy); }
 266:fltk-1.3.4-1/jpeg/jchuff.c **** 
 267:fltk-1.3.4-1/jpeg/jchuff.c **** 
 268:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(boolean)
 269:fltk-1.3.4-1/jpeg/jchuff.c **** dump_buffer_s (working_state * state)
 270:fltk-1.3.4-1/jpeg/jchuff.c **** /* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
 271:fltk-1.3.4-1/jpeg/jchuff.c **** {
 272:fltk-1.3.4-1/jpeg/jchuff.c ****   struct jpeg_destination_mgr * dest = state->cinfo->dest;
 273:fltk-1.3.4-1/jpeg/jchuff.c **** 
 274:fltk-1.3.4-1/jpeg/jchuff.c ****   if (! (*dest->empty_output_buffer) (state->cinfo))
 275:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 276:fltk-1.3.4-1/jpeg/jchuff.c ****   /* After a successful buffer dump, must reset buffer pointers */
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->next_output_byte = dest->next_output_byte;
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 279:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 280:fltk-1.3.4-1/jpeg/jchuff.c **** }
 281:fltk-1.3.4-1/jpeg/jchuff.c **** 
 282:fltk-1.3.4-1/jpeg/jchuff.c **** 
 283:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(void)
 284:fltk-1.3.4-1/jpeg/jchuff.c **** dump_buffer_e (huff_entropy_ptr entropy)
 285:fltk-1.3.4-1/jpeg/jchuff.c **** /* Empty the output buffer; we do not support suspension in this case. */
 286:fltk-1.3.4-1/jpeg/jchuff.c **** {
  11              		.loc 1 286 1 view -0
  12              		.cfi_startproc
 287:fltk-1.3.4-1/jpeg/jchuff.c ****   struct jpeg_destination_mgr * dest = entropy->cinfo->dest;
  13              		.loc 1 287 3 view .LVU1
 286:fltk-1.3.4-1/jpeg/jchuff.c ****   struct jpeg_destination_mgr * dest = entropy->cinfo->dest;
  14              		.loc 1 286 1 is_stmt 0 view .LVU2
  15 0000 55       		pushq	%rbp
  16              		.cfi_def_cfa_offset 16
  17              		.cfi_offset 6, -16
  18 0001 53       		pushq	%rbx
  19              		.cfi_def_cfa_offset 24
  20              		.cfi_offset 3, -24
  21 0002 4889FB   		movq	%rdi, %rbx
  22 0005 4883EC08 		subq	$8, %rsp
  23              		.cfi_def_cfa_offset 32
  24              		.loc 1 287 47 view .LVU3
  25 0009 488BBFD8 		movq	216(%rdi), %rdi
  25      000000
  26              	.LVL1:
  27              		.loc 1 287 33 view .LVU4
  28 0010 488B6F28 		movq	40(%rdi), %rbp
  29              	.LVL2:
 288:fltk-1.3.4-1/jpeg/jchuff.c **** 
 289:fltk-1.3.4-1/jpeg/jchuff.c ****   if (! (*dest->empty_output_buffer) (entropy->cinfo))
  30              		.loc 1 289 3 is_stmt 1 view .LVU5
  31              		.loc 1 289 10 is_stmt 0 view .LVU6
  32 0014 FF5518   		call	*24(%rbp)
  33              	.LVL3:
  34              		.loc 1 289 6 view .LVU7
  35 0017 85C0     		testl	%eax, %eax
  36 0019 751D     		jne	.L2
 290:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_CANT_SUSPEND);
  37              		.loc 1 290 5 is_stmt 1 view .LVU8
  38 001b 488B83D8 		movq	216(%rbx), %rax
  38      000000
  39 0022 488B00   		movq	(%rax), %rax
  40 0025 C7402819 		movl	$25, 40(%rax)
  40      000000
  41 002c 488BBBD8 		movq	216(%rbx), %rdi
  41      000000
  42 0033 488B07   		movq	(%rdi), %rax
  43 0036 FF10     		call	*(%rax)
  44              	.LVL4:
  45              	.L2:
 291:fltk-1.3.4-1/jpeg/jchuff.c ****   /* After a successful buffer dump, must reset buffer pointers */
 292:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->next_output_byte = dest->next_output_byte;
  46              		.loc 1 292 3 view .LVU9
  47              		.loc 1 292 35 is_stmt 0 view .LVU10
  48 0038 488B4500 		movq	0(%rbp), %rax
  49              		.loc 1 292 29 view .LVU11
  50 003c 488983C8 		movq	%rax, 200(%rbx)
  50      000000
 293:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = dest->free_in_buffer;
  51              		.loc 1 293 3 is_stmt 1 view .LVU12
  52              		.loc 1 293 33 is_stmt 0 view .LVU13
  53 0043 488B4508 		movq	8(%rbp), %rax
  54              		.loc 1 293 27 view .LVU14
  55 0047 488983D0 		movq	%rax, 208(%rbx)
  55      000000
 294:fltk-1.3.4-1/jpeg/jchuff.c **** }
  56              		.loc 1 294 1 view .LVU15
  57 004e 4883C408 		addq	$8, %rsp
  58              		.cfi_def_cfa_offset 24
  59 0052 5B       		popq	%rbx
  60              		.cfi_def_cfa_offset 16
  61              	.LVL5:
  62              		.loc 1 294 1 view .LVU16
  63 0053 5D       		popq	%rbp
  64              		.cfi_def_cfa_offset 8
  65              	.LVL6:
  66              		.loc 1 294 1 view .LVU17
  67 0054 C3       		ret
  68              		.cfi_endproc
  69              	.LFE53:
  71              		.section	.text.encode_mcu_gather,"ax",@progbits
  72              		.p2align 4
  74              	encode_mcu_gather:
  75              	.LVL7:
  76              	.LFB72:
 295:fltk-1.3.4-1/jpeg/jchuff.c **** 
 296:fltk-1.3.4-1/jpeg/jchuff.c **** 
 297:fltk-1.3.4-1/jpeg/jchuff.c **** /* Outputting bits to the file */
 298:fltk-1.3.4-1/jpeg/jchuff.c **** 
 299:fltk-1.3.4-1/jpeg/jchuff.c **** /* Only the right 24 bits of put_buffer are used; the valid bits are
 300:fltk-1.3.4-1/jpeg/jchuff.c ****  * left-justified in this part.  At most 16 bits can be passed to emit_bits
 301:fltk-1.3.4-1/jpeg/jchuff.c ****  * in one call, and we never retain more than 7 bits in put_buffer
 302:fltk-1.3.4-1/jpeg/jchuff.c ****  * between calls, so 24 bits are sufficient.
 303:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 304:fltk-1.3.4-1/jpeg/jchuff.c **** 
 305:fltk-1.3.4-1/jpeg/jchuff.c **** INLINE
 306:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(boolean)
 307:fltk-1.3.4-1/jpeg/jchuff.c **** emit_bits_s (working_state * state, unsigned int code, int size)
 308:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits; return TRUE if successful, FALSE if must suspend */
 309:fltk-1.3.4-1/jpeg/jchuff.c **** {
 310:fltk-1.3.4-1/jpeg/jchuff.c ****   /* This routine is heavily used, so it's worth coding tightly. */
 311:fltk-1.3.4-1/jpeg/jchuff.c ****   register INT32 put_buffer;
 312:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 313:fltk-1.3.4-1/jpeg/jchuff.c **** 
 314:fltk-1.3.4-1/jpeg/jchuff.c ****   /* if size is 0, caller used an invalid Huffman table entry */
 315:fltk-1.3.4-1/jpeg/jchuff.c ****   if (size == 0)
 316:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);
 317:fltk-1.3.4-1/jpeg/jchuff.c **** 
 318:fltk-1.3.4-1/jpeg/jchuff.c ****   /* mask off any extra bits in code */
 319:fltk-1.3.4-1/jpeg/jchuff.c ****   put_buffer = ((INT32) code) & ((((INT32) 1) << size) - 1);
 320:fltk-1.3.4-1/jpeg/jchuff.c **** 
 321:fltk-1.3.4-1/jpeg/jchuff.c ****   /* new number of bits in buffer */
 322:fltk-1.3.4-1/jpeg/jchuff.c ****   put_bits = size + state->cur.put_bits;
 323:fltk-1.3.4-1/jpeg/jchuff.c **** 
 324:fltk-1.3.4-1/jpeg/jchuff.c ****   put_buffer <<= 24 - put_bits; /* align incoming bits */
 325:fltk-1.3.4-1/jpeg/jchuff.c **** 
 326:fltk-1.3.4-1/jpeg/jchuff.c ****   /* and merge with old buffer contents */
 327:fltk-1.3.4-1/jpeg/jchuff.c ****   put_buffer |= state->cur.put_buffer;
 328:fltk-1.3.4-1/jpeg/jchuff.c **** 
 329:fltk-1.3.4-1/jpeg/jchuff.c ****   while (put_bits >= 8) {
 330:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 331:fltk-1.3.4-1/jpeg/jchuff.c **** 
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_byte_s(state, c, return FALSE);
 333:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 334:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 335:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_buffer <<= 8;
 337:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 338:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 339:fltk-1.3.4-1/jpeg/jchuff.c **** 
 340:fltk-1.3.4-1/jpeg/jchuff.c ****   state->cur.put_buffer = put_buffer; /* update state variables */
 341:fltk-1.3.4-1/jpeg/jchuff.c ****   state->cur.put_bits = put_bits;
 342:fltk-1.3.4-1/jpeg/jchuff.c **** 
 343:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 344:fltk-1.3.4-1/jpeg/jchuff.c **** }
 345:fltk-1.3.4-1/jpeg/jchuff.c **** 
 346:fltk-1.3.4-1/jpeg/jchuff.c **** 
 347:fltk-1.3.4-1/jpeg/jchuff.c **** INLINE
 348:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(void)
 349:fltk-1.3.4-1/jpeg/jchuff.c **** emit_bits_e (huff_entropy_ptr entropy, unsigned int code, int size)
 350:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 351:fltk-1.3.4-1/jpeg/jchuff.c **** {
 352:fltk-1.3.4-1/jpeg/jchuff.c ****   /* This routine is heavily used, so it's worth coding tightly. */
 353:fltk-1.3.4-1/jpeg/jchuff.c ****   register INT32 put_buffer;
 354:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 355:fltk-1.3.4-1/jpeg/jchuff.c **** 
 356:fltk-1.3.4-1/jpeg/jchuff.c ****   /* if size is 0, caller used an invalid Huffman table entry */
 357:fltk-1.3.4-1/jpeg/jchuff.c ****   if (size == 0)
 358:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 359:fltk-1.3.4-1/jpeg/jchuff.c **** 
 360:fltk-1.3.4-1/jpeg/jchuff.c ****   if (entropy->gather_statistics)
 361:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 362:fltk-1.3.4-1/jpeg/jchuff.c **** 
 363:fltk-1.3.4-1/jpeg/jchuff.c ****   /* mask off any extra bits in code */
 364:fltk-1.3.4-1/jpeg/jchuff.c ****   put_buffer = ((INT32) code) & ((((INT32) 1) << size) - 1);
 365:fltk-1.3.4-1/jpeg/jchuff.c **** 
 366:fltk-1.3.4-1/jpeg/jchuff.c ****   /* new number of bits in buffer */
 367:fltk-1.3.4-1/jpeg/jchuff.c ****   put_bits = size + entropy->saved.put_bits;
 368:fltk-1.3.4-1/jpeg/jchuff.c **** 
 369:fltk-1.3.4-1/jpeg/jchuff.c ****   put_buffer <<= 24 - put_bits; /* align incoming bits */
 370:fltk-1.3.4-1/jpeg/jchuff.c **** 
 371:fltk-1.3.4-1/jpeg/jchuff.c ****   /* and merge with old buffer contents */
 372:fltk-1.3.4-1/jpeg/jchuff.c ****   put_buffer |= entropy->saved.put_buffer;
 373:fltk-1.3.4-1/jpeg/jchuff.c **** 
 374:fltk-1.3.4-1/jpeg/jchuff.c ****   while (put_bits >= 8) {
 375:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 376:fltk-1.3.4-1/jpeg/jchuff.c **** 
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_byte_e(entropy, c);
 378:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 379:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 380:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_buffer <<= 8;
 382:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 383:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 384:fltk-1.3.4-1/jpeg/jchuff.c **** 
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_buffer = put_buffer; /* update variables */
 386:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 387:fltk-1.3.4-1/jpeg/jchuff.c **** }
 388:fltk-1.3.4-1/jpeg/jchuff.c **** 
 389:fltk-1.3.4-1/jpeg/jchuff.c **** 
 390:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(boolean)
 391:fltk-1.3.4-1/jpeg/jchuff.c **** flush_bits_s (working_state * state)
 392:fltk-1.3.4-1/jpeg/jchuff.c **** {
 393:fltk-1.3.4-1/jpeg/jchuff.c ****   if (! emit_bits_s(state, 0x7F, 7)) /* fill any partial byte with ones */
 394:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 395:fltk-1.3.4-1/jpeg/jchuff.c ****   state->cur.put_buffer = 0;	     /* and reset bit-buffer to empty */
 396:fltk-1.3.4-1/jpeg/jchuff.c ****   state->cur.put_bits = 0;
 397:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 398:fltk-1.3.4-1/jpeg/jchuff.c **** }
 399:fltk-1.3.4-1/jpeg/jchuff.c **** 
 400:fltk-1.3.4-1/jpeg/jchuff.c **** 
 401:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(void)
 402:fltk-1.3.4-1/jpeg/jchuff.c **** flush_bits_e (huff_entropy_ptr entropy)
 403:fltk-1.3.4-1/jpeg/jchuff.c **** {
 404:fltk-1.3.4-1/jpeg/jchuff.c ****   emit_bits_e(entropy, 0x7F, 7); /* fill any partial byte with ones */
 405:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_buffer = 0; /* and reset bit-buffer to empty */
 406:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = 0;
 407:fltk-1.3.4-1/jpeg/jchuff.c **** }
 408:fltk-1.3.4-1/jpeg/jchuff.c **** 
 409:fltk-1.3.4-1/jpeg/jchuff.c **** 
 410:fltk-1.3.4-1/jpeg/jchuff.c **** /*
 411:fltk-1.3.4-1/jpeg/jchuff.c ****  * Emit (or just count) a Huffman symbol.
 412:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 413:fltk-1.3.4-1/jpeg/jchuff.c **** 
 414:fltk-1.3.4-1/jpeg/jchuff.c **** INLINE
 415:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(void)
 416:fltk-1.3.4-1/jpeg/jchuff.c **** emit_dc_symbol (huff_entropy_ptr entropy, int tbl_no, int symbol)
 417:fltk-1.3.4-1/jpeg/jchuff.c **** {
 418:fltk-1.3.4-1/jpeg/jchuff.c ****   if (entropy->gather_statistics)
 419:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->dc_count_ptrs[tbl_no][symbol]++;
 420:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 421:fltk-1.3.4-1/jpeg/jchuff.c ****     c_derived_tbl * tbl = entropy->dc_derived_tbls[tbl_no];
 422:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 423:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 424:fltk-1.3.4-1/jpeg/jchuff.c **** }
 425:fltk-1.3.4-1/jpeg/jchuff.c **** 
 426:fltk-1.3.4-1/jpeg/jchuff.c **** 
 427:fltk-1.3.4-1/jpeg/jchuff.c **** INLINE
 428:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(void)
 429:fltk-1.3.4-1/jpeg/jchuff.c **** emit_ac_symbol (huff_entropy_ptr entropy, int tbl_no, int symbol)
 430:fltk-1.3.4-1/jpeg/jchuff.c **** {
 431:fltk-1.3.4-1/jpeg/jchuff.c ****   if (entropy->gather_statistics)
 432:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 433:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 434:fltk-1.3.4-1/jpeg/jchuff.c ****     c_derived_tbl * tbl = entropy->ac_derived_tbls[tbl_no];
 435:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 436:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 437:fltk-1.3.4-1/jpeg/jchuff.c **** }
 438:fltk-1.3.4-1/jpeg/jchuff.c **** 
 439:fltk-1.3.4-1/jpeg/jchuff.c **** 
 440:fltk-1.3.4-1/jpeg/jchuff.c **** /*
 441:fltk-1.3.4-1/jpeg/jchuff.c ****  * Emit bits from a correction bit buffer.
 442:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 443:fltk-1.3.4-1/jpeg/jchuff.c **** 
 444:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(void)
 445:fltk-1.3.4-1/jpeg/jchuff.c **** emit_buffered_bits (huff_entropy_ptr entropy, char * bufstart,
 446:fltk-1.3.4-1/jpeg/jchuff.c **** 		    unsigned int nbits)
 447:fltk-1.3.4-1/jpeg/jchuff.c **** {
 448:fltk-1.3.4-1/jpeg/jchuff.c ****   if (entropy->gather_statistics)
 449:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 450:fltk-1.3.4-1/jpeg/jchuff.c **** 
 451:fltk-1.3.4-1/jpeg/jchuff.c ****   while (nbits > 0) {
 452:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, (unsigned int) (*bufstart), 1);
 453:fltk-1.3.4-1/jpeg/jchuff.c ****     bufstart++;
 454:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits--;
 455:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 456:fltk-1.3.4-1/jpeg/jchuff.c **** }
 457:fltk-1.3.4-1/jpeg/jchuff.c **** 
 458:fltk-1.3.4-1/jpeg/jchuff.c **** 
 459:fltk-1.3.4-1/jpeg/jchuff.c **** /*
 460:fltk-1.3.4-1/jpeg/jchuff.c ****  * Emit any pending EOBRUN symbol.
 461:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 462:fltk-1.3.4-1/jpeg/jchuff.c **** 
 463:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(void)
 464:fltk-1.3.4-1/jpeg/jchuff.c **** emit_eobrun (huff_entropy_ptr entropy)
 465:fltk-1.3.4-1/jpeg/jchuff.c **** {
 466:fltk-1.3.4-1/jpeg/jchuff.c ****   register int temp, nbits;
 467:fltk-1.3.4-1/jpeg/jchuff.c **** 
 468:fltk-1.3.4-1/jpeg/jchuff.c ****   if (entropy->EOBRUN > 0) {	/* if there is any pending EOBRUN */
 469:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = entropy->EOBRUN;
 470:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits = 0;
 471:fltk-1.3.4-1/jpeg/jchuff.c ****     while ((temp >>= 1))
 472:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 473:fltk-1.3.4-1/jpeg/jchuff.c ****     /* safety check: shouldn't happen given limited correction-bit buffer */
 474:fltk-1.3.4-1/jpeg/jchuff.c ****     if (nbits > 14)
 475:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 476:fltk-1.3.4-1/jpeg/jchuff.c **** 
 477:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_ac_symbol(entropy, entropy->ac_tbl_no, nbits << 4);
 478:fltk-1.3.4-1/jpeg/jchuff.c ****     if (nbits)
 479:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_bits_e(entropy, entropy->EOBRUN, nbits);
 480:fltk-1.3.4-1/jpeg/jchuff.c **** 
 481:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->EOBRUN = 0;
 482:fltk-1.3.4-1/jpeg/jchuff.c **** 
 483:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Emit any buffered correction bits */
 484:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_buffered_bits(entropy, entropy->bit_buffer, entropy->BE);
 485:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->BE = 0;
 486:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 487:fltk-1.3.4-1/jpeg/jchuff.c **** }
 488:fltk-1.3.4-1/jpeg/jchuff.c **** 
 489:fltk-1.3.4-1/jpeg/jchuff.c **** 
 490:fltk-1.3.4-1/jpeg/jchuff.c **** /*
 491:fltk-1.3.4-1/jpeg/jchuff.c ****  * Emit a restart marker & resynchronize predictions.
 492:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 493:fltk-1.3.4-1/jpeg/jchuff.c **** 
 494:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(boolean)
 495:fltk-1.3.4-1/jpeg/jchuff.c **** emit_restart_s (working_state * state, int restart_num)
 496:fltk-1.3.4-1/jpeg/jchuff.c **** {
 497:fltk-1.3.4-1/jpeg/jchuff.c ****   int ci;
 498:fltk-1.3.4-1/jpeg/jchuff.c **** 
 499:fltk-1.3.4-1/jpeg/jchuff.c ****   if (! flush_bits_s(state))
 500:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 501:fltk-1.3.4-1/jpeg/jchuff.c **** 
 502:fltk-1.3.4-1/jpeg/jchuff.c ****   emit_byte_s(state, 0xFF, return FALSE);
 503:fltk-1.3.4-1/jpeg/jchuff.c ****   emit_byte_s(state, JPEG_RST0 + restart_num, return FALSE);
 504:fltk-1.3.4-1/jpeg/jchuff.c **** 
 505:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Re-initialize DC predictions to 0 */
 506:fltk-1.3.4-1/jpeg/jchuff.c ****   for (ci = 0; ci < state->cinfo->comps_in_scan; ci++)
 507:fltk-1.3.4-1/jpeg/jchuff.c ****     state->cur.last_dc_val[ci] = 0;
 508:fltk-1.3.4-1/jpeg/jchuff.c **** 
 509:fltk-1.3.4-1/jpeg/jchuff.c ****   /* The restart counter is not updated until we successfully write the MCU. */
 510:fltk-1.3.4-1/jpeg/jchuff.c **** 
 511:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 512:fltk-1.3.4-1/jpeg/jchuff.c **** }
 513:fltk-1.3.4-1/jpeg/jchuff.c **** 
 514:fltk-1.3.4-1/jpeg/jchuff.c **** 
 515:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(void)
 516:fltk-1.3.4-1/jpeg/jchuff.c **** emit_restart_e (huff_entropy_ptr entropy, int restart_num)
 517:fltk-1.3.4-1/jpeg/jchuff.c **** {
 518:fltk-1.3.4-1/jpeg/jchuff.c ****   int ci;
 519:fltk-1.3.4-1/jpeg/jchuff.c **** 
 520:fltk-1.3.4-1/jpeg/jchuff.c ****   emit_eobrun(entropy);
 521:fltk-1.3.4-1/jpeg/jchuff.c **** 
 522:fltk-1.3.4-1/jpeg/jchuff.c ****   if (! entropy->gather_statistics) {
 523:fltk-1.3.4-1/jpeg/jchuff.c ****     flush_bits_e(entropy);
 524:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_byte_e(entropy, 0xFF);
 525:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_byte_e(entropy, JPEG_RST0 + restart_num);
 526:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 527:fltk-1.3.4-1/jpeg/jchuff.c **** 
 528:fltk-1.3.4-1/jpeg/jchuff.c ****   if (entropy->cinfo->Ss == 0) {
 529:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Re-initialize DC predictions to 0 */
 530:fltk-1.3.4-1/jpeg/jchuff.c ****     for (ci = 0; ci < entropy->cinfo->comps_in_scan; ci++)
 531:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->saved.last_dc_val[ci] = 0;
 532:fltk-1.3.4-1/jpeg/jchuff.c ****   } else {
 533:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Re-initialize all AC-related fields to 0 */
 534:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->EOBRUN = 0;
 535:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->BE = 0;
 536:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 537:fltk-1.3.4-1/jpeg/jchuff.c **** }
 538:fltk-1.3.4-1/jpeg/jchuff.c **** 
 539:fltk-1.3.4-1/jpeg/jchuff.c **** 
 540:fltk-1.3.4-1/jpeg/jchuff.c **** /*
 541:fltk-1.3.4-1/jpeg/jchuff.c ****  * MCU encoding for DC initial scan (either spectral selection,
 542:fltk-1.3.4-1/jpeg/jchuff.c ****  * or first pass of successive approximation).
 543:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 544:fltk-1.3.4-1/jpeg/jchuff.c **** 
 545:fltk-1.3.4-1/jpeg/jchuff.c **** METHODDEF(boolean)
 546:fltk-1.3.4-1/jpeg/jchuff.c **** encode_mcu_DC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
 547:fltk-1.3.4-1/jpeg/jchuff.c **** {
 548:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 549:fltk-1.3.4-1/jpeg/jchuff.c ****   register int temp, temp2;
 550:fltk-1.3.4-1/jpeg/jchuff.c ****   register int nbits;
 551:fltk-1.3.4-1/jpeg/jchuff.c ****   int blkn, ci, tbl;
 552:fltk-1.3.4-1/jpeg/jchuff.c ****   ISHIFT_TEMPS
 553:fltk-1.3.4-1/jpeg/jchuff.c **** 
 554:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->next_output_byte = cinfo->dest->next_output_byte;
 555:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 556:fltk-1.3.4-1/jpeg/jchuff.c **** 
 557:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Emit restart marker if needed */
 558:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->restart_interval)
 559:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 560:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_restart_e(entropy, entropy->next_restart_num);
 561:fltk-1.3.4-1/jpeg/jchuff.c **** 
 562:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Encode the MCU data blocks */
 563:fltk-1.3.4-1/jpeg/jchuff.c ****   for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 564:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
 565:fltk-1.3.4-1/jpeg/jchuff.c ****     tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 566:fltk-1.3.4-1/jpeg/jchuff.c **** 
 567:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Compute the DC value after the required point transform by Al.
 568:fltk-1.3.4-1/jpeg/jchuff.c ****      * This is simply an arithmetic right shift.
 569:fltk-1.3.4-1/jpeg/jchuff.c ****      */
 570:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = IRIGHT_SHIFT((int) (MCU_data[blkn][0][0]), cinfo->Al);
 571:fltk-1.3.4-1/jpeg/jchuff.c **** 
 572:fltk-1.3.4-1/jpeg/jchuff.c ****     /* DC differences are figured on the point-transformed values. */
 573:fltk-1.3.4-1/jpeg/jchuff.c ****     temp2 = temp - entropy->saved.last_dc_val[ci];
 574:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->saved.last_dc_val[ci] = temp;
 575:fltk-1.3.4-1/jpeg/jchuff.c **** 
 576:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Encode the DC coefficient difference per section G.1.2.1 */
 577:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = temp2;
 578:fltk-1.3.4-1/jpeg/jchuff.c ****     if (temp < 0) {
 579:fltk-1.3.4-1/jpeg/jchuff.c ****       temp = -temp;		/* temp is abs value of input */
 580:fltk-1.3.4-1/jpeg/jchuff.c ****       /* For a negative input, want temp2 = bitwise complement of abs(input) */
 581:fltk-1.3.4-1/jpeg/jchuff.c ****       /* This code assumes we are on a two's complement machine */
 582:fltk-1.3.4-1/jpeg/jchuff.c ****       temp2--;
 583:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 584:fltk-1.3.4-1/jpeg/jchuff.c **** 
 585:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Find the number of bits needed for the magnitude of the coefficient */
 586:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits = 0;
 587:fltk-1.3.4-1/jpeg/jchuff.c ****     while (temp) {
 588:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 589:fltk-1.3.4-1/jpeg/jchuff.c ****       temp >>= 1;
 590:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 591:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Check for out-of-range coefficient values.
 592:fltk-1.3.4-1/jpeg/jchuff.c ****      * Since we're encoding a difference, the range limit is twice as much.
 593:fltk-1.3.4-1/jpeg/jchuff.c ****      */
 594:fltk-1.3.4-1/jpeg/jchuff.c ****     if (nbits > MAX_COEF_BITS+1)
 595:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 596:fltk-1.3.4-1/jpeg/jchuff.c **** 
 597:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Count/emit the Huffman-coded symbol for the number of bits */
 598:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_dc_symbol(entropy, tbl, nbits);
 599:fltk-1.3.4-1/jpeg/jchuff.c **** 
 600:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Emit that number of bits of the value, if positive, */
 601:fltk-1.3.4-1/jpeg/jchuff.c ****     /* or the complement of its magnitude, if negative. */
 602:fltk-1.3.4-1/jpeg/jchuff.c ****     if (nbits)			/* emit_bits rejects calls with size 0 */
 603:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_bits_e(entropy, (unsigned int) temp2, nbits);
 604:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 605:fltk-1.3.4-1/jpeg/jchuff.c **** 
 606:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->next_output_byte = entropy->next_output_byte;
 607:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 608:fltk-1.3.4-1/jpeg/jchuff.c **** 
 609:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Update restart-interval state too */
 610:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->restart_interval) {
 611:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 612:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 613:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num++;
 614:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num &= 7;
 615:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 616:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->restarts_to_go--;
 617:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 618:fltk-1.3.4-1/jpeg/jchuff.c **** 
 619:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 620:fltk-1.3.4-1/jpeg/jchuff.c **** }
 621:fltk-1.3.4-1/jpeg/jchuff.c **** 
 622:fltk-1.3.4-1/jpeg/jchuff.c **** 
 623:fltk-1.3.4-1/jpeg/jchuff.c **** /*
 624:fltk-1.3.4-1/jpeg/jchuff.c ****  * MCU encoding for AC initial scan (either spectral selection,
 625:fltk-1.3.4-1/jpeg/jchuff.c ****  * or first pass of successive approximation).
 626:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 627:fltk-1.3.4-1/jpeg/jchuff.c **** 
 628:fltk-1.3.4-1/jpeg/jchuff.c **** METHODDEF(boolean)
 629:fltk-1.3.4-1/jpeg/jchuff.c **** encode_mcu_AC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
 630:fltk-1.3.4-1/jpeg/jchuff.c **** {
 631:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 632:fltk-1.3.4-1/jpeg/jchuff.c ****   const int * natural_order;
 633:fltk-1.3.4-1/jpeg/jchuff.c ****   JBLOCKROW block;
 634:fltk-1.3.4-1/jpeg/jchuff.c ****   register int temp, temp2;
 635:fltk-1.3.4-1/jpeg/jchuff.c ****   register int nbits;
 636:fltk-1.3.4-1/jpeg/jchuff.c ****   register int r, k;
 637:fltk-1.3.4-1/jpeg/jchuff.c ****   int Se, Al;
 638:fltk-1.3.4-1/jpeg/jchuff.c **** 
 639:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->next_output_byte = cinfo->dest->next_output_byte;
 640:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 641:fltk-1.3.4-1/jpeg/jchuff.c **** 
 642:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Emit restart marker if needed */
 643:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->restart_interval)
 644:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 645:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_restart_e(entropy, entropy->next_restart_num);
 646:fltk-1.3.4-1/jpeg/jchuff.c **** 
 647:fltk-1.3.4-1/jpeg/jchuff.c ****   Se = cinfo->Se;
 648:fltk-1.3.4-1/jpeg/jchuff.c ****   Al = cinfo->Al;
 649:fltk-1.3.4-1/jpeg/jchuff.c ****   natural_order = cinfo->natural_order;
 650:fltk-1.3.4-1/jpeg/jchuff.c **** 
 651:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Encode the MCU data block */
 652:fltk-1.3.4-1/jpeg/jchuff.c ****   block = MCU_data[0];
 653:fltk-1.3.4-1/jpeg/jchuff.c **** 
 654:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Encode the AC coefficients per section G.1.2.2, fig. G.3 */
 655:fltk-1.3.4-1/jpeg/jchuff.c ****   
 656:fltk-1.3.4-1/jpeg/jchuff.c ****   r = 0;			/* r = run length of zeros */
 657:fltk-1.3.4-1/jpeg/jchuff.c ****    
 658:fltk-1.3.4-1/jpeg/jchuff.c ****   for (k = cinfo->Ss; k <= Se; k++) {
 659:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = (*block)[natural_order[k]]) == 0) {
 660:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 661:fltk-1.3.4-1/jpeg/jchuff.c ****       continue;
 662:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 663:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We must apply the point transform by Al.  For AC coefficients this
 664:fltk-1.3.4-1/jpeg/jchuff.c ****      * is an integer division with rounding towards 0.  To do this portably
 665:fltk-1.3.4-1/jpeg/jchuff.c ****      * in C, we shift after obtaining the absolute value; so the code is
 666:fltk-1.3.4-1/jpeg/jchuff.c ****      * interwoven with finding the abs value (temp) and output bits (temp2).
 667:fltk-1.3.4-1/jpeg/jchuff.c ****      */
 668:fltk-1.3.4-1/jpeg/jchuff.c ****     if (temp < 0) {
 669:fltk-1.3.4-1/jpeg/jchuff.c ****       temp = -temp;		/* temp is abs value of input */
 670:fltk-1.3.4-1/jpeg/jchuff.c ****       temp >>= Al;		/* apply the point transform */
 671:fltk-1.3.4-1/jpeg/jchuff.c ****       /* For a negative coef, want temp2 = bitwise complement of abs(coef) */
 672:fltk-1.3.4-1/jpeg/jchuff.c ****       temp2 = ~temp;
 673:fltk-1.3.4-1/jpeg/jchuff.c ****     } else {
 674:fltk-1.3.4-1/jpeg/jchuff.c ****       temp >>= Al;		/* apply the point transform */
 675:fltk-1.3.4-1/jpeg/jchuff.c ****       temp2 = temp;
 676:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 677:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Watch out for case that nonzero coef is zero after point transform */
 678:fltk-1.3.4-1/jpeg/jchuff.c ****     if (temp == 0) {
 679:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 680:fltk-1.3.4-1/jpeg/jchuff.c ****       continue;
 681:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 682:fltk-1.3.4-1/jpeg/jchuff.c **** 
 683:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Emit any pending EOBRUN */
 684:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->EOBRUN > 0)
 685:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_eobrun(entropy);
 686:fltk-1.3.4-1/jpeg/jchuff.c ****     /* if run length > 15, must emit special run-length-16 codes (0xF0) */
 687:fltk-1.3.4-1/jpeg/jchuff.c ****     while (r > 15) {
 688:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_ac_symbol(entropy, entropy->ac_tbl_no, 0xF0);
 689:fltk-1.3.4-1/jpeg/jchuff.c ****       r -= 16;
 690:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 691:fltk-1.3.4-1/jpeg/jchuff.c **** 
 692:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Find the number of bits needed for the magnitude of the coefficient */
 693:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits = 1;			/* there must be at least one 1 bit */
 694:fltk-1.3.4-1/jpeg/jchuff.c ****     while ((temp >>= 1))
 695:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 696:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Check for out-of-range coefficient values */
 697:fltk-1.3.4-1/jpeg/jchuff.c ****     if (nbits > MAX_COEF_BITS)
 698:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 699:fltk-1.3.4-1/jpeg/jchuff.c **** 
 700:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Count/emit Huffman symbol for run length / number of bits */
 701:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_ac_symbol(entropy, entropy->ac_tbl_no, (r << 4) + nbits);
 702:fltk-1.3.4-1/jpeg/jchuff.c **** 
 703:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Emit that number of bits of the value, if positive, */
 704:fltk-1.3.4-1/jpeg/jchuff.c ****     /* or the complement of its magnitude, if negative. */
 705:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, (unsigned int) temp2, nbits);
 706:fltk-1.3.4-1/jpeg/jchuff.c **** 
 707:fltk-1.3.4-1/jpeg/jchuff.c ****     r = 0;			/* reset zero run length */
 708:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 709:fltk-1.3.4-1/jpeg/jchuff.c **** 
 710:fltk-1.3.4-1/jpeg/jchuff.c ****   if (r > 0) {			/* If there are trailing zeroes, */
 711:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->EOBRUN++;		/* count an EOB */
 712:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->EOBRUN == 0x7FFF)
 713:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_eobrun(entropy);	/* force it out to avoid overflow */
 714:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 715:fltk-1.3.4-1/jpeg/jchuff.c **** 
 716:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->next_output_byte = entropy->next_output_byte;
 717:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 718:fltk-1.3.4-1/jpeg/jchuff.c **** 
 719:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Update restart-interval state too */
 720:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->restart_interval) {
 721:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 722:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 723:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num++;
 724:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num &= 7;
 725:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 726:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->restarts_to_go--;
 727:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 728:fltk-1.3.4-1/jpeg/jchuff.c **** 
 729:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 730:fltk-1.3.4-1/jpeg/jchuff.c **** }
 731:fltk-1.3.4-1/jpeg/jchuff.c **** 
 732:fltk-1.3.4-1/jpeg/jchuff.c **** 
 733:fltk-1.3.4-1/jpeg/jchuff.c **** /*
 734:fltk-1.3.4-1/jpeg/jchuff.c ****  * MCU encoding for DC successive approximation refinement scan.
 735:fltk-1.3.4-1/jpeg/jchuff.c ****  * Note: we assume such scans can be multi-component,
 736:fltk-1.3.4-1/jpeg/jchuff.c ****  * although the spec is not very clear on the point.
 737:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 738:fltk-1.3.4-1/jpeg/jchuff.c **** 
 739:fltk-1.3.4-1/jpeg/jchuff.c **** METHODDEF(boolean)
 740:fltk-1.3.4-1/jpeg/jchuff.c **** encode_mcu_DC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
 741:fltk-1.3.4-1/jpeg/jchuff.c **** {
 742:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 743:fltk-1.3.4-1/jpeg/jchuff.c ****   int Al, blkn;
 744:fltk-1.3.4-1/jpeg/jchuff.c **** 
 745:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->next_output_byte = cinfo->dest->next_output_byte;
 746:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 747:fltk-1.3.4-1/jpeg/jchuff.c **** 
 748:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Emit restart marker if needed */
 749:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->restart_interval)
 750:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 751:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_restart_e(entropy, entropy->next_restart_num);
 752:fltk-1.3.4-1/jpeg/jchuff.c **** 
 753:fltk-1.3.4-1/jpeg/jchuff.c ****   Al = cinfo->Al;
 754:fltk-1.3.4-1/jpeg/jchuff.c **** 
 755:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Encode the MCU data blocks */
 756:fltk-1.3.4-1/jpeg/jchuff.c ****   for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 757:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We simply emit the Al'th bit of the DC coefficient value. */
 758:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, (unsigned int) (MCU_data[blkn][0][0] >> Al), 1);
 759:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 760:fltk-1.3.4-1/jpeg/jchuff.c **** 
 761:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->next_output_byte = entropy->next_output_byte;
 762:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 763:fltk-1.3.4-1/jpeg/jchuff.c **** 
 764:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Update restart-interval state too */
 765:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->restart_interval) {
 766:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 767:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 768:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num++;
 769:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num &= 7;
 770:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 771:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->restarts_to_go--;
 772:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 773:fltk-1.3.4-1/jpeg/jchuff.c **** 
 774:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 775:fltk-1.3.4-1/jpeg/jchuff.c **** }
 776:fltk-1.3.4-1/jpeg/jchuff.c **** 
 777:fltk-1.3.4-1/jpeg/jchuff.c **** 
 778:fltk-1.3.4-1/jpeg/jchuff.c **** /*
 779:fltk-1.3.4-1/jpeg/jchuff.c ****  * MCU encoding for AC successive approximation refinement scan.
 780:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 781:fltk-1.3.4-1/jpeg/jchuff.c **** 
 782:fltk-1.3.4-1/jpeg/jchuff.c **** METHODDEF(boolean)
 783:fltk-1.3.4-1/jpeg/jchuff.c **** encode_mcu_AC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
 784:fltk-1.3.4-1/jpeg/jchuff.c **** {
 785:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 786:fltk-1.3.4-1/jpeg/jchuff.c ****   const int * natural_order;
 787:fltk-1.3.4-1/jpeg/jchuff.c ****   JBLOCKROW block;
 788:fltk-1.3.4-1/jpeg/jchuff.c ****   register int temp;
 789:fltk-1.3.4-1/jpeg/jchuff.c ****   register int r, k;
 790:fltk-1.3.4-1/jpeg/jchuff.c ****   int Se, Al;
 791:fltk-1.3.4-1/jpeg/jchuff.c ****   int EOB;
 792:fltk-1.3.4-1/jpeg/jchuff.c ****   char *BR_buffer;
 793:fltk-1.3.4-1/jpeg/jchuff.c ****   unsigned int BR;
 794:fltk-1.3.4-1/jpeg/jchuff.c ****   int absvalues[DCTSIZE2];
 795:fltk-1.3.4-1/jpeg/jchuff.c **** 
 796:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->next_output_byte = cinfo->dest->next_output_byte;
 797:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 798:fltk-1.3.4-1/jpeg/jchuff.c **** 
 799:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Emit restart marker if needed */
 800:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->restart_interval)
 801:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 802:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_restart_e(entropy, entropy->next_restart_num);
 803:fltk-1.3.4-1/jpeg/jchuff.c **** 
 804:fltk-1.3.4-1/jpeg/jchuff.c ****   Se = cinfo->Se;
 805:fltk-1.3.4-1/jpeg/jchuff.c ****   Al = cinfo->Al;
 806:fltk-1.3.4-1/jpeg/jchuff.c ****   natural_order = cinfo->natural_order;
 807:fltk-1.3.4-1/jpeg/jchuff.c **** 
 808:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Encode the MCU data block */
 809:fltk-1.3.4-1/jpeg/jchuff.c ****   block = MCU_data[0];
 810:fltk-1.3.4-1/jpeg/jchuff.c **** 
 811:fltk-1.3.4-1/jpeg/jchuff.c ****   /* It is convenient to make a pre-pass to determine the transformed
 812:fltk-1.3.4-1/jpeg/jchuff.c ****    * coefficients' absolute values and the EOB position.
 813:fltk-1.3.4-1/jpeg/jchuff.c ****    */
 814:fltk-1.3.4-1/jpeg/jchuff.c ****   EOB = 0;
 815:fltk-1.3.4-1/jpeg/jchuff.c ****   for (k = cinfo->Ss; k <= Se; k++) {
 816:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = (*block)[natural_order[k]];
 817:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We must apply the point transform by Al.  For AC coefficients this
 818:fltk-1.3.4-1/jpeg/jchuff.c ****      * is an integer division with rounding towards 0.  To do this portably
 819:fltk-1.3.4-1/jpeg/jchuff.c ****      * in C, we shift after obtaining the absolute value.
 820:fltk-1.3.4-1/jpeg/jchuff.c ****      */
 821:fltk-1.3.4-1/jpeg/jchuff.c ****     if (temp < 0)
 822:fltk-1.3.4-1/jpeg/jchuff.c ****       temp = -temp;		/* temp is abs value of input */
 823:fltk-1.3.4-1/jpeg/jchuff.c ****     temp >>= Al;		/* apply the point transform */
 824:fltk-1.3.4-1/jpeg/jchuff.c ****     absvalues[k] = temp;	/* save abs value for main pass */
 825:fltk-1.3.4-1/jpeg/jchuff.c ****     if (temp == 1)
 826:fltk-1.3.4-1/jpeg/jchuff.c ****       EOB = k;			/* EOB = index of last newly-nonzero coef */
 827:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 828:fltk-1.3.4-1/jpeg/jchuff.c **** 
 829:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Encode the AC coefficients per section G.1.2.3, fig. G.7 */
 830:fltk-1.3.4-1/jpeg/jchuff.c ****   
 831:fltk-1.3.4-1/jpeg/jchuff.c ****   r = 0;			/* r = run length of zeros */
 832:fltk-1.3.4-1/jpeg/jchuff.c ****   BR = 0;			/* BR = count of buffered bits added now */
 833:fltk-1.3.4-1/jpeg/jchuff.c ****   BR_buffer = entropy->bit_buffer + entropy->BE; /* Append bits to buffer */
 834:fltk-1.3.4-1/jpeg/jchuff.c **** 
 835:fltk-1.3.4-1/jpeg/jchuff.c ****   for (k = cinfo->Ss; k <= Se; k++) {
 836:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = absvalues[k]) == 0) {
 837:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 838:fltk-1.3.4-1/jpeg/jchuff.c ****       continue;
 839:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 840:fltk-1.3.4-1/jpeg/jchuff.c **** 
 841:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Emit any required ZRLs, but not if they can be folded into EOB */
 842:fltk-1.3.4-1/jpeg/jchuff.c ****     while (r > 15 && k <= EOB) {
 843:fltk-1.3.4-1/jpeg/jchuff.c ****       /* emit any pending EOBRUN and the BE correction bits */
 844:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_eobrun(entropy);
 845:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Emit ZRL */
 846:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_ac_symbol(entropy, entropy->ac_tbl_no, 0xF0);
 847:fltk-1.3.4-1/jpeg/jchuff.c ****       r -= 16;
 848:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Emit buffered correction bits that must be associated with ZRL */
 849:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_buffered_bits(entropy, BR_buffer, BR);
 850:fltk-1.3.4-1/jpeg/jchuff.c ****       BR_buffer = entropy->bit_buffer; /* BE bits are gone now */
 851:fltk-1.3.4-1/jpeg/jchuff.c ****       BR = 0;
 852:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 853:fltk-1.3.4-1/jpeg/jchuff.c **** 
 854:fltk-1.3.4-1/jpeg/jchuff.c ****     /* If the coef was previously nonzero, it only needs a correction bit.
 855:fltk-1.3.4-1/jpeg/jchuff.c ****      * NOTE: a straight translation of the spec's figure G.7 would suggest
 856:fltk-1.3.4-1/jpeg/jchuff.c ****      * that we also need to test r > 15.  But if r > 15, we can only get here
 857:fltk-1.3.4-1/jpeg/jchuff.c ****      * if k > EOB, which implies that this coefficient is not 1.
 858:fltk-1.3.4-1/jpeg/jchuff.c ****      */
 859:fltk-1.3.4-1/jpeg/jchuff.c ****     if (temp > 1) {
 860:fltk-1.3.4-1/jpeg/jchuff.c ****       /* The correction bit is the next bit of the absolute value. */
 861:fltk-1.3.4-1/jpeg/jchuff.c ****       BR_buffer[BR++] = (char) (temp & 1);
 862:fltk-1.3.4-1/jpeg/jchuff.c ****       continue;
 863:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 864:fltk-1.3.4-1/jpeg/jchuff.c **** 
 865:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Emit any pending EOBRUN and the BE correction bits */
 866:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_eobrun(entropy);
 867:fltk-1.3.4-1/jpeg/jchuff.c **** 
 868:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Count/emit Huffman symbol for run length / number of bits */
 869:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_ac_symbol(entropy, entropy->ac_tbl_no, (r << 4) + 1);
 870:fltk-1.3.4-1/jpeg/jchuff.c **** 
 871:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Emit output bit for newly-nonzero coef */
 872:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = ((*block)[natural_order[k]] < 0) ? 0 : 1;
 873:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, (unsigned int) temp, 1);
 874:fltk-1.3.4-1/jpeg/jchuff.c **** 
 875:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Emit buffered correction bits that must be associated with this code */
 876:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_buffered_bits(entropy, BR_buffer, BR);
 877:fltk-1.3.4-1/jpeg/jchuff.c ****     BR_buffer = entropy->bit_buffer; /* BE bits are gone now */
 878:fltk-1.3.4-1/jpeg/jchuff.c ****     BR = 0;
 879:fltk-1.3.4-1/jpeg/jchuff.c ****     r = 0;			/* reset zero run length */
 880:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 881:fltk-1.3.4-1/jpeg/jchuff.c **** 
 882:fltk-1.3.4-1/jpeg/jchuff.c ****   if (r > 0 || BR > 0) {	/* If there are trailing zeroes, */
 883:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->EOBRUN++;		/* count an EOB */
 884:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->BE += BR;		/* concat my correction bits to older ones */
 885:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We force out the EOB if we risk either:
 886:fltk-1.3.4-1/jpeg/jchuff.c ****      * 1. overflow of the EOB counter;
 887:fltk-1.3.4-1/jpeg/jchuff.c ****      * 2. overflow of the correction bit buffer during the next MCU.
 888:fltk-1.3.4-1/jpeg/jchuff.c ****      */
 889:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->EOBRUN == 0x7FFF || entropy->BE > (MAX_CORR_BITS-DCTSIZE2+1))
 890:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_eobrun(entropy);
 891:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 892:fltk-1.3.4-1/jpeg/jchuff.c **** 
 893:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->next_output_byte = entropy->next_output_byte;
 894:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 895:fltk-1.3.4-1/jpeg/jchuff.c **** 
 896:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Update restart-interval state too */
 897:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->restart_interval) {
 898:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 899:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 900:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num++;
 901:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num &= 7;
 902:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 903:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->restarts_to_go--;
 904:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 905:fltk-1.3.4-1/jpeg/jchuff.c **** 
 906:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 907:fltk-1.3.4-1/jpeg/jchuff.c **** }
 908:fltk-1.3.4-1/jpeg/jchuff.c **** 
 909:fltk-1.3.4-1/jpeg/jchuff.c **** 
 910:fltk-1.3.4-1/jpeg/jchuff.c **** /* Encode a single block's worth of coefficients */
 911:fltk-1.3.4-1/jpeg/jchuff.c **** 
 912:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(boolean)
 913:fltk-1.3.4-1/jpeg/jchuff.c **** encode_one_block (working_state * state, JCOEFPTR block, int last_dc_val,
 914:fltk-1.3.4-1/jpeg/jchuff.c **** 		  c_derived_tbl *dctbl, c_derived_tbl *actbl)
 915:fltk-1.3.4-1/jpeg/jchuff.c **** {
 916:fltk-1.3.4-1/jpeg/jchuff.c ****   register int temp, temp2;
 917:fltk-1.3.4-1/jpeg/jchuff.c ****   register int nbits;
 918:fltk-1.3.4-1/jpeg/jchuff.c ****   register int r, k;
 919:fltk-1.3.4-1/jpeg/jchuff.c ****   int Se = state->cinfo->lim_Se;
 920:fltk-1.3.4-1/jpeg/jchuff.c ****   const int * natural_order = state->cinfo->natural_order;
 921:fltk-1.3.4-1/jpeg/jchuff.c **** 
 922:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Encode the DC coefficient difference per section F.1.2.1 */
 923:fltk-1.3.4-1/jpeg/jchuff.c **** 
 924:fltk-1.3.4-1/jpeg/jchuff.c ****   temp = temp2 = block[0] - last_dc_val;
 925:fltk-1.3.4-1/jpeg/jchuff.c **** 
 926:fltk-1.3.4-1/jpeg/jchuff.c ****   if (temp < 0) {
 927:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = -temp;		/* temp is abs value of input */
 928:fltk-1.3.4-1/jpeg/jchuff.c ****     /* For a negative input, want temp2 = bitwise complement of abs(input) */
 929:fltk-1.3.4-1/jpeg/jchuff.c ****     /* This code assumes we are on a two's complement machine */
 930:fltk-1.3.4-1/jpeg/jchuff.c ****     temp2--;
 931:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 932:fltk-1.3.4-1/jpeg/jchuff.c **** 
 933:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Find the number of bits needed for the magnitude of the coefficient */
 934:fltk-1.3.4-1/jpeg/jchuff.c ****   nbits = 0;
 935:fltk-1.3.4-1/jpeg/jchuff.c ****   while (temp) {
 936:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits++;
 937:fltk-1.3.4-1/jpeg/jchuff.c ****     temp >>= 1;
 938:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 939:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Check for out-of-range coefficient values.
 940:fltk-1.3.4-1/jpeg/jchuff.c ****    * Since we're encoding a difference, the range limit is twice as much.
 941:fltk-1.3.4-1/jpeg/jchuff.c ****    */
 942:fltk-1.3.4-1/jpeg/jchuff.c ****   if (nbits > MAX_COEF_BITS+1)
 943:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(state->cinfo, JERR_BAD_DCT_COEF);
 944:fltk-1.3.4-1/jpeg/jchuff.c **** 
 945:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Emit the Huffman-coded symbol for the number of bits */
 946:fltk-1.3.4-1/jpeg/jchuff.c ****   if (! emit_bits_s(state, dctbl->ehufco[nbits], dctbl->ehufsi[nbits]))
 947:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 948:fltk-1.3.4-1/jpeg/jchuff.c **** 
 949:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Emit that number of bits of the value, if positive, */
 950:fltk-1.3.4-1/jpeg/jchuff.c ****   /* or the complement of its magnitude, if negative. */
 951:fltk-1.3.4-1/jpeg/jchuff.c ****   if (nbits)			/* emit_bits rejects calls with size 0 */
 952:fltk-1.3.4-1/jpeg/jchuff.c ****     if (! emit_bits_s(state, (unsigned int) temp2, nbits))
 953:fltk-1.3.4-1/jpeg/jchuff.c ****       return FALSE;
 954:fltk-1.3.4-1/jpeg/jchuff.c **** 
 955:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Encode the AC coefficients per section F.1.2.2 */
 956:fltk-1.3.4-1/jpeg/jchuff.c **** 
 957:fltk-1.3.4-1/jpeg/jchuff.c ****   r = 0;			/* r = run length of zeros */
 958:fltk-1.3.4-1/jpeg/jchuff.c **** 
 959:fltk-1.3.4-1/jpeg/jchuff.c ****   for (k = 1; k <= Se; k++) {
 960:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp2 = block[natural_order[k]]) == 0) {
 961:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 962:fltk-1.3.4-1/jpeg/jchuff.c ****     } else {
 963:fltk-1.3.4-1/jpeg/jchuff.c ****       /* if run length > 15, must emit special run-length-16 codes (0xF0) */
 964:fltk-1.3.4-1/jpeg/jchuff.c ****       while (r > 15) {
 965:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (! emit_bits_s(state, actbl->ehufco[0xF0], actbl->ehufsi[0xF0]))
 966:fltk-1.3.4-1/jpeg/jchuff.c **** 	  return FALSE;
 967:fltk-1.3.4-1/jpeg/jchuff.c **** 	r -= 16;
 968:fltk-1.3.4-1/jpeg/jchuff.c ****       }
 969:fltk-1.3.4-1/jpeg/jchuff.c **** 
 970:fltk-1.3.4-1/jpeg/jchuff.c ****       temp = temp2;
 971:fltk-1.3.4-1/jpeg/jchuff.c ****       if (temp < 0) {
 972:fltk-1.3.4-1/jpeg/jchuff.c **** 	temp = -temp;		/* temp is abs value of input */
 973:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* This code assumes we are on a two's complement machine */
 974:fltk-1.3.4-1/jpeg/jchuff.c **** 	temp2--;
 975:fltk-1.3.4-1/jpeg/jchuff.c ****       }
 976:fltk-1.3.4-1/jpeg/jchuff.c **** 
 977:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Find the number of bits needed for the magnitude of the coefficient */
 978:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits = 1;		/* there must be at least one 1 bit */
 979:fltk-1.3.4-1/jpeg/jchuff.c ****       while ((temp >>= 1))
 980:fltk-1.3.4-1/jpeg/jchuff.c **** 	nbits++;
 981:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Check for out-of-range coefficient values */
 982:fltk-1.3.4-1/jpeg/jchuff.c ****       if (nbits > MAX_COEF_BITS)
 983:fltk-1.3.4-1/jpeg/jchuff.c **** 	ERREXIT(state->cinfo, JERR_BAD_DCT_COEF);
 984:fltk-1.3.4-1/jpeg/jchuff.c **** 
 985:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Emit Huffman symbol for run length / number of bits */
 986:fltk-1.3.4-1/jpeg/jchuff.c ****       temp = (r << 4) + nbits;
 987:fltk-1.3.4-1/jpeg/jchuff.c ****       if (! emit_bits_s(state, actbl->ehufco[temp], actbl->ehufsi[temp]))
 988:fltk-1.3.4-1/jpeg/jchuff.c **** 	return FALSE;
 989:fltk-1.3.4-1/jpeg/jchuff.c **** 
 990:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Emit that number of bits of the value, if positive, */
 991:fltk-1.3.4-1/jpeg/jchuff.c ****       /* or the complement of its magnitude, if negative. */
 992:fltk-1.3.4-1/jpeg/jchuff.c ****       if (! emit_bits_s(state, (unsigned int) temp2, nbits))
 993:fltk-1.3.4-1/jpeg/jchuff.c **** 	return FALSE;
 994:fltk-1.3.4-1/jpeg/jchuff.c **** 
 995:fltk-1.3.4-1/jpeg/jchuff.c ****       r = 0;
 996:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 997:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 998:fltk-1.3.4-1/jpeg/jchuff.c **** 
 999:fltk-1.3.4-1/jpeg/jchuff.c ****   /* If the last coef(s) were zero, emit an end-of-block code */
1000:fltk-1.3.4-1/jpeg/jchuff.c ****   if (r > 0)
1001:fltk-1.3.4-1/jpeg/jchuff.c ****     if (! emit_bits_s(state, actbl->ehufco[0], actbl->ehufsi[0]))
1002:fltk-1.3.4-1/jpeg/jchuff.c ****       return FALSE;
1003:fltk-1.3.4-1/jpeg/jchuff.c **** 
1004:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
1005:fltk-1.3.4-1/jpeg/jchuff.c **** }
1006:fltk-1.3.4-1/jpeg/jchuff.c **** 
1007:fltk-1.3.4-1/jpeg/jchuff.c **** 
1008:fltk-1.3.4-1/jpeg/jchuff.c **** /*
1009:fltk-1.3.4-1/jpeg/jchuff.c ****  * Encode and output one MCU's worth of Huffman-compressed coefficients.
1010:fltk-1.3.4-1/jpeg/jchuff.c ****  */
1011:fltk-1.3.4-1/jpeg/jchuff.c **** 
1012:fltk-1.3.4-1/jpeg/jchuff.c **** METHODDEF(boolean)
1013:fltk-1.3.4-1/jpeg/jchuff.c **** encode_mcu_huff (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
1014:fltk-1.3.4-1/jpeg/jchuff.c **** {
1015:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
1016:fltk-1.3.4-1/jpeg/jchuff.c ****   working_state state;
1017:fltk-1.3.4-1/jpeg/jchuff.c ****   int blkn, ci;
1018:fltk-1.3.4-1/jpeg/jchuff.c ****   jpeg_component_info * compptr;
1019:fltk-1.3.4-1/jpeg/jchuff.c **** 
1020:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Load up working state */
1021:fltk-1.3.4-1/jpeg/jchuff.c ****   state.next_output_byte = cinfo->dest->next_output_byte;
1022:fltk-1.3.4-1/jpeg/jchuff.c ****   state.free_in_buffer = cinfo->dest->free_in_buffer;
1023:fltk-1.3.4-1/jpeg/jchuff.c ****   ASSIGN_STATE(state.cur, entropy->saved);
1024:fltk-1.3.4-1/jpeg/jchuff.c ****   state.cinfo = cinfo;
1025:fltk-1.3.4-1/jpeg/jchuff.c **** 
1026:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Emit restart marker if needed */
1027:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->restart_interval) {
1028:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
1029:fltk-1.3.4-1/jpeg/jchuff.c ****       if (! emit_restart_s(&state, entropy->next_restart_num))
1030:fltk-1.3.4-1/jpeg/jchuff.c **** 	return FALSE;
1031:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1032:fltk-1.3.4-1/jpeg/jchuff.c **** 
1033:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Encode the MCU data blocks */
1034:fltk-1.3.4-1/jpeg/jchuff.c ****   for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
1035:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
1036:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
1037:fltk-1.3.4-1/jpeg/jchuff.c ****     if (! encode_one_block(&state,
1038:fltk-1.3.4-1/jpeg/jchuff.c **** 			   MCU_data[blkn][0], state.cur.last_dc_val[ci],
1039:fltk-1.3.4-1/jpeg/jchuff.c **** 			   entropy->dc_derived_tbls[compptr->dc_tbl_no],
1040:fltk-1.3.4-1/jpeg/jchuff.c **** 			   entropy->ac_derived_tbls[compptr->ac_tbl_no]))
1041:fltk-1.3.4-1/jpeg/jchuff.c ****       return FALSE;
1042:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Update last_dc_val */
1043:fltk-1.3.4-1/jpeg/jchuff.c ****     state.cur.last_dc_val[ci] = MCU_data[blkn][0][0];
1044:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1045:fltk-1.3.4-1/jpeg/jchuff.c **** 
1046:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Completed MCU, so update state */
1047:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->next_output_byte = state.next_output_byte;
1048:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = state.free_in_buffer;
1049:fltk-1.3.4-1/jpeg/jchuff.c ****   ASSIGN_STATE(entropy->saved, state.cur);
1050:fltk-1.3.4-1/jpeg/jchuff.c **** 
1051:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Update restart-interval state too */
1052:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->restart_interval) {
1053:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
1054:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
1055:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num++;
1056:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num &= 7;
1057:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1058:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->restarts_to_go--;
1059:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1060:fltk-1.3.4-1/jpeg/jchuff.c **** 
1061:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
1062:fltk-1.3.4-1/jpeg/jchuff.c **** }
1063:fltk-1.3.4-1/jpeg/jchuff.c **** 
1064:fltk-1.3.4-1/jpeg/jchuff.c **** 
1065:fltk-1.3.4-1/jpeg/jchuff.c **** /*
1066:fltk-1.3.4-1/jpeg/jchuff.c ****  * Finish up at the end of a Huffman-compressed scan.
1067:fltk-1.3.4-1/jpeg/jchuff.c ****  */
1068:fltk-1.3.4-1/jpeg/jchuff.c **** 
1069:fltk-1.3.4-1/jpeg/jchuff.c **** METHODDEF(void)
1070:fltk-1.3.4-1/jpeg/jchuff.c **** finish_pass_huff (j_compress_ptr cinfo)
1071:fltk-1.3.4-1/jpeg/jchuff.c **** {
1072:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
1073:fltk-1.3.4-1/jpeg/jchuff.c ****   working_state state;
1074:fltk-1.3.4-1/jpeg/jchuff.c **** 
1075:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->progressive_mode) {
1076:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->next_output_byte = cinfo->dest->next_output_byte;
1077:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->free_in_buffer = cinfo->dest->free_in_buffer;
1078:fltk-1.3.4-1/jpeg/jchuff.c **** 
1079:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Flush out any buffered data */
1080:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_eobrun(entropy);
1081:fltk-1.3.4-1/jpeg/jchuff.c ****     flush_bits_e(entropy);
1082:fltk-1.3.4-1/jpeg/jchuff.c **** 
1083:fltk-1.3.4-1/jpeg/jchuff.c ****     cinfo->dest->next_output_byte = entropy->next_output_byte;
1084:fltk-1.3.4-1/jpeg/jchuff.c ****     cinfo->dest->free_in_buffer = entropy->free_in_buffer;
1085:fltk-1.3.4-1/jpeg/jchuff.c ****   } else {
1086:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Load up working state ... flush_bits needs it */
1087:fltk-1.3.4-1/jpeg/jchuff.c ****     state.next_output_byte = cinfo->dest->next_output_byte;
1088:fltk-1.3.4-1/jpeg/jchuff.c ****     state.free_in_buffer = cinfo->dest->free_in_buffer;
1089:fltk-1.3.4-1/jpeg/jchuff.c ****     ASSIGN_STATE(state.cur, entropy->saved);
1090:fltk-1.3.4-1/jpeg/jchuff.c ****     state.cinfo = cinfo;
1091:fltk-1.3.4-1/jpeg/jchuff.c **** 
1092:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Flush out the last data */
1093:fltk-1.3.4-1/jpeg/jchuff.c ****     if (! flush_bits_s(&state))
1094:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_CANT_SUSPEND);
1095:fltk-1.3.4-1/jpeg/jchuff.c **** 
1096:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Update state */
1097:fltk-1.3.4-1/jpeg/jchuff.c ****     cinfo->dest->next_output_byte = state.next_output_byte;
1098:fltk-1.3.4-1/jpeg/jchuff.c ****     cinfo->dest->free_in_buffer = state.free_in_buffer;
1099:fltk-1.3.4-1/jpeg/jchuff.c ****     ASSIGN_STATE(entropy->saved, state.cur);
1100:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1101:fltk-1.3.4-1/jpeg/jchuff.c **** }
1102:fltk-1.3.4-1/jpeg/jchuff.c **** 
1103:fltk-1.3.4-1/jpeg/jchuff.c **** 
1104:fltk-1.3.4-1/jpeg/jchuff.c **** /*
1105:fltk-1.3.4-1/jpeg/jchuff.c ****  * Huffman coding optimization.
1106:fltk-1.3.4-1/jpeg/jchuff.c ****  *
1107:fltk-1.3.4-1/jpeg/jchuff.c ****  * We first scan the supplied data and count the number of uses of each symbol
1108:fltk-1.3.4-1/jpeg/jchuff.c ****  * that is to be Huffman-coded. (This process MUST agree with the code above.)
1109:fltk-1.3.4-1/jpeg/jchuff.c ****  * Then we build a Huffman coding tree for the observed counts.
1110:fltk-1.3.4-1/jpeg/jchuff.c ****  * Symbols which are not needed at all for the particular image are not
1111:fltk-1.3.4-1/jpeg/jchuff.c ****  * assigned any code, which saves space in the DHT marker as well as in
1112:fltk-1.3.4-1/jpeg/jchuff.c ****  * the compressed data.
1113:fltk-1.3.4-1/jpeg/jchuff.c ****  */
1114:fltk-1.3.4-1/jpeg/jchuff.c **** 
1115:fltk-1.3.4-1/jpeg/jchuff.c **** 
1116:fltk-1.3.4-1/jpeg/jchuff.c **** /* Process a single block's worth of coefficients */
1117:fltk-1.3.4-1/jpeg/jchuff.c **** 
1118:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(void)
1119:fltk-1.3.4-1/jpeg/jchuff.c **** htest_one_block (j_compress_ptr cinfo, JCOEFPTR block, int last_dc_val,
1120:fltk-1.3.4-1/jpeg/jchuff.c **** 		 long dc_counts[], long ac_counts[])
1121:fltk-1.3.4-1/jpeg/jchuff.c **** {
1122:fltk-1.3.4-1/jpeg/jchuff.c ****   register int temp;
1123:fltk-1.3.4-1/jpeg/jchuff.c ****   register int nbits;
1124:fltk-1.3.4-1/jpeg/jchuff.c ****   register int r, k;
1125:fltk-1.3.4-1/jpeg/jchuff.c ****   int Se = cinfo->lim_Se;
1126:fltk-1.3.4-1/jpeg/jchuff.c ****   const int * natural_order = cinfo->natural_order;
1127:fltk-1.3.4-1/jpeg/jchuff.c **** 
1128:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Encode the DC coefficient difference per section F.1.2.1 */
1129:fltk-1.3.4-1/jpeg/jchuff.c **** 
1130:fltk-1.3.4-1/jpeg/jchuff.c ****   temp = block[0] - last_dc_val;
1131:fltk-1.3.4-1/jpeg/jchuff.c ****   if (temp < 0)
1132:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = -temp;
1133:fltk-1.3.4-1/jpeg/jchuff.c **** 
1134:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Find the number of bits needed for the magnitude of the coefficient */
1135:fltk-1.3.4-1/jpeg/jchuff.c ****   nbits = 0;
1136:fltk-1.3.4-1/jpeg/jchuff.c ****   while (temp) {
1137:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits++;
1138:fltk-1.3.4-1/jpeg/jchuff.c ****     temp >>= 1;
1139:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1140:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Check for out-of-range coefficient values.
1141:fltk-1.3.4-1/jpeg/jchuff.c ****    * Since we're encoding a difference, the range limit is twice as much.
1142:fltk-1.3.4-1/jpeg/jchuff.c ****    */
1143:fltk-1.3.4-1/jpeg/jchuff.c ****   if (nbits > MAX_COEF_BITS+1)
1144:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(cinfo, JERR_BAD_DCT_COEF);
1145:fltk-1.3.4-1/jpeg/jchuff.c **** 
1146:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Count the Huffman symbol for the number of bits */
1147:fltk-1.3.4-1/jpeg/jchuff.c ****   dc_counts[nbits]++;
1148:fltk-1.3.4-1/jpeg/jchuff.c **** 
1149:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Encode the AC coefficients per section F.1.2.2 */
1150:fltk-1.3.4-1/jpeg/jchuff.c **** 
1151:fltk-1.3.4-1/jpeg/jchuff.c ****   r = 0;			/* r = run length of zeros */
1152:fltk-1.3.4-1/jpeg/jchuff.c **** 
1153:fltk-1.3.4-1/jpeg/jchuff.c ****   for (k = 1; k <= Se; k++) {
1154:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = block[natural_order[k]]) == 0) {
1155:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
1156:fltk-1.3.4-1/jpeg/jchuff.c ****     } else {
1157:fltk-1.3.4-1/jpeg/jchuff.c ****       /* if run length > 15, must emit special run-length-16 codes (0xF0) */
1158:fltk-1.3.4-1/jpeg/jchuff.c ****       while (r > 15) {
1159:fltk-1.3.4-1/jpeg/jchuff.c **** 	ac_counts[0xF0]++;
1160:fltk-1.3.4-1/jpeg/jchuff.c **** 	r -= 16;
1161:fltk-1.3.4-1/jpeg/jchuff.c ****       }
1162:fltk-1.3.4-1/jpeg/jchuff.c **** 
1163:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Find the number of bits needed for the magnitude of the coefficient */
1164:fltk-1.3.4-1/jpeg/jchuff.c ****       if (temp < 0)
1165:fltk-1.3.4-1/jpeg/jchuff.c **** 	temp = -temp;
1166:fltk-1.3.4-1/jpeg/jchuff.c **** 
1167:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Find the number of bits needed for the magnitude of the coefficient */
1168:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits = 1;		/* there must be at least one 1 bit */
1169:fltk-1.3.4-1/jpeg/jchuff.c ****       while ((temp >>= 1))
1170:fltk-1.3.4-1/jpeg/jchuff.c **** 	nbits++;
1171:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Check for out-of-range coefficient values */
1172:fltk-1.3.4-1/jpeg/jchuff.c ****       if (nbits > MAX_COEF_BITS)
1173:fltk-1.3.4-1/jpeg/jchuff.c **** 	ERREXIT(cinfo, JERR_BAD_DCT_COEF);
1174:fltk-1.3.4-1/jpeg/jchuff.c **** 
1175:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Count Huffman symbol for run length / number of bits */
1176:fltk-1.3.4-1/jpeg/jchuff.c ****       ac_counts[(r << 4) + nbits]++;
1177:fltk-1.3.4-1/jpeg/jchuff.c **** 
1178:fltk-1.3.4-1/jpeg/jchuff.c ****       r = 0;
1179:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1180:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1181:fltk-1.3.4-1/jpeg/jchuff.c **** 
1182:fltk-1.3.4-1/jpeg/jchuff.c ****   /* If the last coef(s) were zero, emit an end-of-block code */
1183:fltk-1.3.4-1/jpeg/jchuff.c ****   if (r > 0)
1184:fltk-1.3.4-1/jpeg/jchuff.c ****     ac_counts[0]++;
1185:fltk-1.3.4-1/jpeg/jchuff.c **** }
1186:fltk-1.3.4-1/jpeg/jchuff.c **** 
1187:fltk-1.3.4-1/jpeg/jchuff.c **** 
1188:fltk-1.3.4-1/jpeg/jchuff.c **** /*
1189:fltk-1.3.4-1/jpeg/jchuff.c ****  * Trial-encode one MCU's worth of Huffman-compressed coefficients.
1190:fltk-1.3.4-1/jpeg/jchuff.c ****  * No data is actually output, so no suspension return is possible.
1191:fltk-1.3.4-1/jpeg/jchuff.c ****  */
1192:fltk-1.3.4-1/jpeg/jchuff.c **** 
1193:fltk-1.3.4-1/jpeg/jchuff.c **** METHODDEF(boolean)
1194:fltk-1.3.4-1/jpeg/jchuff.c **** encode_mcu_gather (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
1195:fltk-1.3.4-1/jpeg/jchuff.c **** {
  77              		.loc 1 1195 1 is_stmt 1 view -0
  78              		.cfi_startproc
  79              		.loc 1 1195 1 is_stmt 0 view .LVU19
  80 0000 F30F1EFA 		endbr64
1196:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  81              		.loc 1 1196 3 is_stmt 1 view .LVU20
1195:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  82              		.loc 1 1195 1 is_stmt 0 view .LVU21
  83 0004 4157     		pushq	%r15
  84              		.cfi_def_cfa_offset 16
  85              		.cfi_offset 15, -16
  86 0006 4989FF   		movq	%rdi, %r15
  87 0009 4156     		pushq	%r14
  88              		.cfi_def_cfa_offset 24
  89              		.cfi_offset 14, -24
  90 000b 4155     		pushq	%r13
  91              		.cfi_def_cfa_offset 32
  92              		.cfi_offset 13, -32
  93 000d 4154     		pushq	%r12
  94              		.cfi_def_cfa_offset 40
  95              		.cfi_offset 12, -40
  96 000f 55       		pushq	%rbp
  97              		.cfi_def_cfa_offset 48
  98              		.cfi_offset 6, -48
  99 0010 53       		pushq	%rbx
 100              		.cfi_def_cfa_offset 56
 101              		.cfi_offset 3, -56
 102 0011 4883EC38 		subq	$56, %rsp
 103              		.cfi_def_cfa_offset 112
1197:fltk-1.3.4-1/jpeg/jchuff.c ****   int blkn, ci;
1198:fltk-1.3.4-1/jpeg/jchuff.c ****   jpeg_component_info * compptr;
1199:fltk-1.3.4-1/jpeg/jchuff.c **** 
1200:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Take care of restart intervals if needed */
1201:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->restart_interval) {
 104              		.loc 1 1201 12 view .LVU22
 105 0015 8B973C01 		movl	316(%rdi), %edx
 105      0000
1196:fltk-1.3.4-1/jpeg/jchuff.c ****   int blkn, ci;
 106              		.loc 1 1196 20 view .LVU23
 107 001b 488BAF30 		movq	560(%rdi), %rbp
 107      020000
 108              	.LVL8:
1197:fltk-1.3.4-1/jpeg/jchuff.c ****   int blkn, ci;
 109              		.loc 1 1197 3 is_stmt 1 view .LVU24
1198:fltk-1.3.4-1/jpeg/jchuff.c **** 
 110              		.loc 1 1198 3 view .LVU25
 111              		.loc 1 1201 3 view .LVU26
1195:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 112              		.loc 1 1195 1 is_stmt 0 view .LVU27
 113 0022 48897424 		movq	%rsi, 24(%rsp)
 113      18
 114              		.loc 1 1201 6 view .LVU28
 115 0027 85D2     		testl	%edx, %edx
 116 0029 7411     		je	.L6
1202:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 117              		.loc 1 1202 5 is_stmt 1 view .LVU29
 118              		.loc 1 1202 16 is_stmt 0 view .LVU30
 119 002b 8B4538   		movl	56(%rbp), %eax
 120              		.loc 1 1202 8 view .LVU31
 121 002e 85C0     		testl	%eax, %eax
 122 0030 0F84DA01 		je	.L46
 122      0000
 123              	.L7:
1203:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Re-initialize DC predictions to 0 */
1204:fltk-1.3.4-1/jpeg/jchuff.c ****       for (ci = 0; ci < cinfo->comps_in_scan; ci++)
1205:fltk-1.3.4-1/jpeg/jchuff.c **** 	entropy->saved.last_dc_val[ci] = 0;
1206:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Update restart state */
1207:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
1208:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1209:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->restarts_to_go--;
 124              		.loc 1 1209 5 is_stmt 1 view .LVU32
 125              		.loc 1 1209 28 is_stmt 0 view .LVU33
 126 0036 83E801   		subl	$1, %eax
 127 0039 894538   		movl	%eax, 56(%rbp)
 128              	.L6:
 129              	.LVL9:
1210:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1211:fltk-1.3.4-1/jpeg/jchuff.c **** 
1212:fltk-1.3.4-1/jpeg/jchuff.c ****   for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 130              		.loc 1 1212 18 is_stmt 1 discriminator 1 view .LVU34
 131              		.loc 1 1212 3 is_stmt 0 discriminator 1 view .LVU35
 132 003c 418B87A0 		movl	416(%r15), %eax
 132      010000
 133 0043 4531E4   		xorl	%r12d, %r12d
 134 0046 85C0     		testl	%eax, %eax
 135 0048 0F8E9A01 		jle	.L44
 135      0000
 136              	.LVL10:
 137 004e 6690     		.p2align 4,,10
 138              		.p2align 3
 139              	.L10:
1213:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
 140              		.loc 1 1213 5 is_stmt 1 discriminator 3 view .LVU36
1214:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
 141              		.loc 1 1214 5 discriminator 3 view .LVU37
 142              		.loc 1 1214 13 is_stmt 0 discriminator 3 view .LVU38
 143 0050 4B6384A7 		movslq	420(%r15,%r12,4), %rax
 143      A4010000 
 144              	.LBB65:
 145              	.LBB66:
1125:fltk-1.3.4-1/jpeg/jchuff.c ****   const int * natural_order = cinfo->natural_order;
 146              		.loc 1 1125 7 discriminator 3 view .LVU39
 147 0058 458BB7E8 		movl	488(%r15), %r14d
 147      010000
1126:fltk-1.3.4-1/jpeg/jchuff.c **** 
 148              		.loc 1 1126 15 discriminator 3 view .LVU40
 149 005f 4D8B8FE0 		movq	480(%r15), %r9
 149      010000
 150              	.LBE66:
 151              	.LBE65:
 152              		.loc 1 1214 13 discriminator 3 view .LVU41
 153 0066 498BB4C7 		movq	376(%r15,%rax,8), %rsi
 153      78010000 
 154              	.LVL11:
1215:fltk-1.3.4-1/jpeg/jchuff.c ****     htest_one_block(cinfo, MCU_data[blkn][0], entropy->saved.last_dc_val[ci],
 155              		.loc 1 1215 5 is_stmt 1 discriminator 3 view .LVU42
 156 006e 488D4485 		leaq	0(%rbp,%rax,4), %rax
 156      00
 157 0073 48894424 		movq	%rax, 40(%rsp)
 157      28
 158 0078 8B7824   		movl	36(%rax), %edi
 159 007b 488B4424 		movq	24(%rsp), %rax
 159      18
 160 0080 48635618 		movslq	24(%rsi), %rdx
 161 0084 48637614 		movslq	20(%rsi), %rsi
 162              	.LVL12:
 163              		.loc 1 1215 5 is_stmt 0 discriminator 3 view .LVU43
 164 0088 4A8B04E0 		movq	(%rax,%r12,8), %rax
 165 008c 4C8BACD5 		movq	160(%rbp,%rdx,8), %r13
 165      A0000000 
 166 0094 488B9CF5 		movq	128(%rbp,%rsi,8), %rbx
 166      80000000 
 167 009c 48894424 		movq	%rax, 16(%rsp)
 167      10
 168              	.LVL13:
 169              	.LBB70:
 170              	.LBI65:
1119:fltk-1.3.4-1/jpeg/jchuff.c **** 		 long dc_counts[], long ac_counts[])
 171              		.loc 1 1119 1 is_stmt 1 discriminator 3 view .LVU44
 172              	.LBB67:
1122:fltk-1.3.4-1/jpeg/jchuff.c ****   register int nbits;
 173              		.loc 1 1122 3 discriminator 3 view .LVU45
1123:fltk-1.3.4-1/jpeg/jchuff.c ****   register int r, k;
 174              		.loc 1 1123 3 discriminator 3 view .LVU46
1124:fltk-1.3.4-1/jpeg/jchuff.c ****   int Se = cinfo->lim_Se;
 175              		.loc 1 1124 3 discriminator 3 view .LVU47
1125:fltk-1.3.4-1/jpeg/jchuff.c ****   const int * natural_order = cinfo->natural_order;
 176              		.loc 1 1125 3 discriminator 3 view .LVU48
1126:fltk-1.3.4-1/jpeg/jchuff.c **** 
 177              		.loc 1 1126 3 discriminator 3 view .LVU49
1130:fltk-1.3.4-1/jpeg/jchuff.c ****   if (temp < 0)
 178              		.loc 1 1130 3 discriminator 3 view .LVU50
1130:fltk-1.3.4-1/jpeg/jchuff.c ****   if (temp < 0)
 179              		.loc 1 1130 15 is_stmt 0 discriminator 3 view .LVU51
 180 00a1 0FBF00   		movswl	(%rax), %eax
 181              	.LVL14:
1131:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = -temp;
 182              		.loc 1 1131 3 is_stmt 1 discriminator 3 view .LVU52
1131:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = -temp;
 183              		.loc 1 1131 6 is_stmt 0 discriminator 3 view .LVU53
 184 00a4 89C6     		movl	%eax, %esi
 185 00a6 29FE     		subl	%edi, %esi
 186              	.LVL15:
1131:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = -temp;
 187              		.loc 1 1131 6 discriminator 3 view .LVU54
 188 00a8 0F885201 		js	.L11
 188      0000
 189              	.LVL16:
1136:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits++;
 190              		.loc 1 1136 9 is_stmt 1 view .LVU55
 191 00ae 7437     		je	.L13
 192              	.LVL17:
 193              	.L12:
1136:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits++;
 194              		.loc 1 1136 9 is_stmt 0 view .LVU56
 195              	.LBE67:
 196              	.LBE70:
1212:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
 197              		.loc 1 1212 3 view .LVU57
 198 00b0 31C0     		xorl	%eax, %eax
 199              	.LVL18:
 200              		.p2align 4,,10
 201 00b2 660F1F44 		.p2align 3
 201      0000
 202              	.L14:
 203              	.LBB71:
 204              	.LBB68:
1137:fltk-1.3.4-1/jpeg/jchuff.c ****     temp >>= 1;
 205              		.loc 1 1137 5 is_stmt 1 view .LVU58
1137:fltk-1.3.4-1/jpeg/jchuff.c ****     temp >>= 1;
 206              		.loc 1 1137 10 is_stmt 0 view .LVU59
 207 00b8 83C001   		addl	$1, %eax
 208              	.LVL19:
1138:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 209              		.loc 1 1138 5 is_stmt 1 view .LVU60
1136:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits++;
 210              		.loc 1 1136 9 view .LVU61
 211 00bb D1FE     		sarl	%esi
 212              	.LVL20:
1136:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits++;
 213              		.loc 1 1136 9 is_stmt 0 view .LVU62
 214 00bd 75F9     		jne	.L14
1143:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 215              		.loc 1 1143 3 is_stmt 1 view .LVU63
 216 00bf 4863F0   		movslq	%eax, %rsi
 217              	.LVL21:
1143:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 218              		.loc 1 1143 3 is_stmt 0 view .LVU64
 219 00c2 488D1CF3 		leaq	(%rbx,%rsi,8), %rbx
 220              	.LVL22:
1143:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 221              		.loc 1 1143 6 view .LVU65
 222 00c6 83F80B   		cmpl	$11, %eax
 223 00c9 7E1C     		jle	.L13
1144:fltk-1.3.4-1/jpeg/jchuff.c **** 
 224              		.loc 1 1144 5 view .LVU66
 225 00cb 498B07   		movq	(%r15), %rax
 226              	.LVL23:
1144:fltk-1.3.4-1/jpeg/jchuff.c **** 
 227              		.loc 1 1144 5 view .LVU67
 228 00ce 4C894C24 		movq	%r9, 8(%rsp)
 228      08
1144:fltk-1.3.4-1/jpeg/jchuff.c **** 
 229              		.loc 1 1144 5 is_stmt 1 view .LVU68
 230 00d3 4C89FF   		movq	%r15, %rdi
 231              	.LVL24:
1144:fltk-1.3.4-1/jpeg/jchuff.c **** 
 232              		.loc 1 1144 5 is_stmt 0 view .LVU69
 233 00d6 C7402806 		movl	$6, 40(%rax)
 233      000000
 234              	.LVL25:
1144:fltk-1.3.4-1/jpeg/jchuff.c **** 
 235              		.loc 1 1144 5 view .LVU70
 236 00dd 498B07   		movq	(%r15), %rax
 237 00e0 FF10     		call	*(%rax)
 238              	.LVL26:
1144:fltk-1.3.4-1/jpeg/jchuff.c **** 
 239              		.loc 1 1144 5 view .LVU71
 240 00e2 4C8B4C24 		movq	8(%rsp), %r9
 240      08
 241              	.LVL27:
 242              	.L13:
1147:fltk-1.3.4-1/jpeg/jchuff.c **** 
 243              		.loc 1 1147 3 is_stmt 1 view .LVU72
1147:fltk-1.3.4-1/jpeg/jchuff.c **** 
 244              		.loc 1 1147 19 is_stmt 0 view .LVU73
 245 00e7 48830301 		addq	$1, (%rbx)
1151:fltk-1.3.4-1/jpeg/jchuff.c **** 
 246              		.loc 1 1151 3 is_stmt 1 view .LVU74
 247              	.LVL28:
1153:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = block[natural_order[k]]) == 0) {
 248              		.loc 1 1153 3 view .LVU75
1153:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = block[natural_order[k]]) == 0) {
 249              		.loc 1 1153 15 view .LVU76
1153:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = block[natural_order[k]]) == 0) {
 250              		.loc 1 1153 3 is_stmt 0 view .LVU77
 251 00eb 4585F6   		testl	%r14d, %r14d
 252 00ee 0F8ECF00 		jle	.L16
 252      0000
 253 00f4 418D46FF 		leal	-1(%r14), %eax
 254 00f8 498D7104 		leaq	4(%r9), %rsi
1151:fltk-1.3.4-1/jpeg/jchuff.c **** 
 255              		.loc 1 1151 5 view .LVU78
 256 00fc 31DB     		xorl	%ebx, %ebx
 257 00fe 498D4481 		leaq	8(%r9,%rax,4), %rax
 257      08
 258 0103 48894424 		movq	%rax, 32(%rsp)
 258      20
 259 0108 EB18     		jmp	.L23
 260              	.LVL29:
 261 010a 660F1F44 		.p2align 4,,10
 261      0000
 262              		.p2align 3
 263              	.L17:
1155:fltk-1.3.4-1/jpeg/jchuff.c ****     } else {
 264              		.loc 1 1155 7 is_stmt 1 view .LVU79
1155:fltk-1.3.4-1/jpeg/jchuff.c ****     } else {
 265              		.loc 1 1155 8 is_stmt 0 view .LVU80
 266 0110 83C301   		addl	$1, %ebx
 267              	.LVL30:
1153:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = block[natural_order[k]]) == 0) {
 268              		.loc 1 1153 24 is_stmt 1 view .LVU81
1153:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = block[natural_order[k]]) == 0) {
 269              		.loc 1 1153 15 view .LVU82
 270 0113 4883C604 		addq	$4, %rsi
1153:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = block[natural_order[k]]) == 0) {
 271              		.loc 1 1153 3 is_stmt 0 view .LVU83
 272 0117 483B7424 		cmpq	32(%rsp), %rsi
 272      20
 273 011c 0F849800 		je	.L47
 273      0000
 274              	.LVL31:
 275              	.L23:
1154:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 276              		.loc 1 1154 5 is_stmt 1 view .LVU84
1154:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 277              		.loc 1 1154 36 is_stmt 0 view .LVU85
 278 0122 486306   		movslq	(%rsi), %rax
1154:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 279              		.loc 1 1154 22 view .LVU86
 280 0125 488B4C24 		movq	16(%rsp), %rcx
 280      10
 281 012a 0FB70441 		movzwl	(%rcx,%rax,2), %eax
 282              	.LVL32:
1154:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 283              		.loc 1 1154 8 view .LVU87
 284 012e 6685C0   		testw	%ax, %ax
 285 0131 74DD     		je	.L17
1158:fltk-1.3.4-1/jpeg/jchuff.c **** 	ac_counts[0xF0]++;
 286              		.loc 1 1158 13 is_stmt 1 view .LVU88
 287 0133 83FB0F   		cmpl	$15, %ebx
 288 0136 7E1E     		jle	.L19
 289              	.LVL33:
1159:fltk-1.3.4-1/jpeg/jchuff.c **** 	r -= 16;
 290              		.loc 1 1159 2 view .LVU89
1160:fltk-1.3.4-1/jpeg/jchuff.c ****       }
 291              		.loc 1 1160 2 view .LVU90
1158:fltk-1.3.4-1/jpeg/jchuff.c **** 	ac_counts[0xF0]++;
 292              		.loc 1 1158 13 view .LVU91
 293 0138 83EB10   		subl	$16, %ebx
 294 013b 4D8B8D80 		movq	1920(%r13), %r9
 294      070000
 295 0142 89DF     		movl	%ebx, %edi
 296 0144 83E30F   		andl	$15, %ebx
 297 0147 C1EF04   		shrl	$4, %edi
 298 014a 498D7C39 		leaq	1(%r9,%rdi), %rdi
 298      01
 299 014f 4989BD80 		movq	%rdi, 1920(%r13)
 299      070000
 300              	.L19:
1164:fltk-1.3.4-1/jpeg/jchuff.c **** 	temp = -temp;
 301              		.loc 1 1164 7 view .LVU92
 302 0156 89C7     		movl	%eax, %edi
1169:fltk-1.3.4-1/jpeg/jchuff.c **** 	nbits++;
 303              		.loc 1 1169 13 is_stmt 0 view .LVU93
 304 0158 41BE0100 		movl	$1, %r14d
 304      0000
 305 015e 66C1FF0F 		sarw	$15, %di
 306 0162 31F8     		xorl	%edi, %eax
 307              	.LVL34:
1169:fltk-1.3.4-1/jpeg/jchuff.c **** 	nbits++;
 308              		.loc 1 1169 13 view .LVU94
 309 0164 29F8     		subl	%edi, %eax
 310 0166 0FB7C0   		movzwl	%ax, %eax
 311              	.LVL35:
1169:fltk-1.3.4-1/jpeg/jchuff.c **** 	nbits++;
 312              		.loc 1 1169 13 is_stmt 1 view .LVU95
1169:fltk-1.3.4-1/jpeg/jchuff.c **** 	nbits++;
 313              		.loc 1 1169 13 is_stmt 0 view .LVU96
 314 0169 D1F8     		sarl	%eax
 315              	.LVL36:
1169:fltk-1.3.4-1/jpeg/jchuff.c **** 	nbits++;
 316              		.loc 1 1169 13 view .LVU97
 317 016b 742D     		je	.L21
 318              	.LVL37:
 319 016d 0F1F00   		.p2align 4,,10
 320              		.p2align 3
 321              	.L22:
1170:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Check for out-of-range coefficient values */
 322              		.loc 1 1170 2 is_stmt 1 view .LVU98
1170:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Check for out-of-range coefficient values */
 323              		.loc 1 1170 7 is_stmt 0 view .LVU99
 324 0170 4183C601 		addl	$1, %r14d
 325              	.LVL38:
1169:fltk-1.3.4-1/jpeg/jchuff.c **** 	nbits++;
 326              		.loc 1 1169 13 is_stmt 1 view .LVU100
1169:fltk-1.3.4-1/jpeg/jchuff.c **** 	nbits++;
 327              		.loc 1 1169 13 is_stmt 0 view .LVU101
 328 0174 D1F8     		sarl	%eax
 329              	.LVL39:
1169:fltk-1.3.4-1/jpeg/jchuff.c **** 	nbits++;
 330              		.loc 1 1169 13 view .LVU102
 331 0176 75F8     		jne	.L22
1172:fltk-1.3.4-1/jpeg/jchuff.c **** 	ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 332              		.loc 1 1172 7 is_stmt 1 view .LVU103
1172:fltk-1.3.4-1/jpeg/jchuff.c **** 	ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 333              		.loc 1 1172 10 is_stmt 0 view .LVU104
 334 0178 4183FE0A 		cmpl	$10, %r14d
 335 017c 7E1C     		jle	.L21
1173:fltk-1.3.4-1/jpeg/jchuff.c **** 
 336              		.loc 1 1173 2 view .LVU105
 337 017e 498B07   		movq	(%r15), %rax
 338              	.LVL40:
1173:fltk-1.3.4-1/jpeg/jchuff.c **** 
 339              		.loc 1 1173 2 view .LVU106
 340 0181 48897424 		movq	%rsi, 8(%rsp)
 340      08
1173:fltk-1.3.4-1/jpeg/jchuff.c **** 
 341              		.loc 1 1173 2 is_stmt 1 view .LVU107
 342 0186 4C89FF   		movq	%r15, %rdi
 343 0189 C7402806 		movl	$6, 40(%rax)
 343      000000
 344 0190 498B07   		movq	(%r15), %rax
 345 0193 FF10     		call	*(%rax)
 346              	.LVL41:
 347 0195 488B7424 		movq	8(%rsp), %rsi
 347      08
 348              	.LVL42:
 349              	.L21:
1176:fltk-1.3.4-1/jpeg/jchuff.c **** 
 350              		.loc 1 1176 7 view .LVU108
1176:fltk-1.3.4-1/jpeg/jchuff.c **** 
 351              		.loc 1 1176 20 is_stmt 0 view .LVU109
 352 019a C1E304   		sall	$4, %ebx
 353 019d 4883C604 		addq	$4, %rsi
1176:fltk-1.3.4-1/jpeg/jchuff.c **** 
 354              		.loc 1 1176 26 view .LVU110
 355 01a1 4401F3   		addl	%r14d, %ebx
 356 01a4 4863DB   		movslq	%ebx, %rbx
1176:fltk-1.3.4-1/jpeg/jchuff.c **** 
 357              		.loc 1 1176 34 view .LVU111
 358 01a7 498344DD 		addq	$1, 0(%r13,%rbx,8)
 358      0001
1178:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 359              		.loc 1 1178 7 is_stmt 1 view .LVU112
 360              	.LVL43:
1178:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 361              		.loc 1 1178 9 is_stmt 0 view .LVU113
 362 01ad 31DB     		xorl	%ebx, %ebx
 363              	.LVL44:
1153:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = block[natural_order[k]]) == 0) {
 364              		.loc 1 1153 24 is_stmt 1 view .LVU114
1153:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = block[natural_order[k]]) == 0) {
 365              		.loc 1 1153 15 view .LVU115
1153:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = block[natural_order[k]]) == 0) {
 366              		.loc 1 1153 3 is_stmt 0 view .LVU116
 367 01af 483B7424 		cmpq	32(%rsp), %rsi
 367      20
 368 01b4 0F8568FF 		jne	.L23
 368      FFFF
 369              	.L47:
1183:fltk-1.3.4-1/jpeg/jchuff.c ****     ac_counts[0]++;
 370              		.loc 1 1183 3 is_stmt 1 view .LVU117
1183:fltk-1.3.4-1/jpeg/jchuff.c ****     ac_counts[0]++;
 371              		.loc 1 1183 6 is_stmt 0 view .LVU118
 372 01ba 85DB     		testl	%ebx, %ebx
 373 01bc 7405     		je	.L16
1184:fltk-1.3.4-1/jpeg/jchuff.c **** }
 374              		.loc 1 1184 5 is_stmt 1 view .LVU119
1184:fltk-1.3.4-1/jpeg/jchuff.c **** }
 375              		.loc 1 1184 17 is_stmt 0 view .LVU120
 376 01be 49834500 		addq	$1, 0(%r13)
 376      01
 377              	.LVL45:
 378              	.L16:
1184:fltk-1.3.4-1/jpeg/jchuff.c **** }
 379              		.loc 1 1184 17 view .LVU121
 380              	.LBE68:
 381              	.LBE71:
1216:fltk-1.3.4-1/jpeg/jchuff.c **** 		    entropy->dc_count_ptrs[compptr->dc_tbl_no],
1217:fltk-1.3.4-1/jpeg/jchuff.c **** 		    entropy->ac_count_ptrs[compptr->ac_tbl_no]);
1218:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->saved.last_dc_val[ci] = MCU_data[blkn][0][0];
 382              		.loc 1 1218 5 is_stmt 1 view .LVU122
 383              		.loc 1 1218 55 is_stmt 0 view .LVU123
 384 01c3 488B4424 		movq	24(%rsp), %rax
 384      18
 385 01c8 488B4C24 		movq	40(%rsp), %rcx
 385      28
 386 01cd 4A8B04E0 		movq	(%rax,%r12,8), %rax
 387 01d1 4983C401 		addq	$1, %r12
 388              	.LVL46:
 389              		.loc 1 1218 55 view .LVU124
 390 01d5 0FBF00   		movswl	(%rax), %eax
 391 01d8 894124   		movl	%eax, 36(%rcx)
1212:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
 392              		.loc 1 1212 47 is_stmt 1 view .LVU125
1212:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
 393              		.loc 1 1212 18 view .LVU126
1212:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
 394              		.loc 1 1212 3 is_stmt 0 view .LVU127
 395 01db 4539A7A0 		cmpl	%r12d, 416(%r15)
 395      010000
 396 01e2 0F8F68FE 		jg	.L10
 396      FFFF
 397              	.L44:
1219:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1220:fltk-1.3.4-1/jpeg/jchuff.c **** 
1221:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
1222:fltk-1.3.4-1/jpeg/jchuff.c **** }
 398              		.loc 1 1222 1 view .LVU128
 399 01e8 4883C438 		addq	$56, %rsp
 400              		.cfi_remember_state
 401              		.cfi_def_cfa_offset 56
 402 01ec B8010000 		movl	$1, %eax
 402      00
 403 01f1 5B       		popq	%rbx
 404              		.cfi_def_cfa_offset 48
 405 01f2 5D       		popq	%rbp
 406              		.cfi_def_cfa_offset 40
 407              	.LVL47:
 408              		.loc 1 1222 1 view .LVU129
 409 01f3 415C     		popq	%r12
 410              		.cfi_def_cfa_offset 32
 411 01f5 415D     		popq	%r13
 412              		.cfi_def_cfa_offset 24
 413 01f7 415E     		popq	%r14
 414              		.cfi_def_cfa_offset 16
 415 01f9 415F     		popq	%r15
 416              		.cfi_def_cfa_offset 8
 417              	.LVL48:
 418              		.loc 1 1222 1 view .LVU130
 419 01fb C3       		ret
 420              	.LVL49:
 421 01fc 0F1F4000 		.p2align 4,,10
 422              		.p2align 3
 423              	.L11:
 424              		.cfi_restore_state
 425              	.LBB72:
 426              	.LBB69:
1132:fltk-1.3.4-1/jpeg/jchuff.c **** 
 427              		.loc 1 1132 5 is_stmt 1 view .LVU131
1136:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits++;
 428              		.loc 1 1136 9 view .LVU132
 429 0200 89FE     		movl	%edi, %esi
 430 0202 29C6     		subl	%eax, %esi
 431              	.LVL50:
1136:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits++;
 432              		.loc 1 1136 9 is_stmt 0 view .LVU133
 433 0204 0F85A6FE 		jne	.L12
 433      FFFF
 434 020a E9D8FEFF 		jmp	.L13
 434      FF
 435              	.LVL51:
 436 020f 90       		.p2align 4,,10
 437              		.p2align 3
 438              	.L46:
1136:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits++;
 439              		.loc 1 1136 9 view .LVU134
 440              	.LBE69:
 441              	.LBE72:
1204:fltk-1.3.4-1/jpeg/jchuff.c **** 	entropy->saved.last_dc_val[ci] = 0;
 442              		.loc 1 1204 20 is_stmt 1 view .LVU135
1204:fltk-1.3.4-1/jpeg/jchuff.c **** 	entropy->saved.last_dc_val[ci] = 0;
 443              		.loc 1 1204 7 is_stmt 0 view .LVU136
 444 0210 8B8F7401 		movl	372(%rdi), %ecx
 444      0000
 445 0216 85C9     		testl	%ecx, %ecx
 446 0218 7E23     		jle	.L26
 447 021a 31C0     		xorl	%eax, %eax
 448              	.LVL52:
 449              	.L9:
1205:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Update restart state */
 450              		.loc 1 1205 2 is_stmt 1 discriminator 3 view .LVU137
1205:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Update restart state */
 451              		.loc 1 1205 33 is_stmt 0 discriminator 3 view .LVU138
 452 021c C7448524 		movl	$0, 36(%rbp,%rax,4)
 452      00000000 
1204:fltk-1.3.4-1/jpeg/jchuff.c **** 	entropy->saved.last_dc_val[ci] = 0;
 453              		.loc 1 1204 47 is_stmt 1 discriminator 3 view .LVU139
 454              	.LVL53:
1204:fltk-1.3.4-1/jpeg/jchuff.c **** 	entropy->saved.last_dc_val[ci] = 0;
 455              		.loc 1 1204 20 discriminator 3 view .LVU140
 456 0224 4883C001 		addq	$1, %rax
 457              	.LVL54:
1204:fltk-1.3.4-1/jpeg/jchuff.c **** 	entropy->saved.last_dc_val[ci] = 0;
 458              		.loc 1 1204 7 is_stmt 0 discriminator 3 view .LVU141
 459 0228 41398774 		cmpl	%eax, 372(%r15)
 459      010000
 460 022f 7FEB     		jg	.L9
 461 0231 418B873C 		movl	316(%r15), %eax
 461      010000
 462 0238 E9F9FDFF 		jmp	.L7
 462      FF
 463              	.LVL55:
 464              	.L26:
1204:fltk-1.3.4-1/jpeg/jchuff.c **** 	entropy->saved.last_dc_val[ci] = 0;
 465              		.loc 1 1204 7 view .LVU142
 466 023d 89D0     		movl	%edx, %eax
1207:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 467              		.loc 1 1207 7 is_stmt 1 view .LVU143
 468 023f E9F2FDFF 		jmp	.L7
 468      FF
 469              		.cfi_endproc
 470              	.LFE72:
 472              		.section	.text.jpeg_make_c_derived_tbl,"ax",@progbits
 473              		.p2align 4
 475              	jpeg_make_c_derived_tbl:
 476              	.LVL56:
 477              	.LFB51:
 163:fltk-1.3.4-1/jpeg/jchuff.c ****   JHUFF_TBL *htbl;
 478              		.loc 1 163 1 view -0
 479              		.cfi_startproc
 163:fltk-1.3.4-1/jpeg/jchuff.c ****   JHUFF_TBL *htbl;
 480              		.loc 1 163 1 is_stmt 0 view .LVU145
 481 0000 4157     		pushq	%r15
 482              		.cfi_def_cfa_offset 16
 483              		.cfi_offset 15, -16
 484 0002 4156     		pushq	%r14
 485              		.cfi_def_cfa_offset 24
 486              		.cfi_offset 14, -24
 487 0004 4155     		pushq	%r13
 488              		.cfi_def_cfa_offset 32
 489              		.cfi_offset 13, -32
 490 0006 4154     		pushq	%r12
 491              		.cfi_def_cfa_offset 40
 492              		.cfi_offset 12, -40
 493 0008 4989CC   		movq	%rcx, %r12
 494 000b 55       		pushq	%rbp
 495              		.cfi_def_cfa_offset 48
 496              		.cfi_offset 6, -48
 497 000c 4889FD   		movq	%rdi, %rbp
 498 000f 53       		pushq	%rbx
 499              		.cfi_def_cfa_offset 56
 500              		.cfi_offset 3, -56
 501 0010 89D3     		movl	%edx, %ebx
 502 0012 4881EC48 		subq	$1352, %rsp
 502      050000
 503              		.cfi_def_cfa_offset 1408
 163:fltk-1.3.4-1/jpeg/jchuff.c ****   JHUFF_TBL *htbl;
 504              		.loc 1 163 1 view .LVU146
 505 0019 8974241C 		movl	%esi, 28(%rsp)
 506 001d 64488B04 		movq	%fs:40, %rax
 506      25280000 
 506      00
 507 0026 48898424 		movq	%rax, 1336(%rsp)
 507      38050000 
 508 002e 31C0     		xorl	%eax, %eax
 164:fltk-1.3.4-1/jpeg/jchuff.c ****   c_derived_tbl *dtbl;
 509              		.loc 1 164 3 is_stmt 1 view .LVU147
 165:fltk-1.3.4-1/jpeg/jchuff.c ****   int p, i, l, lastp, si, maxsymbol;
 510              		.loc 1 165 3 view .LVU148
 166:fltk-1.3.4-1/jpeg/jchuff.c ****   char huffsize[257];
 511              		.loc 1 166 3 view .LVU149
 167:fltk-1.3.4-1/jpeg/jchuff.c ****   unsigned int huffcode[257];
 512              		.loc 1 167 3 view .LVU150
 168:fltk-1.3.4-1/jpeg/jchuff.c ****   unsigned int code;
 513              		.loc 1 168 3 view .LVU151
 169:fltk-1.3.4-1/jpeg/jchuff.c **** 
 514              		.loc 1 169 3 view .LVU152
 176:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 515              		.loc 1 176 3 view .LVU153
 176:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 516              		.loc 1 176 6 is_stmt 0 view .LVU154
 517 0030 83FA03   		cmpl	$3, %edx
 518 0033 7615     		jbe	.L49
 177:fltk-1.3.4-1/jpeg/jchuff.c ****   htbl =
 519              		.loc 1 177 5 is_stmt 1 view .LVU155
 520 0035 488B07   		movq	(%rdi), %rax
 521 0038 C7402834 		movl	$52, 40(%rax)
 521      000000
 522 003f 488B07   		movq	(%rdi), %rax
 523 0042 89502C   		movl	%edx, 44(%rax)
 524 0045 488B07   		movq	(%rdi), %rax
 525 0048 FF10     		call	*(%rax)
 526              	.LVL57:
 527              	.L49:
 178:fltk-1.3.4-1/jpeg/jchuff.c ****     isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 528              		.loc 1 178 3 view .LVU156
 179:fltk-1.3.4-1/jpeg/jchuff.c ****   if (htbl == NULL)
 529              		.loc 1 179 43 is_stmt 0 view .LVU157
 530 004a 8B54241C 		movl	28(%rsp), %edx
 531 004e 4863C3   		movslq	%ebx, %rax
 532 0051 85D2     		testl	%edx, %edx
 533 0053 0F847E02 		je	.L50
 533      0000
 179:fltk-1.3.4-1/jpeg/jchuff.c ****   if (htbl == NULL)
 534              		.loc 1 179 43 discriminator 1 view .LVU158
 535 0059 488B84C5 		movq	160(%rbp,%rax,8), %rax
 535      A0000000 
 536 0061 48890424 		movq	%rax, (%rsp)
 537              	.LVL58:
 180:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 538              		.loc 1 180 3 is_stmt 1 discriminator 1 view .LVU159
 180:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 539              		.loc 1 180 6 is_stmt 0 discriminator 1 view .LVU160
 540 0065 48833C24 		cmpq	$0, (%rsp)
 540      00
 541 006a 0F847E02 		je	.L92
 541      0000
 542              	.L52:
 184:fltk-1.3.4-1/jpeg/jchuff.c ****     *pdtbl = (c_derived_tbl *)
 543              		.loc 1 184 3 is_stmt 1 view .LVU161
 184:fltk-1.3.4-1/jpeg/jchuff.c ****     *pdtbl = (c_derived_tbl *)
 544              		.loc 1 184 7 is_stmt 0 view .LVU162
 545 0070 498B1C24 		movq	(%r12), %rbx
 546              	.LVL59:
 184:fltk-1.3.4-1/jpeg/jchuff.c ****     *pdtbl = (c_derived_tbl *)
 547              		.loc 1 184 6 view .LVU163
 548 0074 4885DB   		testq	%rbx, %rbx
 549 0077 0F849902 		je	.L93
 549      0000
 550              	.LVL60:
 551              	.L53:
 188:fltk-1.3.4-1/jpeg/jchuff.c ****   
 552              		.loc 1 188 3 is_stmt 1 view .LVU164
 192:fltk-1.3.4-1/jpeg/jchuff.c ****   for (l = 1; l <= 16; l++) {
 553              		.loc 1 192 3 view .LVU165
 193:fltk-1.3.4-1/jpeg/jchuff.c ****     i = (int) htbl->bits[l];
 554              		.loc 1 193 3 view .LVU166
 193:fltk-1.3.4-1/jpeg/jchuff.c ****     i = (int) htbl->bits[l];
 555              		.loc 1 193 15 view .LVU167
 194:fltk-1.3.4-1/jpeg/jchuff.c ****     if (i < 0 || p + i > 256)	/* protect against table overrun */
 556              		.loc 1 194 5 view .LVU168
 194:fltk-1.3.4-1/jpeg/jchuff.c ****     if (i < 0 || p + i > 256)	/* protect against table overrun */
 557              		.loc 1 194 7 is_stmt 0 view .LVU169
 558 007d 488B0424 		movq	(%rsp), %rax
 559 0081 41BE0100 		movl	$1, %r14d
 559      0000
 192:fltk-1.3.4-1/jpeg/jchuff.c ****   for (l = 1; l <= 16; l++) {
 560              		.loc 1 192 5 view .LVU170
 561 0087 4531ED   		xorl	%r13d, %r13d
 562 008a 4C8DA424 		leaq	1072(%rsp), %r12
 562      30040000 
 563              	.LVL61:
 194:fltk-1.3.4-1/jpeg/jchuff.c ****     if (i < 0 || p + i > 256)	/* protect against table overrun */
 564              		.loc 1 194 7 view .LVU171
 565 0092 440FB678 		movzbl	1(%rax), %r15d
 565      01
 566              	.LVL62:
 195:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 567              		.loc 1 195 5 is_stmt 1 view .LVU172
 568 0097 660F1F84 		.p2align 4,,10
 568      00000000 
 568      00
 569              		.p2align 3
 570              	.L54:
 197:fltk-1.3.4-1/jpeg/jchuff.c ****       huffsize[p++] = (char) l;
 571              		.loc 1 197 11 view .LVU173
 197:fltk-1.3.4-1/jpeg/jchuff.c ****       huffsize[p++] = (char) l;
 572              		.loc 1 197 13 is_stmt 0 view .LVU174
 573 00a0 418D7FFF 		leal	-1(%r15), %edi
 574              	.LVL63:
 197:fltk-1.3.4-1/jpeg/jchuff.c ****       huffsize[p++] = (char) l;
 575              		.loc 1 197 11 view .LVU175
 576 00a4 4585FF   		testl	%r15d, %r15d
 577 00a7 742F     		je	.L56
 578 00a9 4963D5   		movslq	%r13d, %rdx
 579 00ac 4189F9   		movl	%edi, %r9d
 580 00af 4489F1   		movl	%r14d, %ecx
 581 00b2 498D0414 		leaq	(%r12,%rdx), %rax
 582 00b6 488D9414 		leaq	1073(%rsp,%rdx), %rdx
 582      31040000 
 583 00be 4C01CA   		addq	%r9, %rdx
 584              	.LVL64:
 585              		.p2align 4,,10
 586 00c1 0F1F8000 		.p2align 3
 586      000000
 587              	.L57:
 198:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 588              		.loc 1 198 7 is_stmt 1 view .LVU176
 198:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 589              		.loc 1 198 21 is_stmt 0 view .LVU177
 590 00c8 8808     		movb	%cl, (%rax)
 197:fltk-1.3.4-1/jpeg/jchuff.c ****       huffsize[p++] = (char) l;
 591              		.loc 1 197 11 is_stmt 1 view .LVU178
 592              	.LVL65:
 197:fltk-1.3.4-1/jpeg/jchuff.c ****       huffsize[p++] = (char) l;
 593              		.loc 1 197 11 is_stmt 0 view .LVU179
 594 00ca 4883C001 		addq	$1, %rax
 595              	.LVL66:
 197:fltk-1.3.4-1/jpeg/jchuff.c ****       huffsize[p++] = (char) l;
 596              		.loc 1 197 11 view .LVU180
 597 00ce 4839D0   		cmpq	%rdx, %rax
 598 00d1 75F5     		jne	.L57
 599 00d3 458D6C3D 		leal	1(%r13,%rdi), %r13d
 599      01
 600              	.L56:
 193:fltk-1.3.4-1/jpeg/jchuff.c ****     i = (int) htbl->bits[l];
 601              		.loc 1 193 24 is_stmt 1 discriminator 2 view .LVU181
 602              	.LVL67:
 193:fltk-1.3.4-1/jpeg/jchuff.c ****     i = (int) htbl->bits[l];
 603              		.loc 1 193 15 discriminator 2 view .LVU182
 193:fltk-1.3.4-1/jpeg/jchuff.c ****     i = (int) htbl->bits[l];
 604              		.loc 1 193 3 is_stmt 0 discriminator 2 view .LVU183
 605 00d8 4983FE10 		cmpq	$16, %r14
 606 00dc 742F     		je	.L94
 194:fltk-1.3.4-1/jpeg/jchuff.c ****     if (i < 0 || p + i > 256)	/* protect against table overrun */
 607              		.loc 1 194 5 is_stmt 1 view .LVU184
 194:fltk-1.3.4-1/jpeg/jchuff.c ****     if (i < 0 || p + i > 256)	/* protect against table overrun */
 608              		.loc 1 194 7 is_stmt 0 view .LVU185
 609 00de 488B0424 		movq	(%rsp), %rax
 610 00e2 460FB67C 		movzbl	1(%rax,%r14), %r15d
 610      3001
 611              	.LVL68:
 195:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 612              		.loc 1 195 5 is_stmt 1 view .LVU186
 195:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 613              		.loc 1 195 20 is_stmt 0 view .LVU187
 614 00e8 438D042F 		leal	(%r15,%r13), %eax
 195:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 615              		.loc 1 195 15 view .LVU188
 616 00ec 3D000100 		cmpl	$256, %eax
 616      00
 617 00f1 7E14     		jle	.L55
 196:fltk-1.3.4-1/jpeg/jchuff.c ****     while (i--)
 618              		.loc 1 196 7 is_stmt 1 view .LVU189
 619 00f3 488B4500 		movq	0(%rbp), %rax
 620 00f7 4889EF   		movq	%rbp, %rdi
 621 00fa C7402809 		movl	$9, 40(%rax)
 621      000000
 622 0101 488B4500 		movq	0(%rbp), %rax
 623 0105 FF10     		call	*(%rax)
 624              	.LVL69:
 625              	.L55:
 196:fltk-1.3.4-1/jpeg/jchuff.c ****     while (i--)
 626              		.loc 1 196 7 is_stmt 0 view .LVU190
 627 0107 4983C601 		addq	$1, %r14
 628              	.LVL70:
 196:fltk-1.3.4-1/jpeg/jchuff.c ****     while (i--)
 629              		.loc 1 196 7 view .LVU191
 630 010b EB93     		jmp	.L54
 631              	.LVL71:
 632              	.L94:
 200:fltk-1.3.4-1/jpeg/jchuff.c ****   lastp = p;
 633              		.loc 1 200 3 is_stmt 1 view .LVU192
 200:fltk-1.3.4-1/jpeg/jchuff.c ****   lastp = p;
 634              		.loc 1 200 15 is_stmt 0 view .LVU193
 635 010d 4963C5   		movslq	%r13d, %rax
 636 0110 C6840430 		movb	$0, 1072(%rsp,%rax)
 636      04000000 
 201:fltk-1.3.4-1/jpeg/jchuff.c ****   
 637              		.loc 1 201 3 is_stmt 1 view .LVU194
 638              	.LVL72:
 206:fltk-1.3.4-1/jpeg/jchuff.c ****   si = huffsize[0];
 639              		.loc 1 206 3 view .LVU195
 207:fltk-1.3.4-1/jpeg/jchuff.c ****   p = 0;
 640              		.loc 1 207 3 view .LVU196
 207:fltk-1.3.4-1/jpeg/jchuff.c ****   p = 0;
 641              		.loc 1 207 16 is_stmt 0 view .LVU197
 642 0118 0FB68C24 		movzbl	1072(%rsp), %ecx
 642      30040000 
 643 0120 4189CC   		movl	%ecx, %r12d
 644              	.LVL73:
 208:fltk-1.3.4-1/jpeg/jchuff.c ****   while (huffsize[p]) {
 645              		.loc 1 208 3 is_stmt 1 view .LVU198
 209:fltk-1.3.4-1/jpeg/jchuff.c ****     while (((int) huffsize[p]) == si) {
 646              		.loc 1 209 3 view .LVU199
 209:fltk-1.3.4-1/jpeg/jchuff.c ****     while (((int) huffsize[p]) == si) {
 647              		.loc 1 209 9 view .LVU200
 648 0123 84C9     		testb	%cl, %cl
 649 0125 0F84A200 		je	.L60
 649      0000
 650 012b 4189C9   		movl	%ecx, %r9d
 206:fltk-1.3.4-1/jpeg/jchuff.c ****   si = huffsize[0];
 651              		.loc 1 206 8 is_stmt 0 view .LVU201
 652 012e 4531FF   		xorl	%r15d, %r15d
 208:fltk-1.3.4-1/jpeg/jchuff.c ****   while (huffsize[p]) {
 653              		.loc 1 208 5 view .LVU202
 654 0131 4531DB   		xorl	%r11d, %r11d
 655 0134 4189CE   		movl	%ecx, %r14d
 656              	.LVL74:
 657 0137 660F1F84 		.p2align 4,,10
 657      00000000 
 657      00
 658              		.p2align 3
 659              	.L59:
 210:fltk-1.3.4-1/jpeg/jchuff.c ****       huffcode[p++] = code;
 660              		.loc 1 210 11 is_stmt 1 view .LVU203
 661 0140 4439F1   		cmpl	%r14d, %ecx
 662 0143 0F856F01 		jne	.L95
 662      0000
 210:fltk-1.3.4-1/jpeg/jchuff.c ****       huffcode[p++] = code;
 663              		.loc 1 210 11 is_stmt 0 view .LVU204
 664 0149 418D4301 		leal	1(%r11), %eax
 665 014d 488DBC24 		leaq	1072(%rsp), %rdi
 665      30040000 
 666 0155 4898     		cltq
 667 0157 4C8D5424 		leaq	32(%rsp), %r10
 667      20
 668 015c 0F1F4000 		.p2align 4,,10
 669              		.p2align 3
 670              	.L61:
 211:fltk-1.3.4-1/jpeg/jchuff.c ****       code++;
 671              		.loc 1 211 7 is_stmt 1 view .LVU205
 672              	.LVL75:
 210:fltk-1.3.4-1/jpeg/jchuff.c ****       huffcode[p++] = code;
 673              		.loc 1 210 27 is_stmt 0 view .LVU206
 674 0160 440FB634 		movzbl	(%rdi,%rax), %r14d
 674      07
 211:fltk-1.3.4-1/jpeg/jchuff.c ****       code++;
 675              		.loc 1 211 21 view .LVU207
 676 0165 45897C82 		movl	%r15d, -4(%r10,%rax,4)
 676      FC
 211:fltk-1.3.4-1/jpeg/jchuff.c ****       code++;
 677              		.loc 1 211 17 view .LVU208
 678 016a 4189C3   		movl	%eax, %r11d
 212:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 679              		.loc 1 212 7 is_stmt 1 view .LVU209
 212:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 680              		.loc 1 212 11 is_stmt 0 view .LVU210
 681 016d 4183C701 		addl	$1, %r15d
 682              	.LVL76:
 210:fltk-1.3.4-1/jpeg/jchuff.c ****       huffcode[p++] = code;
 683              		.loc 1 210 11 is_stmt 1 view .LVU211
 684 0171 4883C001 		addq	$1, %rax
 685              	.LVL77:
 210:fltk-1.3.4-1/jpeg/jchuff.c ****       huffcode[p++] = code;
 686              		.loc 1 210 27 is_stmt 0 view .LVU212
 687 0175 4589F1   		movl	%r14d, %r9d
 210:fltk-1.3.4-1/jpeg/jchuff.c ****       huffcode[p++] = code;
 688              		.loc 1 210 11 view .LVU213
 689 0178 4139CE   		cmpl	%ecx, %r14d
 690 017b 74E3     		je	.L61
 217:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 691              		.loc 1 217 5 is_stmt 1 view .LVU214
 217:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 692              		.loc 1 217 40 is_stmt 0 view .LVU215
 693 017d BF010000 		movl	$1, %edi
 693      00
 217:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 694              		.loc 1 217 10 view .LVU216
 695 0182 4489F8   		movl	%r15d, %eax
 217:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 696              		.loc 1 217 40 view .LVU217
 697 0185 48D3E7   		salq	%cl, %rdi
 217:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 698              		.loc 1 217 8 view .LVU218
 699 0188 4839F8   		cmpq	%rdi, %rax
 700 018b 7C31     		jl	.L62
 701              	.LVL78:
 702              	.L71:
 218:fltk-1.3.4-1/jpeg/jchuff.c ****     code <<= 1;
 703              		.loc 1 218 7 view .LVU219
 704 018d 488B4500 		movq	0(%rbp), %rax
 705 0191 44895C24 		movl	%r11d, 24(%rsp)
 705      18
 706 0196 4889EF   		movq	%rbp, %rdi
 707 0199 44884C24 		movb	%r9b, 20(%rsp)
 707      14
 708 019e C7402809 		movl	$9, 40(%rax)
 708      000000
 709 01a5 488B4500 		movq	0(%rbp), %rax
 710 01a9 894C2408 		movl	%ecx, 8(%rsp)
 218:fltk-1.3.4-1/jpeg/jchuff.c ****     code <<= 1;
 711              		.loc 1 218 7 is_stmt 1 view .LVU220
 712 01ad FF10     		call	*(%rax)
 713              	.LVL79:
 218:fltk-1.3.4-1/jpeg/jchuff.c ****     code <<= 1;
 714              		.loc 1 218 7 is_stmt 0 view .LVU221
 715 01af 448B5C24 		movl	24(%rsp), %r11d
 715      18
 716 01b4 440FB64C 		movzbl	20(%rsp), %r9d
 716      2414
 717 01ba 8B4C2408 		movl	8(%rsp), %ecx
 718              	.LVL80:
 719              	.L62:
 219:fltk-1.3.4-1/jpeg/jchuff.c ****     si++;
 720              		.loc 1 219 5 is_stmt 1 view .LVU222
 219:fltk-1.3.4-1/jpeg/jchuff.c ****     si++;
 721              		.loc 1 219 10 is_stmt 0 view .LVU223
 722 01be 4501FF   		addl	%r15d, %r15d
 723              	.LVL81:
 220:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 724              		.loc 1 220 5 is_stmt 1 view .LVU224
 220:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 725              		.loc 1 220 7 is_stmt 0 view .LVU225
 726 01c1 83C101   		addl	$1, %ecx
 727              	.LVL82:
 209:fltk-1.3.4-1/jpeg/jchuff.c ****     while (((int) huffsize[p]) == si) {
 728              		.loc 1 209 9 is_stmt 1 view .LVU226
 729 01c4 4584C9   		testb	%r9b, %r9b
 730 01c7 0F8573FF 		jne	.L59
 730      FFFF
 731              	.LVL83:
 732              	.L60:
 230:fltk-1.3.4-1/jpeg/jchuff.c **** 
 733              		.loc 1 230 3 view .LVU227
 734              	.LBB73:
 735              	.LBI73:
 736              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h"
   1:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** /* Copyright (C) 2004-2020 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    <https://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifndef _BITS_STRING_FORTIFIED_H
  19:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #define _BITS_STRING_FORTIFIED_H 1
  20:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  21:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifndef _STRING_H
  22:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** # error "Never use <bits/string_fortified.h> directly; include <string.h> instead."
  23:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  24:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  25:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #if !__GNUC_PREREQ (5,0)
  26:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __warndecl (__warn_memset_zero_len,
  27:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  28:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  29:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  30:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  32:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
  33:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  34:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  35:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  36:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  37:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  38:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memmove (void *__dest, const void *__src, size_t __len))
  39:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  40:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  41:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  42:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  43:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifdef __USE_GNU
  44:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  45:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
  46:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 		size_t __len))
  47:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  48:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
  49:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  50:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  51:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  52:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  53:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** /* The first two tests here help to catch a somewhat common problem
  54:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    where the second and third parameter are transposed.  This is
  55:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    especially problematic if the intended fill value is zero.  In this
  56:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    case no work is done at all.  We detect these problems by referring
  57:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    non-existing functions.  */
  58:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  59:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memset (void *__dest, int __ch, size_t __len))
 737              		.loc 2 59 1 view .LVU228
 738              	.LBB74:
  60:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  61:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   /* GCC-5.0 and newer implements these checks in the compiler, so we don't
  62:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****      need them here.  */
  63:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #if !__GNUC_PREREQ (5,0)
  64:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   if (__builtin_constant_p (__len) && __len == 0
  65:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       && (!__builtin_constant_p (__ch) || __ch != 0))
  66:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****     {
  67:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       __warn_memset_zero_len ();
  68:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       return __dest;
  69:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****     }
  70:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  71:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 739              		.loc 2 71 3 view .LVU229
 740              		.loc 2 71 10 is_stmt 0 view .LVU230
 741 01cd 488DBB08 		leaq	1032(%rbx), %rdi
 741      040000
 742 01d4 89D8     		movl	%ebx, %eax
 743 01d6 48C78300 		movq	$0, 1024(%rbx)
 743      04000000 
 743      000000
 744              	.LVL84:
 745              		.loc 2 71 10 view .LVU231
 746 01e1 48C783F8 		movq	$0, 1272(%rbx)
 746      04000000 
 746      000000
 747 01ec 4883E7F8 		andq	$-8, %rdi
 748 01f0 29F8     		subl	%edi, %eax
 749 01f2 8D880005 		leal	1280(%rax), %ecx
 749      0000
 750              	.LVL85:
 751              		.loc 2 71 10 view .LVU232
 752 01f8 31C0     		xorl	%eax, %eax
 753 01fa C1E903   		shrl	$3, %ecx
 754 01fd F348AB   		rep stosq
 755              	.LVL86:
 756              		.loc 2 71 10 view .LVU233
 757              	.LBE74:
 758              	.LBE73:
 237:fltk-1.3.4-1/jpeg/jchuff.c **** 
 759              		.loc 1 237 3 is_stmt 1 view .LVU234
 237:fltk-1.3.4-1/jpeg/jchuff.c **** 
 760              		.loc 1 237 25 is_stmt 0 view .LVU235
 761 0200 837C241C 		cmpl	$1, 28(%rsp)
 761      01
 762 0205 19C0     		sbbl	%eax, %eax
 763 0207 25F00000 		andl	$240, %eax
 763      00
 764 020c 83C00F   		addl	$15, %eax
 765 020f 89442414 		movl	%eax, 20(%rsp)
 766              	.LVL87:
 239:fltk-1.3.4-1/jpeg/jchuff.c ****     i = htbl->huffval[p];
 767              		.loc 1 239 3 is_stmt 1 view .LVU236
 239:fltk-1.3.4-1/jpeg/jchuff.c ****     i = htbl->huffval[p];
 768              		.loc 1 239 15 view .LVU237
 239:fltk-1.3.4-1/jpeg/jchuff.c ****     i = htbl->huffval[p];
 769              		.loc 1 239 3 is_stmt 0 view .LVU238
 770 0213 4585ED   		testl	%r13d, %r13d
 771 0216 7477     		je	.L48
 772 0218 4183ED01 		subl	$1, %r13d
 773              	.LVL88:
 239:fltk-1.3.4-1/jpeg/jchuff.c ****     i = htbl->huffval[p];
 774              		.loc 1 239 3 view .LVU239
 775 021c 4531F6   		xorl	%r14d, %r14d
 776 021f 4C8D5424 		leaq	32(%rsp), %r10
 776      20
 777 0224 EB16     		jmp	.L69
 778              	.LVL89:
 779 0226 662E0F1F 		.p2align 4,,10
 779      84000000 
 779      0000
 780              		.p2align 3
 781              	.L96:
 239:fltk-1.3.4-1/jpeg/jchuff.c ****     i = htbl->huffval[p];
 782              		.loc 1 239 3 view .LVU240
 783 0230 460FB6A4 		movzbl	1073(%rsp,%r14), %r12d
 783      34310400 
 783      00
 784 0239 4989D6   		movq	%rdx, %r14
 785              	.LVL90:
 786              	.L69:
 240:fltk-1.3.4-1/jpeg/jchuff.c ****     if (i < 0 || i > maxsymbol || dtbl->ehufsi[i])
 787              		.loc 1 240 5 is_stmt 1 view .LVU241
 240:fltk-1.3.4-1/jpeg/jchuff.c ****     if (i < 0 || i > maxsymbol || dtbl->ehufsi[i])
 788              		.loc 1 240 7 is_stmt 0 view .LVU242
 789 023c 488B0424 		movq	(%rsp), %rax
 790 0240 460FB67C 		movzbl	17(%rax,%r14), %r15d
 790      3011
 791              	.LVL91:
 241:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 792              		.loc 1 241 5 is_stmt 1 view .LVU243
 241:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 793              		.loc 1 241 8 is_stmt 0 view .LVU244
 794 0246 44397C24 		cmpl	%r15d, 20(%rsp)
 794      14
 795 024b 7C0B     		jl	.L67
 241:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 796              		.loc 1 241 32 discriminator 1 view .LVU245
 797 024d 4280BC3B 		cmpb	$0, 1024(%rbx,%r15)
 797      00040000 
 797      00
 798 0256 741E     		je	.L68
 799              	.L67:
 242:fltk-1.3.4-1/jpeg/jchuff.c ****     dtbl->ehufco[i] = huffcode[p];
 800              		.loc 1 242 7 view .LVU246
 801 0258 488B5500 		movq	0(%rbp), %rdx
 802 025c 4C895424 		movq	%r10, 8(%rsp)
 802      08
 242:fltk-1.3.4-1/jpeg/jchuff.c ****     dtbl->ehufco[i] = huffcode[p];
 803              		.loc 1 242 7 is_stmt 1 view .LVU247
 804 0261 4889EF   		movq	%rbp, %rdi
 805 0264 C7422809 		movl	$9, 40(%rdx)
 805      000000
 806 026b 488B5500 		movq	0(%rbp), %rdx
 807 026f FF12     		call	*(%rdx)
 808              	.LVL92:
 809 0271 4C8B5424 		movq	8(%rsp), %r10
 809      08
 810              	.L68:
 243:fltk-1.3.4-1/jpeg/jchuff.c ****     dtbl->ehufsi[i] = huffsize[p];
 811              		.loc 1 243 5 discriminator 2 view .LVU248
 243:fltk-1.3.4-1/jpeg/jchuff.c ****     dtbl->ehufsi[i] = huffsize[p];
 812              		.loc 1 243 21 is_stmt 0 discriminator 2 view .LVU249
 813 0276 438B14B2 		movl	(%r10,%r14,4), %edx
 814 027a 428914BB 		movl	%edx, (%rbx,%r15,4)
 244:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 815              		.loc 1 244 5 is_stmt 1 discriminator 2 view .LVU250
 816 027e 498D5601 		leaq	1(%r14), %rdx
 244:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 817              		.loc 1 244 21 is_stmt 0 discriminator 2 view .LVU251
 818 0282 4688A43B 		movb	%r12b, 1024(%rbx,%r15)
 818      00040000 
 239:fltk-1.3.4-1/jpeg/jchuff.c ****     i = htbl->huffval[p];
 819              		.loc 1 239 26 is_stmt 1 discriminator 2 view .LVU252
 820              	.LVL93:
 239:fltk-1.3.4-1/jpeg/jchuff.c ****     i = htbl->huffval[p];
 821              		.loc 1 239 15 discriminator 2 view .LVU253
 239:fltk-1.3.4-1/jpeg/jchuff.c ****     i = htbl->huffval[p];
 822              		.loc 1 239 3 is_stmt 0 discriminator 2 view .LVU254
 823 028a 4D39F5   		cmpq	%r14, %r13
 824 028d 75A1     		jne	.L96
 825              	.LVL94:
 826              	.L48:
 246:fltk-1.3.4-1/jpeg/jchuff.c **** 
 827              		.loc 1 246 1 view .LVU255
 828 028f 488B8424 		movq	1336(%rsp), %rax
 828      38050000 
 829 0297 64483304 		xorq	%fs:40, %rax
 829      25280000 
 829      00
 830 02a0 0F858F00 		jne	.L97
 830      0000
 831 02a6 4881C448 		addq	$1352, %rsp
 831      050000
 832              		.cfi_remember_state
 833              		.cfi_def_cfa_offset 56
 834 02ad 5B       		popq	%rbx
 835              		.cfi_def_cfa_offset 48
 836 02ae 5D       		popq	%rbp
 837              		.cfi_def_cfa_offset 40
 838              	.LVL95:
 246:fltk-1.3.4-1/jpeg/jchuff.c **** 
 839              		.loc 1 246 1 view .LVU256
 840 02af 415C     		popq	%r12
 841              		.cfi_def_cfa_offset 32
 842 02b1 415D     		popq	%r13
 843              		.cfi_def_cfa_offset 24
 844 02b3 415E     		popq	%r14
 845              		.cfi_def_cfa_offset 16
 846 02b5 415F     		popq	%r15
 847              		.cfi_def_cfa_offset 8
 848 02b7 C3       		ret
 849              	.LVL96:
 850              	.L95:
 851              		.cfi_restore_state
 217:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 852              		.loc 1 217 5 is_stmt 1 view .LVU257
 217:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 853              		.loc 1 217 40 is_stmt 0 view .LVU258
 854 02b8 BF010000 		movl	$1, %edi
 854      00
 217:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 855              		.loc 1 217 10 view .LVU259
 856 02bd 4489F8   		movl	%r15d, %eax
 217:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 857              		.loc 1 217 40 view .LVU260
 858 02c0 48D3E7   		salq	%cl, %rdi
 217:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 859              		.loc 1 217 8 view .LVU261
 860 02c3 4839F8   		cmpq	%rdi, %rax
 861 02c6 0F8DC1FE 		jge	.L71
 861      FFFF
 219:fltk-1.3.4-1/jpeg/jchuff.c ****     si++;
 862              		.loc 1 219 5 is_stmt 1 view .LVU262
 219:fltk-1.3.4-1/jpeg/jchuff.c ****     si++;
 863              		.loc 1 219 10 is_stmt 0 view .LVU263
 864 02cc 4501FF   		addl	%r15d, %r15d
 865              	.LVL97:
 220:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 866              		.loc 1 220 5 is_stmt 1 view .LVU264
 220:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 867              		.loc 1 220 7 is_stmt 0 view .LVU265
 868 02cf 83C101   		addl	$1, %ecx
 869              	.LVL98:
 209:fltk-1.3.4-1/jpeg/jchuff.c ****     while (((int) huffsize[p]) == si) {
 870              		.loc 1 209 9 is_stmt 1 view .LVU266
 209:fltk-1.3.4-1/jpeg/jchuff.c ****     while (((int) huffsize[p]) == si) {
 871              		.loc 1 209 9 is_stmt 0 view .LVU267
 872 02d2 E969FEFF 		jmp	.L59
 872      FF
 873              	.LVL99:
 874              	.L50:
 179:fltk-1.3.4-1/jpeg/jchuff.c ****   if (htbl == NULL)
 875              		.loc 1 179 43 discriminator 2 view .LVU268
 876 02d7 488B84C5 		movq	192(%rbp,%rax,8), %rax
 876      C0000000 
 877 02df 48890424 		movq	%rax, (%rsp)
 878              	.LVL100:
 180:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 879              		.loc 1 180 3 is_stmt 1 discriminator 2 view .LVU269
 180:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 880              		.loc 1 180 6 is_stmt 0 discriminator 2 view .LVU270
 881 02e3 48833C24 		cmpq	$0, (%rsp)
 881      00
 882 02e8 0F8582FD 		jne	.L52
 882      FFFF
 883              	.L92:
 181:fltk-1.3.4-1/jpeg/jchuff.c **** 
 884              		.loc 1 181 5 is_stmt 1 view .LVU271
 885 02ee 488B4500 		movq	0(%rbp), %rax
 886              	.LVL101:
 181:fltk-1.3.4-1/jpeg/jchuff.c **** 
 887              		.loc 1 181 5 is_stmt 0 view .LVU272
 888 02f2 4889EF   		movq	%rbp, %rdi
 889 02f5 C7402834 		movl	$52, 40(%rax)
 889      000000
 890 02fc 488B4500 		movq	0(%rbp), %rax
 891 0300 89582C   		movl	%ebx, 44(%rax)
 892 0303 488B4500 		movq	0(%rbp), %rax
 893 0307 FF10     		call	*(%rax)
 894              	.LVL102:
 184:fltk-1.3.4-1/jpeg/jchuff.c ****     *pdtbl = (c_derived_tbl *)
 895              		.loc 1 184 3 is_stmt 1 view .LVU273
 184:fltk-1.3.4-1/jpeg/jchuff.c ****     *pdtbl = (c_derived_tbl *)
 896              		.loc 1 184 7 is_stmt 0 view .LVU274
 897 0309 498B1C24 		movq	(%r12), %rbx
 898              	.LVL103:
 184:fltk-1.3.4-1/jpeg/jchuff.c ****     *pdtbl = (c_derived_tbl *)
 899              		.loc 1 184 6 view .LVU275
 900 030d 4885DB   		testq	%rbx, %rbx
 901 0310 0F8567FD 		jne	.L53
 901      FFFF
 902              	.L93:
 185:fltk-1.3.4-1/jpeg/jchuff.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 903              		.loc 1 185 5 is_stmt 1 view .LVU276
 186:fltk-1.3.4-1/jpeg/jchuff.c **** 				  SIZEOF(c_derived_tbl));
 904              		.loc 1 186 8 is_stmt 0 view .LVU277
 905 0316 488B4508 		movq	8(%rbp), %rax
 906 031a BA000500 		movl	$1280, %edx
 906      00
 907 031f BE010000 		movl	$1, %esi
 907      00
 908 0324 4889EF   		movq	%rbp, %rdi
 909 0327 FF10     		call	*(%rax)
 910              	.LVL104:
 185:fltk-1.3.4-1/jpeg/jchuff.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 911              		.loc 1 185 12 view .LVU278
 912 0329 49890424 		movq	%rax, (%r12)
 186:fltk-1.3.4-1/jpeg/jchuff.c **** 				  SIZEOF(c_derived_tbl));
 913              		.loc 1 186 8 view .LVU279
 914 032d 4889C3   		movq	%rax, %rbx
 915 0330 E948FDFF 		jmp	.L53
 915      FF
 916              	.LVL105:
 917              	.L97:
 246:fltk-1.3.4-1/jpeg/jchuff.c **** 
 918              		.loc 1 246 1 view .LVU280
 919 0335 E8000000 		call	__stack_chk_fail@PLT
 919      00
 920              	.LVL106:
 921              		.cfi_endproc
 922              	.LFE51:
 924              		.section	.text.start_pass_huff,"ax",@progbits
 925              		.p2align 4
 927              	start_pass_huff:
 928              	.LVL107:
 929              	.LFB75:
1223:fltk-1.3.4-1/jpeg/jchuff.c **** 
1224:fltk-1.3.4-1/jpeg/jchuff.c **** 
1225:fltk-1.3.4-1/jpeg/jchuff.c **** /*
1226:fltk-1.3.4-1/jpeg/jchuff.c ****  * Generate the best Huffman code table for the given counts, fill htbl.
1227:fltk-1.3.4-1/jpeg/jchuff.c ****  *
1228:fltk-1.3.4-1/jpeg/jchuff.c ****  * The JPEG standard requires that no symbol be assigned a codeword of all
1229:fltk-1.3.4-1/jpeg/jchuff.c ****  * one bits (so that padding bits added at the end of a compressed segment
1230:fltk-1.3.4-1/jpeg/jchuff.c ****  * can't look like a valid code).  Because of the canonical ordering of
1231:fltk-1.3.4-1/jpeg/jchuff.c ****  * codewords, this just means that there must be an unused slot in the
1232:fltk-1.3.4-1/jpeg/jchuff.c ****  * longest codeword length category.  Section K.2 of the JPEG spec suggests
1233:fltk-1.3.4-1/jpeg/jchuff.c ****  * reserving such a slot by pretending that symbol 256 is a valid symbol
1234:fltk-1.3.4-1/jpeg/jchuff.c ****  * with count 1.  In theory that's not optimal; giving it count zero but
1235:fltk-1.3.4-1/jpeg/jchuff.c ****  * including it in the symbol set anyway should give a better Huffman code.
1236:fltk-1.3.4-1/jpeg/jchuff.c ****  * But the theoretically better code actually seems to come out worse in
1237:fltk-1.3.4-1/jpeg/jchuff.c ****  * practice, because it produces more all-ones bytes (which incur stuffed
1238:fltk-1.3.4-1/jpeg/jchuff.c ****  * zero bytes in the final file).  In any case the difference is tiny.
1239:fltk-1.3.4-1/jpeg/jchuff.c ****  *
1240:fltk-1.3.4-1/jpeg/jchuff.c ****  * The JPEG standard requires Huffman codes to be no more than 16 bits long.
1241:fltk-1.3.4-1/jpeg/jchuff.c ****  * If some symbols have a very small but nonzero probability, the Huffman tree
1242:fltk-1.3.4-1/jpeg/jchuff.c ****  * must be adjusted to meet the code length restriction.  We currently use
1243:fltk-1.3.4-1/jpeg/jchuff.c ****  * the adjustment method suggested in JPEG section K.2.  This method is *not*
1244:fltk-1.3.4-1/jpeg/jchuff.c ****  * optimal; it may not choose the best possible limited-length code.  But
1245:fltk-1.3.4-1/jpeg/jchuff.c ****  * typically only very-low-frequency symbols will be given less-than-optimal
1246:fltk-1.3.4-1/jpeg/jchuff.c ****  * lengths, so the code is almost optimal.  Experimental comparisons against
1247:fltk-1.3.4-1/jpeg/jchuff.c ****  * an optimal limited-length-code algorithm indicate that the difference is
1248:fltk-1.3.4-1/jpeg/jchuff.c ****  * microscopic --- usually less than a hundredth of a percent of total size.
1249:fltk-1.3.4-1/jpeg/jchuff.c ****  * So the extra complexity of an optimal algorithm doesn't seem worthwhile.
1250:fltk-1.3.4-1/jpeg/jchuff.c ****  */
1251:fltk-1.3.4-1/jpeg/jchuff.c **** 
1252:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(void)
1253:fltk-1.3.4-1/jpeg/jchuff.c **** jpeg_gen_optimal_table (j_compress_ptr cinfo, JHUFF_TBL * htbl, long freq[])
1254:fltk-1.3.4-1/jpeg/jchuff.c **** {
1255:fltk-1.3.4-1/jpeg/jchuff.c **** #define MAX_CLEN 32		/* assumed maximum initial code length */
1256:fltk-1.3.4-1/jpeg/jchuff.c ****   UINT8 bits[MAX_CLEN+1];	/* bits[k] = # of symbols with code length k */
1257:fltk-1.3.4-1/jpeg/jchuff.c ****   int codesize[257];		/* codesize[k] = code length of symbol k */
1258:fltk-1.3.4-1/jpeg/jchuff.c ****   int others[257];		/* next symbol in current branch of tree */
1259:fltk-1.3.4-1/jpeg/jchuff.c ****   int c1, c2;
1260:fltk-1.3.4-1/jpeg/jchuff.c ****   int p, i, j;
1261:fltk-1.3.4-1/jpeg/jchuff.c ****   long v;
1262:fltk-1.3.4-1/jpeg/jchuff.c **** 
1263:fltk-1.3.4-1/jpeg/jchuff.c ****   /* This algorithm is explained in section K.2 of the JPEG standard */
1264:fltk-1.3.4-1/jpeg/jchuff.c **** 
1265:fltk-1.3.4-1/jpeg/jchuff.c ****   MEMZERO(bits, SIZEOF(bits));
1266:fltk-1.3.4-1/jpeg/jchuff.c ****   MEMZERO(codesize, SIZEOF(codesize));
1267:fltk-1.3.4-1/jpeg/jchuff.c ****   for (i = 0; i < 257; i++)
1268:fltk-1.3.4-1/jpeg/jchuff.c ****     others[i] = -1;		/* init links to empty */
1269:fltk-1.3.4-1/jpeg/jchuff.c ****   
1270:fltk-1.3.4-1/jpeg/jchuff.c ****   freq[256] = 1;		/* make sure 256 has a nonzero count */
1271:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Including the pseudo-symbol 256 in the Huffman procedure guarantees
1272:fltk-1.3.4-1/jpeg/jchuff.c ****    * that no real symbol is given code-value of all ones, because 256
1273:fltk-1.3.4-1/jpeg/jchuff.c ****    * will be placed last in the largest codeword category.
1274:fltk-1.3.4-1/jpeg/jchuff.c ****    */
1275:fltk-1.3.4-1/jpeg/jchuff.c **** 
1276:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Huffman's basic algorithm to assign optimal code lengths to symbols */
1277:fltk-1.3.4-1/jpeg/jchuff.c **** 
1278:fltk-1.3.4-1/jpeg/jchuff.c ****   for (;;) {
1279:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Find the smallest nonzero frequency, set c1 = its symbol */
1280:fltk-1.3.4-1/jpeg/jchuff.c ****     /* In case of ties, take the larger symbol number */
1281:fltk-1.3.4-1/jpeg/jchuff.c ****     c1 = -1;
1282:fltk-1.3.4-1/jpeg/jchuff.c ****     v = 1000000000L;
1283:fltk-1.3.4-1/jpeg/jchuff.c ****     for (i = 0; i <= 256; i++) {
1284:fltk-1.3.4-1/jpeg/jchuff.c ****       if (freq[i] && freq[i] <= v) {
1285:fltk-1.3.4-1/jpeg/jchuff.c **** 	v = freq[i];
1286:fltk-1.3.4-1/jpeg/jchuff.c **** 	c1 = i;
1287:fltk-1.3.4-1/jpeg/jchuff.c ****       }
1288:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1289:fltk-1.3.4-1/jpeg/jchuff.c **** 
1290:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Find the next smallest nonzero frequency, set c2 = its symbol */
1291:fltk-1.3.4-1/jpeg/jchuff.c ****     /* In case of ties, take the larger symbol number */
1292:fltk-1.3.4-1/jpeg/jchuff.c ****     c2 = -1;
1293:fltk-1.3.4-1/jpeg/jchuff.c ****     v = 1000000000L;
1294:fltk-1.3.4-1/jpeg/jchuff.c ****     for (i = 0; i <= 256; i++) {
1295:fltk-1.3.4-1/jpeg/jchuff.c ****       if (freq[i] && freq[i] <= v && i != c1) {
1296:fltk-1.3.4-1/jpeg/jchuff.c **** 	v = freq[i];
1297:fltk-1.3.4-1/jpeg/jchuff.c **** 	c2 = i;
1298:fltk-1.3.4-1/jpeg/jchuff.c ****       }
1299:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1300:fltk-1.3.4-1/jpeg/jchuff.c **** 
1301:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Done if we've merged everything into one frequency */
1302:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c2 < 0)
1303:fltk-1.3.4-1/jpeg/jchuff.c ****       break;
1304:fltk-1.3.4-1/jpeg/jchuff.c ****     
1305:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Else merge the two counts/trees */
1306:fltk-1.3.4-1/jpeg/jchuff.c ****     freq[c1] += freq[c2];
1307:fltk-1.3.4-1/jpeg/jchuff.c ****     freq[c2] = 0;
1308:fltk-1.3.4-1/jpeg/jchuff.c **** 
1309:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Increment the codesize of everything in c1's tree branch */
1310:fltk-1.3.4-1/jpeg/jchuff.c ****     codesize[c1]++;
1311:fltk-1.3.4-1/jpeg/jchuff.c ****     while (others[c1] >= 0) {
1312:fltk-1.3.4-1/jpeg/jchuff.c ****       c1 = others[c1];
1313:fltk-1.3.4-1/jpeg/jchuff.c ****       codesize[c1]++;
1314:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1315:fltk-1.3.4-1/jpeg/jchuff.c ****     
1316:fltk-1.3.4-1/jpeg/jchuff.c ****     others[c1] = c2;		/* chain c2 onto c1's tree branch */
1317:fltk-1.3.4-1/jpeg/jchuff.c ****     
1318:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Increment the codesize of everything in c2's tree branch */
1319:fltk-1.3.4-1/jpeg/jchuff.c ****     codesize[c2]++;
1320:fltk-1.3.4-1/jpeg/jchuff.c ****     while (others[c2] >= 0) {
1321:fltk-1.3.4-1/jpeg/jchuff.c ****       c2 = others[c2];
1322:fltk-1.3.4-1/jpeg/jchuff.c ****       codesize[c2]++;
1323:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1324:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1325:fltk-1.3.4-1/jpeg/jchuff.c **** 
1326:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Now count the number of symbols of each code length */
1327:fltk-1.3.4-1/jpeg/jchuff.c ****   for (i = 0; i <= 256; i++) {
1328:fltk-1.3.4-1/jpeg/jchuff.c ****     if (codesize[i]) {
1329:fltk-1.3.4-1/jpeg/jchuff.c ****       /* The JPEG standard seems to think that this can't happen, */
1330:fltk-1.3.4-1/jpeg/jchuff.c ****       /* but I'm paranoid... */
1331:fltk-1.3.4-1/jpeg/jchuff.c ****       if (codesize[i] > MAX_CLEN)
1332:fltk-1.3.4-1/jpeg/jchuff.c **** 	ERREXIT(cinfo, JERR_HUFF_CLEN_OVERFLOW);
1333:fltk-1.3.4-1/jpeg/jchuff.c **** 
1334:fltk-1.3.4-1/jpeg/jchuff.c ****       bits[codesize[i]]++;
1335:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1336:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1337:fltk-1.3.4-1/jpeg/jchuff.c **** 
1338:fltk-1.3.4-1/jpeg/jchuff.c ****   /* JPEG doesn't allow symbols with code lengths over 16 bits, so if the pure
1339:fltk-1.3.4-1/jpeg/jchuff.c ****    * Huffman procedure assigned any such lengths, we must adjust the coding.
1340:fltk-1.3.4-1/jpeg/jchuff.c ****    * Here is what the JPEG spec says about how this next bit works:
1341:fltk-1.3.4-1/jpeg/jchuff.c ****    * Since symbols are paired for the longest Huffman code, the symbols are
1342:fltk-1.3.4-1/jpeg/jchuff.c ****    * removed from this length category two at a time.  The prefix for the pair
1343:fltk-1.3.4-1/jpeg/jchuff.c ****    * (which is one bit shorter) is allocated to one of the pair; then,
1344:fltk-1.3.4-1/jpeg/jchuff.c ****    * skipping the BITS entry for that prefix length, a code word from the next
1345:fltk-1.3.4-1/jpeg/jchuff.c ****    * shortest nonzero BITS entry is converted into a prefix for two code words
1346:fltk-1.3.4-1/jpeg/jchuff.c ****    * one bit longer.
1347:fltk-1.3.4-1/jpeg/jchuff.c ****    */
1348:fltk-1.3.4-1/jpeg/jchuff.c ****   
1349:fltk-1.3.4-1/jpeg/jchuff.c ****   for (i = MAX_CLEN; i > 16; i--) {
1350:fltk-1.3.4-1/jpeg/jchuff.c ****     while (bits[i] > 0) {
1351:fltk-1.3.4-1/jpeg/jchuff.c ****       j = i - 2;		/* find length of new prefix to be used */
1352:fltk-1.3.4-1/jpeg/jchuff.c ****       while (bits[j] == 0)
1353:fltk-1.3.4-1/jpeg/jchuff.c **** 	j--;
1354:fltk-1.3.4-1/jpeg/jchuff.c ****       
1355:fltk-1.3.4-1/jpeg/jchuff.c ****       bits[i] -= 2;		/* remove two symbols */
1356:fltk-1.3.4-1/jpeg/jchuff.c ****       bits[i-1]++;		/* one goes in this length */
1357:fltk-1.3.4-1/jpeg/jchuff.c ****       bits[j+1] += 2;		/* two new symbols in this length */
1358:fltk-1.3.4-1/jpeg/jchuff.c ****       bits[j]--;		/* symbol of this length is now a prefix */
1359:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1360:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1361:fltk-1.3.4-1/jpeg/jchuff.c **** 
1362:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Remove the count for the pseudo-symbol 256 from the largest codelength */
1363:fltk-1.3.4-1/jpeg/jchuff.c ****   while (bits[i] == 0)		/* find largest codelength still in use */
1364:fltk-1.3.4-1/jpeg/jchuff.c ****     i--;
1365:fltk-1.3.4-1/jpeg/jchuff.c ****   bits[i]--;
1366:fltk-1.3.4-1/jpeg/jchuff.c ****   
1367:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Return final symbol counts (only for lengths 0..16) */
1368:fltk-1.3.4-1/jpeg/jchuff.c ****   MEMCOPY(htbl->bits, bits, SIZEOF(htbl->bits));
1369:fltk-1.3.4-1/jpeg/jchuff.c ****   
1370:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Return a list of the symbols sorted by code length */
1371:fltk-1.3.4-1/jpeg/jchuff.c ****   /* It's not real clear to me why we don't need to consider the codelength
1372:fltk-1.3.4-1/jpeg/jchuff.c ****    * changes made above, but the JPEG spec seems to think this works.
1373:fltk-1.3.4-1/jpeg/jchuff.c ****    */
1374:fltk-1.3.4-1/jpeg/jchuff.c ****   p = 0;
1375:fltk-1.3.4-1/jpeg/jchuff.c ****   for (i = 1; i <= MAX_CLEN; i++) {
1376:fltk-1.3.4-1/jpeg/jchuff.c ****     for (j = 0; j <= 255; j++) {
1377:fltk-1.3.4-1/jpeg/jchuff.c ****       if (codesize[j] == i) {
1378:fltk-1.3.4-1/jpeg/jchuff.c **** 	htbl->huffval[p] = (UINT8) j;
1379:fltk-1.3.4-1/jpeg/jchuff.c **** 	p++;
1380:fltk-1.3.4-1/jpeg/jchuff.c ****       }
1381:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1383:fltk-1.3.4-1/jpeg/jchuff.c **** 
1384:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Set sent_table FALSE so updated table will be written to JPEG file. */
1385:fltk-1.3.4-1/jpeg/jchuff.c ****   htbl->sent_table = FALSE;
1386:fltk-1.3.4-1/jpeg/jchuff.c **** }
1387:fltk-1.3.4-1/jpeg/jchuff.c **** 
1388:fltk-1.3.4-1/jpeg/jchuff.c **** 
1389:fltk-1.3.4-1/jpeg/jchuff.c **** /*
1390:fltk-1.3.4-1/jpeg/jchuff.c ****  * Finish up a statistics-gathering pass and create the new Huffman tables.
1391:fltk-1.3.4-1/jpeg/jchuff.c ****  */
1392:fltk-1.3.4-1/jpeg/jchuff.c **** 
1393:fltk-1.3.4-1/jpeg/jchuff.c **** METHODDEF(void)
1394:fltk-1.3.4-1/jpeg/jchuff.c **** finish_pass_gather (j_compress_ptr cinfo)
1395:fltk-1.3.4-1/jpeg/jchuff.c **** {
1396:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
1397:fltk-1.3.4-1/jpeg/jchuff.c ****   int ci, tbl;
1398:fltk-1.3.4-1/jpeg/jchuff.c ****   jpeg_component_info * compptr;
1399:fltk-1.3.4-1/jpeg/jchuff.c ****   JHUFF_TBL **htblptr;
1400:fltk-1.3.4-1/jpeg/jchuff.c ****   boolean did_dc[NUM_HUFF_TBLS];
1401:fltk-1.3.4-1/jpeg/jchuff.c ****   boolean did_ac[NUM_HUFF_TBLS];
1402:fltk-1.3.4-1/jpeg/jchuff.c **** 
1403:fltk-1.3.4-1/jpeg/jchuff.c ****   /* It's important not to apply jpeg_gen_optimal_table more than once
1404:fltk-1.3.4-1/jpeg/jchuff.c ****    * per table, because it clobbers the input frequency counts!
1405:fltk-1.3.4-1/jpeg/jchuff.c ****    */
1406:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->progressive_mode)
1407:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Flush out buffered data (all we care about is counting the EOB symbol) */
1408:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_eobrun(entropy);
1409:fltk-1.3.4-1/jpeg/jchuff.c **** 
1410:fltk-1.3.4-1/jpeg/jchuff.c ****   MEMZERO(did_dc, SIZEOF(did_dc));
1411:fltk-1.3.4-1/jpeg/jchuff.c ****   MEMZERO(did_ac, SIZEOF(did_ac));
1412:fltk-1.3.4-1/jpeg/jchuff.c **** 
1413:fltk-1.3.4-1/jpeg/jchuff.c ****   for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
1414:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
1415:fltk-1.3.4-1/jpeg/jchuff.c ****     /* DC needs no table for refinement scan */
1416:fltk-1.3.4-1/jpeg/jchuff.c ****     if (cinfo->Ss == 0 && cinfo->Ah == 0) {
1417:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->dc_tbl_no;
1418:fltk-1.3.4-1/jpeg/jchuff.c ****       if (! did_dc[tbl]) {
1419:fltk-1.3.4-1/jpeg/jchuff.c **** 	htblptr = & cinfo->dc_huff_tbl_ptrs[tbl];
1420:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (*htblptr == NULL)
1421:fltk-1.3.4-1/jpeg/jchuff.c **** 	  *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
1422:fltk-1.3.4-1/jpeg/jchuff.c **** 	jpeg_gen_optimal_table(cinfo, *htblptr, entropy->dc_count_ptrs[tbl]);
1423:fltk-1.3.4-1/jpeg/jchuff.c **** 	did_dc[tbl] = TRUE;
1424:fltk-1.3.4-1/jpeg/jchuff.c ****       }
1425:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1426:fltk-1.3.4-1/jpeg/jchuff.c ****     /* AC needs no table when not present */
1427:fltk-1.3.4-1/jpeg/jchuff.c ****     if (cinfo->Se) {
1428:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->ac_tbl_no;
1429:fltk-1.3.4-1/jpeg/jchuff.c ****       if (! did_ac[tbl]) {
1430:fltk-1.3.4-1/jpeg/jchuff.c **** 	htblptr = & cinfo->ac_huff_tbl_ptrs[tbl];
1431:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (*htblptr == NULL)
1432:fltk-1.3.4-1/jpeg/jchuff.c **** 	  *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
1433:fltk-1.3.4-1/jpeg/jchuff.c **** 	jpeg_gen_optimal_table(cinfo, *htblptr, entropy->ac_count_ptrs[tbl]);
1434:fltk-1.3.4-1/jpeg/jchuff.c **** 	did_ac[tbl] = TRUE;
1435:fltk-1.3.4-1/jpeg/jchuff.c ****       }
1436:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1437:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1438:fltk-1.3.4-1/jpeg/jchuff.c **** }
1439:fltk-1.3.4-1/jpeg/jchuff.c **** 
1440:fltk-1.3.4-1/jpeg/jchuff.c **** 
1441:fltk-1.3.4-1/jpeg/jchuff.c **** /*
1442:fltk-1.3.4-1/jpeg/jchuff.c ****  * Initialize for a Huffman-compressed scan.
1443:fltk-1.3.4-1/jpeg/jchuff.c ****  * If gather_statistics is TRUE, we do not output anything during the scan,
1444:fltk-1.3.4-1/jpeg/jchuff.c ****  * just count the Huffman symbols used and generate Huffman code tables.
1445:fltk-1.3.4-1/jpeg/jchuff.c ****  */
1446:fltk-1.3.4-1/jpeg/jchuff.c **** 
1447:fltk-1.3.4-1/jpeg/jchuff.c **** METHODDEF(void)
1448:fltk-1.3.4-1/jpeg/jchuff.c **** start_pass_huff (j_compress_ptr cinfo, boolean gather_statistics)
1449:fltk-1.3.4-1/jpeg/jchuff.c **** {
 930              		.loc 1 1449 1 is_stmt 1 view -0
 931              		.cfi_startproc
 932              		.loc 1 1449 1 is_stmt 0 view .LVU282
 933 0000 F30F1EFA 		endbr64
1450:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 934              		.loc 1 1450 3 is_stmt 1 view .LVU283
1449:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 935              		.loc 1 1449 1 is_stmt 0 view .LVU284
 936 0004 4157     		pushq	%r15
 937              		.cfi_def_cfa_offset 16
 938              		.cfi_offset 15, -16
 939 0006 4156     		pushq	%r14
 940              		.cfi_def_cfa_offset 24
 941              		.cfi_offset 14, -24
 942 0008 4189F6   		movl	%esi, %r14d
 943 000b 4155     		pushq	%r13
 944              		.cfi_def_cfa_offset 32
 945              		.cfi_offset 13, -32
 946 000d 4154     		pushq	%r12
 947              		.cfi_def_cfa_offset 40
 948              		.cfi_offset 12, -40
 949 000f 55       		pushq	%rbp
 950              		.cfi_def_cfa_offset 48
 951              		.cfi_offset 6, -48
 952 0010 53       		pushq	%rbx
 953              		.cfi_def_cfa_offset 56
 954              		.cfi_offset 3, -56
 955 0011 4889FB   		movq	%rdi, %rbx
 956 0014 4883EC18 		subq	$24, %rsp
 957              		.cfi_def_cfa_offset 80
 958              		.loc 1 1450 20 view .LVU285
 959 0018 4C8BAF30 		movq	560(%rdi), %r13
 959      020000
 960              	.LVL108:
1451:fltk-1.3.4-1/jpeg/jchuff.c ****   int ci, tbl;
 961              		.loc 1 1451 3 is_stmt 1 view .LVU286
1452:fltk-1.3.4-1/jpeg/jchuff.c ****   jpeg_component_info * compptr;
 962              		.loc 1 1452 3 view .LVU287
1453:fltk-1.3.4-1/jpeg/jchuff.c **** 
1454:fltk-1.3.4-1/jpeg/jchuff.c ****   if (gather_statistics)
 963              		.loc 1 1454 3 view .LVU288
 964              		.loc 1 1454 6 is_stmt 0 view .LVU289
 965 001f 85F6     		testl	%esi, %esi
 966 0021 0F84B900 		je	.L99
 966      0000
1455:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->pub.finish_pass = finish_pass_gather;
 967              		.loc 1 1455 5 is_stmt 1 view .LVU290
 968              		.loc 1 1455 30 is_stmt 0 view .LVU291
 969 0027 488D0500 		leaq	finish_pass_gather(%rip), %rax
 969      000000
 970 002e 49894510 		movq	%rax, 16(%r13)
1456:fltk-1.3.4-1/jpeg/jchuff.c ****   else
1457:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->pub.finish_pass = finish_pass_huff;
1458:fltk-1.3.4-1/jpeg/jchuff.c **** 
1459:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->progressive_mode) {
 971              		.loc 1 1459 3 is_stmt 1 view .LVU292
 972              		.loc 1 1459 6 is_stmt 0 view .LVU293
 973 0032 448B9F5C 		movl	348(%rdi), %r11d
 973      010000
 974 0039 4585DB   		testl	%r11d, %r11d
 975 003c 0F842E02 		je	.L100
 975      0000
 976              	.L103:
1460:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->cinfo = cinfo;
 977              		.loc 1 1460 5 is_stmt 1 view .LVU294
 978              		.loc 1 1460 20 is_stmt 0 view .LVU295
 979 0042 49899DD8 		movq	%rbx, 216(%r13)
 979      000000
1461:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->gather_statistics = gather_statistics;
 980              		.loc 1 1461 5 is_stmt 1 view .LVU296
 981              		.loc 1 1461 32 is_stmt 0 view .LVU297
 982 0049 4589B5C0 		movl	%r14d, 192(%r13)
 982      000000
1462:fltk-1.3.4-1/jpeg/jchuff.c **** 
1463:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We assume jcmaster.c already validated the scan parameters. */
1464:fltk-1.3.4-1/jpeg/jchuff.c **** 
1465:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Select execution routine */
1466:fltk-1.3.4-1/jpeg/jchuff.c ****     if (cinfo->Ah == 0) {
 983              		.loc 1 1466 5 is_stmt 1 view .LVU298
 984              		.loc 1 1466 8 is_stmt 0 view .LVU299
 985 0050 448B93D4 		movl	468(%rbx), %r10d
 985      010000
 986 0057 4585D2   		testl	%r10d, %r10d
 987 005a 0F85E801 		jne	.L127
 987      0000
 988              	.LVL109:
1467:fltk-1.3.4-1/jpeg/jchuff.c ****       if (cinfo->Ss == 0)
 989              		.loc 1 1467 7 is_stmt 1 view .LVU300
 990              		.loc 1 1467 10 is_stmt 0 view .LVU301
 991 0060 448B83CC 		movl	460(%rbx), %r8d
 991      010000
 992 0067 4585C0   		testl	%r8d, %r8d
 993 006a 0F84A002 		je	.L128
 993      0000
1468:fltk-1.3.4-1/jpeg/jchuff.c **** 	entropy->pub.encode_mcu = encode_mcu_DC_first;
1469:fltk-1.3.4-1/jpeg/jchuff.c ****       else
1470:fltk-1.3.4-1/jpeg/jchuff.c **** 	entropy->pub.encode_mcu = encode_mcu_AC_first;
 994              		.loc 1 1470 2 is_stmt 1 view .LVU302
 995              		.loc 1 1470 26 is_stmt 0 view .LVU303
 996 0070 488D0500 		leaq	encode_mcu_AC_first(%rip), %rax
 996      000000
 997 0077 49894508 		movq	%rax, 8(%r13)
 998              	.LVL110:
 999              	.L106:
1471:fltk-1.3.4-1/jpeg/jchuff.c ****     } else {
1472:fltk-1.3.4-1/jpeg/jchuff.c ****       if (cinfo->Ss == 0)
1473:fltk-1.3.4-1/jpeg/jchuff.c **** 	entropy->pub.encode_mcu = encode_mcu_DC_refine;
1474:fltk-1.3.4-1/jpeg/jchuff.c ****       else {
1475:fltk-1.3.4-1/jpeg/jchuff.c **** 	entropy->pub.encode_mcu = encode_mcu_AC_refine;
1476:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* AC refinement needs a correction bit buffer */
1477:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (entropy->bit_buffer == NULL)
1478:fltk-1.3.4-1/jpeg/jchuff.c **** 	  entropy->bit_buffer = (char *)
1479:fltk-1.3.4-1/jpeg/jchuff.c **** 	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
1480:fltk-1.3.4-1/jpeg/jchuff.c **** 					MAX_CORR_BITS * SIZEOF(char));
1481:fltk-1.3.4-1/jpeg/jchuff.c ****       }
1482:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1483:fltk-1.3.4-1/jpeg/jchuff.c **** 
1484:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Initialize AC stuff */
1485:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_tbl_no = cinfo->cur_comp_info[0]->ac_tbl_no;
 1000              		.loc 1 1485 5 is_stmt 1 view .LVU304
 1001              		.loc 1 1485 49 is_stmt 0 view .LVU305
 1002 007b 488B8378 		movq	376(%rbx), %rax
 1002      010000
1486:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->EOBRUN = 0;
1487:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->BE = 0;
1488:fltk-1.3.4-1/jpeg/jchuff.c ****   } else {
1489:fltk-1.3.4-1/jpeg/jchuff.c ****     if (gather_statistics)
1490:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->pub.encode_mcu = encode_mcu_gather;
1491:fltk-1.3.4-1/jpeg/jchuff.c ****     else
1492:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->pub.encode_mcu = encode_mcu_huff;
1493:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1494:fltk-1.3.4-1/jpeg/jchuff.c **** 
1495:fltk-1.3.4-1/jpeg/jchuff.c ****   for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 1003              		.loc 1 1495 3 view .LVU306
 1004 0082 4531E4   		xorl	%r12d, %r12d
 1005              	.LBB75:
 1006              	.LBB76:
 1007              		.loc 2 71 10 view .LVU307
 1008 0085 31ED     		xorl	%ebp, %ebp
 1009              	.LBE76:
 1010              	.LBE75:
1485:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->EOBRUN = 0;
 1011              		.loc 1 1485 49 view .LVU308
 1012 0087 8B4018   		movl	24(%rax), %eax
1486:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->EOBRUN = 0;
 1013              		.loc 1 1486 21 view .LVU309
 1014 008a 49C785E4 		movq	$0, 228(%r13)
 1014      00000000 
 1014      000000
1485:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->EOBRUN = 0;
 1015              		.loc 1 1485 24 view .LVU310
 1016 0095 418985E0 		movl	%eax, 224(%r13)
 1016      000000
1486:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->EOBRUN = 0;
 1017              		.loc 1 1486 5 is_stmt 1 view .LVU311
1487:fltk-1.3.4-1/jpeg/jchuff.c ****   } else {
 1018              		.loc 1 1487 5 view .LVU312
 1019              	.LVL111:
 1020              		.loc 1 1495 16 view .LVU313
 1021              		.loc 1 1495 3 is_stmt 0 view .LVU314
 1022 009c 8BB37401 		movl	372(%rbx), %esi
 1022      0000
 1023 00a2 85F6     		testl	%esi, %esi
 1024 00a4 7F72     		jg	.L109
 1025              	.LVL112:
 1026              	.L119:
1496:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
1497:fltk-1.3.4-1/jpeg/jchuff.c ****     /* DC needs no table for refinement scan */
1498:fltk-1.3.4-1/jpeg/jchuff.c ****     if (cinfo->Ss == 0 && cinfo->Ah == 0) {
1499:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->dc_tbl_no;
1500:fltk-1.3.4-1/jpeg/jchuff.c ****       if (gather_statistics) {
1501:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* Check for invalid table index */
1502:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* (make_c_derived_tbl does this in the other path) */
1503:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (tbl < 0 || tbl >= NUM_HUFF_TBLS)
1504:fltk-1.3.4-1/jpeg/jchuff.c **** 	  ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
1505:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* Allocate and zero the statistics tables */
1506:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* Note that jpeg_gen_optimal_table expects 257 entries in each table! */
1507:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (entropy->dc_count_ptrs[tbl] == NULL)
1508:fltk-1.3.4-1/jpeg/jchuff.c **** 	  entropy->dc_count_ptrs[tbl] = (long *)
1509:fltk-1.3.4-1/jpeg/jchuff.c **** 	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
1510:fltk-1.3.4-1/jpeg/jchuff.c **** 					257 * SIZEOF(long));
1511:fltk-1.3.4-1/jpeg/jchuff.c **** 	MEMZERO(entropy->dc_count_ptrs[tbl], 257 * SIZEOF(long));
1512:fltk-1.3.4-1/jpeg/jchuff.c ****       } else {
1513:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* Compute derived values for Huffman tables */
1514:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* We may do this more than once for a table, but it's not expensive */
1515:fltk-1.3.4-1/jpeg/jchuff.c **** 	jpeg_make_c_derived_tbl(cinfo, TRUE, tbl,
1516:fltk-1.3.4-1/jpeg/jchuff.c **** 				& entropy->dc_derived_tbls[tbl]);
1517:fltk-1.3.4-1/jpeg/jchuff.c ****       }
1518:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Initialize DC predictions to 0 */
1519:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->saved.last_dc_val[ci] = 0;
1520:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1521:fltk-1.3.4-1/jpeg/jchuff.c ****     /* AC needs no table when not present */
1522:fltk-1.3.4-1/jpeg/jchuff.c ****     if (cinfo->Se) {
1523:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->ac_tbl_no;
1524:fltk-1.3.4-1/jpeg/jchuff.c ****       if (gather_statistics) {
1525:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (tbl < 0 || tbl >= NUM_HUFF_TBLS)
1526:fltk-1.3.4-1/jpeg/jchuff.c **** 	  ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
1527:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (entropy->ac_count_ptrs[tbl] == NULL)
1528:fltk-1.3.4-1/jpeg/jchuff.c **** 	  entropy->ac_count_ptrs[tbl] = (long *)
1529:fltk-1.3.4-1/jpeg/jchuff.c **** 	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
1530:fltk-1.3.4-1/jpeg/jchuff.c **** 					257 * SIZEOF(long));
1531:fltk-1.3.4-1/jpeg/jchuff.c **** 	MEMZERO(entropy->ac_count_ptrs[tbl], 257 * SIZEOF(long));
1532:fltk-1.3.4-1/jpeg/jchuff.c ****       } else {
1533:fltk-1.3.4-1/jpeg/jchuff.c **** 	jpeg_make_c_derived_tbl(cinfo, FALSE, tbl,
1534:fltk-1.3.4-1/jpeg/jchuff.c **** 				& entropy->ac_derived_tbls[tbl]);
1535:fltk-1.3.4-1/jpeg/jchuff.c ****       }
1536:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1537:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1538:fltk-1.3.4-1/jpeg/jchuff.c **** 
1539:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Initialize bit buffer to empty */
1540:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_buffer = 0;
 1027              		.loc 1 1540 3 is_stmt 1 view .LVU315
 1028              		.loc 1 1540 29 is_stmt 0 view .LVU316
 1029 00a6 49C74518 		movq	$0, 24(%r13)
 1029      00000000 
1541:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = 0;
 1030              		.loc 1 1541 3 is_stmt 1 view .LVU317
 1031              		.loc 1 1541 27 is_stmt 0 view .LVU318
 1032 00ae 41C74520 		movl	$0, 32(%r13)
 1032      00000000 
1542:fltk-1.3.4-1/jpeg/jchuff.c **** 
1543:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Initialize restart stuff */
1544:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->restarts_to_go = cinfo->restart_interval;
 1033              		.loc 1 1544 3 is_stmt 1 view .LVU319
 1034              		.loc 1 1544 34 is_stmt 0 view .LVU320
 1035 00b6 8B833C01 		movl	316(%rbx), %eax
 1035      0000
1545:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->next_restart_num = 0;
 1036              		.loc 1 1545 29 view .LVU321
 1037 00bc 41C7453C 		movl	$0, 60(%r13)
 1037      00000000 
1544:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->next_restart_num = 0;
 1038              		.loc 1 1544 27 view .LVU322
 1039 00c4 41894538 		movl	%eax, 56(%r13)
 1040              		.loc 1 1545 3 is_stmt 1 view .LVU323
1546:fltk-1.3.4-1/jpeg/jchuff.c **** }
 1041              		.loc 1 1546 1 is_stmt 0 view .LVU324
 1042 00c8 4883C418 		addq	$24, %rsp
 1043              		.cfi_remember_state
 1044              		.cfi_def_cfa_offset 56
 1045 00cc 5B       		popq	%rbx
 1046              		.cfi_def_cfa_offset 48
 1047              	.LVL113:
 1048              		.loc 1 1546 1 view .LVU325
 1049 00cd 5D       		popq	%rbp
 1050              		.cfi_def_cfa_offset 40
 1051 00ce 415C     		popq	%r12
 1052              		.cfi_def_cfa_offset 32
 1053 00d0 415D     		popq	%r13
 1054              		.cfi_def_cfa_offset 24
 1055              	.LVL114:
 1056              		.loc 1 1546 1 view .LVU326
 1057 00d2 415E     		popq	%r14
 1058              		.cfi_def_cfa_offset 16
 1059              	.LVL115:
 1060              		.loc 1 1546 1 view .LVU327
 1061 00d4 415F     		popq	%r15
 1062              		.cfi_def_cfa_offset 8
 1063 00d6 C3       		ret
 1064              	.LVL116:
 1065 00d7 660F1F84 		.p2align 4,,10
 1065      00000000 
 1065      00
 1066              		.p2align 3
 1067              	.L99:
 1068              		.cfi_restore_state
1457:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1069              		.loc 1 1457 5 is_stmt 1 view .LVU328
1457:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1070              		.loc 1 1457 30 is_stmt 0 view .LVU329
 1071 00e0 488D0500 		leaq	finish_pass_huff(%rip), %rax
 1071      000000
 1072 00e7 49894510 		movq	%rax, 16(%r13)
1459:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->cinfo = cinfo;
 1073              		.loc 1 1459 3 is_stmt 1 view .LVU330
1459:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->cinfo = cinfo;
 1074              		.loc 1 1459 6 is_stmt 0 view .LVU331
 1075 00eb 448B8F5C 		movl	348(%rdi), %r9d
 1075      010000
 1076 00f2 4585C9   		testl	%r9d, %r9d
 1077 00f5 0F8547FF 		jne	.L103
 1077      FFFF
1492:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 1078              		.loc 1 1492 7 is_stmt 1 view .LVU332
1492:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 1079              		.loc 1 1492 31 is_stmt 0 view .LVU333
 1080 00fb 488D0500 		leaq	encode_mcu_huff(%rip), %rax
 1080      000000
 1081 0102 49894508 		movq	%rax, 8(%r13)
 1082              	.L108:
 1083              	.LVL117:
1495:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
 1084              		.loc 1 1495 16 is_stmt 1 discriminator 1 view .LVU334
1495:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
 1085              		.loc 1 1495 3 is_stmt 0 discriminator 1 view .LVU335
 1086 0106 8BB37401 		movl	372(%rbx), %esi
 1086      0000
 1087              	.LVL118:
1495:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
 1088              		.loc 1 1495 3 discriminator 1 view .LVU336
 1089 010c 4531E4   		xorl	%r12d, %r12d
 1090              	.LBB79:
 1091              	.LBB77:
 1092              		.loc 2 71 10 discriminator 1 view .LVU337
 1093 010f 31ED     		xorl	%ebp, %ebp
 1094              	.LBE77:
 1095              	.LBE79:
1495:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
 1096              		.loc 1 1495 3 discriminator 1 view .LVU338
 1097 0111 85F6     		testl	%esi, %esi
 1098 0113 7E91     		jle	.L119
 1099              	.LVL119:
 1100              		.p2align 4,,10
 1101 0115 0F1F00   		.p2align 3
 1102              	.L109:
1496:fltk-1.3.4-1/jpeg/jchuff.c ****     /* DC needs no table for refinement scan */
 1103              		.loc 1 1496 5 is_stmt 1 view .LVU339
1498:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->dc_tbl_no;
 1104              		.loc 1 1498 8 is_stmt 0 view .LVU340
 1105 0118 8B8BCC01 		movl	460(%rbx), %ecx
 1105      0000
1496:fltk-1.3.4-1/jpeg/jchuff.c ****     /* DC needs no table for refinement scan */
 1106              		.loc 1 1496 13 view .LVU341
 1107 011e 4E8BBCE3 		movq	376(%rbx,%r12,8), %r15
 1107      78010000 
 1108              	.LVL120:
1498:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->dc_tbl_no;
 1109              		.loc 1 1498 5 is_stmt 1 view .LVU342
1498:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->dc_tbl_no;
 1110              		.loc 1 1498 8 is_stmt 0 view .LVU343
 1111 0126 85C9     		testl	%ecx, %ecx
 1112 0128 0F858700 		jne	.L110
 1112      0000
1498:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->dc_tbl_no;
 1113              		.loc 1 1498 24 discriminator 1 view .LVU344
 1114 012e 8B93D401 		movl	468(%rbx), %edx
 1114      0000
 1115 0134 85D2     		testl	%edx, %edx
 1116 0136 757D     		jne	.L110
1499:fltk-1.3.4-1/jpeg/jchuff.c ****       if (gather_statistics) {
 1117              		.loc 1 1499 7 is_stmt 1 view .LVU345
1499:fltk-1.3.4-1/jpeg/jchuff.c ****       if (gather_statistics) {
 1118              		.loc 1 1499 11 is_stmt 0 view .LVU346
 1119 0138 49635714 		movslq	20(%r15), %rdx
 1120              	.LVL121:
1500:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* Check for invalid table index */
 1121              		.loc 1 1500 7 is_stmt 1 view .LVU347
1500:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* Check for invalid table index */
 1122              		.loc 1 1500 10 is_stmt 0 view .LVU348
 1123 013c 4585F6   		testl	%r14d, %r14d
 1124 013f 0F847B01 		je	.L111
 1124      0000
1503:fltk-1.3.4-1/jpeg/jchuff.c **** 	  ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
 1125              		.loc 1 1503 2 is_stmt 1 view .LVU349
1503:fltk-1.3.4-1/jpeg/jchuff.c **** 	  ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
 1126              		.loc 1 1503 5 is_stmt 0 view .LVU350
 1127 0145 83FA03   		cmpl	$3, %edx
 1128 0148 7621     		jbe	.L112
1504:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* Allocate and zero the statistics tables */
 1129              		.loc 1 1504 4 is_stmt 1 view .LVU351
 1130 014a 488B03   		movq	(%rbx), %rax
 1131 014d 89542408 		movl	%edx, 8(%rsp)
 1132 0151 4889DF   		movq	%rbx, %rdi
 1133 0154 C7402834 		movl	$52, 40(%rax)
 1133      000000
 1134              	.LVL122:
1504:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* Allocate and zero the statistics tables */
 1135              		.loc 1 1504 4 is_stmt 0 view .LVU352
 1136 015b 488B03   		movq	(%rbx), %rax
 1137 015e 89502C   		movl	%edx, 44(%rax)
 1138 0161 488B03   		movq	(%rbx), %rax
 1139 0164 FF10     		call	*(%rax)
 1140              	.LVL123:
1504:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* Allocate and zero the statistics tables */
 1141              		.loc 1 1504 4 view .LVU353
 1142 0166 48635424 		movslq	8(%rsp), %rdx
 1142      08
 1143              	.L112:
1507:fltk-1.3.4-1/jpeg/jchuff.c **** 	  entropy->dc_count_ptrs[tbl] = (long *)
 1144              		.loc 1 1507 2 is_stmt 1 view .LVU354
 1145 016b 498D4CD5 		leaq	0(%r13,%rdx,8), %rcx
 1145      00
1507:fltk-1.3.4-1/jpeg/jchuff.c **** 	  entropy->dc_count_ptrs[tbl] = (long *)
 1146              		.loc 1 1507 28 is_stmt 0 view .LVU355
 1147 0170 488B8180 		movq	128(%rcx), %rax
 1147      000000
1507:fltk-1.3.4-1/jpeg/jchuff.c **** 	  entropy->dc_count_ptrs[tbl] = (long *)
 1148              		.loc 1 1507 5 view .LVU356
 1149 0177 4885C0   		testq	%rax, %rax
 1150 017a 0F846001 		je	.L129
 1150      0000
 1151              	.L113:
1511:fltk-1.3.4-1/jpeg/jchuff.c ****       } else {
 1152              		.loc 1 1511 2 is_stmt 1 view .LVU357
 1153              	.LVL124:
 1154              	.LBB80:
 1155              	.LBI75:
  59:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
 1156              		.loc 2 59 1 view .LVU358
 1157              	.LBB78:
 1158              		.loc 2 71 3 view .LVU359
 1159              		.loc 2 71 10 is_stmt 0 view .LVU360
 1160 0180 488D7808 		leaq	8(%rax), %rdi
 1161 0184 48C70000 		movq	$0, (%rax)
 1161      000000
 1162              		.loc 2 71 10 view .LVU361
 1163 018b 48C78000 		movq	$0, 2048(%rax)
 1163      08000000 
 1163      000000
 1164 0196 4883E7F8 		andq	$-8, %rdi
 1165 019a 4829F8   		subq	%rdi, %rax
 1166 019d 8D880808 		leal	2056(%rax), %ecx
 1166      0000
 1167 01a3 4889E8   		movq	%rbp, %rax
 1168 01a6 C1E903   		shrl	$3, %ecx
 1169 01a9 F348AB   		rep stosq
 1170              	.LVL125:
 1171              	.L114:
 1172              		.loc 2 71 10 view .LVU362
 1173              	.LBE78:
 1174              	.LBE80:
1519:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 1175              		.loc 1 1519 7 is_stmt 1 view .LVU363
1519:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 1176              		.loc 1 1519 38 is_stmt 0 view .LVU364
 1177 01ac 43C744A5 		movl	$0, 36(%r13,%r12,4)
 1177      24000000 
 1177      00
 1178              	.L110:
1522:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->ac_tbl_no;
 1179              		.loc 1 1522 5 is_stmt 1 view .LVU365
1522:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->ac_tbl_no;
 1180              		.loc 1 1522 8 is_stmt 0 view .LVU366
 1181 01b5 8B83D001 		movl	464(%rbx), %eax
 1181      0000
 1182 01bb 85C0     		testl	%eax, %eax
 1183 01bd 746D     		je	.L115
1523:fltk-1.3.4-1/jpeg/jchuff.c ****       if (gather_statistics) {
 1184              		.loc 1 1523 7 is_stmt 1 view .LVU367
1523:fltk-1.3.4-1/jpeg/jchuff.c ****       if (gather_statistics) {
 1185              		.loc 1 1523 11 is_stmt 0 view .LVU368
 1186 01bf 4D637F18 		movslq	24(%r15), %r15
 1187              	.LVL126:
1524:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (tbl < 0 || tbl >= NUM_HUFF_TBLS)
 1188              		.loc 1 1524 7 is_stmt 1 view .LVU369
1524:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (tbl < 0 || tbl >= NUM_HUFF_TBLS)
 1189              		.loc 1 1524 10 is_stmt 0 view .LVU370
 1190 01c3 4585F6   		testl	%r14d, %r14d
 1191 01c6 0F84B400 		je	.L116
 1191      0000
1525:fltk-1.3.4-1/jpeg/jchuff.c **** 	  ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
 1192              		.loc 1 1525 2 is_stmt 1 view .LVU371
1525:fltk-1.3.4-1/jpeg/jchuff.c **** 	  ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
 1193              		.loc 1 1525 5 is_stmt 0 view .LVU372
 1194 01cc 4183FF03 		cmpl	$3, %r15d
 1195 01d0 7619     		jbe	.L117
1526:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (entropy->ac_count_ptrs[tbl] == NULL)
 1196              		.loc 1 1526 4 is_stmt 1 view .LVU373
 1197 01d2 488B03   		movq	(%rbx), %rax
 1198 01d5 4889DF   		movq	%rbx, %rdi
 1199 01d8 C7402834 		movl	$52, 40(%rax)
 1199      000000
1526:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (entropy->ac_count_ptrs[tbl] == NULL)
 1200              		.loc 1 1526 4 is_stmt 0 view .LVU374
 1201 01df 488B03   		movq	(%rbx), %rax
 1202 01e2 4489782C 		movl	%r15d, 44(%rax)
 1203 01e6 488B03   		movq	(%rbx), %rax
 1204 01e9 FF10     		call	*(%rax)
 1205              	.LVL127:
 1206              	.L117:
1527:fltk-1.3.4-1/jpeg/jchuff.c **** 	  entropy->ac_count_ptrs[tbl] = (long *)
 1207              		.loc 1 1527 2 is_stmt 1 view .LVU375
 1208 01eb 4F8D7CFD 		leaq	0(%r13,%r15,8), %r15
 1208      00
 1209              	.LVL128:
1527:fltk-1.3.4-1/jpeg/jchuff.c **** 	  entropy->ac_count_ptrs[tbl] = (long *)
 1210              		.loc 1 1527 28 is_stmt 0 view .LVU376
 1211 01f0 498B87A0 		movq	160(%r15), %rax
 1211      000000
1527:fltk-1.3.4-1/jpeg/jchuff.c **** 	  entropy->ac_count_ptrs[tbl] = (long *)
 1212              		.loc 1 1527 5 view .LVU377
 1213 01f7 4885C0   		testq	%rax, %rax
 1214 01fa 0F84A000 		je	.L130
 1214      0000
 1215              	.L118:
1531:fltk-1.3.4-1/jpeg/jchuff.c ****       } else {
 1216              		.loc 1 1531 2 is_stmt 1 view .LVU378
 1217              	.LVL129:
 1218              	.LBB81:
 1219              	.LBI81:
  59:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
 1220              		.loc 2 59 1 view .LVU379
 1221              	.LBB82:
 1222              		.loc 2 71 3 view .LVU380
 1223              		.loc 2 71 10 is_stmt 0 view .LVU381
 1224 0200 488D7808 		leaq	8(%rax), %rdi
 1225 0204 48C70000 		movq	$0, (%rax)
 1225      000000
 1226              		.loc 2 71 10 view .LVU382
 1227 020b 48C78000 		movq	$0, 2048(%rax)
 1227      08000000 
 1227      000000
 1228 0216 4883E7F8 		andq	$-8, %rdi
 1229 021a 4829F8   		subq	%rdi, %rax
 1230 021d 8D880808 		leal	2056(%rax), %ecx
 1230      0000
 1231 0223 4889E8   		movq	%rbp, %rax
 1232 0226 C1E903   		shrl	$3, %ecx
 1233 0229 F348AB   		rep stosq
 1234              	.LVL130:
 1235              	.L115:
 1236              		.loc 2 71 10 view .LVU383
 1237              	.LBE82:
 1238              	.LBE81:
1495:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
 1239              		.loc 1 1495 43 is_stmt 1 discriminator 2 view .LVU384
1495:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
 1240              		.loc 1 1495 16 discriminator 2 view .LVU385
 1241 022c 4983C401 		addq	$1, %r12
 1242              	.LVL131:
1495:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
 1243              		.loc 1 1495 3 is_stmt 0 discriminator 2 view .LVU386
 1244 0230 4439A374 		cmpl	%r12d, 372(%rbx)
 1244      010000
 1245 0237 0F8FDBFE 		jg	.L109
 1245      FFFF
 1246 023d E964FEFF 		jmp	.L119
 1246      FF
 1247              	.LVL132:
 1248              		.p2align 4,,10
 1249 0242 660F1F44 		.p2align 3
 1249      0000
 1250              	.L127:
1472:fltk-1.3.4-1/jpeg/jchuff.c **** 	entropy->pub.encode_mcu = encode_mcu_DC_refine;
 1251              		.loc 1 1472 7 is_stmt 1 view .LVU387
1472:fltk-1.3.4-1/jpeg/jchuff.c **** 	entropy->pub.encode_mcu = encode_mcu_DC_refine;
 1252              		.loc 1 1472 10 is_stmt 0 view .LVU388
 1253 0248 8BBBCC01 		movl	460(%rbx), %edi
 1253      0000
 1254 024e 85FF     		testl	%edi, %edi
 1255 0250 0F85CA00 		jne	.L107
 1255      0000
1473:fltk-1.3.4-1/jpeg/jchuff.c ****       else {
 1256              		.loc 1 1473 2 is_stmt 1 view .LVU389
1473:fltk-1.3.4-1/jpeg/jchuff.c ****       else {
 1257              		.loc 1 1473 26 is_stmt 0 view .LVU390
 1258 0256 488D0500 		leaq	encode_mcu_DC_refine(%rip), %rax
 1258      000000
 1259 025d 49894508 		movq	%rax, 8(%r13)
 1260 0261 E915FEFF 		jmp	.L106
 1260      FF
 1261 0266 662E0F1F 		.p2align 4,,10
 1261      84000000 
 1261      0000
 1262              		.p2align 3
 1263              	.L100:
1490:fltk-1.3.4-1/jpeg/jchuff.c ****     else
 1264              		.loc 1 1490 7 is_stmt 1 view .LVU391
1490:fltk-1.3.4-1/jpeg/jchuff.c ****     else
 1265              		.loc 1 1490 31 is_stmt 0 view .LVU392
 1266 0270 488D0500 		leaq	encode_mcu_gather(%rip), %rax
 1266      000000
 1267 0277 49894508 		movq	%rax, 8(%r13)
 1268 027b E986FEFF 		jmp	.L108
 1268      FF
 1269              	.LVL133:
 1270              		.p2align 4,,10
 1271              		.p2align 3
 1272              	.L116:
1533:fltk-1.3.4-1/jpeg/jchuff.c **** 				& entropy->ac_derived_tbls[tbl]);
 1273              		.loc 1 1533 2 is_stmt 1 view .LVU393
 1274 0280 4963C7   		movslq	%r15d, %rax
 1275 0283 4489FA   		movl	%r15d, %edx
 1276 0286 31F6     		xorl	%esi, %esi
 1277 0288 4889DF   		movq	%rbx, %rdi
 1278 028b 498D4CC5 		leaq	96(%r13,%rax,8), %rcx
 1278      60
 1279 0290 E8000000 		call	jpeg_make_c_derived_tbl
 1279      00
 1280              	.LVL134:
1533:fltk-1.3.4-1/jpeg/jchuff.c **** 				& entropy->ac_derived_tbls[tbl]);
 1281              		.loc 1 1533 2 is_stmt 0 view .LVU394
 1282 0295 EB95     		jmp	.L115
 1283              	.LVL135:
 1284 0297 660F1F84 		.p2align 4,,10
 1284      00000000 
 1284      00
 1285              		.p2align 3
 1286              	.L130:
1528:fltk-1.3.4-1/jpeg/jchuff.c **** 	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1287              		.loc 1 1528 4 is_stmt 1 view .LVU395
1529:fltk-1.3.4-1/jpeg/jchuff.c **** 					257 * SIZEOF(long));
 1288              		.loc 1 1529 7 is_stmt 0 view .LVU396
 1289 02a0 488B4308 		movq	8(%rbx), %rax
 1290 02a4 BA080800 		movl	$2056, %edx
 1290      00
 1291 02a9 BE010000 		movl	$1, %esi
 1291      00
 1292 02ae 4889DF   		movq	%rbx, %rdi
 1293 02b1 FF10     		call	*(%rax)
 1294              	.LVL136:
1528:fltk-1.3.4-1/jpeg/jchuff.c **** 	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1295              		.loc 1 1528 32 view .LVU397
 1296 02b3 498987A0 		movq	%rax, 160(%r15)
 1296      000000
 1297 02ba E941FFFF 		jmp	.L118
 1297      FF
 1298              	.LVL137:
 1299 02bf 90       		.p2align 4,,10
 1300              		.p2align 3
 1301              	.L111:
1515:fltk-1.3.4-1/jpeg/jchuff.c **** 				& entropy->dc_derived_tbls[tbl]);
 1302              		.loc 1 1515 2 is_stmt 1 view .LVU398
 1303 02c0 4863C2   		movslq	%edx, %rax
 1304 02c3 BE010000 		movl	$1, %esi
 1304      00
 1305 02c8 4889DF   		movq	%rbx, %rdi
 1306 02cb 498D4CC5 		leaq	64(%r13,%rax,8), %rcx
 1306      40
 1307 02d0 E8000000 		call	jpeg_make_c_derived_tbl
 1307      00
 1308              	.LVL138:
1515:fltk-1.3.4-1/jpeg/jchuff.c **** 				& entropy->dc_derived_tbls[tbl]);
 1309              		.loc 1 1515 2 is_stmt 0 view .LVU399
 1310 02d5 E9D2FEFF 		jmp	.L114
 1310      FF
 1311 02da 660F1F44 		.p2align 4,,10
 1311      0000
 1312              		.p2align 3
 1313              	.L129:
1509:fltk-1.3.4-1/jpeg/jchuff.c **** 					257 * SIZEOF(long));
 1314              		.loc 1 1509 7 view .LVU400
 1315 02e0 488B4308 		movq	8(%rbx), %rax
 1316 02e4 48894C24 		movq	%rcx, 8(%rsp)
 1316      08
1508:fltk-1.3.4-1/jpeg/jchuff.c **** 	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1317              		.loc 1 1508 4 is_stmt 1 view .LVU401
1509:fltk-1.3.4-1/jpeg/jchuff.c **** 					257 * SIZEOF(long));
 1318              		.loc 1 1509 7 is_stmt 0 view .LVU402
 1319 02e9 BA080800 		movl	$2056, %edx
 1319      00
 1320 02ee 4889DF   		movq	%rbx, %rdi
 1321 02f1 BE010000 		movl	$1, %esi
 1321      00
 1322 02f6 FF10     		call	*(%rax)
 1323              	.LVL139:
1508:fltk-1.3.4-1/jpeg/jchuff.c **** 	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1324              		.loc 1 1508 32 view .LVU403
 1325 02f8 488B4C24 		movq	8(%rsp), %rcx
 1325      08
 1326 02fd 48898180 		movq	%rax, 128(%rcx)
 1326      000000
 1327 0304 E977FEFF 		jmp	.L113
 1327      FF
 1328              	.LVL140:
 1329 0309 0F1F8000 		.p2align 4,,10
 1329      000000
 1330              		.p2align 3
 1331              	.L128:
1468:fltk-1.3.4-1/jpeg/jchuff.c ****       else
 1332              		.loc 1 1468 2 is_stmt 1 view .LVU404
1468:fltk-1.3.4-1/jpeg/jchuff.c ****       else
 1333              		.loc 1 1468 26 is_stmt 0 view .LVU405
 1334 0310 488D0500 		leaq	encode_mcu_DC_first(%rip), %rax
 1334      000000
 1335 0317 49894508 		movq	%rax, 8(%r13)
 1336 031b E95BFDFF 		jmp	.L106
 1336      FF
 1337              		.p2align 4,,10
 1338              		.p2align 3
 1339              	.L107:
1475:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* AC refinement needs a correction bit buffer */
 1340              		.loc 1 1475 2 is_stmt 1 view .LVU406
1475:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* AC refinement needs a correction bit buffer */
 1341              		.loc 1 1475 26 is_stmt 0 view .LVU407
 1342 0320 488D0500 		leaq	encode_mcu_AC_refine(%rip), %rax
 1342      000000
1477:fltk-1.3.4-1/jpeg/jchuff.c **** 	  entropy->bit_buffer = (char *)
 1343              		.loc 1 1477 5 view .LVU408
 1344 0327 4983BDF0 		cmpq	$0, 240(%r13)
 1344      00000000 
1475:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* AC refinement needs a correction bit buffer */
 1345              		.loc 1 1475 26 view .LVU409
 1346 032f 49894508 		movq	%rax, 8(%r13)
1477:fltk-1.3.4-1/jpeg/jchuff.c **** 	  entropy->bit_buffer = (char *)
 1347              		.loc 1 1477 2 is_stmt 1 view .LVU410
1477:fltk-1.3.4-1/jpeg/jchuff.c **** 	  entropy->bit_buffer = (char *)
 1348              		.loc 1 1477 5 is_stmt 0 view .LVU411
 1349 0333 0F8542FD 		jne	.L106
 1349      FFFF
1478:fltk-1.3.4-1/jpeg/jchuff.c **** 	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1350              		.loc 1 1478 4 is_stmt 1 view .LVU412
1479:fltk-1.3.4-1/jpeg/jchuff.c **** 					MAX_CORR_BITS * SIZEOF(char));
 1351              		.loc 1 1479 7 is_stmt 0 view .LVU413
 1352 0339 488B4308 		movq	8(%rbx), %rax
 1353 033d BAE80300 		movl	$1000, %edx
 1353      00
 1354 0342 BE010000 		movl	$1, %esi
 1354      00
 1355              	.LVL141:
1479:fltk-1.3.4-1/jpeg/jchuff.c **** 					MAX_CORR_BITS * SIZEOF(char));
 1356              		.loc 1 1479 7 view .LVU414
 1357 0347 4889DF   		movq	%rbx, %rdi
 1358 034a FF10     		call	*(%rax)
 1359              	.LVL142:
1478:fltk-1.3.4-1/jpeg/jchuff.c **** 	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1360              		.loc 1 1478 24 view .LVU415
 1361 034c 498985F0 		movq	%rax, 240(%r13)
 1361      000000
 1362 0353 E923FDFF 		jmp	.L106
 1362      FF
 1363              		.cfi_endproc
 1364              	.LFE75:
 1366              		.section	.text.jpeg_gen_optimal_table,"ax",@progbits
 1367              		.p2align 4
 1369              	jpeg_gen_optimal_table:
 1370              	.LVL143:
 1371              	.LFB73:
1254:fltk-1.3.4-1/jpeg/jchuff.c **** #define MAX_CLEN 32		/* assumed maximum initial code length */
 1372              		.loc 1 1254 1 is_stmt 1 view -0
 1373              		.cfi_startproc
1254:fltk-1.3.4-1/jpeg/jchuff.c **** #define MAX_CLEN 32		/* assumed maximum initial code length */
 1374              		.loc 1 1254 1 is_stmt 0 view .LVU417
 1375 0000 4157     		pushq	%r15
 1376              		.cfi_def_cfa_offset 16
 1377              		.cfi_offset 15, -16
 1378              	.LBB83:
 1379              	.LBB84:
 1380              		.loc 2 71 10 view .LVU418
 1381 0002 B9800000 		movl	$128, %ecx
 1381      00
 1382              	.LBE84:
 1383              	.LBE83:
 1384              	.LBB88:
 1385              	.LBB89:
 1386 0007 660FEFC0 		pxor	%xmm0, %xmm0
 1387              	.LBE89:
 1388              	.LBE88:
1254:fltk-1.3.4-1/jpeg/jchuff.c **** #define MAX_CLEN 32		/* assumed maximum initial code length */
 1389              		.loc 1 1254 1 view .LVU419
 1390 000b 4989D0   		movq	%rdx, %r8
 1391 000e 4156     		pushq	%r14
 1392              		.cfi_def_cfa_offset 24
 1393              		.cfi_offset 14, -24
 1394 0010 4155     		pushq	%r13
 1395              		.cfi_def_cfa_offset 32
 1396              		.cfi_offset 13, -32
 1397 0012 4154     		pushq	%r12
 1398              		.cfi_def_cfa_offset 40
 1399              		.cfi_offset 12, -40
 1400 0014 4989FC   		movq	%rdi, %r12
 1401 0017 55       		pushq	%rbp
 1402              		.cfi_def_cfa_offset 48
 1403              		.cfi_offset 6, -48
 1404 0018 53       		pushq	%rbx
 1405              		.cfi_def_cfa_offset 56
 1406              		.cfi_offset 3, -56
 1407 0019 4889F3   		movq	%rsi, %rbx
 1408 001c 4881EC58 		subq	$2136, %rsp
 1408      080000
 1409              		.cfi_def_cfa_offset 2192
1254:fltk-1.3.4-1/jpeg/jchuff.c **** #define MAX_CLEN 32		/* assumed maximum initial code length */
 1410              		.loc 1 1254 1 view .LVU420
 1411 0023 64488B04 		movq	%fs:40, %rax
 1411      25280000 
 1411      00
 1412 002c 48898424 		movq	%rax, 2120(%rsp)
 1412      48080000 
 1413 0034 31C0     		xorl	%eax, %eax
1256:fltk-1.3.4-1/jpeg/jchuff.c ****   int codesize[257];		/* codesize[k] = code length of symbol k */
 1414              		.loc 1 1256 3 is_stmt 1 view .LVU421
1257:fltk-1.3.4-1/jpeg/jchuff.c ****   int others[257];		/* next symbol in current branch of tree */
 1415              		.loc 1 1257 3 view .LVU422
1258:fltk-1.3.4-1/jpeg/jchuff.c ****   int c1, c2;
 1416              		.loc 1 1258 3 view .LVU423
1259:fltk-1.3.4-1/jpeg/jchuff.c ****   int p, i, j;
 1417              		.loc 1 1259 3 view .LVU424
1260:fltk-1.3.4-1/jpeg/jchuff.c ****   long v;
 1418              		.loc 1 1260 3 view .LVU425
1261:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1419              		.loc 1 1261 3 view .LVU426
1265:fltk-1.3.4-1/jpeg/jchuff.c ****   MEMZERO(codesize, SIZEOF(codesize));
 1420              		.loc 1 1265 3 view .LVU427
 1421              	.LVL144:
 1422              	.LBB93:
 1423              	.LBI88:
  59:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
 1424              		.loc 2 59 1 view .LVU428
 1425              	.LBB90:
 1426              		.loc 2 71 3 view .LVU429
 1427              	.LBE90:
 1428              	.LBE93:
 1429              	.LBB94:
 1430              	.LBB85:
 1431              		.loc 2 71 10 is_stmt 0 view .LVU430
 1432 0036 4889E5   		movq	%rsp, %rbp
 1433              	.LBE85:
 1434              	.LBE94:
 1435              	.LBB95:
 1436              	.LBB91:
 1437 0039 C6842440 		movb	$0, 2112(%rsp)
 1437      08000000 
 1438              	.LVL145:
 1439              		.loc 2 71 10 view .LVU431
 1440              	.LBE91:
 1441              	.LBE95:
1266:fltk-1.3.4-1/jpeg/jchuff.c ****   for (i = 0; i < 257; i++)
 1442              		.loc 1 1266 3 is_stmt 1 view .LVU432
 1443              	.LBB96:
 1444              	.LBI83:
  59:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
 1445              		.loc 2 59 1 view .LVU433
 1446              	.LBB86:
 1447              		.loc 2 71 3 view .LVU434
 1448 0041 488D9424 		leaq	2068(%rsp), %rdx
 1448      14080000 
 1449              	.LVL146:
 1450              		.loc 2 71 10 is_stmt 0 view .LVU435
 1451 0049 4889EF   		movq	%rbp, %rdi
 1452              	.LVL147:
 1453              		.loc 2 71 10 view .LVU436
 1454              	.LBE86:
 1455              	.LBE96:
 1456              	.LBB97:
 1457              	.LBB92:
 1458 004c 0F298424 		movaps	%xmm0, 2080(%rsp)
 1458      20080000 
 1459 0054 0F298424 		movaps	%xmm0, 2096(%rsp)
 1459      30080000 
 1460              	.LBE92:
 1461              	.LBE97:
 1462              	.LBB98:
 1463              	.LBB87:
 1464 005c F348AB   		rep stosq
 1465 005f 488D8424 		leaq	1040(%rsp), %rax
 1465      10040000 
 1466 0067 C7070000 		movl	$0, (%rdi)
 1466      0000
 1467              	.LVL148:
 1468              		.loc 2 71 10 view .LVU437
 1469              	.LBE87:
 1470              	.LBE98:
1267:fltk-1.3.4-1/jpeg/jchuff.c ****     others[i] = -1;		/* init links to empty */
 1471              		.loc 1 1267 3 is_stmt 1 view .LVU438
1267:fltk-1.3.4-1/jpeg/jchuff.c ****     others[i] = -1;		/* init links to empty */
 1472              		.loc 1 1267 15 view .LVU439
 1473 006d 0F1F00   		.p2align 4,,10
 1474              		.p2align 3
 1475              	.L132:
1268:fltk-1.3.4-1/jpeg/jchuff.c ****   
 1476              		.loc 1 1268 5 discriminator 3 view .LVU440
1268:fltk-1.3.4-1/jpeg/jchuff.c ****   
 1477              		.loc 1 1268 15 is_stmt 0 discriminator 3 view .LVU441
 1478 0070 C700FFFF 		movl	$-1, (%rax)
 1478      FFFF
1267:fltk-1.3.4-1/jpeg/jchuff.c ****     others[i] = -1;		/* init links to empty */
 1479              		.loc 1 1267 24 is_stmt 1 discriminator 3 view .LVU442
1267:fltk-1.3.4-1/jpeg/jchuff.c ****     others[i] = -1;		/* init links to empty */
 1480              		.loc 1 1267 15 discriminator 3 view .LVU443
 1481 0076 4883C004 		addq	$4, %rax
1267:fltk-1.3.4-1/jpeg/jchuff.c ****     others[i] = -1;		/* init links to empty */
 1482              		.loc 1 1267 3 is_stmt 0 discriminator 3 view .LVU444
 1483 007a 4839D0   		cmpq	%rdx, %rax
 1484 007d 75F1     		jne	.L132
1270:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Including the pseudo-symbol 256 in the Huffman procedure guarantees
 1485              		.loc 1 1270 3 is_stmt 1 view .LVU445
1270:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Including the pseudo-symbol 256 in the Huffman procedure guarantees
 1486              		.loc 1 1270 13 is_stmt 0 view .LVU446
 1487 007f 49C78000 		movq	$1, 2048(%r8)
 1487      08000001 
 1487      000000
 1488              	.LVL149:
 1489              	.L143:
1278:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Find the smallest nonzero frequency, set c1 = its symbol */
 1490              		.loc 1 1278 3 is_stmt 1 view .LVU447
1281:fltk-1.3.4-1/jpeg/jchuff.c ****     v = 1000000000L;
 1491              		.loc 1 1281 5 view .LVU448
1282:fltk-1.3.4-1/jpeg/jchuff.c ****     for (i = 0; i <= 256; i++) {
 1492              		.loc 1 1282 5 view .LVU449
1283:fltk-1.3.4-1/jpeg/jchuff.c ****       if (freq[i] && freq[i] <= v) {
 1493              		.loc 1 1283 5 view .LVU450
1283:fltk-1.3.4-1/jpeg/jchuff.c ****       if (freq[i] && freq[i] <= v) {
 1494              		.loc 1 1283 17 view .LVU451
1254:fltk-1.3.4-1/jpeg/jchuff.c **** #define MAX_CLEN 32		/* assumed maximum initial code length */
 1495              		.loc 1 1254 1 is_stmt 0 view .LVU452
 1496 008a 31C0     		xorl	%eax, %eax
1282:fltk-1.3.4-1/jpeg/jchuff.c ****     for (i = 0; i <= 256; i++) {
 1497              		.loc 1 1282 7 view .LVU453
 1498 008c B900CA9A 		movl	$1000000000, %ecx
 1498      3B
1281:fltk-1.3.4-1/jpeg/jchuff.c ****     v = 1000000000L;
 1499              		.loc 1 1281 8 view .LVU454
 1500 0091 BEFFFFFF 		movl	$-1, %esi
 1500      FF
 1501              	.LVL150:
 1502 0096 662E0F1F 		.p2align 4,,10
 1502      84000000 
 1502      0000
 1503              		.p2align 3
 1504              	.L135:
1284:fltk-1.3.4-1/jpeg/jchuff.c **** 	v = freq[i];
 1505              		.loc 1 1284 7 is_stmt 1 view .LVU455
1284:fltk-1.3.4-1/jpeg/jchuff.c **** 	v = freq[i];
 1506              		.loc 1 1284 15 is_stmt 0 view .LVU456
 1507 00a0 498B14C0 		movq	(%r8,%rax,8), %rdx
1284:fltk-1.3.4-1/jpeg/jchuff.c **** 	v = freq[i];
 1508              		.loc 1 1284 19 view .LVU457
 1509 00a4 4839CA   		cmpq	%rcx, %rdx
 1510 00a7 7F0A     		jg	.L133
1284:fltk-1.3.4-1/jpeg/jchuff.c **** 	v = freq[i];
 1511              		.loc 1 1284 10 view .LVU458
 1512 00a9 4885D2   		testq	%rdx, %rdx
 1513 00ac 480F45CA 		cmovne	%rdx, %rcx
 1514              	.LVL151:
1284:fltk-1.3.4-1/jpeg/jchuff.c **** 	v = freq[i];
 1515              		.loc 1 1284 10 view .LVU459
 1516 00b0 0F45F0   		cmovne	%eax, %esi
 1517              	.L133:
 1518              	.LVL152:
1283:fltk-1.3.4-1/jpeg/jchuff.c ****       if (freq[i] && freq[i] <= v) {
 1519              		.loc 1 1283 27 is_stmt 1 discriminator 2 view .LVU460
1283:fltk-1.3.4-1/jpeg/jchuff.c ****       if (freq[i] && freq[i] <= v) {
 1520              		.loc 1 1283 17 discriminator 2 view .LVU461
 1521 00b3 4883C001 		addq	$1, %rax
 1522              	.LVL153:
1283:fltk-1.3.4-1/jpeg/jchuff.c ****       if (freq[i] && freq[i] <= v) {
 1523              		.loc 1 1283 5 is_stmt 0 discriminator 2 view .LVU462
 1524 00b7 483D0101 		cmpq	$257, %rax
 1524      0000
 1525 00bd 75E1     		jne	.L135
 1526 00bf 31C0     		xorl	%eax, %eax
1293:fltk-1.3.4-1/jpeg/jchuff.c ****     for (i = 0; i <= 256; i++) {
 1527              		.loc 1 1293 7 view .LVU463
 1528 00c1 B900CA9A 		movl	$1000000000, %ecx
 1528      3B
 1529              	.LVL154:
1292:fltk-1.3.4-1/jpeg/jchuff.c ****     v = 1000000000L;
 1530              		.loc 1 1292 8 view .LVU464
 1531 00c6 41BAFFFF 		movl	$-1, %r10d
 1531      FFFF
 1532 00cc 0F1F4000 		.p2align 4,,10
 1533              		.p2align 3
 1534              	.L138:
 1535              	.LVL155:
1295:fltk-1.3.4-1/jpeg/jchuff.c **** 	v = freq[i];
 1536              		.loc 1 1295 7 is_stmt 1 view .LVU465
1295:fltk-1.3.4-1/jpeg/jchuff.c **** 	v = freq[i];
 1537              		.loc 1 1295 15 is_stmt 0 view .LVU466
 1538 00d0 498B14C0 		movq	(%r8,%rax,8), %rdx
1295:fltk-1.3.4-1/jpeg/jchuff.c **** 	v = freq[i];
 1539              		.loc 1 1295 10 view .LVU467
 1540 00d4 4885D2   		testq	%rdx, %rdx
 1541 00d7 410F95C1 		setne	%r9b
1295:fltk-1.3.4-1/jpeg/jchuff.c **** 	v = freq[i];
 1542              		.loc 1 1295 19 view .LVU468
 1543 00db 4839CA   		cmpq	%rcx, %rdx
 1544 00de 400F9EC7 		setle	%dil
1295:fltk-1.3.4-1/jpeg/jchuff.c **** 	v = freq[i];
 1545              		.loc 1 1295 35 view .LVU469
 1546 00e2 4184F9   		testb	%dil, %r9b
 1547 00e5 740A     		je	.L136
 1548 00e7 39C6     		cmpl	%eax, %esi
 1549 00e9 480F45CA 		cmovne	%rdx, %rcx
 1550              	.LVL156:
1295:fltk-1.3.4-1/jpeg/jchuff.c **** 	v = freq[i];
 1551              		.loc 1 1295 35 view .LVU470
 1552 00ed 440F45D0 		cmovne	%eax, %r10d
 1553              	.L136:
 1554              	.LVL157:
1294:fltk-1.3.4-1/jpeg/jchuff.c ****       if (freq[i] && freq[i] <= v && i != c1) {
 1555              		.loc 1 1294 27 is_stmt 1 discriminator 2 view .LVU471
1294:fltk-1.3.4-1/jpeg/jchuff.c ****       if (freq[i] && freq[i] <= v && i != c1) {
 1556              		.loc 1 1294 17 discriminator 2 view .LVU472
 1557 00f1 4883C001 		addq	$1, %rax
 1558              	.LVL158:
1294:fltk-1.3.4-1/jpeg/jchuff.c ****       if (freq[i] && freq[i] <= v && i != c1) {
 1559              		.loc 1 1294 5 is_stmt 0 discriminator 2 view .LVU473
 1560 00f5 483D0101 		cmpq	$257, %rax
 1560      0000
 1561 00fb 75D3     		jne	.L138
1302:fltk-1.3.4-1/jpeg/jchuff.c ****       break;
 1562              		.loc 1 1302 5 is_stmt 1 view .LVU474
1302:fltk-1.3.4-1/jpeg/jchuff.c ****       break;
 1563              		.loc 1 1302 8 is_stmt 0 view .LVU475
 1564 00fd 4183FAFF 		cmpl	$-1, %r10d
 1565 0101 747A     		je	.L139
1306:fltk-1.3.4-1/jpeg/jchuff.c ****     freq[c2] = 0;
 1566              		.loc 1 1306 5 is_stmt 1 view .LVU476
1306:fltk-1.3.4-1/jpeg/jchuff.c ****     freq[c2] = 0;
 1567              		.loc 1 1306 21 is_stmt 0 view .LVU477
 1568 0103 4963CA   		movslq	%r10d, %rcx
 1569              	.LVL159:
1306:fltk-1.3.4-1/jpeg/jchuff.c ****     freq[c2] = 0;
 1570              		.loc 1 1306 14 view .LVU478
 1571 0106 4863F6   		movslq	%esi, %rsi
1306:fltk-1.3.4-1/jpeg/jchuff.c ****     freq[c2] = 0;
 1572              		.loc 1 1306 21 view .LVU479
 1573 0109 498D04C8 		leaq	(%r8,%rcx,8), %rax
1310:fltk-1.3.4-1/jpeg/jchuff.c ****     while (others[c1] >= 0) {
 1574              		.loc 1 1310 17 view .LVU480
 1575 010d 8304B401 		addl	$1, (%rsp,%rsi,4)
1306:fltk-1.3.4-1/jpeg/jchuff.c ****     freq[c2] = 0;
 1576              		.loc 1 1306 14 view .LVU481
 1577 0111 488B10   		movq	(%rax), %rdx
 1578 0114 490114F0 		addq	%rdx, (%r8,%rsi,8)
1307:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1579              		.loc 1 1307 5 is_stmt 1 view .LVU482
1307:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1580              		.loc 1 1307 14 is_stmt 0 view .LVU483
 1581 0118 48C70000 		movq	$0, (%rax)
 1581      000000
1310:fltk-1.3.4-1/jpeg/jchuff.c ****     while (others[c1] >= 0) {
 1582              		.loc 1 1310 5 is_stmt 1 view .LVU484
1311:fltk-1.3.4-1/jpeg/jchuff.c ****       c1 = others[c1];
 1583              		.loc 1 1311 5 view .LVU485
1311:fltk-1.3.4-1/jpeg/jchuff.c ****       c1 = others[c1];
 1584              		.loc 1 1311 11 view .LVU486
1311:fltk-1.3.4-1/jpeg/jchuff.c ****       c1 = others[c1];
 1585              		.loc 1 1311 18 is_stmt 0 view .LVU487
 1586 011f 8B84B410 		movl	1040(%rsp,%rsi,4), %eax
 1586      040000
1311:fltk-1.3.4-1/jpeg/jchuff.c ****       c1 = others[c1];
 1587              		.loc 1 1311 11 view .LVU488
 1588 0126 85C0     		testl	%eax, %eax
 1589 0128 781B     		js	.L140
 1590              	.LVL160:
 1591 012a 660F1F44 		.p2align 4,,10
 1591      0000
 1592              		.p2align 3
 1593              	.L141:
1312:fltk-1.3.4-1/jpeg/jchuff.c ****       codesize[c1]++;
 1594              		.loc 1 1312 7 is_stmt 1 view .LVU489
1313:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 1595              		.loc 1 1313 7 view .LVU490
1313:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 1596              		.loc 1 1313 19 is_stmt 0 view .LVU491
 1597 0130 4863D0   		movslq	%eax, %rdx
1311:fltk-1.3.4-1/jpeg/jchuff.c ****       c1 = others[c1];
 1598              		.loc 1 1311 18 view .LVU492
 1599 0133 8B849410 		movl	1040(%rsp,%rdx,4), %eax
 1599      040000
 1600              	.LVL161:
1313:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 1601              		.loc 1 1313 19 view .LVU493
 1602 013a 83049401 		addl	$1, (%rsp,%rdx,4)
 1603              	.LVL162:
1311:fltk-1.3.4-1/jpeg/jchuff.c ****       c1 = others[c1];
 1604              		.loc 1 1311 11 is_stmt 1 view .LVU494
 1605 013e 85C0     		testl	%eax, %eax
 1606 0140 79EE     		jns	.L141
 1607 0142 4889D6   		movq	%rdx, %rsi
 1608              	.L140:
1316:fltk-1.3.4-1/jpeg/jchuff.c ****     
 1609              		.loc 1 1316 5 view .LVU495
1316:fltk-1.3.4-1/jpeg/jchuff.c ****     
 1610              		.loc 1 1316 16 is_stmt 0 view .LVU496
 1611 0145 448994B4 		movl	%r10d, 1040(%rsp,%rsi,4)
 1611      10040000 
1319:fltk-1.3.4-1/jpeg/jchuff.c ****     while (others[c2] >= 0) {
 1612              		.loc 1 1319 5 is_stmt 1 view .LVU497
1320:fltk-1.3.4-1/jpeg/jchuff.c ****       c2 = others[c2];
 1613              		.loc 1 1320 18 is_stmt 0 view .LVU498
 1614 014d 4863848C 		movslq	1040(%rsp,%rcx,4), %rax
 1614      10040000 
1319:fltk-1.3.4-1/jpeg/jchuff.c ****     while (others[c2] >= 0) {
 1615              		.loc 1 1319 17 view .LVU499
 1616 0155 83048C01 		addl	$1, (%rsp,%rcx,4)
1320:fltk-1.3.4-1/jpeg/jchuff.c ****       c2 = others[c2];
 1617              		.loc 1 1320 5 is_stmt 1 view .LVU500
1320:fltk-1.3.4-1/jpeg/jchuff.c ****       c2 = others[c2];
 1618              		.loc 1 1320 11 view .LVU501
 1619 0159 85C0     		testl	%eax, %eax
 1620 015b 0F8829FF 		js	.L143
 1620      FFFF
 1621              	.LVL163:
 1622              		.p2align 4,,10
 1623 0161 0F1F8000 		.p2align 3
 1623      000000
 1624              	.L142:
1321:fltk-1.3.4-1/jpeg/jchuff.c ****       codesize[c2]++;
 1625              		.loc 1 1321 7 view .LVU502
1322:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 1626              		.loc 1 1322 7 view .LVU503
1322:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 1627              		.loc 1 1322 19 is_stmt 0 view .LVU504
 1628 0168 83048401 		addl	$1, (%rsp,%rax,4)
1320:fltk-1.3.4-1/jpeg/jchuff.c ****       c2 = others[c2];
 1629              		.loc 1 1320 11 is_stmt 1 view .LVU505
1320:fltk-1.3.4-1/jpeg/jchuff.c ****       c2 = others[c2];
 1630              		.loc 1 1320 18 is_stmt 0 view .LVU506
 1631 016c 48638484 		movslq	1040(%rsp,%rax,4), %rax
 1631      10040000 
 1632              	.LVL164:
1320:fltk-1.3.4-1/jpeg/jchuff.c ****       c2 = others[c2];
 1633              		.loc 1 1320 11 view .LVU507
 1634 0174 85C0     		testl	%eax, %eax
 1635 0176 79F0     		jns	.L142
 1636 0178 E90DFFFF 		jmp	.L143
 1636      FF
 1637              	.LVL165:
 1638              	.L139:
1320:fltk-1.3.4-1/jpeg/jchuff.c ****       c2 = others[c2];
 1639              		.loc 1 1320 11 view .LVU508
 1640 017d 4989EE   		movq	%rbp, %r14
 1641 0180 4C8DBC24 		leaq	1028(%rsp), %r15
 1641      04040000 
 1642              	.LVL166:
 1643 0188 0F1F8400 		.p2align 4,,10
 1643      00000000 
 1644              		.p2align 3
 1645              	.L147:
1328:fltk-1.3.4-1/jpeg/jchuff.c ****       /* The JPEG standard seems to think that this can't happen, */
 1646              		.loc 1 1328 5 is_stmt 1 view .LVU509
1328:fltk-1.3.4-1/jpeg/jchuff.c ****       /* The JPEG standard seems to think that this can't happen, */
 1647              		.loc 1 1328 17 is_stmt 0 view .LVU510
 1648 0190 4D632E   		movslq	(%r14), %r13
1328:fltk-1.3.4-1/jpeg/jchuff.c ****       /* The JPEG standard seems to think that this can't happen, */
 1649              		.loc 1 1328 8 view .LVU511
 1650 0193 4585ED   		testl	%r13d, %r13d
 1651 0196 7423     		je	.L145
1331:fltk-1.3.4-1/jpeg/jchuff.c **** 	ERREXIT(cinfo, JERR_HUFF_CLEN_OVERFLOW);
 1652              		.loc 1 1331 7 is_stmt 1 view .LVU512
1331:fltk-1.3.4-1/jpeg/jchuff.c **** 	ERREXIT(cinfo, JERR_HUFF_CLEN_OVERFLOW);
 1653              		.loc 1 1331 10 is_stmt 0 view .LVU513
 1654 0198 4183FD20 		cmpl	$32, %r13d
 1655 019c 7E14     		jle	.L146
1332:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1656              		.loc 1 1332 2 is_stmt 1 view .LVU514
 1657 019e 498B0424 		movq	(%r12), %rax
 1658 01a2 4C89E7   		movq	%r12, %rdi
 1659 01a5 C7402828 		movl	$40, 40(%rax)
 1659      000000
 1660 01ac 498B0424 		movq	(%r12), %rax
 1661 01b0 FF10     		call	*(%rax)
 1662              	.LVL167:
 1663              	.L146:
1334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 1664              		.loc 1 1334 7 view .LVU515
1334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 1665              		.loc 1 1334 24 is_stmt 0 view .LVU516
 1666 01b2 4280842C 		addb	$1, 2080(%rsp,%r13)
 1666      20080000 
 1666      01
 1667              	.L145:
1327:fltk-1.3.4-1/jpeg/jchuff.c ****     if (codesize[i]) {
 1668              		.loc 1 1327 25 is_stmt 1 discriminator 2 view .LVU517
1327:fltk-1.3.4-1/jpeg/jchuff.c ****     if (codesize[i]) {
 1669              		.loc 1 1327 15 discriminator 2 view .LVU518
 1670 01bb 4983C604 		addq	$4, %r14
1327:fltk-1.3.4-1/jpeg/jchuff.c ****     if (codesize[i]) {
 1671              		.loc 1 1327 3 is_stmt 0 discriminator 2 view .LVU519
 1672 01bf 4D39FE   		cmpq	%r15, %r14
 1673 01c2 75CC     		jne	.L147
1327:fltk-1.3.4-1/jpeg/jchuff.c ****     if (codesize[i]) {
 1674              		.loc 1 1327 3 view .LVU520
 1675 01c4 488DB424 		leaq	2112(%rsp), %rsi
 1675      40080000 
 1676 01cc 41BB1F00 		movl	$31, %r11d
 1676      0000
 1677 01d2 41BA1E00 		movl	$30, %r10d
 1677      0000
 1678 01d8 4C8DA424 		leaq	2096(%rsp), %r12
 1678      30080000 
 1679              	.LVL168:
1327:fltk-1.3.4-1/jpeg/jchuff.c ****     if (codesize[i]) {
 1680              		.loc 1 1327 3 view .LVU521
 1681 01e0 4129F3   		subl	%esi, %r11d
 1682 01e3 4129F2   		subl	%esi, %r10d
 1683              	.L152:
 1684              	.LVL169:
1350:fltk-1.3.4-1/jpeg/jchuff.c ****       j = i - 2;		/* find length of new prefix to be used */
 1685              		.loc 1 1350 11 is_stmt 1 view .LVU522
1350:fltk-1.3.4-1/jpeg/jchuff.c ****       j = i - 2;		/* find length of new prefix to be used */
 1686              		.loc 1 1350 16 is_stmt 0 view .LVU523
 1687 01e6 0FB63E   		movzbl	(%rsi), %edi
 1688 01e9 458D0C33 		leal	(%r11,%rsi), %r9d
 1689 01ed 458D0432 		leal	(%r10,%rsi), %r8d
1350:fltk-1.3.4-1/jpeg/jchuff.c ****       j = i - 2;		/* find length of new prefix to be used */
 1690              		.loc 1 1350 11 view .LVU524
 1691 01f1 4084FF   		testb	%dil, %dil
 1692 01f4 744E     		je	.L156
 1693 01f6 662E0F1F 		.p2align 4,,10
 1693      84000000 
 1693      0000
 1694              		.p2align 3
 1695              	.L151:
1351:fltk-1.3.4-1/jpeg/jchuff.c ****       while (bits[j] == 0)
 1696              		.loc 1 1351 7 is_stmt 1 view .LVU525
 1697              	.LVL170:
1352:fltk-1.3.4-1/jpeg/jchuff.c **** 	j--;
 1698              		.loc 1 1352 7 view .LVU526
1352:fltk-1.3.4-1/jpeg/jchuff.c **** 	j--;
 1699              		.loc 1 1352 13 view .LVU527
 1700 0200 807EFE00 		cmpb	$0, -2(%rsi)
 1701 0204 0F85F100 		jne	.L164
 1701      0000
 1702 020a 4889F2   		movq	%rsi, %rdx
1351:fltk-1.3.4-1/jpeg/jchuff.c ****       while (bits[j] == 0)
 1703              		.loc 1 1351 9 is_stmt 0 view .LVU528
 1704 020d 4489C0   		movl	%r8d, %eax
 1705              	.LVL171:
 1706              		.p2align 4,,10
 1707              		.p2align 3
 1708              	.L150:
1353:fltk-1.3.4-1/jpeg/jchuff.c ****       
 1709              		.loc 1 1353 2 is_stmt 1 view .LVU529
 1710 0210 4883EA01 		subq	$1, %rdx
 1711 0214 4863C8   		movslq	%eax, %rcx
1353:fltk-1.3.4-1/jpeg/jchuff.c ****       
 1712              		.loc 1 1353 3 is_stmt 0 view .LVU530
 1713 0217 83E801   		subl	$1, %eax
 1714              	.LVL172:
1352:fltk-1.3.4-1/jpeg/jchuff.c **** 	j--;
 1715              		.loc 1 1352 13 is_stmt 1 view .LVU531
 1716 021a 807AFE00 		cmpb	$0, -2(%rdx)
 1717 021e 74F0     		je	.L150
 1718              	.LVL173:
 1719              	.L149:
1355:fltk-1.3.4-1/jpeg/jchuff.c ****       bits[i-1]++;		/* one goes in this length */
 1720              		.loc 1 1355 7 view .LVU532
1355:fltk-1.3.4-1/jpeg/jchuff.c ****       bits[i-1]++;		/* one goes in this length */
 1721              		.loc 1 1355 15 is_stmt 0 view .LVU533
 1722 0220 83EF02   		subl	$2, %edi
1358:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 1723              		.loc 1 1358 14 view .LVU534
 1724 0223 4898     		cltq
1356:fltk-1.3.4-1/jpeg/jchuff.c ****       bits[j+1] += 2;		/* two new symbols in this length */
 1725              		.loc 1 1356 16 view .LVU535
 1726 0225 8046FF01 		addb	$1, -1(%rsi)
1355:fltk-1.3.4-1/jpeg/jchuff.c ****       bits[i-1]++;		/* one goes in this length */
 1727              		.loc 1 1355 15 view .LVU536
 1728 0229 40883E   		movb	%dil, (%rsi)
1356:fltk-1.3.4-1/jpeg/jchuff.c ****       bits[j+1] += 2;		/* two new symbols in this length */
 1729              		.loc 1 1356 7 is_stmt 1 view .LVU537
1357:fltk-1.3.4-1/jpeg/jchuff.c ****       bits[j]--;		/* symbol of this length is now a prefix */
 1730              		.loc 1 1357 7 view .LVU538
1357:fltk-1.3.4-1/jpeg/jchuff.c ****       bits[j]--;		/* symbol of this length is now a prefix */
 1731              		.loc 1 1357 17 is_stmt 0 view .LVU539
 1732 022c 80840C20 		addb	$2, 2080(%rsp,%rcx)
 1732      08000002 
1358:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 1733              		.loc 1 1358 7 is_stmt 1 view .LVU540
1358:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 1734              		.loc 1 1358 14 is_stmt 0 view .LVU541
 1735 0234 80AC0420 		subb	$1, 2080(%rsp,%rax)
 1735      08000001 
1350:fltk-1.3.4-1/jpeg/jchuff.c ****       j = i - 2;		/* find length of new prefix to be used */
 1736              		.loc 1 1350 11 is_stmt 1 view .LVU542
1350:fltk-1.3.4-1/jpeg/jchuff.c ****       j = i - 2;		/* find length of new prefix to be used */
 1737              		.loc 1 1350 16 is_stmt 0 view .LVU543
 1738 023c 0FB63E   		movzbl	(%rsi), %edi
1350:fltk-1.3.4-1/jpeg/jchuff.c ****       j = i - 2;		/* find length of new prefix to be used */
 1739              		.loc 1 1350 11 view .LVU544
 1740 023f 4084FF   		testb	%dil, %dil
 1741 0242 75BC     		jne	.L151
 1742              	.L156:
1349:fltk-1.3.4-1/jpeg/jchuff.c ****     while (bits[i] > 0) {
 1743              		.loc 1 1349 30 is_stmt 1 view .LVU545
 1744              	.LVL174:
1349:fltk-1.3.4-1/jpeg/jchuff.c ****     while (bits[i] > 0) {
 1745              		.loc 1 1349 22 view .LVU546
 1746 0244 4883EE01 		subq	$1, %rsi
 1747              	.LVL175:
1349:fltk-1.3.4-1/jpeg/jchuff.c ****     while (bits[i] > 0) {
 1748              		.loc 1 1349 3 is_stmt 0 view .LVU547
 1749 0248 4C39E6   		cmpq	%r12, %rsi
 1750 024b 7599     		jne	.L152
 1751              	.LVL176:
1363:fltk-1.3.4-1/jpeg/jchuff.c ****     i--;
 1752              		.loc 1 1363 9 is_stmt 1 view .LVU548
1363:fltk-1.3.4-1/jpeg/jchuff.c ****     i--;
 1753              		.loc 1 1363 14 is_stmt 0 view .LVU549
 1754 024d 0FB68424 		movzbl	2096(%rsp), %eax
 1754      30080000 
1363:fltk-1.3.4-1/jpeg/jchuff.c ****     i--;
 1755              		.loc 1 1363 9 view .LVU550
 1756 0255 BA0F0000 		movl	$15, %edx
 1756      00
 1757 025a B9100000 		movl	$16, %ecx
 1757      00
 1758 025f 488DB424 		leaq	2081(%rsp), %rsi
 1758      21080000 
 1759 0267 84C0     		testb	%al, %al
 1760 0269 750F     		jne	.L154
 1761              	.LVL177:
 1762              	.L153:
1364:fltk-1.3.4-1/jpeg/jchuff.c ****   bits[i]--;
 1763              		.loc 1 1364 5 is_stmt 1 view .LVU551
1364:fltk-1.3.4-1/jpeg/jchuff.c ****   bits[i]--;
 1764              		.loc 1 1364 6 is_stmt 0 view .LVU552
 1765 026b 4863CA   		movslq	%edx, %rcx
 1766              	.LVL178:
1363:fltk-1.3.4-1/jpeg/jchuff.c ****     i--;
 1767              		.loc 1 1363 9 is_stmt 1 view .LVU553
 1768 026e 4883EA01 		subq	$1, %rdx
 1769              	.LVL179:
1363:fltk-1.3.4-1/jpeg/jchuff.c ****     i--;
 1770              		.loc 1 1363 14 is_stmt 0 view .LVU554
 1771 0272 0FB60416 		movzbl	(%rsi,%rdx), %eax
1363:fltk-1.3.4-1/jpeg/jchuff.c ****     i--;
 1772              		.loc 1 1363 9 view .LVU555
 1773 0276 84C0     		testb	%al, %al
 1774 0278 74F1     		je	.L153
 1775              	.LVL180:
 1776              	.L154:
1365:fltk-1.3.4-1/jpeg/jchuff.c ****   
 1777              		.loc 1 1365 3 is_stmt 1 view .LVU556
1365:fltk-1.3.4-1/jpeg/jchuff.c ****   
 1778              		.loc 1 1365 10 is_stmt 0 view .LVU557
 1779 027a 83E801   		subl	$1, %eax
1375:fltk-1.3.4-1/jpeg/jchuff.c ****     for (j = 0; j <= 255; j++) {
 1780              		.loc 1 1375 10 view .LVU558
 1781 027d BA010000 		movl	$1, %edx
 1781      00
1365:fltk-1.3.4-1/jpeg/jchuff.c ****   
 1782              		.loc 1 1365 10 view .LVU559
 1783 0282 88840C20 		movb	%al, 2080(%rsp,%rcx)
 1783      080000
1368:fltk-1.3.4-1/jpeg/jchuff.c ****   
 1784              		.loc 1 1368 3 is_stmt 1 view .LVU560
 1785              	.LVL181:
 1786              	.LBB99:
 1787              	.LBI99:
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
 1788              		.loc 2 31 1 view .LVU561
 1789              	.LBB100:
  34:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
 1790              		.loc 2 34 3 view .LVU562
  34:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
 1791              		.loc 2 34 10 is_stmt 0 view .LVU563
 1792 0289 0FB68424 		movzbl	2096(%rsp), %eax
 1792      30080000 
 1793              	.LBE100:
 1794              	.LBE99:
1374:fltk-1.3.4-1/jpeg/jchuff.c ****   for (i = 1; i <= MAX_CLEN; i++) {
 1795              		.loc 1 1374 5 view .LVU564
 1796 0291 31C9     		xorl	%ecx, %ecx
 1797              	.LBB103:
 1798              	.LBB101:
  34:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
 1799              		.loc 2 34 10 view .LVU565
 1800 0293 660F6F8C 		movdqa	2080(%rsp), %xmm1
 1800      24200800 
 1800      00
 1801 029c 884310   		movb	%al, 16(%rbx)
 1802              	.LVL182:
  34:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
 1803              		.loc 2 34 10 view .LVU566
 1804              	.LBE101:
 1805              	.LBE103:
1374:fltk-1.3.4-1/jpeg/jchuff.c ****   for (i = 1; i <= MAX_CLEN; i++) {
 1806              		.loc 1 1374 3 is_stmt 1 view .LVU567
1375:fltk-1.3.4-1/jpeg/jchuff.c ****     for (j = 0; j <= 255; j++) {
 1807              		.loc 1 1375 3 view .LVU568
1375:fltk-1.3.4-1/jpeg/jchuff.c ****     for (j = 0; j <= 255; j++) {
 1808              		.loc 1 1375 15 view .LVU569
 1809              	.LBB104:
 1810              	.LBB102:
  34:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
 1811              		.loc 2 34 10 is_stmt 0 view .LVU570
 1812 029f 0F110B   		movups	%xmm1, (%rbx)
 1813              	.LVL183:
 1814              	.L157:
  34:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
 1815              		.loc 2 34 10 view .LVU571
 1816              	.LBE102:
 1817              	.LBE104:
1376:fltk-1.3.4-1/jpeg/jchuff.c ****       if (codesize[j] == i) {
 1818              		.loc 1 1376 17 is_stmt 1 view .LVU572
1363:fltk-1.3.4-1/jpeg/jchuff.c ****     i--;
 1819              		.loc 1 1363 9 is_stmt 0 view .LVU573
 1820 02a2 31C0     		xorl	%eax, %eax
 1821              	.LVL184:
 1822              		.p2align 4,,10
 1823 02a4 0F1F4000 		.p2align 3
 1824              	.L159:
1377:fltk-1.3.4-1/jpeg/jchuff.c **** 	htbl->huffval[p] = (UINT8) j;
 1825              		.loc 1 1377 7 is_stmt 1 view .LVU574
1377:fltk-1.3.4-1/jpeg/jchuff.c **** 	htbl->huffval[p] = (UINT8) j;
 1826              		.loc 1 1377 10 is_stmt 0 view .LVU575
 1827 02a8 39548500 		cmpl	%edx, 0(%rbp,%rax,4)
 1828 02ac 750A     		jne	.L158
1378:fltk-1.3.4-1/jpeg/jchuff.c **** 	p++;
 1829              		.loc 1 1378 2 is_stmt 1 view .LVU576
1378:fltk-1.3.4-1/jpeg/jchuff.c **** 	p++;
 1830              		.loc 1 1378 19 is_stmt 0 view .LVU577
 1831 02ae 4863F1   		movslq	%ecx, %rsi
1379:fltk-1.3.4-1/jpeg/jchuff.c ****       }
 1832              		.loc 1 1379 3 view .LVU578
 1833 02b1 83C101   		addl	$1, %ecx
 1834              	.LVL185:
1378:fltk-1.3.4-1/jpeg/jchuff.c **** 	p++;
 1835              		.loc 1 1378 19 view .LVU579
 1836 02b4 88443311 		movb	%al, 17(%rbx,%rsi)
1379:fltk-1.3.4-1/jpeg/jchuff.c ****       }
 1837              		.loc 1 1379 2 is_stmt 1 view .LVU580
 1838              	.LVL186:
 1839              	.L158:
1376:fltk-1.3.4-1/jpeg/jchuff.c ****       if (codesize[j] == i) {
 1840              		.loc 1 1376 27 discriminator 2 view .LVU581
1376:fltk-1.3.4-1/jpeg/jchuff.c ****       if (codesize[j] == i) {
 1841              		.loc 1 1376 17 discriminator 2 view .LVU582
 1842 02b8 4883C001 		addq	$1, %rax
 1843              	.LVL187:
1376:fltk-1.3.4-1/jpeg/jchuff.c ****       if (codesize[j] == i) {
 1844              		.loc 1 1376 5 is_stmt 0 discriminator 2 view .LVU583
 1845 02bc 483D0001 		cmpq	$256, %rax
 1845      0000
 1846 02c2 75E4     		jne	.L159
1375:fltk-1.3.4-1/jpeg/jchuff.c ****     for (j = 0; j <= 255; j++) {
 1847              		.loc 1 1375 30 is_stmt 1 discriminator 2 view .LVU584
1375:fltk-1.3.4-1/jpeg/jchuff.c ****     for (j = 0; j <= 255; j++) {
 1848              		.loc 1 1375 31 is_stmt 0 discriminator 2 view .LVU585
 1849 02c4 83C201   		addl	$1, %edx
 1850              	.LVL188:
1375:fltk-1.3.4-1/jpeg/jchuff.c ****     for (j = 0; j <= 255; j++) {
 1851              		.loc 1 1375 15 is_stmt 1 discriminator 2 view .LVU586
1375:fltk-1.3.4-1/jpeg/jchuff.c ****     for (j = 0; j <= 255; j++) {
 1852              		.loc 1 1375 3 is_stmt 0 discriminator 2 view .LVU587
 1853 02c7 83FA21   		cmpl	$33, %edx
 1854 02ca 75D6     		jne	.L157
1385:fltk-1.3.4-1/jpeg/jchuff.c **** }
 1855              		.loc 1 1385 3 is_stmt 1 view .LVU588
1385:fltk-1.3.4-1/jpeg/jchuff.c **** }
 1856              		.loc 1 1385 20 is_stmt 0 view .LVU589
 1857 02cc C7831401 		movl	$0, 276(%rbx)
 1857      00000000 
 1857      0000
1386:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1858              		.loc 1 1386 1 view .LVU590
 1859 02d6 488B8424 		movq	2120(%rsp), %rax
 1859      48080000 
 1860 02de 64483304 		xorq	%fs:40, %rax
 1860      25280000 
 1860      00
 1861 02e7 751D     		jne	.L193
 1862 02e9 4881C458 		addq	$2136, %rsp
 1862      080000
 1863              		.cfi_remember_state
 1864              		.cfi_def_cfa_offset 56
 1865 02f0 5B       		popq	%rbx
 1866              		.cfi_def_cfa_offset 48
 1867              	.LVL189:
1386:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1868              		.loc 1 1386 1 view .LVU591
 1869 02f1 5D       		popq	%rbp
 1870              		.cfi_def_cfa_offset 40
 1871 02f2 415C     		popq	%r12
 1872              		.cfi_def_cfa_offset 32
 1873 02f4 415D     		popq	%r13
 1874              		.cfi_def_cfa_offset 24
 1875 02f6 415E     		popq	%r14
 1876              		.cfi_def_cfa_offset 16
 1877 02f8 415F     		popq	%r15
 1878              		.cfi_def_cfa_offset 8
 1879 02fa C3       		ret
 1880              	.LVL190:
 1881              	.L164:
 1882              		.cfi_restore_state
1352:fltk-1.3.4-1/jpeg/jchuff.c **** 	j--;
 1883              		.loc 1 1352 13 view .LVU592
 1884 02fb 4963C9   		movslq	%r9d, %rcx
1351:fltk-1.3.4-1/jpeg/jchuff.c ****       while (bits[j] == 0)
 1885              		.loc 1 1351 9 view .LVU593
 1886 02fe 4489C0   		movl	%r8d, %eax
 1887 0301 E91AFFFF 		jmp	.L149
 1887      FF
 1888              	.LVL191:
 1889              	.L193:
1386:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1890              		.loc 1 1386 1 view .LVU594
 1891 0306 E8000000 		call	__stack_chk_fail@PLT
 1891      00
 1892              	.LVL192:
1386:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1893              		.loc 1 1386 1 view .LVU595
 1894              		.cfi_endproc
 1895              	.LFE73:
 1897              		.section	.text.emit_buffered_bits.part.0,"ax",@progbits
 1898              		.p2align 4
 1900              	emit_buffered_bits.part.0:
 1901              	.LVL193:
 1902              	.LFB79:
 445:fltk-1.3.4-1/jpeg/jchuff.c **** 		    unsigned int nbits)
 1903              		.loc 1 445 1 is_stmt 1 view -0
 1904              		.cfi_startproc
 451:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, (unsigned int) (*bufstart), 1);
 1905              		.loc 1 451 9 view .LVU597
 1906 0000 85D2     		testl	%edx, %edx
 1907 0002 0F842801 		je	.L210
 1907      0000
 445:fltk-1.3.4-1/jpeg/jchuff.c **** 		    unsigned int nbits)
 1908              		.loc 1 445 1 is_stmt 0 view .LVU598
 1909 0008 4157     		pushq	%r15
 1910              		.cfi_def_cfa_offset 16
 1911              		.cfi_offset 15, -16
 1912 000a 8D42FF   		leal	-1(%rdx), %eax
 1913 000d 4156     		pushq	%r14
 1914              		.cfi_def_cfa_offset 24
 1915              		.cfi_offset 14, -24
 1916 000f 488D4406 		leaq	1(%rsi,%rax), %rax
 1916      01
 1917 0014 4155     		pushq	%r13
 1918              		.cfi_def_cfa_offset 32
 1919              		.cfi_offset 13, -32
 1920 0016 4154     		pushq	%r12
 1921              		.cfi_def_cfa_offset 40
 1922              		.cfi_offset 12, -40
 1923 0018 55       		pushq	%rbp
 1924              		.cfi_def_cfa_offset 48
 1925              		.cfi_offset 6, -48
 1926 0019 4889F5   		movq	%rsi, %rbp
 1927 001c 53       		pushq	%rbx
 1928              		.cfi_def_cfa_offset 56
 1929              		.cfi_offset 3, -56
 1930 001d 4889FB   		movq	%rdi, %rbx
 1931 0020 4883EC18 		subq	$24, %rsp
 1932              		.cfi_def_cfa_offset 80
 1933 0024 48894424 		movq	%rax, 8(%rsp)
 1933      08
 1934              	.LVL194:
 1935 0029 0F1F8000 		.p2align 4,,10
 1935      000000
 1936              		.p2align 3
 1937              	.L203:
 452:fltk-1.3.4-1/jpeg/jchuff.c ****     bufstart++;
 1938              		.loc 1 452 5 is_stmt 1 view .LVU599
 1939              	.LBB110:
 1940              	.LBI110:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 1941              		.loc 1 349 1 view .LVU600
 1942              	.LBB111:
 353:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 1943              		.loc 1 353 3 view .LVU601
 354:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1944              		.loc 1 354 3 view .LVU602
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 1945              		.loc 1 357 3 view .LVU603
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 1946              		.loc 1 360 3 view .LVU604
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 1947              		.loc 1 360 6 is_stmt 0 view .LVU605
 1948 0030 8B83C000 		movl	192(%rbx), %eax
 1948      0000
 1949 0036 85C0     		testl	%eax, %eax
 1950 0038 0F85BD00 		jne	.L196
 1950      0000
 1951              	.LVL195:
 1952              	.LBB112:
 1953              	.LBI112:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 1954              		.loc 1 349 1 is_stmt 1 view .LVU606
 1955              	.LBB113:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1956              		.loc 1 364 3 view .LVU607
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1957              		.loc 1 367 35 is_stmt 0 view .LVU608
 1958 003e 448B6320 		movl	32(%rbx), %r12d
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1959              		.loc 1 364 14 view .LVU609
 1960 0042 0FB64500 		movzbl	0(%rbp), %eax
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1961              		.loc 1 369 21 view .LVU610
 1962 0046 B9180000 		movl	$24, %ecx
 1962      00
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1963              		.loc 1 367 12 view .LVU611
 1964 004b 458D7C24 		leal	1(%r12), %r15d
 1964      01
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1965              		.loc 1 364 14 view .LVU612
 1966 0050 83E001   		andl	$1, %eax
 1967              	.LVL196:
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1968              		.loc 1 367 3 is_stmt 1 view .LVU613
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1969              		.loc 1 369 3 view .LVU614
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1970              		.loc 1 369 21 is_stmt 0 view .LVU615
 1971 0053 4429F9   		subl	%r15d, %ecx
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1972              		.loc 1 369 14 view .LVU616
 1973 0056 48D3E0   		salq	%cl, %rax
 1974              	.LVL197:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1975              		.loc 1 372 3 is_stmt 1 view .LVU617
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1976              		.loc 1 372 14 is_stmt 0 view .LVU618
 1977 0059 480B4318 		orq	24(%rbx), %rax
 1978              	.LVL198:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1979              		.loc 1 372 14 view .LVU619
 1980 005d 4989C6   		movq	%rax, %r14
 1981              	.LVL199:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 1982              		.loc 1 374 3 is_stmt 1 view .LVU620
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 1983              		.loc 1 374 9 view .LVU621
 1984 0060 4183FF07 		cmpl	$7, %r15d
 1985 0064 7F18     		jg	.L202
 1986 0066 E9880000 		jmp	.L197
 1986      00
 1987              	.LVL200:
 1988 006b 0F1F4400 		.p2align 4,,10
 1988      00
 1989              		.p2align 3
 1990              	.L200:
 1991              	.LBB114:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 1992              		.loc 1 379 30 view .LVU622
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 1993              		.loc 1 381 5 view .LVU623
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 1994              		.loc 1 382 14 is_stmt 0 view .LVU624
 1995 0070 4183EF08 		subl	$8, %r15d
 1996              	.LVL201:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 1997              		.loc 1 381 16 view .LVU625
 1998 0074 49C1E608 		salq	$8, %r14
 1999              	.LVL202:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2000              		.loc 1 382 5 is_stmt 1 view .LVU626
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2001              		.loc 1 382 5 is_stmt 0 view .LVU627
 2002              	.LBE114:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2003              		.loc 1 374 9 is_stmt 1 view .LVU628
 2004 0078 4183FF07 		cmpl	$7, %r15d
 2005 007c 7E6A     		jle	.L213
 2006              	.LVL203:
 2007              	.L202:
 2008              	.LBB115:
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2009              		.loc 1 375 5 view .LVU629
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2010              		.loc 1 377 5 is_stmt 0 view .LVU630
 2011 007e 488B93C8 		movq	200(%rbx), %rdx
 2011      000000
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2012              		.loc 1 375 32 view .LVU631
 2013 0085 4C89F1   		movq	%r14, %rcx
 2014 0088 48C1F910 		sarq	$16, %rcx
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2015              		.loc 1 377 5 view .LVU632
 2016 008c 488D7A01 		leaq	1(%rdx), %rdi
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2017              		.loc 1 375 9 view .LVU633
 2018 0090 440FB6E9 		movzbl	%cl, %r13d
 2019              	.LVL204:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2020              		.loc 1 377 5 is_stmt 1 view .LVU634
 2021 0094 4889BBC8 		movq	%rdi, 200(%rbx)
 2021      000000
 2022 009b 880A     		movb	%cl, (%rdx)
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2023              		.loc 1 377 5 view .LVU635
 2024 009d 4883ABD0 		subq	$1, 208(%rbx)
 2024      00000001 
 2025 00a5 7479     		je	.L214
 2026              	.L198:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2027              		.loc 1 377 28 view .LVU636
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 2028              		.loc 1 378 5 view .LVU637
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 2029              		.loc 1 378 8 is_stmt 0 view .LVU638
 2030 00a7 4181FDFF 		cmpl	$255, %r13d
 2030      000000
 2031 00ae 75C0     		jne	.L200
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 2032              		.loc 1 379 7 is_stmt 1 view .LVU639
 2033 00b0 488B93C8 		movq	200(%rbx), %rdx
 2033      000000
 2034 00b7 488D4A01 		leaq	1(%rdx), %rcx
 2035 00bb 48898BC8 		movq	%rcx, 200(%rbx)
 2035      000000
 2036 00c2 C60200   		movb	$0, (%rdx)
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 2037              		.loc 1 379 7 view .LVU640
 2038 00c5 4883ABD0 		subq	$1, 208(%rbx)
 2038      00000001 
 2039 00cd 75A1     		jne	.L200
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 2040              		.loc 1 379 7 view .LVU641
 2041 00cf 4889DF   		movq	%rbx, %rdi
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2042              		.loc 1 382 14 is_stmt 0 view .LVU642
 2043 00d2 4183EF08 		subl	$8, %r15d
 2044              	.LVL205:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 2045              		.loc 1 381 16 view .LVU643
 2046 00d6 49C1E608 		salq	$8, %r14
 2047              	.LVL206:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 2048              		.loc 1 379 7 view .LVU644
 2049 00da E8000000 		call	dump_buffer_e
 2049      00
 2050              	.LVL207:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 2051              		.loc 1 379 30 is_stmt 1 view .LVU645
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 2052              		.loc 1 381 5 view .LVU646
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2053              		.loc 1 382 5 view .LVU647
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2054              		.loc 1 382 5 is_stmt 0 view .LVU648
 2055              	.LBE115:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2056              		.loc 1 374 9 is_stmt 1 view .LVU649
 2057 00df 4183FF07 		cmpl	$7, %r15d
 2058 00e3 7F99     		jg	.L202
 2059              		.p2align 4,,10
 2060 00e5 0F1F00   		.p2align 3
 2061              	.L213:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2062              		.loc 1 374 9 is_stmt 0 view .LVU650
 2063 00e8 418D7424 		leal	-7(%r12), %esi
 2063      F9
 2064 00ed 83E607   		andl	$7, %esi
 2065 00f0 4189F7   		movl	%esi, %r15d
 2066              	.LVL208:
 2067              	.L197:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 2068              		.loc 1 385 3 is_stmt 1 view .LVU651
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 2069              		.loc 1 385 29 is_stmt 0 view .LVU652
 2070 00f3 4C897318 		movq	%r14, 24(%rbx)
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 2071              		.loc 1 386 3 is_stmt 1 view .LVU653
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 2072              		.loc 1 386 27 is_stmt 0 view .LVU654
 2073 00f7 44897B20 		movl	%r15d, 32(%rbx)
 2074              	.LVL209:
 2075              	.L196:
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 2076              		.loc 1 386 27 view .LVU655
 2077              	.LBE113:
 2078              	.LBE112:
 2079              	.LBE111:
 2080              	.LBE110:
 453:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits--;
 2081              		.loc 1 453 5 is_stmt 1 view .LVU656
 453:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits--;
 2082              		.loc 1 453 13 is_stmt 0 view .LVU657
 2083 00fb 4883C501 		addq	$1, %rbp
 2084              	.LVL210:
 454:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2085              		.loc 1 454 5 is_stmt 1 view .LVU658
 451:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, (unsigned int) (*bufstart), 1);
 2086              		.loc 1 451 9 view .LVU659
 2087 00ff 483B6C24 		cmpq	8(%rsp), %rbp
 2087      08
 2088 0104 0F8526FF 		jne	.L203
 2088      FFFF
 456:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2089              		.loc 1 456 1 is_stmt 0 view .LVU660
 2090 010a 4883C418 		addq	$24, %rsp
 2091              		.cfi_remember_state
 2092              		.cfi_def_cfa_offset 56
 2093 010e 5B       		popq	%rbx
 2094              		.cfi_def_cfa_offset 48
 2095              	.LVL211:
 456:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2096              		.loc 1 456 1 view .LVU661
 2097 010f 5D       		popq	%rbp
 2098              		.cfi_def_cfa_offset 40
 2099              	.LVL212:
 456:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2100              		.loc 1 456 1 view .LVU662
 2101 0110 415C     		popq	%r12
 2102              		.cfi_def_cfa_offset 32
 2103 0112 415D     		popq	%r13
 2104              		.cfi_def_cfa_offset 24
 2105 0114 415E     		popq	%r14
 2106              		.cfi_def_cfa_offset 16
 2107 0116 415F     		popq	%r15
 2108              		.cfi_def_cfa_offset 8
 2109 0118 C3       		ret
 2110              	.LVL213:
 2111 0119 0F1F8000 		.p2align 4,,10
 2111      000000
 2112              		.p2align 3
 2113              	.L214:
 2114              		.cfi_restore_state
 2115              	.LBB120:
 2116              	.LBB119:
 2117              	.LBB118:
 2118              	.LBB117:
 2119              	.LBB116:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2120              		.loc 1 377 5 is_stmt 1 view .LVU663
 2121 0120 4889DF   		movq	%rbx, %rdi
 2122 0123 E8000000 		call	dump_buffer_e
 2122      00
 2123              	.LVL214:
 2124 0128 E97AFFFF 		jmp	.L198
 2124      FF
 2125              	.LVL215:
 2126 012d 0F1F00   		.p2align 4,,10
 2127              		.p2align 3
 2128              	.L210:
 2129              		.cfi_def_cfa_offset 8
 2130              		.cfi_restore 3
 2131              		.cfi_restore 6
 2132              		.cfi_restore 12
 2133              		.cfi_restore 13
 2134              		.cfi_restore 14
 2135              		.cfi_restore 15
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2136              		.loc 1 377 5 is_stmt 0 view .LVU664
 2137 0130 C3       		ret
 2138              	.LBE116:
 2139              	.LBE117:
 2140              	.LBE118:
 2141              	.LBE119:
 2142              	.LBE120:
 2143              		.cfi_endproc
 2144              	.LFE79:
 2146              		.section	.text.emit_eobrun,"ax",@progbits
 2147              		.p2align 4
 2149              	emit_eobrun:
 2150              	.LVL216:
 2151              	.LFB61:
 465:fltk-1.3.4-1/jpeg/jchuff.c ****   register int temp, nbits;
 2152              		.loc 1 465 1 is_stmt 1 view -0
 2153              		.cfi_startproc
 466:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2154              		.loc 1 466 3 view .LVU666
 468:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = entropy->EOBRUN;
 2155              		.loc 1 468 3 view .LVU667
 465:fltk-1.3.4-1/jpeg/jchuff.c ****   register int temp, nbits;
 2156              		.loc 1 465 1 is_stmt 0 view .LVU668
 2157 0000 4157     		pushq	%r15
 2158              		.cfi_def_cfa_offset 16
 2159              		.cfi_offset 15, -16
 2160 0002 4156     		pushq	%r14
 2161              		.cfi_def_cfa_offset 24
 2162              		.cfi_offset 14, -24
 2163 0004 4155     		pushq	%r13
 2164              		.cfi_def_cfa_offset 32
 2165              		.cfi_offset 13, -32
 2166 0006 4154     		pushq	%r12
 2167              		.cfi_def_cfa_offset 40
 2168              		.cfi_offset 12, -40
 2169 0008 55       		pushq	%rbp
 2170              		.cfi_def_cfa_offset 48
 2171              		.cfi_offset 6, -48
 2172 0009 53       		pushq	%rbx
 2173              		.cfi_def_cfa_offset 56
 2174              		.cfi_offset 3, -56
 2175 000a 4883EC08 		subq	$8, %rsp
 2176              		.cfi_def_cfa_offset 64
 468:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = entropy->EOBRUN;
 2177              		.loc 1 468 14 view .LVU669
 2178 000e 8BAFE400 		movl	228(%rdi), %ebp
 2178      0000
 468:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = entropy->EOBRUN;
 2179              		.loc 1 468 6 view .LVU670
 2180 0014 85ED     		testl	%ebp, %ebp
 2181 0016 0F84A200 		je	.L215
 2181      0000
 470:fltk-1.3.4-1/jpeg/jchuff.c ****     while ((temp >>= 1))
 2182              		.loc 1 470 11 view .LVU671
 2183 001c 4531E4   		xorl	%r12d, %r12d
 471:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 2184              		.loc 1 471 11 view .LVU672
 2185 001f D1FD     		sarl	%ebp
 2186 0021 4889FB   		movq	%rdi, %rbx
 469:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits = 0;
 2187              		.loc 1 469 5 is_stmt 1 view .LVU673
 470:fltk-1.3.4-1/jpeg/jchuff.c ****     while ((temp >>= 1))
 2188              		.loc 1 470 5 view .LVU674
 2189              	.LVL217:
 471:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 2190              		.loc 1 471 5 view .LVU675
 471:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 2191              		.loc 1 471 11 view .LVU676
 2192 0024 743B     		je	.L217
 2193              	.LVL218:
 2194 0026 662E0F1F 		.p2align 4,,10
 2194      84000000 
 2194      0000
 2195              		.p2align 3
 2196              	.L218:
 472:fltk-1.3.4-1/jpeg/jchuff.c ****     /* safety check: shouldn't happen given limited correction-bit buffer */
 2197              		.loc 1 472 7 view .LVU677
 472:fltk-1.3.4-1/jpeg/jchuff.c ****     /* safety check: shouldn't happen given limited correction-bit buffer */
 2198              		.loc 1 472 12 is_stmt 0 view .LVU678
 2199 0030 4183C401 		addl	$1, %r12d
 2200              	.LVL219:
 471:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 2201              		.loc 1 471 11 is_stmt 1 view .LVU679
 471:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 2202              		.loc 1 471 11 is_stmt 0 view .LVU680
 2203 0034 D1FD     		sarl	%ebp
 2204              	.LVL220:
 471:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 2205              		.loc 1 471 11 view .LVU681
 2206 0036 75F8     		jne	.L218
 474:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 2207              		.loc 1 474 5 is_stmt 1 view .LVU682
 2208 0038 4489E5   		movl	%r12d, %ebp
 2209              	.LVL221:
 474:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 2210              		.loc 1 474 5 is_stmt 0 view .LVU683
 2211 003b C1E504   		sall	$4, %ebp
 474:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 2212              		.loc 1 474 8 view .LVU684
 2213 003e 4183FC0E 		cmpl	$14, %r12d
 2214 0042 7E1D     		jle	.L217
 475:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2215              		.loc 1 475 7 is_stmt 1 view .LVU685
 2216 0044 488B83D8 		movq	216(%rbx), %rax
 2216      000000
 2217 004b 488B00   		movq	(%rax), %rax
 2218 004e C7402829 		movl	$41, 40(%rax)
 2218      000000
 2219 0055 488BBBD8 		movq	216(%rbx), %rdi
 2219      000000
 2220              	.LVL222:
 475:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2221              		.loc 1 475 7 is_stmt 0 view .LVU686
 2222 005c 488B07   		movq	(%rdi), %rax
 2223 005f FF10     		call	*(%rax)
 2224              	.LVL223:
 2225              	.L217:
 477:fltk-1.3.4-1/jpeg/jchuff.c ****     if (nbits)
 2226              		.loc 1 477 5 is_stmt 1 view .LVU687
 2227              	.LBB140:
 2228              	.LBB141:
 431:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 2229              		.loc 1 431 6 is_stmt 0 view .LVU688
 2230 0061 8B93C000 		movl	192(%rbx), %edx
 2230      0000
 2231              	.LBE141:
 2232              	.LBE140:
 477:fltk-1.3.4-1/jpeg/jchuff.c ****     if (nbits)
 2233              		.loc 1 477 5 view .LVU689
 2234 0067 486383E0 		movslq	224(%rbx), %rax
 2234      000000
 2235              	.LVL224:
 2236              	.LBB157:
 2237              	.LBI140:
 429:fltk-1.3.4-1/jpeg/jchuff.c **** {
 2238              		.loc 1 429 1 is_stmt 1 view .LVU690
 2239              	.LBB154:
 431:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 2240              		.loc 1 431 3 view .LVU691
 431:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 2241              		.loc 1 431 6 is_stmt 0 view .LVU692
 2242 006e 85D2     		testl	%edx, %edx
 2243 0070 745E     		je	.L219
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 2244              		.loc 1 432 5 is_stmt 1 view .LVU693
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 2245              		.loc 1 432 35 is_stmt 0 view .LVU694
 2246 0072 488B84C3 		movq	160(%rbx,%rax,8), %rax
 2246      A0000000 
 2247              	.LVL225:
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 2248              		.loc 1 432 35 view .LVU695
 2249 007a 4863ED   		movslq	%ebp, %rbp
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 2250              		.loc 1 432 43 view .LVU696
 2251 007d 488304E8 		addq	$1, (%rax,%rbp,8)
 2251      01
 2252              	.LVL226:
 2253              	.L220:
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 2254              		.loc 1 432 43 view .LVU697
 2255              	.LBE154:
 2256              	.LBE157:
 478:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_bits_e(entropy, entropy->EOBRUN, nbits);
 2257              		.loc 1 478 5 is_stmt 1 view .LVU698
 2258 0082 8B83C000 		movl	192(%rbx), %eax
 2258      0000
 478:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_bits_e(entropy, entropy->EOBRUN, nbits);
 2259              		.loc 1 478 8 is_stmt 0 view .LVU699
 2260 0088 4585E4   		testl	%r12d, %r12d
 2261 008b 0F859700 		jne	.L253
 2261      0000
 2262              	.L230:
 2263              	.LVL227:
 2264              	.LBB158:
 2265              	.LBI158:
 464:fltk-1.3.4-1/jpeg/jchuff.c **** {
 2266              		.loc 1 464 1 is_stmt 1 view .LVU700
 2267              	.LBB159:
 481:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2268              		.loc 1 481 5 view .LVU701
 481:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2269              		.loc 1 481 21 is_stmt 0 view .LVU702
 2270 0091 C783E400 		movl	$0, 228(%rbx)
 2270      00000000 
 2270      0000
 484:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->BE = 0;
 2271              		.loc 1 484 5 is_stmt 1 view .LVU703
 2272              	.LVL228:
 2273              	.LBB160:
 2274              	.LBI160:
 445:fltk-1.3.4-1/jpeg/jchuff.c **** 		    unsigned int nbits)
 2275              		.loc 1 445 1 view .LVU704
 2276              	.LBB161:
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 2277              		.loc 1 448 3 view .LVU705
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 2278              		.loc 1 448 6 is_stmt 0 view .LVU706
 2279 009b 85C0     		testl	%eax, %eax
 2280 009d 7515     		jne	.L237
 2281              	.LVL229:
 2282              	.L232:
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 2283              		.loc 1 448 6 view .LVU707
 2284 009f 8B93E800 		movl	232(%rbx), %edx
 2284      0000
 2285 00a5 488BB3F0 		movq	240(%rbx), %rsi
 2285      000000
 2286 00ac 4889DF   		movq	%rbx, %rdi
 2287 00af E8000000 		call	emit_buffered_bits.part.0
 2287      00
 2288              	.LVL230:
 2289              	.L237:
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 2290              		.loc 1 448 6 view .LVU708
 2291              	.LBE161:
 2292              	.LBE160:
 485:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2293              		.loc 1 485 5 is_stmt 1 view .LVU709
 485:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2294              		.loc 1 485 17 is_stmt 0 view .LVU710
 2295 00b4 C783E800 		movl	$0, 232(%rbx)
 2295      00000000 
 2295      0000
 2296              	.LVL231:
 2297              	.L215:
 485:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2298              		.loc 1 485 17 view .LVU711
 2299              	.LBE159:
 2300              	.LBE158:
 487:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2301              		.loc 1 487 1 view .LVU712
 2302 00be 4883C408 		addq	$8, %rsp
 2303              		.cfi_remember_state
 2304              		.cfi_def_cfa_offset 56
 2305 00c2 5B       		popq	%rbx
 2306              		.cfi_def_cfa_offset 48
 2307 00c3 5D       		popq	%rbp
 2308              		.cfi_def_cfa_offset 40
 2309 00c4 415C     		popq	%r12
 2310              		.cfi_def_cfa_offset 32
 2311 00c6 415D     		popq	%r13
 2312              		.cfi_def_cfa_offset 24
 2313 00c8 415E     		popq	%r14
 2314              		.cfi_def_cfa_offset 16
 2315 00ca 415F     		popq	%r15
 2316              		.cfi_def_cfa_offset 8
 2317 00cc C3       		ret
 2318              	.LVL232:
 2319 00cd 0F1F00   		.p2align 4,,10
 2320              		.p2align 3
 2321              	.L219:
 2322              		.cfi_restore_state
 2323              	.LBB168:
 2324              	.LBB155:
 2325              	.LBB142:
 2326              	.LBI142:
 429:fltk-1.3.4-1/jpeg/jchuff.c **** {
 2327              		.loc 1 429 1 is_stmt 1 view .LVU713
 2328              	.LBB143:
 434:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 2329              		.loc 1 434 5 view .LVU714
 434:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 2330              		.loc 1 434 21 is_stmt 0 view .LVU715
 2331 00d0 488B44C3 		movq	96(%rbx,%rax,8), %rax
 2331      60
 2332              	.LVL233:
 435:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2333              		.loc 1 435 5 is_stmt 1 view .LVU716
 435:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2334              		.loc 1 435 58 is_stmt 0 view .LVU717
 2335 00d5 4863ED   		movslq	%ebp, %rbp
 435:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2336              		.loc 1 435 5 view .LVU718
 2337 00d8 440FB6AC 		movzbl	1024(%rax,%rbp), %r13d
 2337      28000400 
 2337      00
 2338 00e1 8B2CA8   		movl	(%rax,%rbp,4), %ebp
 2339              	.LVL234:
 2340              	.LBB144:
 2341              	.LBI144:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 2342              		.loc 1 349 1 is_stmt 1 view .LVU719
 2343              	.LBB145:
 353:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 2344              		.loc 1 353 3 view .LVU720
 354:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2345              		.loc 1 354 3 view .LVU721
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 2346              		.loc 1 357 3 view .LVU722
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 2347              		.loc 1 357 6 is_stmt 0 view .LVU723
 2348 00e4 4585ED   		testl	%r13d, %r13d
 2349 00e7 0F85FB00 		jne	.L225
 2349      0000
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2350              		.loc 1 358 5 is_stmt 1 view .LVU724
 2351 00ed 488B83D8 		movq	216(%rbx), %rax
 2351      000000
 2352              	.LVL235:
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2353              		.loc 1 358 5 is_stmt 0 view .LVU725
 2354 00f4 488B00   		movq	(%rax), %rax
 2355 00f7 C7402829 		movl	$41, 40(%rax)
 2355      000000
 2356              	.LVL236:
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2357              		.loc 1 358 5 view .LVU726
 2358 00fe 488BBBD8 		movq	216(%rbx), %rdi
 2358      000000
 2359 0105 488B07   		movq	(%rdi), %rax
 2360 0108 FF10     		call	*(%rax)
 2361              	.LVL237:
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 2362              		.loc 1 360 3 is_stmt 1 view .LVU727
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 2363              		.loc 1 360 6 is_stmt 0 view .LVU728
 2364 010a 8B83C000 		movl	192(%rbx), %eax
 2364      0000
 2365 0110 85C0     		testl	%eax, %eax
 2366 0112 0F84D000 		je	.L225
 2366      0000
 2367              	.LVL238:
 2368              	.L224:
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 2369              		.loc 1 360 6 view .LVU729
 2370              	.LBE145:
 2371              	.LBE144:
 2372              	.LBE143:
 2373              	.LBE142:
 2374              	.LBE155:
 2375              	.LBE168:
 2376              	.LBB169:
 464:fltk-1.3.4-1/jpeg/jchuff.c **** {
 2377              		.loc 1 464 1 is_stmt 1 view .LVU730
 2378              	.LBB166:
 481:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2379              		.loc 1 481 5 view .LVU731
 481:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2380              		.loc 1 481 21 is_stmt 0 view .LVU732
 2381 0118 C783E400 		movl	$0, 228(%rbx)
 2381      00000000 
 2381      0000
 484:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->BE = 0;
 2382              		.loc 1 484 5 is_stmt 1 view .LVU733
 2383              	.LVL239:
 2384              	.LBB164:
 445:fltk-1.3.4-1/jpeg/jchuff.c **** 		    unsigned int nbits)
 2385              		.loc 1 445 1 view .LVU734
 2386              	.LBB162:
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 2387              		.loc 1 448 3 view .LVU735
 2388 0122 EB90     		jmp	.L237
 2389              	.LVL240:
 2390              		.p2align 4,,10
 2391 0124 0F1F4000 		.p2align 3
 2392              	.L253:
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 2393              		.loc 1 448 3 is_stmt 0 view .LVU736
 2394              	.LBE162:
 2395              	.LBE164:
 2396              	.LBE166:
 2397              	.LBE169:
 479:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2398              		.loc 1 479 7 is_stmt 1 view .LVU737
 2399              	.LBB170:
 2400              	.LBI170:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 2401              		.loc 1 349 1 view .LVU738
 2402              	.LBB171:
 353:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 2403              		.loc 1 353 3 view .LVU739
 354:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2404              		.loc 1 354 3 view .LVU740
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 2405              		.loc 1 357 3 view .LVU741
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 2406              		.loc 1 360 3 view .LVU742
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 2407              		.loc 1 360 6 is_stmt 0 view .LVU743
 2408 0128 85C0     		testl	%eax, %eax
 2409 012a 75EC     		jne	.L224
 2410              	.LVL241:
 2411              	.LBB172:
 2412              	.LBI172:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 2413              		.loc 1 349 1 is_stmt 1 view .LVU744
 2414              	.LBB173:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2415              		.loc 1 364 3 view .LVU745
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2416              		.loc 1 364 47 is_stmt 0 view .LVU746
 2417 012c 4489E1   		movl	%r12d, %ecx
 2418 012f BD010000 		movl	$1, %ebp
 2418      00
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2419              		.loc 1 367 12 view .LVU747
 2420 0134 44036320 		addl	32(%rbx), %r12d
 2421              	.LVL242:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2422              		.loc 1 364 47 view .LVU748
 2423 0138 48D3E5   		salq	%cl, %rbp
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2424              		.loc 1 369 21 view .LVU749
 2425 013b B9180000 		movl	$24, %ecx
 2425      00
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2426              		.loc 1 374 9 view .LVU750
 2427 0140 4589E5   		movl	%r12d, %r13d
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2428              		.loc 1 364 56 view .LVU751
 2429 0143 4883ED01 		subq	$1, %rbp
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2430              		.loc 1 369 21 view .LVU752
 2431 0147 4429E1   		subl	%r12d, %ecx
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2432              		.loc 1 364 14 view .LVU753
 2433 014a 23ABE400 		andl	228(%rbx), %ebp
 2433      0000
 2434              	.LVL243:
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2435              		.loc 1 367 3 is_stmt 1 view .LVU754
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2436              		.loc 1 369 3 view .LVU755
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2437              		.loc 1 369 14 is_stmt 0 view .LVU756
 2438 0150 48D3E5   		salq	%cl, %rbp
 2439              	.LVL244:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2440              		.loc 1 372 3 is_stmt 1 view .LVU757
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2441              		.loc 1 372 14 is_stmt 0 view .LVU758
 2442 0153 480B6B18 		orq	24(%rbx), %rbp
 2443              	.LVL245:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2444              		.loc 1 374 3 is_stmt 1 view .LVU759
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2445              		.loc 1 374 9 view .LVU760
 2446 0157 4183FC07 		cmpl	$7, %r12d
 2447 015b 7F1D     		jg	.L231
 2448 015d E96D0100 		jmp	.L254
 2448      00
 2449              	.LVL246:
 2450              		.p2align 4,,10
 2451 0162 660F1F44 		.p2align 3
 2451      0000
 2452              	.L235:
 2453              	.LBB174:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 2454              		.loc 1 379 30 view .LVU761
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 2455              		.loc 1 381 5 view .LVU762
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2456              		.loc 1 382 14 is_stmt 0 view .LVU763
 2457 0168 4183ED08 		subl	$8, %r13d
 2458              	.LVL247:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 2459              		.loc 1 381 16 view .LVU764
 2460 016c 48C1E508 		salq	$8, %rbp
 2461              	.LVL248:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2462              		.loc 1 382 5 is_stmt 1 view .LVU765
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2463              		.loc 1 382 5 is_stmt 0 view .LVU766
 2464              	.LBE174:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2465              		.loc 1 374 9 is_stmt 1 view .LVU767
 2466 0170 4183FD07 		cmpl	$7, %r13d
 2467 0174 0F8E3E01 		jle	.L255
 2467      0000
 2468              	.LVL249:
 2469              	.L231:
 2470              	.LBB175:
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2471              		.loc 1 375 5 view .LVU768
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2472              		.loc 1 377 5 is_stmt 0 view .LVU769
 2473 017a 488B83C8 		movq	200(%rbx), %rax
 2473      000000
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2474              		.loc 1 375 32 view .LVU770
 2475 0181 4889EA   		movq	%rbp, %rdx
 2476 0184 48C1FA10 		sarq	$16, %rdx
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2477              		.loc 1 377 5 view .LVU771
 2478 0188 488D4801 		leaq	1(%rax), %rcx
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2479              		.loc 1 375 9 view .LVU772
 2480 018c 440FB6F2 		movzbl	%dl, %r14d
 2481              	.LVL250:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2482              		.loc 1 377 5 is_stmt 1 view .LVU773
 2483 0190 48898BC8 		movq	%rcx, 200(%rbx)
 2483      000000
 2484 0197 8810     		movb	%dl, (%rax)
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2485              		.loc 1 377 5 view .LVU774
 2486 0199 4883ABD0 		subq	$1, 208(%rbx)
 2486      00000001 
 2487 01a1 7435     		je	.L256
 2488              	.L233:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2489              		.loc 1 377 28 view .LVU775
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 2490              		.loc 1 378 5 view .LVU776
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 2491              		.loc 1 378 8 is_stmt 0 view .LVU777
 2492 01a3 4181FEFF 		cmpl	$255, %r14d
 2492      000000
 2493 01aa 75BC     		jne	.L235
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 2494              		.loc 1 379 7 is_stmt 1 view .LVU778
 2495 01ac 488B83C8 		movq	200(%rbx), %rax
 2495      000000
 2496 01b3 488D5001 		leaq	1(%rax), %rdx
 2497 01b7 488993C8 		movq	%rdx, 200(%rbx)
 2497      000000
 2498 01be C60000   		movb	$0, (%rax)
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 2499              		.loc 1 379 7 view .LVU779
 2500 01c1 4883ABD0 		subq	$1, 208(%rbx)
 2500      00000001 
 2501 01c9 759D     		jne	.L235
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 2502              		.loc 1 379 7 view .LVU780
 2503 01cb 4889DF   		movq	%rbx, %rdi
 2504 01ce E8000000 		call	dump_buffer_e
 2504      00
 2505              	.LVL251:
 2506 01d3 EB93     		jmp	.L235
 2507              		.p2align 4,,10
 2508 01d5 0F1F00   		.p2align 3
 2509              	.L256:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2510              		.loc 1 377 5 view .LVU781
 2511 01d8 4889DF   		movq	%rbx, %rdi
 2512 01db E8000000 		call	dump_buffer_e
 2512      00
 2513              	.LVL252:
 2514 01e0 EBC1     		jmp	.L233
 2515              	.LVL253:
 2516              		.p2align 4,,10
 2517 01e2 660F1F44 		.p2align 3
 2517      0000
 2518              	.L225:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2519              		.loc 1 377 5 is_stmt 0 view .LVU782
 2520              	.LBE175:
 2521              	.LBE173:
 2522              	.LBE172:
 2523              	.LBE171:
 2524              	.LBE170:
 2525              	.LBB179:
 2526              	.LBB156:
 2527              	.LBB153:
 2528              	.LBB152:
 2529              	.LBB151:
 2530              	.LBB150:
 2531              	.LBB146:
 2532              	.LBI146:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 2533              		.loc 1 349 1 is_stmt 1 view .LVU783
 2534              	.LBB147:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2535              		.loc 1 364 3 view .LVU784
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2536              		.loc 1 364 47 is_stmt 0 view .LVU785
 2537 01e8 4489E9   		movl	%r13d, %ecx
 2538 01eb B8010000 		movl	$1, %eax
 2538      00
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2539              		.loc 1 367 12 view .LVU786
 2540 01f0 44036B20 		addl	32(%rbx), %r13d
 2541              	.LVL254:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2542              		.loc 1 364 47 view .LVU787
 2543 01f4 48D3E0   		salq	%cl, %rax
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2544              		.loc 1 369 21 view .LVU788
 2545 01f7 B9180000 		movl	$24, %ecx
 2545      00
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2546              		.loc 1 374 9 view .LVU789
 2547 01fc 4589EE   		movl	%r13d, %r14d
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2548              		.loc 1 364 56 view .LVU790
 2549 01ff 4883E801 		subq	$1, %rax
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2550              		.loc 1 369 21 view .LVU791
 2551 0203 4429E9   		subl	%r13d, %ecx
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2552              		.loc 1 364 14 view .LVU792
 2553 0206 21C5     		andl	%eax, %ebp
 2554              	.LVL255:
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2555              		.loc 1 367 3 is_stmt 1 view .LVU793
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2556              		.loc 1 369 3 view .LVU794
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2557              		.loc 1 369 14 is_stmt 0 view .LVU795
 2558 0208 48D3E5   		salq	%cl, %rbp
 2559              	.LVL256:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2560              		.loc 1 372 3 is_stmt 1 view .LVU796
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2561              		.loc 1 372 14 is_stmt 0 view .LVU797
 2562 020b 480B6B18 		orq	24(%rbx), %rbp
 2563              	.LVL257:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2564              		.loc 1 374 3 is_stmt 1 view .LVU798
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2565              		.loc 1 374 9 view .LVU799
 2566 020f 4183FD07 		cmpl	$7, %r13d
 2567 0213 7F19     		jg	.L222
 2568 0215 E98A0000 		jmp	.L223
 2568      00
 2569              	.LVL258:
 2570 021a 660F1F44 		.p2align 4,,10
 2570      0000
 2571              		.p2align 3
 2572              	.L228:
 2573              	.LBB148:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 2574              		.loc 1 379 30 view .LVU800
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 2575              		.loc 1 381 5 view .LVU801
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2576              		.loc 1 382 14 is_stmt 0 view .LVU802
 2577 0220 4183EE08 		subl	$8, %r14d
 2578              	.LVL259:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 2579              		.loc 1 381 16 view .LVU803
 2580 0224 48C1E508 		salq	$8, %rbp
 2581              	.LVL260:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2582              		.loc 1 382 5 is_stmt 1 view .LVU804
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2583              		.loc 1 382 5 is_stmt 0 view .LVU805
 2584              	.LBE148:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2585              		.loc 1 374 9 is_stmt 1 view .LVU806
 2586 0228 4183FE07 		cmpl	$7, %r14d
 2587 022c 7E72     		jle	.L257
 2588              	.LVL261:
 2589              	.L222:
 2590              	.LBB149:
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2591              		.loc 1 375 5 view .LVU807
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2592              		.loc 1 377 5 is_stmt 0 view .LVU808
 2593 022e 488B83C8 		movq	200(%rbx), %rax
 2593      000000
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2594              		.loc 1 375 32 view .LVU809
 2595 0235 4889EA   		movq	%rbp, %rdx
 2596 0238 48C1FA10 		sarq	$16, %rdx
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2597              		.loc 1 377 5 view .LVU810
 2598 023c 488D4801 		leaq	1(%rax), %rcx
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2599              		.loc 1 375 9 view .LVU811
 2600 0240 440FB6FA 		movzbl	%dl, %r15d
 2601              	.LVL262:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2602              		.loc 1 377 5 is_stmt 1 view .LVU812
 2603 0244 48898BC8 		movq	%rcx, 200(%rbx)
 2603      000000
 2604 024b 8810     		movb	%dl, (%rax)
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2605              		.loc 1 377 5 view .LVU813
 2606 024d 4883ABD0 		subq	$1, 208(%rbx)
 2606      00000001 
 2607 0255 7439     		je	.L258
 2608              	.L226:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2609              		.loc 1 377 28 view .LVU814
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 2610              		.loc 1 378 5 view .LVU815
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 2611              		.loc 1 378 8 is_stmt 0 view .LVU816
 2612 0257 4181FFFF 		cmpl	$255, %r15d
 2612      000000
 2613 025e 75C0     		jne	.L228
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 2614              		.loc 1 379 7 is_stmt 1 view .LVU817
 2615 0260 488B83C8 		movq	200(%rbx), %rax
 2615      000000
 2616 0267 488D5001 		leaq	1(%rax), %rdx
 2617 026b 488993C8 		movq	%rdx, 200(%rbx)
 2617      000000
 2618 0272 C60000   		movb	$0, (%rax)
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 2619              		.loc 1 379 7 view .LVU818
 2620 0275 4883ABD0 		subq	$1, 208(%rbx)
 2620      00000001 
 2621 027d 75A1     		jne	.L228
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 2622              		.loc 1 379 7 view .LVU819
 2623 027f 4889DF   		movq	%rbx, %rdi
 2624 0282 E8000000 		call	dump_buffer_e
 2624      00
 2625              	.LVL263:
 2626 0287 EB97     		jmp	.L228
 2627 0289 0F1F8000 		.p2align 4,,10
 2627      000000
 2628              		.p2align 3
 2629              	.L258:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2630              		.loc 1 377 5 view .LVU820
 2631 0290 4889DF   		movq	%rbx, %rdi
 2632 0293 E8000000 		call	dump_buffer_e
 2632      00
 2633              	.LVL264:
 2634 0298 EBBD     		jmp	.L226
 2635 029a 660F1F44 		.p2align 4,,10
 2635      0000
 2636              		.p2align 3
 2637              	.L257:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2638              		.loc 1 377 5 is_stmt 0 view .LVU821
 2639 02a0 4183E507 		andl	$7, %r13d
 2640              	.LVL265:
 2641              	.L223:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2642              		.loc 1 377 5 view .LVU822
 2643              	.LBE149:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 2644              		.loc 1 385 3 is_stmt 1 view .LVU823
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 2645              		.loc 1 385 29 is_stmt 0 view .LVU824
 2646 02a4 48896B18 		movq	%rbp, 24(%rbx)
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 2647              		.loc 1 386 3 is_stmt 1 view .LVU825
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 2648              		.loc 1 386 27 is_stmt 0 view .LVU826
 2649 02a8 44896B20 		movl	%r13d, 32(%rbx)
 2650 02ac E9D1FDFF 		jmp	.L220
 2650      FF
 2651              	.LVL266:
 2652              		.p2align 4,,10
 2653 02b1 0F1F8000 		.p2align 3
 2653      000000
 2654              	.L255:
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 2655              		.loc 1 386 27 view .LVU827
 2656              	.LBE147:
 2657              	.LBE146:
 2658              	.LBE150:
 2659              	.LBE151:
 2660              	.LBE152:
 2661              	.LBE153:
 2662              	.LBE156:
 2663              	.LBE179:
 2664              	.LBB180:
 2665              	.LBB178:
 2666              	.LBB177:
 2667              	.LBB176:
 2668 02b8 4183E407 		andl	$7, %r12d
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 2669              		.loc 1 385 29 view .LVU828
 2670 02bc 48896B18 		movq	%rbp, 24(%rbx)
 2671 02c0 8B83C000 		movl	192(%rbx), %eax
 2671      0000
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 2672              		.loc 1 385 3 is_stmt 1 view .LVU829
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 2673              		.loc 1 386 3 view .LVU830
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 2674              		.loc 1 386 27 is_stmt 0 view .LVU831
 2675 02c6 44896320 		movl	%r12d, 32(%rbx)
 2676 02ca E9C2FDFF 		jmp	.L230
 2676      FF
 2677              	.LVL267:
 2678              	.L254:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 2679              		.loc 1 385 3 is_stmt 1 view .LVU832
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 2680              		.loc 1 385 29 is_stmt 0 view .LVU833
 2681 02cf 48896B18 		movq	%rbp, 24(%rbx)
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 2682              		.loc 1 386 3 is_stmt 1 view .LVU834
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 2683              		.loc 1 386 27 is_stmt 0 view .LVU835
 2684 02d3 44896320 		movl	%r12d, 32(%rbx)
 2685              	.LVL268:
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 2686              		.loc 1 386 27 view .LVU836
 2687              	.LBE176:
 2688              	.LBE177:
 2689              	.LBE178:
 2690              	.LBE180:
 2691              	.LBB181:
 464:fltk-1.3.4-1/jpeg/jchuff.c **** {
 2692              		.loc 1 464 1 is_stmt 1 view .LVU837
 2693              	.LBB167:
 481:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2694              		.loc 1 481 5 view .LVU838
 481:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2695              		.loc 1 481 21 is_stmt 0 view .LVU839
 2696 02d7 C783E400 		movl	$0, 228(%rbx)
 2696      00000000 
 2696      0000
 484:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->BE = 0;
 2697              		.loc 1 484 5 is_stmt 1 view .LVU840
 2698              	.LVL269:
 2699              	.LBB165:
 445:fltk-1.3.4-1/jpeg/jchuff.c **** 		    unsigned int nbits)
 2700              		.loc 1 445 1 view .LVU841
 2701              	.LBB163:
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 2702              		.loc 1 448 3 view .LVU842
 2703 02e1 E9B9FDFF 		jmp	.L232
 2703      FF
 2704              	.LBE163:
 2705              	.LBE165:
 2706              	.LBE167:
 2707              	.LBE181:
 2708              		.cfi_endproc
 2709              	.LFE61:
 2711              		.section	.text.emit_restart_e,"ax",@progbits
 2712              		.p2align 4
 2714              	emit_restart_e:
 2715              	.LVL270:
 2716              	.LFB63:
 517:fltk-1.3.4-1/jpeg/jchuff.c ****   int ci;
 2717              		.loc 1 517 1 view -0
 2718              		.cfi_startproc
 518:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2719              		.loc 1 518 3 view .LVU844
 520:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2720              		.loc 1 520 3 view .LVU845
 517:fltk-1.3.4-1/jpeg/jchuff.c ****   int ci;
 2721              		.loc 1 517 1 is_stmt 0 view .LVU846
 2722 0000 4156     		pushq	%r14
 2723              		.cfi_def_cfa_offset 16
 2724              		.cfi_offset 14, -16
 2725 0002 4155     		pushq	%r13
 2726              		.cfi_def_cfa_offset 24
 2727              		.cfi_offset 13, -24
 2728 0004 4154     		pushq	%r12
 2729              		.cfi_def_cfa_offset 32
 2730              		.cfi_offset 12, -32
 2731 0006 4189F4   		movl	%esi, %r12d
 2732 0009 55       		pushq	%rbp
 2733              		.cfi_def_cfa_offset 40
 2734              		.cfi_offset 6, -40
 2735 000a 53       		pushq	%rbx
 2736              		.cfi_def_cfa_offset 48
 2737              		.cfi_offset 3, -48
 517:fltk-1.3.4-1/jpeg/jchuff.c ****   int ci;
 2738              		.loc 1 517 1 view .LVU847
 2739 000b 4889FB   		movq	%rdi, %rbx
 520:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2740              		.loc 1 520 3 view .LVU848
 2741 000e E8000000 		call	emit_eobrun
 2741      00
 2742              	.LVL271:
 522:fltk-1.3.4-1/jpeg/jchuff.c ****     flush_bits_e(entropy);
 2743              		.loc 1 522 3 is_stmt 1 view .LVU849
 522:fltk-1.3.4-1/jpeg/jchuff.c ****     flush_bits_e(entropy);
 2744              		.loc 1 522 6 is_stmt 0 view .LVU850
 2745 0013 8BBBC000 		movl	192(%rbx), %edi
 2745      0000
 2746 0019 85FF     		testl	%edi, %edi
 2747 001b 745B     		je	.L280
 2748              	.LVL272:
 2749              	.L261:
 525:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2750              		.loc 1 525 50 is_stmt 1 discriminator 3 view .LVU851
 528:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Re-initialize DC predictions to 0 */
 2751              		.loc 1 528 3 discriminator 3 view .LVU852
 528:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Re-initialize DC predictions to 0 */
 2752              		.loc 1 528 14 is_stmt 0 discriminator 3 view .LVU853
 2753 001d 488B93D8 		movq	216(%rbx), %rdx
 2753      000000
 528:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Re-initialize DC predictions to 0 */
 2754              		.loc 1 528 6 discriminator 3 view .LVU854
 2755 0024 8BB2CC01 		movl	460(%rdx), %esi
 2755      0000
 2756 002a 85F6     		testl	%esi, %esi
 2757 002c 7532     		jne	.L270
 2758              	.LVL273:
 530:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->saved.last_dc_val[ci] = 0;
 2759              		.loc 1 530 18 is_stmt 1 view .LVU855
 530:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->saved.last_dc_val[ci] = 0;
 2760              		.loc 1 530 5 is_stmt 0 view .LVU856
 2761 002e 8B8A7401 		movl	372(%rdx), %ecx
 2761      0000
 2762 0034 31C0     		xorl	%eax, %eax
 2763 0036 85C9     		testl	%ecx, %ecx
 2764 0038 7E31     		jle	.L259
 2765              	.LVL274:
 2766 003a 660F1F44 		.p2align 4,,10
 2766      0000
 2767              		.p2align 3
 2768              	.L271:
 531:fltk-1.3.4-1/jpeg/jchuff.c ****   } else {
 2769              		.loc 1 531 7 is_stmt 1 discriminator 3 view .LVU857
 531:fltk-1.3.4-1/jpeg/jchuff.c ****   } else {
 2770              		.loc 1 531 38 is_stmt 0 discriminator 3 view .LVU858
 2771 0040 C7448324 		movl	$0, 36(%rbx,%rax,4)
 2771      00000000 
 530:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->saved.last_dc_val[ci] = 0;
 2772              		.loc 1 530 54 is_stmt 1 discriminator 3 view .LVU859
 2773              	.LVL275:
 530:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->saved.last_dc_val[ci] = 0;
 2774              		.loc 1 530 18 discriminator 3 view .LVU860
 2775 0048 4883C001 		addq	$1, %rax
 2776              	.LVL276:
 530:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->saved.last_dc_val[ci] = 0;
 2777              		.loc 1 530 5 is_stmt 0 discriminator 3 view .LVU861
 2778 004c 39827401 		cmpl	%eax, 372(%rdx)
 2778      0000
 2779 0052 7FEC     		jg	.L271
 537:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2780              		.loc 1 537 1 view .LVU862
 2781 0054 5B       		popq	%rbx
 2782              		.cfi_remember_state
 2783              		.cfi_def_cfa_offset 40
 2784              	.LVL277:
 537:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2785              		.loc 1 537 1 view .LVU863
 2786 0055 5D       		popq	%rbp
 2787              		.cfi_def_cfa_offset 32
 2788 0056 415C     		popq	%r12
 2789              		.cfi_def_cfa_offset 24
 2790 0058 415D     		popq	%r13
 2791              		.cfi_def_cfa_offset 16
 2792 005a 415E     		popq	%r14
 2793              		.cfi_def_cfa_offset 8
 2794 005c C3       		ret
 2795              	.LVL278:
 2796 005d 0F1F00   		.p2align 4,,10
 2797              		.p2align 3
 2798              	.L270:
 2799              		.cfi_restore_state
 534:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->BE = 0;
 2800              		.loc 1 534 5 is_stmt 1 view .LVU864
 535:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2801              		.loc 1 535 5 view .LVU865
 534:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->BE = 0;
 2802              		.loc 1 534 21 is_stmt 0 view .LVU866
 2803 0060 48C783E4 		movq	$0, 228(%rbx)
 2803      00000000 
 2803      000000
 2804              	.L259:
 537:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2805              		.loc 1 537 1 view .LVU867
 2806 006b 5B       		popq	%rbx
 2807              		.cfi_remember_state
 2808              		.cfi_def_cfa_offset 40
 2809              	.LVL279:
 537:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2810              		.loc 1 537 1 view .LVU868
 2811 006c 5D       		popq	%rbp
 2812              		.cfi_def_cfa_offset 32
 2813 006d 415C     		popq	%r12
 2814              		.cfi_def_cfa_offset 24
 2815 006f 415D     		popq	%r13
 2816              		.cfi_def_cfa_offset 16
 2817 0071 415E     		popq	%r14
 2818              		.cfi_def_cfa_offset 8
 2819 0073 C3       		ret
 2820              	.LVL280:
 2821              		.p2align 4,,10
 2822 0074 0F1F4000 		.p2align 3
 2823              	.L280:
 2824              		.cfi_restore_state
 523:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_byte_e(entropy, 0xFF);
 2825              		.loc 1 523 5 is_stmt 1 view .LVU869
 2826              	.LBB189:
 2827              	.LBI189:
 402:fltk-1.3.4-1/jpeg/jchuff.c **** {
 2828              		.loc 1 402 1 view .LVU870
 2829              	.LBB190:
 404:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_buffer = 0; /* and reset bit-buffer to empty */
 2830              		.loc 1 404 3 view .LVU871
 2831              	.LBB191:
 2832              	.LBI191:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 2833              		.loc 1 349 1 view .LVU872
 2834              	.LBB192:
 353:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 2835              		.loc 1 353 3 view .LVU873
 354:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2836              		.loc 1 354 3 view .LVU874
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 2837              		.loc 1 357 3 view .LVU875
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 2838              		.loc 1 360 3 view .LVU876
 2839              	.LBB193:
 2840              	.LBI193:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 2841              		.loc 1 349 1 view .LVU877
 2842              	.LBB194:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2843              		.loc 1 364 3 view .LVU878
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2844              		.loc 1 367 3 view .LVU879
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2845              		.loc 1 367 12 is_stmt 0 view .LVU880
 2846 0078 8B4320   		movl	32(%rbx), %eax
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2847              		.loc 1 369 21 view .LVU881
 2848 007b B9180000 		movl	$24, %ecx
 2848      00
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2849              		.loc 1 369 14 view .LVU882
 2850 0080 BD7F0000 		movl	$127, %ebp
 2850      00
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2851              		.loc 1 367 12 view .LVU883
 2852 0085 448D6807 		leal	7(%rax), %r13d
 2853              	.LVL281:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2854              		.loc 1 369 3 is_stmt 1 view .LVU884
 2855 0089 488B83C8 		movq	200(%rbx), %rax
 2855      000000
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2856              		.loc 1 369 21 is_stmt 0 view .LVU885
 2857 0090 4429E9   		subl	%r13d, %ecx
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2858              		.loc 1 369 14 view .LVU886
 2859 0093 48D3E5   		salq	%cl, %rbp
 2860              	.LVL282:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2861              		.loc 1 372 3 is_stmt 1 view .LVU887
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2862              		.loc 1 372 14 is_stmt 0 view .LVU888
 2863 0096 480B6B18 		orq	24(%rbx), %rbp
 2864              	.LVL283:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2865              		.loc 1 374 3 is_stmt 1 view .LVU889
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2866              		.loc 1 374 9 view .LVU890
 2867 009a 4183FD07 		cmpl	$7, %r13d
 2868 009e 0F8E1401 		jle	.L262
 2868      0000
 2869 00a4 488D5001 		leaq	1(%rax), %rdx
 2870 00a8 EB14     		jmp	.L266
 2871              	.LVL284:
 2872 00aa 660F1F44 		.p2align 4,,10
 2872      0000
 2873              		.p2align 3
 2874              	.L264:
 2875              	.LBB195:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 2876              		.loc 1 379 30 view .LVU891
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 2877              		.loc 1 381 5 view .LVU892
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2878              		.loc 1 382 14 is_stmt 0 view .LVU893
 2879 00b0 4183ED08 		subl	$8, %r13d
 2880              	.LVL285:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 2881              		.loc 1 381 16 view .LVU894
 2882 00b4 48C1E508 		salq	$8, %rbp
 2883              	.LVL286:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2884              		.loc 1 382 5 is_stmt 1 view .LVU895
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2885              		.loc 1 382 5 is_stmt 0 view .LVU896
 2886              	.LBE195:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2887              		.loc 1 374 9 is_stmt 1 view .LVU897
 2888 00b8 4183FD07 		cmpl	$7, %r13d
 2889 00bc 7E6D     		jle	.L267
 2890              	.LVL287:
 2891              	.L266:
 2892              	.LBB196:
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2893              		.loc 1 375 5 view .LVU898
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2894              		.loc 1 375 32 is_stmt 0 view .LVU899
 2895 00be 4889E9   		movq	%rbp, %rcx
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2896              		.loc 1 377 5 view .LVU900
 2897 00c1 488993C8 		movq	%rdx, 200(%rbx)
 2897      000000
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2898              		.loc 1 375 32 view .LVU901
 2899 00c8 48C1F910 		sarq	$16, %rcx
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2900              		.loc 1 377 5 view .LVU902
 2901 00cc 8808     		movb	%cl, (%rax)
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2902              		.loc 1 375 9 view .LVU903
 2903 00ce 440FB6F1 		movzbl	%cl, %r14d
 2904              	.LVL288:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2905              		.loc 1 377 5 is_stmt 1 view .LVU904
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2906              		.loc 1 377 5 view .LVU905
 2907 00d2 4883ABD0 		subq	$1, 208(%rbx)
 2907      00000001 
 2908 00da 0F84A800 		je	.L281
 2908      0000
 2909              	.L263:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2910              		.loc 1 377 28 view .LVU906
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 2911              		.loc 1 378 5 view .LVU907
 2912 00e0 488B83C8 		movq	200(%rbx), %rax
 2912      000000
 2913 00e7 488D5001 		leaq	1(%rax), %rdx
 2914 00eb 4889D1   		movq	%rdx, %rcx
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 2915              		.loc 1 378 8 is_stmt 0 view .LVU908
 2916 00ee 4181FEFF 		cmpl	$255, %r14d
 2916      000000
 2917 00f5 75B9     		jne	.L264
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 2918              		.loc 1 379 7 is_stmt 1 view .LVU909
 2919 00f7 488993C8 		movq	%rdx, 200(%rbx)
 2919      000000
 2920 00fe C60000   		movb	$0, (%rax)
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 2921              		.loc 1 379 7 view .LVU910
 2922 0101 4883ABD0 		subq	$1, 208(%rbx)
 2922      00000001 
 2923 0109 0F848900 		je	.L265
 2923      0000
 2924              	.L279:
 2925 010f 488B83C8 		movq	200(%rbx), %rax
 2925      000000
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2926              		.loc 1 382 14 is_stmt 0 view .LVU911
 2927 0116 4183ED08 		subl	$8, %r13d
 2928              	.LVL289:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 2929              		.loc 1 381 16 view .LVU912
 2930 011a 48C1E508 		salq	$8, %rbp
 2931              	.LVL290:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 2932              		.loc 1 381 16 view .LVU913
 2933 011e 488D5001 		leaq	1(%rax), %rdx
 2934 0122 4889D1   		movq	%rdx, %rcx
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 2935              		.loc 1 379 30 is_stmt 1 view .LVU914
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 2936              		.loc 1 381 5 view .LVU915
 2937              	.LVL291:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2938              		.loc 1 382 5 view .LVU916
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2939              		.loc 1 382 5 is_stmt 0 view .LVU917
 2940              	.LBE196:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2941              		.loc 1 374 9 is_stmt 1 view .LVU918
 2942 0125 4183FD07 		cmpl	$7, %r13d
 2943 0129 7F93     		jg	.L266
 2944              	.LVL292:
 2945              	.L267:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 2946              		.loc 1 385 3 view .LVU919
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 2947              		.loc 1 386 3 view .LVU920
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 2948              		.loc 1 386 3 is_stmt 0 view .LVU921
 2949              	.LBE194:
 2950              	.LBE193:
 2951              	.LBE192:
 2952              	.LBE191:
 405:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = 0;
 2953              		.loc 1 405 3 is_stmt 1 view .LVU922
 405:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = 0;
 2954              		.loc 1 405 29 is_stmt 0 view .LVU923
 2955 012b 48C74318 		movq	$0, 24(%rbx)
 2955      00000000 
 406:fltk-1.3.4-1/jpeg/jchuff.c **** }
 2956              		.loc 1 406 3 is_stmt 1 view .LVU924
 406:fltk-1.3.4-1/jpeg/jchuff.c **** }
 2957              		.loc 1 406 27 is_stmt 0 view .LVU925
 2958 0133 C7432000 		movl	$0, 32(%rbx)
 2958      000000
 2959              	.LVL293:
 406:fltk-1.3.4-1/jpeg/jchuff.c **** }
 2960              		.loc 1 406 27 view .LVU926
 2961              	.LBE190:
 2962              	.LBE189:
 524:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_byte_e(entropy, JPEG_RST0 + restart_num);
 2963              		.loc 1 524 5 is_stmt 1 view .LVU927
 2964 013a 48898BC8 		movq	%rcx, 200(%rbx)
 2964      000000
 2965 0141 C600FF   		movb	$-1, (%rax)
 524:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_byte_e(entropy, JPEG_RST0 + restart_num);
 2966              		.loc 1 524 5 view .LVU928
 2967 0144 4883ABD0 		subq	$1, 208(%rbx)
 2967      00000001 
 2968 014c 745A     		je	.L282
 2969              	.L268:
 524:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_byte_e(entropy, JPEG_RST0 + restart_num);
 2970              		.loc 1 524 31 discriminator 3 view .LVU929
 525:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2971              		.loc 1 525 5 discriminator 3 view .LVU930
 2972 014e 488B83C8 		movq	200(%rbx), %rax
 2972      000000
 2973 0155 4183EC30 		subl	$48, %r12d
 2974              	.LVL294:
 525:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2975              		.loc 1 525 5 is_stmt 0 discriminator 3 view .LVU931
 2976 0159 488D5001 		leaq	1(%rax), %rdx
 2977 015d 488993C8 		movq	%rdx, 200(%rbx)
 2977      000000
 2978 0164 448820   		movb	%r12b, (%rax)
 525:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2979              		.loc 1 525 5 is_stmt 1 discriminator 3 view .LVU932
 2980 0167 4883ABD0 		subq	$1, 208(%rbx)
 2980      00000001 
 2981 016f 0F85A8FE 		jne	.L261
 2981      FFFF
 525:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2982              		.loc 1 525 5 discriminator 1 view .LVU933
 2983 0175 4889DF   		movq	%rbx, %rdi
 2984 0178 E8000000 		call	dump_buffer_e
 2984      00
 2985              	.LVL295:
 2986 017d E99BFEFF 		jmp	.L261
 2986      FF
 2987              	.LVL296:
 2988              		.p2align 4,,10
 2989 0182 660F1F44 		.p2align 3
 2989      0000
 2990              	.L281:
 2991              	.LBB203:
 2992              	.LBB202:
 2993              	.LBB201:
 2994              	.LBB200:
 2995              	.LBB199:
 2996              	.LBB198:
 2997              	.LBB197:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2998              		.loc 1 377 5 view .LVU934
 2999 0188 4889DF   		movq	%rbx, %rdi
 3000 018b E8000000 		call	dump_buffer_e
 3000      00
 3001              	.LVL297:
 3002 0190 E94BFFFF 		jmp	.L263
 3002      FF
 3003              		.p2align 4,,10
 3004 0195 0F1F00   		.p2align 3
 3005              	.L265:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3006              		.loc 1 379 7 view .LVU935
 3007 0198 4889DF   		movq	%rbx, %rdi
 3008 019b E8000000 		call	dump_buffer_e
 3008      00
 3009              	.LVL298:
 3010 01a0 E96AFFFF 		jmp	.L279
 3010      FF
 3011              	.LVL299:
 3012              		.p2align 4,,10
 3013 01a5 0F1F00   		.p2align 3
 3014              	.L282:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3015              		.loc 1 379 7 is_stmt 0 view .LVU936
 3016              	.LBE197:
 3017              	.LBE198:
 3018              	.LBE199:
 3019              	.LBE200:
 3020              	.LBE201:
 3021              	.LBE202:
 3022              	.LBE203:
 524:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_byte_e(entropy, JPEG_RST0 + restart_num);
 3023              		.loc 1 524 5 is_stmt 1 discriminator 1 view .LVU937
 3024 01a8 4889DF   		movq	%rbx, %rdi
 3025 01ab E8000000 		call	dump_buffer_e
 3025      00
 3026              	.LVL300:
 3027 01b0 EB9C     		jmp	.L268
 3028              	.LVL301:
 3029              		.p2align 4,,10
 3030 01b2 660F1F44 		.p2align 3
 3030      0000
 3031              	.L262:
 524:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_byte_e(entropy, JPEG_RST0 + restart_num);
 3032              		.loc 1 524 5 is_stmt 0 discriminator 1 view .LVU938
 3033 01b8 488D4801 		leaq	1(%rax), %rcx
 3034 01bc E96AFFFF 		jmp	.L267
 3034      FF
 3035              		.cfi_endproc
 3036              	.LFE63:
 3038              		.section	.text.encode_mcu_DC_first,"ax",@progbits
 3039              		.p2align 4
 3041              	encode_mcu_DC_first:
 3042              	.LVL302:
 3043              	.LFB64:
 547:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 3044              		.loc 1 547 1 is_stmt 1 view -0
 3045              		.cfi_startproc
 547:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 3046              		.loc 1 547 1 is_stmt 0 view .LVU940
 3047 0000 F30F1EFA 		endbr64
 548:fltk-1.3.4-1/jpeg/jchuff.c ****   register int temp, temp2;
 3048              		.loc 1 548 3 is_stmt 1 view .LVU941
 547:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 3049              		.loc 1 547 1 is_stmt 0 view .LVU942
 3050 0004 4157     		pushq	%r15
 3051              		.cfi_def_cfa_offset 16
 3052              		.cfi_offset 15, -16
 3053 0006 4156     		pushq	%r14
 3054              		.cfi_def_cfa_offset 24
 3055              		.cfi_offset 14, -24
 3056 0008 4155     		pushq	%r13
 3057              		.cfi_def_cfa_offset 32
 3058              		.cfi_offset 13, -32
 3059 000a 4989FD   		movq	%rdi, %r13
 3060 000d 4154     		pushq	%r12
 3061              		.cfi_def_cfa_offset 40
 3062              		.cfi_offset 12, -40
 3063 000f 55       		pushq	%rbp
 3064              		.cfi_def_cfa_offset 48
 3065              		.cfi_offset 6, -48
 3066 0010 53       		pushq	%rbx
 3067              		.cfi_def_cfa_offset 56
 3068              		.cfi_offset 3, -56
 3069 0011 4883EC28 		subq	$40, %rsp
 3070              		.cfi_def_cfa_offset 96
 554:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 3071              		.loc 1 554 42 view .LVU943
 3072 0015 488B4728 		movq	40(%rdi), %rax
 548:fltk-1.3.4-1/jpeg/jchuff.c ****   register int temp, temp2;
 3073              		.loc 1 548 20 view .LVU944
 3074 0019 488B9F30 		movq	560(%rdi), %rbx
 3074      020000
 3075              	.LVL303:
 549:fltk-1.3.4-1/jpeg/jchuff.c ****   register int nbits;
 3076              		.loc 1 549 3 is_stmt 1 view .LVU945
 550:fltk-1.3.4-1/jpeg/jchuff.c ****   int blkn, ci, tbl;
 3077              		.loc 1 550 3 view .LVU946
 551:fltk-1.3.4-1/jpeg/jchuff.c ****   ISHIFT_TEMPS
 3078              		.loc 1 551 3 view .LVU947
 554:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 3079              		.loc 1 554 3 view .LVU948
 547:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 3080              		.loc 1 547 1 is_stmt 0 view .LVU949
 3081 0020 48897424 		movq	%rsi, 16(%rsp)
 3081      10
 554:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 3082              		.loc 1 554 42 view .LVU950
 3083 0025 488B00   		movq	(%rax), %rax
 554:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 3084              		.loc 1 554 29 view .LVU951
 3085 0028 488983C8 		movq	%rax, 200(%rbx)
 3085      000000
 555:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3086              		.loc 1 555 3 is_stmt 1 view .LVU952
 555:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3087              		.loc 1 555 40 is_stmt 0 view .LVU953
 3088 002f 488B4728 		movq	40(%rdi), %rax
 3089 0033 488B4008 		movq	8(%rax), %rax
 555:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3090              		.loc 1 555 27 view .LVU954
 3091 0037 488983D0 		movq	%rax, 208(%rbx)
 3091      000000
 558:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 3092              		.loc 1 558 3 is_stmt 1 view .LVU955
 558:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 3093              		.loc 1 558 6 is_stmt 0 view .LVU956
 3094 003e 448B873C 		movl	316(%rdi), %r8d
 3094      010000
 3095 0045 4585C0   		testl	%r8d, %r8d
 3096 0048 740B     		je	.L284
 559:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_restart_e(entropy, entropy->next_restart_num);
 3097              		.loc 1 559 5 is_stmt 1 view .LVU957
 559:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_restart_e(entropy, entropy->next_restart_num);
 3098              		.loc 1 559 8 is_stmt 0 view .LVU958
 3099 004a 8B7B38   		movl	56(%rbx), %edi
 3100              	.LVL304:
 559:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_restart_e(entropy, entropy->next_restart_num);
 3101              		.loc 1 559 8 view .LVU959
 3102 004d 85FF     		testl	%edi, %edi
 3103 004f 0F846303 		je	.L325
 3103      0000
 3104              	.LVL305:
 3105              	.L284:
 563:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
 3106              		.loc 1 563 18 is_stmt 1 discriminator 1 view .LVU960
 563:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
 3107              		.loc 1 563 3 is_stmt 0 discriminator 1 view .LVU961
 3108 0055 418BB5A0 		movl	416(%r13), %esi
 3108      010000
 3109 005c 4531E4   		xorl	%r12d, %r12d
 3110 005f 85F6     		testl	%esi, %esi
 3111 0061 0F8EAC00 		jle	.L309
 3111      0000
 3112              	.LVL306:
 3113 0067 660F1F84 		.p2align 4,,10
 3113      00000000 
 3113      00
 3114              		.p2align 3
 3115              	.L285:
 564:fltk-1.3.4-1/jpeg/jchuff.c ****     tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 3116              		.loc 1 564 5 is_stmt 1 view .LVU962
 565:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3117              		.loc 1 565 5 view .LVU963
 565:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3118              		.loc 1 565 31 is_stmt 0 view .LVU964
 3119 0070 4B63BCA5 		movslq	420(%r13,%r12,4), %rdi
 3119      A4010000 
 570:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3120              		.loc 1 570 10 view .LVU965
 3121 0078 418B8DD8 		movl	472(%r13), %ecx
 3121      010000
 565:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3122              		.loc 1 565 9 view .LVU966
 3123 007f 498B84FD 		movq	376(%r13,%rdi,8), %rax
 3123      78010000 
 3124 0087 488D3CBB 		leaq	(%rbx,%rdi,4), %rdi
 573:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->saved.last_dc_val[ci] = temp;
 3125              		.loc 1 573 46 view .LVU967
 3126 008b 448B4724 		movl	36(%rdi), %r8d
 565:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3127              		.loc 1 565 9 view .LVU968
 3128 008f 4C637814 		movslq	20(%rax), %r15
 3129              	.LVL307:
 570:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3130              		.loc 1 570 5 is_stmt 1 view .LVU969
 570:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3131              		.loc 1 570 12 is_stmt 0 view .LVU970
 3132 0093 488B4424 		movq	16(%rsp), %rax
 3132      10
 3133 0098 4A8B04E0 		movq	(%rax,%r12,8), %rax
 3134 009c 0FBF00   		movswl	(%rax), %eax
 570:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3135              		.loc 1 570 10 view .LVU971
 3136 009f D3F8     		sarl	%cl, %eax
 3137 00a1 89C1     		movl	%eax, %ecx
 3138              	.LVL308:
 573:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->saved.last_dc_val[ci] = temp;
 3139              		.loc 1 573 5 is_stmt 1 view .LVU972
 573:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->saved.last_dc_val[ci] = temp;
 3140              		.loc 1 573 11 is_stmt 0 view .LVU973
 3141 00a3 4429C0   		subl	%r8d, %eax
 3142              	.LVL309:
 574:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3143              		.loc 1 574 5 is_stmt 1 view .LVU974
 574:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3144              		.loc 1 574 36 is_stmt 0 view .LVU975
 3145 00a6 894F24   		movl	%ecx, 36(%rdi)
 3146              	.LVL310:
 577:fltk-1.3.4-1/jpeg/jchuff.c ****     if (temp < 0) {
 3147              		.loc 1 577 5 is_stmt 1 view .LVU976
 578:fltk-1.3.4-1/jpeg/jchuff.c ****       temp = -temp;		/* temp is abs value of input */
 3148              		.loc 1 578 5 view .LVU977
 3149 00a9 4189C6   		movl	%eax, %r14d
 578:fltk-1.3.4-1/jpeg/jchuff.c ****       temp = -temp;		/* temp is abs value of input */
 3150              		.loc 1 578 8 is_stmt 0 view .LVU978
 3151 00ac 7909     		jns	.L288
 579:fltk-1.3.4-1/jpeg/jchuff.c ****       /* For a negative input, want temp2 = bitwise complement of abs(input) */
 3152              		.loc 1 579 7 is_stmt 1 view .LVU979
 3153              	.LVL311:
 582:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3154              		.loc 1 582 7 view .LVU980
 582:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3155              		.loc 1 582 12 is_stmt 0 view .LVU981
 3156 00ae 448D70FF 		leal	-1(%rax), %r14d
 3157              	.LVL312:
 579:fltk-1.3.4-1/jpeg/jchuff.c ****       /* For a negative input, want temp2 = bitwise complement of abs(input) */
 3158              		.loc 1 579 12 view .LVU982
 3159 00b2 4489C0   		movl	%r8d, %eax
 3160 00b5 29C8     		subl	%ecx, %eax
 3161              	.LVL313:
 3162              	.L288:
 586:fltk-1.3.4-1/jpeg/jchuff.c ****     while (temp) {
 3163              		.loc 1 586 5 is_stmt 1 view .LVU983
 587:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 3164              		.loc 1 587 5 view .LVU984
 587:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 3165              		.loc 1 587 11 view .LVU985
 586:fltk-1.3.4-1/jpeg/jchuff.c ****     while (temp) {
 3166              		.loc 1 586 11 is_stmt 0 view .LVU986
 3167 00b7 31ED     		xorl	%ebp, %ebp
 587:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 3168              		.loc 1 587 11 view .LVU987
 3169 00b9 85C0     		testl	%eax, %eax
 3170 00bb 7423     		je	.L289
 3171              	.LVL314:
 3172 00bd 0F1F00   		.p2align 4,,10
 3173              		.p2align 3
 3174              	.L290:
 588:fltk-1.3.4-1/jpeg/jchuff.c ****       temp >>= 1;
 3175              		.loc 1 588 7 is_stmt 1 view .LVU988
 588:fltk-1.3.4-1/jpeg/jchuff.c ****       temp >>= 1;
 3176              		.loc 1 588 12 is_stmt 0 view .LVU989
 3177 00c0 83C501   		addl	$1, %ebp
 3178              	.LVL315:
 589:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3179              		.loc 1 589 7 is_stmt 1 view .LVU990
 587:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 3180              		.loc 1 587 11 view .LVU991
 3181 00c3 D1F8     		sarl	%eax
 3182              	.LVL316:
 587:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 3183              		.loc 1 587 11 is_stmt 0 view .LVU992
 3184 00c5 75F9     		jne	.L290
 594:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 3185              		.loc 1 594 5 is_stmt 1 view .LVU993
 594:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 3186              		.loc 1 594 8 is_stmt 0 view .LVU994
 3187 00c7 83FD0B   		cmpl	$11, %ebp
 3188 00ca 7E14     		jle	.L289
 595:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3189              		.loc 1 595 7 is_stmt 1 view .LVU995
 3190 00cc 498B4500 		movq	0(%r13), %rax
 3191              	.LVL317:
 595:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3192              		.loc 1 595 7 is_stmt 0 view .LVU996
 3193 00d0 4C89EF   		movq	%r13, %rdi
 3194 00d3 C7402806 		movl	$6, 40(%rax)
 3194      000000
 3195 00da 498B4500 		movq	0(%r13), %rax
 3196 00de FF10     		call	*(%rax)
 3197              	.LVL318:
 3198              	.L289:
 598:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3199              		.loc 1 598 5 is_stmt 1 view .LVU997
 3200              	.LBB217:
 3201              	.LBI217:
 416:fltk-1.3.4-1/jpeg/jchuff.c **** {
 3202              		.loc 1 416 1 view .LVU998
 3203              	.LBB218:
 418:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->dc_count_ptrs[tbl_no][symbol]++;
 3204              		.loc 1 418 3 view .LVU999
 418:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->dc_count_ptrs[tbl_no][symbol]++;
 3205              		.loc 1 418 6 is_stmt 0 view .LVU1000
 3206 00e0 8B8BC000 		movl	192(%rbx), %ecx
 3206      0000
 3207 00e6 85C9     		testl	%ecx, %ecx
 3208 00e8 7476     		je	.L291
 419:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 3209              		.loc 1 419 5 is_stmt 1 view .LVU1001
 419:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 3210              		.loc 1 419 35 is_stmt 0 view .LVU1002
 3211 00ea 4A8B8CFB 		movq	128(%rbx,%r15,8), %rcx
 3211      80000000 
 3212 00f2 4863C5   		movslq	%ebp, %rax
 419:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 3213              		.loc 1 419 43 view .LVU1003
 3214 00f5 488304C1 		addq	$1, (%rcx,%rax,8)
 3214      01
 3215              	.LVL319:
 419:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 3216              		.loc 1 419 43 view .LVU1004
 3217              	.LBE218:
 3218              	.LBE217:
 602:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_bits_e(entropy, (unsigned int) temp2, nbits);
 3219              		.loc 1 602 5 is_stmt 1 view .LVU1005
 602:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_bits_e(entropy, (unsigned int) temp2, nbits);
 3220              		.loc 1 602 8 is_stmt 0 view .LVU1006
 3221 00fa 85ED     		testl	%ebp, %ebp
 3222 00fc 0F859601 		jne	.L326
 3222      0000
 3223              	.LVL320:
 3224              	.L297:
 563:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
 3225              		.loc 1 563 47 is_stmt 1 discriminator 2 view .LVU1007
 563:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
 3226              		.loc 1 563 18 discriminator 2 view .LVU1008
 3227 0102 4983C401 		addq	$1, %r12
 3228              	.LVL321:
 563:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
 3229              		.loc 1 563 3 is_stmt 0 discriminator 2 view .LVU1009
 3230 0106 4539A5A0 		cmpl	%r12d, 416(%r13)
 3230      010000
 3231 010d 0F8F5DFF 		jg	.L285
 3231      FFFF
 3232              	.L309:
 606:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 3233              		.loc 1 606 3 is_stmt 1 view .LVU1010
 606:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 3234              		.loc 1 606 8 is_stmt 0 view .LVU1011
 3235 0113 498B4528 		movq	40(%r13), %rax
 606:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 3236              		.loc 1 606 42 view .LVU1012
 3237 0117 488B8BC8 		movq	200(%rbx), %rcx
 3237      000000
 606:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 3238              		.loc 1 606 33 view .LVU1013
 3239 011e 488908   		movq	%rcx, (%rax)
 607:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3240              		.loc 1 607 3 is_stmt 1 view .LVU1014
 607:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3241              		.loc 1 607 8 is_stmt 0 view .LVU1015
 3242 0121 498B4528 		movq	40(%r13), %rax
 607:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3243              		.loc 1 607 40 view .LVU1016
 3244 0125 488B8BD0 		movq	208(%rbx), %rcx
 3244      000000
 607:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3245              		.loc 1 607 31 view .LVU1017
 3246 012c 48894808 		movq	%rcx, 8(%rax)
 610:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 3247              		.loc 1 610 3 is_stmt 1 view .LVU1018
 610:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 3248              		.loc 1 610 12 is_stmt 0 view .LVU1019
 3249 0130 418B953C 		movl	316(%r13), %edx
 3249      010000
 610:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 3250              		.loc 1 610 6 view .LVU1020
 3251 0137 85D2     		testl	%edx, %edx
 3252 0139 7411     		je	.L287
 611:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 3253              		.loc 1 611 5 is_stmt 1 view .LVU1021
 611:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 3254              		.loc 1 611 16 is_stmt 0 view .LVU1022
 3255 013b 8B4338   		movl	56(%rbx), %eax
 611:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 3256              		.loc 1 611 8 view .LVU1023
 3257 013e 85C0     		testl	%eax, %eax
 3258 0140 0F845F02 		je	.L327
 3258      0000
 3259              	.L310:
 616:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3260              		.loc 1 616 5 is_stmt 1 view .LVU1024
 616:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3261              		.loc 1 616 28 is_stmt 0 view .LVU1025
 3262 0146 83E801   		subl	$1, %eax
 3263 0149 894338   		movl	%eax, 56(%rbx)
 3264              	.L287:
 619:fltk-1.3.4-1/jpeg/jchuff.c **** }
 3265              		.loc 1 619 3 is_stmt 1 view .LVU1026
 620:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3266              		.loc 1 620 1 is_stmt 0 view .LVU1027
 3267 014c 4883C428 		addq	$40, %rsp
 3268              		.cfi_remember_state
 3269              		.cfi_def_cfa_offset 56
 3270 0150 B8010000 		movl	$1, %eax
 3270      00
 3271 0155 5B       		popq	%rbx
 3272              		.cfi_def_cfa_offset 48
 3273              	.LVL322:
 620:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3274              		.loc 1 620 1 view .LVU1028
 3275 0156 5D       		popq	%rbp
 3276              		.cfi_def_cfa_offset 40
 3277 0157 415C     		popq	%r12
 3278              		.cfi_def_cfa_offset 32
 3279 0159 415D     		popq	%r13
 3280              		.cfi_def_cfa_offset 24
 3281              	.LVL323:
 620:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3282              		.loc 1 620 1 view .LVU1029
 3283 015b 415E     		popq	%r14
 3284              		.cfi_def_cfa_offset 16
 3285 015d 415F     		popq	%r15
 3286              		.cfi_def_cfa_offset 8
 3287 015f C3       		ret
 3288              	.LVL324:
 3289              		.p2align 4,,10
 3290              		.p2align 3
 3291              	.L291:
 3292              		.cfi_restore_state
 3293              	.LBB234:
 3294              	.LBB232:
 3295              	.LBB219:
 421:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 3296              		.loc 1 421 5 is_stmt 1 view .LVU1030
 421:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 3297              		.loc 1 421 21 is_stmt 0 view .LVU1031
 3298 0160 4963C7   		movslq	%r15d, %rax
 422:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3299              		.loc 1 422 58 view .LVU1032
 3300 0163 4863CD   		movslq	%ebp, %rcx
 421:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 3301              		.loc 1 421 21 view .LVU1033
 3302 0166 488B44C3 		movq	64(%rbx,%rax,8), %rax
 3302      40
 3303              	.LVL325:
 422:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3304              		.loc 1 422 5 is_stmt 1 view .LVU1034
 3305 016b 440FB6BC 		movzbl	1024(%rax,%rcx), %r15d
 3305      08000400 
 3305      00
 3306              	.LVL326:
 422:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3307              		.loc 1 422 5 is_stmt 0 view .LVU1035
 3308 0174 448B0488 		movl	(%rax,%rcx,4), %r8d
 3309              	.LVL327:
 3310              	.LBB220:
 3311              	.LBI220:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 3312              		.loc 1 349 1 is_stmt 1 view .LVU1036
 3313              	.LBB221:
 353:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 3314              		.loc 1 353 3 view .LVU1037
 354:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3315              		.loc 1 354 3 view .LVU1038
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 3316              		.loc 1 357 3 view .LVU1039
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 3317              		.loc 1 357 6 is_stmt 0 view .LVU1040
 3318 0178 4585FF   		testl	%r15d, %r15d
 3319 017b 7535     		jne	.L296
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3320              		.loc 1 358 5 view .LVU1041
 3321 017d 488B83D8 		movq	216(%rbx), %rax
 3321      000000
 3322              	.LVL328:
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3323              		.loc 1 358 5 view .LVU1042
 3324 0184 44894424 		movl	%r8d, 12(%rsp)
 3324      0C
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3325              		.loc 1 358 5 is_stmt 1 view .LVU1043
 3326 0189 488B00   		movq	(%rax), %rax
 3327 018c C7402829 		movl	$41, 40(%rax)
 3327      000000
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3328              		.loc 1 358 5 is_stmt 0 view .LVU1044
 3329 0193 488BBBD8 		movq	216(%rbx), %rdi
 3329      000000
 3330 019a 488B07   		movq	(%rdi), %rax
 3331 019d FF10     		call	*(%rax)
 3332              	.LVL329:
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 3333              		.loc 1 360 3 is_stmt 1 view .LVU1045
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 3334              		.loc 1 360 6 is_stmt 0 view .LVU1046
 3335 019f 8B93C000 		movl	192(%rbx), %edx
 3335      0000
 3336 01a5 448B4424 		movl	12(%rsp), %r8d
 3336      0C
 3337 01aa 85D2     		testl	%edx, %edx
 3338 01ac 0F8550FF 		jne	.L297
 3338      FFFF
 3339              	.LVL330:
 3340              	.L296:
 3341              	.LBB222:
 3342              	.LBI222:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 3343              		.loc 1 349 1 is_stmt 1 view .LVU1047
 3344              	.LBB223:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3345              		.loc 1 364 3 view .LVU1048
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3346              		.loc 1 364 47 is_stmt 0 view .LVU1049
 3347 01b2 4489F9   		movl	%r15d, %ecx
 3348 01b5 B8010000 		movl	$1, %eax
 3348      00
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3349              		.loc 1 367 12 view .LVU1050
 3350 01ba 44037B20 		addl	32(%rbx), %r15d
 3351              	.LVL331:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3352              		.loc 1 364 47 view .LVU1051
 3353 01be 48D3E0   		salq	%cl, %rax
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3354              		.loc 1 369 21 view .LVU1052
 3355 01c1 B9180000 		movl	$24, %ecx
 3355      00
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3356              		.loc 1 367 12 view .LVU1053
 3357 01c6 4489FA   		movl	%r15d, %edx
 3358 01c9 44897C24 		movl	%r15d, 28(%rsp)
 3358      1C
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3359              		.loc 1 364 56 view .LVU1054
 3360 01ce 4883E801 		subq	$1, %rax
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3361              		.loc 1 369 21 view .LVU1055
 3362 01d2 4429F9   		subl	%r15d, %ecx
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3363              		.loc 1 364 14 view .LVU1056
 3364 01d5 4421C0   		andl	%r8d, %eax
 3365              	.LVL332:
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3366              		.loc 1 367 3 is_stmt 1 view .LVU1057
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3367              		.loc 1 369 3 view .LVU1058
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3368              		.loc 1 374 9 is_stmt 0 view .LVU1059
 3369 01d8 4189D0   		movl	%edx, %r8d
 3370              	.LVL333:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3371              		.loc 1 369 14 view .LVU1060
 3372 01db 48D3E0   		salq	%cl, %rax
 3373              	.LVL334:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3374              		.loc 1 372 14 view .LVU1061
 3375 01de 488B4B18 		movq	24(%rbx), %rcx
 3376 01e2 4809C1   		orq	%rax, %rcx
 3377 01e5 4989CF   		movq	%rcx, %r15
 3378              	.LVL335:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3379              		.loc 1 374 3 is_stmt 1 view .LVU1062
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3380              		.loc 1 374 9 view .LVU1063
 3381 01e8 83FA07   		cmpl	$7, %edx
 3382 01eb 7F19     		jg	.L294
 3383 01ed E9930000 		jmp	.L295
 3383      00
 3384              	.LVL336:
 3385              		.p2align 4,,10
 3386 01f2 660F1F44 		.p2align 3
 3386      0000
 3387              	.L300:
 3388              	.LBB224:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3389              		.loc 1 379 30 view .LVU1064
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 3390              		.loc 1 381 5 view .LVU1065
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3391              		.loc 1 382 14 is_stmt 0 view .LVU1066
 3392 01f8 4183E808 		subl	$8, %r8d
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 3393              		.loc 1 381 16 view .LVU1067
 3394 01fc 49C1E708 		salq	$8, %r15
 3395              	.LVL337:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3396              		.loc 1 382 5 is_stmt 1 view .LVU1068
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3397              		.loc 1 382 5 is_stmt 0 view .LVU1069
 3398              	.LBE224:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3399              		.loc 1 374 9 is_stmt 1 view .LVU1070
 3400 0200 4183F807 		cmpl	$7, %r8d
 3401 0204 7E7A     		jle	.L328
 3402              	.L294:
 3403              	.LBB225:
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3404              		.loc 1 375 5 view .LVU1071
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3405              		.loc 1 377 5 is_stmt 0 view .LVU1072
 3406 0206 488B83C8 		movq	200(%rbx), %rax
 3406      000000
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3407              		.loc 1 375 32 view .LVU1073
 3408 020d 4C89FF   		movq	%r15, %rdi
 3409 0210 48C1FF10 		sarq	$16, %rdi
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3410              		.loc 1 377 5 view .LVU1074
 3411 0214 4C8D5001 		leaq	1(%rax), %r10
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3412              		.loc 1 375 9 view .LVU1075
 3413 0218 440FB6CF 		movzbl	%dil, %r9d
 3414              	.LVL338:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3415              		.loc 1 377 5 is_stmt 1 view .LVU1076
 3416 021c 4C8993C8 		movq	%r10, 200(%rbx)
 3416      000000
 3417 0223 408838   		movb	%dil, (%rax)
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3418              		.loc 1 377 5 view .LVU1077
 3419 0226 4883ABD0 		subq	$1, 208(%rbx)
 3419      00000001 
 3420 022e 0F843C01 		je	.L329
 3420      0000
 3421              	.LVL339:
 3422              	.L298:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3423              		.loc 1 377 28 view .LVU1078
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 3424              		.loc 1 378 5 view .LVU1079
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 3425              		.loc 1 378 8 is_stmt 0 view .LVU1080
 3426 0234 4181F9FF 		cmpl	$255, %r9d
 3426      000000
 3427 023b 75BB     		jne	.L300
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3428              		.loc 1 379 7 is_stmt 1 view .LVU1081
 3429 023d 488B83C8 		movq	200(%rbx), %rax
 3429      000000
 3430 0244 488D7801 		leaq	1(%rax), %rdi
 3431 0248 4889BBC8 		movq	%rdi, 200(%rbx)
 3431      000000
 3432 024f C60000   		movb	$0, (%rax)
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3433              		.loc 1 379 7 view .LVU1082
 3434 0252 4883ABD0 		subq	$1, 208(%rbx)
 3434      00000001 
 3435 025a 759C     		jne	.L300
 3436 025c 4889DF   		movq	%rbx, %rdi
 3437 025f 44894424 		movl	%r8d, 12(%rsp)
 3437      0C
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3438              		.loc 1 379 7 view .LVU1083
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 3439              		.loc 1 381 16 is_stmt 0 view .LVU1084
 3440 0264 49C1E708 		salq	$8, %r15
 3441              	.LVL340:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3442              		.loc 1 379 7 view .LVU1085
 3443 0268 E8000000 		call	dump_buffer_e
 3443      00
 3444              	.LVL341:
 3445 026d 448B4424 		movl	12(%rsp), %r8d
 3445      0C
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3446              		.loc 1 379 30 is_stmt 1 view .LVU1086
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 3447              		.loc 1 381 5 view .LVU1087
 3448              	.LVL342:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3449              		.loc 1 382 5 view .LVU1088
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3450              		.loc 1 382 14 is_stmt 0 view .LVU1089
 3451 0272 4183E808 		subl	$8, %r8d
 3452              	.LVL343:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3453              		.loc 1 382 14 view .LVU1090
 3454              	.LBE225:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3455              		.loc 1 374 9 is_stmt 1 view .LVU1091
 3456 0276 4183F807 		cmpl	$7, %r8d
 3457 027a 7F8A     		jg	.L294
 3458 027c 0F1F4000 		.p2align 4,,10
 3459              		.p2align 3
 3460              	.L328:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3461              		.loc 1 374 9 is_stmt 0 view .LVU1092
 3462 0280 8364241C 		andl	$7, 28(%rsp)
 3462      07
 3463              	.L295:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 3464              		.loc 1 385 3 is_stmt 1 view .LVU1093
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 3465              		.loc 1 386 27 is_stmt 0 view .LVU1094
 3466 0285 8B44241C 		movl	28(%rsp), %eax
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 3467              		.loc 1 385 29 view .LVU1095
 3468 0289 4C897B18 		movq	%r15, 24(%rbx)
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 3469              		.loc 1 386 3 is_stmt 1 view .LVU1096
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 3470              		.loc 1 386 27 is_stmt 0 view .LVU1097
 3471 028d 894320   		movl	%eax, 32(%rbx)
 3472              	.LVL344:
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 3473              		.loc 1 386 27 view .LVU1098
 3474              	.LBE223:
 3475              	.LBE222:
 3476              	.LBE221:
 3477              	.LBE220:
 3478              	.LBE219:
 3479              	.LBE232:
 3480              	.LBE234:
 602:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_bits_e(entropy, (unsigned int) temp2, nbits);
 3481              		.loc 1 602 5 is_stmt 1 view .LVU1099
 602:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_bits_e(entropy, (unsigned int) temp2, nbits);
 3482              		.loc 1 602 8 is_stmt 0 view .LVU1100
 3483 0290 85ED     		testl	%ebp, %ebp
 3484 0292 0F846AFE 		je	.L297
 3484      FFFF
 3485              	.L326:
 603:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3486              		.loc 1 603 7 is_stmt 1 view .LVU1101
 3487              	.LVL345:
 3488              	.LBB235:
 3489              	.LBI235:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 3490              		.loc 1 349 1 view .LVU1102
 3491              	.LBB236:
 353:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 3492              		.loc 1 353 3 view .LVU1103
 354:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3493              		.loc 1 354 3 view .LVU1104
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 3494              		.loc 1 357 3 view .LVU1105
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 3495              		.loc 1 360 3 view .LVU1106
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 3496              		.loc 1 360 6 is_stmt 0 view .LVU1107
 3497 0298 8B83C000 		movl	192(%rbx), %eax
 3497      0000
 3498 029e 85C0     		testl	%eax, %eax
 3499 02a0 0F855CFE 		jne	.L297
 3499      FFFF
 3500              	.LVL346:
 3501              	.LBB237:
 3502              	.LBI237:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 3503              		.loc 1 349 1 is_stmt 1 view .LVU1108
 3504              	.LBB238:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3505              		.loc 1 364 3 view .LVU1109
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3506              		.loc 1 364 47 is_stmt 0 view .LVU1110
 3507 02a6 89E9     		movl	%ebp, %ecx
 3508 02a8 B8010000 		movl	$1, %eax
 3508      00
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3509              		.loc 1 367 12 view .LVU1111
 3510 02ad 036B20   		addl	32(%rbx), %ebp
 3511              	.LVL347:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3512              		.loc 1 364 47 view .LVU1112
 3513 02b0 48D3E0   		salq	%cl, %rax
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3514              		.loc 1 369 21 view .LVU1113
 3515 02b3 B9180000 		movl	$24, %ecx
 3515      00
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3516              		.loc 1 367 12 view .LVU1114
 3517 02b8 896C240C 		movl	%ebp, 12(%rsp)
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3518              		.loc 1 364 56 view .LVU1115
 3519 02bc 4883E801 		subq	$1, %rax
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3520              		.loc 1 369 21 view .LVU1116
 3521 02c0 29E9     		subl	%ebp, %ecx
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3522              		.loc 1 364 14 view .LVU1117
 3523 02c2 4121C6   		andl	%eax, %r14d
 3524              	.LVL348:
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3525              		.loc 1 367 3 is_stmt 1 view .LVU1118
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3526              		.loc 1 369 3 view .LVU1119
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3527              		.loc 1 369 14 is_stmt 0 view .LVU1120
 3528 02c5 49D3E6   		salq	%cl, %r14
 3529              	.LVL349:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3530              		.loc 1 372 3 is_stmt 1 view .LVU1121
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3531              		.loc 1 372 14 is_stmt 0 view .LVU1122
 3532 02c8 4C0B7318 		orq	24(%rbx), %r14
 3533              	.LVL350:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3534              		.loc 1 374 3 is_stmt 1 view .LVU1123
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3535              		.loc 1 374 9 view .LVU1124
 3536 02cc 83FD07   		cmpl	$7, %ebp
 3537 02cf 7F1B     		jg	.L308
 3538 02d1 E9870000 		jmp	.L303
 3538      00
 3539              	.LVL351:
 3540 02d6 662E0F1F 		.p2align 4,,10
 3540      84000000 
 3540      0000
 3541              		.p2align 3
 3542              	.L306:
 3543              	.LBB239:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3544              		.loc 1 379 30 view .LVU1125
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 3545              		.loc 1 381 5 view .LVU1126
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3546              		.loc 1 382 14 is_stmt 0 view .LVU1127
 3547 02e0 83ED08   		subl	$8, %ebp
 3548              	.LVL352:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 3549              		.loc 1 381 16 view .LVU1128
 3550 02e3 49C1E608 		salq	$8, %r14
 3551              	.LVL353:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3552              		.loc 1 382 5 is_stmt 1 view .LVU1129
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3553              		.loc 1 382 5 is_stmt 0 view .LVU1130
 3554              	.LBE239:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3555              		.loc 1 374 9 is_stmt 1 view .LVU1131
 3556 02e7 83FD07   		cmpl	$7, %ebp
 3557 02ea 7E6C     		jle	.L330
 3558              	.LVL354:
 3559              	.L308:
 3560              	.LBB240:
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3561              		.loc 1 375 5 view .LVU1132
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3562              		.loc 1 377 5 is_stmt 0 view .LVU1133
 3563 02ec 488B83C8 		movq	200(%rbx), %rax
 3563      000000
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3564              		.loc 1 375 32 view .LVU1134
 3565 02f3 4C89F1   		movq	%r14, %rcx
 3566 02f6 48C1F910 		sarq	$16, %rcx
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3567              		.loc 1 377 5 view .LVU1135
 3568 02fa 488D7801 		leaq	1(%rax), %rdi
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3569              		.loc 1 375 9 view .LVU1136
 3570 02fe 440FB6F9 		movzbl	%cl, %r15d
 3571              	.LVL355:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3572              		.loc 1 377 5 is_stmt 1 view .LVU1137
 3573 0302 4889BBC8 		movq	%rdi, 200(%rbx)
 3573      000000
 3574 0309 8808     		movb	%cl, (%rax)
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3575              		.loc 1 377 5 view .LVU1138
 3576 030b 4883ABD0 		subq	$1, 208(%rbx)
 3576      00000001 
 3577 0313 0F847F00 		je	.L331
 3577      0000
 3578              	.L304:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3579              		.loc 1 377 28 view .LVU1139
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 3580              		.loc 1 378 5 view .LVU1140
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 3581              		.loc 1 378 8 is_stmt 0 view .LVU1141
 3582 0319 4181FFFF 		cmpl	$255, %r15d
 3582      000000
 3583 0320 75BE     		jne	.L306
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3584              		.loc 1 379 7 is_stmt 1 view .LVU1142
 3585 0322 488B83C8 		movq	200(%rbx), %rax
 3585      000000
 3586 0329 488D4801 		leaq	1(%rax), %rcx
 3587 032d 48898BC8 		movq	%rcx, 200(%rbx)
 3587      000000
 3588 0334 C60000   		movb	$0, (%rax)
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3589              		.loc 1 379 7 view .LVU1143
 3590 0337 4883ABD0 		subq	$1, 208(%rbx)
 3590      00000001 
 3591 033f 759F     		jne	.L306
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3592              		.loc 1 379 7 view .LVU1144
 3593 0341 4889DF   		movq	%rbx, %rdi
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3594              		.loc 1 382 14 is_stmt 0 view .LVU1145
 3595 0344 83ED08   		subl	$8, %ebp
 3596              	.LVL356:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 3597              		.loc 1 381 16 view .LVU1146
 3598 0347 49C1E608 		salq	$8, %r14
 3599              	.LVL357:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3600              		.loc 1 379 7 view .LVU1147
 3601 034b E8000000 		call	dump_buffer_e
 3601      00
 3602              	.LVL358:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3603              		.loc 1 379 30 is_stmt 1 view .LVU1148
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 3604              		.loc 1 381 5 view .LVU1149
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3605              		.loc 1 382 5 view .LVU1150
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3606              		.loc 1 382 5 is_stmt 0 view .LVU1151
 3607              	.LBE240:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3608              		.loc 1 374 9 is_stmt 1 view .LVU1152
 3609 0350 83FD07   		cmpl	$7, %ebp
 3610 0353 7F97     		jg	.L308
 3611              		.p2align 4,,10
 3612 0355 0F1F00   		.p2align 3
 3613              	.L330:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3614              		.loc 1 374 9 is_stmt 0 view .LVU1153
 3615 0358 8364240C 		andl	$7, 12(%rsp)
 3615      07
 3616              	.LVL359:
 3617              	.L303:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 3618              		.loc 1 385 3 is_stmt 1 view .LVU1154
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 3619              		.loc 1 386 27 is_stmt 0 view .LVU1155
 3620 035d 8B44240C 		movl	12(%rsp), %eax
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 3621              		.loc 1 385 29 view .LVU1156
 3622 0361 4C897318 		movq	%r14, 24(%rbx)
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 3623              		.loc 1 386 3 is_stmt 1 view .LVU1157
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 3624              		.loc 1 386 27 is_stmt 0 view .LVU1158
 3625 0365 894320   		movl	%eax, 32(%rbx)
 3626 0368 E995FDFF 		jmp	.L297
 3626      FF
 3627              	.LVL360:
 3628 036d 0F1F00   		.p2align 4,,10
 3629              		.p2align 3
 3630              	.L329:
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 3631              		.loc 1 386 27 view .LVU1159
 3632              	.LBE238:
 3633              	.LBE237:
 3634              	.LBE236:
 3635              	.LBE235:
 3636              	.LBB245:
 3637              	.LBB233:
 3638              	.LBB231:
 3639              	.LBB230:
 3640              	.LBB229:
 3641              	.LBB228:
 3642              	.LBB227:
 3643              	.LBB226:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3644              		.loc 1 377 5 view .LVU1160
 3645 0370 4889DF   		movq	%rbx, %rdi
 3646 0373 44894424 		movl	%r8d, 24(%rsp)
 3646      18
 3647 0378 44894C24 		movl	%r9d, 12(%rsp)
 3647      0C
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3648              		.loc 1 377 5 is_stmt 1 view .LVU1161
 3649 037d E8000000 		call	dump_buffer_e
 3649      00
 3650              	.LVL361:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3651              		.loc 1 377 5 is_stmt 0 view .LVU1162
 3652 0382 448B4424 		movl	24(%rsp), %r8d
 3652      18
 3653 0387 448B4C24 		movl	12(%rsp), %r9d
 3653      0C
 3654 038c E9A3FEFF 		jmp	.L298
 3654      FF
 3655              	.LVL362:
 3656              		.p2align 4,,10
 3657 0391 0F1F8000 		.p2align 3
 3657      000000
 3658              	.L331:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3659              		.loc 1 377 5 view .LVU1163
 3660              	.LBE226:
 3661              	.LBE227:
 3662              	.LBE228:
 3663              	.LBE229:
 3664              	.LBE230:
 3665              	.LBE231:
 3666              	.LBE233:
 3667              	.LBE245:
 3668              	.LBB246:
 3669              	.LBB244:
 3670              	.LBB243:
 3671              	.LBB242:
 3672              	.LBB241:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3673              		.loc 1 377 5 is_stmt 1 view .LVU1164
 3674 0398 4889DF   		movq	%rbx, %rdi
 3675 039b E8000000 		call	dump_buffer_e
 3675      00
 3676              	.LVL363:
 3677 03a0 E974FFFF 		jmp	.L304
 3677      FF
 3678              	.LVL364:
 3679              	.L327:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3680              		.loc 1 377 5 is_stmt 0 view .LVU1165
 3681              	.LBE241:
 3682              	.LBE242:
 3683              	.LBE243:
 3684              	.LBE244:
 3685              	.LBE246:
 612:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num++;
 3686              		.loc 1 612 7 is_stmt 1 view .LVU1166
 613:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num &= 7;
 3687              		.loc 1 613 7 view .LVU1167
 614:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3688              		.loc 1 614 7 view .LVU1168
 613:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num &= 7;
 3689              		.loc 1 613 32 is_stmt 0 view .LVU1169
 3690 03a5 8B433C   		movl	60(%rbx), %eax
 3691 03a8 83C001   		addl	$1, %eax
 614:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3692              		.loc 1 614 33 view .LVU1170
 3693 03ab 83E007   		andl	$7, %eax
 3694 03ae 89433C   		movl	%eax, 60(%rbx)
 3695 03b1 89D0     		movl	%edx, %eax
 3696 03b3 E98EFDFF 		jmp	.L310
 3696      FF
 3697              	.LVL365:
 3698              	.L325:
 560:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3699              		.loc 1 560 7 is_stmt 1 view .LVU1171
 3700 03b8 8B733C   		movl	60(%rbx), %esi
 3701              	.LVL366:
 560:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3702              		.loc 1 560 7 is_stmt 0 view .LVU1172
 3703 03bb 4889DF   		movq	%rbx, %rdi
 3704 03be E8000000 		call	emit_restart_e
 3704      00
 3705              	.LVL367:
 3706 03c3 E98DFCFF 		jmp	.L284
 3706      FF
 3707              		.cfi_endproc
 3708              	.LFE64:
 3710              		.section	.text.encode_mcu_DC_refine,"ax",@progbits
 3711              		.p2align 4
 3713              	encode_mcu_DC_refine:
 3714              	.LVL368:
 3715              	.LFB66:
 741:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 3716              		.loc 1 741 1 is_stmt 1 view -0
 3717              		.cfi_startproc
 741:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 3718              		.loc 1 741 1 is_stmt 0 view .LVU1174
 3719 0000 F30F1EFA 		endbr64
 742:fltk-1.3.4-1/jpeg/jchuff.c ****   int Al, blkn;
 3720              		.loc 1 742 3 is_stmt 1 view .LVU1175
 741:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 3721              		.loc 1 741 1 is_stmt 0 view .LVU1176
 3722 0004 4157     		pushq	%r15
 3723              		.cfi_def_cfa_offset 16
 3724              		.cfi_offset 15, -16
 3725 0006 4156     		pushq	%r14
 3726              		.cfi_def_cfa_offset 24
 3727              		.cfi_offset 14, -24
 3728 0008 4155     		pushq	%r13
 3729              		.cfi_def_cfa_offset 32
 3730              		.cfi_offset 13, -32
 3731 000a 4154     		pushq	%r12
 3732              		.cfi_def_cfa_offset 40
 3733              		.cfi_offset 12, -40
 3734 000c 55       		pushq	%rbp
 3735              		.cfi_def_cfa_offset 48
 3736              		.cfi_offset 6, -48
 3737 000d 4889FD   		movq	%rdi, %rbp
 3738 0010 53       		pushq	%rbx
 3739              		.cfi_def_cfa_offset 56
 3740              		.cfi_offset 3, -56
 3741 0011 4883EC18 		subq	$24, %rsp
 3742              		.cfi_def_cfa_offset 80
 745:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 3743              		.loc 1 745 42 view .LVU1177
 3744 0015 488B5728 		movq	40(%rdi), %rdx
 742:fltk-1.3.4-1/jpeg/jchuff.c ****   int Al, blkn;
 3745              		.loc 1 742 20 view .LVU1178
 3746 0019 4C8BB730 		movq	560(%rdi), %r14
 3746      020000
 3747              	.LVL369:
 743:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3748              		.loc 1 743 3 is_stmt 1 view .LVU1179
 745:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 3749              		.loc 1 745 3 view .LVU1180
 741:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 3750              		.loc 1 741 1 is_stmt 0 view .LVU1181
 3751 0020 48897424 		movq	%rsi, 8(%rsp)
 3751      08
 745:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 3752              		.loc 1 745 42 view .LVU1182
 3753 0025 488B3A   		movq	(%rdx), %rdi
 3754              	.LVL370:
 745:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 3755              		.loc 1 745 29 view .LVU1183
 3756 0028 4989BEC8 		movq	%rdi, 200(%r14)
 3756      000000
 746:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3757              		.loc 1 746 3 is_stmt 1 view .LVU1184
 746:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3758              		.loc 1 746 40 is_stmt 0 view .LVU1185
 3759 002f 488B5528 		movq	40(%rbp), %rdx
 3760 0033 488B5208 		movq	8(%rdx), %rdx
 746:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3761              		.loc 1 746 27 view .LVU1186
 3762 0037 498996D0 		movq	%rdx, 208(%r14)
 3762      000000
 749:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 3763              		.loc 1 749 3 is_stmt 1 view .LVU1187
 749:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 3764              		.loc 1 749 6 is_stmt 0 view .LVU1188
 3765 003e 8BB53C01 		movl	316(%rbp), %esi
 3765      0000
 3766              	.LVL371:
 749:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 3767              		.loc 1 749 6 view .LVU1189
 3768 0044 85F6     		testl	%esi, %esi
 3769 0046 740C     		je	.L333
 750:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_restart_e(entropy, entropy->next_restart_num);
 3770              		.loc 1 750 5 is_stmt 1 view .LVU1190
 750:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_restart_e(entropy, entropy->next_restart_num);
 3771              		.loc 1 750 8 is_stmt 0 view .LVU1191
 3772 0048 418B4E38 		movl	56(%r14), %ecx
 3773 004c 85C9     		testl	%ecx, %ecx
 3774 004e 0F847C01 		je	.L351
 3774      0000
 3775              	.L333:
 753:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3776              		.loc 1 753 3 is_stmt 1 view .LVU1192
 753:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3777              		.loc 1 753 6 is_stmt 0 view .LVU1193
 3778 0054 8B85D801 		movl	472(%rbp), %eax
 3778      0000
 756:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We simply emit the Al'th bit of the DC coefficient value. */
 3779              		.loc 1 756 3 view .LVU1194
 3780 005a 8B95A001 		movl	416(%rbp), %edx
 3780      0000
 753:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3781              		.loc 1 753 6 view .LVU1195
 3782 0060 89442404 		movl	%eax, 4(%rsp)
 3783              	.LVL372:
 756:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We simply emit the Al'th bit of the DC coefficient value. */
 3784              		.loc 1 756 3 is_stmt 1 view .LVU1196
 756:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We simply emit the Al'th bit of the DC coefficient value. */
 3785              		.loc 1 756 18 view .LVU1197
 756:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We simply emit the Al'th bit of the DC coefficient value. */
 3786              		.loc 1 756 3 is_stmt 0 view .LVU1198
 3787 0064 85D2     		testl	%edx, %edx
 3788 0066 0F8EF100 		jle	.L334
 3788      0000
 3789 006c 4531FF   		xorl	%r15d, %r15d
 3790              	.LVL373:
 3791 006f 90       		.p2align 4,,10
 3792              		.p2align 3
 3793              	.L341:
 758:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3794              		.loc 1 758 5 is_stmt 1 discriminator 3 view .LVU1199
 3795              	.LBB252:
 3796              	.LBI252:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 3797              		.loc 1 349 1 discriminator 3 view .LVU1200
 3798              	.LBB253:
 353:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 3799              		.loc 1 353 3 discriminator 3 view .LVU1201
 354:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3800              		.loc 1 354 3 discriminator 3 view .LVU1202
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 3801              		.loc 1 357 3 discriminator 3 view .LVU1203
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 3802              		.loc 1 360 3 discriminator 3 view .LVU1204
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 3803              		.loc 1 360 6 is_stmt 0 discriminator 3 view .LVU1205
 3804 0070 418B86C0 		movl	192(%r14), %eax
 3804      000000
 3805 0077 85C0     		testl	%eax, %eax
 3806 0079 0F85CD00 		jne	.L335
 3806      0000
 3807              	.LVL374:
 3808              	.LBB254:
 3809              	.LBI254:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 3810              		.loc 1 349 1 is_stmt 1 view .LVU1206
 3811              	.LBB255:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3812              		.loc 1 364 3 view .LVU1207
 3813              	.LBE255:
 3814              	.LBE254:
 3815              	.LBE253:
 3816              	.LBE252:
 758:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3817              		.loc 1 758 59 is_stmt 0 view .LVU1208
 3818 007f 488B4424 		movq	8(%rsp), %rax
 3818      08
 758:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3819              		.loc 1 758 63 view .LVU1209
 3820 0084 0FB64C24 		movzbl	4(%rsp), %ecx
 3820      04
 3821              	.LBB274:
 3822              	.LBB269:
 3823              	.LBB264:
 3824              	.LBB259:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3825              		.loc 1 372 14 view .LVU1210
 3826 0089 498B5E18 		movq	24(%r14), %rbx
 3827              	.LBE259:
 3828              	.LBE264:
 3829              	.LBE269:
 3830              	.LBE274:
 758:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3831              		.loc 1 758 59 view .LVU1211
 3832 008d 4A8B14F8 		movq	(%rax,%r15,8), %rdx
 3833              	.LBB275:
 3834              	.LBB270:
 3835              	.LBB265:
 3836              	.LBB260:
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3837              		.loc 1 367 35 view .LVU1212
 3838 0091 418B4620 		movl	32(%r14), %eax
 3839              	.LBE260:
 3840              	.LBE265:
 3841              	.LBE270:
 3842              	.LBE275:
 758:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3843              		.loc 1 758 59 view .LVU1213
 3844 0095 0FBF12   		movswl	(%rdx), %edx
 3845              	.LBB276:
 3846              	.LBB271:
 3847              	.LBB266:
 3848              	.LBB261:
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3849              		.loc 1 367 12 view .LVU1214
 3850 0098 448D6801 		leal	1(%rax), %r13d
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3851              		.loc 1 367 35 view .LVU1215
 3852 009c 890424   		movl	%eax, (%rsp)
 3853              	.LVL375:
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3854              		.loc 1 367 35 view .LVU1216
 3855              	.LBE261:
 3856              	.LBE266:
 3857              	.LBE271:
 3858              	.LBE276:
 758:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3859              		.loc 1 758 63 view .LVU1217
 3860 009f D3FA     		sarl	%cl, %edx
 3861              	.LBB277:
 3862              	.LBB272:
 3863              	.LBB267:
 3864              	.LBB262:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3865              		.loc 1 369 21 view .LVU1218
 3866 00a1 B9180000 		movl	$24, %ecx
 3866      00
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3867              		.loc 1 364 14 view .LVU1219
 3868 00a6 83E201   		andl	$1, %edx
 3869              	.LVL376:
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3870              		.loc 1 367 3 is_stmt 1 view .LVU1220
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3871              		.loc 1 369 3 view .LVU1221
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3872              		.loc 1 369 21 is_stmt 0 view .LVU1222
 3873 00a9 4429E9   		subl	%r13d, %ecx
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3874              		.loc 1 369 14 view .LVU1223
 3875 00ac 48D3E2   		salq	%cl, %rdx
 3876              	.LVL377:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3877              		.loc 1 372 3 is_stmt 1 view .LVU1224
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3878              		.loc 1 372 14 is_stmt 0 view .LVU1225
 3879 00af 4809D3   		orq	%rdx, %rbx
 3880              	.LVL378:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3881              		.loc 1 374 3 is_stmt 1 view .LVU1226
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3882              		.loc 1 374 9 view .LVU1227
 3883 00b2 4183FD07 		cmpl	$7, %r13d
 3884 00b6 7F16     		jg	.L340
 3885 00b8 E9870000 		jmp	.L336
 3885      00
 3886              	.LVL379:
 3887 00bd 0F1F00   		.p2align 4,,10
 3888              		.p2align 3
 3889              	.L338:
 3890              	.LBB256:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3891              		.loc 1 379 30 view .LVU1228
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 3892              		.loc 1 381 5 view .LVU1229
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3893              		.loc 1 382 14 is_stmt 0 view .LVU1230
 3894 00c0 4183ED08 		subl	$8, %r13d
 3895              	.LVL380:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 3896              		.loc 1 381 16 view .LVU1231
 3897 00c4 48C1E308 		salq	$8, %rbx
 3898              	.LVL381:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3899              		.loc 1 382 5 is_stmt 1 view .LVU1232
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3900              		.loc 1 382 5 is_stmt 0 view .LVU1233
 3901              	.LBE256:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3902              		.loc 1 374 9 is_stmt 1 view .LVU1234
 3903 00c8 4183FD07 		cmpl	$7, %r13d
 3904 00cc 7E67     		jle	.L352
 3905              	.LVL382:
 3906              	.L340:
 3907              	.LBB257:
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3908              		.loc 1 375 5 view .LVU1235
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3909              		.loc 1 375 32 is_stmt 0 view .LVU1236
 3910 00ce 4889D9   		movq	%rbx, %rcx
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3911              		.loc 1 377 5 view .LVU1237
 3912 00d1 4C8D4F01 		leaq	1(%rdi), %r9
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3913              		.loc 1 375 32 view .LVU1238
 3914 00d5 48C1F910 		sarq	$16, %rcx
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3915              		.loc 1 377 5 view .LVU1239
 3916 00d9 4D898EC8 		movq	%r9, 200(%r14)
 3916      000000
 3917 00e0 880F     		movb	%cl, (%rdi)
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3918              		.loc 1 375 9 view .LVU1240
 3919 00e2 440FB6E1 		movzbl	%cl, %r12d
 3920              	.LVL383:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3921              		.loc 1 377 5 is_stmt 1 view .LVU1241
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3922              		.loc 1 377 5 view .LVU1242
 3923 00e6 4983AED0 		subq	$1, 208(%r14)
 3923      00000001 
 3924 00ee 0F84BC00 		je	.L353
 3924      0000
 3925              	.L337:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3926              		.loc 1 377 28 view .LVU1243
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 3927              		.loc 1 378 5 view .LVU1244
 3928 00f4 498BBEC8 		movq	200(%r14), %rdi
 3928      000000
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 3929              		.loc 1 378 8 is_stmt 0 view .LVU1245
 3930 00fb 4181FCFF 		cmpl	$255, %r12d
 3930      000000
 3931 0102 75BC     		jne	.L338
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3932              		.loc 1 379 7 is_stmt 1 view .LVU1246
 3933 0104 488D4F01 		leaq	1(%rdi), %rcx
 3934 0108 49898EC8 		movq	%rcx, 200(%r14)
 3934      000000
 3935 010f C60700   		movb	$0, (%rdi)
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3936              		.loc 1 379 7 view .LVU1247
 3937 0112 4983AED0 		subq	$1, 208(%r14)
 3937      00000001 
 3938 011a 0F84A000 		je	.L339
 3938      0000
 3939              	.L350:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3940              		.loc 1 382 14 is_stmt 0 view .LVU1248
 3941 0120 4183ED08 		subl	$8, %r13d
 3942              	.LVL384:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3943              		.loc 1 382 14 view .LVU1249
 3944 0124 498BBEC8 		movq	200(%r14), %rdi
 3944      000000
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3945              		.loc 1 379 30 is_stmt 1 view .LVU1250
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 3946              		.loc 1 381 5 view .LVU1251
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 3947              		.loc 1 381 16 is_stmt 0 view .LVU1252
 3948 012b 48C1E308 		salq	$8, %rbx
 3949              	.LVL385:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3950              		.loc 1 382 5 is_stmt 1 view .LVU1253
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3951              		.loc 1 382 5 is_stmt 0 view .LVU1254
 3952              	.LBE257:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3953              		.loc 1 374 9 is_stmt 1 view .LVU1255
 3954 012f 4183FD07 		cmpl	$7, %r13d
 3955 0133 7F99     		jg	.L340
 3956              	.L352:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3957              		.loc 1 374 9 is_stmt 0 view .LVU1256
 3958 0135 448B0424 		movl	(%rsp), %r8d
 3959 0139 4183E807 		subl	$7, %r8d
 3960 013d 4183E007 		andl	$7, %r8d
 3961 0141 4589C5   		movl	%r8d, %r13d
 3962              	.LVL386:
 3963              	.L336:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 3964              		.loc 1 385 3 is_stmt 1 view .LVU1257
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 3965              		.loc 1 385 29 is_stmt 0 view .LVU1258
 3966 0144 49895E18 		movq	%rbx, 24(%r14)
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 3967              		.loc 1 386 3 is_stmt 1 view .LVU1259
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 3968              		.loc 1 386 27 is_stmt 0 view .LVU1260
 3969 0148 45896E20 		movl	%r13d, 32(%r14)
 3970              	.LVL387:
 3971              	.L335:
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 3972              		.loc 1 386 27 view .LVU1261
 3973              	.LBE262:
 3974              	.LBE267:
 3975              	.LBE272:
 3976              	.LBE277:
 756:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We simply emit the Al'th bit of the DC coefficient value. */
 3977              		.loc 1 756 47 is_stmt 1 view .LVU1262
 756:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We simply emit the Al'th bit of the DC coefficient value. */
 3978              		.loc 1 756 18 view .LVU1263
 3979 014c 4983C701 		addq	$1, %r15
 3980              	.LVL388:
 756:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We simply emit the Al'th bit of the DC coefficient value. */
 3981              		.loc 1 756 3 is_stmt 0 view .LVU1264
 3982 0150 4439BDA0 		cmpl	%r15d, 416(%rbp)
 3982      010000
 3983 0157 0F8F13FF 		jg	.L341
 3983      FFFF
 3984              	.L334:
 761:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 3985              		.loc 1 761 3 is_stmt 1 view .LVU1265
 761:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 3986              		.loc 1 761 8 is_stmt 0 view .LVU1266
 3987 015d 488B5528 		movq	40(%rbp), %rdx
 761:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 3988              		.loc 1 761 33 view .LVU1267
 3989 0161 48893A   		movq	%rdi, (%rdx)
 762:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3990              		.loc 1 762 3 is_stmt 1 view .LVU1268
 762:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3991              		.loc 1 762 40 is_stmt 0 view .LVU1269
 3992 0164 498B8ED0 		movq	208(%r14), %rcx
 3992      000000
 762:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3993              		.loc 1 762 8 view .LVU1270
 3994 016b 488B5528 		movq	40(%rbp), %rdx
 762:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3995              		.loc 1 762 31 view .LVU1271
 3996 016f 48894A08 		movq	%rcx, 8(%rdx)
 765:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 3997              		.loc 1 765 3 is_stmt 1 view .LVU1272
 765:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 3998              		.loc 1 765 12 is_stmt 0 view .LVU1273
 3999 0173 8B8D3C01 		movl	316(%rbp), %ecx
 3999      0000
 765:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 4000              		.loc 1 765 6 view .LVU1274
 4001 0179 85C9     		testl	%ecx, %ecx
 4002 017b 741F     		je	.L342
 766:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 4003              		.loc 1 766 5 is_stmt 1 view .LVU1275
 766:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 4004              		.loc 1 766 16 is_stmt 0 view .LVU1276
 4005 017d 418B5638 		movl	56(%r14), %edx
 766:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 4006              		.loc 1 766 8 view .LVU1277
 4007 0181 85D2     		testl	%edx, %edx
 4008 0183 7510     		jne	.L343
 767:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num++;
 4009              		.loc 1 767 7 is_stmt 1 view .LVU1278
 768:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num &= 7;
 4010              		.loc 1 768 7 view .LVU1279
 769:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4011              		.loc 1 769 7 view .LVU1280
 768:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num &= 7;
 4012              		.loc 1 768 32 is_stmt 0 view .LVU1281
 4013 0185 418B463C 		movl	60(%r14), %eax
 4014 0189 8D5001   		leal	1(%rax), %edx
 769:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4015              		.loc 1 769 33 view .LVU1282
 4016 018c 83E207   		andl	$7, %edx
 4017 018f 4189563C 		movl	%edx, 60(%r14)
 4018 0193 89CA     		movl	%ecx, %edx
 4019              	.L343:
 771:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4020              		.loc 1 771 5 is_stmt 1 view .LVU1283
 771:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4021              		.loc 1 771 28 is_stmt 0 view .LVU1284
 4022 0195 83EA01   		subl	$1, %edx
 4023 0198 41895638 		movl	%edx, 56(%r14)
 4024              	.L342:
 774:fltk-1.3.4-1/jpeg/jchuff.c **** }
 4025              		.loc 1 774 3 is_stmt 1 view .LVU1285
 775:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4026              		.loc 1 775 1 is_stmt 0 view .LVU1286
 4027 019c 4883C418 		addq	$24, %rsp
 4028              		.cfi_remember_state
 4029              		.cfi_def_cfa_offset 56
 4030 01a0 B8010000 		movl	$1, %eax
 4030      00
 4031 01a5 5B       		popq	%rbx
 4032              		.cfi_def_cfa_offset 48
 4033 01a6 5D       		popq	%rbp
 4034              		.cfi_def_cfa_offset 40
 4035              	.LVL389:
 775:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4036              		.loc 1 775 1 view .LVU1287
 4037 01a7 415C     		popq	%r12
 4038              		.cfi_def_cfa_offset 32
 4039 01a9 415D     		popq	%r13
 4040              		.cfi_def_cfa_offset 24
 4041 01ab 415E     		popq	%r14
 4042              		.cfi_def_cfa_offset 16
 4043              	.LVL390:
 775:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4044              		.loc 1 775 1 view .LVU1288
 4045 01ad 415F     		popq	%r15
 4046              		.cfi_def_cfa_offset 8
 4047 01af C3       		ret
 4048              	.LVL391:
 4049              		.p2align 4,,10
 4050              		.p2align 3
 4051              	.L353:
 4052              		.cfi_restore_state
 4053              	.LBB278:
 4054              	.LBB273:
 4055              	.LBB268:
 4056              	.LBB263:
 4057              	.LBB258:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 4058              		.loc 1 377 5 is_stmt 1 view .LVU1289
 4059 01b0 4C89F7   		movq	%r14, %rdi
 4060 01b3 E8000000 		call	dump_buffer_e
 4060      00
 4061              	.LVL392:
 4062 01b8 E937FFFF 		jmp	.L337
 4062      FF
 4063 01bd 0F1F00   		.p2align 4,,10
 4064              		.p2align 3
 4065              	.L339:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4066              		.loc 1 379 7 view .LVU1290
 4067 01c0 4C89F7   		movq	%r14, %rdi
 4068 01c3 E8000000 		call	dump_buffer_e
 4068      00
 4069              	.LVL393:
 4070 01c8 E953FFFF 		jmp	.L350
 4070      FF
 4071              	.LVL394:
 4072 01cd 0F1F00   		.p2align 4,,10
 4073              		.p2align 3
 4074              	.L351:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4075              		.loc 1 379 7 is_stmt 0 view .LVU1291
 4076              	.LBE258:
 4077              	.LBE263:
 4078              	.LBE268:
 4079              	.LBE273:
 4080              	.LBE278:
 751:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4081              		.loc 1 751 7 is_stmt 1 view .LVU1292
 4082 01d0 418B763C 		movl	60(%r14), %esi
 4083 01d4 4C89F7   		movq	%r14, %rdi
 4084 01d7 E8000000 		call	emit_restart_e
 4084      00
 4085              	.LVL395:
 4086 01dc 498BBEC8 		movq	200(%r14), %rdi
 4086      000000
 4087 01e3 E96CFEFF 		jmp	.L333
 4087      FF
 4088              		.cfi_endproc
 4089              	.LFE66:
 4091              		.section	.text.encode_mcu_AC_first,"ax",@progbits
 4092              		.p2align 4
 4094              	encode_mcu_AC_first:
 4095              	.LVL396:
 4096              	.LFB65:
 630:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 4097              		.loc 1 630 1 view -0
 4098              		.cfi_startproc
 630:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 4099              		.loc 1 630 1 is_stmt 0 view .LVU1294
 4100 0000 F30F1EFA 		endbr64
 631:fltk-1.3.4-1/jpeg/jchuff.c ****   const int * natural_order;
 4101              		.loc 1 631 3 is_stmt 1 view .LVU1295
 630:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 4102              		.loc 1 630 1 is_stmt 0 view .LVU1296
 4103 0004 4157     		pushq	%r15
 4104              		.cfi_def_cfa_offset 16
 4105              		.cfi_offset 15, -16
 4106 0006 4156     		pushq	%r14
 4107              		.cfi_def_cfa_offset 24
 4108              		.cfi_offset 14, -24
 4109 0008 4155     		pushq	%r13
 4110              		.cfi_def_cfa_offset 32
 4111              		.cfi_offset 13, -32
 4112 000a 4154     		pushq	%r12
 4113              		.cfi_def_cfa_offset 40
 4114              		.cfi_offset 12, -40
 4115 000c 55       		pushq	%rbp
 4116              		.cfi_def_cfa_offset 48
 4117              		.cfi_offset 6, -48
 4118 000d 53       		pushq	%rbx
 4119              		.cfi_def_cfa_offset 56
 4120              		.cfi_offset 3, -56
 4121 000e 4889F3   		movq	%rsi, %rbx
 4122 0011 4883EC38 		subq	$56, %rsp
 4123              		.cfi_def_cfa_offset 112
 639:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 4124              		.loc 1 639 42 view .LVU1297
 4125 0015 488B5728 		movq	40(%rdi), %rdx
 631:fltk-1.3.4-1/jpeg/jchuff.c ****   const int * natural_order;
 4126              		.loc 1 631 20 view .LVU1298
 4127 0019 4C8BBF30 		movq	560(%rdi), %r15
 4127      020000
 4128              	.LVL397:
 632:fltk-1.3.4-1/jpeg/jchuff.c ****   JBLOCKROW block;
 4129              		.loc 1 632 3 is_stmt 1 view .LVU1299
 633:fltk-1.3.4-1/jpeg/jchuff.c ****   register int temp, temp2;
 4130              		.loc 1 633 3 view .LVU1300
 634:fltk-1.3.4-1/jpeg/jchuff.c ****   register int nbits;
 4131              		.loc 1 634 3 view .LVU1301
 635:fltk-1.3.4-1/jpeg/jchuff.c ****   register int r, k;
 4132              		.loc 1 635 3 view .LVU1302
 636:fltk-1.3.4-1/jpeg/jchuff.c ****   int Se, Al;
 4133              		.loc 1 636 3 view .LVU1303
 637:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4134              		.loc 1 637 3 view .LVU1304
 639:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 4135              		.loc 1 639 3 view .LVU1305
 630:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 4136              		.loc 1 630 1 is_stmt 0 view .LVU1306
 4137 0020 48897C24 		movq	%rdi, 32(%rsp)
 4137      20
 639:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 4138              		.loc 1 639 42 view .LVU1307
 4139 0025 488B12   		movq	(%rdx), %rdx
 639:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 4140              		.loc 1 639 29 view .LVU1308
 4141 0028 498997C8 		movq	%rdx, 200(%r15)
 4141      000000
 640:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4142              		.loc 1 640 3 is_stmt 1 view .LVU1309
 640:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4143              		.loc 1 640 40 is_stmt 0 view .LVU1310
 4144 002f 488B5728 		movq	40(%rdi), %rdx
 4145 0033 488B5208 		movq	8(%rdx), %rdx
 640:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4146              		.loc 1 640 27 view .LVU1311
 4147 0037 498997D0 		movq	%rdx, 208(%r15)
 4147      000000
 643:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 4148              		.loc 1 643 3 is_stmt 1 view .LVU1312
 643:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 4149              		.loc 1 643 6 is_stmt 0 view .LVU1313
 4150 003e 8BAF3C01 		movl	316(%rdi), %ebp
 4150      0000
 4151 0044 85ED     		testl	%ebp, %ebp
 4152 0046 740D     		je	.L355
 644:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_restart_e(entropy, entropy->next_restart_num);
 4153              		.loc 1 644 5 is_stmt 1 view .LVU1314
 644:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_restart_e(entropy, entropy->next_restart_num);
 4154              		.loc 1 644 8 is_stmt 0 view .LVU1315
 4155 0048 458B5F38 		movl	56(%r15), %r11d
 4156 004c 4585DB   		testl	%r11d, %r11d
 4157 004f 0F844D05 		je	.L422
 4157      0000
 4158              	.LVL398:
 4159              	.L355:
 647:fltk-1.3.4-1/jpeg/jchuff.c ****   Al = cinfo->Al;
 4160              		.loc 1 647 3 is_stmt 1 view .LVU1316
 647:fltk-1.3.4-1/jpeg/jchuff.c ****   Al = cinfo->Al;
 4161              		.loc 1 647 6 is_stmt 0 view .LVU1317
 4162 0055 488B4424 		movq	32(%rsp), %rax
 4162      20
 652:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4163              		.loc 1 652 9 view .LVU1318
 4164 005a 488B3B   		movq	(%rbx), %rdi
 648:fltk-1.3.4-1/jpeg/jchuff.c ****   natural_order = cinfo->natural_order;
 4165              		.loc 1 648 6 view .LVU1319
 4166 005d 8BB0D801 		movl	472(%rax), %esi
 4166      0000
 647:fltk-1.3.4-1/jpeg/jchuff.c ****   Al = cinfo->Al;
 4167              		.loc 1 647 6 view .LVU1320
 4168 0063 8B90D001 		movl	464(%rax), %edx
 4168      0000
 4169              	.LVL399:
 648:fltk-1.3.4-1/jpeg/jchuff.c ****   natural_order = cinfo->natural_order;
 4170              		.loc 1 648 3 is_stmt 1 view .LVU1321
 652:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4171              		.loc 1 652 9 is_stmt 0 view .LVU1322
 4172 0069 48897C24 		movq	%rdi, 8(%rsp)
 4172      08
 658:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = (*block)[natural_order[k]]) == 0) {
 4173              		.loc 1 658 10 view .LVU1323
 4174 006e 8B88CC01 		movl	460(%rax), %ecx
 4174      0000
 648:fltk-1.3.4-1/jpeg/jchuff.c ****   natural_order = cinfo->natural_order;
 4175              		.loc 1 648 6 view .LVU1324
 4176 0074 8974241C 		movl	%esi, 28(%rsp)
 4177              	.LVL400:
 649:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4178              		.loc 1 649 3 is_stmt 1 view .LVU1325
 649:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4179              		.loc 1 649 17 is_stmt 0 view .LVU1326
 4180 0078 488BB0E0 		movq	480(%rax), %rsi
 4180      010000
 4181              	.LVL401:
 652:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4182              		.loc 1 652 3 is_stmt 1 view .LVU1327
 656:fltk-1.3.4-1/jpeg/jchuff.c ****    
 4183              		.loc 1 656 3 view .LVU1328
 658:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = (*block)[natural_order[k]]) == 0) {
 4184              		.loc 1 658 3 view .LVU1329
 658:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = (*block)[natural_order[k]]) == 0) {
 4185              		.loc 1 658 23 view .LVU1330
 658:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = (*block)[natural_order[k]]) == 0) {
 4186              		.loc 1 658 3 is_stmt 0 view .LVU1331
 4187 007f 39CA     		cmpl	%ecx, %edx
 4188 0081 0F8C6E03 		jl	.L357
 4188      0000
 4189 0087 4863F9   		movslq	%ecx, %rdi
 4190              	.LVL402:
 658:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = (*block)[natural_order[k]]) == 0) {
 4191              		.loc 1 658 3 view .LVU1332
 4192 008a 29CA     		subl	%ecx, %edx
 4193              	.LVL403:
 656:fltk-1.3.4-1/jpeg/jchuff.c ****    
 4194              		.loc 1 656 5 view .LVU1333
 4195 008c C7042400 		movl	$0, (%rsp)
 4195      000000
 4196 0093 4801FA   		addq	%rdi, %rdx
 4197 0096 4C8D34BE 		leaq	(%rsi,%rdi,4), %r14
 4198 009a 488D4496 		leaq	4(%rsi,%rdx,4), %rax
 4198      04
 4199              	.LVL404:
 656:fltk-1.3.4-1/jpeg/jchuff.c ****    
 4200              		.loc 1 656 5 view .LVU1334
 4201 009f 48894424 		movq	%rax, 16(%rsp)
 4201      10
 4202 00a4 EB1D     		jmp	.L395
 4203              	.LVL405:
 4204 00a6 662E0F1F 		.p2align 4,,10
 4204      84000000 
 4204      0000
 4205              		.p2align 3
 4206              	.L419:
 679:fltk-1.3.4-1/jpeg/jchuff.c ****       continue;
 4207              		.loc 1 679 7 is_stmt 1 view .LVU1335
 680:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4208              		.loc 1 680 7 view .LVU1336
 658:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = (*block)[natural_order[k]]) == 0) {
 4209              		.loc 1 658 32 view .LVU1337
 658:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = (*block)[natural_order[k]]) == 0) {
 4210              		.loc 1 658 23 view .LVU1338
 679:fltk-1.3.4-1/jpeg/jchuff.c ****       continue;
 4211              		.loc 1 679 8 is_stmt 0 view .LVU1339
 4212 00b0 83042401 		addl	$1, (%rsp)
 4213              	.LVL406:
 679:fltk-1.3.4-1/jpeg/jchuff.c ****       continue;
 4214              		.loc 1 679 8 view .LVU1340
 4215 00b4 4983C604 		addq	$4, %r14
 658:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = (*block)[natural_order[k]]) == 0) {
 4216              		.loc 1 658 3 view .LVU1341
 4217 00b8 4C397424 		cmpq	%r14, 16(%rsp)
 4217      10
 4218 00bd 0F840E03 		je	.L423
 4218      0000
 4219              	.L395:
 4220              	.LVL407:
 659:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 4221              		.loc 1 659 5 is_stmt 1 view .LVU1342
 659:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 4222              		.loc 1 659 25 is_stmt 0 view .LVU1343
 4223 00c3 496316   		movslq	(%r14), %rdx
 659:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 4224              		.loc 1 659 15 view .LVU1344
 4225 00c6 488B4424 		movq	8(%rsp), %rax
 4225      08
 4226 00cb 0FBF1450 		movswl	(%rax,%rdx,2), %edx
 4227              	.LVL408:
 659:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 4228              		.loc 1 659 8 view .LVU1345
 4229 00cf 85D2     		testl	%edx, %edx
 4230 00d1 74DD     		je	.L419
 668:fltk-1.3.4-1/jpeg/jchuff.c ****       temp = -temp;		/* temp is abs value of input */
 4231              		.loc 1 668 5 is_stmt 1 view .LVU1346
 674:fltk-1.3.4-1/jpeg/jchuff.c ****       temp2 = temp;
 4232              		.loc 1 674 12 is_stmt 0 view .LVU1347
 4233 00d3 8B74241C 		movl	28(%rsp), %esi
 4234 00d7 89D0     		movl	%edx, %eax
 4235 00d9 89F1     		movl	%esi, %ecx
 4236 00db D3F8     		sarl	%cl, %eax
 4237 00dd 89442404 		movl	%eax, 4(%rsp)
 4238              	.LVL409:
 675:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4239              		.loc 1 675 7 is_stmt 1 view .LVU1348
 675:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4240              		.loc 1 675 13 is_stmt 0 view .LVU1349
 4241 00e1 89442418 		movl	%eax, 24(%rsp)
 668:fltk-1.3.4-1/jpeg/jchuff.c ****       temp = -temp;		/* temp is abs value of input */
 4242              		.loc 1 668 8 view .LVU1350
 4243 00e5 85D2     		testl	%edx, %edx
 4244 00e7 7910     		jns	.L361
 669:fltk-1.3.4-1/jpeg/jchuff.c ****       temp >>= Al;		/* apply the point transform */
 4245              		.loc 1 669 7 is_stmt 1 view .LVU1351
 669:fltk-1.3.4-1/jpeg/jchuff.c ****       temp >>= Al;		/* apply the point transform */
 4246              		.loc 1 669 12 is_stmt 0 view .LVU1352
 4247 00e9 89D3     		movl	%edx, %ebx
 4248 00eb F7DB     		negl	%ebx
 4249              	.LVL410:
 670:fltk-1.3.4-1/jpeg/jchuff.c ****       /* For a negative coef, want temp2 = bitwise complement of abs(coef) */
 4250              		.loc 1 670 7 is_stmt 1 view .LVU1353
 670:fltk-1.3.4-1/jpeg/jchuff.c ****       /* For a negative coef, want temp2 = bitwise complement of abs(coef) */
 4251              		.loc 1 670 12 is_stmt 0 view .LVU1354
 4252 00ed D3FB     		sarl	%cl, %ebx
 4253              	.LVL411:
 670:fltk-1.3.4-1/jpeg/jchuff.c ****       /* For a negative coef, want temp2 = bitwise complement of abs(coef) */
 4254              		.loc 1 670 12 view .LVU1355
 4255 00ef 895C2404 		movl	%ebx, 4(%rsp)
 4256              	.LVL412:
 672:fltk-1.3.4-1/jpeg/jchuff.c ****     } else {
 4257              		.loc 1 672 7 is_stmt 1 view .LVU1356
 672:fltk-1.3.4-1/jpeg/jchuff.c ****     } else {
 4258              		.loc 1 672 13 is_stmt 0 view .LVU1357
 4259 00f3 F7D3     		notl	%ebx
 4260              	.LVL413:
 672:fltk-1.3.4-1/jpeg/jchuff.c ****     } else {
 4261              		.loc 1 672 13 view .LVU1358
 4262 00f5 895C2418 		movl	%ebx, 24(%rsp)
 4263              	.LVL414:
 4264              	.L361:
 678:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 4265              		.loc 1 678 5 is_stmt 1 view .LVU1359
 678:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 4266              		.loc 1 678 8 is_stmt 0 view .LVU1360
 4267 00f9 448B5424 		movl	4(%rsp), %r10d
 4267      04
 4268 00fe 4585D2   		testl	%r10d, %r10d
 4269 0101 74AD     		je	.L419
 684:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_eobrun(entropy);
 4270              		.loc 1 684 5 is_stmt 1 view .LVU1361
 684:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_eobrun(entropy);
 4271              		.loc 1 684 8 is_stmt 0 view .LVU1362
 4272 0103 458B8FE4 		movl	228(%r15), %r9d
 4272      000000
 4273 010a 4585C9   		testl	%r9d, %r9d
 4274 010d 0F856503 		jne	.L424
 4274      0000
 4275              	.L363:
 687:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_ac_symbol(entropy, entropy->ac_tbl_no, 0xF0);
 4276              		.loc 1 687 11 is_stmt 1 view .LVU1363
 4277 0113 8B0424   		movl	(%rsp), %eax
 4278 0116 83F80F   		cmpl	$15, %eax
 4279 0119 0F8E5A01 		jle	.L364
 4279      0000
 4280 011f 4C897424 		movq	%r14, 40(%rsp)
 4280      28
 4281 0124 89C5     		movl	%eax, %ebp
 4282 0126 EB24     		jmp	.L375
 4283              	.LVL415:
 4284 0128 0F1F8400 		.p2align 4,,10
 4284      00000000 
 4285              		.p2align 3
 4286              	.L426:
 4287              	.LBB304:
 4288              	.LBB305:
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 4289              		.loc 1 432 5 view .LVU1364
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 4290              		.loc 1 432 27 is_stmt 0 view .LVU1365
 4291 0130 498B84C7 		movq	160(%r15,%rax,8), %rax
 4291      A0000000 
 4292              	.LVL416:
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 4293              		.loc 1 432 43 view .LVU1366
 4294 0138 48838080 		addq	$1, 1920(%rax)
 4294      07000001 
 4295              	.LVL417:
 4296              	.L366:
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 4297              		.loc 1 432 43 view .LVU1367
 4298              	.LBE305:
 4299              	.LBE304:
 689:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4300              		.loc 1 689 7 is_stmt 1 view .LVU1368
 689:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4301              		.loc 1 689 9 is_stmt 0 view .LVU1369
 4302 0140 83ED10   		subl	$16, %ebp
 4303              	.LVL418:
 687:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_ac_symbol(entropy, entropy->ac_tbl_no, 0xF0);
 4304              		.loc 1 687 11 is_stmt 1 view .LVU1370
 4305 0143 83FD0F   		cmpl	$15, %ebp
 4306 0146 0F8E2401 		jle	.L425
 4306      0000
 4307              	.L375:
 688:fltk-1.3.4-1/jpeg/jchuff.c ****       r -= 16;
 4308              		.loc 1 688 7 view .LVU1371
 4309              	.LBB331:
 4310              	.LBB327:
 431:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 4311              		.loc 1 431 6 is_stmt 0 view .LVU1372
 4312 014c 458B87C0 		movl	192(%r15), %r8d
 4312      000000
 4313              	.LBE327:
 4314              	.LBE331:
 688:fltk-1.3.4-1/jpeg/jchuff.c ****       r -= 16;
 4315              		.loc 1 688 7 view .LVU1373
 4316 0153 496387E0 		movslq	224(%r15), %rax
 4316      000000
 4317              	.LVL419:
 4318              	.LBB332:
 4319              	.LBI304:
 429:fltk-1.3.4-1/jpeg/jchuff.c **** {
 4320              		.loc 1 429 1 is_stmt 1 view .LVU1374
 4321              	.LBB328:
 431:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 4322              		.loc 1 431 3 view .LVU1375
 431:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 4323              		.loc 1 431 6 is_stmt 0 view .LVU1376
 4324 015a 4585C0   		testl	%r8d, %r8d
 4325 015d 75D1     		jne	.L426
 4326              	.LVL420:
 4327              	.LBB306:
 4328              	.LBI306:
 429:fltk-1.3.4-1/jpeg/jchuff.c **** {
 4329              		.loc 1 429 1 is_stmt 1 view .LVU1377
 4330              	.LBB307:
 434:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 4331              		.loc 1 434 5 view .LVU1378
 434:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 4332              		.loc 1 434 21 is_stmt 0 view .LVU1379
 4333 015f 498B44C7 		movq	96(%r15,%rax,8), %rax
 4333      60
 4334              	.LVL421:
 435:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4335              		.loc 1 435 5 is_stmt 1 view .LVU1380
 4336 0164 440FB6A0 		movzbl	1264(%rax), %r12d
 4336      F0040000 
 4337 016c 8B98C003 		movl	960(%rax), %ebx
 4337      0000
 4338              	.LVL422:
 4339              	.LBB308:
 4340              	.LBI308:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 4341              		.loc 1 349 1 view .LVU1381
 4342              	.LBB309:
 353:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 4343              		.loc 1 353 3 view .LVU1382
 354:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4344              		.loc 1 354 3 view .LVU1383
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 4345              		.loc 1 357 3 view .LVU1384
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 4346              		.loc 1 357 6 is_stmt 0 view .LVU1385
 4347 0172 4585E4   		testl	%r12d, %r12d
 4348 0175 7528     		jne	.L370
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4349              		.loc 1 358 5 is_stmt 1 view .LVU1386
 4350 0177 498B87D8 		movq	216(%r15), %rax
 4350      000000
 4351              	.LVL423:
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4352              		.loc 1 358 5 is_stmt 0 view .LVU1387
 4353 017e 488B00   		movq	(%rax), %rax
 4354 0181 C7402829 		movl	$41, 40(%rax)
 4354      000000
 4355              	.LVL424:
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4356              		.loc 1 358 5 view .LVU1388
 4357 0188 498BBFD8 		movq	216(%r15), %rdi
 4357      000000
 4358 018f 488B07   		movq	(%rdi), %rax
 4359 0192 FF10     		call	*(%rax)
 4360              	.LVL425:
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 4361              		.loc 1 360 3 is_stmt 1 view .LVU1389
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 4362              		.loc 1 360 6 is_stmt 0 view .LVU1390
 4363 0194 418BBFC0 		movl	192(%r15), %edi
 4363      000000
 4364 019b 85FF     		testl	%edi, %edi
 4365 019d 75A1     		jne	.L366
 4366              	.L370:
 4367              	.LVL426:
 4368              	.LBB310:
 4369              	.LBI310:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 4370              		.loc 1 349 1 is_stmt 1 view .LVU1391
 4371              	.LBB311:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4372              		.loc 1 364 3 view .LVU1392
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4373              		.loc 1 364 47 is_stmt 0 view .LVU1393
 4374 019f 4489E1   		movl	%r12d, %ecx
 4375 01a2 B8010000 		movl	$1, %eax
 4375      00
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4376              		.loc 1 367 12 view .LVU1394
 4377 01a7 45036720 		addl	32(%r15), %r12d
 4378              	.LVL427:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4379              		.loc 1 364 47 view .LVU1395
 4380 01ab 48D3E0   		salq	%cl, %rax
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4381              		.loc 1 369 21 view .LVU1396
 4382 01ae B9180000 		movl	$24, %ecx
 4382      00
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 4383              		.loc 1 374 9 view .LVU1397
 4384 01b3 4589E5   		movl	%r12d, %r13d
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4385              		.loc 1 364 56 view .LVU1398
 4386 01b6 4883E801 		subq	$1, %rax
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4387              		.loc 1 369 21 view .LVU1399
 4388 01ba 4429E1   		subl	%r12d, %ecx
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4389              		.loc 1 364 14 view .LVU1400
 4390 01bd 21C3     		andl	%eax, %ebx
 4391              	.LVL428:
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4392              		.loc 1 367 3 is_stmt 1 view .LVU1401
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4393              		.loc 1 369 3 view .LVU1402
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4394              		.loc 1 369 14 is_stmt 0 view .LVU1403
 4395 01bf 48D3E3   		salq	%cl, %rbx
 4396              	.LVL429:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4397              		.loc 1 372 3 is_stmt 1 view .LVU1404
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4398              		.loc 1 372 14 is_stmt 0 view .LVU1405
 4399 01c2 490B5F18 		orq	24(%r15), %rbx
 4400              	.LVL430:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 4401              		.loc 1 374 3 is_stmt 1 view .LVU1406
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 4402              		.loc 1 374 9 view .LVU1407
 4403 01c6 4183FC07 		cmpl	$7, %r12d
 4404 01ca 7F1A     		jg	.L368
 4405 01cc E98B0000 		jmp	.L369
 4405      00
 4406              	.LVL431:
 4407              		.p2align 4,,10
 4408 01d1 0F1F8000 		.p2align 3
 4408      000000
 4409              	.L373:
 4410              	.LBB312:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4411              		.loc 1 379 30 view .LVU1408
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 4412              		.loc 1 381 5 view .LVU1409
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4413              		.loc 1 382 14 is_stmt 0 view .LVU1410
 4414 01d8 4183ED08 		subl	$8, %r13d
 4415              	.LVL432:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 4416              		.loc 1 381 16 view .LVU1411
 4417 01dc 48C1E308 		salq	$8, %rbx
 4418              	.LVL433:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4419              		.loc 1 382 5 is_stmt 1 view .LVU1412
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4420              		.loc 1 382 5 is_stmt 0 view .LVU1413
 4421              	.LBE312:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 4422              		.loc 1 374 9 is_stmt 1 view .LVU1414
 4423 01e0 4183FD07 		cmpl	$7, %r13d
 4424 01e4 7E72     		jle	.L427
 4425              	.LVL434:
 4426              	.L368:
 4427              	.LBB313:
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4428              		.loc 1 375 5 view .LVU1415
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 4429              		.loc 1 377 5 is_stmt 0 view .LVU1416
 4430 01e6 498B87C8 		movq	200(%r15), %rax
 4430      000000
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4431              		.loc 1 375 32 view .LVU1417
 4432 01ed 4889DA   		movq	%rbx, %rdx
 4433 01f0 48C1FA10 		sarq	$16, %rdx
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 4434              		.loc 1 377 5 view .LVU1418
 4435 01f4 488D4801 		leaq	1(%rax), %rcx
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4436              		.loc 1 375 9 view .LVU1419
 4437 01f8 440FB6F2 		movzbl	%dl, %r14d
 4438              	.LVL435:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 4439              		.loc 1 377 5 is_stmt 1 view .LVU1420
 4440 01fc 49898FC8 		movq	%rcx, 200(%r15)
 4440      000000
 4441 0203 8810     		movb	%dl, (%rax)
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 4442              		.loc 1 377 5 view .LVU1421
 4443 0205 4983AFD0 		subq	$1, 208(%r15)
 4443      00000001 
 4444 020d 0F844502 		je	.L428
 4444      0000
 4445              	.L371:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 4446              		.loc 1 377 28 view .LVU1422
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 4447              		.loc 1 378 5 view .LVU1423
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 4448              		.loc 1 378 8 is_stmt 0 view .LVU1424
 4449 0213 4181FEFF 		cmpl	$255, %r14d
 4449      000000
 4450 021a 75BC     		jne	.L373
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4451              		.loc 1 379 7 is_stmt 1 view .LVU1425
 4452 021c 498B87C8 		movq	200(%r15), %rax
 4452      000000
 4453 0223 488D5001 		leaq	1(%rax), %rdx
 4454 0227 498997C8 		movq	%rdx, 200(%r15)
 4454      000000
 4455 022e C60000   		movb	$0, (%rax)
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4456              		.loc 1 379 7 view .LVU1426
 4457 0231 4983AFD0 		subq	$1, 208(%r15)
 4457      00000001 
 4458 0239 759D     		jne	.L373
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4459              		.loc 1 379 7 view .LVU1427
 4460 023b 4C89FF   		movq	%r15, %rdi
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4461              		.loc 1 382 14 is_stmt 0 view .LVU1428
 4462 023e 4183ED08 		subl	$8, %r13d
 4463              	.LVL436:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 4464              		.loc 1 381 16 view .LVU1429
 4465 0242 48C1E308 		salq	$8, %rbx
 4466              	.LVL437:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4467              		.loc 1 379 7 view .LVU1430
 4468 0246 E8000000 		call	dump_buffer_e
 4468      00
 4469              	.LVL438:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4470              		.loc 1 379 30 is_stmt 1 view .LVU1431
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 4471              		.loc 1 381 5 view .LVU1432
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4472              		.loc 1 382 5 view .LVU1433
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4473              		.loc 1 382 5 is_stmt 0 view .LVU1434
 4474              	.LBE313:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 4475              		.loc 1 374 9 is_stmt 1 view .LVU1435
 4476 024b 4183FD07 		cmpl	$7, %r13d
 4477 024f 7F95     		jg	.L368
 4478              		.p2align 4,,10
 4479 0251 0F1F8000 		.p2align 3
 4479      000000
 4480              	.L427:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 4481              		.loc 1 374 9 is_stmt 0 view .LVU1436
 4482 0258 4183E407 		andl	$7, %r12d
 4483              	.LVL439:
 4484              	.L369:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 4485              		.loc 1 385 3 is_stmt 1 view .LVU1437
 4486              	.LBE311:
 4487              	.LBE310:
 4488              	.LBE309:
 4489              	.LBE308:
 4490              	.LBE307:
 4491              	.LBE306:
 4492              	.LBE328:
 4493              	.LBE332:
 689:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4494              		.loc 1 689 9 is_stmt 0 view .LVU1438
 4495 025c 83ED10   		subl	$16, %ebp
 4496              	.LVL440:
 4497              	.LBB333:
 4498              	.LBB329:
 4499              	.LBB325:
 4500              	.LBB323:
 4501              	.LBB321:
 4502              	.LBB319:
 4503              	.LBB317:
 4504              	.LBB315:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 4505              		.loc 1 385 29 view .LVU1439
 4506 025f 49895F18 		movq	%rbx, 24(%r15)
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 4507              		.loc 1 386 3 is_stmt 1 view .LVU1440
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 4508              		.loc 1 386 27 is_stmt 0 view .LVU1441
 4509 0263 45896720 		movl	%r12d, 32(%r15)
 4510              	.LVL441:
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 4511              		.loc 1 386 27 view .LVU1442
 4512              	.LBE315:
 4513              	.LBE317:
 4514              	.LBE319:
 4515              	.LBE321:
 4516              	.LBE323:
 4517              	.LBE325:
 4518              	.LBE329:
 4519              	.LBE333:
 689:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4520              		.loc 1 689 7 is_stmt 1 view .LVU1443
 687:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_ac_symbol(entropy, entropy->ac_tbl_no, 0xF0);
 4521              		.loc 1 687 11 view .LVU1444
 4522 0267 83FD0F   		cmpl	$15, %ebp
 4523 026a 0F8FDCFE 		jg	.L375
 4523      FFFF
 4524              	.L425:
 687:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_ac_symbol(entropy, entropy->ac_tbl_no, 0xF0);
 4525              		.loc 1 687 11 is_stmt 0 view .LVU1445
 4526 0270 8324240F 		andl	$15, (%rsp)
 4527 0274 4C8B7424 		movq	40(%rsp), %r14
 4527      28
 4528              	.LVL442:
 4529              	.L364:
 694:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 4530              		.loc 1 694 11 is_stmt 1 view .LVU1446
 694:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 4531              		.loc 1 694 11 is_stmt 0 view .LVU1447
 4532 0279 8B5C2404 		movl	4(%rsp), %ebx
 693:fltk-1.3.4-1/jpeg/jchuff.c ****     while ((temp >>= 1))
 4533              		.loc 1 693 11 view .LVU1448
 4534 027d 41BC0100 		movl	$1, %r12d
 4534      0000
 694:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 4535              		.loc 1 694 11 view .LVU1449
 4536 0283 D1FB     		sarl	%ebx
 4537              	.LVL443:
 694:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 4538              		.loc 1 694 11 view .LVU1450
 4539 0285 742B     		je	.L376
 4540              	.LVL444:
 4541 0287 660F1F84 		.p2align 4,,10
 4541      00000000 
 4541      00
 4542              		.p2align 3
 4543              	.L377:
 695:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Check for out-of-range coefficient values */
 4544              		.loc 1 695 7 is_stmt 1 view .LVU1451
 695:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Check for out-of-range coefficient values */
 4545              		.loc 1 695 12 is_stmt 0 view .LVU1452
 4546 0290 4183C401 		addl	$1, %r12d
 4547              	.LVL445:
 694:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 4548              		.loc 1 694 11 is_stmt 1 view .LVU1453
 694:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 4549              		.loc 1 694 11 is_stmt 0 view .LVU1454
 4550 0294 D1FB     		sarl	%ebx
 4551              	.LVL446:
 694:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 4552              		.loc 1 694 11 view .LVU1455
 4553 0296 75F8     		jne	.L377
 697:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 4554              		.loc 1 697 5 is_stmt 1 view .LVU1456
 697:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 4555              		.loc 1 697 8 is_stmt 0 view .LVU1457
 4556 0298 4183FC0A 		cmpl	$10, %r12d
 4557 029c 7E14     		jle	.L376
 698:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4558              		.loc 1 698 7 is_stmt 1 view .LVU1458
 4559 029e 488B7C24 		movq	32(%rsp), %rdi
 4559      20
 4560 02a3 488B17   		movq	(%rdi), %rdx
 4561 02a6 C7422806 		movl	$6, 40(%rdx)
 4561      000000
 4562 02ad 488B17   		movq	(%rdi), %rdx
 4563 02b0 FF12     		call	*(%rdx)
 4564              	.LVL447:
 4565              	.L376:
 701:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4566              		.loc 1 701 5 view .LVU1459
 701:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4567              		.loc 1 701 52 is_stmt 0 view .LVU1460
 4568 02b2 448B2C24 		movl	(%rsp), %r13d
 4569              	.LBB334:
 4570              	.LBB335:
 431:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 4571              		.loc 1 431 6 view .LVU1461
 4572 02b6 418BB7C0 		movl	192(%r15), %esi
 4572      000000
 4573              	.LBE335:
 4574              	.LBE334:
 701:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4575              		.loc 1 701 5 view .LVU1462
 4576 02bd 496397E0 		movslq	224(%r15), %rdx
 4576      000000
 4577              	.LVL448:
 701:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4578              		.loc 1 701 52 view .LVU1463
 4579 02c4 41C1E504 		sall	$4, %r13d
 701:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4580              		.loc 1 701 5 view .LVU1464
 4581 02c8 4501E5   		addl	%r12d, %r13d
 4582              	.LVL449:
 4583              	.LBB347:
 4584              	.LBI334:
 429:fltk-1.3.4-1/jpeg/jchuff.c **** {
 4585              		.loc 1 429 1 is_stmt 1 view .LVU1465
 4586              	.LBB345:
 431:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 4587              		.loc 1 431 3 view .LVU1466
 431:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 4588              		.loc 1 431 6 is_stmt 0 view .LVU1467
 4589 02cb 85F6     		testl	%esi, %esi
 4590 02cd 0F84B501 		je	.L378
 4590      0000
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 4591              		.loc 1 432 5 is_stmt 1 view .LVU1468
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 4592              		.loc 1 432 35 is_stmt 0 view .LVU1469
 4593 02d3 498B94D7 		movq	160(%r15,%rdx,8), %rdx
 4593      A0000000 
 4594              	.LVL450:
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 4595              		.loc 1 432 35 view .LVU1470
 4596 02db 4D63ED   		movslq	%r13d, %r13
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 4597              		.loc 1 432 43 view .LVU1471
 4598 02de 4A8304EA 		addq	$1, (%rdx,%r13,8)
 4598      01
 4599              	.LVL451:
 4600              	.L379:
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 4601              		.loc 1 432 43 view .LVU1472
 4602              	.LBE345:
 4603              	.LBE347:
 705:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4604              		.loc 1 705 5 is_stmt 1 view .LVU1473
 4605              	.LBB348:
 4606              	.LBI348:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 4607              		.loc 1 349 1 view .LVU1474
 4608              	.LBB349:
 353:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 4609              		.loc 1 353 3 view .LVU1475
 354:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4610              		.loc 1 354 3 view .LVU1476
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 4611              		.loc 1 357 3 view .LVU1477
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 4612              		.loc 1 360 3 view .LVU1478
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 4613              		.loc 1 360 6 is_stmt 0 view .LVU1479
 4614 02e3 418B97C0 		movl	192(%r15), %edx
 4614      000000
 4615 02ea 85D2     		testl	%edx, %edx
 4616 02ec 0F85C900 		jne	.L420
 4616      0000
 4617              	.LVL452:
 4618              	.LBB350:
 4619              	.LBI350:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 4620              		.loc 1 349 1 is_stmt 1 view .LVU1480
 4621              	.LBB351:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4622              		.loc 1 364 3 view .LVU1481
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4623              		.loc 1 364 47 is_stmt 0 view .LVU1482
 4624 02f2 4489E1   		movl	%r12d, %ecx
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4625              		.loc 1 367 12 view .LVU1483
 4626 02f5 418B5F20 		movl	32(%r15), %ebx
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4627              		.loc 1 364 47 view .LVU1484
 4628 02f9 BA010000 		movl	$1, %edx
 4628      00
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4629              		.loc 1 364 14 view .LVU1485
 4630 02fe 8B6C2418 		movl	24(%rsp), %ebp
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4631              		.loc 1 364 47 view .LVU1486
 4632 0302 48D3E2   		salq	%cl, %rdx
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4633              		.loc 1 369 21 view .LVU1487
 4634 0305 B9180000 		movl	$24, %ecx
 4634      00
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4635              		.loc 1 364 56 view .LVU1488
 4636 030a 4883EA01 		subq	$1, %rdx
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4637              		.loc 1 367 12 view .LVU1489
 4638 030e 4401E3   		addl	%r12d, %ebx
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4639              		.loc 1 364 14 view .LVU1490
 4640 0311 21D5     		andl	%edx, %ebp
 4641              	.LVL453:
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4642              		.loc 1 367 3 is_stmt 1 view .LVU1491
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4643              		.loc 1 369 3 view .LVU1492
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4644              		.loc 1 369 21 is_stmt 0 view .LVU1493
 4645 0313 29D9     		subl	%ebx, %ecx
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4646              		.loc 1 369 14 view .LVU1494
 4647 0315 48D3E5   		salq	%cl, %rbp
 4648              	.LVL454:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4649              		.loc 1 372 3 is_stmt 1 view .LVU1495
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4650              		.loc 1 372 14 is_stmt 0 view .LVU1496
 4651 0318 490B6F18 		orq	24(%r15), %rbp
 4652              	.LVL455:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 4653              		.loc 1 374 3 is_stmt 1 view .LVU1497
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 4654              		.loc 1 374 9 view .LVU1498
 4655 031c 83FB07   		cmpl	$7, %ebx
 4656 031f 0F8E8E00 		jle	.L389
 4656      0000
 4657 0325 4189DC   		movl	%ebx, %r12d
 4658              	.LVL456:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 4659              		.loc 1 374 9 is_stmt 0 view .LVU1499
 4660 0328 EB14     		jmp	.L394
 4661              	.LVL457:
 4662 032a 660F1F44 		.p2align 4,,10
 4662      0000
 4663              		.p2align 3
 4664              	.L392:
 4665              	.LBB352:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4666              		.loc 1 379 30 is_stmt 1 view .LVU1500
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 4667              		.loc 1 381 5 view .LVU1501
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4668              		.loc 1 382 14 is_stmt 0 view .LVU1502
 4669 0330 4183EC08 		subl	$8, %r12d
 4670              	.LVL458:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 4671              		.loc 1 381 16 view .LVU1503
 4672 0334 48C1E508 		salq	$8, %rbp
 4673              	.LVL459:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4674              		.loc 1 382 5 is_stmt 1 view .LVU1504
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4675              		.loc 1 382 5 is_stmt 0 view .LVU1505
 4676              	.LBE352:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 4677              		.loc 1 374 9 is_stmt 1 view .LVU1506
 4678 0338 4183FC07 		cmpl	$7, %r12d
 4679 033c 7E72     		jle	.L429
 4680              	.LVL460:
 4681              	.L394:
 4682              	.LBB353:
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4683              		.loc 1 375 5 view .LVU1507
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 4684              		.loc 1 377 5 is_stmt 0 view .LVU1508
 4685 033e 498B87C8 		movq	200(%r15), %rax
 4685      000000
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4686              		.loc 1 375 32 view .LVU1509
 4687 0345 4889EA   		movq	%rbp, %rdx
 4688 0348 48C1FA10 		sarq	$16, %rdx
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 4689              		.loc 1 377 5 view .LVU1510
 4690 034c 488D4801 		leaq	1(%rax), %rcx
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4691              		.loc 1 375 9 view .LVU1511
 4692 0350 440FB6EA 		movzbl	%dl, %r13d
 4693              	.LVL461:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 4694              		.loc 1 377 5 is_stmt 1 view .LVU1512
 4695 0354 49898FC8 		movq	%rcx, 200(%r15)
 4695      000000
 4696 035b 8810     		movb	%dl, (%rax)
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 4697              		.loc 1 377 5 view .LVU1513
 4698 035d 4983AFD0 		subq	$1, 208(%r15)
 4698      00000001 
 4699 0365 0F84FD00 		je	.L430
 4699      0000
 4700              	.L390:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 4701              		.loc 1 377 28 view .LVU1514
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 4702              		.loc 1 378 5 view .LVU1515
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 4703              		.loc 1 378 8 is_stmt 0 view .LVU1516
 4704 036b 4181FDFF 		cmpl	$255, %r13d
 4704      000000
 4705 0372 75BC     		jne	.L392
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4706              		.loc 1 379 7 is_stmt 1 view .LVU1517
 4707 0374 498B87C8 		movq	200(%r15), %rax
 4707      000000
 4708 037b 488D5001 		leaq	1(%rax), %rdx
 4709 037f 498997C8 		movq	%rdx, 200(%r15)
 4709      000000
 4710 0386 C60000   		movb	$0, (%rax)
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4711              		.loc 1 379 7 view .LVU1518
 4712 0389 4983AFD0 		subq	$1, 208(%r15)
 4712      00000001 
 4713 0391 759D     		jne	.L392
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4714              		.loc 1 379 7 view .LVU1519
 4715 0393 4C89FF   		movq	%r15, %rdi
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4716              		.loc 1 382 14 is_stmt 0 view .LVU1520
 4717 0396 4183EC08 		subl	$8, %r12d
 4718              	.LVL462:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 4719              		.loc 1 381 16 view .LVU1521
 4720 039a 48C1E508 		salq	$8, %rbp
 4721              	.LVL463:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4722              		.loc 1 379 7 view .LVU1522
 4723 039e E8000000 		call	dump_buffer_e
 4723      00
 4724              	.LVL464:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4725              		.loc 1 379 30 is_stmt 1 view .LVU1523
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 4726              		.loc 1 381 5 view .LVU1524
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4727              		.loc 1 382 5 view .LVU1525
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4728              		.loc 1 382 5 is_stmt 0 view .LVU1526
 4729              	.LBE353:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 4730              		.loc 1 374 9 is_stmt 1 view .LVU1527
 4731 03a3 4183FC07 		cmpl	$7, %r12d
 4732 03a7 7F95     		jg	.L394
 4733 03a9 0F1F8000 		.p2align 4,,10
 4733      000000
 4734              		.p2align 3
 4735              	.L429:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 4736              		.loc 1 374 9 is_stmt 0 view .LVU1528
 4737 03b0 83E307   		andl	$7, %ebx
 4738              	.LVL465:
 4739              	.L389:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 4740              		.loc 1 385 3 is_stmt 1 view .LVU1529
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 4741              		.loc 1 385 29 is_stmt 0 view .LVU1530
 4742 03b3 49896F18 		movq	%rbp, 24(%r15)
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 4743              		.loc 1 386 3 is_stmt 1 view .LVU1531
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 4744              		.loc 1 386 27 is_stmt 0 view .LVU1532
 4745 03b7 41895F20 		movl	%ebx, 32(%r15)
 4746              	.LVL466:
 4747              	.L420:
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 4748              		.loc 1 386 27 view .LVU1533
 4749              	.LBE351:
 4750              	.LBE350:
 4751              	.LBE349:
 4752              	.LBE348:
 707:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4753              		.loc 1 707 7 view .LVU1534
 4754 03bb C7042400 		movl	$0, (%rsp)
 4754      000000
 4755              	.LVL467:
 658:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = (*block)[natural_order[k]]) == 0) {
 4756              		.loc 1 658 32 is_stmt 1 view .LVU1535
 658:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = (*block)[natural_order[k]]) == 0) {
 4757              		.loc 1 658 23 view .LVU1536
 4758 03c2 4983C604 		addq	$4, %r14
 658:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = (*block)[natural_order[k]]) == 0) {
 4759              		.loc 1 658 3 is_stmt 0 view .LVU1537
 4760 03c6 4C397424 		cmpq	%r14, 16(%rsp)
 4760      10
 4761 03cb 0F85F2FC 		jne	.L395
 4761      FFFF
 4762              	.LVL468:
 4763              	.L423:
 710:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->EOBRUN++;		/* count an EOB */
 4764              		.loc 1 710 3 is_stmt 1 view .LVU1538
 710:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->EOBRUN++;		/* count an EOB */
 4765              		.loc 1 710 6 is_stmt 0 view .LVU1539
 4766 03d1 8B0424   		movl	(%rsp), %eax
 4767 03d4 85C0     		testl	%eax, %eax
 4768 03d6 741D     		je	.L357
 711:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->EOBRUN == 0x7FFF)
 4769              		.loc 1 711 5 is_stmt 1 view .LVU1540
 711:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->EOBRUN == 0x7FFF)
 4770              		.loc 1 711 20 is_stmt 0 view .LVU1541
 4771 03d8 418B87E4 		movl	228(%r15), %eax
 4771      000000
 4772 03df 8D5001   		leal	1(%rax), %edx
 4773 03e2 418997E4 		movl	%edx, 228(%r15)
 4773      000000
 712:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_eobrun(entropy);	/* force it out to avoid overflow */
 4774              		.loc 1 712 5 is_stmt 1 view .LVU1542
 712:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_eobrun(entropy);	/* force it out to avoid overflow */
 4775              		.loc 1 712 8 is_stmt 0 view .LVU1543
 4776 03e9 81FAFF7F 		cmpl	$32767, %edx
 4776      0000
 4777 03ef 0F84BE01 		je	.L431
 4777      0000
 4778              	.L357:
 716:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 4779              		.loc 1 716 3 is_stmt 1 view .LVU1544
 716:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 4780              		.loc 1 716 8 is_stmt 0 view .LVU1545
 4781 03f5 488B4424 		movq	32(%rsp), %rax
 4781      20
 716:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 4782              		.loc 1 716 42 view .LVU1546
 4783 03fa 498B8FC8 		movq	200(%r15), %rcx
 4783      000000
 716:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 4784              		.loc 1 716 8 view .LVU1547
 4785 0401 488B5028 		movq	40(%rax), %rdx
 716:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 4786              		.loc 1 716 33 view .LVU1548
 4787 0405 48890A   		movq	%rcx, (%rdx)
 717:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4788              		.loc 1 717 3 is_stmt 1 view .LVU1549
 717:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4789              		.loc 1 717 40 is_stmt 0 view .LVU1550
 4790 0408 498B8FD0 		movq	208(%r15), %rcx
 4790      000000
 717:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4791              		.loc 1 717 8 view .LVU1551
 4792 040f 488B5028 		movq	40(%rax), %rdx
 717:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4793              		.loc 1 717 31 view .LVU1552
 4794 0413 48894A08 		movq	%rcx, 8(%rdx)
 720:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 4795              		.loc 1 720 3 is_stmt 1 view .LVU1553
 720:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 4796              		.loc 1 720 12 is_stmt 0 view .LVU1554
 4797 0417 8B883C01 		movl	316(%rax), %ecx
 4797      0000
 720:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 4798              		.loc 1 720 6 view .LVU1555
 4799 041d 85C9     		testl	%ecx, %ecx
 4800 041f 741F     		je	.L397
 721:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 4801              		.loc 1 721 5 is_stmt 1 view .LVU1556
 721:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 4802              		.loc 1 721 16 is_stmt 0 view .LVU1557
 4803 0421 418B5738 		movl	56(%r15), %edx
 721:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 4804              		.loc 1 721 8 view .LVU1558
 4805 0425 85D2     		testl	%edx, %edx
 4806 0427 7510     		jne	.L398
 722:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num++;
 4807              		.loc 1 722 7 is_stmt 1 view .LVU1559
 723:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num &= 7;
 4808              		.loc 1 723 7 view .LVU1560
 724:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4809              		.loc 1 724 7 view .LVU1561
 723:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num &= 7;
 4810              		.loc 1 723 32 is_stmt 0 view .LVU1562
 4811 0429 418B473C 		movl	60(%r15), %eax
 4812 042d 8D5001   		leal	1(%rax), %edx
 724:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4813              		.loc 1 724 33 view .LVU1563
 4814 0430 83E207   		andl	$7, %edx
 4815 0433 4189573C 		movl	%edx, 60(%r15)
 4816 0437 89CA     		movl	%ecx, %edx
 4817              	.L398:
 726:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4818              		.loc 1 726 5 is_stmt 1 view .LVU1564
 726:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4819              		.loc 1 726 28 is_stmt 0 view .LVU1565
 4820 0439 83EA01   		subl	$1, %edx
 4821 043c 41895738 		movl	%edx, 56(%r15)
 4822              	.L397:
 729:fltk-1.3.4-1/jpeg/jchuff.c **** }
 4823              		.loc 1 729 3 is_stmt 1 view .LVU1566
 730:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4824              		.loc 1 730 1 is_stmt 0 view .LVU1567
 4825 0440 4883C438 		addq	$56, %rsp
 4826              		.cfi_remember_state
 4827              		.cfi_def_cfa_offset 56
 4828 0444 B8010000 		movl	$1, %eax
 4828      00
 4829 0449 5B       		popq	%rbx
 4830              		.cfi_def_cfa_offset 48
 4831 044a 5D       		popq	%rbp
 4832              		.cfi_def_cfa_offset 40
 4833 044b 415C     		popq	%r12
 4834              		.cfi_def_cfa_offset 32
 4835 044d 415D     		popq	%r13
 4836              		.cfi_def_cfa_offset 24
 4837 044f 415E     		popq	%r14
 4838              		.cfi_def_cfa_offset 16
 4839 0451 415F     		popq	%r15
 4840              		.cfi_def_cfa_offset 8
 4841              	.LVL469:
 730:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4842              		.loc 1 730 1 view .LVU1568
 4843 0453 C3       		ret
 4844              	.LVL470:
 4845              		.p2align 4,,10
 4846 0454 0F1F4000 		.p2align 3
 4847              	.L428:
 4848              		.cfi_restore_state
 4849              	.LBB358:
 4850              	.LBB330:
 4851              	.LBB326:
 4852              	.LBB324:
 4853              	.LBB322:
 4854              	.LBB320:
 4855              	.LBB318:
 4856              	.LBB316:
 4857              	.LBB314:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 4858              		.loc 1 377 5 is_stmt 1 view .LVU1569
 4859 0458 4C89FF   		movq	%r15, %rdi
 4860 045b E8000000 		call	dump_buffer_e
 4860      00
 4861              	.LVL471:
 4862 0460 E9AEFDFF 		jmp	.L371
 4862      FF
 4863              	.LVL472:
 4864              		.p2align 4,,10
 4865 0465 0F1F00   		.p2align 3
 4866              	.L430:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 4867              		.loc 1 377 5 is_stmt 0 view .LVU1570
 4868              	.LBE314:
 4869              	.LBE316:
 4870              	.LBE318:
 4871              	.LBE320:
 4872              	.LBE322:
 4873              	.LBE324:
 4874              	.LBE326:
 4875              	.LBE330:
 4876              	.LBE358:
 4877              	.LBB359:
 4878              	.LBB357:
 4879              	.LBB356:
 4880              	.LBB355:
 4881              	.LBB354:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 4882              		.loc 1 377 5 is_stmt 1 view .LVU1571
 4883 0468 4C89FF   		movq	%r15, %rdi
 4884 046b E8000000 		call	dump_buffer_e
 4884      00
 4885              	.LVL473:
 4886 0470 E9F6FEFF 		jmp	.L390
 4886      FF
 4887              	.LVL474:
 4888              		.p2align 4,,10
 4889 0475 0F1F00   		.p2align 3
 4890              	.L424:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 4891              		.loc 1 377 5 is_stmt 0 view .LVU1572
 4892              	.LBE354:
 4893              	.LBE355:
 4894              	.LBE356:
 4895              	.LBE357:
 4896              	.LBE359:
 685:fltk-1.3.4-1/jpeg/jchuff.c ****     /* if run length > 15, must emit special run-length-16 codes (0xF0) */
 4897              		.loc 1 685 7 is_stmt 1 view .LVU1573
 4898 0478 4C89FF   		movq	%r15, %rdi
 4899 047b E8000000 		call	emit_eobrun
 4899      00
 4900              	.LVL475:
 685:fltk-1.3.4-1/jpeg/jchuff.c ****     /* if run length > 15, must emit special run-length-16 codes (0xF0) */
 4901              		.loc 1 685 7 is_stmt 0 view .LVU1574
 4902 0480 E98EFCFF 		jmp	.L363
 4902      FF
 4903              	.LVL476:
 4904              		.p2align 4,,10
 4905 0485 0F1F00   		.p2align 3
 4906              	.L378:
 4907              	.LBB360:
 4908              	.LBB346:
 4909              	.LBB336:
 4910              	.LBI336:
 429:fltk-1.3.4-1/jpeg/jchuff.c **** {
 4911              		.loc 1 429 1 is_stmt 1 view .LVU1575
 4912              	.LBB337:
 434:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 4913              		.loc 1 434 5 view .LVU1576
 434:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 4914              		.loc 1 434 21 is_stmt 0 view .LVU1577
 4915 0488 498B54D7 		movq	96(%r15,%rdx,8), %rdx
 4915      60
 4916              	.LVL477:
 435:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4917              		.loc 1 435 5 is_stmt 1 view .LVU1578
 435:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4918              		.loc 1 435 58 is_stmt 0 view .LVU1579
 4919 048d 4D63ED   		movslq	%r13d, %r13
 435:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4920              		.loc 1 435 5 view .LVU1580
 4921 0490 420FB69C 		movzbl	1024(%rdx,%r13), %ebx
 4921      2A000400 
 4921      00
 4922              	.LVL478:
 435:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4923              		.loc 1 435 5 view .LVU1581
 4924 0499 428B34AA 		movl	(%rdx,%r13,4), %esi
 4925              	.LVL479:
 4926              	.LBB338:
 4927              	.LBI338:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 4928              		.loc 1 349 1 is_stmt 1 view .LVU1582
 4929              	.LBB339:
 353:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 4930              		.loc 1 353 3 view .LVU1583
 354:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4931              		.loc 1 354 3 view .LVU1584
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 4932              		.loc 1 357 3 view .LVU1585
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 4933              		.loc 1 357 6 is_stmt 0 view .LVU1586
 4934 049d 85DB     		testl	%ebx, %ebx
 4935 049f 7532     		jne	.L383
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4936              		.loc 1 358 5 view .LVU1587
 4937 04a1 498B97D8 		movq	216(%r15), %rdx
 4937      000000
 4938              	.LVL480:
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4939              		.loc 1 358 5 view .LVU1588
 4940 04a8 893424   		movl	%esi, (%rsp)
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4941              		.loc 1 358 5 is_stmt 1 view .LVU1589
 4942 04ab 488B12   		movq	(%rdx), %rdx
 4943 04ae C7422829 		movl	$41, 40(%rdx)
 4943      000000
 4944              	.LVL481:
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4945              		.loc 1 358 5 is_stmt 0 view .LVU1590
 4946 04b5 498BBFD8 		movq	216(%r15), %rdi
 4946      000000
 4947 04bc 488B17   		movq	(%rdi), %rdx
 4948 04bf FF12     		call	*(%rdx)
 4949              	.LVL482:
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 4950              		.loc 1 360 3 is_stmt 1 view .LVU1591
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 4951              		.loc 1 360 6 is_stmt 0 view .LVU1592
 4952 04c1 418B8FC0 		movl	192(%r15), %ecx
 4952      000000
 4953 04c8 8B3424   		movl	(%rsp), %esi
 4954 04cb 85C9     		testl	%ecx, %ecx
 4955 04cd 0F85E8FE 		jne	.L420
 4955      FFFF
 4956              	.LVL483:
 4957              	.L383:
 4958              	.LBB340:
 4959              	.LBI340:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 4960              		.loc 1 349 1 is_stmt 1 view .LVU1593
 4961              	.LBB341:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4962              		.loc 1 364 3 view .LVU1594
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4963              		.loc 1 364 47 is_stmt 0 view .LVU1595
 4964 04d3 89D9     		movl	%ebx, %ecx
 4965 04d5 BA010000 		movl	$1, %edx
 4965      00
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4966              		.loc 1 367 12 view .LVU1596
 4967 04da 41035F20 		addl	32(%r15), %ebx
 4968              	.LVL484:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4969              		.loc 1 364 47 view .LVU1597
 4970 04de 48D3E2   		salq	%cl, %rdx
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4971              		.loc 1 369 21 view .LVU1598
 4972 04e1 B9180000 		movl	$24, %ecx
 4972      00
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4973              		.loc 1 367 12 view .LVU1599
 4974 04e6 891C24   		movl	%ebx, (%rsp)
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4975              		.loc 1 364 56 view .LVU1600
 4976 04e9 4C8D6AFF 		leaq	-1(%rdx), %r13
 4977              	.LVL485:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4978              		.loc 1 369 21 view .LVU1601
 4979 04ed 29D9     		subl	%ebx, %ecx
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4980              		.loc 1 364 14 view .LVU1602
 4981 04ef 4121F5   		andl	%esi, %r13d
 4982              	.LVL486:
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4983              		.loc 1 367 3 is_stmt 1 view .LVU1603
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4984              		.loc 1 369 3 view .LVU1604
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4985              		.loc 1 369 14 is_stmt 0 view .LVU1605
 4986 04f2 49D3E5   		salq	%cl, %r13
 4987              	.LVL487:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4988              		.loc 1 372 3 is_stmt 1 view .LVU1606
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4989              		.loc 1 372 14 is_stmt 0 view .LVU1607
 4990 04f5 4D0B6F18 		orq	24(%r15), %r13
 4991              	.LVL488:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 4992              		.loc 1 374 3 is_stmt 1 view .LVU1608
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 4993              		.loc 1 374 9 view .LVU1609
 4994 04f9 83FB07   		cmpl	$7, %ebx
 4995 04fc 7F45     		jg	.L381
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 4996              		.loc 1 385 3 view .LVU1610
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 4997              		.loc 1 386 27 is_stmt 0 view .LVU1611
 4998 04fe 8B0424   		movl	(%rsp), %eax
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 4999              		.loc 1 385 29 view .LVU1612
 5000 0501 4D896F18 		movq	%r13, 24(%r15)
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 5001              		.loc 1 386 3 is_stmt 1 view .LVU1613
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 5002              		.loc 1 386 27 is_stmt 0 view .LVU1614
 5003 0505 41894720 		movl	%eax, 32(%r15)
 5004 0509 E9D5FDFF 		jmp	.L379
 5004      FF
 5005              	.LVL489:
 5006 050e 6690     		.p2align 4,,10
 5007              		.p2align 3
 5008              	.L434:
 5009              	.LBB342:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5010              		.loc 1 379 7 is_stmt 1 view .LVU1615
 5011 0510 498B87C8 		movq	200(%r15), %rax
 5011      000000
 5012 0517 488D5001 		leaq	1(%rax), %rdx
 5013 051b 498997C8 		movq	%rdx, 200(%r15)
 5013      000000
 5014 0522 C60000   		movb	$0, (%rax)
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5015              		.loc 1 379 7 view .LVU1616
 5016 0525 4983AFD0 		subq	$1, 208(%r15)
 5016      00000001 
 5017 052d 7508     		jne	.L386
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5018              		.loc 1 379 7 view .LVU1617
 5019 052f 4C89FF   		movq	%r15, %rdi
 5020 0532 E8000000 		call	dump_buffer_e
 5020      00
 5021              	.LVL490:
 5022              	.L386:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5023              		.loc 1 379 30 view .LVU1618
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 5024              		.loc 1 381 5 view .LVU1619
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5025              		.loc 1 382 14 is_stmt 0 view .LVU1620
 5026 0537 83EB08   		subl	$8, %ebx
 5027              	.LVL491:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 5028              		.loc 1 381 16 view .LVU1621
 5029 053a 49C1E508 		salq	$8, %r13
 5030              	.LVL492:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5031              		.loc 1 382 5 is_stmt 1 view .LVU1622
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5032              		.loc 1 382 5 is_stmt 0 view .LVU1623
 5033              	.LBE342:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 5034              		.loc 1 374 9 is_stmt 1 view .LVU1624
 5035 053e 83FB07   		cmpl	$7, %ebx
 5036 0541 7E3C     		jle	.L432
 5037              	.LVL493:
 5038              	.L381:
 5039              	.LBB343:
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5040              		.loc 1 375 5 view .LVU1625
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5041              		.loc 1 377 5 is_stmt 0 view .LVU1626
 5042 0543 498B87C8 		movq	200(%r15), %rax
 5042      000000
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5043              		.loc 1 375 32 view .LVU1627
 5044 054a 4C89EA   		movq	%r13, %rdx
 5045 054d 48C1FA10 		sarq	$16, %rdx
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5046              		.loc 1 377 5 view .LVU1628
 5047 0551 488D4801 		leaq	1(%rax), %rcx
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5048              		.loc 1 375 9 view .LVU1629
 5049 0555 0FB6EA   		movzbl	%dl, %ebp
 5050              	.LVL494:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5051              		.loc 1 377 5 is_stmt 1 view .LVU1630
 5052 0558 49898FC8 		movq	%rcx, 200(%r15)
 5052      000000
 5053 055f 8810     		movb	%dl, (%rax)
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5054              		.loc 1 377 5 view .LVU1631
 5055 0561 4983AFD0 		subq	$1, 208(%r15)
 5055      00000001 
 5056 0569 742D     		je	.L433
 5057              	.L384:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5058              		.loc 1 377 28 view .LVU1632
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 5059              		.loc 1 378 5 view .LVU1633
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 5060              		.loc 1 378 8 is_stmt 0 view .LVU1634
 5061 056b 81FDFF00 		cmpl	$255, %ebp
 5061      0000
 5062 0571 749D     		je	.L434
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5063              		.loc 1 379 30 is_stmt 1 view .LVU1635
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 5064              		.loc 1 381 5 view .LVU1636
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5065              		.loc 1 382 14 is_stmt 0 view .LVU1637
 5066 0573 83EB08   		subl	$8, %ebx
 5067              	.LVL495:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 5068              		.loc 1 381 16 view .LVU1638
 5069 0576 49C1E508 		salq	$8, %r13
 5070              	.LVL496:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5071              		.loc 1 382 5 is_stmt 1 view .LVU1639
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5072              		.loc 1 382 5 is_stmt 0 view .LVU1640
 5073              	.LBE343:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 5074              		.loc 1 374 9 is_stmt 1 view .LVU1641
 5075 057a 83FB07   		cmpl	$7, %ebx
 5076 057d 7FC4     		jg	.L381
 5077              	.L432:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 5078              		.loc 1 385 3 view .LVU1642
 5079 057f 83242407 		andl	$7, (%rsp)
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 5080              		.loc 1 386 27 is_stmt 0 view .LVU1643
 5081 0583 8B0424   		movl	(%rsp), %eax
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 5082              		.loc 1 385 29 view .LVU1644
 5083 0586 4D896F18 		movq	%r13, 24(%r15)
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 5084              		.loc 1 386 3 is_stmt 1 view .LVU1645
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 5085              		.loc 1 386 27 is_stmt 0 view .LVU1646
 5086 058a 41894720 		movl	%eax, 32(%r15)
 5087 058e E950FDFF 		jmp	.L379
 5087      FF
 5088              		.p2align 4,,10
 5089 0593 0F1F4400 		.p2align 3
 5089      00
 5090              	.L433:
 5091              	.LBB344:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5092              		.loc 1 377 5 is_stmt 1 view .LVU1647
 5093 0598 4C89FF   		movq	%r15, %rdi
 5094 059b E8000000 		call	dump_buffer_e
 5094      00
 5095              	.LVL497:
 5096 05a0 EBC9     		jmp	.L384
 5097              	.LVL498:
 5098              	.L422:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5099              		.loc 1 377 5 is_stmt 0 view .LVU1648
 5100              	.LBE344:
 5101              	.LBE341:
 5102              	.LBE340:
 5103              	.LBE339:
 5104              	.LBE338:
 5105              	.LBE337:
 5106              	.LBE336:
 5107              	.LBE346:
 5108              	.LBE360:
 645:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5109              		.loc 1 645 7 is_stmt 1 view .LVU1649
 5110 05a2 418B773C 		movl	60(%r15), %esi
 5111 05a6 4C89FF   		movq	%r15, %rdi
 5112              	.LVL499:
 645:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5113              		.loc 1 645 7 is_stmt 0 view .LVU1650
 5114 05a9 E8000000 		call	emit_restart_e
 5114      00
 5115              	.LVL500:
 5116 05ae E9A2FAFF 		jmp	.L355
 5116      FF
 5117              	.LVL501:
 5118              	.L431:
 713:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5119              		.loc 1 713 7 is_stmt 1 view .LVU1651
 5120 05b3 4C89FF   		movq	%r15, %rdi
 5121 05b6 E8000000 		call	emit_eobrun
 5121      00
 5122              	.LVL502:
 5123 05bb E935FEFF 		jmp	.L357
 5123      FF
 5124              		.cfi_endproc
 5125              	.LFE65:
 5127              		.section	.text.encode_mcu_AC_refine,"ax",@progbits
 5128              		.p2align 4
 5130              	encode_mcu_AC_refine:
 5131              	.LVL503:
 5132              	.LFB67:
 784:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 5133              		.loc 1 784 1 view -0
 5134              		.cfi_startproc
 784:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 5135              		.loc 1 784 1 is_stmt 0 view .LVU1653
 5136 0000 F30F1EFA 		endbr64
 5137 0004 4157     		pushq	%r15
 5138              		.cfi_def_cfa_offset 16
 5139              		.cfi_offset 15, -16
 5140 0006 4156     		pushq	%r14
 5141              		.cfi_def_cfa_offset 24
 5142              		.cfi_offset 14, -24
 5143 0008 4155     		pushq	%r13
 5144              		.cfi_def_cfa_offset 32
 5145              		.cfi_offset 13, -32
 5146 000a 4154     		pushq	%r12
 5147              		.cfi_def_cfa_offset 40
 5148              		.cfi_offset 12, -40
 5149 000c 55       		pushq	%rbp
 5150              		.cfi_def_cfa_offset 48
 5151              		.cfi_offset 6, -48
 5152 000d 53       		pushq	%rbx
 5153              		.cfi_def_cfa_offset 56
 5154              		.cfi_offset 3, -56
 5155 000e 4889F3   		movq	%rsi, %rbx
 5156 0011 4881EC58 		subq	$344, %rsp
 5156      010000
 5157              		.cfi_def_cfa_offset 400
 796:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 5158              		.loc 1 796 42 view .LVU1654
 5159 0018 488B5728 		movq	40(%rdi), %rdx
 785:fltk-1.3.4-1/jpeg/jchuff.c ****   const int * natural_order;
 5160              		.loc 1 785 20 view .LVU1655
 5161 001c 4C8BBF30 		movq	560(%rdi), %r15
 5161      020000
 784:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 5162              		.loc 1 784 1 view .LVU1656
 5163 0023 48897C24 		movq	%rdi, 40(%rsp)
 5163      28
 796:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 5164              		.loc 1 796 42 view .LVU1657
 5165 0028 488B12   		movq	(%rdx), %rdx
 784:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 5166              		.loc 1 784 1 view .LVU1658
 5167 002b 64488B0C 		movq	%fs:40, %rcx
 5167      25280000 
 5167      00
 5168 0034 48898C24 		movq	%rcx, 328(%rsp)
 5168      48010000 
 5169 003c 31C9     		xorl	%ecx, %ecx
 785:fltk-1.3.4-1/jpeg/jchuff.c ****   const int * natural_order;
 5170              		.loc 1 785 3 is_stmt 1 view .LVU1659
 5171              	.LVL504:
 786:fltk-1.3.4-1/jpeg/jchuff.c ****   JBLOCKROW block;
 5172              		.loc 1 786 3 view .LVU1660
 787:fltk-1.3.4-1/jpeg/jchuff.c ****   register int temp;
 5173              		.loc 1 787 3 view .LVU1661
 788:fltk-1.3.4-1/jpeg/jchuff.c ****   register int r, k;
 5174              		.loc 1 788 3 view .LVU1662
 789:fltk-1.3.4-1/jpeg/jchuff.c ****   int Se, Al;
 5175              		.loc 1 789 3 view .LVU1663
 790:fltk-1.3.4-1/jpeg/jchuff.c ****   int EOB;
 5176              		.loc 1 790 3 view .LVU1664
 791:fltk-1.3.4-1/jpeg/jchuff.c ****   char *BR_buffer;
 5177              		.loc 1 791 3 view .LVU1665
 792:fltk-1.3.4-1/jpeg/jchuff.c ****   unsigned int BR;
 5178              		.loc 1 792 3 view .LVU1666
 793:fltk-1.3.4-1/jpeg/jchuff.c ****   int absvalues[DCTSIZE2];
 5179              		.loc 1 793 3 view .LVU1667
 794:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5180              		.loc 1 794 3 view .LVU1668
 796:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 5181              		.loc 1 796 3 view .LVU1669
 796:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 5182              		.loc 1 796 29 is_stmt 0 view .LVU1670
 5183 003e 498997C8 		movq	%rdx, 200(%r15)
 5183      000000
 797:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5184              		.loc 1 797 3 is_stmt 1 view .LVU1671
 797:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5185              		.loc 1 797 40 is_stmt 0 view .LVU1672
 5186 0045 488B5728 		movq	40(%rdi), %rdx
 5187 0049 488B5208 		movq	8(%rdx), %rdx
 797:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5188              		.loc 1 797 27 view .LVU1673
 5189 004d 498997D0 		movq	%rdx, 208(%r15)
 5189      000000
 800:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 5190              		.loc 1 800 3 is_stmt 1 view .LVU1674
 800:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 5191              		.loc 1 800 6 is_stmt 0 view .LVU1675
 5192 0054 8BAF3C01 		movl	316(%rdi), %ebp
 5192      0000
 5193 005a 85ED     		testl	%ebp, %ebp
 5194 005c 740D     		je	.L436
 801:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_restart_e(entropy, entropy->next_restart_num);
 5195              		.loc 1 801 5 is_stmt 1 view .LVU1676
 801:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_restart_e(entropy, entropy->next_restart_num);
 5196              		.loc 1 801 8 is_stmt 0 view .LVU1677
 5197 005e 458B5F38 		movl	56(%r15), %r11d
 5198 0062 4585DB   		testl	%r11d, %r11d
 5199 0065 0F842D06 		je	.L520
 5199      0000
 5200              	.LVL505:
 5201              	.L436:
 804:fltk-1.3.4-1/jpeg/jchuff.c ****   Al = cinfo->Al;
 5202              		.loc 1 804 3 is_stmt 1 view .LVU1678
 804:fltk-1.3.4-1/jpeg/jchuff.c ****   Al = cinfo->Al;
 5203              		.loc 1 804 6 is_stmt 0 view .LVU1679
 5204 006b 488B4424 		movq	40(%rsp), %rax
 5204      28
 809:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5205              		.loc 1 809 9 view .LVU1680
 5206 0070 4C8B03   		movq	(%rbx), %r8
 804:fltk-1.3.4-1/jpeg/jchuff.c ****   Al = cinfo->Al;
 5207              		.loc 1 804 6 view .LVU1681
 5208 0073 8BB8D001 		movl	464(%rax), %edi
 5208      0000
 806:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5209              		.loc 1 806 17 view .LVU1682
 5210 0079 4C8B90E0 		movq	480(%rax), %r10
 5210      010000
 809:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5211              		.loc 1 809 9 view .LVU1683
 5212 0080 4C894424 		movq	%r8, 56(%rsp)
 5212      38
 815:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = (*block)[natural_order[k]];
 5213              		.loc 1 815 10 view .LVU1684
 5214 0085 8B90CC01 		movl	460(%rax), %edx
 5214      0000
 805:fltk-1.3.4-1/jpeg/jchuff.c ****   natural_order = cinfo->natural_order;
 5215              		.loc 1 805 6 view .LVU1685
 5216 008b 8B88D801 		movl	472(%rax), %ecx
 5216      0000
 804:fltk-1.3.4-1/jpeg/jchuff.c ****   Al = cinfo->Al;
 5217              		.loc 1 804 6 view .LVU1686
 5218 0091 897C2420 		movl	%edi, 32(%rsp)
 5219              	.LVL506:
 805:fltk-1.3.4-1/jpeg/jchuff.c ****   natural_order = cinfo->natural_order;
 5220              		.loc 1 805 3 is_stmt 1 view .LVU1687
 806:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5221              		.loc 1 806 3 view .LVU1688
 804:fltk-1.3.4-1/jpeg/jchuff.c ****   Al = cinfo->Al;
 5222              		.loc 1 804 6 is_stmt 0 view .LVU1689
 5223 0095 4189F9   		movl	%edi, %r9d
 806:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5224              		.loc 1 806 17 view .LVU1690
 5225 0098 4C895424 		movq	%r10, 48(%rsp)
 5225      30
 5226              	.LVL507:
 809:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5227              		.loc 1 809 3 is_stmt 1 view .LVU1691
 814:fltk-1.3.4-1/jpeg/jchuff.c ****   for (k = cinfo->Ss; k <= Se; k++) {
 5228              		.loc 1 814 3 view .LVU1692
 815:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = (*block)[natural_order[k]];
 5229              		.loc 1 815 3 view .LVU1693
 815:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = (*block)[natural_order[k]];
 5230              		.loc 1 815 23 view .LVU1694
 815:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = (*block)[natural_order[k]];
 5231              		.loc 1 815 3 is_stmt 0 view .LVU1695
 5232 009d 39D7     		cmpl	%edx, %edi
 5233 009f 0F8CA002 		jl	.L438
 5233      0000
 5234 00a5 4863C2   		movslq	%edx, %rax
 5235 00a8 4C8D5C24 		leaq	64(%rsp), %r11
 5235      40
 814:fltk-1.3.4-1/jpeg/jchuff.c ****   for (k = cinfo->Ss; k <= Se; k++) {
 5236              		.loc 1 814 7 view .LVU1696
 5237 00ad 31FF     		xorl	%edi, %edi
 5238              	.LVL508:
 814:fltk-1.3.4-1/jpeg/jchuff.c ****   for (k = cinfo->Ss; k <= Se; k++) {
 5239              		.loc 1 814 7 view .LVU1697
 5240 00af 48890424 		movq	%rax, (%rsp)
 815:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = (*block)[natural_order[k]];
 5241              		.loc 1 815 3 view .LVU1698
 5242 00b3 4889C6   		movq	%rax, %rsi
 5243 00b6 4C895C24 		movq	%r11, 24(%rsp)
 5243      18
 5244              	.LVL509:
 5245 00bb 0F1F4400 		.p2align 4,,10
 5245      00
 5246              		.p2align 3
 5247              	.L440:
 816:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We must apply the point transform by Al.  For AC coefficients this
 5248              		.loc 1 816 5 is_stmt 1 view .LVU1699
 821:fltk-1.3.4-1/jpeg/jchuff.c ****       temp = -temp;		/* temp is abs value of input */
 5249              		.loc 1 821 5 view .LVU1700
 816:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We must apply the point transform by Al.  For AC coefficients this
 5250              		.loc 1 816 20 is_stmt 0 view .LVU1701
 5251 00c0 496304B2 		movslq	(%r10,%rsi,4), %rax
 5252 00c4 410FB714 		movzwl	(%r8,%rax,2), %edx
 5252      40
 5253 00c9 410FB71C 		movzwl	(%r8,%rax,2), %ebx
 5253      40
 5254 00ce 66C1FA0F 		sarw	$15, %dx
 5255 00d2 31D3     		xorl	%edx, %ebx
 5256 00d4 89D8     		movl	%ebx, %eax
 5257 00d6 29D0     		subl	%edx, %eax
 5258 00d8 0FB7C0   		movzwl	%ax, %eax
 5259              	.LVL510:
 823:fltk-1.3.4-1/jpeg/jchuff.c ****     absvalues[k] = temp;	/* save abs value for main pass */
 5260              		.loc 1 823 5 is_stmt 1 view .LVU1702
 823:fltk-1.3.4-1/jpeg/jchuff.c ****     absvalues[k] = temp;	/* save abs value for main pass */
 5261              		.loc 1 823 10 is_stmt 0 view .LVU1703
 5262 00db D3F8     		sarl	%cl, %eax
 5263              	.LVL511:
 824:fltk-1.3.4-1/jpeg/jchuff.c ****     if (temp == 1)
 5264              		.loc 1 824 5 is_stmt 1 view .LVU1704
 825:fltk-1.3.4-1/jpeg/jchuff.c ****       EOB = k;			/* EOB = index of last newly-nonzero coef */
 5265              		.loc 1 825 8 is_stmt 0 view .LVU1705
 5266 00dd 83F801   		cmpl	$1, %eax
 824:fltk-1.3.4-1/jpeg/jchuff.c ****     if (temp == 1)
 5267              		.loc 1 824 18 view .LVU1706
 5268 00e0 418904B3 		movl	%eax, (%r11,%rsi,4)
 825:fltk-1.3.4-1/jpeg/jchuff.c ****       EOB = k;			/* EOB = index of last newly-nonzero coef */
 5269              		.loc 1 825 5 is_stmt 1 view .LVU1707
 825:fltk-1.3.4-1/jpeg/jchuff.c ****       EOB = k;			/* EOB = index of last newly-nonzero coef */
 5270              		.loc 1 825 8 is_stmt 0 view .LVU1708
 5271 00e4 0F44FE   		cmove	%esi, %edi
 5272              	.LVL512:
 815:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = (*block)[natural_order[k]];
 5273              		.loc 1 815 32 is_stmt 1 view .LVU1709
 815:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = (*block)[natural_order[k]];
 5274              		.loc 1 815 23 view .LVU1710
 5275 00e7 4883C601 		addq	$1, %rsi
 5276              	.LVL513:
 815:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = (*block)[natural_order[k]];
 5277              		.loc 1 815 3 is_stmt 0 view .LVU1711
 5278 00eb 4139F1   		cmpl	%esi, %r9d
 5279 00ee 7DD0     		jge	.L440
 833:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5280              		.loc 1 833 44 view .LVU1712
 5281 00f0 458BB7E8 		movl	232(%r15), %r14d
 5281      000000
 5282 00f7 897C2424 		movl	%edi, 36(%rsp)
 831:fltk-1.3.4-1/jpeg/jchuff.c ****   BR = 0;			/* BR = count of buffered bits added now */
 5283              		.loc 1 831 3 is_stmt 1 view .LVU1713
 5284              	.LVL514:
 832:fltk-1.3.4-1/jpeg/jchuff.c ****   BR_buffer = entropy->bit_buffer + entropy->BE; /* Append bits to buffer */
 5285              		.loc 1 832 3 view .LVU1714
 833:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5286              		.loc 1 833 3 view .LVU1715
 833:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5287              		.loc 1 833 13 is_stmt 0 view .LVU1716
 5288 00fb 4531ED   		xorl	%r13d, %r13d
 5289 00fe C7442408 		movl	$0, 8(%rsp)
 5289      00000000 
 5290 0106 4D03B7F0 		addq	240(%r15), %r14
 5290      000000
 5291              	.LVL515:
 835:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = absvalues[k]) == 0) {
 5292              		.loc 1 835 3 is_stmt 1 view .LVU1717
 835:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = absvalues[k]) == 0) {
 5293              		.loc 1 835 23 view .LVU1718
 5294 010d EB19     		jmp	.L478
 5295              	.LVL516:
 5296 010f 90       		.p2align 4,,10
 5297              		.p2align 3
 5298              	.L442:
 837:fltk-1.3.4-1/jpeg/jchuff.c ****       continue;
 5299              		.loc 1 837 7 view .LVU1719
 837:fltk-1.3.4-1/jpeg/jchuff.c ****       continue;
 5300              		.loc 1 837 8 is_stmt 0 view .LVU1720
 5301 0110 83442408 		addl	$1, 8(%rsp)
 5301      01
 5302              	.LVL517:
 838:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5303              		.loc 1 838 7 is_stmt 1 view .LVU1721
 5304              	.L446:
 835:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = absvalues[k]) == 0) {
 5305              		.loc 1 835 32 discriminator 2 view .LVU1722
 835:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = absvalues[k]) == 0) {
 5306              		.loc 1 835 23 discriminator 2 view .LVU1723
 5307 0115 48830424 		addq	$1, (%rsp)
 5307      01
 5308              	.LVL518:
 835:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = absvalues[k]) == 0) {
 5309              		.loc 1 835 23 is_stmt 0 discriminator 2 view .LVU1724
 5310 011a 488B0424 		movq	(%rsp), %rax
 835:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = absvalues[k]) == 0) {
 5311              		.loc 1 835 3 discriminator 2 view .LVU1725
 5312 011e 39442420 		cmpl	%eax, 32(%rsp)
 5313 0122 0F8C0802 		jl	.L521
 5313      0000
 5314              	.LVL519:
 5315              	.L478:
 836:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 5316              		.loc 1 836 5 is_stmt 1 view .LVU1726
 836:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 5317              		.loc 1 836 15 is_stmt 0 view .LVU1727
 5318 0128 488B4424 		movq	24(%rsp), %rax
 5318      18
 5319 012d 488B0C24 		movq	(%rsp), %rcx
 5320 0131 8B0488   		movl	(%rax,%rcx,4), %eax
 5321 0134 89442410 		movl	%eax, 16(%rsp)
 5322              	.LVL520:
 836:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 5323              		.loc 1 836 8 view .LVU1728
 5324 0138 85C0     		testl	%eax, %eax
 5325 013a 74D4     		je	.L442
 842:fltk-1.3.4-1/jpeg/jchuff.c ****       /* emit any pending EOBRUN and the BE correction bits */
 5326              		.loc 1 842 11 is_stmt 1 view .LVU1729
 5327 013c 8B442408 		movl	8(%rsp), %eax
 5328              	.LVL521:
 842:fltk-1.3.4-1/jpeg/jchuff.c ****       /* emit any pending EOBRUN and the BE correction bits */
 5329              		.loc 1 842 11 is_stmt 0 view .LVU1730
 5330 0140 83F80F   		cmpl	$15, %eax
 5331 0143 0F8E4705 		jle	.L490
 5331      0000
 5332 0149 89C3     		movl	%eax, %ebx
 5333 014b 394C2424 		cmpl	%ecx, 36(%rsp)
 5334 014f 7D4C     		jge	.L443
 5335 0151 E93A0500 		jmp	.L490
 5335      00
 5336              	.LVL522:
 5337 0156 662E0F1F 		.p2align 4,,10
 5337      84000000 
 5337      0000
 5338              		.p2align 3
 5339              	.L523:
 5340              	.LBB390:
 5341              	.LBB391:
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 5342              		.loc 1 432 5 is_stmt 1 view .LVU1731
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 5343              		.loc 1 432 27 is_stmt 0 view .LVU1732
 5344 0160 498B84C7 		movq	160(%r15,%rax,8), %rax
 5344      A0000000 
 5345              	.LVL523:
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 5346              		.loc 1 432 43 view .LVU1733
 5347 0168 48838080 		addq	$1, 1920(%rax)
 5347      07000001 
 5348              	.LVL524:
 5349              	.L448:
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 5350              		.loc 1 432 43 view .LVU1734
 5351              	.LBE391:
 5352              	.LBE390:
 847:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Emit buffered correction bits that must be associated with ZRL */
 5353              		.loc 1 847 7 is_stmt 1 view .LVU1735
 849:fltk-1.3.4-1/jpeg/jchuff.c ****       BR_buffer = entropy->bit_buffer; /* BE bits are gone now */
 5354              		.loc 1 849 7 view .LVU1736
 5355              	.LBB403:
 5356              	.LBI403:
 445:fltk-1.3.4-1/jpeg/jchuff.c **** 		    unsigned int nbits)
 5357              		.loc 1 445 1 view .LVU1737
 5358              	.LBB404:
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 5359              		.loc 1 448 3 view .LVU1738
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 5360              		.loc 1 448 6 is_stmt 0 view .LVU1739
 5361 0170 458B87C0 		movl	192(%r15), %r8d
 5361      000000
 5362 0177 4585C0   		testl	%r8d, %r8d
 5363 017a 750E     		jne	.L453
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 5364              		.loc 1 448 6 view .LVU1740
 5365 017c 4489EA   		movl	%r13d, %edx
 5366 017f 4C89F6   		movq	%r14, %rsi
 5367 0182 4C89FF   		movq	%r15, %rdi
 5368 0185 E8000000 		call	emit_buffered_bits.part.0
 5368      00
 5369              	.LVL525:
 5370              	.L453:
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 5371              		.loc 1 448 6 view .LVU1741
 5372              	.LBE404:
 5373              	.LBE403:
 850:fltk-1.3.4-1/jpeg/jchuff.c ****       BR = 0;
 5374              		.loc 1 850 7 is_stmt 1 view .LVU1742
 850:fltk-1.3.4-1/jpeg/jchuff.c ****       BR = 0;
 5375              		.loc 1 850 17 is_stmt 0 view .LVU1743
 5376 018a 4D8BB7F0 		movq	240(%r15), %r14
 5376      000000
 5377              	.LVL526:
 851:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5378              		.loc 1 851 7 is_stmt 1 view .LVU1744
 842:fltk-1.3.4-1/jpeg/jchuff.c ****       /* emit any pending EOBRUN and the BE correction bits */
 5379              		.loc 1 842 11 view .LVU1745
 851:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5380              		.loc 1 851 10 is_stmt 0 view .LVU1746
 5381 0191 4531ED   		xorl	%r13d, %r13d
 842:fltk-1.3.4-1/jpeg/jchuff.c ****       /* emit any pending EOBRUN and the BE correction bits */
 5382              		.loc 1 842 11 view .LVU1747
 5383 0194 83FB0F   		cmpl	$15, %ebx
 5384 0197 0F8E4301 		jle	.L522
 5384      0000
 5385              	.LVL527:
 5386              	.L443:
 844:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Emit ZRL */
 5387              		.loc 1 844 7 is_stmt 1 view .LVU1748
 5388 019d 4C89FF   		movq	%r15, %rdi
 5389 01a0 83EB10   		subl	$16, %ebx
 5390              	.LVL528:
 844:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Emit ZRL */
 5391              		.loc 1 844 7 is_stmt 0 view .LVU1749
 5392 01a3 E8000000 		call	emit_eobrun
 5392      00
 5393              	.LVL529:
 846:fltk-1.3.4-1/jpeg/jchuff.c ****       r -= 16;
 5394              		.loc 1 846 7 is_stmt 1 view .LVU1750
 5395              	.LBB405:
 5396              	.LBB401:
 431:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 5397              		.loc 1 431 6 is_stmt 0 view .LVU1751
 5398 01a8 458B97C0 		movl	192(%r15), %r10d
 5398      000000
 5399              	.LBE401:
 5400              	.LBE405:
 846:fltk-1.3.4-1/jpeg/jchuff.c ****       r -= 16;
 5401              		.loc 1 846 7 view .LVU1752
 5402 01af 496387E0 		movslq	224(%r15), %rax
 5402      000000
 5403              	.LVL530:
 5404              	.LBB406:
 5405              	.LBI390:
 429:fltk-1.3.4-1/jpeg/jchuff.c **** {
 5406              		.loc 1 429 1 is_stmt 1 view .LVU1753
 5407              	.LBB402:
 431:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 5408              		.loc 1 431 3 view .LVU1754
 431:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 5409              		.loc 1 431 6 is_stmt 0 view .LVU1755
 5410 01b6 4585D2   		testl	%r10d, %r10d
 5411 01b9 75A5     		jne	.L523
 5412              	.LVL531:
 5413              	.LBB392:
 5414              	.LBI392:
 429:fltk-1.3.4-1/jpeg/jchuff.c **** {
 5415              		.loc 1 429 1 is_stmt 1 view .LVU1756
 5416              	.LBB393:
 434:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 5417              		.loc 1 434 5 view .LVU1757
 434:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 5418              		.loc 1 434 21 is_stmt 0 view .LVU1758
 5419 01bb 498B44C7 		movq	96(%r15,%rax,8), %rax
 5419      60
 5420              	.LVL532:
 435:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5421              		.loc 1 435 5 is_stmt 1 view .LVU1759
 5422 01c0 0FB6A8F0 		movzbl	1264(%rax), %ebp
 5422      040000
 5423 01c7 448BA0C0 		movl	960(%rax), %r12d
 5423      030000
 5424              	.LVL533:
 5425              	.LBB394:
 5426              	.LBI394:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 5427              		.loc 1 349 1 view .LVU1760
 5428              	.LBB395:
 353:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 5429              		.loc 1 353 3 view .LVU1761
 354:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5430              		.loc 1 354 3 view .LVU1762
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 5431              		.loc 1 357 3 view .LVU1763
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 5432              		.loc 1 357 6 is_stmt 0 view .LVU1764
 5433 01ce 85ED     		testl	%ebp, %ebp
 5434 01d0 7529     		jne	.L452
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5435              		.loc 1 358 5 is_stmt 1 view .LVU1765
 5436 01d2 498B87D8 		movq	216(%r15), %rax
 5436      000000
 5437              	.LVL534:
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5438              		.loc 1 358 5 is_stmt 0 view .LVU1766
 5439 01d9 488B00   		movq	(%rax), %rax
 5440 01dc C7402829 		movl	$41, 40(%rax)
 5440      000000
 5441              	.LVL535:
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5442              		.loc 1 358 5 view .LVU1767
 5443 01e3 498BBFD8 		movq	216(%r15), %rdi
 5443      000000
 5444 01ea 488B07   		movq	(%rdi), %rax
 5445 01ed FF10     		call	*(%rax)
 5446              	.LVL536:
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 5447              		.loc 1 360 3 is_stmt 1 view .LVU1768
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 5448              		.loc 1 360 6 is_stmt 0 view .LVU1769
 5449 01ef 458B8FC0 		movl	192(%r15), %r9d
 5449      000000
 5450 01f6 4585C9   		testl	%r9d, %r9d
 5451 01f9 758F     		jne	.L453
 5452              	.L452:
 5453              	.LVL537:
 5454              	.LBB396:
 5455              	.LBI396:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 5456              		.loc 1 349 1 is_stmt 1 view .LVU1770
 5457              	.LBB397:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5458              		.loc 1 364 3 view .LVU1771
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5459              		.loc 1 364 47 is_stmt 0 view .LVU1772
 5460 01fb 89E9     		movl	%ebp, %ecx
 5461 01fd B8010000 		movl	$1, %eax
 5461      00
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5462              		.loc 1 367 12 view .LVU1773
 5463 0202 41036F20 		addl	32(%r15), %ebp
 5464              	.LVL538:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5465              		.loc 1 364 47 view .LVU1774
 5466 0206 48D3E0   		salq	%cl, %rax
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5467              		.loc 1 369 21 view .LVU1775
 5468 0209 B9180000 		movl	$24, %ecx
 5468      00
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5469              		.loc 1 367 12 view .LVU1776
 5470 020e 896C240C 		movl	%ebp, 12(%rsp)
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5471              		.loc 1 364 56 view .LVU1777
 5472 0212 4883E801 		subq	$1, %rax
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5473              		.loc 1 369 21 view .LVU1778
 5474 0216 29E9     		subl	%ebp, %ecx
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5475              		.loc 1 364 14 view .LVU1779
 5476 0218 4121C4   		andl	%eax, %r12d
 5477              	.LVL539:
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5478              		.loc 1 367 3 is_stmt 1 view .LVU1780
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5479              		.loc 1 369 3 view .LVU1781
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5480              		.loc 1 369 14 is_stmt 0 view .LVU1782
 5481 021b 49D3E4   		salq	%cl, %r12
 5482              	.LVL540:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5483              		.loc 1 372 3 is_stmt 1 view .LVU1783
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5484              		.loc 1 372 14 is_stmt 0 view .LVU1784
 5485 021e 4D0B6718 		orq	24(%r15), %r12
 5486              	.LVL541:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 5487              		.loc 1 374 3 is_stmt 1 view .LVU1785
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 5488              		.loc 1 374 9 view .LVU1786
 5489 0222 83FD07   		cmpl	$7, %ebp
 5490 0225 0F8E8E00 		jle	.L451
 5490      0000
 5491 022b 895C2414 		movl	%ebx, 20(%rsp)
 5492 022f EB13     		jmp	.L450
 5493              	.LVL542:
 5494              		.p2align 4,,10
 5495 0231 0F1F8000 		.p2align 3
 5495      000000
 5496              	.L456:
 5497              	.LBB398:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5498              		.loc 1 379 30 view .LVU1787
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 5499              		.loc 1 381 5 view .LVU1788
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5500              		.loc 1 382 14 is_stmt 0 view .LVU1789
 5501 0238 83ED08   		subl	$8, %ebp
 5502              	.LVL543:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 5503              		.loc 1 381 16 view .LVU1790
 5504 023b 49C1E408 		salq	$8, %r12
 5505              	.LVL544:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5506              		.loc 1 382 5 is_stmt 1 view .LVU1791
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5507              		.loc 1 382 5 is_stmt 0 view .LVU1792
 5508              	.LBE398:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 5509              		.loc 1 374 9 is_stmt 1 view .LVU1793
 5510 023f 83FD07   		cmpl	$7, %ebp
 5511 0242 7E6C     		jle	.L524
 5512              	.LVL545:
 5513              	.L450:
 5514              	.LBB399:
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5515              		.loc 1 375 5 view .LVU1794
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5516              		.loc 1 377 5 is_stmt 0 view .LVU1795
 5517 0244 498B87C8 		movq	200(%r15), %rax
 5517      000000
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5518              		.loc 1 375 32 view .LVU1796
 5519 024b 4C89E2   		movq	%r12, %rdx
 5520 024e 48C1FA10 		sarq	$16, %rdx
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5521              		.loc 1 377 5 view .LVU1797
 5522 0252 488D7001 		leaq	1(%rax), %rsi
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5523              		.loc 1 375 9 view .LVU1798
 5524 0256 0FB6DA   		movzbl	%dl, %ebx
 5525              	.LVL546:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5526              		.loc 1 377 5 is_stmt 1 view .LVU1799
 5527 0259 4989B7C8 		movq	%rsi, 200(%r15)
 5527      000000
 5528 0260 8810     		movb	%dl, (%rax)
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5529              		.loc 1 377 5 view .LVU1800
 5530 0262 4983AFD0 		subq	$1, 208(%r15)
 5530      00000001 
 5531 026a 7464     		je	.L525
 5532              	.L454:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5533              		.loc 1 377 28 view .LVU1801
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 5534              		.loc 1 378 5 view .LVU1802
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 5535              		.loc 1 378 8 is_stmt 0 view .LVU1803
 5536 026c 81FBFF00 		cmpl	$255, %ebx
 5536      0000
 5537 0272 75C4     		jne	.L456
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5538              		.loc 1 379 7 is_stmt 1 view .LVU1804
 5539 0274 498B87C8 		movq	200(%r15), %rax
 5539      000000
 5540 027b 488D5001 		leaq	1(%rax), %rdx
 5541 027f 498997C8 		movq	%rdx, 200(%r15)
 5541      000000
 5542 0286 C60000   		movb	$0, (%rax)
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5543              		.loc 1 379 7 view .LVU1805
 5544 0289 4983AFD0 		subq	$1, 208(%r15)
 5544      00000001 
 5545 0291 75A5     		jne	.L456
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5546              		.loc 1 379 7 view .LVU1806
 5547 0293 4C89FF   		movq	%r15, %rdi
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5548              		.loc 1 382 14 is_stmt 0 view .LVU1807
 5549 0296 83ED08   		subl	$8, %ebp
 5550              	.LVL547:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 5551              		.loc 1 381 16 view .LVU1808
 5552 0299 49C1E408 		salq	$8, %r12
 5553              	.LVL548:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5554              		.loc 1 379 7 view .LVU1809
 5555 029d E8000000 		call	dump_buffer_e
 5555      00
 5556              	.LVL549:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5557              		.loc 1 379 30 is_stmt 1 view .LVU1810
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 5558              		.loc 1 381 5 view .LVU1811
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5559              		.loc 1 382 5 view .LVU1812
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5560              		.loc 1 382 5 is_stmt 0 view .LVU1813
 5561              	.LBE399:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 5562              		.loc 1 374 9 is_stmt 1 view .LVU1814
 5563 02a2 83FD07   		cmpl	$7, %ebp
 5564 02a5 7F9D     		jg	.L450
 5565 02a7 660F1F84 		.p2align 4,,10
 5565      00000000 
 5565      00
 5566              		.p2align 3
 5567              	.L524:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 5568              		.loc 1 374 9 is_stmt 0 view .LVU1815
 5569 02b0 8364240C 		andl	$7, 12(%rsp)
 5569      07
 5570 02b5 8B5C2414 		movl	20(%rsp), %ebx
 5571              	.LVL550:
 5572              	.L451:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 5573              		.loc 1 385 3 is_stmt 1 view .LVU1816
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 5574              		.loc 1 386 27 is_stmt 0 view .LVU1817
 5575 02b9 8B44240C 		movl	12(%rsp), %eax
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 5576              		.loc 1 385 29 view .LVU1818
 5577 02bd 4D896718 		movq	%r12, 24(%r15)
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 5578              		.loc 1 386 3 is_stmt 1 view .LVU1819
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 5579              		.loc 1 386 27 is_stmt 0 view .LVU1820
 5580 02c1 41894720 		movl	%eax, 32(%r15)
 5581 02c5 E9A6FEFF 		jmp	.L448
 5581      FF
 5582              	.LVL551:
 5583 02ca 660F1F44 		.p2align 4,,10
 5583      0000
 5584              		.p2align 3
 5585              	.L525:
 5586              	.LBB400:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5587              		.loc 1 377 5 is_stmt 1 view .LVU1821
 5588 02d0 4C89FF   		movq	%r15, %rdi
 5589 02d3 E8000000 		call	dump_buffer_e
 5589      00
 5590              	.LVL552:
 5591 02d8 EB92     		jmp	.L454
 5592              	.LVL553:
 5593 02da 660F1F44 		.p2align 4,,10
 5593      0000
 5594              		.p2align 3
 5595              	.L522:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5596              		.loc 1 377 5 is_stmt 0 view .LVU1822
 5597 02e0 8B442408 		movl	8(%rsp), %eax
 5598 02e4 41BC0000 		movl	$0, %r12d
 5598      0000
 5599 02ea 8D48F0   		leal	-16(%rax), %ecx
 5600 02ed 89CA     		movl	%ecx, %edx
 5601 02ef 83E2F0   		andl	$-16, %edx
 5602 02f2 F7DA     		negl	%edx
 5603 02f4 83F80F   		cmpl	$15, %eax
 5604 02f7 440F4FE2 		cmovg	%edx, %r12d
 5605              	.LBE400:
 5606              	.LBE397:
 5607              	.LBE396:
 5608              	.LBE395:
 5609              	.LBE394:
 5610              	.LBE393:
 5611              	.LBE392:
 5612              	.LBE402:
 5613              	.LBE406:
 851:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5614              		.loc 1 851 10 view .LVU1823
 5615 02fb 31DB     		xorl	%ebx, %ebx
 5616              	.LVL554:
 851:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5617              		.loc 1 851 10 view .LVU1824
 5618 02fd 418D040C 		leal	(%r12,%rcx), %eax
 5619 0301 89442408 		movl	%eax, 8(%rsp)
 5620              	.LVL555:
 5621              	.L445:
 859:fltk-1.3.4-1/jpeg/jchuff.c ****       /* The correction bit is the next bit of the absolute value. */
 5622              		.loc 1 859 5 is_stmt 1 view .LVU1825
 859:fltk-1.3.4-1/jpeg/jchuff.c ****       /* The correction bit is the next bit of the absolute value. */
 5623              		.loc 1 859 8 is_stmt 0 view .LVU1826
 5624 0305 8B442410 		movl	16(%rsp), %eax
 5625 0309 83F801   		cmpl	$1, %eax
 5626 030c 0F8EAE00 		jle	.L459
 5626      0000
 861:fltk-1.3.4-1/jpeg/jchuff.c ****       continue;
 5627              		.loc 1 861 7 is_stmt 1 view .LVU1827
 861:fltk-1.3.4-1/jpeg/jchuff.c ****       continue;
 5628              		.loc 1 861 25 is_stmt 0 view .LVU1828
 5629 0312 83E001   		andl	$1, %eax
 5630 0315 48830424 		addq	$1, (%rsp)
 5630      01
 5631              	.LVL556:
 861:fltk-1.3.4-1/jpeg/jchuff.c ****       continue;
 5632              		.loc 1 861 19 view .LVU1829
 5633 031a 448D6B01 		leal	1(%rbx), %r13d
 5634              	.LVL557:
 861:fltk-1.3.4-1/jpeg/jchuff.c ****       continue;
 5635              		.loc 1 861 25 view .LVU1830
 5636 031e 4188041E 		movb	%al, (%r14,%rbx)
 862:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5637              		.loc 1 862 7 is_stmt 1 view .LVU1831
 5638              	.LVL558:
 835:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = absvalues[k]) == 0) {
 5639              		.loc 1 835 32 view .LVU1832
 835:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = absvalues[k]) == 0) {
 5640              		.loc 1 835 23 view .LVU1833
 5641 0322 488B0424 		movq	(%rsp), %rax
 835:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = absvalues[k]) == 0) {
 5642              		.loc 1 835 3 is_stmt 0 view .LVU1834
 5643 0326 39442420 		cmpl	%eax, 32(%rsp)
 5644 032a 0F8DF8FD 		jge	.L478
 5644      FFFF
 5645              	.LVL559:
 5646              	.L521:
 882:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->EOBRUN++;		/* count an EOB */
 5647              		.loc 1 882 3 is_stmt 1 view .LVU1835
 882:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->EOBRUN++;		/* count an EOB */
 5648              		.loc 1 882 6 is_stmt 0 view .LVU1836
 5649 0330 8B442408 		movl	8(%rsp), %eax
 5650 0334 85C0     		testl	%eax, %eax
 5651 0336 0F8FEC01 		jg	.L491
 5651      0000
 5652 033c 4585ED   		testl	%r13d, %r13d
 5653 033f 0F85E301 		jne	.L491
 5653      0000
 5654              	.LVL560:
 5655              	.L438:
 893:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 5656              		.loc 1 893 3 is_stmt 1 view .LVU1837
 893:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 5657              		.loc 1 893 8 is_stmt 0 view .LVU1838
 5658 0345 488B4424 		movq	40(%rsp), %rax
 5658      28
 893:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 5659              		.loc 1 893 42 view .LVU1839
 5660 034a 498B8FC8 		movq	200(%r15), %rcx
 5660      000000
 893:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 5661              		.loc 1 893 8 view .LVU1840
 5662 0351 488B5028 		movq	40(%rax), %rdx
 893:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 5663              		.loc 1 893 33 view .LVU1841
 5664 0355 48890A   		movq	%rcx, (%rdx)
 894:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5665              		.loc 1 894 3 is_stmt 1 view .LVU1842
 894:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5666              		.loc 1 894 40 is_stmt 0 view .LVU1843
 5667 0358 498B8FD0 		movq	208(%r15), %rcx
 5667      000000
 894:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5668              		.loc 1 894 8 view .LVU1844
 5669 035f 488B5028 		movq	40(%rax), %rdx
 894:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5670              		.loc 1 894 31 view .LVU1845
 5671 0363 48894A08 		movq	%rcx, 8(%rdx)
 897:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 5672              		.loc 1 897 3 is_stmt 1 view .LVU1846
 897:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 5673              		.loc 1 897 12 is_stmt 0 view .LVU1847
 5674 0367 8B883C01 		movl	316(%rax), %ecx
 5674      0000
 897:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 5675              		.loc 1 897 6 view .LVU1848
 5676 036d 85C9     		testl	%ecx, %ecx
 5677 036f 741F     		je	.L482
 898:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 5678              		.loc 1 898 5 is_stmt 1 view .LVU1849
 898:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 5679              		.loc 1 898 16 is_stmt 0 view .LVU1850
 5680 0371 418B5738 		movl	56(%r15), %edx
 898:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 5681              		.loc 1 898 8 view .LVU1851
 5682 0375 85D2     		testl	%edx, %edx
 5683 0377 7510     		jne	.L483
 899:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num++;
 5684              		.loc 1 899 7 is_stmt 1 view .LVU1852
 900:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num &= 7;
 5685              		.loc 1 900 7 view .LVU1853
 901:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5686              		.loc 1 901 7 view .LVU1854
 900:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num &= 7;
 5687              		.loc 1 900 32 is_stmt 0 view .LVU1855
 5688 0379 418B473C 		movl	60(%r15), %eax
 5689 037d 8D5001   		leal	1(%rax), %edx
 901:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5690              		.loc 1 901 33 view .LVU1856
 5691 0380 83E207   		andl	$7, %edx
 5692 0383 4189573C 		movl	%edx, 60(%r15)
 5693 0387 89CA     		movl	%ecx, %edx
 5694              	.L483:
 903:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5695              		.loc 1 903 5 is_stmt 1 view .LVU1857
 903:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5696              		.loc 1 903 28 is_stmt 0 view .LVU1858
 5697 0389 83EA01   		subl	$1, %edx
 5698 038c 41895738 		movl	%edx, 56(%r15)
 5699              	.L482:
 906:fltk-1.3.4-1/jpeg/jchuff.c **** }
 5700              		.loc 1 906 3 is_stmt 1 view .LVU1859
 907:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5701              		.loc 1 907 1 is_stmt 0 view .LVU1860
 5702 0390 488B8424 		movq	328(%rsp), %rax
 5702      48010000 
 5703 0398 64483304 		xorq	%fs:40, %rax
 5703      25280000 
 5703      00
 5704 03a1 0F850F03 		jne	.L526
 5704      0000
 5705 03a7 4881C458 		addq	$344, %rsp
 5705      010000
 5706              		.cfi_remember_state
 5707              		.cfi_def_cfa_offset 56
 5708 03ae B8010000 		movl	$1, %eax
 5708      00
 5709 03b3 5B       		popq	%rbx
 5710              		.cfi_def_cfa_offset 48
 5711 03b4 5D       		popq	%rbp
 5712              		.cfi_def_cfa_offset 40
 5713 03b5 415C     		popq	%r12
 5714              		.cfi_def_cfa_offset 32
 5715 03b7 415D     		popq	%r13
 5716              		.cfi_def_cfa_offset 24
 5717 03b9 415E     		popq	%r14
 5718              		.cfi_def_cfa_offset 16
 5719 03bb 415F     		popq	%r15
 5720              		.cfi_def_cfa_offset 8
 5721              	.LVL561:
 907:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5722              		.loc 1 907 1 view .LVU1861
 5723 03bd C3       		ret
 5724              	.LVL562:
 5725 03be 6690     		.p2align 4,,10
 5726              		.p2align 3
 5727              	.L459:
 5728              		.cfi_restore_state
 866:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5729              		.loc 1 866 5 is_stmt 1 view .LVU1862
 5730 03c0 4C89FF   		movq	%r15, %rdi
 5731 03c3 E8000000 		call	emit_eobrun
 5731      00
 5732              	.LVL563:
 869:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5733              		.loc 1 869 5 view .LVU1863
 869:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5734              		.loc 1 869 52 is_stmt 0 view .LVU1864
 5735 03c8 448B6424 		movl	8(%rsp), %r12d
 5735      08
 5736              	.LBB407:
 5737              	.LBB408:
 431:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 5738              		.loc 1 431 6 view .LVU1865
 5739 03cd 418BBFC0 		movl	192(%r15), %edi
 5739      000000
 5740              	.LBE408:
 5741              	.LBE407:
 869:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5742              		.loc 1 869 5 view .LVU1866
 5743 03d4 496397E0 		movslq	224(%r15), %rdx
 5743      000000
 5744              	.LVL564:
 869:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5745              		.loc 1 869 52 view .LVU1867
 5746 03db 41C1E404 		sall	$4, %r12d
 869:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5747              		.loc 1 869 5 view .LVU1868
 5748 03df 4183C401 		addl	$1, %r12d
 5749              	.LVL565:
 5750              	.LBB420:
 5751              	.LBI407:
 429:fltk-1.3.4-1/jpeg/jchuff.c **** {
 5752              		.loc 1 429 1 is_stmt 1 view .LVU1869
 5753              	.LBB418:
 431:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 5754              		.loc 1 431 3 view .LVU1870
 431:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 5755              		.loc 1 431 6 is_stmt 0 view .LVU1871
 5756 03e3 85FF     		testl	%edi, %edi
 5757 03e5 0F848501 		je	.L460
 5757      0000
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 5758              		.loc 1 432 5 is_stmt 1 view .LVU1872
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 5759              		.loc 1 432 27 is_stmt 0 view .LVU1873
 5760 03eb 4863CA   		movslq	%edx, %rcx
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 5761              		.loc 1 432 35 view .LVU1874
 5762 03ee 4963D4   		movslq	%r12d, %rdx
 5763              	.LVL566:
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 5764              		.loc 1 432 35 view .LVU1875
 5765 03f1 498B8CCF 		movq	160(%r15,%rcx,8), %rcx
 5765      A0000000 
 5766              	.LVL567:
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 5767              		.loc 1 432 43 view .LVU1876
 5768 03f9 488304D1 		addq	$1, (%rcx,%rdx,8)
 5768      01
 5769              	.LVL568:
 5770              	.L461:
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 5771              		.loc 1 432 43 view .LVU1877
 5772              	.LBE418:
 5773              	.LBE420:
 872:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, (unsigned int) temp, 1);
 5774              		.loc 1 872 5 is_stmt 1 view .LVU1878
 873:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5775              		.loc 1 873 5 view .LVU1879
 5776              	.LBB421:
 5777              	.LBI421:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 5778              		.loc 1 349 1 view .LVU1880
 5779              	.LBB422:
 353:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 5780              		.loc 1 353 3 view .LVU1881
 354:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5781              		.loc 1 354 3 view .LVU1882
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 5782              		.loc 1 357 3 view .LVU1883
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 5783              		.loc 1 360 3 view .LVU1884
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 5784              		.loc 1 360 6 is_stmt 0 view .LVU1885
 5785 03fe 418B8FC0 		movl	192(%r15), %ecx
 5785      000000
 5786 0405 85C9     		testl	%ecx, %ecx
 5787 0407 0F85ED00 		jne	.L484
 5787      0000
 5788              	.LVL569:
 5789              	.LBB423:
 5790              	.LBI423:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 5791              		.loc 1 349 1 is_stmt 1 view .LVU1886
 5792              	.LBB424:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5793              		.loc 1 364 3 view .LVU1887
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5794              		.loc 1 367 3 view .LVU1888
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5795              		.loc 1 367 35 is_stmt 0 view .LVU1889
 5796 040d 418B4720 		movl	32(%r15), %eax
 5797              	.LBE424:
 5798              	.LBE423:
 5799              	.LBE422:
 5800              	.LBE421:
 872:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, (unsigned int) temp, 1);
 5801              		.loc 1 872 21 view .LVU1890
 5802 0411 488B0C24 		movq	(%rsp), %rcx
 5803              	.LBB446:
 5804              	.LBB440:
 5805              	.LBB434:
 5806              	.LBB428:
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5807              		.loc 1 367 12 view .LVU1891
 5808 0415 448D6801 		leal	1(%rax), %r13d
 5809              	.LVL570:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5810              		.loc 1 369 3 is_stmt 1 view .LVU1892
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5811              		.loc 1 367 35 is_stmt 0 view .LVU1893
 5812 0419 89442408 		movl	%eax, 8(%rsp)
 5813              	.LVL571:
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5814              		.loc 1 367 35 view .LVU1894
 5815              	.LBE428:
 5816              	.LBE434:
 5817              	.LBE440:
 5818              	.LBE446:
 872:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, (unsigned int) temp, 1);
 5819              		.loc 1 872 21 view .LVU1895
 5820 041d 488B4424 		movq	48(%rsp), %rax
 5820      30
 5821 0422 48631488 		movslq	(%rax,%rcx,4), %rdx
 872:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, (unsigned int) temp, 1);
 5822              		.loc 1 872 49 view .LVU1896
 5823 0426 488B4424 		movq	56(%rsp), %rax
 5823      38
 5824              	.LBB447:
 5825              	.LBB441:
 5826              	.LBB435:
 5827              	.LBB429:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5828              		.loc 1 369 21 view .LVU1897
 5829 042b B9180000 		movl	$24, %ecx
 5829      00
 5830 0430 4429E9   		subl	%r13d, %ecx
 5831              	.LBE429:
 5832              	.LBE435:
 5833              	.LBE441:
 5834              	.LBE447:
 872:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, (unsigned int) temp, 1);
 5835              		.loc 1 872 49 view .LVU1898
 5836 0433 4C0FBF24 		movswq	(%rax,%rdx,2), %r12
 5836      50
 5837 0438 49F7D4   		notq	%r12
 5838 043b 49C1EC3F 		shrq	$63, %r12
 5839              	.LBB448:
 5840              	.LBB442:
 5841              	.LBB436:
 5842              	.LBB430:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5843              		.loc 1 369 14 view .LVU1899
 5844 043f 49D3E4   		salq	%cl, %r12
 5845              	.LVL572:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5846              		.loc 1 372 3 is_stmt 1 view .LVU1900
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5847              		.loc 1 372 14 is_stmt 0 view .LVU1901
 5848 0442 4D0B6718 		orq	24(%r15), %r12
 5849              	.LVL573:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 5850              		.loc 1 374 3 is_stmt 1 view .LVU1902
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 5851              		.loc 1 374 9 view .LVU1903
 5852 0446 4183FD07 		cmpl	$7, %r13d
 5853 044a 7F1A     		jg	.L476
 5854 044c E9580200 		jmp	.L471
 5854      00
 5855              	.LVL574:
 5856              		.p2align 4,,10
 5857 0451 0F1F8000 		.p2align 3
 5857      000000
 5858              	.L474:
 5859              	.LBB425:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5860              		.loc 1 379 30 view .LVU1904
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 5861              		.loc 1 381 5 view .LVU1905
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5862              		.loc 1 382 14 is_stmt 0 view .LVU1906
 5863 0458 4183ED08 		subl	$8, %r13d
 5864              	.LVL575:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 5865              		.loc 1 381 16 view .LVU1907
 5866 045c 49C1E408 		salq	$8, %r12
 5867              	.LVL576:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5868              		.loc 1 382 5 is_stmt 1 view .LVU1908
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5869              		.loc 1 382 5 is_stmt 0 view .LVU1909
 5870              	.LBE425:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 5871              		.loc 1 374 9 is_stmt 1 view .LVU1910
 5872 0460 4183FD07 		cmpl	$7, %r13d
 5873 0464 7E6A     		jle	.L527
 5874              	.LVL577:
 5875              	.L476:
 5876              	.LBB426:
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5877              		.loc 1 375 5 view .LVU1911
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5878              		.loc 1 377 5 is_stmt 0 view .LVU1912
 5879 0466 498B87C8 		movq	200(%r15), %rax
 5879      000000
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5880              		.loc 1 375 32 view .LVU1913
 5881 046d 4C89E2   		movq	%r12, %rdx
 5882 0470 48C1FA10 		sarq	$16, %rdx
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5883              		.loc 1 377 5 view .LVU1914
 5884 0474 488D4801 		leaq	1(%rax), %rcx
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5885              		.loc 1 375 9 view .LVU1915
 5886 0478 0FB6EA   		movzbl	%dl, %ebp
 5887              	.LVL578:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5888              		.loc 1 377 5 is_stmt 1 view .LVU1916
 5889 047b 49898FC8 		movq	%rcx, 200(%r15)
 5889      000000
 5890 0482 8810     		movb	%dl, (%rax)
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5891              		.loc 1 377 5 view .LVU1917
 5892 0484 4983AFD0 		subq	$1, 208(%r15)
 5892      00000001 
 5893 048c 0F848600 		je	.L528
 5893      0000
 5894              	.L472:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5895              		.loc 1 377 28 view .LVU1918
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 5896              		.loc 1 378 5 view .LVU1919
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 5897              		.loc 1 378 8 is_stmt 0 view .LVU1920
 5898 0492 81FDFF00 		cmpl	$255, %ebp
 5898      0000
 5899 0498 75BE     		jne	.L474
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5900              		.loc 1 379 7 is_stmt 1 view .LVU1921
 5901 049a 498B87C8 		movq	200(%r15), %rax
 5901      000000
 5902 04a1 488D5001 		leaq	1(%rax), %rdx
 5903 04a5 498997C8 		movq	%rdx, 200(%r15)
 5903      000000
 5904 04ac C60000   		movb	$0, (%rax)
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5905              		.loc 1 379 7 view .LVU1922
 5906 04af 4983AFD0 		subq	$1, 208(%r15)
 5906      00000001 
 5907 04b7 759F     		jne	.L474
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5908              		.loc 1 379 7 view .LVU1923
 5909 04b9 4C89FF   		movq	%r15, %rdi
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5910              		.loc 1 382 14 is_stmt 0 view .LVU1924
 5911 04bc 4183ED08 		subl	$8, %r13d
 5912              	.LVL579:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 5913              		.loc 1 381 16 view .LVU1925
 5914 04c0 49C1E408 		salq	$8, %r12
 5915              	.LVL580:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5916              		.loc 1 379 7 view .LVU1926
 5917 04c4 E8000000 		call	dump_buffer_e
 5917      00
 5918              	.LVL581:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5919              		.loc 1 379 30 is_stmt 1 view .LVU1927
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 5920              		.loc 1 381 5 view .LVU1928
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5921              		.loc 1 382 5 view .LVU1929
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5922              		.loc 1 382 5 is_stmt 0 view .LVU1930
 5923              	.LBE426:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 5924              		.loc 1 374 9 is_stmt 1 view .LVU1931
 5925 04c9 4183FD07 		cmpl	$7, %r13d
 5926 04cd 7F97     		jg	.L476
 5927 04cf 90       		.p2align 4,,10
 5928              		.p2align 3
 5929              	.L527:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 5930              		.loc 1 385 3 view .LVU1932
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 5931              		.loc 1 386 27 is_stmt 0 view .LVU1933
 5932 04d0 8B6C2408 		movl	8(%rsp), %ebp
 5933              	.LVL582:
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 5934              		.loc 1 386 27 view .LVU1934
 5935              	.LBE430:
 5936              	.LBE436:
 5937              	.LBE442:
 5938              	.LBE448:
 5939              	.LBB449:
 5940              	.LBB450:
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 5941              		.loc 1 448 6 view .LVU1935
 5942 04d4 418B97C0 		movl	192(%r15), %edx
 5942      000000
 5943              	.LBE450:
 5944              	.LBE449:
 5945              	.LBB453:
 5946              	.LBB443:
 5947              	.LBB437:
 5948              	.LBB431:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 5949              		.loc 1 385 29 view .LVU1936
 5950 04db 4D896718 		movq	%r12, 24(%r15)
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 5951              		.loc 1 386 3 is_stmt 1 view .LVU1937
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 5952              		.loc 1 386 27 is_stmt 0 view .LVU1938
 5953 04df 83ED07   		subl	$7, %ebp
 5954 04e2 83E507   		andl	$7, %ebp
 5955 04e5 41896F20 		movl	%ebp, 32(%r15)
 5956              	.LVL583:
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 5957              		.loc 1 386 27 view .LVU1939
 5958              	.LBE431:
 5959              	.LBE437:
 5960              	.LBE443:
 5961              	.LBE453:
 876:fltk-1.3.4-1/jpeg/jchuff.c ****     BR_buffer = entropy->bit_buffer; /* BE bits are gone now */
 5962              		.loc 1 876 5 is_stmt 1 view .LVU1940
 5963              	.LBB454:
 5964              	.LBI449:
 445:fltk-1.3.4-1/jpeg/jchuff.c **** 		    unsigned int nbits)
 5965              		.loc 1 445 1 view .LVU1941
 5966              	.LBB451:
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 5967              		.loc 1 448 3 view .LVU1942
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 5968              		.loc 1 448 6 is_stmt 0 view .LVU1943
 5969 04e9 85D2     		testl	%edx, %edx
 5970 04eb 750D     		jne	.L484
 5971              	.L485:
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 5972              		.loc 1 448 6 view .LVU1944
 5973 04ed 89DA     		movl	%ebx, %edx
 5974 04ef 4C89F6   		movq	%r14, %rsi
 5975 04f2 4C89FF   		movq	%r15, %rdi
 5976 04f5 E8000000 		call	emit_buffered_bits.part.0
 5976      00
 5977              	.LVL584:
 5978              	.L484:
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 5979              		.loc 1 448 6 view .LVU1945
 5980              	.LBE451:
 5981              	.LBE454:
 877:fltk-1.3.4-1/jpeg/jchuff.c ****     BR = 0;
 5982              		.loc 1 877 5 is_stmt 1 view .LVU1946
 879:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5983              		.loc 1 879 7 is_stmt 0 view .LVU1947
 5984 04fa C7442408 		movl	$0, 8(%rsp)
 5984      00000000 
 877:fltk-1.3.4-1/jpeg/jchuff.c ****     BR = 0;
 5985              		.loc 1 877 15 view .LVU1948
 5986 0502 4D8BB7F0 		movq	240(%r15), %r14
 5986      000000
 5987              	.LVL585:
 878:fltk-1.3.4-1/jpeg/jchuff.c ****     r = 0;			/* reset zero run length */
 5988              		.loc 1 878 5 is_stmt 1 view .LVU1949
 879:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5989              		.loc 1 879 5 view .LVU1950
 878:fltk-1.3.4-1/jpeg/jchuff.c ****     r = 0;			/* reset zero run length */
 5990              		.loc 1 878 8 is_stmt 0 view .LVU1951
 5991 0509 4531ED   		xorl	%r13d, %r13d
 5992 050c E904FCFF 		jmp	.L446
 5992      FF
 5993              	.LVL586:
 5994              		.p2align 4,,10
 5995 0511 0F1F8000 		.p2align 3
 5995      000000
 5996              	.L528:
 5997              	.LBB455:
 5998              	.LBB444:
 5999              	.LBB438:
 6000              	.LBB432:
 6001              	.LBB427:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6002              		.loc 1 377 5 is_stmt 1 view .LVU1952
 6003 0518 4C89FF   		movq	%r15, %rdi
 6004 051b E8000000 		call	dump_buffer_e
 6004      00
 6005              	.LVL587:
 6006 0520 E96DFFFF 		jmp	.L472
 6006      FF
 6007              	.LVL588:
 6008              		.p2align 4,,10
 6009 0525 0F1F00   		.p2align 3
 6010              	.L491:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6011              		.loc 1 377 5 is_stmt 0 view .LVU1953
 6012              	.LBE427:
 6013              	.LBE432:
 6014              	.LBE438:
 6015              	.LBE444:
 6016              	.LBE455:
 883:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->BE += BR;		/* concat my correction bits to older ones */
 6017              		.loc 1 883 5 is_stmt 1 view .LVU1954
 883:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->BE += BR;		/* concat my correction bits to older ones */
 6018              		.loc 1 883 20 is_stmt 0 view .LVU1955
 6019 0528 418B87E4 		movl	228(%r15), %eax
 6019      000000
 884:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We force out the EOB if we risk either:
 6020              		.loc 1 884 17 view .LVU1956
 6021 052f 4503AFE8 		addl	232(%r15), %r13d
 6021      000000
 6022              	.LVL589:
 884:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We force out the EOB if we risk either:
 6023              		.loc 1 884 17 view .LVU1957
 6024 0536 4589AFE8 		movl	%r13d, 232(%r15)
 6024      000000
 883:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->BE += BR;		/* concat my correction bits to older ones */
 6025              		.loc 1 883 20 view .LVU1958
 6026 053d 8D5001   		leal	1(%rax), %edx
 6027 0540 418997E4 		movl	%edx, 228(%r15)
 6027      000000
 884:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We force out the EOB if we risk either:
 6028              		.loc 1 884 5 is_stmt 1 view .LVU1959
 889:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_eobrun(entropy);
 6029              		.loc 1 889 5 view .LVU1960
 889:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_eobrun(entropy);
 6030              		.loc 1 889 35 is_stmt 0 view .LVU1961
 6031 0547 4181FDA9 		cmpl	$937, %r13d
 6031      030000
 6032 054e 770C     		ja	.L492
 6033 0550 81FAFF7F 		cmpl	$32767, %edx
 6033      0000
 6034 0556 0F85E9FD 		jne	.L438
 6034      FFFF
 6035              	.L492:
 890:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6036              		.loc 1 890 7 is_stmt 1 view .LVU1962
 6037 055c 4C89FF   		movq	%r15, %rdi
 6038 055f E8000000 		call	emit_eobrun
 6038      00
 6039              	.LVL590:
 6040 0564 E9DCFDFF 		jmp	.L438
 6040      FF
 6041              	.LVL591:
 6042 0569 0F1F8000 		.p2align 4,,10
 6042      000000
 6043              		.p2align 3
 6044              	.L460:
 6045              	.LBB456:
 6046              	.LBB419:
 6047              	.LBB409:
 6048              	.LBI409:
 429:fltk-1.3.4-1/jpeg/jchuff.c **** {
 6049              		.loc 1 429 1 view .LVU1963
 6050              	.LBB410:
 434:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 6051              		.loc 1 434 5 view .LVU1964
 434:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 6052              		.loc 1 434 21 is_stmt 0 view .LVU1965
 6053 0570 498B54D7 		movq	96(%r15,%rdx,8), %rdx
 6053      60
 6054              	.LVL592:
 435:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6055              		.loc 1 435 5 is_stmt 1 view .LVU1966
 435:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6056              		.loc 1 435 58 is_stmt 0 view .LVU1967
 6057 0575 4D63E4   		movslq	%r12d, %r12
 6058              	.LVL593:
 435:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6059              		.loc 1 435 5 view .LVU1968
 6060 0578 420FB6AC 		movzbl	1024(%rdx,%r12), %ebp
 6060      22000400 
 6060      00
 6061 0581 468B2CA2 		movl	(%rdx,%r12,4), %r13d
 6062              	.LVL594:
 6063              	.LBB411:
 6064              	.LBI411:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 6065              		.loc 1 349 1 is_stmt 1 view .LVU1969
 6066              	.LBB412:
 353:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 6067              		.loc 1 353 3 view .LVU1970
 354:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6068              		.loc 1 354 3 view .LVU1971
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 6069              		.loc 1 357 3 view .LVU1972
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 6070              		.loc 1 357 6 is_stmt 0 view .LVU1973
 6071 0585 85ED     		testl	%ebp, %ebp
 6072 0587 752C     		jne	.L466
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6073              		.loc 1 358 5 is_stmt 1 view .LVU1974
 6074 0589 498B97D8 		movq	216(%r15), %rdx
 6074      000000
 6075              	.LVL595:
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6076              		.loc 1 358 5 is_stmt 0 view .LVU1975
 6077 0590 488B12   		movq	(%rdx), %rdx
 6078 0593 C7422829 		movl	$41, 40(%rdx)
 6078      000000
 6079              	.LVL596:
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6080              		.loc 1 358 5 view .LVU1976
 6081 059a 498BBFD8 		movq	216(%r15), %rdi
 6081      000000
 6082 05a1 488B17   		movq	(%rdi), %rdx
 6083 05a4 FF12     		call	*(%rdx)
 6084              	.LVL597:
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 6085              		.loc 1 360 3 is_stmt 1 view .LVU1977
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 6086              		.loc 1 360 6 is_stmt 0 view .LVU1978
 6087 05a6 418BB7C0 		movl	192(%r15), %esi
 6087      000000
 6088 05ad 85F6     		testl	%esi, %esi
 6089 05af 0F8545FF 		jne	.L484
 6089      FFFF
 6090              	.L466:
 6091              	.LVL598:
 6092              	.LBB413:
 6093              	.LBI413:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 6094              		.loc 1 349 1 is_stmt 1 view .LVU1979
 6095              	.LBB414:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6096              		.loc 1 364 3 view .LVU1980
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6097              		.loc 1 364 47 is_stmt 0 view .LVU1981
 6098 05b5 89E9     		movl	%ebp, %ecx
 6099 05b7 BA010000 		movl	$1, %edx
 6099      00
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6100              		.loc 1 367 12 view .LVU1982
 6101 05bc 41036F20 		addl	32(%r15), %ebp
 6102              	.LVL599:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6103              		.loc 1 364 47 view .LVU1983
 6104 05c0 48D3E2   		salq	%cl, %rdx
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6105              		.loc 1 369 21 view .LVU1984
 6106 05c3 B9180000 		movl	$24, %ecx
 6106      00
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6107              		.loc 1 364 56 view .LVU1985
 6108 05c8 4C8D62FF 		leaq	-1(%rdx), %r12
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6109              		.loc 1 369 21 view .LVU1986
 6110 05cc 29E9     		subl	%ebp, %ecx
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6111              		.loc 1 364 14 view .LVU1987
 6112 05ce 4521EC   		andl	%r13d, %r12d
 6113              	.LVL600:
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6114              		.loc 1 367 3 is_stmt 1 view .LVU1988
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6115              		.loc 1 369 3 view .LVU1989
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6116              		.loc 1 374 9 is_stmt 0 view .LVU1990
 6117 05d1 4189ED   		movl	%ebp, %r13d
 6118              	.LVL601:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6119              		.loc 1 369 14 view .LVU1991
 6120 05d4 49D3E4   		salq	%cl, %r12
 6121              	.LVL602:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6122              		.loc 1 372 3 is_stmt 1 view .LVU1992
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6123              		.loc 1 372 14 is_stmt 0 view .LVU1993
 6124 05d7 4D0B6718 		orq	24(%r15), %r12
 6125              	.LVL603:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6126              		.loc 1 374 3 is_stmt 1 view .LVU1994
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6127              		.loc 1 374 9 view .LVU1995
 6128 05db 83FD07   		cmpl	$7, %ebp
 6129 05de 0F8E8600 		jle	.L464
 6129      0000
 6130 05e4 895C2408 		movl	%ebx, 8(%rsp)
 6131              	.LVL604:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6132              		.loc 1 374 9 is_stmt 0 view .LVU1996
 6133 05e8 EB14     		jmp	.L463
 6134              	.LVL605:
 6135 05ea 660F1F44 		.p2align 4,,10
 6135      0000
 6136              		.p2align 3
 6137              	.L469:
 6138              	.LBB415:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 6139              		.loc 1 379 30 is_stmt 1 view .LVU1997
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 6140              		.loc 1 381 5 view .LVU1998
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6141              		.loc 1 382 14 is_stmt 0 view .LVU1999
 6142 05f0 4183ED08 		subl	$8, %r13d
 6143              	.LVL606:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 6144              		.loc 1 381 16 view .LVU2000
 6145 05f4 49C1E408 		salq	$8, %r12
 6146              	.LVL607:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6147              		.loc 1 382 5 is_stmt 1 view .LVU2001
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6148              		.loc 1 382 5 is_stmt 0 view .LVU2002
 6149              	.LBE415:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6150              		.loc 1 374 9 is_stmt 1 view .LVU2003
 6151 05f8 4183FD07 		cmpl	$7, %r13d
 6152 05fc 7E65     		jle	.L529
 6153              	.LVL608:
 6154              	.L463:
 6155              	.LBB416:
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6156              		.loc 1 375 5 view .LVU2004
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6157              		.loc 1 377 5 is_stmt 0 view .LVU2005
 6158 05fe 498B87C8 		movq	200(%r15), %rax
 6158      000000
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6159              		.loc 1 375 32 view .LVU2006
 6160 0605 4C89E2   		movq	%r12, %rdx
 6161 0608 48C1FA10 		sarq	$16, %rdx
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6162              		.loc 1 377 5 view .LVU2007
 6163 060c 488D7001 		leaq	1(%rax), %rsi
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6164              		.loc 1 375 9 view .LVU2008
 6165 0610 0FB6DA   		movzbl	%dl, %ebx
 6166              	.LVL609:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6167              		.loc 1 377 5 is_stmt 1 view .LVU2009
 6168 0613 4989B7C8 		movq	%rsi, 200(%r15)
 6168      000000
 6169 061a 8810     		movb	%dl, (%rax)
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6170              		.loc 1 377 5 view .LVU2010
 6171 061c 4983AFD0 		subq	$1, 208(%r15)
 6171      00000001 
 6172 0624 745A     		je	.L530
 6173              	.L467:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6174              		.loc 1 377 28 view .LVU2011
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 6175              		.loc 1 378 5 view .LVU2012
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 6176              		.loc 1 378 8 is_stmt 0 view .LVU2013
 6177 0626 81FBFF00 		cmpl	$255, %ebx
 6177      0000
 6178 062c 75C2     		jne	.L469
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 6179              		.loc 1 379 7 is_stmt 1 view .LVU2014
 6180 062e 498B87C8 		movq	200(%r15), %rax
 6180      000000
 6181 0635 488D5001 		leaq	1(%rax), %rdx
 6182 0639 498997C8 		movq	%rdx, 200(%r15)
 6182      000000
 6183 0640 C60000   		movb	$0, (%rax)
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 6184              		.loc 1 379 7 view .LVU2015
 6185 0643 4983AFD0 		subq	$1, 208(%r15)
 6185      00000001 
 6186 064b 75A3     		jne	.L469
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 6187              		.loc 1 379 7 view .LVU2016
 6188 064d 4C89FF   		movq	%r15, %rdi
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6189              		.loc 1 382 14 is_stmt 0 view .LVU2017
 6190 0650 4183ED08 		subl	$8, %r13d
 6191              	.LVL610:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 6192              		.loc 1 381 16 view .LVU2018
 6193 0654 49C1E408 		salq	$8, %r12
 6194              	.LVL611:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 6195              		.loc 1 379 7 view .LVU2019
 6196 0658 E8000000 		call	dump_buffer_e
 6196      00
 6197              	.LVL612:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 6198              		.loc 1 379 30 is_stmt 1 view .LVU2020
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 6199              		.loc 1 381 5 view .LVU2021
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6200              		.loc 1 382 5 view .LVU2022
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6201              		.loc 1 382 5 is_stmt 0 view .LVU2023
 6202              	.LBE416:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6203              		.loc 1 374 9 is_stmt 1 view .LVU2024
 6204 065d 4183FD07 		cmpl	$7, %r13d
 6205 0661 7F9B     		jg	.L463
 6206              	.L529:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6207              		.loc 1 374 9 is_stmt 0 view .LVU2025
 6208 0663 8B5C2408 		movl	8(%rsp), %ebx
 6209              	.LVL613:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6210              		.loc 1 374 9 view .LVU2026
 6211 0667 83E507   		andl	$7, %ebp
 6212              	.L464:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 6213              		.loc 1 385 3 is_stmt 1 view .LVU2027
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 6214              		.loc 1 385 29 is_stmt 0 view .LVU2028
 6215 066a 4D896718 		movq	%r12, 24(%r15)
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 6216              		.loc 1 386 3 is_stmt 1 view .LVU2029
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 6217              		.loc 1 386 27 is_stmt 0 view .LVU2030
 6218 066e 41896F20 		movl	%ebp, 32(%r15)
 6219 0672 E987FDFF 		jmp	.L461
 6219      FF
 6220              	.LVL614:
 6221 0677 660F1F84 		.p2align 4,,10
 6221      00000000 
 6221      00
 6222              		.p2align 3
 6223              	.L530:
 6224              	.LBB417:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6225              		.loc 1 377 5 is_stmt 1 view .LVU2031
 6226 0680 4C89FF   		movq	%r15, %rdi
 6227 0683 E8000000 		call	dump_buffer_e
 6227      00
 6228              	.LVL615:
 6229 0688 EB9C     		jmp	.L467
 6230              	.LVL616:
 6231 068a 660F1F44 		.p2align 4,,10
 6231      0000
 6232              		.p2align 3
 6233              	.L490:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6234              		.loc 1 377 5 is_stmt 0 view .LVU2032
 6235              	.LBE417:
 6236              	.LBE414:
 6237              	.LBE413:
 6238              	.LBE412:
 6239              	.LBE411:
 6240              	.LBE410:
 6241              	.LBE409:
 6242              	.LBE419:
 6243              	.LBE456:
 842:fltk-1.3.4-1/jpeg/jchuff.c ****       /* emit any pending EOBRUN and the BE correction bits */
 6244              		.loc 1 842 11 view .LVU2033
 6245 0690 4489EB   		movl	%r13d, %ebx
 6246 0693 E96DFCFF 		jmp	.L445
 6246      FF
 6247              	.LVL617:
 6248              	.L520:
 802:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6249              		.loc 1 802 7 is_stmt 1 view .LVU2034
 6250 0698 418B773C 		movl	60(%r15), %esi
 6251 069c 4C89FF   		movq	%r15, %rdi
 6252              	.LVL618:
 802:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6253              		.loc 1 802 7 is_stmt 0 view .LVU2035
 6254 069f E8000000 		call	emit_restart_e
 6254      00
 6255              	.LVL619:
 6256 06a4 E9C2F9FF 		jmp	.L436
 6256      FF
 6257              	.LVL620:
 6258              	.L471:
 6259              	.LBB457:
 6260              	.LBB445:
 6261              	.LBB439:
 6262              	.LBB433:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 6263              		.loc 1 385 3 is_stmt 1 view .LVU2036
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 6264              		.loc 1 385 29 is_stmt 0 view .LVU2037
 6265 06a9 4D896718 		movq	%r12, 24(%r15)
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 6266              		.loc 1 386 3 is_stmt 1 view .LVU2038
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 6267              		.loc 1 386 27 is_stmt 0 view .LVU2039
 6268 06ad 45896F20 		movl	%r13d, 32(%r15)
 6269              	.LVL621:
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 6270              		.loc 1 386 27 view .LVU2040
 6271              	.LBE433:
 6272              	.LBE439:
 6273              	.LBE445:
 6274              	.LBE457:
 876:fltk-1.3.4-1/jpeg/jchuff.c ****     BR_buffer = entropy->bit_buffer; /* BE bits are gone now */
 6275              		.loc 1 876 5 is_stmt 1 view .LVU2041
 6276              	.LBB458:
 445:fltk-1.3.4-1/jpeg/jchuff.c **** 		    unsigned int nbits)
 6277              		.loc 1 445 1 view .LVU2042
 6278              	.LBB452:
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 6279              		.loc 1 448 3 view .LVU2043
 6280 06b1 E937FEFF 		jmp	.L485
 6280      FF
 6281              	.LVL622:
 6282              	.L526:
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 6283              		.loc 1 448 3 is_stmt 0 view .LVU2044
 6284              	.LBE452:
 6285              	.LBE458:
 907:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6286              		.loc 1 907 1 view .LVU2045
 6287 06b6 E8000000 		call	__stack_chk_fail@PLT
 6287      00
 6288              	.LVL623:
 6289              		.cfi_endproc
 6290              	.LFE67:
 6292              		.section	.text.finish_pass_gather,"ax",@progbits
 6293              		.p2align 4
 6295              	finish_pass_gather:
 6296              	.LVL624:
 6297              	.LFB74:
1395:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 6298              		.loc 1 1395 1 is_stmt 1 view -0
 6299              		.cfi_startproc
1395:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 6300              		.loc 1 1395 1 is_stmt 0 view .LVU2047
 6301 0000 F30F1EFA 		endbr64
 6302 0004 4157     		pushq	%r15
 6303              		.cfi_def_cfa_offset 16
 6304              		.cfi_offset 15, -16
 6305 0006 4156     		pushq	%r14
 6306              		.cfi_def_cfa_offset 24
 6307              		.cfi_offset 14, -24
 6308 0008 4155     		pushq	%r13
 6309              		.cfi_def_cfa_offset 32
 6310              		.cfi_offset 13, -32
 6311 000a 4154     		pushq	%r12
 6312              		.cfi_def_cfa_offset 40
 6313              		.cfi_offset 12, -40
 6314 000c 55       		pushq	%rbp
 6315              		.cfi_def_cfa_offset 48
 6316              		.cfi_offset 6, -48
 6317 000d 53       		pushq	%rbx
 6318              		.cfi_def_cfa_offset 56
 6319              		.cfi_offset 3, -56
 6320 000e 4889FB   		movq	%rdi, %rbx
 6321 0011 4883EC38 		subq	$56, %rsp
 6322              		.cfi_def_cfa_offset 112
1406:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Flush out buffered data (all we care about is counting the EOB symbol) */
 6323              		.loc 1 1406 6 view .LVU2048
 6324 0015 448B8F5C 		movl	348(%rdi), %r9d
 6324      010000
1396:fltk-1.3.4-1/jpeg/jchuff.c ****   int ci, tbl;
 6325              		.loc 1 1396 20 view .LVU2049
 6326 001c 4C8BB730 		movq	560(%rdi), %r14
 6326      020000
1395:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 6327              		.loc 1 1395 1 view .LVU2050
 6328 0023 64488B04 		movq	%fs:40, %rax
 6328      25280000 
 6328      00
 6329 002c 48894424 		movq	%rax, 40(%rsp)
 6329      28
 6330 0031 31C0     		xorl	%eax, %eax
1396:fltk-1.3.4-1/jpeg/jchuff.c ****   int ci, tbl;
 6331              		.loc 1 1396 3 is_stmt 1 view .LVU2051
 6332              	.LVL625:
1397:fltk-1.3.4-1/jpeg/jchuff.c ****   jpeg_component_info * compptr;
 6333              		.loc 1 1397 3 view .LVU2052
1398:fltk-1.3.4-1/jpeg/jchuff.c ****   JHUFF_TBL **htblptr;
 6334              		.loc 1 1398 3 view .LVU2053
1399:fltk-1.3.4-1/jpeg/jchuff.c ****   boolean did_dc[NUM_HUFF_TBLS];
 6335              		.loc 1 1399 3 view .LVU2054
1400:fltk-1.3.4-1/jpeg/jchuff.c ****   boolean did_ac[NUM_HUFF_TBLS];
 6336              		.loc 1 1400 3 view .LVU2055
1401:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6337              		.loc 1 1401 3 view .LVU2056
1406:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Flush out buffered data (all we care about is counting the EOB symbol) */
 6338              		.loc 1 1406 3 view .LVU2057
1406:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Flush out buffered data (all we care about is counting the EOB symbol) */
 6339              		.loc 1 1406 6 is_stmt 0 view .LVU2058
 6340 0033 4585C9   		testl	%r9d, %r9d
 6341 0036 0F85F400 		jne	.L544
 6341      0000
 6342              	.LVL626:
 6343              	.L532:
1410:fltk-1.3.4-1/jpeg/jchuff.c ****   MEMZERO(did_ac, SIZEOF(did_ac));
 6344              		.loc 1 1410 3 is_stmt 1 view .LVU2059
 6345              	.LBB459:
 6346              	.LBI459:
  59:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
 6347              		.loc 2 59 1 view .LVU2060
 6348              	.LBB460:
 6349              		.loc 2 71 3 view .LVU2061
 6350              	.LBE460:
 6351              	.LBE459:
1413:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
 6352              		.loc 1 1413 3 is_stmt 0 view .LVU2062
 6353 003c 448B8374 		movl	372(%rbx), %r8d
 6353      010000
 6354              	.LBB463:
 6355              	.LBB461:
 6356              		.loc 2 71 10 view .LVU2063
 6357 0043 660FEFC0 		pxor	%xmm0, %xmm0
 6358              	.LBE461:
 6359              	.LBE463:
1413:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
 6360              		.loc 1 1413 3 view .LVU2064
 6361 0047 4531ED   		xorl	%r13d, %r13d
 6362              	.LBB464:
 6363              	.LBB462:
 6364              		.loc 2 71 10 view .LVU2065
 6365 004a 0F290424 		movaps	%xmm0, (%rsp)
 6366              	.LVL627:
 6367              		.loc 2 71 10 view .LVU2066
 6368              	.LBE462:
 6369              	.LBE464:
1411:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6370              		.loc 1 1411 3 is_stmt 1 view .LVU2067
 6371              	.LBB465:
 6372              	.LBI465:
  59:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
 6373              		.loc 2 59 1 view .LVU2068
 6374              	.LBB466:
 6375              		.loc 2 71 3 view .LVU2069
 6376              		.loc 2 71 10 is_stmt 0 view .LVU2070
 6377 004e 0F294424 		movaps	%xmm0, 16(%rsp)
 6377      10
 6378              	.LVL628:
 6379              		.loc 2 71 10 view .LVU2071
 6380              	.LBE466:
 6381              	.LBE465:
1413:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
 6382              		.loc 1 1413 3 is_stmt 1 view .LVU2072
1413:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
 6383              		.loc 1 1413 16 view .LVU2073
1413:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
 6384              		.loc 1 1413 3 is_stmt 0 view .LVU2074
 6385 0053 4585C0   		testl	%r8d, %r8d
 6386 0056 0F8EB000 		jle	.L531
 6386      0000
 6387              	.LVL629:
 6388 005c 0F1F4000 		.p2align 4,,10
 6389              		.p2align 3
 6390              	.L533:
1414:fltk-1.3.4-1/jpeg/jchuff.c ****     /* DC needs no table for refinement scan */
 6391              		.loc 1 1414 5 is_stmt 1 view .LVU2075
1416:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->dc_tbl_no;
 6392              		.loc 1 1416 8 is_stmt 0 view .LVU2076
 6393 0060 8BBBCC01 		movl	460(%rbx), %edi
 6393      0000
1414:fltk-1.3.4-1/jpeg/jchuff.c ****     /* DC needs no table for refinement scan */
 6394              		.loc 1 1414 13 view .LVU2077
 6395 0066 4A8BACEB 		movq	376(%rbx,%r13,8), %rbp
 6395      78010000 
 6396              	.LVL630:
1416:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->dc_tbl_no;
 6397              		.loc 1 1416 5 is_stmt 1 view .LVU2078
1416:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->dc_tbl_no;
 6398              		.loc 1 1416 8 is_stmt 0 view .LVU2079
 6399 006e 85FF     		testl	%edi, %edi
 6400 0070 7546     		jne	.L534
1416:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->dc_tbl_no;
 6401              		.loc 1 1416 24 discriminator 1 view .LVU2080
 6402 0072 8BB3D401 		movl	468(%rbx), %esi
 6402      0000
 6403 0078 85F6     		testl	%esi, %esi
 6404 007a 753C     		jne	.L534
1417:fltk-1.3.4-1/jpeg/jchuff.c ****       if (! did_dc[tbl]) {
 6405              		.loc 1 1417 7 is_stmt 1 view .LVU2081
 6406              	.LVL631:
1418:fltk-1.3.4-1/jpeg/jchuff.c **** 	htblptr = & cinfo->dc_huff_tbl_ptrs[tbl];
 6407              		.loc 1 1418 7 view .LVU2082
1418:fltk-1.3.4-1/jpeg/jchuff.c **** 	htblptr = & cinfo->dc_huff_tbl_ptrs[tbl];
 6408              		.loc 1 1418 19 is_stmt 0 view .LVU2083
 6409 007c 4C636514 		movslq	20(%rbp), %r12
1418:fltk-1.3.4-1/jpeg/jchuff.c **** 	htblptr = & cinfo->dc_huff_tbl_ptrs[tbl];
 6410              		.loc 1 1418 10 view .LVU2084
 6411 0080 428B0CA4 		movl	(%rsp,%r12,4), %ecx
 6412 0084 85C9     		testl	%ecx, %ecx
 6413 0086 7530     		jne	.L534
1419:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (*htblptr == NULL)
 6414              		.loc 1 1419 2 is_stmt 1 view .LVU2085
 6415              	.LVL632:
1420:fltk-1.3.4-1/jpeg/jchuff.c **** 	  *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 6416              		.loc 1 1420 2 view .LVU2086
 6417 0088 4E8D3CE3 		leaq	(%rbx,%r12,8), %r15
1420:fltk-1.3.4-1/jpeg/jchuff.c **** 	  *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 6418              		.loc 1 1420 6 is_stmt 0 view .LVU2087
 6419 008c 498BB7A0 		movq	160(%r15), %rsi
 6419      000000
1420:fltk-1.3.4-1/jpeg/jchuff.c **** 	  *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 6420              		.loc 1 1420 5 view .LVU2088
 6421 0093 4885F6   		testq	%rsi, %rsi
 6422 0096 0F84A400 		je	.L545
 6422      0000
 6423              	.LVL633:
 6424              	.L535:
1422:fltk-1.3.4-1/jpeg/jchuff.c **** 	did_dc[tbl] = TRUE;
 6425              		.loc 1 1422 2 is_stmt 1 view .LVU2089
 6426 009c 4B8B94E6 		movq	128(%r14,%r12,8), %rdx
 6426      80000000 
 6427 00a4 4889DF   		movq	%rbx, %rdi
 6428 00a7 E8000000 		call	jpeg_gen_optimal_table
 6428      00
 6429              	.LVL634:
1423:fltk-1.3.4-1/jpeg/jchuff.c ****       }
 6430              		.loc 1 1423 2 view .LVU2090
1423:fltk-1.3.4-1/jpeg/jchuff.c ****       }
 6431              		.loc 1 1423 14 is_stmt 0 view .LVU2091
 6432 00ac 42C704A4 		movl	$1, (%rsp,%r12,4)
 6432      01000000 
 6433              	.LVL635:
 6434              		.p2align 4,,10
 6435 00b4 0F1F4000 		.p2align 3
 6436              	.L534:
1427:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->ac_tbl_no;
 6437              		.loc 1 1427 5 is_stmt 1 view .LVU2092
1427:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->ac_tbl_no;
 6438              		.loc 1 1427 8 is_stmt 0 view .LVU2093
 6439 00b8 8B93D001 		movl	464(%rbx), %edx
 6439      0000
 6440 00be 85D2     		testl	%edx, %edx
 6441 00c0 7439     		je	.L536
1428:fltk-1.3.4-1/jpeg/jchuff.c ****       if (! did_ac[tbl]) {
 6442              		.loc 1 1428 7 is_stmt 1 view .LVU2094
 6443              	.LVL636:
1429:fltk-1.3.4-1/jpeg/jchuff.c **** 	htblptr = & cinfo->ac_huff_tbl_ptrs[tbl];
 6444              		.loc 1 1429 7 view .LVU2095
1429:fltk-1.3.4-1/jpeg/jchuff.c **** 	htblptr = & cinfo->ac_huff_tbl_ptrs[tbl];
 6445              		.loc 1 1429 19 is_stmt 0 view .LVU2096
 6446 00c2 48636D18 		movslq	24(%rbp), %rbp
 6447              	.LVL637:
1429:fltk-1.3.4-1/jpeg/jchuff.c **** 	htblptr = & cinfo->ac_huff_tbl_ptrs[tbl];
 6448              		.loc 1 1429 10 view .LVU2097
 6449 00c6 8B44AC10 		movl	16(%rsp,%rbp,4), %eax
 6450 00ca 85C0     		testl	%eax, %eax
 6451 00cc 752D     		jne	.L536
1430:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (*htblptr == NULL)
 6452              		.loc 1 1430 2 is_stmt 1 view .LVU2098
 6453              	.LVL638:
1431:fltk-1.3.4-1/jpeg/jchuff.c **** 	  *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 6454              		.loc 1 1431 2 view .LVU2099
 6455 00ce 4C8D24EB 		leaq	(%rbx,%rbp,8), %r12
1431:fltk-1.3.4-1/jpeg/jchuff.c **** 	  *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 6456              		.loc 1 1431 6 is_stmt 0 view .LVU2100
 6457 00d2 498BB424 		movq	192(%r12), %rsi
 6457      C0000000 
1431:fltk-1.3.4-1/jpeg/jchuff.c **** 	  *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 6458              		.loc 1 1431 5 view .LVU2101
 6459 00da 4885F6   		testq	%rsi, %rsi
 6460 00dd 0F847D00 		je	.L546
 6460      0000
 6461              	.L537:
1433:fltk-1.3.4-1/jpeg/jchuff.c **** 	did_ac[tbl] = TRUE;
 6462              		.loc 1 1433 2 is_stmt 1 view .LVU2102
 6463 00e3 498B94EE 		movq	160(%r14,%rbp,8), %rdx
 6463      A0000000 
 6464 00eb 4889DF   		movq	%rbx, %rdi
 6465 00ee E8000000 		call	jpeg_gen_optimal_table
 6465      00
 6466              	.LVL639:
1434:fltk-1.3.4-1/jpeg/jchuff.c ****       }
 6467              		.loc 1 1434 2 view .LVU2103
1434:fltk-1.3.4-1/jpeg/jchuff.c ****       }
 6468              		.loc 1 1434 14 is_stmt 0 view .LVU2104
 6469 00f3 C744AC10 		movl	$1, 16(%rsp,%rbp,4)
 6469      01000000 
 6470              	.LVL640:
 6471              	.L536:
1413:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
 6472              		.loc 1 1413 43 is_stmt 1 discriminator 2 view .LVU2105
1413:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
 6473              		.loc 1 1413 16 discriminator 2 view .LVU2106
 6474 00fb 4983C501 		addq	$1, %r13
 6475              	.LVL641:
1413:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
 6476              		.loc 1 1413 3 is_stmt 0 discriminator 2 view .LVU2107
 6477 00ff 4439AB74 		cmpl	%r13d, 372(%rbx)
 6477      010000
 6478 0106 0F8F54FF 		jg	.L533
 6478      FFFF
 6479              	.L531:
1438:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6480              		.loc 1 1438 1 view .LVU2108
 6481 010c 488B4424 		movq	40(%rsp), %rax
 6481      28
 6482 0111 64483304 		xorq	%fs:40, %rax
 6482      25280000 
 6482      00
 6483 011a 755C     		jne	.L547
 6484 011c 4883C438 		addq	$56, %rsp
 6485              		.cfi_remember_state
 6486              		.cfi_def_cfa_offset 56
 6487 0120 5B       		popq	%rbx
 6488              		.cfi_def_cfa_offset 48
 6489              	.LVL642:
1438:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6490              		.loc 1 1438 1 view .LVU2109
 6491 0121 5D       		popq	%rbp
 6492              		.cfi_def_cfa_offset 40
 6493 0122 415C     		popq	%r12
 6494              		.cfi_def_cfa_offset 32
 6495 0124 415D     		popq	%r13
 6496              		.cfi_def_cfa_offset 24
 6497 0126 415E     		popq	%r14
 6498              		.cfi_def_cfa_offset 16
 6499              	.LVL643:
1438:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6500              		.loc 1 1438 1 view .LVU2110
 6501 0128 415F     		popq	%r15
 6502              		.cfi_def_cfa_offset 8
 6503 012a C3       		ret
 6504              	.LVL644:
 6505 012b 0F1F4400 		.p2align 4,,10
 6505      00
 6506              		.p2align 3
 6507              	.L544:
 6508              		.cfi_restore_state
1408:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6509              		.loc 1 1408 5 is_stmt 1 view .LVU2111
 6510 0130 4C89F7   		movq	%r14, %rdi
 6511 0133 E8000000 		call	emit_eobrun
 6511      00
 6512              	.LVL645:
 6513 0138 E9FFFEFF 		jmp	.L532
 6513      FF
 6514              	.LVL646:
 6515 013d 0F1F00   		.p2align 4,,10
 6516              		.p2align 3
 6517              	.L545:
1421:fltk-1.3.4-1/jpeg/jchuff.c **** 	jpeg_gen_optimal_table(cinfo, *htblptr, entropy->dc_count_ptrs[tbl]);
 6518              		.loc 1 1421 4 view .LVU2112
1421:fltk-1.3.4-1/jpeg/jchuff.c **** 	jpeg_gen_optimal_table(cinfo, *htblptr, entropy->dc_count_ptrs[tbl]);
 6519              		.loc 1 1421 15 is_stmt 0 view .LVU2113
 6520 0140 4889DF   		movq	%rbx, %rdi
 6521 0143 E8000000 		call	jpeg_alloc_huff_table@PLT
 6521      00
 6522              	.LVL647:
1421:fltk-1.3.4-1/jpeg/jchuff.c **** 	jpeg_gen_optimal_table(cinfo, *htblptr, entropy->dc_count_ptrs[tbl]);
 6523              		.loc 1 1421 13 view .LVU2114
 6524 0148 498987A0 		movq	%rax, 160(%r15)
 6524      000000
1421:fltk-1.3.4-1/jpeg/jchuff.c **** 	jpeg_gen_optimal_table(cinfo, *htblptr, entropy->dc_count_ptrs[tbl]);
 6525              		.loc 1 1421 15 view .LVU2115
 6526 014f 4889C6   		movq	%rax, %rsi
 6527 0152 E945FFFF 		jmp	.L535
 6527      FF
 6528              	.LVL648:
 6529 0157 660F1F84 		.p2align 4,,10
 6529      00000000 
 6529      00
 6530              		.p2align 3
 6531              	.L546:
1432:fltk-1.3.4-1/jpeg/jchuff.c **** 	jpeg_gen_optimal_table(cinfo, *htblptr, entropy->ac_count_ptrs[tbl]);
 6532              		.loc 1 1432 4 is_stmt 1 view .LVU2116
1432:fltk-1.3.4-1/jpeg/jchuff.c **** 	jpeg_gen_optimal_table(cinfo, *htblptr, entropy->ac_count_ptrs[tbl]);
 6533              		.loc 1 1432 15 is_stmt 0 view .LVU2117
 6534 0160 4889DF   		movq	%rbx, %rdi
 6535 0163 E8000000 		call	jpeg_alloc_huff_table@PLT
 6535      00
 6536              	.LVL649:
1432:fltk-1.3.4-1/jpeg/jchuff.c **** 	jpeg_gen_optimal_table(cinfo, *htblptr, entropy->ac_count_ptrs[tbl]);
 6537              		.loc 1 1432 13 view .LVU2118
 6538 0168 49898424 		movq	%rax, 192(%r12)
 6538      C0000000 
1432:fltk-1.3.4-1/jpeg/jchuff.c **** 	jpeg_gen_optimal_table(cinfo, *htblptr, entropy->ac_count_ptrs[tbl]);
 6539              		.loc 1 1432 15 view .LVU2119
 6540 0170 4889C6   		movq	%rax, %rsi
 6541 0173 E96BFFFF 		jmp	.L537
 6541      FF
 6542              	.LVL650:
 6543              	.L547:
1438:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6544              		.loc 1 1438 1 view .LVU2120
 6545 0178 E8000000 		call	__stack_chk_fail@PLT
 6545      00
 6546              	.LVL651:
 6547              		.cfi_endproc
 6548              	.LFE74:
 6550              		.section	.text.finish_pass_huff,"ax",@progbits
 6551              		.p2align 4
 6553              	finish_pass_huff:
 6554              	.LVL652:
 6555              	.LFB70:
1071:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 6556              		.loc 1 1071 1 is_stmt 1 view -0
 6557              		.cfi_startproc
1071:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 6558              		.loc 1 1071 1 is_stmt 0 view .LVU2122
 6559 0000 F30F1EFA 		endbr64
1072:fltk-1.3.4-1/jpeg/jchuff.c ****   working_state state;
 6560              		.loc 1 1072 3 is_stmt 1 view .LVU2123
1071:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 6561              		.loc 1 1071 1 is_stmt 0 view .LVU2124
 6562 0004 4157     		pushq	%r15
 6563              		.cfi_def_cfa_offset 16
 6564              		.cfi_offset 15, -16
 6565 0006 4156     		pushq	%r14
 6566              		.cfi_def_cfa_offset 24
 6567              		.cfi_offset 14, -24
 6568 0008 4989FE   		movq	%rdi, %r14
 6569 000b 4155     		pushq	%r13
 6570              		.cfi_def_cfa_offset 32
 6571              		.cfi_offset 13, -32
 6572 000d 4154     		pushq	%r12
 6573              		.cfi_def_cfa_offset 40
 6574              		.cfi_offset 12, -40
 6575 000f 55       		pushq	%rbp
 6576              		.cfi_def_cfa_offset 48
 6577              		.cfi_offset 6, -48
 6578 0010 53       		pushq	%rbx
 6579              		.cfi_def_cfa_offset 56
 6580              		.cfi_offset 3, -56
 6581 0011 4883EC28 		subq	$40, %rsp
 6582              		.cfi_def_cfa_offset 96
1072:fltk-1.3.4-1/jpeg/jchuff.c ****   working_state state;
 6583              		.loc 1 1072 20 view .LVU2125
 6584 0015 488B9F30 		movq	560(%rdi), %rbx
 6584      020000
 6585              	.LVL653:
1073:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6586              		.loc 1 1073 3 is_stmt 1 view .LVU2126
1075:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->next_output_byte = cinfo->dest->next_output_byte;
 6587              		.loc 1 1075 3 view .LVU2127
 6588 001c 488B7F28 		movq	40(%rdi), %rdi
 6589              	.LVL654:
1075:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->next_output_byte = cinfo->dest->next_output_byte;
 6590              		.loc 1 1075 6 is_stmt 0 view .LVU2128
 6591 0020 418B965C 		movl	348(%r14), %edx
 6591      010000
 6592 0027 488B07   		movq	(%rdi), %rax
 6593 002a 85D2     		testl	%edx, %edx
 6594 002c 0F840601 		je	.L549
 6594      0000
1076:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 6595              		.loc 1 1076 5 is_stmt 1 view .LVU2129
1076:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 6596              		.loc 1 1076 31 is_stmt 0 view .LVU2130
 6597 0032 488983C8 		movq	%rax, 200(%rbx)
 6597      000000
1077:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6598              		.loc 1 1077 5 is_stmt 1 view .LVU2131
1077:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6599              		.loc 1 1077 42 is_stmt 0 view .LVU2132
 6600 0039 498B4628 		movq	40(%r14), %rax
1080:fltk-1.3.4-1/jpeg/jchuff.c ****     flush_bits_e(entropy);
 6601              		.loc 1 1080 5 view .LVU2133
 6602 003d 4889DF   		movq	%rbx, %rdi
1077:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6603              		.loc 1 1077 42 view .LVU2134
 6604 0040 488B4008 		movq	8(%rax), %rax
1077:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6605              		.loc 1 1077 29 view .LVU2135
 6606 0044 488983D0 		movq	%rax, 208(%rbx)
 6606      000000
1080:fltk-1.3.4-1/jpeg/jchuff.c ****     flush_bits_e(entropy);
 6607              		.loc 1 1080 5 is_stmt 1 view .LVU2136
 6608 004b E8000000 		call	emit_eobrun
 6608      00
 6609              	.LVL655:
1081:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6610              		.loc 1 1081 5 view .LVU2137
 6611              	.LBB483:
 6612              	.LBI483:
 402:fltk-1.3.4-1/jpeg/jchuff.c **** {
 6613              		.loc 1 402 1 view .LVU2138
 6614              	.LBB484:
 404:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_buffer = 0; /* and reset bit-buffer to empty */
 6615              		.loc 1 404 3 view .LVU2139
 6616              	.LBB485:
 6617              	.LBI485:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 6618              		.loc 1 349 1 view .LVU2140
 6619              	.LBB486:
 353:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 6620              		.loc 1 353 3 view .LVU2141
 354:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6621              		.loc 1 354 3 view .LVU2142
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 6622              		.loc 1 357 3 view .LVU2143
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 6623              		.loc 1 360 3 view .LVU2144
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 6624              		.loc 1 360 6 is_stmt 0 view .LVU2145
 6625 0050 8B83C000 		movl	192(%rbx), %eax
 6625      0000
 6626 0056 85C0     		testl	%eax, %eax
 6627 0058 0F85F201 		jne	.L577
 6627      0000
 6628              	.LVL656:
 6629              	.LBB487:
 6630              	.LBI487:
 349:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 6631              		.loc 1 349 1 is_stmt 1 view .LVU2146
 6632              	.LBB488:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6633              		.loc 1 364 3 view .LVU2147
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6634              		.loc 1 367 3 view .LVU2148
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6635              		.loc 1 367 12 is_stmt 0 view .LVU2149
 6636 005e 8B4320   		movl	32(%rbx), %eax
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6637              		.loc 1 369 21 view .LVU2150
 6638 0061 B9180000 		movl	$24, %ecx
 6638      00
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6639              		.loc 1 369 14 view .LVU2151
 6640 0066 41BC7F00 		movl	$127, %r12d
 6640      0000
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6641              		.loc 1 367 12 view .LVU2152
 6642 006c 8D6807   		leal	7(%rax), %ebp
 6643              	.LVL657:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6644              		.loc 1 369 3 is_stmt 1 view .LVU2153
 6645 006f 488B83C8 		movq	200(%rbx), %rax
 6645      000000
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6646              		.loc 1 369 21 is_stmt 0 view .LVU2154
 6647 0076 29E9     		subl	%ebp, %ecx
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6648              		.loc 1 369 14 view .LVU2155
 6649 0078 49D3E4   		salq	%cl, %r12
 6650              	.LVL658:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6651              		.loc 1 372 3 is_stmt 1 view .LVU2156
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6652              		.loc 1 372 14 is_stmt 0 view .LVU2157
 6653 007b 4C0B6318 		orq	24(%rbx), %r12
 6654              	.LVL659:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6655              		.loc 1 374 3 is_stmt 1 view .LVU2158
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6656              		.loc 1 374 9 view .LVU2159
 6657 007f 83FD07   		cmpl	$7, %ebp
 6658 0082 7F18     		jg	.L556
 6659 0084 EB7B     		jmp	.L551
 6660              	.LVL660:
 6661 0086 662E0F1F 		.p2align 4,,10
 6661      84000000 
 6661      0000
 6662              		.p2align 3
 6663              	.L554:
 6664              	.LBB489:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 6665              		.loc 1 379 30 view .LVU2160
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 6666              		.loc 1 381 5 view .LVU2161
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6667              		.loc 1 382 14 is_stmt 0 view .LVU2162
 6668 0090 83ED08   		subl	$8, %ebp
 6669              	.LVL661:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 6670              		.loc 1 381 16 view .LVU2163
 6671 0093 49C1E408 		salq	$8, %r12
 6672              	.LVL662:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6673              		.loc 1 382 5 is_stmt 1 view .LVU2164
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6674              		.loc 1 382 5 is_stmt 0 view .LVU2165
 6675              	.LBE489:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6676              		.loc 1 374 9 is_stmt 1 view .LVU2166
 6677 0097 83FD07   		cmpl	$7, %ebp
 6678 009a 7E65     		jle	.L551
 6679              	.LVL663:
 6680              	.L556:
 6681              	.LBB490:
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6682              		.loc 1 375 5 view .LVU2167
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6683              		.loc 1 375 32 is_stmt 0 view .LVU2168
 6684 009c 4C89E1   		movq	%r12, %rcx
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6685              		.loc 1 377 5 view .LVU2169
 6686 009f 488D7001 		leaq	1(%rax), %rsi
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6687              		.loc 1 375 32 view .LVU2170
 6688 00a3 48C1F910 		sarq	$16, %rcx
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6689              		.loc 1 377 5 view .LVU2171
 6690 00a7 4889B3C8 		movq	%rsi, 200(%rbx)
 6690      000000
 6691 00ae 8808     		movb	%cl, (%rax)
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6692              		.loc 1 375 9 view .LVU2172
 6693 00b0 440FB6E9 		movzbl	%cl, %r13d
 6694              	.LVL664:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6695              		.loc 1 377 5 is_stmt 1 view .LVU2173
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6696              		.loc 1 377 5 view .LVU2174
 6697 00b4 4883ABD0 		subq	$1, 208(%rbx)
 6697      00000001 
 6698 00bc 0F846E01 		je	.L578
 6698      0000
 6699              	.L553:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6700              		.loc 1 377 28 view .LVU2175
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 6701              		.loc 1 378 5 view .LVU2176
 6702 00c2 488B83C8 		movq	200(%rbx), %rax
 6702      000000
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 6703              		.loc 1 378 8 is_stmt 0 view .LVU2177
 6704 00c9 4181FDFF 		cmpl	$255, %r13d
 6704      000000
 6705 00d0 75BE     		jne	.L554
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 6706              		.loc 1 379 7 is_stmt 1 view .LVU2178
 6707 00d2 488D4801 		leaq	1(%rax), %rcx
 6708 00d6 48898BC8 		movq	%rcx, 200(%rbx)
 6708      000000
 6709 00dd C60000   		movb	$0, (%rax)
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 6710              		.loc 1 379 7 view .LVU2179
 6711 00e0 4883ABD0 		subq	$1, 208(%rbx)
 6711      00000001 
 6712 00e8 0F845201 		je	.L555
 6712      0000
 6713              	.L576:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6714              		.loc 1 382 14 is_stmt 0 view .LVU2180
 6715 00ee 83ED08   		subl	$8, %ebp
 6716              	.LVL665:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6717              		.loc 1 382 14 view .LVU2181
 6718 00f1 488B83C8 		movq	200(%rbx), %rax
 6718      000000
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 6719              		.loc 1 379 30 is_stmt 1 view .LVU2182
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 6720              		.loc 1 381 5 view .LVU2183
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 6721              		.loc 1 381 16 is_stmt 0 view .LVU2184
 6722 00f8 49C1E408 		salq	$8, %r12
 6723              	.LVL666:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6724              		.loc 1 382 5 is_stmt 1 view .LVU2185
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6725              		.loc 1 382 5 is_stmt 0 view .LVU2186
 6726              	.LBE490:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6727              		.loc 1 374 9 is_stmt 1 view .LVU2187
 6728 00fc 83FD07   		cmpl	$7, %ebp
 6729 00ff 7F9B     		jg	.L556
 6730              	.LVL667:
 6731              	.L551:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6732              		.loc 1 374 9 is_stmt 0 view .LVU2188
 6733              	.LBE488:
 6734              	.LBE487:
 6735              	.LBE486:
 6736              	.LBE485:
 405:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = 0;
 6737              		.loc 1 405 3 is_stmt 1 view .LVU2189
 405:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = 0;
 6738              		.loc 1 405 29 is_stmt 0 view .LVU2190
 6739 0101 48C74318 		movq	$0, 24(%rbx)
 6739      00000000 
 406:fltk-1.3.4-1/jpeg/jchuff.c **** }
 6740              		.loc 1 406 3 is_stmt 1 view .LVU2191
 406:fltk-1.3.4-1/jpeg/jchuff.c **** }
 6741              		.loc 1 406 27 is_stmt 0 view .LVU2192
 6742 0109 C7432000 		movl	$0, 32(%rbx)
 6742      000000
 6743              	.LVL668:
 406:fltk-1.3.4-1/jpeg/jchuff.c **** }
 6744              		.loc 1 406 27 view .LVU2193
 6745              	.LBE484:
 6746              	.LBE483:
1083:fltk-1.3.4-1/jpeg/jchuff.c ****     cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 6747              		.loc 1 1083 5 is_stmt 1 view .LVU2194
1083:fltk-1.3.4-1/jpeg/jchuff.c ****     cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 6748              		.loc 1 1083 10 is_stmt 0 view .LVU2195
 6749 0110 498B4E28 		movq	40(%r14), %rcx
1083:fltk-1.3.4-1/jpeg/jchuff.c ****     cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 6750              		.loc 1 1083 35 view .LVU2196
 6751 0114 488901   		movq	%rax, (%rcx)
1084:fltk-1.3.4-1/jpeg/jchuff.c ****   } else {
 6752              		.loc 1 1084 5 is_stmt 1 view .LVU2197
1084:fltk-1.3.4-1/jpeg/jchuff.c ****   } else {
 6753              		.loc 1 1084 10 is_stmt 0 view .LVU2198
 6754 0117 498B4628 		movq	40(%r14), %rax
1084:fltk-1.3.4-1/jpeg/jchuff.c ****   } else {
 6755              		.loc 1 1084 42 view .LVU2199
 6756 011b 488B93D0 		movq	208(%rbx), %rdx
 6756      000000
1084:fltk-1.3.4-1/jpeg/jchuff.c ****   } else {
 6757              		.loc 1 1084 33 view .LVU2200
 6758 0122 48895008 		movq	%rdx, 8(%rax)
1101:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6759              		.loc 1 1101 1 view .LVU2201
 6760 0126 4883C428 		addq	$40, %rsp
 6761              		.cfi_remember_state
 6762              		.cfi_def_cfa_offset 56
 6763 012a 5B       		popq	%rbx
 6764              		.cfi_def_cfa_offset 48
 6765              	.LVL669:
1101:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6766              		.loc 1 1101 1 view .LVU2202
 6767 012b 5D       		popq	%rbp
 6768              		.cfi_def_cfa_offset 40
 6769 012c 415C     		popq	%r12
 6770              		.cfi_def_cfa_offset 32
 6771 012e 415D     		popq	%r13
 6772              		.cfi_def_cfa_offset 24
 6773 0130 415E     		popq	%r14
 6774              		.cfi_def_cfa_offset 16
 6775              	.LVL670:
1101:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6776              		.loc 1 1101 1 view .LVU2203
 6777 0132 415F     		popq	%r15
 6778              		.cfi_def_cfa_offset 8
 6779 0134 C3       		ret
 6780              	.LVL671:
 6781              		.p2align 4,,10
 6782 0135 0F1F00   		.p2align 3
 6783              	.L549:
 6784              		.cfi_restore_state
1087:fltk-1.3.4-1/jpeg/jchuff.c ****     state.free_in_buffer = cinfo->dest->free_in_buffer;
 6785              		.loc 1 1087 5 is_stmt 1 view .LVU2204
1088:fltk-1.3.4-1/jpeg/jchuff.c ****     ASSIGN_STATE(state.cur, entropy->saved);
 6786              		.loc 1 1088 5 view .LVU2205
1089:fltk-1.3.4-1/jpeg/jchuff.c ****     state.cinfo = cinfo;
 6787              		.loc 1 1089 5 is_stmt 0 view .LVU2206
 6788 0138 8B4B20   		movl	32(%rbx), %ecx
 6789              	.LBB497:
 6790              	.LBB498:
 6791              	.LBB499:
 6792              	.LBB500:
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6793              		.loc 1 324 14 view .LVU2207
 6794 013b 41B97F00 		movl	$127, %r9d
 6794      0000
 6795              	.LBE500:
 6796              	.LBE499:
 6797              	.LBE498:
 6798              	.LBE497:
1089:fltk-1.3.4-1/jpeg/jchuff.c ****     state.cinfo = cinfo;
 6799              		.loc 1 1089 5 view .LVU2208
 6800 0141 488B5318 		movq	24(%rbx), %rdx
 6801 0145 4C8B4324 		movq	36(%rbx), %r8
 6802 0149 4C8B532C 		movq	44(%rbx), %r10
 6803              	.LBB529:
 6804              	.LBB523:
 6805              	.LBB516:
 6806              	.LBB509:
 322:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6807              		.loc 1 322 12 view .LVU2209
 6808 014d 448D6907 		leal	7(%rcx), %r13d
 6809              	.LBE509:
 6810              	.LBE516:
 6811              	.LBE523:
 6812              	.LBE529:
1089:fltk-1.3.4-1/jpeg/jchuff.c ****     state.cinfo = cinfo;
 6813              		.loc 1 1089 5 view .LVU2210
 6814 0151 894C2404 		movl	%ecx, 4(%rsp)
 6815              	.LVL672:
 6816              	.LBB530:
 6817              	.LBB524:
 6818              	.LBB517:
 6819              	.LBB510:
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6820              		.loc 1 324 21 view .LVU2211
 6821 0155 B9180000 		movl	$24, %ecx
 6821      00
 6822              	.LBE510:
 6823              	.LBE517:
 6824              	.LBE524:
 6825              	.LBE530:
1088:fltk-1.3.4-1/jpeg/jchuff.c ****     ASSIGN_STATE(state.cur, entropy->saved);
 6826              		.loc 1 1088 39 view .LVU2212
 6827 015a 488B7708 		movq	8(%rdi), %rsi
 6828              	.LVL673:
1089:fltk-1.3.4-1/jpeg/jchuff.c ****     state.cinfo = cinfo;
 6829              		.loc 1 1089 5 is_stmt 1 view .LVU2213
 6830              	.LBB531:
 6831              	.LBB525:
 6832              	.LBB518:
 6833              	.LBB511:
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6834              		.loc 1 324 21 is_stmt 0 view .LVU2214
 6835 015e 4429E9   		subl	%r13d, %ecx
 6836              	.LBE511:
 6837              	.LBE518:
 6838              	.LBE525:
 6839              	.LBE531:
1089:fltk-1.3.4-1/jpeg/jchuff.c ****     state.cinfo = cinfo;
 6840              		.loc 1 1089 5 view .LVU2215
 6841 0161 48895424 		movq	%rdx, 8(%rsp)
 6841      08
 6842              	.LVL674:
 6843              	.LBB532:
 6844              	.LBB526:
 6845              	.LBB519:
 6846              	.LBB512:
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6847              		.loc 1 324 14 view .LVU2216
 6848 0166 49D3E1   		salq	%cl, %r9
 6849              	.LBE512:
 6850              	.LBE519:
 6851              	.LBE526:
 6852              	.LBE532:
1089:fltk-1.3.4-1/jpeg/jchuff.c ****     state.cinfo = cinfo;
 6853              		.loc 1 1089 5 view .LVU2217
 6854 0169 4C894424 		movq	%r8, 24(%rsp)
 6854      18
 6855              	.LBB533:
 6856              	.LBB527:
 6857              	.LBB520:
 6858              	.LBB513:
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6859              		.loc 1 324 14 view .LVU2218
 6860 016e 4C89C9   		movq	%r9, %rcx
 6861              	.LBE513:
 6862              	.LBE520:
 6863              	.LBE527:
 6864              	.LBE533:
1089:fltk-1.3.4-1/jpeg/jchuff.c ****     state.cinfo = cinfo;
 6865              		.loc 1 1089 5 view .LVU2219
 6866 0171 4C895424 		movq	%r10, 16(%rsp)
 6866      10
1090:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6867              		.loc 1 1090 5 is_stmt 1 view .LVU2220
1093:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_CANT_SUSPEND);
 6868              		.loc 1 1093 5 view .LVU2221
 6869              	.LVL675:
 6870              	.LBB534:
 6871              	.LBI497:
 391:fltk-1.3.4-1/jpeg/jchuff.c **** {
 6872              		.loc 1 391 1 view .LVU2222
 6873              	.LBB528:
 393:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 6874              		.loc 1 393 3 view .LVU2223
 6875              	.LBB521:
 6876              	.LBI499:
 307:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits; return TRUE if successful, FALSE if must suspend */
 6877              		.loc 1 307 1 view .LVU2224
 6878              	.LBB514:
 311:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 6879              		.loc 1 311 3 view .LVU2225
 312:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6880              		.loc 1 312 3 view .LVU2226
 315:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);
 6881              		.loc 1 315 3 view .LVU2227
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6882              		.loc 1 319 3 view .LVU2228
 322:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6883              		.loc 1 322 3 view .LVU2229
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6884              		.loc 1 324 3 view .LVU2230
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6885              		.loc 1 327 3 view .LVU2231
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6886              		.loc 1 327 14 is_stmt 0 view .LVU2232
 6887 0176 4809D1   		orq	%rdx, %rcx
 6888              	.LVL676:
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6889              		.loc 1 327 14 view .LVU2233
 6890 0179 4989CC   		movq	%rcx, %r12
 6891              	.LVL677:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6892              		.loc 1 329 3 is_stmt 1 view .LVU2234
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6893              		.loc 1 329 9 view .LVU2235
 6894 017c 4183FD07 		cmpl	$7, %r13d
 6895 0180 0F8E3201 		jle	.L564
 6895      0000
 6896              	.LVL678:
 6897              	.L562:
 6898              	.LBB501:
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6899              		.loc 1 330 5 view .LVU2236
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6900              		.loc 1 330 32 is_stmt 0 view .LVU2237
 6901 0186 4C89E7   		movq	%r12, %rdi
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6902              		.loc 1 332 5 view .LVU2238
 6903 0189 4C8D7801 		leaq	1(%rax), %r15
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6904              		.loc 1 330 32 view .LVU2239
 6905 018d 48C1FF10 		sarq	$16, %rdi
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6906              		.loc 1 330 9 view .LVU2240
 6907 0191 400FB6D7 		movzbl	%dil, %edx
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6908              		.loc 1 332 5 view .LVU2241
 6909 0195 408838   		movb	%dil, (%rax)
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6910              		.loc 1 330 9 view .LVU2242
 6911 0198 891424   		movl	%edx, (%rsp)
 6912              	.LVL679:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6913              		.loc 1 332 5 is_stmt 1 view .LVU2243
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6914              		.loc 1 332 5 view .LVU2244
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6915              		.loc 1 332 5 is_stmt 0 view .LVU2245
 6916 019b 4883EE01 		subq	$1, %rsi
 6917              	.LVL680:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6918              		.loc 1 332 5 view .LVU2246
 6919 019f 754F     		jne	.L565
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6920              		.loc 1 332 5 is_stmt 1 view .LVU2247
 6921              	.LVL681:
 6922              	.LBB502:
 6923              	.LBI502:
 269:fltk-1.3.4-1/jpeg/jchuff.c **** /* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
 6924              		.loc 1 269 1 view .LVU2248
 6925              	.LBB503:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6926              		.loc 1 272 3 view .LVU2249
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6927              		.loc 1 272 33 is_stmt 0 view .LVU2250
 6928 01a1 498B6E28 		movq	40(%r14), %rbp
 6929              	.LVL682:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 6930              		.loc 1 274 3 is_stmt 1 view .LVU2251
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 6931              		.loc 1 274 10 is_stmt 0 view .LVU2252
 6932 01a5 4C89F7   		movq	%r14, %rdi
 6933 01a8 FF5518   		call	*24(%rbp)
 6934              	.LVL683:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 6935              		.loc 1 274 6 view .LVU2253
 6936 01ab 85C0     		testl	%eax, %eax
 6937 01ad 0F84AD00 		je	.L560
 6937      0000
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 6938              		.loc 1 277 3 is_stmt 1 view .LVU2254
 6939              	.LBE503:
 6940              	.LBE502:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 6941              		.loc 1 333 8 is_stmt 0 view .LVU2255
 6942 01b3 813C24FF 		cmpl	$255, (%rsp)
 6942      000000
 6943              	.LBB505:
 6944              	.LBB504:
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 6945              		.loc 1 277 33 view .LVU2256
 6946 01ba 488B4500 		movq	0(%rbp), %rax
 6947              	.LVL684:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 6948              		.loc 1 278 3 is_stmt 1 view .LVU2257
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 6949              		.loc 1 278 31 is_stmt 0 view .LVU2258
 6950 01be 488B7508 		movq	8(%rbp), %rsi
 6951              	.LVL685:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 6952              		.loc 1 279 3 is_stmt 1 view .LVU2259
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 6953              		.loc 1 279 3 is_stmt 0 view .LVU2260
 6954              	.LBE504:
 6955              	.LBE505:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6956              		.loc 1 332 40 is_stmt 1 view .LVU2261
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 6957              		.loc 1 333 5 view .LVU2262
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 6958              		.loc 1 333 8 is_stmt 0 view .LVU2263
 6959 01c2 7438     		je	.L579
 6960              	.LVL686:
 6961              	.L561:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 6962              		.loc 1 334 42 is_stmt 1 view .LVU2264
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 6963              		.loc 1 336 5 view .LVU2265
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6964              		.loc 1 337 14 is_stmt 0 view .LVU2266
 6965 01c4 4183ED08 		subl	$8, %r13d
 6966              	.LVL687:
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 6967              		.loc 1 336 16 view .LVU2267
 6968 01c8 49C1E408 		salq	$8, %r12
 6969              	.LVL688:
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6970              		.loc 1 337 5 is_stmt 1 view .LVU2268
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6971              		.loc 1 337 5 is_stmt 0 view .LVU2269
 6972              	.LBE501:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6973              		.loc 1 329 9 is_stmt 1 view .LVU2270
 6974 01cc 4183FD07 		cmpl	$7, %r13d
 6975 01d0 7FB4     		jg	.L562
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6976              		.loc 1 329 9 is_stmt 0 view .LVU2271
 6977 01d2 498B7E28 		movq	40(%r14), %rdi
 6978 01d6 4989C7   		movq	%rax, %r15
 6979              	.LVL689:
 6980              	.L558:
 340:fltk-1.3.4-1/jpeg/jchuff.c ****   state->cur.put_bits = put_bits;
 6981              		.loc 1 340 3 is_stmt 1 view .LVU2272
 341:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6982              		.loc 1 341 3 view .LVU2273
 343:fltk-1.3.4-1/jpeg/jchuff.c **** }
 6983              		.loc 1 343 3 view .LVU2274
 343:fltk-1.3.4-1/jpeg/jchuff.c **** }
 6984              		.loc 1 343 3 is_stmt 0 view .LVU2275
 6985              	.LBE514:
 6986              	.LBE521:
 395:fltk-1.3.4-1/jpeg/jchuff.c ****   state->cur.put_bits = 0;
 6987              		.loc 1 395 3 is_stmt 1 view .LVU2276
 396:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 6988              		.loc 1 396 3 view .LVU2277
 397:fltk-1.3.4-1/jpeg/jchuff.c **** }
 6989              		.loc 1 397 3 view .LVU2278
 396:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 6990              		.loc 1 396 23 is_stmt 0 view .LVU2279
 6991 01d9 C7442404 		movl	$0, 4(%rsp)
 6991      00000000 
 395:fltk-1.3.4-1/jpeg/jchuff.c ****   state->cur.put_bits = 0;
 6992              		.loc 1 395 25 view .LVU2280
 6993 01e1 48C74424 		movq	$0, 8(%rsp)
 6993      08000000 
 6993      00
 6994 01ea E9890000 		jmp	.L563
 6994      00
 6995              	.LVL690:
 6996 01ef 90       		.p2align 4,,10
 6997              		.p2align 3
 6998              	.L565:
 6999              	.LBB522:
 7000              	.LBB515:
 7001              	.LBB508:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 7002              		.loc 1 333 8 view .LVU2281
 7003 01f0 813C24FF 		cmpl	$255, (%rsp)
 7003      000000
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7004              		.loc 1 332 5 view .LVU2282
 7005 01f7 4C89F8   		movq	%r15, %rax
 7006              	.LVL691:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7007              		.loc 1 332 40 is_stmt 1 view .LVU2283
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 7008              		.loc 1 333 5 view .LVU2284
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 7009              		.loc 1 333 8 is_stmt 0 view .LVU2285
 7010 01fa 75C8     		jne	.L561
 7011              	.LVL692:
 7012              	.L579:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 7013              		.loc 1 334 7 is_stmt 1 view .LVU2286
 7014 01fc C60000   		movb	$0, (%rax)
 7015 01ff 4C8D7801 		leaq	1(%rax), %r15
 7016              	.LVL693:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 7017              		.loc 1 334 7 view .LVU2287
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 7018              		.loc 1 334 7 is_stmt 0 view .LVU2288
 7019 0203 4883EE01 		subq	$1, %rsi
 7020              	.LVL694:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 7021              		.loc 1 334 7 view .LVU2289
 7022 0207 751F     		jne	.L566
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 7023              		.loc 1 334 7 is_stmt 1 view .LVU2290
 7024              	.LVL695:
 7025              	.LBB506:
 7026              	.LBI506:
 269:fltk-1.3.4-1/jpeg/jchuff.c **** /* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
 7027              		.loc 1 269 1 view .LVU2291
 7028              	.LBB507:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7029              		.loc 1 272 3 view .LVU2292
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7030              		.loc 1 272 33 is_stmt 0 view .LVU2293
 7031 0209 498B6E28 		movq	40(%r14), %rbp
 7032              	.LVL696:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 7033              		.loc 1 274 3 is_stmt 1 view .LVU2294
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 7034              		.loc 1 274 10 is_stmt 0 view .LVU2295
 7035 020d 4C89F7   		movq	%r14, %rdi
 7036 0210 FF5518   		call	*24(%rbp)
 7037              	.LVL697:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 7038              		.loc 1 274 6 view .LVU2296
 7039 0213 85C0     		testl	%eax, %eax
 7040 0215 7449     		je	.L560
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 7041              		.loc 1 277 3 is_stmt 1 view .LVU2297
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 7042              		.loc 1 277 33 is_stmt 0 view .LVU2298
 7043 0217 488B4500 		movq	0(%rbp), %rax
 7044              	.LVL698:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 7045              		.loc 1 278 3 is_stmt 1 view .LVU2299
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 7046              		.loc 1 278 31 is_stmt 0 view .LVU2300
 7047 021b 488B7508 		movq	8(%rbp), %rsi
 7048              	.LVL699:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 7049              		.loc 1 279 3 is_stmt 1 view .LVU2301
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 7050              		.loc 1 279 3 is_stmt 0 view .LVU2302
 7051 021f EBA3     		jmp	.L561
 7052              	.LVL700:
 7053              		.p2align 4,,10
 7054 0221 0F1F8000 		.p2align 3
 7054      000000
 7055              	.L566:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 7056              		.loc 1 279 3 view .LVU2303
 7057              	.LBE507:
 7058              	.LBE506:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 7059              		.loc 1 334 7 view .LVU2304
 7060 0228 4C89F8   		movq	%r15, %rax
 7061 022b EB97     		jmp	.L561
 7062              	.LVL701:
 7063 022d 0F1F00   		.p2align 4,,10
 7064              		.p2align 3
 7065              	.L578:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 7066              		.loc 1 334 7 view .LVU2305
 7067              	.LBE508:
 7068              	.LBE515:
 7069              	.LBE522:
 7070              	.LBE528:
 7071              	.LBE534:
 7072              	.LBB535:
 7073              	.LBB496:
 7074              	.LBB495:
 7075              	.LBB494:
 7076              	.LBB493:
 7077              	.LBB492:
 7078              	.LBB491:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7079              		.loc 1 377 5 is_stmt 1 view .LVU2306
 7080 0230 4889DF   		movq	%rbx, %rdi
 7081 0233 E8000000 		call	dump_buffer_e
 7081      00
 7082              	.LVL702:
 7083 0238 E985FEFF 		jmp	.L553
 7083      FF
 7084 023d 0F1F00   		.p2align 4,,10
 7085              		.p2align 3
 7086              	.L555:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 7087              		.loc 1 379 7 view .LVU2307
 7088 0240 4889DF   		movq	%rbx, %rdi
 7089 0243 E8000000 		call	dump_buffer_e
 7089      00
 7090              	.LVL703:
 7091 0248 E9A1FEFF 		jmp	.L576
 7091      FF
 7092              	.LVL704:
 7093 024d 0F1F00   		.p2align 4,,10
 7094              		.p2align 3
 7095              	.L577:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 7096              		.loc 1 379 7 is_stmt 0 view .LVU2308
 7097 0250 488B83C8 		movq	200(%rbx), %rax
 7097      000000
 7098 0257 E9A5FEFF 		jmp	.L551
 7098      FF
 7099              	.LVL705:
 7100 025c 0F1F4000 		.p2align 4,,10
 7101              		.p2align 3
 7102              	.L560:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 7103              		.loc 1 379 7 view .LVU2309
 7104              	.LBE491:
 7105              	.LBE492:
 7106              	.LBE493:
 7107              	.LBE494:
 7108              	.LBE495:
 7109              	.LBE496:
 7110              	.LBE535:
1094:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7111              		.loc 1 1094 7 is_stmt 1 view .LVU2310
 7112 0260 498B06   		movq	(%r14), %rax
 7113 0263 4C89F7   		movq	%r14, %rdi
 7114 0266 C7402819 		movl	$25, 40(%rax)
 7114      000000
 7115 026d 498B06   		movq	(%r14), %rax
 7116 0270 FF10     		call	*(%rax)
 7117              	.LVL706:
 7118 0272 498B7E28 		movq	40(%r14), %rdi
 7119 0276 31F6     		xorl	%esi, %esi
 7120              	.LVL707:
 7121              	.L563:
1097:fltk-1.3.4-1/jpeg/jchuff.c ****     cinfo->dest->free_in_buffer = state.free_in_buffer;
 7122              		.loc 1 1097 5 view .LVU2311
1097:fltk-1.3.4-1/jpeg/jchuff.c ****     cinfo->dest->free_in_buffer = state.free_in_buffer;
 7123              		.loc 1 1097 35 is_stmt 0 view .LVU2312
 7124 0278 4C893F   		movq	%r15, (%rdi)
1098:fltk-1.3.4-1/jpeg/jchuff.c ****     ASSIGN_STATE(entropy->saved, state.cur);
 7125              		.loc 1 1098 5 is_stmt 1 view .LVU2313
1098:fltk-1.3.4-1/jpeg/jchuff.c ****     ASSIGN_STATE(entropy->saved, state.cur);
 7126              		.loc 1 1098 10 is_stmt 0 view .LVU2314
 7127 027b 498B4628 		movq	40(%r14), %rax
1098:fltk-1.3.4-1/jpeg/jchuff.c ****     ASSIGN_STATE(entropy->saved, state.cur);
 7128              		.loc 1 1098 33 view .LVU2315
 7129 027f 48897008 		movq	%rsi, 8(%rax)
1099:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 7130              		.loc 1 1099 5 is_stmt 1 view .LVU2316
 7131 0283 488B4424 		movq	8(%rsp), %rax
 7131      08
 7132 0288 48894318 		movq	%rax, 24(%rbx)
 7133 028c 8B442404 		movl	4(%rsp), %eax
 7134 0290 894320   		movl	%eax, 32(%rbx)
 7135 0293 488B4424 		movq	24(%rsp), %rax
 7135      18
 7136 0298 48894324 		movq	%rax, 36(%rbx)
 7137 029c 488B4424 		movq	16(%rsp), %rax
 7137      10
 7138 02a1 4889432C 		movq	%rax, 44(%rbx)
 7139              	.LVL708:
1101:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7140              		.loc 1 1101 1 is_stmt 0 view .LVU2317
 7141 02a5 4883C428 		addq	$40, %rsp
 7142              		.cfi_remember_state
 7143              		.cfi_def_cfa_offset 56
 7144 02a9 5B       		popq	%rbx
 7145              		.cfi_def_cfa_offset 48
 7146              	.LVL709:
1101:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7147              		.loc 1 1101 1 view .LVU2318
 7148 02aa 5D       		popq	%rbp
 7149              		.cfi_def_cfa_offset 40
 7150 02ab 415C     		popq	%r12
 7151              		.cfi_def_cfa_offset 32
 7152 02ad 415D     		popq	%r13
 7153              		.cfi_def_cfa_offset 24
 7154 02af 415E     		popq	%r14
 7155              		.cfi_def_cfa_offset 16
 7156              	.LVL710:
1101:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7157              		.loc 1 1101 1 view .LVU2319
 7158 02b1 415F     		popq	%r15
 7159              		.cfi_def_cfa_offset 8
 7160 02b3 C3       		ret
 7161              	.LVL711:
 7162              		.p2align 4,,10
 7163 02b4 0F1F4000 		.p2align 3
 7164              	.L564:
 7165              		.cfi_restore_state
1087:fltk-1.3.4-1/jpeg/jchuff.c ****     state.free_in_buffer = cinfo->dest->free_in_buffer;
 7166              		.loc 1 1087 28 view .LVU2320
 7167 02b8 4989C7   		movq	%rax, %r15
 7168 02bb E919FFFF 		jmp	.L558
 7168      FF
 7169              		.cfi_endproc
 7170              	.LFE70:
 7172              		.section	.text.encode_mcu_huff,"ax",@progbits
 7173              		.p2align 4
 7175              	encode_mcu_huff:
 7176              	.LVL712:
 7177              	.LFB69:
1014:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 7178              		.loc 1 1014 1 is_stmt 1 view -0
 7179              		.cfi_startproc
1014:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 7180              		.loc 1 1014 1 is_stmt 0 view .LVU2322
 7181 0000 F30F1EFA 		endbr64
 7182 0004 4157     		pushq	%r15
 7183              		.cfi_def_cfa_offset 16
 7184              		.cfi_offset 15, -16
 7185 0006 4989FF   		movq	%rdi, %r15
 7186 0009 4156     		pushq	%r14
 7187              		.cfi_def_cfa_offset 24
 7188              		.cfi_offset 14, -24
 7189 000b 4155     		pushq	%r13
 7190              		.cfi_def_cfa_offset 32
 7191              		.cfi_offset 13, -32
 7192 000d 4154     		pushq	%r12
 7193              		.cfi_def_cfa_offset 40
 7194              		.cfi_offset 12, -40
 7195 000f 55       		pushq	%rbp
 7196              		.cfi_def_cfa_offset 48
 7197              		.cfi_offset 6, -48
 7198 0010 53       		pushq	%rbx
 7199              		.cfi_def_cfa_offset 56
 7200              		.cfi_offset 3, -56
 7201 0011 4881ECB8 		subq	$184, %rsp
 7201      000000
 7202              		.cfi_def_cfa_offset 240
1015:fltk-1.3.4-1/jpeg/jchuff.c ****   working_state state;
 7203              		.loc 1 1015 20 view .LVU2323
 7204 0018 488B9F30 		movq	560(%rdi), %rbx
 7204      020000
1027:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 7205              		.loc 1 1027 6 view .LVU2324
 7206 001f 448B8F3C 		movl	316(%rdi), %r9d
 7206      010000
1014:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 7207              		.loc 1 1014 1 view .LVU2325
 7208 0026 48897424 		movq	%rsi, 64(%rsp)
 7208      40
1023:fltk-1.3.4-1/jpeg/jchuff.c ****   state.cinfo = cinfo;
 7209              		.loc 1 1023 3 view .LVU2326
 7210 002b F30F6F53 		movdqu	40(%rbx), %xmm2
 7210      28
 7211 0030 F30F6F43 		movdqu	24(%rbx), %xmm0
 7211      18
 7212 0035 4C8B7318 		movq	24(%rbx), %r14
 7213 0039 448B6B20 		movl	32(%rbx), %r13d
1014:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 7214              		.loc 1 1014 1 view .LVU2327
 7215 003d 64488B04 		movq	%fs:40, %rax
 7215      25280000 
 7215      00
 7216 0046 48898424 		movq	%rax, 168(%rsp)
 7216      A8000000 
 7217 004e 31C0     		xorl	%eax, %eax
1015:fltk-1.3.4-1/jpeg/jchuff.c ****   working_state state;
 7218              		.loc 1 1015 3 is_stmt 1 view .LVU2328
1021:fltk-1.3.4-1/jpeg/jchuff.c ****   state.free_in_buffer = cinfo->dest->free_in_buffer;
 7219              		.loc 1 1021 33 is_stmt 0 view .LVU2329
 7220 0050 488B4728 		movq	40(%rdi), %rax
1015:fltk-1.3.4-1/jpeg/jchuff.c ****   working_state state;
 7221              		.loc 1 1015 20 view .LVU2330
 7222 0054 48895C24 		movq	%rbx, 104(%rsp)
 7222      68
 7223              	.LVL713:
1016:fltk-1.3.4-1/jpeg/jchuff.c ****   int blkn, ci;
 7224              		.loc 1 1016 3 is_stmt 1 view .LVU2331
1017:fltk-1.3.4-1/jpeg/jchuff.c ****   jpeg_component_info * compptr;
 7225              		.loc 1 1017 3 view .LVU2332
1018:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7226              		.loc 1 1018 3 view .LVU2333
1021:fltk-1.3.4-1/jpeg/jchuff.c ****   state.free_in_buffer = cinfo->dest->free_in_buffer;
 7227              		.loc 1 1021 3 view .LVU2334
1023:fltk-1.3.4-1/jpeg/jchuff.c ****   state.cinfo = cinfo;
 7228              		.loc 1 1023 3 is_stmt 0 view .LVU2335
 7229 0059 0F298424 		movaps	%xmm0, 128(%rsp)
 7229      80000000 
1021:fltk-1.3.4-1/jpeg/jchuff.c ****   state.free_in_buffer = cinfo->dest->free_in_buffer;
 7230              		.loc 1 1021 39 view .LVU2336
 7231 0061 488B30   		movq	(%rax), %rsi
 7232              	.LVL714:
1022:fltk-1.3.4-1/jpeg/jchuff.c ****   ASSIGN_STATE(state.cur, entropy->saved);
 7233              		.loc 1 1022 3 is_stmt 1 view .LVU2337
1023:fltk-1.3.4-1/jpeg/jchuff.c ****   state.cinfo = cinfo;
 7234              		.loc 1 1023 3 is_stmt 0 view .LVU2338
 7235 0064 0F291424 		movaps	%xmm2, (%rsp)
1022:fltk-1.3.4-1/jpeg/jchuff.c ****   ASSIGN_STATE(state.cur, entropy->saved);
 7236              		.loc 1 1022 37 view .LVU2339
 7237 0068 488B4008 		movq	8(%rax), %rax
 7238              	.LVL715:
1023:fltk-1.3.4-1/jpeg/jchuff.c ****   state.cinfo = cinfo;
 7239              		.loc 1 1023 3 is_stmt 1 view .LVU2340
1024:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7240              		.loc 1 1024 3 view .LVU2341
1027:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 7241              		.loc 1 1027 3 view .LVU2342
1023:fltk-1.3.4-1/jpeg/jchuff.c ****   state.cinfo = cinfo;
 7242              		.loc 1 1023 3 is_stmt 0 view .LVU2343
 7243 006c 0F299424 		movaps	%xmm2, 144(%rsp)
 7243      90000000 
1027:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 7244              		.loc 1 1027 6 view .LVU2344
 7245 0074 4585C9   		testl	%r9d, %r9d
 7246 0077 7410     		je	.L584
1028:fltk-1.3.4-1/jpeg/jchuff.c ****       if (! emit_restart_s(&state, entropy->next_restart_num))
 7247              		.loc 1 1028 5 is_stmt 1 view .LVU2345
1028:fltk-1.3.4-1/jpeg/jchuff.c ****       if (! emit_restart_s(&state, entropy->next_restart_num))
 7248              		.loc 1 1028 8 is_stmt 0 view .LVU2346
 7249 0079 488B4C24 		movq	104(%rsp), %rcx
 7249      68
 7250 007e 8B7938   		movl	56(%rcx), %edi
 7251              	.LVL716:
1028:fltk-1.3.4-1/jpeg/jchuff.c ****       if (! emit_restart_s(&state, entropy->next_restart_num))
 7252              		.loc 1 1028 8 view .LVU2347
 7253 0081 85FF     		testl	%edi, %edi
 7254 0083 0F844708 		je	.L731
 7254      0000
 7255              	.LVL717:
 7256              	.L584:
1034:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
 7257              		.loc 1 1034 18 is_stmt 1 discriminator 1 view .LVU2348
1034:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
 7258              		.loc 1 1034 3 is_stmt 0 discriminator 1 view .LVU2349
 7259 0089 48C74424 		movq	$0, 32(%rsp)
 7259      20000000 
 7259      00
 7260 0092 458B87A0 		movl	416(%r15), %r8d
 7260      010000
 7261 0099 4585C0   		testl	%r8d, %r8d
 7262 009c 0F8E2904 		jle	.L583
 7262      0000
 7263              	.LVL718:
 7264              		.p2align 4,,10
 7265 00a2 660F1F44 		.p2align 3
 7265      0000
 7266              	.L582:
1035:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
 7267              		.loc 1 1035 5 is_stmt 1 view .LVU2350
1036:fltk-1.3.4-1/jpeg/jchuff.c ****     if (! encode_one_block(&state,
 7268              		.loc 1 1036 5 view .LVU2351
1036:fltk-1.3.4-1/jpeg/jchuff.c ****     if (! encode_one_block(&state,
 7269              		.loc 1 1036 13 is_stmt 0 view .LVU2352
 7270 00a8 488B7C24 		movq	32(%rsp), %rdi
 7270      20
1037:fltk-1.3.4-1/jpeg/jchuff.c **** 			   MCU_data[blkn][0], state.cur.last_dc_val[ci],
 7271              		.loc 1 1037 11 view .LVU2353
 7272 00ad 488B5C24 		movq	104(%rsp), %rbx
 7272      68
1036:fltk-1.3.4-1/jpeg/jchuff.c ****     if (! encode_one_block(&state,
 7273              		.loc 1 1036 13 view .LVU2354
 7274 00b2 496394BF 		movslq	420(%r15,%rdi,4), %rdx
 7274      A4010000 
 7275 00ba 498B8CD7 		movq	376(%r15,%rdx,8), %rcx
 7275      78010000 
 7276              	.LVL719:
1037:fltk-1.3.4-1/jpeg/jchuff.c **** 			   MCU_data[blkn][0], state.cur.last_dc_val[ci],
 7277              		.loc 1 1037 5 is_stmt 1 view .LVU2355
1037:fltk-1.3.4-1/jpeg/jchuff.c **** 			   MCU_data[blkn][0], state.cur.last_dc_val[ci],
 7278              		.loc 1 1037 11 is_stmt 0 view .LVU2356
 7279 00c2 448B8C94 		movl	140(%rsp,%rdx,4), %r9d
 7279      8C000000 
1036:fltk-1.3.4-1/jpeg/jchuff.c ****     if (! encode_one_block(&state,
 7280              		.loc 1 1036 13 view .LVU2357
 7281 00ca 48895424 		movq	%rdx, 88(%rsp)
 7281      58
1037:fltk-1.3.4-1/jpeg/jchuff.c **** 			   MCU_data[blkn][0], state.cur.last_dc_val[ci],
 7282              		.loc 1 1037 11 view .LVU2358
 7283 00cf 488B5424 		movq	64(%rsp), %rdx
 7283      40
 7284 00d4 4C634118 		movslq	24(%rcx), %r8
 7285 00d8 48634914 		movslq	20(%rcx), %rcx
 7286              	.LVL720:
1037:fltk-1.3.4-1/jpeg/jchuff.c **** 			   MCU_data[blkn][0], state.cur.last_dc_val[ci],
 7287              		.loc 1 1037 11 view .LVU2359
 7288 00dc 488B3CFA 		movq	(%rdx,%rdi,8), %rdi
 7289              	.LBB595:
 7290              	.LBB596:
 919:fltk-1.3.4-1/jpeg/jchuff.c ****   const int * natural_order = state->cinfo->natural_order;
 7291              		.loc 1 919 7 view .LVU2360
 7292 00e0 418B97E8 		movl	488(%r15), %edx
 7292      010000
 7293              	.LBE596:
 7294              	.LBE595:
1037:fltk-1.3.4-1/jpeg/jchuff.c **** 			   MCU_data[blkn][0], state.cur.last_dc_val[ci],
 7295              		.loc 1 1037 11 view .LVU2361
 7296 00e7 4E8B54C3 		movq	96(%rbx,%r8,8), %r10
 7296      60
 7297 00ec 488B5CCB 		movq	64(%rbx,%rcx,8), %rbx
 7297      40
 7298              	.LBB670:
 7299              	.LBB665:
 924:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7300              		.loc 1 924 23 view .LVU2362
 7301 00f1 440FBF07 		movswl	(%rdi), %r8d
 919:fltk-1.3.4-1/jpeg/jchuff.c ****   const int * natural_order = state->cinfo->natural_order;
 7302              		.loc 1 919 7 view .LVU2363
 7303 00f5 89542434 		movl	%edx, 52(%rsp)
 920:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7304              		.loc 1 920 15 view .LVU2364
 7305 00f9 498B97E0 		movq	480(%r15), %rdx
 7305      010000
 7306              	.LBE665:
 7307              	.LBE670:
1037:fltk-1.3.4-1/jpeg/jchuff.c **** 			   MCU_data[blkn][0], state.cur.last_dc_val[ci],
 7308              		.loc 1 1037 11 view .LVU2365
 7309 0100 4C895424 		movq	%r10, 40(%rsp)
 7309      28
 7310              	.LBB671:
 7311              	.LBB666:
 924:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7312              		.loc 1 924 16 view .LVU2366
 7313 0105 4489C1   		movl	%r8d, %ecx
 7314              	.LBE666:
 7315              	.LBE671:
1037:fltk-1.3.4-1/jpeg/jchuff.c **** 			   MCU_data[blkn][0], state.cur.last_dc_val[ci],
 7316              		.loc 1 1037 11 view .LVU2367
 7317 0108 48897C24 		movq	%rdi, 72(%rsp)
 7317      48
 7318              	.LVL721:
 7319              	.LBB672:
 7320              	.LBI595:
 913:fltk-1.3.4-1/jpeg/jchuff.c **** 		  c_derived_tbl *dctbl, c_derived_tbl *actbl)
 7321              		.loc 1 913 1 is_stmt 1 view .LVU2368
 7322              	.LBB667:
 916:fltk-1.3.4-1/jpeg/jchuff.c ****   register int nbits;
 7323              		.loc 1 916 3 view .LVU2369
 917:fltk-1.3.4-1/jpeg/jchuff.c ****   register int r, k;
 7324              		.loc 1 917 3 view .LVU2370
 918:fltk-1.3.4-1/jpeg/jchuff.c ****   int Se = state->cinfo->lim_Se;
 7325              		.loc 1 918 3 view .LVU2371
 919:fltk-1.3.4-1/jpeg/jchuff.c ****   const int * natural_order = state->cinfo->natural_order;
 7326              		.loc 1 919 3 view .LVU2372
 920:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7327              		.loc 1 920 3 view .LVU2373
 924:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7328              		.loc 1 924 16 is_stmt 0 view .LVU2374
 7329 010d 4429C9   		subl	%r9d, %ecx
 920:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7330              		.loc 1 920 15 view .LVU2375
 7331 0110 48895424 		movq	%rdx, 80(%rsp)
 7331      50
 7332              	.LVL722:
 924:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7333              		.loc 1 924 3 is_stmt 1 view .LVU2376
 926:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = -temp;		/* temp is abs value of input */
 7334              		.loc 1 926 3 view .LVU2377
 7335 0115 890C24   		movl	%ecx, (%rsp)
 926:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = -temp;		/* temp is abs value of input */
 7336              		.loc 1 926 6 is_stmt 0 view .LVU2378
 7337 0118 790C     		jns	.L599
 927:fltk-1.3.4-1/jpeg/jchuff.c ****     /* For a negative input, want temp2 = bitwise complement of abs(input) */
 7338              		.loc 1 927 5 is_stmt 1 view .LVU2379
 7339              	.LVL723:
 930:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 7340              		.loc 1 930 5 view .LVU2380
 930:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 7341              		.loc 1 930 10 is_stmt 0 view .LVU2381
 7342 011a 8D79FF   		leal	-1(%rcx), %edi
 7343              	.LVL724:
 927:fltk-1.3.4-1/jpeg/jchuff.c ****     /* For a negative input, want temp2 = bitwise complement of abs(input) */
 7344              		.loc 1 927 10 view .LVU2382
 7345 011d 4489C9   		movl	%r9d, %ecx
 7346              	.LVL725:
 930:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 7347              		.loc 1 930 10 view .LVU2383
 7348 0120 893C24   		movl	%edi, (%rsp)
 7349              	.LVL726:
 927:fltk-1.3.4-1/jpeg/jchuff.c ****     /* For a negative input, want temp2 = bitwise complement of abs(input) */
 7350              		.loc 1 927 10 view .LVU2384
 7351 0123 4429C1   		subl	%r8d, %ecx
 7352              	.LVL727:
 7353              	.L599:
 934:fltk-1.3.4-1/jpeg/jchuff.c ****   while (temp) {
 7354              		.loc 1 934 3 is_stmt 1 view .LVU2385
 935:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits++;
 7355              		.loc 1 935 3 view .LVU2386
 935:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits++;
 7356              		.loc 1 935 9 view .LVU2387
 934:fltk-1.3.4-1/jpeg/jchuff.c ****   while (temp) {
 7357              		.loc 1 934 9 is_stmt 0 view .LVU2388
 7358 0126 4531E4   		xorl	%r12d, %r12d
 935:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits++;
 7359              		.loc 1 935 9 view .LVU2389
 7360 0129 85C9     		testl	%ecx, %ecx
 7361 012b 7437     		je	.L600
 7362              	.LVL728:
 7363 012d 0F1F00   		.p2align 4,,10
 7364              		.p2align 3
 7365              	.L601:
 936:fltk-1.3.4-1/jpeg/jchuff.c ****     temp >>= 1;
 7366              		.loc 1 936 5 is_stmt 1 view .LVU2390
 936:fltk-1.3.4-1/jpeg/jchuff.c ****     temp >>= 1;
 7367              		.loc 1 936 10 is_stmt 0 view .LVU2391
 7368 0130 4183C401 		addl	$1, %r12d
 7369              	.LVL729:
 937:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 7370              		.loc 1 937 5 is_stmt 1 view .LVU2392
 935:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits++;
 7371              		.loc 1 935 9 view .LVU2393
 7372 0134 D1F9     		sarl	%ecx
 7373              	.LVL730:
 935:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits++;
 7374              		.loc 1 935 9 is_stmt 0 view .LVU2394
 7375 0136 75F8     		jne	.L601
 942:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(state->cinfo, JERR_BAD_DCT_COEF);
 7376              		.loc 1 942 3 is_stmt 1 view .LVU2395
 942:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(state->cinfo, JERR_BAD_DCT_COEF);
 7377              		.loc 1 942 6 is_stmt 0 view .LVU2396
 7378 0138 4183FC0B 		cmpl	$11, %r12d
 7379 013c 7E26     		jle	.L600
 943:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7380              		.loc 1 943 5 view .LVU2397
 7381 013e 498B0F   		movq	(%r15), %rcx
 7382              	.LVL731:
 943:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7383              		.loc 1 943 5 view .LVU2398
 7384 0141 48894424 		movq	%rax, 56(%rsp)
 7384      38
 7385 0146 4C89FF   		movq	%r15, %rdi
 7386 0149 48897424 		movq	%rsi, 24(%rsp)
 7386      18
 943:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7387              		.loc 1 943 5 is_stmt 1 view .LVU2399
 7388 014e C7412806 		movl	$6, 40(%rcx)
 7388      000000
 7389              	.LVL732:
 943:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7390              		.loc 1 943 5 is_stmt 0 view .LVU2400
 7391 0155 498B0F   		movq	(%r15), %rcx
 7392 0158 FF11     		call	*(%rcx)
 7393              	.LVL733:
 943:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7394              		.loc 1 943 5 view .LVU2401
 7395 015a 488B7424 		movq	24(%rsp), %rsi
 7395      18
 7396 015f 488B4424 		movq	56(%rsp), %rax
 7396      38
 7397              	.LVL734:
 7398              	.L600:
 946:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 7399              		.loc 1 946 3 is_stmt 1 view .LVU2402
 946:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 7400              		.loc 1 946 63 is_stmt 0 view .LVU2403
 7401 0164 4963CC   		movslq	%r12d, %rcx
 946:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 7402              		.loc 1 946 9 view .LVU2404
 7403 0167 0FB6AC0B 		movzbl	1024(%rbx,%rcx), %ebp
 7403      00040000 
 7404 016f 8B1C8B   		movl	(%rbx,%rcx,4), %ebx
 7405              	.LVL735:
 7406              	.LBB597:
 7407              	.LBI597:
 307:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits; return TRUE if successful, FALSE if must suspend */
 7408              		.loc 1 307 1 is_stmt 1 view .LVU2405
 7409              	.LBB598:
 311:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 7410              		.loc 1 311 3 view .LVU2406
 312:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7411              		.loc 1 312 3 view .LVU2407
 315:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);
 7412              		.loc 1 315 3 view .LVU2408
 315:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);
 7413              		.loc 1 315 6 is_stmt 0 view .LVU2409
 7414 0172 85ED     		testl	%ebp, %ebp
 7415 0174 7526     		jne	.L602
 316:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7416              		.loc 1 316 5 view .LVU2410
 7417 0176 498B0F   		movq	(%r15), %rcx
 7418 0179 48894424 		movq	%rax, 56(%rsp)
 7418      38
 7419 017e 4C89FF   		movq	%r15, %rdi
 7420 0181 48897424 		movq	%rsi, 24(%rsp)
 7420      18
 316:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7421              		.loc 1 316 5 is_stmt 1 view .LVU2411
 7422 0186 C7412829 		movl	$41, 40(%rcx)
 7422      000000
 7423 018d 498B0F   		movq	(%r15), %rcx
 7424 0190 FF11     		call	*(%rcx)
 7425              	.LVL736:
 7426 0192 488B4424 		movq	56(%rsp), %rax
 7426      38
 7427 0197 488B7424 		movq	24(%rsp), %rsi
 7427      18
 7428              	.L602:
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7429              		.loc 1 319 3 view .LVU2412
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7430              		.loc 1 319 47 is_stmt 0 view .LVU2413
 7431 019c 89E9     		movl	%ebp, %ecx
 7432 019e 41B80100 		movl	$1, %r8d
 7432      0000
 322:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7433              		.loc 1 322 12 view .LVU2414
 7434 01a4 4101ED   		addl	%ebp, %r13d
 7435              	.LVL737:
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7436              		.loc 1 319 47 view .LVU2415
 7437 01a7 49D3E0   		salq	%cl, %r8
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7438              		.loc 1 324 21 view .LVU2416
 7439 01aa B9180000 		movl	$24, %ecx
 7439      00
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7440              		.loc 1 319 56 view .LVU2417
 7441 01af 4983E801 		subq	$1, %r8
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7442              		.loc 1 324 21 view .LVU2418
 7443 01b3 4429E9   		subl	%r13d, %ecx
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7444              		.loc 1 319 14 view .LVU2419
 7445 01b6 4121D8   		andl	%ebx, %r8d
 7446              	.LVL738:
 322:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7447              		.loc 1 322 3 is_stmt 1 view .LVU2420
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7448              		.loc 1 324 3 view .LVU2421
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7449              		.loc 1 324 14 is_stmt 0 view .LVU2422
 7450 01b9 49D3E0   		salq	%cl, %r8
 7451              	.LVL739:
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7452              		.loc 1 327 3 is_stmt 1 view .LVU2423
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7453              		.loc 1 327 14 is_stmt 0 view .LVU2424
 7454 01bc 4D09C6   		orq	%r8, %r14
 7455              	.LVL740:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 7456              		.loc 1 329 3 is_stmt 1 view .LVU2425
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 7457              		.loc 1 329 9 view .LVU2426
 7458 01bf 4183FD07 		cmpl	$7, %r13d
 7459 01c3 7E34     		jle	.L603
 7460              	.LVL741:
 7461              	.L608:
 7462              	.LBB599:
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7463              		.loc 1 330 5 view .LVU2427
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7464              		.loc 1 330 32 is_stmt 0 view .LVU2428
 7465 01c5 4C89F2   		movq	%r14, %rdx
 7466 01c8 48C1FA10 		sarq	$16, %rdx
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7467              		.loc 1 332 5 view .LVU2429
 7468 01cc 8816     		movb	%dl, (%rsi)
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7469              		.loc 1 330 9 view .LVU2430
 7470 01ce 0FB6EA   		movzbl	%dl, %ebp
 7471              	.LVL742:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7472              		.loc 1 332 5 is_stmt 1 view .LVU2431
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7473              		.loc 1 332 5 view .LVU2432
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7474              		.loc 1 332 5 is_stmt 0 view .LVU2433
 7475 01d1 4883E801 		subq	$1, %rax
 7476              	.LVL743:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7477              		.loc 1 332 5 view .LVU2434
 7478 01d5 0F849503 		je	.L604
 7478      0000
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7479              		.loc 1 332 5 view .LVU2435
 7480 01db 4883C601 		addq	$1, %rsi
 7481              	.LVL744:
 7482              	.L605:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7483              		.loc 1 332 40 is_stmt 1 view .LVU2436
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 7484              		.loc 1 333 5 view .LVU2437
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 7485              		.loc 1 333 8 is_stmt 0 view .LVU2438
 7486 01df 81FDFF00 		cmpl	$255, %ebp
 7486      0000
 7487 01e5 0F846503 		je	.L732
 7487      0000
 7488              	.L606:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 7489              		.loc 1 334 42 is_stmt 1 view .LVU2439
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 7490              		.loc 1 336 5 view .LVU2440
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 7491              		.loc 1 337 14 is_stmt 0 view .LVU2441
 7492 01eb 4183ED08 		subl	$8, %r13d
 7493              	.LVL745:
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 7494              		.loc 1 336 16 view .LVU2442
 7495 01ef 49C1E608 		salq	$8, %r14
 7496              	.LVL746:
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 7497              		.loc 1 337 5 is_stmt 1 view .LVU2443
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 7498              		.loc 1 337 5 is_stmt 0 view .LVU2444
 7499              	.LBE599:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 7500              		.loc 1 329 9 is_stmt 1 view .LVU2445
 7501 01f3 4183FD07 		cmpl	$7, %r13d
 7502 01f7 7FCC     		jg	.L608
 7503              	.LVL747:
 7504              	.L603:
 340:fltk-1.3.4-1/jpeg/jchuff.c ****   state->cur.put_bits = put_bits;
 7505              		.loc 1 340 3 view .LVU2446
 341:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7506              		.loc 1 341 3 view .LVU2447
 343:fltk-1.3.4-1/jpeg/jchuff.c **** }
 7507              		.loc 1 343 3 view .LVU2448
 343:fltk-1.3.4-1/jpeg/jchuff.c **** }
 7508              		.loc 1 343 3 is_stmt 0 view .LVU2449
 7509              	.LBE598:
 7510              	.LBE597:
 951:fltk-1.3.4-1/jpeg/jchuff.c ****     if (! emit_bits_s(state, (unsigned int) temp2, nbits))
 7511              		.loc 1 951 3 is_stmt 1 view .LVU2450
 951:fltk-1.3.4-1/jpeg/jchuff.c ****     if (! emit_bits_s(state, (unsigned int) temp2, nbits))
 7512              		.loc 1 951 6 is_stmt 0 view .LVU2451
 7513 01f9 4585E4   		testl	%r12d, %r12d
 7514 01fc 0F850E05 		jne	.L733
 7514      0000
 7515              	.LVL748:
 7516              	.L609:
 959:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp2 = block[natural_order[k]]) == 0) {
 7517              		.loc 1 959 15 is_stmt 1 view .LVU2452
 959:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp2 = block[natural_order[k]]) == 0) {
 7518              		.loc 1 959 3 is_stmt 0 view .LVU2453
 7519 0202 8B542434 		movl	52(%rsp), %edx
 7520 0206 85D2     		testl	%edx, %edx
 7521 0208 0F8E8A02 		jle	.L616
 7521      0000
 959:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp2 = block[natural_order[k]]) == 0) {
 7522              		.loc 1 959 3 view .LVU2454
 7523 020e 48C70424 		movq	$1, (%rsp)
 7523      01000000 
 7524              	.LVL749:
 959:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp2 = block[natural_order[k]]) == 0) {
 7525              		.loc 1 959 3 view .LVU2455
 7526 0216 31DB     		xorl	%ebx, %ebx
 7527 0218 EB1C     		jmp	.L644
 7528              	.LVL750:
 7529 021a 660F1F44 		.p2align 4,,10
 7529      0000
 7530              		.p2align 3
 7531              	.L617:
 961:fltk-1.3.4-1/jpeg/jchuff.c ****     } else {
 7532              		.loc 1 961 7 is_stmt 1 view .LVU2456
 7533 0220 48830424 		addq	$1, (%rsp)
 7533      01
 7534              	.LVL751:
 961:fltk-1.3.4-1/jpeg/jchuff.c ****     } else {
 7535              		.loc 1 961 8 is_stmt 0 view .LVU2457
 7536 0225 83C301   		addl	$1, %ebx
 7537              	.LVL752:
 959:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp2 = block[natural_order[k]]) == 0) {
 7538              		.loc 1 959 24 is_stmt 1 view .LVU2458
 959:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp2 = block[natural_order[k]]) == 0) {
 7539              		.loc 1 959 15 view .LVU2459
 7540 0228 488B3C24 		movq	(%rsp), %rdi
 959:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp2 = block[natural_order[k]]) == 0) {
 7541              		.loc 1 959 3 is_stmt 0 view .LVU2460
 7542 022c 397C2434 		cmpl	%edi, 52(%rsp)
 7543 0230 0F8C5A02 		jl	.L734
 7543      0000
 7544              	.LVL753:
 7545              	.L644:
 960:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 7546              		.loc 1 960 5 is_stmt 1 view .LVU2461
 960:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 7547              		.loc 1 960 37 is_stmt 0 view .LVU2462
 7548 0236 488B7C24 		movq	80(%rsp), %rdi
 7548      50
 7549 023b 488B1424 		movq	(%rsp), %rdx
 7550 023f 48630C97 		movslq	(%rdi,%rdx,4), %rcx
 960:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 7551              		.loc 1 960 16 view .LVU2463
 7552 0243 488B7C24 		movq	72(%rsp), %rdi
 7552      48
 7553 0248 0FBF2C4F 		movswl	(%rdi,%rcx,2), %ebp
 7554              	.LVL754:
 960:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 7555              		.loc 1 960 8 view .LVU2464
 7556 024c 85ED     		testl	%ebp, %ebp
 7557 024e 74D0     		je	.L617
 964:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (! emit_bits_s(state, actbl->ehufco[0xF0], actbl->ehufsi[0xF0]))
 7558              		.loc 1 964 13 is_stmt 1 view .LVU2465
 7559 0250 83FB0F   		cmpl	$15, %ebx
 7560 0253 0F8ECC00 		jle	.L619
 7560      0000
 7561 0259 895C2418 		movl	%ebx, 24(%rsp)
 7562 025d 4989F4   		movq	%rsi, %r12
 7563 0260 896C2460 		movl	%ebp, 96(%rsp)
 7564 0264 4C89FD   		movq	%r15, %rbp
 7565              	.LVL755:
 964:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (! emit_bits_s(state, actbl->ehufco[0xF0], actbl->ehufsi[0xF0]))
 7566              		.loc 1 964 13 is_stmt 0 view .LVU2466
 7567 0267 4989C7   		movq	%rax, %r15
 7568              	.LVL756:
 7569 026a 660F1F44 		.p2align 4,,10
 7569      0000
 7570              		.p2align 3
 7571              	.L618:
 965:fltk-1.3.4-1/jpeg/jchuff.c **** 	  return FALSE;
 7572              		.loc 1 965 2 is_stmt 1 view .LVU2467
 965:fltk-1.3.4-1/jpeg/jchuff.c **** 	  return FALSE;
 7573              		.loc 1 965 8 is_stmt 0 view .LVU2468
 7574 0270 488B4424 		movq	40(%rsp), %rax
 7574      28
 7575 0275 0FB688F0 		movzbl	1264(%rax), %ecx
 7575      040000
 7576 027c 8B98C003 		movl	960(%rax), %ebx
 7576      0000
 7577              	.LVL757:
 7578              	.LBB608:
 7579              	.LBI608:
 307:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits; return TRUE if successful, FALSE if must suspend */
 7580              		.loc 1 307 1 is_stmt 1 view .LVU2469
 7581              	.LBB609:
 311:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 7582              		.loc 1 311 3 view .LVU2470
 312:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7583              		.loc 1 312 3 view .LVU2471
 315:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);
 7584              		.loc 1 315 3 view .LVU2472
 315:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);
 7585              		.loc 1 315 6 is_stmt 0 view .LVU2473
 7586 0282 85C9     		testl	%ecx, %ecx
 7587 0284 751D     		jne	.L621
 316:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7588              		.loc 1 316 5 view .LVU2474
 7589 0286 488B7D00 		movq	0(%rbp), %rdi
 7590 028a 894C2438 		movl	%ecx, 56(%rsp)
 316:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7591              		.loc 1 316 5 is_stmt 1 view .LVU2475
 7592 028e C7472829 		movl	$41, 40(%rdi)
 7592      000000
 7593 0295 4C8B4500 		movq	0(%rbp), %r8
 7594 0299 4889EF   		movq	%rbp, %rdi
 7595 029c 41FF10   		call	*(%r8)
 7596              	.LVL758:
 316:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7597              		.loc 1 316 5 is_stmt 0 view .LVU2476
 7598 029f 8B4C2438 		movl	56(%rsp), %ecx
 7599              	.LVL759:
 7600              	.L621:
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7601              		.loc 1 319 3 is_stmt 1 view .LVU2477
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7602              		.loc 1 319 47 is_stmt 0 view .LVU2478
 7603 02a3 BF010000 		movl	$1, %edi
 7603      00
 322:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7604              		.loc 1 322 12 view .LVU2479
 7605 02a8 4101CD   		addl	%ecx, %r13d
 7606              	.LVL760:
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7607              		.loc 1 319 47 view .LVU2480
 7608 02ab 48D3E7   		salq	%cl, %rdi
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7609              		.loc 1 324 21 view .LVU2481
 7610 02ae B9180000 		movl	$24, %ecx
 7610      00
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7611              		.loc 1 319 56 view .LVU2482
 7612 02b3 4883EF01 		subq	$1, %rdi
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7613              		.loc 1 324 21 view .LVU2483
 7614 02b7 4429E9   		subl	%r13d, %ecx
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7615              		.loc 1 319 14 view .LVU2484
 7616 02ba 21FB     		andl	%edi, %ebx
 7617              	.LVL761:
 322:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7618              		.loc 1 322 3 is_stmt 1 view .LVU2485
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7619              		.loc 1 324 3 view .LVU2486
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7620              		.loc 1 324 14 is_stmt 0 view .LVU2487
 7621 02bc 48D3E3   		salq	%cl, %rbx
 7622              	.LVL762:
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7623              		.loc 1 327 3 is_stmt 1 view .LVU2488
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7624              		.loc 1 327 14 is_stmt 0 view .LVU2489
 7625 02bf 4909DE   		orq	%rbx, %r14
 7626              	.LVL763:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 7627              		.loc 1 329 3 is_stmt 1 view .LVU2490
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 7628              		.loc 1 329 9 view .LVU2491
 7629 02c2 4183FD07 		cmpl	$7, %r13d
 7630 02c6 7E3C     		jle	.L622
 7631              	.L627:
 7632              	.LBB610:
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7633              		.loc 1 330 5 view .LVU2492
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7634              		.loc 1 330 32 is_stmt 0 view .LVU2493
 7635 02c8 4C89F0   		movq	%r14, %rax
 7636 02cb 48C1F810 		sarq	$16, %rax
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7637              		.loc 1 330 9 view .LVU2494
 7638 02cf 0FB6F0   		movzbl	%al, %esi
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7639              		.loc 1 332 5 view .LVU2495
 7640 02d2 41880424 		movb	%al, (%r12)
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7641              		.loc 1 330 9 view .LVU2496
 7642 02d6 89742438 		movl	%esi, 56(%rsp)
 7643              	.LVL764:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7644              		.loc 1 332 5 is_stmt 1 view .LVU2497
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7645              		.loc 1 332 5 view .LVU2498
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7646              		.loc 1 332 5 is_stmt 0 view .LVU2499
 7647 02da 4983EF01 		subq	$1, %r15
 7648              	.LVL765:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7649              		.loc 1 332 5 view .LVU2500
 7650 02de 0F84CC02 		je	.L623
 7650      0000
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7651              		.loc 1 332 5 view .LVU2501
 7652 02e4 4983C401 		addq	$1, %r12
 7653              	.LVL766:
 7654              	.L624:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7655              		.loc 1 332 40 is_stmt 1 view .LVU2502
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 7656              		.loc 1 333 5 view .LVU2503
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 7657              		.loc 1 333 8 is_stmt 0 view .LVU2504
 7658 02e8 817C2438 		cmpl	$255, 56(%rsp)
 7658      FF000000 
 7659 02f0 0F849A02 		je	.L735
 7659      0000
 7660              	.L625:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 7661              		.loc 1 334 42 is_stmt 1 view .LVU2505
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 7662              		.loc 1 336 5 view .LVU2506
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 7663              		.loc 1 337 14 is_stmt 0 view .LVU2507
 7664 02f6 4183ED08 		subl	$8, %r13d
 7665              	.LVL767:
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 7666              		.loc 1 336 16 view .LVU2508
 7667 02fa 49C1E608 		salq	$8, %r14
 7668              	.LVL768:
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 7669              		.loc 1 337 5 is_stmt 1 view .LVU2509
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 7670              		.loc 1 337 5 is_stmt 0 view .LVU2510
 7671              	.LBE610:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 7672              		.loc 1 329 9 is_stmt 1 view .LVU2511
 7673 02fe 4183FD07 		cmpl	$7, %r13d
 7674 0302 7FC4     		jg	.L627
 7675              	.LVL769:
 7676              	.L622:
 340:fltk-1.3.4-1/jpeg/jchuff.c ****   state->cur.put_bits = put_bits;
 7677              		.loc 1 340 3 view .LVU2512
 341:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7678              		.loc 1 341 3 view .LVU2513
 343:fltk-1.3.4-1/jpeg/jchuff.c **** }
 7679              		.loc 1 343 3 view .LVU2514
 343:fltk-1.3.4-1/jpeg/jchuff.c **** }
 7680              		.loc 1 343 3 is_stmt 0 view .LVU2515
 7681              	.LBE609:
 7682              	.LBE608:
 967:fltk-1.3.4-1/jpeg/jchuff.c ****       }
 7683              		.loc 1 967 2 is_stmt 1 view .LVU2516
 967:fltk-1.3.4-1/jpeg/jchuff.c ****       }
 7684              		.loc 1 967 4 is_stmt 0 view .LVU2517
 7685 0304 836C2418 		subl	$16, 24(%rsp)
 7685      10
 7686              	.LVL770:
 967:fltk-1.3.4-1/jpeg/jchuff.c ****       }
 7687              		.loc 1 967 4 view .LVU2518
 7688 0309 8B442418 		movl	24(%rsp), %eax
 7689              	.LVL771:
 964:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (! emit_bits_s(state, actbl->ehufco[0xF0], actbl->ehufsi[0xF0]))
 7690              		.loc 1 964 13 is_stmt 1 view .LVU2519
 7691 030d 83F80F   		cmpl	$15, %eax
 7692 0310 0F8F5AFF 		jg	.L618
 7692      FFFF
 964:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (! emit_bits_s(state, actbl->ehufco[0xF0], actbl->ehufsi[0xF0]))
 7693              		.loc 1 964 13 is_stmt 0 view .LVU2520
 7694 0316 89C3     		movl	%eax, %ebx
 7695 0318 4C89F8   		movq	%r15, %rax
 7696              	.LVL772:
 964:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (! emit_bits_s(state, actbl->ehufco[0xF0], actbl->ehufsi[0xF0]))
 7697              		.loc 1 964 13 view .LVU2521
 7698 031b 4989EF   		movq	%rbp, %r15
 7699              	.LVL773:
 964:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (! emit_bits_s(state, actbl->ehufco[0xF0], actbl->ehufsi[0xF0]))
 7700              		.loc 1 964 13 view .LVU2522
 7701 031e 8B6C2460 		movl	96(%rsp), %ebp
 7702              	.LVL774:
 964:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (! emit_bits_s(state, actbl->ehufco[0xF0], actbl->ehufsi[0xF0]))
 7703              		.loc 1 964 13 view .LVU2523
 7704 0322 4C89E6   		movq	%r12, %rsi
 7705              	.LVL775:
 7706              	.L619:
 970:fltk-1.3.4-1/jpeg/jchuff.c ****       if (temp < 0) {
 7707              		.loc 1 970 7 is_stmt 1 view .LVU2524
 971:fltk-1.3.4-1/jpeg/jchuff.c **** 	temp = -temp;		/* temp is abs value of input */
 7708              		.loc 1 971 7 view .LVU2525
 7709 0325 896C2418 		movl	%ebp, 24(%rsp)
 971:fltk-1.3.4-1/jpeg/jchuff.c **** 	temp = -temp;		/* temp is abs value of input */
 7710              		.loc 1 971 10 is_stmt 0 view .LVU2526
 7711 0329 85ED     		testl	%ebp, %ebp
 7712 032b 7909     		jns	.L628
 972:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* This code assumes we are on a two's complement machine */
 7713              		.loc 1 972 2 is_stmt 1 view .LVU2527
 7714              	.LVL776:
 974:fltk-1.3.4-1/jpeg/jchuff.c ****       }
 7715              		.loc 1 974 2 view .LVU2528
 974:fltk-1.3.4-1/jpeg/jchuff.c ****       }
 7716              		.loc 1 974 7 is_stmt 0 view .LVU2529
 7717 032d 8D7DFF   		leal	-1(%rbp), %edi
 972:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* This code assumes we are on a two's complement machine */
 7718              		.loc 1 972 7 view .LVU2530
 7719 0330 F7DD     		negl	%ebp
 7720              	.LVL777:
 974:fltk-1.3.4-1/jpeg/jchuff.c ****       }
 7721              		.loc 1 974 7 view .LVU2531
 7722 0332 897C2418 		movl	%edi, 24(%rsp)
 7723              	.LVL778:
 7724              	.L628:
 978:fltk-1.3.4-1/jpeg/jchuff.c ****       while ((temp >>= 1))
 7725              		.loc 1 978 7 is_stmt 1 view .LVU2532
 979:fltk-1.3.4-1/jpeg/jchuff.c **** 	nbits++;
 7726              		.loc 1 979 7 view .LVU2533
 979:fltk-1.3.4-1/jpeg/jchuff.c **** 	nbits++;
 7727              		.loc 1 979 13 view .LVU2534
 979:fltk-1.3.4-1/jpeg/jchuff.c **** 	nbits++;
 7728              		.loc 1 979 13 is_stmt 0 view .LVU2535
 7729 0336 D1FD     		sarl	%ebp
 7730              	.LVL779:
 978:fltk-1.3.4-1/jpeg/jchuff.c ****       while ((temp >>= 1))
 7731              		.loc 1 978 13 view .LVU2536
 7732 0338 41BC0100 		movl	$1, %r12d
 7732      0000
 979:fltk-1.3.4-1/jpeg/jchuff.c **** 	nbits++;
 7733              		.loc 1 979 13 view .LVU2537
 7734 033e 7434     		je	.L629
 7735              	.LVL780:
 7736              		.p2align 4,,10
 7737              		.p2align 3
 7738              	.L630:
 980:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Check for out-of-range coefficient values */
 7739              		.loc 1 980 2 is_stmt 1 view .LVU2538
 980:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Check for out-of-range coefficient values */
 7740              		.loc 1 980 7 is_stmt 0 view .LVU2539
 7741 0340 4183C401 		addl	$1, %r12d
 7742              	.LVL781:
 979:fltk-1.3.4-1/jpeg/jchuff.c **** 	nbits++;
 7743              		.loc 1 979 13 is_stmt 1 view .LVU2540
 979:fltk-1.3.4-1/jpeg/jchuff.c **** 	nbits++;
 7744              		.loc 1 979 13 is_stmt 0 view .LVU2541
 7745 0344 D1FD     		sarl	%ebp
 7746              	.LVL782:
 979:fltk-1.3.4-1/jpeg/jchuff.c **** 	nbits++;
 7747              		.loc 1 979 13 view .LVU2542
 7748 0346 75F8     		jne	.L630
 982:fltk-1.3.4-1/jpeg/jchuff.c **** 	ERREXIT(state->cinfo, JERR_BAD_DCT_COEF);
 7749              		.loc 1 982 7 is_stmt 1 view .LVU2543
 982:fltk-1.3.4-1/jpeg/jchuff.c **** 	ERREXIT(state->cinfo, JERR_BAD_DCT_COEF);
 7750              		.loc 1 982 10 is_stmt 0 view .LVU2544
 7751 0348 4183FC0A 		cmpl	$10, %r12d
 7752 034c 7E26     		jle	.L629
 983:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7753              		.loc 1 983 2 view .LVU2545
 7754 034e 498B0F   		movq	(%r15), %rcx
 7755 0351 48894424 		movq	%rax, 96(%rsp)
 7755      60
 7756 0356 4C89FF   		movq	%r15, %rdi
 7757 0359 48897424 		movq	%rsi, 56(%rsp)
 7757      38
 983:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7758              		.loc 1 983 2 is_stmt 1 view .LVU2546
 7759 035e C7412806 		movl	$6, 40(%rcx)
 7759      000000
 7760 0365 498B0F   		movq	(%r15), %rcx
 7761 0368 FF11     		call	*(%rcx)
 7762              	.LVL783:
 983:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7763              		.loc 1 983 2 is_stmt 0 view .LVU2547
 7764 036a 488B7424 		movq	56(%rsp), %rsi
 7764      38
 7765 036f 488B4424 		movq	96(%rsp), %rax
 7765      60
 7766              	.LVL784:
 7767              	.L629:
 986:fltk-1.3.4-1/jpeg/jchuff.c ****       if (! emit_bits_s(state, actbl->ehufco[temp], actbl->ehufsi[temp]))
 7768              		.loc 1 986 7 is_stmt 1 view .LVU2548
 986:fltk-1.3.4-1/jpeg/jchuff.c ****       if (! emit_bits_s(state, actbl->ehufco[temp], actbl->ehufsi[temp]))
 7769              		.loc 1 986 17 is_stmt 0 view .LVU2549
 7770 0374 C1E304   		sall	$4, %ebx
 987:fltk-1.3.4-1/jpeg/jchuff.c **** 	return FALSE;
 7771              		.loc 1 987 13 view .LVU2550
 7772 0377 488B4C24 		movq	40(%rsp), %rcx
 7772      28
 986:fltk-1.3.4-1/jpeg/jchuff.c ****       if (! emit_bits_s(state, actbl->ehufco[temp], actbl->ehufsi[temp]))
 7773              		.loc 1 986 12 view .LVU2551
 7774 037c 428D3C23 		leal	(%rbx,%r12), %edi
 7775              	.LVL785:
 987:fltk-1.3.4-1/jpeg/jchuff.c **** 	return FALSE;
 7776              		.loc 1 987 7 is_stmt 1 view .LVU2552
 987:fltk-1.3.4-1/jpeg/jchuff.c **** 	return FALSE;
 7777              		.loc 1 987 66 is_stmt 0 view .LVU2553
 7778 0380 4863FF   		movslq	%edi, %rdi
 987:fltk-1.3.4-1/jpeg/jchuff.c **** 	return FALSE;
 7779              		.loc 1 987 13 view .LVU2554
 7780 0383 0FB69C39 		movzbl	1024(%rcx,%rdi), %ebx
 7780      00040000 
 7781 038b 8B2CB9   		movl	(%rcx,%rdi,4), %ebp
 7782              	.LVL786:
 7783              	.LBB619:
 7784              	.LBI619:
 307:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits; return TRUE if successful, FALSE if must suspend */
 7785              		.loc 1 307 1 is_stmt 1 view .LVU2555
 7786              	.LBB620:
 311:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 7787              		.loc 1 311 3 view .LVU2556
 312:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7788              		.loc 1 312 3 view .LVU2557
 315:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);
 7789              		.loc 1 315 3 view .LVU2558
 315:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);
 7790              		.loc 1 315 6 is_stmt 0 view .LVU2559
 7791 038e 85DB     		testl	%ebx, %ebx
 7792 0390 7526     		jne	.L631
 316:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7793              		.loc 1 316 5 view .LVU2560
 7794 0392 498B0F   		movq	(%r15), %rcx
 7795 0395 48894424 		movq	%rax, 96(%rsp)
 7795      60
 7796 039a 4C89FF   		movq	%r15, %rdi
 7797              	.LVL787:
 316:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7798              		.loc 1 316 5 view .LVU2561
 7799 039d 48897424 		movq	%rsi, 56(%rsp)
 7799      38
 316:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7800              		.loc 1 316 5 is_stmt 1 view .LVU2562
 7801 03a2 C7412829 		movl	$41, 40(%rcx)
 7801      000000
 7802 03a9 498B0F   		movq	(%r15), %rcx
 7803 03ac FF11     		call	*(%rcx)
 7804              	.LVL788:
 7805 03ae 488B4424 		movq	96(%rsp), %rax
 7805      60
 7806 03b3 488B7424 		movq	56(%rsp), %rsi
 7806      38
 7807              	.L631:
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7808              		.loc 1 319 3 view .LVU2563
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7809              		.loc 1 319 47 is_stmt 0 view .LVU2564
 7810 03b8 89D9     		movl	%ebx, %ecx
 7811 03ba BF010000 		movl	$1, %edi
 7811      00
 322:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7812              		.loc 1 322 12 view .LVU2565
 7813 03bf 4101DD   		addl	%ebx, %r13d
 7814              	.LVL789:
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7815              		.loc 1 319 47 view .LVU2566
 7816 03c2 48D3E7   		salq	%cl, %rdi
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7817              		.loc 1 324 21 view .LVU2567
 7818 03c5 B9180000 		movl	$24, %ecx
 7818      00
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7819              		.loc 1 319 56 view .LVU2568
 7820 03ca 4883EF01 		subq	$1, %rdi
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7821              		.loc 1 324 21 view .LVU2569
 7822 03ce 4429E9   		subl	%r13d, %ecx
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7823              		.loc 1 319 14 view .LVU2570
 7824 03d1 21EF     		andl	%ebp, %edi
 7825              	.LVL790:
 322:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7826              		.loc 1 322 3 is_stmt 1 view .LVU2571
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7827              		.loc 1 324 3 view .LVU2572
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7828              		.loc 1 324 14 is_stmt 0 view .LVU2573
 7829 03d3 48D3E7   		salq	%cl, %rdi
 7830              	.LVL791:
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7831              		.loc 1 327 3 is_stmt 1 view .LVU2574
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7832              		.loc 1 327 14 is_stmt 0 view .LVU2575
 7833 03d6 4909FE   		orq	%rdi, %r14
 7834              	.LVL792:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 7835              		.loc 1 329 3 is_stmt 1 view .LVU2576
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 7836              		.loc 1 329 9 view .LVU2577
 7837 03d9 4183FD07 		cmpl	$7, %r13d
 7838 03dd 7E34     		jle	.L632
 7839              	.LVL793:
 7840              	.L637:
 7841              	.LBB621:
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7842              		.loc 1 330 5 view .LVU2578
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7843              		.loc 1 330 32 is_stmt 0 view .LVU2579
 7844 03df 4C89F2   		movq	%r14, %rdx
 7845 03e2 48C1FA10 		sarq	$16, %rdx
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7846              		.loc 1 332 5 view .LVU2580
 7847 03e6 8816     		movb	%dl, (%rsi)
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7848              		.loc 1 330 9 view .LVU2581
 7849 03e8 0FB6EA   		movzbl	%dl, %ebp
 7850              	.LVL794:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7851              		.loc 1 332 5 is_stmt 1 view .LVU2582
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7852              		.loc 1 332 5 view .LVU2583
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7853              		.loc 1 332 5 is_stmt 0 view .LVU2584
 7854 03eb 4883E801 		subq	$1, %rax
 7855              	.LVL795:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7856              		.loc 1 332 5 view .LVU2585
 7857 03ef 0F844B02 		je	.L633
 7857      0000
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7858              		.loc 1 332 5 view .LVU2586
 7859 03f5 4883C601 		addq	$1, %rsi
 7860              	.LVL796:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7861              		.loc 1 332 40 is_stmt 1 view .LVU2587
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 7862              		.loc 1 333 5 view .LVU2588
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 7863              		.loc 1 333 8 is_stmt 0 view .LVU2589
 7864 03f9 81FDFF00 		cmpl	$255, %ebp
 7864      0000
 7865 03ff 0F845C02 		je	.L736
 7865      0000
 7866              	.L635:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 7867              		.loc 1 334 42 is_stmt 1 view .LVU2590
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 7868              		.loc 1 336 5 view .LVU2591
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 7869              		.loc 1 337 14 is_stmt 0 view .LVU2592
 7870 0405 4183ED08 		subl	$8, %r13d
 7871              	.LVL797:
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 7872              		.loc 1 336 16 view .LVU2593
 7873 0409 49C1E608 		salq	$8, %r14
 7874              	.LVL798:
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 7875              		.loc 1 337 5 is_stmt 1 view .LVU2594
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 7876              		.loc 1 337 5 is_stmt 0 view .LVU2595
 7877              	.LBE621:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 7878              		.loc 1 329 9 is_stmt 1 view .LVU2596
 7879 040d 4183FD07 		cmpl	$7, %r13d
 7880 0411 7FCC     		jg	.L637
 7881              	.LVL799:
 7882              	.L632:
 340:fltk-1.3.4-1/jpeg/jchuff.c ****   state->cur.put_bits = put_bits;
 7883              		.loc 1 340 3 view .LVU2597
 341:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7884              		.loc 1 341 3 view .LVU2598
 343:fltk-1.3.4-1/jpeg/jchuff.c **** }
 7885              		.loc 1 343 3 view .LVU2599
 343:fltk-1.3.4-1/jpeg/jchuff.c **** }
 7886              		.loc 1 343 3 is_stmt 0 view .LVU2600
 7887              	.LBE620:
 7888              	.LBE619:
 992:fltk-1.3.4-1/jpeg/jchuff.c **** 	return FALSE;
 7889              		.loc 1 992 7 is_stmt 1 view .LVU2601
 7890              	.LBB630:
 7891              	.LBI630:
 307:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits; return TRUE if successful, FALSE if must suspend */
 7892              		.loc 1 307 1 view .LVU2602
 7893              	.LBB631:
 311:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 7894              		.loc 1 311 3 view .LVU2603
 312:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7895              		.loc 1 312 3 view .LVU2604
 315:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);
 7896              		.loc 1 315 3 view .LVU2605
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7897              		.loc 1 319 3 view .LVU2606
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7898              		.loc 1 319 47 is_stmt 0 view .LVU2607
 7899 0413 4489E1   		movl	%r12d, %ecx
 7900 0416 BB010000 		movl	$1, %ebx
 7900      00
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7901              		.loc 1 319 14 view .LVU2608
 7902 041b 8B542418 		movl	24(%rsp), %edx
 322:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7903              		.loc 1 322 12 view .LVU2609
 7904 041f 4501E5   		addl	%r12d, %r13d
 7905              	.LVL800:
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7906              		.loc 1 319 47 view .LVU2610
 7907 0422 48D3E3   		salq	%cl, %rbx
 7908 0425 4889D9   		movq	%rbx, %rcx
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7909              		.loc 1 319 56 view .LVU2611
 7910 0428 4883E901 		subq	$1, %rcx
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7911              		.loc 1 319 14 view .LVU2612
 7912 042c 21CA     		andl	%ecx, %edx
 7913              	.LVL801:
 322:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7914              		.loc 1 322 3 is_stmt 1 view .LVU2613
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7915              		.loc 1 324 3 view .LVU2614
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7916              		.loc 1 324 21 is_stmt 0 view .LVU2615
 7917 042e B9180000 		movl	$24, %ecx
 7917      00
 7918 0433 4429E9   		subl	%r13d, %ecx
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7919              		.loc 1 324 14 view .LVU2616
 7920 0436 48D3E2   		salq	%cl, %rdx
 7921              	.LVL802:
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7922              		.loc 1 327 3 is_stmt 1 view .LVU2617
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7923              		.loc 1 327 14 is_stmt 0 view .LVU2618
 7924 0439 4909D6   		orq	%rdx, %r14
 7925              	.LVL803:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 7926              		.loc 1 329 3 is_stmt 1 view .LVU2619
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 7927              		.loc 1 329 9 view .LVU2620
 7928 043c 4183FD07 		cmpl	$7, %r13d
 7929 0440 7E34     		jle	.L638
 7930              	.L643:
 7931              	.LBB632:
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7932              		.loc 1 330 5 view .LVU2621
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7933              		.loc 1 330 32 is_stmt 0 view .LVU2622
 7934 0442 4C89F2   		movq	%r14, %rdx
 7935 0445 48C1FA10 		sarq	$16, %rdx
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7936              		.loc 1 332 5 view .LVU2623
 7937 0449 8816     		movb	%dl, (%rsi)
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7938              		.loc 1 330 9 view .LVU2624
 7939 044b 0FB6EA   		movzbl	%dl, %ebp
 7940              	.LVL804:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7941              		.loc 1 332 5 is_stmt 1 view .LVU2625
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7942              		.loc 1 332 5 view .LVU2626
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7943              		.loc 1 332 5 is_stmt 0 view .LVU2627
 7944 044e 4883E801 		subq	$1, %rax
 7945              	.LVL805:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7946              		.loc 1 332 5 view .LVU2628
 7947 0452 0F842002 		je	.L639
 7947      0000
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7948              		.loc 1 332 5 view .LVU2629
 7949 0458 4883C601 		addq	$1, %rsi
 7950              	.LVL806:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7951              		.loc 1 332 40 is_stmt 1 view .LVU2630
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 7952              		.loc 1 333 5 view .LVU2631
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 7953              		.loc 1 333 8 is_stmt 0 view .LVU2632
 7954 045c 81FDFF00 		cmpl	$255, %ebp
 7954      0000
 7955 0462 0F843502 		je	.L737
 7955      0000
 7956              	.L641:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 7957              		.loc 1 334 42 is_stmt 1 view .LVU2633
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 7958              		.loc 1 336 5 view .LVU2634
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 7959              		.loc 1 337 14 is_stmt 0 view .LVU2635
 7960 0468 4183ED08 		subl	$8, %r13d
 7961              	.LVL807:
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 7962              		.loc 1 336 16 view .LVU2636
 7963 046c 49C1E608 		salq	$8, %r14
 7964              	.LVL808:
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 7965              		.loc 1 337 5 is_stmt 1 view .LVU2637
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 7966              		.loc 1 337 5 is_stmt 0 view .LVU2638
 7967              	.LBE632:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 7968              		.loc 1 329 9 is_stmt 1 view .LVU2639
 7969 0470 4183FD07 		cmpl	$7, %r13d
 7970 0474 7FCC     		jg	.L643
 7971              	.LVL809:
 7972              	.L638:
 340:fltk-1.3.4-1/jpeg/jchuff.c ****   state->cur.put_bits = put_bits;
 7973              		.loc 1 340 3 view .LVU2640
 341:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7974              		.loc 1 341 3 view .LVU2641
 343:fltk-1.3.4-1/jpeg/jchuff.c **** }
 7975              		.loc 1 343 3 view .LVU2642
 343:fltk-1.3.4-1/jpeg/jchuff.c **** }
 7976              		.loc 1 343 3 is_stmt 0 view .LVU2643
 7977 0476 48830424 		addq	$1, (%rsp)
 7977      01
 7978              	.LVL810:
 343:fltk-1.3.4-1/jpeg/jchuff.c **** }
 7979              		.loc 1 343 3 view .LVU2644
 7980              	.LBE631:
 7981              	.LBE630:
 995:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 7982              		.loc 1 995 9 view .LVU2645
 7983 047b 31DB     		xorl	%ebx, %ebx
 7984              	.LVL811:
 959:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp2 = block[natural_order[k]]) == 0) {
 7985              		.loc 1 959 24 is_stmt 1 view .LVU2646
 959:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp2 = block[natural_order[k]]) == 0) {
 7986              		.loc 1 959 15 view .LVU2647
 7987 047d 488B3C24 		movq	(%rsp), %rdi
 959:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp2 = block[natural_order[k]]) == 0) {
 7988              		.loc 1 959 3 is_stmt 0 view .LVU2648
 7989 0481 397C2434 		cmpl	%edi, 52(%rsp)
 7990 0485 0F8DABFD 		jge	.L644
 7990      FFFF
 7991              	.LVL812:
 7992 048b 0F1F4400 		.p2align 4,,10
 7992      00
 7993              		.p2align 3
 7994              	.L734:
1000:fltk-1.3.4-1/jpeg/jchuff.c ****     if (! emit_bits_s(state, actbl->ehufco[0], actbl->ehufsi[0]))
 7995              		.loc 1 1000 3 is_stmt 1 view .LVU2649
1000:fltk-1.3.4-1/jpeg/jchuff.c ****     if (! emit_bits_s(state, actbl->ehufco[0], actbl->ehufsi[0]))
 7996              		.loc 1 1000 6 is_stmt 0 view .LVU2650
 7997 0490 85DB     		testl	%ebx, %ebx
 7998 0492 0F853803 		jne	.L738
 7998      0000
 7999              	.LVL813:
 8000              	.L616:
1000:fltk-1.3.4-1/jpeg/jchuff.c ****     if (! emit_bits_s(state, actbl->ehufco[0], actbl->ehufsi[0]))
 8001              		.loc 1 1000 6 view .LVU2651
 8002              	.LBE667:
 8003              	.LBE672:
1043:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 8004              		.loc 1 1043 5 is_stmt 1 discriminator 2 view .LVU2652
1043:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 8005              		.loc 1 1043 50 is_stmt 0 discriminator 2 view .LVU2653
 8006 0498 488B5424 		movq	32(%rsp), %rdx
 8006      20
 8007 049d 488B7C24 		movq	64(%rsp), %rdi
 8007      40
 8008 04a2 488B0CD7 		movq	(%rdi,%rdx,8), %rcx
 8009 04a6 488B7C24 		movq	88(%rsp), %rdi
 8009      58
 8010 04ab 4883C201 		addq	$1, %rdx
 8011 04af 48895424 		movq	%rdx, 32(%rsp)
 8011      20
 8012              	.LVL814:
1043:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 8013              		.loc 1 1043 50 discriminator 2 view .LVU2654
 8014 04b4 0FBF09   		movswl	(%rcx), %ecx
 8015 04b7 898CBC8C 		movl	%ecx, 140(%rsp,%rdi,4)
 8015      000000
1034:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
 8016              		.loc 1 1034 47 is_stmt 1 discriminator 2 view .LVU2655
1034:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
 8017              		.loc 1 1034 18 discriminator 2 view .LVU2656
1034:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
 8018              		.loc 1 1034 3 is_stmt 0 discriminator 2 view .LVU2657
 8019 04be 413997A0 		cmpl	%edx, 416(%r15)
 8019      010000
 8020 04c5 0F8FDDFB 		jg	.L582
 8020      FFFF
 8021              	.L583:
1047:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = state.free_in_buffer;
 8022              		.loc 1 1047 3 is_stmt 1 view .LVU2658
1047:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = state.free_in_buffer;
 8023              		.loc 1 1047 8 is_stmt 0 view .LVU2659
 8024 04cb 498B4F28 		movq	40(%r15), %rcx
1049:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8025              		.loc 1 1049 3 view .LVU2660
 8026 04cf 4C89B424 		movq	%r14, 128(%rsp)
 8026      80000000 
 8027 04d7 4489AC24 		movl	%r13d, 136(%rsp)
 8027      88000000 
 8028 04df 660F6FAC 		movdqa	144(%rsp), %xmm5
 8028      24900000 
 8028      00
 8029 04e8 660F6FA4 		movdqa	128(%rsp), %xmm4
 8029      24800000 
 8029      00
1047:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = state.free_in_buffer;
 8030              		.loc 1 1047 33 view .LVU2661
 8031 04f1 488931   		movq	%rsi, (%rcx)
1048:fltk-1.3.4-1/jpeg/jchuff.c ****   ASSIGN_STATE(entropy->saved, state.cur);
 8032              		.loc 1 1048 3 is_stmt 1 view .LVU2662
1049:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8033              		.loc 1 1049 3 is_stmt 0 view .LVU2663
 8034 04f4 488B7424 		movq	104(%rsp), %rsi
 8034      68
 8035              	.LVL815:
1048:fltk-1.3.4-1/jpeg/jchuff.c ****   ASSIGN_STATE(entropy->saved, state.cur);
 8036              		.loc 1 1048 8 view .LVU2664
 8037 04f9 498B4F28 		movq	40(%r15), %rcx
 8038              	.LVL816:
1048:fltk-1.3.4-1/jpeg/jchuff.c ****   ASSIGN_STATE(entropy->saved, state.cur);
 8039              		.loc 1 1048 31 view .LVU2665
 8040 04fd 48894108 		movq	%rax, 8(%rcx)
1049:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8041              		.loc 1 1049 3 is_stmt 1 view .LVU2666
1061:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8042              		.loc 1 1061 10 is_stmt 0 view .LVU2667
 8043 0501 B8010000 		movl	$1, %eax
 8043      00
 8044              	.LVL817:
1049:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8045              		.loc 1 1049 3 view .LVU2668
 8046 0506 0F116618 		movups	%xmm4, 24(%rsi)
 8047              	.LVL818:
1049:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8048              		.loc 1 1049 3 view .LVU2669
 8049 050a 0F116E28 		movups	%xmm5, 40(%rsi)
1052:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 8050              		.loc 1 1052 3 is_stmt 1 view .LVU2670
1052:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 8051              		.loc 1 1052 12 is_stmt 0 view .LVU2671
 8052 050e 418B973C 		movl	316(%r15), %edx
 8052      010000
1052:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 8053              		.loc 1 1052 6 view .LVU2672
 8054 0515 85D2     		testl	%edx, %edx
 8055 0517 0F84D500 		je	.L580
 8055      0000
1053:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 8056              		.loc 1 1053 5 is_stmt 1 view .LVU2673
1053:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 8057              		.loc 1 1053 16 is_stmt 0 view .LVU2674
 8058 051d 8B4638   		movl	56(%rsi), %eax
1053:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 8059              		.loc 1 1053 8 view .LVU2675
 8060 0520 85C0     		testl	%eax, %eax
 8061 0522 7511     		jne	.L652
1054:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num++;
 8062              		.loc 1 1054 7 is_stmt 1 view .LVU2676
1055:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num &= 7;
 8063              		.loc 1 1055 7 view .LVU2677
1056:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8064              		.loc 1 1056 7 view .LVU2678
1055:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num &= 7;
 8065              		.loc 1 1055 32 is_stmt 0 view .LVU2679
 8066 0524 8B463C   		movl	60(%rsi), %eax
 8067 0527 890424   		movl	%eax, (%rsp)
 8068 052a 83C001   		addl	$1, %eax
1056:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8069              		.loc 1 1056 33 view .LVU2680
 8070 052d 83E007   		andl	$7, %eax
 8071 0530 89463C   		movl	%eax, 60(%rsi)
 8072 0533 89D0     		movl	%edx, %eax
 8073              	.L652:
1058:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 8074              		.loc 1 1058 5 is_stmt 1 view .LVU2681
1058:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 8075              		.loc 1 1058 28 is_stmt 0 view .LVU2682
 8076 0535 488B7424 		movq	104(%rsp), %rsi
 8076      68
 8077 053a 83E801   		subl	$1, %eax
 8078 053d 894638   		movl	%eax, 56(%rsi)
1061:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8079              		.loc 1 1061 10 view .LVU2683
 8080 0540 B8010000 		movl	$1, %eax
 8080      00
 8081 0545 E9A80000 		jmp	.L580
 8081      00
 8082              	.LVL819:
 8083 054a 660F1F44 		.p2align 4,,10
 8083      0000
 8084              		.p2align 3
 8085              	.L732:
 8086              	.LBB673:
 8087              	.LBB668:
 8088              	.LBB641:
 8089              	.LBB606:
 8090              	.LBB604:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8091              		.loc 1 334 7 is_stmt 1 view .LVU2684
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8092              		.loc 1 334 7 is_stmt 0 view .LVU2685
 8093 0550 C60600   		movb	$0, (%rsi)
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8094              		.loc 1 334 7 is_stmt 1 view .LVU2686
 8095              	.LVL820:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8096              		.loc 1 334 7 is_stmt 0 view .LVU2687
 8097 0553 4883E801 		subq	$1, %rax
 8098              	.LVL821:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8099              		.loc 1 334 7 view .LVU2688
 8100 0557 0F845301 		je	.L607
 8100      0000
 8101 055d 4883C601 		addq	$1, %rsi
 8102              	.LVL822:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8103              		.loc 1 334 7 view .LVU2689
 8104 0561 E985FCFF 		jmp	.L606
 8104      FF
 8105              	.LVL823:
 8106 0566 662E0F1F 		.p2align 4,,10
 8106      84000000 
 8106      0000
 8107              		.p2align 3
 8108              	.L604:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 8109              		.loc 1 332 5 is_stmt 1 view .LVU2690
 8110              	.LBB600:
 8111              	.LBI600:
 269:fltk-1.3.4-1/jpeg/jchuff.c **** /* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
 8112              		.loc 1 269 1 view .LVU2691
 8113              	.LBB601:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8114              		.loc 1 272 3 view .LVU2692
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8115              		.loc 1 272 33 is_stmt 0 view .LVU2693
 8116 0570 498B5F28 		movq	40(%r15), %rbx
 8117              	.LVL824:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8118              		.loc 1 274 3 is_stmt 1 view .LVU2694
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8119              		.loc 1 274 10 is_stmt 0 view .LVU2695
 8120 0574 4C89FF   		movq	%r15, %rdi
 8121 0577 FF5318   		call	*24(%rbx)
 8122              	.LVL825:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8123              		.loc 1 274 6 view .LVU2696
 8124 057a 85C0     		testl	%eax, %eax
 8125 057c 7472     		je	.L592
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 8126              		.loc 1 277 3 is_stmt 1 view .LVU2697
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 8127              		.loc 1 277 33 is_stmt 0 view .LVU2698
 8128 057e 488B33   		movq	(%rbx), %rsi
 8129              	.LVL826:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 8130              		.loc 1 278 3 is_stmt 1 view .LVU2699
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 8131              		.loc 1 278 31 is_stmt 0 view .LVU2700
 8132 0581 488B4308 		movq	8(%rbx), %rax
 8133              	.LVL827:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8134              		.loc 1 279 3 is_stmt 1 view .LVU2701
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8135              		.loc 1 279 3 is_stmt 0 view .LVU2702
 8136 0585 E955FCFF 		jmp	.L605
 8136      FF
 8137              	.LVL828:
 8138 058a 660F1F44 		.p2align 4,,10
 8138      0000
 8139              		.p2align 3
 8140              	.L735:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8141              		.loc 1 279 3 view .LVU2703
 8142              	.LBE601:
 8143              	.LBE600:
 8144              	.LBE604:
 8145              	.LBE606:
 8146              	.LBE641:
 8147              	.LBB642:
 8148              	.LBB617:
 8149              	.LBB615:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8150              		.loc 1 334 7 is_stmt 1 view .LVU2704
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8151              		.loc 1 334 7 is_stmt 0 view .LVU2705
 8152 0590 41C60424 		movb	$0, (%r12)
 8152      00
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8153              		.loc 1 334 7 is_stmt 1 view .LVU2706
 8154              	.LVL829:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8155              		.loc 1 334 7 is_stmt 0 view .LVU2707
 8156 0595 4983EF01 		subq	$1, %r15
 8157              	.LVL830:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8158              		.loc 1 334 7 view .LVU2708
 8159 0599 0F848100 		je	.L626
 8159      0000
 8160 059f 4983C401 		addq	$1, %r12
 8161              	.LVL831:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8162              		.loc 1 334 7 view .LVU2709
 8163 05a3 E94EFDFF 		jmp	.L625
 8163      FF
 8164              	.LVL832:
 8165 05a8 0F1F8400 		.p2align 4,,10
 8165      00000000 
 8166              		.p2align 3
 8167              	.L623:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 8168              		.loc 1 332 5 is_stmt 1 view .LVU2710
 8169              	.LBB611:
 8170              	.LBI611:
 269:fltk-1.3.4-1/jpeg/jchuff.c **** /* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
 8171              		.loc 1 269 1 view .LVU2711
 8172              	.LBB612:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8173              		.loc 1 272 3 view .LVU2712
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8174              		.loc 1 272 33 is_stmt 0 view .LVU2713
 8175 05b0 488B5D28 		movq	40(%rbp), %rbx
 8176              	.LVL833:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8177              		.loc 1 274 3 is_stmt 1 view .LVU2714
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8178              		.loc 1 274 10 is_stmt 0 view .LVU2715
 8179 05b4 4889EF   		movq	%rbp, %rdi
 8180 05b7 FF5318   		call	*24(%rbx)
 8181              	.LVL834:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8182              		.loc 1 274 6 view .LVU2716
 8183 05ba 85C0     		testl	%eax, %eax
 8184 05bc 7432     		je	.L592
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 8185              		.loc 1 277 3 is_stmt 1 view .LVU2717
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 8186              		.loc 1 277 33 is_stmt 0 view .LVU2718
 8187 05be 4C8B23   		movq	(%rbx), %r12
 8188              	.LVL835:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 8189              		.loc 1 278 3 is_stmt 1 view .LVU2719
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 8190              		.loc 1 278 31 is_stmt 0 view .LVU2720
 8191 05c1 4C8B7B08 		movq	8(%rbx), %r15
 8192              	.LVL836:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8193              		.loc 1 279 3 is_stmt 1 view .LVU2721
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8194              		.loc 1 279 3 is_stmt 0 view .LVU2722
 8195 05c5 E91EFDFF 		jmp	.L624
 8195      FF
 8196              	.LVL837:
 8197              	.L585:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8198              		.loc 1 279 3 view .LVU2723
 8199 05ca 488D4E01 		leaq	1(%rsi), %rcx
 8200 05ce 488D50FF 		leaq	-1(%rax), %rdx
 8201              	.LVL838:
 8202              	.L594:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8203              		.loc 1 279 3 view .LVU2724
 8204              	.LBE612:
 8205              	.LBE611:
 8206              	.LBE615:
 8207              	.LBE617:
 8208              	.LBE642:
 8209              	.LBE668:
 8210              	.LBE673:
 8211              	.LBB674:
 8212              	.LBB675:
 8213              	.LBB676:
 8214              	.LBB677:
 8215              	.LBB678:
 8216              	.LBB679:
 340:fltk-1.3.4-1/jpeg/jchuff.c ****   state->cur.put_bits = put_bits;
 8217              		.loc 1 340 3 is_stmt 1 view .LVU2725
 341:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8218              		.loc 1 341 3 view .LVU2726
 343:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8219              		.loc 1 343 3 view .LVU2727
 343:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8220              		.loc 1 343 3 is_stmt 0 view .LVU2728
 8221              	.LBE679:
 8222              	.LBE678:
 395:fltk-1.3.4-1/jpeg/jchuff.c ****   state->cur.put_bits = 0;
 8223              		.loc 1 395 3 is_stmt 1 view .LVU2729
 396:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 8224              		.loc 1 396 3 view .LVU2730
 397:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8225              		.loc 1 397 3 view .LVU2731
 397:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8226              		.loc 1 397 3 is_stmt 0 view .LVU2732
 8227              	.LBE677:
 8228              	.LBE676:
 502:fltk-1.3.4-1/jpeg/jchuff.c ****   emit_byte_s(state, JPEG_RST0 + restart_num, return FALSE);
 8229              		.loc 1 502 3 is_stmt 1 view .LVU2733
 502:fltk-1.3.4-1/jpeg/jchuff.c ****   emit_byte_s(state, JPEG_RST0 + restart_num, return FALSE);
 8230              		.loc 1 502 3 is_stmt 0 view .LVU2734
 8231 05d2 C606FF   		movb	$-1, (%rsi)
 502:fltk-1.3.4-1/jpeg/jchuff.c ****   emit_byte_s(state, JPEG_RST0 + restart_num, return FALSE);
 8232              		.loc 1 502 3 is_stmt 1 view .LVU2735
 8233 05d5 4885D2   		testq	%rdx, %rdx
 8234 05d8 0F85BF03 		jne	.L595
 8234      0000
 502:fltk-1.3.4-1/jpeg/jchuff.c ****   emit_byte_s(state, JPEG_RST0 + restart_num, return FALSE);
 8235              		.loc 1 502 3 view .LVU2736
 8236              	.LVL839:
 8237              	.LBB690:
 8238              	.LBI690:
 269:fltk-1.3.4-1/jpeg/jchuff.c **** /* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
 8239              		.loc 1 269 1 view .LVU2737
 8240              	.LBB691:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8241              		.loc 1 272 3 view .LVU2738
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8242              		.loc 1 272 33 is_stmt 0 view .LVU2739
 8243 05de 498B6F28 		movq	40(%r15), %rbp
 8244              	.LVL840:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8245              		.loc 1 274 3 is_stmt 1 view .LVU2740
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8246              		.loc 1 274 10 is_stmt 0 view .LVU2741
 8247 05e2 4C89FF   		movq	%r15, %rdi
 8248 05e5 FF5518   		call	*24(%rbp)
 8249              	.LVL841:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8250              		.loc 1 274 6 view .LVU2742
 8251 05e8 85C0     		testl	%eax, %eax
 8252 05ea 0F85A503 		jne	.L739
 8252      0000
 8253              	.LVL842:
 8254              		.p2align 4,,10
 8255              		.p2align 3
 8256              	.L592:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8257              		.loc 1 274 6 view .LVU2743
 8258              	.LBE691:
 8259              	.LBE690:
 8260              	.LBE675:
 8261              	.LBE674:
1030:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 8262              		.loc 1 1030 9 view .LVU2744
 8263 05f0 31C0     		xorl	%eax, %eax
 8264              	.L580:
1062:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8265              		.loc 1 1062 1 view .LVU2745
 8266 05f2 488BB424 		movq	168(%rsp), %rsi
 8266      A8000000 
 8267 05fa 64483334 		xorq	%fs:40, %rsi
 8267      25280000 
 8267      00
 8268 0603 0F85F403 		jne	.L740
 8268      0000
 8269 0609 4881C4B8 		addq	$184, %rsp
 8269      000000
 8270              		.cfi_remember_state
 8271              		.cfi_def_cfa_offset 56
 8272 0610 5B       		popq	%rbx
 8273              		.cfi_def_cfa_offset 48
 8274 0611 5D       		popq	%rbp
 8275              		.cfi_def_cfa_offset 40
 8276 0612 415C     		popq	%r12
 8277              		.cfi_def_cfa_offset 32
 8278 0614 415D     		popq	%r13
 8279              		.cfi_def_cfa_offset 24
 8280 0616 415E     		popq	%r14
 8281              		.cfi_def_cfa_offset 16
 8282 0618 415F     		popq	%r15
 8283              		.cfi_def_cfa_offset 8
 8284 061a C3       		ret
 8285              	.LVL843:
 8286 061b 0F1F4400 		.p2align 4,,10
 8286      00
 8287              		.p2align 3
 8288              	.L626:
 8289              		.cfi_restore_state
 8290              	.LBB699:
 8291              	.LBB669:
 8292              	.LBB643:
 8293              	.LBB618:
 8294              	.LBB616:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8295              		.loc 1 334 7 is_stmt 1 view .LVU2746
 8296              	.LBB613:
 8297              	.LBI613:
 269:fltk-1.3.4-1/jpeg/jchuff.c **** /* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
 8298              		.loc 1 269 1 view .LVU2747
 8299              	.LBB614:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8300              		.loc 1 272 3 view .LVU2748
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8301              		.loc 1 272 33 is_stmt 0 view .LVU2749
 8302 0620 488B5D28 		movq	40(%rbp), %rbx
 8303              	.LVL844:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8304              		.loc 1 274 3 is_stmt 1 view .LVU2750
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8305              		.loc 1 274 10 is_stmt 0 view .LVU2751
 8306 0624 4889EF   		movq	%rbp, %rdi
 8307 0627 FF5318   		call	*24(%rbx)
 8308              	.LVL845:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8309              		.loc 1 274 6 view .LVU2752
 8310 062a 85C0     		testl	%eax, %eax
 8311 062c 74C2     		je	.L592
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 8312              		.loc 1 277 3 is_stmt 1 view .LVU2753
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 8313              		.loc 1 277 33 is_stmt 0 view .LVU2754
 8314 062e 4C8B23   		movq	(%rbx), %r12
 8315              	.LVL846:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 8316              		.loc 1 278 3 is_stmt 1 view .LVU2755
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 8317              		.loc 1 278 31 is_stmt 0 view .LVU2756
 8318 0631 4C8B7B08 		movq	8(%rbx), %r15
 8319              	.LVL847:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8320              		.loc 1 279 3 is_stmt 1 view .LVU2757
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8321              		.loc 1 279 3 is_stmt 0 view .LVU2758
 8322 0635 E9BCFCFF 		jmp	.L625
 8322      FF
 8323              	.LVL848:
 8324 063a 660F1F44 		.p2align 4,,10
 8324      0000
 8325              		.p2align 3
 8326              	.L633:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8327              		.loc 1 279 3 view .LVU2759
 8328              	.LBE614:
 8329              	.LBE613:
 8330              	.LBE616:
 8331              	.LBE618:
 8332              	.LBE643:
 8333              	.LBB644:
 8334              	.LBB628:
 8335              	.LBB626:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 8336              		.loc 1 332 5 is_stmt 1 view .LVU2760
 8337              	.LBB622:
 8338              	.LBI622:
 269:fltk-1.3.4-1/jpeg/jchuff.c **** /* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
 8339              		.loc 1 269 1 view .LVU2761
 8340              	.LBB623:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8341              		.loc 1 272 3 view .LVU2762
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8342              		.loc 1 272 33 is_stmt 0 view .LVU2763
 8343 0640 498B5F28 		movq	40(%r15), %rbx
 8344              	.LVL849:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8345              		.loc 1 274 3 is_stmt 1 view .LVU2764
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8346              		.loc 1 274 10 is_stmt 0 view .LVU2765
 8347 0644 4C89FF   		movq	%r15, %rdi
 8348 0647 FF5318   		call	*24(%rbx)
 8349              	.LVL850:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8350              		.loc 1 274 6 view .LVU2766
 8351 064a 85C0     		testl	%eax, %eax
 8352 064c 74A2     		je	.L592
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 8353              		.loc 1 277 3 is_stmt 1 view .LVU2767
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 8354              		.loc 1 277 33 is_stmt 0 view .LVU2768
 8355 064e 488B33   		movq	(%rbx), %rsi
 8356              	.LVL851:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 8357              		.loc 1 278 3 is_stmt 1 view .LVU2769
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 8358              		.loc 1 278 31 is_stmt 0 view .LVU2770
 8359 0651 488B4308 		movq	8(%rbx), %rax
 8360              	.LVL852:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8361              		.loc 1 279 3 is_stmt 1 view .LVU2771
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8362              		.loc 1 279 3 is_stmt 0 view .LVU2772
 8363              	.LBE623:
 8364              	.LBE622:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 8365              		.loc 1 332 40 is_stmt 1 view .LVU2773
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 8366              		.loc 1 333 5 view .LVU2774
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 8367              		.loc 1 333 8 is_stmt 0 view .LVU2775
 8368 0655 81FDFF00 		cmpl	$255, %ebp
 8368      0000
 8369 065b 0F85A4FD 		jne	.L635
 8369      FFFF
 8370              	.L736:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8371              		.loc 1 334 7 is_stmt 1 view .LVU2776
 8372              	.LVL853:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8373              		.loc 1 334 7 is_stmt 0 view .LVU2777
 8374 0661 C60600   		movb	$0, (%rsi)
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8375              		.loc 1 334 7 is_stmt 1 view .LVU2778
 8376              	.LVL854:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8377              		.loc 1 334 7 is_stmt 0 view .LVU2779
 8378 0664 4883E801 		subq	$1, %rax
 8379              	.LVL855:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8380              		.loc 1 334 7 view .LVU2780
 8381 0668 7466     		je	.L636
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8382              		.loc 1 334 7 view .LVU2781
 8383 066a 4883C601 		addq	$1, %rsi
 8384              	.LVL856:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8385              		.loc 1 334 7 view .LVU2782
 8386 066e E992FDFF 		jmp	.L635
 8386      FF
 8387              	.LVL857:
 8388              		.p2align 4,,10
 8389 0673 0F1F4400 		.p2align 3
 8389      00
 8390              	.L639:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8391              		.loc 1 334 7 view .LVU2783
 8392              	.LBE626:
 8393              	.LBE628:
 8394              	.LBE644:
 8395              	.LBB645:
 8396              	.LBB639:
 8397              	.LBB637:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 8398              		.loc 1 332 5 is_stmt 1 view .LVU2784
 8399              	.LBB633:
 8400              	.LBI633:
 269:fltk-1.3.4-1/jpeg/jchuff.c **** /* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
 8401              		.loc 1 269 1 view .LVU2785
 8402              	.LBB634:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8403              		.loc 1 272 3 view .LVU2786
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8404              		.loc 1 272 33 is_stmt 0 view .LVU2787
 8405 0678 498B5F28 		movq	40(%r15), %rbx
 8406              	.LVL858:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8407              		.loc 1 274 3 is_stmt 1 view .LVU2788
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8408              		.loc 1 274 10 is_stmt 0 view .LVU2789
 8409 067c 4C89FF   		movq	%r15, %rdi
 8410 067f FF5318   		call	*24(%rbx)
 8411              	.LVL859:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8412              		.loc 1 274 6 view .LVU2790
 8413 0682 85C0     		testl	%eax, %eax
 8414 0684 0F8466FF 		je	.L592
 8414      FFFF
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 8415              		.loc 1 277 3 is_stmt 1 view .LVU2791
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 8416              		.loc 1 277 33 is_stmt 0 view .LVU2792
 8417 068a 488B33   		movq	(%rbx), %rsi
 8418              	.LVL860:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 8419              		.loc 1 278 3 is_stmt 1 view .LVU2793
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 8420              		.loc 1 278 31 is_stmt 0 view .LVU2794
 8421 068d 488B4308 		movq	8(%rbx), %rax
 8422              	.LVL861:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8423              		.loc 1 279 3 is_stmt 1 view .LVU2795
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8424              		.loc 1 279 3 is_stmt 0 view .LVU2796
 8425              	.LBE634:
 8426              	.LBE633:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 8427              		.loc 1 332 40 is_stmt 1 view .LVU2797
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 8428              		.loc 1 333 5 view .LVU2798
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 8429              		.loc 1 333 8 is_stmt 0 view .LVU2799
 8430 0691 81FDFF00 		cmpl	$255, %ebp
 8430      0000
 8431 0697 0F85CBFD 		jne	.L641
 8431      FFFF
 8432              	.L737:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8433              		.loc 1 334 7 is_stmt 1 view .LVU2800
 8434              	.LVL862:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8435              		.loc 1 334 7 is_stmt 0 view .LVU2801
 8436 069d C60600   		movb	$0, (%rsi)
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8437              		.loc 1 334 7 is_stmt 1 view .LVU2802
 8438              	.LVL863:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8439              		.loc 1 334 7 is_stmt 0 view .LVU2803
 8440 06a0 4883E801 		subq	$1, %rax
 8441              	.LVL864:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8442              		.loc 1 334 7 view .LVU2804
 8443 06a4 744A     		je	.L642
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8444              		.loc 1 334 7 view .LVU2805
 8445 06a6 4883C601 		addq	$1, %rsi
 8446              	.LVL865:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8447              		.loc 1 334 7 view .LVU2806
 8448 06aa E9B9FDFF 		jmp	.L641
 8448      FF
 8449              	.LVL866:
 8450 06af 90       		.p2align 4,,10
 8451              		.p2align 3
 8452              	.L607:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8453              		.loc 1 334 7 view .LVU2807
 8454              	.LBE637:
 8455              	.LBE639:
 8456              	.LBE645:
 8457              	.LBB646:
 8458              	.LBB607:
 8459              	.LBB605:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8460              		.loc 1 334 7 is_stmt 1 view .LVU2808
 8461              	.LBB602:
 8462              	.LBI602:
 269:fltk-1.3.4-1/jpeg/jchuff.c **** /* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
 8463              		.loc 1 269 1 view .LVU2809
 8464              	.LBB603:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8465              		.loc 1 272 3 view .LVU2810
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8466              		.loc 1 272 33 is_stmt 0 view .LVU2811
 8467 06b0 498B5F28 		movq	40(%r15), %rbx
 8468              	.LVL867:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8469              		.loc 1 274 3 is_stmt 1 view .LVU2812
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8470              		.loc 1 274 10 is_stmt 0 view .LVU2813
 8471 06b4 4C89FF   		movq	%r15, %rdi
 8472 06b7 FF5318   		call	*24(%rbx)
 8473              	.LVL868:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8474              		.loc 1 274 6 view .LVU2814
 8475 06ba 85C0     		testl	%eax, %eax
 8476 06bc 0F842EFF 		je	.L592
 8476      FFFF
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 8477              		.loc 1 277 3 is_stmt 1 view .LVU2815
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 8478              		.loc 1 277 33 is_stmt 0 view .LVU2816
 8479 06c2 488B33   		movq	(%rbx), %rsi
 8480              	.LVL869:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 8481              		.loc 1 278 3 is_stmt 1 view .LVU2817
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 8482              		.loc 1 278 31 is_stmt 0 view .LVU2818
 8483 06c5 488B4308 		movq	8(%rbx), %rax
 8484              	.LVL870:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8485              		.loc 1 279 3 is_stmt 1 view .LVU2819
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8486              		.loc 1 279 3 is_stmt 0 view .LVU2820
 8487 06c9 E91DFBFF 		jmp	.L606
 8487      FF
 8488              	.LVL871:
 8489 06ce 6690     		.p2align 4,,10
 8490              		.p2align 3
 8491              	.L636:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8492              		.loc 1 279 3 view .LVU2821
 8493              	.LBE603:
 8494              	.LBE602:
 8495              	.LBE605:
 8496              	.LBE607:
 8497              	.LBE646:
 8498              	.LBB647:
 8499              	.LBB629:
 8500              	.LBB627:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8501              		.loc 1 334 7 is_stmt 1 view .LVU2822
 8502              	.LBB624:
 8503              	.LBI624:
 269:fltk-1.3.4-1/jpeg/jchuff.c **** /* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
 8504              		.loc 1 269 1 view .LVU2823
 8505              	.LBB625:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8506              		.loc 1 272 3 view .LVU2824
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8507              		.loc 1 272 33 is_stmt 0 view .LVU2825
 8508 06d0 498B5F28 		movq	40(%r15), %rbx
 8509              	.LVL872:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8510              		.loc 1 274 3 is_stmt 1 view .LVU2826
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8511              		.loc 1 274 10 is_stmt 0 view .LVU2827
 8512 06d4 4C89FF   		movq	%r15, %rdi
 8513 06d7 FF5318   		call	*24(%rbx)
 8514              	.LVL873:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8515              		.loc 1 274 6 view .LVU2828
 8516 06da 85C0     		testl	%eax, %eax
 8517 06dc 0F840EFF 		je	.L592
 8517      FFFF
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 8518              		.loc 1 277 3 is_stmt 1 view .LVU2829
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 8519              		.loc 1 277 33 is_stmt 0 view .LVU2830
 8520 06e2 488B33   		movq	(%rbx), %rsi
 8521              	.LVL874:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 8522              		.loc 1 278 3 is_stmt 1 view .LVU2831
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 8523              		.loc 1 278 31 is_stmt 0 view .LVU2832
 8524 06e5 488B4308 		movq	8(%rbx), %rax
 8525              	.LVL875:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8526              		.loc 1 279 3 is_stmt 1 view .LVU2833
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8527              		.loc 1 279 3 is_stmt 0 view .LVU2834
 8528 06e9 E917FDFF 		jmp	.L635
 8528      FF
 8529              	.LVL876:
 8530 06ee 6690     		.p2align 4,,10
 8531              		.p2align 3
 8532              	.L642:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8533              		.loc 1 279 3 view .LVU2835
 8534              	.LBE625:
 8535              	.LBE624:
 8536              	.LBE627:
 8537              	.LBE629:
 8538              	.LBE647:
 8539              	.LBB648:
 8540              	.LBB640:
 8541              	.LBB638:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8542              		.loc 1 334 7 is_stmt 1 view .LVU2836
 8543              	.LBB635:
 8544              	.LBI635:
 269:fltk-1.3.4-1/jpeg/jchuff.c **** /* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
 8545              		.loc 1 269 1 view .LVU2837
 8546              	.LBB636:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8547              		.loc 1 272 3 view .LVU2838
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8548              		.loc 1 272 33 is_stmt 0 view .LVU2839
 8549 06f0 498B5F28 		movq	40(%r15), %rbx
 8550              	.LVL877:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8551              		.loc 1 274 3 is_stmt 1 view .LVU2840
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8552              		.loc 1 274 10 is_stmt 0 view .LVU2841
 8553 06f4 4C89FF   		movq	%r15, %rdi
 8554 06f7 FF5318   		call	*24(%rbx)
 8555              	.LVL878:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8556              		.loc 1 274 6 view .LVU2842
 8557 06fa 85C0     		testl	%eax, %eax
 8558 06fc 0F84EEFE 		je	.L592
 8558      FFFF
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 8559              		.loc 1 277 3 is_stmt 1 view .LVU2843
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 8560              		.loc 1 277 33 is_stmt 0 view .LVU2844
 8561 0702 488B33   		movq	(%rbx), %rsi
 8562              	.LVL879:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 8563              		.loc 1 278 3 is_stmt 1 view .LVU2845
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 8564              		.loc 1 278 31 is_stmt 0 view .LVU2846
 8565 0705 488B4308 		movq	8(%rbx), %rax
 8566              	.LVL880:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8567              		.loc 1 279 3 is_stmt 1 view .LVU2847
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8568              		.loc 1 279 3 is_stmt 0 view .LVU2848
 8569 0709 E95AFDFF 		jmp	.L641
 8569      FF
 8570              	.LVL881:
 8571 070e 6690     		.p2align 4,,10
 8572              		.p2align 3
 8573              	.L733:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8574              		.loc 1 279 3 view .LVU2849
 8575              	.LBE636:
 8576              	.LBE635:
 8577              	.LBE638:
 8578              	.LBE640:
 8579              	.LBE648:
 952:fltk-1.3.4-1/jpeg/jchuff.c ****       return FALSE;
 8580              		.loc 1 952 5 is_stmt 1 view .LVU2850
 8581              	.LBB649:
 8582              	.LBI649:
 307:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits; return TRUE if successful, FALSE if must suspend */
 8583              		.loc 1 307 1 view .LVU2851
 8584              	.LBB650:
 311:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 8585              		.loc 1 311 3 view .LVU2852
 312:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8586              		.loc 1 312 3 view .LVU2853
 315:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);
 8587              		.loc 1 315 3 view .LVU2854
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8588              		.loc 1 319 3 view .LVU2855
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8589              		.loc 1 319 47 is_stmt 0 view .LVU2856
 8590 0710 4489E1   		movl	%r12d, %ecx
 8591 0713 BF010000 		movl	$1, %edi
 8591      00
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8592              		.loc 1 319 14 view .LVU2857
 8593 0718 8B1C24   		movl	(%rsp), %ebx
 322:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8594              		.loc 1 322 12 view .LVU2858
 8595 071b 4501E5   		addl	%r12d, %r13d
 8596              	.LVL882:
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8597              		.loc 1 319 47 view .LVU2859
 8598 071e 48D3E7   		salq	%cl, %rdi
 8599 0721 4889F9   		movq	%rdi, %rcx
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8600              		.loc 1 319 56 view .LVU2860
 8601 0724 4883E901 		subq	$1, %rcx
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8602              		.loc 1 319 14 view .LVU2861
 8603 0728 21CB     		andl	%ecx, %ebx
 8604              	.LVL883:
 322:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8605              		.loc 1 322 3 is_stmt 1 view .LVU2862
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8606              		.loc 1 324 3 view .LVU2863
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8607              		.loc 1 324 21 is_stmt 0 view .LVU2864
 8608 072a B9180000 		movl	$24, %ecx
 8608      00
 8609 072f 4429E9   		subl	%r13d, %ecx
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8610              		.loc 1 324 14 view .LVU2865
 8611 0732 48D3E3   		salq	%cl, %rbx
 8612              	.LVL884:
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8613              		.loc 1 327 3 is_stmt 1 view .LVU2866
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8614              		.loc 1 327 14 is_stmt 0 view .LVU2867
 8615 0735 4909DE   		orq	%rbx, %r14
 8616              	.LVL885:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 8617              		.loc 1 329 3 is_stmt 1 view .LVU2868
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 8618              		.loc 1 329 9 view .LVU2869
 8619 0738 4183FD07 		cmpl	$7, %r13d
 8620 073c 0F8EC0FA 		jle	.L609
 8620      FFFF
 8621              	.L615:
 8622              	.LBB651:
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8623              		.loc 1 330 5 view .LVU2870
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8624              		.loc 1 330 32 is_stmt 0 view .LVU2871
 8625 0742 4C89F2   		movq	%r14, %rdx
 8626 0745 48C1FA10 		sarq	$16, %rdx
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 8627              		.loc 1 332 5 view .LVU2872
 8628 0749 8816     		movb	%dl, (%rsi)
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8629              		.loc 1 330 9 view .LVU2873
 8630 074b 0FB6DA   		movzbl	%dl, %ebx
 8631              	.LVL886:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 8632              		.loc 1 332 5 is_stmt 1 view .LVU2874
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 8633              		.loc 1 332 5 view .LVU2875
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 8634              		.loc 1 332 5 is_stmt 0 view .LVU2876
 8635 074e 4883E801 		subq	$1, %rax
 8636              	.LVL887:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 8637              		.loc 1 332 5 view .LVU2877
 8638 0752 7424     		je	.L611
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 8639              		.loc 1 332 5 view .LVU2878
 8640 0754 4883C601 		addq	$1, %rsi
 8641              	.LVL888:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 8642              		.loc 1 332 40 is_stmt 1 view .LVU2879
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 8643              		.loc 1 333 5 view .LVU2880
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 8644              		.loc 1 333 8 is_stmt 0 view .LVU2881
 8645 0758 81FBFF00 		cmpl	$255, %ebx
 8645      0000
 8646 075e 743A     		je	.L741
 8647              	.LVL889:
 8648              	.L613:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8649              		.loc 1 334 42 is_stmt 1 view .LVU2882
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 8650              		.loc 1 336 5 view .LVU2883
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 8651              		.loc 1 337 14 is_stmt 0 view .LVU2884
 8652 0760 4183ED08 		subl	$8, %r13d
 8653              	.LVL890:
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 8654              		.loc 1 336 16 view .LVU2885
 8655 0764 49C1E608 		salq	$8, %r14
 8656              	.LVL891:
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 8657              		.loc 1 337 5 is_stmt 1 view .LVU2886
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 8658              		.loc 1 337 5 is_stmt 0 view .LVU2887
 8659              	.LBE651:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 8660              		.loc 1 329 9 is_stmt 1 view .LVU2888
 8661 0768 4183FD07 		cmpl	$7, %r13d
 8662 076c 7FD4     		jg	.L615
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 8663              		.loc 1 329 9 is_stmt 0 view .LVU2889
 8664 076e E98FFAFF 		jmp	.L609
 8664      FF
 8665              	.LVL892:
 8666              		.p2align 4,,10
 8667 0773 0F1F4400 		.p2align 3
 8667      00
 8668              	.L611:
 8669              	.LBB656:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 8670              		.loc 1 332 5 is_stmt 1 view .LVU2890
 8671              	.LBB652:
 8672              	.LBI652:
 269:fltk-1.3.4-1/jpeg/jchuff.c **** /* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
 8673              		.loc 1 269 1 view .LVU2891
 8674              	.LBB653:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8675              		.loc 1 272 3 view .LVU2892
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8676              		.loc 1 272 33 is_stmt 0 view .LVU2893
 8677 0778 498B6F28 		movq	40(%r15), %rbp
 8678              	.LVL893:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8679              		.loc 1 274 3 is_stmt 1 view .LVU2894
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8680              		.loc 1 274 10 is_stmt 0 view .LVU2895
 8681 077c 4C89FF   		movq	%r15, %rdi
 8682 077f FF5518   		call	*24(%rbp)
 8683              	.LVL894:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8684              		.loc 1 274 6 view .LVU2896
 8685 0782 85C0     		testl	%eax, %eax
 8686 0784 0F8466FE 		je	.L592
 8686      FFFF
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 8687              		.loc 1 277 3 is_stmt 1 view .LVU2897
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 8688              		.loc 1 277 33 is_stmt 0 view .LVU2898
 8689 078a 488B7500 		movq	0(%rbp), %rsi
 8690              	.LVL895:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 8691              		.loc 1 278 3 is_stmt 1 view .LVU2899
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 8692              		.loc 1 278 31 is_stmt 0 view .LVU2900
 8693 078e 488B4508 		movq	8(%rbp), %rax
 8694              	.LVL896:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8695              		.loc 1 279 3 is_stmt 1 view .LVU2901
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8696              		.loc 1 279 3 is_stmt 0 view .LVU2902
 8697              	.LBE653:
 8698              	.LBE652:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 8699              		.loc 1 332 40 is_stmt 1 view .LVU2903
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 8700              		.loc 1 333 5 view .LVU2904
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 8701              		.loc 1 333 8 is_stmt 0 view .LVU2905
 8702 0792 81FBFF00 		cmpl	$255, %ebx
 8702      0000
 8703 0798 75C6     		jne	.L613
 8704              	.L741:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8705              		.loc 1 334 7 is_stmt 1 view .LVU2906
 8706              	.LVL897:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8707              		.loc 1 334 7 is_stmt 0 view .LVU2907
 8708 079a C60600   		movb	$0, (%rsi)
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8709              		.loc 1 334 7 is_stmt 1 view .LVU2908
 8710              	.LVL898:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8711              		.loc 1 334 7 is_stmt 0 view .LVU2909
 8712 079d 4883E801 		subq	$1, %rax
 8713              	.LVL899:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8714              		.loc 1 334 7 view .LVU2910
 8715 07a1 740D     		je	.L614
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8716              		.loc 1 334 7 view .LVU2911
 8717 07a3 4883C601 		addq	$1, %rsi
 8718              	.LVL900:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8719              		.loc 1 334 7 view .LVU2912
 8720 07a7 EBB7     		jmp	.L613
 8721              	.LVL901:
 8722 07a9 0F1F8000 		.p2align 4,,10
 8722      000000
 8723              		.p2align 3
 8724              	.L614:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8725              		.loc 1 334 7 is_stmt 1 view .LVU2913
 8726              	.LBB654:
 8727              	.LBI654:
 269:fltk-1.3.4-1/jpeg/jchuff.c **** /* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
 8728              		.loc 1 269 1 view .LVU2914
 8729              	.LBB655:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8730              		.loc 1 272 3 view .LVU2915
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8731              		.loc 1 272 33 is_stmt 0 view .LVU2916
 8732 07b0 498B5F28 		movq	40(%r15), %rbx
 8733              	.LVL902:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8734              		.loc 1 274 3 is_stmt 1 view .LVU2917
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8735              		.loc 1 274 10 is_stmt 0 view .LVU2918
 8736 07b4 4C89FF   		movq	%r15, %rdi
 8737 07b7 FF5318   		call	*24(%rbx)
 8738              	.LVL903:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8739              		.loc 1 274 6 view .LVU2919
 8740 07ba 85C0     		testl	%eax, %eax
 8741 07bc 0F842EFE 		je	.L592
 8741      FFFF
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 8742              		.loc 1 277 3 is_stmt 1 view .LVU2920
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 8743              		.loc 1 277 33 is_stmt 0 view .LVU2921
 8744 07c2 488B33   		movq	(%rbx), %rsi
 8745              	.LVL904:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 8746              		.loc 1 278 3 is_stmt 1 view .LVU2922
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 8747              		.loc 1 278 31 is_stmt 0 view .LVU2923
 8748 07c5 488B4308 		movq	8(%rbx), %rax
 8749              	.LVL905:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8750              		.loc 1 279 3 is_stmt 1 view .LVU2924
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8751              		.loc 1 279 3 is_stmt 0 view .LVU2925
 8752 07c9 EB95     		jmp	.L613
 8753              	.LVL906:
 8754 07cb 0F1F4400 		.p2align 4,,10
 8754      00
 8755              		.p2align 3
 8756              	.L738:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8757              		.loc 1 279 3 view .LVU2926
 8758              	.LBE655:
 8759              	.LBE654:
 8760              	.LBE656:
 8761              	.LBE650:
 8762              	.LBE649:
1001:fltk-1.3.4-1/jpeg/jchuff.c ****       return FALSE;
 8763              		.loc 1 1001 5 is_stmt 1 view .LVU2927
1001:fltk-1.3.4-1/jpeg/jchuff.c ****       return FALSE;
 8764              		.loc 1 1001 11 is_stmt 0 view .LVU2928
 8765 07d0 488B7C24 		movq	40(%rsp), %rdi
 8765      28
 8766 07d5 0FB6AF00 		movzbl	1024(%rdi), %ebp
 8766      040000
 8767 07dc 8B1F     		movl	(%rdi), %ebx
 8768              	.LVL907:
 8769              	.LBB657:
 8770              	.LBI657:
 307:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits; return TRUE if successful, FALSE if must suspend */
 8771              		.loc 1 307 1 is_stmt 1 view .LVU2929
 8772              	.LBB658:
 311:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 8773              		.loc 1 311 3 view .LVU2930
 312:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8774              		.loc 1 312 3 view .LVU2931
 315:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);
 8775              		.loc 1 315 3 view .LVU2932
 315:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);
 8776              		.loc 1 315 6 is_stmt 0 view .LVU2933
 8777 07de 85ED     		testl	%ebp, %ebp
 8778 07e0 0F84BA00 		je	.L742
 8778      0000
 8779              	.LVL908:
 8780              	.L645:
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8781              		.loc 1 319 3 is_stmt 1 view .LVU2934
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8782              		.loc 1 319 47 is_stmt 0 view .LVU2935
 8783 07e6 89E9     		movl	%ebp, %ecx
 8784 07e8 BF010000 		movl	$1, %edi
 8784      00
 322:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8785              		.loc 1 322 12 view .LVU2936
 8786 07ed 4101ED   		addl	%ebp, %r13d
 8787              	.LVL909:
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8788              		.loc 1 319 47 view .LVU2937
 8789 07f0 48D3E7   		salq	%cl, %rdi
 8790 07f3 4889F9   		movq	%rdi, %rcx
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8791              		.loc 1 319 56 view .LVU2938
 8792 07f6 4883E901 		subq	$1, %rcx
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8793              		.loc 1 319 14 view .LVU2939
 8794 07fa 21CB     		andl	%ecx, %ebx
 8795              	.LVL910:
 322:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8796              		.loc 1 322 3 is_stmt 1 view .LVU2940
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8797              		.loc 1 324 3 view .LVU2941
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8798              		.loc 1 324 21 is_stmt 0 view .LVU2942
 8799 07fc B9180000 		movl	$24, %ecx
 8799      00
 8800 0801 4429E9   		subl	%r13d, %ecx
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8801              		.loc 1 324 14 view .LVU2943
 8802 0804 48D3E3   		salq	%cl, %rbx
 8803              	.LVL911:
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8804              		.loc 1 327 3 is_stmt 1 view .LVU2944
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8805              		.loc 1 327 14 is_stmt 0 view .LVU2945
 8806 0807 4909DE   		orq	%rbx, %r14
 8807              	.LVL912:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 8808              		.loc 1 329 3 is_stmt 1 view .LVU2946
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 8809              		.loc 1 329 9 view .LVU2947
 8810 080a 4183FD07 		cmpl	$7, %r13d
 8811 080e 0F8E84FC 		jle	.L616
 8811      FFFF
 8812              	.LVL913:
 8813              	.L651:
 8814              	.LBB659:
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8815              		.loc 1 330 5 view .LVU2948
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8816              		.loc 1 330 32 is_stmt 0 view .LVU2949
 8817 0814 4C89F2   		movq	%r14, %rdx
 8818 0817 48C1FA10 		sarq	$16, %rdx
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 8819              		.loc 1 332 5 view .LVU2950
 8820 081b 8816     		movb	%dl, (%rsi)
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8821              		.loc 1 330 9 view .LVU2951
 8822 081d 0FB6DA   		movzbl	%dl, %ebx
 8823              	.LVL914:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 8824              		.loc 1 332 5 is_stmt 1 view .LVU2952
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 8825              		.loc 1 332 5 view .LVU2953
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 8826              		.loc 1 332 5 is_stmt 0 view .LVU2954
 8827 0820 4883E801 		subq	$1, %rax
 8828              	.LVL915:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 8829              		.loc 1 332 5 view .LVU2955
 8830 0824 7422     		je	.L647
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 8831              		.loc 1 332 5 view .LVU2956
 8832 0826 4883C601 		addq	$1, %rsi
 8833              	.LVL916:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 8834              		.loc 1 332 40 is_stmt 1 view .LVU2957
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 8835              		.loc 1 333 5 view .LVU2958
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 8836              		.loc 1 333 8 is_stmt 0 view .LVU2959
 8837 082a 81FBFF00 		cmpl	$255, %ebx
 8837      0000
 8838 0830 7438     		je	.L743
 8839              	.LVL917:
 8840              	.L649:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8841              		.loc 1 334 42 is_stmt 1 view .LVU2960
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 8842              		.loc 1 336 5 view .LVU2961
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 8843              		.loc 1 337 14 is_stmt 0 view .LVU2962
 8844 0832 4183ED08 		subl	$8, %r13d
 8845              	.LVL918:
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 8846              		.loc 1 336 16 view .LVU2963
 8847 0836 49C1E608 		salq	$8, %r14
 8848              	.LVL919:
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 8849              		.loc 1 337 5 is_stmt 1 view .LVU2964
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 8850              		.loc 1 337 5 is_stmt 0 view .LVU2965
 8851              	.LBE659:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 8852              		.loc 1 329 9 is_stmt 1 view .LVU2966
 8853 083a 4183FD07 		cmpl	$7, %r13d
 8854 083e 7FD4     		jg	.L651
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 8855              		.loc 1 329 9 is_stmt 0 view .LVU2967
 8856 0840 E953FCFF 		jmp	.L616
 8856      FF
 8857              	.LVL920:
 8858              		.p2align 4,,10
 8859 0845 0F1F00   		.p2align 3
 8860              	.L647:
 8861              	.LBB664:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 8862              		.loc 1 332 5 is_stmt 1 view .LVU2968
 8863              	.LBB660:
 8864              	.LBI660:
 269:fltk-1.3.4-1/jpeg/jchuff.c **** /* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
 8865              		.loc 1 269 1 view .LVU2969
 8866              	.LBB661:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8867              		.loc 1 272 3 view .LVU2970
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8868              		.loc 1 272 33 is_stmt 0 view .LVU2971
 8869 0848 498B6F28 		movq	40(%r15), %rbp
 8870              	.LVL921:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8871              		.loc 1 274 3 is_stmt 1 view .LVU2972
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8872              		.loc 1 274 10 is_stmt 0 view .LVU2973
 8873 084c 4C89FF   		movq	%r15, %rdi
 8874 084f FF5518   		call	*24(%rbp)
 8875              	.LVL922:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8876              		.loc 1 274 6 view .LVU2974
 8877 0852 85C0     		testl	%eax, %eax
 8878 0854 0F8496FD 		je	.L592
 8878      FFFF
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 8879              		.loc 1 277 3 is_stmt 1 view .LVU2975
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 8880              		.loc 1 277 33 is_stmt 0 view .LVU2976
 8881 085a 488B7500 		movq	0(%rbp), %rsi
 8882              	.LVL923:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 8883              		.loc 1 278 3 is_stmt 1 view .LVU2977
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 8884              		.loc 1 278 31 is_stmt 0 view .LVU2978
 8885 085e 488B4508 		movq	8(%rbp), %rax
 8886              	.LVL924:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8887              		.loc 1 279 3 is_stmt 1 view .LVU2979
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8888              		.loc 1 279 3 is_stmt 0 view .LVU2980
 8889              	.LBE661:
 8890              	.LBE660:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 8891              		.loc 1 332 40 is_stmt 1 view .LVU2981
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 8892              		.loc 1 333 5 view .LVU2982
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 8893              		.loc 1 333 8 is_stmt 0 view .LVU2983
 8894 0862 81FBFF00 		cmpl	$255, %ebx
 8894      0000
 8895 0868 75C8     		jne	.L649
 8896              	.L743:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8897              		.loc 1 334 7 is_stmt 1 view .LVU2984
 8898              	.LVL925:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8899              		.loc 1 334 7 is_stmt 0 view .LVU2985
 8900 086a C60600   		movb	$0, (%rsi)
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8901              		.loc 1 334 7 is_stmt 1 view .LVU2986
 8902              	.LVL926:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8903              		.loc 1 334 7 is_stmt 0 view .LVU2987
 8904 086d 4883E801 		subq	$1, %rax
 8905              	.LVL927:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8906              		.loc 1 334 7 view .LVU2988
 8907 0871 751D     		jne	.L744
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8908              		.loc 1 334 7 is_stmt 1 view .LVU2989
 8909              	.LVL928:
 8910              	.LBB662:
 8911              	.LBI662:
 269:fltk-1.3.4-1/jpeg/jchuff.c **** /* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
 8912              		.loc 1 269 1 view .LVU2990
 8913              	.LBB663:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8914              		.loc 1 272 3 view .LVU2991
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8915              		.loc 1 272 33 is_stmt 0 view .LVU2992
 8916 0873 498B5F28 		movq	40(%r15), %rbx
 8917              	.LVL929:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8918              		.loc 1 274 3 is_stmt 1 view .LVU2993
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8919              		.loc 1 274 10 is_stmt 0 view .LVU2994
 8920 0877 4C89FF   		movq	%r15, %rdi
 8921 087a FF5318   		call	*24(%rbx)
 8922              	.LVL930:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8923              		.loc 1 274 6 view .LVU2995
 8924 087d 85C0     		testl	%eax, %eax
 8925 087f 0F846BFD 		je	.L592
 8925      FFFF
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 8926              		.loc 1 277 3 is_stmt 1 view .LVU2996
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 8927              		.loc 1 277 33 is_stmt 0 view .LVU2997
 8928 0885 488B33   		movq	(%rbx), %rsi
 8929              	.LVL931:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 8930              		.loc 1 278 3 is_stmt 1 view .LVU2998
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 8931              		.loc 1 278 31 is_stmt 0 view .LVU2999
 8932 0888 488B4308 		movq	8(%rbx), %rax
 8933              	.LVL932:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8934              		.loc 1 279 3 is_stmt 1 view .LVU3000
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8935              		.loc 1 279 3 is_stmt 0 view .LVU3001
 8936 088c EBA4     		jmp	.L649
 8937              	.LVL933:
 8938 088e 6690     		.p2align 4,,10
 8939              		.p2align 3
 8940              	.L744:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 8941              		.loc 1 279 3 view .LVU3002
 8942              	.LBE663:
 8943              	.LBE662:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8944              		.loc 1 334 7 view .LVU3003
 8945 0890 4883C601 		addq	$1, %rsi
 8946              	.LVL934:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8947              		.loc 1 334 7 view .LVU3004
 8948 0894 EB9C     		jmp	.L649
 8949              	.LVL935:
 8950 0896 662E0F1F 		.p2align 4,,10
 8950      84000000 
 8950      0000
 8951              		.p2align 3
 8952              	.L742:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 8953              		.loc 1 334 7 view .LVU3005
 8954              	.LBE664:
 316:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8955              		.loc 1 316 5 view .LVU3006
 8956 08a0 498B0F   		movq	(%r15), %rcx
 8957 08a3 48894424 		movq	%rax, 24(%rsp)
 8957      18
 8958 08a8 4C89FF   		movq	%r15, %rdi
 8959 08ab 48893424 		movq	%rsi, (%rsp)
 316:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8960              		.loc 1 316 5 is_stmt 1 view .LVU3007
 8961 08af C7412829 		movl	$41, 40(%rcx)
 8961      000000
 8962 08b6 498B0F   		movq	(%r15), %rcx
 8963 08b9 FF11     		call	*(%rcx)
 8964              	.LVL936:
 316:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8965              		.loc 1 316 5 is_stmt 0 view .LVU3008
 8966 08bb 488B4424 		movq	24(%rsp), %rax
 8966      18
 8967 08c0 488B3424 		movq	(%rsp), %rsi
 8968 08c4 E91DFFFF 		jmp	.L645
 8968      FF
 8969              	.LVL937:
 8970 08c9 0F1F8000 		.p2align 4,,10
 8970      000000
 8971              		.p2align 3
 8972              	.L731:
 316:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8973              		.loc 1 316 5 view .LVU3009
 8974              	.LBE658:
 8975              	.LBE657:
 8976              	.LBE669:
 8977              	.LBE699:
1029:fltk-1.3.4-1/jpeg/jchuff.c **** 	return FALSE;
 8978              		.loc 1 1029 7 is_stmt 1 view .LVU3010
1029:fltk-1.3.4-1/jpeg/jchuff.c **** 	return FALSE;
 8979              		.loc 1 1029 13 is_stmt 0 view .LVU3011
 8980 08d0 8B593C   		movl	60(%rcx), %ebx
 8981              	.LVL938:
 8982              	.LBB700:
 8983              	.LBI674:
 495:fltk-1.3.4-1/jpeg/jchuff.c **** {
 8984              		.loc 1 495 1 is_stmt 1 view .LVU3012
 8985              	.LBB698:
 497:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8986              		.loc 1 497 3 view .LVU3013
 499:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8987              		.loc 1 499 3 view .LVU3014
 8988              	.LBB693:
 8989              	.LBI676:
 391:fltk-1.3.4-1/jpeg/jchuff.c **** {
 8990              		.loc 1 391 1 view .LVU3015
 8991              	.LBB688:
 393:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 8992              		.loc 1 393 3 view .LVU3016
 8993              	.LBB687:
 8994              	.LBI678:
 307:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits; return TRUE if successful, FALSE if must suspend */
 8995              		.loc 1 307 1 view .LVU3017
 8996              	.LBB686:
 311:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 8997              		.loc 1 311 3 view .LVU3018
 312:fltk-1.3.4-1/jpeg/jchuff.c **** 
 8998              		.loc 1 312 3 view .LVU3019
 315:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);
 8999              		.loc 1 315 3 view .LVU3020
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9000              		.loc 1 319 3 view .LVU3021
 322:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9001              		.loc 1 322 3 view .LVU3022
 322:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9002              		.loc 1 322 12 is_stmt 0 view .LVU3023
 9003 08d3 458D6507 		leal	7(%r13), %r12d
 9004              	.LVL939:
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9005              		.loc 1 324 3 is_stmt 1 view .LVU3024
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9006              		.loc 1 324 21 is_stmt 0 view .LVU3025
 9007 08d7 B9180000 		movl	$24, %ecx
 9007      00
 9008              	.LVL940:
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9009              		.loc 1 324 14 view .LVU3026
 9010 08dc BD7F0000 		movl	$127, %ebp
 9010      00
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9011              		.loc 1 324 21 view .LVU3027
 9012 08e1 4429E1   		subl	%r12d, %ecx
 324:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9013              		.loc 1 324 14 view .LVU3028
 9014 08e4 48D3E5   		salq	%cl, %rbp
 9015              	.LVL941:
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9016              		.loc 1 327 3 is_stmt 1 view .LVU3029
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9017              		.loc 1 327 14 is_stmt 0 view .LVU3030
 9018 08e7 4C09F5   		orq	%r14, %rbp
 9019              	.LVL942:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 9020              		.loc 1 329 3 is_stmt 1 view .LVU3031
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 9021              		.loc 1 329 9 view .LVU3032
 9022 08ea 4183FC07 		cmpl	$7, %r12d
 9023 08ee 0F8ED6FC 		jle	.L585
 9023      FFFF
 9024              	.LVL943:
 9025              	.L593:
 9026              	.LBB680:
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9027              		.loc 1 330 5 view .LVU3033
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9028              		.loc 1 330 32 is_stmt 0 view .LVU3034
 9029 08f4 4889EA   		movq	%rbp, %rdx
 9030 08f7 48C1FA10 		sarq	$16, %rdx
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 9031              		.loc 1 332 5 view .LVU3035
 9032 08fb 8816     		movb	%dl, (%rsi)
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9033              		.loc 1 330 9 view .LVU3036
 9034 08fd 440FB6EA 		movzbl	%dl, %r13d
 9035              	.LVL944:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 9036              		.loc 1 332 5 is_stmt 1 view .LVU3037
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 9037              		.loc 1 332 5 view .LVU3038
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 9038              		.loc 1 332 5 is_stmt 0 view .LVU3039
 9039 0901 4883E801 		subq	$1, %rax
 9040              	.LVL945:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 9041              		.loc 1 332 5 view .LVU3040
 9042 0905 7429     		je	.L586
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 9043              		.loc 1 332 5 view .LVU3041
 9044 0907 4883C601 		addq	$1, %rsi
 9045              	.LVL946:
 9046              	.L587:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 9047              		.loc 1 332 40 is_stmt 1 view .LVU3042
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 9048              		.loc 1 333 5 view .LVU3043
 9049 090b 488D4E01 		leaq	1(%rsi), %rcx
 9050 090f 488D50FF 		leaq	-1(%rax), %rdx
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 9051              		.loc 1 333 8 is_stmt 0 view .LVU3044
 9052 0913 4181FDFF 		cmpl	$255, %r13d
 9052      000000
 9053 091a 7434     		je	.L745
 9054              	.LVL947:
 9055              	.L590:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 9056              		.loc 1 334 42 is_stmt 1 view .LVU3045
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 9057              		.loc 1 336 5 view .LVU3046
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 9058              		.loc 1 337 14 is_stmt 0 view .LVU3047
 9059 091c 4183EC08 		subl	$8, %r12d
 9060              	.LVL948:
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 9061              		.loc 1 336 16 view .LVU3048
 9062 0920 48C1E508 		salq	$8, %rbp
 9063              	.LVL949:
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 9064              		.loc 1 337 5 is_stmt 1 view .LVU3049
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 9065              		.loc 1 337 5 is_stmt 0 view .LVU3050
 9066              	.LBE680:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 9067              		.loc 1 329 9 is_stmt 1 view .LVU3051
 9068 0924 4183FC07 		cmpl	$7, %r12d
 9069 0928 7FCA     		jg	.L593
 9070 092a E9A3FCFF 		jmp	.L594
 9070      FF
 9071              	.LVL950:
 9072 092f 90       		.p2align 4,,10
 9073              		.p2align 3
 9074              	.L586:
 9075              	.LBB685:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 9076              		.loc 1 332 5 view .LVU3052
 9077              	.LBB681:
 9078              	.LBI681:
 269:fltk-1.3.4-1/jpeg/jchuff.c **** /* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
 9079              		.loc 1 269 1 view .LVU3053
 9080              	.LBB682:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9081              		.loc 1 272 3 view .LVU3054
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9082              		.loc 1 272 33 is_stmt 0 view .LVU3055
 9083 0930 4D8B7728 		movq	40(%r15), %r14
 9084              	.LVL951:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 9085              		.loc 1 274 3 is_stmt 1 view .LVU3056
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 9086              		.loc 1 274 10 is_stmt 0 view .LVU3057
 9087 0934 4C89FF   		movq	%r15, %rdi
 9088 0937 41FF5618 		call	*24(%r14)
 9089              	.LVL952:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 9090              		.loc 1 274 6 view .LVU3058
 9091 093b 85C0     		testl	%eax, %eax
 9092 093d 0F84ADFC 		je	.L592
 9092      FFFF
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 9093              		.loc 1 277 3 is_stmt 1 view .LVU3059
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 9094              		.loc 1 277 33 is_stmt 0 view .LVU3060
 9095 0943 498B36   		movq	(%r14), %rsi
 9096              	.LVL953:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 9097              		.loc 1 278 3 is_stmt 1 view .LVU3061
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 9098              		.loc 1 278 31 is_stmt 0 view .LVU3062
 9099 0946 498B4608 		movq	8(%r14), %rax
 9100              	.LVL954:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 9101              		.loc 1 279 3 is_stmt 1 view .LVU3063
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 9102              		.loc 1 279 3 is_stmt 0 view .LVU3064
 9103 094a EBBF     		jmp	.L587
 9104 094c 0F1F4000 		.p2align 4,,10
 9105              		.p2align 3
 9106              	.L745:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 9107              		.loc 1 279 3 view .LVU3065
 9108              	.LBE682:
 9109              	.LBE681:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 9110              		.loc 1 334 7 is_stmt 1 view .LVU3066
 9111              	.LVL955:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 9112              		.loc 1 334 7 is_stmt 0 view .LVU3067
 9113 0950 C60600   		movb	$0, (%rsi)
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 9114              		.loc 1 334 7 is_stmt 1 view .LVU3068
 9115              	.LVL956:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 9116              		.loc 1 334 7 is_stmt 0 view .LVU3069
 9117 0953 4885D2   		testq	%rdx, %rdx
 9118 0956 7418     		je	.L591
 9119 0958 488D7E02 		leaq	2(%rsi), %rdi
 9120 095c 488D70FE 		leaq	-2(%rax), %rsi
 9121              	.LVL957:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 9122              		.loc 1 334 7 view .LVU3070
 9123 0960 4889D0   		movq	%rdx, %rax
 9124              	.LVL958:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 9125              		.loc 1 334 7 view .LVU3071
 9126 0963 4889F2   		movq	%rsi, %rdx
 9127              	.LVL959:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 9128              		.loc 1 334 7 view .LVU3072
 9129 0966 4889CE   		movq	%rcx, %rsi
 9130 0969 4889F9   		movq	%rdi, %rcx
 9131              	.LVL960:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 9132              		.loc 1 334 7 view .LVU3073
 9133 096c EBAE     		jmp	.L590
 9134              	.LVL961:
 9135 096e 6690     		.p2align 4,,10
 9136              		.p2align 3
 9137              	.L591:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 9138              		.loc 1 334 7 is_stmt 1 view .LVU3074
 9139              	.LBB683:
 9140              	.LBI683:
 269:fltk-1.3.4-1/jpeg/jchuff.c **** /* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
 9141              		.loc 1 269 1 view .LVU3075
 9142              	.LBB684:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9143              		.loc 1 272 3 view .LVU3076
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9144              		.loc 1 272 33 is_stmt 0 view .LVU3077
 9145 0970 4D8B6F28 		movq	40(%r15), %r13
 9146              	.LVL962:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 9147              		.loc 1 274 3 is_stmt 1 view .LVU3078
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 9148              		.loc 1 274 10 is_stmt 0 view .LVU3079
 9149 0974 4C89FF   		movq	%r15, %rdi
 9150 0977 41FF5518 		call	*24(%r13)
 9151              	.LVL963:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 9152              		.loc 1 274 6 view .LVU3080
 9153 097b 85C0     		testl	%eax, %eax
 9154 097d 0F846DFC 		je	.L592
 9154      FFFF
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 9155              		.loc 1 277 3 is_stmt 1 view .LVU3081
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 9156              		.loc 1 277 33 is_stmt 0 view .LVU3082
 9157 0983 498B7500 		movq	0(%r13), %rsi
 9158              	.LVL964:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 9159              		.loc 1 278 3 is_stmt 1 view .LVU3083
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 9160              		.loc 1 278 31 is_stmt 0 view .LVU3084
 9161 0987 498B4508 		movq	8(%r13), %rax
 9162              	.LVL965:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 9163              		.loc 1 279 3 is_stmt 1 view .LVU3085
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 9164              		.loc 1 279 3 is_stmt 0 view .LVU3086
 9165 098b 488D4E01 		leaq	1(%rsi), %rcx
 9166 098f 488D50FF 		leaq	-1(%rax), %rdx
 9167 0993 EB87     		jmp	.L590
 9168              	.LVL966:
 9169              	.L739:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 9170              		.loc 1 279 3 view .LVU3087
 9171              	.LBE684:
 9172              	.LBE683:
 9173              	.LBE685:
 9174              	.LBE686:
 9175              	.LBE687:
 9176              	.LBE688:
 9177              	.LBE693:
 9178              	.LBB694:
 9179              	.LBB692:
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 9180              		.loc 1 277 3 is_stmt 1 view .LVU3088
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 9181              		.loc 1 277 33 is_stmt 0 view .LVU3089
 9182 0995 488B4D00 		movq	0(%rbp), %rcx
 9183              	.LVL967:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 9184              		.loc 1 278 3 is_stmt 1 view .LVU3090
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 9185              		.loc 1 278 31 is_stmt 0 view .LVU3091
 9186 0999 488B5508 		movq	8(%rbp), %rdx
 9187              	.LVL968:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 9188              		.loc 1 279 3 is_stmt 1 view .LVU3092
 9189              	.L595:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 9190              		.loc 1 279 3 is_stmt 0 view .LVU3093
 9191              	.LBE692:
 9192              	.LBE694:
 502:fltk-1.3.4-1/jpeg/jchuff.c ****   emit_byte_s(state, JPEG_RST0 + restart_num, return FALSE);
 9193              		.loc 1 502 41 is_stmt 1 view .LVU3094
 503:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9194              		.loc 1 503 3 view .LVU3095
 503:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9195              		.loc 1 503 3 is_stmt 0 view .LVU3096
 9196 099d 4889D0   		movq	%rdx, %rax
 9197 09a0 83EB30   		subl	$48, %ebx
 9198              	.LVL969:
 503:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9199              		.loc 1 503 3 view .LVU3097
 9200 09a3 488D7101 		leaq	1(%rcx), %rsi
 9201              	.LVL970:
 503:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9202              		.loc 1 503 3 view .LVU3098
 9203 09a7 4883E801 		subq	$1, %rax
 9204 09ab 8819     		movb	%bl, (%rcx)
 503:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9205              		.loc 1 503 3 is_stmt 1 view .LVU3099
 9206              	.LVL971:
 503:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9207              		.loc 1 503 3 is_stmt 0 view .LVU3100
 9208 09ad 7433     		je	.L746
 9209              	.LVL972:
 9210              	.L597:
 506:fltk-1.3.4-1/jpeg/jchuff.c ****     state->cur.last_dc_val[ci] = 0;
 9211              		.loc 1 506 16 is_stmt 1 view .LVU3101
 506:fltk-1.3.4-1/jpeg/jchuff.c ****     state->cur.last_dc_val[ci] = 0;
 9212              		.loc 1 506 33 is_stmt 0 view .LVU3102
 9213 09af 418B8F74 		movl	372(%r15), %ecx
 9213      010000
 506:fltk-1.3.4-1/jpeg/jchuff.c ****     state->cur.last_dc_val[ci] = 0;
 9214              		.loc 1 506 3 view .LVU3103
 9215 09b6 85C9     		testl	%ecx, %ecx
 9216 09b8 7E1D     		jle	.L655
 506:fltk-1.3.4-1/jpeg/jchuff.c ****     state->cur.last_dc_val[ci] = 0;
 9217              		.loc 1 506 3 view .LVU3104
 9218 09ba 83E901   		subl	$1, %ecx
 9219 09bd 488D5424 		leaq	112(%rsp), %rdx
 9219      70
 9220              	.LVL973:
 506:fltk-1.3.4-1/jpeg/jchuff.c ****     state->cur.last_dc_val[ci] = 0;
 9221              		.loc 1 506 3 view .LVU3105
 9222 09c2 488D4C8C 		leaq	116(%rsp,%rcx,4), %rcx
 9222      74
 9223              	.LVL974:
 9224              	.L598:
 507:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9225              		.loc 1 507 5 is_stmt 1 view .LVU3106
 507:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9226              		.loc 1 507 32 is_stmt 0 view .LVU3107
 9227 09c7 C7421C00 		movl	$0, 28(%rdx)
 9227      000000
 506:fltk-1.3.4-1/jpeg/jchuff.c ****     state->cur.last_dc_val[ci] = 0;
 9228              		.loc 1 506 50 is_stmt 1 view .LVU3108
 506:fltk-1.3.4-1/jpeg/jchuff.c ****     state->cur.last_dc_val[ci] = 0;
 9229              		.loc 1 506 16 view .LVU3109
 9230 09ce 4883C204 		addq	$4, %rdx
 506:fltk-1.3.4-1/jpeg/jchuff.c ****     state->cur.last_dc_val[ci] = 0;
 9231              		.loc 1 506 3 is_stmt 0 view .LVU3110
 9232 09d2 4839D1   		cmpq	%rdx, %rcx
 9233 09d5 75F0     		jne	.L598
 9234              	.L655:
 9235              	.LBB695:
 9236              	.LBB689:
 396:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 9237              		.loc 1 396 23 view .LVU3111
 9238 09d7 4531ED   		xorl	%r13d, %r13d
 395:fltk-1.3.4-1/jpeg/jchuff.c ****   state->cur.put_bits = 0;
 9239              		.loc 1 395 25 view .LVU3112
 9240 09da 4531F6   		xorl	%r14d, %r14d
 9241 09dd E9A7F6FF 		jmp	.L584
 9241      FF
 9242              	.LVL975:
 9243              	.L746:
 395:fltk-1.3.4-1/jpeg/jchuff.c ****   state->cur.put_bits = 0;
 9244              		.loc 1 395 25 view .LVU3113
 9245              	.LBE689:
 9246              	.LBE695:
 503:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9247              		.loc 1 503 3 is_stmt 1 view .LVU3114
 9248              	.LBB696:
 9249              	.LBI696:
 269:fltk-1.3.4-1/jpeg/jchuff.c **** /* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
 9250              		.loc 1 269 1 view .LVU3115
 9251              	.LBB697:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9252              		.loc 1 272 3 view .LVU3116
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9253              		.loc 1 272 33 is_stmt 0 view .LVU3117
 9254 09e2 498B5F28 		movq	40(%r15), %rbx
 9255              	.LVL976:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 9256              		.loc 1 274 3 is_stmt 1 view .LVU3118
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 9257              		.loc 1 274 10 is_stmt 0 view .LVU3119
 9258 09e6 4C89FF   		movq	%r15, %rdi
 9259 09e9 FF5318   		call	*24(%rbx)
 9260              	.LVL977:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 9261              		.loc 1 274 6 view .LVU3120
 9262 09ec 85C0     		testl	%eax, %eax
 9263 09ee 0F84FCFB 		je	.L592
 9263      FFFF
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 9264              		.loc 1 277 3 is_stmt 1 view .LVU3121
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 9265              		.loc 1 277 33 is_stmt 0 view .LVU3122
 9266 09f4 488B33   		movq	(%rbx), %rsi
 9267              	.LVL978:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 9268              		.loc 1 278 3 is_stmt 1 view .LVU3123
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 9269              		.loc 1 278 31 is_stmt 0 view .LVU3124
 9270 09f7 488B4308 		movq	8(%rbx), %rax
 9271              	.LVL979:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 9272              		.loc 1 279 3 is_stmt 1 view .LVU3125
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 9273              		.loc 1 279 3 is_stmt 0 view .LVU3126
 9274 09fb EBB2     		jmp	.L597
 9275              	.LVL980:
 9276              	.L740:
 279:fltk-1.3.4-1/jpeg/jchuff.c **** }
 9277              		.loc 1 279 3 view .LVU3127
 9278              	.LBE697:
 9279              	.LBE696:
 9280              	.LBE698:
 9281              	.LBE700:
1062:fltk-1.3.4-1/jpeg/jchuff.c **** 
 9282              		.loc 1 1062 1 view .LVU3128
 9283 09fd E8000000 		call	__stack_chk_fail@PLT
 9283      00
 9284              	.LVL981:
 9285              		.cfi_endproc
 9286              	.LFE69:
 9288              		.section	.text.jinit_huff_encoder,"ax",@progbits
 9289              		.p2align 4
 9290              		.globl	jinit_huff_encoder
 9292              	jinit_huff_encoder:
 9293              	.LVL982:
 9294              	.LFB76:
1547:fltk-1.3.4-1/jpeg/jchuff.c **** 
1548:fltk-1.3.4-1/jpeg/jchuff.c **** 
1549:fltk-1.3.4-1/jpeg/jchuff.c **** /*
1550:fltk-1.3.4-1/jpeg/jchuff.c ****  * Module initialization routine for Huffman entropy encoding.
1551:fltk-1.3.4-1/jpeg/jchuff.c ****  */
1552:fltk-1.3.4-1/jpeg/jchuff.c **** 
1553:fltk-1.3.4-1/jpeg/jchuff.c **** GLOBAL(void)
1554:fltk-1.3.4-1/jpeg/jchuff.c **** jinit_huff_encoder (j_compress_ptr cinfo)
1555:fltk-1.3.4-1/jpeg/jchuff.c **** {
 9295              		.loc 1 1555 1 is_stmt 1 view -0
 9296              		.cfi_startproc
 9297              		.loc 1 1555 1 is_stmt 0 view .LVU3130
 9298 0000 F30F1EFA 		endbr64
1556:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy;
 9299              		.loc 1 1556 3 is_stmt 1 view .LVU3131
1557:fltk-1.3.4-1/jpeg/jchuff.c ****   int i;
 9300              		.loc 1 1557 3 view .LVU3132
1558:fltk-1.3.4-1/jpeg/jchuff.c **** 
1559:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy = (huff_entropy_ptr)
 9301              		.loc 1 1559 3 view .LVU3133
1560:fltk-1.3.4-1/jpeg/jchuff.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 9302              		.loc 1 1560 6 is_stmt 0 view .LVU3134
 9303 0004 488B4708 		movq	8(%rdi), %rax
1555:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy;
 9304              		.loc 1 1555 1 view .LVU3135
 9305 0008 53       		pushq	%rbx
 9306              		.cfi_def_cfa_offset 16
 9307              		.cfi_offset 3, -16
 9308              		.loc 1 1560 6 view .LVU3136
 9309 0009 BAF80000 		movl	$248, %edx
 9309      00
1555:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy;
 9310              		.loc 1 1555 1 view .LVU3137
 9311 000e 4889FB   		movq	%rdi, %rbx
 9312              		.loc 1 1560 6 view .LVU3138
 9313 0011 BE010000 		movl	$1, %esi
 9313      00
 9314 0016 FF10     		call	*(%rax)
 9315              	.LVL983:
1561:fltk-1.3.4-1/jpeg/jchuff.c **** 				SIZEOF(huff_entropy_encoder));
1562:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->entropy = &entropy->pub;
 9316              		.loc 1 1562 3 is_stmt 1 view .LVU3139
1563:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->pub.start_pass = start_pass_huff;
 9317              		.loc 1 1563 27 is_stmt 0 view .LVU3140
 9318 0018 488D3500 		leaq	start_pass_huff(%rip), %rsi
 9318      000000
1562:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->pub.start_pass = start_pass_huff;
 9319              		.loc 1 1562 18 view .LVU3141
 9320 001f 48898330 		movq	%rax, 560(%rbx)
 9320      020000
 9321              		.loc 1 1563 3 is_stmt 1 view .LVU3142
 9322 0026 488D5040 		leaq	64(%rax), %rdx
 9323 002a 488D4860 		leaq	96(%rax), %rcx
 9324              		.loc 1 1563 27 is_stmt 0 view .LVU3143
 9325 002e 488930   		movq	%rsi, (%rax)
1564:fltk-1.3.4-1/jpeg/jchuff.c **** 
1565:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Mark tables unallocated */
1566:fltk-1.3.4-1/jpeg/jchuff.c ****   for (i = 0; i < NUM_HUFF_TBLS; i++) {
 9326              		.loc 1 1566 3 is_stmt 1 view .LVU3144
 9327              	.LVL984:
 9328              		.loc 1 1566 15 view .LVU3145
 9329              	.L748:
1567:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 9330              		.loc 1 1567 5 discriminator 3 view .LVU3146
 9331              		.loc 1 1567 63 is_stmt 0 discriminator 3 view .LVU3147
 9332 0031 48C74220 		movq	$0, 32(%rdx)
 9332      00000000 
 9333 0039 4883C208 		addq	$8, %rdx
 9334              		.loc 1 1567 33 discriminator 3 view .LVU3148
 9335 003d 48C742F8 		movq	$0, -8(%rdx)
 9335      00000000 
1568:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->dc_count_ptrs[i] = entropy->ac_count_ptrs[i] = NULL;
 9336              		.loc 1 1568 5 is_stmt 1 discriminator 3 view .LVU3149
 9337              		.loc 1 1568 59 is_stmt 0 discriminator 3 view .LVU3150
 9338 0045 48C74258 		movq	$0, 88(%rdx)
 9338      00000000 
 9339              		.loc 1 1568 31 discriminator 3 view .LVU3151
 9340 004d 48C74238 		movq	$0, 56(%rdx)
 9340      00000000 
1566:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 9341              		.loc 1 1566 34 is_stmt 1 discriminator 3 view .LVU3152
1566:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 9342              		.loc 1 1566 15 discriminator 3 view .LVU3153
1566:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 9343              		.loc 1 1566 3 is_stmt 0 discriminator 3 view .LVU3154
 9344 0055 4839CA   		cmpq	%rcx, %rdx
 9345 0058 75D7     		jne	.L748
1569:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1570:fltk-1.3.4-1/jpeg/jchuff.c **** 
1571:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->progressive_mode)
 9346              		.loc 1 1571 3 is_stmt 1 view .LVU3155
 9347              		.loc 1 1571 6 is_stmt 0 view .LVU3156
 9348 005a 8B935C01 		movl	348(%rbx), %edx
 9348      0000
 9349 0060 85D2     		testl	%edx, %edx
 9350 0062 740B     		je	.L747
1572:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->bit_buffer = NULL;	/* needed only in AC refinement scan */
 9351              		.loc 1 1572 5 is_stmt 1 view .LVU3157
 9352              		.loc 1 1572 25 is_stmt 0 view .LVU3158
 9353 0064 48C780F0 		movq	$0, 240(%rax)
 9353      00000000 
 9353      000000
 9354              	.L747:
1573:fltk-1.3.4-1/jpeg/jchuff.c **** }
 9355              		.loc 1 1573 1 view .LVU3159
 9356 006f 5B       		popq	%rbx
 9357              		.cfi_def_cfa_offset 8
 9358              	.LVL985:
 9359              		.loc 1 1573 1 view .LVU3160
 9360 0070 C3       		ret
 9361              		.cfi_endproc
 9362              	.LFE76:
 9364              		.text
 9365              	.Letext0:
 9366              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 9367              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 9368              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 9369              		.file 6 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 9370              		.file 7 "/usr/include/stdio.h"
 9371              		.file 8 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 9372              		.file 9 "fltk-1.3.4-1/jpeg/jmorecfg.h"
 9373              		.file 10 "fltk-1.3.4-1/jpeg/jpeglib.h"
 9374              		.file 11 "fltk-1.3.4-1/jpeg/jpegint.h"
 9375              		.file 12 "fltk-1.3.4-1/jpeg/jerror.h"
 39752              		.section	.note.gnu.property,"a"
 39753              		.align 8
 39754 0000 04000000 		.long	 1f - 0f
 39755 0004 10000000 		.long	 4f - 1f
 39756 0008 05000000 		.long	 5
 39757              	0:
 39758 000c 474E5500 		.string	 "GNU"
 39759              	1:
 39760              		.align 8
 39761 0010 020000C0 		.long	 0xc0000002
 39762 0014 04000000 		.long	 3f - 2f
 39763              	2:
 39764 0018 03000000 		.long	 0x3
 39765              	3:
 39766 001c 00000000 		.align 8
 39767              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 jchuff.c
     /tmp/ccJh9O2P.s:7      .text.dump_buffer_e:0000000000000000 dump_buffer_e
     /tmp/ccJh9O2P.s:74     .text.encode_mcu_gather:0000000000000000 encode_mcu_gather
     /tmp/ccJh9O2P.s:475    .text.jpeg_make_c_derived_tbl:0000000000000000 jpeg_make_c_derived_tbl
     /tmp/ccJh9O2P.s:927    .text.start_pass_huff:0000000000000000 start_pass_huff
     /tmp/ccJh9O2P.s:6295   .text.finish_pass_gather:0000000000000000 finish_pass_gather
     /tmp/ccJh9O2P.s:4094   .text.encode_mcu_AC_first:0000000000000000 encode_mcu_AC_first
     /tmp/ccJh9O2P.s:6553   .text.finish_pass_huff:0000000000000000 finish_pass_huff
     /tmp/ccJh9O2P.s:7175   .text.encode_mcu_huff:0000000000000000 encode_mcu_huff
     /tmp/ccJh9O2P.s:3713   .text.encode_mcu_DC_refine:0000000000000000 encode_mcu_DC_refine
     /tmp/ccJh9O2P.s:3041   .text.encode_mcu_DC_first:0000000000000000 encode_mcu_DC_first
     /tmp/ccJh9O2P.s:5130   .text.encode_mcu_AC_refine:0000000000000000 encode_mcu_AC_refine
     /tmp/ccJh9O2P.s:1369   .text.jpeg_gen_optimal_table:0000000000000000 jpeg_gen_optimal_table
     /tmp/ccJh9O2P.s:1900   .text.emit_buffered_bits.part.0:0000000000000000 emit_buffered_bits.part.0
     /tmp/ccJh9O2P.s:2149   .text.emit_eobrun:0000000000000000 emit_eobrun
     /tmp/ccJh9O2P.s:2714   .text.emit_restart_e:0000000000000000 emit_restart_e
     /tmp/ccJh9O2P.s:9292   .text.jinit_huff_encoder:0000000000000000 jinit_huff_encoder
                           .group:0000000000000000 wm4.0.a6b23a418548ac0bda5d8549c4a2ec91
                           .group:0000000000000000 wm4.stdcpredef.h.19.8dc41bed5d9037ff9622e015fb5f0ce3
                           .group:0000000000000000 wm4.jconfig.h.10.247fc3ff67998f3074970b1373c70333
                           .group:0000000000000000 wm4.features.h.19.5b5f5a19624a0527f479fdc52d54808f
                           .group:0000000000000000 wm4.cdefs.h.19.98d80eddbb3f64f4f30cd9aee9c5593c
                           .group:0000000000000000 wm4.wordsize.h.4.baf119258a1e53d8dba67ceac44ab6bc
                           .group:0000000000000000 wm4.cdefs.h.475.fb75d2e4416aa349344e6f45f683bf28
                           .group:0000000000000000 wm4.stubs64.h.10.6ce4c34010988db072c080326a6b6319
                           .group:0000000000000000 wm4.libcheaderstart.h.37.d9274df4cc0172452960ad9644fa5579
                           .group:0000000000000000 wm4.stdlib.h.28.2cffa49d94c5d85f4538f55f7b59771d
                           .group:0000000000000000 wm4.stddef.h.181.13772e73e5434e8cc4fafaaddad2b5da
                           .group:0000000000000000 wm4.waitflags.h.25.41934de4af99038521c2782f418699b1
                           .group:0000000000000000 wm4.waitstatus.h.28.93f167f49d64e2b9b99f98d1162a93bf
                           .group:0000000000000000 wm4.stdlib.h.43.9fa4f727a2f1cb8d2450a574c9195553
                           .group:0000000000000000 wm4.floatn.h.20.80c7cf8a8dfad237004b28d051d5afda
                           .group:0000000000000000 wm4.floatncommon.h.34.7e1840d7dfb19e9bdb51aeb077d76637
                           .group:0000000000000000 wm4.stdlib.h.71.2927e068ec678159b4f68ec2f089f7e6
                           .group:0000000000000000 wm4.types.h.109.56eb9ae966b255288cc544f18746a7ff
                           .group:0000000000000000 wm4.typesizes.h.24.2c64f817c0dc4b6fb2a2c619d717be26
                           .group:0000000000000000 wm4.time64.h.24.a8166ae916ec910dab0d8987098d42ee
                           .group:0000000000000000 wm4.types.h.40.18f72bab8242c2bb4c532a2aa95b5f00
                           .group:0000000000000000 wm4.stddef.h.231.0adce5c8c1fd8096aaff50981b3d1f0f
                           .group:0000000000000000 wm4.endian.h.20.efabd1018df5d7b4052c27dc6bdd5ce5
                           .group:0000000000000000 wm4.endianness.h.2.2c6a211f7909f3af5e9e9cfa3b6b63c8
                           .group:0000000000000000 wm4.endian.h.40.9e5d395adda2f4eb53ae69b69b664084
                           .group:0000000000000000 wm4.endian.h.27.4c4f94262c4eaee2982fe00ed1b4f173
                           .group:0000000000000000 wm4.byteswap.h.24.5363c019348146aada5aeadf51456576
                           .group:0000000000000000 wm4.endian.h.39.30a606dbd99b6c3df61c1f06dbdabd4e
                           .group:0000000000000000 wm4.select.h.28.eb2f3debdbcffd1442ebddaebc4fb6ff
                           .group:0000000000000000 wm4.__sigset_t.h.2.6b1ab6ff3d7b8fd9c0c42b0d80afbd80
                           .group:0000000000000000 wm4.select.h.44.887a4ff60aa97fcd9c1be017735e1675
                           .group:0000000000000000 wm4.select2.h.27.f95f2ab0ffee66dc1b6575014894b21a
                           .group:0000000000000000 wm4.types.h.186.489a4ed8f2d29cd358843490f54ddea5
                           .group:0000000000000000 wm4.pthreadtypesarch.h.25.6063cba99664c916e22d3a912bcc348a
                           .group:0000000000000000 wm4.struct_mutex.h.20.ed51f515172b9be99e450ba83eb5dd99
                           .group:0000000000000000 wm4.struct_rwlock.h.21.0254880f2904e3833fb8ae683e0f0330
                           .group:0000000000000000 wm4.alloca.h.19.edefa922a76c1cbaaf1e416903ba2d1c
                           .group:0000000000000000 wm4.alloca.h.29.156e12058824cc23d961c4d3b13031f6
                           .group:0000000000000000 wm4.stdio.h.24.5c1b97eef3c86b7a2549420f69f4f128
                           .group:0000000000000000 wm4.libcheaderstart.h.31.87b3c285aeba93fe355ad19123070832
                           .group:0000000000000000 wm4.stdio.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.stddef.h.231.8136eebbab3406dbf57a7ec475dd5d83
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.struct_FILE.h.19.0888ac70396abe1031c03d393554032f
                           .group:0000000000000000 wm4.stdio.h.53.139e45cf040c0964b2932c0c1bdaf6b2
                           .group:0000000000000000 wm4.stdio_lim.h.19.e4b00b560d878dcfbc6635b3406640c5
                           .group:0000000000000000 wm4.stdio.h.141.d7a290e19ca077c9e4aa7c43ede17a73
                           .group:0000000000000000 wm4.stdio.h.20.b0caa08e5723aa5941367be0e5d2ec59
                           .group:0000000000000000 wm4.stdio2.h.20.f45a0373b68e1296c4aa8cc09d66a9df
                           .group:0000000000000000 wm4.string.h.23.93403f89af7dba8212345449bb14b09d
                           .group:0000000000000000 wm4.string.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.strings.h.19.a259f126920b1bb5ef76bc62b3984a3c
                           .group:0000000000000000 wm4.jinclude.h.67.b19f941ec97c4845fa4609292c7e2db4
                           .group:0000000000000000 wm4.jmorecfg.h.33.3b4c5f9cc07b3737823b06caf24d5b05
                           .group:0000000000000000 wm4.jpeglib.h.40.4f111c27252a38df39328d65454e82f4
                           .group:0000000000000000 wm4.jpegint.h.26.5219ef5d4e4921371d38e77b6091fd20
                           .group:0000000000000000 wm4.jerror.h.25.1dbd8674e70ab5215bc0037320e5c2a2

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
__stack_chk_fail
jpeg_alloc_huff_table
