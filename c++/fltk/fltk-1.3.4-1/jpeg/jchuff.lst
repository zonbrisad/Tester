   1              		.file	"jchuff.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.unlikely.dump_buffer_e,"ax",@progbits
   5              	.LCOLDB0:
   6              		.section	.text.dump_buffer_e,"ax",@progbits
   7              	.LHOTB0:
   8              		.p2align 4,,15
   9              		.section	.text.unlikely.dump_buffer_e
  10              	.Ltext_cold0:
  11              		.section	.text.dump_buffer_e
  13              	dump_buffer_e:
  14              	.LFB63:
  15              		.file 1 "fltk-1.3.4-1/jpeg/jchuff.c"
   1:fltk-1.3.4-1/jpeg/jchuff.c **** /*
   2:fltk-1.3.4-1/jpeg/jchuff.c ****  * jchuff.c
   3:fltk-1.3.4-1/jpeg/jchuff.c ****  *
   4:fltk-1.3.4-1/jpeg/jchuff.c ****  * Copyright (C) 1991-1997, Thomas G. Lane.
   5:fltk-1.3.4-1/jpeg/jchuff.c ****  * Modified 2006-2013 by Guido Vollbeding.
   6:fltk-1.3.4-1/jpeg/jchuff.c ****  * This file is part of the Independent JPEG Group's software.
   7:fltk-1.3.4-1/jpeg/jchuff.c ****  * For conditions of distribution and use, see the accompanying README file.
   8:fltk-1.3.4-1/jpeg/jchuff.c ****  *
   9:fltk-1.3.4-1/jpeg/jchuff.c ****  * This file contains Huffman entropy encoding routines.
  10:fltk-1.3.4-1/jpeg/jchuff.c ****  * Both sequential and progressive modes are supported in this single module.
  11:fltk-1.3.4-1/jpeg/jchuff.c ****  *
  12:fltk-1.3.4-1/jpeg/jchuff.c ****  * Much of the complexity here has to do with supporting output suspension.
  13:fltk-1.3.4-1/jpeg/jchuff.c ****  * If the data destination module demands suspension, we want to be able to
  14:fltk-1.3.4-1/jpeg/jchuff.c ****  * back up to the start of the current MCU.  To do this, we copy state
  15:fltk-1.3.4-1/jpeg/jchuff.c ****  * variables into local working storage, and update them back to the
  16:fltk-1.3.4-1/jpeg/jchuff.c ****  * permanent JPEG objects only upon successful completion of an MCU.
  17:fltk-1.3.4-1/jpeg/jchuff.c ****  *
  18:fltk-1.3.4-1/jpeg/jchuff.c ****  * We do not support output suspension for the progressive JPEG mode, since
  19:fltk-1.3.4-1/jpeg/jchuff.c ****  * the library currently does not allow multiple-scan files to be written
  20:fltk-1.3.4-1/jpeg/jchuff.c ****  * with output suspension.
  21:fltk-1.3.4-1/jpeg/jchuff.c ****  */
  22:fltk-1.3.4-1/jpeg/jchuff.c **** 
  23:fltk-1.3.4-1/jpeg/jchuff.c **** #define JPEG_INTERNALS
  24:fltk-1.3.4-1/jpeg/jchuff.c **** #include "jinclude.h"
  25:fltk-1.3.4-1/jpeg/jchuff.c **** #include "jpeglib.h"
  26:fltk-1.3.4-1/jpeg/jchuff.c **** 
  27:fltk-1.3.4-1/jpeg/jchuff.c **** 
  28:fltk-1.3.4-1/jpeg/jchuff.c **** /* The legal range of a DCT coefficient is
  29:fltk-1.3.4-1/jpeg/jchuff.c ****  *  -1024 .. +1023  for 8-bit data;
  30:fltk-1.3.4-1/jpeg/jchuff.c ****  * -16384 .. +16383 for 12-bit data.
  31:fltk-1.3.4-1/jpeg/jchuff.c ****  * Hence the magnitude should always fit in 10 or 14 bits respectively.
  32:fltk-1.3.4-1/jpeg/jchuff.c ****  */
  33:fltk-1.3.4-1/jpeg/jchuff.c **** 
  34:fltk-1.3.4-1/jpeg/jchuff.c **** #if BITS_IN_JSAMPLE == 8
  35:fltk-1.3.4-1/jpeg/jchuff.c **** #define MAX_COEF_BITS 10
  36:fltk-1.3.4-1/jpeg/jchuff.c **** #else
  37:fltk-1.3.4-1/jpeg/jchuff.c **** #define MAX_COEF_BITS 14
  38:fltk-1.3.4-1/jpeg/jchuff.c **** #endif
  39:fltk-1.3.4-1/jpeg/jchuff.c **** 
  40:fltk-1.3.4-1/jpeg/jchuff.c **** /* Derived data constructed for each Huffman table */
  41:fltk-1.3.4-1/jpeg/jchuff.c **** 
  42:fltk-1.3.4-1/jpeg/jchuff.c **** typedef struct {
  43:fltk-1.3.4-1/jpeg/jchuff.c ****   unsigned int ehufco[256];	/* code for each symbol */
  44:fltk-1.3.4-1/jpeg/jchuff.c ****   char ehufsi[256];		/* length of code for each symbol */
  45:fltk-1.3.4-1/jpeg/jchuff.c ****   /* If no code has been allocated for a symbol S, ehufsi[S] contains 0 */
  46:fltk-1.3.4-1/jpeg/jchuff.c **** } c_derived_tbl;
  47:fltk-1.3.4-1/jpeg/jchuff.c **** 
  48:fltk-1.3.4-1/jpeg/jchuff.c **** 
  49:fltk-1.3.4-1/jpeg/jchuff.c **** /* Expanded entropy encoder object for Huffman encoding.
  50:fltk-1.3.4-1/jpeg/jchuff.c ****  *
  51:fltk-1.3.4-1/jpeg/jchuff.c ****  * The savable_state subrecord contains fields that change within an MCU,
  52:fltk-1.3.4-1/jpeg/jchuff.c ****  * but must not be updated permanently until we complete the MCU.
  53:fltk-1.3.4-1/jpeg/jchuff.c ****  */
  54:fltk-1.3.4-1/jpeg/jchuff.c **** 
  55:fltk-1.3.4-1/jpeg/jchuff.c **** typedef struct {
  56:fltk-1.3.4-1/jpeg/jchuff.c ****   INT32 put_buffer;		/* current bit-accumulation buffer */
  57:fltk-1.3.4-1/jpeg/jchuff.c ****   int put_bits;			/* # of bits now in it */
  58:fltk-1.3.4-1/jpeg/jchuff.c ****   int last_dc_val[MAX_COMPS_IN_SCAN]; /* last DC coef for each component */
  59:fltk-1.3.4-1/jpeg/jchuff.c **** } savable_state;
  60:fltk-1.3.4-1/jpeg/jchuff.c **** 
  61:fltk-1.3.4-1/jpeg/jchuff.c **** /* This macro is to work around compilers with missing or broken
  62:fltk-1.3.4-1/jpeg/jchuff.c ****  * structure assignment.  You'll need to fix this code if you have
  63:fltk-1.3.4-1/jpeg/jchuff.c ****  * such a compiler and you change MAX_COMPS_IN_SCAN.
  64:fltk-1.3.4-1/jpeg/jchuff.c ****  */
  65:fltk-1.3.4-1/jpeg/jchuff.c **** 
  66:fltk-1.3.4-1/jpeg/jchuff.c **** #ifndef NO_STRUCT_ASSIGN
  67:fltk-1.3.4-1/jpeg/jchuff.c **** #define ASSIGN_STATE(dest,src)  ((dest) = (src))
  68:fltk-1.3.4-1/jpeg/jchuff.c **** #else
  69:fltk-1.3.4-1/jpeg/jchuff.c **** #if MAX_COMPS_IN_SCAN == 4
  70:fltk-1.3.4-1/jpeg/jchuff.c **** #define ASSIGN_STATE(dest,src)  \
  71:fltk-1.3.4-1/jpeg/jchuff.c **** 	((dest).put_buffer = (src).put_buffer, \
  72:fltk-1.3.4-1/jpeg/jchuff.c **** 	 (dest).put_bits = (src).put_bits, \
  73:fltk-1.3.4-1/jpeg/jchuff.c **** 	 (dest).last_dc_val[0] = (src).last_dc_val[0], \
  74:fltk-1.3.4-1/jpeg/jchuff.c **** 	 (dest).last_dc_val[1] = (src).last_dc_val[1], \
  75:fltk-1.3.4-1/jpeg/jchuff.c **** 	 (dest).last_dc_val[2] = (src).last_dc_val[2], \
  76:fltk-1.3.4-1/jpeg/jchuff.c **** 	 (dest).last_dc_val[3] = (src).last_dc_val[3])
  77:fltk-1.3.4-1/jpeg/jchuff.c **** #endif
  78:fltk-1.3.4-1/jpeg/jchuff.c **** #endif
  79:fltk-1.3.4-1/jpeg/jchuff.c **** 
  80:fltk-1.3.4-1/jpeg/jchuff.c **** 
  81:fltk-1.3.4-1/jpeg/jchuff.c **** typedef struct {
  82:fltk-1.3.4-1/jpeg/jchuff.c ****   struct jpeg_entropy_encoder pub; /* public fields */
  83:fltk-1.3.4-1/jpeg/jchuff.c **** 
  84:fltk-1.3.4-1/jpeg/jchuff.c ****   savable_state saved;		/* Bit buffer & DC state at start of MCU */
  85:fltk-1.3.4-1/jpeg/jchuff.c **** 
  86:fltk-1.3.4-1/jpeg/jchuff.c ****   /* These fields are NOT loaded into local working state. */
  87:fltk-1.3.4-1/jpeg/jchuff.c ****   unsigned int restarts_to_go;	/* MCUs left in this restart interval */
  88:fltk-1.3.4-1/jpeg/jchuff.c ****   int next_restart_num;		/* next restart number to write (0-7) */
  89:fltk-1.3.4-1/jpeg/jchuff.c **** 
  90:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Pointers to derived tables (these workspaces have image lifespan) */
  91:fltk-1.3.4-1/jpeg/jchuff.c ****   c_derived_tbl * dc_derived_tbls[NUM_HUFF_TBLS];
  92:fltk-1.3.4-1/jpeg/jchuff.c ****   c_derived_tbl * ac_derived_tbls[NUM_HUFF_TBLS];
  93:fltk-1.3.4-1/jpeg/jchuff.c **** 
  94:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Statistics tables for optimization */
  95:fltk-1.3.4-1/jpeg/jchuff.c ****   long * dc_count_ptrs[NUM_HUFF_TBLS];
  96:fltk-1.3.4-1/jpeg/jchuff.c ****   long * ac_count_ptrs[NUM_HUFF_TBLS];
  97:fltk-1.3.4-1/jpeg/jchuff.c **** 
  98:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Following fields used only in progressive mode */
  99:fltk-1.3.4-1/jpeg/jchuff.c **** 
 100:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Mode flag: TRUE for optimization, FALSE for actual data output */
 101:fltk-1.3.4-1/jpeg/jchuff.c ****   boolean gather_statistics;
 102:fltk-1.3.4-1/jpeg/jchuff.c **** 
 103:fltk-1.3.4-1/jpeg/jchuff.c ****   /* next_output_byte/free_in_buffer are local copies of cinfo->dest fields.
 104:fltk-1.3.4-1/jpeg/jchuff.c ****    */
 105:fltk-1.3.4-1/jpeg/jchuff.c ****   JOCTET * next_output_byte;	/* => next byte to write in buffer */
 106:fltk-1.3.4-1/jpeg/jchuff.c ****   size_t free_in_buffer;	/* # of byte spaces remaining in buffer */
 107:fltk-1.3.4-1/jpeg/jchuff.c ****   j_compress_ptr cinfo;		/* link to cinfo (needed for dump_buffer) */
 108:fltk-1.3.4-1/jpeg/jchuff.c **** 
 109:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Coding status for AC components */
 110:fltk-1.3.4-1/jpeg/jchuff.c ****   int ac_tbl_no;		/* the table number of the single component */
 111:fltk-1.3.4-1/jpeg/jchuff.c ****   unsigned int EOBRUN;		/* run length of EOBs */
 112:fltk-1.3.4-1/jpeg/jchuff.c ****   unsigned int BE;		/* # of buffered correction bits before MCU */
 113:fltk-1.3.4-1/jpeg/jchuff.c ****   char * bit_buffer;		/* buffer for correction bits (1 per char) */
 114:fltk-1.3.4-1/jpeg/jchuff.c ****   /* packing correction bits tightly would save some space but cost time... */
 115:fltk-1.3.4-1/jpeg/jchuff.c **** } huff_entropy_encoder;
 116:fltk-1.3.4-1/jpeg/jchuff.c **** 
 117:fltk-1.3.4-1/jpeg/jchuff.c **** typedef huff_entropy_encoder * huff_entropy_ptr;
 118:fltk-1.3.4-1/jpeg/jchuff.c **** 
 119:fltk-1.3.4-1/jpeg/jchuff.c **** /* Working state while writing an MCU (sequential mode).
 120:fltk-1.3.4-1/jpeg/jchuff.c ****  * This struct contains all the fields that are needed by subroutines.
 121:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 122:fltk-1.3.4-1/jpeg/jchuff.c **** 
 123:fltk-1.3.4-1/jpeg/jchuff.c **** typedef struct {
 124:fltk-1.3.4-1/jpeg/jchuff.c ****   JOCTET * next_output_byte;	/* => next byte to write in buffer */
 125:fltk-1.3.4-1/jpeg/jchuff.c ****   size_t free_in_buffer;	/* # of byte spaces remaining in buffer */
 126:fltk-1.3.4-1/jpeg/jchuff.c ****   savable_state cur;		/* Current bit buffer & DC state */
 127:fltk-1.3.4-1/jpeg/jchuff.c ****   j_compress_ptr cinfo;		/* dump_buffer needs access to this */
 128:fltk-1.3.4-1/jpeg/jchuff.c **** } working_state;
 129:fltk-1.3.4-1/jpeg/jchuff.c **** 
 130:fltk-1.3.4-1/jpeg/jchuff.c **** /* MAX_CORR_BITS is the number of bits the AC refinement correction-bit
 131:fltk-1.3.4-1/jpeg/jchuff.c ****  * buffer can hold.  Larger sizes may slightly improve compression, but
 132:fltk-1.3.4-1/jpeg/jchuff.c ****  * 1000 is already well into the realm of overkill.
 133:fltk-1.3.4-1/jpeg/jchuff.c ****  * The minimum safe size is 64 bits.
 134:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 135:fltk-1.3.4-1/jpeg/jchuff.c **** 
 136:fltk-1.3.4-1/jpeg/jchuff.c **** #define MAX_CORR_BITS  1000	/* Max # of correction bits I can buffer */
 137:fltk-1.3.4-1/jpeg/jchuff.c **** 
 138:fltk-1.3.4-1/jpeg/jchuff.c **** /* IRIGHT_SHIFT is like RIGHT_SHIFT, but works on int rather than INT32.
 139:fltk-1.3.4-1/jpeg/jchuff.c ****  * We assume that int right shift is unsigned if INT32 right shift is,
 140:fltk-1.3.4-1/jpeg/jchuff.c ****  * which should be safe.
 141:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 142:fltk-1.3.4-1/jpeg/jchuff.c **** 
 143:fltk-1.3.4-1/jpeg/jchuff.c **** #ifdef RIGHT_SHIFT_IS_UNSIGNED
 144:fltk-1.3.4-1/jpeg/jchuff.c **** #define ISHIFT_TEMPS	int ishift_temp;
 145:fltk-1.3.4-1/jpeg/jchuff.c **** #define IRIGHT_SHIFT(x,shft)  \
 146:fltk-1.3.4-1/jpeg/jchuff.c **** 	((ishift_temp = (x)) < 0 ? \
 147:fltk-1.3.4-1/jpeg/jchuff.c **** 	 (ishift_temp >> (shft)) | ((~0) << (16-(shft))) : \
 148:fltk-1.3.4-1/jpeg/jchuff.c **** 	 (ishift_temp >> (shft)))
 149:fltk-1.3.4-1/jpeg/jchuff.c **** #else
 150:fltk-1.3.4-1/jpeg/jchuff.c **** #define ISHIFT_TEMPS
 151:fltk-1.3.4-1/jpeg/jchuff.c **** #define IRIGHT_SHIFT(x,shft)	((x) >> (shft))
 152:fltk-1.3.4-1/jpeg/jchuff.c **** #endif
 153:fltk-1.3.4-1/jpeg/jchuff.c **** 
 154:fltk-1.3.4-1/jpeg/jchuff.c **** 
 155:fltk-1.3.4-1/jpeg/jchuff.c **** /*
 156:fltk-1.3.4-1/jpeg/jchuff.c ****  * Compute the derived values for a Huffman table.
 157:fltk-1.3.4-1/jpeg/jchuff.c ****  * This routine also performs some validation checks on the table.
 158:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 159:fltk-1.3.4-1/jpeg/jchuff.c **** 
 160:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(void)
 161:fltk-1.3.4-1/jpeg/jchuff.c **** jpeg_make_c_derived_tbl (j_compress_ptr cinfo, boolean isDC, int tblno,
 162:fltk-1.3.4-1/jpeg/jchuff.c **** 			 c_derived_tbl ** pdtbl)
 163:fltk-1.3.4-1/jpeg/jchuff.c **** {
 164:fltk-1.3.4-1/jpeg/jchuff.c ****   JHUFF_TBL *htbl;
 165:fltk-1.3.4-1/jpeg/jchuff.c ****   c_derived_tbl *dtbl;
 166:fltk-1.3.4-1/jpeg/jchuff.c ****   int p, i, l, lastp, si, maxsymbol;
 167:fltk-1.3.4-1/jpeg/jchuff.c ****   char huffsize[257];
 168:fltk-1.3.4-1/jpeg/jchuff.c ****   unsigned int huffcode[257];
 169:fltk-1.3.4-1/jpeg/jchuff.c ****   unsigned int code;
 170:fltk-1.3.4-1/jpeg/jchuff.c **** 
 171:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Note that huffsize[] and huffcode[] are filled in code-length order,
 172:fltk-1.3.4-1/jpeg/jchuff.c ****    * paralleling the order of the symbols themselves in htbl->huffval[].
 173:fltk-1.3.4-1/jpeg/jchuff.c ****    */
 174:fltk-1.3.4-1/jpeg/jchuff.c **** 
 175:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Find the input Huffman table */
 176:fltk-1.3.4-1/jpeg/jchuff.c ****   if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 177:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 178:fltk-1.3.4-1/jpeg/jchuff.c ****   htbl =
 179:fltk-1.3.4-1/jpeg/jchuff.c ****     isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 180:fltk-1.3.4-1/jpeg/jchuff.c ****   if (htbl == NULL)
 181:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 182:fltk-1.3.4-1/jpeg/jchuff.c **** 
 183:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Allocate a workspace if we haven't already done so. */
 184:fltk-1.3.4-1/jpeg/jchuff.c ****   if (*pdtbl == NULL)
 185:fltk-1.3.4-1/jpeg/jchuff.c ****     *pdtbl = (c_derived_tbl *)
 186:fltk-1.3.4-1/jpeg/jchuff.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 187:fltk-1.3.4-1/jpeg/jchuff.c **** 				  SIZEOF(c_derived_tbl));
 188:fltk-1.3.4-1/jpeg/jchuff.c ****   dtbl = *pdtbl;
 189:fltk-1.3.4-1/jpeg/jchuff.c ****   
 190:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Figure C.1: make table of Huffman code length for each symbol */
 191:fltk-1.3.4-1/jpeg/jchuff.c **** 
 192:fltk-1.3.4-1/jpeg/jchuff.c ****   p = 0;
 193:fltk-1.3.4-1/jpeg/jchuff.c ****   for (l = 1; l <= 16; l++) {
 194:fltk-1.3.4-1/jpeg/jchuff.c ****     i = (int) htbl->bits[l];
 195:fltk-1.3.4-1/jpeg/jchuff.c ****     if (i < 0 || p + i > 256)	/* protect against table overrun */
 196:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 197:fltk-1.3.4-1/jpeg/jchuff.c ****     while (i--)
 198:fltk-1.3.4-1/jpeg/jchuff.c ****       huffsize[p++] = (char) l;
 199:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 200:fltk-1.3.4-1/jpeg/jchuff.c ****   huffsize[p] = 0;
 201:fltk-1.3.4-1/jpeg/jchuff.c ****   lastp = p;
 202:fltk-1.3.4-1/jpeg/jchuff.c ****   
 203:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Figure C.2: generate the codes themselves */
 204:fltk-1.3.4-1/jpeg/jchuff.c ****   /* We also validate that the counts represent a legal Huffman code tree. */
 205:fltk-1.3.4-1/jpeg/jchuff.c **** 
 206:fltk-1.3.4-1/jpeg/jchuff.c ****   code = 0;
 207:fltk-1.3.4-1/jpeg/jchuff.c ****   si = huffsize[0];
 208:fltk-1.3.4-1/jpeg/jchuff.c ****   p = 0;
 209:fltk-1.3.4-1/jpeg/jchuff.c ****   while (huffsize[p]) {
 210:fltk-1.3.4-1/jpeg/jchuff.c ****     while (((int) huffsize[p]) == si) {
 211:fltk-1.3.4-1/jpeg/jchuff.c ****       huffcode[p++] = code;
 212:fltk-1.3.4-1/jpeg/jchuff.c ****       code++;
 213:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 214:fltk-1.3.4-1/jpeg/jchuff.c ****     /* code is now 1 more than the last code used for codelength si; but
 215:fltk-1.3.4-1/jpeg/jchuff.c ****      * it must still fit in si bits, since no code is allowed to be all ones.
 216:fltk-1.3.4-1/jpeg/jchuff.c ****      */
 217:fltk-1.3.4-1/jpeg/jchuff.c ****     if (((INT32) code) >= (((INT32) 1) << si))
 218:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 219:fltk-1.3.4-1/jpeg/jchuff.c ****     code <<= 1;
 220:fltk-1.3.4-1/jpeg/jchuff.c ****     si++;
 221:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 222:fltk-1.3.4-1/jpeg/jchuff.c ****   
 223:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Figure C.3: generate encoding tables */
 224:fltk-1.3.4-1/jpeg/jchuff.c ****   /* These are code and size indexed by symbol value */
 225:fltk-1.3.4-1/jpeg/jchuff.c **** 
 226:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Set all codeless symbols to have code length 0;
 227:fltk-1.3.4-1/jpeg/jchuff.c ****    * this lets us detect duplicate VAL entries here, and later
 228:fltk-1.3.4-1/jpeg/jchuff.c ****    * allows emit_bits to detect any attempt to emit such symbols.
 229:fltk-1.3.4-1/jpeg/jchuff.c ****    */
 230:fltk-1.3.4-1/jpeg/jchuff.c ****   MEMZERO(dtbl->ehufsi, SIZEOF(dtbl->ehufsi));
 231:fltk-1.3.4-1/jpeg/jchuff.c **** 
 232:fltk-1.3.4-1/jpeg/jchuff.c ****   /* This is also a convenient place to check for out-of-range
 233:fltk-1.3.4-1/jpeg/jchuff.c ****    * and duplicated VAL entries.  We allow 0..255 for AC symbols
 234:fltk-1.3.4-1/jpeg/jchuff.c ****    * but only 0..15 for DC.  (We could constrain them further
 235:fltk-1.3.4-1/jpeg/jchuff.c ****    * based on data depth and mode, but this seems enough.)
 236:fltk-1.3.4-1/jpeg/jchuff.c ****    */
 237:fltk-1.3.4-1/jpeg/jchuff.c ****   maxsymbol = isDC ? 15 : 255;
 238:fltk-1.3.4-1/jpeg/jchuff.c **** 
 239:fltk-1.3.4-1/jpeg/jchuff.c ****   for (p = 0; p < lastp; p++) {
 240:fltk-1.3.4-1/jpeg/jchuff.c ****     i = htbl->huffval[p];
 241:fltk-1.3.4-1/jpeg/jchuff.c ****     if (i < 0 || i > maxsymbol || dtbl->ehufsi[i])
 242:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 243:fltk-1.3.4-1/jpeg/jchuff.c ****     dtbl->ehufco[i] = huffcode[p];
 244:fltk-1.3.4-1/jpeg/jchuff.c ****     dtbl->ehufsi[i] = huffsize[p];
 245:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 246:fltk-1.3.4-1/jpeg/jchuff.c **** }
 247:fltk-1.3.4-1/jpeg/jchuff.c **** 
 248:fltk-1.3.4-1/jpeg/jchuff.c **** 
 249:fltk-1.3.4-1/jpeg/jchuff.c **** /* Outputting bytes to the file.
 250:fltk-1.3.4-1/jpeg/jchuff.c ****  * NB: these must be called only when actually outputting,
 251:fltk-1.3.4-1/jpeg/jchuff.c ****  * that is, entropy->gather_statistics == FALSE.
 252:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 253:fltk-1.3.4-1/jpeg/jchuff.c **** 
 254:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit a byte, taking 'action' if must suspend. */
 255:fltk-1.3.4-1/jpeg/jchuff.c **** #define emit_byte_s(state,val,action)  \
 256:fltk-1.3.4-1/jpeg/jchuff.c **** 	{ *(state)->next_output_byte++ = (JOCTET) (val);  \
 257:fltk-1.3.4-1/jpeg/jchuff.c **** 	  if (--(state)->free_in_buffer == 0)  \
 258:fltk-1.3.4-1/jpeg/jchuff.c **** 	    if (! dump_buffer_s(state))  \
 259:fltk-1.3.4-1/jpeg/jchuff.c **** 	      { action; } }
 260:fltk-1.3.4-1/jpeg/jchuff.c **** 
 261:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit a byte */
 262:fltk-1.3.4-1/jpeg/jchuff.c **** #define emit_byte_e(entropy,val)  \
 263:fltk-1.3.4-1/jpeg/jchuff.c **** 	{ *(entropy)->next_output_byte++ = (JOCTET) (val);  \
 264:fltk-1.3.4-1/jpeg/jchuff.c **** 	  if (--(entropy)->free_in_buffer == 0)  \
 265:fltk-1.3.4-1/jpeg/jchuff.c **** 	    dump_buffer_e(entropy); }
 266:fltk-1.3.4-1/jpeg/jchuff.c **** 
 267:fltk-1.3.4-1/jpeg/jchuff.c **** 
 268:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(boolean)
 269:fltk-1.3.4-1/jpeg/jchuff.c **** dump_buffer_s (working_state * state)
 270:fltk-1.3.4-1/jpeg/jchuff.c **** /* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
 271:fltk-1.3.4-1/jpeg/jchuff.c **** {
 272:fltk-1.3.4-1/jpeg/jchuff.c ****   struct jpeg_destination_mgr * dest = state->cinfo->dest;
 273:fltk-1.3.4-1/jpeg/jchuff.c **** 
 274:fltk-1.3.4-1/jpeg/jchuff.c ****   if (! (*dest->empty_output_buffer) (state->cinfo))
 275:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 276:fltk-1.3.4-1/jpeg/jchuff.c ****   /* After a successful buffer dump, must reset buffer pointers */
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->next_output_byte = dest->next_output_byte;
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 279:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 280:fltk-1.3.4-1/jpeg/jchuff.c **** }
 281:fltk-1.3.4-1/jpeg/jchuff.c **** 
 282:fltk-1.3.4-1/jpeg/jchuff.c **** 
 283:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(void)
 284:fltk-1.3.4-1/jpeg/jchuff.c **** dump_buffer_e (huff_entropy_ptr entropy)
 285:fltk-1.3.4-1/jpeg/jchuff.c **** /* Empty the output buffer; we do not support suspension in this case. */
 286:fltk-1.3.4-1/jpeg/jchuff.c **** {
  16              		.loc 1 286 0
  17              		.cfi_startproc
  18              	.LVL0:
  19 0000 55       		pushq	%rbp
  20              		.cfi_def_cfa_offset 16
  21              		.cfi_offset 6, -16
  22 0001 53       		pushq	%rbx
  23              		.cfi_def_cfa_offset 24
  24              		.cfi_offset 3, -24
  25 0002 4889FB   		movq	%rdi, %rbx
  26 0005 4883EC08 		subq	$8, %rsp
  27              		.cfi_def_cfa_offset 32
 287:fltk-1.3.4-1/jpeg/jchuff.c ****   struct jpeg_destination_mgr * dest = entropy->cinfo->dest;
  28              		.loc 1 287 0
  29 0009 488BBFD8 		movq	216(%rdi), %rdi
  29      000000
  30              	.LVL1:
  31 0010 488B6F28 		movq	40(%rdi), %rbp
  32              	.LVL2:
 288:fltk-1.3.4-1/jpeg/jchuff.c **** 
 289:fltk-1.3.4-1/jpeg/jchuff.c ****   if (! (*dest->empty_output_buffer) (entropy->cinfo))
  33              		.loc 1 289 0
  34 0014 FF5518   		call	*24(%rbp)
  35              	.LVL3:
  36 0017 85C0     		testl	%eax, %eax
  37 0019 751D     		jne	.L2
 290:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_CANT_SUSPEND);
  38              		.loc 1 290 0
  39 001b 488B83D8 		movq	216(%rbx), %rax
  39      000000
  40 0022 488B00   		movq	(%rax), %rax
  41 0025 C7402819 		movl	$25, 40(%rax)
  41      000000
  42 002c 488BBBD8 		movq	216(%rbx), %rdi
  42      000000
  43 0033 488B07   		movq	(%rdi), %rax
  44 0036 FF10     		call	*(%rax)
  45              	.LVL4:
  46              	.L2:
 291:fltk-1.3.4-1/jpeg/jchuff.c ****   /* After a successful buffer dump, must reset buffer pointers */
 292:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->next_output_byte = dest->next_output_byte;
  47              		.loc 1 292 0
  48 0038 488B4500 		movq	0(%rbp), %rax
  49 003c 488983C8 		movq	%rax, 200(%rbx)
  49      000000
 293:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = dest->free_in_buffer;
  50              		.loc 1 293 0
  51 0043 488B4508 		movq	8(%rbp), %rax
  52 0047 488983D0 		movq	%rax, 208(%rbx)
  52      000000
 294:fltk-1.3.4-1/jpeg/jchuff.c **** }
  53              		.loc 1 294 0
  54 004e 4883C408 		addq	$8, %rsp
  55              		.cfi_def_cfa_offset 24
  56 0052 5B       		popq	%rbx
  57              		.cfi_def_cfa_offset 16
  58              	.LVL5:
  59 0053 5D       		popq	%rbp
  60              		.cfi_def_cfa_offset 8
  61              	.LVL6:
  62 0054 C3       		ret
  63              		.cfi_endproc
  64              	.LFE63:
  66              		.section	.text.unlikely.dump_buffer_e
  67              	.LCOLDE0:
  68              		.section	.text.dump_buffer_e
  69              	.LHOTE0:
  70              		.section	.text.unlikely.encode_mcu_gather,"ax",@progbits
  71              	.LCOLDB1:
  72              		.section	.text.encode_mcu_gather,"ax",@progbits
  73              	.LHOTB1:
  74              		.p2align 4,,15
  76              	encode_mcu_gather:
  77              	.LFB82:
 295:fltk-1.3.4-1/jpeg/jchuff.c **** 
 296:fltk-1.3.4-1/jpeg/jchuff.c **** 
 297:fltk-1.3.4-1/jpeg/jchuff.c **** /* Outputting bits to the file */
 298:fltk-1.3.4-1/jpeg/jchuff.c **** 
 299:fltk-1.3.4-1/jpeg/jchuff.c **** /* Only the right 24 bits of put_buffer are used; the valid bits are
 300:fltk-1.3.4-1/jpeg/jchuff.c ****  * left-justified in this part.  At most 16 bits can be passed to emit_bits
 301:fltk-1.3.4-1/jpeg/jchuff.c ****  * in one call, and we never retain more than 7 bits in put_buffer
 302:fltk-1.3.4-1/jpeg/jchuff.c ****  * between calls, so 24 bits are sufficient.
 303:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 304:fltk-1.3.4-1/jpeg/jchuff.c **** 
 305:fltk-1.3.4-1/jpeg/jchuff.c **** INLINE
 306:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(boolean)
 307:fltk-1.3.4-1/jpeg/jchuff.c **** emit_bits_s (working_state * state, unsigned int code, int size)
 308:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits; return TRUE if successful, FALSE if must suspend */
 309:fltk-1.3.4-1/jpeg/jchuff.c **** {
 310:fltk-1.3.4-1/jpeg/jchuff.c ****   /* This routine is heavily used, so it's worth coding tightly. */
 311:fltk-1.3.4-1/jpeg/jchuff.c ****   register INT32 put_buffer;
 312:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 313:fltk-1.3.4-1/jpeg/jchuff.c **** 
 314:fltk-1.3.4-1/jpeg/jchuff.c ****   /* if size is 0, caller used an invalid Huffman table entry */
 315:fltk-1.3.4-1/jpeg/jchuff.c ****   if (size == 0)
 316:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);
 317:fltk-1.3.4-1/jpeg/jchuff.c **** 
 318:fltk-1.3.4-1/jpeg/jchuff.c ****   /* mask off any extra bits in code */
 319:fltk-1.3.4-1/jpeg/jchuff.c ****   put_buffer = ((INT32) code) & ((((INT32) 1) << size) - 1);
 320:fltk-1.3.4-1/jpeg/jchuff.c **** 
 321:fltk-1.3.4-1/jpeg/jchuff.c ****   /* new number of bits in buffer */
 322:fltk-1.3.4-1/jpeg/jchuff.c ****   put_bits = size + state->cur.put_bits;
 323:fltk-1.3.4-1/jpeg/jchuff.c **** 
 324:fltk-1.3.4-1/jpeg/jchuff.c ****   put_buffer <<= 24 - put_bits; /* align incoming bits */
 325:fltk-1.3.4-1/jpeg/jchuff.c **** 
 326:fltk-1.3.4-1/jpeg/jchuff.c ****   /* and merge with old buffer contents */
 327:fltk-1.3.4-1/jpeg/jchuff.c ****   put_buffer |= state->cur.put_buffer;
 328:fltk-1.3.4-1/jpeg/jchuff.c **** 
 329:fltk-1.3.4-1/jpeg/jchuff.c ****   while (put_bits >= 8) {
 330:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 331:fltk-1.3.4-1/jpeg/jchuff.c **** 
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_byte_s(state, c, return FALSE);
 333:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 334:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 335:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_buffer <<= 8;
 337:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 338:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 339:fltk-1.3.4-1/jpeg/jchuff.c **** 
 340:fltk-1.3.4-1/jpeg/jchuff.c ****   state->cur.put_buffer = put_buffer; /* update state variables */
 341:fltk-1.3.4-1/jpeg/jchuff.c ****   state->cur.put_bits = put_bits;
 342:fltk-1.3.4-1/jpeg/jchuff.c **** 
 343:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 344:fltk-1.3.4-1/jpeg/jchuff.c **** }
 345:fltk-1.3.4-1/jpeg/jchuff.c **** 
 346:fltk-1.3.4-1/jpeg/jchuff.c **** 
 347:fltk-1.3.4-1/jpeg/jchuff.c **** INLINE
 348:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(void)
 349:fltk-1.3.4-1/jpeg/jchuff.c **** emit_bits_e (huff_entropy_ptr entropy, unsigned int code, int size)
 350:fltk-1.3.4-1/jpeg/jchuff.c **** /* Emit some bits, unless we are in gather mode */
 351:fltk-1.3.4-1/jpeg/jchuff.c **** {
 352:fltk-1.3.4-1/jpeg/jchuff.c ****   /* This routine is heavily used, so it's worth coding tightly. */
 353:fltk-1.3.4-1/jpeg/jchuff.c ****   register INT32 put_buffer;
 354:fltk-1.3.4-1/jpeg/jchuff.c ****   register int put_bits;
 355:fltk-1.3.4-1/jpeg/jchuff.c **** 
 356:fltk-1.3.4-1/jpeg/jchuff.c ****   /* if size is 0, caller used an invalid Huffman table entry */
 357:fltk-1.3.4-1/jpeg/jchuff.c ****   if (size == 0)
 358:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 359:fltk-1.3.4-1/jpeg/jchuff.c **** 
 360:fltk-1.3.4-1/jpeg/jchuff.c ****   if (entropy->gather_statistics)
 361:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 362:fltk-1.3.4-1/jpeg/jchuff.c **** 
 363:fltk-1.3.4-1/jpeg/jchuff.c ****   /* mask off any extra bits in code */
 364:fltk-1.3.4-1/jpeg/jchuff.c ****   put_buffer = ((INT32) code) & ((((INT32) 1) << size) - 1);
 365:fltk-1.3.4-1/jpeg/jchuff.c **** 
 366:fltk-1.3.4-1/jpeg/jchuff.c ****   /* new number of bits in buffer */
 367:fltk-1.3.4-1/jpeg/jchuff.c ****   put_bits = size + entropy->saved.put_bits;
 368:fltk-1.3.4-1/jpeg/jchuff.c **** 
 369:fltk-1.3.4-1/jpeg/jchuff.c ****   put_buffer <<= 24 - put_bits; /* align incoming bits */
 370:fltk-1.3.4-1/jpeg/jchuff.c **** 
 371:fltk-1.3.4-1/jpeg/jchuff.c ****   /* and merge with old buffer contents */
 372:fltk-1.3.4-1/jpeg/jchuff.c ****   put_buffer |= entropy->saved.put_buffer;
 373:fltk-1.3.4-1/jpeg/jchuff.c **** 
 374:fltk-1.3.4-1/jpeg/jchuff.c ****   while (put_bits >= 8) {
 375:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 376:fltk-1.3.4-1/jpeg/jchuff.c **** 
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_byte_e(entropy, c);
 378:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 379:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 380:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_buffer <<= 8;
 382:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 383:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 384:fltk-1.3.4-1/jpeg/jchuff.c **** 
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_buffer = put_buffer; /* update variables */
 386:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 387:fltk-1.3.4-1/jpeg/jchuff.c **** }
 388:fltk-1.3.4-1/jpeg/jchuff.c **** 
 389:fltk-1.3.4-1/jpeg/jchuff.c **** 
 390:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(boolean)
 391:fltk-1.3.4-1/jpeg/jchuff.c **** flush_bits_s (working_state * state)
 392:fltk-1.3.4-1/jpeg/jchuff.c **** {
 393:fltk-1.3.4-1/jpeg/jchuff.c ****   if (! emit_bits_s(state, 0x7F, 7)) /* fill any partial byte with ones */
 394:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 395:fltk-1.3.4-1/jpeg/jchuff.c ****   state->cur.put_buffer = 0;	     /* and reset bit-buffer to empty */
 396:fltk-1.3.4-1/jpeg/jchuff.c ****   state->cur.put_bits = 0;
 397:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 398:fltk-1.3.4-1/jpeg/jchuff.c **** }
 399:fltk-1.3.4-1/jpeg/jchuff.c **** 
 400:fltk-1.3.4-1/jpeg/jchuff.c **** 
 401:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(void)
 402:fltk-1.3.4-1/jpeg/jchuff.c **** flush_bits_e (huff_entropy_ptr entropy)
 403:fltk-1.3.4-1/jpeg/jchuff.c **** {
 404:fltk-1.3.4-1/jpeg/jchuff.c ****   emit_bits_e(entropy, 0x7F, 7); /* fill any partial byte with ones */
 405:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_buffer = 0; /* and reset bit-buffer to empty */
 406:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = 0;
 407:fltk-1.3.4-1/jpeg/jchuff.c **** }
 408:fltk-1.3.4-1/jpeg/jchuff.c **** 
 409:fltk-1.3.4-1/jpeg/jchuff.c **** 
 410:fltk-1.3.4-1/jpeg/jchuff.c **** /*
 411:fltk-1.3.4-1/jpeg/jchuff.c ****  * Emit (or just count) a Huffman symbol.
 412:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 413:fltk-1.3.4-1/jpeg/jchuff.c **** 
 414:fltk-1.3.4-1/jpeg/jchuff.c **** INLINE
 415:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(void)
 416:fltk-1.3.4-1/jpeg/jchuff.c **** emit_dc_symbol (huff_entropy_ptr entropy, int tbl_no, int symbol)
 417:fltk-1.3.4-1/jpeg/jchuff.c **** {
 418:fltk-1.3.4-1/jpeg/jchuff.c ****   if (entropy->gather_statistics)
 419:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->dc_count_ptrs[tbl_no][symbol]++;
 420:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 421:fltk-1.3.4-1/jpeg/jchuff.c ****     c_derived_tbl * tbl = entropy->dc_derived_tbls[tbl_no];
 422:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 423:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 424:fltk-1.3.4-1/jpeg/jchuff.c **** }
 425:fltk-1.3.4-1/jpeg/jchuff.c **** 
 426:fltk-1.3.4-1/jpeg/jchuff.c **** 
 427:fltk-1.3.4-1/jpeg/jchuff.c **** INLINE
 428:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(void)
 429:fltk-1.3.4-1/jpeg/jchuff.c **** emit_ac_symbol (huff_entropy_ptr entropy, int tbl_no, int symbol)
 430:fltk-1.3.4-1/jpeg/jchuff.c **** {
 431:fltk-1.3.4-1/jpeg/jchuff.c ****   if (entropy->gather_statistics)
 432:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 433:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 434:fltk-1.3.4-1/jpeg/jchuff.c ****     c_derived_tbl * tbl = entropy->ac_derived_tbls[tbl_no];
 435:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 436:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 437:fltk-1.3.4-1/jpeg/jchuff.c **** }
 438:fltk-1.3.4-1/jpeg/jchuff.c **** 
 439:fltk-1.3.4-1/jpeg/jchuff.c **** 
 440:fltk-1.3.4-1/jpeg/jchuff.c **** /*
 441:fltk-1.3.4-1/jpeg/jchuff.c ****  * Emit bits from a correction bit buffer.
 442:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 443:fltk-1.3.4-1/jpeg/jchuff.c **** 
 444:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(void)
 445:fltk-1.3.4-1/jpeg/jchuff.c **** emit_buffered_bits (huff_entropy_ptr entropy, char * bufstart,
 446:fltk-1.3.4-1/jpeg/jchuff.c **** 		    unsigned int nbits)
 447:fltk-1.3.4-1/jpeg/jchuff.c **** {
 448:fltk-1.3.4-1/jpeg/jchuff.c ****   if (entropy->gather_statistics)
 449:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 450:fltk-1.3.4-1/jpeg/jchuff.c **** 
 451:fltk-1.3.4-1/jpeg/jchuff.c ****   while (nbits > 0) {
 452:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, (unsigned int) (*bufstart), 1);
 453:fltk-1.3.4-1/jpeg/jchuff.c ****     bufstart++;
 454:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits--;
 455:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 456:fltk-1.3.4-1/jpeg/jchuff.c **** }
 457:fltk-1.3.4-1/jpeg/jchuff.c **** 
 458:fltk-1.3.4-1/jpeg/jchuff.c **** 
 459:fltk-1.3.4-1/jpeg/jchuff.c **** /*
 460:fltk-1.3.4-1/jpeg/jchuff.c ****  * Emit any pending EOBRUN symbol.
 461:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 462:fltk-1.3.4-1/jpeg/jchuff.c **** 
 463:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(void)
 464:fltk-1.3.4-1/jpeg/jchuff.c **** emit_eobrun (huff_entropy_ptr entropy)
 465:fltk-1.3.4-1/jpeg/jchuff.c **** {
 466:fltk-1.3.4-1/jpeg/jchuff.c ****   register int temp, nbits;
 467:fltk-1.3.4-1/jpeg/jchuff.c **** 
 468:fltk-1.3.4-1/jpeg/jchuff.c ****   if (entropy->EOBRUN > 0) {	/* if there is any pending EOBRUN */
 469:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = entropy->EOBRUN;
 470:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits = 0;
 471:fltk-1.3.4-1/jpeg/jchuff.c ****     while ((temp >>= 1))
 472:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 473:fltk-1.3.4-1/jpeg/jchuff.c ****     /* safety check: shouldn't happen given limited correction-bit buffer */
 474:fltk-1.3.4-1/jpeg/jchuff.c ****     if (nbits > 14)
 475:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 476:fltk-1.3.4-1/jpeg/jchuff.c **** 
 477:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_ac_symbol(entropy, entropy->ac_tbl_no, nbits << 4);
 478:fltk-1.3.4-1/jpeg/jchuff.c ****     if (nbits)
 479:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_bits_e(entropy, entropy->EOBRUN, nbits);
 480:fltk-1.3.4-1/jpeg/jchuff.c **** 
 481:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->EOBRUN = 0;
 482:fltk-1.3.4-1/jpeg/jchuff.c **** 
 483:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Emit any buffered correction bits */
 484:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_buffered_bits(entropy, entropy->bit_buffer, entropy->BE);
 485:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->BE = 0;
 486:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 487:fltk-1.3.4-1/jpeg/jchuff.c **** }
 488:fltk-1.3.4-1/jpeg/jchuff.c **** 
 489:fltk-1.3.4-1/jpeg/jchuff.c **** 
 490:fltk-1.3.4-1/jpeg/jchuff.c **** /*
 491:fltk-1.3.4-1/jpeg/jchuff.c ****  * Emit a restart marker & resynchronize predictions.
 492:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 493:fltk-1.3.4-1/jpeg/jchuff.c **** 
 494:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(boolean)
 495:fltk-1.3.4-1/jpeg/jchuff.c **** emit_restart_s (working_state * state, int restart_num)
 496:fltk-1.3.4-1/jpeg/jchuff.c **** {
 497:fltk-1.3.4-1/jpeg/jchuff.c ****   int ci;
 498:fltk-1.3.4-1/jpeg/jchuff.c **** 
 499:fltk-1.3.4-1/jpeg/jchuff.c ****   if (! flush_bits_s(state))
 500:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 501:fltk-1.3.4-1/jpeg/jchuff.c **** 
 502:fltk-1.3.4-1/jpeg/jchuff.c ****   emit_byte_s(state, 0xFF, return FALSE);
 503:fltk-1.3.4-1/jpeg/jchuff.c ****   emit_byte_s(state, JPEG_RST0 + restart_num, return FALSE);
 504:fltk-1.3.4-1/jpeg/jchuff.c **** 
 505:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Re-initialize DC predictions to 0 */
 506:fltk-1.3.4-1/jpeg/jchuff.c ****   for (ci = 0; ci < state->cinfo->comps_in_scan; ci++)
 507:fltk-1.3.4-1/jpeg/jchuff.c ****     state->cur.last_dc_val[ci] = 0;
 508:fltk-1.3.4-1/jpeg/jchuff.c **** 
 509:fltk-1.3.4-1/jpeg/jchuff.c ****   /* The restart counter is not updated until we successfully write the MCU. */
 510:fltk-1.3.4-1/jpeg/jchuff.c **** 
 511:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 512:fltk-1.3.4-1/jpeg/jchuff.c **** }
 513:fltk-1.3.4-1/jpeg/jchuff.c **** 
 514:fltk-1.3.4-1/jpeg/jchuff.c **** 
 515:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(void)
 516:fltk-1.3.4-1/jpeg/jchuff.c **** emit_restart_e (huff_entropy_ptr entropy, int restart_num)
 517:fltk-1.3.4-1/jpeg/jchuff.c **** {
 518:fltk-1.3.4-1/jpeg/jchuff.c ****   int ci;
 519:fltk-1.3.4-1/jpeg/jchuff.c **** 
 520:fltk-1.3.4-1/jpeg/jchuff.c ****   emit_eobrun(entropy);
 521:fltk-1.3.4-1/jpeg/jchuff.c **** 
 522:fltk-1.3.4-1/jpeg/jchuff.c ****   if (! entropy->gather_statistics) {
 523:fltk-1.3.4-1/jpeg/jchuff.c ****     flush_bits_e(entropy);
 524:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_byte_e(entropy, 0xFF);
 525:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_byte_e(entropy, JPEG_RST0 + restart_num);
 526:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 527:fltk-1.3.4-1/jpeg/jchuff.c **** 
 528:fltk-1.3.4-1/jpeg/jchuff.c ****   if (entropy->cinfo->Ss == 0) {
 529:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Re-initialize DC predictions to 0 */
 530:fltk-1.3.4-1/jpeg/jchuff.c ****     for (ci = 0; ci < entropy->cinfo->comps_in_scan; ci++)
 531:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->saved.last_dc_val[ci] = 0;
 532:fltk-1.3.4-1/jpeg/jchuff.c ****   } else {
 533:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Re-initialize all AC-related fields to 0 */
 534:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->EOBRUN = 0;
 535:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->BE = 0;
 536:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 537:fltk-1.3.4-1/jpeg/jchuff.c **** }
 538:fltk-1.3.4-1/jpeg/jchuff.c **** 
 539:fltk-1.3.4-1/jpeg/jchuff.c **** 
 540:fltk-1.3.4-1/jpeg/jchuff.c **** /*
 541:fltk-1.3.4-1/jpeg/jchuff.c ****  * MCU encoding for DC initial scan (either spectral selection,
 542:fltk-1.3.4-1/jpeg/jchuff.c ****  * or first pass of successive approximation).
 543:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 544:fltk-1.3.4-1/jpeg/jchuff.c **** 
 545:fltk-1.3.4-1/jpeg/jchuff.c **** METHODDEF(boolean)
 546:fltk-1.3.4-1/jpeg/jchuff.c **** encode_mcu_DC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
 547:fltk-1.3.4-1/jpeg/jchuff.c **** {
 548:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 549:fltk-1.3.4-1/jpeg/jchuff.c ****   register int temp, temp2;
 550:fltk-1.3.4-1/jpeg/jchuff.c ****   register int nbits;
 551:fltk-1.3.4-1/jpeg/jchuff.c ****   int blkn, ci, tbl;
 552:fltk-1.3.4-1/jpeg/jchuff.c ****   ISHIFT_TEMPS
 553:fltk-1.3.4-1/jpeg/jchuff.c **** 
 554:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->next_output_byte = cinfo->dest->next_output_byte;
 555:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 556:fltk-1.3.4-1/jpeg/jchuff.c **** 
 557:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Emit restart marker if needed */
 558:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->restart_interval)
 559:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 560:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_restart_e(entropy, entropy->next_restart_num);
 561:fltk-1.3.4-1/jpeg/jchuff.c **** 
 562:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Encode the MCU data blocks */
 563:fltk-1.3.4-1/jpeg/jchuff.c ****   for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 564:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
 565:fltk-1.3.4-1/jpeg/jchuff.c ****     tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 566:fltk-1.3.4-1/jpeg/jchuff.c **** 
 567:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Compute the DC value after the required point transform by Al.
 568:fltk-1.3.4-1/jpeg/jchuff.c ****      * This is simply an arithmetic right shift.
 569:fltk-1.3.4-1/jpeg/jchuff.c ****      */
 570:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = IRIGHT_SHIFT((int) (MCU_data[blkn][0][0]), cinfo->Al);
 571:fltk-1.3.4-1/jpeg/jchuff.c **** 
 572:fltk-1.3.4-1/jpeg/jchuff.c ****     /* DC differences are figured on the point-transformed values. */
 573:fltk-1.3.4-1/jpeg/jchuff.c ****     temp2 = temp - entropy->saved.last_dc_val[ci];
 574:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->saved.last_dc_val[ci] = temp;
 575:fltk-1.3.4-1/jpeg/jchuff.c **** 
 576:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Encode the DC coefficient difference per section G.1.2.1 */
 577:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = temp2;
 578:fltk-1.3.4-1/jpeg/jchuff.c ****     if (temp < 0) {
 579:fltk-1.3.4-1/jpeg/jchuff.c ****       temp = -temp;		/* temp is abs value of input */
 580:fltk-1.3.4-1/jpeg/jchuff.c ****       /* For a negative input, want temp2 = bitwise complement of abs(input) */
 581:fltk-1.3.4-1/jpeg/jchuff.c ****       /* This code assumes we are on a two's complement machine */
 582:fltk-1.3.4-1/jpeg/jchuff.c ****       temp2--;
 583:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 584:fltk-1.3.4-1/jpeg/jchuff.c **** 
 585:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Find the number of bits needed for the magnitude of the coefficient */
 586:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits = 0;
 587:fltk-1.3.4-1/jpeg/jchuff.c ****     while (temp) {
 588:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 589:fltk-1.3.4-1/jpeg/jchuff.c ****       temp >>= 1;
 590:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 591:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Check for out-of-range coefficient values.
 592:fltk-1.3.4-1/jpeg/jchuff.c ****      * Since we're encoding a difference, the range limit is twice as much.
 593:fltk-1.3.4-1/jpeg/jchuff.c ****      */
 594:fltk-1.3.4-1/jpeg/jchuff.c ****     if (nbits > MAX_COEF_BITS+1)
 595:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 596:fltk-1.3.4-1/jpeg/jchuff.c **** 
 597:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Count/emit the Huffman-coded symbol for the number of bits */
 598:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_dc_symbol(entropy, tbl, nbits);
 599:fltk-1.3.4-1/jpeg/jchuff.c **** 
 600:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Emit that number of bits of the value, if positive, */
 601:fltk-1.3.4-1/jpeg/jchuff.c ****     /* or the complement of its magnitude, if negative. */
 602:fltk-1.3.4-1/jpeg/jchuff.c ****     if (nbits)			/* emit_bits rejects calls with size 0 */
 603:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_bits_e(entropy, (unsigned int) temp2, nbits);
 604:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 605:fltk-1.3.4-1/jpeg/jchuff.c **** 
 606:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->next_output_byte = entropy->next_output_byte;
 607:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 608:fltk-1.3.4-1/jpeg/jchuff.c **** 
 609:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Update restart-interval state too */
 610:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->restart_interval) {
 611:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 612:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 613:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num++;
 614:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num &= 7;
 615:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 616:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->restarts_to_go--;
 617:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 618:fltk-1.3.4-1/jpeg/jchuff.c **** 
 619:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 620:fltk-1.3.4-1/jpeg/jchuff.c **** }
 621:fltk-1.3.4-1/jpeg/jchuff.c **** 
 622:fltk-1.3.4-1/jpeg/jchuff.c **** 
 623:fltk-1.3.4-1/jpeg/jchuff.c **** /*
 624:fltk-1.3.4-1/jpeg/jchuff.c ****  * MCU encoding for AC initial scan (either spectral selection,
 625:fltk-1.3.4-1/jpeg/jchuff.c ****  * or first pass of successive approximation).
 626:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 627:fltk-1.3.4-1/jpeg/jchuff.c **** 
 628:fltk-1.3.4-1/jpeg/jchuff.c **** METHODDEF(boolean)
 629:fltk-1.3.4-1/jpeg/jchuff.c **** encode_mcu_AC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
 630:fltk-1.3.4-1/jpeg/jchuff.c **** {
 631:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 632:fltk-1.3.4-1/jpeg/jchuff.c ****   const int * natural_order;
 633:fltk-1.3.4-1/jpeg/jchuff.c ****   JBLOCKROW block;
 634:fltk-1.3.4-1/jpeg/jchuff.c ****   register int temp, temp2;
 635:fltk-1.3.4-1/jpeg/jchuff.c ****   register int nbits;
 636:fltk-1.3.4-1/jpeg/jchuff.c ****   register int r, k;
 637:fltk-1.3.4-1/jpeg/jchuff.c ****   int Se, Al;
 638:fltk-1.3.4-1/jpeg/jchuff.c **** 
 639:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->next_output_byte = cinfo->dest->next_output_byte;
 640:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 641:fltk-1.3.4-1/jpeg/jchuff.c **** 
 642:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Emit restart marker if needed */
 643:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->restart_interval)
 644:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 645:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_restart_e(entropy, entropy->next_restart_num);
 646:fltk-1.3.4-1/jpeg/jchuff.c **** 
 647:fltk-1.3.4-1/jpeg/jchuff.c ****   Se = cinfo->Se;
 648:fltk-1.3.4-1/jpeg/jchuff.c ****   Al = cinfo->Al;
 649:fltk-1.3.4-1/jpeg/jchuff.c ****   natural_order = cinfo->natural_order;
 650:fltk-1.3.4-1/jpeg/jchuff.c **** 
 651:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Encode the MCU data block */
 652:fltk-1.3.4-1/jpeg/jchuff.c ****   block = MCU_data[0];
 653:fltk-1.3.4-1/jpeg/jchuff.c **** 
 654:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Encode the AC coefficients per section G.1.2.2, fig. G.3 */
 655:fltk-1.3.4-1/jpeg/jchuff.c ****   
 656:fltk-1.3.4-1/jpeg/jchuff.c ****   r = 0;			/* r = run length of zeros */
 657:fltk-1.3.4-1/jpeg/jchuff.c ****    
 658:fltk-1.3.4-1/jpeg/jchuff.c ****   for (k = cinfo->Ss; k <= Se; k++) {
 659:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = (*block)[natural_order[k]]) == 0) {
 660:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 661:fltk-1.3.4-1/jpeg/jchuff.c ****       continue;
 662:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 663:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We must apply the point transform by Al.  For AC coefficients this
 664:fltk-1.3.4-1/jpeg/jchuff.c ****      * is an integer division with rounding towards 0.  To do this portably
 665:fltk-1.3.4-1/jpeg/jchuff.c ****      * in C, we shift after obtaining the absolute value; so the code is
 666:fltk-1.3.4-1/jpeg/jchuff.c ****      * interwoven with finding the abs value (temp) and output bits (temp2).
 667:fltk-1.3.4-1/jpeg/jchuff.c ****      */
 668:fltk-1.3.4-1/jpeg/jchuff.c ****     if (temp < 0) {
 669:fltk-1.3.4-1/jpeg/jchuff.c ****       temp = -temp;		/* temp is abs value of input */
 670:fltk-1.3.4-1/jpeg/jchuff.c ****       temp >>= Al;		/* apply the point transform */
 671:fltk-1.3.4-1/jpeg/jchuff.c ****       /* For a negative coef, want temp2 = bitwise complement of abs(coef) */
 672:fltk-1.3.4-1/jpeg/jchuff.c ****       temp2 = ~temp;
 673:fltk-1.3.4-1/jpeg/jchuff.c ****     } else {
 674:fltk-1.3.4-1/jpeg/jchuff.c ****       temp >>= Al;		/* apply the point transform */
 675:fltk-1.3.4-1/jpeg/jchuff.c ****       temp2 = temp;
 676:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 677:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Watch out for case that nonzero coef is zero after point transform */
 678:fltk-1.3.4-1/jpeg/jchuff.c ****     if (temp == 0) {
 679:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 680:fltk-1.3.4-1/jpeg/jchuff.c ****       continue;
 681:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 682:fltk-1.3.4-1/jpeg/jchuff.c **** 
 683:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Emit any pending EOBRUN */
 684:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->EOBRUN > 0)
 685:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_eobrun(entropy);
 686:fltk-1.3.4-1/jpeg/jchuff.c ****     /* if run length > 15, must emit special run-length-16 codes (0xF0) */
 687:fltk-1.3.4-1/jpeg/jchuff.c ****     while (r > 15) {
 688:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_ac_symbol(entropy, entropy->ac_tbl_no, 0xF0);
 689:fltk-1.3.4-1/jpeg/jchuff.c ****       r -= 16;
 690:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 691:fltk-1.3.4-1/jpeg/jchuff.c **** 
 692:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Find the number of bits needed for the magnitude of the coefficient */
 693:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits = 1;			/* there must be at least one 1 bit */
 694:fltk-1.3.4-1/jpeg/jchuff.c ****     while ((temp >>= 1))
 695:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 696:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Check for out-of-range coefficient values */
 697:fltk-1.3.4-1/jpeg/jchuff.c ****     if (nbits > MAX_COEF_BITS)
 698:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 699:fltk-1.3.4-1/jpeg/jchuff.c **** 
 700:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Count/emit Huffman symbol for run length / number of bits */
 701:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_ac_symbol(entropy, entropy->ac_tbl_no, (r << 4) + nbits);
 702:fltk-1.3.4-1/jpeg/jchuff.c **** 
 703:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Emit that number of bits of the value, if positive, */
 704:fltk-1.3.4-1/jpeg/jchuff.c ****     /* or the complement of its magnitude, if negative. */
 705:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, (unsigned int) temp2, nbits);
 706:fltk-1.3.4-1/jpeg/jchuff.c **** 
 707:fltk-1.3.4-1/jpeg/jchuff.c ****     r = 0;			/* reset zero run length */
 708:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 709:fltk-1.3.4-1/jpeg/jchuff.c **** 
 710:fltk-1.3.4-1/jpeg/jchuff.c ****   if (r > 0) {			/* If there are trailing zeroes, */
 711:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->EOBRUN++;		/* count an EOB */
 712:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->EOBRUN == 0x7FFF)
 713:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_eobrun(entropy);	/* force it out to avoid overflow */
 714:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 715:fltk-1.3.4-1/jpeg/jchuff.c **** 
 716:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->next_output_byte = entropy->next_output_byte;
 717:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 718:fltk-1.3.4-1/jpeg/jchuff.c **** 
 719:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Update restart-interval state too */
 720:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->restart_interval) {
 721:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 722:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 723:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num++;
 724:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num &= 7;
 725:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 726:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->restarts_to_go--;
 727:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 728:fltk-1.3.4-1/jpeg/jchuff.c **** 
 729:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 730:fltk-1.3.4-1/jpeg/jchuff.c **** }
 731:fltk-1.3.4-1/jpeg/jchuff.c **** 
 732:fltk-1.3.4-1/jpeg/jchuff.c **** 
 733:fltk-1.3.4-1/jpeg/jchuff.c **** /*
 734:fltk-1.3.4-1/jpeg/jchuff.c ****  * MCU encoding for DC successive approximation refinement scan.
 735:fltk-1.3.4-1/jpeg/jchuff.c ****  * Note: we assume such scans can be multi-component,
 736:fltk-1.3.4-1/jpeg/jchuff.c ****  * although the spec is not very clear on the point.
 737:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 738:fltk-1.3.4-1/jpeg/jchuff.c **** 
 739:fltk-1.3.4-1/jpeg/jchuff.c **** METHODDEF(boolean)
 740:fltk-1.3.4-1/jpeg/jchuff.c **** encode_mcu_DC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
 741:fltk-1.3.4-1/jpeg/jchuff.c **** {
 742:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 743:fltk-1.3.4-1/jpeg/jchuff.c ****   int Al, blkn;
 744:fltk-1.3.4-1/jpeg/jchuff.c **** 
 745:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->next_output_byte = cinfo->dest->next_output_byte;
 746:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 747:fltk-1.3.4-1/jpeg/jchuff.c **** 
 748:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Emit restart marker if needed */
 749:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->restart_interval)
 750:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 751:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_restart_e(entropy, entropy->next_restart_num);
 752:fltk-1.3.4-1/jpeg/jchuff.c **** 
 753:fltk-1.3.4-1/jpeg/jchuff.c ****   Al = cinfo->Al;
 754:fltk-1.3.4-1/jpeg/jchuff.c **** 
 755:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Encode the MCU data blocks */
 756:fltk-1.3.4-1/jpeg/jchuff.c ****   for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 757:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We simply emit the Al'th bit of the DC coefficient value. */
 758:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, (unsigned int) (MCU_data[blkn][0][0] >> Al), 1);
 759:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 760:fltk-1.3.4-1/jpeg/jchuff.c **** 
 761:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->next_output_byte = entropy->next_output_byte;
 762:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 763:fltk-1.3.4-1/jpeg/jchuff.c **** 
 764:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Update restart-interval state too */
 765:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->restart_interval) {
 766:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 767:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 768:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num++;
 769:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num &= 7;
 770:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 771:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->restarts_to_go--;
 772:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 773:fltk-1.3.4-1/jpeg/jchuff.c **** 
 774:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 775:fltk-1.3.4-1/jpeg/jchuff.c **** }
 776:fltk-1.3.4-1/jpeg/jchuff.c **** 
 777:fltk-1.3.4-1/jpeg/jchuff.c **** 
 778:fltk-1.3.4-1/jpeg/jchuff.c **** /*
 779:fltk-1.3.4-1/jpeg/jchuff.c ****  * MCU encoding for AC successive approximation refinement scan.
 780:fltk-1.3.4-1/jpeg/jchuff.c ****  */
 781:fltk-1.3.4-1/jpeg/jchuff.c **** 
 782:fltk-1.3.4-1/jpeg/jchuff.c **** METHODDEF(boolean)
 783:fltk-1.3.4-1/jpeg/jchuff.c **** encode_mcu_AC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
 784:fltk-1.3.4-1/jpeg/jchuff.c **** {
 785:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 786:fltk-1.3.4-1/jpeg/jchuff.c ****   const int * natural_order;
 787:fltk-1.3.4-1/jpeg/jchuff.c ****   JBLOCKROW block;
 788:fltk-1.3.4-1/jpeg/jchuff.c ****   register int temp;
 789:fltk-1.3.4-1/jpeg/jchuff.c ****   register int r, k;
 790:fltk-1.3.4-1/jpeg/jchuff.c ****   int Se, Al;
 791:fltk-1.3.4-1/jpeg/jchuff.c ****   int EOB;
 792:fltk-1.3.4-1/jpeg/jchuff.c ****   char *BR_buffer;
 793:fltk-1.3.4-1/jpeg/jchuff.c ****   unsigned int BR;
 794:fltk-1.3.4-1/jpeg/jchuff.c ****   int absvalues[DCTSIZE2];
 795:fltk-1.3.4-1/jpeg/jchuff.c **** 
 796:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->next_output_byte = cinfo->dest->next_output_byte;
 797:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 798:fltk-1.3.4-1/jpeg/jchuff.c **** 
 799:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Emit restart marker if needed */
 800:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->restart_interval)
 801:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 802:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_restart_e(entropy, entropy->next_restart_num);
 803:fltk-1.3.4-1/jpeg/jchuff.c **** 
 804:fltk-1.3.4-1/jpeg/jchuff.c ****   Se = cinfo->Se;
 805:fltk-1.3.4-1/jpeg/jchuff.c ****   Al = cinfo->Al;
 806:fltk-1.3.4-1/jpeg/jchuff.c ****   natural_order = cinfo->natural_order;
 807:fltk-1.3.4-1/jpeg/jchuff.c **** 
 808:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Encode the MCU data block */
 809:fltk-1.3.4-1/jpeg/jchuff.c ****   block = MCU_data[0];
 810:fltk-1.3.4-1/jpeg/jchuff.c **** 
 811:fltk-1.3.4-1/jpeg/jchuff.c ****   /* It is convenient to make a pre-pass to determine the transformed
 812:fltk-1.3.4-1/jpeg/jchuff.c ****    * coefficients' absolute values and the EOB position.
 813:fltk-1.3.4-1/jpeg/jchuff.c ****    */
 814:fltk-1.3.4-1/jpeg/jchuff.c ****   EOB = 0;
 815:fltk-1.3.4-1/jpeg/jchuff.c ****   for (k = cinfo->Ss; k <= Se; k++) {
 816:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = (*block)[natural_order[k]];
 817:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We must apply the point transform by Al.  For AC coefficients this
 818:fltk-1.3.4-1/jpeg/jchuff.c ****      * is an integer division with rounding towards 0.  To do this portably
 819:fltk-1.3.4-1/jpeg/jchuff.c ****      * in C, we shift after obtaining the absolute value.
 820:fltk-1.3.4-1/jpeg/jchuff.c ****      */
 821:fltk-1.3.4-1/jpeg/jchuff.c ****     if (temp < 0)
 822:fltk-1.3.4-1/jpeg/jchuff.c ****       temp = -temp;		/* temp is abs value of input */
 823:fltk-1.3.4-1/jpeg/jchuff.c ****     temp >>= Al;		/* apply the point transform */
 824:fltk-1.3.4-1/jpeg/jchuff.c ****     absvalues[k] = temp;	/* save abs value for main pass */
 825:fltk-1.3.4-1/jpeg/jchuff.c ****     if (temp == 1)
 826:fltk-1.3.4-1/jpeg/jchuff.c ****       EOB = k;			/* EOB = index of last newly-nonzero coef */
 827:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 828:fltk-1.3.4-1/jpeg/jchuff.c **** 
 829:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Encode the AC coefficients per section G.1.2.3, fig. G.7 */
 830:fltk-1.3.4-1/jpeg/jchuff.c ****   
 831:fltk-1.3.4-1/jpeg/jchuff.c ****   r = 0;			/* r = run length of zeros */
 832:fltk-1.3.4-1/jpeg/jchuff.c ****   BR = 0;			/* BR = count of buffered bits added now */
 833:fltk-1.3.4-1/jpeg/jchuff.c ****   BR_buffer = entropy->bit_buffer + entropy->BE; /* Append bits to buffer */
 834:fltk-1.3.4-1/jpeg/jchuff.c **** 
 835:fltk-1.3.4-1/jpeg/jchuff.c ****   for (k = cinfo->Ss; k <= Se; k++) {
 836:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = absvalues[k]) == 0) {
 837:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 838:fltk-1.3.4-1/jpeg/jchuff.c ****       continue;
 839:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 840:fltk-1.3.4-1/jpeg/jchuff.c **** 
 841:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Emit any required ZRLs, but not if they can be folded into EOB */
 842:fltk-1.3.4-1/jpeg/jchuff.c ****     while (r > 15 && k <= EOB) {
 843:fltk-1.3.4-1/jpeg/jchuff.c ****       /* emit any pending EOBRUN and the BE correction bits */
 844:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_eobrun(entropy);
 845:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Emit ZRL */
 846:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_ac_symbol(entropy, entropy->ac_tbl_no, 0xF0);
 847:fltk-1.3.4-1/jpeg/jchuff.c ****       r -= 16;
 848:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Emit buffered correction bits that must be associated with ZRL */
 849:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_buffered_bits(entropy, BR_buffer, BR);
 850:fltk-1.3.4-1/jpeg/jchuff.c ****       BR_buffer = entropy->bit_buffer; /* BE bits are gone now */
 851:fltk-1.3.4-1/jpeg/jchuff.c ****       BR = 0;
 852:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 853:fltk-1.3.4-1/jpeg/jchuff.c **** 
 854:fltk-1.3.4-1/jpeg/jchuff.c ****     /* If the coef was previously nonzero, it only needs a correction bit.
 855:fltk-1.3.4-1/jpeg/jchuff.c ****      * NOTE: a straight translation of the spec's figure G.7 would suggest
 856:fltk-1.3.4-1/jpeg/jchuff.c ****      * that we also need to test r > 15.  But if r > 15, we can only get here
 857:fltk-1.3.4-1/jpeg/jchuff.c ****      * if k > EOB, which implies that this coefficient is not 1.
 858:fltk-1.3.4-1/jpeg/jchuff.c ****      */
 859:fltk-1.3.4-1/jpeg/jchuff.c ****     if (temp > 1) {
 860:fltk-1.3.4-1/jpeg/jchuff.c ****       /* The correction bit is the next bit of the absolute value. */
 861:fltk-1.3.4-1/jpeg/jchuff.c ****       BR_buffer[BR++] = (char) (temp & 1);
 862:fltk-1.3.4-1/jpeg/jchuff.c ****       continue;
 863:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 864:fltk-1.3.4-1/jpeg/jchuff.c **** 
 865:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Emit any pending EOBRUN and the BE correction bits */
 866:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_eobrun(entropy);
 867:fltk-1.3.4-1/jpeg/jchuff.c **** 
 868:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Count/emit Huffman symbol for run length / number of bits */
 869:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_ac_symbol(entropy, entropy->ac_tbl_no, (r << 4) + 1);
 870:fltk-1.3.4-1/jpeg/jchuff.c **** 
 871:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Emit output bit for newly-nonzero coef */
 872:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = ((*block)[natural_order[k]] < 0) ? 0 : 1;
 873:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, (unsigned int) temp, 1);
 874:fltk-1.3.4-1/jpeg/jchuff.c **** 
 875:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Emit buffered correction bits that must be associated with this code */
 876:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_buffered_bits(entropy, BR_buffer, BR);
 877:fltk-1.3.4-1/jpeg/jchuff.c ****     BR_buffer = entropy->bit_buffer; /* BE bits are gone now */
 878:fltk-1.3.4-1/jpeg/jchuff.c ****     BR = 0;
 879:fltk-1.3.4-1/jpeg/jchuff.c ****     r = 0;			/* reset zero run length */
 880:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 881:fltk-1.3.4-1/jpeg/jchuff.c **** 
 882:fltk-1.3.4-1/jpeg/jchuff.c ****   if (r > 0 || BR > 0) {	/* If there are trailing zeroes, */
 883:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->EOBRUN++;		/* count an EOB */
 884:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->BE += BR;		/* concat my correction bits to older ones */
 885:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We force out the EOB if we risk either:
 886:fltk-1.3.4-1/jpeg/jchuff.c ****      * 1. overflow of the EOB counter;
 887:fltk-1.3.4-1/jpeg/jchuff.c ****      * 2. overflow of the correction bit buffer during the next MCU.
 888:fltk-1.3.4-1/jpeg/jchuff.c ****      */
 889:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->EOBRUN == 0x7FFF || entropy->BE > (MAX_CORR_BITS-DCTSIZE2+1))
 890:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_eobrun(entropy);
 891:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 892:fltk-1.3.4-1/jpeg/jchuff.c **** 
 893:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->next_output_byte = entropy->next_output_byte;
 894:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 895:fltk-1.3.4-1/jpeg/jchuff.c **** 
 896:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Update restart-interval state too */
 897:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->restart_interval) {
 898:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 899:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 900:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num++;
 901:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num &= 7;
 902:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 903:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->restarts_to_go--;
 904:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 905:fltk-1.3.4-1/jpeg/jchuff.c **** 
 906:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 907:fltk-1.3.4-1/jpeg/jchuff.c **** }
 908:fltk-1.3.4-1/jpeg/jchuff.c **** 
 909:fltk-1.3.4-1/jpeg/jchuff.c **** 
 910:fltk-1.3.4-1/jpeg/jchuff.c **** /* Encode a single block's worth of coefficients */
 911:fltk-1.3.4-1/jpeg/jchuff.c **** 
 912:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(boolean)
 913:fltk-1.3.4-1/jpeg/jchuff.c **** encode_one_block (working_state * state, JCOEFPTR block, int last_dc_val,
 914:fltk-1.3.4-1/jpeg/jchuff.c **** 		  c_derived_tbl *dctbl, c_derived_tbl *actbl)
 915:fltk-1.3.4-1/jpeg/jchuff.c **** {
 916:fltk-1.3.4-1/jpeg/jchuff.c ****   register int temp, temp2;
 917:fltk-1.3.4-1/jpeg/jchuff.c ****   register int nbits;
 918:fltk-1.3.4-1/jpeg/jchuff.c ****   register int r, k;
 919:fltk-1.3.4-1/jpeg/jchuff.c ****   int Se = state->cinfo->lim_Se;
 920:fltk-1.3.4-1/jpeg/jchuff.c ****   const int * natural_order = state->cinfo->natural_order;
 921:fltk-1.3.4-1/jpeg/jchuff.c **** 
 922:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Encode the DC coefficient difference per section F.1.2.1 */
 923:fltk-1.3.4-1/jpeg/jchuff.c **** 
 924:fltk-1.3.4-1/jpeg/jchuff.c ****   temp = temp2 = block[0] - last_dc_val;
 925:fltk-1.3.4-1/jpeg/jchuff.c **** 
 926:fltk-1.3.4-1/jpeg/jchuff.c ****   if (temp < 0) {
 927:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = -temp;		/* temp is abs value of input */
 928:fltk-1.3.4-1/jpeg/jchuff.c ****     /* For a negative input, want temp2 = bitwise complement of abs(input) */
 929:fltk-1.3.4-1/jpeg/jchuff.c ****     /* This code assumes we are on a two's complement machine */
 930:fltk-1.3.4-1/jpeg/jchuff.c ****     temp2--;
 931:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 932:fltk-1.3.4-1/jpeg/jchuff.c **** 
 933:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Find the number of bits needed for the magnitude of the coefficient */
 934:fltk-1.3.4-1/jpeg/jchuff.c ****   nbits = 0;
 935:fltk-1.3.4-1/jpeg/jchuff.c ****   while (temp) {
 936:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits++;
 937:fltk-1.3.4-1/jpeg/jchuff.c ****     temp >>= 1;
 938:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 939:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Check for out-of-range coefficient values.
 940:fltk-1.3.4-1/jpeg/jchuff.c ****    * Since we're encoding a difference, the range limit is twice as much.
 941:fltk-1.3.4-1/jpeg/jchuff.c ****    */
 942:fltk-1.3.4-1/jpeg/jchuff.c ****   if (nbits > MAX_COEF_BITS+1)
 943:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(state->cinfo, JERR_BAD_DCT_COEF);
 944:fltk-1.3.4-1/jpeg/jchuff.c **** 
 945:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Emit the Huffman-coded symbol for the number of bits */
 946:fltk-1.3.4-1/jpeg/jchuff.c ****   if (! emit_bits_s(state, dctbl->ehufco[nbits], dctbl->ehufsi[nbits]))
 947:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 948:fltk-1.3.4-1/jpeg/jchuff.c **** 
 949:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Emit that number of bits of the value, if positive, */
 950:fltk-1.3.4-1/jpeg/jchuff.c ****   /* or the complement of its magnitude, if negative. */
 951:fltk-1.3.4-1/jpeg/jchuff.c ****   if (nbits)			/* emit_bits rejects calls with size 0 */
 952:fltk-1.3.4-1/jpeg/jchuff.c ****     if (! emit_bits_s(state, (unsigned int) temp2, nbits))
 953:fltk-1.3.4-1/jpeg/jchuff.c ****       return FALSE;
 954:fltk-1.3.4-1/jpeg/jchuff.c **** 
 955:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Encode the AC coefficients per section F.1.2.2 */
 956:fltk-1.3.4-1/jpeg/jchuff.c **** 
 957:fltk-1.3.4-1/jpeg/jchuff.c ****   r = 0;			/* r = run length of zeros */
 958:fltk-1.3.4-1/jpeg/jchuff.c **** 
 959:fltk-1.3.4-1/jpeg/jchuff.c ****   for (k = 1; k <= Se; k++) {
 960:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp2 = block[natural_order[k]]) == 0) {
 961:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 962:fltk-1.3.4-1/jpeg/jchuff.c ****     } else {
 963:fltk-1.3.4-1/jpeg/jchuff.c ****       /* if run length > 15, must emit special run-length-16 codes (0xF0) */
 964:fltk-1.3.4-1/jpeg/jchuff.c ****       while (r > 15) {
 965:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (! emit_bits_s(state, actbl->ehufco[0xF0], actbl->ehufsi[0xF0]))
 966:fltk-1.3.4-1/jpeg/jchuff.c **** 	  return FALSE;
 967:fltk-1.3.4-1/jpeg/jchuff.c **** 	r -= 16;
 968:fltk-1.3.4-1/jpeg/jchuff.c ****       }
 969:fltk-1.3.4-1/jpeg/jchuff.c **** 
 970:fltk-1.3.4-1/jpeg/jchuff.c ****       temp = temp2;
 971:fltk-1.3.4-1/jpeg/jchuff.c ****       if (temp < 0) {
 972:fltk-1.3.4-1/jpeg/jchuff.c **** 	temp = -temp;		/* temp is abs value of input */
 973:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* This code assumes we are on a two's complement machine */
 974:fltk-1.3.4-1/jpeg/jchuff.c **** 	temp2--;
 975:fltk-1.3.4-1/jpeg/jchuff.c ****       }
 976:fltk-1.3.4-1/jpeg/jchuff.c **** 
 977:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Find the number of bits needed for the magnitude of the coefficient */
 978:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits = 1;		/* there must be at least one 1 bit */
 979:fltk-1.3.4-1/jpeg/jchuff.c ****       while ((temp >>= 1))
 980:fltk-1.3.4-1/jpeg/jchuff.c **** 	nbits++;
 981:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Check for out-of-range coefficient values */
 982:fltk-1.3.4-1/jpeg/jchuff.c ****       if (nbits > MAX_COEF_BITS)
 983:fltk-1.3.4-1/jpeg/jchuff.c **** 	ERREXIT(state->cinfo, JERR_BAD_DCT_COEF);
 984:fltk-1.3.4-1/jpeg/jchuff.c **** 
 985:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Emit Huffman symbol for run length / number of bits */
 986:fltk-1.3.4-1/jpeg/jchuff.c ****       temp = (r << 4) + nbits;
 987:fltk-1.3.4-1/jpeg/jchuff.c ****       if (! emit_bits_s(state, actbl->ehufco[temp], actbl->ehufsi[temp]))
 988:fltk-1.3.4-1/jpeg/jchuff.c **** 	return FALSE;
 989:fltk-1.3.4-1/jpeg/jchuff.c **** 
 990:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Emit that number of bits of the value, if positive, */
 991:fltk-1.3.4-1/jpeg/jchuff.c ****       /* or the complement of its magnitude, if negative. */
 992:fltk-1.3.4-1/jpeg/jchuff.c ****       if (! emit_bits_s(state, (unsigned int) temp2, nbits))
 993:fltk-1.3.4-1/jpeg/jchuff.c **** 	return FALSE;
 994:fltk-1.3.4-1/jpeg/jchuff.c **** 
 995:fltk-1.3.4-1/jpeg/jchuff.c ****       r = 0;
 996:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 997:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 998:fltk-1.3.4-1/jpeg/jchuff.c **** 
 999:fltk-1.3.4-1/jpeg/jchuff.c ****   /* If the last coef(s) were zero, emit an end-of-block code */
1000:fltk-1.3.4-1/jpeg/jchuff.c ****   if (r > 0)
1001:fltk-1.3.4-1/jpeg/jchuff.c ****     if (! emit_bits_s(state, actbl->ehufco[0], actbl->ehufsi[0]))
1002:fltk-1.3.4-1/jpeg/jchuff.c ****       return FALSE;
1003:fltk-1.3.4-1/jpeg/jchuff.c **** 
1004:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
1005:fltk-1.3.4-1/jpeg/jchuff.c **** }
1006:fltk-1.3.4-1/jpeg/jchuff.c **** 
1007:fltk-1.3.4-1/jpeg/jchuff.c **** 
1008:fltk-1.3.4-1/jpeg/jchuff.c **** /*
1009:fltk-1.3.4-1/jpeg/jchuff.c ****  * Encode and output one MCU's worth of Huffman-compressed coefficients.
1010:fltk-1.3.4-1/jpeg/jchuff.c ****  */
1011:fltk-1.3.4-1/jpeg/jchuff.c **** 
1012:fltk-1.3.4-1/jpeg/jchuff.c **** METHODDEF(boolean)
1013:fltk-1.3.4-1/jpeg/jchuff.c **** encode_mcu_huff (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
1014:fltk-1.3.4-1/jpeg/jchuff.c **** {
1015:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
1016:fltk-1.3.4-1/jpeg/jchuff.c ****   working_state state;
1017:fltk-1.3.4-1/jpeg/jchuff.c ****   int blkn, ci;
1018:fltk-1.3.4-1/jpeg/jchuff.c ****   jpeg_component_info * compptr;
1019:fltk-1.3.4-1/jpeg/jchuff.c **** 
1020:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Load up working state */
1021:fltk-1.3.4-1/jpeg/jchuff.c ****   state.next_output_byte = cinfo->dest->next_output_byte;
1022:fltk-1.3.4-1/jpeg/jchuff.c ****   state.free_in_buffer = cinfo->dest->free_in_buffer;
1023:fltk-1.3.4-1/jpeg/jchuff.c ****   ASSIGN_STATE(state.cur, entropy->saved);
1024:fltk-1.3.4-1/jpeg/jchuff.c ****   state.cinfo = cinfo;
1025:fltk-1.3.4-1/jpeg/jchuff.c **** 
1026:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Emit restart marker if needed */
1027:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->restart_interval) {
1028:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
1029:fltk-1.3.4-1/jpeg/jchuff.c ****       if (! emit_restart_s(&state, entropy->next_restart_num))
1030:fltk-1.3.4-1/jpeg/jchuff.c **** 	return FALSE;
1031:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1032:fltk-1.3.4-1/jpeg/jchuff.c **** 
1033:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Encode the MCU data blocks */
1034:fltk-1.3.4-1/jpeg/jchuff.c ****   for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
1035:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
1036:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
1037:fltk-1.3.4-1/jpeg/jchuff.c ****     if (! encode_one_block(&state,
1038:fltk-1.3.4-1/jpeg/jchuff.c **** 			   MCU_data[blkn][0], state.cur.last_dc_val[ci],
1039:fltk-1.3.4-1/jpeg/jchuff.c **** 			   entropy->dc_derived_tbls[compptr->dc_tbl_no],
1040:fltk-1.3.4-1/jpeg/jchuff.c **** 			   entropy->ac_derived_tbls[compptr->ac_tbl_no]))
1041:fltk-1.3.4-1/jpeg/jchuff.c ****       return FALSE;
1042:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Update last_dc_val */
1043:fltk-1.3.4-1/jpeg/jchuff.c ****     state.cur.last_dc_val[ci] = MCU_data[blkn][0][0];
1044:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1045:fltk-1.3.4-1/jpeg/jchuff.c **** 
1046:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Completed MCU, so update state */
1047:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->next_output_byte = state.next_output_byte;
1048:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = state.free_in_buffer;
1049:fltk-1.3.4-1/jpeg/jchuff.c ****   ASSIGN_STATE(entropy->saved, state.cur);
1050:fltk-1.3.4-1/jpeg/jchuff.c **** 
1051:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Update restart-interval state too */
1052:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->restart_interval) {
1053:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
1054:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
1055:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num++;
1056:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->next_restart_num &= 7;
1057:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1058:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->restarts_to_go--;
1059:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1060:fltk-1.3.4-1/jpeg/jchuff.c **** 
1061:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
1062:fltk-1.3.4-1/jpeg/jchuff.c **** }
1063:fltk-1.3.4-1/jpeg/jchuff.c **** 
1064:fltk-1.3.4-1/jpeg/jchuff.c **** 
1065:fltk-1.3.4-1/jpeg/jchuff.c **** /*
1066:fltk-1.3.4-1/jpeg/jchuff.c ****  * Finish up at the end of a Huffman-compressed scan.
1067:fltk-1.3.4-1/jpeg/jchuff.c ****  */
1068:fltk-1.3.4-1/jpeg/jchuff.c **** 
1069:fltk-1.3.4-1/jpeg/jchuff.c **** METHODDEF(void)
1070:fltk-1.3.4-1/jpeg/jchuff.c **** finish_pass_huff (j_compress_ptr cinfo)
1071:fltk-1.3.4-1/jpeg/jchuff.c **** {
1072:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
1073:fltk-1.3.4-1/jpeg/jchuff.c ****   working_state state;
1074:fltk-1.3.4-1/jpeg/jchuff.c **** 
1075:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->progressive_mode) {
1076:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->next_output_byte = cinfo->dest->next_output_byte;
1077:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->free_in_buffer = cinfo->dest->free_in_buffer;
1078:fltk-1.3.4-1/jpeg/jchuff.c **** 
1079:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Flush out any buffered data */
1080:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_eobrun(entropy);
1081:fltk-1.3.4-1/jpeg/jchuff.c ****     flush_bits_e(entropy);
1082:fltk-1.3.4-1/jpeg/jchuff.c **** 
1083:fltk-1.3.4-1/jpeg/jchuff.c ****     cinfo->dest->next_output_byte = entropy->next_output_byte;
1084:fltk-1.3.4-1/jpeg/jchuff.c ****     cinfo->dest->free_in_buffer = entropy->free_in_buffer;
1085:fltk-1.3.4-1/jpeg/jchuff.c ****   } else {
1086:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Load up working state ... flush_bits needs it */
1087:fltk-1.3.4-1/jpeg/jchuff.c ****     state.next_output_byte = cinfo->dest->next_output_byte;
1088:fltk-1.3.4-1/jpeg/jchuff.c ****     state.free_in_buffer = cinfo->dest->free_in_buffer;
1089:fltk-1.3.4-1/jpeg/jchuff.c ****     ASSIGN_STATE(state.cur, entropy->saved);
1090:fltk-1.3.4-1/jpeg/jchuff.c ****     state.cinfo = cinfo;
1091:fltk-1.3.4-1/jpeg/jchuff.c **** 
1092:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Flush out the last data */
1093:fltk-1.3.4-1/jpeg/jchuff.c ****     if (! flush_bits_s(&state))
1094:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_CANT_SUSPEND);
1095:fltk-1.3.4-1/jpeg/jchuff.c **** 
1096:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Update state */
1097:fltk-1.3.4-1/jpeg/jchuff.c ****     cinfo->dest->next_output_byte = state.next_output_byte;
1098:fltk-1.3.4-1/jpeg/jchuff.c ****     cinfo->dest->free_in_buffer = state.free_in_buffer;
1099:fltk-1.3.4-1/jpeg/jchuff.c ****     ASSIGN_STATE(entropy->saved, state.cur);
1100:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1101:fltk-1.3.4-1/jpeg/jchuff.c **** }
1102:fltk-1.3.4-1/jpeg/jchuff.c **** 
1103:fltk-1.3.4-1/jpeg/jchuff.c **** 
1104:fltk-1.3.4-1/jpeg/jchuff.c **** /*
1105:fltk-1.3.4-1/jpeg/jchuff.c ****  * Huffman coding optimization.
1106:fltk-1.3.4-1/jpeg/jchuff.c ****  *
1107:fltk-1.3.4-1/jpeg/jchuff.c ****  * We first scan the supplied data and count the number of uses of each symbol
1108:fltk-1.3.4-1/jpeg/jchuff.c ****  * that is to be Huffman-coded. (This process MUST agree with the code above.)
1109:fltk-1.3.4-1/jpeg/jchuff.c ****  * Then we build a Huffman coding tree for the observed counts.
1110:fltk-1.3.4-1/jpeg/jchuff.c ****  * Symbols which are not needed at all for the particular image are not
1111:fltk-1.3.4-1/jpeg/jchuff.c ****  * assigned any code, which saves space in the DHT marker as well as in
1112:fltk-1.3.4-1/jpeg/jchuff.c ****  * the compressed data.
1113:fltk-1.3.4-1/jpeg/jchuff.c ****  */
1114:fltk-1.3.4-1/jpeg/jchuff.c **** 
1115:fltk-1.3.4-1/jpeg/jchuff.c **** 
1116:fltk-1.3.4-1/jpeg/jchuff.c **** /* Process a single block's worth of coefficients */
1117:fltk-1.3.4-1/jpeg/jchuff.c **** 
1118:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(void)
1119:fltk-1.3.4-1/jpeg/jchuff.c **** htest_one_block (j_compress_ptr cinfo, JCOEFPTR block, int last_dc_val,
1120:fltk-1.3.4-1/jpeg/jchuff.c **** 		 long dc_counts[], long ac_counts[])
1121:fltk-1.3.4-1/jpeg/jchuff.c **** {
1122:fltk-1.3.4-1/jpeg/jchuff.c ****   register int temp;
1123:fltk-1.3.4-1/jpeg/jchuff.c ****   register int nbits;
1124:fltk-1.3.4-1/jpeg/jchuff.c ****   register int r, k;
1125:fltk-1.3.4-1/jpeg/jchuff.c ****   int Se = cinfo->lim_Se;
1126:fltk-1.3.4-1/jpeg/jchuff.c ****   const int * natural_order = cinfo->natural_order;
1127:fltk-1.3.4-1/jpeg/jchuff.c **** 
1128:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Encode the DC coefficient difference per section F.1.2.1 */
1129:fltk-1.3.4-1/jpeg/jchuff.c **** 
1130:fltk-1.3.4-1/jpeg/jchuff.c ****   temp = block[0] - last_dc_val;
1131:fltk-1.3.4-1/jpeg/jchuff.c ****   if (temp < 0)
1132:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = -temp;
1133:fltk-1.3.4-1/jpeg/jchuff.c **** 
1134:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Find the number of bits needed for the magnitude of the coefficient */
1135:fltk-1.3.4-1/jpeg/jchuff.c ****   nbits = 0;
1136:fltk-1.3.4-1/jpeg/jchuff.c ****   while (temp) {
1137:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits++;
1138:fltk-1.3.4-1/jpeg/jchuff.c ****     temp >>= 1;
1139:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1140:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Check for out-of-range coefficient values.
1141:fltk-1.3.4-1/jpeg/jchuff.c ****    * Since we're encoding a difference, the range limit is twice as much.
1142:fltk-1.3.4-1/jpeg/jchuff.c ****    */
1143:fltk-1.3.4-1/jpeg/jchuff.c ****   if (nbits > MAX_COEF_BITS+1)
1144:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(cinfo, JERR_BAD_DCT_COEF);
1145:fltk-1.3.4-1/jpeg/jchuff.c **** 
1146:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Count the Huffman symbol for the number of bits */
1147:fltk-1.3.4-1/jpeg/jchuff.c ****   dc_counts[nbits]++;
1148:fltk-1.3.4-1/jpeg/jchuff.c **** 
1149:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Encode the AC coefficients per section F.1.2.2 */
1150:fltk-1.3.4-1/jpeg/jchuff.c **** 
1151:fltk-1.3.4-1/jpeg/jchuff.c ****   r = 0;			/* r = run length of zeros */
1152:fltk-1.3.4-1/jpeg/jchuff.c **** 
1153:fltk-1.3.4-1/jpeg/jchuff.c ****   for (k = 1; k <= Se; k++) {
1154:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = block[natural_order[k]]) == 0) {
1155:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
1156:fltk-1.3.4-1/jpeg/jchuff.c ****     } else {
1157:fltk-1.3.4-1/jpeg/jchuff.c ****       /* if run length > 15, must emit special run-length-16 codes (0xF0) */
1158:fltk-1.3.4-1/jpeg/jchuff.c ****       while (r > 15) {
1159:fltk-1.3.4-1/jpeg/jchuff.c **** 	ac_counts[0xF0]++;
1160:fltk-1.3.4-1/jpeg/jchuff.c **** 	r -= 16;
1161:fltk-1.3.4-1/jpeg/jchuff.c ****       }
1162:fltk-1.3.4-1/jpeg/jchuff.c **** 
1163:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Find the number of bits needed for the magnitude of the coefficient */
1164:fltk-1.3.4-1/jpeg/jchuff.c ****       if (temp < 0)
1165:fltk-1.3.4-1/jpeg/jchuff.c **** 	temp = -temp;
1166:fltk-1.3.4-1/jpeg/jchuff.c **** 
1167:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Find the number of bits needed for the magnitude of the coefficient */
1168:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits = 1;		/* there must be at least one 1 bit */
1169:fltk-1.3.4-1/jpeg/jchuff.c ****       while ((temp >>= 1))
1170:fltk-1.3.4-1/jpeg/jchuff.c **** 	nbits++;
1171:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Check for out-of-range coefficient values */
1172:fltk-1.3.4-1/jpeg/jchuff.c ****       if (nbits > MAX_COEF_BITS)
1173:fltk-1.3.4-1/jpeg/jchuff.c **** 	ERREXIT(cinfo, JERR_BAD_DCT_COEF);
1174:fltk-1.3.4-1/jpeg/jchuff.c **** 
1175:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Count Huffman symbol for run length / number of bits */
1176:fltk-1.3.4-1/jpeg/jchuff.c ****       ac_counts[(r << 4) + nbits]++;
1177:fltk-1.3.4-1/jpeg/jchuff.c **** 
1178:fltk-1.3.4-1/jpeg/jchuff.c ****       r = 0;
1179:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1180:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1181:fltk-1.3.4-1/jpeg/jchuff.c **** 
1182:fltk-1.3.4-1/jpeg/jchuff.c ****   /* If the last coef(s) were zero, emit an end-of-block code */
1183:fltk-1.3.4-1/jpeg/jchuff.c ****   if (r > 0)
1184:fltk-1.3.4-1/jpeg/jchuff.c ****     ac_counts[0]++;
1185:fltk-1.3.4-1/jpeg/jchuff.c **** }
1186:fltk-1.3.4-1/jpeg/jchuff.c **** 
1187:fltk-1.3.4-1/jpeg/jchuff.c **** 
1188:fltk-1.3.4-1/jpeg/jchuff.c **** /*
1189:fltk-1.3.4-1/jpeg/jchuff.c ****  * Trial-encode one MCU's worth of Huffman-compressed coefficients.
1190:fltk-1.3.4-1/jpeg/jchuff.c ****  * No data is actually output, so no suspension return is possible.
1191:fltk-1.3.4-1/jpeg/jchuff.c ****  */
1192:fltk-1.3.4-1/jpeg/jchuff.c **** 
1193:fltk-1.3.4-1/jpeg/jchuff.c **** METHODDEF(boolean)
1194:fltk-1.3.4-1/jpeg/jchuff.c **** encode_mcu_gather (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
1195:fltk-1.3.4-1/jpeg/jchuff.c **** {
  78              		.loc 1 1195 0
  79              		.cfi_startproc
  80              	.LVL7:
  81 0000 4157     		pushq	%r15
  82              		.cfi_def_cfa_offset 16
  83              		.cfi_offset 15, -16
  84 0002 4156     		pushq	%r14
  85              		.cfi_def_cfa_offset 24
  86              		.cfi_offset 14, -24
  87 0004 4155     		pushq	%r13
  88              		.cfi_def_cfa_offset 32
  89              		.cfi_offset 13, -32
  90 0006 4154     		pushq	%r12
  91              		.cfi_def_cfa_offset 40
  92              		.cfi_offset 12, -40
  93 0008 55       		pushq	%rbp
  94              		.cfi_def_cfa_offset 48
  95              		.cfi_offset 6, -48
  96 0009 53       		pushq	%rbx
  97              		.cfi_def_cfa_offset 56
  98              		.cfi_offset 3, -56
  99 000a 4889FD   		movq	%rdi, %rbp
 100 000d 4883EC38 		subq	$56, %rsp
 101              		.cfi_def_cfa_offset 112
1196:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
1197:fltk-1.3.4-1/jpeg/jchuff.c ****   int blkn, ci;
1198:fltk-1.3.4-1/jpeg/jchuff.c ****   jpeg_component_info * compptr;
1199:fltk-1.3.4-1/jpeg/jchuff.c **** 
1200:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Take care of restart intervals if needed */
1201:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->restart_interval) {
 102              		.loc 1 1201 0
 103 0011 8B973C01 		movl	316(%rdi), %edx
 103      0000
1196:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 104              		.loc 1 1196 0
 105 0017 488B8730 		movq	560(%rdi), %rax
 105      020000
 106              		.loc 1 1201 0
 107 001e 85D2     		testl	%edx, %edx
1196:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 108              		.loc 1 1196 0
 109 0020 48894424 		movq	%rax, 40(%rsp)
 109      28
 110              	.LVL8:
 111              		.loc 1 1201 0
 112 0025 7419     		je	.L6
 113 0027 4889C1   		movq	%rax, %rcx
1202:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 114              		.loc 1 1202 0
 115 002a 8B4038   		movl	56(%rax), %eax
 116              	.LVL9:
 117 002d 85C0     		testl	%eax, %eax
 118 002f 0F841702 		je	.L44
 118      0000
 119              	.LVL10:
 120              	.L7:
1203:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Re-initialize DC predictions to 0 */
1204:fltk-1.3.4-1/jpeg/jchuff.c ****       for (ci = 0; ci < cinfo->comps_in_scan; ci++)
1205:fltk-1.3.4-1/jpeg/jchuff.c **** 	entropy->saved.last_dc_val[ci] = 0;
1206:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Update restart state */
1207:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
1208:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1209:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->restarts_to_go--;
 121              		.loc 1 1209 0
 122 0035 488B4C24 		movq	40(%rsp), %rcx
 122      28
 123              	.LVL11:
 124 003a 83E801   		subl	$1, %eax
 125 003d 894138   		movl	%eax, 56(%rcx)
 126              	.L6:
 127              	.LVL12:
 128 0040 488D85A4 		leaq	420(%rbp), %rax
 128      010000
 129 0047 4989F4   		movq	%rsi, %r12
1210:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1211:fltk-1.3.4-1/jpeg/jchuff.c **** 
1212:fltk-1.3.4-1/jpeg/jchuff.c ****   for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 130              		.loc 1 1212 0 discriminator 1
 131 004a C7442404 		movl	$0, 4(%rsp)
 131      00000000 
 132 0052 48894424 		movq	%rax, 24(%rsp)
 132      18
 133 0057 8B85A001 		movl	416(%rbp), %eax
 133      0000
 134 005d 85C0     		testl	%eax, %eax
 135 005f 0F8E5301 		jle	.L42
 135      0000
 136              	.LVL13:
 137              		.p2align 4,,10
 138 0065 0F1F00   		.p2align 3
 139              	.L33:
1213:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
1214:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
 140              		.loc 1 1214 0 discriminator 3
 141 0068 488B4424 		movq	24(%rsp), %rax
 141      18
1215:fltk-1.3.4-1/jpeg/jchuff.c ****     htest_one_block(cinfo, MCU_data[blkn][0], entropy->saved.last_dc_val[ci],
 142              		.loc 1 1215 0 discriminator 3
 143 006d 488B7424 		movq	40(%rsp), %rsi
 143      28
 144 0072 4D8B0424 		movq	(%r12), %r8
 145              	.LBB65:
 146              	.LBB66:
1125:fltk-1.3.4-1/jpeg/jchuff.c ****   const int * natural_order = cinfo->natural_order;
 147              		.loc 1 1125 0 discriminator 3
 148 0076 8B9DE801 		movl	488(%rbp), %ebx
 148      0000
1126:fltk-1.3.4-1/jpeg/jchuff.c **** 
 149              		.loc 1 1126 0 discriminator 3
 150 007c 4C8BBDE0 		movq	480(%rbp), %r15
 150      010000
 151              	.LBE66:
 152              	.LBE65:
1214:fltk-1.3.4-1/jpeg/jchuff.c ****     htest_one_block(cinfo, MCU_data[blkn][0], entropy->saved.last_dc_val[ci],
 153              		.loc 1 1214 0 discriminator 3
 154 0083 486300   		movslq	(%rax), %rax
 155 0086 488B94C5 		movq	376(%rbp,%rax,8), %rdx
 155      78010000 
 156              	.LVL14:
 157 008e 488D0486 		leaq	(%rsi,%rax,4), %rax
 158 0092 48894424 		movq	%rax, 32(%rsp)
 158      20
 159              		.loc 1 1215 0 discriminator 3
 160 0097 48634A18 		movslq	24(%rdx), %rcx
 161 009b 48635214 		movslq	20(%rdx), %rdx
 162              	.LVL15:
 163 009f 4C8BACCE 		movq	160(%rsi,%rcx,8), %r13
 163      A0000000 
 164 00a7 4889C1   		movq	%rax, %rcx
 165              	.LVL16:
 166              	.LBB70:
 167              	.LBB67:
1130:fltk-1.3.4-1/jpeg/jchuff.c ****   if (temp < 0)
 168              		.loc 1 1130 0 discriminator 3
 169 00aa 410FBF00 		movswl	(%r8), %eax
 170              	.LVL17:
 171 00ae 2B4124   		subl	36(%rcx), %eax
 172              	.LBE67:
 173              	.LBE70:
 174              		.loc 1 1215 0 discriminator 3
 175 00b1 4C8BB4D6 		movq	128(%rsi,%rdx,8), %r14
 175      80000000 
 176              	.LVL18:
 177 00b9 99       		cltd
 178 00ba 31D0     		xorl	%edx, %eax
 179              	.LVL19:
 180              	.LBB71:
 181              	.LBB68:
1136:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits++;
 182              		.loc 1 1136 0 discriminator 3
 183 00bc 29D0     		subl	%edx, %eax
 184              	.LVL20:
 185 00be 0F848101 		je	.L27
 185      0000
1136:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits++;
 186              		.loc 1 1136 0 is_stmt 0
 187 00c4 31D2     		xorl	%edx, %edx
 188              	.LVL21:
 189 00c6 662E0F1F 		.p2align 4,,10
 189      84000000 
 189      0000
 190              		.p2align 3
 191              	.L12:
1137:fltk-1.3.4-1/jpeg/jchuff.c ****     temp >>= 1;
 192              		.loc 1 1137 0 is_stmt 1
 193 00d0 83C201   		addl	$1, %edx
 194              	.LVL22:
1136:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits++;
 195              		.loc 1 1136 0
 196 00d3 D1F8     		sarl	%eax
 197              	.LVL23:
 198 00d5 75F9     		jne	.L12
1143:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 199              		.loc 1 1143 0
 200 00d7 83FA0B   		cmpl	$11, %edx
 201 00da 0F8F3501 		jg	.L13
 201      0000
 202 00e0 4863C2   		movslq	%edx, %rax
 203              	.LVL24:
 204 00e3 48C1E003 		salq	$3, %rax
 205              	.LVL25:
 206              	.L11:
1147:fltk-1.3.4-1/jpeg/jchuff.c **** 
 207              		.loc 1 1147 0
 208 00e7 49830406 		addq	$1, (%r14,%rax)
 208      01
 209              	.LVL26:
 210 00ec 4983C704 		addq	$4, %r15
 211              	.LVL27:
1153:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = block[natural_order[k]]) == 0) {
 212              		.loc 1 1153 0
 213 00f0 4531F6   		xorl	%r14d, %r14d
 214              	.LVL28:
 215 00f3 85DB     		testl	%ebx, %ebx
 216 00f5 BA010000 		movl	$1, %edx
 216      00
 217 00fa 0F8E8A00 		jle	.L15
 217      0000
 218              	.LVL29:
 219              		.p2align 4,,10
 220              		.p2align 3
 221              	.L34:
1154:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 222              		.loc 1 1154 0
 223 0100 496307   		movslq	(%r15), %rax
 224 0103 410FBF04 		movswl	(%r8,%rax,2), %eax
 224      40
 225              	.LVL30:
 226 0108 85C0     		testl	%eax, %eax
 227 010a 0F84C000 		je	.L16
 227      0000
1158:fltk-1.3.4-1/jpeg/jchuff.c **** 	ac_counts[0xF0]++;
 228              		.loc 1 1158 0
 229 0110 4183FE0F 		cmpl	$15, %r14d
 230 0114 7E21     		jle	.L18
 231              	.LVL31:
 232 0116 4183EE10 		subl	$16, %r14d
 233              	.LVL32:
 234 011a 4D8B9D80 		movq	1920(%r13), %r11
 234      070000
 235 0121 4489F7   		movl	%r14d, %edi
 236 0124 4183E60F 		andl	$15, %r14d
 237              	.LVL33:
 238 0128 C1EF04   		shrl	$4, %edi
 239              	.LVL34:
 240 012b 498D7C3B 		leaq	1(%r11,%rdi), %rdi
 240      01
 241 0130 4989BD80 		movq	%rdi, 1920(%r13)
 241      070000
 242              	.L18:
 243 0137 89C7     		movl	%eax, %edi
1169:fltk-1.3.4-1/jpeg/jchuff.c **** 	nbits++;
 244              		.loc 1 1169 0
 245 0139 41BB0100 		movl	$1, %r11d
 245      0000
 246 013f C1FF1F   		sarl	$31, %edi
 247 0142 31F8     		xorl	%edi, %eax
 248              	.LVL35:
 249 0144 29F8     		subl	%edi, %eax
 250              	.LVL36:
 251 0146 D1F8     		sarl	%eax
 252              	.LVL37:
 253 0148 7418     		je	.L20
 254              	.LVL38:
 255 014a 660F1F44 		.p2align 4,,10
 255      0000
 256              		.p2align 3
 257              	.L21:
1170:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Check for out-of-range coefficient values */
 258              		.loc 1 1170 0
 259 0150 4183C301 		addl	$1, %r11d
 260              	.LVL39:
1169:fltk-1.3.4-1/jpeg/jchuff.c **** 	nbits++;
 261              		.loc 1 1169 0
 262 0154 D1F8     		sarl	%eax
 263              	.LVL40:
 264 0156 75F8     		jne	.L21
1172:fltk-1.3.4-1/jpeg/jchuff.c **** 	ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 265              		.loc 1 1172 0
 266 0158 4183FB0A 		cmpl	$10, %r11d
 267 015c 0F8F7E00 		jg	.L45
 267      0000
 268              	.LVL41:
 269              	.L20:
1176:fltk-1.3.4-1/jpeg/jchuff.c **** 
 270              		.loc 1 1176 0
 271 0162 41C1E604 		sall	$4, %r14d
 272 0166 4501F3   		addl	%r14d, %r11d
1178:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 273              		.loc 1 1178 0
 274 0169 4531F6   		xorl	%r14d, %r14d
1176:fltk-1.3.4-1/jpeg/jchuff.c **** 
 275              		.loc 1 1176 0
 276 016c 4D63DB   		movslq	%r11d, %r11
 277 016f 4B8344DD 		addq	$1, 0(%r13,%r11,8)
 277      0001
 278              	.LVL42:
 279              	.L19:
1153:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = block[natural_order[k]]) == 0) {
 280              		.loc 1 1153 0
 281 0175 83C201   		addl	$1, %edx
 282              	.LVL43:
 283 0178 4983C704 		addq	$4, %r15
 284 017c 39D3     		cmpl	%edx, %ebx
 285 017e 7D80     		jge	.L34
1183:fltk-1.3.4-1/jpeg/jchuff.c ****     ac_counts[0]++;
 286              		.loc 1 1183 0
 287 0180 4585F6   		testl	%r14d, %r14d
 288 0183 7405     		je	.L15
1184:fltk-1.3.4-1/jpeg/jchuff.c **** }
 289              		.loc 1 1184 0
 290 0185 49834500 		addq	$1, 0(%r13)
 290      01
 291              	.LVL44:
 292              	.L15:
 293              	.LBE68:
 294              	.LBE71:
1216:fltk-1.3.4-1/jpeg/jchuff.c **** 		    entropy->dc_count_ptrs[compptr->dc_tbl_no],
1217:fltk-1.3.4-1/jpeg/jchuff.c **** 		    entropy->ac_count_ptrs[compptr->ac_tbl_no]);
1218:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->saved.last_dc_val[ci] = MCU_data[blkn][0][0];
 295              		.loc 1 1218 0 discriminator 3
 296 018a 498B0424 		movq	(%r12), %rax
 297 018e 488B4C24 		movq	32(%rsp), %rcx
 297      20
 298 0193 4983C408 		addq	$8, %r12
1212:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
 299              		.loc 1 1212 0 discriminator 3
 300 0197 83442404 		addl	$1, 4(%rsp)
 300      01
 301              	.LVL45:
 302 019c 48834424 		addq	$4, 24(%rsp)
 302      1804
 303              		.loc 1 1218 0 discriminator 3
 304 01a2 0FBF00   		movswl	(%rax), %eax
 305 01a5 894124   		movl	%eax, 36(%rcx)
1212:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
 306              		.loc 1 1212 0 discriminator 3
 307 01a8 8B442404 		movl	4(%rsp), %eax
 308              	.LVL46:
 309 01ac 3985A001 		cmpl	%eax, 416(%rbp)
 309      0000
 310 01b2 0F8FB0FE 		jg	.L33
 310      FFFF
 311              	.LVL47:
 312              	.L42:
1219:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1220:fltk-1.3.4-1/jpeg/jchuff.c **** 
1221:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
1222:fltk-1.3.4-1/jpeg/jchuff.c **** }
 313              		.loc 1 1222 0
 314 01b8 4883C438 		addq	$56, %rsp
 315              		.cfi_remember_state
 316              		.cfi_def_cfa_offset 56
 317 01bc B8010000 		movl	$1, %eax
 317      00
 318 01c1 5B       		popq	%rbx
 319              		.cfi_def_cfa_offset 48
 320 01c2 5D       		popq	%rbp
 321              		.cfi_def_cfa_offset 40
 322              	.LVL48:
 323 01c3 415C     		popq	%r12
 324              		.cfi_def_cfa_offset 32
 325 01c5 415D     		popq	%r13
 326              		.cfi_def_cfa_offset 24
 327 01c7 415E     		popq	%r14
 328              		.cfi_def_cfa_offset 16
 329 01c9 415F     		popq	%r15
 330              		.cfi_def_cfa_offset 8
 331 01cb C3       		ret
 332              	.LVL49:
 333 01cc 0F1F4000 		.p2align 4,,10
 334              		.p2align 3
 335              	.L16:
 336              		.cfi_restore_state
 337              	.LBB72:
 338              	.LBB69:
1155:fltk-1.3.4-1/jpeg/jchuff.c ****     } else {
 339              		.loc 1 1155 0
 340 01d0 4183C601 		addl	$1, %r14d
 341              	.LVL50:
 342 01d4 EB9F     		jmp	.L19
 343              	.LVL51:
 344 01d6 662E0F1F 		.p2align 4,,10
 344      84000000 
 344      0000
 345              		.p2align 3
 346              	.L45:
1173:fltk-1.3.4-1/jpeg/jchuff.c **** 
 347              		.loc 1 1173 0
 348 01e0 488B4500 		movq	0(%rbp), %rax
 349              	.LVL52:
 350 01e4 89542414 		movl	%edx, 20(%rsp)
 351 01e8 4889EF   		movq	%rbp, %rdi
 352 01eb 44895C24 		movl	%r11d, 16(%rsp)
 352      10
 353 01f0 4C894424 		movq	%r8, 8(%rsp)
 353      08
 354 01f5 C7402806 		movl	$6, 40(%rax)
 354      000000
 355 01fc 488B4500 		movq	0(%rbp), %rax
 356 0200 FF10     		call	*(%rax)
 357              	.LVL53:
 358 0202 4C8B4424 		movq	8(%rsp), %r8
 358      08
 359 0207 448B5C24 		movl	16(%rsp), %r11d
 359      10
 360 020c 8B542414 		movl	20(%rsp), %edx
 361 0210 E94DFFFF 		jmp	.L20
 361      FF
 362              	.LVL54:
 363              	.L13:
1144:fltk-1.3.4-1/jpeg/jchuff.c **** 
 364              		.loc 1 1144 0
 365 0215 488B4500 		movq	0(%rbp), %rax
 366              	.LVL55:
 367 0219 4C894424 		movq	%r8, 8(%rsp)
 367      08
 368 021e 4889EF   		movq	%rbp, %rdi
 369 0221 89542410 		movl	%edx, 16(%rsp)
 370 0225 C7402806 		movl	$6, 40(%rax)
 370      000000
 371              	.LVL56:
 372 022c 488B4500 		movq	0(%rbp), %rax
 373 0230 FF10     		call	*(%rax)
 374              	.LVL57:
 375 0232 48634424 		movslq	16(%rsp), %rax
 375      10
 376 0237 4C8B4424 		movq	8(%rsp), %r8
 376      08
 377 023c 48C1E003 		salq	$3, %rax
 378 0240 E9A2FEFF 		jmp	.L11
 378      FF
 379              	.LVL58:
 380              	.L27:
1136:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits++;
 381              		.loc 1 1136 0
 382 0245 31C0     		xorl	%eax, %eax
 383              	.LVL59:
 384 0247 E99BFEFF 		jmp	.L11
 384      FF
 385              	.LVL60:
 386              	.L44:
 387              	.LBE69:
 388              	.LBE72:
1204:fltk-1.3.4-1/jpeg/jchuff.c **** 	entropy->saved.last_dc_val[ci] = 0;
 389              		.loc 1 1204 0 discriminator 1
 390 024c 8BBF7401 		movl	372(%rdi), %edi
 390      0000
 391              	.LVL61:
 392 0252 85FF     		testl	%edi, %edi
 393 0254 7E26     		jle	.L26
 394 0256 488D5124 		leaq	36(%rcx), %rdx
1204:fltk-1.3.4-1/jpeg/jchuff.c **** 	entropy->saved.last_dc_val[ci] = 0;
 395              		.loc 1 1204 0 is_stmt 0 discriminator 3
 396 025a 31C0     		xorl	%eax, %eax
 397              	.LVL62:
 398              	.L9:
1205:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Update restart state */
 399              		.loc 1 1205 0 is_stmt 1 discriminator 3
 400 025c C7020000 		movl	$0, (%rdx)
 400      0000
1204:fltk-1.3.4-1/jpeg/jchuff.c **** 	entropy->saved.last_dc_val[ci] = 0;
 401              		.loc 1 1204 0 discriminator 3
 402 0262 83C001   		addl	$1, %eax
 403              	.LVL63:
 404 0265 4883C204 		addq	$4, %rdx
 405 0269 39857401 		cmpl	%eax, 372(%rbp)
 405      0000
 406 026f 7FEB     		jg	.L9
 407 0271 8B853C01 		movl	316(%rbp), %eax
 407      0000
 408              	.LVL64:
 409 0277 E9B9FDFF 		jmp	.L7
 409      FF
 410              	.LVL65:
 411              	.L26:
1204:fltk-1.3.4-1/jpeg/jchuff.c **** 	entropy->saved.last_dc_val[ci] = 0;
 412              		.loc 1 1204 0 is_stmt 0
 413 027c 89D0     		movl	%edx, %eax
 414 027e E9B2FDFF 		jmp	.L7
 414      FF
 415              		.cfi_endproc
 416              	.LFE82:
 418              		.section	.text.unlikely.encode_mcu_gather
 419              	.LCOLDE1:
 420              		.section	.text.encode_mcu_gather
 421              	.LHOTE1:
 422              		.section	.text.unlikely.jpeg_make_c_derived_tbl,"ax",@progbits
 423              	.LCOLDB2:
 424              		.section	.text.jpeg_make_c_derived_tbl,"ax",@progbits
 425              	.LHOTB2:
 426              		.p2align 4,,15
 428              	jpeg_make_c_derived_tbl:
 429              	.LFB61:
 163:fltk-1.3.4-1/jpeg/jchuff.c ****   JHUFF_TBL *htbl;
 430              		.loc 1 163 0 is_stmt 1
 431              		.cfi_startproc
 432              	.LVL66:
 433 0000 4157     		pushq	%r15
 434              		.cfi_def_cfa_offset 16
 435              		.cfi_offset 15, -16
 436 0002 4156     		pushq	%r14
 437              		.cfi_def_cfa_offset 24
 438              		.cfi_offset 14, -24
 439 0004 4989FF   		movq	%rdi, %r15
 440 0007 4155     		pushq	%r13
 441              		.cfi_def_cfa_offset 32
 442              		.cfi_offset 13, -32
 443 0009 4154     		pushq	%r12
 444              		.cfi_def_cfa_offset 40
 445              		.cfi_offset 12, -40
 446 000b 4989CD   		movq	%rcx, %r13
 447 000e 55       		pushq	%rbp
 448              		.cfi_def_cfa_offset 48
 449              		.cfi_offset 6, -48
 450 000f 53       		pushq	%rbx
 451              		.cfi_def_cfa_offset 56
 452              		.cfi_offset 3, -56
 453 0010 4189D4   		movl	%edx, %r12d
 454 0013 4881EC48 		subq	$1352, %rsp
 454      050000
 455              		.cfi_def_cfa_offset 1408
 163:fltk-1.3.4-1/jpeg/jchuff.c ****   JHUFF_TBL *htbl;
 456              		.loc 1 163 0
 457 001a 64488B04 		movq	%fs:40, %rax
 457      25280000 
 457      00
 458 0023 48898424 		movq	%rax, 1336(%rsp)
 458      38050000 
 459 002b 31C0     		xorl	%eax, %eax
 176:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 460              		.loc 1 176 0
 461 002d 83FA03   		cmpl	$3, %edx
 163:fltk-1.3.4-1/jpeg/jchuff.c ****   JHUFF_TBL *htbl;
 462              		.loc 1 163 0
 463 0030 8974240C 		movl	%esi, 12(%rsp)
 176:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 464              		.loc 1 176 0
 465 0034 7615     		jbe	.L47
 177:fltk-1.3.4-1/jpeg/jchuff.c ****   htbl =
 466              		.loc 1 177 0
 467 0036 488B07   		movq	(%rdi), %rax
 468 0039 C7402834 		movl	$52, 40(%rax)
 468      000000
 469 0040 488B07   		movq	(%rdi), %rax
 470 0043 89502C   		movl	%edx, 44(%rax)
 471 0046 488B07   		movq	(%rdi), %rax
 472 0049 FF10     		call	*(%rax)
 473              	.LVL67:
 474              	.L47:
 179:fltk-1.3.4-1/jpeg/jchuff.c ****   if (htbl == NULL)
 475              		.loc 1 179 0
 476 004b 8B54240C 		movl	12(%rsp), %edx
 477 004f 4963C4   		movslq	%r12d, %rax
 478 0052 85D2     		testl	%edx, %edx
 479 0054 0F846C02 		je	.L48
 479      0000
 179:fltk-1.3.4-1/jpeg/jchuff.c ****   if (htbl == NULL)
 480              		.loc 1 179 0 is_stmt 0 discriminator 1
 481 005a 498B84C7 		movq	160(%r15,%rax,8), %rax
 481      A0000000 
 482 0062 48890424 		movq	%rax, (%rsp)
 483              	.LVL68:
 180:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 484              		.loc 1 180 0 is_stmt 1 discriminator 1
 485 0066 48833C24 		cmpq	$0, (%rsp)
 485      00
 486 006b 0F846C02 		je	.L93
 486      0000
 487              	.L50:
 184:fltk-1.3.4-1/jpeg/jchuff.c ****     *pdtbl = (c_derived_tbl *)
 488              		.loc 1 184 0
 489 0071 498B5D00 		movq	0(%r13), %rbx
 490 0075 4885DB   		testq	%rbx, %rbx
 491 0078 0F848502 		je	.L94
 491      0000
 492              	.LVL69:
 493              	.L51:
 494 007e 488B0424 		movq	(%rsp), %rax
 193:fltk-1.3.4-1/jpeg/jchuff.c ****     i = (int) htbl->bits[l];
 495              		.loc 1 193 0
 496 0082 41BD0100 		movl	$1, %r13d
 496      0000
 497              	.LVL70:
 192:fltk-1.3.4-1/jpeg/jchuff.c ****   for (l = 1; l <= 16; l++) {
 498              		.loc 1 192 0
 499 0088 4531C0   		xorl	%r8d, %r8d
 500 008b 4C8D7001 		leaq	1(%rax), %r14
 501              	.LVL71:
 502 008f 90       		.p2align 4,,10
 503              		.p2align 3
 504              	.L55:
 194:fltk-1.3.4-1/jpeg/jchuff.c ****     if (i < 0 || p + i > 256)	/* protect against table overrun */
 505              		.loc 1 194 0
 506 0090 450FB626 		movzbl	(%r14), %r12d
 507              	.LVL72:
 195:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 508              		.loc 1 195 0
 509 0094 438D0404 		leal	(%r12,%r8), %eax
 510 0098 3D000100 		cmpl	$256, %eax
 510      00
 511 009d 0F8FE500 		jg	.L95
 511      0000
 512              	.LVL73:
 513              	.L52:
 197:fltk-1.3.4-1/jpeg/jchuff.c ****       huffsize[p++] = (char) l;
 514              		.loc 1 197 0
 515 00a3 4585E4   		testl	%r12d, %r12d
 516 00a6 458D4C24 		leal	-1(%r12), %r9d
 516      FF
 517              	.LVL74:
 518 00ab 742A     		je	.L53
 519 00ad 438D0C20 		leal	(%r8,%r12), %ecx
 520 00b1 4489EF   		movl	%r13d, %edi
 521 00b4 4489C0   		movl	%r8d, %eax
 522              	.LVL75:
 523 00b7 660F1F84 		.p2align 4,,10
 523      00000000 
 523      00
 524              		.p2align 3
 525              	.L54:
 198:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 526              		.loc 1 198 0
 527 00c0 4863D0   		movslq	%eax, %rdx
 528 00c3 83C001   		addl	$1, %eax
 529              	.LVL76:
 197:fltk-1.3.4-1/jpeg/jchuff.c ****       huffsize[p++] = (char) l;
 530              		.loc 1 197 0
 531 00c6 39C1     		cmpl	%eax, %ecx
 198:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 532              		.loc 1 198 0
 533 00c8 4088BC14 		movb	%dil, 1072(%rsp,%rdx)
 533      30040000 
 534              	.LVL77:
 197:fltk-1.3.4-1/jpeg/jchuff.c ****       huffsize[p++] = (char) l;
 535              		.loc 1 197 0
 536 00d0 75EE     		jne	.L54
 537 00d2 478D4408 		leal	1(%r8,%r9), %r8d
 537      01
 538              	.L53:
 193:fltk-1.3.4-1/jpeg/jchuff.c ****     i = (int) htbl->bits[l];
 539              		.loc 1 193 0 discriminator 2
 540 00d7 4183C501 		addl	$1, %r13d
 541              	.LVL78:
 542 00db 4983C601 		addq	$1, %r14
 543 00df 4183FD11 		cmpl	$17, %r13d
 544 00e3 75AB     		jne	.L55
 200:fltk-1.3.4-1/jpeg/jchuff.c ****   lastp = p;
 545              		.loc 1 200 0
 546 00e5 4963C0   		movslq	%r8d, %rax
 547 00e8 C6840430 		movb	$0, 1072(%rsp,%rax)
 547      04000000 
 548              	.LVL79:
 207:fltk-1.3.4-1/jpeg/jchuff.c ****   p = 0;
 549              		.loc 1 207 0
 550 00f0 0FB68C24 		movzbl	1072(%rsp), %ecx
 550      30040000 
 209:fltk-1.3.4-1/jpeg/jchuff.c ****     while (((int) huffsize[p]) == si) {
 551              		.loc 1 209 0
 552 00f8 84C9     		testb	%cl, %cl
 207:fltk-1.3.4-1/jpeg/jchuff.c ****   p = 0;
 553              		.loc 1 207 0
 554 00fa 89CD     		movl	%ecx, %ebp
 555              	.LVL80:
 209:fltk-1.3.4-1/jpeg/jchuff.c ****     while (((int) huffsize[p]) == si) {
 556              		.loc 1 209 0
 557 00fc 0F84EC00 		je	.L56
 557      0000
 558 0102 4189CE   		movl	%ecx, %r14d
 559 0105 4531E4   		xorl	%r12d, %r12d
 560 0108 31C0     		xorl	%eax, %eax
 210:fltk-1.3.4-1/jpeg/jchuff.c ****       huffcode[p++] = code;
 561              		.loc 1 210 0
 562 010a 4139CE   		cmpl	%ecx, %r14d
 209:fltk-1.3.4-1/jpeg/jchuff.c ****     while (((int) huffsize[p]) == si) {
 563              		.loc 1 209 0
 564 010d 89CA     		movl	%ecx, %edx
 217:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 565              		.loc 1 217 0
 566 010f 41BA0100 		movl	$1, %r10d
 566      0000
 567              	.LVL81:
 210:fltk-1.3.4-1/jpeg/jchuff.c ****       huffcode[p++] = code;
 568              		.loc 1 210 0
 569 0115 7551     		jne	.L96
 570              	.LVL82:
 571 0117 660F1F84 		.p2align 4,,10
 571      00000000 
 571      00
 572              		.p2align 3
 573              	.L82:
 211:fltk-1.3.4-1/jpeg/jchuff.c ****       code++;
 574              		.loc 1 211 0
 575 0120 448D6801 		leal	1(%rax), %r13d
 576              	.LVL83:
 577 0124 44896484 		movl	%r12d, 32(%rsp,%rax,4)
 577      20
 212:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 578              		.loc 1 212 0
 579 0129 4183C401 		addl	$1, %r12d
 580              	.LVL84:
 210:fltk-1.3.4-1/jpeg/jchuff.c ****       huffcode[p++] = code;
 581              		.loc 1 210 0
 582 012d 4963C5   		movslq	%r13d, %rax
 583 0130 440FB6B4 		movzbl	1072(%rsp,%rax), %r14d
 583      04300400 
 583      00
 211:fltk-1.3.4-1/jpeg/jchuff.c ****       code++;
 584              		.loc 1 211 0
 585 0139 4963C5   		movslq	%r13d, %rax
 210:fltk-1.3.4-1/jpeg/jchuff.c ****       huffcode[p++] = code;
 586              		.loc 1 210 0
 587 013c 4139CE   		cmpl	%ecx, %r14d
 588 013f 4489F2   		movl	%r14d, %edx
 589 0142 74DC     		je	.L82
 217:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 590              		.loc 1 217 0
 591 0144 4C89D7   		movq	%r10, %rdi
 592 0147 4489E0   		movl	%r12d, %eax
 593 014a 48D3E7   		salq	%cl, %rdi
 594 014d 4839F8   		cmpq	%rdi, %rax
 595 0150 7D57     		jge	.L68
 219:fltk-1.3.4-1/jpeg/jchuff.c ****     si++;
 596              		.loc 1 219 0
 597 0152 4501E4   		addl	%r12d, %r12d
 598              	.LVL85:
 220:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 599              		.loc 1 220 0
 600 0155 83C101   		addl	$1, %ecx
 601              	.LVL86:
 209:fltk-1.3.4-1/jpeg/jchuff.c ****     while (((int) huffsize[p]) == si) {
 602              		.loc 1 209 0
 603 0158 84D2     		testb	%dl, %dl
 604 015a 0F848E00 		je	.L56
 604      0000
 605              	.LVL87:
 606              	.L67:
 210:fltk-1.3.4-1/jpeg/jchuff.c ****       huffcode[p++] = code;
 607              		.loc 1 210 0
 608 0160 4139CE   		cmpl	%ecx, %r14d
 220:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 609              		.loc 1 220 0
 610 0163 4963C5   		movslq	%r13d, %rax
 611              	.LVL88:
 210:fltk-1.3.4-1/jpeg/jchuff.c ****       huffcode[p++] = code;
 612              		.loc 1 210 0
 613 0166 74B8     		je	.L82
 614              	.LVL89:
 615              	.L96:
 217:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 616              		.loc 1 217 0
 617 0168 4C89D7   		movq	%r10, %rdi
 210:fltk-1.3.4-1/jpeg/jchuff.c ****       huffcode[p++] = code;
 618              		.loc 1 210 0
 619 016b 4189C5   		movl	%eax, %r13d
 217:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 620              		.loc 1 217 0
 621 016e 4489E0   		movl	%r12d, %eax
 622 0171 48D3E7   		salq	%cl, %rdi
 623 0174 4839F8   		cmpq	%rdi, %rax
 624 0177 7D30     		jge	.L68
 219:fltk-1.3.4-1/jpeg/jchuff.c ****     si++;
 625              		.loc 1 219 0
 626 0179 4501E4   		addl	%r12d, %r12d
 627              	.LVL90:
 220:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 628              		.loc 1 220 0
 629 017c 83C101   		addl	$1, %ecx
 630              	.LVL91:
 631 017f EBDF     		jmp	.L67
 632              	.LVL92:
 633              		.p2align 4,,10
 634 0181 0F1F8000 		.p2align 3
 634      000000
 635              	.L95:
 196:fltk-1.3.4-1/jpeg/jchuff.c ****     while (i--)
 636              		.loc 1 196 0
 637 0188 498B07   		movq	(%r15), %rax
 638 018b 44894424 		movl	%r8d, 8(%rsp)
 638      08
 639 0190 4C89FF   		movq	%r15, %rdi
 640 0193 C7402809 		movl	$9, 40(%rax)
 640      000000
 641 019a 498B07   		movq	(%r15), %rax
 642 019d FF10     		call	*(%rax)
 643              	.LVL93:
 644 019f 448B4424 		movl	8(%rsp), %r8d
 644      08
 645 01a4 E9FAFEFF 		jmp	.L52
 645      FF
 646              	.LVL94:
 647              	.L68:
 218:fltk-1.3.4-1/jpeg/jchuff.c ****     code <<= 1;
 648              		.loc 1 218 0
 649 01a9 498B07   		movq	(%r15), %rax
 650 01ac 4C895424 		movq	%r10, 24(%rsp)
 650      18
 651 01b1 4C89FF   		movq	%r15, %rdi
 652 01b4 88542417 		movb	%dl, 23(%rsp)
 653 01b8 44894424 		movl	%r8d, 16(%rsp)
 653      10
 219:fltk-1.3.4-1/jpeg/jchuff.c ****     si++;
 654              		.loc 1 219 0
 655 01bd 4501E4   		addl	%r12d, %r12d
 656              	.LVL95:
 657 01c0 894C2408 		movl	%ecx, 8(%rsp)
 218:fltk-1.3.4-1/jpeg/jchuff.c ****     code <<= 1;
 658              		.loc 1 218 0
 659 01c4 C7402809 		movl	$9, 40(%rax)
 659      000000
 660 01cb 498B07   		movq	(%r15), %rax
 661 01ce FF10     		call	*(%rax)
 662              	.LVL96:
 663 01d0 0FB65424 		movzbl	23(%rsp), %edx
 663      17
 664 01d5 8B4C2408 		movl	8(%rsp), %ecx
 665 01d9 4C8B5424 		movq	24(%rsp), %r10
 665      18
 666 01de 448B4424 		movl	16(%rsp), %r8d
 666      10
 220:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 667              		.loc 1 220 0
 668 01e3 83C101   		addl	$1, %ecx
 669              	.LVL97:
 209:fltk-1.3.4-1/jpeg/jchuff.c ****     while (((int) huffsize[p]) == si) {
 670              		.loc 1 209 0
 671 01e6 84D2     		testb	%dl, %dl
 672 01e8 0F8572FF 		jne	.L67
 672      FFFF
 673              	.LVL98:
 674              	.L56:
 675              	.LBB73:
 676              	.LBB74:
 677              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string3.h"
   1:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* Copyright (C) 2004-2016 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string3.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string3.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string3.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string3.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string3.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string3.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string3.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string3.h ****    <http://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef _STRING_H
  19:/usr/include/x86_64-linux-gnu/bits/string3.h **** # error "Never use <bits/string3.h> directly; include <string.h> instead."
  20:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  21:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  22:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  23:/usr/include/x86_64-linux-gnu/bits/string3.h **** __warndecl (__warn_memset_zero_len,
  24:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  25:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  26:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  27:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef __cplusplus
  28:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* XXX This is temporarily.  We should not redefine any of the symbols
  29:/usr/include/x86_64-linux-gnu/bits/string3.h ****    and instead integrate the error checking into the original
  30:/usr/include/x86_64-linux-gnu/bits/string3.h ****    definitions.  */
  31:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memcpy
  32:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memmove
  33:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memset
  34:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcat
  35:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcpy
  36:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncat
  37:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncpy
  38:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_GNU
  39:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef mempcpy
  40:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef stpcpy
  41:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  42:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_MISC
  43:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bcopy
  44:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bzero
  45:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  46:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  47:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  48:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  49:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  50:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  51:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	       size_t __len))
  52:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  53:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  54:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  55:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  56:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  57:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memmove (void *__dest, const void *__src, size_t __len))
  58:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  59:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  60:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  61:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  62:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifdef __USE_GNU
  63:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  64:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
  65:/usr/include/x86_64-linux-gnu/bits/string3.h **** 		size_t __len))
  66:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  67:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
  68:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  69:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  70:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  71:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  72:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* The first two tests here help to catch a somewhat common problem
  73:/usr/include/x86_64-linux-gnu/bits/string3.h ****    where the second and third parameter are transposed.  This is
  74:/usr/include/x86_64-linux-gnu/bits/string3.h ****    especially problematic if the intended fill value is zero.  In this
  75:/usr/include/x86_64-linux-gnu/bits/string3.h ****    case no work is done at all.  We detect these problems by referring
  76:/usr/include/x86_64-linux-gnu/bits/string3.h ****    non-existing functions.  */
  77:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  78:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memset (void *__dest, int __ch, size_t __len))
  79:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  80:/usr/include/x86_64-linux-gnu/bits/string3.h ****   /* GCC-5.0 and newer implements these checks in the compiler, so we don't
  81:/usr/include/x86_64-linux-gnu/bits/string3.h ****      need them here.  */
  82:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  83:/usr/include/x86_64-linux-gnu/bits/string3.h ****   if (__builtin_constant_p (__len) && __len == 0
  84:/usr/include/x86_64-linux-gnu/bits/string3.h ****       && (!__builtin_constant_p (__ch) || __ch != 0))
  85:/usr/include/x86_64-linux-gnu/bits/string3.h ****     {
  86:/usr/include/x86_64-linux-gnu/bits/string3.h ****       __warn_memset_zero_len ();
  87:/usr/include/x86_64-linux-gnu/bits/string3.h ****       return __dest;
  88:/usr/include/x86_64-linux-gnu/bits/string3.h ****     }
  89:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  90:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 678              		.loc 2 90 0
 679 01ee 488DBB08 		leaq	1032(%rbx), %rdi
 679      040000
 680 01f5 89D8     		movl	%ebx, %eax
 681 01f7 48C78300 		movq	$0, 1024(%rbx)
 681      04000000 
 681      000000
 682              	.LVL99:
 683 0202 48C783F8 		movq	$0, 1272(%rbx)
 683      04000000 
 683      000000
 684 020d 4883E7F8 		andq	$-8, %rdi
 685 0211 29F8     		subl	%edi, %eax
 686 0213 8D880005 		leal	1280(%rax), %ecx
 686      0000
 687              	.LVL100:
 688 0219 31C0     		xorl	%eax, %eax
 689 021b C1E903   		shrl	$3, %ecx
 690 021e F348AB   		rep stosq
 691              	.LVL101:
 692              	.LBE74:
 693              	.LBE73:
 237:fltk-1.3.4-1/jpeg/jchuff.c **** 
 694              		.loc 1 237 0
 695 0221 837C240C 		cmpl	$1, 12(%rsp)
 695      01
 696 0226 19C0     		sbbl	%eax, %eax
 697 0228 25F00000 		andl	$240, %eax
 697      00
 698 022d 83C00F   		addl	$15, %eax
 239:fltk-1.3.4-1/jpeg/jchuff.c ****     i = htbl->huffval[p];
 699              		.loc 1 239 0
 700 0230 4585C0   		testl	%r8d, %r8d
 237:fltk-1.3.4-1/jpeg/jchuff.c **** 
 701              		.loc 1 237 0
 702 0233 89442408 		movl	%eax, 8(%rsp)
 703              	.LVL102:
 239:fltk-1.3.4-1/jpeg/jchuff.c ****     i = htbl->huffval[p];
 704              		.loc 1 239 0
 705 0237 7468     		je	.L46
 706 0239 458D60FF 		leal	-1(%r8), %r12d
 707 023d 4531F6   		xorl	%r14d, %r14d
 708 0240 4983C401 		addq	$1, %r12
 709 0244 EB13     		jmp	.L64
 710              	.LVL103:
 711 0246 662E0F1F 		.p2align 4,,10
 711      84000000 
 711      0000
 712              		.p2align 3
 713              	.L97:
 714 0250 420FB6AC 		movzbl	1072(%rsp,%r14), %ebp
 714      34300400 
 714      00
 715              	.LVL104:
 716              	.L64:
 240:fltk-1.3.4-1/jpeg/jchuff.c ****     if (i < 0 || i > maxsymbol || dtbl->ehufsi[i])
 717              		.loc 1 240 0
 718 0259 488B0424 		movq	(%rsp), %rax
 719 025d 460FB66C 		movzbl	17(%rax,%r14), %r13d
 719      3011
 720              	.LVL105:
 241:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 721              		.loc 1 241 0
 722 0263 44396C24 		cmpl	%r13d, 8(%rsp)
 722      08
 723 0268 7C0B     		jl	.L65
 241:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 724              		.loc 1 241 0 is_stmt 0 discriminator 1
 725 026a 4280BC2B 		cmpb	$0, 1024(%rbx,%r13)
 725      00040000 
 725      00
 726 0273 7412     		je	.L66
 727              	.L65:
 242:fltk-1.3.4-1/jpeg/jchuff.c ****     dtbl->ehufco[i] = huffcode[p];
 728              		.loc 1 242 0 is_stmt 1
 729 0275 498B07   		movq	(%r15), %rax
 730 0278 4C89FF   		movq	%r15, %rdi
 731 027b C7402809 		movl	$9, 40(%rax)
 731      000000
 732 0282 498B07   		movq	(%r15), %rax
 733 0285 FF10     		call	*(%rax)
 734              	.LVL106:
 735              	.L66:
 243:fltk-1.3.4-1/jpeg/jchuff.c ****     dtbl->ehufsi[i] = huffsize[p];
 736              		.loc 1 243 0 discriminator 2
 737 0287 428B44B4 		movl	32(%rsp,%r14,4), %eax
 737      20
 738 028c 4983C601 		addq	$1, %r14
 739              	.LVL107:
 239:fltk-1.3.4-1/jpeg/jchuff.c ****     i = htbl->huffval[p];
 740              		.loc 1 239 0 discriminator 2
 741 0290 4D39E6   		cmpq	%r12, %r14
 243:fltk-1.3.4-1/jpeg/jchuff.c ****     dtbl->ehufsi[i] = huffsize[p];
 742              		.loc 1 243 0 discriminator 2
 743 0293 428904AB 		movl	%eax, (%rbx,%r13,4)
 244:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 744              		.loc 1 244 0 discriminator 2
 745 0297 4288AC2B 		movb	%bpl, 1024(%rbx,%r13)
 745      00040000 
 239:fltk-1.3.4-1/jpeg/jchuff.c ****     i = htbl->huffval[p];
 746              		.loc 1 239 0 discriminator 2
 747 029f 75AF     		jne	.L97
 748              	.LVL108:
 749              	.L46:
 246:fltk-1.3.4-1/jpeg/jchuff.c **** 
 750              		.loc 1 246 0
 751 02a1 488B8424 		movq	1336(%rsp), %rax
 751      38050000 
 752 02a9 64483304 		xorq	%fs:40, %rax
 752      25280000 
 752      00
 753 02b2 756E     		jne	.L98
 754 02b4 4881C448 		addq	$1352, %rsp
 754      050000
 755              		.cfi_remember_state
 756              		.cfi_def_cfa_offset 56
 757              	.LVL109:
 758 02bb 5B       		popq	%rbx
 759              		.cfi_def_cfa_offset 48
 760 02bc 5D       		popq	%rbp
 761              		.cfi_def_cfa_offset 40
 762 02bd 415C     		popq	%r12
 763              		.cfi_def_cfa_offset 32
 764 02bf 415D     		popq	%r13
 765              		.cfi_def_cfa_offset 24
 766 02c1 415E     		popq	%r14
 767              		.cfi_def_cfa_offset 16
 768 02c3 415F     		popq	%r15
 769              		.cfi_def_cfa_offset 8
 770              	.LVL110:
 771 02c5 C3       		ret
 772              	.LVL111:
 773              	.L48:
 774              		.cfi_restore_state
 179:fltk-1.3.4-1/jpeg/jchuff.c ****   if (htbl == NULL)
 775              		.loc 1 179 0 discriminator 2
 776 02c6 498B84C7 		movq	192(%r15,%rax,8), %rax
 776      C0000000 
 777 02ce 48890424 		movq	%rax, (%rsp)
 778              	.LVL112:
 180:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 779              		.loc 1 180 0 discriminator 2
 780 02d2 48833C24 		cmpq	$0, (%rsp)
 780      00
 781 02d7 0F8594FD 		jne	.L50
 781      FFFF
 782              	.L93:
 181:fltk-1.3.4-1/jpeg/jchuff.c **** 
 783              		.loc 1 181 0
 784 02dd 498B07   		movq	(%r15), %rax
 785              	.LVL113:
 786 02e0 4C89FF   		movq	%r15, %rdi
 787 02e3 C7402834 		movl	$52, 40(%rax)
 787      000000
 788 02ea 498B07   		movq	(%r15), %rax
 789 02ed 4489602C 		movl	%r12d, 44(%rax)
 790 02f1 498B07   		movq	(%r15), %rax
 791 02f4 FF10     		call	*(%rax)
 792              	.LVL114:
 184:fltk-1.3.4-1/jpeg/jchuff.c ****     *pdtbl = (c_derived_tbl *)
 793              		.loc 1 184 0
 794 02f6 498B5D00 		movq	0(%r13), %rbx
 795 02fa 4885DB   		testq	%rbx, %rbx
 796 02fd 0F857BFD 		jne	.L51
 796      FFFF
 797              	.L94:
 186:fltk-1.3.4-1/jpeg/jchuff.c **** 				  SIZEOF(c_derived_tbl));
 798              		.loc 1 186 0
 799 0303 498B4708 		movq	8(%r15), %rax
 800 0307 BA000500 		movl	$1280, %edx
 800      00
 801 030c BE010000 		movl	$1, %esi
 801      00
 802 0311 4C89FF   		movq	%r15, %rdi
 803 0314 FF10     		call	*(%rax)
 804              	.LVL115:
 185:fltk-1.3.4-1/jpeg/jchuff.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 805              		.loc 1 185 0
 806 0316 49894500 		movq	%rax, 0(%r13)
 807 031a 4889C3   		movq	%rax, %rbx
 808 031d E95CFDFF 		jmp	.L51
 808      FF
 809              	.LVL116:
 810              	.L98:
 246:fltk-1.3.4-1/jpeg/jchuff.c **** 
 811              		.loc 1 246 0
 812 0322 E8000000 		call	__stack_chk_fail
 812      00
 813              	.LVL117:
 814              		.cfi_endproc
 815              	.LFE61:
 817              		.section	.text.unlikely.jpeg_make_c_derived_tbl
 818              	.LCOLDE2:
 819              		.section	.text.jpeg_make_c_derived_tbl
 820              	.LHOTE2:
 821              		.section	.text.unlikely.start_pass_huff,"ax",@progbits
 822              	.LCOLDB3:
 823              		.section	.text.start_pass_huff,"ax",@progbits
 824              	.LHOTB3:
 825              		.p2align 4,,15
 827              	start_pass_huff:
 828              	.LFB85:
1223:fltk-1.3.4-1/jpeg/jchuff.c **** 
1224:fltk-1.3.4-1/jpeg/jchuff.c **** 
1225:fltk-1.3.4-1/jpeg/jchuff.c **** /*
1226:fltk-1.3.4-1/jpeg/jchuff.c ****  * Generate the best Huffman code table for the given counts, fill htbl.
1227:fltk-1.3.4-1/jpeg/jchuff.c ****  *
1228:fltk-1.3.4-1/jpeg/jchuff.c ****  * The JPEG standard requires that no symbol be assigned a codeword of all
1229:fltk-1.3.4-1/jpeg/jchuff.c ****  * one bits (so that padding bits added at the end of a compressed segment
1230:fltk-1.3.4-1/jpeg/jchuff.c ****  * can't look like a valid code).  Because of the canonical ordering of
1231:fltk-1.3.4-1/jpeg/jchuff.c ****  * codewords, this just means that there must be an unused slot in the
1232:fltk-1.3.4-1/jpeg/jchuff.c ****  * longest codeword length category.  Section K.2 of the JPEG spec suggests
1233:fltk-1.3.4-1/jpeg/jchuff.c ****  * reserving such a slot by pretending that symbol 256 is a valid symbol
1234:fltk-1.3.4-1/jpeg/jchuff.c ****  * with count 1.  In theory that's not optimal; giving it count zero but
1235:fltk-1.3.4-1/jpeg/jchuff.c ****  * including it in the symbol set anyway should give a better Huffman code.
1236:fltk-1.3.4-1/jpeg/jchuff.c ****  * But the theoretically better code actually seems to come out worse in
1237:fltk-1.3.4-1/jpeg/jchuff.c ****  * practice, because it produces more all-ones bytes (which incur stuffed
1238:fltk-1.3.4-1/jpeg/jchuff.c ****  * zero bytes in the final file).  In any case the difference is tiny.
1239:fltk-1.3.4-1/jpeg/jchuff.c ****  *
1240:fltk-1.3.4-1/jpeg/jchuff.c ****  * The JPEG standard requires Huffman codes to be no more than 16 bits long.
1241:fltk-1.3.4-1/jpeg/jchuff.c ****  * If some symbols have a very small but nonzero probability, the Huffman tree
1242:fltk-1.3.4-1/jpeg/jchuff.c ****  * must be adjusted to meet the code length restriction.  We currently use
1243:fltk-1.3.4-1/jpeg/jchuff.c ****  * the adjustment method suggested in JPEG section K.2.  This method is *not*
1244:fltk-1.3.4-1/jpeg/jchuff.c ****  * optimal; it may not choose the best possible limited-length code.  But
1245:fltk-1.3.4-1/jpeg/jchuff.c ****  * typically only very-low-frequency symbols will be given less-than-optimal
1246:fltk-1.3.4-1/jpeg/jchuff.c ****  * lengths, so the code is almost optimal.  Experimental comparisons against
1247:fltk-1.3.4-1/jpeg/jchuff.c ****  * an optimal limited-length-code algorithm indicate that the difference is
1248:fltk-1.3.4-1/jpeg/jchuff.c ****  * microscopic --- usually less than a hundredth of a percent of total size.
1249:fltk-1.3.4-1/jpeg/jchuff.c ****  * So the extra complexity of an optimal algorithm doesn't seem worthwhile.
1250:fltk-1.3.4-1/jpeg/jchuff.c ****  */
1251:fltk-1.3.4-1/jpeg/jchuff.c **** 
1252:fltk-1.3.4-1/jpeg/jchuff.c **** LOCAL(void)
1253:fltk-1.3.4-1/jpeg/jchuff.c **** jpeg_gen_optimal_table (j_compress_ptr cinfo, JHUFF_TBL * htbl, long freq[])
1254:fltk-1.3.4-1/jpeg/jchuff.c **** {
1255:fltk-1.3.4-1/jpeg/jchuff.c **** #define MAX_CLEN 32		/* assumed maximum initial code length */
1256:fltk-1.3.4-1/jpeg/jchuff.c ****   UINT8 bits[MAX_CLEN+1];	/* bits[k] = # of symbols with code length k */
1257:fltk-1.3.4-1/jpeg/jchuff.c ****   int codesize[257];		/* codesize[k] = code length of symbol k */
1258:fltk-1.3.4-1/jpeg/jchuff.c ****   int others[257];		/* next symbol in current branch of tree */
1259:fltk-1.3.4-1/jpeg/jchuff.c ****   int c1, c2;
1260:fltk-1.3.4-1/jpeg/jchuff.c ****   int p, i, j;
1261:fltk-1.3.4-1/jpeg/jchuff.c ****   long v;
1262:fltk-1.3.4-1/jpeg/jchuff.c **** 
1263:fltk-1.3.4-1/jpeg/jchuff.c ****   /* This algorithm is explained in section K.2 of the JPEG standard */
1264:fltk-1.3.4-1/jpeg/jchuff.c **** 
1265:fltk-1.3.4-1/jpeg/jchuff.c ****   MEMZERO(bits, SIZEOF(bits));
1266:fltk-1.3.4-1/jpeg/jchuff.c ****   MEMZERO(codesize, SIZEOF(codesize));
1267:fltk-1.3.4-1/jpeg/jchuff.c ****   for (i = 0; i < 257; i++)
1268:fltk-1.3.4-1/jpeg/jchuff.c ****     others[i] = -1;		/* init links to empty */
1269:fltk-1.3.4-1/jpeg/jchuff.c ****   
1270:fltk-1.3.4-1/jpeg/jchuff.c ****   freq[256] = 1;		/* make sure 256 has a nonzero count */
1271:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Including the pseudo-symbol 256 in the Huffman procedure guarantees
1272:fltk-1.3.4-1/jpeg/jchuff.c ****    * that no real symbol is given code-value of all ones, because 256
1273:fltk-1.3.4-1/jpeg/jchuff.c ****    * will be placed last in the largest codeword category.
1274:fltk-1.3.4-1/jpeg/jchuff.c ****    */
1275:fltk-1.3.4-1/jpeg/jchuff.c **** 
1276:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Huffman's basic algorithm to assign optimal code lengths to symbols */
1277:fltk-1.3.4-1/jpeg/jchuff.c **** 
1278:fltk-1.3.4-1/jpeg/jchuff.c ****   for (;;) {
1279:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Find the smallest nonzero frequency, set c1 = its symbol */
1280:fltk-1.3.4-1/jpeg/jchuff.c ****     /* In case of ties, take the larger symbol number */
1281:fltk-1.3.4-1/jpeg/jchuff.c ****     c1 = -1;
1282:fltk-1.3.4-1/jpeg/jchuff.c ****     v = 1000000000L;
1283:fltk-1.3.4-1/jpeg/jchuff.c ****     for (i = 0; i <= 256; i++) {
1284:fltk-1.3.4-1/jpeg/jchuff.c ****       if (freq[i] && freq[i] <= v) {
1285:fltk-1.3.4-1/jpeg/jchuff.c **** 	v = freq[i];
1286:fltk-1.3.4-1/jpeg/jchuff.c **** 	c1 = i;
1287:fltk-1.3.4-1/jpeg/jchuff.c ****       }
1288:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1289:fltk-1.3.4-1/jpeg/jchuff.c **** 
1290:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Find the next smallest nonzero frequency, set c2 = its symbol */
1291:fltk-1.3.4-1/jpeg/jchuff.c ****     /* In case of ties, take the larger symbol number */
1292:fltk-1.3.4-1/jpeg/jchuff.c ****     c2 = -1;
1293:fltk-1.3.4-1/jpeg/jchuff.c ****     v = 1000000000L;
1294:fltk-1.3.4-1/jpeg/jchuff.c ****     for (i = 0; i <= 256; i++) {
1295:fltk-1.3.4-1/jpeg/jchuff.c ****       if (freq[i] && freq[i] <= v && i != c1) {
1296:fltk-1.3.4-1/jpeg/jchuff.c **** 	v = freq[i];
1297:fltk-1.3.4-1/jpeg/jchuff.c **** 	c2 = i;
1298:fltk-1.3.4-1/jpeg/jchuff.c ****       }
1299:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1300:fltk-1.3.4-1/jpeg/jchuff.c **** 
1301:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Done if we've merged everything into one frequency */
1302:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c2 < 0)
1303:fltk-1.3.4-1/jpeg/jchuff.c ****       break;
1304:fltk-1.3.4-1/jpeg/jchuff.c ****     
1305:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Else merge the two counts/trees */
1306:fltk-1.3.4-1/jpeg/jchuff.c ****     freq[c1] += freq[c2];
1307:fltk-1.3.4-1/jpeg/jchuff.c ****     freq[c2] = 0;
1308:fltk-1.3.4-1/jpeg/jchuff.c **** 
1309:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Increment the codesize of everything in c1's tree branch */
1310:fltk-1.3.4-1/jpeg/jchuff.c ****     codesize[c1]++;
1311:fltk-1.3.4-1/jpeg/jchuff.c ****     while (others[c1] >= 0) {
1312:fltk-1.3.4-1/jpeg/jchuff.c ****       c1 = others[c1];
1313:fltk-1.3.4-1/jpeg/jchuff.c ****       codesize[c1]++;
1314:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1315:fltk-1.3.4-1/jpeg/jchuff.c ****     
1316:fltk-1.3.4-1/jpeg/jchuff.c ****     others[c1] = c2;		/* chain c2 onto c1's tree branch */
1317:fltk-1.3.4-1/jpeg/jchuff.c ****     
1318:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Increment the codesize of everything in c2's tree branch */
1319:fltk-1.3.4-1/jpeg/jchuff.c ****     codesize[c2]++;
1320:fltk-1.3.4-1/jpeg/jchuff.c ****     while (others[c2] >= 0) {
1321:fltk-1.3.4-1/jpeg/jchuff.c ****       c2 = others[c2];
1322:fltk-1.3.4-1/jpeg/jchuff.c ****       codesize[c2]++;
1323:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1324:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1325:fltk-1.3.4-1/jpeg/jchuff.c **** 
1326:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Now count the number of symbols of each code length */
1327:fltk-1.3.4-1/jpeg/jchuff.c ****   for (i = 0; i <= 256; i++) {
1328:fltk-1.3.4-1/jpeg/jchuff.c ****     if (codesize[i]) {
1329:fltk-1.3.4-1/jpeg/jchuff.c ****       /* The JPEG standard seems to think that this can't happen, */
1330:fltk-1.3.4-1/jpeg/jchuff.c ****       /* but I'm paranoid... */
1331:fltk-1.3.4-1/jpeg/jchuff.c ****       if (codesize[i] > MAX_CLEN)
1332:fltk-1.3.4-1/jpeg/jchuff.c **** 	ERREXIT(cinfo, JERR_HUFF_CLEN_OVERFLOW);
1333:fltk-1.3.4-1/jpeg/jchuff.c **** 
1334:fltk-1.3.4-1/jpeg/jchuff.c ****       bits[codesize[i]]++;
1335:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1336:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1337:fltk-1.3.4-1/jpeg/jchuff.c **** 
1338:fltk-1.3.4-1/jpeg/jchuff.c ****   /* JPEG doesn't allow symbols with code lengths over 16 bits, so if the pure
1339:fltk-1.3.4-1/jpeg/jchuff.c ****    * Huffman procedure assigned any such lengths, we must adjust the coding.
1340:fltk-1.3.4-1/jpeg/jchuff.c ****    * Here is what the JPEG spec says about how this next bit works:
1341:fltk-1.3.4-1/jpeg/jchuff.c ****    * Since symbols are paired for the longest Huffman code, the symbols are
1342:fltk-1.3.4-1/jpeg/jchuff.c ****    * removed from this length category two at a time.  The prefix for the pair
1343:fltk-1.3.4-1/jpeg/jchuff.c ****    * (which is one bit shorter) is allocated to one of the pair; then,
1344:fltk-1.3.4-1/jpeg/jchuff.c ****    * skipping the BITS entry for that prefix length, a code word from the next
1345:fltk-1.3.4-1/jpeg/jchuff.c ****    * shortest nonzero BITS entry is converted into a prefix for two code words
1346:fltk-1.3.4-1/jpeg/jchuff.c ****    * one bit longer.
1347:fltk-1.3.4-1/jpeg/jchuff.c ****    */
1348:fltk-1.3.4-1/jpeg/jchuff.c ****   
1349:fltk-1.3.4-1/jpeg/jchuff.c ****   for (i = MAX_CLEN; i > 16; i--) {
1350:fltk-1.3.4-1/jpeg/jchuff.c ****     while (bits[i] > 0) {
1351:fltk-1.3.4-1/jpeg/jchuff.c ****       j = i - 2;		/* find length of new prefix to be used */
1352:fltk-1.3.4-1/jpeg/jchuff.c ****       while (bits[j] == 0)
1353:fltk-1.3.4-1/jpeg/jchuff.c **** 	j--;
1354:fltk-1.3.4-1/jpeg/jchuff.c ****       
1355:fltk-1.3.4-1/jpeg/jchuff.c ****       bits[i] -= 2;		/* remove two symbols */
1356:fltk-1.3.4-1/jpeg/jchuff.c ****       bits[i-1]++;		/* one goes in this length */
1357:fltk-1.3.4-1/jpeg/jchuff.c ****       bits[j+1] += 2;		/* two new symbols in this length */
1358:fltk-1.3.4-1/jpeg/jchuff.c ****       bits[j]--;		/* symbol of this length is now a prefix */
1359:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1360:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1361:fltk-1.3.4-1/jpeg/jchuff.c **** 
1362:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Remove the count for the pseudo-symbol 256 from the largest codelength */
1363:fltk-1.3.4-1/jpeg/jchuff.c ****   while (bits[i] == 0)		/* find largest codelength still in use */
1364:fltk-1.3.4-1/jpeg/jchuff.c ****     i--;
1365:fltk-1.3.4-1/jpeg/jchuff.c ****   bits[i]--;
1366:fltk-1.3.4-1/jpeg/jchuff.c ****   
1367:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Return final symbol counts (only for lengths 0..16) */
1368:fltk-1.3.4-1/jpeg/jchuff.c ****   MEMCOPY(htbl->bits, bits, SIZEOF(htbl->bits));
1369:fltk-1.3.4-1/jpeg/jchuff.c ****   
1370:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Return a list of the symbols sorted by code length */
1371:fltk-1.3.4-1/jpeg/jchuff.c ****   /* It's not real clear to me why we don't need to consider the codelength
1372:fltk-1.3.4-1/jpeg/jchuff.c ****    * changes made above, but the JPEG spec seems to think this works.
1373:fltk-1.3.4-1/jpeg/jchuff.c ****    */
1374:fltk-1.3.4-1/jpeg/jchuff.c ****   p = 0;
1375:fltk-1.3.4-1/jpeg/jchuff.c ****   for (i = 1; i <= MAX_CLEN; i++) {
1376:fltk-1.3.4-1/jpeg/jchuff.c ****     for (j = 0; j <= 255; j++) {
1377:fltk-1.3.4-1/jpeg/jchuff.c ****       if (codesize[j] == i) {
1378:fltk-1.3.4-1/jpeg/jchuff.c **** 	htbl->huffval[p] = (UINT8) j;
1379:fltk-1.3.4-1/jpeg/jchuff.c **** 	p++;
1380:fltk-1.3.4-1/jpeg/jchuff.c ****       }
1381:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1383:fltk-1.3.4-1/jpeg/jchuff.c **** 
1384:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Set sent_table FALSE so updated table will be written to JPEG file. */
1385:fltk-1.3.4-1/jpeg/jchuff.c ****   htbl->sent_table = FALSE;
1386:fltk-1.3.4-1/jpeg/jchuff.c **** }
1387:fltk-1.3.4-1/jpeg/jchuff.c **** 
1388:fltk-1.3.4-1/jpeg/jchuff.c **** 
1389:fltk-1.3.4-1/jpeg/jchuff.c **** /*
1390:fltk-1.3.4-1/jpeg/jchuff.c ****  * Finish up a statistics-gathering pass and create the new Huffman tables.
1391:fltk-1.3.4-1/jpeg/jchuff.c ****  */
1392:fltk-1.3.4-1/jpeg/jchuff.c **** 
1393:fltk-1.3.4-1/jpeg/jchuff.c **** METHODDEF(void)
1394:fltk-1.3.4-1/jpeg/jchuff.c **** finish_pass_gather (j_compress_ptr cinfo)
1395:fltk-1.3.4-1/jpeg/jchuff.c **** {
1396:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
1397:fltk-1.3.4-1/jpeg/jchuff.c ****   int ci, tbl;
1398:fltk-1.3.4-1/jpeg/jchuff.c ****   jpeg_component_info * compptr;
1399:fltk-1.3.4-1/jpeg/jchuff.c ****   JHUFF_TBL **htblptr;
1400:fltk-1.3.4-1/jpeg/jchuff.c ****   boolean did_dc[NUM_HUFF_TBLS];
1401:fltk-1.3.4-1/jpeg/jchuff.c ****   boolean did_ac[NUM_HUFF_TBLS];
1402:fltk-1.3.4-1/jpeg/jchuff.c **** 
1403:fltk-1.3.4-1/jpeg/jchuff.c ****   /* It's important not to apply jpeg_gen_optimal_table more than once
1404:fltk-1.3.4-1/jpeg/jchuff.c ****    * per table, because it clobbers the input frequency counts!
1405:fltk-1.3.4-1/jpeg/jchuff.c ****    */
1406:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->progressive_mode)
1407:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Flush out buffered data (all we care about is counting the EOB symbol) */
1408:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_eobrun(entropy);
1409:fltk-1.3.4-1/jpeg/jchuff.c **** 
1410:fltk-1.3.4-1/jpeg/jchuff.c ****   MEMZERO(did_dc, SIZEOF(did_dc));
1411:fltk-1.3.4-1/jpeg/jchuff.c ****   MEMZERO(did_ac, SIZEOF(did_ac));
1412:fltk-1.3.4-1/jpeg/jchuff.c **** 
1413:fltk-1.3.4-1/jpeg/jchuff.c ****   for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
1414:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
1415:fltk-1.3.4-1/jpeg/jchuff.c ****     /* DC needs no table for refinement scan */
1416:fltk-1.3.4-1/jpeg/jchuff.c ****     if (cinfo->Ss == 0 && cinfo->Ah == 0) {
1417:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->dc_tbl_no;
1418:fltk-1.3.4-1/jpeg/jchuff.c ****       if (! did_dc[tbl]) {
1419:fltk-1.3.4-1/jpeg/jchuff.c **** 	htblptr = & cinfo->dc_huff_tbl_ptrs[tbl];
1420:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (*htblptr == NULL)
1421:fltk-1.3.4-1/jpeg/jchuff.c **** 	  *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
1422:fltk-1.3.4-1/jpeg/jchuff.c **** 	jpeg_gen_optimal_table(cinfo, *htblptr, entropy->dc_count_ptrs[tbl]);
1423:fltk-1.3.4-1/jpeg/jchuff.c **** 	did_dc[tbl] = TRUE;
1424:fltk-1.3.4-1/jpeg/jchuff.c ****       }
1425:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1426:fltk-1.3.4-1/jpeg/jchuff.c ****     /* AC needs no table when not present */
1427:fltk-1.3.4-1/jpeg/jchuff.c ****     if (cinfo->Se) {
1428:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->ac_tbl_no;
1429:fltk-1.3.4-1/jpeg/jchuff.c ****       if (! did_ac[tbl]) {
1430:fltk-1.3.4-1/jpeg/jchuff.c **** 	htblptr = & cinfo->ac_huff_tbl_ptrs[tbl];
1431:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (*htblptr == NULL)
1432:fltk-1.3.4-1/jpeg/jchuff.c **** 	  *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
1433:fltk-1.3.4-1/jpeg/jchuff.c **** 	jpeg_gen_optimal_table(cinfo, *htblptr, entropy->ac_count_ptrs[tbl]);
1434:fltk-1.3.4-1/jpeg/jchuff.c **** 	did_ac[tbl] = TRUE;
1435:fltk-1.3.4-1/jpeg/jchuff.c ****       }
1436:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1437:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1438:fltk-1.3.4-1/jpeg/jchuff.c **** }
1439:fltk-1.3.4-1/jpeg/jchuff.c **** 
1440:fltk-1.3.4-1/jpeg/jchuff.c **** 
1441:fltk-1.3.4-1/jpeg/jchuff.c **** /*
1442:fltk-1.3.4-1/jpeg/jchuff.c ****  * Initialize for a Huffman-compressed scan.
1443:fltk-1.3.4-1/jpeg/jchuff.c ****  * If gather_statistics is TRUE, we do not output anything during the scan,
1444:fltk-1.3.4-1/jpeg/jchuff.c ****  * just count the Huffman symbols used and generate Huffman code tables.
1445:fltk-1.3.4-1/jpeg/jchuff.c ****  */
1446:fltk-1.3.4-1/jpeg/jchuff.c **** 
1447:fltk-1.3.4-1/jpeg/jchuff.c **** METHODDEF(void)
1448:fltk-1.3.4-1/jpeg/jchuff.c **** start_pass_huff (j_compress_ptr cinfo, boolean gather_statistics)
1449:fltk-1.3.4-1/jpeg/jchuff.c **** {
 829              		.loc 1 1449 0
 830              		.cfi_startproc
 831              	.LVL118:
 832 0000 4157     		pushq	%r15
 833              		.cfi_def_cfa_offset 16
 834              		.cfi_offset 15, -16
 835 0002 4156     		pushq	%r14
 836              		.cfi_def_cfa_offset 24
 837              		.cfi_offset 14, -24
 838 0004 4189F6   		movl	%esi, %r14d
 839 0007 4155     		pushq	%r13
 840              		.cfi_def_cfa_offset 32
 841              		.cfi_offset 13, -32
 842 0009 4154     		pushq	%r12
 843              		.cfi_def_cfa_offset 40
 844              		.cfi_offset 12, -40
 845 000b 55       		pushq	%rbp
 846              		.cfi_def_cfa_offset 48
 847              		.cfi_offset 6, -48
 848 000c 53       		pushq	%rbx
 849              		.cfi_def_cfa_offset 56
 850              		.cfi_offset 3, -56
 851 000d 4889FB   		movq	%rdi, %rbx
 852 0010 4883EC18 		subq	$24, %rsp
 853              		.cfi_def_cfa_offset 80
1450:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
1451:fltk-1.3.4-1/jpeg/jchuff.c ****   int ci, tbl;
1452:fltk-1.3.4-1/jpeg/jchuff.c ****   jpeg_component_info * compptr;
1453:fltk-1.3.4-1/jpeg/jchuff.c **** 
1454:fltk-1.3.4-1/jpeg/jchuff.c ****   if (gather_statistics)
 854              		.loc 1 1454 0
 855 0014 85F6     		testl	%esi, %esi
1450:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 856              		.loc 1 1450 0
 857 0016 4C8BAF30 		movq	560(%rdi), %r13
 857      020000
 858              	.LVL119:
 859              		.loc 1 1454 0
 860 001d 0F84BD00 		je	.L100
 860      0000
1455:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->pub.finish_pass = finish_pass_gather;
 861              		.loc 1 1455 0
 862 0023 49C74510 		movq	$finish_pass_gather, 16(%r13)
 862      00000000 
1456:fltk-1.3.4-1/jpeg/jchuff.c ****   else
1457:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->pub.finish_pass = finish_pass_huff;
1458:fltk-1.3.4-1/jpeg/jchuff.c **** 
1459:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->progressive_mode) {
 863              		.loc 1 1459 0
 864 002b 448B9F5C 		movl	348(%rdi), %r11d
 864      010000
 865 0032 4585DB   		testl	%r11d, %r11d
 866 0035 0F84D501 		je	.L101
 866      0000
 867              	.L104:
1460:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->cinfo = cinfo;
 868              		.loc 1 1460 0
 869 003b 49899DD8 		movq	%rbx, 216(%r13)
 869      000000
1461:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->gather_statistics = gather_statistics;
 870              		.loc 1 1461 0
 871 0042 4589B5C0 		movl	%r14d, 192(%r13)
 871      000000
1462:fltk-1.3.4-1/jpeg/jchuff.c **** 
1463:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We assume jcmaster.c already validated the scan parameters. */
1464:fltk-1.3.4-1/jpeg/jchuff.c **** 
1465:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Select execution routine */
1466:fltk-1.3.4-1/jpeg/jchuff.c ****     if (cinfo->Ah == 0) {
 872              		.loc 1 1466 0
 873 0049 448B93D4 		movl	468(%rbx), %r10d
 873      010000
 874 0050 4585D2   		testl	%r10d, %r10d
 875 0053 0F85C701 		jne	.L130
 875      0000
 876              	.LVL120:
1467:fltk-1.3.4-1/jpeg/jchuff.c ****       if (cinfo->Ss == 0)
1468:fltk-1.3.4-1/jpeg/jchuff.c **** 	entropy->pub.encode_mcu = encode_mcu_DC_first;
 877              		.loc 1 1468 0
 878 0059 448B83CC 		movl	460(%rbx), %r8d
 878      010000
 879 0060 BA000000 		movl	$encode_mcu_DC_first, %edx
 879      00
 880 0065 B8000000 		movl	$encode_mcu_AC_first, %eax
 880      00
 881 006a 4585C0   		testl	%r8d, %r8d
 882 006d 480F44C2 		cmove	%rdx, %rax
 883 0071 49894508 		movq	%rax, 8(%r13)
 884              	.LVL121:
 885              	.L107:
1469:fltk-1.3.4-1/jpeg/jchuff.c ****       else
1470:fltk-1.3.4-1/jpeg/jchuff.c **** 	entropy->pub.encode_mcu = encode_mcu_AC_first;
1471:fltk-1.3.4-1/jpeg/jchuff.c ****     } else {
1472:fltk-1.3.4-1/jpeg/jchuff.c ****       if (cinfo->Ss == 0)
1473:fltk-1.3.4-1/jpeg/jchuff.c **** 	entropy->pub.encode_mcu = encode_mcu_DC_refine;
1474:fltk-1.3.4-1/jpeg/jchuff.c ****       else {
1475:fltk-1.3.4-1/jpeg/jchuff.c **** 	entropy->pub.encode_mcu = encode_mcu_AC_refine;
1476:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* AC refinement needs a correction bit buffer */
1477:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (entropy->bit_buffer == NULL)
1478:fltk-1.3.4-1/jpeg/jchuff.c **** 	  entropy->bit_buffer = (char *)
1479:fltk-1.3.4-1/jpeg/jchuff.c **** 	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
1480:fltk-1.3.4-1/jpeg/jchuff.c **** 					MAX_CORR_BITS * SIZEOF(char));
1481:fltk-1.3.4-1/jpeg/jchuff.c ****       }
1482:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1483:fltk-1.3.4-1/jpeg/jchuff.c **** 
1484:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Initialize AC stuff */
1485:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_tbl_no = cinfo->cur_comp_info[0]->ac_tbl_no;
 886              		.loc 1 1485 0
 887 0075 488B8378 		movq	376(%rbx), %rax
 887      010000
1486:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->EOBRUN = 0;
1487:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->BE = 0;
1488:fltk-1.3.4-1/jpeg/jchuff.c ****   } else {
1489:fltk-1.3.4-1/jpeg/jchuff.c ****     if (gather_statistics)
1490:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->pub.encode_mcu = encode_mcu_gather;
1491:fltk-1.3.4-1/jpeg/jchuff.c ****     else
1492:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->pub.encode_mcu = encode_mcu_huff;
1493:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1494:fltk-1.3.4-1/jpeg/jchuff.c **** 
1495:fltk-1.3.4-1/jpeg/jchuff.c ****   for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 888              		.loc 1 1495 0
 889 007c 4531E4   		xorl	%r12d, %r12d
 890              	.LBB75:
 891              	.LBB76:
 892              		.loc 2 90 0
 893 007f 31ED     		xorl	%ebp, %ebp
 894              	.LBE76:
 895              	.LBE75:
1485:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->EOBRUN = 0;
 896              		.loc 1 1485 0
 897 0081 8B4018   		movl	24(%rax), %eax
1486:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->EOBRUN = 0;
 898              		.loc 1 1486 0
 899 0084 41C785E4 		movl	$0, 228(%r13)
 899      00000000 
 899      000000
1487:fltk-1.3.4-1/jpeg/jchuff.c ****   } else {
 900              		.loc 1 1487 0
 901 008f 41C785E8 		movl	$0, 232(%r13)
 901      00000000 
 901      000000
 902              	.LVL122:
1485:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->EOBRUN = 0;
 903              		.loc 1 1485 0
 904 009a 418985E0 		movl	%eax, 224(%r13)
 904      000000
 905              		.loc 1 1495 0
 906 00a1 8BB37401 		movl	372(%rbx), %esi
 906      0000
 907 00a7 85F6     		testl	%esi, %esi
 908 00a9 7F65     		jg	.L122
 909              	.LVL123:
 910              	.L121:
1496:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
1497:fltk-1.3.4-1/jpeg/jchuff.c ****     /* DC needs no table for refinement scan */
1498:fltk-1.3.4-1/jpeg/jchuff.c ****     if (cinfo->Ss == 0 && cinfo->Ah == 0) {
1499:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->dc_tbl_no;
1500:fltk-1.3.4-1/jpeg/jchuff.c ****       if (gather_statistics) {
1501:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* Check for invalid table index */
1502:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* (make_c_derived_tbl does this in the other path) */
1503:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (tbl < 0 || tbl >= NUM_HUFF_TBLS)
1504:fltk-1.3.4-1/jpeg/jchuff.c **** 	  ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
1505:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* Allocate and zero the statistics tables */
1506:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* Note that jpeg_gen_optimal_table expects 257 entries in each table! */
1507:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (entropy->dc_count_ptrs[tbl] == NULL)
1508:fltk-1.3.4-1/jpeg/jchuff.c **** 	  entropy->dc_count_ptrs[tbl] = (long *)
1509:fltk-1.3.4-1/jpeg/jchuff.c **** 	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
1510:fltk-1.3.4-1/jpeg/jchuff.c **** 					257 * SIZEOF(long));
1511:fltk-1.3.4-1/jpeg/jchuff.c **** 	MEMZERO(entropy->dc_count_ptrs[tbl], 257 * SIZEOF(long));
1512:fltk-1.3.4-1/jpeg/jchuff.c ****       } else {
1513:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* Compute derived values for Huffman tables */
1514:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* We may do this more than once for a table, but it's not expensive */
1515:fltk-1.3.4-1/jpeg/jchuff.c **** 	jpeg_make_c_derived_tbl(cinfo, TRUE, tbl,
1516:fltk-1.3.4-1/jpeg/jchuff.c **** 				& entropy->dc_derived_tbls[tbl]);
1517:fltk-1.3.4-1/jpeg/jchuff.c ****       }
1518:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Initialize DC predictions to 0 */
1519:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->saved.last_dc_val[ci] = 0;
1520:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1521:fltk-1.3.4-1/jpeg/jchuff.c ****     /* AC needs no table when not present */
1522:fltk-1.3.4-1/jpeg/jchuff.c ****     if (cinfo->Se) {
1523:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->ac_tbl_no;
1524:fltk-1.3.4-1/jpeg/jchuff.c ****       if (gather_statistics) {
1525:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (tbl < 0 || tbl >= NUM_HUFF_TBLS)
1526:fltk-1.3.4-1/jpeg/jchuff.c **** 	  ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
1527:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (entropy->ac_count_ptrs[tbl] == NULL)
1528:fltk-1.3.4-1/jpeg/jchuff.c **** 	  entropy->ac_count_ptrs[tbl] = (long *)
1529:fltk-1.3.4-1/jpeg/jchuff.c **** 	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
1530:fltk-1.3.4-1/jpeg/jchuff.c **** 					257 * SIZEOF(long));
1531:fltk-1.3.4-1/jpeg/jchuff.c **** 	MEMZERO(entropy->ac_count_ptrs[tbl], 257 * SIZEOF(long));
1532:fltk-1.3.4-1/jpeg/jchuff.c ****       } else {
1533:fltk-1.3.4-1/jpeg/jchuff.c **** 	jpeg_make_c_derived_tbl(cinfo, FALSE, tbl,
1534:fltk-1.3.4-1/jpeg/jchuff.c **** 				& entropy->ac_derived_tbls[tbl]);
1535:fltk-1.3.4-1/jpeg/jchuff.c ****       }
1536:fltk-1.3.4-1/jpeg/jchuff.c ****     }
1537:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1538:fltk-1.3.4-1/jpeg/jchuff.c **** 
1539:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Initialize bit buffer to empty */
1540:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_buffer = 0;
 911              		.loc 1 1540 0
 912 00ab 49C74518 		movq	$0, 24(%r13)
 912      00000000 
1541:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = 0;
 913              		.loc 1 1541 0
 914 00b3 41C74520 		movl	$0, 32(%r13)
 914      00000000 
1542:fltk-1.3.4-1/jpeg/jchuff.c **** 
1543:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Initialize restart stuff */
1544:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->restarts_to_go = cinfo->restart_interval;
 915              		.loc 1 1544 0
 916 00bb 8B833C01 		movl	316(%rbx), %eax
 916      0000
1545:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->next_restart_num = 0;
 917              		.loc 1 1545 0
 918 00c1 41C7453C 		movl	$0, 60(%r13)
 918      00000000 
1544:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->next_restart_num = 0;
 919              		.loc 1 1544 0
 920 00c9 41894538 		movl	%eax, 56(%r13)
1546:fltk-1.3.4-1/jpeg/jchuff.c **** }
 921              		.loc 1 1546 0
 922 00cd 4883C418 		addq	$24, %rsp
 923              		.cfi_remember_state
 924              		.cfi_def_cfa_offset 56
 925 00d1 5B       		popq	%rbx
 926              		.cfi_def_cfa_offset 48
 927              	.LVL124:
 928 00d2 5D       		popq	%rbp
 929              		.cfi_def_cfa_offset 40
 930 00d3 415C     		popq	%r12
 931              		.cfi_def_cfa_offset 32
 932 00d5 415D     		popq	%r13
 933              		.cfi_def_cfa_offset 24
 934              	.LVL125:
 935 00d7 415E     		popq	%r14
 936              		.cfi_def_cfa_offset 16
 937              	.LVL126:
 938 00d9 415F     		popq	%r15
 939              		.cfi_def_cfa_offset 8
 940 00db C3       		ret
 941              	.LVL127:
 942 00dc 0F1F4000 		.p2align 4,,10
 943              		.p2align 3
 944              	.L100:
 945              		.cfi_restore_state
1457:fltk-1.3.4-1/jpeg/jchuff.c **** 
 946              		.loc 1 1457 0
 947 00e0 49C74510 		movq	$finish_pass_huff, 16(%r13)
 947      00000000 
1459:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->cinfo = cinfo;
 948              		.loc 1 1459 0
 949 00e8 448B8F5C 		movl	348(%rdi), %r9d
 949      010000
 950 00ef 4585C9   		testl	%r9d, %r9d
 951 00f2 0F8543FF 		jne	.L104
 951      FFFF
1492:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 952              		.loc 1 1492 0
 953 00f8 49C74508 		movq	$encode_mcu_huff, 8(%r13)
 953      00000000 
 954              	.L110:
 955              	.LVL128:
1495:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
 956              		.loc 1 1495 0 discriminator 1
 957 0100 8BB37401 		movl	372(%rbx), %esi
 957      0000
 958              	.LVL129:
 959 0106 4531E4   		xorl	%r12d, %r12d
 960              	.LBB79:
 961              	.LBB77:
 962              		.loc 2 90 0 discriminator 1
 963 0109 31ED     		xorl	%ebp, %ebp
 964              	.LBE77:
 965              	.LBE79:
1495:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
 966              		.loc 1 1495 0 discriminator 1
 967 010b 85F6     		testl	%esi, %esi
 968 010d 7E9C     		jle	.L121
 969              	.LVL130:
 970 010f 90       		.p2align 4,,10
 971              		.p2align 3
 972              	.L122:
1498:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->dc_tbl_no;
 973              		.loc 1 1498 0
 974 0110 8B8BCC01 		movl	460(%rbx), %ecx
 974      0000
1496:fltk-1.3.4-1/jpeg/jchuff.c ****     /* DC needs no table for refinement scan */
 975              		.loc 1 1496 0
 976 0116 4E8BBCE3 		movq	376(%rbx,%r12,8), %r15
 976      78010000 
 977              	.LVL131:
1498:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->dc_tbl_no;
 978              		.loc 1 1498 0
 979 011e 85C9     		testl	%ecx, %ecx
 980 0120 756A     		jne	.L111
1498:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->dc_tbl_no;
 981              		.loc 1 1498 0 is_stmt 0 discriminator 1
 982 0122 8B93D401 		movl	468(%rbx), %edx
 982      0000
 983 0128 85D2     		testl	%edx, %edx
 984 012a 7560     		jne	.L111
1500:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* Check for invalid table index */
 985              		.loc 1 1500 0 is_stmt 1
 986 012c 4585F6   		testl	%r14d, %r14d
1499:fltk-1.3.4-1/jpeg/jchuff.c ****       if (gather_statistics) {
 987              		.loc 1 1499 0
 988 012f 49635714 		movslq	20(%r15), %rdx
 989              	.LVL132:
1500:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* Check for invalid table index */
 990              		.loc 1 1500 0
 991 0133 0F844701 		je	.L112
 991      0000
1503:fltk-1.3.4-1/jpeg/jchuff.c **** 	  ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
 992              		.loc 1 1503 0
 993 0139 83FA03   		cmpl	$3, %edx
 994 013c 0F875E01 		ja	.L131
 994      0000
 995              	.LVL133:
 996              	.L113:
 997 0142 498D4CD5 		leaq	0(%r13,%rdx,8), %rcx
 997      00
1507:fltk-1.3.4-1/jpeg/jchuff.c **** 	  entropy->dc_count_ptrs[tbl] = (long *)
 998              		.loc 1 1507 0
 999 0147 488B8180 		movq	128(%rcx), %rax
 999      000000
 1000 014e 4885C0   		testq	%rax, %rax
 1001 0151 0F84D901 		je	.L132
 1001      0000
 1002              	.L114:
 1003              	.LVL134:
 1004              	.LBB80:
 1005              	.LBB78:
 1006              		.loc 2 90 0
 1007 0157 488D7808 		leaq	8(%rax), %rdi
 1008 015b 48C70000 		movq	$0, (%rax)
 1008      000000
 1009 0162 48C78000 		movq	$0, 2048(%rax)
 1009      08000000 
 1009      000000
 1010 016d 4883E7F8 		andq	$-8, %rdi
 1011 0171 4829F8   		subq	%rdi, %rax
 1012 0174 8D880808 		leal	2056(%rax), %ecx
 1012      0000
 1013 017a 4889E8   		movq	%rbp, %rax
 1014 017d C1E903   		shrl	$3, %ecx
 1015 0180 F348AB   		rep stosq
 1016              	.LVL135:
 1017              	.L115:
 1018              	.LBE78:
 1019              	.LBE80:
1519:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 1020              		.loc 1 1519 0
 1021 0183 43C744A5 		movl	$0, 36(%r13,%r12,4)
 1021      24000000 
 1021      00
 1022              	.L111:
1522:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->ac_tbl_no;
 1023              		.loc 1 1522 0
 1024 018c 8B83D001 		movl	464(%rbx), %eax
 1024      0000
 1025 0192 85C0     		testl	%eax, %eax
 1026 0194 7458     		je	.L116
1524:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (tbl < 0 || tbl >= NUM_HUFF_TBLS)
 1027              		.loc 1 1524 0
 1028 0196 4585F6   		testl	%r14d, %r14d
1523:fltk-1.3.4-1/jpeg/jchuff.c ****       if (gather_statistics) {
 1029              		.loc 1 1523 0
 1030 0199 4D637F18 		movslq	24(%r15), %r15
 1031              	.LVL136:
1524:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (tbl < 0 || tbl >= NUM_HUFF_TBLS)
 1032              		.loc 1 1524 0
 1033 019d 0F849D00 		je	.L117
 1033      0000
1525:fltk-1.3.4-1/jpeg/jchuff.c **** 	  ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
 1034              		.loc 1 1525 0
 1035 01a3 4183FF03 		cmpl	$3, %r15d
 1036 01a7 0F87B300 		ja	.L133
 1036      0000
 1037              	.L118:
 1038 01ad 4F8D7CFD 		leaq	0(%r13,%r15,8), %r15
 1038      00
 1039              	.LVL137:
1527:fltk-1.3.4-1/jpeg/jchuff.c **** 	  entropy->ac_count_ptrs[tbl] = (long *)
 1040              		.loc 1 1527 0
 1041 01b2 498B87A0 		movq	160(%r15), %rax
 1041      000000
 1042 01b9 4885C0   		testq	%rax, %rax
 1043 01bc 0F844601 		je	.L134
 1043      0000
 1044              	.L119:
 1045              	.LVL138:
 1046              	.LBB81:
 1047              	.LBB82:
 1048              		.loc 2 90 0
 1049 01c2 488D7808 		leaq	8(%rax), %rdi
 1050 01c6 48C70000 		movq	$0, (%rax)
 1050      000000
 1051 01cd 48C78000 		movq	$0, 2048(%rax)
 1051      08000000 
 1051      000000
 1052 01d8 4883E7F8 		andq	$-8, %rdi
 1053 01dc 4829F8   		subq	%rdi, %rax
 1054 01df 8D880808 		leal	2056(%rax), %ecx
 1054      0000
 1055 01e5 4889E8   		movq	%rbp, %rax
 1056 01e8 C1E903   		shrl	$3, %ecx
 1057 01eb F348AB   		rep stosq
 1058              	.LVL139:
 1059              	.L116:
 1060 01ee 418D4424 		leal	1(%r12), %eax
 1060      01
 1061              	.LVL140:
 1062 01f3 4983C401 		addq	$1, %r12
 1063              	.LBE82:
 1064              	.LBE81:
1495:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
 1065              		.loc 1 1495 0 discriminator 2
 1066 01f7 3B837401 		cmpl	372(%rbx), %eax
 1066      0000
 1067 01fd 0F8C0DFF 		jl	.L122
 1067      FFFF
 1068 0203 E9A3FEFF 		jmp	.L121
 1068      FF
 1069              	.LVL141:
 1070 0208 0F1F8400 		.p2align 4,,10
 1070      00000000 
 1071              		.p2align 3
 1072              	.L101:
1490:fltk-1.3.4-1/jpeg/jchuff.c ****     else
 1073              		.loc 1 1490 0
 1074 0210 49C74508 		movq	$encode_mcu_gather, 8(%r13)
 1074      00000000 
 1075 0218 E9E3FEFF 		jmp	.L110
 1075      FF
 1076 021d 0F1F00   		.p2align 4,,10
 1077              		.p2align 3
 1078              	.L130:
1472:fltk-1.3.4-1/jpeg/jchuff.c **** 	entropy->pub.encode_mcu = encode_mcu_DC_refine;
 1079              		.loc 1 1472 0
 1080 0220 8BBBCC01 		movl	460(%rbx), %edi
 1080      0000
 1081 0226 85FF     		testl	%edi, %edi
 1082 0228 0F85A200 		jne	.L108
 1082      0000
1473:fltk-1.3.4-1/jpeg/jchuff.c ****       else {
 1083              		.loc 1 1473 0
 1084 022e 49C74508 		movq	$encode_mcu_DC_refine, 8(%r13)
 1084      00000000 
 1085 0236 E93AFEFF 		jmp	.L107
 1085      FF
 1086              	.LVL142:
 1087 023b 0F1F4400 		.p2align 4,,10
 1087      00
 1088              		.p2align 3
 1089              	.L117:
1533:fltk-1.3.4-1/jpeg/jchuff.c **** 				& entropy->ac_derived_tbls[tbl]);
 1090              		.loc 1 1533 0
 1091 0240 4963C7   		movslq	%r15d, %rax
 1092 0243 4489FA   		movl	%r15d, %edx
 1093 0246 31F6     		xorl	%esi, %esi
 1094 0248 498D4CC5 		leaq	96(%r13,%rax,8), %rcx
 1094      60
 1095 024d 4889DF   		movq	%rbx, %rdi
 1096 0250 E8000000 		call	jpeg_make_c_derived_tbl
 1096      00
 1097              	.LVL143:
 1098 0255 EB97     		jmp	.L116
 1099 0257 660F1F84 		.p2align 4,,10
 1099      00000000 
 1099      00
 1100              		.p2align 3
 1101              	.L133:
1526:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (entropy->ac_count_ptrs[tbl] == NULL)
 1102              		.loc 1 1526 0
 1103 0260 488B03   		movq	(%rbx), %rax
 1104 0263 4889DF   		movq	%rbx, %rdi
 1105 0266 C7402834 		movl	$52, 40(%rax)
 1105      000000
 1106 026d 488B03   		movq	(%rbx), %rax
 1107 0270 4489782C 		movl	%r15d, 44(%rax)
 1108 0274 488B03   		movq	(%rbx), %rax
 1109 0277 FF10     		call	*(%rax)
 1110              	.LVL144:
 1111 0279 E92FFFFF 		jmp	.L118
 1111      FF
 1112              	.LVL145:
 1113 027e 6690     		.p2align 4,,10
 1114              		.p2align 3
 1115              	.L112:
1515:fltk-1.3.4-1/jpeg/jchuff.c **** 				& entropy->dc_derived_tbls[tbl]);
 1116              		.loc 1 1515 0
 1117 0280 4863C2   		movslq	%edx, %rax
 1118 0283 BE010000 		movl	$1, %esi
 1118      00
 1119 0288 4889DF   		movq	%rbx, %rdi
 1120 028b 498D4CC5 		leaq	64(%r13,%rax,8), %rcx
 1120      40
 1121 0290 E8000000 		call	jpeg_make_c_derived_tbl
 1121      00
 1122              	.LVL146:
 1123 0295 E9E9FEFF 		jmp	.L115
 1123      FF
 1124              	.LVL147:
 1125 029a 660F1F44 		.p2align 4,,10
 1125      0000
 1126              		.p2align 3
 1127              	.L131:
1504:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* Allocate and zero the statistics tables */
 1128              		.loc 1 1504 0
 1129 02a0 488B03   		movq	(%rbx), %rax
 1130 02a3 89542408 		movl	%edx, 8(%rsp)
 1131 02a7 4889DF   		movq	%rbx, %rdi
 1132 02aa C7402834 		movl	$52, 40(%rax)
 1132      000000
 1133              	.LVL148:
 1134 02b1 488B03   		movq	(%rbx), %rax
 1135 02b4 89502C   		movl	%edx, 44(%rax)
 1136 02b7 488B03   		movq	(%rbx), %rax
 1137 02ba FF10     		call	*(%rax)
 1138              	.LVL149:
 1139 02bc 48635424 		movslq	8(%rsp), %rdx
 1139      08
 1140 02c1 E97CFEFF 		jmp	.L113
 1140      FF
 1141              	.LVL150:
 1142 02c6 662E0F1F 		.p2align 4,,10
 1142      84000000 
 1142      0000
 1143              		.p2align 3
 1144              	.L108:
1477:fltk-1.3.4-1/jpeg/jchuff.c **** 	  entropy->bit_buffer = (char *)
 1145              		.loc 1 1477 0
 1146 02d0 4983BDF0 		cmpq	$0, 240(%r13)
 1146      00000000 
1475:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* AC refinement needs a correction bit buffer */
 1147              		.loc 1 1475 0
 1148 02d8 49C74508 		movq	$encode_mcu_AC_refine, 8(%r13)
 1148      00000000 
1477:fltk-1.3.4-1/jpeg/jchuff.c **** 	  entropy->bit_buffer = (char *)
 1149              		.loc 1 1477 0
 1150 02e0 0F858FFD 		jne	.L107
 1150      FFFF
1479:fltk-1.3.4-1/jpeg/jchuff.c **** 					MAX_CORR_BITS * SIZEOF(char));
 1151              		.loc 1 1479 0
 1152 02e6 488B4308 		movq	8(%rbx), %rax
 1153 02ea BAE80300 		movl	$1000, %edx
 1153      00
 1154 02ef BE010000 		movl	$1, %esi
 1154      00
 1155              	.LVL151:
 1156 02f4 4889DF   		movq	%rbx, %rdi
 1157 02f7 FF10     		call	*(%rax)
 1158              	.LVL152:
1478:fltk-1.3.4-1/jpeg/jchuff.c **** 	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1159              		.loc 1 1478 0
 1160 02f9 498985F0 		movq	%rax, 240(%r13)
 1160      000000
 1161 0300 E970FDFF 		jmp	.L107
 1161      FF
 1162              	.LVL153:
 1163              		.p2align 4,,10
 1164 0305 0F1F00   		.p2align 3
 1165              	.L134:
1529:fltk-1.3.4-1/jpeg/jchuff.c **** 					257 * SIZEOF(long));
 1166              		.loc 1 1529 0
 1167 0308 488B4308 		movq	8(%rbx), %rax
 1168 030c BA080800 		movl	$2056, %edx
 1168      00
 1169 0311 BE010000 		movl	$1, %esi
 1169      00
 1170 0316 4889DF   		movq	%rbx, %rdi
 1171 0319 FF10     		call	*(%rax)
 1172              	.LVL154:
1528:fltk-1.3.4-1/jpeg/jchuff.c **** 	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1173              		.loc 1 1528 0
 1174 031b 498987A0 		movq	%rax, 160(%r15)
 1174      000000
 1175 0322 E99BFEFF 		jmp	.L119
 1175      FF
 1176              	.LVL155:
 1177 0327 660F1F84 		.p2align 4,,10
 1177      00000000 
 1177      00
 1178              		.p2align 3
 1179              	.L132:
1509:fltk-1.3.4-1/jpeg/jchuff.c **** 					257 * SIZEOF(long));
 1180              		.loc 1 1509 0
 1181 0330 488B4308 		movq	8(%rbx), %rax
 1182 0334 48894C24 		movq	%rcx, 8(%rsp)
 1182      08
 1183 0339 BA080800 		movl	$2056, %edx
 1183      00
 1184 033e BE010000 		movl	$1, %esi
 1184      00
 1185 0343 4889DF   		movq	%rbx, %rdi
 1186 0346 FF10     		call	*(%rax)
 1187              	.LVL156:
1508:fltk-1.3.4-1/jpeg/jchuff.c **** 	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1188              		.loc 1 1508 0
 1189 0348 488B4C24 		movq	8(%rsp), %rcx
 1189      08
 1190 034d 48898180 		movq	%rax, 128(%rcx)
 1190      000000
 1191 0354 E9FEFDFF 		jmp	.L114
 1191      FF
 1192              		.cfi_endproc
 1193              	.LFE85:
 1195              		.section	.text.unlikely.start_pass_huff
 1196              	.LCOLDE3:
 1197              		.section	.text.start_pass_huff
 1198              	.LHOTE3:
 1199              		.section	.text.unlikely.jpeg_gen_optimal_table,"ax",@progbits
 1200              	.LCOLDB4:
 1201              		.section	.text.jpeg_gen_optimal_table,"ax",@progbits
 1202              	.LHOTB4:
 1203              		.p2align 4,,15
 1205              	jpeg_gen_optimal_table:
 1206              	.LFB83:
1254:fltk-1.3.4-1/jpeg/jchuff.c **** #define MAX_CLEN 32		/* assumed maximum initial code length */
 1207              		.loc 1 1254 0
 1208              		.cfi_startproc
 1209              	.LVL157:
 1210 0000 4157     		pushq	%r15
 1211              		.cfi_def_cfa_offset 16
 1212              		.cfi_offset 15, -16
 1213 0002 4156     		pushq	%r14
 1214              		.cfi_def_cfa_offset 24
 1215              		.cfi_offset 14, -24
 1216              	.LBB83:
 1217              	.LBB84:
 1218              		.loc 2 90 0
 1219 0004 B9800000 		movl	$128, %ecx
 1219      00
 1220              	.LBE84:
 1221              	.LBE83:
1254:fltk-1.3.4-1/jpeg/jchuff.c **** #define MAX_CLEN 32		/* assumed maximum initial code length */
 1222              		.loc 1 1254 0
 1223 0009 4155     		pushq	%r13
 1224              		.cfi_def_cfa_offset 32
 1225              		.cfi_offset 13, -32
 1226 000b 4154     		pushq	%r12
 1227              		.cfi_def_cfa_offset 40
 1228              		.cfi_offset 12, -40
 1229 000d 4989FC   		movq	%rdi, %r12
 1230 0010 55       		pushq	%rbp
 1231              		.cfi_def_cfa_offset 48
 1232              		.cfi_offset 6, -48
 1233 0011 53       		pushq	%rbx
 1234              		.cfi_def_cfa_offset 56
 1235              		.cfi_offset 3, -56
 1236 0012 4889F3   		movq	%rsi, %rbx
 1237 0015 4881EC58 		subq	$2136, %rsp
 1237      080000
 1238              		.cfi_def_cfa_offset 2192
1254:fltk-1.3.4-1/jpeg/jchuff.c **** #define MAX_CLEN 32		/* assumed maximum initial code length */
 1239              		.loc 1 1254 0
 1240 001c 64488B04 		movq	%fs:40, %rax
 1240      25280000 
 1240      00
 1241 0025 48898424 		movq	%rax, 2120(%rsp)
 1241      48080000 
 1242 002d 31C0     		xorl	%eax, %eax
 1243              	.LVL158:
 1244              	.LBB88:
 1245              	.LBB85:
 1246              		.loc 2 90 0
 1247 002f 4889E7   		movq	%rsp, %rdi
 1248              	.LVL159:
 1249              	.LBE85:
 1250              	.LBE88:
 1251              	.LBB89:
 1252              	.LBB90:
 1253 0032 48C78424 		movq	$0, 2080(%rsp)
 1253      20080000 
 1253      00000000 
 1254 003e 48C78424 		movq	$0, 2088(%rsp)
 1254      28080000 
 1254      00000000 
 1255              	.LBE90:
 1256              	.LBE89:
 1257              	.LBB92:
 1258              	.LBB86:
 1259 004a F348AB   		rep stosq
 1260 004d 488D8424 		leaq	1040(%rsp), %rax
 1260      10040000 
 1261 0055 488D8C24 		leaq	2068(%rsp), %rcx
 1261      14080000 
 1262              	.LBE86:
 1263              	.LBE92:
 1264              	.LBB93:
 1265              	.LBB91:
 1266 005d 48C78424 		movq	$0, 2096(%rsp)
 1266      30080000 
 1266      00000000 
 1267 0069 48C78424 		movq	$0, 2104(%rsp)
 1267      38080000 
 1267      00000000 
 1268 0075 C6842440 		movb	$0, 2112(%rsp)
 1268      08000000 
 1269              	.LVL160:
 1270              	.LBE91:
 1271              	.LBE93:
 1272              	.LBB94:
 1273              	.LBB87:
 1274 007d 4889E5   		movq	%rsp, %rbp
 1275 0080 C7070000 		movl	$0, (%rdi)
 1275      0000
 1276              	.LVL161:
 1277 0086 662E0F1F 		.p2align 4,,10
 1277      84000000 
 1277      0000
 1278              		.p2align 3
 1279              	.L136:
 1280              	.LBE87:
 1281              	.LBE94:
1268:fltk-1.3.4-1/jpeg/jchuff.c ****   
 1282              		.loc 1 1268 0 discriminator 3
 1283 0090 C700FFFF 		movl	$-1, (%rax)
 1283      FFFF
 1284 0096 4883C004 		addq	$4, %rax
1267:fltk-1.3.4-1/jpeg/jchuff.c ****     others[i] = -1;		/* init links to empty */
 1285              		.loc 1 1267 0 discriminator 3
 1286 009a 4839C8   		cmpq	%rcx, %rax
 1287 009d 75F1     		jne	.L136
1270:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Including the pseudo-symbol 256 in the Huffman procedure guarantees
 1288              		.loc 1 1270 0
 1289 009f 48C78200 		movq	$1, 2048(%rdx)
 1289      08000001 
 1289      000000
 1290              	.LVL162:
 1291              	.L147:
1254:fltk-1.3.4-1/jpeg/jchuff.c **** #define MAX_CLEN 32		/* assumed maximum initial code length */
 1292              		.loc 1 1254 0
 1293 00aa 31C0     		xorl	%eax, %eax
1282:fltk-1.3.4-1/jpeg/jchuff.c ****     for (i = 0; i <= 256; i++) {
 1294              		.loc 1 1282 0
 1295 00ac BF00CA9A 		movl	$1000000000, %edi
 1295      3B
1281:fltk-1.3.4-1/jpeg/jchuff.c ****     v = 1000000000L;
 1296              		.loc 1 1281 0
 1297 00b1 BEFFFFFF 		movl	$-1, %esi
 1297      FF
 1298              	.LVL163:
 1299 00b6 662E0F1F 		.p2align 4,,10
 1299      84000000 
 1299      0000
 1300              		.p2align 3
 1301              	.L139:
1284:fltk-1.3.4-1/jpeg/jchuff.c **** 	v = freq[i];
 1302              		.loc 1 1284 0
 1303 00c0 488B0CC2 		movq	(%rdx,%rax,8), %rcx
 1304 00c4 4839F9   		cmpq	%rdi, %rcx
 1305 00c7 7F0A     		jg	.L137
 1306 00c9 4885C9   		testq	%rcx, %rcx
 1307 00cc 480F45F9 		cmovne	%rcx, %rdi
 1308              	.LVL164:
 1309 00d0 0F45F0   		cmovne	%eax, %esi
 1310              	.LVL165:
 1311              	.L137:
 1312 00d3 4883C001 		addq	$1, %rax
 1313              	.LVL166:
1283:fltk-1.3.4-1/jpeg/jchuff.c ****       if (freq[i] && freq[i] <= v) {
 1314              		.loc 1 1283 0 discriminator 2
 1315 00d7 483D0101 		cmpq	$257, %rax
 1315      0000
 1316 00dd 75E1     		jne	.L139
 1317 00df 31C0     		xorl	%eax, %eax
 1318 00e1 41B800CA 		movl	$1000000000, %r8d
 1318      9A3B
 1319 00e7 41BBFFFF 		movl	$-1, %r11d
 1319      FFFF
 1320 00ed EB07     		jmp	.L142
 1321              	.LVL167:
 1322 00ef 90       		.p2align 4,,10
 1323              		.p2align 3
 1324              	.L168:
 1325 00f0 4989C8   		movq	%rcx, %r8
 1326 00f3 4189FB   		movl	%edi, %r11d
 1327              	.LVL168:
 1328              	.L142:
1295:fltk-1.3.4-1/jpeg/jchuff.c **** 	v = freq[i];
 1329              		.loc 1 1295 0
 1330 00f6 488B0CC2 		movq	(%rdx,%rax,8), %rcx
 1331 00fa 89C7     		movl	%eax, %edi
 1332              	.LVL169:
 1333 00fc 4C39C1   		cmpq	%r8, %rcx
 1334 00ff 410F9EC2 		setle	%r10b
 1335 0103 4885C9   		testq	%rcx, %rcx
 1336 0106 410F95C1 		setne	%r9b
 1337 010a 4584CA   		testb	%r9b, %r10b
 1338 010d 0F843102 		je	.L172
 1338      0000
 1339 0113 39C6     		cmpl	%eax, %esi
 1340 0115 0F842902 		je	.L172
 1340      0000
 1341              	.L140:
 1342              	.LVL170:
 1343 011b 4883C001 		addq	$1, %rax
 1344              	.LVL171:
1294:fltk-1.3.4-1/jpeg/jchuff.c ****       if (freq[i] && freq[i] <= v && i != c1) {
 1345              		.loc 1 1294 0 discriminator 2
 1346 011f 483D0101 		cmpq	$257, %rax
 1346      0000
 1347 0125 75C9     		jne	.L168
1302:fltk-1.3.4-1/jpeg/jchuff.c ****       break;
 1348              		.loc 1 1302 0
 1349 0127 85FF     		testl	%edi, %edi
 1350 0129 787F     		js	.L143
1306:fltk-1.3.4-1/jpeg/jchuff.c ****     freq[c2] = 0;
 1351              		.loc 1 1306 0
 1352 012b 4C63C7   		movslq	%edi, %r8
 1353 012e 4863F6   		movslq	%esi, %rsi
 1354 0131 4A8D04C2 		leaq	(%rdx,%r8,8), %rax
1310:fltk-1.3.4-1/jpeg/jchuff.c ****     while (others[c1] >= 0) {
 1355              		.loc 1 1310 0
 1356 0135 8304B401 		addl	$1, (%rsp,%rsi,4)
1306:fltk-1.3.4-1/jpeg/jchuff.c ****     freq[c2] = 0;
 1357              		.loc 1 1306 0
 1358 0139 488B08   		movq	(%rax), %rcx
 1359              	.LVL172:
 1360 013c 48010CF2 		addq	%rcx, (%rdx,%rsi,8)
1311:fltk-1.3.4-1/jpeg/jchuff.c ****       c1 = others[c1];
 1361              		.loc 1 1311 0
 1362 0140 8B8CB410 		movl	1040(%rsp,%rsi,4), %ecx
 1362      040000
1307:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1363              		.loc 1 1307 0
 1364 0147 48C70000 		movq	$0, (%rax)
 1364      000000
1311:fltk-1.3.4-1/jpeg/jchuff.c ****       c1 = others[c1];
 1365              		.loc 1 1311 0
 1366 014e 85C9     		testl	%ecx, %ecx
 1367 0150 7853     		js	.L169
 1368              	.LVL173:
 1369              		.p2align 4,,10
 1370 0152 660F1F44 		.p2align 3
 1370      0000
 1371              	.L145:
1313:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 1372              		.loc 1 1313 0
 1373 0158 4863C1   		movslq	%ecx, %rax
1311:fltk-1.3.4-1/jpeg/jchuff.c ****       c1 = others[c1];
 1374              		.loc 1 1311 0
 1375 015b 8B8C8410 		movl	1040(%rsp,%rax,4), %ecx
 1375      040000
1313:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 1376              		.loc 1 1313 0
 1377 0162 83048401 		addl	$1, (%rsp,%rax,4)
1311:fltk-1.3.4-1/jpeg/jchuff.c ****       c1 = others[c1];
 1378              		.loc 1 1311 0
 1379 0166 85C9     		testl	%ecx, %ecx
 1380 0168 79EE     		jns	.L145
 1381              	.LVL174:
 1382              	.L144:
1316:fltk-1.3.4-1/jpeg/jchuff.c ****     
 1383              		.loc 1 1316 0
 1384 016a 89BC8410 		movl	%edi, 1040(%rsp,%rax,4)
 1384      040000
1320:fltk-1.3.4-1/jpeg/jchuff.c ****       c2 = others[c2];
 1385              		.loc 1 1320 0
 1386 0171 4A638484 		movslq	1040(%rsp,%r8,4), %rax
 1386      10040000 
1319:fltk-1.3.4-1/jpeg/jchuff.c ****     while (others[c2] >= 0) {
 1387              		.loc 1 1319 0
 1388 0179 42830484 		addl	$1, (%rsp,%r8,4)
 1388      01
1320:fltk-1.3.4-1/jpeg/jchuff.c ****       c2 = others[c2];
 1389              		.loc 1 1320 0
 1390 017e 85C0     		testl	%eax, %eax
 1391 0180 0F8824FF 		js	.L147
 1391      FFFF
 1392              	.LVL175:
 1393 0186 662E0F1F 		.p2align 4,,10
 1393      84000000 
 1393      0000
 1394              		.p2align 3
 1395              	.L182:
1322:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 1396              		.loc 1 1322 0
 1397 0190 83048401 		addl	$1, (%rsp,%rax,4)
1320:fltk-1.3.4-1/jpeg/jchuff.c ****       c2 = others[c2];
 1398              		.loc 1 1320 0
 1399 0194 48638484 		movslq	1040(%rsp,%rax,4), %rax
 1399      10040000 
 1400              	.LVL176:
 1401 019c 85C0     		testl	%eax, %eax
 1402 019e 79F0     		jns	.L182
 1403 01a0 E905FFFF 		jmp	.L147
 1403      FF
 1404              	.LVL177:
 1405              	.L169:
 1406 01a5 4889F0   		movq	%rsi, %rax
 1407 01a8 EBC0     		jmp	.L144
 1408              	.LVL178:
 1409              	.L143:
 1410 01aa 4989EE   		movq	%rbp, %r14
 1411 01ad 4C8DBD04 		leaq	1028(%rbp), %r15
 1411      040000
 1412 01b4 EB12     		jmp	.L152
 1413              	.LVL179:
 1414              	.L151:
1334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 1415              		.loc 1 1334 0
 1416 01b6 4280842C 		addb	$1, 2080(%rsp,%r13)
 1416      20080000 
 1416      01
 1417              	.L150:
 1418 01bf 4983C604 		addq	$4, %r14
1327:fltk-1.3.4-1/jpeg/jchuff.c ****     if (codesize[i]) {
 1419              		.loc 1 1327 0 discriminator 2
 1420 01c3 4D39F7   		cmpq	%r14, %r15
 1421 01c6 7424     		je	.L201
 1422              	.L152:
1328:fltk-1.3.4-1/jpeg/jchuff.c ****       /* The JPEG standard seems to think that this can't happen, */
 1423              		.loc 1 1328 0
 1424 01c8 4D632E   		movslq	(%r14), %r13
 1425 01cb 4585ED   		testl	%r13d, %r13d
 1426 01ce 74EF     		je	.L150
1331:fltk-1.3.4-1/jpeg/jchuff.c **** 	ERREXIT(cinfo, JERR_HUFF_CLEN_OVERFLOW);
 1427              		.loc 1 1331 0
 1428 01d0 4183FD20 		cmpl	$32, %r13d
 1429 01d4 7EE0     		jle	.L151
1332:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1430              		.loc 1 1332 0
 1431 01d6 498B0424 		movq	(%r12), %rax
 1432 01da 4C89E7   		movq	%r12, %rdi
 1433 01dd C7402828 		movl	$40, 40(%rax)
 1433      000000
 1434 01e4 498B0424 		movq	(%r12), %rax
 1435 01e8 FF10     		call	*(%rax)
 1436              	.LVL180:
 1437 01ea EBCA     		jmp	.L151
 1438              	.L201:
 1439 01ec 488D8C24 		leaq	2112(%rsp), %rcx
 1439      40080000 
1327:fltk-1.3.4-1/jpeg/jchuff.c ****     if (codesize[i]) {
 1440              		.loc 1 1327 0
 1441 01f4 BF1F0000 		movl	$31, %edi
 1441      00
 1442              	.L157:
 1443              	.LVL181:
1350:fltk-1.3.4-1/jpeg/jchuff.c ****       j = i - 2;		/* find length of new prefix to be used */
 1444              		.loc 1 1350 0
 1445 01f9 0FB631   		movzbl	(%rcx), %esi
 1446 01fc 4084F6   		testb	%sil, %sil
 1447 01ff 0F842A01 		je	.L202
 1447      0000
 1448 0205 83EF01   		subl	$1, %edi
 1449              	.LVL182:
 1450 0208 4C63C7   		movslq	%edi, %r8
 1451 020b 0F1F4400 		.p2align 4,,10
 1451      00
 1452              		.p2align 3
 1453              	.L156:
 1454              	.LVL183:
1352:fltk-1.3.4-1/jpeg/jchuff.c **** 	j--;
 1455              		.loc 1 1352 0
 1456 0210 8079FE00 		cmpb	$0, -2(%rcx)
 1457 0214 89F8     		movl	%edi, %eax
 1458 0216 0F850B01 		jne	.L171
 1458      0000
 1459              	.LVL184:
 1460 021c 0F1F4000 		.p2align 4,,10
 1461              		.p2align 3
 1462              	.L155:
1353:fltk-1.3.4-1/jpeg/jchuff.c ****       
 1463              		.loc 1 1353 0
 1464 0220 83E801   		subl	$1, %eax
 1465              	.LVL185:
1352:fltk-1.3.4-1/jpeg/jchuff.c **** 	j--;
 1466              		.loc 1 1352 0
 1467 0223 4863D0   		movslq	%eax, %rdx
 1468 0226 80BC1420 		cmpb	$0, 2080(%rsp,%rdx)
 1468      08000000 
 1469 022e 74F0     		je	.L155
 1470              	.LVL186:
 1471              	.L154:
1357:fltk-1.3.4-1/jpeg/jchuff.c ****       bits[j]--;		/* symbol of this length is now a prefix */
 1472              		.loc 1 1357 0
 1473 0230 83C001   		addl	$1, %eax
1355:fltk-1.3.4-1/jpeg/jchuff.c ****       bits[i-1]++;		/* one goes in this length */
 1474              		.loc 1 1355 0
 1475 0233 83EE02   		subl	$2, %esi
1356:fltk-1.3.4-1/jpeg/jchuff.c ****       bits[j+1] += 2;		/* two new symbols in this length */
 1476              		.loc 1 1356 0
 1477 0236 8041FF01 		addb	$1, -1(%rcx)
1357:fltk-1.3.4-1/jpeg/jchuff.c ****       bits[j]--;		/* symbol of this length is now a prefix */
 1478              		.loc 1 1357 0
 1479 023a 4898     		cltq
1355:fltk-1.3.4-1/jpeg/jchuff.c ****       bits[i-1]++;		/* one goes in this length */
 1480              		.loc 1 1355 0
 1481 023c 408831   		movb	%sil, (%rcx)
1357:fltk-1.3.4-1/jpeg/jchuff.c ****       bits[j]--;		/* symbol of this length is now a prefix */
 1482              		.loc 1 1357 0
 1483 023f 80840420 		addb	$2, 2080(%rsp,%rax)
 1483      08000002 
1358:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 1484              		.loc 1 1358 0
 1485 0247 80AC1420 		subb	$1, 2080(%rsp,%rdx)
 1485      08000001 
1350:fltk-1.3.4-1/jpeg/jchuff.c ****       j = i - 2;		/* find length of new prefix to be used */
 1486              		.loc 1 1350 0
 1487 024f 0FB631   		movzbl	(%rcx), %esi
 1488 0252 4084F6   		testb	%sil, %sil
 1489 0255 75B9     		jne	.L156
 1490              	.LVL187:
 1491 0257 4883E901 		subq	$1, %rcx
1349:fltk-1.3.4-1/jpeg/jchuff.c ****     while (bits[i] > 0) {
 1492              		.loc 1 1349 0 discriminator 2
 1493 025b 83FF0F   		cmpl	$15, %edi
 1494 025e 7599     		jne	.L157
 1495              	.LVL188:
 1496              	.L205:
1363:fltk-1.3.4-1/jpeg/jchuff.c ****     i--;
 1497              		.loc 1 1363 0
 1498 0260 0FB69424 		movzbl	2096(%rsp), %edx
 1498      30080000 
 1499 0268 488D8424 		leaq	2095(%rsp), %rax
 1499      2F080000 
 1500 0270 B9100000 		movl	$16, %ecx
 1500      00
 1501 0275 84D2     		testb	%dl, %dl
 1502 0277 750F     		jne	.L159
 1503              	.LVL189:
 1504              	.L191:
 1505 0279 4883E801 		subq	$1, %rax
 1506 027d 0FB65001 		movzbl	1(%rax), %edx
1364:fltk-1.3.4-1/jpeg/jchuff.c ****   bits[i]--;
 1507              		.loc 1 1364 0
 1508 0281 83E901   		subl	$1, %ecx
 1509              	.LVL190:
1363:fltk-1.3.4-1/jpeg/jchuff.c ****     i--;
 1510              		.loc 1 1363 0
 1511 0284 84D2     		testb	%dl, %dl
 1512 0286 74F1     		je	.L191
 1513              	.LVL191:
 1514              	.L159:
1365:fltk-1.3.4-1/jpeg/jchuff.c ****   
 1515              		.loc 1 1365 0
 1516 0288 4863C9   		movslq	%ecx, %rcx
 1517 028b 83EA01   		subl	$1, %edx
 1518 028e 88940C20 		movb	%dl, 2080(%rsp,%rcx)
 1518      080000
 1519              	.LVL192:
 1520              	.LBB95:
 1521              	.LBB96:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 1522              		.loc 2 53 0
 1523 0295 488B8424 		movq	2080(%rsp), %rax
 1523      20080000 
 1524              	.LBE96:
 1525              	.LBE95:
1375:fltk-1.3.4-1/jpeg/jchuff.c ****     for (j = 0; j <= 255; j++) {
 1526              		.loc 1 1375 0
 1527 029d BA010000 		movl	$1, %edx
 1527      00
1374:fltk-1.3.4-1/jpeg/jchuff.c ****   for (i = 1; i <= MAX_CLEN; i++) {
 1528              		.loc 1 1374 0
 1529 02a2 31C9     		xorl	%ecx, %ecx
 1530              	.LBB98:
 1531              	.LBB97:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 1532              		.loc 2 53 0
 1533 02a4 488903   		movq	%rax, (%rbx)
 1534 02a7 488B8424 		movq	2088(%rsp), %rax
 1534      28080000 
 1535 02af 48894308 		movq	%rax, 8(%rbx)
 1536 02b3 0FB68424 		movzbl	2096(%rsp), %eax
 1536      30080000 
 1537 02bb 884310   		movb	%al, 16(%rbx)
 1538              	.LVL193:
 1539              	.L162:
 1540              	.LBE97:
 1541              	.LBE98:
1363:fltk-1.3.4-1/jpeg/jchuff.c ****     i--;
 1542              		.loc 1 1363 0
 1543 02be 31C0     		xorl	%eax, %eax
 1544 02c0 EB12     		jmp	.L164
 1545              	.LVL194:
 1546              		.p2align 4,,10
 1547 02c2 660F1F44 		.p2align 3
 1547      0000
 1548              	.L163:
 1549 02c8 4883C001 		addq	$1, %rax
 1550              	.LVL195:
1376:fltk-1.3.4-1/jpeg/jchuff.c ****       if (codesize[j] == i) {
 1551              		.loc 1 1376 0 discriminator 2
 1552 02cc 483D0001 		cmpq	$256, %rax
 1552      0000
 1553 02d2 741C     		je	.L203
 1554              	.L164:
 1555              	.LVL196:
1377:fltk-1.3.4-1/jpeg/jchuff.c **** 	htbl->huffval[p] = (UINT8) j;
 1556              		.loc 1 1377 0
 1557 02d4 39548500 		cmpl	%edx, 0(%rbp,%rax,4)
 1558 02d8 75EE     		jne	.L163
1378:fltk-1.3.4-1/jpeg/jchuff.c **** 	p++;
 1559              		.loc 1 1378 0
 1560 02da 4863F1   		movslq	%ecx, %rsi
1379:fltk-1.3.4-1/jpeg/jchuff.c ****       }
 1561              		.loc 1 1379 0
 1562 02dd 83C101   		addl	$1, %ecx
 1563              	.LVL197:
1378:fltk-1.3.4-1/jpeg/jchuff.c **** 	p++;
 1564              		.loc 1 1378 0
 1565 02e0 88443311 		movb	%al, 17(%rbx,%rsi)
 1566 02e4 4883C001 		addq	$1, %rax
 1567              	.LVL198:
1376:fltk-1.3.4-1/jpeg/jchuff.c ****       if (codesize[j] == i) {
 1568              		.loc 1 1376 0
 1569 02e8 483D0001 		cmpq	$256, %rax
 1569      0000
 1570 02ee 75E4     		jne	.L164
 1571              	.L203:
1375:fltk-1.3.4-1/jpeg/jchuff.c ****     for (j = 0; j <= 255; j++) {
 1572              		.loc 1 1375 0 discriminator 2
 1573 02f0 83C201   		addl	$1, %edx
 1574              	.LVL199:
 1575 02f3 83FA21   		cmpl	$33, %edx
 1576 02f6 75C6     		jne	.L162
1386:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1577              		.loc 1 1386 0
 1578 02f8 488B8424 		movq	2120(%rsp), %rax
 1578      48080000 
 1579 0300 64483304 		xorq	%fs:40, %rax
 1579      25280000 
 1579      00
1385:fltk-1.3.4-1/jpeg/jchuff.c **** }
 1580              		.loc 1 1385 0
 1581 0309 C7831401 		movl	$0, 276(%rbx)
 1581      00000000 
 1581      0000
1386:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1582              		.loc 1 1386 0
 1583 0313 753A     		jne	.L204
 1584 0315 4881C458 		addq	$2136, %rsp
 1584      080000
 1585              		.cfi_remember_state
 1586              		.cfi_def_cfa_offset 56
 1587 031c 5B       		popq	%rbx
 1588              		.cfi_def_cfa_offset 48
 1589              	.LVL200:
 1590 031d 5D       		popq	%rbp
 1591              		.cfi_def_cfa_offset 40
 1592 031e 415C     		popq	%r12
 1593              		.cfi_def_cfa_offset 32
 1594              	.LVL201:
 1595 0320 415D     		popq	%r13
 1596              		.cfi_def_cfa_offset 24
 1597 0322 415E     		popq	%r14
 1598              		.cfi_def_cfa_offset 16
 1599 0324 415F     		popq	%r15
 1600              		.cfi_def_cfa_offset 8
 1601 0326 C3       		ret
 1602              	.LVL202:
 1603              	.L171:
 1604              		.cfi_restore_state
 1605 0327 4C89C2   		movq	%r8, %rdx
 1606 032a E901FFFF 		jmp	.L154
 1606      FF
 1607              	.LVL203:
 1608              	.L202:
 1609 032f 83EF01   		subl	$1, %edi
 1610              	.LVL204:
 1611 0332 4883E901 		subq	$1, %rcx
1349:fltk-1.3.4-1/jpeg/jchuff.c ****     while (bits[i] > 0) {
 1612              		.loc 1 1349 0
 1613 0336 83FF0F   		cmpl	$15, %edi
 1614 0339 0F85BAFE 		jne	.L157
 1614      FFFF
 1615 033f E91CFFFF 		jmp	.L205
 1615      FF
 1616              	.LVL205:
 1617              	.L172:
1295:fltk-1.3.4-1/jpeg/jchuff.c **** 	v = freq[i];
 1618              		.loc 1 1295 0
 1619 0344 4C89C1   		movq	%r8, %rcx
 1620 0347 4489DF   		movl	%r11d, %edi
 1621 034a E9CCFDFF 		jmp	.L140
 1621      FF
 1622              	.LVL206:
 1623              	.L204:
1386:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1624              		.loc 1 1386 0
 1625 034f E8000000 		call	__stack_chk_fail
 1625      00
 1626              	.LVL207:
 1627              		.cfi_endproc
 1628              	.LFE83:
 1630              		.section	.text.unlikely.jpeg_gen_optimal_table
 1631              	.LCOLDE4:
 1632              		.section	.text.jpeg_gen_optimal_table
 1633              	.LHOTE4:
 1634              		.section	.text.unlikely.emit_buffered_bits.part.2,"ax",@progbits
 1635              	.LCOLDB5:
 1636              		.section	.text.emit_buffered_bits.part.2,"ax",@progbits
 1637              	.LHOTB5:
 1638              		.p2align 4,,15
 1640              	emit_buffered_bits.part.2:
 1641              	.LFB89:
 445:fltk-1.3.4-1/jpeg/jchuff.c **** 		    unsigned int nbits)
 1642              		.loc 1 445 0
 1643              		.cfi_startproc
 1644              	.LVL208:
 451:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, (unsigned int) (*bufstart), 1);
 1645              		.loc 1 451 0
 1646 0000 85D2     		testl	%edx, %edx
 1647 0002 0F842801 		je	.L221
 1647      0000
 445:fltk-1.3.4-1/jpeg/jchuff.c **** 		    unsigned int nbits)
 1648              		.loc 1 445 0
 1649 0008 4157     		pushq	%r15
 1650              		.cfi_def_cfa_offset 16
 1651              		.cfi_offset 15, -16
 1652 000a 8D42FF   		leal	-1(%rdx), %eax
 1653 000d 4156     		pushq	%r14
 1654              		.cfi_def_cfa_offset 24
 1655              		.cfi_offset 14, -24
 1656 000f 4155     		pushq	%r13
 1657              		.cfi_def_cfa_offset 32
 1658              		.cfi_offset 13, -32
 1659 0011 4154     		pushq	%r12
 1660              		.cfi_def_cfa_offset 40
 1661              		.cfi_offset 12, -40
 1662 0013 4989F6   		movq	%rsi, %r14
 1663 0016 55       		pushq	%rbp
 1664              		.cfi_def_cfa_offset 48
 1665              		.cfi_offset 6, -48
 1666 0017 53       		pushq	%rbx
 1667              		.cfi_def_cfa_offset 56
 1668              		.cfi_offset 3, -56
 1669 0018 4C8D6C06 		leaq	1(%rsi,%rax), %r13
 1669      01
 1670 001d 4889FB   		movq	%rdi, %rbx
 1671 0020 4883EC18 		subq	$24, %rsp
 1672              		.cfi_def_cfa_offset 80
 1673 0024 EB17     		jmp	.L215
 1674              	.LVL209:
 1675 0026 662E0F1F 		.p2align 4,,10
 1675      84000000 
 1675      0000
 1676              		.p2align 3
 1677              	.L208:
 453:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits--;
 1678              		.loc 1 453 0
 1679 0030 4983C601 		addq	$1, %r14
 1680              	.LVL210:
 451:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, (unsigned int) (*bufstart), 1);
 1681              		.loc 1 451 0
 1682 0034 4D39EE   		cmpq	%r13, %r14
 1683 0037 0F84E500 		je	.L222
 1683      0000
 1684              	.LVL211:
 1685              	.L215:
 1686              	.LBB104:
 1687              	.LBB105:
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 1688              		.loc 1 360 0
 1689 003d 8B83C000 		movl	192(%rbx), %eax
 1689      0000
 1690 0043 85C0     		testl	%eax, %eax
 1691 0045 75E9     		jne	.L208
 1692              	.LVL212:
 1693              	.LBB106:
 1694              	.LBB107:
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1695              		.loc 1 367 0
 1696 0047 8B4320   		movl	32(%rbx), %eax
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1697              		.loc 1 364 0
 1698 004a 410FB62E 		movzbl	(%r14), %ebp
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1699              		.loc 1 369 0
 1700 004e B9180000 		movl	$24, %ecx
 1700      00
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1701              		.loc 1 367 0
 1702 0053 448D7801 		leal	1(%rax), %r15d
 1703 0057 8944240C 		movl	%eax, 12(%rsp)
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1704              		.loc 1 364 0
 1705 005b 83E501   		andl	$1, %ebp
 1706              	.LVL213:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1707              		.loc 1 369 0
 1708 005e 4429F9   		subl	%r15d, %ecx
 1709 0061 48D3E5   		salq	%cl, %rbp
 1710              	.LVL214:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1711              		.loc 1 372 0
 1712 0064 480B6B18 		orq	24(%rbx), %rbp
 1713              	.LVL215:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 1714              		.loc 1 374 0
 1715 0068 4183FF07 		cmpl	$7, %r15d
 1716 006c 7F21     		jg	.L214
 1717 006e E99A0000 		jmp	.L209
 1717      00
 1718              	.LVL216:
 1719              		.p2align 4,,10
 1720 0073 0F1F4400 		.p2align 3
 1720      00
 1721              	.L210:
 1722              	.LBB108:
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 1723              		.loc 1 378 0
 1724 0078 4181FCFF 		cmpl	$255, %r12d
 1724      000000
 1725 007f 7448     		je	.L223
 1726              	.L212:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 1727              		.loc 1 382 0
 1728 0081 4183EF08 		subl	$8, %r15d
 1729              	.LVL217:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 1730              		.loc 1 381 0
 1731 0085 48C1E508 		salq	$8, %rbp
 1732              	.LVL218:
 1733              	.LBE108:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 1734              		.loc 1 374 0
 1735 0089 4183FF07 		cmpl	$7, %r15d
 1736 008d 7E71     		jle	.L224
 1737              	.LVL219:
 1738              	.L214:
 1739              	.LBB109:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 1740              		.loc 1 377 0
 1741 008f 488B83C8 		movq	200(%rbx), %rax
 1741      000000
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1742              		.loc 1 375 0
 1743 0096 4889EA   		movq	%rbp, %rdx
 1744 0099 48C1FA10 		sarq	$16, %rdx
 1745 009d 440FB6E2 		movzbl	%dl, %r12d
 1746              	.LVL220:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 1747              		.loc 1 377 0
 1748 00a1 488D7801 		leaq	1(%rax), %rdi
 1749 00a5 4889BBC8 		movq	%rdi, 200(%rbx)
 1749      000000
 1750 00ac 8810     		movb	%dl, (%rax)
 1751 00ae 4883ABD0 		subq	$1, 208(%rbx)
 1751      00000001 
 1752 00b6 75C0     		jne	.L210
 1753 00b8 4889DF   		movq	%rbx, %rdi
 1754 00bb E8000000 		call	dump_buffer_e
 1754      00
 1755              	.LVL221:
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 1756              		.loc 1 378 0
 1757 00c0 4181FCFF 		cmpl	$255, %r12d
 1757      000000
 1758 00c7 75B8     		jne	.L212
 1759              	.L223:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 1760              		.loc 1 379 0
 1761 00c9 488B83C8 		movq	200(%rbx), %rax
 1761      000000
 1762 00d0 488D5001 		leaq	1(%rax), %rdx
 1763 00d4 488993C8 		movq	%rdx, 200(%rbx)
 1763      000000
 1764 00db C60000   		movb	$0, (%rax)
 1765 00de 4883ABD0 		subq	$1, 208(%rbx)
 1765      00000001 
 1766 00e6 7599     		jne	.L212
 1767 00e8 4889DF   		movq	%rbx, %rdi
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 1768              		.loc 1 382 0
 1769 00eb 4183EF08 		subl	$8, %r15d
 1770              	.LVL222:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 1771              		.loc 1 381 0
 1772 00ef 48C1E508 		salq	$8, %rbp
 1773              	.LVL223:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 1774              		.loc 1 379 0
 1775 00f3 E8000000 		call	dump_buffer_e
 1775      00
 1776              	.LVL224:
 1777              	.LBE109:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 1778              		.loc 1 374 0
 1779 00f8 4183FF07 		cmpl	$7, %r15d
 1780 00fc 7F91     		jg	.L214
 1781 00fe 6690     		.p2align 4,,10
 1782              		.p2align 3
 1783              	.L224:
 1784 0100 448B7C24 		movl	12(%rsp), %r15d
 1784      0C
 1785              	.LVL225:
 1786 0105 4183EF07 		subl	$7, %r15d
 1787 0109 4183E707 		andl	$7, %r15d
 1788              	.LVL226:
 1789              	.L209:
 1790              	.LBE107:
 1791              	.LBE106:
 1792              	.LBE105:
 1793              	.LBE104:
 453:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits--;
 1794              		.loc 1 453 0
 1795 010d 4983C601 		addq	$1, %r14
 1796              	.LVL227:
 1797              	.LBB113:
 1798              	.LBB112:
 1799              	.LBB111:
 1800              	.LBB110:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 1801              		.loc 1 385 0
 1802 0111 48896B18 		movq	%rbp, 24(%rbx)
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 1803              		.loc 1 386 0
 1804 0115 44897B20 		movl	%r15d, 32(%rbx)
 1805              	.LVL228:
 1806              	.LBE110:
 1807              	.LBE111:
 1808              	.LBE112:
 1809              	.LBE113:
 451:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, (unsigned int) (*bufstart), 1);
 1810              		.loc 1 451 0
 1811 0119 4D39EE   		cmpq	%r13, %r14
 1812 011c 0F851BFF 		jne	.L215
 1812      FFFF
 1813              	.LVL229:
 1814              	.L222:
 456:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1815              		.loc 1 456 0
 1816 0122 4883C418 		addq	$24, %rsp
 1817              		.cfi_def_cfa_offset 56
 1818 0126 5B       		popq	%rbx
 1819              		.cfi_restore 3
 1820              		.cfi_def_cfa_offset 48
 1821              	.LVL230:
 1822 0127 5D       		popq	%rbp
 1823              		.cfi_restore 6
 1824              		.cfi_def_cfa_offset 40
 1825 0128 415C     		popq	%r12
 1826              		.cfi_restore 12
 1827              		.cfi_def_cfa_offset 32
 1828 012a 415D     		popq	%r13
 1829              		.cfi_restore 13
 1830              		.cfi_def_cfa_offset 24
 1831 012c 415E     		popq	%r14
 1832              		.cfi_restore 14
 1833              		.cfi_def_cfa_offset 16
 1834              	.LVL231:
 1835 012e 415F     		popq	%r15
 1836              		.cfi_restore 15
 1837              		.cfi_def_cfa_offset 8
 1838              	.LVL232:
 1839              	.L221:
 1840 0130 F3C3     		rep ret
 1841              		.cfi_endproc
 1842              	.LFE89:
 1844              		.section	.text.unlikely.emit_buffered_bits.part.2
 1845              	.LCOLDE5:
 1846              		.section	.text.emit_buffered_bits.part.2
 1847              	.LHOTE5:
 1848              		.section	.text.unlikely.emit_eobrun,"ax",@progbits
 1849              	.LCOLDB6:
 1850              		.section	.text.emit_eobrun,"ax",@progbits
 1851              	.LHOTB6:
 1852              		.p2align 4,,15
 1854              	emit_eobrun:
 1855              	.LFB71:
 465:fltk-1.3.4-1/jpeg/jchuff.c ****   register int temp, nbits;
 1856              		.loc 1 465 0
 1857              		.cfi_startproc
 1858              	.LVL233:
 468:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = entropy->EOBRUN;
 1859              		.loc 1 468 0
 1860 0000 8B87E400 		movl	228(%rdi), %eax
 1860      0000
 1861 0006 85C0     		testl	%eax, %eax
 1862 0008 0F84A000 		je	.L263
 1862      0000
 465:fltk-1.3.4-1/jpeg/jchuff.c ****   register int temp, nbits;
 1863              		.loc 1 465 0
 1864 000e 4157     		pushq	%r15
 1865              		.cfi_def_cfa_offset 16
 1866              		.cfi_offset 15, -16
 1867 0010 4156     		pushq	%r14
 1868              		.cfi_def_cfa_offset 24
 1869              		.cfi_offset 14, -24
 1870 0012 4155     		pushq	%r13
 1871              		.cfi_def_cfa_offset 32
 1872              		.cfi_offset 13, -32
 1873 0014 4154     		pushq	%r12
 1874              		.cfi_def_cfa_offset 40
 1875              		.cfi_offset 12, -40
 1876 0016 55       		pushq	%rbp
 1877              		.cfi_def_cfa_offset 48
 1878              		.cfi_offset 6, -48
 1879 0017 53       		pushq	%rbx
 1880              		.cfi_def_cfa_offset 56
 1881              		.cfi_offset 3, -56
 1882 0018 4889FB   		movq	%rdi, %rbx
 1883              	.LVL234:
 1884 001b 4883EC08 		subq	$8, %rsp
 1885              		.cfi_def_cfa_offset 64
 471:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 1886              		.loc 1 471 0
 1887 001f D1F8     		sarl	%eax
 1888              	.LVL235:
 1889 0021 0F84C602 		je	.L252
 1889      0000
 1890 0027 31ED     		xorl	%ebp, %ebp
 1891              	.LVL236:
 1892 0029 0F1F8000 		.p2align 4,,10
 1892      000000
 1893              		.p2align 3
 1894              	.L228:
 472:fltk-1.3.4-1/jpeg/jchuff.c ****     /* safety check: shouldn't happen given limited correction-bit buffer */
 1895              		.loc 1 472 0
 1896 0030 83C501   		addl	$1, %ebp
 1897              	.LVL237:
 471:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 1898              		.loc 1 471 0
 1899 0033 D1F8     		sarl	%eax
 1900              	.LVL238:
 1901 0035 75F9     		jne	.L228
 474:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 1902              		.loc 1 474 0
 1903 0037 83FD0E   		cmpl	$14, %ebp
 1904 003a 0F8F3002 		jg	.L265
 1904      0000
 1905              	.LVL239:
 1906              	.L264:
 1907 0040 89E8     		movl	%ebp, %eax
 1908 0042 C1E004   		sall	$4, %eax
 1909              	.LVL240:
 1910              	.L227:
 1911              	.LBB133:
 1912              	.LBB134:
 431:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 1913              		.loc 1 431 0
 1914 0045 8B8BC000 		movl	192(%rbx), %ecx
 1914      0000
 1915              	.LBE134:
 1916              	.LBE133:
 477:fltk-1.3.4-1/jpeg/jchuff.c ****     if (nbits)
 1917              		.loc 1 477 0
 1918 004b 486393E0 		movslq	224(%rbx), %rdx
 1918      000000
 1919              	.LVL241:
 1920              	.LBB157:
 1921              	.LBB153:
 431:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 1922              		.loc 1 431 0
 1923 0052 85C9     		testl	%ecx, %ecx
 1924 0054 745A     		je	.L230
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 1925              		.loc 1 432 0
 1926 0056 488B94D3 		movq	160(%rbx,%rdx,8), %rdx
 1926      A0000000 
 1927              	.LVL242:
 1928 005e 4898     		cltq
 1929 0060 488304C2 		addq	$1, (%rdx,%rax,8)
 1929      01
 1930              	.LVL243:
 1931              	.LBE153:
 1932              	.LBE157:
 478:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_bits_e(entropy, entropy->EOBRUN, nbits);
 1933              		.loc 1 478 0
 1934 0065 85ED     		testl	%ebp, %ebp
 1935              	.LBB158:
 1936              	.LBB159:
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 1937              		.loc 1 360 0
 1938 0067 8B93C000 		movl	192(%rbx), %edx
 1938      0000
 1939              	.LBE159:
 1940              	.LBE158:
 478:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_bits_e(entropy, entropy->EOBRUN, nbits);
 1941              		.loc 1 478 0
 1942 006d 0F853701 		jne	.L266
 1942      0000
 1943              	.L251:
 1944              	.LVL244:
 1945              	.LBB169:
 1946              	.LBB170:
 1947              	.LBB171:
 1948              	.LBB172:
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 1949              		.loc 1 448 0
 1950 0073 85D2     		testl	%edx, %edx
 1951              	.LBE172:
 1952              	.LBE171:
 481:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1953              		.loc 1 481 0
 1954 0075 C783E400 		movl	$0, 228(%rbx)
 1954      00000000 
 1954      0000
 1955              	.LVL245:
 1956              	.LBB174:
 1957              	.LBB173:
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 1958              		.loc 1 448 0
 1959 007f 7515     		jne	.L248
 1960 0081 8B93E800 		movl	232(%rbx), %edx
 1960      0000
 1961 0087 4889DF   		movq	%rbx, %rdi
 1962 008a 488BB3F0 		movq	240(%rbx), %rsi
 1962      000000
 1963 0091 E8000000 		call	emit_buffered_bits.part.2
 1963      00
 1964              	.LVL246:
 1965              	.L248:
 1966              	.LBE173:
 1967              	.LBE174:
 485:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 1968              		.loc 1 485 0
 1969 0096 C783E800 		movl	$0, 232(%rbx)
 1969      00000000 
 1969      0000
 1970              	.LBE170:
 1971              	.LBE169:
 487:fltk-1.3.4-1/jpeg/jchuff.c **** 
 1972              		.loc 1 487 0
 1973 00a0 4883C408 		addq	$8, %rsp
 1974              		.cfi_def_cfa_offset 56
 1975 00a4 5B       		popq	%rbx
 1976              		.cfi_restore 3
 1977              		.cfi_def_cfa_offset 48
 1978              	.LVL247:
 1979 00a5 5D       		popq	%rbp
 1980              		.cfi_restore 6
 1981              		.cfi_def_cfa_offset 40
 1982 00a6 415C     		popq	%r12
 1983              		.cfi_restore 12
 1984              		.cfi_def_cfa_offset 32
 1985 00a8 415D     		popq	%r13
 1986              		.cfi_restore 13
 1987              		.cfi_def_cfa_offset 24
 1988 00aa 415E     		popq	%r14
 1989              		.cfi_restore 14
 1990              		.cfi_def_cfa_offset 16
 1991 00ac 415F     		popq	%r15
 1992              		.cfi_restore 15
 1993              		.cfi_def_cfa_offset 8
 1994              	.LVL248:
 1995              	.L263:
 1996 00ae F3C3     		rep ret
 1997              	.LVL249:
 1998              		.p2align 4,,10
 1999              		.p2align 3
 2000              	.L230:
 2001              		.cfi_def_cfa_offset 64
 2002              		.cfi_offset 3, -56
 2003              		.cfi_offset 6, -48
 2004              		.cfi_offset 12, -40
 2005              		.cfi_offset 13, -32
 2006              		.cfi_offset 14, -24
 2007              		.cfi_offset 15, -16
 2008              	.LBB176:
 2009              	.LBB154:
 2010              	.LBB135:
 2011              	.LBB136:
 434:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 2012              		.loc 1 434 0
 2013 00b0 488B54D3 		movq	96(%rbx,%rdx,8), %rdx
 2013      60
 2014              	.LVL250:
 435:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2015              		.loc 1 435 0
 2016 00b5 4898     		cltq
 2017 00b7 440FB6AC 		movzbl	1024(%rdx,%rax), %r13d
 2017      02000400 
 2017      00
 2018 00c0 448B2482 		movl	(%rdx,%rax,4), %r12d
 2019              	.LVL251:
 2020              	.LBB137:
 2021              	.LBB138:
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 2022              		.loc 1 357 0
 2023 00c4 4585ED   		testl	%r13d, %r13d
 2024 00c7 0F84CB01 		je	.L232
 2024      0000
 2025              	.LVL252:
 2026              	.L236:
 2027              	.LBB139:
 2028              	.LBB140:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2029              		.loc 1 364 0
 2030 00cd 4489E9   		movl	%r13d, %ecx
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2031              		.loc 1 367 0
 2032 00d0 44036B20 		addl	32(%rbx), %r13d
 2033              	.LVL253:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2034              		.loc 1 364 0
 2035 00d4 B8010000 		movl	$1, %eax
 2035      00
 2036 00d9 48D3E0   		salq	%cl, %rax
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2037              		.loc 1 369 0
 2038 00dc B9180000 		movl	$24, %ecx
 2038      00
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2039              		.loc 1 364 0
 2040 00e1 4883E801 		subq	$1, %rax
 2041 00e5 4121C4   		andl	%eax, %r12d
 2042              	.LVL254:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2043              		.loc 1 369 0
 2044 00e8 4429E9   		subl	%r13d, %ecx
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2045              		.loc 1 374 0
 2046 00eb 4589EE   		movl	%r13d, %r14d
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2047              		.loc 1 369 0
 2048 00ee 49D3E4   		salq	%cl, %r12
 2049              	.LVL255:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2050              		.loc 1 372 0
 2051 00f1 4C0B6318 		orq	24(%rbx), %r12
 2052              	.LVL256:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2053              		.loc 1 374 0
 2054 00f5 4183FD07 		cmpl	$7, %r13d
 2055 00f9 7F1C     		jg	.L255
 2056 00fb E9940000 		jmp	.L234
 2056      00
 2057              	.LVL257:
 2058              		.p2align 4,,10
 2059              		.p2align 3
 2060              	.L237:
 2061              	.LBB141:
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 2062              		.loc 1 378 0
 2063 0100 4181FFFF 		cmpl	$255, %r15d
 2063      000000
 2064 0107 7448     		je	.L267
 2065              	.L239:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2066              		.loc 1 382 0
 2067 0109 4183EE08 		subl	$8, %r14d
 2068              	.LVL258:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 2069              		.loc 1 381 0
 2070 010d 49C1E408 		salq	$8, %r12
 2071              	.LVL259:
 2072              	.LBE141:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2073              		.loc 1 374 0
 2074 0111 4183FE07 		cmpl	$7, %r14d
 2075 0115 7E79     		jle	.L268
 2076              	.LVL260:
 2077              	.L255:
 2078              	.LBB142:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2079              		.loc 1 377 0
 2080 0117 488B83C8 		movq	200(%rbx), %rax
 2080      000000
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2081              		.loc 1 375 0
 2082 011e 4C89E2   		movq	%r12, %rdx
 2083 0121 48C1FA10 		sarq	$16, %rdx
 2084 0125 440FB6FA 		movzbl	%dl, %r15d
 2085              	.LVL261:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2086              		.loc 1 377 0
 2087 0129 488D4801 		leaq	1(%rax), %rcx
 2088 012d 48898BC8 		movq	%rcx, 200(%rbx)
 2088      000000
 2089 0134 8810     		movb	%dl, (%rax)
 2090 0136 4883ABD0 		subq	$1, 208(%rbx)
 2090      00000001 
 2091 013e 75C0     		jne	.L237
 2092 0140 4889DF   		movq	%rbx, %rdi
 2093 0143 E8000000 		call	dump_buffer_e
 2093      00
 2094              	.LVL262:
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 2095              		.loc 1 378 0
 2096 0148 4181FFFF 		cmpl	$255, %r15d
 2096      000000
 2097 014f 75B8     		jne	.L239
 2098              	.L267:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 2099              		.loc 1 379 0
 2100 0151 488B83C8 		movq	200(%rbx), %rax
 2100      000000
 2101 0158 488D5001 		leaq	1(%rax), %rdx
 2102 015c 488993C8 		movq	%rdx, 200(%rbx)
 2102      000000
 2103 0163 C60000   		movb	$0, (%rax)
 2104 0166 4883ABD0 		subq	$1, 208(%rbx)
 2104      00000001 
 2105 016e 7599     		jne	.L239
 2106 0170 4889DF   		movq	%rbx, %rdi
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2107              		.loc 1 382 0
 2108 0173 4183EE08 		subl	$8, %r14d
 2109              	.LVL263:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 2110              		.loc 1 381 0
 2111 0177 49C1E408 		salq	$8, %r12
 2112              	.LVL264:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 2113              		.loc 1 379 0
 2114 017b E8000000 		call	dump_buffer_e
 2114      00
 2115              	.LVL265:
 2116              	.LBE142:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2117              		.loc 1 374 0
 2118 0180 4183FE07 		cmpl	$7, %r14d
 2119 0184 7F91     		jg	.L255
 2120 0186 662E0F1F 		.p2align 4,,10
 2120      84000000 
 2120      0000
 2121              		.p2align 3
 2122              	.L268:
 2123 0190 4183E507 		andl	$7, %r13d
 2124              	.LVL266:
 2125              	.L234:
 2126              	.LBE140:
 2127              	.LBE139:
 2128              	.LBE138:
 2129              	.LBE137:
 2130              	.LBE136:
 2131              	.LBE135:
 2132              	.LBE154:
 2133              	.LBE176:
 478:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_bits_e(entropy, entropy->EOBRUN, nbits);
 2134              		.loc 1 478 0
 2135 0194 85ED     		testl	%ebp, %ebp
 2136              	.LBB177:
 2137              	.LBB155:
 2138              	.LBB151:
 2139              	.LBB149:
 2140              	.LBB147:
 2141              	.LBB145:
 2142              	.LBB144:
 2143              	.LBB143:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 2144              		.loc 1 385 0
 2145 0196 4C896318 		movq	%r12, 24(%rbx)
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 2146              		.loc 1 386 0
 2147 019a 44896B20 		movl	%r13d, 32(%rbx)
 2148              	.LVL267:
 2149              	.LBE143:
 2150              	.LBE144:
 2151              	.LBE145:
 2152              	.LBE147:
 2153              	.LBE149:
 2154              	.LBE151:
 2155              	.LBE155:
 2156              	.LBE177:
 2157              	.LBB178:
 2158              	.LBB166:
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 2159              		.loc 1 360 0
 2160 019e 8B93C000 		movl	192(%rbx), %edx
 2160      0000
 2161              	.LBE166:
 2162              	.LBE178:
 478:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_bits_e(entropy, entropy->EOBRUN, nbits);
 2163              		.loc 1 478 0
 2164 01a4 0F84C9FE 		je	.L251
 2164      FFFF
 2165              	.LVL268:
 2166              	.L266:
 2167              	.LBB179:
 2168              	.LBB167:
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 2169              		.loc 1 360 0
 2170 01aa 85D2     		testl	%edx, %edx
 2171 01ac 0F851101 		jne	.L235
 2171      0000
 2172              	.LVL269:
 2173              	.LBB160:
 2174              	.LBB161:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2175              		.loc 1 364 0
 2176 01b2 89E9     		movl	%ebp, %ecx
 2177 01b4 B8010000 		movl	$1, %eax
 2177      00
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2178              		.loc 1 367 0
 2179 01b9 036B20   		addl	32(%rbx), %ebp
 2180              	.LVL270:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2181              		.loc 1 364 0
 2182 01bc 48D3E0   		salq	%cl, %rax
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2183              		.loc 1 369 0
 2184 01bf B9180000 		movl	$24, %ecx
 2184      00
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2185              		.loc 1 364 0
 2186 01c4 4C8D60FF 		leaq	-1(%rax), %r12
 2187 01c8 4423A3E4 		andl	228(%rbx), %r12d
 2187      000000
 2188              	.LVL271:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2189              		.loc 1 369 0
 2190 01cf 29E9     		subl	%ebp, %ecx
 2191 01d1 49D3E4   		salq	%cl, %r12
 2192              	.LVL272:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2193              		.loc 1 372 0
 2194 01d4 4C0B6318 		orq	24(%rbx), %r12
 2195              	.LVL273:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2196              		.loc 1 374 0
 2197 01d8 83FD07   		cmpl	$7, %ebp
 2198 01db 0F8E0001 		jle	.L242
 2198      0000
 2199 01e1 4189ED   		movl	%ebp, %r13d
 2200 01e4 EB25     		jmp	.L247
 2201              	.LVL274:
 2202 01e6 662E0F1F 		.p2align 4,,10
 2202      84000000 
 2202      0000
 2203              		.p2align 3
 2204              	.L243:
 2205              	.LBB162:
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 2206              		.loc 1 378 0
 2207 01f0 4181FEFF 		cmpl	$255, %r14d
 2207      000000
 2208 01f7 744C     		je	.L269
 2209              	.L245:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2210              		.loc 1 382 0
 2211 01f9 4183ED08 		subl	$8, %r13d
 2212              	.LVL275:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 2213              		.loc 1 381 0
 2214 01fd 49C1E408 		salq	$8, %r12
 2215              	.LVL276:
 2216              	.LBE162:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2217              		.loc 1 374 0
 2218 0201 4183FD07 		cmpl	$7, %r13d
 2219 0205 0F8ECD00 		jle	.L270
 2219      0000
 2220              	.LVL277:
 2221              	.L247:
 2222              	.LBB163:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2223              		.loc 1 377 0
 2224 020b 488B83C8 		movq	200(%rbx), %rax
 2224      000000
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2225              		.loc 1 375 0
 2226 0212 4C89E2   		movq	%r12, %rdx
 2227 0215 48C1FA10 		sarq	$16, %rdx
 2228 0219 440FB6F2 		movzbl	%dl, %r14d
 2229              	.LVL278:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2230              		.loc 1 377 0
 2231 021d 488D4801 		leaq	1(%rax), %rcx
 2232 0221 48898BC8 		movq	%rcx, 200(%rbx)
 2232      000000
 2233 0228 8810     		movb	%dl, (%rax)
 2234 022a 4883ABD0 		subq	$1, 208(%rbx)
 2234      00000001 
 2235 0232 75BC     		jne	.L243
 2236 0234 4889DF   		movq	%rbx, %rdi
 2237 0237 E8000000 		call	dump_buffer_e
 2237      00
 2238              	.LVL279:
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 2239              		.loc 1 378 0
 2240 023c 4181FEFF 		cmpl	$255, %r14d
 2240      000000
 2241 0243 75B4     		jne	.L245
 2242              	.L269:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 2243              		.loc 1 379 0
 2244 0245 488B83C8 		movq	200(%rbx), %rax
 2244      000000
 2245 024c 488D5001 		leaq	1(%rax), %rdx
 2246 0250 488993C8 		movq	%rdx, 200(%rbx)
 2246      000000
 2247 0257 C60000   		movb	$0, (%rax)
 2248 025a 4883ABD0 		subq	$1, 208(%rbx)
 2248      00000001 
 2249 0262 7595     		jne	.L245
 2250 0264 4889DF   		movq	%rbx, %rdi
 2251 0267 E8000000 		call	dump_buffer_e
 2251      00
 2252              	.LVL280:
 2253 026c EB8B     		jmp	.L245
 2254              	.LVL281:
 2255 026e 6690     		.p2align 4,,10
 2256              		.p2align 3
 2257              	.L265:
 2258              	.LBE163:
 2259              	.LBE161:
 2260              	.LBE160:
 2261              	.LBE167:
 2262              	.LBE179:
 475:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2263              		.loc 1 475 0
 2264 0270 488B83D8 		movq	216(%rbx), %rax
 2264      000000
 2265              	.LVL282:
 2266 0277 488B00   		movq	(%rax), %rax
 2267 027a C7402829 		movl	$41, 40(%rax)
 2267      000000
 2268 0281 488BBBD8 		movq	216(%rbx), %rdi
 2268      000000
 2269 0288 488B07   		movq	(%rdi), %rax
 2270 028b FF10     		call	*(%rax)
 2271              	.LVL283:
 2272 028d E9AEFDFF 		jmp	.L264
 2272      FF
 2273              	.LVL284:
 2274              		.p2align 4,,10
 2275 0292 660F1F44 		.p2align 3
 2275      0000
 2276              	.L232:
 2277              	.LBB180:
 2278              	.LBB156:
 2279              	.LBB152:
 2280              	.LBB150:
 2281              	.LBB148:
 2282              	.LBB146:
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2283              		.loc 1 358 0
 2284 0298 488B83D8 		movq	216(%rbx), %rax
 2284      000000
 2285 029f 488B00   		movq	(%rax), %rax
 2286 02a2 C7402829 		movl	$41, 40(%rax)
 2286      000000
 2287              	.LVL285:
 2288 02a9 488BBBD8 		movq	216(%rbx), %rdi
 2288      000000
 2289 02b0 488B07   		movq	(%rdi), %rax
 2290 02b3 FF10     		call	*(%rax)
 2291              	.LVL286:
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 2292              		.loc 1 360 0
 2293 02b5 8B83C000 		movl	192(%rbx), %eax
 2293      0000
 2294 02bb 85C0     		testl	%eax, %eax
 2295 02bd 0F840AFE 		je	.L236
 2295      FFFF
 2296              	.LVL287:
 2297              	.L235:
 2298              	.LBE146:
 2299              	.LBE148:
 2300              	.LBE150:
 2301              	.LBE152:
 2302              	.LBE156:
 2303              	.LBE180:
 2304              	.LBB181:
 2305              	.LBB175:
 481:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2306              		.loc 1 481 0
 2307 02c3 C783E400 		movl	$0, 228(%rbx)
 2307      00000000 
 2307      0000
 2308              	.LVL288:
 2309 02cd E9C4FDFF 		jmp	.L248
 2309      FF
 2310              	.LVL289:
 2311              		.p2align 4,,10
 2312 02d2 660F1F44 		.p2align 3
 2312      0000
 2313              	.L270:
 2314 02d8 8B93C000 		movl	192(%rbx), %edx
 2314      0000
 2315 02de 83E507   		andl	$7, %ebp
 2316              	.LVL290:
 2317              	.L242:
 2318              	.LBE175:
 2319              	.LBE181:
 2320              	.LBB182:
 2321              	.LBB168:
 2322              	.LBB165:
 2323              	.LBB164:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 2324              		.loc 1 385 0
 2325 02e1 4C896318 		movq	%r12, 24(%rbx)
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 2326              		.loc 1 386 0
 2327 02e5 896B20   		movl	%ebp, 32(%rbx)
 2328 02e8 E986FDFF 		jmp	.L251
 2328      FF
 2329              	.LVL291:
 2330              	.L252:
 2331              	.LBE164:
 2332              	.LBE165:
 2333              	.LBE168:
 2334              	.LBE182:
 471:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 2335              		.loc 1 471 0
 2336 02ed 31C0     		xorl	%eax, %eax
 2337              	.LVL292:
 470:fltk-1.3.4-1/jpeg/jchuff.c ****     while ((temp >>= 1))
 2338              		.loc 1 470 0
 2339 02ef 31ED     		xorl	%ebp, %ebp
 2340 02f1 E94FFDFF 		jmp	.L227
 2340      FF
 2341              		.cfi_endproc
 2342              	.LFE71:
 2344              		.section	.text.unlikely.emit_eobrun
 2345              	.LCOLDE6:
 2346              		.section	.text.emit_eobrun
 2347              	.LHOTE6:
 2348              		.section	.text.unlikely.emit_restart_e,"ax",@progbits
 2349              	.LCOLDB7:
 2350              		.section	.text.emit_restart_e,"ax",@progbits
 2351              	.LHOTB7:
 2352              		.p2align 4,,15
 2354              	emit_restart_e:
 2355              	.LFB73:
 517:fltk-1.3.4-1/jpeg/jchuff.c ****   int ci;
 2356              		.loc 1 517 0
 2357              		.cfi_startproc
 2358              	.LVL293:
 2359 0000 4156     		pushq	%r14
 2360              		.cfi_def_cfa_offset 16
 2361              		.cfi_offset 14, -16
 2362 0002 4155     		pushq	%r13
 2363              		.cfi_def_cfa_offset 24
 2364              		.cfi_offset 13, -24
 2365 0004 4189F5   		movl	%esi, %r13d
 2366 0007 4154     		pushq	%r12
 2367              		.cfi_def_cfa_offset 32
 2368              		.cfi_offset 12, -32
 2369 0009 55       		pushq	%rbp
 2370              		.cfi_def_cfa_offset 40
 2371              		.cfi_offset 6, -40
 2372 000a 53       		pushq	%rbx
 2373              		.cfi_def_cfa_offset 48
 2374              		.cfi_offset 3, -48
 517:fltk-1.3.4-1/jpeg/jchuff.c ****   int ci;
 2375              		.loc 1 517 0
 2376 000b 4889FB   		movq	%rdi, %rbx
 520:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2377              		.loc 1 520 0
 2378 000e E8000000 		call	emit_eobrun
 2378      00
 2379              	.LVL294:
 522:fltk-1.3.4-1/jpeg/jchuff.c ****     flush_bits_e(entropy);
 2380              		.loc 1 522 0
 2381 0013 8BBBC000 		movl	192(%rbx), %edi
 2381      0000
 2382 0019 85FF     		testl	%edi, %edi
 2383 001b 757C     		jne	.L273
 2384              	.LVL295:
 2385              	.LBB190:
 2386              	.LBB191:
 2387              	.LBB192:
 2388              	.LBB193:
 2389              	.LBB194:
 2390              	.LBB195:
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2391              		.loc 1 367 0
 2392 001d 8B4320   		movl	32(%rbx), %eax
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2393              		.loc 1 369 0
 2394 0020 B9180000 		movl	$24, %ecx
 2394      00
 2395 0025 41BC7F00 		movl	$127, %r12d
 2395      0000
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2396              		.loc 1 367 0
 2397 002b 8D6807   		leal	7(%rax), %ebp
 2398              	.LVL296:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2399              		.loc 1 369 0
 2400 002e 29E9     		subl	%ebp, %ecx
 2401 0030 49D3E4   		salq	%cl, %r12
 2402              	.LVL297:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2403              		.loc 1 372 0
 2404 0033 4C0B6318 		orq	24(%rbx), %r12
 2405              	.LVL298:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2406              		.loc 1 374 0
 2407 0037 83FD07   		cmpl	$7, %ebp
 2408 003a 0F8FC100 		jg	.L290
 2408      0000
 2409              		.p2align 4,,10
 2410              		.p2align 3
 2411              	.L282:
 2412              	.LVL299:
 2413              	.LBE195:
 2414              	.LBE194:
 2415              	.LBE193:
 2416              	.LBE192:
 2417              	.LBE191:
 2418              	.LBE190:
 524:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_byte_e(entropy, JPEG_RST0 + restart_num);
 2419              		.loc 1 524 0
 2420 0040 488B83C8 		movq	200(%rbx), %rax
 2420      000000
 2421              	.LBB204:
 2422              	.LBB202:
 405:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = 0;
 2423              		.loc 1 405 0
 2424 0047 48C74318 		movq	$0, 24(%rbx)
 2424      00000000 
 406:fltk-1.3.4-1/jpeg/jchuff.c **** }
 2425              		.loc 1 406 0
 2426 004f C7432000 		movl	$0, 32(%rbx)
 2426      000000
 2427              	.LVL300:
 2428              	.LBE202:
 2429              	.LBE204:
 524:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_byte_e(entropy, JPEG_RST0 + restart_num);
 2430              		.loc 1 524 0
 2431 0056 488D5001 		leaq	1(%rax), %rdx
 2432 005a 488993C8 		movq	%rdx, 200(%rbx)
 2432      000000
 2433 0061 C600FF   		movb	$-1, (%rax)
 2434 0064 4883ABD0 		subq	$1, 208(%rbx)
 2434      00000001 
 2435 006c 0F841E01 		je	.L296
 2435      0000
 2436              	.L276:
 525:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2437              		.loc 1 525 0
 2438 0072 488B83C8 		movq	200(%rbx), %rax
 2438      000000
 2439 0079 4183ED30 		subl	$48, %r13d
 2440              	.LVL301:
 2441 007d 488D5001 		leaq	1(%rax), %rdx
 2442 0081 488993C8 		movq	%rdx, 200(%rbx)
 2442      000000
 2443 0088 448828   		movb	%r13b, (%rax)
 2444 008b 4883ABD0 		subq	$1, 208(%rbx)
 2444      00000001 
 2445 0093 0F84E700 		je	.L297
 2445      0000
 2446              	.LVL302:
 2447              	.L273:
 528:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Re-initialize DC predictions to 0 */
 2448              		.loc 1 528 0
 2449 0099 488B93D8 		movq	216(%rbx), %rdx
 2449      000000
 2450 00a0 8BB2CC01 		movl	460(%rdx), %esi
 2450      0000
 2451 00a6 85F6     		testl	%esi, %esi
 2452 00a8 0F85B200 		jne	.L284
 2452      0000
 2453              	.LVL303:
 530:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->saved.last_dc_val[ci] = 0;
 2454              		.loc 1 530 0 discriminator 1
 2455 00ae 8B8A7401 		movl	372(%rdx), %ecx
 2455      0000
 2456 00b4 4883C324 		addq	$36, %rbx
 2457              	.LVL304:
 2458 00b8 31C0     		xorl	%eax, %eax
 2459 00ba 85C9     		testl	%ecx, %ecx
 2460 00bc 7E15     		jle	.L271
 2461              	.LVL305:
 2462              	.L289:
 531:fltk-1.3.4-1/jpeg/jchuff.c ****   } else {
 2463              		.loc 1 531 0 discriminator 3
 2464 00be C7030000 		movl	$0, (%rbx)
 2464      0000
 530:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->saved.last_dc_val[ci] = 0;
 2465              		.loc 1 530 0 discriminator 3
 2466 00c4 83C001   		addl	$1, %eax
 2467              	.LVL306:
 2468 00c7 4883C304 		addq	$4, %rbx
 2469 00cb 39827401 		cmpl	%eax, 372(%rdx)
 2469      0000
 2470 00d1 7FEB     		jg	.L289
 2471              	.LVL307:
 2472              	.L271:
 537:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2473              		.loc 1 537 0
 2474 00d3 5B       		popq	%rbx
 2475              		.cfi_remember_state
 2476              		.cfi_def_cfa_offset 40
 2477 00d4 5D       		popq	%rbp
 2478              		.cfi_def_cfa_offset 32
 2479 00d5 415C     		popq	%r12
 2480              		.cfi_def_cfa_offset 24
 2481 00d7 415D     		popq	%r13
 2482              		.cfi_def_cfa_offset 16
 2483 00d9 415E     		popq	%r14
 2484              		.cfi_def_cfa_offset 8
 2485 00db C3       		ret
 2486              	.LVL308:
 2487 00dc 0F1F4000 		.p2align 4,,10
 2488              		.p2align 3
 2489              	.L299:
 2490              		.cfi_restore_state
 2491              	.LBB205:
 2492              	.LBB203:
 2493              	.LBB201:
 2494              	.LBB200:
 2495              	.LBB199:
 2496              	.LBB198:
 2497              	.LBB196:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2498              		.loc 1 377 0
 2499 00e0 4889DF   		movq	%rbx, %rdi
 2500 00e3 E8000000 		call	dump_buffer_e
 2500      00
 2501              	.LVL309:
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 2502              		.loc 1 378 0
 2503 00e8 4181FEFF 		cmpl	$255, %r14d
 2503      000000
 2504 00ef 7442     		je	.L298
 2505              	.L279:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2506              		.loc 1 382 0
 2507 00f1 83ED08   		subl	$8, %ebp
 2508              	.LVL310:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 2509              		.loc 1 381 0
 2510 00f4 49C1E408 		salq	$8, %r12
 2511              	.LVL311:
 2512              	.LBE196:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2513              		.loc 1 374 0
 2514 00f8 83FD07   		cmpl	$7, %ebp
 2515 00fb 0F8E3FFF 		jle	.L282
 2515      FFFF
 2516              	.LVL312:
 2517              	.L290:
 2518              	.LBB197:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2519              		.loc 1 377 0
 2520 0101 488B83C8 		movq	200(%rbx), %rax
 2520      000000
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2521              		.loc 1 375 0
 2522 0108 4C89E2   		movq	%r12, %rdx
 2523 010b 48C1FA10 		sarq	$16, %rdx
 2524 010f 440FB6F2 		movzbl	%dl, %r14d
 2525              	.LVL313:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2526              		.loc 1 377 0
 2527 0113 488D4801 		leaq	1(%rax), %rcx
 2528 0117 48898BC8 		movq	%rcx, 200(%rbx)
 2528      000000
 2529 011e 8810     		movb	%dl, (%rax)
 2530 0120 4883ABD0 		subq	$1, 208(%rbx)
 2530      00000001 
 2531 0128 74B6     		je	.L299
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 2532              		.loc 1 378 0
 2533 012a 4181FEFF 		cmpl	$255, %r14d
 2533      000000
 2534 0131 75BE     		jne	.L279
 2535              	.L298:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 2536              		.loc 1 379 0
 2537 0133 488B83C8 		movq	200(%rbx), %rax
 2537      000000
 2538 013a 488D5001 		leaq	1(%rax), %rdx
 2539 013e 488993C8 		movq	%rdx, 200(%rbx)
 2539      000000
 2540 0145 C60000   		movb	$0, (%rax)
 2541 0148 4883ABD0 		subq	$1, 208(%rbx)
 2541      00000001 
 2542 0150 759F     		jne	.L279
 2543 0152 4889DF   		movq	%rbx, %rdi
 2544 0155 E8000000 		call	dump_buffer_e
 2544      00
 2545              	.LVL314:
 2546 015a EB95     		jmp	.L279
 2547              	.LVL315:
 2548 015c 0F1F4000 		.p2align 4,,10
 2549              		.p2align 3
 2550              	.L284:
 2551              	.LBE197:
 2552              	.LBE198:
 2553              	.LBE199:
 2554              	.LBE200:
 2555              	.LBE201:
 2556              	.LBE203:
 2557              	.LBE205:
 534:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->BE = 0;
 2558              		.loc 1 534 0
 2559 0160 C783E400 		movl	$0, 228(%rbx)
 2559      00000000 
 2559      0000
 535:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2560              		.loc 1 535 0
 2561 016a C783E800 		movl	$0, 232(%rbx)
 2561      00000000 
 2561      0000
 537:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2562              		.loc 1 537 0
 2563 0174 5B       		popq	%rbx
 2564              		.cfi_remember_state
 2565              		.cfi_def_cfa_offset 40
 2566              	.LVL316:
 2567 0175 5D       		popq	%rbp
 2568              		.cfi_def_cfa_offset 32
 2569 0176 415C     		popq	%r12
 2570              		.cfi_def_cfa_offset 24
 2571 0178 415D     		popq	%r13
 2572              		.cfi_def_cfa_offset 16
 2573 017a 415E     		popq	%r14
 2574              		.cfi_def_cfa_offset 8
 2575 017c C3       		ret
 2576              	.LVL317:
 2577 017d 0F1F00   		.p2align 4,,10
 2578              		.p2align 3
 2579              	.L297:
 2580              		.cfi_restore_state
 525:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2581              		.loc 1 525 0 discriminator 1
 2582 0180 4889DF   		movq	%rbx, %rdi
 2583 0183 E8000000 		call	dump_buffer_e
 2583      00
 2584              	.LVL318:
 2585 0188 E90CFFFF 		jmp	.L273
 2585      FF
 2586              	.LVL319:
 2587 018d 0F1F00   		.p2align 4,,10
 2588              		.p2align 3
 2589              	.L296:
 524:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_byte_e(entropy, JPEG_RST0 + restart_num);
 2590              		.loc 1 524 0 discriminator 1
 2591 0190 4889DF   		movq	%rbx, %rdi
 2592 0193 E8000000 		call	dump_buffer_e
 2592      00
 2593              	.LVL320:
 2594 0198 E9D5FEFF 		jmp	.L276
 2594      FF
 2595              		.cfi_endproc
 2596              	.LFE73:
 2598              		.section	.text.unlikely.emit_restart_e
 2599              	.LCOLDE7:
 2600              		.section	.text.emit_restart_e
 2601              	.LHOTE7:
 2602              		.section	.text.unlikely.encode_mcu_DC_first,"ax",@progbits
 2603              	.LCOLDB8:
 2604              		.section	.text.encode_mcu_DC_first,"ax",@progbits
 2605              	.LHOTB8:
 2606              		.p2align 4,,15
 2608              	encode_mcu_DC_first:
 2609              	.LFB74:
 547:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 2610              		.loc 1 547 0
 2611              		.cfi_startproc
 2612              	.LVL321:
 2613 0000 4157     		pushq	%r15
 2614              		.cfi_def_cfa_offset 16
 2615              		.cfi_offset 15, -16
 2616 0002 4156     		pushq	%r14
 2617              		.cfi_def_cfa_offset 24
 2618              		.cfi_offset 14, -24
 2619 0004 4989FE   		movq	%rdi, %r14
 2620 0007 4155     		pushq	%r13
 2621              		.cfi_def_cfa_offset 32
 2622              		.cfi_offset 13, -32
 2623 0009 4154     		pushq	%r12
 2624              		.cfi_def_cfa_offset 40
 2625              		.cfi_offset 12, -40
 2626 000b 55       		pushq	%rbp
 2627              		.cfi_def_cfa_offset 48
 2628              		.cfi_offset 6, -48
 2629 000c 53       		pushq	%rbx
 2630              		.cfi_def_cfa_offset 56
 2631              		.cfi_offset 3, -56
 2632 000d 4889F5   		movq	%rsi, %rbp
 2633 0010 4883EC28 		subq	$40, %rsp
 2634              		.cfi_def_cfa_offset 96
 554:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 2635              		.loc 1 554 0
 2636 0014 488B4728 		movq	40(%rdi), %rax
 548:fltk-1.3.4-1/jpeg/jchuff.c ****   register int temp, temp2;
 2637              		.loc 1 548 0
 2638 0018 488B9F30 		movq	560(%rdi), %rbx
 2638      020000
 2639              	.LVL322:
 554:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 2640              		.loc 1 554 0
 2641 001f 488B00   		movq	(%rax), %rax
 2642 0022 488983C8 		movq	%rax, 200(%rbx)
 2642      000000
 555:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2643              		.loc 1 555 0
 2644 0029 488B4728 		movq	40(%rdi), %rax
 2645 002d 488B4008 		movq	8(%rax), %rax
 2646 0031 488983D0 		movq	%rax, 208(%rbx)
 2646      000000
 558:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 2647              		.loc 1 558 0
 2648 0038 448B873C 		movl	316(%rdi), %r8d
 2648      010000
 2649 003f 4585C0   		testl	%r8d, %r8d
 2650 0042 740B     		je	.L301
 559:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_restart_e(entropy, entropy->next_restart_num);
 2651              		.loc 1 559 0
 2652 0044 8B7B38   		movl	56(%rbx), %edi
 2653              	.LVL323:
 2654 0047 85FF     		testl	%edi, %edi
 2655 0049 0F84FB03 		je	.L344
 2655      0000
 2656              	.LVL324:
 2657              	.L301:
 563:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
 2658              		.loc 1 563 0 discriminator 1
 2659 004f 418BB6A0 		movl	416(%r14), %esi
 2659      010000
 2660 0056 4531E4   		xorl	%r12d, %r12d
 2661 0059 4D8DAEA4 		leaq	420(%r14), %r13
 2661      010000
 2662 0060 85F6     		testl	%esi, %esi
 2663 0062 0F8E9B00 		jle	.L328
 2663      0000
 2664              	.LVL325:
 2665 0068 0F1F8400 		.p2align 4,,10
 2665      00000000 
 2666              		.p2align 3
 2667              	.L334:
 565:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2668              		.loc 1 565 0
 2669 0070 49635500 		movslq	0(%r13), %rdx
 570:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2670              		.loc 1 570 0
 2671 0074 418B8ED8 		movl	472(%r14), %ecx
 2671      010000
 565:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2672              		.loc 1 565 0
 2673 007b 498B84D6 		movq	376(%r14,%rdx,8), %rax
 2673      78010000 
 2674 0083 488D1493 		leaq	(%rbx,%rdx,4), %rdx
 2675 0087 4C637814 		movslq	20(%rax), %r15
 2676              	.LVL326:
 570:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2677              		.loc 1 570 0
 2678 008b 488B4500 		movq	0(%rbp), %rax
 2679 008f 0FBF00   		movswl	(%rax), %eax
 2680 0092 D3F8     		sarl	%cl, %eax
 2681              	.LVL327:
 573:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->saved.last_dc_val[ci] = temp;
 2682              		.loc 1 573 0
 2683 0094 4189C1   		movl	%eax, %r9d
 2684 0097 442B4A24 		subl	36(%rdx), %r9d
 2685              	.LVL328:
 574:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2686              		.loc 1 574 0
 2687 009b 894224   		movl	%eax, 36(%rdx)
 2688              	.LVL329:
 578:fltk-1.3.4-1/jpeg/jchuff.c ****       temp = -temp;		/* temp is abs value of input */
 2689              		.loc 1 578 0
 2690 009e 4585C9   		testl	%r9d, %r9d
 2691 00a1 0F882103 		js	.L345
 2691      0000
 2692              	.LVL330:
 587:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 2693              		.loc 1 587 0
 2694 00a7 0F848303 		je	.L333
 2694      0000
 2695 00ad 4489C8   		movl	%r9d, %eax
 2696              	.LVL331:
 2697              	.L306:
 2698 00b0 31D2     		xorl	%edx, %edx
 2699              	.LVL332:
 2700              		.p2align 4,,10
 2701 00b2 660F1F44 		.p2align 3
 2701      0000
 2702              	.L308:
 588:fltk-1.3.4-1/jpeg/jchuff.c ****       temp >>= 1;
 2703              		.loc 1 588 0
 2704 00b8 83C201   		addl	$1, %edx
 2705              	.LVL333:
 587:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 2706              		.loc 1 587 0
 2707 00bb D1F8     		sarl	%eax
 2708              	.LVL334:
 2709 00bd 75F9     		jne	.L308
 594:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 2710              		.loc 1 594 0
 2711 00bf 83FA0B   		cmpl	$11, %edx
 2712 00c2 0F8FD002 		jg	.L346
 2712      0000
 2713              	.LVL335:
 2714              	.L307:
 2715              	.LBB219:
 2716              	.LBB220:
 418:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->dc_count_ptrs[tbl_no][symbol]++;
 2717              		.loc 1 418 0
 2718 00c8 8B8BC000 		movl	192(%rbx), %ecx
 2718      0000
 2719 00ce 85C9     		testl	%ecx, %ecx
 2720 00d0 747E     		je	.L309
 419:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 2721              		.loc 1 419 0
 2722 00d2 4A8B8CFB 		movq	128(%rbx,%r15,8), %rcx
 2722      80000000 
 2723 00da 4863C2   		movslq	%edx, %rax
 2724 00dd 488304C1 		addq	$1, (%rcx,%rax,8)
 2724      01
 2725              	.LVL336:
 2726              	.LBE220:
 2727              	.LBE219:
 602:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_bits_e(entropy, (unsigned int) temp2, nbits);
 2728              		.loc 1 602 0
 2729 00e2 85D2     		testl	%edx, %edx
 2730 00e4 0F85AE01 		jne	.L347
 2730      0000
 2731              	.LVL337:
 2732              	.L315:
 563:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
 2733              		.loc 1 563 0 discriminator 2
 2734 00ea 4183C401 		addl	$1, %r12d
 2735              	.LVL338:
 2736 00ee 4983C504 		addq	$4, %r13
 2737 00f2 4883C508 		addq	$8, %rbp
 2738 00f6 4539A6A0 		cmpl	%r12d, 416(%r14)
 2738      010000
 2739 00fd 0F8F6DFF 		jg	.L334
 2739      FFFF
 2740              	.LVL339:
 2741              	.L328:
 606:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 2742              		.loc 1 606 0
 2743 0103 498B4628 		movq	40(%r14), %rax
 2744 0107 488B93C8 		movq	200(%rbx), %rdx
 2744      000000
 2745 010e 488910   		movq	%rdx, (%rax)
 607:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2746              		.loc 1 607 0
 2747 0111 488B93D0 		movq	208(%rbx), %rdx
 2747      000000
 2748 0118 498B4628 		movq	40(%r14), %rax
 2749 011c 48895008 		movq	%rdx, 8(%rax)
 610:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 2750              		.loc 1 610 0
 2751 0120 418B963C 		movl	316(%r14), %edx
 2751      010000
 2752 0127 85D2     		testl	%edx, %edx
 2753 0129 7411     		je	.L340
 611:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 2754              		.loc 1 611 0
 2755 012b 8B4338   		movl	56(%rbx), %eax
 2756 012e 85C0     		testl	%eax, %eax
 2757 0130 0F840103 		je	.L348
 2757      0000
 2758              	.L329:
 616:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2759              		.loc 1 616 0
 2760 0136 83E801   		subl	$1, %eax
 2761 0139 894338   		movl	%eax, 56(%rbx)
 2762              	.L340:
 620:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2763              		.loc 1 620 0
 2764 013c 4883C428 		addq	$40, %rsp
 2765              		.cfi_remember_state
 2766              		.cfi_def_cfa_offset 56
 2767 0140 B8010000 		movl	$1, %eax
 2767      00
 2768 0145 5B       		popq	%rbx
 2769              		.cfi_def_cfa_offset 48
 2770              	.LVL340:
 2771 0146 5D       		popq	%rbp
 2772              		.cfi_def_cfa_offset 40
 2773 0147 415C     		popq	%r12
 2774              		.cfi_def_cfa_offset 32
 2775 0149 415D     		popq	%r13
 2776              		.cfi_def_cfa_offset 24
 2777 014b 415E     		popq	%r14
 2778              		.cfi_def_cfa_offset 16
 2779              	.LVL341:
 2780 014d 415F     		popq	%r15
 2781              		.cfi_def_cfa_offset 8
 2782 014f C3       		ret
 2783              	.LVL342:
 2784              		.p2align 4,,10
 2785              		.p2align 3
 2786              	.L309:
 2787              		.cfi_restore_state
 2788              	.LBB239:
 2789              	.LBB236:
 2790              	.LBB221:
 421:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 2791              		.loc 1 421 0
 2792 0150 4A8B44FB 		movq	64(%rbx,%r15,8), %rax
 2792      40
 2793              	.LVL343:
 422:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2794              		.loc 1 422 0
 2795 0155 4863CA   		movslq	%edx, %rcx
 2796 0158 440FB6BC 		movzbl	1024(%rax,%rcx), %r15d
 2796      08000400 
 2796      00
 2797              	.LVL344:
 2798 0161 448B1488 		movl	(%rax,%rcx,4), %r10d
 2799              	.LVL345:
 2800              	.LBB222:
 2801              	.LBB223:
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 2802              		.loc 1 357 0
 2803 0165 4585FF   		testl	%r15d, %r15d
 2804 0168 0F847202 		je	.L311
 2804      0000
 2805              	.LVL346:
 2806              	.L314:
 2807              	.LBB224:
 2808              	.LBB225:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2809              		.loc 1 364 0
 2810 016e 4489F9   		movl	%r15d, %ecx
 2811 0171 BE010000 		movl	$1, %esi
 2811      00
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2812              		.loc 1 367 0
 2813 0176 44037B20 		addl	32(%rbx), %r15d
 2814              	.LVL347:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2815              		.loc 1 364 0
 2816 017a 48D3E6   		salq	%cl, %rsi
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2817              		.loc 1 369 0
 2818 017d B9180000 		movl	$24, %ecx
 2818      00
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2819              		.loc 1 364 0
 2820 0182 488D46FF 		leaq	-1(%rsi), %rax
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2821              		.loc 1 369 0
 2822 0186 4429F9   		subl	%r15d, %ecx
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2823              		.loc 1 364 0
 2824 0189 4421D0   		andl	%r10d, %eax
 2825              	.LVL348:
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2826              		.loc 1 367 0
 2827 018c 4489FE   		movl	%r15d, %esi
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2828              		.loc 1 369 0
 2829 018f 48D3E0   		salq	%cl, %rax
 2830              	.LVL349:
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2831              		.loc 1 367 0
 2832 0192 44897C24 		movl	%r15d, 28(%rsp)
 2832      1C
 2833              	.LVL350:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2834              		.loc 1 369 0
 2835 0197 4889C1   		movq	%rax, %rcx
 2836              	.LVL351:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2837              		.loc 1 372 0
 2838 019a 480B4B18 		orq	24(%rbx), %rcx
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2839              		.loc 1 374 0
 2840 019e 83FE07   		cmpl	$7, %esi
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2841              		.loc 1 372 0
 2842 01a1 4989CF   		movq	%rcx, %r15
 2843              	.LVL352:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2844              		.loc 1 374 0
 2845 01a4 7F23     		jg	.L335
 2846 01a6 E9DA0000 		jmp	.L313
 2846      00
 2847              	.LVL353:
 2848 01ab 0F1F4400 		.p2align 4,,10
 2848      00
 2849              		.p2align 3
 2850              	.L316:
 2851              	.LBB226:
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 2852              		.loc 1 378 0
 2853 01b0 4181FAFF 		cmpl	$255, %r10d
 2853      000000
 2854 01b7 746F     		je	.L349
 2855              	.LVL354:
 2856              	.L318:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2857              		.loc 1 382 0
 2858 01b9 83EE08   		subl	$8, %esi
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 2859              		.loc 1 381 0
 2860 01bc 49C1E708 		salq	$8, %r15
 2861              	.LVL355:
 2862              	.LBE226:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2863              		.loc 1 374 0
 2864 01c0 83FE07   		cmpl	$7, %esi
 2865 01c3 0F8EB700 		jle	.L350
 2865      0000
 2866              	.L335:
 2867              	.LBB227:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2868              		.loc 1 377 0
 2869 01c9 488B83C8 		movq	200(%rbx), %rax
 2869      000000
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2870              		.loc 1 375 0
 2871 01d0 4C89FF   		movq	%r15, %rdi
 2872 01d3 48C1FF10 		sarq	$16, %rdi
 2873 01d7 440FB6D7 		movzbl	%dil, %r10d
 2874              	.LVL356:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 2875              		.loc 1 377 0
 2876 01db 4C8D5801 		leaq	1(%rax), %r11
 2877 01df 4C899BC8 		movq	%r11, 200(%rbx)
 2877      000000
 2878 01e6 408838   		movb	%dil, (%rax)
 2879 01e9 4883ABD0 		subq	$1, 208(%rbx)
 2879      00000001 
 2880 01f1 75BD     		jne	.L316
 2881 01f3 4889DF   		movq	%rbx, %rdi
 2882 01f6 44894C24 		movl	%r9d, 24(%rsp)
 2882      18
 2883 01fb 89742414 		movl	%esi, 20(%rsp)
 2884 01ff 44895424 		movl	%r10d, 16(%rsp)
 2884      10
 2885 0204 8954240C 		movl	%edx, 12(%rsp)
 2886 0208 E8000000 		call	dump_buffer_e
 2886      00
 2887              	.LVL357:
 2888 020d 448B5424 		movl	16(%rsp), %r10d
 2888      10
 2889 0212 448B4C24 		movl	24(%rsp), %r9d
 2889      18
 2890 0217 8B742414 		movl	20(%rsp), %esi
 2891 021b 8B54240C 		movl	12(%rsp), %edx
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 2892              		.loc 1 378 0
 2893 021f 4181FAFF 		cmpl	$255, %r10d
 2893      000000
 2894 0226 7591     		jne	.L318
 2895              	.LVL358:
 2896              	.L349:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 2897              		.loc 1 379 0
 2898 0228 488B83C8 		movq	200(%rbx), %rax
 2898      000000
 2899 022f 488D7801 		leaq	1(%rax), %rdi
 2900 0233 4889BBC8 		movq	%rdi, 200(%rbx)
 2900      000000
 2901 023a C60000   		movb	$0, (%rax)
 2902 023d 4883ABD0 		subq	$1, 208(%rbx)
 2902      00000001 
 2903 0245 0F856EFF 		jne	.L318
 2903      FFFF
 2904 024b 4889DF   		movq	%rbx, %rdi
 2905 024e 44894C24 		movl	%r9d, 20(%rsp)
 2905      14
 2906 0253 89742410 		movl	%esi, 16(%rsp)
 2907 0257 8954240C 		movl	%edx, 12(%rsp)
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 2908              		.loc 1 381 0
 2909 025b 49C1E708 		salq	$8, %r15
 2910              	.LVL359:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 2911              		.loc 1 379 0
 2912 025f E8000000 		call	dump_buffer_e
 2912      00
 2913              	.LVL360:
 2914 0264 8B742410 		movl	16(%rsp), %esi
 2915 0268 448B4C24 		movl	20(%rsp), %r9d
 2915      14
 2916 026d 8B54240C 		movl	12(%rsp), %edx
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 2917              		.loc 1 382 0
 2918 0271 83EE08   		subl	$8, %esi
 2919              	.LVL361:
 2920              	.LBE227:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2921              		.loc 1 374 0
 2922 0274 83FE07   		cmpl	$7, %esi
 2923 0277 0F8F4CFF 		jg	.L335
 2923      FFFF
 2924 027d 0F1F00   		.p2align 4,,10
 2925              		.p2align 3
 2926              	.L350:
 2927 0280 8364241C 		andl	$7, 28(%rsp)
 2927      07
 2928              	.L313:
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 2929              		.loc 1 386 0
 2930 0285 8B44241C 		movl	28(%rsp), %eax
 2931              	.LBE225:
 2932              	.LBE224:
 2933              	.LBE223:
 2934              	.LBE222:
 2935              	.LBE221:
 2936              	.LBE236:
 2937              	.LBE239:
 602:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_bits_e(entropy, (unsigned int) temp2, nbits);
 2938              		.loc 1 602 0
 2939 0289 85D2     		testl	%edx, %edx
 2940              	.LBB240:
 2941              	.LBB237:
 2942              	.LBB234:
 2943              	.LBB232:
 2944              	.LBB230:
 2945              	.LBB229:
 2946              	.LBB228:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 2947              		.loc 1 385 0
 2948 028b 4C897B18 		movq	%r15, 24(%rbx)
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 2949              		.loc 1 386 0
 2950 028f 894320   		movl	%eax, 32(%rbx)
 2951              	.LVL362:
 2952              	.LBE228:
 2953              	.LBE229:
 2954              	.LBE230:
 2955              	.LBE232:
 2956              	.LBE234:
 2957              	.LBE237:
 2958              	.LBE240:
 602:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_bits_e(entropy, (unsigned int) temp2, nbits);
 2959              		.loc 1 602 0
 2960 0292 0F8452FE 		je	.L315
 2960      FFFF
 2961              	.LVL363:
 2962              	.L347:
 2963              	.LBB241:
 2964              	.LBB242:
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 2965              		.loc 1 360 0
 2966 0298 8B83C000 		movl	192(%rbx), %eax
 2966      0000
 2967 029e 85C0     		testl	%eax, %eax
 2968 02a0 0F8544FE 		jne	.L315
 2968      FFFF
 2969              	.LVL364:
 2970              	.LBB243:
 2971              	.LBB244:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2972              		.loc 1 364 0
 2973 02a6 89D1     		movl	%edx, %ecx
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2974              		.loc 1 367 0
 2975 02a8 035320   		addl	32(%rbx), %edx
 2976              	.LVL365:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2977              		.loc 1 364 0
 2978 02ab B8010000 		movl	$1, %eax
 2978      00
 2979 02b0 48D3E0   		salq	%cl, %rax
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2980              		.loc 1 369 0
 2981 02b3 B9180000 		movl	$24, %ecx
 2981      00
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2982              		.loc 1 364 0
 2983 02b8 4883E801 		subq	$1, %rax
 2984 02bc 4121C1   		andl	%eax, %r9d
 2985              	.LVL366:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2986              		.loc 1 369 0
 2987 02bf 29D1     		subl	%edx, %ecx
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2988              		.loc 1 367 0
 2989 02c1 89542414 		movl	%edx, 20(%rsp)
 2990              	.LVL367:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2991              		.loc 1 369 0
 2992 02c5 49D3E1   		salq	%cl, %r9
 2993              	.LVL368:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2994              		.loc 1 372 0
 2995 02c8 4C0B4B18 		orq	24(%rbx), %r9
 2996              	.LVL369:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 2997              		.loc 1 374 0
 2998 02cc 83FA07   		cmpl	$7, %edx
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 2999              		.loc 1 372 0
 3000 02cf 4D89CF   		movq	%r9, %r15
 3001              	.LVL370:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3002              		.loc 1 374 0
 3003 02d2 7F24     		jg	.L326
 3004 02d4 E9AC0000 		jmp	.L321
 3004      00
 3005              	.LVL371:
 3006 02d9 0F1F8000 		.p2align 4,,10
 3006      000000
 3007              		.p2align 3
 3008              	.L322:
 3009              	.LBB245:
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 3010              		.loc 1 378 0
 3011 02e0 81FEFF00 		cmpl	$255, %esi
 3011      0000
 3012 02e6 7458     		je	.L351
 3013              	.LVL372:
 3014              	.L324:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3015              		.loc 1 382 0
 3016 02e8 83EA08   		subl	$8, %edx
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 3017              		.loc 1 381 0
 3018 02eb 49C1E708 		salq	$8, %r15
 3019              	.LVL373:
 3020              	.LBE245:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3021              		.loc 1 374 0
 3022 02ef 83FA07   		cmpl	$7, %edx
 3023 02f2 0F8E8800 		jle	.L352
 3023      0000
 3024              	.L326:
 3025              	.LBB246:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3026              		.loc 1 377 0
 3027 02f8 488B83C8 		movq	200(%rbx), %rax
 3027      000000
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3028              		.loc 1 375 0
 3029 02ff 4C89F9   		movq	%r15, %rcx
 3030 0302 48C1F910 		sarq	$16, %rcx
 3031 0306 0FB6F1   		movzbl	%cl, %esi
 3032              	.LVL374:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3033              		.loc 1 377 0
 3034 0309 488D7801 		leaq	1(%rax), %rdi
 3035 030d 4889BBC8 		movq	%rdi, 200(%rbx)
 3035      000000
 3036 0314 8808     		movb	%cl, (%rax)
 3037 0316 4883ABD0 		subq	$1, 208(%rbx)
 3037      00000001 
 3038 031e 75C0     		jne	.L322
 3039 0320 4889DF   		movq	%rbx, %rdi
 3040 0323 89542410 		movl	%edx, 16(%rsp)
 3041 0327 8974240C 		movl	%esi, 12(%rsp)
 3042 032b E8000000 		call	dump_buffer_e
 3042      00
 3043              	.LVL375:
 3044 0330 8B74240C 		movl	12(%rsp), %esi
 3045 0334 8B542410 		movl	16(%rsp), %edx
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 3046              		.loc 1 378 0
 3047 0338 81FEFF00 		cmpl	$255, %esi
 3047      0000
 3048 033e 75A8     		jne	.L324
 3049              	.LVL376:
 3050              	.L351:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3051              		.loc 1 379 0
 3052 0340 488B83C8 		movq	200(%rbx), %rax
 3052      000000
 3053 0347 488D4801 		leaq	1(%rax), %rcx
 3054 034b 48898BC8 		movq	%rcx, 200(%rbx)
 3054      000000
 3055 0352 C60000   		movb	$0, (%rax)
 3056 0355 4883ABD0 		subq	$1, 208(%rbx)
 3056      00000001 
 3057 035d 7589     		jne	.L324
 3058 035f 4889DF   		movq	%rbx, %rdi
 3059 0362 8954240C 		movl	%edx, 12(%rsp)
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 3060              		.loc 1 381 0
 3061 0366 49C1E708 		salq	$8, %r15
 3062              	.LVL377:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3063              		.loc 1 379 0
 3064 036a E8000000 		call	dump_buffer_e
 3064      00
 3065              	.LVL378:
 3066 036f 8B54240C 		movl	12(%rsp), %edx
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3067              		.loc 1 382 0
 3068 0373 83EA08   		subl	$8, %edx
 3069              	.LVL379:
 3070              	.LBE246:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3071              		.loc 1 374 0
 3072 0376 83FA07   		cmpl	$7, %edx
 3073 0379 0F8F79FF 		jg	.L326
 3073      FFFF
 3074 037f 90       		.p2align 4,,10
 3075              		.p2align 3
 3076              	.L352:
 3077 0380 83642414 		andl	$7, 20(%rsp)
 3077      07
 3078              	.L321:
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 3079              		.loc 1 386 0
 3080 0385 8B442414 		movl	20(%rsp), %eax
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 3081              		.loc 1 385 0
 3082 0389 4C897B18 		movq	%r15, 24(%rbx)
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 3083              		.loc 1 386 0
 3084 038d 894320   		movl	%eax, 32(%rbx)
 3085 0390 E955FDFF 		jmp	.L315
 3085      FF
 3086              	.LVL380:
 3087              		.p2align 4,,10
 3088 0395 0F1F00   		.p2align 3
 3089              	.L346:
 3090              	.LBE244:
 3091              	.LBE243:
 3092              	.LBE242:
 3093              	.LBE241:
 595:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3094              		.loc 1 595 0
 3095 0398 498B06   		movq	(%r14), %rax
 3096              	.LVL381:
 3097 039b 44894C24 		movl	%r9d, 16(%rsp)
 3097      10
 3098 03a0 4C89F7   		movq	%r14, %rdi
 3099 03a3 8954240C 		movl	%edx, 12(%rsp)
 3100 03a7 C7402806 		movl	$6, 40(%rax)
 3100      000000
 3101 03ae 498B06   		movq	(%r14), %rax
 3102 03b1 FF10     		call	*(%rax)
 3103              	.LVL382:
 3104 03b3 8B54240C 		movl	12(%rsp), %edx
 3105 03b7 448B4C24 		movl	16(%rsp), %r9d
 3105      10
 3106 03bc E907FDFF 		jmp	.L307
 3106      FF
 3107              	.LVL383:
 3108              		.p2align 4,,10
 3109 03c1 0F1F8000 		.p2align 3
 3109      000000
 3110              	.L345:
 579:fltk-1.3.4-1/jpeg/jchuff.c ****       /* For a negative input, want temp2 = bitwise complement of abs(input) */
 3111              		.loc 1 579 0
 3112 03c8 4489C8   		movl	%r9d, %eax
 582:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3113              		.loc 1 582 0
 3114 03cb 4183E901 		subl	$1, %r9d
 3115              	.LVL384:
 579:fltk-1.3.4-1/jpeg/jchuff.c ****       /* For a negative input, want temp2 = bitwise complement of abs(input) */
 3116              		.loc 1 579 0
 3117 03cf F7D8     		negl	%eax
 3118              	.LVL385:
 3119 03d1 E9DAFCFF 		jmp	.L306
 3119      FF
 3120              	.LVL386:
 3121 03d6 662E0F1F 		.p2align 4,,10
 3121      84000000 
 3121      0000
 3122              		.p2align 3
 3123              	.L311:
 3124              	.LBB247:
 3125              	.LBB238:
 3126              	.LBB235:
 3127              	.LBB233:
 3128              	.LBB231:
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3129              		.loc 1 358 0
 3130 03e0 488B83D8 		movq	216(%rbx), %rax
 3130      000000
 3131              	.LVL387:
 3132 03e7 44894C24 		movl	%r9d, 20(%rsp)
 3132      14
 3133 03ec 44895424 		movl	%r10d, 16(%rsp)
 3133      10
 3134 03f1 8954240C 		movl	%edx, 12(%rsp)
 3135 03f5 488B00   		movq	(%rax), %rax
 3136 03f8 C7402829 		movl	$41, 40(%rax)
 3136      000000
 3137 03ff 488BBBD8 		movq	216(%rbx), %rdi
 3137      000000
 3138 0406 488B07   		movq	(%rdi), %rax
 3139 0409 FF10     		call	*(%rax)
 3140              	.LVL388:
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 3141              		.loc 1 360 0
 3142 040b 8B93C000 		movl	192(%rbx), %edx
 3142      0000
 3143 0411 448B5424 		movl	16(%rsp), %r10d
 3143      10
 3144 0416 448B4C24 		movl	20(%rsp), %r9d
 3144      14
 3145 041b 85D2     		testl	%edx, %edx
 3146 041d 8B54240C 		movl	12(%rsp), %edx
 3147 0421 0F85C3FC 		jne	.L315
 3147      FFFF
 3148 0427 E942FDFF 		jmp	.L314
 3148      FF
 3149              	.LVL389:
 3150 042c 0F1F4000 		.p2align 4,,10
 3151              		.p2align 3
 3152              	.L333:
 3153              	.LBE231:
 3154              	.LBE233:
 3155              	.LBE235:
 3156              	.LBE238:
 3157              	.LBE247:
 586:fltk-1.3.4-1/jpeg/jchuff.c ****     while (temp) {
 3158              		.loc 1 586 0
 3159 0430 31D2     		xorl	%edx, %edx
 3160 0432 E991FCFF 		jmp	.L307
 3160      FF
 3161              	.LVL390:
 3162              	.L348:
 614:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3163              		.loc 1 614 0
 3164 0437 8B433C   		movl	60(%rbx), %eax
 3165 043a 83C001   		addl	$1, %eax
 3166 043d 83E007   		andl	$7, %eax
 3167 0440 89433C   		movl	%eax, 60(%rbx)
 3168 0443 89D0     		movl	%edx, %eax
 3169 0445 E9ECFCFF 		jmp	.L329
 3169      FF
 3170              	.LVL391:
 3171              	.L344:
 560:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3172              		.loc 1 560 0
 3173 044a 8B733C   		movl	60(%rbx), %esi
 3174              	.LVL392:
 3175 044d 4889DF   		movq	%rbx, %rdi
 3176 0450 E8000000 		call	emit_restart_e
 3176      00
 3177              	.LVL393:
 3178 0455 E9F5FBFF 		jmp	.L301
 3178      FF
 3179              		.cfi_endproc
 3180              	.LFE74:
 3182              		.section	.text.unlikely.encode_mcu_DC_first
 3183              	.LCOLDE8:
 3184              		.section	.text.encode_mcu_DC_first
 3185              	.LHOTE8:
 3186              		.section	.text.unlikely.encode_mcu_DC_refine,"ax",@progbits
 3187              	.LCOLDB9:
 3188              		.section	.text.encode_mcu_DC_refine,"ax",@progbits
 3189              	.LHOTB9:
 3190              		.p2align 4,,15
 3192              	encode_mcu_DC_refine:
 3193              	.LFB76:
 741:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 3194              		.loc 1 741 0
 3195              		.cfi_startproc
 3196              	.LVL394:
 3197 0000 4157     		pushq	%r15
 3198              		.cfi_def_cfa_offset 16
 3199              		.cfi_offset 15, -16
 3200 0002 4156     		pushq	%r14
 3201              		.cfi_def_cfa_offset 24
 3202              		.cfi_offset 14, -24
 3203 0004 4155     		pushq	%r13
 3204              		.cfi_def_cfa_offset 32
 3205              		.cfi_offset 13, -32
 3206 0006 4154     		pushq	%r12
 3207              		.cfi_def_cfa_offset 40
 3208              		.cfi_offset 12, -40
 3209 0008 4989FD   		movq	%rdi, %r13
 3210 000b 55       		pushq	%rbp
 3211              		.cfi_def_cfa_offset 48
 3212              		.cfi_offset 6, -48
 3213 000c 53       		pushq	%rbx
 3214              		.cfi_def_cfa_offset 56
 3215              		.cfi_offset 3, -56
 3216 000d 4889F5   		movq	%rsi, %rbp
 3217 0010 4883EC18 		subq	$24, %rsp
 3218              		.cfi_def_cfa_offset 80
 745:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 3219              		.loc 1 745 0
 3220 0014 488B4728 		movq	40(%rdi), %rax
 742:fltk-1.3.4-1/jpeg/jchuff.c ****   int Al, blkn;
 3221              		.loc 1 742 0
 3222 0018 488B9F30 		movq	560(%rdi), %rbx
 3222      020000
 3223              	.LVL395:
 745:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 3224              		.loc 1 745 0
 3225 001f 488B00   		movq	(%rax), %rax
 3226 0022 488983C8 		movq	%rax, 200(%rbx)
 3226      000000
 746:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3227              		.loc 1 746 0
 3228 0029 488B5728 		movq	40(%rdi), %rdx
 3229 002d 488B5208 		movq	8(%rdx), %rdx
 3230 0031 488993D0 		movq	%rdx, 208(%rbx)
 3230      000000
 749:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 3231              		.loc 1 749 0
 3232 0038 8BBF3C01 		movl	316(%rdi), %edi
 3232      0000
 3233              	.LVL396:
 3234 003e 85FF     		testl	%edi, %edi
 3235 0040 740B     		je	.L354
 750:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_restart_e(entropy, entropy->next_restart_num);
 3236              		.loc 1 750 0
 3237 0042 8B7338   		movl	56(%rbx), %esi
 3238              	.LVL397:
 3239 0045 85F6     		testl	%esi, %esi
 3240 0047 0F848B01 		je	.L372
 3240      0000
 3241              	.L354:
 756:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We simply emit the Al'th bit of the DC coefficient value. */
 3242              		.loc 1 756 0
 3243 004d 418B8DA0 		movl	416(%r13), %ecx
 3243      010000
 753:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3244              		.loc 1 753 0
 3245 0054 418BB5D8 		movl	472(%r13), %esi
 3245      010000
 756:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We simply emit the Al'th bit of the DC coefficient value. */
 3246              		.loc 1 756 0
 3247 005b 85C9     		testl	%ecx, %ecx
 753:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3248              		.loc 1 753 0
 3249 005d 8974240C 		movl	%esi, 12(%rsp)
 3250              	.LVL398:
 756:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We simply emit the Al'th bit of the DC coefficient value. */
 3251              		.loc 1 756 0
 3252 0061 0F8E1901 		jle	.L355
 3252      0000
 3253 0067 4989EC   		movq	%rbp, %r12
 756:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We simply emit the Al'th bit of the DC coefficient value. */
 3254              		.loc 1 756 0 is_stmt 0 discriminator 3
 3255 006a 4531F6   		xorl	%r14d, %r14d
 3256 006d EB16     		jmp	.L364
 3257              	.LVL399:
 3258 006f 90       		.p2align 4,,10
 3259              		.p2align 3
 3260              	.L356:
 3261 0070 4183C601 		addl	$1, %r14d
 3262              	.LVL400:
 3263 0074 4983C408 		addq	$8, %r12
 3264 0078 4539B5A0 		cmpl	%r14d, 416(%r13)
 3264      010000
 3265 007f 0F8EFB00 		jle	.L355
 3265      0000
 3266              	.LVL401:
 3267              	.L364:
 3268              	.LBB253:
 3269              	.LBB254:
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 3270              		.loc 1 360 0 is_stmt 1 discriminator 3
 3271 0085 8B93C000 		movl	192(%rbx), %edx
 3271      0000
 3272 008b 85D2     		testl	%edx, %edx
 3273 008d 75E1     		jne	.L356
 3274              	.LVL402:
 3275              	.LBE254:
 3276              	.LBE253:
 758:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3277              		.loc 1 758 0
 3278 008f 498B1424 		movq	(%r12), %rdx
 3279              	.LBB260:
 3280              	.LBB259:
 3281              	.LBB255:
 3282              	.LBB256:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3283              		.loc 1 364 0
 3284 0093 0FB64C24 		movzbl	12(%rsp), %ecx
 3284      0C
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3285              		.loc 1 367 0
 3286 0098 8B7320   		movl	32(%rbx), %esi
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3287              		.loc 1 364 0
 3288 009b 0FBF2A   		movswl	(%rdx), %ebp
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3289              		.loc 1 367 0
 3290 009e 448D7E01 		leal	1(%rsi), %r15d
 3291 00a2 89742408 		movl	%esi, 8(%rsp)
 3292              	.LVL403:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3293              		.loc 1 364 0
 3294 00a6 D3FD     		sarl	%cl, %ebp
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3295              		.loc 1 369 0
 3296 00a8 B9180000 		movl	$24, %ecx
 3296      00
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3297              		.loc 1 364 0
 3298 00ad 83E501   		andl	$1, %ebp
 3299              	.LVL404:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3300              		.loc 1 369 0
 3301 00b0 4429F9   		subl	%r15d, %ecx
 3302 00b3 48D3E5   		salq	%cl, %rbp
 3303              	.LVL405:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3304              		.loc 1 372 0
 3305 00b6 480B6B18 		orq	24(%rbx), %rbp
 3306              	.LVL406:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3307              		.loc 1 374 0
 3308 00ba 4183FF07 		cmpl	$7, %r15d
 3309 00be 7F25     		jg	.L363
 3310 00c0 E9A70000 		jmp	.L357
 3310      00
 3311              	.LVL407:
 3312              		.p2align 4,,10
 3313 00c5 0F1F00   		.p2align 3
 3314              	.L358:
 3315              	.LBB257:
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 3316              		.loc 1 378 0
 3317 00c8 81F9FF00 		cmpl	$255, %ecx
 3317      0000
 3318 00ce 744E     		je	.L373
 3319              	.LVL408:
 3320              	.L360:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3321              		.loc 1 382 0
 3322 00d0 4183EF08 		subl	$8, %r15d
 3323              	.LVL409:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 3324              		.loc 1 381 0
 3325 00d4 48C1E508 		salq	$8, %rbp
 3326              	.LVL410:
 3327              	.LBE257:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3328              		.loc 1 374 0
 3329 00d8 4183FF07 		cmpl	$7, %r15d
 3330 00dc 7E7A     		jle	.L362
 3331              	.L374:
 3332 00de 488B83C8 		movq	200(%rbx), %rax
 3332      000000
 3333              	.L363:
 3334              	.LBB258:
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3335              		.loc 1 375 0
 3336 00e5 4889EA   		movq	%rbp, %rdx
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3337              		.loc 1 377 0
 3338 00e8 488D7801 		leaq	1(%rax), %rdi
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3339              		.loc 1 375 0
 3340 00ec 48C1FA10 		sarq	$16, %rdx
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3341              		.loc 1 377 0
 3342 00f0 4889BBC8 		movq	%rdi, 200(%rbx)
 3342      000000
 3343 00f7 8810     		movb	%dl, (%rax)
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3344              		.loc 1 375 0
 3345 00f9 0FB6CA   		movzbl	%dl, %ecx
 3346              	.LVL411:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3347              		.loc 1 377 0
 3348 00fc 4883ABD0 		subq	$1, 208(%rbx)
 3348      00000001 
 3349 0104 75C2     		jne	.L358
 3350 0106 4889DF   		movq	%rbx, %rdi
 3351 0109 894C2404 		movl	%ecx, 4(%rsp)
 3352 010d E8000000 		call	dump_buffer_e
 3352      00
 3353              	.LVL412:
 3354 0112 8B4C2404 		movl	4(%rsp), %ecx
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 3355              		.loc 1 378 0
 3356 0116 81F9FF00 		cmpl	$255, %ecx
 3356      0000
 3357 011c 75B2     		jne	.L360
 3358              	.LVL413:
 3359              	.L373:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3360              		.loc 1 379 0
 3361 011e 488B83C8 		movq	200(%rbx), %rax
 3361      000000
 3362 0125 488D5001 		leaq	1(%rax), %rdx
 3363 0129 488993C8 		movq	%rdx, 200(%rbx)
 3363      000000
 3364 0130 C60000   		movb	$0, (%rax)
 3365 0133 4883ABD0 		subq	$1, 208(%rbx)
 3365      00000001 
 3366 013b 7593     		jne	.L360
 3367 013d 4889DF   		movq	%rbx, %rdi
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3368              		.loc 1 382 0
 3369 0140 4183EF08 		subl	$8, %r15d
 3370              	.LVL414:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 3371              		.loc 1 381 0
 3372 0144 48C1E508 		salq	$8, %rbp
 3373              	.LVL415:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3374              		.loc 1 379 0
 3375 0148 E8000000 		call	dump_buffer_e
 3375      00
 3376              	.LVL416:
 3377              	.LBE258:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3378              		.loc 1 374 0
 3379 014d 4183FF07 		cmpl	$7, %r15d
 3380 0151 7F8B     		jg	.L374
 3381              		.p2align 4,,10
 3382 0153 0F1F4400 		.p2align 3
 3382      00
 3383              	.L362:
 3384 0158 448B7C24 		movl	8(%rsp), %r15d
 3384      08
 3385              	.LVL417:
 3386 015d 488B83C8 		movq	200(%rbx), %rax
 3386      000000
 3387 0164 4183EF07 		subl	$7, %r15d
 3388 0168 4183E707 		andl	$7, %r15d
 3389              	.L357:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 3390              		.loc 1 385 0
 3391 016c 48896B18 		movq	%rbp, 24(%rbx)
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 3392              		.loc 1 386 0
 3393 0170 44897B20 		movl	%r15d, 32(%rbx)
 3394 0174 E9F7FEFF 		jmp	.L356
 3394      FF
 3395              	.LVL418:
 3396 0179 0F1F8000 		.p2align 4,,10
 3396      000000
 3397              		.p2align 3
 3398              	.L355:
 3399              	.LBE256:
 3400              	.LBE255:
 3401              	.LBE259:
 3402              	.LBE260:
 761:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 3403              		.loc 1 761 0
 3404 0180 498B5528 		movq	40(%r13), %rdx
 3405 0184 488902   		movq	%rax, (%rdx)
 762:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3406              		.loc 1 762 0
 3407 0187 488B93D0 		movq	208(%rbx), %rdx
 3407      000000
 3408 018e 498B4528 		movq	40(%r13), %rax
 3409 0192 48895008 		movq	%rdx, 8(%rax)
 765:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 3410              		.loc 1 765 0
 3411 0196 418B953C 		movl	316(%r13), %edx
 3411      010000
 3412 019d 85D2     		testl	%edx, %edx
 3413 019f 740D     		je	.L365
 766:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 3414              		.loc 1 766 0
 3415 01a1 8B4338   		movl	56(%rbx), %eax
 3416 01a4 85C0     		testl	%eax, %eax
 3417 01a6 7420     		je	.L375
 3418              	.L366:
 771:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3419              		.loc 1 771 0
 3420 01a8 83E801   		subl	$1, %eax
 3421 01ab 894338   		movl	%eax, 56(%rbx)
 3422              	.L365:
 775:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3423              		.loc 1 775 0
 3424 01ae 4883C418 		addq	$24, %rsp
 3425              		.cfi_remember_state
 3426              		.cfi_def_cfa_offset 56
 3427 01b2 B8010000 		movl	$1, %eax
 3427      00
 3428 01b7 5B       		popq	%rbx
 3429              		.cfi_def_cfa_offset 48
 3430              	.LVL419:
 3431 01b8 5D       		popq	%rbp
 3432              		.cfi_def_cfa_offset 40
 3433 01b9 415C     		popq	%r12
 3434              		.cfi_def_cfa_offset 32
 3435 01bb 415D     		popq	%r13
 3436              		.cfi_def_cfa_offset 24
 3437              	.LVL420:
 3438 01bd 415E     		popq	%r14
 3439              		.cfi_def_cfa_offset 16
 3440 01bf 415F     		popq	%r15
 3441              		.cfi_def_cfa_offset 8
 3442 01c1 C3       		ret
 3443              	.LVL421:
 3444              		.p2align 4,,10
 3445 01c2 660F1F44 		.p2align 3
 3445      0000
 3446              	.L375:
 3447              		.cfi_restore_state
 769:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3448              		.loc 1 769 0
 3449 01c8 8B433C   		movl	60(%rbx), %eax
 3450 01cb 83C001   		addl	$1, %eax
 3451 01ce 83E007   		andl	$7, %eax
 3452 01d1 89433C   		movl	%eax, 60(%rbx)
 3453 01d4 89D0     		movl	%edx, %eax
 3454 01d6 EBD0     		jmp	.L366
 3455              	.LVL422:
 3456              	.L372:
 751:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3457              		.loc 1 751 0
 3458 01d8 8B733C   		movl	60(%rbx), %esi
 3459 01db 4889DF   		movq	%rbx, %rdi
 3460 01de E8000000 		call	emit_restart_e
 3460      00
 3461              	.LVL423:
 3462 01e3 488B83C8 		movq	200(%rbx), %rax
 3462      000000
 3463 01ea E95EFEFF 		jmp	.L354
 3463      FF
 3464              		.cfi_endproc
 3465              	.LFE76:
 3467              		.section	.text.unlikely.encode_mcu_DC_refine
 3468              	.LCOLDE9:
 3469              		.section	.text.encode_mcu_DC_refine
 3470              	.LHOTE9:
 3471              		.section	.text.unlikely.encode_mcu_AC_first,"ax",@progbits
 3472              	.LCOLDB10:
 3473              		.section	.text.encode_mcu_AC_first,"ax",@progbits
 3474              	.LHOTB10:
 3475              		.p2align 4,,15
 3477              	encode_mcu_AC_first:
 3478              	.LFB75:
 630:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 3479              		.loc 1 630 0
 3480              		.cfi_startproc
 3481              	.LVL424:
 3482 0000 4157     		pushq	%r15
 3483              		.cfi_def_cfa_offset 16
 3484              		.cfi_offset 15, -16
 3485 0002 4156     		pushq	%r14
 3486              		.cfi_def_cfa_offset 24
 3487              		.cfi_offset 14, -24
 3488 0004 4155     		pushq	%r13
 3489              		.cfi_def_cfa_offset 32
 3490              		.cfi_offset 13, -32
 3491 0006 4154     		pushq	%r12
 3492              		.cfi_def_cfa_offset 40
 3493              		.cfi_offset 12, -40
 3494 0008 55       		pushq	%rbp
 3495              		.cfi_def_cfa_offset 48
 3496              		.cfi_offset 6, -48
 3497 0009 53       		pushq	%rbx
 3498              		.cfi_def_cfa_offset 56
 3499              		.cfi_offset 3, -56
 3500 000a 4889F3   		movq	%rsi, %rbx
 3501 000d 4883EC38 		subq	$56, %rsp
 3502              		.cfi_def_cfa_offset 112
 639:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 3503              		.loc 1 639 0
 3504 0011 488B5728 		movq	40(%rdi), %rdx
 631:fltk-1.3.4-1/jpeg/jchuff.c ****   const int * natural_order;
 3505              		.loc 1 631 0
 3506 0015 4C8BB730 		movq	560(%rdi), %r14
 3506      020000
 3507              	.LVL425:
 630:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 3508              		.loc 1 630 0
 3509 001c 48897C24 		movq	%rdi, 40(%rsp)
 3509      28
 639:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 3510              		.loc 1 639 0
 3511 0021 488B12   		movq	(%rdx), %rdx
 3512 0024 498996C8 		movq	%rdx, 200(%r14)
 3512      000000
 640:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3513              		.loc 1 640 0
 3514 002b 488B5728 		movq	40(%rdi), %rdx
 3515 002f 488B5208 		movq	8(%rdx), %rdx
 3516 0033 498996D0 		movq	%rdx, 208(%r14)
 3516      000000
 643:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 3517              		.loc 1 643 0
 3518 003a 8BAF3C01 		movl	316(%rdi), %ebp
 3518      0000
 3519 0040 85ED     		testl	%ebp, %ebp
 3520 0042 740D     		je	.L377
 644:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_restart_e(entropy, entropy->next_restart_num);
 3521              		.loc 1 644 0
 3522 0044 458B5E38 		movl	56(%r14), %r11d
 3523 0048 4585DB   		testl	%r11d, %r11d
 3524 004b 0F848105 		je	.L444
 3524      0000
 3525              	.LVL426:
 3526              	.L377:
 647:fltk-1.3.4-1/jpeg/jchuff.c ****   Al = cinfo->Al;
 3527              		.loc 1 647 0
 3528 0051 488B4424 		movq	40(%rsp), %rax
 3528      28
 648:fltk-1.3.4-1/jpeg/jchuff.c ****   natural_order = cinfo->natural_order;
 3529              		.loc 1 648 0
 3530 0056 8BB0D801 		movl	472(%rax), %esi
 3530      0000
 647:fltk-1.3.4-1/jpeg/jchuff.c ****   Al = cinfo->Al;
 3531              		.loc 1 647 0
 3532 005c 8BB8D001 		movl	464(%rax), %edi
 3532      0000
 649:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3533              		.loc 1 649 0
 3534 0062 488B90E0 		movq	480(%rax), %rdx
 3534      010000
 658:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = (*block)[natural_order[k]]) == 0) {
 3535              		.loc 1 658 0
 3536 0069 8B80CC01 		movl	460(%rax), %eax
 3536      0000
 648:fltk-1.3.4-1/jpeg/jchuff.c ****   natural_order = cinfo->natural_order;
 3537              		.loc 1 648 0
 3538 006f 89742424 		movl	%esi, 36(%rsp)
 652:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3539              		.loc 1 652 0
 3540 0073 488B33   		movq	(%rbx), %rsi
 658:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = (*block)[natural_order[k]]) == 0) {
 3541              		.loc 1 658 0
 3542 0076 39C7     		cmpl	%eax, %edi
 647:fltk-1.3.4-1/jpeg/jchuff.c ****   Al = cinfo->Al;
 3543              		.loc 1 647 0
 3544 0078 897C2414 		movl	%edi, 20(%rsp)
 3545              	.LVL427:
 658:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = (*block)[natural_order[k]]) == 0) {
 3546              		.loc 1 658 0
 3547 007c 89442408 		movl	%eax, 8(%rsp)
 652:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3548              		.loc 1 652 0
 3549 0080 48897424 		movq	%rsi, 24(%rsp)
 3549      18
 3550              	.LVL428:
 658:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = (*block)[natural_order[k]]) == 0) {
 3551              		.loc 1 658 0
 3552 0085 0F8C3703 		jl	.L379
 3552      0000
 3553 008b 4863C8   		movslq	%eax, %rcx
 3554 008e C744240C 		movl	$0, 12(%rsp)
 3554      00000000 
 3555 0096 488D048A 		leaq	(%rdx,%rcx,4), %rax
 3556              	.LVL429:
 3557 009a 48890424 		movq	%rax, (%rsp)
 3558              	.LVL430:
 3559 009e 6690     		.p2align 4,,10
 3560              		.p2align 3
 3561              	.L419:
 659:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 3562              		.loc 1 659 0
 3563 00a0 488B0424 		movq	(%rsp), %rax
 3564 00a4 486310   		movslq	(%rax), %rdx
 3565 00a7 488B4424 		movq	24(%rsp), %rax
 3565      18
 3566 00ac 0FBF1450 		movswl	(%rax,%rdx,2), %edx
 3567              	.LVL431:
 3568 00b0 85D2     		testl	%edx, %edx
 3569 00b2 0F84C802 		je	.L441
 3569      0000
 674:fltk-1.3.4-1/jpeg/jchuff.c ****       temp2 = temp;
 3570              		.loc 1 674 0
 3571 00b8 0FB64C24 		movzbl	36(%rsp), %ecx
 3571      24
 3572 00bd 89D0     		movl	%edx, %eax
 3573 00bf D3F8     		sarl	%cl, %eax
 668:fltk-1.3.4-1/jpeg/jchuff.c ****       temp = -temp;		/* temp is abs value of input */
 3574              		.loc 1 668 0
 3575 00c1 85D2     		testl	%edx, %edx
 674:fltk-1.3.4-1/jpeg/jchuff.c ****       temp2 = temp;
 3576              		.loc 1 674 0
 3577 00c3 89442410 		movl	%eax, 16(%rsp)
 3578              	.LVL432:
 675:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3579              		.loc 1 675 0
 3580 00c7 89442420 		movl	%eax, 32(%rsp)
 668:fltk-1.3.4-1/jpeg/jchuff.c ****       temp = -temp;		/* temp is abs value of input */
 3581              		.loc 1 668 0
 3582 00cb 0F887F03 		js	.L445
 3582      0000
 3583              	.LVL433:
 3584              	.L383:
 678:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 3585              		.loc 1 678 0
 3586 00d1 448B5424 		movl	16(%rsp), %r10d
 3586      10
 3587 00d6 4585D2   		testl	%r10d, %r10d
 3588 00d9 0F84A102 		je	.L441
 3588      0000
 684:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_eobrun(entropy);
 3589              		.loc 1 684 0
 3590 00df 458B8EE4 		movl	228(%r14), %r9d
 3590      000000
 3591 00e6 4585C9   		testl	%r9d, %r9d
 3592 00e9 0F856904 		jne	.L446
 3592      0000
 3593              	.L385:
 687:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_ac_symbol(entropy, entropy->ac_tbl_no, 0xF0);
 3594              		.loc 1 687 0
 3595 00ef 8B44240C 		movl	12(%rsp), %eax
 3596 00f3 83F80F   		cmpl	$15, %eax
 3597 00f6 0F8E3901 		jle	.L386
 3597      0000
 3598 00fc 89C3     		movl	%eax, %ebx
 3599 00fe EB1C     		jmp	.L398
 3600              	.LVL434:
 3601              		.p2align 4,,10
 3602              		.p2align 3
 3603              	.L448:
 3604              	.LBB286:
 3605              	.LBB287:
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 3606              		.loc 1 432 0
 3607 0100 498B84C6 		movq	160(%r14,%rax,8), %rax
 3607      A0000000 
 3608              	.LVL435:
 3609 0108 48838080 		addq	$1, 1920(%rax)
 3609      07000001 
 3610              	.LVL436:
 3611              	.L388:
 3612              	.LBE287:
 3613              	.LBE286:
 689:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3614              		.loc 1 689 0
 3615 0110 83EB10   		subl	$16, %ebx
 3616              	.LVL437:
 687:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_ac_symbol(entropy, entropy->ac_tbl_no, 0xF0);
 3617              		.loc 1 687 0
 3618 0113 83FB0F   		cmpl	$15, %ebx
 3619 0116 0F8E1401 		jle	.L447
 3619      0000
 3620              	.L398:
 3621              	.LBB310:
 3622              	.LBB306:
 431:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 3623              		.loc 1 431 0
 3624 011c 458B86C0 		movl	192(%r14), %r8d
 3624      000000
 3625              	.LBE306:
 3626              	.LBE310:
 688:fltk-1.3.4-1/jpeg/jchuff.c ****       r -= 16;
 3627              		.loc 1 688 0
 3628 0123 496386E0 		movslq	224(%r14), %rax
 3628      000000
 3629              	.LVL438:
 3630              	.LBB311:
 3631              	.LBB307:
 431:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 3632              		.loc 1 431 0
 3633 012a 4585C0   		testl	%r8d, %r8d
 3634 012d 75D1     		jne	.L448
 3635              	.LVL439:
 3636              	.LBB288:
 3637              	.LBB289:
 434:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 3638              		.loc 1 434 0
 3639 012f 498B44C6 		movq	96(%r14,%rax,8), %rax
 3639      60
 3640              	.LVL440:
 435:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3641              		.loc 1 435 0
 3642 0134 440FB6A0 		movzbl	1264(%rax), %r12d
 3642      F0040000 
 3643 013c 8BA8C003 		movl	960(%rax), %ebp
 3643      0000
 3644              	.LVL441:
 3645              	.LBB290:
 3646              	.LBB291:
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 3647              		.loc 1 357 0
 3648 0142 4585E4   		testl	%r12d, %r12d
 3649 0145 0F84CD02 		je	.L389
 3649      0000
 3650              	.LVL442:
 3651              	.L392:
 3652              	.LBB292:
 3653              	.LBB293:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3654              		.loc 1 364 0
 3655 014b 4489E1   		movl	%r12d, %ecx
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3656              		.loc 1 367 0
 3657 014e 45036620 		addl	32(%r14), %r12d
 3658              	.LVL443:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3659              		.loc 1 364 0
 3660 0152 B8010000 		movl	$1, %eax
 3660      00
 3661 0157 48D3E0   		salq	%cl, %rax
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3662              		.loc 1 369 0
 3663 015a B9180000 		movl	$24, %ecx
 3663      00
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3664              		.loc 1 364 0
 3665 015f 4883E801 		subq	$1, %rax
 3666 0163 21C5     		andl	%eax, %ebp
 3667              	.LVL444:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3668              		.loc 1 369 0
 3669 0165 4429E1   		subl	%r12d, %ecx
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3670              		.loc 1 374 0
 3671 0168 4589E5   		movl	%r12d, %r13d
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3672              		.loc 1 369 0
 3673 016b 48D3E5   		salq	%cl, %rbp
 3674              	.LVL445:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3675              		.loc 1 372 0
 3676 016e 490B6E18 		orq	24(%r14), %rbp
 3677              	.LVL446:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3678              		.loc 1 374 0
 3679 0172 4183FC07 		cmpl	$7, %r12d
 3680 0176 7F1F     		jg	.L429
 3681 0178 E9970000 		jmp	.L391
 3681      00
 3682              	.LVL447:
 3683 017d 0F1F00   		.p2align 4,,10
 3684              		.p2align 3
 3685              	.L393:
 3686              	.LBB294:
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 3687              		.loc 1 378 0
 3688 0180 4181FFFF 		cmpl	$255, %r15d
 3688      000000
 3689 0187 7448     		je	.L449
 3690              	.L395:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3691              		.loc 1 382 0
 3692 0189 4183ED08 		subl	$8, %r13d
 3693              	.LVL448:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 3694              		.loc 1 381 0
 3695 018d 48C1E508 		salq	$8, %rbp
 3696              	.LVL449:
 3697              	.LBE294:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3698              		.loc 1 374 0
 3699 0191 4183FD07 		cmpl	$7, %r13d
 3700 0195 7E79     		jle	.L450
 3701              	.LVL450:
 3702              	.L429:
 3703              	.LBB295:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3704              		.loc 1 377 0
 3705 0197 498B86C8 		movq	200(%r14), %rax
 3705      000000
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3706              		.loc 1 375 0
 3707 019e 4889EA   		movq	%rbp, %rdx
 3708 01a1 48C1FA10 		sarq	$16, %rdx
 3709 01a5 440FB6FA 		movzbl	%dl, %r15d
 3710              	.LVL451:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3711              		.loc 1 377 0
 3712 01a9 488D4801 		leaq	1(%rax), %rcx
 3713 01ad 49898EC8 		movq	%rcx, 200(%r14)
 3713      000000
 3714 01b4 8810     		movb	%dl, (%rax)
 3715 01b6 4983AED0 		subq	$1, 208(%r14)
 3715      00000001 
 3716 01be 75C0     		jne	.L393
 3717 01c0 4C89F7   		movq	%r14, %rdi
 3718 01c3 E8000000 		call	dump_buffer_e
 3718      00
 3719              	.LVL452:
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 3720              		.loc 1 378 0
 3721 01c8 4181FFFF 		cmpl	$255, %r15d
 3721      000000
 3722 01cf 75B8     		jne	.L395
 3723              	.L449:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3724              		.loc 1 379 0
 3725 01d1 498B86C8 		movq	200(%r14), %rax
 3725      000000
 3726 01d8 488D5001 		leaq	1(%rax), %rdx
 3727 01dc 498996C8 		movq	%rdx, 200(%r14)
 3727      000000
 3728 01e3 C60000   		movb	$0, (%rax)
 3729 01e6 4983AED0 		subq	$1, 208(%r14)
 3729      00000001 
 3730 01ee 7599     		jne	.L395
 3731 01f0 4C89F7   		movq	%r14, %rdi
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3732              		.loc 1 382 0
 3733 01f3 4183ED08 		subl	$8, %r13d
 3734              	.LVL453:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 3735              		.loc 1 381 0
 3736 01f7 48C1E508 		salq	$8, %rbp
 3737              	.LVL454:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3738              		.loc 1 379 0
 3739 01fb E8000000 		call	dump_buffer_e
 3739      00
 3740              	.LVL455:
 3741              	.LBE295:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3742              		.loc 1 374 0
 3743 0200 4183FD07 		cmpl	$7, %r13d
 3744 0204 7F91     		jg	.L429
 3745 0206 662E0F1F 		.p2align 4,,10
 3745      84000000 
 3745      0000
 3746              		.p2align 3
 3747              	.L450:
 3748 0210 4183E407 		andl	$7, %r12d
 3749              	.LVL456:
 3750              	.L391:
 3751              	.LBE293:
 3752              	.LBE292:
 3753              	.LBE291:
 3754              	.LBE290:
 3755              	.LBE289:
 3756              	.LBE288:
 3757              	.LBE307:
 3758              	.LBE311:
 689:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3759              		.loc 1 689 0
 3760 0214 83EB10   		subl	$16, %ebx
 3761              	.LVL457:
 3762              	.LBB312:
 3763              	.LBB308:
 3764              	.LBB304:
 3765              	.LBB302:
 3766              	.LBB300:
 3767              	.LBB298:
 3768              	.LBB297:
 3769              	.LBB296:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 3770              		.loc 1 385 0
 3771 0217 49896E18 		movq	%rbp, 24(%r14)
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 3772              		.loc 1 386 0
 3773 021b 45896620 		movl	%r12d, 32(%r14)
 3774              	.LVL458:
 3775              	.LBE296:
 3776              	.LBE297:
 3777              	.LBE298:
 3778              	.LBE300:
 3779              	.LBE302:
 3780              	.LBE304:
 3781              	.LBE308:
 3782              	.LBE312:
 687:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_ac_symbol(entropy, entropy->ac_tbl_no, 0xF0);
 3783              		.loc 1 687 0
 3784 021f 83FB0F   		cmpl	$15, %ebx
 3785 0222 0F8FF4FE 		jg	.L398
 3785      FFFF
 3786              	.LVL459:
 3787 0228 0F1F8400 		.p2align 4,,10
 3787      00000000 
 3788              		.p2align 3
 3789              	.L447:
 3790 0230 8364240C 		andl	$15, 12(%rsp)
 3790      0F
 3791              	.LVL460:
 3792              	.L386:
 694:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 3793              		.loc 1 694 0
 3794 0235 8B5C2410 		movl	16(%rsp), %ebx
 3795 0239 BD010000 		movl	$1, %ebp
 3795      00
 3796 023e D1FB     		sarl	%ebx
 3797              	.LVL461:
 3798 0240 7416     		je	.L399
 3799              	.LVL462:
 3800              		.p2align 4,,10
 3801 0242 660F1F44 		.p2align 3
 3801      0000
 3802              	.L400:
 695:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Check for out-of-range coefficient values */
 3803              		.loc 1 695 0
 3804 0248 83C501   		addl	$1, %ebp
 3805              	.LVL463:
 694:fltk-1.3.4-1/jpeg/jchuff.c ****       nbits++;
 3806              		.loc 1 694 0
 3807 024b D1FB     		sarl	%ebx
 3808              	.LVL464:
 3809 024d 75F9     		jne	.L400
 697:fltk-1.3.4-1/jpeg/jchuff.c ****       ERREXIT(cinfo, JERR_BAD_DCT_COEF);
 3810              		.loc 1 697 0
 3811 024f 83FD0A   		cmpl	$10, %ebp
 3812 0252 0F8F1003 		jg	.L451
 3812      0000
 3813              	.LVL465:
 3814              	.L399:
 701:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3815              		.loc 1 701 0
 3816 0258 448B6424 		movl	12(%rsp), %r12d
 3816      0C
 3817              	.LBB313:
 3818              	.LBB314:
 431:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 3819              		.loc 1 431 0
 3820 025d 418BB6C0 		movl	192(%r14), %esi
 3820      000000
 3821              	.LBE314:
 3822              	.LBE313:
 701:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3823              		.loc 1 701 0
 3824 0264 496396E0 		movslq	224(%r14), %rdx
 3824      000000
 3825              	.LVL466:
 3826 026b 41C1E404 		sall	$4, %r12d
 3827 026f 4101EC   		addl	%ebp, %r12d
 3828              	.LVL467:
 3829              	.LBB330:
 3830              	.LBB327:
 431:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 3831              		.loc 1 431 0
 3832 0272 85F6     		testl	%esi, %esi
 3833 0274 0F84EE01 		je	.L401
 3833      0000
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 3834              		.loc 1 432 0
 3835 027a 498B94D6 		movq	160(%r14,%rdx,8), %rdx
 3835      A0000000 
 3836              	.LVL468:
 3837 0282 4D63E4   		movslq	%r12d, %r12
 3838 0285 4A8304E2 		addq	$1, (%rdx,%r12,8)
 3838      01
 3839              	.LVL469:
 3840              	.L402:
 3841              	.LBE327:
 3842              	.LBE330:
 3843              	.LBB331:
 3844              	.LBB332:
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 3845              		.loc 1 360 0
 3846 028a 418B96C0 		movl	192(%r14), %edx
 3846      000000
 3847 0291 85D2     		testl	%edx, %edx
 3848 0293 0F85D300 		jne	.L442
 3848      0000
 3849              	.LVL470:
 3850              	.LBB333:
 3851              	.LBB334:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3852              		.loc 1 364 0
 3853 0299 89E9     		movl	%ebp, %ecx
 3854 029b BA010000 		movl	$1, %edx
 3854      00
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3855              		.loc 1 367 0
 3856 02a0 41036E20 		addl	32(%r14), %ebp
 3857              	.LVL471:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3858              		.loc 1 364 0
 3859 02a4 48D3E2   		salq	%cl, %rdx
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3860              		.loc 1 369 0
 3861 02a7 B9180000 		movl	$24, %ecx
 3861      00
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3862              		.loc 1 364 0
 3863 02ac 4883EA01 		subq	$1, %rdx
 3864 02b0 23542420 		andl	32(%rsp), %edx
 3865              	.LVL472:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3866              		.loc 1 369 0
 3867 02b4 29E9     		subl	%ebp, %ecx
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3868              		.loc 1 367 0
 3869 02b6 4189ED   		movl	%ebp, %r13d
 3870              	.LVL473:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3871              		.loc 1 369 0
 3872 02b9 48D3E2   		salq	%cl, %rdx
 3873              	.LVL474:
 3874 02bc 4889D5   		movq	%rdx, %rbp
 3875              	.LVL475:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3876              		.loc 1 372 0
 3877 02bf 490B6E18 		orq	24(%r14), %rbp
 3878              	.LVL476:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3879              		.loc 1 374 0
 3880 02c3 4183FD07 		cmpl	$7, %r13d
 3881 02c7 0F8E9700 		jle	.L413
 3881      0000
 3882 02cd 4589EC   		movl	%r13d, %r12d
 3883 02d0 EB1C     		jmp	.L418
 3884              	.LVL477:
 3885              		.p2align 4,,10
 3886 02d2 660F1F44 		.p2align 3
 3886      0000
 3887              	.L414:
 3888              	.LBB335:
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 3889              		.loc 1 378 0
 3890 02d8 81FBFF00 		cmpl	$255, %ebx
 3890      0000
 3891 02de 7446     		je	.L452
 3892              	.L416:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3893              		.loc 1 382 0
 3894 02e0 4183EC08 		subl	$8, %r12d
 3895              	.LVL478:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 3896              		.loc 1 381 0
 3897 02e4 48C1E508 		salq	$8, %rbp
 3898              	.LVL479:
 3899              	.LBE335:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3900              		.loc 1 374 0
 3901 02e8 4183FC07 		cmpl	$7, %r12d
 3902 02ec 7E72     		jle	.L453
 3903              	.LVL480:
 3904              	.L418:
 3905              	.LBB336:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3906              		.loc 1 377 0
 3907 02ee 498B86C8 		movq	200(%r14), %rax
 3907      000000
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 3908              		.loc 1 375 0
 3909 02f5 4889EA   		movq	%rbp, %rdx
 3910 02f8 48C1FA10 		sarq	$16, %rdx
 3911 02fc 0FB6DA   		movzbl	%dl, %ebx
 3912              	.LVL481:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 3913              		.loc 1 377 0
 3914 02ff 488D4801 		leaq	1(%rax), %rcx
 3915 0303 49898EC8 		movq	%rcx, 200(%r14)
 3915      000000
 3916 030a 8810     		movb	%dl, (%rax)
 3917 030c 4983AED0 		subq	$1, 208(%r14)
 3917      00000001 
 3918 0314 75C2     		jne	.L414
 3919 0316 4C89F7   		movq	%r14, %rdi
 3920 0319 E8000000 		call	dump_buffer_e
 3920      00
 3921              	.LVL482:
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 3922              		.loc 1 378 0
 3923 031e 81FBFF00 		cmpl	$255, %ebx
 3923      0000
 3924 0324 75BA     		jne	.L416
 3925              	.L452:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3926              		.loc 1 379 0
 3927 0326 498B86C8 		movq	200(%r14), %rax
 3927      000000
 3928 032d 488D5001 		leaq	1(%rax), %rdx
 3929 0331 498996C8 		movq	%rdx, 200(%r14)
 3929      000000
 3930 0338 C60000   		movb	$0, (%rax)
 3931 033b 4983AED0 		subq	$1, 208(%r14)
 3931      00000001 
 3932 0343 759B     		jne	.L416
 3933 0345 4C89F7   		movq	%r14, %rdi
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3934              		.loc 1 382 0
 3935 0348 4183EC08 		subl	$8, %r12d
 3936              	.LVL483:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 3937              		.loc 1 381 0
 3938 034c 48C1E508 		salq	$8, %rbp
 3939              	.LVL484:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 3940              		.loc 1 379 0
 3941 0350 E8000000 		call	dump_buffer_e
 3941      00
 3942              	.LVL485:
 3943              	.LBE336:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 3944              		.loc 1 374 0
 3945 0355 4183FC07 		cmpl	$7, %r12d
 3946 0359 7F93     		jg	.L418
 3947 035b 0F1F4400 		.p2align 4,,10
 3947      00
 3948              		.p2align 3
 3949              	.L453:
 3950 0360 4183E507 		andl	$7, %r13d
 3951              	.LVL486:
 3952              	.L413:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 3953              		.loc 1 385 0
 3954 0364 49896E18 		movq	%rbp, 24(%r14)
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 3955              		.loc 1 386 0
 3956 0368 45896E20 		movl	%r13d, 32(%r14)
 3957              	.LVL487:
 3958              	.L442:
 3959              	.LBE334:
 3960              	.LBE333:
 3961              	.LBE332:
 3962              	.LBE331:
 707:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 3963              		.loc 1 707 0
 3964 036c C744240C 		movl	$0, 12(%rsp)
 3964      00000000 
 3965 0374 EB0F     		jmp	.L381
 3966              	.LVL488:
 3967 0376 662E0F1F 		.p2align 4,,10
 3967      84000000 
 3967      0000
 3968              		.p2align 3
 3969              	.L441:
 679:fltk-1.3.4-1/jpeg/jchuff.c ****       continue;
 3970              		.loc 1 679 0
 3971 0380 8344240C 		addl	$1, 12(%rsp)
 3971      01
 3972              	.LVL489:
 3973              	.L381:
 658:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = (*block)[natural_order[k]]) == 0) {
 3974              		.loc 1 658 0 discriminator 2
 3975 0385 83442408 		addl	$1, 8(%rsp)
 3975      01
 3976              	.LVL490:
 3977 038a 8B442408 		movl	8(%rsp), %eax
 3978              	.LVL491:
 3979 038e 48830424 		addq	$4, (%rsp)
 3979      04
 3980 0393 39442414 		cmpl	%eax, 20(%rsp)
 3981 0397 0F8D03FD 		jge	.L419
 3981      FFFF
 710:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->EOBRUN++;		/* count an EOB */
 3982              		.loc 1 710 0
 3983 039d 8B44240C 		movl	12(%rsp), %eax
 3984              	.LVL492:
 3985 03a1 85C0     		testl	%eax, %eax
 3986 03a3 741D     		je	.L379
 711:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->EOBRUN == 0x7FFF)
 3987              		.loc 1 711 0
 3988 03a5 418B86E4 		movl	228(%r14), %eax
 3988      000000
 3989 03ac 8D5001   		leal	1(%rax), %edx
 712:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_eobrun(entropy);	/* force it out to avoid overflow */
 3990              		.loc 1 712 0
 3991 03af 81FAFF7F 		cmpl	$32767, %edx
 3991      0000
 711:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->EOBRUN == 0x7FFF)
 3992              		.loc 1 711 0
 3993 03b5 418996E4 		movl	%edx, 228(%r14)
 3993      000000
 712:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_eobrun(entropy);	/* force it out to avoid overflow */
 3994              		.loc 1 712 0
 3995 03bc 0F842102 		je	.L454
 3995      0000
 3996              	.LVL493:
 3997              	.L379:
 716:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 3998              		.loc 1 716 0
 3999 03c2 488B4424 		movq	40(%rsp), %rax
 3999      28
 4000 03c7 498B8EC8 		movq	200(%r14), %rcx
 4000      000000
 4001 03ce 488B5028 		movq	40(%rax), %rdx
 4002 03d2 48890A   		movq	%rcx, (%rdx)
 717:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4003              		.loc 1 717 0
 4004 03d5 498B8ED0 		movq	208(%r14), %rcx
 4004      000000
 4005 03dc 488B5028 		movq	40(%rax), %rdx
 4006 03e0 48894A08 		movq	%rcx, 8(%rdx)
 720:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 4007              		.loc 1 720 0
 4008 03e4 8B883C01 		movl	316(%rax), %ecx
 4008      0000
 4009 03ea 85C9     		testl	%ecx, %ecx
 4010 03ec 7413     		je	.L421
 721:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 4011              		.loc 1 721 0
 4012 03ee 418B5638 		movl	56(%r14), %edx
 4013 03f2 85D2     		testl	%edx, %edx
 4014 03f4 0F848A01 		je	.L455
 4014      0000
 4015              	.L422:
 726:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4016              		.loc 1 726 0
 4017 03fa 83EA01   		subl	$1, %edx
 4018 03fd 41895638 		movl	%edx, 56(%r14)
 4019              	.L421:
 730:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4020              		.loc 1 730 0
 4021 0401 4883C438 		addq	$56, %rsp
 4022              		.cfi_remember_state
 4023              		.cfi_def_cfa_offset 56
 4024 0405 B8010000 		movl	$1, %eax
 4024      00
 4025 040a 5B       		popq	%rbx
 4026              		.cfi_def_cfa_offset 48
 4027 040b 5D       		popq	%rbp
 4028              		.cfi_def_cfa_offset 40
 4029 040c 415C     		popq	%r12
 4030              		.cfi_def_cfa_offset 32
 4031 040e 415D     		popq	%r13
 4032              		.cfi_def_cfa_offset 24
 4033 0410 415E     		popq	%r14
 4034              		.cfi_def_cfa_offset 16
 4035              	.LVL494:
 4036 0412 415F     		popq	%r15
 4037              		.cfi_def_cfa_offset 8
 4038 0414 C3       		ret
 4039              	.LVL495:
 4040              		.p2align 4,,10
 4041 0415 0F1F00   		.p2align 3
 4042              	.L389:
 4043              		.cfi_restore_state
 4044              	.LBB337:
 4045              	.LBB309:
 4046              	.LBB305:
 4047              	.LBB303:
 4048              	.LBB301:
 4049              	.LBB299:
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4050              		.loc 1 358 0
 4051 0418 498B86D8 		movq	216(%r14), %rax
 4051      000000
 4052              	.LVL496:
 4053 041f 488B00   		movq	(%rax), %rax
 4054 0422 C7402829 		movl	$41, 40(%rax)
 4054      000000
 4055              	.LVL497:
 4056 0429 498BBED8 		movq	216(%r14), %rdi
 4056      000000
 4057 0430 488B07   		movq	(%rdi), %rax
 4058 0433 FF10     		call	*(%rax)
 4059              	.LVL498:
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 4060              		.loc 1 360 0
 4061 0435 418BBEC0 		movl	192(%r14), %edi
 4061      000000
 4062 043c 85FF     		testl	%edi, %edi
 4063 043e 0F85CCFC 		jne	.L388
 4063      FFFF
 4064 0444 E902FDFF 		jmp	.L392
 4064      FF
 4065              	.LVL499:
 4066 0449 0F1F8000 		.p2align 4,,10
 4066      000000
 4067              		.p2align 3
 4068              	.L445:
 4069              	.LBE299:
 4070              	.LBE301:
 4071              	.LBE303:
 4072              	.LBE305:
 4073              	.LBE309:
 4074              	.LBE337:
 669:fltk-1.3.4-1/jpeg/jchuff.c ****       temp >>= Al;		/* apply the point transform */
 4075              		.loc 1 669 0
 4076 0450 89D3     		movl	%edx, %ebx
 4077 0452 F7DB     		negl	%ebx
 4078              	.LVL500:
 670:fltk-1.3.4-1/jpeg/jchuff.c ****       /* For a negative coef, want temp2 = bitwise complement of abs(coef) */
 4079              		.loc 1 670 0
 4080 0454 D3FB     		sarl	%cl, %ebx
 4081              	.LVL501:
 4082 0456 895C2410 		movl	%ebx, 16(%rsp)
 4083              	.LVL502:
 672:fltk-1.3.4-1/jpeg/jchuff.c ****     } else {
 4084              		.loc 1 672 0
 4085 045a F7D3     		notl	%ebx
 4086              	.LVL503:
 4087 045c 895C2420 		movl	%ebx, 32(%rsp)
 4088              	.LVL504:
 4089 0460 E96CFCFF 		jmp	.L383
 4089      FF
 4090              	.LVL505:
 4091              		.p2align 4,,10
 4092 0465 0F1F00   		.p2align 3
 4093              	.L401:
 4094              	.LBB338:
 4095              	.LBB328:
 4096              	.LBB315:
 4097              	.LBB316:
 434:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 4098              		.loc 1 434 0
 4099 0468 498B54D6 		movq	96(%r14,%rdx,8), %rdx
 4099      60
 4100              	.LVL506:
 435:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4101              		.loc 1 435 0
 4102 046d 4D63E4   		movslq	%r12d, %r12
 4103 0470 420FB69C 		movzbl	1024(%rdx,%r12), %ebx
 4103      22000400 
 4103      00
 4104              	.LVL507:
 4105 0479 468B24A2 		movl	(%rdx,%r12,4), %r12d
 4106              	.LVL508:
 4107              	.LBB317:
 4108              	.LBB318:
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 4109              		.loc 1 357 0
 4110 047d 85DB     		testl	%ebx, %ebx
 4111 047f 0F841401 		je	.L403
 4111      0000
 4112              	.LVL509:
 4113              	.L406:
 4114              	.LBB319:
 4115              	.LBB320:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4116              		.loc 1 364 0
 4117 0485 89D9     		movl	%ebx, %ecx
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4118              		.loc 1 367 0
 4119 0487 41035E20 		addl	32(%r14), %ebx
 4120              	.LVL510:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4121              		.loc 1 364 0
 4122 048b BA010000 		movl	$1, %edx
 4122      00
 4123 0490 48D3E2   		salq	%cl, %rdx
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4124              		.loc 1 369 0
 4125 0493 B9180000 		movl	$24, %ecx
 4125      00
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4126              		.loc 1 364 0
 4127 0498 4883EA01 		subq	$1, %rdx
 4128 049c 4121D4   		andl	%edx, %r12d
 4129              	.LVL511:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4130              		.loc 1 369 0
 4131 049f 29D9     		subl	%ebx, %ecx
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4132              		.loc 1 367 0
 4133 04a1 4189DD   		movl	%ebx, %r13d
 4134              	.LVL512:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4135              		.loc 1 369 0
 4136 04a4 49D3E4   		salq	%cl, %r12
 4137              	.LVL513:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4138              		.loc 1 372 0
 4139 04a7 4D0B6618 		orq	24(%r14), %r12
 4140              	.LVL514:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 4141              		.loc 1 374 0
 4142 04ab 83FB07   		cmpl	$7, %ebx
 4143 04ae 7F1D     		jg	.L428
 4144 04b0 E98F0000 		jmp	.L405
 4144      00
 4145              	.LVL515:
 4146              		.p2align 4,,10
 4147 04b5 0F1F00   		.p2align 3
 4148              	.L407:
 4149              	.LBB321:
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 4150              		.loc 1 378 0
 4151 04b8 4181FFFF 		cmpl	$255, %r15d
 4151      000000
 4152 04bf 7446     		je	.L456
 4153              	.L409:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4154              		.loc 1 382 0
 4155 04c1 83EB08   		subl	$8, %ebx
 4156              	.LVL516:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 4157              		.loc 1 381 0
 4158 04c4 49C1E408 		salq	$8, %r12
 4159              	.LVL517:
 4160              	.LBE321:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 4161              		.loc 1 374 0
 4162 04c8 83FB07   		cmpl	$7, %ebx
 4163 04cb 7E73     		jle	.L457
 4164              	.LVL518:
 4165              	.L428:
 4166              	.LBB322:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 4167              		.loc 1 377 0
 4168 04cd 498B86C8 		movq	200(%r14), %rax
 4168      000000
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4169              		.loc 1 375 0
 4170 04d4 4C89E2   		movq	%r12, %rdx
 4171 04d7 48C1FA10 		sarq	$16, %rdx
 4172 04db 440FB6FA 		movzbl	%dl, %r15d
 4173              	.LVL519:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 4174              		.loc 1 377 0
 4175 04df 488D4801 		leaq	1(%rax), %rcx
 4176 04e3 49898EC8 		movq	%rcx, 200(%r14)
 4176      000000
 4177 04ea 8810     		movb	%dl, (%rax)
 4178 04ec 4983AED0 		subq	$1, 208(%r14)
 4178      00000001 
 4179 04f4 75C2     		jne	.L407
 4180 04f6 4C89F7   		movq	%r14, %rdi
 4181 04f9 E8000000 		call	dump_buffer_e
 4181      00
 4182              	.LVL520:
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 4183              		.loc 1 378 0
 4184 04fe 4181FFFF 		cmpl	$255, %r15d
 4184      000000
 4185 0505 75BA     		jne	.L409
 4186              	.L456:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4187              		.loc 1 379 0
 4188 0507 498B86C8 		movq	200(%r14), %rax
 4188      000000
 4189 050e 488D5001 		leaq	1(%rax), %rdx
 4190 0512 498996C8 		movq	%rdx, 200(%r14)
 4190      000000
 4191 0519 C60000   		movb	$0, (%rax)
 4192 051c 4983AED0 		subq	$1, 208(%r14)
 4192      00000001 
 4193 0524 759B     		jne	.L409
 4194 0526 4C89F7   		movq	%r14, %rdi
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4195              		.loc 1 382 0
 4196 0529 83EB08   		subl	$8, %ebx
 4197              	.LVL521:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 4198              		.loc 1 381 0
 4199 052c 49C1E408 		salq	$8, %r12
 4200              	.LVL522:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4201              		.loc 1 379 0
 4202 0530 E8000000 		call	dump_buffer_e
 4202      00
 4203              	.LVL523:
 4204              	.LBE322:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 4205              		.loc 1 374 0
 4206 0535 83FB07   		cmpl	$7, %ebx
 4207 0538 7F93     		jg	.L428
 4208 053a 660F1F44 		.p2align 4,,10
 4208      0000
 4209              		.p2align 3
 4210              	.L457:
 4211 0540 4183E507 		andl	$7, %r13d
 4212              	.LVL524:
 4213              	.L405:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 4214              		.loc 1 385 0
 4215 0544 4D896618 		movq	%r12, 24(%r14)
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 4216              		.loc 1 386 0
 4217 0548 45896E20 		movl	%r13d, 32(%r14)
 4218 054c E939FDFF 		jmp	.L402
 4218      FF
 4219              	.LVL525:
 4220              		.p2align 4,,10
 4221 0551 0F1F8000 		.p2align 3
 4221      000000
 4222              	.L446:
 4223              	.LBE320:
 4224              	.LBE319:
 4225              	.LBE318:
 4226              	.LBE317:
 4227              	.LBE316:
 4228              	.LBE315:
 4229              	.LBE328:
 4230              	.LBE338:
 685:fltk-1.3.4-1/jpeg/jchuff.c ****     /* if run length > 15, must emit special run-length-16 codes (0xF0) */
 4231              		.loc 1 685 0
 4232 0558 4C89F7   		movq	%r14, %rdi
 4233 055b E8000000 		call	emit_eobrun
 4233      00
 4234              	.LVL526:
 4235 0560 E98AFBFF 		jmp	.L385
 4235      FF
 4236              	.LVL527:
 4237              		.p2align 4,,10
 4238 0565 0F1F00   		.p2align 3
 4239              	.L451:
 698:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4240              		.loc 1 698 0
 4241 0568 488B4424 		movq	40(%rsp), %rax
 4241      28
 4242 056d 488B10   		movq	(%rax), %rdx
 4243 0570 4889C7   		movq	%rax, %rdi
 4244 0573 C7422806 		movl	$6, 40(%rdx)
 4244      000000
 4245 057a 488B10   		movq	(%rax), %rdx
 4246 057d FF12     		call	*(%rdx)
 4247              	.LVL528:
 4248 057f E9D4FCFF 		jmp	.L399
 4248      FF
 4249              	.LVL529:
 4250              	.L455:
 724:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4251              		.loc 1 724 0
 4252 0584 418B463C 		movl	60(%r14), %eax
 4253 0588 8D5001   		leal	1(%rax), %edx
 4254 058b 83E207   		andl	$7, %edx
 4255 058e 4189563C 		movl	%edx, 60(%r14)
 4256 0592 89CA     		movl	%ecx, %edx
 4257 0594 E961FEFF 		jmp	.L422
 4257      FF
 4258              	.LVL530:
 4259              	.L403:
 4260              	.LBB339:
 4261              	.LBB329:
 4262              	.LBB326:
 4263              	.LBB325:
 4264              	.LBB324:
 4265              	.LBB323:
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4266              		.loc 1 358 0
 4267 0599 498B96D8 		movq	216(%r14), %rdx
 4267      000000
 4268              	.LVL531:
 4269 05a0 488B12   		movq	(%rdx), %rdx
 4270 05a3 C7422829 		movl	$41, 40(%rdx)
 4270      000000
 4271              	.LVL532:
 4272 05aa 498BBED8 		movq	216(%r14), %rdi
 4272      000000
 4273 05b1 488B17   		movq	(%rdi), %rdx
 4274 05b4 FF12     		call	*(%rdx)
 4275              	.LVL533:
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 4276              		.loc 1 360 0
 4277 05b6 418B8EC0 		movl	192(%r14), %ecx
 4277      000000
 4278 05bd 85C9     		testl	%ecx, %ecx
 4279 05bf 0F84C0FE 		je	.L406
 4279      FFFF
 4280              	.LBE323:
 4281              	.LBE324:
 4282              	.LBE325:
 4283              	.LBE326:
 4284              	.LBE329:
 4285              	.LBE339:
 707:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4286              		.loc 1 707 0
 4287 05c5 C744240C 		movl	$0, 12(%rsp)
 4287      00000000 
 4288              	.LVL534:
 4289 05cd E9B3FDFF 		jmp	.L381
 4289      FF
 4290              	.LVL535:
 4291              	.L444:
 645:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4292              		.loc 1 645 0
 4293 05d2 418B763C 		movl	60(%r14), %esi
 4294 05d6 4C89F7   		movq	%r14, %rdi
 4295              	.LVL536:
 4296 05d9 E8000000 		call	emit_restart_e
 4296      00
 4297              	.LVL537:
 4298 05de E96EFAFF 		jmp	.L377
 4298      FF
 4299              	.LVL538:
 4300              	.L454:
 713:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4301              		.loc 1 713 0
 4302 05e3 4C89F7   		movq	%r14, %rdi
 4303 05e6 E8000000 		call	emit_eobrun
 4303      00
 4304              	.LVL539:
 4305 05eb E9D2FDFF 		jmp	.L379
 4305      FF
 4306              		.cfi_endproc
 4307              	.LFE75:
 4309              		.section	.text.unlikely.encode_mcu_AC_first
 4310              	.LCOLDE10:
 4311              		.section	.text.encode_mcu_AC_first
 4312              	.LHOTE10:
 4313              		.section	.text.unlikely.encode_mcu_AC_refine,"ax",@progbits
 4314              	.LCOLDB11:
 4315              		.section	.text.encode_mcu_AC_refine,"ax",@progbits
 4316              	.LHOTB11:
 4317              		.p2align 4,,15
 4319              	encode_mcu_AC_refine:
 4320              	.LFB77:
 784:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 4321              		.loc 1 784 0
 4322              		.cfi_startproc
 4323              	.LVL540:
 4324 0000 4157     		pushq	%r15
 4325              		.cfi_def_cfa_offset 16
 4326              		.cfi_offset 15, -16
 4327 0002 4156     		pushq	%r14
 4328              		.cfi_def_cfa_offset 24
 4329              		.cfi_offset 14, -24
 4330 0004 4155     		pushq	%r13
 4331              		.cfi_def_cfa_offset 32
 4332              		.cfi_offset 13, -32
 4333 0006 4154     		pushq	%r12
 4334              		.cfi_def_cfa_offset 40
 4335              		.cfi_offset 12, -40
 4336 0008 55       		pushq	%rbp
 4337              		.cfi_def_cfa_offset 48
 4338              		.cfi_offset 6, -48
 4339 0009 53       		pushq	%rbx
 4340              		.cfi_def_cfa_offset 56
 4341              		.cfi_offset 3, -56
 4342 000a 4889F3   		movq	%rsi, %rbx
 4343 000d 4881EC48 		subq	$328, %rsp
 4343      010000
 4344              		.cfi_def_cfa_offset 384
 796:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 4345              		.loc 1 796 0
 4346 0014 488B5728 		movq	40(%rdi), %rdx
 785:fltk-1.3.4-1/jpeg/jchuff.c ****   const int * natural_order;
 4347              		.loc 1 785 0
 4348 0018 4C8BBF30 		movq	560(%rdi), %r15
 4348      020000
 4349              	.LVL541:
 784:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 4350              		.loc 1 784 0
 4351 001f 64488B0C 		movq	%fs:40, %rcx
 4351      25280000 
 4351      00
 4352 0028 48898C24 		movq	%rcx, 312(%rsp)
 4352      38010000 
 4353 0030 31C9     		xorl	%ecx, %ecx
 4354 0032 48897C24 		movq	%rdi, 32(%rsp)
 4354      20
 796:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 4355              		.loc 1 796 0
 4356 0037 488B12   		movq	(%rdx), %rdx
 4357 003a 498997C8 		movq	%rdx, 200(%r15)
 4357      000000
 797:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4358              		.loc 1 797 0
 4359 0041 488B5728 		movq	40(%rdi), %rdx
 4360 0045 488B5208 		movq	8(%rdx), %rdx
 4361 0049 498997D0 		movq	%rdx, 208(%r15)
 4361      000000
 800:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 4362              		.loc 1 800 0
 4363 0050 448B8F3C 		movl	316(%rdi), %r9d
 4363      010000
 4364 0057 4585C9   		testl	%r9d, %r9d
 4365 005a 740D     		je	.L459
 801:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_restart_e(entropy, entropy->next_restart_num);
 4366              		.loc 1 801 0
 4367 005c 458B4738 		movl	56(%r15), %r8d
 4368 0060 4585C0   		testl	%r8d, %r8d
 4369 0063 0F841906 		je	.L540
 4369      0000
 4370              	.LVL542:
 4371              	.L459:
 804:fltk-1.3.4-1/jpeg/jchuff.c ****   Al = cinfo->Al;
 4372              		.loc 1 804 0
 4373 0069 488B4424 		movq	32(%rsp), %rax
 4373      20
 809:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4374              		.loc 1 809 0
 4375 006e 488B33   		movq	(%rbx), %rsi
 804:fltk-1.3.4-1/jpeg/jchuff.c ****   Al = cinfo->Al;
 4376              		.loc 1 804 0
 4377 0071 8B88D001 		movl	464(%rax), %ecx
 4377      0000
 806:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4378              		.loc 1 806 0
 4379 0077 488B90E0 		movq	480(%rax), %rdx
 4379      010000
 809:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4380              		.loc 1 809 0
 4381 007e 4989F3   		movq	%rsi, %r11
 4382 0081 48897424 		movq	%rsi, 40(%rsp)
 4382      28
 804:fltk-1.3.4-1/jpeg/jchuff.c ****   Al = cinfo->Al;
 4383              		.loc 1 804 0
 4384 0086 89CF     		movl	%ecx, %edi
 4385 0088 894C2418 		movl	%ecx, 24(%rsp)
 4386              	.LVL543:
 805:fltk-1.3.4-1/jpeg/jchuff.c ****   natural_order = cinfo->natural_order;
 4387              		.loc 1 805 0
 4388 008c 8B88D801 		movl	472(%rax), %ecx
 4388      0000
 4389              	.LVL544:
 815:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = (*block)[natural_order[k]];
 4390              		.loc 1 815 0
 4391 0092 8B80CC01 		movl	460(%rax), %eax
 4391      0000
 4392 0098 39C7     		cmpl	%eax, %edi
 4393 009a 890424   		movl	%eax, (%rsp)
 4394              	.LVL545:
 4395 009d 0F8C2D05 		jl	.L506
 4395      0000
 4396 00a3 4C63C0   		movslq	%eax, %r8
 4397 00a6 448D4F01 		leal	1(%rdi), %r9d
 4398 00aa 4531D2   		xorl	%r10d, %r10d
 4399 00ad 4A8D3482 		leaq	(%rdx,%r8,4), %rsi
 4400              	.LVL546:
 4401 00b1 48897424 		movq	%rsi, 16(%rsp)
 4401      10
 4402 00b6 4889F7   		movq	%rsi, %rdi
 4403              	.LVL547:
 4404 00b9 89C6     		movl	%eax, %esi
 4405              	.LVL548:
 4406 00bb 0F1F4400 		.p2align 4,,10
 4406      00
 4407              		.p2align 3
 4408              	.L462:
 816:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We must apply the point transform by Al.  For AC coefficients this
 4409              		.loc 1 816 0
 4410 00c0 486307   		movslq	(%rdi), %rax
 4411 00c3 410FBF04 		movswl	(%r11,%rax,2), %eax
 4411      43
 4412              	.LVL549:
 4413 00c8 99       		cltd
 4414 00c9 31D0     		xorl	%edx, %eax
 4415              	.LVL550:
 4416 00cb 29D0     		subl	%edx, %eax
 4417              	.LVL551:
 824:fltk-1.3.4-1/jpeg/jchuff.c ****     if (temp == 1)
 4418              		.loc 1 824 0
 4419 00cd 4863D6   		movslq	%esi, %rdx
 823:fltk-1.3.4-1/jpeg/jchuff.c ****     absvalues[k] = temp;	/* save abs value for main pass */
 4420              		.loc 1 823 0
 4421 00d0 D3F8     		sarl	%cl, %eax
 4422              	.LVL552:
 4423 00d2 83F801   		cmpl	$1, %eax
 824:fltk-1.3.4-1/jpeg/jchuff.c ****     if (temp == 1)
 4424              		.loc 1 824 0
 4425 00d5 89449430 		movl	%eax, 48(%rsp,%rdx,4)
 4426 00d9 440F44D6 		cmove	%esi, %r10d
 4427              	.LVL553:
 815:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = (*block)[natural_order[k]];
 4428              		.loc 1 815 0
 4429 00dd 83C601   		addl	$1, %esi
 4430              	.LVL554:
 4431 00e0 4883C704 		addq	$4, %rdi
 4432 00e4 4439CE   		cmpl	%r9d, %esi
 4433 00e7 75D7     		jne	.L462
 833:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4434              		.loc 1 833 0
 4435 00e9 458BAFE8 		movl	232(%r15), %r13d
 4435      000000
 4436 00f0 44895424 		movl	%r10d, 28(%rsp)
 4436      1C
 4437              	.LVL555:
 4438 00f5 4531E4   		xorl	%r12d, %r12d
 4439 00f8 4D03AFF0 		addq	240(%r15), %r13
 4439      000000
 4440              	.LVL556:
 4441 00ff 31ED     		xorl	%ebp, %ebp
 4442 0101 4D89FE   		movq	%r15, %r14
 4443              	.LVL557:
 4444              		.p2align 4,,10
 4445 0104 0F1F4000 		.p2align 3
 4446              	.L504:
 836:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 4447              		.loc 1 836 0
 4448 0108 428B4484 		movl	48(%rsp,%r8,4), %eax
 4448      30
 4449 010d 85C0     		testl	%eax, %eax
 4450 010f 8944240C 		movl	%eax, 12(%rsp)
 4451              	.LVL558:
 4452 0113 0F849F01 		je	.L464
 4452      0000
 842:fltk-1.3.4-1/jpeg/jchuff.c ****       /* emit any pending EOBRUN and the BE correction bits */
 4453              		.loc 1 842 0
 4454 0119 83FD0F   		cmpl	$15, %ebp
 4455 011c 0F8E6102 		jle	.L512
 4455      0000
 4456 0122 8B3C24   		movl	(%rsp), %edi
 4457 0125 397C241C 		cmpl	%edi, 28(%rsp)
 4458 0129 8D5DF0   		leal	-16(%rbp), %ebx
 4459 012c 0F9DC2   		setge	%dl
 4460 012f 84D2     		testb	%dl, %dl
 4461 0131 7544     		jne	.L522
 4462 0133 E94B0200 		jmp	.L512
 4462      00
 4463              	.LVL559:
 4464 0138 0F1F8400 		.p2align 4,,10
 4464      00000000 
 4465              		.p2align 3
 4466              	.L543:
 4467              	.LBB369:
 4468              	.LBB370:
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 4469              		.loc 1 432 0
 4470 0140 498B84C6 		movq	160(%r14,%rax,8), %rax
 4470      A0000000 
 4471              	.LVL560:
 4472              	.LBE370:
 4473              	.LBE369:
 847:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Emit buffered correction bits that must be associated with ZRL */
 4474              		.loc 1 847 0
 4475 0148 89DD     		movl	%ebx, %ebp
 4476              	.LBB408:
 4477              	.LBB401:
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 4478              		.loc 1 432 0
 4479 014a 48838080 		addq	$1, 1920(%rax)
 4479      07000001 
 4480              	.LVL561:
 4481              	.LBE401:
 4482              	.LBE408:
 4483              	.LBB409:
 4484              	.LBB410:
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 4485              		.loc 1 448 0
 4486 0152 418B8EC0 		movl	192(%r14), %ecx
 4486      000000
 4487 0159 85C9     		testl	%ecx, %ecx
 4488 015b 0F843F01 		je	.L541
 4488      0000
 4489              	.LVL562:
 4490              	.L481:
 4491 0161 83EB10   		subl	$16, %ebx
 4492              	.LVL563:
 4493              	.LBE410:
 4494              	.LBE409:
 851:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4495              		.loc 1 851 0
 4496 0164 4531E4   		xorl	%r12d, %r12d
 842:fltk-1.3.4-1/jpeg/jchuff.c ****       /* emit any pending EOBRUN and the BE correction bits */
 4497              		.loc 1 842 0
 4498 0167 83FD0F   		cmpl	$15, %ebp
 850:fltk-1.3.4-1/jpeg/jchuff.c ****       BR = 0;
 4499              		.loc 1 850 0
 4500 016a 4D8BAEF0 		movq	240(%r14), %r13
 4500      000000
 4501              	.LVL564:
 842:fltk-1.3.4-1/jpeg/jchuff.c ****       /* emit any pending EOBRUN and the BE correction bits */
 4502              		.loc 1 842 0
 4503 0171 0F8E6901 		jle	.L542
 4503      0000
 4504              	.LVL565:
 4505              	.L522:
 844:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Emit ZRL */
 4506              		.loc 1 844 0
 4507 0177 4C89F7   		movq	%r14, %rdi
 4508 017a E8000000 		call	emit_eobrun
 4508      00
 4509              	.LVL566:
 4510              	.LBB414:
 4511              	.LBB402:
 431:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 4512              		.loc 1 431 0
 4513 017f 418BBEC0 		movl	192(%r14), %edi
 4513      000000
 4514              	.LBE402:
 4515              	.LBE414:
 846:fltk-1.3.4-1/jpeg/jchuff.c ****       r -= 16;
 4516              		.loc 1 846 0
 4517 0186 496386E0 		movslq	224(%r14), %rax
 4517      000000
 4518              	.LVL567:
 4519              	.LBB415:
 4520              	.LBB403:
 431:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 4521              		.loc 1 431 0
 4522 018d 85FF     		testl	%edi, %edi
 4523 018f 75AF     		jne	.L543
 4524              	.LVL568:
 4525              	.LBB371:
 4526              	.LBB372:
 434:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 4527              		.loc 1 434 0
 4528 0191 498B44C6 		movq	96(%r14,%rax,8), %rax
 4528      60
 4529              	.LVL569:
 435:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4530              		.loc 1 435 0
 4531 0196 0FB6A8F0 		movzbl	1264(%rax), %ebp
 4531      040000
 4532 019d 448BB8C0 		movl	960(%rax), %r15d
 4532      030000
 4533              	.LVL570:
 4534              	.LBB373:
 4535              	.LBB374:
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 4536              		.loc 1 357 0
 4537 01a4 85ED     		testl	%ebp, %ebp
 4538 01a6 0F845401 		je	.L471
 4538      0000
 4539              	.LVL571:
 4540              	.L475:
 4541              	.LBB375:
 4542              	.LBB376:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4543              		.loc 1 364 0
 4544 01ac 89E9     		movl	%ebp, %ecx
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4545              		.loc 1 367 0
 4546 01ae 41036E20 		addl	32(%r14), %ebp
 4547              	.LVL572:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4548              		.loc 1 364 0
 4549 01b2 B8010000 		movl	$1, %eax
 4549      00
 4550 01b7 48D3E0   		salq	%cl, %rax
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4551              		.loc 1 369 0
 4552 01ba B9180000 		movl	$24, %ecx
 4552      00
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4553              		.loc 1 364 0
 4554 01bf 4883E801 		subq	$1, %rax
 4555 01c3 4121C7   		andl	%eax, %r15d
 4556              	.LVL573:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4557              		.loc 1 369 0
 4558 01c6 29E9     		subl	%ebp, %ecx
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4559              		.loc 1 367 0
 4560 01c8 896C2404 		movl	%ebp, 4(%rsp)
 4561              	.LVL574:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4562              		.loc 1 369 0
 4563 01cc 49D3E7   		salq	%cl, %r15
 4564              	.LVL575:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4565              		.loc 1 372 0
 4566 01cf 4D0B7E18 		orq	24(%r14), %r15
 4567              	.LVL576:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 4568              		.loc 1 374 0
 4569 01d3 83FD07   		cmpl	$7, %ebp
 4570 01d6 0F8E9D00 		jle	.L473
 4570      0000
 4571 01dc 895C2408 		movl	%ebx, 8(%rsp)
 4572 01e0 EB1A     		jmp	.L523
 4573              	.LVL577:
 4574              		.p2align 4,,10
 4575 01e2 660F1F44 		.p2align 3
 4575      0000
 4576              	.L476:
 4577              	.LBB377:
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 4578              		.loc 1 378 0
 4579 01e8 81FBFF00 		cmpl	$255, %ebx
 4579      0000
 4580 01ee 7444     		je	.L544
 4581              	.L478:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4582              		.loc 1 382 0
 4583 01f0 83ED08   		subl	$8, %ebp
 4584              	.LVL578:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 4585              		.loc 1 381 0
 4586 01f3 49C1E708 		salq	$8, %r15
 4587              	.LVL579:
 4588              	.LBE377:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 4589              		.loc 1 374 0
 4590 01f7 83FD07   		cmpl	$7, %ebp
 4591 01fa 7E74     		jle	.L545
 4592              	.LVL580:
 4593              	.L523:
 4594              	.LBB378:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 4595              		.loc 1 377 0
 4596 01fc 498B86C8 		movq	200(%r14), %rax
 4596      000000
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4597              		.loc 1 375 0
 4598 0203 4C89FA   		movq	%r15, %rdx
 4599 0206 48C1FA10 		sarq	$16, %rdx
 4600 020a 0FB6DA   		movzbl	%dl, %ebx
 4601              	.LVL581:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 4602              		.loc 1 377 0
 4603 020d 488D7001 		leaq	1(%rax), %rsi
 4604 0211 4989B6C8 		movq	%rsi, 200(%r14)
 4604      000000
 4605 0218 8810     		movb	%dl, (%rax)
 4606 021a 4983AED0 		subq	$1, 208(%r14)
 4606      00000001 
 4607 0222 75C4     		jne	.L476
 4608 0224 4C89F7   		movq	%r14, %rdi
 4609 0227 E8000000 		call	dump_buffer_e
 4609      00
 4610              	.LVL582:
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 4611              		.loc 1 378 0
 4612 022c 81FBFF00 		cmpl	$255, %ebx
 4612      0000
 4613 0232 75BC     		jne	.L478
 4614              	.L544:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4615              		.loc 1 379 0
 4616 0234 498B86C8 		movq	200(%r14), %rax
 4616      000000
 4617 023b 488D5001 		leaq	1(%rax), %rdx
 4618 023f 498996C8 		movq	%rdx, 200(%r14)
 4618      000000
 4619 0246 C60000   		movb	$0, (%rax)
 4620 0249 4983AED0 		subq	$1, 208(%r14)
 4620      00000001 
 4621 0251 759D     		jne	.L478
 4622 0253 4C89F7   		movq	%r14, %rdi
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4623              		.loc 1 382 0
 4624 0256 83ED08   		subl	$8, %ebp
 4625              	.LVL583:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 4626              		.loc 1 381 0
 4627 0259 49C1E708 		salq	$8, %r15
 4628              	.LVL584:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4629              		.loc 1 379 0
 4630 025d E8000000 		call	dump_buffer_e
 4630      00
 4631              	.LVL585:
 4632              	.LBE378:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 4633              		.loc 1 374 0
 4634 0262 83FD07   		cmpl	$7, %ebp
 4635 0265 7F95     		jg	.L523
 4636 0267 660F1F84 		.p2align 4,,10
 4636      00000000 
 4636      00
 4637              		.p2align 3
 4638              	.L545:
 4639 0270 83642404 		andl	$7, 4(%rsp)
 4639      07
 4640 0275 8B5C2408 		movl	8(%rsp), %ebx
 4641              	.LVL586:
 4642              	.L473:
 4643              	.LBE376:
 4644              	.LBE375:
 4645              	.LBE374:
 4646              	.LBE373:
 4647              	.LBE372:
 4648              	.LBE371:
 4649              	.LBE403:
 4650              	.LBE415:
 4651              	.LBB416:
 4652              	.LBB411:
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 4653              		.loc 1 448 0
 4654 0279 418B8EC0 		movl	192(%r14), %ecx
 4654      000000
 4655              	.LBE411:
 4656              	.LBE416:
 4657              	.LBB417:
 4658              	.LBB404:
 4659              	.LBB397:
 4660              	.LBB393:
 4661              	.LBB389:
 4662              	.LBB385:
 4663              	.LBB382:
 4664              	.LBB379:
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 4665              		.loc 1 386 0
 4666 0280 8B442404 		movl	4(%rsp), %eax
 4667              	.LBE379:
 4668              	.LBE382:
 4669              	.LBE385:
 4670              	.LBE389:
 4671              	.LBE393:
 4672              	.LBE397:
 4673              	.LBE404:
 4674              	.LBE417:
 847:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Emit buffered correction bits that must be associated with ZRL */
 4675              		.loc 1 847 0
 4676 0284 89DD     		movl	%ebx, %ebp
 4677              	.LVL587:
 4678              	.LBB418:
 4679              	.LBB405:
 4680              	.LBB398:
 4681              	.LBB394:
 4682              	.LBB390:
 4683              	.LBB386:
 4684              	.LBB383:
 4685              	.LBB380:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 4686              		.loc 1 385 0
 4687 0286 4D897E18 		movq	%r15, 24(%r14)
 4688              	.LBE380:
 4689              	.LBE383:
 4690              	.LBE386:
 4691              	.LBE390:
 4692              	.LBE394:
 4693              	.LBE398:
 4694              	.LBE405:
 4695              	.LBE418:
 4696              	.LBB419:
 4697              	.LBB412:
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 4698              		.loc 1 448 0
 4699 028a 85C9     		testl	%ecx, %ecx
 4700              	.LBE412:
 4701              	.LBE419:
 4702              	.LBB420:
 4703              	.LBB406:
 4704              	.LBB399:
 4705              	.LBB395:
 4706              	.LBB391:
 4707              	.LBB387:
 4708              	.LBB384:
 4709              	.LBB381:
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 4710              		.loc 1 386 0
 4711 028c 41894620 		movl	%eax, 32(%r14)
 4712              	.LVL588:
 4713              	.LBE381:
 4714              	.LBE384:
 4715              	.LBE387:
 4716              	.LBE391:
 4717              	.LBE395:
 4718              	.LBE399:
 4719              	.LBE406:
 4720              	.LBE420:
 4721              	.LBB421:
 4722              	.LBB413:
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 4723              		.loc 1 448 0
 4724 0290 0F85CBFE 		jne	.L481
 4724      FFFF
 4725              	.LVL589:
 4726 0296 662E0F1F 		.p2align 4,,10
 4726      84000000 
 4726      0000
 4727              		.p2align 3
 4728              	.L541:
 4729 02a0 4489E2   		movl	%r12d, %edx
 4730 02a3 4C89EE   		movq	%r13, %rsi
 4731 02a6 4C89F7   		movq	%r14, %rdi
 4732 02a9 E8000000 		call	emit_buffered_bits.part.2
 4732      00
 4733              	.LVL590:
 4734 02ae E9AEFEFF 		jmp	.L481
 4734      FF
 4735              	.LVL591:
 4736              		.p2align 4,,10
 4737 02b3 0F1F4400 		.p2align 3
 4737      00
 4738              	.L464:
 4739              	.LBE413:
 4740              	.LBE421:
 837:fltk-1.3.4-1/jpeg/jchuff.c ****       continue;
 4741              		.loc 1 837 0
 4742 02b8 83C501   		addl	$1, %ebp
 4743              	.LVL592:
 4744              	.L468:
 835:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp = absvalues[k]) == 0) {
 4745              		.loc 1 835 0 discriminator 2
 4746 02bb 83042401 		addl	$1, (%rsp)
 4747              	.LVL593:
 4748 02bf 48834424 		addq	$4, 16(%rsp)
 4748      1004
 4749 02c5 8B0424   		movl	(%rsp), %eax
 4750              	.LVL594:
 4751 02c8 39442418 		cmpl	%eax, 24(%rsp)
 4752 02cc 0F8CBA02 		jl	.L533
 4752      0000
 4753 02d2 4C63C0   		movslq	%eax, %r8
 4754 02d5 E92EFEFF 		jmp	.L504
 4754      FF
 4755              	.LVL595:
 4756 02da 660F1F44 		.p2align 4,,10
 4756      0000
 4757              		.p2align 3
 4758              	.L542:
 851:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4759              		.loc 1 851 0
 4760 02e0 31DB     		xorl	%ebx, %ebx
 4761              	.LVL596:
 4762              	.L467:
 859:fltk-1.3.4-1/jpeg/jchuff.c ****       /* The correction bit is the next bit of the absolute value. */
 4763              		.loc 1 859 0
 4764 02e2 8B44240C 		movl	12(%rsp), %eax
 4765 02e6 83F801   		cmpl	$1, %eax
 4766 02e9 7E48     		jle	.L483
 861:fltk-1.3.4-1/jpeg/jchuff.c ****       continue;
 4767              		.loc 1 861 0
 4768 02eb 4189C7   		movl	%eax, %r15d
 4769 02ee 89DA     		movl	%ebx, %edx
 4770 02f0 448D6301 		leal	1(%rbx), %r12d
 4771              	.LVL597:
 4772 02f4 4183E701 		andl	$1, %r15d
 4773 02f8 45887C15 		movb	%r15b, 0(%r13,%rdx)
 4773      00
 862:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4774              		.loc 1 862 0
 4775 02fd EBBC     		jmp	.L468
 4776              	.LVL598:
 4777 02ff 90       		.p2align 4,,10
 4778              		.p2align 3
 4779              	.L471:
 4780              	.LBB422:
 4781              	.LBB407:
 4782              	.LBB400:
 4783              	.LBB396:
 4784              	.LBB392:
 4785              	.LBB388:
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4786              		.loc 1 358 0
 4787 0300 498B86D8 		movq	216(%r14), %rax
 4787      000000
 4788              	.LVL599:
 4789 0307 488B00   		movq	(%rax), %rax
 4790 030a C7402829 		movl	$41, 40(%rax)
 4790      000000
 4791              	.LVL600:
 4792 0311 498BBED8 		movq	216(%r14), %rdi
 4792      000000
 4793 0318 488B07   		movq	(%rdi), %rax
 4794 031b FF10     		call	*(%rax)
 4795              	.LVL601:
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 4796              		.loc 1 360 0
 4797 031d 418BB6C0 		movl	192(%r14), %esi
 4797      000000
 4798 0324 85F6     		testl	%esi, %esi
 4799 0326 0F8480FE 		je	.L475
 4799      FFFF
 4800              	.LVL602:
 4801              	.LBE388:
 4802              	.LBE392:
 4803              	.LBE396:
 4804              	.LBE400:
 4805              	.LBE407:
 4806              	.LBE422:
 847:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Emit buffered correction bits that must be associated with ZRL */
 4807              		.loc 1 847 0
 4808 032c 89DD     		movl	%ebx, %ebp
 4809              	.LVL603:
 4810 032e E92EFEFF 		jmp	.L481
 4810      FF
 4811              	.LVL604:
 4812              	.L483:
 866:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4813              		.loc 1 866 0
 4814 0333 4C89F7   		movq	%r14, %rdi
 869:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4815              		.loc 1 869 0
 4816 0336 C1E504   		sall	$4, %ebp
 866:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4817              		.loc 1 866 0
 4818 0339 E8000000 		call	emit_eobrun
 4818      00
 4819              	.LVL605:
 4820              	.LBB423:
 4821              	.LBB424:
 431:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 4822              		.loc 1 431 0
 4823 033e 418B96C0 		movl	192(%r14), %edx
 4823      000000
 4824              	.LBE424:
 4825              	.LBE423:
 869:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4826              		.loc 1 869 0
 4827 0345 8D4D01   		leal	1(%rbp), %ecx
 4828 0348 4963B6E0 		movslq	224(%r14), %rsi
 4828      000000
 4829              	.LVL606:
 4830              	.LBB454:
 4831              	.LBB449:
 431:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->ac_count_ptrs[tbl_no][symbol]++;
 4832              		.loc 1 431 0
 4833 034f 85D2     		testl	%edx, %edx
 4834 0351 7438     		je	.L484
 432:fltk-1.3.4-1/jpeg/jchuff.c ****   else {
 4835              		.loc 1 432 0
 4836 0353 498BB4F6 		movq	160(%r14,%rsi,8), %rsi
 4836      A0000000 
 4837              	.LVL607:
 4838 035b 4863C9   		movslq	%ecx, %rcx
 4839 035e 488304CE 		addq	$1, (%rsi,%rcx,8)
 4839      01
 4840              	.LVL608:
 4841              	.LBE449:
 4842              	.LBE454:
 4843              	.LBB455:
 4844              	.LBB456:
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 4845              		.loc 1 360 0
 4846 0363 418BB6C0 		movl	192(%r14), %esi
 4846      000000
 4847 036a 85F6     		testl	%esi, %esi
 4848 036c 0F841C01 		je	.L546
 4848      0000
 4849              	.LVL609:
 4850              	.L497:
 4851              	.LBE456:
 4852              	.LBE455:
 877:fltk-1.3.4-1/jpeg/jchuff.c ****     BR = 0;
 4853              		.loc 1 877 0
 4854 0372 4D8BAEF0 		movq	240(%r14), %r13
 4854      000000
 4855              	.LVL610:
 878:fltk-1.3.4-1/jpeg/jchuff.c ****     r = 0;			/* reset zero run length */
 4856              		.loc 1 878 0
 4857 0379 4531E4   		xorl	%r12d, %r12d
 879:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4858              		.loc 1 879 0
 4859 037c 31ED     		xorl	%ebp, %ebp
 4860 037e E938FFFF 		jmp	.L468
 4860      FF
 4861              	.LVL611:
 4862              	.L512:
 842:fltk-1.3.4-1/jpeg/jchuff.c ****       /* emit any pending EOBRUN and the BE correction bits */
 4863              		.loc 1 842 0
 4864 0383 4489E3   		movl	%r12d, %ebx
 4865 0386 E957FFFF 		jmp	.L467
 4865      FF
 4866              	.LVL612:
 4867              	.L484:
 4868              	.LBB468:
 4869              	.LBB450:
 4870              	.LBB425:
 4871              	.LBB426:
 434:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
 4872              		.loc 1 434 0
 4873 038b 498B7CF6 		movq	96(%r14,%rsi,8), %rdi
 4873      60
 4874              	.LVL613:
 435:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4875              		.loc 1 435 0
 4876 0390 4863F1   		movslq	%ecx, %rsi
 4877              	.LVL614:
 4878 0393 440FB6A4 		movzbl	1024(%rdi,%rsi), %r12d
 4878      37000400 
 4878      00
 4879 039c 8B2CB7   		movl	(%rdi,%rsi,4), %ebp
 4880              	.LVL615:
 4881              	.LBB427:
 4882              	.LBB428:
 357:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);
 4883              		.loc 1 357 0
 4884 039f 4585E4   		testl	%r12d, %r12d
 4885 03a2 0F848D02 		je	.L486
 4885      0000
 4886              	.LVL616:
 4887              	.L490:
 4888              	.LBB429:
 4889              	.LBB430:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4890              		.loc 1 364 0
 4891 03a8 4489E1   		movl	%r12d, %ecx
 4892 03ab BF010000 		movl	$1, %edi
 4892      00
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4893              		.loc 1 367 0
 4894 03b0 45036620 		addl	32(%r14), %r12d
 4895              	.LVL617:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4896              		.loc 1 364 0
 4897 03b4 48D3E7   		salq	%cl, %rdi
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4898              		.loc 1 369 0
 4899 03b7 B9180000 		movl	$24, %ecx
 4899      00
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4900              		.loc 1 364 0
 4901 03bc 4889FE   		movq	%rdi, %rsi
 4902 03bf 4883EE01 		subq	$1, %rsi
 4903 03c3 21EE     		andl	%ebp, %esi
 4904              	.LVL618:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4905              		.loc 1 369 0
 4906 03c5 4429E1   		subl	%r12d, %ecx
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4907              		.loc 1 367 0
 4908 03c8 44896424 		movl	%r12d, 4(%rsp)
 4908      04
 4909              	.LVL619:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4910              		.loc 1 369 0
 4911 03cd 48D3E6   		salq	%cl, %rsi
 4912              	.LVL620:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4913              		.loc 1 372 0
 4914 03d0 490B7618 		orq	24(%r14), %rsi
 4915              	.LVL621:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 4916              		.loc 1 374 0
 4917 03d4 4183FC07 		cmpl	$7, %r12d
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4918              		.loc 1 372 0
 4919 03d8 4889F5   		movq	%rsi, %rbp
 4920              	.LVL622:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 4921              		.loc 1 374 0
 4922 03db 7F22     		jg	.L521
 4923 03dd E9910000 		jmp	.L488
 4923      00
 4924              	.LVL623:
 4925              		.p2align 4,,10
 4926 03e2 660F1F44 		.p2align 3
 4926      0000
 4927              	.L491:
 4928              	.LBB431:
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 4929              		.loc 1 378 0
 4930 03e8 4181FFFF 		cmpl	$255, %r15d
 4930      000000
 4931 03ef 7448     		je	.L547
 4932              	.L493:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4933              		.loc 1 382 0
 4934 03f1 4183EC08 		subl	$8, %r12d
 4935              	.LVL624:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 4936              		.loc 1 381 0
 4937 03f5 48C1E508 		salq	$8, %rbp
 4938              	.LVL625:
 4939              	.LBE431:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 4940              		.loc 1 374 0
 4941 03f9 4183FC07 		cmpl	$7, %r12d
 4942 03fd 7E6F     		jle	.L548
 4943              	.LVL626:
 4944              	.L521:
 4945              	.LBB432:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 4946              		.loc 1 377 0
 4947 03ff 498B86C8 		movq	200(%r14), %rax
 4947      000000
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 4948              		.loc 1 375 0
 4949 0406 4889EA   		movq	%rbp, %rdx
 4950 0409 48C1FA10 		sarq	$16, %rdx
 4951 040d 440FB6FA 		movzbl	%dl, %r15d
 4952              	.LVL627:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 4953              		.loc 1 377 0
 4954 0411 488D4801 		leaq	1(%rax), %rcx
 4955 0415 49898EC8 		movq	%rcx, 200(%r14)
 4955      000000
 4956 041c 8810     		movb	%dl, (%rax)
 4957 041e 4983AED0 		subq	$1, 208(%r14)
 4957      00000001 
 4958 0426 75C0     		jne	.L491
 4959 0428 4C89F7   		movq	%r14, %rdi
 4960 042b E8000000 		call	dump_buffer_e
 4960      00
 4961              	.LVL628:
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 4962              		.loc 1 378 0
 4963 0430 4181FFFF 		cmpl	$255, %r15d
 4963      000000
 4964 0437 75B8     		jne	.L493
 4965              	.L547:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4966              		.loc 1 379 0
 4967 0439 498B86C8 		movq	200(%r14), %rax
 4967      000000
 4968 0440 488D5001 		leaq	1(%rax), %rdx
 4969 0444 498996C8 		movq	%rdx, 200(%r14)
 4969      000000
 4970 044b C60000   		movb	$0, (%rax)
 4971 044e 4983AED0 		subq	$1, 208(%r14)
 4971      00000001 
 4972 0456 7599     		jne	.L493
 4973 0458 4C89F7   		movq	%r14, %rdi
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 4974              		.loc 1 382 0
 4975 045b 4183EC08 		subl	$8, %r12d
 4976              	.LVL629:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 4977              		.loc 1 381 0
 4978 045f 48C1E508 		salq	$8, %rbp
 4979              	.LVL630:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 4980              		.loc 1 379 0
 4981 0463 E8000000 		call	dump_buffer_e
 4981      00
 4982              	.LVL631:
 4983              	.LBE432:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 4984              		.loc 1 374 0
 4985 0468 4183FC07 		cmpl	$7, %r12d
 4986 046c 7F91     		jg	.L521
 4987              	.L548:
 4988 046e 83642404 		andl	$7, 4(%rsp)
 4988      07
 4989              	.LVL632:
 4990              	.L488:
 4991              	.LBE430:
 4992              	.LBE429:
 4993              	.LBE428:
 4994              	.LBE427:
 4995              	.LBE426:
 4996              	.LBE425:
 4997              	.LBE450:
 4998              	.LBE468:
 4999              	.LBB469:
 5000              	.LBB463:
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 5001              		.loc 1 360 0
 5002 0473 418BB6C0 		movl	192(%r14), %esi
 5002      000000
 5003              	.LBE463:
 5004              	.LBE469:
 5005              	.LBB470:
 5006              	.LBB451:
 5007              	.LBB446:
 5008              	.LBB443:
 5009              	.LBB440:
 5010              	.LBB437:
 5011              	.LBB435:
 5012              	.LBB433:
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 5013              		.loc 1 386 0
 5014 047a 8B442404 		movl	4(%rsp), %eax
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 5015              		.loc 1 385 0
 5016 047e 49896E18 		movq	%rbp, 24(%r14)
 5017              	.LBE433:
 5018              	.LBE435:
 5019              	.LBE437:
 5020              	.LBE440:
 5021              	.LBE443:
 5022              	.LBE446:
 5023              	.LBE451:
 5024              	.LBE470:
 5025              	.LBB471:
 5026              	.LBB464:
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 5027              		.loc 1 360 0
 5028 0482 85F6     		testl	%esi, %esi
 5029              	.LBE464:
 5030              	.LBE471:
 5031              	.LBB472:
 5032              	.LBB452:
 5033              	.LBB447:
 5034              	.LBB444:
 5035              	.LBB441:
 5036              	.LBB438:
 5037              	.LBB436:
 5038              	.LBB434:
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 5039              		.loc 1 386 0
 5040 0484 41894620 		movl	%eax, 32(%r14)
 5041              	.LVL633:
 5042              	.LBE434:
 5043              	.LBE436:
 5044              	.LBE438:
 5045              	.LBE441:
 5046              	.LBE444:
 5047              	.LBE447:
 5048              	.LBE452:
 5049              	.LBE472:
 5050              	.LBB473:
 5051              	.LBB465:
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 5052              		.loc 1 360 0
 5053 0488 0F85E4FE 		jne	.L497
 5053      FFFF
 5054              	.LVL634:
 5055              	.L546:
 5056              	.LBE465:
 5057              	.LBE473:
 872:fltk-1.3.4-1/jpeg/jchuff.c ****     emit_bits_e(entropy, (unsigned int) temp, 1);
 5058              		.loc 1 872 0
 5059 048e 488B4424 		movq	16(%rsp), %rax
 5059      10
 5060 0493 486308   		movslq	(%rax), %rcx
 5061              	.LBB474:
 5062              	.LBB466:
 5063              	.LBB457:
 5064              	.LBB458:
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5065              		.loc 1 364 0
 5066 0496 488B4424 		movq	40(%rsp), %rax
 5066      28
 5067 049b 480FBF3C 		movswq	(%rax,%rcx,2), %rdi
 5067      48
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5068              		.loc 1 367 0
 5069 04a0 418B4620 		movl	32(%r14), %eax
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5070              		.loc 1 369 0
 5071 04a4 B9180000 		movl	$24, %ecx
 5071      00
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5072              		.loc 1 367 0
 5073 04a9 448D6001 		leal	1(%rax), %r12d
 5074 04ad 89442404 		movl	%eax, 4(%rsp)
 364:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5075              		.loc 1 364 0
 5076 04b1 48F7D7   		notq	%rdi
 5077 04b4 48C1EF3F 		shrq	$63, %rdi
 5078              	.LVL635:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5079              		.loc 1 369 0
 5080 04b8 4429E1   		subl	%r12d, %ecx
 5081 04bb 48D3E7   		salq	%cl, %rdi
 5082              	.LVL636:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5083              		.loc 1 372 0
 5084 04be 490B7E18 		orq	24(%r14), %rdi
 5085              	.LVL637:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 5086              		.loc 1 374 0
 5087 04c2 4183FC07 		cmpl	$7, %r12d
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5088              		.loc 1 372 0
 5089 04c6 4889FD   		movq	%rdi, %rbp
 5090              	.LVL638:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 5091              		.loc 1 374 0
 5092 04c9 7F1C     		jg	.L503
 5093 04cb E99A0000 		jmp	.L498
 5093      00
 5094              	.LVL639:
 5095              		.p2align 4,,10
 5096              		.p2align 3
 5097              	.L499:
 5098              	.LBB459:
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 5099              		.loc 1 378 0
 5100 04d0 4181FFFF 		cmpl	$255, %r15d
 5100      000000
 5101 04d7 7448     		je	.L549
 5102              	.L501:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5103              		.loc 1 382 0
 5104 04d9 4183EC08 		subl	$8, %r12d
 5105              	.LVL640:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 5106              		.loc 1 381 0
 5107 04dd 48C1E508 		salq	$8, %rbp
 5108              	.LVL641:
 5109              	.LBE459:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 5110              		.loc 1 374 0
 5111 04e1 4183FC07 		cmpl	$7, %r12d
 5112 04e5 7E6F     		jle	.L550
 5113              	.LVL642:
 5114              	.L503:
 5115              	.LBB460:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5116              		.loc 1 377 0
 5117 04e7 498B86C8 		movq	200(%r14), %rax
 5117      000000
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5118              		.loc 1 375 0
 5119 04ee 4889EA   		movq	%rbp, %rdx
 5120 04f1 48C1FA10 		sarq	$16, %rdx
 5121 04f5 440FB6FA 		movzbl	%dl, %r15d
 5122              	.LVL643:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5123              		.loc 1 377 0
 5124 04f9 488D4801 		leaq	1(%rax), %rcx
 5125 04fd 49898EC8 		movq	%rcx, 200(%r14)
 5125      000000
 5126 0504 8810     		movb	%dl, (%rax)
 5127 0506 4983AED0 		subq	$1, 208(%r14)
 5127      00000001 
 5128 050e 75C0     		jne	.L499
 5129 0510 4C89F7   		movq	%r14, %rdi
 5130 0513 E8000000 		call	dump_buffer_e
 5130      00
 5131              	.LVL644:
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 5132              		.loc 1 378 0
 5133 0518 4181FFFF 		cmpl	$255, %r15d
 5133      000000
 5134 051f 75B8     		jne	.L501
 5135              	.L549:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5136              		.loc 1 379 0
 5137 0521 498B86C8 		movq	200(%r14), %rax
 5137      000000
 5138 0528 488D5001 		leaq	1(%rax), %rdx
 5139 052c 498996C8 		movq	%rdx, 200(%r14)
 5139      000000
 5140 0533 C60000   		movb	$0, (%rax)
 5141 0536 4983AED0 		subq	$1, 208(%r14)
 5141      00000001 
 5142 053e 7599     		jne	.L501
 5143 0540 4C89F7   		movq	%r14, %rdi
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5144              		.loc 1 382 0
 5145 0543 4183EC08 		subl	$8, %r12d
 5146              	.LVL645:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 5147              		.loc 1 381 0
 5148 0547 48C1E508 		salq	$8, %rbp
 5149              	.LVL646:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5150              		.loc 1 379 0
 5151 054b E8000000 		call	dump_buffer_e
 5151      00
 5152              	.LVL647:
 5153              	.LBE460:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 5154              		.loc 1 374 0
 5155 0550 4183FC07 		cmpl	$7, %r12d
 5156 0554 7F91     		jg	.L503
 5157              	.L550:
 5158 0556 8B442404 		movl	4(%rsp), %eax
 5159 055a 418BB6C0 		movl	192(%r14), %esi
 5159      000000
 5160 0561 83E807   		subl	$7, %eax
 5161 0564 83E007   		andl	$7, %eax
 5162 0567 4189C4   		movl	%eax, %r12d
 5163              	.LVL648:
 5164              	.L498:
 5165              	.LBE458:
 5166              	.LBE457:
 5167              	.LBE466:
 5168              	.LBE474:
 5169              	.LBB475:
 5170              	.LBB476:
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 5171              		.loc 1 448 0
 5172 056a 85F6     		testl	%esi, %esi
 5173              	.LBE476:
 5174              	.LBE475:
 5175              	.LBB478:
 5176              	.LBB467:
 5177              	.LBB462:
 5178              	.LBB461:
 385:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = put_bits;
 5179              		.loc 1 385 0
 5180 056c 49896E18 		movq	%rbp, 24(%r14)
 386:fltk-1.3.4-1/jpeg/jchuff.c **** }
 5181              		.loc 1 386 0
 5182 0570 45896620 		movl	%r12d, 32(%r14)
 5183              	.LVL649:
 5184              	.LBE461:
 5185              	.LBE462:
 5186              	.LBE467:
 5187              	.LBE478:
 5188              	.LBB479:
 5189              	.LBB477:
 448:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* no real work */
 5190              		.loc 1 448 0
 5191 0574 0F85F8FD 		jne	.L497
 5191      FFFF
 5192 057a 89DA     		movl	%ebx, %edx
 5193 057c 4C89EE   		movq	%r13, %rsi
 5194 057f 4C89F7   		movq	%r14, %rdi
 5195 0582 E8000000 		call	emit_buffered_bits.part.2
 5195      00
 5196              	.LVL650:
 5197 0587 E9E6FDFF 		jmp	.L497
 5197      FF
 5198              	.LVL651:
 5199              	.L533:
 5200              	.LBE477:
 5201              	.LBE479:
 882:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->EOBRUN++;		/* count an EOB */
 5202              		.loc 1 882 0
 5203 058c 85ED     		testl	%ebp, %ebp
 5204 058e 4D89F7   		movq	%r14, %r15
 5205 0591 7F05     		jg	.L505
 5206 0593 4585E4   		testl	%r12d, %r12d
 5207 0596 7438     		je	.L506
 5208              	.L505:
 883:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->BE += BR;		/* concat my correction bits to older ones */
 5209              		.loc 1 883 0
 5210 0598 418B87E4 		movl	228(%r15), %eax
 5210      000000
 5211              	.LVL652:
 884:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We force out the EOB if we risk either:
 5212              		.loc 1 884 0
 5213 059f 4503A7E8 		addl	232(%r15), %r12d
 5213      000000
 883:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->BE += BR;		/* concat my correction bits to older ones */
 5214              		.loc 1 883 0
 5215 05a6 8D5001   		leal	1(%rax), %edx
 884:fltk-1.3.4-1/jpeg/jchuff.c ****     /* We force out the EOB if we risk either:
 5216              		.loc 1 884 0
 5217 05a9 4589A7E8 		movl	%r12d, 232(%r15)
 5217      000000
 889:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_eobrun(entropy);
 5218              		.loc 1 889 0
 5219 05b0 81FAFF7F 		cmpl	$32767, %edx
 5219      0000
 883:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->BE += BR;		/* concat my correction bits to older ones */
 5220              		.loc 1 883 0
 5221 05b6 418997E4 		movl	%edx, 228(%r15)
 5221      000000
 889:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_eobrun(entropy);
 5222              		.loc 1 889 0
 5223 05bd 7409     		je	.L513
 5224 05bf 4181FCA9 		cmpl	$937, %r12d
 5224      030000
 5225 05c6 7608     		jbe	.L506
 5226              	.L513:
 890:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5227              		.loc 1 890 0
 5228 05c8 4C89FF   		movq	%r15, %rdi
 5229 05cb E8000000 		call	emit_eobrun
 5229      00
 5230              	.LVL653:
 5231              	.L506:
 893:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 5232              		.loc 1 893 0
 5233 05d0 488B4424 		movq	32(%rsp), %rax
 5233      20
 5234 05d5 498B8FC8 		movq	200(%r15), %rcx
 5234      000000
 5235 05dc 488B5028 		movq	40(%rax), %rdx
 5236 05e0 48890A   		movq	%rcx, (%rdx)
 894:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5237              		.loc 1 894 0
 5238 05e3 498B8FD0 		movq	208(%r15), %rcx
 5238      000000
 5239 05ea 488B5028 		movq	40(%rax), %rdx
 5240 05ee 48894A08 		movq	%rcx, 8(%rdx)
 897:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 5241              		.loc 1 897 0
 5242 05f2 8B883C01 		movl	316(%rax), %ecx
 5242      0000
 5243 05f8 85C9     		testl	%ecx, %ecx
 5244 05fa 740F     		je	.L508
 898:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 5245              		.loc 1 898 0
 5246 05fc 418B5738 		movl	56(%r15), %edx
 5247 0600 85D2     		testl	%edx, %edx
 5248 0602 746C     		je	.L551
 5249              	.L509:
 903:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5250              		.loc 1 903 0
 5251 0604 83EA01   		subl	$1, %edx
 5252 0607 41895738 		movl	%edx, 56(%r15)
 5253              	.L508:
 907:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5254              		.loc 1 907 0
 5255 060b 488B8C24 		movq	312(%rsp), %rcx
 5255      38010000 
 5256 0613 6448330C 		xorq	%fs:40, %rcx
 5256      25280000 
 5256      00
 5257 061c B8010000 		movl	$1, %eax
 5257      00
 5258 0621 7570     		jne	.L552
 5259 0623 4881C448 		addq	$328, %rsp
 5259      010000
 5260              		.cfi_remember_state
 5261              		.cfi_def_cfa_offset 56
 5262              	.LVL654:
 5263 062a 5B       		popq	%rbx
 5264              		.cfi_def_cfa_offset 48
 5265 062b 5D       		popq	%rbp
 5266              		.cfi_def_cfa_offset 40
 5267 062c 415C     		popq	%r12
 5268              		.cfi_def_cfa_offset 32
 5269 062e 415D     		popq	%r13
 5270              		.cfi_def_cfa_offset 24
 5271 0630 415E     		popq	%r14
 5272              		.cfi_def_cfa_offset 16
 5273 0632 415F     		popq	%r15
 5274              		.cfi_def_cfa_offset 8
 5275              	.LVL655:
 5276 0634 C3       		ret
 5277              	.LVL656:
 5278              	.L486:
 5279              		.cfi_restore_state
 5280              	.LBB480:
 5281              	.LBB453:
 5282              	.LBB448:
 5283              	.LBB445:
 5284              	.LBB442:
 5285              	.LBB439:
 358:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5286              		.loc 1 358 0
 5287 0635 498B8ED8 		movq	216(%r14), %rcx
 5287      000000
 5288              	.LVL657:
 5289 063c 488B09   		movq	(%rcx), %rcx
 5290 063f C7412829 		movl	$41, 40(%rcx)
 5290      000000
 5291              	.LVL658:
 5292 0646 498BBED8 		movq	216(%r14), %rdi
 5292      000000
 5293              	.LVL659:
 5294 064d 488B0F   		movq	(%rdi), %rcx
 5295 0650 FF11     		call	*(%rcx)
 5296              	.LVL660:
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 5297              		.loc 1 360 0
 5298 0652 418B86C0 		movl	192(%r14), %eax
 5298      000000
 5299 0659 85C0     		testl	%eax, %eax
 5300 065b 0F8511FD 		jne	.L497
 5300      FFFF
 5301 0661 E942FDFF 		jmp	.L490
 5301      FF
 5302              	.LVL661:
 5303 0666 662E0F1F 		.p2align 4,,10
 5303      84000000 
 5303      0000
 5304              		.p2align 3
 5305              	.L551:
 5306              	.LBE439:
 5307              	.LBE442:
 5308              	.LBE445:
 5309              	.LBE448:
 5310              	.LBE453:
 5311              	.LBE480:
 901:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5312              		.loc 1 901 0
 5313 0670 418B473C 		movl	60(%r15), %eax
 5314 0674 8D5001   		leal	1(%rax), %edx
 5315 0677 83E207   		andl	$7, %edx
 5316 067a 4189573C 		movl	%edx, 60(%r15)
 5317 067e 89CA     		movl	%ecx, %edx
 5318 0680 EB82     		jmp	.L509
 5319              	.LVL662:
 5320              	.L540:
 802:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5321              		.loc 1 802 0
 5322 0682 418B773C 		movl	60(%r15), %esi
 5323 0686 4C89FF   		movq	%r15, %rdi
 5324              	.LVL663:
 5325 0689 E8000000 		call	emit_restart_e
 5325      00
 5326              	.LVL664:
 5327 068e E9D6F9FF 		jmp	.L459
 5327      FF
 5328              	.LVL665:
 5329              	.L552:
 907:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5330              		.loc 1 907 0
 5331 0693 E8000000 		call	__stack_chk_fail
 5331      00
 5332              	.LVL666:
 5333              		.cfi_endproc
 5334              	.LFE77:
 5336              		.section	.text.unlikely.encode_mcu_AC_refine
 5337              	.LCOLDE11:
 5338              		.section	.text.encode_mcu_AC_refine
 5339              	.LHOTE11:
 5340              		.section	.text.unlikely.finish_pass_gather,"ax",@progbits
 5341              	.LCOLDB12:
 5342              		.section	.text.finish_pass_gather,"ax",@progbits
 5343              	.LHOTB12:
 5344              		.p2align 4,,15
 5346              	finish_pass_gather:
 5347              	.LFB84:
1395:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 5348              		.loc 1 1395 0
 5349              		.cfi_startproc
 5350              	.LVL667:
 5351 0000 4157     		pushq	%r15
 5352              		.cfi_def_cfa_offset 16
 5353              		.cfi_offset 15, -16
 5354 0002 4156     		pushq	%r14
 5355              		.cfi_def_cfa_offset 24
 5356              		.cfi_offset 14, -24
 5357 0004 4155     		pushq	%r13
 5358              		.cfi_def_cfa_offset 32
 5359              		.cfi_offset 13, -32
 5360 0006 4154     		pushq	%r12
 5361              		.cfi_def_cfa_offset 40
 5362              		.cfi_offset 12, -40
 5363 0008 55       		pushq	%rbp
 5364              		.cfi_def_cfa_offset 48
 5365              		.cfi_offset 6, -48
 5366 0009 53       		pushq	%rbx
 5367              		.cfi_def_cfa_offset 56
 5368              		.cfi_offset 3, -56
 5369 000a 4889FB   		movq	%rdi, %rbx
 5370 000d 4883EC48 		subq	$72, %rsp
 5371              		.cfi_def_cfa_offset 128
1406:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Flush out buffered data (all we care about is counting the EOB symbol) */
 5372              		.loc 1 1406 0
 5373 0011 448B8F5C 		movl	348(%rdi), %r9d
 5373      010000
1396:fltk-1.3.4-1/jpeg/jchuff.c ****   int ci, tbl;
 5374              		.loc 1 1396 0
 5375 0018 4C8BBF30 		movq	560(%rdi), %r15
 5375      020000
 5376              	.LVL668:
1395:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 5377              		.loc 1 1395 0
 5378 001f 64488B04 		movq	%fs:40, %rax
 5378      25280000 
 5378      00
 5379 0028 48894424 		movq	%rax, 56(%rsp)
 5379      38
 5380 002d 31C0     		xorl	%eax, %eax
1406:fltk-1.3.4-1/jpeg/jchuff.c ****     /* Flush out buffered data (all we care about is counting the EOB symbol) */
 5381              		.loc 1 1406 0
 5382 002f 4585C9   		testl	%r9d, %r9d
 5383 0032 0F851001 		jne	.L566
 5383      0000
 5384              	.LVL669:
 5385              	.L554:
1413:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
 5386              		.loc 1 1413 0
 5387 0038 448B8374 		movl	372(%rbx), %r8d
 5387      010000
 5388 003f 31ED     		xorl	%ebp, %ebp
 5389              	.LBB481:
 5390              	.LBB482:
 5391              		.loc 2 90 0
 5392 0041 48C74424 		movq	$0, 16(%rsp)
 5392      10000000 
 5392      00
 5393 004a 48C74424 		movq	$0, 24(%rsp)
 5393      18000000 
 5393      00
 5394              	.LVL670:
 5395              	.LBE482:
 5396              	.LBE481:
 5397              	.LBB483:
 5398              	.LBB484:
 5399 0053 48C74424 		movq	$0, 32(%rsp)
 5399      20000000 
 5399      00
 5400 005c 4C8DA378 		leaq	376(%rbx), %r12
 5400      010000
 5401 0063 48C74424 		movq	$0, 40(%rsp)
 5401      28000000 
 5401      00
 5402              	.LVL671:
 5403              	.LBE484:
 5404              	.LBE483:
1413:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
 5405              		.loc 1 1413 0
 5406 006c 4585C0   		testl	%r8d, %r8d
 5407 006f 0F8EAE00 		jle	.L553
 5407      0000
 5408              	.LVL672:
 5409              	.L563:
1416:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->dc_tbl_no;
 5410              		.loc 1 1416 0
 5411 0075 8BBBCC01 		movl	460(%rbx), %edi
 5411      0000
1414:fltk-1.3.4-1/jpeg/jchuff.c ****     /* DC needs no table for refinement scan */
 5412              		.loc 1 1414 0
 5413 007b 4D8B2C24 		movq	(%r12), %r13
 5414              	.LVL673:
1416:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->dc_tbl_no;
 5415              		.loc 1 1416 0
 5416 007f 85FF     		testl	%edi, %edi
 5417 0081 754D     		jne	.L556
1416:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->dc_tbl_no;
 5418              		.loc 1 1416 0 is_stmt 0 discriminator 1
 5419 0083 8BB3D401 		movl	468(%rbx), %esi
 5419      0000
 5420 0089 85F6     		testl	%esi, %esi
 5421 008b 7543     		jne	.L556
 5422              	.LVL674:
1418:fltk-1.3.4-1/jpeg/jchuff.c **** 	htblptr = & cinfo->dc_huff_tbl_ptrs[tbl];
 5423              		.loc 1 1418 0 is_stmt 1
 5424 008d 4D637514 		movslq	20(%r13), %r14
 5425 0091 428B4CB4 		movl	16(%rsp,%r14,4), %ecx
 5425      10
 5426 0096 85C9     		testl	%ecx, %ecx
 5427 0098 7536     		jne	.L556
 5428              	.LVL675:
 5429 009a 4A8D14F3 		leaq	(%rbx,%r14,8), %rdx
1420:fltk-1.3.4-1/jpeg/jchuff.c **** 	  *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 5430              		.loc 1 1420 0
 5431 009e 488BB2A0 		movq	160(%rdx), %rsi
 5431      000000
 5432 00a5 4885F6   		testq	%rsi, %rsi
 5433 00a8 0F84BE00 		je	.L567
 5433      0000
 5434              	.LVL676:
 5435              	.L557:
1422:fltk-1.3.4-1/jpeg/jchuff.c **** 	did_dc[tbl] = TRUE;
 5436              		.loc 1 1422 0
 5437 00ae 4B8B94F7 		movq	128(%r15,%r14,8), %rdx
 5437      80000000 
 5438 00b6 4889DF   		movq	%rbx, %rdi
 5439 00b9 E8000000 		call	jpeg_gen_optimal_table
 5439      00
 5440              	.LVL677:
1423:fltk-1.3.4-1/jpeg/jchuff.c ****       }
 5441              		.loc 1 1423 0
 5442 00be 42C744B4 		movl	$1, 16(%rsp,%r14,4)
 5442      10010000 
 5442      00
 5443              	.LVL678:
 5444 00c7 660F1F84 		.p2align 4,,10
 5444      00000000 
 5444      00
 5445              		.p2align 3
 5446              	.L556:
1427:fltk-1.3.4-1/jpeg/jchuff.c ****       tbl = compptr->ac_tbl_no;
 5447              		.loc 1 1427 0
 5448 00d0 8B93D001 		movl	464(%rbx), %edx
 5448      0000
 5449 00d6 85D2     		testl	%edx, %edx
 5450 00d8 7436     		je	.L558
 5451              	.LVL679:
1429:fltk-1.3.4-1/jpeg/jchuff.c **** 	htblptr = & cinfo->ac_huff_tbl_ptrs[tbl];
 5452              		.loc 1 1429 0
 5453 00da 4D636D18 		movslq	24(%r13), %r13
 5454              	.LVL680:
 5455 00de 428B44AC 		movl	32(%rsp,%r13,4), %eax
 5455      20
 5456 00e3 85C0     		testl	%eax, %eax
 5457 00e5 7529     		jne	.L558
 5458              	.LVL681:
 5459 00e7 4E8D34EB 		leaq	(%rbx,%r13,8), %r14
1431:fltk-1.3.4-1/jpeg/jchuff.c **** 	  *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 5460              		.loc 1 1431 0
 5461 00eb 498BB6C0 		movq	192(%r14), %rsi
 5461      000000
 5462 00f2 4885F6   		testq	%rsi, %rsi
 5463 00f5 7461     		je	.L568
 5464              	.L559:
1433:fltk-1.3.4-1/jpeg/jchuff.c **** 	did_ac[tbl] = TRUE;
 5465              		.loc 1 1433 0
 5466 00f7 4B8B94EF 		movq	160(%r15,%r13,8), %rdx
 5466      A0000000 
 5467 00ff 4889DF   		movq	%rbx, %rdi
 5468 0102 E8000000 		call	jpeg_gen_optimal_table
 5468      00
 5469              	.LVL682:
1434:fltk-1.3.4-1/jpeg/jchuff.c ****       }
 5470              		.loc 1 1434 0
 5471 0107 42C744AC 		movl	$1, 32(%rsp,%r13,4)
 5471      20010000 
 5471      00
 5472              	.LVL683:
 5473              	.L558:
1413:fltk-1.3.4-1/jpeg/jchuff.c ****     compptr = cinfo->cur_comp_info[ci];
 5474              		.loc 1 1413 0 discriminator 2
 5475 0110 83C501   		addl	$1, %ebp
 5476              	.LVL684:
 5477 0113 4983C408 		addq	$8, %r12
 5478 0117 39AB7401 		cmpl	%ebp, 372(%rbx)
 5478      0000
 5479 011d 0F8F52FF 		jg	.L563
 5479      FFFF
 5480              	.LVL685:
 5481              	.L553:
1438:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5482              		.loc 1 1438 0
 5483 0123 488B4424 		movq	56(%rsp), %rax
 5483      38
 5484 0128 64483304 		xorq	%fs:40, %rax
 5484      25280000 
 5484      00
 5485 0131 755A     		jne	.L569
 5486 0133 4883C448 		addq	$72, %rsp
 5487              		.cfi_remember_state
 5488              		.cfi_def_cfa_offset 56
 5489 0137 5B       		popq	%rbx
 5490              		.cfi_def_cfa_offset 48
 5491              	.LVL686:
 5492 0138 5D       		popq	%rbp
 5493              		.cfi_def_cfa_offset 40
 5494 0139 415C     		popq	%r12
 5495              		.cfi_def_cfa_offset 32
 5496 013b 415D     		popq	%r13
 5497              		.cfi_def_cfa_offset 24
 5498 013d 415E     		popq	%r14
 5499              		.cfi_def_cfa_offset 16
 5500 013f 415F     		popq	%r15
 5501              		.cfi_def_cfa_offset 8
 5502              	.LVL687:
 5503 0141 C3       		ret
 5504              	.LVL688:
 5505              		.p2align 4,,10
 5506 0142 660F1F44 		.p2align 3
 5506      0000
 5507              	.L566:
 5508              		.cfi_restore_state
1408:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5509              		.loc 1 1408 0
 5510 0148 4C89FF   		movq	%r15, %rdi
 5511 014b E8000000 		call	emit_eobrun
 5511      00
 5512              	.LVL689:
 5513 0150 E9E3FEFF 		jmp	.L554
 5513      FF
 5514              	.LVL690:
 5515              		.p2align 4,,10
 5516 0155 0F1F00   		.p2align 3
 5517              	.L568:
1432:fltk-1.3.4-1/jpeg/jchuff.c **** 	jpeg_gen_optimal_table(cinfo, *htblptr, entropy->ac_count_ptrs[tbl]);
 5518              		.loc 1 1432 0
 5519 0158 4889DF   		movq	%rbx, %rdi
 5520 015b E8000000 		call	jpeg_alloc_huff_table
 5520      00
 5521              	.LVL691:
 5522 0160 4889C6   		movq	%rax, %rsi
 5523 0163 498986C0 		movq	%rax, 192(%r14)
 5523      000000
 5524 016a EB8B     		jmp	.L559
 5525              	.LVL692:
 5526              	.L567:
1421:fltk-1.3.4-1/jpeg/jchuff.c **** 	jpeg_gen_optimal_table(cinfo, *htblptr, entropy->dc_count_ptrs[tbl]);
 5527              		.loc 1 1421 0
 5528 016c 4889DF   		movq	%rbx, %rdi
 5529 016f 48895424 		movq	%rdx, 8(%rsp)
 5529      08
 5530 0174 E8000000 		call	jpeg_alloc_huff_table
 5530      00
 5531              	.LVL693:
 5532 0179 488B5424 		movq	8(%rsp), %rdx
 5532      08
 5533 017e 4889C6   		movq	%rax, %rsi
 5534 0181 488982A0 		movq	%rax, 160(%rdx)
 5534      000000
 5535 0188 E921FFFF 		jmp	.L557
 5535      FF
 5536              	.LVL694:
 5537              	.L569:
1438:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5538              		.loc 1 1438 0
 5539 018d E8000000 		call	__stack_chk_fail
 5539      00
 5540              	.LVL695:
 5541              		.cfi_endproc
 5542              	.LFE84:
 5544              		.section	.text.unlikely.finish_pass_gather
 5545              	.LCOLDE12:
 5546              		.section	.text.finish_pass_gather
 5547              	.LHOTE12:
 5548              		.section	.text.unlikely.finish_pass_huff,"ax",@progbits
 5549              	.LCOLDB13:
 5550              		.section	.text.finish_pass_huff,"ax",@progbits
 5551              	.LHOTB13:
 5552              		.p2align 4,,15
 5554              	finish_pass_huff:
 5555              	.LFB80:
1071:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 5556              		.loc 1 1071 0
 5557              		.cfi_startproc
 5558              	.LVL696:
 5559 0000 4157     		pushq	%r15
 5560              		.cfi_def_cfa_offset 16
 5561              		.cfi_offset 15, -16
 5562 0002 4156     		pushq	%r14
 5563              		.cfi_def_cfa_offset 24
 5564              		.cfi_offset 14, -24
 5565 0004 4155     		pushq	%r13
 5566              		.cfi_def_cfa_offset 32
 5567              		.cfi_offset 13, -32
 5568 0006 4154     		pushq	%r12
 5569              		.cfi_def_cfa_offset 40
 5570              		.cfi_offset 12, -40
 5571 0008 4989FC   		movq	%rdi, %r12
 5572 000b 55       		pushq	%rbp
 5573              		.cfi_def_cfa_offset 48
 5574              		.cfi_offset 6, -48
 5575 000c 53       		pushq	%rbx
 5576              		.cfi_def_cfa_offset 56
 5577              		.cfi_offset 3, -56
 5578 000d 4883EC68 		subq	$104, %rsp
 5579              		.cfi_def_cfa_offset 160
1075:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->next_output_byte = cinfo->dest->next_output_byte;
 5580              		.loc 1 1075 0
 5581 0011 8B975C01 		movl	348(%rdi), %edx
 5581      0000
1072:fltk-1.3.4-1/jpeg/jchuff.c ****   working_state state;
 5582              		.loc 1 1072 0
 5583 0017 4C8BAF30 		movq	560(%rdi), %r13
 5583      020000
 5584              	.LVL697:
1071:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 5585              		.loc 1 1071 0
 5586 001e 64488B04 		movq	%fs:40, %rax
 5586      25280000 
 5586      00
 5587 0027 48894424 		movq	%rax, 88(%rsp)
 5587      58
 5588 002c 31C0     		xorl	%eax, %eax
1075:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->next_output_byte = cinfo->dest->next_output_byte;
 5589              		.loc 1 1075 0
 5590 002e 85D2     		testl	%edx, %edx
 5591 0030 0F848A00 		je	.L571
 5591      0000
1076:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->free_in_buffer = cinfo->dest->free_in_buffer;
 5592              		.loc 1 1076 0
 5593 0036 488B4728 		movq	40(%rdi), %rax
 5594 003a 488B00   		movq	(%rax), %rax
 5595 003d 498985C8 		movq	%rax, 200(%r13)
 5595      000000
1077:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5596              		.loc 1 1077 0
 5597 0044 488B4728 		movq	40(%rdi), %rax
1080:fltk-1.3.4-1/jpeg/jchuff.c ****     flush_bits_e(entropy);
 5598              		.loc 1 1080 0
 5599 0048 4C89EF   		movq	%r13, %rdi
 5600              	.LVL698:
1077:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5601              		.loc 1 1077 0
 5602 004b 488B4008 		movq	8(%rax), %rax
 5603 004f 498985D0 		movq	%rax, 208(%r13)
 5603      000000
1080:fltk-1.3.4-1/jpeg/jchuff.c ****     flush_bits_e(entropy);
 5604              		.loc 1 1080 0
 5605 0056 E8000000 		call	emit_eobrun
 5605      00
 5606              	.LVL699:
 5607              	.LBB501:
 5608              	.LBB502:
 5609              	.LBB503:
 5610              	.LBB504:
 360:fltk-1.3.4-1/jpeg/jchuff.c ****     return;			/* do nothing if we're only getting stats */
 5611              		.loc 1 360 0
 5612 005b 418B85C0 		movl	192(%r13), %eax
 5612      000000
 5613 0062 85C0     		testl	%eax, %eax
 5614 0064 0F84B601 		je	.L601
 5614      0000
 5615              	.L572:
 5616              	.LVL700:
 5617              	.LBE504:
 5618              	.LBE503:
 405:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->saved.put_bits = 0;
 5619              		.loc 1 405 0
 5620 006a 49C74518 		movq	$0, 24(%r13)
 5620      00000000 
 406:fltk-1.3.4-1/jpeg/jchuff.c **** }
 5621              		.loc 1 406 0
 5622 0072 41C74520 		movl	$0, 32(%r13)
 5622      00000000 
 5623              	.LVL701:
 5624              	.LBE502:
 5625              	.LBE501:
1083:fltk-1.3.4-1/jpeg/jchuff.c ****     cinfo->dest->free_in_buffer = entropy->free_in_buffer;
 5626              		.loc 1 1083 0
 5627 007a 498B95C8 		movq	200(%r13), %rdx
 5627      000000
 5628 0081 498B4424 		movq	40(%r12), %rax
 5628      28
 5629 0086 488910   		movq	%rdx, (%rax)
1084:fltk-1.3.4-1/jpeg/jchuff.c ****   } else {
 5630              		.loc 1 1084 0
 5631 0089 498B4424 		movq	40(%r12), %rax
 5631      28
 5632 008e 498B95D0 		movq	208(%r13), %rdx
 5632      000000
 5633 0095 48895008 		movq	%rdx, 8(%rax)
 5634              	.L570:
1101:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5635              		.loc 1 1101 0
 5636 0099 488B4424 		movq	88(%rsp), %rax
 5636      58
 5637 009e 64483304 		xorq	%fs:40, %rax
 5637      25280000 
 5637      00
 5638 00a7 0F853E02 		jne	.L602
 5638      0000
 5639 00ad 4883C468 		addq	$104, %rsp
 5640              		.cfi_remember_state
 5641              		.cfi_def_cfa_offset 56
 5642 00b1 5B       		popq	%rbx
 5643              		.cfi_def_cfa_offset 48
 5644 00b2 5D       		popq	%rbp
 5645              		.cfi_def_cfa_offset 40
 5646 00b3 415C     		popq	%r12
 5647              		.cfi_def_cfa_offset 32
 5648              	.LVL702:
 5649 00b5 415D     		popq	%r13
 5650              		.cfi_def_cfa_offset 24
 5651              	.LVL703:
 5652 00b7 415E     		popq	%r14
 5653              		.cfi_def_cfa_offset 16
 5654 00b9 415F     		popq	%r15
 5655              		.cfi_def_cfa_offset 8
 5656 00bb C3       		ret
 5657              	.LVL704:
 5658 00bc 0F1F4000 		.p2align 4,,10
 5659              		.p2align 3
 5660              	.L571:
 5661              		.cfi_restore_state
1089:fltk-1.3.4-1/jpeg/jchuff.c ****     state.cinfo = cinfo;
 5662              		.loc 1 1089 0
 5663 00c0 498B7520 		movq	32(%r13), %rsi
 5664 00c4 498B4D18 		movq	24(%r13), %rcx
 5665              	.LBB512:
 5666              	.LBB513:
 5667              	.LBB514:
 5668              	.LBB515:
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5669              		.loc 1 327 0
 5670 00c8 BB7F0000 		movl	$127, %ebx
 5670      00
 5671              	.LBE515:
 5672              	.LBE514:
 5673              	.LBE513:
 5674              	.LBE512:
1087:fltk-1.3.4-1/jpeg/jchuff.c ****     state.free_in_buffer = cinfo->dest->free_in_buffer;
 5675              		.loc 1 1087 0
 5676 00cd 488B7F28 		movq	40(%rdi), %rdi
 5677              	.LVL705:
1089:fltk-1.3.4-1/jpeg/jchuff.c ****     state.cinfo = cinfo;
 5678              		.loc 1 1089 0
 5679 00d1 48897424 		movq	%rsi, 56(%rsp)
 5679      38
 5680 00d6 498B7528 		movq	40(%r13), %rsi
 5681 00da 4989C8   		movq	%rcx, %r8
 5682 00dd 48894C24 		movq	%rcx, 48(%rsp)
 5682      30
 5683 00e2 48894C24 		movq	%rcx, 24(%rsp)
 5683      18
 5684              	.LBB541:
 5685              	.LBB537:
 5686              	.LBB533:
 5687              	.LBB529:
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5688              		.loc 1 327 0
 5689 00e7 B9180000 		movl	$24, %ecx
 5689      00
 5690              	.LBE529:
 5691              	.LBE533:
 5692              	.LBE537:
 5693              	.LBE541:
1087:fltk-1.3.4-1/jpeg/jchuff.c ****     state.free_in_buffer = cinfo->dest->free_in_buffer;
 5694              		.loc 1 1087 0
 5695 00ec 488B17   		movq	(%rdi), %rdx
 5696              	.LVL706:
1088:fltk-1.3.4-1/jpeg/jchuff.c ****     ASSIGN_STATE(state.cur, entropy->saved);
 5697              		.loc 1 1088 0
 5698 00ef 488B4708 		movq	8(%rdi), %rax
 5699              	.LVL707:
1089:fltk-1.3.4-1/jpeg/jchuff.c ****     state.cinfo = cinfo;
 5700              		.loc 1 1089 0
 5701 00f3 48897424 		movq	%rsi, 64(%rsp)
 5701      40
 5702 00f8 498B7530 		movq	48(%r13), %rsi
 5703 00fc 48897424 		movq	%rsi, 72(%rsp)
 5703      48
 5704 0101 418B7520 		movl	32(%r13), %esi
 5705              	.LBB542:
 5706              	.LBB538:
 5707              	.LBB534:
 5708              	.LBB530:
 322:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5709              		.loc 1 322 0
 5710 0105 8D6E07   		leal	7(%rsi), %ebp
 5711              	.LBE530:
 5712              	.LBE534:
 5713              	.LBE538:
 5714              	.LBE542:
1089:fltk-1.3.4-1/jpeg/jchuff.c ****     state.cinfo = cinfo;
 5715              		.loc 1 1089 0
 5716 0108 89742414 		movl	%esi, 20(%rsp)
 5717              	.LVL708:
 5718              	.LBB543:
 5719              	.LBB539:
 5720              	.LBB535:
 5721              	.LBB531:
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5722              		.loc 1 327 0
 5723 010c 29E9     		subl	%ebp, %ecx
 5724 010e 48D3E3   		salq	%cl, %rbx
 5725 0111 4C09C3   		orq	%r8, %rbx
 5726              	.LVL709:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 5727              		.loc 1 329 0
 5728 0114 83FD07   		cmpl	$7, %ebp
 5729 0117 0F8F9400 		jg	.L585
 5729      0000
 5730              	.LVL710:
 5731 011d 0F1F00   		.p2align 4,,10
 5732              		.p2align 3
 5733              	.L581:
 5734              	.LBE531:
 5735              	.LBE535:
 396:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 5736              		.loc 1 396 0
 5737 0120 C7442414 		movl	$0, 20(%rsp)
 5737      00000000 
 395:fltk-1.3.4-1/jpeg/jchuff.c ****   state->cur.put_bits = 0;
 5738              		.loc 1 395 0
 5739 0128 48C74424 		movq	$0, 24(%rsp)
 5739      18000000 
 5739      00
 5740              	.LVL711:
 5741              	.L586:
 5742              	.LBE539:
 5743              	.LBE543:
1097:fltk-1.3.4-1/jpeg/jchuff.c ****     cinfo->dest->free_in_buffer = state.free_in_buffer;
 5744              		.loc 1 1097 0
 5745 0131 488917   		movq	%rdx, (%rdi)
1098:fltk-1.3.4-1/jpeg/jchuff.c ****     ASSIGN_STATE(entropy->saved, state.cur);
 5746              		.loc 1 1098 0
 5747 0134 498B5424 		movq	40(%r12), %rdx
 5747      28
 5748              	.LVL712:
1099:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5749              		.loc 1 1099 0
 5750 0139 8B742414 		movl	20(%rsp), %esi
1098:fltk-1.3.4-1/jpeg/jchuff.c ****     ASSIGN_STATE(entropy->saved, state.cur);
 5751              		.loc 1 1098 0
 5752 013d 48894208 		movq	%rax, 8(%rdx)
 5753              	.LVL713:
1099:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5754              		.loc 1 1099 0
 5755 0141 488B4424 		movq	24(%rsp), %rax
 5755      18
 5756              	.LVL714:
 5757 0146 89742438 		movl	%esi, 56(%rsp)
 5758 014a 48894424 		movq	%rax, 48(%rsp)
 5758      30
 5759 014f 49894518 		movq	%rax, 24(%r13)
 5760              	.LVL715:
 5761 0153 488B4424 		movq	56(%rsp), %rax
 5761      38
 5762 0158 49894520 		movq	%rax, 32(%r13)
 5763 015c 488B4424 		movq	64(%rsp), %rax
 5763      40
 5764 0161 49894528 		movq	%rax, 40(%r13)
 5765 0165 488B4424 		movq	72(%rsp), %rax
 5765      48
 5766 016a 49894530 		movq	%rax, 48(%r13)
1101:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5767              		.loc 1 1101 0
 5768 016e E926FFFF 		jmp	.L570
 5768      FF
 5769              	.LVL716:
 5770              		.p2align 4,,10
 5771 0173 0F1F4400 		.p2align 3
 5771      00
 5772              	.L605:
 5773              	.LBB544:
 5774              	.LBB540:
 5775              	.LBB536:
 5776              	.LBB532:
 5777              	.LBB516:
 5778              	.LBB517:
 5779              	.LBB518:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5780              		.loc 1 272 0
 5781 0178 498B4C24 		movq	40(%r12), %rcx
 5781      28
 5782              	.LVL717:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 5783              		.loc 1 274 0
 5784 017d 4C89E7   		movq	%r12, %rdi
 5785 0180 48894C24 		movq	%rcx, 8(%rsp)
 5785      08
 5786 0185 FF5118   		call	*24(%rcx)
 5787              	.LVL718:
 5788 0188 85C0     		testl	%eax, %eax
 5789 018a 0F843801 		je	.L583
 5789      0000
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 5790              		.loc 1 277 0
 5791 0190 488B4C24 		movq	8(%rsp), %rcx
 5791      08
 5792              	.LBE518:
 5793              	.LBE517:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 5794              		.loc 1 333 0
 5795 0195 4181FFFF 		cmpl	$255, %r15d
 5795      000000
 5796              	.LBB520:
 5797              	.LBB519:
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 5798              		.loc 1 277 0
 5799 019c 488B11   		movq	(%rcx), %rdx
 5800              	.LVL719:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 5801              		.loc 1 278 0
 5802 019f 488B4108 		movq	8(%rcx), %rax
 5803              	.LVL720:
 5804              	.LBE519:
 5805              	.LBE520:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 5806              		.loc 1 333 0
 5807 01a3 742F     		je	.L603
 5808              	.L584:
 5809 01a5 83ED08   		subl	$8, %ebp
 5810              	.LVL721:
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 5811              		.loc 1 336 0
 5812 01a8 48C1E308 		salq	$8, %rbx
 5813              	.LVL722:
 5814              	.LBE516:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 5815              		.loc 1 329 0
 5816 01ac 83FD07   		cmpl	$7, %ebp
 5817 01af 765F     		jbe	.L604
 5818              	.LVL723:
 5819              	.L585:
 5820              	.LBB527:
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5821              		.loc 1 330 0
 5822 01b1 4889D9   		movq	%rbx, %rcx
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5823              		.loc 1 332 0
 5824 01b4 4C8D7201 		leaq	1(%rdx), %r14
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5825              		.loc 1 330 0
 5826 01b8 48C1F910 		sarq	$16, %rcx
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5827              		.loc 1 332 0
 5828 01bc 4883E801 		subq	$1, %rax
 5829              	.LVL724:
 5830 01c0 880A     		movb	%cl, (%rdx)
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5831              		.loc 1 330 0
 5832 01c2 440FB6F9 		movzbl	%cl, %r15d
 5833              	.LVL725:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5834              		.loc 1 332 0
 5835 01c6 4C89F2   		movq	%r14, %rdx
 5836 01c9 74AD     		je	.L605
 5837              	.LVL726:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 5838              		.loc 1 333 0
 5839 01cb 4181FFFF 		cmpl	$255, %r15d
 5839      000000
 5840 01d2 75D1     		jne	.L584
 5841              	.LVL727:
 5842              	.L603:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5843              		.loc 1 334 0
 5844 01d4 4C8D7201 		leaq	1(%rdx), %r14
 5845              	.LVL728:
 5846 01d8 4883E801 		subq	$1, %rax
 5847              	.LVL729:
 5848 01dc C60200   		movb	$0, (%rdx)
 5849 01df 4C89F2   		movq	%r14, %rdx
 5850 01e2 75C1     		jne	.L584
 5851              	.LVL730:
 5852              	.LBB521:
 5853              	.LBB522:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5854              		.loc 1 272 0
 5855 01e4 4D8B7C24 		movq	40(%r12), %r15
 5855      28
 5856              	.LVL731:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 5857              		.loc 1 274 0
 5858 01e9 4C89E7   		movq	%r12, %rdi
 5859 01ec 41FF5718 		call	*24(%r15)
 5860              	.LVL732:
 5861 01f0 85C0     		testl	%eax, %eax
 5862 01f2 0F84D000 		je	.L583
 5862      0000
 5863 01f8 83ED08   		subl	$8, %ebp
 5864              	.LVL733:
 5865              	.LBE522:
 5866              	.LBE521:
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 5867              		.loc 1 336 0
 5868 01fb 48C1E308 		salq	$8, %rbx
 5869              	.LVL734:
 5870              	.LBB525:
 5871              	.LBB523:
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 5872              		.loc 1 277 0
 5873 01ff 498B17   		movq	(%r15), %rdx
 5874              	.LVL735:
 5875              	.LBE523:
 5876              	.LBE525:
 5877              	.LBE527:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 5878              		.loc 1 329 0
 5879 0202 83FD07   		cmpl	$7, %ebp
 5880              	.LBB528:
 5881              	.LBB526:
 5882              	.LBB524:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 5883              		.loc 1 278 0
 5884 0205 498B4708 		movq	8(%r15), %rax
 5885              	.LVL736:
 5886              	.LBE524:
 5887              	.LBE526:
 5888              	.LBE528:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 5889              		.loc 1 329 0
 5890 0209 77A6     		ja	.L585
 5891 020b 0F1F4400 		.p2align 4,,10
 5891      00
 5892              		.p2align 3
 5893              	.L604:
 5894 0210 498B7C24 		movq	40(%r12), %rdi
 5894      28
 5895 0215 E906FFFF 		jmp	.L581
 5895      FF
 5896              	.LVL737:
 5897 021a 660F1F44 		.p2align 4,,10
 5897      0000
 5898              		.p2align 3
 5899              	.L601:
 5900              	.LBE532:
 5901              	.LBE536:
 5902              	.LBE540:
 5903              	.LBE544:
 5904              	.LBB545:
 5905              	.LBB511:
 5906              	.LBB510:
 5907              	.LBB509:
 5908              	.LBB505:
 5909              	.LBB506:
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5910              		.loc 1 367 0
 5911 0220 418B4520 		movl	32(%r13), %eax
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5912              		.loc 1 369 0
 5913 0224 B9180000 		movl	$24, %ecx
 5913      00
 5914 0229 BD7F0000 		movl	$127, %ebp
 5914      00
 367:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5915              		.loc 1 367 0
 5916 022e 8D5807   		leal	7(%rax), %ebx
 5917              	.LVL738:
 369:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5918              		.loc 1 369 0
 5919 0231 29D9     		subl	%ebx, %ecx
 5920 0233 48D3E5   		salq	%cl, %rbp
 5921              	.LVL739:
 372:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5922              		.loc 1 372 0
 5923 0236 490B6D18 		orq	24(%r13), %rbp
 5924              	.LVL740:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 5925              		.loc 1 374 0
 5926 023a 83FB07   		cmpl	$7, %ebx
 5927 023d 7F22     		jg	.L594
 5928 023f E926FEFF 		jmp	.L572
 5928      FF
 5929              	.LVL741:
 5930              		.p2align 4,,10
 5931 0244 0F1F4000 		.p2align 3
 5932              	.L574:
 5933              	.LBB507:
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 5934              		.loc 1 378 0
 5935 0248 4181FEFF 		cmpl	$255, %r14d
 5935      000000
 5936 024f 744A     		je	.L606
 5937              	.L576:
 382:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 5938              		.loc 1 382 0
 5939 0251 83EB08   		subl	$8, %ebx
 5940              	.LVL742:
 381:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 5941              		.loc 1 381 0
 5942 0254 48C1E508 		salq	$8, %rbp
 5943              	.LVL743:
 5944              	.LBE507:
 374:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 5945              		.loc 1 374 0
 5946 0258 83FB07   		cmpl	$7, %ebx
 5947 025b 0F8E09FE 		jle	.L572
 5947      FFFF
 5948              	.LVL744:
 5949              	.L594:
 5950              	.LBB508:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5951              		.loc 1 377 0
 5952 0261 498B85C8 		movq	200(%r13), %rax
 5952      000000
 375:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5953              		.loc 1 375 0
 5954 0268 4889EA   		movq	%rbp, %rdx
 5955 026b 48C1FA10 		sarq	$16, %rdx
 5956 026f 440FB6F2 		movzbl	%dl, %r14d
 5957              	.LVL745:
 377:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 5958              		.loc 1 377 0
 5959 0273 488D4801 		leaq	1(%rax), %rcx
 5960 0277 49898DC8 		movq	%rcx, 200(%r13)
 5960      000000
 5961 027e 8810     		movb	%dl, (%rax)
 5962 0280 4983ADD0 		subq	$1, 208(%r13)
 5962      00000001 
 5963 0288 75BE     		jne	.L574
 5964 028a 4C89EF   		movq	%r13, %rdi
 5965 028d E8000000 		call	dump_buffer_e
 5965      00
 5966              	.LVL746:
 378:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_e(entropy, 0);
 5967              		.loc 1 378 0
 5968 0292 4181FEFF 		cmpl	$255, %r14d
 5968      000000
 5969 0299 75B6     		jne	.L576
 5970              	.L606:
 379:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 5971              		.loc 1 379 0
 5972 029b 498B85C8 		movq	200(%r13), %rax
 5972      000000
 5973 02a2 488D5001 		leaq	1(%rax), %rdx
 5974 02a6 498995C8 		movq	%rdx, 200(%r13)
 5974      000000
 5975 02ad C60000   		movb	$0, (%rax)
 5976 02b0 4983ADD0 		subq	$1, 208(%r13)
 5976      00000001 
 5977 02b8 7597     		jne	.L576
 5978 02ba 4C89EF   		movq	%r13, %rdi
 5979 02bd E8000000 		call	dump_buffer_e
 5979      00
 5980              	.LVL747:
 5981 02c2 EB8D     		jmp	.L576
 5982              	.LVL748:
 5983              		.p2align 4,,10
 5984 02c4 0F1F4000 		.p2align 3
 5985              	.L583:
 5986              	.LBE508:
 5987              	.LBE506:
 5988              	.LBE505:
 5989              	.LBE509:
 5990              	.LBE510:
 5991              	.LBE511:
 5992              	.LBE545:
1094:fltk-1.3.4-1/jpeg/jchuff.c **** 
 5993              		.loc 1 1094 0
 5994 02c8 498B0424 		movq	(%r12), %rax
 5995 02cc 4C89E7   		movq	%r12, %rdi
 5996 02cf C7402819 		movl	$25, 40(%rax)
 5996      000000
 5997 02d6 498B0424 		movq	(%r12), %rax
 5998 02da FF10     		call	*(%rax)
 5999              	.LVL749:
 6000 02dc 498B7C24 		movq	40(%r12), %rdi
 6000      28
 6001 02e1 4C89F2   		movq	%r14, %rdx
 6002 02e4 31C0     		xorl	%eax, %eax
 6003 02e6 E946FEFF 		jmp	.L586
 6003      FF
 6004              	.LVL750:
 6005              	.L602:
1101:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6006              		.loc 1 1101 0
 6007 02eb E8000000 		call	__stack_chk_fail
 6007      00
 6008              	.LVL751:
 6009              		.cfi_endproc
 6010              	.LFE80:
 6012              		.section	.text.unlikely.finish_pass_huff
 6013              	.LCOLDE13:
 6014              		.section	.text.finish_pass_huff
 6015              	.LHOTE13:
 6016              		.section	.text.unlikely.encode_mcu_huff,"ax",@progbits
 6017              	.LCOLDB14:
 6018              		.section	.text.encode_mcu_huff,"ax",@progbits
 6019              	.LHOTB14:
 6020              		.p2align 4,,15
 6022              	encode_mcu_huff:
 6023              	.LFB79:
1014:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 6024              		.loc 1 1014 0
 6025              		.cfi_startproc
 6026              	.LVL752:
 6027 0000 4157     		pushq	%r15
 6028              		.cfi_def_cfa_offset 16
 6029              		.cfi_offset 15, -16
 6030 0002 4156     		pushq	%r14
 6031              		.cfi_def_cfa_offset 24
 6032              		.cfi_offset 14, -24
 6033 0004 4989FF   		movq	%rdi, %r15
 6034 0007 4155     		pushq	%r13
 6035              		.cfi_def_cfa_offset 32
 6036              		.cfi_offset 13, -32
 6037 0009 4154     		pushq	%r12
 6038              		.cfi_def_cfa_offset 40
 6039              		.cfi_offset 12, -40
 6040 000b 4989F5   		movq	%rsi, %r13
 6041 000e 55       		pushq	%rbp
 6042              		.cfi_def_cfa_offset 48
 6043              		.cfi_offset 6, -48
 6044 000f 53       		pushq	%rbx
 6045              		.cfi_def_cfa_offset 56
 6046              		.cfi_offset 3, -56
 6047 0010 4881ECB8 		subq	$184, %rsp
 6047      000000
 6048              		.cfi_def_cfa_offset 240
1027:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 6049              		.loc 1 1027 0
 6050 0017 458B8F3C 		movl	316(%r15), %r9d
 6050      010000
1014:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 6051              		.loc 1 1014 0
 6052 001e 64488B04 		movq	%fs:40, %rax
 6052      25280000 
 6052      00
 6053 0027 48898424 		movq	%rax, 168(%rsp)
 6053      A8000000 
 6054 002f 31C0     		xorl	%eax, %eax
1015:fltk-1.3.4-1/jpeg/jchuff.c ****   working_state state;
 6055              		.loc 1 1015 0
 6056 0031 488B8730 		movq	560(%rdi), %rax
 6056      020000
1027:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 6057              		.loc 1 1027 0
 6058 0038 4585C9   		testl	%r9d, %r9d
1015:fltk-1.3.4-1/jpeg/jchuff.c ****   working_state state;
 6059              		.loc 1 1015 0
 6060 003b 4889C6   		movq	%rax, %rsi
 6061              	.LVL753:
 6062 003e 48894424 		movq	%rax, 88(%rsp)
 6062      58
 6063              	.LVL754:
1021:fltk-1.3.4-1/jpeg/jchuff.c ****   state.free_in_buffer = cinfo->dest->free_in_buffer;
 6064              		.loc 1 1021 0
 6065 0043 488B4728 		movq	40(%rdi), %rax
 6066              	.LVL755:
1023:fltk-1.3.4-1/jpeg/jchuff.c ****   state.cinfo = cinfo;
 6067              		.loc 1 1023 0
 6068 0047 488B4E20 		movq	32(%rsi), %rcx
 6069 004b 488B7E18 		movq	24(%rsi), %rdi
 6070              	.LVL756:
 6071 004f 448B6620 		movl	32(%rsi), %r12d
1021:fltk-1.3.4-1/jpeg/jchuff.c ****   state.free_in_buffer = cinfo->dest->free_in_buffer;
 6072              		.loc 1 1021 0
 6073 0053 488B10   		movq	(%rax), %rdx
 6074              	.LVL757:
1022:fltk-1.3.4-1/jpeg/jchuff.c ****   ASSIGN_STATE(state.cur, entropy->saved);
 6075              		.loc 1 1022 0
 6076 0056 488B4008 		movq	8(%rax), %rax
 6077              	.LVL758:
1023:fltk-1.3.4-1/jpeg/jchuff.c ****   state.cinfo = cinfo;
 6078              		.loc 1 1023 0
 6079 005a 48898C24 		movq	%rcx, 136(%rsp)
 6079      88000000 
 6080 0062 488B4E28 		movq	40(%rsi), %rcx
 6081 0066 4989FE   		movq	%rdi, %r14
 6082              	.LVL759:
 6083 0069 4889BC24 		movq	%rdi, 128(%rsp)
 6083      80000000 
 6084 0071 48898C24 		movq	%rcx, 144(%rsp)
 6084      90000000 
 6085 0079 488B4E30 		movq	48(%rsi), %rcx
 6086 007d 48898C24 		movq	%rcx, 152(%rsp)
 6086      98000000 
1027:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0)
 6087              		.loc 1 1027 0
 6088 0085 740D     		je	.L608
1028:fltk-1.3.4-1/jpeg/jchuff.c ****       if (! emit_restart_s(&state, entropy->next_restart_num))
 6089              		.loc 1 1028 0
 6090 0087 448B4638 		movl	56(%rsi), %r8d
 6091 008b 4585C0   		testl	%r8d, %r8d
 6092 008e 0F845C08 		je	.L758
 6092      0000
 6093              	.LVL760:
 6094              	.L608:
1034:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
 6095              		.loc 1 1034 0 discriminator 1
 6096 0094 418BB7A0 		movl	416(%r15), %esi
 6096      010000
 6097 009b 85F6     		testl	%esi, %esi
 6098 009d 0F8E0B06 		jle	.L621
 6098      0000
 6099 00a3 498DB7A4 		leaq	420(%r15), %rsi
 6099      010000
 6100 00aa 4C896C24 		movq	%r13, 80(%rsp)
 6100      50
1034:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
 6101              		.loc 1 1034 0 is_stmt 0
 6102 00af C7442448 		movl	$0, 72(%rsp)
 6102      00000000 
 6103              	.LBB605:
 6104              	.LBB606:
 6105              	.LBB607:
 6106              	.LBB608:
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6107              		.loc 1 319 0 is_stmt 1
 6108 00b7 4D89F5   		movq	%r14, %r13
 6109              	.LVL761:
 6110 00ba 4489E3   		movl	%r12d, %ebx
 6111 00bd 48897424 		movq	%rsi, 96(%rsp)
 6111      60
 6112              	.LVL762:
 6113              	.L679:
 6114              	.LBE608:
 6115              	.LBE607:
 6116              	.LBE606:
 6117              	.LBE605:
1036:fltk-1.3.4-1/jpeg/jchuff.c ****     if (! encode_one_block(&state,
 6118              		.loc 1 1036 0
 6119 00c2 488B7424 		movq	96(%rsp), %rsi
 6119      60
1037:fltk-1.3.4-1/jpeg/jchuff.c **** 			   MCU_data[blkn][0], state.cur.last_dc_val[ci],
 6120              		.loc 1 1037 0
 6121 00c7 4C8B5424 		movq	88(%rsp), %r10
 6121      58
1036:fltk-1.3.4-1/jpeg/jchuff.c ****     if (! encode_one_block(&state,
 6122              		.loc 1 1036 0
 6123 00cc 486336   		movslq	(%rsi), %rsi
 6124 00cf 498B8CF7 		movq	376(%r15,%rsi,8), %rcx
 6124      78010000 
 6125              	.LVL763:
 6126 00d7 48897424 		movq	%rsi, 104(%rsp)
 6126      68
1037:fltk-1.3.4-1/jpeg/jchuff.c **** 			   MCU_data[blkn][0], state.cur.last_dc_val[ci],
 6127              		.loc 1 1037 0
 6128 00dc 48637918 		movslq	24(%rcx), %rdi
 6129 00e0 48634914 		movslq	20(%rcx), %rcx
 6130              	.LVL764:
 6131 00e4 498B7CFA 		movq	96(%r10,%rdi,8), %rdi
 6131      60
 6132 00e9 4D8B74CA 		movq	64(%r10,%rcx,8), %r14
 6132      40
 6133              	.LBB698:
 6134              	.LBB690:
 919:fltk-1.3.4-1/jpeg/jchuff.c ****   const int * natural_order = state->cinfo->natural_order;
 6135              		.loc 1 919 0
 6136 00ee 418B8FE8 		movl	488(%r15), %ecx
 6136      010000
 6137              	.LBE690:
 6138              	.LBE698:
1037:fltk-1.3.4-1/jpeg/jchuff.c **** 			   MCU_data[blkn][0], state.cur.last_dc_val[ci],
 6139              		.loc 1 1037 0
 6140 00f5 48897C24 		movq	%rdi, 16(%rsp)
 6140      10
 6141 00fa 488B7C24 		movq	80(%rsp), %rdi
 6141      50
 6142              	.LBB699:
 6143              	.LBB691:
 919:fltk-1.3.4-1/jpeg/jchuff.c ****   const int * natural_order = state->cinfo->natural_order;
 6144              		.loc 1 919 0
 6145 00ff 894C244C 		movl	%ecx, 76(%rsp)
 920:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6146              		.loc 1 920 0
 6147 0103 498B8FE0 		movq	480(%r15), %rcx
 6147      010000
 6148              	.LBE691:
 6149              	.LBE699:
1037:fltk-1.3.4-1/jpeg/jchuff.c **** 			   MCU_data[blkn][0], state.cur.last_dc_val[ci],
 6150              		.loc 1 1037 0
 6151 010a 488B3F   		movq	(%rdi), %rdi
 6152              	.LBB700:
 6153              	.LBB692:
 920:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6154              		.loc 1 920 0
 6155 010d 48894C24 		movq	%rcx, 8(%rsp)
 6155      08
 924:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6156              		.loc 1 924 0
 6157 0112 0FBF0F   		movswl	(%rdi), %ecx
 6158              	.LBE692:
 6159              	.LBE700:
1037:fltk-1.3.4-1/jpeg/jchuff.c **** 			   MCU_data[blkn][0], state.cur.last_dc_val[ci],
 6160              		.loc 1 1037 0
 6161 0115 48897C24 		movq	%rdi, 64(%rsp)
 6161      40
 6162              	.LVL765:
 6163              	.LBB701:
 6164              	.LBB693:
 926:fltk-1.3.4-1/jpeg/jchuff.c ****     temp = -temp;		/* temp is abs value of input */
 6165              		.loc 1 926 0
 6166 011a 2B8CB48C 		subl	140(%rsp,%rsi,4), %ecx
 6166      000000
 6167              	.LVL766:
 6168 0121 0F88B406 		js	.L759
 6168      0000
 6169              	.LVL767:
 935:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits++;
 6170              		.loc 1 935 0
 6171 0127 0F84B307 		je	.L685
 6171      0000
 6172 012d 894C2418 		movl	%ecx, 24(%rsp)
 6173              	.LVL768:
 6174              	.L623:
 6175 0131 4531E4   		xorl	%r12d, %r12d
 6176              	.LVL769:
 6177              		.p2align 4,,10
 6178 0134 0F1F4000 		.p2align 3
 6179              	.L625:
 936:fltk-1.3.4-1/jpeg/jchuff.c ****     temp >>= 1;
 6180              		.loc 1 936 0
 6181 0138 4183C401 		addl	$1, %r12d
 6182              	.LVL770:
 935:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits++;
 6183              		.loc 1 935 0
 6184 013c D1F9     		sarl	%ecx
 6185              	.LVL771:
 6186 013e 75F8     		jne	.L625
 942:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(state->cinfo, JERR_BAD_DCT_COEF);
 6187              		.loc 1 942 0
 6188 0140 4183FC0B 		cmpl	$11, %r12d
 6189 0144 0F8F6606 		jg	.L760
 6189      0000
 6190              	.LVL772:
 6191              	.L624:
 946:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 6192              		.loc 1 946 0
 6193 014a 4963FC   		movslq	%r12d, %rdi
 6194 014d 410FB68C 		movzbl	1024(%r14,%rdi), %ecx
 6194      3E000400 
 6194      00
 6195 0156 458B34BE 		movl	(%r14,%rdi,4), %r14d
 6196              	.LVL773:
 6197              	.LBB621:
 6198              	.LBB618:
 315:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);
 6199              		.loc 1 315 0
 6200 015a 85C9     		testl	%ecx, %ecx
 6201 015c 0F841A06 		je	.L761
 6201      0000
 6202              	.LVL774:
 6203              	.L626:
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6204              		.loc 1 319 0
 6205 0162 BF010000 		movl	$1, %edi
 6205      00
 322:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6206              		.loc 1 322 0
 6207 0167 01CB     		addl	%ecx, %ebx
 6208              	.LVL775:
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6209              		.loc 1 319 0
 6210 0169 48D3E7   		salq	%cl, %rdi
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6211              		.loc 1 327 0
 6212 016c B9180000 		movl	$24, %ecx
 6212      00
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6213              		.loc 1 319 0
 6214 0171 4883EF01 		subq	$1, %rdi
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6215              		.loc 1 327 0
 6216 0175 29D9     		subl	%ebx, %ecx
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6217              		.loc 1 319 0
 6218 0177 4421F7   		andl	%r14d, %edi
 6219              	.LVL776:
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6220              		.loc 1 327 0
 6221 017a 48D3E7   		salq	%cl, %rdi
 6222              	.LVL777:
 6223 017d 4909FD   		orq	%rdi, %r13
 6224              	.LVL778:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6225              		.loc 1 329 0
 6226 0180 83FB07   		cmpl	$7, %ebx
 6227 0183 7F23     		jg	.L633
 6228 0185 EB72     		jmp	.L627
 6229              	.LVL779:
 6230 0187 660F1F84 		.p2align 4,,10
 6230      00000000 
 6230      00
 6231              		.p2align 3
 6232              	.L763:
 6233              	.LBB609:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6234              		.loc 1 332 0
 6235 0190 4883C201 		addq	$1, %rdx
 6236              	.LVL780:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 6237              		.loc 1 333 0
 6238 0194 81FDFF00 		cmpl	$255, %ebp
 6238      0000
 6239 019a 7440     		je	.L762
 6240              	.LVL781:
 6241              	.L631:
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6242              		.loc 1 337 0
 6243 019c 83EB08   		subl	$8, %ebx
 6244              	.LVL782:
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 6245              		.loc 1 336 0
 6246 019f 49C1E508 		salq	$8, %r13
 6247              	.LVL783:
 6248              	.LBE609:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6249              		.loc 1 329 0
 6250 01a3 83FB07   		cmpl	$7, %ebx
 6251 01a6 7E51     		jle	.L627
 6252              	.LVL784:
 6253              	.L633:
 6254              	.LBB616:
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6255              		.loc 1 330 0
 6256 01a8 4C89E9   		movq	%r13, %rcx
 6257 01ab 48C1F910 		sarq	$16, %rcx
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6258              		.loc 1 332 0
 6259 01af 4883E801 		subq	$1, %rax
 6260              	.LVL785:
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6261              		.loc 1 330 0
 6262 01b3 0FB6E9   		movzbl	%cl, %ebp
 6263              	.LVL786:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6264              		.loc 1 332 0
 6265 01b6 880A     		movb	%cl, (%rdx)
 6266 01b8 75D6     		jne	.L763
 6267              	.LVL787:
 6268              	.LBB610:
 6269              	.LBB611:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6270              		.loc 1 272 0
 6271 01ba 4D8B7728 		movq	40(%r15), %r14
 6272              	.LVL788:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 6273              		.loc 1 274 0
 6274 01be 4C89FF   		movq	%r15, %rdi
 6275 01c1 41FF5618 		call	*24(%r14)
 6276              	.LVL789:
 6277 01c5 85C0     		testl	%eax, %eax
 6278 01c7 0F843303 		je	.L618
 6278      0000
 6279              	.LBE611:
 6280              	.LBE610:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 6281              		.loc 1 333 0
 6282 01cd 81FDFF00 		cmpl	$255, %ebp
 6282      0000
 6283              	.LBB613:
 6284              	.LBB612:
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 6285              		.loc 1 277 0
 6286 01d3 498B16   		movq	(%r14), %rdx
 6287              	.LVL790:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 6288              		.loc 1 278 0
 6289 01d6 498B4608 		movq	8(%r14), %rax
 6290              	.LVL791:
 6291              	.LBE612:
 6292              	.LBE613:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 6293              		.loc 1 333 0
 6294 01da 75C0     		jne	.L631
 6295              	.L762:
 6296              	.LVL792:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 6297              		.loc 1 334 0
 6298 01dc 4883E801 		subq	$1, %rax
 6299              	.LVL793:
 6300 01e0 C60200   		movb	$0, (%rdx)
 6301 01e3 0F844203 		je	.L632
 6301      0000
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6302              		.loc 1 337 0
 6303 01e9 83EB08   		subl	$8, %ebx
 6304              	.LVL794:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 6305              		.loc 1 334 0
 6306 01ec 4883C201 		addq	$1, %rdx
 6307              	.LVL795:
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 6308              		.loc 1 336 0
 6309 01f0 49C1E508 		salq	$8, %r13
 6310              	.LVL796:
 6311              	.LBE616:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6312              		.loc 1 329 0
 6313 01f4 83FB07   		cmpl	$7, %ebx
 6314 01f7 7FAF     		jg	.L633
 6315              	.LVL797:
 6316              	.L627:
 6317              	.LBE618:
 6318              	.LBE621:
 951:fltk-1.3.4-1/jpeg/jchuff.c ****     if (! emit_bits_s(state, (unsigned int) temp2, nbits))
 6319              		.loc 1 951 0
 6320 01f9 4585E4   		testl	%r12d, %r12d
 6321 01fc 0F85E705 		jne	.L764
 6321      0000
 6322              	.LVL798:
 6323              	.L635:
 959:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp2 = block[natural_order[k]]) == 0) {
 6324              		.loc 1 959 0
 6325 0202 8B4C244C 		movl	76(%rsp), %ecx
 6326 0206 85C9     		testl	%ecx, %ecx
 6327 0208 0F8E5E04 		jle	.L681
 6327      0000
 6328 020e 488B7424 		movq	8(%rsp), %rsi
 6328      08
 6329 0213 31ED     		xorl	%ebp, %ebp
 6330 0215 C7442428 		movl	$1, 40(%rsp)
 6330      01000000 
 6331 021d 4189DC   		movl	%ebx, %r12d
 6332 0220 4883C604 		addq	$4, %rsi
 6333 0224 48897424 		movq	%rsi, 48(%rsp)
 6333      30
 6334              	.LVL799:
 6335              	.L671:
 960:fltk-1.3.4-1/jpeg/jchuff.c ****       r++;
 6336              		.loc 1 960 0
 6337 0229 488B7424 		movq	48(%rsp), %rsi
 6337      30
 6338 022e 48630E   		movslq	(%rsi), %rcx
 6339 0231 488B7424 		movq	64(%rsp), %rsi
 6339      40
 6340 0236 0FBF344E 		movswl	(%rsi,%rcx,2), %esi
 6341 023a 85F6     		testl	%esi, %esi
 6342 023c 8974243C 		movl	%esi, 60(%rsp)
 6343              	.LVL800:
 6344 0240 0F845303 		je	.L643
 6344      0000
 964:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (! emit_bits_s(state, actbl->ehufco[0xF0], actbl->ehufsi[0xF0]))
 6345              		.loc 1 964 0
 6346 0246 83FD0F   		cmpl	$15, %ebp
 6347 0249 0F8EEB00 		jle	.L645
 6347      0000
 6348 024f 896C2408 		movl	%ebp, 8(%rsp)
 6349 0253 4889C3   		movq	%rax, %rbx
 6350 0256 4989D6   		movq	%rdx, %r14
 6351              	.LVL801:
 6352 0259 0F1F8000 		.p2align 4,,10
 6352      000000
 6353              		.p2align 3
 6354              	.L723:
 965:fltk-1.3.4-1/jpeg/jchuff.c **** 	  return FALSE;
 6355              		.loc 1 965 0
 6356 0260 488B4424 		movq	16(%rsp), %rax
 6356      10
 6357 0265 0FB688F0 		movzbl	1264(%rax), %ecx
 6357      040000
 6358 026c 448B80C0 		movl	960(%rax), %r8d
 6358      030000
 6359              	.LVL802:
 6360              	.LBB622:
 6361              	.LBB623:
 315:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);
 6362              		.loc 1 315 0
 6363 0273 85C9     		testl	%ecx, %ecx
 6364 0275 0F84F502 		je	.L765
 6364      0000
 6365              	.LVL803:
 6366              	.L647:
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6367              		.loc 1 319 0
 6368 027b BE010000 		movl	$1, %esi
 6368      00
 322:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6369              		.loc 1 322 0
 6370 0280 4101CC   		addl	%ecx, %r12d
 6371              	.LVL804:
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6372              		.loc 1 319 0
 6373 0283 48D3E6   		salq	%cl, %rsi
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6374              		.loc 1 327 0
 6375 0286 B9180000 		movl	$24, %ecx
 6375      00
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6376              		.loc 1 319 0
 6377 028b 488D46FF 		leaq	-1(%rsi), %rax
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6378              		.loc 1 327 0
 6379 028f 4429E1   		subl	%r12d, %ecx
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6380              		.loc 1 319 0
 6381 0292 4421C0   		andl	%r8d, %eax
 6382              	.LVL805:
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6383              		.loc 1 327 0
 6384 0295 48D3E0   		salq	%cl, %rax
 6385              	.LVL806:
 6386 0298 4909C5   		orq	%rax, %r13
 6387              	.LVL807:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6388              		.loc 1 329 0
 6389 029b 4183FC07 		cmpl	$7, %r12d
 6390 029f 7F21     		jg	.L653
 6391 02a1 EB7D     		jmp	.L648
 6392              	.LVL808:
 6393              		.p2align 4,,10
 6394 02a3 0F1F4400 		.p2align 3
 6394      00
 6395              	.L767:
 6396              	.LBB624:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6397              		.loc 1 332 0
 6398 02a8 4983C601 		addq	$1, %r14
 6399              	.LVL809:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 6400              		.loc 1 333 0
 6401 02ac 81FDFF00 		cmpl	$255, %ebp
 6401      0000
 6402 02b2 7442     		je	.L766
 6403              	.L651:
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6404              		.loc 1 337 0
 6405 02b4 4183EC08 		subl	$8, %r12d
 6406              	.LVL810:
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 6407              		.loc 1 336 0
 6408 02b8 49C1E508 		salq	$8, %r13
 6409              	.LVL811:
 6410              	.LBE624:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6411              		.loc 1 329 0
 6412 02bc 4183FC07 		cmpl	$7, %r12d
 6413 02c0 7E5E     		jle	.L648
 6414              	.LVL812:
 6415              	.L653:
 6416              	.LBB631:
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6417              		.loc 1 330 0
 6418 02c2 4C89E8   		movq	%r13, %rax
 6419 02c5 48C1F810 		sarq	$16, %rax
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6420              		.loc 1 332 0
 6421 02c9 4883EB01 		subq	$1, %rbx
 6422              	.LVL813:
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6423              		.loc 1 330 0
 6424 02cd 0FB6E8   		movzbl	%al, %ebp
 6425              	.LVL814:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6426              		.loc 1 332 0
 6427 02d0 418806   		movb	%al, (%r14)
 6428 02d3 75D3     		jne	.L767
 6429              	.LVL815:
 6430              	.LBB625:
 6431              	.LBB626:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6432              		.loc 1 272 0
 6433 02d5 498B5F28 		movq	40(%r15), %rbx
 6434              	.LVL816:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 6435              		.loc 1 274 0
 6436 02d9 4C89FF   		movq	%r15, %rdi
 6437 02dc FF5318   		call	*24(%rbx)
 6438              	.LVL817:
 6439 02df 85C0     		testl	%eax, %eax
 6440 02e1 0F841902 		je	.L618
 6440      0000
 6441              	.LBE626:
 6442              	.LBE625:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 6443              		.loc 1 333 0
 6444 02e7 81FDFF00 		cmpl	$255, %ebp
 6444      0000
 6445              	.LBB628:
 6446              	.LBB627:
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 6447              		.loc 1 277 0
 6448 02ed 4C8B33   		movq	(%rbx), %r14
 6449              	.LVL818:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 6450              		.loc 1 278 0
 6451 02f0 488B5B08 		movq	8(%rbx), %rbx
 6452              	.LVL819:
 6453              	.LBE627:
 6454              	.LBE628:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 6455              		.loc 1 333 0
 6456 02f4 75BE     		jne	.L651
 6457              	.L766:
 6458              	.LVL820:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 6459              		.loc 1 334 0
 6460 02f6 4883EB01 		subq	$1, %rbx
 6461              	.LVL821:
 6462 02fa 41C60600 		movb	$0, (%r14)
 6463 02fe 0F844C02 		je	.L652
 6463      0000
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6464              		.loc 1 337 0
 6465 0304 4183EC08 		subl	$8, %r12d
 6466              	.LVL822:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 6467              		.loc 1 334 0
 6468 0308 4983C601 		addq	$1, %r14
 6469              	.LVL823:
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 6470              		.loc 1 336 0
 6471 030c 49C1E508 		salq	$8, %r13
 6472              	.LVL824:
 6473              	.LBE631:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6474              		.loc 1 329 0
 6475 0310 4183FC07 		cmpl	$7, %r12d
 6476 0314 7FAC     		jg	.L653
 6477              	.LVL825:
 6478 0316 662E0F1F 		.p2align 4,,10
 6478      84000000 
 6478      0000
 6479              		.p2align 3
 6480              	.L648:
 6481              	.LBE623:
 6482              	.LBE622:
 967:fltk-1.3.4-1/jpeg/jchuff.c ****       }
 6483              		.loc 1 967 0
 6484 0320 836C2408 		subl	$16, 8(%rsp)
 6484      10
 6485              	.LVL826:
 6486 0325 8B442408 		movl	8(%rsp), %eax
 6487              	.LVL827:
 964:fltk-1.3.4-1/jpeg/jchuff.c **** 	if (! emit_bits_s(state, actbl->ehufco[0xF0], actbl->ehufsi[0xF0]))
 6488              		.loc 1 964 0
 6489 0329 83F80F   		cmpl	$15, %eax
 6490 032c 0F8F2EFF 		jg	.L723
 6490      FFFF
 6491 0332 89C5     		movl	%eax, %ebp
 6492 0334 4C89F2   		movq	%r14, %rdx
 6493 0337 4889D8   		movq	%rbx, %rax
 6494              	.LVL828:
 6495              	.L645:
 971:fltk-1.3.4-1/jpeg/jchuff.c **** 	temp = -temp;		/* temp is abs value of input */
 6496              		.loc 1 971 0
 6497 033a 8B74243C 		movl	60(%rsp), %esi
 6498 033e 85F6     		testl	%esi, %esi
 6499 0340 89F1     		movl	%esi, %ecx
 6500 0342 0F888A05 		js	.L768
 6500      0000
 6501              	.LVL829:
 6502              	.L655:
 979:fltk-1.3.4-1/jpeg/jchuff.c **** 	nbits++;
 6503              		.loc 1 979 0
 6504 0348 D1F9     		sarl	%ecx
 6505              	.LVL830:
 6506 034a 41BE0100 		movl	$1, %r14d
 6506      0000
 6507 0350 743A     		je	.L656
 6508              	.LVL831:
 6509              		.p2align 4,,10
 6510 0352 660F1F44 		.p2align 3
 6510      0000
 6511              	.L657:
 980:fltk-1.3.4-1/jpeg/jchuff.c ****       /* Check for out-of-range coefficient values */
 6512              		.loc 1 980 0
 6513 0358 4183C601 		addl	$1, %r14d
 6514              	.LVL832:
 979:fltk-1.3.4-1/jpeg/jchuff.c **** 	nbits++;
 6515              		.loc 1 979 0
 6516 035c D1F9     		sarl	%ecx
 6517              	.LVL833:
 6518 035e 75F8     		jne	.L657
 982:fltk-1.3.4-1/jpeg/jchuff.c **** 	ERREXIT(state->cinfo, JERR_BAD_DCT_COEF);
 6519              		.loc 1 982 0
 6520 0360 4183FE0A 		cmpl	$10, %r14d
 6521 0364 7E26     		jle	.L656
 983:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6522              		.loc 1 983 0
 6523 0366 498B0F   		movq	(%r15), %rcx
 6524              	.LVL834:
 6525 0369 48895424 		movq	%rdx, 24(%rsp)
 6525      18
 6526 036e 4C89FF   		movq	%r15, %rdi
 6527 0371 48894424 		movq	%rax, 8(%rsp)
 6527      08
 6528 0376 C7412806 		movl	$6, 40(%rcx)
 6528      000000
 6529 037d 498B0F   		movq	(%r15), %rcx
 6530 0380 FF11     		call	*(%rcx)
 6531              	.LVL835:
 6532 0382 488B4424 		movq	8(%rsp), %rax
 6532      08
 6533 0387 488B5424 		movq	24(%rsp), %rdx
 6533      18
 6534              	.LVL836:
 6535              	.L656:
 986:fltk-1.3.4-1/jpeg/jchuff.c ****       if (! emit_bits_s(state, actbl->ehufco[temp], actbl->ehufsi[temp]))
 6536              		.loc 1 986 0
 6537 038c 89EF     		movl	%ebp, %edi
 987:fltk-1.3.4-1/jpeg/jchuff.c **** 	return FALSE;
 6538              		.loc 1 987 0
 6539 038e 488B7424 		movq	16(%rsp), %rsi
 6539      10
 986:fltk-1.3.4-1/jpeg/jchuff.c ****       if (! emit_bits_s(state, actbl->ehufco[temp], actbl->ehufsi[temp]))
 6540              		.loc 1 986 0
 6541 0393 C1E704   		sall	$4, %edi
 6542 0396 4401F7   		addl	%r14d, %edi
 6543              	.LVL837:
 987:fltk-1.3.4-1/jpeg/jchuff.c **** 	return FALSE;
 6544              		.loc 1 987 0
 6545 0399 4863FF   		movslq	%edi, %rdi
 6546 039c 0FB68C3E 		movzbl	1024(%rsi,%rdi), %ecx
 6546      00040000 
 6547 03a4 8B2CBE   		movl	(%rsi,%rdi,4), %ebp
 6548              	.LVL838:
 6549              	.LBB634:
 6550              	.LBB635:
 315:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);
 6551              		.loc 1 315 0
 6552 03a7 85C9     		testl	%ecx, %ecx
 6553 03a9 0F84EF04 		je	.L769
 6553      0000
 6554              	.LVL839:
 6555              	.L658:
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6556              		.loc 1 319 0
 6557 03af BF010000 		movl	$1, %edi
 6557      00
 322:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6558              		.loc 1 322 0
 6559 03b4 4101CC   		addl	%ecx, %r12d
 6560              	.LVL840:
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6561              		.loc 1 319 0
 6562 03b7 48D3E7   		salq	%cl, %rdi
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6563              		.loc 1 327 0
 6564 03ba B9180000 		movl	$24, %ecx
 6564      00
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6565              		.loc 1 319 0
 6566 03bf 4883EF01 		subq	$1, %rdi
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6567              		.loc 1 327 0
 6568 03c3 4429E1   		subl	%r12d, %ecx
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6569              		.loc 1 319 0
 6570 03c6 21FD     		andl	%edi, %ebp
 6571              	.LVL841:
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6572              		.loc 1 327 0
 6573 03c8 48D3E5   		salq	%cl, %rbp
 6574              	.LVL842:
 6575 03cb 4C09ED   		orq	%r13, %rbp
 6576              	.LVL843:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6577              		.loc 1 329 0
 6578 03ce 4183FC07 		cmpl	$7, %r12d
 6579 03d2 7F26     		jg	.L664
 6580 03d4 EB78     		jmp	.L659
 6581              	.LVL844:
 6582 03d6 662E0F1F 		.p2align 4,,10
 6582      84000000 
 6582      0000
 6583              		.p2align 3
 6584              	.L771:
 6585              	.LBB636:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6586              		.loc 1 332 0
 6587 03e0 4883C201 		addq	$1, %rdx
 6588              	.LVL845:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 6589              		.loc 1 333 0
 6590 03e4 81FBFF00 		cmpl	$255, %ebx
 6590      0000
 6591 03ea 7443     		je	.L770
 6592              	.LVL846:
 6593              	.L662:
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6594              		.loc 1 337 0
 6595 03ec 4183EC08 		subl	$8, %r12d
 6596              	.LVL847:
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 6597              		.loc 1 336 0
 6598 03f0 48C1E508 		salq	$8, %rbp
 6599              	.LVL848:
 6600              	.LBE636:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6601              		.loc 1 329 0
 6602 03f4 4183FC07 		cmpl	$7, %r12d
 6603 03f8 7E54     		jle	.L659
 6604              	.LVL849:
 6605              	.L664:
 6606              	.LBB643:
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6607              		.loc 1 330 0
 6608 03fa 4889E9   		movq	%rbp, %rcx
 6609 03fd 48C1F910 		sarq	$16, %rcx
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6610              		.loc 1 332 0
 6611 0401 4883E801 		subq	$1, %rax
 6612              	.LVL850:
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6613              		.loc 1 330 0
 6614 0405 0FB6D9   		movzbl	%cl, %ebx
 6615              	.LVL851:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6616              		.loc 1 332 0
 6617 0408 880A     		movb	%cl, (%rdx)
 6618 040a 75D4     		jne	.L771
 6619              	.LVL852:
 6620              	.LBB637:
 6621              	.LBB638:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6622              		.loc 1 272 0
 6623 040c 4D8B6F28 		movq	40(%r15), %r13
 6624              	.LVL853:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 6625              		.loc 1 274 0
 6626 0410 4C89FF   		movq	%r15, %rdi
 6627 0413 41FF5518 		call	*24(%r13)
 6628              	.LVL854:
 6629 0417 85C0     		testl	%eax, %eax
 6630 0419 0F84E100 		je	.L618
 6630      0000
 6631              	.LBE638:
 6632              	.LBE637:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 6633              		.loc 1 333 0
 6634 041f 81FBFF00 		cmpl	$255, %ebx
 6634      0000
 6635              	.LBB640:
 6636              	.LBB639:
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 6637              		.loc 1 277 0
 6638 0425 498B5500 		movq	0(%r13), %rdx
 6639              	.LVL855:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 6640              		.loc 1 278 0
 6641 0429 498B4508 		movq	8(%r13), %rax
 6642              	.LVL856:
 6643              	.LBE639:
 6644              	.LBE640:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 6645              		.loc 1 333 0
 6646 042d 75BD     		jne	.L662
 6647              	.L770:
 6648              	.LVL857:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 6649              		.loc 1 334 0
 6650 042f 4883E801 		subq	$1, %rax
 6651              	.LVL858:
 6652 0433 C60200   		movb	$0, (%rdx)
 6653 0436 0F840403 		je	.L663
 6653      0000
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6654              		.loc 1 337 0
 6655 043c 4183EC08 		subl	$8, %r12d
 6656              	.LVL859:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 6657              		.loc 1 334 0
 6658 0440 4883C201 		addq	$1, %rdx
 6659              	.LVL860:
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 6660              		.loc 1 336 0
 6661 0444 48C1E508 		salq	$8, %rbp
 6662              	.LVL861:
 6663              	.LBE643:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6664              		.loc 1 329 0
 6665 0448 4183FC07 		cmpl	$7, %r12d
 6666 044c 7FAC     		jg	.L664
 6667              	.LVL862:
 6668              	.L659:
 6669              	.LBE635:
 6670              	.LBE634:
 6671              	.LBB647:
 6672              	.LBB648:
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6673              		.loc 1 319 0
 6674 044e 4489F1   		movl	%r14d, %ecx
 6675 0451 BE010000 		movl	$1, %esi
 6675      00
 6676 0456 8B5C243C 		movl	60(%rsp), %ebx
 6677 045a 48D3E6   		salq	%cl, %rsi
 322:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6678              		.loc 1 322 0
 6679 045d 4501F4   		addl	%r14d, %r12d
 6680              	.LVL863:
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6681              		.loc 1 319 0
 6682 0460 4889F1   		movq	%rsi, %rcx
 6683 0463 4883E901 		subq	$1, %rcx
 6684 0467 21CB     		andl	%ecx, %ebx
 6685              	.LVL864:
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6686              		.loc 1 327 0
 6687 0469 B9180000 		movl	$24, %ecx
 6687      00
 6688 046e 4429E1   		subl	%r12d, %ecx
 6689 0471 48D3E3   		salq	%cl, %rbx
 6690              	.LVL865:
 6691 0474 4809EB   		orq	%rbp, %rbx
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6692              		.loc 1 329 0
 6693 0477 4183FC07 		cmpl	$7, %r12d
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6694              		.loc 1 327 0
 6695 047b 4989DD   		movq	%rbx, %r13
 6696              	.LVL866:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6697              		.loc 1 329 0
 6698 047e 7F22     		jg	.L670
 6699 0480 EB6F     		jmp	.L665
 6700              	.LVL867:
 6701              		.p2align 4,,10
 6702 0482 660F1F44 		.p2align 3
 6702      0000
 6703              	.L773:
 6704              	.LBB649:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6705              		.loc 1 332 0
 6706 0488 4883C201 		addq	$1, %rdx
 6707              	.LVL868:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 6708              		.loc 1 333 0
 6709 048c 81FBFF00 		cmpl	$255, %ebx
 6709      0000
 6710 0492 743E     		je	.L772
 6711              	.LVL869:
 6712              	.L668:
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6713              		.loc 1 337 0
 6714 0494 4183EC08 		subl	$8, %r12d
 6715              	.LVL870:
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 6716              		.loc 1 336 0
 6717 0498 49C1E508 		salq	$8, %r13
 6718              	.LVL871:
 6719              	.LBE649:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6720              		.loc 1 329 0
 6721 049c 4183FC07 		cmpl	$7, %r12d
 6722 04a0 7E4F     		jle	.L665
 6723              	.L670:
 6724              	.LBB656:
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6725              		.loc 1 330 0
 6726 04a2 4C89E9   		movq	%r13, %rcx
 6727 04a5 48C1F910 		sarq	$16, %rcx
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6728              		.loc 1 332 0
 6729 04a9 4883E801 		subq	$1, %rax
 6730              	.LVL872:
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6731              		.loc 1 330 0
 6732 04ad 0FB6D9   		movzbl	%cl, %ebx
 6733              	.LVL873:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6734              		.loc 1 332 0
 6735 04b0 880A     		movb	%cl, (%rdx)
 6736 04b2 75D4     		jne	.L773
 6737              	.LVL874:
 6738              	.LBB650:
 6739              	.LBB651:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6740              		.loc 1 272 0
 6741 04b4 498B6F28 		movq	40(%r15), %rbp
 6742              	.LVL875:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 6743              		.loc 1 274 0
 6744 04b8 4C89FF   		movq	%r15, %rdi
 6745 04bb FF5518   		call	*24(%rbp)
 6746              	.LVL876:
 6747 04be 85C0     		testl	%eax, %eax
 6748 04c0 743E     		je	.L618
 6749              	.LBE651:
 6750              	.LBE650:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 6751              		.loc 1 333 0
 6752 04c2 81FBFF00 		cmpl	$255, %ebx
 6752      0000
 6753              	.LBB653:
 6754              	.LBB652:
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 6755              		.loc 1 277 0
 6756 04c8 488B5500 		movq	0(%rbp), %rdx
 6757              	.LVL877:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 6758              		.loc 1 278 0
 6759 04cc 488B4508 		movq	8(%rbp), %rax
 6760              	.LVL878:
 6761              	.LBE652:
 6762              	.LBE653:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 6763              		.loc 1 333 0
 6764 04d0 75C2     		jne	.L668
 6765              	.L772:
 6766              	.LVL879:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 6767              		.loc 1 334 0
 6768 04d2 4883E801 		subq	$1, %rax
 6769              	.LVL880:
 6770 04d6 C60200   		movb	$0, (%rdx)
 6771 04d9 0F847F02 		je	.L669
 6771      0000
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6772              		.loc 1 337 0
 6773 04df 4183EC08 		subl	$8, %r12d
 6774              	.LVL881:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 6775              		.loc 1 334 0
 6776 04e3 4883C201 		addq	$1, %rdx
 6777              	.LVL882:
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 6778              		.loc 1 336 0
 6779 04e7 49C1E508 		salq	$8, %r13
 6780              	.LVL883:
 6781              	.LBE656:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6782              		.loc 1 329 0
 6783 04eb 4183FC07 		cmpl	$7, %r12d
 6784 04ef 7FB1     		jg	.L670
 6785              	.LVL884:
 6786              	.L665:
 6787              	.LBE648:
 6788              	.LBE647:
 995:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 6789              		.loc 1 995 0
 6790 04f1 31ED     		xorl	%ebp, %ebp
 6791 04f3 E9A40000 		jmp	.L646
 6791      00
 6792              	.LVL885:
 6793 04f8 0F1F8400 		.p2align 4,,10
 6793      00000000 
 6794              		.p2align 3
 6795              	.L618:
 6796              	.LBE693:
 6797              	.LBE701:
1030:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6798              		.loc 1 1030 0
 6799 0500 31C0     		xorl	%eax, %eax
 6800              	.L617:
1062:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6801              		.loc 1 1062 0
 6802 0502 488BB424 		movq	168(%rsp), %rsi
 6802      A8000000 
 6803 050a 64483334 		xorq	%fs:40, %rsi
 6803      25280000 
 6803      00
 6804 0513 0F851605 		jne	.L774
 6804      0000
 6805 0519 4881C4B8 		addq	$184, %rsp
 6805      000000
 6806              		.cfi_remember_state
 6807              		.cfi_def_cfa_offset 56
 6808 0520 5B       		popq	%rbx
 6809              		.cfi_def_cfa_offset 48
 6810 0521 5D       		popq	%rbp
 6811              		.cfi_def_cfa_offset 40
 6812 0522 415C     		popq	%r12
 6813              		.cfi_def_cfa_offset 32
 6814 0524 415D     		popq	%r13
 6815              		.cfi_def_cfa_offset 24
 6816 0526 415E     		popq	%r14
 6817              		.cfi_def_cfa_offset 16
 6818 0528 415F     		popq	%r15
 6819              		.cfi_def_cfa_offset 8
 6820              	.LVL886:
 6821 052a C3       		ret
 6822              	.LVL887:
 6823              	.L632:
 6824              		.cfi_restore_state
 6825              	.LBB702:
 6826              	.LBB694:
 6827              	.LBB659:
 6828              	.LBB619:
 6829              	.LBB617:
 6830              	.LBB614:
 6831              	.LBB615:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6832              		.loc 1 272 0
 6833 052b 498B6F28 		movq	40(%r15), %rbp
 6834              	.LVL888:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 6835              		.loc 1 274 0
 6836 052f 4C89FF   		movq	%r15, %rdi
 6837 0532 FF5518   		call	*24(%rbp)
 6838              	.LVL889:
 6839 0535 85C0     		testl	%eax, %eax
 6840 0537 74C7     		je	.L618
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 6841              		.loc 1 277 0
 6842 0539 488B5500 		movq	0(%rbp), %rdx
 6843              	.LVL890:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 6844              		.loc 1 278 0
 6845 053d 488B4508 		movq	8(%rbp), %rax
 6846              	.LVL891:
 6847 0541 E956FCFF 		jmp	.L631
 6847      FF
 6848              	.LVL892:
 6849 0546 662E0F1F 		.p2align 4,,10
 6849      84000000 
 6849      0000
 6850              		.p2align 3
 6851              	.L652:
 6852              	.LBE615:
 6853              	.LBE614:
 6854              	.LBE617:
 6855              	.LBE619:
 6856              	.LBE659:
 6857              	.LBB660:
 6858              	.LBB633:
 6859              	.LBB632:
 6860              	.LBB629:
 6861              	.LBB630:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6862              		.loc 1 272 0
 6863 0550 498B5F28 		movq	40(%r15), %rbx
 6864              	.LVL893:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 6865              		.loc 1 274 0
 6866 0554 4C89FF   		movq	%r15, %rdi
 6867 0557 FF5318   		call	*24(%rbx)
 6868              	.LVL894:
 6869 055a 85C0     		testl	%eax, %eax
 6870 055c 74A2     		je	.L618
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 6871              		.loc 1 277 0
 6872 055e 4C8B33   		movq	(%rbx), %r14
 6873              	.LVL895:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 6874              		.loc 1 278 0
 6875 0561 488B5B08 		movq	8(%rbx), %rbx
 6876              	.LVL896:
 6877 0565 E94AFDFF 		jmp	.L651
 6877      FF
 6878              	.LVL897:
 6879 056a 660F1F44 		.p2align 4,,10
 6879      0000
 6880              		.p2align 3
 6881              	.L765:
 6882              	.LBE630:
 6883              	.LBE629:
 6884              	.LBE632:
 316:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6885              		.loc 1 316 0
 6886 0570 498B07   		movq	(%r15), %rax
 6887 0573 44894424 		movl	%r8d, 32(%rsp)
 6887      20
 6888 0578 4C89FF   		movq	%r15, %rdi
 6889 057b 894C2418 		movl	%ecx, 24(%rsp)
 6890 057f C7402829 		movl	$41, 40(%rax)
 6890      000000
 6891 0586 498B07   		movq	(%r15), %rax
 6892 0589 FF10     		call	*(%rax)
 6893              	.LVL898:
 6894 058b 448B4424 		movl	32(%rsp), %r8d
 6894      20
 6895 0590 8B4C2418 		movl	24(%rsp), %ecx
 6896 0594 E9E2FCFF 		jmp	.L647
 6896      FF
 6897              	.LVL899:
 6898              	.L643:
 6899              	.LBE633:
 6900              	.LBE660:
 961:fltk-1.3.4-1/jpeg/jchuff.c ****     } else {
 6901              		.loc 1 961 0
 6902 0599 83C501   		addl	$1, %ebp
 6903              	.LVL900:
 6904              	.L646:
 959:fltk-1.3.4-1/jpeg/jchuff.c ****     if ((temp2 = block[natural_order[k]]) == 0) {
 6905              		.loc 1 959 0
 6906 059c 83442428 		addl	$1, 40(%rsp)
 6906      01
 6907              	.LVL901:
 6908 05a1 48834424 		addq	$4, 48(%rsp)
 6908      3004
 6909 05a7 8B742428 		movl	40(%rsp), %esi
 6910              	.LVL902:
 6911 05ab 3974244C 		cmpl	%esi, 76(%rsp)
 6912 05af 0F8D74FC 		jge	.L671
 6912      FFFF
1000:fltk-1.3.4-1/jpeg/jchuff.c ****     if (! emit_bits_s(state, actbl->ehufco[0], actbl->ehufsi[0]))
 6913              		.loc 1 1000 0
 6914 05b5 85ED     		testl	%ebp, %ebp
 6915 05b7 4489E3   		movl	%r12d, %ebx
 6916 05ba 0F84AC00 		je	.L681
 6916      0000
1001:fltk-1.3.4-1/jpeg/jchuff.c ****       return FALSE;
 6917              		.loc 1 1001 0
 6918 05c0 488B7424 		movq	16(%rsp), %rsi
 6918      10
 6919              	.LVL903:
 6920 05c5 0FB6AE00 		movzbl	1024(%rsi), %ebp
 6920      040000
 6921              	.LVL904:
 6922 05cc 448B26   		movl	(%rsi), %r12d
 6923              	.LVL905:
 6924              	.LBB661:
 6925              	.LBB662:
 315:fltk-1.3.4-1/jpeg/jchuff.c ****     ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);
 6926              		.loc 1 315 0
 6927 05cf 85ED     		testl	%ebp, %ebp
 6928 05d1 0F845D04 		je	.L775
 6928      0000
 6929              	.LVL906:
 6930              	.L672:
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6931              		.loc 1 319 0
 6932 05d7 89E9     		movl	%ebp, %ecx
 6933 05d9 BF010000 		movl	$1, %edi
 6933      00
 322:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6934              		.loc 1 322 0
 6935 05de 01EB     		addl	%ebp, %ebx
 6936              	.LVL907:
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6937              		.loc 1 319 0
 6938 05e0 48D3E7   		salq	%cl, %rdi
 6939 05e3 4489E6   		movl	%r12d, %esi
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6940              		.loc 1 327 0
 6941 05e6 B9180000 		movl	$24, %ecx
 6941      00
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6942              		.loc 1 319 0
 6943 05eb 4883EF01 		subq	$1, %rdi
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6944              		.loc 1 327 0
 6945 05ef 29D9     		subl	%ebx, %ecx
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6946              		.loc 1 319 0
 6947 05f1 21FE     		andl	%edi, %esi
 6948              	.LVL908:
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6949              		.loc 1 327 0
 6950 05f3 48D3E6   		salq	%cl, %rsi
 6951              	.LVL909:
 6952 05f6 4909F5   		orq	%rsi, %r13
 6953              	.LVL910:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6954              		.loc 1 329 0
 6955 05f9 83FB07   		cmpl	$7, %ebx
 6956 05fc 7F1A     		jg	.L678
 6957 05fe EB6C     		jmp	.L681
 6958              	.LVL911:
 6959              		.p2align 4,,10
 6960              		.p2align 3
 6961              	.L777:
 6962              	.LBB663:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6963              		.loc 1 332 0
 6964 0600 4883C201 		addq	$1, %rdx
 6965              	.LVL912:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 6966              		.loc 1 333 0
 6967 0604 81FDFF00 		cmpl	$255, %ebp
 6967      0000
 6968 060a 7443     		je	.L776
 6969              	.LVL913:
 6970              	.L676:
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 6971              		.loc 1 337 0
 6972 060c 83EB08   		subl	$8, %ebx
 6973              	.LVL914:
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 6974              		.loc 1 336 0
 6975 060f 49C1E508 		salq	$8, %r13
 6976              	.LVL915:
 6977              	.LBE663:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 6978              		.loc 1 329 0
 6979 0613 83FB07   		cmpl	$7, %ebx
 6980 0616 7E54     		jle	.L681
 6981              	.LVL916:
 6982              	.L678:
 6983              	.LBB670:
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6984              		.loc 1 330 0
 6985 0618 4C89E9   		movq	%r13, %rcx
 6986 061b 48C1F910 		sarq	$16, %rcx
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6987              		.loc 1 332 0
 6988 061f 4883E801 		subq	$1, %rax
 6989              	.LVL917:
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6990              		.loc 1 330 0
 6991 0623 0FB6E9   		movzbl	%cl, %ebp
 6992              	.LVL918:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 6993              		.loc 1 332 0
 6994 0626 880A     		movb	%cl, (%rdx)
 6995 0628 75D6     		jne	.L777
 6996              	.LVL919:
 6997              	.LBB664:
 6998              	.LBB665:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 6999              		.loc 1 272 0
 7000 062a 4D8B6728 		movq	40(%r15), %r12
 7001              	.LVL920:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 7002              		.loc 1 274 0
 7003 062e 4C89FF   		movq	%r15, %rdi
 7004 0631 41FF5424 		call	*24(%r12)
 7004      18
 7005              	.LVL921:
 7006 0636 85C0     		testl	%eax, %eax
 7007 0638 0F84C2FE 		je	.L618
 7007      FFFF
 7008              	.LBE665:
 7009              	.LBE664:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 7010              		.loc 1 333 0
 7011 063e 81FDFF00 		cmpl	$255, %ebp
 7011      0000
 7012              	.LBB667:
 7013              	.LBB666:
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 7014              		.loc 1 277 0
 7015 0644 498B1424 		movq	(%r12), %rdx
 7016              	.LVL922:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 7017              		.loc 1 278 0
 7018 0648 498B4424 		movq	8(%r12), %rax
 7018      08
 7019              	.LVL923:
 7020              	.LBE666:
 7021              	.LBE667:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 7022              		.loc 1 333 0
 7023 064d 75BD     		jne	.L676
 7024              	.L776:
 7025              	.LVL924:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 7026              		.loc 1 334 0
 7027 064f 4883E801 		subq	$1, %rax
 7028              	.LVL925:
 7029 0653 C60200   		movb	$0, (%rdx)
 7030 0656 0F84B403 		je	.L677
 7030      0000
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 7031              		.loc 1 337 0
 7032 065c 83EB08   		subl	$8, %ebx
 7033              	.LVL926:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 7034              		.loc 1 334 0
 7035 065f 4883C201 		addq	$1, %rdx
 7036              	.LVL927:
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 7037              		.loc 1 336 0
 7038 0663 49C1E508 		salq	$8, %r13
 7039              	.LVL928:
 7040              	.LBE670:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 7041              		.loc 1 329 0
 7042 0667 83FB07   		cmpl	$7, %ebx
 7043 066a 7FAC     		jg	.L678
 7044              	.LVL929:
 7045              	.L681:
 7046              	.LBE662:
 7047              	.LBE661:
 7048              	.LBE694:
 7049              	.LBE702:
1043:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 7050              		.loc 1 1043 0 discriminator 2
 7051 066c 488B7424 		movq	80(%rsp), %rsi
 7051      50
 7052 0671 488B7C24 		movq	104(%rsp), %rdi
 7052      68
1034:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
 7053              		.loc 1 1034 0 discriminator 2
 7054 0676 83442448 		addl	$1, 72(%rsp)
 7054      01
 7055              	.LVL930:
 7056 067b 48834424 		addq	$4, 96(%rsp)
 7056      6004
1043:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 7057              		.loc 1 1043 0 discriminator 2
 7058 0681 488B0E   		movq	(%rsi), %rcx
 7059 0684 4883C608 		addq	$8, %rsi
 7060 0688 0FBF09   		movswl	(%rcx), %ecx
 7061 068b 48897424 		movq	%rsi, 80(%rsp)
 7061      50
 7062 0690 898CBC8C 		movl	%ecx, 140(%rsp,%rdi,4)
 7062      000000
1034:fltk-1.3.4-1/jpeg/jchuff.c ****     ci = cinfo->MCU_membership[blkn];
 7063              		.loc 1 1034 0 discriminator 2
 7064 0697 8B7C2448 		movl	72(%rsp), %edi
 7065              	.LVL931:
 7066 069b 4139BFA0 		cmpl	%edi, 416(%r15)
 7066      010000
 7067 06a2 0F8F1AFA 		jg	.L679
 7067      FFFF
 7068 06a8 4D89EE   		movq	%r13, %r14
 7069 06ab 4189DC   		movl	%ebx, %r12d
 7070              	.LVL932:
 7071              	.L621:
1047:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = state.free_in_buffer;
 7072              		.loc 1 1047 0
 7073 06ae 498B4F28 		movq	40(%r15), %rcx
1049:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7074              		.loc 1 1049 0
 7075 06b2 488B7424 		movq	88(%rsp), %rsi
 7075      58
 7076 06b7 4489A424 		movl	%r12d, 136(%rsp)
 7076      88000000 
 7077 06bf 4C89B424 		movq	%r14, 128(%rsp)
 7077      80000000 
1047:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->dest->free_in_buffer = state.free_in_buffer;
 7078              		.loc 1 1047 0
 7079 06c7 488911   		movq	%rdx, (%rcx)
1048:fltk-1.3.4-1/jpeg/jchuff.c ****   ASSIGN_STATE(entropy->saved, state.cur);
 7080              		.loc 1 1048 0
 7081 06ca 498B5728 		movq	40(%r15), %rdx
 7082              	.LVL933:
 7083 06ce 48894208 		movq	%rax, 8(%rdx)
 7084              	.LVL934:
1049:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7085              		.loc 1 1049 0
 7086 06d2 488B8424 		movq	136(%rsp), %rax
 7086      88000000 
 7087              	.LVL935:
 7088 06da 4C897618 		movq	%r14, 24(%rsi)
 7089              	.LVL936:
 7090 06de 48894620 		movq	%rax, 32(%rsi)
 7091 06e2 488B8424 		movq	144(%rsp), %rax
 7091      90000000 
 7092 06ea 48894628 		movq	%rax, 40(%rsi)
 7093 06ee 488B8424 		movq	152(%rsp), %rax
 7093      98000000 
 7094 06f6 48894630 		movq	%rax, 48(%rsi)
1052:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 7095              		.loc 1 1052 0
 7096 06fa 418B973C 		movl	316(%r15), %edx
 7096      010000
1061:fltk-1.3.4-1/jpeg/jchuff.c **** }
 7097              		.loc 1 1061 0
 7098 0701 B8010000 		movl	$1, %eax
 7098      00
1052:fltk-1.3.4-1/jpeg/jchuff.c ****     if (entropy->restarts_to_go == 0) {
 7099              		.loc 1 1052 0
 7100 0706 85D2     		testl	%edx, %edx
 7101 0708 0F84F4FD 		je	.L617
 7101      FFFF
1053:fltk-1.3.4-1/jpeg/jchuff.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 7102              		.loc 1 1053 0
 7103 070e 8B4638   		movl	56(%rsi), %eax
 7104 0711 85C0     		testl	%eax, %eax
 7105 0713 7512     		jne	.L680
1056:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 7106              		.loc 1 1056 0
 7107 0715 8B463C   		movl	60(%rsi), %eax
 7108 0718 89442408 		movl	%eax, 8(%rsp)
 7109 071c 83C001   		addl	$1, %eax
 7110 071f 83E007   		andl	$7, %eax
 7111 0722 89463C   		movl	%eax, 60(%rsi)
 7112 0725 89D0     		movl	%edx, %eax
 7113              	.L680:
1058:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 7114              		.loc 1 1058 0
 7115 0727 488B7424 		movq	88(%rsp), %rsi
 7115      58
 7116 072c 83E801   		subl	$1, %eax
 7117 072f 894638   		movl	%eax, 56(%rsi)
1061:fltk-1.3.4-1/jpeg/jchuff.c **** }
 7118              		.loc 1 1061 0
 7119 0732 B8010000 		movl	$1, %eax
 7119      00
 7120 0737 E9C6FDFF 		jmp	.L617
 7120      FF
 7121              	.LVL937:
 7122 073c 0F1F4000 		.p2align 4,,10
 7123              		.p2align 3
 7124              	.L663:
 7125              	.LBB703:
 7126              	.LBB695:
 7127              	.LBB674:
 7128              	.LBB645:
 7129              	.LBB644:
 7130              	.LBB641:
 7131              	.LBB642:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7132              		.loc 1 272 0
 7133 0740 498B5F28 		movq	40(%r15), %rbx
 7134              	.LVL938:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 7135              		.loc 1 274 0
 7136 0744 4C89FF   		movq	%r15, %rdi
 7137 0747 FF5318   		call	*24(%rbx)
 7138              	.LVL939:
 7139 074a 85C0     		testl	%eax, %eax
 7140 074c 0F84AEFD 		je	.L618
 7140      FFFF
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 7141              		.loc 1 277 0
 7142 0752 488B13   		movq	(%rbx), %rdx
 7143              	.LVL940:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 7144              		.loc 1 278 0
 7145 0755 488B4308 		movq	8(%rbx), %rax
 7146              	.LVL941:
 7147 0759 E98EFCFF 		jmp	.L662
 7147      FF
 7148              	.LVL942:
 7149              	.L669:
 7150              	.LBE642:
 7151              	.LBE641:
 7152              	.LBE644:
 7153              	.LBE645:
 7154              	.LBE674:
 7155              	.LBB675:
 7156              	.LBB658:
 7157              	.LBB657:
 7158              	.LBB654:
 7159              	.LBB655:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7160              		.loc 1 272 0
 7161 075e 498B5F28 		movq	40(%r15), %rbx
 7162              	.LVL943:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 7163              		.loc 1 274 0
 7164 0762 4C89FF   		movq	%r15, %rdi
 7165 0765 FF5318   		call	*24(%rbx)
 7166              	.LVL944:
 7167 0768 85C0     		testl	%eax, %eax
 7168 076a 0F8490FD 		je	.L618
 7168      FFFF
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 7169              		.loc 1 277 0
 7170 0770 488B13   		movq	(%rbx), %rdx
 7171              	.LVL945:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 7172              		.loc 1 278 0
 7173 0773 488B4308 		movq	8(%rbx), %rax
 7174              	.LVL946:
 7175 0777 E918FDFF 		jmp	.L668
 7175      FF
 7176              	.LVL947:
 7177              	.L761:
 7178              	.LBE655:
 7179              	.LBE654:
 7180              	.LBE657:
 7181              	.LBE658:
 7182              	.LBE675:
 7183              	.LBB676:
 7184              	.LBB620:
 316:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7185              		.loc 1 316 0
 7186 077c 498B3F   		movq	(%r15), %rdi
 7187 077f 48895424 		movq	%rdx, 48(%rsp)
 7187      30
 7188 0784 48894424 		movq	%rax, 40(%rsp)
 7188      28
 7189 0789 894C2420 		movl	%ecx, 32(%rsp)
 7190 078d C7472829 		movl	$41, 40(%rdi)
 7190      000000
 7191 0794 4D8B0F   		movq	(%r15), %r9
 7192 0797 4C89FF   		movq	%r15, %rdi
 7193 079a 41FF11   		call	*(%r9)
 7194              	.LVL948:
 7195 079d 488B5424 		movq	48(%rsp), %rdx
 7195      30
 7196 07a2 488B4424 		movq	40(%rsp), %rax
 7196      28
 7197 07a7 8B4C2420 		movl	32(%rsp), %ecx
 7198 07ab E9B2F9FF 		jmp	.L626
 7198      FF
 7199              	.LVL949:
 7200              	.L760:
 7201              	.LBE620:
 7202              	.LBE676:
 943:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7203              		.loc 1 943 0
 7204 07b0 498B0F   		movq	(%r15), %rcx
 7205              	.LVL950:
 7206 07b3 48895424 		movq	%rdx, 40(%rsp)
 7206      28
 7207 07b8 4C89FF   		movq	%r15, %rdi
 7208              	.LVL951:
 7209 07bb 48894424 		movq	%rax, 32(%rsp)
 7209      20
 7210 07c0 C7412806 		movl	$6, 40(%rcx)
 7210      000000
 7211              	.LVL952:
 7212 07c7 498B0F   		movq	(%r15), %rcx
 7213 07ca FF11     		call	*(%rcx)
 7214              	.LVL953:
 7215 07cc 488B4424 		movq	32(%rsp), %rax
 7215      20
 7216 07d1 488B5424 		movq	40(%rsp), %rdx
 7216      28
 7217 07d6 E96FF9FF 		jmp	.L624
 7217      FF
 7218              	.LVL954:
 7219              	.L759:
 930:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 7220              		.loc 1 930 0
 7221 07db 8D71FF   		leal	-1(%rcx), %esi
 7222              	.LVL955:
 927:fltk-1.3.4-1/jpeg/jchuff.c ****     /* For a negative input, want temp2 = bitwise complement of abs(input) */
 7223              		.loc 1 927 0
 7224 07de F7D9     		negl	%ecx
 7225              	.LVL956:
 930:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 7226              		.loc 1 930 0
 7227 07e0 89742418 		movl	%esi, 24(%rsp)
 7228              	.LVL957:
 7229 07e4 E948F9FF 		jmp	.L623
 7229      FF
 7230              	.LVL958:
 7231              	.L764:
 7232              	.LBB677:
 7233              	.LBB678:
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7234              		.loc 1 319 0
 7235 07e9 4489E1   		movl	%r12d, %ecx
 7236 07ec BE010000 		movl	$1, %esi
 7236      00
 322:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7237              		.loc 1 322 0
 7238 07f1 4401E3   		addl	%r12d, %ebx
 7239              	.LVL959:
 319:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7240              		.loc 1 319 0
 7241 07f4 48D3E6   		salq	%cl, %rsi
 7242 07f7 4889F1   		movq	%rsi, %rcx
 7243 07fa 8B742418 		movl	24(%rsp), %esi
 7244 07fe 4883E901 		subq	$1, %rcx
 7245 0802 21CE     		andl	%ecx, %esi
 7246              	.LVL960:
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7247              		.loc 1 327 0
 7248 0804 B9180000 		movl	$24, %ecx
 7248      00
 7249 0809 29D9     		subl	%ebx, %ecx
 7250 080b 48D3E6   		salq	%cl, %rsi
 7251              	.LVL961:
 7252 080e 4909F5   		orq	%rsi, %r13
 7253              	.LVL962:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 7254              		.loc 1 329 0
 7255 0811 83FB07   		cmpl	$7, %ebx
 7256 0814 7F26     		jg	.L641
 7257 0816 E9E7F9FF 		jmp	.L635
 7257      FF
 7258              	.LVL963:
 7259 081b 0F1F4400 		.p2align 4,,10
 7259      00
 7260              		.p2align 3
 7261              	.L779:
 7262              	.LBB679:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7263              		.loc 1 332 0
 7264 0820 4883C201 		addq	$1, %rdx
 7265              	.LVL964:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 7266              		.loc 1 333 0
 7267 0824 81FDFF00 		cmpl	$255, %ebp
 7267      0000
 7268 082a 7447     		je	.L778
 7269              	.LVL965:
 7270              	.L639:
 337:fltk-1.3.4-1/jpeg/jchuff.c ****   }
 7271              		.loc 1 337 0
 7272 082c 83EB08   		subl	$8, %ebx
 7273              	.LVL966:
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 7274              		.loc 1 336 0
 7275 082f 49C1E508 		salq	$8, %r13
 7276              	.LVL967:
 7277              	.LBE679:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 7278              		.loc 1 329 0
 7279 0833 83FB07   		cmpl	$7, %ebx
 7280 0836 0F8EC6F9 		jle	.L635
 7280      FFFF
 7281              	.L641:
 7282              	.LBB686:
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7283              		.loc 1 330 0
 7284 083c 4C89E9   		movq	%r13, %rcx
 7285 083f 48C1F910 		sarq	$16, %rcx
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7286              		.loc 1 332 0
 7287 0843 4883E801 		subq	$1, %rax
 7288              	.LVL968:
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7289              		.loc 1 330 0
 7290 0847 0FB6E9   		movzbl	%cl, %ebp
 7291              	.LVL969:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7292              		.loc 1 332 0
 7293 084a 880A     		movb	%cl, (%rdx)
 7294 084c 75D2     		jne	.L779
 7295              	.LVL970:
 7296              	.LBB680:
 7297              	.LBB681:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7298              		.loc 1 272 0
 7299 084e 4D8B6728 		movq	40(%r15), %r12
 7300              	.LVL971:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 7301              		.loc 1 274 0
 7302 0852 4C89FF   		movq	%r15, %rdi
 7303 0855 41FF5424 		call	*24(%r12)
 7303      18
 7304              	.LVL972:
 7305 085a 85C0     		testl	%eax, %eax
 7306 085c 0F849EFC 		je	.L618
 7306      FFFF
 7307              	.LBE681:
 7308              	.LBE680:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 7309              		.loc 1 333 0
 7310 0862 81FDFF00 		cmpl	$255, %ebp
 7310      0000
 7311              	.LBB683:
 7312              	.LBB682:
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 7313              		.loc 1 277 0
 7314 0868 498B1424 		movq	(%r12), %rdx
 7315              	.LVL973:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 7316              		.loc 1 278 0
 7317 086c 498B4424 		movq	8(%r12), %rax
 7317      08
 7318              	.LVL974:
 7319              	.LBE682:
 7320              	.LBE683:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 7321              		.loc 1 333 0
 7322 0871 75B9     		jne	.L639
 7323              	.L778:
 7324              	.LVL975:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 7325              		.loc 1 334 0
 7326 0873 4883E801 		subq	$1, %rax
 7327              	.LVL976:
 7328 0877 C60200   		movb	$0, (%rdx)
 7329 087a 7406     		je	.L640
 7330 087c 4883C201 		addq	$1, %rdx
 7331              	.LVL977:
 7332 0880 EBAA     		jmp	.L639
 7333              	.LVL978:
 7334              	.L640:
 7335              	.LBB684:
 7336              	.LBB685:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7337              		.loc 1 272 0
 7338 0882 498B6F28 		movq	40(%r15), %rbp
 7339              	.LVL979:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 7340              		.loc 1 274 0
 7341 0886 4C89FF   		movq	%r15, %rdi
 7342 0889 FF5518   		call	*24(%rbp)
 7343              	.LVL980:
 7344 088c 85C0     		testl	%eax, %eax
 7345 088e 0F846CFC 		je	.L618
 7345      FFFF
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 7346              		.loc 1 277 0
 7347 0894 488B5500 		movq	0(%rbp), %rdx
 7348              	.LVL981:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 7349              		.loc 1 278 0
 7350 0898 488B4508 		movq	8(%rbp), %rax
 7351              	.LVL982:
 7352 089c EB8E     		jmp	.L639
 7353              	.LVL983:
 7354              	.L769:
 7355              	.LBE685:
 7356              	.LBE684:
 7357              	.LBE686:
 7358              	.LBE678:
 7359              	.LBE677:
 7360              	.LBB687:
 7361              	.LBB646:
 316:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7362              		.loc 1 316 0
 7363 089e 498B3F   		movq	(%r15), %rdi
 7364              	.LVL984:
 7365 08a1 48895424 		movq	%rdx, 32(%rsp)
 7365      20
 7366 08a6 48894424 		movq	%rax, 24(%rsp)
 7366      18
 7367 08ab 894C2408 		movl	%ecx, 8(%rsp)
 7368 08af C7472829 		movl	$41, 40(%rdi)
 7368      000000
 7369 08b6 4D8B0F   		movq	(%r15), %r9
 7370 08b9 4C89FF   		movq	%r15, %rdi
 7371 08bc 41FF11   		call	*(%r9)
 7372              	.LVL985:
 7373 08bf 488B5424 		movq	32(%rsp), %rdx
 7373      20
 7374 08c4 488B4424 		movq	24(%rsp), %rax
 7374      18
 7375 08c9 8B4C2408 		movl	8(%rsp), %ecx
 7376 08cd E9DDFAFF 		jmp	.L658
 7376      FF
 7377              	.LVL986:
 7378              	.L768:
 7379              	.LBE646:
 7380              	.LBE687:
 974:fltk-1.3.4-1/jpeg/jchuff.c ****       }
 7381              		.loc 1 974 0
 7382 08d2 83EE01   		subl	$1, %esi
 972:fltk-1.3.4-1/jpeg/jchuff.c **** 	/* This code assumes we are on a two's complement machine */
 7383              		.loc 1 972 0
 7384 08d5 F7D9     		negl	%ecx
 7385              	.LVL987:
 974:fltk-1.3.4-1/jpeg/jchuff.c ****       }
 7386              		.loc 1 974 0
 7387 08d7 8974243C 		movl	%esi, 60(%rsp)
 7388              	.LVL988:
 7389 08db E968FAFF 		jmp	.L655
 7389      FF
 7390              	.LVL989:
 7391              	.L685:
 935:fltk-1.3.4-1/jpeg/jchuff.c ****     nbits++;
 7392              		.loc 1 935 0
 7393 08e0 C7442418 		movl	$0, 24(%rsp)
 7393      00000000 
 934:fltk-1.3.4-1/jpeg/jchuff.c ****   while (temp) {
 7394              		.loc 1 934 0
 7395 08e8 4531E4   		xorl	%r12d, %r12d
 7396 08eb E95AF8FF 		jmp	.L624
 7396      FF
 7397              	.LVL990:
 7398              	.L758:
 7399              	.LBE695:
 7400              	.LBE703:
1029:fltk-1.3.4-1/jpeg/jchuff.c **** 	return FALSE;
 7401              		.loc 1 1029 0
 7402 08f0 8B763C   		movl	60(%rsi), %esi
 7403              	.LVL991:
 7404              	.LBB704:
 7405              	.LBB705:
 7406              	.LBB706:
 7407              	.LBB707:
 7408              	.LBB708:
 7409              	.LBB709:
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7410              		.loc 1 327 0
 7411 08f3 B9180000 		movl	$24, %ecx
 7411      00
 7412 08f8 41B87F00 		movl	$127, %r8d
 7412      0000
 7413              	.LBE709:
 7414              	.LBE708:
 7415              	.LBE707:
 7416              	.LBE706:
 7417              	.LBE705:
 7418              	.LBE704:
1029:fltk-1.3.4-1/jpeg/jchuff.c **** 	return FALSE;
 7419              		.loc 1 1029 0
 7420 08fe 89742408 		movl	%esi, 8(%rsp)
 7421              	.LVL992:
 7422              	.LBB735:
 7423              	.LBB733:
 7424              	.LBB727:
 7425              	.LBB725:
 7426              	.LBB724:
 7427              	.LBB723:
 322:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7428              		.loc 1 322 0
 7429 0902 418D7424 		leal	7(%r12), %esi
 7429      07
 7430              	.LVL993:
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7431              		.loc 1 327 0
 7432 0907 29F1     		subl	%esi, %ecx
 7433 0909 49D3E0   		salq	%cl, %r8
 7434 090c 4909F8   		orq	%rdi, %r8
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 7435              		.loc 1 329 0
 7436 090f 83FE07   		cmpl	$7, %esi
 327:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7437              		.loc 1 327 0
 7438 0912 4C89C5   		movq	%r8, %rbp
 7439              	.LVL994:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 7440              		.loc 1 329 0
 7441 0915 0F8E8C00 		jle	.L609
 7441      0000
 7442 091b 89F3     		movl	%esi, %ebx
 7443 091d EB19     		jmp	.L614
 7444              	.LVL995:
 7445              	.L781:
 7446              	.LBB710:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7447              		.loc 1 332 0
 7448 091f 4883C201 		addq	$1, %rdx
 7449              	.LVL996:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 7450              		.loc 1 333 0
 7451 0923 4181FEFF 		cmpl	$255, %r14d
 7451      000000
 7452 092a 7445     		je	.L780
 7453              	.L613:
 7454 092c 83EB08   		subl	$8, %ebx
 7455              	.LVL997:
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 7456              		.loc 1 336 0
 7457 092f 48C1E508 		salq	$8, %rbp
 7458              	.LVL998:
 7459              	.LBE710:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 7460              		.loc 1 329 0
 7461 0933 83FB07   		cmpl	$7, %ebx
 7462 0936 766F     		jbe	.L609
 7463              	.LVL999:
 7464              	.L614:
 7465              	.LBB721:
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7466              		.loc 1 330 0
 7467 0938 4889E9   		movq	%rbp, %rcx
 7468 093b 48C1F910 		sarq	$16, %rcx
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7469              		.loc 1 332 0
 7470 093f 4883E801 		subq	$1, %rax
 7471              	.LVL1000:
 330:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7472              		.loc 1 330 0
 7473 0943 440FB6F1 		movzbl	%cl, %r14d
 7474              	.LVL1001:
 332:fltk-1.3.4-1/jpeg/jchuff.c ****     if (c == 0xFF) {		/* need to stuff a zero byte? */
 7475              		.loc 1 332 0
 7476 0947 880A     		movb	%cl, (%rdx)
 7477 0949 75D4     		jne	.L781
 7478              	.LVL1002:
 7479              	.LBB711:
 7480              	.LBB712:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7481              		.loc 1 272 0
 7482 094b 4D8B6728 		movq	40(%r15), %r12
 7483              	.LVL1003:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 7484              		.loc 1 274 0
 7485 094f 4C89FF   		movq	%r15, %rdi
 7486 0952 41FF5424 		call	*24(%r12)
 7486      18
 7487              	.LVL1004:
 7488 0957 85C0     		testl	%eax, %eax
 7489 0959 0F84A1FB 		je	.L618
 7489      FFFF
 7490              	.LBE712:
 7491              	.LBE711:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 7492              		.loc 1 333 0
 7493 095f 4181FEFF 		cmpl	$255, %r14d
 7493      000000
 7494              	.LBB714:
 7495              	.LBB713:
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 7496              		.loc 1 277 0
 7497 0966 498B1424 		movq	(%r12), %rdx
 7498              	.LVL1005:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 7499              		.loc 1 278 0
 7500 096a 498B4424 		movq	8(%r12), %rax
 7500      08
 7501              	.LVL1006:
 7502              	.LBE713:
 7503              	.LBE714:
 333:fltk-1.3.4-1/jpeg/jchuff.c ****       emit_byte_s(state, 0, return FALSE);
 7504              		.loc 1 333 0
 7505 096f 75BB     		jne	.L613
 7506              	.L780:
 7507              	.LVL1007:
 334:fltk-1.3.4-1/jpeg/jchuff.c ****     }
 7508              		.loc 1 334 0
 7509 0971 C60200   		movb	$0, (%rdx)
 7510 0974 4883C201 		addq	$1, %rdx
 7511              	.LVL1008:
 7512 0978 4883E801 		subq	$1, %rax
 7513              	.LVL1009:
 7514 097c 75AE     		jne	.L613
 7515              	.LVL1010:
 7516              	.LBB715:
 7517              	.LBB716:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7518              		.loc 1 272 0
 7519 097e 4D8B6728 		movq	40(%r15), %r12
 7520              	.LVL1011:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 7521              		.loc 1 274 0
 7522 0982 4C89FF   		movq	%r15, %rdi
 7523 0985 41FF5424 		call	*24(%r12)
 7523      18
 7524              	.LVL1012:
 7525 098a 85C0     		testl	%eax, %eax
 7526 098c 0F846EFB 		je	.L618
 7526      FFFF
 7527 0992 83EB08   		subl	$8, %ebx
 7528              	.LVL1013:
 7529              	.LBE716:
 7530              	.LBE715:
 336:fltk-1.3.4-1/jpeg/jchuff.c ****     put_bits -= 8;
 7531              		.loc 1 336 0
 7532 0995 48C1E508 		salq	$8, %rbp
 7533              	.LVL1014:
 7534              	.LBB719:
 7535              	.LBB717:
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 7536              		.loc 1 277 0
 7537 0999 498B1424 		movq	(%r12), %rdx
 7538              	.LVL1015:
 7539              	.LBE717:
 7540              	.LBE719:
 7541              	.LBE721:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 7542              		.loc 1 329 0
 7543 099d 83FB07   		cmpl	$7, %ebx
 7544              	.LBB722:
 7545              	.LBB720:
 7546              	.LBB718:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 7547              		.loc 1 278 0
 7548 09a0 498B4424 		movq	8(%r12), %rax
 7548      08
 7549              	.LVL1016:
 7550              	.LBE718:
 7551              	.LBE720:
 7552              	.LBE722:
 329:fltk-1.3.4-1/jpeg/jchuff.c ****     int c = (int) ((put_buffer >> 16) & 0xFF);
 7553              		.loc 1 329 0
 7554 09a5 7791     		ja	.L614
 7555              	.LVL1017:
 7556              	.L609:
 7557              	.LBE723:
 7558              	.LBE724:
 7559              	.LBE725:
 7560              	.LBE727:
 502:fltk-1.3.4-1/jpeg/jchuff.c ****   emit_byte_s(state, JPEG_RST0 + restart_num, return FALSE);
 7561              		.loc 1 502 0
 7562 09a7 4883E801 		subq	$1, %rax
 7563              	.LVL1018:
 7564 09ab 488D4A01 		leaq	1(%rdx), %rcx
 7565              	.LVL1019:
 7566 09af C602FF   		movb	$-1, (%rdx)
 7567 09b2 0F84C500 		je	.L782
 7567      0000
 7568              	.L616:
 7569              	.LVL1020:
 503:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7570              		.loc 1 503 0
 7571 09b8 440FB664 		movzbl	8(%rsp), %r12d
 7571      2408
 7572 09be 488D5101 		leaq	1(%rcx), %rdx
 7573              	.LVL1021:
 7574 09c2 4183EC30 		subl	$48, %r12d
 7575 09c6 4883E801 		subq	$1, %rax
 7576              	.LVL1022:
 7577 09ca 448821   		movb	%r12b, (%rcx)
 7578 09cd 0F848C00 		je	.L783
 7578      0000
 7579              	.L619:
 7580              	.LVL1023:
 506:fltk-1.3.4-1/jpeg/jchuff.c ****     state->cur.last_dc_val[ci] = 0;
 7581              		.loc 1 506 0
 7582 09d3 418BB774 		movl	372(%r15), %esi
 7582      010000
 7583 09da 85F6     		testl	%esi, %esi
 7584 09dc 7E1D     		jle	.L684
 7585 09de 488D4C24 		leaq	112(%rsp), %rcx
 7585      70
 7586              	.LVL1024:
 7587 09e3 83EE01   		subl	$1, %esi
 7588 09e6 488D74B1 		leaq	4(%rcx,%rsi,4), %rsi
 7588      04
 7589              	.LVL1025:
 7590              	.L620:
 507:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7591              		.loc 1 507 0
 7592 09eb C7411C00 		movl	$0, 28(%rcx)
 7592      000000
 7593 09f2 4883C104 		addq	$4, %rcx
 506:fltk-1.3.4-1/jpeg/jchuff.c ****     state->cur.last_dc_val[ci] = 0;
 7594              		.loc 1 506 0
 7595 09f6 4839F1   		cmpq	%rsi, %rcx
 7596 09f9 75F0     		jne	.L620
 7597              	.L684:
 7598              	.LBB728:
 7599              	.LBB726:
 396:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 7600              		.loc 1 396 0
 7601 09fb 4531E4   		xorl	%r12d, %r12d
 395:fltk-1.3.4-1/jpeg/jchuff.c ****   state->cur.put_bits = 0;
 7602              		.loc 1 395 0
 7603 09fe 4531F6   		xorl	%r14d, %r14d
 7604 0a01 E98EF6FF 		jmp	.L608
 7604      FF
 7605              	.LVL1026:
 7606 0a06 662E0F1F 		.p2align 4,,10
 7606      84000000 
 7606      0000
 7607              		.p2align 3
 7608              	.L677:
 7609              	.LBE726:
 7610              	.LBE728:
 7611              	.LBE733:
 7612              	.LBE735:
 7613              	.LBB736:
 7614              	.LBB696:
 7615              	.LBB688:
 7616              	.LBB672:
 7617              	.LBB671:
 7618              	.LBB668:
 7619              	.LBB669:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7620              		.loc 1 272 0
 7621 0a10 498B6F28 		movq	40(%r15), %rbp
 7622              	.LVL1027:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 7623              		.loc 1 274 0
 7624 0a14 4C89FF   		movq	%r15, %rdi
 7625 0a17 FF5518   		call	*24(%rbp)
 7626              	.LVL1028:
 7627 0a1a 85C0     		testl	%eax, %eax
 7628 0a1c 0F84DEFA 		je	.L618
 7628      FFFF
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 7629              		.loc 1 277 0
 7630 0a22 488B5500 		movq	0(%rbp), %rdx
 7631              	.LVL1029:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 7632              		.loc 1 278 0
 7633 0a26 488B4508 		movq	8(%rbp), %rax
 7634              	.LVL1030:
 7635 0a2a E9DDFBFF 		jmp	.L676
 7635      FF
 7636              	.LVL1031:
 7637              	.L774:
 7638              	.LBE669:
 7639              	.LBE668:
 7640              	.LBE671:
 7641              	.LBE672:
 7642              	.LBE688:
 7643              	.LBE696:
 7644              	.LBE736:
1062:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7645              		.loc 1 1062 0
 7646 0a2f E8000000 		call	__stack_chk_fail
 7646      00
 7647              	.LVL1032:
 7648              	.L775:
 7649              	.LBB737:
 7650              	.LBB697:
 7651              	.LBB689:
 7652              	.LBB673:
 316:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7653              		.loc 1 316 0
 7654 0a34 498B0F   		movq	(%r15), %rcx
 7655 0a37 48895424 		movq	%rdx, 16(%rsp)
 7655      10
 7656              	.LVL1033:
 7657 0a3c 4C89FF   		movq	%r15, %rdi
 7658 0a3f 48894424 		movq	%rax, 8(%rsp)
 7658      08
 7659 0a44 C7412829 		movl	$41, 40(%rcx)
 7659      000000
 7660 0a4b 498B0F   		movq	(%r15), %rcx
 7661 0a4e FF11     		call	*(%rcx)
 7662              	.LVL1034:
 7663 0a50 488B5424 		movq	16(%rsp), %rdx
 7663      10
 7664 0a55 488B4424 		movq	8(%rsp), %rax
 7664      08
 7665 0a5a E978FBFF 		jmp	.L672
 7665      FF
 7666              	.LVL1035:
 7667              	.L783:
 7668              	.LBE673:
 7669              	.LBE689:
 7670              	.LBE697:
 7671              	.LBE737:
 7672              	.LBB738:
 7673              	.LBB734:
 7674              	.LBB729:
 7675              	.LBB730:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7676              		.loc 1 272 0
 7677 0a5f 498B5F28 		movq	40(%r15), %rbx
 7678              	.LVL1036:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 7679              		.loc 1 274 0
 7680 0a63 4C89FF   		movq	%r15, %rdi
 7681 0a66 FF5318   		call	*24(%rbx)
 7682              	.LVL1037:
 7683 0a69 85C0     		testl	%eax, %eax
 7684 0a6b 0F848FFA 		je	.L618
 7684      FFFF
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 7685              		.loc 1 277 0
 7686 0a71 488B13   		movq	(%rbx), %rdx
 7687              	.LVL1038:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 7688              		.loc 1 278 0
 7689 0a74 488B4308 		movq	8(%rbx), %rax
 7690              	.LVL1039:
 7691 0a78 E956FFFF 		jmp	.L619
 7691      FF
 7692              	.LVL1040:
 7693              	.L782:
 7694              	.LBE730:
 7695              	.LBE729:
 7696              	.LBB731:
 7697              	.LBB732:
 272:fltk-1.3.4-1/jpeg/jchuff.c **** 
 7698              		.loc 1 272 0
 7699 0a7d 498B5F28 		movq	40(%r15), %rbx
 7700              	.LVL1041:
 274:fltk-1.3.4-1/jpeg/jchuff.c ****     return FALSE;
 7701              		.loc 1 274 0
 7702 0a81 4C89FF   		movq	%r15, %rdi
 7703 0a84 FF5318   		call	*24(%rbx)
 7704              	.LVL1042:
 7705 0a87 85C0     		testl	%eax, %eax
 7706 0a89 0F8471FA 		je	.L618
 7706      FFFF
 277:fltk-1.3.4-1/jpeg/jchuff.c ****   state->free_in_buffer = dest->free_in_buffer;
 7707              		.loc 1 277 0
 7708 0a8f 488B0B   		movq	(%rbx), %rcx
 7709              	.LVL1043:
 278:fltk-1.3.4-1/jpeg/jchuff.c ****   return TRUE;
 7710              		.loc 1 278 0
 7711 0a92 488B4308 		movq	8(%rbx), %rax
 7712              	.LVL1044:
 7713 0a96 E91DFFFF 		jmp	.L616
 7713      FF
 7714              	.LBE732:
 7715              	.LBE731:
 7716              	.LBE734:
 7717              	.LBE738:
 7718              		.cfi_endproc
 7719              	.LFE79:
 7721              		.section	.text.unlikely.encode_mcu_huff
 7722              	.LCOLDE14:
 7723              		.section	.text.encode_mcu_huff
 7724              	.LHOTE14:
 7725              		.section	.text.unlikely.jinit_huff_encoder,"ax",@progbits
 7726              	.LCOLDB15:
 7727              		.section	.text.jinit_huff_encoder,"ax",@progbits
 7728              	.LHOTB15:
 7729              		.p2align 4,,15
 7730              		.globl	jinit_huff_encoder
 7732              	jinit_huff_encoder:
 7733              	.LFB86:
1547:fltk-1.3.4-1/jpeg/jchuff.c **** 
1548:fltk-1.3.4-1/jpeg/jchuff.c **** 
1549:fltk-1.3.4-1/jpeg/jchuff.c **** /*
1550:fltk-1.3.4-1/jpeg/jchuff.c ****  * Module initialization routine for Huffman entropy encoding.
1551:fltk-1.3.4-1/jpeg/jchuff.c ****  */
1552:fltk-1.3.4-1/jpeg/jchuff.c **** 
1553:fltk-1.3.4-1/jpeg/jchuff.c **** GLOBAL(void)
1554:fltk-1.3.4-1/jpeg/jchuff.c **** jinit_huff_encoder (j_compress_ptr cinfo)
1555:fltk-1.3.4-1/jpeg/jchuff.c **** {
 7734              		.loc 1 1555 0
 7735              		.cfi_startproc
 7736              	.LVL1045:
1556:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy;
1557:fltk-1.3.4-1/jpeg/jchuff.c ****   int i;
1558:fltk-1.3.4-1/jpeg/jchuff.c **** 
1559:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy = (huff_entropy_ptr)
1560:fltk-1.3.4-1/jpeg/jchuff.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 7737              		.loc 1 1560 0
 7738 0000 488B4708 		movq	8(%rdi), %rax
1555:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy;
 7739              		.loc 1 1555 0
 7740 0004 53       		pushq	%rbx
 7741              		.cfi_def_cfa_offset 16
 7742              		.cfi_offset 3, -16
1559:fltk-1.3.4-1/jpeg/jchuff.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 7743              		.loc 1 1559 0
 7744 0005 BAF80000 		movl	$248, %edx
 7744      00
1555:fltk-1.3.4-1/jpeg/jchuff.c ****   huff_entropy_ptr entropy;
 7745              		.loc 1 1555 0
 7746 000a 4889FB   		movq	%rdi, %rbx
1559:fltk-1.3.4-1/jpeg/jchuff.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 7747              		.loc 1 1559 0
 7748 000d BE010000 		movl	$1, %esi
 7748      00
 7749 0012 FF10     		call	*(%rax)
 7750              	.LVL1046:
 7751 0014 488D5060 		leaq	96(%rax), %rdx
 7752 0018 488D8880 		leaq	128(%rax), %rcx
 7752      000000
1561:fltk-1.3.4-1/jpeg/jchuff.c **** 				SIZEOF(huff_entropy_encoder));
1562:fltk-1.3.4-1/jpeg/jchuff.c ****   cinfo->entropy = &entropy->pub;
 7753              		.loc 1 1562 0
 7754 001f 48898330 		movq	%rax, 560(%rbx)
 7754      020000
1563:fltk-1.3.4-1/jpeg/jchuff.c ****   entropy->pub.start_pass = start_pass_huff;
 7755              		.loc 1 1563 0
 7756 0026 48C70000 		movq	$start_pass_huff, (%rax)
 7756      000000
 7757              	.LVL1047:
 7758              	.L785:
1564:fltk-1.3.4-1/jpeg/jchuff.c **** 
1565:fltk-1.3.4-1/jpeg/jchuff.c ****   /* Mark tables unallocated */
1566:fltk-1.3.4-1/jpeg/jchuff.c ****   for (i = 0; i < NUM_HUFF_TBLS; i++) {
1567:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 7759              		.loc 1 1567 0 discriminator 3
 7760 002d 48C70200 		movq	$0, (%rdx)
 7760      000000
 7761 0034 48C742E0 		movq	$0, -32(%rdx)
 7761      00000000 
 7762 003c 4883C208 		addq	$8, %rdx
1568:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->dc_count_ptrs[i] = entropy->ac_count_ptrs[i] = NULL;
 7763              		.loc 1 1568 0 discriminator 3
 7764 0040 48C74238 		movq	$0, 56(%rdx)
 7764      00000000 
 7765 0048 48C74218 		movq	$0, 24(%rdx)
 7765      00000000 
1566:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 7766              		.loc 1 1566 0 discriminator 3
 7767 0050 4839CA   		cmpq	%rcx, %rdx
 7768 0053 75D8     		jne	.L785
1569:fltk-1.3.4-1/jpeg/jchuff.c ****   }
1570:fltk-1.3.4-1/jpeg/jchuff.c **** 
1571:fltk-1.3.4-1/jpeg/jchuff.c ****   if (cinfo->progressive_mode)
 7769              		.loc 1 1571 0
 7770 0055 8B935C01 		movl	348(%rbx), %edx
 7770      0000
 7771 005b 85D2     		testl	%edx, %edx
 7772 005d 740B     		je	.L784
1572:fltk-1.3.4-1/jpeg/jchuff.c ****     entropy->bit_buffer = NULL;	/* needed only in AC refinement scan */
 7773              		.loc 1 1572 0
 7774 005f 48C780F0 		movq	$0, 240(%rax)
 7774      00000000 
 7774      000000
 7775              	.L784:
1573:fltk-1.3.4-1/jpeg/jchuff.c **** }
 7776              		.loc 1 1573 0
 7777 006a 5B       		popq	%rbx
 7778              		.cfi_def_cfa_offset 8
 7779              	.LVL1048:
 7780 006b C3       		ret
 7781              		.cfi_endproc
 7782              	.LFE86:
 7784              		.section	.text.unlikely.jinit_huff_encoder
 7785              	.LCOLDE15:
 7786              		.section	.text.jinit_huff_encoder
 7787              	.LHOTE15:
 7788              		.text
 7789              	.Letext0:
 7790              		.section	.text.unlikely.dump_buffer_e
 7791              	.Letext_cold0:
 7792              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 7793              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 7794              		.file 5 "/usr/include/libio.h"
 7795              		.file 6 "fltk-1.3.4-1/jpeg/jmorecfg.h"
 7796              		.file 7 "fltk-1.3.4-1/jpeg/jpeglib.h"
 7797              		.file 8 "fltk-1.3.4-1/jpeg/jpegint.h"
 7798              		.file 9 "fltk-1.3.4-1/jpeg/jerror.h"
 7799              		.file 10 "/usr/include/stdio.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 jchuff.c
     /tmp/ccs0XlQE.s:13     .text.dump_buffer_e:0000000000000000 dump_buffer_e
     /tmp/ccs0XlQE.s:76     .text.encode_mcu_gather:0000000000000000 encode_mcu_gather
     /tmp/ccs0XlQE.s:428    .text.jpeg_make_c_derived_tbl:0000000000000000 jpeg_make_c_derived_tbl
     /tmp/ccs0XlQE.s:827    .text.start_pass_huff:0000000000000000 start_pass_huff
     /tmp/ccs0XlQE.s:5346   .text.finish_pass_gather:0000000000000000 finish_pass_gather
     /tmp/ccs0XlQE.s:2608   .text.encode_mcu_DC_first:0000000000000000 encode_mcu_DC_first
     /tmp/ccs0XlQE.s:3477   .text.encode_mcu_AC_first:0000000000000000 encode_mcu_AC_first
     /tmp/ccs0XlQE.s:5554   .text.finish_pass_huff:0000000000000000 finish_pass_huff
     /tmp/ccs0XlQE.s:6022   .text.encode_mcu_huff:0000000000000000 encode_mcu_huff
     /tmp/ccs0XlQE.s:3192   .text.encode_mcu_DC_refine:0000000000000000 encode_mcu_DC_refine
     /tmp/ccs0XlQE.s:4319   .text.encode_mcu_AC_refine:0000000000000000 encode_mcu_AC_refine
     /tmp/ccs0XlQE.s:1205   .text.jpeg_gen_optimal_table:0000000000000000 jpeg_gen_optimal_table
     /tmp/ccs0XlQE.s:1640   .text.emit_buffered_bits.part.2:0000000000000000 emit_buffered_bits.part.2
     /tmp/ccs0XlQE.s:1854   .text.emit_eobrun:0000000000000000 emit_eobrun
     /tmp/ccs0XlQE.s:2354   .text.emit_restart_e:0000000000000000 emit_restart_e
     /tmp/ccs0XlQE.s:7732   .text.jinit_huff_encoder:0000000000000000 jinit_huff_encoder
                           .group:0000000000000000 wm4.0.cf9695abff4f49bdfe00dc4091904acd
                           .group:0000000000000000 wm4.stdcpredef.h.19.bf2bf6c5fb087dfb5ef2d2297c2795de
                           .group:0000000000000000 wm4.jconfig.h.10.247fc3ff67998f3074970b1373c70333
                           .group:0000000000000000 wm4.features.h.19.24da27e0a4d0d521fd057013d982b8b5
                           .group:0000000000000000 wm4.cdefs.h.19.56613e71f285ebad825b69b151170a81
                           .group:0000000000000000 wm4.wordsize.h.4.256e8fdbd37801980286acdbc40d0280
                           .group:0000000000000000 wm4.cdefs.h.432.619afd0aac7c4b439843706c1b28ddea
                           .group:0000000000000000 wm4.stubs64.h.10.918ceb5fa58268542bf143e4c1efbcf3
                           .group:0000000000000000 wm4.stdlib.h.27.59e2586c75bdbcb991b248ad7257b993
                           .group:0000000000000000 wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1
                           .group:0000000000000000 wm4.waitflags.h.25.e401b8bcfee800b540b27abd7cc78de9
                           .group:0000000000000000 wm4.waitstatus.h.28.93f167f49d64e2b9b99f98d1162a93bf
                           .group:0000000000000000 wm4.endian.h.19.ff00c9c0f5e9f9a9719c5de76ace57b4
                           .group:0000000000000000 wm4.endian.h.41.24cced64aef71195a51d4daa8e4f4a95
                           .group:0000000000000000 wm4.types.h.89.468e2451361e3b92f048f6cad51690ff
                           .group:0000000000000000 wm4.typesizes.h.24.40eb69a6270178f15d1bf3d7b6635a8b
                           .group:0000000000000000 wm4.byteswap.h.38.11ee5fdc0f6cc53a16c505b9233cecef
                           .group:0000000000000000 wm4.endian.h.63.97272d7c64d5db8020003b32e9289502
                           .group:0000000000000000 wm4.waitstatus.h.99.408b6270fa6eb71377201a241ef15f79
                           .group:0000000000000000 wm4.stdlib.h.50.84aeca2ac6f37d40e1e9b3cef757ba2d
                           .group:0000000000000000 wm4.types.h.23.f6dcbaa72f8f71361acef09804d45a5e
                           .group:0000000000000000 wm4.time.h.53.beb46e650cd406cb917b6b96b45e640a
                           .group:0000000000000000 wm4.stddef.h.238.847b6907dabda77be90a9ab7ad789e2e
                           .group:0000000000000000 wm4.types.h.187.bd5a05039b505b3620e6973f1b2ffeb1
                           .group:0000000000000000 wm4.select.h.28.eb2f3debdbcffd1442ebddaebc4fb6ff
                           .group:0000000000000000 wm4.sigset.h.20.f36413b6d2364ad847d3db53fb03e683
                           .group:0000000000000000 wm4.select.h.36.f76c3b9e55c871743863013cc4cc14c9
                           .group:0000000000000000 wm4.time.h.66.e70ce69790c975f0efb369340c432e0b
                           .group:0000000000000000 wm4.time.h.25.ae5284cdff565e87a9198d819340325d
                           .group:0000000000000000 wm4.select.h.49.e9d2041e5035cc68ebd1a20f7dbc8514
                           .group:0000000000000000 wm4.select2.h.27.f95f2ab0ffee66dc1b6575014894b21a
                           .group:0000000000000000 wm4.sysmacros.h.20.8a0c33ff175cd9b434a86c0aaa36f0a2
                           .group:0000000000000000 wm4.types.h.229.67b3f66bd74b06b451caec392a72a945
                           .group:0000000000000000 wm4.pthreadtypes.h.25.6892b1493314fcf446bbc76e7362acba
                           .group:0000000000000000 wm4.alloca.h.19.edefa922a76c1cbaaf1e416903ba2d1c
                           .group:0000000000000000 wm4.alloca.h.29.156e12058824cc23d961c4d3b13031f6
                           .group:0000000000000000 wm4.stdio.h.26.4719156f1aea2bb9662fd6c582dc9a4c
                           .group:0000000000000000 wm4.stddef.h.238.04cc7214bceba497b20d15c10fd97511
                           .group:0000000000000000 wm4.stdio.h.36.2dd12c1fd035242ad5cfd0152a01be5a
                           .group:0000000000000000 wm4._G_config.h.5.b0f37d9e474454cf6e459063458db32f
                           .group:0000000000000000 wm4.wchar.h.80.eea3eba2d2a17aace9470a8e0d8218dc
                           .group:0000000000000000 wm4._G_config.h.46.5187c97b14fd664662cb32e6b94fc49e
                           .group:0000000000000000 wm4.libio.h.33.a775b9ecae273f33bc59931e9891e4ca
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.libio.h.51.dab170798ec1df48c625aea7c30e1b63
                           .group:0000000000000000 wm4.stdio.h.80.17b7dd1ca72d8a61987532cb1d80194a
                           .group:0000000000000000 wm4.stdio_lim.h.23.557290a6cddeba0587f574f29e3a5fb9
                           .group:0000000000000000 wm4.stdio.h.172.df21df34a7396d7da2e08f9b617d582f
                           .group:0000000000000000 wm4.stdio.h.26.cae64f7ada9bb8327a89dba6a5e93655
                           .group:0000000000000000 wm4.string.h.23.8394011d5995a16f15d67d04e84a1d69
                           .group:0000000000000000 wm4.string.h.24.1b0dc67418e7128d207285861439c2f8
                           .group:0000000000000000 wm4.string2.h.45.00535b99420fc3014c2da41d6645330d
                           .group:0000000000000000 wm4.string3.h.31.0c4b9301b754a2db05eaafef869657d2
                           .group:0000000000000000 wm4.jinclude.h.67.b19f941ec97c4845fa4609292c7e2db4
                           .group:0000000000000000 wm4.jmorecfg.h.33.3b4c5f9cc07b3737823b06caf24d5b05
                           .group:0000000000000000 wm4.jpeglib.h.40.4f111c27252a38df39328d65454e82f4
                           .group:0000000000000000 wm4.jpegint.h.26.5219ef5d4e4921371d38e77b6091fd20
                           .group:0000000000000000 wm4.jerror.h.25.1dbd8674e70ab5215bc0037320e5c2a2

UNDEFINED SYMBOLS
__stack_chk_fail
jpeg_alloc_huff_table
