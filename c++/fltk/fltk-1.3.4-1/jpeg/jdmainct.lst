   1              		.file	"jdmainct.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.process_data_simple_main,"ax",@progbits
   5              		.p2align 4
   7              	process_data_simple_main:
   8              	.LVL0:
   9              	.LFB56:
  10              		.file 1 "fltk-1.3.4-1/jpeg/jdmainct.c"
   1:fltk-1.3.4-1/jpeg/jdmainct.c **** /*
   2:fltk-1.3.4-1/jpeg/jdmainct.c ****  * jdmainct.c
   3:fltk-1.3.4-1/jpeg/jdmainct.c ****  *
   4:fltk-1.3.4-1/jpeg/jdmainct.c ****  * Copyright (C) 1994-1996, Thomas G. Lane.
   5:fltk-1.3.4-1/jpeg/jdmainct.c ****  * Modified 2002-2012 by Guido Vollbeding.
   6:fltk-1.3.4-1/jpeg/jdmainct.c ****  * This file is part of the Independent JPEG Group's software.
   7:fltk-1.3.4-1/jpeg/jdmainct.c ****  * For conditions of distribution and use, see the accompanying README file.
   8:fltk-1.3.4-1/jpeg/jdmainct.c ****  *
   9:fltk-1.3.4-1/jpeg/jdmainct.c ****  * This file contains the main buffer controller for decompression.
  10:fltk-1.3.4-1/jpeg/jdmainct.c ****  * The main buffer lies between the JPEG decompressor proper and the
  11:fltk-1.3.4-1/jpeg/jdmainct.c ****  * post-processor; it holds downsampled data in the JPEG colorspace.
  12:fltk-1.3.4-1/jpeg/jdmainct.c ****  *
  13:fltk-1.3.4-1/jpeg/jdmainct.c ****  * Note that this code is bypassed in raw-data mode, since the application
  14:fltk-1.3.4-1/jpeg/jdmainct.c ****  * supplies the equivalent of the main buffer in that case.
  15:fltk-1.3.4-1/jpeg/jdmainct.c ****  */
  16:fltk-1.3.4-1/jpeg/jdmainct.c **** 
  17:fltk-1.3.4-1/jpeg/jdmainct.c **** #define JPEG_INTERNALS
  18:fltk-1.3.4-1/jpeg/jdmainct.c **** #include "jinclude.h"
  19:fltk-1.3.4-1/jpeg/jdmainct.c **** #include "jpeglib.h"
  20:fltk-1.3.4-1/jpeg/jdmainct.c **** 
  21:fltk-1.3.4-1/jpeg/jdmainct.c **** 
  22:fltk-1.3.4-1/jpeg/jdmainct.c **** /*
  23:fltk-1.3.4-1/jpeg/jdmainct.c ****  * In the current system design, the main buffer need never be a full-image
  24:fltk-1.3.4-1/jpeg/jdmainct.c ****  * buffer; any full-height buffers will be found inside the coefficient or
  25:fltk-1.3.4-1/jpeg/jdmainct.c ****  * postprocessing controllers.  Nonetheless, the main controller is not
  26:fltk-1.3.4-1/jpeg/jdmainct.c ****  * trivial.  Its responsibility is to provide context rows for upsampling/
  27:fltk-1.3.4-1/jpeg/jdmainct.c ****  * rescaling, and doing this in an efficient fashion is a bit tricky.
  28:fltk-1.3.4-1/jpeg/jdmainct.c ****  *
  29:fltk-1.3.4-1/jpeg/jdmainct.c ****  * Postprocessor input data is counted in "row groups".  A row group
  30:fltk-1.3.4-1/jpeg/jdmainct.c ****  * is defined to be (v_samp_factor * DCT_scaled_size / min_DCT_scaled_size)
  31:fltk-1.3.4-1/jpeg/jdmainct.c ****  * sample rows of each component.  (We require DCT_scaled_size values to be
  32:fltk-1.3.4-1/jpeg/jdmainct.c ****  * chosen such that these numbers are integers.  In practice DCT_scaled_size
  33:fltk-1.3.4-1/jpeg/jdmainct.c ****  * values will likely be powers of two, so we actually have the stronger
  34:fltk-1.3.4-1/jpeg/jdmainct.c ****  * condition that DCT_scaled_size / min_DCT_scaled_size is an integer.)
  35:fltk-1.3.4-1/jpeg/jdmainct.c ****  * Upsampling will typically produce max_v_samp_factor pixel rows from each
  36:fltk-1.3.4-1/jpeg/jdmainct.c ****  * row group (times any additional scale factor that the upsampler is
  37:fltk-1.3.4-1/jpeg/jdmainct.c ****  * applying).
  38:fltk-1.3.4-1/jpeg/jdmainct.c ****  *
  39:fltk-1.3.4-1/jpeg/jdmainct.c ****  * The coefficient controller will deliver data to us one iMCU row at a time;
  40:fltk-1.3.4-1/jpeg/jdmainct.c ****  * each iMCU row contains v_samp_factor * DCT_scaled_size sample rows, or
  41:fltk-1.3.4-1/jpeg/jdmainct.c ****  * exactly min_DCT_scaled_size row groups.  (This amount of data corresponds
  42:fltk-1.3.4-1/jpeg/jdmainct.c ****  * to one row of MCUs when the image is fully interleaved.)  Note that the
  43:fltk-1.3.4-1/jpeg/jdmainct.c ****  * number of sample rows varies across components, but the number of row
  44:fltk-1.3.4-1/jpeg/jdmainct.c ****  * groups does not.  Some garbage sample rows may be included in the last iMCU
  45:fltk-1.3.4-1/jpeg/jdmainct.c ****  * row at the bottom of the image.
  46:fltk-1.3.4-1/jpeg/jdmainct.c ****  *
  47:fltk-1.3.4-1/jpeg/jdmainct.c ****  * Depending on the vertical scaling algorithm used, the upsampler may need
  48:fltk-1.3.4-1/jpeg/jdmainct.c ****  * access to the sample row(s) above and below its current input row group.
  49:fltk-1.3.4-1/jpeg/jdmainct.c ****  * The upsampler is required to set need_context_rows TRUE at global selection
  50:fltk-1.3.4-1/jpeg/jdmainct.c ****  * time if so.  When need_context_rows is FALSE, this controller can simply
  51:fltk-1.3.4-1/jpeg/jdmainct.c ****  * obtain one iMCU row at a time from the coefficient controller and dole it
  52:fltk-1.3.4-1/jpeg/jdmainct.c ****  * out as row groups to the postprocessor.
  53:fltk-1.3.4-1/jpeg/jdmainct.c ****  *
  54:fltk-1.3.4-1/jpeg/jdmainct.c ****  * When need_context_rows is TRUE, this controller guarantees that the buffer
  55:fltk-1.3.4-1/jpeg/jdmainct.c ****  * passed to postprocessing contains at least one row group's worth of samples
  56:fltk-1.3.4-1/jpeg/jdmainct.c ****  * above and below the row group(s) being processed.  Note that the context
  57:fltk-1.3.4-1/jpeg/jdmainct.c ****  * rows "above" the first passed row group appear at negative row offsets in
  58:fltk-1.3.4-1/jpeg/jdmainct.c ****  * the passed buffer.  At the top and bottom of the image, the required
  59:fltk-1.3.4-1/jpeg/jdmainct.c ****  * context rows are manufactured by duplicating the first or last real sample
  60:fltk-1.3.4-1/jpeg/jdmainct.c ****  * row; this avoids having special cases in the upsampling inner loops.
  61:fltk-1.3.4-1/jpeg/jdmainct.c ****  *
  62:fltk-1.3.4-1/jpeg/jdmainct.c ****  * The amount of context is fixed at one row group just because that's a
  63:fltk-1.3.4-1/jpeg/jdmainct.c ****  * convenient number for this controller to work with.  The existing
  64:fltk-1.3.4-1/jpeg/jdmainct.c ****  * upsamplers really only need one sample row of context.  An upsampler
  65:fltk-1.3.4-1/jpeg/jdmainct.c ****  * supporting arbitrary output rescaling might wish for more than one row
  66:fltk-1.3.4-1/jpeg/jdmainct.c ****  * group of context when shrinking the image; tough, we don't handle that.
  67:fltk-1.3.4-1/jpeg/jdmainct.c ****  * (This is justified by the assumption that downsizing will be handled mostly
  68:fltk-1.3.4-1/jpeg/jdmainct.c ****  * by adjusting the DCT_scaled_size values, so that the actual scale factor at
  69:fltk-1.3.4-1/jpeg/jdmainct.c ****  * the upsample step needn't be much less than one.)
  70:fltk-1.3.4-1/jpeg/jdmainct.c ****  *
  71:fltk-1.3.4-1/jpeg/jdmainct.c ****  * To provide the desired context, we have to retain the last two row groups
  72:fltk-1.3.4-1/jpeg/jdmainct.c ****  * of one iMCU row while reading in the next iMCU row.  (The last row group
  73:fltk-1.3.4-1/jpeg/jdmainct.c ****  * can't be processed until we have another row group for its below-context,
  74:fltk-1.3.4-1/jpeg/jdmainct.c ****  * and so we have to save the next-to-last group too for its above-context.)
  75:fltk-1.3.4-1/jpeg/jdmainct.c ****  * We could do this most simply by copying data around in our buffer, but
  76:fltk-1.3.4-1/jpeg/jdmainct.c ****  * that'd be very slow.  We can avoid copying any data by creating a rather
  77:fltk-1.3.4-1/jpeg/jdmainct.c ****  * strange pointer structure.  Here's how it works.  We allocate a workspace
  78:fltk-1.3.4-1/jpeg/jdmainct.c ****  * consisting of M+2 row groups (where M = min_DCT_scaled_size is the number
  79:fltk-1.3.4-1/jpeg/jdmainct.c ****  * of row groups per iMCU row).  We create two sets of redundant pointers to
  80:fltk-1.3.4-1/jpeg/jdmainct.c ****  * the workspace.  Labeling the physical row groups 0 to M+1, the synthesized
  81:fltk-1.3.4-1/jpeg/jdmainct.c ****  * pointer lists look like this:
  82:fltk-1.3.4-1/jpeg/jdmainct.c ****  *                   M+1                          M-1
  83:fltk-1.3.4-1/jpeg/jdmainct.c ****  * master pointer --> 0         master pointer --> 0
  84:fltk-1.3.4-1/jpeg/jdmainct.c ****  *                    1                            1
  85:fltk-1.3.4-1/jpeg/jdmainct.c ****  *                   ...                          ...
  86:fltk-1.3.4-1/jpeg/jdmainct.c ****  *                   M-3                          M-3
  87:fltk-1.3.4-1/jpeg/jdmainct.c ****  *                   M-2                           M
  88:fltk-1.3.4-1/jpeg/jdmainct.c ****  *                   M-1                          M+1
  89:fltk-1.3.4-1/jpeg/jdmainct.c ****  *                    M                           M-2
  90:fltk-1.3.4-1/jpeg/jdmainct.c ****  *                   M+1                          M-1
  91:fltk-1.3.4-1/jpeg/jdmainct.c ****  *                    0                            0
  92:fltk-1.3.4-1/jpeg/jdmainct.c ****  * We read alternate iMCU rows using each master pointer; thus the last two
  93:fltk-1.3.4-1/jpeg/jdmainct.c ****  * row groups of the previous iMCU row remain un-overwritten in the workspace.
  94:fltk-1.3.4-1/jpeg/jdmainct.c ****  * The pointer lists are set up so that the required context rows appear to
  95:fltk-1.3.4-1/jpeg/jdmainct.c ****  * be adjacent to the proper places when we pass the pointer lists to the
  96:fltk-1.3.4-1/jpeg/jdmainct.c ****  * upsampler.
  97:fltk-1.3.4-1/jpeg/jdmainct.c ****  *
  98:fltk-1.3.4-1/jpeg/jdmainct.c ****  * The above pictures describe the normal state of the pointer lists.
  99:fltk-1.3.4-1/jpeg/jdmainct.c ****  * At top and bottom of the image, we diddle the pointer lists to duplicate
 100:fltk-1.3.4-1/jpeg/jdmainct.c ****  * the first or last sample row as necessary (this is cheaper than copying
 101:fltk-1.3.4-1/jpeg/jdmainct.c ****  * sample rows around).
 102:fltk-1.3.4-1/jpeg/jdmainct.c ****  *
 103:fltk-1.3.4-1/jpeg/jdmainct.c ****  * This scheme breaks down if M < 2, ie, min_DCT_scaled_size is 1.  In that
 104:fltk-1.3.4-1/jpeg/jdmainct.c ****  * situation each iMCU row provides only one row group so the buffering logic
 105:fltk-1.3.4-1/jpeg/jdmainct.c ****  * must be different (eg, we must read two iMCU rows before we can emit the
 106:fltk-1.3.4-1/jpeg/jdmainct.c ****  * first row group).  For now, we simply do not support providing context
 107:fltk-1.3.4-1/jpeg/jdmainct.c ****  * rows when min_DCT_scaled_size is 1.  That combination seems unlikely to
 108:fltk-1.3.4-1/jpeg/jdmainct.c ****  * be worth providing --- if someone wants a 1/8th-size preview, they probably
 109:fltk-1.3.4-1/jpeg/jdmainct.c ****  * want it quick and dirty, so a context-free upsampler is sufficient.
 110:fltk-1.3.4-1/jpeg/jdmainct.c ****  */
 111:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 112:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 113:fltk-1.3.4-1/jpeg/jdmainct.c **** /* Private buffer controller object */
 114:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 115:fltk-1.3.4-1/jpeg/jdmainct.c **** typedef struct {
 116:fltk-1.3.4-1/jpeg/jdmainct.c ****   struct jpeg_d_main_controller pub; /* public fields */
 117:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 118:fltk-1.3.4-1/jpeg/jdmainct.c ****   /* Pointer to allocated workspace (M or M+2 row groups). */
 119:fltk-1.3.4-1/jpeg/jdmainct.c ****   JSAMPARRAY buffer[MAX_COMPONENTS];
 120:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 121:fltk-1.3.4-1/jpeg/jdmainct.c ****   boolean buffer_full;		/* Have we gotten an iMCU row from decoder? */
 122:fltk-1.3.4-1/jpeg/jdmainct.c ****   JDIMENSION rowgroup_ctr;	/* counts row groups output to postprocessor */
 123:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 124:fltk-1.3.4-1/jpeg/jdmainct.c ****   /* Remaining fields are only used in the context case. */
 125:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 126:fltk-1.3.4-1/jpeg/jdmainct.c ****   /* These are the master pointers to the funny-order pointer lists. */
 127:fltk-1.3.4-1/jpeg/jdmainct.c ****   JSAMPIMAGE xbuffer[2];	/* pointers to weird pointer lists */
 128:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 129:fltk-1.3.4-1/jpeg/jdmainct.c ****   int whichptr;			/* indicates which pointer set is now in use */
 130:fltk-1.3.4-1/jpeg/jdmainct.c ****   int context_state;		/* process_data state machine status */
 131:fltk-1.3.4-1/jpeg/jdmainct.c ****   JDIMENSION rowgroups_avail;	/* row groups available to postprocessor */
 132:fltk-1.3.4-1/jpeg/jdmainct.c ****   JDIMENSION iMCU_row_ctr;	/* counts iMCU rows to detect image top/bot */
 133:fltk-1.3.4-1/jpeg/jdmainct.c **** } my_main_controller;
 134:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 135:fltk-1.3.4-1/jpeg/jdmainct.c **** typedef my_main_controller * my_main_ptr;
 136:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 137:fltk-1.3.4-1/jpeg/jdmainct.c **** /* context_state values: */
 138:fltk-1.3.4-1/jpeg/jdmainct.c **** #define CTX_PREPARE_FOR_IMCU	0	/* need to prepare for MCU row */
 139:fltk-1.3.4-1/jpeg/jdmainct.c **** #define CTX_PROCESS_IMCU	1	/* feeding iMCU to postprocessor */
 140:fltk-1.3.4-1/jpeg/jdmainct.c **** #define CTX_POSTPONED_ROW	2	/* feeding postponed row group */
 141:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 142:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 143:fltk-1.3.4-1/jpeg/jdmainct.c **** /* Forward declarations */
 144:fltk-1.3.4-1/jpeg/jdmainct.c **** METHODDEF(void) process_data_simple_main
 145:fltk-1.3.4-1/jpeg/jdmainct.c **** 	JPP((j_decompress_ptr cinfo, JSAMPARRAY output_buf,
 146:fltk-1.3.4-1/jpeg/jdmainct.c **** 	     JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail));
 147:fltk-1.3.4-1/jpeg/jdmainct.c **** METHODDEF(void) process_data_context_main
 148:fltk-1.3.4-1/jpeg/jdmainct.c **** 	JPP((j_decompress_ptr cinfo, JSAMPARRAY output_buf,
 149:fltk-1.3.4-1/jpeg/jdmainct.c **** 	     JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail));
 150:fltk-1.3.4-1/jpeg/jdmainct.c **** #ifdef QUANT_2PASS_SUPPORTED
 151:fltk-1.3.4-1/jpeg/jdmainct.c **** METHODDEF(void) process_data_crank_post
 152:fltk-1.3.4-1/jpeg/jdmainct.c **** 	JPP((j_decompress_ptr cinfo, JSAMPARRAY output_buf,
 153:fltk-1.3.4-1/jpeg/jdmainct.c **** 	     JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail));
 154:fltk-1.3.4-1/jpeg/jdmainct.c **** #endif
 155:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 156:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 157:fltk-1.3.4-1/jpeg/jdmainct.c **** LOCAL(void)
 158:fltk-1.3.4-1/jpeg/jdmainct.c **** alloc_funny_pointers (j_decompress_ptr cinfo)
 159:fltk-1.3.4-1/jpeg/jdmainct.c **** /* Allocate space for the funny pointer lists.
 160:fltk-1.3.4-1/jpeg/jdmainct.c ****  * This is done only once, not once per pass.
 161:fltk-1.3.4-1/jpeg/jdmainct.c ****  */
 162:fltk-1.3.4-1/jpeg/jdmainct.c **** {
 163:fltk-1.3.4-1/jpeg/jdmainct.c ****   my_main_ptr mainp = (my_main_ptr) cinfo->main;
 164:fltk-1.3.4-1/jpeg/jdmainct.c ****   int ci, rgroup;
 165:fltk-1.3.4-1/jpeg/jdmainct.c ****   int M = cinfo->min_DCT_v_scaled_size;
 166:fltk-1.3.4-1/jpeg/jdmainct.c ****   jpeg_component_info *compptr;
 167:fltk-1.3.4-1/jpeg/jdmainct.c ****   JSAMPARRAY xbuf;
 168:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 169:fltk-1.3.4-1/jpeg/jdmainct.c ****   /* Get top-level space for component array pointers.
 170:fltk-1.3.4-1/jpeg/jdmainct.c ****    * We alloc both arrays with one call to save a few cycles.
 171:fltk-1.3.4-1/jpeg/jdmainct.c ****    */
 172:fltk-1.3.4-1/jpeg/jdmainct.c ****   mainp->xbuffer[0] = (JSAMPIMAGE)
 173:fltk-1.3.4-1/jpeg/jdmainct.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 174:fltk-1.3.4-1/jpeg/jdmainct.c **** 				cinfo->num_components * 2 * SIZEOF(JSAMPARRAY));
 175:fltk-1.3.4-1/jpeg/jdmainct.c ****   mainp->xbuffer[1] = mainp->xbuffer[0] + cinfo->num_components;
 176:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 177:fltk-1.3.4-1/jpeg/jdmainct.c ****   for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 178:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 179:fltk-1.3.4-1/jpeg/jdmainct.c ****     rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 180:fltk-1.3.4-1/jpeg/jdmainct.c ****       cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 181:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* Get space for pointer lists --- M+4 row groups in each list.
 182:fltk-1.3.4-1/jpeg/jdmainct.c ****      * We alloc both pointer lists with one call to save a few cycles.
 183:fltk-1.3.4-1/jpeg/jdmainct.c ****      */
 184:fltk-1.3.4-1/jpeg/jdmainct.c ****     xbuf = (JSAMPARRAY)
 185:fltk-1.3.4-1/jpeg/jdmainct.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 186:fltk-1.3.4-1/jpeg/jdmainct.c **** 				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 187:fltk-1.3.4-1/jpeg/jdmainct.c ****     xbuf += rgroup;		/* want one row group at negative offsets */
 188:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->xbuffer[0][ci] = xbuf;
 189:fltk-1.3.4-1/jpeg/jdmainct.c ****     xbuf += rgroup * (M + 4);
 190:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->xbuffer[1][ci] = xbuf;
 191:fltk-1.3.4-1/jpeg/jdmainct.c ****   }
 192:fltk-1.3.4-1/jpeg/jdmainct.c **** }
 193:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 194:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 195:fltk-1.3.4-1/jpeg/jdmainct.c **** LOCAL(void)
 196:fltk-1.3.4-1/jpeg/jdmainct.c **** make_funny_pointers (j_decompress_ptr cinfo)
 197:fltk-1.3.4-1/jpeg/jdmainct.c **** /* Create the funny pointer lists discussed in the comments above.
 198:fltk-1.3.4-1/jpeg/jdmainct.c ****  * The actual workspace is already allocated (in main->buffer),
 199:fltk-1.3.4-1/jpeg/jdmainct.c ****  * and the space for the pointer lists is allocated too.
 200:fltk-1.3.4-1/jpeg/jdmainct.c ****  * This routine just fills in the curiously ordered lists.
 201:fltk-1.3.4-1/jpeg/jdmainct.c ****  * This will be repeated at the beginning of each pass.
 202:fltk-1.3.4-1/jpeg/jdmainct.c ****  */
 203:fltk-1.3.4-1/jpeg/jdmainct.c **** {
 204:fltk-1.3.4-1/jpeg/jdmainct.c ****   my_main_ptr mainp = (my_main_ptr) cinfo->main;
 205:fltk-1.3.4-1/jpeg/jdmainct.c ****   int ci, i, rgroup;
 206:fltk-1.3.4-1/jpeg/jdmainct.c ****   int M = cinfo->min_DCT_v_scaled_size;
 207:fltk-1.3.4-1/jpeg/jdmainct.c ****   jpeg_component_info *compptr;
 208:fltk-1.3.4-1/jpeg/jdmainct.c ****   JSAMPARRAY buf, xbuf0, xbuf1;
 209:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 210:fltk-1.3.4-1/jpeg/jdmainct.c ****   for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 211:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 212:fltk-1.3.4-1/jpeg/jdmainct.c ****     rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 213:fltk-1.3.4-1/jpeg/jdmainct.c ****       cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 214:fltk-1.3.4-1/jpeg/jdmainct.c ****     xbuf0 = mainp->xbuffer[0][ci];
 215:fltk-1.3.4-1/jpeg/jdmainct.c ****     xbuf1 = mainp->xbuffer[1][ci];
 216:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* First copy the workspace pointers as-is */
 217:fltk-1.3.4-1/jpeg/jdmainct.c ****     buf = mainp->buffer[ci];
 218:fltk-1.3.4-1/jpeg/jdmainct.c ****     for (i = 0; i < rgroup * (M + 2); i++) {
 219:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i] = xbuf1[i] = buf[i];
 220:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 221:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* In the second list, put the last four row groups in swapped order */
 222:fltk-1.3.4-1/jpeg/jdmainct.c ****     for (i = 0; i < rgroup * 2; i++) {
 223:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 224:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 225:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 226:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* The wraparound pointers at top and bottom will be filled later
 227:fltk-1.3.4-1/jpeg/jdmainct.c ****      * (see set_wraparound_pointers, below).  Initially we want the "above"
 228:fltk-1.3.4-1/jpeg/jdmainct.c ****      * pointers to duplicate the first actual data line.  This only needs
 229:fltk-1.3.4-1/jpeg/jdmainct.c ****      * to happen in xbuffer[0].
 230:fltk-1.3.4-1/jpeg/jdmainct.c ****      */
 231:fltk-1.3.4-1/jpeg/jdmainct.c ****     for (i = 0; i < rgroup; i++) {
 232:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i - rgroup] = xbuf0[0];
 233:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 234:fltk-1.3.4-1/jpeg/jdmainct.c ****   }
 235:fltk-1.3.4-1/jpeg/jdmainct.c **** }
 236:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 237:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 238:fltk-1.3.4-1/jpeg/jdmainct.c **** LOCAL(void)
 239:fltk-1.3.4-1/jpeg/jdmainct.c **** set_wraparound_pointers (j_decompress_ptr cinfo)
 240:fltk-1.3.4-1/jpeg/jdmainct.c **** /* Set up the "wraparound" pointers at top and bottom of the pointer lists.
 241:fltk-1.3.4-1/jpeg/jdmainct.c ****  * This changes the pointer list state from top-of-image to the normal state.
 242:fltk-1.3.4-1/jpeg/jdmainct.c ****  */
 243:fltk-1.3.4-1/jpeg/jdmainct.c **** {
 244:fltk-1.3.4-1/jpeg/jdmainct.c ****   my_main_ptr mainp = (my_main_ptr) cinfo->main;
 245:fltk-1.3.4-1/jpeg/jdmainct.c ****   int ci, i, rgroup;
 246:fltk-1.3.4-1/jpeg/jdmainct.c ****   int M = cinfo->min_DCT_v_scaled_size;
 247:fltk-1.3.4-1/jpeg/jdmainct.c ****   jpeg_component_info *compptr;
 248:fltk-1.3.4-1/jpeg/jdmainct.c ****   JSAMPARRAY xbuf0, xbuf1;
 249:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 250:fltk-1.3.4-1/jpeg/jdmainct.c ****   for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 251:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 252:fltk-1.3.4-1/jpeg/jdmainct.c ****     rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 253:fltk-1.3.4-1/jpeg/jdmainct.c ****       cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 254:fltk-1.3.4-1/jpeg/jdmainct.c ****     xbuf0 = mainp->xbuffer[0][ci];
 255:fltk-1.3.4-1/jpeg/jdmainct.c ****     xbuf1 = mainp->xbuffer[1][ci];
 256:fltk-1.3.4-1/jpeg/jdmainct.c ****     for (i = 0; i < rgroup; i++) {
 257:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 258:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 259:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 260:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 261:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 262:fltk-1.3.4-1/jpeg/jdmainct.c ****   }
 263:fltk-1.3.4-1/jpeg/jdmainct.c **** }
 264:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 265:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 266:fltk-1.3.4-1/jpeg/jdmainct.c **** LOCAL(void)
 267:fltk-1.3.4-1/jpeg/jdmainct.c **** set_bottom_pointers (j_decompress_ptr cinfo)
 268:fltk-1.3.4-1/jpeg/jdmainct.c **** /* Change the pointer lists to duplicate the last sample row at the bottom
 269:fltk-1.3.4-1/jpeg/jdmainct.c ****  * of the image.  whichptr indicates which xbuffer holds the final iMCU row.
 270:fltk-1.3.4-1/jpeg/jdmainct.c ****  * Also sets rowgroups_avail to indicate number of nondummy row groups in row.
 271:fltk-1.3.4-1/jpeg/jdmainct.c ****  */
 272:fltk-1.3.4-1/jpeg/jdmainct.c **** {
 273:fltk-1.3.4-1/jpeg/jdmainct.c ****   my_main_ptr mainp = (my_main_ptr) cinfo->main;
 274:fltk-1.3.4-1/jpeg/jdmainct.c ****   int ci, i, rgroup, iMCUheight, rows_left;
 275:fltk-1.3.4-1/jpeg/jdmainct.c ****   jpeg_component_info *compptr;
 276:fltk-1.3.4-1/jpeg/jdmainct.c ****   JSAMPARRAY xbuf;
 277:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 278:fltk-1.3.4-1/jpeg/jdmainct.c ****   for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 279:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 280:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* Count sample rows in one iMCU row and in one row group */
 281:fltk-1.3.4-1/jpeg/jdmainct.c ****     iMCUheight = compptr->v_samp_factor * compptr->DCT_v_scaled_size;
 282:fltk-1.3.4-1/jpeg/jdmainct.c ****     rgroup = iMCUheight / cinfo->min_DCT_v_scaled_size;
 283:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* Count nondummy sample rows remaining for this component */
 284:fltk-1.3.4-1/jpeg/jdmainct.c ****     rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
 285:fltk-1.3.4-1/jpeg/jdmainct.c ****     if (rows_left == 0) rows_left = iMCUheight;
 286:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* Count nondummy row groups.  Should get same answer for each component,
 287:fltk-1.3.4-1/jpeg/jdmainct.c ****      * so we need only do it once.
 288:fltk-1.3.4-1/jpeg/jdmainct.c ****      */
 289:fltk-1.3.4-1/jpeg/jdmainct.c ****     if (ci == 0) {
 290:fltk-1.3.4-1/jpeg/jdmainct.c ****       mainp->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
 291:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 292:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* Duplicate the last real sample row rgroup*2 times; this pads out the
 293:fltk-1.3.4-1/jpeg/jdmainct.c ****      * last partial rowgroup and ensures at least one full rowgroup of context.
 294:fltk-1.3.4-1/jpeg/jdmainct.c ****      */
 295:fltk-1.3.4-1/jpeg/jdmainct.c ****     xbuf = mainp->xbuffer[mainp->whichptr][ci];
 296:fltk-1.3.4-1/jpeg/jdmainct.c ****     for (i = 0; i < rgroup * 2; i++) {
 297:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf[rows_left + i] = xbuf[rows_left-1];
 298:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 299:fltk-1.3.4-1/jpeg/jdmainct.c ****   }
 300:fltk-1.3.4-1/jpeg/jdmainct.c **** }
 301:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 302:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 303:fltk-1.3.4-1/jpeg/jdmainct.c **** /*
 304:fltk-1.3.4-1/jpeg/jdmainct.c ****  * Initialize for a processing pass.
 305:fltk-1.3.4-1/jpeg/jdmainct.c ****  */
 306:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 307:fltk-1.3.4-1/jpeg/jdmainct.c **** METHODDEF(void)
 308:fltk-1.3.4-1/jpeg/jdmainct.c **** start_pass_main (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
 309:fltk-1.3.4-1/jpeg/jdmainct.c **** {
 310:fltk-1.3.4-1/jpeg/jdmainct.c ****   my_main_ptr mainp = (my_main_ptr) cinfo->main;
 311:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 312:fltk-1.3.4-1/jpeg/jdmainct.c ****   switch (pass_mode) {
 313:fltk-1.3.4-1/jpeg/jdmainct.c ****   case JBUF_PASS_THRU:
 314:fltk-1.3.4-1/jpeg/jdmainct.c ****     if (cinfo->upsample->need_context_rows) {
 315:fltk-1.3.4-1/jpeg/jdmainct.c ****       mainp->pub.process_data = process_data_context_main;
 316:fltk-1.3.4-1/jpeg/jdmainct.c ****       make_funny_pointers(cinfo); /* Create the xbuffer[] lists */
 317:fltk-1.3.4-1/jpeg/jdmainct.c ****       mainp->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
 318:fltk-1.3.4-1/jpeg/jdmainct.c ****       mainp->context_state = CTX_PREPARE_FOR_IMCU;
 319:fltk-1.3.4-1/jpeg/jdmainct.c ****       mainp->iMCU_row_ctr = 0;
 320:fltk-1.3.4-1/jpeg/jdmainct.c ****     } else {
 321:fltk-1.3.4-1/jpeg/jdmainct.c ****       /* Simple case with no context needed */
 322:fltk-1.3.4-1/jpeg/jdmainct.c ****       mainp->pub.process_data = process_data_simple_main;
 323:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 324:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->buffer_full = FALSE;	/* Mark buffer empty */
 325:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->rowgroup_ctr = 0;
 326:fltk-1.3.4-1/jpeg/jdmainct.c ****     break;
 327:fltk-1.3.4-1/jpeg/jdmainct.c **** #ifdef QUANT_2PASS_SUPPORTED
 328:fltk-1.3.4-1/jpeg/jdmainct.c ****   case JBUF_CRANK_DEST:
 329:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* For last pass of 2-pass quantization, just crank the postprocessor */
 330:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->pub.process_data = process_data_crank_post;
 331:fltk-1.3.4-1/jpeg/jdmainct.c ****     break;
 332:fltk-1.3.4-1/jpeg/jdmainct.c **** #endif
 333:fltk-1.3.4-1/jpeg/jdmainct.c ****   default:
 334:fltk-1.3.4-1/jpeg/jdmainct.c ****     ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 335:fltk-1.3.4-1/jpeg/jdmainct.c ****     break;
 336:fltk-1.3.4-1/jpeg/jdmainct.c ****   }
 337:fltk-1.3.4-1/jpeg/jdmainct.c **** }
 338:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 339:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 340:fltk-1.3.4-1/jpeg/jdmainct.c **** /*
 341:fltk-1.3.4-1/jpeg/jdmainct.c ****  * Process some data.
 342:fltk-1.3.4-1/jpeg/jdmainct.c ****  * This handles the simple case where no context is required.
 343:fltk-1.3.4-1/jpeg/jdmainct.c ****  */
 344:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 345:fltk-1.3.4-1/jpeg/jdmainct.c **** METHODDEF(void)
 346:fltk-1.3.4-1/jpeg/jdmainct.c **** process_data_simple_main (j_decompress_ptr cinfo,
 347:fltk-1.3.4-1/jpeg/jdmainct.c **** 			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
 348:fltk-1.3.4-1/jpeg/jdmainct.c **** 			  JDIMENSION out_rows_avail)
 349:fltk-1.3.4-1/jpeg/jdmainct.c **** {
  11              		.loc 1 349 1 view -0
  12              		.cfi_startproc
  13              		.loc 1 349 1 is_stmt 0 view .LVU1
  14 0000 F30F1EFA 		endbr64
 350:fltk-1.3.4-1/jpeg/jdmainct.c ****   my_main_ptr mainp = (my_main_ptr) cinfo->main;
  15              		.loc 1 350 3 is_stmt 1 view .LVU2
 349:fltk-1.3.4-1/jpeg/jdmainct.c ****   my_main_ptr mainp = (my_main_ptr) cinfo->main;
  16              		.loc 1 349 1 is_stmt 0 view .LVU3
  17 0004 4157     		pushq	%r15
  18              		.cfi_def_cfa_offset 16
  19              		.cfi_offset 15, -16
  20 0006 4989F0   		movq	%rsi, %r8
  21 0009 4156     		pushq	%r14
  22              		.cfi_def_cfa_offset 24
  23              		.cfi_offset 14, -24
  24 000b 4989D6   		movq	%rdx, %r14
  25 000e 4155     		pushq	%r13
  26              		.cfi_def_cfa_offset 32
  27              		.cfi_offset 13, -32
  28 0010 4154     		pushq	%r12
  29              		.cfi_def_cfa_offset 40
  30              		.cfi_offset 12, -40
  31 0012 4189CC   		movl	%ecx, %r12d
  32 0015 55       		pushq	%rbp
  33              		.cfi_def_cfa_offset 48
  34              		.cfi_offset 6, -48
  35 0016 4889FD   		movq	%rdi, %rbp
  36 0019 53       		pushq	%rbx
  37              		.cfi_def_cfa_offset 56
  38              		.cfi_offset 3, -56
  39 001a 4883EC18 		subq	$24, %rsp
  40              		.cfi_def_cfa_offset 80
  41              		.loc 1 350 15 view .LVU4
  42 001e 488B9F48 		movq	584(%rdi), %rbx
  42      020000
  43              	.LVL1:
 351:fltk-1.3.4-1/jpeg/jdmainct.c ****   JDIMENSION rowgroups_avail;
  44              		.loc 1 351 3 is_stmt 1 view .LVU5
 352:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 353:fltk-1.3.4-1/jpeg/jdmainct.c ****   /* Read input data if we haven't filled the main buffer yet */
 354:fltk-1.3.4-1/jpeg/jdmainct.c ****   if (! mainp->buffer_full) {
  45              		.loc 1 354 3 view .LVU6
  46              		.loc 1 354 6 is_stmt 0 view .LVU7
  47 0025 8B4B60   		movl	96(%rbx), %ecx
  48              	.LVL2:
  49              		.loc 1 354 6 view .LVU8
  50 0028 4C8D7B10 		leaq	16(%rbx), %r15
  51 002c 85C9     		testl	%ecx, %ecx
  52 002e 7522     		jne	.L2
 355:fltk-1.3.4-1/jpeg/jdmainct.c ****     if (! (*cinfo->coef->decompress_data) (cinfo, mainp->buffer))
  53              		.loc 1 355 12 view .LVU9
  54 0030 488B8750 		movq	592(%rdi), %rax
  54      020000
  55 0037 48897424 		movq	%rsi, 8(%rsp)
  55      08
  56              		.loc 1 355 5 is_stmt 1 view .LVU10
  57              		.loc 1 355 12 is_stmt 0 view .LVU11
  58 003c 4C89FE   		movq	%r15, %rsi
  59              	.LVL3:
  60              		.loc 1 355 12 view .LVU12
  61 003f FF5018   		call	*24(%rax)
  62              	.LVL4:
  63              		.loc 1 355 8 view .LVU13
  64 0042 85C0     		testl	%eax, %eax
  65 0044 7443     		je	.L1
 356:fltk-1.3.4-1/jpeg/jdmainct.c ****       return;			/* suspension forced, can do nothing more */
 357:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
  66              		.loc 1 357 5 is_stmt 1 view .LVU14
  67              		.loc 1 357 24 is_stmt 0 view .LVU15
  68 0046 C7436001 		movl	$1, 96(%rbx)
  68      000000
  69 004d 4C8B4424 		movq	8(%rsp), %r8
  69      08
  70              	.LVL5:
  71              	.L2:
 358:fltk-1.3.4-1/jpeg/jdmainct.c ****   }
 359:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 360:fltk-1.3.4-1/jpeg/jdmainct.c ****   /* There are always min_DCT_scaled_size row groups in an iMCU row. */
 361:fltk-1.3.4-1/jpeg/jdmainct.c ****   rowgroups_avail = (JDIMENSION) cinfo->min_DCT_v_scaled_size;
  72              		.loc 1 361 3 is_stmt 1 view .LVU16
  73              		.loc 1 361 19 is_stmt 0 view .LVU17
  74 0052 448BADAC 		movl	428(%rbp), %r13d
  74      010000
  75              	.LVL6:
 362:fltk-1.3.4-1/jpeg/jdmainct.c ****   /* Note: at the bottom of the image, we may pass extra garbage row groups
 363:fltk-1.3.4-1/jpeg/jdmainct.c ****    * to the postprocessor.  The postprocessor has to check for bottom
 364:fltk-1.3.4-1/jpeg/jdmainct.c ****    * of image anyway (at row resolution), so no point in us doing it too.
 365:fltk-1.3.4-1/jpeg/jdmainct.c ****    */
 366:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 367:fltk-1.3.4-1/jpeg/jdmainct.c ****   /* Feed the postprocessor */
 368:fltk-1.3.4-1/jpeg/jdmainct.c ****   (*cinfo->post->post_process_data) (cinfo, mainp->buffer,
  76              		.loc 1 368 3 is_stmt 1 view .LVU18
  77              		.loc 1 368 4 is_stmt 0 view .LVU19
  78 0059 4D89F1   		movq	%r14, %r9
  79 005c 4C89FE   		movq	%r15, %rsi
  80 005f 4889EF   		movq	%rbp, %rdi
  81 0062 488B8558 		movq	600(%rbp), %rax
  81      020000
  82 0069 4883EC08 		subq	$8, %rsp
  83              		.cfi_def_cfa_offset 88
  84 006d 488D5364 		leaq	100(%rbx), %rdx
  85 0071 4154     		pushq	%r12
  86              		.cfi_def_cfa_offset 96
  87 0073 4489E9   		movl	%r13d, %ecx
  88 0076 FF5008   		call	*8(%rax)
  89              	.LVL7:
 369:fltk-1.3.4-1/jpeg/jdmainct.c **** 				     &mainp->rowgroup_ctr, rowgroups_avail,
 370:fltk-1.3.4-1/jpeg/jdmainct.c **** 				     output_buf, out_row_ctr, out_rows_avail);
 371:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 372:fltk-1.3.4-1/jpeg/jdmainct.c ****   /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
 373:fltk-1.3.4-1/jpeg/jdmainct.c ****   if (mainp->rowgroup_ctr >= rowgroups_avail) {
  90              		.loc 1 373 3 is_stmt 1 view .LVU20
  91              		.loc 1 373 6 is_stmt 0 view .LVU21
  92 0079 58       		popq	%rax
  93              		.cfi_def_cfa_offset 88
  94 007a 5A       		popq	%rdx
  95              		.cfi_def_cfa_offset 80
  96 007b 44396B64 		cmpl	%r13d, 100(%rbx)
  97 007f 7208     		jb	.L1
 374:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->buffer_full = FALSE;
  98              		.loc 1 374 5 is_stmt 1 view .LVU22
 375:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->rowgroup_ctr = 0;
  99              		.loc 1 375 5 view .LVU23
 374:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->buffer_full = FALSE;
 100              		.loc 1 374 24 is_stmt 0 view .LVU24
 101 0081 48C74360 		movq	$0, 96(%rbx)
 101      00000000 
 102              	.LVL8:
 103              	.L1:
 376:fltk-1.3.4-1/jpeg/jdmainct.c ****   }
 377:fltk-1.3.4-1/jpeg/jdmainct.c **** }
 104              		.loc 1 377 1 view .LVU25
 105 0089 4883C418 		addq	$24, %rsp
 106              		.cfi_def_cfa_offset 56
 107 008d 5B       		popq	%rbx
 108              		.cfi_def_cfa_offset 48
 109              	.LVL9:
 110              		.loc 1 377 1 view .LVU26
 111 008e 5D       		popq	%rbp
 112              		.cfi_def_cfa_offset 40
 113              	.LVL10:
 114              		.loc 1 377 1 view .LVU27
 115 008f 415C     		popq	%r12
 116              		.cfi_def_cfa_offset 32
 117              	.LVL11:
 118              		.loc 1 377 1 view .LVU28
 119 0091 415D     		popq	%r13
 120              		.cfi_def_cfa_offset 24
 121 0093 415E     		popq	%r14
 122              		.cfi_def_cfa_offset 16
 123              	.LVL12:
 124              		.loc 1 377 1 view .LVU29
 125 0095 415F     		popq	%r15
 126              		.cfi_def_cfa_offset 8
 127              	.LVL13:
 128              		.loc 1 377 1 view .LVU30
 129 0097 C3       		ret
 130              		.cfi_endproc
 131              	.LFE56:
 133              		.section	.text.process_data_context_main,"ax",@progbits
 134              		.p2align 4
 136              	process_data_context_main:
 137              	.LVL14:
 138              	.LFB57:
 378:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 379:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 380:fltk-1.3.4-1/jpeg/jdmainct.c **** /*
 381:fltk-1.3.4-1/jpeg/jdmainct.c ****  * Process some data.
 382:fltk-1.3.4-1/jpeg/jdmainct.c ****  * This handles the case where context rows must be provided.
 383:fltk-1.3.4-1/jpeg/jdmainct.c ****  */
 384:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 385:fltk-1.3.4-1/jpeg/jdmainct.c **** METHODDEF(void)
 386:fltk-1.3.4-1/jpeg/jdmainct.c **** process_data_context_main (j_decompress_ptr cinfo,
 387:fltk-1.3.4-1/jpeg/jdmainct.c **** 			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
 388:fltk-1.3.4-1/jpeg/jdmainct.c **** 			   JDIMENSION out_rows_avail)
 389:fltk-1.3.4-1/jpeg/jdmainct.c **** {
 139              		.loc 1 389 1 is_stmt 1 view -0
 140              		.cfi_startproc
 141              		.loc 1 389 1 is_stmt 0 view .LVU32
 142 0000 F30F1EFA 		endbr64
 390:fltk-1.3.4-1/jpeg/jdmainct.c ****   my_main_ptr mainp = (my_main_ptr) cinfo->main;
 143              		.loc 1 390 3 is_stmt 1 view .LVU33
 389:fltk-1.3.4-1/jpeg/jdmainct.c ****   my_main_ptr mainp = (my_main_ptr) cinfo->main;
 144              		.loc 1 389 1 is_stmt 0 view .LVU34
 145 0004 4157     		pushq	%r15
 146              		.cfi_def_cfa_offset 16
 147              		.cfi_offset 15, -16
 148 0006 4989F7   		movq	%rsi, %r15
 149 0009 4156     		pushq	%r14
 150              		.cfi_def_cfa_offset 24
 151              		.cfi_offset 14, -24
 152 000b 4155     		pushq	%r13
 153              		.cfi_def_cfa_offset 32
 154              		.cfi_offset 13, -32
 155 000d 4189CD   		movl	%ecx, %r13d
 156 0010 4154     		pushq	%r12
 157              		.cfi_def_cfa_offset 40
 158              		.cfi_offset 12, -40
 159 0012 4989D4   		movq	%rdx, %r12
 160 0015 55       		pushq	%rbp
 161              		.cfi_def_cfa_offset 48
 162              		.cfi_offset 6, -48
 163 0016 4889FD   		movq	%rdi, %rbp
 164 0019 53       		pushq	%rbx
 165              		.cfi_def_cfa_offset 56
 166              		.cfi_offset 3, -56
 167 001a 4883EC18 		subq	$24, %rsp
 168              		.cfi_def_cfa_offset 80
 169              		.loc 1 390 15 view .LVU35
 170 001e 488B9F48 		movq	584(%rdi), %rbx
 170      020000
 171              	.LVL15:
 391:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 392:fltk-1.3.4-1/jpeg/jdmainct.c ****   /* Read input data if we haven't filled the main buffer yet */
 393:fltk-1.3.4-1/jpeg/jdmainct.c ****   if (! mainp->buffer_full) {
 172              		.loc 1 393 3 is_stmt 1 view .LVU36
 173              		.loc 1 393 6 is_stmt 0 view .LVU37
 174 0025 448B5360 		movl	96(%rbx), %r10d
 175 0029 4585D2   		testl	%r10d, %r10d
 176 002c 7525     		jne	.L9
 394:fltk-1.3.4-1/jpeg/jdmainct.c ****     if (! (*cinfo->coef->decompress_data) (cinfo,
 177              		.loc 1 394 5 is_stmt 1 view .LVU38
 178              		.loc 1 394 12 is_stmt 0 view .LVU39
 179 002e 48634378 		movslq	120(%rbx), %rax
 180 0032 488B74C3 		movq	104(%rbx,%rax,8), %rsi
 180      68
 181              	.LVL16:
 182              		.loc 1 394 12 view .LVU40
 183 0037 488B8750 		movq	592(%rdi), %rax
 183      020000
 184 003e FF5018   		call	*24(%rax)
 185              	.LVL17:
 186              		.loc 1 394 8 view .LVU41
 187 0041 85C0     		testl	%eax, %eax
 188 0043 7427     		je	.L8
 395:fltk-1.3.4-1/jpeg/jdmainct.c **** 					   mainp->xbuffer[mainp->whichptr]))
 396:fltk-1.3.4-1/jpeg/jdmainct.c ****       return;			/* suspension forced, can do nothing more */
 397:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 189              		.loc 1 397 5 is_stmt 1 view .LVU42
 398:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->iMCU_row_ctr++;	/* count rows received */
 190              		.loc 1 398 24 is_stmt 0 view .LVU43
 191 0045 83838400 		addl	$1, 132(%rbx)
 191      000001
 397:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->iMCU_row_ctr++;	/* count rows received */
 192              		.loc 1 397 24 view .LVU44
 193 004c C7436001 		movl	$1, 96(%rbx)
 193      000000
 194              		.loc 1 398 5 is_stmt 1 view .LVU45
 195              	.L9:
 399:fltk-1.3.4-1/jpeg/jdmainct.c ****   }
 400:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 401:fltk-1.3.4-1/jpeg/jdmainct.c ****   /* Postprocessor typically will not swallow all the input data it is handed
 402:fltk-1.3.4-1/jpeg/jdmainct.c ****    * in one call (due to filling the output buffer first).  Must be prepared
 403:fltk-1.3.4-1/jpeg/jdmainct.c ****    * to exit and restart.  This switch lets us keep track of how far we got.
 404:fltk-1.3.4-1/jpeg/jdmainct.c ****    * Note that each case falls through to the next on successful completion.
 405:fltk-1.3.4-1/jpeg/jdmainct.c ****    */
 406:fltk-1.3.4-1/jpeg/jdmainct.c ****   switch (mainp->context_state) {
 196              		.loc 1 406 3 view .LVU46
 197              		.loc 1 406 16 is_stmt 0 view .LVU47
 198 0053 8B437C   		movl	124(%rbx), %eax
 199              		.loc 1 406 3 view .LVU48
 200 0056 83F801   		cmpl	$1, %eax
 201 0059 0F843101 		je	.L12
 201      0000
 202 005f 83F802   		cmpl	$2, %eax
 203 0062 0F84C800 		je	.L13
 203      0000
 204 0068 85C0     		testl	%eax, %eax
 205 006a 7414     		je	.L37
 206              	.L8:
 407:fltk-1.3.4-1/jpeg/jdmainct.c ****   case CTX_POSTPONED_ROW:
 408:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* Call postprocessor using previously set pointers for postponed row */
 409:fltk-1.3.4-1/jpeg/jdmainct.c ****     (*cinfo->post->post_process_data) (cinfo, mainp->xbuffer[mainp->whichptr],
 410:fltk-1.3.4-1/jpeg/jdmainct.c **** 			&mainp->rowgroup_ctr, mainp->rowgroups_avail,
 411:fltk-1.3.4-1/jpeg/jdmainct.c **** 			output_buf, out_row_ctr, out_rows_avail);
 412:fltk-1.3.4-1/jpeg/jdmainct.c ****     if (mainp->rowgroup_ctr < mainp->rowgroups_avail)
 413:fltk-1.3.4-1/jpeg/jdmainct.c ****       return;			/* Need to suspend */
 414:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->context_state = CTX_PREPARE_FOR_IMCU;
 415:fltk-1.3.4-1/jpeg/jdmainct.c ****     if (*out_row_ctr >= out_rows_avail)
 416:fltk-1.3.4-1/jpeg/jdmainct.c ****       return;			/* Postprocessor exactly filled output buf */
 417:fltk-1.3.4-1/jpeg/jdmainct.c ****     /*FALLTHROUGH*/
 418:fltk-1.3.4-1/jpeg/jdmainct.c ****   case CTX_PREPARE_FOR_IMCU:
 419:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* Prepare to process first M-1 row groups of this iMCU row */
 420:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->rowgroup_ctr = 0;
 421:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 422:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* Check for bottom of image: if so, tweak pointers to "duplicate"
 423:fltk-1.3.4-1/jpeg/jdmainct.c ****      * the last sample row, and adjust rowgroups_avail to ignore padding rows.
 424:fltk-1.3.4-1/jpeg/jdmainct.c ****      */
 425:fltk-1.3.4-1/jpeg/jdmainct.c ****     if (mainp->iMCU_row_ctr == cinfo->total_iMCU_rows)
 426:fltk-1.3.4-1/jpeg/jdmainct.c ****       set_bottom_pointers(cinfo);
 427:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->context_state = CTX_PROCESS_IMCU;
 428:fltk-1.3.4-1/jpeg/jdmainct.c ****     /*FALLTHROUGH*/
 429:fltk-1.3.4-1/jpeg/jdmainct.c ****   case CTX_PROCESS_IMCU:
 430:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* Call postprocessor using previously set pointers */
 431:fltk-1.3.4-1/jpeg/jdmainct.c ****     (*cinfo->post->post_process_data) (cinfo, mainp->xbuffer[mainp->whichptr],
 432:fltk-1.3.4-1/jpeg/jdmainct.c **** 			&mainp->rowgroup_ctr, mainp->rowgroups_avail,
 433:fltk-1.3.4-1/jpeg/jdmainct.c **** 			output_buf, out_row_ctr, out_rows_avail);
 434:fltk-1.3.4-1/jpeg/jdmainct.c ****     if (mainp->rowgroup_ctr < mainp->rowgroups_avail)
 435:fltk-1.3.4-1/jpeg/jdmainct.c ****       return;			/* Need to suspend */
 436:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* After the first iMCU, change wraparound pointers to normal state */
 437:fltk-1.3.4-1/jpeg/jdmainct.c ****     if (mainp->iMCU_row_ctr == 1)
 438:fltk-1.3.4-1/jpeg/jdmainct.c ****       set_wraparound_pointers(cinfo);
 439:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* Prepare to load new iMCU row using other xbuffer list */
 440:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->whichptr ^= 1;	/* 0=>1 or 1=>0 */
 441:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->buffer_full = FALSE;
 442:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* Still need to process last row group of this iMCU row, */
 443:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* which is saved at index M+1 of the other xbuffer */
 444:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 445:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 446:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->context_state = CTX_POSTPONED_ROW;
 447:fltk-1.3.4-1/jpeg/jdmainct.c ****   }
 448:fltk-1.3.4-1/jpeg/jdmainct.c **** }
 207              		.loc 1 448 1 view .LVU49
 208 006c 4883C418 		addq	$24, %rsp
 209              		.cfi_remember_state
 210              		.cfi_def_cfa_offset 56
 211 0070 5B       		popq	%rbx
 212              		.cfi_def_cfa_offset 48
 213              	.LVL18:
 214              		.loc 1 448 1 view .LVU50
 215 0071 5D       		popq	%rbp
 216              		.cfi_def_cfa_offset 40
 217              	.LVL19:
 218              		.loc 1 448 1 view .LVU51
 219 0072 415C     		popq	%r12
 220              		.cfi_def_cfa_offset 32
 221              	.LVL20:
 222              		.loc 1 448 1 view .LVU52
 223 0074 415D     		popq	%r13
 224              		.cfi_def_cfa_offset 24
 225              	.LVL21:
 226              		.loc 1 448 1 view .LVU53
 227 0076 415E     		popq	%r14
 228              		.cfi_def_cfa_offset 16
 229 0078 415F     		popq	%r15
 230              		.cfi_def_cfa_offset 8
 231              	.LVL22:
 232              		.loc 1 448 1 view .LVU54
 233 007a C3       		ret
 234              	.LVL23:
 235 007b 0F1F4400 		.p2align 4,,10
 235      00
 236              		.p2align 3
 237              	.L37:
 238              		.cfi_restore_state
 239              		.loc 1 448 1 view .LVU55
 240 0080 4C8D7364 		leaq	100(%rbx), %r14
 241              	.L16:
 420:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 242              		.loc 1 420 5 is_stmt 1 view .LVU56
 420:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 243              		.loc 1 420 25 is_stmt 0 view .LVU57
 244 0084 C7436400 		movl	$0, 100(%rbx)
 244      000000
 421:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* Check for bottom of image: if so, tweak pointers to "duplicate"
 245              		.loc 1 421 5 is_stmt 1 view .LVU58
 421:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* Check for bottom of image: if so, tweak pointers to "duplicate"
 246              		.loc 1 421 73 is_stmt 0 view .LVU59
 247 008b 8B85AC01 		movl	428(%rbp), %eax
 247      0000
 248 0091 8D48FF   		leal	-1(%rax), %ecx
 421:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* Check for bottom of image: if so, tweak pointers to "duplicate"
 249              		.loc 1 421 28 view .LVU60
 250 0094 898B8000 		movl	%ecx, 128(%rbx)
 250      0000
 425:fltk-1.3.4-1/jpeg/jdmainct.c ****       set_bottom_pointers(cinfo);
 251              		.loc 1 425 5 is_stmt 1 view .LVU61
 425:fltk-1.3.4-1/jpeg/jdmainct.c ****       set_bottom_pointers(cinfo);
 252              		.loc 1 425 8 is_stmt 0 view .LVU62
 253 009a 8B85B001 		movl	432(%rbp), %eax
 253      0000
 254 00a0 39838400 		cmpl	%eax, 132(%rbx)
 254      0000
 255 00a6 0F84D401 		je	.L38
 255      0000
 256              	.L18:
 427:fltk-1.3.4-1/jpeg/jdmainct.c ****     /*FALLTHROUGH*/
 257              		.loc 1 427 5 is_stmt 1 view .LVU63
 427:fltk-1.3.4-1/jpeg/jdmainct.c ****     /*FALLTHROUGH*/
 258              		.loc 1 427 26 is_stmt 0 view .LVU64
 259 00ac C7437C01 		movl	$1, 124(%rbx)
 259      000000
 260              	.L15:
 431:fltk-1.3.4-1/jpeg/jdmainct.c **** 			&mainp->rowgroup_ctr, mainp->rowgroups_avail,
 261              		.loc 1 431 5 is_stmt 1 view .LVU65
 431:fltk-1.3.4-1/jpeg/jdmainct.c **** 			&mainp->rowgroup_ctr, mainp->rowgroups_avail,
 262              		.loc 1 431 6 is_stmt 0 view .LVU66
 263 00b3 48634378 		movslq	120(%rbx), %rax
 264 00b7 4883EC08 		subq	$8, %rsp
 265              		.cfi_def_cfa_offset 88
 266 00bb 4C89F2   		movq	%r14, %rdx
 267 00be 4D89E1   		movq	%r12, %r9
 268 00c1 4D89F8   		movq	%r15, %r8
 269 00c4 4889EF   		movq	%rbp, %rdi
 270 00c7 488B74C3 		movq	104(%rbx,%rax,8), %rsi
 270      68
 271 00cc 488B8558 		movq	600(%rbp), %rax
 271      020000
 272 00d3 4155     		pushq	%r13
 273              		.cfi_def_cfa_offset 96
 274 00d5 FF5008   		call	*8(%rax)
 275              	.LVL24:
 434:fltk-1.3.4-1/jpeg/jdmainct.c ****       return;			/* Need to suspend */
 276              		.loc 1 434 5 is_stmt 1 view .LVU67
 434:fltk-1.3.4-1/jpeg/jdmainct.c ****       return;			/* Need to suspend */
 277              		.loc 1 434 8 is_stmt 0 view .LVU68
 278 00d8 5A       		popq	%rdx
 279              		.cfi_def_cfa_offset 88
 280 00d9 8B838000 		movl	128(%rbx), %eax
 280      0000
 281 00df 59       		popq	%rcx
 282              		.cfi_def_cfa_offset 80
 283 00e0 394364   		cmpl	%eax, 100(%rbx)
 284 00e3 7287     		jb	.L8
 437:fltk-1.3.4-1/jpeg/jdmainct.c ****       set_wraparound_pointers(cinfo);
 285              		.loc 1 437 5 is_stmt 1 view .LVU69
 437:fltk-1.3.4-1/jpeg/jdmainct.c ****       set_wraparound_pointers(cinfo);
 286              		.loc 1 437 8 is_stmt 0 view .LVU70
 287 00e5 83BB8400 		cmpl	$1, 132(%rbx)
 287      000001
 288 00ec 0F84AE00 		je	.L39
 288      0000
 289              	.LVL25:
 290              	.L26:
 440:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->buffer_full = FALSE;
 291              		.loc 1 440 5 is_stmt 1 view .LVU71
 440:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->buffer_full = FALSE;
 292              		.loc 1 440 21 is_stmt 0 view .LVU72
 293 00f2 83737801 		xorl	$1, 120(%rbx)
 441:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* Still need to process last row group of this iMCU row, */
 294              		.loc 1 441 5 is_stmt 1 view .LVU73
 441:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* Still need to process last row group of this iMCU row, */
 295              		.loc 1 441 24 is_stmt 0 view .LVU74
 296 00f6 C7436000 		movl	$0, 96(%rbx)
 296      000000
 444:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 297              		.loc 1 444 5 is_stmt 1 view .LVU75
 444:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 298              		.loc 1 444 70 is_stmt 0 view .LVU76
 299 00fd 8B85AC01 		movl	428(%rbp), %eax
 299      0000
 300 0103 83C001   		addl	$1, %eax
 444:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 301              		.loc 1 444 25 view .LVU77
 302 0106 894364   		movl	%eax, 100(%rbx)
 445:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->context_state = CTX_POSTPONED_ROW;
 303              		.loc 1 445 5 is_stmt 1 view .LVU78
 445:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->context_state = CTX_POSTPONED_ROW;
 304              		.loc 1 445 73 is_stmt 0 view .LVU79
 305 0109 8B85AC01 		movl	428(%rbp), %eax
 305      0000
 446:fltk-1.3.4-1/jpeg/jdmainct.c ****   }
 306              		.loc 1 446 26 view .LVU80
 307 010f C7437C02 		movl	$2, 124(%rbx)
 307      000000
 445:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->context_state = CTX_POSTPONED_ROW;
 308              		.loc 1 445 73 view .LVU81
 309 0116 83C002   		addl	$2, %eax
 445:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->context_state = CTX_POSTPONED_ROW;
 310              		.loc 1 445 28 view .LVU82
 311 0119 89838000 		movl	%eax, 128(%rbx)
 311      0000
 446:fltk-1.3.4-1/jpeg/jdmainct.c ****   }
 312              		.loc 1 446 5 is_stmt 1 view .LVU83
 313              		.loc 1 448 1 is_stmt 0 view .LVU84
 314 011f 4883C418 		addq	$24, %rsp
 315              		.cfi_remember_state
 316              		.cfi_def_cfa_offset 56
 317 0123 5B       		popq	%rbx
 318              		.cfi_def_cfa_offset 48
 319 0124 5D       		popq	%rbp
 320              		.cfi_def_cfa_offset 40
 321              	.LVL26:
 322              		.loc 1 448 1 view .LVU85
 323 0125 415C     		popq	%r12
 324              		.cfi_def_cfa_offset 32
 325 0127 415D     		popq	%r13
 326              		.cfi_def_cfa_offset 24
 327 0129 415E     		popq	%r14
 328              		.cfi_def_cfa_offset 16
 329 012b 415F     		popq	%r15
 330              		.cfi_def_cfa_offset 8
 331 012d C3       		ret
 332              	.LVL27:
 333 012e 6690     		.p2align 4,,10
 334              		.p2align 3
 335              	.L13:
 336              		.cfi_restore_state
 409:fltk-1.3.4-1/jpeg/jdmainct.c **** 			&mainp->rowgroup_ctr, mainp->rowgroups_avail,
 337              		.loc 1 409 5 is_stmt 1 view .LVU86
 409:fltk-1.3.4-1/jpeg/jdmainct.c **** 			&mainp->rowgroup_ctr, mainp->rowgroups_avail,
 338              		.loc 1 409 6 is_stmt 0 view .LVU87
 339 0130 48634378 		movslq	120(%rbx), %rax
 340 0134 4883EC08 		subq	$8, %rsp
 341              		.cfi_def_cfa_offset 88
 342 0138 4C8D7364 		leaq	100(%rbx), %r14
 343 013c 4D89E1   		movq	%r12, %r9
 344 013f 8B8B8000 		movl	128(%rbx), %ecx
 344      0000
 345 0145 4D89F8   		movq	%r15, %r8
 346 0148 4C89F2   		movq	%r14, %rdx
 347 014b 4889EF   		movq	%rbp, %rdi
 348 014e 488B74C3 		movq	104(%rbx,%rax,8), %rsi
 348      68
 349 0153 488B8558 		movq	600(%rbp), %rax
 349      020000
 350 015a 4155     		pushq	%r13
 351              		.cfi_def_cfa_offset 96
 352 015c FF5008   		call	*8(%rax)
 353              	.LVL28:
 412:fltk-1.3.4-1/jpeg/jdmainct.c ****       return;			/* Need to suspend */
 354              		.loc 1 412 5 is_stmt 1 view .LVU88
 412:fltk-1.3.4-1/jpeg/jdmainct.c ****       return;			/* Need to suspend */
 355              		.loc 1 412 8 is_stmt 0 view .LVU89
 356 015f 4158     		popq	%r8
 357              		.cfi_def_cfa_offset 88
 358 0161 8B838000 		movl	128(%rbx), %eax
 358      0000
 359 0167 4159     		popq	%r9
 360              		.cfi_def_cfa_offset 80
 361 0169 394364   		cmpl	%eax, 100(%rbx)
 362 016c 0F82FAFE 		jb	.L8
 362      FFFF
 414:fltk-1.3.4-1/jpeg/jdmainct.c ****     if (*out_row_ctr >= out_rows_avail)
 363              		.loc 1 414 5 is_stmt 1 view .LVU90
 414:fltk-1.3.4-1/jpeg/jdmainct.c ****     if (*out_row_ctr >= out_rows_avail)
 364              		.loc 1 414 26 is_stmt 0 view .LVU91
 365 0172 C7437C00 		movl	$0, 124(%rbx)
 365      000000
 415:fltk-1.3.4-1/jpeg/jdmainct.c ****       return;			/* Postprocessor exactly filled output buf */
 366              		.loc 1 415 5 is_stmt 1 view .LVU92
 415:fltk-1.3.4-1/jpeg/jdmainct.c ****       return;			/* Postprocessor exactly filled output buf */
 367              		.loc 1 415 8 is_stmt 0 view .LVU93
 368 0179 45392C24 		cmpl	%r13d, (%r12)
 369 017d 0F8201FF 		jb	.L16
 369      FFFF
 370 0183 E9E4FEFF 		jmp	.L8
 370      FF
 371 0188 0F1F8400 		.p2align 4,,10
 371      00000000 
 372              		.p2align 3
 373              	.L12:
 415:fltk-1.3.4-1/jpeg/jdmainct.c ****       return;			/* Postprocessor exactly filled output buf */
 374              		.loc 1 415 8 view .LVU94
 375 0190 8B8B8000 		movl	128(%rbx), %ecx
 375      0000
 376 0196 4C8D7364 		leaq	100(%rbx), %r14
 377 019a E914FFFF 		jmp	.L15
 377      FF
 378 019f 90       		.p2align 4,,10
 379              		.p2align 3
 380              	.L39:
 438:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* Prepare to load new iMCU row using other xbuffer list */
 381              		.loc 1 438 7 is_stmt 1 view .LVU95
 382              	.LVL29:
 383              	.LBB6:
 384              	.LBI6:
 239:fltk-1.3.4-1/jpeg/jdmainct.c **** /* Set up the "wraparound" pointers at top and bottom of the pointer lists.
 385              		.loc 1 239 1 view .LVU96
 386              	.LBB7:
 244:fltk-1.3.4-1/jpeg/jdmainct.c ****   int ci, i, rgroup;
 387              		.loc 1 244 3 view .LVU97
 250:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 388              		.loc 1 250 3 is_stmt 0 view .LVU98
 389 01a0 8B4538   		movl	56(%rbp), %eax
 244:fltk-1.3.4-1/jpeg/jdmainct.c ****   int ci, i, rgroup;
 390              		.loc 1 244 15 view .LVU99
 391 01a3 4C8BBD48 		movq	584(%rbp), %r15
 391      020000
 392              	.LVL30:
 245:fltk-1.3.4-1/jpeg/jdmainct.c ****   int M = cinfo->min_DCT_v_scaled_size;
 393              		.loc 1 245 3 is_stmt 1 view .LVU100
 246:fltk-1.3.4-1/jpeg/jdmainct.c ****   jpeg_component_info *compptr;
 394              		.loc 1 246 3 view .LVU101
 246:fltk-1.3.4-1/jpeg/jdmainct.c ****   jpeg_component_info *compptr;
 395              		.loc 1 246 7 is_stmt 0 view .LVU102
 396 01aa 8B8DAC01 		movl	428(%rbp), %ecx
 396      0000
 397              	.LVL31:
 247:fltk-1.3.4-1/jpeg/jdmainct.c ****   JSAMPARRAY xbuf0, xbuf1;
 398              		.loc 1 247 3 is_stmt 1 view .LVU103
 248:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 399              		.loc 1 248 3 view .LVU104
 250:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 400              		.loc 1 250 3 view .LVU105
 250:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 401              		.loc 1 250 24 is_stmt 0 view .LVU106
 402 01b0 4C8B9530 		movq	304(%rbp), %r10
 402      010000
 403              	.LVL32:
 250:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 404              		.loc 1 250 44 is_stmt 1 view .LVU107
 250:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 405              		.loc 1 250 3 is_stmt 0 view .LVU108
 406 01b7 85C0     		testl	%eax, %eax
 407 01b9 0F8E33FF 		jle	.L26
 407      FFFF
 257:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 408              		.loc 1 257 42 view .LVU109
 409 01bf 8D4101   		leal	1(%rcx), %eax
 410 01c2 48895C24 		movq	%rbx, 8(%rsp)
 410      08
 250:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 411              		.loc 1 250 3 view .LVU110
 412 01c7 4531C9   		xorl	%r9d, %r9d
 257:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 413              		.loc 1 257 42 view .LVU111
 414 01ca 89442404 		movl	%eax, 4(%rsp)
 415              	.LVL33:
 416 01ce 6690     		.p2align 4,,10
 417              		.p2align 3
 418              	.L31:
 252:fltk-1.3.4-1/jpeg/jdmainct.c ****       cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 419              		.loc 1 252 5 is_stmt 1 view .LVU112
 252:fltk-1.3.4-1/jpeg/jdmainct.c ****       cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 420              		.loc 1 252 38 is_stmt 0 view .LVU113
 421 01d0 418B420C 		movl	12(%r10), %eax
 422 01d4 410FAF42 		imull	40(%r10), %eax
 422      28
 252:fltk-1.3.4-1/jpeg/jdmainct.c ****       cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 423              		.loc 1 252 12 view .LVU114
 424 01d9 99       		cltd
 425 01da F7F9     		idivl	%ecx
 426              	.LVL34:
 254:fltk-1.3.4-1/jpeg/jdmainct.c ****     xbuf1 = mainp->xbuffer[1][ci];
 427              		.loc 1 254 5 is_stmt 1 view .LVU115
 254:fltk-1.3.4-1/jpeg/jdmainct.c ****     xbuf1 = mainp->xbuffer[1][ci];
 428              		.loc 1 254 11 is_stmt 0 view .LVU116
 429 01dc 498B5768 		movq	104(%r15), %rdx
 430 01e0 4E8B04CA 		movq	(%rdx,%r9,8), %r8
 431              	.LVL35:
 255:fltk-1.3.4-1/jpeg/jdmainct.c ****     for (i = 0; i < rgroup; i++) {
 432              		.loc 1 255 5 is_stmt 1 view .LVU117
 255:fltk-1.3.4-1/jpeg/jdmainct.c ****     for (i = 0; i < rgroup; i++) {
 433              		.loc 1 255 11 is_stmt 0 view .LVU118
 434 01e4 498B5770 		movq	112(%r15), %rdx
 435 01e8 4A8B3CCA 		movq	(%rdx,%r9,8), %rdi
 436              	.LVL36:
 256:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 437              		.loc 1 256 5 is_stmt 1 view .LVU119
 256:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 438              		.loc 1 256 17 view .LVU120
 256:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 439              		.loc 1 256 5 is_stmt 0 view .LVU121
 440 01ec 85C0     		testl	%eax, %eax
 441 01ee 7E6D     		jle	.L30
 257:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 442              		.loc 1 257 39 view .LVU122
 443 01f0 8B542404 		movl	4(%rsp), %edx
 444 01f4 89C1     		movl	%eax, %ecx
 445 01f6 448D70FF 		leal	-1(%rax), %r14d
 446 01fa F7D9     		negl	%ecx
 447 01fc 0FAFD0   		imull	%eax, %edx
 448 01ff 4863C9   		movslq	%ecx, %rcx
 449 0202 48C1E103 		salq	$3, %rcx
 450 0206 4D8D2408 		leaq	(%r8,%rcx), %r12
 451 020a 4801F9   		addq	%rdi, %rcx
 452 020d 4863F2   		movslq	%edx, %rsi
 259:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 453              		.loc 1 259 19 view .LVU123
 454 0210 01C2     		addl	%eax, %edx
 455 0212 31C0     		xorl	%eax, %eax
 456              	.LVL37:
 259:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 457              		.loc 1 259 19 view .LVU124
 458 0214 4863D2   		movslq	%edx, %rdx
 459 0217 48C1E603 		salq	$3, %rsi
 460 021b 48C1E203 		salq	$3, %rdx
 461 021f 4D8D2C30 		leaq	(%r8,%rsi), %r13
 462 0223 4801FE   		addq	%rdi, %rsi
 463 0226 498D1C10 		leaq	(%r8,%rdx), %rbx
 464 022a 4801FA   		addq	%rdi, %rdx
 465              	.LVL38:
 466 022d 0F1F00   		.p2align 4,,10
 467              		.p2align 3
 468              	.L29:
 257:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 469              		.loc 1 257 7 is_stmt 1 view .LVU125
 257:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 470              		.loc 1 257 32 is_stmt 0 view .LVU126
 471 0230 4D8B5CC5 		movq	0(%r13,%rax,8), %r11
 471      00
 257:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 472              		.loc 1 257 25 view .LVU127
 473 0235 4D891CC4 		movq	%r11, (%r12,%rax,8)
 258:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 474              		.loc 1 258 7 is_stmt 1 view .LVU128
 258:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 475              		.loc 1 258 32 is_stmt 0 view .LVU129
 476 0239 4C8B1CC6 		movq	(%rsi,%rax,8), %r11
 258:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 477              		.loc 1 258 25 view .LVU130
 478 023d 4C891CC1 		movq	%r11, (%rcx,%rax,8)
 259:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 479              		.loc 1 259 7 is_stmt 1 view .LVU131
 259:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 480              		.loc 1 259 38 is_stmt 0 view .LVU132
 481 0241 4D8B1CC0 		movq	(%r8,%rax,8), %r11
 259:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 482              		.loc 1 259 31 view .LVU133
 483 0245 4C891CC3 		movq	%r11, (%rbx,%rax,8)
 260:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 484              		.loc 1 260 7 is_stmt 1 view .LVU134
 260:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 485              		.loc 1 260 38 is_stmt 0 view .LVU135
 486 0249 4C8B1CC7 		movq	(%rdi,%rax,8), %r11
 260:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 487              		.loc 1 260 31 view .LVU136
 488 024d 4C891CC2 		movq	%r11, (%rdx,%rax,8)
 256:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 489              		.loc 1 256 29 is_stmt 1 view .LVU137
 490              	.LVL39:
 256:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 491              		.loc 1 256 17 view .LVU138
 492 0251 4989C3   		movq	%rax, %r11
 493 0254 4883C001 		addq	$1, %rax
 494              	.LVL40:
 256:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 495              		.loc 1 256 5 is_stmt 0 view .LVU139
 496 0258 4D39F3   		cmpq	%r14, %r11
 497 025b 75D3     		jne	.L29
 498              	.L30:
 251:fltk-1.3.4-1/jpeg/jdmainct.c ****     rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 499              		.loc 1 251 8 is_stmt 1 view .LVU140
 500              	.LVL41:
 251:fltk-1.3.4-1/jpeg/jdmainct.c ****     rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 501              		.loc 1 251 21 is_stmt 0 view .LVU141
 502 025d 4983C260 		addq	$96, %r10
 503              	.LVL42:
 250:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 504              		.loc 1 250 44 is_stmt 1 view .LVU142
 505 0261 4983C101 		addq	$1, %r9
 506              	.LVL43:
 250:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 507              		.loc 1 250 3 is_stmt 0 view .LVU143
 508 0265 44394D38 		cmpl	%r9d, 56(%rbp)
 509 0269 0F8ED100 		jle	.L40
 509      0000
 510 026f 8B8DAC01 		movl	428(%rbp), %ecx
 510      0000
 511 0275 E956FFFF 		jmp	.L31
 511      FF
 512              	.LVL44:
 513 027a 660F1F44 		.p2align 4,,10
 513      0000
 514              		.p2align 3
 515              	.L38:
 250:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 516              		.loc 1 250 3 view .LVU144
 517              	.LBE7:
 518              	.LBE6:
 426:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->context_state = CTX_PROCESS_IMCU;
 519              		.loc 1 426 7 is_stmt 1 view .LVU145
 520              	.LBB9:
 521              	.LBI9:
 267:fltk-1.3.4-1/jpeg/jdmainct.c **** /* Change the pointer lists to duplicate the last sample row at the bottom
 522              		.loc 1 267 1 view .LVU146
 523              	.LBB10:
 273:fltk-1.3.4-1/jpeg/jdmainct.c ****   int ci, i, rgroup, iMCUheight, rows_left;
 524              		.loc 1 273 3 view .LVU147
 278:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 525              		.loc 1 278 3 is_stmt 0 view .LVU148
 526 0280 8B7D38   		movl	56(%rbp), %edi
 273:fltk-1.3.4-1/jpeg/jdmainct.c ****   int ci, i, rgroup, iMCUheight, rows_left;
 527              		.loc 1 273 15 view .LVU149
 528 0283 4C8B8D48 		movq	584(%rbp), %r9
 528      020000
 529              	.LVL45:
 274:fltk-1.3.4-1/jpeg/jdmainct.c ****   jpeg_component_info *compptr;
 530              		.loc 1 274 3 is_stmt 1 view .LVU150
 275:fltk-1.3.4-1/jpeg/jdmainct.c ****   JSAMPARRAY xbuf;
 531              		.loc 1 275 3 view .LVU151
 276:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 532              		.loc 1 276 3 view .LVU152
 278:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 533              		.loc 1 278 3 view .LVU153
 278:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 534              		.loc 1 278 24 is_stmt 0 view .LVU154
 535 028a 488BB530 		movq	304(%rbp), %rsi
 535      010000
 536              	.LVL46:
 278:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 537              		.loc 1 278 44 is_stmt 1 view .LVU155
 278:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 538              		.loc 1 278 3 is_stmt 0 view .LVU156
 539 0291 85FF     		testl	%edi, %edi
 540 0293 0F8E13FE 		jle	.L18
 540      FFFF
 541 0299 4531C0   		xorl	%r8d, %r8d
 278:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 542              		.loc 1 278 11 view .LVU157
 543 029c 31FF     		xorl	%edi, %edi
 544              	.LVL47:
 545 029e 6690     		.p2align 4,,10
 546              		.p2align 3
 547              	.L22:
 281:fltk-1.3.4-1/jpeg/jdmainct.c ****     rgroup = iMCUheight / cinfo->min_DCT_v_scaled_size;
 548              		.loc 1 281 5 is_stmt 1 view .LVU158
 281:fltk-1.3.4-1/jpeg/jdmainct.c ****     rgroup = iMCUheight / cinfo->min_DCT_v_scaled_size;
 549              		.loc 1 281 16 is_stmt 0 view .LVU159
 550 02a0 8B4E0C   		movl	12(%rsi), %ecx
 551 02a3 0FAF4E28 		imull	40(%rsi), %ecx
 552              	.LVL48:
 282:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* Count nondummy sample rows remaining for this component */
 553              		.loc 1 282 5 is_stmt 1 view .LVU160
 282:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* Count nondummy sample rows remaining for this component */
 554              		.loc 1 282 12 is_stmt 0 view .LVU161
 555 02a7 89C8     		movl	%ecx, %eax
 556 02a9 99       		cltd
 557 02aa F7BDAC01 		idivl	428(%rbp)
 557      0000
 284:fltk-1.3.4-1/jpeg/jdmainct.c ****     if (rows_left == 0) rows_left = iMCUheight;
 558              		.loc 1 284 52 view .LVU162
 559 02b0 31D2     		xorl	%edx, %edx
 282:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* Count nondummy sample rows remaining for this component */
 560              		.loc 1 282 12 view .LVU163
 561 02b2 4189C2   		movl	%eax, %r10d
 562              	.LVL49:
 284:fltk-1.3.4-1/jpeg/jdmainct.c ****     if (rows_left == 0) rows_left = iMCUheight;
 563              		.loc 1 284 5 is_stmt 1 view .LVU164
 284:fltk-1.3.4-1/jpeg/jdmainct.c ****     if (rows_left == 0) rows_left = iMCUheight;
 564              		.loc 1 284 52 is_stmt 0 view .LVU165
 565 02b5 8B4630   		movl	48(%rsi), %eax
 566              	.LVL50:
 284:fltk-1.3.4-1/jpeg/jdmainct.c ****     if (rows_left == 0) rows_left = iMCUheight;
 567              		.loc 1 284 52 view .LVU166
 568 02b8 F7F1     		divl	%ecx
 569              	.LVL51:
 285:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* Count nondummy row groups.  Should get same answer for each component,
 570              		.loc 1 285 5 is_stmt 1 view .LVU167
 285:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* Count nondummy row groups.  Should get same answer for each component,
 571              		.loc 1 285 35 is_stmt 0 view .LVU168
 572 02ba 85D2     		testl	%edx, %edx
 573 02bc 0F45CA   		cmovne	%edx, %ecx
 574              	.LVL52:
 289:fltk-1.3.4-1/jpeg/jdmainct.c ****       mainp->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
 575              		.loc 1 289 5 is_stmt 1 view .LVU169
 289:fltk-1.3.4-1/jpeg/jdmainct.c ****       mainp->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
 576              		.loc 1 289 8 is_stmt 0 view .LVU170
 577 02bf 85FF     		testl	%edi, %edi
 578 02c1 7511     		jne	.L20
 290:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 579              		.loc 1 290 7 is_stmt 1 view .LVU171
 290:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 580              		.loc 1 290 56 is_stmt 0 view .LVU172
 581 02c3 8D41FF   		leal	-1(%rcx), %eax
 290:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 582              		.loc 1 290 60 view .LVU173
 583 02c6 99       		cltd
 584 02c7 41F7FA   		idivl	%r10d
 290:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 585              		.loc 1 290 69 view .LVU174
 586 02ca 83C001   		addl	$1, %eax
 587 02cd 41898180 		movl	%eax, 128(%r9)
 587      000000
 588              	.LVL53:
 589              	.L20:
 295:fltk-1.3.4-1/jpeg/jdmainct.c ****     for (i = 0; i < rgroup * 2; i++) {
 590              		.loc 1 295 5 is_stmt 1 view .LVU175
 295:fltk-1.3.4-1/jpeg/jdmainct.c ****     for (i = 0; i < rgroup * 2; i++) {
 591              		.loc 1 295 26 is_stmt 0 view .LVU176
 592 02d4 49634178 		movslq	120(%r9), %rax
 295:fltk-1.3.4-1/jpeg/jdmainct.c ****     for (i = 0; i < rgroup * 2; i++) {
 593              		.loc 1 295 10 view .LVU177
 594 02d8 498B44C1 		movq	104(%r9,%rax,8), %rax
 594      68
 595 02dd 4E8B1C00 		movq	(%rax,%r8), %r11
 596              	.LVL54:
 296:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf[rows_left + i] = xbuf[rows_left-1];
 597              		.loc 1 296 5 is_stmt 1 view .LVU178
 296:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf[rows_left + i] = xbuf[rows_left-1];
 598              		.loc 1 296 17 view .LVU179
 296:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf[rows_left + i] = xbuf[rows_left-1];
 599              		.loc 1 296 28 is_stmt 0 view .LVU180
 600 02e1 438D0412 		leal	(%r10,%r10), %eax
 296:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf[rows_left + i] = xbuf[rows_left-1];
 601              		.loc 1 296 5 view .LVU181
 602 02e5 85C0     		testl	%eax, %eax
 603 02e7 7E37     		jle	.L25
 297:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 604              		.loc 1 297 33 view .LVU182
 605 02e9 4863D1   		movslq	%ecx, %rdx
 606 02ec 83E801   		subl	$1, %eax
 607 02ef 488D0CD5 		leaq	0(,%rdx,8), %rcx
 607      00000000 
 608              	.LVL55:
 297:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 609              		.loc 1 297 33 view .LVU183
 610 02f7 4801C2   		addq	%rax, %rdx
 611              	.LVL56:
 297:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 612              		.loc 1 297 33 view .LVU184
 613 02fa 4D8D540B 		leaq	-8(%r11,%rcx), %r10
 613      F8
 614              	.LVL57:
 297:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 615              		.loc 1 297 33 view .LVU185
 616 02ff 498D54D3 		leaq	8(%r11,%rdx,8), %rdx
 616      08
 617 0304 4C01D9   		addq	%r11, %rcx
 618              	.LVL58:
 619 0307 660F1F84 		.p2align 4,,10
 619      00000000 
 619      00
 620              		.p2align 3
 621              	.L24:
 297:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 622              		.loc 1 297 7 is_stmt 1 view .LVU186
 297:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 623              		.loc 1 297 33 is_stmt 0 view .LVU187
 624 0310 498B02   		movq	(%r10), %rax
 625 0313 4883C108 		addq	$8, %rcx
 297:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 626              		.loc 1 297 27 view .LVU188
 627 0317 488941F8 		movq	%rax, -8(%rcx)
 296:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf[rows_left + i] = xbuf[rows_left-1];
 628              		.loc 1 296 33 is_stmt 1 view .LVU189
 296:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf[rows_left + i] = xbuf[rows_left-1];
 629              		.loc 1 296 17 view .LVU190
 296:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf[rows_left + i] = xbuf[rows_left-1];
 630              		.loc 1 296 5 is_stmt 0 view .LVU191
 631 031b 4839CA   		cmpq	%rcx, %rdx
 632 031e 75F0     		jne	.L24
 633              	.L25:
 279:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* Count sample rows in one iMCU row and in one row group */
 634              		.loc 1 279 8 is_stmt 1 view .LVU192
 279:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* Count sample rows in one iMCU row and in one row group */
 635              		.loc 1 279 10 is_stmt 0 view .LVU193
 636 0320 83C701   		addl	$1, %edi
 637              	.LVL59:
 279:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* Count sample rows in one iMCU row and in one row group */
 638              		.loc 1 279 21 view .LVU194
 639 0323 4883C660 		addq	$96, %rsi
 640              	.LVL60:
 278:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 641              		.loc 1 278 44 is_stmt 1 view .LVU195
 642 0327 4983C008 		addq	$8, %r8
 278:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 643              		.loc 1 278 3 is_stmt 0 view .LVU196
 644 032b 3B7D38   		cmpl	56(%rbp), %edi
 645 032e 0F8C6CFF 		jl	.L22
 645      FFFF
 646 0334 8B8B8000 		movl	128(%rbx), %ecx
 646      0000
 647 033a E96DFDFF 		jmp	.L18
 647      FF
 648              	.LVL61:
 649 033f 90       		.p2align 4,,10
 650              		.p2align 3
 651              	.L40:
 278:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 652              		.loc 1 278 3 view .LVU197
 653 0340 488B5C24 		movq	8(%rsp), %rbx
 653      08
 654              	.LBE10:
 655              	.LBE9:
 656              	.LBB11:
 657              	.LBB8:
 658 0345 E9A8FDFF 		jmp	.L26
 658      FF
 659              	.LBE8:
 660              	.LBE11:
 661              		.cfi_endproc
 662              	.LFE57:
 664              		.section	.text.process_data_crank_post,"ax",@progbits
 665              		.p2align 4
 667              	process_data_crank_post:
 668              	.LVL62:
 669              	.LFB58:
 449:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 450:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 451:fltk-1.3.4-1/jpeg/jdmainct.c **** /*
 452:fltk-1.3.4-1/jpeg/jdmainct.c ****  * Process some data.
 453:fltk-1.3.4-1/jpeg/jdmainct.c ****  * Final pass of two-pass quantization: just call the postprocessor.
 454:fltk-1.3.4-1/jpeg/jdmainct.c ****  * Source data will be the postprocessor controller's internal buffer.
 455:fltk-1.3.4-1/jpeg/jdmainct.c ****  */
 456:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 457:fltk-1.3.4-1/jpeg/jdmainct.c **** #ifdef QUANT_2PASS_SUPPORTED
 458:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 459:fltk-1.3.4-1/jpeg/jdmainct.c **** METHODDEF(void)
 460:fltk-1.3.4-1/jpeg/jdmainct.c **** process_data_crank_post (j_decompress_ptr cinfo,
 461:fltk-1.3.4-1/jpeg/jdmainct.c **** 			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
 462:fltk-1.3.4-1/jpeg/jdmainct.c **** 			 JDIMENSION out_rows_avail)
 463:fltk-1.3.4-1/jpeg/jdmainct.c **** {
 670              		.loc 1 463 1 is_stmt 1 view -0
 671              		.cfi_startproc
 672              		.loc 1 463 1 is_stmt 0 view .LVU199
 673 0000 F30F1EFA 		endbr64
 464:fltk-1.3.4-1/jpeg/jdmainct.c ****   (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
 674              		.loc 1 464 3 is_stmt 1 view .LVU200
 463:fltk-1.3.4-1/jpeg/jdmainct.c ****   (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
 675              		.loc 1 463 1 is_stmt 0 view .LVU201
 676 0004 4883EC10 		subq	$16, %rsp
 677              		.cfi_def_cfa_offset 24
 678              		.loc 1 464 4 view .LVU202
 679 0008 488B8758 		movq	600(%rdi), %rax
 679      020000
 463:fltk-1.3.4-1/jpeg/jdmainct.c ****   (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
 680              		.loc 1 463 1 view .LVU203
 681 000f 4989F0   		movq	%rsi, %r8
 682 0012 4989D1   		movq	%rdx, %r9
 683              		.loc 1 464 4 view .LVU204
 684 0015 51       		pushq	%rcx
 685              		.cfi_def_cfa_offset 32
 686 0016 31D2     		xorl	%edx, %edx
 687              	.LVL63:
 688              		.loc 1 464 4 view .LVU205
 689 0018 31C9     		xorl	%ecx, %ecx
 690              	.LVL64:
 691              		.loc 1 464 4 view .LVU206
 692 001a 31F6     		xorl	%esi, %esi
 693              	.LVL65:
 694              		.loc 1 464 4 view .LVU207
 695 001c FF5008   		call	*8(%rax)
 696              	.LVL66:
 465:fltk-1.3.4-1/jpeg/jdmainct.c **** 				     (JDIMENSION *) NULL, (JDIMENSION) 0,
 466:fltk-1.3.4-1/jpeg/jdmainct.c **** 				     output_buf, out_row_ctr, out_rows_avail);
 467:fltk-1.3.4-1/jpeg/jdmainct.c **** }
 697              		.loc 1 467 1 view .LVU208
 698 001f 4883C418 		addq	$24, %rsp
 699              		.cfi_def_cfa_offset 8
 700 0023 C3       		ret
 701              		.cfi_endproc
 702              	.LFE58:
 704              		.section	.text.start_pass_main,"ax",@progbits
 705              		.p2align 4
 707              	start_pass_main:
 708              	.LVL67:
 709              	.LFB55:
 309:fltk-1.3.4-1/jpeg/jdmainct.c ****   my_main_ptr mainp = (my_main_ptr) cinfo->main;
 710              		.loc 1 309 1 is_stmt 1 view -0
 711              		.cfi_startproc
 309:fltk-1.3.4-1/jpeg/jdmainct.c ****   my_main_ptr mainp = (my_main_ptr) cinfo->main;
 712              		.loc 1 309 1 is_stmt 0 view .LVU210
 713 0000 F30F1EFA 		endbr64
 310:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 714              		.loc 1 310 3 is_stmt 1 view .LVU211
 309:fltk-1.3.4-1/jpeg/jdmainct.c ****   my_main_ptr mainp = (my_main_ptr) cinfo->main;
 715              		.loc 1 309 1 is_stmt 0 view .LVU212
 716 0004 4157     		pushq	%r15
 717              		.cfi_def_cfa_offset 16
 718              		.cfi_offset 15, -16
 719 0006 4156     		pushq	%r14
 720              		.cfi_def_cfa_offset 24
 721              		.cfi_offset 14, -24
 722 0008 4155     		pushq	%r13
 723              		.cfi_def_cfa_offset 32
 724              		.cfi_offset 13, -32
 725 000a 4154     		pushq	%r12
 726              		.cfi_def_cfa_offset 40
 727              		.cfi_offset 12, -40
 728 000c 55       		pushq	%rbp
 729              		.cfi_def_cfa_offset 48
 730              		.cfi_offset 6, -48
 310:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 731              		.loc 1 310 15 view .LVU213
 732 000d 488BAF48 		movq	584(%rdi), %rbp
 732      020000
 733              	.LVL68:
 312:fltk-1.3.4-1/jpeg/jdmainct.c ****   case JBUF_PASS_THRU:
 734              		.loc 1 312 3 is_stmt 1 view .LVU214
 309:fltk-1.3.4-1/jpeg/jdmainct.c ****   my_main_ptr mainp = (my_main_ptr) cinfo->main;
 735              		.loc 1 309 1 is_stmt 0 view .LVU215
 736 0014 53       		pushq	%rbx
 737              		.cfi_def_cfa_offset 56
 738              		.cfi_offset 3, -56
 312:fltk-1.3.4-1/jpeg/jdmainct.c ****   case JBUF_PASS_THRU:
 739              		.loc 1 312 3 view .LVU216
 740 0015 85F6     		testl	%esi, %esi
 741 0017 7427     		je	.L44
 742 0019 83FE02   		cmpl	$2, %esi
 743 001c 7452     		je	.L45
 744              	.LVL69:
 745              	.LBB16:
 746              	.LBI16:
 308:fltk-1.3.4-1/jpeg/jdmainct.c **** {
 747              		.loc 1 308 1 is_stmt 1 view .LVU217
 748              	.LBB17:
 334:fltk-1.3.4-1/jpeg/jdmainct.c ****     break;
 749              		.loc 1 334 5 view .LVU218
 750 001e 488B07   		movq	(%rdi), %rax
 751 0021 C7402803 		movl	$3, 40(%rax)
 751      000000
 752 0028 488B07   		movq	(%rdi), %rax
 753              	.LBE17:
 754              	.LBE16:
 337:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 755              		.loc 1 337 1 is_stmt 0 view .LVU219
 756 002b 5B       		popq	%rbx
 757              		.cfi_remember_state
 758              		.cfi_def_cfa_offset 48
 759 002c 5D       		popq	%rbp
 760              		.cfi_def_cfa_offset 40
 761              	.LVL70:
 762              	.LBB20:
 763              	.LBB18:
 334:fltk-1.3.4-1/jpeg/jdmainct.c ****     break;
 764              		.loc 1 334 5 view .LVU220
 765 002d 488B00   		movq	(%rax), %rax
 766              	.LBE18:
 767              	.LBE20:
 337:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 768              		.loc 1 337 1 view .LVU221
 769 0030 415C     		popq	%r12
 770              		.cfi_def_cfa_offset 32
 771 0032 415D     		popq	%r13
 772              		.cfi_def_cfa_offset 24
 773 0034 415E     		popq	%r14
 774              		.cfi_def_cfa_offset 16
 775 0036 415F     		popq	%r15
 776              		.cfi_def_cfa_offset 8
 777              	.LBB21:
 778              	.LBB19:
 334:fltk-1.3.4-1/jpeg/jdmainct.c ****     break;
 779              		.loc 1 334 5 view .LVU222
 780 0038 FFE0     		jmp	*%rax
 781              	.LVL71:
 782 003a 660F1F44 		.p2align 4,,10
 782      0000
 783              		.p2align 3
 784              	.L44:
 785              		.cfi_restore_state
 334:fltk-1.3.4-1/jpeg/jdmainct.c ****     break;
 786              		.loc 1 334 5 view .LVU223
 787              	.LBE19:
 788              	.LBE21:
 314:fltk-1.3.4-1/jpeg/jdmainct.c ****       mainp->pub.process_data = process_data_context_main;
 789              		.loc 1 314 5 is_stmt 1 view .LVU224
 314:fltk-1.3.4-1/jpeg/jdmainct.c ****       mainp->pub.process_data = process_data_context_main;
 790              		.loc 1 314 24 is_stmt 0 view .LVU225
 791 0040 488B8780 		movq	640(%rdi), %rax
 791      020000
 314:fltk-1.3.4-1/jpeg/jdmainct.c ****       mainp->pub.process_data = process_data_context_main;
 792              		.loc 1 314 8 view .LVU226
 793 0047 8B5010   		movl	16(%rax), %edx
 794 004a 85D2     		testl	%edx, %edx
 795 004c 7542     		jne	.L68
 322:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 796              		.loc 1 322 7 is_stmt 1 view .LVU227
 322:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 797              		.loc 1 322 31 is_stmt 0 view .LVU228
 798 004e 488D0500 		leaq	process_data_simple_main(%rip), %rax
 798      000000
 799 0055 48894508 		movq	%rax, 8(%rbp)
 800              	.LVL72:
 801              	.L60:
 324:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->rowgroup_ctr = 0;
 802              		.loc 1 324 5 is_stmt 1 view .LVU229
 325:fltk-1.3.4-1/jpeg/jdmainct.c ****     break;
 803              		.loc 1 325 5 view .LVU230
 324:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->rowgroup_ctr = 0;
 804              		.loc 1 324 24 is_stmt 0 view .LVU231
 805 0059 48C74560 		movq	$0, 96(%rbp)
 805      00000000 
 326:fltk-1.3.4-1/jpeg/jdmainct.c **** #ifdef QUANT_2PASS_SUPPORTED
 806              		.loc 1 326 5 is_stmt 1 view .LVU232
 337:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 807              		.loc 1 337 1 is_stmt 0 view .LVU233
 808 0061 5B       		popq	%rbx
 809              		.cfi_remember_state
 810              		.cfi_def_cfa_offset 48
 811 0062 5D       		popq	%rbp
 812              		.cfi_def_cfa_offset 40
 813              	.LVL73:
 337:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 814              		.loc 1 337 1 view .LVU234
 815 0063 415C     		popq	%r12
 816              		.cfi_def_cfa_offset 32
 817 0065 415D     		popq	%r13
 818              		.cfi_def_cfa_offset 24
 819 0067 415E     		popq	%r14
 820              		.cfi_def_cfa_offset 16
 821 0069 415F     		popq	%r15
 822              		.cfi_def_cfa_offset 8
 823 006b C3       		ret
 824              	.LVL74:
 825 006c 0F1F4000 		.p2align 4,,10
 826              		.p2align 3
 827              	.L45:
 828              		.cfi_restore_state
 330:fltk-1.3.4-1/jpeg/jdmainct.c ****     break;
 829              		.loc 1 330 5 is_stmt 1 view .LVU235
 330:fltk-1.3.4-1/jpeg/jdmainct.c ****     break;
 830              		.loc 1 330 29 is_stmt 0 view .LVU236
 831 0070 488D0500 		leaq	process_data_crank_post(%rip), %rax
 831      000000
 832 0077 48894508 		movq	%rax, 8(%rbp)
 331:fltk-1.3.4-1/jpeg/jdmainct.c **** #endif
 833              		.loc 1 331 5 is_stmt 1 view .LVU237
 337:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 834              		.loc 1 337 1 is_stmt 0 view .LVU238
 835 007b 5B       		popq	%rbx
 836              		.cfi_remember_state
 837              		.cfi_def_cfa_offset 48
 838 007c 5D       		popq	%rbp
 839              		.cfi_def_cfa_offset 40
 840              	.LVL75:
 337:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 841              		.loc 1 337 1 view .LVU239
 842 007d 415C     		popq	%r12
 843              		.cfi_def_cfa_offset 32
 844 007f 415D     		popq	%r13
 845              		.cfi_def_cfa_offset 24
 846 0081 415E     		popq	%r14
 847              		.cfi_def_cfa_offset 16
 848 0083 415F     		popq	%r15
 849              		.cfi_def_cfa_offset 8
 850 0085 C3       		ret
 851              	.LVL76:
 852 0086 662E0F1F 		.p2align 4,,10
 852      84000000 
 852      0000
 853              		.p2align 3
 854              	.L68:
 855              		.cfi_restore_state
 315:fltk-1.3.4-1/jpeg/jdmainct.c ****       make_funny_pointers(cinfo); /* Create the xbuffer[] lists */
 856              		.loc 1 315 7 is_stmt 1 view .LVU240
 315:fltk-1.3.4-1/jpeg/jdmainct.c ****       make_funny_pointers(cinfo); /* Create the xbuffer[] lists */
 857              		.loc 1 315 31 is_stmt 0 view .LVU241
 858 0090 488D0500 		leaq	process_data_context_main(%rip), %rax
 858      000000
 859 0097 48894508 		movq	%rax, 8(%rbp)
 316:fltk-1.3.4-1/jpeg/jdmainct.c ****       mainp->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
 860              		.loc 1 316 7 is_stmt 1 view .LVU242
 861              	.LVL77:
 862              	.LBB22:
 863              	.LBI22:
 196:fltk-1.3.4-1/jpeg/jdmainct.c **** /* Create the funny pointer lists discussed in the comments above.
 864              		.loc 1 196 1 view .LVU243
 865              	.LBB23:
 204:fltk-1.3.4-1/jpeg/jdmainct.c ****   int ci, i, rgroup;
 866              		.loc 1 204 3 view .LVU244
 210:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 867              		.loc 1 210 3 is_stmt 0 view .LVU245
 868 009b 8B4738   		movl	56(%rdi), %eax
 204:fltk-1.3.4-1/jpeg/jdmainct.c ****   int ci, i, rgroup;
 869              		.loc 1 204 15 view .LVU246
 870 009e 488B9F48 		movq	584(%rdi), %rbx
 870      020000
 871              	.LVL78:
 205:fltk-1.3.4-1/jpeg/jdmainct.c ****   int M = cinfo->min_DCT_v_scaled_size;
 872              		.loc 1 205 3 is_stmt 1 view .LVU247
 206:fltk-1.3.4-1/jpeg/jdmainct.c ****   jpeg_component_info *compptr;
 873              		.loc 1 206 3 view .LVU248
 206:fltk-1.3.4-1/jpeg/jdmainct.c ****   jpeg_component_info *compptr;
 874              		.loc 1 206 7 is_stmt 0 view .LVU249
 875 00a5 8B8FAC01 		movl	428(%rdi), %ecx
 875      0000
 876              	.LVL79:
 207:fltk-1.3.4-1/jpeg/jdmainct.c ****   JSAMPARRAY buf, xbuf0, xbuf1;
 877              		.loc 1 207 3 is_stmt 1 view .LVU250
 208:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 878              		.loc 1 208 3 view .LVU251
 210:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 879              		.loc 1 210 3 view .LVU252
 210:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 880              		.loc 1 210 24 is_stmt 0 view .LVU253
 881 00ab 4C8B9730 		movq	304(%rdi), %r10
 881      010000
 882              	.LVL80:
 210:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 883              		.loc 1 210 44 is_stmt 1 view .LVU254
 210:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 884              		.loc 1 210 3 is_stmt 0 view .LVU255
 885 00b2 85C0     		testl	%eax, %eax
 886 00b4 0F8E0601 		jle	.L48
 886      0000
 887 00ba 448D6102 		leal	2(%rcx), %r12d
 888 00be 4531C0   		xorl	%r8d, %r8d
 889              	.LVL81:
 890              		.p2align 4,,10
 891 00c1 0F1F8000 		.p2align 3
 891      000000
 892              	.L59:
 212:fltk-1.3.4-1/jpeg/jdmainct.c ****       cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 893              		.loc 1 212 5 is_stmt 1 view .LVU256
 212:fltk-1.3.4-1/jpeg/jdmainct.c ****       cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 894              		.loc 1 212 38 is_stmt 0 view .LVU257
 895 00c8 418B420C 		movl	12(%r10), %eax
 896 00cc 410FAF42 		imull	40(%r10), %eax
 896      28
 218:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i] = xbuf1[i] = buf[i];
 897              		.loc 1 218 5 view .LVU258
 898 00d1 31F6     		xorl	%esi, %esi
 217:fltk-1.3.4-1/jpeg/jdmainct.c ****     for (i = 0; i < rgroup * (M + 2); i++) {
 899              		.loc 1 217 9 view .LVU259
 900 00d3 4E8B6CC3 		movq	16(%rbx,%r8,8), %r13
 900      10
 212:fltk-1.3.4-1/jpeg/jdmainct.c ****       cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 901              		.loc 1 212 12 view .LVU260
 902 00d8 99       		cltd
 903 00d9 F7F9     		idivl	%ecx
 904              	.LVL82:
 214:fltk-1.3.4-1/jpeg/jdmainct.c ****     xbuf1 = mainp->xbuffer[1][ci];
 905              		.loc 1 214 5 is_stmt 1 view .LVU261
 215:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* First copy the workspace pointers as-is */
 906              		.loc 1 215 11 is_stmt 0 view .LVU262
 907 00db 488B4B70 		movq	112(%rbx), %rcx
 214:fltk-1.3.4-1/jpeg/jdmainct.c ****     xbuf1 = mainp->xbuffer[1][ci];
 908              		.loc 1 214 11 view .LVU263
 909 00df 488B5368 		movq	104(%rbx), %rdx
 215:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* First copy the workspace pointers as-is */
 910              		.loc 1 215 11 view .LVU264
 911 00e3 4E8B1CC1 		movq	(%rcx,%r8,8), %r11
 214:fltk-1.3.4-1/jpeg/jdmainct.c ****     xbuf1 = mainp->xbuffer[1][ci];
 912              		.loc 1 214 11 view .LVU265
 913 00e7 4A8B14C2 		movq	(%rdx,%r8,8), %rdx
 914              	.LVL83:
 215:fltk-1.3.4-1/jpeg/jdmainct.c ****     /* First copy the workspace pointers as-is */
 915              		.loc 1 215 5 is_stmt 1 view .LVU266
 217:fltk-1.3.4-1/jpeg/jdmainct.c ****     for (i = 0; i < rgroup * (M + 2); i++) {
 916              		.loc 1 217 5 view .LVU267
 218:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i] = xbuf1[i] = buf[i];
 917              		.loc 1 218 5 view .LVU268
 218:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i] = xbuf1[i] = buf[i];
 918              		.loc 1 218 17 view .LVU269
 218:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i] = xbuf1[i] = buf[i];
 919              		.loc 1 218 28 is_stmt 0 view .LVU270
 920 00eb 89C1     		movl	%eax, %ecx
 921 00ed 410FAFCC 		imull	%r12d, %ecx
 922 00f1 448D71FF 		leal	-1(%rcx), %r14d
 218:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i] = xbuf1[i] = buf[i];
 923              		.loc 1 218 5 view .LVU271
 924 00f5 85C9     		testl	%ecx, %ecx
 925 00f7 7E20     		jle	.L53
 926              	.LVL84:
 927 00f9 0F1F8000 		.p2align 4,,10
 927      000000
 928              		.p2align 3
 929              	.L52:
 219:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 930              		.loc 1 219 7 is_stmt 1 view .LVU272
 219:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 931              		.loc 1 219 32 is_stmt 0 view .LVU273
 932 0100 4D8B4CF5 		movq	0(%r13,%rsi,8), %r9
 932      00
 219:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 933              		.loc 1 219 27 view .LVU274
 934 0105 4D890CF3 		movq	%r9, (%r11,%rsi,8)
 219:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 935              		.loc 1 219 16 view .LVU275
 936 0109 4C890CF2 		movq	%r9, (%rdx,%rsi,8)
 218:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i] = xbuf1[i] = buf[i];
 937              		.loc 1 218 39 is_stmt 1 view .LVU276
 938              	.LVL85:
 218:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i] = xbuf1[i] = buf[i];
 939              		.loc 1 218 17 view .LVU277
 940 010d 4989F1   		movq	%rsi, %r9
 941 0110 4883C601 		addq	$1, %rsi
 942              	.LVL86:
 218:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i] = xbuf1[i] = buf[i];
 943              		.loc 1 218 5 is_stmt 0 view .LVU278
 944 0114 4D39CE   		cmpq	%r9, %r14
 945 0117 75E7     		jne	.L52
 946              	.L53:
 947              	.LVL87:
 222:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 948              		.loc 1 222 17 is_stmt 1 view .LVU279
 222:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 949              		.loc 1 222 28 is_stmt 0 view .LVU280
 950 0119 448D0C00 		leal	(%rax,%rax), %r9d
 222:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 951              		.loc 1 222 5 view .LVU281
 952 011d 4585C9   		testl	%r9d, %r9d
 953 0120 7E4A     		jle	.L51
 223:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 954              		.loc 1 223 43 view .LVU282
 955 0122 4429C9   		subl	%r9d, %ecx
 956 0125 458D79FF 		leal	-1(%r9), %r15d
 957 0129 4863F1   		movslq	%ecx, %rsi
 223:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 958              		.loc 1 223 19 view .LVU283
 959 012c 4429C9   		subl	%r9d, %ecx
 960 012f 4863C9   		movslq	%ecx, %rcx
 961 0132 48C1E603 		salq	$3, %rsi
 962 0136 48C1E103 		salq	$3, %rcx
 963 013a 4D8D7435 		leaq	0(%r13,%rsi), %r14
 963      00
 964 013f 4C01DE   		addq	%r11, %rsi
 965 0142 4D8D0C0B 		leaq	(%r11,%rcx), %r9
 966 0146 4C01E9   		addq	%r13, %rcx
 967 0149 4531ED   		xorl	%r13d, %r13d
 968              	.LVL88:
 969 014c 0F1F4000 		.p2align 4,,10
 970              		.p2align 3
 971              	.L56:
 223:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 972              		.loc 1 223 7 is_stmt 1 view .LVU284
 223:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 973              		.loc 1 223 36 is_stmt 0 view .LVU285
 974 0150 4F8B1CEE 		movq	(%r14,%r13,8), %r11
 223:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 975              		.loc 1 223 31 view .LVU286
 976 0154 4F891CE9 		movq	%r11, (%r9,%r13,8)
 224:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 977              		.loc 1 224 7 is_stmt 1 view .LVU287
 224:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 978              		.loc 1 224 32 is_stmt 0 view .LVU288
 979 0158 4E8B1CE9 		movq	(%rcx,%r13,8), %r11
 224:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 980              		.loc 1 224 27 view .LVU289
 981 015c 4E891CEE 		movq	%r11, (%rsi,%r13,8)
 222:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 982              		.loc 1 222 33 is_stmt 1 view .LVU290
 983              	.LVL89:
 222:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 984              		.loc 1 222 17 view .LVU291
 985 0160 4D89EB   		movq	%r13, %r11
 986 0163 4983C501 		addq	$1, %r13
 987              	.LVL90:
 222:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 988              		.loc 1 222 5 is_stmt 0 view .LVU292
 989 0167 4D39DF   		cmpq	%r11, %r15
 990 016a 75E4     		jne	.L56
 991              	.L51:
 992              	.LVL91:
 231:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i - rgroup] = xbuf0[0];
 993              		.loc 1 231 17 is_stmt 1 view .LVU293
 231:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i - rgroup] = xbuf0[0];
 994              		.loc 1 231 5 is_stmt 0 view .LVU294
 995 016c 85C0     		testl	%eax, %eax
 996 016e 7E30     		jle	.L55
 997 0170 89C6     		movl	%eax, %esi
 998 0172 83E801   		subl	$1, %eax
 999              	.LVL92:
 231:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i - rgroup] = xbuf0[0];
 1000              		.loc 1 231 5 view .LVU295
 1001 0175 F7DE     		negl	%esi
 1002              	.LVL93:
 231:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i - rgroup] = xbuf0[0];
 1003              		.loc 1 231 5 view .LVU296
 1004 0177 4863F6   		movslq	%esi, %rsi
 231:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i - rgroup] = xbuf0[0];
 1005              		.loc 1 231 5 view .LVU297
 1006 017a 488D0CF2 		leaq	(%rdx,%rsi,8), %rcx
 1007 017e 4801C6   		addq	%rax, %rsi
 1008              	.LVL94:
 231:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i - rgroup] = xbuf0[0];
 1009              		.loc 1 231 5 view .LVU298
 1010 0181 488D74F2 		leaq	8(%rdx,%rsi,8), %rsi
 1010      08
 1011              	.LVL95:
 1012 0186 662E0F1F 		.p2align 4,,10
 1012      84000000 
 1012      0000
 1013              		.p2align 3
 1014              	.L58:
 232:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 1015              		.loc 1 232 7 is_stmt 1 view .LVU299
 232:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 1016              		.loc 1 232 32 is_stmt 0 view .LVU300
 1017 0190 488B02   		movq	(%rdx), %rax
 1018 0193 4883C108 		addq	$8, %rcx
 232:fltk-1.3.4-1/jpeg/jdmainct.c ****     }
 1019              		.loc 1 232 25 view .LVU301
 1020 0197 488941F8 		movq	%rax, -8(%rcx)
 231:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i - rgroup] = xbuf0[0];
 1021              		.loc 1 231 29 is_stmt 1 view .LVU302
 231:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i - rgroup] = xbuf0[0];
 1022              		.loc 1 231 17 view .LVU303
 231:fltk-1.3.4-1/jpeg/jdmainct.c ****       xbuf0[i - rgroup] = xbuf0[0];
 1023              		.loc 1 231 5 is_stmt 0 view .LVU304
 1024 019b 4839F1   		cmpq	%rsi, %rcx
 1025 019e 75F0     		jne	.L58
 1026              	.L55:
 211:fltk-1.3.4-1/jpeg/jdmainct.c ****     rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 1027              		.loc 1 211 8 is_stmt 1 view .LVU305
 1028              	.LVL96:
 211:fltk-1.3.4-1/jpeg/jdmainct.c ****     rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 1029              		.loc 1 211 21 is_stmt 0 view .LVU306
 1030 01a0 4983C260 		addq	$96, %r10
 1031              	.LVL97:
 210:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 1032              		.loc 1 210 44 is_stmt 1 view .LVU307
 1033 01a4 4983C001 		addq	$1, %r8
 1034              	.LVL98:
 210:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 1035              		.loc 1 210 3 is_stmt 0 view .LVU308
 1036 01a8 44394738 		cmpl	%r8d, 56(%rdi)
 1037 01ac 7E12     		jle	.L48
 1038 01ae 8B8FAC01 		movl	428(%rdi), %ecx
 1038      0000
 1039 01b4 E90FFFFF 		jmp	.L59
 1039      FF
 1040              	.LVL99:
 1041 01b9 0F1F8000 		.p2align 4,,10
 1041      000000
 1042              		.p2align 3
 1043              	.L48:
 210:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 1044              		.loc 1 210 3 view .LVU309
 1045              	.LBE23:
 1046              	.LBE22:
 317:fltk-1.3.4-1/jpeg/jdmainct.c ****       mainp->context_state = CTX_PREPARE_FOR_IMCU;
 1047              		.loc 1 317 7 is_stmt 1 view .LVU310
 318:fltk-1.3.4-1/jpeg/jdmainct.c ****       mainp->iMCU_row_ctr = 0;
 1048              		.loc 1 318 7 view .LVU311
 317:fltk-1.3.4-1/jpeg/jdmainct.c ****       mainp->context_state = CTX_PREPARE_FOR_IMCU;
 1049              		.loc 1 317 23 is_stmt 0 view .LVU312
 1050 01c0 48C74578 		movq	$0, 120(%rbp)
 1050      00000000 
 319:fltk-1.3.4-1/jpeg/jdmainct.c ****     } else {
 1051              		.loc 1 319 7 is_stmt 1 view .LVU313
 319:fltk-1.3.4-1/jpeg/jdmainct.c ****     } else {
 1052              		.loc 1 319 27 is_stmt 0 view .LVU314
 1053 01c8 C7858400 		movl	$0, 132(%rbp)
 1053      00000000 
 1053      0000
 1054 01d2 E982FEFF 		jmp	.L60
 1054      FF
 1055              		.cfi_endproc
 1056              	.LFE55:
 1058              		.section	.text.jinit_d_main_controller,"ax",@progbits
 1059              		.p2align 4
 1060              		.globl	jinit_d_main_controller
 1062              	jinit_d_main_controller:
 1063              	.LVL100:
 1064              	.LFB59:
 468:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 469:fltk-1.3.4-1/jpeg/jdmainct.c **** #endif /* QUANT_2PASS_SUPPORTED */
 470:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 471:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 472:fltk-1.3.4-1/jpeg/jdmainct.c **** /*
 473:fltk-1.3.4-1/jpeg/jdmainct.c ****  * Initialize main buffer controller.
 474:fltk-1.3.4-1/jpeg/jdmainct.c ****  */
 475:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 476:fltk-1.3.4-1/jpeg/jdmainct.c **** GLOBAL(void)
 477:fltk-1.3.4-1/jpeg/jdmainct.c **** jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
 478:fltk-1.3.4-1/jpeg/jdmainct.c **** {
 1065              		.loc 1 478 1 is_stmt 1 view -0
 1066              		.cfi_startproc
 1067              		.loc 1 478 1 is_stmt 0 view .LVU316
 1068 0000 F30F1EFA 		endbr64
 479:fltk-1.3.4-1/jpeg/jdmainct.c ****   my_main_ptr mainp;
 1069              		.loc 1 479 3 is_stmt 1 view .LVU317
 480:fltk-1.3.4-1/jpeg/jdmainct.c ****   int ci, rgroup, ngroups;
 1070              		.loc 1 480 3 view .LVU318
 481:fltk-1.3.4-1/jpeg/jdmainct.c ****   jpeg_component_info *compptr;
 1071              		.loc 1 481 3 view .LVU319
 482:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 483:fltk-1.3.4-1/jpeg/jdmainct.c ****   mainp = (my_main_ptr)
 1072              		.loc 1 483 3 view .LVU320
 478:fltk-1.3.4-1/jpeg/jdmainct.c ****   my_main_ptr mainp;
 1073              		.loc 1 478 1 is_stmt 0 view .LVU321
 1074 0004 4157     		pushq	%r15
 1075              		.cfi_def_cfa_offset 16
 1076              		.cfi_offset 15, -16
 484:fltk-1.3.4-1/jpeg/jdmainct.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1077              		.loc 1 484 6 view .LVU322
 1078 0006 BA880000 		movl	$136, %edx
 1078      00
 478:fltk-1.3.4-1/jpeg/jdmainct.c ****   my_main_ptr mainp;
 1079              		.loc 1 478 1 view .LVU323
 1080 000b 4156     		pushq	%r14
 1081              		.cfi_def_cfa_offset 24
 1082              		.cfi_offset 14, -24
 1083 000d 4155     		pushq	%r13
 1084              		.cfi_def_cfa_offset 32
 1085              		.cfi_offset 13, -32
 1086 000f 4154     		pushq	%r12
 1087              		.cfi_def_cfa_offset 40
 1088              		.cfi_offset 12, -40
 1089 0011 55       		pushq	%rbp
 1090              		.cfi_def_cfa_offset 48
 1091              		.cfi_offset 6, -48
 1092 0012 89F5     		movl	%esi, %ebp
 1093              		.loc 1 484 6 view .LVU324
 1094 0014 BE010000 		movl	$1, %esi
 1094      00
 1095              	.LVL101:
 478:fltk-1.3.4-1/jpeg/jdmainct.c ****   my_main_ptr mainp;
 1096              		.loc 1 478 1 view .LVU325
 1097 0019 53       		pushq	%rbx
 1098              		.cfi_def_cfa_offset 56
 1099              		.cfi_offset 3, -56
 1100 001a 4889FB   		movq	%rdi, %rbx
 1101 001d 4883EC18 		subq	$24, %rsp
 1102              		.cfi_def_cfa_offset 80
 1103              		.loc 1 484 6 view .LVU326
 1104 0021 488B4708 		movq	8(%rdi), %rax
 1105 0025 FF10     		call	*(%rax)
 1106              	.LVL102:
 485:fltk-1.3.4-1/jpeg/jdmainct.c **** 				SIZEOF(my_main_controller));
 486:fltk-1.3.4-1/jpeg/jdmainct.c ****   cinfo->main = &mainp->pub;
 1107              		.loc 1 486 15 view .LVU327
 1108 0027 48898348 		movq	%rax, 584(%rbx)
 1108      020000
 484:fltk-1.3.4-1/jpeg/jdmainct.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1109              		.loc 1 484 6 view .LVU328
 1110 002e 4989C4   		movq	%rax, %r12
 1111              	.LVL103:
 1112              		.loc 1 486 3 is_stmt 1 view .LVU329
 487:fltk-1.3.4-1/jpeg/jdmainct.c ****   mainp->pub.start_pass = start_pass_main;
 1113              		.loc 1 487 3 view .LVU330
 1114              		.loc 1 487 25 is_stmt 0 view .LVU331
 1115 0031 488D0500 		leaq	start_pass_main(%rip), %rax
 1115      000000
 1116              	.LVL104:
 1117              		.loc 1 487 25 view .LVU332
 1118 0038 49890424 		movq	%rax, (%r12)
 488:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 489:fltk-1.3.4-1/jpeg/jdmainct.c ****   if (need_full_buffer)		/* shouldn't happen */
 1119              		.loc 1 489 3 is_stmt 1 view .LVU333
 1120              		.loc 1 489 6 is_stmt 0 view .LVU334
 1121 003c 85ED     		testl	%ebp, %ebp
 1122 003e 7412     		je	.L70
 490:fltk-1.3.4-1/jpeg/jdmainct.c ****     ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 1123              		.loc 1 490 5 is_stmt 1 view .LVU335
 1124 0040 488B03   		movq	(%rbx), %rax
 1125 0043 4889DF   		movq	%rbx, %rdi
 1126 0046 C7402803 		movl	$3, 40(%rax)
 1126      000000
 1127 004d 488B03   		movq	(%rbx), %rax
 1128 0050 FF10     		call	*(%rax)
 1129              	.LVL105:
 1130              	.L70:
 491:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 492:fltk-1.3.4-1/jpeg/jdmainct.c ****   /* Allocate the workspace.
 493:fltk-1.3.4-1/jpeg/jdmainct.c ****    * ngroups is the number of row groups we need.
 494:fltk-1.3.4-1/jpeg/jdmainct.c ****    */
 495:fltk-1.3.4-1/jpeg/jdmainct.c ****   if (cinfo->upsample->need_context_rows) {
 1131              		.loc 1 495 3 view .LVU336
 1132              		.loc 1 495 22 is_stmt 0 view .LVU337
 1133 0052 488B8380 		movq	640(%rbx), %rax
 1133      020000
 1134 0059 8BABAC01 		movl	428(%rbx), %ebp
 1134      0000
 1135              	.LVL106:
 1136              		.loc 1 495 6 view .LVU338
 1137 005f 8B4010   		movl	16(%rax), %eax
 1138 0062 85C0     		testl	%eax, %eax
 1139 0064 0F842601 		je	.L71
 1139      0000
 496:fltk-1.3.4-1/jpeg/jdmainct.c ****     if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 1140              		.loc 1 496 5 is_stmt 1 view .LVU339
 1141              		.loc 1 496 8 is_stmt 0 view .LVU340
 1142 006a 83FD01   		cmpl	$1, %ebp
 1143 006d 0F8E2D01 		jle	.L86
 1143      0000
 1144              	.L72:
 497:fltk-1.3.4-1/jpeg/jdmainct.c ****       ERREXIT(cinfo, JERR_NOTIMPL);
 498:fltk-1.3.4-1/jpeg/jdmainct.c ****     alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
 1145              		.loc 1 498 5 is_stmt 1 view .LVU341
 1146              	.LVL107:
 1147              	.LBB26:
 1148              	.LBI26:
 158:fltk-1.3.4-1/jpeg/jdmainct.c **** /* Allocate space for the funny pointer lists.
 1149              		.loc 1 158 1 view .LVU342
 1150              	.LBB27:
 163:fltk-1.3.4-1/jpeg/jdmainct.c ****   int ci, rgroup;
 1151              		.loc 1 163 3 view .LVU343
 174:fltk-1.3.4-1/jpeg/jdmainct.c ****   mainp->xbuffer[1] = mainp->xbuffer[0] + cinfo->num_components;
 1152              		.loc 1 174 27 is_stmt 0 view .LVU344
 1153 0073 8B4338   		movl	56(%rbx), %eax
 163:fltk-1.3.4-1/jpeg/jdmainct.c ****   int ci, rgroup;
 1154              		.loc 1 163 15 view .LVU345
 1155 0076 4C8BB348 		movq	584(%rbx), %r14
 1155      020000
 1156              	.LVL108:
 164:fltk-1.3.4-1/jpeg/jdmainct.c ****   int M = cinfo->min_DCT_v_scaled_size;
 1157              		.loc 1 164 3 is_stmt 1 view .LVU346
 165:fltk-1.3.4-1/jpeg/jdmainct.c ****   jpeg_component_info *compptr;
 1158              		.loc 1 165 3 view .LVU347
 166:fltk-1.3.4-1/jpeg/jdmainct.c ****   JSAMPARRAY xbuf;
 1159              		.loc 1 166 3 view .LVU348
 167:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 1160              		.loc 1 167 3 view .LVU349
 172:fltk-1.3.4-1/jpeg/jdmainct.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1161              		.loc 1 172 3 view .LVU350
 173:fltk-1.3.4-1/jpeg/jdmainct.c **** 				cinfo->num_components * 2 * SIZEOF(JSAMPARRAY));
 1162              		.loc 1 173 6 is_stmt 0 view .LVU351
 1163 007d BE010000 		movl	$1, %esi
 1163      00
 1164 0082 4889DF   		movq	%rbx, %rdi
 174:fltk-1.3.4-1/jpeg/jdmainct.c ****   mainp->xbuffer[1] = mainp->xbuffer[0] + cinfo->num_components;
 1165              		.loc 1 174 27 view .LVU352
 1166 0085 8D1400   		leal	(%rax,%rax), %edx
 173:fltk-1.3.4-1/jpeg/jdmainct.c **** 				cinfo->num_components * 2 * SIZEOF(JSAMPARRAY));
 1167              		.loc 1 173 6 view .LVU353
 1168 0088 488B4308 		movq	8(%rbx), %rax
 174:fltk-1.3.4-1/jpeg/jdmainct.c ****   mainp->xbuffer[1] = mainp->xbuffer[0] + cinfo->num_components;
 1169              		.loc 1 174 27 view .LVU354
 1170 008c 4863D2   		movslq	%edx, %rdx
 173:fltk-1.3.4-1/jpeg/jdmainct.c **** 				cinfo->num_components * 2 * SIZEOF(JSAMPARRAY));
 1171              		.loc 1 173 6 view .LVU355
 1172 008f 48C1E203 		salq	$3, %rdx
 1173 0093 FF10     		call	*(%rax)
 1174              	.LVL109:
 172:fltk-1.3.4-1/jpeg/jdmainct.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1175              		.loc 1 172 21 view .LVU356
 1176 0095 49894668 		movq	%rax, 104(%r14)
 175:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 1177              		.loc 1 175 3 is_stmt 1 view .LVU357
 175:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 1178              		.loc 1 175 48 is_stmt 0 view .LVU358
 1179 0099 48635338 		movslq	56(%rbx), %rdx
 175:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 1180              		.loc 1 175 41 view .LVU359
 1181 009d 488D04D0 		leaq	(%rax,%rdx,8), %rax
 1182 00a1 49894670 		movq	%rax, 112(%r14)
 177:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 1183              		.loc 1 177 3 is_stmt 1 view .LVU360
 1184              	.LVL110:
 177:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 1185              		.loc 1 177 54 is_stmt 0 view .LVU361
 1186 00a5 8B4338   		movl	56(%rbx), %eax
 177:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 1187              		.loc 1 177 24 view .LVU362
 1188 00a8 4C8BAB30 		movq	304(%rbx), %r13
 1188      010000
 1189              	.LVL111:
 177:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 1190              		.loc 1 177 44 is_stmt 1 view .LVU363
 177:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 1191              		.loc 1 177 3 is_stmt 0 view .LVU364
 1192 00af 85C0     		testl	%eax, %eax
 1193 00b1 7E7B     		jle	.L73
 1194 00b3 8D4504   		leal	4(%rbp), %eax
 1195 00b6 4531FF   		xorl	%r15d, %r15d
 1196 00b9 8944240C 		movl	%eax, 12(%rsp)
 1197              	.LVL112:
 1198 00bd 0F1F00   		.p2align 4,,10
 1199              		.p2align 3
 1200              	.L74:
 179:fltk-1.3.4-1/jpeg/jdmainct.c ****       cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 1201              		.loc 1 179 5 is_stmt 1 view .LVU365
 179:fltk-1.3.4-1/jpeg/jdmainct.c ****       cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 1202              		.loc 1 179 38 is_stmt 0 view .LVU366
 1203 00c0 418B450C 		movl	12(%r13), %eax
 1204 00c4 410FAF45 		imull	40(%r13), %eax
 1204      28
 185:fltk-1.3.4-1/jpeg/jdmainct.c **** 				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 1205              		.loc 1 185 8 view .LVU367
 1206 00c9 4889DF   		movq	%rbx, %rdi
 178:fltk-1.3.4-1/jpeg/jdmainct.c ****     rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 1207              		.loc 1 178 21 view .LVU368
 1208 00cc 4983C560 		addq	$96, %r13
 1209              	.LVL113:
 186:fltk-1.3.4-1/jpeg/jdmainct.c ****     xbuf += rgroup;		/* want one row group at negative offsets */
 1210              		.loc 1 186 19 view .LVU369
 1211 00d0 8B6C240C 		movl	12(%rsp), %ebp
 185:fltk-1.3.4-1/jpeg/jdmainct.c **** 				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 1212              		.loc 1 185 8 view .LVU370
 1213 00d4 BE010000 		movl	$1, %esi
 1213      00
 179:fltk-1.3.4-1/jpeg/jdmainct.c ****       cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 1214              		.loc 1 179 12 view .LVU371
 1215 00d9 99       		cltd
 1216 00da F7BBAC01 		idivl	428(%rbx)
 1216      0000
 1217              	.LVL114:
 184:fltk-1.3.4-1/jpeg/jdmainct.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1218              		.loc 1 184 5 is_stmt 1 view .LVU372
 186:fltk-1.3.4-1/jpeg/jdmainct.c ****     xbuf += rgroup;		/* want one row group at negative offsets */
 1219              		.loc 1 186 19 is_stmt 0 view .LVU373
 1220 00e0 0FAFE8   		imull	%eax, %ebp
 1221 00e3 89442408 		movl	%eax, 8(%rsp)
 185:fltk-1.3.4-1/jpeg/jdmainct.c **** 				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 1222              		.loc 1 185 8 view .LVU374
 1223 00e7 488B4308 		movq	8(%rbx), %rax
 1224              	.LVL115:
 186:fltk-1.3.4-1/jpeg/jdmainct.c ****     xbuf += rgroup;		/* want one row group at negative offsets */
 1225              		.loc 1 186 9 view .LVU375
 1226 00eb 8D542D00 		leal	(%rbp,%rbp), %edx
 1227 00ef 4863D2   		movslq	%edx, %rdx
 185:fltk-1.3.4-1/jpeg/jdmainct.c **** 				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 1228              		.loc 1 185 8 view .LVU376
 1229 00f2 48C1E203 		salq	$3, %rdx
 1230 00f6 FF10     		call	*(%rax)
 1231              	.LVL116:
 188:fltk-1.3.4-1/jpeg/jdmainct.c ****     xbuf += rgroup * (M + 4);
 1232              		.loc 1 188 27 view .LVU377
 1233 00f8 498B5668 		movq	104(%r14), %rdx
 189:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->xbuffer[1][ci] = xbuf;
 1234              		.loc 1 189 20 view .LVU378
 1235 00fc 4C63C5   		movslq	%ebp, %r8
 185:fltk-1.3.4-1/jpeg/jdmainct.c **** 				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 1236              		.loc 1 185 8 view .LVU379
 1237 00ff 4989C1   		movq	%rax, %r9
 1238              	.LVL117:
 187:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->xbuffer[0][ci] = xbuf;
 1239              		.loc 1 187 5 is_stmt 1 view .LVU380
 187:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->xbuffer[0][ci] = xbuf;
 1240              		.loc 1 187 10 is_stmt 0 view .LVU381
 1241 0102 48634424 		movslq	8(%rsp), %rax
 1241      08
 1242              	.LVL118:
 187:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->xbuffer[0][ci] = xbuf;
 1243              		.loc 1 187 10 view .LVU382
 1244 0107 498D04C1 		leaq	(%r9,%rax,8), %rax
 1245              	.LVL119:
 188:fltk-1.3.4-1/jpeg/jdmainct.c ****     xbuf += rgroup * (M + 4);
 1246              		.loc 1 188 5 is_stmt 1 view .LVU383
 188:fltk-1.3.4-1/jpeg/jdmainct.c ****     xbuf += rgroup * (M + 4);
 1247              		.loc 1 188 27 is_stmt 0 view .LVU384
 1248 010b 4A8904FA 		movq	%rax, (%rdx,%r15,8)
 189:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->xbuffer[1][ci] = xbuf;
 1249              		.loc 1 189 5 is_stmt 1 view .LVU385
 1250              	.LVL120:
 190:fltk-1.3.4-1/jpeg/jdmainct.c ****   }
 1251              		.loc 1 190 5 view .LVU386
 190:fltk-1.3.4-1/jpeg/jdmainct.c ****   }
 1252              		.loc 1 190 27 is_stmt 0 view .LVU387
 1253 010f 498B5670 		movq	112(%r14), %rdx
 189:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->xbuffer[1][ci] = xbuf;
 1254              		.loc 1 189 10 view .LVU388
 1255 0113 4A8D04C0 		leaq	(%rax,%r8,8), %rax
 1256              	.LVL121:
 189:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->xbuffer[1][ci] = xbuf;
 1257              		.loc 1 189 10 view .LVU389
 1258 0117 4A8904FA 		movq	%rax, (%rdx,%r15,8)
 178:fltk-1.3.4-1/jpeg/jdmainct.c ****     rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 1259              		.loc 1 178 8 is_stmt 1 view .LVU390
 1260              	.LVL122:
 177:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 1261              		.loc 1 177 44 view .LVU391
 177:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 1262              		.loc 1 177 54 is_stmt 0 view .LVU392
 1263 011b 8B4338   		movl	56(%rbx), %eax
 1264              	.LVL123:
 177:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 1265              		.loc 1 177 54 view .LVU393
 1266 011e 4983C701 		addq	$1, %r15
 1267              	.LVL124:
 177:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 1268              		.loc 1 177 3 view .LVU394
 1269 0122 4439F8   		cmpl	%r15d, %eax
 1270 0125 7F99     		jg	.L74
 1271 0127 4C8BAB30 		movq	304(%rbx), %r13
 1271      010000
 1272              	.LVL125:
 1273              	.L73:
 177:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 1274              		.loc 1 177 3 view .LVU395
 1275              	.LBE27:
 1276              	.LBE26:
 499:fltk-1.3.4-1/jpeg/jdmainct.c ****     ngroups = cinfo->min_DCT_v_scaled_size + 2;
 1277              		.loc 1 499 5 is_stmt 1 view .LVU396
 1278              		.loc 1 499 13 is_stmt 0 view .LVU397
 1279 012e 8BB3AC01 		movl	428(%rbx), %esi
 1279      0000
 1280 0134 8D6E02   		leal	2(%rsi), %ebp
 1281              	.LVL126:
 1282              	.L75:
 500:fltk-1.3.4-1/jpeg/jdmainct.c ****   } else {
 501:fltk-1.3.4-1/jpeg/jdmainct.c ****     ngroups = cinfo->min_DCT_v_scaled_size;
 502:fltk-1.3.4-1/jpeg/jdmainct.c ****   }
 503:fltk-1.3.4-1/jpeg/jdmainct.c **** 
 504:fltk-1.3.4-1/jpeg/jdmainct.c ****   for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 1283              		.loc 1 504 3 is_stmt 1 view .LVU398
 1284              		.loc 1 504 44 view .LVU399
 1285              		.loc 1 504 3 is_stmt 0 view .LVU400
 1286 0137 4531F6   		xorl	%r14d, %r14d
 1287 013a 85C0     		testl	%eax, %eax
 1288 013c 7E43     		jle	.L69
 1289              	.LVL127:
 1290 013e 6690     		.p2align 4,,10
 1291              		.p2align 3
 1292              	.L76:
 505:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 506:fltk-1.3.4-1/jpeg/jdmainct.c ****     rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 1293              		.loc 1 506 5 is_stmt 1 view .LVU401
 507:fltk-1.3.4-1/jpeg/jdmainct.c ****       cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 508:fltk-1.3.4-1/jpeg/jdmainct.c ****     mainp->buffer[ci] = (*cinfo->mem->alloc_sarray)
 1294              		.loc 1 508 5 view .LVU402
 506:fltk-1.3.4-1/jpeg/jdmainct.c ****       cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 1295              		.loc 1 506 38 is_stmt 0 view .LVU403
 1296 0140 418B450C 		movl	12(%r13), %eax
 1297 0144 410FAF45 		imull	40(%r13), %eax
 1297      28
 1298              		.loc 1 508 26 view .LVU404
 1299 0149 4889DF   		movq	%rbx, %rdi
 505:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 1300              		.loc 1 505 21 view .LVU405
 1301 014c 4983C560 		addq	$96, %r13
 1302              	.LVL128:
 1303              		.loc 1 508 26 view .LVU406
 1304 0150 4C8B4308 		movq	8(%rbx), %r8
 1305 0154 BE010000 		movl	$1, %esi
 1305      00
 506:fltk-1.3.4-1/jpeg/jdmainct.c ****       cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 1306              		.loc 1 506 12 view .LVU407
 1307 0159 99       		cltd
 1308 015a F7BBAC01 		idivl	428(%rbx)
 1308      0000
 1309              	.LVL129:
 1310              		.loc 1 508 26 view .LVU408
 1311 0160 418B55BC 		movl	-68(%r13), %edx
 1312 0164 410FAF55 		imull	-60(%r13), %edx
 1312      C4
 509:fltk-1.3.4-1/jpeg/jdmainct.c ****       ((j_common_ptr) cinfo, JPOOL_IMAGE,
 510:fltk-1.3.4-1/jpeg/jdmainct.c ****        compptr->width_in_blocks * ((JDIMENSION) compptr->DCT_h_scaled_size),
 511:fltk-1.3.4-1/jpeg/jdmainct.c ****        (JDIMENSION) (rgroup * ngroups));
 1313              		.loc 1 511 29 view .LVU409
 1314 0169 0FAFC5   		imull	%ebp, %eax
 1315              	.LVL130:
 1316              		.loc 1 511 29 view .LVU410
 1317 016c 89C1     		movl	%eax, %ecx
 508:fltk-1.3.4-1/jpeg/jdmainct.c ****       ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1318              		.loc 1 508 26 view .LVU411
 1319 016e 41FF5010 		call	*16(%r8)
 1320              	.LVL131:
 508:fltk-1.3.4-1/jpeg/jdmainct.c ****       ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1321              		.loc 1 508 23 view .LVU412
 1322 0172 4B8944F4 		movq	%rax, 16(%r12,%r14,8)
 1322      10
 505:fltk-1.3.4-1/jpeg/jdmainct.c ****     rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 1323              		.loc 1 505 8 is_stmt 1 view .LVU413
 1324              	.LVL132:
 504:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 1325              		.loc 1 504 44 view .LVU414
 1326 0177 4983C601 		addq	$1, %r14
 1327              	.LVL133:
 504:fltk-1.3.4-1/jpeg/jdmainct.c ****        ci++, compptr++) {
 1328              		.loc 1 504 3 is_stmt 0 view .LVU415
 1329 017b 44397338 		cmpl	%r14d, 56(%rbx)
 1330 017f 7FBF     		jg	.L76
 1331              	.LVL134:
 1332              	.L69:
 512:fltk-1.3.4-1/jpeg/jdmainct.c ****   }
 513:fltk-1.3.4-1/jpeg/jdmainct.c **** }
 1333              		.loc 1 513 1 view .LVU416
 1334 0181 4883C418 		addq	$24, %rsp
 1335              		.cfi_remember_state
 1336              		.cfi_def_cfa_offset 56
 1337 0185 5B       		popq	%rbx
 1338              		.cfi_def_cfa_offset 48
 1339              	.LVL135:
 1340              		.loc 1 513 1 view .LVU417
 1341 0186 5D       		popq	%rbp
 1342              		.cfi_def_cfa_offset 40
 1343              	.LVL136:
 1344              		.loc 1 513 1 view .LVU418
 1345 0187 415C     		popq	%r12
 1346              		.cfi_def_cfa_offset 32
 1347              	.LVL137:
 1348              		.loc 1 513 1 view .LVU419
 1349 0189 415D     		popq	%r13
 1350              		.cfi_def_cfa_offset 24
 1351 018b 415E     		popq	%r14
 1352              		.cfi_def_cfa_offset 16
 1353 018d 415F     		popq	%r15
 1354              		.cfi_def_cfa_offset 8
 1355 018f C3       		ret
 1356              	.LVL138:
 1357              		.p2align 4,,10
 1358              		.p2align 3
 1359              	.L71:
 1360              		.cfi_restore_state
 501:fltk-1.3.4-1/jpeg/jdmainct.c ****   }
 1361              		.loc 1 501 5 is_stmt 1 view .LVU420
 501:fltk-1.3.4-1/jpeg/jdmainct.c ****   }
 1362              		.loc 1 501 5 is_stmt 0 view .LVU421
 1363 0190 4C8BAB30 		movq	304(%rbx), %r13
 1363      010000
 1364 0197 8B4338   		movl	56(%rbx), %eax
 1365 019a EB9B     		jmp	.L75
 1366              	.LVL139:
 1367 019c 0F1F4000 		.p2align 4,,10
 1368              		.p2align 3
 1369              	.L86:
 497:fltk-1.3.4-1/jpeg/jdmainct.c ****     alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
 1370              		.loc 1 497 7 is_stmt 1 view .LVU422
 1371 01a0 488B03   		movq	(%rbx), %rax
 1372 01a3 4889DF   		movq	%rbx, %rdi
 1373 01a6 C7402830 		movl	$48, 40(%rax)
 1373      000000
 1374 01ad 488B03   		movq	(%rbx), %rax
 1375 01b0 FF10     		call	*(%rax)
 1376              	.LVL140:
 1377 01b2 8BABAC01 		movl	428(%rbx), %ebp
 1377      0000
 1378 01b8 E9B6FEFF 		jmp	.L72
 1378      FF
 1379              		.cfi_endproc
 1380              	.LFE59:
 1382              		.text
 1383              	.Letext0:
 1384              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 1385              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 1386              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 1387              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 1388              		.file 6 "/usr/include/stdio.h"
 1389              		.file 7 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 1390              		.file 8 "fltk-1.3.4-1/jpeg/jmorecfg.h"
 1391              		.file 9 "fltk-1.3.4-1/jpeg/jpeglib.h"
 1392              		.file 10 "fltk-1.3.4-1/jpeg/jpegint.h"
 1393              		.file 11 "fltk-1.3.4-1/jpeg/jerror.h"
 15038              		.section	.note.gnu.property,"a"
 15039              		.align 8
 15040 0000 04000000 		.long	 1f - 0f
 15041 0004 10000000 		.long	 4f - 1f
 15042 0008 05000000 		.long	 5
 15043              	0:
 15044 000c 474E5500 		.string	 "GNU"
 15045              	1:
 15046              		.align 8
 15047 0010 020000C0 		.long	 0xc0000002
 15048 0014 04000000 		.long	 3f - 2f
 15049              	2:
 15050 0018 03000000 		.long	 0x3
 15051              	3:
 15052 001c 00000000 		.align 8
 15053              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 jdmainct.c
     /tmp/ccB1IDmP.s:7      .text.process_data_simple_main:0000000000000000 process_data_simple_main
     /tmp/ccB1IDmP.s:136    .text.process_data_context_main:0000000000000000 process_data_context_main
     /tmp/ccB1IDmP.s:667    .text.process_data_crank_post:0000000000000000 process_data_crank_post
     /tmp/ccB1IDmP.s:707    .text.start_pass_main:0000000000000000 start_pass_main
     /tmp/ccB1IDmP.s:1062   .text.jinit_d_main_controller:0000000000000000 jinit_d_main_controller
                           .group:0000000000000000 wm4.0.a6b23a418548ac0bda5d8549c4a2ec91
                           .group:0000000000000000 wm4.stdcpredef.h.19.8dc41bed5d9037ff9622e015fb5f0ce3
                           .group:0000000000000000 wm4.jconfig.h.10.247fc3ff67998f3074970b1373c70333
                           .group:0000000000000000 wm4.features.h.19.5b5f5a19624a0527f479fdc52d54808f
                           .group:0000000000000000 wm4.cdefs.h.19.98d80eddbb3f64f4f30cd9aee9c5593c
                           .group:0000000000000000 wm4.wordsize.h.4.baf119258a1e53d8dba67ceac44ab6bc
                           .group:0000000000000000 wm4.cdefs.h.475.fb75d2e4416aa349344e6f45f683bf28
                           .group:0000000000000000 wm4.stubs64.h.10.6ce4c34010988db072c080326a6b6319
                           .group:0000000000000000 wm4.libcheaderstart.h.37.d9274df4cc0172452960ad9644fa5579
                           .group:0000000000000000 wm4.stdlib.h.28.2cffa49d94c5d85f4538f55f7b59771d
                           .group:0000000000000000 wm4.stddef.h.181.13772e73e5434e8cc4fafaaddad2b5da
                           .group:0000000000000000 wm4.waitflags.h.25.41934de4af99038521c2782f418699b1
                           .group:0000000000000000 wm4.waitstatus.h.28.93f167f49d64e2b9b99f98d1162a93bf
                           .group:0000000000000000 wm4.stdlib.h.43.9fa4f727a2f1cb8d2450a574c9195553
                           .group:0000000000000000 wm4.floatn.h.20.80c7cf8a8dfad237004b28d051d5afda
                           .group:0000000000000000 wm4.floatncommon.h.34.7e1840d7dfb19e9bdb51aeb077d76637
                           .group:0000000000000000 wm4.stdlib.h.71.2927e068ec678159b4f68ec2f089f7e6
                           .group:0000000000000000 wm4.types.h.109.56eb9ae966b255288cc544f18746a7ff
                           .group:0000000000000000 wm4.typesizes.h.24.2c64f817c0dc4b6fb2a2c619d717be26
                           .group:0000000000000000 wm4.time64.h.24.a8166ae916ec910dab0d8987098d42ee
                           .group:0000000000000000 wm4.types.h.40.18f72bab8242c2bb4c532a2aa95b5f00
                           .group:0000000000000000 wm4.stddef.h.231.0adce5c8c1fd8096aaff50981b3d1f0f
                           .group:0000000000000000 wm4.endian.h.20.efabd1018df5d7b4052c27dc6bdd5ce5
                           .group:0000000000000000 wm4.endianness.h.2.2c6a211f7909f3af5e9e9cfa3b6b63c8
                           .group:0000000000000000 wm4.endian.h.40.9e5d395adda2f4eb53ae69b69b664084
                           .group:0000000000000000 wm4.endian.h.27.4c4f94262c4eaee2982fe00ed1b4f173
                           .group:0000000000000000 wm4.byteswap.h.24.5363c019348146aada5aeadf51456576
                           .group:0000000000000000 wm4.endian.h.39.30a606dbd99b6c3df61c1f06dbdabd4e
                           .group:0000000000000000 wm4.select.h.28.eb2f3debdbcffd1442ebddaebc4fb6ff
                           .group:0000000000000000 wm4.__sigset_t.h.2.6b1ab6ff3d7b8fd9c0c42b0d80afbd80
                           .group:0000000000000000 wm4.select.h.44.887a4ff60aa97fcd9c1be017735e1675
                           .group:0000000000000000 wm4.select2.h.27.f95f2ab0ffee66dc1b6575014894b21a
                           .group:0000000000000000 wm4.types.h.186.489a4ed8f2d29cd358843490f54ddea5
                           .group:0000000000000000 wm4.pthreadtypesarch.h.25.6063cba99664c916e22d3a912bcc348a
                           .group:0000000000000000 wm4.struct_mutex.h.20.ed51f515172b9be99e450ba83eb5dd99
                           .group:0000000000000000 wm4.struct_rwlock.h.21.0254880f2904e3833fb8ae683e0f0330
                           .group:0000000000000000 wm4.alloca.h.19.edefa922a76c1cbaaf1e416903ba2d1c
                           .group:0000000000000000 wm4.alloca.h.29.156e12058824cc23d961c4d3b13031f6
                           .group:0000000000000000 wm4.stdio.h.24.5c1b97eef3c86b7a2549420f69f4f128
                           .group:0000000000000000 wm4.libcheaderstart.h.31.87b3c285aeba93fe355ad19123070832
                           .group:0000000000000000 wm4.stdio.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.stddef.h.231.8136eebbab3406dbf57a7ec475dd5d83
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.struct_FILE.h.19.0888ac70396abe1031c03d393554032f
                           .group:0000000000000000 wm4.stdio.h.53.139e45cf040c0964b2932c0c1bdaf6b2
                           .group:0000000000000000 wm4.stdio_lim.h.19.e4b00b560d878dcfbc6635b3406640c5
                           .group:0000000000000000 wm4.stdio.h.141.d7a290e19ca077c9e4aa7c43ede17a73
                           .group:0000000000000000 wm4.stdio.h.20.b0caa08e5723aa5941367be0e5d2ec59
                           .group:0000000000000000 wm4.stdio2.h.20.f45a0373b68e1296c4aa8cc09d66a9df
                           .group:0000000000000000 wm4.string.h.23.93403f89af7dba8212345449bb14b09d
                           .group:0000000000000000 wm4.string.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.strings.h.19.a259f126920b1bb5ef76bc62b3984a3c
                           .group:0000000000000000 wm4.jinclude.h.67.b19f941ec97c4845fa4609292c7e2db4
                           .group:0000000000000000 wm4.jmorecfg.h.33.3b4c5f9cc07b3737823b06caf24d5b05
                           .group:0000000000000000 wm4.jpeglib.h.40.4f111c27252a38df39328d65454e82f4
                           .group:0000000000000000 wm4.jpegint.h.26.5219ef5d4e4921371d38e77b6091fd20
                           .group:0000000000000000 wm4.jerror.h.25.1dbd8674e70ab5215bc0037320e5c2a2

NO UNDEFINED SYMBOLS
