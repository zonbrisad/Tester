   1              		.file	"jidctfst.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.jpeg_idct_ifast,"ax",@progbits
   5              		.p2align 4
   6              		.globl	jpeg_idct_ifast
   8              	jpeg_idct_ifast:
   9              	.LVL0:
  10              	.LFB51:
  11              		.file 1 "fltk-1.3.4-1/jpeg/jidctfst.c"
   1:fltk-1.3.4-1/jpeg/jidctfst.c **** /*
   2:fltk-1.3.4-1/jpeg/jidctfst.c ****  * jidctfst.c
   3:fltk-1.3.4-1/jpeg/jidctfst.c ****  *
   4:fltk-1.3.4-1/jpeg/jidctfst.c ****  * Copyright (C) 1994-1998, Thomas G. Lane.
   5:fltk-1.3.4-1/jpeg/jidctfst.c ****  * This file is part of the Independent JPEG Group's software.
   6:fltk-1.3.4-1/jpeg/jidctfst.c ****  * For conditions of distribution and use, see the accompanying README file.
   7:fltk-1.3.4-1/jpeg/jidctfst.c ****  *
   8:fltk-1.3.4-1/jpeg/jidctfst.c ****  * This file contains a fast, not so accurate integer implementation of the
   9:fltk-1.3.4-1/jpeg/jidctfst.c ****  * inverse DCT (Discrete Cosine Transform).  In the IJG code, this routine
  10:fltk-1.3.4-1/jpeg/jidctfst.c ****  * must also perform dequantization of the input coefficients.
  11:fltk-1.3.4-1/jpeg/jidctfst.c ****  *
  12:fltk-1.3.4-1/jpeg/jidctfst.c ****  * A 2-D IDCT can be done by 1-D IDCT on each column followed by 1-D IDCT
  13:fltk-1.3.4-1/jpeg/jidctfst.c ****  * on each row (or vice versa, but it's more convenient to emit a row at
  14:fltk-1.3.4-1/jpeg/jidctfst.c ****  * a time).  Direct algorithms are also available, but they are much more
  15:fltk-1.3.4-1/jpeg/jidctfst.c ****  * complex and seem not to be any faster when reduced to code.
  16:fltk-1.3.4-1/jpeg/jidctfst.c ****  *
  17:fltk-1.3.4-1/jpeg/jidctfst.c ****  * This implementation is based on Arai, Agui, and Nakajima's algorithm for
  18:fltk-1.3.4-1/jpeg/jidctfst.c ****  * scaled DCT.  Their original paper (Trans. IEICE E-71(11):1095) is in
  19:fltk-1.3.4-1/jpeg/jidctfst.c ****  * Japanese, but the algorithm is described in the Pennebaker & Mitchell
  20:fltk-1.3.4-1/jpeg/jidctfst.c ****  * JPEG textbook (see REFERENCES section in file README).  The following code
  21:fltk-1.3.4-1/jpeg/jidctfst.c ****  * is based directly on figure 4-8 in P&M.
  22:fltk-1.3.4-1/jpeg/jidctfst.c ****  * While an 8-point DCT cannot be done in less than 11 multiplies, it is
  23:fltk-1.3.4-1/jpeg/jidctfst.c ****  * possible to arrange the computation so that many of the multiplies are
  24:fltk-1.3.4-1/jpeg/jidctfst.c ****  * simple scalings of the final outputs.  These multiplies can then be
  25:fltk-1.3.4-1/jpeg/jidctfst.c ****  * folded into the multiplications or divisions by the JPEG quantization
  26:fltk-1.3.4-1/jpeg/jidctfst.c ****  * table entries.  The AA&N method leaves only 5 multiplies and 29 adds
  27:fltk-1.3.4-1/jpeg/jidctfst.c ****  * to be done in the DCT itself.
  28:fltk-1.3.4-1/jpeg/jidctfst.c ****  * The primary disadvantage of this method is that with fixed-point math,
  29:fltk-1.3.4-1/jpeg/jidctfst.c ****  * accuracy is lost due to imprecise representation of the scaled
  30:fltk-1.3.4-1/jpeg/jidctfst.c ****  * quantization values.  The smaller the quantization table entry, the less
  31:fltk-1.3.4-1/jpeg/jidctfst.c ****  * precise the scaled value, so this implementation does worse with high-
  32:fltk-1.3.4-1/jpeg/jidctfst.c ****  * quality-setting files than with low-quality ones.
  33:fltk-1.3.4-1/jpeg/jidctfst.c ****  */
  34:fltk-1.3.4-1/jpeg/jidctfst.c **** 
  35:fltk-1.3.4-1/jpeg/jidctfst.c **** #define JPEG_INTERNALS
  36:fltk-1.3.4-1/jpeg/jidctfst.c **** #include "jinclude.h"
  37:fltk-1.3.4-1/jpeg/jidctfst.c **** #include "jpeglib.h"
  38:fltk-1.3.4-1/jpeg/jidctfst.c **** #include "jdct.h"		/* Private declarations for DCT subsystem */
  39:fltk-1.3.4-1/jpeg/jidctfst.c **** 
  40:fltk-1.3.4-1/jpeg/jidctfst.c **** #ifdef DCT_IFAST_SUPPORTED
  41:fltk-1.3.4-1/jpeg/jidctfst.c **** 
  42:fltk-1.3.4-1/jpeg/jidctfst.c **** 
  43:fltk-1.3.4-1/jpeg/jidctfst.c **** /*
  44:fltk-1.3.4-1/jpeg/jidctfst.c ****  * This module is specialized to the case DCTSIZE = 8.
  45:fltk-1.3.4-1/jpeg/jidctfst.c ****  */
  46:fltk-1.3.4-1/jpeg/jidctfst.c **** 
  47:fltk-1.3.4-1/jpeg/jidctfst.c **** #if DCTSIZE != 8
  48:fltk-1.3.4-1/jpeg/jidctfst.c ****   Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
  49:fltk-1.3.4-1/jpeg/jidctfst.c **** #endif
  50:fltk-1.3.4-1/jpeg/jidctfst.c **** 
  51:fltk-1.3.4-1/jpeg/jidctfst.c **** 
  52:fltk-1.3.4-1/jpeg/jidctfst.c **** /* Scaling decisions are generally the same as in the LL&M algorithm;
  53:fltk-1.3.4-1/jpeg/jidctfst.c ****  * see jidctint.c for more details.  However, we choose to descale
  54:fltk-1.3.4-1/jpeg/jidctfst.c ****  * (right shift) multiplication products as soon as they are formed,
  55:fltk-1.3.4-1/jpeg/jidctfst.c ****  * rather than carrying additional fractional bits into subsequent additions.
  56:fltk-1.3.4-1/jpeg/jidctfst.c ****  * This compromises accuracy slightly, but it lets us save a few shifts.
  57:fltk-1.3.4-1/jpeg/jidctfst.c ****  * More importantly, 16-bit arithmetic is then adequate (for 8-bit samples)
  58:fltk-1.3.4-1/jpeg/jidctfst.c ****  * everywhere except in the multiplications proper; this saves a good deal
  59:fltk-1.3.4-1/jpeg/jidctfst.c ****  * of work on 16-bit-int machines.
  60:fltk-1.3.4-1/jpeg/jidctfst.c ****  *
  61:fltk-1.3.4-1/jpeg/jidctfst.c ****  * The dequantized coefficients are not integers because the AA&N scaling
  62:fltk-1.3.4-1/jpeg/jidctfst.c ****  * factors have been incorporated.  We represent them scaled up by PASS1_BITS,
  63:fltk-1.3.4-1/jpeg/jidctfst.c ****  * so that the first and second IDCT rounds have the same input scaling.
  64:fltk-1.3.4-1/jpeg/jidctfst.c ****  * For 8-bit JSAMPLEs, we choose IFAST_SCALE_BITS = PASS1_BITS so as to
  65:fltk-1.3.4-1/jpeg/jidctfst.c ****  * avoid a descaling shift; this compromises accuracy rather drastically
  66:fltk-1.3.4-1/jpeg/jidctfst.c ****  * for small quantization table entries, but it saves a lot of shifts.
  67:fltk-1.3.4-1/jpeg/jidctfst.c ****  * For 12-bit JSAMPLEs, there's no hope of using 16x16 multiplies anyway,
  68:fltk-1.3.4-1/jpeg/jidctfst.c ****  * so we use a much larger scaling factor to preserve accuracy.
  69:fltk-1.3.4-1/jpeg/jidctfst.c ****  *
  70:fltk-1.3.4-1/jpeg/jidctfst.c ****  * A final compromise is to represent the multiplicative constants to only
  71:fltk-1.3.4-1/jpeg/jidctfst.c ****  * 8 fractional bits, rather than 13.  This saves some shifting work on some
  72:fltk-1.3.4-1/jpeg/jidctfst.c ****  * machines, and may also reduce the cost of multiplication (since there
  73:fltk-1.3.4-1/jpeg/jidctfst.c ****  * are fewer one-bits in the constants).
  74:fltk-1.3.4-1/jpeg/jidctfst.c ****  */
  75:fltk-1.3.4-1/jpeg/jidctfst.c **** 
  76:fltk-1.3.4-1/jpeg/jidctfst.c **** #if BITS_IN_JSAMPLE == 8
  77:fltk-1.3.4-1/jpeg/jidctfst.c **** #define CONST_BITS  8
  78:fltk-1.3.4-1/jpeg/jidctfst.c **** #define PASS1_BITS  2
  79:fltk-1.3.4-1/jpeg/jidctfst.c **** #else
  80:fltk-1.3.4-1/jpeg/jidctfst.c **** #define CONST_BITS  8
  81:fltk-1.3.4-1/jpeg/jidctfst.c **** #define PASS1_BITS  1		/* lose a little precision to avoid overflow */
  82:fltk-1.3.4-1/jpeg/jidctfst.c **** #endif
  83:fltk-1.3.4-1/jpeg/jidctfst.c **** 
  84:fltk-1.3.4-1/jpeg/jidctfst.c **** /* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
  85:fltk-1.3.4-1/jpeg/jidctfst.c ****  * causing a lot of useless floating-point operations at run time.
  86:fltk-1.3.4-1/jpeg/jidctfst.c ****  * To get around this we use the following pre-calculated constants.
  87:fltk-1.3.4-1/jpeg/jidctfst.c ****  * If you change CONST_BITS you may want to add appropriate values.
  88:fltk-1.3.4-1/jpeg/jidctfst.c ****  * (With a reasonable C compiler, you can just rely on the FIX() macro...)
  89:fltk-1.3.4-1/jpeg/jidctfst.c ****  */
  90:fltk-1.3.4-1/jpeg/jidctfst.c **** 
  91:fltk-1.3.4-1/jpeg/jidctfst.c **** #if CONST_BITS == 8
  92:fltk-1.3.4-1/jpeg/jidctfst.c **** #define FIX_1_082392200  ((INT32)  277)		/* FIX(1.082392200) */
  93:fltk-1.3.4-1/jpeg/jidctfst.c **** #define FIX_1_414213562  ((INT32)  362)		/* FIX(1.414213562) */
  94:fltk-1.3.4-1/jpeg/jidctfst.c **** #define FIX_1_847759065  ((INT32)  473)		/* FIX(1.847759065) */
  95:fltk-1.3.4-1/jpeg/jidctfst.c **** #define FIX_2_613125930  ((INT32)  669)		/* FIX(2.613125930) */
  96:fltk-1.3.4-1/jpeg/jidctfst.c **** #else
  97:fltk-1.3.4-1/jpeg/jidctfst.c **** #define FIX_1_082392200  FIX(1.082392200)
  98:fltk-1.3.4-1/jpeg/jidctfst.c **** #define FIX_1_414213562  FIX(1.414213562)
  99:fltk-1.3.4-1/jpeg/jidctfst.c **** #define FIX_1_847759065  FIX(1.847759065)
 100:fltk-1.3.4-1/jpeg/jidctfst.c **** #define FIX_2_613125930  FIX(2.613125930)
 101:fltk-1.3.4-1/jpeg/jidctfst.c **** #endif
 102:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 103:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 104:fltk-1.3.4-1/jpeg/jidctfst.c **** /* We can gain a little more speed, with a further compromise in accuracy,
 105:fltk-1.3.4-1/jpeg/jidctfst.c ****  * by omitting the addition in a descaling shift.  This yields an incorrectly
 106:fltk-1.3.4-1/jpeg/jidctfst.c ****  * rounded result half the time...
 107:fltk-1.3.4-1/jpeg/jidctfst.c ****  */
 108:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 109:fltk-1.3.4-1/jpeg/jidctfst.c **** #ifndef USE_ACCURATE_ROUNDING
 110:fltk-1.3.4-1/jpeg/jidctfst.c **** #undef DESCALE
 111:fltk-1.3.4-1/jpeg/jidctfst.c **** #define DESCALE(x,n)  RIGHT_SHIFT(x, n)
 112:fltk-1.3.4-1/jpeg/jidctfst.c **** #endif
 113:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 114:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 115:fltk-1.3.4-1/jpeg/jidctfst.c **** /* Multiply a DCTELEM variable by an INT32 constant, and immediately
 116:fltk-1.3.4-1/jpeg/jidctfst.c ****  * descale to yield a DCTELEM result.
 117:fltk-1.3.4-1/jpeg/jidctfst.c ****  */
 118:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 119:fltk-1.3.4-1/jpeg/jidctfst.c **** #define MULTIPLY(var,const)  ((DCTELEM) DESCALE((var) * (const), CONST_BITS))
 120:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 121:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 122:fltk-1.3.4-1/jpeg/jidctfst.c **** /* Dequantize a coefficient by multiplying it by the multiplier-table
 123:fltk-1.3.4-1/jpeg/jidctfst.c ****  * entry; produce a DCTELEM result.  For 8-bit data a 16x16->16
 124:fltk-1.3.4-1/jpeg/jidctfst.c ****  * multiplication will do.  For 12-bit data, the multiplier table is
 125:fltk-1.3.4-1/jpeg/jidctfst.c ****  * declared INT32, so a 32-bit multiply will be used.
 126:fltk-1.3.4-1/jpeg/jidctfst.c ****  */
 127:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 128:fltk-1.3.4-1/jpeg/jidctfst.c **** #if BITS_IN_JSAMPLE == 8
 129:fltk-1.3.4-1/jpeg/jidctfst.c **** #define DEQUANTIZE(coef,quantval)  (((IFAST_MULT_TYPE) (coef)) * (quantval))
 130:fltk-1.3.4-1/jpeg/jidctfst.c **** #else
 131:fltk-1.3.4-1/jpeg/jidctfst.c **** #define DEQUANTIZE(coef,quantval)  \
 132:fltk-1.3.4-1/jpeg/jidctfst.c **** 	DESCALE((coef)*(quantval), IFAST_SCALE_BITS-PASS1_BITS)
 133:fltk-1.3.4-1/jpeg/jidctfst.c **** #endif
 134:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 135:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 136:fltk-1.3.4-1/jpeg/jidctfst.c **** /* Like DESCALE, but applies to a DCTELEM and produces an int.
 137:fltk-1.3.4-1/jpeg/jidctfst.c ****  * We assume that int right shift is unsigned if INT32 right shift is.
 138:fltk-1.3.4-1/jpeg/jidctfst.c ****  */
 139:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 140:fltk-1.3.4-1/jpeg/jidctfst.c **** #ifdef RIGHT_SHIFT_IS_UNSIGNED
 141:fltk-1.3.4-1/jpeg/jidctfst.c **** #define ISHIFT_TEMPS	DCTELEM ishift_temp;
 142:fltk-1.3.4-1/jpeg/jidctfst.c **** #if BITS_IN_JSAMPLE == 8
 143:fltk-1.3.4-1/jpeg/jidctfst.c **** #define DCTELEMBITS  16		/* DCTELEM may be 16 or 32 bits */
 144:fltk-1.3.4-1/jpeg/jidctfst.c **** #else
 145:fltk-1.3.4-1/jpeg/jidctfst.c **** #define DCTELEMBITS  32		/* DCTELEM must be 32 bits */
 146:fltk-1.3.4-1/jpeg/jidctfst.c **** #endif
 147:fltk-1.3.4-1/jpeg/jidctfst.c **** #define IRIGHT_SHIFT(x,shft)  \
 148:fltk-1.3.4-1/jpeg/jidctfst.c ****     ((ishift_temp = (x)) < 0 ? \
 149:fltk-1.3.4-1/jpeg/jidctfst.c ****      (ishift_temp >> (shft)) | ((~((DCTELEM) 0)) << (DCTELEMBITS-(shft))) : \
 150:fltk-1.3.4-1/jpeg/jidctfst.c ****      (ishift_temp >> (shft)))
 151:fltk-1.3.4-1/jpeg/jidctfst.c **** #else
 152:fltk-1.3.4-1/jpeg/jidctfst.c **** #define ISHIFT_TEMPS
 153:fltk-1.3.4-1/jpeg/jidctfst.c **** #define IRIGHT_SHIFT(x,shft)	((x) >> (shft))
 154:fltk-1.3.4-1/jpeg/jidctfst.c **** #endif
 155:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 156:fltk-1.3.4-1/jpeg/jidctfst.c **** #ifdef USE_ACCURATE_ROUNDING
 157:fltk-1.3.4-1/jpeg/jidctfst.c **** #define IDESCALE(x,n)  ((int) IRIGHT_SHIFT((x) + (1 << ((n)-1)), n))
 158:fltk-1.3.4-1/jpeg/jidctfst.c **** #else
 159:fltk-1.3.4-1/jpeg/jidctfst.c **** #define IDESCALE(x,n)  ((int) IRIGHT_SHIFT(x, n))
 160:fltk-1.3.4-1/jpeg/jidctfst.c **** #endif
 161:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 162:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 163:fltk-1.3.4-1/jpeg/jidctfst.c **** /*
 164:fltk-1.3.4-1/jpeg/jidctfst.c ****  * Perform dequantization and inverse DCT on one block of coefficients.
 165:fltk-1.3.4-1/jpeg/jidctfst.c ****  */
 166:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 167:fltk-1.3.4-1/jpeg/jidctfst.c **** GLOBAL(void)
 168:fltk-1.3.4-1/jpeg/jidctfst.c **** jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
 169:fltk-1.3.4-1/jpeg/jidctfst.c **** 		 JCOEFPTR coef_block,
 170:fltk-1.3.4-1/jpeg/jidctfst.c **** 		 JSAMPARRAY output_buf, JDIMENSION output_col)
 171:fltk-1.3.4-1/jpeg/jidctfst.c **** {
  12              		.loc 1 171 1 view -0
  13              		.cfi_startproc
  14              		.loc 1 171 1 is_stmt 0 view .LVU1
  15 0000 F30F1EFA 		endbr64
  16 0004 4157     		pushq	%r15
  17              		.cfi_def_cfa_offset 16
  18              		.cfi_offset 15, -16
  19 0006 4156     		pushq	%r14
  20              		.cfi_def_cfa_offset 24
  21              		.cfi_offset 14, -24
  22 0008 4155     		pushq	%r13
  23              		.cfi_def_cfa_offset 32
  24              		.cfi_offset 13, -32
  25 000a 4154     		pushq	%r12
  26              		.cfi_def_cfa_offset 40
  27              		.cfi_offset 12, -40
  28 000c 55       		pushq	%rbp
  29              		.cfi_def_cfa_offset 48
  30              		.cfi_offset 6, -48
  31 000d 53       		pushq	%rbx
  32              		.cfi_def_cfa_offset 56
  33              		.cfi_offset 3, -56
  34 000e 4881EC38 		subq	$312, %rsp
  34      010000
  35              		.cfi_def_cfa_offset 368
 172:fltk-1.3.4-1/jpeg/jidctfst.c ****   DCTELEM tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
 173:fltk-1.3.4-1/jpeg/jidctfst.c ****   DCTELEM tmp10, tmp11, tmp12, tmp13;
 174:fltk-1.3.4-1/jpeg/jidctfst.c ****   DCTELEM z5, z10, z11, z12, z13;
 175:fltk-1.3.4-1/jpeg/jidctfst.c ****   JCOEFPTR inptr;
 176:fltk-1.3.4-1/jpeg/jidctfst.c ****   IFAST_MULT_TYPE * quantptr;
 177:fltk-1.3.4-1/jpeg/jidctfst.c ****   int * wsptr;
 178:fltk-1.3.4-1/jpeg/jidctfst.c ****   JSAMPROW outptr;
 179:fltk-1.3.4-1/jpeg/jidctfst.c ****   JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  36              		.loc 1 179 12 view .LVU2
  37 0015 488BAFB8 		movq	440(%rdi), %rbp
  37      010000
 180:fltk-1.3.4-1/jpeg/jidctfst.c ****   int ctr;
 181:fltk-1.3.4-1/jpeg/jidctfst.c ****   int workspace[DCTSIZE2];	/* buffers data between passes */
 182:fltk-1.3.4-1/jpeg/jidctfst.c ****   SHIFT_TEMPS			/* for DESCALE */
 183:fltk-1.3.4-1/jpeg/jidctfst.c ****   ISHIFT_TEMPS			/* for IDESCALE */
 184:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 185:fltk-1.3.4-1/jpeg/jidctfst.c ****   /* Pass 1: process columns from input, store into work array. */
 186:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 187:fltk-1.3.4-1/jpeg/jidctfst.c ****   inptr = coef_block;
 188:fltk-1.3.4-1/jpeg/jidctfst.c ****   quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
  38              		.loc 1 188 12 view .LVU3
  39 001c 4C8B4E58 		movq	88(%rsi), %r9
 171:fltk-1.3.4-1/jpeg/jidctfst.c ****   DCTELEM tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  40              		.loc 1 171 1 view .LVU4
  41 0020 44894424 		movl	%r8d, 20(%rsp)
  41      14
 189:fltk-1.3.4-1/jpeg/jidctfst.c ****   wsptr = workspace;
  42              		.loc 1 189 9 view .LVU5
  43 0025 4C8D4424 		leaq	32(%rsp), %r8
  43      20
  44              	.LVL1:
  45              		.loc 1 189 9 view .LVU6
  46 002a 4C8D7C24 		leaq	64(%rsp), %r15
  46      40
 171:fltk-1.3.4-1/jpeg/jidctfst.c ****   DCTELEM tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  47              		.loc 1 171 1 view .LVU7
  48 002f 48894C24 		movq	%rcx, 8(%rsp)
  48      08
 179:fltk-1.3.4-1/jpeg/jidctfst.c ****   int ctr;
  49              		.loc 1 179 12 view .LVU8
  50 0034 4883ED80 		subq	$-128, %rbp
 171:fltk-1.3.4-1/jpeg/jidctfst.c ****   DCTELEM tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  51              		.loc 1 171 1 view .LVU9
  52 0038 64488B04 		movq	%fs:40, %rax
  52      25280000 
  52      00
  53 0041 48898424 		movq	%rax, 296(%rsp)
  53      28010000 
  54 0049 31C0     		xorl	%eax, %eax
 172:fltk-1.3.4-1/jpeg/jidctfst.c ****   DCTELEM tmp10, tmp11, tmp12, tmp13;
  55              		.loc 1 172 3 is_stmt 1 view .LVU10
 173:fltk-1.3.4-1/jpeg/jidctfst.c ****   DCTELEM z5, z10, z11, z12, z13;
  56              		.loc 1 173 3 view .LVU11
 174:fltk-1.3.4-1/jpeg/jidctfst.c ****   JCOEFPTR inptr;
  57              		.loc 1 174 3 view .LVU12
 175:fltk-1.3.4-1/jpeg/jidctfst.c ****   IFAST_MULT_TYPE * quantptr;
  58              		.loc 1 175 3 view .LVU13
 176:fltk-1.3.4-1/jpeg/jidctfst.c ****   int * wsptr;
  59              		.loc 1 176 3 view .LVU14
 177:fltk-1.3.4-1/jpeg/jidctfst.c ****   JSAMPROW outptr;
  60              		.loc 1 177 3 view .LVU15
 178:fltk-1.3.4-1/jpeg/jidctfst.c ****   JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  61              		.loc 1 178 3 view .LVU16
 179:fltk-1.3.4-1/jpeg/jidctfst.c ****   int ctr;
  62              		.loc 1 179 3 view .LVU17
  63              	.LVL2:
 180:fltk-1.3.4-1/jpeg/jidctfst.c ****   int workspace[DCTSIZE2];	/* buffers data between passes */
  64              		.loc 1 180 3 view .LVU18
 181:fltk-1.3.4-1/jpeg/jidctfst.c ****   SHIFT_TEMPS			/* for DESCALE */
  65              		.loc 1 181 3 view .LVU19
 187:fltk-1.3.4-1/jpeg/jidctfst.c ****   quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
  66              		.loc 1 187 3 view .LVU20
 188:fltk-1.3.4-1/jpeg/jidctfst.c ****   wsptr = workspace;
  67              		.loc 1 188 3 view .LVU21
  68              		.loc 1 189 3 view .LVU22
 190:fltk-1.3.4-1/jpeg/jidctfst.c ****   for (ctr = DCTSIZE; ctr > 0; ctr--) {
  69              		.loc 1 190 3 view .LVU23
  70              		.loc 1 190 23 view .LVU24
 189:fltk-1.3.4-1/jpeg/jidctfst.c ****   for (ctr = DCTSIZE; ctr > 0; ctr--) {
  71              		.loc 1 189 9 is_stmt 0 view .LVU25
  72 004b 4C894424 		movq	%r8, 24(%rsp)
  72      18
  73 0050 E9060100 		jmp	.L4
  73      00
  74              	.LVL3:
  75              		.p2align 4,,10
  76 0055 0F1F00   		.p2align 3
  77              	.L2:
 191:fltk-1.3.4-1/jpeg/jidctfst.c ****     /* Due to quantization, we will usually find that many of the input
 192:fltk-1.3.4-1/jpeg/jidctfst.c ****      * coefficients are zero, especially the AC terms.  We can exploit this
 193:fltk-1.3.4-1/jpeg/jidctfst.c ****      * by short-circuiting the IDCT calculation for any column in which all
 194:fltk-1.3.4-1/jpeg/jidctfst.c ****      * the AC terms are zero.  In that case each output is equal to the
 195:fltk-1.3.4-1/jpeg/jidctfst.c ****      * DC coefficient (with scale factor as needed).
 196:fltk-1.3.4-1/jpeg/jidctfst.c ****      * With typical images and quantization tables, half or more of the
 197:fltk-1.3.4-1/jpeg/jidctfst.c ****      * column DCT calculations can be simplified this way.
 198:fltk-1.3.4-1/jpeg/jidctfst.c ****      */
 199:fltk-1.3.4-1/jpeg/jidctfst.c ****     
 200:fltk-1.3.4-1/jpeg/jidctfst.c ****     if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 201:fltk-1.3.4-1/jpeg/jidctfst.c **** 	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 202:fltk-1.3.4-1/jpeg/jidctfst.c **** 	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 203:fltk-1.3.4-1/jpeg/jidctfst.c **** 	inptr[DCTSIZE*7] == 0) {
 204:fltk-1.3.4-1/jpeg/jidctfst.c ****       /* AC terms all zero */
 205:fltk-1.3.4-1/jpeg/jidctfst.c ****       int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 206:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 207:fltk-1.3.4-1/jpeg/jidctfst.c ****       wsptr[DCTSIZE*0] = dcval;
 208:fltk-1.3.4-1/jpeg/jidctfst.c ****       wsptr[DCTSIZE*1] = dcval;
 209:fltk-1.3.4-1/jpeg/jidctfst.c ****       wsptr[DCTSIZE*2] = dcval;
 210:fltk-1.3.4-1/jpeg/jidctfst.c ****       wsptr[DCTSIZE*3] = dcval;
 211:fltk-1.3.4-1/jpeg/jidctfst.c ****       wsptr[DCTSIZE*4] = dcval;
 212:fltk-1.3.4-1/jpeg/jidctfst.c ****       wsptr[DCTSIZE*5] = dcval;
 213:fltk-1.3.4-1/jpeg/jidctfst.c ****       wsptr[DCTSIZE*6] = dcval;
 214:fltk-1.3.4-1/jpeg/jidctfst.c ****       wsptr[DCTSIZE*7] = dcval;
 215:fltk-1.3.4-1/jpeg/jidctfst.c ****       
 216:fltk-1.3.4-1/jpeg/jidctfst.c ****       inptr++;			/* advance pointers to next column */
 217:fltk-1.3.4-1/jpeg/jidctfst.c ****       quantptr++;
 218:fltk-1.3.4-1/jpeg/jidctfst.c ****       wsptr++;
 219:fltk-1.3.4-1/jpeg/jidctfst.c ****       continue;
 220:fltk-1.3.4-1/jpeg/jidctfst.c ****     }
 221:fltk-1.3.4-1/jpeg/jidctfst.c ****     
 222:fltk-1.3.4-1/jpeg/jidctfst.c ****     /* Even part */
 223:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 224:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
  78              		.loc 1 224 5 is_stmt 1 view .LVU26
 225:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
  79              		.loc 1 225 5 view .LVU27
  80              		.loc 1 225 10 is_stmt 0 view .LVU28
  81 0058 410FAF71 		imull	60(%r9), %esi
  81      3C
  82              	.LVL4:
 226:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
  83              		.loc 1 226 5 is_stmt 1 view .LVU29
 227:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
  84              		.loc 1 227 12 is_stmt 0 view .LVU30
  85 005d 440FBFF3 		movswl	%bx, %r14d
  86              		.loc 1 227 10 view .LVU31
  87 0061 450FAFB1 		imull	188(%r9), %r14d
  87      BC000000 
 226:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
  88              		.loc 1 226 10 view .LVU32
  89 0069 450FAF61 		imull	124(%r9), %r12d
  89      7C
  90              	.LVL5:
  91              		.loc 1 227 5 is_stmt 1 view .LVU33
 228:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 229:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp10 = tmp0 + tmp2;	/* phase 3 */
  92              		.loc 1 229 5 view .LVU34
 230:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp11 = tmp0 - tmp2;
 231:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 232:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 233:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 234:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 235:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp0 = tmp10 + tmp13;	/* phase 2 */
 236:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp3 = tmp10 - tmp13;
 237:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp1 = tmp11 + tmp12;
 238:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp2 = tmp11 - tmp12;
 239:fltk-1.3.4-1/jpeg/jidctfst.c ****     
 240:fltk-1.3.4-1/jpeg/jidctfst.c ****     /* Odd part */
 241:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 242:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 243:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
  93              		.loc 1 243 10 is_stmt 0 view .LVU35
  94 006e 450FAF69 		imull	92(%r9), %r13d
  94      5C
 244:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 245:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
  95              		.loc 1 245 10 view .LVU36
  96 0073 450FAF91 		imull	220(%r9), %r10d
  96      DC000000 
 232:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
  97              		.loc 1 232 11 view .LVU37
  98 007b 428D1C36 		leal	(%rsi,%r14), %ebx
 233:fltk-1.3.4-1/jpeg/jidctfst.c **** 
  99              		.loc 1 233 13 view .LVU38
 100 007f 4429F6   		subl	%r14d, %esi
 101              	.LVL6:
 233:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 102              		.loc 1 233 13 view .LVU39
 103 0082 4863F6   		movslq	%esi, %rsi
 242:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 104              		.loc 1 242 10 view .LVU40
 105 0085 410FAF49 		imull	28(%r9), %ecx
 105      1C
 229:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp11 = tmp0 - tmp2;
 106              		.loc 1 229 11 view .LVU41
 107 008a 458D1C3C 		leal	(%r12,%rdi), %r11d
 108              	.LVL7:
 230:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 109              		.loc 1 230 5 is_stmt 1 view .LVU42
 230:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 110              		.loc 1 230 11 is_stmt 0 view .LVU43
 111 008e 4429E7   		subl	%r12d, %edi
 112              	.LVL8:
 232:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 113              		.loc 1 232 5 is_stmt 1 view .LVU44
 233:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 114              		.loc 1 233 5 view .LVU45
 233:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 115              		.loc 1 233 13 is_stmt 0 view .LVU46
 116 0091 4869F66A 		imulq	$362, %rsi, %rsi
 116      010000
 235:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp3 = tmp10 - tmp13;
 117              		.loc 1 235 10 view .LVU47
 118 0098 458D241B 		leal	(%r11,%rbx), %r12d
 119              	.LVL9:
 236:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp1 = tmp11 + tmp12;
 120              		.loc 1 236 10 view .LVU48
 121 009c 4129DB   		subl	%ebx, %r11d
 122              	.LVL10:
 244:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 123              		.loc 1 244 10 view .LVU49
 124 009f 410FAF81 		imull	156(%r9), %eax
 124      9C000000 
 233:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 125              		.loc 1 233 13 view .LVU50
 126 00a7 48C1FE08 		sarq	$8, %rsi
 233:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 127              		.loc 1 233 11 view .LVU51
 128 00ab 29DE     		subl	%ebx, %esi
 129              	.LVL11:
 235:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp3 = tmp10 - tmp13;
 130              		.loc 1 235 5 is_stmt 1 view .LVU52
 236:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp1 = tmp11 + tmp12;
 131              		.loc 1 236 5 view .LVU53
 237:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp2 = tmp11 - tmp12;
 132              		.loc 1 237 5 view .LVU54
 246:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 247:fltk-1.3.4-1/jpeg/jidctfst.c ****     z13 = tmp6 + tmp5;		/* phase 6 */
 133              		.loc 1 247 9 is_stmt 0 view .LVU55
 134 00ad 458D7405 		leal	0(%r13,%rax), %r14d
 134      00
 248:fltk-1.3.4-1/jpeg/jidctfst.c ****     z10 = tmp6 - tmp5;
 135              		.loc 1 248 9 view .LVU56
 136 00b2 4429E8   		subl	%r13d, %eax
 237:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp2 = tmp11 - tmp12;
 137              		.loc 1 237 10 view .LVU57
 138 00b5 8D1C37   		leal	(%rdi,%rsi), %ebx
 139              	.LVL12:
 238:fltk-1.3.4-1/jpeg/jidctfst.c ****     
 140              		.loc 1 238 5 is_stmt 1 view .LVU58
 238:fltk-1.3.4-1/jpeg/jidctfst.c ****     
 141              		.loc 1 238 10 is_stmt 0 view .LVU59
 142 00b8 29F7     		subl	%esi, %edi
 143              	.LVL13:
 242:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 144              		.loc 1 242 5 is_stmt 1 view .LVU60
 243:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 145              		.loc 1 243 5 view .LVU61
 244:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 146              		.loc 1 244 5 view .LVU62
 245:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 147              		.loc 1 245 5 view .LVU63
 247:fltk-1.3.4-1/jpeg/jidctfst.c ****     z10 = tmp6 - tmp5;
 148              		.loc 1 247 5 view .LVU64
 149              		.loc 1 248 5 view .LVU65
 249:fltk-1.3.4-1/jpeg/jidctfst.c ****     z11 = tmp4 + tmp7;
 150              		.loc 1 249 5 view .LVU66
 151              		.loc 1 249 9 is_stmt 0 view .LVU67
 152 00ba 428D3411 		leal	(%rcx,%r10), %esi
 153              	.LVL14:
 250:fltk-1.3.4-1/jpeg/jidctfst.c ****     z12 = tmp4 - tmp7;
 154              		.loc 1 250 5 is_stmt 1 view .LVU68
 155              		.loc 1 250 9 is_stmt 0 view .LVU69
 156 00be 4429D1   		subl	%r10d, %ecx
 157              	.LVL15:
 251:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 252:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp7 = z11 + z13;		/* phase 5 */
 158              		.loc 1 252 5 is_stmt 1 view .LVU70
 253:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 254:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 255:fltk-1.3.4-1/jpeg/jidctfst.c ****     z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 159              		.loc 1 255 10 is_stmt 0 view .LVU71
 160 00c1 448D1408 		leal	(%rax,%rcx), %r10d
 161              	.LVL16:
 256:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 257:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 162              		.loc 1 257 13 view .LVU72
 163 00c5 4898     		cltq
 252:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 164              		.loc 1 252 10 view .LVU73
 165 00c7 458D2C36 		leal	(%r14,%rsi), %r13d
 166              	.LVL17:
 253:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 167              		.loc 1 253 5 is_stmt 1 view .LVU74
 255:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 168              		.loc 1 255 5 view .LVU75
 253:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 169              		.loc 1 253 13 is_stmt 0 view .LVU76
 170 00cb 4429F6   		subl	%r14d, %esi
 171              	.LVL18:
 255:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 172              		.loc 1 255 10 view .LVU77
 173 00ce 4D63D2   		movslq	%r10d, %r10
 174              		.loc 1 257 13 view .LVU78
 175 00d1 4869C063 		imulq	$-669, %rax, %rax
 175      FDFFFF
 176              	.LVL19:
 253:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 177              		.loc 1 253 13 view .LVU79
 178 00d8 4863F6   		movslq	%esi, %rsi
 256:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 179              		.loc 1 256 13 view .LVU80
 180 00db 4863C9   		movslq	%ecx, %rcx
 255:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 181              		.loc 1 255 10 view .LVU81
 182 00de 4D69D2D9 		imulq	$473, %r10, %r10
 182      010000
 253:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 183              		.loc 1 253 13 view .LVU82
 184 00e5 4869F66A 		imulq	$362, %rsi, %rsi
 184      010000
 185              	.LVL20:
 256:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 186              		.loc 1 256 13 view .LVU83
 187 00ec 4869C915 		imulq	$277, %rcx, %rcx
 187      010000
 188              	.LVL21:
 189              		.loc 1 257 13 view .LVU84
 190 00f3 48C1F808 		sarq	$8, %rax
 255:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 191              		.loc 1 255 10 view .LVU85
 192 00f7 49C1FA08 		sarq	$8, %r10
 193              	.LVL22:
 256:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 194              		.loc 1 256 5 is_stmt 1 view .LVU86
 195              		.loc 1 257 5 view .LVU87
 258:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 259:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp6 = tmp12 - tmp7;	/* phase 2 */
 196              		.loc 1 259 5 view .LVU88
 257:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 197              		.loc 1 257 11 is_stmt 0 view .LVU89
 198 00fb 4401D0   		addl	%r10d, %eax
 253:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 199              		.loc 1 253 13 view .LVU90
 200 00fe 48C1FE08 		sarq	$8, %rsi
 201              		.loc 1 259 10 view .LVU91
 202 0102 4429E8   		subl	%r13d, %eax
 203              	.LVL23:
 260:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp5 = tmp11 - tmp6;
 204              		.loc 1 260 5 is_stmt 1 view .LVU92
 256:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 205              		.loc 1 256 13 is_stmt 0 view .LVU93
 206 0105 48C1F908 		sarq	$8, %rcx
 207              		.loc 1 260 10 view .LVU94
 208 0109 29C6     		subl	%eax, %esi
 209              	.LVL24:
 261:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp4 = tmp10 + tmp5;
 210              		.loc 1 261 5 is_stmt 1 view .LVU95
 256:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 211              		.loc 1 256 11 is_stmt 0 view .LVU96
 212 010b 4429D1   		subl	%r10d, %ecx
 262:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 263:fltk-1.3.4-1/jpeg/jidctfst.c ****     wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 213              		.loc 1 263 36 view .LVU97
 214 010e 478D142C 		leal	(%r12,%r13), %r10d
 215              	.LVL25:
 264:fltk-1.3.4-1/jpeg/jidctfst.c ****     wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 216              		.loc 1 264 36 view .LVU98
 217 0112 4529EC   		subl	%r13d, %r12d
 218              	.LVL26:
 261:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp4 = tmp10 + tmp5;
 219              		.loc 1 261 10 view .LVU99
 220 0115 01F1     		addl	%esi, %ecx
 221              	.LVL27:
 263:fltk-1.3.4-1/jpeg/jidctfst.c ****     wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 222              		.loc 1 263 5 is_stmt 1 view .LVU100
 263:fltk-1.3.4-1/jpeg/jidctfst.c ****     wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 223              		.loc 1 263 36 is_stmt 0 view .LVU101
 224 0117 458950FC 		movl	%r10d, -4(%r8)
 225              		.loc 1 264 5 is_stmt 1 view .LVU102
 265:fltk-1.3.4-1/jpeg/jidctfst.c ****     wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 226              		.loc 1 265 36 is_stmt 0 view .LVU103
 227 011b 448D1403 		leal	(%rbx,%rax), %r10d
 266:fltk-1.3.4-1/jpeg/jidctfst.c ****     wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 228              		.loc 1 266 36 view .LVU104
 229 011f 29C3     		subl	%eax, %ebx
 230              	.LVL28:
 267:fltk-1.3.4-1/jpeg/jidctfst.c ****     wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 231              		.loc 1 267 36 view .LVU105
 232 0121 8D0437   		leal	(%rdi,%rsi), %eax
 233              	.LVL29:
 268:fltk-1.3.4-1/jpeg/jidctfst.c ****     wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 234              		.loc 1 268 36 view .LVU106
 235 0124 29F7     		subl	%esi, %edi
 236              	.LVL30:
 264:fltk-1.3.4-1/jpeg/jidctfst.c ****     wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 237              		.loc 1 264 36 view .LVU107
 238 0126 4589A0DC 		movl	%r12d, 220(%r8)
 238      000000
 265:fltk-1.3.4-1/jpeg/jidctfst.c ****     wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 239              		.loc 1 265 5 is_stmt 1 view .LVU108
 267:fltk-1.3.4-1/jpeg/jidctfst.c ****     wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 240              		.loc 1 267 36 is_stmt 0 view .LVU109
 241 012d 4189403C 		movl	%eax, 60(%r8)
 269:fltk-1.3.4-1/jpeg/jidctfst.c ****     wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 242              		.loc 1 269 36 view .LVU110
 243 0131 418D040B 		leal	(%r11,%rcx), %eax
 270:fltk-1.3.4-1/jpeg/jidctfst.c ****     wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 244              		.loc 1 270 36 view .LVU111
 245 0135 4129CB   		subl	%ecx, %r11d
 246              	.LVL31:
 265:fltk-1.3.4-1/jpeg/jidctfst.c ****     wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 247              		.loc 1 265 36 view .LVU112
 248 0138 4589501C 		movl	%r10d, 28(%r8)
 266:fltk-1.3.4-1/jpeg/jidctfst.c ****     wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 249              		.loc 1 266 5 is_stmt 1 view .LVU113
 266:fltk-1.3.4-1/jpeg/jidctfst.c ****     wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 250              		.loc 1 266 36 is_stmt 0 view .LVU114
 251 013c 418998BC 		movl	%ebx, 188(%r8)
 251      000000
 267:fltk-1.3.4-1/jpeg/jidctfst.c ****     wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 252              		.loc 1 267 5 is_stmt 1 view .LVU115
 268:fltk-1.3.4-1/jpeg/jidctfst.c ****     wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 253              		.loc 1 268 5 view .LVU116
 268:fltk-1.3.4-1/jpeg/jidctfst.c ****     wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 254              		.loc 1 268 36 is_stmt 0 view .LVU117
 255 0143 4189B89C 		movl	%edi, 156(%r8)
 255      000000
 269:fltk-1.3.4-1/jpeg/jidctfst.c ****     wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 256              		.loc 1 269 5 is_stmt 1 view .LVU118
 269:fltk-1.3.4-1/jpeg/jidctfst.c ****     wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 257              		.loc 1 269 36 is_stmt 0 view .LVU119
 258 014a 4189407C 		movl	%eax, 124(%r8)
 259              		.loc 1 270 5 is_stmt 1 view .LVU120
 260              		.loc 1 270 36 is_stmt 0 view .LVU121
 261 014e 4589585C 		movl	%r11d, 92(%r8)
 271:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 272:fltk-1.3.4-1/jpeg/jidctfst.c ****     inptr++;			/* advance pointers to next column */
 262              		.loc 1 272 5 is_stmt 1 view .LVU122
 263              	.LVL32:
 273:fltk-1.3.4-1/jpeg/jidctfst.c ****     quantptr++;
 264              		.loc 1 273 5 view .LVU123
 274:fltk-1.3.4-1/jpeg/jidctfst.c ****     wsptr++;
 265              		.loc 1 274 5 view .LVU124
 266              	.L3:
 190:fltk-1.3.4-1/jpeg/jidctfst.c ****     /* Due to quantization, we will usually find that many of the input
 267              		.loc 1 190 32 discriminator 2 view .LVU125
 190:fltk-1.3.4-1/jpeg/jidctfst.c ****     /* Due to quantization, we will usually find that many of the input
 268              		.loc 1 190 23 discriminator 2 view .LVU126
 190:fltk-1.3.4-1/jpeg/jidctfst.c ****     /* Due to quantization, we will usually find that many of the input
 269              		.loc 1 190 3 is_stmt 0 discriminator 2 view .LVU127
 270 0152 4D39F8   		cmpq	%r15, %r8
 271 0155 0F848500 		je	.L13
 271      0000
 272              	.L4:
 200:fltk-1.3.4-1/jpeg/jidctfst.c **** 	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 273              		.loc 1 200 5 is_stmt 1 view .LVU128
 200:fltk-1.3.4-1/jpeg/jidctfst.c **** 	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 274              		.loc 1 200 14 is_stmt 0 view .LVU129
 275 015b 0FBF4A10 		movswl	16(%rdx), %ecx
 276 015f 0FBF7220 		movswl	32(%rdx), %esi
 277 0163 4983C104 		addq	$4, %r9
 278              	.LVL33:
 200:fltk-1.3.4-1/jpeg/jidctfst.c **** 	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 279              		.loc 1 200 14 view .LVU130
 280 0167 4883C202 		addq	$2, %rdx
 281              	.LVL34:
 200:fltk-1.3.4-1/jpeg/jidctfst.c **** 	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 282              		.loc 1 200 14 view .LVU131
 283 016b 440FBF6A 		movswl	46(%rdx), %r13d
 283      2E
 284 0170 440FBF62 		movswl	62(%rdx), %r12d
 284      3E
 285 0175 4983C004 		addq	$4, %r8
 286              	.LVL35:
 202:fltk-1.3.4-1/jpeg/jidctfst.c **** 	inptr[DCTSIZE*7] == 0) {
 287              		.loc 1 202 49 view .LVU132
 288 0179 4189CB   		movl	%ecx, %r11d
 289 017c 0FBF424E 		movswl	78(%rdx), %eax
 290 0180 0FB75A5E 		movzwl	94(%rdx), %ebx
 291 0184 4109F3   		orl	%esi, %r11d
 292 0187 440FBF52 		movswl	110(%rdx), %r10d
 292      6E
 293 018c 0FBF7AFE 		movswl	-2(%rdx), %edi
 294 0190 4509EB   		orl	%r13d, %r11d
 295 0193 410FAF79 		imull	-4(%r9), %edi
 295      FC
 296 0198 4509E3   		orl	%r12d, %r11d
 297 019b 4109C3   		orl	%eax, %r11d
 298 019e 4109DB   		orl	%ebx, %r11d
 299 01a1 664509D3 		orw	%r10w, %r11w
 300 01a5 0F85ADFE 		jne	.L2
 300      FFFF
 301              	.LBB2:
 205:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 302              		.loc 1 205 7 is_stmt 1 view .LVU133
 303              	.LVL36:
 207:fltk-1.3.4-1/jpeg/jidctfst.c ****       wsptr[DCTSIZE*1] = dcval;
 304              		.loc 1 207 7 view .LVU134
 207:fltk-1.3.4-1/jpeg/jidctfst.c ****       wsptr[DCTSIZE*1] = dcval;
 305              		.loc 1 207 24 is_stmt 0 view .LVU135
 306 01ab 418978FC 		movl	%edi, -4(%r8)
 208:fltk-1.3.4-1/jpeg/jidctfst.c ****       wsptr[DCTSIZE*2] = dcval;
 307              		.loc 1 208 7 is_stmt 1 view .LVU136
 208:fltk-1.3.4-1/jpeg/jidctfst.c ****       wsptr[DCTSIZE*2] = dcval;
 308              		.loc 1 208 24 is_stmt 0 view .LVU137
 309 01af 4189781C 		movl	%edi, 28(%r8)
 209:fltk-1.3.4-1/jpeg/jidctfst.c ****       wsptr[DCTSIZE*3] = dcval;
 310              		.loc 1 209 7 is_stmt 1 view .LVU138
 209:fltk-1.3.4-1/jpeg/jidctfst.c ****       wsptr[DCTSIZE*3] = dcval;
 311              		.loc 1 209 24 is_stmt 0 view .LVU139
 312 01b3 4189783C 		movl	%edi, 60(%r8)
 210:fltk-1.3.4-1/jpeg/jidctfst.c ****       wsptr[DCTSIZE*4] = dcval;
 313              		.loc 1 210 7 is_stmt 1 view .LVU140
 210:fltk-1.3.4-1/jpeg/jidctfst.c ****       wsptr[DCTSIZE*4] = dcval;
 314              		.loc 1 210 24 is_stmt 0 view .LVU141
 315 01b7 4189785C 		movl	%edi, 92(%r8)
 211:fltk-1.3.4-1/jpeg/jidctfst.c ****       wsptr[DCTSIZE*5] = dcval;
 316              		.loc 1 211 7 is_stmt 1 view .LVU142
 211:fltk-1.3.4-1/jpeg/jidctfst.c ****       wsptr[DCTSIZE*5] = dcval;
 317              		.loc 1 211 24 is_stmt 0 view .LVU143
 318 01bb 4189787C 		movl	%edi, 124(%r8)
 212:fltk-1.3.4-1/jpeg/jidctfst.c ****       wsptr[DCTSIZE*6] = dcval;
 319              		.loc 1 212 7 is_stmt 1 view .LVU144
 212:fltk-1.3.4-1/jpeg/jidctfst.c ****       wsptr[DCTSIZE*6] = dcval;
 320              		.loc 1 212 24 is_stmt 0 view .LVU145
 321 01bf 4189B89C 		movl	%edi, 156(%r8)
 321      000000
 213:fltk-1.3.4-1/jpeg/jidctfst.c ****       wsptr[DCTSIZE*7] = dcval;
 322              		.loc 1 213 7 is_stmt 1 view .LVU146
 213:fltk-1.3.4-1/jpeg/jidctfst.c ****       wsptr[DCTSIZE*7] = dcval;
 323              		.loc 1 213 24 is_stmt 0 view .LVU147
 324 01c6 4189B8BC 		movl	%edi, 188(%r8)
 324      000000
 214:fltk-1.3.4-1/jpeg/jidctfst.c ****       
 325              		.loc 1 214 7 is_stmt 1 view .LVU148
 214:fltk-1.3.4-1/jpeg/jidctfst.c ****       
 326              		.loc 1 214 24 is_stmt 0 view .LVU149
 327 01cd 4189B8DC 		movl	%edi, 220(%r8)
 327      000000
 216:fltk-1.3.4-1/jpeg/jidctfst.c ****       quantptr++;
 328              		.loc 1 216 7 is_stmt 1 view .LVU150
 329              	.LVL37:
 217:fltk-1.3.4-1/jpeg/jidctfst.c ****       wsptr++;
 330              		.loc 1 217 7 view .LVU151
 218:fltk-1.3.4-1/jpeg/jidctfst.c ****       continue;
 331              		.loc 1 218 7 view .LVU152
 219:fltk-1.3.4-1/jpeg/jidctfst.c ****     }
 332              		.loc 1 219 7 view .LVU153
 333 01d4 E979FFFF 		jmp	.L3
 333      FF
 334              	.LVL38:
 335 01d9 0F1F8000 		.p2align 4,,10
 335      000000
 336              		.p2align 3
 337              	.L13:
 219:fltk-1.3.4-1/jpeg/jidctfst.c ****     }
 338              		.loc 1 219 7 is_stmt 0 view .LVU154
 339 01e0 488D8424 		leaq	288(%rsp), %rax
 339      20010000 
 340 01e8 4C8B6C24 		movq	8(%rsp), %r13
 340      08
 341 01ed 448B7C24 		movl	20(%rsp), %r15d
 341      14
 342 01f2 48894424 		movq	%rax, 8(%rsp)
 342      08
 343              	.LVL39:
 219:fltk-1.3.4-1/jpeg/jidctfst.c ****     }
 344              		.loc 1 219 7 view .LVU155
 345              	.LBE2:
 275:fltk-1.3.4-1/jpeg/jidctfst.c ****   }
 276:fltk-1.3.4-1/jpeg/jidctfst.c ****   
 277:fltk-1.3.4-1/jpeg/jidctfst.c ****   /* Pass 2: process rows from work array, store into output array. */
 278:fltk-1.3.4-1/jpeg/jidctfst.c ****   /* Note that we must descale the results by a factor of 8 == 2**3, */
 279:fltk-1.3.4-1/jpeg/jidctfst.c ****   /* and also undo the PASS1_BITS scaling. */
 280:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 281:fltk-1.3.4-1/jpeg/jidctfst.c ****   wsptr = workspace;
 346              		.loc 1 281 9 view .LVU156
 347 01f7 4C8B4C24 		movq	24(%rsp), %r9
 347      18
 348              	.LVL40:
 349              		.loc 1 281 9 view .LVU157
 350 01fc E9440100 		jmp	.L7
 350      00
 351              	.LVL41:
 352              		.p2align 4,,10
 353 0201 0F1F8000 		.p2align 3
 353      000000
 354              	.L5:
 282:fltk-1.3.4-1/jpeg/jidctfst.c ****   for (ctr = 0; ctr < DCTSIZE; ctr++) {
 283:fltk-1.3.4-1/jpeg/jidctfst.c ****     outptr = output_buf[ctr] + output_col;
 284:fltk-1.3.4-1/jpeg/jidctfst.c ****     /* Rows of zeroes can be exploited in the same way as we did with columns.
 285:fltk-1.3.4-1/jpeg/jidctfst.c ****      * However, the column calculation has created many nonzero AC terms, so
 286:fltk-1.3.4-1/jpeg/jidctfst.c ****      * the simplification applies less often (typically 5% to 10% of the time).
 287:fltk-1.3.4-1/jpeg/jidctfst.c ****      * On machines with very fast multiplication, it's possible that the
 288:fltk-1.3.4-1/jpeg/jidctfst.c ****      * test takes more time than it's worth.  In that case this section
 289:fltk-1.3.4-1/jpeg/jidctfst.c ****      * may be commented out.
 290:fltk-1.3.4-1/jpeg/jidctfst.c ****      */
 291:fltk-1.3.4-1/jpeg/jidctfst.c ****     
 292:fltk-1.3.4-1/jpeg/jidctfst.c **** #ifndef NO_ZERO_ROW_TEST
 293:fltk-1.3.4-1/jpeg/jidctfst.c ****     if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 294:fltk-1.3.4-1/jpeg/jidctfst.c **** 	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 295:fltk-1.3.4-1/jpeg/jidctfst.c ****       /* AC terms all zero */
 296:fltk-1.3.4-1/jpeg/jidctfst.c ****       JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 297:fltk-1.3.4-1/jpeg/jidctfst.c **** 				  & RANGE_MASK];
 298:fltk-1.3.4-1/jpeg/jidctfst.c ****       
 299:fltk-1.3.4-1/jpeg/jidctfst.c ****       outptr[0] = dcval;
 300:fltk-1.3.4-1/jpeg/jidctfst.c ****       outptr[1] = dcval;
 301:fltk-1.3.4-1/jpeg/jidctfst.c ****       outptr[2] = dcval;
 302:fltk-1.3.4-1/jpeg/jidctfst.c ****       outptr[3] = dcval;
 303:fltk-1.3.4-1/jpeg/jidctfst.c ****       outptr[4] = dcval;
 304:fltk-1.3.4-1/jpeg/jidctfst.c ****       outptr[5] = dcval;
 305:fltk-1.3.4-1/jpeg/jidctfst.c ****       outptr[6] = dcval;
 306:fltk-1.3.4-1/jpeg/jidctfst.c ****       outptr[7] = dcval;
 307:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 308:fltk-1.3.4-1/jpeg/jidctfst.c ****       wsptr += DCTSIZE;		/* advance pointer to next row */
 309:fltk-1.3.4-1/jpeg/jidctfst.c ****       continue;
 310:fltk-1.3.4-1/jpeg/jidctfst.c ****     }
 311:fltk-1.3.4-1/jpeg/jidctfst.c **** #endif
 312:fltk-1.3.4-1/jpeg/jidctfst.c ****     
 313:fltk-1.3.4-1/jpeg/jidctfst.c ****     /* Even part */
 314:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 315:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
 355              		.loc 1 315 5 is_stmt 1 view .LVU158
 356              		.loc 1 315 11 is_stmt 0 view .LVU159
 357 0208 418D3C0A 		leal	(%r10,%rcx), %edi
 358              	.LVL42:
 316:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
 359              		.loc 1 316 5 is_stmt 1 view .LVU160
 360              		.loc 1 316 11 is_stmt 0 view .LVU161
 361 020c 4429D1   		subl	%r10d, %ecx
 362              	.LVL43:
 317:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 318:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
 363              		.loc 1 318 5 is_stmt 1 view .LVU162
 364              		.loc 1 318 11 is_stmt 0 view .LVU163
 365 020f 478D141C 		leal	(%r12,%r11), %r10d
 366              	.LVL44:
 319:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 367              		.loc 1 319 5 is_stmt 1 view .LVU164
 368              		.loc 1 319 13 is_stmt 0 view .LVU165
 369 0213 4529DC   		subl	%r11d, %r12d
 320:fltk-1.3.4-1/jpeg/jidctfst.c **** 	    - tmp13;
 321:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 322:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp0 = tmp10 + tmp13;
 323:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp3 = tmp10 - tmp13;
 324:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp1 = tmp11 + tmp12;
 325:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp2 = tmp11 - tmp12;
 326:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 327:fltk-1.3.4-1/jpeg/jidctfst.c ****     /* Odd part */
 328:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 329:fltk-1.3.4-1/jpeg/jidctfst.c ****     z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 370              		.loc 1 329 9 view .LVU166
 371 0216 448D3406 		leal	(%rsi,%rax), %r14d
 319:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 372              		.loc 1 319 13 view .LVU167
 373 021a 4D63E4   		movslq	%r12d, %r12
 322:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp3 = tmp10 - tmp13;
 374              		.loc 1 322 10 view .LVU168
 375 021d 468D1C17 		leal	(%rdi,%r10), %r11d
 330:fltk-1.3.4-1/jpeg/jidctfst.c ****     z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
 376              		.loc 1 330 9 view .LVU169
 377 0221 29F0     		subl	%esi, %eax
 319:fltk-1.3.4-1/jpeg/jidctfst.c **** 	    - tmp13;
 378              		.loc 1 319 13 view .LVU170
 379 0223 4D69E46A 		imulq	$362, %r12, %r12
 379      010000
 331:fltk-1.3.4-1/jpeg/jidctfst.c ****     z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
 380              		.loc 1 331 9 view .LVU171
 381 022a 8D341A   		leal	(%rdx,%rbx), %esi
 332:fltk-1.3.4-1/jpeg/jidctfst.c ****     z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
 382              		.loc 1 332 9 view .LVU172
 383 022d 29DA     		subl	%ebx, %edx
 323:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp1 = tmp11 + tmp12;
 384              		.loc 1 323 10 view .LVU173
 385 022f 4429D7   		subl	%r10d, %edi
 386              	.LVL45:
 333:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 334:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp7 = z11 + z13;		/* phase 5 */
 335:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 336:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 337:fltk-1.3.4-1/jpeg/jidctfst.c ****     z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 387              		.loc 1 337 10 view .LVU174
 388 0232 8D1C10   		leal	(%rax,%rdx), %ebx
 338:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 339:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 389              		.loc 1 339 13 view .LVU175
 390 0235 4898     		cltq
 338:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 391              		.loc 1 338 13 view .LVU176
 392 0237 4863D2   		movslq	%edx, %rdx
 337:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 393              		.loc 1 337 10 view .LVU177
 394 023a 4863DB   		movslq	%ebx, %rbx
 395              		.loc 1 339 13 view .LVU178
 396 023d 4869C063 		imulq	$-669, %rax, %rax
 396      FDFFFF
 337:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 397              		.loc 1 337 10 view .LVU179
 398 0244 4869DBD9 		imulq	$473, %rbx, %rbx
 398      010000
 319:fltk-1.3.4-1/jpeg/jidctfst.c **** 	    - tmp13;
 399              		.loc 1 319 13 view .LVU180
 400 024b 49C1FC08 		sarq	$8, %r12
 338:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 401              		.loc 1 338 13 view .LVU181
 402 024f 4869D215 		imulq	$277, %rdx, %rdx
 402      010000
 319:fltk-1.3.4-1/jpeg/jidctfst.c **** 	    - tmp13;
 403              		.loc 1 319 11 view .LVU182
 404 0256 4529D4   		subl	%r10d, %r12d
 405              	.LVL46:
 322:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp3 = tmp10 - tmp13;
 406              		.loc 1 322 5 is_stmt 1 view .LVU183
 323:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp1 = tmp11 + tmp12;
 407              		.loc 1 323 5 view .LVU184
 324:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp2 = tmp11 - tmp12;
 408              		.loc 1 324 5 view .LVU185
 324:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp2 = tmp11 - tmp12;
 409              		.loc 1 324 10 is_stmt 0 view .LVU186
 410 0259 468D1421 		leal	(%rcx,%r12), %r10d
 411              	.LVL47:
 325:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 412              		.loc 1 325 5 is_stmt 1 view .LVU187
 413              		.loc 1 339 13 is_stmt 0 view .LVU188
 414 025d 48C1F808 		sarq	$8, %rax
 325:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 415              		.loc 1 325 10 view .LVU189
 416 0261 4429E1   		subl	%r12d, %ecx
 417              	.LVL48:
 329:fltk-1.3.4-1/jpeg/jidctfst.c ****     z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
 418              		.loc 1 329 5 is_stmt 1 view .LVU190
 330:fltk-1.3.4-1/jpeg/jidctfst.c ****     z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
 419              		.loc 1 330 5 view .LVU191
 331:fltk-1.3.4-1/jpeg/jidctfst.c ****     z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
 420              		.loc 1 331 5 view .LVU192
 332:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 421              		.loc 1 332 5 view .LVU193
 334:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 422              		.loc 1 334 5 view .LVU194
 337:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 423              		.loc 1 337 10 is_stmt 0 view .LVU195
 424 0264 48C1FB08 		sarq	$8, %rbx
 334:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 425              		.loc 1 334 10 view .LVU196
 426 0268 458D2436 		leal	(%r14,%rsi), %r12d
 427              	.LVL49:
 335:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 428              		.loc 1 335 5 is_stmt 1 view .LVU197
 337:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 429              		.loc 1 337 5 view .LVU198
 338:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 430              		.loc 1 338 5 view .LVU199
 431              		.loc 1 339 5 view .LVU200
 340:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 341:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp6 = tmp12 - tmp7;	/* phase 2 */
 432              		.loc 1 341 5 view .LVU201
 335:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 433              		.loc 1 335 13 is_stmt 0 view .LVU202
 434 026c 4429F6   		subl	%r14d, %esi
 435              	.LVL50:
 338:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 436              		.loc 1 338 13 view .LVU203
 437 026f 48C1FA08 		sarq	$8, %rdx
 339:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 438              		.loc 1 339 11 view .LVU204
 439 0273 01D8     		addl	%ebx, %eax
 335:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 440              		.loc 1 335 13 view .LVU205
 441 0275 4863F6   		movslq	%esi, %rsi
 338:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 442              		.loc 1 338 11 view .LVU206
 443 0278 29DA     		subl	%ebx, %edx
 335:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 444              		.loc 1 335 13 view .LVU207
 445 027a 4869F66A 		imulq	$362, %rsi, %rsi
 445      010000
 446              	.LVL51:
 342:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp5 = tmp11 - tmp6;
 343:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp4 = tmp10 + tmp5;
 344:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 345:fltk-1.3.4-1/jpeg/jidctfst.c ****     /* Final output stage: scale down by a factor of 8 and range-limit */
 346:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 347:fltk-1.3.4-1/jpeg/jidctfst.c ****     outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 447              		.loc 1 347 29 view .LVU208
 448 0281 438D1C23 		leal	(%r11,%r12), %ebx
 449              	.LVL52:
 348:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 349:fltk-1.3.4-1/jpeg/jidctfst.c ****     outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 450              		.loc 1 349 29 view .LVU209
 451 0285 4529E3   		subl	%r12d, %r11d
 452              	.LVL53:
 347:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 453              		.loc 1 347 29 view .LVU210
 454 0288 C1FB05   		sarl	$5, %ebx
 455              		.loc 1 349 29 view .LVU211
 456 028b 41C1FB05 		sarl	$5, %r11d
 341:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp5 = tmp11 - tmp6;
 457              		.loc 1 341 10 view .LVU212
 458 028f 4429E0   		subl	%r12d, %eax
 459              	.LVL54:
 342:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp4 = tmp10 + tmp5;
 460              		.loc 1 342 5 is_stmt 1 view .LVU213
 348:fltk-1.3.4-1/jpeg/jidctfst.c ****     outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 461              		.loc 1 348 8 is_stmt 0 view .LVU214
 462 0292 81E3FF03 		andl	$1023, %ebx
 462      0000
 350:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 463              		.loc 1 350 8 view .LVU215
 464 0298 4181E3FF 		andl	$1023, %r11d
 464      030000
 347:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 465              		.loc 1 347 28 view .LVU216
 466 029f 0FB65C1D 		movzbl	0(%rbp,%rbx), %ebx
 466      00
 335:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 467              		.loc 1 335 13 view .LVU217
 468 02a4 48C1FE08 		sarq	$8, %rsi
 342:fltk-1.3.4-1/jpeg/jidctfst.c ****     tmp4 = tmp10 + tmp5;
 469              		.loc 1 342 10 view .LVU218
 470 02a8 29C6     		subl	%eax, %esi
 471              	.LVL55:
 343:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 472              		.loc 1 343 5 is_stmt 1 view .LVU219
 347:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 473              		.loc 1 347 15 is_stmt 0 view .LVU220
 474 02aa 418818   		movb	%bl, (%r8)
 349:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 475              		.loc 1 349 28 view .LVU221
 476 02ad 460FB65C 		movzbl	0(%rbp,%r11), %r11d
 476      1D00
 343:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 477              		.loc 1 343 10 view .LVU222
 478 02b3 01F2     		addl	%esi, %edx
 479              	.LVL56:
 347:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 480              		.loc 1 347 5 is_stmt 1 view .LVU223
 349:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 481              		.loc 1 349 5 view .LVU224
 349:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 482              		.loc 1 349 15 is_stmt 0 view .LVU225
 483 02b5 45885807 		movb	%r11b, 7(%r8)
 351:fltk-1.3.4-1/jpeg/jidctfst.c ****     outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 484              		.loc 1 351 5 is_stmt 1 view .LVU226
 485              		.loc 1 351 29 is_stmt 0 view .LVU227
 486 02b9 458D1C02 		leal	(%r10,%rax), %r11d
 352:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 353:fltk-1.3.4-1/jpeg/jidctfst.c ****     outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 487              		.loc 1 353 29 view .LVU228
 488 02bd 4129C2   		subl	%eax, %r10d
 489              	.LVL57:
 351:fltk-1.3.4-1/jpeg/jidctfst.c ****     outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 490              		.loc 1 351 29 view .LVU229
 491 02c0 41C1FB05 		sarl	$5, %r11d
 492              		.loc 1 353 29 view .LVU230
 493 02c4 41C1FA05 		sarl	$5, %r10d
 352:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 494              		.loc 1 352 8 view .LVU231
 495 02c8 4181E3FF 		andl	$1023, %r11d
 495      030000
 354:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 496              		.loc 1 354 8 view .LVU232
 497 02cf 4181E2FF 		andl	$1023, %r10d
 497      030000
 351:fltk-1.3.4-1/jpeg/jidctfst.c ****     outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 498              		.loc 1 351 28 view .LVU233
 499 02d6 460FB65C 		movzbl	0(%rbp,%r11), %r11d
 499      1D00
 351:fltk-1.3.4-1/jpeg/jidctfst.c ****     outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 500              		.loc 1 351 15 view .LVU234
 501 02dc 45885801 		movb	%r11b, 1(%r8)
 353:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 502              		.loc 1 353 5 is_stmt 1 view .LVU235
 353:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 503              		.loc 1 353 28 is_stmt 0 view .LVU236
 504 02e0 420FB644 		movzbl	0(%rbp,%r10), %eax
 504      1500
 505              	.LVL58:
 353:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 506              		.loc 1 353 15 view .LVU237
 507 02e6 41884006 		movb	%al, 6(%r8)
 355:fltk-1.3.4-1/jpeg/jidctfst.c ****     outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 508              		.loc 1 355 5 is_stmt 1 view .LVU238
 509              		.loc 1 355 29 is_stmt 0 view .LVU239
 510 02ea 8D0431   		leal	(%rcx,%rsi), %eax
 356:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 357:fltk-1.3.4-1/jpeg/jidctfst.c ****     outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 511              		.loc 1 357 29 view .LVU240
 512 02ed 29F1     		subl	%esi, %ecx
 513              	.LVL59:
 355:fltk-1.3.4-1/jpeg/jidctfst.c ****     outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 514              		.loc 1 355 29 view .LVU241
 515 02ef C1F805   		sarl	$5, %eax
 516              		.loc 1 357 29 view .LVU242
 517 02f2 C1F905   		sarl	$5, %ecx
 356:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 518              		.loc 1 356 8 view .LVU243
 519 02f5 25FF0300 		andl	$1023, %eax
 519      00
 358:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 520              		.loc 1 358 8 view .LVU244
 521 02fa 81E1FF03 		andl	$1023, %ecx
 521      0000
 355:fltk-1.3.4-1/jpeg/jidctfst.c ****     outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 522              		.loc 1 355 28 view .LVU245
 523 0300 0FB64405 		movzbl	0(%rbp,%rax), %eax
 523      00
 355:fltk-1.3.4-1/jpeg/jidctfst.c ****     outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 524              		.loc 1 355 15 view .LVU246
 525 0305 41884002 		movb	%al, 2(%r8)
 357:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 526              		.loc 1 357 5 is_stmt 1 view .LVU247
 357:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 527              		.loc 1 357 28 is_stmt 0 view .LVU248
 528 0309 0FB6440D 		movzbl	0(%rbp,%rcx), %eax
 528      00
 357:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 529              		.loc 1 357 15 view .LVU249
 530 030e 41884005 		movb	%al, 5(%r8)
 359:fltk-1.3.4-1/jpeg/jidctfst.c ****     outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 531              		.loc 1 359 5 is_stmt 1 view .LVU250
 532              		.loc 1 359 29 is_stmt 0 view .LVU251
 533 0312 8D0417   		leal	(%rdi,%rdx), %eax
 360:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 361:fltk-1.3.4-1/jpeg/jidctfst.c ****     outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 534              		.loc 1 361 29 view .LVU252
 535 0315 29D7     		subl	%edx, %edi
 536              	.LVL60:
 359:fltk-1.3.4-1/jpeg/jidctfst.c ****     outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 537              		.loc 1 359 29 view .LVU253
 538 0317 C1F805   		sarl	$5, %eax
 539              		.loc 1 361 29 view .LVU254
 540 031a C1FF05   		sarl	$5, %edi
 360:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 541              		.loc 1 360 8 view .LVU255
 542 031d 25FF0300 		andl	$1023, %eax
 542      00
 362:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 543              		.loc 1 362 8 view .LVU256
 544 0322 81E7FF03 		andl	$1023, %edi
 544      0000
 359:fltk-1.3.4-1/jpeg/jidctfst.c ****     outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 545              		.loc 1 359 28 view .LVU257
 546 0328 0FB64405 		movzbl	0(%rbp,%rax), %eax
 546      00
 359:fltk-1.3.4-1/jpeg/jidctfst.c ****     outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 547              		.loc 1 359 15 view .LVU258
 548 032d 41884004 		movb	%al, 4(%r8)
 361:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 549              		.loc 1 361 5 is_stmt 1 view .LVU259
 361:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 550              		.loc 1 361 28 is_stmt 0 view .LVU260
 551 0331 0FB6443D 		movzbl	0(%rbp,%rdi), %eax
 551      00
 361:fltk-1.3.4-1/jpeg/jidctfst.c **** 			    & RANGE_MASK];
 552              		.loc 1 361 15 view .LVU261
 553 0336 41884003 		movb	%al, 3(%r8)
 363:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 364:fltk-1.3.4-1/jpeg/jidctfst.c ****     wsptr += DCTSIZE;		/* advance pointer to next row */
 554              		.loc 1 364 5 is_stmt 1 view .LVU262
 555              	.LVL61:
 556              	.L6:
 282:fltk-1.3.4-1/jpeg/jidctfst.c ****     outptr = output_buf[ctr] + output_col;
 557              		.loc 1 282 32 discriminator 2 view .LVU263
 282:fltk-1.3.4-1/jpeg/jidctfst.c ****     outptr = output_buf[ctr] + output_col;
 558              		.loc 1 282 17 discriminator 2 view .LVU264
 559 033a 4983C508 		addq	$8, %r13
 282:fltk-1.3.4-1/jpeg/jidctfst.c ****     outptr = output_buf[ctr] + output_col;
 560              		.loc 1 282 3 is_stmt 0 discriminator 2 view .LVU265
 561 033e 4C3B4C24 		cmpq	8(%rsp), %r9
 561      08
 562 0343 747B     		je	.L14
 563              	.LVL62:
 564              	.L7:
 283:fltk-1.3.4-1/jpeg/jidctfst.c ****     /* Rows of zeroes can be exploited in the same way as we did with columns.
 565              		.loc 1 283 5 is_stmt 1 view .LVU266
 293:fltk-1.3.4-1/jpeg/jidctfst.c **** 	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 566              		.loc 1 293 14 is_stmt 0 view .LVU267
 567 0345 418B5104 		movl	4(%r9), %edx
 568 0349 458B6108 		movl	8(%r9), %r12d
 569 034d 4983C120 		addq	$32, %r9
 570              	.LVL63:
 293:fltk-1.3.4-1/jpeg/jidctfst.c **** 	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 571              		.loc 1 293 14 view .LVU268
 572 0351 418B71EC 		movl	-20(%r9), %esi
 573 0355 458B51F0 		movl	-16(%r9), %r10d
 294:fltk-1.3.4-1/jpeg/jidctfst.c ****       /* AC terms all zero */
 574              		.loc 1 294 33 view .LVU269
 575 0359 89D7     		movl	%edx, %edi
 576 035b 418B41F4 		movl	-12(%r9), %eax
 577 035f 458B59F8 		movl	-8(%r9), %r11d
 578 0363 4409E7   		orl	%r12d, %edi
 579 0366 418B59FC 		movl	-4(%r9), %ebx
 283:fltk-1.3.4-1/jpeg/jidctfst.c ****     /* Rows of zeroes can be exploited in the same way as we did with columns.
 580              		.loc 1 283 12 view .LVU270
 581 036a 4D8B4500 		movq	0(%r13), %r8
 294:fltk-1.3.4-1/jpeg/jidctfst.c ****       /* AC terms all zero */
 582              		.loc 1 294 33 view .LVU271
 583 036e 09F7     		orl	%esi, %edi
 584 0370 418B49E0 		movl	-32(%r9), %ecx
 585 0374 4409D7   		orl	%r10d, %edi
 283:fltk-1.3.4-1/jpeg/jidctfst.c ****     /* Rows of zeroes can be exploited in the same way as we did with columns.
 586              		.loc 1 283 12 view .LVU272
 587 0377 4D01F8   		addq	%r15, %r8
 588              	.LVL64:
 293:fltk-1.3.4-1/jpeg/jidctfst.c **** 	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 589              		.loc 1 293 5 is_stmt 1 view .LVU273
 294:fltk-1.3.4-1/jpeg/jidctfst.c ****       /* AC terms all zero */
 590              		.loc 1 294 33 is_stmt 0 view .LVU274
 591 037a 09C7     		orl	%eax, %edi
 592 037c 4409DF   		orl	%r11d, %edi
 593 037f 09DF     		orl	%ebx, %edi
 594 0381 0F8581FE 		jne	.L5
 594      FFFF
 595              	.LBB3:
 296:fltk-1.3.4-1/jpeg/jidctfst.c **** 				  & RANGE_MASK];
 596              		.loc 1 296 7 is_stmt 1 view .LVU275
 296:fltk-1.3.4-1/jpeg/jidctfst.c **** 				  & RANGE_MASK];
 597              		.loc 1 296 35 is_stmt 0 view .LVU276
 598 0387 C1F905   		sarl	$5, %ecx
 297:fltk-1.3.4-1/jpeg/jidctfst.c ****       
 599              		.loc 1 297 7 view .LVU277
 600 038a 81E1FF03 		andl	$1023, %ecx
 600      0000
 296:fltk-1.3.4-1/jpeg/jidctfst.c **** 				  & RANGE_MASK];
 601              		.loc 1 296 15 view .LVU278
 602 0390 0FB6440D 		movzbl	0(%rbp,%rcx), %eax
 602      00
 603              	.LVL65:
 299:fltk-1.3.4-1/jpeg/jidctfst.c ****       outptr[1] = dcval;
 604              		.loc 1 299 7 is_stmt 1 view .LVU279
 299:fltk-1.3.4-1/jpeg/jidctfst.c ****       outptr[1] = dcval;
 605              		.loc 1 299 17 is_stmt 0 view .LVU280
 606 0395 418800   		movb	%al, (%r8)
 300:fltk-1.3.4-1/jpeg/jidctfst.c ****       outptr[2] = dcval;
 607              		.loc 1 300 7 is_stmt 1 view .LVU281
 300:fltk-1.3.4-1/jpeg/jidctfst.c ****       outptr[2] = dcval;
 608              		.loc 1 300 17 is_stmt 0 view .LVU282
 609 0398 41884001 		movb	%al, 1(%r8)
 301:fltk-1.3.4-1/jpeg/jidctfst.c ****       outptr[3] = dcval;
 610              		.loc 1 301 7 is_stmt 1 view .LVU283
 301:fltk-1.3.4-1/jpeg/jidctfst.c ****       outptr[3] = dcval;
 611              		.loc 1 301 17 is_stmt 0 view .LVU284
 612 039c 41884002 		movb	%al, 2(%r8)
 302:fltk-1.3.4-1/jpeg/jidctfst.c ****       outptr[4] = dcval;
 613              		.loc 1 302 7 is_stmt 1 view .LVU285
 302:fltk-1.3.4-1/jpeg/jidctfst.c ****       outptr[4] = dcval;
 614              		.loc 1 302 17 is_stmt 0 view .LVU286
 615 03a0 41884003 		movb	%al, 3(%r8)
 303:fltk-1.3.4-1/jpeg/jidctfst.c ****       outptr[5] = dcval;
 616              		.loc 1 303 7 is_stmt 1 view .LVU287
 303:fltk-1.3.4-1/jpeg/jidctfst.c ****       outptr[5] = dcval;
 617              		.loc 1 303 17 is_stmt 0 view .LVU288
 618 03a4 41884004 		movb	%al, 4(%r8)
 304:fltk-1.3.4-1/jpeg/jidctfst.c ****       outptr[6] = dcval;
 619              		.loc 1 304 7 is_stmt 1 view .LVU289
 304:fltk-1.3.4-1/jpeg/jidctfst.c ****       outptr[6] = dcval;
 620              		.loc 1 304 17 is_stmt 0 view .LVU290
 621 03a8 41884005 		movb	%al, 5(%r8)
 305:fltk-1.3.4-1/jpeg/jidctfst.c ****       outptr[7] = dcval;
 622              		.loc 1 305 7 is_stmt 1 view .LVU291
 305:fltk-1.3.4-1/jpeg/jidctfst.c ****       outptr[7] = dcval;
 623              		.loc 1 305 17 is_stmt 0 view .LVU292
 624 03ac 41884006 		movb	%al, 6(%r8)
 306:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 625              		.loc 1 306 7 is_stmt 1 view .LVU293
 306:fltk-1.3.4-1/jpeg/jidctfst.c **** 
 626              		.loc 1 306 17 is_stmt 0 view .LVU294
 627 03b0 41884007 		movb	%al, 7(%r8)
 308:fltk-1.3.4-1/jpeg/jidctfst.c ****       continue;
 628              		.loc 1 308 7 is_stmt 1 view .LVU295
 629              	.LVL66:
 309:fltk-1.3.4-1/jpeg/jidctfst.c ****     }
 630              		.loc 1 309 7 view .LVU296
 631 03b4 EB84     		jmp	.L6
 632              	.LVL67:
 633 03b6 662E0F1F 		.p2align 4,,10
 633      84000000 
 633      0000
 634              		.p2align 3
 635              	.L14:
 309:fltk-1.3.4-1/jpeg/jidctfst.c ****     }
 636              		.loc 1 309 7 is_stmt 0 view .LVU297
 637              	.LBE3:
 365:fltk-1.3.4-1/jpeg/jidctfst.c ****   }
 366:fltk-1.3.4-1/jpeg/jidctfst.c **** }
 638              		.loc 1 366 1 view .LVU298
 639 03c0 488B8424 		movq	296(%rsp), %rax
 639      28010000 
 640 03c8 64483304 		xorq	%fs:40, %rax
 640      25280000 
 640      00
 641 03d1 7512     		jne	.L15
 642 03d3 4881C438 		addq	$312, %rsp
 642      010000
 643              		.cfi_remember_state
 644              		.cfi_def_cfa_offset 56
 645 03da 5B       		popq	%rbx
 646              		.cfi_def_cfa_offset 48
 647 03db 5D       		popq	%rbp
 648              		.cfi_def_cfa_offset 40
 649              	.LVL68:
 650              		.loc 1 366 1 view .LVU299
 651 03dc 415C     		popq	%r12
 652              		.cfi_def_cfa_offset 32
 653 03de 415D     		popq	%r13
 654              		.cfi_def_cfa_offset 24
 655 03e0 415E     		popq	%r14
 656              		.cfi_def_cfa_offset 16
 657 03e2 415F     		popq	%r15
 658              		.cfi_def_cfa_offset 8
 659 03e4 C3       		ret
 660              	.LVL69:
 661              	.L15:
 662              		.cfi_restore_state
 663              		.loc 1 366 1 view .LVU300
 664 03e5 E8000000 		call	__stack_chk_fail@PLT
 664      00
 665              	.LVL70:
 666              		.loc 1 366 1 view .LVU301
 667              		.cfi_endproc
 668              	.LFE51:
 670              		.text
 671              	.Letext0:
 672              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 673              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 674              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 675              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 676              		.file 6 "/usr/include/stdio.h"
 677              		.file 7 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 678              		.file 8 "fltk-1.3.4-1/jpeg/jmorecfg.h"
 679              		.file 9 "fltk-1.3.4-1/jpeg/jpeglib.h"
 680              		.file 10 "fltk-1.3.4-1/jpeg/jpegint.h"
 681              		.file 11 "fltk-1.3.4-1/jpeg/jdct.h"
 13327              		.section	.note.gnu.property,"a"
 13328              		.align 8
 13329 0000 04000000 		.long	 1f - 0f
 13330 0004 10000000 		.long	 4f - 1f
 13331 0008 05000000 		.long	 5
 13332              	0:
 13333 000c 474E5500 		.string	 "GNU"
 13334              	1:
 13335              		.align 8
 13336 0010 020000C0 		.long	 0xc0000002
 13337 0014 04000000 		.long	 3f - 2f
 13338              	2:
 13339 0018 03000000 		.long	 0x3
 13340              	3:
 13341 001c 00000000 		.align 8
 13342              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 jidctfst.c
     /tmp/ccE32wZo.s:8      .text.jpeg_idct_ifast:0000000000000000 jpeg_idct_ifast
                           .group:0000000000000000 wm4.0.a6b23a418548ac0bda5d8549c4a2ec91
                           .group:0000000000000000 wm4.stdcpredef.h.19.8dc41bed5d9037ff9622e015fb5f0ce3
                           .group:0000000000000000 wm4.jconfig.h.10.247fc3ff67998f3074970b1373c70333
                           .group:0000000000000000 wm4.features.h.19.5b5f5a19624a0527f479fdc52d54808f
                           .group:0000000000000000 wm4.cdefs.h.19.98d80eddbb3f64f4f30cd9aee9c5593c
                           .group:0000000000000000 wm4.wordsize.h.4.baf119258a1e53d8dba67ceac44ab6bc
                           .group:0000000000000000 wm4.cdefs.h.475.fb75d2e4416aa349344e6f45f683bf28
                           .group:0000000000000000 wm4.stubs64.h.10.6ce4c34010988db072c080326a6b6319
                           .group:0000000000000000 wm4.libcheaderstart.h.37.d9274df4cc0172452960ad9644fa5579
                           .group:0000000000000000 wm4.stdlib.h.28.2cffa49d94c5d85f4538f55f7b59771d
                           .group:0000000000000000 wm4.stddef.h.181.13772e73e5434e8cc4fafaaddad2b5da
                           .group:0000000000000000 wm4.waitflags.h.25.41934de4af99038521c2782f418699b1
                           .group:0000000000000000 wm4.waitstatus.h.28.93f167f49d64e2b9b99f98d1162a93bf
                           .group:0000000000000000 wm4.stdlib.h.43.9fa4f727a2f1cb8d2450a574c9195553
                           .group:0000000000000000 wm4.floatn.h.20.80c7cf8a8dfad237004b28d051d5afda
                           .group:0000000000000000 wm4.floatncommon.h.34.7e1840d7dfb19e9bdb51aeb077d76637
                           .group:0000000000000000 wm4.stdlib.h.71.2927e068ec678159b4f68ec2f089f7e6
                           .group:0000000000000000 wm4.types.h.109.56eb9ae966b255288cc544f18746a7ff
                           .group:0000000000000000 wm4.typesizes.h.24.2c64f817c0dc4b6fb2a2c619d717be26
                           .group:0000000000000000 wm4.time64.h.24.a8166ae916ec910dab0d8987098d42ee
                           .group:0000000000000000 wm4.types.h.40.18f72bab8242c2bb4c532a2aa95b5f00
                           .group:0000000000000000 wm4.stddef.h.231.0adce5c8c1fd8096aaff50981b3d1f0f
                           .group:0000000000000000 wm4.endian.h.20.efabd1018df5d7b4052c27dc6bdd5ce5
                           .group:0000000000000000 wm4.endianness.h.2.2c6a211f7909f3af5e9e9cfa3b6b63c8
                           .group:0000000000000000 wm4.endian.h.40.9e5d395adda2f4eb53ae69b69b664084
                           .group:0000000000000000 wm4.endian.h.27.4c4f94262c4eaee2982fe00ed1b4f173
                           .group:0000000000000000 wm4.byteswap.h.24.5363c019348146aada5aeadf51456576
                           .group:0000000000000000 wm4.endian.h.39.30a606dbd99b6c3df61c1f06dbdabd4e
                           .group:0000000000000000 wm4.select.h.28.eb2f3debdbcffd1442ebddaebc4fb6ff
                           .group:0000000000000000 wm4.__sigset_t.h.2.6b1ab6ff3d7b8fd9c0c42b0d80afbd80
                           .group:0000000000000000 wm4.select.h.44.887a4ff60aa97fcd9c1be017735e1675
                           .group:0000000000000000 wm4.select2.h.27.f95f2ab0ffee66dc1b6575014894b21a
                           .group:0000000000000000 wm4.types.h.186.489a4ed8f2d29cd358843490f54ddea5
                           .group:0000000000000000 wm4.pthreadtypesarch.h.25.6063cba99664c916e22d3a912bcc348a
                           .group:0000000000000000 wm4.struct_mutex.h.20.ed51f515172b9be99e450ba83eb5dd99
                           .group:0000000000000000 wm4.struct_rwlock.h.21.0254880f2904e3833fb8ae683e0f0330
                           .group:0000000000000000 wm4.alloca.h.19.edefa922a76c1cbaaf1e416903ba2d1c
                           .group:0000000000000000 wm4.alloca.h.29.156e12058824cc23d961c4d3b13031f6
                           .group:0000000000000000 wm4.stdio.h.24.5c1b97eef3c86b7a2549420f69f4f128
                           .group:0000000000000000 wm4.libcheaderstart.h.31.87b3c285aeba93fe355ad19123070832
                           .group:0000000000000000 wm4.stdio.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.stddef.h.231.8136eebbab3406dbf57a7ec475dd5d83
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.struct_FILE.h.19.0888ac70396abe1031c03d393554032f
                           .group:0000000000000000 wm4.stdio.h.53.139e45cf040c0964b2932c0c1bdaf6b2
                           .group:0000000000000000 wm4.stdio_lim.h.19.e4b00b560d878dcfbc6635b3406640c5
                           .group:0000000000000000 wm4.stdio.h.141.d7a290e19ca077c9e4aa7c43ede17a73
                           .group:0000000000000000 wm4.stdio.h.20.b0caa08e5723aa5941367be0e5d2ec59
                           .group:0000000000000000 wm4.stdio2.h.20.f45a0373b68e1296c4aa8cc09d66a9df
                           .group:0000000000000000 wm4.string.h.23.93403f89af7dba8212345449bb14b09d
                           .group:0000000000000000 wm4.string.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.strings.h.19.a259f126920b1bb5ef76bc62b3984a3c
                           .group:0000000000000000 wm4.jinclude.h.67.b19f941ec97c4845fa4609292c7e2db4
                           .group:0000000000000000 wm4.jmorecfg.h.33.3b4c5f9cc07b3737823b06caf24d5b05
                           .group:0000000000000000 wm4.jpeglib.h.40.4f111c27252a38df39328d65454e82f4
                           .group:0000000000000000 wm4.jpegint.h.26.5219ef5d4e4921371d38e77b6091fd20
                           .group:0000000000000000 wm4.jerror.h.25.1dbd8674e70ab5215bc0037320e5c2a2
                           .group:0000000000000000 wm4.jdct.h.68.77a1fce97df2af4ec80ad9c80171cb02

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
__stack_chk_fail
