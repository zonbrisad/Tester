   1              		.file	"jmemmgr.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.do_barray_io,"ax",@progbits
   5              		.p2align 4
   7              	do_barray_io:
   8              	.LVL0:
   9              	.LFB60:
  10              		.file 1 "fltk-1.3.4-1/jpeg/jmemmgr.c"
   1:fltk-1.3.4-1/jpeg/jmemmgr.c **** /*
   2:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * jmemmgr.c
   3:fltk-1.3.4-1/jpeg/jmemmgr.c ****  *
   4:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * Copyright (C) 1991-1997, Thomas G. Lane.
   5:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * Modified 2011-2012 by Guido Vollbeding.
   6:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * This file is part of the Independent JPEG Group's software.
   7:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * For conditions of distribution and use, see the accompanying README file.
   8:fltk-1.3.4-1/jpeg/jmemmgr.c ****  *
   9:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * This file contains the JPEG system-independent memory management
  10:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * routines.  This code is usable across a wide variety of machines; most
  11:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * of the system dependencies have been isolated in a separate file.
  12:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * The major functions provided here are:
  13:fltk-1.3.4-1/jpeg/jmemmgr.c ****  *   * pool-based allocation and freeing of memory;
  14:fltk-1.3.4-1/jpeg/jmemmgr.c ****  *   * policy decisions about how to divide available memory among the
  15:fltk-1.3.4-1/jpeg/jmemmgr.c ****  *     virtual arrays;
  16:fltk-1.3.4-1/jpeg/jmemmgr.c ****  *   * control logic for swapping virtual arrays between main memory and
  17:fltk-1.3.4-1/jpeg/jmemmgr.c ****  *     backing storage.
  18:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * The separate system-dependent file provides the actual backing-storage
  19:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * access code, and it contains the policy decision about how much total
  20:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * main memory to use.
  21:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * This file is system-dependent in the sense that some of its functions
  22:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * are unnecessary in some systems.  For example, if there is enough virtual
  23:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * memory so that backing storage will never be used, much of the virtual
  24:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * array control logic could be removed.  (Of course, if you have that much
  25:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * memory then you shouldn't care about a little bit of unused code...)
  26:fltk-1.3.4-1/jpeg/jmemmgr.c ****  */
  27:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
  28:fltk-1.3.4-1/jpeg/jmemmgr.c **** #define JPEG_INTERNALS
  29:fltk-1.3.4-1/jpeg/jmemmgr.c **** #define AM_MEMORY_MANAGER	/* we define jvirt_Xarray_control structs */
  30:fltk-1.3.4-1/jpeg/jmemmgr.c **** #include "jinclude.h"
  31:fltk-1.3.4-1/jpeg/jmemmgr.c **** #include "jpeglib.h"
  32:fltk-1.3.4-1/jpeg/jmemmgr.c **** #include "jmemsys.h"		/* import the system-dependent declarations */
  33:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
  34:fltk-1.3.4-1/jpeg/jmemmgr.c **** #ifndef NO_GETENV
  35:fltk-1.3.4-1/jpeg/jmemmgr.c **** #ifndef HAVE_STDLIB_H		/* <stdlib.h> should declare getenv() */
  36:fltk-1.3.4-1/jpeg/jmemmgr.c **** extern char * getenv JPP((const char * name));
  37:fltk-1.3.4-1/jpeg/jmemmgr.c **** #endif
  38:fltk-1.3.4-1/jpeg/jmemmgr.c **** #endif
  39:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
  40:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
  41:fltk-1.3.4-1/jpeg/jmemmgr.c **** /*
  42:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * Some important notes:
  43:fltk-1.3.4-1/jpeg/jmemmgr.c ****  *   The allocation routines provided here must never return NULL.
  44:fltk-1.3.4-1/jpeg/jmemmgr.c ****  *   They should exit to error_exit if unsuccessful.
  45:fltk-1.3.4-1/jpeg/jmemmgr.c ****  *
  46:fltk-1.3.4-1/jpeg/jmemmgr.c ****  *   It's not a good idea to try to merge the sarray and barray routines,
  47:fltk-1.3.4-1/jpeg/jmemmgr.c ****  *   even though they are textually almost the same, because samples are
  48:fltk-1.3.4-1/jpeg/jmemmgr.c ****  *   usually stored as bytes while coefficients are shorts or ints.  Thus,
  49:fltk-1.3.4-1/jpeg/jmemmgr.c ****  *   in machines where byte pointers have a different representation from
  50:fltk-1.3.4-1/jpeg/jmemmgr.c ****  *   word pointers, the resulting machine code could not be the same.
  51:fltk-1.3.4-1/jpeg/jmemmgr.c ****  */
  52:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
  53:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
  54:fltk-1.3.4-1/jpeg/jmemmgr.c **** /*
  55:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * Many machines require storage alignment: longs must start on 4-byte
  56:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * boundaries, doubles on 8-byte boundaries, etc.  On such machines, malloc()
  57:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * always returns pointers that are multiples of the worst-case alignment
  58:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * requirement, and we had better do so too.
  59:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * There isn't any really portable way to determine the worst-case alignment
  60:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * requirement.  This module assumes that the alignment requirement is
  61:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * multiples of sizeof(ALIGN_TYPE).
  62:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * By default, we define ALIGN_TYPE as double.  This is necessary on some
  63:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * workstations (where doubles really do need 8-byte alignment) and will work
  64:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * fine on nearly everything.  If your machine has lesser alignment needs,
  65:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * you can save a few bytes by making ALIGN_TYPE smaller.
  66:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * The only place I know of where this will NOT work is certain Macintosh
  67:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * 680x0 compilers that define double as a 10-byte IEEE extended float.
  68:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * Doing 10-byte alignment is counterproductive because longwords won't be
  69:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * aligned well.  Put "#define ALIGN_TYPE long" in jconfig.h if you have
  70:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * such a compiler.
  71:fltk-1.3.4-1/jpeg/jmemmgr.c ****  */
  72:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
  73:fltk-1.3.4-1/jpeg/jmemmgr.c **** #ifndef ALIGN_TYPE		/* so can override from jconfig.h */
  74:fltk-1.3.4-1/jpeg/jmemmgr.c **** #define ALIGN_TYPE  double
  75:fltk-1.3.4-1/jpeg/jmemmgr.c **** #endif
  76:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
  77:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
  78:fltk-1.3.4-1/jpeg/jmemmgr.c **** /*
  79:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * We allocate objects from "pools", where each pool is gotten with a single
  80:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * request to jpeg_get_small() or jpeg_get_large().  There is no per-object
  81:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * overhead within a pool, except for alignment padding.  Each pool has a
  82:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * header with a link to the next pool of the same class.
  83:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * Small and large pool headers are identical except that the latter's
  84:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * link pointer must be FAR on 80x86 machines.
  85:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * Notice that the "real" header fields are union'ed with a dummy ALIGN_TYPE
  86:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * field.  This forces the compiler to make SIZEOF(small_pool_hdr) a multiple
  87:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * of the alignment requirement of ALIGN_TYPE.
  88:fltk-1.3.4-1/jpeg/jmemmgr.c ****  */
  89:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
  90:fltk-1.3.4-1/jpeg/jmemmgr.c **** typedef union small_pool_struct * small_pool_ptr;
  91:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
  92:fltk-1.3.4-1/jpeg/jmemmgr.c **** typedef union small_pool_struct {
  93:fltk-1.3.4-1/jpeg/jmemmgr.c ****   struct {
  94:fltk-1.3.4-1/jpeg/jmemmgr.c ****     small_pool_ptr next;	/* next in list of pools */
  95:fltk-1.3.4-1/jpeg/jmemmgr.c ****     size_t bytes_used;		/* how many bytes already used within pool */
  96:fltk-1.3.4-1/jpeg/jmemmgr.c ****     size_t bytes_left;		/* bytes still available in this pool */
  97:fltk-1.3.4-1/jpeg/jmemmgr.c ****   } hdr;
  98:fltk-1.3.4-1/jpeg/jmemmgr.c ****   ALIGN_TYPE dummy;		/* included in union to ensure alignment */
  99:fltk-1.3.4-1/jpeg/jmemmgr.c **** } small_pool_hdr;
 100:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 101:fltk-1.3.4-1/jpeg/jmemmgr.c **** typedef union large_pool_struct FAR * large_pool_ptr;
 102:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 103:fltk-1.3.4-1/jpeg/jmemmgr.c **** typedef union large_pool_struct {
 104:fltk-1.3.4-1/jpeg/jmemmgr.c ****   struct {
 105:fltk-1.3.4-1/jpeg/jmemmgr.c ****     large_pool_ptr next;	/* next in list of pools */
 106:fltk-1.3.4-1/jpeg/jmemmgr.c ****     size_t bytes_used;		/* how many bytes already used within pool */
 107:fltk-1.3.4-1/jpeg/jmemmgr.c ****     size_t bytes_left;		/* bytes still available in this pool */
 108:fltk-1.3.4-1/jpeg/jmemmgr.c ****   } hdr;
 109:fltk-1.3.4-1/jpeg/jmemmgr.c ****   ALIGN_TYPE dummy;		/* included in union to ensure alignment */
 110:fltk-1.3.4-1/jpeg/jmemmgr.c **** } large_pool_hdr;
 111:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 112:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 113:fltk-1.3.4-1/jpeg/jmemmgr.c **** /*
 114:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * Here is the full definition of a memory manager object.
 115:fltk-1.3.4-1/jpeg/jmemmgr.c ****  */
 116:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 117:fltk-1.3.4-1/jpeg/jmemmgr.c **** typedef struct {
 118:fltk-1.3.4-1/jpeg/jmemmgr.c ****   struct jpeg_memory_mgr pub;	/* public fields */
 119:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 120:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Each pool identifier (lifetime class) names a linked list of pools. */
 121:fltk-1.3.4-1/jpeg/jmemmgr.c ****   small_pool_ptr small_list[JPOOL_NUMPOOLS];
 122:fltk-1.3.4-1/jpeg/jmemmgr.c ****   large_pool_ptr large_list[JPOOL_NUMPOOLS];
 123:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 124:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Since we only have one lifetime class of virtual arrays, only one
 125:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * linked list is necessary (for each datatype).  Note that the virtual
 126:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * array control blocks being linked together are actually stored somewhere
 127:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * in the small-pool list.
 128:fltk-1.3.4-1/jpeg/jmemmgr.c ****    */
 129:fltk-1.3.4-1/jpeg/jmemmgr.c ****   jvirt_sarray_ptr virt_sarray_list;
 130:fltk-1.3.4-1/jpeg/jmemmgr.c ****   jvirt_barray_ptr virt_barray_list;
 131:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 132:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* This counts total space obtained from jpeg_get_small/large */
 133:fltk-1.3.4-1/jpeg/jmemmgr.c ****   long total_space_allocated;
 134:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 135:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* alloc_sarray and alloc_barray set this value for use by virtual
 136:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * array routines.
 137:fltk-1.3.4-1/jpeg/jmemmgr.c ****    */
 138:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION last_rowsperchunk;	/* from most recent alloc_sarray/barray */
 139:fltk-1.3.4-1/jpeg/jmemmgr.c **** } my_memory_mgr;
 140:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 141:fltk-1.3.4-1/jpeg/jmemmgr.c **** typedef my_memory_mgr * my_mem_ptr;
 142:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 143:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 144:fltk-1.3.4-1/jpeg/jmemmgr.c **** /*
 145:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * The control blocks for virtual arrays.
 146:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * Note that these blocks are allocated in the "small" pool area.
 147:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * System-dependent info for the associated backing store (if any) is hidden
 148:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * inside the backing_store_info struct.
 149:fltk-1.3.4-1/jpeg/jmemmgr.c ****  */
 150:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 151:fltk-1.3.4-1/jpeg/jmemmgr.c **** struct jvirt_sarray_control {
 152:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JSAMPARRAY mem_buffer;	/* => the in-memory buffer */
 153:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION rows_in_array;	/* total virtual array height */
 154:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION samplesperrow;	/* width of array (and of memory buffer) */
 155:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION maxaccess;		/* max rows accessed by access_virt_sarray */
 156:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION rows_in_mem;	/* height of memory buffer */
 157:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION rowsperchunk;	/* allocation chunk size in mem_buffer */
 158:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION cur_start_row;	/* first logical row # in the buffer */
 159:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION first_undef_row;	/* row # of first uninitialized row */
 160:fltk-1.3.4-1/jpeg/jmemmgr.c ****   boolean pre_zero;		/* pre-zero mode requested? */
 161:fltk-1.3.4-1/jpeg/jmemmgr.c ****   boolean dirty;		/* do current buffer contents need written? */
 162:fltk-1.3.4-1/jpeg/jmemmgr.c ****   boolean b_s_open;		/* is backing-store data valid? */
 163:fltk-1.3.4-1/jpeg/jmemmgr.c ****   jvirt_sarray_ptr next;	/* link to next virtual sarray control block */
 164:fltk-1.3.4-1/jpeg/jmemmgr.c ****   backing_store_info b_s_info;	/* System-dependent control info */
 165:fltk-1.3.4-1/jpeg/jmemmgr.c **** };
 166:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 167:fltk-1.3.4-1/jpeg/jmemmgr.c **** struct jvirt_barray_control {
 168:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JBLOCKARRAY mem_buffer;	/* => the in-memory buffer */
 169:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION rows_in_array;	/* total virtual array height */
 170:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION blocksperrow;	/* width of array (and of memory buffer) */
 171:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION maxaccess;		/* max rows accessed by access_virt_barray */
 172:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION rows_in_mem;	/* height of memory buffer */
 173:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION rowsperchunk;	/* allocation chunk size in mem_buffer */
 174:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION cur_start_row;	/* first logical row # in the buffer */
 175:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION first_undef_row;	/* row # of first uninitialized row */
 176:fltk-1.3.4-1/jpeg/jmemmgr.c ****   boolean pre_zero;		/* pre-zero mode requested? */
 177:fltk-1.3.4-1/jpeg/jmemmgr.c ****   boolean dirty;		/* do current buffer contents need written? */
 178:fltk-1.3.4-1/jpeg/jmemmgr.c ****   boolean b_s_open;		/* is backing-store data valid? */
 179:fltk-1.3.4-1/jpeg/jmemmgr.c ****   jvirt_barray_ptr next;	/* link to next virtual barray control block */
 180:fltk-1.3.4-1/jpeg/jmemmgr.c ****   backing_store_info b_s_info;	/* System-dependent control info */
 181:fltk-1.3.4-1/jpeg/jmemmgr.c **** };
 182:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 183:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 184:fltk-1.3.4-1/jpeg/jmemmgr.c **** #ifdef MEM_STATS		/* optional extra stuff for statistics */
 185:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 186:fltk-1.3.4-1/jpeg/jmemmgr.c **** LOCAL(void)
 187:fltk-1.3.4-1/jpeg/jmemmgr.c **** print_mem_stats (j_common_ptr cinfo, int pool_id)
 188:fltk-1.3.4-1/jpeg/jmemmgr.c **** {
 189:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 190:fltk-1.3.4-1/jpeg/jmemmgr.c ****   small_pool_ptr shdr_ptr;
 191:fltk-1.3.4-1/jpeg/jmemmgr.c ****   large_pool_ptr lhdr_ptr;
 192:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 193:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Since this is only a debugging stub, we can cheat a little by using
 194:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * fprintf directly rather than going through the trace message code.
 195:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * This is helpful because message parm array can't handle longs.
 196:fltk-1.3.4-1/jpeg/jmemmgr.c ****    */
 197:fltk-1.3.4-1/jpeg/jmemmgr.c ****   fprintf(stderr, "Freeing pool %d, total space = %ld\n",
 198:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	  pool_id, mem->total_space_allocated);
 199:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 200:fltk-1.3.4-1/jpeg/jmemmgr.c ****   for (lhdr_ptr = mem->large_list[pool_id]; lhdr_ptr != NULL;
 201:fltk-1.3.4-1/jpeg/jmemmgr.c ****        lhdr_ptr = lhdr_ptr->hdr.next) {
 202:fltk-1.3.4-1/jpeg/jmemmgr.c ****     fprintf(stderr, "  Large chunk used %ld\n",
 203:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	    (long) lhdr_ptr->hdr.bytes_used);
 204:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 205:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 206:fltk-1.3.4-1/jpeg/jmemmgr.c ****   for (shdr_ptr = mem->small_list[pool_id]; shdr_ptr != NULL;
 207:fltk-1.3.4-1/jpeg/jmemmgr.c ****        shdr_ptr = shdr_ptr->hdr.next) {
 208:fltk-1.3.4-1/jpeg/jmemmgr.c ****     fprintf(stderr, "  Small chunk used %ld free %ld\n",
 209:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	    (long) shdr_ptr->hdr.bytes_used,
 210:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	    (long) shdr_ptr->hdr.bytes_left);
 211:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 212:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 213:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 214:fltk-1.3.4-1/jpeg/jmemmgr.c **** #endif /* MEM_STATS */
 215:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 216:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 217:fltk-1.3.4-1/jpeg/jmemmgr.c **** LOCAL(noreturn_t)
 218:fltk-1.3.4-1/jpeg/jmemmgr.c **** out_of_memory (j_common_ptr cinfo, int which)
 219:fltk-1.3.4-1/jpeg/jmemmgr.c **** /* Report an out-of-memory error and stop execution */
 220:fltk-1.3.4-1/jpeg/jmemmgr.c **** /* If we compiled MEM_STATS support, report alloc requests before dying */
 221:fltk-1.3.4-1/jpeg/jmemmgr.c **** {
 222:fltk-1.3.4-1/jpeg/jmemmgr.c **** #ifdef MEM_STATS
 223:fltk-1.3.4-1/jpeg/jmemmgr.c ****   cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
 224:fltk-1.3.4-1/jpeg/jmemmgr.c **** #endif
 225:fltk-1.3.4-1/jpeg/jmemmgr.c ****   ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
 226:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 227:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 228:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 229:fltk-1.3.4-1/jpeg/jmemmgr.c **** /*
 230:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * Allocation of "small" objects.
 231:fltk-1.3.4-1/jpeg/jmemmgr.c ****  *
 232:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * For these, we use pooled storage.  When a new pool must be created,
 233:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * we try to get enough space for the current request plus a "slop" factor,
 234:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * where the slop will be the amount of leftover space in the new pool.
 235:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * The speed vs. space tradeoff is largely determined by the slop values.
 236:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * A different slop value is provided for each pool class (lifetime),
 237:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * and we also distinguish the first pool of a class from later ones.
 238:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * NOTE: the values given work fairly well on both 16- and 32-bit-int
 239:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * machines, but may be too small if longs are 64 bits or more.
 240:fltk-1.3.4-1/jpeg/jmemmgr.c ****  */
 241:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 242:fltk-1.3.4-1/jpeg/jmemmgr.c **** static const size_t first_pool_slop[JPOOL_NUMPOOLS] = 
 243:fltk-1.3.4-1/jpeg/jmemmgr.c **** {
 244:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	1600,			/* first PERMANENT pool */
 245:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	16000			/* first IMAGE pool */
 246:fltk-1.3.4-1/jpeg/jmemmgr.c **** };
 247:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 248:fltk-1.3.4-1/jpeg/jmemmgr.c **** static const size_t extra_pool_slop[JPOOL_NUMPOOLS] = 
 249:fltk-1.3.4-1/jpeg/jmemmgr.c **** {
 250:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	0,			/* additional PERMANENT pools */
 251:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	5000			/* additional IMAGE pools */
 252:fltk-1.3.4-1/jpeg/jmemmgr.c **** };
 253:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 254:fltk-1.3.4-1/jpeg/jmemmgr.c **** #define MIN_SLOP  50		/* greater than 0 to avoid futile looping */
 255:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 256:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 257:fltk-1.3.4-1/jpeg/jmemmgr.c **** METHODDEF(void *)
 258:fltk-1.3.4-1/jpeg/jmemmgr.c **** alloc_small (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
 259:fltk-1.3.4-1/jpeg/jmemmgr.c **** /* Allocate a "small" object */
 260:fltk-1.3.4-1/jpeg/jmemmgr.c **** {
 261:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 262:fltk-1.3.4-1/jpeg/jmemmgr.c ****   small_pool_ptr hdr_ptr, prev_hdr_ptr;
 263:fltk-1.3.4-1/jpeg/jmemmgr.c ****   char * data_ptr;
 264:fltk-1.3.4-1/jpeg/jmemmgr.c ****   size_t odd_bytes, min_request, slop;
 265:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 266:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Check for unsatisfiable request (do now to ensure no overflow below) */
 267:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 268:fltk-1.3.4-1/jpeg/jmemmgr.c ****     out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 269:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 270:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
 271:fltk-1.3.4-1/jpeg/jmemmgr.c ****   odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
 272:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (odd_bytes > 0)
 273:fltk-1.3.4-1/jpeg/jmemmgr.c ****     sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 274:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 275:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* See if space is available in any existing pool */
 276:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 277:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 278:fltk-1.3.4-1/jpeg/jmemmgr.c ****   prev_hdr_ptr = NULL;
 279:fltk-1.3.4-1/jpeg/jmemmgr.c ****   hdr_ptr = mem->small_list[pool_id];
 280:fltk-1.3.4-1/jpeg/jmemmgr.c ****   while (hdr_ptr != NULL) {
 281:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 282:fltk-1.3.4-1/jpeg/jmemmgr.c ****       break;			/* found pool with enough space */
 283:fltk-1.3.4-1/jpeg/jmemmgr.c ****     prev_hdr_ptr = hdr_ptr;
 284:fltk-1.3.4-1/jpeg/jmemmgr.c ****     hdr_ptr = hdr_ptr->hdr.next;
 285:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 286:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 287:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Time to make a new pool? */
 288:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (hdr_ptr == NULL) {
 289:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* min_request is what we need now, slop is what will be leftover */
 290:fltk-1.3.4-1/jpeg/jmemmgr.c ****     min_request = sizeofobject + SIZEOF(small_pool_hdr);
 291:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (prev_hdr_ptr == NULL)	/* first pool in class? */
 292:fltk-1.3.4-1/jpeg/jmemmgr.c ****       slop = first_pool_slop[pool_id];
 293:fltk-1.3.4-1/jpeg/jmemmgr.c ****     else
 294:fltk-1.3.4-1/jpeg/jmemmgr.c ****       slop = extra_pool_slop[pool_id];
 295:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Don't ask for more than MAX_ALLOC_CHUNK */
 296:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
 297:fltk-1.3.4-1/jpeg/jmemmgr.c ****       slop = (size_t) (MAX_ALLOC_CHUNK-min_request);
 298:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Try to get space, if fail reduce slop and try again */
 299:fltk-1.3.4-1/jpeg/jmemmgr.c ****     for (;;) {
 300:fltk-1.3.4-1/jpeg/jmemmgr.c ****       hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 301:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (hdr_ptr != NULL)
 302:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	break;
 303:fltk-1.3.4-1/jpeg/jmemmgr.c ****       slop /= 2;
 304:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (slop < MIN_SLOP)	/* give up when it gets real small */
 305:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 306:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 307:fltk-1.3.4-1/jpeg/jmemmgr.c ****     mem->total_space_allocated += min_request + slop;
 308:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Success, initialize the new pool header and add to end of list */
 309:fltk-1.3.4-1/jpeg/jmemmgr.c ****     hdr_ptr->hdr.next = NULL;
 310:fltk-1.3.4-1/jpeg/jmemmgr.c ****     hdr_ptr->hdr.bytes_used = 0;
 311:fltk-1.3.4-1/jpeg/jmemmgr.c ****     hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 312:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (prev_hdr_ptr == NULL)	/* first pool in class? */
 313:fltk-1.3.4-1/jpeg/jmemmgr.c ****       mem->small_list[pool_id] = hdr_ptr;
 314:fltk-1.3.4-1/jpeg/jmemmgr.c ****     else
 315:fltk-1.3.4-1/jpeg/jmemmgr.c ****       prev_hdr_ptr->hdr.next = hdr_ptr;
 316:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 317:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 318:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* OK, allocate the object from the current pool */
 319:fltk-1.3.4-1/jpeg/jmemmgr.c ****   data_ptr = (char *) (hdr_ptr + 1); /* point to first data byte in pool */
 320:fltk-1.3.4-1/jpeg/jmemmgr.c ****   data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 321:fltk-1.3.4-1/jpeg/jmemmgr.c ****   hdr_ptr->hdr.bytes_used += sizeofobject;
 322:fltk-1.3.4-1/jpeg/jmemmgr.c ****   hdr_ptr->hdr.bytes_left -= sizeofobject;
 323:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 324:fltk-1.3.4-1/jpeg/jmemmgr.c ****   return (void *) data_ptr;
 325:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 326:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 327:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 328:fltk-1.3.4-1/jpeg/jmemmgr.c **** /*
 329:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * Allocation of "large" objects.
 330:fltk-1.3.4-1/jpeg/jmemmgr.c ****  *
 331:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * The external semantics of these are the same as "small" objects,
 332:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * except that FAR pointers are used on 80x86.  However the pool
 333:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * management heuristics are quite different.  We assume that each
 334:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * request is large enough that it may as well be passed directly to
 335:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * jpeg_get_large; the pool management just links everything together
 336:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * so that we can free it all on demand.
 337:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * Note: the major use of "large" objects is in JSAMPARRAY and JBLOCKARRAY
 338:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * structures.  The routines that create these structures (see below)
 339:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * deliberately bunch rows together to ensure a large request size.
 340:fltk-1.3.4-1/jpeg/jmemmgr.c ****  */
 341:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 342:fltk-1.3.4-1/jpeg/jmemmgr.c **** METHODDEF(void FAR *)
 343:fltk-1.3.4-1/jpeg/jmemmgr.c **** alloc_large (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
 344:fltk-1.3.4-1/jpeg/jmemmgr.c **** /* Allocate a "large" object */
 345:fltk-1.3.4-1/jpeg/jmemmgr.c **** {
 346:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 347:fltk-1.3.4-1/jpeg/jmemmgr.c ****   large_pool_ptr hdr_ptr;
 348:fltk-1.3.4-1/jpeg/jmemmgr.c ****   size_t odd_bytes;
 349:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 350:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Check for unsatisfiable request (do now to ensure no overflow below) */
 351:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 352:fltk-1.3.4-1/jpeg/jmemmgr.c ****     out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 353:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 354:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
 355:fltk-1.3.4-1/jpeg/jmemmgr.c ****   odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
 356:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (odd_bytes > 0)
 357:fltk-1.3.4-1/jpeg/jmemmgr.c ****     sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 358:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 359:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Always make a new pool */
 360:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 361:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 362:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 363:fltk-1.3.4-1/jpeg/jmemmgr.c ****   hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
 364:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					    SIZEOF(large_pool_hdr));
 365:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (hdr_ptr == NULL)
 366:fltk-1.3.4-1/jpeg/jmemmgr.c ****     out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 367:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 368:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 369:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Success, initialize the new pool header and add to list */
 370:fltk-1.3.4-1/jpeg/jmemmgr.c ****   hdr_ptr->hdr.next = mem->large_list[pool_id];
 371:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* We maintain space counts in each pool header for statistical purposes,
 372:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * even though they are not needed for allocation.
 373:fltk-1.3.4-1/jpeg/jmemmgr.c ****    */
 374:fltk-1.3.4-1/jpeg/jmemmgr.c ****   hdr_ptr->hdr.bytes_used = sizeofobject;
 375:fltk-1.3.4-1/jpeg/jmemmgr.c ****   hdr_ptr->hdr.bytes_left = 0;
 376:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->large_list[pool_id] = hdr_ptr;
 377:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 378:fltk-1.3.4-1/jpeg/jmemmgr.c ****   return (void FAR *) (hdr_ptr + 1); /* point to first data byte in pool */
 379:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 380:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 381:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 382:fltk-1.3.4-1/jpeg/jmemmgr.c **** /*
 383:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * Creation of 2-D sample arrays.
 384:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * The pointers are in near heap, the samples themselves in FAR heap.
 385:fltk-1.3.4-1/jpeg/jmemmgr.c ****  *
 386:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * To minimize allocation overhead and to allow I/O of large contiguous
 387:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * blocks, we allocate the sample rows in groups of as many rows as possible
 388:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * without exceeding MAX_ALLOC_CHUNK total bytes per allocation request.
 389:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * NB: the virtual array control routines, later in this file, know about
 390:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * this chunking of rows.  The rowsperchunk value is left in the mem manager
 391:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * object so that it can be saved away if this sarray is the workspace for
 392:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * a virtual array.
 393:fltk-1.3.4-1/jpeg/jmemmgr.c ****  */
 394:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 395:fltk-1.3.4-1/jpeg/jmemmgr.c **** METHODDEF(JSAMPARRAY)
 396:fltk-1.3.4-1/jpeg/jmemmgr.c **** alloc_sarray (j_common_ptr cinfo, int pool_id,
 397:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	      JDIMENSION samplesperrow, JDIMENSION numrows)
 398:fltk-1.3.4-1/jpeg/jmemmgr.c **** /* Allocate a 2-D sample array */
 399:fltk-1.3.4-1/jpeg/jmemmgr.c **** {
 400:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 401:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JSAMPARRAY result;
 402:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JSAMPROW workspace;
 403:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION rowsperchunk, currow, i;
 404:fltk-1.3.4-1/jpeg/jmemmgr.c ****   long ltemp;
 405:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 406:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Calculate max # of rows allowed in one allocation chunk */
 407:fltk-1.3.4-1/jpeg/jmemmgr.c ****   ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 408:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	  ((long) samplesperrow * SIZEOF(JSAMPLE));
 409:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (ltemp <= 0)
 410:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 411:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (ltemp < (long) numrows)
 412:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rowsperchunk = (JDIMENSION) ltemp;
 413:fltk-1.3.4-1/jpeg/jmemmgr.c ****   else
 414:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rowsperchunk = numrows;
 415:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->last_rowsperchunk = rowsperchunk;
 416:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 417:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Get space for row pointers (small object) */
 418:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 419:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				    (size_t) (numrows * SIZEOF(JSAMPROW)));
 420:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 421:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Get the rows themselves (large objects) */
 422:fltk-1.3.4-1/jpeg/jmemmgr.c ****   currow = 0;
 423:fltk-1.3.4-1/jpeg/jmemmgr.c ****   while (currow < numrows) {
 424:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rowsperchunk = MIN(rowsperchunk, numrows - currow);
 425:fltk-1.3.4-1/jpeg/jmemmgr.c ****     workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 426:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	(size_t) ((size_t) rowsperchunk * (size_t) samplesperrow
 427:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		  * SIZEOF(JSAMPLE)));
 428:fltk-1.3.4-1/jpeg/jmemmgr.c ****     for (i = rowsperchunk; i > 0; i--) {
 429:fltk-1.3.4-1/jpeg/jmemmgr.c ****       result[currow++] = workspace;
 430:fltk-1.3.4-1/jpeg/jmemmgr.c ****       workspace += samplesperrow;
 431:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 432:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 433:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 434:fltk-1.3.4-1/jpeg/jmemmgr.c ****   return result;
 435:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 436:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 437:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 438:fltk-1.3.4-1/jpeg/jmemmgr.c **** /*
 439:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * Creation of 2-D coefficient-block arrays.
 440:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * This is essentially the same as the code for sample arrays, above.
 441:fltk-1.3.4-1/jpeg/jmemmgr.c ****  */
 442:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 443:fltk-1.3.4-1/jpeg/jmemmgr.c **** METHODDEF(JBLOCKARRAY)
 444:fltk-1.3.4-1/jpeg/jmemmgr.c **** alloc_barray (j_common_ptr cinfo, int pool_id,
 445:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	      JDIMENSION blocksperrow, JDIMENSION numrows)
 446:fltk-1.3.4-1/jpeg/jmemmgr.c **** /* Allocate a 2-D coefficient-block array */
 447:fltk-1.3.4-1/jpeg/jmemmgr.c **** {
 448:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 449:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JBLOCKARRAY result;
 450:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JBLOCKROW workspace;
 451:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION rowsperchunk, currow, i;
 452:fltk-1.3.4-1/jpeg/jmemmgr.c ****   long ltemp;
 453:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 454:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Calculate max # of rows allowed in one allocation chunk */
 455:fltk-1.3.4-1/jpeg/jmemmgr.c ****   ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 456:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	  ((long) blocksperrow * SIZEOF(JBLOCK));
 457:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (ltemp <= 0)
 458:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 459:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (ltemp < (long) numrows)
 460:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rowsperchunk = (JDIMENSION) ltemp;
 461:fltk-1.3.4-1/jpeg/jmemmgr.c ****   else
 462:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rowsperchunk = numrows;
 463:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->last_rowsperchunk = rowsperchunk;
 464:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 465:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Get space for row pointers (small object) */
 466:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 467:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				     (size_t) (numrows * SIZEOF(JBLOCKROW)));
 468:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 469:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Get the rows themselves (large objects) */
 470:fltk-1.3.4-1/jpeg/jmemmgr.c ****   currow = 0;
 471:fltk-1.3.4-1/jpeg/jmemmgr.c ****   while (currow < numrows) {
 472:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rowsperchunk = MIN(rowsperchunk, numrows - currow);
 473:fltk-1.3.4-1/jpeg/jmemmgr.c ****     workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 474:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	(size_t) ((size_t) rowsperchunk * (size_t) blocksperrow
 475:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		  * SIZEOF(JBLOCK)));
 476:fltk-1.3.4-1/jpeg/jmemmgr.c ****     for (i = rowsperchunk; i > 0; i--) {
 477:fltk-1.3.4-1/jpeg/jmemmgr.c ****       result[currow++] = workspace;
 478:fltk-1.3.4-1/jpeg/jmemmgr.c ****       workspace += blocksperrow;
 479:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 480:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 481:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 482:fltk-1.3.4-1/jpeg/jmemmgr.c ****   return result;
 483:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 484:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 485:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 486:fltk-1.3.4-1/jpeg/jmemmgr.c **** /*
 487:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * About virtual array management:
 488:fltk-1.3.4-1/jpeg/jmemmgr.c ****  *
 489:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * The above "normal" array routines are only used to allocate strip buffers
 490:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * (as wide as the image, but just a few rows high).  Full-image-sized buffers
 491:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * are handled as "virtual" arrays.  The array is still accessed a strip at a
 492:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * time, but the memory manager must save the whole array for repeated
 493:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * accesses.  The intended implementation is that there is a strip buffer in
 494:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * memory (as high as is possible given the desired memory limit), plus a
 495:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * backing file that holds the rest of the array.
 496:fltk-1.3.4-1/jpeg/jmemmgr.c ****  *
 497:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * The request_virt_array routines are told the total size of the image and
 498:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * the maximum number of rows that will be accessed at once.  The in-memory
 499:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * buffer must be at least as large as the maxaccess value.
 500:fltk-1.3.4-1/jpeg/jmemmgr.c ****  *
 501:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * The request routines create control blocks but not the in-memory buffers.
 502:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * That is postponed until realize_virt_arrays is called.  At that time the
 503:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * total amount of space needed is known (approximately, anyway), so free
 504:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * memory can be divided up fairly.
 505:fltk-1.3.4-1/jpeg/jmemmgr.c ****  *
 506:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * The access_virt_array routines are responsible for making a specific strip
 507:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * area accessible (after reading or writing the backing file, if necessary).
 508:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * Note that the access routines are told whether the caller intends to modify
 509:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * the accessed strip; during a read-only pass this saves having to rewrite
 510:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * data to disk.  The access routines are also responsible for pre-zeroing
 511:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * any newly accessed rows, if pre-zeroing was requested.
 512:fltk-1.3.4-1/jpeg/jmemmgr.c ****  *
 513:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * In current usage, the access requests are usually for nonoverlapping
 514:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * strips; that is, successive access start_row numbers differ by exactly
 515:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * num_rows = maxaccess.  This means we can get good performance with simple
 516:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * buffer dump/reload logic, by making the in-memory buffer be a multiple
 517:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * of the access height; then there will never be accesses across bufferload
 518:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * boundaries.  The code will still work with overlapping access requests,
 519:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * but it doesn't handle bufferload overlaps very efficiently.
 520:fltk-1.3.4-1/jpeg/jmemmgr.c ****  */
 521:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 522:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 523:fltk-1.3.4-1/jpeg/jmemmgr.c **** METHODDEF(jvirt_sarray_ptr)
 524:fltk-1.3.4-1/jpeg/jmemmgr.c **** request_virt_sarray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
 525:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		     JDIMENSION samplesperrow, JDIMENSION numrows,
 526:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		     JDIMENSION maxaccess)
 527:fltk-1.3.4-1/jpeg/jmemmgr.c **** /* Request a virtual 2-D sample array */
 528:fltk-1.3.4-1/jpeg/jmemmgr.c **** {
 529:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 530:fltk-1.3.4-1/jpeg/jmemmgr.c ****   jvirt_sarray_ptr result;
 531:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 532:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Only IMAGE-lifetime virtual arrays are currently supported */
 533:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (pool_id != JPOOL_IMAGE)
 534:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 535:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 536:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* get control block */
 537:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
 538:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					  SIZEOF(struct jvirt_sarray_control));
 539:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 540:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->mem_buffer = NULL;	/* marks array not yet realized */
 541:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->rows_in_array = numrows;
 542:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->samplesperrow = samplesperrow;
 543:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->maxaccess = maxaccess;
 544:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->pre_zero = pre_zero;
 545:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->b_s_open = FALSE;	/* no associated backing-store object */
 546:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 547:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->virt_sarray_list = result;
 548:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 549:fltk-1.3.4-1/jpeg/jmemmgr.c ****   return result;
 550:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 551:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 552:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 553:fltk-1.3.4-1/jpeg/jmemmgr.c **** METHODDEF(jvirt_barray_ptr)
 554:fltk-1.3.4-1/jpeg/jmemmgr.c **** request_virt_barray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
 555:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		     JDIMENSION blocksperrow, JDIMENSION numrows,
 556:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		     JDIMENSION maxaccess)
 557:fltk-1.3.4-1/jpeg/jmemmgr.c **** /* Request a virtual 2-D coefficient-block array */
 558:fltk-1.3.4-1/jpeg/jmemmgr.c **** {
 559:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 560:fltk-1.3.4-1/jpeg/jmemmgr.c ****   jvirt_barray_ptr result;
 561:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 562:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Only IMAGE-lifetime virtual arrays are currently supported */
 563:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (pool_id != JPOOL_IMAGE)
 564:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 565:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 566:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* get control block */
 567:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
 568:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					  SIZEOF(struct jvirt_barray_control));
 569:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 570:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->mem_buffer = NULL;	/* marks array not yet realized */
 571:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->rows_in_array = numrows;
 572:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->blocksperrow = blocksperrow;
 573:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->maxaccess = maxaccess;
 574:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->pre_zero = pre_zero;
 575:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->b_s_open = FALSE;	/* no associated backing-store object */
 576:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 577:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->virt_barray_list = result;
 578:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 579:fltk-1.3.4-1/jpeg/jmemmgr.c ****   return result;
 580:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 581:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 582:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 583:fltk-1.3.4-1/jpeg/jmemmgr.c **** METHODDEF(void)
 584:fltk-1.3.4-1/jpeg/jmemmgr.c **** realize_virt_arrays (j_common_ptr cinfo)
 585:fltk-1.3.4-1/jpeg/jmemmgr.c **** /* Allocate the in-memory buffers for any unrealized virtual arrays */
 586:fltk-1.3.4-1/jpeg/jmemmgr.c **** {
 587:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 588:fltk-1.3.4-1/jpeg/jmemmgr.c ****   long space_per_minheight, maximum_space, avail_mem;
 589:fltk-1.3.4-1/jpeg/jmemmgr.c ****   long minheights, max_minheights;
 590:fltk-1.3.4-1/jpeg/jmemmgr.c ****   jvirt_sarray_ptr sptr;
 591:fltk-1.3.4-1/jpeg/jmemmgr.c ****   jvirt_barray_ptr bptr;
 592:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 593:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Compute the minimum space needed (maxaccess rows in each buffer)
 594:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * and the maximum space needed (full image height in each buffer).
 595:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * These may be of use to the system-dependent jpeg_mem_available routine.
 596:fltk-1.3.4-1/jpeg/jmemmgr.c ****    */
 597:fltk-1.3.4-1/jpeg/jmemmgr.c ****   space_per_minheight = 0;
 598:fltk-1.3.4-1/jpeg/jmemmgr.c ****   maximum_space = 0;
 599:fltk-1.3.4-1/jpeg/jmemmgr.c ****   for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 600:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 601:fltk-1.3.4-1/jpeg/jmemmgr.c ****       space_per_minheight += (long) sptr->maxaccess *
 602:fltk-1.3.4-1/jpeg/jmemmgr.c **** 			     (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 603:fltk-1.3.4-1/jpeg/jmemmgr.c ****       maximum_space += (long) sptr->rows_in_array *
 604:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		       (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 605:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 606:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 607:fltk-1.3.4-1/jpeg/jmemmgr.c ****   for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 608:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 609:fltk-1.3.4-1/jpeg/jmemmgr.c ****       space_per_minheight += (long) bptr->maxaccess *
 610:fltk-1.3.4-1/jpeg/jmemmgr.c **** 			     (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 611:fltk-1.3.4-1/jpeg/jmemmgr.c ****       maximum_space += (long) bptr->rows_in_array *
 612:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		       (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 613:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 614:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 615:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 616:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (space_per_minheight <= 0)
 617:fltk-1.3.4-1/jpeg/jmemmgr.c ****     return;			/* no unrealized arrays, no work */
 618:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 619:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Determine amount of memory to actually use; this is system-dependent. */
 620:fltk-1.3.4-1/jpeg/jmemmgr.c ****   avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
 621:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				 mem->total_space_allocated);
 622:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 623:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* If the maximum space needed is available, make all the buffers full
 624:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * height; otherwise parcel it out with the same number of minheights
 625:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * in each buffer.
 626:fltk-1.3.4-1/jpeg/jmemmgr.c ****    */
 627:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (avail_mem >= maximum_space)
 628:fltk-1.3.4-1/jpeg/jmemmgr.c ****     max_minheights = 1000000000L;
 629:fltk-1.3.4-1/jpeg/jmemmgr.c ****   else {
 630:fltk-1.3.4-1/jpeg/jmemmgr.c ****     max_minheights = avail_mem / space_per_minheight;
 631:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* If there doesn't seem to be enough space, try to get the minimum
 632:fltk-1.3.4-1/jpeg/jmemmgr.c ****      * anyway.  This allows a "stub" implementation of jpeg_mem_available().
 633:fltk-1.3.4-1/jpeg/jmemmgr.c ****      */
 634:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (max_minheights <= 0)
 635:fltk-1.3.4-1/jpeg/jmemmgr.c ****       max_minheights = 1;
 636:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 637:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 638:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Allocate the in-memory buffers and initialize backing store as needed. */
 639:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 640:fltk-1.3.4-1/jpeg/jmemmgr.c ****   for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 641:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 642:fltk-1.3.4-1/jpeg/jmemmgr.c ****       minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 643:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (minheights <= max_minheights) {
 644:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	/* This buffer fits in memory */
 645:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	sptr->rows_in_mem = sptr->rows_in_array;
 646:fltk-1.3.4-1/jpeg/jmemmgr.c ****       } else {
 647:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	/* It doesn't fit in memory, create backing store. */
 648:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 649:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 650:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				(long) sptr->rows_in_array *
 651:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				(long) sptr->samplesperrow *
 652:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				(long) SIZEOF(JSAMPLE));
 653:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	sptr->b_s_open = TRUE;
 654:fltk-1.3.4-1/jpeg/jmemmgr.c ****       }
 655:fltk-1.3.4-1/jpeg/jmemmgr.c ****       sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 656:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				      sptr->samplesperrow, sptr->rows_in_mem);
 657:fltk-1.3.4-1/jpeg/jmemmgr.c ****       sptr->rowsperchunk = mem->last_rowsperchunk;
 658:fltk-1.3.4-1/jpeg/jmemmgr.c ****       sptr->cur_start_row = 0;
 659:fltk-1.3.4-1/jpeg/jmemmgr.c ****       sptr->first_undef_row = 0;
 660:fltk-1.3.4-1/jpeg/jmemmgr.c ****       sptr->dirty = FALSE;
 661:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 662:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 663:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 664:fltk-1.3.4-1/jpeg/jmemmgr.c ****   for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 665:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 666:fltk-1.3.4-1/jpeg/jmemmgr.c ****       minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 667:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (minheights <= max_minheights) {
 668:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	/* This buffer fits in memory */
 669:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	bptr->rows_in_mem = bptr->rows_in_array;
 670:fltk-1.3.4-1/jpeg/jmemmgr.c ****       } else {
 671:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	/* It doesn't fit in memory, create backing store. */
 672:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 673:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 674:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				(long) bptr->rows_in_array *
 675:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				(long) bptr->blocksperrow *
 676:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				(long) SIZEOF(JBLOCK));
 677:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	bptr->b_s_open = TRUE;
 678:fltk-1.3.4-1/jpeg/jmemmgr.c ****       }
 679:fltk-1.3.4-1/jpeg/jmemmgr.c ****       bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 680:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				      bptr->blocksperrow, bptr->rows_in_mem);
 681:fltk-1.3.4-1/jpeg/jmemmgr.c ****       bptr->rowsperchunk = mem->last_rowsperchunk;
 682:fltk-1.3.4-1/jpeg/jmemmgr.c ****       bptr->cur_start_row = 0;
 683:fltk-1.3.4-1/jpeg/jmemmgr.c ****       bptr->first_undef_row = 0;
 684:fltk-1.3.4-1/jpeg/jmemmgr.c ****       bptr->dirty = FALSE;
 685:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 686:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 687:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 688:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 689:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 690:fltk-1.3.4-1/jpeg/jmemmgr.c **** LOCAL(void)
 691:fltk-1.3.4-1/jpeg/jmemmgr.c **** do_sarray_io (j_common_ptr cinfo, jvirt_sarray_ptr ptr, boolean writing)
 692:fltk-1.3.4-1/jpeg/jmemmgr.c **** /* Do backing store read or write of a virtual sample array */
 693:fltk-1.3.4-1/jpeg/jmemmgr.c **** {
 694:fltk-1.3.4-1/jpeg/jmemmgr.c ****   long bytesperrow, file_offset, byte_count, rows, thisrow, i;
 695:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 696:fltk-1.3.4-1/jpeg/jmemmgr.c ****   bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 697:fltk-1.3.4-1/jpeg/jmemmgr.c ****   file_offset = ptr->cur_start_row * bytesperrow;
 698:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Loop to read or write each allocation chunk in mem_buffer */
 699:fltk-1.3.4-1/jpeg/jmemmgr.c ****   for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 700:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 701:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 702:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than is currently defined */
 703:fltk-1.3.4-1/jpeg/jmemmgr.c ****     thisrow = (long) ptr->cur_start_row + i;
 704:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 705:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than fits in file */
 706:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 707:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (rows <= 0)		/* this chunk might be past end of file! */
 708:fltk-1.3.4-1/jpeg/jmemmgr.c ****       break;
 709:fltk-1.3.4-1/jpeg/jmemmgr.c ****     byte_count = rows * bytesperrow;
 710:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (writing)
 711:fltk-1.3.4-1/jpeg/jmemmgr.c ****       (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 712:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					    (void FAR *) ptr->mem_buffer[i],
 713:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					    file_offset, byte_count);
 714:fltk-1.3.4-1/jpeg/jmemmgr.c ****     else
 715:fltk-1.3.4-1/jpeg/jmemmgr.c ****       (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 716:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					   (void FAR *) ptr->mem_buffer[i],
 717:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					   file_offset, byte_count);
 718:fltk-1.3.4-1/jpeg/jmemmgr.c ****     file_offset += byte_count;
 719:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 720:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 721:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 722:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 723:fltk-1.3.4-1/jpeg/jmemmgr.c **** LOCAL(void)
 724:fltk-1.3.4-1/jpeg/jmemmgr.c **** do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
 725:fltk-1.3.4-1/jpeg/jmemmgr.c **** /* Do backing store read or write of a virtual coefficient-block array */
 726:fltk-1.3.4-1/jpeg/jmemmgr.c **** {
  11              		.loc 1 726 1 view -0
  12              		.cfi_startproc
 727:fltk-1.3.4-1/jpeg/jmemmgr.c ****   long bytesperrow, file_offset, byte_count, rows, thisrow, i;
  13              		.loc 1 727 3 view .LVU1
 728:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 729:fltk-1.3.4-1/jpeg/jmemmgr.c ****   bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
  14              		.loc 1 729 3 view .LVU2
 726:fltk-1.3.4-1/jpeg/jmemmgr.c ****   long bytesperrow, file_offset, byte_count, rows, thisrow, i;
  15              		.loc 1 726 1 is_stmt 0 view .LVU3
  16 0000 4157     		pushq	%r15
  17              		.cfi_def_cfa_offset 16
  18              		.cfi_offset 15, -16
  19 0002 4156     		pushq	%r14
  20              		.cfi_def_cfa_offset 24
  21              		.cfi_offset 14, -24
  22 0004 4155     		pushq	%r13
  23              		.cfi_def_cfa_offset 32
  24              		.cfi_offset 13, -32
  25 0006 4154     		pushq	%r12
  26              		.cfi_def_cfa_offset 40
  27              		.cfi_offset 12, -40
  28 0008 55       		pushq	%rbp
  29              		.cfi_def_cfa_offset 48
  30              		.cfi_offset 6, -48
  31 0009 53       		pushq	%rbx
  32              		.cfi_def_cfa_offset 56
  33              		.cfi_offset 3, -56
  34 000a 4883EC18 		subq	$24, %rsp
  35              		.cfi_def_cfa_offset 80
  36              		.loc 1 729 17 view .LVU4
  37 000e 8B6E0C   		movl	12(%rsi), %ebp
 730:fltk-1.3.4-1/jpeg/jmemmgr.c ****   file_offset = ptr->cur_start_row * bytesperrow;
 731:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Loop to read or write each allocation chunk in mem_buffer */
 732:fltk-1.3.4-1/jpeg/jmemmgr.c ****   for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
  38              		.loc 1 732 19 view .LVU5
  39 0011 448B4614 		movl	20(%rsi), %r8d
 726:fltk-1.3.4-1/jpeg/jmemmgr.c ****   long bytesperrow, file_offset, byte_count, rows, thisrow, i;
  40              		.loc 1 726 1 view .LVU6
  41 0015 8954240C 		movl	%edx, 12(%rsp)
 730:fltk-1.3.4-1/jpeg/jmemmgr.c ****   file_offset = ptr->cur_start_row * bytesperrow;
  42              		.loc 1 730 20 view .LVU7
  43 0019 8B561C   		movl	28(%rsi), %edx
  44              	.LVL1:
 729:fltk-1.3.4-1/jpeg/jmemmgr.c ****   file_offset = ptr->cur_start_row * bytesperrow;
  45              		.loc 1 729 42 view .LVU8
  46 001c 48C1E507 		salq	$7, %rbp
 730:fltk-1.3.4-1/jpeg/jmemmgr.c ****   file_offset = ptr->cur_start_row * bytesperrow;
  47              		.loc 1 730 15 view .LVU9
  48 0020 4989EC   		movq	%rbp, %r12
 729:fltk-1.3.4-1/jpeg/jmemmgr.c ****   file_offset = ptr->cur_start_row * bytesperrow;
  49              		.loc 1 729 42 view .LVU10
  50 0023 48892C24 		movq	%rbp, (%rsp)
  51              	.LVL2:
 730:fltk-1.3.4-1/jpeg/jmemmgr.c ****   file_offset = ptr->cur_start_row * bytesperrow;
  52              		.loc 1 730 3 is_stmt 1 view .LVU11
 730:fltk-1.3.4-1/jpeg/jmemmgr.c ****   file_offset = ptr->cur_start_row * bytesperrow;
  53              		.loc 1 730 15 is_stmt 0 view .LVU12
  54 0027 4C0FAFE2 		imulq	%rdx, %r12
  55              	.LVL3:
  56              		.loc 1 732 3 is_stmt 1 view .LVU13
  57              		.loc 1 732 15 view .LVU14
  58              		.loc 1 732 3 is_stmt 0 view .LVU15
  59 002b 4D85C0   		testq	%r8, %r8
  60 002e 0F84BC00 		je	.L1
  60      0000
 733:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 734:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
  61              		.loc 1 734 12 view .LVU16
  62 0034 8B4618   		movl	24(%rsi), %eax
  63 0037 4989F7   		movq	%rsi, %r15
  64              		.loc 1 734 5 is_stmt 1 view .LVU17
  65              		.loc 1 734 10 is_stmt 0 view .LVU18
  66 003a 4C39C0   		cmpq	%r8, %rax
  67 003d 490F4FC0 		cmovg	%r8, %rax
  68              	.LVL4:
 735:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than is currently defined */
 736:fltk-1.3.4-1/jpeg/jmemmgr.c ****     thisrow = (long) ptr->cur_start_row + i;
  69              		.loc 1 736 5 is_stmt 1 view .LVU19
 737:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
  70              		.loc 1 737 5 view .LVU20
  71              		.loc 1 737 12 is_stmt 0 view .LVU21
  72 0041 448B4620 		movl	32(%rsi), %r8d
  73 0045 4929D0   		subq	%rdx, %r8
  74              		.loc 1 737 10 view .LVU22
  75 0048 4939C0   		cmpq	%rax, %r8
  76 004b 490F4EC0 		cmovle	%r8, %rax
  77              	.LVL5:
 738:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than fits in file */
 739:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
  78              		.loc 1 739 5 is_stmt 1 view .LVU23
  79              		.loc 1 739 12 is_stmt 0 view .LVU24
  80 004f 448B4608 		movl	8(%rsi), %r8d
  81 0053 4929D0   		subq	%rdx, %r8
  82              		.loc 1 739 10 view .LVU25
  83 0056 4939C0   		cmpq	%rax, %r8
  84 0059 4C0F4FC0 		cmovg	%rax, %r8
  85              	.LVL6:
 740:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (rows <= 0)		/* this chunk might be past end of file! */
  86              		.loc 1 740 5 is_stmt 1 view .LVU26
  87              		.loc 1 740 8 is_stmt 0 view .LVU27
  88 005d 4D85C0   		testq	%r8, %r8
  89 0060 0F8E8A00 		jle	.L1
  89      0000
  90 0066 4989FD   		movq	%rdi, %r13
  91 0069 4C8D7638 		leaq	56(%rsi), %r14
 732:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
  92              		.loc 1 732 10 view .LVU28
  93 006d 31ED     		xorl	%ebp, %ebp
  94              	.LVL7:
 732:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
  95              		.loc 1 732 10 view .LVU29
  96 006f EB50     		jmp	.L4
  97              	.LVL8:
  98              		.p2align 4,,10
  99 0071 0F1F8000 		.p2align 3
  99      000000
 100              	.L10:
 741:fltk-1.3.4-1/jpeg/jmemmgr.c ****       break;
 742:fltk-1.3.4-1/jpeg/jmemmgr.c ****     byte_count = rows * bytesperrow;
 743:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (writing)
 744:fltk-1.3.4-1/jpeg/jmemmgr.c ****       (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 101              		.loc 1 744 7 is_stmt 1 view .LVU30
 102              		.loc 1 744 8 is_stmt 0 view .LVU31
 103 0078 41FF5740 		call	*64(%r15)
 104              	.LVL9:
 105              	.L6:
 745:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					    (void FAR *) ptr->mem_buffer[i],
 746:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					    file_offset, byte_count);
 747:fltk-1.3.4-1/jpeg/jmemmgr.c ****     else
 748:fltk-1.3.4-1/jpeg/jmemmgr.c ****       (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 749:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					   (void FAR *) ptr->mem_buffer[i],
 750:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					   file_offset, byte_count);
 751:fltk-1.3.4-1/jpeg/jmemmgr.c ****     file_offset += byte_count;
 106              		.loc 1 751 5 is_stmt 1 discriminator 2 view .LVU32
 732:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 107              		.loc 1 732 52 is_stmt 0 discriminator 2 view .LVU33
 108 007c 418B5718 		movl	24(%r15), %edx
 732:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 109              		.loc 1 732 19 discriminator 2 view .LVU34
 110 0080 458B4714 		movl	20(%r15), %r8d
 111              		.loc 1 751 17 discriminator 2 view .LVU35
 112 0084 4901DC   		addq	%rbx, %r12
 113              	.LVL10:
 732:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 114              		.loc 1 732 44 is_stmt 1 discriminator 2 view .LVU36
 732:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 115              		.loc 1 732 46 is_stmt 0 discriminator 2 view .LVU37
 116 0087 4801D5   		addq	%rdx, %rbp
 117              	.LVL11:
 732:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 118              		.loc 1 732 15 is_stmt 1 discriminator 2 view .LVU38
 732:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 119              		.loc 1 732 3 is_stmt 0 discriminator 2 view .LVU39
 120 008a 4939E8   		cmpq	%rbp, %r8
 121 008d 7E61     		jle	.L1
 734:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than is currently defined */
 122              		.loc 1 734 5 is_stmt 1 view .LVU40
 734:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than is currently defined */
 123              		.loc 1 734 12 is_stmt 0 view .LVU41
 124 008f 4929E8   		subq	%rbp, %r8
 736:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 125              		.loc 1 736 15 view .LVU42
 126 0092 418B771C 		movl	28(%r15), %esi
 734:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than is currently defined */
 127              		.loc 1 734 10 view .LVU43
 128 0096 4939D0   		cmpq	%rdx, %r8
 129 0099 490F4ED0 		cmovle	%r8, %rdx
 130              	.LVL12:
 736:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 131              		.loc 1 736 5 is_stmt 1 view .LVU44
 737:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than fits in file */
 132              		.loc 1 737 12 is_stmt 0 view .LVU45
 133 009d 458B4720 		movl	32(%r15), %r8d
 736:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 134              		.loc 1 736 13 view .LVU46
 135 00a1 4801EE   		addq	%rbp, %rsi
 136              	.LVL13:
 737:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than fits in file */
 137              		.loc 1 737 5 is_stmt 1 view .LVU47
 737:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than fits in file */
 138              		.loc 1 737 12 is_stmt 0 view .LVU48
 139 00a4 4929F0   		subq	%rsi, %r8
 737:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than fits in file */
 140              		.loc 1 737 10 view .LVU49
 141 00a7 4939D0   		cmpq	%rdx, %r8
 142 00aa 490F4ED0 		cmovle	%r8, %rdx
 143              	.LVL14:
 739:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (rows <= 0)		/* this chunk might be past end of file! */
 144              		.loc 1 739 5 is_stmt 1 view .LVU50
 739:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (rows <= 0)		/* this chunk might be past end of file! */
 145              		.loc 1 739 12 is_stmt 0 view .LVU51
 146 00ae 458B4708 		movl	8(%r15), %r8d
 147 00b2 4929F0   		subq	%rsi, %r8
 739:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (rows <= 0)		/* this chunk might be past end of file! */
 148              		.loc 1 739 10 view .LVU52
 149 00b5 4939D0   		cmpq	%rdx, %r8
 150 00b8 4C0F4FC2 		cmovg	%rdx, %r8
 151              	.LVL15:
 740:fltk-1.3.4-1/jpeg/jmemmgr.c ****       break;
 152              		.loc 1 740 5 is_stmt 1 view .LVU53
 740:fltk-1.3.4-1/jpeg/jmemmgr.c ****       break;
 153              		.loc 1 740 8 is_stmt 0 view .LVU54
 154 00bc 4D85C0   		testq	%r8, %r8
 155 00bf 7E2F     		jle	.L1
 156              	.LVL16:
 157              	.L4:
 742:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (writing)
 158              		.loc 1 742 5 is_stmt 1 view .LVU55
 742:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (writing)
 159              		.loc 1 742 16 is_stmt 0 view .LVU56
 160 00c1 488B1C24 		movq	(%rsp), %rbx
 161 00c5 498B17   		movq	(%r15), %rdx
 744:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					    (void FAR *) ptr->mem_buffer[i],
 162              		.loc 1 744 8 view .LVU57
 163 00c8 4C89E1   		movq	%r12, %rcx
 164 00cb 4C89F6   		movq	%r14, %rsi
 743:fltk-1.3.4-1/jpeg/jmemmgr.c ****       (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 165              		.loc 1 743 8 view .LVU58
 166 00ce 8B44240C 		movl	12(%rsp), %eax
 744:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					    (void FAR *) ptr->mem_buffer[i],
 167              		.loc 1 744 8 view .LVU59
 168 00d2 4C89EF   		movq	%r13, %rdi
 742:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (writing)
 169              		.loc 1 742 16 view .LVU60
 170 00d5 490FAFD8 		imulq	%r8, %rbx
 171              	.LVL17:
 743:fltk-1.3.4-1/jpeg/jmemmgr.c ****       (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 172              		.loc 1 743 5 is_stmt 1 view .LVU61
 173 00d9 488B14EA 		movq	(%rdx,%rbp,8), %rdx
 744:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					    (void FAR *) ptr->mem_buffer[i],
 174              		.loc 1 744 8 is_stmt 0 view .LVU62
 175 00dd 4989D8   		movq	%rbx, %r8
 176              	.LVL18:
 743:fltk-1.3.4-1/jpeg/jmemmgr.c ****       (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 177              		.loc 1 743 8 view .LVU63
 178 00e0 85C0     		testl	%eax, %eax
 179 00e2 7594     		jne	.L10
 180              	.LVL19:
 748:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					   (void FAR *) ptr->mem_buffer[i],
 181              		.loc 1 748 7 is_stmt 1 view .LVU64
 748:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					   (void FAR *) ptr->mem_buffer[i],
 182              		.loc 1 748 8 is_stmt 0 view .LVU65
 183 00e4 41FF5738 		call	*56(%r15)
 184              	.LVL20:
 748:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					   (void FAR *) ptr->mem_buffer[i],
 185              		.loc 1 748 8 view .LVU66
 186 00e8 EB92     		jmp	.L6
 187              	.LVL21:
 188 00ea 660F1F44 		.p2align 4,,10
 188      0000
 189              		.p2align 3
 190              	.L1:
 752:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 753:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 191              		.loc 1 753 1 view .LVU67
 192 00f0 4883C418 		addq	$24, %rsp
 193              		.cfi_def_cfa_offset 56
 194              	.LVL22:
 195              		.loc 1 753 1 view .LVU68
 196 00f4 5B       		popq	%rbx
 197              		.cfi_def_cfa_offset 48
 198 00f5 5D       		popq	%rbp
 199              		.cfi_def_cfa_offset 40
 200 00f6 415C     		popq	%r12
 201              		.cfi_def_cfa_offset 32
 202              	.LVL23:
 203              		.loc 1 753 1 view .LVU69
 204 00f8 415D     		popq	%r13
 205              		.cfi_def_cfa_offset 24
 206 00fa 415E     		popq	%r14
 207              		.cfi_def_cfa_offset 16
 208 00fc 415F     		popq	%r15
 209              		.cfi_def_cfa_offset 8
 210 00fe C3       		ret
 211              		.cfi_endproc
 212              	.LFE60:
 214              		.section	.text.alloc_small,"ax",@progbits
 215              		.p2align 4
 217              	alloc_small:
 218              	.LVL24:
 219              	.LFB52:
 260:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 220              		.loc 1 260 1 is_stmt 1 view -0
 221              		.cfi_startproc
 260:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 222              		.loc 1 260 1 is_stmt 0 view .LVU71
 223 0000 F30F1EFA 		endbr64
 261:fltk-1.3.4-1/jpeg/jmemmgr.c ****   small_pool_ptr hdr_ptr, prev_hdr_ptr;
 224              		.loc 1 261 3 is_stmt 1 view .LVU72
 260:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 225              		.loc 1 260 1 is_stmt 0 view .LVU73
 226 0004 4157     		pushq	%r15
 227              		.cfi_def_cfa_offset 16
 228              		.cfi_offset 15, -16
 229 0006 4989FF   		movq	%rdi, %r15
 230 0009 4156     		pushq	%r14
 231              		.cfi_def_cfa_offset 24
 232              		.cfi_offset 14, -24
 233 000b 4155     		pushq	%r13
 234              		.cfi_def_cfa_offset 32
 235              		.cfi_offset 13, -32
 236 000d 4154     		pushq	%r12
 237              		.cfi_def_cfa_offset 40
 238              		.cfi_offset 12, -40
 239 000f 4189F4   		movl	%esi, %r12d
 240 0012 55       		pushq	%rbp
 241              		.cfi_def_cfa_offset 48
 242              		.cfi_offset 6, -48
 243 0013 53       		pushq	%rbx
 244              		.cfi_def_cfa_offset 56
 245              		.cfi_offset 3, -56
 246 0014 4889D3   		movq	%rdx, %rbx
 247 0017 4883EC18 		subq	$24, %rsp
 248              		.cfi_def_cfa_offset 80
 261:fltk-1.3.4-1/jpeg/jmemmgr.c ****   small_pool_ptr hdr_ptr, prev_hdr_ptr;
 249              		.loc 1 261 14 view .LVU74
 250 001b 488B6F08 		movq	8(%rdi), %rbp
 251              	.LVL25:
 262:fltk-1.3.4-1/jpeg/jmemmgr.c ****   char * data_ptr;
 252              		.loc 1 262 3 is_stmt 1 view .LVU75
 263:fltk-1.3.4-1/jpeg/jmemmgr.c ****   size_t odd_bytes, min_request, slop;
 253              		.loc 1 263 3 view .LVU76
 264:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 254              		.loc 1 264 3 view .LVU77
 267:fltk-1.3.4-1/jpeg/jmemmgr.c ****     out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 255              		.loc 1 267 3 view .LVU78
 267:fltk-1.3.4-1/jpeg/jmemmgr.c ****     out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 256              		.loc 1 267 6 is_stmt 0 view .LVU79
 257 001f 4881FAE8 		cmpq	$999999976, %rdx
 257      C99A3B
 258 0026 7619     		jbe	.L12
 268:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 259              		.loc 1 268 5 is_stmt 1 view .LVU80
 260              	.LVL26:
 261              	.LBB18:
 262              	.LBI18:
 218:fltk-1.3.4-1/jpeg/jmemmgr.c **** /* Report an out-of-memory error and stop execution */
 263              		.loc 1 218 1 view .LVU81
 264              	.LBB19:
 225:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 265              		.loc 1 225 3 view .LVU82
 266 0028 488B07   		movq	(%rdi), %rax
 267 002b C7402838 		movl	$56, 40(%rax)
 267      000000
 268 0032 488B07   		movq	(%rdi), %rax
 269 0035 C7402C01 		movl	$1, 44(%rax)
 269      000000
 270 003c 488B07   		movq	(%rdi), %rax
 271 003f FF10     		call	*(%rax)
 272              	.LVL27:
 273              	.L12:
 225:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 274              		.loc 1 225 3 is_stmt 0 view .LVU83
 275              	.LBE19:
 276              	.LBE18:
 271:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (odd_bytes > 0)
 277              		.loc 1 271 3 is_stmt 1 view .LVU84
 271:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (odd_bytes > 0)
 278              		.loc 1 271 13 is_stmt 0 view .LVU85
 279 0041 4889DA   		movq	%rbx, %rdx
 273:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 280              		.loc 1 273 18 view .LVU86
 281 0044 488D4308 		leaq	8(%rbx), %rax
 271:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (odd_bytes > 0)
 282              		.loc 1 271 13 view .LVU87
 283 0048 83E207   		andl	$7, %edx
 284              	.LVL28:
 272:fltk-1.3.4-1/jpeg/jmemmgr.c ****     sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 285              		.loc 1 272 3 is_stmt 1 view .LVU88
 273:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 286              		.loc 1 273 18 is_stmt 0 view .LVU89
 287 004b 4829D0   		subq	%rdx, %rax
 288 004e 4885D2   		testq	%rdx, %rdx
 289 0051 480F45D8 		cmovne	%rax, %rbx
 290              	.LVL29:
 276:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 291              		.loc 1 276 3 is_stmt 1 view .LVU90
 276:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 292              		.loc 1 276 6 is_stmt 0 view .LVU91
 293 0055 4183FC01 		cmpl	$1, %r12d
 294 0059 7619     		jbe	.L14
 277:fltk-1.3.4-1/jpeg/jmemmgr.c ****   prev_hdr_ptr = NULL;
 295              		.loc 1 277 5 is_stmt 1 view .LVU92
 296 005b 498B07   		movq	(%r15), %rax
 297 005e 4C89FF   		movq	%r15, %rdi
 298 0061 C740280F 		movl	$15, 40(%rax)
 298      000000
 299 0068 498B07   		movq	(%r15), %rax
 300 006b 4489602C 		movl	%r12d, 44(%rax)
 301 006f 498B07   		movq	(%r15), %rax
 302 0072 FF10     		call	*(%rax)
 303              	.LVL30:
 304              	.L14:
 278:fltk-1.3.4-1/jpeg/jmemmgr.c ****   hdr_ptr = mem->small_list[pool_id];
 305              		.loc 1 278 3 view .LVU93
 279:fltk-1.3.4-1/jpeg/jmemmgr.c ****   while (hdr_ptr != NULL) {
 306              		.loc 1 279 3 view .LVU94
 307 0074 4963F4   		movslq	%r12d, %rsi
 308 0077 488D44F5 		leaq	0(%rbp,%rsi,8), %rax
 308      00
 309 007c 48890424 		movq	%rax, (%rsp)
 279:fltk-1.3.4-1/jpeg/jmemmgr.c ****   while (hdr_ptr != NULL) {
 310              		.loc 1 279 11 is_stmt 0 view .LVU95
 311 0080 488B4068 		movq	104(%rax), %rax
 312              	.LVL31:
 280:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 313              		.loc 1 280 3 is_stmt 1 view .LVU96
 280:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 314              		.loc 1 280 9 view .LVU97
 315 0084 4885C0   		testq	%rax, %rax
 316 0087 7512     		jne	.L17
 317 0089 E9F90000 		jmp	.L30
 317      00
 318 008e 6690     		.p2align 4,,10
 319              		.p2align 3
 320              	.L32:
 283:fltk-1.3.4-1/jpeg/jmemmgr.c ****     hdr_ptr = hdr_ptr->hdr.next;
 321              		.loc 1 283 5 view .LVU98
 322              	.LVL32:
 284:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 323              		.loc 1 284 5 view .LVU99
 284:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 324              		.loc 1 284 13 is_stmt 0 view .LVU100
 325 0090 488B08   		movq	(%rax), %rcx
 326              	.LVL33:
 280:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 327              		.loc 1 280 9 is_stmt 1 view .LVU101
 328 0093 4885C9   		testq	%rcx, %rcx
 329 0096 7438     		je	.L31
 280:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 330              		.loc 1 280 9 is_stmt 0 view .LVU102
 331 0098 4889C8   		movq	%rcx, %rax
 332              	.LVL34:
 333              	.L17:
 281:fltk-1.3.4-1/jpeg/jmemmgr.c ****       break;			/* found pool with enough space */
 334              		.loc 1 281 5 is_stmt 1 view .LVU103
 281:fltk-1.3.4-1/jpeg/jmemmgr.c ****       break;			/* found pool with enough space */
 335              		.loc 1 281 21 is_stmt 0 view .LVU104
 336 009b 488B4810 		movq	16(%rax), %rcx
 281:fltk-1.3.4-1/jpeg/jmemmgr.c ****       break;			/* found pool with enough space */
 337              		.loc 1 281 8 view .LVU105
 338 009f 4839D9   		cmpq	%rbx, %rcx
 339 00a2 72EC     		jb	.L32
 340              	.LVL35:
 341              	.L16:
 319:fltk-1.3.4-1/jpeg/jmemmgr.c ****   data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 342              		.loc 1 319 3 is_stmt 1 view .LVU106
 320:fltk-1.3.4-1/jpeg/jmemmgr.c ****   hdr_ptr->hdr.bytes_used += sizeofobject;
 343              		.loc 1 320 3 view .LVU107
 320:fltk-1.3.4-1/jpeg/jmemmgr.c ****   hdr_ptr->hdr.bytes_used += sizeofobject;
 344              		.loc 1 320 27 is_stmt 0 view .LVU108
 345 00a4 488B5008 		movq	8(%rax), %rdx
 346              	.LVL36:
 321:fltk-1.3.4-1/jpeg/jmemmgr.c ****   hdr_ptr->hdr.bytes_left -= sizeofobject;
 347              		.loc 1 321 3 is_stmt 1 view .LVU109
 322:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 348              		.loc 1 322 27 is_stmt 0 view .LVU110
 349 00a8 4829D9   		subq	%rbx, %rcx
 350 00ab 48894810 		movq	%rcx, 16(%rax)
 321:fltk-1.3.4-1/jpeg/jmemmgr.c ****   hdr_ptr->hdr.bytes_left -= sizeofobject;
 351              		.loc 1 321 27 view .LVU111
 352 00af 488D341A 		leaq	(%rdx,%rbx), %rsi
 353 00b3 48897008 		movq	%rsi, 8(%rax)
 322:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 354              		.loc 1 322 3 is_stmt 1 view .LVU112
 324:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 355              		.loc 1 324 3 view .LVU113
 325:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 356              		.loc 1 325 1 is_stmt 0 view .LVU114
 357 00b7 4883C418 		addq	$24, %rsp
 358              		.cfi_remember_state
 359              		.cfi_def_cfa_offset 56
 320:fltk-1.3.4-1/jpeg/jmemmgr.c ****   hdr_ptr->hdr.bytes_used += sizeofobject;
 360              		.loc 1 320 12 view .LVU115
 361 00bb 488D4410 		leaq	24(%rax,%rdx), %rax
 361      18
 362              	.LVL37:
 325:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 363              		.loc 1 325 1 view .LVU116
 364 00c0 5B       		popq	%rbx
 365              		.cfi_def_cfa_offset 48
 366              	.LVL38:
 325:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 367              		.loc 1 325 1 view .LVU117
 368 00c1 5D       		popq	%rbp
 369              		.cfi_def_cfa_offset 40
 370              	.LVL39:
 325:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 371              		.loc 1 325 1 view .LVU118
 372 00c2 415C     		popq	%r12
 373              		.cfi_def_cfa_offset 32
 374 00c4 415D     		popq	%r13
 375              		.cfi_def_cfa_offset 24
 376 00c6 415E     		popq	%r14
 377              		.cfi_def_cfa_offset 16
 378 00c8 415F     		popq	%r15
 379              		.cfi_def_cfa_offset 8
 380              	.LVL40:
 325:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 381              		.loc 1 325 1 view .LVU119
 382 00ca C3       		ret
 383              	.LVL41:
 384 00cb 0F1F4400 		.p2align 4,,10
 384      00
 385              		.p2align 3
 386              	.L31:
 387              		.cfi_restore_state
 288:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* min_request is what we need now, slop is what will be leftover */
 388              		.loc 1 288 3 is_stmt 1 view .LVU120
 290:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (prev_hdr_ptr == NULL)	/* first pool in class? */
 389              		.loc 1 290 5 view .LVU121
 294:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Don't ask for more than MAX_ALLOC_CHUNK */
 390              		.loc 1 294 12 is_stmt 0 view .LVU122
 391 00d0 488D1500 		leaq	extra_pool_slop(%rip), %rdx
 391      000000
 392 00d7 48894424 		movq	%rax, 8(%rsp)
 392      08
 290:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (prev_hdr_ptr == NULL)	/* first pool in class? */
 393              		.loc 1 290 17 view .LVU123
 394 00dc 4C8D6B18 		leaq	24(%rbx), %r13
 395              	.LVL42:
 291:fltk-1.3.4-1/jpeg/jmemmgr.c ****       slop = first_pool_slop[pool_id];
 396              		.loc 1 291 5 is_stmt 1 view .LVU124
 294:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Don't ask for more than MAX_ALLOC_CHUNK */
 397              		.loc 1 294 7 view .LVU125
 294:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Don't ask for more than MAX_ALLOC_CHUNK */
 398              		.loc 1 294 12 is_stmt 0 view .LVU126
 399 00e0 488B0CF2 		movq	(%rdx,%rsi,8), %rcx
 400              	.LVL43:
 401              	.L23:
 296:fltk-1.3.4-1/jpeg/jmemmgr.c ****       slop = (size_t) (MAX_ALLOC_CHUNK-min_request);
 402              		.loc 1 296 5 is_stmt 1 view .LVU127
 296:fltk-1.3.4-1/jpeg/jmemmgr.c ****       slop = (size_t) (MAX_ALLOC_CHUNK-min_request);
 403              		.loc 1 296 16 is_stmt 0 view .LVU128
 404 00e4 BA00CA9A 		movl	$1000000000, %edx
 404      3B
 405 00e9 4C29EA   		subq	%r13, %rdx
 406 00ec 4839CA   		cmpq	%rcx, %rdx
 407 00ef 480F46CA 		cmovbe	%rdx, %rcx
 408              	.LVL44:
 296:fltk-1.3.4-1/jpeg/jmemmgr.c ****       slop = (size_t) (MAX_ALLOC_CHUNK-min_request);
 409              		.loc 1 296 16 view .LVU129
 410 00f3 4989CE   		movq	%rcx, %r14
 411 00f6 EB33     		jmp	.L19
 412              	.LVL45:
 413 00f8 0F1F8400 		.p2align 4,,10
 413      00000000 
 414              		.p2align 3
 415              	.L33:
 303:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (slop < MIN_SLOP)	/* give up when it gets real small */
 416              		.loc 1 303 7 is_stmt 1 view .LVU130
 303:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (slop < MIN_SLOP)	/* give up when it gets real small */
 417              		.loc 1 303 12 is_stmt 0 view .LVU131
 418 0100 4D89F4   		movq	%r14, %r12
 419 0103 49D1EC   		shrq	%r12
 420              	.LVL46:
 304:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 421              		.loc 1 304 7 is_stmt 1 view .LVU132
 304:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 422              		.loc 1 304 10 is_stmt 0 view .LVU133
 423 0106 4983FE63 		cmpq	$99, %r14
 424 010a 771C     		ja	.L21
 305:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 425              		.loc 1 305 2 is_stmt 1 view .LVU134
 426              	.LVL47:
 427              	.LBB20:
 428              	.LBI20:
 218:fltk-1.3.4-1/jpeg/jmemmgr.c **** /* Report an out-of-memory error and stop execution */
 429              		.loc 1 218 1 view .LVU135
 430              	.LBB21:
 225:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 431              		.loc 1 225 3 view .LVU136
 432 010c 498B17   		movq	(%r15), %rdx
 433 010f 4C89FF   		movq	%r15, %rdi
 434 0112 C7422838 		movl	$56, 40(%rdx)
 434      000000
 435 0119 498B17   		movq	(%r15), %rdx
 436 011c C7422C02 		movl	$2, 44(%rdx)
 436      000000
 437 0123 498B17   		movq	(%r15), %rdx
 438 0126 FF12     		call	*(%rdx)
 439              	.LVL48:
 440              	.L21:
 225:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 441              		.loc 1 225 3 is_stmt 0 view .LVU137
 442              	.LBE21:
 443              	.LBE20:
 294:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Don't ask for more than MAX_ALLOC_CHUNK */
 444              		.loc 1 294 12 view .LVU138
 445 0128 4D89E6   		movq	%r12, %r14
 446              	.LVL49:
 447              	.L19:
 299:fltk-1.3.4-1/jpeg/jmemmgr.c ****       hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 448              		.loc 1 299 5 is_stmt 1 view .LVU139
 300:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (hdr_ptr != NULL)
 449              		.loc 1 300 7 view .LVU140
 300:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (hdr_ptr != NULL)
 450              		.loc 1 300 34 is_stmt 0 view .LVU141
 451 012b 4F8D242E 		leaq	(%r14,%r13), %r12
 452 012f 4C89FF   		movq	%r15, %rdi
 453 0132 4C89E6   		movq	%r12, %rsi
 454 0135 E8000000 		call	jpeg_get_small@PLT
 454      00
 455              	.LVL50:
 301:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	break;
 456              		.loc 1 301 7 is_stmt 1 view .LVU142
 301:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	break;
 457              		.loc 1 301 10 is_stmt 0 view .LVU143
 458 013a 4885C0   		testq	%rax, %rax
 459 013d 74C1     		je	.L33
 307:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Success, initialize the new pool header and add to end of list */
 460              		.loc 1 307 5 is_stmt 1 view .LVU144
 307:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Success, initialize the new pool header and add to end of list */
 461              		.loc 1 307 32 is_stmt 0 view .LVU145
 462 013f 4C01A598 		addq	%r12, 152(%rbp)
 462      000000
 309:fltk-1.3.4-1/jpeg/jmemmgr.c ****     hdr_ptr->hdr.bytes_used = 0;
 463              		.loc 1 309 5 is_stmt 1 view .LVU146
 311:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (prev_hdr_ptr == NULL)	/* first pool in class? */
 464              		.loc 1 311 44 is_stmt 0 view .LVU147
 465 0146 4A8D1433 		leaq	(%rbx,%r14), %rdx
 312:fltk-1.3.4-1/jpeg/jmemmgr.c ****       mem->small_list[pool_id] = hdr_ptr;
 466              		.loc 1 312 8 view .LVU148
 467 014a 48837C24 		cmpq	$0, 8(%rsp)
 467      0800
 309:fltk-1.3.4-1/jpeg/jmemmgr.c ****     hdr_ptr->hdr.bytes_used = 0;
 468              		.loc 1 309 23 view .LVU149
 469 0150 48C70000 		movq	$0, (%rax)
 469      000000
 310:fltk-1.3.4-1/jpeg/jmemmgr.c ****     hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 470              		.loc 1 310 5 is_stmt 1 view .LVU150
 310:fltk-1.3.4-1/jpeg/jmemmgr.c ****     hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 471              		.loc 1 310 29 is_stmt 0 view .LVU151
 472 0157 48C74008 		movq	$0, 8(%rax)
 472      00000000 
 311:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (prev_hdr_ptr == NULL)	/* first pool in class? */
 473              		.loc 1 311 5 is_stmt 1 view .LVU152
 311:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (prev_hdr_ptr == NULL)	/* first pool in class? */
 474              		.loc 1 311 44 is_stmt 0 view .LVU153
 475 015f 48895010 		movq	%rdx, 16(%rax)
 312:fltk-1.3.4-1/jpeg/jmemmgr.c ****       mem->small_list[pool_id] = hdr_ptr;
 476              		.loc 1 312 5 is_stmt 1 view .LVU154
 312:fltk-1.3.4-1/jpeg/jmemmgr.c ****       mem->small_list[pool_id] = hdr_ptr;
 477              		.loc 1 312 8 is_stmt 0 view .LVU155
 478 0163 7411     		je	.L34
 315:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 479              		.loc 1 315 7 is_stmt 1 view .LVU156
 315:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 480              		.loc 1 315 30 is_stmt 0 view .LVU157
 481 0165 488B7C24 		movq	8(%rsp), %rdi
 481      08
 482 016a 488907   		movq	%rax, (%rdi)
 483 016d 488B4810 		movq	16(%rax), %rcx
 484 0171 E92EFFFF 		jmp	.L16
 484      FF
 485              	.L34:
 313:fltk-1.3.4-1/jpeg/jmemmgr.c ****     else
 486              		.loc 1 313 7 is_stmt 1 view .LVU158
 313:fltk-1.3.4-1/jpeg/jmemmgr.c ****     else
 487              		.loc 1 313 32 is_stmt 0 view .LVU159
 488 0176 488B3C24 		movq	(%rsp), %rdi
 489 017a 48894768 		movq	%rax, 104(%rdi)
 490 017e 488B4810 		movq	16(%rax), %rcx
 491 0182 E91DFFFF 		jmp	.L16
 491      FF
 492              	.LVL51:
 493              	.L30:
 288:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* min_request is what we need now, slop is what will be leftover */
 494              		.loc 1 288 3 is_stmt 1 view .LVU160
 290:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (prev_hdr_ptr == NULL)	/* first pool in class? */
 495              		.loc 1 290 5 view .LVU161
 292:fltk-1.3.4-1/jpeg/jmemmgr.c ****     else
 496              		.loc 1 292 12 is_stmt 0 view .LVU162
 497 0187 488D0500 		leaq	first_pool_slop(%rip), %rax
 497      000000
 498              	.LVL52:
 290:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (prev_hdr_ptr == NULL)	/* first pool in class? */
 499              		.loc 1 290 17 view .LVU163
 500 018e 4C8D6B18 		leaq	24(%rbx), %r13
 501              	.LVL53:
 291:fltk-1.3.4-1/jpeg/jmemmgr.c ****       slop = first_pool_slop[pool_id];
 502              		.loc 1 291 5 is_stmt 1 view .LVU164
 292:fltk-1.3.4-1/jpeg/jmemmgr.c ****     else
 503              		.loc 1 292 7 view .LVU165
 504 0192 48C74424 		movq	$0, 8(%rsp)
 504      08000000 
 504      00
 292:fltk-1.3.4-1/jpeg/jmemmgr.c ****     else
 505              		.loc 1 292 12 is_stmt 0 view .LVU166
 506 019b 488B0CF0 		movq	(%rax,%rsi,8), %rcx
 507              	.LVL54:
 292:fltk-1.3.4-1/jpeg/jmemmgr.c ****     else
 508              		.loc 1 292 12 view .LVU167
 509 019f E940FFFF 		jmp	.L23
 509      FF
 510              		.cfi_endproc
 511              	.LFE52:
 513              		.section	.text.request_virt_barray,"ax",@progbits
 514              		.p2align 4
 516              	request_virt_barray:
 517              	.LVL55:
 518              	.LFB57:
 558:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 519              		.loc 1 558 1 is_stmt 1 view -0
 520              		.cfi_startproc
 558:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 521              		.loc 1 558 1 is_stmt 0 view .LVU169
 522 0000 F30F1EFA 		endbr64
 559:fltk-1.3.4-1/jpeg/jmemmgr.c ****   jvirt_barray_ptr result;
 523              		.loc 1 559 3 is_stmt 1 view .LVU170
 558:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 524              		.loc 1 558 1 is_stmt 0 view .LVU171
 525 0004 4157     		pushq	%r15
 526              		.cfi_def_cfa_offset 16
 527              		.cfi_offset 15, -16
 528 0006 4189F7   		movl	%esi, %r15d
 529 0009 4156     		pushq	%r14
 530              		.cfi_def_cfa_offset 24
 531              		.cfi_offset 14, -24
 532 000b 4989FE   		movq	%rdi, %r14
 533 000e 4155     		pushq	%r13
 534              		.cfi_def_cfa_offset 32
 535              		.cfi_offset 13, -32
 536 0010 4589C5   		movl	%r8d, %r13d
 537 0013 4154     		pushq	%r12
 538              		.cfi_def_cfa_offset 40
 539              		.cfi_offset 12, -40
 540 0015 4189CC   		movl	%ecx, %r12d
 541 0018 55       		pushq	%rbp
 542              		.cfi_def_cfa_offset 48
 543              		.cfi_offset 6, -48
 544 0019 4489CD   		movl	%r9d, %ebp
 545 001c 53       		pushq	%rbx
 546              		.cfi_def_cfa_offset 56
 547              		.cfi_offset 3, -56
 548 001d 4883EC18 		subq	$24, %rsp
 549              		.cfi_def_cfa_offset 80
 559:fltk-1.3.4-1/jpeg/jmemmgr.c ****   jvirt_barray_ptr result;
 550              		.loc 1 559 14 view .LVU172
 551 0021 488B5F08 		movq	8(%rdi), %rbx
 552              	.LVL56:
 560:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 553              		.loc 1 560 3 is_stmt 1 view .LVU173
 563:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 554              		.loc 1 563 3 view .LVU174
 558:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 555              		.loc 1 558 1 is_stmt 0 view .LVU175
 556 0025 8954240C 		movl	%edx, 12(%rsp)
 563:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 557              		.loc 1 563 6 view .LVU176
 558 0029 83FE01   		cmpl	$1, %esi
 559 002c 7415     		je	.L36
 564:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 560              		.loc 1 564 5 is_stmt 1 view .LVU177
 561 002e 488B07   		movq	(%rdi), %rax
 562 0031 C740280F 		movl	$15, 40(%rax)
 562      000000
 563 0038 488B07   		movq	(%rdi), %rax
 564 003b 89702C   		movl	%esi, 44(%rax)
 565 003e 488B07   		movq	(%rdi), %rax
 566 0041 FF10     		call	*(%rax)
 567              	.LVL57:
 568              	.L36:
 567:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					  SIZEOF(struct jvirt_barray_control));
 569              		.loc 1 567 3 view .LVU178
 567:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					  SIZEOF(struct jvirt_barray_control));
 570              		.loc 1 567 31 is_stmt 0 view .LVU179
 571 0043 BA980000 		movl	$152, %edx
 571      00
 572 0048 4489FE   		movl	%r15d, %esi
 573 004b 4C89F7   		movq	%r14, %rdi
 574 004e E8000000 		call	alloc_small
 574      00
 575              	.LVL58:
 570:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->rows_in_array = numrows;
 576              		.loc 1 570 3 is_stmt 1 view .LVU180
 574:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->b_s_open = FALSE;	/* no associated backing-store object */
 577              		.loc 1 574 20 is_stmt 0 view .LVU181
 578 0053 8B4C240C 		movl	12(%rsp), %ecx
 570:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->rows_in_array = numrows;
 579              		.loc 1 570 22 view .LVU182
 580 0057 48C70000 		movq	$0, (%rax)
 580      000000
 571:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->blocksperrow = blocksperrow;
 581              		.loc 1 571 3 is_stmt 1 view .LVU183
 571:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->blocksperrow = blocksperrow;
 582              		.loc 1 571 25 is_stmt 0 view .LVU184
 583 005e 44896808 		movl	%r13d, 8(%rax)
 572:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->maxaccess = maxaccess;
 584              		.loc 1 572 3 is_stmt 1 view .LVU185
 572:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->maxaccess = maxaccess;
 585              		.loc 1 572 24 is_stmt 0 view .LVU186
 586 0062 4489600C 		movl	%r12d, 12(%rax)
 573:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->pre_zero = pre_zero;
 587              		.loc 1 573 3 is_stmt 1 view .LVU187
 573:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->pre_zero = pre_zero;
 588              		.loc 1 573 21 is_stmt 0 view .LVU188
 589 0066 896810   		movl	%ebp, 16(%rax)
 574:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->b_s_open = FALSE;	/* no associated backing-store object */
 590              		.loc 1 574 3 is_stmt 1 view .LVU189
 574:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->b_s_open = FALSE;	/* no associated backing-store object */
 591              		.loc 1 574 20 is_stmt 0 view .LVU190
 592 0069 894824   		movl	%ecx, 36(%rax)
 575:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 593              		.loc 1 575 3 is_stmt 1 view .LVU191
 575:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 594              		.loc 1 575 20 is_stmt 0 view .LVU192
 595 006c C7402C00 		movl	$0, 44(%rax)
 595      000000
 576:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->virt_barray_list = result;
 596              		.loc 1 576 3 is_stmt 1 view .LVU193
 576:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->virt_barray_list = result;
 597              		.loc 1 576 21 is_stmt 0 view .LVU194
 598 0073 488B9390 		movq	144(%rbx), %rdx
 598      000000
 576:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->virt_barray_list = result;
 599              		.loc 1 576 16 view .LVU195
 600 007a 48895030 		movq	%rdx, 48(%rax)
 577:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 601              		.loc 1 577 3 is_stmt 1 view .LVU196
 577:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 602              		.loc 1 577 25 is_stmt 0 view .LVU197
 603 007e 48898390 		movq	%rax, 144(%rbx)
 603      000000
 579:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 604              		.loc 1 579 3 is_stmt 1 view .LVU198
 580:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 605              		.loc 1 580 1 is_stmt 0 view .LVU199
 606 0085 4883C418 		addq	$24, %rsp
 607              		.cfi_def_cfa_offset 56
 608 0089 5B       		popq	%rbx
 609              		.cfi_def_cfa_offset 48
 610              	.LVL59:
 580:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 611              		.loc 1 580 1 view .LVU200
 612 008a 5D       		popq	%rbp
 613              		.cfi_def_cfa_offset 40
 614              	.LVL60:
 580:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 615              		.loc 1 580 1 view .LVU201
 616 008b 415C     		popq	%r12
 617              		.cfi_def_cfa_offset 32
 618              	.LVL61:
 580:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 619              		.loc 1 580 1 view .LVU202
 620 008d 415D     		popq	%r13
 621              		.cfi_def_cfa_offset 24
 622              	.LVL62:
 580:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 623              		.loc 1 580 1 view .LVU203
 624 008f 415E     		popq	%r14
 625              		.cfi_def_cfa_offset 16
 626              	.LVL63:
 580:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 627              		.loc 1 580 1 view .LVU204
 628 0091 415F     		popq	%r15
 629              		.cfi_def_cfa_offset 8
 630              	.LVL64:
 580:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 631              		.loc 1 580 1 view .LVU205
 632 0093 C3       		ret
 633              		.cfi_endproc
 634              	.LFE57:
 636              		.section	.text.request_virt_sarray,"ax",@progbits
 637              		.p2align 4
 639              	request_virt_sarray:
 640              	.LVL65:
 641              	.LFB56:
 528:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 642              		.loc 1 528 1 is_stmt 1 view -0
 643              		.cfi_startproc
 528:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 644              		.loc 1 528 1 is_stmt 0 view .LVU207
 645 0000 F30F1EFA 		endbr64
 529:fltk-1.3.4-1/jpeg/jmemmgr.c ****   jvirt_sarray_ptr result;
 646              		.loc 1 529 3 is_stmt 1 view .LVU208
 528:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 647              		.loc 1 528 1 is_stmt 0 view .LVU209
 648 0004 4157     		pushq	%r15
 649              		.cfi_def_cfa_offset 16
 650              		.cfi_offset 15, -16
 651 0006 4189F7   		movl	%esi, %r15d
 652 0009 4156     		pushq	%r14
 653              		.cfi_def_cfa_offset 24
 654              		.cfi_offset 14, -24
 655 000b 4989FE   		movq	%rdi, %r14
 656 000e 4155     		pushq	%r13
 657              		.cfi_def_cfa_offset 32
 658              		.cfi_offset 13, -32
 659 0010 4589C5   		movl	%r8d, %r13d
 660 0013 4154     		pushq	%r12
 661              		.cfi_def_cfa_offset 40
 662              		.cfi_offset 12, -40
 663 0015 4189CC   		movl	%ecx, %r12d
 664 0018 55       		pushq	%rbp
 665              		.cfi_def_cfa_offset 48
 666              		.cfi_offset 6, -48
 667 0019 4489CD   		movl	%r9d, %ebp
 668 001c 53       		pushq	%rbx
 669              		.cfi_def_cfa_offset 56
 670              		.cfi_offset 3, -56
 671 001d 4883EC18 		subq	$24, %rsp
 672              		.cfi_def_cfa_offset 80
 529:fltk-1.3.4-1/jpeg/jmemmgr.c ****   jvirt_sarray_ptr result;
 673              		.loc 1 529 14 view .LVU210
 674 0021 488B5F08 		movq	8(%rdi), %rbx
 675              	.LVL66:
 530:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 676              		.loc 1 530 3 is_stmt 1 view .LVU211
 533:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 677              		.loc 1 533 3 view .LVU212
 528:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 678              		.loc 1 528 1 is_stmt 0 view .LVU213
 679 0025 8954240C 		movl	%edx, 12(%rsp)
 533:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 680              		.loc 1 533 6 view .LVU214
 681 0029 83FE01   		cmpl	$1, %esi
 682 002c 7415     		je	.L42
 534:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 683              		.loc 1 534 5 is_stmt 1 view .LVU215
 684 002e 488B07   		movq	(%rdi), %rax
 685 0031 C740280F 		movl	$15, 40(%rax)
 685      000000
 686 0038 488B07   		movq	(%rdi), %rax
 687 003b 89702C   		movl	%esi, 44(%rax)
 688 003e 488B07   		movq	(%rdi), %rax
 689 0041 FF10     		call	*(%rax)
 690              	.LVL67:
 691              	.L42:
 537:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					  SIZEOF(struct jvirt_sarray_control));
 692              		.loc 1 537 3 view .LVU216
 537:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					  SIZEOF(struct jvirt_sarray_control));
 693              		.loc 1 537 31 is_stmt 0 view .LVU217
 694 0043 BA980000 		movl	$152, %edx
 694      00
 695 0048 4489FE   		movl	%r15d, %esi
 696 004b 4C89F7   		movq	%r14, %rdi
 697 004e E8000000 		call	alloc_small
 697      00
 698              	.LVL68:
 540:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->rows_in_array = numrows;
 699              		.loc 1 540 3 is_stmt 1 view .LVU218
 544:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->b_s_open = FALSE;	/* no associated backing-store object */
 700              		.loc 1 544 20 is_stmt 0 view .LVU219
 701 0053 8B4C240C 		movl	12(%rsp), %ecx
 540:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->rows_in_array = numrows;
 702              		.loc 1 540 22 view .LVU220
 703 0057 48C70000 		movq	$0, (%rax)
 703      000000
 541:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->samplesperrow = samplesperrow;
 704              		.loc 1 541 3 is_stmt 1 view .LVU221
 541:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->samplesperrow = samplesperrow;
 705              		.loc 1 541 25 is_stmt 0 view .LVU222
 706 005e 44896808 		movl	%r13d, 8(%rax)
 542:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->maxaccess = maxaccess;
 707              		.loc 1 542 3 is_stmt 1 view .LVU223
 542:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->maxaccess = maxaccess;
 708              		.loc 1 542 25 is_stmt 0 view .LVU224
 709 0062 4489600C 		movl	%r12d, 12(%rax)
 543:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->pre_zero = pre_zero;
 710              		.loc 1 543 3 is_stmt 1 view .LVU225
 543:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->pre_zero = pre_zero;
 711              		.loc 1 543 21 is_stmt 0 view .LVU226
 712 0066 896810   		movl	%ebp, 16(%rax)
 544:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->b_s_open = FALSE;	/* no associated backing-store object */
 713              		.loc 1 544 3 is_stmt 1 view .LVU227
 544:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->b_s_open = FALSE;	/* no associated backing-store object */
 714              		.loc 1 544 20 is_stmt 0 view .LVU228
 715 0069 894824   		movl	%ecx, 36(%rax)
 545:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 716              		.loc 1 545 3 is_stmt 1 view .LVU229
 545:fltk-1.3.4-1/jpeg/jmemmgr.c ****   result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 717              		.loc 1 545 20 is_stmt 0 view .LVU230
 718 006c C7402C00 		movl	$0, 44(%rax)
 718      000000
 546:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->virt_sarray_list = result;
 719              		.loc 1 546 3 is_stmt 1 view .LVU231
 546:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->virt_sarray_list = result;
 720              		.loc 1 546 21 is_stmt 0 view .LVU232
 721 0073 488B9388 		movq	136(%rbx), %rdx
 721      000000
 546:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->virt_sarray_list = result;
 722              		.loc 1 546 16 view .LVU233
 723 007a 48895030 		movq	%rdx, 48(%rax)
 547:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 724              		.loc 1 547 3 is_stmt 1 view .LVU234
 547:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 725              		.loc 1 547 25 is_stmt 0 view .LVU235
 726 007e 48898388 		movq	%rax, 136(%rbx)
 726      000000
 549:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 727              		.loc 1 549 3 is_stmt 1 view .LVU236
 550:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 728              		.loc 1 550 1 is_stmt 0 view .LVU237
 729 0085 4883C418 		addq	$24, %rsp
 730              		.cfi_def_cfa_offset 56
 731 0089 5B       		popq	%rbx
 732              		.cfi_def_cfa_offset 48
 733              	.LVL69:
 550:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 734              		.loc 1 550 1 view .LVU238
 735 008a 5D       		popq	%rbp
 736              		.cfi_def_cfa_offset 40
 737              	.LVL70:
 550:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 738              		.loc 1 550 1 view .LVU239
 739 008b 415C     		popq	%r12
 740              		.cfi_def_cfa_offset 32
 741              	.LVL71:
 550:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 742              		.loc 1 550 1 view .LVU240
 743 008d 415D     		popq	%r13
 744              		.cfi_def_cfa_offset 24
 745              	.LVL72:
 550:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 746              		.loc 1 550 1 view .LVU241
 747 008f 415E     		popq	%r14
 748              		.cfi_def_cfa_offset 16
 749              	.LVL73:
 550:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 750              		.loc 1 550 1 view .LVU242
 751 0091 415F     		popq	%r15
 752              		.cfi_def_cfa_offset 8
 753              	.LVL74:
 550:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 754              		.loc 1 550 1 view .LVU243
 755 0093 C3       		ret
 756              		.cfi_endproc
 757              	.LFE56:
 759              		.section	.text.free_pool,"ax",@progbits
 760              		.p2align 4
 762              	free_pool:
 763              	.LVL75:
 764              	.LFB63:
 754:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 755:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 756:fltk-1.3.4-1/jpeg/jmemmgr.c **** METHODDEF(JSAMPARRAY)
 757:fltk-1.3.4-1/jpeg/jmemmgr.c **** access_virt_sarray (j_common_ptr cinfo, jvirt_sarray_ptr ptr,
 758:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		    JDIMENSION start_row, JDIMENSION num_rows,
 759:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		    boolean writable)
 760:fltk-1.3.4-1/jpeg/jmemmgr.c **** /* Access the part of a virtual sample array starting at start_row */
 761:fltk-1.3.4-1/jpeg/jmemmgr.c **** /* and extending for num_rows rows.  writable is true if  */
 762:fltk-1.3.4-1/jpeg/jmemmgr.c **** /* caller intends to modify the accessed area. */
 763:fltk-1.3.4-1/jpeg/jmemmgr.c **** {
 764:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION end_row = start_row + num_rows;
 765:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION undef_row;
 766:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 767:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* debugging check */
 768:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 769:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->mem_buffer == NULL)
 770:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 771:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 772:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Make the desired part of the virtual array accessible */
 773:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (start_row < ptr->cur_start_row ||
 774:fltk-1.3.4-1/jpeg/jmemmgr.c ****       end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 775:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (! ptr->b_s_open)
 776:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 777:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Flush old buffer contents if necessary */
 778:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (ptr->dirty) {
 779:fltk-1.3.4-1/jpeg/jmemmgr.c ****       do_sarray_io(cinfo, ptr, TRUE);
 780:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->dirty = FALSE;
 781:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 782:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Decide what part of virtual array to access.
 783:fltk-1.3.4-1/jpeg/jmemmgr.c ****      * Algorithm: if target address > current window, assume forward scan,
 784:fltk-1.3.4-1/jpeg/jmemmgr.c ****      * load starting at target address.  If target address < current window,
 785:fltk-1.3.4-1/jpeg/jmemmgr.c ****      * assume backward scan, load so that target area is top of window.
 786:fltk-1.3.4-1/jpeg/jmemmgr.c ****      * Note that when switching from forward write to forward read, will have
 787:fltk-1.3.4-1/jpeg/jmemmgr.c ****      * start_row = 0, so the limiting case applies and we load from 0 anyway.
 788:fltk-1.3.4-1/jpeg/jmemmgr.c ****      */
 789:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (start_row > ptr->cur_start_row) {
 790:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->cur_start_row = start_row;
 791:fltk-1.3.4-1/jpeg/jmemmgr.c ****     } else {
 792:fltk-1.3.4-1/jpeg/jmemmgr.c ****       /* use long arithmetic here to avoid overflow & unsigned problems */
 793:fltk-1.3.4-1/jpeg/jmemmgr.c ****       long ltemp;
 794:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 795:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ltemp = (long) end_row - (long) ptr->rows_in_mem;
 796:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (ltemp < 0)
 797:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	ltemp = 0;		/* don't fall off front end of file */
 798:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->cur_start_row = (JDIMENSION) ltemp;
 799:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 800:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Read in the selected part of the array.
 801:fltk-1.3.4-1/jpeg/jmemmgr.c ****      * During the initial write pass, we will do no actual read
 802:fltk-1.3.4-1/jpeg/jmemmgr.c ****      * because the selected part is all undefined.
 803:fltk-1.3.4-1/jpeg/jmemmgr.c ****      */
 804:fltk-1.3.4-1/jpeg/jmemmgr.c ****     do_sarray_io(cinfo, ptr, FALSE);
 805:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 806:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Ensure the accessed part of the array is defined; prezero if needed.
 807:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * To improve locality of access, we only prezero the part of the array
 808:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * that the caller is about to access, not the entire in-memory array.
 809:fltk-1.3.4-1/jpeg/jmemmgr.c ****    */
 810:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (ptr->first_undef_row < end_row) {
 811:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (ptr->first_undef_row < start_row) {
 812:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (writable)		/* writer skipped over a section of array */
 813:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 814:fltk-1.3.4-1/jpeg/jmemmgr.c ****       undef_row = start_row;	/* but reader is allowed to read ahead */
 815:fltk-1.3.4-1/jpeg/jmemmgr.c ****     } else {
 816:fltk-1.3.4-1/jpeg/jmemmgr.c ****       undef_row = ptr->first_undef_row;
 817:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 818:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (writable)
 819:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->first_undef_row = end_row;
 820:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (ptr->pre_zero) {
 821:fltk-1.3.4-1/jpeg/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 822:fltk-1.3.4-1/jpeg/jmemmgr.c ****       undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 823:fltk-1.3.4-1/jpeg/jmemmgr.c ****       end_row -= ptr->cur_start_row;
 824:fltk-1.3.4-1/jpeg/jmemmgr.c ****       while (undef_row < end_row) {
 825:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 826:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	undef_row++;
 827:fltk-1.3.4-1/jpeg/jmemmgr.c ****       }
 828:fltk-1.3.4-1/jpeg/jmemmgr.c ****     } else {
 829:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (! writable)		/* reader looking at undefined data */
 830:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 831:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 832:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 833:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Flag the buffer dirty if caller will write in it */
 834:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (writable)
 835:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ptr->dirty = TRUE;
 836:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Return address of proper part of the buffer */
 837:fltk-1.3.4-1/jpeg/jmemmgr.c ****   return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 838:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 839:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 840:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 841:fltk-1.3.4-1/jpeg/jmemmgr.c **** METHODDEF(JBLOCKARRAY)
 842:fltk-1.3.4-1/jpeg/jmemmgr.c **** access_virt_barray (j_common_ptr cinfo, jvirt_barray_ptr ptr,
 843:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		    JDIMENSION start_row, JDIMENSION num_rows,
 844:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		    boolean writable)
 845:fltk-1.3.4-1/jpeg/jmemmgr.c **** /* Access the part of a virtual block array starting at start_row */
 846:fltk-1.3.4-1/jpeg/jmemmgr.c **** /* and extending for num_rows rows.  writable is true if  */
 847:fltk-1.3.4-1/jpeg/jmemmgr.c **** /* caller intends to modify the accessed area. */
 848:fltk-1.3.4-1/jpeg/jmemmgr.c **** {
 849:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION end_row = start_row + num_rows;
 850:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION undef_row;
 851:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 852:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* debugging check */
 853:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 854:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->mem_buffer == NULL)
 855:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 856:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 857:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Make the desired part of the virtual array accessible */
 858:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (start_row < ptr->cur_start_row ||
 859:fltk-1.3.4-1/jpeg/jmemmgr.c ****       end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 860:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (! ptr->b_s_open)
 861:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 862:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Flush old buffer contents if necessary */
 863:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (ptr->dirty) {
 864:fltk-1.3.4-1/jpeg/jmemmgr.c ****       do_barray_io(cinfo, ptr, TRUE);
 865:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->dirty = FALSE;
 866:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 867:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Decide what part of virtual array to access.
 868:fltk-1.3.4-1/jpeg/jmemmgr.c ****      * Algorithm: if target address > current window, assume forward scan,
 869:fltk-1.3.4-1/jpeg/jmemmgr.c ****      * load starting at target address.  If target address < current window,
 870:fltk-1.3.4-1/jpeg/jmemmgr.c ****      * assume backward scan, load so that target area is top of window.
 871:fltk-1.3.4-1/jpeg/jmemmgr.c ****      * Note that when switching from forward write to forward read, will have
 872:fltk-1.3.4-1/jpeg/jmemmgr.c ****      * start_row = 0, so the limiting case applies and we load from 0 anyway.
 873:fltk-1.3.4-1/jpeg/jmemmgr.c ****      */
 874:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (start_row > ptr->cur_start_row) {
 875:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->cur_start_row = start_row;
 876:fltk-1.3.4-1/jpeg/jmemmgr.c ****     } else {
 877:fltk-1.3.4-1/jpeg/jmemmgr.c ****       /* use long arithmetic here to avoid overflow & unsigned problems */
 878:fltk-1.3.4-1/jpeg/jmemmgr.c ****       long ltemp;
 879:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 880:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ltemp = (long) end_row - (long) ptr->rows_in_mem;
 881:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (ltemp < 0)
 882:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	ltemp = 0;		/* don't fall off front end of file */
 883:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->cur_start_row = (JDIMENSION) ltemp;
 884:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 885:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Read in the selected part of the array.
 886:fltk-1.3.4-1/jpeg/jmemmgr.c ****      * During the initial write pass, we will do no actual read
 887:fltk-1.3.4-1/jpeg/jmemmgr.c ****      * because the selected part is all undefined.
 888:fltk-1.3.4-1/jpeg/jmemmgr.c ****      */
 889:fltk-1.3.4-1/jpeg/jmemmgr.c ****     do_barray_io(cinfo, ptr, FALSE);
 890:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 891:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Ensure the accessed part of the array is defined; prezero if needed.
 892:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * To improve locality of access, we only prezero the part of the array
 893:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * that the caller is about to access, not the entire in-memory array.
 894:fltk-1.3.4-1/jpeg/jmemmgr.c ****    */
 895:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (ptr->first_undef_row < end_row) {
 896:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (ptr->first_undef_row < start_row) {
 897:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (writable)		/* writer skipped over a section of array */
 898:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 899:fltk-1.3.4-1/jpeg/jmemmgr.c ****       undef_row = start_row;	/* but reader is allowed to read ahead */
 900:fltk-1.3.4-1/jpeg/jmemmgr.c ****     } else {
 901:fltk-1.3.4-1/jpeg/jmemmgr.c ****       undef_row = ptr->first_undef_row;
 902:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 903:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (writable)
 904:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->first_undef_row = end_row;
 905:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (ptr->pre_zero) {
 906:fltk-1.3.4-1/jpeg/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 907:fltk-1.3.4-1/jpeg/jmemmgr.c ****       undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 908:fltk-1.3.4-1/jpeg/jmemmgr.c ****       end_row -= ptr->cur_start_row;
 909:fltk-1.3.4-1/jpeg/jmemmgr.c ****       while (undef_row < end_row) {
 910:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 911:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	undef_row++;
 912:fltk-1.3.4-1/jpeg/jmemmgr.c ****       }
 913:fltk-1.3.4-1/jpeg/jmemmgr.c ****     } else {
 914:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (! writable)		/* reader looking at undefined data */
 915:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 916:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 917:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 918:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Flag the buffer dirty if caller will write in it */
 919:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (writable)
 920:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ptr->dirty = TRUE;
 921:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Return address of proper part of the buffer */
 922:fltk-1.3.4-1/jpeg/jmemmgr.c ****   return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 923:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 924:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 925:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 926:fltk-1.3.4-1/jpeg/jmemmgr.c **** /*
 927:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * Release all objects belonging to a specified pool.
 928:fltk-1.3.4-1/jpeg/jmemmgr.c ****  */
 929:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 930:fltk-1.3.4-1/jpeg/jmemmgr.c **** METHODDEF(void)
 931:fltk-1.3.4-1/jpeg/jmemmgr.c **** free_pool (j_common_ptr cinfo, int pool_id)
 932:fltk-1.3.4-1/jpeg/jmemmgr.c **** {
 765              		.loc 1 932 1 is_stmt 1 view -0
 766              		.cfi_startproc
 767              		.loc 1 932 1 is_stmt 0 view .LVU245
 768 0000 F30F1EFA 		endbr64
 933:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 769              		.loc 1 933 3 is_stmt 1 view .LVU246
 932:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 770              		.loc 1 932 1 is_stmt 0 view .LVU247
 771 0004 4156     		pushq	%r14
 772              		.cfi_def_cfa_offset 16
 773              		.cfi_offset 14, -16
 774 0006 4155     		pushq	%r13
 775              		.cfi_def_cfa_offset 24
 776              		.cfi_offset 13, -24
 777 0008 4C63EE   		movslq	%esi, %r13
 778 000b 4154     		pushq	%r12
 779              		.cfi_def_cfa_offset 32
 780              		.cfi_offset 12, -32
 781 000d 4989FC   		movq	%rdi, %r12
 782 0010 55       		pushq	%rbp
 783              		.cfi_def_cfa_offset 40
 784              		.cfi_offset 6, -40
 785 0011 53       		pushq	%rbx
 786              		.cfi_def_cfa_offset 48
 787              		.cfi_offset 3, -48
 788              		.loc 1 933 14 view .LVU248
 789 0012 488B6F08 		movq	8(%rdi), %rbp
 790              	.LVL76:
 934:fltk-1.3.4-1/jpeg/jmemmgr.c ****   small_pool_ptr shdr_ptr;
 791              		.loc 1 934 3 is_stmt 1 view .LVU249
 935:fltk-1.3.4-1/jpeg/jmemmgr.c ****   large_pool_ptr lhdr_ptr;
 792              		.loc 1 935 3 view .LVU250
 936:fltk-1.3.4-1/jpeg/jmemmgr.c ****   size_t space_freed;
 793              		.loc 1 936 3 view .LVU251
 937:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 938:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 794              		.loc 1 938 3 view .LVU252
 795              		.loc 1 938 6 is_stmt 0 view .LVU253
 796 0016 4183FD01 		cmpl	$1, %r13d
 797 001a 0F86A800 		jbe	.L48
 797      0000
 939:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 798              		.loc 1 939 5 is_stmt 1 view .LVU254
 799 0020 488B07   		movq	(%rdi), %rax
 800 0023 C740280F 		movl	$15, 40(%rax)
 800      000000
 801 002a 488B07   		movq	(%rdi), %rax
 802 002d 4489682C 		movl	%r13d, 44(%rax)
 803 0031 488B07   		movq	(%rdi), %rax
 804 0034 FF10     		call	*(%rax)
 805              	.LVL77:
 940:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 941:fltk-1.3.4-1/jpeg/jmemmgr.c **** #ifdef MEM_STATS
 942:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (cinfo->err->trace_level > 1)
 943:fltk-1.3.4-1/jpeg/jmemmgr.c ****     print_mem_stats(cinfo, pool_id); /* print pool's memory usage statistics */
 944:fltk-1.3.4-1/jpeg/jmemmgr.c **** #endif
 945:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 946:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* If freeing IMAGE pool, close any virtual arrays first */
 947:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (pool_id == JPOOL_IMAGE) {
 806              		.loc 1 947 3 view .LVU255
 807              	.L49:
 948:fltk-1.3.4-1/jpeg/jmemmgr.c ****     jvirt_sarray_ptr sptr;
 949:fltk-1.3.4-1/jpeg/jmemmgr.c ****     jvirt_barray_ptr bptr;
 950:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 951:fltk-1.3.4-1/jpeg/jmemmgr.c ****     for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 952:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (sptr->b_s_open) {	/* there may be no backing store */
 953:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 954:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 955:fltk-1.3.4-1/jpeg/jmemmgr.c ****       }
 956:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 957:fltk-1.3.4-1/jpeg/jmemmgr.c ****     mem->virt_sarray_list = NULL;
 958:fltk-1.3.4-1/jpeg/jmemmgr.c ****     for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 959:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (bptr->b_s_open) {	/* there may be no backing store */
 960:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 961:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 962:fltk-1.3.4-1/jpeg/jmemmgr.c ****       }
 963:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 964:fltk-1.3.4-1/jpeg/jmemmgr.c ****     mem->virt_barray_list = NULL;
 965:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 966:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 967:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Release large objects */
 968:fltk-1.3.4-1/jpeg/jmemmgr.c ****   lhdr_ptr = mem->large_list[pool_id];
 808              		.loc 1 968 3 view .LVU256
 809 0036 4E8D6CED 		leaq	0(%rbp,%r13,8), %r13
 809      00
 810              	.LVL78:
 811              		.loc 1 968 12 is_stmt 0 view .LVU257
 812 003b 4D8B7578 		movq	120(%r13), %r14
 813              	.LVL79:
 969:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->large_list[pool_id] = NULL;
 814              		.loc 1 969 3 is_stmt 1 view .LVU258
 815              		.loc 1 969 28 is_stmt 0 view .LVU259
 816 003f 49C74578 		movq	$0, 120(%r13)
 816      00000000 
 970:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 971:fltk-1.3.4-1/jpeg/jmemmgr.c ****   while (lhdr_ptr != NULL) {
 817              		.loc 1 971 3 is_stmt 1 view .LVU260
 818              		.loc 1 971 9 view .LVU261
 819 0047 4D85F6   		testq	%r14, %r14
 820 004a 742D     		je	.L56
 821 004c 0F1F4000 		.p2align 4,,10
 822              		.p2align 3
 823              	.L57:
 824              	.LBB22:
 972:fltk-1.3.4-1/jpeg/jmemmgr.c ****     large_pool_ptr next_lhdr_ptr = lhdr_ptr->hdr.next;
 825              		.loc 1 972 5 view .LVU262
 826 0050 4C89F6   		movq	%r14, %rsi
 827              		.loc 1 972 20 is_stmt 0 view .LVU263
 828 0053 4D8B36   		movq	(%r14), %r14
 829              	.LVL80:
 973:fltk-1.3.4-1/jpeg/jmemmgr.c ****     space_freed = lhdr_ptr->hdr.bytes_used +
 830              		.loc 1 973 5 is_stmt 1 view .LVU264
 974:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		  lhdr_ptr->hdr.bytes_left +
 975:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		  SIZEOF(large_pool_hdr);
 976:fltk-1.3.4-1/jpeg/jmemmgr.c ****     jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 831              		.loc 1 976 5 is_stmt 0 view .LVU265
 832 0056 4C89E7   		movq	%r12, %rdi
 973:fltk-1.3.4-1/jpeg/jmemmgr.c ****     space_freed = lhdr_ptr->hdr.bytes_used +
 833              		.loc 1 973 44 view .LVU266
 834 0059 488B5E10 		movq	16(%rsi), %rbx
 835 005d 48035E08 		addq	8(%rsi), %rbx
 973:fltk-1.3.4-1/jpeg/jmemmgr.c ****     space_freed = lhdr_ptr->hdr.bytes_used +
 836              		.loc 1 973 17 view .LVU267
 837 0061 4883C318 		addq	$24, %rbx
 838              	.LVL81:
 839              		.loc 1 976 5 is_stmt 1 view .LVU268
 840 0065 4889DA   		movq	%rbx, %rdx
 841 0068 E8000000 		call	jpeg_free_large@PLT
 841      00
 842              	.LVL82:
 977:fltk-1.3.4-1/jpeg/jmemmgr.c ****     mem->total_space_allocated -= space_freed;
 843              		.loc 1 977 5 view .LVU269
 844              		.loc 1 977 32 is_stmt 0 view .LVU270
 845 006d 48299D98 		subq	%rbx, 152(%rbp)
 845      000000
 978:fltk-1.3.4-1/jpeg/jmemmgr.c ****     lhdr_ptr = next_lhdr_ptr;
 846              		.loc 1 978 5 is_stmt 1 view .LVU271
 847              	.LVL83:
 848              		.loc 1 978 5 is_stmt 0 view .LVU272
 849              	.LBE22:
 971:fltk-1.3.4-1/jpeg/jmemmgr.c ****     large_pool_ptr next_lhdr_ptr = lhdr_ptr->hdr.next;
 850              		.loc 1 971 9 is_stmt 1 view .LVU273
 851 0074 4D85F6   		testq	%r14, %r14
 852 0077 75D7     		jne	.L57
 853              	.LVL84:
 854              	.L56:
 979:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 980:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 981:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Release small objects */
 982:fltk-1.3.4-1/jpeg/jmemmgr.c ****   shdr_ptr = mem->small_list[pool_id];
 855              		.loc 1 982 3 view .LVU274
 856              		.loc 1 982 12 is_stmt 0 view .LVU275
 857 0079 4D8B7568 		movq	104(%r13), %r14
 858              	.LVL85:
 983:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->small_list[pool_id] = NULL;
 859              		.loc 1 983 3 is_stmt 1 view .LVU276
 860              		.loc 1 983 28 is_stmt 0 view .LVU277
 861 007d 49C74568 		movq	$0, 104(%r13)
 861      00000000 
 984:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 985:fltk-1.3.4-1/jpeg/jmemmgr.c ****   while (shdr_ptr != NULL) {
 862              		.loc 1 985 3 is_stmt 1 view .LVU278
 863              		.loc 1 985 9 view .LVU279
 864 0085 4D85F6   		testq	%r14, %r14
 865 0088 742F     		je	.L47
 866 008a 660F1F44 		.p2align 4,,10
 866      0000
 867              		.p2align 3
 868              	.L59:
 869              	.LBB23:
 986:fltk-1.3.4-1/jpeg/jmemmgr.c ****     small_pool_ptr next_shdr_ptr = shdr_ptr->hdr.next;
 870              		.loc 1 986 5 view .LVU280
 871 0090 4C89F6   		movq	%r14, %rsi
 872              		.loc 1 986 20 is_stmt 0 view .LVU281
 873 0093 4D8B36   		movq	(%r14), %r14
 874              	.LVL86:
 987:fltk-1.3.4-1/jpeg/jmemmgr.c ****     space_freed = shdr_ptr->hdr.bytes_used +
 875              		.loc 1 987 5 is_stmt 1 view .LVU282
 988:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		  shdr_ptr->hdr.bytes_left +
 989:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		  SIZEOF(small_pool_hdr);
 990:fltk-1.3.4-1/jpeg/jmemmgr.c ****     jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 876              		.loc 1 990 5 is_stmt 0 view .LVU283
 877 0096 4C89E7   		movq	%r12, %rdi
 987:fltk-1.3.4-1/jpeg/jmemmgr.c ****     space_freed = shdr_ptr->hdr.bytes_used +
 878              		.loc 1 987 44 view .LVU284
 879 0099 488B5E10 		movq	16(%rsi), %rbx
 880 009d 48035E08 		addq	8(%rsi), %rbx
 987:fltk-1.3.4-1/jpeg/jmemmgr.c ****     space_freed = shdr_ptr->hdr.bytes_used +
 881              		.loc 1 987 17 view .LVU285
 882 00a1 4883C318 		addq	$24, %rbx
 883              	.LVL87:
 884              		.loc 1 990 5 is_stmt 1 view .LVU286
 885 00a5 4889DA   		movq	%rbx, %rdx
 886 00a8 E8000000 		call	jpeg_free_small@PLT
 886      00
 887              	.LVL88:
 991:fltk-1.3.4-1/jpeg/jmemmgr.c ****     mem->total_space_allocated -= space_freed;
 888              		.loc 1 991 5 view .LVU287
 889              		.loc 1 991 32 is_stmt 0 view .LVU288
 890 00ad 48299D98 		subq	%rbx, 152(%rbp)
 890      000000
 992:fltk-1.3.4-1/jpeg/jmemmgr.c ****     shdr_ptr = next_shdr_ptr;
 891              		.loc 1 992 5 is_stmt 1 view .LVU289
 892              	.LVL89:
 893              		.loc 1 992 5 is_stmt 0 view .LVU290
 894              	.LBE23:
 985:fltk-1.3.4-1/jpeg/jmemmgr.c ****     small_pool_ptr next_shdr_ptr = shdr_ptr->hdr.next;
 895              		.loc 1 985 9 is_stmt 1 view .LVU291
 896 00b4 4D85F6   		testq	%r14, %r14
 897 00b7 75D7     		jne	.L59
 898              	.LVL90:
 899              	.L47:
 993:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 994:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 900              		.loc 1 994 1 is_stmt 0 view .LVU292
 901 00b9 5B       		popq	%rbx
 902              		.cfi_remember_state
 903              		.cfi_def_cfa_offset 40
 904 00ba 5D       		popq	%rbp
 905              		.cfi_def_cfa_offset 32
 906              	.LVL91:
 907              		.loc 1 994 1 view .LVU293
 908 00bb 415C     		popq	%r12
 909              		.cfi_def_cfa_offset 24
 910              	.LVL92:
 911              		.loc 1 994 1 view .LVU294
 912 00bd 415D     		popq	%r13
 913              		.cfi_def_cfa_offset 16
 914 00bf 415E     		popq	%r14
 915              		.cfi_def_cfa_offset 8
 916              	.LVL93:
 917              		.loc 1 994 1 view .LVU295
 918 00c1 C3       		ret
 919              	.LVL94:
 920              		.p2align 4,,10
 921 00c2 660F1F44 		.p2align 3
 921      0000
 922              	.L48:
 923              		.cfi_restore_state
 947:fltk-1.3.4-1/jpeg/jmemmgr.c ****     jvirt_sarray_ptr sptr;
 924              		.loc 1 947 3 is_stmt 1 view .LVU296
 947:fltk-1.3.4-1/jpeg/jmemmgr.c ****     jvirt_sarray_ptr sptr;
 925              		.loc 1 947 6 is_stmt 0 view .LVU297
 926 00c8 0F8568FF 		jne	.L49
 926      FFFF
 927              	.LBB24:
 948:fltk-1.3.4-1/jpeg/jmemmgr.c ****     jvirt_barray_ptr bptr;
 928              		.loc 1 948 5 is_stmt 1 view .LVU298
 949:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 929              		.loc 1 949 5 view .LVU299
 951:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (sptr->b_s_open) {	/* there may be no backing store */
 930              		.loc 1 951 5 view .LVU300
 951:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (sptr->b_s_open) {	/* there may be no backing store */
 931              		.loc 1 951 15 is_stmt 0 view .LVU301
 932 00ce 488B9D88 		movq	136(%rbp), %rbx
 932      000000
 933              	.LVL95:
 951:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (sptr->b_s_open) {	/* there may be no backing store */
 934              		.loc 1 951 40 is_stmt 1 view .LVU302
 951:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (sptr->b_s_open) {	/* there may be no backing store */
 935              		.loc 1 951 5 is_stmt 0 view .LVU303
 936 00d5 4885DB   		testq	%rbx, %rbx
 937 00d8 7427     		je	.L50
 938              	.LVL96:
 939 00da 660F1F44 		.p2align 4,,10
 939      0000
 940              		.p2align 3
 941              	.L52:
 952:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 942              		.loc 1 952 7 is_stmt 1 view .LVU304
 952:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 943              		.loc 1 952 10 is_stmt 0 view .LVU305
 944 00e0 8B532C   		movl	44(%rbx), %edx
 945 00e3 85D2     		testl	%edx, %edx
 946 00e5 7411     		je	.L51
 953:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 947              		.loc 1 953 2 is_stmt 1 view .LVU306
 953:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 948              		.loc 1 953 17 is_stmt 0 view .LVU307
 949 00e7 C7432C00 		movl	$0, 44(%rbx)
 949      000000
 954:fltk-1.3.4-1/jpeg/jmemmgr.c ****       }
 950              		.loc 1 954 2 is_stmt 1 view .LVU308
 954:fltk-1.3.4-1/jpeg/jmemmgr.c ****       }
 951              		.loc 1 954 48 is_stmt 0 view .LVU309
 952 00ee 488D7338 		leaq	56(%rbx), %rsi
 954:fltk-1.3.4-1/jpeg/jmemmgr.c ****       }
 953              		.loc 1 954 3 view .LVU310
 954 00f2 4C89E7   		movq	%r12, %rdi
 955 00f5 FF5348   		call	*72(%rbx)
 956              	.LVL97:
 957              	.L51:
 951:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (sptr->b_s_open) {	/* there may be no backing store */
 958              		.loc 1 951 54 is_stmt 1 discriminator 2 view .LVU311
 951:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (sptr->b_s_open) {	/* there may be no backing store */
 959              		.loc 1 951 59 is_stmt 0 discriminator 2 view .LVU312
 960 00f8 488B5B30 		movq	48(%rbx), %rbx
 961              	.LVL98:
 951:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (sptr->b_s_open) {	/* there may be no backing store */
 962              		.loc 1 951 40 is_stmt 1 discriminator 2 view .LVU313
 951:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (sptr->b_s_open) {	/* there may be no backing store */
 963              		.loc 1 951 5 is_stmt 0 discriminator 2 view .LVU314
 964 00fc 4885DB   		testq	%rbx, %rbx
 965 00ff 75DF     		jne	.L52
 966              	.L50:
 957:fltk-1.3.4-1/jpeg/jmemmgr.c ****     for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 967              		.loc 1 957 5 is_stmt 1 view .LVU315
 958:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (bptr->b_s_open) {	/* there may be no backing store */
 968              		.loc 1 958 15 is_stmt 0 view .LVU316
 969 0101 488B9D90 		movq	144(%rbp), %rbx
 969      000000
 970              	.LVL99:
 957:fltk-1.3.4-1/jpeg/jmemmgr.c ****     for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 971              		.loc 1 957 27 view .LVU317
 972 0108 48C78588 		movq	$0, 136(%rbp)
 972      00000000 
 972      000000
 958:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (bptr->b_s_open) {	/* there may be no backing store */
 973              		.loc 1 958 5 is_stmt 1 view .LVU318
 974              	.LVL100:
 958:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (bptr->b_s_open) {	/* there may be no backing store */
 975              		.loc 1 958 40 view .LVU319
 958:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (bptr->b_s_open) {	/* there may be no backing store */
 976              		.loc 1 958 5 is_stmt 0 view .LVU320
 977 0113 4885DB   		testq	%rbx, %rbx
 978 0116 7429     		je	.L53
 979 0118 0F1F8400 		.p2align 4,,10
 979      00000000 
 980              		.p2align 3
 981              	.L55:
 959:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 982              		.loc 1 959 7 is_stmt 1 view .LVU321
 959:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 983              		.loc 1 959 10 is_stmt 0 view .LVU322
 984 0120 8B432C   		movl	44(%rbx), %eax
 985 0123 85C0     		testl	%eax, %eax
 986 0125 7411     		je	.L54
 960:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 987              		.loc 1 960 2 is_stmt 1 view .LVU323
 960:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 988              		.loc 1 960 17 is_stmt 0 view .LVU324
 989 0127 C7432C00 		movl	$0, 44(%rbx)
 989      000000
 961:fltk-1.3.4-1/jpeg/jmemmgr.c ****       }
 990              		.loc 1 961 2 is_stmt 1 view .LVU325
 961:fltk-1.3.4-1/jpeg/jmemmgr.c ****       }
 991              		.loc 1 961 48 is_stmt 0 view .LVU326
 992 012e 488D7338 		leaq	56(%rbx), %rsi
 961:fltk-1.3.4-1/jpeg/jmemmgr.c ****       }
 993              		.loc 1 961 3 view .LVU327
 994 0132 4C89E7   		movq	%r12, %rdi
 995 0135 FF5348   		call	*72(%rbx)
 996              	.LVL101:
 997              	.L54:
 958:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (bptr->b_s_open) {	/* there may be no backing store */
 998              		.loc 1 958 54 is_stmt 1 discriminator 2 view .LVU328
 958:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (bptr->b_s_open) {	/* there may be no backing store */
 999              		.loc 1 958 59 is_stmt 0 discriminator 2 view .LVU329
 1000 0138 488B5B30 		movq	48(%rbx), %rbx
 1001              	.LVL102:
 958:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (bptr->b_s_open) {	/* there may be no backing store */
 1002              		.loc 1 958 40 is_stmt 1 discriminator 2 view .LVU330
 958:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (bptr->b_s_open) {	/* there may be no backing store */
 1003              		.loc 1 958 5 is_stmt 0 discriminator 2 view .LVU331
 1004 013c 4885DB   		testq	%rbx, %rbx
 1005 013f 75DF     		jne	.L55
 1006              	.L53:
 964:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 1007              		.loc 1 964 5 is_stmt 1 view .LVU332
 964:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 1008              		.loc 1 964 27 is_stmt 0 view .LVU333
 1009 0141 48C78590 		movq	$0, 144(%rbp)
 1009      00000000 
 1009      000000
 1010 014c E9E5FEFF 		jmp	.L49
 1010      FF
 1011              	.LBE24:
 1012              		.cfi_endproc
 1013              	.LFE63:
 1015              		.section	.text.self_destruct,"ax",@progbits
 1016              		.p2align 4
 1018              	self_destruct:
 1019              	.LVL103:
 1020              	.LFB64:
 995:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 996:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 997:fltk-1.3.4-1/jpeg/jmemmgr.c **** /*
 998:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * Close up shop entirely.
 999:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * Note that this cannot be called unless cinfo->mem is non-NULL.
1000:fltk-1.3.4-1/jpeg/jmemmgr.c ****  */
1001:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
1002:fltk-1.3.4-1/jpeg/jmemmgr.c **** METHODDEF(void)
1003:fltk-1.3.4-1/jpeg/jmemmgr.c **** self_destruct (j_common_ptr cinfo)
1004:fltk-1.3.4-1/jpeg/jmemmgr.c **** {
 1021              		.loc 1 1004 1 is_stmt 1 view -0
 1022              		.cfi_startproc
 1023              		.loc 1 1004 1 is_stmt 0 view .LVU335
 1024 0000 F30F1EFA 		endbr64
1005:fltk-1.3.4-1/jpeg/jmemmgr.c ****   int pool;
 1025              		.loc 1 1005 3 is_stmt 1 view .LVU336
1006:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
1007:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Close all backing store, release all memory.
1008:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * Releasing pools in reverse order might help avoid fragmentation
1009:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * with some (brain-damaged) malloc libraries.
1010:fltk-1.3.4-1/jpeg/jmemmgr.c ****    */
1011:fltk-1.3.4-1/jpeg/jmemmgr.c ****   for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
 1026              		.loc 1 1011 3 view .LVU337
 1027              	.LVL104:
 1028              		.loc 1 1011 33 view .LVU338
1012:fltk-1.3.4-1/jpeg/jmemmgr.c ****     free_pool(cinfo, pool);
 1029              		.loc 1 1012 5 view .LVU339
1004:fltk-1.3.4-1/jpeg/jmemmgr.c ****   int pool;
 1030              		.loc 1 1004 1 is_stmt 0 view .LVU340
 1031 0004 55       		pushq	%rbp
 1032              		.cfi_def_cfa_offset 16
 1033              		.cfi_offset 6, -16
 1034              		.loc 1 1012 5 view .LVU341
 1035 0005 BE010000 		movl	$1, %esi
 1035      00
1004:fltk-1.3.4-1/jpeg/jmemmgr.c ****   int pool;
 1036              		.loc 1 1004 1 view .LVU342
 1037 000a 4889FD   		movq	%rdi, %rbp
 1038              		.loc 1 1012 5 view .LVU343
 1039 000d E8000000 		call	free_pool
 1039      00
 1040              	.LVL105:
1011:fltk-1.3.4-1/jpeg/jmemmgr.c ****     free_pool(cinfo, pool);
 1041              		.loc 1 1011 58 is_stmt 1 view .LVU344
1011:fltk-1.3.4-1/jpeg/jmemmgr.c ****     free_pool(cinfo, pool);
 1042              		.loc 1 1011 33 view .LVU345
 1043              		.loc 1 1012 5 view .LVU346
 1044 0012 4889EF   		movq	%rbp, %rdi
 1045 0015 31F6     		xorl	%esi, %esi
 1046 0017 E8000000 		call	free_pool
 1046      00
 1047              	.LVL106:
1011:fltk-1.3.4-1/jpeg/jmemmgr.c ****     free_pool(cinfo, pool);
 1048              		.loc 1 1011 58 view .LVU347
1011:fltk-1.3.4-1/jpeg/jmemmgr.c ****     free_pool(cinfo, pool);
 1049              		.loc 1 1011 33 view .LVU348
1013:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
1014:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
1015:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Release the memory manager control block too. */
1016:fltk-1.3.4-1/jpeg/jmemmgr.c ****   jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
 1050              		.loc 1 1016 3 view .LVU349
 1051 001c 488B7508 		movq	8(%rbp), %rsi
 1052 0020 4889EF   		movq	%rbp, %rdi
 1053 0023 BAA80000 		movl	$168, %edx
 1053      00
 1054 0028 E8000000 		call	jpeg_free_small@PLT
 1054      00
 1055              	.LVL107:
1017:fltk-1.3.4-1/jpeg/jmemmgr.c ****   cinfo->mem = NULL;		/* ensures I will be called only once */
 1056              		.loc 1 1017 3 view .LVU350
 1057              		.loc 1 1017 14 is_stmt 0 view .LVU351
 1058 002d 48C74508 		movq	$0, 8(%rbp)
 1058      00000000 
1018:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
1019:fltk-1.3.4-1/jpeg/jmemmgr.c ****   jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 1059              		.loc 1 1019 3 is_stmt 1 view .LVU352
 1060 0035 4889EF   		movq	%rbp, %rdi
1020:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 1061              		.loc 1 1020 1 is_stmt 0 view .LVU353
 1062 0038 5D       		popq	%rbp
 1063              		.cfi_def_cfa_offset 8
 1064              	.LVL108:
1019:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 1065              		.loc 1 1019 3 view .LVU354
 1066 0039 E9000000 		jmp	jpeg_mem_term@PLT
 1066      00
 1067              	.LVL109:
1019:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 1068              		.loc 1 1019 3 view .LVU355
 1069              		.cfi_endproc
 1070              	.LFE64:
 1072              		.section	.text.access_virt_barray,"ax",@progbits
 1073              		.p2align 4
 1075              	access_virt_barray:
 1076              	.LVL110:
 1077              	.LFB62:
 848:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION end_row = start_row + num_rows;
 1078              		.loc 1 848 1 is_stmt 1 view -0
 1079              		.cfi_startproc
 848:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION end_row = start_row + num_rows;
 1080              		.loc 1 848 1 is_stmt 0 view .LVU357
 1081 0000 F30F1EFA 		endbr64
 849:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION undef_row;
 1082              		.loc 1 849 3 is_stmt 1 view .LVU358
 848:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION end_row = start_row + num_rows;
 1083              		.loc 1 848 1 is_stmt 0 view .LVU359
 1084 0004 4157     		pushq	%r15
 1085              		.cfi_def_cfa_offset 16
 1086              		.cfi_offset 15, -16
 1087 0006 4156     		pushq	%r14
 1088              		.cfi_def_cfa_offset 24
 1089              		.cfi_offset 14, -24
 849:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION undef_row;
 1090              		.loc 1 849 14 view .LVU360
 1091 0008 448D340A 		leal	(%rdx,%rcx), %r14d
 1092              	.LVL111:
 850:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1093              		.loc 1 850 3 is_stmt 1 view .LVU361
 853:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->mem_buffer == NULL)
 1094              		.loc 1 853 3 view .LVU362
 848:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION end_row = start_row + num_rows;
 1095              		.loc 1 848 1 is_stmt 0 view .LVU363
 1096 000c 4155     		pushq	%r13
 1097              		.cfi_def_cfa_offset 32
 1098              		.cfi_offset 13, -32
 1099 000e 4589C5   		movl	%r8d, %r13d
 1100 0011 4154     		pushq	%r12
 1101              		.cfi_def_cfa_offset 40
 1102              		.cfi_offset 12, -40
 1103 0013 4989FC   		movq	%rdi, %r12
 1104 0016 55       		pushq	%rbp
 1105              		.cfi_def_cfa_offset 48
 1106              		.cfi_offset 6, -48
 1107 0017 89D5     		movl	%edx, %ebp
 1108 0019 53       		pushq	%rbx
 1109              		.cfi_def_cfa_offset 56
 1110              		.cfi_offset 3, -56
 1111 001a 4889F3   		movq	%rsi, %rbx
 1112 001d 4883EC08 		subq	$8, %rsp
 1113              		.cfi_def_cfa_offset 64
 853:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->mem_buffer == NULL)
 1114              		.loc 1 853 6 view .LVU364
 1115 0021 44397608 		cmpl	%r14d, 8(%rsi)
 1116 0025 7209     		jb	.L80
 853:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->mem_buffer == NULL)
 1117              		.loc 1 853 36 discriminator 1 view .LVU365
 1118 0027 394E10   		cmpl	%ecx, 16(%rsi)
 1119 002a 0F83B001 		jnb	.L104
 1119      0000
 1120              	.L80:
 855:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1121              		.loc 1 855 5 is_stmt 1 view .LVU366
 1122 0030 498B0424 		movq	(%r12), %rax
 1123 0034 4C89E7   		movq	%r12, %rdi
 1124              	.LVL112:
 855:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1125              		.loc 1 855 5 is_stmt 0 view .LVU367
 1126 0037 C7402817 		movl	$23, 40(%rax)
 1126      000000
 1127 003e 498B0424 		movq	(%r12), %rax
 1128 0042 FF10     		call	*(%rax)
 1129              	.LVL113:
 1130              	.L81:
 858:fltk-1.3.4-1/jpeg/jmemmgr.c ****       end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 1131              		.loc 1 858 3 is_stmt 1 view .LVU368
 858:fltk-1.3.4-1/jpeg/jmemmgr.c ****       end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 1132              		.loc 1 858 22 is_stmt 0 view .LVU369
 1133 0044 8B431C   		movl	28(%rbx), %eax
 858:fltk-1.3.4-1/jpeg/jmemmgr.c ****       end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 1134              		.loc 1 858 6 view .LVU370
 1135 0047 39E8     		cmpl	%ebp, %eax
 1136 0049 0F87C100 		ja	.L82
 1136      0000
 859:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (! ptr->b_s_open)
 1137              		.loc 1 859 35 discriminator 1 view .LVU371
 1138 004f 034314   		addl	20(%rbx), %eax
 858:fltk-1.3.4-1/jpeg/jmemmgr.c ****       end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 1139              		.loc 1 858 38 discriminator 1 view .LVU372
 1140 0052 4439F0   		cmpl	%r14d, %eax
 1141 0055 0F82B500 		jb	.L82
 1141      0000
 1142              	.L83:
 895:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (ptr->first_undef_row < start_row) {
 1143              		.loc 1 895 3 is_stmt 1 view .LVU373
 895:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (ptr->first_undef_row < start_row) {
 1144              		.loc 1 895 10 is_stmt 0 view .LVU374
 1145 005b 8B5320   		movl	32(%rbx), %edx
 895:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (ptr->first_undef_row < start_row) {
 1146              		.loc 1 895 6 view .LVU375
 1147 005e 4439F2   		cmpl	%r14d, %edx
 1148 0061 0F838300 		jnb	.L87
 1148      0000
 896:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (writable)		/* writer skipped over a section of array */
 1149              		.loc 1 896 5 is_stmt 1 view .LVU376
 896:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (writable)		/* writer skipped over a section of array */
 1150              		.loc 1 896 8 is_stmt 0 view .LVU377
 1151 0067 39EA     		cmpl	%ebp, %edx
 1152 0069 0F835101 		jnb	.L88
 1152      0000
 897:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 1153              		.loc 1 897 7 is_stmt 1 view .LVU378
 897:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 1154              		.loc 1 897 10 is_stmt 0 view .LVU379
 1155 006f 4585ED   		testl	%r13d, %r13d
 1156 0072 0F849801 		je	.L98
 1156      0000
 898:fltk-1.3.4-1/jpeg/jmemmgr.c ****       undef_row = start_row;	/* but reader is allowed to read ahead */
 1157              		.loc 1 898 2 is_stmt 1 view .LVU380
 1158 0078 498B0424 		movq	(%r12), %rax
 1159 007c 4C89E7   		movq	%r12, %rdi
 1160 007f C7402817 		movl	$23, 40(%rax)
 1160      000000
 1161 0086 498B0424 		movq	(%r12), %rax
 1162 008a FF10     		call	*(%rax)
 1163              	.LVL114:
 903:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->first_undef_row = end_row;
 1164              		.loc 1 903 5 view .LVU381
 898:fltk-1.3.4-1/jpeg/jmemmgr.c ****       undef_row = start_row;	/* but reader is allowed to read ahead */
 1165              		.loc 1 898 2 is_stmt 0 view .LVU382
 1166 008c 89EA     		movl	%ebp, %edx
 1167              	.LVL115:
 1168              	.L90:
 904:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (ptr->pre_zero) {
 1169              		.loc 1 904 7 is_stmt 1 view .LVU383
 905:fltk-1.3.4-1/jpeg/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 1170              		.loc 1 905 8 is_stmt 0 view .LVU384
 1171 008e 8B4B24   		movl	36(%rbx), %ecx
 1172 0091 8B431C   		movl	28(%rbx), %eax
 904:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (ptr->pre_zero) {
 1173              		.loc 1 904 28 view .LVU385
 1174 0094 44897320 		movl	%r14d, 32(%rbx)
 905:fltk-1.3.4-1/jpeg/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 1175              		.loc 1 905 5 is_stmt 1 view .LVU386
 905:fltk-1.3.4-1/jpeg/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 1176              		.loc 1 905 8 is_stmt 0 view .LVU387
 1177 0098 85C9     		testl	%ecx, %ecx
 1178 009a 0F84A000 		je	.L93
 1178      0000
 1179              	.L92:
 1180              	.LBB25:
 906:fltk-1.3.4-1/jpeg/jmemmgr.c ****       undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 1181              		.loc 1 906 7 is_stmt 1 view .LVU388
 906:fltk-1.3.4-1/jpeg/jmemmgr.c ****       undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 1182              		.loc 1 906 28 is_stmt 0 view .LVU389
 1183 00a0 448B7B0C 		movl	12(%rbx), %r15d
 907:fltk-1.3.4-1/jpeg/jmemmgr.c ****       end_row -= ptr->cur_start_row;
 1184              		.loc 1 907 17 view .LVU390
 1185 00a4 89D1     		movl	%edx, %ecx
 908:fltk-1.3.4-1/jpeg/jmemmgr.c ****       while (undef_row < end_row) {
 1186              		.loc 1 908 15 view .LVU391
 1187 00a6 4129C6   		subl	%eax, %r14d
 1188              	.LVL116:
 907:fltk-1.3.4-1/jpeg/jmemmgr.c ****       end_row -= ptr->cur_start_row;
 1189              		.loc 1 907 17 view .LVU392
 1190 00a9 29C1     		subl	%eax, %ecx
 906:fltk-1.3.4-1/jpeg/jmemmgr.c ****       undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 1191              		.loc 1 906 14 view .LVU393
 1192 00ab 49C1E707 		salq	$7, %r15
 1193              	.LVL117:
 907:fltk-1.3.4-1/jpeg/jmemmgr.c ****       end_row -= ptr->cur_start_row;
 1194              		.loc 1 907 7 is_stmt 1 view .LVU394
 908:fltk-1.3.4-1/jpeg/jmemmgr.c ****       while (undef_row < end_row) {
 1195              		.loc 1 908 7 view .LVU395
 909:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 1196              		.loc 1 909 7 view .LVU396
 909:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 1197              		.loc 1 909 13 view .LVU397
 1198 00af 4439F1   		cmpl	%r14d, %ecx
 1199 00b2 7339     		jnb	.L94
 1200 00b4 29D0     		subl	%edx, %eax
 1201 00b6 4C8D24CD 		leaq	0(,%rcx,8), %r12
 1201      00000000 
 1202              	.LVL118:
 909:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 1203              		.loc 1 909 13 is_stmt 0 view .LVU398
 1204 00be 418D4406 		leal	-1(%r14,%rax), %eax
 1204      FF
 1205 00c3 4C8D7401 		leaq	1(%rcx,%rax), %r14
 1205      01
 1206              	.LVL119:
 909:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 1207              		.loc 1 909 13 view .LVU399
 1208 00c8 49C1E603 		salq	$3, %r14
 1209              	.LVL120:
 1210 00cc 0F1F4000 		.p2align 4,,10
 1211              		.p2align 3
 1212              	.L95:
 910:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	undef_row++;
 1213              		.loc 1 910 2 is_stmt 1 view .LVU400
 1214              	.LBB26:
 1215              	.LBI26:
 1216              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h"
   1:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** /* Copyright (C) 2004-2020 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    <https://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifndef _BITS_STRING_FORTIFIED_H
  19:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #define _BITS_STRING_FORTIFIED_H 1
  20:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  21:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifndef _STRING_H
  22:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** # error "Never use <bits/string_fortified.h> directly; include <string.h> instead."
  23:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  24:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  25:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #if !__GNUC_PREREQ (5,0)
  26:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __warndecl (__warn_memset_zero_len,
  27:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  28:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  29:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  30:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  32:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
  33:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  34:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  35:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  36:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  37:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  38:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memmove (void *__dest, const void *__src, size_t __len))
  39:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  40:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  41:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  42:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  43:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifdef __USE_GNU
  44:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  45:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
  46:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 		size_t __len))
  47:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  48:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
  49:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  50:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  51:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  52:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  53:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** /* The first two tests here help to catch a somewhat common problem
  54:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    where the second and third parameter are transposed.  This is
  55:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    especially problematic if the intended fill value is zero.  In this
  56:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    case no work is done at all.  We detect these problems by referring
  57:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    non-existing functions.  */
  58:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  59:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memset (void *__dest, int __ch, size_t __len))
 1217              		.loc 2 59 1 view .LVU401
 1218              	.LBB27:
  60:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  61:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   /* GCC-5.0 and newer implements these checks in the compiler, so we don't
  62:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****      need them here.  */
  63:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #if !__GNUC_PREREQ (5,0)
  64:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   if (__builtin_constant_p (__len) && __len == 0
  65:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       && (!__builtin_constant_p (__ch) || __ch != 0))
  66:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****     {
  67:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       __warn_memset_zero_len ();
  68:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       return __dest;
  69:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****     }
  70:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  71:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 1219              		.loc 2 71 3 view .LVU402
 1220              	.LBE27:
 1221              	.LBE26:
 910:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	undef_row++;
 1222              		.loc 1 910 2 is_stmt 0 view .LVU403
 1223 00d0 488B03   		movq	(%rbx), %rax
 1224              	.LBB29:
 1225              	.LBB28:
 1226              		.loc 2 71 10 view .LVU404
 1227 00d3 4C89FA   		movq	%r15, %rdx
 1228 00d6 31F6     		xorl	%esi, %esi
 1229 00d8 4A8B3C20 		movq	(%rax,%r12), %rdi
 1230 00dc 4983C408 		addq	$8, %r12
 1231              	.LVL121:
 1232              		.loc 2 71 10 view .LVU405
 1233 00e0 E8000000 		call	memset@PLT
 1233      00
 1234              	.LVL122:
 1235              		.loc 2 71 10 view .LVU406
 1236              	.LBE28:
 1237              	.LBE29:
 911:fltk-1.3.4-1/jpeg/jmemmgr.c ****       }
 1238              		.loc 1 911 2 is_stmt 1 view .LVU407
 909:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 1239              		.loc 1 909 13 view .LVU408
 1240 00e5 4D39E6   		cmpq	%r12, %r14
 1241 00e8 75E6     		jne	.L95
 1242              	.LVL123:
 1243              	.L87:
 909:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 1244              		.loc 1 909 13 is_stmt 0 view .LVU409
 1245 00ea 8B431C   		movl	28(%rbx), %eax
 1246              	.L94:
 909:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 1247              		.loc 1 909 13 view .LVU410
 1248              	.LBE25:
 919:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ptr->dirty = TRUE;
 1249              		.loc 1 919 3 is_stmt 1 view .LVU411
 919:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ptr->dirty = TRUE;
 1250              		.loc 1 919 6 is_stmt 0 view .LVU412
 1251 00ed 4585ED   		testl	%r13d, %r13d
 1252 00f0 754E     		jne	.L93
 1253              	.L96:
 922:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 1254              		.loc 1 922 3 is_stmt 1 view .LVU413
 922:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 1255              		.loc 1 922 39 is_stmt 0 view .LVU414
 1256 00f2 29C5     		subl	%eax, %ebp
 1257              	.LVL124:
 922:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 1258              		.loc 1 922 26 view .LVU415
 1259 00f4 488B03   		movq	(%rbx), %rax
 923:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1260              		.loc 1 923 1 view .LVU416
 1261 00f7 4883C408 		addq	$8, %rsp
 1262              		.cfi_remember_state
 1263              		.cfi_def_cfa_offset 56
 1264 00fb 5B       		popq	%rbx
 1265              		.cfi_def_cfa_offset 48
 1266              	.LVL125:
 922:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 1267              		.loc 1 922 26 view .LVU417
 1268 00fc 488D04E8 		leaq	(%rax,%rbp,8), %rax
 923:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1269              		.loc 1 923 1 view .LVU418
 1270 0100 5D       		popq	%rbp
 1271              		.cfi_def_cfa_offset 40
 1272 0101 415C     		popq	%r12
 1273              		.cfi_def_cfa_offset 32
 1274 0103 415D     		popq	%r13
 1275              		.cfi_def_cfa_offset 24
 1276              	.LVL126:
 923:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1277              		.loc 1 923 1 view .LVU419
 1278 0105 415E     		popq	%r14
 1279              		.cfi_def_cfa_offset 16
 1280 0107 415F     		popq	%r15
 1281              		.cfi_def_cfa_offset 8
 1282 0109 C3       		ret
 1283              	.LVL127:
 1284 010a 660F1F44 		.p2align 4,,10
 1284      0000
 1285              		.p2align 3
 1286              	.L82:
 1287              		.cfi_restore_state
 860:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 1288              		.loc 1 860 5 is_stmt 1 view .LVU420
 860:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 1289              		.loc 1 860 8 is_stmt 0 view .LVU421
 1290 0110 448B432C 		movl	44(%rbx), %r8d
 1291 0114 4585C0   		testl	%r8d, %r8d
 1292 0117 7467     		je	.L105
 863:fltk-1.3.4-1/jpeg/jmemmgr.c ****       do_barray_io(cinfo, ptr, TRUE);
 1293              		.loc 1 863 5 is_stmt 1 view .LVU422
 863:fltk-1.3.4-1/jpeg/jmemmgr.c ****       do_barray_io(cinfo, ptr, TRUE);
 1294              		.loc 1 863 8 is_stmt 0 view .LVU423
 1295 0119 8B7B28   		movl	40(%rbx), %edi
 1296 011c 85FF     		testl	%edi, %edi
 1297 011e 757B     		jne	.L106
 1298              	.L85:
 874:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->cur_start_row = start_row;
 1299              		.loc 1 874 5 is_stmt 1 view .LVU424
 1300 0120 89E8     		movl	%ebp, %eax
 874:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->cur_start_row = start_row;
 1301              		.loc 1 874 8 is_stmt 0 view .LVU425
 1302 0122 396B1C   		cmpl	%ebp, 28(%rbx)
 1303 0125 7329     		jnb	.L107
 1304              	.LVL128:
 874:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->cur_start_row = start_row;
 1305              		.loc 1 874 8 view .LVU426
 1306 0127 89431C   		movl	%eax, 28(%rbx)
 889:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 1307              		.loc 1 889 5 is_stmt 1 view .LVU427
 1308 012a 31D2     		xorl	%edx, %edx
 1309 012c 4889DE   		movq	%rbx, %rsi
 1310 012f 4C89E7   		movq	%r12, %rdi
 1311 0132 E8000000 		call	do_barray_io
 1311      00
 1312              	.LVL129:
 889:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 1313              		.loc 1 889 5 is_stmt 0 view .LVU428
 1314 0137 E91FFFFF 		jmp	.L83
 1314      FF
 1315              	.LVL130:
 1316 013c 0F1F4000 		.p2align 4,,10
 1317              		.p2align 3
 1318              	.L93:
 920:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Return address of proper part of the buffer */
 1319              		.loc 1 920 5 is_stmt 1 view .LVU429
 920:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Return address of proper part of the buffer */
 1320              		.loc 1 920 16 is_stmt 0 view .LVU430
 1321 0140 C7432801 		movl	$1, 40(%rbx)
 1321      000000
 1322 0147 EBA9     		jmp	.L96
 1323              	.LVL131:
 1324 0149 0F1F8000 		.p2align 4,,10
 1324      000000
 1325              		.p2align 3
 1326              	.L107:
 1327              	.LBB30:
 878:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1328              		.loc 1 878 7 is_stmt 1 view .LVU431
 880:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (ltemp < 0)
 1329              		.loc 1 880 7 view .LVU432
 881:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	ltemp = 0;		/* don't fall off front end of file */
 1330              		.loc 1 881 7 view .LVU433
 883:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 1331              		.loc 1 883 7 view .LVU434
 880:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (ltemp < 0)
 1332              		.loc 1 880 32 is_stmt 0 view .LVU435
 1333 0150 8B5314   		movl	20(%rbx), %edx
 880:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (ltemp < 0)
 1334              		.loc 1 880 15 view .LVU436
 1335 0153 4489F0   		movl	%r14d, %eax
 1336              	.LVL132:
 880:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (ltemp < 0)
 1337              		.loc 1 880 15 view .LVU437
 1338              	.LBE30:
 889:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 1339              		.loc 1 889 5 view .LVU438
 1340 0156 4889DE   		movq	%rbx, %rsi
 1341 0159 4C89E7   		movq	%r12, %rdi
 1342              	.LBB31:
 883:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 1343              		.loc 1 883 28 view .LVU439
 1344 015c 4829D0   		subq	%rdx, %rax
 1345 015f BA000000 		movl	$0, %edx
 1345      00
 1346 0164 480F48C2 		cmovs	%rdx, %rax
 1347              	.LBE31:
 889:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 1348              		.loc 1 889 5 view .LVU440
 1349 0168 31D2     		xorl	%edx, %edx
 1350 016a 89431C   		movl	%eax, 28(%rbx)
 889:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 1351              		.loc 1 889 5 is_stmt 1 view .LVU441
 1352 016d E8000000 		call	do_barray_io
 1352      00
 1353              	.LVL133:
 1354 0172 E9E4FEFF 		jmp	.L83
 1354      FF
 1355 0177 660F1F84 		.p2align 4,,10
 1355      00000000 
 1355      00
 1356              		.p2align 3
 1357              	.L105:
 861:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Flush old buffer contents if necessary */
 1358              		.loc 1 861 7 view .LVU442
 1359 0180 498B0424 		movq	(%r12), %rax
 1360 0184 4C89E7   		movq	%r12, %rdi
 1361 0187 C7402847 		movl	$71, 40(%rax)
 1361      000000
 1362 018e 498B0424 		movq	(%r12), %rax
 1363 0192 FF10     		call	*(%rax)
 1364              	.LVL134:
 863:fltk-1.3.4-1/jpeg/jmemmgr.c ****       do_barray_io(cinfo, ptr, TRUE);
 1365              		.loc 1 863 5 view .LVU443
 863:fltk-1.3.4-1/jpeg/jmemmgr.c ****       do_barray_io(cinfo, ptr, TRUE);
 1366              		.loc 1 863 8 is_stmt 0 view .LVU444
 1367 0194 8B7B28   		movl	40(%rbx), %edi
 1368 0197 85FF     		testl	%edi, %edi
 1369 0199 7485     		je	.L85
 1370              	.L106:
 864:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->dirty = FALSE;
 1371              		.loc 1 864 7 is_stmt 1 view .LVU445
 1372 019b BA010000 		movl	$1, %edx
 1372      00
 1373 01a0 4889DE   		movq	%rbx, %rsi
 1374 01a3 4C89E7   		movq	%r12, %rdi
 1375 01a6 E8000000 		call	do_barray_io
 1375      00
 1376              	.LVL135:
 865:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 1377              		.loc 1 865 7 view .LVU446
 865:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 1378              		.loc 1 865 18 is_stmt 0 view .LVU447
 1379 01ab C7432800 		movl	$0, 40(%rbx)
 1379      000000
 1380 01b2 E969FFFF 		jmp	.L85
 1380      FF
 1381 01b7 660F1F84 		.p2align 4,,10
 1381      00000000 
 1381      00
 1382              		.p2align 3
 1383              	.L88:
 1384              	.LVL136:
 903:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->first_undef_row = end_row;
 1385              		.loc 1 903 5 is_stmt 1 view .LVU448
 903:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->first_undef_row = end_row;
 1386              		.loc 1 903 8 is_stmt 0 view .LVU449
 1387 01c0 4585ED   		testl	%r13d, %r13d
 1388 01c3 0F85C5FE 		jne	.L90
 1388      FFFF
 905:fltk-1.3.4-1/jpeg/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 1389              		.loc 1 905 5 is_stmt 1 view .LVU450
 905:fltk-1.3.4-1/jpeg/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 1390              		.loc 1 905 8 is_stmt 0 view .LVU451
 1391 01c9 8B7324   		movl	36(%rbx), %esi
 1392 01cc 85F6     		testl	%esi, %esi
 1393 01ce 7420     		je	.L91
 1394              	.L108:
 905:fltk-1.3.4-1/jpeg/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 1395              		.loc 1 905 8 view .LVU452
 1396 01d0 8B431C   		movl	28(%rbx), %eax
 1397 01d3 E9C8FEFF 		jmp	.L92
 1397      FF
 1398              	.LVL137:
 1399 01d8 0F1F8400 		.p2align 4,,10
 1399      00000000 
 1400              		.p2align 3
 1401              	.L104:
 853:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->mem_buffer == NULL)
 1402              		.loc 1 853 65 discriminator 2 view .LVU453
 1403 01e0 48833E00 		cmpq	$0, (%rsi)
 1404 01e4 0F855AFE 		jne	.L81
 1404      FFFF
 1405 01ea E941FEFF 		jmp	.L80
 1405      FF
 1406              	.LVL138:
 1407 01ef 90       		.p2align 4,,10
 1408              		.p2align 3
 1409              	.L91:
 915:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 1410              		.loc 1 915 2 is_stmt 1 view .LVU454
 1411 01f0 498B0424 		movq	(%r12), %rax
 1412 01f4 4C89E7   		movq	%r12, %rdi
 1413 01f7 C7402817 		movl	$23, 40(%rax)
 1413      000000
 1414 01fe 498B0424 		movq	(%r12), %rax
 1415 0202 FF10     		call	*(%rax)
 1416              	.LVL139:
 919:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ptr->dirty = TRUE;
 1417              		.loc 1 919 3 view .LVU455
 1418 0204 8B431C   		movl	28(%rbx), %eax
 1419 0207 E9E6FEFF 		jmp	.L96
 1419      FF
 1420 020c 0F1F4000 		.p2align 4,,10
 1421              		.p2align 3
 1422              	.L98:
 905:fltk-1.3.4-1/jpeg/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 1423              		.loc 1 905 8 is_stmt 0 view .LVU456
 1424 0210 8B7324   		movl	36(%rbx), %esi
 1425 0213 89EA     		movl	%ebp, %edx
 1426              	.LVL140:
 905:fltk-1.3.4-1/jpeg/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 1427              		.loc 1 905 5 is_stmt 1 view .LVU457
 905:fltk-1.3.4-1/jpeg/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 1428              		.loc 1 905 8 is_stmt 0 view .LVU458
 1429 0215 85F6     		testl	%esi, %esi
 1430 0217 74D7     		je	.L91
 1431              	.LVL141:
 905:fltk-1.3.4-1/jpeg/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 1432              		.loc 1 905 8 view .LVU459
 1433 0219 EBB5     		jmp	.L108
 1434              		.cfi_endproc
 1435              	.LFE62:
 1437              		.section	.text.alloc_large,"ax",@progbits
 1438              		.p2align 4
 1440              	alloc_large:
 1441              	.LVL142:
 1442              	.LFB53:
 345:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1443              		.loc 1 345 1 is_stmt 1 view -0
 1444              		.cfi_startproc
 345:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1445              		.loc 1 345 1 is_stmt 0 view .LVU461
 1446 0000 F30F1EFA 		endbr64
 346:fltk-1.3.4-1/jpeg/jmemmgr.c ****   large_pool_ptr hdr_ptr;
 1447              		.loc 1 346 3 is_stmt 1 view .LVU462
 345:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1448              		.loc 1 345 1 is_stmt 0 view .LVU463
 1449 0004 4156     		pushq	%r14
 1450              		.cfi_def_cfa_offset 16
 1451              		.cfi_offset 14, -16
 1452 0006 4155     		pushq	%r13
 1453              		.cfi_def_cfa_offset 24
 1454              		.cfi_offset 13, -24
 1455 0008 4C63EE   		movslq	%esi, %r13
 1456 000b 4154     		pushq	%r12
 1457              		.cfi_def_cfa_offset 32
 1458              		.cfi_offset 12, -32
 1459 000d 4989FC   		movq	%rdi, %r12
 1460 0010 55       		pushq	%rbp
 1461              		.cfi_def_cfa_offset 40
 1462              		.cfi_offset 6, -40
 1463 0011 4889D5   		movq	%rdx, %rbp
 1464 0014 53       		pushq	%rbx
 1465              		.cfi_def_cfa_offset 48
 1466              		.cfi_offset 3, -48
 346:fltk-1.3.4-1/jpeg/jmemmgr.c ****   large_pool_ptr hdr_ptr;
 1467              		.loc 1 346 14 view .LVU464
 1468 0015 4C8B7708 		movq	8(%rdi), %r14
 1469              	.LVL143:
 347:fltk-1.3.4-1/jpeg/jmemmgr.c ****   size_t odd_bytes;
 1470              		.loc 1 347 3 is_stmt 1 view .LVU465
 348:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1471              		.loc 1 348 3 view .LVU466
 351:fltk-1.3.4-1/jpeg/jmemmgr.c ****     out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 1472              		.loc 1 351 3 view .LVU467
 351:fltk-1.3.4-1/jpeg/jmemmgr.c ****     out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 1473              		.loc 1 351 6 is_stmt 0 view .LVU468
 1474 0019 4881FAE8 		cmpq	$999999976, %rdx
 1474      C99A3B
 1475 0020 7619     		jbe	.L110
 352:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1476              		.loc 1 352 5 is_stmt 1 view .LVU469
 1477              	.LVL144:
 1478              	.LBB32:
 1479              	.LBI32:
 218:fltk-1.3.4-1/jpeg/jmemmgr.c **** /* Report an out-of-memory error and stop execution */
 1480              		.loc 1 218 1 view .LVU470
 1481              	.LBB33:
 225:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 1482              		.loc 1 225 3 view .LVU471
 1483 0022 488B07   		movq	(%rdi), %rax
 1484 0025 C7402838 		movl	$56, 40(%rax)
 1484      000000
 1485 002c 488B07   		movq	(%rdi), %rax
 1486 002f C7402C03 		movl	$3, 44(%rax)
 1486      000000
 1487 0036 488B07   		movq	(%rdi), %rax
 1488 0039 FF10     		call	*(%rax)
 1489              	.LVL145:
 1490              	.L110:
 225:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 1491              		.loc 1 225 3 is_stmt 0 view .LVU472
 1492              	.LBE33:
 1493              	.LBE32:
 355:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (odd_bytes > 0)
 1494              		.loc 1 355 3 is_stmt 1 view .LVU473
 355:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (odd_bytes > 0)
 1495              		.loc 1 355 13 is_stmt 0 view .LVU474
 1496 003b 4889EA   		movq	%rbp, %rdx
 357:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1497              		.loc 1 357 18 view .LVU475
 1498 003e 488D4508 		leaq	8(%rbp), %rax
 355:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (odd_bytes > 0)
 1499              		.loc 1 355 13 view .LVU476
 1500 0042 83E207   		andl	$7, %edx
 1501              	.LVL146:
 356:fltk-1.3.4-1/jpeg/jmemmgr.c ****     sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 1502              		.loc 1 356 3 is_stmt 1 view .LVU477
 357:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1503              		.loc 1 357 18 is_stmt 0 view .LVU478
 1504 0045 4829D0   		subq	%rdx, %rax
 1505 0048 4885D2   		testq	%rdx, %rdx
 1506 004b 480F45E8 		cmovne	%rax, %rbp
 1507              	.LVL147:
 360:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 1508              		.loc 1 360 3 is_stmt 1 view .LVU479
 360:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 1509              		.loc 1 360 6 is_stmt 0 view .LVU480
 1510 004f 4183FD01 		cmpl	$1, %r13d
 1511 0053 761C     		jbe	.L112
 361:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1512              		.loc 1 361 5 is_stmt 1 view .LVU481
 1513 0055 498B0424 		movq	(%r12), %rax
 1514 0059 4C89E7   		movq	%r12, %rdi
 1515 005c C740280F 		movl	$15, 40(%rax)
 1515      000000
 1516 0063 498B0424 		movq	(%r12), %rax
 1517 0067 4489682C 		movl	%r13d, 44(%rax)
 1518 006b 498B0424 		movq	(%r12), %rax
 1519 006f FF10     		call	*(%rax)
 1520              	.LVL148:
 1521              	.L112:
 363:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					    SIZEOF(large_pool_hdr));
 1522              		.loc 1 363 3 view .LVU482
 363:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					    SIZEOF(large_pool_hdr));
 1523              		.loc 1 363 30 is_stmt 0 view .LVU483
 1524 0071 488D7518 		leaq	24(%rbp), %rsi
 1525 0075 4C89E7   		movq	%r12, %rdi
 1526 0078 E8000000 		call	jpeg_get_large@PLT
 1526      00
 1527              	.LVL149:
 1528 007d 4889C3   		movq	%rax, %rbx
 1529              	.LVL150:
 365:fltk-1.3.4-1/jpeg/jmemmgr.c ****     out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 1530              		.loc 1 365 3 is_stmt 1 view .LVU484
 365:fltk-1.3.4-1/jpeg/jmemmgr.c ****     out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 1531              		.loc 1 365 6 is_stmt 0 view .LVU485
 1532 0080 4885C0   		testq	%rax, %rax
 1533 0083 743B     		je	.L117
 1534              	.LVL151:
 1535              	.L113:
 367:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1536              		.loc 1 367 3 is_stmt 1 view .LVU486
 367:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1537              		.loc 1 367 30 is_stmt 0 view .LVU487
 1538 0085 498B8698 		movq	152(%r14), %rax
 1538      000000
 1539 008c 488D4405 		leaq	24(%rbp,%rax), %rax
 1539      18
 1540 0091 49898698 		movq	%rax, 152(%r14)
 1540      000000
 370:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* We maintain space counts in each pool header for statistical purposes,
 1541              		.loc 1 370 3 is_stmt 1 view .LVU488
 1542 0098 4B8D04EE 		leaq	(%r14,%r13,8), %rax
 370:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* We maintain space counts in each pool header for statistical purposes,
 1543              		.loc 1 370 38 is_stmt 0 view .LVU489
 1544 009c 488B5078 		movq	120(%rax), %rdx
 374:fltk-1.3.4-1/jpeg/jmemmgr.c ****   hdr_ptr->hdr.bytes_left = 0;
 1545              		.loc 1 374 27 view .LVU490
 1546 00a0 48896B08 		movq	%rbp, 8(%rbx)
 375:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->large_list[pool_id] = hdr_ptr;
 1547              		.loc 1 375 27 view .LVU491
 1548 00a4 48C74310 		movq	$0, 16(%rbx)
 1548      00000000 
 370:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* We maintain space counts in each pool header for statistical purposes,
 1549              		.loc 1 370 21 view .LVU492
 1550 00ac 488913   		movq	%rdx, (%rbx)
 374:fltk-1.3.4-1/jpeg/jmemmgr.c ****   hdr_ptr->hdr.bytes_left = 0;
 1551              		.loc 1 374 3 is_stmt 1 view .LVU493
 375:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->large_list[pool_id] = hdr_ptr;
 1552              		.loc 1 375 3 view .LVU494
 376:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1553              		.loc 1 376 3 view .LVU495
 376:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1554              		.loc 1 376 28 is_stmt 0 view .LVU496
 1555 00af 48895878 		movq	%rbx, 120(%rax)
 378:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 1556              		.loc 1 378 3 is_stmt 1 view .LVU497
 378:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 1557              		.loc 1 378 10 is_stmt 0 view .LVU498
 1558 00b3 488D4318 		leaq	24(%rbx), %rax
 379:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1559              		.loc 1 379 1 view .LVU499
 1560 00b7 5B       		popq	%rbx
 1561              		.cfi_remember_state
 1562              		.cfi_def_cfa_offset 40
 1563              	.LVL152:
 379:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1564              		.loc 1 379 1 view .LVU500
 1565 00b8 5D       		popq	%rbp
 1566              		.cfi_def_cfa_offset 32
 1567              	.LVL153:
 379:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1568              		.loc 1 379 1 view .LVU501
 1569 00b9 415C     		popq	%r12
 1570              		.cfi_def_cfa_offset 24
 1571              	.LVL154:
 379:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1572              		.loc 1 379 1 view .LVU502
 1573 00bb 415D     		popq	%r13
 1574              		.cfi_def_cfa_offset 16
 1575              	.LVL155:
 379:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1576              		.loc 1 379 1 view .LVU503
 1577 00bd 415E     		popq	%r14
 1578              		.cfi_def_cfa_offset 8
 1579              	.LVL156:
 379:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1580              		.loc 1 379 1 view .LVU504
 1581 00bf C3       		ret
 1582              	.LVL157:
 1583              		.p2align 4,,10
 1584              		.p2align 3
 1585              	.L117:
 1586              		.cfi_restore_state
 366:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 1587              		.loc 1 366 5 is_stmt 1 view .LVU505
 1588              	.LBB34:
 1589              	.LBI34:
 218:fltk-1.3.4-1/jpeg/jmemmgr.c **** /* Report an out-of-memory error and stop execution */
 1590              		.loc 1 218 1 view .LVU506
 1591              	.LBB35:
 225:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 1592              		.loc 1 225 3 view .LVU507
 1593 00c0 498B0424 		movq	(%r12), %rax
 1594              	.LVL158:
 225:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 1595              		.loc 1 225 3 is_stmt 0 view .LVU508
 1596 00c4 4C89E7   		movq	%r12, %rdi
 1597 00c7 C7402838 		movl	$56, 40(%rax)
 1597      000000
 1598 00ce 498B0424 		movq	(%r12), %rax
 1599 00d2 C7402C04 		movl	$4, 44(%rax)
 1599      000000
 1600 00d9 498B0424 		movq	(%r12), %rax
 1601 00dd FF10     		call	*(%rax)
 1602              	.LVL159:
 226:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1603              		.loc 1 226 1 view .LVU509
 1604 00df EBA4     		jmp	.L113
 1605              	.LBE35:
 1606              	.LBE34:
 1607              		.cfi_endproc
 1608              	.LFE53:
 1610              		.section	.text.alloc_barray,"ax",@progbits
 1611              		.p2align 4
 1613              	alloc_barray:
 1614              	.LVL160:
 1615              	.LFB55:
 447:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1616              		.loc 1 447 1 is_stmt 1 view -0
 1617              		.cfi_startproc
 447:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1618              		.loc 1 447 1 is_stmt 0 view .LVU511
 1619 0000 F30F1EFA 		endbr64
 448:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JBLOCKARRAY result;
 1620              		.loc 1 448 3 is_stmt 1 view .LVU512
 447:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1621              		.loc 1 447 1 is_stmt 0 view .LVU513
 1622 0004 4157     		pushq	%r15
 1623              		.cfi_def_cfa_offset 16
 1624              		.cfi_offset 15, -16
 455:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	  ((long) blocksperrow * SIZEOF(JBLOCK));
 1625              		.loc 1 455 52 view .LVU514
 1626 0006 41BFE8C9 		movl	$999999976, %r15d
 1626      9A3B
 447:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1627              		.loc 1 447 1 view .LVU515
 1628 000c 4156     		pushq	%r14
 1629              		.cfi_def_cfa_offset 24
 1630              		.cfi_offset 14, -24
 455:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	  ((long) blocksperrow * SIZEOF(JBLOCK));
 1631              		.loc 1 455 52 view .LVU516
 1632 000e 4C89F8   		movq	%r15, %rax
 447:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1633              		.loc 1 447 1 view .LVU517
 1634 0011 4155     		pushq	%r13
 1635              		.cfi_def_cfa_offset 32
 1636              		.cfi_offset 13, -32
 456:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (ltemp <= 0)
 1637              		.loc 1 456 5 view .LVU518
 1638 0013 4189D5   		movl	%edx, %r13d
 455:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	  ((long) blocksperrow * SIZEOF(JBLOCK));
 1639              		.loc 1 455 52 view .LVU519
 1640 0016 31D2     		xorl	%edx, %edx
 1641              	.LVL161:
 456:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (ltemp <= 0)
 1642              		.loc 1 456 25 view .LVU520
 1643 0018 49C1E507 		salq	$7, %r13
 1644              	.LVL162:
 447:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1645              		.loc 1 447 1 view .LVU521
 1646 001c 4154     		pushq	%r12
 1647              		.cfi_def_cfa_offset 40
 1648              		.cfi_offset 12, -40
 1649 001e 4989FC   		movq	%rdi, %r12
 455:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	  ((long) blocksperrow * SIZEOF(JBLOCK));
 1650              		.loc 1 455 52 view .LVU522
 1651 0021 49F7F5   		divq	%r13
 447:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1652              		.loc 1 447 1 view .LVU523
 1653 0024 55       		pushq	%rbp
 1654              		.cfi_def_cfa_offset 48
 1655              		.cfi_offset 6, -48
 1656 0025 53       		pushq	%rbx
 1657              		.cfi_def_cfa_offset 56
 1658              		.cfi_offset 3, -56
 1659 0026 4883EC18 		subq	$24, %rsp
 1660              		.cfi_def_cfa_offset 80
 447:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1661              		.loc 1 447 1 view .LVU524
 1662 002a 89CD     		movl	%ecx, %ebp
 448:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JBLOCKARRAY result;
 1663              		.loc 1 448 14 view .LVU525
 1664 002c 488B5F08 		movq	8(%rdi), %rbx
 1665              	.LVL163:
 449:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JBLOCKROW workspace;
 1666              		.loc 1 449 3 is_stmt 1 view .LVU526
 450:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION rowsperchunk, currow, i;
 1667              		.loc 1 450 3 view .LVU527
 451:fltk-1.3.4-1/jpeg/jmemmgr.c ****   long ltemp;
 1668              		.loc 1 451 3 view .LVU528
 452:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1669              		.loc 1 452 3 view .LVU529
 455:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	  ((long) blocksperrow * SIZEOF(JBLOCK));
 1670              		.loc 1 455 3 view .LVU530
 447:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1671              		.loc 1 447 1 is_stmt 0 view .LVU531
 1672 0030 8974240C 		movl	%esi, 12(%rsp)
 455:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	  ((long) blocksperrow * SIZEOF(JBLOCK));
 1673              		.loc 1 455 52 view .LVU532
 1674 0034 4989C7   		movq	%rax, %r15
 1675              	.LVL164:
 457:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 1676              		.loc 1 457 3 is_stmt 1 view .LVU533
 457:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 1677              		.loc 1 457 6 is_stmt 0 view .LVU534
 1678 0037 4981FDE8 		cmpq	$999999976, %r13
 1678      C99A3B
 1679 003e 760F     		jbe	.L119
 458:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (ltemp < (long) numrows)
 1680              		.loc 1 458 5 is_stmt 1 view .LVU535
 1681 0040 488B07   		movq	(%rdi), %rax
 1682              	.LVL165:
 458:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (ltemp < (long) numrows)
 1683              		.loc 1 458 5 is_stmt 0 view .LVU536
 1684 0043 C7402848 		movl	$72, 40(%rax)
 1684      000000
 1685 004a 488B07   		movq	(%rdi), %rax
 1686 004d FF10     		call	*(%rax)
 1687              	.LVL166:
 1688              	.L119:
 459:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rowsperchunk = (JDIMENSION) ltemp;
 1689              		.loc 1 459 3 is_stmt 1 view .LVU537
 459:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rowsperchunk = (JDIMENSION) ltemp;
 1690              		.loc 1 459 15 is_stmt 0 view .LVU538
 1691 004f 89E8     		movl	%ebp, %eax
 466:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				     (size_t) (numrows * SIZEOF(JBLOCKROW)));
 1692              		.loc 1 466 26 view .LVU539
 1693 0051 8B74240C 		movl	12(%rsp), %esi
 1694 0055 4C89E7   		movq	%r12, %rdi
 460:fltk-1.3.4-1/jpeg/jmemmgr.c ****   else
 1695              		.loc 1 460 18 view .LVU540
 1696 0058 4C39F8   		cmpq	%r15, %rax
 466:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				     (size_t) (numrows * SIZEOF(JBLOCKROW)));
 1697              		.loc 1 466 26 view .LVU541
 1698 005b 488D14C5 		leaq	0(,%rax,8), %rdx
 1698      00000000 
 460:fltk-1.3.4-1/jpeg/jmemmgr.c ****   else
 1699              		.loc 1 460 18 view .LVU542
 1700 0063 440F4EFD 		cmovle	%ebp, %r15d
 1701              	.LVL167:
 463:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1702              		.loc 1 463 3 is_stmt 1 view .LVU543
 463:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1703              		.loc 1 463 26 is_stmt 0 view .LVU544
 1704 0067 4489BBA0 		movl	%r15d, 160(%rbx)
 1704      000000
 466:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				     (size_t) (numrows * SIZEOF(JBLOCKROW)));
 1705              		.loc 1 466 3 is_stmt 1 view .LVU545
 470:fltk-1.3.4-1/jpeg/jmemmgr.c ****   while (currow < numrows) {
 1706              		.loc 1 470 10 is_stmt 0 view .LVU546
 1707 006e 31DB     		xorl	%ebx, %ebx
 1708              	.LVL168:
 466:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				     (size_t) (numrows * SIZEOF(JBLOCKROW)));
 1709              		.loc 1 466 26 view .LVU547
 1710 0070 E8000000 		call	alloc_small
 1710      00
 1711              	.LVL169:
 1712 0075 4989C6   		movq	%rax, %r14
 1713              	.LVL170:
 470:fltk-1.3.4-1/jpeg/jmemmgr.c ****   while (currow < numrows) {
 1714              		.loc 1 470 3 is_stmt 1 view .LVU548
 471:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rowsperchunk = MIN(rowsperchunk, numrows - currow);
 1715              		.loc 1 471 3 view .LVU549
 471:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rowsperchunk = MIN(rowsperchunk, numrows - currow);
 1716              		.loc 1 471 9 view .LVU550
 1717 0078 85ED     		testl	%ebp, %ebp
 1718 007a 7448     		je	.L118
 1719              	.LVL171:
 1720 007c 0F1F4000 		.p2align 4,,10
 1721              		.p2align 3
 1722              	.L121:
 472:fltk-1.3.4-1/jpeg/jmemmgr.c ****     workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 1723              		.loc 1 472 5 view .LVU551
 472:fltk-1.3.4-1/jpeg/jmemmgr.c ****     workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 1724              		.loc 1 472 20 is_stmt 0 view .LVU552
 1725 0080 89E8     		movl	%ebp, %eax
 473:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	(size_t) ((size_t) rowsperchunk * (size_t) blocksperrow
 1726              		.loc 1 473 29 view .LVU553
 1727 0082 8B74240C 		movl	12(%rsp), %esi
 1728 0086 4C89E7   		movq	%r12, %rdi
 472:fltk-1.3.4-1/jpeg/jmemmgr.c ****     workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 1729              		.loc 1 472 20 view .LVU554
 1730 0089 29D8     		subl	%ebx, %eax
 472:fltk-1.3.4-1/jpeg/jmemmgr.c ****     workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 1731              		.loc 1 472 18 view .LVU555
 1732 008b 4139C7   		cmpl	%eax, %r15d
 1733 008e 440F47F8 		cmova	%eax, %r15d
 1734              	.LVL172:
 473:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	(size_t) ((size_t) rowsperchunk * (size_t) blocksperrow
 1735              		.loc 1 473 5 is_stmt 1 view .LVU556
 474:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		  * SIZEOF(JBLOCK)));
 1736              		.loc 1 474 12 is_stmt 0 view .LVU557
 1737 0092 4489FA   		movl	%r15d, %edx
 473:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	(size_t) ((size_t) rowsperchunk * (size_t) blocksperrow
 1738              		.loc 1 473 29 view .LVU558
 1739 0095 490FAFD5 		imulq	%r13, %rdx
 1740 0099 E8000000 		call	alloc_large
 1740      00
 1741              	.LVL173:
 476:fltk-1.3.4-1/jpeg/jmemmgr.c ****       result[currow++] = workspace;
 1742              		.loc 1 476 5 is_stmt 1 view .LVU559
 476:fltk-1.3.4-1/jpeg/jmemmgr.c ****       result[currow++] = workspace;
 1743              		.loc 1 476 28 view .LVU560
 476:fltk-1.3.4-1/jpeg/jmemmgr.c ****       result[currow++] = workspace;
 1744              		.loc 1 476 5 is_stmt 0 view .LVU561
 1745 009e 4585FF   		testl	%r15d, %r15d
 1746 00a1 741D     		je	.L122
 1747 00a3 418D0C1F 		leal	(%r15,%rbx), %ecx
 1748 00a7 660F1F84 		.p2align 4,,10
 1748      00000000 
 1748      00
 1749              		.p2align 3
 1750              	.L123:
 477:fltk-1.3.4-1/jpeg/jmemmgr.c ****       workspace += blocksperrow;
 1751              		.loc 1 477 7 is_stmt 1 discriminator 3 view .LVU562
 1752 00b0 89DA     		movl	%ebx, %edx
 477:fltk-1.3.4-1/jpeg/jmemmgr.c ****       workspace += blocksperrow;
 1753              		.loc 1 477 20 is_stmt 0 discriminator 3 view .LVU563
 1754 00b2 83C301   		addl	$1, %ebx
 1755              	.LVL174:
 477:fltk-1.3.4-1/jpeg/jmemmgr.c ****       workspace += blocksperrow;
 1756              		.loc 1 477 24 discriminator 3 view .LVU564
 1757 00b5 498904D6 		movq	%rax, (%r14,%rdx,8)
 478:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 1758              		.loc 1 478 7 is_stmt 1 discriminator 3 view .LVU565
 478:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 1759              		.loc 1 478 17 is_stmt 0 discriminator 3 view .LVU566
 1760 00b9 4C01E8   		addq	%r13, %rax
 1761              	.LVL175:
 476:fltk-1.3.4-1/jpeg/jmemmgr.c ****       result[currow++] = workspace;
 1762              		.loc 1 476 35 is_stmt 1 discriminator 3 view .LVU567
 476:fltk-1.3.4-1/jpeg/jmemmgr.c ****       result[currow++] = workspace;
 1763              		.loc 1 476 28 discriminator 3 view .LVU568
 476:fltk-1.3.4-1/jpeg/jmemmgr.c ****       result[currow++] = workspace;
 1764              		.loc 1 476 5 is_stmt 0 discriminator 3 view .LVU569
 1765 00bc 39CB     		cmpl	%ecx, %ebx
 1766 00be 75F0     		jne	.L123
 1767              	.L122:
 471:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rowsperchunk = MIN(rowsperchunk, numrows - currow);
 1768              		.loc 1 471 9 is_stmt 1 view .LVU570
 1769 00c0 39DD     		cmpl	%ebx, %ebp
 1770 00c2 77BC     		ja	.L121
 1771              	.LVL176:
 1772              	.L118:
 483:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1773              		.loc 1 483 1 is_stmt 0 view .LVU571
 1774 00c4 4883C418 		addq	$24, %rsp
 1775              		.cfi_def_cfa_offset 56
 1776 00c8 4C89F0   		movq	%r14, %rax
 1777 00cb 5B       		popq	%rbx
 1778              		.cfi_def_cfa_offset 48
 1779 00cc 5D       		popq	%rbp
 1780              		.cfi_def_cfa_offset 40
 1781              	.LVL177:
 483:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1782              		.loc 1 483 1 view .LVU572
 1783 00cd 415C     		popq	%r12
 1784              		.cfi_def_cfa_offset 32
 1785              	.LVL178:
 483:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1786              		.loc 1 483 1 view .LVU573
 1787 00cf 415D     		popq	%r13
 1788              		.cfi_def_cfa_offset 24
 1789              	.LVL179:
 483:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1790              		.loc 1 483 1 view .LVU574
 1791 00d1 415E     		popq	%r14
 1792              		.cfi_def_cfa_offset 16
 1793              	.LVL180:
 483:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1794              		.loc 1 483 1 view .LVU575
 1795 00d3 415F     		popq	%r15
 1796              		.cfi_def_cfa_offset 8
 1797              	.LVL181:
 483:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1798              		.loc 1 483 1 view .LVU576
 1799 00d5 C3       		ret
 1800              		.cfi_endproc
 1801              	.LFE55:
 1803              		.section	.text.alloc_sarray,"ax",@progbits
 1804              		.p2align 4
 1806              	alloc_sarray:
 1807              	.LVL182:
 1808              	.LFB54:
 399:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1809              		.loc 1 399 1 is_stmt 1 view -0
 1810              		.cfi_startproc
 399:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1811              		.loc 1 399 1 is_stmt 0 view .LVU578
 1812 0000 F30F1EFA 		endbr64
 400:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JSAMPARRAY result;
 1813              		.loc 1 400 3 is_stmt 1 view .LVU579
 399:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1814              		.loc 1 399 1 is_stmt 0 view .LVU580
 1815 0004 4157     		pushq	%r15
 1816              		.cfi_def_cfa_offset 16
 1817              		.cfi_offset 15, -16
 407:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	  ((long) samplesperrow * SIZEOF(JSAMPLE));
 1818              		.loc 1 407 52 view .LVU581
 1819 0006 41BFE8C9 		movl	$999999976, %r15d
 1819      9A3B
 399:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1820              		.loc 1 399 1 view .LVU582
 1821 000c 4156     		pushq	%r14
 1822              		.cfi_def_cfa_offset 24
 1823              		.cfi_offset 14, -24
 407:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	  ((long) samplesperrow * SIZEOF(JSAMPLE));
 1824              		.loc 1 407 52 view .LVU583
 1825 000e 4C89F8   		movq	%r15, %rax
 399:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1826              		.loc 1 399 1 view .LVU584
 1827 0011 4155     		pushq	%r13
 1828              		.cfi_def_cfa_offset 32
 1829              		.cfi_offset 13, -32
 408:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (ltemp <= 0)
 1830              		.loc 1 408 26 view .LVU585
 1831 0013 4189D5   		movl	%edx, %r13d
 407:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	  ((long) samplesperrow * SIZEOF(JSAMPLE));
 1832              		.loc 1 407 52 view .LVU586
 1833 0016 31D2     		xorl	%edx, %edx
 1834              	.LVL183:
 407:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	  ((long) samplesperrow * SIZEOF(JSAMPLE));
 1835              		.loc 1 407 52 view .LVU587
 1836 0018 49F7F5   		divq	%r13
 399:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1837              		.loc 1 399 1 view .LVU588
 1838 001b 4154     		pushq	%r12
 1839              		.cfi_def_cfa_offset 40
 1840              		.cfi_offset 12, -40
 1841 001d 55       		pushq	%rbp
 1842              		.cfi_def_cfa_offset 48
 1843              		.cfi_offset 6, -48
 1844 001e 53       		pushq	%rbx
 1845              		.cfi_def_cfa_offset 56
 1846              		.cfi_offset 3, -56
 1847 001f 4883EC18 		subq	$24, %rsp
 1848              		.cfi_def_cfa_offset 80
 399:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1849              		.loc 1 399 1 view .LVU589
 1850 0023 4989FC   		movq	%rdi, %r12
 400:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JSAMPARRAY result;
 1851              		.loc 1 400 14 view .LVU590
 1852 0026 488B5F08 		movq	8(%rdi), %rbx
 1853              	.LVL184:
 401:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JSAMPROW workspace;
 1854              		.loc 1 401 3 is_stmt 1 view .LVU591
 402:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION rowsperchunk, currow, i;
 1855              		.loc 1 402 3 view .LVU592
 403:fltk-1.3.4-1/jpeg/jmemmgr.c ****   long ltemp;
 1856              		.loc 1 403 3 view .LVU593
 404:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1857              		.loc 1 404 3 view .LVU594
 407:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	  ((long) samplesperrow * SIZEOF(JSAMPLE));
 1858              		.loc 1 407 3 view .LVU595
 399:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1859              		.loc 1 399 1 is_stmt 0 view .LVU596
 1860 002a 89CD     		movl	%ecx, %ebp
 1861 002c 8974240C 		movl	%esi, 12(%rsp)
 407:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	  ((long) samplesperrow * SIZEOF(JSAMPLE));
 1862              		.loc 1 407 52 view .LVU597
 1863 0030 4989C7   		movq	%rax, %r15
 1864              	.LVL185:
 409:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 1865              		.loc 1 409 3 is_stmt 1 view .LVU598
 409:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 1866              		.loc 1 409 6 is_stmt 0 view .LVU599
 1867 0033 4981FDE8 		cmpq	$999999976, %r13
 1867      C99A3B
 1868 003a 760F     		jbe	.L135
 410:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (ltemp < (long) numrows)
 1869              		.loc 1 410 5 is_stmt 1 view .LVU600
 1870 003c 488B07   		movq	(%rdi), %rax
 1871              	.LVL186:
 410:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (ltemp < (long) numrows)
 1872              		.loc 1 410 5 is_stmt 0 view .LVU601
 1873 003f C7402848 		movl	$72, 40(%rax)
 1873      000000
 1874 0046 488B07   		movq	(%rdi), %rax
 1875 0049 FF10     		call	*(%rax)
 1876              	.LVL187:
 1877              	.L135:
 411:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rowsperchunk = (JDIMENSION) ltemp;
 1878              		.loc 1 411 3 is_stmt 1 view .LVU602
 411:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rowsperchunk = (JDIMENSION) ltemp;
 1879              		.loc 1 411 15 is_stmt 0 view .LVU603
 1880 004b 89E8     		movl	%ebp, %eax
 418:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				    (size_t) (numrows * SIZEOF(JSAMPROW)));
 1881              		.loc 1 418 25 view .LVU604
 1882 004d 8B74240C 		movl	12(%rsp), %esi
 1883 0051 4C89E7   		movq	%r12, %rdi
 412:fltk-1.3.4-1/jpeg/jmemmgr.c ****   else
 1884              		.loc 1 412 18 view .LVU605
 1885 0054 4C39F8   		cmpq	%r15, %rax
 418:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				    (size_t) (numrows * SIZEOF(JSAMPROW)));
 1886              		.loc 1 418 25 view .LVU606
 1887 0057 488D14C5 		leaq	0(,%rax,8), %rdx
 1887      00000000 
 412:fltk-1.3.4-1/jpeg/jmemmgr.c ****   else
 1888              		.loc 1 412 18 view .LVU607
 1889 005f 440F4EFD 		cmovle	%ebp, %r15d
 1890              	.LVL188:
 415:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1891              		.loc 1 415 3 is_stmt 1 view .LVU608
 415:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1892              		.loc 1 415 26 is_stmt 0 view .LVU609
 1893 0063 4489BBA0 		movl	%r15d, 160(%rbx)
 1893      000000
 418:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				    (size_t) (numrows * SIZEOF(JSAMPROW)));
 1894              		.loc 1 418 3 is_stmt 1 view .LVU610
 418:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				    (size_t) (numrows * SIZEOF(JSAMPROW)));
 1895              		.loc 1 418 25 is_stmt 0 view .LVU611
 1896 006a E8000000 		call	alloc_small
 1896      00
 1897              	.LVL189:
 1898 006f 4989C6   		movq	%rax, %r14
 1899              	.LVL190:
 422:fltk-1.3.4-1/jpeg/jmemmgr.c ****   while (currow < numrows) {
 1900              		.loc 1 422 3 is_stmt 1 view .LVU612
 423:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rowsperchunk = MIN(rowsperchunk, numrows - currow);
 1901              		.loc 1 423 3 view .LVU613
 423:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rowsperchunk = MIN(rowsperchunk, numrows - currow);
 1902              		.loc 1 423 9 view .LVU614
 1903 0072 85ED     		testl	%ebp, %ebp
 1904 0074 744E     		je	.L134
 422:fltk-1.3.4-1/jpeg/jmemmgr.c ****   while (currow < numrows) {
 1905              		.loc 1 422 10 is_stmt 0 view .LVU615
 1906 0076 31DB     		xorl	%ebx, %ebx
 1907              	.LVL191:
 1908 0078 0F1F8400 		.p2align 4,,10
 1908      00000000 
 1909              		.p2align 3
 1910              	.L140:
 424:fltk-1.3.4-1/jpeg/jmemmgr.c ****     workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 1911              		.loc 1 424 5 is_stmt 1 view .LVU616
 424:fltk-1.3.4-1/jpeg/jmemmgr.c ****     workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 1912              		.loc 1 424 20 is_stmt 0 view .LVU617
 1913 0080 89E8     		movl	%ebp, %eax
 425:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	(size_t) ((size_t) rowsperchunk * (size_t) samplesperrow
 1914              		.loc 1 425 28 view .LVU618
 1915 0082 8B74240C 		movl	12(%rsp), %esi
 1916 0086 4C89E7   		movq	%r12, %rdi
 424:fltk-1.3.4-1/jpeg/jmemmgr.c ****     workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 1917              		.loc 1 424 20 view .LVU619
 1918 0089 29D8     		subl	%ebx, %eax
 424:fltk-1.3.4-1/jpeg/jmemmgr.c ****     workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 1919              		.loc 1 424 18 view .LVU620
 1920 008b 4139C7   		cmpl	%eax, %r15d
 1921 008e 440F47F8 		cmova	%eax, %r15d
 1922              	.LVL192:
 425:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	(size_t) ((size_t) rowsperchunk * (size_t) samplesperrow
 1923              		.loc 1 425 5 is_stmt 1 view .LVU621
 426:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		  * SIZEOF(JSAMPLE)));
 1924              		.loc 1 426 12 is_stmt 0 view .LVU622
 1925 0092 4489FA   		movl	%r15d, %edx
 425:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	(size_t) ((size_t) rowsperchunk * (size_t) samplesperrow
 1926              		.loc 1 425 28 view .LVU623
 1927 0095 490FAFD5 		imulq	%r13, %rdx
 1928 0099 E8000000 		call	alloc_large
 1928      00
 1929              	.LVL193:
 428:fltk-1.3.4-1/jpeg/jmemmgr.c ****       result[currow++] = workspace;
 1930              		.loc 1 428 5 is_stmt 1 view .LVU624
 428:fltk-1.3.4-1/jpeg/jmemmgr.c ****       result[currow++] = workspace;
 1931              		.loc 1 428 28 view .LVU625
 428:fltk-1.3.4-1/jpeg/jmemmgr.c ****       result[currow++] = workspace;
 1932              		.loc 1 428 5 is_stmt 0 view .LVU626
 1933 009e 4585FF   		testl	%r15d, %r15d
 1934 00a1 741D     		je	.L138
 1935 00a3 418D0C1F 		leal	(%r15,%rbx), %ecx
 1936 00a7 660F1F84 		.p2align 4,,10
 1936      00000000 
 1936      00
 1937              		.p2align 3
 1938              	.L139:
 429:fltk-1.3.4-1/jpeg/jmemmgr.c ****       workspace += samplesperrow;
 1939              		.loc 1 429 7 is_stmt 1 discriminator 3 view .LVU627
 1940 00b0 89DA     		movl	%ebx, %edx
 429:fltk-1.3.4-1/jpeg/jmemmgr.c ****       workspace += samplesperrow;
 1941              		.loc 1 429 20 is_stmt 0 discriminator 3 view .LVU628
 1942 00b2 83C301   		addl	$1, %ebx
 1943              	.LVL194:
 429:fltk-1.3.4-1/jpeg/jmemmgr.c ****       workspace += samplesperrow;
 1944              		.loc 1 429 24 discriminator 3 view .LVU629
 1945 00b5 498904D6 		movq	%rax, (%r14,%rdx,8)
 430:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 1946              		.loc 1 430 7 is_stmt 1 discriminator 3 view .LVU630
 430:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 1947              		.loc 1 430 17 is_stmt 0 discriminator 3 view .LVU631
 1948 00b9 4C01E8   		addq	%r13, %rax
 1949              	.LVL195:
 428:fltk-1.3.4-1/jpeg/jmemmgr.c ****       result[currow++] = workspace;
 1950              		.loc 1 428 35 is_stmt 1 discriminator 3 view .LVU632
 428:fltk-1.3.4-1/jpeg/jmemmgr.c ****       result[currow++] = workspace;
 1951              		.loc 1 428 28 discriminator 3 view .LVU633
 428:fltk-1.3.4-1/jpeg/jmemmgr.c ****       result[currow++] = workspace;
 1952              		.loc 1 428 5 is_stmt 0 discriminator 3 view .LVU634
 1953 00bc 39CB     		cmpl	%ecx, %ebx
 1954 00be 75F0     		jne	.L139
 1955              	.L138:
 423:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rowsperchunk = MIN(rowsperchunk, numrows - currow);
 1956              		.loc 1 423 9 is_stmt 1 view .LVU635
 1957 00c0 39DD     		cmpl	%ebx, %ebp
 1958 00c2 77BC     		ja	.L140
 1959              	.LVL196:
 1960              	.L134:
 435:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1961              		.loc 1 435 1 is_stmt 0 view .LVU636
 1962 00c4 4883C418 		addq	$24, %rsp
 1963              		.cfi_def_cfa_offset 56
 1964 00c8 4C89F0   		movq	%r14, %rax
 1965 00cb 5B       		popq	%rbx
 1966              		.cfi_def_cfa_offset 48
 1967 00cc 5D       		popq	%rbp
 1968              		.cfi_def_cfa_offset 40
 1969              	.LVL197:
 435:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1970              		.loc 1 435 1 view .LVU637
 1971 00cd 415C     		popq	%r12
 1972              		.cfi_def_cfa_offset 32
 1973              	.LVL198:
 435:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1974              		.loc 1 435 1 view .LVU638
 1975 00cf 415D     		popq	%r13
 1976              		.cfi_def_cfa_offset 24
 1977              	.LVL199:
 435:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1978              		.loc 1 435 1 view .LVU639
 1979 00d1 415E     		popq	%r14
 1980              		.cfi_def_cfa_offset 16
 1981              	.LVL200:
 435:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1982              		.loc 1 435 1 view .LVU640
 1983 00d3 415F     		popq	%r15
 1984              		.cfi_def_cfa_offset 8
 1985              	.LVL201:
 435:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 1986              		.loc 1 435 1 view .LVU641
 1987 00d5 C3       		ret
 1988              		.cfi_endproc
 1989              	.LFE54:
 1991              		.section	.text.realize_virt_arrays,"ax",@progbits
 1992              		.p2align 4
 1994              	realize_virt_arrays:
 1995              	.LVL202:
 1996              	.LFB58:
 586:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1997              		.loc 1 586 1 is_stmt 1 view -0
 1998              		.cfi_startproc
 586:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 1999              		.loc 1 586 1 is_stmt 0 view .LVU643
 2000 0000 F30F1EFA 		endbr64
 587:fltk-1.3.4-1/jpeg/jmemmgr.c ****   long space_per_minheight, maximum_space, avail_mem;
 2001              		.loc 1 587 3 is_stmt 1 view .LVU644
 586:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 2002              		.loc 1 586 1 is_stmt 0 view .LVU645
 2003 0004 4156     		pushq	%r14
 2004              		.cfi_def_cfa_offset 16
 2005              		.cfi_offset 14, -16
 2006 0006 4155     		pushq	%r13
 2007              		.cfi_def_cfa_offset 24
 2008              		.cfi_offset 13, -24
 2009 0008 4154     		pushq	%r12
 2010              		.cfi_def_cfa_offset 32
 2011              		.cfi_offset 12, -32
 2012 000a 4989FC   		movq	%rdi, %r12
 2013 000d 55       		pushq	%rbp
 2014              		.cfi_def_cfa_offset 40
 2015              		.cfi_offset 6, -40
 2016 000e 53       		pushq	%rbx
 2017              		.cfi_def_cfa_offset 48
 2018              		.cfi_offset 3, -48
 587:fltk-1.3.4-1/jpeg/jmemmgr.c ****   long space_per_minheight, maximum_space, avail_mem;
 2019              		.loc 1 587 14 view .LVU646
 2020 000f 488B6F08 		movq	8(%rdi), %rbp
 2021              	.LVL203:
 588:fltk-1.3.4-1/jpeg/jmemmgr.c ****   long minheights, max_minheights;
 2022              		.loc 1 588 3 is_stmt 1 view .LVU647
 589:fltk-1.3.4-1/jpeg/jmemmgr.c ****   jvirt_sarray_ptr sptr;
 2023              		.loc 1 589 3 view .LVU648
 590:fltk-1.3.4-1/jpeg/jmemmgr.c ****   jvirt_barray_ptr bptr;
 2024              		.loc 1 590 3 view .LVU649
 591:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 2025              		.loc 1 591 3 view .LVU650
 597:fltk-1.3.4-1/jpeg/jmemmgr.c ****   maximum_space = 0;
 2026              		.loc 1 597 3 view .LVU651
 598:fltk-1.3.4-1/jpeg/jmemmgr.c ****   for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 2027              		.loc 1 598 3 view .LVU652
 599:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 2028              		.loc 1 599 3 view .LVU653
 599:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 2029              		.loc 1 599 13 is_stmt 0 view .LVU654
 2030 0013 488B8588 		movq	136(%rbp), %rax
 2030      000000
 2031              	.LVL204:
 599:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 2032              		.loc 1 599 38 is_stmt 1 view .LVU655
 2033 001a 488B9590 		movq	144(%rbp), %rdx
 2033      000000
 599:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 2034              		.loc 1 599 3 is_stmt 0 view .LVU656
 2035 0021 4885C0   		testq	%rax, %rax
 2036 0024 0F841E02 		je	.L152
 2036      0000
 598:fltk-1.3.4-1/jpeg/jmemmgr.c ****   for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 2037              		.loc 1 598 17 view .LVU657
 2038 002a 4531F6   		xorl	%r14d, %r14d
 597:fltk-1.3.4-1/jpeg/jmemmgr.c ****   maximum_space = 0;
 2039              		.loc 1 597 23 view .LVU658
 2040 002d 31DB     		xorl	%ebx, %ebx
 2041 002f EB10     		jmp	.L154
 2042              	.LVL205:
 2043              		.p2align 4,,10
 2044 0031 0F1F8000 		.p2align 3
 2044      000000
 2045              	.L153:
 599:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 2046              		.loc 1 599 52 is_stmt 1 discriminator 2 view .LVU659
 599:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 2047              		.loc 1 599 57 is_stmt 0 discriminator 2 view .LVU660
 2048 0038 488B4030 		movq	48(%rax), %rax
 2049              	.LVL206:
 599:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 2050              		.loc 1 599 38 is_stmt 1 discriminator 2 view .LVU661
 599:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 2051              		.loc 1 599 3 is_stmt 0 discriminator 2 view .LVU662
 2052 003c 4885C0   		testq	%rax, %rax
 2053 003f 7442     		je	.L184
 2054              	.LVL207:
 2055              	.L154:
 600:fltk-1.3.4-1/jpeg/jmemmgr.c ****       space_per_minheight += (long) sptr->maxaccess *
 2056              		.loc 1 600 5 is_stmt 1 view .LVU663
 600:fltk-1.3.4-1/jpeg/jmemmgr.c ****       space_per_minheight += (long) sptr->maxaccess *
 2057              		.loc 1 600 8 is_stmt 0 view .LVU664
 2058 0041 48833800 		cmpq	$0, (%rax)
 2059 0045 75F1     		jne	.L153
 601:fltk-1.3.4-1/jpeg/jmemmgr.c **** 			     (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 2060              		.loc 1 601 7 is_stmt 1 view .LVU665
 602:fltk-1.3.4-1/jpeg/jmemmgr.c ****       maximum_space += (long) sptr->rows_in_array *
 2061              		.loc 1 602 9 is_stmt 0 view .LVU666
 2062 0047 8B780C   		movl	12(%rax), %edi
 601:fltk-1.3.4-1/jpeg/jmemmgr.c **** 			     (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 2063              		.loc 1 601 30 view .LVU667
 2064 004a 8B7010   		movl	16(%rax), %esi
 603:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		       (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 2065              		.loc 1 603 24 view .LVU668
 2066 004d 8B4808   		movl	8(%rax), %ecx
 601:fltk-1.3.4-1/jpeg/jmemmgr.c **** 			     (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 2067              		.loc 1 601 53 view .LVU669
 2068 0050 480FAFF7 		imulq	%rdi, %rsi
 603:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		       (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 2069              		.loc 1 603 51 view .LVU670
 2070 0054 480FAFCF 		imulq	%rdi, %rcx
 601:fltk-1.3.4-1/jpeg/jmemmgr.c **** 			     (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 2071              		.loc 1 601 27 view .LVU671
 2072 0058 4801F3   		addq	%rsi, %rbx
 2073              	.LVL208:
 603:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		       (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 2074              		.loc 1 603 7 is_stmt 1 view .LVU672
 603:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		       (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 2075              		.loc 1 603 21 is_stmt 0 view .LVU673
 2076 005b 4901CE   		addq	%rcx, %r14
 2077              	.LVL209:
 603:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		       (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 2078              		.loc 1 603 21 view .LVU674
 2079 005e EBD8     		jmp	.L153
 2080              	.LVL210:
 2081              		.p2align 4,,10
 2082              		.p2align 3
 2083              	.L186:
 609:fltk-1.3.4-1/jpeg/jmemmgr.c **** 			     (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 2084              		.loc 1 609 7 is_stmt 1 view .LVU675
 610:fltk-1.3.4-1/jpeg/jmemmgr.c ****       maximum_space += (long) bptr->rows_in_array *
 2085              		.loc 1 610 9 is_stmt 0 view .LVU676
 2086 0060 8B720C   		movl	12(%rdx), %esi
 609:fltk-1.3.4-1/jpeg/jmemmgr.c **** 			     (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 2087              		.loc 1 609 30 view .LVU677
 2088 0063 8B4A10   		movl	16(%rdx), %ecx
 611:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		       (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 2089              		.loc 1 611 24 view .LVU678
 2090 0066 8B4208   		movl	8(%rdx), %eax
 609:fltk-1.3.4-1/jpeg/jmemmgr.c **** 			     (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 2091              		.loc 1 609 53 view .LVU679
 2092 0069 480FAFCE 		imulq	%rsi, %rcx
 611:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		       (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 2093              		.loc 1 611 51 view .LVU680
 2094 006d 480FAFC6 		imulq	%rsi, %rax
 610:fltk-1.3.4-1/jpeg/jmemmgr.c ****       maximum_space += (long) bptr->rows_in_array *
 2095              		.loc 1 610 35 view .LVU681
 2096 0071 48C1E107 		salq	$7, %rcx
 612:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 2097              		.loc 1 612 36 view .LVU682
 2098 0075 48C1E007 		salq	$7, %rax
 609:fltk-1.3.4-1/jpeg/jmemmgr.c **** 			     (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 2099              		.loc 1 609 27 view .LVU683
 2100 0079 4801CB   		addq	%rcx, %rbx
 2101              	.LVL211:
 611:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		       (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 2102              		.loc 1 611 7 is_stmt 1 view .LVU684
 611:fltk-1.3.4-1/jpeg/jmemmgr.c **** 		       (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 2103              		.loc 1 611 21 is_stmt 0 view .LVU685
 2104 007c 4901C6   		addq	%rax, %r14
 2105              	.LVL212:
 2106              	.L158:
 607:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 2107              		.loc 1 607 52 is_stmt 1 discriminator 2 view .LVU686
 607:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 2108              		.loc 1 607 57 is_stmt 0 discriminator 2 view .LVU687
 2109 007f 488B5230 		movq	48(%rdx), %rdx
 2110              	.LVL213:
 2111              	.L184:
 607:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 2112              		.loc 1 607 38 is_stmt 1 discriminator 2 view .LVU688
 607:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 2113              		.loc 1 607 3 is_stmt 0 discriminator 2 view .LVU689
 2114 0083 4885D2   		testq	%rdx, %rdx
 2115 0086 7408     		je	.L185
 2116              	.LVL214:
 2117              	.L159:
 608:fltk-1.3.4-1/jpeg/jmemmgr.c ****       space_per_minheight += (long) bptr->maxaccess *
 2118              		.loc 1 608 5 is_stmt 1 view .LVU690
 608:fltk-1.3.4-1/jpeg/jmemmgr.c ****       space_per_minheight += (long) bptr->maxaccess *
 2119              		.loc 1 608 8 is_stmt 0 view .LVU691
 2120 0088 48833A00 		cmpq	$0, (%rdx)
 2121 008c 75F1     		jne	.L158
 2122 008e EBD0     		jmp	.L186
 2123              		.p2align 4,,10
 2124              		.p2align 3
 2125              	.L185:
 616:fltk-1.3.4-1/jpeg/jmemmgr.c ****     return;			/* no unrealized arrays, no work */
 2126              		.loc 1 616 3 is_stmt 1 view .LVU692
 616:fltk-1.3.4-1/jpeg/jmemmgr.c ****     return;			/* no unrealized arrays, no work */
 2127              		.loc 1 616 6 is_stmt 0 view .LVU693
 2128 0090 4885DB   		testq	%rbx, %rbx
 2129 0093 0F8E1D01 		jle	.L151
 2129      0000
 620:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				 mem->total_space_allocated);
 2130              		.loc 1 620 3 is_stmt 1 view .LVU694
 620:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				 mem->total_space_allocated);
 2131              		.loc 1 620 15 is_stmt 0 view .LVU695
 2132 0099 488B8D98 		movq	152(%rbp), %rcx
 2132      000000
 2133 00a0 4C89F2   		movq	%r14, %rdx
 2134              	.LVL215:
 620:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				 mem->total_space_allocated);
 2135              		.loc 1 620 15 view .LVU696
 2136 00a3 4889DE   		movq	%rbx, %rsi
 2137 00a6 4C89E7   		movq	%r12, %rdi
 628:fltk-1.3.4-1/jpeg/jmemmgr.c ****   else {
 2138              		.loc 1 628 20 view .LVU697
 2139 00a9 41BD00CA 		movl	$1000000000, %r13d
 2139      9A3B
 620:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				 mem->total_space_allocated);
 2140              		.loc 1 620 15 view .LVU698
 2141 00af E8000000 		call	jpeg_mem_available@PLT
 2141      00
 2142              	.LVL216:
 627:fltk-1.3.4-1/jpeg/jmemmgr.c ****     max_minheights = 1000000000L;
 2143              		.loc 1 627 3 is_stmt 1 view .LVU699
 627:fltk-1.3.4-1/jpeg/jmemmgr.c ****     max_minheights = 1000000000L;
 2144              		.loc 1 627 6 is_stmt 0 view .LVU700
 2145 00b4 4C39F0   		cmpq	%r14, %rax
 2146 00b7 0F8C0301 		jl	.L187
 2146      0000
 2147              	.LVL217:
 2148              	.L161:
 640:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 2149              		.loc 1 640 3 is_stmt 1 view .LVU701
 640:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 2150              		.loc 1 640 13 is_stmt 0 view .LVU702
 2151 00bd 488B9D88 		movq	136(%rbp), %rbx
 2151      000000
 2152              	.LVL218:
 640:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 2153              		.loc 1 640 38 is_stmt 1 view .LVU703
 640:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 2154              		.loc 1 640 3 is_stmt 0 view .LVU704
 2155 00c4 4885DB   		testq	%rbx, %rbx
 2156 00c7 7510     		jne	.L162
 2157 00c9 EB6F     		jmp	.L167
 2158 00cb 0F1F4400 		.p2align 4,,10
 2158      00
 2159              		.p2align 3
 2160              	.L164:
 640:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 2161              		.loc 1 640 52 is_stmt 1 discriminator 2 view .LVU705
 640:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 2162              		.loc 1 640 57 is_stmt 0 discriminator 2 view .LVU706
 2163 00d0 488B5B30 		movq	48(%rbx), %rbx
 2164              	.LVL219:
 640:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 2165              		.loc 1 640 38 is_stmt 1 discriminator 2 view .LVU707
 640:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 2166              		.loc 1 640 3 is_stmt 0 discriminator 2 view .LVU708
 2167 00d4 4885DB   		testq	%rbx, %rbx
 2168 00d7 7461     		je	.L167
 2169              	.L162:
 641:fltk-1.3.4-1/jpeg/jmemmgr.c ****       minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 2170              		.loc 1 641 5 is_stmt 1 view .LVU709
 641:fltk-1.3.4-1/jpeg/jmemmgr.c ****       minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 2171              		.loc 1 641 8 is_stmt 0 view .LVU710
 2172 00d9 48833B00 		cmpq	$0, (%rbx)
 2173 00dd 75F1     		jne	.L164
 642:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (minheights <= max_minheights) {
 2174              		.loc 1 642 7 is_stmt 1 view .LVU711
 642:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (minheights <= max_minheights) {
 2175              		.loc 1 642 32 is_stmt 0 view .LVU712
 2176 00df 448B4B08 		movl	8(%rbx), %r9d
 642:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (minheights <= max_minheights) {
 2177              		.loc 1 642 60 view .LVU713
 2178 00e3 8B7310   		movl	16(%rbx), %esi
 2179 00e6 448B430C 		movl	12(%rbx), %r8d
 642:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (minheights <= max_minheights) {
 2180              		.loc 1 642 48 view .LVU714
 2181 00ea 498D41FF 		leaq	-1(%r9), %rax
 642:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (minheights <= max_minheights) {
 2182              		.loc 1 642 32 view .LVU715
 2183 00ee 4C89C9   		movq	%r9, %rcx
 642:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (minheights <= max_minheights) {
 2184              		.loc 1 642 60 view .LVU716
 2185 00f1 4889F7   		movq	%rsi, %rdi
 2186              	.LVL220:
 643:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	/* This buffer fits in memory */
 2187              		.loc 1 643 7 is_stmt 1 view .LVU717
 642:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (minheights <= max_minheights) {
 2188              		.loc 1 642 54 is_stmt 0 view .LVU718
 2189 00f4 4899     		cqto
 2190 00f6 48F7FE   		idivq	%rsi
 643:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	/* This buffer fits in memory */
 2191              		.loc 1 643 10 view .LVU719
 2192 00f9 4C39E8   		cmpq	%r13, %rax
 2193 00fc 0F8D1601 		jge	.L165
 2193      0000
 645:fltk-1.3.4-1/jpeg/jmemmgr.c ****       } else {
 2194              		.loc 1 645 2 is_stmt 1 view .LVU720
 645:fltk-1.3.4-1/jpeg/jmemmgr.c ****       } else {
 2195              		.loc 1 645 20 is_stmt 0 view .LVU721
 2196 0102 44894B14 		movl	%r9d, 20(%rbx)
 2197              	.LVL221:
 2198              	.L166:
 655:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				      sptr->samplesperrow, sptr->rows_in_mem);
 2199              		.loc 1 655 7 is_stmt 1 view .LVU722
 655:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				      sptr->samplesperrow, sptr->rows_in_mem);
 2200              		.loc 1 655 26 is_stmt 0 view .LVU723
 2201 0106 4489C2   		movl	%r8d, %edx
 2202 0109 BE010000 		movl	$1, %esi
 2202      00
 2203 010e 4C89E7   		movq	%r12, %rdi
 2204 0111 E8000000 		call	alloc_sarray
 2204      00
 2205              	.LVL222:
 655:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				      sptr->samplesperrow, sptr->rows_in_mem);
 2206              		.loc 1 655 24 view .LVU724
 2207 0116 488903   		movq	%rax, (%rbx)
 657:fltk-1.3.4-1/jpeg/jmemmgr.c ****       sptr->cur_start_row = 0;
 2208              		.loc 1 657 7 is_stmt 1 view .LVU725
 657:fltk-1.3.4-1/jpeg/jmemmgr.c ****       sptr->cur_start_row = 0;
 2209              		.loc 1 657 31 is_stmt 0 view .LVU726
 2210 0119 8B85A000 		movl	160(%rbp), %eax
 2210      0000
 658:fltk-1.3.4-1/jpeg/jmemmgr.c ****       sptr->first_undef_row = 0;
 2211              		.loc 1 658 27 view .LVU727
 2212 011f 48C7431C 		movq	$0, 28(%rbx)
 2212      00000000 
 657:fltk-1.3.4-1/jpeg/jmemmgr.c ****       sptr->cur_start_row = 0;
 2213              		.loc 1 657 26 view .LVU728
 2214 0127 894318   		movl	%eax, 24(%rbx)
 658:fltk-1.3.4-1/jpeg/jmemmgr.c ****       sptr->first_undef_row = 0;
 2215              		.loc 1 658 7 is_stmt 1 view .LVU729
 659:fltk-1.3.4-1/jpeg/jmemmgr.c ****       sptr->dirty = FALSE;
 2216              		.loc 1 659 7 view .LVU730
 660:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 2217              		.loc 1 660 7 view .LVU731
 660:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 2218              		.loc 1 660 19 is_stmt 0 view .LVU732
 2219 012a C7432800 		movl	$0, 40(%rbx)
 2219      000000
 640:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 2220              		.loc 1 640 52 is_stmt 1 view .LVU733
 640:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 2221              		.loc 1 640 57 is_stmt 0 view .LVU734
 2222 0131 488B5B30 		movq	48(%rbx), %rbx
 2223              	.LVL223:
 640:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 2224              		.loc 1 640 38 is_stmt 1 view .LVU735
 640:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (sptr->mem_buffer == NULL) { /* if not realized yet */
 2225              		.loc 1 640 3 is_stmt 0 view .LVU736
 2226 0135 4885DB   		testq	%rbx, %rbx
 2227 0138 759F     		jne	.L162
 2228              	.L167:
 664:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 2229              		.loc 1 664 3 is_stmt 1 view .LVU737
 664:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 2230              		.loc 1 664 13 is_stmt 0 view .LVU738
 2231 013a 488B9D90 		movq	144(%rbp), %rbx
 2231      000000
 2232              	.LVL224:
 664:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 2233              		.loc 1 664 38 is_stmt 1 view .LVU739
 664:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 2234              		.loc 1 664 3 is_stmt 0 view .LVU740
 2235 0141 4885DB   		testq	%rbx, %rbx
 2236 0144 7513     		jne	.L163
 2237 0146 EB6E     		jmp	.L151
 2238 0148 0F1F8400 		.p2align 4,,10
 2238      00000000 
 2239              		.p2align 3
 2240              	.L168:
 664:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 2241              		.loc 1 664 52 is_stmt 1 discriminator 2 view .LVU741
 664:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 2242              		.loc 1 664 57 is_stmt 0 discriminator 2 view .LVU742
 2243 0150 488B5B30 		movq	48(%rbx), %rbx
 2244              	.LVL225:
 664:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 2245              		.loc 1 664 38 is_stmt 1 discriminator 2 view .LVU743
 664:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 2246              		.loc 1 664 3 is_stmt 0 discriminator 2 view .LVU744
 2247 0154 4885DB   		testq	%rbx, %rbx
 2248 0157 745D     		je	.L151
 2249              	.L163:
 665:fltk-1.3.4-1/jpeg/jmemmgr.c ****       minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 2250              		.loc 1 665 5 is_stmt 1 view .LVU745
 665:fltk-1.3.4-1/jpeg/jmemmgr.c ****       minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 2251              		.loc 1 665 8 is_stmt 0 view .LVU746
 2252 0159 48833B00 		cmpq	$0, (%rbx)
 2253 015d 75F1     		jne	.L168
 666:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (minheights <= max_minheights) {
 2254              		.loc 1 666 7 is_stmt 1 view .LVU747
 666:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (minheights <= max_minheights) {
 2255              		.loc 1 666 32 is_stmt 0 view .LVU748
 2256 015f 448B4B08 		movl	8(%rbx), %r9d
 666:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (minheights <= max_minheights) {
 2257              		.loc 1 666 60 view .LVU749
 2258 0163 8B7310   		movl	16(%rbx), %esi
 2259 0166 448B430C 		movl	12(%rbx), %r8d
 666:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (minheights <= max_minheights) {
 2260              		.loc 1 666 48 view .LVU750
 2261 016a 498D41FF 		leaq	-1(%r9), %rax
 666:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (minheights <= max_minheights) {
 2262              		.loc 1 666 32 view .LVU751
 2263 016e 4C89C9   		movq	%r9, %rcx
 666:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (minheights <= max_minheights) {
 2264              		.loc 1 666 60 view .LVU752
 2265 0171 4889F7   		movq	%rsi, %rdi
 2266              	.LVL226:
 667:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	/* This buffer fits in memory */
 2267              		.loc 1 667 7 is_stmt 1 view .LVU753
 666:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (minheights <= max_minheights) {
 2268              		.loc 1 666 54 is_stmt 0 view .LVU754
 2269 0174 4899     		cqto
 2270 0176 48F7FE   		idivq	%rsi
 667:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	/* This buffer fits in memory */
 2271              		.loc 1 667 10 view .LVU755
 2272 0179 4C39E8   		cmpq	%r13, %rax
 2273 017c 7D62     		jge	.L169
 669:fltk-1.3.4-1/jpeg/jmemmgr.c ****       } else {
 2274              		.loc 1 669 2 is_stmt 1 view .LVU756
 669:fltk-1.3.4-1/jpeg/jmemmgr.c ****       } else {
 2275              		.loc 1 669 20 is_stmt 0 view .LVU757
 2276 017e 44894B14 		movl	%r9d, 20(%rbx)
 2277              	.LVL227:
 2278              	.L170:
 679:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				      bptr->blocksperrow, bptr->rows_in_mem);
 2279              		.loc 1 679 7 is_stmt 1 view .LVU758
 679:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				      bptr->blocksperrow, bptr->rows_in_mem);
 2280              		.loc 1 679 26 is_stmt 0 view .LVU759
 2281 0182 4489C2   		movl	%r8d, %edx
 2282 0185 BE010000 		movl	$1, %esi
 2282      00
 2283 018a 4C89E7   		movq	%r12, %rdi
 2284 018d E8000000 		call	alloc_barray
 2284      00
 2285              	.LVL228:
 679:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				      bptr->blocksperrow, bptr->rows_in_mem);
 2286              		.loc 1 679 24 view .LVU760
 2287 0192 488903   		movq	%rax, (%rbx)
 681:fltk-1.3.4-1/jpeg/jmemmgr.c ****       bptr->cur_start_row = 0;
 2288              		.loc 1 681 7 is_stmt 1 view .LVU761
 681:fltk-1.3.4-1/jpeg/jmemmgr.c ****       bptr->cur_start_row = 0;
 2289              		.loc 1 681 31 is_stmt 0 view .LVU762
 2290 0195 8B85A000 		movl	160(%rbp), %eax
 2290      0000
 682:fltk-1.3.4-1/jpeg/jmemmgr.c ****       bptr->first_undef_row = 0;
 2291              		.loc 1 682 27 view .LVU763
 2292 019b 48C7431C 		movq	$0, 28(%rbx)
 2292      00000000 
 681:fltk-1.3.4-1/jpeg/jmemmgr.c ****       bptr->cur_start_row = 0;
 2293              		.loc 1 681 26 view .LVU764
 2294 01a3 894318   		movl	%eax, 24(%rbx)
 682:fltk-1.3.4-1/jpeg/jmemmgr.c ****       bptr->first_undef_row = 0;
 2295              		.loc 1 682 7 is_stmt 1 view .LVU765
 683:fltk-1.3.4-1/jpeg/jmemmgr.c ****       bptr->dirty = FALSE;
 2296              		.loc 1 683 7 view .LVU766
 684:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 2297              		.loc 1 684 7 view .LVU767
 684:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 2298              		.loc 1 684 19 is_stmt 0 view .LVU768
 2299 01a6 C7432800 		movl	$0, 40(%rbx)
 2299      000000
 664:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 2300              		.loc 1 664 52 is_stmt 1 view .LVU769
 664:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 2301              		.loc 1 664 57 is_stmt 0 view .LVU770
 2302 01ad 488B5B30 		movq	48(%rbx), %rbx
 2303              	.LVL229:
 664:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 2304              		.loc 1 664 38 is_stmt 1 view .LVU771
 664:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 2305              		.loc 1 664 3 is_stmt 0 view .LVU772
 2306 01b1 4885DB   		testq	%rbx, %rbx
 2307 01b4 75A3     		jne	.L163
 2308              	.LVL230:
 2309              	.L151:
 687:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 2310              		.loc 1 687 1 view .LVU773
 2311 01b6 5B       		popq	%rbx
 2312              		.cfi_remember_state
 2313              		.cfi_def_cfa_offset 40
 2314 01b7 5D       		popq	%rbp
 2315              		.cfi_def_cfa_offset 32
 2316              	.LVL231:
 687:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 2317              		.loc 1 687 1 view .LVU774
 2318 01b8 415C     		popq	%r12
 2319              		.cfi_def_cfa_offset 24
 2320              	.LVL232:
 687:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 2321              		.loc 1 687 1 view .LVU775
 2322 01ba 415D     		popq	%r13
 2323              		.cfi_def_cfa_offset 16
 2324 01bc 415E     		popq	%r14
 2325              		.cfi_def_cfa_offset 8
 2326 01be C3       		ret
 2327              	.LVL233:
 2328 01bf 90       		.p2align 4,,10
 2329              		.p2align 3
 2330              	.L187:
 2331              		.cfi_restore_state
 630:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* If there doesn't seem to be enough space, try to get the minimum
 2332              		.loc 1 630 5 is_stmt 1 view .LVU776
 634:fltk-1.3.4-1/jpeg/jmemmgr.c ****       max_minheights = 1;
 2333              		.loc 1 634 5 view .LVU777
 630:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* If there doesn't seem to be enough space, try to get the minimum
 2334              		.loc 1 630 20 is_stmt 0 view .LVU778
 2335 01c0 4899     		cqto
 2336 01c2 41BD0100 		movl	$1, %r13d
 2336      0000
 2337 01c8 48F7FB   		idivq	%rbx
 2338              	.LVL234:
 630:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* If there doesn't seem to be enough space, try to get the minimum
 2339              		.loc 1 630 20 view .LVU779
 2340 01cb 4885C0   		testq	%rax, %rax
 2341 01ce 4C0F4FE8 		cmovg	%rax, %r13
 2342 01d2 E9E6FEFF 		jmp	.L161
 2342      FF
 2343              	.LVL235:
 2344 01d7 660F1F84 		.p2align 4,,10
 2344      00000000 
 2344      00
 2345              		.p2align 3
 2346              	.L169:
 672:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 2347              		.loc 1 672 2 is_stmt 1 view .LVU780
 672:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 2348              		.loc 1 672 22 is_stmt 0 view .LVU781
 2349 01e0 410FAFFD 		imull	%r13d, %edi
 675:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				(long) SIZEOF(JBLOCK));
 2350              		.loc 1 675 5 view .LVU782
 2351 01e4 4489C2   		movl	%r8d, %edx
 673:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				(long) bptr->rows_in_array *
 2352              		.loc 1 673 33 view .LVU783
 2353 01e7 488D7338 		leaq	56(%rbx), %rsi
 2354              	.LVL236:
 674:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				(long) bptr->blocksperrow *
 2355              		.loc 1 674 32 view .LVU784
 2356 01eb 490FAFD1 		imulq	%r9, %rdx
 672:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 2357              		.loc 1 672 20 view .LVU785
 2358 01ef 897B14   		movl	%edi, 20(%rbx)
 673:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				(long) bptr->rows_in_array *
 2359              		.loc 1 673 2 is_stmt 1 view .LVU786
 2360 01f2 4C89E7   		movq	%r12, %rdi
 2361 01f5 48C1E207 		salq	$7, %rdx
 2362 01f9 E8000000 		call	jpeg_open_backing_store@PLT
 2362      00
 2363              	.LVL237:
 677:fltk-1.3.4-1/jpeg/jmemmgr.c ****       }
 2364              		.loc 1 677 2 view .LVU787
 677:fltk-1.3.4-1/jpeg/jmemmgr.c ****       }
 2365              		.loc 1 677 17 is_stmt 0 view .LVU788
 2366 01fe C7432C01 		movl	$1, 44(%rbx)
 2366      000000
 2367 0205 8B4B14   		movl	20(%rbx), %ecx
 2368 0208 448B430C 		movl	12(%rbx), %r8d
 2369 020c E971FFFF 		jmp	.L170
 2369      FF
 2370              	.LVL238:
 2371              		.p2align 4,,10
 2372 0211 0F1F8000 		.p2align 3
 2372      000000
 2373              	.L165:
 648:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 2374              		.loc 1 648 2 is_stmt 1 view .LVU789
 648:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 2375              		.loc 1 648 22 is_stmt 0 view .LVU790
 2376 0218 410FAFFD 		imull	%r13d, %edi
 651:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				(long) SIZEOF(JSAMPLE));
 2377              		.loc 1 651 5 view .LVU791
 2378 021c 4489C2   		movl	%r8d, %edx
 649:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				(long) sptr->rows_in_array *
 2379              		.loc 1 649 33 view .LVU792
 2380 021f 488D7338 		leaq	56(%rbx), %rsi
 2381              	.LVL239:
 649:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				(long) sptr->rows_in_array *
 2382              		.loc 1 649 2 view .LVU793
 2383 0223 490FAFD1 		imulq	%r9, %rdx
 648:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 2384              		.loc 1 648 20 view .LVU794
 2385 0227 897B14   		movl	%edi, 20(%rbx)
 649:fltk-1.3.4-1/jpeg/jmemmgr.c **** 				(long) sptr->rows_in_array *
 2386              		.loc 1 649 2 is_stmt 1 view .LVU795
 2387 022a 4C89E7   		movq	%r12, %rdi
 2388 022d E8000000 		call	jpeg_open_backing_store@PLT
 2388      00
 2389              	.LVL240:
 653:fltk-1.3.4-1/jpeg/jmemmgr.c ****       }
 2390              		.loc 1 653 2 view .LVU796
 653:fltk-1.3.4-1/jpeg/jmemmgr.c ****       }
 2391              		.loc 1 653 17 is_stmt 0 view .LVU797
 2392 0232 C7432C01 		movl	$1, 44(%rbx)
 2392      000000
 2393 0239 8B4B14   		movl	20(%rbx), %ecx
 2394 023c 448B430C 		movl	12(%rbx), %r8d
 2395 0240 E9C1FEFF 		jmp	.L166
 2395      FF
 2396              	.LVL241:
 2397              		.p2align 4,,10
 2398 0245 0F1F00   		.p2align 3
 2399              	.L152:
 607:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 2400              		.loc 1 607 3 is_stmt 1 view .LVU798
 607:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 2401              		.loc 1 607 38 view .LVU799
 597:fltk-1.3.4-1/jpeg/jmemmgr.c ****   maximum_space = 0;
 2402              		.loc 1 597 23 is_stmt 0 view .LVU800
 2403 0248 31DB     		xorl	%ebx, %ebx
 598:fltk-1.3.4-1/jpeg/jmemmgr.c ****   for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 2404              		.loc 1 598 17 view .LVU801
 2405 024a 4531F6   		xorl	%r14d, %r14d
 607:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (bptr->mem_buffer == NULL) { /* if not realized yet */
 2406              		.loc 1 607 3 view .LVU802
 2407 024d 4885D2   		testq	%rdx, %rdx
 2408 0250 0F8532FE 		jne	.L159
 2408      FFFF
 2409 0256 E95BFFFF 		jmp	.L151
 2409      FF
 2410              		.cfi_endproc
 2411              	.LFE58:
 2413              		.section	.text.access_virt_sarray,"ax",@progbits
 2414              		.p2align 4
 2416              	access_virt_sarray:
 2417              	.LVL242:
 2418              	.LFB61:
 763:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION end_row = start_row + num_rows;
 2419              		.loc 1 763 1 is_stmt 1 view -0
 2420              		.cfi_startproc
 763:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION end_row = start_row + num_rows;
 2421              		.loc 1 763 1 is_stmt 0 view .LVU804
 2422 0000 F30F1EFA 		endbr64
 764:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION undef_row;
 2423              		.loc 1 764 3 is_stmt 1 view .LVU805
 763:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION end_row = start_row + num_rows;
 2424              		.loc 1 763 1 is_stmt 0 view .LVU806
 2425 0004 4157     		pushq	%r15
 2426              		.cfi_def_cfa_offset 16
 2427              		.cfi_offset 15, -16
 764:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION undef_row;
 2428              		.loc 1 764 14 view .LVU807
 2429 0006 8D040A   		leal	(%rdx,%rcx), %eax
 763:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION end_row = start_row + num_rows;
 2430              		.loc 1 763 1 view .LVU808
 2431 0009 4156     		pushq	%r14
 2432              		.cfi_def_cfa_offset 24
 2433              		.cfi_offset 14, -24
 2434 000b 4989FE   		movq	%rdi, %r14
 2435 000e 4155     		pushq	%r13
 2436              		.cfi_def_cfa_offset 32
 2437              		.cfi_offset 13, -32
 2438 0010 4154     		pushq	%r12
 2439              		.cfi_def_cfa_offset 40
 2440              		.cfi_offset 12, -40
 2441 0012 55       		pushq	%rbp
 2442              		.cfi_def_cfa_offset 48
 2443              		.cfi_offset 6, -48
 2444 0013 89D5     		movl	%edx, %ebp
 2445 0015 53       		pushq	%rbx
 2446              		.cfi_def_cfa_offset 56
 2447              		.cfi_offset 3, -56
 2448 0016 4889F3   		movq	%rsi, %rbx
 2449 0019 4883EC28 		subq	$40, %rsp
 2450              		.cfi_def_cfa_offset 96
 763:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION end_row = start_row + num_rows;
 2451              		.loc 1 763 1 view .LVU809
 2452 001d 44894424 		movl	%r8d, 28(%rsp)
 2452      1C
 764:fltk-1.3.4-1/jpeg/jmemmgr.c ****   JDIMENSION undef_row;
 2453              		.loc 1 764 14 view .LVU810
 2454 0022 89442418 		movl	%eax, 24(%rsp)
 2455              	.LVL243:
 765:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 2456              		.loc 1 765 3 is_stmt 1 view .LVU811
 768:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->mem_buffer == NULL)
 2457              		.loc 1 768 3 view .LVU812
 768:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->mem_buffer == NULL)
 2458              		.loc 1 768 6 is_stmt 0 view .LVU813
 2459 0026 394608   		cmpl	%eax, 8(%rsi)
 2460 0029 7209     		jb	.L189
 768:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->mem_buffer == NULL)
 2461              		.loc 1 768 36 discriminator 1 view .LVU814
 2462 002b 394E10   		cmpl	%ecx, 16(%rsi)
 2463 002e 0F833C02 		jnb	.L226
 2463      0000
 2464              	.L189:
 770:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 2465              		.loc 1 770 5 is_stmt 1 view .LVU815
 2466 0034 498B06   		movq	(%r14), %rax
 2467              	.LVL244:
 770:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 2468              		.loc 1 770 5 is_stmt 0 view .LVU816
 2469 0037 4C89F7   		movq	%r14, %rdi
 2470              	.LVL245:
 770:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 2471              		.loc 1 770 5 view .LVU817
 2472 003a C7402817 		movl	$23, 40(%rax)
 2472      000000
 2473 0041 498B06   		movq	(%r14), %rax
 2474 0044 FF10     		call	*(%rax)
 2475              	.LVL246:
 2476              	.L190:
 773:fltk-1.3.4-1/jpeg/jmemmgr.c ****       end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 2477              		.loc 1 773 3 is_stmt 1 view .LVU818
 773:fltk-1.3.4-1/jpeg/jmemmgr.c ****       end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 2478              		.loc 1 773 22 is_stmt 0 view .LVU819
 2479 0046 448B4B1C 		movl	28(%rbx), %r9d
 773:fltk-1.3.4-1/jpeg/jmemmgr.c ****       end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 2480              		.loc 1 773 6 view .LVU820
 2481 004a 4139E9   		cmpl	%ebp, %r9d
 2482 004d 0F87D500 		ja	.L191
 2482      0000
 774:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (! ptr->b_s_open)
 2483              		.loc 1 774 35 discriminator 1 view .LVU821
 2484 0053 8B4314   		movl	20(%rbx), %eax
 2485 0056 4401C8   		addl	%r9d, %eax
 773:fltk-1.3.4-1/jpeg/jmemmgr.c ****       end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 2486              		.loc 1 773 38 discriminator 1 view .LVU822
 2487 0059 3B442418 		cmpl	24(%rsp), %eax
 2488 005d 0F82C500 		jb	.L191
 2488      0000
 2489              	.L225:
 2490 0063 8B5320   		movl	32(%rbx), %edx
 2491              	.L192:
 810:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (ptr->first_undef_row < start_row) {
 2492              		.loc 1 810 3 is_stmt 1 view .LVU823
 810:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (ptr->first_undef_row < start_row) {
 2493              		.loc 1 810 6 is_stmt 0 view .LVU824
 2494 0066 39542418 		cmpl	%edx, 24(%rsp)
 2495 006a 0F868A00 		jbe	.L202
 2495      0000
 811:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (writable)		/* writer skipped over a section of array */
 2496              		.loc 1 811 5 is_stmt 1 view .LVU825
 811:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (writable)		/* writer skipped over a section of array */
 2497              		.loc 1 811 8 is_stmt 0 view .LVU826
 2498 0070 39D5     		cmpl	%edx, %ebp
 2499 0072 0F860802 		jbe	.L203
 2499      0000
 812:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 2500              		.loc 1 812 7 is_stmt 1 view .LVU827
 812:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 2501              		.loc 1 812 10 is_stmt 0 view .LVU828
 2502 0078 448B4424 		movl	28(%rsp), %r8d
 2502      1C
 2503 007d 4585C0   		testl	%r8d, %r8d
 2504 0080 0F841A03 		je	.L212
 2504      0000
 813:fltk-1.3.4-1/jpeg/jmemmgr.c ****       undef_row = start_row;	/* but reader is allowed to read ahead */
 2505              		.loc 1 813 2 is_stmt 1 view .LVU829
 2506 0086 498B06   		movq	(%r14), %rax
 2507 0089 4C89F7   		movq	%r14, %rdi
 2508 008c C7402817 		movl	$23, 40(%rax)
 2508      000000
 2509 0093 498B06   		movq	(%r14), %rax
 2510 0096 FF10     		call	*(%rax)
 2511              	.LVL247:
 818:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->first_undef_row = end_row;
 2512              		.loc 1 818 5 view .LVU830
 813:fltk-1.3.4-1/jpeg/jmemmgr.c ****       undef_row = start_row;	/* but reader is allowed to read ahead */
 2513              		.loc 1 813 2 is_stmt 0 view .LVU831
 2514 0098 89EA     		movl	%ebp, %edx
 2515              	.LVL248:
 2516              	.L205:
 819:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (ptr->pre_zero) {
 2517              		.loc 1 819 7 is_stmt 1 view .LVU832
 819:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (ptr->pre_zero) {
 2518              		.loc 1 819 28 is_stmt 0 view .LVU833
 2519 009a 8B442418 		movl	24(%rsp), %eax
 820:fltk-1.3.4-1/jpeg/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 2520              		.loc 1 820 8 view .LVU834
 2521 009e 8B4B24   		movl	36(%rbx), %ecx
 819:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (ptr->pre_zero) {
 2522              		.loc 1 819 28 view .LVU835
 2523 00a1 894320   		movl	%eax, 32(%rbx)
 820:fltk-1.3.4-1/jpeg/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 2524              		.loc 1 820 5 is_stmt 1 view .LVU836
 2525 00a4 8B431C   		movl	28(%rbx), %eax
 820:fltk-1.3.4-1/jpeg/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 2526              		.loc 1 820 8 is_stmt 0 view .LVU837
 2527 00a7 85C9     		testl	%ecx, %ecx
 2528 00a9 0F847901 		je	.L208
 2528      0000
 2529              	.L207:
 2530              	.LBB44:
 821:fltk-1.3.4-1/jpeg/jmemmgr.c ****       undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 2531              		.loc 1 821 7 is_stmt 1 view .LVU838
 823:fltk-1.3.4-1/jpeg/jmemmgr.c ****       while (undef_row < end_row) {
 2532              		.loc 1 823 15 is_stmt 0 view .LVU839
 2533 00af 448B6C24 		movl	24(%rsp), %r13d
 2533      18
 822:fltk-1.3.4-1/jpeg/jmemmgr.c ****       end_row -= ptr->cur_start_row;
 2534              		.loc 1 822 17 view .LVU840
 2535 00b4 89D1     		movl	%edx, %ecx
 821:fltk-1.3.4-1/jpeg/jmemmgr.c ****       undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 2536              		.loc 1 821 14 view .LVU841
 2537 00b6 448B630C 		movl	12(%rbx), %r12d
 2538              	.LVL249:
 822:fltk-1.3.4-1/jpeg/jmemmgr.c ****       end_row -= ptr->cur_start_row;
 2539              		.loc 1 822 7 is_stmt 1 view .LVU842
 822:fltk-1.3.4-1/jpeg/jmemmgr.c ****       end_row -= ptr->cur_start_row;
 2540              		.loc 1 822 17 is_stmt 0 view .LVU843
 2541 00ba 29C1     		subl	%eax, %ecx
 2542              	.LVL250:
 823:fltk-1.3.4-1/jpeg/jmemmgr.c ****       while (undef_row < end_row) {
 2543              		.loc 1 823 7 is_stmt 1 view .LVU844
 823:fltk-1.3.4-1/jpeg/jmemmgr.c ****       while (undef_row < end_row) {
 2544              		.loc 1 823 15 is_stmt 0 view .LVU845
 2545 00bc 4129C5   		subl	%eax, %r13d
 2546              	.LVL251:
 824:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 2547              		.loc 1 824 7 is_stmt 1 view .LVU846
 824:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 2548              		.loc 1 824 13 view .LVU847
 2549 00bf 4439E9   		cmpl	%r13d, %ecx
 2550 00c2 7339     		jnb	.L209
 2551 00c4 29D0     		subl	%edx, %eax
 2552 00c6 4C8D3CCD 		leaq	0(,%rcx,8), %r15
 2552      00000000 
 2553 00ce 418D4405 		leal	-1(%r13,%rax), %eax
 2553      FF
 2554 00d3 4C8D6C01 		leaq	1(%rcx,%rax), %r13
 2554      01
 2555              	.LVL252:
 824:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 2556              		.loc 1 824 13 is_stmt 0 view .LVU848
 2557 00d8 49C1E503 		salq	$3, %r13
 2558              	.LVL253:
 2559 00dc 0F1F4000 		.p2align 4,,10
 2560              		.p2align 3
 2561              	.L210:
 825:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	undef_row++;
 2562              		.loc 1 825 2 is_stmt 1 view .LVU849
 2563              	.LBB45:
 2564              	.LBI45:
  59:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
 2565              		.loc 2 59 1 view .LVU850
 2566              	.LBB46:
 2567              		.loc 2 71 3 view .LVU851
 2568              	.LBE46:
 2569              	.LBE45:
 825:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	undef_row++;
 2570              		.loc 1 825 2 is_stmt 0 view .LVU852
 2571 00e0 488B03   		movq	(%rbx), %rax
 2572              	.LBB48:
 2573              	.LBB47:
 2574              		.loc 2 71 10 view .LVU853
 2575 00e3 4C89E2   		movq	%r12, %rdx
 2576 00e6 31F6     		xorl	%esi, %esi
 2577 00e8 4A8B3C38 		movq	(%rax,%r15), %rdi
 2578 00ec 4983C708 		addq	$8, %r15
 2579              	.LVL254:
 2580              		.loc 2 71 10 view .LVU854
 2581 00f0 E8000000 		call	memset@PLT
 2581      00
 2582              	.LVL255:
 2583              		.loc 2 71 10 view .LVU855
 2584              	.LBE47:
 2585              	.LBE48:
 826:fltk-1.3.4-1/jpeg/jmemmgr.c ****       }
 2586              		.loc 1 826 2 is_stmt 1 view .LVU856
 824:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 2587              		.loc 1 824 13 view .LVU857
 2588 00f5 4D39FD   		cmpq	%r15, %r13
 2589 00f8 75E6     		jne	.L210
 2590              	.LVL256:
 2591              	.L202:
 824:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 2592              		.loc 1 824 13 is_stmt 0 view .LVU858
 2593 00fa 8B431C   		movl	28(%rbx), %eax
 2594              	.L209:
 824:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 2595              		.loc 1 824 13 view .LVU859
 2596              	.LBE44:
 834:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ptr->dirty = TRUE;
 2597              		.loc 1 834 3 is_stmt 1 view .LVU860
 834:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ptr->dirty = TRUE;
 2598              		.loc 1 834 6 is_stmt 0 view .LVU861
 2599 00fd 8B54241C 		movl	28(%rsp), %edx
 2600 0101 85D2     		testl	%edx, %edx
 2601 0103 0F851F01 		jne	.L208
 2601      0000
 2602              	.L211:
 837:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 2603              		.loc 1 837 3 is_stmt 1 view .LVU862
 837:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 2604              		.loc 1 837 39 is_stmt 0 view .LVU863
 2605 0109 29C5     		subl	%eax, %ebp
 2606              	.LVL257:
 837:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 2607              		.loc 1 837 26 view .LVU864
 2608 010b 488B03   		movq	(%rbx), %rax
 838:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 2609              		.loc 1 838 1 view .LVU865
 2610 010e 4883C428 		addq	$40, %rsp
 2611              		.cfi_remember_state
 2612              		.cfi_def_cfa_offset 56
 2613 0112 5B       		popq	%rbx
 2614              		.cfi_def_cfa_offset 48
 2615              	.LVL258:
 837:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 2616              		.loc 1 837 26 view .LVU866
 2617 0113 488D04E8 		leaq	(%rax,%rbp,8), %rax
 838:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 2618              		.loc 1 838 1 view .LVU867
 2619 0117 5D       		popq	%rbp
 2620              		.cfi_def_cfa_offset 40
 2621 0118 415C     		popq	%r12
 2622              		.cfi_def_cfa_offset 32
 2623 011a 415D     		popq	%r13
 2624              		.cfi_def_cfa_offset 24
 2625 011c 415E     		popq	%r14
 2626              		.cfi_def_cfa_offset 16
 2627              	.LVL259:
 838:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 2628              		.loc 1 838 1 view .LVU868
 2629 011e 415F     		popq	%r15
 2630              		.cfi_def_cfa_offset 8
 2631 0120 C3       		ret
 2632              	.LVL260:
 2633              		.p2align 4,,10
 2634 0121 0F1F8000 		.p2align 3
 2634      000000
 2635              	.L191:
 2636              		.cfi_restore_state
 775:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 2637              		.loc 1 775 5 is_stmt 1 view .LVU869
 775:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 2638              		.loc 1 775 8 is_stmt 0 view .LVU870
 2639 0128 448B5B2C 		movl	44(%rbx), %r11d
 2640 012c 4585DB   		testl	%r11d, %r11d
 2641 012f 0F841B01 		je	.L227
 2641      0000
 2642              	.L193:
 778:fltk-1.3.4-1/jpeg/jmemmgr.c ****       do_sarray_io(cinfo, ptr, TRUE);
 2643              		.loc 1 778 5 is_stmt 1 view .LVU871
 778:fltk-1.3.4-1/jpeg/jmemmgr.c ****       do_sarray_io(cinfo, ptr, TRUE);
 2644              		.loc 1 778 8 is_stmt 0 view .LVU872
 2645 0135 448B5328 		movl	40(%rbx), %r10d
 2646 0139 448B630C 		movl	12(%rbx), %r12d
 2647 013d 8B7314   		movl	20(%rbx), %esi
 2648 0140 8B5320   		movl	32(%rbx), %edx
 2649 0143 4585D2   		testl	%r10d, %r10d
 2650 0146 0F855401 		jne	.L228
 2650      0000
 2651              	.L194:
 789:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->cur_start_row = start_row;
 2652              		.loc 1 789 5 is_stmt 1 view .LVU873
 2653 014c 89E8     		movl	%ebp, %eax
 789:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->cur_start_row = start_row;
 2654              		.loc 1 789 8 is_stmt 0 view .LVU874
 2655 014e 89E9     		movl	%ebp, %ecx
 2656 0150 4439CD   		cmpl	%r9d, %ebp
 2657 0153 0F86DF00 		jbe	.L229
 2657      0000
 2658              	.L199:
 2659              	.LBB49:
 2660              	.LBB50:
 697:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Loop to read or write each allocation chunk in mem_buffer */
 2661              		.loc 1 697 15 view .LVU875
 2662 0159 4D89E7   		movq	%r12, %r15
 2663 015c 894B1C   		movl	%ecx, 28(%rbx)
 2664              	.LBE50:
 2665              	.LBE49:
 804:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 2666              		.loc 1 804 5 is_stmt 1 view .LVU876
 2667              	.LVL261:
 2668              	.LBB52:
 2669              	.LBI49:
 691:fltk-1.3.4-1/jpeg/jmemmgr.c **** /* Do backing store read or write of a virtual sample array */
 2670              		.loc 1 691 1 view .LVU877
 2671              	.LBB51:
 694:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 2672              		.loc 1 694 3 view .LVU878
 696:fltk-1.3.4-1/jpeg/jmemmgr.c ****   file_offset = ptr->cur_start_row * bytesperrow;
 2673              		.loc 1 696 3 view .LVU879
 697:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Loop to read or write each allocation chunk in mem_buffer */
 2674              		.loc 1 697 3 view .LVU880
 697:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Loop to read or write each allocation chunk in mem_buffer */
 2675              		.loc 1 697 15 is_stmt 0 view .LVU881
 2676 015f 4C0FAFF8 		imulq	%rax, %r15
 2677              	.LVL262:
 699:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 2678              		.loc 1 699 3 is_stmt 1 view .LVU882
 699:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 2679              		.loc 1 699 15 view .LVU883
 699:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 2680              		.loc 1 699 3 is_stmt 0 view .LVU884
 2681 0163 4885F6   		testq	%rsi, %rsi
 2682 0166 0F84FAFE 		je	.L192
 2682      FFFF
 701:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than is currently defined */
 2683              		.loc 1 701 5 is_stmt 1 view .LVU885
 701:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than is currently defined */
 2684              		.loc 1 701 12 is_stmt 0 view .LVU886
 2685 016c 448B4B18 		movl	24(%rbx), %r9d
 701:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than is currently defined */
 2686              		.loc 1 701 10 view .LVU887
 2687 0170 4939F1   		cmpq	%rsi, %r9
 2688 0173 4C0F4FCE 		cmovg	%rsi, %r9
 2689              	.LVL263:
 703:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 2690              		.loc 1 703 5 is_stmt 1 view .LVU888
 704:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than fits in file */
 2691              		.loc 1 704 5 view .LVU889
 704:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than fits in file */
 2692              		.loc 1 704 12 is_stmt 0 view .LVU890
 2693 0177 89D6     		movl	%edx, %esi
 2694 0179 4829C6   		subq	%rax, %rsi
 704:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than fits in file */
 2695              		.loc 1 704 10 view .LVU891
 2696 017c 4C39CE   		cmpq	%r9, %rsi
 704:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than fits in file */
 2697              		.loc 1 704 12 view .LVU892
 2698 017f 4989F0   		movq	%rsi, %r8
 704:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than fits in file */
 2699              		.loc 1 704 10 view .LVU893
 2700 0182 4C89CE   		movq	%r9, %rsi
 2701 0185 490F4EF0 		cmovle	%r8, %rsi
 2702              	.LVL264:
 706:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (rows <= 0)		/* this chunk might be past end of file! */
 2703              		.loc 1 706 5 is_stmt 1 view .LVU894
 706:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (rows <= 0)		/* this chunk might be past end of file! */
 2704              		.loc 1 706 12 is_stmt 0 view .LVU895
 2705 0189 448B4308 		movl	8(%rbx), %r8d
 2706 018d 4929C0   		subq	%rax, %r8
 706:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (rows <= 0)		/* this chunk might be past end of file! */
 2707              		.loc 1 706 10 view .LVU896
 2708 0190 4939F0   		cmpq	%rsi, %r8
 2709 0193 4C0F4FC6 		cmovg	%rsi, %r8
 2710              	.LVL265:
 707:fltk-1.3.4-1/jpeg/jmemmgr.c ****       break;
 2711              		.loc 1 707 5 is_stmt 1 view .LVU897
 707:fltk-1.3.4-1/jpeg/jmemmgr.c ****       break;
 2712              		.loc 1 707 8 is_stmt 0 view .LVU898
 2713 0197 4D85C0   		testq	%r8, %r8
 2714 019a 0F8EC6FE 		jle	.L192
 2714      FFFF
 2715 01a0 488D4338 		leaq	56(%rbx), %rax
 699:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 2716              		.loc 1 699 10 view .LVU899
 2717 01a4 4531ED   		xorl	%r13d, %r13d
 2718 01a7 48894424 		movq	%rax, 16(%rsp)
 2718      10
 2719 01ac EB3B     		jmp	.L200
 2720              	.LVL266:
 2721 01ae 6690     		.p2align 4,,10
 2722              		.p2align 3
 2723              	.L201:
 701:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than is currently defined */
 2724              		.loc 1 701 5 is_stmt 1 view .LVU900
 701:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than is currently defined */
 2725              		.loc 1 701 12 is_stmt 0 view .LVU901
 2726 01b0 4D29E8   		subq	%r13, %r8
 703:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 2727              		.loc 1 703 15 view .LVU902
 2728 01b3 448B4B1C 		movl	28(%rbx), %r9d
 701:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than is currently defined */
 2729              		.loc 1 701 10 view .LVU903
 2730 01b7 4939F0   		cmpq	%rsi, %r8
 2731 01ba 490F4EF0 		cmovle	%r8, %rsi
 2732              	.LVL267:
 703:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 2733              		.loc 1 703 5 is_stmt 1 view .LVU904
 704:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than fits in file */
 2734              		.loc 1 704 12 is_stmt 0 view .LVU905
 2735 01be 448B4320 		movl	32(%rbx), %r8d
 703:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 2736              		.loc 1 703 13 view .LVU906
 2737 01c2 4D01E9   		addq	%r13, %r9
 2738              	.LVL268:
 704:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than fits in file */
 2739              		.loc 1 704 5 is_stmt 1 view .LVU907
 704:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than fits in file */
 2740              		.loc 1 704 12 is_stmt 0 view .LVU908
 2741 01c5 4C89C2   		movq	%r8, %rdx
 2742 01c8 4D29C8   		subq	%r9, %r8
 704:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than fits in file */
 2743              		.loc 1 704 10 view .LVU909
 2744 01cb 4939F0   		cmpq	%rsi, %r8
 2745 01ce 490F4EF0 		cmovle	%r8, %rsi
 2746              	.LVL269:
 706:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (rows <= 0)		/* this chunk might be past end of file! */
 2747              		.loc 1 706 5 is_stmt 1 view .LVU910
 706:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (rows <= 0)		/* this chunk might be past end of file! */
 2748              		.loc 1 706 12 is_stmt 0 view .LVU911
 2749 01d2 448B4308 		movl	8(%rbx), %r8d
 2750 01d6 4D29C8   		subq	%r9, %r8
 706:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (rows <= 0)		/* this chunk might be past end of file! */
 2751              		.loc 1 706 10 view .LVU912
 2752 01d9 4939F0   		cmpq	%rsi, %r8
 2753 01dc 4C0F4FC6 		cmovg	%rsi, %r8
 2754              	.LVL270:
 707:fltk-1.3.4-1/jpeg/jmemmgr.c ****       break;
 2755              		.loc 1 707 5 is_stmt 1 view .LVU913
 707:fltk-1.3.4-1/jpeg/jmemmgr.c ****       break;
 2756              		.loc 1 707 8 is_stmt 0 view .LVU914
 2757 01e0 4D85C0   		testq	%r8, %r8
 2758 01e3 0F8E7DFE 		jle	.L192
 2758      FFFF
 2759              	.LVL271:
 2760              	.L200:
 709:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (writing)
 2761              		.loc 1 709 5 is_stmt 1 view .LVU915
 709:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (writing)
 2762              		.loc 1 709 16 is_stmt 0 view .LVU916
 2763 01e9 4D0FAFC4 		imulq	%r12, %r8
 2764              	.LVL272:
 710:fltk-1.3.4-1/jpeg/jmemmgr.c ****       (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 2765              		.loc 1 710 5 is_stmt 1 view .LVU917
 715:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					   (void FAR *) ptr->mem_buffer[i],
 2766              		.loc 1 715 7 view .LVU918
 715:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					   (void FAR *) ptr->mem_buffer[i],
 2767              		.loc 1 715 8 is_stmt 0 view .LVU919
 2768 01ed 488B13   		movq	(%rbx), %rdx
 2769 01f0 488B7424 		movq	16(%rsp), %rsi
 2769      10
 2770 01f5 4C89F9   		movq	%r15, %rcx
 2771 01f8 4C89F7   		movq	%r14, %rdi
 2772 01fb 4A8B14EA 		movq	(%rdx,%r13,8), %rdx
 2773 01ff 4C894424 		movq	%r8, 8(%rsp)
 2773      08
 2774 0204 FF5338   		call	*56(%rbx)
 2775              	.LVL273:
 718:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 2776              		.loc 1 718 5 is_stmt 1 view .LVU920
 718:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 2777              		.loc 1 718 17 is_stmt 0 view .LVU921
 2778 0207 4C8B4424 		movq	8(%rsp), %r8
 2778      08
 699:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 2779              		.loc 1 699 52 view .LVU922
 2780 020c 8B7318   		movl	24(%rbx), %esi
 718:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 2781              		.loc 1 718 17 view .LVU923
 2782 020f 4D01C7   		addq	%r8, %r15
 2783              	.LVL274:
 699:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 2784              		.loc 1 699 44 is_stmt 1 view .LVU924
 699:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 2785              		.loc 1 699 19 is_stmt 0 view .LVU925
 2786 0212 448B4314 		movl	20(%rbx), %r8d
 699:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 2787              		.loc 1 699 46 view .LVU926
 2788 0216 4901F5   		addq	%rsi, %r13
 2789              	.LVL275:
 699:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 2790              		.loc 1 699 15 is_stmt 1 view .LVU927
 699:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 2791              		.loc 1 699 3 is_stmt 0 view .LVU928
 2792 0219 4D39E8   		cmpq	%r13, %r8
 2793 021c 7F92     		jg	.L201
 2794 021e E940FEFF 		jmp	.L225
 2794      FF
 2795              	.LVL276:
 2796              		.p2align 4,,10
 2797 0223 0F1F4400 		.p2align 3
 2797      00
 2798              	.L208:
 699:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 2799              		.loc 1 699 3 view .LVU929
 2800              	.LBE51:
 2801              	.LBE52:
 835:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Return address of proper part of the buffer */
 2802              		.loc 1 835 5 is_stmt 1 view .LVU930
 835:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Return address of proper part of the buffer */
 2803              		.loc 1 835 16 is_stmt 0 view .LVU931
 2804 0228 C7432801 		movl	$1, 40(%rbx)
 2804      000000
 2805 022f E9D5FEFF 		jmp	.L211
 2805      FF
 2806              	.LVL277:
 2807              		.p2align 4,,10
 2808 0234 0F1F4000 		.p2align 3
 2809              	.L229:
 2810              	.LBB53:
 793:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 2811              		.loc 1 793 7 is_stmt 1 view .LVU932
 795:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (ltemp < 0)
 2812              		.loc 1 795 7 view .LVU933
 795:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (ltemp < 0)
 2813              		.loc 1 795 15 is_stmt 0 view .LVU934
 2814 0238 8B442418 		movl	24(%rsp), %eax
 2815              	.LVL278:
 796:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	ltemp = 0;		/* don't fall off front end of file */
 2816              		.loc 1 796 7 is_stmt 1 view .LVU935
 2817 023c B9000000 		movl	$0, %ecx
 2817      00
 2818              	.LVL279:
 796:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	ltemp = 0;		/* don't fall off front end of file */
 2819              		.loc 1 796 7 is_stmt 0 view .LVU936
 2820 0241 4829F0   		subq	%rsi, %rax
 2821              	.LVL280:
 796:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	ltemp = 0;		/* don't fall off front end of file */
 2822              		.loc 1 796 7 view .LVU937
 2823 0244 480F48C1 		cmovs	%rcx, %rax
 2824              	.LVL281:
 798:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 2825              		.loc 1 798 7 is_stmt 1 view .LVU938
 798:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 2826              		.loc 1 798 28 is_stmt 0 view .LVU939
 2827 0248 89C1     		movl	%eax, %ecx
 2828 024a E90AFFFF 		jmp	.L199
 2828      FF
 2829              	.LVL282:
 2830 024f 90       		.p2align 4,,10
 2831              		.p2align 3
 2832              	.L227:
 798:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 2833              		.loc 1 798 28 view .LVU940
 2834              	.LBE53:
 776:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Flush old buffer contents if necessary */
 2835              		.loc 1 776 7 is_stmt 1 view .LVU941
 2836 0250 498B06   		movq	(%r14), %rax
 2837 0253 4C89F7   		movq	%r14, %rdi
 2838 0256 C7402847 		movl	$71, 40(%rax)
 2838      000000
 2839 025d 498B06   		movq	(%r14), %rax
 2840 0260 FF10     		call	*(%rax)
 2841              	.LVL283:
 2842 0262 448B4B1C 		movl	28(%rbx), %r9d
 2843 0266 E9CAFEFF 		jmp	.L193
 2843      FF
 2844              	.LVL284:
 2845 026b 0F1F4400 		.p2align 4,,10
 2845      00
 2846              		.p2align 3
 2847              	.L226:
 768:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->mem_buffer == NULL)
 2848              		.loc 1 768 65 is_stmt 0 discriminator 2 view .LVU942
 2849 0270 48833E00 		cmpq	$0, (%rsi)
 2850 0274 0F85CCFD 		jne	.L190
 2850      FFFF
 2851 027a E9B5FDFF 		jmp	.L189
 2851      FF
 2852              	.LVL285:
 2853 027f 90       		.p2align 4,,10
 2854              		.p2align 3
 2855              	.L203:
 818:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->first_undef_row = end_row;
 2856              		.loc 1 818 5 is_stmt 1 view .LVU943
 818:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->first_undef_row = end_row;
 2857              		.loc 1 818 8 is_stmt 0 view .LVU944
 2858 0280 8B7C241C 		movl	28(%rsp), %edi
 2859 0284 85FF     		testl	%edi, %edi
 2860 0286 0F850EFE 		jne	.L205
 2860      FFFF
 2861              	.LVL286:
 820:fltk-1.3.4-1/jpeg/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 2862              		.loc 1 820 5 is_stmt 1 view .LVU945
 820:fltk-1.3.4-1/jpeg/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 2863              		.loc 1 820 8 is_stmt 0 view .LVU946
 2864 028c 8B7324   		movl	36(%rbx), %esi
 2865 028f 85F6     		testl	%esi, %esi
 2866 0291 0F84E900 		je	.L206
 2866      0000
 2867              	.L231:
 820:fltk-1.3.4-1/jpeg/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 2868              		.loc 1 820 8 view .LVU947
 2869 0297 8B431C   		movl	28(%rbx), %eax
 2870 029a E910FEFF 		jmp	.L207
 2870      FF
 2871              	.LVL287:
 2872 029f 90       		.p2align 4,,10
 2873              		.p2align 3
 2874              	.L228:
 779:fltk-1.3.4-1/jpeg/jmemmgr.c ****       ptr->dirty = FALSE;
 2875              		.loc 1 779 7 is_stmt 1 view .LVU948
 2876              	.LBB54:
 2877              	.LBI54:
 691:fltk-1.3.4-1/jpeg/jmemmgr.c **** /* Do backing store read or write of a virtual sample array */
 2878              		.loc 1 691 1 view .LVU949
 2879              	.LBB55:
 694:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 2880              		.loc 1 694 3 view .LVU950
 696:fltk-1.3.4-1/jpeg/jmemmgr.c ****   file_offset = ptr->cur_start_row * bytesperrow;
 2881              		.loc 1 696 3 view .LVU951
 697:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Loop to read or write each allocation chunk in mem_buffer */
 2882              		.loc 1 697 3 view .LVU952
 697:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Loop to read or write each allocation chunk in mem_buffer */
 2883              		.loc 1 697 20 is_stmt 0 view .LVU953
 2884 02a0 4589CA   		movl	%r9d, %r10d
 697:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Loop to read or write each allocation chunk in mem_buffer */
 2885              		.loc 1 697 15 view .LVU954
 2886 02a3 4D89D7   		movq	%r10, %r15
 2887 02a6 4D0FAFFC 		imulq	%r12, %r15
 2888              	.LVL288:
 699:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 2889              		.loc 1 699 3 is_stmt 1 view .LVU955
 699:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 2890              		.loc 1 699 15 view .LVU956
 699:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 2891              		.loc 1 699 3 is_stmt 0 view .LVU957
 2892 02aa 4885F6   		testq	%rsi, %rsi
 2893 02ad 0F84BC00 		je	.L195
 2893      0000
 701:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than is currently defined */
 2894              		.loc 1 701 5 is_stmt 1 view .LVU958
 701:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than is currently defined */
 2895              		.loc 1 701 12 is_stmt 0 view .LVU959
 2896 02b3 8B4318   		movl	24(%rbx), %eax
 704:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than fits in file */
 2897              		.loc 1 704 12 view .LVU960
 2898 02b6 4189D0   		movl	%edx, %r8d
 701:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than is currently defined */
 2899              		.loc 1 701 10 view .LVU961
 2900 02b9 4839F0   		cmpq	%rsi, %rax
 2901 02bc 480F4FC6 		cmovg	%rsi, %rax
 2902              	.LVL289:
 703:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 2903              		.loc 1 703 5 is_stmt 1 view .LVU962
 704:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than fits in file */
 2904              		.loc 1 704 5 view .LVU963
 704:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than fits in file */
 2905              		.loc 1 704 12 is_stmt 0 view .LVU964
 2906 02c0 4D29D0   		subq	%r10, %r8
 704:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than fits in file */
 2907              		.loc 1 704 10 view .LVU965
 2908 02c3 4939C0   		cmpq	%rax, %r8
 2909 02c6 490F4EC0 		cmovle	%r8, %rax
 2910              	.LVL290:
 706:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (rows <= 0)		/* this chunk might be past end of file! */
 2911              		.loc 1 706 5 is_stmt 1 view .LVU966
 706:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (rows <= 0)		/* this chunk might be past end of file! */
 2912              		.loc 1 706 12 is_stmt 0 view .LVU967
 2913 02ca 448B4308 		movl	8(%rbx), %r8d
 2914 02ce 4D29D0   		subq	%r10, %r8
 706:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (rows <= 0)		/* this chunk might be past end of file! */
 2915              		.loc 1 706 10 view .LVU968
 2916 02d1 4939C0   		cmpq	%rax, %r8
 2917 02d4 4C0F4FC0 		cmovg	%rax, %r8
 2918              	.LVL291:
 707:fltk-1.3.4-1/jpeg/jmemmgr.c ****       break;
 2919              		.loc 1 707 5 is_stmt 1 view .LVU969
 707:fltk-1.3.4-1/jpeg/jmemmgr.c ****       break;
 2920              		.loc 1 707 8 is_stmt 0 view .LVU970
 2921 02d8 4D85C0   		testq	%r8, %r8
 2922 02db 0F8E8E00 		jle	.L195
 2922      0000
 2923 02e1 488D4338 		leaq	56(%rbx), %rax
 699:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 2924              		.loc 1 699 10 view .LVU971
 2925 02e5 4531ED   		xorl	%r13d, %r13d
 2926 02e8 48894424 		movq	%rax, 16(%rsp)
 2926      10
 2927 02ed EB40     		jmp	.L196
 2928              	.LVL292:
 2929 02ef 90       		.p2align 4,,10
 2930              		.p2align 3
 2931              	.L197:
 701:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than is currently defined */
 2932              		.loc 1 701 5 is_stmt 1 view .LVU972
 701:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than is currently defined */
 2933              		.loc 1 701 12 is_stmt 0 view .LVU973
 2934 02f0 4989F2   		movq	%rsi, %r10
 703:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 2935              		.loc 1 703 25 view .LVU974
 2936 02f3 448B5B1C 		movl	28(%rbx), %r11d
 701:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than is currently defined */
 2937              		.loc 1 701 12 view .LVU975
 2938 02f7 4D29EA   		subq	%r13, %r10
 701:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than is currently defined */
 2939              		.loc 1 701 10 view .LVU976
 2940 02fa 4D39C2   		cmpq	%r8, %r10
 703:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 2941              		.loc 1 703 25 view .LVU977
 2942 02fd 4D89D9   		movq	%r11, %r9
 701:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than is currently defined */
 2943              		.loc 1 701 10 view .LVU978
 2944 0300 4D0F4EC2 		cmovle	%r10, %r8
 2945              	.LVL293:
 703:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 2946              		.loc 1 703 5 is_stmt 1 view .LVU979
 704:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than fits in file */
 2947              		.loc 1 704 12 is_stmt 0 view .LVU980
 2948 0304 448B5320 		movl	32(%rbx), %r10d
 703:fltk-1.3.4-1/jpeg/jmemmgr.c ****     rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 2949              		.loc 1 703 13 view .LVU981
 2950 0308 4D01EB   		addq	%r13, %r11
 2951              	.LVL294:
 704:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than fits in file */
 2952              		.loc 1 704 5 is_stmt 1 view .LVU982
 704:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than fits in file */
 2953              		.loc 1 704 12 is_stmt 0 view .LVU983
 2954 030b 4C89D2   		movq	%r10, %rdx
 2955 030e 4D29DA   		subq	%r11, %r10
 704:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* Transfer no more than fits in file */
 2956              		.loc 1 704 10 view .LVU984
 2957 0311 4D39C2   		cmpq	%r8, %r10
 2958 0314 4D0F4FD0 		cmovg	%r8, %r10
 2959              	.LVL295:
 706:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (rows <= 0)		/* this chunk might be past end of file! */
 2960              		.loc 1 706 5 is_stmt 1 view .LVU985
 706:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (rows <= 0)		/* this chunk might be past end of file! */
 2961              		.loc 1 706 12 is_stmt 0 view .LVU986
 2962 0318 448B4308 		movl	8(%rbx), %r8d
 2963 031c 4D29D8   		subq	%r11, %r8
 706:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (rows <= 0)		/* this chunk might be past end of file! */
 2964              		.loc 1 706 10 view .LVU987
 2965 031f 4D39D0   		cmpq	%r10, %r8
 2966 0322 4D0F4FC2 		cmovg	%r10, %r8
 2967              	.LVL296:
 707:fltk-1.3.4-1/jpeg/jmemmgr.c ****       break;
 2968              		.loc 1 707 5 is_stmt 1 view .LVU988
 707:fltk-1.3.4-1/jpeg/jmemmgr.c ****       break;
 2969              		.loc 1 707 8 is_stmt 0 view .LVU989
 2970 0326 4D85C0   		testq	%r8, %r8
 2971 0329 0F8E8100 		jle	.L230
 2971      0000
 2972              	.LVL297:
 2973              	.L196:
 709:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (writing)
 2974              		.loc 1 709 5 is_stmt 1 view .LVU990
 709:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if (writing)
 2975              		.loc 1 709 16 is_stmt 0 view .LVU991
 2976 032f 4D0FAFC4 		imulq	%r12, %r8
 2977              	.LVL298:
 710:fltk-1.3.4-1/jpeg/jmemmgr.c ****       (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 2978              		.loc 1 710 5 is_stmt 1 view .LVU992
 711:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					    (void FAR *) ptr->mem_buffer[i],
 2979              		.loc 1 711 7 view .LVU993
 711:fltk-1.3.4-1/jpeg/jmemmgr.c **** 					    (void FAR *) ptr->mem_buffer[i],
 2980              		.loc 1 711 8 is_stmt 0 view .LVU994
 2981 0333 488B13   		movq	(%rbx), %rdx
 2982 0336 488B7424 		movq	16(%rsp), %rsi
 2982      10
 2983 033b 4C89F9   		movq	%r15, %rcx
 2984 033e 4C89F7   		movq	%r14, %rdi
 2985 0341 4A8B14EA 		movq	(%rdx,%r13,8), %rdx
 2986 0345 4C894424 		movq	%r8, 8(%rsp)
 2986      08
 2987 034a FF5340   		call	*64(%rbx)
 2988              	.LVL299:
 718:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 2989              		.loc 1 718 5 is_stmt 1 view .LVU995
 718:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 2990              		.loc 1 718 17 is_stmt 0 view .LVU996
 2991 034d 4C8B4424 		movq	8(%rsp), %r8
 2991      08
 699:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 2992              		.loc 1 699 19 view .LVU997
 2993 0352 8B7314   		movl	20(%rbx), %esi
 718:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 2994              		.loc 1 718 17 view .LVU998
 2995 0355 4D01C7   		addq	%r8, %r15
 2996              	.LVL300:
 699:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 2997              		.loc 1 699 44 is_stmt 1 view .LVU999
 699:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 2998              		.loc 1 699 52 is_stmt 0 view .LVU1000
 2999 0358 448B4318 		movl	24(%rbx), %r8d
 699:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 3000              		.loc 1 699 46 view .LVU1001
 3001 035c 4D01C5   		addq	%r8, %r13
 3002              	.LVL301:
 699:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 3003              		.loc 1 699 15 is_stmt 1 view .LVU1002
 699:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 3004              		.loc 1 699 3 is_stmt 0 view .LVU1003
 3005 035f 4C39EE   		cmpq	%r13, %rsi
 3006 0362 7F8C     		jg	.L197
 3007 0364 448B4B1C 		movl	28(%rbx), %r9d
 3008 0368 448B630C 		movl	12(%rbx), %r12d
 3009 036c 8B5320   		movl	32(%rbx), %edx
 3010              	.LVL302:
 3011              	.L195:
 699:fltk-1.3.4-1/jpeg/jmemmgr.c ****     /* One chunk, but check for short chunk at end of buffer */
 3012              		.loc 1 699 3 view .LVU1004
 3013              	.LBE55:
 3014              	.LBE54:
 780:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 3015              		.loc 1 780 7 is_stmt 1 view .LVU1005
 780:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 3016              		.loc 1 780 18 is_stmt 0 view .LVU1006
 3017 036f C7432800 		movl	$0, 40(%rbx)
 3017      000000
 3018 0376 E9D1FDFF 		jmp	.L194
 3018      FF
 3019              	.LVL303:
 3020 037b 0F1F4400 		.p2align 4,,10
 3020      00
 3021              		.p2align 3
 3022              	.L206:
 830:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 3023              		.loc 1 830 2 is_stmt 1 view .LVU1007
 3024 0380 498B06   		movq	(%r14), %rax
 3025 0383 4C89F7   		movq	%r14, %rdi
 3026 0386 C7402817 		movl	$23, 40(%rax)
 3026      000000
 3027 038d 498B06   		movq	(%r14), %rax
 3028 0390 FF10     		call	*(%rax)
 3029              	.LVL304:
 834:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ptr->dirty = TRUE;
 3030              		.loc 1 834 3 view .LVU1008
 3031 0392 8B431C   		movl	28(%rbx), %eax
 3032 0395 E96FFDFF 		jmp	.L211
 3032      FF
 3033 039a 660F1F44 		.p2align 4,,10
 3033      0000
 3034              		.p2align 3
 3035              	.L212:
 820:fltk-1.3.4-1/jpeg/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 3036              		.loc 1 820 8 is_stmt 0 view .LVU1009
 3037 03a0 8B7324   		movl	36(%rbx), %esi
 3038 03a3 89EA     		movl	%ebp, %edx
 3039              	.LVL305:
 820:fltk-1.3.4-1/jpeg/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 3040              		.loc 1 820 5 is_stmt 1 view .LVU1010
 820:fltk-1.3.4-1/jpeg/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 3041              		.loc 1 820 8 is_stmt 0 view .LVU1011
 3042 03a5 85F6     		testl	%esi, %esi
 3043 03a7 0F85EAFE 		jne	.L231
 3043      FFFF
 3044              	.LVL306:
 820:fltk-1.3.4-1/jpeg/jmemmgr.c ****       size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 3045              		.loc 1 820 8 view .LVU1012
 3046 03ad EBD1     		jmp	.L206
 3047              	.LVL307:
 3048 03af 90       		.p2align 4,,10
 3049              		.p2align 3
 3050              	.L230:
 780:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 3051              		.loc 1 780 18 view .LVU1013
 3052 03b0 C7432800 		movl	$0, 40(%rbx)
 3052      000000
 3053 03b7 448B630C 		movl	12(%rbx), %r12d
 3054              	.LVL308:
 780:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
 3055              		.loc 1 780 7 is_stmt 1 view .LVU1014
 3056 03bb E98CFDFF 		jmp	.L194
 3056      FF
 3057              		.cfi_endproc
 3058              	.LFE61:
 3060              		.section	.rodata.jinit_memory_mgr.str1.1,"aMS",@progbits,1
 3061              	.LC0:
 3062 0000 4A504547 		.string	"JPEGMEM"
 3062      4D454D00 
 3063              	.LC1:
 3064 0008 256C6425 		.string	"%ld%c"
 3064      6300
 3065              		.section	.text.jinit_memory_mgr,"ax",@progbits
 3066              		.p2align 4
 3067              		.globl	jinit_memory_mgr
 3069              	jinit_memory_mgr:
 3070              	.LVL309:
 3071              	.LFB65:
1021:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
1022:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
1023:fltk-1.3.4-1/jpeg/jmemmgr.c **** /*
1024:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * Memory manager initialization.
1025:fltk-1.3.4-1/jpeg/jmemmgr.c ****  * When this is called, only the error manager pointer is valid in cinfo!
1026:fltk-1.3.4-1/jpeg/jmemmgr.c ****  */
1027:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
1028:fltk-1.3.4-1/jpeg/jmemmgr.c **** GLOBAL(void)
1029:fltk-1.3.4-1/jpeg/jmemmgr.c **** jinit_memory_mgr (j_common_ptr cinfo)
1030:fltk-1.3.4-1/jpeg/jmemmgr.c **** {
 3072              		.loc 1 1030 1 view -0
 3073              		.cfi_startproc
 3074              		.loc 1 1030 1 is_stmt 0 view .LVU1016
 3075 0000 F30F1EFA 		endbr64
 3076 0004 55       		pushq	%rbp
 3077              		.cfi_def_cfa_offset 16
 3078              		.cfi_offset 6, -16
 3079 0005 4889FD   		movq	%rdi, %rbp
 3080 0008 53       		pushq	%rbx
 3081              		.cfi_def_cfa_offset 24
 3082              		.cfi_offset 3, -24
 3083 0009 4883EC28 		subq	$40, %rsp
 3084              		.cfi_def_cfa_offset 64
 3085              		.loc 1 1030 1 view .LVU1017
 3086 000d 64488B04 		movq	%fs:40, %rax
 3086      25280000 
 3086      00
 3087 0016 48894424 		movq	%rax, 24(%rsp)
 3087      18
 3088 001b 31C0     		xorl	%eax, %eax
1031:fltk-1.3.4-1/jpeg/jmemmgr.c ****   my_mem_ptr mem;
 3089              		.loc 1 1031 3 is_stmt 1 view .LVU1018
1032:fltk-1.3.4-1/jpeg/jmemmgr.c ****   long max_to_use;
 3090              		.loc 1 1032 3 view .LVU1019
1033:fltk-1.3.4-1/jpeg/jmemmgr.c ****   int pool;
 3091              		.loc 1 1033 3 view .LVU1020
1034:fltk-1.3.4-1/jpeg/jmemmgr.c ****   size_t test_mac;
 3092              		.loc 1 1034 3 view .LVU1021
1035:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
1036:fltk-1.3.4-1/jpeg/jmemmgr.c ****   cinfo->mem = NULL;		/* for safety if init fails */
 3093              		.loc 1 1036 3 view .LVU1022
 3094              		.loc 1 1036 14 is_stmt 0 view .LVU1023
 3095 001d 48C74708 		movq	$0, 8(%rdi)
 3095      00000000 
1037:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
1038:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Check for configuration errors.
1039:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * SIZEOF(ALIGN_TYPE) should be a power of 2; otherwise, it probably
1040:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * doesn't reflect any real hardware alignment requirement.
1041:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * The test is a little tricky: for X>0, X and X-1 have no one-bits
1042:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * in common if and only if X is a power of 2, ie has only one one-bit.
1043:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * Some compilers may give an "unreachable code" warning here; ignore it.
1044:fltk-1.3.4-1/jpeg/jmemmgr.c ****    */
1045:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if ((SIZEOF(ALIGN_TYPE) & (SIZEOF(ALIGN_TYPE)-1)) != 0)
 3096              		.loc 1 1045 3 is_stmt 1 view .LVU1024
1046:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ERREXIT(cinfo, JERR_BAD_ALIGN_TYPE);
1047:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* MAX_ALLOC_CHUNK must be representable as type size_t, and must be
1048:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * a multiple of SIZEOF(ALIGN_TYPE).
1049:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * Again, an "unreachable code" warning may be ignored here.
1050:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * But a "constant too large" warning means you need to fix MAX_ALLOC_CHUNK.
1051:fltk-1.3.4-1/jpeg/jmemmgr.c ****    */
1052:fltk-1.3.4-1/jpeg/jmemmgr.c ****   test_mac = (size_t) MAX_ALLOC_CHUNK;
 3097              		.loc 1 1052 3 view .LVU1025
 3098              	.LVL310:
1053:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if ((long) test_mac != MAX_ALLOC_CHUNK ||
 3099              		.loc 1 1053 3 view .LVU1026
1054:fltk-1.3.4-1/jpeg/jmemmgr.c ****       (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
1055:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);
1056:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
1057:fltk-1.3.4-1/jpeg/jmemmgr.c ****   max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 3100              		.loc 1 1057 3 view .LVU1027
 3101              		.loc 1 1057 16 is_stmt 0 view .LVU1028
 3102 0025 E8000000 		call	jpeg_mem_init@PLT
 3102      00
 3103              	.LVL311:
1058:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
1059:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Attempt to allocate memory manager's control block */
1060:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 3104              		.loc 1 1060 22 view .LVU1029
 3105 002a BEA80000 		movl	$168, %esi
 3105      00
 3106 002f 4889EF   		movq	%rbp, %rdi
1057:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 3107              		.loc 1 1057 14 view .LVU1030
 3108 0032 48894424 		movq	%rax, 16(%rsp)
 3108      10
 3109              		.loc 1 1060 3 is_stmt 1 view .LVU1031
 3110              		.loc 1 1060 22 is_stmt 0 view .LVU1032
 3111 0037 E8000000 		call	jpeg_get_small@PLT
 3111      00
 3112              	.LVL312:
 3113 003c 4889C3   		movq	%rax, %rbx
 3114              	.LVL313:
1061:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
1062:fltk-1.3.4-1/jpeg/jmemmgr.c ****   if (mem == NULL) {
 3115              		.loc 1 1062 3 is_stmt 1 view .LVU1033
 3116              		.loc 1 1062 6 is_stmt 0 view .LVU1034
 3117 003f 4885C0   		testq	%rax, %rax
 3118 0042 0F844801 		je	.L242
 3118      0000
 3119              	.LVL314:
 3120              	.L233:
1063:fltk-1.3.4-1/jpeg/jmemmgr.c ****     jpeg_mem_term(cinfo);	/* system-dependent cleanup */
1064:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
1065:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
1066:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
1067:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* OK, fill in the method pointers */
1068:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.alloc_small = alloc_small;
 3121              		.loc 1 1068 3 is_stmt 1 view .LVU1035
 3122              		.loc 1 1068 24 is_stmt 0 view .LVU1036
 3123 0048 488D0500 		leaq	alloc_small(%rip), %rax
 3123      000000
1069:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.alloc_large = alloc_large;
1070:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.alloc_sarray = alloc_sarray;
1071:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.alloc_barray = alloc_barray;
1072:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.request_virt_sarray = request_virt_sarray;
1073:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.request_virt_barray = request_virt_barray;
1074:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.realize_virt_arrays = realize_virt_arrays;
1075:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.access_virt_sarray = access_virt_sarray;
1076:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.access_virt_barray = access_virt_barray;
1077:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.free_pool = free_pool;
1078:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.self_destruct = self_destruct;
1079:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
1080:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Make MAX_ALLOC_CHUNK accessible to other modules */
1081:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
 3124              		.loc 1 1081 28 view .LVU1037
 3125 004f 48C74360 		movq	$1000000000, 96(%rbx)
 3125      00CA9A3B 
 3126              	.LBB56:
1082:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
1083:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Initialize working state */
1084:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.max_memory_to_use = max_to_use;
1085:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
1086:fltk-1.3.4-1/jpeg/jmemmgr.c ****   for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
1087:fltk-1.3.4-1/jpeg/jmemmgr.c ****     mem->small_list[pool] = NULL;
1088:fltk-1.3.4-1/jpeg/jmemmgr.c ****     mem->large_list[pool] = NULL;
1089:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
1090:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->virt_sarray_list = NULL;
1091:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->virt_barray_list = NULL;
1092:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
1093:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->total_space_allocated = SIZEOF(my_memory_mgr);
1094:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
1095:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Declare ourselves open for business */
1096:fltk-1.3.4-1/jpeg/jmemmgr.c ****   cinfo->mem = & mem->pub;
1097:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
1098:fltk-1.3.4-1/jpeg/jmemmgr.c ****   /* Check for an environment variable JPEGMEM; if found, override the
1099:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * default max_memory setting from jpeg_mem_init.  Note that the
1100:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * surrounding application may again override this value.
1101:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * If your system doesn't support getenv(), define NO_GETENV to disable
1102:fltk-1.3.4-1/jpeg/jmemmgr.c ****    * this feature.
1103:fltk-1.3.4-1/jpeg/jmemmgr.c ****    */
1104:fltk-1.3.4-1/jpeg/jmemmgr.c **** #ifndef NO_GETENV
1105:fltk-1.3.4-1/jpeg/jmemmgr.c ****   { char * memenv;
1106:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
1107:fltk-1.3.4-1/jpeg/jmemmgr.c ****     if ((memenv = getenv("JPEGMEM")) != NULL) {
 3127              		.loc 1 1107 19 view .LVU1038
 3128 0057 488D3D00 		leaq	.LC0(%rip), %rdi
 3128      000000
 3129              	.LBE56:
1068:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.alloc_large = alloc_large;
 3130              		.loc 1 1068 24 view .LVU1039
 3131 005e 488903   		movq	%rax, (%rbx)
1069:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.alloc_large = alloc_large;
 3132              		.loc 1 1069 3 is_stmt 1 view .LVU1040
1069:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.alloc_large = alloc_large;
 3133              		.loc 1 1069 24 is_stmt 0 view .LVU1041
 3134 0061 488D0500 		leaq	alloc_large(%rip), %rax
 3134      000000
 3135 0068 48894308 		movq	%rax, 8(%rbx)
1070:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.alloc_barray = alloc_barray;
 3136              		.loc 1 1070 3 is_stmt 1 view .LVU1042
1070:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.alloc_barray = alloc_barray;
 3137              		.loc 1 1070 25 is_stmt 0 view .LVU1043
 3138 006c 488D0500 		leaq	alloc_sarray(%rip), %rax
 3138      000000
 3139 0073 48894310 		movq	%rax, 16(%rbx)
1071:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.request_virt_sarray = request_virt_sarray;
 3140              		.loc 1 1071 3 is_stmt 1 view .LVU1044
1071:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.request_virt_sarray = request_virt_sarray;
 3141              		.loc 1 1071 25 is_stmt 0 view .LVU1045
 3142 0077 488D0500 		leaq	alloc_barray(%rip), %rax
 3142      000000
 3143 007e 48894318 		movq	%rax, 24(%rbx)
1072:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.request_virt_barray = request_virt_barray;
 3144              		.loc 1 1072 3 is_stmt 1 view .LVU1046
1072:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.request_virt_barray = request_virt_barray;
 3145              		.loc 1 1072 32 is_stmt 0 view .LVU1047
 3146 0082 488D0500 		leaq	request_virt_sarray(%rip), %rax
 3146      000000
 3147 0089 48894320 		movq	%rax, 32(%rbx)
1073:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.realize_virt_arrays = realize_virt_arrays;
 3148              		.loc 1 1073 3 is_stmt 1 view .LVU1048
1073:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.realize_virt_arrays = realize_virt_arrays;
 3149              		.loc 1 1073 32 is_stmt 0 view .LVU1049
 3150 008d 488D0500 		leaq	request_virt_barray(%rip), %rax
 3150      000000
 3151 0094 48894328 		movq	%rax, 40(%rbx)
1074:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.access_virt_sarray = access_virt_sarray;
 3152              		.loc 1 1074 3 is_stmt 1 view .LVU1050
1074:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.access_virt_sarray = access_virt_sarray;
 3153              		.loc 1 1074 32 is_stmt 0 view .LVU1051
 3154 0098 488D0500 		leaq	realize_virt_arrays(%rip), %rax
 3154      000000
 3155 009f 48894330 		movq	%rax, 48(%rbx)
1075:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.access_virt_barray = access_virt_barray;
 3156              		.loc 1 1075 3 is_stmt 1 view .LVU1052
1075:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.access_virt_barray = access_virt_barray;
 3157              		.loc 1 1075 31 is_stmt 0 view .LVU1053
 3158 00a3 488D0500 		leaq	access_virt_sarray(%rip), %rax
 3158      000000
 3159 00aa 48894338 		movq	%rax, 56(%rbx)
1076:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.free_pool = free_pool;
 3160              		.loc 1 1076 3 is_stmt 1 view .LVU1054
1076:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.free_pool = free_pool;
 3161              		.loc 1 1076 31 is_stmt 0 view .LVU1055
 3162 00ae 488D0500 		leaq	access_virt_barray(%rip), %rax
 3162      000000
 3163 00b5 48894340 		movq	%rax, 64(%rbx)
1077:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.self_destruct = self_destruct;
 3164              		.loc 1 1077 3 is_stmt 1 view .LVU1056
1077:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->pub.self_destruct = self_destruct;
 3165              		.loc 1 1077 22 is_stmt 0 view .LVU1057
 3166 00b9 488D0500 		leaq	free_pool(%rip), %rax
 3166      000000
 3167 00c0 48894348 		movq	%rax, 72(%rbx)
1078:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 3168              		.loc 1 1078 3 is_stmt 1 view .LVU1058
1078:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 3169              		.loc 1 1078 26 is_stmt 0 view .LVU1059
 3170 00c4 488D0500 		leaq	self_destruct(%rip), %rax
 3170      000000
 3171 00cb 48894350 		movq	%rax, 80(%rbx)
1081:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 3172              		.loc 1 1081 3 is_stmt 1 view .LVU1060
1084:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 3173              		.loc 1 1084 3 view .LVU1061
1084:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 3174              		.loc 1 1084 30 is_stmt 0 view .LVU1062
 3175 00cf 488B4424 		movq	16(%rsp), %rax
 3175      10
1087:fltk-1.3.4-1/jpeg/jmemmgr.c ****     mem->large_list[pool] = NULL;
 3176              		.loc 1 1087 27 view .LVU1063
 3177 00d4 48C74370 		movq	$0, 112(%rbx)
 3177      00000000 
1084:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 3178              		.loc 1 1084 30 view .LVU1064
 3179 00dc 48894358 		movq	%rax, 88(%rbx)
1086:fltk-1.3.4-1/jpeg/jmemmgr.c ****     mem->small_list[pool] = NULL;
 3180              		.loc 1 1086 3 is_stmt 1 view .LVU1065
 3181              	.LVL315:
1086:fltk-1.3.4-1/jpeg/jmemmgr.c ****     mem->small_list[pool] = NULL;
 3182              		.loc 1 1086 33 view .LVU1066
1087:fltk-1.3.4-1/jpeg/jmemmgr.c ****     mem->large_list[pool] = NULL;
 3183              		.loc 1 1087 5 view .LVU1067
1088:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 3184              		.loc 1 1088 5 view .LVU1068
1088:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 3185              		.loc 1 1088 27 is_stmt 0 view .LVU1069
 3186 00e0 48C78380 		movq	$0, 128(%rbx)
 3186      00000000 
 3186      000000
1086:fltk-1.3.4-1/jpeg/jmemmgr.c ****     mem->small_list[pool] = NULL;
 3187              		.loc 1 1086 58 is_stmt 1 view .LVU1070
 3188              	.LVL316:
1086:fltk-1.3.4-1/jpeg/jmemmgr.c ****     mem->small_list[pool] = NULL;
 3189              		.loc 1 1086 33 view .LVU1071
1087:fltk-1.3.4-1/jpeg/jmemmgr.c ****     mem->large_list[pool] = NULL;
 3190              		.loc 1 1087 5 view .LVU1072
1087:fltk-1.3.4-1/jpeg/jmemmgr.c ****     mem->large_list[pool] = NULL;
 3191              		.loc 1 1087 27 is_stmt 0 view .LVU1073
 3192 00eb 48C74368 		movq	$0, 104(%rbx)
 3192      00000000 
1088:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 3193              		.loc 1 1088 5 is_stmt 1 view .LVU1074
1088:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 3194              		.loc 1 1088 27 is_stmt 0 view .LVU1075
 3195 00f3 48C74378 		movq	$0, 120(%rbx)
 3195      00000000 
1086:fltk-1.3.4-1/jpeg/jmemmgr.c ****     mem->small_list[pool] = NULL;
 3196              		.loc 1 1086 58 is_stmt 1 view .LVU1076
 3197              	.LVL317:
1086:fltk-1.3.4-1/jpeg/jmemmgr.c ****     mem->small_list[pool] = NULL;
 3198              		.loc 1 1086 33 view .LVU1077
1090:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->virt_barray_list = NULL;
 3199              		.loc 1 1090 3 view .LVU1078
1090:fltk-1.3.4-1/jpeg/jmemmgr.c ****   mem->virt_barray_list = NULL;
 3200              		.loc 1 1090 25 is_stmt 0 view .LVU1079
 3201 00fb 48C78388 		movq	$0, 136(%rbx)
 3201      00000000 
 3201      000000
1091:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 3202              		.loc 1 1091 3 is_stmt 1 view .LVU1080
1091:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 3203              		.loc 1 1091 25 is_stmt 0 view .LVU1081
 3204 0106 48C78390 		movq	$0, 144(%rbx)
 3204      00000000 
 3204      000000
1093:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 3205              		.loc 1 1093 3 is_stmt 1 view .LVU1082
1093:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 3206              		.loc 1 1093 30 is_stmt 0 view .LVU1083
 3207 0111 48C78398 		movq	$168, 152(%rbx)
 3207      000000A8 
 3207      000000
1096:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 3208              		.loc 1 1096 3 is_stmt 1 view .LVU1084
1096:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 3209              		.loc 1 1096 14 is_stmt 0 view .LVU1085
 3210 011c 48895D08 		movq	%rbx, 8(%rbp)
 3211              	.LBB58:
1105:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
 3212              		.loc 1 1105 5 is_stmt 1 view .LVU1086
 3213              		.loc 1 1107 5 view .LVU1087
 3214              		.loc 1 1107 19 is_stmt 0 view .LVU1088
 3215 0120 E8000000 		call	getenv@PLT
 3215      00
 3216              	.LVL318:
 3217 0125 4889C7   		movq	%rax, %rdi
 3218              	.LVL319:
 3219              		.loc 1 1107 8 view .LVU1089
 3220 0128 4885C0   		testq	%rax, %rax
 3221 012b 7444     		je	.L232
 3222              	.LBB57:
1108:fltk-1.3.4-1/jpeg/jmemmgr.c ****       char ch = 'x';
 3223              		.loc 1 1108 7 is_stmt 1 view .LVU1090
1109:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
1110:fltk-1.3.4-1/jpeg/jmemmgr.c ****       if (sscanf(memenv, "%ld%c", &max_to_use, &ch) > 0) {
 3224              		.loc 1 1110 11 is_stmt 0 view .LVU1091
 3225 012d 31C0     		xorl	%eax, %eax
 3226              	.LVL320:
 3227              		.loc 1 1110 11 view .LVU1092
 3228 012f 488D4C24 		leaq	15(%rsp), %rcx
 3228      0F
 3229 0134 488D5424 		leaq	16(%rsp), %rdx
 3229      10
1108:fltk-1.3.4-1/jpeg/jmemmgr.c ****       char ch = 'x';
 3230              		.loc 1 1108 12 view .LVU1093
 3231 0139 C644240F 		movb	$120, 15(%rsp)
 3231      78
 3232              		.loc 1 1110 7 is_stmt 1 view .LVU1094
 3233              		.loc 1 1110 11 is_stmt 0 view .LVU1095
 3234 013e 488D3500 		leaq	.LC1(%rip), %rsi
 3234      000000
 3235 0145 E8000000 		call	__isoc99_sscanf@PLT
 3235      00
 3236              	.LVL321:
 3237              		.loc 1 1110 10 view .LVU1096
 3238 014a 85C0     		testl	%eax, %eax
 3239 014c 7E23     		jle	.L232
1111:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	if (ch == 'm' || ch == 'M')
 3240              		.loc 1 1111 2 is_stmt 1 view .LVU1097
 3241              		.loc 1 1111 16 is_stmt 0 view .LVU1098
 3242 014e 0FB64424 		movzbl	15(%rsp), %eax
 3242      0F
 3243 0153 488B4C24 		movq	16(%rsp), %rcx
 3243      10
 3244 0158 83E0DF   		andl	$-33, %eax
 3245 015b 4869D1E8 		imulq	$1000, %rcx, %rdx
 3245      030000
 3246              		.loc 1 1111 5 view .LVU1099
 3247 0162 3C4D     		cmpb	$77, %al
 3248 0164 7507     		jne	.L236
1112:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	  max_to_use *= 1000L;
 3249              		.loc 1 1112 4 is_stmt 1 view .LVU1100
 3250              	.LVL322:
 3251              		.loc 1 1112 4 is_stmt 0 view .LVU1101
 3252 0166 4869D140 		imulq	$1000000, %rcx, %rdx
 3252      420F00
 3253              	.LVL323:
 3254              	.L236:
1113:fltk-1.3.4-1/jpeg/jmemmgr.c **** 	mem->pub.max_memory_to_use = max_to_use * 1000L;
 3255              		.loc 1 1113 2 is_stmt 1 view .LVU1102
 3256              		.loc 1 1113 29 is_stmt 0 view .LVU1103
 3257 016d 48895358 		movq	%rdx, 88(%rbx)
 3258              	.L232:
 3259              		.loc 1 1113 29 view .LVU1104
 3260              	.LBE57:
 3261              	.LBE58:
1114:fltk-1.3.4-1/jpeg/jmemmgr.c ****       }
1115:fltk-1.3.4-1/jpeg/jmemmgr.c ****     }
1116:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
1117:fltk-1.3.4-1/jpeg/jmemmgr.c **** #endif
1118:fltk-1.3.4-1/jpeg/jmemmgr.c **** 
1119:fltk-1.3.4-1/jpeg/jmemmgr.c **** }
 3262              		.loc 1 1119 1 view .LVU1105
 3263 0171 488B4424 		movq	24(%rsp), %rax
 3263      18
 3264 0176 64483304 		xorq	%fs:40, %rax
 3264      25280000 
 3264      00
 3265 017f 753B     		jne	.L243
 3266 0181 4883C428 		addq	$40, %rsp
 3267              		.cfi_remember_state
 3268              		.cfi_def_cfa_offset 24
 3269 0185 5B       		popq	%rbx
 3270              		.cfi_def_cfa_offset 16
 3271              	.LVL324:
 3272              		.loc 1 1119 1 view .LVU1106
 3273 0186 5D       		popq	%rbp
 3274              		.cfi_def_cfa_offset 8
 3275              	.LVL325:
 3276              		.loc 1 1119 1 view .LVU1107
 3277 0187 C3       		ret
 3278              	.LVL326:
 3279 0188 0F1F8400 		.p2align 4,,10
 3279      00000000 
 3280              		.p2align 3
 3281              	.L242:
 3282              		.cfi_restore_state
1063:fltk-1.3.4-1/jpeg/jmemmgr.c ****     ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
 3283              		.loc 1 1063 5 is_stmt 1 view .LVU1108
 3284 0190 4889EF   		movq	%rbp, %rdi
 3285 0193 E8000000 		call	jpeg_mem_term@PLT
 3285      00
 3286              	.LVL327:
1064:fltk-1.3.4-1/jpeg/jmemmgr.c ****   }
 3287              		.loc 1 1064 5 view .LVU1109
 3288 0198 488B4500 		movq	0(%rbp), %rax
 3289 019c 4889EF   		movq	%rbp, %rdi
 3290 019f C7402838 		movl	$56, 40(%rax)
 3290      000000
 3291 01a6 488B4500 		movq	0(%rbp), %rax
 3292 01aa C7402C00 		movl	$0, 44(%rax)
 3292      000000
 3293 01b1 488B4500 		movq	0(%rbp), %rax
 3294 01b5 FF10     		call	*(%rax)
 3295              	.LVL328:
 3296 01b7 E98CFEFF 		jmp	.L233
 3296      FF
 3297              	.LVL329:
 3298              	.L243:
 3299              		.loc 1 1119 1 is_stmt 0 view .LVU1110
 3300 01bc E8000000 		call	__stack_chk_fail@PLT
 3300      00
 3301              	.LVL330:
 3302              		.cfi_endproc
 3303              	.LFE65:
 3305              		.section	.rodata.extra_pool_slop,"a"
 3306              		.align 16
 3309              	extra_pool_slop:
 3310 0000 00000000 		.quad	0
 3310      00000000 
 3311 0008 88130000 		.quad	5000
 3311      00000000 
 3312              		.section	.rodata.first_pool_slop,"a"
 3313              		.align 16
 3316              	first_pool_slop:
 3317 0000 40060000 		.quad	1600
 3317      00000000 
 3318 0008 803E0000 		.quad	16000
 3318      00000000 
 3319              		.text
 3320              	.Letext0:
 3321              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 3322              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 3323              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 3324              		.file 6 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 3325              		.file 7 "/usr/include/stdio.h"
 3326              		.file 8 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 3327              		.file 9 "fltk-1.3.4-1/jpeg/jmorecfg.h"
 3328              		.file 10 "fltk-1.3.4-1/jpeg/jpeglib.h"
 3329              		.file 11 "fltk-1.3.4-1/jpeg/jpegint.h"
 3330              		.file 12 "fltk-1.3.4-1/jpeg/jerror.h"
 3331              		.file 13 "fltk-1.3.4-1/jpeg/jmemsys.h"
 3332              		.file 14 "/usr/include/stdlib.h"
 3333              		.file 15 "<built-in>"
 18721              		.section	.note.gnu.property,"a"
 18722              		.align 8
 18723 0000 04000000 		.long	 1f - 0f
 18724 0004 10000000 		.long	 4f - 1f
 18725 0008 05000000 		.long	 5
 18726              	0:
 18727 000c 474E5500 		.string	 "GNU"
 18728              	1:
 18729              		.align 8
 18730 0010 020000C0 		.long	 0xc0000002
 18731 0014 04000000 		.long	 3f - 2f
 18732              	2:
 18733 0018 03000000 		.long	 0x3
 18734              	3:
 18735 001c 00000000 		.align 8
 18736              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 jmemmgr.c
     /tmp/cc13lCo8.s:7      .text.do_barray_io:0000000000000000 do_barray_io
     /tmp/cc13lCo8.s:217    .text.alloc_small:0000000000000000 alloc_small
     /tmp/cc13lCo8.s:3309   .rodata.extra_pool_slop:0000000000000000 extra_pool_slop
     /tmp/cc13lCo8.s:3316   .rodata.first_pool_slop:0000000000000000 first_pool_slop
     /tmp/cc13lCo8.s:516    .text.request_virt_barray:0000000000000000 request_virt_barray
     /tmp/cc13lCo8.s:639    .text.request_virt_sarray:0000000000000000 request_virt_sarray
     /tmp/cc13lCo8.s:762    .text.free_pool:0000000000000000 free_pool
     /tmp/cc13lCo8.s:1018   .text.self_destruct:0000000000000000 self_destruct
     /tmp/cc13lCo8.s:1075   .text.access_virt_barray:0000000000000000 access_virt_barray
     /tmp/cc13lCo8.s:1440   .text.alloc_large:0000000000000000 alloc_large
     /tmp/cc13lCo8.s:1613   .text.alloc_barray:0000000000000000 alloc_barray
     /tmp/cc13lCo8.s:1806   .text.alloc_sarray:0000000000000000 alloc_sarray
     /tmp/cc13lCo8.s:1994   .text.realize_virt_arrays:0000000000000000 realize_virt_arrays
     /tmp/cc13lCo8.s:2416   .text.access_virt_sarray:0000000000000000 access_virt_sarray
     /tmp/cc13lCo8.s:3069   .text.jinit_memory_mgr:0000000000000000 jinit_memory_mgr
     /tmp/cc13lCo8.s:3061   .rodata.jinit_memory_mgr.str1.1:0000000000000000 .LC0
     /tmp/cc13lCo8.s:3063   .rodata.jinit_memory_mgr.str1.1:0000000000000008 .LC1
                           .group:0000000000000000 wm4.0.a6b23a418548ac0bda5d8549c4a2ec91
                           .group:0000000000000000 wm4.stdcpredef.h.19.8dc41bed5d9037ff9622e015fb5f0ce3
                           .group:0000000000000000 wm4.jconfig.h.10.247fc3ff67998f3074970b1373c70333
                           .group:0000000000000000 wm4.features.h.19.5b5f5a19624a0527f479fdc52d54808f
                           .group:0000000000000000 wm4.cdefs.h.19.98d80eddbb3f64f4f30cd9aee9c5593c
                           .group:0000000000000000 wm4.wordsize.h.4.baf119258a1e53d8dba67ceac44ab6bc
                           .group:0000000000000000 wm4.cdefs.h.475.fb75d2e4416aa349344e6f45f683bf28
                           .group:0000000000000000 wm4.stubs64.h.10.6ce4c34010988db072c080326a6b6319
                           .group:0000000000000000 wm4.libcheaderstart.h.37.d9274df4cc0172452960ad9644fa5579
                           .group:0000000000000000 wm4.stdlib.h.28.2cffa49d94c5d85f4538f55f7b59771d
                           .group:0000000000000000 wm4.stddef.h.181.13772e73e5434e8cc4fafaaddad2b5da
                           .group:0000000000000000 wm4.waitflags.h.25.41934de4af99038521c2782f418699b1
                           .group:0000000000000000 wm4.waitstatus.h.28.93f167f49d64e2b9b99f98d1162a93bf
                           .group:0000000000000000 wm4.stdlib.h.43.9fa4f727a2f1cb8d2450a574c9195553
                           .group:0000000000000000 wm4.floatn.h.20.80c7cf8a8dfad237004b28d051d5afda
                           .group:0000000000000000 wm4.floatncommon.h.34.7e1840d7dfb19e9bdb51aeb077d76637
                           .group:0000000000000000 wm4.stdlib.h.71.2927e068ec678159b4f68ec2f089f7e6
                           .group:0000000000000000 wm4.types.h.109.56eb9ae966b255288cc544f18746a7ff
                           .group:0000000000000000 wm4.typesizes.h.24.2c64f817c0dc4b6fb2a2c619d717be26
                           .group:0000000000000000 wm4.time64.h.24.a8166ae916ec910dab0d8987098d42ee
                           .group:0000000000000000 wm4.types.h.40.18f72bab8242c2bb4c532a2aa95b5f00
                           .group:0000000000000000 wm4.stddef.h.231.0adce5c8c1fd8096aaff50981b3d1f0f
                           .group:0000000000000000 wm4.endian.h.20.efabd1018df5d7b4052c27dc6bdd5ce5
                           .group:0000000000000000 wm4.endianness.h.2.2c6a211f7909f3af5e9e9cfa3b6b63c8
                           .group:0000000000000000 wm4.endian.h.40.9e5d395adda2f4eb53ae69b69b664084
                           .group:0000000000000000 wm4.endian.h.27.4c4f94262c4eaee2982fe00ed1b4f173
                           .group:0000000000000000 wm4.byteswap.h.24.5363c019348146aada5aeadf51456576
                           .group:0000000000000000 wm4.endian.h.39.30a606dbd99b6c3df61c1f06dbdabd4e
                           .group:0000000000000000 wm4.select.h.28.eb2f3debdbcffd1442ebddaebc4fb6ff
                           .group:0000000000000000 wm4.__sigset_t.h.2.6b1ab6ff3d7b8fd9c0c42b0d80afbd80
                           .group:0000000000000000 wm4.select.h.44.887a4ff60aa97fcd9c1be017735e1675
                           .group:0000000000000000 wm4.select2.h.27.f95f2ab0ffee66dc1b6575014894b21a
                           .group:0000000000000000 wm4.types.h.186.489a4ed8f2d29cd358843490f54ddea5
                           .group:0000000000000000 wm4.pthreadtypesarch.h.25.6063cba99664c916e22d3a912bcc348a
                           .group:0000000000000000 wm4.struct_mutex.h.20.ed51f515172b9be99e450ba83eb5dd99
                           .group:0000000000000000 wm4.struct_rwlock.h.21.0254880f2904e3833fb8ae683e0f0330
                           .group:0000000000000000 wm4.alloca.h.19.edefa922a76c1cbaaf1e416903ba2d1c
                           .group:0000000000000000 wm4.alloca.h.29.156e12058824cc23d961c4d3b13031f6
                           .group:0000000000000000 wm4.stdio.h.24.5c1b97eef3c86b7a2549420f69f4f128
                           .group:0000000000000000 wm4.libcheaderstart.h.31.87b3c285aeba93fe355ad19123070832
                           .group:0000000000000000 wm4.stdio.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.stddef.h.231.8136eebbab3406dbf57a7ec475dd5d83
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.struct_FILE.h.19.0888ac70396abe1031c03d393554032f
                           .group:0000000000000000 wm4.stdio.h.53.139e45cf040c0964b2932c0c1bdaf6b2
                           .group:0000000000000000 wm4.stdio_lim.h.19.e4b00b560d878dcfbc6635b3406640c5
                           .group:0000000000000000 wm4.stdio.h.141.d7a290e19ca077c9e4aa7c43ede17a73
                           .group:0000000000000000 wm4.stdio.h.20.b0caa08e5723aa5941367be0e5d2ec59
                           .group:0000000000000000 wm4.stdio2.h.20.f45a0373b68e1296c4aa8cc09d66a9df
                           .group:0000000000000000 wm4.string.h.23.93403f89af7dba8212345449bb14b09d
                           .group:0000000000000000 wm4.string.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.strings.h.19.a259f126920b1bb5ef76bc62b3984a3c
                           .group:0000000000000000 wm4.jinclude.h.67.b19f941ec97c4845fa4609292c7e2db4
                           .group:0000000000000000 wm4.jmorecfg.h.33.3b4c5f9cc07b3737823b06caf24d5b05
                           .group:0000000000000000 wm4.jpeglib.h.40.4f111c27252a38df39328d65454e82f4
                           .group:0000000000000000 wm4.jpegint.h.26.5219ef5d4e4921371d38e77b6091fd20
                           .group:0000000000000000 wm4.jerror.h.25.1dbd8674e70ab5215bc0037320e5c2a2
                           .group:0000000000000000 wm4.jmemsys.h.78.e8417de29834b6ee7fe4d9b9f74aec3c

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
jpeg_get_small
jpeg_free_large
jpeg_free_small
jpeg_mem_term
memset
jpeg_get_large
jpeg_mem_available
jpeg_open_backing_store
jpeg_mem_init
getenv
__isoc99_sscanf
__stack_chk_fail
