   1              		.file	"jccoefct.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.start_pass_coef,"ax",@progbits
   5              		.p2align 4
   7              	start_pass_coef:
   8              	.LVL0:
   9              	.LFB52:
  10              		.file 1 "fltk-1.3.4-1/jpeg/jccoefct.c"
   1:fltk-1.3.4-1/jpeg/jccoefct.c **** /*
   2:fltk-1.3.4-1/jpeg/jccoefct.c ****  * jccoefct.c
   3:fltk-1.3.4-1/jpeg/jccoefct.c ****  *
   4:fltk-1.3.4-1/jpeg/jccoefct.c ****  * Copyright (C) 1994-1997, Thomas G. Lane.
   5:fltk-1.3.4-1/jpeg/jccoefct.c ****  * Modified 2003-2011 by Guido Vollbeding.
   6:fltk-1.3.4-1/jpeg/jccoefct.c ****  * This file is part of the Independent JPEG Group's software.
   7:fltk-1.3.4-1/jpeg/jccoefct.c ****  * For conditions of distribution and use, see the accompanying README file.
   8:fltk-1.3.4-1/jpeg/jccoefct.c ****  *
   9:fltk-1.3.4-1/jpeg/jccoefct.c ****  * This file contains the coefficient buffer controller for compression.
  10:fltk-1.3.4-1/jpeg/jccoefct.c ****  * This controller is the top level of the JPEG compressor proper.
  11:fltk-1.3.4-1/jpeg/jccoefct.c ****  * The coefficient buffer lies between forward-DCT and entropy encoding steps.
  12:fltk-1.3.4-1/jpeg/jccoefct.c ****  */
  13:fltk-1.3.4-1/jpeg/jccoefct.c **** 
  14:fltk-1.3.4-1/jpeg/jccoefct.c **** #define JPEG_INTERNALS
  15:fltk-1.3.4-1/jpeg/jccoefct.c **** #include "jinclude.h"
  16:fltk-1.3.4-1/jpeg/jccoefct.c **** #include "jpeglib.h"
  17:fltk-1.3.4-1/jpeg/jccoefct.c **** 
  18:fltk-1.3.4-1/jpeg/jccoefct.c **** 
  19:fltk-1.3.4-1/jpeg/jccoefct.c **** /* We use a full-image coefficient buffer when doing Huffman optimization,
  20:fltk-1.3.4-1/jpeg/jccoefct.c ****  * and also for writing multiple-scan JPEG files.  In all cases, the DCT
  21:fltk-1.3.4-1/jpeg/jccoefct.c ****  * step is run during the first pass, and subsequent passes need only read
  22:fltk-1.3.4-1/jpeg/jccoefct.c ****  * the buffered coefficients.
  23:fltk-1.3.4-1/jpeg/jccoefct.c ****  */
  24:fltk-1.3.4-1/jpeg/jccoefct.c **** #ifdef ENTROPY_OPT_SUPPORTED
  25:fltk-1.3.4-1/jpeg/jccoefct.c **** #define FULL_COEF_BUFFER_SUPPORTED
  26:fltk-1.3.4-1/jpeg/jccoefct.c **** #else
  27:fltk-1.3.4-1/jpeg/jccoefct.c **** #ifdef C_MULTISCAN_FILES_SUPPORTED
  28:fltk-1.3.4-1/jpeg/jccoefct.c **** #define FULL_COEF_BUFFER_SUPPORTED
  29:fltk-1.3.4-1/jpeg/jccoefct.c **** #endif
  30:fltk-1.3.4-1/jpeg/jccoefct.c **** #endif
  31:fltk-1.3.4-1/jpeg/jccoefct.c **** 
  32:fltk-1.3.4-1/jpeg/jccoefct.c **** 
  33:fltk-1.3.4-1/jpeg/jccoefct.c **** /* Private buffer controller object */
  34:fltk-1.3.4-1/jpeg/jccoefct.c **** 
  35:fltk-1.3.4-1/jpeg/jccoefct.c **** typedef struct {
  36:fltk-1.3.4-1/jpeg/jccoefct.c ****   struct jpeg_c_coef_controller pub; /* public fields */
  37:fltk-1.3.4-1/jpeg/jccoefct.c **** 
  38:fltk-1.3.4-1/jpeg/jccoefct.c ****   JDIMENSION iMCU_row_num;	/* iMCU row # within image */
  39:fltk-1.3.4-1/jpeg/jccoefct.c ****   JDIMENSION mcu_ctr;		/* counts MCUs processed in current row */
  40:fltk-1.3.4-1/jpeg/jccoefct.c ****   int MCU_vert_offset;		/* counts MCU rows within iMCU row */
  41:fltk-1.3.4-1/jpeg/jccoefct.c ****   int MCU_rows_per_iMCU_row;	/* number of such rows needed */
  42:fltk-1.3.4-1/jpeg/jccoefct.c **** 
  43:fltk-1.3.4-1/jpeg/jccoefct.c ****   /* For single-pass compression, it's sufficient to buffer just one MCU
  44:fltk-1.3.4-1/jpeg/jccoefct.c ****    * (although this may prove a bit slow in practice).  We allocate a
  45:fltk-1.3.4-1/jpeg/jccoefct.c ****    * workspace of C_MAX_BLOCKS_IN_MCU coefficient blocks, and reuse it for each
  46:fltk-1.3.4-1/jpeg/jccoefct.c ****    * MCU constructed and sent.  (On 80x86, the workspace is FAR even though
  47:fltk-1.3.4-1/jpeg/jccoefct.c ****    * it's not really very big; this is to keep the module interfaces unchanged
  48:fltk-1.3.4-1/jpeg/jccoefct.c ****    * when a large coefficient buffer is necessary.)
  49:fltk-1.3.4-1/jpeg/jccoefct.c ****    * In multi-pass modes, this array points to the current MCU's blocks
  50:fltk-1.3.4-1/jpeg/jccoefct.c ****    * within the virtual arrays.
  51:fltk-1.3.4-1/jpeg/jccoefct.c ****    */
  52:fltk-1.3.4-1/jpeg/jccoefct.c ****   JBLOCKROW MCU_buffer[C_MAX_BLOCKS_IN_MCU];
  53:fltk-1.3.4-1/jpeg/jccoefct.c **** 
  54:fltk-1.3.4-1/jpeg/jccoefct.c ****   /* In multi-pass modes, we need a virtual block array for each component. */
  55:fltk-1.3.4-1/jpeg/jccoefct.c ****   jvirt_barray_ptr whole_image[MAX_COMPONENTS];
  56:fltk-1.3.4-1/jpeg/jccoefct.c **** } my_coef_controller;
  57:fltk-1.3.4-1/jpeg/jccoefct.c **** 
  58:fltk-1.3.4-1/jpeg/jccoefct.c **** typedef my_coef_controller * my_coef_ptr;
  59:fltk-1.3.4-1/jpeg/jccoefct.c **** 
  60:fltk-1.3.4-1/jpeg/jccoefct.c **** 
  61:fltk-1.3.4-1/jpeg/jccoefct.c **** /* Forward declarations */
  62:fltk-1.3.4-1/jpeg/jccoefct.c **** METHODDEF(boolean) compress_data
  63:fltk-1.3.4-1/jpeg/jccoefct.c ****     JPP((j_compress_ptr cinfo, JSAMPIMAGE input_buf));
  64:fltk-1.3.4-1/jpeg/jccoefct.c **** #ifdef FULL_COEF_BUFFER_SUPPORTED
  65:fltk-1.3.4-1/jpeg/jccoefct.c **** METHODDEF(boolean) compress_first_pass
  66:fltk-1.3.4-1/jpeg/jccoefct.c ****     JPP((j_compress_ptr cinfo, JSAMPIMAGE input_buf));
  67:fltk-1.3.4-1/jpeg/jccoefct.c **** METHODDEF(boolean) compress_output
  68:fltk-1.3.4-1/jpeg/jccoefct.c ****     JPP((j_compress_ptr cinfo, JSAMPIMAGE input_buf));
  69:fltk-1.3.4-1/jpeg/jccoefct.c **** #endif
  70:fltk-1.3.4-1/jpeg/jccoefct.c **** 
  71:fltk-1.3.4-1/jpeg/jccoefct.c **** 
  72:fltk-1.3.4-1/jpeg/jccoefct.c **** LOCAL(void)
  73:fltk-1.3.4-1/jpeg/jccoefct.c **** start_iMCU_row (j_compress_ptr cinfo)
  74:fltk-1.3.4-1/jpeg/jccoefct.c **** /* Reset within-iMCU-row counters for a new row */
  75:fltk-1.3.4-1/jpeg/jccoefct.c **** {
  76:fltk-1.3.4-1/jpeg/jccoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  77:fltk-1.3.4-1/jpeg/jccoefct.c **** 
  78:fltk-1.3.4-1/jpeg/jccoefct.c ****   /* In an interleaved scan, an MCU row is the same as an iMCU row.
  79:fltk-1.3.4-1/jpeg/jccoefct.c ****    * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
  80:fltk-1.3.4-1/jpeg/jccoefct.c ****    * But at the bottom of the image, process only what's left.
  81:fltk-1.3.4-1/jpeg/jccoefct.c ****    */
  82:fltk-1.3.4-1/jpeg/jccoefct.c ****   if (cinfo->comps_in_scan > 1) {
  83:fltk-1.3.4-1/jpeg/jccoefct.c ****     coef->MCU_rows_per_iMCU_row = 1;
  84:fltk-1.3.4-1/jpeg/jccoefct.c ****   } else {
  85:fltk-1.3.4-1/jpeg/jccoefct.c ****     if (coef->iMCU_row_num < (cinfo->total_iMCU_rows-1))
  86:fltk-1.3.4-1/jpeg/jccoefct.c ****       coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
  87:fltk-1.3.4-1/jpeg/jccoefct.c ****     else
  88:fltk-1.3.4-1/jpeg/jccoefct.c ****       coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
  89:fltk-1.3.4-1/jpeg/jccoefct.c ****   }
  90:fltk-1.3.4-1/jpeg/jccoefct.c **** 
  91:fltk-1.3.4-1/jpeg/jccoefct.c ****   coef->mcu_ctr = 0;
  92:fltk-1.3.4-1/jpeg/jccoefct.c ****   coef->MCU_vert_offset = 0;
  93:fltk-1.3.4-1/jpeg/jccoefct.c **** }
  94:fltk-1.3.4-1/jpeg/jccoefct.c **** 
  95:fltk-1.3.4-1/jpeg/jccoefct.c **** 
  96:fltk-1.3.4-1/jpeg/jccoefct.c **** /*
  97:fltk-1.3.4-1/jpeg/jccoefct.c ****  * Initialize for a processing pass.
  98:fltk-1.3.4-1/jpeg/jccoefct.c ****  */
  99:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 100:fltk-1.3.4-1/jpeg/jccoefct.c **** METHODDEF(void)
 101:fltk-1.3.4-1/jpeg/jccoefct.c **** start_pass_coef (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
 102:fltk-1.3.4-1/jpeg/jccoefct.c **** {
  11              		.loc 1 102 1 view -0
  12              		.cfi_startproc
  13              		.loc 1 102 1 is_stmt 0 view .LVU1
  14 0000 F30F1EFA 		endbr64
 103:fltk-1.3.4-1/jpeg/jccoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  15              		.loc 1 103 3 is_stmt 1 view .LVU2
 102:fltk-1.3.4-1/jpeg/jccoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  16              		.loc 1 102 1 is_stmt 0 view .LVU3
  17 0004 53       		pushq	%rbx
  18              		.cfi_def_cfa_offset 16
  19              		.cfi_offset 3, -16
  20              		.loc 1 103 15 view .LVU4
  21 0005 488B9F08 		movq	520(%rdi), %rbx
  21      020000
  22              	.LVL1:
 104:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 105:fltk-1.3.4-1/jpeg/jccoefct.c ****   coef->iMCU_row_num = 0;
  23              		.loc 1 105 3 is_stmt 1 view .LVU5
  24              		.loc 1 105 22 is_stmt 0 view .LVU6
  25 000c C7431000 		movl	$0, 16(%rbx)
  25      000000
 106:fltk-1.3.4-1/jpeg/jccoefct.c ****   start_iMCU_row(cinfo);
  26              		.loc 1 106 3 is_stmt 1 view .LVU7
  27              	.LVL2:
  28              	.LBB20:
  29              	.LBI20:
  73:fltk-1.3.4-1/jpeg/jccoefct.c **** /* Reset within-iMCU-row counters for a new row */
  30              		.loc 1 73 1 view .LVU8
  31              	.LBB21:
  76:fltk-1.3.4-1/jpeg/jccoefct.c **** 
  32              		.loc 1 76 3 view .LVU9
  82:fltk-1.3.4-1/jpeg/jccoefct.c ****     coef->MCU_rows_per_iMCU_row = 1;
  33              		.loc 1 82 6 is_stmt 0 view .LVU10
  34 0013 83BF7401 		cmpl	$1, 372(%rdi)
  34      000001
  76:fltk-1.3.4-1/jpeg/jccoefct.c **** 
  35              		.loc 1 76 15 view .LVU11
  36 001a 488B8708 		movq	520(%rdi), %rax
  36      020000
  37              	.LVL3:
  82:fltk-1.3.4-1/jpeg/jccoefct.c ****     coef->MCU_rows_per_iMCU_row = 1;
  38              		.loc 1 82 3 is_stmt 1 view .LVU12
  82:fltk-1.3.4-1/jpeg/jccoefct.c ****     coef->MCU_rows_per_iMCU_row = 1;
  39              		.loc 1 82 6 is_stmt 0 view .LVU13
  40 0021 7E3D     		jle	.L2
  83:fltk-1.3.4-1/jpeg/jccoefct.c ****   } else {
  41              		.loc 1 83 5 is_stmt 1 view .LVU14
  83:fltk-1.3.4-1/jpeg/jccoefct.c ****   } else {
  42              		.loc 1 83 33 is_stmt 0 view .LVU15
  43 0023 C7401C01 		movl	$1, 28(%rax)
  43      000000
  44              	.L3:
  91:fltk-1.3.4-1/jpeg/jccoefct.c ****   coef->MCU_vert_offset = 0;
  45              		.loc 1 91 3 is_stmt 1 view .LVU16
  92:fltk-1.3.4-1/jpeg/jccoefct.c **** }
  46              		.loc 1 92 3 view .LVU17
  91:fltk-1.3.4-1/jpeg/jccoefct.c ****   coef->MCU_vert_offset = 0;
  47              		.loc 1 91 17 is_stmt 0 view .LVU18
  48 002a 48C74014 		movq	$0, 20(%rax)
  48      00000000 
  49              	.LVL4:
  91:fltk-1.3.4-1/jpeg/jccoefct.c ****   coef->MCU_vert_offset = 0;
  50              		.loc 1 91 17 view .LVU19
  51              	.LBE21:
  52              	.LBE20:
 107:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 108:fltk-1.3.4-1/jpeg/jccoefct.c ****   switch (pass_mode) {
  53              		.loc 1 108 3 is_stmt 1 view .LVU20
  54 0032 83FE02   		cmpl	$2, %esi
  55 0035 7451     		je	.L5
  56              	.L15:
  57              		.loc 1 108 3 is_stmt 0 view .LVU21
  58 0037 83FE03   		cmpl	$3, %esi
  59 003a 0F848800 		je	.L6
  59      0000
  60 0040 85F6     		testl	%esi, %esi
  61 0042 745C     		je	.L14
 109:fltk-1.3.4-1/jpeg/jccoefct.c ****   case JBUF_PASS_THRU:
 110:fltk-1.3.4-1/jpeg/jccoefct.c ****     if (coef->whole_image[0] != NULL)
 111:fltk-1.3.4-1/jpeg/jccoefct.c ****       ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 112:fltk-1.3.4-1/jpeg/jccoefct.c ****     coef->pub.compress_data = compress_data;
 113:fltk-1.3.4-1/jpeg/jccoefct.c ****     break;
 114:fltk-1.3.4-1/jpeg/jccoefct.c **** #ifdef FULL_COEF_BUFFER_SUPPORTED
 115:fltk-1.3.4-1/jpeg/jccoefct.c ****   case JBUF_SAVE_AND_PASS:
 116:fltk-1.3.4-1/jpeg/jccoefct.c ****     if (coef->whole_image[0] == NULL)
 117:fltk-1.3.4-1/jpeg/jccoefct.c ****       ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 118:fltk-1.3.4-1/jpeg/jccoefct.c ****     coef->pub.compress_data = compress_first_pass;
 119:fltk-1.3.4-1/jpeg/jccoefct.c ****     break;
 120:fltk-1.3.4-1/jpeg/jccoefct.c ****   case JBUF_CRANK_DEST:
 121:fltk-1.3.4-1/jpeg/jccoefct.c ****     if (coef->whole_image[0] == NULL)
 122:fltk-1.3.4-1/jpeg/jccoefct.c ****       ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 123:fltk-1.3.4-1/jpeg/jccoefct.c ****     coef->pub.compress_data = compress_output;
 124:fltk-1.3.4-1/jpeg/jccoefct.c ****     break;
 125:fltk-1.3.4-1/jpeg/jccoefct.c **** #endif
 126:fltk-1.3.4-1/jpeg/jccoefct.c ****   default:
 127:fltk-1.3.4-1/jpeg/jccoefct.c ****     ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
  62              		.loc 1 127 5 is_stmt 1 view .LVU22
  63 0044 488B07   		movq	(%rdi), %rax
  64 0047 C7402803 		movl	$3, 40(%rax)
  64      000000
  65 004e 488B07   		movq	(%rdi), %rax
 128:fltk-1.3.4-1/jpeg/jccoefct.c ****     break;
 129:fltk-1.3.4-1/jpeg/jccoefct.c ****   }
 130:fltk-1.3.4-1/jpeg/jccoefct.c **** }
  66              		.loc 1 130 1 is_stmt 0 view .LVU23
  67 0051 5B       		popq	%rbx
  68              		.cfi_remember_state
  69              		.cfi_def_cfa_offset 8
  70              	.LVL5:
 127:fltk-1.3.4-1/jpeg/jccoefct.c ****     break;
  71              		.loc 1 127 5 view .LVU24
  72 0052 488B00   		movq	(%rax), %rax
  73 0055 FFE0     		jmp	*%rax
  74              	.LVL6:
  75 0057 660F1F84 		.p2align 4,,10
  75      00000000 
  75      00
  76              		.p2align 3
  77              	.L2:
  78              		.cfi_restore_state
  79              	.LBB24:
  80              	.LBB22:
  85:fltk-1.3.4-1/jpeg/jccoefct.c ****       coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
  81              		.loc 1 85 5 is_stmt 1 view .LVU25
  85:fltk-1.3.4-1/jpeg/jccoefct.c ****       coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
  82              		.loc 1 85 53 is_stmt 0 view .LVU26
  83 0060 8B977001 		movl	368(%rdi), %edx
  83      0000
  84 0066 488B8F78 		movq	376(%rdi), %rcx
  84      010000
  85 006d 83EA01   		subl	$1, %edx
  85:fltk-1.3.4-1/jpeg/jccoefct.c ****       coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
  86              		.loc 1 85 8 view .LVU27
  87 0070 395010   		cmpl	%edx, 16(%rax)
  88 0073 736B     		jnb	.L4
  86:fltk-1.3.4-1/jpeg/jccoefct.c ****     else
  89              		.loc 1 86 7 is_stmt 1 view .LVU28
  86:fltk-1.3.4-1/jpeg/jccoefct.c ****     else
  90              		.loc 1 86 60 is_stmt 0 view .LVU29
  91 0075 8B510C   		movl	12(%rcx), %edx
  91:fltk-1.3.4-1/jpeg/jccoefct.c ****   coef->MCU_vert_offset = 0;
  92              		.loc 1 91 17 view .LVU30
  93 0078 48C74014 		movq	$0, 20(%rax)
  93      00000000 
  86:fltk-1.3.4-1/jpeg/jccoefct.c ****     else
  94              		.loc 1 86 35 view .LVU31
  95 0080 89501C   		movl	%edx, 28(%rax)
  91:fltk-1.3.4-1/jpeg/jccoefct.c ****   coef->MCU_vert_offset = 0;
  96              		.loc 1 91 3 is_stmt 1 view .LVU32
  92:fltk-1.3.4-1/jpeg/jccoefct.c **** }
  97              		.loc 1 92 3 view .LVU33
  98              	.LVL7:
  92:fltk-1.3.4-1/jpeg/jccoefct.c **** }
  99              		.loc 1 92 3 is_stmt 0 view .LVU34
 100              	.LBE22:
 101              	.LBE24:
 108:fltk-1.3.4-1/jpeg/jccoefct.c ****   case JBUF_PASS_THRU:
 102              		.loc 1 108 3 is_stmt 1 view .LVU35
 103 0083 83FE02   		cmpl	$2, %esi
 104 0086 75AF     		jne	.L15
 105              	.L5:
 121:fltk-1.3.4-1/jpeg/jccoefct.c ****       ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 106              		.loc 1 121 5 view .LVU36
 121:fltk-1.3.4-1/jpeg/jccoefct.c ****       ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 107              		.loc 1 121 8 is_stmt 0 view .LVU37
 108 0088 48837B70 		cmpq	$0, 112(%rbx)
 108      00
 109 008d 7461     		je	.L16
 110              	.LVL8:
 111              	.L11:
 123:fltk-1.3.4-1/jpeg/jccoefct.c ****     break;
 112              		.loc 1 123 5 is_stmt 1 view .LVU38
 123:fltk-1.3.4-1/jpeg/jccoefct.c ****     break;
 113              		.loc 1 123 29 is_stmt 0 view .LVU39
 114 008f 488D0500 		leaq	compress_output(%rip), %rax
 114      000000
 115 0096 48894308 		movq	%rax, 8(%rbx)
 124:fltk-1.3.4-1/jpeg/jccoefct.c **** #endif
 116              		.loc 1 124 5 is_stmt 1 view .LVU40
 117              		.loc 1 130 1 is_stmt 0 view .LVU41
 118 009a 5B       		popq	%rbx
 119              		.cfi_remember_state
 120              		.cfi_def_cfa_offset 8
 121              	.LVL9:
 122              		.loc 1 130 1 view .LVU42
 123 009b C3       		ret
 124              	.LVL10:
 125 009c 0F1F4000 		.p2align 4,,10
 126              		.p2align 3
 127              	.L14:
 128              		.cfi_restore_state
 110:fltk-1.3.4-1/jpeg/jccoefct.c ****       ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 129              		.loc 1 110 5 is_stmt 1 view .LVU43
 110:fltk-1.3.4-1/jpeg/jccoefct.c ****       ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 130              		.loc 1 110 8 is_stmt 0 view .LVU44
 131 00a0 48837B70 		cmpq	$0, 112(%rbx)
 131      00
 132 00a5 740F     		je	.L8
 111:fltk-1.3.4-1/jpeg/jccoefct.c ****     coef->pub.compress_data = compress_data;
 133              		.loc 1 111 7 is_stmt 1 view .LVU45
 134 00a7 488B07   		movq	(%rdi), %rax
 135 00aa C7402803 		movl	$3, 40(%rax)
 135      000000
 136 00b1 488B07   		movq	(%rdi), %rax
 137 00b4 FF10     		call	*(%rax)
 138              	.LVL11:
 139              	.L8:
 112:fltk-1.3.4-1/jpeg/jccoefct.c ****     break;
 140              		.loc 1 112 5 view .LVU46
 112:fltk-1.3.4-1/jpeg/jccoefct.c ****     break;
 141              		.loc 1 112 29 is_stmt 0 view .LVU47
 142 00b6 488D0500 		leaq	compress_data(%rip), %rax
 142      000000
 143 00bd 48894308 		movq	%rax, 8(%rbx)
 113:fltk-1.3.4-1/jpeg/jccoefct.c **** #ifdef FULL_COEF_BUFFER_SUPPORTED
 144              		.loc 1 113 5 is_stmt 1 view .LVU48
 145              		.loc 1 130 1 is_stmt 0 view .LVU49
 146 00c1 5B       		popq	%rbx
 147              		.cfi_remember_state
 148              		.cfi_def_cfa_offset 8
 149              	.LVL12:
 150              		.loc 1 130 1 view .LVU50
 151 00c2 C3       		ret
 152              	.LVL13:
 153              		.p2align 4,,10
 154 00c3 0F1F4400 		.p2align 3
 154      00
 155              	.L6:
 156              		.cfi_restore_state
 116:fltk-1.3.4-1/jpeg/jccoefct.c ****       ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 157              		.loc 1 116 5 is_stmt 1 view .LVU51
 116:fltk-1.3.4-1/jpeg/jccoefct.c ****       ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 158              		.loc 1 116 8 is_stmt 0 view .LVU52
 159 00c8 48837B70 		cmpq	$0, 112(%rbx)
 159      00
 160 00cd 7439     		je	.L17
 161              	.LVL14:
 162              	.L10:
 118:fltk-1.3.4-1/jpeg/jccoefct.c ****     break;
 163              		.loc 1 118 5 is_stmt 1 view .LVU53
 118:fltk-1.3.4-1/jpeg/jccoefct.c ****     break;
 164              		.loc 1 118 29 is_stmt 0 view .LVU54
 165 00cf 488D0500 		leaq	compress_first_pass(%rip), %rax
 165      000000
 166 00d6 48894308 		movq	%rax, 8(%rbx)
 119:fltk-1.3.4-1/jpeg/jccoefct.c ****   case JBUF_CRANK_DEST:
 167              		.loc 1 119 5 is_stmt 1 view .LVU55
 168              		.loc 1 130 1 is_stmt 0 view .LVU56
 169 00da 5B       		popq	%rbx
 170              		.cfi_remember_state
 171              		.cfi_def_cfa_offset 8
 172              	.LVL15:
 173              		.loc 1 130 1 view .LVU57
 174 00db C3       		ret
 175              	.LVL16:
 176 00dc 0F1F4000 		.p2align 4,,10
 177              		.p2align 3
 178              	.L4:
 179              		.cfi_restore_state
 180              	.LBB25:
 181              	.LBB23:
  88:fltk-1.3.4-1/jpeg/jccoefct.c ****   }
 182              		.loc 1 88 7 is_stmt 1 view .LVU58
  88:fltk-1.3.4-1/jpeg/jccoefct.c ****   }
 183              		.loc 1 88 60 is_stmt 0 view .LVU59
 184 00e0 8B514C   		movl	76(%rcx), %edx
  88:fltk-1.3.4-1/jpeg/jccoefct.c ****   }
 185              		.loc 1 88 35 view .LVU60
 186 00e3 89501C   		movl	%edx, 28(%rax)
 187 00e6 E93FFFFF 		jmp	.L3
 187      FF
 188              	.LVL17:
 189 00eb 0F1F4400 		.p2align 4,,10
 189      00
 190              		.p2align 3
 191              	.L16:
  88:fltk-1.3.4-1/jpeg/jccoefct.c ****   }
 192              		.loc 1 88 35 view .LVU61
 193              	.LBE23:
 194              	.LBE25:
 122:fltk-1.3.4-1/jpeg/jccoefct.c ****     coef->pub.compress_data = compress_output;
 195              		.loc 1 122 7 is_stmt 1 view .LVU62
 196 00f0 488B07   		movq	(%rdi), %rax
 197 00f3 C7402803 		movl	$3, 40(%rax)
 197      000000
 198 00fa 488B07   		movq	(%rdi), %rax
 199 00fd FF10     		call	*(%rax)
 200              	.LVL18:
 122:fltk-1.3.4-1/jpeg/jccoefct.c ****     coef->pub.compress_data = compress_output;
 201              		.loc 1 122 7 is_stmt 0 view .LVU63
 202 00ff EB8E     		jmp	.L11
 203              	.LVL19:
 204              		.p2align 4,,10
 205 0101 0F1F8000 		.p2align 3
 205      000000
 206              	.L17:
 117:fltk-1.3.4-1/jpeg/jccoefct.c ****     coef->pub.compress_data = compress_first_pass;
 207              		.loc 1 117 7 is_stmt 1 view .LVU64
 208 0108 488B07   		movq	(%rdi), %rax
 209 010b C7402803 		movl	$3, 40(%rax)
 209      000000
 210 0112 488B07   		movq	(%rdi), %rax
 211 0115 FF10     		call	*(%rax)
 212              	.LVL20:
 117:fltk-1.3.4-1/jpeg/jccoefct.c ****     coef->pub.compress_data = compress_first_pass;
 213              		.loc 1 117 7 is_stmt 0 view .LVU65
 214 0117 EBB6     		jmp	.L10
 215              		.cfi_endproc
 216              	.LFE52:
 218              		.section	.text.compress_output,"ax",@progbits
 219              		.p2align 4
 221              	compress_output:
 222              	.LVL21:
 223              	.LFB55:
 131:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 132:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 133:fltk-1.3.4-1/jpeg/jccoefct.c **** /*
 134:fltk-1.3.4-1/jpeg/jccoefct.c ****  * Process some data in the single-pass case.
 135:fltk-1.3.4-1/jpeg/jccoefct.c ****  * We process the equivalent of one fully interleaved MCU row ("iMCU" row)
 136:fltk-1.3.4-1/jpeg/jccoefct.c ****  * per call, ie, v_samp_factor block rows for each component in the image.
 137:fltk-1.3.4-1/jpeg/jccoefct.c ****  * Returns TRUE if the iMCU row is completed, FALSE if suspended.
 138:fltk-1.3.4-1/jpeg/jccoefct.c ****  *
 139:fltk-1.3.4-1/jpeg/jccoefct.c ****  * NB: input_buf contains a plane for each component in image,
 140:fltk-1.3.4-1/jpeg/jccoefct.c ****  * which we index according to the component's SOF position.
 141:fltk-1.3.4-1/jpeg/jccoefct.c ****  */
 142:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 143:fltk-1.3.4-1/jpeg/jccoefct.c **** METHODDEF(boolean)
 144:fltk-1.3.4-1/jpeg/jccoefct.c **** compress_data (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
 145:fltk-1.3.4-1/jpeg/jccoefct.c **** {
 146:fltk-1.3.4-1/jpeg/jccoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 147:fltk-1.3.4-1/jpeg/jccoefct.c ****   JDIMENSION MCU_col_num;	/* index of current MCU within row */
 148:fltk-1.3.4-1/jpeg/jccoefct.c ****   JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 149:fltk-1.3.4-1/jpeg/jccoefct.c ****   JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 150:fltk-1.3.4-1/jpeg/jccoefct.c ****   int blkn, bi, ci, yindex, yoffset, blockcnt;
 151:fltk-1.3.4-1/jpeg/jccoefct.c ****   JDIMENSION ypos, xpos;
 152:fltk-1.3.4-1/jpeg/jccoefct.c ****   jpeg_component_info *compptr;
 153:fltk-1.3.4-1/jpeg/jccoefct.c ****   forward_DCT_ptr forward_DCT;
 154:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 155:fltk-1.3.4-1/jpeg/jccoefct.c ****   /* Loop to write as much as one whole iMCU row */
 156:fltk-1.3.4-1/jpeg/jccoefct.c ****   for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 157:fltk-1.3.4-1/jpeg/jccoefct.c ****        yoffset++) {
 158:fltk-1.3.4-1/jpeg/jccoefct.c ****     for (MCU_col_num = coef->mcu_ctr; MCU_col_num <= last_MCU_col;
 159:fltk-1.3.4-1/jpeg/jccoefct.c **** 	 MCU_col_num++) {
 160:fltk-1.3.4-1/jpeg/jccoefct.c ****       /* Determine where data comes from in input_buf and do the DCT thing.
 161:fltk-1.3.4-1/jpeg/jccoefct.c ****        * Each call on forward_DCT processes a horizontal row of DCT blocks
 162:fltk-1.3.4-1/jpeg/jccoefct.c ****        * as wide as an MCU; we rely on having allocated the MCU_buffer[] blocks
 163:fltk-1.3.4-1/jpeg/jccoefct.c ****        * sequentially.  Dummy blocks at the right or bottom edge are filled in
 164:fltk-1.3.4-1/jpeg/jccoefct.c ****        * specially.  The data in them does not matter for image reconstruction,
 165:fltk-1.3.4-1/jpeg/jccoefct.c ****        * so we fill them with values that will encode to the smallest amount of
 166:fltk-1.3.4-1/jpeg/jccoefct.c ****        * data, viz: all zeroes in the AC entries, DC entries equal to previous
 167:fltk-1.3.4-1/jpeg/jccoefct.c ****        * block's DC value.  (Thanks to Thomas Kinsman for this idea.)
 168:fltk-1.3.4-1/jpeg/jccoefct.c ****        */
 169:fltk-1.3.4-1/jpeg/jccoefct.c ****       blkn = 0;
 170:fltk-1.3.4-1/jpeg/jccoefct.c ****       for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 171:fltk-1.3.4-1/jpeg/jccoefct.c **** 	compptr = cinfo->cur_comp_info[ci];
 172:fltk-1.3.4-1/jpeg/jccoefct.c **** 	forward_DCT = cinfo->fdct->forward_DCT[compptr->component_index];
 173:fltk-1.3.4-1/jpeg/jccoefct.c **** 	blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
 174:fltk-1.3.4-1/jpeg/jccoefct.c **** 						: compptr->last_col_width;
 175:fltk-1.3.4-1/jpeg/jccoefct.c **** 	xpos = MCU_col_num * compptr->MCU_sample_width;
 176:fltk-1.3.4-1/jpeg/jccoefct.c **** 	ypos = yoffset * compptr->DCT_v_scaled_size;
 177:fltk-1.3.4-1/jpeg/jccoefct.c **** 	/* ypos == (yoffset+yindex) * DCTSIZE */
 178:fltk-1.3.4-1/jpeg/jccoefct.c **** 	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 179:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  if (coef->iMCU_row_num < last_iMCU_row ||
 180:fltk-1.3.4-1/jpeg/jccoefct.c **** 	      yoffset+yindex < compptr->last_row_height) {
 181:fltk-1.3.4-1/jpeg/jccoefct.c **** 	    (*forward_DCT) (cinfo, compptr,
 182:fltk-1.3.4-1/jpeg/jccoefct.c **** 			    input_buf[compptr->component_index],
 183:fltk-1.3.4-1/jpeg/jccoefct.c **** 			    coef->MCU_buffer[blkn],
 184:fltk-1.3.4-1/jpeg/jccoefct.c **** 			    ypos, xpos, (JDIMENSION) blockcnt);
 185:fltk-1.3.4-1/jpeg/jccoefct.c **** 	    if (blockcnt < compptr->MCU_width) {
 186:fltk-1.3.4-1/jpeg/jccoefct.c **** 	      /* Create some dummy blocks at the right edge of the image. */
 187:fltk-1.3.4-1/jpeg/jccoefct.c **** 	      FMEMZERO((void FAR *) coef->MCU_buffer[blkn + blockcnt],
 188:fltk-1.3.4-1/jpeg/jccoefct.c **** 		       (compptr->MCU_width - blockcnt) * SIZEOF(JBLOCK));
 189:fltk-1.3.4-1/jpeg/jccoefct.c **** 	      for (bi = blockcnt; bi < compptr->MCU_width; bi++) {
 190:fltk-1.3.4-1/jpeg/jccoefct.c **** 		coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn+bi-1][0][0];
 191:fltk-1.3.4-1/jpeg/jccoefct.c **** 	      }
 192:fltk-1.3.4-1/jpeg/jccoefct.c **** 	    }
 193:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  } else {
 194:fltk-1.3.4-1/jpeg/jccoefct.c **** 	    /* Create a row of dummy blocks at the bottom of the image. */
 195:fltk-1.3.4-1/jpeg/jccoefct.c **** 	    FMEMZERO((void FAR *) coef->MCU_buffer[blkn],
 196:fltk-1.3.4-1/jpeg/jccoefct.c **** 		     compptr->MCU_width * SIZEOF(JBLOCK));
 197:fltk-1.3.4-1/jpeg/jccoefct.c **** 	    for (bi = 0; bi < compptr->MCU_width; bi++) {
 198:fltk-1.3.4-1/jpeg/jccoefct.c **** 	      coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn-1][0][0];
 199:fltk-1.3.4-1/jpeg/jccoefct.c **** 	    }
 200:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  }
 201:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  blkn += compptr->MCU_width;
 202:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  ypos += compptr->DCT_v_scaled_size;
 203:fltk-1.3.4-1/jpeg/jccoefct.c **** 	}
 204:fltk-1.3.4-1/jpeg/jccoefct.c ****       }
 205:fltk-1.3.4-1/jpeg/jccoefct.c ****       /* Try to write the MCU.  In event of a suspension failure, we will
 206:fltk-1.3.4-1/jpeg/jccoefct.c ****        * re-DCT the MCU on restart (a bit inefficient, could be fixed...)
 207:fltk-1.3.4-1/jpeg/jccoefct.c ****        */
 208:fltk-1.3.4-1/jpeg/jccoefct.c ****       if (! (*cinfo->entropy->encode_mcu) (cinfo, coef->MCU_buffer)) {
 209:fltk-1.3.4-1/jpeg/jccoefct.c **** 	/* Suspension forced; update state counters and exit */
 210:fltk-1.3.4-1/jpeg/jccoefct.c **** 	coef->MCU_vert_offset = yoffset;
 211:fltk-1.3.4-1/jpeg/jccoefct.c **** 	coef->mcu_ctr = MCU_col_num;
 212:fltk-1.3.4-1/jpeg/jccoefct.c **** 	return FALSE;
 213:fltk-1.3.4-1/jpeg/jccoefct.c ****       }
 214:fltk-1.3.4-1/jpeg/jccoefct.c ****     }
 215:fltk-1.3.4-1/jpeg/jccoefct.c ****     /* Completed an MCU row, but perhaps not an iMCU row */
 216:fltk-1.3.4-1/jpeg/jccoefct.c ****     coef->mcu_ctr = 0;
 217:fltk-1.3.4-1/jpeg/jccoefct.c ****   }
 218:fltk-1.3.4-1/jpeg/jccoefct.c ****   /* Completed the iMCU row, advance counters for next one */
 219:fltk-1.3.4-1/jpeg/jccoefct.c ****   coef->iMCU_row_num++;
 220:fltk-1.3.4-1/jpeg/jccoefct.c ****   start_iMCU_row(cinfo);
 221:fltk-1.3.4-1/jpeg/jccoefct.c ****   return TRUE;
 222:fltk-1.3.4-1/jpeg/jccoefct.c **** }
 223:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 224:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 225:fltk-1.3.4-1/jpeg/jccoefct.c **** #ifdef FULL_COEF_BUFFER_SUPPORTED
 226:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 227:fltk-1.3.4-1/jpeg/jccoefct.c **** /*
 228:fltk-1.3.4-1/jpeg/jccoefct.c ****  * Process some data in the first pass of a multi-pass case.
 229:fltk-1.3.4-1/jpeg/jccoefct.c ****  * We process the equivalent of one fully interleaved MCU row ("iMCU" row)
 230:fltk-1.3.4-1/jpeg/jccoefct.c ****  * per call, ie, v_samp_factor block rows for each component in the image.
 231:fltk-1.3.4-1/jpeg/jccoefct.c ****  * This amount of data is read from the source buffer, DCT'd and quantized,
 232:fltk-1.3.4-1/jpeg/jccoefct.c ****  * and saved into the virtual arrays.  We also generate suitable dummy blocks
 233:fltk-1.3.4-1/jpeg/jccoefct.c ****  * as needed at the right and lower edges.  (The dummy blocks are constructed
 234:fltk-1.3.4-1/jpeg/jccoefct.c ****  * in the virtual arrays, which have been padded appropriately.)  This makes
 235:fltk-1.3.4-1/jpeg/jccoefct.c ****  * it possible for subsequent passes not to worry about real vs. dummy blocks.
 236:fltk-1.3.4-1/jpeg/jccoefct.c ****  *
 237:fltk-1.3.4-1/jpeg/jccoefct.c ****  * We must also emit the data to the entropy encoder.  This is conveniently
 238:fltk-1.3.4-1/jpeg/jccoefct.c ****  * done by calling compress_output() after we've loaded the current strip
 239:fltk-1.3.4-1/jpeg/jccoefct.c ****  * of the virtual arrays.
 240:fltk-1.3.4-1/jpeg/jccoefct.c ****  *
 241:fltk-1.3.4-1/jpeg/jccoefct.c ****  * NB: input_buf contains a plane for each component in image.  All
 242:fltk-1.3.4-1/jpeg/jccoefct.c ****  * components are DCT'd and loaded into the virtual arrays in this pass.
 243:fltk-1.3.4-1/jpeg/jccoefct.c ****  * However, it may be that only a subset of the components are emitted to
 244:fltk-1.3.4-1/jpeg/jccoefct.c ****  * the entropy encoder during this first pass; be careful about looking
 245:fltk-1.3.4-1/jpeg/jccoefct.c ****  * at the scan-dependent variables (MCU dimensions, etc).
 246:fltk-1.3.4-1/jpeg/jccoefct.c ****  */
 247:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 248:fltk-1.3.4-1/jpeg/jccoefct.c **** METHODDEF(boolean)
 249:fltk-1.3.4-1/jpeg/jccoefct.c **** compress_first_pass (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
 250:fltk-1.3.4-1/jpeg/jccoefct.c **** {
 251:fltk-1.3.4-1/jpeg/jccoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 252:fltk-1.3.4-1/jpeg/jccoefct.c ****   JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 253:fltk-1.3.4-1/jpeg/jccoefct.c ****   JDIMENSION blocks_across, MCUs_across, MCUindex;
 254:fltk-1.3.4-1/jpeg/jccoefct.c ****   int bi, ci, h_samp_factor, block_row, block_rows, ndummy;
 255:fltk-1.3.4-1/jpeg/jccoefct.c ****   JCOEF lastDC;
 256:fltk-1.3.4-1/jpeg/jccoefct.c ****   jpeg_component_info *compptr;
 257:fltk-1.3.4-1/jpeg/jccoefct.c ****   JBLOCKARRAY buffer;
 258:fltk-1.3.4-1/jpeg/jccoefct.c ****   JBLOCKROW thisblockrow, lastblockrow;
 259:fltk-1.3.4-1/jpeg/jccoefct.c ****   forward_DCT_ptr forward_DCT;
 260:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 261:fltk-1.3.4-1/jpeg/jccoefct.c ****   for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 262:fltk-1.3.4-1/jpeg/jccoefct.c ****        ci++, compptr++) {
 263:fltk-1.3.4-1/jpeg/jccoefct.c ****     /* Align the virtual buffer for this component. */
 264:fltk-1.3.4-1/jpeg/jccoefct.c ****     buffer = (*cinfo->mem->access_virt_barray)
 265:fltk-1.3.4-1/jpeg/jccoefct.c ****       ((j_common_ptr) cinfo, coef->whole_image[ci],
 266:fltk-1.3.4-1/jpeg/jccoefct.c ****        coef->iMCU_row_num * compptr->v_samp_factor,
 267:fltk-1.3.4-1/jpeg/jccoefct.c ****        (JDIMENSION) compptr->v_samp_factor, TRUE);
 268:fltk-1.3.4-1/jpeg/jccoefct.c ****     /* Count non-dummy DCT block rows in this iMCU row. */
 269:fltk-1.3.4-1/jpeg/jccoefct.c ****     if (coef->iMCU_row_num < last_iMCU_row)
 270:fltk-1.3.4-1/jpeg/jccoefct.c ****       block_rows = compptr->v_samp_factor;
 271:fltk-1.3.4-1/jpeg/jccoefct.c ****     else {
 272:fltk-1.3.4-1/jpeg/jccoefct.c ****       /* NB: can't use last_row_height here, since may not be set! */
 273:fltk-1.3.4-1/jpeg/jccoefct.c ****       block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 274:fltk-1.3.4-1/jpeg/jccoefct.c ****       if (block_rows == 0) block_rows = compptr->v_samp_factor;
 275:fltk-1.3.4-1/jpeg/jccoefct.c ****     }
 276:fltk-1.3.4-1/jpeg/jccoefct.c ****     blocks_across = compptr->width_in_blocks;
 277:fltk-1.3.4-1/jpeg/jccoefct.c ****     h_samp_factor = compptr->h_samp_factor;
 278:fltk-1.3.4-1/jpeg/jccoefct.c ****     /* Count number of dummy blocks to be added at the right margin. */
 279:fltk-1.3.4-1/jpeg/jccoefct.c ****     ndummy = (int) (blocks_across % h_samp_factor);
 280:fltk-1.3.4-1/jpeg/jccoefct.c ****     if (ndummy > 0)
 281:fltk-1.3.4-1/jpeg/jccoefct.c ****       ndummy = h_samp_factor - ndummy;
 282:fltk-1.3.4-1/jpeg/jccoefct.c ****     forward_DCT = cinfo->fdct->forward_DCT[ci];
 283:fltk-1.3.4-1/jpeg/jccoefct.c ****     /* Perform DCT for all non-dummy blocks in this iMCU row.  Each call
 284:fltk-1.3.4-1/jpeg/jccoefct.c ****      * on forward_DCT processes a complete horizontal row of DCT blocks.
 285:fltk-1.3.4-1/jpeg/jccoefct.c ****      */
 286:fltk-1.3.4-1/jpeg/jccoefct.c ****     for (block_row = 0; block_row < block_rows; block_row++) {
 287:fltk-1.3.4-1/jpeg/jccoefct.c ****       thisblockrow = buffer[block_row];
 288:fltk-1.3.4-1/jpeg/jccoefct.c ****       (*forward_DCT) (cinfo, compptr, input_buf[ci], thisblockrow,
 289:fltk-1.3.4-1/jpeg/jccoefct.c **** 		      (JDIMENSION) (block_row * compptr->DCT_v_scaled_size),
 290:fltk-1.3.4-1/jpeg/jccoefct.c **** 		      (JDIMENSION) 0, blocks_across);
 291:fltk-1.3.4-1/jpeg/jccoefct.c ****       if (ndummy > 0) {
 292:fltk-1.3.4-1/jpeg/jccoefct.c **** 	/* Create dummy blocks at the right edge of the image. */
 293:fltk-1.3.4-1/jpeg/jccoefct.c **** 	thisblockrow += blocks_across; /* => first dummy block */
 294:fltk-1.3.4-1/jpeg/jccoefct.c **** 	FMEMZERO((void FAR *) thisblockrow, ndummy * SIZEOF(JBLOCK));
 295:fltk-1.3.4-1/jpeg/jccoefct.c **** 	lastDC = thisblockrow[-1][0];
 296:fltk-1.3.4-1/jpeg/jccoefct.c **** 	for (bi = 0; bi < ndummy; bi++) {
 297:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  thisblockrow[bi][0] = lastDC;
 298:fltk-1.3.4-1/jpeg/jccoefct.c **** 	}
 299:fltk-1.3.4-1/jpeg/jccoefct.c ****       }
 300:fltk-1.3.4-1/jpeg/jccoefct.c ****     }
 301:fltk-1.3.4-1/jpeg/jccoefct.c ****     /* If at end of image, create dummy block rows as needed.
 302:fltk-1.3.4-1/jpeg/jccoefct.c ****      * The tricky part here is that within each MCU, we want the DC values
 303:fltk-1.3.4-1/jpeg/jccoefct.c ****      * of the dummy blocks to match the last real block's DC value.
 304:fltk-1.3.4-1/jpeg/jccoefct.c ****      * This squeezes a few more bytes out of the resulting file...
 305:fltk-1.3.4-1/jpeg/jccoefct.c ****      */
 306:fltk-1.3.4-1/jpeg/jccoefct.c ****     if (coef->iMCU_row_num == last_iMCU_row) {
 307:fltk-1.3.4-1/jpeg/jccoefct.c ****       blocks_across += ndummy;	/* include lower right corner */
 308:fltk-1.3.4-1/jpeg/jccoefct.c ****       MCUs_across = blocks_across / h_samp_factor;
 309:fltk-1.3.4-1/jpeg/jccoefct.c ****       for (block_row = block_rows; block_row < compptr->v_samp_factor;
 310:fltk-1.3.4-1/jpeg/jccoefct.c **** 	   block_row++) {
 311:fltk-1.3.4-1/jpeg/jccoefct.c **** 	thisblockrow = buffer[block_row];
 312:fltk-1.3.4-1/jpeg/jccoefct.c **** 	lastblockrow = buffer[block_row-1];
 313:fltk-1.3.4-1/jpeg/jccoefct.c **** 	FMEMZERO((void FAR *) thisblockrow,
 314:fltk-1.3.4-1/jpeg/jccoefct.c **** 		 (size_t) (blocks_across * SIZEOF(JBLOCK)));
 315:fltk-1.3.4-1/jpeg/jccoefct.c **** 	for (MCUindex = 0; MCUindex < MCUs_across; MCUindex++) {
 316:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  lastDC = lastblockrow[h_samp_factor-1][0];
 317:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  for (bi = 0; bi < h_samp_factor; bi++) {
 318:fltk-1.3.4-1/jpeg/jccoefct.c **** 	    thisblockrow[bi][0] = lastDC;
 319:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  }
 320:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  thisblockrow += h_samp_factor; /* advance to next MCU in row */
 321:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  lastblockrow += h_samp_factor;
 322:fltk-1.3.4-1/jpeg/jccoefct.c **** 	}
 323:fltk-1.3.4-1/jpeg/jccoefct.c ****       }
 324:fltk-1.3.4-1/jpeg/jccoefct.c ****     }
 325:fltk-1.3.4-1/jpeg/jccoefct.c ****   }
 326:fltk-1.3.4-1/jpeg/jccoefct.c ****   /* NB: compress_output will increment iMCU_row_num if successful.
 327:fltk-1.3.4-1/jpeg/jccoefct.c ****    * A suspension return will result in redoing all the work above next time.
 328:fltk-1.3.4-1/jpeg/jccoefct.c ****    */
 329:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 330:fltk-1.3.4-1/jpeg/jccoefct.c ****   /* Emit data to the entropy encoder, sharing code with subsequent passes */
 331:fltk-1.3.4-1/jpeg/jccoefct.c ****   return compress_output(cinfo, input_buf);
 332:fltk-1.3.4-1/jpeg/jccoefct.c **** }
 333:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 334:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 335:fltk-1.3.4-1/jpeg/jccoefct.c **** /*
 336:fltk-1.3.4-1/jpeg/jccoefct.c ****  * Process some data in subsequent passes of a multi-pass case.
 337:fltk-1.3.4-1/jpeg/jccoefct.c ****  * We process the equivalent of one fully interleaved MCU row ("iMCU" row)
 338:fltk-1.3.4-1/jpeg/jccoefct.c ****  * per call, ie, v_samp_factor block rows for each component in the scan.
 339:fltk-1.3.4-1/jpeg/jccoefct.c ****  * The data is obtained from the virtual arrays and fed to the entropy coder.
 340:fltk-1.3.4-1/jpeg/jccoefct.c ****  * Returns TRUE if the iMCU row is completed, FALSE if suspended.
 341:fltk-1.3.4-1/jpeg/jccoefct.c ****  *
 342:fltk-1.3.4-1/jpeg/jccoefct.c ****  * NB: input_buf is ignored; it is likely to be a NULL pointer.
 343:fltk-1.3.4-1/jpeg/jccoefct.c ****  */
 344:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 345:fltk-1.3.4-1/jpeg/jccoefct.c **** METHODDEF(boolean)
 346:fltk-1.3.4-1/jpeg/jccoefct.c **** compress_output (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
 347:fltk-1.3.4-1/jpeg/jccoefct.c **** {
 224              		.loc 1 347 1 is_stmt 1 view -0
 225              		.cfi_startproc
 226              		.loc 1 347 1 is_stmt 0 view .LVU67
 227 0000 F30F1EFA 		endbr64
 228 0004 4157     		pushq	%r15
 229              		.cfi_def_cfa_offset 16
 230              		.cfi_offset 15, -16
 231 0006 4156     		pushq	%r14
 232              		.cfi_def_cfa_offset 24
 233              		.cfi_offset 14, -24
 234 0008 4155     		pushq	%r13
 235              		.cfi_def_cfa_offset 32
 236              		.cfi_offset 13, -32
 237 000a 4154     		pushq	%r12
 238              		.cfi_def_cfa_offset 40
 239              		.cfi_offset 12, -40
 240 000c 4531E4   		xorl	%r12d, %r12d
 241 000f 55       		pushq	%rbp
 242              		.cfi_def_cfa_offset 48
 243              		.cfi_offset 6, -48
 244 0010 4889FD   		movq	%rdi, %rbp
 245 0013 53       		pushq	%rbx
 246              		.cfi_def_cfa_offset 56
 247              		.cfi_offset 3, -56
 248 0014 4883EC48 		subq	$72, %rsp
 249              		.cfi_def_cfa_offset 128
 348:fltk-1.3.4-1/jpeg/jccoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 349:fltk-1.3.4-1/jpeg/jccoefct.c ****   JDIMENSION MCU_col_num;	/* index of current MCU within row */
 350:fltk-1.3.4-1/jpeg/jccoefct.c ****   int blkn, ci, xindex, yindex, yoffset;
 351:fltk-1.3.4-1/jpeg/jccoefct.c ****   JDIMENSION start_col;
 352:fltk-1.3.4-1/jpeg/jccoefct.c ****   JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
 353:fltk-1.3.4-1/jpeg/jccoefct.c ****   JBLOCKROW buffer_ptr;
 354:fltk-1.3.4-1/jpeg/jccoefct.c ****   jpeg_component_info *compptr;
 355:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 356:fltk-1.3.4-1/jpeg/jccoefct.c ****   /* Align the virtual buffers for the components used in this scan.
 357:fltk-1.3.4-1/jpeg/jccoefct.c ****    * NB: during first pass, this is safe only because the buffers will
 358:fltk-1.3.4-1/jpeg/jccoefct.c ****    * already be aligned properly, so jmemmgr.c won't need to do any I/O.
 359:fltk-1.3.4-1/jpeg/jccoefct.c ****    */
 360:fltk-1.3.4-1/jpeg/jccoefct.c ****   for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 250              		.loc 1 360 3 view .LVU68
 251 0018 8BB77401 		movl	372(%rdi), %esi
 251      0000
 252              	.LVL22:
 348:fltk-1.3.4-1/jpeg/jccoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 253              		.loc 1 348 15 view .LVU69
 254 001e 488B9F08 		movq	520(%rdi), %rbx
 254      020000
 347:fltk-1.3.4-1/jpeg/jccoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 255              		.loc 1 347 1 view .LVU70
 256 0025 64488B04 		movq	%fs:40, %rax
 256      25280000 
 256      00
 257 002e 48894424 		movq	%rax, 56(%rsp)
 257      38
 258 0033 31C0     		xorl	%eax, %eax
 348:fltk-1.3.4-1/jpeg/jccoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 259              		.loc 1 348 3 is_stmt 1 view .LVU71
 260              	.LVL23:
 349:fltk-1.3.4-1/jpeg/jccoefct.c ****   int blkn, ci, xindex, yindex, yoffset;
 261              		.loc 1 349 3 view .LVU72
 350:fltk-1.3.4-1/jpeg/jccoefct.c ****   JDIMENSION start_col;
 262              		.loc 1 350 3 view .LVU73
 351:fltk-1.3.4-1/jpeg/jccoefct.c ****   JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
 263              		.loc 1 351 3 view .LVU74
 352:fltk-1.3.4-1/jpeg/jccoefct.c ****   JBLOCKROW buffer_ptr;
 264              		.loc 1 352 3 view .LVU75
 353:fltk-1.3.4-1/jpeg/jccoefct.c ****   jpeg_component_info *compptr;
 265              		.loc 1 353 3 view .LVU76
 354:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 266              		.loc 1 354 3 view .LVU77
 267              		.loc 1 360 3 view .LVU78
 268              		.loc 1 360 16 view .LVU79
 269 0035 4C8D6C24 		leaq	16(%rsp), %r13
 269      10
 270              		.loc 1 360 3 is_stmt 0 view .LVU80
 271 003a 85F6     		testl	%esi, %esi
 272 003c 7E39     		jle	.L22
 273              	.LVL24:
 274              	.L19:
 361:fltk-1.3.4-1/jpeg/jccoefct.c ****     compptr = cinfo->cur_comp_info[ci];
 275              		.loc 1 361 5 is_stmt 1 discriminator 3 view .LVU81
 276              		.loc 1 361 13 is_stmt 0 discriminator 3 view .LVU82
 277 003e 4A8B84E5 		movq	376(%rbp,%r12,8), %rax
 277      78010000 
 278              	.LVL25:
 362:fltk-1.3.4-1/jpeg/jccoefct.c ****     buffer[ci] = (*cinfo->mem->access_virt_barray)
 279              		.loc 1 362 5 is_stmt 1 discriminator 3 view .LVU83
 280              		.loc 1 362 19 is_stmt 0 discriminator 3 view .LVU84
 281 0046 8B5310   		movl	16(%rbx), %edx
 282 0049 4531C0   		xorl	%r8d, %r8d
 283 004c 4889EF   		movq	%rbp, %rdi
 284 004f 8B480C   		movl	12(%rax), %ecx
 285 0052 48634004 		movslq	4(%rax), %rax
 286              	.LVL26:
 287              		.loc 1 362 19 discriminator 3 view .LVU85
 288 0056 488B74C3 		movq	112(%rbx,%rax,8), %rsi
 288      70
 289 005b 488B4508 		movq	8(%rbp), %rax
 290 005f 0FAFD1   		imull	%ecx, %edx
 291 0062 FF5040   		call	*64(%rax)
 292              	.LVL27:
 293              		.loc 1 362 16 discriminator 3 view .LVU86
 294 0065 4B8944E5 		movq	%rax, 0(%r13,%r12,8)
 294      00
 360:fltk-1.3.4-1/jpeg/jccoefct.c ****     compptr = cinfo->cur_comp_info[ci];
 295              		.loc 1 360 43 is_stmt 1 discriminator 3 view .LVU87
 296              	.LVL28:
 360:fltk-1.3.4-1/jpeg/jccoefct.c ****     compptr = cinfo->cur_comp_info[ci];
 297              		.loc 1 360 16 discriminator 3 view .LVU88
 298 006a 4983C401 		addq	$1, %r12
 299              	.LVL29:
 360:fltk-1.3.4-1/jpeg/jccoefct.c ****     compptr = cinfo->cur_comp_info[ci];
 300              		.loc 1 360 3 is_stmt 0 discriminator 3 view .LVU89
 301 006e 4439A574 		cmpl	%r12d, 372(%rbp)
 301      010000
 302 0075 7FC7     		jg	.L19
 303              	.L22:
 363:fltk-1.3.4-1/jpeg/jccoefct.c ****       ((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
 364:fltk-1.3.4-1/jpeg/jccoefct.c ****        coef->iMCU_row_num * compptr->v_samp_factor,
 365:fltk-1.3.4-1/jpeg/jccoefct.c ****        (JDIMENSION) compptr->v_samp_factor, FALSE);
 366:fltk-1.3.4-1/jpeg/jccoefct.c ****   }
 367:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 368:fltk-1.3.4-1/jpeg/jccoefct.c ****   /* Loop to process one whole iMCU row */
 369:fltk-1.3.4-1/jpeg/jccoefct.c ****   for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 304              		.loc 1 369 3 is_stmt 1 view .LVU90
 305              		.loc 1 369 16 is_stmt 0 view .LVU91
 306 0077 448B7318 		movl	24(%rbx), %r14d
 307              	.LVL30:
 308              		.loc 1 369 41 is_stmt 1 view .LVU92
 309              		.loc 1 369 3 is_stmt 0 view .LVU93
 310 007b 4439731C 		cmpl	%r14d, 28(%rbx)
 311 007f 0F8E1201 		jle	.L21
 311      0000
 312 0085 488D4320 		leaq	32(%rbx), %rax
 313 0089 4D63EE   		movslq	%r14d, %r13
 314 008c 448B6314 		movl	20(%rbx), %r12d
 315 0090 48894424 		movq	%rax, 8(%rsp)
 315      08
 316 0095 49C1E503 		salq	$3, %r13
 317              	.L35:
 370:fltk-1.3.4-1/jpeg/jccoefct.c ****        yoffset++) {
 371:fltk-1.3.4-1/jpeg/jccoefct.c ****     for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
 318              		.loc 1 371 5 is_stmt 1 view .LVU94
 319              	.LVL31:
 320              		.loc 1 371 39 view .LVU95
 321              		.loc 1 371 5 is_stmt 0 view .LVU96
 322 0099 4439A598 		cmpl	%r12d, 408(%rbp)
 322      010000
 323 00a0 0F86D500 		jbe	.L25
 323      0000
 324              		.loc 1 371 5 view .LVU97
 325 00a6 44897424 		movl	%r14d, 4(%rsp)
 325      04
 326 00ab 4C8B7424 		movq	8(%rsp), %r14
 326      08
 327              	.LVL32:
 328              	.L26:
 372:fltk-1.3.4-1/jpeg/jccoefct.c **** 	 MCU_col_num++) {
 373:fltk-1.3.4-1/jpeg/jccoefct.c ****       /* Construct list of pointers to DCT blocks belonging to this MCU */
 374:fltk-1.3.4-1/jpeg/jccoefct.c ****       blkn = 0;			/* index of current DCT block within MCU */
 375:fltk-1.3.4-1/jpeg/jccoefct.c ****       for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 329              		.loc 1 375 20 is_stmt 1 view .LVU98
 330              		.loc 1 375 7 is_stmt 0 view .LVU99
 331 00b0 8B857401 		movl	372(%rbp), %eax
 331      0000
 332 00b6 4531FF   		xorl	%r15d, %r15d
 374:fltk-1.3.4-1/jpeg/jccoefct.c ****       for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 333              		.loc 1 374 12 view .LVU100
 334 00b9 31FF     		xorl	%edi, %edi
 335              		.loc 1 375 7 view .LVU101
 336 00bb 85C0     		testl	%eax, %eax
 337 00bd 0F8E8E00 		jle	.L34
 337      0000
 338              	.LVL33:
 339              		.p2align 4,,10
 340 00c3 0F1F4400 		.p2align 3
 340      00
 341              	.L31:
 376:fltk-1.3.4-1/jpeg/jccoefct.c **** 	compptr = cinfo->cur_comp_info[ci];
 342              		.loc 1 376 2 is_stmt 1 view .LVU102
 343              		.loc 1 376 10 is_stmt 0 view .LVU103
 344 00c8 4A8BB4FD 		movq	376(%rbp,%r15,8), %rsi
 344      78010000 
 345              	.LVL34:
 377:fltk-1.3.4-1/jpeg/jccoefct.c **** 	start_col = MCU_col_num * compptr->MCU_width;
 346              		.loc 1 377 2 is_stmt 1 view .LVU104
 347              		.loc 1 377 35 is_stmt 0 view .LVU105
 348 00d0 8B4638   		movl	56(%rsi), %eax
 378:fltk-1.3.4-1/jpeg/jccoefct.c **** 	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 349              		.loc 1 378 2 view .LVU106
 350 00d3 8B4E3C   		movl	60(%rsi), %ecx
 377:fltk-1.3.4-1/jpeg/jccoefct.c **** 	start_col = MCU_col_num * compptr->MCU_width;
 351              		.loc 1 377 12 view .LVU107
 352 00d6 89C2     		movl	%eax, %edx
 353 00d8 410FAFD4 		imull	%r12d, %edx
 354              	.LVL35:
 355              		.loc 1 378 2 is_stmt 1 view .LVU108
 356              		.loc 1 378 19 view .LVU109
 357              		.loc 1 378 2 is_stmt 0 view .LVU110
 358 00dc 85C9     		testl	%ecx, %ecx
 359 00de 7E60     		jle	.L27
 360 00e0 4E8B5CFC 		movq	16(%rsp,%r15,8), %r11
 360      10
 379:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 361              		.loc 1 379 44 view .LVU111
 362 00e5 4189D2   		movl	%edx, %r10d
 363 00e8 4531C9   		xorl	%r9d, %r9d
 364 00eb 49C1E207 		salq	$7, %r10
 365 00ef 4D01EB   		addq	%r13, %r11
 366              	.LVL36:
 367              		.p2align 4,,10
 368 00f2 660F1F44 		.p2align 3
 368      0000
 369              	.L30:
 370              		.loc 1 379 4 is_stmt 1 view .LVU112
 371              		.loc 1 379 15 is_stmt 0 view .LVU113
 372 00f8 4B8B14CB 		movq	(%r11,%r9,8), %rdx
 373 00fc 4C01D2   		addq	%r10, %rdx
 374              	.LVL37:
 380:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 375              		.loc 1 380 4 is_stmt 1 view .LVU114
 376              		.loc 1 380 21 view .LVU115
 377              		.loc 1 380 4 is_stmt 0 view .LVU116
 378 00ff 85C0     		testl	%eax, %eax
 379 0101 7E28     		jle	.L28
 380              		.loc 1 380 4 view .LVU117
 381 0103 8D4701   		leal	1(%rdi), %eax
 382 0106 F7D7     		notl	%edi
 383              	.LVL38:
 384              		.loc 1 380 4 view .LVU118
 385 0108 4898     		cltq
 386 010a 4189F8   		movl	%edi, %r8d
 387              	.LVL39:
 388 010d 0F1F00   		.p2align 4,,10
 389              		.p2align 3
 390              	.L29:
 381:fltk-1.3.4-1/jpeg/jccoefct.c **** 	    coef->MCU_buffer[blkn++] = buffer_ptr++;
 391              		.loc 1 381 6 is_stmt 1 discriminator 3 view .LVU119
 392 0110 4889D1   		movq	%rdx, %rcx
 393              		.loc 1 381 27 is_stmt 0 discriminator 3 view .LVU120
 394 0113 89C7     		movl	%eax, %edi
 395              		.loc 1 381 43 discriminator 3 view .LVU121
 396 0115 4883EA80 		subq	$-128, %rdx
 397              	.LVL40:
 398              		.loc 1 381 31 discriminator 3 view .LVU122
 399 0119 48894CC3 		movq	%rcx, 24(%rbx,%rax,8)
 399      18
 380:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 400              		.loc 1 380 50 is_stmt 1 discriminator 3 view .LVU123
 401              	.LVL41:
 380:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 402              		.loc 1 380 21 discriminator 3 view .LVU124
 403 011e 4883C001 		addq	$1, %rax
 404              	.LVL42:
 380:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 405              		.loc 1 380 4 is_stmt 0 discriminator 3 view .LVU125
 406 0122 418D0C00 		leal	(%r8,%rax), %ecx
 407 0126 394E38   		cmpl	%ecx, 56(%rsi)
 408 0129 7FE5     		jg	.L29
 409              	.LVL43:
 410              	.L28:
 378:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 411              		.loc 1 378 49 is_stmt 1 discriminator 2 view .LVU126
 378:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 412              		.loc 1 378 19 discriminator 2 view .LVU127
 413 012b 4983C101 		addq	$1, %r9
 414              	.LVL44:
 378:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 415              		.loc 1 378 2 is_stmt 0 discriminator 2 view .LVU128
 416 012f 44394E3C 		cmpl	%r9d, 60(%rsi)
 417 0133 7E0B     		jle	.L27
 378:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 418              		.loc 1 378 2 discriminator 2 view .LVU129
 419 0135 8B4638   		movl	56(%rsi), %eax
 420 0138 EBBE     		jmp	.L30
 421              	.LVL45:
 422 013a 660F1F44 		.p2align 4,,10
 422      0000
 423              		.p2align 3
 424              	.L27:
 375:fltk-1.3.4-1/jpeg/jccoefct.c **** 	compptr = cinfo->cur_comp_info[ci];
 425              		.loc 1 375 47 is_stmt 1 discriminator 2 view .LVU130
 375:fltk-1.3.4-1/jpeg/jccoefct.c **** 	compptr = cinfo->cur_comp_info[ci];
 426              		.loc 1 375 20 discriminator 2 view .LVU131
 427 0140 4983C701 		addq	$1, %r15
 428              	.LVL46:
 375:fltk-1.3.4-1/jpeg/jccoefct.c **** 	compptr = cinfo->cur_comp_info[ci];
 429              		.loc 1 375 7 is_stmt 0 discriminator 2 view .LVU132
 430 0144 4439BD74 		cmpl	%r15d, 372(%rbp)
 430      010000
 431 014b 0F8F77FF 		jg	.L31
 431      FFFF
 432              	.LVL47:
 433              	.L34:
 382:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  }
 383:fltk-1.3.4-1/jpeg/jccoefct.c **** 	}
 384:fltk-1.3.4-1/jpeg/jccoefct.c ****       }
 385:fltk-1.3.4-1/jpeg/jccoefct.c ****       /* Try to write the MCU. */
 386:fltk-1.3.4-1/jpeg/jccoefct.c ****       if (! (*cinfo->entropy->encode_mcu) (cinfo, coef->MCU_buffer)) {
 434              		.loc 1 386 7 is_stmt 1 view .LVU133
 435              		.loc 1 386 14 is_stmt 0 view .LVU134
 436 0151 488B8530 		movq	560(%rbp), %rax
 436      020000
 437 0158 4C89F6   		movq	%r14, %rsi
 438 015b 4889EF   		movq	%rbp, %rdi
 439 015e FF5008   		call	*8(%rax)
 440              	.LVL48:
 441              		.loc 1 386 10 view .LVU135
 442 0161 85C0     		testl	%eax, %eax
 443 0163 745C     		je	.L56
 372:fltk-1.3.4-1/jpeg/jccoefct.c ****       /* Construct list of pointers to DCT blocks belonging to this MCU */
 444              		.loc 1 372 3 is_stmt 1 view .LVU136
 372:fltk-1.3.4-1/jpeg/jccoefct.c ****       /* Construct list of pointers to DCT blocks belonging to this MCU */
 445              		.loc 1 372 14 is_stmt 0 view .LVU137
 446 0165 4183C401 		addl	$1, %r12d
 447              	.LVL49:
 371:fltk-1.3.4-1/jpeg/jccoefct.c **** 	 MCU_col_num++) {
 448              		.loc 1 371 39 is_stmt 1 view .LVU138
 371:fltk-1.3.4-1/jpeg/jccoefct.c **** 	 MCU_col_num++) {
 449              		.loc 1 371 5 is_stmt 0 view .LVU139
 450 0169 4439A598 		cmpl	%r12d, 408(%rbp)
 450      010000
 451 0170 0F873AFF 		ja	.L26
 451      FFFF
 452 0176 448B7424 		movl	4(%rsp), %r14d
 452      04
 453              	.LVL50:
 454              	.L25:
 387:fltk-1.3.4-1/jpeg/jccoefct.c **** 	/* Suspension forced; update state counters and exit */
 388:fltk-1.3.4-1/jpeg/jccoefct.c **** 	coef->MCU_vert_offset = yoffset;
 389:fltk-1.3.4-1/jpeg/jccoefct.c **** 	coef->mcu_ctr = MCU_col_num;
 390:fltk-1.3.4-1/jpeg/jccoefct.c **** 	return FALSE;
 391:fltk-1.3.4-1/jpeg/jccoefct.c ****       }
 392:fltk-1.3.4-1/jpeg/jccoefct.c ****     }
 393:fltk-1.3.4-1/jpeg/jccoefct.c ****     /* Completed an MCU row, but perhaps not an iMCU row */
 394:fltk-1.3.4-1/jpeg/jccoefct.c ****     coef->mcu_ctr = 0;
 455              		.loc 1 394 5 is_stmt 1 view .LVU140
 456              		.loc 1 394 19 is_stmt 0 view .LVU141
 457 017b C7431400 		movl	$0, 20(%rbx)
 457      000000
 370:fltk-1.3.4-1/jpeg/jccoefct.c ****     for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
 458              		.loc 1 370 8 is_stmt 1 view .LVU142
 370:fltk-1.3.4-1/jpeg/jccoefct.c ****     for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
 459              		.loc 1 370 15 is_stmt 0 view .LVU143
 460 0182 4183C601 		addl	$1, %r14d
 461              	.LVL51:
 369:fltk-1.3.4-1/jpeg/jccoefct.c ****        yoffset++) {
 462              		.loc 1 369 41 is_stmt 1 view .LVU144
 463 0186 4983C508 		addq	$8, %r13
 464 018a 4531E4   		xorl	%r12d, %r12d
 369:fltk-1.3.4-1/jpeg/jccoefct.c ****        yoffset++) {
 465              		.loc 1 369 3 is_stmt 0 view .LVU145
 466 018d 4439731C 		cmpl	%r14d, 28(%rbx)
 467 0191 0F8F02FF 		jg	.L35
 467      FFFF
 468              	.L21:
 395:fltk-1.3.4-1/jpeg/jccoefct.c ****   }
 396:fltk-1.3.4-1/jpeg/jccoefct.c ****   /* Completed the iMCU row, advance counters for next one */
 397:fltk-1.3.4-1/jpeg/jccoefct.c ****   coef->iMCU_row_num++;
 469              		.loc 1 397 3 is_stmt 1 view .LVU146
 470              		.loc 1 397 21 is_stmt 0 view .LVU147
 471 0197 83431001 		addl	$1, 16(%rbx)
 398:fltk-1.3.4-1/jpeg/jccoefct.c ****   start_iMCU_row(cinfo);
 472              		.loc 1 398 3 is_stmt 1 view .LVU148
 473              	.LVL52:
 474              	.LBB26:
 475              	.LBI26:
  73:fltk-1.3.4-1/jpeg/jccoefct.c **** /* Reset within-iMCU-row counters for a new row */
 476              		.loc 1 73 1 view .LVU149
 477              	.LBB27:
  76:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 478              		.loc 1 76 3 view .LVU150
  82:fltk-1.3.4-1/jpeg/jccoefct.c ****     coef->MCU_rows_per_iMCU_row = 1;
 479              		.loc 1 82 6 is_stmt 0 view .LVU151
 480 019b 83BD7401 		cmpl	$1, 372(%rbp)
 480      000001
  76:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 481              		.loc 1 76 15 view .LVU152
 482 01a2 488B8508 		movq	520(%rbp), %rax
 482      020000
 483              	.LVL53:
  82:fltk-1.3.4-1/jpeg/jccoefct.c ****     coef->MCU_rows_per_iMCU_row = 1;
 484              		.loc 1 82 3 is_stmt 1 view .LVU153
  82:fltk-1.3.4-1/jpeg/jccoefct.c ****     coef->MCU_rows_per_iMCU_row = 1;
 485              		.loc 1 82 6 is_stmt 0 view .LVU154
 486 01a9 7E42     		jle	.L57
  83:fltk-1.3.4-1/jpeg/jccoefct.c ****   } else {
 487              		.loc 1 83 5 is_stmt 1 view .LVU155
  83:fltk-1.3.4-1/jpeg/jccoefct.c ****   } else {
 488              		.loc 1 83 33 is_stmt 0 view .LVU156
 489 01ab C7401C01 		movl	$1, 28(%rax)
 489      000000
 490              	.L36:
  91:fltk-1.3.4-1/jpeg/jccoefct.c ****   coef->MCU_vert_offset = 0;
 491              		.loc 1 91 3 is_stmt 1 view .LVU157
  92:fltk-1.3.4-1/jpeg/jccoefct.c **** }
 492              		.loc 1 92 3 view .LVU158
  91:fltk-1.3.4-1/jpeg/jccoefct.c ****   coef->MCU_vert_offset = 0;
 493              		.loc 1 91 17 is_stmt 0 view .LVU159
 494 01b2 48C74014 		movq	$0, 20(%rax)
 494      00000000 
 495              	.LVL54:
  91:fltk-1.3.4-1/jpeg/jccoefct.c ****   coef->MCU_vert_offset = 0;
 496              		.loc 1 91 17 view .LVU160
 497              	.LBE27:
 498              	.LBE26:
 399:fltk-1.3.4-1/jpeg/jccoefct.c ****   return TRUE;
 499              		.loc 1 399 3 is_stmt 1 view .LVU161
 500              		.loc 1 399 10 is_stmt 0 view .LVU162
 501 01ba B8010000 		movl	$1, %eax
 501      00
 502 01bf EB0D     		jmp	.L18
 503              	.LVL55:
 504              	.L56:
 505              		.loc 1 399 10 view .LVU163
 506 01c1 448B7424 		movl	4(%rsp), %r14d
 506      04
 388:fltk-1.3.4-1/jpeg/jccoefct.c **** 	coef->mcu_ctr = MCU_col_num;
 507              		.loc 1 388 2 is_stmt 1 view .LVU164
 389:fltk-1.3.4-1/jpeg/jccoefct.c **** 	return FALSE;
 508              		.loc 1 389 16 is_stmt 0 view .LVU165
 509 01c6 44896314 		movl	%r12d, 20(%rbx)
 388:fltk-1.3.4-1/jpeg/jccoefct.c **** 	coef->mcu_ctr = MCU_col_num;
 510              		.loc 1 388 24 view .LVU166
 511 01ca 44897318 		movl	%r14d, 24(%rbx)
 389:fltk-1.3.4-1/jpeg/jccoefct.c **** 	return FALSE;
 512              		.loc 1 389 2 is_stmt 1 view .LVU167
 390:fltk-1.3.4-1/jpeg/jccoefct.c ****       }
 513              		.loc 1 390 2 view .LVU168
 514              	.LVL56:
 515              	.L18:
 400:fltk-1.3.4-1/jpeg/jccoefct.c **** }
 516              		.loc 1 400 1 is_stmt 0 view .LVU169
 517 01ce 488B5C24 		movq	56(%rsp), %rbx
 517      38
 518 01d3 6448331C 		xorq	%fs:40, %rbx
 518      25280000 
 518      00
 519              	.LVL57:
 520              		.loc 1 400 1 view .LVU170
 521 01dc 752C     		jne	.L58
 522 01de 4883C448 		addq	$72, %rsp
 523              		.cfi_remember_state
 524              		.cfi_def_cfa_offset 56
 525 01e2 5B       		popq	%rbx
 526              		.cfi_def_cfa_offset 48
 527 01e3 5D       		popq	%rbp
 528              		.cfi_def_cfa_offset 40
 529              	.LVL58:
 530              		.loc 1 400 1 view .LVU171
 531 01e4 415C     		popq	%r12
 532              		.cfi_def_cfa_offset 32
 533 01e6 415D     		popq	%r13
 534              		.cfi_def_cfa_offset 24
 535 01e8 415E     		popq	%r14
 536              		.cfi_def_cfa_offset 16
 537 01ea 415F     		popq	%r15
 538              		.cfi_def_cfa_offset 8
 539 01ec C3       		ret
 540              	.LVL59:
 541              	.L57:
 542              		.cfi_restore_state
 543              	.LBB30:
 544              	.LBB28:
  85:fltk-1.3.4-1/jpeg/jccoefct.c ****       coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 545              		.loc 1 85 5 is_stmt 1 view .LVU172
  85:fltk-1.3.4-1/jpeg/jccoefct.c ****       coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 546              		.loc 1 85 53 is_stmt 0 view .LVU173
 547 01ed 8B957001 		movl	368(%rbp), %edx
 547      0000
 548 01f3 488B8D78 		movq	376(%rbp), %rcx
 548      010000
 549 01fa 83EA01   		subl	$1, %edx
  85:fltk-1.3.4-1/jpeg/jccoefct.c ****       coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 550              		.loc 1 85 8 view .LVU174
 551 01fd 395010   		cmpl	%edx, 16(%rax)
 552 0200 730E     		jnb	.L37
  86:fltk-1.3.4-1/jpeg/jccoefct.c ****     else
 553              		.loc 1 86 7 is_stmt 1 view .LVU175
  86:fltk-1.3.4-1/jpeg/jccoefct.c ****     else
 554              		.loc 1 86 60 is_stmt 0 view .LVU176
 555 0202 8B510C   		movl	12(%rcx), %edx
  86:fltk-1.3.4-1/jpeg/jccoefct.c ****     else
 556              		.loc 1 86 35 view .LVU177
 557 0205 89501C   		movl	%edx, 28(%rax)
 558 0208 EBA8     		jmp	.L36
 559              	.LVL60:
 560              	.L58:
  86:fltk-1.3.4-1/jpeg/jccoefct.c ****     else
 561              		.loc 1 86 35 view .LVU178
 562              	.LBE28:
 563              	.LBE30:
 564              		.loc 1 400 1 view .LVU179
 565 020a E8000000 		call	__stack_chk_fail@PLT
 565      00
 566              	.LVL61:
 567 020f 90       		.p2align 4,,10
 568              		.p2align 3
 569              	.L37:
 570              	.LBB31:
 571              	.LBB29:
  88:fltk-1.3.4-1/jpeg/jccoefct.c ****   }
 572              		.loc 1 88 7 is_stmt 1 view .LVU180
  88:fltk-1.3.4-1/jpeg/jccoefct.c ****   }
 573              		.loc 1 88 60 is_stmt 0 view .LVU181
 574 0210 8B514C   		movl	76(%rcx), %edx
  88:fltk-1.3.4-1/jpeg/jccoefct.c ****   }
 575              		.loc 1 88 35 view .LVU182
 576 0213 89501C   		movl	%edx, 28(%rax)
 577 0216 EB9A     		jmp	.L36
 578              	.LBE29:
 579              	.LBE31:
 580              		.cfi_endproc
 581              	.LFE55:
 583              		.section	.text.compress_data,"ax",@progbits
 584              		.p2align 4
 586              	compress_data:
 587              	.LVL62:
 588              	.LFB53:
 145:fltk-1.3.4-1/jpeg/jccoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 589              		.loc 1 145 1 is_stmt 1 view -0
 590              		.cfi_startproc
 145:fltk-1.3.4-1/jpeg/jccoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 591              		.loc 1 145 1 is_stmt 0 view .LVU184
 592 0000 F30F1EFA 		endbr64
 146:fltk-1.3.4-1/jpeg/jccoefct.c ****   JDIMENSION MCU_col_num;	/* index of current MCU within row */
 593              		.loc 1 146 3 is_stmt 1 view .LVU185
 145:fltk-1.3.4-1/jpeg/jccoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 594              		.loc 1 145 1 is_stmt 0 view .LVU186
 595 0004 4157     		pushq	%r15
 596              		.cfi_def_cfa_offset 16
 597              		.cfi_offset 15, -16
 598 0006 4989FF   		movq	%rdi, %r15
 599 0009 4156     		pushq	%r14
 600              		.cfi_def_cfa_offset 24
 601              		.cfi_offset 14, -24
 602 000b 4155     		pushq	%r13
 603              		.cfi_def_cfa_offset 32
 604              		.cfi_offset 13, -32
 605 000d 4154     		pushq	%r12
 606              		.cfi_def_cfa_offset 40
 607              		.cfi_offset 12, -40
 608 000f 55       		pushq	%rbp
 609              		.cfi_def_cfa_offset 48
 610              		.cfi_offset 6, -48
 611 0010 53       		pushq	%rbx
 612              		.cfi_def_cfa_offset 56
 613              		.cfi_offset 3, -56
 614 0011 4883EC58 		subq	$88, %rsp
 615              		.cfi_def_cfa_offset 144
 148:fltk-1.3.4-1/jpeg/jccoefct.c ****   JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 616              		.loc 1 148 14 view .LVU187
 617 0015 8B879801 		movl	408(%rdi), %eax
 617      0000
 146:fltk-1.3.4-1/jpeg/jccoefct.c ****   JDIMENSION MCU_col_num;	/* index of current MCU within row */
 618              		.loc 1 146 15 view .LVU188
 619 001b 4C8BAF08 		movq	520(%rdi), %r13
 619      020000
 620              	.LVL63:
 147:fltk-1.3.4-1/jpeg/jccoefct.c ****   JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 621              		.loc 1 147 3 is_stmt 1 view .LVU189
 148:fltk-1.3.4-1/jpeg/jccoefct.c ****   JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 622              		.loc 1 148 3 view .LVU190
 145:fltk-1.3.4-1/jpeg/jccoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 623              		.loc 1 145 1 is_stmt 0 view .LVU191
 624 0022 48897424 		movq	%rsi, 32(%rsp)
 624      20
 148:fltk-1.3.4-1/jpeg/jccoefct.c ****   JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 625              		.loc 1 148 14 view .LVU192
 626 0027 83E801   		subl	$1, %eax
 627 002a 89442444 		movl	%eax, 68(%rsp)
 628              	.LVL64:
 149:fltk-1.3.4-1/jpeg/jccoefct.c ****   int blkn, bi, ci, yindex, yoffset, blockcnt;
 629              		.loc 1 149 3 is_stmt 1 view .LVU193
 149:fltk-1.3.4-1/jpeg/jccoefct.c ****   int blkn, bi, ci, yindex, yoffset, blockcnt;
 630              		.loc 1 149 14 is_stmt 0 view .LVU194
 631 002e 8B877001 		movl	368(%rdi), %eax
 631      0000
 632              	.LVL65:
 149:fltk-1.3.4-1/jpeg/jccoefct.c ****   int blkn, bi, ci, yindex, yoffset, blockcnt;
 633              		.loc 1 149 14 view .LVU195
 634 0034 83E801   		subl	$1, %eax
 635 0037 89442428 		movl	%eax, 40(%rsp)
 636              	.LVL66:
 150:fltk-1.3.4-1/jpeg/jccoefct.c ****   JDIMENSION ypos, xpos;
 637              		.loc 1 150 3 is_stmt 1 view .LVU196
 151:fltk-1.3.4-1/jpeg/jccoefct.c ****   jpeg_component_info *compptr;
 638              		.loc 1 151 3 view .LVU197
 152:fltk-1.3.4-1/jpeg/jccoefct.c ****   forward_DCT_ptr forward_DCT;
 639              		.loc 1 152 3 view .LVU198
 153:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 640              		.loc 1 153 3 view .LVU199
 156:fltk-1.3.4-1/jpeg/jccoefct.c ****        yoffset++) {
 641              		.loc 1 156 3 view .LVU200
 156:fltk-1.3.4-1/jpeg/jccoefct.c ****        yoffset++) {
 642              		.loc 1 156 16 is_stmt 0 view .LVU201
 643 003b 418B4518 		movl	24(%r13), %eax
 644              	.LVL67:
 156:fltk-1.3.4-1/jpeg/jccoefct.c ****        yoffset++) {
 645              		.loc 1 156 16 view .LVU202
 646 003f 8944242C 		movl	%eax, 44(%rsp)
 647              	.LVL68:
 156:fltk-1.3.4-1/jpeg/jccoefct.c ****        yoffset++) {
 648              		.loc 1 156 41 is_stmt 1 view .LVU203
 156:fltk-1.3.4-1/jpeg/jccoefct.c ****        yoffset++) {
 649              		.loc 1 156 3 is_stmt 0 view .LVU204
 650 0043 413B451C 		cmpl	28(%r13), %eax
 651 0047 0F8D0602 		jge	.L79
 651      0000
 652 004d 418B4514 		movl	20(%r13), %eax
 653              	.LVL69:
 156:fltk-1.3.4-1/jpeg/jccoefct.c ****        yoffset++) {
 654              		.loc 1 156 3 view .LVU205
 655 0051 498D7D20 		leaq	32(%r13), %rdi
 656              	.LVL70:
 156:fltk-1.3.4-1/jpeg/jccoefct.c ****        yoffset++) {
 657              		.loc 1 156 3 view .LVU206
 658 0055 48897C24 		movq	%rdi, 72(%rsp)
 658      48
 158:fltk-1.3.4-1/jpeg/jccoefct.c **** 	 MCU_col_num++) {
 659              		.loc 1 158 5 is_stmt 1 view .LVU207
 660              	.LVL71:
 158:fltk-1.3.4-1/jpeg/jccoefct.c **** 	 MCU_col_num++) {
 661              		.loc 1 158 39 view .LVU208
 662 005a 89442440 		movl	%eax, 64(%rsp)
 158:fltk-1.3.4-1/jpeg/jccoefct.c **** 	 MCU_col_num++) {
 663              		.loc 1 158 5 is_stmt 0 view .LVU209
 664 005e 39442444 		cmpl	%eax, 68(%rsp)
 665 0062 0F82C801 		jb	.L63
 665      0000
 666              	.LVL72:
 667              	.L95:
 158:fltk-1.3.4-1/jpeg/jccoefct.c **** 	 MCU_col_num++) {
 668              		.loc 1 158 5 view .LVU210
 669 0068 4D89EE   		movq	%r13, %r14
 670 006b 0F1F4400 		.p2align 4,,10
 670      00
 671              		.p2align 3
 672              	.L64:
 673              	.LVL73:
 170:fltk-1.3.4-1/jpeg/jccoefct.c **** 	compptr = cinfo->cur_comp_info[ci];
 674              		.loc 1 170 20 is_stmt 1 view .LVU211
 170:fltk-1.3.4-1/jpeg/jccoefct.c **** 	compptr = cinfo->cur_comp_info[ci];
 675              		.loc 1 170 7 is_stmt 0 view .LVU212
 676 0070 418B8774 		movl	372(%r15), %eax
 676      010000
 169:fltk-1.3.4-1/jpeg/jccoefct.c ****       for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 677              		.loc 1 169 12 view .LVU213
 678 0077 4531E4   		xorl	%r12d, %r12d
 679 007a 4D89F5   		movq	%r14, %r13
 680              	.LVL74:
 170:fltk-1.3.4-1/jpeg/jccoefct.c **** 	compptr = cinfo->cur_comp_info[ci];
 681              		.loc 1 170 7 view .LVU214
 682 007d 48C74424 		movq	$0, 48(%rsp)
 682      30000000 
 682      00
 683 0086 85C0     		testl	%eax, %eax
 684 0088 0F8E7201 		jle	.L77
 684      0000
 685              	.LVL75:
 686 008e 6690     		.p2align 4,,10
 687              		.p2align 3
 688              	.L74:
 171:fltk-1.3.4-1/jpeg/jccoefct.c **** 	forward_DCT = cinfo->fdct->forward_DCT[compptr->component_index];
 689              		.loc 1 171 2 is_stmt 1 view .LVU215
 171:fltk-1.3.4-1/jpeg/jccoefct.c **** 	forward_DCT = cinfo->fdct->forward_DCT[compptr->component_index];
 690              		.loc 1 171 10 is_stmt 0 view .LVU216
 691 0090 488B4424 		movq	48(%rsp), %rax
 691      30
 174:fltk-1.3.4-1/jpeg/jccoefct.c **** 	xpos = MCU_col_num * compptr->MCU_sample_width;
 692              		.loc 1 174 7 view .LVU217
 693 0095 8B7C2440 		movl	64(%rsp), %edi
 171:fltk-1.3.4-1/jpeg/jccoefct.c **** 	forward_DCT = cinfo->fdct->forward_DCT[compptr->component_index];
 694              		.loc 1 171 10 view .LVU218
 695 0099 498B9CC7 		movq	376(%r15,%rax,8), %rbx
 695      78010000 
 696              	.LVL76:
 172:fltk-1.3.4-1/jpeg/jccoefct.c **** 	blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
 697              		.loc 1 172 2 is_stmt 1 view .LVU219
 172:fltk-1.3.4-1/jpeg/jccoefct.c **** 	blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
 698              		.loc 1 172 14 is_stmt 0 view .LVU220
 699 00a1 498B8728 		movq	552(%r15), %rax
 699      020000
 700 00a8 48635304 		movslq	4(%rbx), %rdx
 701 00ac 488B44D0 		movq	8(%rax,%rdx,8), %rax
 701      08
 702 00b1 48894424 		movq	%rax, 16(%rsp)
 702      10
 703              	.LVL77:
 173:fltk-1.3.4-1/jpeg/jccoefct.c **** 						: compptr->last_col_width;
 704              		.loc 1 173 2 is_stmt 1 view .LVU221
 174:fltk-1.3.4-1/jpeg/jccoefct.c **** 	xpos = MCU_col_num * compptr->MCU_sample_width;
 705              		.loc 1 174 7 is_stmt 0 view .LVU222
 706 00b6 397C2444 		cmpl	%edi, 68(%rsp)
 707 00ba 0F862002 		jbe	.L65
 707      0000
 174:fltk-1.3.4-1/jpeg/jccoefct.c **** 	xpos = MCU_col_num * compptr->MCU_sample_width;
 708              		.loc 1 174 7 discriminator 1 view .LVU223
 709 00c0 448B7338 		movl	56(%rbx), %r14d
 710              	.L66:
 711              	.LVL78:
 175:fltk-1.3.4-1/jpeg/jccoefct.c **** 	ypos = yoffset * compptr->DCT_v_scaled_size;
 712              		.loc 1 175 2 is_stmt 1 view .LVU224
 175:fltk-1.3.4-1/jpeg/jccoefct.c **** 	ypos = yoffset * compptr->DCT_v_scaled_size;
 713              		.loc 1 175 7 is_stmt 0 view .LVU225
 714 00c4 8B442440 		movl	64(%rsp), %eax
 715              	.LVL79:
 175:fltk-1.3.4-1/jpeg/jccoefct.c **** 	ypos = yoffset * compptr->DCT_v_scaled_size;
 716              		.loc 1 175 7 view .LVU226
 717 00c8 0FAF4344 		imull	68(%rbx), %eax
 178:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  if (coef->iMCU_row_num < last_iMCU_row ||
 718              		.loc 1 178 2 view .LVU227
 719 00cc 8B7B3C   		movl	60(%rbx), %edi
 176:fltk-1.3.4-1/jpeg/jccoefct.c **** 	/* ypos == (yoffset+yindex) * DCTSIZE */
 720              		.loc 1 176 17 view .LVU228
 721 00cf 448B4424 		movl	44(%rsp), %r8d
 721      2C
 722 00d4 440FAF43 		imull	40(%rbx), %r8d
 722      28
 175:fltk-1.3.4-1/jpeg/jccoefct.c **** 	ypos = yoffset * compptr->DCT_v_scaled_size;
 723              		.loc 1 175 7 view .LVU229
 724 00d9 8944241C 		movl	%eax, 28(%rsp)
 725              	.LVL80:
 176:fltk-1.3.4-1/jpeg/jccoefct.c **** 	/* ypos == (yoffset+yindex) * DCTSIZE */
 726              		.loc 1 176 2 is_stmt 1 view .LVU230
 178:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  if (coef->iMCU_row_num < last_iMCU_row ||
 727              		.loc 1 178 2 view .LVU231
 178:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  if (coef->iMCU_row_num < last_iMCU_row ||
 728              		.loc 1 178 19 view .LVU232
 178:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  if (coef->iMCU_row_num < last_iMCU_row ||
 729              		.loc 1 178 2 is_stmt 0 view .LVU233
 730 00dd 85FF     		testl	%edi, %edi
 731 00df 0F8E0001 		jle	.L67
 731      0000
 178:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  if (coef->iMCU_row_num < last_iMCU_row ||
 732              		.loc 1 178 14 view .LVU234
 733 00e5 4C897C24 		movq	%r15, 8(%rsp)
 733      08
 734 00ea 31ED     		xorl	%ebp, %ebp
 735 00ec 4589C7   		movl	%r8d, %r15d
 736              	.LVL81:
 178:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  if (coef->iMCU_row_num < last_iMCU_row ||
 737              		.loc 1 178 14 view .LVU235
 738 00ef EB1A     		jmp	.L73
 739              	.LVL82:
 740              		.p2align 4,,10
 741 00f1 0F1F8000 		.p2align 3
 741      000000
 742              	.L70:
 201:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  ypos += compptr->DCT_v_scaled_size;
 743              		.loc 1 201 4 is_stmt 1 discriminator 2 view .LVU236
 201:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  ypos += compptr->DCT_v_scaled_size;
 744              		.loc 1 201 9 is_stmt 0 discriminator 2 view .LVU237
 745 00f8 4101D4   		addl	%edx, %r12d
 746              	.LVL83:
 202:fltk-1.3.4-1/jpeg/jccoefct.c **** 	}
 747              		.loc 1 202 4 is_stmt 1 discriminator 2 view .LVU238
 202:fltk-1.3.4-1/jpeg/jccoefct.c **** 	}
 748              		.loc 1 202 9 is_stmt 0 discriminator 2 view .LVU239
 749 00fb 44037B28 		addl	40(%rbx), %r15d
 750              	.LVL84:
 178:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  if (coef->iMCU_row_num < last_iMCU_row ||
 751              		.loc 1 178 49 is_stmt 1 discriminator 2 view .LVU240
 178:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  if (coef->iMCU_row_num < last_iMCU_row ||
 752              		.loc 1 178 55 is_stmt 0 discriminator 2 view .LVU241
 753 00ff 83C501   		addl	$1, %ebp
 754              	.LVL85:
 178:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  if (coef->iMCU_row_num < last_iMCU_row ||
 755              		.loc 1 178 19 is_stmt 1 discriminator 2 view .LVU242
 178:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  if (coef->iMCU_row_num < last_iMCU_row ||
 756              		.loc 1 178 2 is_stmt 0 discriminator 2 view .LVU243
 757 0102 396B3C   		cmpl	%ebp, 60(%rbx)
 758 0105 0F8ED500 		jle	.L97
 758      0000
 759              	.LVL86:
 760              	.L73:
 179:fltk-1.3.4-1/jpeg/jccoefct.c **** 	      yoffset+yindex < compptr->last_row_height) {
 761              		.loc 1 179 4 is_stmt 1 view .LVU244
 762 010b 4963C4   		movslq	%r12d, %rax
 763 010e 498D4CC5 		leaq	0(%r13,%rax,8), %rcx
 763      00
 179:fltk-1.3.4-1/jpeg/jccoefct.c **** 	      yoffset+yindex < compptr->last_row_height) {
 764              		.loc 1 179 7 is_stmt 0 view .LVU245
 765 0113 8B442428 		movl	40(%rsp), %eax
 766 0117 4C8B5120 		movq	32(%rcx), %r10
 767 011b 41394510 		cmpl	%eax, 16(%r13)
 768 011f 720F     		jb	.L68
 179:fltk-1.3.4-1/jpeg/jccoefct.c **** 	      yoffset+yindex < compptr->last_row_height) {
 769              		.loc 1 179 43 discriminator 1 view .LVU246
 770 0121 8B44242C 		movl	44(%rsp), %eax
 771 0125 01E8     		addl	%ebp, %eax
 772 0127 39434C   		cmpl	%eax, 76(%rbx)
 773 012a 0F8E6001 		jle	.L69
 773      0000
 774              	.L68:
 181:fltk-1.3.4-1/jpeg/jccoefct.c **** 			    input_buf[compptr->component_index],
 775              		.loc 1 181 6 is_stmt 1 view .LVU247
 181:fltk-1.3.4-1/jpeg/jccoefct.c **** 			    input_buf[compptr->component_index],
 776              		.loc 1 181 7 is_stmt 0 view .LVU248
 777 0130 488B7C24 		movq	32(%rsp), %rdi
 777      20
 182:fltk-1.3.4-1/jpeg/jccoefct.c **** 			    coef->MCU_buffer[blkn],
 778              		.loc 1 182 25 view .LVU249
 779 0135 48634304 		movslq	4(%rbx), %rax
 181:fltk-1.3.4-1/jpeg/jccoefct.c **** 			    input_buf[compptr->component_index],
 780              		.loc 1 181 7 view .LVU250
 781 0139 4883EC08 		subq	$8, %rsp
 782              		.cfi_def_cfa_offset 152
 783 013d 4C89D1   		movq	%r10, %rcx
 784 0140 4889DE   		movq	%rbx, %rsi
 785 0143 4589F8   		movl	%r15d, %r8d
 786 0146 488B14C7 		movq	(%rdi,%rax,8), %rdx
 787 014a 4156     		pushq	%r14
 788              		.cfi_def_cfa_offset 160
 789 014c 448B4C24 		movl	44(%rsp), %r9d
 789      2C
 790 0151 488B7C24 		movq	24(%rsp), %rdi
 790      18
 791 0156 488B4424 		movq	32(%rsp), %rax
 791      20
 792 015b FFD0     		call	*%rax
 793              	.LVL87:
 185:fltk-1.3.4-1/jpeg/jccoefct.c **** 	      /* Create some dummy blocks at the right edge of the image. */
 794              		.loc 1 185 6 is_stmt 1 view .LVU251
 185:fltk-1.3.4-1/jpeg/jccoefct.c **** 	      /* Create some dummy blocks at the right edge of the image. */
 795              		.loc 1 185 28 is_stmt 0 view .LVU252
 796 015d 8B5338   		movl	56(%rbx), %edx
 185:fltk-1.3.4-1/jpeg/jccoefct.c **** 	      /* Create some dummy blocks at the right edge of the image. */
 797              		.loc 1 185 9 view .LVU253
 798 0160 59       		popq	%rcx
 799              		.cfi_def_cfa_offset 152
 800 0161 5E       		popq	%rsi
 801              		.cfi_def_cfa_offset 144
 802 0162 4439F2   		cmpl	%r14d, %edx
 803 0165 7E91     		jle	.L70
 187:fltk-1.3.4-1/jpeg/jccoefct.c **** 		       (compptr->MCU_width - blockcnt) * SIZEOF(JBLOCK));
 804              		.loc 1 187 8 is_stmt 1 view .LVU254
 805 0167 438D0C26 		leal	(%r14,%r12), %ecx
 806              	.LVL88:
 807              	.LBB32:
 808              	.LBI32:
 809              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h"
   1:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** /* Copyright (C) 2004-2020 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    <https://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifndef _BITS_STRING_FORTIFIED_H
  19:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #define _BITS_STRING_FORTIFIED_H 1
  20:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  21:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifndef _STRING_H
  22:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** # error "Never use <bits/string_fortified.h> directly; include <string.h> instead."
  23:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  24:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  25:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #if !__GNUC_PREREQ (5,0)
  26:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __warndecl (__warn_memset_zero_len,
  27:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  28:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  29:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  30:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  32:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
  33:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  34:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  35:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  36:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  37:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  38:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memmove (void *__dest, const void *__src, size_t __len))
  39:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  40:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  41:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  42:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  43:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifdef __USE_GNU
  44:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  45:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
  46:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 		size_t __len))
  47:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  48:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
  49:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  50:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  51:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  52:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  53:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** /* The first two tests here help to catch a somewhat common problem
  54:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    where the second and third parameter are transposed.  This is
  55:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    especially problematic if the intended fill value is zero.  In this
  56:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    case no work is done at all.  We detect these problems by referring
  57:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    non-existing functions.  */
  58:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  59:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memset (void *__dest, int __ch, size_t __len))
 810              		.loc 2 59 1 view .LVU255
 811              	.LBB33:
  60:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  61:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   /* GCC-5.0 and newer implements these checks in the compiler, so we don't
  62:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****      need them here.  */
  63:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #if !__GNUC_PREREQ (5,0)
  64:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   if (__builtin_constant_p (__len) && __len == 0
  65:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       && (!__builtin_constant_p (__ch) || __ch != 0))
  66:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****     {
  67:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       __warn_memset_zero_len ();
  68:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       return __dest;
  69:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****     }
  70:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  71:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 812              		.loc 2 71 3 view .LVU256
 813              	.LBE33:
 814              	.LBE32:
 187:fltk-1.3.4-1/jpeg/jccoefct.c **** 		       (compptr->MCU_width - blockcnt) * SIZEOF(JBLOCK));
 815              		.loc 1 187 8 is_stmt 0 view .LVU257
 816 016b 4429F2   		subl	%r14d, %edx
 817              	.LVL89:
 818              	.LBB36:
 819              	.LBB34:
 820              		.loc 2 71 10 view .LVU258
 821 016e 31F6     		xorl	%esi, %esi
 822              	.LBE34:
 823              	.LBE36:
 187:fltk-1.3.4-1/jpeg/jccoefct.c **** 		       (compptr->MCU_width - blockcnt) * SIZEOF(JBLOCK));
 824              		.loc 1 187 8 view .LVU259
 825 0170 4863C9   		movslq	%ecx, %rcx
 826              	.LVL90:
 187:fltk-1.3.4-1/jpeg/jccoefct.c **** 		       (compptr->MCU_width - blockcnt) * SIZEOF(JBLOCK));
 827              		.loc 1 187 8 view .LVU260
 828 0173 4863D2   		movslq	%edx, %rdx
 829 0176 4883C104 		addq	$4, %rcx
 830              	.LVL91:
 187:fltk-1.3.4-1/jpeg/jccoefct.c **** 		       (compptr->MCU_width - blockcnt) * SIZEOF(JBLOCK));
 831              		.loc 1 187 8 view .LVU261
 832 017a 48C1E207 		salq	$7, %rdx
 833              	.LVL92:
 834              	.LBB37:
 835              	.LBB35:
 836              		.loc 2 71 10 view .LVU262
 837 017e 498B7CCD 		movq	0(%r13,%rcx,8), %rdi
 837      00
 838 0183 48894C24 		movq	%rcx, 56(%rsp)
 838      38
 839 0188 E8000000 		call	memset@PLT
 839      00
 840              	.LVL93:
 841              		.loc 2 71 10 view .LVU263
 842              	.LBE35:
 843              	.LBE37:
 189:fltk-1.3.4-1/jpeg/jccoefct.c **** 		coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn+bi-1][0][0];
 844              		.loc 1 189 8 is_stmt 1 view .LVU264
 189:fltk-1.3.4-1/jpeg/jccoefct.c **** 		coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn+bi-1][0][0];
 845              		.loc 1 189 28 view .LVU265
 189:fltk-1.3.4-1/jpeg/jccoefct.c **** 		coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn+bi-1][0][0];
 846              		.loc 1 189 40 is_stmt 0 view .LVU266
 847 018d 8B5338   		movl	56(%rbx), %edx
 189:fltk-1.3.4-1/jpeg/jccoefct.c **** 		coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn+bi-1][0][0];
 848              		.loc 1 189 8 view .LVU267
 849 0190 4139D6   		cmpl	%edx, %r14d
 850 0193 0F8D5FFF 		jge	.L70
 850      FFFF
 851 0199 488B4C24 		movq	56(%rsp), %rcx
 851      38
 852 019e 498D44CD 		leaq	0(%r13,%rcx,8), %rax
 852      00
 853 01a3 4489F1   		movl	%r14d, %ecx
 854              	.LVL94:
 855 01a6 662E0F1F 		.p2align 4,,10
 855      84000000 
 855      0000
 856              		.p2align 3
 857              	.L71:
 190:fltk-1.3.4-1/jpeg/jccoefct.c **** 	      }
 858              		.loc 1 190 3 is_stmt 1 discriminator 3 view .LVU268
 190:fltk-1.3.4-1/jpeg/jccoefct.c **** 	      }
 859              		.loc 1 190 67 is_stmt 0 discriminator 3 view .LVU269
 860 01b0 488B70F8 		movq	-8(%rax), %rsi
 190:fltk-1.3.4-1/jpeg/jccoefct.c **** 	      }
 861              		.loc 1 190 19 discriminator 3 view .LVU270
 862 01b4 488B10   		movq	(%rax), %rdx
 189:fltk-1.3.4-1/jpeg/jccoefct.c **** 		coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn+bi-1][0][0];
 863              		.loc 1 189 55 discriminator 3 view .LVU271
 864 01b7 83C101   		addl	$1, %ecx
 865              	.LVL95:
 189:fltk-1.3.4-1/jpeg/jccoefct.c **** 		coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn+bi-1][0][0];
 866              		.loc 1 189 55 discriminator 3 view .LVU272
 867 01ba 4883C008 		addq	$8, %rax
 190:fltk-1.3.4-1/jpeg/jccoefct.c **** 	      }
 868              		.loc 1 190 67 discriminator 3 view .LVU273
 869 01be 0FB736   		movzwl	(%rsi), %esi
 190:fltk-1.3.4-1/jpeg/jccoefct.c **** 	      }
 870              		.loc 1 190 35 discriminator 3 view .LVU274
 871 01c1 668932   		movw	%si, (%rdx)
 189:fltk-1.3.4-1/jpeg/jccoefct.c **** 		coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn+bi-1][0][0];
 872              		.loc 1 189 53 is_stmt 1 discriminator 3 view .LVU275
 873              	.LVL96:
 189:fltk-1.3.4-1/jpeg/jccoefct.c **** 		coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn+bi-1][0][0];
 874              		.loc 1 189 28 discriminator 3 view .LVU276
 189:fltk-1.3.4-1/jpeg/jccoefct.c **** 		coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn+bi-1][0][0];
 875              		.loc 1 189 40 is_stmt 0 discriminator 3 view .LVU277
 876 01c4 8B5338   		movl	56(%rbx), %edx
 189:fltk-1.3.4-1/jpeg/jccoefct.c **** 		coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn+bi-1][0][0];
 877              		.loc 1 189 8 discriminator 3 view .LVU278
 878 01c7 39CA     		cmpl	%ecx, %edx
 879 01c9 7FE5     		jg	.L71
 201:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  ypos += compptr->DCT_v_scaled_size;
 880              		.loc 1 201 4 is_stmt 1 view .LVU279
 201:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  ypos += compptr->DCT_v_scaled_size;
 881              		.loc 1 201 9 is_stmt 0 view .LVU280
 882 01cb 4101D4   		addl	%edx, %r12d
 883              	.LVL97:
 202:fltk-1.3.4-1/jpeg/jccoefct.c **** 	}
 884              		.loc 1 202 4 is_stmt 1 view .LVU281
 202:fltk-1.3.4-1/jpeg/jccoefct.c **** 	}
 885              		.loc 1 202 9 is_stmt 0 view .LVU282
 886 01ce 44037B28 		addl	40(%rbx), %r15d
 887              	.LVL98:
 178:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  if (coef->iMCU_row_num < last_iMCU_row ||
 888              		.loc 1 178 49 is_stmt 1 view .LVU283
 178:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  if (coef->iMCU_row_num < last_iMCU_row ||
 889              		.loc 1 178 55 is_stmt 0 view .LVU284
 890 01d2 83C501   		addl	$1, %ebp
 891              	.LVL99:
 178:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  if (coef->iMCU_row_num < last_iMCU_row ||
 892              		.loc 1 178 19 is_stmt 1 view .LVU285
 178:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  if (coef->iMCU_row_num < last_iMCU_row ||
 893              		.loc 1 178 2 is_stmt 0 view .LVU286
 894 01d5 396B3C   		cmpl	%ebp, 60(%rbx)
 895 01d8 0F8F2DFF 		jg	.L73
 895      FFFF
 896              	.LVL100:
 897 01de 6690     		.p2align 4,,10
 898              		.p2align 3
 899              	.L97:
 178:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  if (coef->iMCU_row_num < last_iMCU_row ||
 900              		.loc 1 178 2 view .LVU287
 901 01e0 4C8B7C24 		movq	8(%rsp), %r15
 901      08
 902              	.LVL101:
 903              	.L67:
 170:fltk-1.3.4-1/jpeg/jccoefct.c **** 	compptr = cinfo->cur_comp_info[ci];
 904              		.loc 1 170 47 is_stmt 1 discriminator 2 view .LVU288
 170:fltk-1.3.4-1/jpeg/jccoefct.c **** 	compptr = cinfo->cur_comp_info[ci];
 905              		.loc 1 170 20 discriminator 2 view .LVU289
 906 01e5 48834424 		addq	$1, 48(%rsp)
 906      3001
 907              	.LVL102:
 170:fltk-1.3.4-1/jpeg/jccoefct.c **** 	compptr = cinfo->cur_comp_info[ci];
 908              		.loc 1 170 20 is_stmt 0 discriminator 2 view .LVU290
 909 01eb 488B4424 		movq	48(%rsp), %rax
 909      30
 170:fltk-1.3.4-1/jpeg/jccoefct.c **** 	compptr = cinfo->cur_comp_info[ci];
 910              		.loc 1 170 7 discriminator 2 view .LVU291
 911 01f0 41398774 		cmpl	%eax, 372(%r15)
 911      010000
 912 01f7 0F8F93FE 		jg	.L74
 912      FFFF
 913 01fd 4D89EE   		movq	%r13, %r14
 914              	.LVL103:
 915              	.L77:
 208:fltk-1.3.4-1/jpeg/jccoefct.c **** 	/* Suspension forced; update state counters and exit */
 916              		.loc 1 208 7 is_stmt 1 view .LVU292
 208:fltk-1.3.4-1/jpeg/jccoefct.c **** 	/* Suspension forced; update state counters and exit */
 917              		.loc 1 208 14 is_stmt 0 view .LVU293
 918 0200 498B8730 		movq	560(%r15), %rax
 918      020000
 919 0207 488B7424 		movq	72(%rsp), %rsi
 919      48
 920 020c 4C89FF   		movq	%r15, %rdi
 921 020f FF5008   		call	*8(%rax)
 922              	.LVL104:
 208:fltk-1.3.4-1/jpeg/jccoefct.c **** 	/* Suspension forced; update state counters and exit */
 923              		.loc 1 208 10 view .LVU294
 924 0212 85C0     		testl	%eax, %eax
 925 0214 0F84CF00 		je	.L98
 925      0000
 159:fltk-1.3.4-1/jpeg/jccoefct.c ****       /* Determine where data comes from in input_buf and do the DCT thing.
 926              		.loc 1 159 3 is_stmt 1 view .LVU295
 159:fltk-1.3.4-1/jpeg/jccoefct.c ****       /* Determine where data comes from in input_buf and do the DCT thing.
 927              		.loc 1 159 14 is_stmt 0 view .LVU296
 928 021a 83442440 		addl	$1, 64(%rsp)
 928      01
 929              	.LVL105:
 159:fltk-1.3.4-1/jpeg/jccoefct.c ****       /* Determine where data comes from in input_buf and do the DCT thing.
 930              		.loc 1 159 14 view .LVU297
 931 021f 8B442440 		movl	64(%rsp), %eax
 932              	.LVL106:
 158:fltk-1.3.4-1/jpeg/jccoefct.c **** 	 MCU_col_num++) {
 933              		.loc 1 158 39 is_stmt 1 view .LVU298
 158:fltk-1.3.4-1/jpeg/jccoefct.c **** 	 MCU_col_num++) {
 934              		.loc 1 158 5 is_stmt 0 view .LVU299
 935 0223 39442444 		cmpl	%eax, 68(%rsp)
 936 0227 0F8343FE 		jnb	.L64
 936      FFFF
 937 022d 4D89F5   		movq	%r14, %r13
 938              	.LVL107:
 939              	.L63:
 216:fltk-1.3.4-1/jpeg/jccoefct.c ****   }
 940              		.loc 1 216 5 is_stmt 1 view .LVU300
 157:fltk-1.3.4-1/jpeg/jccoefct.c ****     for (MCU_col_num = coef->mcu_ctr; MCU_col_num <= last_MCU_col;
 941              		.loc 1 157 15 is_stmt 0 view .LVU301
 942 0230 8344242C 		addl	$1, 44(%rsp)
 942      01
 943              	.LVL108:
 157:fltk-1.3.4-1/jpeg/jccoefct.c ****     for (MCU_col_num = coef->mcu_ctr; MCU_col_num <= last_MCU_col;
 944              		.loc 1 157 15 view .LVU302
 945 0235 8B44242C 		movl	44(%rsp), %eax
 216:fltk-1.3.4-1/jpeg/jccoefct.c ****   }
 946              		.loc 1 216 19 view .LVU303
 947 0239 41C74514 		movl	$0, 20(%r13)
 947      00000000 
 157:fltk-1.3.4-1/jpeg/jccoefct.c ****     for (MCU_col_num = coef->mcu_ctr; MCU_col_num <= last_MCU_col;
 948              		.loc 1 157 8 is_stmt 1 view .LVU304
 949              	.LVL109:
 156:fltk-1.3.4-1/jpeg/jccoefct.c ****        yoffset++) {
 950              		.loc 1 156 41 view .LVU305
 951 0241 C7442440 		movl	$0, 64(%rsp)
 951      00000000 
 156:fltk-1.3.4-1/jpeg/jccoefct.c ****        yoffset++) {
 952              		.loc 1 156 3 is_stmt 0 view .LVU306
 953 0249 4139451C 		cmpl	%eax, 28(%r13)
 954 024d 0F8F15FE 		jg	.L95
 954      FFFF
 955              	.L79:
 219:fltk-1.3.4-1/jpeg/jccoefct.c ****   start_iMCU_row(cinfo);
 956              		.loc 1 219 3 is_stmt 1 view .LVU307
 219:fltk-1.3.4-1/jpeg/jccoefct.c ****   start_iMCU_row(cinfo);
 957              		.loc 1 219 21 is_stmt 0 view .LVU308
 958 0253 41834510 		addl	$1, 16(%r13)
 958      01
 220:fltk-1.3.4-1/jpeg/jccoefct.c ****   return TRUE;
 959              		.loc 1 220 3 is_stmt 1 view .LVU309
 960              	.LVL110:
 961              	.LBB38:
 962              	.LBI38:
  73:fltk-1.3.4-1/jpeg/jccoefct.c **** /* Reset within-iMCU-row counters for a new row */
 963              		.loc 1 73 1 view .LVU310
 964              	.LBB39:
  76:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 965              		.loc 1 76 3 view .LVU311
  82:fltk-1.3.4-1/jpeg/jccoefct.c ****     coef->MCU_rows_per_iMCU_row = 1;
 966              		.loc 1 82 6 is_stmt 0 view .LVU312
 967 0258 4183BF74 		cmpl	$1, 372(%r15)
 967      01000001 
  76:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 968              		.loc 1 76 15 view .LVU313
 969 0260 498B8708 		movq	520(%r15), %rax
 969      020000
 970              	.LVL111:
  82:fltk-1.3.4-1/jpeg/jccoefct.c ****     coef->MCU_rows_per_iMCU_row = 1;
 971              		.loc 1 82 3 is_stmt 1 view .LVU314
  82:fltk-1.3.4-1/jpeg/jccoefct.c ****     coef->MCU_rows_per_iMCU_row = 1;
 972              		.loc 1 82 6 is_stmt 0 view .LVU315
 973 0267 0F8E9B00 		jle	.L99
 973      0000
  83:fltk-1.3.4-1/jpeg/jccoefct.c ****   } else {
 974              		.loc 1 83 5 is_stmt 1 view .LVU316
  83:fltk-1.3.4-1/jpeg/jccoefct.c ****   } else {
 975              		.loc 1 83 33 is_stmt 0 view .LVU317
 976 026d C7401C01 		movl	$1, 28(%rax)
 976      000000
 977              	.L80:
  91:fltk-1.3.4-1/jpeg/jccoefct.c ****   coef->MCU_vert_offset = 0;
 978              		.loc 1 91 3 is_stmt 1 view .LVU318
  92:fltk-1.3.4-1/jpeg/jccoefct.c **** }
 979              		.loc 1 92 3 view .LVU319
  91:fltk-1.3.4-1/jpeg/jccoefct.c ****   coef->MCU_vert_offset = 0;
 980              		.loc 1 91 17 is_stmt 0 view .LVU320
 981 0274 48C74014 		movq	$0, 20(%rax)
 981      00000000 
 982              	.LVL112:
  91:fltk-1.3.4-1/jpeg/jccoefct.c ****   coef->MCU_vert_offset = 0;
 983              		.loc 1 91 17 view .LVU321
 984              	.LBE39:
 985              	.LBE38:
 221:fltk-1.3.4-1/jpeg/jccoefct.c **** }
 986              		.loc 1 221 3 is_stmt 1 view .LVU322
 222:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 987              		.loc 1 222 1 is_stmt 0 view .LVU323
 988 027c 4883C458 		addq	$88, %rsp
 989              		.cfi_remember_state
 990              		.cfi_def_cfa_offset 56
 221:fltk-1.3.4-1/jpeg/jccoefct.c **** }
 991              		.loc 1 221 10 view .LVU324
 992 0280 B8010000 		movl	$1, %eax
 992      00
 222:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 993              		.loc 1 222 1 view .LVU325
 994 0285 5B       		popq	%rbx
 995              		.cfi_def_cfa_offset 48
 996 0286 5D       		popq	%rbp
 997              		.cfi_def_cfa_offset 40
 998 0287 415C     		popq	%r12
 999              		.cfi_def_cfa_offset 32
 1000 0289 415D     		popq	%r13
 1001              		.cfi_def_cfa_offset 24
 1002              	.LVL113:
 222:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 1003              		.loc 1 222 1 view .LVU326
 1004 028b 415E     		popq	%r14
 1005              		.cfi_def_cfa_offset 16
 1006 028d 415F     		popq	%r15
 1007              		.cfi_def_cfa_offset 8
 1008 028f C3       		ret
 1009              	.LVL114:
 1010              		.p2align 4,,10
 1011              		.p2align 3
 1012              	.L69:
 1013              		.cfi_restore_state
 195:fltk-1.3.4-1/jpeg/jccoefct.c **** 		     compptr->MCU_width * SIZEOF(JBLOCK));
 1014              		.loc 1 195 6 view .LVU327
 1015 0290 48635338 		movslq	56(%rbx), %rdx
 1016              	.LBB41:
 1017              	.LBB42:
 1018              		.loc 2 71 10 view .LVU328
 1019 0294 31F6     		xorl	%esi, %esi
 1020 0296 4C89D7   		movq	%r10, %rdi
 1021 0299 48894C24 		movq	%rcx, 56(%rsp)
 1021      38
 1022              	.LBE42:
 1023              	.LBE41:
 195:fltk-1.3.4-1/jpeg/jccoefct.c **** 		     compptr->MCU_width * SIZEOF(JBLOCK));
 1024              		.loc 1 195 6 is_stmt 1 view .LVU329
 1025              	.LVL115:
 1026              	.LBB45:
 1027              	.LBI41:
  59:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
 1028              		.loc 2 59 1 view .LVU330
 1029              	.LBB43:
 1030              		.loc 2 71 3 view .LVU331
 1031              	.LBE43:
 1032              	.LBE45:
 195:fltk-1.3.4-1/jpeg/jccoefct.c **** 		     compptr->MCU_width * SIZEOF(JBLOCK));
 1033              		.loc 1 195 6 is_stmt 0 view .LVU332
 1034 029e 48C1E207 		salq	$7, %rdx
 1035              	.LVL116:
 1036              	.LBB46:
 1037              	.LBB44:
 1038              		.loc 2 71 10 view .LVU333
 1039 02a2 E8000000 		call	memset@PLT
 1039      00
 1040              	.LVL117:
 1041              		.loc 2 71 10 view .LVU334
 1042              	.LBE44:
 1043              	.LBE46:
 197:fltk-1.3.4-1/jpeg/jccoefct.c **** 	      coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn-1][0][0];
 1044              		.loc 1 197 6 is_stmt 1 view .LVU335
 197:fltk-1.3.4-1/jpeg/jccoefct.c **** 	      coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn-1][0][0];
 1045              		.loc 1 197 19 view .LVU336
 197:fltk-1.3.4-1/jpeg/jccoefct.c **** 	      coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn-1][0][0];
 1046              		.loc 1 197 31 is_stmt 0 view .LVU337
 1047 02a7 8B5338   		movl	56(%rbx), %edx
 197:fltk-1.3.4-1/jpeg/jccoefct.c **** 	      coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn-1][0][0];
 1048              		.loc 1 197 6 view .LVU338
 1049 02aa 85D2     		testl	%edx, %edx
 1050 02ac 0F8E46FE 		jle	.L70
 1050      FFFF
 1051 02b2 488B4C24 		movq	56(%rsp), %rcx
 1051      38
 1052 02b7 31C0     		xorl	%eax, %eax
 1053              	.LVL118:
 1054 02b9 0F1F8000 		.p2align 4,,10
 1054      000000
 1055              		.p2align 3
 1056              	.L72:
 198:fltk-1.3.4-1/jpeg/jccoefct.c **** 	    }
 1057              		.loc 1 198 8 is_stmt 1 discriminator 3 view .LVU339
 198:fltk-1.3.4-1/jpeg/jccoefct.c **** 	    }
 1058              		.loc 1 198 69 is_stmt 0 discriminator 3 view .LVU340
 1059 02c0 488B7118 		movq	24(%rcx), %rsi
 198:fltk-1.3.4-1/jpeg/jccoefct.c **** 	    }
 1060              		.loc 1 198 24 discriminator 3 view .LVU341
 1061 02c4 488B54C1 		movq	32(%rcx,%rax,8), %rdx
 1061      20
 1062 02c9 4883C001 		addq	$1, %rax
 1063              	.LVL119:
 198:fltk-1.3.4-1/jpeg/jccoefct.c **** 	    }
 1064              		.loc 1 198 69 discriminator 3 view .LVU342
 1065 02cd 0FB736   		movzwl	(%rsi), %esi
 198:fltk-1.3.4-1/jpeg/jccoefct.c **** 	    }
 1066              		.loc 1 198 40 discriminator 3 view .LVU343
 1067 02d0 668932   		movw	%si, (%rdx)
 197:fltk-1.3.4-1/jpeg/jccoefct.c **** 	      coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn-1][0][0];
 1068              		.loc 1 197 44 is_stmt 1 discriminator 3 view .LVU344
 197:fltk-1.3.4-1/jpeg/jccoefct.c **** 	      coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn-1][0][0];
 1069              		.loc 1 197 19 discriminator 3 view .LVU345
 197:fltk-1.3.4-1/jpeg/jccoefct.c **** 	      coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn-1][0][0];
 1070              		.loc 1 197 31 is_stmt 0 discriminator 3 view .LVU346
 1071 02d3 8B5338   		movl	56(%rbx), %edx
 197:fltk-1.3.4-1/jpeg/jccoefct.c **** 	      coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn-1][0][0];
 1072              		.loc 1 197 6 discriminator 3 view .LVU347
 1073 02d6 39C2     		cmpl	%eax, %edx
 1074 02d8 7FE6     		jg	.L72
 1075 02da E919FEFF 		jmp	.L70
 1075      FF
 1076              	.LVL120:
 1077 02df 90       		.p2align 4,,10
 1078              		.p2align 3
 1079              	.L65:
 174:fltk-1.3.4-1/jpeg/jccoefct.c **** 	xpos = MCU_col_num * compptr->MCU_sample_width;
 1080              		.loc 1 174 7 discriminator 2 view .LVU348
 1081 02e0 448B7348 		movl	72(%rbx), %r14d
 1082 02e4 E9DBFDFF 		jmp	.L66
 1082      FF
 1083              	.LVL121:
 1084              	.L98:
 210:fltk-1.3.4-1/jpeg/jccoefct.c **** 	coef->mcu_ctr = MCU_col_num;
 1085              		.loc 1 210 2 is_stmt 1 view .LVU349
 210:fltk-1.3.4-1/jpeg/jccoefct.c **** 	coef->mcu_ctr = MCU_col_num;
 1086              		.loc 1 210 24 is_stmt 0 view .LVU350
 1087 02e9 8B7C242C 		movl	44(%rsp), %edi
 1088 02ed 41897E18 		movl	%edi, 24(%r14)
 211:fltk-1.3.4-1/jpeg/jccoefct.c **** 	return FALSE;
 1089              		.loc 1 211 2 is_stmt 1 view .LVU351
 211:fltk-1.3.4-1/jpeg/jccoefct.c **** 	return FALSE;
 1090              		.loc 1 211 16 is_stmt 0 view .LVU352
 1091 02f1 8B7C2440 		movl	64(%rsp), %edi
 1092 02f5 41897E14 		movl	%edi, 20(%r14)
 212:fltk-1.3.4-1/jpeg/jccoefct.c ****       }
 1093              		.loc 1 212 2 is_stmt 1 view .LVU353
 222:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 1094              		.loc 1 222 1 is_stmt 0 view .LVU354
 1095 02f9 4883C458 		addq	$88, %rsp
 1096              		.cfi_remember_state
 1097              		.cfi_def_cfa_offset 56
 1098 02fd 5B       		popq	%rbx
 1099              		.cfi_def_cfa_offset 48
 1100 02fe 5D       		popq	%rbp
 1101              		.cfi_def_cfa_offset 40
 1102 02ff 415C     		popq	%r12
 1103              		.cfi_def_cfa_offset 32
 1104 0301 415D     		popq	%r13
 1105              		.cfi_def_cfa_offset 24
 1106              	.LVL122:
 222:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 1107              		.loc 1 222 1 view .LVU355
 1108 0303 415E     		popq	%r14
 1109              		.cfi_def_cfa_offset 16
 1110              	.LVL123:
 222:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 1111              		.loc 1 222 1 view .LVU356
 1112 0305 415F     		popq	%r15
 1113              		.cfi_def_cfa_offset 8
 1114 0307 C3       		ret
 1115              	.LVL124:
 1116              	.L99:
 1117              		.cfi_restore_state
 1118              	.LBB47:
 1119              	.LBB40:
  85:fltk-1.3.4-1/jpeg/jccoefct.c ****       coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 1120              		.loc 1 85 5 is_stmt 1 view .LVU357
  85:fltk-1.3.4-1/jpeg/jccoefct.c ****       coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 1121              		.loc 1 85 53 is_stmt 0 view .LVU358
 1122 0308 418B9770 		movl	368(%r15), %edx
 1122      010000
 1123 030f 498B8F78 		movq	376(%r15), %rcx
 1123      010000
 1124 0316 83EA01   		subl	$1, %edx
  85:fltk-1.3.4-1/jpeg/jccoefct.c ****       coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 1125              		.loc 1 85 8 view .LVU359
 1126 0319 395010   		cmpl	%edx, 16(%rax)
 1127 031c 730B     		jnb	.L81
  86:fltk-1.3.4-1/jpeg/jccoefct.c ****     else
 1128              		.loc 1 86 7 is_stmt 1 view .LVU360
  86:fltk-1.3.4-1/jpeg/jccoefct.c ****     else
 1129              		.loc 1 86 60 is_stmt 0 view .LVU361
 1130 031e 8B510C   		movl	12(%rcx), %edx
  86:fltk-1.3.4-1/jpeg/jccoefct.c ****     else
 1131              		.loc 1 86 35 view .LVU362
 1132 0321 89501C   		movl	%edx, 28(%rax)
 1133 0324 E94BFFFF 		jmp	.L80
 1133      FF
 1134              	.L81:
  88:fltk-1.3.4-1/jpeg/jccoefct.c ****   }
 1135              		.loc 1 88 7 is_stmt 1 view .LVU363
  88:fltk-1.3.4-1/jpeg/jccoefct.c ****   }
 1136              		.loc 1 88 60 is_stmt 0 view .LVU364
 1137 0329 8B514C   		movl	76(%rcx), %edx
  88:fltk-1.3.4-1/jpeg/jccoefct.c ****   }
 1138              		.loc 1 88 35 view .LVU365
 1139 032c 89501C   		movl	%edx, 28(%rax)
 1140 032f E940FFFF 		jmp	.L80
 1140      FF
 1141              	.LBE40:
 1142              	.LBE47:
 1143              		.cfi_endproc
 1144              	.LFE53:
 1146              		.section	.text.compress_first_pass,"ax",@progbits
 1147              		.p2align 4
 1149              	compress_first_pass:
 1150              	.LVL125:
 1151              	.LFB54:
 250:fltk-1.3.4-1/jpeg/jccoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 1152              		.loc 1 250 1 is_stmt 1 view -0
 1153              		.cfi_startproc
 250:fltk-1.3.4-1/jpeg/jccoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 1154              		.loc 1 250 1 is_stmt 0 view .LVU367
 1155 0000 F30F1EFA 		endbr64
 251:fltk-1.3.4-1/jpeg/jccoefct.c ****   JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 1156              		.loc 1 251 3 is_stmt 1 view .LVU368
 250:fltk-1.3.4-1/jpeg/jccoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 1157              		.loc 1 250 1 is_stmt 0 view .LVU369
 1158 0004 4157     		pushq	%r15
 1159              		.cfi_def_cfa_offset 16
 1160              		.cfi_offset 15, -16
 1161 0006 4156     		pushq	%r14
 1162              		.cfi_def_cfa_offset 24
 1163              		.cfi_offset 14, -24
 1164 0008 4155     		pushq	%r13
 1165              		.cfi_def_cfa_offset 32
 1166              		.cfi_offset 13, -32
 1167 000a 4154     		pushq	%r12
 1168              		.cfi_def_cfa_offset 40
 1169              		.cfi_offset 12, -40
 1170 000c 4989FC   		movq	%rdi, %r12
 1171 000f 55       		pushq	%rbp
 1172              		.cfi_def_cfa_offset 48
 1173              		.cfi_offset 6, -48
 1174 0010 53       		pushq	%rbx
 1175              		.cfi_def_cfa_offset 56
 1176              		.cfi_offset 3, -56
 1177 0011 4883EC68 		subq	$104, %rsp
 1178              		.cfi_def_cfa_offset 160
 251:fltk-1.3.4-1/jpeg/jccoefct.c ****   JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 1179              		.loc 1 251 15 view .LVU370
 1180 0015 488B8708 		movq	520(%rdi), %rax
 1180      020000
 261:fltk-1.3.4-1/jpeg/jccoefct.c ****        ci++, compptr++) {
 1181              		.loc 1 261 24 view .LVU371
 1182 001c 488B6F68 		movq	104(%rdi), %rbp
 261:fltk-1.3.4-1/jpeg/jccoefct.c ****        ci++, compptr++) {
 1183              		.loc 1 261 3 view .LVU372
 1184 0020 8B4F5C   		movl	92(%rdi), %ecx
 250:fltk-1.3.4-1/jpeg/jccoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 1185              		.loc 1 250 1 view .LVU373
 1186 0023 48897424 		movq	%rsi, 88(%rsp)
 1186      58
 251:fltk-1.3.4-1/jpeg/jccoefct.c ****   JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 1187              		.loc 1 251 15 view .LVU374
 1188 0028 48894424 		movq	%rax, 72(%rsp)
 1188      48
 1189              	.LVL126:
 252:fltk-1.3.4-1/jpeg/jccoefct.c ****   JDIMENSION blocks_across, MCUs_across, MCUindex;
 1190              		.loc 1 252 3 is_stmt 1 view .LVU375
 252:fltk-1.3.4-1/jpeg/jccoefct.c ****   JDIMENSION blocks_across, MCUs_across, MCUindex;
 1191              		.loc 1 252 14 is_stmt 0 view .LVU376
 1192 002d 8B877001 		movl	368(%rdi), %eax
 1192      0000
 1193              	.LVL127:
 252:fltk-1.3.4-1/jpeg/jccoefct.c ****   JDIMENSION blocks_across, MCUs_across, MCUindex;
 1194              		.loc 1 252 14 view .LVU377
 1195 0033 4889EB   		movq	%rbp, %rbx
 1196 0036 48897424 		movq	%rsi, 8(%rsp)
 1196      08
 261:fltk-1.3.4-1/jpeg/jccoefct.c ****        ci++, compptr++) {
 1197              		.loc 1 261 3 view .LVU378
 1198 003b 48C74424 		movq	$0, 32(%rsp)
 1198      20000000 
 1198      00
 252:fltk-1.3.4-1/jpeg/jccoefct.c ****   JDIMENSION blocks_across, MCUs_across, MCUindex;
 1199              		.loc 1 252 14 view .LVU379
 1200 0044 83E801   		subl	$1, %eax
 1201 0047 89442450 		movl	%eax, 80(%rsp)
 1202              	.LVL128:
 253:fltk-1.3.4-1/jpeg/jccoefct.c ****   int bi, ci, h_samp_factor, block_row, block_rows, ndummy;
 1203              		.loc 1 253 3 is_stmt 1 view .LVU380
 254:fltk-1.3.4-1/jpeg/jccoefct.c ****   JCOEF lastDC;
 1204              		.loc 1 254 3 view .LVU381
 255:fltk-1.3.4-1/jpeg/jccoefct.c ****   jpeg_component_info *compptr;
 1205              		.loc 1 255 3 view .LVU382
 256:fltk-1.3.4-1/jpeg/jccoefct.c ****   JBLOCKARRAY buffer;
 1206              		.loc 1 256 3 view .LVU383
 257:fltk-1.3.4-1/jpeg/jccoefct.c ****   JBLOCKROW thisblockrow, lastblockrow;
 1207              		.loc 1 257 3 view .LVU384
 258:fltk-1.3.4-1/jpeg/jccoefct.c ****   forward_DCT_ptr forward_DCT;
 1208              		.loc 1 258 3 view .LVU385
 259:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 1209              		.loc 1 259 3 view .LVU386
 261:fltk-1.3.4-1/jpeg/jccoefct.c ****        ci++, compptr++) {
 1210              		.loc 1 261 3 view .LVU387
 261:fltk-1.3.4-1/jpeg/jccoefct.c ****        ci++, compptr++) {
 1211              		.loc 1 261 44 view .LVU388
 261:fltk-1.3.4-1/jpeg/jccoefct.c ****        ci++, compptr++) {
 1212              		.loc 1 261 3 is_stmt 0 view .LVU389
 1213 004b 85C9     		testl	%ecx, %ecx
 1214 004d 0F8E7201 		jle	.L113
 1214      0000
 1215              	.LVL129:
 1216              		.p2align 4,,10
 1217 0053 0F1F4400 		.p2align 3
 1217      00
 1218              	.L112:
 261:fltk-1.3.4-1/jpeg/jccoefct.c ****        ci++, compptr++) {
 1219              		.loc 1 261 3 view .LVU390
 1220 0058 488B4424 		movq	32(%rsp), %rax
 1220      20
 264:fltk-1.3.4-1/jpeg/jccoefct.c ****       ((j_common_ptr) cinfo, coef->whole_image[ci],
 1221              		.loc 1 264 15 view .LVU391
 1222 005d 4C8B7424 		movq	72(%rsp), %r14
 1222      48
 1223 0062 41B80100 		movl	$1, %r8d
 1223      0000
 1224 0068 4C89E7   		movq	%r12, %rdi
 1225 006b 8B4B0C   		movl	12(%rbx), %ecx
 1226 006e 418B5610 		movl	16(%r14), %edx
 1227 0072 498B74C6 		movq	112(%r14,%rax,8), %rsi
 1227      70
 1228 0077 4C63F8   		movslq	%eax, %r15
 1229              	.LVL130:
 264:fltk-1.3.4-1/jpeg/jccoefct.c ****       ((j_common_ptr) cinfo, coef->whole_image[ci],
 1230              		.loc 1 264 5 is_stmt 1 view .LVU392
 264:fltk-1.3.4-1/jpeg/jccoefct.c ****       ((j_common_ptr) cinfo, coef->whole_image[ci],
 1231              		.loc 1 264 15 is_stmt 0 view .LVU393
 1232 007a 498B4424 		movq	8(%r12), %rax
 1232      08
 1233              	.LVL131:
 264:fltk-1.3.4-1/jpeg/jccoefct.c ****       ((j_common_ptr) cinfo, coef->whole_image[ci],
 1234              		.loc 1 264 15 view .LVU394
 1235 007f 0FAFD1   		imull	%ecx, %edx
 1236 0082 FF5040   		call	*64(%rax)
 1237              	.LVL132:
 269:fltk-1.3.4-1/jpeg/jccoefct.c ****       block_rows = compptr->v_samp_factor;
 1238              		.loc 1 269 13 view .LVU395
 1239 0085 418B4E10 		movl	16(%r14), %ecx
 264:fltk-1.3.4-1/jpeg/jccoefct.c ****       ((j_common_ptr) cinfo, coef->whole_image[ci],
 1240              		.loc 1 264 15 view .LVU396
 1241 0089 48890424 		movq	%rax, (%rsp)
 1242              	.LVL133:
 269:fltk-1.3.4-1/jpeg/jccoefct.c ****       block_rows = compptr->v_samp_factor;
 1243              		.loc 1 269 5 is_stmt 1 view .LVU397
 269:fltk-1.3.4-1/jpeg/jccoefct.c ****       block_rows = compptr->v_samp_factor;
 1244              		.loc 1 269 8 is_stmt 0 view .LVU398
 1245 008d 3B4C2450 		cmpl	80(%rsp), %ecx
 1246 0091 0F834901 		jnb	.L102
 1246      0000
 270:fltk-1.3.4-1/jpeg/jccoefct.c ****     else {
 1247              		.loc 1 270 7 is_stmt 1 view .LVU399
 270:fltk-1.3.4-1/jpeg/jccoefct.c ****     else {
 1248              		.loc 1 270 18 is_stmt 0 view .LVU400
 1249 0097 8B430C   		movl	12(%rbx), %eax
 1250              	.LVL134:
 270:fltk-1.3.4-1/jpeg/jccoefct.c ****     else {
 1251              		.loc 1 270 18 view .LVU401
 1252 009a 89442440 		movl	%eax, 64(%rsp)
 1253              	.LVL135:
 1254              	.L103:
 276:fltk-1.3.4-1/jpeg/jccoefct.c ****     h_samp_factor = compptr->h_samp_factor;
 1255              		.loc 1 276 5 is_stmt 1 view .LVU402
 276:fltk-1.3.4-1/jpeg/jccoefct.c ****     h_samp_factor = compptr->h_samp_factor;
 1256              		.loc 1 276 19 is_stmt 0 view .LVU403
 1257 009e 448B731C 		movl	28(%rbx), %r14d
 1258              	.LVL136:
 277:fltk-1.3.4-1/jpeg/jccoefct.c ****     /* Count number of dummy blocks to be added at the right margin. */
 1259              		.loc 1 277 5 is_stmt 1 view .LVU404
 277:fltk-1.3.4-1/jpeg/jccoefct.c ****     /* Count number of dummy blocks to be added at the right margin. */
 1260              		.loc 1 277 19 is_stmt 0 view .LVU405
 1261 00a2 8B7308   		movl	8(%rbx), %esi
 279:fltk-1.3.4-1/jpeg/jccoefct.c ****     if (ndummy > 0)
 1262              		.loc 1 279 35 view .LVU406
 1263 00a5 31D2     		xorl	%edx, %edx
 1264 00a7 4489F0   		movl	%r14d, %eax
 277:fltk-1.3.4-1/jpeg/jccoefct.c ****     /* Count number of dummy blocks to be added at the right margin. */
 1265              		.loc 1 277 19 view .LVU407
 1266 00aa 89742454 		movl	%esi, 84(%rsp)
 1267              	.LVL137:
 279:fltk-1.3.4-1/jpeg/jccoefct.c ****     if (ndummy > 0)
 1268              		.loc 1 279 5 is_stmt 1 view .LVU408
 279:fltk-1.3.4-1/jpeg/jccoefct.c ****     if (ndummy > 0)
 1269              		.loc 1 279 35 is_stmt 0 view .LVU409
 1270 00ae F7F6     		divl	%esi
 1271              	.LVL138:
 280:fltk-1.3.4-1/jpeg/jccoefct.c ****       ndummy = h_samp_factor - ndummy;
 1272              		.loc 1 280 5 is_stmt 1 view .LVU410
 282:fltk-1.3.4-1/jpeg/jccoefct.c ****     /* Perform DCT for all non-dummy blocks in this iMCU row.  Each call
 1273              		.loc 1 282 17 is_stmt 0 view .LVU411
 1274 00b0 498B8424 		movq	552(%r12), %rax
 1274      28020000 
 1275 00b8 4A8B44F8 		movq	8(%rax,%r15,8), %rax
 1275      08
 1276 00bd 48894424 		movq	%rax, 16(%rsp)
 1276      10
 281:fltk-1.3.4-1/jpeg/jccoefct.c ****     forward_DCT = cinfo->fdct->forward_DCT[ci];
 1277              		.loc 1 281 14 view .LVU412
 1278 00c2 29D6     		subl	%edx, %esi
 1279              	.LVL139:
 281:fltk-1.3.4-1/jpeg/jccoefct.c ****     forward_DCT = cinfo->fdct->forward_DCT[ci];
 1280              		.loc 1 281 14 view .LVU413
 1281 00c4 85D2     		testl	%edx, %edx
 1282 00c6 4189F5   		movl	%esi, %r13d
 286:fltk-1.3.4-1/jpeg/jccoefct.c ****       thisblockrow = buffer[block_row];
 1283              		.loc 1 286 5 view .LVU414
 1284 00c9 8B742440 		movl	64(%rsp), %esi
 281:fltk-1.3.4-1/jpeg/jccoefct.c ****     forward_DCT = cinfo->fdct->forward_DCT[ci];
 1285              		.loc 1 281 14 view .LVU415
 1286 00cd 440F4EEA 		cmovle	%edx, %r13d
 1287              	.LVL140:
 282:fltk-1.3.4-1/jpeg/jccoefct.c ****     /* Perform DCT for all non-dummy blocks in this iMCU row.  Each call
 1288              		.loc 1 282 5 is_stmt 1 view .LVU416
 286:fltk-1.3.4-1/jpeg/jccoefct.c ****       thisblockrow = buffer[block_row];
 1289              		.loc 1 286 5 view .LVU417
 286:fltk-1.3.4-1/jpeg/jccoefct.c ****       thisblockrow = buffer[block_row];
 1290              		.loc 1 286 25 view .LVU418
 286:fltk-1.3.4-1/jpeg/jccoefct.c ****       thisblockrow = buffer[block_row];
 1291              		.loc 1 286 5 is_stmt 0 view .LVU419
 1292 00d1 85F6     		testl	%esi, %esi
 1293 00d3 0F8EC600 		jle	.L105
 1293      0000
 293:fltk-1.3.4-1/jpeg/jccoefct.c **** 	FMEMZERO((void FAR *) thisblockrow, ndummy * SIZEOF(JBLOCK));
 1294              		.loc 1 293 15 view .LVU420
 1295 00d9 4489F0   		movl	%r14d, %eax
 1296              	.LVL141:
 294:fltk-1.3.4-1/jpeg/jccoefct.c **** 	lastDC = thisblockrow[-1][0];
 1297              		.loc 1 294 2 view .LVU421
 1298 00dc 31ED     		xorl	%ebp, %ebp
 293:fltk-1.3.4-1/jpeg/jccoefct.c **** 	FMEMZERO((void FAR *) thisblockrow, ndummy * SIZEOF(JBLOCK));
 1299              		.loc 1 293 15 view .LVU422
 1300 00de 48C1E007 		salq	$7, %rax
 1301 00e2 48894424 		movq	%rax, 40(%rsp)
 1301      28
 294:fltk-1.3.4-1/jpeg/jccoefct.c **** 	lastDC = thisblockrow[-1][0];
 1302              		.loc 1 294 2 view .LVU423
 1303 00e7 4963C5   		movslq	%r13d, %rax
 1304 00ea 48C1E007 		salq	$7, %rax
 1305 00ee 48894424 		movq	%rax, 48(%rsp)
 1305      30
 1306 00f3 8D46FF   		leal	-1(%rsi), %eax
 1307 00f6 48894424 		movq	%rax, 24(%rsp)
 1307      18
 1308 00fb 418D45FF 		leal	-1(%r13), %eax
 1309 00ff 4883C001 		addq	$1, %rax
 1310 0103 48894424 		movq	%rax, 56(%rsp)
 1310      38
 1311 0108 EB14     		jmp	.L107
 1312              	.LVL142:
 1313 010a 660F1F44 		.p2align 4,,10
 1313      0000
 1314              		.p2align 3
 1315              	.L135:
 286:fltk-1.3.4-1/jpeg/jccoefct.c ****       thisblockrow = buffer[block_row];
 1316              		.loc 1 286 49 is_stmt 1 view .LVU424
 286:fltk-1.3.4-1/jpeg/jccoefct.c ****       thisblockrow = buffer[block_row];
 1317              		.loc 1 286 25 view .LVU425
 1318 0110 488D4501 		leaq	1(%rbp), %rax
 286:fltk-1.3.4-1/jpeg/jccoefct.c ****       thisblockrow = buffer[block_row];
 1319              		.loc 1 286 5 is_stmt 0 view .LVU426
 1320 0114 48396C24 		cmpq	%rbp, 24(%rsp)
 1320      18
 1321 0119 747C     		je	.L134
 1322              	.LVL143:
 1323              	.L122:
 286:fltk-1.3.4-1/jpeg/jccoefct.c ****       thisblockrow = buffer[block_row];
 1324              		.loc 1 286 5 view .LVU427
 1325 011b 4889C5   		movq	%rax, %rbp
 1326              	.L107:
 1327              	.LVL144:
 287:fltk-1.3.4-1/jpeg/jccoefct.c ****       (*forward_DCT) (cinfo, compptr, input_buf[ci], thisblockrow,
 1328              		.loc 1 287 7 is_stmt 1 view .LVU428
 287:fltk-1.3.4-1/jpeg/jccoefct.c ****       (*forward_DCT) (cinfo, compptr, input_buf[ci], thisblockrow,
 1329              		.loc 1 287 20 is_stmt 0 view .LVU429
 1330 011e 488B0424 		movq	(%rsp), %rax
 288:fltk-1.3.4-1/jpeg/jccoefct.c **** 		      (JDIMENSION) (block_row * compptr->DCT_v_scaled_size),
 1331              		.loc 1 288 8 view .LVU430
 1332 0122 4883EC08 		subq	$8, %rsp
 1333              		.cfi_def_cfa_offset 168
 1334              	.LVL145:
 289:fltk-1.3.4-1/jpeg/jccoefct.c **** 		      (JDIMENSION) 0, blocks_across);
 1335              		.loc 1 289 33 view .LVU431
 1336 0126 448B4328 		movl	40(%rbx), %r8d
 288:fltk-1.3.4-1/jpeg/jccoefct.c **** 		      (JDIMENSION) (block_row * compptr->DCT_v_scaled_size),
 1337              		.loc 1 288 8 view .LVU432
 1338 012a 4531C9   		xorl	%r9d, %r9d
 1339 012d 4889DE   		movq	%rbx, %rsi
 1340 0130 4C89E7   		movq	%r12, %rdi
 287:fltk-1.3.4-1/jpeg/jccoefct.c ****       (*forward_DCT) (cinfo, compptr, input_buf[ci], thisblockrow,
 1341              		.loc 1 287 20 view .LVU433
 1342 0133 4C8B3CE8 		movq	(%rax,%rbp,8), %r15
 1343              	.LVL146:
 288:fltk-1.3.4-1/jpeg/jccoefct.c **** 		      (JDIMENSION) (block_row * compptr->DCT_v_scaled_size),
 1344              		.loc 1 288 7 is_stmt 1 view .LVU434
 288:fltk-1.3.4-1/jpeg/jccoefct.c **** 		      (JDIMENSION) (block_row * compptr->DCT_v_scaled_size),
 1345              		.loc 1 288 8 is_stmt 0 view .LVU435
 1346 0137 4156     		pushq	%r14
 1347              		.cfi_def_cfa_offset 176
 289:fltk-1.3.4-1/jpeg/jccoefct.c **** 		      (JDIMENSION) 0, blocks_across);
 1348              		.loc 1 289 33 view .LVU436
 1349 0139 440FAFC5 		imull	%ebp, %r8d
 288:fltk-1.3.4-1/jpeg/jccoefct.c **** 		      (JDIMENSION) (block_row * compptr->DCT_v_scaled_size),
 1350              		.loc 1 288 8 view .LVU437
 1351 013d 488B4424 		movq	24(%rsp), %rax
 1351      18
 1352 0142 4C89F9   		movq	%r15, %rcx
 1353 0145 488B10   		movq	(%rax), %rdx
 1354 0148 488B4424 		movq	32(%rsp), %rax
 1354      20
 1355 014d FFD0     		call	*%rax
 1356              	.LVL147:
 291:fltk-1.3.4-1/jpeg/jccoefct.c **** 	/* Create dummy blocks at the right edge of the image. */
 1357              		.loc 1 291 7 is_stmt 1 view .LVU438
 291:fltk-1.3.4-1/jpeg/jccoefct.c **** 	/* Create dummy blocks at the right edge of the image. */
 1358              		.loc 1 291 10 is_stmt 0 view .LVU439
 1359 014f 58       		popq	%rax
 1360              		.cfi_def_cfa_offset 168
 1361 0150 5A       		popq	%rdx
 1362              		.cfi_def_cfa_offset 160
 1363              	.LVL148:
 291:fltk-1.3.4-1/jpeg/jccoefct.c **** 	/* Create dummy blocks at the right edge of the image. */
 1364              		.loc 1 291 10 view .LVU440
 1365 0151 4585ED   		testl	%r13d, %r13d
 1366 0154 7EBA     		jle	.L135
 293:fltk-1.3.4-1/jpeg/jccoefct.c **** 	FMEMZERO((void FAR *) thisblockrow, ndummy * SIZEOF(JBLOCK));
 1367              		.loc 1 293 2 is_stmt 1 view .LVU441
 293:fltk-1.3.4-1/jpeg/jccoefct.c **** 	FMEMZERO((void FAR *) thisblockrow, ndummy * SIZEOF(JBLOCK));
 1368              		.loc 1 293 15 is_stmt 0 view .LVU442
 1369 0156 488B4424 		movq	40(%rsp), %rax
 1369      28
 1370              	.LBB48:
 1371              	.LBB49:
 1372              		.loc 2 71 10 view .LVU443
 1373 015b 488B5424 		movq	48(%rsp), %rdx
 1373      30
 1374 0160 31F6     		xorl	%esi, %esi
 1375              	.LBE49:
 1376              	.LBE48:
 293:fltk-1.3.4-1/jpeg/jccoefct.c **** 	FMEMZERO((void FAR *) thisblockrow, ndummy * SIZEOF(JBLOCK));
 1377              		.loc 1 293 15 view .LVU444
 1378 0162 498D0C07 		leaq	(%r15,%rax), %rcx
 1379              	.LVL149:
 294:fltk-1.3.4-1/jpeg/jccoefct.c **** 	lastDC = thisblockrow[-1][0];
 1380              		.loc 1 294 2 is_stmt 1 view .LVU445
 1381              	.LBB51:
 1382              	.LBI48:
  59:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
 1383              		.loc 2 59 1 view .LVU446
 1384              	.LBB50:
 1385              		.loc 2 71 3 view .LVU447
 1386              		.loc 2 71 10 is_stmt 0 view .LVU448
 1387 0166 4889CF   		movq	%rcx, %rdi
 1388 0169 E8000000 		call	memset@PLT
 1388      00
 1389              	.LVL150:
 1390              		.loc 2 71 10 view .LVU449
 1391              	.LBE50:
 1392              	.LBE51:
 295:fltk-1.3.4-1/jpeg/jccoefct.c **** 	for (bi = 0; bi < ndummy; bi++) {
 1393              		.loc 1 295 2 is_stmt 1 view .LVU450
 1394 016e 488B5424 		movq	56(%rsp), %rdx
 1394      38
 295:fltk-1.3.4-1/jpeg/jccoefct.c **** 	for (bi = 0; bi < ndummy; bi++) {
 1395              		.loc 1 295 9 is_stmt 0 view .LVU451
 1396 0173 0FB77080 		movzwl	-128(%rax), %esi
 1397              	.LVL151:
 296:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  thisblockrow[bi][0] = lastDC;
 1398              		.loc 1 296 2 is_stmt 1 view .LVU452
 296:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  thisblockrow[bi][0] = lastDC;
 1399              		.loc 1 296 15 view .LVU453
 1400 0177 48C1E207 		salq	$7, %rdx
 1401 017b 4801C2   		addq	%rax, %rdx
 1402              	.LVL152:
 1403 017e 6690     		.p2align 4,,10
 1404              		.p2align 3
 1405              	.L109:
 297:fltk-1.3.4-1/jpeg/jccoefct.c **** 	}
 1406              		.loc 1 297 4 discriminator 3 view .LVU454
 297:fltk-1.3.4-1/jpeg/jccoefct.c **** 	}
 1407              		.loc 1 297 24 is_stmt 0 discriminator 3 view .LVU455
 1408 0180 668930   		movw	%si, (%rax)
 296:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  thisblockrow[bi][0] = lastDC;
 1409              		.loc 1 296 28 is_stmt 1 discriminator 3 view .LVU456
 296:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  thisblockrow[bi][0] = lastDC;
 1410              		.loc 1 296 15 discriminator 3 view .LVU457
 1411 0183 4883E880 		subq	$-128, %rax
 296:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  thisblockrow[bi][0] = lastDC;
 1412              		.loc 1 296 2 is_stmt 0 discriminator 3 view .LVU458
 1413 0187 4839D0   		cmpq	%rdx, %rax
 1414 018a 75F4     		jne	.L109
 286:fltk-1.3.4-1/jpeg/jccoefct.c ****       thisblockrow = buffer[block_row];
 1415              		.loc 1 286 49 is_stmt 1 view .LVU459
 1416              	.LVL153:
 286:fltk-1.3.4-1/jpeg/jccoefct.c ****       thisblockrow = buffer[block_row];
 1417              		.loc 1 286 25 view .LVU460
 1418 018c 488D4501 		leaq	1(%rbp), %rax
 286:fltk-1.3.4-1/jpeg/jccoefct.c ****       thisblockrow = buffer[block_row];
 1419              		.loc 1 286 5 is_stmt 0 view .LVU461
 1420 0190 48396C24 		cmpq	%rbp, 24(%rsp)
 1420      18
 1421 0195 7584     		jne	.L122
 1422              	.LVL154:
 1423              	.L134:
 286:fltk-1.3.4-1/jpeg/jccoefct.c ****       thisblockrow = buffer[block_row];
 1424              		.loc 1 286 5 view .LVU462
 1425 0197 488B4424 		movq	72(%rsp), %rax
 1425      48
 1426 019c 8B4810   		movl	16(%rax), %ecx
 1427              	.L105:
 306:fltk-1.3.4-1/jpeg/jccoefct.c ****       blocks_across += ndummy;	/* include lower right corner */
 1428              		.loc 1 306 5 is_stmt 1 view .LVU463
 306:fltk-1.3.4-1/jpeg/jccoefct.c ****       blocks_across += ndummy;	/* include lower right corner */
 1429              		.loc 1 306 8 is_stmt 0 view .LVU464
 1430 019f 394C2450 		cmpl	%ecx, 80(%rsp)
 1431 01a3 7453     		je	.L111
 1432              	.LVL155:
 1433              	.L114:
 262:fltk-1.3.4-1/jpeg/jccoefct.c ****     /* Align the virtual buffer for this component. */
 1434              		.loc 1 262 8 is_stmt 1 view .LVU465
 262:fltk-1.3.4-1/jpeg/jccoefct.c ****     /* Align the virtual buffer for this component. */
 1435              		.loc 1 262 8 is_stmt 0 view .LVU466
 1436 01a5 48834424 		addq	$1, 32(%rsp)
 1436      2001
 1437              	.LVL156:
 262:fltk-1.3.4-1/jpeg/jccoefct.c ****     /* Align the virtual buffer for this component. */
 1438              		.loc 1 262 21 view .LVU467
 1439 01ab 4883C360 		addq	$96, %rbx
 1440              	.LVL157:
 261:fltk-1.3.4-1/jpeg/jccoefct.c ****        ci++, compptr++) {
 1441              		.loc 1 261 44 is_stmt 1 view .LVU468
 1442 01af 488B4424 		movq	32(%rsp), %rax
 1442      20
 1443 01b4 48834424 		addq	$8, 8(%rsp)
 1443      0808
 261:fltk-1.3.4-1/jpeg/jccoefct.c ****        ci++, compptr++) {
 1444              		.loc 1 261 3 is_stmt 0 view .LVU469
 1445 01ba 41394424 		cmpl	%eax, 92(%r12)
 1445      5C
 1446 01bf 0F8F93FE 		jg	.L112
 1446      FFFF
 1447              	.LVL158:
 1448              	.L113:
 331:fltk-1.3.4-1/jpeg/jccoefct.c **** }
 1449              		.loc 1 331 3 is_stmt 1 view .LVU470
 331:fltk-1.3.4-1/jpeg/jccoefct.c **** }
 1450              		.loc 1 331 10 is_stmt 0 view .LVU471
 1451 01c5 488B7424 		movq	88(%rsp), %rsi
 1451      58
 332:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 1452              		.loc 1 332 1 view .LVU472
 1453 01ca 4883C468 		addq	$104, %rsp
 1454              		.cfi_remember_state
 1455              		.cfi_def_cfa_offset 56
 331:fltk-1.3.4-1/jpeg/jccoefct.c **** }
 1456              		.loc 1 331 10 view .LVU473
 1457 01ce 4C89E7   		movq	%r12, %rdi
 332:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 1458              		.loc 1 332 1 view .LVU474
 1459 01d1 5B       		popq	%rbx
 1460              		.cfi_def_cfa_offset 48
 1461              	.LVL159:
 332:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 1462              		.loc 1 332 1 view .LVU475
 1463 01d2 5D       		popq	%rbp
 1464              		.cfi_def_cfa_offset 40
 1465 01d3 415C     		popq	%r12
 1466              		.cfi_def_cfa_offset 32
 1467 01d5 415D     		popq	%r13
 1468              		.cfi_def_cfa_offset 24
 1469 01d7 415E     		popq	%r14
 1470              		.cfi_def_cfa_offset 16
 1471 01d9 415F     		popq	%r15
 1472              		.cfi_def_cfa_offset 8
 331:fltk-1.3.4-1/jpeg/jccoefct.c **** }
 1473              		.loc 1 331 10 view .LVU476
 1474 01db E9000000 		jmp	compress_output
 1474      00
 1475              	.LVL160:
 1476              	.L102:
 1477              		.cfi_restore_state
 273:fltk-1.3.4-1/jpeg/jccoefct.c ****       if (block_rows == 0) block_rows = compptr->v_samp_factor;
 1478              		.loc 1 273 7 is_stmt 1 view .LVU477
 273:fltk-1.3.4-1/jpeg/jccoefct.c ****       if (block_rows == 0) block_rows = compptr->v_samp_factor;
 1479              		.loc 1 273 62 is_stmt 0 view .LVU478
 1480 01e0 8B730C   		movl	12(%rbx), %esi
 273:fltk-1.3.4-1/jpeg/jccoefct.c ****       if (block_rows == 0) block_rows = compptr->v_samp_factor;
 1481              		.loc 1 273 53 view .LVU479
 1482 01e3 8B4320   		movl	32(%rbx), %eax
 1483              	.LVL161:
 273:fltk-1.3.4-1/jpeg/jccoefct.c ****       if (block_rows == 0) block_rows = compptr->v_samp_factor;
 1484              		.loc 1 273 53 view .LVU480
 1485 01e6 31D2     		xorl	%edx, %edx
 1486 01e8 F7F6     		divl	%esi
 1487              	.LVL162:
 274:fltk-1.3.4-1/jpeg/jccoefct.c ****     }
 1488              		.loc 1 274 7 is_stmt 1 view .LVU481
 274:fltk-1.3.4-1/jpeg/jccoefct.c ****     }
 1489              		.loc 1 274 39 is_stmt 0 view .LVU482
 1490 01ea 85D2     		testl	%edx, %edx
 1491 01ec 0F45F2   		cmovne	%edx, %esi
 1492 01ef 89742440 		movl	%esi, 64(%rsp)
 1493 01f3 E9A6FEFF 		jmp	.L103
 1493      FF
 1494              	.LVL163:
 1495              	.L111:
 307:fltk-1.3.4-1/jpeg/jccoefct.c ****       MCUs_across = blocks_across / h_samp_factor;
 1496              		.loc 1 307 7 is_stmt 1 view .LVU483
 308:fltk-1.3.4-1/jpeg/jccoefct.c ****       for (block_row = block_rows; block_row < compptr->v_samp_factor;
 1497              		.loc 1 308 19 is_stmt 0 view .LVU484
 1498 01f8 8B742454 		movl	84(%rsp), %esi
 307:fltk-1.3.4-1/jpeg/jccoefct.c ****       MCUs_across = blocks_across / h_samp_factor;
 1499              		.loc 1 307 21 view .LVU485
 1500 01fc 438D4435 		leal	0(%r13,%r14), %eax
 1500      00
 1501              	.LVL164:
 308:fltk-1.3.4-1/jpeg/jccoefct.c ****       for (block_row = block_rows; block_row < compptr->v_samp_factor;
 1502              		.loc 1 308 7 is_stmt 1 view .LVU486
 308:fltk-1.3.4-1/jpeg/jccoefct.c ****       for (block_row = block_rows; block_row < compptr->v_samp_factor;
 1503              		.loc 1 308 19 is_stmt 0 view .LVU487
 1504 0201 31D2     		xorl	%edx, %edx
 309:fltk-1.3.4-1/jpeg/jccoefct.c **** 	   block_row++) {
 1505              		.loc 1 309 7 view .LVU488
 1506 0203 8B7C2440 		movl	64(%rsp), %edi
 308:fltk-1.3.4-1/jpeg/jccoefct.c ****       for (block_row = block_rows; block_row < compptr->v_samp_factor;
 1507              		.loc 1 308 19 view .LVU489
 1508 0207 89442428 		movl	%eax, 40(%rsp)
 307:fltk-1.3.4-1/jpeg/jccoefct.c ****       MCUs_across = blocks_across / h_samp_factor;
 1509              		.loc 1 307 21 view .LVU490
 1510 020b 89C1     		movl	%eax, %ecx
 308:fltk-1.3.4-1/jpeg/jccoefct.c ****       for (block_row = block_rows; block_row < compptr->v_samp_factor;
 1511              		.loc 1 308 19 view .LVU491
 1512 020d F7F6     		divl	%esi
 1513              	.LVL165:
 308:fltk-1.3.4-1/jpeg/jccoefct.c ****       for (block_row = block_rows; block_row < compptr->v_samp_factor;
 1514              		.loc 1 308 19 view .LVU492
 1515 020f 4189C6   		movl	%eax, %r14d
 1516              	.LVL166:
 309:fltk-1.3.4-1/jpeg/jccoefct.c **** 	   block_row++) {
 1517              		.loc 1 309 7 is_stmt 1 view .LVU493
 309:fltk-1.3.4-1/jpeg/jccoefct.c **** 	   block_row++) {
 1518              		.loc 1 309 36 view .LVU494
 309:fltk-1.3.4-1/jpeg/jccoefct.c **** 	   block_row++) {
 1519              		.loc 1 309 7 is_stmt 0 view .LVU495
 1520 0212 3B7B0C   		cmpl	12(%rbx), %edi
 1521 0215 7D8E     		jge	.L114
 313:fltk-1.3.4-1/jpeg/jccoefct.c **** 		 (size_t) (blocks_across * SIZEOF(JBLOCK)));
 1522              		.loc 1 313 2 view .LVU496
 1523 0217 89C8     		movl	%ecx, %eax
 1524              	.LVL167:
 316:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  for (bi = 0; bi < h_samp_factor; bi++) {
 1525              		.loc 1 316 25 view .LVU497
 1526 0219 4863EE   		movslq	%esi, %rbp
 1527 021c 4C896424 		movq	%r12, 64(%rsp)
 1527      40
 1528              	.LVL168:
 316:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  for (bi = 0; bi < h_samp_factor; bi++) {
 1529              		.loc 1 316 25 view .LVU498
 1530 0221 4C63FF   		movslq	%edi, %r15
 1531 0224 48C1E507 		salq	$7, %rbp
 313:fltk-1.3.4-1/jpeg/jccoefct.c **** 		 (size_t) (blocks_across * SIZEOF(JBLOCK)));
 1532              		.loc 1 313 2 view .LVU499
 1533 0228 48C1E007 		salq	$7, %rax
 1534 022c 4C8B2424 		movq	(%rsp), %r12
 1535 0230 4589F5   		movl	%r14d, %r13d
 1536              	.LVL169:
 313:fltk-1.3.4-1/jpeg/jccoefct.c **** 		 (size_t) (blocks_across * SIZEOF(JBLOCK)));
 1537              		.loc 1 313 2 view .LVU500
 1538 0233 48894424 		movq	%rax, 24(%rsp)
 1538      18
 316:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  for (bi = 0; bi < h_samp_factor; bi++) {
 1539              		.loc 1 316 25 view .LVU501
 1540 0238 488D4580 		leaq	-128(%rbp), %rax
 1541 023c 4989EE   		movq	%rbp, %r14
 1542              	.LVL170:
 316:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  for (bi = 0; bi < h_samp_factor; bi++) {
 1543              		.loc 1 316 25 view .LVU502
 1544 023f 89F5     		movl	%esi, %ebp
 1545 0241 48894424 		movq	%rax, 48(%rsp)
 1545      30
 1546 0246 8D46FF   		leal	-1(%rsi), %eax
 1547 0249 4883C001 		addq	$1, %rax
 1548 024d 48895C24 		movq	%rbx, 16(%rsp)
 1548      10
 1549              	.LVL171:
 316:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  for (bi = 0; bi < h_samp_factor; bi++) {
 1550              		.loc 1 316 25 view .LVU503
 1551 0252 4C89FB   		movq	%r15, %rbx
 1552              	.LVL172:
 316:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  for (bi = 0; bi < h_samp_factor; bi++) {
 1553              		.loc 1 316 25 view .LVU504
 1554 0255 48894424 		movq	%rax, 56(%rsp)
 1554      38
 1555              	.LVL173:
 1556 025a 660F1F44 		.p2align 4,,10
 1556      0000
 1557              		.p2align 3
 1558              	.L116:
 311:fltk-1.3.4-1/jpeg/jccoefct.c **** 	lastblockrow = buffer[block_row-1];
 1559              		.loc 1 311 2 is_stmt 1 view .LVU505
 311:fltk-1.3.4-1/jpeg/jccoefct.c **** 	lastblockrow = buffer[block_row-1];
 1560              		.loc 1 311 15 is_stmt 0 view .LVU506
 1561 0260 498B3CDC 		movq	(%r12,%rbx,8), %rdi
 1562              	.LVL174:
 312:fltk-1.3.4-1/jpeg/jccoefct.c **** 	FMEMZERO((void FAR *) thisblockrow,
 1563              		.loc 1 312 2 is_stmt 1 view .LVU507
 1564              	.LBB52:
 1565              	.LBB53:
 1566              		.loc 2 71 10 is_stmt 0 view .LVU508
 1567 0264 488B5424 		movq	24(%rsp), %rdx
 1567      18
 1568 0269 31F6     		xorl	%esi, %esi
 1569              	.LBE53:
 1570              	.LBE52:
 312:fltk-1.3.4-1/jpeg/jccoefct.c **** 	FMEMZERO((void FAR *) thisblockrow,
 1571              		.loc 1 312 15 view .LVU509
 1572 026b 4D8B7CDC 		movq	-8(%r12,%rbx,8), %r15
 1572      F8
 1573              	.LVL175:
 313:fltk-1.3.4-1/jpeg/jccoefct.c **** 		 (size_t) (blocks_across * SIZEOF(JBLOCK)));
 1574              		.loc 1 313 2 is_stmt 1 view .LVU510
 1575              	.LBB55:
 1576              	.LBI52:
  59:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
 1577              		.loc 2 59 1 view .LVU511
 1578              	.LBB54:
 1579              		.loc 2 71 3 view .LVU512
 1580              		.loc 2 71 10 is_stmt 0 view .LVU513
 1581 0270 E8000000 		call	memset@PLT
 1581      00
 1582              	.LVL176:
 1583              		.loc 2 71 10 view .LVU514
 1584 0275 4889C7   		movq	%rax, %rdi
 1585              	.LVL177:
 1586              		.loc 2 71 10 view .LVU515
 1587              	.LBE54:
 1588              	.LBE55:
 315:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  lastDC = lastblockrow[h_samp_factor-1][0];
 1589              		.loc 1 315 2 is_stmt 1 view .LVU516
 315:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  lastDC = lastblockrow[h_samp_factor-1][0];
 1590              		.loc 1 315 21 view .LVU517
 315:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  lastDC = lastblockrow[h_samp_factor-1][0];
 1591              		.loc 1 315 2 is_stmt 0 view .LVU518
 1592 0278 3B6C2428 		cmpl	40(%rsp), %ebp
 1593 027c 7748     		ja	.L119
 1594 027e 488B5424 		movq	56(%rsp), %rdx
 1594      38
 1595 0283 4C037C24 		addq	48(%rsp), %r15
 1595      30
 1596              	.LVL178:
 315:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  lastDC = lastblockrow[h_samp_factor-1][0];
 1597              		.loc 1 315 16 view .LVU519
 1598 0288 4531DB   		xorl	%r11d, %r11d
 1599 028b 48C1E207 		salq	$7, %rdx
 1600 028f 4801C2   		addq	%rax, %rdx
 1601              	.LVL179:
 1602              		.p2align 4,,10
 1603 0292 660F1F44 		.p2align 3
 1603      0000
 1604              	.L118:
 316:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  for (bi = 0; bi < h_samp_factor; bi++) {
 1605              		.loc 1 316 4 is_stmt 1 view .LVU520
 316:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  for (bi = 0; bi < h_samp_factor; bi++) {
 1606              		.loc 1 316 11 is_stmt 0 view .LVU521
 1607 0298 410FB70F 		movzwl	(%r15), %ecx
 1608              	.LVL180:
 317:fltk-1.3.4-1/jpeg/jccoefct.c **** 	    thisblockrow[bi][0] = lastDC;
 1609              		.loc 1 317 4 is_stmt 1 view .LVU522
 317:fltk-1.3.4-1/jpeg/jccoefct.c **** 	    thisblockrow[bi][0] = lastDC;
 1610              		.loc 1 317 17 view .LVU523
 1611 029c 4889F8   		movq	%rdi, %rax
 317:fltk-1.3.4-1/jpeg/jccoefct.c **** 	    thisblockrow[bi][0] = lastDC;
 1612              		.loc 1 317 4 is_stmt 0 view .LVU524
 1613 029f 85ED     		testl	%ebp, %ebp
 1614 02a1 7E11     		jle	.L121
 1615              	.LVL181:
 1616              		.p2align 4,,10
 1617 02a3 0F1F4400 		.p2align 3
 1617      00
 1618              	.L120:
 318:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  }
 1619              		.loc 1 318 6 is_stmt 1 discriminator 3 view .LVU525
 318:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  }
 1620              		.loc 1 318 26 is_stmt 0 discriminator 3 view .LVU526
 1621 02a8 668908   		movw	%cx, (%rax)
 317:fltk-1.3.4-1/jpeg/jccoefct.c **** 	    thisblockrow[bi][0] = lastDC;
 1622              		.loc 1 317 37 is_stmt 1 discriminator 3 view .LVU527
 317:fltk-1.3.4-1/jpeg/jccoefct.c **** 	    thisblockrow[bi][0] = lastDC;
 1623              		.loc 1 317 17 discriminator 3 view .LVU528
 1624 02ab 4883E880 		subq	$-128, %rax
 317:fltk-1.3.4-1/jpeg/jccoefct.c **** 	    thisblockrow[bi][0] = lastDC;
 1625              		.loc 1 317 4 is_stmt 0 discriminator 3 view .LVU529
 1626 02af 4839C2   		cmpq	%rax, %rdx
 1627 02b2 75F4     		jne	.L120
 1628              	.L121:
 320:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  lastblockrow += h_samp_factor;
 1629              		.loc 1 320 4 is_stmt 1 view .LVU530
 315:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  lastDC = lastblockrow[h_samp_factor-1][0];
 1630              		.loc 1 315 53 is_stmt 0 view .LVU531
 1631 02b4 4183C301 		addl	$1, %r11d
 1632              	.LVL182:
 320:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  lastblockrow += h_samp_factor;
 1633              		.loc 1 320 17 view .LVU532
 1634 02b8 4C01F7   		addq	%r14, %rdi
 1635              	.LVL183:
 321:fltk-1.3.4-1/jpeg/jccoefct.c **** 	}
 1636              		.loc 1 321 4 is_stmt 1 view .LVU533
 315:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  lastDC = lastblockrow[h_samp_factor-1][0];
 1637              		.loc 1 315 45 view .LVU534
 315:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  lastDC = lastblockrow[h_samp_factor-1][0];
 1638              		.loc 1 315 21 view .LVU535
 1639 02bb 4D01F7   		addq	%r14, %r15
 1640              	.LVL184:
 315:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  lastDC = lastblockrow[h_samp_factor-1][0];
 1641              		.loc 1 315 21 is_stmt 0 view .LVU536
 1642 02be 4C01F2   		addq	%r14, %rdx
 315:fltk-1.3.4-1/jpeg/jccoefct.c **** 	  lastDC = lastblockrow[h_samp_factor-1][0];
 1643              		.loc 1 315 2 view .LVU537
 1644 02c1 4539DD   		cmpl	%r11d, %r13d
 1645 02c4 77D2     		ja	.L118
 1646              	.LVL185:
 1647              	.L119:
 310:fltk-1.3.4-1/jpeg/jccoefct.c **** 	thisblockrow = buffer[block_row];
 1648              		.loc 1 310 5 is_stmt 1 view .LVU538
 309:fltk-1.3.4-1/jpeg/jccoefct.c **** 	   block_row++) {
 1649              		.loc 1 309 36 view .LVU539
 309:fltk-1.3.4-1/jpeg/jccoefct.c **** 	   block_row++) {
 1650              		.loc 1 309 7 is_stmt 0 view .LVU540
 1651 02c6 488B4424 		movq	16(%rsp), %rax
 1651      10
 1652 02cb 4883C301 		addq	$1, %rbx
 1653              	.LVL186:
 309:fltk-1.3.4-1/jpeg/jccoefct.c **** 	   block_row++) {
 1654              		.loc 1 309 7 view .LVU541
 1655 02cf 39580C   		cmpl	%ebx, 12(%rax)
 1656 02d2 7F8C     		jg	.L116
 1657 02d4 4C8B6424 		movq	64(%rsp), %r12
 1657      40
 1658 02d9 4889C3   		movq	%rax, %rbx
 1659 02dc E9C4FEFF 		jmp	.L114
 1659      FF
 1660              		.cfi_endproc
 1661              	.LFE54:
 1663              		.section	.text.jinit_c_coef_controller,"ax",@progbits
 1664              		.p2align 4
 1665              		.globl	jinit_c_coef_controller
 1667              	jinit_c_coef_controller:
 1668              	.LVL187:
 1669              	.LFB56:
 401:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 402:fltk-1.3.4-1/jpeg/jccoefct.c **** #endif /* FULL_COEF_BUFFER_SUPPORTED */
 403:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 404:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 405:fltk-1.3.4-1/jpeg/jccoefct.c **** /*
 406:fltk-1.3.4-1/jpeg/jccoefct.c ****  * Initialize coefficient buffer controller.
 407:fltk-1.3.4-1/jpeg/jccoefct.c ****  */
 408:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 409:fltk-1.3.4-1/jpeg/jccoefct.c **** GLOBAL(void)
 410:fltk-1.3.4-1/jpeg/jccoefct.c **** jinit_c_coef_controller (j_compress_ptr cinfo, boolean need_full_buffer)
 411:fltk-1.3.4-1/jpeg/jccoefct.c **** {
 1670              		.loc 1 411 1 is_stmt 1 view -0
 1671              		.cfi_startproc
 1672              		.loc 1 411 1 is_stmt 0 view .LVU543
 1673 0000 F30F1EFA 		endbr64
 412:fltk-1.3.4-1/jpeg/jccoefct.c ****   my_coef_ptr coef;
 1674              		.loc 1 412 3 is_stmt 1 view .LVU544
 413:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 414:fltk-1.3.4-1/jpeg/jccoefct.c ****   coef = (my_coef_ptr)
 1675              		.loc 1 414 3 view .LVU545
 411:fltk-1.3.4-1/jpeg/jccoefct.c ****   my_coef_ptr coef;
 1676              		.loc 1 411 1 is_stmt 0 view .LVU546
 1677 0004 4157     		pushq	%r15
 1678              		.cfi_def_cfa_offset 16
 1679              		.cfi_offset 15, -16
 415:fltk-1.3.4-1/jpeg/jccoefct.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1680              		.loc 1 415 6 view .LVU547
 1681 0006 BAC00000 		movl	$192, %edx
 1681      00
 411:fltk-1.3.4-1/jpeg/jccoefct.c ****   my_coef_ptr coef;
 1682              		.loc 1 411 1 view .LVU548
 1683 000b 4156     		pushq	%r14
 1684              		.cfi_def_cfa_offset 24
 1685              		.cfi_offset 14, -24
 1686 000d 4155     		pushq	%r13
 1687              		.cfi_def_cfa_offset 32
 1688              		.cfi_offset 13, -32
 1689 000f 4154     		pushq	%r12
 1690              		.cfi_def_cfa_offset 40
 1691              		.cfi_offset 12, -40
 1692 0011 55       		pushq	%rbp
 1693              		.cfi_def_cfa_offset 48
 1694              		.cfi_offset 6, -48
 1695 0012 4889FD   		movq	%rdi, %rbp
 1696 0015 53       		pushq	%rbx
 1697              		.cfi_def_cfa_offset 56
 1698              		.cfi_offset 3, -56
 1699 0016 89F3     		movl	%esi, %ebx
 1700              		.loc 1 415 6 view .LVU549
 1701 0018 BE010000 		movl	$1, %esi
 1701      00
 1702              	.LVL188:
 411:fltk-1.3.4-1/jpeg/jccoefct.c ****   my_coef_ptr coef;
 1703              		.loc 1 411 1 view .LVU550
 1704 001d 4883EC18 		subq	$24, %rsp
 1705              		.cfi_def_cfa_offset 80
 1706              		.loc 1 415 6 view .LVU551
 1707 0021 488B4708 		movq	8(%rdi), %rax
 1708 0025 FF10     		call	*(%rax)
 1709              	.LVL189:
 416:fltk-1.3.4-1/jpeg/jccoefct.c **** 				SIZEOF(my_coef_controller));
 417:fltk-1.3.4-1/jpeg/jccoefct.c ****   cinfo->coef = (struct jpeg_c_coef_controller *) coef;
 1710              		.loc 1 417 15 view .LVU552
 1711 0027 48898508 		movq	%rax, 520(%rbp)
 1711      020000
 415:fltk-1.3.4-1/jpeg/jccoefct.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1712              		.loc 1 415 6 view .LVU553
 1713 002e 4989C5   		movq	%rax, %r13
 1714              	.LVL190:
 1715              		.loc 1 417 3 is_stmt 1 view .LVU554
 418:fltk-1.3.4-1/jpeg/jccoefct.c ****   coef->pub.start_pass = start_pass_coef;
 1716              		.loc 1 418 3 view .LVU555
 1717              		.loc 1 418 24 is_stmt 0 view .LVU556
 1718 0031 488D0500 		leaq	start_pass_coef(%rip), %rax
 1718      000000
 1719              	.LVL191:
 1720              		.loc 1 418 24 view .LVU557
 1721 0038 49894500 		movq	%rax, 0(%r13)
 419:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 420:fltk-1.3.4-1/jpeg/jccoefct.c ****   /* Create the coefficient buffer. */
 421:fltk-1.3.4-1/jpeg/jccoefct.c ****   if (need_full_buffer) {
 1722              		.loc 1 421 3 is_stmt 1 view .LVU558
 1723              		.loc 1 421 6 is_stmt 0 view .LVU559
 1724 003c 85DB     		testl	%ebx, %ebx
 1725 003e 7478     		je	.L137
 1726              	.LBB56:
 422:fltk-1.3.4-1/jpeg/jccoefct.c **** #ifdef FULL_COEF_BUFFER_SUPPORTED
 423:fltk-1.3.4-1/jpeg/jccoefct.c ****     /* Allocate a full-image virtual array for each component, */
 424:fltk-1.3.4-1/jpeg/jccoefct.c ****     /* padded to a multiple of samp_factor DCT blocks in each direction. */
 425:fltk-1.3.4-1/jpeg/jccoefct.c ****     int ci;
 1727              		.loc 1 425 5 is_stmt 1 view .LVU560
 426:fltk-1.3.4-1/jpeg/jccoefct.c ****     jpeg_component_info *compptr;
 1728              		.loc 1 426 5 view .LVU561
 427:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 428:fltk-1.3.4-1/jpeg/jccoefct.c ****     for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 1729              		.loc 1 428 5 view .LVU562
 1730              	.LVL192:
 1731              		.loc 1 428 5 is_stmt 0 view .LVU563
 1732 0040 8B455C   		movl	92(%rbp), %eax
 1733              		.loc 1 428 26 view .LVU564
 1734 0043 488B5D68 		movq	104(%rbp), %rbx
 1735              	.LVL193:
 1736              		.loc 1 428 46 is_stmt 1 view .LVU565
 1737              		.loc 1 428 5 is_stmt 0 view .LVU566
 1738 0047 4531E4   		xorl	%r12d, %r12d
 1739 004a 85C0     		testl	%eax, %eax
 1740 004c 7E54     		jle	.L136
 1741              	.LVL194:
 1742 004e 6690     		.p2align 4,,10
 1743              		.p2align 3
 1744              	.L138:
 429:fltk-1.3.4-1/jpeg/jccoefct.c **** 	 ci++, compptr++) {
 430:fltk-1.3.4-1/jpeg/jccoefct.c ****       coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 1745              		.loc 1 430 7 is_stmt 1 view .LVU567
 431:fltk-1.3.4-1/jpeg/jccoefct.c **** 	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
 432:fltk-1.3.4-1/jpeg/jccoefct.c **** 	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 433:fltk-1.3.4-1/jpeg/jccoefct.c **** 				(long) compptr->h_samp_factor),
 434:fltk-1.3.4-1/jpeg/jccoefct.c **** 	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 435:fltk-1.3.4-1/jpeg/jccoefct.c **** 				(long) compptr->v_samp_factor),
 436:fltk-1.3.4-1/jpeg/jccoefct.c **** 	 (JDIMENSION) compptr->v_samp_factor);
 1746              		.loc 1 436 23 is_stmt 0 view .LVU568
 1747 0050 4863730C 		movslq	12(%rbx), %rsi
 434:fltk-1.3.4-1/jpeg/jccoefct.c **** 				(long) compptr->v_samp_factor),
 1748              		.loc 1 434 16 view .LVU569
 1749 0054 8B7B20   		movl	32(%rbx), %edi
 429:fltk-1.3.4-1/jpeg/jccoefct.c **** 	 ci++, compptr++) {
 1750              		.loc 1 429 16 view .LVU570
 1751 0057 4883C360 		addq	$96, %rbx
 1752              	.LVL195:
 430:fltk-1.3.4-1/jpeg/jccoefct.c **** 	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
 1753              		.loc 1 430 32 view .LVU571
 1754 005b 488B4508 		movq	8(%rbp), %rax
 434:fltk-1.3.4-1/jpeg/jccoefct.c **** 				(long) compptr->v_samp_factor),
 1755              		.loc 1 434 16 view .LVU572
 1756 005f 8974240C 		movl	%esi, 12(%rsp)
 430:fltk-1.3.4-1/jpeg/jccoefct.c **** 	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
 1757              		.loc 1 430 32 view .LVU573
 1758 0063 4C8B7828 		movq	40(%rax), %r15
 434:fltk-1.3.4-1/jpeg/jccoefct.c **** 				(long) compptr->v_samp_factor),
 1759              		.loc 1 434 16 view .LVU574
 1760 0067 E8000000 		call	jround_up@PLT
 1760      00
 1761              	.LVL196:
 432:fltk-1.3.4-1/jpeg/jccoefct.c **** 				(long) compptr->h_samp_factor),
 1762              		.loc 1 432 16 view .LVU575
 1763 006c 486373A8 		movslq	-88(%rbx), %rsi
 1764 0070 8B7BBC   		movl	-68(%rbx), %edi
 434:fltk-1.3.4-1/jpeg/jccoefct.c **** 				(long) compptr->v_samp_factor),
 1765              		.loc 1 434 16 view .LVU576
 1766 0073 4989C6   		movq	%rax, %r14
 432:fltk-1.3.4-1/jpeg/jccoefct.c **** 				(long) compptr->h_samp_factor),
 1767              		.loc 1 432 16 view .LVU577
 1768 0076 E8000000 		call	jround_up@PLT
 1768      00
 1769              	.LVL197:
 430:fltk-1.3.4-1/jpeg/jccoefct.c **** 	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
 1770              		.loc 1 430 32 view .LVU578
 1771 007b 448B4C24 		movl	12(%rsp), %r9d
 1771      0C
 1772 0080 4589F0   		movl	%r14d, %r8d
 1773 0083 31D2     		xorl	%edx, %edx
 432:fltk-1.3.4-1/jpeg/jccoefct.c **** 				(long) compptr->h_samp_factor),
 1774              		.loc 1 432 16 view .LVU579
 1775 0085 4889C1   		movq	%rax, %rcx
 430:fltk-1.3.4-1/jpeg/jccoefct.c **** 	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
 1776              		.loc 1 430 32 view .LVU580
 1777 0088 BE010000 		movl	$1, %esi
 1777      00
 1778 008d 4889EF   		movq	%rbp, %rdi
 1779 0090 41FFD7   		call	*%r15
 1780              	.LVL198:
 430:fltk-1.3.4-1/jpeg/jccoefct.c **** 	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
 1781              		.loc 1 430 29 view .LVU581
 1782 0093 4B8944E5 		movq	%rax, 112(%r13,%r12,8)
 1782      70
 429:fltk-1.3.4-1/jpeg/jccoefct.c ****       coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 1783              		.loc 1 429 3 is_stmt 1 view .LVU582
 1784              	.LVL199:
 428:fltk-1.3.4-1/jpeg/jccoefct.c **** 	 ci++, compptr++) {
 1785              		.loc 1 428 46 view .LVU583
 1786 0098 4983C401 		addq	$1, %r12
 1787              	.LVL200:
 428:fltk-1.3.4-1/jpeg/jccoefct.c **** 	 ci++, compptr++) {
 1788              		.loc 1 428 5 is_stmt 0 view .LVU584
 1789 009c 4439655C 		cmpl	%r12d, 92(%rbp)
 1790 00a0 7FAE     		jg	.L138
 1791              	.L136:
 428:fltk-1.3.4-1/jpeg/jccoefct.c **** 	 ci++, compptr++) {
 1792              		.loc 1 428 5 view .LVU585
 1793              	.LBE56:
 437:fltk-1.3.4-1/jpeg/jccoefct.c ****     }
 438:fltk-1.3.4-1/jpeg/jccoefct.c **** #else
 439:fltk-1.3.4-1/jpeg/jccoefct.c ****     ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 440:fltk-1.3.4-1/jpeg/jccoefct.c **** #endif
 441:fltk-1.3.4-1/jpeg/jccoefct.c ****   } else {
 442:fltk-1.3.4-1/jpeg/jccoefct.c ****     /* We only need a single-MCU buffer. */
 443:fltk-1.3.4-1/jpeg/jccoefct.c ****     JBLOCKROW buffer;
 444:fltk-1.3.4-1/jpeg/jccoefct.c ****     int i;
 445:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 446:fltk-1.3.4-1/jpeg/jccoefct.c ****     buffer = (JBLOCKROW)
 447:fltk-1.3.4-1/jpeg/jccoefct.c ****       (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 448:fltk-1.3.4-1/jpeg/jccoefct.c **** 				  C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
 449:fltk-1.3.4-1/jpeg/jccoefct.c ****     for (i = 0; i < C_MAX_BLOCKS_IN_MCU; i++) {
 450:fltk-1.3.4-1/jpeg/jccoefct.c ****       coef->MCU_buffer[i] = buffer + i;
 451:fltk-1.3.4-1/jpeg/jccoefct.c ****     }
 452:fltk-1.3.4-1/jpeg/jccoefct.c ****     coef->whole_image[0] = NULL; /* flag for no virtual arrays */
 453:fltk-1.3.4-1/jpeg/jccoefct.c ****   }
 454:fltk-1.3.4-1/jpeg/jccoefct.c **** }
 1794              		.loc 1 454 1 view .LVU586
 1795 00a2 4883C418 		addq	$24, %rsp
 1796              		.cfi_remember_state
 1797              		.cfi_def_cfa_offset 56
 1798 00a6 5B       		popq	%rbx
 1799              		.cfi_def_cfa_offset 48
 1800              	.LVL201:
 1801              		.loc 1 454 1 view .LVU587
 1802 00a7 5D       		popq	%rbp
 1803              		.cfi_def_cfa_offset 40
 1804              	.LVL202:
 1805              		.loc 1 454 1 view .LVU588
 1806 00a8 415C     		popq	%r12
 1807              		.cfi_def_cfa_offset 32
 1808 00aa 415D     		popq	%r13
 1809              		.cfi_def_cfa_offset 24
 1810              	.LVL203:
 1811              		.loc 1 454 1 view .LVU589
 1812 00ac 415E     		popq	%r14
 1813              		.cfi_def_cfa_offset 16
 1814 00ae 415F     		popq	%r15
 1815              		.cfi_def_cfa_offset 8
 1816 00b0 C3       		ret
 1817              	.LVL204:
 1818              		.p2align 4,,10
 1819 00b1 0F1F8000 		.p2align 3
 1819      000000
 1820              	.L137:
 1821              		.cfi_restore_state
 1822              	.LBB57:
 443:fltk-1.3.4-1/jpeg/jccoefct.c ****     int i;
 1823              		.loc 1 443 5 is_stmt 1 view .LVU590
 444:fltk-1.3.4-1/jpeg/jccoefct.c **** 
 1824              		.loc 1 444 5 view .LVU591
 446:fltk-1.3.4-1/jpeg/jccoefct.c ****       (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1825              		.loc 1 446 5 view .LVU592
 447:fltk-1.3.4-1/jpeg/jccoefct.c **** 				  C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
 1826              		.loc 1 447 8 is_stmt 0 view .LVU593
 1827 00b8 488B4508 		movq	8(%rbp), %rax
 1828 00bc BA000500 		movl	$1280, %edx
 1828      00
 1829 00c1 BE010000 		movl	$1, %esi
 1829      00
 1830 00c6 4889EF   		movq	%rbp, %rdi
 1831 00c9 FF5008   		call	*8(%rax)
 1832              	.LVL205:
 449:fltk-1.3.4-1/jpeg/jccoefct.c ****       coef->MCU_buffer[i] = buffer + i;
 1833              		.loc 1 449 5 is_stmt 1 view .LVU594
 449:fltk-1.3.4-1/jpeg/jccoefct.c ****       coef->MCU_buffer[i] = buffer + i;
 1834              		.loc 1 449 17 view .LVU595
 1835 00cc 498D5520 		leaq	32(%r13), %rdx
 1836 00d0 488D8800 		leaq	1280(%rax), %rcx
 1836      050000
 1837              	.LVL206:
 1838 00d7 660F1F84 		.p2align 4,,10
 1838      00000000 
 1838      00
 1839              		.p2align 3
 1840              	.L141:
 450:fltk-1.3.4-1/jpeg/jccoefct.c ****     }
 1841              		.loc 1 450 7 discriminator 3 view .LVU596
 450:fltk-1.3.4-1/jpeg/jccoefct.c ****     }
 1842              		.loc 1 450 27 is_stmt 0 discriminator 3 view .LVU597
 1843 00e0 488902   		movq	%rax, (%rdx)
 449:fltk-1.3.4-1/jpeg/jccoefct.c ****       coef->MCU_buffer[i] = buffer + i;
 1844              		.loc 1 449 42 is_stmt 1 discriminator 3 view .LVU598
 449:fltk-1.3.4-1/jpeg/jccoefct.c ****       coef->MCU_buffer[i] = buffer + i;
 1845              		.loc 1 449 17 discriminator 3 view .LVU599
 1846 00e3 4883E880 		subq	$-128, %rax
 1847 00e7 4883C208 		addq	$8, %rdx
 449:fltk-1.3.4-1/jpeg/jccoefct.c ****       coef->MCU_buffer[i] = buffer + i;
 1848              		.loc 1 449 5 is_stmt 0 discriminator 3 view .LVU600
 1849 00eb 4839C8   		cmpq	%rcx, %rax
 1850 00ee 75F0     		jne	.L141
 452:fltk-1.3.4-1/jpeg/jccoefct.c ****   }
 1851              		.loc 1 452 5 is_stmt 1 view .LVU601
 452:fltk-1.3.4-1/jpeg/jccoefct.c ****   }
 1852              		.loc 1 452 26 is_stmt 0 view .LVU602
 1853 00f0 49C74570 		movq	$0, 112(%r13)
 1853      00000000 
 1854              	.LBE57:
 1855              		.loc 1 454 1 view .LVU603
 1856 00f8 4883C418 		addq	$24, %rsp
 1857              		.cfi_def_cfa_offset 56
 1858 00fc 5B       		popq	%rbx
 1859              		.cfi_def_cfa_offset 48
 1860              	.LVL207:
 1861              		.loc 1 454 1 view .LVU604
 1862 00fd 5D       		popq	%rbp
 1863              		.cfi_def_cfa_offset 40
 1864              	.LVL208:
 1865              		.loc 1 454 1 view .LVU605
 1866 00fe 415C     		popq	%r12
 1867              		.cfi_def_cfa_offset 32
 1868 0100 415D     		popq	%r13
 1869              		.cfi_def_cfa_offset 24
 1870              	.LVL209:
 1871              		.loc 1 454 1 view .LVU606
 1872 0102 415E     		popq	%r14
 1873              		.cfi_def_cfa_offset 16
 1874 0104 415F     		popq	%r15
 1875              		.cfi_def_cfa_offset 8
 1876 0106 C3       		ret
 1877              		.cfi_endproc
 1878              	.LFE56:
 1880              		.text
 1881              	.Letext0:
 1882              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 1883              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 1884              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 1885              		.file 6 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 1886              		.file 7 "/usr/include/stdio.h"
 1887              		.file 8 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 1888              		.file 9 "fltk-1.3.4-1/jpeg/jmorecfg.h"
 1889              		.file 10 "fltk-1.3.4-1/jpeg/jpeglib.h"
 1890              		.file 11 "fltk-1.3.4-1/jpeg/jpegint.h"
 1891              		.file 12 "fltk-1.3.4-1/jpeg/jerror.h"
 1892              		.file 13 "<built-in>"
 16096              		.section	.note.gnu.property,"a"
 16097              		.align 8
 16098 0000 04000000 		.long	 1f - 0f
 16099 0004 10000000 		.long	 4f - 1f
 16100 0008 05000000 		.long	 5
 16101              	0:
 16102 000c 474E5500 		.string	 "GNU"
 16103              	1:
 16104              		.align 8
 16105 0010 020000C0 		.long	 0xc0000002
 16106 0014 04000000 		.long	 3f - 2f
 16107              	2:
 16108 0018 03000000 		.long	 0x3
 16109              	3:
 16110 001c 00000000 		.align 8
 16111              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 jccoefct.c
     /tmp/cc22Wcwu.s:7      .text.start_pass_coef:0000000000000000 start_pass_coef
     /tmp/cc22Wcwu.s:221    .text.compress_output:0000000000000000 compress_output
     /tmp/cc22Wcwu.s:586    .text.compress_data:0000000000000000 compress_data
     /tmp/cc22Wcwu.s:1149   .text.compress_first_pass:0000000000000000 compress_first_pass
     /tmp/cc22Wcwu.s:1667   .text.jinit_c_coef_controller:0000000000000000 jinit_c_coef_controller
                           .group:0000000000000000 wm4.0.a6b23a418548ac0bda5d8549c4a2ec91
                           .group:0000000000000000 wm4.stdcpredef.h.19.8dc41bed5d9037ff9622e015fb5f0ce3
                           .group:0000000000000000 wm4.jconfig.h.10.247fc3ff67998f3074970b1373c70333
                           .group:0000000000000000 wm4.features.h.19.5b5f5a19624a0527f479fdc52d54808f
                           .group:0000000000000000 wm4.cdefs.h.19.98d80eddbb3f64f4f30cd9aee9c5593c
                           .group:0000000000000000 wm4.wordsize.h.4.baf119258a1e53d8dba67ceac44ab6bc
                           .group:0000000000000000 wm4.cdefs.h.475.fb75d2e4416aa349344e6f45f683bf28
                           .group:0000000000000000 wm4.stubs64.h.10.6ce4c34010988db072c080326a6b6319
                           .group:0000000000000000 wm4.libcheaderstart.h.37.d9274df4cc0172452960ad9644fa5579
                           .group:0000000000000000 wm4.stdlib.h.28.2cffa49d94c5d85f4538f55f7b59771d
                           .group:0000000000000000 wm4.stddef.h.181.13772e73e5434e8cc4fafaaddad2b5da
                           .group:0000000000000000 wm4.waitflags.h.25.41934de4af99038521c2782f418699b1
                           .group:0000000000000000 wm4.waitstatus.h.28.93f167f49d64e2b9b99f98d1162a93bf
                           .group:0000000000000000 wm4.stdlib.h.43.9fa4f727a2f1cb8d2450a574c9195553
                           .group:0000000000000000 wm4.floatn.h.20.80c7cf8a8dfad237004b28d051d5afda
                           .group:0000000000000000 wm4.floatncommon.h.34.7e1840d7dfb19e9bdb51aeb077d76637
                           .group:0000000000000000 wm4.stdlib.h.71.2927e068ec678159b4f68ec2f089f7e6
                           .group:0000000000000000 wm4.types.h.109.56eb9ae966b255288cc544f18746a7ff
                           .group:0000000000000000 wm4.typesizes.h.24.2c64f817c0dc4b6fb2a2c619d717be26
                           .group:0000000000000000 wm4.time64.h.24.a8166ae916ec910dab0d8987098d42ee
                           .group:0000000000000000 wm4.types.h.40.18f72bab8242c2bb4c532a2aa95b5f00
                           .group:0000000000000000 wm4.stddef.h.231.0adce5c8c1fd8096aaff50981b3d1f0f
                           .group:0000000000000000 wm4.endian.h.20.efabd1018df5d7b4052c27dc6bdd5ce5
                           .group:0000000000000000 wm4.endianness.h.2.2c6a211f7909f3af5e9e9cfa3b6b63c8
                           .group:0000000000000000 wm4.endian.h.40.9e5d395adda2f4eb53ae69b69b664084
                           .group:0000000000000000 wm4.endian.h.27.4c4f94262c4eaee2982fe00ed1b4f173
                           .group:0000000000000000 wm4.byteswap.h.24.5363c019348146aada5aeadf51456576
                           .group:0000000000000000 wm4.endian.h.39.30a606dbd99b6c3df61c1f06dbdabd4e
                           .group:0000000000000000 wm4.select.h.28.eb2f3debdbcffd1442ebddaebc4fb6ff
                           .group:0000000000000000 wm4.__sigset_t.h.2.6b1ab6ff3d7b8fd9c0c42b0d80afbd80
                           .group:0000000000000000 wm4.select.h.44.887a4ff60aa97fcd9c1be017735e1675
                           .group:0000000000000000 wm4.select2.h.27.f95f2ab0ffee66dc1b6575014894b21a
                           .group:0000000000000000 wm4.types.h.186.489a4ed8f2d29cd358843490f54ddea5
                           .group:0000000000000000 wm4.pthreadtypesarch.h.25.6063cba99664c916e22d3a912bcc348a
                           .group:0000000000000000 wm4.struct_mutex.h.20.ed51f515172b9be99e450ba83eb5dd99
                           .group:0000000000000000 wm4.struct_rwlock.h.21.0254880f2904e3833fb8ae683e0f0330
                           .group:0000000000000000 wm4.alloca.h.19.edefa922a76c1cbaaf1e416903ba2d1c
                           .group:0000000000000000 wm4.alloca.h.29.156e12058824cc23d961c4d3b13031f6
                           .group:0000000000000000 wm4.stdio.h.24.5c1b97eef3c86b7a2549420f69f4f128
                           .group:0000000000000000 wm4.libcheaderstart.h.31.87b3c285aeba93fe355ad19123070832
                           .group:0000000000000000 wm4.stdio.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.stddef.h.231.8136eebbab3406dbf57a7ec475dd5d83
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.struct_FILE.h.19.0888ac70396abe1031c03d393554032f
                           .group:0000000000000000 wm4.stdio.h.53.139e45cf040c0964b2932c0c1bdaf6b2
                           .group:0000000000000000 wm4.stdio_lim.h.19.e4b00b560d878dcfbc6635b3406640c5
                           .group:0000000000000000 wm4.stdio.h.141.d7a290e19ca077c9e4aa7c43ede17a73
                           .group:0000000000000000 wm4.stdio.h.20.b0caa08e5723aa5941367be0e5d2ec59
                           .group:0000000000000000 wm4.stdio2.h.20.f45a0373b68e1296c4aa8cc09d66a9df
                           .group:0000000000000000 wm4.string.h.23.93403f89af7dba8212345449bb14b09d
                           .group:0000000000000000 wm4.string.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.strings.h.19.a259f126920b1bb5ef76bc62b3984a3c
                           .group:0000000000000000 wm4.jinclude.h.67.b19f941ec97c4845fa4609292c7e2db4
                           .group:0000000000000000 wm4.jmorecfg.h.33.3b4c5f9cc07b3737823b06caf24d5b05
                           .group:0000000000000000 wm4.jpeglib.h.40.4f111c27252a38df39328d65454e82f4
                           .group:0000000000000000 wm4.jpegint.h.26.5219ef5d4e4921371d38e77b6091fd20
                           .group:0000000000000000 wm4.jerror.h.25.1dbd8674e70ab5215bc0037320e5c2a2

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
__stack_chk_fail
memset
jround_up
