   1              		.file	"jutils.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.unlikely.jdiv_round_up,"ax",@progbits
   5              	.LCOLDB0:
   6              		.section	.text.jdiv_round_up,"ax",@progbits
   7              	.LHOTB0:
   8              		.p2align 4,,15
   9              		.section	.text.unlikely.jdiv_round_up
  10              	.Ltext_cold0:
  11              		.section	.text.jdiv_round_up
  12              		.globl	jdiv_round_up
  14              	jdiv_round_up:
  15              	.LFB61:
  16              		.file 1 "fltk-1.3.4-1/jpeg/jutils.c"
   1:fltk-1.3.4-1/jpeg/jutils.c **** /*
   2:fltk-1.3.4-1/jpeg/jutils.c ****  * jutils.c
   3:fltk-1.3.4-1/jpeg/jutils.c ****  *
   4:fltk-1.3.4-1/jpeg/jutils.c ****  * Copyright (C) 1991-1996, Thomas G. Lane.
   5:fltk-1.3.4-1/jpeg/jutils.c ****  * Modified 2009-2011 by Guido Vollbeding.
   6:fltk-1.3.4-1/jpeg/jutils.c ****  * This file is part of the Independent JPEG Group's software.
   7:fltk-1.3.4-1/jpeg/jutils.c ****  * For conditions of distribution and use, see the accompanying README file.
   8:fltk-1.3.4-1/jpeg/jutils.c ****  *
   9:fltk-1.3.4-1/jpeg/jutils.c ****  * This file contains tables and miscellaneous utility routines needed
  10:fltk-1.3.4-1/jpeg/jutils.c ****  * for both compression and decompression.
  11:fltk-1.3.4-1/jpeg/jutils.c ****  * Note we prefix all global names with "j" to minimize conflicts with
  12:fltk-1.3.4-1/jpeg/jutils.c ****  * a surrounding application.
  13:fltk-1.3.4-1/jpeg/jutils.c ****  */
  14:fltk-1.3.4-1/jpeg/jutils.c **** 
  15:fltk-1.3.4-1/jpeg/jutils.c **** #define JPEG_INTERNALS
  16:fltk-1.3.4-1/jpeg/jutils.c **** #include "jinclude.h"
  17:fltk-1.3.4-1/jpeg/jutils.c **** #include "jpeglib.h"
  18:fltk-1.3.4-1/jpeg/jutils.c **** 
  19:fltk-1.3.4-1/jpeg/jutils.c **** 
  20:fltk-1.3.4-1/jpeg/jutils.c **** /*
  21:fltk-1.3.4-1/jpeg/jutils.c ****  * jpeg_zigzag_order[i] is the zigzag-order position of the i'th element
  22:fltk-1.3.4-1/jpeg/jutils.c ****  * of a DCT block read in natural order (left to right, top to bottom).
  23:fltk-1.3.4-1/jpeg/jutils.c ****  */
  24:fltk-1.3.4-1/jpeg/jutils.c **** 
  25:fltk-1.3.4-1/jpeg/jutils.c **** #if 0				/* This table is not actually needed in v6a */
  26:fltk-1.3.4-1/jpeg/jutils.c **** 
  27:fltk-1.3.4-1/jpeg/jutils.c **** const int jpeg_zigzag_order[DCTSIZE2] = {
  28:fltk-1.3.4-1/jpeg/jutils.c ****    0,  1,  5,  6, 14, 15, 27, 28,
  29:fltk-1.3.4-1/jpeg/jutils.c ****    2,  4,  7, 13, 16, 26, 29, 42,
  30:fltk-1.3.4-1/jpeg/jutils.c ****    3,  8, 12, 17, 25, 30, 41, 43,
  31:fltk-1.3.4-1/jpeg/jutils.c ****    9, 11, 18, 24, 31, 40, 44, 53,
  32:fltk-1.3.4-1/jpeg/jutils.c ****   10, 19, 23, 32, 39, 45, 52, 54,
  33:fltk-1.3.4-1/jpeg/jutils.c ****   20, 22, 33, 38, 46, 51, 55, 60,
  34:fltk-1.3.4-1/jpeg/jutils.c ****   21, 34, 37, 47, 50, 56, 59, 61,
  35:fltk-1.3.4-1/jpeg/jutils.c ****   35, 36, 48, 49, 57, 58, 62, 63
  36:fltk-1.3.4-1/jpeg/jutils.c **** };
  37:fltk-1.3.4-1/jpeg/jutils.c **** 
  38:fltk-1.3.4-1/jpeg/jutils.c **** #endif
  39:fltk-1.3.4-1/jpeg/jutils.c **** 
  40:fltk-1.3.4-1/jpeg/jutils.c **** /*
  41:fltk-1.3.4-1/jpeg/jutils.c ****  * jpeg_natural_order[i] is the natural-order position of the i'th element
  42:fltk-1.3.4-1/jpeg/jutils.c ****  * of zigzag order.
  43:fltk-1.3.4-1/jpeg/jutils.c ****  *
  44:fltk-1.3.4-1/jpeg/jutils.c ****  * When reading corrupted data, the Huffman decoders could attempt
  45:fltk-1.3.4-1/jpeg/jutils.c ****  * to reference an entry beyond the end of this array (if the decoded
  46:fltk-1.3.4-1/jpeg/jutils.c ****  * zero run length reaches past the end of the block).  To prevent
  47:fltk-1.3.4-1/jpeg/jutils.c ****  * wild stores without adding an inner-loop test, we put some extra
  48:fltk-1.3.4-1/jpeg/jutils.c ****  * "63"s after the real entries.  This will cause the extra coefficient
  49:fltk-1.3.4-1/jpeg/jutils.c ****  * to be stored in location 63 of the block, not somewhere random.
  50:fltk-1.3.4-1/jpeg/jutils.c ****  * The worst case would be a run-length of 15, which means we need 16
  51:fltk-1.3.4-1/jpeg/jutils.c ****  * fake entries.
  52:fltk-1.3.4-1/jpeg/jutils.c ****  */
  53:fltk-1.3.4-1/jpeg/jutils.c **** 
  54:fltk-1.3.4-1/jpeg/jutils.c **** const int jpeg_natural_order[DCTSIZE2+16] = {
  55:fltk-1.3.4-1/jpeg/jutils.c ****   0,  1,  8, 16,  9,  2,  3, 10,
  56:fltk-1.3.4-1/jpeg/jutils.c ****  17, 24, 32, 25, 18, 11,  4,  5,
  57:fltk-1.3.4-1/jpeg/jutils.c ****  12, 19, 26, 33, 40, 48, 41, 34,
  58:fltk-1.3.4-1/jpeg/jutils.c ****  27, 20, 13,  6,  7, 14, 21, 28,
  59:fltk-1.3.4-1/jpeg/jutils.c ****  35, 42, 49, 56, 57, 50, 43, 36,
  60:fltk-1.3.4-1/jpeg/jutils.c ****  29, 22, 15, 23, 30, 37, 44, 51,
  61:fltk-1.3.4-1/jpeg/jutils.c ****  58, 59, 52, 45, 38, 31, 39, 46,
  62:fltk-1.3.4-1/jpeg/jutils.c ****  53, 60, 61, 54, 47, 55, 62, 63,
  63:fltk-1.3.4-1/jpeg/jutils.c ****  63, 63, 63, 63, 63, 63, 63, 63, /* extra entries for safety in decoder */
  64:fltk-1.3.4-1/jpeg/jutils.c ****  63, 63, 63, 63, 63, 63, 63, 63
  65:fltk-1.3.4-1/jpeg/jutils.c **** };
  66:fltk-1.3.4-1/jpeg/jutils.c **** 
  67:fltk-1.3.4-1/jpeg/jutils.c **** const int jpeg_natural_order7[7*7+16] = {
  68:fltk-1.3.4-1/jpeg/jutils.c ****   0,  1,  8, 16,  9,  2,  3, 10,
  69:fltk-1.3.4-1/jpeg/jutils.c ****  17, 24, 32, 25, 18, 11,  4,  5,
  70:fltk-1.3.4-1/jpeg/jutils.c ****  12, 19, 26, 33, 40, 48, 41, 34,
  71:fltk-1.3.4-1/jpeg/jutils.c ****  27, 20, 13,  6, 14, 21, 28, 35,
  72:fltk-1.3.4-1/jpeg/jutils.c ****  42, 49, 50, 43, 36, 29, 22, 30,
  73:fltk-1.3.4-1/jpeg/jutils.c ****  37, 44, 51, 52, 45, 38, 46, 53,
  74:fltk-1.3.4-1/jpeg/jutils.c ****  54,
  75:fltk-1.3.4-1/jpeg/jutils.c ****  63, 63, 63, 63, 63, 63, 63, 63, /* extra entries for safety in decoder */
  76:fltk-1.3.4-1/jpeg/jutils.c ****  63, 63, 63, 63, 63, 63, 63, 63
  77:fltk-1.3.4-1/jpeg/jutils.c **** };
  78:fltk-1.3.4-1/jpeg/jutils.c **** 
  79:fltk-1.3.4-1/jpeg/jutils.c **** const int jpeg_natural_order6[6*6+16] = {
  80:fltk-1.3.4-1/jpeg/jutils.c ****   0,  1,  8, 16,  9,  2,  3, 10,
  81:fltk-1.3.4-1/jpeg/jutils.c ****  17, 24, 32, 25, 18, 11,  4,  5,
  82:fltk-1.3.4-1/jpeg/jutils.c ****  12, 19, 26, 33, 40, 41, 34, 27,
  83:fltk-1.3.4-1/jpeg/jutils.c ****  20, 13, 21, 28, 35, 42, 43, 36,
  84:fltk-1.3.4-1/jpeg/jutils.c ****  29, 37, 44, 45,
  85:fltk-1.3.4-1/jpeg/jutils.c ****  63, 63, 63, 63, 63, 63, 63, 63, /* extra entries for safety in decoder */
  86:fltk-1.3.4-1/jpeg/jutils.c ****  63, 63, 63, 63, 63, 63, 63, 63
  87:fltk-1.3.4-1/jpeg/jutils.c **** };
  88:fltk-1.3.4-1/jpeg/jutils.c **** 
  89:fltk-1.3.4-1/jpeg/jutils.c **** const int jpeg_natural_order5[5*5+16] = {
  90:fltk-1.3.4-1/jpeg/jutils.c ****   0,  1,  8, 16,  9,  2,  3, 10,
  91:fltk-1.3.4-1/jpeg/jutils.c ****  17, 24, 32, 25, 18, 11,  4, 12,
  92:fltk-1.3.4-1/jpeg/jutils.c ****  19, 26, 33, 34, 27, 20, 28, 35,
  93:fltk-1.3.4-1/jpeg/jutils.c ****  36,
  94:fltk-1.3.4-1/jpeg/jutils.c ****  63, 63, 63, 63, 63, 63, 63, 63, /* extra entries for safety in decoder */
  95:fltk-1.3.4-1/jpeg/jutils.c ****  63, 63, 63, 63, 63, 63, 63, 63
  96:fltk-1.3.4-1/jpeg/jutils.c **** };
  97:fltk-1.3.4-1/jpeg/jutils.c **** 
  98:fltk-1.3.4-1/jpeg/jutils.c **** const int jpeg_natural_order4[4*4+16] = {
  99:fltk-1.3.4-1/jpeg/jutils.c ****   0,  1,  8, 16,  9,  2,  3, 10,
 100:fltk-1.3.4-1/jpeg/jutils.c ****  17, 24, 25, 18, 11, 19, 26, 27,
 101:fltk-1.3.4-1/jpeg/jutils.c ****  63, 63, 63, 63, 63, 63, 63, 63, /* extra entries for safety in decoder */
 102:fltk-1.3.4-1/jpeg/jutils.c ****  63, 63, 63, 63, 63, 63, 63, 63
 103:fltk-1.3.4-1/jpeg/jutils.c **** };
 104:fltk-1.3.4-1/jpeg/jutils.c **** 
 105:fltk-1.3.4-1/jpeg/jutils.c **** const int jpeg_natural_order3[3*3+16] = {
 106:fltk-1.3.4-1/jpeg/jutils.c ****   0,  1,  8, 16,  9,  2, 10, 17,
 107:fltk-1.3.4-1/jpeg/jutils.c ****  18,
 108:fltk-1.3.4-1/jpeg/jutils.c ****  63, 63, 63, 63, 63, 63, 63, 63, /* extra entries for safety in decoder */
 109:fltk-1.3.4-1/jpeg/jutils.c ****  63, 63, 63, 63, 63, 63, 63, 63
 110:fltk-1.3.4-1/jpeg/jutils.c **** };
 111:fltk-1.3.4-1/jpeg/jutils.c **** 
 112:fltk-1.3.4-1/jpeg/jutils.c **** const int jpeg_natural_order2[2*2+16] = {
 113:fltk-1.3.4-1/jpeg/jutils.c ****   0,  1,  8,  9,
 114:fltk-1.3.4-1/jpeg/jutils.c ****  63, 63, 63, 63, 63, 63, 63, 63, /* extra entries for safety in decoder */
 115:fltk-1.3.4-1/jpeg/jutils.c ****  63, 63, 63, 63, 63, 63, 63, 63
 116:fltk-1.3.4-1/jpeg/jutils.c **** };
 117:fltk-1.3.4-1/jpeg/jutils.c **** 
 118:fltk-1.3.4-1/jpeg/jutils.c **** 
 119:fltk-1.3.4-1/jpeg/jutils.c **** /*
 120:fltk-1.3.4-1/jpeg/jutils.c ****  * Arithmetic utilities
 121:fltk-1.3.4-1/jpeg/jutils.c ****  */
 122:fltk-1.3.4-1/jpeg/jutils.c **** 
 123:fltk-1.3.4-1/jpeg/jutils.c **** GLOBAL(long)
 124:fltk-1.3.4-1/jpeg/jutils.c **** jdiv_round_up (long a, long b)
 125:fltk-1.3.4-1/jpeg/jutils.c **** /* Compute a/b rounded up to next integer, ie, ceil(a/b) */
 126:fltk-1.3.4-1/jpeg/jutils.c **** /* Assumes a >= 0, b > 0 */
 127:fltk-1.3.4-1/jpeg/jutils.c **** {
  17              		.loc 1 127 0
  18              		.cfi_startproc
  19              	.LVL0:
 128:fltk-1.3.4-1/jpeg/jutils.c ****   return (a + b - 1L) / b;
  20              		.loc 1 128 0
  21 0000 488D4437 		leaq	-1(%rdi,%rsi), %rax
  21      FF
  22 0005 4899     		cqto
  23 0007 48F7FE   		idivq	%rsi
 129:fltk-1.3.4-1/jpeg/jutils.c **** }
  24              		.loc 1 129 0
  25 000a C3       		ret
  26              		.cfi_endproc
  27              	.LFE61:
  29              		.section	.text.unlikely.jdiv_round_up
  30              	.LCOLDE0:
  31              		.section	.text.jdiv_round_up
  32              	.LHOTE0:
  33              		.section	.text.unlikely.jround_up,"ax",@progbits
  34              	.LCOLDB1:
  35              		.section	.text.jround_up,"ax",@progbits
  36              	.LHOTB1:
  37              		.p2align 4,,15
  38              		.globl	jround_up
  40              	jround_up:
  41              	.LFB62:
 130:fltk-1.3.4-1/jpeg/jutils.c **** 
 131:fltk-1.3.4-1/jpeg/jutils.c **** 
 132:fltk-1.3.4-1/jpeg/jutils.c **** GLOBAL(long)
 133:fltk-1.3.4-1/jpeg/jutils.c **** jround_up (long a, long b)
 134:fltk-1.3.4-1/jpeg/jutils.c **** /* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
 135:fltk-1.3.4-1/jpeg/jutils.c **** /* Assumes a >= 0, b > 0 */
 136:fltk-1.3.4-1/jpeg/jutils.c **** {
  42              		.loc 1 136 0
  43              		.cfi_startproc
  44              	.LVL1:
 137:fltk-1.3.4-1/jpeg/jutils.c ****   a += b - 1L;
  45              		.loc 1 137 0
  46 0000 488D4C37 		leaq	-1(%rdi,%rsi), %rcx
  46      FF
  47              	.LVL2:
 138:fltk-1.3.4-1/jpeg/jutils.c ****   return a - (a % b);
  48              		.loc 1 138 0
  49 0005 4889C8   		movq	%rcx, %rax
  50 0008 4899     		cqto
  51 000a 48F7FE   		idivq	%rsi
  52 000d 4889C8   		movq	%rcx, %rax
  53 0010 4829D0   		subq	%rdx, %rax
 139:fltk-1.3.4-1/jpeg/jutils.c **** }
  54              		.loc 1 139 0
  55 0013 C3       		ret
  56              		.cfi_endproc
  57              	.LFE62:
  59              		.section	.text.unlikely.jround_up
  60              	.LCOLDE1:
  61              		.section	.text.jround_up
  62              	.LHOTE1:
  63              		.section	.text.unlikely.jcopy_sample_rows,"ax",@progbits
  64              	.LCOLDB2:
  65              		.section	.text.jcopy_sample_rows,"ax",@progbits
  66              	.LHOTB2:
  67              		.p2align 4,,15
  68              		.globl	jcopy_sample_rows
  70              	jcopy_sample_rows:
  71              	.LFB63:
 140:fltk-1.3.4-1/jpeg/jutils.c **** 
 141:fltk-1.3.4-1/jpeg/jutils.c **** 
 142:fltk-1.3.4-1/jpeg/jutils.c **** /* On normal machines we can apply MEMCOPY() and MEMZERO() to sample arrays
 143:fltk-1.3.4-1/jpeg/jutils.c ****  * and coefficient-block arrays.  This won't work on 80x86 because the arrays
 144:fltk-1.3.4-1/jpeg/jutils.c ****  * are FAR and we're assuming a small-pointer memory model.  However, some
 145:fltk-1.3.4-1/jpeg/jutils.c ****  * DOS compilers provide far-pointer versions of memcpy() and memset() even
 146:fltk-1.3.4-1/jpeg/jutils.c ****  * in the small-model libraries.  These will be used if USE_FMEM is defined.
 147:fltk-1.3.4-1/jpeg/jutils.c ****  * Otherwise, the routines below do it the hard way.  (The performance cost
 148:fltk-1.3.4-1/jpeg/jutils.c ****  * is not all that great, because these routines aren't very heavily used.)
 149:fltk-1.3.4-1/jpeg/jutils.c ****  */
 150:fltk-1.3.4-1/jpeg/jutils.c **** 
 151:fltk-1.3.4-1/jpeg/jutils.c **** #ifndef NEED_FAR_POINTERS	/* normal case, same as regular macro */
 152:fltk-1.3.4-1/jpeg/jutils.c **** #define FMEMCOPY(dest,src,size)	MEMCOPY(dest,src,size)
 153:fltk-1.3.4-1/jpeg/jutils.c **** #else				/* 80x86 case, define if we can */
 154:fltk-1.3.4-1/jpeg/jutils.c **** #ifdef USE_FMEM
 155:fltk-1.3.4-1/jpeg/jutils.c **** #define FMEMCOPY(dest,src,size)	_fmemcpy((void FAR *)(dest), (const void FAR *)(src), (size_t)(size
 156:fltk-1.3.4-1/jpeg/jutils.c **** #else
 157:fltk-1.3.4-1/jpeg/jutils.c **** /* This function is for use by the FMEMZERO macro defined in jpegint.h.
 158:fltk-1.3.4-1/jpeg/jutils.c ****  * Do not call this function directly, use the FMEMZERO macro instead.
 159:fltk-1.3.4-1/jpeg/jutils.c ****  */
 160:fltk-1.3.4-1/jpeg/jutils.c **** GLOBAL(void)
 161:fltk-1.3.4-1/jpeg/jutils.c **** jzero_far (void FAR * target, size_t bytestozero)
 162:fltk-1.3.4-1/jpeg/jutils.c **** /* Zero out a chunk of FAR memory. */
 163:fltk-1.3.4-1/jpeg/jutils.c **** /* This might be sample-array data, block-array data, or alloc_large data. */
 164:fltk-1.3.4-1/jpeg/jutils.c **** {
 165:fltk-1.3.4-1/jpeg/jutils.c ****   register char FAR * ptr = (char FAR *) target;
 166:fltk-1.3.4-1/jpeg/jutils.c ****   register size_t count;
 167:fltk-1.3.4-1/jpeg/jutils.c **** 
 168:fltk-1.3.4-1/jpeg/jutils.c ****   for (count = bytestozero; count > 0; count--) {
 169:fltk-1.3.4-1/jpeg/jutils.c ****     *ptr++ = 0;
 170:fltk-1.3.4-1/jpeg/jutils.c ****   }
 171:fltk-1.3.4-1/jpeg/jutils.c **** }
 172:fltk-1.3.4-1/jpeg/jutils.c **** #endif
 173:fltk-1.3.4-1/jpeg/jutils.c **** #endif
 174:fltk-1.3.4-1/jpeg/jutils.c **** 
 175:fltk-1.3.4-1/jpeg/jutils.c **** 
 176:fltk-1.3.4-1/jpeg/jutils.c **** GLOBAL(void)
 177:fltk-1.3.4-1/jpeg/jutils.c **** jcopy_sample_rows (JSAMPARRAY input_array, int source_row,
 178:fltk-1.3.4-1/jpeg/jutils.c **** 		   JSAMPARRAY output_array, int dest_row,
 179:fltk-1.3.4-1/jpeg/jutils.c **** 		   int num_rows, JDIMENSION num_cols)
 180:fltk-1.3.4-1/jpeg/jutils.c **** /* Copy some rows of samples from one place to another.
 181:fltk-1.3.4-1/jpeg/jutils.c ****  * num_rows rows are copied from input_array[source_row++]
 182:fltk-1.3.4-1/jpeg/jutils.c ****  * to output_array[dest_row++]; these areas may overlap for duplication.
 183:fltk-1.3.4-1/jpeg/jutils.c ****  * The source and destination arrays must be at least as wide as num_cols.
 184:fltk-1.3.4-1/jpeg/jutils.c ****  */
 185:fltk-1.3.4-1/jpeg/jutils.c **** {
  72              		.loc 1 185 0
  73              		.cfi_startproc
  74              	.LVL3:
  75 0000 4155     		pushq	%r13
  76              		.cfi_def_cfa_offset 16
  77              		.cfi_offset 13, -16
 186:fltk-1.3.4-1/jpeg/jutils.c ****   register JSAMPROW inptr, outptr;
 187:fltk-1.3.4-1/jpeg/jutils.c **** #ifdef FMEMCOPY
 188:fltk-1.3.4-1/jpeg/jutils.c ****   register size_t count = (size_t) (num_cols * SIZEOF(JSAMPLE));
 189:fltk-1.3.4-1/jpeg/jutils.c **** #else
 190:fltk-1.3.4-1/jpeg/jutils.c ****   register JDIMENSION count;
 191:fltk-1.3.4-1/jpeg/jutils.c **** #endif
 192:fltk-1.3.4-1/jpeg/jutils.c ****   register int row;
 193:fltk-1.3.4-1/jpeg/jutils.c **** 
 194:fltk-1.3.4-1/jpeg/jutils.c ****   input_array += source_row;
  78              		.loc 1 194 0
  79 0002 4863F6   		movslq	%esi, %rsi
 185:fltk-1.3.4-1/jpeg/jutils.c ****   register JSAMPROW inptr, outptr;
  80              		.loc 1 185 0
  81 0005 4154     		pushq	%r12
  82              		.cfi_def_cfa_offset 24
  83              		.cfi_offset 12, -24
  84 0007 55       		pushq	%rbp
  85              		.cfi_def_cfa_offset 32
  86              		.cfi_offset 6, -32
  87 0008 53       		pushq	%rbx
  88              		.cfi_def_cfa_offset 40
  89              		.cfi_offset 3, -40
  90 0009 418D40FF 		leal	-1(%r8), %eax
  91              		.loc 1 194 0
  92 000d 488D1CF7 		leaq	(%rdi,%rsi,8), %rbx
  93              	.LVL4:
 195:fltk-1.3.4-1/jpeg/jutils.c ****   output_array += dest_row;
  94              		.loc 1 195 0
  95 0011 4863C9   		movslq	%ecx, %rcx
 185:fltk-1.3.4-1/jpeg/jutils.c ****   register JSAMPROW inptr, outptr;
  96              		.loc 1 185 0
  97 0014 4883EC08 		subq	$8, %rsp
  98              		.cfi_def_cfa_offset 48
 196:fltk-1.3.4-1/jpeg/jutils.c **** 
 197:fltk-1.3.4-1/jpeg/jutils.c ****   for (row = num_rows; row > 0; row--) {
  99              		.loc 1 197 0
 100 0018 4585C0   		testl	%r8d, %r8d
 195:fltk-1.3.4-1/jpeg/jutils.c ****   output_array += dest_row;
 101              		.loc 1 195 0
 102 001b 488D2CCA 		leaq	(%rdx,%rcx,8), %rbp
 103              	.LVL5:
 104 001f 4C8D64C3 		leaq	8(%rbx,%rax,8), %r12
 104      08
 105              		.loc 1 197 0
 106 0024 7E27     		jle	.L3
 107 0026 4589CD   		movl	%r9d, %r13d
 108              	.LVL6:
 109 0029 0F1F8000 		.p2align 4,,10
 109      000000
 110              		.p2align 3
 111              	.L5:
 198:fltk-1.3.4-1/jpeg/jutils.c ****     inptr = *input_array++;
 112              		.loc 1 198 0 discriminator 3
 113 0030 4883C308 		addq	$8, %rbx
 114              	.LVL7:
 199:fltk-1.3.4-1/jpeg/jutils.c ****     outptr = *output_array++;
 115              		.loc 1 199 0 discriminator 3
 116 0034 4883C508 		addq	$8, %rbp
 117              	.LVL8:
 118              	.LBB6:
 119              	.LBB7:
 120              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string3.h"
   1:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* Copyright (C) 2004-2016 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string3.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string3.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string3.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string3.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string3.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string3.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string3.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string3.h ****    <http://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef _STRING_H
  19:/usr/include/x86_64-linux-gnu/bits/string3.h **** # error "Never use <bits/string3.h> directly; include <string.h> instead."
  20:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  21:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  22:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  23:/usr/include/x86_64-linux-gnu/bits/string3.h **** __warndecl (__warn_memset_zero_len,
  24:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  25:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  26:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  27:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef __cplusplus
  28:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* XXX This is temporarily.  We should not redefine any of the symbols
  29:/usr/include/x86_64-linux-gnu/bits/string3.h ****    and instead integrate the error checking into the original
  30:/usr/include/x86_64-linux-gnu/bits/string3.h ****    definitions.  */
  31:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memcpy
  32:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memmove
  33:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memset
  34:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcat
  35:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcpy
  36:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncat
  37:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncpy
  38:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_GNU
  39:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef mempcpy
  40:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef stpcpy
  41:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  42:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_MISC
  43:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bcopy
  44:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bzero
  45:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  46:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  47:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  48:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  49:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  50:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  51:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	       size_t __len))
  52:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  53:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
 121              		.loc 2 53 0 discriminator 3
 122 0038 488B7DF8 		movq	-8(%rbp), %rdi
 123 003c 488B73F8 		movq	-8(%rbx), %rsi
 124 0040 4C89EA   		movq	%r13, %rdx
 125 0043 E8000000 		call	memcpy
 125      00
 126              	.LVL9:
 127              	.LBE7:
 128              	.LBE6:
 197:fltk-1.3.4-1/jpeg/jutils.c ****     inptr = *input_array++;
 129              		.loc 1 197 0 discriminator 3
 130 0048 4C39E3   		cmpq	%r12, %rbx
 131 004b 75E3     		jne	.L5
 132              	.LVL10:
 133              	.L3:
 200:fltk-1.3.4-1/jpeg/jutils.c **** #ifdef FMEMCOPY
 201:fltk-1.3.4-1/jpeg/jutils.c ****     FMEMCOPY(outptr, inptr, count);
 202:fltk-1.3.4-1/jpeg/jutils.c **** #else
 203:fltk-1.3.4-1/jpeg/jutils.c ****     for (count = num_cols; count > 0; count--)
 204:fltk-1.3.4-1/jpeg/jutils.c ****       *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
 205:fltk-1.3.4-1/jpeg/jutils.c **** #endif
 206:fltk-1.3.4-1/jpeg/jutils.c ****   }
 207:fltk-1.3.4-1/jpeg/jutils.c **** }
 134              		.loc 1 207 0
 135 004d 4883C408 		addq	$8, %rsp
 136              		.cfi_def_cfa_offset 40
 137 0051 5B       		popq	%rbx
 138              		.cfi_def_cfa_offset 32
 139              	.LVL11:
 140 0052 5D       		popq	%rbp
 141              		.cfi_def_cfa_offset 24
 142              	.LVL12:
 143 0053 415C     		popq	%r12
 144              		.cfi_def_cfa_offset 16
 145 0055 415D     		popq	%r13
 146              		.cfi_def_cfa_offset 8
 147 0057 C3       		ret
 148              		.cfi_endproc
 149              	.LFE63:
 151              		.section	.text.unlikely.jcopy_sample_rows
 152              	.LCOLDE2:
 153              		.section	.text.jcopy_sample_rows
 154              	.LHOTE2:
 155              		.section	.text.unlikely.jcopy_block_row,"ax",@progbits
 156              	.LCOLDB3:
 157              		.section	.text.jcopy_block_row,"ax",@progbits
 158              	.LHOTB3:
 159              		.p2align 4,,15
 160              		.globl	jcopy_block_row
 162              	jcopy_block_row:
 163              	.LFB64:
 208:fltk-1.3.4-1/jpeg/jutils.c **** 
 209:fltk-1.3.4-1/jpeg/jutils.c **** 
 210:fltk-1.3.4-1/jpeg/jutils.c **** GLOBAL(void)
 211:fltk-1.3.4-1/jpeg/jutils.c **** jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
 212:fltk-1.3.4-1/jpeg/jutils.c **** 		 JDIMENSION num_blocks)
 213:fltk-1.3.4-1/jpeg/jutils.c **** /* Copy a row of coefficient blocks from one place to another. */
 214:fltk-1.3.4-1/jpeg/jutils.c **** {
 164              		.loc 1 214 0
 165              		.cfi_startproc
 166              	.LVL13:
 167              		.loc 1 214 0
 168 0000 4889F8   		movq	%rdi, %rax
 169              	.LBB8:
 170              	.LBB9:
 171              		.loc 2 53 0
 172 0003 89D2     		movl	%edx, %edx
 173              	.LBE9:
 174              	.LBE8:
 175              		.loc 1 214 0
 176 0005 4889F7   		movq	%rsi, %rdi
 177              	.LVL14:
 178              	.LBB11:
 179              	.LBB10:
 180              		.loc 2 53 0
 181 0008 48C1E207 		salq	$7, %rdx
 182              	.LVL15:
 183 000c 4889C6   		movq	%rax, %rsi
 184              	.LVL16:
 185 000f E9000000 		jmp	memcpy
 185      00
 186              	.LVL17:
 187              	.LBE10:
 188              	.LBE11:
 189              		.cfi_endproc
 190              	.LFE64:
 192              		.section	.text.unlikely.jcopy_block_row
 193              	.LCOLDE3:
 194              		.section	.text.jcopy_block_row
 195              	.LHOTE3:
 196              		.globl	jpeg_natural_order2
 197              		.section	.rodata.jpeg_natural_order2,"a",@progbits
 198              		.align 32
 201              	jpeg_natural_order2:
 202 0000 00000000 		.long	0
 203 0004 01000000 		.long	1
 204 0008 08000000 		.long	8
 205 000c 09000000 		.long	9
 206 0010 3F000000 		.long	63
 207 0014 3F000000 		.long	63
 208 0018 3F000000 		.long	63
 209 001c 3F000000 		.long	63
 210 0020 3F000000 		.long	63
 211 0024 3F000000 		.long	63
 212 0028 3F000000 		.long	63
 213 002c 3F000000 		.long	63
 214 0030 3F000000 		.long	63
 215 0034 3F000000 		.long	63
 216 0038 3F000000 		.long	63
 217 003c 3F000000 		.long	63
 218 0040 3F000000 		.long	63
 219 0044 3F000000 		.long	63
 220 0048 3F000000 		.long	63
 221 004c 3F000000 		.long	63
 222              		.globl	jpeg_natural_order3
 223              		.section	.rodata.jpeg_natural_order3,"a",@progbits
 224              		.align 32
 227              	jpeg_natural_order3:
 228 0000 00000000 		.long	0
 229 0004 01000000 		.long	1
 230 0008 08000000 		.long	8
 231 000c 10000000 		.long	16
 232 0010 09000000 		.long	9
 233 0014 02000000 		.long	2
 234 0018 0A000000 		.long	10
 235 001c 11000000 		.long	17
 236 0020 12000000 		.long	18
 237 0024 3F000000 		.long	63
 238 0028 3F000000 		.long	63
 239 002c 3F000000 		.long	63
 240 0030 3F000000 		.long	63
 241 0034 3F000000 		.long	63
 242 0038 3F000000 		.long	63
 243 003c 3F000000 		.long	63
 244 0040 3F000000 		.long	63
 245 0044 3F000000 		.long	63
 246 0048 3F000000 		.long	63
 247 004c 3F000000 		.long	63
 248 0050 3F000000 		.long	63
 249 0054 3F000000 		.long	63
 250 0058 3F000000 		.long	63
 251 005c 3F000000 		.long	63
 252 0060 3F000000 		.long	63
 253              		.globl	jpeg_natural_order4
 254              		.section	.rodata.jpeg_natural_order4,"a",@progbits
 255              		.align 32
 258              	jpeg_natural_order4:
 259 0000 00000000 		.long	0
 260 0004 01000000 		.long	1
 261 0008 08000000 		.long	8
 262 000c 10000000 		.long	16
 263 0010 09000000 		.long	9
 264 0014 02000000 		.long	2
 265 0018 03000000 		.long	3
 266 001c 0A000000 		.long	10
 267 0020 11000000 		.long	17
 268 0024 18000000 		.long	24
 269 0028 19000000 		.long	25
 270 002c 12000000 		.long	18
 271 0030 0B000000 		.long	11
 272 0034 13000000 		.long	19
 273 0038 1A000000 		.long	26
 274 003c 1B000000 		.long	27
 275 0040 3F000000 		.long	63
 276 0044 3F000000 		.long	63
 277 0048 3F000000 		.long	63
 278 004c 3F000000 		.long	63
 279 0050 3F000000 		.long	63
 280 0054 3F000000 		.long	63
 281 0058 3F000000 		.long	63
 282 005c 3F000000 		.long	63
 283 0060 3F000000 		.long	63
 284 0064 3F000000 		.long	63
 285 0068 3F000000 		.long	63
 286 006c 3F000000 		.long	63
 287 0070 3F000000 		.long	63
 288 0074 3F000000 		.long	63
 289 0078 3F000000 		.long	63
 290 007c 3F000000 		.long	63
 291              		.globl	jpeg_natural_order5
 292              		.section	.rodata.jpeg_natural_order5,"a",@progbits
 293              		.align 32
 296              	jpeg_natural_order5:
 297 0000 00000000 		.long	0
 298 0004 01000000 		.long	1
 299 0008 08000000 		.long	8
 300 000c 10000000 		.long	16
 301 0010 09000000 		.long	9
 302 0014 02000000 		.long	2
 303 0018 03000000 		.long	3
 304 001c 0A000000 		.long	10
 305 0020 11000000 		.long	17
 306 0024 18000000 		.long	24
 307 0028 20000000 		.long	32
 308 002c 19000000 		.long	25
 309 0030 12000000 		.long	18
 310 0034 0B000000 		.long	11
 311 0038 04000000 		.long	4
 312 003c 0C000000 		.long	12
 313 0040 13000000 		.long	19
 314 0044 1A000000 		.long	26
 315 0048 21000000 		.long	33
 316 004c 22000000 		.long	34
 317 0050 1B000000 		.long	27
 318 0054 14000000 		.long	20
 319 0058 1C000000 		.long	28
 320 005c 23000000 		.long	35
 321 0060 24000000 		.long	36
 322 0064 3F000000 		.long	63
 323 0068 3F000000 		.long	63
 324 006c 3F000000 		.long	63
 325 0070 3F000000 		.long	63
 326 0074 3F000000 		.long	63
 327 0078 3F000000 		.long	63
 328 007c 3F000000 		.long	63
 329 0080 3F000000 		.long	63
 330 0084 3F000000 		.long	63
 331 0088 3F000000 		.long	63
 332 008c 3F000000 		.long	63
 333 0090 3F000000 		.long	63
 334 0094 3F000000 		.long	63
 335 0098 3F000000 		.long	63
 336 009c 3F000000 		.long	63
 337 00a0 3F000000 		.long	63
 338              		.globl	jpeg_natural_order6
 339              		.section	.rodata.jpeg_natural_order6,"a",@progbits
 340              		.align 32
 343              	jpeg_natural_order6:
 344 0000 00000000 		.long	0
 345 0004 01000000 		.long	1
 346 0008 08000000 		.long	8
 347 000c 10000000 		.long	16
 348 0010 09000000 		.long	9
 349 0014 02000000 		.long	2
 350 0018 03000000 		.long	3
 351 001c 0A000000 		.long	10
 352 0020 11000000 		.long	17
 353 0024 18000000 		.long	24
 354 0028 20000000 		.long	32
 355 002c 19000000 		.long	25
 356 0030 12000000 		.long	18
 357 0034 0B000000 		.long	11
 358 0038 04000000 		.long	4
 359 003c 05000000 		.long	5
 360 0040 0C000000 		.long	12
 361 0044 13000000 		.long	19
 362 0048 1A000000 		.long	26
 363 004c 21000000 		.long	33
 364 0050 28000000 		.long	40
 365 0054 29000000 		.long	41
 366 0058 22000000 		.long	34
 367 005c 1B000000 		.long	27
 368 0060 14000000 		.long	20
 369 0064 0D000000 		.long	13
 370 0068 15000000 		.long	21
 371 006c 1C000000 		.long	28
 372 0070 23000000 		.long	35
 373 0074 2A000000 		.long	42
 374 0078 2B000000 		.long	43
 375 007c 24000000 		.long	36
 376 0080 1D000000 		.long	29
 377 0084 25000000 		.long	37
 378 0088 2C000000 		.long	44
 379 008c 2D000000 		.long	45
 380 0090 3F000000 		.long	63
 381 0094 3F000000 		.long	63
 382 0098 3F000000 		.long	63
 383 009c 3F000000 		.long	63
 384 00a0 3F000000 		.long	63
 385 00a4 3F000000 		.long	63
 386 00a8 3F000000 		.long	63
 387 00ac 3F000000 		.long	63
 388 00b0 3F000000 		.long	63
 389 00b4 3F000000 		.long	63
 390 00b8 3F000000 		.long	63
 391 00bc 3F000000 		.long	63
 392 00c0 3F000000 		.long	63
 393 00c4 3F000000 		.long	63
 394 00c8 3F000000 		.long	63
 395 00cc 3F000000 		.long	63
 396              		.globl	jpeg_natural_order7
 397              		.section	.rodata.jpeg_natural_order7,"a",@progbits
 398              		.align 32
 401              	jpeg_natural_order7:
 402 0000 00000000 		.long	0
 403 0004 01000000 		.long	1
 404 0008 08000000 		.long	8
 405 000c 10000000 		.long	16
 406 0010 09000000 		.long	9
 407 0014 02000000 		.long	2
 408 0018 03000000 		.long	3
 409 001c 0A000000 		.long	10
 410 0020 11000000 		.long	17
 411 0024 18000000 		.long	24
 412 0028 20000000 		.long	32
 413 002c 19000000 		.long	25
 414 0030 12000000 		.long	18
 415 0034 0B000000 		.long	11
 416 0038 04000000 		.long	4
 417 003c 05000000 		.long	5
 418 0040 0C000000 		.long	12
 419 0044 13000000 		.long	19
 420 0048 1A000000 		.long	26
 421 004c 21000000 		.long	33
 422 0050 28000000 		.long	40
 423 0054 30000000 		.long	48
 424 0058 29000000 		.long	41
 425 005c 22000000 		.long	34
 426 0060 1B000000 		.long	27
 427 0064 14000000 		.long	20
 428 0068 0D000000 		.long	13
 429 006c 06000000 		.long	6
 430 0070 0E000000 		.long	14
 431 0074 15000000 		.long	21
 432 0078 1C000000 		.long	28
 433 007c 23000000 		.long	35
 434 0080 2A000000 		.long	42
 435 0084 31000000 		.long	49
 436 0088 32000000 		.long	50
 437 008c 2B000000 		.long	43
 438 0090 24000000 		.long	36
 439 0094 1D000000 		.long	29
 440 0098 16000000 		.long	22
 441 009c 1E000000 		.long	30
 442 00a0 25000000 		.long	37
 443 00a4 2C000000 		.long	44
 444 00a8 33000000 		.long	51
 445 00ac 34000000 		.long	52
 446 00b0 2D000000 		.long	45
 447 00b4 26000000 		.long	38
 448 00b8 2E000000 		.long	46
 449 00bc 35000000 		.long	53
 450 00c0 36000000 		.long	54
 451 00c4 3F000000 		.long	63
 452 00c8 3F000000 		.long	63
 453 00cc 3F000000 		.long	63
 454 00d0 3F000000 		.long	63
 455 00d4 3F000000 		.long	63
 456 00d8 3F000000 		.long	63
 457 00dc 3F000000 		.long	63
 458 00e0 3F000000 		.long	63
 459 00e4 3F000000 		.long	63
 460 00e8 3F000000 		.long	63
 461 00ec 3F000000 		.long	63
 462 00f0 3F000000 		.long	63
 463 00f4 3F000000 		.long	63
 464 00f8 3F000000 		.long	63
 465 00fc 3F000000 		.long	63
 466 0100 3F000000 		.long	63
 467              		.globl	jpeg_natural_order
 468              		.section	.rodata.jpeg_natural_order,"a",@progbits
 469              		.align 32
 472              	jpeg_natural_order:
 473 0000 00000000 		.long	0
 474 0004 01000000 		.long	1
 475 0008 08000000 		.long	8
 476 000c 10000000 		.long	16
 477 0010 09000000 		.long	9
 478 0014 02000000 		.long	2
 479 0018 03000000 		.long	3
 480 001c 0A000000 		.long	10
 481 0020 11000000 		.long	17
 482 0024 18000000 		.long	24
 483 0028 20000000 		.long	32
 484 002c 19000000 		.long	25
 485 0030 12000000 		.long	18
 486 0034 0B000000 		.long	11
 487 0038 04000000 		.long	4
 488 003c 05000000 		.long	5
 489 0040 0C000000 		.long	12
 490 0044 13000000 		.long	19
 491 0048 1A000000 		.long	26
 492 004c 21000000 		.long	33
 493 0050 28000000 		.long	40
 494 0054 30000000 		.long	48
 495 0058 29000000 		.long	41
 496 005c 22000000 		.long	34
 497 0060 1B000000 		.long	27
 498 0064 14000000 		.long	20
 499 0068 0D000000 		.long	13
 500 006c 06000000 		.long	6
 501 0070 07000000 		.long	7
 502 0074 0E000000 		.long	14
 503 0078 15000000 		.long	21
 504 007c 1C000000 		.long	28
 505 0080 23000000 		.long	35
 506 0084 2A000000 		.long	42
 507 0088 31000000 		.long	49
 508 008c 38000000 		.long	56
 509 0090 39000000 		.long	57
 510 0094 32000000 		.long	50
 511 0098 2B000000 		.long	43
 512 009c 24000000 		.long	36
 513 00a0 1D000000 		.long	29
 514 00a4 16000000 		.long	22
 515 00a8 0F000000 		.long	15
 516 00ac 17000000 		.long	23
 517 00b0 1E000000 		.long	30
 518 00b4 25000000 		.long	37
 519 00b8 2C000000 		.long	44
 520 00bc 33000000 		.long	51
 521 00c0 3A000000 		.long	58
 522 00c4 3B000000 		.long	59
 523 00c8 34000000 		.long	52
 524 00cc 2D000000 		.long	45
 525 00d0 26000000 		.long	38
 526 00d4 1F000000 		.long	31
 527 00d8 27000000 		.long	39
 528 00dc 2E000000 		.long	46
 529 00e0 35000000 		.long	53
 530 00e4 3C000000 		.long	60
 531 00e8 3D000000 		.long	61
 532 00ec 36000000 		.long	54
 533 00f0 2F000000 		.long	47
 534 00f4 37000000 		.long	55
 535 00f8 3E000000 		.long	62
 536 00fc 3F000000 		.long	63
 537 0100 3F000000 		.long	63
 538 0104 3F000000 		.long	63
 539 0108 3F000000 		.long	63
 540 010c 3F000000 		.long	63
 541 0110 3F000000 		.long	63
 542 0114 3F000000 		.long	63
 543 0118 3F000000 		.long	63
 544 011c 3F000000 		.long	63
 545 0120 3F000000 		.long	63
 546 0124 3F000000 		.long	63
 547 0128 3F000000 		.long	63
 548 012c 3F000000 		.long	63
 549 0130 3F000000 		.long	63
 550 0134 3F000000 		.long	63
 551 0138 3F000000 		.long	63
 552 013c 3F000000 		.long	63
 553              		.text
 554              	.Letext0:
 555              		.section	.text.unlikely.jdiv_round_up
 556              	.Letext_cold0:
 557              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 558              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 559              		.file 5 "/usr/include/libio.h"
 560              		.file 6 "fltk-1.3.4-1/jpeg/jmorecfg.h"
 561              		.file 7 "fltk-1.3.4-1/jpeg/jpeglib.h"
 562              		.file 8 "/usr/include/stdio.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 jutils.c
     /tmp/ccDYFzKJ.s:14     .text.jdiv_round_up:0000000000000000 jdiv_round_up
     /tmp/ccDYFzKJ.s:40     .text.jround_up:0000000000000000 jround_up
     /tmp/ccDYFzKJ.s:70     .text.jcopy_sample_rows:0000000000000000 jcopy_sample_rows
     /tmp/ccDYFzKJ.s:162    .text.jcopy_block_row:0000000000000000 jcopy_block_row
     /tmp/ccDYFzKJ.s:201    .rodata.jpeg_natural_order2:0000000000000000 jpeg_natural_order2
     /tmp/ccDYFzKJ.s:227    .rodata.jpeg_natural_order3:0000000000000000 jpeg_natural_order3
     /tmp/ccDYFzKJ.s:258    .rodata.jpeg_natural_order4:0000000000000000 jpeg_natural_order4
     /tmp/ccDYFzKJ.s:296    .rodata.jpeg_natural_order5:0000000000000000 jpeg_natural_order5
     /tmp/ccDYFzKJ.s:343    .rodata.jpeg_natural_order6:0000000000000000 jpeg_natural_order6
     /tmp/ccDYFzKJ.s:401    .rodata.jpeg_natural_order7:0000000000000000 jpeg_natural_order7
     /tmp/ccDYFzKJ.s:472    .rodata.jpeg_natural_order:0000000000000000 jpeg_natural_order
                           .group:0000000000000000 wm4.0.cf9695abff4f49bdfe00dc4091904acd
                           .group:0000000000000000 wm4.stdcpredef.h.19.bf2bf6c5fb087dfb5ef2d2297c2795de
                           .group:0000000000000000 wm4.jconfig.h.10.247fc3ff67998f3074970b1373c70333
                           .group:0000000000000000 wm4.features.h.19.24da27e0a4d0d521fd057013d982b8b5
                           .group:0000000000000000 wm4.cdefs.h.19.56613e71f285ebad825b69b151170a81
                           .group:0000000000000000 wm4.wordsize.h.4.256e8fdbd37801980286acdbc40d0280
                           .group:0000000000000000 wm4.cdefs.h.432.619afd0aac7c4b439843706c1b28ddea
                           .group:0000000000000000 wm4.stubs64.h.10.918ceb5fa58268542bf143e4c1efbcf3
                           .group:0000000000000000 wm4.stdlib.h.27.59e2586c75bdbcb991b248ad7257b993
                           .group:0000000000000000 wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1
                           .group:0000000000000000 wm4.waitflags.h.25.e401b8bcfee800b540b27abd7cc78de9
                           .group:0000000000000000 wm4.waitstatus.h.28.93f167f49d64e2b9b99f98d1162a93bf
                           .group:0000000000000000 wm4.endian.h.19.ff00c9c0f5e9f9a9719c5de76ace57b4
                           .group:0000000000000000 wm4.endian.h.41.24cced64aef71195a51d4daa8e4f4a95
                           .group:0000000000000000 wm4.types.h.89.468e2451361e3b92f048f6cad51690ff
                           .group:0000000000000000 wm4.typesizes.h.24.40eb69a6270178f15d1bf3d7b6635a8b
                           .group:0000000000000000 wm4.byteswap.h.38.11ee5fdc0f6cc53a16c505b9233cecef
                           .group:0000000000000000 wm4.endian.h.63.97272d7c64d5db8020003b32e9289502
                           .group:0000000000000000 wm4.waitstatus.h.99.408b6270fa6eb71377201a241ef15f79
                           .group:0000000000000000 wm4.stdlib.h.50.84aeca2ac6f37d40e1e9b3cef757ba2d
                           .group:0000000000000000 wm4.types.h.23.f6dcbaa72f8f71361acef09804d45a5e
                           .group:0000000000000000 wm4.time.h.53.beb46e650cd406cb917b6b96b45e640a
                           .group:0000000000000000 wm4.stddef.h.238.847b6907dabda77be90a9ab7ad789e2e
                           .group:0000000000000000 wm4.types.h.187.bd5a05039b505b3620e6973f1b2ffeb1
                           .group:0000000000000000 wm4.select.h.28.eb2f3debdbcffd1442ebddaebc4fb6ff
                           .group:0000000000000000 wm4.sigset.h.20.f36413b6d2364ad847d3db53fb03e683
                           .group:0000000000000000 wm4.select.h.36.f76c3b9e55c871743863013cc4cc14c9
                           .group:0000000000000000 wm4.time.h.66.e70ce69790c975f0efb369340c432e0b
                           .group:0000000000000000 wm4.time.h.25.ae5284cdff565e87a9198d819340325d
                           .group:0000000000000000 wm4.select.h.49.e9d2041e5035cc68ebd1a20f7dbc8514
                           .group:0000000000000000 wm4.select2.h.27.f95f2ab0ffee66dc1b6575014894b21a
                           .group:0000000000000000 wm4.sysmacros.h.20.8a0c33ff175cd9b434a86c0aaa36f0a2
                           .group:0000000000000000 wm4.types.h.229.67b3f66bd74b06b451caec392a72a945
                           .group:0000000000000000 wm4.pthreadtypes.h.25.6892b1493314fcf446bbc76e7362acba
                           .group:0000000000000000 wm4.alloca.h.19.edefa922a76c1cbaaf1e416903ba2d1c
                           .group:0000000000000000 wm4.alloca.h.29.156e12058824cc23d961c4d3b13031f6
                           .group:0000000000000000 wm4.stdio.h.26.4719156f1aea2bb9662fd6c582dc9a4c
                           .group:0000000000000000 wm4.stddef.h.238.04cc7214bceba497b20d15c10fd97511
                           .group:0000000000000000 wm4.stdio.h.36.2dd12c1fd035242ad5cfd0152a01be5a
                           .group:0000000000000000 wm4._G_config.h.5.b0f37d9e474454cf6e459063458db32f
                           .group:0000000000000000 wm4.wchar.h.80.eea3eba2d2a17aace9470a8e0d8218dc
                           .group:0000000000000000 wm4._G_config.h.46.5187c97b14fd664662cb32e6b94fc49e
                           .group:0000000000000000 wm4.libio.h.33.a775b9ecae273f33bc59931e9891e4ca
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.libio.h.51.dab170798ec1df48c625aea7c30e1b63
                           .group:0000000000000000 wm4.stdio.h.80.17b7dd1ca72d8a61987532cb1d80194a
                           .group:0000000000000000 wm4.stdio_lim.h.23.557290a6cddeba0587f574f29e3a5fb9
                           .group:0000000000000000 wm4.stdio.h.172.df21df34a7396d7da2e08f9b617d582f
                           .group:0000000000000000 wm4.stdio.h.26.cae64f7ada9bb8327a89dba6a5e93655
                           .group:0000000000000000 wm4.string.h.23.8394011d5995a16f15d67d04e84a1d69
                           .group:0000000000000000 wm4.string.h.24.1b0dc67418e7128d207285861439c2f8
                           .group:0000000000000000 wm4.string2.h.45.00535b99420fc3014c2da41d6645330d
                           .group:0000000000000000 wm4.string3.h.31.0c4b9301b754a2db05eaafef869657d2
                           .group:0000000000000000 wm4.jinclude.h.67.b19f941ec97c4845fa4609292c7e2db4
                           .group:0000000000000000 wm4.jmorecfg.h.33.3b4c5f9cc07b3737823b06caf24d5b05
                           .group:0000000000000000 wm4.jpeglib.h.40.4f111c27252a38df39328d65454e82f4
                           .group:0000000000000000 wm4.jpegint.h.26.5219ef5d4e4921371d38e77b6091fd20
                           .group:0000000000000000 wm4.jerror.h.25.1dbd8674e70ab5215bc0037320e5c2a2

UNDEFINED SYMBOLS
memcpy
