   1              		.file	"jdhuff.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.unlikely.jpeg_fill_bit_buffer,"ax",@progbits
   5              	.LCOLDB0:
   6              		.section	.text.jpeg_fill_bit_buffer,"ax",@progbits
   7              	.LHOTB0:
   8              		.p2align 4,,15
   9              		.section	.text.unlikely.jpeg_fill_bit_buffer
  10              	.Ltext_cold0:
  11              		.section	.text.jpeg_fill_bit_buffer
  13              	jpeg_fill_bit_buffer:
  14              	.LFB62:
  15              		.file 1 "fltk-1.3.4-1/jpeg/jdhuff.c"
   1:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
   2:fltk-1.3.4-1/jpeg/jdhuff.c ****  * jdhuff.c
   3:fltk-1.3.4-1/jpeg/jdhuff.c ****  *
   4:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Copyright (C) 1991-1997, Thomas G. Lane.
   5:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Modified 2006-2013 by Guido Vollbeding.
   6:fltk-1.3.4-1/jpeg/jdhuff.c ****  * This file is part of the Independent JPEG Group's software.
   7:fltk-1.3.4-1/jpeg/jdhuff.c ****  * For conditions of distribution and use, see the accompanying README file.
   8:fltk-1.3.4-1/jpeg/jdhuff.c ****  *
   9:fltk-1.3.4-1/jpeg/jdhuff.c ****  * This file contains Huffman entropy decoding routines.
  10:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Both sequential and progressive modes are supported in this single module.
  11:fltk-1.3.4-1/jpeg/jdhuff.c ****  *
  12:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Much of the complexity here has to do with supporting input suspension.
  13:fltk-1.3.4-1/jpeg/jdhuff.c ****  * If the data source module demands suspension, we want to be able to back
  14:fltk-1.3.4-1/jpeg/jdhuff.c ****  * up to the start of the current MCU.  To do this, we copy state variables
  15:fltk-1.3.4-1/jpeg/jdhuff.c ****  * into local working storage, and update them back to the permanent
  16:fltk-1.3.4-1/jpeg/jdhuff.c ****  * storage only upon successful completion of an MCU.
  17:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
  18:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  19:fltk-1.3.4-1/jpeg/jdhuff.c **** #define JPEG_INTERNALS
  20:fltk-1.3.4-1/jpeg/jdhuff.c **** #include "jinclude.h"
  21:fltk-1.3.4-1/jpeg/jdhuff.c **** #include "jpeglib.h"
  22:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  23:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  24:fltk-1.3.4-1/jpeg/jdhuff.c **** /* Derived data constructed for each Huffman table */
  25:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  26:fltk-1.3.4-1/jpeg/jdhuff.c **** #define HUFF_LOOKAHEAD	8	/* # of bits of lookahead */
  27:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  28:fltk-1.3.4-1/jpeg/jdhuff.c **** typedef struct {
  29:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Basic tables: (element [0] of each array is unused) */
  30:fltk-1.3.4-1/jpeg/jdhuff.c ****   INT32 maxcode[18];		/* largest code of length k (-1 if none) */
  31:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* (maxcode[17] is a sentinel to ensure jpeg_huff_decode terminates) */
  32:fltk-1.3.4-1/jpeg/jdhuff.c ****   INT32 valoffset[17];		/* huffval[] offset for codes of length k */
  33:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* valoffset[k] = huffval[] index of 1st symbol of code length k, less
  34:fltk-1.3.4-1/jpeg/jdhuff.c ****    * the smallest code of length k; so given a code of length k, the
  35:fltk-1.3.4-1/jpeg/jdhuff.c ****    * corresponding symbol is huffval[code + valoffset[k]]
  36:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
  37:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  38:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Link to public Huffman table (needed only in jpeg_huff_decode) */
  39:fltk-1.3.4-1/jpeg/jdhuff.c ****   JHUFF_TBL *pub;
  40:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  41:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Lookahead tables: indexed by the next HUFF_LOOKAHEAD bits of
  42:fltk-1.3.4-1/jpeg/jdhuff.c ****    * the input data stream.  If the next Huffman code is no more
  43:fltk-1.3.4-1/jpeg/jdhuff.c ****    * than HUFF_LOOKAHEAD bits long, we can obtain its length and
  44:fltk-1.3.4-1/jpeg/jdhuff.c ****    * the corresponding symbol directly from these tables.
  45:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
  46:fltk-1.3.4-1/jpeg/jdhuff.c ****   int look_nbits[1<<HUFF_LOOKAHEAD]; /* # bits, or 0 if too long */
  47:fltk-1.3.4-1/jpeg/jdhuff.c ****   UINT8 look_sym[1<<HUFF_LOOKAHEAD]; /* symbol, or unused */
  48:fltk-1.3.4-1/jpeg/jdhuff.c **** } d_derived_tbl;
  49:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  50:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  51:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
  52:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Fetching the next N bits from the input stream is a time-critical operation
  53:fltk-1.3.4-1/jpeg/jdhuff.c ****  * for the Huffman decoders.  We implement it with a combination of inline
  54:fltk-1.3.4-1/jpeg/jdhuff.c ****  * macros and out-of-line subroutines.  Note that N (the number of bits
  55:fltk-1.3.4-1/jpeg/jdhuff.c ****  * demanded at one time) never exceeds 15 for JPEG use.
  56:fltk-1.3.4-1/jpeg/jdhuff.c ****  *
  57:fltk-1.3.4-1/jpeg/jdhuff.c ****  * We read source bytes into get_buffer and dole out bits as needed.
  58:fltk-1.3.4-1/jpeg/jdhuff.c ****  * If get_buffer already contains enough bits, they are fetched in-line
  59:fltk-1.3.4-1/jpeg/jdhuff.c ****  * by the macros CHECK_BIT_BUFFER and GET_BITS.  When there aren't enough
  60:fltk-1.3.4-1/jpeg/jdhuff.c ****  * bits, jpeg_fill_bit_buffer is called; it will attempt to fill get_buffer
  61:fltk-1.3.4-1/jpeg/jdhuff.c ****  * as full as possible (not just to the number of bits needed; this
  62:fltk-1.3.4-1/jpeg/jdhuff.c ****  * prefetching reduces the overhead cost of calling jpeg_fill_bit_buffer).
  63:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Note that jpeg_fill_bit_buffer may return FALSE to indicate suspension.
  64:fltk-1.3.4-1/jpeg/jdhuff.c ****  * On TRUE return, jpeg_fill_bit_buffer guarantees that get_buffer contains
  65:fltk-1.3.4-1/jpeg/jdhuff.c ****  * at least the requested number of bits --- dummy zeroes are inserted if
  66:fltk-1.3.4-1/jpeg/jdhuff.c ****  * necessary.
  67:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
  68:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  69:fltk-1.3.4-1/jpeg/jdhuff.c **** typedef INT32 bit_buf_type;	/* type of bit-extraction buffer */
  70:fltk-1.3.4-1/jpeg/jdhuff.c **** #define BIT_BUF_SIZE  32	/* size of buffer in bits */
  71:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  72:fltk-1.3.4-1/jpeg/jdhuff.c **** /* If long is > 32 bits on your machine, and shifting/masking longs is
  73:fltk-1.3.4-1/jpeg/jdhuff.c ****  * reasonably fast, making bit_buf_type be long and setting BIT_BUF_SIZE
  74:fltk-1.3.4-1/jpeg/jdhuff.c ****  * appropriately should be a win.  Unfortunately we can't define the size
  75:fltk-1.3.4-1/jpeg/jdhuff.c ****  * with something like  #define BIT_BUF_SIZE (sizeof(bit_buf_type)*8)
  76:fltk-1.3.4-1/jpeg/jdhuff.c ****  * because not all machines measure sizeof in 8-bit bytes.
  77:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
  78:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  79:fltk-1.3.4-1/jpeg/jdhuff.c **** typedef struct {		/* Bitreading state saved across MCUs */
  80:fltk-1.3.4-1/jpeg/jdhuff.c ****   bit_buf_type get_buffer;	/* current bit-extraction buffer */
  81:fltk-1.3.4-1/jpeg/jdhuff.c ****   int bits_left;		/* # of unused bits in it */
  82:fltk-1.3.4-1/jpeg/jdhuff.c **** } bitread_perm_state;
  83:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  84:fltk-1.3.4-1/jpeg/jdhuff.c **** typedef struct {		/* Bitreading working state within an MCU */
  85:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Current data source location */
  86:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* We need a copy, rather than munging the original, in case of suspension */
  87:fltk-1.3.4-1/jpeg/jdhuff.c ****   const JOCTET * next_input_byte; /* => next byte to read from source */
  88:fltk-1.3.4-1/jpeg/jdhuff.c ****   size_t bytes_in_buffer;	/* # of bytes remaining in source buffer */
  89:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Bit input buffer --- note these values are kept in register variables,
  90:fltk-1.3.4-1/jpeg/jdhuff.c ****    * not in this struct, inside the inner loops.
  91:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
  92:fltk-1.3.4-1/jpeg/jdhuff.c ****   bit_buf_type get_buffer;	/* current bit-extraction buffer */
  93:fltk-1.3.4-1/jpeg/jdhuff.c ****   int bits_left;		/* # of unused bits in it */
  94:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Pointer needed by jpeg_fill_bit_buffer. */
  95:fltk-1.3.4-1/jpeg/jdhuff.c ****   j_decompress_ptr cinfo;	/* back link to decompress master record */
  96:fltk-1.3.4-1/jpeg/jdhuff.c **** } bitread_working_state;
  97:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  98:fltk-1.3.4-1/jpeg/jdhuff.c **** /* Macros to declare and load/save bitread local variables. */
  99:fltk-1.3.4-1/jpeg/jdhuff.c **** #define BITREAD_STATE_VARS  \
 100:fltk-1.3.4-1/jpeg/jdhuff.c **** 	register bit_buf_type get_buffer;  \
 101:fltk-1.3.4-1/jpeg/jdhuff.c **** 	register int bits_left;  \
 102:fltk-1.3.4-1/jpeg/jdhuff.c **** 	bitread_working_state br_state
 103:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 104:fltk-1.3.4-1/jpeg/jdhuff.c **** #define BITREAD_LOAD_STATE(cinfop,permstate)  \
 105:fltk-1.3.4-1/jpeg/jdhuff.c **** 	br_state.cinfo = cinfop; \
 106:fltk-1.3.4-1/jpeg/jdhuff.c **** 	br_state.next_input_byte = cinfop->src->next_input_byte; \
 107:fltk-1.3.4-1/jpeg/jdhuff.c **** 	br_state.bytes_in_buffer = cinfop->src->bytes_in_buffer; \
 108:fltk-1.3.4-1/jpeg/jdhuff.c **** 	get_buffer = permstate.get_buffer; \
 109:fltk-1.3.4-1/jpeg/jdhuff.c **** 	bits_left = permstate.bits_left;
 110:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 111:fltk-1.3.4-1/jpeg/jdhuff.c **** #define BITREAD_SAVE_STATE(cinfop,permstate)  \
 112:fltk-1.3.4-1/jpeg/jdhuff.c **** 	cinfop->src->next_input_byte = br_state.next_input_byte; \
 113:fltk-1.3.4-1/jpeg/jdhuff.c **** 	cinfop->src->bytes_in_buffer = br_state.bytes_in_buffer; \
 114:fltk-1.3.4-1/jpeg/jdhuff.c **** 	permstate.get_buffer = get_buffer; \
 115:fltk-1.3.4-1/jpeg/jdhuff.c **** 	permstate.bits_left = bits_left
 116:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 117:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 118:fltk-1.3.4-1/jpeg/jdhuff.c ****  * These macros provide the in-line portion of bit fetching.
 119:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Use CHECK_BIT_BUFFER to ensure there are N bits in get_buffer
 120:fltk-1.3.4-1/jpeg/jdhuff.c ****  * before using GET_BITS, PEEK_BITS, or DROP_BITS.
 121:fltk-1.3.4-1/jpeg/jdhuff.c ****  * The variables get_buffer and bits_left are assumed to be locals,
 122:fltk-1.3.4-1/jpeg/jdhuff.c ****  * but the state struct might not be (jpeg_huff_decode needs this).
 123:fltk-1.3.4-1/jpeg/jdhuff.c ****  *	CHECK_BIT_BUFFER(state,n,action);
 124:fltk-1.3.4-1/jpeg/jdhuff.c ****  *		Ensure there are N bits in get_buffer; if suspend, take action.
 125:fltk-1.3.4-1/jpeg/jdhuff.c ****  *      val = GET_BITS(n);
 126:fltk-1.3.4-1/jpeg/jdhuff.c ****  *		Fetch next N bits.
 127:fltk-1.3.4-1/jpeg/jdhuff.c ****  *      val = PEEK_BITS(n);
 128:fltk-1.3.4-1/jpeg/jdhuff.c ****  *		Fetch next N bits without removing them from the buffer.
 129:fltk-1.3.4-1/jpeg/jdhuff.c ****  *	DROP_BITS(n);
 130:fltk-1.3.4-1/jpeg/jdhuff.c ****  *		Discard next N bits.
 131:fltk-1.3.4-1/jpeg/jdhuff.c ****  * The value N should be a simple variable, not an expression, because it
 132:fltk-1.3.4-1/jpeg/jdhuff.c ****  * is evaluated multiple times.
 133:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 134:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 135:fltk-1.3.4-1/jpeg/jdhuff.c **** #define CHECK_BIT_BUFFER(state,nbits,action) \
 136:fltk-1.3.4-1/jpeg/jdhuff.c **** 	{ if (bits_left < (nbits)) {  \
 137:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (! jpeg_fill_bit_buffer(&(state),get_buffer,bits_left,nbits))  \
 138:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      { action; }  \
 139:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    get_buffer = (state).get_buffer; bits_left = (state).bits_left; } }
 140:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 141:fltk-1.3.4-1/jpeg/jdhuff.c **** #define GET_BITS(nbits) \
 142:fltk-1.3.4-1/jpeg/jdhuff.c **** 	(((int) (get_buffer >> (bits_left -= (nbits)))) & BIT_MASK(nbits))
 143:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 144:fltk-1.3.4-1/jpeg/jdhuff.c **** #define PEEK_BITS(nbits) \
 145:fltk-1.3.4-1/jpeg/jdhuff.c **** 	(((int) (get_buffer >> (bits_left -  (nbits)))) & BIT_MASK(nbits))
 146:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 147:fltk-1.3.4-1/jpeg/jdhuff.c **** #define DROP_BITS(nbits) \
 148:fltk-1.3.4-1/jpeg/jdhuff.c **** 	(bits_left -= (nbits))
 149:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 150:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 151:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 152:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Code for extracting next Huffman-coded symbol from input bit stream.
 153:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Again, this is time-critical and we make the main paths be macros.
 154:fltk-1.3.4-1/jpeg/jdhuff.c ****  *
 155:fltk-1.3.4-1/jpeg/jdhuff.c ****  * We use a lookahead table to process codes of up to HUFF_LOOKAHEAD bits
 156:fltk-1.3.4-1/jpeg/jdhuff.c ****  * without looping.  Usually, more than 95% of the Huffman codes will be 8
 157:fltk-1.3.4-1/jpeg/jdhuff.c ****  * or fewer bits long.  The few overlength codes are handled with a loop,
 158:fltk-1.3.4-1/jpeg/jdhuff.c ****  * which need not be inline code.
 159:fltk-1.3.4-1/jpeg/jdhuff.c ****  *
 160:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Notes about the HUFF_DECODE macro:
 161:fltk-1.3.4-1/jpeg/jdhuff.c ****  * 1. Near the end of the data segment, we may fail to get enough bits
 162:fltk-1.3.4-1/jpeg/jdhuff.c ****  *    for a lookahead.  In that case, we do it the hard way.
 163:fltk-1.3.4-1/jpeg/jdhuff.c ****  * 2. If the lookahead table contains no entry, the next code must be
 164:fltk-1.3.4-1/jpeg/jdhuff.c ****  *    more than HUFF_LOOKAHEAD bits long.
 165:fltk-1.3.4-1/jpeg/jdhuff.c ****  * 3. jpeg_huff_decode returns -1 if forced to suspend.
 166:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 167:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 168:fltk-1.3.4-1/jpeg/jdhuff.c **** #define HUFF_DECODE(result,state,htbl,failaction,slowlabel) \
 169:fltk-1.3.4-1/jpeg/jdhuff.c **** { register int nb, look; \
 170:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (bits_left < HUFF_LOOKAHEAD) { \
 171:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (! jpeg_fill_bit_buffer(&state,get_buffer,bits_left, 0)) {failaction;} \
 172:fltk-1.3.4-1/jpeg/jdhuff.c ****     get_buffer = state.get_buffer; bits_left = state.bits_left; \
 173:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (bits_left < HUFF_LOOKAHEAD) { \
 174:fltk-1.3.4-1/jpeg/jdhuff.c ****       nb = 1; goto slowlabel; \
 175:fltk-1.3.4-1/jpeg/jdhuff.c ****     } \
 176:fltk-1.3.4-1/jpeg/jdhuff.c ****   } \
 177:fltk-1.3.4-1/jpeg/jdhuff.c ****   look = PEEK_BITS(HUFF_LOOKAHEAD); \
 178:fltk-1.3.4-1/jpeg/jdhuff.c ****   if ((nb = htbl->look_nbits[look]) != 0) { \
 179:fltk-1.3.4-1/jpeg/jdhuff.c ****     DROP_BITS(nb); \
 180:fltk-1.3.4-1/jpeg/jdhuff.c ****     result = htbl->look_sym[look]; \
 181:fltk-1.3.4-1/jpeg/jdhuff.c ****   } else { \
 182:fltk-1.3.4-1/jpeg/jdhuff.c ****     nb = HUFF_LOOKAHEAD+1; \
 183:fltk-1.3.4-1/jpeg/jdhuff.c **** slowlabel: \
 184:fltk-1.3.4-1/jpeg/jdhuff.c ****     if ((result=jpeg_huff_decode(&state,get_buffer,bits_left,htbl,nb)) < 0) \
 185:fltk-1.3.4-1/jpeg/jdhuff.c **** 	{ failaction; } \
 186:fltk-1.3.4-1/jpeg/jdhuff.c ****     get_buffer = state.get_buffer; bits_left = state.bits_left; \
 187:fltk-1.3.4-1/jpeg/jdhuff.c ****   } \
 188:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 189:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 190:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 191:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 192:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Expanded entropy decoder object for Huffman decoding.
 193:fltk-1.3.4-1/jpeg/jdhuff.c ****  *
 194:fltk-1.3.4-1/jpeg/jdhuff.c ****  * The savable_state subrecord contains fields that change within an MCU,
 195:fltk-1.3.4-1/jpeg/jdhuff.c ****  * but must not be updated permanently until we complete the MCU.
 196:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 197:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 198:fltk-1.3.4-1/jpeg/jdhuff.c **** typedef struct {
 199:fltk-1.3.4-1/jpeg/jdhuff.c ****   unsigned int EOBRUN;			/* remaining EOBs in EOBRUN */
 200:fltk-1.3.4-1/jpeg/jdhuff.c ****   int last_dc_val[MAX_COMPS_IN_SCAN];	/* last DC coef for each component */
 201:fltk-1.3.4-1/jpeg/jdhuff.c **** } savable_state;
 202:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 203:fltk-1.3.4-1/jpeg/jdhuff.c **** /* This macro is to work around compilers with missing or broken
 204:fltk-1.3.4-1/jpeg/jdhuff.c ****  * structure assignment.  You'll need to fix this code if you have
 205:fltk-1.3.4-1/jpeg/jdhuff.c ****  * such a compiler and you change MAX_COMPS_IN_SCAN.
 206:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 207:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 208:fltk-1.3.4-1/jpeg/jdhuff.c **** #ifndef NO_STRUCT_ASSIGN
 209:fltk-1.3.4-1/jpeg/jdhuff.c **** #define ASSIGN_STATE(dest,src)  ((dest) = (src))
 210:fltk-1.3.4-1/jpeg/jdhuff.c **** #else
 211:fltk-1.3.4-1/jpeg/jdhuff.c **** #if MAX_COMPS_IN_SCAN == 4
 212:fltk-1.3.4-1/jpeg/jdhuff.c **** #define ASSIGN_STATE(dest,src)  \
 213:fltk-1.3.4-1/jpeg/jdhuff.c **** 	((dest).EOBRUN = (src).EOBRUN, \
 214:fltk-1.3.4-1/jpeg/jdhuff.c **** 	 (dest).last_dc_val[0] = (src).last_dc_val[0], \
 215:fltk-1.3.4-1/jpeg/jdhuff.c **** 	 (dest).last_dc_val[1] = (src).last_dc_val[1], \
 216:fltk-1.3.4-1/jpeg/jdhuff.c **** 	 (dest).last_dc_val[2] = (src).last_dc_val[2], \
 217:fltk-1.3.4-1/jpeg/jdhuff.c **** 	 (dest).last_dc_val[3] = (src).last_dc_val[3])
 218:fltk-1.3.4-1/jpeg/jdhuff.c **** #endif
 219:fltk-1.3.4-1/jpeg/jdhuff.c **** #endif
 220:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 221:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 222:fltk-1.3.4-1/jpeg/jdhuff.c **** typedef struct {
 223:fltk-1.3.4-1/jpeg/jdhuff.c ****   struct jpeg_entropy_decoder pub; /* public fields */
 224:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 225:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* These fields are loaded into local variables at start of each MCU.
 226:fltk-1.3.4-1/jpeg/jdhuff.c ****    * In case of suspension, we exit WITHOUT updating them.
 227:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
 228:fltk-1.3.4-1/jpeg/jdhuff.c ****   bitread_perm_state bitstate;	/* Bit buffer at start of MCU */
 229:fltk-1.3.4-1/jpeg/jdhuff.c ****   savable_state saved;		/* Other state at start of MCU */
 230:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 231:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* These fields are NOT loaded into local working state. */
 232:fltk-1.3.4-1/jpeg/jdhuff.c ****   boolean insufficient_data;	/* set TRUE after emitting warning */
 233:fltk-1.3.4-1/jpeg/jdhuff.c ****   unsigned int restarts_to_go;	/* MCUs left in this restart interval */
 234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 235:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Following two fields used only in progressive mode */
 236:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 237:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Pointers to derived tables (these workspaces have image lifespan) */
 238:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl * derived_tbls[NUM_HUFF_TBLS];
 239:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 240:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl * ac_derived_tbl; /* active table during an AC scan */
 241:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 242:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Following fields used only in sequential mode */
 243:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 244:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Pointers to derived tables (these workspaces have image lifespan) */
 245:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl * dc_derived_tbls[NUM_HUFF_TBLS];
 246:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl * ac_derived_tbls[NUM_HUFF_TBLS];
 247:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 248:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Precalculated info set up by start_pass for use in decode_mcu: */
 249:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 250:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Pointers to derived tables to be used for each block within an MCU */
 251:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl * dc_cur_tbls[D_MAX_BLOCKS_IN_MCU];
 252:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl * ac_cur_tbls[D_MAX_BLOCKS_IN_MCU];
 253:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Whether we care about the DC and AC coefficient values for each block */
 254:fltk-1.3.4-1/jpeg/jdhuff.c ****   int coef_limit[D_MAX_BLOCKS_IN_MCU];
 255:fltk-1.3.4-1/jpeg/jdhuff.c **** } huff_entropy_decoder;
 256:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 257:fltk-1.3.4-1/jpeg/jdhuff.c **** typedef huff_entropy_decoder * huff_entropy_ptr;
 258:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 259:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 260:fltk-1.3.4-1/jpeg/jdhuff.c **** static const int jpeg_zigzag_order[8][8] = {
 261:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  0,  1,  5,  6, 14, 15, 27, 28 },
 262:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  2,  4,  7, 13, 16, 26, 29, 42 },
 263:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  3,  8, 12, 17, 25, 30, 41, 43 },
 264:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  9, 11, 18, 24, 31, 40, 44, 53 },
 265:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 10, 19, 23, 32, 39, 45, 52, 54 },
 266:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 20, 22, 33, 38, 46, 51, 55, 60 },
 267:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 21, 34, 37, 47, 50, 56, 59, 61 },
 268:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 35, 36, 48, 49, 57, 58, 62, 63 }
 269:fltk-1.3.4-1/jpeg/jdhuff.c **** };
 270:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 271:fltk-1.3.4-1/jpeg/jdhuff.c **** static const int jpeg_zigzag_order7[7][7] = {
 272:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  0,  1,  5,  6, 14, 15, 27 },
 273:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  2,  4,  7, 13, 16, 26, 28 },
 274:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  3,  8, 12, 17, 25, 29, 38 },
 275:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  9, 11, 18, 24, 30, 37, 39 },
 276:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 10, 19, 23, 31, 36, 40, 45 },
 277:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 20, 22, 32, 35, 41, 44, 46 },
 278:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 21, 33, 34, 42, 43, 47, 48 }
 279:fltk-1.3.4-1/jpeg/jdhuff.c **** };
 280:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 281:fltk-1.3.4-1/jpeg/jdhuff.c **** static const int jpeg_zigzag_order6[6][6] = {
 282:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  0,  1,  5,  6, 14, 15 },
 283:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  2,  4,  7, 13, 16, 25 },
 284:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  3,  8, 12, 17, 24, 26 },
 285:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  9, 11, 18, 23, 27, 32 },
 286:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 10, 19, 22, 28, 31, 33 },
 287:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 20, 21, 29, 30, 34, 35 }
 288:fltk-1.3.4-1/jpeg/jdhuff.c **** };
 289:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 290:fltk-1.3.4-1/jpeg/jdhuff.c **** static const int jpeg_zigzag_order5[5][5] = {
 291:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  0,  1,  5,  6, 14 },
 292:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  2,  4,  7, 13, 15 },
 293:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  3,  8, 12, 16, 21 },
 294:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  9, 11, 17, 20, 22 },
 295:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 10, 18, 19, 23, 24 }
 296:fltk-1.3.4-1/jpeg/jdhuff.c **** };
 297:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 298:fltk-1.3.4-1/jpeg/jdhuff.c **** static const int jpeg_zigzag_order4[4][4] = {
 299:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 0,  1,  5,  6 },
 300:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 2,  4,  7, 12 },
 301:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 3,  8, 11, 13 },
 302:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 9, 10, 14, 15 }
 303:fltk-1.3.4-1/jpeg/jdhuff.c **** };
 304:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 305:fltk-1.3.4-1/jpeg/jdhuff.c **** static const int jpeg_zigzag_order3[3][3] = {
 306:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 0, 1, 5 },
 307:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 2, 4, 6 },
 308:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 3, 7, 8 }
 309:fltk-1.3.4-1/jpeg/jdhuff.c **** };
 310:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 311:fltk-1.3.4-1/jpeg/jdhuff.c **** static const int jpeg_zigzag_order2[2][2] = {
 312:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 0, 1 },
 313:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 2, 3 }
 314:fltk-1.3.4-1/jpeg/jdhuff.c **** };
 315:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 316:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 317:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 318:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Compute the derived values for a Huffman table.
 319:fltk-1.3.4-1/jpeg/jdhuff.c ****  * This routine also performs some validation checks on the table.
 320:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 321:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 322:fltk-1.3.4-1/jpeg/jdhuff.c **** LOCAL(void)
 323:fltk-1.3.4-1/jpeg/jdhuff.c **** jpeg_make_d_derived_tbl (j_decompress_ptr cinfo, boolean isDC, int tblno,
 324:fltk-1.3.4-1/jpeg/jdhuff.c **** 			 d_derived_tbl ** pdtbl)
 325:fltk-1.3.4-1/jpeg/jdhuff.c **** {
 326:fltk-1.3.4-1/jpeg/jdhuff.c ****   JHUFF_TBL *htbl;
 327:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl *dtbl;
 328:fltk-1.3.4-1/jpeg/jdhuff.c ****   int p, i, l, si, numsymbols;
 329:fltk-1.3.4-1/jpeg/jdhuff.c ****   int lookbits, ctr;
 330:fltk-1.3.4-1/jpeg/jdhuff.c ****   char huffsize[257];
 331:fltk-1.3.4-1/jpeg/jdhuff.c ****   unsigned int huffcode[257];
 332:fltk-1.3.4-1/jpeg/jdhuff.c ****   unsigned int code;
 333:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 334:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Note that huffsize[] and huffcode[] are filled in code-length order,
 335:fltk-1.3.4-1/jpeg/jdhuff.c ****    * paralleling the order of the symbols themselves in htbl->huffval[].
 336:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
 337:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 338:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Find the input Huffman table */
 339:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 340:fltk-1.3.4-1/jpeg/jdhuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 341:fltk-1.3.4-1/jpeg/jdhuff.c ****   htbl =
 342:fltk-1.3.4-1/jpeg/jdhuff.c ****     isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 343:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (htbl == NULL)
 344:fltk-1.3.4-1/jpeg/jdhuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 345:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 346:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Allocate a workspace if we haven't already done so. */
 347:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (*pdtbl == NULL)
 348:fltk-1.3.4-1/jpeg/jdhuff.c ****     *pdtbl = (d_derived_tbl *)
 349:fltk-1.3.4-1/jpeg/jdhuff.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 350:fltk-1.3.4-1/jpeg/jdhuff.c **** 				  SIZEOF(d_derived_tbl));
 351:fltk-1.3.4-1/jpeg/jdhuff.c ****   dtbl = *pdtbl;
 352:fltk-1.3.4-1/jpeg/jdhuff.c ****   dtbl->pub = htbl;		/* fill in back link */
 353:fltk-1.3.4-1/jpeg/jdhuff.c ****   
 354:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Figure C.1: make table of Huffman code length for each symbol */
 355:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 356:fltk-1.3.4-1/jpeg/jdhuff.c ****   p = 0;
 357:fltk-1.3.4-1/jpeg/jdhuff.c ****   for (l = 1; l <= 16; l++) {
 358:fltk-1.3.4-1/jpeg/jdhuff.c ****     i = (int) htbl->bits[l];
 359:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (i < 0 || p + i > 256)	/* protect against table overrun */
 360:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 361:fltk-1.3.4-1/jpeg/jdhuff.c ****     while (i--)
 362:fltk-1.3.4-1/jpeg/jdhuff.c ****       huffsize[p++] = (char) l;
 363:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 364:fltk-1.3.4-1/jpeg/jdhuff.c ****   huffsize[p] = 0;
 365:fltk-1.3.4-1/jpeg/jdhuff.c ****   numsymbols = p;
 366:fltk-1.3.4-1/jpeg/jdhuff.c ****   
 367:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Figure C.2: generate the codes themselves */
 368:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* We also validate that the counts represent a legal Huffman code tree. */
 369:fltk-1.3.4-1/jpeg/jdhuff.c ****   
 370:fltk-1.3.4-1/jpeg/jdhuff.c ****   code = 0;
 371:fltk-1.3.4-1/jpeg/jdhuff.c ****   si = huffsize[0];
 372:fltk-1.3.4-1/jpeg/jdhuff.c ****   p = 0;
 373:fltk-1.3.4-1/jpeg/jdhuff.c ****   while (huffsize[p]) {
 374:fltk-1.3.4-1/jpeg/jdhuff.c ****     while (((int) huffsize[p]) == si) {
 375:fltk-1.3.4-1/jpeg/jdhuff.c ****       huffcode[p++] = code;
 376:fltk-1.3.4-1/jpeg/jdhuff.c ****       code++;
 377:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 378:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* code is now 1 more than the last code used for codelength si; but
 379:fltk-1.3.4-1/jpeg/jdhuff.c ****      * it must still fit in si bits, since no code is allowed to be all ones.
 380:fltk-1.3.4-1/jpeg/jdhuff.c ****      */
 381:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (((INT32) code) >= (((INT32) 1) << si))
 382:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 383:fltk-1.3.4-1/jpeg/jdhuff.c ****     code <<= 1;
 384:fltk-1.3.4-1/jpeg/jdhuff.c ****     si++;
 385:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 386:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 387:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Figure F.15: generate decoding tables for bit-sequential decoding */
 388:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 389:fltk-1.3.4-1/jpeg/jdhuff.c ****   p = 0;
 390:fltk-1.3.4-1/jpeg/jdhuff.c ****   for (l = 1; l <= 16; l++) {
 391:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (htbl->bits[l]) {
 392:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* valoffset[l] = huffval[] index of 1st symbol of code length l,
 393:fltk-1.3.4-1/jpeg/jdhuff.c ****        * minus the minimum code of length l
 394:fltk-1.3.4-1/jpeg/jdhuff.c ****        */
 395:fltk-1.3.4-1/jpeg/jdhuff.c ****       dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 396:fltk-1.3.4-1/jpeg/jdhuff.c ****       p += htbl->bits[l];
 397:fltk-1.3.4-1/jpeg/jdhuff.c ****       dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 398:fltk-1.3.4-1/jpeg/jdhuff.c ****     } else {
 399:fltk-1.3.4-1/jpeg/jdhuff.c ****       dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 400:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 401:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 402:fltk-1.3.4-1/jpeg/jdhuff.c ****   dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 403:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 404:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Compute lookahead tables to speed up decoding.
 405:fltk-1.3.4-1/jpeg/jdhuff.c ****    * First we set all the table entries to 0, indicating "too long";
 406:fltk-1.3.4-1/jpeg/jdhuff.c ****    * then we iterate through the Huffman codes that are short enough and
 407:fltk-1.3.4-1/jpeg/jdhuff.c ****    * fill in all the entries that correspond to bit sequences starting
 408:fltk-1.3.4-1/jpeg/jdhuff.c ****    * with that code.
 409:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
 410:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 411:fltk-1.3.4-1/jpeg/jdhuff.c ****   MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 412:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 413:fltk-1.3.4-1/jpeg/jdhuff.c ****   p = 0;
 414:fltk-1.3.4-1/jpeg/jdhuff.c ****   for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 415:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 416:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* l = current code's length, p = its index in huffcode[] & huffval[]. */
 417:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Generate left-justified code followed by all possible bit sequences */
 418:fltk-1.3.4-1/jpeg/jdhuff.c ****       lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 419:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 420:fltk-1.3.4-1/jpeg/jdhuff.c **** 	dtbl->look_nbits[lookbits] = l;
 421:fltk-1.3.4-1/jpeg/jdhuff.c **** 	dtbl->look_sym[lookbits] = htbl->huffval[p];
 422:fltk-1.3.4-1/jpeg/jdhuff.c **** 	lookbits++;
 423:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 424:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 425:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 426:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 427:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Validate symbols as being reasonable.
 428:fltk-1.3.4-1/jpeg/jdhuff.c ****    * For AC tables, we make no check, but accept all byte values 0..255.
 429:fltk-1.3.4-1/jpeg/jdhuff.c ****    * For DC tables, we require the symbols to be in range 0..15.
 430:fltk-1.3.4-1/jpeg/jdhuff.c ****    * (Tighter bounds could be applied depending on the data depth and mode,
 431:fltk-1.3.4-1/jpeg/jdhuff.c ****    * but this is sufficient to ensure safe decoding.)
 432:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
 433:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (isDC) {
 434:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (i = 0; i < numsymbols; i++) {
 435:fltk-1.3.4-1/jpeg/jdhuff.c ****       int sym = htbl->huffval[i];
 436:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (sym < 0 || sym > 15)
 437:fltk-1.3.4-1/jpeg/jdhuff.c **** 	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 438:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 439:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 440:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 441:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 442:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 443:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 444:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Out-of-line code for bit fetching.
 445:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Note: current values of get_buffer and bits_left are passed as parameters,
 446:fltk-1.3.4-1/jpeg/jdhuff.c ****  * but are returned in the corresponding fields of the state struct.
 447:fltk-1.3.4-1/jpeg/jdhuff.c ****  *
 448:fltk-1.3.4-1/jpeg/jdhuff.c ****  * On most machines MIN_GET_BITS should be 25 to allow the full 32-bit width
 449:fltk-1.3.4-1/jpeg/jdhuff.c ****  * of get_buffer to be used.  (On machines with wider words, an even larger
 450:fltk-1.3.4-1/jpeg/jdhuff.c ****  * buffer could be used.)  However, on some machines 32-bit shifts are
 451:fltk-1.3.4-1/jpeg/jdhuff.c ****  * quite slow and take time proportional to the number of places shifted.
 452:fltk-1.3.4-1/jpeg/jdhuff.c ****  * (This is true with most PC compilers, for instance.)  In this case it may
 453:fltk-1.3.4-1/jpeg/jdhuff.c ****  * be a win to set MIN_GET_BITS to the minimum value of 15.  This reduces the
 454:fltk-1.3.4-1/jpeg/jdhuff.c ****  * average shift distance at the cost of more calls to jpeg_fill_bit_buffer.
 455:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 456:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 457:fltk-1.3.4-1/jpeg/jdhuff.c **** #ifdef SLOW_SHIFT_32
 458:fltk-1.3.4-1/jpeg/jdhuff.c **** #define MIN_GET_BITS  15	/* minimum allowable value */
 459:fltk-1.3.4-1/jpeg/jdhuff.c **** #else
 460:fltk-1.3.4-1/jpeg/jdhuff.c **** #define MIN_GET_BITS  (BIT_BUF_SIZE-7)
 461:fltk-1.3.4-1/jpeg/jdhuff.c **** #endif
 462:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 463:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 464:fltk-1.3.4-1/jpeg/jdhuff.c **** LOCAL(boolean)
 465:fltk-1.3.4-1/jpeg/jdhuff.c **** jpeg_fill_bit_buffer (bitread_working_state * state,
 466:fltk-1.3.4-1/jpeg/jdhuff.c **** 		      register bit_buf_type get_buffer, register int bits_left,
 467:fltk-1.3.4-1/jpeg/jdhuff.c **** 		      int nbits)
 468:fltk-1.3.4-1/jpeg/jdhuff.c **** /* Load up the bit buffer to a depth of at least nbits */
 469:fltk-1.3.4-1/jpeg/jdhuff.c **** {
  16              		.loc 1 469 0
  17              		.cfi_startproc
  18              	.LVL0:
  19 0000 4157     		pushq	%r15
  20              		.cfi_def_cfa_offset 16
  21              		.cfi_offset 15, -16
  22 0002 4156     		pushq	%r14
  23              		.cfi_def_cfa_offset 24
  24              		.cfi_offset 14, -24
  25 0004 4155     		pushq	%r13
  26              		.cfi_def_cfa_offset 32
  27              		.cfi_offset 13, -32
  28 0006 4154     		pushq	%r12
  29              		.cfi_def_cfa_offset 40
  30              		.cfi_offset 12, -40
  31 0008 4189D4   		movl	%edx, %r12d
  32 000b 55       		pushq	%rbp
  33              		.cfi_def_cfa_offset 48
  34              		.cfi_offset 6, -48
  35 000c 53       		pushq	%rbx
  36              		.cfi_def_cfa_offset 56
  37              		.cfi_offset 3, -56
  38 000d 4989FD   		movq	%rdi, %r13
  39 0010 4889F5   		movq	%rsi, %rbp
  40 0013 4883EC18 		subq	$24, %rsp
  41              		.cfi_def_cfa_offset 80
 470:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Copy heavily used state fields into locals (hopefully registers) */
 471:fltk-1.3.4-1/jpeg/jdhuff.c ****   register const JOCTET * next_input_byte = state->next_input_byte;
 472:fltk-1.3.4-1/jpeg/jdhuff.c ****   register size_t bytes_in_buffer = state->bytes_in_buffer;
 473:fltk-1.3.4-1/jpeg/jdhuff.c ****   j_decompress_ptr cinfo = state->cinfo;
  42              		.loc 1 473 0
  43 0017 4C8B7720 		movq	32(%rdi), %r14
 471:fltk-1.3.4-1/jpeg/jdhuff.c ****   register size_t bytes_in_buffer = state->bytes_in_buffer;
  44              		.loc 1 471 0
  45 001b 4C8B3F   		movq	(%rdi), %r15
  46              	.LVL1:
 469:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Copy heavily used state fields into locals (hopefully registers) */
  47              		.loc 1 469 0
  48 001e 894C240C 		movl	%ecx, 12(%rsp)
 472:fltk-1.3.4-1/jpeg/jdhuff.c ****   j_decompress_ptr cinfo = state->cinfo;
  49              		.loc 1 472 0
  50 0022 488B5F08 		movq	8(%rdi), %rbx
  51              	.LVL2:
 474:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 475:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
 476:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* (It is assumed that no request will be for more than that many bits.) */
 477:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* We fail to do so only if we hit a marker or are forced to suspend. */
 478:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 479:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
  52              		.loc 1 479 0
  53 0026 418B963C 		movl	572(%r14), %edx
  53      020000
  54              	.LVL3:
  55 002d 85D2     		testl	%edx, %edx
  56 002f 0F85CB00 		jne	.L2
  56      0000
 480:fltk-1.3.4-1/jpeg/jdhuff.c ****     while (bits_left < MIN_GET_BITS) {
  57              		.loc 1 480 0
  58 0035 4183FC18 		cmpl	$24, %r12d
  59 0039 7E6A     		jle	.L12
  60              	.LVL4:
  61              	.L3:
 481:fltk-1.3.4-1/jpeg/jdhuff.c ****       register int c;
 482:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 483:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Attempt to read a byte */
 484:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (bytes_in_buffer == 0) {
 485:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 486:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  return FALSE;
 487:fltk-1.3.4-1/jpeg/jdhuff.c **** 	next_input_byte = cinfo->src->next_input_byte;
 488:fltk-1.3.4-1/jpeg/jdhuff.c **** 	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 489:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 490:fltk-1.3.4-1/jpeg/jdhuff.c ****       bytes_in_buffer--;
 491:fltk-1.3.4-1/jpeg/jdhuff.c ****       c = GETJOCTET(*next_input_byte++);
 492:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 493:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* If it's 0xFF, check and discard stuffed zero byte */
 494:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (c == 0xFF) {
 495:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Loop here to discard any padding FF's on terminating marker,
 496:fltk-1.3.4-1/jpeg/jdhuff.c **** 	 * so that we can save a valid unread_marker value.  NOTE: we will
 497:fltk-1.3.4-1/jpeg/jdhuff.c **** 	 * accept multiple FF's followed by a 0 as meaning a single FF data
 498:fltk-1.3.4-1/jpeg/jdhuff.c **** 	 * byte.  This data pattern is not valid according to the standard.
 499:fltk-1.3.4-1/jpeg/jdhuff.c **** 	 */
 500:fltk-1.3.4-1/jpeg/jdhuff.c **** 	do {
 501:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (bytes_in_buffer == 0) {
 502:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 503:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      return FALSE;
 504:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    next_input_byte = cinfo->src->next_input_byte;
 505:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 506:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  }
 507:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  bytes_in_buffer--;
 508:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  c = GETJOCTET(*next_input_byte++);
 509:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} while (c == 0xFF);
 510:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 511:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (c == 0) {
 512:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* Found FF/00, which represents an FF data byte */
 513:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  c = 0xFF;
 514:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} else {
 515:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* Oops, it's actually a marker indicating end of compressed data.
 516:fltk-1.3.4-1/jpeg/jdhuff.c **** 	   * Save the marker code for later use.
 517:fltk-1.3.4-1/jpeg/jdhuff.c **** 	   * Fine point: it might appear that we should save the marker into
 518:fltk-1.3.4-1/jpeg/jdhuff.c **** 	   * bitread working state, not straight into permanent state.  But
 519:fltk-1.3.4-1/jpeg/jdhuff.c **** 	   * once we have hit a marker, we cannot need to suspend within the
 520:fltk-1.3.4-1/jpeg/jdhuff.c **** 	   * current MCU, because we will read no more bytes from the data
 521:fltk-1.3.4-1/jpeg/jdhuff.c **** 	   * source.  So it is OK to update permanent state right away.
 522:fltk-1.3.4-1/jpeg/jdhuff.c **** 	   */
 523:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  cinfo->unread_marker = c;
 524:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* See if we need to insert some fake zero bits. */
 525:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  goto no_more_bytes;
 526:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 527:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 528:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 529:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* OK, load c into get_buffer */
 530:fltk-1.3.4-1/jpeg/jdhuff.c ****       get_buffer = (get_buffer << 8) | c;
 531:fltk-1.3.4-1/jpeg/jdhuff.c ****       bits_left += 8;
 532:fltk-1.3.4-1/jpeg/jdhuff.c ****     } /* end while */
 533:fltk-1.3.4-1/jpeg/jdhuff.c ****   } else {
 534:fltk-1.3.4-1/jpeg/jdhuff.c ****   no_more_bytes:
 535:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* We get here if we've read the marker that terminates the compressed
 536:fltk-1.3.4-1/jpeg/jdhuff.c ****      * data segment.  There should be enough bits in the buffer register
 537:fltk-1.3.4-1/jpeg/jdhuff.c ****      * to satisfy the request; if so, no problem.
 538:fltk-1.3.4-1/jpeg/jdhuff.c ****      */
 539:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (nbits > bits_left) {
 540:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Uh-oh.  Report corrupted data to user and stuff zeroes into
 541:fltk-1.3.4-1/jpeg/jdhuff.c ****        * the data stream, so that we can produce some kind of image.
 542:fltk-1.3.4-1/jpeg/jdhuff.c ****        * We use a nonvolatile flag to ensure that only one warning message
 543:fltk-1.3.4-1/jpeg/jdhuff.c ****        * appears per data segment.
 544:fltk-1.3.4-1/jpeg/jdhuff.c ****        */
 545:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (! ((huff_entropy_ptr) cinfo->entropy)->insufficient_data) {
 546:fltk-1.3.4-1/jpeg/jdhuff.c **** 	WARNMS(cinfo, JWRN_HIT_MARKER);
 547:fltk-1.3.4-1/jpeg/jdhuff.c **** 	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
 548:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 549:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Fill the buffer with zero bits */
 550:fltk-1.3.4-1/jpeg/jdhuff.c ****       get_buffer <<= MIN_GET_BITS - bits_left;
 551:fltk-1.3.4-1/jpeg/jdhuff.c ****       bits_left = MIN_GET_BITS;
 552:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 553:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 554:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 555:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Unload the local registers */
 556:fltk-1.3.4-1/jpeg/jdhuff.c ****   state->next_input_byte = next_input_byte;
  62              		.loc 1 556 0
  63 003b 4D897D00 		movq	%r15, 0(%r13)
 557:fltk-1.3.4-1/jpeg/jdhuff.c ****   state->bytes_in_buffer = bytes_in_buffer;
  64              		.loc 1 557 0
  65 003f 49895D08 		movq	%rbx, 8(%r13)
 558:fltk-1.3.4-1/jpeg/jdhuff.c ****   state->get_buffer = get_buffer;
 559:fltk-1.3.4-1/jpeg/jdhuff.c ****   state->bits_left = bits_left;
 560:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 561:fltk-1.3.4-1/jpeg/jdhuff.c ****   return TRUE;
  66              		.loc 1 561 0
  67 0043 B8010000 		movl	$1, %eax
  67      00
 558:fltk-1.3.4-1/jpeg/jdhuff.c ****   state->get_buffer = get_buffer;
  68              		.loc 1 558 0
  69 0048 49896D10 		movq	%rbp, 16(%r13)
 559:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  70              		.loc 1 559 0
  71 004c 45896518 		movl	%r12d, 24(%r13)
 562:fltk-1.3.4-1/jpeg/jdhuff.c **** }
  72              		.loc 1 562 0
  73 0050 4883C418 		addq	$24, %rsp
  74              		.cfi_remember_state
  75              		.cfi_def_cfa_offset 56
  76 0054 5B       		popq	%rbx
  77              		.cfi_def_cfa_offset 48
  78              	.LVL5:
  79 0055 5D       		popq	%rbp
  80              		.cfi_def_cfa_offset 40
  81              	.LVL6:
  82 0056 415C     		popq	%r12
  83              		.cfi_def_cfa_offset 32
  84              	.LVL7:
  85 0058 415D     		popq	%r13
  86              		.cfi_def_cfa_offset 24
  87              	.LVL8:
  88 005a 415E     		popq	%r14
  89              		.cfi_def_cfa_offset 16
  90              	.LVL9:
  91 005c 415F     		popq	%r15
  92              		.cfi_def_cfa_offset 8
  93              	.LVL10:
  94 005e C3       		ret
  95              	.LVL11:
  96 005f 90       		.p2align 4,,10
  97              		.p2align 3
  98              	.L24:
  99              		.cfi_restore_state
 100              	.LBB7:
 485:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  return FALSE;
 101              		.loc 1 485 0
 102 0060 498B4628 		movq	40(%r14), %rax
 103 0064 4C89F7   		movq	%r14, %rdi
 104 0067 FF5018   		call	*24(%rax)
 105              	.LVL12:
 106 006a 85C0     		testl	%eax, %eax
 107 006c 0F84BE00 		je	.L9
 107      0000
 487:fltk-1.3.4-1/jpeg/jdhuff.c **** 	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 108              		.loc 1 487 0
 109 0072 498B4628 		movq	40(%r14), %rax
 110 0076 4C8B38   		movq	(%rax), %r15
 111              	.LVL13:
 488:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 112              		.loc 1 488 0
 113 0079 488B5808 		movq	8(%rax), %rbx
 114              	.LVL14:
 115              	.L4:
 491:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 116              		.loc 1 491 0
 117 007d 410FB60F 		movzbl	(%r15), %ecx
 490:fltk-1.3.4-1/jpeg/jdhuff.c ****       c = GETJOCTET(*next_input_byte++);
 118              		.loc 1 490 0
 119 0081 4883EB01 		subq	$1, %rbx
 120              	.LVL15:
 491:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 121              		.loc 1 491 0
 122 0085 4983C701 		addq	$1, %r15
 123              	.LVL16:
 494:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Loop here to discard any padding FF's on terminating marker,
 124              		.loc 1 494 0
 125 0089 81F9FF00 		cmpl	$255, %ecx
 125      0000
 491:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 126              		.loc 1 491 0
 127 008f 4889C8   		movq	%rcx, %rax
 128              	.LVL17:
 494:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Loop here to discard any padding FF's on terminating marker,
 129              		.loc 1 494 0
 130 0092 7447     		je	.L10
 131              	.LVL18:
 132              	.L11:
 530:fltk-1.3.4-1/jpeg/jdhuff.c ****       bits_left += 8;
 133              		.loc 1 530 0
 134 0094 48C1E508 		salq	$8, %rbp
 135              	.LVL19:
 531:fltk-1.3.4-1/jpeg/jdhuff.c ****     } /* end while */
 136              		.loc 1 531 0
 137 0098 4183C408 		addl	$8, %r12d
 138              	.LVL20:
 530:fltk-1.3.4-1/jpeg/jdhuff.c ****       bits_left += 8;
 139              		.loc 1 530 0
 140 009c 4809C5   		orq	%rax, %rbp
 141              	.LVL21:
 142              	.LBE7:
 480:fltk-1.3.4-1/jpeg/jdhuff.c ****       register int c;
 143              		.loc 1 480 0
 144 009f 4183FC18 		cmpl	$24, %r12d
 145 00a3 7F96     		jg	.L3
 146              	.L12:
 147              	.LBB8:
 484:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 148              		.loc 1 484 0
 149 00a5 4885DB   		testq	%rbx, %rbx
 150 00a8 75D3     		jne	.L4
 151 00aa EBB4     		jmp	.L24
 152              	.LVL22:
 153 00ac 0F1F4000 		.p2align 4,,10
 154              		.p2align 3
 155              	.L26:
 502:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      return FALSE;
 156              		.loc 1 502 0
 157 00b0 498B4628 		movq	40(%r14), %rax
 158              	.LVL23:
 159 00b4 4C89F7   		movq	%r14, %rdi
 160 00b7 FF5018   		call	*24(%rax)
 161              	.LVL24:
 162 00ba 85C0     		testl	%eax, %eax
 163 00bc 7472     		je	.L9
 504:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 164              		.loc 1 504 0
 165 00be 498B4E28 		movq	40(%r14), %rcx
 166 00c2 488B01   		movq	(%rcx), %rax
 167              	.LVL25:
 505:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  }
 168              		.loc 1 505 0
 169 00c5 488B5908 		movq	8(%rcx), %rbx
 170              	.LVL26:
 171              	.L8:
 508:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} while (c == 0xFF);
 172              		.loc 1 508 0
 173 00c9 4C8D7801 		leaq	1(%rax), %r15
 174 00cd 0FB600   		movzbl	(%rax), %eax
 175              	.LVL27:
 507:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  c = GETJOCTET(*next_input_byte++);
 176              		.loc 1 507 0
 177 00d0 4883EB01 		subq	$1, %rbx
 178              	.LVL28:
 509:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 179              		.loc 1 509 0
 180 00d4 3DFF0000 		cmpl	$255, %eax
 180      00
 181 00d9 750D     		jne	.L25
 182              	.LVL29:
 183              	.L10:
 501:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 184              		.loc 1 501 0
 185 00db 4885DB   		testq	%rbx, %rbx
 186 00de 4C89F8   		movq	%r15, %rax
 187 00e1 75E6     		jne	.L8
 188              	.LVL30:
 189 00e3 EBCB     		jmp	.L26
 190              	.LVL31:
 191              		.p2align 4,,10
 192 00e5 0F1F00   		.p2align 3
 193              	.L25:
 511:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* Found FF/00, which represents an FF data byte */
 194              		.loc 1 511 0
 195 00e8 85C0     		testl	%eax, %eax
 196 00ea 7507     		jne	.L27
 197 00ec B8FF0000 		movl	$255, %eax
 197      00
 198              	.LVL32:
 199 00f1 EBA1     		jmp	.L11
 200              	.LVL33:
 201              	.L27:
 523:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* See if we need to insert some fake zero bits. */
 202              		.loc 1 523 0
 203 00f3 4189863C 		movl	%eax, 572(%r14)
 203      020000
 204              	.LVL34:
 205 00fa 660F1F44 		.p2align 4,,10
 205      0000
 206              		.p2align 3
 207              	.L2:
 208              	.LBE8:
 539:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Uh-oh.  Report corrupted data to user and stuff zeroes into
 209              		.loc 1 539 0
 210 0100 443B6424 		cmpl	12(%rsp), %r12d
 210      0C
 211 0105 0F8D30FF 		jge	.L3
 211      FFFF
 545:fltk-1.3.4-1/jpeg/jdhuff.c **** 	WARNMS(cinfo, JWRN_HIT_MARKER);
 212              		.loc 1 545 0
 213 010b 498B8670 		movq	624(%r14), %rax
 213      020000
 214 0112 8B403C   		movl	60(%rax), %eax
 215 0115 85C0     		testl	%eax, %eax
 216 0117 7428     		je	.L28
 217              	.L13:
 550:fltk-1.3.4-1/jpeg/jdhuff.c ****       bits_left = MIN_GET_BITS;
 218              		.loc 1 550 0
 219 0119 B9190000 		movl	$25, %ecx
 219      00
 220 011e 4429E1   		subl	%r12d, %ecx
 551:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 221              		.loc 1 551 0
 222 0121 41BC1900 		movl	$25, %r12d
 222      0000
 223              	.LVL35:
 550:fltk-1.3.4-1/jpeg/jdhuff.c ****       bits_left = MIN_GET_BITS;
 224              		.loc 1 550 0
 225 0127 48D3E5   		salq	%cl, %rbp
 226              	.LVL36:
 227 012a E90CFFFF 		jmp	.L3
 227      FF
 228              	.LVL37:
 229 012f 90       		.p2align 4,,10
 230              		.p2align 3
 231              	.L9:
 232              		.loc 1 562 0
 233 0130 4883C418 		addq	$24, %rsp
 234              		.cfi_remember_state
 235              		.cfi_def_cfa_offset 56
 236              	.LBB9:
 486:fltk-1.3.4-1/jpeg/jdhuff.c **** 	next_input_byte = cinfo->src->next_input_byte;
 237              		.loc 1 486 0
 238 0134 31C0     		xorl	%eax, %eax
 239              	.LBE9:
 240              		.loc 1 562 0
 241 0136 5B       		popq	%rbx
 242              		.cfi_def_cfa_offset 48
 243              	.LVL38:
 244 0137 5D       		popq	%rbp
 245              		.cfi_def_cfa_offset 40
 246              	.LVL39:
 247 0138 415C     		popq	%r12
 248              		.cfi_def_cfa_offset 32
 249              	.LVL40:
 250 013a 415D     		popq	%r13
 251              		.cfi_def_cfa_offset 24
 252              	.LVL41:
 253 013c 415E     		popq	%r14
 254              		.cfi_def_cfa_offset 16
 255              	.LVL42:
 256 013e 415F     		popq	%r15
 257              		.cfi_def_cfa_offset 8
 258              	.LVL43:
 259 0140 C3       		ret
 260              	.LVL44:
 261              	.L28:
 262              		.cfi_restore_state
 546:fltk-1.3.4-1/jpeg/jdhuff.c **** 	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
 263              		.loc 1 546 0
 264 0141 498B06   		movq	(%r14), %rax
 265 0144 BEFFFFFF 		movl	$-1, %esi
 265      FF
 266 0149 4C89F7   		movq	%r14, %rdi
 267 014c C7402878 		movl	$120, 40(%rax)
 267      000000
 268 0153 498B06   		movq	(%r14), %rax
 269 0156 FF5008   		call	*8(%rax)
 270              	.LVL45:
 547:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 271              		.loc 1 547 0
 272 0159 498B8670 		movq	624(%r14), %rax
 272      020000
 273 0160 C7403C01 		movl	$1, 60(%rax)
 273      000000
 274 0167 EBB0     		jmp	.L13
 275              		.cfi_endproc
 276              	.LFE62:
 278              		.section	.text.unlikely.jpeg_fill_bit_buffer
 279              	.LCOLDE0:
 280              		.section	.text.jpeg_fill_bit_buffer
 281              	.LHOTE0:
 282              		.section	.text.unlikely.jpeg_huff_decode,"ax",@progbits
 283              	.LCOLDB1:
 284              		.section	.text.jpeg_huff_decode,"ax",@progbits
 285              	.LHOTB1:
 286              		.p2align 4,,15
 288              	jpeg_huff_decode:
 289              	.LFB63:
 563:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 564:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 565:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 566:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Figure F.12: extend sign bit.
 567:fltk-1.3.4-1/jpeg/jdhuff.c ****  * On some machines, a shift and sub will be faster than a table lookup.
 568:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 569:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 570:fltk-1.3.4-1/jpeg/jdhuff.c **** #ifdef AVOID_TABLES
 571:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 572:fltk-1.3.4-1/jpeg/jdhuff.c **** #define BIT_MASK(nbits)   ((1<<(nbits))-1)
 573:fltk-1.3.4-1/jpeg/jdhuff.c **** #define HUFF_EXTEND(x,s)  ((x) < (1<<((s)-1)) ? (x) - ((1<<(s))-1) : (x))
 574:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 575:fltk-1.3.4-1/jpeg/jdhuff.c **** #else
 576:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 577:fltk-1.3.4-1/jpeg/jdhuff.c **** #define BIT_MASK(nbits)   bmask[nbits]
 578:fltk-1.3.4-1/jpeg/jdhuff.c **** #define HUFF_EXTEND(x,s)  ((x) <= bmask[(s) - 1] ? (x) - bmask[s] : (x))
 579:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 580:fltk-1.3.4-1/jpeg/jdhuff.c **** static const int bmask[16] =	/* bmask[n] is mask for n rightmost bits */
 581:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 0, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F, 0x003F, 0x007F, 0x00FF,
 582:fltk-1.3.4-1/jpeg/jdhuff.c ****     0x01FF, 0x03FF, 0x07FF, 0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF };
 583:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 584:fltk-1.3.4-1/jpeg/jdhuff.c **** #endif /* AVOID_TABLES */
 585:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 586:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 587:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 588:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Out-of-line code for Huffman code decoding.
 589:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 590:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 591:fltk-1.3.4-1/jpeg/jdhuff.c **** LOCAL(int)
 592:fltk-1.3.4-1/jpeg/jdhuff.c **** jpeg_huff_decode (bitread_working_state * state,
 593:fltk-1.3.4-1/jpeg/jdhuff.c **** 		  register bit_buf_type get_buffer, register int bits_left,
 594:fltk-1.3.4-1/jpeg/jdhuff.c **** 		  d_derived_tbl * htbl, int min_bits)
 595:fltk-1.3.4-1/jpeg/jdhuff.c **** {
 290              		.loc 1 595 0
 291              		.cfi_startproc
 292              	.LVL46:
 293 0000 4155     		pushq	%r13
 294              		.cfi_def_cfa_offset 16
 295              		.cfi_offset 13, -16
 296 0002 4154     		pushq	%r12
 297              		.cfi_def_cfa_offset 24
 298              		.cfi_offset 12, -24
 299 0004 4589C5   		movl	%r8d, %r13d
 300 0007 55       		pushq	%rbp
 301              		.cfi_def_cfa_offset 32
 302              		.cfi_offset 6, -32
 303 0008 53       		pushq	%rbx
 304              		.cfi_def_cfa_offset 40
 305              		.cfi_offset 3, -40
 306 0009 4989FC   		movq	%rdi, %r12
 307 000c 4889CD   		movq	%rcx, %rbp
 308 000f 4883EC08 		subq	$8, %rsp
 309              		.cfi_def_cfa_offset 48
 596:fltk-1.3.4-1/jpeg/jdhuff.c ****   register int l = min_bits;
 597:fltk-1.3.4-1/jpeg/jdhuff.c ****   register INT32 code;
 598:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 599:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* HUFF_DECODE has determined that the code is at least min_bits */
 600:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* bits long, so fetch that many bits in one swoop. */
 601:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 602:fltk-1.3.4-1/jpeg/jdhuff.c ****   CHECK_BIT_BUFFER(*state, l, return -1);
 310              		.loc 1 602 0
 311 0013 4139D0   		cmpl	%edx, %r8d
 312 0016 0F8FA400 		jg	.L43
 312      0000
 313              	.LVL47:
 314              	.L30:
 603:fltk-1.3.4-1/jpeg/jdhuff.c ****   code = GET_BITS(l);
 315              		.loc 1 603 0
 316 001c 4429EA   		subl	%r13d, %edx
 317              	.LVL48:
 318 001f 4889F0   		movq	%rsi, %rax
 319 0022 89D1     		movl	%edx, %ecx
 320 0024 48D3F8   		sarq	%cl, %rax
 321 0027 4963CD   		movslq	%r13d, %rcx
 322 002a 23048D00 		andl	bmask(,%rcx,4), %eax
 322      000000
 323 0031 4898     		cltq
 324              	.LVL49:
 604:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 605:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Collect the rest of the Huffman code one bit at a time. */
 606:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* This is per Figure F.16 in the JPEG spec. */
 607:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 608:fltk-1.3.4-1/jpeg/jdhuff.c ****   while (code > htbl->maxcode[l]) {
 325              		.loc 1 608 0
 326 0033 483B44CD 		cmpq	0(%rbp,%rcx,8), %rax
 326      00
 327 0038 7F25     		jg	.L36
 328 003a EB54     		jmp	.L33
 329              	.LVL50:
 330 003c 0F1F4000 		.p2align 4,,10
 331              		.p2align 3
 332              	.L34:
 609:fltk-1.3.4-1/jpeg/jdhuff.c ****     code <<= 1;
 610:fltk-1.3.4-1/jpeg/jdhuff.c ****     CHECK_BIT_BUFFER(*state, 1, return -1);
 611:fltk-1.3.4-1/jpeg/jdhuff.c ****     code |= GET_BITS(1);
 333              		.loc 1 611 0
 334 0040 83EA01   		subl	$1, %edx
 335              	.LVL51:
 336 0043 4889F0   		movq	%rsi, %rax
 612:fltk-1.3.4-1/jpeg/jdhuff.c ****     l++;
 337              		.loc 1 612 0
 338 0046 4183C501 		addl	$1, %r13d
 339              	.LVL52:
 611:fltk-1.3.4-1/jpeg/jdhuff.c ****     l++;
 340              		.loc 1 611 0
 341 004a 89D1     		movl	%edx, %ecx
 342 004c 48D3F8   		sarq	%cl, %rax
 608:fltk-1.3.4-1/jpeg/jdhuff.c ****     code <<= 1;
 343              		.loc 1 608 0
 344 004f 4963CD   		movslq	%r13d, %rcx
 611:fltk-1.3.4-1/jpeg/jdhuff.c ****     l++;
 345              		.loc 1 611 0
 346 0052 83E001   		andl	$1, %eax
 347 0055 4809D8   		orq	%rbx, %rax
 348              	.LVL53:
 608:fltk-1.3.4-1/jpeg/jdhuff.c ****     code <<= 1;
 349              		.loc 1 608 0
 350 0058 483944CD 		cmpq	%rax, 0(%rbp,%rcx,8)
 350      00
 351 005d 7D31     		jge	.L33
 352              	.L36:
 610:fltk-1.3.4-1/jpeg/jdhuff.c ****     code |= GET_BITS(1);
 353              		.loc 1 610 0
 354 005f 85D2     		testl	%edx, %edx
 609:fltk-1.3.4-1/jpeg/jdhuff.c ****     CHECK_BIT_BUFFER(*state, 1, return -1);
 355              		.loc 1 609 0
 356 0061 488D1C00 		leaq	(%rax,%rax), %rbx
 357              	.LVL54:
 610:fltk-1.3.4-1/jpeg/jdhuff.c ****     code |= GET_BITS(1);
 358              		.loc 1 610 0
 359 0065 7FD9     		jg	.L34
 610:fltk-1.3.4-1/jpeg/jdhuff.c ****     code |= GET_BITS(1);
 360              		.loc 1 610 0 is_stmt 0 discriminator 1
 361 0067 B9010000 		movl	$1, %ecx
 361      00
 362 006c 4C89E7   		movq	%r12, %rdi
 363 006f E8000000 		call	jpeg_fill_bit_buffer
 363      00
 364              	.LVL55:
 365 0074 85C0     		testl	%eax, %eax
 366 0076 0F848B00 		je	.L35
 366      0000
 610:fltk-1.3.4-1/jpeg/jdhuff.c ****     code |= GET_BITS(1);
 367              		.loc 1 610 0 discriminator 3
 368 007c 498B7424 		movq	16(%r12), %rsi
 368      10
 369              	.LVL56:
 370 0081 418B5424 		movl	24(%r12), %edx
 370      18
 371              	.LVL57:
 372 0086 EBB8     		jmp	.L34
 373              	.LVL58:
 374 0088 0F1F8400 		.p2align 4,,10
 374      00000000 
 375              		.p2align 3
 376              	.L33:
 613:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 614:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 615:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Unload the local registers */
 616:fltk-1.3.4-1/jpeg/jdhuff.c ****   state->get_buffer = get_buffer;
 617:fltk-1.3.4-1/jpeg/jdhuff.c ****   state->bits_left = bits_left;
 618:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 619:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* With garbage input we may reach the sentinel value l = 17. */
 620:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 621:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (l > 16) {
 377              		.loc 1 621 0 is_stmt 1
 378 0090 4183FD10 		cmpl	$16, %r13d
 616:fltk-1.3.4-1/jpeg/jdhuff.c ****   state->bits_left = bits_left;
 379              		.loc 1 616 0
 380 0094 49897424 		movq	%rsi, 16(%r12)
 380      10
 617:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 381              		.loc 1 617 0
 382 0099 41895424 		movl	%edx, 24(%r12)
 382      18
 383              		.loc 1 621 0
 384 009e 7F3B     		jg	.L44
 622:fltk-1.3.4-1/jpeg/jdhuff.c ****     WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 623:fltk-1.3.4-1/jpeg/jdhuff.c ****     return 0;			/* fake a zero as the safest result */
 624:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 625:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 626:fltk-1.3.4-1/jpeg/jdhuff.c ****   return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
 385              		.loc 1 626 0
 386 00a0 0384CD90 		addl	144(%rbp,%rcx,8), %eax
 386      000000
 387              	.LVL59:
 388 00a7 488B9518 		movq	280(%rbp), %rdx
 388      010000
 389              	.LVL60:
 390 00ae 4898     		cltq
 391 00b0 0FB64402 		movzbl	17(%rdx,%rax), %eax
 391      11
 627:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 392              		.loc 1 627 0
 393 00b5 4883C408 		addq	$8, %rsp
 394              		.cfi_remember_state
 395              		.cfi_def_cfa_offset 40
 396 00b9 5B       		popq	%rbx
 397              		.cfi_def_cfa_offset 32
 398 00ba 5D       		popq	%rbp
 399              		.cfi_def_cfa_offset 24
 400              	.LVL61:
 401 00bb 415C     		popq	%r12
 402              		.cfi_def_cfa_offset 16
 403              	.LVL62:
 404 00bd 415D     		popq	%r13
 405              		.cfi_def_cfa_offset 8
 406              	.LVL63:
 407 00bf C3       		ret
 408              	.LVL64:
 409              		.p2align 4,,10
 410              		.p2align 3
 411              	.L43:
 412              		.cfi_restore_state
 602:fltk-1.3.4-1/jpeg/jdhuff.c ****   code = GET_BITS(l);
 413              		.loc 1 602 0 discriminator 1
 414 00c0 4489C1   		movl	%r8d, %ecx
 415              	.LVL65:
 416 00c3 E8000000 		call	jpeg_fill_bit_buffer
 416      00
 417              	.LVL66:
 418 00c8 85C0     		testl	%eax, %eax
 419 00ca 743B     		je	.L35
 602:fltk-1.3.4-1/jpeg/jdhuff.c ****   code = GET_BITS(l);
 420              		.loc 1 602 0 is_stmt 0 discriminator 3
 421 00cc 498B7424 		movq	16(%r12), %rsi
 421      10
 422              	.LVL67:
 423 00d1 418B5424 		movl	24(%r12), %edx
 423      18
 424              	.LVL68:
 425 00d6 E941FFFF 		jmp	.L30
 425      FF
 426              	.LVL69:
 427              	.L44:
 622:fltk-1.3.4-1/jpeg/jdhuff.c ****     WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 428              		.loc 1 622 0 is_stmt 1
 429 00db 498B4424 		movq	32(%r12), %rax
 429      20
 430              	.LVL70:
 431 00e0 BEFFFFFF 		movl	$-1, %esi
 431      FF
 432              	.LVL71:
 433 00e5 488B00   		movq	(%rax), %rax
 434 00e8 C7402879 		movl	$121, 40(%rax)
 434      000000
 435              	.LVL72:
 436 00ef 498B7C24 		movq	32(%r12), %rdi
 436      20
 437 00f4 488B07   		movq	(%rdi), %rax
 438 00f7 FF5008   		call	*8(%rax)
 439              	.LVL73:
 440              		.loc 1 627 0
 441 00fa 4883C408 		addq	$8, %rsp
 442              		.cfi_remember_state
 443              		.cfi_def_cfa_offset 40
 623:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 444              		.loc 1 623 0
 445 00fe 31C0     		xorl	%eax, %eax
 446              		.loc 1 627 0
 447 0100 5B       		popq	%rbx
 448              		.cfi_def_cfa_offset 32
 449 0101 5D       		popq	%rbp
 450              		.cfi_def_cfa_offset 24
 451              	.LVL74:
 452 0102 415C     		popq	%r12
 453              		.cfi_def_cfa_offset 16
 454              	.LVL75:
 455 0104 415D     		popq	%r13
 456              		.cfi_def_cfa_offset 8
 457              	.LVL76:
 458 0106 C3       		ret
 459              	.LVL77:
 460              	.L35:
 461              		.cfi_restore_state
 462 0107 4883C408 		addq	$8, %rsp
 463              		.cfi_def_cfa_offset 40
 602:fltk-1.3.4-1/jpeg/jdhuff.c ****   code = GET_BITS(l);
 464              		.loc 1 602 0
 465 010b B8FFFFFF 		movl	$-1, %eax
 465      FF
 466              		.loc 1 627 0
 467 0110 5B       		popq	%rbx
 468              		.cfi_def_cfa_offset 32
 469 0111 5D       		popq	%rbp
 470              		.cfi_def_cfa_offset 24
 471              	.LVL78:
 472 0112 415C     		popq	%r12
 473              		.cfi_def_cfa_offset 16
 474              	.LVL79:
 475 0114 415D     		popq	%r13
 476              		.cfi_def_cfa_offset 8
 477              	.LVL80:
 478 0116 C3       		ret
 479              		.cfi_endproc
 480              	.LFE63:
 482              		.section	.text.unlikely.jpeg_huff_decode
 483              	.LCOLDE1:
 484              		.section	.text.jpeg_huff_decode
 485              	.LHOTE1:
 486              		.section	.text.unlikely.finish_pass_huff,"ax",@progbits
 487              	.LCOLDB2:
 488              		.section	.text.finish_pass_huff,"ax",@progbits
 489              	.LHOTB2:
 490              		.p2align 4,,15
 492              	finish_pass_huff:
 493              	.LFB64:
 628:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 629:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 630:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 631:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Finish up at the end of a Huffman-compressed scan.
 632:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 633:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 634:fltk-1.3.4-1/jpeg/jdhuff.c **** METHODDEF(void)
 635:fltk-1.3.4-1/jpeg/jdhuff.c **** finish_pass_huff (j_decompress_ptr cinfo)
 636:fltk-1.3.4-1/jpeg/jdhuff.c **** {
 494              		.loc 1 636 0
 495              		.cfi_startproc
 496              	.LVL81:
 637:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 497              		.loc 1 637 0
 498 0000 488B8F70 		movq	624(%rdi), %rcx
 498      020000
 499              	.LVL82:
 638:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 639:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Throw away any unused bits remaining in bit buffer; */
 640:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* include any full bytes in next_marker's count of discarded bytes */
 641:fltk-1.3.4-1/jpeg/jdhuff.c ****   cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 500              		.loc 1 641 0
 501 0007 488BB768 		movq	616(%rdi), %rsi
 501      020000
 502 000e 8B5120   		movl	32(%rcx), %edx
 503 0011 8D4207   		leal	7(%rdx), %eax
 504 0014 85D2     		testl	%edx, %edx
 505 0016 0F49C2   		cmovns	%edx, %eax
 506 0019 C1F803   		sarl	$3, %eax
 507 001c 014624   		addl	%eax, 36(%rsi)
 642:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->bitstate.bits_left = 0;
 508              		.loc 1 642 0
 509 001f C7412000 		movl	$0, 32(%rcx)
 509      000000
 510 0026 C3       		ret
 511              		.cfi_endproc
 512              	.LFE64:
 514              		.section	.text.unlikely.finish_pass_huff
 515              	.LCOLDE2:
 516              		.section	.text.finish_pass_huff
 517              	.LHOTE2:
 518              		.section	.text.unlikely.process_restart,"ax",@progbits
 519              	.LCOLDB3:
 520              		.section	.text.process_restart,"ax",@progbits
 521              	.LHOTB3:
 522              		.p2align 4,,15
 524              	process_restart:
 525              	.LFB65:
 643:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 644:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 645:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 646:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 647:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Check for a restart marker & resynchronize decoder.
 648:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Returns FALSE if must suspend.
 649:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 650:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 651:fltk-1.3.4-1/jpeg/jdhuff.c **** LOCAL(boolean)
 652:fltk-1.3.4-1/jpeg/jdhuff.c **** process_restart (j_decompress_ptr cinfo)
 653:fltk-1.3.4-1/jpeg/jdhuff.c **** {
 526              		.loc 1 653 0
 527              		.cfi_startproc
 528              	.LVL83:
 529 0000 55       		pushq	%rbp
 530              		.cfi_def_cfa_offset 16
 531              		.cfi_offset 6, -16
 532 0001 53       		pushq	%rbx
 533              		.cfi_def_cfa_offset 24
 534              		.cfi_offset 3, -24
 535 0002 4889FB   		movq	%rdi, %rbx
 536 0005 4883EC08 		subq	$8, %rsp
 537              		.cfi_def_cfa_offset 32
 654:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 538              		.loc 1 654 0
 539 0009 488BAF70 		movq	624(%rdi), %rbp
 539      020000
 540              	.LVL84:
 541              	.LBB10:
 542              	.LBB11:
 641:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->bitstate.bits_left = 0;
 543              		.loc 1 641 0
 544 0010 488B8F68 		movq	616(%rdi), %rcx
 544      020000
 545 0017 8B5520   		movl	32(%rbp), %edx
 546 001a 8D4207   		leal	7(%rdx), %eax
 547 001d 85D2     		testl	%edx, %edx
 548 001f 0F49C2   		cmovns	%edx, %eax
 549 0022 C1F803   		sarl	$3, %eax
 550 0025 014124   		addl	%eax, 36(%rcx)
 642:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 551              		.loc 1 642 0
 552 0028 C7452000 		movl	$0, 32(%rbp)
 552      000000
 553              	.LVL85:
 554              	.LBE11:
 555              	.LBE10:
 655:fltk-1.3.4-1/jpeg/jdhuff.c ****   int ci;
 656:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 657:fltk-1.3.4-1/jpeg/jdhuff.c ****   finish_pass_huff(cinfo);
 658:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 659:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Advance past the RSTn marker */
 660:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (! (*cinfo->marker->read_restart_marker) (cinfo))
 556              		.loc 1 660 0
 557 002f 488B8768 		movq	616(%rdi), %rax
 557      020000
 558 0036 FF5010   		call	*16(%rax)
 559              	.LVL86:
 560 0039 85C0     		testl	%eax, %eax
 561 003b 744B     		je	.L47
 562              	.LVL87:
 661:fltk-1.3.4-1/jpeg/jdhuff.c ****     return FALSE;
 662:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 663:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Re-initialize DC predictions to 0 */
 664:fltk-1.3.4-1/jpeg/jdhuff.c ****   for (ci = 0; ci < cinfo->comps_in_scan; ci++)
 563              		.loc 1 664 0 discriminator 1
 564 003d 8B8BC001 		movl	448(%rbx), %ecx
 564      0000
 565 0043 31C0     		xorl	%eax, %eax
 566 0045 488D552C 		leaq	44(%rbp), %rdx
 567 0049 85C9     		testl	%ecx, %ecx
 568 004b 7E15     		jle	.L51
 569              	.LVL88:
 570              	.L54:
 665:fltk-1.3.4-1/jpeg/jdhuff.c ****     entropy->saved.last_dc_val[ci] = 0;
 571              		.loc 1 665 0 discriminator 3
 572 004d C7020000 		movl	$0, (%rdx)
 572      0000
 664:fltk-1.3.4-1/jpeg/jdhuff.c ****     entropy->saved.last_dc_val[ci] = 0;
 573              		.loc 1 664 0 discriminator 3
 574 0053 83C001   		addl	$1, %eax
 575              	.LVL89:
 576 0056 4883C204 		addq	$4, %rdx
 577 005a 3983C001 		cmpl	%eax, 448(%rbx)
 577      0000
 578 0060 7FEB     		jg	.L54
 579              	.LVL90:
 580              	.L51:
 666:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Re-init EOB run count, too */
 667:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->saved.EOBRUN = 0;
 581              		.loc 1 667 0
 582 0062 C7452800 		movl	$0, 40(%rbp)
 582      000000
 668:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 669:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Reset restart counter */
 670:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->restarts_to_go = cinfo->restart_interval;
 583              		.loc 1 670 0
 584 0069 8B837401 		movl	372(%rbx), %eax
 584      0000
 585 006f 894540   		movl	%eax, 64(%rbp)
 671:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 672:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Reset out-of-data flag, unless read_restart_marker left us smack up
 673:fltk-1.3.4-1/jpeg/jdhuff.c ****    * against a marker.  In that case we will end up treating the next data
 674:fltk-1.3.4-1/jpeg/jdhuff.c ****    * segment as empty, and we can avoid producing bogus output pixels by
 675:fltk-1.3.4-1/jpeg/jdhuff.c ****    * leaving the flag set.
 676:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
 677:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (cinfo->unread_marker == 0)
 586              		.loc 1 677 0
 587 0072 8B833C02 		movl	572(%rbx), %eax
 587      0000
 588 0078 85C0     		testl	%eax, %eax
 589 007a 7507     		jne	.L58
 678:fltk-1.3.4-1/jpeg/jdhuff.c ****     entropy->insufficient_data = FALSE;
 590              		.loc 1 678 0
 591 007c C7453C00 		movl	$0, 60(%rbp)
 591      000000
 592              	.L58:
 679:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 680:fltk-1.3.4-1/jpeg/jdhuff.c ****   return TRUE;
 593              		.loc 1 680 0
 594 0083 B8010000 		movl	$1, %eax
 594      00
 595              	.L47:
 681:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 596              		.loc 1 681 0
 597 0088 4883C408 		addq	$8, %rsp
 598              		.cfi_def_cfa_offset 24
 599 008c 5B       		popq	%rbx
 600              		.cfi_def_cfa_offset 16
 601              	.LVL91:
 602 008d 5D       		popq	%rbp
 603              		.cfi_def_cfa_offset 8
 604              	.LVL92:
 605 008e C3       		ret
 606              		.cfi_endproc
 607              	.LFE65:
 609              		.section	.text.unlikely.process_restart
 610              	.LCOLDE3:
 611              		.section	.text.process_restart
 612              	.LHOTE3:
 613              		.section	.text.unlikely.decode_mcu_DC_first,"ax",@progbits
 614              	.LCOLDB4:
 615              		.section	.text.decode_mcu_DC_first,"ax",@progbits
 616              	.LHOTB4:
 617              		.p2align 4,,15
 619              	decode_mcu_DC_first:
 620              	.LFB66:
 682:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 683:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 684:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 685:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Huffman MCU decoding.
 686:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Each of these routines decodes and returns one MCU's worth of
 687:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Huffman-compressed coefficients. 
 688:fltk-1.3.4-1/jpeg/jdhuff.c ****  * The coefficients are reordered from zigzag order into natural array order,
 689:fltk-1.3.4-1/jpeg/jdhuff.c ****  * but are not dequantized.
 690:fltk-1.3.4-1/jpeg/jdhuff.c ****  *
 691:fltk-1.3.4-1/jpeg/jdhuff.c ****  * The i'th block of the MCU is stored into the block pointed to by
 692:fltk-1.3.4-1/jpeg/jdhuff.c ****  * MCU_data[i].  WE ASSUME THIS AREA IS INITIALLY ZEROED BY THE CALLER.
 693:fltk-1.3.4-1/jpeg/jdhuff.c ****  * (Wholesale zeroing is usually a little faster than retail...)
 694:fltk-1.3.4-1/jpeg/jdhuff.c ****  *
 695:fltk-1.3.4-1/jpeg/jdhuff.c ****  * We return FALSE if data source requested suspension.  In that case no
 696:fltk-1.3.4-1/jpeg/jdhuff.c ****  * changes have been made to permanent state.  (Exception: some output
 697:fltk-1.3.4-1/jpeg/jdhuff.c ****  * coefficients may already have been assigned.  This is harmless for
 698:fltk-1.3.4-1/jpeg/jdhuff.c ****  * spectral selection, since we'll just re-assign them on the next call.
 699:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Successive approximation AC refinement has to be more careful, however.)
 700:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 701:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 702:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 703:fltk-1.3.4-1/jpeg/jdhuff.c ****  * MCU decoding for DC initial scan (either spectral selection,
 704:fltk-1.3.4-1/jpeg/jdhuff.c ****  * or first pass of successive approximation).
 705:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 706:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 707:fltk-1.3.4-1/jpeg/jdhuff.c **** METHODDEF(boolean)
 708:fltk-1.3.4-1/jpeg/jdhuff.c **** decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
 709:fltk-1.3.4-1/jpeg/jdhuff.c **** {   
 621              		.loc 1 709 0
 622              		.cfi_startproc
 623              	.LVL93:
 624 0000 4157     		pushq	%r15
 625              		.cfi_def_cfa_offset 16
 626              		.cfi_offset 15, -16
 627 0002 4156     		pushq	%r14
 628              		.cfi_def_cfa_offset 24
 629              		.cfi_offset 14, -24
 630 0004 4989FF   		movq	%rdi, %r15
 631 0007 4155     		pushq	%r13
 632              		.cfi_def_cfa_offset 32
 633              		.cfi_offset 13, -32
 634 0009 4154     		pushq	%r12
 635              		.cfi_def_cfa_offset 40
 636              		.cfi_offset 12, -40
 637 000b 55       		pushq	%rbp
 638              		.cfi_def_cfa_offset 48
 639              		.cfi_offset 6, -48
 640 000c 53       		pushq	%rbx
 641              		.cfi_def_cfa_offset 56
 642              		.cfi_offset 3, -56
 643 000d 4889F5   		movq	%rsi, %rbp
 644 0010 4883EC78 		subq	$120, %rsp
 645              		.cfi_def_cfa_offset 176
 710:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 711:fltk-1.3.4-1/jpeg/jdhuff.c ****   int Al = cinfo->Al;
 712:fltk-1.3.4-1/jpeg/jdhuff.c ****   register int s, r;
 713:fltk-1.3.4-1/jpeg/jdhuff.c ****   int blkn, ci;
 714:fltk-1.3.4-1/jpeg/jdhuff.c ****   JBLOCKROW block;
 715:fltk-1.3.4-1/jpeg/jdhuff.c ****   BITREAD_STATE_VARS;
 716:fltk-1.3.4-1/jpeg/jdhuff.c ****   savable_state state;
 717:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl * tbl;
 718:fltk-1.3.4-1/jpeg/jdhuff.c ****   jpeg_component_info * compptr;
 719:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 720:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Process restart marker if needed; may have to suspend */
 721:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (cinfo->restart_interval) {
 646              		.loc 1 721 0
 647 0014 448B9774 		movl	372(%rdi), %r10d
 647      010000
 709:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 648              		.loc 1 709 0
 649 001b 64488B04 		movq	%fs:40, %rax
 649      25280000 
 649      00
 650 0024 48894424 		movq	%rax, 104(%rsp)
 650      68
 651 0029 31C0     		xorl	%eax, %eax
 710:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 652              		.loc 1 710 0
 653 002b 488B8770 		movq	624(%rdi), %rax
 653      020000
 654              		.loc 1 721 0
 655 0032 4585D2   		testl	%r10d, %r10d
 710:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 656              		.loc 1 710 0
 657 0035 48890424 		movq	%rax, (%rsp)
 658              	.LVL94:
 711:fltk-1.3.4-1/jpeg/jdhuff.c ****   register int s, r;
 659              		.loc 1 711 0
 660 0039 8B872802 		movl	552(%rdi), %eax
 660      0000
 661              	.LVL95:
 662 003f 8944240C 		movl	%eax, 12(%rsp)
 663              	.LVL96:
 664              		.loc 1 721 0
 665 0043 7411     		je	.L63
 722:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (entropy->restarts_to_go == 0)
 666              		.loc 1 722 0
 667 0045 488B0424 		movq	(%rsp), %rax
 668              	.LVL97:
 669 0049 448B4040 		movl	64(%rax), %r8d
 670 004d 4585C0   		testl	%r8d, %r8d
 671 0050 0F844202 		je	.L88
 671      0000
 672              	.LVL98:
 673              	.L63:
 723:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (! process_restart(cinfo))
 724:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 725:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 726:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 727:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* If we've run out of data, just leave the MCU set to zeroes.
 728:fltk-1.3.4-1/jpeg/jdhuff.c ****    * This way, we return uniform gray for the remainder of the segment.
 729:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
 730:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (! entropy->insufficient_data) {
 674              		.loc 1 730 0
 675 0056 488B0424 		movq	(%rsp), %rax
 676 005a 448B483C 		movl	60(%rax), %r9d
 677 005e 4585C9   		testl	%r9d, %r9d
 678 0061 0F858101 		jne	.L62
 678      0000
 731:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 732:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Load up working state */
 733:fltk-1.3.4-1/jpeg/jdhuff.c ****     BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 679              		.loc 1 733 0
 680 0067 488B1C24 		movq	(%rsp), %rbx
 681 006b 498B4728 		movq	40(%r15), %rax
 682 006f 4C897C24 		movq	%r15, 64(%rsp)
 682      40
 734:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 683              		.loc 1 734 0
 684 0074 488B7B28 		movq	40(%rbx), %rdi
 733:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 685              		.loc 1 733 0
 686 0078 488B08   		movq	(%rax), %rcx
 687 007b 488B5008 		movq	8(%rax), %rdx
 688 007f 488B7318 		movq	24(%rbx), %rsi
 689              	.LVL99:
 690              		.loc 1 734 0
 691 0083 48897C24 		movq	%rdi, 80(%rsp)
 691      50
 692 0088 488B7B30 		movq	48(%rbx), %rdi
 733:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 693              		.loc 1 733 0
 694 008c 48895424 		movq	%rdx, 40(%rsp)
 694      28
 695 0091 48894C24 		movq	%rcx, 32(%rsp)
 695      20
 696 0096 8B5320   		movl	32(%rbx), %edx
 697              	.LVL100:
 698              		.loc 1 734 0
 699 0099 48897C24 		movq	%rdi, 88(%rsp)
 699      58
 700 009e 8B7B38   		movl	56(%rbx), %edi
 701 00a1 897C2460 		movl	%edi, 96(%rsp)
 702              	.LVL101:
 735:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 736:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Outer loop handles each block in the MCU */
 737:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 738:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 703              		.loc 1 738 0
 704 00a5 418BBFF0 		movl	496(%r15), %edi
 704      010000
 705 00ac 85FF     		testl	%edi, %edi
 706 00ae 0F8EFD00 		jle	.L65
 706      0000
 707 00b4 4D8DA7F4 		leaq	500(%r15), %r12
 707      010000
 708 00bb 4531ED   		xorl	%r13d, %r13d
 709 00be EB73     		jmp	.L72
 710              	.LVL102:
 711              		.p2align 4,,10
 712              		.p2align 3
 713              	.L92:
 714              	.LBB12:
 739:fltk-1.3.4-1/jpeg/jdhuff.c ****       block = MCU_data[blkn];
 740:fltk-1.3.4-1/jpeg/jdhuff.c ****       ci = cinfo->MCU_membership[blkn];
 741:fltk-1.3.4-1/jpeg/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 742:fltk-1.3.4-1/jpeg/jdhuff.c ****       tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 743:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 744:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Decode a single block's worth of coefficients */
 745:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 746:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Section F.2.2.1: decode the DC coefficient difference */
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 715              		.loc 1 747 0 discriminator 8
 716 00c0 450FB684 		movzbl	1312(%r9,%rax), %r8d
 716      01200500 
 716      00
 717 00c9 29CA     		subl	%ecx, %edx
 718              	.LVL103:
 719              	.L69:
 720              	.LBE12:
 748:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 721              		.loc 1 748 0
 722 00cb 4585C0   		testl	%r8d, %r8d
 723 00ce 7438     		je	.L70
 749:fltk-1.3.4-1/jpeg/jdhuff.c **** 	CHECK_BIT_BUFFER(br_state, s, return FALSE);
 724              		.loc 1 749 0
 725 00d0 4139D0   		cmpl	%edx, %r8d
 726 00d3 0F8F8F01 		jg	.L89
 726      0000
 727              	.LVL104:
 728              	.L71:
 750:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = GET_BITS(s);
 729              		.loc 1 750 0
 730 00d9 4963C0   		movslq	%r8d, %rax
 731 00dc 4429C2   		subl	%r8d, %edx
 732              	.LVL105:
 751:fltk-1.3.4-1/jpeg/jdhuff.c **** 	s = HUFF_EXTEND(r, s);
 733              		.loc 1 751 0
 734 00df 4183E801 		subl	$1, %r8d
 750:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = GET_BITS(s);
 735              		.loc 1 750 0
 736 00e3 8B3C8500 		movl	bmask(,%rax,4), %edi
 736      000000
 737 00ea 89D1     		movl	%edx, %ecx
 738 00ec 4889F0   		movq	%rsi, %rax
 739 00ef 48D3F8   		sarq	%cl, %rax
 740              		.loc 1 751 0
 741 00f2 4963C8   		movslq	%r8d, %rcx
 750:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = GET_BITS(s);
 742              		.loc 1 750 0
 743 00f5 21F8     		andl	%edi, %eax
 744              	.LVL106:
 745              		.loc 1 751 0
 746 00f7 4189C0   		movl	%eax, %r8d
 747 00fa 4129F8   		subl	%edi, %r8d
 748 00fd 3B048D00 		cmpl	bmask(,%rcx,4), %eax
 748      000000
 749 0104 440F4FC0 		cmovg	%eax, %r8d
 750              	.LVL107:
 751              	.L70:
 752:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 753:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 754:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Convert DC difference to actual value, update last_dc_val */
 755:fltk-1.3.4-1/jpeg/jdhuff.c ****       s += state.last_dc_val[ci];
 752              		.loc 1 755 0 discriminator 2
 753 0108 4403449C 		addl	84(%rsp,%rbx,4), %r8d
 753      54
 754              	.LVL108:
 756:fltk-1.3.4-1/jpeg/jdhuff.c ****       state.last_dc_val[ci] = s;
 757:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Scale and output the coefficient (assumes jpeg_natural_order[0]=0) */
 758:fltk-1.3.4-1/jpeg/jdhuff.c ****       (*block)[0] = (JCOEF) (s << Al);
 755              		.loc 1 758 0 discriminator 2
 756 010d 0FB64C24 		movzbl	12(%rsp), %ecx
 756      0C
 738:fltk-1.3.4-1/jpeg/jdhuff.c ****       block = MCU_data[blkn];
 757              		.loc 1 738 0 discriminator 2
 758 0112 4183C501 		addl	$1, %r13d
 759              	.LVL109:
 760 0116 4883C508 		addq	$8, %rbp
 761 011a 4983C404 		addq	$4, %r12
 756:fltk-1.3.4-1/jpeg/jdhuff.c ****       state.last_dc_val[ci] = s;
 762              		.loc 1 756 0 discriminator 2
 763 011e 4489449C 		movl	%r8d, 84(%rsp,%rbx,4)
 763      54
 764              		.loc 1 758 0 discriminator 2
 765 0123 41D3E0   		sall	%cl, %r8d
 766              	.LVL110:
 767 0126 66458906 		movw	%r8w, (%r14)
 738:fltk-1.3.4-1/jpeg/jdhuff.c ****       block = MCU_data[blkn];
 768              		.loc 1 738 0 discriminator 2
 769 012a 4539AFF0 		cmpl	%r13d, 496(%r15)
 769      010000
 770 0131 7E75     		jle	.L90
 771              	.LVL111:
 772              	.L72:
 741:fltk-1.3.4-1/jpeg/jdhuff.c ****       tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 773              		.loc 1 741 0
 774 0133 49631C24 		movslq	(%r12), %rbx
 742:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 775              		.loc 1 742 0
 776 0137 488B3C24 		movq	(%rsp), %rdi
 777              	.LBB13:
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 778              		.loc 1 747 0
 779 013b 83FA07   		cmpl	$7, %edx
 780              	.LBE13:
 739:fltk-1.3.4-1/jpeg/jdhuff.c ****       ci = cinfo->MCU_membership[blkn];
 781              		.loc 1 739 0
 782 013e 4C8B7500 		movq	0(%rbp), %r14
 783              	.LVL112:
 742:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 784              		.loc 1 742 0
 785 0142 498B84DF 		movq	456(%r15,%rbx,8), %rax
 785      C8010000 
 786 014a 48634014 		movslq	20(%rax), %rax
 787 014e 4C8B4CC7 		movq	72(%rdi,%rax,8), %r9
 787      48
 788              	.LVL113:
 789              	.LBB14:
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 790              		.loc 1 747 0
 791 0153 0F8EC700 		jle	.L91
 791      0000
 792              	.LVL114:
 793              	.L66:
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 794              		.loc 1 747 0 is_stmt 0 discriminator 6
 795 0159 8D4AF8   		leal	-8(%rdx), %ecx
 796 015c 4889F0   		movq	%rsi, %rax
 797 015f 48D3F8   		sarq	%cl, %rax
 798              	.LVL115:
 799 0162 0FB6C0   		movzbl	%al, %eax
 800 0165 418B8C81 		movl	288(%r9,%rax,4), %ecx
 800      20010000 
 801              	.LVL116:
 802 016d 85C9     		testl	%ecx, %ecx
 803 016f 0F854BFF 		jne	.L92
 803      FFFF
 804 0175 4C8D5C24 		leaq	32(%rsp), %r11
 804      20
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 805              		.loc 1 747 0
 806 017a 41B80900 		movl	$9, %r8d
 806      0000
 807              	.LVL117:
 808              	.L68:
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 809              		.loc 1 747 0 discriminator 10
 810 0180 4C89C9   		movq	%r9, %rcx
 811 0183 4C89DF   		movq	%r11, %rdi
 812 0186 E8000000 		call	jpeg_huff_decode
 812      00
 813              	.LVL118:
 814 018b 85C0     		testl	%eax, %eax
 815 018d 4189C0   		movl	%eax, %r8d
 816              	.LVL119:
 817 0190 0F881201 		js	.L67
 817      0000
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 818              		.loc 1 747 0 discriminator 12
 819 0196 488B7424 		movq	48(%rsp), %rsi
 819      30
 820              	.LVL120:
 821 019b 8B542438 		movl	56(%rsp), %edx
 822              	.LVL121:
 823 019f E927FFFF 		jmp	.L69
 823      FF
 824              	.LVL122:
 825              		.p2align 4,,10
 826 01a4 0F1F4000 		.p2align 3
 827              	.L90:
 828 01a8 498B4728 		movq	40(%r15), %rax
 829 01ac 488B4C24 		movq	32(%rsp), %rcx
 829      20
 830              	.LVL123:
 831              	.L65:
 832              	.LBE14:
 759:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 760:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 761:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Completed MCU, so update state */
 762:fltk-1.3.4-1/jpeg/jdhuff.c ****     BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 833              		.loc 1 762 0 is_stmt 1
 834 01b1 488908   		movq	%rcx, (%rax)
 835 01b4 498B4728 		movq	40(%r15), %rax
 836 01b8 488B4C24 		movq	40(%rsp), %rcx
 836      28
 837 01bd 48894808 		movq	%rcx, 8(%rax)
 838 01c1 488B0424 		movq	(%rsp), %rax
 839 01c5 48897018 		movq	%rsi, 24(%rax)
 840 01c9 895020   		movl	%edx, 32(%rax)
 841 01cc 4889C6   		movq	%rax, %rsi
 842              	.LVL124:
 763:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(entropy->saved, state);
 843              		.loc 1 763 0
 844 01cf 488B4424 		movq	80(%rsp), %rax
 844      50
 845              	.LVL125:
 846 01d4 48894628 		movq	%rax, 40(%rsi)
 847 01d8 488B4424 		movq	88(%rsp), %rax
 847      58
 848 01dd 48894630 		movq	%rax, 48(%rsi)
 849 01e1 8B442460 		movl	96(%rsp), %eax
 850 01e5 894638   		movl	%eax, 56(%rsi)
 851              	.LVL126:
 852              	.L62:
 764:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 765:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 766:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Account for restart interval (no-op if not using restarts) */
 767:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->restarts_to_go--;
 853              		.loc 1 767 0
 854 01e8 488B0424 		movq	(%rsp), %rax
 855 01ec 83684001 		subl	$1, 64(%rax)
 768:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 769:fltk-1.3.4-1/jpeg/jdhuff.c ****   return TRUE;
 856              		.loc 1 769 0
 857 01f0 B8010000 		movl	$1, %eax
 857      00
 858              	.L64:
 770:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 859              		.loc 1 770 0
 860 01f5 488B7424 		movq	104(%rsp), %rsi
 860      68
 861 01fa 64483334 		xorq	%fs:40, %rsi
 861      25280000 
 861      00
 862 0203 0F85A600 		jne	.L93
 862      0000
 863 0209 4883C478 		addq	$120, %rsp
 864              		.cfi_remember_state
 865              		.cfi_def_cfa_offset 56
 866              	.LVL127:
 867 020d 5B       		popq	%rbx
 868              		.cfi_def_cfa_offset 48
 869 020e 5D       		popq	%rbp
 870              		.cfi_def_cfa_offset 40
 871 020f 415C     		popq	%r12
 872              		.cfi_def_cfa_offset 32
 873 0211 415D     		popq	%r13
 874              		.cfi_def_cfa_offset 24
 875 0213 415E     		popq	%r14
 876              		.cfi_def_cfa_offset 16
 877 0215 415F     		popq	%r15
 878              		.cfi_def_cfa_offset 8
 879              	.LVL128:
 880 0217 C3       		ret
 881              	.LVL129:
 882 0218 0F1F8400 		.p2align 4,,10
 882      00000000 
 883              		.p2align 3
 884              	.L91:
 885              		.cfi_restore_state
 886              	.LBB15:
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 887              		.loc 1 747 0 discriminator 1
 888 0220 4C8D5C24 		leaq	32(%rsp), %r11
 888      20
 889 0225 31C9     		xorl	%ecx, %ecx
 890 0227 4C894C24 		movq	%r9, 24(%rsp)
 890      18
 891 022c 4C89DF   		movq	%r11, %rdi
 892 022f 4C895C24 		movq	%r11, 16(%rsp)
 892      10
 893 0234 E8000000 		call	jpeg_fill_bit_buffer
 893      00
 894              	.LVL130:
 895 0239 85C0     		testl	%eax, %eax
 896 023b 746B     		je	.L67
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 897              		.loc 1 747 0 is_stmt 0 discriminator 4
 898 023d 8B542438 		movl	56(%rsp), %edx
 899 0241 488B7424 		movq	48(%rsp), %rsi
 899      30
 900              	.LVL131:
 901 0246 4C8B5C24 		movq	16(%rsp), %r11
 901      10
 902 024b 4C8B4C24 		movq	24(%rsp), %r9
 902      18
 903 0250 83FA07   		cmpl	$7, %edx
 904 0253 0F8F00FF 		jg	.L66
 904      FFFF
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 905              		.loc 1 747 0
 906 0259 41B80100 		movl	$1, %r8d
 906      0000
 907 025f E91CFFFF 		jmp	.L68
 907      FF
 908              	.LVL132:
 909              		.p2align 4,,10
 910 0264 0F1F4000 		.p2align 3
 911              	.L89:
 912              	.LBE15:
 749:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = GET_BITS(s);
 913              		.loc 1 749 0 is_stmt 1 discriminator 1
 914 0268 4C8D5C24 		leaq	32(%rsp), %r11
 914      20
 915 026d 4489C1   		movl	%r8d, %ecx
 916 0270 44894424 		movl	%r8d, 16(%rsp)
 916      10
 917 0275 4C89DF   		movq	%r11, %rdi
 918 0278 E8000000 		call	jpeg_fill_bit_buffer
 918      00
 919              	.LVL133:
 920 027d 85C0     		testl	%eax, %eax
 921 027f 7427     		je	.L67
 749:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = GET_BITS(s);
 922              		.loc 1 749 0 is_stmt 0 discriminator 3
 923 0281 488B7424 		movq	48(%rsp), %rsi
 923      30
 924              	.LVL134:
 925 0286 8B542438 		movl	56(%rsp), %edx
 926 028a 448B4424 		movl	16(%rsp), %r8d
 926      10
 927              	.LVL135:
 928 028f E945FEFF 		jmp	.L71
 928      FF
 929              	.LVL136:
 930              		.p2align 4,,10
 931 0294 0F1F4000 		.p2align 3
 932              	.L88:
 723:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 933              		.loc 1 723 0 is_stmt 1
 934 0298 E8000000 		call	process_restart
 934      00
 935              	.LVL137:
 936 029d 85C0     		testl	%eax, %eax
 937 029f 0F85B1FD 		jne	.L63
 937      FFFF
 938              	.LVL138:
 939              		.p2align 4,,10
 940 02a5 0F1F00   		.p2align 3
 941              	.L67:
 724:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 942              		.loc 1 724 0
 943 02a8 31C0     		xorl	%eax, %eax
 944 02aa E946FFFF 		jmp	.L64
 944      FF
 945              	.L93:
 946              		.loc 1 770 0
 947 02af E8000000 		call	__stack_chk_fail
 947      00
 948              	.LVL139:
 949              		.cfi_endproc
 950              	.LFE66:
 952              		.section	.text.unlikely.decode_mcu_DC_first
 953              	.LCOLDE4:
 954              		.section	.text.decode_mcu_DC_first
 955              	.LHOTE4:
 956              		.section	.text.unlikely.decode_mcu_AC_first,"ax",@progbits
 957              	.LCOLDB5:
 958              		.section	.text.decode_mcu_AC_first,"ax",@progbits
 959              	.LHOTB5:
 960              		.p2align 4,,15
 962              	decode_mcu_AC_first:
 963              	.LFB67:
 771:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 772:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 773:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 774:fltk-1.3.4-1/jpeg/jdhuff.c ****  * MCU decoding for AC initial scan (either spectral selection,
 775:fltk-1.3.4-1/jpeg/jdhuff.c ****  * or first pass of successive approximation).
 776:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 777:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 778:fltk-1.3.4-1/jpeg/jdhuff.c **** METHODDEF(boolean)
 779:fltk-1.3.4-1/jpeg/jdhuff.c **** decode_mcu_AC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
 780:fltk-1.3.4-1/jpeg/jdhuff.c **** {   
 964              		.loc 1 780 0
 965              		.cfi_startproc
 966              	.LVL140:
 967 0000 4157     		pushq	%r15
 968              		.cfi_def_cfa_offset 16
 969              		.cfi_offset 15, -16
 970 0002 4156     		pushq	%r14
 971              		.cfi_def_cfa_offset 24
 972              		.cfi_offset 14, -24
 973 0004 4155     		pushq	%r13
 974              		.cfi_def_cfa_offset 32
 975              		.cfi_offset 13, -32
 976 0006 4154     		pushq	%r12
 977              		.cfi_def_cfa_offset 40
 978              		.cfi_offset 12, -40
 979 0008 4989FD   		movq	%rdi, %r13
 980 000b 55       		pushq	%rbp
 981              		.cfi_def_cfa_offset 48
 982              		.cfi_offset 6, -48
 983 000c 53       		pushq	%rbx
 984              		.cfi_def_cfa_offset 56
 985              		.cfi_offset 3, -56
 986 000d 4889F3   		movq	%rsi, %rbx
 987 0010 4883EC58 		subq	$88, %rsp
 988              		.cfi_def_cfa_offset 144
 781:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 782:fltk-1.3.4-1/jpeg/jdhuff.c ****   register int s, k, r;
 783:fltk-1.3.4-1/jpeg/jdhuff.c ****   unsigned int EOBRUN;
 784:fltk-1.3.4-1/jpeg/jdhuff.c ****   int Se, Al;
 785:fltk-1.3.4-1/jpeg/jdhuff.c ****   const int * natural_order;
 786:fltk-1.3.4-1/jpeg/jdhuff.c ****   JBLOCKROW block;
 787:fltk-1.3.4-1/jpeg/jdhuff.c ****   BITREAD_STATE_VARS;
 788:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl * tbl;
 789:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 790:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Process restart marker if needed; may have to suspend */
 791:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (cinfo->restart_interval) {
 989              		.loc 1 791 0
 990 0014 8B8F7401 		movl	372(%rdi), %ecx
 990      0000
 781:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 991              		.loc 1 781 0
 992 001a 488BAF70 		movq	624(%rdi), %rbp
 992      020000
 993              	.LVL141:
 780:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 994              		.loc 1 780 0
 995 0021 64488B04 		movq	%fs:40, %rax
 995      25280000 
 995      00
 996 002a 48894424 		movq	%rax, 72(%rsp)
 996      48
 997 002f 31C0     		xorl	%eax, %eax
 998              		.loc 1 791 0
 999 0031 85C9     		testl	%ecx, %ecx
 1000 0033 740B     		je	.L98
 792:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (entropy->restarts_to_go == 0)
 1001              		.loc 1 792 0
 1002 0035 8B4540   		movl	64(%rbp), %eax
 1003 0038 85C0     		testl	%eax, %eax
 1004 003a 0F84E801 		je	.L130
 1004      0000
 1005              	.LVL142:
 1006              	.L98:
 793:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (! process_restart(cinfo))
 794:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 795:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 796:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 797:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* If we've run out of data, just leave the MCU set to zeroes.
 798:fltk-1.3.4-1/jpeg/jdhuff.c ****    * This way, we return uniform gray for the remainder of the segment.
 799:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
 800:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (! entropy->insufficient_data) {
 1007              		.loc 1 800 0
 1008 0040 8B553C   		movl	60(%rbp), %edx
 1009 0043 85D2     		testl	%edx, %edx
 1010 0045 7519     		jne	.L97
 1011              	.LVL143:
 801:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 802:fltk-1.3.4-1/jpeg/jdhuff.c ****     Se = cinfo->Se;
 803:fltk-1.3.4-1/jpeg/jdhuff.c ****     Al = cinfo->Al;
 804:fltk-1.3.4-1/jpeg/jdhuff.c ****     natural_order = cinfo->natural_order;
 805:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 806:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Load up working state.
 807:fltk-1.3.4-1/jpeg/jdhuff.c ****      * We can avoid loading/saving bitread state if in an EOB run.
 808:fltk-1.3.4-1/jpeg/jdhuff.c ****      */
 809:fltk-1.3.4-1/jpeg/jdhuff.c ****     EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
 1012              		.loc 1 809 0
 1013 0047 8B4528   		movl	40(%rbp), %eax
 810:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 811:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* There is always only one block per MCU */
 812:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 813:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (EOBRUN)			/* if it's a band of zeroes... */
 1014              		.loc 1 813 0
 1015 004a 85C0     		testl	%eax, %eax
 809:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1016              		.loc 1 809 0
 1017 004c 8944241C 		movl	%eax, 28(%rsp)
 1018              	.LVL144:
 1019              		.loc 1 813 0
 1020 0050 743E     		je	.L100
 814:fltk-1.3.4-1/jpeg/jdhuff.c ****       EOBRUN--;			/* ...process it now (we do nothing) */
 1021              		.loc 1 814 0
 1022 0052 83E801   		subl	$1, %eax
 1023              	.LVL145:
 1024 0055 8944241C 		movl	%eax, 28(%rsp)
 1025              	.LVL146:
 1026              	.L101:
 815:fltk-1.3.4-1/jpeg/jdhuff.c ****     else {
 816:fltk-1.3.4-1/jpeg/jdhuff.c ****       BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 817:fltk-1.3.4-1/jpeg/jdhuff.c ****       block = MCU_data[0];
 818:fltk-1.3.4-1/jpeg/jdhuff.c ****       tbl = entropy->ac_derived_tbl;
 819:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 820:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (k = cinfo->Ss; k <= Se; k++) {
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 822:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 823:fltk-1.3.4-1/jpeg/jdhuff.c **** 	s &= 15;
 824:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (s) {
 825:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  k += r;
 826:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 827:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 828:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 829:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* Scale and output coefficient in natural (dezigzagged) order */
 830:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 831:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} else {
 832:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (r != 15) {	/* EOBr, run length is 2^r + appended bits */
 833:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (r) {		/* EOBr, r > 0 */
 834:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      EOBRUN = 1 << r;
 835:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 836:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      r = GET_BITS(r);
 837:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      EOBRUN += r;
 838:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      EOBRUN--;		/* this band is processed at this moment */
 839:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    }
 840:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    break;		/* force end-of-band */
 841:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  }
 842:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  k += 15;		/* ZRL: skip 15 zeroes in band */
 843:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 844:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 845:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 846:fltk-1.3.4-1/jpeg/jdhuff.c ****       BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 847:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 848:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 849:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Completed MCU, so update state */
 850:fltk-1.3.4-1/jpeg/jdhuff.c ****     entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
 1027              		.loc 1 850 0
 1028 0059 8B44241C 		movl	28(%rsp), %eax
 1029 005d 894528   		movl	%eax, 40(%rbp)
 1030              	.LVL147:
 1031              	.L97:
 851:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 852:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 853:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Account for restart interval (no-op if not using restarts) */
 854:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->restarts_to_go--;
 1032              		.loc 1 854 0
 1033 0060 836D4001 		subl	$1, 64(%rbp)
 855:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 856:fltk-1.3.4-1/jpeg/jdhuff.c ****   return TRUE;
 1034              		.loc 1 856 0
 1035 0064 B8010000 		movl	$1, %eax
 1035      00
 1036              	.L99:
 857:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 1037              		.loc 1 857 0
 1038 0069 488B5C24 		movq	72(%rsp), %rbx
 1038      48
 1039 006e 6448331C 		xorq	%fs:40, %rbx
 1039      25280000 
 1039      00
 1040 0077 0F855B02 		jne	.L131
 1040      0000
 1041 007d 4883C458 		addq	$88, %rsp
 1042              		.cfi_remember_state
 1043              		.cfi_def_cfa_offset 56
 1044 0081 5B       		popq	%rbx
 1045              		.cfi_def_cfa_offset 48
 1046 0082 5D       		popq	%rbp
 1047              		.cfi_def_cfa_offset 40
 1048              	.LVL148:
 1049 0083 415C     		popq	%r12
 1050              		.cfi_def_cfa_offset 32
 1051 0085 415D     		popq	%r13
 1052              		.cfi_def_cfa_offset 24
 1053              	.LVL149:
 1054 0087 415E     		popq	%r14
 1055              		.cfi_def_cfa_offset 16
 1056 0089 415F     		popq	%r15
 1057              		.cfi_def_cfa_offset 8
 1058 008b C3       		ret
 1059              	.LVL150:
 1060 008c 0F1F4000 		.p2align 4,,10
 1061              		.p2align 3
 1062              	.L100:
 1063              		.cfi_restore_state
 803:fltk-1.3.4-1/jpeg/jdhuff.c ****     natural_order = cinfo->natural_order;
 1064              		.loc 1 803 0
 1065 0090 418B8528 		movl	552(%r13), %eax
 1065      020000
 1066              	.LVL151:
 802:fltk-1.3.4-1/jpeg/jdhuff.c ****     Al = cinfo->Al;
 1067              		.loc 1 802 0
 1068 0097 458BA520 		movl	544(%r13), %r12d
 1068      020000
 820:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 1069              		.loc 1 820 0
 1070 009e 458BB51C 		movl	540(%r13), %r14d
 1070      020000
 816:fltk-1.3.4-1/jpeg/jdhuff.c ****       block = MCU_data[0];
 1071              		.loc 1 816 0
 1072 00a5 4C896C24 		movq	%r13, 64(%rsp)
 1072      40
 817:fltk-1.3.4-1/jpeg/jdhuff.c ****       tbl = entropy->ac_derived_tbl;
 1073              		.loc 1 817 0
 1074 00aa 488B1B   		movq	(%rbx), %rbx
 1075              	.LVL152:
 816:fltk-1.3.4-1/jpeg/jdhuff.c ****       block = MCU_data[0];
 1076              		.loc 1 816 0
 1077 00ad 488B7518 		movq	24(%rbp), %rsi
 1078              	.LVL153:
 803:fltk-1.3.4-1/jpeg/jdhuff.c ****     natural_order = cinfo->natural_order;
 1079              		.loc 1 803 0
 1080 00b1 89442404 		movl	%eax, 4(%rsp)
 804:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1081              		.loc 1 804 0
 1082 00b5 498B8530 		movq	560(%r13), %rax
 1082      020000
 820:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 1083              		.loc 1 820 0
 1084 00bc 4539F4   		cmpl	%r14d, %r12d
 817:fltk-1.3.4-1/jpeg/jdhuff.c ****       tbl = entropy->ac_derived_tbl;
 1085              		.loc 1 817 0
 1086 00bf 48895C24 		movq	%rbx, 16(%rsp)
 1086      10
 818:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1087              		.loc 1 818 0
 1088 00c4 488B5D68 		movq	104(%rbp), %rbx
 804:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1089              		.loc 1 804 0
 1090 00c8 48894424 		movq	%rax, 8(%rsp)
 1090      08
 816:fltk-1.3.4-1/jpeg/jdhuff.c ****       block = MCU_data[0];
 1091              		.loc 1 816 0
 1092 00cd 498B4528 		movq	40(%r13), %rax
 1093 00d1 488B08   		movq	(%rax), %rcx
 1094 00d4 488B5008 		movq	8(%rax), %rdx
 1095 00d8 48894C24 		movq	%rcx, 32(%rsp)
 1095      20
 1096 00dd 48895424 		movq	%rdx, 40(%rsp)
 1096      28
 1097 00e2 8B5520   		movl	32(%rbp), %edx
 1098              	.LVL154:
 820:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 1099              		.loc 1 820 0
 1100 00e5 7D6A     		jge	.L114
 1101 00e7 E9940100 		jmp	.L102
 1101      00
 1102              	.LVL155:
 1103 00ec 0F1F4000 		.p2align 4,,10
 1104              		.p2align 3
 1105              	.L134:
 825:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 1106              		.loc 1 825 0
 1107 00f0 4501D6   		addl	%r10d, %r14d
 1108              	.LVL156:
 826:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 1109              		.loc 1 826 0
 1110 00f3 39C2     		cmpl	%eax, %edx
 1111 00f5 0F8CFD00 		jl	.L132
 1111      0000
 1112              	.LVL157:
 1113              	.L108:
 827:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 1114              		.loc 1 827 0
 1115 00fb 4963C0   		movslq	%r8d, %rax
 1116 00fe 4429C2   		subl	%r8d, %edx
 1117              	.LVL158:
 828:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* Scale and output coefficient in natural (dezigzagged) order */
 1118              		.loc 1 828 0
 1119 0101 4183E801 		subl	$1, %r8d
 827:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 1120              		.loc 1 827 0
 1121 0105 8B3C8500 		movl	bmask(,%rax,4), %edi
 1121      000000
 1122 010c 89D1     		movl	%edx, %ecx
 1123 010e 4889F0   		movq	%rsi, %rax
 1124 0111 48D3F8   		sarq	%cl, %rax
 828:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* Scale and output coefficient in natural (dezigzagged) order */
 1125              		.loc 1 828 0
 1126 0114 4D63C0   		movslq	%r8d, %r8
 827:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 1127              		.loc 1 827 0
 1128 0117 21F8     		andl	%edi, %eax
 1129              	.LVL159:
 828:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* Scale and output coefficient in natural (dezigzagged) order */
 1130              		.loc 1 828 0
 1131 0119 89C1     		movl	%eax, %ecx
 1132 011b 29F9     		subl	%edi, %ecx
 1133 011d 423B0485 		cmpl	bmask(,%r8,4), %eax
 1133      00000000 
 830:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} else {
 1134              		.loc 1 830 0
 1135 0125 488B7C24 		movq	8(%rsp), %rdi
 1135      08
 828:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* Scale and output coefficient in natural (dezigzagged) order */
 1136              		.loc 1 828 0
 1137 012a 0F4EC1   		cmovle	%ecx, %eax
 1138              	.LVL160:
 830:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} else {
 1139              		.loc 1 830 0
 1140 012d 4963CE   		movslq	%r14d, %rcx
 1141 0130 48633C8F 		movslq	(%rdi,%rcx,4), %rdi
 1142 0134 0FB64C24 		movzbl	4(%rsp), %ecx
 1142      04
 1143 0139 D3E0     		sall	%cl, %eax
 1144              	.LVL161:
 1145 013b 488B4C24 		movq	16(%rsp), %rcx
 1145      10
 1146 0140 66890479 		movw	%ax, (%rcx,%rdi,2)
 1147              	.LVL162:
 1148              	.L110:
 820:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 1149              		.loc 1 820 0 discriminator 2
 1150 0144 4183C601 		addl	$1, %r14d
 1151              	.LVL163:
 1152 0148 4539F4   		cmpl	%r14d, %r12d
 1153 014b 0F8C4F01 		jl	.L129
 1153      0000
 1154              	.L114:
 1155              	.LBB16:
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1156              		.loc 1 821 0
 1157 0151 83FA07   		cmpl	$7, %edx
 1158 0154 7E72     		jle	.L133
 1159              	.L103:
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1160              		.loc 1 821 0 is_stmt 0 discriminator 6
 1161 0156 8D4AF8   		leal	-8(%rdx), %ecx
 1162 0159 4889F0   		movq	%rsi, %rax
 1163 015c 48D3F8   		sarq	%cl, %rax
 1164              	.LVL164:
 1165 015f 0FB6C0   		movzbl	%al, %eax
 1166 0162 8B8C8320 		movl	288(%rbx,%rax,4), %ecx
 1166      010000
 1167              	.LVL165:
 1168 0169 85C9     		testl	%ecx, %ecx
 1169 016b 7433     		je	.L117
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1170              		.loc 1 821 0 discriminator 8
 1171 016d 0FB68403 		movzbl	1312(%rbx,%rax), %eax
 1171      20050000 
 1172              	.LVL166:
 1173 0175 29CA     		subl	%ecx, %edx
 1174              	.LVL167:
 1175              	.L106:
 1176              	.LBE16:
 822:fltk-1.3.4-1/jpeg/jdhuff.c **** 	s &= 15;
 1177              		.loc 1 822 0 is_stmt 1
 1178 0177 4189C2   		movl	%eax, %r10d
 1179 017a 41C1FA04 		sarl	$4, %r10d
 1180              	.LVL168:
 824:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  k += r;
 1181              		.loc 1 824 0
 1182 017e 83E00F   		andl	$15, %eax
 1183              	.LVL169:
 1184 0181 4189C0   		movl	%eax, %r8d
 1185 0184 0F8566FF 		jne	.L134
 1185      FFFF
 832:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (r) {		/* EOBr, r > 0 */
 1186              		.loc 1 832 0
 1187 018a 4183FA0F 		cmpl	$15, %r10d
 1188 018e 0F85A800 		jne	.L135
 1188      0000
 842:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 1189              		.loc 1 842 0
 1190 0194 4183C60F 		addl	$15, %r14d
 1191              	.LVL170:
 1192 0198 EBAA     		jmp	.L110
 1193              	.LVL171:
 1194 019a 660F1F44 		.p2align 4,,10
 1194      0000
 1195              		.p2align 3
 1196              	.L117:
 1197 01a0 4C8D7C24 		leaq	32(%rsp), %r15
 1197      20
 1198              	.LBB17:
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1199              		.loc 1 821 0
 1200 01a5 41B80900 		movl	$9, %r8d
 1200      0000
 1201              	.LVL172:
 1202              	.L105:
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1203              		.loc 1 821 0 is_stmt 0 discriminator 10
 1204 01ab 4889D9   		movq	%rbx, %rcx
 1205 01ae 4C89FF   		movq	%r15, %rdi
 1206 01b1 E8000000 		call	jpeg_huff_decode
 1206      00
 1207              	.LVL173:
 1208 01b6 85C0     		testl	%eax, %eax
 1209 01b8 787B     		js	.L104
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1210              		.loc 1 821 0 discriminator 12
 1211 01ba 488B7424 		movq	48(%rsp), %rsi
 1211      30
 1212              	.LVL174:
 1213 01bf 8B542438 		movl	56(%rsp), %edx
 1214              	.LVL175:
 1215 01c3 EBB2     		jmp	.L106
 1216              	.LVL176:
 1217              		.p2align 4,,10
 1218 01c5 0F1F00   		.p2align 3
 1219              	.L133:
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1220              		.loc 1 821 0 discriminator 1
 1221 01c8 4C8D7C24 		leaq	32(%rsp), %r15
 1221      20
 1222 01cd 31C9     		xorl	%ecx, %ecx
 1223 01cf 4C89FF   		movq	%r15, %rdi
 1224 01d2 E8000000 		call	jpeg_fill_bit_buffer
 1224      00
 1225              	.LVL177:
 1226 01d7 85C0     		testl	%eax, %eax
 1227 01d9 745A     		je	.L104
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1228              		.loc 1 821 0 discriminator 4
 1229 01db 8B542438 		movl	56(%rsp), %edx
 1230 01df 488B7424 		movq	48(%rsp), %rsi
 1230      30
 1231              	.LVL178:
 1232 01e4 83FA07   		cmpl	$7, %edx
 1233 01e7 0F8F69FF 		jg	.L103
 1233      FFFF
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1234              		.loc 1 821 0
 1235 01ed 41B80100 		movl	$1, %r8d
 1235      0000
 1236 01f3 EBB6     		jmp	.L105
 1237              	.LVL179:
 1238              		.p2align 4,,10
 1239 01f5 0F1F00   		.p2align 3
 1240              	.L132:
 1241              	.LBE17:
 826:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 1242              		.loc 1 826 0 is_stmt 1 discriminator 1
 1243 01f8 4C8D7C24 		leaq	32(%rsp), %r15
 1243      20
 1244 01fd 89C1     		movl	%eax, %ecx
 1245 01ff 89442418 		movl	%eax, 24(%rsp)
 1246 0203 4C89FF   		movq	%r15, %rdi
 1247 0206 E8000000 		call	jpeg_fill_bit_buffer
 1247      00
 1248              	.LVL180:
 1249 020b 85C0     		testl	%eax, %eax
 1250 020d 7426     		je	.L104
 826:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 1251              		.loc 1 826 0 is_stmt 0 discriminator 3
 1252 020f 488B7424 		movq	48(%rsp), %rsi
 1252      30
 1253              	.LVL181:
 1254 0214 8B542438 		movl	56(%rsp), %edx
 1255 0218 448B4424 		movl	24(%rsp), %r8d
 1255      18
 1256              	.LVL182:
 1257 021d E9D9FEFF 		jmp	.L108
 1257      FF
 1258              	.LVL183:
 1259              		.p2align 4,,10
 1260 0222 660F1F44 		.p2align 3
 1260      0000
 1261              	.L130:
 793:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 1262              		.loc 1 793 0 is_stmt 1
 1263 0228 E8000000 		call	process_restart
 1263      00
 1264              	.LVL184:
 1265 022d 85C0     		testl	%eax, %eax
 1266 022f 0F850BFE 		jne	.L98
 1266      FFFF
 1267              	.LVL185:
 1268              	.L104:
 794:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 1269              		.loc 1 794 0
 1270 0235 31C0     		xorl	%eax, %eax
 1271 0237 E92DFEFF 		jmp	.L99
 1271      FF
 1272              	.LVL186:
 1273              	.L135:
 833:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      EOBRUN = 1 << r;
 1274              		.loc 1 833 0
 1275 023c 4585D2   		testl	%r10d, %r10d
 1276 023f 745F     		je	.L129
 834:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 1277              		.loc 1 834 0
 1278 0241 BB010000 		movl	$1, %ebx
 1278      00
 1279              	.LVL187:
 1280 0246 4489D1   		movl	%r10d, %ecx
 1281 0249 D3E3     		sall	%cl, %ebx
 1282              	.LVL188:
 835:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      r = GET_BITS(r);
 1283              		.loc 1 835 0
 1284 024b 4439D2   		cmpl	%r10d, %edx
 1285 024e 7C5B     		jl	.L136
 1286              	.LVL189:
 1287              	.L113:
 836:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      EOBRUN += r;
 1288              		.loc 1 836 0
 1289 0250 4429D2   		subl	%r10d, %edx
 1290              	.LVL190:
 1291 0253 4D63CA   		movslq	%r10d, %r9
 1292              	.LVL191:
 838:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    }
 1293              		.loc 1 838 0
 1294 0256 4889F0   		movq	%rsi, %rax
 1295 0259 89D1     		movl	%edx, %ecx
 1296 025b 48D3F8   		sarq	%cl, %rax
 1297 025e 4223048D 		andl	bmask(,%r9,4), %eax
 1297      00000000 
 1298 0266 488B4C24 		movq	32(%rsp), %rcx
 1298      20
 1299 026b 8D4403FF 		leal	-1(%rbx,%rax), %eax
 1300 026f 8944241C 		movl	%eax, 28(%rsp)
 1301              	.LVL192:
 1302 0273 498B4528 		movq	40(%r13), %rax
 1303              	.LVL193:
 1304 0277 660F1F84 		.p2align 4,,10
 1304      00000000 
 1304      00
 1305              		.p2align 3
 1306              	.L102:
 846:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 1307              		.loc 1 846 0
 1308 0280 488908   		movq	%rcx, (%rax)
 1309 0283 498B4528 		movq	40(%r13), %rax
 1310 0287 488B4C24 		movq	40(%rsp), %rcx
 1310      28
 1311 028c 48894808 		movq	%rcx, 8(%rax)
 1312 0290 48897518 		movq	%rsi, 24(%rbp)
 1313 0294 895520   		movl	%edx, 32(%rbp)
 1314 0297 E9BDFDFF 		jmp	.L101
 1314      FF
 1315              	.LVL194:
 1316 029c 0F1F4000 		.p2align 4,,10
 1317              		.p2align 3
 1318              	.L129:
 1319 02a0 498B4528 		movq	40(%r13), %rax
 1320 02a4 488B4C24 		movq	32(%rsp), %rcx
 1320      20
 1321 02a9 EBD5     		jmp	.L102
 1322              	.LVL195:
 1323              	.L136:
 835:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      r = GET_BITS(r);
 1324              		.loc 1 835 0 discriminator 1
 1325 02ab 488D7C24 		leaq	32(%rsp), %rdi
 1325      20
 1326 02b0 4489D1   		movl	%r10d, %ecx
 1327 02b3 44895424 		movl	%r10d, 4(%rsp)
 1327      04
 1328 02b8 E8000000 		call	jpeg_fill_bit_buffer
 1328      00
 1329              	.LVL196:
 1330 02bd 85C0     		testl	%eax, %eax
 1331 02bf 0F8470FF 		je	.L104
 1331      FFFF
 835:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      r = GET_BITS(r);
 1332              		.loc 1 835 0 is_stmt 0 discriminator 3
 1333 02c5 488B7424 		movq	48(%rsp), %rsi
 1333      30
 1334              	.LVL197:
 1335 02ca 8B542438 		movl	56(%rsp), %edx
 1336 02ce 448B5424 		movl	4(%rsp), %r10d
 1336      04
 1337              	.LVL198:
 1338 02d3 E978FFFF 		jmp	.L113
 1338      FF
 1339              	.LVL199:
 1340              	.L131:
 1341              		.loc 1 857 0 is_stmt 1
 1342 02d8 E8000000 		call	__stack_chk_fail
 1342      00
 1343              	.LVL200:
 1344              		.cfi_endproc
 1345              	.LFE67:
 1347              		.section	.text.unlikely.decode_mcu_AC_first
 1348              	.LCOLDE5:
 1349              		.section	.text.decode_mcu_AC_first
 1350              	.LHOTE5:
 1351              		.section	.text.unlikely.decode_mcu_DC_refine,"ax",@progbits
 1352              	.LCOLDB6:
 1353              		.section	.text.decode_mcu_DC_refine,"ax",@progbits
 1354              	.LHOTB6:
 1355              		.p2align 4,,15
 1357              	decode_mcu_DC_refine:
 1358              	.LFB68:
 858:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 859:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 860:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 861:fltk-1.3.4-1/jpeg/jdhuff.c ****  * MCU decoding for DC successive approximation refinement scan.
 862:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Note: we assume such scans can be multi-component,
 863:fltk-1.3.4-1/jpeg/jdhuff.c ****  * although the spec is not very clear on the point.
 864:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 865:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 866:fltk-1.3.4-1/jpeg/jdhuff.c **** METHODDEF(boolean)
 867:fltk-1.3.4-1/jpeg/jdhuff.c **** decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
 868:fltk-1.3.4-1/jpeg/jdhuff.c **** {   
 1359              		.loc 1 868 0
 1360              		.cfi_startproc
 1361              	.LVL201:
 1362 0000 4156     		pushq	%r14
 1363              		.cfi_def_cfa_offset 16
 1364              		.cfi_offset 14, -16
 1365 0002 4155     		pushq	%r13
 1366              		.cfi_def_cfa_offset 24
 1367              		.cfi_offset 13, -24
 1368 0004 4154     		pushq	%r12
 1369              		.cfi_def_cfa_offset 32
 1370              		.cfi_offset 12, -32
 1371 0006 55       		pushq	%rbp
 1372              		.cfi_def_cfa_offset 40
 1373              		.cfi_offset 6, -40
 1374 0007 4889F5   		movq	%rsi, %rbp
 1375 000a 53       		pushq	%rbx
 1376              		.cfi_def_cfa_offset 48
 1377              		.cfi_offset 3, -48
 1378 000b 4989FC   		movq	%rdi, %r12
 1379 000e 4883EC30 		subq	$48, %rsp
 1380              		.cfi_def_cfa_offset 96
 869:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 870:fltk-1.3.4-1/jpeg/jdhuff.c ****   int p1, blkn;
 871:fltk-1.3.4-1/jpeg/jdhuff.c ****   BITREAD_STATE_VARS;
 872:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 873:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Process restart marker if needed; may have to suspend */
 874:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (cinfo->restart_interval) {
 1381              		.loc 1 874 0
 1382 0012 8BB77401 		movl	372(%rdi), %esi
 1382      0000
 1383              	.LVL202:
 869:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 1384              		.loc 1 869 0
 1385 0018 4C8BB770 		movq	624(%rdi), %r14
 1385      020000
 1386              	.LVL203:
 868:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 1387              		.loc 1 868 0
 1388 001f 64488B04 		movq	%fs:40, %rax
 1388      25280000 
 1388      00
 1389 0028 48894424 		movq	%rax, 40(%rsp)
 1389      28
 1390 002d 31C0     		xorl	%eax, %eax
 1391              		.loc 1 874 0
 1392 002f 85F6     		testl	%esi, %esi
 1393 0031 740C     		je	.L141
 875:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (entropy->restarts_to_go == 0)
 1394              		.loc 1 875 0
 1395 0033 418B4640 		movl	64(%r14), %eax
 1396 0037 85C0     		testl	%eax, %eax
 1397 0039 0F84DA00 		je	.L157
 1397      0000
 1398              	.LVL204:
 1399              	.L141:
 876:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (! process_restart(cinfo))
 877:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 878:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 879:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 880:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Not worth the cycles to check insufficient_data here,
 881:fltk-1.3.4-1/jpeg/jdhuff.c ****    * since we will not change the data anyway if we read zeroes.
 882:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
 883:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 884:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Load up working state */
 885:fltk-1.3.4-1/jpeg/jdhuff.c ****   BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 886:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 887:fltk-1.3.4-1/jpeg/jdhuff.c ****   p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 1400              		.loc 1 887 0
 1401 003f 418B8C24 		movl	552(%r12), %ecx
 1401      28020000 
 885:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1402              		.loc 1 885 0
 1403 0047 498B4424 		movq	40(%r12), %rax
 1403      28
 1404              		.loc 1 887 0
 1405 004c 41BD0100 		movl	$1, %r13d
 1405      0000
 885:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1406              		.loc 1 885 0
 1407 0052 4C896424 		movq	%r12, 32(%rsp)
 1407      20
 888:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 889:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Outer loop handles each block in the MCU */
 890:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 891:fltk-1.3.4-1/jpeg/jdhuff.c ****   for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 1408              		.loc 1 891 0
 1409 0057 31DB     		xorl	%ebx, %ebx
 885:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1410              		.loc 1 885 0
 1411 0059 498B7618 		movq	24(%r14), %rsi
 1412              	.LVL205:
 887:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1413              		.loc 1 887 0
 1414 005d 41D3E5   		sall	%cl, %r13d
 1415              		.loc 1 891 0
 1416 0060 418B8C24 		movl	496(%r12), %ecx
 1416      F0010000 
 885:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1417              		.loc 1 885 0
 1418 0068 488B38   		movq	(%rax), %rdi
 1419 006b 488B5008 		movq	8(%rax), %rdx
 1420              		.loc 1 891 0
 1421 006f 85C9     		testl	%ecx, %ecx
 885:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1422              		.loc 1 885 0
 1423 0071 48893C24 		movq	%rdi, (%rsp)
 1424 0075 48895424 		movq	%rdx, 8(%rsp)
 1424      08
 1425 007a 418B5620 		movl	32(%r14), %edx
 1426              	.LVL206:
 1427              		.loc 1 891 0
 1428 007e 7F2A     		jg	.L152
 1429 0080 EB57     		jmp	.L140
 1430              	.LVL207:
 1431              		.p2align 4,,10
 1432 0082 660F1F44 		.p2align 3
 1432      0000
 1433              	.L143:
 892:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Encoded data is simply the next bit of the two's-complement DC value */
 893:fltk-1.3.4-1/jpeg/jdhuff.c ****     CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 894:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (GET_BITS(1))
 1434              		.loc 1 894 0
 1435 0088 83EA01   		subl	$1, %edx
 1436              	.LVL208:
 1437 008b 480FA3D6 		btq	%rdx, %rsi
 1438 008f 7308     		jnc	.L145
 895:fltk-1.3.4-1/jpeg/jdhuff.c ****       MCU_data[blkn][0][0] |= p1;
 1439              		.loc 1 895 0
 1440 0091 488B4500 		movq	0(%rbp), %rax
 1441 0095 66440928 		orw	%r13w, (%rax)
 1442              	.L145:
 891:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Encoded data is simply the next bit of the two's-complement DC value */
 1443              		.loc 1 891 0 discriminator 2
 1444 0099 83C301   		addl	$1, %ebx
 1445              	.LVL209:
 1446 009c 4883C508 		addq	$8, %rbp
 1447 00a0 41399C24 		cmpl	%ebx, 496(%r12)
 1447      F0010000 
 1448 00a8 7E26     		jle	.L158
 1449              	.LVL210:
 1450              	.L152:
 893:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (GET_BITS(1))
 1451              		.loc 1 893 0
 1452 00aa 85D2     		testl	%edx, %edx
 1453 00ac 7FDA     		jg	.L143
 893:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (GET_BITS(1))
 1454              		.loc 1 893 0 is_stmt 0 discriminator 1
 1455 00ae B9010000 		movl	$1, %ecx
 1455      00
 1456 00b3 4889E7   		movq	%rsp, %rdi
 1457 00b6 E8000000 		call	jpeg_fill_bit_buffer
 1457      00
 1458              	.LVL211:
 1459 00bb 85C0     		testl	%eax, %eax
 1460 00bd 7467     		je	.L144
 893:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (GET_BITS(1))
 1461              		.loc 1 893 0 discriminator 3
 1462 00bf 488B7424 		movq	16(%rsp), %rsi
 1462      10
 1463              	.LVL212:
 1464 00c4 8B542418 		movl	24(%rsp), %edx
 1465              	.LVL213:
 1466 00c8 EBBE     		jmp	.L143
 1467 00ca 660F1F44 		.p2align 4,,10
 1467      0000
 1468              		.p2align 3
 1469              	.L158:
 1470 00d0 498B4424 		movq	40(%r12), %rax
 1470      28
 1471 00d5 488B3C24 		movq	(%rsp), %rdi
 1472              	.LVL214:
 1473              	.L140:
 896:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Note: since we use |=, repeating the assignment later is safe */
 897:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 898:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 899:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Completed MCU, so update state */
 900:fltk-1.3.4-1/jpeg/jdhuff.c ****   BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 1474              		.loc 1 900 0 is_stmt 1
 1475 00d9 488938   		movq	%rdi, (%rax)
 1476 00dc 498B4424 		movq	40(%r12), %rax
 1476      28
 1477 00e1 488B4C24 		movq	8(%rsp), %rcx
 1477      08
 1478 00e6 48894808 		movq	%rcx, 8(%rax)
 901:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 902:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Account for restart interval (no-op if not using restarts) */
 903:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->restarts_to_go--;
 1479              		.loc 1 903 0
 1480 00ea 41836E40 		subl	$1, 64(%r14)
 1480      01
 904:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 905:fltk-1.3.4-1/jpeg/jdhuff.c ****   return TRUE;
 1481              		.loc 1 905 0
 1482 00ef B8010000 		movl	$1, %eax
 1482      00
 900:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1483              		.loc 1 900 0
 1484 00f4 49897618 		movq	%rsi, 24(%r14)
 1485 00f8 41895620 		movl	%edx, 32(%r14)
 1486              	.LVL215:
 1487              	.L142:
 906:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 1488              		.loc 1 906 0
 1489 00fc 488B4C24 		movq	40(%rsp), %rcx
 1489      28
 1490 0101 6448330C 		xorq	%fs:40, %rcx
 1490      25280000 
 1490      00
 1491 010a 751E     		jne	.L159
 1492 010c 4883C430 		addq	$48, %rsp
 1493              		.cfi_remember_state
 1494              		.cfi_def_cfa_offset 48
 1495 0110 5B       		popq	%rbx
 1496              		.cfi_def_cfa_offset 40
 1497 0111 5D       		popq	%rbp
 1498              		.cfi_def_cfa_offset 32
 1499 0112 415C     		popq	%r12
 1500              		.cfi_def_cfa_offset 24
 1501              	.LVL216:
 1502 0114 415D     		popq	%r13
 1503              		.cfi_def_cfa_offset 16
 1504 0116 415E     		popq	%r14
 1505              		.cfi_def_cfa_offset 8
 1506              	.LVL217:
 1507 0118 C3       		ret
 1508              	.LVL218:
 1509              	.L157:
 1510              		.cfi_restore_state
 876:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 1511              		.loc 1 876 0
 1512 0119 E8000000 		call	process_restart
 1512      00
 1513              	.LVL219:
 1514 011e 85C0     		testl	%eax, %eax
 1515 0120 0F8519FF 		jne	.L141
 1515      FFFF
 1516              	.LVL220:
 1517              	.L144:
 877:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 1518              		.loc 1 877 0
 1519 0126 31C0     		xorl	%eax, %eax
 1520 0128 EBD2     		jmp	.L142
 1521              	.L159:
 1522              		.loc 1 906 0
 1523 012a E8000000 		call	__stack_chk_fail
 1523      00
 1524              	.LVL221:
 1525              		.cfi_endproc
 1526              	.LFE68:
 1528              		.section	.text.unlikely.decode_mcu_DC_refine
 1529              	.LCOLDE6:
 1530              		.section	.text.decode_mcu_DC_refine
 1531              	.LHOTE6:
 1532              		.section	.text.unlikely.decode_mcu_AC_refine,"ax",@progbits
 1533              	.LCOLDB7:
 1534              		.section	.text.decode_mcu_AC_refine,"ax",@progbits
 1535              	.LHOTB7:
 1536              		.p2align 4,,15
 1538              	decode_mcu_AC_refine:
 1539              	.LFB69:
 907:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 908:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 909:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 910:fltk-1.3.4-1/jpeg/jdhuff.c ****  * MCU decoding for AC successive approximation refinement scan.
 911:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 912:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 913:fltk-1.3.4-1/jpeg/jdhuff.c **** METHODDEF(boolean)
 914:fltk-1.3.4-1/jpeg/jdhuff.c **** decode_mcu_AC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
 915:fltk-1.3.4-1/jpeg/jdhuff.c **** {   
 1540              		.loc 1 915 0
 1541              		.cfi_startproc
 1542              	.LVL222:
 1543 0000 4157     		pushq	%r15
 1544              		.cfi_def_cfa_offset 16
 1545              		.cfi_offset 15, -16
 1546 0002 4156     		pushq	%r14
 1547              		.cfi_def_cfa_offset 24
 1548              		.cfi_offset 14, -24
 1549 0004 4889F8   		movq	%rdi, %rax
 1550 0007 4155     		pushq	%r13
 1551              		.cfi_def_cfa_offset 32
 1552              		.cfi_offset 13, -32
 1553 0009 4154     		pushq	%r12
 1554              		.cfi_def_cfa_offset 40
 1555              		.cfi_offset 12, -40
 1556 000b 55       		pushq	%rbp
 1557              		.cfi_def_cfa_offset 48
 1558              		.cfi_offset 6, -48
 1559 000c 53       		pushq	%rbx
 1560              		.cfi_def_cfa_offset 56
 1561              		.cfi_offset 3, -56
 1562 000d 4881EC88 		subq	$392, %rsp
 1562      010000
 1563              		.cfi_def_cfa_offset 448
 916:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 917:fltk-1.3.4-1/jpeg/jdhuff.c ****   register int s, k, r;
 918:fltk-1.3.4-1/jpeg/jdhuff.c ****   unsigned int EOBRUN;
 919:fltk-1.3.4-1/jpeg/jdhuff.c ****   int Se, p1, m1;
 920:fltk-1.3.4-1/jpeg/jdhuff.c ****   const int * natural_order;
 921:fltk-1.3.4-1/jpeg/jdhuff.c ****   JBLOCKROW block;
 922:fltk-1.3.4-1/jpeg/jdhuff.c ****   JCOEFPTR thiscoef;
 923:fltk-1.3.4-1/jpeg/jdhuff.c ****   BITREAD_STATE_VARS;
 924:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl * tbl;
 925:fltk-1.3.4-1/jpeg/jdhuff.c ****   int num_newnz;
 926:fltk-1.3.4-1/jpeg/jdhuff.c ****   int newnz_pos[DCTSIZE2];
 927:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 928:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Process restart marker if needed; may have to suspend */
 929:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (cinfo->restart_interval) {
 1564              		.loc 1 929 0
 1565 0014 448B8874 		movl	372(%rax), %r9d
 1565      010000
 915:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 1566              		.loc 1 915 0
 1567 001b 48897C24 		movq	%rdi, 48(%rsp)
 1567      30
 1568 0020 64488B3C 		movq	%fs:40, %rdi
 1568      25280000 
 1568      00
 1569 0029 4889BC24 		movq	%rdi, 376(%rsp)
 1569      78010000 
 1570 0031 31FF     		xorl	%edi, %edi
 1571              	.LVL223:
 916:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 1572              		.loc 1 916 0
 1573 0033 488BB870 		movq	624(%rax), %rdi
 1573      020000
 1574              		.loc 1 929 0
 1575 003a 4585C9   		testl	%r9d, %r9d
 916:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 1576              		.loc 1 916 0
 1577 003d 48897C24 		movq	%rdi, 40(%rsp)
 1577      28
 1578              	.LVL224:
 1579              		.loc 1 929 0
 1580 0042 7410     		je	.L164
 930:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (entropy->restarts_to_go == 0)
 1581              		.loc 1 930 0
 1582 0044 488B4424 		movq	40(%rsp), %rax
 1582      28
 1583              	.LVL225:
 1584 0049 8B7840   		movl	64(%rax), %edi
 1585              	.LVL226:
 1586 004c 85FF     		testl	%edi, %edi
 1587 004e 0F845704 		je	.L248
 1587      0000
 1588              	.LVL227:
 1589              	.L164:
 931:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (! process_restart(cinfo))
 932:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 933:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 934:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 935:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* If we've run out of data, don't modify the MCU.
 936:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
 937:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (! entropy->insufficient_data) {
 1590              		.loc 1 937 0
 1591 0054 488B4424 		movq	40(%rsp), %rax
 1591      28
 1592 0059 448B403C 		movl	60(%rax), %r8d
 1593 005d 4585C0   		testl	%r8d, %r8d
 1594 0060 0F852C02 		jne	.L163
 1594      0000
 938:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 939:fltk-1.3.4-1/jpeg/jdhuff.c ****     Se = cinfo->Se;
 1595              		.loc 1 939 0
 1596 0066 488B7C24 		movq	48(%rsp), %rdi
 1596      30
 940:fltk-1.3.4-1/jpeg/jdhuff.c ****     p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 941:fltk-1.3.4-1/jpeg/jdhuff.c ****     m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 1597              		.loc 1 941 0
 1598 006b B8FFFFFF 		movl	$-1, %eax
 1598      FF
 940:fltk-1.3.4-1/jpeg/jdhuff.c ****     p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 1599              		.loc 1 940 0
 1600 0070 41BB0100 		movl	$1, %r11d
 1600      0000
 942:fltk-1.3.4-1/jpeg/jdhuff.c ****     natural_order = cinfo->natural_order;
 943:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 944:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Load up working state */
 945:fltk-1.3.4-1/jpeg/jdhuff.c ****     BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 946:fltk-1.3.4-1/jpeg/jdhuff.c ****     EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 947:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 948:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* There is always only one block per MCU */
 949:fltk-1.3.4-1/jpeg/jdhuff.c ****     block = MCU_data[0];
 1601              		.loc 1 949 0
 1602 0076 4C8B36   		movq	(%rsi), %r14
 940:fltk-1.3.4-1/jpeg/jdhuff.c ****     p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 1603              		.loc 1 940 0
 1604 0079 8B8F2802 		movl	552(%rdi), %ecx
 1604      0000
 939:fltk-1.3.4-1/jpeg/jdhuff.c ****     p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 1605              		.loc 1 939 0
 1606 007f 448B8F20 		movl	544(%rdi), %r9d
 1606      020000
 1607              	.LVL228:
 941:fltk-1.3.4-1/jpeg/jdhuff.c ****     natural_order = cinfo->natural_order;
 1608              		.loc 1 941 0
 1609 0086 D3E0     		sall	%cl, %eax
 940:fltk-1.3.4-1/jpeg/jdhuff.c ****     m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 1610              		.loc 1 940 0
 1611 0088 41D3E3   		sall	%cl, %r11d
 1612              	.LVL229:
 945:fltk-1.3.4-1/jpeg/jdhuff.c ****     EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 1613              		.loc 1 945 0
 1614 008b 488B4C24 		movq	40(%rsp), %rcx
 1614      28
 941:fltk-1.3.4-1/jpeg/jdhuff.c ****     natural_order = cinfo->natural_order;
 1615              		.loc 1 941 0
 1616 0090 89442424 		movl	%eax, 36(%rsp)
 1617              	.LVL230:
 942:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1618              		.loc 1 942 0
 1619 0094 4889F8   		movq	%rdi, %rax
 1620              	.LVL231:
 1621 0097 488BBF30 		movq	560(%rdi), %rdi
 1621      020000
 945:fltk-1.3.4-1/jpeg/jdhuff.c ****     EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 1622              		.loc 1 945 0
 1623 009e 48894424 		movq	%rax, 96(%rsp)
 1623      60
 946:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1624              		.loc 1 946 0
 1625 00a3 8B5928   		movl	40(%rcx), %ebx
 942:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1626              		.loc 1 942 0
 1627 00a6 48897C24 		movq	%rdi, 8(%rsp)
 1627      08
 1628              	.LVL232:
 945:fltk-1.3.4-1/jpeg/jdhuff.c ****     EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 1629              		.loc 1 945 0
 1630 00ab 4889C7   		movq	%rax, %rdi
 1631              	.LVL233:
 1632 00ae 488B4028 		movq	40(%rax), %rax
 1633              	.LVL234:
 946:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1634              		.loc 1 946 0
 1635 00b2 4189DA   		movl	%ebx, %r10d
 1636 00b5 895C243C 		movl	%ebx, 60(%rsp)
 950:fltk-1.3.4-1/jpeg/jdhuff.c ****     tbl = entropy->ac_derived_tbl;
 951:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 952:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* If we are forced to suspend, we must undo the assignments to any newly
 953:fltk-1.3.4-1/jpeg/jdhuff.c ****      * nonzero coefficients in the block, because otherwise we'd get confused
 954:fltk-1.3.4-1/jpeg/jdhuff.c ****      * next time about which coefficients were already nonzero.
 955:fltk-1.3.4-1/jpeg/jdhuff.c ****      * But we need not undo addition of bits to already-nonzero coefficients;
 956:fltk-1.3.4-1/jpeg/jdhuff.c ****      * instead, we can test the current bit to see if we already did it.
 957:fltk-1.3.4-1/jpeg/jdhuff.c ****      */
 958:fltk-1.3.4-1/jpeg/jdhuff.c ****     num_newnz = 0;
 959:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 960:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* initialize coefficient loop counter to start of band */
 961:fltk-1.3.4-1/jpeg/jdhuff.c ****     k = cinfo->Ss;
 1637              		.loc 1 961 0
 1638 00b9 8B9F1C02 		movl	540(%rdi), %ebx
 1638      0000
 945:fltk-1.3.4-1/jpeg/jdhuff.c ****     EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 1639              		.loc 1 945 0
 1640 00bf 488B10   		movq	(%rax), %rdx
 1641 00c2 488B4008 		movq	8(%rax), %rax
 962:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 963:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (EOBRUN == 0) {
 1642              		.loc 1 963 0
 1643 00c6 4585D2   		testl	%r10d, %r10d
 945:fltk-1.3.4-1/jpeg/jdhuff.c ****     EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 1644              		.loc 1 945 0
 1645 00c9 48895424 		movq	%rdx, 64(%rsp)
 1645      40
 1646 00ce 48894424 		movq	%rax, 72(%rsp)
 1646      48
 1647 00d3 8B5120   		movl	32(%rcx), %edx
 1648 00d6 488B4118 		movq	24(%rcx), %rax
 1649              	.LVL235:
 1650              		.loc 1 963 0
 1651 00da 0F85E901 		jne	.L195
 1651      0000
 950:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1652              		.loc 1 950 0
 1653 00e0 488B7168 		movq	104(%rcx), %rsi
 1654 00e4 4531FF   		xorl	%r15d, %r15d
 1655 00e7 4C897424 		movq	%r14, 16(%rsp)
 1655      10
 1656 00ec 44897C24 		movl	%r15d, 56(%rsp)
 1656      38
 1657 00f1 4589DE   		movl	%r11d, %r14d
 1658              	.LVL236:
 1659 00f4 4589CF   		movl	%r9d, %r15d
 1660 00f7 48897424 		movq	%rsi, 24(%rsp)
 1660      18
 1661              	.LVL237:
 1662 00fc 0F1F4000 		.p2align 4,,10
 1663              		.p2align 3
 1664              	.L187:
 1665              	.LBB18:
 964:fltk-1.3.4-1/jpeg/jdhuff.c ****       do {
 965:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 1666              		.loc 1 965 0
 1667 0100 83FA07   		cmpl	$7, %edx
 1668 0103 0F8E4703 		jle	.L249
 1668      0000
 1669              	.L167:
 1670              		.loc 1 965 0 is_stmt 0 discriminator 5
 1671 0109 8D4AF8   		leal	-8(%rdx), %ecx
 1672 010c 4889C7   		movq	%rax, %rdi
 1673 010f 48D3FF   		sarq	%cl, %rdi
 1674              	.LVL238:
 1675 0112 400FB6CF 		movzbl	%dil, %ecx
 1676 0116 488B7C24 		movq	24(%rsp), %rdi
 1676      18
 1677              	.LVL239:
 1678 011b 8BB48F20 		movl	288(%rdi,%rcx,4), %esi
 1678      010000
 1679              	.LVL240:
 1680 0122 85F6     		testl	%esi, %esi
 1681 0124 0F84EE02 		je	.L197
 1681      0000
 1682              		.loc 1 965 0 discriminator 7
 1683 012a 440FB684 		movzbl	1312(%rdi,%rcx), %r8d
 1683      0F200500 
 1683      00
 1684 0133 29F2     		subl	%esi, %edx
 1685              	.LVL241:
 1686              	.L170:
 1687              	.LBE18:
 966:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1688              		.loc 1 966 0 is_stmt 1
 1689 0135 4589C5   		movl	%r8d, %r13d
 1690 0138 41C1FD04 		sarl	$4, %r13d
 1691              	.LVL242:
 967:fltk-1.3.4-1/jpeg/jdhuff.c **** 	s &= 15;
 968:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (s) {
 1692              		.loc 1 968 0
 1693 013c 4183E00F 		andl	$15, %r8d
 1694              	.LVL243:
 1695 0140 0F846A02 		je	.L171
 1695      0000
 969:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (s != 1)		/* size of new coef should always be 1 */
 1696              		.loc 1 969 0
 1697 0146 4183F801 		cmpl	$1, %r8d
 1698 014a 742D     		je	.L172
 1699 014c 48890424 		movq	%rax, (%rsp)
 970:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
 1700              		.loc 1 970 0
 1701 0150 488B4424 		movq	48(%rsp), %rax
 1701      30
 1702              	.LVL244:
 1703 0155 BEFFFFFF 		movl	$-1, %esi
 1703      FF
 1704 015a 89542420 		movl	%edx, 32(%rsp)
 1705 015e 488B08   		movq	(%rax), %rcx
 1706 0161 4889C7   		movq	%rax, %rdi
 1707 0164 C7412879 		movl	$121, 40(%rcx)
 1707      000000
 1708 016b 488B08   		movq	(%rax), %rcx
 1709 016e FF5108   		call	*8(%rcx)
 1710              	.LVL245:
 1711 0171 8B542420 		movl	32(%rsp), %edx
 1712 0175 488B0424 		movq	(%rsp), %rax
 1713              	.LVL246:
 1714              	.L172:
 971:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 1715              		.loc 1 971 0
 1716 0179 85D2     		testl	%edx, %edx
 1717 017b 0F8E0303 		jle	.L250
 1717      0000
 1718              	.L173:
 1719              	.LVL247:
 972:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1))
 1720              		.loc 1 972 0
 1721 0181 83EA01   		subl	$1, %edx
 1722              	.LVL248:
 1723 0184 4889C7   		movq	%rax, %rdi
 973:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    s = p1;		/* newly nonzero coef is positive */
 974:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  else
 975:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    s = m1;		/* newly nonzero coef is negative */
 1724              		.loc 1 975 0
 1725 0187 448B4424 		movl	36(%rsp), %r8d
 1725      24
 972:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1))
 1726              		.loc 1 972 0
 1727 018c 89D1     		movl	%edx, %ecx
 1728 018e 48D3FF   		sarq	%cl, %rdi
 1729 0191 4889F9   		movq	%rdi, %rcx
 1730              		.loc 1 975 0
 1731 0194 83E101   		andl	$1, %ecx
 1732 0197 450F45C6 		cmovne	%r14d, %r8d
 1733              	.L177:
 1734 019b 488B7C24 		movq	8(%rsp), %rdi
 1734      08
 1735 01a0 4863CB   		movslq	%ebx, %rcx
 976:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} else {
 977:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (r != 15) {
 978:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 979:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (r) {
 980:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 981:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      r = GET_BITS(r);
 982:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      EOBRUN += r;
 983:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    }
 984:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    break;		/* rest of block is handled by EOB logic */
 985:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  }
 986:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* note s = 0 for processing ZRL */
 987:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 988:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Advance over already-nonzero coefs and r still-zero coefs,
 989:fltk-1.3.4-1/jpeg/jdhuff.c **** 	 * appending correction bits to the nonzeroes.  A correction bit is 1
 990:fltk-1.3.4-1/jpeg/jdhuff.c **** 	 * if the absolute value of the coefficient must be increased.
 991:fltk-1.3.4-1/jpeg/jdhuff.c **** 	 */
 992:fltk-1.3.4-1/jpeg/jdhuff.c **** 	do {
 993:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  thiscoef = *block + natural_order[k];
 994:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (*thiscoef) {
 995:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 1736              		.loc 1 995 0
 1737 01a3 4589F1   		movl	%r14d, %r9d
 1738 01a6 4889C6   		movq	%rax, %rsi
 1739 01a9 4589FE   		movl	%r15d, %r14d
 1740 01ac 44894424 		movl	%r8d, 32(%rsp)
 1740      20
 1741 01b1 4C8B7C24 		movq	16(%rsp), %r15
 1741      10
 1742              	.LVL249:
 1743 01b6 488D2C8F 		leaq	(%rdi,%rcx,4), %rbp
 1744 01ba EB40     		jmp	.L185
 1745              	.LVL250:
 1746 01bc 0F1F4000 		.p2align 4,,10
 1747              		.p2align 3
 1748              	.L252:
 1749 01c0 85D2     		testl	%edx, %edx
 1750 01c2 0F8EA801 		jle	.L251
 1750      0000
 1751              	.L181:
 996:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (GET_BITS(1)) {
 1752              		.loc 1 996 0
 1753 01c8 83EA01   		subl	$1, %edx
 1754              	.LVL251:
 1755 01cb 480FA3D6 		btq	%rdx, %rsi
 1756 01cf 731F     		jnc	.L182
 997:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
 1757              		.loc 1 997 0
 1758 01d1 410FBF04 		movswl	(%r12), %eax
 1758      24
 1759 01d6 4485C8   		testl	%r9d, %eax
 1760 01d9 89C1     		movl	%eax, %ecx
 1761 01db 7513     		jne	.L182
 998:fltk-1.3.4-1/jpeg/jdhuff.c **** 		if (*thiscoef >= 0)
 1762              		.loc 1 998 0
 1763 01dd 6685C0   		testw	%ax, %ax
 1764 01e0 0F88BA01 		js	.L183
 1764      0000
 999:fltk-1.3.4-1/jpeg/jdhuff.c **** 		  *thiscoef += p1;
 1765              		.loc 1 999 0
 1766 01e6 4401C9   		addl	%r9d, %ecx
 1767 01e9 6641890C 		movw	%cx, (%r12)
 1767      24
 1768 01ee 6690     		.p2align 4,,10
 1769              		.p2align 3
 1770              	.L182:
1000:fltk-1.3.4-1/jpeg/jdhuff.c **** 		else
1001:fltk-1.3.4-1/jpeg/jdhuff.c **** 		  *thiscoef += m1;
1002:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      }
1003:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    }
1004:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  } else {
1005:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (--r < 0)
1006:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      break;		/* reached target zero coefficient */
1007:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  }
1008:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  k++;
 1771              		.loc 1 1008 0
 1772 01f0 83C301   		addl	$1, %ebx
 1773              	.LVL252:
 1774 01f3 4883C504 		addq	$4, %rbp
1009:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} while (k <= Se);
 1775              		.loc 1 1009 0
 1776 01f7 4139DE   		cmpl	%ebx, %r14d
 1777 01fa 7C1A     		jl	.L184
 1778              	.LVL253:
 1779              	.L185:
 993:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (*thiscoef) {
 1780              		.loc 1 993 0
 1781 01fc 48634D00 		movslq	0(%rbp), %rcx
 1782 0200 4D8D244F 		leaq	(%r15,%rcx,2), %r12
 1783              	.LVL254:
 994:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 1784              		.loc 1 994 0
 1785 0204 6641833C 		cmpw	$0, (%r12)
 1785      2400
 1786 020a 75B4     		jne	.L252
1005:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      break;		/* reached target zero coefficient */
 1787              		.loc 1 1005 0
 1788 020c 4183ED01 		subl	$1, %r13d
 1789              	.LVL255:
 1790 0210 4183FDFF 		cmpl	$-1, %r13d
 1791 0214 75DA     		jne	.L182
 1792              	.L184:
 1793 0216 448B4424 		movl	32(%rsp), %r8d
 1793      20
 1794 021b 4589F7   		movl	%r14d, %r15d
 1795 021e 4889F0   		movq	%rsi, %rax
 1796 0221 4589CE   		movl	%r9d, %r14d
 1797              	.LVL256:
1010:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (s) {
 1798              		.loc 1 1010 0
 1799 0224 4585C0   		testl	%r8d, %r8d
 1800 0227 742C     		je	.L186
 1801              	.LBB19:
1011:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  int pos = natural_order[k];
 1802              		.loc 1 1011 0
 1803 0229 488B7C24 		movq	8(%rsp), %rdi
 1803      08
 1804 022e 4863CB   		movslq	%ebx, %rcx
 1805 0231 4863348F 		movslq	(%rdi,%rcx,4), %rsi
1012:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* Output newly nonzero coefficient */
1013:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  (*block)[pos] = (JCOEF) s;
 1806              		.loc 1 1013 0
 1807 0235 488B7C24 		movq	16(%rsp), %rdi
 1807      10
1011:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  int pos = natural_order[k];
 1808              		.loc 1 1011 0
 1809 023a 4889F1   		movq	%rsi, %rcx
 1810              	.LVL257:
 1811              		.loc 1 1013 0
 1812 023d 66448904 		movw	%r8w, (%rdi,%rsi,2)
 1812      77
1014:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* Remember its position in case we have to suspend */
1015:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  newnz_pos[num_newnz++] = pos;
 1813              		.loc 1 1015 0
 1814 0242 48637424 		movslq	56(%rsp), %rsi
 1814      38
 1815              	.LVL258:
 1816 0247 4889F7   		movq	%rsi, %rdi
 1817 024a 894CB470 		movl	%ecx, 112(%rsp,%rsi,4)
 1818 024e 83C701   		addl	$1, %edi
 1819 0251 897C2438 		movl	%edi, 56(%rsp)
 1820              	.LVL259:
 1821              	.L186:
 1822              	.LBE19:
1016:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
1017:fltk-1.3.4-1/jpeg/jdhuff.c **** 	k++;
 1823              		.loc 1 1017 0
 1824 0255 83C301   		addl	$1, %ebx
 1825              	.LVL260:
1018:fltk-1.3.4-1/jpeg/jdhuff.c ****       } while (k <= Se);
 1826              		.loc 1 1018 0
 1827 0258 4139DF   		cmpl	%ebx, %r15d
 1828 025b 0F8D9FFE 		jge	.L187
 1828      FFFF
 1829              	.LVL261:
 1830              	.L188:
1019:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1020:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1021:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (EOBRUN) {
1022:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Scan any remaining coefficient positions after the end-of-band
1023:fltk-1.3.4-1/jpeg/jdhuff.c ****        * (the last newly nonzero coefficient, if any).  Append a correction
1024:fltk-1.3.4-1/jpeg/jdhuff.c ****        * bit to each already-nonzero coefficient.  A correction bit is 1
1025:fltk-1.3.4-1/jpeg/jdhuff.c ****        * if the absolute value of the coefficient must be increased.
1026:fltk-1.3.4-1/jpeg/jdhuff.c ****        */
1027:fltk-1.3.4-1/jpeg/jdhuff.c ****       do {
1028:fltk-1.3.4-1/jpeg/jdhuff.c **** 	thiscoef = *block + natural_order[k];
1029:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (*thiscoef) {
1030:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
1031:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1)) {
1032:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
1033:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      if (*thiscoef >= 0)
1034:fltk-1.3.4-1/jpeg/jdhuff.c **** 		*thiscoef += p1;
1035:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      else
1036:fltk-1.3.4-1/jpeg/jdhuff.c **** 		*thiscoef += m1;
1037:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    }
1038:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  }
1039:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
1040:fltk-1.3.4-1/jpeg/jdhuff.c **** 	k++;
1041:fltk-1.3.4-1/jpeg/jdhuff.c ****       } while (k <= Se);
1042:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Count one block completed in EOB run */
1043:fltk-1.3.4-1/jpeg/jdhuff.c ****       EOBRUN--;
1044:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1045:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1046:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Completed MCU, so update state */
1047:fltk-1.3.4-1/jpeg/jdhuff.c ****     BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 1831              		.loc 1 1047 0
 1832 0261 488B7C24 		movq	48(%rsp), %rdi
 1832      30
 1833 0266 488B7424 		movq	64(%rsp), %rsi
 1833      40
 1834 026b 488B4F28 		movq	40(%rdi), %rcx
 1835 026f 488931   		movq	%rsi, (%rcx)
 1836 0272 488B4F28 		movq	40(%rdi), %rcx
 1837 0276 488B7424 		movq	72(%rsp), %rsi
 1837      48
 1838 027b 488B7C24 		movq	40(%rsp), %rdi
 1838      28
 1839 0280 48897108 		movq	%rsi, 8(%rcx)
 1840 0284 48894718 		movq	%rax, 24(%rdi)
1048:fltk-1.3.4-1/jpeg/jdhuff.c ****     entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 1841              		.loc 1 1048 0
 1842 0288 8B44243C 		movl	60(%rsp), %eax
 1843              	.LVL262:
1047:fltk-1.3.4-1/jpeg/jdhuff.c ****     entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 1844              		.loc 1 1047 0
 1845 028c 895720   		movl	%edx, 32(%rdi)
 1846              		.loc 1 1048 0
 1847 028f 894728   		movl	%eax, 40(%rdi)
 1848              	.LVL263:
 1849              	.L163:
1049:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
1050:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1051:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Account for restart interval (no-op if not using restarts) */
1052:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->restarts_to_go--;
 1850              		.loc 1 1052 0
 1851 0292 488B4424 		movq	40(%rsp), %rax
 1851      28
 1852 0297 83684001 		subl	$1, 64(%rax)
1053:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1054:fltk-1.3.4-1/jpeg/jdhuff.c ****   return TRUE;
 1853              		.loc 1 1054 0
 1854 029b B8010000 		movl	$1, %eax
 1854      00
 1855              	.L165:
1055:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1056:fltk-1.3.4-1/jpeg/jdhuff.c **** undoit:
1057:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Re-zero any output coefficients that we made newly nonzero */
1058:fltk-1.3.4-1/jpeg/jdhuff.c ****   while (num_newnz)
1059:fltk-1.3.4-1/jpeg/jdhuff.c ****     (*block)[newnz_pos[--num_newnz]] = 0;
1060:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1061:fltk-1.3.4-1/jpeg/jdhuff.c ****   return FALSE;
1062:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 1856              		.loc 1 1062 0
 1857 02a0 488BB424 		movq	376(%rsp), %rsi
 1857      78010000 
 1858 02a8 64483334 		xorq	%fs:40, %rsi
 1858      25280000 
 1858      00
 1859 02b1 0F85A502 		jne	.L253
 1859      0000
 1860 02b7 4881C488 		addq	$392, %rsp
 1860      010000
 1861              		.cfi_remember_state
 1862              		.cfi_def_cfa_offset 56
 1863 02be 5B       		popq	%rbx
 1864              		.cfi_def_cfa_offset 48
 1865 02bf 5D       		popq	%rbp
 1866              		.cfi_def_cfa_offset 40
 1867 02c0 415C     		popq	%r12
 1868              		.cfi_def_cfa_offset 32
 1869 02c2 415D     		popq	%r13
 1870              		.cfi_def_cfa_offset 24
 1871 02c4 415E     		popq	%r14
 1872              		.cfi_def_cfa_offset 16
 1873 02c6 415F     		popq	%r15
 1874              		.cfi_def_cfa_offset 8
 1875 02c8 C3       		ret
 1876              	.LVL264:
 1877              	.L195:
 1878              		.cfi_restore_state
 958:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1879              		.loc 1 958 0
 1880 02c9 4531FF   		xorl	%r15d, %r15d
 1881              	.LVL265:
 1882              	.L166:
 1883 02cc 488B7424 		movq	8(%rsp), %rsi
 1883      08
 1884 02d1 4863CB   		movslq	%ebx, %rcx
1030:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1)) {
 1885              		.loc 1 1030 0
 1886 02d4 44893C24 		movl	%r15d, (%rsp)
 1887 02d8 4589CD   		movl	%r9d, %r13d
 1888 02db 4589DF   		movl	%r11d, %r15d
 1889              	.LVL266:
 1890 02de 488D2C8E 		leaq	(%rsi,%rcx,4), %rbp
 1891 02e2 4889C6   		movq	%rax, %rsi
 1892 02e5 EB69     		jmp	.L192
 1893              	.LVL267:
 1894              	.L255:
1030:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1)) {
 1895              		.loc 1 1030 0 is_stmt 0 discriminator 1
 1896 02e7 488D7C24 		leaq	64(%rsp), %rdi
 1896      40
 1897 02ec B9010000 		movl	$1, %ecx
 1897      00
 1898 02f1 E8000000 		call	jpeg_fill_bit_buffer
 1898      00
 1899              	.LVL268:
 1900 02f6 85C0     		testl	%eax, %eax
 1901 02f8 0F842402 		je	.L244
 1901      0000
1030:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1)) {
 1902              		.loc 1 1030 0 discriminator 2
 1903 02fe 488B7424 		movq	80(%rsp), %rsi
 1903      50
 1904              	.LVL269:
 1905 0303 8B542458 		movl	88(%rsp), %edx
 1906              	.LVL270:
 1907 0307 660F1F84 		.p2align 4,,10
 1907      00000000 
 1907      00
 1908              		.p2align 3
 1909              	.L190:
1031:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
 1910              		.loc 1 1031 0 is_stmt 1
 1911 0310 83EA01   		subl	$1, %edx
 1912              	.LVL271:
 1913 0313 480FA3D6 		btq	%rdx, %rsi
 1914 0317 7327     		jnc	.L189
1032:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      if (*thiscoef >= 0)
 1915              		.loc 1 1032 0
 1916 0319 410FBF04 		movswl	(%r12), %eax
 1916      24
 1917 031e 4485F8   		testl	%r15d, %eax
 1918 0321 89C1     		movl	%eax, %ecx
 1919 0323 751B     		jne	.L189
1033:fltk-1.3.4-1/jpeg/jdhuff.c **** 		*thiscoef += p1;
 1920              		.loc 1 1033 0
 1921 0325 6685C0   		testw	%ax, %ax
 1922 0328 0F88D901 		js	.L191
 1922      0000
1034:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      else
 1923              		.loc 1 1034 0
 1924 032e 4401F9   		addl	%r15d, %ecx
 1925 0331 6641890C 		movw	%cx, (%r12)
 1925      24
 1926 0336 662E0F1F 		.p2align 4,,10
 1926      84000000 
 1926      0000
 1927              		.p2align 3
 1928              	.L189:
1040:fltk-1.3.4-1/jpeg/jdhuff.c ****       } while (k <= Se);
 1929              		.loc 1 1040 0
 1930 0340 83C301   		addl	$1, %ebx
 1931              	.LVL272:
 1932 0343 4883C504 		addq	$4, %rbp
1041:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Count one block completed in EOB run */
 1933              		.loc 1 1041 0
 1934 0347 4139DD   		cmpl	%ebx, %r13d
 1935 034a 0F8C7C01 		jl	.L254
 1935      0000
 1936              	.LVL273:
 1937              	.L192:
1028:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (*thiscoef) {
 1938              		.loc 1 1028 0
 1939 0350 48634D00 		movslq	0(%rbp), %rcx
 1940 0354 4D8D244E 		leaq	(%r14,%rcx,2), %r12
 1941              	.LVL274:
1029:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 1942              		.loc 1 1029 0
 1943 0358 6641833C 		cmpw	$0, (%r12)
 1943      2400
 1944 035e 74E0     		je	.L189
1030:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1)) {
 1945              		.loc 1 1030 0
 1946 0360 85D2     		testl	%edx, %edx
 1947 0362 7FAC     		jg	.L190
 1948 0364 EB81     		jmp	.L255
 1949              	.LVL275:
 1950 0366 662E0F1F 		.p2align 4,,10
 1950      84000000 
 1950      0000
 1951              		.p2align 3
 1952              	.L251:
 995:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (GET_BITS(1)) {
 1953              		.loc 1 995 0 discriminator 1
 1954 0370 488D7C24 		leaq	64(%rsp), %rdi
 1954      40
 1955 0375 B9010000 		movl	$1, %ecx
 1955      00
 1956 037a 44890C24 		movl	%r9d, (%rsp)
 1957 037e E8000000 		call	jpeg_fill_bit_buffer
 1957      00
 1958              	.LVL276:
 1959 0383 85C0     		testl	%eax, %eax
 1960 0385 0F844E01 		je	.L243
 1960      0000
 995:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (GET_BITS(1)) {
 1961              		.loc 1 995 0 is_stmt 0 discriminator 2
 1962 038b 488B7424 		movq	80(%rsp), %rsi
 1962      50
 1963              	.LVL277:
 1964 0390 8B542458 		movl	88(%rsp), %edx
 1965 0394 448B0C24 		movl	(%rsp), %r9d
 1966              	.LVL278:
 1967 0398 E92BFEFF 		jmp	.L181
 1967      FF
 1968 039d 0F1F00   		.p2align 4,,10
 1969              		.p2align 3
 1970              	.L183:
1001:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      }
 1971              		.loc 1 1001 0 is_stmt 1
 1972 03a0 66034C24 		addw	36(%rsp), %cx
 1972      24
 1973 03a5 6641890C 		movw	%cx, (%r12)
 1973      24
 1974 03aa E941FEFF 		jmp	.L182
 1974      FF
 1975              	.LVL279:
 1976 03af 90       		.p2align 4,,10
 1977              		.p2align 3
 1978              	.L171:
 977:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 1979              		.loc 1 977 0
 1980 03b0 4183FD0F 		cmpl	$15, %r13d
 1981 03b4 0F84E1FD 		je	.L177
 1981      FFFF
 978:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (r) {
 1982              		.loc 1 978 0
 1983 03ba BE010000 		movl	$1, %esi
 1983      00
 1984 03bf 4489E9   		movl	%r13d, %ecx
 1985 03c2 4589F9   		movl	%r15d, %r9d
 1986 03c5 D3E6     		sall	%cl, %esi
 979:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 1987              		.loc 1 979 0
 1988 03c7 4585ED   		testl	%r13d, %r13d
 1989 03ca 4589F3   		movl	%r14d, %r11d
 1990 03cd 448B7C24 		movl	56(%rsp), %r15d
 1990      38
 1991              	.LVL280:
 1992 03d2 4C8B7424 		movq	16(%rsp), %r14
 1992      10
 978:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (r) {
 1993              		.loc 1 978 0
 1994 03d7 8974243C 		movl	%esi, 60(%rsp)
 1995              	.LVL281:
 979:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 1996              		.loc 1 979 0
 1997 03db 7426     		je	.L178
 980:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      r = GET_BITS(r);
 1998              		.loc 1 980 0
 1999 03dd 4439EA   		cmpl	%r13d, %edx
 2000 03e0 0F8C4201 		jl	.L256
 2000      0000
 2001              	.LVL282:
 2002              	.L179:
 981:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      EOBRUN += r;
 2003              		.loc 1 981 0
 2004 03e6 4429EA   		subl	%r13d, %edx
 2005              	.LVL283:
 982:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    }
 2006              		.loc 1 982 0
 2007 03e9 4889C6   		movq	%rax, %rsi
 981:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      EOBRUN += r;
 2008              		.loc 1 981 0
 2009 03ec 4D63ED   		movslq	%r13d, %r13
 2010              	.LVL284:
 982:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    }
 2011              		.loc 1 982 0
 2012 03ef 89D1     		movl	%edx, %ecx
 2013 03f1 48D3FE   		sarq	%cl, %rsi
 2014 03f4 4889F1   		movq	%rsi, %rcx
 2015 03f7 42230CAD 		andl	bmask(,%r13,4), %ecx
 2015      00000000 
 2016 03ff 014C243C 		addl	%ecx, 60(%rsp)
 2017              	.LVL285:
 2018              	.L178:
1021:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Scan any remaining coefficient positions after the end-of-band
 2019              		.loc 1 1021 0
 2020 0403 8B4C243C 		movl	60(%rsp), %ecx
 2021 0407 85C9     		testl	%ecx, %ecx
 2022 0409 0F8452FE 		je	.L188
 2022      FFFF
 2023 040f E9B8FEFF 		jmp	.L166
 2023      FF
 2024              	.LVL286:
 2025              		.p2align 4,,10
 2026 0414 0F1F4000 		.p2align 3
 2027              	.L197:
 2028 0418 488D6C24 		leaq	64(%rsp), %rbp
 2028      40
 2029              	.LBB20:
 965:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 2030              		.loc 1 965 0
 2031 041d 41B80900 		movl	$9, %r8d
 2031      0000
 2032              	.LVL287:
 2033              	.L169:
 965:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 2034              		.loc 1 965 0 is_stmt 0 discriminator 9
 2035 0423 488B4C24 		movq	24(%rsp), %rcx
 2035      18
 2036 0428 4889C6   		movq	%rax, %rsi
 2037 042b 4889EF   		movq	%rbp, %rdi
 2038 042e E8000000 		call	jpeg_huff_decode
 2038      00
 2039              	.LVL288:
 2040 0433 85C0     		testl	%eax, %eax
 2041 0435 4189C0   		movl	%eax, %r8d
 2042              	.LVL289:
 2043 0438 0F88D800 		js	.L241
 2043      0000
 965:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 2044              		.loc 1 965 0 discriminator 10
 2045 043e 488B4424 		movq	80(%rsp), %rax
 2045      50
 2046              	.LVL290:
 2047 0443 8B542458 		movl	88(%rsp), %edx
 2048              	.LVL291:
 2049 0447 E9E9FCFF 		jmp	.L170
 2049      FF
 2050              	.LVL292:
 2051 044c 0F1F4000 		.p2align 4,,10
 2052              		.p2align 3
 2053              	.L249:
 965:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 2054              		.loc 1 965 0 discriminator 1
 2055 0450 488D6C24 		leaq	64(%rsp), %rbp
 2055      40
 2056 0455 31C9     		xorl	%ecx, %ecx
 2057 0457 4889C6   		movq	%rax, %rsi
 2058 045a 4889EF   		movq	%rbp, %rdi
 2059 045d E8000000 		call	jpeg_fill_bit_buffer
 2059      00
 2060              	.LVL293:
 2061 0462 85C0     		testl	%eax, %eax
 2062 0464 0F84AC00 		je	.L241
 2062      0000
 965:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 2063              		.loc 1 965 0 discriminator 3
 2064 046a 8B542458 		movl	88(%rsp), %edx
 2065 046e 488B4424 		movq	80(%rsp), %rax
 2065      50
 2066              	.LVL294:
 2067 0473 83FA07   		cmpl	$7, %edx
 2068 0476 0F8F8DFC 		jg	.L167
 2068      FFFF
 965:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 2069              		.loc 1 965 0
 2070 047c 41B80100 		movl	$1, %r8d
 2070      0000
 2071 0482 EB9F     		jmp	.L169
 2072              	.LVL295:
 2073              	.L250:
 2074              	.LBE20:
 971:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1))
 2075              		.loc 1 971 0 is_stmt 1 discriminator 1
 2076 0484 488D6C24 		leaq	64(%rsp), %rbp
 2076      40
 2077 0489 B9010000 		movl	$1, %ecx
 2077      00
 2078 048e 4889C6   		movq	%rax, %rsi
 2079 0491 4889EF   		movq	%rbp, %rdi
 2080 0494 E8000000 		call	jpeg_fill_bit_buffer
 2080      00
 2081              	.LVL296:
 2082 0499 85C0     		testl	%eax, %eax
 2083 049b 7479     		je	.L241
 971:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1))
 2084              		.loc 1 971 0 is_stmt 0 discriminator 2
 2085 049d 488B4424 		movq	80(%rsp), %rax
 2085      50
 2086              	.LVL297:
 2087 04a2 8B542458 		movl	88(%rsp), %edx
 2088              	.LVL298:
 2089 04a6 E9D6FCFF 		jmp	.L173
 2089      FF
 2090              	.LVL299:
 2091              	.L248:
 931:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 2092              		.loc 1 931 0 is_stmt 1
 2093 04ab 488B7C24 		movq	48(%rsp), %rdi
 2093      30
 2094 04b0 48893424 		movq	%rsi, (%rsp)
 2095 04b4 E8000000 		call	process_restart
 2095      00
 2096              	.LVL300:
 2097 04b9 85C0     		testl	%eax, %eax
 2098 04bb 488B3424 		movq	(%rsp), %rsi
 2099 04bf 0F858FFB 		jne	.L164
 2099      FFFF
 932:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 2100              		.loc 1 932 0
 2101 04c5 31C0     		xorl	%eax, %eax
 2102 04c7 E9D4FDFF 		jmp	.L165
 2102      FF
 2103              	.LVL301:
 2104              	.L254:
 2105 04cc 4889F0   		movq	%rsi, %rax
1043:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 2106              		.loc 1 1043 0
 2107 04cf 836C243C 		subl	$1, 60(%rsp)
 2107      01
 2108              	.LVL302:
 2109 04d4 E988FDFF 		jmp	.L188
 2109      FF
 2110              	.LVL303:
 2111              	.L243:
 2112 04d9 4D89FE   		movq	%r15, %r14
 2113              	.LVL304:
 2114 04dc 448B7C24 		movl	56(%rsp), %r15d
 2114      38
 2115 04e1 EB18     		jmp	.L247
 2116              	.LVL305:
 2117              		.p2align 4,,10
 2118 04e3 0F1F4400 		.p2align 3
 2118      00
 2119              	.L223:
1059:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2120              		.loc 1 1059 0
 2121 04e8 4183EF01 		subl	$1, %r15d
 2122              	.LVL306:
 2123 04ec 31D2     		xorl	%edx, %edx
 2124 04ee 4963C7   		movslq	%r15d, %rax
 2125 04f1 48634484 		movslq	112(%rsp,%rax,4), %rax
 2125      70
 2126 04f6 66418914 		movw	%dx, (%r14,%rax,2)
 2126      46
 2127              	.LVL307:
 2128              	.L247:
1058:fltk-1.3.4-1/jpeg/jdhuff.c ****     (*block)[newnz_pos[--num_newnz]] = 0;
 2129              		.loc 1 1058 0
 2130 04fb 4585FF   		testl	%r15d, %r15d
 2131 04fe 75E8     		jne	.L223
 932:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 2132              		.loc 1 932 0
 2133 0500 31C0     		xorl	%eax, %eax
 2134 0502 E999FDFF 		jmp	.L165
 2134      FF
 2135              	.LVL308:
 2136              	.L191:
1036:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    }
 2137              		.loc 1 1036 0
 2138 0507 66034C24 		addw	36(%rsp), %cx
 2138      24
 2139 050c 6641890C 		movw	%cx, (%r12)
 2139      24
 2140 0511 E92AFEFF 		jmp	.L189
 2140      FF
 2141              	.LVL309:
 2142              	.L241:
 2143 0516 448B7C24 		movl	56(%rsp), %r15d
 2143      38
 2144              	.LVL310:
 2145 051b 4C8B7424 		movq	16(%rsp), %r14
 2145      10
 2146 0520 EBD9     		jmp	.L247
 2147              	.LVL311:
 2148              	.L244:
 2149 0522 448B3C24 		movl	(%rsp), %r15d
 2150              	.LVL312:
 2151 0526 EBD3     		jmp	.L247
 2152              	.LVL313:
 2153              	.L256:
 980:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      r = GET_BITS(r);
 2154              		.loc 1 980 0 discriminator 1
 2155 0528 488D7C24 		leaq	64(%rsp), %rdi
 2155      40
 2156 052d 4489E9   		movl	%r13d, %ecx
 2157 0530 4889C6   		movq	%rax, %rsi
 2158              	.LVL314:
 2159 0533 44895C24 		movl	%r11d, 32(%rsp)
 2159      20
 2160 0538 44890C24 		movl	%r9d, (%rsp)
 2161 053c E8000000 		call	jpeg_fill_bit_buffer
 2161      00
 2162              	.LVL315:
 2163 0541 85C0     		testl	%eax, %eax
 2164 0543 74B6     		je	.L247
 980:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      r = GET_BITS(r);
 2165              		.loc 1 980 0 is_stmt 0 discriminator 2
 2166 0545 488B4424 		movq	80(%rsp), %rax
 2166      50
 2167              	.LVL316:
 2168 054a 8B542458 		movl	88(%rsp), %edx
 2169 054e 448B5C24 		movl	32(%rsp), %r11d
 2169      20
 2170 0553 448B0C24 		movl	(%rsp), %r9d
 2171              	.LVL317:
 2172 0557 E98AFEFF 		jmp	.L179
 2172      FF
 2173              	.LVL318:
 2174              	.L253:
 2175              		.loc 1 1062 0 is_stmt 1
 2176 055c E8000000 		call	__stack_chk_fail
 2176      00
 2177              	.LVL319:
 2178              		.cfi_endproc
 2179              	.LFE69:
 2181              		.section	.text.unlikely.decode_mcu_AC_refine
 2182              	.LCOLDE7:
 2183              		.section	.text.decode_mcu_AC_refine
 2184              	.LHOTE7:
 2185              		.section	.text.unlikely.decode_mcu_sub,"ax",@progbits
 2186              	.LCOLDB8:
 2187              		.section	.text.decode_mcu_sub,"ax",@progbits
 2188              	.LHOTB8:
 2189              		.p2align 4,,15
 2191              	decode_mcu_sub:
 2192              	.LFB70:
1063:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1064:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1065:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
1066:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Decode one MCU's worth of Huffman-compressed coefficients,
1067:fltk-1.3.4-1/jpeg/jdhuff.c ****  * partial blocks.
1068:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
1069:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1070:fltk-1.3.4-1/jpeg/jdhuff.c **** METHODDEF(boolean)
1071:fltk-1.3.4-1/jpeg/jdhuff.c **** decode_mcu_sub (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
1072:fltk-1.3.4-1/jpeg/jdhuff.c **** {
 2193              		.loc 1 1072 0
 2194              		.cfi_startproc
 2195              	.LVL320:
 2196 0000 4157     		pushq	%r15
 2197              		.cfi_def_cfa_offset 16
 2198              		.cfi_offset 15, -16
 2199 0002 4156     		pushq	%r14
 2200              		.cfi_def_cfa_offset 24
 2201              		.cfi_offset 14, -24
 2202 0004 4155     		pushq	%r13
 2203              		.cfi_def_cfa_offset 32
 2204              		.cfi_offset 13, -32
 2205 0006 4154     		pushq	%r12
 2206              		.cfi_def_cfa_offset 40
 2207              		.cfi_offset 12, -40
 2208 0008 55       		pushq	%rbp
 2209              		.cfi_def_cfa_offset 48
 2210              		.cfi_offset 6, -48
 2211 0009 53       		pushq	%rbx
 2212              		.cfi_def_cfa_offset 56
 2213              		.cfi_offset 3, -56
 2214 000a 4881EC98 		subq	$152, %rsp
 2214      000000
 2215              		.cfi_def_cfa_offset 208
1073:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
1074:fltk-1.3.4-1/jpeg/jdhuff.c ****   const int * natural_order;
1075:fltk-1.3.4-1/jpeg/jdhuff.c ****   int Se, blkn;
1076:fltk-1.3.4-1/jpeg/jdhuff.c ****   BITREAD_STATE_VARS;
1077:fltk-1.3.4-1/jpeg/jdhuff.c ****   savable_state state;
1078:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1079:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Process restart marker if needed; may have to suspend */
1080:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (cinfo->restart_interval) {
 2216              		.loc 1 1080 0
 2217 0011 448B9774 		movl	372(%rdi), %r10d
 2217      010000
1073:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 2218              		.loc 1 1073 0
 2219 0018 4C8BAF70 		movq	624(%rdi), %r13
 2219      020000
 2220              	.LVL321:
1072:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 2221              		.loc 1 1072 0
 2222 001f 64488B1C 		movq	%fs:40, %rbx
 2222      25280000 
 2222      00
 2223 0028 48899C24 		movq	%rbx, 136(%rsp)
 2223      88000000 
 2224 0030 31DB     		xorl	%ebx, %ebx
 2225 0032 48897C24 		movq	%rdi, 32(%rsp)
 2225      20
 2226 0037 48897424 		movq	%rsi, 40(%rsp)
 2226      28
 2227              		.loc 1 1080 0
 2228 003c 4585D2   		testl	%r10d, %r10d
 2229 003f 740D     		je	.L261
1081:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (entropy->restarts_to_go == 0)
 2230              		.loc 1 1081 0
 2231 0041 458B4540 		movl	64(%r13), %r8d
 2232 0045 4585C0   		testl	%r8d, %r8d
 2233 0048 0F841205 		je	.L330
 2233      0000
 2234              	.LVL322:
 2235              	.L261:
1082:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (! process_restart(cinfo))
1083:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
1084:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
1085:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1086:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* If we've run out of data, just leave the MCU set to zeroes.
1087:fltk-1.3.4-1/jpeg/jdhuff.c ****    * This way, we return uniform gray for the remainder of the segment.
1088:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
1089:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (! entropy->insufficient_data) {
 2236              		.loc 1 1089 0
 2237 004e 458B4D3C 		movl	60(%r13), %r9d
 2238 0052 4585C9   		testl	%r9d, %r9d
 2239 0055 0F850503 		jne	.L260
 2239      0000
1090:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1091:fltk-1.3.4-1/jpeg/jdhuff.c ****     natural_order = cinfo->natural_order;
1092:fltk-1.3.4-1/jpeg/jdhuff.c ****     Se = cinfo->lim_Se;
1093:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1094:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Load up working state */
1095:fltk-1.3.4-1/jpeg/jdhuff.c ****     BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
1096:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 2240              		.loc 1 1096 0
 2241 005b 498B7D28 		movq	40(%r13), %rdi
1091:fltk-1.3.4-1/jpeg/jdhuff.c ****     Se = cinfo->lim_Se;
 2242              		.loc 1 1091 0
 2243 005f 488B4424 		movq	32(%rsp), %rax
 2243      20
 2244              		.loc 1 1096 0
 2245 0064 48897C24 		movq	%rdi, 112(%rsp)
 2245      70
 2246 0069 498B7D30 		movq	48(%r13), %rdi
1091:fltk-1.3.4-1/jpeg/jdhuff.c ****     Se = cinfo->lim_Se;
 2247              		.loc 1 1091 0
 2248 006d 488B9830 		movq	560(%rax), %rbx
 2248      020000
1095:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 2249              		.loc 1 1095 0
 2250 0074 48894424 		movq	%rax, 96(%rsp)
 2250      60
1092:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2251              		.loc 1 1092 0
 2252 0079 8BA83802 		movl	568(%rax), %ebp
 2252      0000
1095:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 2253              		.loc 1 1095 0
 2254 007f 498B7518 		movq	24(%r13), %rsi
 2255              		.loc 1 1096 0
 2256 0083 48897C24 		movq	%rdi, 120(%rsp)
 2256      78
 2257 0088 418B7D38 		movl	56(%r13), %edi
1091:fltk-1.3.4-1/jpeg/jdhuff.c ****     Se = cinfo->lim_Se;
 2258              		.loc 1 1091 0
 2259 008c 48895C24 		movq	%rbx, 8(%rsp)
 2259      08
 2260              	.LVL323:
1095:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 2261              		.loc 1 1095 0
 2262 0091 4889C3   		movq	%rax, %rbx
 2263              	.LVL324:
 2264 0094 488B4028 		movq	40(%rax), %rax
 2265              	.LVL325:
 2266              		.loc 1 1096 0
 2267 0098 89BC2480 		movl	%edi, 128(%rsp)
 2267      000000
1097:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1098:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Outer loop handles each block in the MCU */
1099:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1100:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 2268              		.loc 1 1100 0
 2269 009f 8BBBF001 		movl	496(%rbx), %edi
 2269      0000
1095:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 2270              		.loc 1 1095 0
 2271 00a5 488B08   		movq	(%rax), %rcx
 2272 00a8 488B5008 		movq	8(%rax), %rdx
 2273              		.loc 1 1100 0
 2274 00ac 85FF     		testl	%edi, %edi
1095:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 2275              		.loc 1 1095 0
 2276 00ae 48895424 		movq	%rdx, 72(%rsp)
 2276      48
 2277 00b3 48894C24 		movq	%rcx, 64(%rsp)
 2277      40
 2278 00b8 418B5520 		movl	32(%r13), %edx
 2279              	.LVL326:
 2280              		.loc 1 1100 0
 2281 00bc 0F8E5A02 		jle	.L263
 2281      0000
 2282 00c2 498D85B0 		leaq	176(%r13), %rax
 2282      000000
 2283 00c9 48C74424 		movq	$0, 16(%rsp)
 2283      10000000 
 2283      00
 2284 00d2 4C896C24 		movq	%r13, 48(%rsp)
 2284      30
 2285 00d7 48894424 		movq	%rax, 24(%rsp)
 2285      18
 2286              	.LVL327:
 2287              	.L289:
 2288              	.LBB21:
1101:fltk-1.3.4-1/jpeg/jdhuff.c ****       JBLOCKROW block = MCU_data[blkn];
 2289              		.loc 1 1101 0
 2290 00dc 488B4424 		movq	40(%rsp), %rax
 2290      28
 2291 00e1 488B7C24 		movq	16(%rsp), %rdi
 2291      10
 2292              	.LBB22:
1102:fltk-1.3.4-1/jpeg/jdhuff.c ****       d_derived_tbl * htbl;
1103:fltk-1.3.4-1/jpeg/jdhuff.c ****       register int s, k, r;
1104:fltk-1.3.4-1/jpeg/jdhuff.c ****       int coef_limit, ci;
1105:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1106:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Decode a single block's worth of coefficients */
1107:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1108:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Section F.2.2.1: decode the DC coefficient difference */
1109:fltk-1.3.4-1/jpeg/jdhuff.c ****       htbl = entropy->dc_cur_tbls[blkn];
1110:fltk-1.3.4-1/jpeg/jdhuff.c ****       HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 2293              		.loc 1 1110 0
 2294 00e6 83FA07   		cmpl	$7, %edx
 2295              	.LBE22:
1101:fltk-1.3.4-1/jpeg/jdhuff.c ****       JBLOCKROW block = MCU_data[blkn];
 2296              		.loc 1 1101 0
 2297 00e9 4C8B2CF8 		movq	(%rax,%rdi,8), %r13
 2298              	.LVL328:
1109:fltk-1.3.4-1/jpeg/jdhuff.c ****       HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 2299              		.loc 1 1109 0
 2300 00ed 488B4424 		movq	24(%rsp), %rax
 2300      18
 2301 00f2 488B18   		movq	(%rax), %rbx
 2302              	.LVL329:
 2303              	.LBB23:
 2304              		.loc 1 1110 0
 2305 00f5 0F8E1504 		jle	.L331
 2305      0000
 2306              	.L264:
 2307              		.loc 1 1110 0 is_stmt 0 discriminator 6
 2308 00fb 8D4AF8   		leal	-8(%rdx), %ecx
 2309 00fe 4889F0   		movq	%rsi, %rax
 2310 0101 48D3F8   		sarq	%cl, %rax
 2311              	.LVL330:
 2312 0104 0FB6C0   		movzbl	%al, %eax
 2313 0107 8B8C8320 		movl	288(%rbx,%rax,4), %ecx
 2313      010000
 2314              	.LVL331:
 2315 010e 85C9     		testl	%ecx, %ecx
 2316 0110 0F84CA03 		je	.L292
 2316      0000
 2317              		.loc 1 1110 0 discriminator 8
 2318 0116 440FB6BC 		movzbl	1312(%rbx,%rax), %r15d
 2318      03200500 
 2318      00
 2319 011f 29CA     		subl	%ecx, %edx
 2320              	.LVL332:
 2321              	.L267:
 2322              	.LBE23:
1111:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1112:fltk-1.3.4-1/jpeg/jdhuff.c ****       htbl = entropy->ac_cur_tbls[blkn];
 2323              		.loc 1 1112 0 is_stmt 1
 2324 0121 488B4424 		movq	24(%rsp), %rax
 2324      18
1113:fltk-1.3.4-1/jpeg/jdhuff.c ****       k = 1;
1114:fltk-1.3.4-1/jpeg/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 2325              		.loc 1 1114 0
 2326 0126 488B7C24 		movq	16(%rsp), %rdi
 2326      10
1112:fltk-1.3.4-1/jpeg/jdhuff.c ****       k = 1;
 2327              		.loc 1 1112 0
 2328 012b 488B5850 		movq	80(%rax), %rbx
 2329              	.LVL333:
 2330              		.loc 1 1114 0
 2331 012f 488B4424 		movq	48(%rsp), %rax
 2331      30
 2332 0134 448BA4B8 		movl	336(%rax,%rdi,4), %r12d
 2332      50010000 
 2333              	.LVL334:
1115:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (coef_limit) {
 2334              		.loc 1 1115 0
 2335 013c 4585E4   		testl	%r12d, %r12d
 2336 013f 0F847303 		je	.L268
 2336      0000
1116:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Convert DC difference to actual value, update last_dc_val */
1117:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (s) {
 2337              		.loc 1 1117 0
 2338 0145 4585FF   		testl	%r15d, %r15d
 2339 0148 743B     		je	.L269
1118:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 2340              		.loc 1 1118 0
 2341 014a 4439FA   		cmpl	%r15d, %edx
 2342 014d 0F8C4A04 		jl	.L332
 2342      0000
 2343              	.L270:
1119:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 2344              		.loc 1 1119 0
 2345 0153 4963C7   		movslq	%r15d, %rax
 2346 0156 4429FA   		subl	%r15d, %edx
 2347              	.LVL335:
1120:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 2348              		.loc 1 1120 0
 2349 0159 458D47FF 		leal	-1(%r15), %r8d
1119:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 2350              		.loc 1 1119 0
 2351 015d 8B3C8500 		movl	bmask(,%rax,4), %edi
 2351      000000
 2352 0164 89D1     		movl	%edx, %ecx
 2353 0166 4889F0   		movq	%rsi, %rax
 2354 0169 48D3F8   		sarq	%cl, %rax
 2355              		.loc 1 1120 0
 2356 016c 4963C8   		movslq	%r8d, %rcx
1119:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 2357              		.loc 1 1119 0
 2358 016f 21F8     		andl	%edi, %eax
 2359              	.LVL336:
 2360              		.loc 1 1120 0
 2361 0171 4189C0   		movl	%eax, %r8d
 2362 0174 4129F8   		subl	%edi, %r8d
 2363 0177 3B048D00 		cmpl	bmask(,%rcx,4), %eax
 2363      000000
 2364 017e 410F4EC0 		cmovle	%r8d, %eax
 2365              	.LVL337:
 2366 0182 4189C7   		movl	%eax, %r15d
 2367              	.LVL338:
 2368              	.L269:
1121:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
1122:fltk-1.3.4-1/jpeg/jdhuff.c **** 	ci = cinfo->MCU_membership[blkn];
1123:fltk-1.3.4-1/jpeg/jdhuff.c **** 	s += state.last_dc_val[ci];
 2369              		.loc 1 1123 0
 2370 0185 488B4424 		movq	32(%rsp), %rax
 2370      20
 2371 018a 488B7C24 		movq	16(%rsp), %rdi
 2371      10
 2372 018f 486384B8 		movslq	500(%rax,%rdi,4), %rax
 2372      F4010000 
 2373 0197 448B4484 		movl	116(%rsp,%rax,4), %r8d
 2373      74
 2374 019c 4501F8   		addl	%r15d, %r8d
 2375              	.LVL339:
1124:fltk-1.3.4-1/jpeg/jdhuff.c **** 	state.last_dc_val[ci] = s;
1125:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Output the DC coefficient */
1126:fltk-1.3.4-1/jpeg/jdhuff.c **** 	(*block)[0] = (JCOEF) s;
1127:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1128:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Section F.2.2.2: decode the AC coefficients */
1129:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Since zeroes are skipped, output area must be cleared beforehand */
1130:fltk-1.3.4-1/jpeg/jdhuff.c **** 	for (; k < coef_limit; k++) {
 2376              		.loc 1 1130 0
 2377 019f 4183FC01 		cmpl	$1, %r12d
 2378 01a3 41BF0100 		movl	$1, %r15d
 2378      0000
1124:fltk-1.3.4-1/jpeg/jdhuff.c **** 	state.last_dc_val[ci] = s;
 2379              		.loc 1 1124 0
 2380 01a9 44894484 		movl	%r8d, 116(%rsp,%rax,4)
 2380      74
1126:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2381              		.loc 1 1126 0
 2382 01ae 66458945 		movw	%r8w, 0(%r13)
 2382      00
 2383              	.LVL340:
 2384              		.loc 1 1130 0
 2385 01b3 0F8EB900 		jle	.L271
 2385      0000
 2386 01b9 896C2438 		movl	%ebp, 56(%rsp)
 2387 01bd 4489FD   		movl	%r15d, %ebp
 2388 01c0 4D89EF   		movq	%r13, %r15
 2389 01c3 EB53     		jmp	.L280
 2390              	.LVL341:
 2391              		.p2align 4,,10
 2392 01c5 0F1F00   		.p2align 3
 2393              	.L336:
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
1132:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1133:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = s >> 4;
1134:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s &= 15;
1135:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1136:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (s) {
1137:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    k += r;
 2394              		.loc 1 1137 0
 2395 01c8 01CD     		addl	%ecx, %ebp
 2396              	.LVL342:
1138:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 2397              		.loc 1 1138 0
 2398 01ca 39C2     		cmpl	%eax, %edx
 2399 01cc 0F8C3E02 		jl	.L333
 2399      0000
 2400              	.LVL343:
 2401              	.L276:
1139:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 2402              		.loc 1 1139 0
 2403 01d2 4963C6   		movslq	%r14d, %rax
 2404 01d5 4429F2   		subl	%r14d, %edx
 2405              	.LVL344:
1140:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    s = HUFF_EXTEND(r, s);
 2406              		.loc 1 1140 0
 2407 01d8 4183EE01 		subl	$1, %r14d
 2408              	.LVL345:
1139:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 2409              		.loc 1 1139 0
 2410 01dc 8B3C8500 		movl	bmask(,%rax,4), %edi
 2410      000000
 2411 01e3 89D1     		movl	%edx, %ecx
 2412 01e5 4889F0   		movq	%rsi, %rax
 2413 01e8 48D3F8   		sarq	%cl, %rax
 2414              		.loc 1 1140 0
 2415 01eb 4D63F6   		movslq	%r14d, %r14
1139:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 2416              		.loc 1 1139 0
 2417 01ee 21F8     		andl	%edi, %eax
 2418              	.LVL346:
 2419              		.loc 1 1140 0
 2420 01f0 89C1     		movl	%eax, %ecx
 2421 01f2 29F9     		subl	%edi, %ecx
 2422 01f4 423B04B5 		cmpl	bmask(,%r14,4), %eax
 2422      00000000 
1141:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    /* Output coefficient in natural (dezigzagged) order.
1142:fltk-1.3.4-1/jpeg/jdhuff.c **** 	     * Note: the extra entries in natural_order[] will save us
1143:fltk-1.3.4-1/jpeg/jdhuff.c **** 	     * if k > Se, which could happen if the data is corrupted.
1144:fltk-1.3.4-1/jpeg/jdhuff.c **** 	     */
1145:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    (*block)[natural_order[k]] = (JCOEF) s;
 2423              		.loc 1 1145 0
 2424 01fc 488B7C24 		movq	8(%rsp), %rdi
 2424      08
1140:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    s = HUFF_EXTEND(r, s);
 2425              		.loc 1 1140 0
 2426 0201 0F4EC1   		cmovle	%ecx, %eax
 2427              	.LVL347:
 2428              		.loc 1 1145 0
 2429 0204 4863CD   		movslq	%ebp, %rcx
1130:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 2430              		.loc 1 1130 0
 2431 0207 83C501   		addl	$1, %ebp
 2432              	.LVL348:
 2433              		.loc 1 1145 0
 2434 020a 48630C8F 		movslq	(%rdi,%rcx,4), %rcx
1130:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 2435              		.loc 1 1130 0
 2436 020e 4139EC   		cmpl	%ebp, %r12d
 2437              		.loc 1 1145 0
 2438 0211 66418904 		movw	%ax, (%r15,%rcx,2)
 2438      4F
 2439              	.LVL349:
1130:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 2440              		.loc 1 1130 0
 2441 0216 7E53     		jle	.L334
 2442              	.LVL350:
 2443              	.L280:
 2444              	.LBB24:
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2445              		.loc 1 1131 0
 2446 0218 83FA07   		cmpl	$7, %edx
 2447 021b 0F8E9F01 		jle	.L335
 2447      0000
 2448              	.L272:
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2449              		.loc 1 1131 0 is_stmt 0 discriminator 6
 2450 0221 8D4AF8   		leal	-8(%rdx), %ecx
 2451 0224 4889F0   		movq	%rsi, %rax
 2452 0227 48D3F8   		sarq	%cl, %rax
 2453              	.LVL351:
 2454 022a 0FB6C0   		movzbl	%al, %eax
 2455 022d 8B8C8320 		movl	288(%rbx,%rax,4), %ecx
 2455      010000
 2456              	.LVL352:
 2457 0234 85C9     		testl	%ecx, %ecx
 2458 0236 0F845C01 		je	.L296
 2458      0000
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2459              		.loc 1 1131 0 discriminator 8
 2460 023c 0FB68403 		movzbl	1312(%rbx,%rax), %eax
 2460      20050000 
 2461              	.LVL353:
 2462 0244 29CA     		subl	%ecx, %edx
 2463              	.LVL354:
 2464              	.L274:
 2465              	.LBE24:
1133:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s &= 15;
 2466              		.loc 1 1133 0 is_stmt 1
 2467 0246 89C1     		movl	%eax, %ecx
 2468 0248 C1F904   		sarl	$4, %ecx
 2469              	.LVL355:
1136:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    k += r;
 2470              		.loc 1 1136 0
 2471 024b 83E00F   		andl	$15, %eax
 2472              	.LVL356:
 2473 024e 4189C6   		movl	%eax, %r14d
 2474 0251 0F8571FF 		jne	.L336
 2474      FFFF
1146:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  } else {
1147:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (r != 15)
 2475              		.loc 1 1147 0
 2476 0257 83F90F   		cmpl	$15, %ecx
 2477 025a 0F856303 		jne	.L327
 2477      0000
1148:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      goto EndOfBlock;
1149:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    k += 15;
 2478              		.loc 1 1149 0
 2479 0260 83C50F   		addl	$15, %ebp
 2480              	.LVL357:
1130:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 2481              		.loc 1 1130 0
 2482 0263 83C501   		addl	$1, %ebp
 2483              	.LVL358:
 2484 0266 4139EC   		cmpl	%ebp, %r12d
 2485 0269 7FAD     		jg	.L280
 2486              	.LVL359:
 2487              	.L334:
 2488 026b 4189EF   		movl	%ebp, %r15d
 2489              	.LVL360:
 2490 026e 8B6C2438 		movl	56(%rsp), %ebp
 2491              	.LVL361:
 2492              	.L271:
1150:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  }
1151:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
1152:fltk-1.3.4-1/jpeg/jdhuff.c ****       } else {
1153:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (s) {
1154:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
1155:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
1156:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
1157:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
1158:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1159:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Section F.2.2.2: decode the AC coefficients */
1160:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* In this path we just discard the values */
1161:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (; k <= Se; k++) {
 2493              		.loc 1 1161 0 discriminator 1
 2494 0272 4439FD   		cmpl	%r15d, %ebp
 2495 0275 7D20     		jge	.L288
 2496 0277 EB6B     		jmp	.L279
 2497              	.LVL362:
 2498 0279 0F1F8000 		.p2align 4,,10
 2498      000000
 2499              		.p2align 3
 2500              	.L339:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
1163:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1164:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
1165:fltk-1.3.4-1/jpeg/jdhuff.c **** 	s &= 15;
1166:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1167:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (s) {
1168:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  k += r;
 2501              		.loc 1 1168 0
 2502 0280 4101CF   		addl	%ecx, %r15d
 2503              	.LVL363:
1169:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 2504              		.loc 1 1169 0
 2505 0283 39C2     		cmpl	%eax, %edx
 2506 0285 0F8C0502 		jl	.L337
 2506      0000
 2507              	.LVL364:
 2508              	.L286:
1161:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 2509              		.loc 1 1161 0
 2510 028b 4183C701 		addl	$1, %r15d
 2511              	.LVL365:
1170:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 2512              		.loc 1 1170 0
 2513 028f 4429E2   		subl	%r12d, %edx
 2514              	.LVL366:
1161:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 2515              		.loc 1 1161 0
 2516 0292 4439FD   		cmpl	%r15d, %ebp
 2517 0295 7C4D     		jl	.L279
 2518              	.LVL367:
 2519              	.L288:
 2520              	.LBB25:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2521              		.loc 1 1162 0
 2522 0297 83FA07   		cmpl	$7, %edx
 2523 029a 0F8EC001 		jle	.L338
 2523      0000
 2524              	.L282:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2525              		.loc 1 1162 0 is_stmt 0 discriminator 6
 2526 02a0 8D4AF8   		leal	-8(%rdx), %ecx
 2527 02a3 4889F0   		movq	%rsi, %rax
 2528 02a6 48D3F8   		sarq	%cl, %rax
 2529              	.LVL368:
 2530 02a9 0FB6C0   		movzbl	%al, %eax
 2531 02ac 8B8C8320 		movl	288(%rbx,%rax,4), %ecx
 2531      010000
 2532              	.LVL369:
 2533 02b3 85C9     		testl	%ecx, %ecx
 2534 02b5 0F847D01 		je	.L299
 2534      0000
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2535              		.loc 1 1162 0 discriminator 8
 2536 02bb 0FB68403 		movzbl	1312(%rbx,%rax), %eax
 2536      20050000 
 2537              	.LVL370:
 2538 02c3 29CA     		subl	%ecx, %edx
 2539              	.LVL371:
 2540              	.L284:
 2541              	.LBE25:
1164:fltk-1.3.4-1/jpeg/jdhuff.c **** 	s &= 15;
 2542              		.loc 1 1164 0 is_stmt 1
 2543 02c5 89C1     		movl	%eax, %ecx
 2544 02c7 C1F904   		sarl	$4, %ecx
 2545              	.LVL372:
1167:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  k += r;
 2546              		.loc 1 1167 0
 2547 02ca 83E00F   		andl	$15, %eax
 2548              	.LVL373:
 2549 02cd 4189C4   		movl	%eax, %r12d
 2550 02d0 75AE     		jne	.L339
1171:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} else {
1172:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (r != 15)
 2551              		.loc 1 1172 0
 2552 02d2 83F90F   		cmpl	$15, %ecx
 2553 02d5 750D     		jne	.L279
1173:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    break;
1174:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  k += 15;
 2554              		.loc 1 1174 0
 2555 02d7 4183C70F 		addl	$15, %r15d
 2556              	.LVL374:
1161:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 2557              		.loc 1 1161 0
 2558 02db 4183C701 		addl	$1, %r15d
 2559              	.LVL375:
 2560 02df 4439FD   		cmpl	%r15d, %ebp
 2561 02e2 7DB3     		jge	.L288
 2562              	.LVL376:
 2563              	.L279:
 2564 02e4 488B5C24 		movq	16(%rsp), %rbx
 2564      10
 2565              	.LVL377:
 2566              	.LBE21:
1100:fltk-1.3.4-1/jpeg/jdhuff.c ****       JBLOCKROW block = MCU_data[blkn];
 2567              		.loc 1 1100 0 discriminator 2
 2568 02e9 488B7C24 		movq	32(%rsp), %rdi
 2568      20
 2569 02ee 48834424 		addq	$8, 24(%rsp)
 2569      1808
 2570 02f4 89D8     		movl	%ebx, %eax
 2571 02f6 4883C301 		addq	$1, %rbx
 2572 02fa 83C001   		addl	$1, %eax
 2573              	.LVL378:
 2574 02fd 3987F001 		cmpl	%eax, 496(%rdi)
 2574      0000
 2575 0303 48895C24 		movq	%rbx, 16(%rsp)
 2575      10
 2576 0308 0F8FCEFD 		jg	.L289
 2576      FFFF
 2577 030e 4C8B6C24 		movq	48(%rsp), %r13
 2577      30
 2578 0313 488B4728 		movq	40(%rdi), %rax
 2579              	.LVL379:
 2580 0317 488B4C24 		movq	64(%rsp), %rcx
 2580      40
 2581              	.LVL380:
 2582              	.L263:
1175:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
1176:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
1177:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1178:fltk-1.3.4-1/jpeg/jdhuff.c ****       EndOfBlock: ;
1179:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1180:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1181:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Completed MCU, so update state */
1182:fltk-1.3.4-1/jpeg/jdhuff.c ****     BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 2583              		.loc 1 1182 0
 2584 031c 488908   		movq	%rcx, (%rax)
 2585 031f 488B4424 		movq	32(%rsp), %rax
 2585      20
 2586 0324 488B4C24 		movq	72(%rsp), %rcx
 2586      48
 2587 0329 488B4028 		movq	40(%rax), %rax
 2588 032d 48894808 		movq	%rcx, 8(%rax)
1183:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(entropy->saved, state);
 2589              		.loc 1 1183 0
 2590 0331 488B4424 		movq	112(%rsp), %rax
 2590      70
1182:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(entropy->saved, state);
 2591              		.loc 1 1182 0
 2592 0336 49897518 		movq	%rsi, 24(%r13)
 2593 033a 41895520 		movl	%edx, 32(%r13)
 2594              		.loc 1 1183 0
 2595 033e 49894528 		movq	%rax, 40(%r13)
 2596 0342 488B4424 		movq	120(%rsp), %rax
 2596      78
 2597 0347 49894530 		movq	%rax, 48(%r13)
 2598 034b 8B842480 		movl	128(%rsp), %eax
 2598      000000
 2599 0352 41894538 		movl	%eax, 56(%r13)
 2600              	.LVL381:
 2601 0356 662E0F1F 		.p2align 4,,10
 2601      84000000 
 2601      0000
 2602              		.p2align 3
 2603              	.L260:
1184:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
1185:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1186:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Account for restart interval (no-op if not using restarts) */
1187:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->restarts_to_go--;
 2604              		.loc 1 1187 0
 2605 0360 41836D40 		subl	$1, 64(%r13)
 2605      01
1188:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1189:fltk-1.3.4-1/jpeg/jdhuff.c ****   return TRUE;
 2606              		.loc 1 1189 0
 2607 0365 B8010000 		movl	$1, %eax
 2607      00
 2608              	.L262:
1190:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 2609              		.loc 1 1190 0
 2610 036a 488BBC24 		movq	136(%rsp), %rdi
 2610      88000000 
 2611 0372 6448333C 		xorq	%fs:40, %rdi
 2611      25280000 
 2611      00
 2612 037b 0F854B02 		jne	.L340
 2612      0000
 2613 0381 4881C498 		addq	$152, %rsp
 2613      000000
 2614              		.cfi_remember_state
 2615              		.cfi_def_cfa_offset 56
 2616 0388 5B       		popq	%rbx
 2617              		.cfi_def_cfa_offset 48
 2618 0389 5D       		popq	%rbp
 2619              		.cfi_def_cfa_offset 40
 2620 038a 415C     		popq	%r12
 2621              		.cfi_def_cfa_offset 32
 2622 038c 415D     		popq	%r13
 2623              		.cfi_def_cfa_offset 24
 2624 038e 415E     		popq	%r14
 2625              		.cfi_def_cfa_offset 16
 2626 0390 415F     		popq	%r15
 2627              		.cfi_def_cfa_offset 8
 2628 0392 C3       		ret
 2629              	.LVL382:
 2630              		.p2align 4,,10
 2631 0393 0F1F4400 		.p2align 3
 2631      00
 2632              	.L296:
 2633              		.cfi_restore_state
 2634              	.L273:
 2635 0398 4C8D6C24 		leaq	64(%rsp), %r13
 2635      40
 2636              	.LBB29:
 2637              	.LBB26:
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2638              		.loc 1 1131 0
 2639 039d 41B80900 		movl	$9, %r8d
 2639      0000
 2640              	.LVL383:
 2641 03a3 4889D9   		movq	%rbx, %rcx
 2642 03a6 4C89EF   		movq	%r13, %rdi
 2643 03a9 E8000000 		call	jpeg_huff_decode
 2643      00
 2644              	.LVL384:
 2645 03ae 85C0     		testl	%eax, %eax
 2646 03b0 784E     		js	.L265
 2647              	.LVL385:
 2648              	.L341:
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2649              		.loc 1 1131 0 is_stmt 0 discriminator 12
 2650 03b2 488B7424 		movq	80(%rsp), %rsi
 2650      50
 2651              	.LVL386:
 2652 03b7 8B542458 		movl	88(%rsp), %edx
 2653              	.LVL387:
 2654 03bb E986FEFF 		jmp	.L274
 2654      FF
 2655              	.LVL388:
 2656              		.p2align 4,,10
 2657              		.p2align 3
 2658              	.L335:
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2659              		.loc 1 1131 0 discriminator 1
 2660 03c0 4C8D6C24 		leaq	64(%rsp), %r13
 2660      40
 2661 03c5 31C9     		xorl	%ecx, %ecx
 2662 03c7 4C89EF   		movq	%r13, %rdi
 2663 03ca E8000000 		call	jpeg_fill_bit_buffer
 2663      00
 2664              	.LVL389:
 2665 03cf 85C0     		testl	%eax, %eax
 2666 03d1 742D     		je	.L265
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2667              		.loc 1 1131 0 discriminator 4
 2668 03d3 8B542458 		movl	88(%rsp), %edx
 2669 03d7 488B7424 		movq	80(%rsp), %rsi
 2669      50
 2670              	.LVL390:
 2671 03dc 83FA07   		cmpl	$7, %edx
 2672 03df 0F8F3CFE 		jg	.L272
 2672      FFFF
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2673              		.loc 1 1131 0
 2674 03e5 41B80100 		movl	$1, %r8d
 2674      0000
 2675              	.LVL391:
 2676 03eb 4889D9   		movq	%rbx, %rcx
 2677 03ee 4C89EF   		movq	%r13, %rdi
 2678 03f1 E8000000 		call	jpeg_huff_decode
 2678      00
 2679              	.LVL392:
 2680 03f6 85C0     		testl	%eax, %eax
 2681 03f8 79B8     		jns	.L341
 2682              	.LVL393:
 2683 03fa 660F1F44 		.p2align 4,,10
 2683      0000
 2684              		.p2align 3
 2685              	.L265:
 2686              	.LBE26:
 2687              	.LBE29:
1083:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 2688              		.loc 1 1083 0 is_stmt 1
 2689 0400 31C0     		xorl	%eax, %eax
 2690 0402 E963FFFF 		jmp	.L262
 2690      FF
 2691              	.LVL394:
 2692 0407 660F1F84 		.p2align 4,,10
 2692      00000000 
 2692      00
 2693              		.p2align 3
 2694              	.L333:
 2695              	.LBB30:
1138:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 2696              		.loc 1 1138 0 discriminator 1
 2697 0410 4C8D6C24 		leaq	64(%rsp), %r13
 2697      40
 2698 0415 89C1     		movl	%eax, %ecx
 2699              	.LVL395:
 2700 0417 4C89EF   		movq	%r13, %rdi
 2701 041a E8000000 		call	jpeg_fill_bit_buffer
 2701      00
 2702              	.LVL396:
 2703 041f 85C0     		testl	%eax, %eax
 2704 0421 74DD     		je	.L265
1138:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 2705              		.loc 1 1138 0 is_stmt 0 discriminator 3
 2706 0423 488B7424 		movq	80(%rsp), %rsi
 2706      50
 2707              	.LVL397:
 2708 0428 8B542458 		movl	88(%rsp), %edx
 2709              	.LVL398:
 2710 042c E9A1FDFF 		jmp	.L276
 2710      FF
 2711              	.LVL399:
 2712              		.p2align 4,,10
 2713 0431 0F1F8000 		.p2align 3
 2713      000000
 2714              	.L299:
 2715 0438 4C8D6C24 		leaq	64(%rsp), %r13
 2715      40
 2716              	.LBB27:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2717              		.loc 1 1162 0 is_stmt 1
 2718 043d 41B80900 		movl	$9, %r8d
 2718      0000
 2719              	.LVL400:
 2720              	.L283:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2721              		.loc 1 1162 0 is_stmt 0 discriminator 10
 2722 0443 4889D9   		movq	%rbx, %rcx
 2723 0446 4C89EF   		movq	%r13, %rdi
 2724 0449 E8000000 		call	jpeg_huff_decode
 2724      00
 2725              	.LVL401:
 2726 044e 85C0     		testl	%eax, %eax
 2727 0450 78AE     		js	.L265
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2728              		.loc 1 1162 0 discriminator 12
 2729 0452 488B7424 		movq	80(%rsp), %rsi
 2729      50
 2730              	.LVL402:
 2731 0457 8B542458 		movl	88(%rsp), %edx
 2732              	.LVL403:
 2733 045b E965FEFF 		jmp	.L284
 2733      FF
 2734              	.LVL404:
 2735              		.p2align 4,,10
 2736              		.p2align 3
 2737              	.L338:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2738              		.loc 1 1162 0 discriminator 1
 2739 0460 4C8D6C24 		leaq	64(%rsp), %r13
 2739      40
 2740 0465 31C9     		xorl	%ecx, %ecx
 2741 0467 4C89EF   		movq	%r13, %rdi
 2742 046a E8000000 		call	jpeg_fill_bit_buffer
 2742      00
 2743              	.LVL405:
 2744 046f 85C0     		testl	%eax, %eax
 2745 0471 748D     		je	.L265
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2746              		.loc 1 1162 0 discriminator 4
 2747 0473 8B542458 		movl	88(%rsp), %edx
 2748 0477 488B7424 		movq	80(%rsp), %rsi
 2748      50
 2749              	.LVL406:
 2750 047c 83FA07   		cmpl	$7, %edx
 2751 047f 0F8F1BFE 		jg	.L282
 2751      FFFF
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2752              		.loc 1 1162 0
 2753 0485 41B80100 		movl	$1, %r8d
 2753      0000
 2754 048b EBB6     		jmp	.L283
 2755              	.LVL407:
 2756 048d 0F1F00   		.p2align 4,,10
 2757              		.p2align 3
 2758              	.L337:
 2759              	.LBE27:
1169:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 2760              		.loc 1 1169 0 is_stmt 1 discriminator 1
 2761 0490 4C8D6C24 		leaq	64(%rsp), %r13
 2761      40
 2762 0495 89C1     		movl	%eax, %ecx
 2763              	.LVL408:
 2764 0497 4C89EF   		movq	%r13, %rdi
 2765 049a E8000000 		call	jpeg_fill_bit_buffer
 2765      00
 2766              	.LVL409:
 2767 049f 85C0     		testl	%eax, %eax
 2768 04a1 0F8459FF 		je	.L265
 2768      FFFF
1169:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 2769              		.loc 1 1169 0 is_stmt 0 discriminator 3
 2770 04a7 488B7424 		movq	80(%rsp), %rsi
 2770      50
 2771              	.LVL410:
 2772 04ac 8B542458 		movl	88(%rsp), %edx
 2773              	.LVL411:
 2774 04b0 E9D6FDFF 		jmp	.L286
 2774      FF
 2775              	.LVL412:
 2776              		.p2align 4,,10
 2777 04b5 0F1F00   		.p2align 3
 2778              	.L268:
1153:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 2779              		.loc 1 1153 0 is_stmt 1
 2780 04b8 4585FF   		testl	%r15d, %r15d
 2781 04bb 0F848F00 		je	.L297
 2781      0000
1154:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 2782              		.loc 1 1154 0
 2783 04c1 4439FA   		cmpl	%r15d, %edx
 2784 04c4 0F8CAD00 		jl	.L342
 2784      0000
 2785              	.L281:
1155:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 2786              		.loc 1 1155 0
 2787 04ca 4429FA   		subl	%r15d, %edx
 2788              	.LVL413:
1113:fltk-1.3.4-1/jpeg/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 2789              		.loc 1 1113 0
 2790 04cd 41BF0100 		movl	$1, %r15d
 2790      0000
 2791              	.LVL414:
 2792 04d3 E99AFDFF 		jmp	.L271
 2792      FF
 2793              	.LVL415:
 2794 04d8 0F1F8400 		.p2align 4,,10
 2794      00000000 
 2795              		.p2align 3
 2796              	.L292:
 2797 04e0 4C8D4C24 		leaq	64(%rsp), %r9
 2797      40
 2798              	.LBB28:
1110:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2799              		.loc 1 1110 0
 2800 04e5 41B80900 		movl	$9, %r8d
 2800      0000
 2801              	.LVL416:
 2802              	.L266:
1110:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2803              		.loc 1 1110 0 is_stmt 0 discriminator 10
 2804 04eb 4889D9   		movq	%rbx, %rcx
 2805 04ee 4C89CF   		movq	%r9, %rdi
 2806 04f1 E8000000 		call	jpeg_huff_decode
 2806      00
 2807              	.LVL417:
 2808 04f6 85C0     		testl	%eax, %eax
 2809 04f8 4189C7   		movl	%eax, %r15d
 2810              	.LVL418:
 2811 04fb 0F88FFFE 		js	.L265
 2811      FFFF
1110:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2812              		.loc 1 1110 0 discriminator 12
 2813 0501 488B7424 		movq	80(%rsp), %rsi
 2813      50
 2814              	.LVL419:
 2815 0506 8B542458 		movl	88(%rsp), %edx
 2816              	.LVL420:
 2817 050a E912FCFF 		jmp	.L267
 2817      FF
 2818              	.LVL421:
 2819 050f 90       		.p2align 4,,10
 2820              		.p2align 3
 2821              	.L331:
1110:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2822              		.loc 1 1110 0 discriminator 1
 2823 0510 4C8D4C24 		leaq	64(%rsp), %r9
 2823      40
 2824 0515 31C9     		xorl	%ecx, %ecx
 2825 0517 4C89CF   		movq	%r9, %rdi
 2826 051a 4C894C24 		movq	%r9, 56(%rsp)
 2826      38
 2827 051f E8000000 		call	jpeg_fill_bit_buffer
 2827      00
 2828              	.LVL422:
 2829 0524 85C0     		testl	%eax, %eax
 2830 0526 0F84D4FE 		je	.L265
 2830      FFFF
1110:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2831              		.loc 1 1110 0 discriminator 4
 2832 052c 8B542458 		movl	88(%rsp), %edx
 2833 0530 488B7424 		movq	80(%rsp), %rsi
 2833      50
 2834              	.LVL423:
 2835 0535 4C8B4C24 		movq	56(%rsp), %r9
 2835      38
 2836 053a 83FA07   		cmpl	$7, %edx
 2837 053d 0F8FB8FB 		jg	.L264
 2837      FFFF
1110:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2838              		.loc 1 1110 0
 2839 0543 41B80100 		movl	$1, %r8d
 2839      0000
 2840 0549 EBA0     		jmp	.L266
 2841              	.LVL424:
 2842 054b 0F1F4400 		.p2align 4,,10
 2842      00
 2843              		.p2align 3
 2844              	.L297:
 2845              	.LBE28:
1113:fltk-1.3.4-1/jpeg/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 2846              		.loc 1 1113 0 is_stmt 1
 2847 0550 41BF0100 		movl	$1, %r15d
 2847      0000
 2848              	.LVL425:
 2849 0556 E917FDFF 		jmp	.L271
 2849      FF
 2850              	.LVL426:
 2851 055b 0F1F4400 		.p2align 4,,10
 2851      00
 2852              		.p2align 3
 2853              	.L330:
 2854              	.LBE30:
1082:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 2855              		.loc 1 1082 0
 2856 0560 488B7C24 		movq	32(%rsp), %rdi
 2856      20
 2857              	.LVL427:
 2858 0565 E8000000 		call	process_restart
 2858      00
 2859              	.LVL428:
 2860 056a 85C0     		testl	%eax, %eax
 2861 056c 0F85DCFA 		jne	.L261
 2861      FFFF
 2862 0572 E989FEFF 		jmp	.L265
 2862      FF
 2863              	.LVL429:
 2864              	.L342:
 2865              	.LBB31:
1154:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 2866              		.loc 1 1154 0 discriminator 1
 2867 0577 4C8D4C24 		leaq	64(%rsp), %r9
 2867      40
 2868 057c 4489F9   		movl	%r15d, %ecx
 2869 057f 4C89CF   		movq	%r9, %rdi
 2870 0582 E8000000 		call	jpeg_fill_bit_buffer
 2870      00
 2871              	.LVL430:
 2872 0587 85C0     		testl	%eax, %eax
 2873 0589 0F8471FE 		je	.L265
 2873      FFFF
1154:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 2874              		.loc 1 1154 0 is_stmt 0 discriminator 3
 2875 058f 488B7424 		movq	80(%rsp), %rsi
 2875      50
 2876              	.LVL431:
 2877 0594 8B542458 		movl	88(%rsp), %edx
 2878              	.LVL432:
 2879 0598 E92DFFFF 		jmp	.L281
 2879      FF
 2880              	.L332:
1118:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 2881              		.loc 1 1118 0 is_stmt 1 discriminator 1
 2882 059d 4C8D4C24 		leaq	64(%rsp), %r9
 2882      40
 2883 05a2 4489F9   		movl	%r15d, %ecx
 2884 05a5 4C89CF   		movq	%r9, %rdi
 2885 05a8 E8000000 		call	jpeg_fill_bit_buffer
 2885      00
 2886              	.LVL433:
 2887 05ad 85C0     		testl	%eax, %eax
 2888 05af 0F844BFE 		je	.L265
 2888      FFFF
1118:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 2889              		.loc 1 1118 0 is_stmt 0 discriminator 3
 2890 05b5 488B7424 		movq	80(%rsp), %rsi
 2890      50
 2891              	.LVL434:
 2892 05ba 8B542458 		movl	88(%rsp), %edx
 2893              	.LVL435:
 2894 05be E990FBFF 		jmp	.L270
 2894      FF
 2895              	.LVL436:
 2896              	.L327:
 2897 05c3 8B6C2438 		movl	56(%rsp), %ebp
 2898              	.LVL437:
 2899 05c7 E918FDFF 		jmp	.L279
 2899      FF
 2900              	.LVL438:
 2901              	.L340:
 2902              	.LBE31:
 2903              		.loc 1 1190 0 is_stmt 1
 2904 05cc E8000000 		call	__stack_chk_fail
 2904      00
 2905              	.LVL439:
 2906              		.cfi_endproc
 2907              	.LFE70:
 2909              		.section	.text.unlikely.decode_mcu_sub
 2910              	.LCOLDE8:
 2911              		.section	.text.decode_mcu_sub
 2912              	.LHOTE8:
 2913              		.section	.text.unlikely.decode_mcu,"ax",@progbits
 2914              	.LCOLDB9:
 2915              		.section	.text.decode_mcu,"ax",@progbits
 2916              	.LHOTB9:
 2917              		.p2align 4,,15
 2919              	decode_mcu:
 2920              	.LFB71:
1191:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1192:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1193:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
1194:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Decode one MCU's worth of Huffman-compressed coefficients,
1195:fltk-1.3.4-1/jpeg/jdhuff.c ****  * full-size blocks.
1196:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
1197:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1198:fltk-1.3.4-1/jpeg/jdhuff.c **** METHODDEF(boolean)
1199:fltk-1.3.4-1/jpeg/jdhuff.c **** decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
1200:fltk-1.3.4-1/jpeg/jdhuff.c **** {
 2921              		.loc 1 1200 0
 2922              		.cfi_startproc
 2923              	.LVL440:
 2924 0000 4157     		pushq	%r15
 2925              		.cfi_def_cfa_offset 16
 2926              		.cfi_offset 15, -16
 2927 0002 4156     		pushq	%r14
 2928              		.cfi_def_cfa_offset 24
 2929              		.cfi_offset 14, -24
 2930 0004 4889F8   		movq	%rdi, %rax
 2931 0007 4155     		pushq	%r13
 2932              		.cfi_def_cfa_offset 32
 2933              		.cfi_offset 13, -32
 2934 0009 4154     		pushq	%r12
 2935              		.cfi_def_cfa_offset 40
 2936              		.cfi_offset 12, -40
 2937 000b 55       		pushq	%rbp
 2938              		.cfi_def_cfa_offset 48
 2939              		.cfi_offset 6, -48
 2940 000c 53       		pushq	%rbx
 2941              		.cfi_def_cfa_offset 56
 2942              		.cfi_offset 3, -56
 2943 000d 4881EC88 		subq	$136, %rsp
 2943      000000
 2944              		.cfi_def_cfa_offset 192
1201:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
1202:fltk-1.3.4-1/jpeg/jdhuff.c ****   int blkn;
1203:fltk-1.3.4-1/jpeg/jdhuff.c ****   BITREAD_STATE_VARS;
1204:fltk-1.3.4-1/jpeg/jdhuff.c ****   savable_state state;
1205:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1206:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Process restart marker if needed; may have to suspend */
1207:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (cinfo->restart_interval) {
 2945              		.loc 1 1207 0
 2946 0014 448B9074 		movl	372(%rax), %r10d
 2946      010000
1201:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 2947              		.loc 1 1201 0
 2948 001b 4C8BA070 		movq	624(%rax), %r12
 2948      020000
 2949              	.LVL441:
1200:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 2950              		.loc 1 1200 0
 2951 0022 48897C24 		movq	%rdi, 24(%rsp)
 2951      18
 2952 0027 48897424 		movq	%rsi, 40(%rsp)
 2952      28
 2953 002c 64488B3C 		movq	%fs:40, %rdi
 2953      25280000 
 2953      00
 2954 0035 48897C24 		movq	%rdi, 120(%rsp)
 2954      78
 2955 003a 31FF     		xorl	%edi, %edi
 2956              	.LVL442:
 2957              		.loc 1 1207 0
 2958 003c 4585D2   		testl	%r10d, %r10d
 2959 003f 740E     		je	.L347
1208:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (entropy->restarts_to_go == 0)
 2960              		.loc 1 1208 0
 2961 0041 458B4424 		movl	64(%r12), %r8d
 2961      40
 2962 0046 4585C0   		testl	%r8d, %r8d
 2963 0049 0F84F904 		je	.L421
 2963      0000
 2964              	.LVL443:
 2965              	.L347:
1209:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (! process_restart(cinfo))
1210:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
1211:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
1212:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1213:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* If we've run out of data, just leave the MCU set to zeroes.
1214:fltk-1.3.4-1/jpeg/jdhuff.c ****    * This way, we return uniform gray for the remainder of the segment.
1215:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
1216:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (! entropy->insufficient_data) {
 2966              		.loc 1 1216 0
 2967 004f 458B4C24 		movl	60(%r12), %r9d
 2967      3C
 2968 0054 4585C9   		testl	%r9d, %r9d
 2969 0057 0F85C302 		jne	.L346
 2969      0000
1217:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1218:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Load up working state */
1219:fltk-1.3.4-1/jpeg/jdhuff.c ****     BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
1220:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 2970              		.loc 1 1220 0
 2971 005d 498B7C24 		movq	40(%r12), %rdi
 2971      28
1219:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 2972              		.loc 1 1219 0
 2973 0062 488B5C24 		movq	24(%rsp), %rbx
 2973      18
 2974              		.loc 1 1220 0
 2975 0067 48897C24 		movq	%rdi, 96(%rsp)
 2975      60
 2976 006c 498B7C24 		movq	48(%r12), %rdi
 2976      30
1219:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 2977              		.loc 1 1219 0
 2978 0071 488B4328 		movq	40(%rbx), %rax
 2979 0075 48895C24 		movq	%rbx, 80(%rsp)
 2979      50
 2980 007a 498B7424 		movq	24(%r12), %rsi
 2980      18
 2981              	.LVL444:
 2982              		.loc 1 1220 0
 2983 007f 48897C24 		movq	%rdi, 104(%rsp)
 2983      68
 2984 0084 418B7C24 		movl	56(%r12), %edi
 2984      38
1219:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 2985              		.loc 1 1219 0
 2986 0089 488B08   		movq	(%rax), %rcx
 2987 008c 488B5008 		movq	8(%rax), %rdx
 2988              		.loc 1 1220 0
 2989 0090 897C2470 		movl	%edi, 112(%rsp)
1221:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1222:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Outer loop handles each block in the MCU */
1223:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1224:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 2990              		.loc 1 1224 0
 2991 0094 8BBBF001 		movl	496(%rbx), %edi
 2991      0000
1219:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 2992              		.loc 1 1219 0
 2993 009a 48895424 		movq	%rdx, 56(%rsp)
 2993      38
 2994 009f 48894C24 		movq	%rcx, 48(%rsp)
 2994      30
 2995 00a4 418B5424 		movl	32(%r12), %edx
 2995      20
 2996              	.LVL445:
 2997              		.loc 1 1224 0
 2998 00a9 85FF     		testl	%edi, %edi
 2999 00ab 0F8E2902 		jle	.L349
 2999      0000
 3000 00b1 498D8424 		leaq	176(%r12), %rax
 3000      B0000000 
 3001 00b9 48C74424 		movq	$0, 8(%rsp)
 3001      08000000 
 3001      00
 3002 00c2 48894424 		movq	%rax, 16(%rsp)
 3002      10
 3003              	.LVL446:
 3004              	.L376:
 3005              	.LBB32:
1225:fltk-1.3.4-1/jpeg/jdhuff.c ****       JBLOCKROW block = MCU_data[blkn];
 3006              		.loc 1 1225 0
 3007 00c7 488B4424 		movq	40(%rsp), %rax
 3007      28
 3008 00cc 488B7C24 		movq	8(%rsp), %rdi
 3008      08
 3009              	.LBB33:
1226:fltk-1.3.4-1/jpeg/jdhuff.c ****       d_derived_tbl * htbl;
1227:fltk-1.3.4-1/jpeg/jdhuff.c ****       register int s, k, r;
1228:fltk-1.3.4-1/jpeg/jdhuff.c ****       int coef_limit, ci;
1229:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1230:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Decode a single block's worth of coefficients */
1231:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1232:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Section F.2.2.1: decode the DC coefficient difference */
1233:fltk-1.3.4-1/jpeg/jdhuff.c ****       htbl = entropy->dc_cur_tbls[blkn];
1234:fltk-1.3.4-1/jpeg/jdhuff.c ****       HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 3010              		.loc 1 1234 0
 3011 00d1 83FA07   		cmpl	$7, %edx
 3012              	.LBE33:
1225:fltk-1.3.4-1/jpeg/jdhuff.c ****       JBLOCKROW block = MCU_data[blkn];
 3013              		.loc 1 1225 0
 3014 00d4 4C8B2CF8 		movq	(%rax,%rdi,8), %r13
 3015              	.LVL447:
1233:fltk-1.3.4-1/jpeg/jdhuff.c ****       HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 3016              		.loc 1 1233 0
 3017 00d8 488B4424 		movq	16(%rsp), %rax
 3017      10
 3018 00dd 488B18   		movq	(%rax), %rbx
 3019              	.LVL448:
 3020              	.LBB34:
 3021              		.loc 1 1234 0
 3022 00e0 0F8E2A04 		jle	.L422
 3022      0000
 3023              	.L350:
 3024              		.loc 1 1234 0 is_stmt 0 discriminator 6
 3025 00e6 8D4AF8   		leal	-8(%rdx), %ecx
 3026 00e9 4889F0   		movq	%rsi, %rax
 3027 00ec 48D3F8   		sarq	%cl, %rax
 3028              	.LVL449:
 3029 00ef 0FB6C0   		movzbl	%al, %eax
 3030 00f2 8B8C8320 		movl	288(%rbx,%rax,4), %ecx
 3030      010000
 3031              	.LVL450:
 3032 00f9 85C9     		testl	%ecx, %ecx
 3033 00fb 0F84DF03 		je	.L380
 3033      0000
 3034              		.loc 1 1234 0 discriminator 8
 3035 0101 440FB6BC 		movzbl	1312(%rbx,%rax), %r15d
 3035      03200500 
 3035      00
 3036 010a 29CA     		subl	%ecx, %edx
 3037              	.LVL451:
 3038              	.L353:
 3039              	.LBE34:
1235:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1236:fltk-1.3.4-1/jpeg/jdhuff.c ****       htbl = entropy->ac_cur_tbls[blkn];
 3040              		.loc 1 1236 0 is_stmt 1
 3041 010c 488B4424 		movq	16(%rsp), %rax
 3041      10
 3042 0111 488B5850 		movq	80(%rax), %rbx
 3043              	.LVL452:
1237:fltk-1.3.4-1/jpeg/jdhuff.c ****       k = 1;
1238:fltk-1.3.4-1/jpeg/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 3044              		.loc 1 1238 0
 3045 0115 488B4424 		movq	8(%rsp), %rax
 3045      08
 3046 011a 418BAC84 		movl	336(%r12,%rax,4), %ebp
 3046      50010000 
 3047              	.LVL453:
1239:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (coef_limit) {
 3048              		.loc 1 1239 0
 3049 0122 85ED     		testl	%ebp, %ebp
 3050 0124 0F847603 		je	.L354
 3050      0000
1240:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Convert DC difference to actual value, update last_dc_val */
1241:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (s) {
 3051              		.loc 1 1241 0
 3052 012a 4585FF   		testl	%r15d, %r15d
 3053 012d 743B     		je	.L355
1242:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 3054              		.loc 1 1242 0
 3055 012f 4439FA   		cmpl	%r15d, %edx
 3056 0132 0F8C2704 		jl	.L423
 3056      0000
 3057              	.L356:
1243:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 3058              		.loc 1 1243 0
 3059 0138 4963C7   		movslq	%r15d, %rax
 3060 013b 4429FA   		subl	%r15d, %edx
 3061              	.LVL454:
1244:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 3062              		.loc 1 1244 0
 3063 013e 458D47FF 		leal	-1(%r15), %r8d
1243:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 3064              		.loc 1 1243 0
 3065 0142 8B3C8500 		movl	bmask(,%rax,4), %edi
 3065      000000
 3066 0149 89D1     		movl	%edx, %ecx
 3067 014b 4889F0   		movq	%rsi, %rax
 3068 014e 48D3F8   		sarq	%cl, %rax
 3069              		.loc 1 1244 0
 3070 0151 4963C8   		movslq	%r8d, %rcx
1243:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 3071              		.loc 1 1243 0
 3072 0154 21F8     		andl	%edi, %eax
 3073              	.LVL455:
 3074              		.loc 1 1244 0
 3075 0156 4189C0   		movl	%eax, %r8d
 3076 0159 4129F8   		subl	%edi, %r8d
 3077 015c 3B048D00 		cmpl	bmask(,%rcx,4), %eax
 3077      000000
 3078 0163 410F4EC0 		cmovle	%r8d, %eax
 3079              	.LVL456:
 3080 0167 4189C7   		movl	%eax, %r15d
 3081              	.LVL457:
 3082              	.L355:
1245:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
1246:fltk-1.3.4-1/jpeg/jdhuff.c **** 	ci = cinfo->MCU_membership[blkn];
1247:fltk-1.3.4-1/jpeg/jdhuff.c **** 	s += state.last_dc_val[ci];
 3083              		.loc 1 1247 0
 3084 016a 488B4424 		movq	24(%rsp), %rax
 3084      18
 3085 016f 488B7C24 		movq	8(%rsp), %rdi
 3085      08
 3086 0174 486384B8 		movslq	500(%rax,%rdi,4), %rax
 3086      F4010000 
 3087 017c 448B4484 		movl	100(%rsp,%rax,4), %r8d
 3087      64
 3088 0181 4501F8   		addl	%r15d, %r8d
 3089              	.LVL458:
1248:fltk-1.3.4-1/jpeg/jdhuff.c **** 	state.last_dc_val[ci] = s;
1249:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Output the DC coefficient */
1250:fltk-1.3.4-1/jpeg/jdhuff.c **** 	(*block)[0] = (JCOEF) s;
1251:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1252:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Section F.2.2.2: decode the AC coefficients */
1253:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Since zeroes are skipped, output area must be cleared beforehand */
1254:fltk-1.3.4-1/jpeg/jdhuff.c **** 	for (; k < coef_limit; k++) {
 3090              		.loc 1 1254 0
 3091 0184 83FD01   		cmpl	$1, %ebp
1248:fltk-1.3.4-1/jpeg/jdhuff.c **** 	state.last_dc_val[ci] = s;
 3092              		.loc 1 1248 0
 3093 0187 44894484 		movl	%r8d, 100(%rsp,%rax,4)
 3093      64
1250:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3094              		.loc 1 1250 0
 3095 018c 66458945 		movw	%r8w, 0(%r13)
 3095      00
 3096              	.LVL459:
 3097              		.loc 1 1254 0
 3098 0191 0F8E3703 		jle	.L357
 3098      0000
 3099 0197 41BF0100 		movl	$1, %r15d
 3099      0000
 3100 019d EB53     		jmp	.L366
 3101              	.LVL460:
 3102 019f 90       		.p2align 4,,10
 3103              		.p2align 3
 3104              	.L426:
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
1256:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1257:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = s >> 4;
1258:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s &= 15;
1259:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1260:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (s) {
1261:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    k += r;
 3105              		.loc 1 1261 0
 3106 01a0 4101CF   		addl	%ecx, %r15d
 3107              	.LVL461:
1262:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 3108              		.loc 1 1262 0
 3109 01a3 39C2     		cmpl	%eax, %edx
 3110 01a5 0F8CC502 		jl	.L424
 3110      0000
 3111              	.LVL462:
 3112              	.L362:
1263:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 3113              		.loc 1 1263 0
 3114 01ab 4963C0   		movslq	%r8d, %rax
 3115 01ae 4429C2   		subl	%r8d, %edx
 3116              	.LVL463:
1264:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    s = HUFF_EXTEND(r, s);
 3117              		.loc 1 1264 0
 3118 01b1 4183E801 		subl	$1, %r8d
1263:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 3119              		.loc 1 1263 0
 3120 01b5 8B3C8500 		movl	bmask(,%rax,4), %edi
 3120      000000
 3121 01bc 89D1     		movl	%edx, %ecx
 3122 01be 4889F0   		movq	%rsi, %rax
 3123 01c1 48D3F8   		sarq	%cl, %rax
 3124              		.loc 1 1264 0
 3125 01c4 4D63C0   		movslq	%r8d, %r8
1263:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 3126              		.loc 1 1263 0
 3127 01c7 21F8     		andl	%edi, %eax
 3128              	.LVL464:
 3129              		.loc 1 1264 0
 3130 01c9 89C1     		movl	%eax, %ecx
 3131 01cb 29F9     		subl	%edi, %ecx
 3132 01cd 423B0485 		cmpl	bmask(,%r8,4), %eax
 3132      00000000 
 3133 01d5 0F4EC1   		cmovle	%ecx, %eax
 3134              	.LVL465:
1265:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    /* Output coefficient in natural (dezigzagged) order.
1266:fltk-1.3.4-1/jpeg/jdhuff.c **** 	     * Note: the extra entries in jpeg_natural_order[] will save us
1267:fltk-1.3.4-1/jpeg/jdhuff.c **** 	     * if k >= DCTSIZE2, which could happen if the data is corrupted.
1268:fltk-1.3.4-1/jpeg/jdhuff.c **** 	     */
1269:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 3135              		.loc 1 1269 0
 3136 01d8 4963CF   		movslq	%r15d, %rcx
1254:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3137              		.loc 1 1254 0
 3138 01db 4183C701 		addl	$1, %r15d
 3139              	.LVL466:
 3140              		.loc 1 1269 0
 3141 01df 48630C8D 		movslq	jpeg_natural_order(,%rcx,4), %rcx
 3141      00000000 
1254:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3142              		.loc 1 1254 0
 3143 01e7 4439FD   		cmpl	%r15d, %ebp
 3144              		.loc 1 1269 0
 3145 01ea 66418944 		movw	%ax, 0(%r13,%rcx,2)
 3145      4D00
 3146              	.LVL467:
1254:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3147              		.loc 1 1254 0
 3148 01f0 7E51     		jle	.L419
 3149              	.LVL468:
 3150              	.L366:
 3151              	.LBB35:
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3152              		.loc 1 1255 0
 3153 01f2 83FA07   		cmpl	$7, %edx
 3154 01f5 0F8E4502 		jle	.L425
 3154      0000
 3155              	.L358:
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3156              		.loc 1 1255 0 is_stmt 0 discriminator 6
 3157 01fb 8D4AF8   		leal	-8(%rdx), %ecx
 3158 01fe 4889F0   		movq	%rsi, %rax
 3159 0201 48D3F8   		sarq	%cl, %rax
 3160              	.LVL469:
 3161 0204 0FB6C0   		movzbl	%al, %eax
 3162 0207 8B8C8320 		movl	288(%rbx,%rax,4), %ecx
 3162      010000
 3163              	.LVL470:
 3164 020e 85C9     		testl	%ecx, %ecx
 3165 0210 0F84AA01 		je	.L383
 3165      0000
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3166              		.loc 1 1255 0 discriminator 8
 3167 0216 0FB68403 		movzbl	1312(%rbx,%rax), %eax
 3167      20050000 
 3168              	.LVL471:
 3169 021e 29CA     		subl	%ecx, %edx
 3170              	.LVL472:
 3171              	.L360:
 3172              	.LBE35:
1257:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s &= 15;
 3173              		.loc 1 1257 0 is_stmt 1
 3174 0220 89C1     		movl	%eax, %ecx
 3175 0222 C1F904   		sarl	$4, %ecx
 3176              	.LVL473:
1260:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    k += r;
 3177              		.loc 1 1260 0
 3178 0225 83E00F   		andl	$15, %eax
 3179              	.LVL474:
 3180 0228 4189C0   		movl	%eax, %r8d
 3181 022b 0F856FFF 		jne	.L426
 3181      FFFF
1270:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  } else {
1271:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (r != 15)
 3182              		.loc 1 1271 0
 3183 0231 83F90F   		cmpl	$15, %ecx
 3184 0234 7571     		jne	.L365
1272:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      goto EndOfBlock;
1273:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    k += 15;
 3185              		.loc 1 1273 0
 3186 0236 4183C70F 		addl	$15, %r15d
 3187              	.LVL475:
1254:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3188              		.loc 1 1254 0
 3189 023a 4183C701 		addl	$1, %r15d
 3190              	.LVL476:
 3191 023e 4439FD   		cmpl	%r15d, %ebp
 3192 0241 7FAF     		jg	.L366
 3193              	.LVL477:
 3194              	.L419:
1274:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  }
1275:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
1276:fltk-1.3.4-1/jpeg/jdhuff.c ****       } else {
1277:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (s) {
1278:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
1279:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
1280:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
1281:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
1282:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1283:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Section F.2.2.2: decode the AC coefficients */
1284:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* In this path we just discard the values */
1285:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (; k < DCTSIZE2; k++) {
 3195              		.loc 1 1285 0
 3196 0243 4183FF3F 		cmpl	$63, %r15d
 3197 0247 7F5E     		jg	.L365
 3198              	.LVL478:
 3199 0249 0F1F8000 		.p2align 4,,10
 3199      000000
 3200              		.p2align 3
 3201              	.L375:
 3202              	.LBB36:
1286:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 3203              		.loc 1 1286 0
 3204 0250 83FA07   		cmpl	$7, %edx
 3205 0253 0F8E9701 		jle	.L427
 3205      0000
 3206              	.L369:
 3207              		.loc 1 1286 0 is_stmt 0 discriminator 6
 3208 0259 8D4AF8   		leal	-8(%rdx), %ecx
 3209 025c 4889F0   		movq	%rsi, %rax
 3210 025f 48D3F8   		sarq	%cl, %rax
 3211              	.LVL479:
 3212 0262 0FB6C0   		movzbl	%al, %eax
 3213 0265 8B8C8320 		movl	288(%rbx,%rax,4), %ecx
 3213      010000
 3214              	.LVL480:
 3215 026c 85C9     		testl	%ecx, %ecx
 3216 026e 0F842401 		je	.L385
 3216      0000
 3217              		.loc 1 1286 0 discriminator 8
 3218 0274 0FB68403 		movzbl	1312(%rbx,%rax), %eax
 3218      20050000 
 3219              	.LVL481:
 3220 027c 29CA     		subl	%ecx, %edx
 3221              	.LVL482:
 3222              	.L371:
 3223              	.LBE36:
1287:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1288:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 3224              		.loc 1 1288 0 is_stmt 1
 3225 027e 4189C5   		movl	%eax, %r13d
 3226 0281 41C1FD04 		sarl	$4, %r13d
 3227              	.LVL483:
1289:fltk-1.3.4-1/jpeg/jdhuff.c **** 	s &= 15;
1290:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1291:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (s) {
 3228              		.loc 1 1291 0
 3229 0285 83E00F   		andl	$15, %eax
 3230              	.LVL484:
 3231 0288 89C5     		movl	%eax, %ebp
 3232 028a 0F84F000 		je	.L372
 3232      0000
1292:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  k += r;
 3233              		.loc 1 1292 0
 3234 0290 4501FD   		addl	%r15d, %r13d
 3235              	.LVL485:
1293:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 3236              		.loc 1 1293 0
 3237 0293 39C2     		cmpl	%eax, %edx
 3238 0295 0F8CBD00 		jl	.L428
 3238      0000
 3239              	.LVL486:
 3240              	.L373:
1294:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 3241              		.loc 1 1294 0
 3242 029b 29EA     		subl	%ebp, %edx
 3243              	.LVL487:
 3244              	.L374:
1285:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 3245              		.loc 1 1285 0
 3246 029d 458D7D01 		leal	1(%r13), %r15d
 3247              	.LVL488:
 3248 02a1 4183FF3F 		cmpl	$63, %r15d
 3249 02a5 7EA9     		jle	.L375
 3250              	.LVL489:
 3251              	.L365:
 3252 02a7 488B7C24 		movq	8(%rsp), %rdi
 3252      08
 3253 02ac 48834424 		addq	$8, 16(%rsp)
 3253      1008
 3254 02b2 89F8     		movl	%edi, %eax
 3255 02b4 4883C701 		addq	$1, %rdi
 3256 02b8 48897C24 		movq	%rdi, 8(%rsp)
 3256      08
 3257              	.LVL490:
 3258 02bd 83C001   		addl	$1, %eax
 3259              	.LVL491:
 3260              	.LBE32:
1224:fltk-1.3.4-1/jpeg/jdhuff.c ****       JBLOCKROW block = MCU_data[blkn];
 3261              		.loc 1 1224 0 discriminator 2
 3262 02c0 488B7C24 		movq	24(%rsp), %rdi
 3262      18
 3263 02c5 3987F001 		cmpl	%eax, 496(%rdi)
 3263      0000
 3264 02cb 0F8FF6FD 		jg	.L376
 3264      FFFF
 3265 02d1 488B4728 		movq	40(%rdi), %rax
 3266              	.LVL492:
 3267 02d5 488B4C24 		movq	48(%rsp), %rcx
 3267      30
 3268              	.LVL493:
 3269              	.L349:
1295:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} else {
1296:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (r != 15)
1297:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    break;
1298:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  k += 15;
1299:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
1300:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
1301:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1302:fltk-1.3.4-1/jpeg/jdhuff.c ****       EndOfBlock: ;
1303:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1304:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1305:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Completed MCU, so update state */
1306:fltk-1.3.4-1/jpeg/jdhuff.c ****     BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 3270              		.loc 1 1306 0
 3271 02da 488908   		movq	%rcx, (%rax)
 3272 02dd 488B4424 		movq	24(%rsp), %rax
 3272      18
 3273 02e2 488B4C24 		movq	56(%rsp), %rcx
 3273      38
 3274 02e7 488B4028 		movq	40(%rax), %rax
 3275 02eb 48894808 		movq	%rcx, 8(%rax)
1307:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(entropy->saved, state);
 3276              		.loc 1 1307 0
 3277 02ef 488B4424 		movq	96(%rsp), %rax
 3277      60
1306:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(entropy->saved, state);
 3278              		.loc 1 1306 0
 3279 02f4 49897424 		movq	%rsi, 24(%r12)
 3279      18
 3280 02f9 41895424 		movl	%edx, 32(%r12)
 3280      20
 3281              		.loc 1 1307 0
 3282 02fe 49894424 		movq	%rax, 40(%r12)
 3282      28
 3283 0303 488B4424 		movq	104(%rsp), %rax
 3283      68
 3284 0308 49894424 		movq	%rax, 48(%r12)
 3284      30
 3285 030d 8B442470 		movl	112(%rsp), %eax
 3286 0311 41894424 		movl	%eax, 56(%r12)
 3286      38
 3287              	.LVL494:
 3288 0316 662E0F1F 		.p2align 4,,10
 3288      84000000 
 3288      0000
 3289              		.p2align 3
 3290              	.L346:
1308:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
1309:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1310:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Account for restart interval (no-op if not using restarts) */
1311:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->restarts_to_go--;
 3291              		.loc 1 1311 0
 3292 0320 41836C24 		subl	$1, 64(%r12)
 3292      4001
1312:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1313:fltk-1.3.4-1/jpeg/jdhuff.c ****   return TRUE;
 3293              		.loc 1 1313 0
 3294 0326 B8010000 		movl	$1, %eax
 3294      00
 3295              	.L348:
1314:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 3296              		.loc 1 1314 0
 3297 032b 488B5C24 		movq	120(%rsp), %rbx
 3297      78
 3298 0330 6448331C 		xorq	%fs:40, %rbx
 3298      25280000 
 3298      00
 3299 0339 0F854602 		jne	.L429
 3299      0000
 3300 033f 4881C488 		addq	$136, %rsp
 3300      000000
 3301              		.cfi_remember_state
 3302              		.cfi_def_cfa_offset 56
 3303 0346 5B       		popq	%rbx
 3304              		.cfi_def_cfa_offset 48
 3305 0347 5D       		popq	%rbp
 3306              		.cfi_def_cfa_offset 40
 3307 0348 415C     		popq	%r12
 3308              		.cfi_def_cfa_offset 32
 3309              	.LVL495:
 3310 034a 415D     		popq	%r13
 3311              		.cfi_def_cfa_offset 24
 3312 034c 415E     		popq	%r14
 3313              		.cfi_def_cfa_offset 16
 3314 034e 415F     		popq	%r15
 3315              		.cfi_def_cfa_offset 8
 3316 0350 C3       		ret
 3317              	.LVL496:
 3318              		.p2align 4,,10
 3319 0351 0F1F8000 		.p2align 3
 3319      000000
 3320              	.L428:
 3321              		.cfi_restore_state
 3322              	.LBB43:
1293:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 3323              		.loc 1 1293 0 discriminator 1
 3324 0358 4C8D7424 		leaq	48(%rsp), %r14
 3324      30
 3325 035d 89C1     		movl	%eax, %ecx
 3326 035f 4C89F7   		movq	%r14, %rdi
 3327 0362 E8000000 		call	jpeg_fill_bit_buffer
 3327      00
 3328              	.LVL497:
 3329 0367 85C0     		testl	%eax, %eax
 3330 0369 0F84C100 		je	.L351
 3330      0000
1293:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 3331              		.loc 1 1293 0 is_stmt 0 discriminator 3
 3332 036f 488B7424 		movq	64(%rsp), %rsi
 3332      40
 3333              	.LVL498:
 3334 0374 8B542448 		movl	72(%rsp), %edx
 3335              	.LVL499:
 3336 0378 E91EFFFF 		jmp	.L373
 3336      FF
 3337              	.LVL500:
 3338 037d 0F1F00   		.p2align 4,,10
 3339              		.p2align 3
 3340              	.L372:
1296:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    break;
 3341              		.loc 1 1296 0 is_stmt 1
 3342 0380 4183FD0F 		cmpl	$15, %r13d
 3343 0384 0F851DFF 		jne	.L365
 3343      FFFF
1298:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 3344              		.loc 1 1298 0
 3345 038a 458D6F0F 		leal	15(%r15), %r13d
 3346              	.LVL501:
 3347 038e E90AFFFF 		jmp	.L374
 3347      FF
 3348              	.LVL502:
 3349              		.p2align 4,,10
 3350 0393 0F1F4400 		.p2align 3
 3350      00
 3351              	.L385:
 3352              	.L370:
 3353 0398 4C8D7424 		leaq	48(%rsp), %r14
 3353      30
 3354              	.LBB37:
1286:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3355              		.loc 1 1286 0
 3356 039d 41B80900 		movl	$9, %r8d
 3356      0000
 3357              	.LVL503:
 3358 03a3 4889D9   		movq	%rbx, %rcx
 3359 03a6 4C89F7   		movq	%r14, %rdi
 3360 03a9 E8000000 		call	jpeg_huff_decode
 3360      00
 3361              	.LVL504:
 3362 03ae 85C0     		testl	%eax, %eax
 3363 03b0 787E     		js	.L351
 3364              	.LVL505:
 3365              	.L430:
1286:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3366              		.loc 1 1286 0 is_stmt 0 discriminator 12
 3367 03b2 488B7424 		movq	64(%rsp), %rsi
 3367      40
 3368              	.LVL506:
 3369 03b7 8B542448 		movl	72(%rsp), %edx
 3370              	.LVL507:
 3371 03bb E9BEFEFF 		jmp	.L371
 3371      FF
 3372              	.LVL508:
 3373              		.p2align 4,,10
 3374              		.p2align 3
 3375              	.L383:
 3376 03c0 4C8D7424 		leaq	48(%rsp), %r14
 3376      30
 3377              	.LBE37:
 3378              	.LBB38:
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3379              		.loc 1 1255 0 is_stmt 1
 3380 03c5 41B80900 		movl	$9, %r8d
 3380      0000
 3381              	.LVL509:
 3382              	.L359:
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3383              		.loc 1 1255 0 is_stmt 0 discriminator 10
 3384 03cb 4889D9   		movq	%rbx, %rcx
 3385 03ce 4C89F7   		movq	%r14, %rdi
 3386 03d1 E8000000 		call	jpeg_huff_decode
 3386      00
 3387              	.LVL510:
 3388 03d6 85C0     		testl	%eax, %eax
 3389 03d8 7856     		js	.L351
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3390              		.loc 1 1255 0 discriminator 12
 3391 03da 488B7424 		movq	64(%rsp), %rsi
 3391      40
 3392              	.LVL511:
 3393 03df 8B542448 		movl	72(%rsp), %edx
 3394              	.LVL512:
 3395 03e3 E938FEFF 		jmp	.L360
 3395      FF
 3396              	.LVL513:
 3397 03e8 0F1F8400 		.p2align 4,,10
 3397      00000000 
 3398              		.p2align 3
 3399              	.L427:
 3400              	.LBE38:
 3401              	.LBB39:
1286:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3402              		.loc 1 1286 0 is_stmt 1 discriminator 1
 3403 03f0 4C8D7424 		leaq	48(%rsp), %r14
 3403      30
 3404 03f5 31C9     		xorl	%ecx, %ecx
 3405 03f7 4C89F7   		movq	%r14, %rdi
 3406 03fa E8000000 		call	jpeg_fill_bit_buffer
 3406      00
 3407              	.LVL514:
 3408 03ff 85C0     		testl	%eax, %eax
 3409 0401 742D     		je	.L351
1286:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3410              		.loc 1 1286 0 is_stmt 0 discriminator 4
 3411 0403 8B542448 		movl	72(%rsp), %edx
 3412 0407 488B7424 		movq	64(%rsp), %rsi
 3412      40
 3413              	.LVL515:
 3414 040c 83FA07   		cmpl	$7, %edx
 3415 040f 0F8F44FE 		jg	.L369
 3415      FFFF
1286:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3416              		.loc 1 1286 0
 3417 0415 41B80100 		movl	$1, %r8d
 3417      0000
 3418              	.LVL516:
 3419 041b 4889D9   		movq	%rbx, %rcx
 3420 041e 4C89F7   		movq	%r14, %rdi
 3421 0421 E8000000 		call	jpeg_huff_decode
 3421      00
 3422              	.LVL517:
 3423 0426 85C0     		testl	%eax, %eax
 3424 0428 7988     		jns	.L430
 3425              	.LVL518:
 3426 042a 660F1F44 		.p2align 4,,10
 3426      0000
 3427              		.p2align 3
 3428              	.L351:
 3429              	.LBE39:
 3430              	.LBE43:
1210:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 3431              		.loc 1 1210 0 is_stmt 1
 3432 0430 31C0     		xorl	%eax, %eax
 3433 0432 E9F4FEFF 		jmp	.L348
 3433      FF
 3434              	.LVL519:
 3435 0437 660F1F84 		.p2align 4,,10
 3435      00000000 
 3435      00
 3436              		.p2align 3
 3437              	.L425:
 3438              	.LBB44:
 3439              	.LBB40:
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3440              		.loc 1 1255 0 discriminator 1
 3441 0440 4C8D7424 		leaq	48(%rsp), %r14
 3441      30
 3442 0445 31C9     		xorl	%ecx, %ecx
 3443 0447 4C89F7   		movq	%r14, %rdi
 3444 044a E8000000 		call	jpeg_fill_bit_buffer
 3444      00
 3445              	.LVL520:
 3446 044f 85C0     		testl	%eax, %eax
 3447 0451 74DD     		je	.L351
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3448              		.loc 1 1255 0 is_stmt 0 discriminator 4
 3449 0453 8B542448 		movl	72(%rsp), %edx
 3450 0457 488B7424 		movq	64(%rsp), %rsi
 3450      40
 3451              	.LVL521:
 3452 045c 83FA07   		cmpl	$7, %edx
 3453 045f 0F8F96FD 		jg	.L358
 3453      FFFF
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3454              		.loc 1 1255 0
 3455 0465 41B80100 		movl	$1, %r8d
 3455      0000
 3456 046b E95BFFFF 		jmp	.L359
 3456      FF
 3457              	.LVL522:
 3458              		.p2align 4,,10
 3459              		.p2align 3
 3460              	.L424:
 3461              	.LBE40:
1262:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 3462              		.loc 1 1262 0 is_stmt 1 discriminator 1
 3463 0470 4C8D7424 		leaq	48(%rsp), %r14
 3463      30
 3464 0475 89C1     		movl	%eax, %ecx
 3465              	.LVL523:
 3466 0477 89442424 		movl	%eax, 36(%rsp)
 3467 047b 4C89F7   		movq	%r14, %rdi
 3468 047e E8000000 		call	jpeg_fill_bit_buffer
 3468      00
 3469              	.LVL524:
 3470 0483 85C0     		testl	%eax, %eax
 3471 0485 74A9     		je	.L351
1262:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 3472              		.loc 1 1262 0 is_stmt 0 discriminator 3
 3473 0487 488B7424 		movq	64(%rsp), %rsi
 3473      40
 3474              	.LVL525:
 3475 048c 8B542448 		movl	72(%rsp), %edx
 3476 0490 448B4424 		movl	36(%rsp), %r8d
 3476      24
 3477              	.LVL526:
 3478 0495 E911FDFF 		jmp	.L362
 3478      FF
 3479              	.LVL527:
 3480 049a 660F1F44 		.p2align 4,,10
 3480      0000
 3481              		.p2align 3
 3482              	.L354:
1277:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 3483              		.loc 1 1277 0 is_stmt 1
 3484 04a0 4585FF   		testl	%r15d, %r15d
 3485 04a3 7429     		je	.L357
1278:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 3486              		.loc 1 1278 0
 3487 04a5 4439FA   		cmpl	%r15d, %edx
 3488 04a8 7D21     		jge	.L368
1278:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 3489              		.loc 1 1278 0 is_stmt 0 discriminator 1
 3490 04aa 4C8D7424 		leaq	48(%rsp), %r14
 3490      30
 3491 04af 4489F9   		movl	%r15d, %ecx
 3492 04b2 4C89F7   		movq	%r14, %rdi
 3493 04b5 E8000000 		call	jpeg_fill_bit_buffer
 3493      00
 3494              	.LVL528:
 3495 04ba 85C0     		testl	%eax, %eax
 3496 04bc 0F846EFF 		je	.L351
 3496      FFFF
1278:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 3497              		.loc 1 1278 0 discriminator 3
 3498 04c2 488B7424 		movq	64(%rsp), %rsi
 3498      40
 3499              	.LVL529:
 3500 04c7 8B542448 		movl	72(%rsp), %edx
 3501              	.LVL530:
 3502              	.L368:
1279:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 3503              		.loc 1 1279 0 is_stmt 1
 3504 04cb 4429FA   		subl	%r15d, %edx
 3505              	.LVL531:
 3506              	.L357:
 3507              	.LBB41:
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3508              		.loc 1 1255 0
 3509 04ce 41BF0100 		movl	$1, %r15d
 3509      0000
 3510              	.LVL532:
 3511 04d4 E977FDFF 		jmp	.L375
 3511      FF
 3512              	.LVL533:
 3513 04d9 0F1F8000 		.p2align 4,,10
 3513      000000
 3514              		.p2align 3
 3515              	.L380:
 3516 04e0 4C8D7424 		leaq	48(%rsp), %r14
 3516      30
 3517              	.LBE41:
 3518              	.LBB42:
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3519              		.loc 1 1234 0
 3520 04e5 41B80900 		movl	$9, %r8d
 3520      0000
 3521              	.LVL534:
 3522              	.L352:
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3523              		.loc 1 1234 0 is_stmt 0 discriminator 10
 3524 04eb 4889D9   		movq	%rbx, %rcx
 3525 04ee 4C89F7   		movq	%r14, %rdi
 3526 04f1 E8000000 		call	jpeg_huff_decode
 3526      00
 3527              	.LVL535:
 3528 04f6 85C0     		testl	%eax, %eax
 3529 04f8 4189C7   		movl	%eax, %r15d
 3530              	.LVL536:
 3531 04fb 0F882FFF 		js	.L351
 3531      FFFF
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3532              		.loc 1 1234 0 discriminator 12
 3533 0501 488B7424 		movq	64(%rsp), %rsi
 3533      40
 3534              	.LVL537:
 3535 0506 8B542448 		movl	72(%rsp), %edx
 3536              	.LVL538:
 3537 050a E9FDFBFF 		jmp	.L353
 3537      FF
 3538              	.LVL539:
 3539 050f 90       		.p2align 4,,10
 3540              		.p2align 3
 3541              	.L422:
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3542              		.loc 1 1234 0 discriminator 1
 3543 0510 4C8D7424 		leaq	48(%rsp), %r14
 3543      30
 3544 0515 31C9     		xorl	%ecx, %ecx
 3545 0517 4C89F7   		movq	%r14, %rdi
 3546 051a E8000000 		call	jpeg_fill_bit_buffer
 3546      00
 3547              	.LVL540:
 3548 051f 85C0     		testl	%eax, %eax
 3549 0521 0F8409FF 		je	.L351
 3549      FFFF
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3550              		.loc 1 1234 0 discriminator 4
 3551 0527 8B542448 		movl	72(%rsp), %edx
 3552 052b 488B7424 		movq	64(%rsp), %rsi
 3552      40
 3553              	.LVL541:
 3554 0530 83FA07   		cmpl	$7, %edx
 3555 0533 0F8FADFB 		jg	.L350
 3555      FFFF
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3556              		.loc 1 1234 0
 3557 0539 41B80100 		movl	$1, %r8d
 3557      0000
 3558 053f EBAA     		jmp	.L352
 3559              	.LVL542:
 3560              		.p2align 4,,10
 3561 0541 0F1F8000 		.p2align 3
 3561      000000
 3562              	.L421:
 3563              	.LBE42:
 3564              	.LBE44:
1209:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 3565              		.loc 1 1209 0 is_stmt 1
 3566 0548 488B7C24 		movq	24(%rsp), %rdi
 3566      18
 3567 054d E8000000 		call	process_restart
 3567      00
 3568              	.LVL543:
 3569 0552 85C0     		testl	%eax, %eax
 3570 0554 0F85F5FA 		jne	.L347
 3570      FFFF
 3571 055a E9D1FEFF 		jmp	.L351
 3571      FF
 3572              	.LVL544:
 3573              	.L423:
 3574              	.LBB45:
1242:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 3575              		.loc 1 1242 0 discriminator 1
 3576 055f 4C8D7424 		leaq	48(%rsp), %r14
 3576      30
 3577 0564 4489F9   		movl	%r15d, %ecx
 3578 0567 4C89F7   		movq	%r14, %rdi
 3579 056a E8000000 		call	jpeg_fill_bit_buffer
 3579      00
 3580              	.LVL545:
 3581 056f 85C0     		testl	%eax, %eax
 3582 0571 0F84B9FE 		je	.L351
 3582      FFFF
1242:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 3583              		.loc 1 1242 0 is_stmt 0 discriminator 3
 3584 0577 488B7424 		movq	64(%rsp), %rsi
 3584      40
 3585              	.LVL546:
 3586 057c 8B542448 		movl	72(%rsp), %edx
 3587              	.LVL547:
 3588 0580 E9B3FBFF 		jmp	.L356
 3588      FF
 3589              	.LVL548:
 3590              	.L429:
 3591              	.LBE45:
 3592              		.loc 1 1314 0 is_stmt 1
 3593 0585 E8000000 		call	__stack_chk_fail
 3593      00
 3594              	.LVL549:
 3595              		.cfi_endproc
 3596              	.LFE71:
 3598              		.section	.text.unlikely.decode_mcu
 3599              	.LCOLDE9:
 3600              		.section	.text.decode_mcu
 3601              	.LHOTE9:
 3602              		.section	.text.unlikely.jpeg_make_d_derived_tbl,"ax",@progbits
 3603              	.LCOLDB10:
 3604              		.section	.text.jpeg_make_d_derived_tbl,"ax",@progbits
 3605              	.LHOTB10:
 3606              		.p2align 4,,15
 3608              	jpeg_make_d_derived_tbl:
 3609              	.LFB61:
 325:fltk-1.3.4-1/jpeg/jdhuff.c ****   JHUFF_TBL *htbl;
 3610              		.loc 1 325 0
 3611              		.cfi_startproc
 3612              	.LVL550:
 3613 0000 4157     		pushq	%r15
 3614              		.cfi_def_cfa_offset 16
 3615              		.cfi_offset 15, -16
 3616 0002 4156     		pushq	%r14
 3617              		.cfi_def_cfa_offset 24
 3618              		.cfi_offset 14, -24
 3619 0004 4155     		pushq	%r13
 3620              		.cfi_def_cfa_offset 32
 3621              		.cfi_offset 13, -32
 3622 0006 4154     		pushq	%r12
 3623              		.cfi_def_cfa_offset 40
 3624              		.cfi_offset 12, -40
 3625 0008 4989CD   		movq	%rcx, %r13
 3626 000b 55       		pushq	%rbp
 3627              		.cfi_def_cfa_offset 48
 3628              		.cfi_offset 6, -48
 3629 000c 53       		pushq	%rbx
 3630              		.cfi_def_cfa_offset 56
 3631              		.cfi_offset 3, -56
 3632 000d 4989FC   		movq	%rdi, %r12
 3633 0010 89D3     		movl	%edx, %ebx
 3634 0012 4881EC48 		subq	$1352, %rsp
 3634      050000
 3635              		.cfi_def_cfa_offset 1408
 325:fltk-1.3.4-1/jpeg/jdhuff.c ****   JHUFF_TBL *htbl;
 3636              		.loc 1 325 0
 3637 0019 64488B04 		movq	%fs:40, %rax
 3637      25280000 
 3637      00
 3638 0022 48898424 		movq	%rax, 1336(%rsp)
 3638      38050000 
 3639 002a 31C0     		xorl	%eax, %eax
 339:fltk-1.3.4-1/jpeg/jdhuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 3640              		.loc 1 339 0
 3641 002c 83FA03   		cmpl	$3, %edx
 325:fltk-1.3.4-1/jpeg/jdhuff.c ****   JHUFF_TBL *htbl;
 3642              		.loc 1 325 0
 3643 002f 8974240C 		movl	%esi, 12(%rsp)
 339:fltk-1.3.4-1/jpeg/jdhuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 3644              		.loc 1 339 0
 3645 0033 7615     		jbe	.L432
 340:fltk-1.3.4-1/jpeg/jdhuff.c ****   htbl =
 3646              		.loc 1 340 0
 3647 0035 488B07   		movq	(%rdi), %rax
 3648 0038 C7402834 		movl	$52, 40(%rax)
 3648      000000
 3649 003f 488B07   		movq	(%rdi), %rax
 3650 0042 89502C   		movl	%edx, 44(%rax)
 3651 0045 488B07   		movq	(%rdi), %rax
 3652 0048 FF10     		call	*(%rax)
 3653              	.LVL551:
 3654              	.L432:
 342:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (htbl == NULL)
 3655              		.loc 1 342 0
 3656 004a 8B54240C 		movl	12(%rsp), %edx
 3657 004e 4863C3   		movslq	%ebx, %rax
 3658 0051 85D2     		testl	%edx, %edx
 3659 0053 0F84D802 		je	.L433
 3659      0000
 342:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (htbl == NULL)
 3660              		.loc 1 342 0 is_stmt 0 discriminator 1
 3661 0059 498BACC4 		movq	232(%r12,%rax,8), %rbp
 3661      E8000000 
 3662              	.L434:
 3663              	.LVL552:
 343:fltk-1.3.4-1/jpeg/jdhuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 3664              		.loc 1 343 0 is_stmt 1
 3665 0061 4885ED   		testq	%rbp, %rbp
 3666 0064 751B     		jne	.L435
 344:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3667              		.loc 1 344 0
 3668 0066 498B0424 		movq	(%r12), %rax
 3669 006a 4C89E7   		movq	%r12, %rdi
 3670 006d C7402834 		movl	$52, 40(%rax)
 3670      000000
 3671 0074 498B0424 		movq	(%r12), %rax
 3672 0078 89582C   		movl	%ebx, 44(%rax)
 3673 007b 498B0424 		movq	(%r12), %rax
 3674 007f FF10     		call	*(%rax)
 3675              	.LVL553:
 3676              	.L435:
 347:fltk-1.3.4-1/jpeg/jdhuff.c ****     *pdtbl = (d_derived_tbl *)
 3677              		.loc 1 347 0
 3678 0081 498B5D00 		movq	0(%r13), %rbx
 3679              	.LVL554:
 3680 0085 4885DB   		testq	%rbx, %rbx
 3681 0088 751B     		jne	.L436
 349:fltk-1.3.4-1/jpeg/jdhuff.c **** 				  SIZEOF(d_derived_tbl));
 3682              		.loc 1 349 0
 3683 008a 498B4424 		movq	8(%r12), %rax
 3683      08
 3684 008f BA200600 		movl	$1568, %edx
 3684      00
 3685 0094 BE010000 		movl	$1, %esi
 3685      00
 3686 0099 4C89E7   		movq	%r12, %rdi
 3687 009c FF10     		call	*(%rax)
 3688              	.LVL555:
 348:fltk-1.3.4-1/jpeg/jdhuff.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 3689              		.loc 1 348 0
 3690 009e 49894500 		movq	%rax, 0(%r13)
 3691 00a2 4889C3   		movq	%rax, %rbx
 3692              	.L436:
 3693              	.LVL556:
 3694 00a5 4C8D6D01 		leaq	1(%rbp), %r13
 3695              	.LVL557:
 352:fltk-1.3.4-1/jpeg/jdhuff.c ****   
 3696              		.loc 1 352 0
 3697 00a9 4889AB18 		movq	%rbp, 280(%rbx)
 3697      010000
 3698              	.LVL558:
 357:fltk-1.3.4-1/jpeg/jdhuff.c ****     i = (int) htbl->bits[l];
 3699              		.loc 1 357 0
 3700 00b0 41B80100 		movl	$1, %r8d
 3700      0000
 356:fltk-1.3.4-1/jpeg/jdhuff.c ****   for (l = 1; l <= 16; l++) {
 3701              		.loc 1 356 0
 3702 00b6 4531F6   		xorl	%r14d, %r14d
 352:fltk-1.3.4-1/jpeg/jdhuff.c ****   
 3703              		.loc 1 352 0
 3704 00b9 4D89E9   		movq	%r13, %r9
 3705              	.LVL559:
 3706              	.L440:
 358:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (i < 0 || p + i > 256)	/* protect against table overrun */
 3707              		.loc 1 358 0
 3708 00bc 450FB639 		movzbl	(%r9), %r15d
 3709              	.LVL560:
 359:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 3710              		.loc 1 359 0
 3711 00c0 438D0437 		leal	(%r15,%r14), %eax
 3712 00c4 3D000100 		cmpl	$256, %eax
 3712      00
 3713 00c9 7E26     		jle	.L437
 360:fltk-1.3.4-1/jpeg/jdhuff.c ****     while (i--)
 3714              		.loc 1 360 0
 3715 00cb 498B0424 		movq	(%r12), %rax
 3716 00cf 44894424 		movl	%r8d, 16(%rsp)
 3716      10
 3717 00d4 4C89E7   		movq	%r12, %rdi
 3718 00d7 4C890C24 		movq	%r9, (%rsp)
 3719 00db C7402809 		movl	$9, 40(%rax)
 3719      000000
 3720 00e2 498B0424 		movq	(%r12), %rax
 3721 00e6 FF10     		call	*(%rax)
 3722              	.LVL561:
 3723 00e8 448B4424 		movl	16(%rsp), %r8d
 3723      10
 3724 00ed 4C8B0C24 		movq	(%rsp), %r9
 3725              	.LVL562:
 3726              	.L437:
 361:fltk-1.3.4-1/jpeg/jdhuff.c ****       huffsize[p++] = (char) l;
 3727              		.loc 1 361 0
 3728 00f1 4585FF   		testl	%r15d, %r15d
 3729 00f4 418D7FFF 		leal	-1(%r15), %edi
 3730              	.LVL563:
 3731 00f8 7425     		je	.L438
 3732 00fa 438D0C3E 		leal	(%r14,%r15), %ecx
 3733 00fe 4489C6   		movl	%r8d, %esi
 3734 0101 4489F0   		movl	%r14d, %eax
 3735              	.LVL564:
 3736              		.p2align 4,,10
 3737 0104 0F1F4000 		.p2align 3
 3738              	.L439:
 362:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 3739              		.loc 1 362 0
 3740 0108 4863D0   		movslq	%eax, %rdx
 3741 010b 83C001   		addl	$1, %eax
 3742              	.LVL565:
 361:fltk-1.3.4-1/jpeg/jdhuff.c ****       huffsize[p++] = (char) l;
 3743              		.loc 1 361 0
 3744 010e 39C1     		cmpl	%eax, %ecx
 362:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 3745              		.loc 1 362 0
 3746 0110 4088B414 		movb	%sil, 1072(%rsp,%rdx)
 3746      30040000 
 3747              	.LVL566:
 361:fltk-1.3.4-1/jpeg/jdhuff.c ****       huffsize[p++] = (char) l;
 3748              		.loc 1 361 0
 3749 0118 75EE     		jne	.L439
 3750 011a 458D743E 		leal	1(%r14,%rdi), %r14d
 3750      01
 3751              	.L438:
 357:fltk-1.3.4-1/jpeg/jdhuff.c ****     i = (int) htbl->bits[l];
 3752              		.loc 1 357 0 discriminator 2
 3753 011f 4183C001 		addl	$1, %r8d
 3754              	.LVL567:
 3755 0123 4983C101 		addq	$1, %r9
 3756 0127 4183F811 		cmpl	$17, %r8d
 3757 012b 758F     		jne	.L440
 364:fltk-1.3.4-1/jpeg/jdhuff.c ****   numsymbols = p;
 3758              		.loc 1 364 0
 3759 012d 4963C6   		movslq	%r14d, %rax
 3760 0130 C6840430 		movb	$0, 1072(%rsp,%rax)
 3760      04000000 
 3761              	.LVL568:
 371:fltk-1.3.4-1/jpeg/jdhuff.c ****   p = 0;
 3762              		.loc 1 371 0
 3763 0138 440FB684 		movzbl	1072(%rsp), %r8d
 3763      24300400 
 3763      00
 3764              	.LVL569:
 373:fltk-1.3.4-1/jpeg/jdhuff.c ****     while (((int) huffsize[p]) == si) {
 3765              		.loc 1 373 0
 3766 0141 4584C0   		testb	%r8b, %r8b
 371:fltk-1.3.4-1/jpeg/jdhuff.c ****   p = 0;
 3767              		.loc 1 371 0
 3768 0144 4489C6   		movl	%r8d, %esi
 3769 0147 4489C1   		movl	%r8d, %ecx
 3770              	.LVL570:
 373:fltk-1.3.4-1/jpeg/jdhuff.c ****     while (((int) huffsize[p]) == si) {
 3771              		.loc 1 373 0
 3772 014a 7459     		je	.L441
 3773 014c 31D2     		xorl	%edx, %edx
 3774 014e 4531FF   		xorl	%r15d, %r15d
 381:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 3775              		.loc 1 381 0
 3776 0151 41B90100 		movl	$1, %r9d
 3776      0000
 3777              	.LVL571:
 3778              	.L442:
 374:fltk-1.3.4-1/jpeg/jdhuff.c ****       huffcode[p++] = code;
 3779              		.loc 1 374 0
 3780 0157 4439C1   		cmpl	%r8d, %ecx
 3781 015a 0F85DE01 		jne	.L485
 3781      0000
 3782 0160 4963C7   		movslq	%r15d, %rax
 3783              		.p2align 4,,10
 3784 0163 0F1F4400 		.p2align 3
 3784      00
 3785              	.L443:
 375:fltk-1.3.4-1/jpeg/jdhuff.c ****       code++;
 3786              		.loc 1 375 0
 3787 0168 4183C701 		addl	$1, %r15d
 3788              	.LVL572:
 3789 016c 89548420 		movl	%edx, 32(%rsp,%rax,4)
 376:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 3790              		.loc 1 376 0
 3791 0170 83C201   		addl	$1, %edx
 3792              	.LVL573:
 374:fltk-1.3.4-1/jpeg/jdhuff.c ****       huffcode[p++] = code;
 3793              		.loc 1 374 0
 3794 0173 4963C7   		movslq	%r15d, %rax
 3795 0176 440FB684 		movzbl	1072(%rsp,%rax), %r8d
 3795      04300400 
 3795      00
 375:fltk-1.3.4-1/jpeg/jdhuff.c ****       code++;
 3796              		.loc 1 375 0
 3797 017f 4963C7   		movslq	%r15d, %rax
 374:fltk-1.3.4-1/jpeg/jdhuff.c ****       huffcode[p++] = code;
 3798              		.loc 1 374 0
 3799 0182 4439C1   		cmpl	%r8d, %ecx
 3800 0185 4489C6   		movl	%r8d, %esi
 3801 0188 74DE     		je	.L443
 381:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 3802              		.loc 1 381 0
 3803 018a 4C89CF   		movq	%r9, %rdi
 3804 018d 89D0     		movl	%edx, %eax
 3805 018f 48D3E7   		salq	%cl, %rdi
 3806 0192 4839F8   		cmpq	%rdi, %rax
 3807 0195 0F8DBA01 		jge	.L460
 3807      0000
 3808              	.LVL574:
 3809              	.L444:
 383:fltk-1.3.4-1/jpeg/jdhuff.c ****     si++;
 3810              		.loc 1 383 0
 3811 019b 01D2     		addl	%edx, %edx
 3812              	.LVL575:
 384:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 3813              		.loc 1 384 0
 3814 019d 83C101   		addl	$1, %ecx
 3815              	.LVL576:
 373:fltk-1.3.4-1/jpeg/jdhuff.c ****     while (((int) huffsize[p]) == si) {
 3816              		.loc 1 373 0
 3817 01a0 4084F6   		testb	%sil, %sil
 3818 01a3 75B2     		jne	.L442
 3819              	.LVL577:
 3820              	.L441:
 3821 01a5 488D5308 		leaq	8(%rbx), %rdx
 3822 01a9 4C8D7D11 		leaq	17(%rbp), %r15
 384:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 3823              		.loc 1 384 0
 3824 01ad 4C89E8   		movq	%r13, %rax
 3825 01b0 31C9     		xorl	%ecx, %ecx
 3826              	.LVL578:
 3827 01b2 EB36     		jmp	.L449
 3828              	.LVL579:
 3829              		.p2align 4,,10
 3830 01b4 0F1F4000 		.p2align 3
 3831              	.L487:
 395:fltk-1.3.4-1/jpeg/jdhuff.c ****       p += htbl->bits[l];
 3832              		.loc 1 395 0
 3833 01b8 4863F1   		movslq	%ecx, %rsi
 3834 01bb 4883C001 		addq	$1, %rax
 3835 01bf 4883C208 		addq	$8, %rdx
 3836 01c3 8B7CB420 		movl	32(%rsp,%rsi,4), %edi
 3837 01c7 4829FE   		subq	%rdi, %rsi
 3838 01ca 4889B288 		movq	%rsi, 136(%rdx)
 3838      000000
 396:fltk-1.3.4-1/jpeg/jdhuff.c ****       dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 3839              		.loc 1 396 0
 3840 01d1 0FB670FF 		movzbl	-1(%rax), %esi
 3841 01d5 01F1     		addl	%esi, %ecx
 3842              	.LVL580:
 397:fltk-1.3.4-1/jpeg/jdhuff.c ****     } else {
 3843              		.loc 1 397 0
 3844 01d7 8D71FF   		leal	-1(%rcx), %esi
 3845 01da 4863F6   		movslq	%esi, %rsi
 3846 01dd 8B7CB420 		movl	32(%rsp,%rsi,4), %edi
 3847 01e1 48897AF8 		movq	%rdi, -8(%rdx)
 390:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (htbl->bits[l]) {
 3848              		.loc 1 390 0
 3849 01e5 4C39F8   		cmpq	%r15, %rax
 3850 01e8 7419     		je	.L486
 3851              	.LVL581:
 3852              	.L449:
 391:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* valoffset[l] = huffval[] index of 1st symbol of code length l,
 3853              		.loc 1 391 0
 3854 01ea 803800   		cmpb	$0, (%rax)
 3855 01ed 75C9     		jne	.L487
 3856 01ef 4883C001 		addq	$1, %rax
 399:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 3857              		.loc 1 399 0
 3858 01f3 48C702FF 		movq	$-1, (%rdx)
 3858      FFFFFF
 3859 01fa 4883C208 		addq	$8, %rdx
 390:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (htbl->bits[l]) {
 3860              		.loc 1 390 0
 3861 01fe 4C39F8   		cmpq	%r15, %rax
 3862 0201 75E7     		jne	.L449
 3863              	.L486:
 3864              	.LBB46:
 3865              	.LBB47:
 3866              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string3.h"
   1:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* Copyright (C) 2004-2016 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string3.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string3.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string3.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string3.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string3.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string3.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string3.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string3.h ****    <http://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef _STRING_H
  19:/usr/include/x86_64-linux-gnu/bits/string3.h **** # error "Never use <bits/string3.h> directly; include <string.h> instead."
  20:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  21:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  22:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  23:/usr/include/x86_64-linux-gnu/bits/string3.h **** __warndecl (__warn_memset_zero_len,
  24:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  25:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  26:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  27:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef __cplusplus
  28:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* XXX This is temporarily.  We should not redefine any of the symbols
  29:/usr/include/x86_64-linux-gnu/bits/string3.h ****    and instead integrate the error checking into the original
  30:/usr/include/x86_64-linux-gnu/bits/string3.h ****    definitions.  */
  31:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memcpy
  32:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memmove
  33:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memset
  34:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcat
  35:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcpy
  36:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncat
  37:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncpy
  38:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_GNU
  39:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef mempcpy
  40:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef stpcpy
  41:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  42:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_MISC
  43:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bcopy
  44:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bzero
  45:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  46:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  47:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  48:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  49:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  50:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  51:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	       size_t __len))
  52:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  53:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  54:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  55:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  56:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  57:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memmove (void *__dest, const void *__src, size_t __len))
  58:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  59:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  60:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  61:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  62:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifdef __USE_GNU
  63:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  64:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
  65:/usr/include/x86_64-linux-gnu/bits/string3.h **** 		size_t __len))
  66:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  67:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
  68:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  69:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  70:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  71:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  72:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* The first two tests here help to catch a somewhat common problem
  73:/usr/include/x86_64-linux-gnu/bits/string3.h ****    where the second and third parameter are transposed.  This is
  74:/usr/include/x86_64-linux-gnu/bits/string3.h ****    especially problematic if the intended fill value is zero.  In this
  75:/usr/include/x86_64-linux-gnu/bits/string3.h ****    case no work is done at all.  We detect these problems by referring
  76:/usr/include/x86_64-linux-gnu/bits/string3.h ****    non-existing functions.  */
  77:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  78:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memset (void *__dest, int __ch, size_t __len))
  79:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  80:/usr/include/x86_64-linux-gnu/bits/string3.h ****   /* GCC-5.0 and newer implements these checks in the compiler, so we don't
  81:/usr/include/x86_64-linux-gnu/bits/string3.h ****      need them here.  */
  82:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  83:/usr/include/x86_64-linux-gnu/bits/string3.h ****   if (__builtin_constant_p (__len) && __len == 0
  84:/usr/include/x86_64-linux-gnu/bits/string3.h ****       && (!__builtin_constant_p (__ch) || __ch != 0))
  85:/usr/include/x86_64-linux-gnu/bits/string3.h ****     {
  86:/usr/include/x86_64-linux-gnu/bits/string3.h ****       __warn_memset_zero_len ();
  87:/usr/include/x86_64-linux-gnu/bits/string3.h ****       return __dest;
  88:/usr/include/x86_64-linux-gnu/bits/string3.h ****     }
  89:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  90:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 3867              		.loc 2 90 0
 3868 0203 488DBB28 		leaq	296(%rbx), %rdi
 3868      010000
 3869 020a 89D8     		movl	%ebx, %eax
 3870              	.LBE47:
 3871              	.LBE46:
 402:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3872              		.loc 1 402 0
 3873 020c 48C78388 		movq	$1048575, 136(%rbx)
 3873      000000FF 
 3873      FF0F00
 3874              	.LVL582:
 3875              	.LBB51:
 3876              	.LBB48:
 3877              		.loc 2 90 0
 3878 0217 48C78320 		movq	$0, 288(%rbx)
 3878      01000000 
 3878      000000
 3879              	.LVL583:
 3880 0222 48C78318 		movq	$0, 1304(%rbx)
 3880      05000000 
 3880      000000
 3881              	.LBE48:
 3882              	.LBE51:
 414:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 3883              		.loc 1 414 0
 3884 022d 41B80100 		movl	$1, %r8d
 3884      0000
 3885              	.LBB52:
 3886              	.LBB49:
 3887              		.loc 2 90 0
 3888 0233 4883E7F8 		andq	$-8, %rdi
 3889              	.LBE49:
 3890              	.LBE52:
 413:fltk-1.3.4-1/jpeg/jdhuff.c ****   for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 3891              		.loc 1 413 0
 3892 0237 4531C9   		xorl	%r9d, %r9d
 3893              	.LBB53:
 3894              	.LBB50:
 3895              		.loc 2 90 0
 3896 023a 29F8     		subl	%edi, %eax
 3897 023c 8D882005 		leal	1312(%rax), %ecx
 3897      0000
 3898              	.LVL584:
 3899 0242 31C0     		xorl	%eax, %eax
 3900 0244 C1E903   		shrl	$3, %ecx
 3901 0247 F348AB   		rep stosq
 3902              	.LVL585:
 3903              	.L450:
 3904              	.LBE50:
 3905              	.LBE53:
 415:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* l = current code's length, p = its index in huffcode[] & huffval[]. */
 3906              		.loc 1 415 0
 3907 024a 41807D00 		cmpb	$0, 0(%r13)
 3907      00
 3908 024f 7462     		je	.L454
 3909 0251 B9080000 		movl	$8, %ecx
 3909      00
 3910 0256 41BB0100 		movl	$1, %r11d
 3910      0000
 3911 025c 41BA0100 		movl	$1, %r10d
 3911      0000
 3912 0262 4429C1   		subl	%r8d, %ecx
 3913 0265 41D3E3   		sall	%cl, %r11d
 3914              	.LVL586:
 3915 0268 0F1F8400 		.p2align 4,,10
 3915      00000000 
 3916              		.p2align 3
 3917              	.L452:
 418:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 3918              		.loc 1 418 0
 3919 0270 4963F1   		movslq	%r9d, %rsi
 3920 0273 890C24   		movl	%ecx, (%rsp)
 3921 0276 8B44B420 		movl	32(%rsp,%rsi,4), %eax
 3922 027a D3E0     		sall	%cl, %eax
 3923              	.LVL587:
 3924 027c 418D3C03 		leal	(%r11,%rax), %edi
 3925              	.LVL588:
 3926              		.p2align 4,,10
 3927              		.p2align 3
 3928              	.L451:
 420:fltk-1.3.4-1/jpeg/jdhuff.c **** 	dtbl->look_sym[lookbits] = htbl->huffval[p];
 3929              		.loc 1 420 0 discriminator 3
 3930 0280 4863D0   		movslq	%eax, %rdx
 422:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 3931              		.loc 1 422 0 discriminator 3
 3932 0283 83C001   		addl	$1, %eax
 3933              	.LVL589:
 420:fltk-1.3.4-1/jpeg/jdhuff.c **** 	dtbl->look_sym[lookbits] = htbl->huffval[p];
 3934              		.loc 1 420 0 discriminator 3
 3935 0286 44898493 		movl	%r8d, 288(%rbx,%rdx,4)
 3935      20010000 
 421:fltk-1.3.4-1/jpeg/jdhuff.c **** 	lookbits++;
 3936              		.loc 1 421 0 discriminator 3
 3937 028e 0FB64C35 		movzbl	17(%rbp,%rsi), %ecx
 3937      11
 419:fltk-1.3.4-1/jpeg/jdhuff.c **** 	dtbl->look_nbits[lookbits] = l;
 3938              		.loc 1 419 0 discriminator 3
 3939 0293 39C7     		cmpl	%eax, %edi
 421:fltk-1.3.4-1/jpeg/jdhuff.c **** 	lookbits++;
 3940              		.loc 1 421 0 discriminator 3
 3941 0295 888C1320 		movb	%cl, 1312(%rbx,%rdx)
 3941      050000
 419:fltk-1.3.4-1/jpeg/jdhuff.c **** 	dtbl->look_nbits[lookbits] = l;
 3942              		.loc 1 419 0 discriminator 3
 3943 029c 75E2     		jne	.L451
 415:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* l = current code's length, p = its index in huffcode[] & huffval[]. */
 3944              		.loc 1 415 0 discriminator 2
 3945 029e 410FB645 		movzbl	0(%r13), %eax
 3945      00
 3946              	.LVL590:
 3947 02a3 4183C201 		addl	$1, %r10d
 3948              	.LVL591:
 3949 02a7 4183C101 		addl	$1, %r9d
 3950              	.LVL592:
 3951 02ab 8B0C24   		movl	(%rsp), %ecx
 3952 02ae 4439D0   		cmpl	%r10d, %eax
 3953 02b1 7DBD     		jge	.L452
 3954              	.LVL593:
 3955              	.L454:
 414:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 3956              		.loc 1 414 0 discriminator 2
 3957 02b3 4183C001 		addl	$1, %r8d
 3958              	.LVL594:
 3959 02b7 4983C501 		addq	$1, %r13
 3960 02bb 4183F809 		cmpl	$9, %r8d
 3961 02bf 7589     		jne	.L450
 433:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (i = 0; i < numsymbols; i++) {
 3962              		.loc 1 433 0
 3963 02c1 8B44240C 		movl	12(%rsp), %eax
 3964 02c5 85C0     		testl	%eax, %eax
 3965 02c7 7443     		je	.L431
 3966              	.LVL595:
 434:fltk-1.3.4-1/jpeg/jdhuff.c ****       int sym = htbl->huffval[i];
 3967              		.loc 1 434 0 discriminator 1
 3968 02c9 4585F6   		testl	%r14d, %r14d
 3969 02cc 743E     		je	.L431
 3970 02ce 418D46FF 		leal	-1(%r14), %eax
 3971 02d2 488D5C05 		leaq	18(%rbp,%rax), %rbx
 3971      12
 3972 02d7 EB10     		jmp	.L458
 3973              	.LVL596:
 3974 02d9 0F1F8000 		.p2align 4,,10
 3974      000000
 3975              		.p2align 3
 3976              	.L457:
 3977 02e0 4983C701 		addq	$1, %r15
 3978              	.LVL597:
 434:fltk-1.3.4-1/jpeg/jdhuff.c ****       int sym = htbl->huffval[i];
 3979              		.loc 1 434 0 is_stmt 0 discriminator 2
 3980 02e4 4C39FB   		cmpq	%r15, %rbx
 3981 02e7 7423     		je	.L431
 3982              	.LVL598:
 3983              	.L458:
 3984              	.LBB54:
 436:fltk-1.3.4-1/jpeg/jdhuff.c **** 	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 3985              		.loc 1 436 0 is_stmt 1
 3986 02e9 41803F0F 		cmpb	$15, (%r15)
 3987 02ed 76F1     		jbe	.L457
 437:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 3988              		.loc 1 437 0
 3989 02ef 498B0424 		movq	(%r12), %rax
 3990 02f3 4983C701 		addq	$1, %r15
 3991              	.LVL599:
 3992 02f7 4C89E7   		movq	%r12, %rdi
 3993 02fa C7402809 		movl	$9, 40(%rax)
 3993      000000
 3994              	.LVL600:
 3995 0301 498B0424 		movq	(%r12), %rax
 3996 0305 FF10     		call	*(%rax)
 3997              	.LVL601:
 3998              	.LBE54:
 434:fltk-1.3.4-1/jpeg/jdhuff.c ****       int sym = htbl->huffval[i];
 3999              		.loc 1 434 0
 4000 0307 4C39FB   		cmpq	%r15, %rbx
 4001 030a 75DD     		jne	.L458
 4002              	.L431:
 440:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4003              		.loc 1 440 0
 4004 030c 488B8424 		movq	1336(%rsp), %rax
 4004      38050000 
 4005 0314 64483304 		xorq	%fs:40, %rax
 4005      25280000 
 4005      00
 4006 031d 757B     		jne	.L488
 4007 031f 4881C448 		addq	$1352, %rsp
 4007      050000
 4008              		.cfi_remember_state
 4009              		.cfi_def_cfa_offset 56
 4010 0326 5B       		popq	%rbx
 4011              		.cfi_def_cfa_offset 48
 4012 0327 5D       		popq	%rbp
 4013              		.cfi_def_cfa_offset 40
 4014 0328 415C     		popq	%r12
 4015              		.cfi_def_cfa_offset 32
 4016              	.LVL602:
 4017 032a 415D     		popq	%r13
 4018              		.cfi_def_cfa_offset 24
 4019 032c 415E     		popq	%r14
 4020              		.cfi_def_cfa_offset 16
 4021              	.LVL603:
 4022 032e 415F     		popq	%r15
 4023              		.cfi_def_cfa_offset 8
 4024 0330 C3       		ret
 4025              	.LVL604:
 4026              	.L433:
 4027              		.cfi_restore_state
 342:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (htbl == NULL)
 4028              		.loc 1 342 0 discriminator 2
 4029 0331 498BACC4 		movq	264(%r12,%rax,8), %rbp
 4029      08010000 
 4030 0339 E923FDFF 		jmp	.L434
 4030      FF
 4031              	.LVL605:
 4032              	.L485:
 381:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 4033              		.loc 1 381 0
 4034 033e 4C89CF   		movq	%r9, %rdi
 4035 0341 89D0     		movl	%edx, %eax
 4036 0343 48D3E7   		salq	%cl, %rdi
 4037 0346 4839F8   		cmpq	%rdi, %rax
 4038 0349 7D0A     		jge	.L460
 383:fltk-1.3.4-1/jpeg/jdhuff.c ****     si++;
 4039              		.loc 1 383 0
 4040 034b 01D2     		addl	%edx, %edx
 4041              	.LVL606:
 384:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 4042              		.loc 1 384 0
 4043 034d 83C101   		addl	$1, %ecx
 4044              	.LVL607:
 4045 0350 E902FEFF 		jmp	.L442
 4045      FF
 4046              	.L460:
 382:fltk-1.3.4-1/jpeg/jdhuff.c ****     code <<= 1;
 4047              		.loc 1 382 0
 4048 0355 498B0424 		movq	(%r12), %rax
 4049 0359 44894424 		movl	%r8d, 28(%rsp)
 4049      1C
 4050 035e 4C89E7   		movq	%r12, %rdi
 4051 0361 40887424 		movb	%sil, 27(%rsp)
 4051      1B
 4052 0366 89542414 		movl	%edx, 20(%rsp)
 4053 036a 894C2410 		movl	%ecx, 16(%rsp)
 4054 036e 4C890C24 		movq	%r9, (%rsp)
 4055 0372 C7402809 		movl	$9, 40(%rax)
 4055      000000
 4056 0379 498B0424 		movq	(%r12), %rax
 4057 037d FF10     		call	*(%rax)
 4058              	.LVL608:
 4059 037f 448B4424 		movl	28(%rsp), %r8d
 4059      1C
 4060 0384 0FB67424 		movzbl	27(%rsp), %esi
 4060      1B
 4061 0389 8B542414 		movl	20(%rsp), %edx
 4062 038d 8B4C2410 		movl	16(%rsp), %ecx
 4063 0391 4C8B0C24 		movq	(%rsp), %r9
 4064 0395 E901FEFF 		jmp	.L444
 4064      FF
 4065              	.LVL609:
 4066              	.L488:
 440:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4067              		.loc 1 440 0
 4068 039a E8000000 		call	__stack_chk_fail
 4068      00
 4069              	.LVL610:
 4070              		.cfi_endproc
 4071              	.LFE61:
 4073              		.section	.text.unlikely.jpeg_make_d_derived_tbl
 4074              	.LCOLDE10:
 4075              		.section	.text.jpeg_make_d_derived_tbl
 4076              	.LHOTE10:
 4077              		.section	.text.unlikely.start_pass_huff_decoder,"ax",@progbits
 4078              	.LCOLDB11:
 4079              		.section	.text.start_pass_huff_decoder,"ax",@progbits
 4080              	.LHOTB11:
 4081              		.p2align 4,,15
 4083              	start_pass_huff_decoder:
 4084              	.LFB72:
1315:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1316:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1317:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
1318:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Initialize for a Huffman-compressed scan.
1319:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
1320:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1321:fltk-1.3.4-1/jpeg/jdhuff.c **** METHODDEF(void)
1322:fltk-1.3.4-1/jpeg/jdhuff.c **** start_pass_huff_decoder (j_decompress_ptr cinfo)
1323:fltk-1.3.4-1/jpeg/jdhuff.c **** {
 4085              		.loc 1 1323 0
 4086              		.cfi_startproc
 4087              	.LVL611:
 4088 0000 4157     		pushq	%r15
 4089              		.cfi_def_cfa_offset 16
 4090              		.cfi_offset 15, -16
 4091 0002 4156     		pushq	%r14
 4092              		.cfi_def_cfa_offset 24
 4093              		.cfi_offset 14, -24
 4094 0004 4155     		pushq	%r13
 4095              		.cfi_def_cfa_offset 32
 4096              		.cfi_offset 13, -32
 4097 0006 4154     		pushq	%r12
 4098              		.cfi_def_cfa_offset 40
 4099              		.cfi_offset 12, -40
 4100 0008 55       		pushq	%rbp
 4101              		.cfi_def_cfa_offset 48
 4102              		.cfi_offset 6, -48
 4103 0009 53       		pushq	%rbx
 4104              		.cfi_def_cfa_offset 56
 4105              		.cfi_offset 3, -56
 4106 000a 4889FB   		movq	%rdi, %rbx
 4107 000d 4883EC18 		subq	$24, %rsp
 4108              		.cfi_def_cfa_offset 80
1324:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
1325:fltk-1.3.4-1/jpeg/jdhuff.c ****   int ci, blkn, tbl, i;
1326:fltk-1.3.4-1/jpeg/jdhuff.c ****   jpeg_component_info * compptr;
1327:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1328:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (cinfo->progressive_mode) {
 4109              		.loc 1 1328 0
 4110 0011 8B973C01 		movl	316(%rdi), %edx
 4110      0000
1324:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 4111              		.loc 1 1324 0
 4112 0017 488BAF70 		movq	624(%rdi), %rbp
 4112      020000
 4113              	.LVL612:
 4114              		.loc 1 1328 0
 4115 001e 85D2     		testl	%edx, %edx
 4116 0020 0F84EA01 		je	.L490
 4116      0000
1329:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Validate progressive scan parameters */
1330:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (cinfo->Ss == 0) {
 4117              		.loc 1 1330 0
 4118 0026 8B8F1C02 		movl	540(%rdi), %ecx
 4118      0000
 4119 002c 85C9     		testl	%ecx, %ecx
 4120 002e 0F852C03 		jne	.L491
 4120      0000
1331:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (cinfo->Se != 0)
 4121              		.loc 1 1331 0
 4122 0034 8B872002 		movl	544(%rdi), %eax
 4122      0000
 4123 003a 85C0     		testl	%eax, %eax
 4124 003c 0F844503 		je	.L493
 4124      0000
 4125              	.L492:
1332:fltk-1.3.4-1/jpeg/jdhuff.c **** 	goto bad;
1333:fltk-1.3.4-1/jpeg/jdhuff.c ****     } else {
1334:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* need not check Ss/Se < 0 since they came from unsigned bytes */
1335:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
1336:fltk-1.3.4-1/jpeg/jdhuff.c **** 	goto bad;
1337:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* AC scans may have only one component */
1338:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (cinfo->comps_in_scan != 1)
1339:fltk-1.3.4-1/jpeg/jdhuff.c **** 	goto bad;
1340:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1341:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (cinfo->Ah != 0) {
1342:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Successive approximation refinement scan: must have Al = Ah-1. */
1343:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (cinfo->Ah-1 != cinfo->Al)
1344:fltk-1.3.4-1/jpeg/jdhuff.c **** 	goto bad;
1345:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1346:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (cinfo->Al > 13) {	/* need not check for < 0 */
1347:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Arguably the maximum Al value should be less than 13 for 8-bit precision,
1348:fltk-1.3.4-1/jpeg/jdhuff.c ****        * but the spec doesn't say so, and we try to be liberal about what we
1349:fltk-1.3.4-1/jpeg/jdhuff.c ****        * accept.  Note: large Al values could result in out-of-range DC
1350:fltk-1.3.4-1/jpeg/jdhuff.c ****        * coefficients during early scans, leading to bizarre displays due to
1351:fltk-1.3.4-1/jpeg/jdhuff.c ****        * overflows in the IDCT math.  But we won't crash.
1352:fltk-1.3.4-1/jpeg/jdhuff.c ****        */
1353:fltk-1.3.4-1/jpeg/jdhuff.c ****       bad:
1354:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 4126              		.loc 1 1354 0
 4127 0042 488B03   		movq	(%rbx), %rax
 4128 0045 4889DF   		movq	%rbx, %rdi
 4129              	.LVL613:
 4130 0048 C7402811 		movl	$17, 40(%rax)
 4130      000000
 4131 004f 488B03   		movq	(%rbx), %rax
 4132 0052 8B931C02 		movl	540(%rbx), %edx
 4132      0000
 4133 0058 89502C   		movl	%edx, 44(%rax)
 4134 005b 488B03   		movq	(%rbx), %rax
 4135 005e 8B932002 		movl	544(%rbx), %edx
 4135      0000
 4136 0064 895030   		movl	%edx, 48(%rax)
 4137 0067 488B03   		movq	(%rbx), %rax
 4138 006a 8B932402 		movl	548(%rbx), %edx
 4138      0000
 4139 0070 895034   		movl	%edx, 52(%rax)
 4140 0073 488B03   		movq	(%rbx), %rax
 4141 0076 8B932802 		movl	552(%rbx), %edx
 4141      0000
 4142 007c 895038   		movl	%edx, 56(%rax)
 4143 007f 488B03   		movq	(%rbx), %rax
 4144 0082 FF10     		call	*(%rax)
 4145              	.LVL614:
 4146 0084 8B8B1C02 		movl	540(%rbx), %ecx
 4146      0000
 4147              	.L496:
 4148              	.LVL615:
1355:fltk-1.3.4-1/jpeg/jdhuff.c **** 	       cinfo->Ss, cinfo->Se, cinfo->Ah, cinfo->Al);
1356:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1357:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Update progression status, and verify that scan order is legal.
1358:fltk-1.3.4-1/jpeg/jdhuff.c ****      * Note that inter-scan inconsistencies are treated as warnings
1359:fltk-1.3.4-1/jpeg/jdhuff.c ****      * not fatal errors ... not clear if this is right way to behave.
1360:fltk-1.3.4-1/jpeg/jdhuff.c ****      */
1361:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 4149              		.loc 1 1361 0 discriminator 1
 4150 008a 8B83C001 		movl	448(%rbx), %eax
 4150      0000
 4151 0090 85C0     		testl	%eax, %eax
 4152 0092 0F8ECE00 		jle	.L497
 4152      0000
 4153 0098 488D83C8 		leaq	456(%rbx), %rax
 4153      010000
 4154              		.loc 1 1361 0 is_stmt 0
 4155 009f C7442404 		movl	$0, 4(%rsp)
 4155      00000000 
 4156              	.LBB55:
 4157              	.LBB56:
1362:fltk-1.3.4-1/jpeg/jdhuff.c ****       int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
1363:fltk-1.3.4-1/jpeg/jdhuff.c ****       int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
1364:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
1365:fltk-1.3.4-1/jpeg/jdhuff.c **** 	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
1366:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
1367:fltk-1.3.4-1/jpeg/jdhuff.c **** 	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
1368:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (cinfo->Ah != expected)
 4158              		.loc 1 1368 0 is_stmt 1
 4159 00a7 4531E4   		xorl	%r12d, %r12d
 4160 00aa 48896C24 		movq	%rbp, 8(%rsp)
 4160      08
 4161 00af 4989C6   		movq	%rax, %r14
 4162              	.LVL616:
 4163              	.L502:
 4164              	.LBE56:
1362:fltk-1.3.4-1/jpeg/jdhuff.c ****       int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 4165              		.loc 1 1362 0
 4166 00b2 498B06   		movq	(%r14), %rax
 4167 00b5 31ED     		xorl	%ebp, %ebp
 4168 00b7 48634004 		movslq	4(%rax), %rax
 4169 00bb 4989C5   		movq	%rax, %r13
 4170              	.LVL617:
1363:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 4171              		.loc 1 1363 0
 4172 00be 48C1E008 		salq	$8, %rax
 4173              	.LVL618:
 4174 00c2 480383C0 		addq	192(%rbx), %rax
 4174      000000
1364:fltk-1.3.4-1/jpeg/jdhuff.c **** 	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 4175              		.loc 1 1364 0
 4176 00c9 85C9     		testl	%ecx, %ecx
1363:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 4177              		.loc 1 1363 0
 4178 00cb 4989C7   		movq	%rax, %r15
 4179              	.LVL619:
1364:fltk-1.3.4-1/jpeg/jdhuff.c **** 	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 4180              		.loc 1 1364 0
 4181 00ce 740C     		je	.L498
1364:fltk-1.3.4-1/jpeg/jdhuff.c **** 	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 4182              		.loc 1 1364 0 is_stmt 0 discriminator 1
 4183 00d0 8B00     		movl	(%rax), %eax
 4184              	.LVL620:
 4185 00d2 89CD     		movl	%ecx, %ebp
 4186 00d4 85C0     		testl	%eax, %eax
 4187 00d6 0F885B05 		js	.L580
 4187      0000
 4188              	.L498:
 4189              	.LVL621:
1366:fltk-1.3.4-1/jpeg/jdhuff.c **** 	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 4190              		.loc 1 1366 0 is_stmt 1
 4191 00dc 39AB2002 		cmpl	%ebp, 544(%rbx)
 4191      0000
 4192 00e2 0F8C4805 		jl	.L553
 4192      0000
 4193 00e8 4863CD   		movslq	%ebp, %rcx
 4194 00eb 4D8D3C8F 		leaq	(%r15,%rcx,4), %r15
 4195              	.LVL622:
 4196 00ef 90       		.p2align 4,,10
 4197              		.p2align 3
 4198              	.L501:
 4199              	.LBB57:
 4200              		.loc 1 1368 0
 4201 00f0 418B07   		movl	(%r15), %eax
 4202 00f3 4489E1   		movl	%r12d, %ecx
 4203 00f6 85C0     		testl	%eax, %eax
 4204 00f8 410F490F 		cmovns	(%r15), %ecx
 4205 00fc 3B8B2402 		cmpl	548(%rbx), %ecx
 4205      0000
 4206 0102 7425     		je	.L500
1369:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 4207              		.loc 1 1369 0
 4208 0104 488B0B   		movq	(%rbx), %rcx
 4209 0107 BEFFFFFF 		movl	$-1, %esi
 4209      FF
 4210 010c 4889DF   		movq	%rbx, %rdi
 4211 010f C7412876 		movl	$118, 40(%rcx)
 4211      000000
 4212              	.LVL623:
 4213 0116 488B0B   		movq	(%rbx), %rcx
 4214 0119 4489692C 		movl	%r13d, 44(%rcx)
 4215 011d 488B0B   		movq	(%rbx), %rcx
 4216 0120 896930   		movl	%ebp, 48(%rcx)
 4217 0123 488B0B   		movq	(%rbx), %rcx
 4218 0126 FF5108   		call	*8(%rcx)
 4219              	.LVL624:
 4220              	.L500:
1370:fltk-1.3.4-1/jpeg/jdhuff.c **** 	coef_bit_ptr[coefi] = cinfo->Al;
 4221              		.loc 1 1370 0 discriminator 2
 4222 0129 8B8B2802 		movl	552(%rbx), %ecx
 4222      0000
 4223              	.LBE57:
1366:fltk-1.3.4-1/jpeg/jdhuff.c **** 	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 4224              		.loc 1 1366 0 discriminator 2
 4225 012f 83C501   		addl	$1, %ebp
 4226              	.LVL625:
 4227 0132 4983C704 		addq	$4, %r15
 4228              	.LBB58:
 4229              		.loc 1 1370 0 discriminator 2
 4230 0136 41894FFC 		movl	%ecx, -4(%r15)
 4231              	.LBE58:
1366:fltk-1.3.4-1/jpeg/jdhuff.c **** 	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 4232              		.loc 1 1366 0 discriminator 2
 4233 013a 39AB2002 		cmpl	%ebp, 544(%rbx)
 4233      0000
 4234 0140 7DAE     		jge	.L501
 4235 0142 8B8B1C02 		movl	540(%rbx), %ecx
 4235      0000
 4236              	.LVL626:
 4237              	.L499:
 4238              	.LBE55:
1361:fltk-1.3.4-1/jpeg/jdhuff.c ****       int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 4239              		.loc 1 1361 0 discriminator 2
 4240 0148 83442404 		addl	$1, 4(%rsp)
 4240      01
 4241              	.LVL627:
 4242 014d 4983C608 		addq	$8, %r14
 4243 0151 8B442404 		movl	4(%rsp), %eax
 4244              	.LVL628:
 4245 0155 3983C001 		cmpl	%eax, 448(%rbx)
 4245      0000
 4246 015b 0F8F51FF 		jg	.L502
 4246      FFFF
 4247 0161 488B6C24 		movq	8(%rsp), %rbp
 4247      08
 4248              	.LVL629:
 4249              	.L497:
1371:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
1372:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1373:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1374:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Select MCU decoding routine */
1375:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (cinfo->Ah == 0) {
 4250              		.loc 1 1375 0
 4251 0166 8B832402 		movl	548(%rbx), %eax
 4251      0000
 4252 016c 85C0     		testl	%eax, %eax
 4253 016e 0F856C04 		jne	.L503
 4253      0000
1376:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (cinfo->Ss == 0)
1377:fltk-1.3.4-1/jpeg/jdhuff.c **** 	entropy->pub.decode_mcu = decode_mcu_DC_first;
 4254              		.loc 1 1377 0
 4255 0174 85C9     		testl	%ecx, %ecx
 4256 0176 BA000000 		movl	$decode_mcu_DC_first, %edx
 4256      00
 4257 017b B8000000 		movl	$decode_mcu_AC_first, %eax
 4257      00
 4258 0180 480F44C2 		cmove	%rdx, %rax
 4259 0184 48894508 		movq	%rax, 8(%rbp)
 4260              	.L505:
 4261              	.LVL630:
1378:fltk-1.3.4-1/jpeg/jdhuff.c ****       else
1379:fltk-1.3.4-1/jpeg/jdhuff.c **** 	entropy->pub.decode_mcu = decode_mcu_AC_first;
1380:fltk-1.3.4-1/jpeg/jdhuff.c ****     } else {
1381:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (cinfo->Ss == 0)
1382:fltk-1.3.4-1/jpeg/jdhuff.c **** 	entropy->pub.decode_mcu = decode_mcu_DC_refine;
1383:fltk-1.3.4-1/jpeg/jdhuff.c ****       else
1384:fltk-1.3.4-1/jpeg/jdhuff.c **** 	entropy->pub.decode_mcu = decode_mcu_AC_refine;
1385:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1386:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1387:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 4262              		.loc 1 1387 0 discriminator 1
 4263 0188 8B83C001 		movl	448(%rbx), %eax
 4263      0000
 4264 018e 4531E4   		xorl	%r12d, %r12d
 4265 0191 4531ED   		xorl	%r13d, %r13d
 4266 0194 85C0     		testl	%eax, %eax
 4267 0196 7F36     		jg	.L568
 4268 0198 E9130400 		jmp	.L512
 4268      00
 4269              	.LVL631:
 4270 019d 0F1F00   		.p2align 4,,10
 4271              		.p2align 3
 4272              	.L582:
1388:fltk-1.3.4-1/jpeg/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
1389:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Make sure requested tables are present, and compute derived tables.
1390:fltk-1.3.4-1/jpeg/jdhuff.c ****        * We may build same derived table more than once, but it's not expensive.
1391:fltk-1.3.4-1/jpeg/jdhuff.c ****        */
1392:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (cinfo->Ss == 0) {
1393:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
 4273              		.loc 1 1393 0
 4274 01a0 448BB324 		movl	548(%rbx), %r14d
 4274      020000
 4275 01a7 4585F6   		testl	%r14d, %r14d
 4276 01aa 0F841004 		je	.L581
 4276      0000
 4277              	.LVL632:
 4278              	.L510:
1394:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  tbl = compptr->dc_tbl_no;
1395:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
1396:fltk-1.3.4-1/jpeg/jdhuff.c **** 				  & entropy->derived_tbls[tbl]);
1397:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
1398:fltk-1.3.4-1/jpeg/jdhuff.c ****       } else {
1399:fltk-1.3.4-1/jpeg/jdhuff.c **** 	tbl = compptr->ac_tbl_no;
1400:fltk-1.3.4-1/jpeg/jdhuff.c **** 	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
1401:fltk-1.3.4-1/jpeg/jdhuff.c **** 				& entropy->derived_tbls[tbl]);
1402:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* remember the single active table */
1403:fltk-1.3.4-1/jpeg/jdhuff.c **** 	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
1404:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
1405:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Initialize DC predictions to 0 */
1406:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->saved.last_dc_val[ci] = 0;
 4279              		.loc 1 1406 0 discriminator 2
 4280 01b0 42C74425 		movl	$0, 44(%rbp,%r12)
 4280      2C000000 
 4280      00
1387:fltk-1.3.4-1/jpeg/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 4281              		.loc 1 1387 0 discriminator 2
 4282 01b9 4183C501 		addl	$1, %r13d
 4283              	.LVL633:
 4284 01bd 4983C404 		addq	$4, %r12
 4285 01c1 4439ABC0 		cmpl	%r13d, 448(%rbx)
 4285      010000
 4286 01c8 0F8EE203 		jle	.L512
 4286      0000
 4287              	.LVL634:
 4288              	.L568:
1392:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
 4289              		.loc 1 1392 0
 4290 01ce 448BBB1C 		movl	540(%rbx), %r15d
 4290      020000
1388:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Make sure requested tables are present, and compute derived tables.
 4291              		.loc 1 1388 0
 4292 01d5 4A8B8463 		movq	456(%rbx,%r12,2), %rax
 4292      C8010000 
 4293              	.LVL635:
1392:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
 4294              		.loc 1 1392 0
 4295 01dd 4585FF   		testl	%r15d, %r15d
 4296 01e0 74BE     		je	.L582
1399:fltk-1.3.4-1/jpeg/jdhuff.c **** 	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 4297              		.loc 1 1399 0
 4298 01e2 4C637018 		movslq	24(%rax), %r14
1400:fltk-1.3.4-1/jpeg/jdhuff.c **** 				& entropy->derived_tbls[tbl]);
 4299              		.loc 1 1400 0
 4300 01e6 31F6     		xorl	%esi, %esi
 4301 01e8 4889DF   		movq	%rbx, %rdi
1399:fltk-1.3.4-1/jpeg/jdhuff.c **** 	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 4302              		.loc 1 1399 0
 4303 01eb 4C89F2   		movq	%r14, %rdx
 4304              	.LVL636:
1400:fltk-1.3.4-1/jpeg/jdhuff.c **** 				& entropy->derived_tbls[tbl]);
 4305              		.loc 1 1400 0
 4306 01ee 4983C608 		addq	$8, %r14
 4307              	.LVL637:
 4308 01f2 4A8D4CF5 		leaq	8(%rbp,%r14,8), %rcx
 4308      08
 4309 01f7 E8000000 		call	jpeg_make_d_derived_tbl
 4309      00
 4310              	.LVL638:
1403:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 4311              		.loc 1 1403 0
 4312 01fc 4A8B44F5 		movq	8(%rbp,%r14,8), %rax
 4312      08
 4313 0201 48894568 		movq	%rax, 104(%rbp)
 4314 0205 EBA9     		jmp	.L510
 4315              	.LVL639:
 4316 0207 660F1F84 		.p2align 4,,10
 4316      00000000 
 4316      00
 4317              		.p2align 3
 4318              	.L490:
1407:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1408:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1409:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Initialize private state variables */
1410:fltk-1.3.4-1/jpeg/jdhuff.c ****     entropy->saved.EOBRUN = 0;
1411:fltk-1.3.4-1/jpeg/jdhuff.c ****   } else {
1412:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Check that the scan parameters Ss, Se, Ah/Al are OK for sequential JPEG.
1413:fltk-1.3.4-1/jpeg/jdhuff.c ****      * This ought to be an error condition, but we make it a warning because
1414:fltk-1.3.4-1/jpeg/jdhuff.c ****      * there are some baseline files out there with all zeroes in these bytes.
1415:fltk-1.3.4-1/jpeg/jdhuff.c ****      */
1416:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 4319              		.loc 1 1416 0
 4320 0210 448B9F1C 		movl	540(%rdi), %r11d
 4320      020000
 4321 0217 4585DB   		testl	%r11d, %r11d
 4322 021a 7510     		jne	.L513
 4323              		.loc 1 1416 0 is_stmt 0 discriminator 1
 4324 021c 448B9724 		movl	548(%rdi), %r10d
 4324      020000
 4325 0223 4585D2   		testl	%r10d, %r10d
 4326 0226 0F84CD03 		je	.L583
 4326      0000
 4327              	.L513:
1417:fltk-1.3.4-1/jpeg/jdhuff.c **** 	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
1418:fltk-1.3.4-1/jpeg/jdhuff.c **** 	cinfo->Se != cinfo->lim_Se))
1419:fltk-1.3.4-1/jpeg/jdhuff.c ****       WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 4328              		.loc 1 1419 0 is_stmt 1
 4329 022c 488B03   		movq	(%rbx), %rax
 4330 022f BEFFFFFF 		movl	$-1, %esi
 4330      FF
 4331 0234 4889DF   		movq	%rbx, %rdi
 4332 0237 C740287D 		movl	$125, 40(%rax)
 4332      000000
 4333 023e 488B03   		movq	(%rbx), %rax
 4334 0241 FF5008   		call	*8(%rax)
 4335              	.LVL640:
 4336              	.L579:
 4337 0244 8B833802 		movl	568(%rbx), %eax
 4337      0000
 4338              	.L516:
1420:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1421:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Select MCU decoding routine */
1422:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* We retain the hard-coded case for full-size blocks.
1423:fltk-1.3.4-1/jpeg/jdhuff.c ****      * This is not necessary, but it appears that this version is slightly
1424:fltk-1.3.4-1/jpeg/jdhuff.c ****      * more performant in the given implementation.
1425:fltk-1.3.4-1/jpeg/jdhuff.c ****      * With an improved implementation we would prefer a single optimized
1426:fltk-1.3.4-1/jpeg/jdhuff.c ****      * function.
1427:fltk-1.3.4-1/jpeg/jdhuff.c ****      */
1428:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (cinfo->lim_Se != DCTSIZE2-1)
1429:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->pub.decode_mcu = decode_mcu_sub;
 4339              		.loc 1 1429 0
 4340 024a 83F83F   		cmpl	$63, %eax
 4341 024d BA000000 		movl	$decode_mcu_sub, %edx
 4341      00
 4342 0252 B8000000 		movl	$decode_mcu, %eax
 4342      00
 4343 0257 480F45C2 		cmovne	%rdx, %rax
1430:fltk-1.3.4-1/jpeg/jdhuff.c ****     else
1431:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->pub.decode_mcu = decode_mcu;
1432:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1433:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 4344              		.loc 1 1433 0
 4345 025b 4531E4   		xorl	%r12d, %r12d
 4346 025e 4531ED   		xorl	%r13d, %r13d
1429:fltk-1.3.4-1/jpeg/jdhuff.c ****     else
 4347              		.loc 1 1429 0
 4348 0261 48894508 		movq	%rax, 8(%rbp)
 4349              	.LVL641:
 4350              		.loc 1 1433 0
 4351 0265 8BBBC001 		movl	448(%rbx), %edi
 4351      0000
 4352 026b 85FF     		testl	%edi, %edi
 4353 026d 7E49     		jle	.L524
 4354              	.LVL642:
 4355              	.L569:
1434:fltk-1.3.4-1/jpeg/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 4356              		.loc 1 1434 0
 4357 026f 4E8BB463 		movq	456(%rbx,%r12,2), %r14
 4357      C8010000 
 4358              	.LVL643:
1435:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Compute derived values for Huffman tables */
1436:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* We may do this more than once for a table, but it's not expensive */
1437:fltk-1.3.4-1/jpeg/jdhuff.c ****       tbl = compptr->dc_tbl_no;
1438:fltk-1.3.4-1/jpeg/jdhuff.c ****       jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 4359              		.loc 1 1438 0
 4360 0277 BE010000 		movl	$1, %esi
 4360      00
 4361 027c 4889DF   		movq	%rbx, %rdi
1437:fltk-1.3.4-1/jpeg/jdhuff.c ****       jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 4362              		.loc 1 1437 0
 4363 027f 49634614 		movslq	20(%r14), %rax
 4364              		.loc 1 1438 0
 4365 0283 488D4CC5 		leaq	112(%rbp,%rax,8), %rcx
 4365      70
1437:fltk-1.3.4-1/jpeg/jdhuff.c ****       jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 4366              		.loc 1 1437 0
 4367 0288 4889C2   		movq	%rax, %rdx
 4368              	.LVL644:
 4369              		.loc 1 1438 0
 4370 028b E8000000 		call	jpeg_make_d_derived_tbl
 4370      00
 4371              	.LVL645:
1439:fltk-1.3.4-1/jpeg/jdhuff.c **** 			      & entropy->dc_derived_tbls[tbl]);
1440:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (cinfo->lim_Se) {	/* AC needs no table when not present */
 4372              		.loc 1 1440 0
 4373 0290 8B8B3802 		movl	568(%rbx), %ecx
 4373      0000
 4374 0296 85C9     		testl	%ecx, %ecx
 4375 0298 0F85F202 		jne	.L584
 4375      0000
 4376              	.L522:
1441:fltk-1.3.4-1/jpeg/jdhuff.c **** 	tbl = compptr->ac_tbl_no;
1442:fltk-1.3.4-1/jpeg/jdhuff.c **** 	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
1443:fltk-1.3.4-1/jpeg/jdhuff.c **** 				& entropy->ac_derived_tbls[tbl]);
1444:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
1445:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Initialize DC predictions to 0 */
1446:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->saved.last_dc_val[ci] = 0;
 4377              		.loc 1 1446 0 discriminator 2
 4378 029e 42C74425 		movl	$0, 44(%rbp,%r12)
 4378      2C000000 
 4378      00
1433:fltk-1.3.4-1/jpeg/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 4379              		.loc 1 1433 0 discriminator 2
 4380 02a7 4183C501 		addl	$1, %r13d
 4381              	.LVL646:
 4382 02ab 4983C404 		addq	$4, %r12
 4383 02af 4439ABC0 		cmpl	%r13d, 448(%rbx)
 4383      010000
 4384 02b6 7FB7     		jg	.L569
 4385              	.LVL647:
 4386              	.L524:
1447:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1448:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1449:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Precalculate decoding info for each block in an MCU of this scan */
1450:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 4387              		.loc 1 1450 0
 4388 02b8 8BB3F001 		movl	496(%rbx), %esi
 4388      0000
 4389 02be 85F6     		testl	%esi, %esi
 4390 02c0 0F8E3501 		jle	.L507
 4390      0000
 4391 02c6 488DBBF4 		leaq	500(%rbx), %rdi
 4391      010000
 4392 02cd 488D8D00 		leaq	256(%rbp), %rcx
 4392      010000
 4393 02d4 4C8D8550 		leaq	336(%rbp), %r8
 4393      010000
 4394 02db 31F6     		xorl	%esi, %esi
 4395 02dd 41BF0700 		movl	$7, %r15d
 4395      0000
 4396 02e3 41BE0600 		movl	$6, %r14d
 4396      0000
 4397 02e9 41BD0500 		movl	$5, %r13d
 4397      0000
 4398 02ef 41BC0400 		movl	$4, %r12d
 4398      0000
 4399 02f5 41BB0300 		movl	$3, %r11d
 4399      0000
 4400 02fb 41BA0200 		movl	$2, %r10d
 4400      0000
 4401              	.LVL648:
 4402              		.p2align 4,,10
 4403 0301 0F1F8000 		.p2align 3
 4403      000000
 4404              	.L550:
1451:fltk-1.3.4-1/jpeg/jdhuff.c ****       ci = cinfo->MCU_membership[blkn];
1452:fltk-1.3.4-1/jpeg/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 4405              		.loc 1 1452 0
 4406 0308 486307   		movslq	(%rdi), %rax
 4407 030b 488B84C3 		movq	456(%rbx,%rax,8), %rax
 4407      C8010000 
 4408              	.LVL649:
1453:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Precalculate which table to use for each block */
1454:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->dc_cur_tbls[blkn] = entropy->dc_derived_tbls[compptr->dc_tbl_no];
 4409              		.loc 1 1454 0
 4410 0313 48635014 		movslq	20(%rax), %rdx
 4411 0317 488B54D5 		movq	112(%rbp,%rdx,8), %rdx
 4411      70
 4412 031c 488951B0 		movq	%rdx, -80(%rcx)
 4413              	.LVL650:
1455:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
 4414              		.loc 1 1455 0
 4415 0320 48635018 		movslq	24(%rax), %rdx
 4416 0324 488B94D5 		movq	144(%rbp,%rdx,8), %rdx
 4416      90000000 
 4417 032c 488911   		movq	%rdx, (%rcx)
1456:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Decide whether we really care about the coefficient values */
1457:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (compptr->component_needed) {
 4418              		.loc 1 1457 0
 4419 032f 8B5034   		movl	52(%rax), %edx
 4420 0332 85D2     		testl	%edx, %edx
 4421 0334 0F844602 		je	.L525
 4421      0000
1458:fltk-1.3.4-1/jpeg/jdhuff.c **** 	ci = compptr->DCT_v_scaled_size;
1459:fltk-1.3.4-1/jpeg/jdhuff.c **** 	i = compptr->DCT_h_scaled_size;
1460:fltk-1.3.4-1/jpeg/jdhuff.c **** 	switch (cinfo->lim_Se) {
 4422              		.loc 1 1460 0
 4423 033a 83BB3802 		cmpl	$48, 568(%rbx)
 4423      000030
1458:fltk-1.3.4-1/jpeg/jdhuff.c **** 	ci = compptr->DCT_v_scaled_size;
 4424              		.loc 1 1458 0
 4425 0341 8B5028   		movl	40(%rax), %edx
 4426              	.LVL651:
1459:fltk-1.3.4-1/jpeg/jdhuff.c **** 	switch (cinfo->lim_Se) {
 4427              		.loc 1 1459 0
 4428 0344 8B4024   		movl	36(%rax), %eax
 4429              	.LVL652:
 4430              		.loc 1 1460 0
 4431 0347 0F870302 		ja	.L526
 4431      0000
 4432 034d 448B8B38 		movl	568(%rbx), %r9d
 4432      020000
 4433 0354 42FF24CD 		jmp	*.L528(,%r9,8)
 4433      00000000 
 4434              		.section	.rodata.start_pass_huff_decoder,"a",@progbits
 4435              		.align 8
 4436              		.align 4
 4437              	.L528:
 4438 0000 00000000 		.quad	.L527
 4438      00000000 
 4439 0008 00000000 		.quad	.L526
 4439      00000000 
 4440 0010 00000000 		.quad	.L526
 4440      00000000 
 4441 0018 00000000 		.quad	.L529
 4441      00000000 
 4442 0020 00000000 		.quad	.L526
 4442      00000000 
 4443 0028 00000000 		.quad	.L526
 4443      00000000 
 4444 0030 00000000 		.quad	.L526
 4444      00000000 
 4445 0038 00000000 		.quad	.L526
 4445      00000000 
 4446 0040 00000000 		.quad	.L530
 4446      00000000 
 4447 0048 00000000 		.quad	.L526
 4447      00000000 
 4448 0050 00000000 		.quad	.L526
 4448      00000000 
 4449 0058 00000000 		.quad	.L526
 4449      00000000 
 4450 0060 00000000 		.quad	.L526
 4450      00000000 
 4451 0068 00000000 		.quad	.L526
 4451      00000000 
 4452 0070 00000000 		.quad	.L526
 4452      00000000 
 4453 0078 00000000 		.quad	.L531
 4453      00000000 
 4454 0080 00000000 		.quad	.L526
 4454      00000000 
 4455 0088 00000000 		.quad	.L526
 4455      00000000 
 4456 0090 00000000 		.quad	.L526
 4456      00000000 
 4457 0098 00000000 		.quad	.L526
 4457      00000000 
 4458 00a0 00000000 		.quad	.L526
 4458      00000000 
 4459 00a8 00000000 		.quad	.L526
 4459      00000000 
 4460 00b0 00000000 		.quad	.L526
 4460      00000000 
 4461 00b8 00000000 		.quad	.L526
 4461      00000000 
 4462 00c0 00000000 		.quad	.L532
 4462      00000000 
 4463 00c8 00000000 		.quad	.L526
 4463      00000000 
 4464 00d0 00000000 		.quad	.L526
 4464      00000000 
 4465 00d8 00000000 		.quad	.L526
 4465      00000000 
 4466 00e0 00000000 		.quad	.L526
 4466      00000000 
 4467 00e8 00000000 		.quad	.L526
 4467      00000000 
 4468 00f0 00000000 		.quad	.L526
 4468      00000000 
 4469 00f8 00000000 		.quad	.L526
 4469      00000000 
 4470 0100 00000000 		.quad	.L526
 4470      00000000 
 4471 0108 00000000 		.quad	.L526
 4471      00000000 
 4472 0110 00000000 		.quad	.L526
 4472      00000000 
 4473 0118 00000000 		.quad	.L533
 4473      00000000 
 4474 0120 00000000 		.quad	.L526
 4474      00000000 
 4475 0128 00000000 		.quad	.L526
 4475      00000000 
 4476 0130 00000000 		.quad	.L526
 4476      00000000 
 4477 0138 00000000 		.quad	.L526
 4477      00000000 
 4478 0140 00000000 		.quad	.L526
 4478      00000000 
 4479 0148 00000000 		.quad	.L526
 4479      00000000 
 4480 0150 00000000 		.quad	.L526
 4480      00000000 
 4481 0158 00000000 		.quad	.L526
 4481      00000000 
 4482 0160 00000000 		.quad	.L526
 4482      00000000 
 4483 0168 00000000 		.quad	.L526
 4483      00000000 
 4484 0170 00000000 		.quad	.L526
 4484      00000000 
 4485 0178 00000000 		.quad	.L526
 4485      00000000 
 4486 0180 00000000 		.quad	.L534
 4486      00000000 
 4487              		.section	.text.start_pass_huff_decoder
 4488              	.LVL653:
 4489 035c 0F1F4000 		.p2align 4,,10
 4490              		.p2align 3
 4491              	.L491:
1335:fltk-1.3.4-1/jpeg/jdhuff.c **** 	goto bad;
 4492              		.loc 1 1335 0
 4493 0360 8B872002 		movl	544(%rdi), %eax
 4493      0000
 4494 0366 39C1     		cmpl	%eax, %ecx
 4495 0368 0F8FD4FC 		jg	.L492
 4495      FFFF
1335:fltk-1.3.4-1/jpeg/jdhuff.c **** 	goto bad;
 4496              		.loc 1 1335 0 is_stmt 0 discriminator 1
 4497 036e 3B873802 		cmpl	568(%rdi), %eax
 4497      0000
 4498 0374 0F8FC8FC 		jg	.L492
 4498      FFFF
1338:fltk-1.3.4-1/jpeg/jdhuff.c **** 	goto bad;
 4499              		.loc 1 1338 0 is_stmt 1
 4500 037a 83BFC001 		cmpl	$1, 448(%rdi)
 4500      000001
 4501 0381 0F85BBFC 		jne	.L492
 4501      FFFF
 4502              	.L493:
1341:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Successive approximation refinement scan: must have Al = Ah-1. */
 4503              		.loc 1 1341 0
 4504 0387 8B832402 		movl	548(%rbx), %eax
 4504      0000
1343:fltk-1.3.4-1/jpeg/jdhuff.c **** 	goto bad;
 4505              		.loc 1 1343 0
 4506 038d 8B932802 		movl	552(%rbx), %edx
 4506      0000
1341:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Successive approximation refinement scan: must have Al = Ah-1. */
 4507              		.loc 1 1341 0
 4508 0393 85C0     		testl	%eax, %eax
 4509 0395 740B     		je	.L495
1343:fltk-1.3.4-1/jpeg/jdhuff.c **** 	goto bad;
 4510              		.loc 1 1343 0
 4511 0397 83E801   		subl	$1, %eax
 4512 039a 39D0     		cmpl	%edx, %eax
 4513 039c 0F85A0FC 		jne	.L492
 4513      FFFF
 4514              	.L495:
1346:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Arguably the maximum Al value should be less than 13 for 8-bit precision,
 4515              		.loc 1 1346 0
 4516 03a2 83FA0D   		cmpl	$13, %edx
 4517 03a5 0F8EDFFC 		jle	.L496
 4517      FFFF
 4518 03ab E992FCFF 		jmp	.L492
 4518      FF
 4519              	.LVL654:
 4520              		.p2align 4,,10
 4521              		.p2align 3
 4522              	.L534:
1461:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (1*1-1):
1462:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1;
1463:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
1464:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (2*2-1):
1465:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (ci <= 0 || ci > 2) ci = 2;
1466:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 2) i = 2;
1467:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
1468:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
1469:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (3*3-1):
1470:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (ci <= 0 || ci > 3) ci = 3;
1471:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 3) i = 3;
1472:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
1473:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
1474:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (4*4-1):
1475:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (ci <= 0 || ci > 4) ci = 4;
1476:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 4) i = 4;
1477:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
1478:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
1479:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (5*5-1):
1480:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (ci <= 0 || ci > 5) ci = 5;
1481:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 5) i = 5;
1482:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
1483:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
1484:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (6*6-1):
1485:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (ci <= 0 || ci > 6) ci = 6;
1486:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 6) i = 6;
1487:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
1488:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
1489:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (7*7-1):
1490:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (ci <= 0 || ci > 7) ci = 7;
 4523              		.loc 1 1490 0
 4524 03b0 83EA01   		subl	$1, %edx
 4525              	.LVL655:
 4526 03b3 83FA06   		cmpl	$6, %edx
 4527 03b6 410F47D6 		cmova	%r14d, %edx
 4528              	.LVL656:
1491:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 7) i = 7;
 4529              		.loc 1 1491 0
 4530 03ba 83E801   		subl	$1, %eax
 4531              	.LVL657:
 4532 03bd 83F806   		cmpl	$6, %eax
1492:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 4533              		.loc 1 1492 0
 4534 03c0 4863D2   		movslq	%edx, %rdx
 4535 03c3 410F47C6 		cmova	%r14d, %eax
 4536              	.LVL658:
 4537 03c7 4898     		cltq
 4538 03c9 488D04D0 		leaq	(%rax,%rdx,8), %rax
 4539 03cd 4829D0   		subq	%rdx, %rax
 4540 03d0 8B048500 		movl	jpeg_zigzag_order7(,%rax,4), %eax
 4540      000000
 4541 03d7 83C001   		addl	$1, %eax
 4542 03da 418900   		movl	%eax, (%r8)
 4543 03dd 0F1F00   		.p2align 4,,10
 4544              		.p2align 3
 4545              	.L535:
1450:fltk-1.3.4-1/jpeg/jdhuff.c ****       ci = cinfo->MCU_membership[blkn];
 4546              		.loc 1 1450 0 discriminator 2
 4547 03e0 83C601   		addl	$1, %esi
 4548              	.LVL659:
 4549 03e3 4883C704 		addq	$4, %rdi
 4550 03e7 4883C108 		addq	$8, %rcx
 4551 03eb 4983C004 		addq	$4, %r8
 4552 03ef 39B3F001 		cmpl	%esi, 496(%rbx)
 4552      0000
 4553 03f5 0F8F0DFF 		jg	.L550
 4553      FFFF
 4554              	.LVL660:
 4555              	.L507:
1493:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
1494:fltk-1.3.4-1/jpeg/jdhuff.c **** 	default:
1495:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (ci <= 0 || ci > 8) ci = 8;
1496:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 8) i = 8;
1497:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
1498:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
1499:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
1500:fltk-1.3.4-1/jpeg/jdhuff.c ****       } else {
1501:fltk-1.3.4-1/jpeg/jdhuff.c **** 	entropy->coef_limit[blkn] = 0;
1502:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
1503:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1504:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
1505:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1506:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Initialize bitread state variables */
1507:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->bitstate.bits_left = 0;
 4556              		.loc 1 1507 0
 4557 03fb C7452000 		movl	$0, 32(%rbp)
 4557      000000
1508:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
 4558              		.loc 1 1508 0
 4559 0402 48C74518 		movq	$0, 24(%rbp)
 4559      00000000 
1509:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->insufficient_data = FALSE;
 4560              		.loc 1 1509 0
 4561 040a C7453C00 		movl	$0, 60(%rbp)
 4561      000000
1510:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1511:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Initialize restart counter */
1512:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->restarts_to_go = cinfo->restart_interval;
 4562              		.loc 1 1512 0
 4563 0411 8B837401 		movl	372(%rbx), %eax
 4563      0000
 4564 0417 894540   		movl	%eax, 64(%rbp)
1513:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 4565              		.loc 1 1513 0
 4566 041a 4883C418 		addq	$24, %rsp
 4567              		.cfi_remember_state
 4568              		.cfi_def_cfa_offset 56
 4569 041e 5B       		popq	%rbx
 4570              		.cfi_def_cfa_offset 48
 4571              	.LVL661:
 4572 041f 5D       		popq	%rbp
 4573              		.cfi_def_cfa_offset 40
 4574 0420 415C     		popq	%r12
 4575              		.cfi_def_cfa_offset 32
 4576 0422 415D     		popq	%r13
 4577              		.cfi_def_cfa_offset 24
 4578 0424 415E     		popq	%r14
 4579              		.cfi_def_cfa_offset 16
 4580 0426 415F     		popq	%r15
 4581              		.cfi_def_cfa_offset 8
 4582 0428 C3       		ret
 4583              	.LVL662:
 4584 0429 0F1F8000 		.p2align 4,,10
 4584      000000
 4585              		.p2align 3
 4586              	.L533:
 4587              		.cfi_restore_state
1485:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 6) i = 6;
 4588              		.loc 1 1485 0
 4589 0430 83EA01   		subl	$1, %edx
 4590              	.LVL663:
 4591 0433 83FA05   		cmpl	$5, %edx
 4592 0436 410F47D5 		cmova	%r13d, %edx
 4593              	.LVL664:
1486:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
 4594              		.loc 1 1486 0
 4595 043a 83E801   		subl	$1, %eax
 4596              	.LVL665:
 4597 043d 83F805   		cmpl	$5, %eax
 4598 0440 410F47C5 		cmova	%r13d, %eax
 4599              	.LVL666:
1487:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 4600              		.loc 1 1487 0
 4601 0444 4C63C8   		movslq	%eax, %r9
 4602 0447 4863C2   		movslq	%edx, %rax
 4603 044a 488D0440 		leaq	(%rax,%rax,2), %rax
 4604 044e 498D0441 		leaq	(%r9,%rax,2), %rax
 4605 0452 8B048500 		movl	jpeg_zigzag_order6(,%rax,4), %eax
 4605      000000
 4606 0459 83C001   		addl	$1, %eax
 4607 045c 418900   		movl	%eax, (%r8)
1488:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (7*7-1):
 4608              		.loc 1 1488 0
 4609 045f E97CFFFF 		jmp	.L535
 4609      FF
 4610              	.LVL667:
 4611              		.p2align 4,,10
 4612 0464 0F1F4000 		.p2align 3
 4613              	.L532:
1480:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 5) i = 5;
 4614              		.loc 1 1480 0
 4615 0468 83EA01   		subl	$1, %edx
 4616              	.LVL668:
 4617 046b 83FA04   		cmpl	$4, %edx
 4618 046e 410F47D4 		cmova	%r12d, %edx
 4619              	.LVL669:
1481:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 4620              		.loc 1 1481 0
 4621 0472 83E801   		subl	$1, %eax
 4622              	.LVL670:
 4623 0475 83F804   		cmpl	$4, %eax
 4624 0478 410F47C4 		cmova	%r12d, %eax
 4625              	.LVL671:
1482:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 4626              		.loc 1 1482 0
 4627 047c 4C63C8   		movslq	%eax, %r9
 4628 047f 4863C2   		movslq	%edx, %rax
 4629 0482 488D0480 		leaq	(%rax,%rax,4), %rax
 4630 0486 4C01C8   		addq	%r9, %rax
 4631 0489 8B048500 		movl	jpeg_zigzag_order5(,%rax,4), %eax
 4631      000000
 4632 0490 83C001   		addl	$1, %eax
 4633 0493 418900   		movl	%eax, (%r8)
1483:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (6*6-1):
 4634              		.loc 1 1483 0
 4635 0496 E945FFFF 		jmp	.L535
 4635      FF
 4636              	.LVL672:
 4637 049b 0F1F4400 		.p2align 4,,10
 4637      00
 4638              		.p2align 3
 4639              	.L531:
1475:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 4) i = 4;
 4640              		.loc 1 1475 0
 4641 04a0 83EA01   		subl	$1, %edx
 4642              	.LVL673:
 4643 04a3 83FA03   		cmpl	$3, %edx
 4644 04a6 410F47D3 		cmova	%r11d, %edx
 4645              	.LVL674:
1476:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 4646              		.loc 1 1476 0
 4647 04aa 83E801   		subl	$1, %eax
 4648              	.LVL675:
 4649 04ad 83F803   		cmpl	$3, %eax
1477:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 4650              		.loc 1 1477 0
 4651 04b0 4863D2   		movslq	%edx, %rdx
 4652 04b3 410F47C3 		cmova	%r11d, %eax
 4653              	.LVL676:
 4654 04b7 4898     		cltq
 4655 04b9 488D0490 		leaq	(%rax,%rdx,4), %rax
 4656 04bd 8B048500 		movl	jpeg_zigzag_order4(,%rax,4), %eax
 4656      000000
 4657 04c4 83C001   		addl	$1, %eax
 4658 04c7 418900   		movl	%eax, (%r8)
1478:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (5*5-1):
 4659              		.loc 1 1478 0
 4660 04ca E911FFFF 		jmp	.L535
 4660      FF
 4661              	.LVL677:
 4662 04cf 90       		.p2align 4,,10
 4663              		.p2align 3
 4664              	.L530:
1470:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 3) i = 3;
 4665              		.loc 1 1470 0
 4666 04d0 83EA01   		subl	$1, %edx
 4667              	.LVL678:
 4668 04d3 83FA02   		cmpl	$2, %edx
 4669 04d6 410F47D2 		cmova	%r10d, %edx
 4670              	.LVL679:
1471:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 4671              		.loc 1 1471 0
 4672 04da 83E801   		subl	$1, %eax
 4673              	.LVL680:
 4674 04dd 83F802   		cmpl	$2, %eax
 4675 04e0 410F47C2 		cmova	%r10d, %eax
 4676              	.LVL681:
1472:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 4677              		.loc 1 1472 0
 4678 04e4 4C63C8   		movslq	%eax, %r9
 4679 04e7 4863C2   		movslq	%edx, %rax
 4680 04ea 488D0440 		leaq	(%rax,%rax,2), %rax
 4681 04ee 4C01C8   		addq	%r9, %rax
 4682 04f1 8B048500 		movl	jpeg_zigzag_order3(,%rax,4), %eax
 4682      000000
 4683 04f8 83C001   		addl	$1, %eax
 4684 04fb 418900   		movl	%eax, (%r8)
1473:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (4*4-1):
 4685              		.loc 1 1473 0
 4686 04fe E9DDFEFF 		jmp	.L535
 4686      FF
 4687              	.LVL682:
 4688              		.p2align 4,,10
 4689 0503 0F1F4400 		.p2align 3
 4689      00
 4690              	.L529:
1465:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 2) i = 2;
 4691              		.loc 1 1465 0
 4692 0508 83EA01   		subl	$1, %edx
 4693              	.LVL683:
 4694 050b 41B90100 		movl	$1, %r9d
 4694      0000
 4695 0511 83FA01   		cmpl	$1, %edx
 4696 0514 410F47D1 		cmova	%r9d, %edx
 4697              	.LVL684:
1466:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 4698              		.loc 1 1466 0
 4699 0518 83E801   		subl	$1, %eax
 4700              	.LVL685:
 4701 051b 83F801   		cmpl	$1, %eax
1467:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 4702              		.loc 1 1467 0
 4703 051e 4863D2   		movslq	%edx, %rdx
 4704 0521 410F47C1 		cmova	%r9d, %eax
 4705              	.LVL686:
 4706 0525 4898     		cltq
 4707 0527 488D0450 		leaq	(%rax,%rdx,2), %rax
 4708 052b 8B048500 		movl	jpeg_zigzag_order2(,%rax,4), %eax
 4708      000000
 4709 0532 83C001   		addl	$1, %eax
 4710 0535 418900   		movl	%eax, (%r8)
1468:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (3*3-1):
 4711              		.loc 1 1468 0
 4712 0538 E9A3FEFF 		jmp	.L535
 4712      FF
 4713              	.LVL687:
 4714 053d 0F1F00   		.p2align 4,,10
 4715              		.p2align 3
 4716              	.L527:
1462:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 4717              		.loc 1 1462 0
 4718 0540 41C70001 		movl	$1, (%r8)
 4718      000000
1463:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (2*2-1):
 4719              		.loc 1 1463 0
 4720 0547 E994FEFF 		jmp	.L535
 4720      FF
 4721 054c 0F1F4000 		.p2align 4,,10
 4722              		.p2align 3
 4723              	.L526:
1495:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 8) i = 8;
 4724              		.loc 1 1495 0
 4725 0550 83EA01   		subl	$1, %edx
 4726              	.LVL688:
 4727 0553 83FA07   		cmpl	$7, %edx
 4728 0556 410F47D7 		cmova	%r15d, %edx
 4729              	.LVL689:
1496:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 4730              		.loc 1 1496 0
 4731 055a 83E801   		subl	$1, %eax
 4732              	.LVL690:
 4733 055d 83F807   		cmpl	$7, %eax
1497:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 4734              		.loc 1 1497 0
 4735 0560 4863D2   		movslq	%edx, %rdx
 4736 0563 410F47C7 		cmova	%r15d, %eax
 4737              	.LVL691:
 4738 0567 4898     		cltq
 4739 0569 488D04D0 		leaq	(%rax,%rdx,8), %rax
 4740 056d 8B048500 		movl	jpeg_zigzag_order(,%rax,4), %eax
 4740      000000
 4741 0574 83C001   		addl	$1, %eax
 4742 0577 418900   		movl	%eax, (%r8)
1498:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 4743              		.loc 1 1498 0
 4744 057a E961FEFF 		jmp	.L535
 4744      FF
 4745              	.LVL692:
 4746 057f 90       		.p2align 4,,10
 4747              		.p2align 3
 4748              	.L525:
1501:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 4749              		.loc 1 1501 0
 4750 0580 41C70000 		movl	$0, (%r8)
 4750      000000
 4751 0587 E954FEFF 		jmp	.L535
 4751      FF
 4752              	.LVL693:
 4753 058c 0F1F4000 		.p2align 4,,10
 4754              		.p2align 3
 4755              	.L584:
1441:fltk-1.3.4-1/jpeg/jdhuff.c **** 	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 4756              		.loc 1 1441 0
 4757 0590 49634618 		movslq	24(%r14), %rax
1442:fltk-1.3.4-1/jpeg/jdhuff.c **** 				& entropy->ac_derived_tbls[tbl]);
 4758              		.loc 1 1442 0
 4759 0594 31F6     		xorl	%esi, %esi
 4760 0596 4889DF   		movq	%rbx, %rdi
 4761 0599 488D8CC5 		leaq	144(%rbp,%rax,8), %rcx
 4761      90000000 
1441:fltk-1.3.4-1/jpeg/jdhuff.c **** 	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 4762              		.loc 1 1441 0
 4763 05a1 4889C2   		movq	%rax, %rdx
 4764              	.LVL694:
1442:fltk-1.3.4-1/jpeg/jdhuff.c **** 				& entropy->ac_derived_tbls[tbl]);
 4765              		.loc 1 1442 0
 4766 05a4 E8000000 		call	jpeg_make_d_derived_tbl
 4766      00
 4767              	.LVL695:
 4768 05a9 E9F0FCFF 		jmp	.L522
 4768      FF
 4769              	.LVL696:
 4770 05ae 6690     		.p2align 4,,10
 4771              		.p2align 3
 4772              	.L512:
1410:fltk-1.3.4-1/jpeg/jdhuff.c ****   } else {
 4773              		.loc 1 1410 0
 4774 05b0 C7452800 		movl	$0, 40(%rbp)
 4774      000000
 4775 05b7 E93FFEFF 		jmp	.L507
 4775      FF
 4776              	.LVL697:
 4777 05bc 0F1F4000 		.p2align 4,,10
 4778              		.p2align 3
 4779              	.L581:
1394:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 4780              		.loc 1 1394 0
 4781 05c0 48634014 		movslq	20(%rax), %rax
 4782              	.LVL698:
1395:fltk-1.3.4-1/jpeg/jdhuff.c **** 				  & entropy->derived_tbls[tbl]);
 4783              		.loc 1 1395 0
 4784 05c4 BE010000 		movl	$1, %esi
 4784      00
 4785 05c9 4889DF   		movq	%rbx, %rdi
 4786 05cc 488D4CC5 		leaq	72(%rbp,%rax,8), %rcx
 4786      48
1394:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 4787              		.loc 1 1394 0
 4788 05d1 4889C2   		movq	%rax, %rdx
 4789              	.LVL699:
1395:fltk-1.3.4-1/jpeg/jdhuff.c **** 				  & entropy->derived_tbls[tbl]);
 4790              		.loc 1 1395 0
 4791 05d4 E8000000 		call	jpeg_make_d_derived_tbl
 4791      00
 4792              	.LVL700:
 4793 05d9 E9D2FBFF 		jmp	.L510
 4793      FF
 4794              	.LVL701:
 4795 05de 6690     		.p2align 4,,10
 4796              		.p2align 3
 4797              	.L503:
1382:fltk-1.3.4-1/jpeg/jdhuff.c ****       else
 4798              		.loc 1 1382 0
 4799 05e0 85C9     		testl	%ecx, %ecx
 4800 05e2 BA000000 		movl	$decode_mcu_DC_refine, %edx
 4800      00
 4801 05e7 B8000000 		movl	$decode_mcu_AC_refine, %eax
 4801      00
 4802 05ec 480F44C2 		cmove	%rdx, %rax
 4803 05f0 48894508 		movq	%rax, 8(%rbp)
 4804 05f4 E98FFBFF 		jmp	.L505
 4804      FF
 4805              	.LVL702:
 4806              	.L583:
1416:fltk-1.3.4-1/jpeg/jdhuff.c **** 	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 4807              		.loc 1 1416 0 discriminator 2
 4808 05f9 448B8F28 		movl	552(%rdi), %r9d
 4808      020000
 4809 0600 4585C9   		testl	%r9d, %r9d
 4810 0603 0F8523FC 		jne	.L513
 4810      FFFF
1416:fltk-1.3.4-1/jpeg/jdhuff.c **** 	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 4811              		.loc 1 1416 0 is_stmt 0 discriminator 3
 4812 0609 448B8738 		movl	312(%rdi), %r8d
 4812      010000
 4813 0610 8B872002 		movl	544(%rdi), %eax
 4813      0000
 4814 0616 4585C0   		testl	%r8d, %r8d
 4815 0619 7450     		je	.L585
 4816              	.L515:
1417:fltk-1.3.4-1/jpeg/jdhuff.c **** 	cinfo->Se != cinfo->lim_Se))
 4817              		.loc 1 1417 0 is_stmt 1 discriminator 1
 4818 061b 39833802 		cmpl	%eax, 568(%rbx)
 4818      0000
 4819 0621 0F8505FC 		jne	.L513
 4819      FFFF
 4820 0627 E91EFCFF 		jmp	.L516
 4820      FF
 4821              	.LVL703:
 4822 062c 0F1F4000 		.p2align 4,,10
 4823              		.p2align 3
 4824              	.L553:
 4825              	.LBB59:
1366:fltk-1.3.4-1/jpeg/jdhuff.c **** 	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 4826              		.loc 1 1366 0
 4827 0630 89E9     		movl	%ebp, %ecx
 4828 0632 E911FBFF 		jmp	.L499
 4828      FF
 4829              	.LVL704:
 4830              	.L580:
1365:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 4831              		.loc 1 1365 0
 4832 0637 488B13   		movq	(%rbx), %rdx
 4833 063a BEFFFFFF 		movl	$-1, %esi
 4833      FF
 4834 063f 4889DF   		movq	%rbx, %rdi
 4835 0642 C7422876 		movl	$118, 40(%rdx)
 4835      000000
 4836 0649 488B13   		movq	(%rbx), %rdx
 4837 064c 44896A2C 		movl	%r13d, 44(%rdx)
 4838 0650 488B13   		movq	(%rbx), %rdx
 4839 0653 C7423000 		movl	$0, 48(%rdx)
 4839      000000
 4840 065a 488B13   		movq	(%rbx), %rdx
 4841 065d FF5208   		call	*8(%rdx)
 4842              	.LVL705:
 4843 0660 8BAB1C02 		movl	540(%rbx), %ebp
 4843      0000
 4844 0666 E971FAFF 		jmp	.L498
 4844      FF
 4845              	.LVL706:
 4846              	.L585:
 4847              	.LBE59:
1417:fltk-1.3.4-1/jpeg/jdhuff.c **** 	cinfo->Se != cinfo->lim_Se))
 4848              		.loc 1 1417 0
 4849 066b 83F83F   		cmpl	$63, %eax
 4850 066e 0F8FD0FB 		jg	.L579
 4850      FFFF
 4851 0674 EBA5     		jmp	.L515
 4852              		.cfi_endproc
 4853              	.LFE72:
 4855              		.section	.text.unlikely.start_pass_huff_decoder
 4856              	.LCOLDE11:
 4857              		.section	.text.start_pass_huff_decoder
 4858              	.LHOTE11:
 4859              		.section	.text.unlikely.jinit_huff_decoder,"ax",@progbits
 4860              	.LCOLDB12:
 4861              		.section	.text.jinit_huff_decoder,"ax",@progbits
 4862              	.LHOTB12:
 4863              		.p2align 4,,15
 4864              		.globl	jinit_huff_decoder
 4866              	jinit_huff_decoder:
 4867              	.LFB73:
1514:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1515:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1516:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
1517:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Module initialization routine for Huffman entropy decoding.
1518:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
1519:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1520:fltk-1.3.4-1/jpeg/jdhuff.c **** GLOBAL(void)
1521:fltk-1.3.4-1/jpeg/jdhuff.c **** jinit_huff_decoder (j_decompress_ptr cinfo)
1522:fltk-1.3.4-1/jpeg/jdhuff.c **** {
 4868              		.loc 1 1522 0
 4869              		.cfi_startproc
 4870              	.LVL707:
 4871 0000 55       		pushq	%rbp
 4872              		.cfi_def_cfa_offset 16
 4873              		.cfi_offset 6, -16
 4874 0001 53       		pushq	%rbx
 4875              		.cfi_def_cfa_offset 24
 4876              		.cfi_offset 3, -24
 4877 0002 4889FD   		movq	%rdi, %rbp
1523:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy;
1524:fltk-1.3.4-1/jpeg/jdhuff.c ****   int i;
1525:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1526:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy = (huff_entropy_ptr)
 4878              		.loc 1 1526 0
 4879 0005 BA780100 		movl	$376, %edx
 4879      00
 4880 000a BE010000 		movl	$1, %esi
 4880      00
1522:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy;
 4881              		.loc 1 1522 0
 4882 000f 4883EC08 		subq	$8, %rsp
 4883              		.cfi_def_cfa_offset 32
1527:fltk-1.3.4-1/jpeg/jdhuff.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 4884              		.loc 1 1527 0
 4885 0013 488B4708 		movq	8(%rdi), %rax
1526:fltk-1.3.4-1/jpeg/jdhuff.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 4886              		.loc 1 1526 0
 4887 0017 FF10     		call	*(%rax)
 4888              	.LVL708:
1528:fltk-1.3.4-1/jpeg/jdhuff.c **** 				SIZEOF(huff_entropy_decoder));
1529:fltk-1.3.4-1/jpeg/jdhuff.c ****   cinfo->entropy = &entropy->pub;
 4889              		.loc 1 1529 0
 4890 0019 48898570 		movq	%rax, 624(%rbp)
 4890      020000
1530:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->pub.start_pass = start_pass_huff_decoder;
 4891              		.loc 1 1530 0
 4892 0020 48C70000 		movq	$start_pass_huff_decoder, (%rax)
 4892      000000
1526:fltk-1.3.4-1/jpeg/jdhuff.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 4893              		.loc 1 1526 0
 4894 0027 4889C3   		movq	%rax, %rbx
 4895              	.LVL709:
1531:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->pub.finish_pass = finish_pass_huff;
 4896              		.loc 1 1531 0
 4897 002a 48C74010 		movq	$finish_pass_huff, 16(%rax)
 4897      00000000 
1532:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1533:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (cinfo->progressive_mode) {
 4898              		.loc 1 1533 0
 4899 0032 8B8D3C01 		movl	316(%rbp), %ecx
 4899      0000
 4900 0038 85C9     		testl	%ecx, %ecx
 4901 003a 7559     		jne	.L597
 4902              	.LVL710:
1534:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Create progression status table */
1535:fltk-1.3.4-1/jpeg/jdhuff.c ****     int *coef_bit_ptr, ci;
1536:fltk-1.3.4-1/jpeg/jdhuff.c ****     cinfo->coef_bits = (int (*)[DCTSIZE2])
1537:fltk-1.3.4-1/jpeg/jdhuff.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
1538:fltk-1.3.4-1/jpeg/jdhuff.c **** 				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
1539:fltk-1.3.4-1/jpeg/jdhuff.c ****     coef_bit_ptr = & cinfo->coef_bits[0][0];
1540:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (ci = 0; ci < cinfo->num_components; ci++)
1541:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (i = 0; i < DCTSIZE2; i++)
1542:fltk-1.3.4-1/jpeg/jdhuff.c **** 	*coef_bit_ptr++ = -1;
1543:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1544:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Mark derived tables unallocated */
1545:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (i = 0; i < NUM_HUFF_TBLS; i++) {
1546:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->derived_tbls[i] = NULL;
1547:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1548:fltk-1.3.4-1/jpeg/jdhuff.c ****   } else {
1549:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Mark tables unallocated */
1550:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (i = 0; i < NUM_HUFF_TBLS; i++) {
1551:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 4903              		.loc 1 1551 0
 4904 003c 48C78090 		movq	$0, 144(%rax)
 4904      00000000 
 4904      000000
 4905 0047 48C74070 		movq	$0, 112(%rax)
 4905      00000000 
 4906              	.LVL711:
 4907 004f 48C78098 		movq	$0, 152(%rax)
 4907      00000000 
 4907      000000
 4908 005a 48C74078 		movq	$0, 120(%rax)
 4908      00000000 
 4909              	.LVL712:
 4910 0062 48C780A0 		movq	$0, 160(%rax)
 4910      00000000 
 4910      000000
 4911 006d 48C78080 		movq	$0, 128(%rax)
 4911      00000000 
 4911      000000
 4912              	.LVL713:
 4913 0078 48C780A8 		movq	$0, 168(%rax)
 4913      00000000 
 4913      000000
 4914 0083 48C78088 		movq	$0, 136(%rax)
 4914      00000000 
 4914      000000
 4915              	.LVL714:
1552:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1553:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
1554:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 4916              		.loc 1 1554 0
 4917 008e 4883C408 		addq	$8, %rsp
 4918              		.cfi_remember_state
 4919              		.cfi_def_cfa_offset 24
 4920 0092 5B       		popq	%rbx
 4921              		.cfi_def_cfa_offset 16
 4922 0093 5D       		popq	%rbp
 4923              		.cfi_def_cfa_offset 8
 4924              	.LVL715:
 4925 0094 C3       		ret
 4926              	.LVL716:
 4927              	.L597:
 4928              		.cfi_restore_state
 4929              	.LBB60:
1537:fltk-1.3.4-1/jpeg/jdhuff.c **** 				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
 4930              		.loc 1 1537 0
 4931 0095 8B5538   		movl	56(%rbp), %edx
 4932 0098 488B4508 		movq	8(%rbp), %rax
 4933              	.LVL717:
 4934 009c BE010000 		movl	$1, %esi
 4934      00
 4935 00a1 4889EF   		movq	%rbp, %rdi
 4936 00a4 C1E206   		sall	$6, %edx
 4937 00a7 4863D2   		movslq	%edx, %rdx
 4938 00aa 48C1E202 		salq	$2, %rdx
 4939 00ae FF10     		call	*(%rax)
 4940              	.LVL718:
1540:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (i = 0; i < DCTSIZE2; i++)
 4941              		.loc 1 1540 0
 4942 00b0 8B5538   		movl	56(%rbp), %edx
 4943 00b3 31C9     		xorl	%ecx, %ecx
1536:fltk-1.3.4-1/jpeg/jdhuff.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 4944              		.loc 1 1536 0
 4945 00b5 488985C0 		movq	%rax, 192(%rbp)
 4945      000000
 4946              	.LVL719:
1540:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (i = 0; i < DCTSIZE2; i++)
 4947              		.loc 1 1540 0
 4948 00bc 85D2     		testl	%edx, %edx
 4949 00be 7E28     		jle	.L592
 4950              	.LVL720:
 4951              		.p2align 4,,10
 4952              		.p2align 3
 4953              	.L593:
 4954 00c0 488D9000 		leaq	256(%rax), %rdx
 4954      010000
 4955 00c7 660F1F84 		.p2align 4,,10
 4955      00000000 
 4955      00
 4956              		.p2align 3
 4957              	.L590:
1542:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4958              		.loc 1 1542 0 discriminator 3
 4959 00d0 4883C004 		addq	$4, %rax
 4960              	.LVL721:
 4961 00d4 C740FCFF 		movl	$-1, -4(%rax)
 4961      FFFFFF
1541:fltk-1.3.4-1/jpeg/jdhuff.c **** 	*coef_bit_ptr++ = -1;
 4962              		.loc 1 1541 0 discriminator 3
 4963 00db 4839C2   		cmpq	%rax, %rdx
 4964 00de 75F0     		jne	.L590
1540:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (i = 0; i < DCTSIZE2; i++)
 4965              		.loc 1 1540 0 discriminator 2
 4966 00e0 83C101   		addl	$1, %ecx
 4967              	.LVL722:
 4968 00e3 394D38   		cmpl	%ecx, 56(%rbp)
 4969 00e6 7FD8     		jg	.L593
 4970              	.LVL723:
 4971              	.L592:
1546:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 4972              		.loc 1 1546 0
 4973 00e8 48C74348 		movq	$0, 72(%rbx)
 4973      00000000 
 4974              	.LVL724:
 4975 00f0 48C74350 		movq	$0, 80(%rbx)
 4975      00000000 
 4976              	.LVL725:
 4977 00f8 48C74358 		movq	$0, 88(%rbx)
 4977      00000000 
 4978              	.LVL726:
 4979 0100 48C74360 		movq	$0, 96(%rbx)
 4979      00000000 
 4980              	.LVL727:
 4981              	.LBE60:
 4982              		.loc 1 1554 0
 4983 0108 4883C408 		addq	$8, %rsp
 4984              		.cfi_def_cfa_offset 24
 4985 010c 5B       		popq	%rbx
 4986              		.cfi_def_cfa_offset 16
 4987              	.LVL728:
 4988 010d 5D       		popq	%rbp
 4989              		.cfi_def_cfa_offset 8
 4990              	.LVL729:
 4991 010e C3       		ret
 4992              		.cfi_endproc
 4993              	.LFE73:
 4995              		.section	.text.unlikely.jinit_huff_decoder
 4996              	.LCOLDE12:
 4997              		.section	.text.jinit_huff_decoder
 4998              	.LHOTE12:
 4999              		.section	.rodata.bmask,"a",@progbits
 5000              		.align 32
 5003              	bmask:
 5004 0000 00000000 		.long	0
 5005 0004 01000000 		.long	1
 5006 0008 03000000 		.long	3
 5007 000c 07000000 		.long	7
 5008 0010 0F000000 		.long	15
 5009 0014 1F000000 		.long	31
 5010 0018 3F000000 		.long	63
 5011 001c 7F000000 		.long	127
 5012 0020 FF000000 		.long	255
 5013 0024 FF010000 		.long	511
 5014 0028 FF030000 		.long	1023
 5015 002c FF070000 		.long	2047
 5016 0030 FF0F0000 		.long	4095
 5017 0034 FF1F0000 		.long	8191
 5018 0038 FF3F0000 		.long	16383
 5019 003c FF7F0000 		.long	32767
 5020              		.section	.rodata.jpeg_zigzag_order2,"a",@progbits
 5021              		.align 16
 5024              	jpeg_zigzag_order2:
 5025 0000 00000000 		.long	0
 5026 0004 01000000 		.long	1
 5027 0008 02000000 		.long	2
 5028 000c 03000000 		.long	3
 5029              		.section	.rodata.jpeg_zigzag_order3,"a",@progbits
 5030              		.align 32
 5033              	jpeg_zigzag_order3:
 5034 0000 00000000 		.long	0
 5035 0004 01000000 		.long	1
 5036 0008 05000000 		.long	5
 5037 000c 02000000 		.long	2
 5038 0010 04000000 		.long	4
 5039 0014 06000000 		.long	6
 5040 0018 03000000 		.long	3
 5041 001c 07000000 		.long	7
 5042 0020 08000000 		.long	8
 5043              		.section	.rodata.jpeg_zigzag_order4,"a",@progbits
 5044              		.align 32
 5047              	jpeg_zigzag_order4:
 5048 0000 00000000 		.long	0
 5049 0004 01000000 		.long	1
 5050 0008 05000000 		.long	5
 5051 000c 06000000 		.long	6
 5052 0010 02000000 		.long	2
 5053 0014 04000000 		.long	4
 5054 0018 07000000 		.long	7
 5055 001c 0C000000 		.long	12
 5056 0020 03000000 		.long	3
 5057 0024 08000000 		.long	8
 5058 0028 0B000000 		.long	11
 5059 002c 0D000000 		.long	13
 5060 0030 09000000 		.long	9
 5061 0034 0A000000 		.long	10
 5062 0038 0E000000 		.long	14
 5063 003c 0F000000 		.long	15
 5064              		.section	.rodata.jpeg_zigzag_order5,"a",@progbits
 5065              		.align 32
 5068              	jpeg_zigzag_order5:
 5069 0000 00000000 		.long	0
 5070 0004 01000000 		.long	1
 5071 0008 05000000 		.long	5
 5072 000c 06000000 		.long	6
 5073 0010 0E000000 		.long	14
 5074 0014 02000000 		.long	2
 5075 0018 04000000 		.long	4
 5076 001c 07000000 		.long	7
 5077 0020 0D000000 		.long	13
 5078 0024 0F000000 		.long	15
 5079 0028 03000000 		.long	3
 5080 002c 08000000 		.long	8
 5081 0030 0C000000 		.long	12
 5082 0034 10000000 		.long	16
 5083 0038 15000000 		.long	21
 5084 003c 09000000 		.long	9
 5085 0040 0B000000 		.long	11
 5086 0044 11000000 		.long	17
 5087 0048 14000000 		.long	20
 5088 004c 16000000 		.long	22
 5089 0050 0A000000 		.long	10
 5090 0054 12000000 		.long	18
 5091 0058 13000000 		.long	19
 5092 005c 17000000 		.long	23
 5093 0060 18000000 		.long	24
 5094              		.section	.rodata.jpeg_zigzag_order6,"a",@progbits
 5095              		.align 32
 5098              	jpeg_zigzag_order6:
 5099 0000 00000000 		.long	0
 5100 0004 01000000 		.long	1
 5101 0008 05000000 		.long	5
 5102 000c 06000000 		.long	6
 5103 0010 0E000000 		.long	14
 5104 0014 0F000000 		.long	15
 5105 0018 02000000 		.long	2
 5106 001c 04000000 		.long	4
 5107 0020 07000000 		.long	7
 5108 0024 0D000000 		.long	13
 5109 0028 10000000 		.long	16
 5110 002c 19000000 		.long	25
 5111 0030 03000000 		.long	3
 5112 0034 08000000 		.long	8
 5113 0038 0C000000 		.long	12
 5114 003c 11000000 		.long	17
 5115 0040 18000000 		.long	24
 5116 0044 1A000000 		.long	26
 5117 0048 09000000 		.long	9
 5118 004c 0B000000 		.long	11
 5119 0050 12000000 		.long	18
 5120 0054 17000000 		.long	23
 5121 0058 1B000000 		.long	27
 5122 005c 20000000 		.long	32
 5123 0060 0A000000 		.long	10
 5124 0064 13000000 		.long	19
 5125 0068 16000000 		.long	22
 5126 006c 1C000000 		.long	28
 5127 0070 1F000000 		.long	31
 5128 0074 21000000 		.long	33
 5129 0078 14000000 		.long	20
 5130 007c 15000000 		.long	21
 5131 0080 1D000000 		.long	29
 5132 0084 1E000000 		.long	30
 5133 0088 22000000 		.long	34
 5134 008c 23000000 		.long	35
 5135              		.section	.rodata.jpeg_zigzag_order7,"a",@progbits
 5136              		.align 32
 5139              	jpeg_zigzag_order7:
 5140 0000 00000000 		.long	0
 5141 0004 01000000 		.long	1
 5142 0008 05000000 		.long	5
 5143 000c 06000000 		.long	6
 5144 0010 0E000000 		.long	14
 5145 0014 0F000000 		.long	15
 5146 0018 1B000000 		.long	27
 5147 001c 02000000 		.long	2
 5148 0020 04000000 		.long	4
 5149 0024 07000000 		.long	7
 5150 0028 0D000000 		.long	13
 5151 002c 10000000 		.long	16
 5152 0030 1A000000 		.long	26
 5153 0034 1C000000 		.long	28
 5154 0038 03000000 		.long	3
 5155 003c 08000000 		.long	8
 5156 0040 0C000000 		.long	12
 5157 0044 11000000 		.long	17
 5158 0048 19000000 		.long	25
 5159 004c 1D000000 		.long	29
 5160 0050 26000000 		.long	38
 5161 0054 09000000 		.long	9
 5162 0058 0B000000 		.long	11
 5163 005c 12000000 		.long	18
 5164 0060 18000000 		.long	24
 5165 0064 1E000000 		.long	30
 5166 0068 25000000 		.long	37
 5167 006c 27000000 		.long	39
 5168 0070 0A000000 		.long	10
 5169 0074 13000000 		.long	19
 5170 0078 17000000 		.long	23
 5171 007c 1F000000 		.long	31
 5172 0080 24000000 		.long	36
 5173 0084 28000000 		.long	40
 5174 0088 2D000000 		.long	45
 5175 008c 14000000 		.long	20
 5176 0090 16000000 		.long	22
 5177 0094 20000000 		.long	32
 5178 0098 23000000 		.long	35
 5179 009c 29000000 		.long	41
 5180 00a0 2C000000 		.long	44
 5181 00a4 2E000000 		.long	46
 5182 00a8 15000000 		.long	21
 5183 00ac 21000000 		.long	33
 5184 00b0 22000000 		.long	34
 5185 00b4 2A000000 		.long	42
 5186 00b8 2B000000 		.long	43
 5187 00bc 2F000000 		.long	47
 5188 00c0 30000000 		.long	48
 5189              		.section	.rodata.jpeg_zigzag_order,"a",@progbits
 5190              		.align 32
 5193              	jpeg_zigzag_order:
 5194 0000 00000000 		.long	0
 5195 0004 01000000 		.long	1
 5196 0008 05000000 		.long	5
 5197 000c 06000000 		.long	6
 5198 0010 0E000000 		.long	14
 5199 0014 0F000000 		.long	15
 5200 0018 1B000000 		.long	27
 5201 001c 1C000000 		.long	28
 5202 0020 02000000 		.long	2
 5203 0024 04000000 		.long	4
 5204 0028 07000000 		.long	7
 5205 002c 0D000000 		.long	13
 5206 0030 10000000 		.long	16
 5207 0034 1A000000 		.long	26
 5208 0038 1D000000 		.long	29
 5209 003c 2A000000 		.long	42
 5210 0040 03000000 		.long	3
 5211 0044 08000000 		.long	8
 5212 0048 0C000000 		.long	12
 5213 004c 11000000 		.long	17
 5214 0050 19000000 		.long	25
 5215 0054 1E000000 		.long	30
 5216 0058 29000000 		.long	41
 5217 005c 2B000000 		.long	43
 5218 0060 09000000 		.long	9
 5219 0064 0B000000 		.long	11
 5220 0068 12000000 		.long	18
 5221 006c 18000000 		.long	24
 5222 0070 1F000000 		.long	31
 5223 0074 28000000 		.long	40
 5224 0078 2C000000 		.long	44
 5225 007c 35000000 		.long	53
 5226 0080 0A000000 		.long	10
 5227 0084 13000000 		.long	19
 5228 0088 17000000 		.long	23
 5229 008c 20000000 		.long	32
 5230 0090 27000000 		.long	39
 5231 0094 2D000000 		.long	45
 5232 0098 34000000 		.long	52
 5233 009c 36000000 		.long	54
 5234 00a0 14000000 		.long	20
 5235 00a4 16000000 		.long	22
 5236 00a8 21000000 		.long	33
 5237 00ac 26000000 		.long	38
 5238 00b0 2E000000 		.long	46
 5239 00b4 33000000 		.long	51
 5240 00b8 37000000 		.long	55
 5241 00bc 3C000000 		.long	60
 5242 00c0 15000000 		.long	21
 5243 00c4 22000000 		.long	34
 5244 00c8 25000000 		.long	37
 5245 00cc 2F000000 		.long	47
 5246 00d0 32000000 		.long	50
 5247 00d4 38000000 		.long	56
 5248 00d8 3B000000 		.long	59
 5249 00dc 3D000000 		.long	61
 5250 00e0 23000000 		.long	35
 5251 00e4 24000000 		.long	36
 5252 00e8 30000000 		.long	48
 5253 00ec 31000000 		.long	49
 5254 00f0 39000000 		.long	57
 5255 00f4 3A000000 		.long	58
 5256 00f8 3E000000 		.long	62
 5257 00fc 3F000000 		.long	63
 5258              		.text
 5259              	.Letext0:
 5260              		.section	.text.unlikely.jpeg_fill_bit_buffer
 5261              	.Letext_cold0:
 5262              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 5263              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 5264              		.file 5 "/usr/include/libio.h"
 5265              		.file 6 "fltk-1.3.4-1/jpeg/jmorecfg.h"
 5266              		.file 7 "fltk-1.3.4-1/jpeg/jpeglib.h"
 5267              		.file 8 "fltk-1.3.4-1/jpeg/jpegint.h"
 5268              		.file 9 "fltk-1.3.4-1/jpeg/jerror.h"
 5269              		.file 10 "/usr/include/stdio.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 jdhuff.c
     /tmp/ccNOdYDZ.s:13     .text.jpeg_fill_bit_buffer:0000000000000000 jpeg_fill_bit_buffer
     /tmp/ccNOdYDZ.s:288    .text.jpeg_huff_decode:0000000000000000 jpeg_huff_decode
     /tmp/ccNOdYDZ.s:5003   .rodata.bmask:0000000000000000 bmask
     /tmp/ccNOdYDZ.s:492    .text.finish_pass_huff:0000000000000000 finish_pass_huff
     /tmp/ccNOdYDZ.s:524    .text.process_restart:0000000000000000 process_restart
     /tmp/ccNOdYDZ.s:619    .text.decode_mcu_DC_first:0000000000000000 decode_mcu_DC_first
     /tmp/ccNOdYDZ.s:962    .text.decode_mcu_AC_first:0000000000000000 decode_mcu_AC_first
     /tmp/ccNOdYDZ.s:1357   .text.decode_mcu_DC_refine:0000000000000000 decode_mcu_DC_refine
     /tmp/ccNOdYDZ.s:1538   .text.decode_mcu_AC_refine:0000000000000000 decode_mcu_AC_refine
     /tmp/ccNOdYDZ.s:2191   .text.decode_mcu_sub:0000000000000000 decode_mcu_sub
     /tmp/ccNOdYDZ.s:2919   .text.decode_mcu:0000000000000000 decode_mcu
     /tmp/ccNOdYDZ.s:3608   .text.jpeg_make_d_derived_tbl:0000000000000000 jpeg_make_d_derived_tbl
     /tmp/ccNOdYDZ.s:4083   .text.start_pass_huff_decoder:0000000000000000 start_pass_huff_decoder
     /tmp/ccNOdYDZ.s:5139   .rodata.jpeg_zigzag_order7:0000000000000000 jpeg_zigzag_order7
     /tmp/ccNOdYDZ.s:5098   .rodata.jpeg_zigzag_order6:0000000000000000 jpeg_zigzag_order6
     /tmp/ccNOdYDZ.s:5068   .rodata.jpeg_zigzag_order5:0000000000000000 jpeg_zigzag_order5
     /tmp/ccNOdYDZ.s:5047   .rodata.jpeg_zigzag_order4:0000000000000000 jpeg_zigzag_order4
     /tmp/ccNOdYDZ.s:5033   .rodata.jpeg_zigzag_order3:0000000000000000 jpeg_zigzag_order3
     /tmp/ccNOdYDZ.s:5024   .rodata.jpeg_zigzag_order2:0000000000000000 jpeg_zigzag_order2
     /tmp/ccNOdYDZ.s:5193   .rodata.jpeg_zigzag_order:0000000000000000 jpeg_zigzag_order
     /tmp/ccNOdYDZ.s:4866   .text.jinit_huff_decoder:0000000000000000 jinit_huff_decoder
                           .group:0000000000000000 wm4.0.cf9695abff4f49bdfe00dc4091904acd
                           .group:0000000000000000 wm4.stdcpredef.h.19.bf2bf6c5fb087dfb5ef2d2297c2795de
                           .group:0000000000000000 wm4.jconfig.h.10.247fc3ff67998f3074970b1373c70333
                           .group:0000000000000000 wm4.features.h.19.24da27e0a4d0d521fd057013d982b8b5
                           .group:0000000000000000 wm4.cdefs.h.19.56613e71f285ebad825b69b151170a81
                           .group:0000000000000000 wm4.wordsize.h.4.256e8fdbd37801980286acdbc40d0280
                           .group:0000000000000000 wm4.cdefs.h.432.619afd0aac7c4b439843706c1b28ddea
                           .group:0000000000000000 wm4.stubs64.h.10.918ceb5fa58268542bf143e4c1efbcf3
                           .group:0000000000000000 wm4.stdlib.h.27.59e2586c75bdbcb991b248ad7257b993
                           .group:0000000000000000 wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1
                           .group:0000000000000000 wm4.waitflags.h.25.e401b8bcfee800b540b27abd7cc78de9
                           .group:0000000000000000 wm4.waitstatus.h.28.93f167f49d64e2b9b99f98d1162a93bf
                           .group:0000000000000000 wm4.endian.h.19.ff00c9c0f5e9f9a9719c5de76ace57b4
                           .group:0000000000000000 wm4.endian.h.41.24cced64aef71195a51d4daa8e4f4a95
                           .group:0000000000000000 wm4.types.h.89.468e2451361e3b92f048f6cad51690ff
                           .group:0000000000000000 wm4.typesizes.h.24.40eb69a6270178f15d1bf3d7b6635a8b
                           .group:0000000000000000 wm4.byteswap.h.38.11ee5fdc0f6cc53a16c505b9233cecef
                           .group:0000000000000000 wm4.endian.h.63.97272d7c64d5db8020003b32e9289502
                           .group:0000000000000000 wm4.waitstatus.h.99.408b6270fa6eb71377201a241ef15f79
                           .group:0000000000000000 wm4.stdlib.h.50.84aeca2ac6f37d40e1e9b3cef757ba2d
                           .group:0000000000000000 wm4.types.h.23.f6dcbaa72f8f71361acef09804d45a5e
                           .group:0000000000000000 wm4.time.h.53.beb46e650cd406cb917b6b96b45e640a
                           .group:0000000000000000 wm4.stddef.h.238.847b6907dabda77be90a9ab7ad789e2e
                           .group:0000000000000000 wm4.types.h.187.bd5a05039b505b3620e6973f1b2ffeb1
                           .group:0000000000000000 wm4.select.h.28.eb2f3debdbcffd1442ebddaebc4fb6ff
                           .group:0000000000000000 wm4.sigset.h.20.f36413b6d2364ad847d3db53fb03e683
                           .group:0000000000000000 wm4.select.h.36.f76c3b9e55c871743863013cc4cc14c9
                           .group:0000000000000000 wm4.time.h.66.e70ce69790c975f0efb369340c432e0b
                           .group:0000000000000000 wm4.time.h.25.ae5284cdff565e87a9198d819340325d
                           .group:0000000000000000 wm4.select.h.49.e9d2041e5035cc68ebd1a20f7dbc8514
                           .group:0000000000000000 wm4.select2.h.27.f95f2ab0ffee66dc1b6575014894b21a
                           .group:0000000000000000 wm4.sysmacros.h.20.8a0c33ff175cd9b434a86c0aaa36f0a2
                           .group:0000000000000000 wm4.types.h.229.67b3f66bd74b06b451caec392a72a945
                           .group:0000000000000000 wm4.pthreadtypes.h.25.6892b1493314fcf446bbc76e7362acba
                           .group:0000000000000000 wm4.alloca.h.19.edefa922a76c1cbaaf1e416903ba2d1c
                           .group:0000000000000000 wm4.alloca.h.29.156e12058824cc23d961c4d3b13031f6
                           .group:0000000000000000 wm4.stdio.h.26.4719156f1aea2bb9662fd6c582dc9a4c
                           .group:0000000000000000 wm4.stddef.h.238.04cc7214bceba497b20d15c10fd97511
                           .group:0000000000000000 wm4.stdio.h.36.2dd12c1fd035242ad5cfd0152a01be5a
                           .group:0000000000000000 wm4._G_config.h.5.b0f37d9e474454cf6e459063458db32f
                           .group:0000000000000000 wm4.wchar.h.80.eea3eba2d2a17aace9470a8e0d8218dc
                           .group:0000000000000000 wm4._G_config.h.46.5187c97b14fd664662cb32e6b94fc49e
                           .group:0000000000000000 wm4.libio.h.33.a775b9ecae273f33bc59931e9891e4ca
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.libio.h.51.dab170798ec1df48c625aea7c30e1b63
                           .group:0000000000000000 wm4.stdio.h.80.17b7dd1ca72d8a61987532cb1d80194a
                           .group:0000000000000000 wm4.stdio_lim.h.23.557290a6cddeba0587f574f29e3a5fb9
                           .group:0000000000000000 wm4.stdio.h.172.df21df34a7396d7da2e08f9b617d582f
                           .group:0000000000000000 wm4.stdio.h.26.cae64f7ada9bb8327a89dba6a5e93655
                           .group:0000000000000000 wm4.string.h.23.8394011d5995a16f15d67d04e84a1d69
                           .group:0000000000000000 wm4.string.h.24.1b0dc67418e7128d207285861439c2f8
                           .group:0000000000000000 wm4.string2.h.45.00535b99420fc3014c2da41d6645330d
                           .group:0000000000000000 wm4.string3.h.31.0c4b9301b754a2db05eaafef869657d2
                           .group:0000000000000000 wm4.jinclude.h.67.b19f941ec97c4845fa4609292c7e2db4
                           .group:0000000000000000 wm4.jmorecfg.h.33.3b4c5f9cc07b3737823b06caf24d5b05
                           .group:0000000000000000 wm4.jpeglib.h.40.4f111c27252a38df39328d65454e82f4
                           .group:0000000000000000 wm4.jpegint.h.26.5219ef5d4e4921371d38e77b6091fd20
                           .group:0000000000000000 wm4.jerror.h.25.1dbd8674e70ab5215bc0037320e5c2a2

UNDEFINED SYMBOLS
__stack_chk_fail
jpeg_natural_order
