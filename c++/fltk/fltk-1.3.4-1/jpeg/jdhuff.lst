   1              		.file	"jdhuff.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.jpeg_fill_bit_buffer,"ax",@progbits
   5              		.p2align 4
   7              	jpeg_fill_bit_buffer:
   8              	.LVL0:
   9              	.LFB52:
  10              		.file 1 "fltk-1.3.4-1/jpeg/jdhuff.c"
   1:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
   2:fltk-1.3.4-1/jpeg/jdhuff.c ****  * jdhuff.c
   3:fltk-1.3.4-1/jpeg/jdhuff.c ****  *
   4:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Copyright (C) 1991-1997, Thomas G. Lane.
   5:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Modified 2006-2013 by Guido Vollbeding.
   6:fltk-1.3.4-1/jpeg/jdhuff.c ****  * This file is part of the Independent JPEG Group's software.
   7:fltk-1.3.4-1/jpeg/jdhuff.c ****  * For conditions of distribution and use, see the accompanying README file.
   8:fltk-1.3.4-1/jpeg/jdhuff.c ****  *
   9:fltk-1.3.4-1/jpeg/jdhuff.c ****  * This file contains Huffman entropy decoding routines.
  10:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Both sequential and progressive modes are supported in this single module.
  11:fltk-1.3.4-1/jpeg/jdhuff.c ****  *
  12:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Much of the complexity here has to do with supporting input suspension.
  13:fltk-1.3.4-1/jpeg/jdhuff.c ****  * If the data source module demands suspension, we want to be able to back
  14:fltk-1.3.4-1/jpeg/jdhuff.c ****  * up to the start of the current MCU.  To do this, we copy state variables
  15:fltk-1.3.4-1/jpeg/jdhuff.c ****  * into local working storage, and update them back to the permanent
  16:fltk-1.3.4-1/jpeg/jdhuff.c ****  * storage only upon successful completion of an MCU.
  17:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
  18:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  19:fltk-1.3.4-1/jpeg/jdhuff.c **** #define JPEG_INTERNALS
  20:fltk-1.3.4-1/jpeg/jdhuff.c **** #include "jinclude.h"
  21:fltk-1.3.4-1/jpeg/jdhuff.c **** #include "jpeglib.h"
  22:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  23:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  24:fltk-1.3.4-1/jpeg/jdhuff.c **** /* Derived data constructed for each Huffman table */
  25:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  26:fltk-1.3.4-1/jpeg/jdhuff.c **** #define HUFF_LOOKAHEAD	8	/* # of bits of lookahead */
  27:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  28:fltk-1.3.4-1/jpeg/jdhuff.c **** typedef struct {
  29:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Basic tables: (element [0] of each array is unused) */
  30:fltk-1.3.4-1/jpeg/jdhuff.c ****   INT32 maxcode[18];		/* largest code of length k (-1 if none) */
  31:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* (maxcode[17] is a sentinel to ensure jpeg_huff_decode terminates) */
  32:fltk-1.3.4-1/jpeg/jdhuff.c ****   INT32 valoffset[17];		/* huffval[] offset for codes of length k */
  33:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* valoffset[k] = huffval[] index of 1st symbol of code length k, less
  34:fltk-1.3.4-1/jpeg/jdhuff.c ****    * the smallest code of length k; so given a code of length k, the
  35:fltk-1.3.4-1/jpeg/jdhuff.c ****    * corresponding symbol is huffval[code + valoffset[k]]
  36:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
  37:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  38:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Link to public Huffman table (needed only in jpeg_huff_decode) */
  39:fltk-1.3.4-1/jpeg/jdhuff.c ****   JHUFF_TBL *pub;
  40:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  41:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Lookahead tables: indexed by the next HUFF_LOOKAHEAD bits of
  42:fltk-1.3.4-1/jpeg/jdhuff.c ****    * the input data stream.  If the next Huffman code is no more
  43:fltk-1.3.4-1/jpeg/jdhuff.c ****    * than HUFF_LOOKAHEAD bits long, we can obtain its length and
  44:fltk-1.3.4-1/jpeg/jdhuff.c ****    * the corresponding symbol directly from these tables.
  45:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
  46:fltk-1.3.4-1/jpeg/jdhuff.c ****   int look_nbits[1<<HUFF_LOOKAHEAD]; /* # bits, or 0 if too long */
  47:fltk-1.3.4-1/jpeg/jdhuff.c ****   UINT8 look_sym[1<<HUFF_LOOKAHEAD]; /* symbol, or unused */
  48:fltk-1.3.4-1/jpeg/jdhuff.c **** } d_derived_tbl;
  49:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  50:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  51:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
  52:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Fetching the next N bits from the input stream is a time-critical operation
  53:fltk-1.3.4-1/jpeg/jdhuff.c ****  * for the Huffman decoders.  We implement it with a combination of inline
  54:fltk-1.3.4-1/jpeg/jdhuff.c ****  * macros and out-of-line subroutines.  Note that N (the number of bits
  55:fltk-1.3.4-1/jpeg/jdhuff.c ****  * demanded at one time) never exceeds 15 for JPEG use.
  56:fltk-1.3.4-1/jpeg/jdhuff.c ****  *
  57:fltk-1.3.4-1/jpeg/jdhuff.c ****  * We read source bytes into get_buffer and dole out bits as needed.
  58:fltk-1.3.4-1/jpeg/jdhuff.c ****  * If get_buffer already contains enough bits, they are fetched in-line
  59:fltk-1.3.4-1/jpeg/jdhuff.c ****  * by the macros CHECK_BIT_BUFFER and GET_BITS.  When there aren't enough
  60:fltk-1.3.4-1/jpeg/jdhuff.c ****  * bits, jpeg_fill_bit_buffer is called; it will attempt to fill get_buffer
  61:fltk-1.3.4-1/jpeg/jdhuff.c ****  * as full as possible (not just to the number of bits needed; this
  62:fltk-1.3.4-1/jpeg/jdhuff.c ****  * prefetching reduces the overhead cost of calling jpeg_fill_bit_buffer).
  63:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Note that jpeg_fill_bit_buffer may return FALSE to indicate suspension.
  64:fltk-1.3.4-1/jpeg/jdhuff.c ****  * On TRUE return, jpeg_fill_bit_buffer guarantees that get_buffer contains
  65:fltk-1.3.4-1/jpeg/jdhuff.c ****  * at least the requested number of bits --- dummy zeroes are inserted if
  66:fltk-1.3.4-1/jpeg/jdhuff.c ****  * necessary.
  67:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
  68:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  69:fltk-1.3.4-1/jpeg/jdhuff.c **** typedef INT32 bit_buf_type;	/* type of bit-extraction buffer */
  70:fltk-1.3.4-1/jpeg/jdhuff.c **** #define BIT_BUF_SIZE  32	/* size of buffer in bits */
  71:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  72:fltk-1.3.4-1/jpeg/jdhuff.c **** /* If long is > 32 bits on your machine, and shifting/masking longs is
  73:fltk-1.3.4-1/jpeg/jdhuff.c ****  * reasonably fast, making bit_buf_type be long and setting BIT_BUF_SIZE
  74:fltk-1.3.4-1/jpeg/jdhuff.c ****  * appropriately should be a win.  Unfortunately we can't define the size
  75:fltk-1.3.4-1/jpeg/jdhuff.c ****  * with something like  #define BIT_BUF_SIZE (sizeof(bit_buf_type)*8)
  76:fltk-1.3.4-1/jpeg/jdhuff.c ****  * because not all machines measure sizeof in 8-bit bytes.
  77:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
  78:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  79:fltk-1.3.4-1/jpeg/jdhuff.c **** typedef struct {		/* Bitreading state saved across MCUs */
  80:fltk-1.3.4-1/jpeg/jdhuff.c ****   bit_buf_type get_buffer;	/* current bit-extraction buffer */
  81:fltk-1.3.4-1/jpeg/jdhuff.c ****   int bits_left;		/* # of unused bits in it */
  82:fltk-1.3.4-1/jpeg/jdhuff.c **** } bitread_perm_state;
  83:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  84:fltk-1.3.4-1/jpeg/jdhuff.c **** typedef struct {		/* Bitreading working state within an MCU */
  85:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Current data source location */
  86:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* We need a copy, rather than munging the original, in case of suspension */
  87:fltk-1.3.4-1/jpeg/jdhuff.c ****   const JOCTET * next_input_byte; /* => next byte to read from source */
  88:fltk-1.3.4-1/jpeg/jdhuff.c ****   size_t bytes_in_buffer;	/* # of bytes remaining in source buffer */
  89:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Bit input buffer --- note these values are kept in register variables,
  90:fltk-1.3.4-1/jpeg/jdhuff.c ****    * not in this struct, inside the inner loops.
  91:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
  92:fltk-1.3.4-1/jpeg/jdhuff.c ****   bit_buf_type get_buffer;	/* current bit-extraction buffer */
  93:fltk-1.3.4-1/jpeg/jdhuff.c ****   int bits_left;		/* # of unused bits in it */
  94:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Pointer needed by jpeg_fill_bit_buffer. */
  95:fltk-1.3.4-1/jpeg/jdhuff.c ****   j_decompress_ptr cinfo;	/* back link to decompress master record */
  96:fltk-1.3.4-1/jpeg/jdhuff.c **** } bitread_working_state;
  97:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  98:fltk-1.3.4-1/jpeg/jdhuff.c **** /* Macros to declare and load/save bitread local variables. */
  99:fltk-1.3.4-1/jpeg/jdhuff.c **** #define BITREAD_STATE_VARS  \
 100:fltk-1.3.4-1/jpeg/jdhuff.c **** 	register bit_buf_type get_buffer;  \
 101:fltk-1.3.4-1/jpeg/jdhuff.c **** 	register int bits_left;  \
 102:fltk-1.3.4-1/jpeg/jdhuff.c **** 	bitread_working_state br_state
 103:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 104:fltk-1.3.4-1/jpeg/jdhuff.c **** #define BITREAD_LOAD_STATE(cinfop,permstate)  \
 105:fltk-1.3.4-1/jpeg/jdhuff.c **** 	br_state.cinfo = cinfop; \
 106:fltk-1.3.4-1/jpeg/jdhuff.c **** 	br_state.next_input_byte = cinfop->src->next_input_byte; \
 107:fltk-1.3.4-1/jpeg/jdhuff.c **** 	br_state.bytes_in_buffer = cinfop->src->bytes_in_buffer; \
 108:fltk-1.3.4-1/jpeg/jdhuff.c **** 	get_buffer = permstate.get_buffer; \
 109:fltk-1.3.4-1/jpeg/jdhuff.c **** 	bits_left = permstate.bits_left;
 110:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 111:fltk-1.3.4-1/jpeg/jdhuff.c **** #define BITREAD_SAVE_STATE(cinfop,permstate)  \
 112:fltk-1.3.4-1/jpeg/jdhuff.c **** 	cinfop->src->next_input_byte = br_state.next_input_byte; \
 113:fltk-1.3.4-1/jpeg/jdhuff.c **** 	cinfop->src->bytes_in_buffer = br_state.bytes_in_buffer; \
 114:fltk-1.3.4-1/jpeg/jdhuff.c **** 	permstate.get_buffer = get_buffer; \
 115:fltk-1.3.4-1/jpeg/jdhuff.c **** 	permstate.bits_left = bits_left
 116:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 117:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 118:fltk-1.3.4-1/jpeg/jdhuff.c ****  * These macros provide the in-line portion of bit fetching.
 119:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Use CHECK_BIT_BUFFER to ensure there are N bits in get_buffer
 120:fltk-1.3.4-1/jpeg/jdhuff.c ****  * before using GET_BITS, PEEK_BITS, or DROP_BITS.
 121:fltk-1.3.4-1/jpeg/jdhuff.c ****  * The variables get_buffer and bits_left are assumed to be locals,
 122:fltk-1.3.4-1/jpeg/jdhuff.c ****  * but the state struct might not be (jpeg_huff_decode needs this).
 123:fltk-1.3.4-1/jpeg/jdhuff.c ****  *	CHECK_BIT_BUFFER(state,n,action);
 124:fltk-1.3.4-1/jpeg/jdhuff.c ****  *		Ensure there are N bits in get_buffer; if suspend, take action.
 125:fltk-1.3.4-1/jpeg/jdhuff.c ****  *      val = GET_BITS(n);
 126:fltk-1.3.4-1/jpeg/jdhuff.c ****  *		Fetch next N bits.
 127:fltk-1.3.4-1/jpeg/jdhuff.c ****  *      val = PEEK_BITS(n);
 128:fltk-1.3.4-1/jpeg/jdhuff.c ****  *		Fetch next N bits without removing them from the buffer.
 129:fltk-1.3.4-1/jpeg/jdhuff.c ****  *	DROP_BITS(n);
 130:fltk-1.3.4-1/jpeg/jdhuff.c ****  *		Discard next N bits.
 131:fltk-1.3.4-1/jpeg/jdhuff.c ****  * The value N should be a simple variable, not an expression, because it
 132:fltk-1.3.4-1/jpeg/jdhuff.c ****  * is evaluated multiple times.
 133:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 134:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 135:fltk-1.3.4-1/jpeg/jdhuff.c **** #define CHECK_BIT_BUFFER(state,nbits,action) \
 136:fltk-1.3.4-1/jpeg/jdhuff.c **** 	{ if (bits_left < (nbits)) {  \
 137:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (! jpeg_fill_bit_buffer(&(state),get_buffer,bits_left,nbits))  \
 138:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      { action; }  \
 139:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    get_buffer = (state).get_buffer; bits_left = (state).bits_left; } }
 140:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 141:fltk-1.3.4-1/jpeg/jdhuff.c **** #define GET_BITS(nbits) \
 142:fltk-1.3.4-1/jpeg/jdhuff.c **** 	(((int) (get_buffer >> (bits_left -= (nbits)))) & BIT_MASK(nbits))
 143:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 144:fltk-1.3.4-1/jpeg/jdhuff.c **** #define PEEK_BITS(nbits) \
 145:fltk-1.3.4-1/jpeg/jdhuff.c **** 	(((int) (get_buffer >> (bits_left -  (nbits)))) & BIT_MASK(nbits))
 146:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 147:fltk-1.3.4-1/jpeg/jdhuff.c **** #define DROP_BITS(nbits) \
 148:fltk-1.3.4-1/jpeg/jdhuff.c **** 	(bits_left -= (nbits))
 149:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 150:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 151:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 152:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Code for extracting next Huffman-coded symbol from input bit stream.
 153:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Again, this is time-critical and we make the main paths be macros.
 154:fltk-1.3.4-1/jpeg/jdhuff.c ****  *
 155:fltk-1.3.4-1/jpeg/jdhuff.c ****  * We use a lookahead table to process codes of up to HUFF_LOOKAHEAD bits
 156:fltk-1.3.4-1/jpeg/jdhuff.c ****  * without looping.  Usually, more than 95% of the Huffman codes will be 8
 157:fltk-1.3.4-1/jpeg/jdhuff.c ****  * or fewer bits long.  The few overlength codes are handled with a loop,
 158:fltk-1.3.4-1/jpeg/jdhuff.c ****  * which need not be inline code.
 159:fltk-1.3.4-1/jpeg/jdhuff.c ****  *
 160:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Notes about the HUFF_DECODE macro:
 161:fltk-1.3.4-1/jpeg/jdhuff.c ****  * 1. Near the end of the data segment, we may fail to get enough bits
 162:fltk-1.3.4-1/jpeg/jdhuff.c ****  *    for a lookahead.  In that case, we do it the hard way.
 163:fltk-1.3.4-1/jpeg/jdhuff.c ****  * 2. If the lookahead table contains no entry, the next code must be
 164:fltk-1.3.4-1/jpeg/jdhuff.c ****  *    more than HUFF_LOOKAHEAD bits long.
 165:fltk-1.3.4-1/jpeg/jdhuff.c ****  * 3. jpeg_huff_decode returns -1 if forced to suspend.
 166:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 167:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 168:fltk-1.3.4-1/jpeg/jdhuff.c **** #define HUFF_DECODE(result,state,htbl,failaction,slowlabel) \
 169:fltk-1.3.4-1/jpeg/jdhuff.c **** { register int nb, look; \
 170:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (bits_left < HUFF_LOOKAHEAD) { \
 171:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (! jpeg_fill_bit_buffer(&state,get_buffer,bits_left, 0)) {failaction;} \
 172:fltk-1.3.4-1/jpeg/jdhuff.c ****     get_buffer = state.get_buffer; bits_left = state.bits_left; \
 173:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (bits_left < HUFF_LOOKAHEAD) { \
 174:fltk-1.3.4-1/jpeg/jdhuff.c ****       nb = 1; goto slowlabel; \
 175:fltk-1.3.4-1/jpeg/jdhuff.c ****     } \
 176:fltk-1.3.4-1/jpeg/jdhuff.c ****   } \
 177:fltk-1.3.4-1/jpeg/jdhuff.c ****   look = PEEK_BITS(HUFF_LOOKAHEAD); \
 178:fltk-1.3.4-1/jpeg/jdhuff.c ****   if ((nb = htbl->look_nbits[look]) != 0) { \
 179:fltk-1.3.4-1/jpeg/jdhuff.c ****     DROP_BITS(nb); \
 180:fltk-1.3.4-1/jpeg/jdhuff.c ****     result = htbl->look_sym[look]; \
 181:fltk-1.3.4-1/jpeg/jdhuff.c ****   } else { \
 182:fltk-1.3.4-1/jpeg/jdhuff.c ****     nb = HUFF_LOOKAHEAD+1; \
 183:fltk-1.3.4-1/jpeg/jdhuff.c **** slowlabel: \
 184:fltk-1.3.4-1/jpeg/jdhuff.c ****     if ((result=jpeg_huff_decode(&state,get_buffer,bits_left,htbl,nb)) < 0) \
 185:fltk-1.3.4-1/jpeg/jdhuff.c **** 	{ failaction; } \
 186:fltk-1.3.4-1/jpeg/jdhuff.c ****     get_buffer = state.get_buffer; bits_left = state.bits_left; \
 187:fltk-1.3.4-1/jpeg/jdhuff.c ****   } \
 188:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 189:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 190:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 191:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 192:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Expanded entropy decoder object for Huffman decoding.
 193:fltk-1.3.4-1/jpeg/jdhuff.c ****  *
 194:fltk-1.3.4-1/jpeg/jdhuff.c ****  * The savable_state subrecord contains fields that change within an MCU,
 195:fltk-1.3.4-1/jpeg/jdhuff.c ****  * but must not be updated permanently until we complete the MCU.
 196:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 197:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 198:fltk-1.3.4-1/jpeg/jdhuff.c **** typedef struct {
 199:fltk-1.3.4-1/jpeg/jdhuff.c ****   unsigned int EOBRUN;			/* remaining EOBs in EOBRUN */
 200:fltk-1.3.4-1/jpeg/jdhuff.c ****   int last_dc_val[MAX_COMPS_IN_SCAN];	/* last DC coef for each component */
 201:fltk-1.3.4-1/jpeg/jdhuff.c **** } savable_state;
 202:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 203:fltk-1.3.4-1/jpeg/jdhuff.c **** /* This macro is to work around compilers with missing or broken
 204:fltk-1.3.4-1/jpeg/jdhuff.c ****  * structure assignment.  You'll need to fix this code if you have
 205:fltk-1.3.4-1/jpeg/jdhuff.c ****  * such a compiler and you change MAX_COMPS_IN_SCAN.
 206:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 207:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 208:fltk-1.3.4-1/jpeg/jdhuff.c **** #ifndef NO_STRUCT_ASSIGN
 209:fltk-1.3.4-1/jpeg/jdhuff.c **** #define ASSIGN_STATE(dest,src)  ((dest) = (src))
 210:fltk-1.3.4-1/jpeg/jdhuff.c **** #else
 211:fltk-1.3.4-1/jpeg/jdhuff.c **** #if MAX_COMPS_IN_SCAN == 4
 212:fltk-1.3.4-1/jpeg/jdhuff.c **** #define ASSIGN_STATE(dest,src)  \
 213:fltk-1.3.4-1/jpeg/jdhuff.c **** 	((dest).EOBRUN = (src).EOBRUN, \
 214:fltk-1.3.4-1/jpeg/jdhuff.c **** 	 (dest).last_dc_val[0] = (src).last_dc_val[0], \
 215:fltk-1.3.4-1/jpeg/jdhuff.c **** 	 (dest).last_dc_val[1] = (src).last_dc_val[1], \
 216:fltk-1.3.4-1/jpeg/jdhuff.c **** 	 (dest).last_dc_val[2] = (src).last_dc_val[2], \
 217:fltk-1.3.4-1/jpeg/jdhuff.c **** 	 (dest).last_dc_val[3] = (src).last_dc_val[3])
 218:fltk-1.3.4-1/jpeg/jdhuff.c **** #endif
 219:fltk-1.3.4-1/jpeg/jdhuff.c **** #endif
 220:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 221:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 222:fltk-1.3.4-1/jpeg/jdhuff.c **** typedef struct {
 223:fltk-1.3.4-1/jpeg/jdhuff.c ****   struct jpeg_entropy_decoder pub; /* public fields */
 224:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 225:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* These fields are loaded into local variables at start of each MCU.
 226:fltk-1.3.4-1/jpeg/jdhuff.c ****    * In case of suspension, we exit WITHOUT updating them.
 227:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
 228:fltk-1.3.4-1/jpeg/jdhuff.c ****   bitread_perm_state bitstate;	/* Bit buffer at start of MCU */
 229:fltk-1.3.4-1/jpeg/jdhuff.c ****   savable_state saved;		/* Other state at start of MCU */
 230:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 231:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* These fields are NOT loaded into local working state. */
 232:fltk-1.3.4-1/jpeg/jdhuff.c ****   boolean insufficient_data;	/* set TRUE after emitting warning */
 233:fltk-1.3.4-1/jpeg/jdhuff.c ****   unsigned int restarts_to_go;	/* MCUs left in this restart interval */
 234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 235:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Following two fields used only in progressive mode */
 236:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 237:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Pointers to derived tables (these workspaces have image lifespan) */
 238:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl * derived_tbls[NUM_HUFF_TBLS];
 239:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 240:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl * ac_derived_tbl; /* active table during an AC scan */
 241:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 242:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Following fields used only in sequential mode */
 243:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 244:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Pointers to derived tables (these workspaces have image lifespan) */
 245:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl * dc_derived_tbls[NUM_HUFF_TBLS];
 246:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl * ac_derived_tbls[NUM_HUFF_TBLS];
 247:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 248:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Precalculated info set up by start_pass for use in decode_mcu: */
 249:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 250:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Pointers to derived tables to be used for each block within an MCU */
 251:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl * dc_cur_tbls[D_MAX_BLOCKS_IN_MCU];
 252:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl * ac_cur_tbls[D_MAX_BLOCKS_IN_MCU];
 253:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Whether we care about the DC and AC coefficient values for each block */
 254:fltk-1.3.4-1/jpeg/jdhuff.c ****   int coef_limit[D_MAX_BLOCKS_IN_MCU];
 255:fltk-1.3.4-1/jpeg/jdhuff.c **** } huff_entropy_decoder;
 256:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 257:fltk-1.3.4-1/jpeg/jdhuff.c **** typedef huff_entropy_decoder * huff_entropy_ptr;
 258:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 259:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 260:fltk-1.3.4-1/jpeg/jdhuff.c **** static const int jpeg_zigzag_order[8][8] = {
 261:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  0,  1,  5,  6, 14, 15, 27, 28 },
 262:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  2,  4,  7, 13, 16, 26, 29, 42 },
 263:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  3,  8, 12, 17, 25, 30, 41, 43 },
 264:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  9, 11, 18, 24, 31, 40, 44, 53 },
 265:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 10, 19, 23, 32, 39, 45, 52, 54 },
 266:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 20, 22, 33, 38, 46, 51, 55, 60 },
 267:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 21, 34, 37, 47, 50, 56, 59, 61 },
 268:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 35, 36, 48, 49, 57, 58, 62, 63 }
 269:fltk-1.3.4-1/jpeg/jdhuff.c **** };
 270:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 271:fltk-1.3.4-1/jpeg/jdhuff.c **** static const int jpeg_zigzag_order7[7][7] = {
 272:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  0,  1,  5,  6, 14, 15, 27 },
 273:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  2,  4,  7, 13, 16, 26, 28 },
 274:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  3,  8, 12, 17, 25, 29, 38 },
 275:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  9, 11, 18, 24, 30, 37, 39 },
 276:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 10, 19, 23, 31, 36, 40, 45 },
 277:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 20, 22, 32, 35, 41, 44, 46 },
 278:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 21, 33, 34, 42, 43, 47, 48 }
 279:fltk-1.3.4-1/jpeg/jdhuff.c **** };
 280:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 281:fltk-1.3.4-1/jpeg/jdhuff.c **** static const int jpeg_zigzag_order6[6][6] = {
 282:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  0,  1,  5,  6, 14, 15 },
 283:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  2,  4,  7, 13, 16, 25 },
 284:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  3,  8, 12, 17, 24, 26 },
 285:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  9, 11, 18, 23, 27, 32 },
 286:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 10, 19, 22, 28, 31, 33 },
 287:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 20, 21, 29, 30, 34, 35 }
 288:fltk-1.3.4-1/jpeg/jdhuff.c **** };
 289:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 290:fltk-1.3.4-1/jpeg/jdhuff.c **** static const int jpeg_zigzag_order5[5][5] = {
 291:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  0,  1,  5,  6, 14 },
 292:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  2,  4,  7, 13, 15 },
 293:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  3,  8, 12, 16, 21 },
 294:fltk-1.3.4-1/jpeg/jdhuff.c ****   {  9, 11, 17, 20, 22 },
 295:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 10, 18, 19, 23, 24 }
 296:fltk-1.3.4-1/jpeg/jdhuff.c **** };
 297:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 298:fltk-1.3.4-1/jpeg/jdhuff.c **** static const int jpeg_zigzag_order4[4][4] = {
 299:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 0,  1,  5,  6 },
 300:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 2,  4,  7, 12 },
 301:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 3,  8, 11, 13 },
 302:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 9, 10, 14, 15 }
 303:fltk-1.3.4-1/jpeg/jdhuff.c **** };
 304:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 305:fltk-1.3.4-1/jpeg/jdhuff.c **** static const int jpeg_zigzag_order3[3][3] = {
 306:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 0, 1, 5 },
 307:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 2, 4, 6 },
 308:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 3, 7, 8 }
 309:fltk-1.3.4-1/jpeg/jdhuff.c **** };
 310:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 311:fltk-1.3.4-1/jpeg/jdhuff.c **** static const int jpeg_zigzag_order2[2][2] = {
 312:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 0, 1 },
 313:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 2, 3 }
 314:fltk-1.3.4-1/jpeg/jdhuff.c **** };
 315:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 316:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 317:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 318:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Compute the derived values for a Huffman table.
 319:fltk-1.3.4-1/jpeg/jdhuff.c ****  * This routine also performs some validation checks on the table.
 320:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 321:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 322:fltk-1.3.4-1/jpeg/jdhuff.c **** LOCAL(void)
 323:fltk-1.3.4-1/jpeg/jdhuff.c **** jpeg_make_d_derived_tbl (j_decompress_ptr cinfo, boolean isDC, int tblno,
 324:fltk-1.3.4-1/jpeg/jdhuff.c **** 			 d_derived_tbl ** pdtbl)
 325:fltk-1.3.4-1/jpeg/jdhuff.c **** {
 326:fltk-1.3.4-1/jpeg/jdhuff.c ****   JHUFF_TBL *htbl;
 327:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl *dtbl;
 328:fltk-1.3.4-1/jpeg/jdhuff.c ****   int p, i, l, si, numsymbols;
 329:fltk-1.3.4-1/jpeg/jdhuff.c ****   int lookbits, ctr;
 330:fltk-1.3.4-1/jpeg/jdhuff.c ****   char huffsize[257];
 331:fltk-1.3.4-1/jpeg/jdhuff.c ****   unsigned int huffcode[257];
 332:fltk-1.3.4-1/jpeg/jdhuff.c ****   unsigned int code;
 333:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 334:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Note that huffsize[] and huffcode[] are filled in code-length order,
 335:fltk-1.3.4-1/jpeg/jdhuff.c ****    * paralleling the order of the symbols themselves in htbl->huffval[].
 336:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
 337:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 338:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Find the input Huffman table */
 339:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 340:fltk-1.3.4-1/jpeg/jdhuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 341:fltk-1.3.4-1/jpeg/jdhuff.c ****   htbl =
 342:fltk-1.3.4-1/jpeg/jdhuff.c ****     isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 343:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (htbl == NULL)
 344:fltk-1.3.4-1/jpeg/jdhuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 345:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 346:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Allocate a workspace if we haven't already done so. */
 347:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (*pdtbl == NULL)
 348:fltk-1.3.4-1/jpeg/jdhuff.c ****     *pdtbl = (d_derived_tbl *)
 349:fltk-1.3.4-1/jpeg/jdhuff.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 350:fltk-1.3.4-1/jpeg/jdhuff.c **** 				  SIZEOF(d_derived_tbl));
 351:fltk-1.3.4-1/jpeg/jdhuff.c ****   dtbl = *pdtbl;
 352:fltk-1.3.4-1/jpeg/jdhuff.c ****   dtbl->pub = htbl;		/* fill in back link */
 353:fltk-1.3.4-1/jpeg/jdhuff.c ****   
 354:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Figure C.1: make table of Huffman code length for each symbol */
 355:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 356:fltk-1.3.4-1/jpeg/jdhuff.c ****   p = 0;
 357:fltk-1.3.4-1/jpeg/jdhuff.c ****   for (l = 1; l <= 16; l++) {
 358:fltk-1.3.4-1/jpeg/jdhuff.c ****     i = (int) htbl->bits[l];
 359:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (i < 0 || p + i > 256)	/* protect against table overrun */
 360:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 361:fltk-1.3.4-1/jpeg/jdhuff.c ****     while (i--)
 362:fltk-1.3.4-1/jpeg/jdhuff.c ****       huffsize[p++] = (char) l;
 363:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 364:fltk-1.3.4-1/jpeg/jdhuff.c ****   huffsize[p] = 0;
 365:fltk-1.3.4-1/jpeg/jdhuff.c ****   numsymbols = p;
 366:fltk-1.3.4-1/jpeg/jdhuff.c ****   
 367:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Figure C.2: generate the codes themselves */
 368:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* We also validate that the counts represent a legal Huffman code tree. */
 369:fltk-1.3.4-1/jpeg/jdhuff.c ****   
 370:fltk-1.3.4-1/jpeg/jdhuff.c ****   code = 0;
 371:fltk-1.3.4-1/jpeg/jdhuff.c ****   si = huffsize[0];
 372:fltk-1.3.4-1/jpeg/jdhuff.c ****   p = 0;
 373:fltk-1.3.4-1/jpeg/jdhuff.c ****   while (huffsize[p]) {
 374:fltk-1.3.4-1/jpeg/jdhuff.c ****     while (((int) huffsize[p]) == si) {
 375:fltk-1.3.4-1/jpeg/jdhuff.c ****       huffcode[p++] = code;
 376:fltk-1.3.4-1/jpeg/jdhuff.c ****       code++;
 377:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 378:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* code is now 1 more than the last code used for codelength si; but
 379:fltk-1.3.4-1/jpeg/jdhuff.c ****      * it must still fit in si bits, since no code is allowed to be all ones.
 380:fltk-1.3.4-1/jpeg/jdhuff.c ****      */
 381:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (((INT32) code) >= (((INT32) 1) << si))
 382:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 383:fltk-1.3.4-1/jpeg/jdhuff.c ****     code <<= 1;
 384:fltk-1.3.4-1/jpeg/jdhuff.c ****     si++;
 385:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 386:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 387:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Figure F.15: generate decoding tables for bit-sequential decoding */
 388:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 389:fltk-1.3.4-1/jpeg/jdhuff.c ****   p = 0;
 390:fltk-1.3.4-1/jpeg/jdhuff.c ****   for (l = 1; l <= 16; l++) {
 391:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (htbl->bits[l]) {
 392:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* valoffset[l] = huffval[] index of 1st symbol of code length l,
 393:fltk-1.3.4-1/jpeg/jdhuff.c ****        * minus the minimum code of length l
 394:fltk-1.3.4-1/jpeg/jdhuff.c ****        */
 395:fltk-1.3.4-1/jpeg/jdhuff.c ****       dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 396:fltk-1.3.4-1/jpeg/jdhuff.c ****       p += htbl->bits[l];
 397:fltk-1.3.4-1/jpeg/jdhuff.c ****       dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 398:fltk-1.3.4-1/jpeg/jdhuff.c ****     } else {
 399:fltk-1.3.4-1/jpeg/jdhuff.c ****       dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 400:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 401:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 402:fltk-1.3.4-1/jpeg/jdhuff.c ****   dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 403:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 404:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Compute lookahead tables to speed up decoding.
 405:fltk-1.3.4-1/jpeg/jdhuff.c ****    * First we set all the table entries to 0, indicating "too long";
 406:fltk-1.3.4-1/jpeg/jdhuff.c ****    * then we iterate through the Huffman codes that are short enough and
 407:fltk-1.3.4-1/jpeg/jdhuff.c ****    * fill in all the entries that correspond to bit sequences starting
 408:fltk-1.3.4-1/jpeg/jdhuff.c ****    * with that code.
 409:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
 410:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 411:fltk-1.3.4-1/jpeg/jdhuff.c ****   MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 412:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 413:fltk-1.3.4-1/jpeg/jdhuff.c ****   p = 0;
 414:fltk-1.3.4-1/jpeg/jdhuff.c ****   for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 415:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 416:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* l = current code's length, p = its index in huffcode[] & huffval[]. */
 417:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Generate left-justified code followed by all possible bit sequences */
 418:fltk-1.3.4-1/jpeg/jdhuff.c ****       lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 419:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 420:fltk-1.3.4-1/jpeg/jdhuff.c **** 	dtbl->look_nbits[lookbits] = l;
 421:fltk-1.3.4-1/jpeg/jdhuff.c **** 	dtbl->look_sym[lookbits] = htbl->huffval[p];
 422:fltk-1.3.4-1/jpeg/jdhuff.c **** 	lookbits++;
 423:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 424:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 425:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 426:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 427:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Validate symbols as being reasonable.
 428:fltk-1.3.4-1/jpeg/jdhuff.c ****    * For AC tables, we make no check, but accept all byte values 0..255.
 429:fltk-1.3.4-1/jpeg/jdhuff.c ****    * For DC tables, we require the symbols to be in range 0..15.
 430:fltk-1.3.4-1/jpeg/jdhuff.c ****    * (Tighter bounds could be applied depending on the data depth and mode,
 431:fltk-1.3.4-1/jpeg/jdhuff.c ****    * but this is sufficient to ensure safe decoding.)
 432:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
 433:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (isDC) {
 434:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (i = 0; i < numsymbols; i++) {
 435:fltk-1.3.4-1/jpeg/jdhuff.c ****       int sym = htbl->huffval[i];
 436:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (sym < 0 || sym > 15)
 437:fltk-1.3.4-1/jpeg/jdhuff.c **** 	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 438:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 439:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 440:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 441:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 442:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 443:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 444:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Out-of-line code for bit fetching.
 445:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Note: current values of get_buffer and bits_left are passed as parameters,
 446:fltk-1.3.4-1/jpeg/jdhuff.c ****  * but are returned in the corresponding fields of the state struct.
 447:fltk-1.3.4-1/jpeg/jdhuff.c ****  *
 448:fltk-1.3.4-1/jpeg/jdhuff.c ****  * On most machines MIN_GET_BITS should be 25 to allow the full 32-bit width
 449:fltk-1.3.4-1/jpeg/jdhuff.c ****  * of get_buffer to be used.  (On machines with wider words, an even larger
 450:fltk-1.3.4-1/jpeg/jdhuff.c ****  * buffer could be used.)  However, on some machines 32-bit shifts are
 451:fltk-1.3.4-1/jpeg/jdhuff.c ****  * quite slow and take time proportional to the number of places shifted.
 452:fltk-1.3.4-1/jpeg/jdhuff.c ****  * (This is true with most PC compilers, for instance.)  In this case it may
 453:fltk-1.3.4-1/jpeg/jdhuff.c ****  * be a win to set MIN_GET_BITS to the minimum value of 15.  This reduces the
 454:fltk-1.3.4-1/jpeg/jdhuff.c ****  * average shift distance at the cost of more calls to jpeg_fill_bit_buffer.
 455:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 456:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 457:fltk-1.3.4-1/jpeg/jdhuff.c **** #ifdef SLOW_SHIFT_32
 458:fltk-1.3.4-1/jpeg/jdhuff.c **** #define MIN_GET_BITS  15	/* minimum allowable value */
 459:fltk-1.3.4-1/jpeg/jdhuff.c **** #else
 460:fltk-1.3.4-1/jpeg/jdhuff.c **** #define MIN_GET_BITS  (BIT_BUF_SIZE-7)
 461:fltk-1.3.4-1/jpeg/jdhuff.c **** #endif
 462:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 463:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 464:fltk-1.3.4-1/jpeg/jdhuff.c **** LOCAL(boolean)
 465:fltk-1.3.4-1/jpeg/jdhuff.c **** jpeg_fill_bit_buffer (bitread_working_state * state,
 466:fltk-1.3.4-1/jpeg/jdhuff.c **** 		      register bit_buf_type get_buffer, register int bits_left,
 467:fltk-1.3.4-1/jpeg/jdhuff.c **** 		      int nbits)
 468:fltk-1.3.4-1/jpeg/jdhuff.c **** /* Load up the bit buffer to a depth of at least nbits */
 469:fltk-1.3.4-1/jpeg/jdhuff.c **** {
  11              		.loc 1 469 1 view -0
  12              		.cfi_startproc
 470:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Copy heavily used state fields into locals (hopefully registers) */
 471:fltk-1.3.4-1/jpeg/jdhuff.c ****   register const JOCTET * next_input_byte = state->next_input_byte;
  13              		.loc 1 471 3 view .LVU1
 469:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Copy heavily used state fields into locals (hopefully registers) */
  14              		.loc 1 469 1 is_stmt 0 view .LVU2
  15 0000 4157     		pushq	%r15
  16              		.cfi_def_cfa_offset 16
  17              		.cfi_offset 15, -16
  18 0002 4156     		pushq	%r14
  19              		.cfi_def_cfa_offset 24
  20              		.cfi_offset 14, -24
  21 0004 4189CE   		movl	%ecx, %r14d
  22 0007 4155     		pushq	%r13
  23              		.cfi_def_cfa_offset 32
  24              		.cfi_offset 13, -32
  25 0009 4989FD   		movq	%rdi, %r13
  26 000c 4154     		pushq	%r12
  27              		.cfi_def_cfa_offset 40
  28              		.cfi_offset 12, -40
  29 000e 4189D4   		movl	%edx, %r12d
  30 0011 55       		pushq	%rbp
  31              		.cfi_def_cfa_offset 48
  32              		.cfi_offset 6, -48
  33 0012 4889F5   		movq	%rsi, %rbp
  34 0015 53       		pushq	%rbx
  35              		.cfi_def_cfa_offset 56
  36              		.cfi_offset 3, -56
  37 0016 4883EC18 		subq	$24, %rsp
  38              		.cfi_def_cfa_offset 80
 472:fltk-1.3.4-1/jpeg/jdhuff.c ****   register size_t bytes_in_buffer = state->bytes_in_buffer;
 473:fltk-1.3.4-1/jpeg/jdhuff.c ****   j_decompress_ptr cinfo = state->cinfo;
  39              		.loc 1 473 20 view .LVU3
  40 001a 4C8B7F20 		movq	32(%rdi), %r15
 471:fltk-1.3.4-1/jpeg/jdhuff.c ****   register size_t bytes_in_buffer = state->bytes_in_buffer;
  41              		.loc 1 471 27 view .LVU4
  42 001e 4C8B07   		movq	(%rdi), %r8
  43              	.LVL1:
 472:fltk-1.3.4-1/jpeg/jdhuff.c ****   register size_t bytes_in_buffer = state->bytes_in_buffer;
  44              		.loc 1 472 3 is_stmt 1 view .LVU5
 472:fltk-1.3.4-1/jpeg/jdhuff.c ****   register size_t bytes_in_buffer = state->bytes_in_buffer;
  45              		.loc 1 472 19 is_stmt 0 view .LVU6
  46 0021 488B5F08 		movq	8(%rdi), %rbx
  47              	.LVL2:
  48              		.loc 1 473 3 is_stmt 1 view .LVU7
 474:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 475:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
 476:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* (It is assumed that no request will be for more than that many bits.) */
 477:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* We fail to do so only if we hit a marker or are forced to suspend. */
 478:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 479:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
  49              		.loc 1 479 3 view .LVU8
  50              		.loc 1 479 6 is_stmt 0 view .LVU9
  51 0025 418B973C 		movl	572(%r15), %edx
  51      020000
  52              	.LVL3:
  53              		.loc 1 479 6 view .LVU10
  54 002c 85D2     		testl	%edx, %edx
  55 002e 0F85DC00 		jne	.L2
  55      0000
 480:fltk-1.3.4-1/jpeg/jdhuff.c ****     while (bits_left < MIN_GET_BITS) {
  56              		.loc 1 480 11 is_stmt 1 view .LVU11
  57 0034 4183FC18 		cmpl	$24, %r12d
  58 0038 7E47     		jle	.L12
  59              	.LVL4:
  60              	.L3:
 481:fltk-1.3.4-1/jpeg/jdhuff.c ****       register int c;
 482:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 483:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Attempt to read a byte */
 484:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (bytes_in_buffer == 0) {
 485:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 486:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  return FALSE;
 487:fltk-1.3.4-1/jpeg/jdhuff.c **** 	next_input_byte = cinfo->src->next_input_byte;
 488:fltk-1.3.4-1/jpeg/jdhuff.c **** 	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 489:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 490:fltk-1.3.4-1/jpeg/jdhuff.c ****       bytes_in_buffer--;
 491:fltk-1.3.4-1/jpeg/jdhuff.c ****       c = GETJOCTET(*next_input_byte++);
 492:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 493:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* If it's 0xFF, check and discard stuffed zero byte */
 494:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (c == 0xFF) {
 495:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Loop here to discard any padding FF's on terminating marker,
 496:fltk-1.3.4-1/jpeg/jdhuff.c **** 	 * so that we can save a valid unread_marker value.  NOTE: we will
 497:fltk-1.3.4-1/jpeg/jdhuff.c **** 	 * accept multiple FF's followed by a 0 as meaning a single FF data
 498:fltk-1.3.4-1/jpeg/jdhuff.c **** 	 * byte.  This data pattern is not valid according to the standard.
 499:fltk-1.3.4-1/jpeg/jdhuff.c **** 	 */
 500:fltk-1.3.4-1/jpeg/jdhuff.c **** 	do {
 501:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (bytes_in_buffer == 0) {
 502:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 503:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      return FALSE;
 504:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    next_input_byte = cinfo->src->next_input_byte;
 505:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 506:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  }
 507:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  bytes_in_buffer--;
 508:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  c = GETJOCTET(*next_input_byte++);
 509:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} while (c == 0xFF);
 510:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 511:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (c == 0) {
 512:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* Found FF/00, which represents an FF data byte */
 513:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  c = 0xFF;
 514:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} else {
 515:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* Oops, it's actually a marker indicating end of compressed data.
 516:fltk-1.3.4-1/jpeg/jdhuff.c **** 	   * Save the marker code for later use.
 517:fltk-1.3.4-1/jpeg/jdhuff.c **** 	   * Fine point: it might appear that we should save the marker into
 518:fltk-1.3.4-1/jpeg/jdhuff.c **** 	   * bitread working state, not straight into permanent state.  But
 519:fltk-1.3.4-1/jpeg/jdhuff.c **** 	   * once we have hit a marker, we cannot need to suspend within the
 520:fltk-1.3.4-1/jpeg/jdhuff.c **** 	   * current MCU, because we will read no more bytes from the data
 521:fltk-1.3.4-1/jpeg/jdhuff.c **** 	   * source.  So it is OK to update permanent state right away.
 522:fltk-1.3.4-1/jpeg/jdhuff.c **** 	   */
 523:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  cinfo->unread_marker = c;
 524:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* See if we need to insert some fake zero bits. */
 525:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  goto no_more_bytes;
 526:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 527:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 528:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 529:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* OK, load c into get_buffer */
 530:fltk-1.3.4-1/jpeg/jdhuff.c ****       get_buffer = (get_buffer << 8) | c;
 531:fltk-1.3.4-1/jpeg/jdhuff.c ****       bits_left += 8;
 532:fltk-1.3.4-1/jpeg/jdhuff.c ****     } /* end while */
 533:fltk-1.3.4-1/jpeg/jdhuff.c ****   } else {
 534:fltk-1.3.4-1/jpeg/jdhuff.c ****   no_more_bytes:
 535:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* We get here if we've read the marker that terminates the compressed
 536:fltk-1.3.4-1/jpeg/jdhuff.c ****      * data segment.  There should be enough bits in the buffer register
 537:fltk-1.3.4-1/jpeg/jdhuff.c ****      * to satisfy the request; if so, no problem.
 538:fltk-1.3.4-1/jpeg/jdhuff.c ****      */
 539:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (nbits > bits_left) {
 540:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Uh-oh.  Report corrupted data to user and stuff zeroes into
 541:fltk-1.3.4-1/jpeg/jdhuff.c ****        * the data stream, so that we can produce some kind of image.
 542:fltk-1.3.4-1/jpeg/jdhuff.c ****        * We use a nonvolatile flag to ensure that only one warning message
 543:fltk-1.3.4-1/jpeg/jdhuff.c ****        * appears per data segment.
 544:fltk-1.3.4-1/jpeg/jdhuff.c ****        */
 545:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (! ((huff_entropy_ptr) cinfo->entropy)->insufficient_data) {
 546:fltk-1.3.4-1/jpeg/jdhuff.c **** 	WARNMS(cinfo, JWRN_HIT_MARKER);
 547:fltk-1.3.4-1/jpeg/jdhuff.c **** 	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
 548:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 549:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Fill the buffer with zero bits */
 550:fltk-1.3.4-1/jpeg/jdhuff.c ****       get_buffer <<= MIN_GET_BITS - bits_left;
 551:fltk-1.3.4-1/jpeg/jdhuff.c ****       bits_left = MIN_GET_BITS;
 552:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 553:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 554:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 555:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Unload the local registers */
 556:fltk-1.3.4-1/jpeg/jdhuff.c ****   state->next_input_byte = next_input_byte;
  61              		.loc 1 556 3 view .LVU12
 557:fltk-1.3.4-1/jpeg/jdhuff.c ****   state->bytes_in_buffer = bytes_in_buffer;
  62              		.loc 1 557 26 is_stmt 0 view .LVU13
  63 003a 49895D08 		movq	%rbx, 8(%r13)
 558:fltk-1.3.4-1/jpeg/jdhuff.c ****   state->get_buffer = get_buffer;
 559:fltk-1.3.4-1/jpeg/jdhuff.c ****   state->bits_left = bits_left;
 560:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 561:fltk-1.3.4-1/jpeg/jdhuff.c ****   return TRUE;
  64              		.loc 1 561 10 view .LVU14
  65 003e B8010000 		movl	$1, %eax
  65      00
 558:fltk-1.3.4-1/jpeg/jdhuff.c ****   state->get_buffer = get_buffer;
  66              		.loc 1 558 21 view .LVU15
  67 0043 49896D10 		movq	%rbp, 16(%r13)
 559:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  68              		.loc 1 559 20 view .LVU16
  69 0047 45896518 		movl	%r12d, 24(%r13)
 556:fltk-1.3.4-1/jpeg/jdhuff.c ****   state->bytes_in_buffer = bytes_in_buffer;
  70              		.loc 1 556 26 view .LVU17
  71 004b 4D894500 		movq	%r8, 0(%r13)
 557:fltk-1.3.4-1/jpeg/jdhuff.c ****   state->get_buffer = get_buffer;
  72              		.loc 1 557 3 is_stmt 1 view .LVU18
 558:fltk-1.3.4-1/jpeg/jdhuff.c ****   state->bits_left = bits_left;
  73              		.loc 1 558 3 view .LVU19
 559:fltk-1.3.4-1/jpeg/jdhuff.c **** 
  74              		.loc 1 559 3 view .LVU20
  75              		.loc 1 561 3 view .LVU21
 562:fltk-1.3.4-1/jpeg/jdhuff.c **** }
  76              		.loc 1 562 1 is_stmt 0 view .LVU22
  77 004f 4883C418 		addq	$24, %rsp
  78              		.cfi_remember_state
  79              		.cfi_def_cfa_offset 56
  80 0053 5B       		popq	%rbx
  81              		.cfi_def_cfa_offset 48
  82              	.LVL5:
  83              		.loc 1 562 1 view .LVU23
  84 0054 5D       		popq	%rbp
  85              		.cfi_def_cfa_offset 40
  86              	.LVL6:
  87              		.loc 1 562 1 view .LVU24
  88 0055 415C     		popq	%r12
  89              		.cfi_def_cfa_offset 32
  90              	.LVL7:
  91              		.loc 1 562 1 view .LVU25
  92 0057 415D     		popq	%r13
  93              		.cfi_def_cfa_offset 24
  94              	.LVL8:
  95              		.loc 1 562 1 view .LVU26
  96 0059 415E     		popq	%r14
  97              		.cfi_def_cfa_offset 16
  98              	.LVL9:
  99              		.loc 1 562 1 view .LVU27
 100 005b 415F     		popq	%r15
 101              		.cfi_def_cfa_offset 8
 102              	.LVL10:
 103              		.loc 1 562 1 view .LVU28
 104 005d C3       		ret
 105              	.LVL11:
 106 005e 6690     		.p2align 4,,10
 107              		.p2align 3
 108              	.L25:
 109              		.cfi_restore_state
 110              	.LBB7:
 511:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* Found FF/00, which represents an FF data byte */
 111              		.loc 1 511 2 is_stmt 1 view .LVU29
 511:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* Found FF/00, which represents an FF data byte */
 112              		.loc 1 511 5 is_stmt 0 view .LVU30
 113 0060 85C0     		testl	%eax, %eax
 114 0062 0F859D00 		jne	.L24
 114      0000
 508:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} while (c == 0xFF);
 115              		.loc 1 508 8 view .LVU31
 116 0068 4989D0   		movq	%rdx, %r8
 117 006b B8FF0000 		movl	$255, %eax
 117      00
 118              	.LVL12:
 119              		.p2align 4,,10
 120              		.p2align 3
 121              	.L11:
 530:fltk-1.3.4-1/jpeg/jdhuff.c ****       bits_left += 8;
 122              		.loc 1 530 7 is_stmt 1 view .LVU32
 530:fltk-1.3.4-1/jpeg/jdhuff.c ****       bits_left += 8;
 123              		.loc 1 530 32 is_stmt 0 view .LVU33
 124 0070 48C1E508 		salq	$8, %rbp
 125              	.LVL13:
 531:fltk-1.3.4-1/jpeg/jdhuff.c ****     } /* end while */
 126              		.loc 1 531 17 view .LVU34
 127 0074 4183C408 		addl	$8, %r12d
 128              	.LVL14:
 530:fltk-1.3.4-1/jpeg/jdhuff.c ****       bits_left += 8;
 129              		.loc 1 530 18 view .LVU35
 130 0078 4809C5   		orq	%rax, %rbp
 131              	.LVL15:
 531:fltk-1.3.4-1/jpeg/jdhuff.c ****     } /* end while */
 132              		.loc 1 531 7 is_stmt 1 view .LVU36
 531:fltk-1.3.4-1/jpeg/jdhuff.c ****     } /* end while */
 133              		.loc 1 531 7 is_stmt 0 view .LVU37
 134              	.LBE7:
 480:fltk-1.3.4-1/jpeg/jdhuff.c ****       register int c;
 135              		.loc 1 480 11 is_stmt 1 view .LVU38
 136 007b 4183FC18 		cmpl	$24, %r12d
 137 007f 7FB9     		jg	.L3
 138              	.L12:
 139              	.LVL16:
 140              	.LBB8:
 481:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 141              		.loc 1 481 7 view .LVU39
 484:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 142              		.loc 1 484 7 view .LVU40
 484:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 143              		.loc 1 484 10 is_stmt 0 view .LVU41
 144 0081 4885DB   		testq	%rbx, %rbx
 145 0084 751D     		jne	.L4
 485:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  return FALSE;
 146              		.loc 1 485 2 is_stmt 1 view .LVU42
 485:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  return FALSE;
 147              		.loc 1 485 9 is_stmt 0 view .LVU43
 148 0086 498B4728 		movq	40(%r15), %rax
 149 008a 4C89FF   		movq	%r15, %rdi
 150 008d FF5018   		call	*24(%rax)
 151              	.LVL17:
 485:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  return FALSE;
 152              		.loc 1 485 5 view .LVU44
 153 0090 85C0     		testl	%eax, %eax
 154 0092 0F84D800 		je	.L9
 154      0000
 487:fltk-1.3.4-1/jpeg/jdhuff.c **** 	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 155              		.loc 1 487 2 is_stmt 1 view .LVU45
 487:fltk-1.3.4-1/jpeg/jdhuff.c **** 	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 156              		.loc 1 487 25 is_stmt 0 view .LVU46
 157 0098 498B4728 		movq	40(%r15), %rax
 487:fltk-1.3.4-1/jpeg/jdhuff.c **** 	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 158              		.loc 1 487 18 view .LVU47
 159 009c 4C8B00   		movq	(%rax), %r8
 160              	.LVL18:
 488:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 161              		.loc 1 488 2 is_stmt 1 view .LVU48
 488:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 162              		.loc 1 488 18 is_stmt 0 view .LVU49
 163 009f 488B5808 		movq	8(%rax), %rbx
 164              	.LVL19:
 165              	.L4:
 490:fltk-1.3.4-1/jpeg/jdhuff.c ****       c = GETJOCTET(*next_input_byte++);
 166              		.loc 1 490 7 is_stmt 1 view .LVU50
 491:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 167              		.loc 1 491 11 is_stmt 0 view .LVU51
 168 00a3 410FB608 		movzbl	(%r8), %ecx
 169 00a7 498D5001 		leaq	1(%r8), %rdx
 490:fltk-1.3.4-1/jpeg/jdhuff.c ****       c = GETJOCTET(*next_input_byte++);
 170              		.loc 1 490 22 view .LVU52
 171 00ab 4883EB01 		subq	$1, %rbx
 172              	.LVL20:
 491:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 173              		.loc 1 491 7 is_stmt 1 view .LVU53
 491:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 174              		.loc 1 491 11 is_stmt 0 view .LVU54
 175 00af 4989D0   		movq	%rdx, %r8
 176 00b2 4889C8   		movq	%rcx, %rax
 177              	.LVL21:
 494:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Loop here to discard any padding FF's on terminating marker,
 178              		.loc 1 494 7 is_stmt 1 view .LVU55
 494:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Loop here to discard any padding FF's on terminating marker,
 179              		.loc 1 494 10 is_stmt 0 view .LVU56
 180 00b5 81F9FF00 		cmpl	$255, %ecx
 180      0000
 181 00bb 75B3     		jne	.L11
 500:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (bytes_in_buffer == 0) {
 182              		.loc 1 500 2 is_stmt 1 view .LVU57
 501:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 183              		.loc 1 501 4 view .LVU58
 501:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 184              		.loc 1 501 7 is_stmt 0 view .LVU59
 185 00bd 4885DB   		testq	%rbx, %rbx
 186 00c0 753E     		jne	.L14
 187              	.LVL22:
 188              		.p2align 4,,10
 189 00c2 660F1F44 		.p2align 3
 189      0000
 190              	.L26:
 502:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      return FALSE;
 191              		.loc 1 502 6 is_stmt 1 view .LVU60
 502:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      return FALSE;
 192              		.loc 1 502 13 is_stmt 0 view .LVU61
 193 00c8 498B4728 		movq	40(%r15), %rax
 194 00cc 4C89FF   		movq	%r15, %rdi
 195 00cf FF5018   		call	*24(%rax)
 196              	.LVL23:
 502:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      return FALSE;
 197              		.loc 1 502 9 view .LVU62
 198 00d2 85C0     		testl	%eax, %eax
 199 00d4 0F849600 		je	.L9
 199      0000
 504:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 200              		.loc 1 504 6 is_stmt 1 view .LVU63
 504:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 201              		.loc 1 504 29 is_stmt 0 view .LVU64
 202 00da 498B5728 		movq	40(%r15), %rdx
 504:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 203              		.loc 1 504 22 view .LVU65
 204 00de 488B02   		movq	(%rdx), %rax
 205              	.LVL24:
 505:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  }
 206              		.loc 1 505 6 is_stmt 1 view .LVU66
 505:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  }
 207              		.loc 1 505 22 is_stmt 0 view .LVU67
 208 00e1 488B5A08 		movq	8(%rdx), %rbx
 209              	.LVL25:
 210              	.L8:
 507:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  c = GETJOCTET(*next_input_byte++);
 211              		.loc 1 507 4 is_stmt 1 view .LVU68
 508:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} while (c == 0xFF);
 212              		.loc 1 508 8 is_stmt 0 view .LVU69
 213 00e5 488D5001 		leaq	1(%rax), %rdx
 508:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} while (c == 0xFF);
 214              		.loc 1 508 6 view .LVU70
 215 00e9 0FB600   		movzbl	(%rax), %eax
 216              	.LVL26:
 507:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  c = GETJOCTET(*next_input_byte++);
 217              		.loc 1 507 19 view .LVU71
 218 00ec 4883EB01 		subq	$1, %rbx
 219              	.LVL27:
 508:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} while (c == 0xFF);
 220              		.loc 1 508 4 is_stmt 1 view .LVU72
 509:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 221              		.loc 1 509 10 view .LVU73
 509:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 222              		.loc 1 509 2 is_stmt 0 view .LVU74
 223 00f0 3DFF0000 		cmpl	$255, %eax
 223      00
 224 00f5 0F8565FF 		jne	.L25
 224      FFFF
 500:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (bytes_in_buffer == 0) {
 225              		.loc 1 500 2 is_stmt 1 view .LVU75
 501:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 226              		.loc 1 501 4 view .LVU76
 501:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 227              		.loc 1 501 7 is_stmt 0 view .LVU77
 228 00fb 4885DB   		testq	%rbx, %rbx
 229 00fe 74C8     		je	.L26
 230              	.LVL28:
 231              	.L14:
 501:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 232              		.loc 1 501 7 view .LVU78
 233 0100 4889D0   		movq	%rdx, %rax
 234 0103 EBE0     		jmp	.L8
 235              	.LVL29:
 236              	.L24:
 523:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* See if we need to insert some fake zero bits. */
 237              		.loc 1 523 4 is_stmt 1 view .LVU79
 523:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* See if we need to insert some fake zero bits. */
 238              		.loc 1 523 25 is_stmt 0 view .LVU80
 239 0105 4189873C 		movl	%eax, 572(%r15)
 239      020000
 525:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 240              		.loc 1 525 4 is_stmt 1 view .LVU81
 508:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} while (c == 0xFF);
 241              		.loc 1 508 8 is_stmt 0 view .LVU82
 242 010c 4989D0   		movq	%rdx, %r8
 243              	.LVL30:
 244 010f 90       		.p2align 4,,10
 245              		.p2align 3
 246              	.L2:
 508:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} while (c == 0xFF);
 247              		.loc 1 508 8 view .LVU83
 248              	.LBE8:
 539:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Uh-oh.  Report corrupted data to user and stuff zeroes into
 249              		.loc 1 539 5 is_stmt 1 view .LVU84
 539:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Uh-oh.  Report corrupted data to user and stuff zeroes into
 250              		.loc 1 539 8 is_stmt 0 view .LVU85
 251 0110 4539F4   		cmpl	%r14d, %r12d
 252 0113 0F8D21FF 		jge	.L3
 252      FFFF
 545:fltk-1.3.4-1/jpeg/jdhuff.c **** 	WARNMS(cinfo, JWRN_HIT_MARKER);
 253              		.loc 1 545 7 is_stmt 1 view .LVU86
 545:fltk-1.3.4-1/jpeg/jdhuff.c **** 	WARNMS(cinfo, JWRN_HIT_MARKER);
 254              		.loc 1 545 48 is_stmt 0 view .LVU87
 255 0119 498B8770 		movq	624(%r15), %rax
 255      020000
 545:fltk-1.3.4-1/jpeg/jdhuff.c **** 	WARNMS(cinfo, JWRN_HIT_MARKER);
 256              		.loc 1 545 10 view .LVU88
 257 0120 8B403C   		movl	60(%rax), %eax
 258 0123 85C0     		testl	%eax, %eax
 259 0125 7530     		jne	.L13
 546:fltk-1.3.4-1/jpeg/jdhuff.c **** 	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
 260              		.loc 1 546 2 view .LVU89
 261 0127 498B07   		movq	(%r15), %rax
 262 012a 4C894424 		movq	%r8, 8(%rsp)
 262      08
 546:fltk-1.3.4-1/jpeg/jdhuff.c **** 	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
 263              		.loc 1 546 2 is_stmt 1 view .LVU90
 264 012f BEFFFFFF 		movl	$-1, %esi
 264      FF
 265 0134 4C89FF   		movq	%r15, %rdi
 266 0137 C7402878 		movl	$120, 40(%rax)
 266      000000
 267 013e 498B07   		movq	(%r15), %rax
 268 0141 FF5008   		call	*8(%rax)
 269              	.LVL31:
 547:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 270              		.loc 1 547 2 view .LVU91
 547:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 271              		.loc 1 547 27 is_stmt 0 view .LVU92
 272 0144 498B8770 		movq	624(%r15), %rax
 272      020000
 547:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 273              		.loc 1 547 57 view .LVU93
 274 014b 4C8B4424 		movq	8(%rsp), %r8
 274      08
 275 0150 C7403C01 		movl	$1, 60(%rax)
 275      000000
 276              	.LVL32:
 277              	.L13:
 550:fltk-1.3.4-1/jpeg/jdhuff.c ****       bits_left = MIN_GET_BITS;
 278              		.loc 1 550 7 is_stmt 1 view .LVU94
 550:fltk-1.3.4-1/jpeg/jdhuff.c ****       bits_left = MIN_GET_BITS;
 279              		.loc 1 550 35 is_stmt 0 view .LVU95
 280 0157 B9190000 		movl	$25, %ecx
 280      00
 281 015c 4429E1   		subl	%r12d, %ecx
 551:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 282              		.loc 1 551 17 view .LVU96
 283 015f 41BC1900 		movl	$25, %r12d
 283      0000
 284              	.LVL33:
 550:fltk-1.3.4-1/jpeg/jdhuff.c ****       bits_left = MIN_GET_BITS;
 285              		.loc 1 550 18 view .LVU97
 286 0165 48D3E5   		salq	%cl, %rbp
 287              	.LVL34:
 551:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 288              		.loc 1 551 7 is_stmt 1 view .LVU98
 551:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 289              		.loc 1 551 7 is_stmt 0 view .LVU99
 290 0168 E9CDFEFF 		jmp	.L3
 290      FF
 291              	.LVL35:
 292 016d 0F1F00   		.p2align 4,,10
 293              		.p2align 3
 294              	.L9:
 295              		.loc 1 562 1 view .LVU100
 296 0170 4883C418 		addq	$24, %rsp
 297              		.cfi_def_cfa_offset 56
 298              	.LBB9:
 486:fltk-1.3.4-1/jpeg/jdhuff.c **** 	next_input_byte = cinfo->src->next_input_byte;
 299              		.loc 1 486 11 view .LVU101
 300 0174 31C0     		xorl	%eax, %eax
 301              	.LBE9:
 302              		.loc 1 562 1 view .LVU102
 303 0176 5B       		popq	%rbx
 304              		.cfi_def_cfa_offset 48
 305              	.LVL36:
 306              		.loc 1 562 1 view .LVU103
 307 0177 5D       		popq	%rbp
 308              		.cfi_def_cfa_offset 40
 309              	.LVL37:
 310              		.loc 1 562 1 view .LVU104
 311 0178 415C     		popq	%r12
 312              		.cfi_def_cfa_offset 32
 313              	.LVL38:
 314              		.loc 1 562 1 view .LVU105
 315 017a 415D     		popq	%r13
 316              		.cfi_def_cfa_offset 24
 317              	.LVL39:
 318              		.loc 1 562 1 view .LVU106
 319 017c 415E     		popq	%r14
 320              		.cfi_def_cfa_offset 16
 321              	.LVL40:
 322              		.loc 1 562 1 view .LVU107
 323 017e 415F     		popq	%r15
 324              		.cfi_def_cfa_offset 8
 325              	.LVL41:
 326              		.loc 1 562 1 view .LVU108
 327 0180 C3       		ret
 328              		.cfi_endproc
 329              	.LFE52:
 331              		.section	.text.jpeg_huff_decode,"ax",@progbits
 332              		.p2align 4
 334              	jpeg_huff_decode:
 335              	.LVL42:
 336              	.LFB53:
 563:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 564:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 565:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 566:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Figure F.12: extend sign bit.
 567:fltk-1.3.4-1/jpeg/jdhuff.c ****  * On some machines, a shift and sub will be faster than a table lookup.
 568:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 569:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 570:fltk-1.3.4-1/jpeg/jdhuff.c **** #ifdef AVOID_TABLES
 571:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 572:fltk-1.3.4-1/jpeg/jdhuff.c **** #define BIT_MASK(nbits)   ((1<<(nbits))-1)
 573:fltk-1.3.4-1/jpeg/jdhuff.c **** #define HUFF_EXTEND(x,s)  ((x) < (1<<((s)-1)) ? (x) - ((1<<(s))-1) : (x))
 574:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 575:fltk-1.3.4-1/jpeg/jdhuff.c **** #else
 576:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 577:fltk-1.3.4-1/jpeg/jdhuff.c **** #define BIT_MASK(nbits)   bmask[nbits]
 578:fltk-1.3.4-1/jpeg/jdhuff.c **** #define HUFF_EXTEND(x,s)  ((x) <= bmask[(s) - 1] ? (x) - bmask[s] : (x))
 579:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 580:fltk-1.3.4-1/jpeg/jdhuff.c **** static const int bmask[16] =	/* bmask[n] is mask for n rightmost bits */
 581:fltk-1.3.4-1/jpeg/jdhuff.c ****   { 0, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F, 0x003F, 0x007F, 0x00FF,
 582:fltk-1.3.4-1/jpeg/jdhuff.c ****     0x01FF, 0x03FF, 0x07FF, 0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF };
 583:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 584:fltk-1.3.4-1/jpeg/jdhuff.c **** #endif /* AVOID_TABLES */
 585:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 586:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 587:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 588:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Out-of-line code for Huffman code decoding.
 589:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 590:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 591:fltk-1.3.4-1/jpeg/jdhuff.c **** LOCAL(int)
 592:fltk-1.3.4-1/jpeg/jdhuff.c **** jpeg_huff_decode (bitread_working_state * state,
 593:fltk-1.3.4-1/jpeg/jdhuff.c **** 		  register bit_buf_type get_buffer, register int bits_left,
 594:fltk-1.3.4-1/jpeg/jdhuff.c **** 		  d_derived_tbl * htbl, int min_bits)
 595:fltk-1.3.4-1/jpeg/jdhuff.c **** {
 337              		.loc 1 595 1 is_stmt 1 view -0
 338              		.cfi_startproc
 596:fltk-1.3.4-1/jpeg/jdhuff.c ****   register int l = min_bits;
 339              		.loc 1 596 3 view .LVU110
 597:fltk-1.3.4-1/jpeg/jdhuff.c ****   register INT32 code;
 340              		.loc 1 597 3 view .LVU111
 598:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 599:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* HUFF_DECODE has determined that the code is at least min_bits */
 600:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* bits long, so fetch that many bits in one swoop. */
 601:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 602:fltk-1.3.4-1/jpeg/jdhuff.c ****   CHECK_BIT_BUFFER(*state, l, return -1);
 341              		.loc 1 602 3 view .LVU112
 595:fltk-1.3.4-1/jpeg/jdhuff.c ****   register int l = min_bits;
 342              		.loc 1 595 1 is_stmt 0 view .LVU113
 343 0000 4155     		pushq	%r13
 344              		.cfi_def_cfa_offset 16
 345              		.cfi_offset 13, -16
 346 0002 4154     		pushq	%r12
 347              		.cfi_def_cfa_offset 24
 348              		.cfi_offset 12, -24
 349 0004 4989FC   		movq	%rdi, %r12
 350 0007 55       		pushq	%rbp
 351              		.cfi_def_cfa_offset 32
 352              		.cfi_offset 6, -32
 353 0008 4889CD   		movq	%rcx, %rbp
 354 000b 53       		pushq	%rbx
 355              		.cfi_def_cfa_offset 40
 356              		.cfi_offset 3, -40
 357 000c 4489C3   		movl	%r8d, %ebx
 358 000f 4883EC08 		subq	$8, %rsp
 359              		.cfi_def_cfa_offset 48
 360              		.loc 1 602 3 view .LVU114
 361 0013 4139D0   		cmpl	%edx, %r8d
 362 0016 0F8FEC00 		jg	.L42
 362      0000
 363              	.LVL43:
 364              	.L28:
 365              		.loc 1 602 41 is_stmt 1 discriminator 5 view .LVU115
 603:fltk-1.3.4-1/jpeg/jdhuff.c ****   code = GET_BITS(l);
 366              		.loc 1 603 3 discriminator 5 view .LVU116
 367              		.loc 1 603 10 is_stmt 0 discriminator 5 view .LVU117
 368 001c 29DA     		subl	%ebx, %edx
 369              	.LVL44:
 370              		.loc 1 603 10 discriminator 5 view .LVU118
 371 001e 4889F0   		movq	%rsi, %rax
 372 0021 488D3D00 		leaq	bmask(%rip), %rdi
 372      000000
 373 0028 89D1     		movl	%edx, %ecx
 374 002a 48D3F8   		sarq	%cl, %rax
 375 002d 4863CB   		movslq	%ebx, %rcx
 376 0030 23048F   		andl	(%rdi,%rcx,4), %eax
 377              		.loc 1 603 8 discriminator 5 view .LVU119
 378 0033 4898     		cltq
 379              	.LVL45:
 604:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 605:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Collect the rest of the Huffman code one bit at a time. */
 606:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* This is per Figure F.16 in the JPEG spec. */
 607:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 608:fltk-1.3.4-1/jpeg/jdhuff.c ****   while (code > htbl->maxcode[l]) {
 380              		.loc 1 608 3 is_stmt 1 discriminator 5 view .LVU120
 381              		.loc 1 608 9 discriminator 5 view .LVU121
 382 0035 483B44CD 		cmpq	0(%rbp,%rcx,8), %rax
 382      00
 383 003a 0F8EF800 		jle	.L31
 383      0000
 384              		.loc 1 608 9 is_stmt 0 discriminator 5 view .LVU122
 385 0040 448D6B01 		leal	1(%rbx), %r13d
 386 0044 4D63ED   		movslq	%r13d, %r13
 387 0047 EB26     		jmp	.L34
 388              	.LVL46:
 389 0049 0F1F8000 		.p2align 4,,10
 389      000000
 390              		.p2align 3
 391              	.L32:
 609:fltk-1.3.4-1/jpeg/jdhuff.c ****     code <<= 1;
 610:fltk-1.3.4-1/jpeg/jdhuff.c ****     CHECK_BIT_BUFFER(*state, 1, return -1);
 392              		.loc 1 610 43 is_stmt 1 discriminator 5 view .LVU123
 611:fltk-1.3.4-1/jpeg/jdhuff.c ****     code |= GET_BITS(1);
 393              		.loc 1 611 5 discriminator 5 view .LVU124
 394              		.loc 1 611 13 is_stmt 0 discriminator 5 view .LVU125
 395 0050 83EA01   		subl	$1, %edx
 396              	.LVL47:
 397              		.loc 1 611 13 discriminator 5 view .LVU126
 398 0053 4889F0   		movq	%rsi, %rax
 399 0056 89D1     		movl	%edx, %ecx
 400 0058 48D3F8   		sarq	%cl, %rax
 401 005b 83E001   		andl	$1, %eax
 402              		.loc 1 611 10 discriminator 5 view .LVU127
 403 005e 4809D8   		orq	%rbx, %rax
 404              	.LVL48:
 612:fltk-1.3.4-1/jpeg/jdhuff.c ****     l++;
 405              		.loc 1 612 5 is_stmt 1 discriminator 5 view .LVU128
 406              		.loc 1 612 6 is_stmt 0 discriminator 5 view .LVU129
 407 0061 4489EB   		movl	%r13d, %ebx
 408              	.LVL49:
 608:fltk-1.3.4-1/jpeg/jdhuff.c ****     code <<= 1;
 409              		.loc 1 608 9 is_stmt 1 discriminator 5 view .LVU130
 410 0064 4983C501 		addq	$1, %r13
 411 0068 4A3944ED 		cmpq	%rax, -8(%rbp,%r13,8)
 411      F8
 412 006d 7D31     		jge	.L43
 413              	.L34:
 414              	.LVL50:
 609:fltk-1.3.4-1/jpeg/jdhuff.c ****     CHECK_BIT_BUFFER(*state, 1, return -1);
 415              		.loc 1 609 5 view .LVU131
 609:fltk-1.3.4-1/jpeg/jdhuff.c ****     CHECK_BIT_BUFFER(*state, 1, return -1);
 416              		.loc 1 609 10 is_stmt 0 view .LVU132
 417 006f 488D1C00 		leaq	(%rax,%rax), %rbx
 418              	.LVL51:
 610:fltk-1.3.4-1/jpeg/jdhuff.c ****     code |= GET_BITS(1);
 419              		.loc 1 610 5 is_stmt 1 view .LVU133
 420 0073 85D2     		testl	%edx, %edx
 421 0075 7FD9     		jg	.L32
 610:fltk-1.3.4-1/jpeg/jdhuff.c ****     code |= GET_BITS(1);
 422              		.loc 1 610 5 discriminator 1 view .LVU134
 423 0077 B9010000 		movl	$1, %ecx
 423      00
 424 007c 4C89E7   		movq	%r12, %rdi
 425 007f E8000000 		call	jpeg_fill_bit_buffer
 425      00
 426              	.LVL52:
 610:fltk-1.3.4-1/jpeg/jdhuff.c ****     code |= GET_BITS(1);
 427              		.loc 1 610 5 is_stmt 0 discriminator 1 view .LVU135
 428 0084 85C0     		testl	%eax, %eax
 429 0086 0F849C00 		je	.L33
 429      0000
 610:fltk-1.3.4-1/jpeg/jdhuff.c ****     code |= GET_BITS(1);
 430              		.loc 1 610 5 is_stmt 1 discriminator 4 view .LVU136
 431 008c 498B7424 		movq	16(%r12), %rsi
 431      10
 432              	.LVL53:
 610:fltk-1.3.4-1/jpeg/jdhuff.c ****     code |= GET_BITS(1);
 433              		.loc 1 610 5 discriminator 4 view .LVU137
 434 0091 418B5424 		movl	24(%r12), %edx
 434      18
 435              	.LVL54:
 610:fltk-1.3.4-1/jpeg/jdhuff.c ****     code |= GET_BITS(1);
 436              		.loc 1 610 5 is_stmt 0 discriminator 4 view .LVU138
 437 0096 EBB8     		jmp	.L32
 438              	.LVL55:
 439 0098 0F1F8400 		.p2align 4,,10
 439      00000000 
 440              		.p2align 3
 441              	.L43:
 613:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 614:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 615:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Unload the local registers */
 616:fltk-1.3.4-1/jpeg/jdhuff.c ****   state->get_buffer = get_buffer;
 442              		.loc 1 616 3 is_stmt 1 view .LVU139
 443              		.loc 1 616 21 is_stmt 0 view .LVU140
 444 00a0 49897424 		movq	%rsi, 16(%r12)
 444      10
 617:fltk-1.3.4-1/jpeg/jdhuff.c ****   state->bits_left = bits_left;
 445              		.loc 1 617 3 is_stmt 1 view .LVU141
 446 00a5 4863CB   		movslq	%ebx, %rcx
 447              		.loc 1 617 20 is_stmt 0 view .LVU142
 448 00a8 41895424 		movl	%edx, 24(%r12)
 448      18
 618:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 619:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* With garbage input we may reach the sentinel value l = 17. */
 620:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 621:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (l > 16) {
 449              		.loc 1 621 3 is_stmt 1 view .LVU143
 450              		.loc 1 621 6 is_stmt 0 view .LVU144
 451 00ad 83FB10   		cmpl	$16, %ebx
 452 00b0 7F26     		jg	.L44
 453              	.L35:
 622:fltk-1.3.4-1/jpeg/jdhuff.c ****     WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 623:fltk-1.3.4-1/jpeg/jdhuff.c ****     return 0;			/* fake a zero as the safest result */
 624:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 625:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 626:fltk-1.3.4-1/jpeg/jdhuff.c ****   return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
 454              		.loc 1 626 3 is_stmt 1 view .LVU145
 455              		.loc 1 626 28 is_stmt 0 view .LVU146
 456 00b2 488B9518 		movq	280(%rbp), %rdx
 456      010000
 457              	.LVL56:
 458              		.loc 1 626 42 view .LVU147
 459 00b9 0384CD90 		addl	144(%rbp,%rcx,8), %eax
 459      000000
 460              	.LVL57:
 461              		.loc 1 626 28 view .LVU148
 462 00c0 4898     		cltq
 463 00c2 0FB64402 		movzbl	17(%rdx,%rax), %eax
 463      11
 627:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 464              		.loc 1 627 1 view .LVU149
 465 00c7 4883C408 		addq	$8, %rsp
 466              		.cfi_remember_state
 467              		.cfi_def_cfa_offset 40
 468 00cb 5B       		popq	%rbx
 469              		.cfi_def_cfa_offset 32
 470              	.LVL58:
 471              		.loc 1 627 1 view .LVU150
 472 00cc 5D       		popq	%rbp
 473              		.cfi_def_cfa_offset 24
 474              	.LVL59:
 475              		.loc 1 627 1 view .LVU151
 476 00cd 415C     		popq	%r12
 477              		.cfi_def_cfa_offset 16
 478              	.LVL60:
 479              		.loc 1 627 1 view .LVU152
 480 00cf 415D     		popq	%r13
 481              		.cfi_def_cfa_offset 8
 482 00d1 C3       		ret
 483              	.LVL61:
 484              		.p2align 4,,10
 485 00d2 660F1F44 		.p2align 3
 485      0000
 486              	.L44:
 487              		.cfi_restore_state
 622:fltk-1.3.4-1/jpeg/jdhuff.c ****     WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 488              		.loc 1 622 5 is_stmt 1 view .LVU153
 489 00d8 498B4424 		movq	32(%r12), %rax
 489      20
 490              	.LVL62:
 622:fltk-1.3.4-1/jpeg/jdhuff.c ****     WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 491              		.loc 1 622 5 is_stmt 0 view .LVU154
 492 00dd BEFFFFFF 		movl	$-1, %esi
 492      FF
 493              	.LVL63:
 622:fltk-1.3.4-1/jpeg/jdhuff.c ****     WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 494              		.loc 1 622 5 view .LVU155
 495 00e2 488B00   		movq	(%rax), %rax
 496 00e5 C7402879 		movl	$121, 40(%rax)
 496      000000
 497              	.LVL64:
 622:fltk-1.3.4-1/jpeg/jdhuff.c ****     WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 498              		.loc 1 622 5 view .LVU156
 499 00ec 498B7C24 		movq	32(%r12), %rdi
 499      20
 500 00f1 488B07   		movq	(%rdi), %rax
 501 00f4 FF5008   		call	*8(%rax)
 502              	.LVL65:
 623:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 503              		.loc 1 623 5 is_stmt 1 view .LVU157
 504              		.loc 1 627 1 is_stmt 0 view .LVU158
 505 00f7 4883C408 		addq	$8, %rsp
 506              		.cfi_remember_state
 507              		.cfi_def_cfa_offset 40
 623:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 508              		.loc 1 623 12 view .LVU159
 509 00fb 31C0     		xorl	%eax, %eax
 510              		.loc 1 627 1 view .LVU160
 511 00fd 5B       		popq	%rbx
 512              		.cfi_def_cfa_offset 32
 513              	.LVL66:
 514              		.loc 1 627 1 view .LVU161
 515 00fe 5D       		popq	%rbp
 516              		.cfi_def_cfa_offset 24
 517              	.LVL67:
 518              		.loc 1 627 1 view .LVU162
 519 00ff 415C     		popq	%r12
 520              		.cfi_def_cfa_offset 16
 521              	.LVL68:
 522              		.loc 1 627 1 view .LVU163
 523 0101 415D     		popq	%r13
 524              		.cfi_def_cfa_offset 8
 525 0103 C3       		ret
 526              	.LVL69:
 527              		.p2align 4,,10
 528 0104 0F1F4000 		.p2align 3
 529              	.L42:
 530              		.cfi_restore_state
 602:fltk-1.3.4-1/jpeg/jdhuff.c ****   code = GET_BITS(l);
 531              		.loc 1 602 3 is_stmt 1 discriminator 1 view .LVU164
 532 0108 4489C1   		movl	%r8d, %ecx
 533              	.LVL70:
 602:fltk-1.3.4-1/jpeg/jdhuff.c ****   code = GET_BITS(l);
 534              		.loc 1 602 3 is_stmt 0 discriminator 1 view .LVU165
 535 010b E8000000 		call	jpeg_fill_bit_buffer
 535      00
 536              	.LVL71:
 602:fltk-1.3.4-1/jpeg/jdhuff.c ****   code = GET_BITS(l);
 537              		.loc 1 602 3 discriminator 1 view .LVU166
 538 0110 85C0     		testl	%eax, %eax
 539 0112 7414     		je	.L33
 602:fltk-1.3.4-1/jpeg/jdhuff.c ****   code = GET_BITS(l);
 540              		.loc 1 602 3 is_stmt 1 discriminator 4 view .LVU167
 541 0114 498B7424 		movq	16(%r12), %rsi
 541      10
 542              	.LVL72:
 602:fltk-1.3.4-1/jpeg/jdhuff.c ****   code = GET_BITS(l);
 543              		.loc 1 602 3 discriminator 4 view .LVU168
 544 0119 418B5424 		movl	24(%r12), %edx
 544      18
 545              	.LVL73:
 602:fltk-1.3.4-1/jpeg/jdhuff.c ****   code = GET_BITS(l);
 546              		.loc 1 602 3 is_stmt 0 discriminator 4 view .LVU169
 547 011e E9F9FEFF 		jmp	.L28
 547      FF
 548              	.LVL74:
 549              		.p2align 4,,10
 550 0123 0F1F4400 		.p2align 3
 550      00
 551              	.L33:
 552              		.loc 1 627 1 view .LVU170
 553 0128 4883C408 		addq	$8, %rsp
 554              		.cfi_remember_state
 555              		.cfi_def_cfa_offset 40
 602:fltk-1.3.4-1/jpeg/jdhuff.c ****   code = GET_BITS(l);
 556              		.loc 1 602 3 view .LVU171
 557 012c B8FFFFFF 		movl	$-1, %eax
 557      FF
 558              		.loc 1 627 1 view .LVU172
 559 0131 5B       		popq	%rbx
 560              		.cfi_def_cfa_offset 32
 561 0132 5D       		popq	%rbp
 562              		.cfi_def_cfa_offset 24
 563              	.LVL75:
 564              		.loc 1 627 1 view .LVU173
 565 0133 415C     		popq	%r12
 566              		.cfi_def_cfa_offset 16
 567              	.LVL76:
 568              		.loc 1 627 1 view .LVU174
 569 0135 415D     		popq	%r13
 570              		.cfi_def_cfa_offset 8
 571 0137 C3       		ret
 572              	.LVL77:
 573              	.L31:
 574              		.cfi_restore_state
 616:fltk-1.3.4-1/jpeg/jdhuff.c ****   state->bits_left = bits_left;
 575              		.loc 1 616 3 is_stmt 1 view .LVU175
 616:fltk-1.3.4-1/jpeg/jdhuff.c ****   state->bits_left = bits_left;
 576              		.loc 1 616 21 is_stmt 0 view .LVU176
 577 0138 49897424 		movq	%rsi, 16(%r12)
 577      10
 617:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 578              		.loc 1 617 3 is_stmt 1 view .LVU177
 617:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 579              		.loc 1 617 20 is_stmt 0 view .LVU178
 580 013d 41895424 		movl	%edx, 24(%r12)
 580      18
 621:fltk-1.3.4-1/jpeg/jdhuff.c ****     WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 581              		.loc 1 621 3 is_stmt 1 view .LVU179
 582 0142 E96BFFFF 		jmp	.L35
 582      FF
 583              		.cfi_endproc
 584              	.LFE53:
 586              		.section	.text.finish_pass_huff,"ax",@progbits
 587              		.p2align 4
 589              	finish_pass_huff:
 590              	.LVL78:
 591              	.LFB54:
 628:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 629:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 630:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 631:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Finish up at the end of a Huffman-compressed scan.
 632:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 633:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 634:fltk-1.3.4-1/jpeg/jdhuff.c **** METHODDEF(void)
 635:fltk-1.3.4-1/jpeg/jdhuff.c **** finish_pass_huff (j_decompress_ptr cinfo)
 636:fltk-1.3.4-1/jpeg/jdhuff.c **** {
 592              		.loc 1 636 1 view -0
 593              		.cfi_startproc
 594              		.loc 1 636 1 is_stmt 0 view .LVU181
 595 0000 F30F1EFA 		endbr64
 637:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 596              		.loc 1 637 3 is_stmt 1 view .LVU182
 597              		.loc 1 637 20 is_stmt 0 view .LVU183
 598 0004 488B8F70 		movq	624(%rdi), %rcx
 598      020000
 599              	.LVL79:
 638:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 639:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Throw away any unused bits remaining in bit buffer; */
 640:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* include any full bytes in next_marker's count of discarded bytes */
 641:fltk-1.3.4-1/jpeg/jdhuff.c ****   cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 600              		.loc 1 641 3 is_stmt 1 view .LVU184
 601              		.loc 1 641 8 is_stmt 0 view .LVU185
 602 000b 488BB768 		movq	616(%rdi), %rsi
 602      020000
 603              		.loc 1 641 65 view .LVU186
 604 0012 8B5120   		movl	32(%rcx), %edx
 605 0015 85D2     		testl	%edx, %edx
 606 0017 8D4207   		leal	7(%rdx), %eax
 607 001a 0F49C2   		cmovns	%edx, %eax
 608 001d C1F803   		sarl	$3, %eax
 609              		.loc 1 641 34 view .LVU187
 610 0020 014624   		addl	%eax, 36(%rsi)
 642:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->bitstate.bits_left = 0;
 611              		.loc 1 642 3 is_stmt 1 view .LVU188
 612              		.loc 1 642 31 is_stmt 0 view .LVU189
 613 0023 C7412000 		movl	$0, 32(%rcx)
 613      000000
 643:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 614              		.loc 1 643 1 view .LVU190
 615 002a C3       		ret
 616              		.cfi_endproc
 617              	.LFE54:
 619              		.section	.text.process_restart,"ax",@progbits
 620              		.p2align 4
 622              	process_restart:
 623              	.LVL80:
 624              	.LFB55:
 644:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 645:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 646:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 647:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Check for a restart marker & resynchronize decoder.
 648:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Returns FALSE if must suspend.
 649:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 650:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 651:fltk-1.3.4-1/jpeg/jdhuff.c **** LOCAL(boolean)
 652:fltk-1.3.4-1/jpeg/jdhuff.c **** process_restart (j_decompress_ptr cinfo)
 653:fltk-1.3.4-1/jpeg/jdhuff.c **** {
 625              		.loc 1 653 1 is_stmt 1 view -0
 626              		.cfi_startproc
 654:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 627              		.loc 1 654 3 view .LVU192
 653:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 628              		.loc 1 653 1 is_stmt 0 view .LVU193
 629 0000 55       		pushq	%rbp
 630              		.cfi_def_cfa_offset 16
 631              		.cfi_offset 6, -16
 632 0001 53       		pushq	%rbx
 633              		.cfi_def_cfa_offset 24
 634              		.cfi_offset 3, -24
 635 0002 4889FB   		movq	%rdi, %rbx
 636 0005 4883EC08 		subq	$8, %rsp
 637              		.cfi_def_cfa_offset 32
 638              		.loc 1 654 20 view .LVU194
 639 0009 488BAF70 		movq	624(%rdi), %rbp
 639      020000
 640              	.LVL81:
 655:fltk-1.3.4-1/jpeg/jdhuff.c ****   int ci;
 641              		.loc 1 655 3 is_stmt 1 view .LVU195
 656:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 657:fltk-1.3.4-1/jpeg/jdhuff.c ****   finish_pass_huff(cinfo);
 642              		.loc 1 657 3 view .LVU196
 643              	.LBB10:
 644              	.LBI10:
 635:fltk-1.3.4-1/jpeg/jdhuff.c **** {
 645              		.loc 1 635 1 view .LVU197
 646              	.LBB11:
 637:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 647              		.loc 1 637 3 view .LVU198
 641:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->bitstate.bits_left = 0;
 648              		.loc 1 641 3 view .LVU199
 641:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->bitstate.bits_left = 0;
 649              		.loc 1 641 8 is_stmt 0 view .LVU200
 650 0010 488B8F68 		movq	616(%rdi), %rcx
 650      020000
 641:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->bitstate.bits_left = 0;
 651              		.loc 1 641 65 view .LVU201
 652 0017 8B5520   		movl	32(%rbp), %edx
 653 001a 85D2     		testl	%edx, %edx
 654 001c 8D4207   		leal	7(%rdx), %eax
 655 001f 0F49C2   		cmovns	%edx, %eax
 656 0022 C1F803   		sarl	$3, %eax
 641:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->bitstate.bits_left = 0;
 657              		.loc 1 641 34 view .LVU202
 658 0025 014124   		addl	%eax, 36(%rcx)
 642:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 659              		.loc 1 642 3 is_stmt 1 view .LVU203
 642:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 660              		.loc 1 642 31 is_stmt 0 view .LVU204
 661 0028 C7452000 		movl	$0, 32(%rbp)
 661      000000
 662              	.LVL82:
 642:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 663              		.loc 1 642 31 view .LVU205
 664              	.LBE11:
 665              	.LBE10:
 658:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 659:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Advance past the RSTn marker */
 660:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (! (*cinfo->marker->read_restart_marker) (cinfo))
 666              		.loc 1 660 3 is_stmt 1 view .LVU206
 667              		.loc 1 660 10 is_stmt 0 view .LVU207
 668 002f 488B8768 		movq	616(%rdi), %rax
 668      020000
 669 0036 FF5010   		call	*16(%rax)
 670              	.LVL83:
 671              		.loc 1 660 6 view .LVU208
 672 0039 85C0     		testl	%eax, %eax
 673 003b 744D     		je	.L46
 674              	.LVL84:
 661:fltk-1.3.4-1/jpeg/jdhuff.c ****     return FALSE;
 662:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 663:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Re-initialize DC predictions to 0 */
 664:fltk-1.3.4-1/jpeg/jdhuff.c ****   for (ci = 0; ci < cinfo->comps_in_scan; ci++)
 675              		.loc 1 664 16 is_stmt 1 view .LVU209
 676              		.loc 1 664 3 is_stmt 0 view .LVU210
 677 003d 8B8BC001 		movl	448(%rbx), %ecx
 677      0000
 678 0043 85C9     		testl	%ecx, %ecx
 679 0045 7E1D     		jle	.L48
 680 0047 31C0     		xorl	%eax, %eax
 681              	.LVL85:
 682 0049 0F1F8000 		.p2align 4,,10
 682      000000
 683              		.p2align 3
 684              	.L49:
 665:fltk-1.3.4-1/jpeg/jdhuff.c ****     entropy->saved.last_dc_val[ci] = 0;
 685              		.loc 1 665 5 is_stmt 1 discriminator 3 view .LVU211
 686              		.loc 1 665 36 is_stmt 0 discriminator 3 view .LVU212
 687 0050 C744852C 		movl	$0, 44(%rbp,%rax,4)
 687      00000000 
 664:fltk-1.3.4-1/jpeg/jdhuff.c ****     entropy->saved.last_dc_val[ci] = 0;
 688              		.loc 1 664 43 is_stmt 1 discriminator 3 view .LVU213
 689              	.LVL86:
 664:fltk-1.3.4-1/jpeg/jdhuff.c ****     entropy->saved.last_dc_val[ci] = 0;
 690              		.loc 1 664 16 discriminator 3 view .LVU214
 691 0058 4883C001 		addq	$1, %rax
 692              	.LVL87:
 664:fltk-1.3.4-1/jpeg/jdhuff.c ****     entropy->saved.last_dc_val[ci] = 0;
 693              		.loc 1 664 3 is_stmt 0 discriminator 3 view .LVU215
 694 005c 3983C001 		cmpl	%eax, 448(%rbx)
 694      0000
 695 0062 7FEC     		jg	.L49
 696              	.L48:
 666:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Re-init EOB run count, too */
 667:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->saved.EOBRUN = 0;
 697              		.loc 1 667 3 is_stmt 1 view .LVU216
 698              		.loc 1 667 25 is_stmt 0 view .LVU217
 699 0064 C7452800 		movl	$0, 40(%rbp)
 699      000000
 668:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 669:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Reset restart counter */
 670:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->restarts_to_go = cinfo->restart_interval;
 700              		.loc 1 670 3 is_stmt 1 view .LVU218
 701              		.loc 1 670 34 is_stmt 0 view .LVU219
 702 006b 8B837401 		movl	372(%rbx), %eax
 702      0000
 703              		.loc 1 670 27 view .LVU220
 704 0071 894540   		movl	%eax, 64(%rbp)
 671:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 672:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Reset out-of-data flag, unless read_restart_marker left us smack up
 673:fltk-1.3.4-1/jpeg/jdhuff.c ****    * against a marker.  In that case we will end up treating the next data
 674:fltk-1.3.4-1/jpeg/jdhuff.c ****    * segment as empty, and we can avoid producing bogus output pixels by
 675:fltk-1.3.4-1/jpeg/jdhuff.c ****    * leaving the flag set.
 676:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
 677:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (cinfo->unread_marker == 0)
 705              		.loc 1 677 3 is_stmt 1 view .LVU221
 706              		.loc 1 677 6 is_stmt 0 view .LVU222
 707 0074 8B933C02 		movl	572(%rbx), %edx
 707      0000
 678:fltk-1.3.4-1/jpeg/jdhuff.c ****     entropy->insufficient_data = FALSE;
 679:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 680:fltk-1.3.4-1/jpeg/jdhuff.c ****   return TRUE;
 708              		.loc 1 680 10 view .LVU223
 709 007a B8010000 		movl	$1, %eax
 709      00
 677:fltk-1.3.4-1/jpeg/jdhuff.c ****     entropy->insufficient_data = FALSE;
 710              		.loc 1 677 6 view .LVU224
 711 007f 85D2     		testl	%edx, %edx
 712 0081 7507     		jne	.L46
 678:fltk-1.3.4-1/jpeg/jdhuff.c ****     entropy->insufficient_data = FALSE;
 713              		.loc 1 678 5 is_stmt 1 view .LVU225
 678:fltk-1.3.4-1/jpeg/jdhuff.c ****     entropy->insufficient_data = FALSE;
 714              		.loc 1 678 32 is_stmt 0 view .LVU226
 715 0083 C7453C00 		movl	$0, 60(%rbp)
 715      000000
 716              	.L46:
 681:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 717              		.loc 1 681 1 view .LVU227
 718 008a 4883C408 		addq	$8, %rsp
 719              		.cfi_def_cfa_offset 24
 720 008e 5B       		popq	%rbx
 721              		.cfi_def_cfa_offset 16
 722              	.LVL88:
 723              		.loc 1 681 1 view .LVU228
 724 008f 5D       		popq	%rbp
 725              		.cfi_def_cfa_offset 8
 726              	.LVL89:
 727              		.loc 1 681 1 view .LVU229
 728 0090 C3       		ret
 729              		.cfi_endproc
 730              	.LFE55:
 732              		.section	.text.decode_mcu_DC_first,"ax",@progbits
 733              		.p2align 4
 735              	decode_mcu_DC_first:
 736              	.LVL90:
 737              	.LFB56:
 682:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 683:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 684:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 685:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Huffman MCU decoding.
 686:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Each of these routines decodes and returns one MCU's worth of
 687:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Huffman-compressed coefficients. 
 688:fltk-1.3.4-1/jpeg/jdhuff.c ****  * The coefficients are reordered from zigzag order into natural array order,
 689:fltk-1.3.4-1/jpeg/jdhuff.c ****  * but are not dequantized.
 690:fltk-1.3.4-1/jpeg/jdhuff.c ****  *
 691:fltk-1.3.4-1/jpeg/jdhuff.c ****  * The i'th block of the MCU is stored into the block pointed to by
 692:fltk-1.3.4-1/jpeg/jdhuff.c ****  * MCU_data[i].  WE ASSUME THIS AREA IS INITIALLY ZEROED BY THE CALLER.
 693:fltk-1.3.4-1/jpeg/jdhuff.c ****  * (Wholesale zeroing is usually a little faster than retail...)
 694:fltk-1.3.4-1/jpeg/jdhuff.c ****  *
 695:fltk-1.3.4-1/jpeg/jdhuff.c ****  * We return FALSE if data source requested suspension.  In that case no
 696:fltk-1.3.4-1/jpeg/jdhuff.c ****  * changes have been made to permanent state.  (Exception: some output
 697:fltk-1.3.4-1/jpeg/jdhuff.c ****  * coefficients may already have been assigned.  This is harmless for
 698:fltk-1.3.4-1/jpeg/jdhuff.c ****  * spectral selection, since we'll just re-assign them on the next call.
 699:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Successive approximation AC refinement has to be more careful, however.)
 700:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 701:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 702:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 703:fltk-1.3.4-1/jpeg/jdhuff.c ****  * MCU decoding for DC initial scan (either spectral selection,
 704:fltk-1.3.4-1/jpeg/jdhuff.c ****  * or first pass of successive approximation).
 705:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 706:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 707:fltk-1.3.4-1/jpeg/jdhuff.c **** METHODDEF(boolean)
 708:fltk-1.3.4-1/jpeg/jdhuff.c **** decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
 709:fltk-1.3.4-1/jpeg/jdhuff.c **** {   
 738              		.loc 1 709 1 is_stmt 1 view -0
 739              		.cfi_startproc
 740              		.loc 1 709 1 is_stmt 0 view .LVU231
 741 0000 F30F1EFA 		endbr64
 742 0004 4157     		pushq	%r15
 743              		.cfi_def_cfa_offset 16
 744              		.cfi_offset 15, -16
 745 0006 4156     		pushq	%r14
 746              		.cfi_def_cfa_offset 24
 747              		.cfi_offset 14, -24
 748 0008 4989FE   		movq	%rdi, %r14
 749 000b 4155     		pushq	%r13
 750              		.cfi_def_cfa_offset 32
 751              		.cfi_offset 13, -32
 752 000d 4989F5   		movq	%rsi, %r13
 753 0010 4154     		pushq	%r12
 754              		.cfi_def_cfa_offset 40
 755              		.cfi_offset 12, -40
 756 0012 55       		pushq	%rbp
 757              		.cfi_def_cfa_offset 48
 758              		.cfi_offset 6, -48
 759 0013 53       		pushq	%rbx
 760              		.cfi_def_cfa_offset 56
 761              		.cfi_offset 3, -56
 762 0014 4883EC78 		subq	$120, %rsp
 763              		.cfi_def_cfa_offset 176
 710:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 711:fltk-1.3.4-1/jpeg/jdhuff.c ****   int Al = cinfo->Al;
 712:fltk-1.3.4-1/jpeg/jdhuff.c ****   register int s, r;
 713:fltk-1.3.4-1/jpeg/jdhuff.c ****   int blkn, ci;
 714:fltk-1.3.4-1/jpeg/jdhuff.c ****   JBLOCKROW block;
 715:fltk-1.3.4-1/jpeg/jdhuff.c ****   BITREAD_STATE_VARS;
 716:fltk-1.3.4-1/jpeg/jdhuff.c ****   savable_state state;
 717:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl * tbl;
 718:fltk-1.3.4-1/jpeg/jdhuff.c ****   jpeg_component_info * compptr;
 719:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 720:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Process restart marker if needed; may have to suspend */
 721:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (cinfo->restart_interval) {
 764              		.loc 1 721 6 view .LVU232
 765 0018 448B9774 		movl	372(%rdi), %r10d
 765      010000
 710:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 766              		.loc 1 710 20 view .LVU233
 767 001f 4C8BA770 		movq	624(%rdi), %r12
 767      020000
 709:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 768              		.loc 1 709 1 view .LVU234
 769 0026 64488B04 		movq	%fs:40, %rax
 769      25280000 
 769      00
 770 002f 48894424 		movq	%rax, 104(%rsp)
 770      68
 771 0034 31C0     		xorl	%eax, %eax
 710:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 772              		.loc 1 710 3 is_stmt 1 view .LVU235
 773              	.LVL91:
 711:fltk-1.3.4-1/jpeg/jdhuff.c ****   register int s, r;
 774              		.loc 1 711 3 view .LVU236
 711:fltk-1.3.4-1/jpeg/jdhuff.c ****   register int s, r;
 775              		.loc 1 711 7 is_stmt 0 view .LVU237
 776 0036 8B872802 		movl	552(%rdi), %eax
 776      0000
 777 003c 89442418 		movl	%eax, 24(%rsp)
 778              	.LVL92:
 712:fltk-1.3.4-1/jpeg/jdhuff.c ****   int blkn, ci;
 779              		.loc 1 712 3 is_stmt 1 view .LVU238
 713:fltk-1.3.4-1/jpeg/jdhuff.c ****   JBLOCKROW block;
 780              		.loc 1 713 3 view .LVU239
 714:fltk-1.3.4-1/jpeg/jdhuff.c ****   BITREAD_STATE_VARS;
 781              		.loc 1 714 3 view .LVU240
 715:fltk-1.3.4-1/jpeg/jdhuff.c ****   savable_state state;
 782              		.loc 1 715 3 view .LVU241
 715:fltk-1.3.4-1/jpeg/jdhuff.c ****   savable_state state;
 783              		.loc 1 715 3 view .LVU242
 715:fltk-1.3.4-1/jpeg/jdhuff.c ****   savable_state state;
 784              		.loc 1 715 3 view .LVU243
 716:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl * tbl;
 785              		.loc 1 716 3 view .LVU244
 717:fltk-1.3.4-1/jpeg/jdhuff.c ****   jpeg_component_info * compptr;
 786              		.loc 1 717 3 view .LVU245
 718:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 787              		.loc 1 718 3 view .LVU246
 788              		.loc 1 721 3 view .LVU247
 789              		.loc 1 721 6 is_stmt 0 view .LVU248
 790 0040 4585D2   		testl	%r10d, %r10d
 791 0043 740E     		je	.L60
 722:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (entropy->restarts_to_go == 0)
 792              		.loc 1 722 5 is_stmt 1 view .LVU249
 793              		.loc 1 722 8 is_stmt 0 view .LVU250
 794 0045 458B4424 		movl	64(%r12), %r8d
 794      40
 795 004a 4585C0   		testl	%r8d, %r8d
 796 004d 0F845D02 		je	.L86
 796      0000
 797              	.L60:
 723:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (! process_restart(cinfo))
 724:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 725:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 726:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 727:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* If we've run out of data, just leave the MCU set to zeroes.
 728:fltk-1.3.4-1/jpeg/jdhuff.c ****    * This way, we return uniform gray for the remainder of the segment.
 729:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
 730:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (! entropy->insufficient_data) {
 798              		.loc 1 730 3 is_stmt 1 view .LVU251
 799              		.loc 1 730 6 is_stmt 0 view .LVU252
 800 0053 458B4C24 		movl	60(%r12), %r9d
 800      3C
 801 0058 4585C9   		testl	%r9d, %r9d
 802 005b 0F858701 		jne	.L59
 802      0000
 803              	.LVL93:
 804              	.L58:
 731:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 732:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Load up working state */
 733:fltk-1.3.4-1/jpeg/jdhuff.c ****     BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 805              		.loc 1 733 5 is_stmt 1 view .LVU253
 806 0061 498B4628 		movq	40(%r14), %rax
 734:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 807              		.loc 1 734 5 is_stmt 0 view .LVU254
 808 0065 418B7C24 		movl	56(%r12), %edi
 808      38
 733:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 809              		.loc 1 733 5 view .LVU255
 810 006a 4C897424 		movq	%r14, 64(%rsp)
 810      40
 733:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 811              		.loc 1 733 5 is_stmt 1 view .LVU256
 812              		.loc 1 734 5 is_stmt 0 view .LVU257
 813 006f F3410F6F 		movdqu	40(%r12), %xmm0
 813      442428
 814 0076 418B5C24 		movl	40(%r12), %ebx
 814      28
 733:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 815              		.loc 1 733 5 view .LVU258
 816 007b 488B08   		movq	(%rax), %rcx
 817 007e 488B5008 		movq	8(%rax), %rdx
 818              		.loc 1 734 5 view .LVU259
 819 0082 897C2460 		movl	%edi, 96(%rsp)
 735:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 736:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Outer loop handles each block in the MCU */
 737:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 738:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 820              		.loc 1 738 5 view .LVU260
 821 0086 418BBEF0 		movl	496(%r14), %edi
 821      010000
 733:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 822              		.loc 1 733 5 view .LVU261
 823 008d 498B7424 		movq	24(%r12), %rsi
 823      18
 734:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 824              		.loc 1 734 5 view .LVU262
 825 0092 895C241C 		movl	%ebx, 28(%rsp)
 733:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 826              		.loc 1 733 5 view .LVU263
 827 0096 48895424 		movq	%rdx, 40(%rsp)
 827      28
 828 009b 418B5424 		movl	32(%r12), %edx
 828      20
 829 00a0 48894C24 		movq	%rcx, 32(%rsp)
 829      20
 733:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 830              		.loc 1 733 5 is_stmt 1 view .LVU264
 733:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 831              		.loc 1 733 5 view .LVU265
 832              	.LVL94:
 733:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 833              		.loc 1 733 5 view .LVU266
 733:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 834              		.loc 1 733 48 view .LVU267
 734:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 835              		.loc 1 734 5 view .LVU268
 836              		.loc 1 738 5 view .LVU269
 837              		.loc 1 738 20 view .LVU270
 734:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 838              		.loc 1 734 5 is_stmt 0 view .LVU271
 839 00a5 0F294424 		movaps	%xmm0, 80(%rsp)
 839      50
 840              		.loc 1 738 5 view .LVU272
 841 00aa 85FF     		testl	%edi, %edi
 842 00ac 0F8EFF00 		jle	.L62
 842      0000
 843              		.loc 1 738 5 view .LVU273
 844 00b2 31DB     		xorl	%ebx, %ebx
 845              	.LVL95:
 846              		.loc 1 738 5 view .LVU274
 847 00b4 EB78     		jmp	.L69
 848              	.LVL96:
 849 00b6 662E0F1F 		.p2align 4,,10
 849      84000000 
 849      0000
 850              		.p2align 3
 851              	.L90:
 852              	.LBB12:
 739:fltk-1.3.4-1/jpeg/jdhuff.c ****       block = MCU_data[blkn];
 740:fltk-1.3.4-1/jpeg/jdhuff.c ****       ci = cinfo->MCU_membership[blkn];
 741:fltk-1.3.4-1/jpeg/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 742:fltk-1.3.4-1/jpeg/jdhuff.c ****       tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 743:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 744:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Decode a single block's worth of coefficients */
 745:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 746:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Section F.2.2.1: decode the DC coefficient difference */
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 853              		.loc 1 747 7 is_stmt 1 discriminator 8 view .LVU275
 854 00c0 450FB684 		movzbl	1312(%r11,%rax), %r8d
 854      03200500 
 854      00
 855 00c9 29CA     		subl	%ecx, %edx
 856              	.LVL97:
 857              		.loc 1 747 7 discriminator 8 view .LVU276
 858              	.L66:
 859              		.loc 1 747 7 is_stmt 0 discriminator 8 view .LVU277
 860              	.LBE12:
 861              		.loc 1 747 58 is_stmt 1 discriminator 14 view .LVU278
 748:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 862              		.loc 1 748 7 discriminator 14 view .LVU279
 863              		.loc 1 748 10 is_stmt 0 discriminator 14 view .LVU280
 864 00cb 4585C0   		testl	%r8d, %r8d
 865 00ce 743A     		je	.L67
 749:fltk-1.3.4-1/jpeg/jdhuff.c **** 	CHECK_BIT_BUFFER(br_state, s, return FALSE);
 866              		.loc 1 749 2 is_stmt 1 view .LVU281
 867 00d0 4139D0   		cmpl	%edx, %r8d
 868 00d3 0F8FA701 		jg	.L87
 868      0000
 869              	.LVL98:
 870              	.L68:
 871              		.loc 1 749 45 discriminator 5 view .LVU282
 750:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = GET_BITS(s);
 872              		.loc 1 750 2 discriminator 5 view .LVU283
 873              		.loc 1 750 6 is_stmt 0 discriminator 5 view .LVU284
 874 00d9 4963C0   		movslq	%r8d, %rax
 875 00dc 4429C2   		subl	%r8d, %edx
 876              	.LVL99:
 877              		.loc 1 750 6 discriminator 5 view .LVU285
 878 00df 4C8D0D00 		leaq	bmask(%rip), %r9
 878      000000
 879 00e6 418B3C81 		movl	(%r9,%rax,4), %edi
 880 00ea 89D1     		movl	%edx, %ecx
 881 00ec 4889F0   		movq	%rsi, %rax
 882 00ef 48D3F8   		sarq	%cl, %rax
 883 00f2 4889C1   		movq	%rax, %rcx
 884              	.LVL100:
 751:fltk-1.3.4-1/jpeg/jdhuff.c **** 	s = HUFF_EXTEND(r, s);
 885              		.loc 1 751 2 is_stmt 1 discriminator 5 view .LVU286
 886              		.loc 1 751 6 is_stmt 0 discriminator 5 view .LVU287
 887 00f5 418D40FF 		leal	-1(%r8), %eax
 888 00f9 4898     		cltq
 889 00fb 4189C8   		movl	%ecx, %r8d
 890 00fe 4121F8   		andl	%edi, %r8d
 891              	.LVL101:
 892              		.loc 1 751 6 discriminator 5 view .LVU288
 893 0101 45390481 		cmpl	%r8d, (%r9,%rax,4)
 894 0105 7C03     		jl	.L67
 895              		.loc 1 751 6 discriminator 1 view .LVU289
 896 0107 4129F8   		subl	%edi, %r8d
 897              	.LVL102:
 898              	.L67:
 752:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 753:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 754:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Convert DC difference to actual value, update last_dc_val */
 755:fltk-1.3.4-1/jpeg/jdhuff.c ****       s += state.last_dc_val[ci];
 899              		.loc 1 755 7 is_stmt 1 discriminator 2 view .LVU290
 756:fltk-1.3.4-1/jpeg/jdhuff.c ****       state.last_dc_val[ci] = s;
 757:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Scale and output the coefficient (assumes jpeg_natural_order[0]=0) */
 758:fltk-1.3.4-1/jpeg/jdhuff.c ****       (*block)[0] = (JCOEF) (s << Al);
 900              		.loc 1 758 32 is_stmt 0 discriminator 2 view .LVU291
 901 010a 0FB64C24 		movzbl	24(%rsp), %ecx
 901      18
 755:fltk-1.3.4-1/jpeg/jdhuff.c ****       state.last_dc_val[ci] = s;
 902              		.loc 1 755 9 discriminator 2 view .LVU292
 903 010f 460344BC 		addl	84(%rsp,%r15,4), %r8d
 903      54
 904              	.LVL103:
 756:fltk-1.3.4-1/jpeg/jdhuff.c ****       state.last_dc_val[ci] = s;
 905              		.loc 1 756 7 is_stmt 1 discriminator 2 view .LVU293
 906 0114 4883C301 		addq	$1, %rbx
 907              	.LVL104:
 756:fltk-1.3.4-1/jpeg/jdhuff.c ****       state.last_dc_val[ci] = s;
 908              		.loc 1 756 29 is_stmt 0 discriminator 2 view .LVU294
 909 0118 468944BC 		movl	%r8d, 84(%rsp,%r15,4)
 909      54
 910              		.loc 1 758 7 is_stmt 1 discriminator 2 view .LVU295
 911              		.loc 1 758 32 is_stmt 0 discriminator 2 view .LVU296
 912 011d 41D3E0   		sall	%cl, %r8d
 913              	.LVL105:
 914              		.loc 1 758 21 discriminator 2 view .LVU297
 915 0120 66448945 		movw	%r8w, 0(%rbp)
 915      00
 738:fltk-1.3.4-1/jpeg/jdhuff.c ****       block = MCU_data[blkn];
 916              		.loc 1 738 49 is_stmt 1 discriminator 2 view .LVU298
 738:fltk-1.3.4-1/jpeg/jdhuff.c ****       block = MCU_data[blkn];
 917              		.loc 1 738 20 discriminator 2 view .LVU299
 738:fltk-1.3.4-1/jpeg/jdhuff.c ****       block = MCU_data[blkn];
 918              		.loc 1 738 5 is_stmt 0 discriminator 2 view .LVU300
 919 0125 41399EF0 		cmpl	%ebx, 496(%r14)
 919      010000
 920 012c 7E7A     		jle	.L88
 921              	.LVL106:
 922              	.L69:
 739:fltk-1.3.4-1/jpeg/jdhuff.c ****       ci = cinfo->MCU_membership[blkn];
 923              		.loc 1 739 7 is_stmt 1 view .LVU301
 741:fltk-1.3.4-1/jpeg/jdhuff.c ****       tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 924              		.loc 1 741 15 is_stmt 0 view .LVU302
 925 012e 4D63BC9E 		movslq	500(%r14,%rbx,4), %r15
 925      F4010000 
 739:fltk-1.3.4-1/jpeg/jdhuff.c ****       ci = cinfo->MCU_membership[blkn];
 926              		.loc 1 739 13 view .LVU303
 927 0136 498B6CDD 		movq	0(%r13,%rbx,8), %rbp
 927      00
 928              	.LVL107:
 740:fltk-1.3.4-1/jpeg/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 929              		.loc 1 740 7 is_stmt 1 view .LVU304
 741:fltk-1.3.4-1/jpeg/jdhuff.c ****       tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 930              		.loc 1 741 7 view .LVU305
 742:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 931              		.loc 1 742 7 view .LVU306
 742:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 932              		.loc 1 742 42 is_stmt 0 view .LVU307
 933 013b 4B8B84FE 		movq	456(%r14,%r15,8), %rax
 933      C8010000 
 742:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 934              		.loc 1 742 11 view .LVU308
 935 0143 48634014 		movslq	20(%rax), %rax
 936 0147 4D8B5CC4 		movq	72(%r12,%rax,8), %r11
 936      48
 937              	.LVL108:
 938              	.LBB13:
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 939              		.loc 1 747 7 is_stmt 1 view .LVU309
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 940              		.loc 1 747 7 view .LVU310
 941 014c 83FA07   		cmpl	$7, %edx
 942 014f 0F8ECB00 		jle	.L89
 942      0000
 943              	.LVL109:
 944              	.L63:
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 945              		.loc 1 747 7 discriminator 6 view .LVU311
 946 0155 8D4AF8   		leal	-8(%rdx), %ecx
 947 0158 4889F0   		movq	%rsi, %rax
 948 015b 48D3F8   		sarq	%cl, %rax
 949              	.LVL110:
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 950              		.loc 1 747 7 discriminator 6 view .LVU312
 951 015e 0FB6C0   		movzbl	%al, %eax
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 952              		.loc 1 747 7 is_stmt 0 discriminator 6 view .LVU313
 953 0161 418B8C83 		movl	288(%r11,%rax,4), %ecx
 953      20010000 
 954              	.LVL111:
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 955              		.loc 1 747 7 discriminator 6 view .LVU314
 956 0169 85C9     		testl	%ecx, %ecx
 957 016b 0F854FFF 		jne	.L90
 957      FFFF
 958              	.L65:
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 959              		.loc 1 747 7 discriminator 6 view .LVU315
 960 0171 F30F1EFA 		endbr64
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 961              		.loc 1 747 7 view .LVU316
 962 0175 41B80900 		movl	$9, %r8d
 962      0000
 963              	.LVL112:
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 964              		.loc 1 747 7 is_stmt 1 view .LVU317
 965 017b 488D7C24 		leaq	32(%rsp), %rdi
 965      20
 966 0180 4C89D9   		movq	%r11, %rcx
 967 0183 E8000000 		call	jpeg_huff_decode
 967      00
 968              	.LVL113:
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 969              		.loc 1 747 7 is_stmt 0 view .LVU318
 970 0188 4189C0   		movl	%eax, %r8d
 971              	.LVL114:
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 972              		.loc 1 747 7 view .LVU319
 973 018b 85C0     		testl	%eax, %eax
 974 018d 0F88DD00 		js	.L64
 974      0000
 975              	.LVL115:
 976              	.L92:
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 977              		.loc 1 747 7 is_stmt 1 discriminator 13 view .LVU320
 978 0193 488B7424 		movq	48(%rsp), %rsi
 978      30
 979              	.LVL116:
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 980              		.loc 1 747 7 discriminator 13 view .LVU321
 981 0198 8B542438 		movl	56(%rsp), %edx
 982              	.LVL117:
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 983              		.loc 1 747 7 is_stmt 0 discriminator 13 view .LVU322
 984 019c E92AFFFF 		jmp	.L66
 984      FF
 985              	.LVL118:
 986              		.p2align 4,,10
 987 01a1 0F1F8000 		.p2align 3
 987      000000
 988              	.L88:
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 989              		.loc 1 747 7 discriminator 13 view .LVU323
 990 01a8 498B4628 		movq	40(%r14), %rax
 991 01ac 488B4C24 		movq	32(%rsp), %rcx
 991      20
 992              	.LVL119:
 993              	.L62:
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 994              		.loc 1 747 7 discriminator 13 view .LVU324
 995              	.LBE13:
 759:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 760:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 761:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Completed MCU, so update state */
 762:fltk-1.3.4-1/jpeg/jdhuff.c ****     BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 996              		.loc 1 762 5 is_stmt 1 view .LVU325
 997 01b1 488908   		movq	%rcx, (%rax)
 998              		.loc 1 762 5 view .LVU326
 999 01b4 498B4628 		movq	40(%r14), %rax
 1000 01b8 488B4C24 		movq	40(%rsp), %rcx
 1000      28
 1001 01bd 48894808 		movq	%rcx, 8(%rax)
 1002              		.loc 1 762 5 view .LVU327
 763:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(entropy->saved, state);
 1003              		.loc 1 763 5 is_stmt 0 view .LVU328
 1004 01c1 8B44241C 		movl	28(%rsp), %eax
 762:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(entropy->saved, state);
 1005              		.loc 1 762 5 view .LVU329
 1006 01c5 49897424 		movq	%rsi, 24(%r12)
 1006      18
 762:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(entropy->saved, state);
 1007              		.loc 1 762 5 is_stmt 1 view .LVU330
 1008              		.loc 1 763 5 is_stmt 0 view .LVU331
 1009 01ca 89442450 		movl	%eax, 80(%rsp)
 1010 01ce 8B442460 		movl	96(%rsp), %eax
 1011 01d2 660F6F4C 		movdqa	80(%rsp), %xmm1
 1011      2450
 762:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(entropy->saved, state);
 1012              		.loc 1 762 5 view .LVU332
 1013 01d8 41895424 		movl	%edx, 32(%r12)
 1013      20
 1014              		.loc 1 763 5 is_stmt 1 view .LVU333
 1015              		.loc 1 763 5 is_stmt 0 view .LVU334
 1016 01dd 41894424 		movl	%eax, 56(%r12)
 1016      38
 1017 01e2 410F114C 		movups	%xmm1, 40(%r12)
 1017      2428
 1018              	.LVL120:
 1019              	.L59:
 764:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 765:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 766:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Account for restart interval (no-op if not using restarts) */
 767:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->restarts_to_go--;
 1020              		.loc 1 767 3 is_stmt 1 view .LVU335
 1021              		.loc 1 767 26 is_stmt 0 view .LVU336
 1022 01e8 41836C24 		subl	$1, 64(%r12)
 1022      4001
 768:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 769:fltk-1.3.4-1/jpeg/jdhuff.c ****   return TRUE;
 1023              		.loc 1 769 3 is_stmt 1 view .LVU337
 1024              		.loc 1 769 10 is_stmt 0 view .LVU338
 1025 01ee B8010000 		movl	$1, %eax
 1025      00
 1026              	.L56:
 770:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 1027              		.loc 1 770 1 view .LVU339
 1028 01f3 488B5C24 		movq	104(%rsp), %rbx
 1028      68
 1029 01f8 6448331C 		xorq	%fs:40, %rbx
 1029      25280000 
 1029      00
 1030 0201 0F85C500 		jne	.L91
 1030      0000
 1031 0207 4883C478 		addq	$120, %rsp
 1032              		.cfi_remember_state
 1033              		.cfi_def_cfa_offset 56
 1034 020b 5B       		popq	%rbx
 1035              		.cfi_def_cfa_offset 48
 1036 020c 5D       		popq	%rbp
 1037              		.cfi_def_cfa_offset 40
 1038 020d 415C     		popq	%r12
 1039              		.cfi_def_cfa_offset 32
 1040              	.LVL121:
 1041              		.loc 1 770 1 view .LVU340
 1042 020f 415D     		popq	%r13
 1043              		.cfi_def_cfa_offset 24
 1044              	.LVL122:
 1045              		.loc 1 770 1 view .LVU341
 1046 0211 415E     		popq	%r14
 1047              		.cfi_def_cfa_offset 16
 1048              	.LVL123:
 1049              		.loc 1 770 1 view .LVU342
 1050 0213 415F     		popq	%r15
 1051              		.cfi_def_cfa_offset 8
 1052 0215 C3       		ret
 1053              	.LVL124:
 1054 0216 662E0F1F 		.p2align 4,,10
 1054      84000000 
 1054      0000
 1055              		.p2align 3
 1056              	.L89:
 1057              		.cfi_restore_state
 1058              	.LBB14:
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 1059              		.loc 1 747 7 discriminator 1 view .LVU343
 1060 0220 488D7C24 		leaq	32(%rsp), %rdi
 1060      20
 1061 0225 31C9     		xorl	%ecx, %ecx
 1062 0227 4C895C24 		movq	%r11, 16(%rsp)
 1062      10
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 1063              		.loc 1 747 7 is_stmt 1 discriminator 1 view .LVU344
 1064 022c 48897C24 		movq	%rdi, 8(%rsp)
 1064      08
 1065 0231 E8000000 		call	jpeg_fill_bit_buffer
 1065      00
 1066              	.LVL125:
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 1067              		.loc 1 747 7 is_stmt 0 discriminator 1 view .LVU345
 1068 0236 85C0     		testl	%eax, %eax
 1069 0238 7436     		je	.L64
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 1070              		.loc 1 747 7 is_stmt 1 discriminator 4 view .LVU346
 1071 023a 8B542438 		movl	56(%rsp), %edx
 1072 023e 488B7424 		movq	48(%rsp), %rsi
 1072      30
 1073              	.LVL126:
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 1074              		.loc 1 747 7 discriminator 4 view .LVU347
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 1075              		.loc 1 747 7 discriminator 4 view .LVU348
 1076 0243 488B7C24 		movq	8(%rsp), %rdi
 1076      08
 1077 0248 4C8B5C24 		movq	16(%rsp), %r11
 1077      10
 1078 024d 83FA07   		cmpl	$7, %edx
 1079 0250 0F8FFFFE 		jg	.L63
 1079      FFFF
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 1080              		.loc 1 747 7 is_stmt 0 view .LVU349
 1081 0256 41B80100 		movl	$1, %r8d
 1081      0000
 1082              	.LVL127:
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 1083              		.loc 1 747 7 is_stmt 1 view .LVU350
 1084 025c 4C89D9   		movq	%r11, %rcx
 1085 025f E8000000 		call	jpeg_huff_decode
 1085      00
 1086              	.LVL128:
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 1087              		.loc 1 747 7 is_stmt 0 view .LVU351
 1088 0264 4189C0   		movl	%eax, %r8d
 1089              	.LVL129:
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 1090              		.loc 1 747 7 view .LVU352
 1091 0267 85C0     		testl	%eax, %eax
 1092 0269 0F8924FF 		jns	.L92
 1092      FFFF
 1093              	.LVL130:
 1094 026f 90       		.p2align 4,,10
 1095              		.p2align 3
 1096              	.L64:
 747:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (s) {
 1097              		.loc 1 747 7 view .LVU353
 1098              	.LBE14:
 724:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 1099              		.loc 1 724 9 view .LVU354
 1100 0270 31C0     		xorl	%eax, %eax
 1101 0272 E97CFFFF 		jmp	.L56
 1101      FF
 1102              	.LVL131:
 1103 0277 660F1F84 		.p2align 4,,10
 1103      00000000 
 1103      00
 1104              		.p2align 3
 1105              	.L87:
 749:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = GET_BITS(s);
 1106              		.loc 1 749 2 is_stmt 1 discriminator 1 view .LVU355
 1107 0280 488D7C24 		leaq	32(%rsp), %rdi
 1107      20
 1108 0285 4489C1   		movl	%r8d, %ecx
 1109 0288 44894424 		movl	%r8d, 8(%rsp)
 1109      08
 1110 028d E8000000 		call	jpeg_fill_bit_buffer
 1110      00
 1111              	.LVL132:
 749:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = GET_BITS(s);
 1112              		.loc 1 749 2 is_stmt 0 discriminator 1 view .LVU356
 1113 0292 85C0     		testl	%eax, %eax
 1114 0294 74DA     		je	.L64
 749:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = GET_BITS(s);
 1115              		.loc 1 749 2 is_stmt 1 discriminator 4 view .LVU357
 1116 0296 488B7424 		movq	48(%rsp), %rsi
 1116      30
 1117              	.LVL133:
 749:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = GET_BITS(s);
 1118              		.loc 1 749 2 discriminator 4 view .LVU358
 1119 029b 8B542438 		movl	56(%rsp), %edx
 1120 029f 448B4424 		movl	8(%rsp), %r8d
 1120      08
 1121              	.LVL134:
 749:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = GET_BITS(s);
 1122              		.loc 1 749 2 is_stmt 0 discriminator 4 view .LVU359
 1123 02a4 E930FEFF 		jmp	.L68
 1123      FF
 1124              	.LVL135:
 1125 02a9 0F1F8000 		.p2align 4,,10
 1125      000000
 1126              		.p2align 3
 1127              	.L86:
 723:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 1128              		.loc 1 723 7 is_stmt 1 view .LVU360
 723:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 1129              		.loc 1 723 13 is_stmt 0 view .LVU361
 1130 02b0 E8000000 		call	process_restart
 1130      00
 1131              	.LVL136:
 723:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 1132              		.loc 1 723 10 view .LVU362
 1133 02b5 85C0     		testl	%eax, %eax
 1134 02b7 74B7     		je	.L64
 730:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1135              		.loc 1 730 3 is_stmt 1 view .LVU363
 730:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1136              		.loc 1 730 6 is_stmt 0 view .LVU364
 1137 02b9 458B4C24 		movl	60(%r12), %r9d
 1137      3C
 1138 02be 4585C9   		testl	%r9d, %r9d
 1139 02c1 0F849AFD 		je	.L58
 1139      FFFF
 1140 02c7 E91CFFFF 		jmp	.L59
 1140      FF
 1141              	.L91:
 1142              		.loc 1 770 1 view .LVU365
 1143 02cc E8000000 		call	__stack_chk_fail@PLT
 1143      00
 1144              	.LVL137:
 1145              		.cfi_endproc
 1146              	.LFE56:
 1148              		.section	.text.decode_mcu_AC_first,"ax",@progbits
 1149              		.p2align 4
 1151              	decode_mcu_AC_first:
 1152              	.LVL138:
 1153              	.LFB57:
 771:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 772:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 773:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 774:fltk-1.3.4-1/jpeg/jdhuff.c ****  * MCU decoding for AC initial scan (either spectral selection,
 775:fltk-1.3.4-1/jpeg/jdhuff.c ****  * or first pass of successive approximation).
 776:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 777:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 778:fltk-1.3.4-1/jpeg/jdhuff.c **** METHODDEF(boolean)
 779:fltk-1.3.4-1/jpeg/jdhuff.c **** decode_mcu_AC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
 780:fltk-1.3.4-1/jpeg/jdhuff.c **** {   
 1154              		.loc 1 780 1 is_stmt 1 view -0
 1155              		.cfi_startproc
 1156              		.loc 1 780 1 is_stmt 0 view .LVU367
 1157 0000 F30F1EFA 		endbr64
 1158 0004 4157     		pushq	%r15
 1159              		.cfi_def_cfa_offset 16
 1160              		.cfi_offset 15, -16
 1161 0006 4156     		pushq	%r14
 1162              		.cfi_def_cfa_offset 24
 1163              		.cfi_offset 14, -24
 1164 0008 4155     		pushq	%r13
 1165              		.cfi_def_cfa_offset 32
 1166              		.cfi_offset 13, -32
 1167 000a 4989F5   		movq	%rsi, %r13
 1168 000d 4154     		pushq	%r12
 1169              		.cfi_def_cfa_offset 40
 1170              		.cfi_offset 12, -40
 1171 000f 55       		pushq	%rbp
 1172              		.cfi_def_cfa_offset 48
 1173              		.cfi_offset 6, -48
 1174 0010 53       		pushq	%rbx
 1175              		.cfi_def_cfa_offset 56
 1176              		.cfi_offset 3, -56
 1177 0011 4889FB   		movq	%rdi, %rbx
 1178 0014 4883EC58 		subq	$88, %rsp
 1179              		.cfi_def_cfa_offset 144
 781:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 782:fltk-1.3.4-1/jpeg/jdhuff.c ****   register int s, k, r;
 783:fltk-1.3.4-1/jpeg/jdhuff.c ****   unsigned int EOBRUN;
 784:fltk-1.3.4-1/jpeg/jdhuff.c ****   int Se, Al;
 785:fltk-1.3.4-1/jpeg/jdhuff.c ****   const int * natural_order;
 786:fltk-1.3.4-1/jpeg/jdhuff.c ****   JBLOCKROW block;
 787:fltk-1.3.4-1/jpeg/jdhuff.c ****   BITREAD_STATE_VARS;
 788:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl * tbl;
 789:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 790:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Process restart marker if needed; may have to suspend */
 791:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (cinfo->restart_interval) {
 1180              		.loc 1 791 6 view .LVU368
 1181 0018 8B8F7401 		movl	372(%rdi), %ecx
 1181      0000
 781:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 1182              		.loc 1 781 20 view .LVU369
 1183 001e 488BAF70 		movq	624(%rdi), %rbp
 1183      020000
 780:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 1184              		.loc 1 780 1 view .LVU370
 1185 0025 64488B04 		movq	%fs:40, %rax
 1185      25280000 
 1185      00
 1186 002e 48894424 		movq	%rax, 72(%rsp)
 1186      48
 1187 0033 31C0     		xorl	%eax, %eax
 781:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 1188              		.loc 1 781 3 is_stmt 1 view .LVU371
 1189              	.LVL139:
 782:fltk-1.3.4-1/jpeg/jdhuff.c ****   unsigned int EOBRUN;
 1190              		.loc 1 782 3 view .LVU372
 783:fltk-1.3.4-1/jpeg/jdhuff.c ****   int Se, Al;
 1191              		.loc 1 783 3 view .LVU373
 784:fltk-1.3.4-1/jpeg/jdhuff.c ****   const int * natural_order;
 1192              		.loc 1 784 3 view .LVU374
 785:fltk-1.3.4-1/jpeg/jdhuff.c ****   JBLOCKROW block;
 1193              		.loc 1 785 3 view .LVU375
 786:fltk-1.3.4-1/jpeg/jdhuff.c ****   BITREAD_STATE_VARS;
 1194              		.loc 1 786 3 view .LVU376
 787:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl * tbl;
 1195              		.loc 1 787 3 view .LVU377
 787:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl * tbl;
 1196              		.loc 1 787 3 view .LVU378
 787:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl * tbl;
 1197              		.loc 1 787 3 view .LVU379
 788:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1198              		.loc 1 788 3 view .LVU380
 1199              		.loc 1 791 3 view .LVU381
 1200              		.loc 1 791 6 is_stmt 0 view .LVU382
 1201 0035 85C9     		testl	%ecx, %ecx
 1202 0037 740B     		je	.L97
 792:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (entropy->restarts_to_go == 0)
 1203              		.loc 1 792 5 is_stmt 1 view .LVU383
 1204              		.loc 1 792 8 is_stmt 0 view .LVU384
 1205 0039 8B4540   		movl	64(%rbp), %eax
 1206 003c 85C0     		testl	%eax, %eax
 1207 003e 0F84EC01 		je	.L129
 1207      0000
 1208              	.LVL140:
 1209              	.L97:
 793:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (! process_restart(cinfo))
 794:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 795:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 796:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 797:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* If we've run out of data, just leave the MCU set to zeroes.
 798:fltk-1.3.4-1/jpeg/jdhuff.c ****    * This way, we return uniform gray for the remainder of the segment.
 799:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
 800:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (! entropy->insufficient_data) {
 1210              		.loc 1 800 3 is_stmt 1 view .LVU385
 1211              		.loc 1 800 6 is_stmt 0 view .LVU386
 1212 0044 8B553C   		movl	60(%rbp), %edx
 1213 0047 85D2     		testl	%edx, %edx
 1214 0049 7519     		jne	.L96
 801:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 802:fltk-1.3.4-1/jpeg/jdhuff.c ****     Se = cinfo->Se;
 1215              		.loc 1 802 5 is_stmt 1 view .LVU387
 1216              	.LVL141:
 803:fltk-1.3.4-1/jpeg/jdhuff.c ****     Al = cinfo->Al;
 1217              		.loc 1 803 5 view .LVU388
 804:fltk-1.3.4-1/jpeg/jdhuff.c ****     natural_order = cinfo->natural_order;
 1218              		.loc 1 804 5 view .LVU389
 805:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 806:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Load up working state.
 807:fltk-1.3.4-1/jpeg/jdhuff.c ****      * We can avoid loading/saving bitread state if in an EOB run.
 808:fltk-1.3.4-1/jpeg/jdhuff.c ****      */
 809:fltk-1.3.4-1/jpeg/jdhuff.c ****     EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
 1219              		.loc 1 809 5 view .LVU390
 1220              		.loc 1 809 12 is_stmt 0 view .LVU391
 1221 004b 8B4528   		movl	40(%rbp), %eax
 1222 004e 8944241C 		movl	%eax, 28(%rsp)
 1223              	.LVL142:
 810:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 811:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* There is always only one block per MCU */
 812:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 813:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (EOBRUN)			/* if it's a band of zeroes... */
 1224              		.loc 1 813 5 is_stmt 1 view .LVU392
 1225              		.loc 1 813 8 is_stmt 0 view .LVU393
 1226 0052 85C0     		testl	%eax, %eax
 1227 0054 743A     		je	.L99
 814:fltk-1.3.4-1/jpeg/jdhuff.c ****       EOBRUN--;			/* ...process it now (we do nothing) */
 1228              		.loc 1 814 7 is_stmt 1 view .LVU394
 1229              		.loc 1 814 13 is_stmt 0 view .LVU395
 1230 0056 83E801   		subl	$1, %eax
 1231              	.LVL143:
 1232              		.loc 1 814 13 view .LVU396
 1233 0059 8944241C 		movl	%eax, 28(%rsp)
 1234              	.LVL144:
 1235              	.L100:
 815:fltk-1.3.4-1/jpeg/jdhuff.c ****     else {
 816:fltk-1.3.4-1/jpeg/jdhuff.c ****       BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 817:fltk-1.3.4-1/jpeg/jdhuff.c ****       block = MCU_data[0];
 818:fltk-1.3.4-1/jpeg/jdhuff.c ****       tbl = entropy->ac_derived_tbl;
 819:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 820:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (k = cinfo->Ss; k <= Se; k++) {
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 822:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 823:fltk-1.3.4-1/jpeg/jdhuff.c **** 	s &= 15;
 824:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (s) {
 825:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  k += r;
 826:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 827:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 828:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 829:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* Scale and output coefficient in natural (dezigzagged) order */
 830:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 831:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} else {
 832:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (r != 15) {	/* EOBr, run length is 2^r + appended bits */
 833:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (r) {		/* EOBr, r > 0 */
 834:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      EOBRUN = 1 << r;
 835:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 836:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      r = GET_BITS(r);
 837:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      EOBRUN += r;
 838:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      EOBRUN--;		/* this band is processed at this moment */
 839:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    }
 840:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    break;		/* force end-of-band */
 841:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  }
 842:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  k += 15;		/* ZRL: skip 15 zeroes in band */
 843:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 844:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 845:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 846:fltk-1.3.4-1/jpeg/jdhuff.c ****       BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 847:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 848:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 849:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Completed MCU, so update state */
 850:fltk-1.3.4-1/jpeg/jdhuff.c ****     entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
 1236              		.loc 1 850 5 is_stmt 1 view .LVU397
 1237              		.loc 1 850 27 is_stmt 0 view .LVU398
 1238 005d 8B44241C 		movl	28(%rsp), %eax
 1239 0061 894528   		movl	%eax, 40(%rbp)
 1240              	.LVL145:
 1241              	.L96:
 851:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 852:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 853:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Account for restart interval (no-op if not using restarts) */
 854:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->restarts_to_go--;
 1242              		.loc 1 854 3 is_stmt 1 view .LVU399
 1243              		.loc 1 854 26 is_stmt 0 view .LVU400
 1244 0064 836D4001 		subl	$1, 64(%rbp)
 855:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 856:fltk-1.3.4-1/jpeg/jdhuff.c ****   return TRUE;
 1245              		.loc 1 856 3 is_stmt 1 view .LVU401
 1246              		.loc 1 856 10 is_stmt 0 view .LVU402
 1247 0068 B8010000 		movl	$1, %eax
 1247      00
 1248              	.L93:
 857:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 1249              		.loc 1 857 1 view .LVU403
 1250 006d 488B5C24 		movq	72(%rsp), %rbx
 1250      48
 1251 0072 6448331C 		xorq	%fs:40, %rbx
 1251      25280000 
 1251      00
 1252              	.LVL146:
 1253              		.loc 1 857 1 view .LVU404
 1254 007b 0F855502 		jne	.L130
 1254      0000
 1255 0081 4883C458 		addq	$88, %rsp
 1256              		.cfi_remember_state
 1257              		.cfi_def_cfa_offset 56
 1258 0085 5B       		popq	%rbx
 1259              		.cfi_def_cfa_offset 48
 1260 0086 5D       		popq	%rbp
 1261              		.cfi_def_cfa_offset 40
 1262              	.LVL147:
 1263              		.loc 1 857 1 view .LVU405
 1264 0087 415C     		popq	%r12
 1265              		.cfi_def_cfa_offset 32
 1266 0089 415D     		popq	%r13
 1267              		.cfi_def_cfa_offset 24
 1268 008b 415E     		popq	%r14
 1269              		.cfi_def_cfa_offset 16
 1270 008d 415F     		popq	%r15
 1271              		.cfi_def_cfa_offset 8
 1272 008f C3       		ret
 1273              	.LVL148:
 1274              		.p2align 4,,10
 1275              		.p2align 3
 1276              	.L99:
 1277              		.cfi_restore_state
 803:fltk-1.3.4-1/jpeg/jdhuff.c ****     natural_order = cinfo->natural_order;
 1278              		.loc 1 803 8 view .LVU406
 1279 0090 8B832802 		movl	552(%rbx), %eax
 1279      0000
 1280              	.LVL149:
 817:fltk-1.3.4-1/jpeg/jdhuff.c ****       tbl = entropy->ac_derived_tbl;
 1281              		.loc 1 817 13 view .LVU407
 1282 0096 498B7D00 		movq	0(%r13), %rdi
 816:fltk-1.3.4-1/jpeg/jdhuff.c ****       block = MCU_data[0];
 1283              		.loc 1 816 7 view .LVU408
 1284 009a 48895C24 		movq	%rbx, 64(%rsp)
 1284      40
 802:fltk-1.3.4-1/jpeg/jdhuff.c ****     Al = cinfo->Al;
 1285              		.loc 1 802 8 view .LVU409
 1286 009f 448BA320 		movl	544(%rbx), %r12d
 1286      020000
 820:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 1287              		.loc 1 820 14 view .LVU410
 1288 00a6 448BBB1C 		movl	540(%rbx), %r15d
 1288      020000
 816:fltk-1.3.4-1/jpeg/jdhuff.c ****       block = MCU_data[0];
 1289              		.loc 1 816 7 view .LVU411
 1290 00ad 488B7518 		movq	24(%rbp), %rsi
 818:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1291              		.loc 1 818 11 view .LVU412
 1292 00b1 4C8B7568 		movq	104(%rbp), %r14
 803:fltk-1.3.4-1/jpeg/jdhuff.c ****     natural_order = cinfo->natural_order;
 1293              		.loc 1 803 8 view .LVU413
 1294 00b5 89442418 		movl	%eax, 24(%rsp)
 804:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1295              		.loc 1 804 19 view .LVU414
 1296 00b9 488B8330 		movq	560(%rbx), %rax
 1296      020000
 817:fltk-1.3.4-1/jpeg/jdhuff.c ****       tbl = entropy->ac_derived_tbl;
 1297              		.loc 1 817 13 view .LVU415
 1298 00c0 48897C24 		movq	%rdi, 16(%rsp)
 1298      10
 804:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1299              		.loc 1 804 19 view .LVU416
 1300 00c5 48894424 		movq	%rax, 8(%rsp)
 1300      08
 816:fltk-1.3.4-1/jpeg/jdhuff.c ****       block = MCU_data[0];
 1301              		.loc 1 816 7 is_stmt 1 view .LVU417
 816:fltk-1.3.4-1/jpeg/jdhuff.c ****       block = MCU_data[0];
 1302              		.loc 1 816 7 view .LVU418
 1303 00ca 488B4328 		movq	40(%rbx), %rax
 1304 00ce 488B08   		movq	(%rax), %rcx
 1305 00d1 488B5008 		movq	8(%rax), %rdx
 1306 00d5 48894C24 		movq	%rcx, 32(%rsp)
 1306      20
 816:fltk-1.3.4-1/jpeg/jdhuff.c ****       block = MCU_data[0];
 1307              		.loc 1 816 7 view .LVU419
 1308 00da 48895424 		movq	%rdx, 40(%rsp)
 1308      28
 816:fltk-1.3.4-1/jpeg/jdhuff.c ****       block = MCU_data[0];
 1309              		.loc 1 816 7 view .LVU420
 1310              	.LVL150:
 816:fltk-1.3.4-1/jpeg/jdhuff.c ****       block = MCU_data[0];
 1311              		.loc 1 816 7 view .LVU421
 1312 00df 8B5520   		movl	32(%rbp), %edx
 1313              	.LVL151:
 816:fltk-1.3.4-1/jpeg/jdhuff.c ****       block = MCU_data[0];
 1314              		.loc 1 816 50 view .LVU422
 817:fltk-1.3.4-1/jpeg/jdhuff.c ****       tbl = entropy->ac_derived_tbl;
 1315              		.loc 1 817 7 view .LVU423
 818:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1316              		.loc 1 818 7 view .LVU424
 820:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 1317              		.loc 1 820 7 view .LVU425
 820:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 1318              		.loc 1 820 27 view .LVU426
 820:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 1319              		.loc 1 820 7 is_stmt 0 view .LVU427
 1320 00e2 4539FC   		cmpl	%r15d, %r12d
 1321 00e5 0F8C9D01 		jl	.L101
 1321      0000
 827:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 1322              		.loc 1 827 8 view .LVU428
 1323 00eb 4C8D2D00 		leaq	bmask(%rip), %r13
 1323      000000
 1324              	.LVL152:
 827:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 1325              		.loc 1 827 8 view .LVU429
 1326 00f2 EB60     		jmp	.L113
 1327              	.LVL153:
 1328              		.p2align 4,,10
 1329 00f4 0F1F4000 		.p2align 3
 1330              	.L133:
 825:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 1331              		.loc 1 825 4 is_stmt 1 view .LVU430
 825:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 1332              		.loc 1 825 6 is_stmt 0 view .LVU431
 1333 00f8 4101CF   		addl	%ecx, %r15d
 1334              	.LVL154:
 826:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 1335              		.loc 1 826 4 is_stmt 1 view .LVU432
 1336 00fb 4439C2   		cmpl	%r8d, %edx
 1337 00fe 0F8C0401 		jl	.L131
 1337      0000
 1338              	.LVL155:
 1339              	.L107:
 826:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 1340              		.loc 1 826 47 discriminator 5 view .LVU433
 827:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 1341              		.loc 1 827 4 discriminator 5 view .LVU434
 827:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 1342              		.loc 1 827 8 is_stmt 0 discriminator 5 view .LVU435
 1343 0104 4429C2   		subl	%r8d, %edx
 1344              	.LVL156:
 827:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 1345              		.loc 1 827 8 discriminator 5 view .LVU436
 1346 0107 4963C0   		movslq	%r8d, %rax
 1347 010a 4889F7   		movq	%rsi, %rdi
 828:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* Scale and output coefficient in natural (dezigzagged) order */
 1348              		.loc 1 828 8 discriminator 5 view .LVU437
 1349 010d 4183E801 		subl	$1, %r8d
 827:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 1350              		.loc 1 827 8 discriminator 5 view .LVU438
 1351 0111 458B5C85 		movl	0(%r13,%rax,4), %r11d
 1351      00
 1352 0116 89D1     		movl	%edx, %ecx
 828:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* Scale and output coefficient in natural (dezigzagged) order */
 1353              		.loc 1 828 8 discriminator 5 view .LVU439
 1354 0118 4D63C0   		movslq	%r8d, %r8
 827:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 1355              		.loc 1 827 8 discriminator 5 view .LVU440
 1356 011b 48D3FF   		sarq	%cl, %rdi
 827:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 1357              		.loc 1 827 6 discriminator 5 view .LVU441
 1358 011e 4421DF   		andl	%r11d, %edi
 1359              	.LVL157:
 828:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* Scale and output coefficient in natural (dezigzagged) order */
 1360              		.loc 1 828 4 is_stmt 1 discriminator 5 view .LVU442
 828:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* Scale and output coefficient in natural (dezigzagged) order */
 1361              		.loc 1 828 8 is_stmt 0 discriminator 5 view .LVU443
 1362 0121 43397C85 		cmpl	%edi, 0(%r13,%r8,4)
 1362      00
 1363 0126 7C03     		jl	.L108
 828:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* Scale and output coefficient in natural (dezigzagged) order */
 1364              		.loc 1 828 8 discriminator 1 view .LVU444
 1365 0128 4429DF   		subl	%r11d, %edi
 1366              	.LVL158:
 1367              	.L108:
 830:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} else {
 1368              		.loc 1 830 4 is_stmt 1 discriminator 4 view .LVU445
 830:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} else {
 1369              		.loc 1 830 31 is_stmt 0 discriminator 4 view .LVU446
 1370 012b 488B4C24 		movq	8(%rsp), %rcx
 1370      08
 830:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} else {
 1371              		.loc 1 830 26 discriminator 4 view .LVU447
 1372 0130 4963C7   		movslq	%r15d, %rax
 830:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} else {
 1373              		.loc 1 830 31 discriminator 4 view .LVU448
 1374 0133 48630481 		movslq	(%rcx,%rax,4), %rax
 830:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} else {
 1375              		.loc 1 830 44 discriminator 4 view .LVU449
 1376 0137 0FB64C24 		movzbl	24(%rsp), %ecx
 1376      18
 1377 013c D3E7     		sall	%cl, %edi
 1378              	.LVL159:
 830:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} else {
 1379              		.loc 1 830 33 discriminator 4 view .LVU450
 1380 013e 488B4C24 		movq	16(%rsp), %rcx
 1380      10
 1381 0143 66893C41 		movw	%di, (%rcx,%rax,2)
 1382              	.LVL160:
 1383              	.L109:
 820:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 1384              		.loc 1 820 36 is_stmt 1 discriminator 2 view .LVU451
 820:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 1385              		.loc 1 820 37 is_stmt 0 discriminator 2 view .LVU452
 1386 0147 4183C701 		addl	$1, %r15d
 1387              	.LVL161:
 820:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 1388              		.loc 1 820 27 is_stmt 1 discriminator 2 view .LVU453
 820:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 1389              		.loc 1 820 7 is_stmt 0 discriminator 2 view .LVU454
 1390 014b 4539FC   		cmpl	%r15d, %r12d
 1391 014e 0F8C5401 		jl	.L128
 1391      0000
 1392              	.L113:
 1393              	.LBB15:
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1394              		.loc 1 821 2 is_stmt 1 view .LVU455
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1395              		.loc 1 821 2 view .LVU456
 1396 0154 83FA07   		cmpl	$7, %edx
 1397 0157 7E77     		jle	.L132
 1398              	.L102:
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1399              		.loc 1 821 2 discriminator 6 view .LVU457
 1400 0159 8D4AF8   		leal	-8(%rdx), %ecx
 1401 015c 4889F0   		movq	%rsi, %rax
 1402 015f 48D3F8   		sarq	%cl, %rax
 1403              	.LVL162:
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1404              		.loc 1 821 2 discriminator 6 view .LVU458
 1405 0162 0FB6C0   		movzbl	%al, %eax
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1406              		.loc 1 821 2 is_stmt 0 discriminator 6 view .LVU459
 1407 0165 418B8C86 		movl	288(%r14,%rax,4), %ecx
 1407      20010000 
 1408              	.LVL163:
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1409              		.loc 1 821 2 discriminator 6 view .LVU460
 1410 016d 85C9     		testl	%ecx, %ecx
 1411 016f 742F     		je	.L116
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1412              		.loc 1 821 2 is_stmt 1 discriminator 8 view .LVU461
 1413 0171 450FB684 		movzbl	1312(%r14,%rax), %r8d
 1413      06200500 
 1413      00
 1414 017a 29CA     		subl	%ecx, %edx
 1415              	.LVL164:
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1416              		.loc 1 821 2 discriminator 8 view .LVU462
 1417              	.L105:
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1418              		.loc 1 821 2 is_stmt 0 discriminator 8 view .LVU463
 1419              	.LBE15:
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1420              		.loc 1 821 53 is_stmt 1 discriminator 14 view .LVU464
 822:fltk-1.3.4-1/jpeg/jdhuff.c **** 	s &= 15;
 1421              		.loc 1 822 2 discriminator 14 view .LVU465
 822:fltk-1.3.4-1/jpeg/jdhuff.c **** 	s &= 15;
 1422              		.loc 1 822 4 is_stmt 0 discriminator 14 view .LVU466
 1423 017c 4489C1   		movl	%r8d, %ecx
 1424 017f C1F904   		sarl	$4, %ecx
 1425              	.LVL165:
 823:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (s) {
 1426              		.loc 1 823 2 is_stmt 1 discriminator 14 view .LVU467
 824:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  k += r;
 1427              		.loc 1 824 2 discriminator 14 view .LVU468
 824:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  k += r;
 1428              		.loc 1 824 5 is_stmt 0 discriminator 14 view .LVU469
 1429 0182 4183E00F 		andl	$15, %r8d
 1430              	.LVL166:
 824:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  k += r;
 1431              		.loc 1 824 5 discriminator 14 view .LVU470
 1432 0186 0F856CFF 		jne	.L133
 1432      FFFF
 832:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (r) {		/* EOBr, r > 0 */
 1433              		.loc 1 832 4 is_stmt 1 view .LVU471
 832:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (r) {		/* EOBr, r > 0 */
 1434              		.loc 1 832 7 is_stmt 0 view .LVU472
 1435 018c 83F90F   		cmpl	$15, %ecx
 1436 018f 0F85B300 		jne	.L134
 1436      0000
 842:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 1437              		.loc 1 842 4 is_stmt 1 view .LVU473
 842:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 1438              		.loc 1 842 6 is_stmt 0 view .LVU474
 1439 0195 4183C70F 		addl	$15, %r15d
 1440              	.LVL167:
 842:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 1441              		.loc 1 842 6 view .LVU475
 1442 0199 EBAC     		jmp	.L109
 1443              	.LVL168:
 1444 019b 0F1F4400 		.p2align 4,,10
 1444      00
 1445              		.p2align 3
 1446              	.L116:
 1447              	.LBB16:
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1448              		.loc 1 821 2 view .LVU476
 1449 01a0 41B80900 		movl	$9, %r8d
 1449      0000
 1450 01a6 488D7C24 		leaq	32(%rsp), %rdi
 1450      20
 1451              	.LVL169:
 1452              	.L104:
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1453              		.loc 1 821 2 is_stmt 1 discriminator 11 view .LVU477
 1454 01ab 4C89F1   		movq	%r14, %rcx
 1455 01ae E8000000 		call	jpeg_huff_decode
 1455      00
 1456              	.LVL170:
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1457              		.loc 1 821 2 is_stmt 0 discriminator 11 view .LVU478
 1458 01b3 4189C0   		movl	%eax, %r8d
 1459              	.LVL171:
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1460              		.loc 1 821 2 discriminator 11 view .LVU479
 1461 01b6 85C0     		testl	%eax, %eax
 1462 01b8 0F887F00 		js	.L103
 1462      0000
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1463              		.loc 1 821 2 is_stmt 1 discriminator 13 view .LVU480
 1464 01be 488B7424 		movq	48(%rsp), %rsi
 1464      30
 1465              	.LVL172:
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1466              		.loc 1 821 2 discriminator 13 view .LVU481
 1467 01c3 8B542438 		movl	56(%rsp), %edx
 1468              	.LVL173:
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1469              		.loc 1 821 2 is_stmt 0 discriminator 13 view .LVU482
 1470 01c7 EBB3     		jmp	.L105
 1471              	.LVL174:
 1472 01c9 0F1F8000 		.p2align 4,,10
 1472      000000
 1473              		.p2align 3
 1474              	.L132:
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1475              		.loc 1 821 2 is_stmt 1 discriminator 1 view .LVU483
 1476 01d0 488D7C24 		leaq	32(%rsp), %rdi
 1476      20
 1477 01d5 31C9     		xorl	%ecx, %ecx
 1478 01d7 48893C24 		movq	%rdi, (%rsp)
 1479 01db E8000000 		call	jpeg_fill_bit_buffer
 1479      00
 1480              	.LVL175:
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1481              		.loc 1 821 2 is_stmt 0 discriminator 1 view .LVU484
 1482 01e0 85C0     		testl	%eax, %eax
 1483 01e2 7459     		je	.L103
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1484              		.loc 1 821 2 is_stmt 1 discriminator 4 view .LVU485
 1485 01e4 8B542438 		movl	56(%rsp), %edx
 1486 01e8 488B7424 		movq	48(%rsp), %rsi
 1486      30
 1487              	.LVL176:
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1488              		.loc 1 821 2 discriminator 4 view .LVU486
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1489              		.loc 1 821 2 discriminator 4 view .LVU487
 1490 01ed 488B3C24 		movq	(%rsp), %rdi
 1491 01f1 83FA07   		cmpl	$7, %edx
 1492 01f4 0F8F5FFF 		jg	.L102
 1492      FFFF
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1493              		.loc 1 821 2 is_stmt 0 view .LVU488
 1494 01fa 41B80100 		movl	$1, %r8d
 1494      0000
 1495 0200 EBA9     		jmp	.L104
 1496              	.LVL177:
 1497              		.p2align 4,,10
 1498 0202 660F1F44 		.p2align 3
 1498      0000
 1499              	.L131:
 821:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 1500              		.loc 1 821 2 view .LVU489
 1501              	.LBE16:
 826:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 1502              		.loc 1 826 4 is_stmt 1 discriminator 1 view .LVU490
 1503 0208 488D7C24 		leaq	32(%rsp), %rdi
 1503      20
 1504 020d 4489C1   		movl	%r8d, %ecx
 1505              	.LVL178:
 826:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 1506              		.loc 1 826 4 is_stmt 0 discriminator 1 view .LVU491
 1507 0210 44890424 		movl	%r8d, (%rsp)
 1508 0214 E8000000 		call	jpeg_fill_bit_buffer
 1508      00
 1509              	.LVL179:
 826:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 1510              		.loc 1 826 4 discriminator 1 view .LVU492
 1511 0219 85C0     		testl	%eax, %eax
 1512 021b 7420     		je	.L103
 826:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 1513              		.loc 1 826 4 is_stmt 1 discriminator 4 view .LVU493
 1514 021d 488B7424 		movq	48(%rsp), %rsi
 1514      30
 1515              	.LVL180:
 826:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 1516              		.loc 1 826 4 discriminator 4 view .LVU494
 1517 0222 8B542438 		movl	56(%rsp), %edx
 1518 0226 448B0424 		movl	(%rsp), %r8d
 1519              	.LVL181:
 826:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 1520              		.loc 1 826 4 is_stmt 0 discriminator 4 view .LVU495
 1521 022a E9D5FEFF 		jmp	.L107
 1521      FF
 1522              	.LVL182:
 1523 022f 90       		.p2align 4,,10
 1524              		.p2align 3
 1525              	.L129:
 793:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 1526              		.loc 1 793 7 is_stmt 1 view .LVU496
 793:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 1527              		.loc 1 793 13 is_stmt 0 view .LVU497
 1528 0230 E8000000 		call	process_restart
 1528      00
 1529              	.LVL183:
 793:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 1530              		.loc 1 793 10 view .LVU498
 1531 0235 85C0     		testl	%eax, %eax
 1532 0237 0F8507FE 		jne	.L97
 1532      FFFF
 1533              	.LVL184:
 1534              	.L103:
 794:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 1535              		.loc 1 794 9 view .LVU499
 1536 023d 31C0     		xorl	%eax, %eax
 1537 023f E929FEFF 		jmp	.L93
 1537      FF
 1538              	.LVL185:
 1539              		.p2align 4,,10
 1540 0244 0F1F4000 		.p2align 3
 1541              	.L134:
 833:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      EOBRUN = 1 << r;
 1542              		.loc 1 833 6 is_stmt 1 view .LVU500
 833:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      EOBRUN = 1 << r;
 1543              		.loc 1 833 9 is_stmt 0 view .LVU501
 1544 0248 85C9     		testl	%ecx, %ecx
 1545 024a 745C     		je	.L128
 834:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 1546              		.loc 1 834 8 is_stmt 1 view .LVU502
 834:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 1547              		.loc 1 834 19 is_stmt 0 view .LVU503
 1548 024c B8010000 		movl	$1, %eax
 1548      00
 1549 0251 D3E0     		sall	%cl, %eax
 1550 0253 4189C4   		movl	%eax, %r12d
 1551              	.LVL186:
 835:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      r = GET_BITS(r);
 1552              		.loc 1 835 8 is_stmt 1 view .LVU504
 1553 0256 39CA     		cmpl	%ecx, %edx
 1554 0258 7C59     		jl	.L135
 1555              	.LVL187:
 1556              	.L112:
 835:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      r = GET_BITS(r);
 1557              		.loc 1 835 51 discriminator 5 view .LVU505
 836:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      EOBRUN += r;
 1558              		.loc 1 836 8 discriminator 5 view .LVU506
 836:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      EOBRUN += r;
 1559              		.loc 1 836 12 is_stmt 0 discriminator 5 view .LVU507
 1560 025a 29CA     		subl	%ecx, %edx
 1561              	.LVL188:
 836:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      EOBRUN += r;
 1562              		.loc 1 836 12 discriminator 5 view .LVU508
 1563 025c 4C63C9   		movslq	%ecx, %r9
 1564              	.LVL189:
 837:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      EOBRUN--;		/* this band is processed at this moment */
 1565              		.loc 1 837 8 is_stmt 1 discriminator 5 view .LVU509
 838:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    }
 1566              		.loc 1 838 8 discriminator 5 view .LVU510
 836:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      EOBRUN += r;
 1567              		.loc 1 836 12 is_stmt 0 discriminator 5 view .LVU511
 1568 025f 4889F0   		movq	%rsi, %rax
 1569 0262 89D1     		movl	%edx, %ecx
 1570 0264 48D3F8   		sarq	%cl, %rax
 836:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      EOBRUN += r;
 1571              		.loc 1 836 10 discriminator 5 view .LVU512
 1572 0267 488D0D00 		leaq	bmask(%rip), %rcx
 1572      000000
 1573 026e 42230489 		andl	(%rcx,%r9,4), %eax
 1574 0272 488B4C24 		movq	32(%rsp), %rcx
 1574      20
 838:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    }
 1575              		.loc 1 838 14 discriminator 5 view .LVU513
 1576 0277 418D4404 		leal	-1(%r12,%rax), %eax
 1576      FF
 1577 027c 8944241C 		movl	%eax, 28(%rsp)
 1578              	.LVL190:
 838:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    }
 1579              		.loc 1 838 14 discriminator 5 view .LVU514
 1580 0280 488B4328 		movq	40(%rbx), %rax
 1581              	.LVL191:
 1582              		.p2align 4,,10
 1583 0284 0F1F4000 		.p2align 3
 1584              	.L101:
 846:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 1585              		.loc 1 846 7 is_stmt 1 view .LVU515
 1586 0288 488908   		movq	%rcx, (%rax)
 846:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 1587              		.loc 1 846 7 view .LVU516
 1588 028b 488B4328 		movq	40(%rbx), %rax
 1589 028f 488B4C24 		movq	40(%rsp), %rcx
 1589      28
 1590 0294 48894808 		movq	%rcx, 8(%rax)
 846:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 1591              		.loc 1 846 7 view .LVU517
 1592 0298 48897518 		movq	%rsi, 24(%rbp)
 846:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 1593              		.loc 1 846 7 view .LVU518
 1594 029c 895520   		movl	%edx, 32(%rbp)
 1595 029f E9B9FDFF 		jmp	.L100
 1595      FF
 1596              		.p2align 4,,10
 1597 02a4 0F1F4000 		.p2align 3
 1598              	.L128:
 846:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 1599              		.loc 1 846 7 is_stmt 0 view .LVU519
 1600 02a8 488B4328 		movq	40(%rbx), %rax
 1601 02ac 488B4C24 		movq	32(%rsp), %rcx
 1601      20
 1602 02b1 EBD5     		jmp	.L101
 1603              	.LVL192:
 1604              	.L135:
 835:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      r = GET_BITS(r);
 1605              		.loc 1 835 8 is_stmt 1 discriminator 1 view .LVU520
 1606 02b3 488D7C24 		leaq	32(%rsp), %rdi
 1606      20
 1607 02b8 890C24   		movl	%ecx, (%rsp)
 1608 02bb E8000000 		call	jpeg_fill_bit_buffer
 1608      00
 1609              	.LVL193:
 835:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      r = GET_BITS(r);
 1610              		.loc 1 835 8 is_stmt 0 discriminator 1 view .LVU521
 1611 02c0 85C0     		testl	%eax, %eax
 1612 02c2 0F8475FF 		je	.L103
 1612      FFFF
 835:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      r = GET_BITS(r);
 1613              		.loc 1 835 8 is_stmt 1 discriminator 4 view .LVU522
 1614 02c8 488B7424 		movq	48(%rsp), %rsi
 1614      30
 1615              	.LVL194:
 835:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      r = GET_BITS(r);
 1616              		.loc 1 835 8 discriminator 4 view .LVU523
 1617 02cd 8B542438 		movl	56(%rsp), %edx
 1618 02d1 8B0C24   		movl	(%rsp), %ecx
 1619              	.LVL195:
 835:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      r = GET_BITS(r);
 1620              		.loc 1 835 8 is_stmt 0 discriminator 4 view .LVU524
 1621 02d4 EB84     		jmp	.L112
 1622              	.LVL196:
 1623              	.L130:
 1624              		.loc 1 857 1 view .LVU525
 1625 02d6 E8000000 		call	__stack_chk_fail@PLT
 1625      00
 1626              	.LVL197:
 1627              		.cfi_endproc
 1628              	.LFE57:
 1630              		.section	.text.decode_mcu_DC_refine,"ax",@progbits
 1631              		.p2align 4
 1633              	decode_mcu_DC_refine:
 1634              	.LVL198:
 1635              	.LFB58:
 858:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 859:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 860:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 861:fltk-1.3.4-1/jpeg/jdhuff.c ****  * MCU decoding for DC successive approximation refinement scan.
 862:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Note: we assume such scans can be multi-component,
 863:fltk-1.3.4-1/jpeg/jdhuff.c ****  * although the spec is not very clear on the point.
 864:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 865:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 866:fltk-1.3.4-1/jpeg/jdhuff.c **** METHODDEF(boolean)
 867:fltk-1.3.4-1/jpeg/jdhuff.c **** decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
 868:fltk-1.3.4-1/jpeg/jdhuff.c **** {   
 1636              		.loc 1 868 1 is_stmt 1 view -0
 1637              		.cfi_startproc
 1638              		.loc 1 868 1 is_stmt 0 view .LVU527
 1639 0000 F30F1EFA 		endbr64
 1640 0004 4157     		pushq	%r15
 1641              		.cfi_def_cfa_offset 16
 1642              		.cfi_offset 15, -16
 1643 0006 4156     		pushq	%r14
 1644              		.cfi_def_cfa_offset 24
 1645              		.cfi_offset 14, -24
 1646 0008 4989F6   		movq	%rsi, %r14
 1647 000b 4155     		pushq	%r13
 1648              		.cfi_def_cfa_offset 32
 1649              		.cfi_offset 13, -32
 1650 000d 4154     		pushq	%r12
 1651              		.cfi_def_cfa_offset 40
 1652              		.cfi_offset 12, -40
 1653 000f 55       		pushq	%rbp
 1654              		.cfi_def_cfa_offset 48
 1655              		.cfi_offset 6, -48
 1656 0010 4889FD   		movq	%rdi, %rbp
 1657 0013 53       		pushq	%rbx
 1658              		.cfi_def_cfa_offset 56
 1659              		.cfi_offset 3, -56
 1660 0014 4883EC38 		subq	$56, %rsp
 1661              		.cfi_def_cfa_offset 112
 869:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 870:fltk-1.3.4-1/jpeg/jdhuff.c ****   int p1, blkn;
 871:fltk-1.3.4-1/jpeg/jdhuff.c ****   BITREAD_STATE_VARS;
 872:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 873:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Process restart marker if needed; may have to suspend */
 874:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (cinfo->restart_interval) {
 1662              		.loc 1 874 6 view .LVU528
 1663 0018 8BB77401 		movl	372(%rdi), %esi
 1663      0000
 1664              	.LVL199:
 869:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 1665              		.loc 1 869 20 view .LVU529
 1666 001e 4C8BA770 		movq	624(%rdi), %r12
 1666      020000
 868:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 1667              		.loc 1 868 1 view .LVU530
 1668 0025 64488B04 		movq	%fs:40, %rax
 1668      25280000 
 1668      00
 1669 002e 48894424 		movq	%rax, 40(%rsp)
 1669      28
 1670 0033 31C0     		xorl	%eax, %eax
 869:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 1671              		.loc 1 869 3 is_stmt 1 view .LVU531
 1672              	.LVL200:
 870:fltk-1.3.4-1/jpeg/jdhuff.c ****   BITREAD_STATE_VARS;
 1673              		.loc 1 870 3 view .LVU532
 871:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1674              		.loc 1 871 3 view .LVU533
 871:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1675              		.loc 1 871 3 view .LVU534
 871:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1676              		.loc 1 871 3 view .LVU535
 1677              		.loc 1 874 3 view .LVU536
 1678              		.loc 1 874 6 is_stmt 0 view .LVU537
 1679 0035 85F6     		testl	%esi, %esi
 1680 0037 740D     		je	.L140
 875:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (entropy->restarts_to_go == 0)
 1681              		.loc 1 875 5 is_stmt 1 view .LVU538
 1682              		.loc 1 875 8 is_stmt 0 view .LVU539
 1683 0039 418B4424 		movl	64(%r12), %eax
 1683      40
 1684 003e 85C0     		testl	%eax, %eax
 1685 0040 0F84DA00 		je	.L156
 1685      0000
 1686              	.LVL201:
 1687              	.L140:
 876:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (! process_restart(cinfo))
 877:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 878:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 879:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 880:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Not worth the cycles to check insufficient_data here,
 881:fltk-1.3.4-1/jpeg/jdhuff.c ****    * since we will not change the data anyway if we read zeroes.
 882:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
 883:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 884:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Load up working state */
 885:fltk-1.3.4-1/jpeg/jdhuff.c ****   BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 1688              		.loc 1 885 3 is_stmt 1 view .LVU540
 1689 0046 488B4528 		movq	40(%rbp), %rax
 886:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 887:fltk-1.3.4-1/jpeg/jdhuff.c ****   p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 1690              		.loc 1 887 6 is_stmt 0 view .LVU541
 1691 004a 8B8D2802 		movl	552(%rbp), %ecx
 1691      0000
 888:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 889:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Outer loop handles each block in the MCU */
 890:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 891:fltk-1.3.4-1/jpeg/jdhuff.c ****   for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 1692              		.loc 1 891 3 view .LVU542
 1693 0050 31DB     		xorl	%ebx, %ebx
 892:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Encoded data is simply the next bit of the two's-complement DC value */
 893:fltk-1.3.4-1/jpeg/jdhuff.c ****     CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 1694              		.loc 1 893 5 view .LVU543
 1695 0052 4989E5   		movq	%rsp, %r13
 887:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1696              		.loc 1 887 6 view .LVU544
 1697 0055 41BF0100 		movl	$1, %r15d
 1697      0000
 885:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1698              		.loc 1 885 3 view .LVU545
 1699 005b 48896C24 		movq	%rbp, 32(%rsp)
 1699      20
 885:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1700              		.loc 1 885 3 is_stmt 1 view .LVU546
 1701 0060 498B7424 		movq	24(%r12), %rsi
 1701      18
 1702 0065 488B38   		movq	(%rax), %rdi
 1703 0068 488B5008 		movq	8(%rax), %rdx
 887:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1704              		.loc 1 887 6 is_stmt 0 view .LVU547
 1705 006c 41D3E7   		sall	%cl, %r15d
 891:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Encoded data is simply the next bit of the two's-complement DC value */
 1706              		.loc 1 891 3 view .LVU548
 1707 006f 8B8DF001 		movl	496(%rbp), %ecx
 1707      0000
 885:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1708              		.loc 1 885 3 view .LVU549
 1709 0075 48895424 		movq	%rdx, 8(%rsp)
 1709      08
 1710 007a 418B5424 		movl	32(%r12), %edx
 1710      20
 1711 007f 48893C24 		movq	%rdi, (%rsp)
 885:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1712              		.loc 1 885 3 is_stmt 1 view .LVU550
 885:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1713              		.loc 1 885 3 view .LVU551
 1714              	.LVL202:
 885:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1715              		.loc 1 885 3 view .LVU552
 885:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1716              		.loc 1 885 46 view .LVU553
 887:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1717              		.loc 1 887 3 view .LVU554
 891:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Encoded data is simply the next bit of the two's-complement DC value */
 1718              		.loc 1 891 3 view .LVU555
 891:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Encoded data is simply the next bit of the two's-complement DC value */
 1719              		.loc 1 891 18 view .LVU556
 891:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Encoded data is simply the next bit of the two's-complement DC value */
 1720              		.loc 1 891 3 is_stmt 0 view .LVU557
 1721 0083 85C9     		testl	%ecx, %ecx
 1722 0085 7F26     		jg	.L138
 891:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Encoded data is simply the next bit of the two's-complement DC value */
 1723              		.loc 1 891 3 view .LVU558
 1724 0087 EB4F     		jmp	.L139
 1725              	.LVL203:
 1726 0089 0F1F8000 		.p2align 4,,10
 1726      000000
 1727              		.p2align 3
 1728              	.L142:
 1729              		.loc 1 893 48 is_stmt 1 discriminator 5 view .LVU559
 894:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (GET_BITS(1))
 1730              		.loc 1 894 5 discriminator 5 view .LVU560
 1731              		.loc 1 894 9 is_stmt 0 discriminator 5 view .LVU561
 1732 0090 83EA01   		subl	$1, %edx
 1733              	.LVL204:
 1734              		.loc 1 894 8 discriminator 5 view .LVU562
 1735 0093 480FA3D6 		btq	%rdx, %rsi
 1736 0097 7308     		jnc	.L144
 895:fltk-1.3.4-1/jpeg/jdhuff.c ****       MCU_data[blkn][0][0] |= p1;
 1737              		.loc 1 895 7 is_stmt 1 view .LVU563
 1738              		.loc 1 895 15 is_stmt 0 view .LVU564
 1739 0099 498B04DE 		movq	(%r14,%rbx,8), %rax
 1740              		.loc 1 895 28 view .LVU565
 1741 009d 66440938 		orw	%r15w, (%rax)
 1742              	.L144:
 891:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Encoded data is simply the next bit of the two's-complement DC value */
 1743              		.loc 1 891 47 is_stmt 1 discriminator 2 view .LVU566
 1744              	.LVL205:
 891:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Encoded data is simply the next bit of the two's-complement DC value */
 1745              		.loc 1 891 18 discriminator 2 view .LVU567
 1746 00a1 4883C301 		addq	$1, %rbx
 1747              	.LVL206:
 891:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Encoded data is simply the next bit of the two's-complement DC value */
 1748              		.loc 1 891 3 is_stmt 0 discriminator 2 view .LVU568
 1749 00a5 399DF001 		cmpl	%ebx, 496(%rbp)
 1749      0000
 1750 00ab 7E23     		jle	.L157
 1751              	.L138:
 1752              	.LVL207:
 893:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (GET_BITS(1))
 1753              		.loc 1 893 5 is_stmt 1 view .LVU569
 1754 00ad 85D2     		testl	%edx, %edx
 1755 00af 7FDF     		jg	.L142
 893:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (GET_BITS(1))
 1756              		.loc 1 893 5 discriminator 1 view .LVU570
 1757 00b1 B9010000 		movl	$1, %ecx
 1757      00
 1758 00b6 4C89EF   		movq	%r13, %rdi
 1759 00b9 E8000000 		call	jpeg_fill_bit_buffer
 1759      00
 1760              	.LVL208:
 893:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (GET_BITS(1))
 1761              		.loc 1 893 5 is_stmt 0 discriminator 1 view .LVU571
 1762 00be 85C0     		testl	%eax, %eax
 1763 00c0 746B     		je	.L143
 893:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (GET_BITS(1))
 1764              		.loc 1 893 5 is_stmt 1 discriminator 4 view .LVU572
 1765 00c2 488B7424 		movq	16(%rsp), %rsi
 1765      10
 1766              	.LVL209:
 893:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (GET_BITS(1))
 1767              		.loc 1 893 5 discriminator 4 view .LVU573
 1768 00c7 8B542418 		movl	24(%rsp), %edx
 1769              	.LVL210:
 893:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (GET_BITS(1))
 1770              		.loc 1 893 5 is_stmt 0 discriminator 4 view .LVU574
 1771 00cb EBC3     		jmp	.L142
 1772              	.LVL211:
 1773 00cd 0F1F00   		.p2align 4,,10
 1774              		.p2align 3
 1775              	.L157:
 893:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (GET_BITS(1))
 1776              		.loc 1 893 5 discriminator 4 view .LVU575
 1777 00d0 488B4528 		movq	40(%rbp), %rax
 1778 00d4 488B3C24 		movq	(%rsp), %rdi
 1779              	.L139:
 896:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Note: since we use |=, repeating the assignment later is safe */
 897:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 898:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 899:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Completed MCU, so update state */
 900:fltk-1.3.4-1/jpeg/jdhuff.c ****   BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 1780              		.loc 1 900 3 is_stmt 1 view .LVU576
 1781 00d8 488938   		movq	%rdi, (%rax)
 1782              		.loc 1 900 3 view .LVU577
 1783 00db 488B4528 		movq	40(%rbp), %rax
 1784 00df 488B4C24 		movq	8(%rsp), %rcx
 1784      08
 1785 00e4 48894808 		movq	%rcx, 8(%rax)
 1786              		.loc 1 900 3 view .LVU578
 901:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 902:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Account for restart interval (no-op if not using restarts) */
 903:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->restarts_to_go--;
 904:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 905:fltk-1.3.4-1/jpeg/jdhuff.c ****   return TRUE;
 1787              		.loc 1 905 10 is_stmt 0 view .LVU579
 1788 00e8 B8010000 		movl	$1, %eax
 1788      00
 903:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1789              		.loc 1 903 26 view .LVU580
 1790 00ed 41836C24 		subl	$1, 64(%r12)
 1790      4001
 900:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1791              		.loc 1 900 3 view .LVU581
 1792 00f3 49897424 		movq	%rsi, 24(%r12)
 1792      18
 900:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1793              		.loc 1 900 3 is_stmt 1 view .LVU582
 1794 00f8 41895424 		movl	%edx, 32(%r12)
 1794      20
 903:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1795              		.loc 1 903 3 view .LVU583
 1796              		.loc 1 905 3 view .LVU584
 1797              	.LVL212:
 1798              	.L136:
 906:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 1799              		.loc 1 906 1 is_stmt 0 view .LVU585
 1800 00fd 488B4C24 		movq	40(%rsp), %rcx
 1800      28
 1801 0102 6448330C 		xorq	%fs:40, %rcx
 1801      25280000 
 1801      00
 1802 010b 7524     		jne	.L158
 1803 010d 4883C438 		addq	$56, %rsp
 1804              		.cfi_remember_state
 1805              		.cfi_def_cfa_offset 56
 1806 0111 5B       		popq	%rbx
 1807              		.cfi_def_cfa_offset 48
 1808 0112 5D       		popq	%rbp
 1809              		.cfi_def_cfa_offset 40
 1810              	.LVL213:
 1811              		.loc 1 906 1 view .LVU586
 1812 0113 415C     		popq	%r12
 1813              		.cfi_def_cfa_offset 32
 1814              	.LVL214:
 1815              		.loc 1 906 1 view .LVU587
 1816 0115 415D     		popq	%r13
 1817              		.cfi_def_cfa_offset 24
 1818 0117 415E     		popq	%r14
 1819              		.cfi_def_cfa_offset 16
 1820              	.LVL215:
 1821              		.loc 1 906 1 view .LVU588
 1822 0119 415F     		popq	%r15
 1823              		.cfi_def_cfa_offset 8
 1824 011b C3       		ret
 1825              	.LVL216:
 1826 011c 0F1F4000 		.p2align 4,,10
 1827              		.p2align 3
 1828              	.L156:
 1829              		.cfi_restore_state
 876:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 1830              		.loc 1 876 7 is_stmt 1 view .LVU589
 876:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 1831              		.loc 1 876 13 is_stmt 0 view .LVU590
 1832 0120 E8000000 		call	process_restart
 1832      00
 1833              	.LVL217:
 876:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 1834              		.loc 1 876 10 view .LVU591
 1835 0125 85C0     		testl	%eax, %eax
 1836 0127 0F8519FF 		jne	.L140
 1836      FFFF
 1837              	.L143:
 877:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 1838              		.loc 1 877 9 view .LVU592
 1839 012d 31C0     		xorl	%eax, %eax
 1840 012f EBCC     		jmp	.L136
 1841              	.L158:
 1842              		.loc 1 906 1 view .LVU593
 1843 0131 E8000000 		call	__stack_chk_fail@PLT
 1843      00
 1844              	.LVL218:
 1845              		.cfi_endproc
 1846              	.LFE58:
 1848              		.section	.text.decode_mcu_AC_refine,"ax",@progbits
 1849              		.p2align 4
 1851              	decode_mcu_AC_refine:
 1852              	.LVL219:
 1853              	.LFB59:
 907:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 908:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 909:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
 910:fltk-1.3.4-1/jpeg/jdhuff.c ****  * MCU decoding for AC successive approximation refinement scan.
 911:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
 912:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 913:fltk-1.3.4-1/jpeg/jdhuff.c **** METHODDEF(boolean)
 914:fltk-1.3.4-1/jpeg/jdhuff.c **** decode_mcu_AC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
 915:fltk-1.3.4-1/jpeg/jdhuff.c **** {   
 1854              		.loc 1 915 1 is_stmt 1 view -0
 1855              		.cfi_startproc
 1856              		.loc 1 915 1 is_stmt 0 view .LVU595
 1857 0000 F30F1EFA 		endbr64
 1858 0004 4157     		pushq	%r15
 1859              		.cfi_def_cfa_offset 16
 1860              		.cfi_offset 15, -16
 1861 0006 4889F8   		movq	%rdi, %rax
 1862 0009 4156     		pushq	%r14
 1863              		.cfi_def_cfa_offset 24
 1864              		.cfi_offset 14, -24
 1865 000b 4155     		pushq	%r13
 1866              		.cfi_def_cfa_offset 32
 1867              		.cfi_offset 13, -32
 1868 000d 4154     		pushq	%r12
 1869              		.cfi_def_cfa_offset 40
 1870              		.cfi_offset 12, -40
 1871 000f 55       		pushq	%rbp
 1872              		.cfi_def_cfa_offset 48
 1873              		.cfi_offset 6, -48
 1874 0010 53       		pushq	%rbx
 1875              		.cfi_def_cfa_offset 56
 1876              		.cfi_offset 3, -56
 1877 0011 4881EC98 		subq	$408, %rsp
 1877      010000
 1878              		.cfi_def_cfa_offset 464
 916:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 917:fltk-1.3.4-1/jpeg/jdhuff.c ****   register int s, k, r;
 918:fltk-1.3.4-1/jpeg/jdhuff.c ****   unsigned int EOBRUN;
 919:fltk-1.3.4-1/jpeg/jdhuff.c ****   int Se, p1, m1;
 920:fltk-1.3.4-1/jpeg/jdhuff.c ****   const int * natural_order;
 921:fltk-1.3.4-1/jpeg/jdhuff.c ****   JBLOCKROW block;
 922:fltk-1.3.4-1/jpeg/jdhuff.c ****   JCOEFPTR thiscoef;
 923:fltk-1.3.4-1/jpeg/jdhuff.c ****   BITREAD_STATE_VARS;
 924:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl * tbl;
 925:fltk-1.3.4-1/jpeg/jdhuff.c ****   int num_newnz;
 926:fltk-1.3.4-1/jpeg/jdhuff.c ****   int newnz_pos[DCTSIZE2];
 927:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 928:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Process restart marker if needed; may have to suspend */
 929:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (cinfo->restart_interval) {
 1879              		.loc 1 929 6 view .LVU596
 1880 0018 448B9874 		movl	372(%rax), %r11d
 1880      010000
 915:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 1881              		.loc 1 915 1 view .LVU597
 1882 001f 48897C24 		movq	%rdi, 64(%rsp)
 1882      40
 1883 0024 64488B3C 		movq	%fs:40, %rdi
 1883      25280000 
 1883      00
 1884 002d 4889BC24 		movq	%rdi, 392(%rsp)
 1884      88010000 
 1885 0035 31FF     		xorl	%edi, %edi
 1886              	.LVL220:
 916:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 1887              		.loc 1 916 3 is_stmt 1 view .LVU598
 916:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 1888              		.loc 1 916 20 is_stmt 0 view .LVU599
 1889 0037 488BB870 		movq	624(%rax), %rdi
 1889      020000
 1890 003e 48897C24 		movq	%rdi, 40(%rsp)
 1890      28
 1891              	.LVL221:
 917:fltk-1.3.4-1/jpeg/jdhuff.c ****   unsigned int EOBRUN;
 1892              		.loc 1 917 3 is_stmt 1 view .LVU600
 918:fltk-1.3.4-1/jpeg/jdhuff.c ****   int Se, p1, m1;
 1893              		.loc 1 918 3 view .LVU601
 919:fltk-1.3.4-1/jpeg/jdhuff.c ****   const int * natural_order;
 1894              		.loc 1 919 3 view .LVU602
 920:fltk-1.3.4-1/jpeg/jdhuff.c ****   JBLOCKROW block;
 1895              		.loc 1 920 3 view .LVU603
 921:fltk-1.3.4-1/jpeg/jdhuff.c ****   JCOEFPTR thiscoef;
 1896              		.loc 1 921 3 view .LVU604
 922:fltk-1.3.4-1/jpeg/jdhuff.c ****   BITREAD_STATE_VARS;
 1897              		.loc 1 922 3 view .LVU605
 923:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl * tbl;
 1898              		.loc 1 923 3 view .LVU606
 923:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl * tbl;
 1899              		.loc 1 923 3 view .LVU607
 923:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl * tbl;
 1900              		.loc 1 923 3 view .LVU608
 924:fltk-1.3.4-1/jpeg/jdhuff.c ****   int num_newnz;
 1901              		.loc 1 924 3 view .LVU609
 925:fltk-1.3.4-1/jpeg/jdhuff.c ****   int newnz_pos[DCTSIZE2];
 1902              		.loc 1 925 3 view .LVU610
 926:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1903              		.loc 1 926 3 view .LVU611
 1904              		.loc 1 929 3 view .LVU612
 1905              		.loc 1 929 6 is_stmt 0 view .LVU613
 1906 0043 4585DB   		testl	%r11d, %r11d
 1907 0046 7412     		je	.L163
 930:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (entropy->restarts_to_go == 0)
 1908              		.loc 1 930 5 is_stmt 1 view .LVU614
 1909              		.loc 1 930 8 is_stmt 0 view .LVU615
 1910 0048 488B4424 		movq	40(%rsp), %rax
 1910      28
 1911              	.LVL222:
 1912              		.loc 1 930 8 view .LVU616
 1913 004d 448B4840 		movl	64(%rax), %r9d
 1914 0051 4585C9   		testl	%r9d, %r9d
 1915 0054 0F84A104 		je	.L247
 1915      0000
 1916              	.L163:
 931:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (! process_restart(cinfo))
 932:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 933:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 934:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 935:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* If we've run out of data, don't modify the MCU.
 936:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
 937:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (! entropy->insufficient_data) {
 1917              		.loc 1 937 3 is_stmt 1 view .LVU617
 1918              		.loc 1 937 6 is_stmt 0 view .LVU618
 1919 005a 488B4424 		movq	40(%rsp), %rax
 1919      28
 1920 005f 448B503C 		movl	60(%rax), %r10d
 1921 0063 4585D2   		testl	%r10d, %r10d
 1922 0066 0F853402 		jne	.L162
 1922      0000
 1923              	.LVL223:
 1924              	.L161:
 938:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 939:fltk-1.3.4-1/jpeg/jdhuff.c ****     Se = cinfo->Se;
 1925              		.loc 1 939 5 is_stmt 1 view .LVU619
 1926              		.loc 1 939 8 is_stmt 0 view .LVU620
 1927 006c 488B7C24 		movq	64(%rsp), %rdi
 1927      40
 940:fltk-1.3.4-1/jpeg/jdhuff.c ****     p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 1928              		.loc 1 940 8 view .LVU621
 1929 0071 B8010000 		movl	$1, %eax
 1929      00
 941:fltk-1.3.4-1/jpeg/jdhuff.c ****     m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 942:fltk-1.3.4-1/jpeg/jdhuff.c ****     natural_order = cinfo->natural_order;
 943:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 944:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Load up working state */
 945:fltk-1.3.4-1/jpeg/jdhuff.c ****     BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 946:fltk-1.3.4-1/jpeg/jdhuff.c ****     EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 947:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 948:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* There is always only one block per MCU */
 949:fltk-1.3.4-1/jpeg/jdhuff.c ****     block = MCU_data[0];
 1930              		.loc 1 949 11 view .LVU622
 1931 0076 4C8B3E   		movq	(%rsi), %r15
 940:fltk-1.3.4-1/jpeg/jdhuff.c ****     p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 1932              		.loc 1 940 20 view .LVU623
 1933 0079 8B8F2802 		movl	552(%rdi), %ecx
 1933      0000
 945:fltk-1.3.4-1/jpeg/jdhuff.c ****     EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 1934              		.loc 1 945 5 view .LVU624
 1935 007f 48897C24 		movq	%rdi, 112(%rsp)
 1935      70
 939:fltk-1.3.4-1/jpeg/jdhuff.c ****     p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 1936              		.loc 1 939 8 view .LVU625
 1937 0084 448BB720 		movl	544(%rdi), %r14d
 1937      020000
 1938              	.LVL224:
 940:fltk-1.3.4-1/jpeg/jdhuff.c ****     m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 1939              		.loc 1 940 5 is_stmt 1 view .LVU626
 942:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1940              		.loc 1 942 19 is_stmt 0 view .LVU627
 1941 008b 4C8B9730 		movq	560(%rdi), %r10
 1941      020000
 940:fltk-1.3.4-1/jpeg/jdhuff.c ****     m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 1942              		.loc 1 940 8 view .LVU628
 1943 0092 D3E0     		sall	%cl, %eax
 950:fltk-1.3.4-1/jpeg/jdhuff.c ****     tbl = entropy->ac_derived_tbl;
 951:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 952:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* If we are forced to suspend, we must undo the assignments to any newly
 953:fltk-1.3.4-1/jpeg/jdhuff.c ****      * nonzero coefficients in the block, because otherwise we'd get confused
 954:fltk-1.3.4-1/jpeg/jdhuff.c ****      * next time about which coefficients were already nonzero.
 955:fltk-1.3.4-1/jpeg/jdhuff.c ****      * But we need not undo addition of bits to already-nonzero coefficients;
 956:fltk-1.3.4-1/jpeg/jdhuff.c ****      * instead, we can test the current bit to see if we already did it.
 957:fltk-1.3.4-1/jpeg/jdhuff.c ****      */
 958:fltk-1.3.4-1/jpeg/jdhuff.c ****     num_newnz = 0;
 959:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 960:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* initialize coefficient loop counter to start of band */
 961:fltk-1.3.4-1/jpeg/jdhuff.c ****     k = cinfo->Ss;
 1944              		.loc 1 961 7 view .LVU629
 1945 0094 8B9F1C02 		movl	540(%rdi), %ebx
 1945      0000
 940:fltk-1.3.4-1/jpeg/jdhuff.c ****     m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 1946              		.loc 1 940 8 view .LVU630
 1947 009a 89442408 		movl	%eax, 8(%rsp)
 1948              	.LVL225:
 941:fltk-1.3.4-1/jpeg/jdhuff.c ****     natural_order = cinfo->natural_order;
 1949              		.loc 1 941 5 is_stmt 1 view .LVU631
 941:fltk-1.3.4-1/jpeg/jdhuff.c ****     natural_order = cinfo->natural_order;
 1950              		.loc 1 941 8 is_stmt 0 view .LVU632
 1951 009e B8FFFFFF 		movl	$-1, %eax
 1951      FF
 1952              	.LVL226:
 941:fltk-1.3.4-1/jpeg/jdhuff.c ****     natural_order = cinfo->natural_order;
 1953              		.loc 1 941 8 view .LVU633
 1954 00a3 D3E0     		sall	%cl, %eax
 1955 00a5 89442420 		movl	%eax, 32(%rsp)
 1956              	.LVL227:
 942:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1957              		.loc 1 942 5 is_stmt 1 view .LVU634
 945:fltk-1.3.4-1/jpeg/jdhuff.c ****     EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 1958              		.loc 1 945 5 view .LVU635
 945:fltk-1.3.4-1/jpeg/jdhuff.c ****     EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 1959              		.loc 1 945 5 view .LVU636
 1960 00a9 488B4728 		movq	40(%rdi), %rax
 1961              	.LVL228:
 945:fltk-1.3.4-1/jpeg/jdhuff.c ****     EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 1962              		.loc 1 945 5 is_stmt 0 view .LVU637
 1963 00ad 488B10   		movq	(%rax), %rdx
 1964 00b0 488B4008 		movq	8(%rax), %rax
 1965 00b4 48894424 		movq	%rax, 88(%rsp)
 1965      58
 1966 00b9 488B4424 		movq	40(%rsp), %rax
 1966      28
 1967 00be 48895424 		movq	%rdx, 80(%rsp)
 1967      50
 945:fltk-1.3.4-1/jpeg/jdhuff.c ****     EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 1968              		.loc 1 945 5 is_stmt 1 view .LVU638
 945:fltk-1.3.4-1/jpeg/jdhuff.c ****     EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 1969              		.loc 1 945 5 view .LVU639
 946:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1970              		.loc 1 946 12 is_stmt 0 view .LVU640
 1971 00c3 8B4828   		movl	40(%rax), %ecx
 945:fltk-1.3.4-1/jpeg/jdhuff.c ****     EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 1972              		.loc 1 945 5 view .LVU641
 1973 00c6 4C8B5818 		movq	24(%rax), %r11
 1974              	.LVL229:
 945:fltk-1.3.4-1/jpeg/jdhuff.c ****     EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 1975              		.loc 1 945 5 is_stmt 1 view .LVU642
 1976 00ca 8B5020   		movl	32(%rax), %edx
 1977              	.LVL230:
 945:fltk-1.3.4-1/jpeg/jdhuff.c ****     EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 1978              		.loc 1 945 48 view .LVU643
 946:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1979              		.loc 1 946 5 view .LVU644
 946:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1980              		.loc 1 946 12 is_stmt 0 view .LVU645
 1981 00cd 894C244C 		movl	%ecx, 76(%rsp)
 1982              	.LVL231:
 949:fltk-1.3.4-1/jpeg/jdhuff.c ****     tbl = entropy->ac_derived_tbl;
 1983              		.loc 1 949 5 is_stmt 1 view .LVU646
 950:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1984              		.loc 1 950 5 view .LVU647
 958:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1985              		.loc 1 958 5 view .LVU648
 1986              		.loc 1 961 5 view .LVU649
 962:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 963:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (EOBRUN == 0) {
 1987              		.loc 1 963 5 view .LVU650
 1988              		.loc 1 963 8 is_stmt 0 view .LVU651
 1989 00d1 85C9     		testl	%ecx, %ecx
 1990 00d3 0F850303 		jne	.L194
 1990      0000
 950:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1991              		.loc 1 950 9 view .LVU652
 1992 00d9 488B4068 		movq	104(%rax), %rax
 1993              	.LVL232:
 958:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1994              		.loc 1 958 15 view .LVU653
 1995 00dd C7442448 		movl	$0, 72(%rsp)
 1995      00000000 
 1996 00e5 4C897C24 		movq	%r15, 48(%rsp)
 1996      30
 1997 00ea 4589F7   		movl	%r14d, %r15d
 1998              	.LVL233:
 958:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 1999              		.loc 1 958 15 view .LVU654
 2000 00ed 4D89D6   		movq	%r10, %r14
 2001              	.LVL234:
 950:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2002              		.loc 1 950 9 view .LVU655
 2003 00f0 48894424 		movq	%rax, 56(%rsp)
 2003      38
 2004              	.LVL235:
 2005              		.p2align 4,,10
 2006 00f5 0F1F00   		.p2align 3
 2007              	.L186:
 964:fltk-1.3.4-1/jpeg/jdhuff.c ****       do {
 2008              		.loc 1 964 7 is_stmt 1 view .LVU656
 2009              	.LBB17:
 965:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 2010              		.loc 1 965 2 view .LVU657
 2011              		.loc 1 965 2 view .LVU658
 2012 00f8 83FA07   		cmpl	$7, %edx
 2013 00fb 0F8EA702 		jle	.L248
 2013      0000
 2014              	.L166:
 2015              		.loc 1 965 2 discriminator 6 view .LVU659
 2016 0101 8D4AF8   		leal	-8(%rdx), %ecx
 2017 0104 4C89D8   		movq	%r11, %rax
 2018 0107 488B7424 		movq	56(%rsp), %rsi
 2018      38
 2019 010c 48D3F8   		sarq	%cl, %rax
 2020              	.LVL236:
 2021              		.loc 1 965 2 discriminator 6 view .LVU660
 2022 010f 0FB6C0   		movzbl	%al, %eax
 2023              		.loc 1 965 2 is_stmt 0 discriminator 6 view .LVU661
 2024 0112 8B8C8620 		movl	288(%rsi,%rax,4), %ecx
 2024      010000
 2025              	.LVL237:
 2026              		.loc 1 965 2 discriminator 6 view .LVU662
 2027 0119 85C9     		testl	%ecx, %ecx
 2028 011b 0F844F02 		je	.L196
 2028      0000
 2029              		.loc 1 965 2 is_stmt 1 discriminator 8 view .LVU663
 2030 0121 440FB6AC 		movzbl	1312(%rsi,%rax), %r13d
 2030      06200500 
 2030      00
 2031 012a 29CA     		subl	%ecx, %edx
 2032              	.LVL238:
 2033              		.loc 1 965 2 discriminator 8 view .LVU664
 2034              	.L169:
 2035              		.loc 1 965 2 is_stmt 0 discriminator 8 view .LVU665
 2036              	.LBE17:
 2037              		.loc 1 965 52 is_stmt 1 discriminator 14 view .LVU666
 966:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 2038              		.loc 1 966 2 discriminator 14 view .LVU667
 2039              		.loc 1 966 4 is_stmt 0 discriminator 14 view .LVU668
 2040 012c 4589E8   		movl	%r13d, %r8d
 967:fltk-1.3.4-1/jpeg/jdhuff.c **** 	s &= 15;
 968:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (s) {
 2041              		.loc 1 968 5 discriminator 14 view .LVU669
 2042 012f 4489E8   		movl	%r13d, %eax
 966:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 2043              		.loc 1 966 4 discriminator 14 view .LVU670
 2044 0132 41C1F804 		sarl	$4, %r8d
 2045              	.LVL239:
 967:fltk-1.3.4-1/jpeg/jdhuff.c **** 	s &= 15;
 2046              		.loc 1 967 2 is_stmt 1 discriminator 14 view .LVU671
 2047              		.loc 1 968 2 discriminator 14 view .LVU672
 2048              		.loc 1 968 5 is_stmt 0 discriminator 14 view .LVU673
 2049 0136 83E00F   		andl	$15, %eax
 2050              	.LVL240:
 2051              		.loc 1 968 5 discriminator 14 view .LVU674
 2052 0139 89442424 		movl	%eax, 36(%rsp)
 2053 013d 0F84CD01 		je	.L173
 2053      0000
 969:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (s != 1)		/* size of new coef should always be 1 */
 2054              		.loc 1 969 4 is_stmt 1 view .LVU675
 2055              		.loc 1 969 7 is_stmt 0 view .LVU676
 2056 0143 83F801   		cmpl	$1, %eax
 2057 0146 7436     		je	.L174
 970:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
 2058              		.loc 1 970 6 view .LVU677
 2059 0148 488B7C24 		movq	64(%rsp), %rdi
 2059      40
 2060 014d 44894424 		movl	%r8d, 36(%rsp)
 2060      24
 2061 0152 BEFFFFFF 		movl	$-1, %esi
 2061      FF
 2062 0157 89542418 		movl	%edx, 24(%rsp)
 2063 015b 488B07   		movq	(%rdi), %rax
 2064              	.LVL241:
 2065              		.loc 1 970 6 view .LVU678
 2066 015e 4C895C24 		movq	%r11, 16(%rsp)
 2066      10
 2067              		.loc 1 970 6 is_stmt 1 view .LVU679
 2068 0163 C7402879 		movl	$121, 40(%rax)
 2068      000000
 2069 016a 488B07   		movq	(%rdi), %rax
 2070 016d FF5008   		call	*8(%rax)
 2071              	.LVL242:
 2072              		.loc 1 970 6 is_stmt 0 view .LVU680
 2073 0170 448B4424 		movl	36(%rsp), %r8d
 2073      24
 2074 0175 8B542418 		movl	24(%rsp), %edx
 2075 0179 4C8B5C24 		movq	16(%rsp), %r11
 2075      10
 2076              	.LVL243:
 2077              	.L174:
 971:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 2078              		.loc 1 971 4 is_stmt 1 view .LVU681
 2079 017e 85D2     		testl	%edx, %edx
 2080 0180 0F8EEC02 		jle	.L249
 2080      0000
 2081              	.L175:
 2082              	.LVL244:
 2083              		.loc 1 971 46 discriminator 5 view .LVU682
 972:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1))
 2084              		.loc 1 972 4 discriminator 5 view .LVU683
 2085              		.loc 1 972 8 is_stmt 0 discriminator 5 view .LVU684
 2086 0186 83EA01   		subl	$1, %edx
 2087              	.LVL245:
 2088              		.loc 1 972 8 discriminator 5 view .LVU685
 2089 0189 4C89D8   		movq	%r11, %rax
 2090 018c 89D1     		movl	%edx, %ecx
 2091 018e 48D3F8   		sarq	%cl, %rax
 973:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    s = p1;		/* newly nonzero coef is positive */
 974:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  else
 975:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    s = m1;		/* newly nonzero coef is negative */
 2092              		.loc 1 975 8 discriminator 5 view .LVU686
 2093 0191 A801     		testb	$1, %al
 2094 0193 8B442420 		movl	32(%rsp), %eax
 2095 0197 0F454424 		cmovne	8(%rsp), %eax
 2095      08
 2096 019c 89442424 		movl	%eax, 36(%rsp)
 2097              	.L176:
 2098              	.LVL246:
 976:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} else {
 977:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (r != 15) {
 978:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 979:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (r) {
 980:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 981:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      r = GET_BITS(r);
 982:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      EOBRUN += r;
 983:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    }
 984:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    break;		/* rest of block is handled by EOB logic */
 985:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  }
 986:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* note s = 0 for processing ZRL */
 987:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 988:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Advance over already-nonzero coefs and r still-zero coefs,
 989:fltk-1.3.4-1/jpeg/jdhuff.c **** 	 * appending correction bits to the nonzeroes.  A correction bit is 1
 990:fltk-1.3.4-1/jpeg/jdhuff.c **** 	 * if the absolute value of the coefficient must be increased.
 991:fltk-1.3.4-1/jpeg/jdhuff.c **** 	 */
 992:fltk-1.3.4-1/jpeg/jdhuff.c **** 	do {
 993:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  thiscoef = *block + natural_order[k];
 994:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (*thiscoef) {
 995:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 2099              		.loc 1 995 6 view .LVU687
 2100 01a0 4C8D6C24 		leaq	80(%rsp), %r13
 2100      50
 2101              	.LVL247:
 2102              		.loc 1 995 6 view .LVU688
 2103 01a5 4C8B4C24 		movq	48(%rsp), %r9
 2103      30
 2104 01aa 4863DB   		movslq	%ebx, %rbx
 2105              		.loc 1 995 6 view .LVU689
 2106 01ad 4C89DE   		movq	%r11, %rsi
 2107 01b0 4C896C24 		movq	%r13, 24(%rsp)
 2107      18
 2108 01b5 4589FD   		movl	%r15d, %r13d
 2109 01b8 4D89F7   		movq	%r14, %r15
 2110              	.LVL248:
 2111              		.loc 1 995 6 view .LVU690
 2112 01bb 4589C6   		movl	%r8d, %r14d
 2113              	.LVL249:
 2114              		.loc 1 995 6 view .LVU691
 2115 01be EB4E     		jmp	.L184
 2116              	.LVL250:
 2117              		.p2align 4,,10
 2118              		.p2align 3
 2119              	.L251:
 2120              		.loc 1 995 6 is_stmt 1 view .LVU692
 2121 01c0 85D2     		testl	%edx, %edx
 2122 01c2 0F8E1801 		jle	.L250
 2122      0000
 2123              	.LVL251:
 2124              	.L180:
 2125              		.loc 1 995 48 discriminator 5 view .LVU693
 996:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (GET_BITS(1)) {
 2126              		.loc 1 996 6 discriminator 5 view .LVU694
 2127              		.loc 1 996 10 is_stmt 0 discriminator 5 view .LVU695
 2128 01c8 83EA01   		subl	$1, %edx
 2129              	.LVL252:
 2130              		.loc 1 996 9 discriminator 5 view .LVU696
 2131 01cb 480FA3D6 		btq	%rdx, %rsi
 2132 01cf 732F     		jnc	.L181
 997:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
 2133              		.loc 1 997 8 is_stmt 1 view .LVU697
 2134              		.loc 1 997 13 is_stmt 0 view .LVU698
 2135 01d1 0FBF4D00 		movswl	0(%rbp), %ecx
 2136              		.loc 1 997 11 view .LVU699
 2137 01d5 8B7C2408 		movl	8(%rsp), %edi
 2138              		.loc 1 997 13 view .LVU700
 2139 01d9 89C8     		movl	%ecx, %eax
 2140              		.loc 1 997 11 view .LVU701
 2141 01db 85CF     		testl	%ecx, %edi
 2142 01dd 7521     		jne	.L181
 998:fltk-1.3.4-1/jpeg/jdhuff.c **** 		if (*thiscoef >= 0)
 2143              		.loc 1 998 3 is_stmt 1 view .LVU702
 999:fltk-1.3.4-1/jpeg/jdhuff.c **** 		  *thiscoef += p1;
 2144              		.loc 1 999 15 is_stmt 0 view .LVU703
 2145 01df 0FB74C24 		movzwl	32(%rsp), %ecx
 2145      20
 2146 01e4 6685C0   		testw	%ax, %ax
 2147 01e7 448D1408 		leal	(%rax,%rcx), %r10d
 2148 01eb 8D0C38   		leal	(%rax,%rdi), %ecx
 2149 01ee 4489D0   		movl	%r10d, %eax
 2150 01f1 0F49C1   		cmovns	%ecx, %eax
 2151 01f4 66894500 		movw	%ax, 0(%rbp)
 2152 01f8 0F1F8400 		.p2align 4,,10
 2152      00000000 
 2153              		.p2align 3
 2154              	.L181:
1000:fltk-1.3.4-1/jpeg/jdhuff.c **** 		else
1001:fltk-1.3.4-1/jpeg/jdhuff.c **** 		  *thiscoef += m1;
1002:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      }
1003:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    }
1004:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  } else {
1005:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (--r < 0)
1006:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      break;		/* reached target zero coefficient */
1007:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  }
1008:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  k++;
 2155              		.loc 1 1008 4 is_stmt 1 view .LVU704
 2156 0200 4883C301 		addq	$1, %rbx
 2157              	.LVL253:
 2158              		.loc 1 1008 4 is_stmt 0 view .LVU705
 2159 0204 418D4424 		leal	1(%r12), %eax
 2159      01
 2160              	.LVL254:
1009:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} while (k <= Se);
 2161              		.loc 1 1009 10 is_stmt 1 view .LVU706
 2162              		.loc 1 1009 2 is_stmt 0 view .LVU707
 2163 0209 4139DD   		cmpl	%ebx, %r13d
 2164 020c 7C1E     		jl	.L183
 2165              	.LVL255:
 2166              	.L184:
 993:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (*thiscoef) {
 2167              		.loc 1 993 37 view .LVU708
 2168 020e 49630C9F 		movslq	(%r15,%rbx,4), %rcx
 2169 0212 4189DC   		movl	%ebx, %r12d
 2170 0215 89D8     		movl	%ebx, %eax
 2171              	.LVL256:
 992:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  thiscoef = *block + natural_order[k];
 2172              		.loc 1 992 2 is_stmt 1 view .LVU709
 993:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (*thiscoef) {
 2173              		.loc 1 993 4 view .LVU710
 993:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (*thiscoef) {
 2174              		.loc 1 993 13 is_stmt 0 view .LVU711
 2175 0217 498D2C49 		leaq	(%r9,%rcx,2), %rbp
 2176              	.LVL257:
 994:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 2177              		.loc 1 994 4 is_stmt 1 view .LVU712
 994:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 2178              		.loc 1 994 7 is_stmt 0 view .LVU713
 2179 021b 66837D00 		cmpw	$0, 0(%rbp)
 2179      00
 2180 0220 759E     		jne	.L251
1005:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      break;		/* reached target zero coefficient */
 2181              		.loc 1 1005 6 is_stmt 1 view .LVU714
1005:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      break;		/* reached target zero coefficient */
 2182              		.loc 1 1005 9 is_stmt 0 view .LVU715
 2183 0222 4183EE01 		subl	$1, %r14d
 2184              	.LVL258:
1005:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      break;		/* reached target zero coefficient */
 2185              		.loc 1 1005 9 view .LVU716
 2186 0226 4183FEFF 		cmpl	$-1, %r14d
 2187 022a 75D4     		jne	.L181
 2188              	.L183:
1010:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (s) {
 2189              		.loc 1 1010 5 view .LVU717
 2190 022c 8B7C2424 		movl	36(%rsp), %edi
 2191 0230 4D89FE   		movq	%r15, %r14
 2192              	.LVL259:
 2193              		.loc 1 1010 5 view .LVU718
 2194 0233 4989F3   		movq	%rsi, %r11
 2195 0236 4589EF   		movl	%r13d, %r15d
 2196              	.LVL260:
 2197              		.loc 1 1010 2 is_stmt 1 view .LVU719
 2198              		.loc 1 1010 5 is_stmt 0 view .LVU720
 2199 0239 85FF     		testl	%edi, %edi
 2200 023b 7426     		je	.L185
 2201              	.LVL261:
 2202              	.LBB18:
1011:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  int pos = natural_order[k];
 2203              		.loc 1 1011 4 is_stmt 1 view .LVU721
 2204              		.loc 1 1011 27 is_stmt 0 view .LVU722
 2205 023d 4863C8   		movslq	%eax, %rcx
1012:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* Output newly nonzero coefficient */
1013:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  (*block)[pos] = (JCOEF) s;
 2206              		.loc 1 1013 20 view .LVU723
 2207 0240 488B5C24 		movq	48(%rsp), %rbx
 2207      30
1011:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  int pos = natural_order[k];
 2208              		.loc 1 1011 8 view .LVU724
 2209 0245 4963348E 		movslq	(%r14,%rcx,4), %rsi
 2210              	.LVL262:
1011:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  int pos = natural_order[k];
 2211              		.loc 1 1011 8 view .LVU725
 2212 0249 4889F1   		movq	%rsi, %rcx
 2213              	.LVL263:
 2214              		.loc 1 1013 4 is_stmt 1 view .LVU726
 2215              		.loc 1 1013 20 is_stmt 0 view .LVU727
 2216 024c 66893C73 		movw	%di, (%rbx,%rsi,2)
1014:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  /* Remember its position in case we have to suspend */
1015:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  newnz_pos[num_newnz++] = pos;
 2217              		.loc 1 1015 4 is_stmt 1 view .LVU728
 2218              	.LVL264:
 2219              		.loc 1 1015 27 is_stmt 0 view .LVU729
 2220 0250 48637424 		movslq	72(%rsp), %rsi
 2220      48
 2221              	.LVL265:
 2222              		.loc 1 1015 27 view .LVU730
 2223 0255 898CB480 		movl	%ecx, 128(%rsp,%rsi,4)
 2223      000000
 2224              		.loc 1 1015 23 view .LVU731
 2225 025c 8D7601   		leal	1(%rsi), %esi
 2226 025f 89742448 		movl	%esi, 72(%rsp)
 2227              	.LVL266:
 2228              	.L185:
 2229              		.loc 1 1015 23 view .LVU732
 2230              	.LBE18:
1016:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
1017:fltk-1.3.4-1/jpeg/jdhuff.c **** 	k++;
 2231              		.loc 1 1017 2 is_stmt 1 view .LVU733
 2232              		.loc 1 1017 3 is_stmt 0 view .LVU734
 2233 0263 8D5801   		leal	1(%rax), %ebx
 2234              	.LVL267:
1018:fltk-1.3.4-1/jpeg/jdhuff.c ****       } while (k <= Se);
 2235              		.loc 1 1018 15 is_stmt 1 view .LVU735
 2236              		.loc 1 1018 7 is_stmt 0 view .LVU736
 2237 0266 4139DF   		cmpl	%ebx, %r15d
 2238 0269 0F8D89FE 		jge	.L186
 2238      FFFF
 2239              	.LVL268:
 2240              	.L187:
1019:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1020:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1021:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (EOBRUN) {
1022:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Scan any remaining coefficient positions after the end-of-band
1023:fltk-1.3.4-1/jpeg/jdhuff.c ****        * (the last newly nonzero coefficient, if any).  Append a correction
1024:fltk-1.3.4-1/jpeg/jdhuff.c ****        * bit to each already-nonzero coefficient.  A correction bit is 1
1025:fltk-1.3.4-1/jpeg/jdhuff.c ****        * if the absolute value of the coefficient must be increased.
1026:fltk-1.3.4-1/jpeg/jdhuff.c ****        */
1027:fltk-1.3.4-1/jpeg/jdhuff.c ****       do {
1028:fltk-1.3.4-1/jpeg/jdhuff.c **** 	thiscoef = *block + natural_order[k];
1029:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (*thiscoef) {
1030:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
1031:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1)) {
1032:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
1033:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      if (*thiscoef >= 0)
1034:fltk-1.3.4-1/jpeg/jdhuff.c **** 		*thiscoef += p1;
1035:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      else
1036:fltk-1.3.4-1/jpeg/jdhuff.c **** 		*thiscoef += m1;
1037:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    }
1038:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  }
1039:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
1040:fltk-1.3.4-1/jpeg/jdhuff.c **** 	k++;
1041:fltk-1.3.4-1/jpeg/jdhuff.c ****       } while (k <= Se);
1042:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Count one block completed in EOB run */
1043:fltk-1.3.4-1/jpeg/jdhuff.c ****       EOBRUN--;
1044:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1045:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1046:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Completed MCU, so update state */
1047:fltk-1.3.4-1/jpeg/jdhuff.c ****     BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 2241              		.loc 1 1047 5 is_stmt 1 view .LVU737
 2242 026f 488B7424 		movq	64(%rsp), %rsi
 2242      40
 2243 0274 488B4C24 		movq	80(%rsp), %rcx
 2243      50
 2244 0279 488B4628 		movq	40(%rsi), %rax
 2245 027d 488908   		movq	%rcx, (%rax)
 2246              		.loc 1 1047 5 view .LVU738
 2247 0280 488B4628 		movq	40(%rsi), %rax
 2248 0284 488B4C24 		movq	88(%rsp), %rcx
 2248      58
1048:fltk-1.3.4-1/jpeg/jdhuff.c ****     entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 2249              		.loc 1 1048 27 is_stmt 0 view .LVU739
 2250 0289 8B74244C 		movl	76(%rsp), %esi
1047:fltk-1.3.4-1/jpeg/jdhuff.c ****     entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 2251              		.loc 1 1047 5 view .LVU740
 2252 028d 48894808 		movq	%rcx, 8(%rax)
1047:fltk-1.3.4-1/jpeg/jdhuff.c ****     entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 2253              		.loc 1 1047 5 is_stmt 1 view .LVU741
 2254 0291 488B4424 		movq	40(%rsp), %rax
 2254      28
 2255 0296 4C895818 		movq	%r11, 24(%rax)
1047:fltk-1.3.4-1/jpeg/jdhuff.c ****     entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 2256              		.loc 1 1047 5 view .LVU742
 2257 029a 895020   		movl	%edx, 32(%rax)
 2258              		.loc 1 1048 5 view .LVU743
 2259              		.loc 1 1048 27 is_stmt 0 view .LVU744
 2260 029d 897028   		movl	%esi, 40(%rax)
 2261              	.LVL269:
 2262              	.L162:
1049:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
1050:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1051:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Account for restart interval (no-op if not using restarts) */
1052:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->restarts_to_go--;
 2263              		.loc 1 1052 3 is_stmt 1 view .LVU745
 2264              		.loc 1 1052 26 is_stmt 0 view .LVU746
 2265 02a0 488B4424 		movq	40(%rsp), %rax
 2265      28
 2266 02a5 83684001 		subl	$1, 64(%rax)
1053:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1054:fltk-1.3.4-1/jpeg/jdhuff.c ****   return TRUE;
 2267              		.loc 1 1054 3 is_stmt 1 view .LVU747
 2268              		.loc 1 1054 10 is_stmt 0 view .LVU748
 2269 02a9 B8010000 		movl	$1, %eax
 2269      00
 2270              	.L159:
1055:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1056:fltk-1.3.4-1/jpeg/jdhuff.c **** undoit:
1057:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Re-zero any output coefficients that we made newly nonzero */
1058:fltk-1.3.4-1/jpeg/jdhuff.c ****   while (num_newnz)
1059:fltk-1.3.4-1/jpeg/jdhuff.c ****     (*block)[newnz_pos[--num_newnz]] = 0;
1060:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1061:fltk-1.3.4-1/jpeg/jdhuff.c ****   return FALSE;
1062:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 2271              		.loc 1 1062 1 view .LVU749
 2272 02ae 488BB424 		movq	392(%rsp), %rsi
 2272      88010000 
 2273 02b6 64483334 		xorq	%fs:40, %rsi
 2273      25280000 
 2273      00
 2274 02bf 0F85B602 		jne	.L252
 2274      0000
 2275 02c5 4881C498 		addq	$408, %rsp
 2275      010000
 2276              		.cfi_remember_state
 2277              		.cfi_def_cfa_offset 56
 2278 02cc 5B       		popq	%rbx
 2279              		.cfi_def_cfa_offset 48
 2280 02cd 5D       		popq	%rbp
 2281              		.cfi_def_cfa_offset 40
 2282 02ce 415C     		popq	%r12
 2283              		.cfi_def_cfa_offset 32
 2284 02d0 415D     		popq	%r13
 2285              		.cfi_def_cfa_offset 24
 2286 02d2 415E     		popq	%r14
 2287              		.cfi_def_cfa_offset 16
 2288 02d4 415F     		popq	%r15
 2289              		.cfi_def_cfa_offset 8
 2290 02d6 C3       		ret
 2291              	.LVL270:
 2292 02d7 660F1F84 		.p2align 4,,10
 2292      00000000 
 2292      00
 2293              		.p2align 3
 2294              	.L250:
 2295              		.cfi_restore_state
 995:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (GET_BITS(1)) {
 2296              		.loc 1 995 6 discriminator 1 view .LVU750
 2297 02e0 488B7C24 		movq	24(%rsp), %rdi
 2297      18
 2298 02e5 B9010000 		movl	$1, %ecx
 2298      00
 2299 02ea 4C894C24 		movq	%r9, 16(%rsp)
 2299      10
 995:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (GET_BITS(1)) {
 2300              		.loc 1 995 6 is_stmt 1 discriminator 1 view .LVU751
 2301 02ef E8000000 		call	jpeg_fill_bit_buffer
 2301      00
 2302              	.LVL271:
 995:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (GET_BITS(1)) {
 2303              		.loc 1 995 6 is_stmt 0 discriminator 1 view .LVU752
 2304 02f4 4C8B4C24 		movq	16(%rsp), %r9
 2304      10
 2305 02f9 85C0     		testl	%eax, %eax
 2306 02fb 0F84A601 		je	.L243
 2306      0000
 995:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (GET_BITS(1)) {
 2307              		.loc 1 995 6 is_stmt 1 discriminator 4 view .LVU753
 2308 0301 488B7424 		movq	96(%rsp), %rsi
 2308      60
 2309              	.LVL272:
 995:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (GET_BITS(1)) {
 2310              		.loc 1 995 6 discriminator 4 view .LVU754
 2311 0306 8B542468 		movl	104(%rsp), %edx
 2312              	.LVL273:
 995:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (GET_BITS(1)) {
 2313              		.loc 1 995 6 is_stmt 0 discriminator 4 view .LVU755
 2314 030a E9B9FEFF 		jmp	.L180
 2314      FF
 2315              	.LVL274:
 2316 030f 90       		.p2align 4,,10
 2317              		.p2align 3
 2318              	.L173:
 977:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 2319              		.loc 1 977 4 is_stmt 1 view .LVU756
 977:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 2320              		.loc 1 977 7 is_stmt 0 view .LVU757
 2321 0310 4183F80F 		cmpl	$15, %r8d
 2322 0314 0F8486FE 		je	.L176
 2322      FFFF
 978:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (r) {
 2323              		.loc 1 978 17 view .LVU758
 2324 031a B8010000 		movl	$1, %eax
 2324      00
 2325              	.LVL275:
 978:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (r) {
 2326              		.loc 1 978 17 view .LVU759
 2327 031f 4489C1   		movl	%r8d, %ecx
 2328 0322 4D89F2   		movq	%r14, %r10
 2329 0325 4589FE   		movl	%r15d, %r14d
 2330              	.LVL276:
 978:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (r) {
 2331              		.loc 1 978 17 view .LVU760
 2332 0328 D3E0     		sall	%cl, %eax
 2333 032a 4C8B7C24 		movq	48(%rsp), %r15
 2333      30
 2334              	.LVL277:
 978:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (r) {
 2335              		.loc 1 978 6 is_stmt 1 view .LVU761
 978:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (r) {
 2336              		.loc 1 978 17 is_stmt 0 view .LVU762
 2337 032f 8944244C 		movl	%eax, 76(%rsp)
 2338              	.LVL278:
 979:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 2339              		.loc 1 979 6 is_stmt 1 view .LVU763
 979:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 2340              		.loc 1 979 9 is_stmt 0 view .LVU764
 2341 0333 4585C0   		testl	%r8d, %r8d
 2342 0336 7426     		je	.L177
 980:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      r = GET_BITS(r);
 2343              		.loc 1 980 8 is_stmt 1 view .LVU765
 2344 0338 4439C2   		cmpl	%r8d, %edx
 2345 033b 0F8C0002 		jl	.L253
 2345      0000
 2346              	.LVL279:
 2347              	.L178:
 980:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      r = GET_BITS(r);
 2348              		.loc 1 980 50 discriminator 5 view .LVU766
 981:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      EOBRUN += r;
 2349              		.loc 1 981 8 discriminator 5 view .LVU767
 981:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      EOBRUN += r;
 2350              		.loc 1 981 12 is_stmt 0 discriminator 5 view .LVU768
 2351 0341 4429C2   		subl	%r8d, %edx
 2352              	.LVL280:
 981:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      EOBRUN += r;
 2353              		.loc 1 981 12 discriminator 5 view .LVU769
 2354 0344 4C89D8   		movq	%r11, %rax
 2355 0347 4D63C0   		movslq	%r8d, %r8
 2356              	.LVL281:
 982:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    }
 2357              		.loc 1 982 8 is_stmt 1 discriminator 5 view .LVU770
 981:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      EOBRUN += r;
 2358              		.loc 1 981 12 is_stmt 0 discriminator 5 view .LVU771
 2359 034a 89D1     		movl	%edx, %ecx
 2360 034c 48D3F8   		sarq	%cl, %rax
 981:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      EOBRUN += r;
 2361              		.loc 1 981 10 discriminator 5 view .LVU772
 2362 034f 488D0D00 		leaq	bmask(%rip), %rcx
 2362      000000
 2363 0356 42230481 		andl	(%rcx,%r8,4), %eax
 982:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    }
 2364              		.loc 1 982 15 discriminator 5 view .LVU773
 2365 035a 0144244C 		addl	%eax, 76(%rsp)
 2366              	.LVL282:
 2367              	.L177:
1021:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Scan any remaining coefficient positions after the end-of-band
 2368              		.loc 1 1021 5 is_stmt 1 view .LVU774
1021:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Scan any remaining coefficient positions after the end-of-band
 2369              		.loc 1 1021 8 is_stmt 0 view .LVU775
 2370 035e 8B7C244C 		movl	76(%rsp), %edi
 2371 0362 85FF     		testl	%edi, %edi
 2372 0364 0F8405FF 		je	.L187
 2372      FFFF
1021:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Scan any remaining coefficient positions after the end-of-band
 2373              		.loc 1 1021 8 view .LVU776
 2374 036a EB78     		jmp	.L165
 2375              	.LVL283:
 2376 036c 0F1F4000 		.p2align 4,,10
 2377              		.p2align 3
 2378              	.L196:
 2379              	.LBB19:
 965:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 2380              		.loc 1 965 2 view .LVU777
 2381 0370 41B80900 		movl	$9, %r8d
 2381      0000
 2382 0376 488D6C24 		leaq	80(%rsp), %rbp
 2382      50
 2383              	.LVL284:
 2384              	.L168:
 965:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 2385              		.loc 1 965 2 is_stmt 1 discriminator 11 view .LVU778
 2386 037b 488B4C24 		movq	56(%rsp), %rcx
 2386      38
 2387 0380 4C89DE   		movq	%r11, %rsi
 2388 0383 4889EF   		movq	%rbp, %rdi
 2389 0386 E8000000 		call	jpeg_huff_decode
 2389      00
 2390              	.LVL285:
 965:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 2391              		.loc 1 965 2 is_stmt 0 discriminator 11 view .LVU779
 2392 038b 4189C5   		movl	%eax, %r13d
 2393              	.LVL286:
 965:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 2394              		.loc 1 965 2 discriminator 11 view .LVU780
 2395 038e 85C0     		testl	%eax, %eax
 2396 0390 0F88A101 		js	.L242
 2396      0000
 965:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 2397              		.loc 1 965 2 is_stmt 1 discriminator 13 view .LVU781
 2398 0396 4C8B5C24 		movq	96(%rsp), %r11
 2398      60
 2399              	.LVL287:
 965:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 2400              		.loc 1 965 2 discriminator 13 view .LVU782
 2401 039b 8B542468 		movl	104(%rsp), %edx
 2402              	.LVL288:
 965:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 2403              		.loc 1 965 2 is_stmt 0 discriminator 13 view .LVU783
 2404 039f E988FDFF 		jmp	.L169
 2404      FF
 2405              	.LVL289:
 2406              		.p2align 4,,10
 2407 03a4 0F1F4000 		.p2align 3
 2408              	.L248:
 965:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 2409              		.loc 1 965 2 is_stmt 1 discriminator 1 view .LVU784
 2410 03a8 488D6C24 		leaq	80(%rsp), %rbp
 2410      50
 2411 03ad 31C9     		xorl	%ecx, %ecx
 2412 03af 4C89DE   		movq	%r11, %rsi
 2413 03b2 4889EF   		movq	%rbp, %rdi
 2414 03b5 E8000000 		call	jpeg_fill_bit_buffer
 2414      00
 2415              	.LVL290:
 965:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 2416              		.loc 1 965 2 is_stmt 0 discriminator 1 view .LVU785
 2417 03ba 85C0     		testl	%eax, %eax
 2418 03bc 0F847501 		je	.L242
 2418      0000
 965:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 2419              		.loc 1 965 2 is_stmt 1 discriminator 4 view .LVU786
 2420 03c2 8B542468 		movl	104(%rsp), %edx
 2421 03c6 4C8B5C24 		movq	96(%rsp), %r11
 2421      60
 2422              	.LVL291:
 965:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 2423              		.loc 1 965 2 discriminator 4 view .LVU787
 965:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 2424              		.loc 1 965 2 discriminator 4 view .LVU788
 2425 03cb 83FA07   		cmpl	$7, %edx
 2426 03ce 0F8F2DFD 		jg	.L166
 2426      FFFF
 965:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 2427              		.loc 1 965 2 is_stmt 0 view .LVU789
 2428 03d4 41B80100 		movl	$1, %r8d
 2428      0000
 2429 03da EB9F     		jmp	.L168
 2430              	.LVL292:
 2431              	.L194:
 965:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 2432              		.loc 1 965 2 view .LVU790
 2433              	.LBE19:
 958:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2434              		.loc 1 958 15 view .LVU791
 2435 03dc C7442448 		movl	$0, 72(%rsp)
 2435      00000000 
 2436              	.LVL293:
 2437              	.L165:
1030:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1)) {
 2438              		.loc 1 1030 4 view .LVU792
 2439 03e4 4C8D6424 		leaq	80(%rsp), %r12
 2439      50
 2440 03e9 448B6C24 		movl	8(%rsp), %r13d
 2440      08
 2441 03ee 4863DB   		movslq	%ebx, %rbx
1030:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1)) {
 2442              		.loc 1 1030 4 view .LVU793
 2443 03f1 4C89DE   		movq	%r11, %rsi
 2444 03f4 4C89E7   		movq	%r12, %rdi
 2445 03f7 4D89D4   		movq	%r10, %r12
 2446 03fa EB61     		jmp	.L191
 2447              	.LVL294:
 2448              	.L255:
1030:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1)) {
 2449              		.loc 1 1030 4 is_stmt 1 discriminator 1 view .LVU794
 2450 03fc B9010000 		movl	$1, %ecx
 2450      00
1030:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1)) {
 2451              		.loc 1 1030 4 is_stmt 0 discriminator 1 view .LVU795
 2452 0401 48897C24 		movq	%rdi, 8(%rsp)
 2452      08
 2453 0406 E8000000 		call	jpeg_fill_bit_buffer
 2453      00
 2454              	.LVL295:
1030:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1)) {
 2455              		.loc 1 1030 4 discriminator 1 view .LVU796
 2456 040b 85C0     		testl	%eax, %eax
 2457 040d 0F849700 		je	.L167
 2457      0000
1030:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1)) {
 2458              		.loc 1 1030 4 is_stmt 1 discriminator 4 view .LVU797
 2459 0413 488B7424 		movq	96(%rsp), %rsi
 2459      60
 2460              	.LVL296:
1030:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1)) {
 2461              		.loc 1 1030 4 discriminator 4 view .LVU798
 2462 0418 8B542468 		movl	104(%rsp), %edx
 2463 041c 488B7C24 		movq	8(%rsp), %rdi
 2463      08
 2464              	.LVL297:
 2465              	.L189:
1030:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1)) {
 2466              		.loc 1 1030 46 discriminator 5 view .LVU799
1031:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
 2467              		.loc 1 1031 4 discriminator 5 view .LVU800
1031:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
 2468              		.loc 1 1031 8 is_stmt 0 discriminator 5 view .LVU801
 2469 0421 83EA01   		subl	$1, %edx
 2470              	.LVL298:
1031:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
 2471              		.loc 1 1031 7 discriminator 5 view .LVU802
 2472 0424 480FA3D6 		btq	%rdx, %rsi
 2473 0428 7326     		jnc	.L188
1032:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      if (*thiscoef >= 0)
 2474              		.loc 1 1032 6 is_stmt 1 view .LVU803
1032:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      if (*thiscoef >= 0)
 2475              		.loc 1 1032 11 is_stmt 0 view .LVU804
 2476 042a 0FBF4D00 		movswl	0(%rbp), %ecx
 2477 042e 89C8     		movl	%ecx, %eax
1032:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      if (*thiscoef >= 0)
 2478              		.loc 1 1032 9 view .LVU805
 2479 0430 4485E9   		testl	%r13d, %ecx
 2480 0433 751B     		jne	.L188
1033:fltk-1.3.4-1/jpeg/jdhuff.c **** 		*thiscoef += p1;
 2481              		.loc 1 1033 8 is_stmt 1 view .LVU806
1034:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      else
 2482              		.loc 1 1034 13 is_stmt 0 view .LVU807
 2483 0435 0FB74C24 		movzwl	32(%rsp), %ecx
 2483      20
 2484 043a 6685C0   		testw	%ax, %ax
 2485 043d 448D0C08 		leal	(%rax,%rcx), %r9d
 2486 0441 428D0C28 		leal	(%rax,%r13), %ecx
 2487 0445 4489C8   		movl	%r9d, %eax
 2488 0448 0F49C1   		cmovns	%ecx, %eax
 2489 044b 66894500 		movw	%ax, 0(%rbp)
 2490 044f 90       		.p2align 4,,10
 2491              		.p2align 3
 2492              	.L188:
1040:fltk-1.3.4-1/jpeg/jdhuff.c ****       } while (k <= Se);
 2493              		.loc 1 1040 2 is_stmt 1 view .LVU808
 2494              	.LVL299:
1041:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Count one block completed in EOB run */
 2495              		.loc 1 1041 15 view .LVU809
 2496 0450 4883C301 		addq	$1, %rbx
 2497              	.LVL300:
1041:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Count one block completed in EOB run */
 2498              		.loc 1 1041 7 is_stmt 0 view .LVU810
 2499 0454 4139DE   		cmpl	%ebx, %r14d
 2500 0457 0F8CCD00 		jl	.L254
 2500      0000
 2501              	.LVL301:
 2502              	.L191:
1027:fltk-1.3.4-1/jpeg/jdhuff.c **** 	thiscoef = *block + natural_order[k];
 2503              		.loc 1 1027 7 is_stmt 1 view .LVU811
1028:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (*thiscoef) {
 2504              		.loc 1 1028 2 view .LVU812
1028:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (*thiscoef) {
 2505              		.loc 1 1028 35 is_stmt 0 view .LVU813
 2506 045d 4963049C 		movslq	(%r12,%rbx,4), %rax
1028:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (*thiscoef) {
 2507              		.loc 1 1028 11 view .LVU814
 2508 0461 498D2C47 		leaq	(%r15,%rax,2), %rbp
 2509              	.LVL302:
1029:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 2510              		.loc 1 1029 2 is_stmt 1 view .LVU815
1029:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 2511              		.loc 1 1029 5 is_stmt 0 view .LVU816
 2512 0465 66837D00 		cmpw	$0, 0(%rbp)
 2512      00
 2513 046a 74E4     		je	.L188
1030:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1)) {
 2514              		.loc 1 1030 4 is_stmt 1 view .LVU817
 2515 046c 85D2     		testl	%edx, %edx
 2516 046e 7FB1     		jg	.L189
 2517 0470 EB8A     		jmp	.L255
 2518              	.LVL303:
 2519              	.L249:
 971:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1))
 2520              		.loc 1 971 4 is_stmt 0 discriminator 1 view .LVU818
 2521 0472 488D6C24 		leaq	80(%rsp), %rbp
 2521      50
 2522 0477 B9010000 		movl	$1, %ecx
 2522      00
 2523 047c 4C89DE   		movq	%r11, %rsi
 2524 047f 44894424 		movl	%r8d, 16(%rsp)
 2524      10
 971:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1))
 2525              		.loc 1 971 4 is_stmt 1 discriminator 1 view .LVU819
 2526 0484 4889EF   		movq	%rbp, %rdi
 2527 0487 E8000000 		call	jpeg_fill_bit_buffer
 2527      00
 2528              	.LVL304:
 2529 048c 85C0     		testl	%eax, %eax
 2530 048e 0F84A300 		je	.L242
 2530      0000
 971:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1))
 2531              		.loc 1 971 4 discriminator 4 view .LVU820
 2532 0494 4C8B5C24 		movq	96(%rsp), %r11
 2532      60
 2533              	.LVL305:
 971:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1))
 2534              		.loc 1 971 4 discriminator 4 view .LVU821
 2535 0499 8B542468 		movl	104(%rsp), %edx
 2536 049d 448B4424 		movl	16(%rsp), %r8d
 2536      10
 2537              	.LVL306:
 971:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1))
 2538              		.loc 1 971 4 is_stmt 0 discriminator 4 view .LVU822
 2539 04a2 E9DFFCFF 		jmp	.L175
 2539      FF
 2540              	.LVL307:
 2541              	.L243:
 971:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (GET_BITS(1))
 2542              		.loc 1 971 4 discriminator 4 view .LVU823
 2543 04a7 4D89CF   		movq	%r9, %r15
 2544              	.LVL308:
 2545              	.L167:
1058:fltk-1.3.4-1/jpeg/jdhuff.c ****     (*block)[newnz_pos[--num_newnz]] = 0;
 2546              		.loc 1 1058 9 is_stmt 1 view .LVU824
 2547 04aa 448B4424 		movl	72(%rsp), %r8d
 2547      48
 2548 04af 4585C0   		testl	%r8d, %r8d
 2549 04b2 7440     		je	.L172
 2550 04b4 48635424 		movslq	72(%rsp), %rdx
 2550      48
 2551 04b9 4889D6   		movq	%rdx, %rsi
 2552 04bc 48C1E202 		salq	$2, %rdx
 2553 04c0 488D4C14 		leaq	124(%rsp,%rdx), %rcx
 2553      7C
 2554 04c5 488D8414 		leaq	128(%rsp,%rdx), %rax
 2554      80000000 
 2555 04cd 8D56FF   		leal	-1(%rsi), %edx
 2556 04d0 48C1E202 		salq	$2, %rdx
 2557 04d4 4829D1   		subq	%rdx, %rcx
 2558              	.LVL309:
 2559 04d7 660F1F84 		.p2align 4,,10
 2559      00000000 
 2559      00
 2560              		.p2align 3
 2561              	.L192:
1059:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2562              		.loc 1 1059 5 view .LVU825
1059:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2563              		.loc 1 1059 38 is_stmt 0 view .LVU826
 2564 04e0 486350FC 		movslq	-4(%rax), %rdx
 2565 04e4 31F6     		xorl	%esi, %esi
 2566 04e6 4883E804 		subq	$4, %rax
 2567 04ea 66418934 		movw	%si, (%r15,%rdx,2)
 2567      57
1058:fltk-1.3.4-1/jpeg/jdhuff.c ****     (*block)[newnz_pos[--num_newnz]] = 0;
 2568              		.loc 1 1058 9 is_stmt 1 view .LVU827
 2569 04ef 4839C1   		cmpq	%rax, %rcx
 2570 04f2 75EC     		jne	.L192
 2571              	.LVL310:
 2572              	.L172:
 932:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 2573              		.loc 1 932 9 is_stmt 0 view .LVU828
 2574 04f4 31C0     		xorl	%eax, %eax
 2575 04f6 E9B3FDFF 		jmp	.L159
 2575      FF
 2576              	.LVL311:
 2577              	.L247:
 931:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 2578              		.loc 1 931 13 view .LVU829
 2579 04fb 488B7C24 		movq	64(%rsp), %rdi
 2579      40
 2580 0500 48897424 		movq	%rsi, 8(%rsp)
 2580      08
 931:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 2581              		.loc 1 931 7 is_stmt 1 view .LVU830
 931:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 2582              		.loc 1 931 13 is_stmt 0 view .LVU831
 2583 0505 E8000000 		call	process_restart
 2583      00
 2584              	.LVL312:
 931:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 2585              		.loc 1 931 10 view .LVU832
 2586 050a 488B7424 		movq	8(%rsp), %rsi
 2586      08
 2587 050f 85C0     		testl	%eax, %eax
 2588 0511 74E1     		je	.L172
 937:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2589              		.loc 1 937 3 is_stmt 1 view .LVU833
 937:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2590              		.loc 1 937 6 is_stmt 0 view .LVU834
 2591 0513 488B4424 		movq	40(%rsp), %rax
 2591      28
 2592 0518 448B503C 		movl	60(%rax), %r10d
 2593 051c 4585D2   		testl	%r10d, %r10d
 2594 051f 0F8447FB 		je	.L161
 2594      FFFF
 2595 0525 E976FDFF 		jmp	.L162
 2595      FF
 2596              	.LVL313:
 2597              	.L254:
1043:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 2598              		.loc 1 1043 13 view .LVU835
 2599 052a 836C244C 		subl	$1, 76(%rsp)
 2599      01
 2600              	.LVL314:
1043:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 2601              		.loc 1 1043 13 view .LVU836
 2602 052f 4989F3   		movq	%rsi, %r11
1043:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 2603              		.loc 1 1043 7 is_stmt 1 view .LVU837
 2604              	.LVL315:
1043:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 2605              		.loc 1 1043 7 is_stmt 0 view .LVU838
 2606 0532 E938FDFF 		jmp	.L187
 2606      FF
 2607              	.LVL316:
 2608              	.L242:
1043:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 2609              		.loc 1 1043 7 view .LVU839
 2610 0537 4C8B7C24 		movq	48(%rsp), %r15
 2610      30
 2611              	.LVL317:
1043:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 2612              		.loc 1 1043 7 view .LVU840
 2613 053c E969FFFF 		jmp	.L167
 2613      FF
 2614              	.LVL318:
 2615              	.L253:
 980:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      r = GET_BITS(r);
 2616              		.loc 1 980 8 discriminator 1 view .LVU841
 2617 0541 488D7C24 		leaq	80(%rsp), %rdi
 2617      50
 2618 0546 4489C1   		movl	%r8d, %ecx
 2619 0549 4C89DE   		movq	%r11, %rsi
 2620 054c 4C895424 		movq	%r10, 24(%rsp)
 2620      18
 980:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      r = GET_BITS(r);
 2621              		.loc 1 980 8 is_stmt 1 discriminator 1 view .LVU842
 2622 0551 44894424 		movl	%r8d, 16(%rsp)
 2622      10
 2623 0556 E8000000 		call	jpeg_fill_bit_buffer
 2623      00
 2624              	.LVL319:
 980:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      r = GET_BITS(r);
 2625              		.loc 1 980 8 is_stmt 0 discriminator 1 view .LVU843
 2626 055b 85C0     		testl	%eax, %eax
 2627 055d 0F8447FF 		je	.L167
 2627      FFFF
 980:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      r = GET_BITS(r);
 2628              		.loc 1 980 8 is_stmt 1 discriminator 4 view .LVU844
 2629 0563 4C8B5C24 		movq	96(%rsp), %r11
 2629      60
 2630              	.LVL320:
 980:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      r = GET_BITS(r);
 2631              		.loc 1 980 8 discriminator 4 view .LVU845
 2632 0568 8B542468 		movl	104(%rsp), %edx
 2633 056c 4C8B5424 		movq	24(%rsp), %r10
 2633      18
 2634 0571 448B4424 		movl	16(%rsp), %r8d
 2634      10
 2635              	.LVL321:
 980:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      r = GET_BITS(r);
 2636              		.loc 1 980 8 is_stmt 0 discriminator 4 view .LVU846
 2637 0576 E9C6FDFF 		jmp	.L178
 2637      FF
 2638              	.LVL322:
 2639              	.L252:
 2640              		.loc 1 1062 1 view .LVU847
 2641 057b E8000000 		call	__stack_chk_fail@PLT
 2641      00
 2642              	.LVL323:
 2643              		.cfi_endproc
 2644              	.LFE59:
 2646              		.section	.text.decode_mcu_sub,"ax",@progbits
 2647              		.p2align 4
 2649              	decode_mcu_sub:
 2650              	.LVL324:
 2651              	.LFB60:
1063:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1064:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1065:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
1066:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Decode one MCU's worth of Huffman-compressed coefficients,
1067:fltk-1.3.4-1/jpeg/jdhuff.c ****  * partial blocks.
1068:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
1069:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1070:fltk-1.3.4-1/jpeg/jdhuff.c **** METHODDEF(boolean)
1071:fltk-1.3.4-1/jpeg/jdhuff.c **** decode_mcu_sub (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
1072:fltk-1.3.4-1/jpeg/jdhuff.c **** {
 2652              		.loc 1 1072 1 is_stmt 1 view -0
 2653              		.cfi_startproc
 2654              		.loc 1 1072 1 is_stmt 0 view .LVU849
 2655 0000 F30F1EFA 		endbr64
 2656 0004 4157     		pushq	%r15
 2657              		.cfi_def_cfa_offset 16
 2658              		.cfi_offset 15, -16
 2659 0006 4156     		pushq	%r14
 2660              		.cfi_def_cfa_offset 24
 2661              		.cfi_offset 14, -24
 2662 0008 4155     		pushq	%r13
 2663              		.cfi_def_cfa_offset 32
 2664              		.cfi_offset 13, -32
 2665 000a 4154     		pushq	%r12
 2666              		.cfi_def_cfa_offset 40
 2667              		.cfi_offset 12, -40
 2668 000c 55       		pushq	%rbp
 2669              		.cfi_def_cfa_offset 48
 2670              		.cfi_offset 6, -48
 2671 000d 53       		pushq	%rbx
 2672              		.cfi_def_cfa_offset 56
 2673              		.cfi_offset 3, -56
 2674 000e 4881EC98 		subq	$152, %rsp
 2674      000000
 2675              		.cfi_def_cfa_offset 208
1073:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
1074:fltk-1.3.4-1/jpeg/jdhuff.c ****   const int * natural_order;
1075:fltk-1.3.4-1/jpeg/jdhuff.c ****   int Se, blkn;
1076:fltk-1.3.4-1/jpeg/jdhuff.c ****   BITREAD_STATE_VARS;
1077:fltk-1.3.4-1/jpeg/jdhuff.c ****   savable_state state;
1078:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1079:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Process restart marker if needed; may have to suspend */
1080:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (cinfo->restart_interval) {
 2676              		.loc 1 1080 6 view .LVU850
 2677 0015 448B9774 		movl	372(%rdi), %r10d
 2677      010000
1072:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 2678              		.loc 1 1072 1 view .LVU851
 2679 001c 48897C24 		movq	%rdi, 24(%rsp)
 2679      18
 2680 0021 48897424 		movq	%rsi, 40(%rsp)
 2680      28
 2681 0026 64488B1C 		movq	%fs:40, %rbx
 2681      25280000 
 2681      00
 2682 002f 48899C24 		movq	%rbx, 136(%rsp)
 2682      88000000 
 2683 0037 31DB     		xorl	%ebx, %ebx
1073:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 2684              		.loc 1 1073 3 is_stmt 1 view .LVU852
1073:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 2685              		.loc 1 1073 20 is_stmt 0 view .LVU853
 2686 0039 488B9F70 		movq	624(%rdi), %rbx
 2686      020000
 2687 0040 48895C24 		movq	%rbx, 16(%rsp)
 2687      10
 2688              	.LVL325:
1074:fltk-1.3.4-1/jpeg/jdhuff.c ****   int Se, blkn;
 2689              		.loc 1 1074 3 is_stmt 1 view .LVU854
1075:fltk-1.3.4-1/jpeg/jdhuff.c ****   BITREAD_STATE_VARS;
 2690              		.loc 1 1075 3 view .LVU855
1076:fltk-1.3.4-1/jpeg/jdhuff.c ****   savable_state state;
 2691              		.loc 1 1076 3 view .LVU856
1076:fltk-1.3.4-1/jpeg/jdhuff.c ****   savable_state state;
 2692              		.loc 1 1076 3 view .LVU857
1076:fltk-1.3.4-1/jpeg/jdhuff.c ****   savable_state state;
 2693              		.loc 1 1076 3 view .LVU858
1077:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2694              		.loc 1 1077 3 view .LVU859
 2695              		.loc 1 1080 3 view .LVU860
 2696              		.loc 1 1080 6 is_stmt 0 view .LVU861
 2697 0045 4585D2   		testl	%r10d, %r10d
 2698 0048 7412     		je	.L260
1081:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (entropy->restarts_to_go == 0)
 2699              		.loc 1 1081 5 is_stmt 1 view .LVU862
 2700              		.loc 1 1081 8 is_stmt 0 view .LVU863
 2701 004a 488B4424 		movq	16(%rsp), %rax
 2701      10
 2702 004f 448B4040 		movl	64(%rax), %r8d
 2703 0053 4585C0   		testl	%r8d, %r8d
 2704 0056 0F84D404 		je	.L327
 2704      0000
 2705              	.L260:
1082:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (! process_restart(cinfo))
1083:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
1084:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
1085:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1086:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* If we've run out of data, just leave the MCU set to zeroes.
1087:fltk-1.3.4-1/jpeg/jdhuff.c ****    * This way, we return uniform gray for the remainder of the segment.
1088:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
1089:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (! entropy->insufficient_data) {
 2706              		.loc 1 1089 3 is_stmt 1 view .LVU864
 2707              		.loc 1 1089 6 is_stmt 0 view .LVU865
 2708 005c 488B4424 		movq	16(%rsp), %rax
 2708      10
 2709 0061 448B483C 		movl	60(%rax), %r9d
 2710 0065 4585C9   		testl	%r9d, %r9d
 2711 0068 0F85F202 		jne	.L259
 2711      0000
 2712              	.LVL326:
 2713              	.L258:
1090:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1091:fltk-1.3.4-1/jpeg/jdhuff.c ****     natural_order = cinfo->natural_order;
 2714              		.loc 1 1091 5 is_stmt 1 view .LVU866
 2715              		.loc 1 1091 19 is_stmt 0 view .LVU867
 2716 006e 488B5C24 		movq	24(%rsp), %rbx
 2716      18
 2717              	.LVL327:
1092:fltk-1.3.4-1/jpeg/jdhuff.c ****     Se = cinfo->lim_Se;
1093:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1094:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Load up working state */
1095:fltk-1.3.4-1/jpeg/jdhuff.c ****     BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 2718              		.loc 1 1095 5 view .LVU868
 2719 0073 4C8B5424 		movq	16(%rsp), %r10
 2719      10
1091:fltk-1.3.4-1/jpeg/jdhuff.c ****     Se = cinfo->lim_Se;
 2720              		.loc 1 1091 19 view .LVU869
 2721 0078 488B8330 		movq	560(%rbx), %rax
 2721      020000
1096:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 2722              		.loc 1 1096 5 view .LVU870
 2723 007f 418B7A38 		movl	56(%r10), %edi
1095:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 2724              		.loc 1 1095 5 view .LVU871
 2725 0083 48895C24 		movq	%rbx, 96(%rsp)
 2725      60
 2726              		.loc 1 1096 5 view .LVU872
 2727 0088 F3410F6F 		movdqu	40(%r10), %xmm0
 2727      4228
1092:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2728              		.loc 1 1092 8 view .LVU873
 2729 008e 8BAB3802 		movl	568(%rbx), %ebp
 2729      0000
1091:fltk-1.3.4-1/jpeg/jdhuff.c ****     Se = cinfo->lim_Se;
 2730              		.loc 1 1091 19 view .LVU874
 2731 0094 48894424 		movq	%rax, 48(%rsp)
 2731      30
 2732              	.LVL328:
1092:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2733              		.loc 1 1092 5 is_stmt 1 view .LVU875
1095:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 2734              		.loc 1 1095 5 view .LVU876
1095:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 2735              		.loc 1 1095 5 view .LVU877
 2736 0099 488B4328 		movq	40(%rbx), %rax
 2737              	.LVL329:
 2738              		.loc 1 1096 5 is_stmt 0 view .LVU878
 2739 009d 89BC2480 		movl	%edi, 128(%rsp)
 2739      000000
 2740 00a4 418B7A28 		movl	40(%r10), %edi
1095:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 2741              		.loc 1 1095 5 view .LVU879
 2742 00a8 488B08   		movq	(%rax), %rcx
 2743 00ab 488B5008 		movq	8(%rax), %rdx
 2744              		.loc 1 1096 5 view .LVU880
 2745 00af 0F290424 		movaps	%xmm0, (%rsp)
 2746 00b3 897C243C 		movl	%edi, 60(%rsp)
1097:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1098:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Outer loop handles each block in the MCU */
1099:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1100:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 2747              		.loc 1 1100 5 view .LVU881
 2748 00b7 8BBBF001 		movl	496(%rbx), %edi
 2748      0000
1095:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 2749              		.loc 1 1095 5 view .LVU882
 2750 00bd 48895424 		movq	%rdx, 72(%rsp)
 2750      48
 2751 00c2 498B7218 		movq	24(%r10), %rsi
 2752 00c6 48894C24 		movq	%rcx, 64(%rsp)
 2752      40
1095:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 2753              		.loc 1 1095 5 is_stmt 1 view .LVU883
1095:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 2754              		.loc 1 1095 5 view .LVU884
 2755              	.LVL330:
1095:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 2756              		.loc 1 1095 5 view .LVU885
 2757 00cb 418B5220 		movl	32(%r10), %edx
 2758              	.LVL331:
1095:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 2759              		.loc 1 1095 48 view .LVU886
1096:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2760              		.loc 1 1096 5 view .LVU887
 2761              		.loc 1 1100 5 view .LVU888
 2762              		.loc 1 1100 20 view .LVU889
1096:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2763              		.loc 1 1096 5 is_stmt 0 view .LVU890
 2764 00cf 0F294424 		movaps	%xmm0, 112(%rsp)
 2764      70
 2765              		.loc 1 1100 5 view .LVU891
 2766 00d4 85FF     		testl	%edi, %edi
 2767 00d6 0F8E3D02 		jle	.L262
 2767      0000
 2768 00dc 48C70424 		movq	$0, (%rsp)
 2768      00000000 
 2769 00e4 488D5C24 		leaq	64(%rsp), %rbx
 2769      40
 2770              	.LVL332:
 2771              	.L288:
 2772              	.LBB20:
1101:fltk-1.3.4-1/jpeg/jdhuff.c ****       JBLOCKROW block = MCU_data[blkn];
 2773              		.loc 1 1101 7 is_stmt 1 view .LVU892
 2774              		.loc 1 1101 17 is_stmt 0 view .LVU893
 2775 00e9 488B7C24 		movq	40(%rsp), %rdi
 2775      28
 2776 00ee 488B0424 		movq	(%rsp), %rax
 2777 00f2 4C8B34C7 		movq	(%rdi,%rax,8), %r14
 2778              	.LVL333:
1102:fltk-1.3.4-1/jpeg/jdhuff.c ****       d_derived_tbl * htbl;
 2779              		.loc 1 1102 7 is_stmt 1 view .LVU894
1103:fltk-1.3.4-1/jpeg/jdhuff.c ****       register int s, k, r;
 2780              		.loc 1 1103 7 view .LVU895
1104:fltk-1.3.4-1/jpeg/jdhuff.c ****       int coef_limit, ci;
 2781              		.loc 1 1104 7 view .LVU896
1105:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1106:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Decode a single block's worth of coefficients */
1107:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1108:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Section F.2.2.1: decode the DC coefficient difference */
1109:fltk-1.3.4-1/jpeg/jdhuff.c ****       htbl = entropy->dc_cur_tbls[blkn];
 2782              		.loc 1 1109 7 view .LVU897
 2783              		.loc 1 1109 12 is_stmt 0 view .LVU898
 2784 00f6 488B7C24 		movq	16(%rsp), %rdi
 2784      10
 2785 00fb 4C8BA4C7 		movq	176(%rdi,%rax,8), %r12
 2785      B0000000 
 2786              	.LVL334:
 2787              	.LBB21:
1110:fltk-1.3.4-1/jpeg/jdhuff.c ****       HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 2788              		.loc 1 1110 7 is_stmt 1 view .LVU899
 2789              		.loc 1 1110 7 view .LVU900
 2790 0103 83FA07   		cmpl	$7, %edx
 2791 0106 0F8EF403 		jle	.L328
 2791      0000
 2792              	.L263:
 2793              		.loc 1 1110 7 discriminator 6 view .LVU901
 2794 010c 8D4AF8   		leal	-8(%rdx), %ecx
 2795 010f 4889F0   		movq	%rsi, %rax
 2796 0112 48D3F8   		sarq	%cl, %rax
 2797              	.LVL335:
 2798              		.loc 1 1110 7 discriminator 6 view .LVU902
 2799 0115 0FB6C0   		movzbl	%al, %eax
 2800              		.loc 1 1110 7 is_stmt 0 discriminator 6 view .LVU903
 2801 0118 418B8C84 		movl	288(%r12,%rax,4), %ecx
 2801      20010000 
 2802              	.LVL336:
 2803              		.loc 1 1110 7 discriminator 6 view .LVU904
 2804 0120 85C9     		testl	%ecx, %ecx
 2805 0122 0F84A803 		je	.L291
 2805      0000
 2806              		.loc 1 1110 7 is_stmt 1 discriminator 8 view .LVU905
 2807 0128 450FB6BC 		movzbl	1312(%r12,%rax), %r15d
 2807      04200500 
 2807      00
 2808 0131 29CA     		subl	%ecx, %edx
 2809              	.LVL337:
 2810              		.loc 1 1110 7 discriminator 8 view .LVU906
 2811              	.L266:
 2812              		.loc 1 1110 7 is_stmt 0 discriminator 8 view .LVU907
 2813              	.LBE21:
 2814              		.loc 1 1110 59 is_stmt 1 discriminator 14 view .LVU908
1111:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1112:fltk-1.3.4-1/jpeg/jdhuff.c ****       htbl = entropy->ac_cur_tbls[blkn];
 2815              		.loc 1 1112 7 discriminator 14 view .LVU909
 2816              		.loc 1 1112 12 is_stmt 0 discriminator 14 view .LVU910
 2817 0133 488B4424 		movq	16(%rsp), %rax
 2817      10
 2818 0138 488B3C24 		movq	(%rsp), %rdi
1113:fltk-1.3.4-1/jpeg/jdhuff.c ****       k = 1;
1114:fltk-1.3.4-1/jpeg/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 2819              		.loc 1 1114 18 discriminator 14 view .LVU911
 2820 013c 448BA4B8 		movl	336(%rax,%rdi,4), %r12d
 2820      50010000 
 2821              	.LVL338:
1112:fltk-1.3.4-1/jpeg/jdhuff.c ****       k = 1;
 2822              		.loc 1 1112 12 discriminator 14 view .LVU912
 2823 0144 4C8BACF8 		movq	256(%rax,%rdi,8), %r13
 2823      00010000 
 2824              	.LVL339:
1113:fltk-1.3.4-1/jpeg/jdhuff.c ****       k = 1;
 2825              		.loc 1 1113 7 is_stmt 1 discriminator 14 view .LVU913
 2826              		.loc 1 1114 7 discriminator 14 view .LVU914
1115:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (coef_limit) {
 2827              		.loc 1 1115 7 discriminator 14 view .LVU915
 2828              		.loc 1 1115 10 is_stmt 0 discriminator 14 view .LVU916
 2829 014c 4585E4   		testl	%r12d, %r12d
 2830 014f 0F845B03 		je	.L267
 2830      0000
1116:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Convert DC difference to actual value, update last_dc_val */
1117:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (s) {
 2831              		.loc 1 1117 2 is_stmt 1 view .LVU917
 2832              		.loc 1 1117 5 is_stmt 0 view .LVU918
 2833 0155 4585FF   		testl	%r15d, %r15d
 2834 0158 0F842204 		je	.L292
 2834      0000
1118:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 2835              		.loc 1 1118 4 is_stmt 1 view .LVU919
 2836 015e 4439FA   		cmpl	%r15d, %edx
 2837 0161 0F8C2004 		jl	.L329
 2837      0000
 2838              	.L269:
 2839              		.loc 1 1118 47 discriminator 5 view .LVU920
1119:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 2840              		.loc 1 1119 4 discriminator 5 view .LVU921
 2841              		.loc 1 1119 8 is_stmt 0 discriminator 5 view .LVU922
 2842 0167 4963C7   		movslq	%r15d, %rax
 2843 016a 4429FA   		subl	%r15d, %edx
 2844              	.LVL340:
 2845              		.loc 1 1119 8 discriminator 5 view .LVU923
 2846 016d 4C8D1D00 		leaq	bmask(%rip), %r11
 2846      000000
 2847 0174 418B3C83 		movl	(%r11,%rax,4), %edi
 2848 0178 89D1     		movl	%edx, %ecx
 2849 017a 4889F0   		movq	%rsi, %rax
1120:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 2850              		.loc 1 1120 8 discriminator 5 view .LVU924
 2851 017d 458D47FF 		leal	-1(%r15), %r8d
1119:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 2852              		.loc 1 1119 8 discriminator 5 view .LVU925
 2853 0181 48D3F8   		sarq	%cl, %rax
 2854              		.loc 1 1120 8 discriminator 5 view .LVU926
 2855 0184 4D63C0   		movslq	%r8d, %r8
1119:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 2856              		.loc 1 1119 8 discriminator 5 view .LVU927
 2857 0187 4889C1   		movq	%rax, %rcx
1119:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 2858              		.loc 1 1119 6 discriminator 5 view .LVU928
 2859 018a 21F9     		andl	%edi, %ecx
 2860              	.LVL341:
 2861              		.loc 1 1120 4 is_stmt 1 discriminator 5 view .LVU929
 2862              		.loc 1 1120 8 is_stmt 0 discriminator 5 view .LVU930
 2863 018c 43390C83 		cmpl	%ecx, (%r11,%r8,4)
 2864 0190 0F8DCA03 		jge	.L330
 2864      0000
 2865              	.LVL342:
 2866              	.L268:
1121:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
1122:fltk-1.3.4-1/jpeg/jdhuff.c **** 	ci = cinfo->MCU_membership[blkn];
 2867              		.loc 1 1122 2 is_stmt 1 view .LVU931
1123:fltk-1.3.4-1/jpeg/jdhuff.c **** 	s += state.last_dc_val[ci];
 2868              		.loc 1 1123 2 view .LVU932
 2869              		.loc 1 1123 24 is_stmt 0 view .LVU933
 2870 0196 488B4424 		movq	24(%rsp), %rax
 2870      18
 2871 019b 488B3C24 		movq	(%rsp), %rdi
1113:fltk-1.3.4-1/jpeg/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 2872              		.loc 1 1113 9 view .LVU934
 2873 019f 41BF0100 		movl	$1, %r15d
 2873      0000
 2874              		.loc 1 1123 24 view .LVU935
 2875 01a5 486384B8 		movslq	500(%rax,%rdi,4), %rax
 2875      F4010000 
 2876              		.loc 1 1123 4 view .LVU936
 2877 01ad 034C8474 		addl	116(%rsp,%rax,4), %ecx
 2878              	.LVL343:
1124:fltk-1.3.4-1/jpeg/jdhuff.c **** 	state.last_dc_val[ci] = s;
 2879              		.loc 1 1124 2 is_stmt 1 view .LVU937
 2880              		.loc 1 1124 24 is_stmt 0 view .LVU938
 2881 01b1 894C8474 		movl	%ecx, 116(%rsp,%rax,4)
1125:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Output the DC coefficient */
1126:fltk-1.3.4-1/jpeg/jdhuff.c **** 	(*block)[0] = (JCOEF) s;
 2882              		.loc 1 1126 2 is_stmt 1 view .LVU939
 2883              		.loc 1 1126 16 is_stmt 0 view .LVU940
 2884 01b5 6641890E 		movw	%cx, (%r14)
 2885              	.LVL344:
1127:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1128:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Section F.2.2.2: decode the AC coefficients */
1129:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Since zeroes are skipped, output area must be cleared beforehand */
1130:fltk-1.3.4-1/jpeg/jdhuff.c **** 	for (; k < coef_limit; k++) {
 2886              		.loc 1 1130 2 is_stmt 1 view .LVU941
 2887              		.loc 1 1130 9 view .LVU942
 2888              		.loc 1 1130 2 is_stmt 0 view .LVU943
 2889 01b9 4183FC01 		cmpl	$1, %r12d
 2890 01bd 0F8EBE00 		jle	.L270
 2890      0000
1113:fltk-1.3.4-1/jpeg/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 2891              		.loc 1 1113 9 view .LVU944
 2892 01c3 896C2438 		movl	%ebp, 56(%rsp)
 2893 01c7 4C89ED   		movq	%r13, %rbp
 2894 01ca 4D89F5   		movq	%r14, %r13
 2895              	.LVL345:
1113:fltk-1.3.4-1/jpeg/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 2896              		.loc 1 1113 9 view .LVU945
 2897 01cd 4C8B7424 		movq	48(%rsp), %r14
 2897      30
 2898              	.LVL346:
1113:fltk-1.3.4-1/jpeg/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 2899              		.loc 1 1113 9 view .LVU946
 2900 01d2 EB51     		jmp	.L279
 2901              	.LVL347:
 2902              		.p2align 4,,10
 2903 01d4 0F1F4000 		.p2align 3
 2904              	.L334:
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
1132:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1133:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = s >> 4;
1134:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s &= 15;
1135:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1136:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (s) {
1137:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    k += r;
 2905              		.loc 1 1137 6 is_stmt 1 view .LVU947
 2906              		.loc 1 1137 8 is_stmt 0 view .LVU948
 2907 01d8 4101CF   		addl	%ecx, %r15d
 2908              	.LVL348:
1138:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 2909              		.loc 1 1138 6 is_stmt 1 view .LVU949
 2910 01db 39C2     		cmpl	%eax, %edx
 2911 01dd 0F8C1D02 		jl	.L331
 2911      0000
 2912              	.LVL349:
 2913              	.L275:
 2914              		.loc 1 1138 49 discriminator 5 view .LVU950
1139:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 2915              		.loc 1 1139 6 discriminator 5 view .LVU951
 2916              		.loc 1 1139 10 is_stmt 0 discriminator 5 view .LVU952
 2917 01e3 4963C0   		movslq	%r8d, %rax
 2918 01e6 4429C2   		subl	%r8d, %edx
 2919              	.LVL350:
 2920              		.loc 1 1139 10 discriminator 5 view .LVU953
 2921 01e9 4C8D0D00 		leaq	bmask(%rip), %r9
 2921      000000
 2922 01f0 418B3C81 		movl	(%r9,%rax,4), %edi
 2923 01f4 89D1     		movl	%edx, %ecx
 2924 01f6 4889F0   		movq	%rsi, %rax
 2925 01f9 48D3F8   		sarq	%cl, %rax
 2926 01fc 4889C1   		movq	%rax, %rcx
1140:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    s = HUFF_EXTEND(r, s);
 2927              		.loc 1 1140 10 discriminator 5 view .LVU954
 2928 01ff 418D40FF 		leal	-1(%r8), %eax
 2929 0203 4898     		cltq
1139:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 2930              		.loc 1 1139 8 discriminator 5 view .LVU955
 2931 0205 21F9     		andl	%edi, %ecx
 2932              	.LVL351:
 2933              		.loc 1 1140 6 is_stmt 1 discriminator 5 view .LVU956
 2934              		.loc 1 1140 10 is_stmt 0 discriminator 5 view .LVU957
 2935 0207 41390C81 		cmpl	%ecx, (%r9,%rax,4)
 2936 020b 7C02     		jl	.L276
 2937              		.loc 1 1140 10 discriminator 1 view .LVU958
 2938 020d 29F9     		subl	%edi, %ecx
 2939              	.LVL352:
 2940              	.L276:
1141:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    /* Output coefficient in natural (dezigzagged) order.
1142:fltk-1.3.4-1/jpeg/jdhuff.c **** 	     * Note: the extra entries in natural_order[] will save us
1143:fltk-1.3.4-1/jpeg/jdhuff.c **** 	     * if k > Se, which could happen if the data is corrupted.
1144:fltk-1.3.4-1/jpeg/jdhuff.c **** 	     */
1145:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    (*block)[natural_order[k]] = (JCOEF) s;
 2941              		.loc 1 1145 6 is_stmt 1 discriminator 4 view .LVU959
 2942              		.loc 1 1145 28 is_stmt 0 discriminator 4 view .LVU960
 2943 020f 4963C7   		movslq	%r15d, %rax
1130:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 2944              		.loc 1 1130 26 discriminator 4 view .LVU961
 2945 0212 4183C701 		addl	$1, %r15d
 2946              	.LVL353:
 2947              		.loc 1 1145 33 discriminator 4 view .LVU962
 2948 0216 49630486 		movslq	(%r14,%rax,4), %rax
 2949              		.loc 1 1145 35 discriminator 4 view .LVU963
 2950 021a 6641894C 		movw	%cx, 0(%r13,%rax,2)
 2950      4500
 2951              	.LVL354:
1130:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 2952              		.loc 1 1130 25 is_stmt 1 discriminator 4 view .LVU964
1130:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 2953              		.loc 1 1130 9 discriminator 4 view .LVU965
1130:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 2954              		.loc 1 1130 2 is_stmt 0 discriminator 4 view .LVU966
 2955 0220 4539FC   		cmpl	%r15d, %r12d
 2956 0223 7E55     		jle	.L332
 2957              	.LVL355:
 2958              	.L279:
 2959              	.LBB22:
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2960              		.loc 1 1131 4 is_stmt 1 view .LVU967
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2961              		.loc 1 1131 4 view .LVU968
 2962 0225 83FA07   		cmpl	$7, %edx
 2963 0228 0F8EA201 		jle	.L333
 2963      0000
 2964              	.L271:
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2965              		.loc 1 1131 4 discriminator 6 view .LVU969
 2966 022e 8D4AF8   		leal	-8(%rdx), %ecx
 2967 0231 4889F0   		movq	%rsi, %rax
 2968 0234 48D3F8   		sarq	%cl, %rax
 2969              	.LVL356:
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2970              		.loc 1 1131 4 discriminator 6 view .LVU970
 2971 0237 0FB6C0   		movzbl	%al, %eax
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2972              		.loc 1 1131 4 is_stmt 0 discriminator 6 view .LVU971
 2973 023a 8B8C8520 		movl	288(%rbp,%rax,4), %ecx
 2973      010000
 2974              	.LVL357:
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2975              		.loc 1 1131 4 discriminator 6 view .LVU972
 2976 0241 85C9     		testl	%ecx, %ecx
 2977 0243 0F845701 		je	.L295
 2977      0000
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2978              		.loc 1 1131 4 is_stmt 1 discriminator 8 view .LVU973
 2979 0249 0FB68405 		movzbl	1312(%rbp,%rax), %eax
 2979      20050000 
 2980              	.LVL358:
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2981              		.loc 1 1131 4 is_stmt 0 discriminator 8 view .LVU974
 2982 0251 29CA     		subl	%ecx, %edx
 2983              	.LVL359:
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2984              		.loc 1 1131 4 is_stmt 1 discriminator 8 view .LVU975
 2985              	.L273:
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2986              		.loc 1 1131 4 is_stmt 0 discriminator 8 view .LVU976
 2987              	.LBE22:
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2988              		.loc 1 1131 56 is_stmt 1 discriminator 14 view .LVU977
1133:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s &= 15;
 2989              		.loc 1 1133 4 discriminator 14 view .LVU978
1133:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s &= 15;
 2990              		.loc 1 1133 6 is_stmt 0 discriminator 14 view .LVU979
 2991 0253 89C1     		movl	%eax, %ecx
 2992 0255 C1F904   		sarl	$4, %ecx
 2993              	.LVL360:
1134:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 2994              		.loc 1 1134 4 is_stmt 1 discriminator 14 view .LVU980
1136:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    k += r;
 2995              		.loc 1 1136 4 discriminator 14 view .LVU981
1136:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    k += r;
 2996              		.loc 1 1136 7 is_stmt 0 discriminator 14 view .LVU982
 2997 0258 83E00F   		andl	$15, %eax
 2998              	.LVL361:
1136:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    k += r;
 2999              		.loc 1 1136 7 discriminator 14 view .LVU983
 3000 025b 4189C0   		movl	%eax, %r8d
 3001 025e 0F8574FF 		jne	.L334
 3001      FFFF
1146:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  } else {
1147:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (r != 15)
 3002              		.loc 1 1147 6 is_stmt 1 view .LVU984
 3003              		.loc 1 1147 9 is_stmt 0 view .LVU985
 3004 0264 83F90F   		cmpl	$15, %ecx
 3005 0267 0F855C03 		jne	.L323
 3005      0000
1148:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      goto EndOfBlock;
1149:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    k += 15;
 3006              		.loc 1 1149 6 is_stmt 1 view .LVU986
 3007              		.loc 1 1149 8 is_stmt 0 view .LVU987
 3008 026d 4183C70F 		addl	$15, %r15d
 3009              	.LVL362:
1130:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3010              		.loc 1 1130 25 is_stmt 1 view .LVU988
1130:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3011              		.loc 1 1130 26 is_stmt 0 view .LVU989
 3012 0271 4183C701 		addl	$1, %r15d
 3013              	.LVL363:
1130:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3014              		.loc 1 1130 9 is_stmt 1 view .LVU990
1130:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3015              		.loc 1 1130 2 is_stmt 0 view .LVU991
 3016 0275 4539FC   		cmpl	%r15d, %r12d
 3017 0278 7FAB     		jg	.L279
 3018              	.LVL364:
 3019              	.L332:
1130:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3020              		.loc 1 1130 2 view .LVU992
 3021 027a 4989ED   		movq	%rbp, %r13
 3022              	.LVL365:
1130:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3023              		.loc 1 1130 2 view .LVU993
 3024 027d 8B6C2438 		movl	56(%rsp), %ebp
 3025              	.LVL366:
 3026              	.L270:
1150:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  }
1151:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
1152:fltk-1.3.4-1/jpeg/jdhuff.c ****       } else {
1153:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (s) {
1154:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
1155:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
1156:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
1157:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
1158:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1159:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Section F.2.2.2: decode the AC coefficients */
1160:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* In this path we just discard the values */
1161:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (; k <= Se; k++) {
 3027              		.loc 1 1161 14 is_stmt 1 discriminator 1 view .LVU994
 3028              		.loc 1 1161 7 is_stmt 0 discriminator 1 view .LVU995
 3029 0281 4439FD   		cmpl	%r15d, %ebp
 3030 0284 7D21     		jge	.L287
 3031              		.loc 1 1161 7 discriminator 1 view .LVU996
 3032 0286 EB6E     		jmp	.L278
 3033              	.LVL367:
 3034 0288 0F1F8400 		.p2align 4,,10
 3034      00000000 
 3035              		.p2align 3
 3036              	.L337:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
1163:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1164:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
1165:fltk-1.3.4-1/jpeg/jdhuff.c **** 	s &= 15;
1166:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1167:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (s) {
1168:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  k += r;
 3037              		.loc 1 1168 4 is_stmt 1 view .LVU997
 3038              		.loc 1 1168 6 is_stmt 0 view .LVU998
 3039 0290 4101CF   		addl	%ecx, %r15d
 3040              	.LVL368:
1169:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 3041              		.loc 1 1169 4 is_stmt 1 view .LVU999
 3042 0293 39C2     		cmpl	%eax, %edx
 3043 0295 0F8CF501 		jl	.L335
 3043      0000
 3044              	.LVL369:
 3045              	.L285:
 3046              		.loc 1 1169 47 discriminator 5 view .LVU1000
1170:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 3047              		.loc 1 1170 4 discriminator 5 view .LVU1001
1161:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 3048              		.loc 1 1161 24 is_stmt 0 discriminator 5 view .LVU1002
 3049 029b 4183C701 		addl	$1, %r15d
 3050              	.LVL370:
 3051              		.loc 1 1170 4 discriminator 5 view .LVU1003
 3052 029f 4429E2   		subl	%r12d, %edx
 3053              	.LVL371:
1161:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 3054              		.loc 1 1161 23 is_stmt 1 discriminator 5 view .LVU1004
1161:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 3055              		.loc 1 1161 14 discriminator 5 view .LVU1005
1161:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 3056              		.loc 1 1161 7 is_stmt 0 discriminator 5 view .LVU1006
 3057 02a2 4439FD   		cmpl	%r15d, %ebp
 3058 02a5 7C4F     		jl	.L278
 3059              	.LVL372:
 3060              	.L287:
 3061              	.LBB23:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3062              		.loc 1 1162 2 is_stmt 1 view .LVU1007
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3063              		.loc 1 1162 2 view .LVU1008
 3064 02a7 83FA07   		cmpl	$7, %edx
 3065 02aa 0F8EA001 		jle	.L336
 3065      0000
 3066              	.L281:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3067              		.loc 1 1162 2 discriminator 6 view .LVU1009
 3068 02b0 8D4AF8   		leal	-8(%rdx), %ecx
 3069 02b3 4889F0   		movq	%rsi, %rax
 3070 02b6 48D3F8   		sarq	%cl, %rax
 3071              	.LVL373:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3072              		.loc 1 1162 2 discriminator 6 view .LVU1010
 3073 02b9 0FB6C0   		movzbl	%al, %eax
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3074              		.loc 1 1162 2 is_stmt 0 discriminator 6 view .LVU1011
 3075 02bc 418B8C85 		movl	288(%r13,%rax,4), %ecx
 3075      20010000 
 3076              	.LVL374:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3077              		.loc 1 1162 2 discriminator 6 view .LVU1012
 3078 02c4 85C9     		testl	%ecx, %ecx
 3079 02c6 0F845C01 		je	.L298
 3079      0000
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3080              		.loc 1 1162 2 is_stmt 1 discriminator 8 view .LVU1013
 3081 02cc 410FB684 		movzbl	1312(%r13,%rax), %eax
 3081      05200500 
 3081      00
 3082              	.LVL375:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3083              		.loc 1 1162 2 is_stmt 0 discriminator 8 view .LVU1014
 3084 02d5 29CA     		subl	%ecx, %edx
 3085              	.LVL376:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3086              		.loc 1 1162 2 is_stmt 1 discriminator 8 view .LVU1015
 3087              	.L283:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3088              		.loc 1 1162 2 is_stmt 0 discriminator 8 view .LVU1016
 3089              	.LBE23:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3090              		.loc 1 1162 54 is_stmt 1 discriminator 14 view .LVU1017
1164:fltk-1.3.4-1/jpeg/jdhuff.c **** 	s &= 15;
 3091              		.loc 1 1164 2 discriminator 14 view .LVU1018
1164:fltk-1.3.4-1/jpeg/jdhuff.c **** 	s &= 15;
 3092              		.loc 1 1164 4 is_stmt 0 discriminator 14 view .LVU1019
 3093 02d7 89C1     		movl	%eax, %ecx
 3094 02d9 C1F904   		sarl	$4, %ecx
 3095              	.LVL377:
1165:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3096              		.loc 1 1165 2 is_stmt 1 discriminator 14 view .LVU1020
1167:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  k += r;
 3097              		.loc 1 1167 2 discriminator 14 view .LVU1021
1167:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  k += r;
 3098              		.loc 1 1167 5 is_stmt 0 discriminator 14 view .LVU1022
 3099 02dc 83E00F   		andl	$15, %eax
 3100              	.LVL378:
1167:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  k += r;
 3101              		.loc 1 1167 5 discriminator 14 view .LVU1023
 3102 02df 4189C4   		movl	%eax, %r12d
 3103 02e2 75AC     		jne	.L337
1171:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} else {
1172:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (r != 15)
 3104              		.loc 1 1172 4 is_stmt 1 view .LVU1024
 3105              		.loc 1 1172 7 is_stmt 0 view .LVU1025
 3106 02e4 83F90F   		cmpl	$15, %ecx
 3107 02e7 750D     		jne	.L278
1173:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    break;
1174:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  k += 15;
 3108              		.loc 1 1174 4 is_stmt 1 view .LVU1026
 3109              		.loc 1 1174 6 is_stmt 0 view .LVU1027
 3110 02e9 4183C70F 		addl	$15, %r15d
 3111              	.LVL379:
1161:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 3112              		.loc 1 1161 23 is_stmt 1 view .LVU1028
1161:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 3113              		.loc 1 1161 24 is_stmt 0 view .LVU1029
 3114 02ed 4183C701 		addl	$1, %r15d
 3115              	.LVL380:
1161:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 3116              		.loc 1 1161 14 is_stmt 1 view .LVU1030
1161:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 3117              		.loc 1 1161 7 is_stmt 0 view .LVU1031
 3118 02f1 4439FD   		cmpl	%r15d, %ebp
 3119 02f4 7DB1     		jge	.L287
 3120              	.LVL381:
 3121              	.L278:
1175:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
1176:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
1177:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1178:fltk-1.3.4-1/jpeg/jdhuff.c ****       EndOfBlock: ;
 3122              		.loc 1 1178 19 is_stmt 1 discriminator 2 view .LVU1032
 3123              	.LBE20:
1100:fltk-1.3.4-1/jpeg/jdhuff.c ****       JBLOCKROW block = MCU_data[blkn];
 3124              		.loc 1 1100 49 discriminator 2 view .LVU1033
1100:fltk-1.3.4-1/jpeg/jdhuff.c ****       JBLOCKROW block = MCU_data[blkn];
 3125              		.loc 1 1100 20 discriminator 2 view .LVU1034
1100:fltk-1.3.4-1/jpeg/jdhuff.c ****       JBLOCKROW block = MCU_data[blkn];
 3126              		.loc 1 1100 5 is_stmt 0 discriminator 2 view .LVU1035
 3127 02f6 488B7C24 		movq	24(%rsp), %rdi
 3127      18
 3128 02fb 48830424 		addq	$1, (%rsp)
 3128      01
 3129              	.LVL382:
1100:fltk-1.3.4-1/jpeg/jdhuff.c ****       JBLOCKROW block = MCU_data[blkn];
 3130              		.loc 1 1100 5 discriminator 2 view .LVU1036
 3131 0300 488B0424 		movq	(%rsp), %rax
 3132 0304 3987F001 		cmpl	%eax, 496(%rdi)
 3132      0000
 3133 030a 0F8FD9FD 		jg	.L288
 3133      FFFF
1100:fltk-1.3.4-1/jpeg/jdhuff.c ****       JBLOCKROW block = MCU_data[blkn];
 3134              		.loc 1 1100 5 discriminator 2 view .LVU1037
 3135 0310 488B4728 		movq	40(%rdi), %rax
 3136 0314 488B4C24 		movq	64(%rsp), %rcx
 3136      40
 3137              	.LVL383:
 3138              	.L262:
1179:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1180:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1181:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Completed MCU, so update state */
1182:fltk-1.3.4-1/jpeg/jdhuff.c ****     BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 3139              		.loc 1 1182 5 is_stmt 1 view .LVU1038
 3140 0319 488908   		movq	%rcx, (%rax)
 3141              		.loc 1 1182 5 view .LVU1039
 3142 031c 488B4424 		movq	24(%rsp), %rax
 3142      18
 3143 0321 488B4C24 		movq	72(%rsp), %rcx
 3143      48
 3144 0326 488B5C24 		movq	16(%rsp), %rbx
 3144      10
 3145 032b 488B4028 		movq	40(%rax), %rax
 3146 032f 48894808 		movq	%rcx, 8(%rax)
 3147              		.loc 1 1182 5 view .LVU1040
1183:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(entropy->saved, state);
 3148              		.loc 1 1183 5 is_stmt 0 view .LVU1041
 3149 0333 8B44243C 		movl	60(%rsp), %eax
1182:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(entropy->saved, state);
 3150              		.loc 1 1182 5 view .LVU1042
 3151 0337 48897318 		movq	%rsi, 24(%rbx)
1182:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(entropy->saved, state);
 3152              		.loc 1 1182 5 is_stmt 1 view .LVU1043
 3153              		.loc 1 1183 5 is_stmt 0 view .LVU1044
 3154 033b 89442470 		movl	%eax, 112(%rsp)
 3155 033f 8B842480 		movl	128(%rsp), %eax
 3155      000000
 3156 0346 660F6F54 		movdqa	112(%rsp), %xmm2
 3156      2470
1182:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(entropy->saved, state);
 3157              		.loc 1 1182 5 view .LVU1045
 3158 034c 895320   		movl	%edx, 32(%rbx)
 3159              		.loc 1 1183 5 is_stmt 1 view .LVU1046
 3160              		.loc 1 1183 5 is_stmt 0 view .LVU1047
 3161 034f 894338   		movl	%eax, 56(%rbx)
 3162 0352 0F115328 		movups	%xmm2, 40(%rbx)
 3163              	.LVL384:
 3164 0356 662E0F1F 		.p2align 4,,10
 3164      84000000 
 3164      0000
 3165              		.p2align 3
 3166              	.L259:
1184:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
1185:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1186:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Account for restart interval (no-op if not using restarts) */
1187:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->restarts_to_go--;
 3167              		.loc 1 1187 3 is_stmt 1 view .LVU1048
 3168              		.loc 1 1187 26 is_stmt 0 view .LVU1049
 3169 0360 488B4424 		movq	16(%rsp), %rax
 3169      10
 3170 0365 83684001 		subl	$1, 64(%rax)
1188:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1189:fltk-1.3.4-1/jpeg/jdhuff.c ****   return TRUE;
 3171              		.loc 1 1189 3 is_stmt 1 view .LVU1050
 3172              		.loc 1 1189 10 is_stmt 0 view .LVU1051
 3173 0369 B8010000 		movl	$1, %eax
 3173      00
 3174              	.L256:
1190:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 3175              		.loc 1 1190 1 view .LVU1052
 3176 036e 488B9C24 		movq	136(%rsp), %rbx
 3176      88000000 
 3177 0376 6448331C 		xorq	%fs:40, %rbx
 3177      25280000 
 3177      00
 3178 037f 0F854D02 		jne	.L338
 3178      0000
 3179 0385 4881C498 		addq	$152, %rsp
 3179      000000
 3180              		.cfi_remember_state
 3181              		.cfi_def_cfa_offset 56
 3182 038c 5B       		popq	%rbx
 3183              		.cfi_def_cfa_offset 48
 3184 038d 5D       		popq	%rbp
 3185              		.cfi_def_cfa_offset 40
 3186 038e 415C     		popq	%r12
 3187              		.cfi_def_cfa_offset 32
 3188 0390 415D     		popq	%r13
 3189              		.cfi_def_cfa_offset 24
 3190 0392 415E     		popq	%r14
 3191              		.cfi_def_cfa_offset 16
 3192 0394 415F     		popq	%r15
 3193              		.cfi_def_cfa_offset 8
 3194 0396 C3       		ret
 3195              	.LVL385:
 3196 0397 660F1F84 		.p2align 4,,10
 3196      00000000 
 3196      00
 3197              		.p2align 3
 3198              	.L295:
 3199              		.cfi_restore_state
 3200              	.LBB27:
 3201              	.LBB24:
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3202              		.loc 1 1131 4 view .LVU1053
 3203 03a0 41B80900 		movl	$9, %r8d
 3203      0000
 3204              	.LVL386:
 3205              	.L272:
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3206              		.loc 1 1131 4 is_stmt 1 discriminator 11 view .LVU1054
 3207 03a6 4889E9   		movq	%rbp, %rcx
 3208 03a9 4889DF   		movq	%rbx, %rdi
 3209 03ac E8000000 		call	jpeg_huff_decode
 3209      00
 3210              	.LVL387:
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3211              		.loc 1 1131 4 is_stmt 0 discriminator 11 view .LVU1055
 3212 03b1 85C0     		testl	%eax, %eax
 3213 03b3 0F88CF00 		js	.L264
 3213      0000
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3214              		.loc 1 1131 4 is_stmt 1 discriminator 13 view .LVU1056
 3215 03b9 488B7424 		movq	80(%rsp), %rsi
 3215      50
 3216              	.LVL388:
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3217              		.loc 1 1131 4 discriminator 13 view .LVU1057
 3218 03be 8B542458 		movl	88(%rsp), %edx
 3219              	.LVL389:
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3220              		.loc 1 1131 4 is_stmt 0 discriminator 13 view .LVU1058
 3221 03c2 E98CFEFF 		jmp	.L273
 3221      FF
 3222              	.LVL390:
 3223 03c7 660F1F84 		.p2align 4,,10
 3223      00000000 
 3223      00
 3224              		.p2align 3
 3225              	.L333:
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3226              		.loc 1 1131 4 is_stmt 1 discriminator 1 view .LVU1059
 3227 03d0 31C9     		xorl	%ecx, %ecx
 3228 03d2 4889DF   		movq	%rbx, %rdi
 3229 03d5 E8000000 		call	jpeg_fill_bit_buffer
 3229      00
 3230              	.LVL391:
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3231              		.loc 1 1131 4 is_stmt 0 discriminator 1 view .LVU1060
 3232 03da 85C0     		testl	%eax, %eax
 3233 03dc 0F84A600 		je	.L264
 3233      0000
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3234              		.loc 1 1131 4 is_stmt 1 discriminator 4 view .LVU1061
 3235 03e2 8B542458 		movl	88(%rsp), %edx
 3236 03e6 488B7424 		movq	80(%rsp), %rsi
 3236      50
 3237              	.LVL392:
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3238              		.loc 1 1131 4 discriminator 4 view .LVU1062
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3239              		.loc 1 1131 4 discriminator 4 view .LVU1063
 3240 03eb 83FA07   		cmpl	$7, %edx
 3241 03ee 0F8F3AFE 		jg	.L271
 3241      FFFF
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3242              		.loc 1 1131 4 is_stmt 0 view .LVU1064
 3243 03f4 41B80100 		movl	$1, %r8d
 3243      0000
 3244 03fa EBAA     		jmp	.L272
 3245              	.LVL393:
 3246 03fc 0F1F4000 		.p2align 4,,10
 3247              		.p2align 3
 3248              	.L331:
1131:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3249              		.loc 1 1131 4 view .LVU1065
 3250              	.LBE24:
1138:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 3251              		.loc 1 1138 6 is_stmt 1 discriminator 1 view .LVU1066
 3252 0400 89C1     		movl	%eax, %ecx
 3253              	.LVL394:
1138:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 3254              		.loc 1 1138 6 is_stmt 0 discriminator 1 view .LVU1067
 3255 0402 4889DF   		movq	%rbx, %rdi
 3256 0405 89442424 		movl	%eax, 36(%rsp)
 3257 0409 E8000000 		call	jpeg_fill_bit_buffer
 3257      00
 3258              	.LVL395:
1138:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 3259              		.loc 1 1138 6 discriminator 1 view .LVU1068
 3260 040e 85C0     		testl	%eax, %eax
 3261 0410 7476     		je	.L264
1138:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 3262              		.loc 1 1138 6 is_stmt 1 discriminator 4 view .LVU1069
 3263 0412 488B7424 		movq	80(%rsp), %rsi
 3263      50
 3264              	.LVL396:
1138:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 3265              		.loc 1 1138 6 discriminator 4 view .LVU1070
 3266 0417 8B542458 		movl	88(%rsp), %edx
 3267 041b 448B4424 		movl	36(%rsp), %r8d
 3267      24
 3268              	.LVL397:
1138:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 3269              		.loc 1 1138 6 is_stmt 0 discriminator 4 view .LVU1071
 3270 0420 E9BEFDFF 		jmp	.L275
 3270      FF
 3271              	.LVL398:
 3272              		.p2align 4,,10
 3273 0425 0F1F00   		.p2align 3
 3274              	.L298:
 3275              	.L282:
1138:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 3276              		.loc 1 1138 6 discriminator 4 view .LVU1072
 3277 0428 F30F1EFA 		endbr64
 3278              	.LBB25:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3279              		.loc 1 1162 2 view .LVU1073
 3280 042c 41B80900 		movl	$9, %r8d
 3280      0000
 3281              	.LVL399:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3282              		.loc 1 1162 2 is_stmt 1 view .LVU1074
 3283 0432 4C89E9   		movq	%r13, %rcx
 3284 0435 4889DF   		movq	%rbx, %rdi
 3285 0438 E8000000 		call	jpeg_huff_decode
 3285      00
 3286              	.LVL400:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3287              		.loc 1 1162 2 is_stmt 0 view .LVU1075
 3288 043d 85C0     		testl	%eax, %eax
 3289 043f 7847     		js	.L264
 3290              	.LVL401:
 3291              	.L339:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3292              		.loc 1 1162 2 is_stmt 1 discriminator 13 view .LVU1076
 3293 0441 488B7424 		movq	80(%rsp), %rsi
 3293      50
 3294              	.LVL402:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3295              		.loc 1 1162 2 discriminator 13 view .LVU1077
 3296 0446 8B542458 		movl	88(%rsp), %edx
 3297              	.LVL403:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3298              		.loc 1 1162 2 is_stmt 0 discriminator 13 view .LVU1078
 3299 044a E988FEFF 		jmp	.L283
 3299      FF
 3300              	.LVL404:
 3301 044f 90       		.p2align 4,,10
 3302              		.p2align 3
 3303              	.L336:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3304              		.loc 1 1162 2 is_stmt 1 discriminator 1 view .LVU1079
 3305 0450 31C9     		xorl	%ecx, %ecx
 3306 0452 4889DF   		movq	%rbx, %rdi
 3307 0455 E8000000 		call	jpeg_fill_bit_buffer
 3307      00
 3308              	.LVL405:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3309              		.loc 1 1162 2 is_stmt 0 discriminator 1 view .LVU1080
 3310 045a 85C0     		testl	%eax, %eax
 3311 045c 742A     		je	.L264
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3312              		.loc 1 1162 2 is_stmt 1 discriminator 4 view .LVU1081
 3313 045e 8B542458 		movl	88(%rsp), %edx
 3314 0462 488B7424 		movq	80(%rsp), %rsi
 3314      50
 3315              	.LVL406:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3316              		.loc 1 1162 2 discriminator 4 view .LVU1082
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3317              		.loc 1 1162 2 discriminator 4 view .LVU1083
 3318 0467 83FA07   		cmpl	$7, %edx
 3319 046a 0F8F40FE 		jg	.L281
 3319      FFFF
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3320              		.loc 1 1162 2 is_stmt 0 view .LVU1084
 3321 0470 41B80100 		movl	$1, %r8d
 3321      0000
 3322              	.LVL407:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3323              		.loc 1 1162 2 is_stmt 1 view .LVU1085
 3324 0476 4C89E9   		movq	%r13, %rcx
 3325 0479 4889DF   		movq	%rbx, %rdi
 3326 047c E8000000 		call	jpeg_huff_decode
 3326      00
 3327              	.LVL408:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3328              		.loc 1 1162 2 is_stmt 0 view .LVU1086
 3329 0481 85C0     		testl	%eax, %eax
 3330 0483 79BC     		jns	.L339
 3331              	.LVL409:
 3332              		.p2align 4,,10
 3333 0485 0F1F00   		.p2align 3
 3334              	.L264:
1162:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3335              		.loc 1 1162 2 view .LVU1087
 3336              	.LBE25:
 3337              	.LBE27:
1083:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 3338              		.loc 1 1083 9 view .LVU1088
 3339 0488 31C0     		xorl	%eax, %eax
 3340 048a E9DFFEFF 		jmp	.L256
 3340      FF
 3341              	.LVL410:
 3342 048f 90       		.p2align 4,,10
 3343              		.p2align 3
 3344              	.L335:
 3345              	.LBB28:
1169:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 3346              		.loc 1 1169 4 is_stmt 1 discriminator 1 view .LVU1089
 3347 0490 89C1     		movl	%eax, %ecx
 3348              	.LVL411:
1169:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 3349              		.loc 1 1169 4 is_stmt 0 discriminator 1 view .LVU1090
 3350 0492 4889DF   		movq	%rbx, %rdi
 3351 0495 E8000000 		call	jpeg_fill_bit_buffer
 3351      00
 3352              	.LVL412:
1169:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 3353              		.loc 1 1169 4 discriminator 1 view .LVU1091
 3354 049a 85C0     		testl	%eax, %eax
 3355 049c 74EA     		je	.L264
1169:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 3356              		.loc 1 1169 4 is_stmt 1 discriminator 4 view .LVU1092
 3357 049e 488B7424 		movq	80(%rsp), %rsi
 3357      50
 3358              	.LVL413:
1169:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 3359              		.loc 1 1169 4 discriminator 4 view .LVU1093
 3360 04a3 8B542458 		movl	88(%rsp), %edx
 3361              	.LVL414:
1169:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 3362              		.loc 1 1169 4 is_stmt 0 discriminator 4 view .LVU1094
 3363 04a7 E9EFFDFF 		jmp	.L285
 3363      FF
 3364              	.LVL415:
 3365 04ac 0F1F4000 		.p2align 4,,10
 3366              		.p2align 3
 3367              	.L267:
1153:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 3368              		.loc 1 1153 2 is_stmt 1 view .LVU1095
1153:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 3369              		.loc 1 1153 5 is_stmt 0 view .LVU1096
 3370 04b0 4585FF   		testl	%r15d, %r15d
 3371 04b3 0F84B700 		je	.L296
 3371      0000
1154:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 3372              		.loc 1 1154 4 is_stmt 1 view .LVU1097
 3373 04b9 4439FA   		cmpl	%r15d, %edx
 3374 04bc 0F8CE600 		jl	.L340
 3374      0000
 3375              	.L280:
1154:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 3376              		.loc 1 1154 47 discriminator 5 view .LVU1098
1155:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 3377              		.loc 1 1155 4 discriminator 5 view .LVU1099
 3378 04c2 4429FA   		subl	%r15d, %edx
 3379              	.LVL416:
1113:fltk-1.3.4-1/jpeg/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 3380              		.loc 1 1113 9 is_stmt 0 discriminator 5 view .LVU1100
 3381 04c5 41BF0100 		movl	$1, %r15d
 3381      0000
 3382              	.LVL417:
1113:fltk-1.3.4-1/jpeg/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 3383              		.loc 1 1113 9 discriminator 5 view .LVU1101
 3384 04cb E9B1FDFF 		jmp	.L270
 3384      FF
 3385              	.LVL418:
 3386              		.p2align 4,,10
 3387              		.p2align 3
 3388              	.L291:
 3389              	.LBB26:
1110:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3390              		.loc 1 1110 7 view .LVU1102
 3391 04d0 41B80900 		movl	$9, %r8d
 3391      0000
 3392              	.LVL419:
 3393              	.L265:
1110:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3394              		.loc 1 1110 7 is_stmt 1 discriminator 11 view .LVU1103
 3395 04d6 4C89E1   		movq	%r12, %rcx
 3396 04d9 4889DF   		movq	%rbx, %rdi
 3397 04dc E8000000 		call	jpeg_huff_decode
 3397      00
 3398              	.LVL420:
1110:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3399              		.loc 1 1110 7 is_stmt 0 discriminator 11 view .LVU1104
 3400 04e1 4189C7   		movl	%eax, %r15d
 3401              	.LVL421:
1110:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3402              		.loc 1 1110 7 discriminator 11 view .LVU1105
 3403 04e4 85C0     		testl	%eax, %eax
 3404 04e6 78A0     		js	.L264
1110:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3405              		.loc 1 1110 7 is_stmt 1 discriminator 13 view .LVU1106
 3406 04e8 488B7424 		movq	80(%rsp), %rsi
 3406      50
 3407              	.LVL422:
1110:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3408              		.loc 1 1110 7 discriminator 13 view .LVU1107
 3409 04ed 8B542458 		movl	88(%rsp), %edx
 3410              	.LVL423:
1110:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3411              		.loc 1 1110 7 is_stmt 0 discriminator 13 view .LVU1108
 3412 04f1 E93DFCFF 		jmp	.L266
 3412      FF
 3413              	.LVL424:
 3414 04f6 662E0F1F 		.p2align 4,,10
 3414      84000000 
 3414      0000
 3415              		.p2align 3
 3416              	.L328:
1110:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3417              		.loc 1 1110 7 is_stmt 1 discriminator 1 view .LVU1109
 3418 0500 31C9     		xorl	%ecx, %ecx
 3419 0502 4889DF   		movq	%rbx, %rdi
 3420 0505 E8000000 		call	jpeg_fill_bit_buffer
 3420      00
 3421              	.LVL425:
1110:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3422              		.loc 1 1110 7 is_stmt 0 discriminator 1 view .LVU1110
 3423 050a 85C0     		testl	%eax, %eax
 3424 050c 0F8476FF 		je	.L264
 3424      FFFF
1110:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3425              		.loc 1 1110 7 is_stmt 1 discriminator 4 view .LVU1111
 3426 0512 8B542458 		movl	88(%rsp), %edx
 3427 0516 488B7424 		movq	80(%rsp), %rsi
 3427      50
 3428              	.LVL426:
1110:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3429              		.loc 1 1110 7 discriminator 4 view .LVU1112
1110:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3430              		.loc 1 1110 7 discriminator 4 view .LVU1113
 3431 051b 83FA07   		cmpl	$7, %edx
 3432 051e 0F8FE8FB 		jg	.L263
 3432      FFFF
1110:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3433              		.loc 1 1110 7 is_stmt 0 view .LVU1114
 3434 0524 41B80100 		movl	$1, %r8d
 3434      0000
 3435 052a EBAA     		jmp	.L265
 3436              	.LVL427:
 3437 052c 0F1F4000 		.p2align 4,,10
 3438              		.p2align 3
 3439              	.L327:
1110:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3440              		.loc 1 1110 7 view .LVU1115
 3441              	.LBE26:
 3442              	.LBE28:
1082:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 3443              		.loc 1 1082 7 is_stmt 1 view .LVU1116
1082:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 3444              		.loc 1 1082 13 is_stmt 0 view .LVU1117
 3445 0530 488B7C24 		movq	24(%rsp), %rdi
 3445      18
 3446              	.LVL428:
1082:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 3447              		.loc 1 1082 13 view .LVU1118
 3448 0535 E8000000 		call	process_restart
 3448      00
 3449              	.LVL429:
1082:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 3450              		.loc 1 1082 10 view .LVU1119
 3451 053a 85C0     		testl	%eax, %eax
 3452 053c 0F8446FF 		je	.L264
 3452      FFFF
1089:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3453              		.loc 1 1089 3 is_stmt 1 view .LVU1120
1089:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3454              		.loc 1 1089 6 is_stmt 0 view .LVU1121
 3455 0542 488B4424 		movq	16(%rsp), %rax
 3455      10
 3456 0547 448B483C 		movl	60(%rax), %r9d
 3457 054b 4585C9   		testl	%r9d, %r9d
 3458 054e 0F841AFB 		je	.L258
 3458      FFFF
 3459 0554 E907FEFF 		jmp	.L259
 3459      FF
 3460              	.LVL430:
 3461 0559 0F1F8000 		.p2align 4,,10
 3461      000000
 3462              		.p2align 3
 3463              	.L330:
 3464              	.LBB29:
1120:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 3465              		.loc 1 1120 8 discriminator 1 view .LVU1122
 3466 0560 29F9     		subl	%edi, %ecx
 3467              	.LVL431:
1120:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 3468              		.loc 1 1120 8 discriminator 1 view .LVU1123
 3469 0562 E92FFCFF 		jmp	.L268
 3469      FF
 3470              	.LVL432:
 3471 0567 660F1F84 		.p2align 4,,10
 3471      00000000 
 3471      00
 3472              		.p2align 3
 3473              	.L296:
1113:fltk-1.3.4-1/jpeg/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 3474              		.loc 1 1113 9 view .LVU1124
 3475 0570 41BF0100 		movl	$1, %r15d
 3475      0000
 3476              	.LVL433:
1113:fltk-1.3.4-1/jpeg/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 3477              		.loc 1 1113 9 view .LVU1125
 3478 0576 E906FDFF 		jmp	.L270
 3478      FF
 3479              	.LVL434:
 3480 057b 0F1F4400 		.p2align 4,,10
 3480      00
 3481              		.p2align 3
 3482              	.L292:
1113:fltk-1.3.4-1/jpeg/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 3483              		.loc 1 1113 9 view .LVU1126
 3484 0580 31C9     		xorl	%ecx, %ecx
 3485 0582 E90FFCFF 		jmp	.L268
 3485      FF
 3486              	.L329:
1118:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 3487              		.loc 1 1118 4 is_stmt 1 discriminator 1 view .LVU1127
 3488 0587 4489F9   		movl	%r15d, %ecx
 3489 058a 4889DF   		movq	%rbx, %rdi
 3490 058d E8000000 		call	jpeg_fill_bit_buffer
 3490      00
 3491              	.LVL435:
1118:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 3492              		.loc 1 1118 4 is_stmt 0 discriminator 1 view .LVU1128
 3493 0592 85C0     		testl	%eax, %eax
 3494 0594 0F84EEFE 		je	.L264
 3494      FFFF
1118:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 3495              		.loc 1 1118 4 is_stmt 1 discriminator 4 view .LVU1129
 3496 059a 488B7424 		movq	80(%rsp), %rsi
 3496      50
 3497              	.LVL436:
1118:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 3498              		.loc 1 1118 4 discriminator 4 view .LVU1130
 3499 059f 8B542458 		movl	88(%rsp), %edx
 3500              	.LVL437:
1118:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 3501              		.loc 1 1118 4 is_stmt 0 discriminator 4 view .LVU1131
 3502 05a3 E9BFFBFF 		jmp	.L269
 3502      FF
 3503              	.L340:
1154:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 3504              		.loc 1 1154 4 is_stmt 1 discriminator 1 view .LVU1132
 3505 05a8 4489F9   		movl	%r15d, %ecx
 3506 05ab 4889DF   		movq	%rbx, %rdi
 3507 05ae E8000000 		call	jpeg_fill_bit_buffer
 3507      00
 3508              	.LVL438:
1154:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 3509              		.loc 1 1154 4 is_stmt 0 discriminator 1 view .LVU1133
 3510 05b3 85C0     		testl	%eax, %eax
 3511 05b5 0F84CDFE 		je	.L264
 3511      FFFF
1154:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 3512              		.loc 1 1154 4 is_stmt 1 discriminator 4 view .LVU1134
 3513 05bb 488B7424 		movq	80(%rsp), %rsi
 3513      50
 3514              	.LVL439:
1154:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 3515              		.loc 1 1154 4 discriminator 4 view .LVU1135
 3516 05c0 8B542458 		movl	88(%rsp), %edx
 3517              	.LVL440:
1154:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 3518              		.loc 1 1154 4 is_stmt 0 discriminator 4 view .LVU1136
 3519 05c4 E9F9FEFF 		jmp	.L280
 3519      FF
 3520              	.LVL441:
 3521              	.L323:
1154:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 3522              		.loc 1 1154 4 discriminator 4 view .LVU1137
 3523 05c9 8B6C2438 		movl	56(%rsp), %ebp
 3524              	.LVL442:
1154:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 3525              		.loc 1 1154 4 discriminator 4 view .LVU1138
 3526 05cd E924FDFF 		jmp	.L278
 3526      FF
 3527              	.LVL443:
 3528              	.L338:
1154:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 3529              		.loc 1 1154 4 discriminator 4 view .LVU1139
 3530              	.LBE29:
 3531              		.loc 1 1190 1 view .LVU1140
 3532 05d2 E8000000 		call	__stack_chk_fail@PLT
 3532      00
 3533              	.LVL444:
 3534              		.cfi_endproc
 3535              	.LFE60:
 3537              		.section	.text.decode_mcu,"ax",@progbits
 3538              		.p2align 4
 3540              	decode_mcu:
 3541              	.LVL445:
 3542              	.LFB61:
1191:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1192:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1193:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
1194:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Decode one MCU's worth of Huffman-compressed coefficients,
1195:fltk-1.3.4-1/jpeg/jdhuff.c ****  * full-size blocks.
1196:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
1197:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1198:fltk-1.3.4-1/jpeg/jdhuff.c **** METHODDEF(boolean)
1199:fltk-1.3.4-1/jpeg/jdhuff.c **** decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
1200:fltk-1.3.4-1/jpeg/jdhuff.c **** {
 3543              		.loc 1 1200 1 is_stmt 1 view -0
 3544              		.cfi_startproc
 3545              		.loc 1 1200 1 is_stmt 0 view .LVU1142
 3546 0000 F30F1EFA 		endbr64
 3547 0004 4157     		pushq	%r15
 3548              		.cfi_def_cfa_offset 16
 3549              		.cfi_offset 15, -16
 3550 0006 4889F8   		movq	%rdi, %rax
 3551 0009 4156     		pushq	%r14
 3552              		.cfi_def_cfa_offset 24
 3553              		.cfi_offset 14, -24
 3554 000b 4155     		pushq	%r13
 3555              		.cfi_def_cfa_offset 32
 3556              		.cfi_offset 13, -32
 3557 000d 4154     		pushq	%r12
 3558              		.cfi_def_cfa_offset 40
 3559              		.cfi_offset 12, -40
 3560 000f 55       		pushq	%rbp
 3561              		.cfi_def_cfa_offset 48
 3562              		.cfi_offset 6, -48
 3563 0010 53       		pushq	%rbx
 3564              		.cfi_def_cfa_offset 56
 3565              		.cfi_offset 3, -56
 3566 0011 4881EC88 		subq	$136, %rsp
 3566      000000
 3567              		.cfi_def_cfa_offset 192
1201:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
1202:fltk-1.3.4-1/jpeg/jdhuff.c ****   int blkn;
1203:fltk-1.3.4-1/jpeg/jdhuff.c ****   BITREAD_STATE_VARS;
1204:fltk-1.3.4-1/jpeg/jdhuff.c ****   savable_state state;
1205:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1206:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Process restart marker if needed; may have to suspend */
1207:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (cinfo->restart_interval) {
 3568              		.loc 1 1207 6 view .LVU1143
 3569 0018 448B9074 		movl	372(%rax), %r10d
 3569      010000
1201:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 3570              		.loc 1 1201 20 view .LVU1144
 3571 001f 4C8BA870 		movq	624(%rax), %r13
 3571      020000
1200:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 3572              		.loc 1 1200 1 view .LVU1145
 3573 0026 48897C24 		movq	%rdi, 8(%rsp)
 3573      08
 3574 002b 48897424 		movq	%rsi, 24(%rsp)
 3574      18
 3575 0030 64488B3C 		movq	%fs:40, %rdi
 3575      25280000 
 3575      00
 3576 0039 48897C24 		movq	%rdi, 120(%rsp)
 3576      78
 3577 003e 31FF     		xorl	%edi, %edi
 3578              	.LVL446:
1201:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 3579              		.loc 1 1201 3 is_stmt 1 view .LVU1146
1202:fltk-1.3.4-1/jpeg/jdhuff.c ****   BITREAD_STATE_VARS;
 3580              		.loc 1 1202 3 view .LVU1147
1203:fltk-1.3.4-1/jpeg/jdhuff.c ****   savable_state state;
 3581              		.loc 1 1203 3 view .LVU1148
1203:fltk-1.3.4-1/jpeg/jdhuff.c ****   savable_state state;
 3582              		.loc 1 1203 3 view .LVU1149
1203:fltk-1.3.4-1/jpeg/jdhuff.c ****   savable_state state;
 3583              		.loc 1 1203 3 view .LVU1150
1204:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3584              		.loc 1 1204 3 view .LVU1151
 3585              		.loc 1 1207 3 view .LVU1152
 3586              		.loc 1 1207 6 is_stmt 0 view .LVU1153
 3587 0040 4585D2   		testl	%r10d, %r10d
 3588 0043 740D     		je	.L345
1208:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (entropy->restarts_to_go == 0)
 3589              		.loc 1 1208 5 is_stmt 1 view .LVU1154
 3590              		.loc 1 1208 8 is_stmt 0 view .LVU1155
 3591 0045 458B4540 		movl	64(%r13), %r8d
 3592 0049 4585C0   		testl	%r8d, %r8d
 3593 004c 0F84B604 		je	.L416
 3593      0000
 3594              	.L345:
1209:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (! process_restart(cinfo))
1210:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
1211:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
1212:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1213:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* If we've run out of data, just leave the MCU set to zeroes.
1214:fltk-1.3.4-1/jpeg/jdhuff.c ****    * This way, we return uniform gray for the remainder of the segment.
1215:fltk-1.3.4-1/jpeg/jdhuff.c ****    */
1216:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (! entropy->insufficient_data) {
 3595              		.loc 1 1216 3 is_stmt 1 view .LVU1156
 3596              		.loc 1 1216 6 is_stmt 0 view .LVU1157
 3597 0052 458B4D3C 		movl	60(%r13), %r9d
 3598 0056 4585C9   		testl	%r9d, %r9d
 3599 0059 0F85B902 		jne	.L344
 3599      0000
 3600              	.LVL447:
 3601              	.L343:
1217:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1218:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Load up working state */
1219:fltk-1.3.4-1/jpeg/jdhuff.c ****     BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 3602              		.loc 1 1219 5 is_stmt 1 view .LVU1158
 3603 005f 488B5C24 		movq	8(%rsp), %rbx
 3603      08
1220:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 3604              		.loc 1 1220 5 is_stmt 0 view .LVU1159
 3605 0064 418B7D38 		movl	56(%r13), %edi
 3606 0068 F3410F6F 		movdqu	40(%r13), %xmm0
 3606      4528
1219:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 3607              		.loc 1 1219 5 view .LVU1160
 3608 006e 488B4328 		movq	40(%rbx), %rax
 3609              		.loc 1 1220 5 view .LVU1161
 3610 0072 897C2470 		movl	%edi, 112(%rsp)
 3611 0076 418B7D28 		movl	40(%r13), %edi
1219:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 3612              		.loc 1 1219 5 view .LVU1162
 3613 007a 48895C24 		movq	%rbx, 80(%rsp)
 3613      50
1219:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 3614              		.loc 1 1219 5 is_stmt 1 view .LVU1163
 3615 007f 488B08   		movq	(%rax), %rcx
 3616 0082 488B5008 		movq	8(%rax), %rdx
 3617              		.loc 1 1220 5 is_stmt 0 view .LVU1164
 3618 0086 0F294424 		movaps	%xmm0, 96(%rsp)
 3618      60
 3619 008b 897C242C 		movl	%edi, 44(%rsp)
1221:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1222:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Outer loop handles each block in the MCU */
1223:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1224:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 3620              		.loc 1 1224 5 view .LVU1165
 3621 008f 8BBBF001 		movl	496(%rbx), %edi
 3621      0000
1219:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 3622              		.loc 1 1219 5 view .LVU1166
 3623 0095 48895424 		movq	%rdx, 56(%rsp)
 3623      38
 3624 009a 498B7518 		movq	24(%r13), %rsi
 3625 009e 48894C24 		movq	%rcx, 48(%rsp)
 3625      30
1219:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 3626              		.loc 1 1219 5 is_stmt 1 view .LVU1167
1219:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 3627              		.loc 1 1219 5 view .LVU1168
 3628              	.LVL448:
1219:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 3629              		.loc 1 1219 5 view .LVU1169
 3630 00a3 418B5520 		movl	32(%r13), %edx
 3631              	.LVL449:
1219:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(state, entropy->saved);
 3632              		.loc 1 1219 48 view .LVU1170
1220:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3633              		.loc 1 1220 5 view .LVU1171
 3634              		.loc 1 1224 5 view .LVU1172
 3635              		.loc 1 1224 20 view .LVU1173
 3636              		.loc 1 1224 5 is_stmt 0 view .LVU1174
 3637 00a7 85FF     		testl	%edi, %edi
 3638 00a9 0F8E2C02 		jle	.L347
 3638      0000
 3639              	.LBB30:
1225:fltk-1.3.4-1/jpeg/jdhuff.c ****       JBLOCKROW block = MCU_data[blkn];
1226:fltk-1.3.4-1/jpeg/jdhuff.c ****       d_derived_tbl * htbl;
1227:fltk-1.3.4-1/jpeg/jdhuff.c ****       register int s, k, r;
1228:fltk-1.3.4-1/jpeg/jdhuff.c ****       int coef_limit, ci;
1229:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1230:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Decode a single block's worth of coefficients */
1231:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1232:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Section F.2.2.1: decode the DC coefficient difference */
1233:fltk-1.3.4-1/jpeg/jdhuff.c ****       htbl = entropy->dc_cur_tbls[blkn];
1234:fltk-1.3.4-1/jpeg/jdhuff.c ****       HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
1235:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1236:fltk-1.3.4-1/jpeg/jdhuff.c ****       htbl = entropy->ac_cur_tbls[blkn];
1237:fltk-1.3.4-1/jpeg/jdhuff.c ****       k = 1;
1238:fltk-1.3.4-1/jpeg/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
1239:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (coef_limit) {
1240:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Convert DC difference to actual value, update last_dc_val */
1241:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (s) {
1242:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
1243:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
1244:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
1245:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
1246:fltk-1.3.4-1/jpeg/jdhuff.c **** 	ci = cinfo->MCU_membership[blkn];
1247:fltk-1.3.4-1/jpeg/jdhuff.c **** 	s += state.last_dc_val[ci];
1248:fltk-1.3.4-1/jpeg/jdhuff.c **** 	state.last_dc_val[ci] = s;
1249:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Output the DC coefficient */
1250:fltk-1.3.4-1/jpeg/jdhuff.c **** 	(*block)[0] = (JCOEF) s;
1251:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1252:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Section F.2.2.2: decode the AC coefficients */
1253:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Since zeroes are skipped, output area must be cleared beforehand */
1254:fltk-1.3.4-1/jpeg/jdhuff.c **** 	for (; k < coef_limit; k++) {
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
1256:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1257:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = s >> 4;
1258:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s &= 15;
1259:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1260:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (s) {
1261:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    k += r;
1262:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
1263:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
1264:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    s = HUFF_EXTEND(r, s);
1265:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    /* Output coefficient in natural (dezigzagged) order.
1266:fltk-1.3.4-1/jpeg/jdhuff.c **** 	     * Note: the extra entries in jpeg_natural_order[] will save us
1267:fltk-1.3.4-1/jpeg/jdhuff.c **** 	     * if k >= DCTSIZE2, which could happen if the data is corrupted.
1268:fltk-1.3.4-1/jpeg/jdhuff.c **** 	     */
1269:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 3640              		.loc 1 1269 33 view .LVU1175
 3641 00af 4C896C24 		movq	%r13, 16(%rsp)
 3641      10
 3642              	.LBE30:
1224:fltk-1.3.4-1/jpeg/jdhuff.c ****       JBLOCKROW block = MCU_data[blkn];
 3643              		.loc 1 1224 5 view .LVU1176
 3644 00b4 4531E4   		xorl	%r12d, %r12d
 3645              	.LVL450:
 3646              	.L374:
 3647              	.LBB37:
1225:fltk-1.3.4-1/jpeg/jdhuff.c ****       JBLOCKROW block = MCU_data[blkn];
 3648              		.loc 1 1225 7 is_stmt 1 view .LVU1177
1225:fltk-1.3.4-1/jpeg/jdhuff.c ****       JBLOCKROW block = MCU_data[blkn];
 3649              		.loc 1 1225 17 is_stmt 0 view .LVU1178
 3650 00b7 488B4424 		movq	24(%rsp), %rax
 3650      18
 3651 00bc 4E8B34E0 		movq	(%rax,%r12,8), %r14
 3652              	.LVL451:
1226:fltk-1.3.4-1/jpeg/jdhuff.c ****       register int s, k, r;
 3653              		.loc 1 1226 7 is_stmt 1 view .LVU1179
1227:fltk-1.3.4-1/jpeg/jdhuff.c ****       int coef_limit, ci;
 3654              		.loc 1 1227 7 view .LVU1180
1228:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3655              		.loc 1 1228 7 view .LVU1181
1233:fltk-1.3.4-1/jpeg/jdhuff.c ****       HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 3656              		.loc 1 1233 7 view .LVU1182
1233:fltk-1.3.4-1/jpeg/jdhuff.c ****       HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 3657              		.loc 1 1233 12 is_stmt 0 view .LVU1183
 3658 00c0 488B4424 		movq	16(%rsp), %rax
 3658      10
 3659 00c5 4E8BACE0 		movq	176(%rax,%r12,8), %r13
 3659      B0000000 
 3660              	.LVL452:
 3661              	.LBB31:
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3662              		.loc 1 1234 7 is_stmt 1 view .LVU1184
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3663              		.loc 1 1234 7 view .LVU1185
 3664 00cd 83FA07   		cmpl	$7, %edx
 3665 00d0 0F8EFA03 		jle	.L417
 3665      0000
 3666              	.L348:
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3667              		.loc 1 1234 7 discriminator 6 view .LVU1186
 3668 00d6 8D4AF8   		leal	-8(%rdx), %ecx
 3669 00d9 4889F0   		movq	%rsi, %rax
 3670 00dc 48D3F8   		sarq	%cl, %rax
 3671              	.LVL453:
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3672              		.loc 1 1234 7 discriminator 6 view .LVU1187
 3673 00df 0FB6C0   		movzbl	%al, %eax
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3674              		.loc 1 1234 7 is_stmt 0 discriminator 6 view .LVU1188
 3675 00e2 418B8C85 		movl	288(%r13,%rax,4), %ecx
 3675      20010000 
 3676              	.LVL454:
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3677              		.loc 1 1234 7 discriminator 6 view .LVU1189
 3678 00ea 85C9     		testl	%ecx, %ecx
 3679 00ec 0F84AE03 		je	.L377
 3679      0000
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3680              		.loc 1 1234 7 is_stmt 1 discriminator 8 view .LVU1190
 3681 00f2 450FB6BC 		movzbl	1312(%r13,%rax), %r15d
 3681      05200500 
 3681      00
 3682 00fb 29CA     		subl	%ecx, %edx
 3683              	.LVL455:
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3684              		.loc 1 1234 7 discriminator 8 view .LVU1191
 3685              	.L351:
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3686              		.loc 1 1234 7 is_stmt 0 discriminator 8 view .LVU1192
 3687              	.LBE31:
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3688              		.loc 1 1234 59 is_stmt 1 discriminator 14 view .LVU1193
1236:fltk-1.3.4-1/jpeg/jdhuff.c ****       k = 1;
 3689              		.loc 1 1236 7 discriminator 14 view .LVU1194
1236:fltk-1.3.4-1/jpeg/jdhuff.c ****       k = 1;
 3690              		.loc 1 1236 12 is_stmt 0 discriminator 14 view .LVU1195
 3691 00fd 488B4424 		movq	16(%rsp), %rax
 3691      10
1238:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (coef_limit) {
 3692              		.loc 1 1238 18 discriminator 14 view .LVU1196
 3693 0102 428B9CA0 		movl	336(%rax,%r12,4), %ebx
 3693      50010000 
1236:fltk-1.3.4-1/jpeg/jdhuff.c ****       k = 1;
 3694              		.loc 1 1236 12 discriminator 14 view .LVU1197
 3695 010a 4E8BACE0 		movq	256(%rax,%r12,8), %r13
 3695      00010000 
 3696              	.LVL456:
1237:fltk-1.3.4-1/jpeg/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 3697              		.loc 1 1237 7 is_stmt 1 discriminator 14 view .LVU1198
1238:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (coef_limit) {
 3698              		.loc 1 1238 7 discriminator 14 view .LVU1199
1239:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Convert DC difference to actual value, update last_dc_val */
 3699              		.loc 1 1239 7 discriminator 14 view .LVU1200
1239:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Convert DC difference to actual value, update last_dc_val */
 3700              		.loc 1 1239 10 is_stmt 0 discriminator 14 view .LVU1201
 3701 0112 85DB     		testl	%ebx, %ebx
 3702 0114 0F846603 		je	.L352
 3702      0000
1241:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 3703              		.loc 1 1241 2 is_stmt 1 view .LVU1202
1241:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 3704              		.loc 1 1241 5 is_stmt 0 view .LVU1203
 3705 011a 4585FF   		testl	%r15d, %r15d
 3706 011d 0F842D04 		je	.L378
 3706      0000
1242:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 3707              		.loc 1 1242 4 is_stmt 1 view .LVU1204
 3708 0123 4439FA   		cmpl	%r15d, %edx
 3709 0126 0F8C2B04 		jl	.L418
 3709      0000
 3710              	.L354:
1242:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 3711              		.loc 1 1242 47 discriminator 5 view .LVU1205
1243:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 3712              		.loc 1 1243 4 discriminator 5 view .LVU1206
1243:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 3713              		.loc 1 1243 8 is_stmt 0 discriminator 5 view .LVU1207
 3714 012c 4963C7   		movslq	%r15d, %rax
 3715 012f 4429FA   		subl	%r15d, %edx
 3716              	.LVL457:
1243:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 3717              		.loc 1 1243 8 discriminator 5 view .LVU1208
 3718 0132 4C8D1500 		leaq	bmask(%rip), %r10
 3718      000000
 3719 0139 418B3C82 		movl	(%r10,%rax,4), %edi
 3720 013d 89D1     		movl	%edx, %ecx
 3721 013f 4889F0   		movq	%rsi, %rax
1244:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 3722              		.loc 1 1244 8 discriminator 5 view .LVU1209
 3723 0142 458D47FF 		leal	-1(%r15), %r8d
1243:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 3724              		.loc 1 1243 8 discriminator 5 view .LVU1210
 3725 0146 48D3F8   		sarq	%cl, %rax
1244:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 3726              		.loc 1 1244 8 discriminator 5 view .LVU1211
 3727 0149 4D63C0   		movslq	%r8d, %r8
1243:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 3728              		.loc 1 1243 8 discriminator 5 view .LVU1212
 3729 014c 4889C1   		movq	%rax, %rcx
1243:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s = HUFF_EXTEND(r, s);
 3730              		.loc 1 1243 6 discriminator 5 view .LVU1213
 3731 014f 21F9     		andl	%edi, %ecx
 3732              	.LVL458:
1244:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 3733              		.loc 1 1244 4 is_stmt 1 discriminator 5 view .LVU1214
1244:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 3734              		.loc 1 1244 8 is_stmt 0 discriminator 5 view .LVU1215
 3735 0151 43390C82 		cmpl	%ecx, (%r10,%r8,4)
 3736 0155 0F8DD503 		jge	.L419
 3736      0000
 3737              	.LVL459:
 3738              	.L353:
1246:fltk-1.3.4-1/jpeg/jdhuff.c **** 	s += state.last_dc_val[ci];
 3739              		.loc 1 1246 2 is_stmt 1 view .LVU1216
1247:fltk-1.3.4-1/jpeg/jdhuff.c **** 	state.last_dc_val[ci] = s;
 3740              		.loc 1 1247 2 view .LVU1217
1247:fltk-1.3.4-1/jpeg/jdhuff.c **** 	state.last_dc_val[ci] = s;
 3741              		.loc 1 1247 24 is_stmt 0 view .LVU1218
 3742 015b 488B4424 		movq	8(%rsp), %rax
 3742      08
1237:fltk-1.3.4-1/jpeg/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 3743              		.loc 1 1237 9 view .LVU1219
 3744 0160 41BF0100 		movl	$1, %r15d
 3744      0000
1247:fltk-1.3.4-1/jpeg/jdhuff.c **** 	state.last_dc_val[ci] = s;
 3745              		.loc 1 1247 24 view .LVU1220
 3746 0166 4A6384A0 		movslq	500(%rax,%r12,4), %rax
 3746      F4010000 
1247:fltk-1.3.4-1/jpeg/jdhuff.c **** 	state.last_dc_val[ci] = s;
 3747              		.loc 1 1247 4 view .LVU1221
 3748 016e 034C8464 		addl	100(%rsp,%rax,4), %ecx
 3749              	.LVL460:
1248:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Output the DC coefficient */
 3750              		.loc 1 1248 2 is_stmt 1 view .LVU1222
1248:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* Output the DC coefficient */
 3751              		.loc 1 1248 24 is_stmt 0 view .LVU1223
 3752 0172 894C8464 		movl	%ecx, 100(%rsp,%rax,4)
1250:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3753              		.loc 1 1250 2 is_stmt 1 view .LVU1224
1250:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3754              		.loc 1 1250 16 is_stmt 0 view .LVU1225
 3755 0176 6641890E 		movw	%cx, (%r14)
 3756              	.LVL461:
1254:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3757              		.loc 1 1254 2 is_stmt 1 view .LVU1226
1254:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3758              		.loc 1 1254 9 view .LVU1227
1254:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3759              		.loc 1 1254 2 is_stmt 0 view .LVU1228
 3760 017a 83FB01   		cmpl	$1, %ebx
 3761 017d 0F8EDD00 		jle	.L373
 3761      0000
1254:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3762              		.loc 1 1254 2 view .LVU1229
 3763 0183 4C896424 		movq	%r12, 32(%rsp)
 3763      20
 3764 0188 488D6C24 		leaq	48(%rsp), %rbp
 3764      30
 3765 018d 4589FC   		movl	%r15d, %r12d
 3766              	.LVL462:
1254:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3767              		.loc 1 1254 2 view .LVU1230
 3768 0190 4D89EF   		movq	%r13, %r15
 3769 0193 4D89F5   		movq	%r14, %r13
 3770              	.LVL463:
1254:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3771              		.loc 1 1254 2 view .LVU1231
 3772 0196 4189DE   		movl	%ebx, %r14d
 3773              	.LVL464:
1254:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3774              		.loc 1 1254 2 view .LVU1232
 3775 0199 EB57     		jmp	.L364
 3776              	.LVL465:
 3777 019b 0F1F4400 		.p2align 4,,10
 3777      00
 3778              		.p2align 3
 3779              	.L423:
1261:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 3780              		.loc 1 1261 6 is_stmt 1 view .LVU1233
1261:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 3781              		.loc 1 1261 8 is_stmt 0 view .LVU1234
 3782 01a0 4501C4   		addl	%r8d, %r12d
 3783              	.LVL466:
1262:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 3784              		.loc 1 1262 6 is_stmt 1 view .LVU1235
 3785 01a3 39C2     		cmpl	%eax, %edx
 3786 01a5 0F8CB502 		jl	.L420
 3786      0000
 3787              	.LVL467:
 3788              	.L360:
1262:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 3789              		.loc 1 1262 49 discriminator 5 view .LVU1236
1263:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    s = HUFF_EXTEND(r, s);
 3790              		.loc 1 1263 6 discriminator 5 view .LVU1237
1263:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    s = HUFF_EXTEND(r, s);
 3791              		.loc 1 1263 10 is_stmt 0 discriminator 5 view .LVU1238
 3792 01ab 4863C3   		movslq	%ebx, %rax
 3793 01ae 29DA     		subl	%ebx, %edx
 3794              	.LVL468:
1263:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    s = HUFF_EXTEND(r, s);
 3795              		.loc 1 1263 10 discriminator 5 view .LVU1239
 3796 01b0 4C8D0D00 		leaq	bmask(%rip), %r9
 3796      000000
 3797 01b7 418B3C81 		movl	(%r9,%rax,4), %edi
 3798 01bb 89D1     		movl	%edx, %ecx
 3799 01bd 4889F0   		movq	%rsi, %rax
 3800 01c0 48D3F8   		sarq	%cl, %rax
 3801 01c3 4889C1   		movq	%rax, %rcx
1264:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    /* Output coefficient in natural (dezigzagged) order.
 3802              		.loc 1 1264 10 discriminator 5 view .LVU1240
 3803 01c6 8D43FF   		leal	-1(%rbx), %eax
 3804 01c9 4898     		cltq
1263:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    s = HUFF_EXTEND(r, s);
 3805              		.loc 1 1263 8 discriminator 5 view .LVU1241
 3806 01cb 21F9     		andl	%edi, %ecx
 3807              	.LVL469:
1264:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    /* Output coefficient in natural (dezigzagged) order.
 3808              		.loc 1 1264 6 is_stmt 1 discriminator 5 view .LVU1242
1264:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    /* Output coefficient in natural (dezigzagged) order.
 3809              		.loc 1 1264 10 is_stmt 0 discriminator 5 view .LVU1243
 3810 01cd 41390C81 		cmpl	%ecx, (%r9,%rax,4)
 3811 01d1 7C02     		jl	.L361
1264:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    /* Output coefficient in natural (dezigzagged) order.
 3812              		.loc 1 1264 10 discriminator 1 view .LVU1244
 3813 01d3 29F9     		subl	%edi, %ecx
 3814              	.LVL470:
 3815              	.L361:
 3816              		.loc 1 1269 6 is_stmt 1 discriminator 4 view .LVU1245
 3817              		.loc 1 1269 33 is_stmt 0 discriminator 4 view .LVU1246
 3818 01d5 4963C4   		movslq	%r12d, %rax
 3819              		.loc 1 1269 38 discriminator 4 view .LVU1247
 3820 01d8 488D3D00 		leaq	jpeg_natural_order(%rip), %rdi
 3820      000000
 3821              	.LVL471:
1254:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3822              		.loc 1 1254 26 discriminator 4 view .LVU1248
 3823 01df 4183C401 		addl	$1, %r12d
 3824              	.LVL472:
 3825              		.loc 1 1269 38 discriminator 4 view .LVU1249
 3826 01e3 48630487 		movslq	(%rdi,%rax,4), %rax
 3827              		.loc 1 1269 40 discriminator 4 view .LVU1250
 3828 01e7 6641894C 		movw	%cx, 0(%r13,%rax,2)
 3828      4500
 3829              	.LVL473:
1254:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3830              		.loc 1 1254 25 is_stmt 1 discriminator 4 view .LVU1251
1254:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3831              		.loc 1 1254 9 discriminator 4 view .LVU1252
1254:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3832              		.loc 1 1254 2 is_stmt 0 discriminator 4 view .LVU1253
 3833 01ed 4539E6   		cmpl	%r12d, %r14d
 3834 01f0 7E59     		jle	.L421
 3835              	.LVL474:
 3836              	.L364:
 3837              	.LBB32:
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3838              		.loc 1 1255 4 is_stmt 1 view .LVU1254
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3839              		.loc 1 1255 4 view .LVU1255
 3840 01f2 83FA07   		cmpl	$7, %edx
 3841 01f5 0F8E3D02 		jle	.L422
 3841      0000
 3842              	.L356:
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3843              		.loc 1 1255 4 discriminator 6 view .LVU1256
 3844 01fb 8D4AF8   		leal	-8(%rdx), %ecx
 3845 01fe 4889F0   		movq	%rsi, %rax
 3846 0201 48D3F8   		sarq	%cl, %rax
 3847              	.LVL475:
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3848              		.loc 1 1255 4 discriminator 6 view .LVU1257
 3849 0204 0FB6C0   		movzbl	%al, %eax
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3850              		.loc 1 1255 4 is_stmt 0 discriminator 6 view .LVU1258
 3851 0207 418B8C87 		movl	288(%r15,%rax,4), %ecx
 3851      20010000 
 3852              	.LVL476:
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3853              		.loc 1 1255 4 discriminator 6 view .LVU1259
 3854 020f 85C9     		testl	%ecx, %ecx
 3855 0211 0F84F901 		je	.L381
 3855      0000
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3856              		.loc 1 1255 4 is_stmt 1 discriminator 8 view .LVU1260
 3857 0217 410FB684 		movzbl	1312(%r15,%rax), %eax
 3857      07200500 
 3857      00
 3858              	.LVL477:
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3859              		.loc 1 1255 4 is_stmt 0 discriminator 8 view .LVU1261
 3860 0220 29CA     		subl	%ecx, %edx
 3861              	.LVL478:
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3862              		.loc 1 1255 4 is_stmt 1 discriminator 8 view .LVU1262
 3863              	.L358:
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3864              		.loc 1 1255 4 is_stmt 0 discriminator 8 view .LVU1263
 3865              	.LBE32:
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3866              		.loc 1 1255 56 is_stmt 1 discriminator 14 view .LVU1264
1257:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s &= 15;
 3867              		.loc 1 1257 4 discriminator 14 view .LVU1265
1257:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  s &= 15;
 3868              		.loc 1 1257 6 is_stmt 0 discriminator 14 view .LVU1266
 3869 0222 4189C0   		movl	%eax, %r8d
 3870 0225 41C1F804 		sarl	$4, %r8d
 3871              	.LVL479:
1258:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 3872              		.loc 1 1258 4 is_stmt 1 discriminator 14 view .LVU1267
1260:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    k += r;
 3873              		.loc 1 1260 4 discriminator 14 view .LVU1268
1260:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    k += r;
 3874              		.loc 1 1260 7 is_stmt 0 discriminator 14 view .LVU1269
 3875 0229 83E00F   		andl	$15, %eax
 3876              	.LVL480:
1260:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    k += r;
 3877              		.loc 1 1260 7 discriminator 14 view .LVU1270
 3878 022c 89C3     		movl	%eax, %ebx
 3879 022e 0F856CFF 		jne	.L423
 3879      FFFF
1270:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  } else {
1271:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    if (r != 15)
 3880              		.loc 1 1271 6 is_stmt 1 view .LVU1271
 3881              		.loc 1 1271 9 is_stmt 0 view .LVU1272
 3882 0234 4183F80F 		cmpl	$15, %r8d
 3883 0238 0F856503 		jne	.L410
 3883      0000
1272:fltk-1.3.4-1/jpeg/jdhuff.c **** 	      goto EndOfBlock;
1273:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    k += 15;
 3884              		.loc 1 1273 6 is_stmt 1 view .LVU1273
 3885              		.loc 1 1273 8 is_stmt 0 view .LVU1274
 3886 023e 4183C40F 		addl	$15, %r12d
 3887              	.LVL481:
1254:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3888              		.loc 1 1254 25 is_stmt 1 view .LVU1275
1254:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3889              		.loc 1 1254 26 is_stmt 0 view .LVU1276
 3890 0242 4183C401 		addl	$1, %r12d
 3891              	.LVL482:
1254:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3892              		.loc 1 1254 9 is_stmt 1 view .LVU1277
1254:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3893              		.loc 1 1254 2 is_stmt 0 view .LVU1278
 3894 0246 4539E6   		cmpl	%r12d, %r14d
 3895 0249 7FA7     		jg	.L364
 3896              	.LVL483:
 3897              	.L421:
1254:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3898              		.loc 1 1254 2 view .LVU1279
 3899 024b 4D89FD   		movq	%r15, %r13
 3900              	.LVL484:
1254:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3901              		.loc 1 1254 2 view .LVU1280
 3902 024e 4589E7   		movl	%r12d, %r15d
 3903              	.LVL485:
1254:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 3904              		.loc 1 1254 2 view .LVU1281
 3905 0251 4C8B6424 		movq	32(%rsp), %r12
 3905      20
 3906              	.LVL486:
1274:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  }
1275:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
1276:fltk-1.3.4-1/jpeg/jdhuff.c ****       } else {
1277:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (s) {
1278:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
1279:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
1280:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
1281:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
1282:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1283:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Section F.2.2.2: decode the AC coefficients */
1284:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* In this path we just discard the values */
1285:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (; k < DCTSIZE2; k++) {
 3907              		.loc 1 1285 14 is_stmt 1 view .LVU1282
 3908              		.loc 1 1285 7 is_stmt 0 view .LVU1283
 3909 0256 4183FF3F 		cmpl	$63, %r15d
 3910 025a 7F5B     		jg	.L363
 3911              	.LVL487:
 3912 025c 0F1F4000 		.p2align 4,,10
 3913              		.p2align 3
 3914              	.L373:
 3915              	.LBB33:
1286:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 3916              		.loc 1 1286 2 is_stmt 1 view .LVU1284
 3917              		.loc 1 1286 2 view .LVU1285
 3918 0260 83FA07   		cmpl	$7, %edx
 3919 0263 0F8E5701 		jle	.L424
 3919      0000
 3920              	.L367:
 3921              		.loc 1 1286 2 discriminator 6 view .LVU1286
 3922 0269 8D4AF8   		leal	-8(%rdx), %ecx
 3923 026c 4889F0   		movq	%rsi, %rax
 3924 026f 48D3F8   		sarq	%cl, %rax
 3925              	.LVL488:
 3926              		.loc 1 1286 2 discriminator 6 view .LVU1287
 3927 0272 0FB6C0   		movzbl	%al, %eax
 3928              		.loc 1 1286 2 is_stmt 0 discriminator 6 view .LVU1288
 3929 0275 418B8C85 		movl	288(%r13,%rax,4), %ecx
 3929      20010000 
 3930              	.LVL489:
 3931              		.loc 1 1286 2 discriminator 6 view .LVU1289
 3932 027d 85C9     		testl	%ecx, %ecx
 3933 027f 0F840B01 		je	.L384
 3933      0000
 3934              		.loc 1 1286 2 is_stmt 1 discriminator 8 view .LVU1290
 3935 0285 410FB684 		movzbl	1312(%r13,%rax), %eax
 3935      05200500 
 3935      00
 3936              	.LVL490:
 3937              		.loc 1 1286 2 is_stmt 0 discriminator 8 view .LVU1291
 3938 028e 29CA     		subl	%ecx, %edx
 3939              	.LVL491:
 3940              		.loc 1 1286 2 is_stmt 1 discriminator 8 view .LVU1292
 3941              	.L369:
 3942              		.loc 1 1286 2 is_stmt 0 discriminator 8 view .LVU1293
 3943              	.LBE33:
 3944              		.loc 1 1286 54 is_stmt 1 discriminator 14 view .LVU1294
1287:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1288:fltk-1.3.4-1/jpeg/jdhuff.c **** 	r = s >> 4;
 3945              		.loc 1 1288 2 discriminator 14 view .LVU1295
 3946              		.loc 1 1288 4 is_stmt 0 discriminator 14 view .LVU1296
 3947 0290 89C1     		movl	%eax, %ecx
 3948 0292 C1F904   		sarl	$4, %ecx
 3949              	.LVL492:
1289:fltk-1.3.4-1/jpeg/jdhuff.c **** 	s &= 15;
 3950              		.loc 1 1289 2 is_stmt 1 discriminator 14 view .LVU1297
1290:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1291:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (s) {
 3951              		.loc 1 1291 2 discriminator 14 view .LVU1298
 3952              		.loc 1 1291 5 is_stmt 0 discriminator 14 view .LVU1299
 3953 0295 83E00F   		andl	$15, %eax
 3954              	.LVL493:
 3955              		.loc 1 1291 5 discriminator 14 view .LVU1300
 3956 0298 89C3     		movl	%eax, %ebx
 3957 029a 0F84D800 		je	.L370
 3957      0000
1292:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  k += r;
 3958              		.loc 1 1292 4 is_stmt 1 view .LVU1301
 3959              		.loc 1 1292 6 is_stmt 0 view .LVU1302
 3960 02a0 4101CF   		addl	%ecx, %r15d
 3961              	.LVL494:
1293:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 3962              		.loc 1 1293 4 is_stmt 1 view .LVU1303
 3963 02a3 39C2     		cmpl	%eax, %edx
 3964 02a5 0F8CA500 		jl	.L425
 3964      0000
 3965              	.LVL495:
 3966              	.L371:
 3967              		.loc 1 1293 47 discriminator 5 view .LVU1304
1294:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 3968              		.loc 1 1294 4 discriminator 5 view .LVU1305
 3969 02ab 29DA     		subl	%ebx, %edx
 3970              	.LVL496:
 3971              	.L372:
1285:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 3972              		.loc 1 1285 28 view .LVU1306
1285:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 3973              		.loc 1 1285 29 is_stmt 0 view .LVU1307
 3974 02ad 4183C701 		addl	$1, %r15d
 3975              	.LVL497:
1285:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 3976              		.loc 1 1285 14 is_stmt 1 view .LVU1308
1285:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 3977              		.loc 1 1285 7 is_stmt 0 view .LVU1309
 3978 02b1 4183FF3F 		cmpl	$63, %r15d
 3979 02b5 7EA9     		jle	.L373
 3980              	.LVL498:
 3981              	.L363:
1295:fltk-1.3.4-1/jpeg/jdhuff.c **** 	} else {
1296:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (r != 15)
1297:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    break;
1298:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  k += 15;
1299:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
1300:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
1301:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1302:fltk-1.3.4-1/jpeg/jdhuff.c ****       EndOfBlock: ;
 3982              		.loc 1 1302 19 is_stmt 1 discriminator 2 view .LVU1310
 3983              	.LBE37:
1224:fltk-1.3.4-1/jpeg/jdhuff.c ****       JBLOCKROW block = MCU_data[blkn];
 3984              		.loc 1 1224 49 discriminator 2 view .LVU1311
1224:fltk-1.3.4-1/jpeg/jdhuff.c ****       JBLOCKROW block = MCU_data[blkn];
 3985              		.loc 1 1224 20 discriminator 2 view .LVU1312
1224:fltk-1.3.4-1/jpeg/jdhuff.c ****       JBLOCKROW block = MCU_data[blkn];
 3986              		.loc 1 1224 5 is_stmt 0 discriminator 2 view .LVU1313
 3987 02b7 488B4424 		movq	8(%rsp), %rax
 3987      08
 3988 02bc 4983C401 		addq	$1, %r12
 3989              	.LVL499:
1224:fltk-1.3.4-1/jpeg/jdhuff.c ****       JBLOCKROW block = MCU_data[blkn];
 3990              		.loc 1 1224 5 discriminator 2 view .LVU1314
 3991 02c0 4439A0F0 		cmpl	%r12d, 496(%rax)
 3991      010000
 3992 02c7 0F8FEAFD 		jg	.L374
 3992      FFFF
1224:fltk-1.3.4-1/jpeg/jdhuff.c ****       JBLOCKROW block = MCU_data[blkn];
 3993              		.loc 1 1224 5 discriminator 2 view .LVU1315
 3994 02cd 4C8B6C24 		movq	16(%rsp), %r13
 3994      10
 3995 02d2 488B4028 		movq	40(%rax), %rax
 3996 02d6 488B4C24 		movq	48(%rsp), %rcx
 3996      30
 3997              	.LVL500:
 3998              	.L347:
1303:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1304:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1305:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Completed MCU, so update state */
1306:fltk-1.3.4-1/jpeg/jdhuff.c ****     BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 3999              		.loc 1 1306 5 is_stmt 1 view .LVU1316
 4000 02db 488908   		movq	%rcx, (%rax)
 4001              		.loc 1 1306 5 view .LVU1317
 4002 02de 488B4424 		movq	8(%rsp), %rax
 4002      08
 4003 02e3 488B4C24 		movq	56(%rsp), %rcx
 4003      38
 4004 02e8 488B4028 		movq	40(%rax), %rax
 4005 02ec 48894808 		movq	%rcx, 8(%rax)
 4006              		.loc 1 1306 5 view .LVU1318
1307:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(entropy->saved, state);
 4007              		.loc 1 1307 5 is_stmt 0 view .LVU1319
 4008 02f0 8B44242C 		movl	44(%rsp), %eax
1306:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(entropy->saved, state);
 4009              		.loc 1 1306 5 view .LVU1320
 4010 02f4 49897518 		movq	%rsi, 24(%r13)
1306:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(entropy->saved, state);
 4011              		.loc 1 1306 5 is_stmt 1 view .LVU1321
 4012              		.loc 1 1307 5 is_stmt 0 view .LVU1322
 4013 02f8 89442460 		movl	%eax, 96(%rsp)
 4014 02fc 8B442470 		movl	112(%rsp), %eax
 4015 0300 660F6F4C 		movdqa	96(%rsp), %xmm1
 4015      2460
1306:fltk-1.3.4-1/jpeg/jdhuff.c ****     ASSIGN_STATE(entropy->saved, state);
 4016              		.loc 1 1306 5 view .LVU1323
 4017 0306 41895520 		movl	%edx, 32(%r13)
 4018              		.loc 1 1307 5 is_stmt 1 view .LVU1324
 4019              	.LVL501:
 4020              		.loc 1 1307 5 is_stmt 0 view .LVU1325
 4021 030a 41894538 		movl	%eax, 56(%r13)
 4022 030e 410F114D 		movups	%xmm1, 40(%r13)
 4022      28
 4023              	.LVL502:
 4024              		.p2align 4,,10
 4025 0313 0F1F4400 		.p2align 3
 4025      00
 4026              	.L344:
1308:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
1309:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1310:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Account for restart interval (no-op if not using restarts) */
1311:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->restarts_to_go--;
 4027              		.loc 1 1311 3 is_stmt 1 view .LVU1326
 4028              		.loc 1 1311 26 is_stmt 0 view .LVU1327
 4029 0318 41836D40 		subl	$1, 64(%r13)
 4029      01
1312:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1313:fltk-1.3.4-1/jpeg/jdhuff.c ****   return TRUE;
 4030              		.loc 1 1313 3 is_stmt 1 view .LVU1328
 4031              		.loc 1 1313 10 is_stmt 0 view .LVU1329
 4032 031d B8010000 		movl	$1, %eax
 4032      00
 4033              	.L341:
1314:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 4034              		.loc 1 1314 1 view .LVU1330
 4035 0322 488B7C24 		movq	120(%rsp), %rdi
 4035      78
 4036 0327 6448333C 		xorq	%fs:40, %rdi
 4036      25280000 
 4036      00
 4037 0330 0F857702 		jne	.L426
 4037      0000
 4038 0336 4881C488 		addq	$136, %rsp
 4038      000000
 4039              		.cfi_remember_state
 4040              		.cfi_def_cfa_offset 56
 4041 033d 5B       		popq	%rbx
 4042              		.cfi_def_cfa_offset 48
 4043 033e 5D       		popq	%rbp
 4044              		.cfi_def_cfa_offset 40
 4045 033f 415C     		popq	%r12
 4046              		.cfi_def_cfa_offset 32
 4047 0341 415D     		popq	%r13
 4048              		.cfi_def_cfa_offset 24
 4049 0343 415E     		popq	%r14
 4050              		.cfi_def_cfa_offset 16
 4051 0345 415F     		popq	%r15
 4052              		.cfi_def_cfa_offset 8
 4053 0347 C3       		ret
 4054              	.LVL503:
 4055 0348 0F1F8400 		.p2align 4,,10
 4055      00000000 
 4056              		.p2align 3
 4057              	.L425:
 4058              		.cfi_restore_state
 4059              	.LBB38:
1293:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 4060              		.loc 1 1293 4 is_stmt 1 discriminator 1 view .LVU1331
 4061 0350 488D6C24 		leaq	48(%rsp), %rbp
 4061      30
 4062 0355 89C1     		movl	%eax, %ecx
 4063              	.LVL504:
1293:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 4064              		.loc 1 1293 4 is_stmt 0 discriminator 1 view .LVU1332
 4065 0357 4889EF   		movq	%rbp, %rdi
 4066 035a E8000000 		call	jpeg_fill_bit_buffer
 4066      00
 4067              	.LVL505:
1293:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 4068              		.loc 1 1293 4 discriminator 1 view .LVU1333
 4069 035f 85C0     		testl	%eax, %eax
 4070 0361 0F849900 		je	.L349
 4070      0000
1293:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 4071              		.loc 1 1293 4 is_stmt 1 discriminator 4 view .LVU1334
 4072 0367 488B7424 		movq	64(%rsp), %rsi
 4072      40
 4073              	.LVL506:
1293:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 4074              		.loc 1 1293 4 discriminator 4 view .LVU1335
 4075 036c 8B542448 		movl	72(%rsp), %edx
 4076              	.LVL507:
1293:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 4077              		.loc 1 1293 4 is_stmt 0 discriminator 4 view .LVU1336
 4078 0370 E936FFFF 		jmp	.L371
 4078      FF
 4079              	.LVL508:
 4080              		.p2align 4,,10
 4081 0375 0F1F00   		.p2align 3
 4082              	.L370:
1296:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    break;
 4083              		.loc 1 1296 4 is_stmt 1 view .LVU1337
1296:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    break;
 4084              		.loc 1 1296 7 is_stmt 0 view .LVU1338
 4085 0378 83F90F   		cmpl	$15, %ecx
 4086 037b 0F8536FF 		jne	.L363
 4086      FFFF
1298:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 4087              		.loc 1 1298 4 is_stmt 1 view .LVU1339
1298:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 4088              		.loc 1 1298 6 is_stmt 0 view .LVU1340
 4089 0381 4183C70F 		addl	$15, %r15d
 4090              	.LVL509:
1298:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 4091              		.loc 1 1298 6 view .LVU1341
 4092 0385 E923FFFF 		jmp	.L372
 4092      FF
 4093              	.LVL510:
 4094 038a 660F1F44 		.p2align 4,,10
 4094      0000
 4095              		.p2align 3
 4096              	.L384:
 4097              	.L368:
1298:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 4098              		.loc 1 1298 6 view .LVU1342
 4099 0390 F30F1EFA 		endbr64
 4100 0394 488D6C24 		leaq	48(%rsp), %rbp
 4100      30
 4101              	.LBB34:
1286:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4102              		.loc 1 1286 2 view .LVU1343
 4103 0399 41B80900 		movl	$9, %r8d
 4103      0000
 4104              	.LVL511:
1286:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4105              		.loc 1 1286 2 is_stmt 1 view .LVU1344
 4106 039f 4C89E9   		movq	%r13, %rcx
 4107 03a2 4889EF   		movq	%rbp, %rdi
 4108 03a5 E8000000 		call	jpeg_huff_decode
 4108      00
 4109              	.LVL512:
1286:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4110              		.loc 1 1286 2 is_stmt 0 view .LVU1345
 4111 03aa 85C0     		testl	%eax, %eax
 4112 03ac 7852     		js	.L349
 4113              	.LVL513:
 4114              	.L427:
1286:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4115              		.loc 1 1286 2 is_stmt 1 discriminator 13 view .LVU1346
 4116 03ae 488B7424 		movq	64(%rsp), %rsi
 4116      40
 4117              	.LVL514:
1286:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4118              		.loc 1 1286 2 discriminator 13 view .LVU1347
 4119 03b3 8B542448 		movl	72(%rsp), %edx
 4120              	.LVL515:
1286:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4121              		.loc 1 1286 2 is_stmt 0 discriminator 13 view .LVU1348
 4122 03b7 E9D4FEFF 		jmp	.L369
 4122      FF
 4123              	.LVL516:
 4124 03bc 0F1F4000 		.p2align 4,,10
 4125              		.p2align 3
 4126              	.L424:
1286:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4127              		.loc 1 1286 2 is_stmt 1 discriminator 1 view .LVU1349
 4128 03c0 488D6C24 		leaq	48(%rsp), %rbp
 4128      30
 4129 03c5 31C9     		xorl	%ecx, %ecx
 4130 03c7 4889EF   		movq	%rbp, %rdi
 4131 03ca E8000000 		call	jpeg_fill_bit_buffer
 4131      00
 4132              	.LVL517:
1286:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4133              		.loc 1 1286 2 is_stmt 0 discriminator 1 view .LVU1350
 4134 03cf 85C0     		testl	%eax, %eax
 4135 03d1 742D     		je	.L349
1286:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4136              		.loc 1 1286 2 is_stmt 1 discriminator 4 view .LVU1351
 4137 03d3 8B542448 		movl	72(%rsp), %edx
 4138 03d7 488B7424 		movq	64(%rsp), %rsi
 4138      40
 4139              	.LVL518:
1286:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4140              		.loc 1 1286 2 discriminator 4 view .LVU1352
1286:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4141              		.loc 1 1286 2 discriminator 4 view .LVU1353
 4142 03dc 83FA07   		cmpl	$7, %edx
 4143 03df 0F8F84FE 		jg	.L367
 4143      FFFF
1286:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4144              		.loc 1 1286 2 is_stmt 0 view .LVU1354
 4145 03e5 41B80100 		movl	$1, %r8d
 4145      0000
 4146              	.LVL519:
1286:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4147              		.loc 1 1286 2 is_stmt 1 view .LVU1355
 4148 03eb 4C89E9   		movq	%r13, %rcx
 4149 03ee 4889EF   		movq	%rbp, %rdi
 4150 03f1 E8000000 		call	jpeg_huff_decode
 4150      00
 4151              	.LVL520:
1286:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4152              		.loc 1 1286 2 is_stmt 0 view .LVU1356
 4153 03f6 85C0     		testl	%eax, %eax
 4154 03f8 79B4     		jns	.L427
 4155              	.LVL521:
 4156 03fa 660F1F44 		.p2align 4,,10
 4156      0000
 4157              		.p2align 3
 4158              	.L349:
1286:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4159              		.loc 1 1286 2 view .LVU1357
 4160              	.LBE34:
 4161              	.LBE38:
1210:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 4162              		.loc 1 1210 9 view .LVU1358
 4163 0400 31C0     		xorl	%eax, %eax
 4164 0402 E91BFFFF 		jmp	.L341
 4164      FF
 4165              	.LVL522:
 4166 0407 660F1F84 		.p2align 4,,10
 4166      00000000 
 4166      00
 4167              		.p2align 3
 4168              	.L381:
 4169              	.LBB39:
 4170              	.LBB35:
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4171              		.loc 1 1255 4 view .LVU1359
 4172 0410 41B80900 		movl	$9, %r8d
 4172      0000
 4173              	.LVL523:
 4174              	.L357:
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4175              		.loc 1 1255 4 is_stmt 1 discriminator 11 view .LVU1360
 4176 0416 4C89F9   		movq	%r15, %rcx
 4177 0419 4889EF   		movq	%rbp, %rdi
 4178 041c E8000000 		call	jpeg_huff_decode
 4178      00
 4179              	.LVL524:
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4180              		.loc 1 1255 4 is_stmt 0 discriminator 11 view .LVU1361
 4181 0421 85C0     		testl	%eax, %eax
 4182 0423 78DB     		js	.L349
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4183              		.loc 1 1255 4 is_stmt 1 discriminator 13 view .LVU1362
 4184 0425 488B7424 		movq	64(%rsp), %rsi
 4184      40
 4185              	.LVL525:
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4186              		.loc 1 1255 4 discriminator 13 view .LVU1363
 4187 042a 8B542448 		movl	72(%rsp), %edx
 4188              	.LVL526:
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4189              		.loc 1 1255 4 is_stmt 0 discriminator 13 view .LVU1364
 4190 042e E9EFFDFF 		jmp	.L358
 4190      FF
 4191              	.LVL527:
 4192              		.p2align 4,,10
 4193 0433 0F1F4400 		.p2align 3
 4193      00
 4194              	.L422:
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4195              		.loc 1 1255 4 is_stmt 1 discriminator 1 view .LVU1365
 4196 0438 31C9     		xorl	%ecx, %ecx
 4197 043a 4889EF   		movq	%rbp, %rdi
 4198 043d E8000000 		call	jpeg_fill_bit_buffer
 4198      00
 4199              	.LVL528:
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4200              		.loc 1 1255 4 is_stmt 0 discriminator 1 view .LVU1366
 4201 0442 85C0     		testl	%eax, %eax
 4202 0444 74BA     		je	.L349
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4203              		.loc 1 1255 4 is_stmt 1 discriminator 4 view .LVU1367
 4204 0446 8B542448 		movl	72(%rsp), %edx
 4205 044a 488B7424 		movq	64(%rsp), %rsi
 4205      40
 4206              	.LVL529:
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4207              		.loc 1 1255 4 discriminator 4 view .LVU1368
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4208              		.loc 1 1255 4 discriminator 4 view .LVU1369
 4209 044f 83FA07   		cmpl	$7, %edx
 4210 0452 0F8FA3FD 		jg	.L356
 4210      FFFF
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4211              		.loc 1 1255 4 is_stmt 0 view .LVU1370
 4212 0458 41B80100 		movl	$1, %r8d
 4212      0000
 4213 045e EBB6     		jmp	.L357
 4214              	.LVL530:
 4215              		.p2align 4,,10
 4216              		.p2align 3
 4217              	.L420:
1255:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4218              		.loc 1 1255 4 view .LVU1371
 4219              	.LBE35:
1262:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 4220              		.loc 1 1262 6 is_stmt 1 discriminator 1 view .LVU1372
 4221 0460 89C1     		movl	%eax, %ecx
 4222 0462 4889EF   		movq	%rbp, %rdi
 4223 0465 E8000000 		call	jpeg_fill_bit_buffer
 4223      00
 4224              	.LVL531:
1262:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 4225              		.loc 1 1262 6 is_stmt 0 discriminator 1 view .LVU1373
 4226 046a 85C0     		testl	%eax, %eax
 4227 046c 7492     		je	.L349
1262:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 4228              		.loc 1 1262 6 is_stmt 1 discriminator 4 view .LVU1374
 4229 046e 488B7424 		movq	64(%rsp), %rsi
 4229      40
 4230              	.LVL532:
1262:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 4231              		.loc 1 1262 6 discriminator 4 view .LVU1375
 4232 0473 8B542448 		movl	72(%rsp), %edx
 4233              	.LVL533:
1262:fltk-1.3.4-1/jpeg/jdhuff.c **** 	    r = GET_BITS(s);
 4234              		.loc 1 1262 6 is_stmt 0 discriminator 4 view .LVU1376
 4235 0477 E92FFDFF 		jmp	.L360
 4235      FF
 4236              	.LVL534:
 4237 047c 0F1F4000 		.p2align 4,,10
 4238              		.p2align 3
 4239              	.L352:
1277:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 4240              		.loc 1 1277 2 is_stmt 1 view .LVU1377
1277:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 4241              		.loc 1 1277 5 is_stmt 0 view .LVU1378
 4242 0480 4585FF   		testl	%r15d, %r15d
 4243 0483 0F84B700 		je	.L382
 4243      0000
1278:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 4244              		.loc 1 1278 4 is_stmt 1 view .LVU1379
 4245 0489 4439FA   		cmpl	%r15d, %edx
 4246 048c 0F8CEB00 		jl	.L428
 4246      0000
 4247              	.L366:
1278:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 4248              		.loc 1 1278 47 discriminator 5 view .LVU1380
1279:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 4249              		.loc 1 1279 4 discriminator 5 view .LVU1381
 4250 0492 4429FA   		subl	%r15d, %edx
 4251              	.LVL535:
1285:fltk-1.3.4-1/jpeg/jdhuff.c **** 	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 4252              		.loc 1 1285 14 discriminator 5 view .LVU1382
1237:fltk-1.3.4-1/jpeg/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 4253              		.loc 1 1237 9 is_stmt 0 discriminator 5 view .LVU1383
 4254 0495 41BF0100 		movl	$1, %r15d
 4254      0000
 4255              	.LVL536:
1237:fltk-1.3.4-1/jpeg/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 4256              		.loc 1 1237 9 discriminator 5 view .LVU1384
 4257 049b E9C0FDFF 		jmp	.L373
 4257      FF
 4258              	.LVL537:
 4259              		.p2align 4,,10
 4260              		.p2align 3
 4261              	.L377:
 4262              	.LBB36:
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4263              		.loc 1 1234 7 view .LVU1385
 4264 04a0 41B80900 		movl	$9, %r8d
 4264      0000
 4265 04a6 488D6C24 		leaq	48(%rsp), %rbp
 4265      30
 4266              	.LVL538:
 4267              	.L350:
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4268              		.loc 1 1234 7 is_stmt 1 discriminator 11 view .LVU1386
 4269 04ab 4C89E9   		movq	%r13, %rcx
 4270 04ae 4889EF   		movq	%rbp, %rdi
 4271 04b1 E8000000 		call	jpeg_huff_decode
 4271      00
 4272              	.LVL539:
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4273              		.loc 1 1234 7 is_stmt 0 discriminator 11 view .LVU1387
 4274 04b6 4189C7   		movl	%eax, %r15d
 4275              	.LVL540:
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4276              		.loc 1 1234 7 discriminator 11 view .LVU1388
 4277 04b9 85C0     		testl	%eax, %eax
 4278 04bb 0F883FFF 		js	.L349
 4278      FFFF
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4279              		.loc 1 1234 7 is_stmt 1 discriminator 13 view .LVU1389
 4280 04c1 488B7424 		movq	64(%rsp), %rsi
 4280      40
 4281              	.LVL541:
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4282              		.loc 1 1234 7 discriminator 13 view .LVU1390
 4283 04c6 8B542448 		movl	72(%rsp), %edx
 4284              	.LVL542:
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4285              		.loc 1 1234 7 is_stmt 0 discriminator 13 view .LVU1391
 4286 04ca E92EFCFF 		jmp	.L351
 4286      FF
 4287              	.LVL543:
 4288 04cf 90       		.p2align 4,,10
 4289              		.p2align 3
 4290              	.L417:
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4291              		.loc 1 1234 7 is_stmt 1 discriminator 1 view .LVU1392
 4292 04d0 488D6C24 		leaq	48(%rsp), %rbp
 4292      30
 4293 04d5 31C9     		xorl	%ecx, %ecx
 4294 04d7 4889EF   		movq	%rbp, %rdi
 4295 04da E8000000 		call	jpeg_fill_bit_buffer
 4295      00
 4296              	.LVL544:
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4297              		.loc 1 1234 7 is_stmt 0 discriminator 1 view .LVU1393
 4298 04df 85C0     		testl	%eax, %eax
 4299 04e1 0F8419FF 		je	.L349
 4299      FFFF
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4300              		.loc 1 1234 7 is_stmt 1 discriminator 4 view .LVU1394
 4301 04e7 8B542448 		movl	72(%rsp), %edx
 4302 04eb 488B7424 		movq	64(%rsp), %rsi
 4302      40
 4303              	.LVL545:
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4304              		.loc 1 1234 7 discriminator 4 view .LVU1395
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4305              		.loc 1 1234 7 discriminator 4 view .LVU1396
 4306 04f0 83FA07   		cmpl	$7, %edx
 4307 04f3 0F8FDDFB 		jg	.L348
 4307      FFFF
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4308              		.loc 1 1234 7 is_stmt 0 view .LVU1397
 4309 04f9 41B80100 		movl	$1, %r8d
 4309      0000
 4310 04ff EBAA     		jmp	.L350
 4311              	.LVL546:
 4312              		.p2align 4,,10
 4313 0501 0F1F8000 		.p2align 3
 4313      000000
 4314              	.L416:
1234:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4315              		.loc 1 1234 7 view .LVU1398
 4316              	.LBE36:
 4317              	.LBE39:
1209:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 4318              		.loc 1 1209 7 is_stmt 1 view .LVU1399
1209:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 4319              		.loc 1 1209 13 is_stmt 0 view .LVU1400
 4320 0508 488B7C24 		movq	8(%rsp), %rdi
 4320      08
 4321 050d E8000000 		call	process_restart
 4321      00
 4322              	.LVL547:
1209:fltk-1.3.4-1/jpeg/jdhuff.c **** 	return FALSE;
 4323              		.loc 1 1209 10 view .LVU1401
 4324 0512 85C0     		testl	%eax, %eax
 4325 0514 0F84E6FE 		je	.L349
 4325      FFFF
1216:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4326              		.loc 1 1216 3 is_stmt 1 view .LVU1402
1216:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4327              		.loc 1 1216 6 is_stmt 0 view .LVU1403
 4328 051a 458B4D3C 		movl	60(%r13), %r9d
 4329 051e 4585C9   		testl	%r9d, %r9d
 4330 0521 0F8438FB 		je	.L343
 4330      FFFF
 4331 0527 E9ECFDFF 		jmp	.L344
 4331      FF
 4332              	.LVL548:
 4333 052c 0F1F4000 		.p2align 4,,10
 4334              		.p2align 3
 4335              	.L419:
 4336              	.LBB40:
1244:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 4337              		.loc 1 1244 8 discriminator 1 view .LVU1404
 4338 0530 29F9     		subl	%edi, %ecx
 4339              	.LVL549:
1244:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 4340              		.loc 1 1244 8 discriminator 1 view .LVU1405
 4341 0532 E924FCFF 		jmp	.L353
 4341      FF
 4342              	.LVL550:
 4343 0537 660F1F84 		.p2align 4,,10
 4343      00000000 
 4343      00
 4344              		.p2align 3
 4345              	.L382:
1237:fltk-1.3.4-1/jpeg/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 4346              		.loc 1 1237 9 view .LVU1406
 4347 0540 41BF0100 		movl	$1, %r15d
 4347      0000
 4348              	.LVL551:
1237:fltk-1.3.4-1/jpeg/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 4349              		.loc 1 1237 9 view .LVU1407
 4350 0546 E915FDFF 		jmp	.L373
 4350      FF
 4351              	.LVL552:
 4352 054b 0F1F4400 		.p2align 4,,10
 4352      00
 4353              		.p2align 3
 4354              	.L378:
1237:fltk-1.3.4-1/jpeg/jdhuff.c ****       coef_limit = entropy->coef_limit[blkn];
 4355              		.loc 1 1237 9 view .LVU1408
 4356 0550 31C9     		xorl	%ecx, %ecx
 4357 0552 E904FCFF 		jmp	.L353
 4357      FF
 4358              	.L418:
1242:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 4359              		.loc 1 1242 4 is_stmt 1 discriminator 1 view .LVU1409
 4360 0557 488D6C24 		leaq	48(%rsp), %rbp
 4360      30
 4361 055c 4489F9   		movl	%r15d, %ecx
 4362 055f 4889EF   		movq	%rbp, %rdi
 4363 0562 E8000000 		call	jpeg_fill_bit_buffer
 4363      00
 4364              	.LVL553:
1242:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 4365              		.loc 1 1242 4 is_stmt 0 discriminator 1 view .LVU1410
 4366 0567 85C0     		testl	%eax, %eax
 4367 0569 0F8491FE 		je	.L349
 4367      FFFF
1242:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 4368              		.loc 1 1242 4 is_stmt 1 discriminator 4 view .LVU1411
 4369 056f 488B7424 		movq	64(%rsp), %rsi
 4369      40
 4370              	.LVL554:
1242:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 4371              		.loc 1 1242 4 discriminator 4 view .LVU1412
 4372 0574 8B542448 		movl	72(%rsp), %edx
 4373              	.LVL555:
1242:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  r = GET_BITS(s);
 4374              		.loc 1 1242 4 is_stmt 0 discriminator 4 view .LVU1413
 4375 0578 E9AFFBFF 		jmp	.L354
 4375      FF
 4376              	.L428:
1278:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 4377              		.loc 1 1278 4 is_stmt 1 discriminator 1 view .LVU1414
 4378 057d 488D6C24 		leaq	48(%rsp), %rbp
 4378      30
 4379 0582 4489F9   		movl	%r15d, %ecx
 4380 0585 4889EF   		movq	%rbp, %rdi
 4381 0588 E8000000 		call	jpeg_fill_bit_buffer
 4381      00
 4382              	.LVL556:
1278:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 4383              		.loc 1 1278 4 is_stmt 0 discriminator 1 view .LVU1415
 4384 058d 85C0     		testl	%eax, %eax
 4385 058f 0F846BFE 		je	.L349
 4385      FFFF
1278:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 4386              		.loc 1 1278 4 is_stmt 1 discriminator 4 view .LVU1416
 4387 0595 488B7424 		movq	64(%rsp), %rsi
 4387      40
 4388              	.LVL557:
1278:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 4389              		.loc 1 1278 4 discriminator 4 view .LVU1417
 4390 059a 8B542448 		movl	72(%rsp), %edx
 4391              	.LVL558:
1278:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 4392              		.loc 1 1278 4 is_stmt 0 discriminator 4 view .LVU1418
 4393 059e E9EFFEFF 		jmp	.L366
 4393      FF
 4394              	.LVL559:
 4395              	.L410:
1278:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 4396              		.loc 1 1278 4 discriminator 4 view .LVU1419
 4397 05a3 4C8B6424 		movq	32(%rsp), %r12
 4397      20
 4398              	.LVL560:
1278:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 4399              		.loc 1 1278 4 discriminator 4 view .LVU1420
 4400 05a8 E90AFDFF 		jmp	.L363
 4400      FF
 4401              	.LVL561:
 4402              	.L426:
1278:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  DROP_BITS(s);
 4403              		.loc 1 1278 4 discriminator 4 view .LVU1421
 4404              	.LBE40:
 4405              		.loc 1 1314 1 view .LVU1422
 4406 05ad E8000000 		call	__stack_chk_fail@PLT
 4406      00
 4407              	.LVL562:
 4408              		.cfi_endproc
 4409              	.LFE61:
 4411              		.section	.text.jpeg_make_d_derived_tbl,"ax",@progbits
 4412              		.p2align 4
 4414              	jpeg_make_d_derived_tbl:
 4415              	.LVL563:
 4416              	.LFB51:
 325:fltk-1.3.4-1/jpeg/jdhuff.c ****   JHUFF_TBL *htbl;
 4417              		.loc 1 325 1 is_stmt 1 view -0
 4418              		.cfi_startproc
 325:fltk-1.3.4-1/jpeg/jdhuff.c ****   JHUFF_TBL *htbl;
 4419              		.loc 1 325 1 is_stmt 0 view .LVU1424
 4420 0000 4157     		pushq	%r15
 4421              		.cfi_def_cfa_offset 16
 4422              		.cfi_offset 15, -16
 4423 0002 4156     		pushq	%r14
 4424              		.cfi_def_cfa_offset 24
 4425              		.cfi_offset 14, -24
 4426 0004 4155     		pushq	%r13
 4427              		.cfi_def_cfa_offset 32
 4428              		.cfi_offset 13, -32
 4429 0006 4989CD   		movq	%rcx, %r13
 4430 0009 4154     		pushq	%r12
 4431              		.cfi_def_cfa_offset 40
 4432              		.cfi_offset 12, -40
 4433 000b 4189D4   		movl	%edx, %r12d
 4434 000e 55       		pushq	%rbp
 4435              		.cfi_def_cfa_offset 48
 4436              		.cfi_offset 6, -48
 4437 000f 4889FD   		movq	%rdi, %rbp
 4438 0012 53       		pushq	%rbx
 4439              		.cfi_def_cfa_offset 56
 4440              		.cfi_offset 3, -56
 4441 0013 4881EC58 		subq	$1368, %rsp
 4441      050000
 4442              		.cfi_def_cfa_offset 1424
 325:fltk-1.3.4-1/jpeg/jdhuff.c ****   JHUFF_TBL *htbl;
 4443              		.loc 1 325 1 view .LVU1425
 4444 001a 89742420 		movl	%esi, 32(%rsp)
 4445 001e 64488B04 		movq	%fs:40, %rax
 4445      25280000 
 4445      00
 4446 0027 48898424 		movq	%rax, 1352(%rsp)
 4446      48050000 
 4447 002f 31C0     		xorl	%eax, %eax
 326:fltk-1.3.4-1/jpeg/jdhuff.c ****   d_derived_tbl *dtbl;
 4448              		.loc 1 326 3 is_stmt 1 view .LVU1426
 327:fltk-1.3.4-1/jpeg/jdhuff.c ****   int p, i, l, si, numsymbols;
 4449              		.loc 1 327 3 view .LVU1427
 328:fltk-1.3.4-1/jpeg/jdhuff.c ****   int lookbits, ctr;
 4450              		.loc 1 328 3 view .LVU1428
 329:fltk-1.3.4-1/jpeg/jdhuff.c ****   char huffsize[257];
 4451              		.loc 1 329 3 view .LVU1429
 330:fltk-1.3.4-1/jpeg/jdhuff.c ****   unsigned int huffcode[257];
 4452              		.loc 1 330 3 view .LVU1430
 331:fltk-1.3.4-1/jpeg/jdhuff.c ****   unsigned int code;
 4453              		.loc 1 331 3 view .LVU1431
 332:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4454              		.loc 1 332 3 view .LVU1432
 339:fltk-1.3.4-1/jpeg/jdhuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 4455              		.loc 1 339 3 view .LVU1433
 339:fltk-1.3.4-1/jpeg/jdhuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 4456              		.loc 1 339 6 is_stmt 0 view .LVU1434
 4457 0031 83FA03   		cmpl	$3, %edx
 4458 0034 7615     		jbe	.L430
 340:fltk-1.3.4-1/jpeg/jdhuff.c ****   htbl =
 4459              		.loc 1 340 5 is_stmt 1 view .LVU1435
 4460 0036 488B07   		movq	(%rdi), %rax
 4461 0039 C7402834 		movl	$52, 40(%rax)
 4461      000000
 4462 0040 488B07   		movq	(%rdi), %rax
 4463 0043 89502C   		movl	%edx, 44(%rax)
 4464 0046 488B07   		movq	(%rdi), %rax
 4465 0049 FF10     		call	*(%rax)
 4466              	.LVL564:
 4467              	.L430:
 341:fltk-1.3.4-1/jpeg/jdhuff.c ****     isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 4468              		.loc 1 341 3 view .LVU1436
 342:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (htbl == NULL)
 4469              		.loc 1 342 43 is_stmt 0 view .LVU1437
 4470 004b 8B542420 		movl	32(%rsp), %edx
 4471 004f 4963C4   		movslq	%r12d, %rax
 4472 0052 85D2     		testl	%edx, %edx
 4473 0054 0F848503 		je	.L431
 4473      0000
 342:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (htbl == NULL)
 4474              		.loc 1 342 43 discriminator 1 view .LVU1438
 4475 005a 488B9CC5 		movq	232(%rbp,%rax,8), %rbx
 4475      E8000000 
 4476              	.LVL565:
 343:fltk-1.3.4-1/jpeg/jdhuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 4477              		.loc 1 343 3 is_stmt 1 discriminator 1 view .LVU1439
 343:fltk-1.3.4-1/jpeg/jdhuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 4478              		.loc 1 343 6 is_stmt 0 discriminator 1 view .LVU1440
 4479 0062 4885DB   		testq	%rbx, %rbx
 4480 0065 0F848503 		je	.L485
 4480      0000
 4481              	.LVL566:
 4482              	.L433:
 347:fltk-1.3.4-1/jpeg/jdhuff.c ****     *pdtbl = (d_derived_tbl *)
 4483              		.loc 1 347 3 is_stmt 1 view .LVU1441
 347:fltk-1.3.4-1/jpeg/jdhuff.c ****     *pdtbl = (d_derived_tbl *)
 4484              		.loc 1 347 7 is_stmt 0 view .LVU1442
 4485 006b 4D8B6500 		movq	0(%r13), %r12
 4486              	.LVL567:
 347:fltk-1.3.4-1/jpeg/jdhuff.c ****     *pdtbl = (d_derived_tbl *)
 4487              		.loc 1 347 6 view .LVU1443
 4488 006f 4D85E4   		testq	%r12, %r12
 4489 0072 0F84A103 		je	.L486
 4489      0000
 4490              	.LVL568:
 4491              	.L434:
 351:fltk-1.3.4-1/jpeg/jdhuff.c ****   dtbl->pub = htbl;		/* fill in back link */
 4492              		.loc 1 351 3 is_stmt 1 view .LVU1444
 352:fltk-1.3.4-1/jpeg/jdhuff.c ****   
 4493              		.loc 1 352 3 view .LVU1445
 4494 0078 488D8424 		leaq	1088(%rsp), %rax
 4494      40040000 
 4495 0080 4C896424 		movq	%r12, 8(%rsp)
 4495      08
 358:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (i < 0 || p + i > 256)	/* protect against table overrun */
 4496              		.loc 1 358 7 is_stmt 0 view .LVU1446
 4497 0085 41BF0100 		movl	$1, %r15d
 4497      0000
 356:fltk-1.3.4-1/jpeg/jdhuff.c ****   for (l = 1; l <= 16; l++) {
 4498              		.loc 1 356 5 view .LVU1447
 4499 008b 4531ED   		xorl	%r13d, %r13d
 4500              	.LVL569:
 352:fltk-1.3.4-1/jpeg/jdhuff.c ****   
 4501              		.loc 1 352 13 view .LVU1448
 4502 008e 49899C24 		movq	%rbx, 280(%r12)
 4502      18010000 
 4503              	.LVL570:
 356:fltk-1.3.4-1/jpeg/jdhuff.c ****   for (l = 1; l <= 16; l++) {
 4504              		.loc 1 356 3 is_stmt 1 view .LVU1449
 357:fltk-1.3.4-1/jpeg/jdhuff.c ****     i = (int) htbl->bits[l];
 4505              		.loc 1 357 3 view .LVU1450
 357:fltk-1.3.4-1/jpeg/jdhuff.c ****     i = (int) htbl->bits[l];
 4506              		.loc 1 357 15 view .LVU1451
 358:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (i < 0 || p + i > 256)	/* protect against table overrun */
 4507              		.loc 1 358 5 view .LVU1452
 4508 0096 4989EC   		movq	%rbp, %r12
 358:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (i < 0 || p + i > 256)	/* protect against table overrun */
 4509              		.loc 1 358 7 is_stmt 0 view .LVU1453
 4510 0099 440FB673 		movzbl	1(%rbx), %r14d
 4510      01
 4511              	.LVL571:
 359:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 4512              		.loc 1 359 5 is_stmt 1 view .LVU1454
 4513 009e 4889DD   		movq	%rbx, %rbp
 4514              	.LVL572:
 359:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 4515              		.loc 1 359 5 is_stmt 0 view .LVU1455
 4516 00a1 4889C3   		movq	%rax, %rbx
 4517              	.LVL573:
 4518              		.p2align 4,,10
 4519 00a4 0F1F4000 		.p2align 3
 4520              	.L435:
 361:fltk-1.3.4-1/jpeg/jdhuff.c ****       huffsize[p++] = (char) l;
 4521              		.loc 1 361 11 is_stmt 1 view .LVU1456
 361:fltk-1.3.4-1/jpeg/jdhuff.c ****       huffsize[p++] = (char) l;
 4522              		.loc 1 361 13 is_stmt 0 view .LVU1457
 4523 00a8 418D76FF 		leal	-1(%r14), %esi
 4524              	.LVL574:
 361:fltk-1.3.4-1/jpeg/jdhuff.c ****       huffsize[p++] = (char) l;
 4525              		.loc 1 361 11 view .LVU1458
 4526 00ac 4585F6   		testl	%r14d, %r14d
 4527 00af 742F     		je	.L437
 4528 00b1 4963D5   		movslq	%r13d, %rdx
 4529 00b4 89F7     		movl	%esi, %edi
 4530 00b6 4489F9   		movl	%r15d, %ecx
 4531 00b9 488D0413 		leaq	(%rbx,%rdx), %rax
 4532 00bd 488D9414 		leaq	1089(%rsp,%rdx), %rdx
 4532      41040000 
 4533 00c5 4801FA   		addq	%rdi, %rdx
 4534              	.LVL575:
 4535 00c8 0F1F8400 		.p2align 4,,10
 4535      00000000 
 4536              		.p2align 3
 4537              	.L438:
 362:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 4538              		.loc 1 362 7 is_stmt 1 view .LVU1459
 362:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 4539              		.loc 1 362 21 is_stmt 0 view .LVU1460
 4540 00d0 8808     		movb	%cl, (%rax)
 361:fltk-1.3.4-1/jpeg/jdhuff.c ****       huffsize[p++] = (char) l;
 4541              		.loc 1 361 11 is_stmt 1 view .LVU1461
 4542              	.LVL576:
 361:fltk-1.3.4-1/jpeg/jdhuff.c ****       huffsize[p++] = (char) l;
 4543              		.loc 1 361 11 is_stmt 0 view .LVU1462
 4544 00d2 4883C001 		addq	$1, %rax
 4545              	.LVL577:
 361:fltk-1.3.4-1/jpeg/jdhuff.c ****       huffsize[p++] = (char) l;
 4546              		.loc 1 361 11 view .LVU1463
 4547 00d6 4839D0   		cmpq	%rdx, %rax
 4548 00d9 75F5     		jne	.L438
 4549 00db 458D6C35 		leal	1(%r13,%rsi), %r13d
 4549      01
 4550              	.L437:
 357:fltk-1.3.4-1/jpeg/jdhuff.c ****     i = (int) htbl->bits[l];
 4551              		.loc 1 357 24 is_stmt 1 discriminator 2 view .LVU1464
 4552              	.LVL578:
 357:fltk-1.3.4-1/jpeg/jdhuff.c ****     i = (int) htbl->bits[l];
 4553              		.loc 1 357 15 discriminator 2 view .LVU1465
 357:fltk-1.3.4-1/jpeg/jdhuff.c ****     i = (int) htbl->bits[l];
 4554              		.loc 1 357 3 is_stmt 0 discriminator 2 view .LVU1466
 4555 00e0 4983FF10 		cmpq	$16, %r15
 4556 00e4 742C     		je	.L487
 358:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (i < 0 || p + i > 256)	/* protect against table overrun */
 4557              		.loc 1 358 5 is_stmt 1 view .LVU1467
 358:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (i < 0 || p + i > 256)	/* protect against table overrun */
 4558              		.loc 1 358 7 is_stmt 0 view .LVU1468
 4559 00e6 460FB674 		movzbl	1(%rbp,%r15), %r14d
 4559      3D01
 4560              	.LVL579:
 359:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 4561              		.loc 1 359 5 is_stmt 1 view .LVU1469
 359:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 4562              		.loc 1 359 20 is_stmt 0 view .LVU1470
 4563 00ec 438D4435 		leal	0(%r13,%r14), %eax
 4563      00
 359:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 4564              		.loc 1 359 15 view .LVU1471
 4565 00f1 3D000100 		cmpl	$256, %eax
 4565      00
 4566 00f6 7E14     		jle	.L436
 360:fltk-1.3.4-1/jpeg/jdhuff.c ****     while (i--)
 4567              		.loc 1 360 7 is_stmt 1 view .LVU1472
 4568 00f8 498B0424 		movq	(%r12), %rax
 4569 00fc 4C89E7   		movq	%r12, %rdi
 4570 00ff C7402809 		movl	$9, 40(%rax)
 4570      000000
 4571 0106 498B0424 		movq	(%r12), %rax
 4572 010a FF10     		call	*(%rax)
 4573              	.LVL580:
 4574              	.L436:
 360:fltk-1.3.4-1/jpeg/jdhuff.c ****     while (i--)
 4575              		.loc 1 360 7 is_stmt 0 view .LVU1473
 4576 010c 4983C701 		addq	$1, %r15
 4577              	.LVL581:
 360:fltk-1.3.4-1/jpeg/jdhuff.c ****     while (i--)
 4578              		.loc 1 360 7 view .LVU1474
 4579 0110 EB96     		jmp	.L435
 4580              	.LVL582:
 4581              	.L487:
 364:fltk-1.3.4-1/jpeg/jdhuff.c ****   numsymbols = p;
 4582              		.loc 1 364 15 view .LVU1475
 4583 0112 4963C5   		movslq	%r13d, %rax
 4584 0115 4889EB   		movq	%rbp, %rbx
 370:fltk-1.3.4-1/jpeg/jdhuff.c ****   si = huffsize[0];
 4585              		.loc 1 370 8 view .LVU1476
 4586 0118 31D2     		xorl	%edx, %edx
 4587 011a 4C89E5   		movq	%r12, %rbp
 364:fltk-1.3.4-1/jpeg/jdhuff.c ****   numsymbols = p;
 4588              		.loc 1 364 15 view .LVU1477
 4589 011d C6840440 		movb	$0, 1088(%rsp,%rax)
 4589      04000000 
 4590 0125 4C8B6424 		movq	8(%rsp), %r12
 4590      08
 4591              	.LVL583:
 364:fltk-1.3.4-1/jpeg/jdhuff.c ****   numsymbols = p;
 4592              		.loc 1 364 3 is_stmt 1 view .LVU1478
 365:fltk-1.3.4-1/jpeg/jdhuff.c ****   
 4593              		.loc 1 365 3 view .LVU1479
 370:fltk-1.3.4-1/jpeg/jdhuff.c ****   si = huffsize[0];
 4594              		.loc 1 370 3 view .LVU1480
 371:fltk-1.3.4-1/jpeg/jdhuff.c ****   p = 0;
 4595              		.loc 1 371 3 view .LVU1481
 372:fltk-1.3.4-1/jpeg/jdhuff.c ****   while (huffsize[p]) {
 4596              		.loc 1 372 5 is_stmt 0 view .LVU1482
 4597 012a 4531FF   		xorl	%r15d, %r15d
 4598              	.LVL584:
 371:fltk-1.3.4-1/jpeg/jdhuff.c ****   p = 0;
 4599              		.loc 1 371 16 view .LVU1483
 4600 012d 440FB684 		movzbl	1088(%rsp), %r8d
 4600      24400400 
 4600      00
 4601 0136 4589C6   		movl	%r8d, %r14d
 371:fltk-1.3.4-1/jpeg/jdhuff.c ****   p = 0;
 4602              		.loc 1 371 6 view .LVU1484
 4603 0139 4489C1   		movl	%r8d, %ecx
 4604              	.LVL585:
 372:fltk-1.3.4-1/jpeg/jdhuff.c ****   while (huffsize[p]) {
 4605              		.loc 1 372 3 is_stmt 1 view .LVU1485
 373:fltk-1.3.4-1/jpeg/jdhuff.c ****     while (((int) huffsize[p]) == si) {
 4606              		.loc 1 373 3 view .LVU1486
 373:fltk-1.3.4-1/jpeg/jdhuff.c ****     while (((int) huffsize[p]) == si) {
 4607              		.loc 1 373 9 view .LVU1487
 4608 013c 4584C0   		testb	%r8b, %r8b
 4609 013f 0F848E00 		je	.L441
 4609      0000
 373:fltk-1.3.4-1/jpeg/jdhuff.c ****     while (((int) huffsize[p]) == si) {
 4610              		.loc 1 373 9 is_stmt 0 view .LVU1488
 4611 0145 48895C24 		movq	%rbx, 24(%rsp)
 4611      18
 4612 014a 4889EF   		movq	%rbp, %rdi
 4613 014d 89D3     		movl	%edx, %ebx
 4614 014f 4489C5   		movl	%r8d, %ebp
 4615              	.LVL586:
 4616              		.p2align 4,,10
 4617 0152 660F1F44 		.p2align 3
 4617      0000
 4618              	.L440:
 374:fltk-1.3.4-1/jpeg/jdhuff.c ****       huffcode[p++] = code;
 4619              		.loc 1 374 11 is_stmt 1 view .LVU1489
 4620 0158 39E9     		cmpl	%ebp, %ecx
 4621 015a 0F856202 		jne	.L488
 4621      0000
 374:fltk-1.3.4-1/jpeg/jdhuff.c ****       huffcode[p++] = code;
 4622              		.loc 1 374 11 is_stmt 0 view .LVU1490
 4623 0160 418D4701 		leal	1(%r15), %eax
 4624 0164 488DB424 		leaq	1088(%rsp), %rsi
 4624      40040000 
 4625 016c 4898     		cltq
 4626 016e 488D5424 		leaq	48(%rsp), %rdx
 4626      30
 4627              		.p2align 4,,10
 4628 0173 0F1F4400 		.p2align 3
 4628      00
 4629              	.L442:
 375:fltk-1.3.4-1/jpeg/jdhuff.c ****       code++;
 4630              		.loc 1 375 7 is_stmt 1 view .LVU1491
 4631              	.LVL587:
 374:fltk-1.3.4-1/jpeg/jdhuff.c ****       huffcode[p++] = code;
 4632              		.loc 1 374 27 is_stmt 0 view .LVU1492
 4633 0178 0FB62C06 		movzbl	(%rsi,%rax), %ebp
 375:fltk-1.3.4-1/jpeg/jdhuff.c ****       code++;
 4634              		.loc 1 375 21 view .LVU1493
 4635 017c 895C82FC 		movl	%ebx, -4(%rdx,%rax,4)
 375:fltk-1.3.4-1/jpeg/jdhuff.c ****       code++;
 4636              		.loc 1 375 17 view .LVU1494
 4637 0180 4189C7   		movl	%eax, %r15d
 376:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 4638              		.loc 1 376 7 is_stmt 1 view .LVU1495
 376:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 4639              		.loc 1 376 11 is_stmt 0 view .LVU1496
 4640 0183 83C301   		addl	$1, %ebx
 4641              	.LVL588:
 374:fltk-1.3.4-1/jpeg/jdhuff.c ****       huffcode[p++] = code;
 4642              		.loc 1 374 11 is_stmt 1 view .LVU1497
 4643 0186 4883C001 		addq	$1, %rax
 4644              	.LVL589:
 374:fltk-1.3.4-1/jpeg/jdhuff.c ****       huffcode[p++] = code;
 4645              		.loc 1 374 27 is_stmt 0 view .LVU1498
 4646 018a 4189EE   		movl	%ebp, %r14d
 374:fltk-1.3.4-1/jpeg/jdhuff.c ****       huffcode[p++] = code;
 4647              		.loc 1 374 11 view .LVU1499
 4648 018d 39CD     		cmpl	%ecx, %ebp
 4649 018f 74E7     		je	.L442
 381:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 4650              		.loc 1 381 5 is_stmt 1 view .LVU1500
 381:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 4651              		.loc 1 381 40 is_stmt 0 view .LVU1501
 4652 0191 BA010000 		movl	$1, %edx
 4652      00
 381:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 4653              		.loc 1 381 10 view .LVU1502
 4654 0196 89D8     		movl	%ebx, %eax
 381:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 4655              		.loc 1 381 40 view .LVU1503
 4656 0198 48D3E2   		salq	%cl, %rdx
 381:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 4657              		.loc 1 381 8 view .LVU1504
 4658 019b 4839D0   		cmpq	%rdx, %rax
 4659 019e 7C21     		jl	.L443
 4660              	.LVL590:
 4661              	.L460:
 382:fltk-1.3.4-1/jpeg/jdhuff.c ****     code <<= 1;
 4662              		.loc 1 382 7 view .LVU1505
 4663 01a0 488B07   		movq	(%rdi), %rax
 4664 01a3 894C2414 		movl	%ecx, 20(%rsp)
 382:fltk-1.3.4-1/jpeg/jdhuff.c ****     code <<= 1;
 4665              		.loc 1 382 7 is_stmt 1 view .LVU1506
 4666 01a7 48897C24 		movq	%rdi, 8(%rsp)
 4666      08
 4667 01ac C7402809 		movl	$9, 40(%rax)
 4667      000000
 4668 01b3 488B07   		movq	(%rdi), %rax
 4669 01b6 FF10     		call	*(%rax)
 4670              	.LVL591:
 382:fltk-1.3.4-1/jpeg/jdhuff.c ****     code <<= 1;
 4671              		.loc 1 382 7 is_stmt 0 view .LVU1507
 4672 01b8 8B4C2414 		movl	20(%rsp), %ecx
 4673 01bc 488B7C24 		movq	8(%rsp), %rdi
 4673      08
 4674              	.LVL592:
 4675              	.L443:
 383:fltk-1.3.4-1/jpeg/jdhuff.c ****     si++;
 4676              		.loc 1 383 5 is_stmt 1 view .LVU1508
 383:fltk-1.3.4-1/jpeg/jdhuff.c ****     si++;
 4677              		.loc 1 383 10 is_stmt 0 view .LVU1509
 4678 01c1 01DB     		addl	%ebx, %ebx
 4679              	.LVL593:
 384:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 4680              		.loc 1 384 5 is_stmt 1 view .LVU1510
 384:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 4681              		.loc 1 384 7 is_stmt 0 view .LVU1511
 4682 01c3 83C101   		addl	$1, %ecx
 4683              	.LVL594:
 373:fltk-1.3.4-1/jpeg/jdhuff.c ****     while (((int) huffsize[p]) == si) {
 4684              		.loc 1 373 9 is_stmt 1 view .LVU1512
 4685 01c6 4584F6   		testb	%r14b, %r14b
 4686 01c9 758D     		jne	.L440
 4687 01cb 488B5C24 		movq	24(%rsp), %rbx
 4687      18
 4688              	.LVL595:
 373:fltk-1.3.4-1/jpeg/jdhuff.c ****     while (((int) huffsize[p]) == si) {
 4689              		.loc 1 373 9 is_stmt 0 view .LVU1513
 4690 01d0 4889FD   		movq	%rdi, %rbp
 4691              	.L441:
 372:fltk-1.3.4-1/jpeg/jdhuff.c ****   while (huffsize[p]) {
 4692              		.loc 1 372 5 view .LVU1514
 4693 01d3 B8010000 		movl	$1, %eax
 4693      00
 389:fltk-1.3.4-1/jpeg/jdhuff.c ****   for (l = 1; l <= 16; l++) {
 4694              		.loc 1 389 5 view .LVU1515
 4695 01d8 31C9     		xorl	%ecx, %ecx
 4696              	.LVL596:
 389:fltk-1.3.4-1/jpeg/jdhuff.c ****   for (l = 1; l <= 16; l++) {
 4697              		.loc 1 389 5 view .LVU1516
 4698 01da EB34     		jmp	.L448
 4699              	.LVL597:
 4700 01dc 0F1F4000 		.p2align 4,,10
 4701              		.p2align 3
 4702              	.L490:
 395:fltk-1.3.4-1/jpeg/jdhuff.c ****       p += htbl->bits[l];
 4703              		.loc 1 395 7 is_stmt 1 view .LVU1517
 395:fltk-1.3.4-1/jpeg/jdhuff.c ****       p += htbl->bits[l];
 4704              		.loc 1 395 28 is_stmt 0 view .LVU1518
 4705 01e0 4863D1   		movslq	%ecx, %rdx
 395:fltk-1.3.4-1/jpeg/jdhuff.c ****       p += htbl->bits[l];
 4706              		.loc 1 395 40 view .LVU1519
 4707 01e3 8B749430 		movl	48(%rsp,%rdx,4), %esi
 395:fltk-1.3.4-1/jpeg/jdhuff.c ****       p += htbl->bits[l];
 4708              		.loc 1 395 38 view .LVU1520
 4709 01e7 4829F2   		subq	%rsi, %rdx
 4710 01ea 498994C4 		movq	%rdx, 144(%r12,%rax,8)
 4710      90000000 
 396:fltk-1.3.4-1/jpeg/jdhuff.c ****       dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 4711              		.loc 1 396 7 is_stmt 1 view .LVU1521
 396:fltk-1.3.4-1/jpeg/jdhuff.c ****       dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 4712              		.loc 1 396 22 is_stmt 0 view .LVU1522
 4713 01f2 0FB61403 		movzbl	(%rbx,%rax), %edx
 396:fltk-1.3.4-1/jpeg/jdhuff.c ****       dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 4714              		.loc 1 396 9 view .LVU1523
 4715 01f6 01D1     		addl	%edx, %ecx
 4716              	.LVL598:
 397:fltk-1.3.4-1/jpeg/jdhuff.c ****     } else {
 4717              		.loc 1 397 7 is_stmt 1 view .LVU1524
 397:fltk-1.3.4-1/jpeg/jdhuff.c ****     } else {
 4718              		.loc 1 397 36 is_stmt 0 view .LVU1525
 4719 01f8 8D51FF   		leal	-1(%rcx), %edx
 397:fltk-1.3.4-1/jpeg/jdhuff.c ****     } else {
 4720              		.loc 1 397 34 view .LVU1526
 4721 01fb 4863D2   		movslq	%edx, %rdx
 4722 01fe 8B7C9430 		movl	48(%rsp,%rdx,4), %edi
 4723 0202 49893CC4 		movq	%rdi, (%r12,%rax,8)
 390:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (htbl->bits[l]) {
 4724              		.loc 1 390 24 is_stmt 1 view .LVU1527
 4725              	.LVL599:
 390:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (htbl->bits[l]) {
 4726              		.loc 1 390 15 view .LVU1528
 4727 0206 4883C001 		addq	$1, %rax
 4728              	.LVL600:
 390:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (htbl->bits[l]) {
 4729              		.loc 1 390 3 is_stmt 0 view .LVU1529
 4730 020a 4883F811 		cmpq	$17, %rax
 4731 020e 7418     		je	.L489
 4732              	.LVL601:
 4733              	.L448:
 391:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* valoffset[l] = huffval[] index of 1st symbol of code length l,
 4734              		.loc 1 391 5 is_stmt 1 view .LVU1530
 391:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* valoffset[l] = huffval[] index of 1st symbol of code length l,
 4735              		.loc 1 391 8 is_stmt 0 view .LVU1531
 4736 0210 803C0300 		cmpb	$0, (%rbx,%rax)
 4737 0214 75CA     		jne	.L490
 399:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 4738              		.loc 1 399 7 is_stmt 1 view .LVU1532
 399:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 4739              		.loc 1 399 24 is_stmt 0 view .LVU1533
 4740 0216 49C704C4 		movq	$-1, (%r12,%rax,8)
 4740      FFFFFFFF 
 390:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (htbl->bits[l]) {
 4741              		.loc 1 390 24 is_stmt 1 view .LVU1534
 4742              	.LVL602:
 390:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (htbl->bits[l]) {
 4743              		.loc 1 390 15 view .LVU1535
 4744 021e 4883C001 		addq	$1, %rax
 4745              	.LVL603:
 390:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (htbl->bits[l]) {
 4746              		.loc 1 390 3 is_stmt 0 view .LVU1536
 4747 0222 4883F811 		cmpq	$17, %rax
 4748 0226 75E8     		jne	.L448
 4749              	.L489:
 402:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4750              		.loc 1 402 3 is_stmt 1 view .LVU1537
 4751              	.LBB41:
 4752              	.LBB42:
 4753              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h"
   1:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** /* Copyright (C) 2004-2020 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    <https://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifndef _BITS_STRING_FORTIFIED_H
  19:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #define _BITS_STRING_FORTIFIED_H 1
  20:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  21:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifndef _STRING_H
  22:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** # error "Never use <bits/string_fortified.h> directly; include <string.h> instead."
  23:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  24:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  25:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #if !__GNUC_PREREQ (5,0)
  26:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __warndecl (__warn_memset_zero_len,
  27:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  28:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  29:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  30:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  32:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
  33:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  34:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  35:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  36:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  37:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  38:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memmove (void *__dest, const void *__src, size_t __len))
  39:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  40:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  41:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  42:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  43:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifdef __USE_GNU
  44:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  45:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
  46:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 		size_t __len))
  47:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  48:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
  49:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  50:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  51:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  52:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  53:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** /* The first two tests here help to catch a somewhat common problem
  54:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    where the second and third parameter are transposed.  This is
  55:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    especially problematic if the intended fill value is zero.  In this
  56:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    case no work is done at all.  We detect these problems by referring
  57:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    non-existing functions.  */
  58:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  59:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memset (void *__dest, int __ch, size_t __len))
  60:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  61:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   /* GCC-5.0 and newer implements these checks in the compiler, so we don't
  62:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****      need them here.  */
  63:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #if !__GNUC_PREREQ (5,0)
  64:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   if (__builtin_constant_p (__len) && __len == 0
  65:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       && (!__builtin_constant_p (__ch) || __ch != 0))
  66:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****     {
  67:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       __warn_memset_zero_len ();
  68:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       return __dest;
  69:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****     }
  70:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  71:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 4754              		.loc 2 71 10 is_stmt 0 view .LVU1538
 4755 0228 4489E0   		movl	%r12d, %eax
 4756 022b 4D89E0   		movq	%r12, %r8
 4757 022e 41BF0100 		movl	$1, %r15d
 4757      0000
 4758 0234 4989DB   		movq	%rbx, %r11
 4759 0237 498DBC24 		leaq	296(%r12), %rdi
 4759      28010000 
 4760 023f 4C8D7308 		leaq	8(%rbx), %r14
 4761 0243 49C78424 		movq	$0, 288(%r12)
 4761      20010000 
 4761      00000000 
 4762              	.LVL604:
 4763              		.loc 2 71 10 view .LVU1539
 4764 024f 4129DF   		subl	%ebx, %r15d
 4765 0252 49C78424 		movq	$0, 1304(%r12)
 4765      18050000 
 4765      00000000 
 4766 025e 4883E7F8 		andq	$-8, %rdi
 4767              	.LBE42:
 4768              	.LBE41:
 402:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4769              		.loc 1 402 21 view .LVU1540
 4770 0262 49C78424 		movq	$1048575, 136(%r12)
 4770      88000000 
 4770      FFFF0F00 
 411:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4771              		.loc 1 411 3 is_stmt 1 view .LVU1541
 4772              	.LVL605:
 4773              	.LBB44:
 4774              	.LBI41:
  59:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
 4775              		.loc 2 59 1 view .LVU1542
 4776              	.LBB43:
 4777              		.loc 2 71 3 view .LVU1543
 4778              		.loc 2 71 10 is_stmt 0 view .LVU1544
 4779 026e 29F8     		subl	%edi, %eax
 4780 0270 8D882005 		leal	1312(%rax), %ecx
 4780      0000
 4781              	.LVL606:
 4782              		.loc 2 71 10 view .LVU1545
 4783 0276 31C0     		xorl	%eax, %eax
 4784 0278 C1E903   		shrl	$3, %ecx
 4785 027b F348AB   		rep stosq
 4786              	.LVL607:
 4787              		.loc 2 71 10 view .LVU1546
 4788              	.LBE43:
 4789              	.LBE44:
 413:fltk-1.3.4-1/jpeg/jdhuff.c ****   for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 4790              		.loc 1 413 3 is_stmt 1 view .LVU1547
 414:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 4791              		.loc 1 414 3 view .LVU1548
 414:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 4792              		.loc 1 414 15 view .LVU1549
 4793 027e 8D7B07   		leal	7(%rbx), %edi
 4794 0281 44896C24 		movl	%r13d, 36(%rsp)
 4794      24
 4795 0286 4A8D04A5 		leaq	0(,%r12,4), %rax
 4795      00000000 
 4796 028e 897C2414 		movl	%edi, 20(%rsp)
 4797 0292 498DBC24 		leaq	1313(%r12), %rdi
 4797      21050000 
 4798 029a 4929C0   		subq	%rax, %r8
 413:fltk-1.3.4-1/jpeg/jdhuff.c ****   for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 4799              		.loc 1 413 5 is_stmt 0 view .LVU1550
 4800 029d 31C0     		xorl	%eax, %eax
 4801 029f 48897C24 		movq	%rdi, 24(%rsp)
 4801      18
 4802 02a4 48896C24 		movq	%rbp, 40(%rsp)
 4802      28
 4803              	.LVL608:
 4804 02a9 0F1F8000 		.p2align 4,,10
 4804      000000
 4805              		.p2align 3
 4806              	.L449:
 415:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* l = current code's length, p = its index in huffcode[] & huffval[]. */
 4807              		.loc 1 415 5 view .LVU1551
 4808 02b0 41807B01 		cmpb	$0, 1(%r11)
 4808      00
 4809 02b5 438D3C1F 		leal	(%r15,%r11), %edi
 4810              	.LVL609:
 415:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* l = current code's length, p = its index in huffcode[] & huffval[]. */
 4811              		.loc 1 415 17 is_stmt 1 view .LVU1552
 415:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* l = current code's length, p = its index in huffcode[] & huffval[]. */
 4812              		.loc 1 415 5 is_stmt 0 view .LVU1553
 4813 02b9 0F848500 		je	.L454
 4813      0000
 4814 02bf 8B4C2414 		movl	20(%rsp), %ecx
 419:fltk-1.3.4-1/jpeg/jdhuff.c **** 	dtbl->look_nbits[lookbits] = l;
 4815              		.loc 1 419 16 view .LVU1554
 4816 02c3 BA010000 		movl	$1, %edx
 4816      00
 4817 02c8 448D4801 		leal	1(%rax), %r9d
 4818 02cc 488D7403 		leaq	17(%rbx,%rax), %rsi
 4818      11
 4819 02d1 4D63C9   		movslq	%r9d, %r9
 415:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* l = current code's length, p = its index in huffcode[] & huffval[]. */
 4820              		.loc 1 415 12 view .LVU1555
 4821 02d4 41BA0100 		movl	$1, %r10d
 4821      0000
 4822 02da 4C8D6C24 		leaq	48(%rsp), %r13
 4822      30
 4823 02df 4429D9   		subl	%r11d, %ecx
 419:fltk-1.3.4-1/jpeg/jdhuff.c **** 	dtbl->look_nbits[lookbits] = l;
 4824              		.loc 1 419 16 view .LVU1556
 4825 02e2 D3E2     		sall	%cl, %edx
 4826 02e4 8D6AFF   		leal	-1(%rdx), %ebp
 4827 02e7 48036C24 		addq	24(%rsp), %rbp
 4827      18
 4828              	.LVL610:
 4829 02ec 0F1F4000 		.p2align 4,,10
 4830              		.p2align 3
 4831              	.L451:
 418:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 4832              		.loc 1 418 7 is_stmt 1 view .LVU1557
 419:fltk-1.3.4-1/jpeg/jdhuff.c **** 	dtbl->look_nbits[lookbits] = l;
 4833              		.loc 1 419 7 view .LVU1558
 419:fltk-1.3.4-1/jpeg/jdhuff.c **** 	dtbl->look_nbits[lookbits] = l;
 4834              		.loc 1 419 43 view .LVU1559
 418:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 4835              		.loc 1 418 30 is_stmt 0 view .LVU1560
 4836 02f0 438B548D 		movl	-4(%r13,%r9,4), %edx
 4836      FC
 4837 02f5 894C2408 		movl	%ecx, 8(%rsp)
 4838 02f9 D3E2     		sall	%cl, %edx
 4839 02fb 4863D2   		movslq	%edx, %rdx
 4840 02fe 498D8414 		leaq	1312(%r12,%rdx), %rax
 4840      20050000 
 4841 0306 4801EA   		addq	%rbp, %rdx
 4842              	.LVL611:
 4843 0309 0F1F8000 		.p2align 4,,10
 4843      000000
 4844              		.p2align 3
 4845              	.L450:
 420:fltk-1.3.4-1/jpeg/jdhuff.c **** 	dtbl->look_sym[lookbits] = htbl->huffval[p];
 4846              		.loc 1 420 2 is_stmt 1 discriminator 3 view .LVU1561
 420:fltk-1.3.4-1/jpeg/jdhuff.c **** 	dtbl->look_sym[lookbits] = htbl->huffval[p];
 4847              		.loc 1 420 29 is_stmt 0 discriminator 3 view .LVU1562
 4848 0310 4189BC80 		movl	%edi, -4960(%r8,%rax,4)
 4848      A0ECFFFF 
 421:fltk-1.3.4-1/jpeg/jdhuff.c **** 	lookbits++;
 4849              		.loc 1 421 2 is_stmt 1 discriminator 3 view .LVU1563
 421:fltk-1.3.4-1/jpeg/jdhuff.c **** 	lookbits++;
 4850              		.loc 1 421 27 is_stmt 0 discriminator 3 view .LVU1564
 4851 0318 0FB60E   		movzbl	(%rsi), %ecx
 4852 031b 4883C001 		addq	$1, %rax
 4853              	.LVL612:
 421:fltk-1.3.4-1/jpeg/jdhuff.c **** 	lookbits++;
 4854              		.loc 1 421 27 discriminator 3 view .LVU1565
 4855 031f 8848FF   		movb	%cl, -1(%rax)
 422:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 4856              		.loc 1 422 2 is_stmt 1 discriminator 3 view .LVU1566
 419:fltk-1.3.4-1/jpeg/jdhuff.c **** 	dtbl->look_nbits[lookbits] = l;
 4857              		.loc 1 419 52 discriminator 3 view .LVU1567
 419:fltk-1.3.4-1/jpeg/jdhuff.c **** 	dtbl->look_nbits[lookbits] = l;
 4858              		.loc 1 419 43 discriminator 3 view .LVU1568
 419:fltk-1.3.4-1/jpeg/jdhuff.c **** 	dtbl->look_nbits[lookbits] = l;
 4859              		.loc 1 419 7 is_stmt 0 discriminator 3 view .LVU1569
 4860 0322 4839D0   		cmpq	%rdx, %rax
 4861 0325 75E9     		jne	.L450
 415:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* l = current code's length, p = its index in huffcode[] & huffval[]. */
 4862              		.loc 1 415 22 discriminator 2 view .LVU1570
 4863 0327 410FB653 		movzbl	1(%r11), %edx
 4863      01
 415:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* l = current code's length, p = its index in huffcode[] & huffval[]. */
 4864              		.loc 1 415 44 discriminator 2 view .LVU1571
 4865 032c 4183C201 		addl	$1, %r10d
 4866              	.LVL613:
 415:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* l = current code's length, p = its index in huffcode[] & huffval[]. */
 4867              		.loc 1 415 49 discriminator 2 view .LVU1572
 4868 0330 4963C1   		movslq	%r9d, %rax
 4869 0333 8B4C2408 		movl	8(%rsp), %ecx
 415:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* l = current code's length, p = its index in huffcode[] & huffval[]. */
 4870              		.loc 1 415 43 is_stmt 1 discriminator 2 view .LVU1573
 4871              	.LVL614:
 415:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* l = current code's length, p = its index in huffcode[] & huffval[]. */
 4872              		.loc 1 415 17 discriminator 2 view .LVU1574
 4873 0337 4983C101 		addq	$1, %r9
 4874              	.LVL615:
 415:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* l = current code's length, p = its index in huffcode[] & huffval[]. */
 4875              		.loc 1 415 17 is_stmt 0 discriminator 2 view .LVU1575
 4876 033b 4883C601 		addq	$1, %rsi
 415:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* l = current code's length, p = its index in huffcode[] & huffval[]. */
 4877              		.loc 1 415 5 discriminator 2 view .LVU1576
 4878 033f 4439D2   		cmpl	%r10d, %edx
 4879 0342 7DAC     		jge	.L451
 4880              	.LVL616:
 4881              	.L454:
 414:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 4882              		.loc 1 414 36 is_stmt 1 discriminator 2 view .LVU1577
 414:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 4883              		.loc 1 414 15 discriminator 2 view .LVU1578
 4884 0344 4983C301 		addq	$1, %r11
 414:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 4885              		.loc 1 414 3 is_stmt 0 discriminator 2 view .LVU1579
 4886 0348 4D39F3   		cmpq	%r14, %r11
 4887 034b 0F855FFF 		jne	.L449
 4887      FFFF
 433:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (i = 0; i < numsymbols; i++) {
 4888              		.loc 1 433 6 view .LVU1580
 4889 0351 8B442420 		movl	32(%rsp), %eax
 4890 0355 448B6C24 		movl	36(%rsp), %r13d
 4890      24
 4891 035a 488B6C24 		movq	40(%rsp), %rbp
 4891      28
 433:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (i = 0; i < numsymbols; i++) {
 4892              		.loc 1 433 3 is_stmt 1 view .LVU1581
 433:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (i = 0; i < numsymbols; i++) {
 4893              		.loc 1 433 6 is_stmt 0 view .LVU1582
 4894 035f 85C0     		testl	%eax, %eax
 4895 0361 7436     		je	.L429
 4896              	.LVL617:
 434:fltk-1.3.4-1/jpeg/jdhuff.c ****       int sym = htbl->huffval[i];
 4897              		.loc 1 434 17 is_stmt 1 view .LVU1583
 434:fltk-1.3.4-1/jpeg/jdhuff.c ****       int sym = htbl->huffval[i];
 4898              		.loc 1 434 5 is_stmt 0 view .LVU1584
 4899 0363 4585ED   		testl	%r13d, %r13d
 4900 0366 7431     		je	.L429
 4901 0368 418D45FF 		leal	-1(%r13), %eax
 4902 036c 4C8D6311 		leaq	17(%rbx), %r12
 4903 0370 488D5C03 		leaq	18(%rbx,%rax), %rbx
 4903      12
 4904              	.LVL618:
 4905              	.L458:
 4906              	.LBB45:
 435:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (sym < 0 || sym > 15)
 4907              		.loc 1 435 7 is_stmt 1 view .LVU1585
 436:fltk-1.3.4-1/jpeg/jdhuff.c **** 	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 4908              		.loc 1 436 7 view .LVU1586
 436:fltk-1.3.4-1/jpeg/jdhuff.c **** 	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 4909              		.loc 1 436 10 is_stmt 0 view .LVU1587
 4910 0375 41803C24 		cmpb	$15, (%r12)
 4910      0F
 4911 037a 7614     		jbe	.L457
 437:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 4912              		.loc 1 437 2 is_stmt 1 view .LVU1588
 4913 037c 488B4500 		movq	0(%rbp), %rax
 4914 0380 4889EF   		movq	%rbp, %rdi
 4915 0383 C7402809 		movl	$9, 40(%rax)
 4915      000000
 4916              	.LVL619:
 437:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 4917              		.loc 1 437 2 is_stmt 0 view .LVU1589
 4918 038a 488B4500 		movq	0(%rbp), %rax
 4919 038e FF10     		call	*(%rax)
 4920              	.LVL620:
 4921              	.L457:
 4922              	.LBE45:
 434:fltk-1.3.4-1/jpeg/jdhuff.c ****       int sym = htbl->huffval[i];
 4923              		.loc 1 434 33 is_stmt 1 discriminator 2 view .LVU1590
 434:fltk-1.3.4-1/jpeg/jdhuff.c ****       int sym = htbl->huffval[i];
 4924              		.loc 1 434 17 discriminator 2 view .LVU1591
 4925 0390 4983C401 		addq	$1, %r12
 434:fltk-1.3.4-1/jpeg/jdhuff.c ****       int sym = htbl->huffval[i];
 4926              		.loc 1 434 5 is_stmt 0 discriminator 2 view .LVU1592
 4927 0394 4C39E3   		cmpq	%r12, %rbx
 4928 0397 75DC     		jne	.L458
 4929              	.L429:
 440:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4930              		.loc 1 440 1 view .LVU1593
 4931 0399 488B8424 		movq	1352(%rsp), %rax
 4931      48050000 
 4932 03a1 64483304 		xorq	%fs:40, %rax
 4932      25280000 
 4932      00
 4933 03aa 0F858800 		jne	.L491
 4933      0000
 4934 03b0 4881C458 		addq	$1368, %rsp
 4934      050000
 4935              		.cfi_remember_state
 4936              		.cfi_def_cfa_offset 56
 4937 03b7 5B       		popq	%rbx
 4938              		.cfi_def_cfa_offset 48
 4939 03b8 5D       		popq	%rbp
 4940              		.cfi_def_cfa_offset 40
 4941 03b9 415C     		popq	%r12
 4942              		.cfi_def_cfa_offset 32
 4943 03bb 415D     		popq	%r13
 4944              		.cfi_def_cfa_offset 24
 4945 03bd 415E     		popq	%r14
 4946              		.cfi_def_cfa_offset 16
 4947 03bf 415F     		popq	%r15
 4948              		.cfi_def_cfa_offset 8
 4949 03c1 C3       		ret
 4950              	.LVL621:
 4951              	.L488:
 4952              		.cfi_restore_state
 381:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 4953              		.loc 1 381 5 is_stmt 1 view .LVU1594
 381:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 4954              		.loc 1 381 40 is_stmt 0 view .LVU1595
 4955 03c2 BA010000 		movl	$1, %edx
 4955      00
 381:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 4956              		.loc 1 381 10 view .LVU1596
 4957 03c7 89D8     		movl	%ebx, %eax
 381:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 4958              		.loc 1 381 40 view .LVU1597
 4959 03c9 48D3E2   		salq	%cl, %rdx
 381:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 4960              		.loc 1 381 8 view .LVU1598
 4961 03cc 4839D0   		cmpq	%rdx, %rax
 4962 03cf 0F8DCBFD 		jge	.L460
 4962      FFFF
 383:fltk-1.3.4-1/jpeg/jdhuff.c ****     si++;
 4963              		.loc 1 383 5 is_stmt 1 view .LVU1599
 383:fltk-1.3.4-1/jpeg/jdhuff.c ****     si++;
 4964              		.loc 1 383 10 is_stmt 0 view .LVU1600
 4965 03d5 01DB     		addl	%ebx, %ebx
 4966              	.LVL622:
 384:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 4967              		.loc 1 384 5 is_stmt 1 view .LVU1601
 384:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
 4968              		.loc 1 384 7 is_stmt 0 view .LVU1602
 4969 03d7 83C101   		addl	$1, %ecx
 4970              	.LVL623:
 373:fltk-1.3.4-1/jpeg/jdhuff.c ****     while (((int) huffsize[p]) == si) {
 4971              		.loc 1 373 9 is_stmt 1 view .LVU1603
 373:fltk-1.3.4-1/jpeg/jdhuff.c ****     while (((int) huffsize[p]) == si) {
 4972              		.loc 1 373 9 is_stmt 0 view .LVU1604
 4973 03da E979FDFF 		jmp	.L440
 4973      FF
 4974              	.LVL624:
 4975              	.L431:
 342:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (htbl == NULL)
 4976              		.loc 1 342 43 discriminator 2 view .LVU1605
 4977 03df 488B9CC5 		movq	264(%rbp,%rax,8), %rbx
 4977      08010000 
 4978              	.LVL625:
 343:fltk-1.3.4-1/jpeg/jdhuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 4979              		.loc 1 343 3 is_stmt 1 discriminator 2 view .LVU1606
 343:fltk-1.3.4-1/jpeg/jdhuff.c ****     ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 4980              		.loc 1 343 6 is_stmt 0 discriminator 2 view .LVU1607
 4981 03e7 4885DB   		testq	%rbx, %rbx
 4982 03ea 0F857BFC 		jne	.L433
 4982      FFFF
 4983              	.LVL626:
 4984              	.L485:
 344:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 4985              		.loc 1 344 5 is_stmt 1 view .LVU1608
 4986 03f0 488B4500 		movq	0(%rbp), %rax
 4987 03f4 4889EF   		movq	%rbp, %rdi
 4988 03f7 C7402834 		movl	$52, 40(%rax)
 4988      000000
 4989 03fe 488B4500 		movq	0(%rbp), %rax
 4990 0402 4489602C 		movl	%r12d, 44(%rax)
 4991 0406 488B4500 		movq	0(%rbp), %rax
 4992 040a FF10     		call	*(%rax)
 4993              	.LVL627:
 347:fltk-1.3.4-1/jpeg/jdhuff.c ****     *pdtbl = (d_derived_tbl *)
 4994              		.loc 1 347 3 view .LVU1609
 347:fltk-1.3.4-1/jpeg/jdhuff.c ****     *pdtbl = (d_derived_tbl *)
 4995              		.loc 1 347 7 is_stmt 0 view .LVU1610
 4996 040c 4D8B6500 		movq	0(%r13), %r12
 4997              	.LVL628:
 347:fltk-1.3.4-1/jpeg/jdhuff.c ****     *pdtbl = (d_derived_tbl *)
 4998              		.loc 1 347 6 view .LVU1611
 4999 0410 4D85E4   		testq	%r12, %r12
 5000 0413 0F855FFC 		jne	.L434
 5000      FFFF
 5001              	.L486:
 348:fltk-1.3.4-1/jpeg/jdhuff.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 5002              		.loc 1 348 5 is_stmt 1 view .LVU1612
 349:fltk-1.3.4-1/jpeg/jdhuff.c **** 				  SIZEOF(d_derived_tbl));
 5003              		.loc 1 349 8 is_stmt 0 view .LVU1613
 5004 0419 488B4508 		movq	8(%rbp), %rax
 5005 041d BA200600 		movl	$1568, %edx
 5005      00
 5006 0422 BE010000 		movl	$1, %esi
 5006      00
 5007 0427 4889EF   		movq	%rbp, %rdi
 5008 042a FF10     		call	*(%rax)
 5009              	.LVL629:
 348:fltk-1.3.4-1/jpeg/jdhuff.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 5010              		.loc 1 348 12 view .LVU1614
 5011 042c 49894500 		movq	%rax, 0(%r13)
 349:fltk-1.3.4-1/jpeg/jdhuff.c **** 				  SIZEOF(d_derived_tbl));
 5012              		.loc 1 349 8 view .LVU1615
 5013 0430 4989C4   		movq	%rax, %r12
 5014 0433 E940FCFF 		jmp	.L434
 5014      FF
 5015              	.LVL630:
 5016              	.L491:
 440:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 5017              		.loc 1 440 1 view .LVU1616
 5018 0438 E8000000 		call	__stack_chk_fail@PLT
 5018      00
 5019              	.LVL631:
 5020              		.cfi_endproc
 5021              	.LFE51:
 5023              		.section	.text.start_pass_huff_decoder,"ax",@progbits
 5024              		.p2align 4
 5026              	start_pass_huff_decoder:
 5027              	.LVL632:
 5028              	.LFB62:
1315:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1316:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1317:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
1318:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Initialize for a Huffman-compressed scan.
1319:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
1320:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1321:fltk-1.3.4-1/jpeg/jdhuff.c **** METHODDEF(void)
1322:fltk-1.3.4-1/jpeg/jdhuff.c **** start_pass_huff_decoder (j_decompress_ptr cinfo)
1323:fltk-1.3.4-1/jpeg/jdhuff.c **** {
 5029              		.loc 1 1323 1 is_stmt 1 view -0
 5030              		.cfi_startproc
 5031              		.loc 1 1323 1 is_stmt 0 view .LVU1618
 5032 0000 F30F1EFA 		endbr64
1324:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 5033              		.loc 1 1324 3 is_stmt 1 view .LVU1619
1323:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 5034              		.loc 1 1323 1 is_stmt 0 view .LVU1620
 5035 0004 4157     		pushq	%r15
 5036              		.cfi_def_cfa_offset 16
 5037              		.cfi_offset 15, -16
 5038 0006 4156     		pushq	%r14
 5039              		.cfi_def_cfa_offset 24
 5040              		.cfi_offset 14, -24
 5041 0008 4155     		pushq	%r13
 5042              		.cfi_def_cfa_offset 32
 5043              		.cfi_offset 13, -32
 5044 000a 4154     		pushq	%r12
 5045              		.cfi_def_cfa_offset 40
 5046              		.cfi_offset 12, -40
 5047 000c 55       		pushq	%rbp
 5048              		.cfi_def_cfa_offset 48
 5049              		.cfi_offset 6, -48
 5050 000d 53       		pushq	%rbx
 5051              		.cfi_def_cfa_offset 56
 5052              		.cfi_offset 3, -56
 5053 000e 4889FB   		movq	%rdi, %rbx
 5054 0011 4883EC18 		subq	$24, %rsp
 5055              		.cfi_def_cfa_offset 80
1325:fltk-1.3.4-1/jpeg/jdhuff.c ****   int ci, blkn, tbl, i;
1326:fltk-1.3.4-1/jpeg/jdhuff.c ****   jpeg_component_info * compptr;
1327:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1328:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (cinfo->progressive_mode) {
 5056              		.loc 1 1328 6 view .LVU1621
 5057 0015 8B873C01 		movl	316(%rdi), %eax
 5057      0000
1324:fltk-1.3.4-1/jpeg/jdhuff.c ****   int ci, blkn, tbl, i;
 5058              		.loc 1 1324 20 view .LVU1622
 5059 001b 488BAF70 		movq	624(%rdi), %rbp
 5059      020000
 5060              	.LVL633:
1325:fltk-1.3.4-1/jpeg/jdhuff.c ****   int ci, blkn, tbl, i;
 5061              		.loc 1 1325 3 is_stmt 1 view .LVU1623
1326:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 5062              		.loc 1 1326 3 view .LVU1624
 5063              		.loc 1 1328 3 view .LVU1625
 5064 0022 4C63A71C 		movslq	540(%rdi), %r12
 5064      020000
 5065              		.loc 1 1328 6 is_stmt 0 view .LVU1626
 5066 0029 85C0     		testl	%eax, %eax
 5067 002b 0F842702 		je	.L493
 5067      0000
1329:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Validate progressive scan parameters */
1330:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (cinfo->Ss == 0) {
 5068              		.loc 1 1330 5 is_stmt 1 view .LVU1627
 5069 0031 8B872002 		movl	544(%rdi), %eax
 5069      0000
 5070              		.loc 1 1330 8 is_stmt 0 view .LVU1628
 5071 0037 4585E4   		testl	%r12d, %r12d
 5072 003a 0F85F803 		jne	.L494
 5072      0000
1331:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (cinfo->Se != 0)
 5073              		.loc 1 1331 7 is_stmt 1 view .LVU1629
 5074              		.loc 1 1331 10 is_stmt 0 view .LVU1630
 5075 0040 85C0     		testl	%eax, %eax
 5076 0042 7524     		jne	.L495
 5077              	.L496:
1332:fltk-1.3.4-1/jpeg/jdhuff.c **** 	goto bad;
1333:fltk-1.3.4-1/jpeg/jdhuff.c ****     } else {
1334:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* need not check Ss/Se < 0 since they came from unsigned bytes */
1335:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
1336:fltk-1.3.4-1/jpeg/jdhuff.c **** 	goto bad;
1337:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* AC scans may have only one component */
1338:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (cinfo->comps_in_scan != 1)
1339:fltk-1.3.4-1/jpeg/jdhuff.c **** 	goto bad;
1340:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1341:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (cinfo->Ah != 0) {
 5078              		.loc 1 1341 5 is_stmt 1 view .LVU1631
 5079              		.loc 1 1341 14 is_stmt 0 view .LVU1632
 5080 0044 8B832402 		movl	548(%rbx), %eax
 5080      0000
 5081 004a 8B932802 		movl	552(%rbx), %edx
 5081      0000
 5082              		.loc 1 1341 8 view .LVU1633
 5083 0050 85C0     		testl	%eax, %eax
 5084 0052 0F840606 		je	.L497
 5084      0000
1342:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Successive approximation refinement scan: must have Al = Ah-1. */
1343:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (cinfo->Ah-1 != cinfo->Al)
 5085              		.loc 1 1343 7 is_stmt 1 view .LVU1634
 5086              		.loc 1 1343 20 is_stmt 0 view .LVU1635
 5087 0058 83E801   		subl	$1, %eax
 5088              		.loc 1 1343 10 view .LVU1636
 5089 005b 39D0     		cmpl	%edx, %eax
 5090 005d 0F84FB05 		je	.L497
 5090      0000
 5091              	.LVL634:
 5092              		.p2align 4,,10
 5093 0063 0F1F4400 		.p2align 3
 5093      00
 5094              	.L495:
1344:fltk-1.3.4-1/jpeg/jdhuff.c **** 	goto bad;
1345:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1346:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (cinfo->Al > 13) {	/* need not check for < 0 */
1347:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Arguably the maximum Al value should be less than 13 for 8-bit precision,
1348:fltk-1.3.4-1/jpeg/jdhuff.c ****        * but the spec doesn't say so, and we try to be liberal about what we
1349:fltk-1.3.4-1/jpeg/jdhuff.c ****        * accept.  Note: large Al values could result in out-of-range DC
1350:fltk-1.3.4-1/jpeg/jdhuff.c ****        * coefficients during early scans, leading to bizarre displays due to
1351:fltk-1.3.4-1/jpeg/jdhuff.c ****        * overflows in the IDCT math.  But we won't crash.
1352:fltk-1.3.4-1/jpeg/jdhuff.c ****        */
1353:fltk-1.3.4-1/jpeg/jdhuff.c ****       bad:
1354:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 5095              		.loc 1 1354 7 is_stmt 1 view .LVU1637
 5096 0068 488B03   		movq	(%rbx), %rax
 5097 006b 4889DF   		movq	%rbx, %rdi
 5098 006e C7402811 		movl	$17, 40(%rax)
 5098      000000
 5099 0075 488B03   		movq	(%rbx), %rax
 5100 0078 8B931C02 		movl	540(%rbx), %edx
 5100      0000
 5101 007e 89502C   		movl	%edx, 44(%rax)
 5102 0081 488B03   		movq	(%rbx), %rax
 5103 0084 8B932002 		movl	544(%rbx), %edx
 5103      0000
 5104 008a 895030   		movl	%edx, 48(%rax)
 5105 008d 488B03   		movq	(%rbx), %rax
 5106 0090 8B932402 		movl	548(%rbx), %edx
 5106      0000
 5107 0096 895034   		movl	%edx, 52(%rax)
 5108 0099 488B03   		movq	(%rbx), %rax
 5109 009c 8B932802 		movl	552(%rbx), %edx
 5109      0000
 5110 00a2 895038   		movl	%edx, 56(%rax)
 5111 00a5 488B03   		movq	(%rbx), %rax
 5112 00a8 FF10     		call	*(%rax)
 5113              	.LVL635:
 5114 00aa 4C63A31C 		movslq	540(%rbx), %r12
 5114      020000
 5115              	.L498:
 5116              	.LVL636:
1355:fltk-1.3.4-1/jpeg/jdhuff.c **** 	       cinfo->Ss, cinfo->Se, cinfo->Ah, cinfo->Al);
1356:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1357:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Update progression status, and verify that scan order is legal.
1358:fltk-1.3.4-1/jpeg/jdhuff.c ****      * Note that inter-scan inconsistencies are treated as warnings
1359:fltk-1.3.4-1/jpeg/jdhuff.c ****      * not fatal errors ... not clear if this is right way to behave.
1360:fltk-1.3.4-1/jpeg/jdhuff.c ****      */
1361:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 5117              		.loc 1 1361 18 discriminator 1 view .LVU1638
 5118              		.loc 1 1361 5 is_stmt 0 discriminator 1 view .LVU1639
 5119 00b1 8B83C001 		movl	448(%rbx), %eax
 5119      0000
 5120 00b7 85C0     		testl	%eax, %eax
 5121 00b9 0F8EE400 		jle	.L499
 5121      0000
 5122              	.LBB46:
 5123              	.LBB47:
1362:fltk-1.3.4-1/jpeg/jdhuff.c ****       int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
1363:fltk-1.3.4-1/jpeg/jdhuff.c ****       int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
1364:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
1365:fltk-1.3.4-1/jpeg/jdhuff.c **** 	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
1366:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
1367:fltk-1.3.4-1/jpeg/jdhuff.c **** 	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 5124              		.loc 1 1367 6 view .LVU1640
 5125 00bf 48896C24 		movq	%rbp, 8(%rsp)
 5125      08
 5126              	.LBE47:
 5127              	.LBE46:
1361:fltk-1.3.4-1/jpeg/jdhuff.c ****       int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 5128              		.loc 1 1361 5 view .LVU1641
 5129 00c4 4531FF   		xorl	%r15d, %r15d
 5130              	.LBB50:
 5131              	.LBB48:
 5132              		.loc 1 1367 6 view .LVU1642
 5133 00c7 4531ED   		xorl	%r13d, %r13d
 5134              	.LVL637:
 5135              	.L504:
 5136              		.loc 1 1367 6 view .LVU1643
 5137              	.LBE48:
1362:fltk-1.3.4-1/jpeg/jdhuff.c ****       int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 5138              		.loc 1 1362 7 is_stmt 1 view .LVU1644
1362:fltk-1.3.4-1/jpeg/jdhuff.c ****       int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 5139              		.loc 1 1362 18 is_stmt 0 view .LVU1645
 5140 00ca 4A8B84FB 		movq	456(%rbx,%r15,8), %rax
 5140      C8010000 
 5141 00d2 48634004 		movslq	4(%rax), %rax
 5142 00d6 4989C6   		movq	%rax, %r14
 5143              	.LVL638:
1363:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 5144              		.loc 1 1363 7 is_stmt 1 view .LVU1646
1363:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 5145              		.loc 1 1363 45 is_stmt 0 view .LVU1647
 5146 00d9 48C1E008 		salq	$8, %rax
 5147              	.LVL639:
1363:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 5148              		.loc 1 1363 45 view .LVU1648
 5149 00dd 480383C0 		addq	192(%rbx), %rax
 5149      000000
 5150 00e4 4889C5   		movq	%rax, %rbp
 5151              	.LVL640:
1364:fltk-1.3.4-1/jpeg/jdhuff.c **** 	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 5152              		.loc 1 1364 7 is_stmt 1 view .LVU1649
1364:fltk-1.3.4-1/jpeg/jdhuff.c **** 	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 5153              		.loc 1 1364 10 is_stmt 0 view .LVU1650
 5154 00e7 4585E4   		testl	%r12d, %r12d
 5155 00ea 7436     		je	.L500
1364:fltk-1.3.4-1/jpeg/jdhuff.c **** 	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 5156              		.loc 1 1364 21 discriminator 1 view .LVU1651
 5157 00ec 8B00     		movl	(%rax), %eax
 5158              	.LVL641:
1364:fltk-1.3.4-1/jpeg/jdhuff.c **** 	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 5159              		.loc 1 1364 21 discriminator 1 view .LVU1652
 5160 00ee 85C0     		testl	%eax, %eax
 5161 00f0 7930     		jns	.L500
1365:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 5162              		.loc 1 1365 2 is_stmt 1 view .LVU1653
 5163 00f2 488B13   		movq	(%rbx), %rdx
 5164 00f5 BEFFFFFF 		movl	$-1, %esi
 5164      FF
 5165 00fa 4889DF   		movq	%rbx, %rdi
 5166 00fd C7422876 		movl	$118, 40(%rdx)
 5166      000000
 5167 0104 488B13   		movq	(%rbx), %rdx
 5168 0107 4489722C 		movl	%r14d, 44(%rdx)
 5169 010b 488B13   		movq	(%rbx), %rdx
 5170 010e C7423000 		movl	$0, 48(%rdx)
 5170      000000
 5171 0115 488B13   		movq	(%rbx), %rdx
 5172 0118 FF5208   		call	*8(%rdx)
 5173              	.LVL642:
 5174 011b 4C63A31C 		movslq	540(%rbx), %r12
 5174      020000
 5175              	.L500:
1366:fltk-1.3.4-1/jpeg/jdhuff.c **** 	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 5176              		.loc 1 1366 7 view .LVU1654
 5177              	.LVL643:
1366:fltk-1.3.4-1/jpeg/jdhuff.c **** 	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 5178              		.loc 1 1366 31 view .LVU1655
1366:fltk-1.3.4-1/jpeg/jdhuff.c **** 	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 5179              		.loc 1 1366 7 is_stmt 0 view .LVU1656
 5180 0122 4439A320 		cmpl	%r12d, 544(%rbx)
 5180      020000
 5181 0129 7C62     		jl	.L501
 5182              	.LVL644:
 5183 012b 0F1F4400 		.p2align 4,,10
 5183      00
 5184              		.p2align 3
 5185              	.L503:
 5186              	.LBB49:
 5187              		.loc 1 1367 2 is_stmt 1 view .LVU1657
1368:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (cinfo->Ah != expected)
 5188              		.loc 1 1368 2 view .LVU1658
1367:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (cinfo->Ah != expected)
 5189              		.loc 1 1367 6 is_stmt 0 view .LVU1659
 5190 0130 428B44A5 		movl	0(%rbp,%r12,4), %eax
 5190      00
 5191 0135 4489EA   		movl	%r13d, %edx
 5192 0138 85C0     		testl	%eax, %eax
 5193 013a 420F4954 		cmovns	0(%rbp,%r12,4), %edx
 5193      A500
 5194              		.loc 1 1368 5 view .LVU1660
 5195 0140 39932402 		cmpl	%edx, 548(%rbx)
 5195      0000
 5196 0146 7426     		je	.L502
1369:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 5197              		.loc 1 1369 4 is_stmt 1 view .LVU1661
 5198 0148 488B13   		movq	(%rbx), %rdx
 5199 014b BEFFFFFF 		movl	$-1, %esi
 5199      FF
 5200 0150 4889DF   		movq	%rbx, %rdi
 5201 0153 C7422876 		movl	$118, 40(%rdx)
 5201      000000
 5202              	.LVL645:
 5203              		.loc 1 1369 4 is_stmt 0 view .LVU1662
 5204 015a 488B13   		movq	(%rbx), %rdx
 5205 015d 4489722C 		movl	%r14d, 44(%rdx)
 5206 0161 488B13   		movq	(%rbx), %rdx
 5207 0164 44896230 		movl	%r12d, 48(%rdx)
 5208 0168 488B13   		movq	(%rbx), %rdx
 5209 016b FF5208   		call	*8(%rdx)
 5210              	.LVL646:
 5211              	.L502:
1370:fltk-1.3.4-1/jpeg/jdhuff.c **** 	coef_bit_ptr[coefi] = cinfo->Al;
 5212              		.loc 1 1370 2 is_stmt 1 discriminator 2 view .LVU1663
 5213              		.loc 1 1370 29 is_stmt 0 discriminator 2 view .LVU1664
 5214 016e 8B932802 		movl	552(%rbx), %edx
 5214      0000
 5215              		.loc 1 1370 22 discriminator 2 view .LVU1665
 5216 0174 428954A5 		movl	%edx, 0(%rbp,%r12,4)
 5216      00
 5217              	.LBE49:
1366:fltk-1.3.4-1/jpeg/jdhuff.c **** 	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 5218              		.loc 1 1366 51 is_stmt 1 discriminator 2 view .LVU1666
 5219              	.LVL647:
1366:fltk-1.3.4-1/jpeg/jdhuff.c **** 	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 5220              		.loc 1 1366 31 discriminator 2 view .LVU1667
 5221 0179 4983C401 		addq	$1, %r12
 5222              	.LVL648:
1366:fltk-1.3.4-1/jpeg/jdhuff.c **** 	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 5223              		.loc 1 1366 7 is_stmt 0 discriminator 2 view .LVU1668
 5224 017d 4439A320 		cmpl	%r12d, 544(%rbx)
 5224      020000
 5225 0184 7DAA     		jge	.L503
 5226 0186 4C63A31C 		movslq	540(%rbx), %r12
 5226      020000
 5227              	.L501:
1366:fltk-1.3.4-1/jpeg/jdhuff.c **** 	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 5228              		.loc 1 1366 7 discriminator 2 view .LVU1669
 5229              	.LBE50:
1361:fltk-1.3.4-1/jpeg/jdhuff.c ****       int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 5230              		.loc 1 1361 45 is_stmt 1 discriminator 2 view .LVU1670
 5231              	.LVL649:
1361:fltk-1.3.4-1/jpeg/jdhuff.c ****       int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 5232              		.loc 1 1361 18 discriminator 2 view .LVU1671
 5233 018d 4983C701 		addq	$1, %r15
 5234              	.LVL650:
1361:fltk-1.3.4-1/jpeg/jdhuff.c ****       int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 5235              		.loc 1 1361 5 is_stmt 0 discriminator 2 view .LVU1672
 5236 0191 4439BBC0 		cmpl	%r15d, 448(%rbx)
 5236      010000
 5237 0198 0F8F2CFF 		jg	.L504
 5237      FFFF
 5238 019e 488B6C24 		movq	8(%rsp), %rbp
 5238      08
 5239              	.LVL651:
 5240              	.L499:
1371:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
1372:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1373:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1374:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Select MCU decoding routine */
1375:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (cinfo->Ah == 0) {
 5241              		.loc 1 1375 5 is_stmt 1 view .LVU1673
 5242              		.loc 1 1375 8 is_stmt 0 view .LVU1674
 5243 01a3 8B832402 		movl	548(%rbx), %eax
 5243      0000
 5244 01a9 85C0     		testl	%eax, %eax
 5245 01ab 0F858F04 		jne	.L505
 5245      0000
1376:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (cinfo->Ss == 0)
 5246              		.loc 1 1376 7 is_stmt 1 view .LVU1675
1377:fltk-1.3.4-1/jpeg/jdhuff.c **** 	entropy->pub.decode_mcu = decode_mcu_DC_first;
 5247              		.loc 1 1377 26 is_stmt 0 view .LVU1676
 5248 01b1 4585E4   		testl	%r12d, %r12d
 5249 01b4 488D0500 		leaq	decode_mcu_DC_first(%rip), %rax
 5249      000000
 5250 01bb 488D1500 		leaq	decode_mcu_AC_first(%rip), %rdx
 5250      000000
 5251 01c2 480F45C2 		cmovne	%rdx, %rax
 5252 01c6 48894508 		movq	%rax, 8(%rbp)
 5253              	.L507:
 5254              	.LVL652:
1378:fltk-1.3.4-1/jpeg/jdhuff.c ****       else
1379:fltk-1.3.4-1/jpeg/jdhuff.c **** 	entropy->pub.decode_mcu = decode_mcu_AC_first;
1380:fltk-1.3.4-1/jpeg/jdhuff.c ****     } else {
1381:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (cinfo->Ss == 0)
1382:fltk-1.3.4-1/jpeg/jdhuff.c **** 	entropy->pub.decode_mcu = decode_mcu_DC_refine;
1383:fltk-1.3.4-1/jpeg/jdhuff.c ****       else
1384:fltk-1.3.4-1/jpeg/jdhuff.c **** 	entropy->pub.decode_mcu = decode_mcu_AC_refine;
1385:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1386:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1387:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 5255              		.loc 1 1387 18 is_stmt 1 discriminator 1 view .LVU1677
 5256              		.loc 1 1387 5 is_stmt 0 discriminator 1 view .LVU1678
 5257 01ca 448BBBC0 		movl	448(%rbx), %r15d
 5257      010000
 5258 01d1 4531E4   		xorl	%r12d, %r12d
 5259 01d4 4585FF   		testl	%r15d, %r15d
 5260 01d7 7E45     		jle	.L513
 5261              	.LVL653:
 5262 01d9 0F1F8000 		.p2align 4,,10
 5262      000000
 5263              		.p2align 3
 5264              	.L509:
1388:fltk-1.3.4-1/jpeg/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 5265              		.loc 1 1388 7 is_stmt 1 view .LVU1679
1389:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Make sure requested tables are present, and compute derived tables.
1390:fltk-1.3.4-1/jpeg/jdhuff.c ****        * We may build same derived table more than once, but it's not expensive.
1391:fltk-1.3.4-1/jpeg/jdhuff.c ****        */
1392:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (cinfo->Ss == 0) {
 5266              		.loc 1 1392 10 is_stmt 0 view .LVU1680
 5267 01e0 448BB31C 		movl	540(%rbx), %r14d
 5267      020000
1388:fltk-1.3.4-1/jpeg/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 5268              		.loc 1 1388 15 view .LVU1681
 5269 01e7 4A8B84E3 		movq	456(%rbx,%r12,8), %rax
 5269      C8010000 
 5270              	.LVL654:
 5271              		.loc 1 1392 7 is_stmt 1 view .LVU1682
 5272              		.loc 1 1392 10 is_stmt 0 view .LVU1683
 5273 01ef 4585F6   		testl	%r14d, %r14d
 5274 01f2 0F85F803 		jne	.L511
 5274      0000
1393:fltk-1.3.4-1/jpeg/jdhuff.c **** 	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
 5275              		.loc 1 1393 2 is_stmt 1 view .LVU1684
 5276              		.loc 1 1393 5 is_stmt 0 view .LVU1685
 5277 01f8 448BAB24 		movl	548(%rbx), %r13d
 5277      020000
 5278 01ff 4585ED   		testl	%r13d, %r13d
 5279 0202 0F841004 		je	.L583
 5279      0000
 5280              	.LVL655:
 5281              	.L512:
1394:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  tbl = compptr->dc_tbl_no;
1395:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
1396:fltk-1.3.4-1/jpeg/jdhuff.c **** 				  & entropy->derived_tbls[tbl]);
1397:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
1398:fltk-1.3.4-1/jpeg/jdhuff.c ****       } else {
1399:fltk-1.3.4-1/jpeg/jdhuff.c **** 	tbl = compptr->ac_tbl_no;
1400:fltk-1.3.4-1/jpeg/jdhuff.c **** 	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
1401:fltk-1.3.4-1/jpeg/jdhuff.c **** 				& entropy->derived_tbls[tbl]);
1402:fltk-1.3.4-1/jpeg/jdhuff.c **** 	/* remember the single active table */
1403:fltk-1.3.4-1/jpeg/jdhuff.c **** 	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
1404:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
1405:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Initialize DC predictions to 0 */
1406:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->saved.last_dc_val[ci] = 0;
 5282              		.loc 1 1406 7 is_stmt 1 discriminator 2 view .LVU1686
 5283              		.loc 1 1406 38 is_stmt 0 discriminator 2 view .LVU1687
 5284 0208 42C744A5 		movl	$0, 44(%rbp,%r12,4)
 5284      2C000000 
 5284      00
1387:fltk-1.3.4-1/jpeg/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 5285              		.loc 1 1387 45 is_stmt 1 discriminator 2 view .LVU1688
 5286              	.LVL656:
1387:fltk-1.3.4-1/jpeg/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 5287              		.loc 1 1387 18 discriminator 2 view .LVU1689
 5288 0211 4983C401 		addq	$1, %r12
 5289              	.LVL657:
1387:fltk-1.3.4-1/jpeg/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 5290              		.loc 1 1387 5 is_stmt 0 discriminator 2 view .LVU1690
 5291 0215 4439A3C0 		cmpl	%r12d, 448(%rbx)
 5291      010000
 5292 021c 7FC2     		jg	.L509
 5293              	.L513:
1407:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1408:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1409:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Initialize private state variables */
1410:fltk-1.3.4-1/jpeg/jdhuff.c ****     entropy->saved.EOBRUN = 0;
 5294              		.loc 1 1410 5 is_stmt 1 view .LVU1691
 5295              		.loc 1 1410 27 is_stmt 0 view .LVU1692
 5296 021e C7452800 		movl	$0, 40(%rbp)
 5296      000000
 5297              	.L510:
1411:fltk-1.3.4-1/jpeg/jdhuff.c ****   } else {
1412:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Check that the scan parameters Ss, Se, Ah/Al are OK for sequential JPEG.
1413:fltk-1.3.4-1/jpeg/jdhuff.c ****      * This ought to be an error condition, but we make it a warning because
1414:fltk-1.3.4-1/jpeg/jdhuff.c ****      * there are some baseline files out there with all zeroes in these bytes.
1415:fltk-1.3.4-1/jpeg/jdhuff.c ****      */
1416:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
1417:fltk-1.3.4-1/jpeg/jdhuff.c **** 	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
1418:fltk-1.3.4-1/jpeg/jdhuff.c **** 	cinfo->Se != cinfo->lim_Se))
1419:fltk-1.3.4-1/jpeg/jdhuff.c ****       WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
1420:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1421:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Select MCU decoding routine */
1422:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* We retain the hard-coded case for full-size blocks.
1423:fltk-1.3.4-1/jpeg/jdhuff.c ****      * This is not necessary, but it appears that this version is slightly
1424:fltk-1.3.4-1/jpeg/jdhuff.c ****      * more performant in the given implementation.
1425:fltk-1.3.4-1/jpeg/jdhuff.c ****      * With an improved implementation we would prefer a single optimized
1426:fltk-1.3.4-1/jpeg/jdhuff.c ****      * function.
1427:fltk-1.3.4-1/jpeg/jdhuff.c ****      */
1428:fltk-1.3.4-1/jpeg/jdhuff.c ****     if (cinfo->lim_Se != DCTSIZE2-1)
1429:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->pub.decode_mcu = decode_mcu_sub;
1430:fltk-1.3.4-1/jpeg/jdhuff.c ****     else
1431:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->pub.decode_mcu = decode_mcu;
1432:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1433:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
1434:fltk-1.3.4-1/jpeg/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
1435:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Compute derived values for Huffman tables */
1436:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* We may do this more than once for a table, but it's not expensive */
1437:fltk-1.3.4-1/jpeg/jdhuff.c ****       tbl = compptr->dc_tbl_no;
1438:fltk-1.3.4-1/jpeg/jdhuff.c ****       jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
1439:fltk-1.3.4-1/jpeg/jdhuff.c **** 			      & entropy->dc_derived_tbls[tbl]);
1440:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (cinfo->lim_Se) {	/* AC needs no table when not present */
1441:fltk-1.3.4-1/jpeg/jdhuff.c **** 	tbl = compptr->ac_tbl_no;
1442:fltk-1.3.4-1/jpeg/jdhuff.c **** 	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
1443:fltk-1.3.4-1/jpeg/jdhuff.c **** 				& entropy->ac_derived_tbls[tbl]);
1444:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
1445:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Initialize DC predictions to 0 */
1446:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->saved.last_dc_val[ci] = 0;
1447:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1448:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1449:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Precalculate decoding info for each block in an MCU of this scan */
1450:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
1451:fltk-1.3.4-1/jpeg/jdhuff.c ****       ci = cinfo->MCU_membership[blkn];
1452:fltk-1.3.4-1/jpeg/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
1453:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Precalculate which table to use for each block */
1454:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->dc_cur_tbls[blkn] = entropy->dc_derived_tbls[compptr->dc_tbl_no];
1455:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
1456:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Decide whether we really care about the coefficient values */
1457:fltk-1.3.4-1/jpeg/jdhuff.c ****       if (compptr->component_needed) {
1458:fltk-1.3.4-1/jpeg/jdhuff.c **** 	ci = compptr->DCT_v_scaled_size;
1459:fltk-1.3.4-1/jpeg/jdhuff.c **** 	i = compptr->DCT_h_scaled_size;
1460:fltk-1.3.4-1/jpeg/jdhuff.c **** 	switch (cinfo->lim_Se) {
1461:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (1*1-1):
1462:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1;
1463:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
1464:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (2*2-1):
1465:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (ci <= 0 || ci > 2) ci = 2;
1466:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 2) i = 2;
1467:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
1468:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
1469:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (3*3-1):
1470:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (ci <= 0 || ci > 3) ci = 3;
1471:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 3) i = 3;
1472:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
1473:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
1474:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (4*4-1):
1475:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (ci <= 0 || ci > 4) ci = 4;
1476:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 4) i = 4;
1477:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
1478:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
1479:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (5*5-1):
1480:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (ci <= 0 || ci > 5) ci = 5;
1481:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 5) i = 5;
1482:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
1483:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
1484:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (6*6-1):
1485:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (ci <= 0 || ci > 6) ci = 6;
1486:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 6) i = 6;
1487:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
1488:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
1489:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (7*7-1):
1490:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (ci <= 0 || ci > 7) ci = 7;
1491:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 7) i = 7;
1492:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
1493:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
1494:fltk-1.3.4-1/jpeg/jdhuff.c **** 	default:
1495:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (ci <= 0 || ci > 8) ci = 8;
1496:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 8) i = 8;
1497:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
1498:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
1499:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
1500:fltk-1.3.4-1/jpeg/jdhuff.c ****       } else {
1501:fltk-1.3.4-1/jpeg/jdhuff.c **** 	entropy->coef_limit[blkn] = 0;
1502:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
1503:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1504:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
1505:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1506:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Initialize bitread state variables */
1507:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->bitstate.bits_left = 0;
 5298              		.loc 1 1507 3 is_stmt 1 view .LVU1693
 5299              		.loc 1 1507 31 is_stmt 0 view .LVU1694
 5300 0225 C7452000 		movl	$0, 32(%rbp)
 5300      000000
1508:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
 5301              		.loc 1 1508 3 is_stmt 1 view .LVU1695
 5302              		.loc 1 1508 32 is_stmt 0 view .LVU1696
 5303 022c 48C74518 		movq	$0, 24(%rbp)
 5303      00000000 
1509:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->insufficient_data = FALSE;
 5304              		.loc 1 1509 3 is_stmt 1 view .LVU1697
 5305              		.loc 1 1509 30 is_stmt 0 view .LVU1698
 5306 0234 C7453C00 		movl	$0, 60(%rbp)
 5306      000000
1510:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1511:fltk-1.3.4-1/jpeg/jdhuff.c ****   /* Initialize restart counter */
1512:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->restarts_to_go = cinfo->restart_interval;
 5307              		.loc 1 1512 3 is_stmt 1 view .LVU1699
 5308              		.loc 1 1512 34 is_stmt 0 view .LVU1700
 5309 023b 8B837401 		movl	372(%rbx), %eax
 5309      0000
 5310              		.loc 1 1512 27 view .LVU1701
 5311 0241 894540   		movl	%eax, 64(%rbp)
1513:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 5312              		.loc 1 1513 1 view .LVU1702
 5313 0244 4883C418 		addq	$24, %rsp
 5314              		.cfi_remember_state
 5315              		.cfi_def_cfa_offset 56
 5316 0248 5B       		popq	%rbx
 5317              		.cfi_def_cfa_offset 48
 5318              	.LVL658:
 5319              		.loc 1 1513 1 view .LVU1703
 5320 0249 5D       		popq	%rbp
 5321              		.cfi_def_cfa_offset 40
 5322 024a 415C     		popq	%r12
 5323              		.cfi_def_cfa_offset 32
 5324 024c 415D     		popq	%r13
 5325              		.cfi_def_cfa_offset 24
 5326 024e 415E     		popq	%r14
 5327              		.cfi_def_cfa_offset 16
 5328 0250 415F     		popq	%r15
 5329              		.cfi_def_cfa_offset 8
 5330 0252 C3       		ret
 5331              	.LVL659:
 5332              		.p2align 4,,10
 5333 0253 0F1F4400 		.p2align 3
 5333      00
 5334              	.L493:
 5335              		.cfi_restore_state
1416:fltk-1.3.4-1/jpeg/jdhuff.c **** 	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 5336              		.loc 1 1416 5 is_stmt 1 view .LVU1704
1416:fltk-1.3.4-1/jpeg/jdhuff.c **** 	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 5337              		.loc 1 1416 8 is_stmt 0 view .LVU1705
 5338 0258 4585E4   		testl	%r12d, %r12d
 5339 025b 0F848701 		je	.L584
 5339      0000
 5340              	.L514:
1419:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 5341              		.loc 1 1419 7 is_stmt 1 view .LVU1706
 5342 0261 488B03   		movq	(%rbx), %rax
 5343 0264 BEFFFFFF 		movl	$-1, %esi
 5343      FF
 5344 0269 4889DF   		movq	%rbx, %rdi
 5345 026c C740287D 		movl	$125, 40(%rax)
 5345      000000
 5346 0273 488B03   		movq	(%rbx), %rax
 5347 0276 FF5008   		call	*8(%rax)
 5348              	.LVL660:
 5349 0279 8B833802 		movl	568(%rbx), %eax
 5349      0000
 5350              	.L516:
1428:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->pub.decode_mcu = decode_mcu_sub;
 5351              		.loc 1 1428 5 view .LVU1707
1431:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 5352              		.loc 1 1431 31 is_stmt 0 view .LVU1708
 5353 027f 83F83F   		cmpl	$63, %eax
 5354 0282 488D1500 		leaq	decode_mcu(%rip), %rdx
 5354      000000
 5355 0289 488D0500 		leaq	decode_mcu_sub(%rip), %rax
 5355      000000
 5356 0290 480F44C2 		cmove	%rdx, %rax
1433:fltk-1.3.4-1/jpeg/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 5357              		.loc 1 1433 5 view .LVU1709
 5358 0294 4531E4   		xorl	%r12d, %r12d
 5359 0297 48894508 		movq	%rax, 8(%rbp)
 5360              	.LVL661:
1433:fltk-1.3.4-1/jpeg/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 5361              		.loc 1 1433 18 is_stmt 1 view .LVU1710
1433:fltk-1.3.4-1/jpeg/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 5362              		.loc 1 1433 5 is_stmt 0 view .LVU1711
 5363 029b 448B83C0 		movl	448(%rbx), %r8d
 5363      010000
 5364 02a2 4585C0   		testl	%r8d, %r8d
 5365 02a5 7E45     		jle	.L522
 5366              	.LVL662:
 5367              	.L518:
1434:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Compute derived values for Huffman tables */
 5368              		.loc 1 1434 7 is_stmt 1 view .LVU1712
1434:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Compute derived values for Huffman tables */
 5369              		.loc 1 1434 15 is_stmt 0 view .LVU1713
 5370 02a7 4E8BACE3 		movq	456(%rbx,%r12,8), %r13
 5370      C8010000 
 5371              	.LVL663:
1437:fltk-1.3.4-1/jpeg/jdhuff.c ****       jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 5372              		.loc 1 1437 7 is_stmt 1 view .LVU1714
1438:fltk-1.3.4-1/jpeg/jdhuff.c **** 			      & entropy->dc_derived_tbls[tbl]);
 5373              		.loc 1 1438 7 is_stmt 0 view .LVU1715
 5374 02af BE010000 		movl	$1, %esi
 5374      00
 5375 02b4 4889DF   		movq	%rbx, %rdi
1437:fltk-1.3.4-1/jpeg/jdhuff.c ****       jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 5376              		.loc 1 1437 11 view .LVU1716
 5377 02b7 49634514 		movslq	20(%r13), %rax
 5378 02bb 4889C2   		movq	%rax, %rdx
 5379              	.LVL664:
1438:fltk-1.3.4-1/jpeg/jdhuff.c **** 			      & entropy->dc_derived_tbls[tbl]);
 5380              		.loc 1 1438 7 is_stmt 1 view .LVU1717
 5381 02be 488D4CC5 		leaq	112(%rbp,%rax,8), %rcx
 5381      70
 5382 02c3 E8000000 		call	jpeg_make_d_derived_tbl
 5382      00
 5383              	.LVL665:
1440:fltk-1.3.4-1/jpeg/jdhuff.c **** 	tbl = compptr->ac_tbl_no;
 5384              		.loc 1 1440 7 view .LVU1718
1440:fltk-1.3.4-1/jpeg/jdhuff.c **** 	tbl = compptr->ac_tbl_no;
 5385              		.loc 1 1440 10 is_stmt 0 view .LVU1719
 5386 02c8 8BB33802 		movl	568(%rbx), %esi
 5386      0000
 5387 02ce 85F6     		testl	%esi, %esi
 5388 02d0 0F85FA02 		jne	.L585
 5388      0000
 5389              	.L521:
1446:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 5390              		.loc 1 1446 7 is_stmt 1 discriminator 2 view .LVU1720
1446:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 5391              		.loc 1 1446 38 is_stmt 0 discriminator 2 view .LVU1721
 5392 02d6 42C744A5 		movl	$0, 44(%rbp,%r12,4)
 5392      2C000000 
 5392      00
1433:fltk-1.3.4-1/jpeg/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 5393              		.loc 1 1433 45 is_stmt 1 discriminator 2 view .LVU1722
 5394              	.LVL666:
1433:fltk-1.3.4-1/jpeg/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 5395              		.loc 1 1433 18 discriminator 2 view .LVU1723
 5396 02df 4983C401 		addq	$1, %r12
 5397              	.LVL667:
1433:fltk-1.3.4-1/jpeg/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 5398              		.loc 1 1433 5 is_stmt 0 discriminator 2 view .LVU1724
 5399 02e3 4439A3C0 		cmpl	%r12d, 448(%rbx)
 5399      010000
 5400 02ea 7FBB     		jg	.L518
 5401              	.LVL668:
 5402              	.L522:
1450:fltk-1.3.4-1/jpeg/jdhuff.c ****       ci = cinfo->MCU_membership[blkn];
 5403              		.loc 1 1450 20 is_stmt 1 view .LVU1725
1450:fltk-1.3.4-1/jpeg/jdhuff.c ****       ci = cinfo->MCU_membership[blkn];
 5404              		.loc 1 1450 5 is_stmt 0 view .LVU1726
 5405 02ec 8BBBF001 		movl	496(%rbx), %edi
 5405      0000
 5406 02f2 31C0     		xorl	%eax, %eax
 5407 02f4 85FF     		testl	%edi, %edi
 5408 02f6 0F8E29FF 		jle	.L510
 5408      FFFF
 5409 02fc 41B90700 		movl	$7, %r9d
 5409      0000
1497:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5410              		.loc 1 1497 61 view .LVU1727
 5411 0302 4C8D3D00 		leaq	jpeg_zigzag_order(%rip), %r15
 5411      000000
 5412 0309 488D3D00 		leaq	.L526(%rip), %rdi
 5412      000000
 5413 0310 41B80600 		movl	$6, %r8d
 5413      0000
1492:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5414              		.loc 1 1492 62 view .LVU1728
 5415 0316 4C8D3500 		leaq	jpeg_zigzag_order7(%rip), %r14
 5415      000000
1487:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5416              		.loc 1 1487 62 view .LVU1729
 5417 031d 4C8D2D00 		leaq	jpeg_zigzag_order6(%rip), %r13
 5417      000000
1482:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5418              		.loc 1 1482 62 view .LVU1730
 5419 0324 4C8D2500 		leaq	jpeg_zigzag_order5(%rip), %r12
 5419      000000
1477:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5420              		.loc 1 1477 62 view .LVU1731
 5421 032b 4C8D1D00 		leaq	jpeg_zigzag_order4(%rip), %r11
 5421      000000
1472:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5422              		.loc 1 1472 62 view .LVU1732
 5423 0332 4C8D1500 		leaq	jpeg_zigzag_order3(%rip), %r10
 5423      000000
 5424              	.LVL669:
 5425 0339 0F1F8000 		.p2align 4,,10
 5425      000000
 5426              		.p2align 3
 5427              	.L519:
1451:fltk-1.3.4-1/jpeg/jdhuff.c ****       compptr = cinfo->cur_comp_info[ci];
 5428              		.loc 1 1451 7 is_stmt 1 view .LVU1733
1452:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Precalculate which table to use for each block */
 5429              		.loc 1 1452 7 view .LVU1734
1452:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Precalculate which table to use for each block */
 5430              		.loc 1 1452 15 is_stmt 0 view .LVU1735
 5431 0340 48639483 		movslq	500(%rbx,%rax,4), %rdx
 5431      F4010000 
 5432 0348 488B94D3 		movq	456(%rbx,%rdx,8), %rdx
 5432      C8010000 
 5433              	.LVL670:
1454:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
 5434              		.loc 1 1454 7 is_stmt 1 view .LVU1736
1454:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
 5435              		.loc 1 1454 60 is_stmt 0 view .LVU1737
 5436 0350 48634A14 		movslq	20(%rdx), %rcx
 5437 0354 488B4CCD 		movq	112(%rbp,%rcx,8), %rcx
 5437      70
1454:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
 5438              		.loc 1 1454 34 view .LVU1738
 5439 0359 48898CC5 		movq	%rcx, 176(%rbp,%rax,8)
 5439      B0000000 
 5440              	.LVL671:
1455:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Decide whether we really care about the coefficient values */
 5441              		.loc 1 1455 7 is_stmt 1 view .LVU1739
1455:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Decide whether we really care about the coefficient values */
 5442              		.loc 1 1455 60 is_stmt 0 view .LVU1740
 5443 0361 48634A18 		movslq	24(%rdx), %rcx
 5444 0365 488B8CCD 		movq	144(%rbp,%rcx,8), %rcx
 5444      90000000 
1455:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Decide whether we really care about the coefficient values */
 5445              		.loc 1 1455 34 view .LVU1741
 5446 036d 48898CC5 		movq	%rcx, 256(%rbp,%rax,8)
 5446      00010000 
1457:fltk-1.3.4-1/jpeg/jdhuff.c **** 	ci = compptr->DCT_v_scaled_size;
 5447              		.loc 1 1457 7 is_stmt 1 view .LVU1742
1457:fltk-1.3.4-1/jpeg/jdhuff.c **** 	ci = compptr->DCT_v_scaled_size;
 5448              		.loc 1 1457 10 is_stmt 0 view .LVU1743
 5449 0375 8B4A34   		movl	52(%rdx), %ecx
 5450 0378 85C9     		testl	%ecx, %ecx
 5451 037a 0F844002 		je	.L523
 5451      0000
1458:fltk-1.3.4-1/jpeg/jdhuff.c **** 	i = compptr->DCT_h_scaled_size;
 5452              		.loc 1 1458 2 is_stmt 1 view .LVU1744
 5453 0380 83BB3802 		cmpl	$48, 568(%rbx)
 5453      000030
1458:fltk-1.3.4-1/jpeg/jdhuff.c **** 	i = compptr->DCT_h_scaled_size;
 5454              		.loc 1 1458 5 is_stmt 0 view .LVU1745
 5455 0387 8B7228   		movl	40(%rdx), %esi
 5456              	.LVL672:
1459:fltk-1.3.4-1/jpeg/jdhuff.c **** 	switch (cinfo->lim_Se) {
 5457              		.loc 1 1459 2 is_stmt 1 view .LVU1746
1459:fltk-1.3.4-1/jpeg/jdhuff.c **** 	switch (cinfo->lim_Se) {
 5458              		.loc 1 1459 4 is_stmt 0 view .LVU1747
 5459 038a 8B4A24   		movl	36(%rdx), %ecx
 5460              	.LVL673:
1460:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (1*1-1):
 5461              		.loc 1 1460 2 is_stmt 1 view .LVU1748
 5462 038d 7711     		ja	.L524
 5463 038f 8B933802 		movl	568(%rbx), %edx
 5463      0000
 5464              	.LVL674:
1460:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (1*1-1):
 5465              		.loc 1 1460 2 is_stmt 0 view .LVU1749
 5466 0395 48631497 		movslq	(%rdi,%rdx,4), %rdx
 5467 0399 4801FA   		addq	%rdi, %rdx
 5468 039c 3EFFE2   		notrack jmp	*%rdx
 5469              		.section	.rodata.start_pass_huff_decoder,"a",@progbits
 5470              		.align 4
 5471              		.align 4
 5472              	.L526:
 5473 0000 00000000 		.long	.L532-.L526
 5474 0004 00000000 		.long	.L524-.L526
 5475 0008 00000000 		.long	.L524-.L526
 5476 000c 00000000 		.long	.L531-.L526
 5477 0010 00000000 		.long	.L524-.L526
 5478 0014 00000000 		.long	.L524-.L526
 5479 0018 00000000 		.long	.L524-.L526
 5480 001c 00000000 		.long	.L524-.L526
 5481 0020 00000000 		.long	.L530-.L526
 5482 0024 00000000 		.long	.L524-.L526
 5483 0028 00000000 		.long	.L524-.L526
 5484 002c 00000000 		.long	.L524-.L526
 5485 0030 00000000 		.long	.L524-.L526
 5486 0034 00000000 		.long	.L524-.L526
 5487 0038 00000000 		.long	.L524-.L526
 5488 003c 00000000 		.long	.L529-.L526
 5489 0040 00000000 		.long	.L524-.L526
 5490 0044 00000000 		.long	.L524-.L526
 5491 0048 00000000 		.long	.L524-.L526
 5492 004c 00000000 		.long	.L524-.L526
 5493 0050 00000000 		.long	.L524-.L526
 5494 0054 00000000 		.long	.L524-.L526
 5495 0058 00000000 		.long	.L524-.L526
 5496 005c 00000000 		.long	.L524-.L526
 5497 0060 00000000 		.long	.L528-.L526
 5498 0064 00000000 		.long	.L524-.L526
 5499 0068 00000000 		.long	.L524-.L526
 5500 006c 00000000 		.long	.L524-.L526
 5501 0070 00000000 		.long	.L524-.L526
 5502 0074 00000000 		.long	.L524-.L526
 5503 0078 00000000 		.long	.L524-.L526
 5504 007c 00000000 		.long	.L524-.L526
 5505 0080 00000000 		.long	.L524-.L526
 5506 0084 00000000 		.long	.L524-.L526
 5507 0088 00000000 		.long	.L524-.L526
 5508 008c 00000000 		.long	.L527-.L526
 5509 0090 00000000 		.long	.L524-.L526
 5510 0094 00000000 		.long	.L524-.L526
 5511 0098 00000000 		.long	.L524-.L526
 5512 009c 00000000 		.long	.L524-.L526
 5513 00a0 00000000 		.long	.L524-.L526
 5514 00a4 00000000 		.long	.L524-.L526
 5515 00a8 00000000 		.long	.L524-.L526
 5516 00ac 00000000 		.long	.L524-.L526
 5517 00b0 00000000 		.long	.L524-.L526
 5518 00b4 00000000 		.long	.L524-.L526
 5519 00b8 00000000 		.long	.L524-.L526
 5520 00bc 00000000 		.long	.L524-.L526
 5521 00c0 00000000 		.long	.L525-.L526
 5522              		.section	.text.start_pass_huff_decoder
 5523 039f 90       		.p2align 4,,10
 5524              		.p2align 3
 5525              	.L524:
1495:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 8) i = 8;
 5526              		.loc 1 1495 4 is_stmt 1 view .LVU1750
1495:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 8) i = 8;
 5527              		.loc 1 1495 16 is_stmt 0 view .LVU1751
 5528 03a0 8D56FF   		leal	-1(%rsi), %edx
 5529 03a3 83FA07   		cmpl	$7, %edx
 5530 03a6 410F47D1 		cmova	%r9d, %edx
 5531              	.LVL675:
1496:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 5532              		.loc 1 1496 4 is_stmt 1 view .LVU1752
1496:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 5533              		.loc 1 1496 15 is_stmt 0 view .LVU1753
 5534 03aa 83E901   		subl	$1, %ecx
 5535              	.LVL676:
1496:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 5536              		.loc 1 1496 15 view .LVU1754
 5537 03ad 83F907   		cmpl	$7, %ecx
 5538 03b0 410F47C9 		cmova	%r9d, %ecx
 5539              	.LVL677:
1497:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5540              		.loc 1 1497 4 is_stmt 1 view .LVU1755
1497:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5541              		.loc 1 1497 61 is_stmt 0 view .LVU1756
 5542 03b4 4863D2   		movslq	%edx, %rdx
 5543 03b7 4863C9   		movslq	%ecx, %rcx
 5544 03ba 488D14D1 		leaq	(%rcx,%rdx,8), %rdx
1497:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5545              		.loc 1 1497 34 view .LVU1757
 5546 03be 418B1497 		movl	(%r15,%rdx,4), %edx
 5547 03c2 83C201   		addl	$1, %edx
1497:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5548              		.loc 1 1497 30 view .LVU1758
 5549 03c5 89948550 		movl	%edx, 336(%rbp,%rax,4)
 5549      010000
1498:fltk-1.3.4-1/jpeg/jdhuff.c **** 	}
 5550              		.loc 1 1498 4 is_stmt 1 view .LVU1759
 5551 03cc 0F1F4000 		.p2align 4,,10
 5552              		.p2align 3
 5553              	.L533:
1450:fltk-1.3.4-1/jpeg/jdhuff.c ****       ci = cinfo->MCU_membership[blkn];
 5554              		.loc 1 1450 49 discriminator 2 view .LVU1760
 5555              	.LVL678:
1450:fltk-1.3.4-1/jpeg/jdhuff.c ****       ci = cinfo->MCU_membership[blkn];
 5556              		.loc 1 1450 20 discriminator 2 view .LVU1761
 5557 03d0 4883C001 		addq	$1, %rax
 5558              	.LVL679:
1450:fltk-1.3.4-1/jpeg/jdhuff.c ****       ci = cinfo->MCU_membership[blkn];
 5559              		.loc 1 1450 5 is_stmt 0 discriminator 2 view .LVU1762
 5560 03d4 3983F001 		cmpl	%eax, 496(%rbx)
 5560      0000
 5561 03da 0F8F60FF 		jg	.L519
 5561      FFFF
 5562 03e0 E940FEFF 		jmp	.L510
 5562      FF
 5563              		.p2align 4,,10
 5564 03e5 0F1F00   		.p2align 3
 5565              	.L584:
1416:fltk-1.3.4-1/jpeg/jdhuff.c **** 	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 5566              		.loc 1 1416 24 discriminator 1 view .LVU1763
 5567 03e8 448B9F24 		movl	548(%rdi), %r11d
 5567      020000
 5568 03ef 4585DB   		testl	%r11d, %r11d
 5569 03f2 0F8569FE 		jne	.L514
 5569      FFFF
1416:fltk-1.3.4-1/jpeg/jdhuff.c **** 	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 5570              		.loc 1 1416 42 discriminator 2 view .LVU1764
 5571 03f8 448B9728 		movl	552(%rdi), %r10d
 5571      020000
 5572 03ff 4585D2   		testl	%r10d, %r10d
 5573 0402 0F8559FE 		jne	.L514
 5573      FFFF
1416:fltk-1.3.4-1/jpeg/jdhuff.c **** 	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 5574              		.loc 1 1416 60 discriminator 3 view .LVU1765
 5575 0408 448B8F38 		movl	312(%rdi), %r9d
 5575      010000
 5576 040f 8B972002 		movl	544(%rdi), %edx
 5576      0000
 5577 0415 8B873802 		movl	568(%rdi), %eax
 5577      0000
 5578 041b 4585C9   		testl	%r9d, %r9d
 5579 041e 0F844802 		je	.L586
 5579      0000
 5580              	.L515:
1417:fltk-1.3.4-1/jpeg/jdhuff.c **** 	cinfo->Se != cinfo->lim_Se))
 5581              		.loc 1 1417 48 discriminator 1 view .LVU1766
 5582 0424 39C2     		cmpl	%eax, %edx
 5583 0426 0F8535FE 		jne	.L514
 5583      FFFF
 5584 042c E94EFEFF 		jmp	.L516
 5584      FF
 5585              		.p2align 4,,10
 5586 0431 0F1F8000 		.p2align 3
 5586      000000
 5587              	.L494:
1335:fltk-1.3.4-1/jpeg/jdhuff.c **** 	goto bad;
 5588              		.loc 1 1335 7 is_stmt 1 view .LVU1767
1335:fltk-1.3.4-1/jpeg/jdhuff.c **** 	goto bad;
 5589              		.loc 1 1335 10 is_stmt 0 view .LVU1768
 5590 0438 4139C4   		cmpl	%eax, %r12d
 5591 043b 0F8F27FC 		jg	.L495
 5591      FFFF
1335:fltk-1.3.4-1/jpeg/jdhuff.c **** 	goto bad;
 5592              		.loc 1 1335 33 discriminator 1 view .LVU1769
 5593 0441 39873802 		cmpl	%eax, 568(%rdi)
 5593      0000
 5594 0447 0F8C1BFC 		jl	.L495
 5594      FFFF
1338:fltk-1.3.4-1/jpeg/jdhuff.c **** 	goto bad;
 5595              		.loc 1 1338 7 is_stmt 1 view .LVU1770
1338:fltk-1.3.4-1/jpeg/jdhuff.c **** 	goto bad;
 5596              		.loc 1 1338 10 is_stmt 0 view .LVU1771
 5597 044d 83BFC001 		cmpl	$1, 448(%rdi)
 5597      000001
 5598 0454 0F850EFC 		jne	.L495
 5598      FFFF
 5599 045a E9E5FBFF 		jmp	.L496
 5599      FF
 5600              	.LVL680:
 5601              	.L525:
1490:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 7) i = 7;
 5602              		.loc 1 1490 4 is_stmt 1 view .LVU1772
1490:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 7) i = 7;
 5603              		.loc 1 1490 16 is_stmt 0 view .LVU1773
 5604 045f 8D56FF   		leal	-1(%rsi), %edx
 5605 0462 83FA06   		cmpl	$6, %edx
 5606 0465 410F47D0 		cmova	%r8d, %edx
 5607              	.LVL681:
1491:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 5608              		.loc 1 1491 4 is_stmt 1 view .LVU1774
1491:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 5609              		.loc 1 1491 15 is_stmt 0 view .LVU1775
 5610 0469 83E901   		subl	$1, %ecx
 5611              	.LVL682:
1491:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 5612              		.loc 1 1491 15 view .LVU1776
 5613 046c 83F906   		cmpl	$6, %ecx
 5614 046f 410F47C8 		cmova	%r8d, %ecx
 5615              	.LVL683:
1492:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5616              		.loc 1 1492 4 is_stmt 1 view .LVU1777
1492:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5617              		.loc 1 1492 62 is_stmt 0 view .LVU1778
 5618 0473 4863D2   		movslq	%edx, %rdx
 5619 0476 4863C9   		movslq	%ecx, %rcx
 5620 0479 488D0CD1 		leaq	(%rcx,%rdx,8), %rcx
 5621 047d 4829D1   		subq	%rdx, %rcx
1492:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5622              		.loc 1 1492 34 view .LVU1779
 5623 0480 418B148E 		movl	(%r14,%rcx,4), %edx
 5624 0484 83C201   		addl	$1, %edx
1492:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5625              		.loc 1 1492 30 view .LVU1780
 5626 0487 89948550 		movl	%edx, 336(%rbp,%rax,4)
 5626      010000
1493:fltk-1.3.4-1/jpeg/jdhuff.c **** 	default:
 5627              		.loc 1 1493 4 is_stmt 1 view .LVU1781
 5628 048e E93DFFFF 		jmp	.L533
 5628      FF
 5629              	.LVL684:
 5630              	.L529:
1475:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 4) i = 4;
 5631              		.loc 1 1475 4 view .LVU1782
1475:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 4) i = 4;
 5632              		.loc 1 1475 16 is_stmt 0 view .LVU1783
 5633 0493 8D56FF   		leal	-1(%rsi), %edx
 5634 0496 BE030000 		movl	$3, %esi
 5634      00
 5635              	.LVL685:
1475:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 4) i = 4;
 5636              		.loc 1 1475 16 view .LVU1784
 5637 049b 83FA03   		cmpl	$3, %edx
 5638 049e 0F47D6   		cmova	%esi, %edx
 5639              	.LVL686:
1476:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 5640              		.loc 1 1476 4 is_stmt 1 view .LVU1785
1476:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 5641              		.loc 1 1476 15 is_stmt 0 view .LVU1786
 5642 04a1 83E901   		subl	$1, %ecx
 5643              	.LVL687:
1476:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 5644              		.loc 1 1476 15 view .LVU1787
 5645 04a4 83F903   		cmpl	$3, %ecx
 5646 04a7 0F47CE   		cmova	%esi, %ecx
 5647              	.LVL688:
1477:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5648              		.loc 1 1477 4 is_stmt 1 view .LVU1788
1477:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5649              		.loc 1 1477 62 is_stmt 0 view .LVU1789
 5650 04aa 4863D2   		movslq	%edx, %rdx
 5651 04ad 4863C9   		movslq	%ecx, %rcx
 5652 04b0 488D1491 		leaq	(%rcx,%rdx,4), %rdx
1477:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5653              		.loc 1 1477 34 view .LVU1790
 5654 04b4 418B1493 		movl	(%r11,%rdx,4), %edx
 5655 04b8 83C201   		addl	$1, %edx
1477:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5656              		.loc 1 1477 30 view .LVU1791
 5657 04bb 89948550 		movl	%edx, 336(%rbp,%rax,4)
 5657      010000
1478:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (5*5-1):
 5658              		.loc 1 1478 4 is_stmt 1 view .LVU1792
 5659 04c2 E909FFFF 		jmp	.L533
 5659      FF
 5660              	.LVL689:
 5661              	.L530:
1470:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 3) i = 3;
 5662              		.loc 1 1470 4 view .LVU1793
1470:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 3) i = 3;
 5663              		.loc 1 1470 16 is_stmt 0 view .LVU1794
 5664 04c7 8D56FF   		leal	-1(%rsi), %edx
 5665 04ca BE020000 		movl	$2, %esi
 5665      00
 5666              	.LVL690:
1470:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 3) i = 3;
 5667              		.loc 1 1470 16 view .LVU1795
 5668 04cf 83FA02   		cmpl	$2, %edx
 5669 04d2 0F47D6   		cmova	%esi, %edx
 5670              	.LVL691:
1471:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 5671              		.loc 1 1471 4 is_stmt 1 view .LVU1796
1471:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 5672              		.loc 1 1471 15 is_stmt 0 view .LVU1797
 5673 04d5 83E901   		subl	$1, %ecx
 5674              	.LVL692:
1471:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 5675              		.loc 1 1471 15 view .LVU1798
 5676 04d8 83F902   		cmpl	$2, %ecx
 5677 04db 0F47CE   		cmova	%esi, %ecx
 5678              	.LVL693:
1472:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5679              		.loc 1 1472 4 is_stmt 1 view .LVU1799
1472:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5680              		.loc 1 1472 62 is_stmt 0 view .LVU1800
 5681 04de 4863D2   		movslq	%edx, %rdx
 5682 04e1 488D1452 		leaq	(%rdx,%rdx,2), %rdx
 5683 04e5 4863C9   		movslq	%ecx, %rcx
 5684 04e8 4801D1   		addq	%rdx, %rcx
1472:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5685              		.loc 1 1472 34 view .LVU1801
 5686 04eb 418B148A 		movl	(%r10,%rcx,4), %edx
 5687 04ef 83C201   		addl	$1, %edx
1472:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5688              		.loc 1 1472 30 view .LVU1802
 5689 04f2 89948550 		movl	%edx, 336(%rbp,%rax,4)
 5689      010000
1473:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (4*4-1):
 5690              		.loc 1 1473 4 is_stmt 1 view .LVU1803
 5691 04f9 E9D2FEFF 		jmp	.L533
 5691      FF
 5692              	.LVL694:
 5693              	.L531:
1465:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 2) i = 2;
 5694              		.loc 1 1465 4 view .LVU1804
1465:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 2) i = 2;
 5695              		.loc 1 1465 16 is_stmt 0 view .LVU1805
 5696 04fe 8D56FF   		leal	-1(%rsi), %edx
 5697 0501 BE010000 		movl	$1, %esi
 5697      00
 5698              	.LVL695:
1465:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 2) i = 2;
 5699              		.loc 1 1465 16 view .LVU1806
 5700 0506 83FA01   		cmpl	$1, %edx
 5701 0509 0F47D6   		cmova	%esi, %edx
 5702              	.LVL696:
1466:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 5703              		.loc 1 1466 4 is_stmt 1 view .LVU1807
1466:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 5704              		.loc 1 1466 15 is_stmt 0 view .LVU1808
 5705 050c 83E901   		subl	$1, %ecx
 5706              	.LVL697:
1466:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 5707              		.loc 1 1466 15 view .LVU1809
 5708 050f 83F901   		cmpl	$1, %ecx
 5709 0512 0F47CE   		cmova	%esi, %ecx
 5710              	.LVL698:
1467:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5711              		.loc 1 1467 4 is_stmt 1 view .LVU1810
1467:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5712              		.loc 1 1467 62 is_stmt 0 view .LVU1811
 5713 0515 4863D2   		movslq	%edx, %rdx
1467:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5714              		.loc 1 1467 34 view .LVU1812
 5715 0518 488D3500 		leaq	jpeg_zigzag_order2(%rip), %rsi
 5715      000000
1467:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5716              		.loc 1 1467 62 view .LVU1813
 5717 051f 4863C9   		movslq	%ecx, %rcx
 5718 0522 488D1451 		leaq	(%rcx,%rdx,2), %rdx
1467:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5719              		.loc 1 1467 34 view .LVU1814
 5720 0526 8B1496   		movl	(%rsi,%rdx,4), %edx
 5721 0529 83C201   		addl	$1, %edx
1467:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5722              		.loc 1 1467 30 view .LVU1815
 5723 052c 89948550 		movl	%edx, 336(%rbp,%rax,4)
 5723      010000
1468:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (3*3-1):
 5724              		.loc 1 1468 4 is_stmt 1 view .LVU1816
 5725 0533 E998FEFF 		jmp	.L533
 5725      FF
 5726              	.LVL699:
 5727              	.L532:
1462:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5728              		.loc 1 1462 4 view .LVU1817
1462:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5729              		.loc 1 1462 30 is_stmt 0 view .LVU1818
 5730 0538 C7848550 		movl	$1, 336(%rbp,%rax,4)
 5730      01000001 
 5730      000000
1463:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (2*2-1):
 5731              		.loc 1 1463 4 is_stmt 1 view .LVU1819
 5732 0543 E988FEFF 		jmp	.L533
 5732      FF
 5733              	.L527:
1485:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 6) i = 6;
 5734              		.loc 1 1485 4 view .LVU1820
1485:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 6) i = 6;
 5735              		.loc 1 1485 16 is_stmt 0 view .LVU1821
 5736 0548 8D56FF   		leal	-1(%rsi), %edx
 5737 054b BE050000 		movl	$5, %esi
 5737      00
 5738              	.LVL700:
1485:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 6) i = 6;
 5739              		.loc 1 1485 16 view .LVU1822
 5740 0550 83FA05   		cmpl	$5, %edx
 5741 0553 0F47D6   		cmova	%esi, %edx
 5742              	.LVL701:
1486:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
 5743              		.loc 1 1486 4 is_stmt 1 view .LVU1823
1486:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
 5744              		.loc 1 1486 15 is_stmt 0 view .LVU1824
 5745 0556 83E901   		subl	$1, %ecx
 5746              	.LVL702:
1486:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
 5747              		.loc 1 1486 15 view .LVU1825
 5748 0559 83F905   		cmpl	$5, %ecx
 5749 055c 0F47CE   		cmova	%esi, %ecx
 5750              	.LVL703:
1487:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5751              		.loc 1 1487 4 is_stmt 1 view .LVU1826
1487:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5752              		.loc 1 1487 62 is_stmt 0 view .LVU1827
 5753 055f 4863D2   		movslq	%edx, %rdx
 5754 0562 488D1452 		leaq	(%rdx,%rdx,2), %rdx
 5755 0566 4863C9   		movslq	%ecx, %rcx
 5756 0569 488D1451 		leaq	(%rcx,%rdx,2), %rdx
1487:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5757              		.loc 1 1487 34 view .LVU1828
 5758 056d 418B5495 		movl	0(%r13,%rdx,4), %edx
 5758      00
 5759 0572 83C201   		addl	$1, %edx
1487:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5760              		.loc 1 1487 30 view .LVU1829
 5761 0575 89948550 		movl	%edx, 336(%rbp,%rax,4)
 5761      010000
1488:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (7*7-1):
 5762              		.loc 1 1488 4 is_stmt 1 view .LVU1830
 5763 057c E94FFEFF 		jmp	.L533
 5763      FF
 5764              	.LVL704:
 5765              	.L528:
1480:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 5) i = 5;
 5766              		.loc 1 1480 4 view .LVU1831
1480:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 5) i = 5;
 5767              		.loc 1 1480 16 is_stmt 0 view .LVU1832
 5768 0581 8D56FF   		leal	-1(%rsi), %edx
 5769 0584 BE040000 		movl	$4, %esi
 5769      00
 5770              	.LVL705:
1480:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  if (i <= 0 || i > 5) i = 5;
 5771              		.loc 1 1480 16 view .LVU1833
 5772 0589 83FA04   		cmpl	$4, %edx
 5773 058c 0F47D6   		cmova	%esi, %edx
 5774              	.LVL706:
1481:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 5775              		.loc 1 1481 4 is_stmt 1 view .LVU1834
1481:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 5776              		.loc 1 1481 15 is_stmt 0 view .LVU1835
 5777 058f 83E901   		subl	$1, %ecx
 5778              	.LVL707:
1481:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 5779              		.loc 1 1481 15 view .LVU1836
 5780 0592 83F904   		cmpl	$4, %ecx
 5781 0595 0F47CE   		cmova	%esi, %ecx
 5782              	.LVL708:
1482:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5783              		.loc 1 1482 4 is_stmt 1 view .LVU1837
1482:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5784              		.loc 1 1482 62 is_stmt 0 view .LVU1838
 5785 0598 4863D2   		movslq	%edx, %rdx
 5786 059b 488D1492 		leaq	(%rdx,%rdx,4), %rdx
 5787 059f 4863C9   		movslq	%ecx, %rcx
 5788 05a2 4801D1   		addq	%rdx, %rcx
1482:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5789              		.loc 1 1482 34 view .LVU1839
 5790 05a5 418B148C 		movl	(%r12,%rcx,4), %edx
 5791 05a9 83C201   		addl	$1, %edx
1482:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  break;
 5792              		.loc 1 1482 30 view .LVU1840
 5793 05ac 89948550 		movl	%edx, 336(%rbp,%rax,4)
 5793      010000
1483:fltk-1.3.4-1/jpeg/jdhuff.c **** 	case (6*6-1):
 5794              		.loc 1 1483 4 is_stmt 1 view .LVU1841
 5795 05b3 E918FEFF 		jmp	.L533
 5795      FF
 5796              	.LVL709:
 5797 05b8 0F1F8400 		.p2align 4,,10
 5797      00000000 
 5798              		.p2align 3
 5799              	.L523:
1501:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 5800              		.loc 1 1501 2 view .LVU1842
1501:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 5801              		.loc 1 1501 28 is_stmt 0 view .LVU1843
 5802 05c0 C7848550 		movl	$0, 336(%rbp,%rax,4)
 5802      01000000 
 5802      000000
 5803 05cb E900FEFF 		jmp	.L533
 5803      FF
 5804              	.LVL710:
 5805              		.p2align 4,,10
 5806              		.p2align 3
 5807              	.L585:
1441:fltk-1.3.4-1/jpeg/jdhuff.c **** 	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 5808              		.loc 1 1441 2 is_stmt 1 view .LVU1844
1441:fltk-1.3.4-1/jpeg/jdhuff.c **** 	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 5809              		.loc 1 1441 6 is_stmt 0 view .LVU1845
 5810 05d0 49634518 		movslq	24(%r13), %rax
1442:fltk-1.3.4-1/jpeg/jdhuff.c **** 				& entropy->ac_derived_tbls[tbl]);
 5811              		.loc 1 1442 2 view .LVU1846
 5812 05d4 31F6     		xorl	%esi, %esi
 5813 05d6 4889DF   		movq	%rbx, %rdi
1441:fltk-1.3.4-1/jpeg/jdhuff.c **** 	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 5814              		.loc 1 1441 6 view .LVU1847
 5815 05d9 4889C2   		movq	%rax, %rdx
 5816              	.LVL711:
1442:fltk-1.3.4-1/jpeg/jdhuff.c **** 				& entropy->ac_derived_tbls[tbl]);
 5817              		.loc 1 1442 2 is_stmt 1 view .LVU1848
 5818 05dc 488D8CC5 		leaq	144(%rbp,%rax,8), %rcx
 5818      90000000 
 5819 05e4 E8000000 		call	jpeg_make_d_derived_tbl
 5819      00
 5820              	.LVL712:
1442:fltk-1.3.4-1/jpeg/jdhuff.c **** 				& entropy->ac_derived_tbls[tbl]);
 5821              		.loc 1 1442 2 is_stmt 0 view .LVU1849
 5822 05e9 E9E8FCFF 		jmp	.L521
 5822      FF
 5823              	.LVL713:
 5824 05ee 6690     		.p2align 4,,10
 5825              		.p2align 3
 5826              	.L511:
1399:fltk-1.3.4-1/jpeg/jdhuff.c **** 	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 5827              		.loc 1 1399 2 is_stmt 1 view .LVU1850
1399:fltk-1.3.4-1/jpeg/jdhuff.c **** 	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 5828              		.loc 1 1399 6 is_stmt 0 view .LVU1851
 5829 05f0 4C636818 		movslq	24(%rax), %r13
1400:fltk-1.3.4-1/jpeg/jdhuff.c **** 				& entropy->derived_tbls[tbl]);
 5830              		.loc 1 1400 2 view .LVU1852
 5831 05f4 31F6     		xorl	%esi, %esi
 5832 05f6 4889DF   		movq	%rbx, %rdi
1399:fltk-1.3.4-1/jpeg/jdhuff.c **** 	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 5833              		.loc 1 1399 6 view .LVU1853
 5834 05f9 4C89EA   		movq	%r13, %rdx
 5835              	.LVL714:
1400:fltk-1.3.4-1/jpeg/jdhuff.c **** 				& entropy->derived_tbls[tbl]);
 5836              		.loc 1 1400 2 is_stmt 1 view .LVU1854
 5837 05fc 4A8D4CED 		leaq	72(%rbp,%r13,8), %rcx
 5837      48
 5838 0601 E8000000 		call	jpeg_make_d_derived_tbl
 5838      00
 5839              	.LVL715:
1403:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 5840              		.loc 1 1403 2 view .LVU1855
1403:fltk-1.3.4-1/jpeg/jdhuff.c ****       }
 5841              		.loc 1 1403 26 is_stmt 0 view .LVU1856
 5842 0606 4A8B44ED 		movq	72(%rbp,%r13,8), %rax
 5842      48
 5843 060b 48894568 		movq	%rax, 104(%rbp)
 5844 060f E9F4FBFF 		jmp	.L512
 5844      FF
 5845              	.LVL716:
 5846              		.p2align 4,,10
 5847 0614 0F1F4000 		.p2align 3
 5848              	.L583:
1394:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 5849              		.loc 1 1394 4 is_stmt 1 view .LVU1857
1394:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 5850              		.loc 1 1394 8 is_stmt 0 view .LVU1858
 5851 0618 48634014 		movslq	20(%rax), %rax
 5852              	.LVL717:
1395:fltk-1.3.4-1/jpeg/jdhuff.c **** 				  & entropy->derived_tbls[tbl]);
 5853              		.loc 1 1395 4 view .LVU1859
 5854 061c BE010000 		movl	$1, %esi
 5854      00
 5855 0621 4889DF   		movq	%rbx, %rdi
1394:fltk-1.3.4-1/jpeg/jdhuff.c **** 	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 5856              		.loc 1 1394 8 view .LVU1860
 5857 0624 4889C2   		movq	%rax, %rdx
 5858              	.LVL718:
1395:fltk-1.3.4-1/jpeg/jdhuff.c **** 				  & entropy->derived_tbls[tbl]);
 5859              		.loc 1 1395 4 is_stmt 1 view .LVU1861
 5860 0627 488D4CC5 		leaq	72(%rbp,%rax,8), %rcx
 5860      48
 5861 062c E8000000 		call	jpeg_make_d_derived_tbl
 5861      00
 5862              	.LVL719:
1395:fltk-1.3.4-1/jpeg/jdhuff.c **** 				  & entropy->derived_tbls[tbl]);
 5863              		.loc 1 1395 4 is_stmt 0 view .LVU1862
 5864 0631 E9D2FBFF 		jmp	.L512
 5864      FF
 5865              	.LVL720:
 5866 0636 662E0F1F 		.p2align 4,,10
 5866      84000000 
 5866      0000
 5867              		.p2align 3
 5868              	.L505:
1381:fltk-1.3.4-1/jpeg/jdhuff.c **** 	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 5869              		.loc 1 1381 7 is_stmt 1 view .LVU1863
1382:fltk-1.3.4-1/jpeg/jdhuff.c ****       else
 5870              		.loc 1 1382 26 is_stmt 0 view .LVU1864
 5871 0640 4585E4   		testl	%r12d, %r12d
 5872 0643 488D0500 		leaq	decode_mcu_DC_refine(%rip), %rax
 5872      000000
 5873 064a 488D1500 		leaq	decode_mcu_AC_refine(%rip), %rdx
 5873      000000
 5874 0651 480F45C2 		cmovne	%rdx, %rax
 5875 0655 48894508 		movq	%rax, 8(%rbp)
 5876 0659 E96CFBFF 		jmp	.L507
 5876      FF
 5877              	.LVL721:
 5878              	.L497:
1346:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Arguably the maximum Al value should be less than 13 for 8-bit precision,
 5879              		.loc 1 1346 5 is_stmt 1 view .LVU1865
1346:fltk-1.3.4-1/jpeg/jdhuff.c ****       /* Arguably the maximum Al value should be less than 13 for 8-bit precision,
 5880              		.loc 1 1346 8 is_stmt 0 view .LVU1866
 5881 065e 83FA0D   		cmpl	$13, %edx
 5882 0661 0F8E4AFA 		jle	.L498
 5882      FFFF
1353:fltk-1.3.4-1/jpeg/jdhuff.c ****       ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 5883              		.loc 1 1353 7 view .LVU1867
 5884 0667 E9FCF9FF 		jmp	.L495
 5884      FF
 5885              	.L586:
1417:fltk-1.3.4-1/jpeg/jdhuff.c **** 	cinfo->Se != cinfo->lim_Se))
 5886              		.loc 1 1417 23 view .LVU1868
 5887 066c 83FA3F   		cmpl	$63, %edx
 5888 066f 0F8F0AFC 		jg	.L516
 5888      FFFF
 5889 0675 E9AAFDFF 		jmp	.L515
 5889      FF
 5890              		.cfi_endproc
 5891              	.LFE62:
 5893              		.section	.text.jinit_huff_decoder,"ax",@progbits
 5894              		.p2align 4
 5895              		.globl	jinit_huff_decoder
 5897              	jinit_huff_decoder:
 5898              	.LVL722:
 5899              	.LFB63:
1514:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1515:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1516:fltk-1.3.4-1/jpeg/jdhuff.c **** /*
1517:fltk-1.3.4-1/jpeg/jdhuff.c ****  * Module initialization routine for Huffman entropy decoding.
1518:fltk-1.3.4-1/jpeg/jdhuff.c ****  */
1519:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1520:fltk-1.3.4-1/jpeg/jdhuff.c **** GLOBAL(void)
1521:fltk-1.3.4-1/jpeg/jdhuff.c **** jinit_huff_decoder (j_decompress_ptr cinfo)
1522:fltk-1.3.4-1/jpeg/jdhuff.c **** {
 5900              		.loc 1 1522 1 is_stmt 1 view -0
 5901              		.cfi_startproc
 5902              		.loc 1 1522 1 is_stmt 0 view .LVU1870
 5903 0000 F30F1EFA 		endbr64
1523:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy;
 5904              		.loc 1 1523 3 is_stmt 1 view .LVU1871
1524:fltk-1.3.4-1/jpeg/jdhuff.c ****   int i;
 5905              		.loc 1 1524 3 view .LVU1872
1525:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1526:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy = (huff_entropy_ptr)
 5906              		.loc 1 1526 3 view .LVU1873
1522:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy;
 5907              		.loc 1 1522 1 is_stmt 0 view .LVU1874
 5908 0004 55       		pushq	%rbp
 5909              		.cfi_def_cfa_offset 16
 5910              		.cfi_offset 6, -16
1527:fltk-1.3.4-1/jpeg/jdhuff.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 5911              		.loc 1 1527 6 view .LVU1875
 5912 0005 BA780100 		movl	$376, %edx
 5912      00
 5913 000a BE010000 		movl	$1, %esi
 5913      00
1522:fltk-1.3.4-1/jpeg/jdhuff.c ****   huff_entropy_ptr entropy;
 5914              		.loc 1 1522 1 view .LVU1876
 5915 000f 53       		pushq	%rbx
 5916              		.cfi_def_cfa_offset 24
 5917              		.cfi_offset 3, -24
 5918 0010 4889FB   		movq	%rdi, %rbx
 5919 0013 4883EC08 		subq	$8, %rsp
 5920              		.cfi_def_cfa_offset 32
 5921              		.loc 1 1527 6 view .LVU1877
 5922 0017 488B4708 		movq	8(%rdi), %rax
 5923 001b FF10     		call	*(%rax)
 5924              	.LVL723:
1528:fltk-1.3.4-1/jpeg/jdhuff.c **** 				SIZEOF(huff_entropy_decoder));
1529:fltk-1.3.4-1/jpeg/jdhuff.c ****   cinfo->entropy = &entropy->pub;
 5925              		.loc 1 1529 18 view .LVU1878
 5926 001d 48898370 		movq	%rax, 624(%rbx)
 5926      020000
1527:fltk-1.3.4-1/jpeg/jdhuff.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 5927              		.loc 1 1527 6 view .LVU1879
 5928 0024 4889C5   		movq	%rax, %rbp
 5929              	.LVL724:
 5930              		.loc 1 1529 3 is_stmt 1 view .LVU1880
1530:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->pub.start_pass = start_pass_huff_decoder;
 5931              		.loc 1 1530 3 view .LVU1881
 5932              		.loc 1 1530 27 is_stmt 0 view .LVU1882
 5933 0027 488D0500 		leaq	start_pass_huff_decoder(%rip), %rax
 5933      000000
 5934              	.LVL725:
 5935              		.loc 1 1530 27 view .LVU1883
 5936 002e 48894500 		movq	%rax, 0(%rbp)
1531:fltk-1.3.4-1/jpeg/jdhuff.c ****   entropy->pub.finish_pass = finish_pass_huff;
 5937              		.loc 1 1531 3 is_stmt 1 view .LVU1884
 5938              		.loc 1 1531 28 is_stmt 0 view .LVU1885
 5939 0032 488D0500 		leaq	finish_pass_huff(%rip), %rax
 5939      000000
 5940 0039 48894510 		movq	%rax, 16(%rbp)
1532:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1533:fltk-1.3.4-1/jpeg/jdhuff.c ****   if (cinfo->progressive_mode) {
 5941              		.loc 1 1533 3 is_stmt 1 view .LVU1886
 5942              		.loc 1 1533 6 is_stmt 0 view .LVU1887
 5943 003d 8B933C01 		movl	316(%rbx), %edx
 5943      0000
 5944 0043 85D2     		testl	%edx, %edx
 5945 0045 7559     		jne	.L588
 5946              	.LVL726:
1534:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Create progression status table */
1535:fltk-1.3.4-1/jpeg/jdhuff.c ****     int *coef_bit_ptr, ci;
1536:fltk-1.3.4-1/jpeg/jdhuff.c ****     cinfo->coef_bits = (int (*)[DCTSIZE2])
1537:fltk-1.3.4-1/jpeg/jdhuff.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
1538:fltk-1.3.4-1/jpeg/jdhuff.c **** 				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
1539:fltk-1.3.4-1/jpeg/jdhuff.c ****     coef_bit_ptr = & cinfo->coef_bits[0][0];
1540:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (ci = 0; ci < cinfo->num_components; ci++)
1541:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (i = 0; i < DCTSIZE2; i++)
1542:fltk-1.3.4-1/jpeg/jdhuff.c **** 	*coef_bit_ptr++ = -1;
1543:fltk-1.3.4-1/jpeg/jdhuff.c **** 
1544:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Mark derived tables unallocated */
1545:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (i = 0; i < NUM_HUFF_TBLS; i++) {
1546:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->derived_tbls[i] = NULL;
1547:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1548:fltk-1.3.4-1/jpeg/jdhuff.c ****   } else {
1549:fltk-1.3.4-1/jpeg/jdhuff.c ****     /* Mark tables unallocated */
1550:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (i = 0; i < NUM_HUFF_TBLS; i++) {
 5947              		.loc 1 1550 17 is_stmt 1 view .LVU1888
1551:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 5948              		.loc 1 1551 7 view .LVU1889
 5949              		.loc 1 1551 65 is_stmt 0 view .LVU1890
 5950 0047 48C78590 		movq	$0, 144(%rbp)
 5950      00000000 
 5950      000000
 5951              		.loc 1 1551 35 view .LVU1891
 5952 0052 48C74570 		movq	$0, 112(%rbp)
 5952      00000000 
1550:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 5953              		.loc 1 1550 36 is_stmt 1 view .LVU1892
 5954              	.LVL727:
1550:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 5955              		.loc 1 1550 17 view .LVU1893
 5956              		.loc 1 1551 7 view .LVU1894
 5957              		.loc 1 1551 65 is_stmt 0 view .LVU1895
 5958 005a 48C78598 		movq	$0, 152(%rbp)
 5958      00000000 
 5958      000000
 5959              		.loc 1 1551 35 view .LVU1896
 5960 0065 48C74578 		movq	$0, 120(%rbp)
 5960      00000000 
1550:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 5961              		.loc 1 1550 36 is_stmt 1 view .LVU1897
 5962              	.LVL728:
1550:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 5963              		.loc 1 1550 17 view .LVU1898
 5964              		.loc 1 1551 7 view .LVU1899
 5965              		.loc 1 1551 65 is_stmt 0 view .LVU1900
 5966 006d 48C785A0 		movq	$0, 160(%rbp)
 5966      00000000 
 5966      000000
 5967              		.loc 1 1551 35 view .LVU1901
 5968 0078 48C78580 		movq	$0, 128(%rbp)
 5968      00000000 
 5968      000000
1550:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 5969              		.loc 1 1550 36 is_stmt 1 view .LVU1902
 5970              	.LVL729:
1550:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 5971              		.loc 1 1550 17 view .LVU1903
 5972              		.loc 1 1551 7 view .LVU1904
 5973              		.loc 1 1551 65 is_stmt 0 view .LVU1905
 5974 0083 48C785A8 		movq	$0, 168(%rbp)
 5974      00000000 
 5974      000000
 5975              		.loc 1 1551 35 view .LVU1906
 5976 008e 48C78588 		movq	$0, 136(%rbp)
 5976      00000000 
 5976      000000
1550:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 5977              		.loc 1 1550 36 is_stmt 1 view .LVU1907
 5978              	.LVL730:
1550:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 5979              		.loc 1 1550 17 view .LVU1908
1552:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
1553:fltk-1.3.4-1/jpeg/jdhuff.c ****   }
1554:fltk-1.3.4-1/jpeg/jdhuff.c **** }
 5980              		.loc 1 1554 1 is_stmt 0 view .LVU1909
 5981 0099 4883C408 		addq	$8, %rsp
 5982              		.cfi_remember_state
 5983              		.cfi_def_cfa_offset 24
 5984 009d 5B       		popq	%rbx
 5985              		.cfi_def_cfa_offset 16
 5986              	.LVL731:
 5987              		.loc 1 1554 1 view .LVU1910
 5988 009e 5D       		popq	%rbp
 5989              		.cfi_def_cfa_offset 8
 5990              	.LVL732:
 5991              		.loc 1 1554 1 view .LVU1911
 5992 009f C3       		ret
 5993              	.LVL733:
 5994              	.L588:
 5995              		.cfi_restore_state
 5996              	.LBB51:
1535:fltk-1.3.4-1/jpeg/jdhuff.c ****     cinfo->coef_bits = (int (*)[DCTSIZE2])
 5997              		.loc 1 1535 5 is_stmt 1 view .LVU1912
1536:fltk-1.3.4-1/jpeg/jdhuff.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 5998              		.loc 1 1536 5 view .LVU1913
1538:fltk-1.3.4-1/jpeg/jdhuff.c ****     coef_bit_ptr = & cinfo->coef_bits[0][0];
 5999              		.loc 1 1538 28 is_stmt 0 view .LVU1914
 6000 00a0 8B5338   		movl	56(%rbx), %edx
1537:fltk-1.3.4-1/jpeg/jdhuff.c **** 				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
 6001              		.loc 1 1537 8 view .LVU1915
 6002 00a3 488B4308 		movq	8(%rbx), %rax
 6003 00a7 BE010000 		movl	$1, %esi
 6003      00
 6004 00ac 4889DF   		movq	%rbx, %rdi
1538:fltk-1.3.4-1/jpeg/jdhuff.c ****     coef_bit_ptr = & cinfo->coef_bits[0][0];
 6005              		.loc 1 1538 28 view .LVU1916
 6006 00af C1E206   		sall	$6, %edx
 6007 00b2 4863D2   		movslq	%edx, %rdx
1537:fltk-1.3.4-1/jpeg/jdhuff.c **** 				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
 6008              		.loc 1 1537 8 view .LVU1917
 6009 00b5 48C1E202 		salq	$2, %rdx
 6010 00b9 FF10     		call	*(%rax)
 6011              	.LVL734:
1536:fltk-1.3.4-1/jpeg/jdhuff.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 6012              		.loc 1 1536 22 view .LVU1918
 6013 00bb 488983C0 		movq	%rax, 192(%rbx)
 6013      000000
1539:fltk-1.3.4-1/jpeg/jdhuff.c ****     for (ci = 0; ci < cinfo->num_components; ci++)
 6014              		.loc 1 1539 5 is_stmt 1 view .LVU1919
1537:fltk-1.3.4-1/jpeg/jdhuff.c **** 				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
 6015              		.loc 1 1537 8 is_stmt 0 view .LVU1920
 6016 00c2 4889C2   		movq	%rax, %rdx
 6017              	.LVL735:
1540:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (i = 0; i < DCTSIZE2; i++)
 6018              		.loc 1 1540 5 is_stmt 1 view .LVU1921
1540:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (i = 0; i < DCTSIZE2; i++)
 6019              		.loc 1 1540 18 view .LVU1922
1540:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (i = 0; i < DCTSIZE2; i++)
 6020              		.loc 1 1540 5 is_stmt 0 view .LVU1923
 6021 00c5 8B4338   		movl	56(%rbx), %eax
 6022              	.LVL736:
1540:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (i = 0; i < DCTSIZE2; i++)
 6023              		.loc 1 1540 5 view .LVU1924
 6024 00c8 85C0     		testl	%eax, %eax
 6025 00ca 7E33     		jle	.L590
 6026 00cc 4881C200 		addq	$256, %rdx
 6026      010000
 6027              	.LVL737:
1540:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (i = 0; i < DCTSIZE2; i++)
 6028              		.loc 1 1540 13 view .LVU1925
 6029 00d3 31C9     		xorl	%ecx, %ecx
 6030              	.LVL738:
 6031              		.p2align 4,,10
 6032 00d5 0F1F00   		.p2align 3
 6033              	.L592:
1540:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (i = 0; i < DCTSIZE2; i++)
 6034              		.loc 1 1540 13 view .LVU1926
 6035 00d8 488D8200 		leaq	-256(%rdx), %rax
 6035      FFFFFF
 6036              	.LVL739:
 6037 00df 90       		.p2align 4,,10
 6038              		.p2align 3
 6039              	.L591:
1542:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 6040              		.loc 1 1542 2 is_stmt 1 discriminator 3 view .LVU1927
1542:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 6041              		.loc 1 1542 15 is_stmt 0 discriminator 3 view .LVU1928
 6042 00e0 4883C004 		addq	$4, %rax
 6043              	.LVL740:
1542:fltk-1.3.4-1/jpeg/jdhuff.c **** 
 6044              		.loc 1 1542 18 discriminator 3 view .LVU1929
 6045 00e4 C740FCFF 		movl	$-1, -4(%rax)
 6045      FFFFFF
1541:fltk-1.3.4-1/jpeg/jdhuff.c **** 	*coef_bit_ptr++ = -1;
 6046              		.loc 1 1541 33 is_stmt 1 discriminator 3 view .LVU1930
1541:fltk-1.3.4-1/jpeg/jdhuff.c **** 	*coef_bit_ptr++ = -1;
 6047              		.loc 1 1541 19 discriminator 3 view .LVU1931
1541:fltk-1.3.4-1/jpeg/jdhuff.c **** 	*coef_bit_ptr++ = -1;
 6048              		.loc 1 1541 7 is_stmt 0 discriminator 3 view .LVU1932
 6049 00eb 4839D0   		cmpq	%rdx, %rax
 6050 00ee 75F0     		jne	.L591
1540:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (i = 0; i < DCTSIZE2; i++)
 6051              		.loc 1 1540 46 is_stmt 1 discriminator 2 view .LVU1933
1540:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (i = 0; i < DCTSIZE2; i++)
 6052              		.loc 1 1540 48 is_stmt 0 discriminator 2 view .LVU1934
 6053 00f0 83C101   		addl	$1, %ecx
 6054              	.LVL741:
1540:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (i = 0; i < DCTSIZE2; i++)
 6055              		.loc 1 1540 18 is_stmt 1 discriminator 2 view .LVU1935
 6056 00f3 4881C200 		addq	$256, %rdx
 6056      010000
 6057              	.LVL742:
1540:fltk-1.3.4-1/jpeg/jdhuff.c ****       for (i = 0; i < DCTSIZE2; i++)
 6058              		.loc 1 1540 5 is_stmt 0 discriminator 2 view .LVU1936
 6059 00fa 394B38   		cmpl	%ecx, 56(%rbx)
 6060 00fd 7FD9     		jg	.L592
 6061              	.LVL743:
 6062              	.L590:
1545:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->derived_tbls[i] = NULL;
 6063              		.loc 1 1545 17 is_stmt 1 view .LVU1937
1546:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 6064              		.loc 1 1546 7 view .LVU1938
1546:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 6065              		.loc 1 1546 32 is_stmt 0 view .LVU1939
 6066 00ff 48C74548 		movq	$0, 72(%rbp)
 6066      00000000 
1545:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->derived_tbls[i] = NULL;
 6067              		.loc 1 1545 36 is_stmt 1 view .LVU1940
 6068              	.LVL744:
1545:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->derived_tbls[i] = NULL;
 6069              		.loc 1 1545 17 view .LVU1941
1546:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 6070              		.loc 1 1546 7 view .LVU1942
1546:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 6071              		.loc 1 1546 32 is_stmt 0 view .LVU1943
 6072 0107 48C74550 		movq	$0, 80(%rbp)
 6072      00000000 
1545:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->derived_tbls[i] = NULL;
 6073              		.loc 1 1545 36 is_stmt 1 view .LVU1944
 6074              	.LVL745:
1545:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->derived_tbls[i] = NULL;
 6075              		.loc 1 1545 17 view .LVU1945
1546:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 6076              		.loc 1 1546 7 view .LVU1946
1546:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 6077              		.loc 1 1546 32 is_stmt 0 view .LVU1947
 6078 010f 48C74558 		movq	$0, 88(%rbp)
 6078      00000000 
1545:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->derived_tbls[i] = NULL;
 6079              		.loc 1 1545 36 is_stmt 1 view .LVU1948
 6080              	.LVL746:
1545:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->derived_tbls[i] = NULL;
 6081              		.loc 1 1545 17 view .LVU1949
1546:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 6082              		.loc 1 1546 7 view .LVU1950
1546:fltk-1.3.4-1/jpeg/jdhuff.c ****     }
 6083              		.loc 1 1546 32 is_stmt 0 view .LVU1951
 6084 0117 48C74560 		movq	$0, 96(%rbp)
 6084      00000000 
1545:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->derived_tbls[i] = NULL;
 6085              		.loc 1 1545 36 is_stmt 1 view .LVU1952
 6086              	.LVL747:
1545:fltk-1.3.4-1/jpeg/jdhuff.c ****       entropy->derived_tbls[i] = NULL;
 6087              		.loc 1 1545 17 view .LVU1953
 6088              	.LBE51:
 6089              		.loc 1 1554 1 is_stmt 0 view .LVU1954
 6090 011f 4883C408 		addq	$8, %rsp
 6091              		.cfi_def_cfa_offset 24
 6092 0123 5B       		popq	%rbx
 6093              		.cfi_def_cfa_offset 16
 6094              	.LVL748:
 6095              		.loc 1 1554 1 view .LVU1955
 6096 0124 5D       		popq	%rbp
 6097              		.cfi_def_cfa_offset 8
 6098              	.LVL749:
 6099              		.loc 1 1554 1 view .LVU1956
 6100 0125 C3       		ret
 6101              		.cfi_endproc
 6102              	.LFE63:
 6104              		.section	.rodata.bmask,"a"
 6105              		.align 32
 6108              	bmask:
 6109 0000 00000000 		.long	0
 6110 0004 01000000 		.long	1
 6111 0008 03000000 		.long	3
 6112 000c 07000000 		.long	7
 6113 0010 0F000000 		.long	15
 6114 0014 1F000000 		.long	31
 6115 0018 3F000000 		.long	63
 6116 001c 7F000000 		.long	127
 6117 0020 FF000000 		.long	255
 6118 0024 FF010000 		.long	511
 6119 0028 FF030000 		.long	1023
 6120 002c FF070000 		.long	2047
 6121 0030 FF0F0000 		.long	4095
 6122 0034 FF1F0000 		.long	8191
 6123 0038 FF3F0000 		.long	16383
 6124 003c FF7F0000 		.long	32767
 6125              		.section	.rodata.jpeg_zigzag_order2,"a"
 6126              		.align 16
 6129              	jpeg_zigzag_order2:
 6130 0000 00000000 		.long	0
 6131 0004 01000000 		.long	1
 6132 0008 02000000 		.long	2
 6133 000c 03000000 		.long	3
 6134              		.section	.rodata.jpeg_zigzag_order3,"a"
 6135              		.align 32
 6138              	jpeg_zigzag_order3:
 6139 0000 00000000 		.long	0
 6140 0004 01000000 		.long	1
 6141 0008 05000000 		.long	5
 6142 000c 02000000 		.long	2
 6143 0010 04000000 		.long	4
 6144 0014 06000000 		.long	6
 6145 0018 03000000 		.long	3
 6146 001c 07000000 		.long	7
 6147 0020 08000000 		.long	8
 6148              		.section	.rodata.jpeg_zigzag_order4,"a"
 6149              		.align 32
 6152              	jpeg_zigzag_order4:
 6153 0000 00000000 		.long	0
 6154 0004 01000000 		.long	1
 6155 0008 05000000 		.long	5
 6156 000c 06000000 		.long	6
 6157 0010 02000000 		.long	2
 6158 0014 04000000 		.long	4
 6159 0018 07000000 		.long	7
 6160 001c 0C000000 		.long	12
 6161 0020 03000000 		.long	3
 6162 0024 08000000 		.long	8
 6163 0028 0B000000 		.long	11
 6164 002c 0D000000 		.long	13
 6165 0030 09000000 		.long	9
 6166 0034 0A000000 		.long	10
 6167 0038 0E000000 		.long	14
 6168 003c 0F000000 		.long	15
 6169              		.section	.rodata.jpeg_zigzag_order5,"a"
 6170              		.align 32
 6173              	jpeg_zigzag_order5:
 6174 0000 00000000 		.long	0
 6175 0004 01000000 		.long	1
 6176 0008 05000000 		.long	5
 6177 000c 06000000 		.long	6
 6178 0010 0E000000 		.long	14
 6179 0014 02000000 		.long	2
 6180 0018 04000000 		.long	4
 6181 001c 07000000 		.long	7
 6182 0020 0D000000 		.long	13
 6183 0024 0F000000 		.long	15
 6184 0028 03000000 		.long	3
 6185 002c 08000000 		.long	8
 6186 0030 0C000000 		.long	12
 6187 0034 10000000 		.long	16
 6188 0038 15000000 		.long	21
 6189 003c 09000000 		.long	9
 6190 0040 0B000000 		.long	11
 6191 0044 11000000 		.long	17
 6192 0048 14000000 		.long	20
 6193 004c 16000000 		.long	22
 6194 0050 0A000000 		.long	10
 6195 0054 12000000 		.long	18
 6196 0058 13000000 		.long	19
 6197 005c 17000000 		.long	23
 6198 0060 18000000 		.long	24
 6199              		.section	.rodata.jpeg_zigzag_order6,"a"
 6200              		.align 32
 6203              	jpeg_zigzag_order6:
 6204 0000 00000000 		.long	0
 6205 0004 01000000 		.long	1
 6206 0008 05000000 		.long	5
 6207 000c 06000000 		.long	6
 6208 0010 0E000000 		.long	14
 6209 0014 0F000000 		.long	15
 6210 0018 02000000 		.long	2
 6211 001c 04000000 		.long	4
 6212 0020 07000000 		.long	7
 6213 0024 0D000000 		.long	13
 6214 0028 10000000 		.long	16
 6215 002c 19000000 		.long	25
 6216 0030 03000000 		.long	3
 6217 0034 08000000 		.long	8
 6218 0038 0C000000 		.long	12
 6219 003c 11000000 		.long	17
 6220 0040 18000000 		.long	24
 6221 0044 1A000000 		.long	26
 6222 0048 09000000 		.long	9
 6223 004c 0B000000 		.long	11
 6224 0050 12000000 		.long	18
 6225 0054 17000000 		.long	23
 6226 0058 1B000000 		.long	27
 6227 005c 20000000 		.long	32
 6228 0060 0A000000 		.long	10
 6229 0064 13000000 		.long	19
 6230 0068 16000000 		.long	22
 6231 006c 1C000000 		.long	28
 6232 0070 1F000000 		.long	31
 6233 0074 21000000 		.long	33
 6234 0078 14000000 		.long	20
 6235 007c 15000000 		.long	21
 6236 0080 1D000000 		.long	29
 6237 0084 1E000000 		.long	30
 6238 0088 22000000 		.long	34
 6239 008c 23000000 		.long	35
 6240              		.section	.rodata.jpeg_zigzag_order7,"a"
 6241              		.align 32
 6244              	jpeg_zigzag_order7:
 6245 0000 00000000 		.long	0
 6246 0004 01000000 		.long	1
 6247 0008 05000000 		.long	5
 6248 000c 06000000 		.long	6
 6249 0010 0E000000 		.long	14
 6250 0014 0F000000 		.long	15
 6251 0018 1B000000 		.long	27
 6252 001c 02000000 		.long	2
 6253 0020 04000000 		.long	4
 6254 0024 07000000 		.long	7
 6255 0028 0D000000 		.long	13
 6256 002c 10000000 		.long	16
 6257 0030 1A000000 		.long	26
 6258 0034 1C000000 		.long	28
 6259 0038 03000000 		.long	3
 6260 003c 08000000 		.long	8
 6261 0040 0C000000 		.long	12
 6262 0044 11000000 		.long	17
 6263 0048 19000000 		.long	25
 6264 004c 1D000000 		.long	29
 6265 0050 26000000 		.long	38
 6266 0054 09000000 		.long	9
 6267 0058 0B000000 		.long	11
 6268 005c 12000000 		.long	18
 6269 0060 18000000 		.long	24
 6270 0064 1E000000 		.long	30
 6271 0068 25000000 		.long	37
 6272 006c 27000000 		.long	39
 6273 0070 0A000000 		.long	10
 6274 0074 13000000 		.long	19
 6275 0078 17000000 		.long	23
 6276 007c 1F000000 		.long	31
 6277 0080 24000000 		.long	36
 6278 0084 28000000 		.long	40
 6279 0088 2D000000 		.long	45
 6280 008c 14000000 		.long	20
 6281 0090 16000000 		.long	22
 6282 0094 20000000 		.long	32
 6283 0098 23000000 		.long	35
 6284 009c 29000000 		.long	41
 6285 00a0 2C000000 		.long	44
 6286 00a4 2E000000 		.long	46
 6287 00a8 15000000 		.long	21
 6288 00ac 21000000 		.long	33
 6289 00b0 22000000 		.long	34
 6290 00b4 2A000000 		.long	42
 6291 00b8 2B000000 		.long	43
 6292 00bc 2F000000 		.long	47
 6293 00c0 30000000 		.long	48
 6294              		.section	.rodata.jpeg_zigzag_order,"a"
 6295              		.align 32
 6298              	jpeg_zigzag_order:
 6299 0000 00000000 		.long	0
 6300 0004 01000000 		.long	1
 6301 0008 05000000 		.long	5
 6302 000c 06000000 		.long	6
 6303 0010 0E000000 		.long	14
 6304 0014 0F000000 		.long	15
 6305 0018 1B000000 		.long	27
 6306 001c 1C000000 		.long	28
 6307 0020 02000000 		.long	2
 6308 0024 04000000 		.long	4
 6309 0028 07000000 		.long	7
 6310 002c 0D000000 		.long	13
 6311 0030 10000000 		.long	16
 6312 0034 1A000000 		.long	26
 6313 0038 1D000000 		.long	29
 6314 003c 2A000000 		.long	42
 6315 0040 03000000 		.long	3
 6316 0044 08000000 		.long	8
 6317 0048 0C000000 		.long	12
 6318 004c 11000000 		.long	17
 6319 0050 19000000 		.long	25
 6320 0054 1E000000 		.long	30
 6321 0058 29000000 		.long	41
 6322 005c 2B000000 		.long	43
 6323 0060 09000000 		.long	9
 6324 0064 0B000000 		.long	11
 6325 0068 12000000 		.long	18
 6326 006c 18000000 		.long	24
 6327 0070 1F000000 		.long	31
 6328 0074 28000000 		.long	40
 6329 0078 2C000000 		.long	44
 6330 007c 35000000 		.long	53
 6331 0080 0A000000 		.long	10
 6332 0084 13000000 		.long	19
 6333 0088 17000000 		.long	23
 6334 008c 20000000 		.long	32
 6335 0090 27000000 		.long	39
 6336 0094 2D000000 		.long	45
 6337 0098 34000000 		.long	52
 6338 009c 36000000 		.long	54
 6339 00a0 14000000 		.long	20
 6340 00a4 16000000 		.long	22
 6341 00a8 21000000 		.long	33
 6342 00ac 26000000 		.long	38
 6343 00b0 2E000000 		.long	46
 6344 00b4 33000000 		.long	51
 6345 00b8 37000000 		.long	55
 6346 00bc 3C000000 		.long	60
 6347 00c0 15000000 		.long	21
 6348 00c4 22000000 		.long	34
 6349 00c8 25000000 		.long	37
 6350 00cc 2F000000 		.long	47
 6351 00d0 32000000 		.long	50
 6352 00d4 38000000 		.long	56
 6353 00d8 3B000000 		.long	59
 6354 00dc 3D000000 		.long	61
 6355 00e0 23000000 		.long	35
 6356 00e4 24000000 		.long	36
 6357 00e8 30000000 		.long	48
 6358 00ec 31000000 		.long	49
 6359 00f0 39000000 		.long	57
 6360 00f4 3A000000 		.long	58
 6361 00f8 3E000000 		.long	62
 6362 00fc 3F000000 		.long	63
 6363              		.text
 6364              	.Letext0:
 6365              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 6366              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 6367              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 6368              		.file 6 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 6369              		.file 7 "/usr/include/stdio.h"
 6370              		.file 8 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 6371              		.file 9 "fltk-1.3.4-1/jpeg/jmorecfg.h"
 6372              		.file 10 "fltk-1.3.4-1/jpeg/jpeglib.h"
 6373              		.file 11 "fltk-1.3.4-1/jpeg/jpegint.h"
 6374              		.file 12 "fltk-1.3.4-1/jpeg/jerror.h"
 28043              		.section	.note.gnu.property,"a"
 28044              		.align 8
 28045 0000 04000000 		.long	 1f - 0f
 28046 0004 10000000 		.long	 4f - 1f
 28047 0008 05000000 		.long	 5
 28048              	0:
 28049 000c 474E5500 		.string	 "GNU"
 28050              	1:
 28051              		.align 8
 28052 0010 020000C0 		.long	 0xc0000002
 28053 0014 04000000 		.long	 3f - 2f
 28054              	2:
 28055 0018 03000000 		.long	 0x3
 28056              	3:
 28057 001c 00000000 		.align 8
 28058              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 jdhuff.c
     /tmp/cczbHaBe.s:7      .text.jpeg_fill_bit_buffer:0000000000000000 jpeg_fill_bit_buffer
     /tmp/cczbHaBe.s:334    .text.jpeg_huff_decode:0000000000000000 jpeg_huff_decode
     /tmp/cczbHaBe.s:6108   .rodata.bmask:0000000000000000 bmask
     /tmp/cczbHaBe.s:589    .text.finish_pass_huff:0000000000000000 finish_pass_huff
     /tmp/cczbHaBe.s:622    .text.process_restart:0000000000000000 process_restart
     /tmp/cczbHaBe.s:735    .text.decode_mcu_DC_first:0000000000000000 decode_mcu_DC_first
     /tmp/cczbHaBe.s:1151   .text.decode_mcu_AC_first:0000000000000000 decode_mcu_AC_first
     /tmp/cczbHaBe.s:1633   .text.decode_mcu_DC_refine:0000000000000000 decode_mcu_DC_refine
     /tmp/cczbHaBe.s:1851   .text.decode_mcu_AC_refine:0000000000000000 decode_mcu_AC_refine
     /tmp/cczbHaBe.s:2649   .text.decode_mcu_sub:0000000000000000 decode_mcu_sub
     /tmp/cczbHaBe.s:3540   .text.decode_mcu:0000000000000000 decode_mcu
     /tmp/cczbHaBe.s:4414   .text.jpeg_make_d_derived_tbl:0000000000000000 jpeg_make_d_derived_tbl
     /tmp/cczbHaBe.s:5026   .text.start_pass_huff_decoder:0000000000000000 start_pass_huff_decoder
     /tmp/cczbHaBe.s:6298   .rodata.jpeg_zigzag_order:0000000000000000 jpeg_zigzag_order
     /tmp/cczbHaBe.s:6244   .rodata.jpeg_zigzag_order7:0000000000000000 jpeg_zigzag_order7
     /tmp/cczbHaBe.s:6203   .rodata.jpeg_zigzag_order6:0000000000000000 jpeg_zigzag_order6
     /tmp/cczbHaBe.s:6173   .rodata.jpeg_zigzag_order5:0000000000000000 jpeg_zigzag_order5
     /tmp/cczbHaBe.s:6152   .rodata.jpeg_zigzag_order4:0000000000000000 jpeg_zigzag_order4
     /tmp/cczbHaBe.s:6138   .rodata.jpeg_zigzag_order3:0000000000000000 jpeg_zigzag_order3
     /tmp/cczbHaBe.s:6129   .rodata.jpeg_zigzag_order2:0000000000000000 jpeg_zigzag_order2
     /tmp/cczbHaBe.s:5897   .text.jinit_huff_decoder:0000000000000000 jinit_huff_decoder
                           .group:0000000000000000 wm4.0.a6b23a418548ac0bda5d8549c4a2ec91
                           .group:0000000000000000 wm4.stdcpredef.h.19.8dc41bed5d9037ff9622e015fb5f0ce3
                           .group:0000000000000000 wm4.jconfig.h.10.247fc3ff67998f3074970b1373c70333
                           .group:0000000000000000 wm4.features.h.19.5b5f5a19624a0527f479fdc52d54808f
                           .group:0000000000000000 wm4.cdefs.h.19.98d80eddbb3f64f4f30cd9aee9c5593c
                           .group:0000000000000000 wm4.wordsize.h.4.baf119258a1e53d8dba67ceac44ab6bc
                           .group:0000000000000000 wm4.cdefs.h.475.fb75d2e4416aa349344e6f45f683bf28
                           .group:0000000000000000 wm4.stubs64.h.10.6ce4c34010988db072c080326a6b6319
                           .group:0000000000000000 wm4.libcheaderstart.h.37.d9274df4cc0172452960ad9644fa5579
                           .group:0000000000000000 wm4.stdlib.h.28.2cffa49d94c5d85f4538f55f7b59771d
                           .group:0000000000000000 wm4.stddef.h.181.13772e73e5434e8cc4fafaaddad2b5da
                           .group:0000000000000000 wm4.waitflags.h.25.41934de4af99038521c2782f418699b1
                           .group:0000000000000000 wm4.waitstatus.h.28.93f167f49d64e2b9b99f98d1162a93bf
                           .group:0000000000000000 wm4.stdlib.h.43.9fa4f727a2f1cb8d2450a574c9195553
                           .group:0000000000000000 wm4.floatn.h.20.80c7cf8a8dfad237004b28d051d5afda
                           .group:0000000000000000 wm4.floatncommon.h.34.7e1840d7dfb19e9bdb51aeb077d76637
                           .group:0000000000000000 wm4.stdlib.h.71.2927e068ec678159b4f68ec2f089f7e6
                           .group:0000000000000000 wm4.types.h.109.56eb9ae966b255288cc544f18746a7ff
                           .group:0000000000000000 wm4.typesizes.h.24.2c64f817c0dc4b6fb2a2c619d717be26
                           .group:0000000000000000 wm4.time64.h.24.a8166ae916ec910dab0d8987098d42ee
                           .group:0000000000000000 wm4.types.h.40.18f72bab8242c2bb4c532a2aa95b5f00
                           .group:0000000000000000 wm4.stddef.h.231.0adce5c8c1fd8096aaff50981b3d1f0f
                           .group:0000000000000000 wm4.endian.h.20.efabd1018df5d7b4052c27dc6bdd5ce5
                           .group:0000000000000000 wm4.endianness.h.2.2c6a211f7909f3af5e9e9cfa3b6b63c8
                           .group:0000000000000000 wm4.endian.h.40.9e5d395adda2f4eb53ae69b69b664084
                           .group:0000000000000000 wm4.endian.h.27.4c4f94262c4eaee2982fe00ed1b4f173
                           .group:0000000000000000 wm4.byteswap.h.24.5363c019348146aada5aeadf51456576
                           .group:0000000000000000 wm4.endian.h.39.30a606dbd99b6c3df61c1f06dbdabd4e
                           .group:0000000000000000 wm4.select.h.28.eb2f3debdbcffd1442ebddaebc4fb6ff
                           .group:0000000000000000 wm4.__sigset_t.h.2.6b1ab6ff3d7b8fd9c0c42b0d80afbd80
                           .group:0000000000000000 wm4.select.h.44.887a4ff60aa97fcd9c1be017735e1675
                           .group:0000000000000000 wm4.select2.h.27.f95f2ab0ffee66dc1b6575014894b21a
                           .group:0000000000000000 wm4.types.h.186.489a4ed8f2d29cd358843490f54ddea5
                           .group:0000000000000000 wm4.pthreadtypesarch.h.25.6063cba99664c916e22d3a912bcc348a
                           .group:0000000000000000 wm4.struct_mutex.h.20.ed51f515172b9be99e450ba83eb5dd99
                           .group:0000000000000000 wm4.struct_rwlock.h.21.0254880f2904e3833fb8ae683e0f0330
                           .group:0000000000000000 wm4.alloca.h.19.edefa922a76c1cbaaf1e416903ba2d1c
                           .group:0000000000000000 wm4.alloca.h.29.156e12058824cc23d961c4d3b13031f6
                           .group:0000000000000000 wm4.stdio.h.24.5c1b97eef3c86b7a2549420f69f4f128
                           .group:0000000000000000 wm4.libcheaderstart.h.31.87b3c285aeba93fe355ad19123070832
                           .group:0000000000000000 wm4.stdio.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.stddef.h.231.8136eebbab3406dbf57a7ec475dd5d83
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.struct_FILE.h.19.0888ac70396abe1031c03d393554032f
                           .group:0000000000000000 wm4.stdio.h.53.139e45cf040c0964b2932c0c1bdaf6b2
                           .group:0000000000000000 wm4.stdio_lim.h.19.e4b00b560d878dcfbc6635b3406640c5
                           .group:0000000000000000 wm4.stdio.h.141.d7a290e19ca077c9e4aa7c43ede17a73
                           .group:0000000000000000 wm4.stdio.h.20.b0caa08e5723aa5941367be0e5d2ec59
                           .group:0000000000000000 wm4.stdio2.h.20.f45a0373b68e1296c4aa8cc09d66a9df
                           .group:0000000000000000 wm4.string.h.23.93403f89af7dba8212345449bb14b09d
                           .group:0000000000000000 wm4.string.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.strings.h.19.a259f126920b1bb5ef76bc62b3984a3c
                           .group:0000000000000000 wm4.jinclude.h.67.b19f941ec97c4845fa4609292c7e2db4
                           .group:0000000000000000 wm4.jmorecfg.h.33.3b4c5f9cc07b3737823b06caf24d5b05
                           .group:0000000000000000 wm4.jpeglib.h.40.4f111c27252a38df39328d65454e82f4
                           .group:0000000000000000 wm4.jpegint.h.26.5219ef5d4e4921371d38e77b6091fd20
                           .group:0000000000000000 wm4.jerror.h.25.1dbd8674e70ab5215bc0037320e5c2a2

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
__stack_chk_fail
jpeg_natural_order
