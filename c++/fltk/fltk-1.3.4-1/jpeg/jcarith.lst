   1              		.file	"jcarith.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.unlikely.start_pass,"ax",@progbits
   5              	.LCOLDB0:
   6              		.section	.text.start_pass,"ax",@progbits
   7              	.LHOTB0:
   8              		.p2align 4,,15
   9              		.section	.text.unlikely.start_pass
  10              	.Ltext_cold0:
  11              		.section	.text.start_pass
  13              	start_pass:
  14              	.LFB70:
  15              		.file 1 "fltk-1.3.4-1/jpeg/jcarith.c"
   1:fltk-1.3.4-1/jpeg/jcarith.c **** /*
   2:fltk-1.3.4-1/jpeg/jcarith.c ****  * jcarith.c
   3:fltk-1.3.4-1/jpeg/jcarith.c ****  *
   4:fltk-1.3.4-1/jpeg/jcarith.c ****  * Developed 1997-2013 by Guido Vollbeding.
   5:fltk-1.3.4-1/jpeg/jcarith.c ****  * This file is part of the Independent JPEG Group's software.
   6:fltk-1.3.4-1/jpeg/jcarith.c ****  * For conditions of distribution and use, see the accompanying README file.
   7:fltk-1.3.4-1/jpeg/jcarith.c ****  *
   8:fltk-1.3.4-1/jpeg/jcarith.c ****  * This file contains portable arithmetic entropy encoding routines for JPEG
   9:fltk-1.3.4-1/jpeg/jcarith.c ****  * (implementing the ISO/IEC IS 10918-1 and CCITT Recommendation ITU-T T.81).
  10:fltk-1.3.4-1/jpeg/jcarith.c ****  *
  11:fltk-1.3.4-1/jpeg/jcarith.c ****  * Both sequential and progressive modes are supported in this single module.
  12:fltk-1.3.4-1/jpeg/jcarith.c ****  *
  13:fltk-1.3.4-1/jpeg/jcarith.c ****  * Suspension is not currently supported in this module.
  14:fltk-1.3.4-1/jpeg/jcarith.c ****  */
  15:fltk-1.3.4-1/jpeg/jcarith.c **** 
  16:fltk-1.3.4-1/jpeg/jcarith.c **** #define JPEG_INTERNALS
  17:fltk-1.3.4-1/jpeg/jcarith.c **** #include "jinclude.h"
  18:fltk-1.3.4-1/jpeg/jcarith.c **** #include "jpeglib.h"
  19:fltk-1.3.4-1/jpeg/jcarith.c **** 
  20:fltk-1.3.4-1/jpeg/jcarith.c **** 
  21:fltk-1.3.4-1/jpeg/jcarith.c **** /* Expanded entropy encoder object for arithmetic encoding. */
  22:fltk-1.3.4-1/jpeg/jcarith.c **** 
  23:fltk-1.3.4-1/jpeg/jcarith.c **** typedef struct {
  24:fltk-1.3.4-1/jpeg/jcarith.c ****   struct jpeg_entropy_encoder pub; /* public fields */
  25:fltk-1.3.4-1/jpeg/jcarith.c **** 
  26:fltk-1.3.4-1/jpeg/jcarith.c ****   INT32 c; /* C register, base of coding interval, layout as in sec. D.1.3 */
  27:fltk-1.3.4-1/jpeg/jcarith.c ****   INT32 a;               /* A register, normalized size of coding interval */
  28:fltk-1.3.4-1/jpeg/jcarith.c ****   INT32 sc;        /* counter for stacked 0xFF values which might overflow */
  29:fltk-1.3.4-1/jpeg/jcarith.c ****   INT32 zc;          /* counter for pending 0x00 output values which might *
  30:fltk-1.3.4-1/jpeg/jcarith.c ****                           * be discarded at the end ("Pacman" termination) */
  31:fltk-1.3.4-1/jpeg/jcarith.c ****   int ct;  /* bit shift counter, determines when next byte will be written */
  32:fltk-1.3.4-1/jpeg/jcarith.c ****   int buffer;                /* buffer for most recent output byte != 0xFF */
  33:fltk-1.3.4-1/jpeg/jcarith.c **** 
  34:fltk-1.3.4-1/jpeg/jcarith.c ****   int last_dc_val[MAX_COMPS_IN_SCAN]; /* last DC coef for each component */
  35:fltk-1.3.4-1/jpeg/jcarith.c ****   int dc_context[MAX_COMPS_IN_SCAN]; /* context index for DC conditioning */
  36:fltk-1.3.4-1/jpeg/jcarith.c **** 
  37:fltk-1.3.4-1/jpeg/jcarith.c ****   unsigned int restarts_to_go;	/* MCUs left in this restart interval */
  38:fltk-1.3.4-1/jpeg/jcarith.c ****   int next_restart_num;		/* next restart number to write (0-7) */
  39:fltk-1.3.4-1/jpeg/jcarith.c **** 
  40:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Pointers to statistics areas (these workspaces have image lifespan) */
  41:fltk-1.3.4-1/jpeg/jcarith.c ****   unsigned char * dc_stats[NUM_ARITH_TBLS];
  42:fltk-1.3.4-1/jpeg/jcarith.c ****   unsigned char * ac_stats[NUM_ARITH_TBLS];
  43:fltk-1.3.4-1/jpeg/jcarith.c **** 
  44:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Statistics bin for coding with fixed probability 0.5 */
  45:fltk-1.3.4-1/jpeg/jcarith.c ****   unsigned char fixed_bin[4];
  46:fltk-1.3.4-1/jpeg/jcarith.c **** } arith_entropy_encoder;
  47:fltk-1.3.4-1/jpeg/jcarith.c **** 
  48:fltk-1.3.4-1/jpeg/jcarith.c **** typedef arith_entropy_encoder * arith_entropy_ptr;
  49:fltk-1.3.4-1/jpeg/jcarith.c **** 
  50:fltk-1.3.4-1/jpeg/jcarith.c **** /* The following two definitions specify the allocation chunk size
  51:fltk-1.3.4-1/jpeg/jcarith.c ****  * for the statistics area.
  52:fltk-1.3.4-1/jpeg/jcarith.c ****  * According to sections F.1.4.4.1.3 and F.1.4.4.2, we need at least
  53:fltk-1.3.4-1/jpeg/jcarith.c ****  * 49 statistics bins for DC, and 245 statistics bins for AC coding.
  54:fltk-1.3.4-1/jpeg/jcarith.c ****  *
  55:fltk-1.3.4-1/jpeg/jcarith.c ****  * We use a compact representation with 1 byte per statistics bin,
  56:fltk-1.3.4-1/jpeg/jcarith.c ****  * thus the numbers directly represent byte sizes.
  57:fltk-1.3.4-1/jpeg/jcarith.c ****  * This 1 byte per statistics bin contains the meaning of the MPS
  58:fltk-1.3.4-1/jpeg/jcarith.c ****  * (more probable symbol) in the highest bit (mask 0x80), and the
  59:fltk-1.3.4-1/jpeg/jcarith.c ****  * index into the probability estimation state machine table
  60:fltk-1.3.4-1/jpeg/jcarith.c ****  * in the lower bits (mask 0x7F).
  61:fltk-1.3.4-1/jpeg/jcarith.c ****  */
  62:fltk-1.3.4-1/jpeg/jcarith.c **** 
  63:fltk-1.3.4-1/jpeg/jcarith.c **** #define DC_STAT_BINS 64
  64:fltk-1.3.4-1/jpeg/jcarith.c **** #define AC_STAT_BINS 256
  65:fltk-1.3.4-1/jpeg/jcarith.c **** 
  66:fltk-1.3.4-1/jpeg/jcarith.c **** /* NOTE: Uncomment the following #define if you want to use the
  67:fltk-1.3.4-1/jpeg/jcarith.c ****  * given formula for calculating the AC conditioning parameter Kx
  68:fltk-1.3.4-1/jpeg/jcarith.c ****  * for spectral selection progressive coding in section G.1.3.2
  69:fltk-1.3.4-1/jpeg/jcarith.c ****  * of the spec (Kx = Kmin + SRL (8 + Se - Kmin) 4).
  70:fltk-1.3.4-1/jpeg/jcarith.c ****  * Although the spec and P&M authors claim that this "has proven
  71:fltk-1.3.4-1/jpeg/jcarith.c ****  * to give good results for 8 bit precision samples", I'm not
  72:fltk-1.3.4-1/jpeg/jcarith.c ****  * convinced yet that this is really beneficial.
  73:fltk-1.3.4-1/jpeg/jcarith.c ****  * Early tests gave only very marginal compression enhancements
  74:fltk-1.3.4-1/jpeg/jcarith.c ****  * (a few - around 5 or so - bytes even for very large files),
  75:fltk-1.3.4-1/jpeg/jcarith.c ****  * which would turn out rather negative if we'd suppress the
  76:fltk-1.3.4-1/jpeg/jcarith.c ****  * DAC (Define Arithmetic Conditioning) marker segments for
  77:fltk-1.3.4-1/jpeg/jcarith.c ****  * the default parameters in the future.
  78:fltk-1.3.4-1/jpeg/jcarith.c ****  * Note that currently the marker writing module emits 12-byte
  79:fltk-1.3.4-1/jpeg/jcarith.c ****  * DAC segments for a full-component scan in a color image.
  80:fltk-1.3.4-1/jpeg/jcarith.c ****  * This is not worth worrying about IMHO. However, since the
  81:fltk-1.3.4-1/jpeg/jcarith.c ****  * spec defines the default values to be used if the tables
  82:fltk-1.3.4-1/jpeg/jcarith.c ****  * are omitted (unlike Huffman tables, which are required
  83:fltk-1.3.4-1/jpeg/jcarith.c ****  * anyway), one might optimize this behaviour in the future,
  84:fltk-1.3.4-1/jpeg/jcarith.c ****  * and then it would be disadvantageous to use custom tables if
  85:fltk-1.3.4-1/jpeg/jcarith.c ****  * they don't provide sufficient gain to exceed the DAC size.
  86:fltk-1.3.4-1/jpeg/jcarith.c ****  *
  87:fltk-1.3.4-1/jpeg/jcarith.c ****  * On the other hand, I'd consider it as a reasonable result
  88:fltk-1.3.4-1/jpeg/jcarith.c ****  * that the conditioning has no significant influence on the
  89:fltk-1.3.4-1/jpeg/jcarith.c ****  * compression performance. This means that the basic
  90:fltk-1.3.4-1/jpeg/jcarith.c ****  * statistical model is already rather stable.
  91:fltk-1.3.4-1/jpeg/jcarith.c ****  *
  92:fltk-1.3.4-1/jpeg/jcarith.c ****  * Thus, at the moment, we use the default conditioning values
  93:fltk-1.3.4-1/jpeg/jcarith.c ****  * anyway, and do not use the custom formula.
  94:fltk-1.3.4-1/jpeg/jcarith.c ****  *
  95:fltk-1.3.4-1/jpeg/jcarith.c **** #define CALCULATE_SPECTRAL_CONDITIONING
  96:fltk-1.3.4-1/jpeg/jcarith.c ****  */
  97:fltk-1.3.4-1/jpeg/jcarith.c **** 
  98:fltk-1.3.4-1/jpeg/jcarith.c **** /* IRIGHT_SHIFT is like RIGHT_SHIFT, but works on int rather than INT32.
  99:fltk-1.3.4-1/jpeg/jcarith.c ****  * We assume that int right shift is unsigned if INT32 right shift is,
 100:fltk-1.3.4-1/jpeg/jcarith.c ****  * which should be safe.
 101:fltk-1.3.4-1/jpeg/jcarith.c ****  */
 102:fltk-1.3.4-1/jpeg/jcarith.c **** 
 103:fltk-1.3.4-1/jpeg/jcarith.c **** #ifdef RIGHT_SHIFT_IS_UNSIGNED
 104:fltk-1.3.4-1/jpeg/jcarith.c **** #define ISHIFT_TEMPS	int ishift_temp;
 105:fltk-1.3.4-1/jpeg/jcarith.c **** #define IRIGHT_SHIFT(x,shft)  \
 106:fltk-1.3.4-1/jpeg/jcarith.c **** 	((ishift_temp = (x)) < 0 ? \
 107:fltk-1.3.4-1/jpeg/jcarith.c **** 	 (ishift_temp >> (shft)) | ((~0) << (16-(shft))) : \
 108:fltk-1.3.4-1/jpeg/jcarith.c **** 	 (ishift_temp >> (shft)))
 109:fltk-1.3.4-1/jpeg/jcarith.c **** #else
 110:fltk-1.3.4-1/jpeg/jcarith.c **** #define ISHIFT_TEMPS
 111:fltk-1.3.4-1/jpeg/jcarith.c **** #define IRIGHT_SHIFT(x,shft)	((x) >> (shft))
 112:fltk-1.3.4-1/jpeg/jcarith.c **** #endif
 113:fltk-1.3.4-1/jpeg/jcarith.c **** 
 114:fltk-1.3.4-1/jpeg/jcarith.c **** 
 115:fltk-1.3.4-1/jpeg/jcarith.c **** LOCAL(void)
 116:fltk-1.3.4-1/jpeg/jcarith.c **** emit_byte (int val, j_compress_ptr cinfo)
 117:fltk-1.3.4-1/jpeg/jcarith.c **** /* Write next output byte; we do not support suspension in this module. */
 118:fltk-1.3.4-1/jpeg/jcarith.c **** {
 119:fltk-1.3.4-1/jpeg/jcarith.c ****   struct jpeg_destination_mgr * dest = cinfo->dest;
 120:fltk-1.3.4-1/jpeg/jcarith.c **** 
 121:fltk-1.3.4-1/jpeg/jcarith.c ****   *dest->next_output_byte++ = (JOCTET) val;
 122:fltk-1.3.4-1/jpeg/jcarith.c ****   if (--dest->free_in_buffer == 0)
 123:fltk-1.3.4-1/jpeg/jcarith.c ****     if (! (*dest->empty_output_buffer) (cinfo))
 124:fltk-1.3.4-1/jpeg/jcarith.c ****       ERREXIT(cinfo, JERR_CANT_SUSPEND);
 125:fltk-1.3.4-1/jpeg/jcarith.c **** }
 126:fltk-1.3.4-1/jpeg/jcarith.c **** 
 127:fltk-1.3.4-1/jpeg/jcarith.c **** 
 128:fltk-1.3.4-1/jpeg/jcarith.c **** /*
 129:fltk-1.3.4-1/jpeg/jcarith.c ****  * Finish up at the end of an arithmetic-compressed scan.
 130:fltk-1.3.4-1/jpeg/jcarith.c ****  */
 131:fltk-1.3.4-1/jpeg/jcarith.c **** 
 132:fltk-1.3.4-1/jpeg/jcarith.c **** METHODDEF(void)
 133:fltk-1.3.4-1/jpeg/jcarith.c **** finish_pass (j_compress_ptr cinfo)
 134:fltk-1.3.4-1/jpeg/jcarith.c **** {
 135:fltk-1.3.4-1/jpeg/jcarith.c ****   arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 136:fltk-1.3.4-1/jpeg/jcarith.c ****   INT32 temp;
 137:fltk-1.3.4-1/jpeg/jcarith.c **** 
 138:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Section D.1.8: Termination of encoding */
 139:fltk-1.3.4-1/jpeg/jcarith.c **** 
 140:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Find the e->c in the coding interval with the largest
 141:fltk-1.3.4-1/jpeg/jcarith.c ****    * number of trailing zero bits */
 142:fltk-1.3.4-1/jpeg/jcarith.c ****   if ((temp = (e->a - 1 + e->c) & 0xFFFF0000L) < e->c)
 143:fltk-1.3.4-1/jpeg/jcarith.c ****     e->c = temp + 0x8000L;
 144:fltk-1.3.4-1/jpeg/jcarith.c ****   else
 145:fltk-1.3.4-1/jpeg/jcarith.c ****     e->c = temp;
 146:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Send remaining bytes to output */
 147:fltk-1.3.4-1/jpeg/jcarith.c ****   e->c <<= e->ct;
 148:fltk-1.3.4-1/jpeg/jcarith.c ****   if (e->c & 0xF8000000L) {
 149:fltk-1.3.4-1/jpeg/jcarith.c ****     /* One final overflow has to be handled */
 150:fltk-1.3.4-1/jpeg/jcarith.c ****     if (e->buffer >= 0) {
 151:fltk-1.3.4-1/jpeg/jcarith.c ****       if (e->zc)
 152:fltk-1.3.4-1/jpeg/jcarith.c **** 	do emit_byte(0x00, cinfo);
 153:fltk-1.3.4-1/jpeg/jcarith.c **** 	while (--e->zc);
 154:fltk-1.3.4-1/jpeg/jcarith.c ****       emit_byte(e->buffer + 1, cinfo);
 155:fltk-1.3.4-1/jpeg/jcarith.c ****       if (e->buffer + 1 == 0xFF)
 156:fltk-1.3.4-1/jpeg/jcarith.c **** 	emit_byte(0x00, cinfo);
 157:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 158:fltk-1.3.4-1/jpeg/jcarith.c ****     e->zc += e->sc;  /* carry-over converts stacked 0xFF bytes to 0x00 */
 159:fltk-1.3.4-1/jpeg/jcarith.c ****     e->sc = 0;
 160:fltk-1.3.4-1/jpeg/jcarith.c ****   } else {
 161:fltk-1.3.4-1/jpeg/jcarith.c ****     if (e->buffer == 0)
 162:fltk-1.3.4-1/jpeg/jcarith.c ****       ++e->zc;
 163:fltk-1.3.4-1/jpeg/jcarith.c ****     else if (e->buffer >= 0) {
 164:fltk-1.3.4-1/jpeg/jcarith.c ****       if (e->zc)
 165:fltk-1.3.4-1/jpeg/jcarith.c **** 	do emit_byte(0x00, cinfo);
 166:fltk-1.3.4-1/jpeg/jcarith.c **** 	while (--e->zc);
 167:fltk-1.3.4-1/jpeg/jcarith.c ****       emit_byte(e->buffer, cinfo);
 168:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 169:fltk-1.3.4-1/jpeg/jcarith.c ****     if (e->sc) {
 170:fltk-1.3.4-1/jpeg/jcarith.c ****       if (e->zc)
 171:fltk-1.3.4-1/jpeg/jcarith.c **** 	do emit_byte(0x00, cinfo);
 172:fltk-1.3.4-1/jpeg/jcarith.c **** 	while (--e->zc);
 173:fltk-1.3.4-1/jpeg/jcarith.c ****       do {
 174:fltk-1.3.4-1/jpeg/jcarith.c **** 	emit_byte(0xFF, cinfo);
 175:fltk-1.3.4-1/jpeg/jcarith.c **** 	emit_byte(0x00, cinfo);
 176:fltk-1.3.4-1/jpeg/jcarith.c ****       } while (--e->sc);
 177:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 178:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 179:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Output final bytes only if they are not 0x00 */
 180:fltk-1.3.4-1/jpeg/jcarith.c ****   if (e->c & 0x7FFF800L) {
 181:fltk-1.3.4-1/jpeg/jcarith.c ****     if (e->zc)  /* output final pending zero bytes */
 182:fltk-1.3.4-1/jpeg/jcarith.c ****       do emit_byte(0x00, cinfo);
 183:fltk-1.3.4-1/jpeg/jcarith.c ****       while (--e->zc);
 184:fltk-1.3.4-1/jpeg/jcarith.c ****     emit_byte((e->c >> 19) & 0xFF, cinfo);
 185:fltk-1.3.4-1/jpeg/jcarith.c ****     if (((e->c >> 19) & 0xFF) == 0xFF)
 186:fltk-1.3.4-1/jpeg/jcarith.c ****       emit_byte(0x00, cinfo);
 187:fltk-1.3.4-1/jpeg/jcarith.c ****     if (e->c & 0x7F800L) {
 188:fltk-1.3.4-1/jpeg/jcarith.c ****       emit_byte((e->c >> 11) & 0xFF, cinfo);
 189:fltk-1.3.4-1/jpeg/jcarith.c ****       if (((e->c >> 11) & 0xFF) == 0xFF)
 190:fltk-1.3.4-1/jpeg/jcarith.c **** 	emit_byte(0x00, cinfo);
 191:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 192:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 193:fltk-1.3.4-1/jpeg/jcarith.c **** }
 194:fltk-1.3.4-1/jpeg/jcarith.c **** 
 195:fltk-1.3.4-1/jpeg/jcarith.c **** 
 196:fltk-1.3.4-1/jpeg/jcarith.c **** /*
 197:fltk-1.3.4-1/jpeg/jcarith.c ****  * The core arithmetic encoding routine (common in JPEG and JBIG).
 198:fltk-1.3.4-1/jpeg/jcarith.c ****  * This needs to go as fast as possible.
 199:fltk-1.3.4-1/jpeg/jcarith.c ****  * Machine-dependent optimization facilities
 200:fltk-1.3.4-1/jpeg/jcarith.c ****  * are not utilized in this portable implementation.
 201:fltk-1.3.4-1/jpeg/jcarith.c ****  * However, this code should be fairly efficient and
 202:fltk-1.3.4-1/jpeg/jcarith.c ****  * may be a good base for further optimizations anyway.
 203:fltk-1.3.4-1/jpeg/jcarith.c ****  *
 204:fltk-1.3.4-1/jpeg/jcarith.c ****  * Parameter 'val' to be encoded may be 0 or 1 (binary decision).
 205:fltk-1.3.4-1/jpeg/jcarith.c ****  *
 206:fltk-1.3.4-1/jpeg/jcarith.c ****  * Note: I've added full "Pacman" termination support to the
 207:fltk-1.3.4-1/jpeg/jcarith.c ****  * byte output routines, which is equivalent to the optional
 208:fltk-1.3.4-1/jpeg/jcarith.c ****  * Discard_final_zeros procedure (Figure D.15) in the spec.
 209:fltk-1.3.4-1/jpeg/jcarith.c ****  * Thus, we always produce the shortest possible output
 210:fltk-1.3.4-1/jpeg/jcarith.c ****  * stream compliant to the spec (no trailing zero bytes,
 211:fltk-1.3.4-1/jpeg/jcarith.c ****  * except for FF stuffing).
 212:fltk-1.3.4-1/jpeg/jcarith.c ****  *
 213:fltk-1.3.4-1/jpeg/jcarith.c ****  * I've also introduced a new scheme for accessing
 214:fltk-1.3.4-1/jpeg/jcarith.c ****  * the probability estimation state machine table,
 215:fltk-1.3.4-1/jpeg/jcarith.c ****  * derived from Markus Kuhn's JBIG implementation.
 216:fltk-1.3.4-1/jpeg/jcarith.c ****  */
 217:fltk-1.3.4-1/jpeg/jcarith.c **** 
 218:fltk-1.3.4-1/jpeg/jcarith.c **** LOCAL(void)
 219:fltk-1.3.4-1/jpeg/jcarith.c **** arith_encode (j_compress_ptr cinfo, unsigned char *st, int val) 
 220:fltk-1.3.4-1/jpeg/jcarith.c **** {
 221:fltk-1.3.4-1/jpeg/jcarith.c ****   register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 222:fltk-1.3.4-1/jpeg/jcarith.c ****   register unsigned char nl, nm;
 223:fltk-1.3.4-1/jpeg/jcarith.c ****   register INT32 qe, temp;
 224:fltk-1.3.4-1/jpeg/jcarith.c ****   register int sv;
 225:fltk-1.3.4-1/jpeg/jcarith.c **** 
 226:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Fetch values from our compact representation of Table D.3(D.2):
 227:fltk-1.3.4-1/jpeg/jcarith.c ****    * Qe values and probability estimation state machine
 228:fltk-1.3.4-1/jpeg/jcarith.c ****    */
 229:fltk-1.3.4-1/jpeg/jcarith.c ****   sv = *st;
 230:fltk-1.3.4-1/jpeg/jcarith.c ****   qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 231:fltk-1.3.4-1/jpeg/jcarith.c ****   nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 232:fltk-1.3.4-1/jpeg/jcarith.c ****   nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 233:fltk-1.3.4-1/jpeg/jcarith.c **** 
 234:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Encode & estimation procedures per sections D.1.4 & D.1.5 */
 235:fltk-1.3.4-1/jpeg/jcarith.c ****   e->a -= qe;
 236:fltk-1.3.4-1/jpeg/jcarith.c ****   if (val != (sv >> 7)) {
 237:fltk-1.3.4-1/jpeg/jcarith.c ****     /* Encode the less probable symbol */
 238:fltk-1.3.4-1/jpeg/jcarith.c ****     if (e->a >= qe) {
 239:fltk-1.3.4-1/jpeg/jcarith.c ****       /* If the interval size (qe) for the less probable symbol (LPS)
 240:fltk-1.3.4-1/jpeg/jcarith.c ****        * is larger than the interval size for the MPS, then exchange
 241:fltk-1.3.4-1/jpeg/jcarith.c ****        * the two symbols for coding efficiency, otherwise code the LPS
 242:fltk-1.3.4-1/jpeg/jcarith.c ****        * as usual: */
 243:fltk-1.3.4-1/jpeg/jcarith.c ****       e->c += e->a;
 244:fltk-1.3.4-1/jpeg/jcarith.c ****       e->a = qe;
 245:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 246:fltk-1.3.4-1/jpeg/jcarith.c ****     *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 247:fltk-1.3.4-1/jpeg/jcarith.c ****   } else {
 248:fltk-1.3.4-1/jpeg/jcarith.c ****     /* Encode the more probable symbol */
 249:fltk-1.3.4-1/jpeg/jcarith.c ****     if (e->a >= 0x8000L)
 250:fltk-1.3.4-1/jpeg/jcarith.c ****       return;  /* A >= 0x8000 -> ready, no renormalization required */
 251:fltk-1.3.4-1/jpeg/jcarith.c ****     if (e->a < qe) {
 252:fltk-1.3.4-1/jpeg/jcarith.c ****       /* If the interval size (qe) for the less probable symbol (LPS)
 253:fltk-1.3.4-1/jpeg/jcarith.c ****        * is larger than the interval size for the MPS, then exchange
 254:fltk-1.3.4-1/jpeg/jcarith.c ****        * the two symbols for coding efficiency: */
 255:fltk-1.3.4-1/jpeg/jcarith.c ****       e->c += e->a;
 256:fltk-1.3.4-1/jpeg/jcarith.c ****       e->a = qe;
 257:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 258:fltk-1.3.4-1/jpeg/jcarith.c ****     *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 259:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 260:fltk-1.3.4-1/jpeg/jcarith.c **** 
 261:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Renormalization & data output per section D.1.6 */
 262:fltk-1.3.4-1/jpeg/jcarith.c ****   do {
 263:fltk-1.3.4-1/jpeg/jcarith.c ****     e->a <<= 1;
 264:fltk-1.3.4-1/jpeg/jcarith.c ****     e->c <<= 1;
 265:fltk-1.3.4-1/jpeg/jcarith.c ****     if (--e->ct == 0) {
 266:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Another byte is ready for output */
 267:fltk-1.3.4-1/jpeg/jcarith.c ****       temp = e->c >> 19;
 268:fltk-1.3.4-1/jpeg/jcarith.c ****       if (temp > 0xFF) {
 269:fltk-1.3.4-1/jpeg/jcarith.c **** 	/* Handle overflow over all stacked 0xFF bytes */
 270:fltk-1.3.4-1/jpeg/jcarith.c **** 	if (e->buffer >= 0) {
 271:fltk-1.3.4-1/jpeg/jcarith.c **** 	  if (e->zc)
 272:fltk-1.3.4-1/jpeg/jcarith.c **** 	    do emit_byte(0x00, cinfo);
 273:fltk-1.3.4-1/jpeg/jcarith.c **** 	    while (--e->zc);
 274:fltk-1.3.4-1/jpeg/jcarith.c **** 	  emit_byte(e->buffer + 1, cinfo);
 275:fltk-1.3.4-1/jpeg/jcarith.c **** 	  if (e->buffer + 1 == 0xFF)
 276:fltk-1.3.4-1/jpeg/jcarith.c **** 	    emit_byte(0x00, cinfo);
 277:fltk-1.3.4-1/jpeg/jcarith.c **** 	}
 278:fltk-1.3.4-1/jpeg/jcarith.c **** 	e->zc += e->sc;  /* carry-over converts stacked 0xFF bytes to 0x00 */
 279:fltk-1.3.4-1/jpeg/jcarith.c **** 	e->sc = 0;
 280:fltk-1.3.4-1/jpeg/jcarith.c **** 	/* Note: The 3 spacer bits in the C register guarantee
 281:fltk-1.3.4-1/jpeg/jcarith.c **** 	 * that the new buffer byte can't be 0xFF here
 282:fltk-1.3.4-1/jpeg/jcarith.c **** 	 * (see page 160 in the P&M JPEG book). */
 283:fltk-1.3.4-1/jpeg/jcarith.c **** 	e->buffer = temp & 0xFF;  /* new output byte, might overflow later */
 284:fltk-1.3.4-1/jpeg/jcarith.c ****       } else if (temp == 0xFF) {
 285:fltk-1.3.4-1/jpeg/jcarith.c **** 	++e->sc;  /* stack 0xFF byte (which might overflow later) */
 286:fltk-1.3.4-1/jpeg/jcarith.c ****       } else {
 287:fltk-1.3.4-1/jpeg/jcarith.c **** 	/* Output all stacked 0xFF bytes, they will not overflow any more */
 288:fltk-1.3.4-1/jpeg/jcarith.c **** 	if (e->buffer == 0)
 289:fltk-1.3.4-1/jpeg/jcarith.c **** 	  ++e->zc;
 290:fltk-1.3.4-1/jpeg/jcarith.c **** 	else if (e->buffer >= 0) {
 291:fltk-1.3.4-1/jpeg/jcarith.c **** 	  if (e->zc)
 292:fltk-1.3.4-1/jpeg/jcarith.c **** 	    do emit_byte(0x00, cinfo);
 293:fltk-1.3.4-1/jpeg/jcarith.c **** 	    while (--e->zc);
 294:fltk-1.3.4-1/jpeg/jcarith.c **** 	  emit_byte(e->buffer, cinfo);
 295:fltk-1.3.4-1/jpeg/jcarith.c **** 	}
 296:fltk-1.3.4-1/jpeg/jcarith.c **** 	if (e->sc) {
 297:fltk-1.3.4-1/jpeg/jcarith.c **** 	  if (e->zc)
 298:fltk-1.3.4-1/jpeg/jcarith.c **** 	    do emit_byte(0x00, cinfo);
 299:fltk-1.3.4-1/jpeg/jcarith.c **** 	    while (--e->zc);
 300:fltk-1.3.4-1/jpeg/jcarith.c **** 	  do {
 301:fltk-1.3.4-1/jpeg/jcarith.c **** 	    emit_byte(0xFF, cinfo);
 302:fltk-1.3.4-1/jpeg/jcarith.c **** 	    emit_byte(0x00, cinfo);
 303:fltk-1.3.4-1/jpeg/jcarith.c **** 	  } while (--e->sc);
 304:fltk-1.3.4-1/jpeg/jcarith.c **** 	}
 305:fltk-1.3.4-1/jpeg/jcarith.c **** 	e->buffer = temp & 0xFF;  /* new output byte (can still overflow) */
 306:fltk-1.3.4-1/jpeg/jcarith.c ****       }
 307:fltk-1.3.4-1/jpeg/jcarith.c ****       e->c &= 0x7FFFFL;
 308:fltk-1.3.4-1/jpeg/jcarith.c ****       e->ct += 8;
 309:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 310:fltk-1.3.4-1/jpeg/jcarith.c ****   } while (e->a < 0x8000L);
 311:fltk-1.3.4-1/jpeg/jcarith.c **** }
 312:fltk-1.3.4-1/jpeg/jcarith.c **** 
 313:fltk-1.3.4-1/jpeg/jcarith.c **** 
 314:fltk-1.3.4-1/jpeg/jcarith.c **** /*
 315:fltk-1.3.4-1/jpeg/jcarith.c ****  * Emit a restart marker & resynchronize predictions.
 316:fltk-1.3.4-1/jpeg/jcarith.c ****  */
 317:fltk-1.3.4-1/jpeg/jcarith.c **** 
 318:fltk-1.3.4-1/jpeg/jcarith.c **** LOCAL(void)
 319:fltk-1.3.4-1/jpeg/jcarith.c **** emit_restart (j_compress_ptr cinfo, int restart_num)
 320:fltk-1.3.4-1/jpeg/jcarith.c **** {
 321:fltk-1.3.4-1/jpeg/jcarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 322:fltk-1.3.4-1/jpeg/jcarith.c ****   int ci;
 323:fltk-1.3.4-1/jpeg/jcarith.c ****   jpeg_component_info * compptr;
 324:fltk-1.3.4-1/jpeg/jcarith.c **** 
 325:fltk-1.3.4-1/jpeg/jcarith.c ****   finish_pass(cinfo);
 326:fltk-1.3.4-1/jpeg/jcarith.c **** 
 327:fltk-1.3.4-1/jpeg/jcarith.c ****   emit_byte(0xFF, cinfo);
 328:fltk-1.3.4-1/jpeg/jcarith.c ****   emit_byte(JPEG_RST0 + restart_num, cinfo);
 329:fltk-1.3.4-1/jpeg/jcarith.c **** 
 330:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Re-initialize statistics areas */
 331:fltk-1.3.4-1/jpeg/jcarith.c ****   for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 332:fltk-1.3.4-1/jpeg/jcarith.c ****     compptr = cinfo->cur_comp_info[ci];
 333:fltk-1.3.4-1/jpeg/jcarith.c ****     /* DC needs no table for refinement scan */
 334:fltk-1.3.4-1/jpeg/jcarith.c ****     if (cinfo->Ss == 0 && cinfo->Ah == 0) {
 335:fltk-1.3.4-1/jpeg/jcarith.c ****       MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 336:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Reset DC predictions to 0 */
 337:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->last_dc_val[ci] = 0;
 338:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->dc_context[ci] = 0;
 339:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 340:fltk-1.3.4-1/jpeg/jcarith.c ****     /* AC needs no table when not present */
 341:fltk-1.3.4-1/jpeg/jcarith.c ****     if (cinfo->Se) {
 342:fltk-1.3.4-1/jpeg/jcarith.c ****       MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 343:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 344:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 345:fltk-1.3.4-1/jpeg/jcarith.c **** 
 346:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Reset arithmetic encoding variables */
 347:fltk-1.3.4-1/jpeg/jcarith.c ****   entropy->c = 0;
 348:fltk-1.3.4-1/jpeg/jcarith.c ****   entropy->a = 0x10000L;
 349:fltk-1.3.4-1/jpeg/jcarith.c ****   entropy->sc = 0;
 350:fltk-1.3.4-1/jpeg/jcarith.c ****   entropy->zc = 0;
 351:fltk-1.3.4-1/jpeg/jcarith.c ****   entropy->ct = 11;
 352:fltk-1.3.4-1/jpeg/jcarith.c ****   entropy->buffer = -1;  /* empty */
 353:fltk-1.3.4-1/jpeg/jcarith.c **** }
 354:fltk-1.3.4-1/jpeg/jcarith.c **** 
 355:fltk-1.3.4-1/jpeg/jcarith.c **** 
 356:fltk-1.3.4-1/jpeg/jcarith.c **** /*
 357:fltk-1.3.4-1/jpeg/jcarith.c ****  * MCU encoding for DC initial scan (either spectral selection,
 358:fltk-1.3.4-1/jpeg/jcarith.c ****  * or first pass of successive approximation).
 359:fltk-1.3.4-1/jpeg/jcarith.c ****  */
 360:fltk-1.3.4-1/jpeg/jcarith.c **** 
 361:fltk-1.3.4-1/jpeg/jcarith.c **** METHODDEF(boolean)
 362:fltk-1.3.4-1/jpeg/jcarith.c **** encode_mcu_DC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
 363:fltk-1.3.4-1/jpeg/jcarith.c **** {
 364:fltk-1.3.4-1/jpeg/jcarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 365:fltk-1.3.4-1/jpeg/jcarith.c ****   unsigned char *st;
 366:fltk-1.3.4-1/jpeg/jcarith.c ****   int blkn, ci, tbl;
 367:fltk-1.3.4-1/jpeg/jcarith.c ****   int v, v2, m;
 368:fltk-1.3.4-1/jpeg/jcarith.c ****   ISHIFT_TEMPS
 369:fltk-1.3.4-1/jpeg/jcarith.c **** 
 370:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Emit restart marker if needed */
 371:fltk-1.3.4-1/jpeg/jcarith.c ****   if (cinfo->restart_interval) {
 372:fltk-1.3.4-1/jpeg/jcarith.c ****     if (entropy->restarts_to_go == 0) {
 373:fltk-1.3.4-1/jpeg/jcarith.c ****       emit_restart(cinfo, entropy->next_restart_num);
 374:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 375:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->next_restart_num++;
 376:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->next_restart_num &= 7;
 377:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 378:fltk-1.3.4-1/jpeg/jcarith.c ****     entropy->restarts_to_go--;
 379:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 380:fltk-1.3.4-1/jpeg/jcarith.c **** 
 381:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Encode the MCU data blocks */
 382:fltk-1.3.4-1/jpeg/jcarith.c ****   for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 383:fltk-1.3.4-1/jpeg/jcarith.c ****     ci = cinfo->MCU_membership[blkn];
 384:fltk-1.3.4-1/jpeg/jcarith.c ****     tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 385:fltk-1.3.4-1/jpeg/jcarith.c **** 
 386:fltk-1.3.4-1/jpeg/jcarith.c ****     /* Compute the DC value after the required point transform by Al.
 387:fltk-1.3.4-1/jpeg/jcarith.c ****      * This is simply an arithmetic right shift.
 388:fltk-1.3.4-1/jpeg/jcarith.c ****      */
 389:fltk-1.3.4-1/jpeg/jcarith.c ****     m = IRIGHT_SHIFT((int) (MCU_data[blkn][0][0]), cinfo->Al);
 390:fltk-1.3.4-1/jpeg/jcarith.c **** 
 391:fltk-1.3.4-1/jpeg/jcarith.c ****     /* Sections F.1.4.1 & F.1.4.4.1: Encoding of DC coefficients */
 392:fltk-1.3.4-1/jpeg/jcarith.c **** 
 393:fltk-1.3.4-1/jpeg/jcarith.c ****     /* Table F.4: Point to statistics bin S0 for DC coefficient coding */
 394:fltk-1.3.4-1/jpeg/jcarith.c ****     st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 395:fltk-1.3.4-1/jpeg/jcarith.c **** 
 396:fltk-1.3.4-1/jpeg/jcarith.c ****     /* Figure F.4: Encode_DC_DIFF */
 397:fltk-1.3.4-1/jpeg/jcarith.c ****     if ((v = m - entropy->last_dc_val[ci]) == 0) {
 398:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, 0);
 399:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->dc_context[ci] = 0;	/* zero diff category */
 400:fltk-1.3.4-1/jpeg/jcarith.c ****     } else {
 401:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->last_dc_val[ci] = m;
 402:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, 1);
 403:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Figure F.6: Encoding nonzero value v */
 404:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Figure F.7: Encoding the sign of v */
 405:fltk-1.3.4-1/jpeg/jcarith.c ****       if (v > 0) {
 406:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st + 1, 0);	/* Table F.4: SS = S0 + 1 */
 407:fltk-1.3.4-1/jpeg/jcarith.c **** 	st += 2;			/* Table F.4: SP = S0 + 2 */
 408:fltk-1.3.4-1/jpeg/jcarith.c **** 	entropy->dc_context[ci] = 4;	/* small positive diff category */
 409:fltk-1.3.4-1/jpeg/jcarith.c ****       } else {
 410:fltk-1.3.4-1/jpeg/jcarith.c **** 	v = -v;
 411:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st + 1, 1);	/* Table F.4: SS = S0 + 1 */
 412:fltk-1.3.4-1/jpeg/jcarith.c **** 	st += 3;			/* Table F.4: SN = S0 + 3 */
 413:fltk-1.3.4-1/jpeg/jcarith.c **** 	entropy->dc_context[ci] = 8;	/* small negative diff category */
 414:fltk-1.3.4-1/jpeg/jcarith.c ****       }
 415:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Figure F.8: Encoding the magnitude category of v */
 416:fltk-1.3.4-1/jpeg/jcarith.c ****       m = 0;
 417:fltk-1.3.4-1/jpeg/jcarith.c ****       if (v -= 1) {
 418:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st, 1);
 419:fltk-1.3.4-1/jpeg/jcarith.c **** 	m = 1;
 420:fltk-1.3.4-1/jpeg/jcarith.c **** 	v2 = v;
 421:fltk-1.3.4-1/jpeg/jcarith.c **** 	st = entropy->dc_stats[tbl] + 20; /* Table F.4: X1 = 20 */
 422:fltk-1.3.4-1/jpeg/jcarith.c **** 	while (v2 >>= 1) {
 423:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, st, 1);
 424:fltk-1.3.4-1/jpeg/jcarith.c **** 	  m <<= 1;
 425:fltk-1.3.4-1/jpeg/jcarith.c **** 	  st += 1;
 426:fltk-1.3.4-1/jpeg/jcarith.c **** 	}
 427:fltk-1.3.4-1/jpeg/jcarith.c ****       }
 428:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, 0);
 429:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Section F.1.4.4.1.2: Establish dc_context conditioning category */
 430:fltk-1.3.4-1/jpeg/jcarith.c ****       if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 431:fltk-1.3.4-1/jpeg/jcarith.c **** 	entropy->dc_context[ci] = 0;	/* zero diff category */
 432:fltk-1.3.4-1/jpeg/jcarith.c ****       else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 433:fltk-1.3.4-1/jpeg/jcarith.c **** 	entropy->dc_context[ci] += 8;	/* large diff category */
 434:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Figure F.9: Encoding the magnitude bit pattern of v */
 435:fltk-1.3.4-1/jpeg/jcarith.c ****       st += 14;
 436:fltk-1.3.4-1/jpeg/jcarith.c ****       while (m >>= 1)
 437:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st, (m & v) ? 1 : 0);
 438:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 439:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 440:fltk-1.3.4-1/jpeg/jcarith.c **** 
 441:fltk-1.3.4-1/jpeg/jcarith.c ****   return TRUE;
 442:fltk-1.3.4-1/jpeg/jcarith.c **** }
 443:fltk-1.3.4-1/jpeg/jcarith.c **** 
 444:fltk-1.3.4-1/jpeg/jcarith.c **** 
 445:fltk-1.3.4-1/jpeg/jcarith.c **** /*
 446:fltk-1.3.4-1/jpeg/jcarith.c ****  * MCU encoding for AC initial scan (either spectral selection,
 447:fltk-1.3.4-1/jpeg/jcarith.c ****  * or first pass of successive approximation).
 448:fltk-1.3.4-1/jpeg/jcarith.c ****  */
 449:fltk-1.3.4-1/jpeg/jcarith.c **** 
 450:fltk-1.3.4-1/jpeg/jcarith.c **** METHODDEF(boolean)
 451:fltk-1.3.4-1/jpeg/jcarith.c **** encode_mcu_AC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
 452:fltk-1.3.4-1/jpeg/jcarith.c **** {
 453:fltk-1.3.4-1/jpeg/jcarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 454:fltk-1.3.4-1/jpeg/jcarith.c ****   const int * natural_order;
 455:fltk-1.3.4-1/jpeg/jcarith.c ****   JBLOCKROW block;
 456:fltk-1.3.4-1/jpeg/jcarith.c ****   unsigned char *st;
 457:fltk-1.3.4-1/jpeg/jcarith.c ****   int tbl, k, ke;
 458:fltk-1.3.4-1/jpeg/jcarith.c ****   int v, v2, m;
 459:fltk-1.3.4-1/jpeg/jcarith.c **** 
 460:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Emit restart marker if needed */
 461:fltk-1.3.4-1/jpeg/jcarith.c ****   if (cinfo->restart_interval) {
 462:fltk-1.3.4-1/jpeg/jcarith.c ****     if (entropy->restarts_to_go == 0) {
 463:fltk-1.3.4-1/jpeg/jcarith.c ****       emit_restart(cinfo, entropy->next_restart_num);
 464:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 465:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->next_restart_num++;
 466:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->next_restart_num &= 7;
 467:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 468:fltk-1.3.4-1/jpeg/jcarith.c ****     entropy->restarts_to_go--;
 469:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 470:fltk-1.3.4-1/jpeg/jcarith.c **** 
 471:fltk-1.3.4-1/jpeg/jcarith.c ****   natural_order = cinfo->natural_order;
 472:fltk-1.3.4-1/jpeg/jcarith.c **** 
 473:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Encode the MCU data block */
 474:fltk-1.3.4-1/jpeg/jcarith.c ****   block = MCU_data[0];
 475:fltk-1.3.4-1/jpeg/jcarith.c ****   tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 476:fltk-1.3.4-1/jpeg/jcarith.c **** 
 477:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Sections F.1.4.2 & F.1.4.4.2: Encoding of AC coefficients */
 478:fltk-1.3.4-1/jpeg/jcarith.c **** 
 479:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Establish EOB (end-of-block) index */
 480:fltk-1.3.4-1/jpeg/jcarith.c ****   ke = cinfo->Se;
 481:fltk-1.3.4-1/jpeg/jcarith.c ****   do {
 482:fltk-1.3.4-1/jpeg/jcarith.c ****     /* We must apply the point transform by Al.  For AC coefficients this
 483:fltk-1.3.4-1/jpeg/jcarith.c ****      * is an integer division with rounding towards 0.  To do this portably
 484:fltk-1.3.4-1/jpeg/jcarith.c ****      * in C, we shift after obtaining the absolute value.
 485:fltk-1.3.4-1/jpeg/jcarith.c ****      */
 486:fltk-1.3.4-1/jpeg/jcarith.c ****     if ((v = (*block)[natural_order[ke]]) >= 0) {
 487:fltk-1.3.4-1/jpeg/jcarith.c ****       if (v >>= cinfo->Al) break;
 488:fltk-1.3.4-1/jpeg/jcarith.c ****     } else {
 489:fltk-1.3.4-1/jpeg/jcarith.c ****       v = -v;
 490:fltk-1.3.4-1/jpeg/jcarith.c ****       if (v >>= cinfo->Al) break;
 491:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 492:fltk-1.3.4-1/jpeg/jcarith.c ****   } while (--ke);
 493:fltk-1.3.4-1/jpeg/jcarith.c **** 
 494:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Figure F.5: Encode_AC_Coefficients */
 495:fltk-1.3.4-1/jpeg/jcarith.c ****   for (k = cinfo->Ss - 1; k < ke;) {
 496:fltk-1.3.4-1/jpeg/jcarith.c ****     st = entropy->ac_stats[tbl] + 3 * k;
 497:fltk-1.3.4-1/jpeg/jcarith.c ****     arith_encode(cinfo, st, 0);		/* EOB decision */
 498:fltk-1.3.4-1/jpeg/jcarith.c ****     for (;;) {
 499:fltk-1.3.4-1/jpeg/jcarith.c ****       if ((v = (*block)[natural_order[++k]]) >= 0) {
 500:fltk-1.3.4-1/jpeg/jcarith.c **** 	if (v >>= cinfo->Al) {
 501:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, st + 1, 1);
 502:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, entropy->fixed_bin, 0);
 503:fltk-1.3.4-1/jpeg/jcarith.c **** 	  break;
 504:fltk-1.3.4-1/jpeg/jcarith.c **** 	}
 505:fltk-1.3.4-1/jpeg/jcarith.c ****       } else {
 506:fltk-1.3.4-1/jpeg/jcarith.c **** 	v = -v;
 507:fltk-1.3.4-1/jpeg/jcarith.c **** 	if (v >>= cinfo->Al) {
 508:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, st + 1, 1);
 509:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, entropy->fixed_bin, 1);
 510:fltk-1.3.4-1/jpeg/jcarith.c **** 	  break;
 511:fltk-1.3.4-1/jpeg/jcarith.c **** 	}
 512:fltk-1.3.4-1/jpeg/jcarith.c ****       }
 513:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st + 1, 0);
 514:fltk-1.3.4-1/jpeg/jcarith.c ****       st += 3;
 515:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 516:fltk-1.3.4-1/jpeg/jcarith.c ****     st += 2;
 517:fltk-1.3.4-1/jpeg/jcarith.c ****     /* Figure F.8: Encoding the magnitude category of v */
 518:fltk-1.3.4-1/jpeg/jcarith.c ****     m = 0;
 519:fltk-1.3.4-1/jpeg/jcarith.c ****     if (v -= 1) {
 520:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, 1);
 521:fltk-1.3.4-1/jpeg/jcarith.c ****       m = 1;
 522:fltk-1.3.4-1/jpeg/jcarith.c ****       v2 = v;
 523:fltk-1.3.4-1/jpeg/jcarith.c ****       if (v2 >>= 1) {
 524:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st, 1);
 525:fltk-1.3.4-1/jpeg/jcarith.c **** 	m <<= 1;
 526:fltk-1.3.4-1/jpeg/jcarith.c **** 	st = entropy->ac_stats[tbl] +
 527:fltk-1.3.4-1/jpeg/jcarith.c **** 	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 528:fltk-1.3.4-1/jpeg/jcarith.c **** 	while (v2 >>= 1) {
 529:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, st, 1);
 530:fltk-1.3.4-1/jpeg/jcarith.c **** 	  m <<= 1;
 531:fltk-1.3.4-1/jpeg/jcarith.c **** 	  st += 1;
 532:fltk-1.3.4-1/jpeg/jcarith.c **** 	}
 533:fltk-1.3.4-1/jpeg/jcarith.c ****       }
 534:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 535:fltk-1.3.4-1/jpeg/jcarith.c ****     arith_encode(cinfo, st, 0);
 536:fltk-1.3.4-1/jpeg/jcarith.c ****     /* Figure F.9: Encoding the magnitude bit pattern of v */
 537:fltk-1.3.4-1/jpeg/jcarith.c ****     st += 14;
 538:fltk-1.3.4-1/jpeg/jcarith.c ****     while (m >>= 1)
 539:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, (m & v) ? 1 : 0);
 540:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 541:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Encode EOB decision only if k < cinfo->Se */
 542:fltk-1.3.4-1/jpeg/jcarith.c ****   if (k < cinfo->Se) {
 543:fltk-1.3.4-1/jpeg/jcarith.c ****     st = entropy->ac_stats[tbl] + 3 * k;
 544:fltk-1.3.4-1/jpeg/jcarith.c ****     arith_encode(cinfo, st, 1);
 545:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 546:fltk-1.3.4-1/jpeg/jcarith.c **** 
 547:fltk-1.3.4-1/jpeg/jcarith.c ****   return TRUE;
 548:fltk-1.3.4-1/jpeg/jcarith.c **** }
 549:fltk-1.3.4-1/jpeg/jcarith.c **** 
 550:fltk-1.3.4-1/jpeg/jcarith.c **** 
 551:fltk-1.3.4-1/jpeg/jcarith.c **** /*
 552:fltk-1.3.4-1/jpeg/jcarith.c ****  * MCU encoding for DC successive approximation refinement scan.
 553:fltk-1.3.4-1/jpeg/jcarith.c ****  * Note: we assume such scans can be multi-component,
 554:fltk-1.3.4-1/jpeg/jcarith.c ****  * although the spec is not very clear on the point.
 555:fltk-1.3.4-1/jpeg/jcarith.c ****  */
 556:fltk-1.3.4-1/jpeg/jcarith.c **** 
 557:fltk-1.3.4-1/jpeg/jcarith.c **** METHODDEF(boolean)
 558:fltk-1.3.4-1/jpeg/jcarith.c **** encode_mcu_DC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
 559:fltk-1.3.4-1/jpeg/jcarith.c **** {
 560:fltk-1.3.4-1/jpeg/jcarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 561:fltk-1.3.4-1/jpeg/jcarith.c ****   unsigned char *st;
 562:fltk-1.3.4-1/jpeg/jcarith.c ****   int Al, blkn;
 563:fltk-1.3.4-1/jpeg/jcarith.c **** 
 564:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Emit restart marker if needed */
 565:fltk-1.3.4-1/jpeg/jcarith.c ****   if (cinfo->restart_interval) {
 566:fltk-1.3.4-1/jpeg/jcarith.c ****     if (entropy->restarts_to_go == 0) {
 567:fltk-1.3.4-1/jpeg/jcarith.c ****       emit_restart(cinfo, entropy->next_restart_num);
 568:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 569:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->next_restart_num++;
 570:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->next_restart_num &= 7;
 571:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 572:fltk-1.3.4-1/jpeg/jcarith.c ****     entropy->restarts_to_go--;
 573:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 574:fltk-1.3.4-1/jpeg/jcarith.c **** 
 575:fltk-1.3.4-1/jpeg/jcarith.c ****   st = entropy->fixed_bin;	/* use fixed probability estimation */
 576:fltk-1.3.4-1/jpeg/jcarith.c ****   Al = cinfo->Al;
 577:fltk-1.3.4-1/jpeg/jcarith.c **** 
 578:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Encode the MCU data blocks */
 579:fltk-1.3.4-1/jpeg/jcarith.c ****   for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 580:fltk-1.3.4-1/jpeg/jcarith.c ****     /* We simply emit the Al'th bit of the DC coefficient value. */
 581:fltk-1.3.4-1/jpeg/jcarith.c ****     arith_encode(cinfo, st, (MCU_data[blkn][0][0] >> Al) & 1);
 582:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 583:fltk-1.3.4-1/jpeg/jcarith.c **** 
 584:fltk-1.3.4-1/jpeg/jcarith.c ****   return TRUE;
 585:fltk-1.3.4-1/jpeg/jcarith.c **** }
 586:fltk-1.3.4-1/jpeg/jcarith.c **** 
 587:fltk-1.3.4-1/jpeg/jcarith.c **** 
 588:fltk-1.3.4-1/jpeg/jcarith.c **** /*
 589:fltk-1.3.4-1/jpeg/jcarith.c ****  * MCU encoding for AC successive approximation refinement scan.
 590:fltk-1.3.4-1/jpeg/jcarith.c ****  */
 591:fltk-1.3.4-1/jpeg/jcarith.c **** 
 592:fltk-1.3.4-1/jpeg/jcarith.c **** METHODDEF(boolean)
 593:fltk-1.3.4-1/jpeg/jcarith.c **** encode_mcu_AC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
 594:fltk-1.3.4-1/jpeg/jcarith.c **** {
 595:fltk-1.3.4-1/jpeg/jcarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 596:fltk-1.3.4-1/jpeg/jcarith.c ****   const int * natural_order;
 597:fltk-1.3.4-1/jpeg/jcarith.c ****   JBLOCKROW block;
 598:fltk-1.3.4-1/jpeg/jcarith.c ****   unsigned char *st;
 599:fltk-1.3.4-1/jpeg/jcarith.c ****   int tbl, k, ke, kex;
 600:fltk-1.3.4-1/jpeg/jcarith.c ****   int v;
 601:fltk-1.3.4-1/jpeg/jcarith.c **** 
 602:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Emit restart marker if needed */
 603:fltk-1.3.4-1/jpeg/jcarith.c ****   if (cinfo->restart_interval) {
 604:fltk-1.3.4-1/jpeg/jcarith.c ****     if (entropy->restarts_to_go == 0) {
 605:fltk-1.3.4-1/jpeg/jcarith.c ****       emit_restart(cinfo, entropy->next_restart_num);
 606:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 607:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->next_restart_num++;
 608:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->next_restart_num &= 7;
 609:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 610:fltk-1.3.4-1/jpeg/jcarith.c ****     entropy->restarts_to_go--;
 611:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 612:fltk-1.3.4-1/jpeg/jcarith.c **** 
 613:fltk-1.3.4-1/jpeg/jcarith.c ****   natural_order = cinfo->natural_order;
 614:fltk-1.3.4-1/jpeg/jcarith.c **** 
 615:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Encode the MCU data block */
 616:fltk-1.3.4-1/jpeg/jcarith.c ****   block = MCU_data[0];
 617:fltk-1.3.4-1/jpeg/jcarith.c ****   tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 618:fltk-1.3.4-1/jpeg/jcarith.c **** 
 619:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Section G.1.3.3: Encoding of AC coefficients */
 620:fltk-1.3.4-1/jpeg/jcarith.c **** 
 621:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Establish EOB (end-of-block) index */
 622:fltk-1.3.4-1/jpeg/jcarith.c ****   ke = cinfo->Se;
 623:fltk-1.3.4-1/jpeg/jcarith.c ****   do {
 624:fltk-1.3.4-1/jpeg/jcarith.c ****     /* We must apply the point transform by Al.  For AC coefficients this
 625:fltk-1.3.4-1/jpeg/jcarith.c ****      * is an integer division with rounding towards 0.  To do this portably
 626:fltk-1.3.4-1/jpeg/jcarith.c ****      * in C, we shift after obtaining the absolute value.
 627:fltk-1.3.4-1/jpeg/jcarith.c ****      */
 628:fltk-1.3.4-1/jpeg/jcarith.c ****     if ((v = (*block)[natural_order[ke]]) >= 0) {
 629:fltk-1.3.4-1/jpeg/jcarith.c ****       if (v >>= cinfo->Al) break;
 630:fltk-1.3.4-1/jpeg/jcarith.c ****     } else {
 631:fltk-1.3.4-1/jpeg/jcarith.c ****       v = -v;
 632:fltk-1.3.4-1/jpeg/jcarith.c ****       if (v >>= cinfo->Al) break;
 633:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 634:fltk-1.3.4-1/jpeg/jcarith.c ****   } while (--ke);
 635:fltk-1.3.4-1/jpeg/jcarith.c **** 
 636:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Establish EOBx (previous stage end-of-block) index */
 637:fltk-1.3.4-1/jpeg/jcarith.c ****   for (kex = ke; kex > 0; kex--)
 638:fltk-1.3.4-1/jpeg/jcarith.c ****     if ((v = (*block)[natural_order[kex]]) >= 0) {
 639:fltk-1.3.4-1/jpeg/jcarith.c ****       if (v >>= cinfo->Ah) break;
 640:fltk-1.3.4-1/jpeg/jcarith.c ****     } else {
 641:fltk-1.3.4-1/jpeg/jcarith.c ****       v = -v;
 642:fltk-1.3.4-1/jpeg/jcarith.c ****       if (v >>= cinfo->Ah) break;
 643:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 644:fltk-1.3.4-1/jpeg/jcarith.c **** 
 645:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Figure G.10: Encode_AC_Coefficients_SA */
 646:fltk-1.3.4-1/jpeg/jcarith.c ****   for (k = cinfo->Ss - 1; k < ke;) {
 647:fltk-1.3.4-1/jpeg/jcarith.c ****     st = entropy->ac_stats[tbl] + 3 * k;
 648:fltk-1.3.4-1/jpeg/jcarith.c ****     if (k >= kex)
 649:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, 0);	/* EOB decision */
 650:fltk-1.3.4-1/jpeg/jcarith.c ****     for (;;) {
 651:fltk-1.3.4-1/jpeg/jcarith.c ****       if ((v = (*block)[natural_order[++k]]) >= 0) {
 652:fltk-1.3.4-1/jpeg/jcarith.c **** 	if (v >>= cinfo->Al) {
 653:fltk-1.3.4-1/jpeg/jcarith.c **** 	  if (v >> 1)			/* previously nonzero coef */
 654:fltk-1.3.4-1/jpeg/jcarith.c **** 	    arith_encode(cinfo, st + 2, (v & 1));
 655:fltk-1.3.4-1/jpeg/jcarith.c **** 	  else {			/* newly nonzero coef */
 656:fltk-1.3.4-1/jpeg/jcarith.c **** 	    arith_encode(cinfo, st + 1, 1);
 657:fltk-1.3.4-1/jpeg/jcarith.c **** 	    arith_encode(cinfo, entropy->fixed_bin, 0);
 658:fltk-1.3.4-1/jpeg/jcarith.c **** 	  }
 659:fltk-1.3.4-1/jpeg/jcarith.c **** 	  break;
 660:fltk-1.3.4-1/jpeg/jcarith.c **** 	}
 661:fltk-1.3.4-1/jpeg/jcarith.c ****       } else {
 662:fltk-1.3.4-1/jpeg/jcarith.c **** 	v = -v;
 663:fltk-1.3.4-1/jpeg/jcarith.c **** 	if (v >>= cinfo->Al) {
 664:fltk-1.3.4-1/jpeg/jcarith.c **** 	  if (v >> 1)			/* previously nonzero coef */
 665:fltk-1.3.4-1/jpeg/jcarith.c **** 	    arith_encode(cinfo, st + 2, (v & 1));
 666:fltk-1.3.4-1/jpeg/jcarith.c **** 	  else {			/* newly nonzero coef */
 667:fltk-1.3.4-1/jpeg/jcarith.c **** 	    arith_encode(cinfo, st + 1, 1);
 668:fltk-1.3.4-1/jpeg/jcarith.c **** 	    arith_encode(cinfo, entropy->fixed_bin, 1);
 669:fltk-1.3.4-1/jpeg/jcarith.c **** 	  }
 670:fltk-1.3.4-1/jpeg/jcarith.c **** 	  break;
 671:fltk-1.3.4-1/jpeg/jcarith.c **** 	}
 672:fltk-1.3.4-1/jpeg/jcarith.c ****       }
 673:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st + 1, 0);
 674:fltk-1.3.4-1/jpeg/jcarith.c ****       st += 3;
 675:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 676:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 677:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Encode EOB decision only if k < cinfo->Se */
 678:fltk-1.3.4-1/jpeg/jcarith.c ****   if (k < cinfo->Se) {
 679:fltk-1.3.4-1/jpeg/jcarith.c ****     st = entropy->ac_stats[tbl] + 3 * k;
 680:fltk-1.3.4-1/jpeg/jcarith.c ****     arith_encode(cinfo, st, 1);
 681:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 682:fltk-1.3.4-1/jpeg/jcarith.c **** 
 683:fltk-1.3.4-1/jpeg/jcarith.c ****   return TRUE;
 684:fltk-1.3.4-1/jpeg/jcarith.c **** }
 685:fltk-1.3.4-1/jpeg/jcarith.c **** 
 686:fltk-1.3.4-1/jpeg/jcarith.c **** 
 687:fltk-1.3.4-1/jpeg/jcarith.c **** /*
 688:fltk-1.3.4-1/jpeg/jcarith.c ****  * Encode and output one MCU's worth of arithmetic-compressed coefficients.
 689:fltk-1.3.4-1/jpeg/jcarith.c ****  */
 690:fltk-1.3.4-1/jpeg/jcarith.c **** 
 691:fltk-1.3.4-1/jpeg/jcarith.c **** METHODDEF(boolean)
 692:fltk-1.3.4-1/jpeg/jcarith.c **** encode_mcu (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
 693:fltk-1.3.4-1/jpeg/jcarith.c **** {
 694:fltk-1.3.4-1/jpeg/jcarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 695:fltk-1.3.4-1/jpeg/jcarith.c ****   const int * natural_order;
 696:fltk-1.3.4-1/jpeg/jcarith.c ****   JBLOCKROW block;
 697:fltk-1.3.4-1/jpeg/jcarith.c ****   unsigned char *st;
 698:fltk-1.3.4-1/jpeg/jcarith.c ****   int tbl, k, ke;
 699:fltk-1.3.4-1/jpeg/jcarith.c ****   int v, v2, m;
 700:fltk-1.3.4-1/jpeg/jcarith.c ****   int blkn, ci;
 701:fltk-1.3.4-1/jpeg/jcarith.c ****   jpeg_component_info * compptr;
 702:fltk-1.3.4-1/jpeg/jcarith.c **** 
 703:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Emit restart marker if needed */
 704:fltk-1.3.4-1/jpeg/jcarith.c ****   if (cinfo->restart_interval) {
 705:fltk-1.3.4-1/jpeg/jcarith.c ****     if (entropy->restarts_to_go == 0) {
 706:fltk-1.3.4-1/jpeg/jcarith.c ****       emit_restart(cinfo, entropy->next_restart_num);
 707:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 708:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->next_restart_num++;
 709:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->next_restart_num &= 7;
 710:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 711:fltk-1.3.4-1/jpeg/jcarith.c ****     entropy->restarts_to_go--;
 712:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 713:fltk-1.3.4-1/jpeg/jcarith.c **** 
 714:fltk-1.3.4-1/jpeg/jcarith.c ****   natural_order = cinfo->natural_order;
 715:fltk-1.3.4-1/jpeg/jcarith.c **** 
 716:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Encode the MCU data blocks */
 717:fltk-1.3.4-1/jpeg/jcarith.c ****   for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 718:fltk-1.3.4-1/jpeg/jcarith.c ****     block = MCU_data[blkn];
 719:fltk-1.3.4-1/jpeg/jcarith.c ****     ci = cinfo->MCU_membership[blkn];
 720:fltk-1.3.4-1/jpeg/jcarith.c ****     compptr = cinfo->cur_comp_info[ci];
 721:fltk-1.3.4-1/jpeg/jcarith.c **** 
 722:fltk-1.3.4-1/jpeg/jcarith.c ****     /* Sections F.1.4.1 & F.1.4.4.1: Encoding of DC coefficients */
 723:fltk-1.3.4-1/jpeg/jcarith.c **** 
 724:fltk-1.3.4-1/jpeg/jcarith.c ****     tbl = compptr->dc_tbl_no;
 725:fltk-1.3.4-1/jpeg/jcarith.c **** 
 726:fltk-1.3.4-1/jpeg/jcarith.c ****     /* Table F.4: Point to statistics bin S0 for DC coefficient coding */
 727:fltk-1.3.4-1/jpeg/jcarith.c ****     st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 728:fltk-1.3.4-1/jpeg/jcarith.c **** 
 729:fltk-1.3.4-1/jpeg/jcarith.c ****     /* Figure F.4: Encode_DC_DIFF */
 730:fltk-1.3.4-1/jpeg/jcarith.c ****     if ((v = (*block)[0] - entropy->last_dc_val[ci]) == 0) {
 731:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, 0);
 732:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->dc_context[ci] = 0;	/* zero diff category */
 733:fltk-1.3.4-1/jpeg/jcarith.c ****     } else {
 734:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->last_dc_val[ci] = (*block)[0];
 735:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, 1);
 736:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Figure F.6: Encoding nonzero value v */
 737:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Figure F.7: Encoding the sign of v */
 738:fltk-1.3.4-1/jpeg/jcarith.c ****       if (v > 0) {
 739:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st + 1, 0);	/* Table F.4: SS = S0 + 1 */
 740:fltk-1.3.4-1/jpeg/jcarith.c **** 	st += 2;			/* Table F.4: SP = S0 + 2 */
 741:fltk-1.3.4-1/jpeg/jcarith.c **** 	entropy->dc_context[ci] = 4;	/* small positive diff category */
 742:fltk-1.3.4-1/jpeg/jcarith.c ****       } else {
 743:fltk-1.3.4-1/jpeg/jcarith.c **** 	v = -v;
 744:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st + 1, 1);	/* Table F.4: SS = S0 + 1 */
 745:fltk-1.3.4-1/jpeg/jcarith.c **** 	st += 3;			/* Table F.4: SN = S0 + 3 */
 746:fltk-1.3.4-1/jpeg/jcarith.c **** 	entropy->dc_context[ci] = 8;	/* small negative diff category */
 747:fltk-1.3.4-1/jpeg/jcarith.c ****       }
 748:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Figure F.8: Encoding the magnitude category of v */
 749:fltk-1.3.4-1/jpeg/jcarith.c ****       m = 0;
 750:fltk-1.3.4-1/jpeg/jcarith.c ****       if (v -= 1) {
 751:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st, 1);
 752:fltk-1.3.4-1/jpeg/jcarith.c **** 	m = 1;
 753:fltk-1.3.4-1/jpeg/jcarith.c **** 	v2 = v;
 754:fltk-1.3.4-1/jpeg/jcarith.c **** 	st = entropy->dc_stats[tbl] + 20; /* Table F.4: X1 = 20 */
 755:fltk-1.3.4-1/jpeg/jcarith.c **** 	while (v2 >>= 1) {
 756:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, st, 1);
 757:fltk-1.3.4-1/jpeg/jcarith.c **** 	  m <<= 1;
 758:fltk-1.3.4-1/jpeg/jcarith.c **** 	  st += 1;
 759:fltk-1.3.4-1/jpeg/jcarith.c **** 	}
 760:fltk-1.3.4-1/jpeg/jcarith.c ****       }
 761:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, 0);
 762:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Section F.1.4.4.1.2: Establish dc_context conditioning category */
 763:fltk-1.3.4-1/jpeg/jcarith.c ****       if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 764:fltk-1.3.4-1/jpeg/jcarith.c **** 	entropy->dc_context[ci] = 0;	/* zero diff category */
 765:fltk-1.3.4-1/jpeg/jcarith.c ****       else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 766:fltk-1.3.4-1/jpeg/jcarith.c **** 	entropy->dc_context[ci] += 8;	/* large diff category */
 767:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Figure F.9: Encoding the magnitude bit pattern of v */
 768:fltk-1.3.4-1/jpeg/jcarith.c ****       st += 14;
 769:fltk-1.3.4-1/jpeg/jcarith.c ****       while (m >>= 1)
 770:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st, (m & v) ? 1 : 0);
 771:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 772:fltk-1.3.4-1/jpeg/jcarith.c **** 
 773:fltk-1.3.4-1/jpeg/jcarith.c ****     /* Sections F.1.4.2 & F.1.4.4.2: Encoding of AC coefficients */
 774:fltk-1.3.4-1/jpeg/jcarith.c **** 
 775:fltk-1.3.4-1/jpeg/jcarith.c ****     if ((ke = cinfo->lim_Se) == 0) continue;
 776:fltk-1.3.4-1/jpeg/jcarith.c ****     tbl = compptr->ac_tbl_no;
 777:fltk-1.3.4-1/jpeg/jcarith.c **** 
 778:fltk-1.3.4-1/jpeg/jcarith.c ****     /* Establish EOB (end-of-block) index */
 779:fltk-1.3.4-1/jpeg/jcarith.c ****     do {
 780:fltk-1.3.4-1/jpeg/jcarith.c ****       if ((*block)[natural_order[ke]]) break;
 781:fltk-1.3.4-1/jpeg/jcarith.c ****     } while (--ke);
 782:fltk-1.3.4-1/jpeg/jcarith.c **** 
 783:fltk-1.3.4-1/jpeg/jcarith.c ****     /* Figure F.5: Encode_AC_Coefficients */
 784:fltk-1.3.4-1/jpeg/jcarith.c ****     for (k = 0; k < ke;) {
 785:fltk-1.3.4-1/jpeg/jcarith.c ****       st = entropy->ac_stats[tbl] + 3 * k;
 786:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, 0);	/* EOB decision */
 787:fltk-1.3.4-1/jpeg/jcarith.c ****       while ((v = (*block)[natural_order[++k]]) == 0) {
 788:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st + 1, 0);
 789:fltk-1.3.4-1/jpeg/jcarith.c **** 	st += 3;
 790:fltk-1.3.4-1/jpeg/jcarith.c ****       }
 791:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st + 1, 1);
 792:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Figure F.6: Encoding nonzero value v */
 793:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Figure F.7: Encoding the sign of v */
 794:fltk-1.3.4-1/jpeg/jcarith.c ****       if (v > 0) {
 795:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, entropy->fixed_bin, 0);
 796:fltk-1.3.4-1/jpeg/jcarith.c ****       } else {
 797:fltk-1.3.4-1/jpeg/jcarith.c **** 	v = -v;
 798:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, entropy->fixed_bin, 1);
 799:fltk-1.3.4-1/jpeg/jcarith.c ****       }
 800:fltk-1.3.4-1/jpeg/jcarith.c ****       st += 2;
 801:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Figure F.8: Encoding the magnitude category of v */
 802:fltk-1.3.4-1/jpeg/jcarith.c ****       m = 0;
 803:fltk-1.3.4-1/jpeg/jcarith.c ****       if (v -= 1) {
 804:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st, 1);
 805:fltk-1.3.4-1/jpeg/jcarith.c **** 	m = 1;
 806:fltk-1.3.4-1/jpeg/jcarith.c **** 	v2 = v;
 807:fltk-1.3.4-1/jpeg/jcarith.c **** 	if (v2 >>= 1) {
 808:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, st, 1);
 809:fltk-1.3.4-1/jpeg/jcarith.c **** 	  m <<= 1;
 810:fltk-1.3.4-1/jpeg/jcarith.c **** 	  st = entropy->ac_stats[tbl] +
 811:fltk-1.3.4-1/jpeg/jcarith.c **** 	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 812:fltk-1.3.4-1/jpeg/jcarith.c **** 	  while (v2 >>= 1) {
 813:fltk-1.3.4-1/jpeg/jcarith.c **** 	    arith_encode(cinfo, st, 1);
 814:fltk-1.3.4-1/jpeg/jcarith.c **** 	    m <<= 1;
 815:fltk-1.3.4-1/jpeg/jcarith.c **** 	    st += 1;
 816:fltk-1.3.4-1/jpeg/jcarith.c **** 	  }
 817:fltk-1.3.4-1/jpeg/jcarith.c **** 	}
 818:fltk-1.3.4-1/jpeg/jcarith.c ****       }
 819:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, 0);
 820:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Figure F.9: Encoding the magnitude bit pattern of v */
 821:fltk-1.3.4-1/jpeg/jcarith.c ****       st += 14;
 822:fltk-1.3.4-1/jpeg/jcarith.c ****       while (m >>= 1)
 823:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st, (m & v) ? 1 : 0);
 824:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 825:fltk-1.3.4-1/jpeg/jcarith.c ****     /* Encode EOB decision only if k < cinfo->lim_Se */
 826:fltk-1.3.4-1/jpeg/jcarith.c ****     if (k < cinfo->lim_Se) {
 827:fltk-1.3.4-1/jpeg/jcarith.c ****       st = entropy->ac_stats[tbl] + 3 * k;
 828:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, 1);
 829:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 830:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 831:fltk-1.3.4-1/jpeg/jcarith.c **** 
 832:fltk-1.3.4-1/jpeg/jcarith.c ****   return TRUE;
 833:fltk-1.3.4-1/jpeg/jcarith.c **** }
 834:fltk-1.3.4-1/jpeg/jcarith.c **** 
 835:fltk-1.3.4-1/jpeg/jcarith.c **** 
 836:fltk-1.3.4-1/jpeg/jcarith.c **** /*
 837:fltk-1.3.4-1/jpeg/jcarith.c ****  * Initialize for an arithmetic-compressed scan.
 838:fltk-1.3.4-1/jpeg/jcarith.c ****  */
 839:fltk-1.3.4-1/jpeg/jcarith.c **** 
 840:fltk-1.3.4-1/jpeg/jcarith.c **** METHODDEF(void)
 841:fltk-1.3.4-1/jpeg/jcarith.c **** start_pass (j_compress_ptr cinfo, boolean gather_statistics)
 842:fltk-1.3.4-1/jpeg/jcarith.c **** {
  16              		.loc 1 842 0
  17              		.cfi_startproc
  18              	.LVL0:
  19 0000 4157     		pushq	%r15
  20              		.cfi_def_cfa_offset 16
  21              		.cfi_offset 15, -16
  22 0002 4156     		pushq	%r14
  23              		.cfi_def_cfa_offset 24
  24              		.cfi_offset 14, -24
  25 0004 4155     		pushq	%r13
  26              		.cfi_def_cfa_offset 32
  27              		.cfi_offset 13, -32
  28 0006 4154     		pushq	%r12
  29              		.cfi_def_cfa_offset 40
  30              		.cfi_offset 12, -40
  31 0008 55       		pushq	%rbp
  32              		.cfi_def_cfa_offset 48
  33              		.cfi_offset 6, -48
  34 0009 53       		pushq	%rbx
  35              		.cfi_def_cfa_offset 56
  36              		.cfi_offset 3, -56
  37 000a 4889FB   		movq	%rdi, %rbx
  38 000d 4883EC18 		subq	$24, %rsp
  39              		.cfi_def_cfa_offset 80
 843:fltk-1.3.4-1/jpeg/jcarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 844:fltk-1.3.4-1/jpeg/jcarith.c ****   int ci, tbl;
 845:fltk-1.3.4-1/jpeg/jcarith.c ****   jpeg_component_info * compptr;
 846:fltk-1.3.4-1/jpeg/jcarith.c **** 
 847:fltk-1.3.4-1/jpeg/jcarith.c ****   if (gather_statistics)
  40              		.loc 1 847 0
  41 0011 85F6     		testl	%esi, %esi
 843:fltk-1.3.4-1/jpeg/jcarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
  42              		.loc 1 843 0
  43 0013 488BAF30 		movq	560(%rdi), %rbp
  43      020000
  44              	.LVL1:
  45              		.loc 1 847 0
  46 001a 0F85F001 		jne	.L24
  46      0000
  47              	.LVL2:
  48              	.L2:
 848:fltk-1.3.4-1/jpeg/jcarith.c ****     /* Make sure to avoid that in the master control logic!
 849:fltk-1.3.4-1/jpeg/jcarith.c ****      * We are fully adaptive here and need no extra
 850:fltk-1.3.4-1/jpeg/jcarith.c ****      * statistics gathering pass!
 851:fltk-1.3.4-1/jpeg/jcarith.c ****      */
 852:fltk-1.3.4-1/jpeg/jcarith.c ****     ERREXIT(cinfo, JERR_NOT_COMPILED);
 853:fltk-1.3.4-1/jpeg/jcarith.c **** 
 854:fltk-1.3.4-1/jpeg/jcarith.c ****   /* We assume jcmaster.c already validated the progressive scan parameters. */
 855:fltk-1.3.4-1/jpeg/jcarith.c **** 
 856:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Select execution routines */
 857:fltk-1.3.4-1/jpeg/jcarith.c ****   if (cinfo->progressive_mode) {
  49              		.loc 1 857 0
  50 0020 448B935C 		movl	348(%rbx), %r10d
  50      010000
  51 0027 4585D2   		testl	%r10d, %r10d
  52 002a 0F848800 		je	.L3
  52      0000
 858:fltk-1.3.4-1/jpeg/jcarith.c ****     if (cinfo->Ah == 0) {
  53              		.loc 1 858 0
  54 0030 448B8BD4 		movl	468(%rbx), %r9d
  54      010000
  55 0037 4585C9   		testl	%r9d, %r9d
  56 003a 0F85A801 		jne	.L4
  56      0000
 859:fltk-1.3.4-1/jpeg/jcarith.c ****       if (cinfo->Ss == 0)
 860:fltk-1.3.4-1/jpeg/jcarith.c **** 	entropy->pub.encode_mcu = encode_mcu_DC_first;
  57              		.loc 1 860 0
  58 0040 448B83CC 		movl	460(%rbx), %r8d
  58      010000
  59 0047 BA000000 		movl	$encode_mcu_DC_first, %edx
  59      00
  60 004c B8000000 		movl	$encode_mcu_AC_first, %eax
  60      00
  61 0051 4585C0   		testl	%r8d, %r8d
  62 0054 480F44C2 		cmove	%rdx, %rax
  63 0058 48894508 		movq	%rax, 8(%rbp)
  64              	.LVL3:
 861:fltk-1.3.4-1/jpeg/jcarith.c ****       else
 862:fltk-1.3.4-1/jpeg/jcarith.c **** 	entropy->pub.encode_mcu = encode_mcu_AC_first;
 863:fltk-1.3.4-1/jpeg/jcarith.c ****     } else {
 864:fltk-1.3.4-1/jpeg/jcarith.c ****       if (cinfo->Ss == 0)
 865:fltk-1.3.4-1/jpeg/jcarith.c **** 	entropy->pub.encode_mcu = encode_mcu_DC_refine;
 866:fltk-1.3.4-1/jpeg/jcarith.c ****       else
 867:fltk-1.3.4-1/jpeg/jcarith.c **** 	entropy->pub.encode_mcu = encode_mcu_AC_refine;
 868:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 869:fltk-1.3.4-1/jpeg/jcarith.c ****   } else
 870:fltk-1.3.4-1/jpeg/jcarith.c ****     entropy->pub.encode_mcu = encode_mcu;
 871:fltk-1.3.4-1/jpeg/jcarith.c **** 
 872:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Allocate & initialize requested statistics areas */
 873:fltk-1.3.4-1/jpeg/jcarith.c ****   for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
  65              		.loc 1 873 0
  66 005c 8BB37401 		movl	372(%rbx), %esi
  66      0000
  67 0062 85F6     		testl	%esi, %esi
  68 0064 7F64     		jg	.L8
  69              	.LVL4:
  70              	.L16:
 874:fltk-1.3.4-1/jpeg/jcarith.c ****     compptr = cinfo->cur_comp_info[ci];
 875:fltk-1.3.4-1/jpeg/jcarith.c ****     /* DC needs no table for refinement scan */
 876:fltk-1.3.4-1/jpeg/jcarith.c ****     if (cinfo->Ss == 0 && cinfo->Ah == 0) {
 877:fltk-1.3.4-1/jpeg/jcarith.c ****       tbl = compptr->dc_tbl_no;
 878:fltk-1.3.4-1/jpeg/jcarith.c ****       if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 879:fltk-1.3.4-1/jpeg/jcarith.c **** 	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 880:fltk-1.3.4-1/jpeg/jcarith.c ****       if (entropy->dc_stats[tbl] == NULL)
 881:fltk-1.3.4-1/jpeg/jcarith.c **** 	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 882:fltk-1.3.4-1/jpeg/jcarith.c **** 	  ((j_common_ptr) cinfo, JPOOL_IMAGE, DC_STAT_BINS);
 883:fltk-1.3.4-1/jpeg/jcarith.c ****       MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
 884:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Initialize DC predictions to 0 */
 885:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->last_dc_val[ci] = 0;
 886:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->dc_context[ci] = 0;
 887:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 888:fltk-1.3.4-1/jpeg/jcarith.c ****     /* AC needs no table when not present */
 889:fltk-1.3.4-1/jpeg/jcarith.c ****     if (cinfo->Se) {
 890:fltk-1.3.4-1/jpeg/jcarith.c ****       tbl = compptr->ac_tbl_no;
 891:fltk-1.3.4-1/jpeg/jcarith.c ****       if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 892:fltk-1.3.4-1/jpeg/jcarith.c **** 	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 893:fltk-1.3.4-1/jpeg/jcarith.c ****       if (entropy->ac_stats[tbl] == NULL)
 894:fltk-1.3.4-1/jpeg/jcarith.c **** 	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 895:fltk-1.3.4-1/jpeg/jcarith.c **** 	  ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
 896:fltk-1.3.4-1/jpeg/jcarith.c ****       MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 897:fltk-1.3.4-1/jpeg/jcarith.c **** #ifdef CALCULATE_SPECTRAL_CONDITIONING
 898:fltk-1.3.4-1/jpeg/jcarith.c ****       if (cinfo->progressive_mode)
 899:fltk-1.3.4-1/jpeg/jcarith.c **** 	/* Section G.1.3.2: Set appropriate arithmetic conditioning value Kx */
 900:fltk-1.3.4-1/jpeg/jcarith.c **** 	cinfo->arith_ac_K[tbl] = cinfo->Ss + ((8 + cinfo->Se - cinfo->Ss) >> 4);
 901:fltk-1.3.4-1/jpeg/jcarith.c **** #endif
 902:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 903:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 904:fltk-1.3.4-1/jpeg/jcarith.c **** 
 905:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Initialize arithmetic encoding variables */
 906:fltk-1.3.4-1/jpeg/jcarith.c ****   entropy->c = 0;
  71              		.loc 1 906 0
  72 0066 48C74518 		movq	$0, 24(%rbp)
  72      00000000 
 907:fltk-1.3.4-1/jpeg/jcarith.c ****   entropy->a = 0x10000L;
  73              		.loc 1 907 0
  74 006e 48C74520 		movq	$65536, 32(%rbp)
  74      00000100 
 908:fltk-1.3.4-1/jpeg/jcarith.c ****   entropy->sc = 0;
  75              		.loc 1 908 0
  76 0076 48C74528 		movq	$0, 40(%rbp)
  76      00000000 
 909:fltk-1.3.4-1/jpeg/jcarith.c ****   entropy->zc = 0;
  77              		.loc 1 909 0
  78 007e 48C74530 		movq	$0, 48(%rbp)
  78      00000000 
 910:fltk-1.3.4-1/jpeg/jcarith.c ****   entropy->ct = 11;
  79              		.loc 1 910 0
  80 0086 C745380B 		movl	$11, 56(%rbp)
  80      000000
 911:fltk-1.3.4-1/jpeg/jcarith.c ****   entropy->buffer = -1;  /* empty */
  81              		.loc 1 911 0
  82 008d C7453CFF 		movl	$-1, 60(%rbp)
  82      FFFFFF
 912:fltk-1.3.4-1/jpeg/jcarith.c **** 
 913:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Initialize restart stuff */
 914:fltk-1.3.4-1/jpeg/jcarith.c ****   entropy->restarts_to_go = cinfo->restart_interval;
  83              		.loc 1 914 0
  84 0094 8B833C01 		movl	316(%rbx), %eax
  84      0000
 915:fltk-1.3.4-1/jpeg/jcarith.c ****   entropy->next_restart_num = 0;
  85              		.loc 1 915 0
  86 009a C7456400 		movl	$0, 100(%rbp)
  86      000000
 914:fltk-1.3.4-1/jpeg/jcarith.c ****   entropy->next_restart_num = 0;
  87              		.loc 1 914 0
  88 00a1 894560   		movl	%eax, 96(%rbp)
 916:fltk-1.3.4-1/jpeg/jcarith.c **** }
  89              		.loc 1 916 0
  90 00a4 4883C418 		addq	$24, %rsp
  91              		.cfi_remember_state
  92              		.cfi_def_cfa_offset 56
  93 00a8 5B       		popq	%rbx
  94              		.cfi_def_cfa_offset 48
  95              	.LVL5:
  96 00a9 5D       		popq	%rbp
  97              		.cfi_def_cfa_offset 40
  98              	.LVL6:
  99 00aa 415C     		popq	%r12
 100              		.cfi_def_cfa_offset 32
 101 00ac 415D     		popq	%r13
 102              		.cfi_def_cfa_offset 24
 103 00ae 415E     		popq	%r14
 104              		.cfi_def_cfa_offset 16
 105 00b0 415F     		popq	%r15
 106              		.cfi_def_cfa_offset 8
 107 00b2 C3       		ret
 108              	.LVL7:
 109              		.p2align 4,,10
 110 00b3 0F1F4400 		.p2align 3
 110      00
 111              	.L3:
 112              		.cfi_restore_state
 870:fltk-1.3.4-1/jpeg/jcarith.c **** 
 113              		.loc 1 870 0
 114 00b8 48C74508 		movq	$encode_mcu, 8(%rbp)
 114      00000000 
 115              	.L6:
 116              	.LVL8:
 873:fltk-1.3.4-1/jpeg/jcarith.c ****     compptr = cinfo->cur_comp_info[ci];
 117              		.loc 1 873 0 discriminator 1
 118 00c0 8BB37401 		movl	372(%rbx), %esi
 118      0000
 119 00c6 85F6     		testl	%esi, %esi
 120 00c8 7E9C     		jle	.L16
 121              	.L8:
 122 00ca 4C8DAB78 		leaq	376(%rbx), %r13
 122      010000
 123 00d1 4C8D7540 		leaq	64(%rbp), %r14
 873:fltk-1.3.4-1/jpeg/jcarith.c ****     compptr = cinfo->cur_comp_info[ci];
 124              		.loc 1 873 0 is_stmt 0
 125 00d5 4531E4   		xorl	%r12d, %r12d
 126              	.LBB10:
 127              	.LBB11:
 128              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string3.h"
   1:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* Copyright (C) 2004-2016 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string3.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string3.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string3.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string3.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string3.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string3.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string3.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string3.h ****    <http://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef _STRING_H
  19:/usr/include/x86_64-linux-gnu/bits/string3.h **** # error "Never use <bits/string3.h> directly; include <string.h> instead."
  20:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  21:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  22:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  23:/usr/include/x86_64-linux-gnu/bits/string3.h **** __warndecl (__warn_memset_zero_len,
  24:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  25:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  26:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  27:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef __cplusplus
  28:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* XXX This is temporarily.  We should not redefine any of the symbols
  29:/usr/include/x86_64-linux-gnu/bits/string3.h ****    and instead integrate the error checking into the original
  30:/usr/include/x86_64-linux-gnu/bits/string3.h ****    definitions.  */
  31:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memcpy
  32:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memmove
  33:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memset
  34:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcat
  35:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcpy
  36:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncat
  37:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncpy
  38:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_GNU
  39:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef mempcpy
  40:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef stpcpy
  41:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  42:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_MISC
  43:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bcopy
  44:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bzero
  45:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  46:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  47:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  48:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  49:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  50:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  51:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	       size_t __len))
  52:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  53:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  54:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  55:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  56:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  57:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memmove (void *__dest, const void *__src, size_t __len))
  58:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  59:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  60:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  61:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  62:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifdef __USE_GNU
  63:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  64:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
  65:/usr/include/x86_64-linux-gnu/bits/string3.h **** 		size_t __len))
  66:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  67:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
  68:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  69:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  70:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  71:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  72:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* The first two tests here help to catch a somewhat common problem
  73:/usr/include/x86_64-linux-gnu/bits/string3.h ****    where the second and third parameter are transposed.  This is
  74:/usr/include/x86_64-linux-gnu/bits/string3.h ****    especially problematic if the intended fill value is zero.  In this
  75:/usr/include/x86_64-linux-gnu/bits/string3.h ****    case no work is done at all.  We detect these problems by referring
  76:/usr/include/x86_64-linux-gnu/bits/string3.h ****    non-existing functions.  */
  77:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  78:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memset (void *__dest, int __ch, size_t __len))
  79:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  80:/usr/include/x86_64-linux-gnu/bits/string3.h ****   /* GCC-5.0 and newer implements these checks in the compiler, so we don't
  81:/usr/include/x86_64-linux-gnu/bits/string3.h ****      need them here.  */
  82:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  83:/usr/include/x86_64-linux-gnu/bits/string3.h ****   if (__builtin_constant_p (__len) && __len == 0
  84:/usr/include/x86_64-linux-gnu/bits/string3.h ****       && (!__builtin_constant_p (__ch) || __ch != 0))
  85:/usr/include/x86_64-linux-gnu/bits/string3.h ****     {
  86:/usr/include/x86_64-linux-gnu/bits/string3.h ****       __warn_memset_zero_len ();
  87:/usr/include/x86_64-linux-gnu/bits/string3.h ****       return __dest;
  88:/usr/include/x86_64-linux-gnu/bits/string3.h ****     }
  89:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  90:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 129              		.loc 2 90 0 is_stmt 1
 130 00d8 4531FF   		xorl	%r15d, %r15d
 131              	.LVL9:
 132              	.L15:
 133              	.LBE11:
 134              	.LBE10:
 876:fltk-1.3.4-1/jpeg/jcarith.c ****       tbl = compptr->dc_tbl_no;
 135              		.loc 1 876 0
 136 00db 8B8BCC01 		movl	460(%rbx), %ecx
 136      0000
 874:fltk-1.3.4-1/jpeg/jcarith.c ****     /* DC needs no table for refinement scan */
 137              		.loc 1 874 0
 138 00e1 4D8B4500 		movq	0(%r13), %r8
 139              	.LVL10:
 876:fltk-1.3.4-1/jpeg/jcarith.c ****       tbl = compptr->dc_tbl_no;
 140              		.loc 1 876 0
 141 00e5 85C9     		testl	%ecx, %ecx
 142 00e7 755E     		jne	.L9
 876:fltk-1.3.4-1/jpeg/jcarith.c ****       tbl = compptr->dc_tbl_no;
 143              		.loc 1 876 0 is_stmt 0 discriminator 1
 144 00e9 8B93D401 		movl	468(%rbx), %edx
 144      0000
 145 00ef 85D2     		testl	%edx, %edx
 146 00f1 7554     		jne	.L9
 877:fltk-1.3.4-1/jpeg/jcarith.c ****       if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 147              		.loc 1 877 0 is_stmt 1
 148 00f3 49634014 		movslq	20(%r8), %rax
 149              	.LVL11:
 878:fltk-1.3.4-1/jpeg/jcarith.c **** 	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 150              		.loc 1 878 0
 151 00f7 83F80F   		cmpl	$15, %eax
 152 00fa 0F872801 		ja	.L25
 152      0000
 153              	.LVL12:
 154              	.L10:
 155 0100 488D4CC5 		leaq	0(%rbp,%rax,8), %rcx
 155      00
 880:fltk-1.3.4-1/jpeg/jcarith.c **** 	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 156              		.loc 1 880 0
 157 0105 488B4168 		movq	104(%rcx), %rax
 158 0109 4885C0   		testq	%rax, %rax
 159 010c 0F847E01 		je	.L26
 159      0000
 160              	.L11:
 161              	.LVL13:
 162              	.LBB13:
 163              	.LBB12:
 164              		.loc 2 90 0
 165 0112 488D7808 		leaq	8(%rax), %rdi
 166 0116 48C70000 		movq	$0, (%rax)
 166      000000
 167 011d 48C74038 		movq	$0, 56(%rax)
 167      00000000 
 168 0125 4883E7F8 		andq	$-8, %rdi
 169 0129 4829F8   		subq	%rdi, %rax
 170 012c 8D4840   		leal	64(%rax), %ecx
 171 012f 4C89F8   		movq	%r15, %rax
 172 0132 C1E903   		shrl	$3, %ecx
 173 0135 F348AB   		rep stosq
 174              	.LVL14:
 175              	.LBE12:
 176              	.LBE13:
 885:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->dc_context[ci] = 0;
 177              		.loc 1 885 0
 178 0138 41C70600 		movl	$0, (%r14)
 178      000000
 886:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 179              		.loc 1 886 0
 180 013f 41C74610 		movl	$0, 16(%r14)
 180      00000000 
 181              	.L9:
 889:fltk-1.3.4-1/jpeg/jcarith.c ****       tbl = compptr->ac_tbl_no;
 182              		.loc 1 889 0
 183 0147 8B83D001 		movl	464(%rbx), %eax
 183      0000
 184 014d 85C0     		testl	%eax, %eax
 185 014f 744A     		je	.L12
 890:fltk-1.3.4-1/jpeg/jcarith.c ****       if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 186              		.loc 1 890 0
 187 0151 49634018 		movslq	24(%r8), %rax
 188              	.LVL15:
 891:fltk-1.3.4-1/jpeg/jcarith.c **** 	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 189              		.loc 1 891 0
 190 0155 83F80F   		cmpl	$15, %eax
 191 0158 7766     		ja	.L27
 192              	.LVL16:
 193              	.L13:
 194 015a 488D4CC5 		leaq	0(%rbp,%rax,8), %rcx
 194      00
 893:fltk-1.3.4-1/jpeg/jcarith.c **** 	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 195              		.loc 1 893 0
 196 015f 488B81E8 		movq	232(%rcx), %rax
 196      000000
 197 0166 4885C0   		testq	%rax, %rax
 198 0169 0F84F100 		je	.L28
 198      0000
 199              	.L14:
 200              	.LVL17:
 201              	.LBB14:
 202              	.LBB15:
 203              		.loc 2 90 0
 204 016f 488D7808 		leaq	8(%rax), %rdi
 205 0173 48C70000 		movq	$0, (%rax)
 205      000000
 206 017a 48C780F8 		movq	$0, 248(%rax)
 206      00000000 
 206      000000
 207 0185 4883E7F8 		andq	$-8, %rdi
 208 0189 4829F8   		subq	%rdi, %rax
 209 018c 8D880001 		leal	256(%rax), %ecx
 209      0000
 210 0192 4C89F8   		movq	%r15, %rax
 211 0195 C1E903   		shrl	$3, %ecx
 212 0198 F348AB   		rep stosq
 213              	.LVL18:
 214              	.L12:
 215              	.LBE15:
 216              	.LBE14:
 873:fltk-1.3.4-1/jpeg/jcarith.c ****     compptr = cinfo->cur_comp_info[ci];
 217              		.loc 1 873 0 discriminator 2
 218 019b 4183C401 		addl	$1, %r12d
 219              	.LVL19:
 220 019f 4983C508 		addq	$8, %r13
 221 01a3 4983C604 		addq	$4, %r14
 222 01a7 4439A374 		cmpl	%r12d, 372(%rbx)
 222      010000
 223 01ae 0F8F27FF 		jg	.L15
 223      FFFF
 224 01b4 E9ADFEFF 		jmp	.L16
 224      FF
 225              	.LVL20:
 226 01b9 0F1F8000 		.p2align 4,,10
 226      000000
 227              		.p2align 3
 228              	.L27:
 892:fltk-1.3.4-1/jpeg/jcarith.c ****       if (entropy->ac_stats[tbl] == NULL)
 229              		.loc 1 892 0
 230 01c0 488B13   		movq	(%rbx), %rdx
 231 01c3 890424   		movl	%eax, (%rsp)
 232 01c6 4889DF   		movq	%rbx, %rdi
 233 01c9 C7422832 		movl	$50, 40(%rdx)
 233      000000
 234              	.LVL21:
 235 01d0 488B13   		movq	(%rbx), %rdx
 236 01d3 89422C   		movl	%eax, 44(%rdx)
 237 01d6 488B13   		movq	(%rbx), %rdx
 238 01d9 FF12     		call	*(%rdx)
 239              	.LVL22:
 240 01db 48630424 		movslq	(%rsp), %rax
 241 01df E976FFFF 		jmp	.L13
 241      FF
 242              	.LVL23:
 243              		.p2align 4,,10
 244 01e4 0F1F4000 		.p2align 3
 245              	.L4:
 865:fltk-1.3.4-1/jpeg/jcarith.c ****       else
 246              		.loc 1 865 0
 247 01e8 8BBBCC01 		movl	460(%rbx), %edi
 247      0000
 248 01ee BA000000 		movl	$encode_mcu_DC_refine, %edx
 248      00
 249 01f3 B8000000 		movl	$encode_mcu_AC_refine, %eax
 249      00
 250 01f8 85FF     		testl	%edi, %edi
 251 01fa 480F44C2 		cmove	%rdx, %rax
 252 01fe 48894508 		movq	%rax, 8(%rbp)
 253 0202 E9B9FEFF 		jmp	.L6
 253      FF
 254              	.LVL24:
 255 0207 660F1F84 		.p2align 4,,10
 255      00000000 
 255      00
 256              		.p2align 3
 257              	.L24:
 852:fltk-1.3.4-1/jpeg/jcarith.c **** 
 258              		.loc 1 852 0
 259 0210 488B07   		movq	(%rdi), %rax
 260 0213 C7402831 		movl	$49, 40(%rax)
 260      000000
 261 021a 488B07   		movq	(%rdi), %rax
 262 021d FF10     		call	*(%rax)
 263              	.LVL25:
 264 021f E9FCFDFF 		jmp	.L2
 264      FF
 265              	.LVL26:
 266              		.p2align 4,,10
 267 0224 0F1F4000 		.p2align 3
 268              	.L25:
 879:fltk-1.3.4-1/jpeg/jcarith.c ****       if (entropy->dc_stats[tbl] == NULL)
 269              		.loc 1 879 0
 270 0228 488B13   		movq	(%rbx), %rdx
 271 022b 4C894424 		movq	%r8, 8(%rsp)
 271      08
 272 0230 4889DF   		movq	%rbx, %rdi
 273 0233 890424   		movl	%eax, (%rsp)
 274 0236 C7422832 		movl	$50, 40(%rdx)
 274      000000
 275              	.LVL27:
 276 023d 488B13   		movq	(%rbx), %rdx
 277 0240 89422C   		movl	%eax, 44(%rdx)
 278 0243 488B13   		movq	(%rbx), %rdx
 279 0246 FF12     		call	*(%rdx)
 280              	.LVL28:
 281 0248 4C8B4424 		movq	8(%rsp), %r8
 281      08
 282 024d 48630424 		movslq	(%rsp), %rax
 283 0251 E9AAFEFF 		jmp	.L10
 283      FF
 284              	.LVL29:
 285 0256 662E0F1F 		.p2align 4,,10
 285      84000000 
 285      0000
 286              		.p2align 3
 287              	.L28:
 894:fltk-1.3.4-1/jpeg/jcarith.c **** 	  ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
 288              		.loc 1 894 0
 289 0260 488B4308 		movq	8(%rbx), %rax
 290 0264 48890C24 		movq	%rcx, (%rsp)
 291 0268 BA000100 		movl	$256, %edx
 291      00
 292 026d BE010000 		movl	$1, %esi
 292      00
 293 0272 4889DF   		movq	%rbx, %rdi
 294 0275 FF10     		call	*(%rax)
 295              	.LVL30:
 296 0277 488B0C24 		movq	(%rsp), %rcx
 297 027b 488981E8 		movq	%rax, 232(%rcx)
 297      000000
 298 0282 E9E8FEFF 		jmp	.L14
 298      FF
 299 0287 660F1F84 		.p2align 4,,10
 299      00000000 
 299      00
 300              		.p2align 3
 301              	.L26:
 881:fltk-1.3.4-1/jpeg/jcarith.c **** 	  ((j_common_ptr) cinfo, JPOOL_IMAGE, DC_STAT_BINS);
 302              		.loc 1 881 0
 303 0290 488B4308 		movq	8(%rbx), %rax
 304 0294 48894C24 		movq	%rcx, 8(%rsp)
 304      08
 305 0299 BA400000 		movl	$64, %edx
 305      00
 306 029e 4C890424 		movq	%r8, (%rsp)
 307 02a2 BE010000 		movl	$1, %esi
 307      00
 308 02a7 4889DF   		movq	%rbx, %rdi
 309 02aa FF10     		call	*(%rax)
 310              	.LVL31:
 311 02ac 488B4C24 		movq	8(%rsp), %rcx
 311      08
 312 02b1 4C8B0424 		movq	(%rsp), %r8
 313 02b5 48894168 		movq	%rax, 104(%rcx)
 314 02b9 E954FEFF 		jmp	.L11
 314      FF
 315              		.cfi_endproc
 316              	.LFE70:
 318              		.section	.text.unlikely.start_pass
 319              	.LCOLDE0:
 320              		.section	.text.start_pass
 321              	.LHOTE0:
 322              		.section	.text.unlikely.emit_byte,"ax",@progbits
 323              	.LCOLDB1:
 324              		.section	.text.emit_byte,"ax",@progbits
 325              	.LHOTB1:
 326              		.p2align 4,,15
 328              	emit_byte:
 329              	.LFB61:
 118:fltk-1.3.4-1/jpeg/jcarith.c ****   struct jpeg_destination_mgr * dest = cinfo->dest;
 330              		.loc 1 118 0
 331              		.cfi_startproc
 332              	.LVL32:
 119:fltk-1.3.4-1/jpeg/jcarith.c **** 
 333              		.loc 1 119 0
 334 0000 488B4628 		movq	40(%rsi), %rax
 335              	.LVL33:
 118:fltk-1.3.4-1/jpeg/jcarith.c ****   struct jpeg_destination_mgr * dest = cinfo->dest;
 336              		.loc 1 118 0
 337 0004 53       		pushq	%rbx
 338              		.cfi_def_cfa_offset 16
 339              		.cfi_offset 3, -16
 121:fltk-1.3.4-1/jpeg/jcarith.c ****   if (--dest->free_in_buffer == 0)
 340              		.loc 1 121 0
 341 0005 488B10   		movq	(%rax), %rdx
 342 0008 488D4A01 		leaq	1(%rdx), %rcx
 343 000c 488908   		movq	%rcx, (%rax)
 344 000f 40883A   		movb	%dil, (%rdx)
 122:fltk-1.3.4-1/jpeg/jcarith.c ****     if (! (*dest->empty_output_buffer) (cinfo))
 345              		.loc 1 122 0
 346 0012 488B5808 		movq	8(%rax), %rbx
 347 0016 488D53FF 		leaq	-1(%rbx), %rdx
 348 001a 4885D2   		testq	%rdx, %rdx
 349 001d 48895008 		movq	%rdx, 8(%rax)
 350 0021 7405     		je	.L34
 351              	.LVL34:
 352              	.L29:
 125:fltk-1.3.4-1/jpeg/jcarith.c **** 
 353              		.loc 1 125 0
 354 0023 5B       		popq	%rbx
 355              		.cfi_remember_state
 356              		.cfi_def_cfa_offset 8
 357 0024 C3       		ret
 358              	.LVL35:
 359              		.p2align 4,,10
 360 0025 0F1F00   		.p2align 3
 361              	.L34:
 362              		.cfi_restore_state
 363 0028 4889F3   		movq	%rsi, %rbx
 123:fltk-1.3.4-1/jpeg/jcarith.c ****       ERREXIT(cinfo, JERR_CANT_SUSPEND);
 364              		.loc 1 123 0
 365 002b 4889F7   		movq	%rsi, %rdi
 366              	.LVL36:
 367 002e FF5018   		call	*24(%rax)
 368              	.LVL37:
 369 0031 85C0     		testl	%eax, %eax
 370 0033 75EE     		jne	.L29
 371              	.LVL38:
 372              	.LBB18:
 373              	.LBB19:
 124:fltk-1.3.4-1/jpeg/jcarith.c **** }
 374              		.loc 1 124 0
 375 0035 488B03   		movq	(%rbx), %rax
 376 0038 4889DF   		movq	%rbx, %rdi
 377 003b C7402819 		movl	$25, 40(%rax)
 377      000000
 378 0042 488B03   		movq	(%rbx), %rax
 379              	.LBE19:
 380              	.LBE18:
 125:fltk-1.3.4-1/jpeg/jcarith.c **** 
 381              		.loc 1 125 0
 382 0045 5B       		popq	%rbx
 383              		.cfi_def_cfa_offset 8
 384              	.LVL39:
 385              	.LBB21:
 386              	.LBB20:
 124:fltk-1.3.4-1/jpeg/jcarith.c **** }
 387              		.loc 1 124 0
 388 0046 488B00   		movq	(%rax), %rax
 389 0049 FFE0     		jmp	*%rax
 390              	.LVL40:
 391              	.LBE20:
 392              	.LBE21:
 393              		.cfi_endproc
 394              	.LFE61:
 396              		.section	.text.unlikely.emit_byte
 397              	.LCOLDE1:
 398              		.section	.text.emit_byte
 399              	.LHOTE1:
 400              		.section	.text.unlikely.finish_pass,"ax",@progbits
 401              	.LCOLDB2:
 402              		.section	.text.finish_pass,"ax",@progbits
 403              	.LHOTB2:
 404              		.p2align 4,,15
 406              	finish_pass:
 407              	.LFB62:
 134:fltk-1.3.4-1/jpeg/jcarith.c ****   arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 408              		.loc 1 134 0
 409              		.cfi_startproc
 410              	.LVL41:
 411 0000 55       		pushq	%rbp
 412              		.cfi_def_cfa_offset 16
 413              		.cfi_offset 6, -16
 414 0001 53       		pushq	%rbx
 415              		.cfi_def_cfa_offset 24
 416              		.cfi_offset 3, -24
 417 0002 4889FD   		movq	%rdi, %rbp
 418 0005 4883EC08 		subq	$8, %rsp
 419              		.cfi_def_cfa_offset 32
 135:fltk-1.3.4-1/jpeg/jcarith.c ****   INT32 temp;
 420              		.loc 1 135 0
 421 0009 488B9F30 		movq	560(%rdi), %rbx
 421      020000
 422              	.LVL42:
 142:fltk-1.3.4-1/jpeg/jcarith.c ****     e->c = temp + 0x8000L;
 423              		.loc 1 142 0
 424 0010 488B5318 		movq	24(%rbx), %rdx
 425 0014 488B4320 		movq	32(%rbx), %rax
 147:fltk-1.3.4-1/jpeg/jcarith.c ****   if (e->c & 0xF8000000L) {
 426              		.loc 1 147 0
 427 0018 8B4B38   		movl	56(%rbx), %ecx
 142:fltk-1.3.4-1/jpeg/jcarith.c ****     e->c = temp + 0x8000L;
 428              		.loc 1 142 0
 429 001b 488D7C02 		leaq	-1(%rdx,%rax), %rdi
 429      FF
 430              	.LVL43:
 431 0020 81E70000 		andl	$4294901760, %edi
 431      FFFF
 432              	.LVL44:
 143:fltk-1.3.4-1/jpeg/jcarith.c ****   else
 433              		.loc 1 143 0
 434 0026 488D8700 		leaq	32768(%rdi), %rax
 434      800000
 435 002d 4839FA   		cmpq	%rdi, %rdx
 436 0030 480F4FF8 		cmovg	%rax, %rdi
 437              	.LVL45:
 147:fltk-1.3.4-1/jpeg/jcarith.c ****   if (e->c & 0xF8000000L) {
 438              		.loc 1 147 0
 439 0034 48D3E7   		salq	%cl, %rdi
 148:fltk-1.3.4-1/jpeg/jcarith.c ****     /* One final overflow has to be handled */
 440              		.loc 1 148 0
 441 0037 F7C70000 		testl	$4160749568, %edi
 441      00F8
 147:fltk-1.3.4-1/jpeg/jcarith.c ****   if (e->c & 0xF8000000L) {
 442              		.loc 1 147 0
 443 003d 48897B18 		movq	%rdi, 24(%rbx)
 148:fltk-1.3.4-1/jpeg/jcarith.c ****     /* One final overflow has to be handled */
 444              		.loc 1 148 0
 445 0041 0F84A900 		je	.L37
 445      0000
 150:fltk-1.3.4-1/jpeg/jcarith.c ****       if (e->zc)
 446              		.loc 1 150 0
 447 0047 8B433C   		movl	60(%rbx), %eax
 448              	.LVL46:
 449 004a 85C0     		testl	%eax, %eax
 450 004c 7827     		js	.L38
 151:fltk-1.3.4-1/jpeg/jcarith.c **** 	do emit_byte(0x00, cinfo);
 451              		.loc 1 151 0
 452 004e 48837B30 		cmpq	$0, 48(%rbx)
 452      00
 453 0053 0F85F700 		jne	.L61
 453      0000
 454              	.LVL47:
 455              	.L39:
 154:fltk-1.3.4-1/jpeg/jcarith.c ****       if (e->buffer + 1 == 0xFF)
 456              		.loc 1 154 0
 457 0059 8D7801   		leal	1(%rax), %edi
 458 005c 4889EE   		movq	%rbp, %rsi
 459 005f E8000000 		call	emit_byte
 459      00
 460              	.LVL48:
 155:fltk-1.3.4-1/jpeg/jcarith.c **** 	emit_byte(0x00, cinfo);
 461              		.loc 1 155 0
 462 0064 817B3CFE 		cmpl	$254, 60(%rbx)
 462      000000
 463 006b 0F849701 		je	.L73
 463      0000
 464              	.L71:
 465 0071 488B7B18 		movq	24(%rbx), %rdi
 466              	.L38:
 158:fltk-1.3.4-1/jpeg/jcarith.c ****     e->sc = 0;
 467              		.loc 1 158 0
 468 0075 488B4328 		movq	40(%rbx), %rax
 469 0079 48014330 		addq	%rax, 48(%rbx)
 159:fltk-1.3.4-1/jpeg/jcarith.c ****   } else {
 470              		.loc 1 159 0
 471 007d 48C74328 		movq	$0, 40(%rbx)
 471      00000000 
 472              	.L42:
 180:fltk-1.3.4-1/jpeg/jcarith.c ****     if (e->zc)  /* output final pending zero bytes */
 473              		.loc 1 180 0
 474 0085 F7C700F8 		testl	$134215680, %edi
 474      FF07
 475 008b 743D     		je	.L35
 181:fltk-1.3.4-1/jpeg/jcarith.c ****       do emit_byte(0x00, cinfo);
 476              		.loc 1 181 0
 477 008d 48837B30 		cmpq	$0, 48(%rbx)
 477      00
 478 0092 7544     		jne	.L60
 479              	.L53:
 184:fltk-1.3.4-1/jpeg/jcarith.c ****     if (((e->c >> 19) & 0xFF) == 0xFF)
 480              		.loc 1 184 0
 481 0094 48C1FF13 		sarq	$19, %rdi
 482 0098 4889EE   		movq	%rbp, %rsi
 483 009b 400FB6FF 		movzbl	%dil, %edi
 484 009f E8000000 		call	emit_byte
 484      00
 485              	.LVL49:
 185:fltk-1.3.4-1/jpeg/jcarith.c ****       emit_byte(0x00, cinfo);
 486              		.loc 1 185 0
 487 00a4 488B7B18 		movq	24(%rbx), %rdi
 488 00a8 4889F8   		movq	%rdi, %rax
 489 00ab 48C1F813 		sarq	$19, %rax
 490 00af 0FB6C0   		movzbl	%al, %eax
 491 00b2 483DFF00 		cmpq	$255, %rax
 491      0000
 492 00b8 0F843201 		je	.L74
 492      0000
 493              	.L55:
 187:fltk-1.3.4-1/jpeg/jcarith.c ****       emit_byte((e->c >> 11) & 0xFF, cinfo);
 494              		.loc 1 187 0
 495 00be F7C700F8 		testl	$522240, %edi
 495      0700
 496 00c4 0F85C600 		jne	.L75
 496      0000
 497              	.L35:
 193:fltk-1.3.4-1/jpeg/jcarith.c **** 
 498              		.loc 1 193 0
 499 00ca 4883C408 		addq	$8, %rsp
 500              		.cfi_remember_state
 501              		.cfi_def_cfa_offset 24
 502 00ce 5B       		popq	%rbx
 503              		.cfi_def_cfa_offset 16
 504              	.LVL50:
 505 00cf 5D       		popq	%rbp
 506              		.cfi_def_cfa_offset 8
 507              	.LVL51:
 508 00d0 C3       		ret
 509              	.LVL52:
 510              		.p2align 4,,10
 511 00d1 0F1F8000 		.p2align 3
 511      000000
 512              	.L60:
 513              		.cfi_restore_state
 182:fltk-1.3.4-1/jpeg/jcarith.c ****       while (--e->zc);
 514              		.loc 1 182 0 discriminator 1
 515 00d8 31FF     		xorl	%edi, %edi
 516 00da 4889EE   		movq	%rbp, %rsi
 517 00dd E8000000 		call	emit_byte
 517      00
 518              	.LVL53:
 183:fltk-1.3.4-1/jpeg/jcarith.c ****     emit_byte((e->c >> 19) & 0xFF, cinfo);
 519              		.loc 1 183 0 discriminator 1
 520 00e2 48836B30 		subq	$1, 48(%rbx)
 520      01
 521 00e7 75EF     		jne	.L60
 522 00e9 488B7B18 		movq	24(%rbx), %rdi
 523 00ed EBA5     		jmp	.L53
 524              	.LVL54:
 525 00ef 90       		.p2align 4,,10
 526              		.p2align 3
 527              	.L37:
 161:fltk-1.3.4-1/jpeg/jcarith.c ****       ++e->zc;
 528              		.loc 1 161 0
 529 00f0 8B7B3C   		movl	60(%rbx), %edi
 530 00f3 85FF     		testl	%edi, %edi
 531 00f5 7579     		jne	.L43
 162:fltk-1.3.4-1/jpeg/jcarith.c ****     else if (e->buffer >= 0) {
 532              		.loc 1 162 0
 533 00f7 48834330 		addq	$1, 48(%rbx)
 533      01
 534              	.LVL55:
 535              	.L44:
 169:fltk-1.3.4-1/jpeg/jcarith.c ****       if (e->zc)
 536              		.loc 1 169 0
 537 00fc 48837B28 		cmpq	$0, 40(%rbx)
 537      00
 538 0101 7443     		je	.L72
 170:fltk-1.3.4-1/jpeg/jcarith.c **** 	do emit_byte(0x00, cinfo);
 539              		.loc 1 170 0
 540 0103 48837B30 		cmpq	$0, 48(%rbx)
 540      00
 541 0108 741E     		je	.L49
 542 010a 660F1F44 		.p2align 4,,10
 542      0000
 543              		.p2align 3
 544              	.L62:
 171:fltk-1.3.4-1/jpeg/jcarith.c **** 	while (--e->zc);
 545              		.loc 1 171 0 discriminator 1
 546 0110 31FF     		xorl	%edi, %edi
 547 0112 4889EE   		movq	%rbp, %rsi
 548 0115 E8000000 		call	emit_byte
 548      00
 549              	.LVL56:
 172:fltk-1.3.4-1/jpeg/jcarith.c ****       do {
 550              		.loc 1 172 0 discriminator 1
 551 011a 48836B30 		subq	$1, 48(%rbx)
 551      01
 552 011f 75EF     		jne	.L62
 553              		.p2align 4,,10
 554 0121 0F1F8000 		.p2align 3
 554      000000
 555              	.L49:
 174:fltk-1.3.4-1/jpeg/jcarith.c **** 	emit_byte(0x00, cinfo);
 556              		.loc 1 174 0 discriminator 1
 557 0128 4889EE   		movq	%rbp, %rsi
 558 012b BFFF0000 		movl	$255, %edi
 558      00
 559 0130 E8000000 		call	emit_byte
 559      00
 560              	.LVL57:
 175:fltk-1.3.4-1/jpeg/jcarith.c ****       } while (--e->sc);
 561              		.loc 1 175 0 discriminator 1
 562 0135 31FF     		xorl	%edi, %edi
 563 0137 4889EE   		movq	%rbp, %rsi
 564 013a E8000000 		call	emit_byte
 564      00
 565              	.LVL58:
 176:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 566              		.loc 1 176 0 discriminator 1
 567 013f 48836B28 		subq	$1, 40(%rbx)
 567      01
 568 0144 75E2     		jne	.L49
 569              	.L72:
 570 0146 488B7B18 		movq	24(%rbx), %rdi
 571 014a E936FFFF 		jmp	.L42
 571      FF
 572 014f 90       		.p2align 4,,10
 573              		.p2align 3
 574              	.L61:
 152:fltk-1.3.4-1/jpeg/jcarith.c **** 	while (--e->zc);
 575              		.loc 1 152 0 discriminator 1
 576 0150 31FF     		xorl	%edi, %edi
 577 0152 4889EE   		movq	%rbp, %rsi
 578 0155 E8000000 		call	emit_byte
 578      00
 579              	.LVL59:
 153:fltk-1.3.4-1/jpeg/jcarith.c ****       emit_byte(e->buffer + 1, cinfo);
 580              		.loc 1 153 0 discriminator 1
 581 015a 48836B30 		subq	$1, 48(%rbx)
 581      01
 582 015f 75EF     		jne	.L61
 583 0161 8B433C   		movl	60(%rbx), %eax
 584 0164 E9F0FEFF 		jmp	.L39
 584      FF
 585              	.LVL60:
 586 0169 0F1F8000 		.p2align 4,,10
 586      000000
 587              		.p2align 3
 588              	.L43:
 163:fltk-1.3.4-1/jpeg/jcarith.c ****       if (e->zc)
 589              		.loc 1 163 0
 590 0170 788A     		js	.L44
 164:fltk-1.3.4-1/jpeg/jcarith.c **** 	do emit_byte(0x00, cinfo);
 591              		.loc 1 164 0
 592 0172 48837B30 		cmpq	$0, 48(%rbx)
 592      00
 593 0177 7557     		jne	.L63
 594              	.LVL61:
 595              	.L45:
 167:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 596              		.loc 1 167 0
 597 0179 4889EE   		movq	%rbp, %rsi
 598 017c E8000000 		call	emit_byte
 598      00
 599              	.LVL62:
 600 0181 E976FFFF 		jmp	.L44
 600      FF
 601 0186 662E0F1F 		.p2align 4,,10
 601      84000000 
 601      0000
 602              		.p2align 3
 603              	.L75:
 188:fltk-1.3.4-1/jpeg/jcarith.c ****       if (((e->c >> 11) & 0xFF) == 0xFF)
 604              		.loc 1 188 0
 605 0190 48C1FF0B 		sarq	$11, %rdi
 606 0194 4889EE   		movq	%rbp, %rsi
 607 0197 400FB6FF 		movzbl	%dil, %edi
 608 019b E8000000 		call	emit_byte
 608      00
 609              	.LVL63:
 189:fltk-1.3.4-1/jpeg/jcarith.c **** 	emit_byte(0x00, cinfo);
 610              		.loc 1 189 0
 611 01a0 488B4318 		movq	24(%rbx), %rax
 612 01a4 48C1F80B 		sarq	$11, %rax
 613 01a8 0FB6C0   		movzbl	%al, %eax
 614 01ab 483DFF00 		cmpq	$255, %rax
 614      0000
 615 01b1 0F8513FF 		jne	.L35
 615      FFFF
 193:fltk-1.3.4-1/jpeg/jcarith.c **** 
 616              		.loc 1 193 0
 617 01b7 4883C408 		addq	$8, %rsp
 618              		.cfi_remember_state
 619              		.cfi_def_cfa_offset 24
 190:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 620              		.loc 1 190 0
 621 01bb 4889EE   		movq	%rbp, %rsi
 622 01be 31FF     		xorl	%edi, %edi
 193:fltk-1.3.4-1/jpeg/jcarith.c **** 
 623              		.loc 1 193 0
 624 01c0 5B       		popq	%rbx
 625              		.cfi_def_cfa_offset 16
 626              	.LVL64:
 627 01c1 5D       		popq	%rbp
 628              		.cfi_def_cfa_offset 8
 629              	.LVL65:
 190:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 630              		.loc 1 190 0
 631 01c2 E9000000 		jmp	emit_byte
 631      00
 632              	.LVL66:
 633 01c7 660F1F84 		.p2align 4,,10
 633      00000000 
 633      00
 634              		.p2align 3
 635              	.L63:
 636              		.cfi_restore_state
 165:fltk-1.3.4-1/jpeg/jcarith.c **** 	while (--e->zc);
 637              		.loc 1 165 0 discriminator 1
 638 01d0 31FF     		xorl	%edi, %edi
 639 01d2 4889EE   		movq	%rbp, %rsi
 640 01d5 E8000000 		call	emit_byte
 640      00
 641              	.LVL67:
 166:fltk-1.3.4-1/jpeg/jcarith.c ****       emit_byte(e->buffer, cinfo);
 642              		.loc 1 166 0 discriminator 1
 643 01da 48836B30 		subq	$1, 48(%rbx)
 643      01
 644 01df 75EF     		jne	.L63
 645 01e1 8B7B3C   		movl	60(%rbx), %edi
 646 01e4 EB93     		jmp	.L45
 647 01e6 662E0F1F 		.p2align 4,,10
 647      84000000 
 647      0000
 648              		.p2align 3
 649              	.L74:
 186:fltk-1.3.4-1/jpeg/jcarith.c ****     if (e->c & 0x7F800L) {
 650              		.loc 1 186 0
 651 01f0 31FF     		xorl	%edi, %edi
 652 01f2 4889EE   		movq	%rbp, %rsi
 653 01f5 E8000000 		call	emit_byte
 653      00
 654              	.LVL68:
 655 01fa 488B7B18 		movq	24(%rbx), %rdi
 656 01fe E9BBFEFF 		jmp	.L55
 656      FF
 657              		.p2align 4,,10
 658 0203 0F1F4400 		.p2align 3
 658      00
 659              	.L73:
 156:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 660              		.loc 1 156 0
 661 0208 4889EE   		movq	%rbp, %rsi
 662 020b 31FF     		xorl	%edi, %edi
 663 020d E8000000 		call	emit_byte
 663      00
 664              	.LVL69:
 665 0212 E95AFEFF 		jmp	.L71
 665      FF
 666              		.cfi_endproc
 667              	.LFE62:
 669              		.section	.text.unlikely.finish_pass
 670              	.LCOLDE2:
 671              		.section	.text.finish_pass
 672              	.LHOTE2:
 673              		.section	.text.unlikely.arith_encode,"ax",@progbits
 674              	.LCOLDB3:
 675              		.section	.text.arith_encode,"ax",@progbits
 676              	.LHOTB3:
 677              		.p2align 4,,15
 679              	arith_encode:
 680              	.LFB63:
 220:fltk-1.3.4-1/jpeg/jcarith.c ****   register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 681              		.loc 1 220 0
 682              		.cfi_startproc
 683              	.LVL70:
 684 0000 4154     		pushq	%r12
 685              		.cfi_def_cfa_offset 16
 686              		.cfi_offset 12, -16
 687 0002 55       		pushq	%rbp
 688              		.cfi_def_cfa_offset 24
 689              		.cfi_offset 6, -24
 690 0003 53       		pushq	%rbx
 691              		.cfi_def_cfa_offset 32
 692              		.cfi_offset 3, -32
 229:fltk-1.3.4-1/jpeg/jcarith.c ****   qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 693              		.loc 1 229 0
 694 0004 440FB60E 		movzbl	(%rsi), %r9d
 221:fltk-1.3.4-1/jpeg/jcarith.c ****   register unsigned char nl, nm;
 695              		.loc 1 221 0
 696 0008 488B9F30 		movq	560(%rdi), %rbx
 696      020000
 697              	.LVL71:
 229:fltk-1.3.4-1/jpeg/jcarith.c ****   qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 698              		.loc 1 229 0
 699 000f 4489C8   		movl	%r9d, %eax
 700              	.LVL72:
 236:fltk-1.3.4-1/jpeg/jcarith.c ****     /* Encode the less probable symbol */
 701              		.loc 1 236 0
 702 0012 41C1F907 		sarl	$7, %r9d
 703              	.LVL73:
 230:fltk-1.3.4-1/jpeg/jcarith.c ****   nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 704              		.loc 1 230 0
 705 0016 4889C1   		movq	%rax, %rcx
 706 0019 83E17F   		andl	$127, %ecx
 707 001c 4C8B04CD 		movq	jpeg_aritab(,%rcx,8), %r8
 707      00000000 
 708              	.LVL74:
 235:fltk-1.3.4-1/jpeg/jcarith.c ****   if (val != (sv >> 7)) {
 709              		.loc 1 235 0
 710 0024 488B4B20 		movq	32(%rbx), %rcx
 232:fltk-1.3.4-1/jpeg/jcarith.c **** 
 711              		.loc 1 232 0
 712 0028 4D89C2   		movq	%r8, %r10
 231:fltk-1.3.4-1/jpeg/jcarith.c ****   nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 713              		.loc 1 231 0
 714 002b 4D89C3   		movq	%r8, %r11
 232:fltk-1.3.4-1/jpeg/jcarith.c **** 
 715              		.loc 1 232 0
 716 002e 49C1FA10 		sarq	$16, %r10
 231:fltk-1.3.4-1/jpeg/jcarith.c ****   nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 717              		.loc 1 231 0
 718 0032 49C1FB08 		sarq	$8, %r11
 719              	.LVL75:
 235:fltk-1.3.4-1/jpeg/jcarith.c ****   if (val != (sv >> 7)) {
 720              		.loc 1 235 0
 721 0036 4C29D1   		subq	%r10, %rcx
 236:fltk-1.3.4-1/jpeg/jcarith.c ****     /* Encode the less probable symbol */
 722              		.loc 1 236 0
 723 0039 4139D1   		cmpl	%edx, %r9d
 235:fltk-1.3.4-1/jpeg/jcarith.c ****   if (val != (sv >> 7)) {
 724              		.loc 1 235 0
 725 003c 48894B20 		movq	%rcx, 32(%rbx)
 236:fltk-1.3.4-1/jpeg/jcarith.c ****     /* Encode the less probable symbol */
 726              		.loc 1 236 0
 727 0040 0F845A01 		je	.L77
 727      0000
 238:fltk-1.3.4-1/jpeg/jcarith.c ****       /* If the interval size (qe) for the less probable symbol (LPS)
 728              		.loc 1 238 0
 729 0046 4939CA   		cmpq	%rcx, %r10
 730 0049 0F8EA901 		jle	.L111
 730      0000
 731              	.L78:
 246:fltk-1.3.4-1/jpeg/jcarith.c ****   } else {
 732              		.loc 1 246 0
 733 004f 83E080   		andl	$-128, %eax
 734              	.LVL76:
 735 0052 4431C0   		xorl	%r8d, %eax
 736 0055 8806     		movb	%al, (%rsi)
 737              	.L82:
 738 0057 4889FD   		movq	%rdi, %rbp
 739 005a 488B4B20 		movq	32(%rbx), %rcx
 740 005e EB6D     		jmp	.L79
 741              	.LVL77:
 742              		.p2align 4,,10
 743              		.p2align 3
 744              	.L113:
 270:fltk-1.3.4-1/jpeg/jcarith.c **** 	  if (e->zc)
 745              		.loc 1 270 0
 746 0060 8B7B3C   		movl	60(%rbx), %edi
 747 0063 85FF     		testl	%edi, %edi
 748 0065 782E     		js	.L85
 271:fltk-1.3.4-1/jpeg/jcarith.c **** 	    do emit_byte(0x00, cinfo);
 749              		.loc 1 271 0
 750 0067 48837B30 		cmpq	$0, 48(%rbx)
 750      00
 751 006c 0F850E01 		jne	.L101
 751      0000
 752              	.L86:
 274:fltk-1.3.4-1/jpeg/jcarith.c **** 	  if (e->buffer + 1 == 0xFF)
 753              		.loc 1 274 0
 754 0072 83C701   		addl	$1, %edi
 755 0075 4889EE   		movq	%rbp, %rsi
 756 0078 E8000000 		call	emit_byte
 756      00
 757              	.LVL78:
 275:fltk-1.3.4-1/jpeg/jcarith.c **** 	    emit_byte(0x00, cinfo);
 758              		.loc 1 275 0
 759 007d 817B3CFE 		cmpl	$254, 60(%rbx)
 759      000000
 760 0084 0F847E01 		je	.L112
 760      0000
 761              	.L110:
 762 008a 488B5318 		movq	24(%rbx), %rdx
 763 008e 8B4338   		movl	56(%rbx), %eax
 764 0091 488B4B20 		movq	32(%rbx), %rcx
 765              	.L85:
 278:fltk-1.3.4-1/jpeg/jcarith.c **** 	e->sc = 0;
 766              		.loc 1 278 0
 767 0095 488B7328 		movq	40(%rbx), %rsi
 768 0099 48017330 		addq	%rsi, 48(%rbx)
 283:fltk-1.3.4-1/jpeg/jcarith.c ****       } else if (temp == 0xFF) {
 769              		.loc 1 283 0
 770 009d 4181E4FF 		andl	$255, %r12d
 770      000000
 771              	.LVL79:
 279:fltk-1.3.4-1/jpeg/jcarith.c **** 	/* Note: The 3 spacer bits in the C register guarantee
 772              		.loc 1 279 0
 773 00a4 48C74328 		movq	$0, 40(%rbx)
 773      00000000 
 283:fltk-1.3.4-1/jpeg/jcarith.c ****       } else if (temp == 0xFF) {
 774              		.loc 1 283 0
 775 00ac 4489633C 		movl	%r12d, 60(%rbx)
 776              	.L89:
 307:fltk-1.3.4-1/jpeg/jcarith.c ****       e->ct += 8;
 777              		.loc 1 307 0
 778 00b0 81E2FFFF 		andl	$524287, %edx
 778      0700
 308:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 779              		.loc 1 308 0
 780 00b6 83C008   		addl	$8, %eax
 307:fltk-1.3.4-1/jpeg/jcarith.c ****       e->ct += 8;
 781              		.loc 1 307 0
 782 00b9 48895318 		movq	%rdx, 24(%rbx)
 308:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 783              		.loc 1 308 0
 784 00bd 894338   		movl	%eax, 56(%rbx)
 785              	.L83:
 310:fltk-1.3.4-1/jpeg/jcarith.c **** }
 786              		.loc 1 310 0
 787 00c0 4881F9FF 		cmpq	$32767, %rcx
 787      7F0000
 788 00c7 0F8FDC00 		jg	.L76
 788      0000
 789              	.L79:
 264:fltk-1.3.4-1/jpeg/jcarith.c ****     if (--e->ct == 0) {
 790              		.loc 1 264 0
 791 00cd 488B4318 		movq	24(%rbx), %rax
 263:fltk-1.3.4-1/jpeg/jcarith.c ****     e->c <<= 1;
 792              		.loc 1 263 0
 793 00d1 4801C9   		addq	%rcx, %rcx
 794 00d4 48894B20 		movq	%rcx, 32(%rbx)
 264:fltk-1.3.4-1/jpeg/jcarith.c ****     if (--e->ct == 0) {
 795              		.loc 1 264 0
 796 00d8 488D1400 		leaq	(%rax,%rax), %rdx
 265:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Another byte is ready for output */
 797              		.loc 1 265 0
 798 00dc 8B4338   		movl	56(%rbx), %eax
 264:fltk-1.3.4-1/jpeg/jcarith.c ****     if (--e->ct == 0) {
 799              		.loc 1 264 0
 800 00df 48895318 		movq	%rdx, 24(%rbx)
 265:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Another byte is ready for output */
 801              		.loc 1 265 0
 802 00e3 83E801   		subl	$1, %eax
 803 00e6 85C0     		testl	%eax, %eax
 804 00e8 894338   		movl	%eax, 56(%rbx)
 805 00eb 75D3     		jne	.L83
 267:fltk-1.3.4-1/jpeg/jcarith.c ****       if (temp > 0xFF) {
 806              		.loc 1 267 0
 807 00ed 4989D4   		movq	%rdx, %r12
 808 00f0 49C1FC13 		sarq	$19, %r12
 809              	.LVL80:
 268:fltk-1.3.4-1/jpeg/jcarith.c **** 	/* Handle overflow over all stacked 0xFF bytes */
 810              		.loc 1 268 0
 811 00f4 4981FCFF 		cmpq	$255, %r12
 811      000000
 812 00fb 0F8F5FFF 		jg	.L113
 812      FFFF
 284:fltk-1.3.4-1/jpeg/jcarith.c **** 	++e->sc;  /* stack 0xFF byte (which might overflow later) */
 813              		.loc 1 284 0
 814 0101 0F84E100 		je	.L114
 814      0000
 288:fltk-1.3.4-1/jpeg/jcarith.c **** 	  ++e->zc;
 815              		.loc 1 288 0
 816 0107 8B7B3C   		movl	60(%rbx), %edi
 817 010a 85FF     		testl	%edi, %edi
 818 010c 0F859E00 		jne	.L91
 818      0000
 289:fltk-1.3.4-1/jpeg/jcarith.c **** 	else if (e->buffer >= 0) {
 819              		.loc 1 289 0
 820 0112 48834330 		addq	$1, 48(%rbx)
 820      01
 821              	.L92:
 296:fltk-1.3.4-1/jpeg/jcarith.c **** 	  if (e->zc)
 822              		.loc 1 296 0
 823 0117 48837B28 		cmpq	$0, 40(%rbx)
 823      00
 824 011c 7440     		je	.L99
 297:fltk-1.3.4-1/jpeg/jcarith.c **** 	    do emit_byte(0x00, cinfo);
 825              		.loc 1 297 0
 826 011e 48837B30 		cmpq	$0, 48(%rbx)
 826      00
 827 0123 741B     		je	.L97
 828              		.p2align 4,,10
 829 0125 0F1F00   		.p2align 3
 830              	.L102:
 298:fltk-1.3.4-1/jpeg/jcarith.c **** 	    while (--e->zc);
 831              		.loc 1 298 0 discriminator 1
 832 0128 31FF     		xorl	%edi, %edi
 833 012a 4889EE   		movq	%rbp, %rsi
 834 012d E8000000 		call	emit_byte
 834      00
 835              	.LVL81:
 299:fltk-1.3.4-1/jpeg/jcarith.c **** 	  do {
 836              		.loc 1 299 0 discriminator 1
 837 0132 48836B30 		subq	$1, 48(%rbx)
 837      01
 838 0137 75EF     		jne	.L102
 839 0139 0F1F8000 		.p2align 4,,10
 839      000000
 840              		.p2align 3
 841              	.L97:
 301:fltk-1.3.4-1/jpeg/jcarith.c **** 	    emit_byte(0x00, cinfo);
 842              		.loc 1 301 0 discriminator 1
 843 0140 4889EE   		movq	%rbp, %rsi
 844 0143 BFFF0000 		movl	$255, %edi
 844      00
 845 0148 E8000000 		call	emit_byte
 845      00
 846              	.LVL82:
 302:fltk-1.3.4-1/jpeg/jcarith.c **** 	  } while (--e->sc);
 847              		.loc 1 302 0 discriminator 1
 848 014d 31FF     		xorl	%edi, %edi
 849 014f 4889EE   		movq	%rbp, %rsi
 850 0152 E8000000 		call	emit_byte
 850      00
 851              	.LVL83:
 303:fltk-1.3.4-1/jpeg/jcarith.c **** 	}
 852              		.loc 1 303 0 discriminator 1
 853 0157 48836B28 		subq	$1, 40(%rbx)
 853      01
 854 015c 75E2     		jne	.L97
 855              	.L99:
 305:fltk-1.3.4-1/jpeg/jcarith.c ****       }
 856              		.loc 1 305 0
 857 015e 4181E4FF 		andl	$255, %r12d
 857      000000
 858              	.LVL84:
 859 0165 488B5318 		movq	24(%rbx), %rdx
 860 0169 8B4338   		movl	56(%rbx), %eax
 861 016c 4489633C 		movl	%r12d, 60(%rbx)
 862 0170 488B4B20 		movq	32(%rbx), %rcx
 863 0174 E937FFFF 		jmp	.L89
 863      FF
 864              	.LVL85:
 865 0179 0F1F8000 		.p2align 4,,10
 865      000000
 866              		.p2align 3
 867              	.L101:
 272:fltk-1.3.4-1/jpeg/jcarith.c **** 	    while (--e->zc);
 868              		.loc 1 272 0 discriminator 1
 869 0180 31FF     		xorl	%edi, %edi
 870 0182 4889EE   		movq	%rbp, %rsi
 871 0185 E8000000 		call	emit_byte
 871      00
 872              	.LVL86:
 273:fltk-1.3.4-1/jpeg/jcarith.c **** 	  emit_byte(e->buffer + 1, cinfo);
 873              		.loc 1 273 0 discriminator 1
 874 018a 48836B30 		subq	$1, 48(%rbx)
 874      01
 875 018f 75EF     		jne	.L101
 876 0191 8B7B3C   		movl	60(%rbx), %edi
 877 0194 E9D9FEFF 		jmp	.L86
 877      FF
 878              	.LVL87:
 879 0199 0F1F8000 		.p2align 4,,10
 879      000000
 880              		.p2align 3
 881              	.L77:
 249:fltk-1.3.4-1/jpeg/jcarith.c ****       return;  /* A >= 0x8000 -> ready, no renormalization required */
 882              		.loc 1 249 0
 883 01a0 4881F9FF 		cmpq	$32767, %rcx
 883      7F0000
 884 01a7 7E77     		jle	.L115
 885              	.LVL88:
 886              	.L76:
 311:fltk-1.3.4-1/jpeg/jcarith.c **** 
 887              		.loc 1 311 0
 888 01a9 5B       		popq	%rbx
 889              		.cfi_remember_state
 890              		.cfi_def_cfa_offset 24
 891              	.LVL89:
 892 01aa 5D       		popq	%rbp
 893              		.cfi_def_cfa_offset 16
 894 01ab 415C     		popq	%r12
 895              		.cfi_def_cfa_offset 8
 896 01ad C3       		ret
 897              	.LVL90:
 898 01ae 6690     		.p2align 4,,10
 899              		.p2align 3
 900              	.L91:
 901              		.cfi_restore_state
 290:fltk-1.3.4-1/jpeg/jcarith.c **** 	  if (e->zc)
 902              		.loc 1 290 0
 903 01b0 0F8861FF 		js	.L92
 903      FFFF
 291:fltk-1.3.4-1/jpeg/jcarith.c **** 	    do emit_byte(0x00, cinfo);
 904              		.loc 1 291 0
 905 01b6 48837B30 		cmpq	$0, 48(%rbx)
 905      00
 906 01bb 7417     		je	.L93
 907 01bd 0F1F00   		.p2align 4,,10
 908              		.p2align 3
 909              	.L103:
 292:fltk-1.3.4-1/jpeg/jcarith.c **** 	    while (--e->zc);
 910              		.loc 1 292 0 discriminator 1
 911 01c0 31FF     		xorl	%edi, %edi
 912 01c2 4889EE   		movq	%rbp, %rsi
 913 01c5 E8000000 		call	emit_byte
 913      00
 914              	.LVL91:
 293:fltk-1.3.4-1/jpeg/jcarith.c **** 	  emit_byte(e->buffer, cinfo);
 915              		.loc 1 293 0 discriminator 1
 916 01ca 48836B30 		subq	$1, 48(%rbx)
 916      01
 917 01cf 75EF     		jne	.L103
 918 01d1 8B7B3C   		movl	60(%rbx), %edi
 919              	.L93:
 294:fltk-1.3.4-1/jpeg/jcarith.c **** 	}
 920              		.loc 1 294 0
 921 01d4 4889EE   		movq	%rbp, %rsi
 922 01d7 E8000000 		call	emit_byte
 922      00
 923              	.LVL92:
 924 01dc E936FFFF 		jmp	.L92
 924      FF
 925              		.p2align 4,,10
 926 01e1 0F1F8000 		.p2align 3
 926      000000
 927              	.L114:
 285:fltk-1.3.4-1/jpeg/jcarith.c ****       } else {
 928              		.loc 1 285 0
 929 01e8 48834328 		addq	$1, 40(%rbx)
 929      01
 930 01ed E9BEFEFF 		jmp	.L89
 930      FF
 931              	.LVL93:
 932              		.p2align 4,,10
 933 01f2 660F1F44 		.p2align 3
 933      0000
 934              	.L111:
 243:fltk-1.3.4-1/jpeg/jcarith.c ****       e->a = qe;
 935              		.loc 1 243 0
 936 01f8 48014B18 		addq	%rcx, 24(%rbx)
 244:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 937              		.loc 1 244 0
 938 01fc 4C895320 		movq	%r10, 32(%rbx)
 939 0200 E94AFEFF 		jmp	.L78
 939      FF
 940              	.LVL94:
 941              		.p2align 4,,10
 942 0205 0F1F00   		.p2align 3
 943              	.L112:
 276:fltk-1.3.4-1/jpeg/jcarith.c **** 	}
 944              		.loc 1 276 0
 945 0208 4889EE   		movq	%rbp, %rsi
 946 020b 31FF     		xorl	%edi, %edi
 947 020d E8000000 		call	emit_byte
 947      00
 948              	.LVL95:
 949 0212 E973FEFF 		jmp	.L110
 949      FF
 950              	.LVL96:
 951 0217 660F1F84 		.p2align 4,,10
 951      00000000 
 951      00
 952              		.p2align 3
 953              	.L115:
 251:fltk-1.3.4-1/jpeg/jcarith.c ****       /* If the interval size (qe) for the less probable symbol (LPS)
 954              		.loc 1 251 0
 955 0220 4939CA   		cmpq	%rcx, %r10
 956 0223 7E08     		jle	.L81
 255:fltk-1.3.4-1/jpeg/jcarith.c ****       e->a = qe;
 957              		.loc 1 255 0
 958 0225 48014B18 		addq	%rcx, 24(%rbx)
 256:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 959              		.loc 1 256 0
 960 0229 4C895320 		movq	%r10, 32(%rbx)
 961              	.L81:
 258:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 962              		.loc 1 258 0
 963 022d 83E080   		andl	$-128, %eax
 964              	.LVL97:
 965 0230 4431D8   		xorl	%r11d, %eax
 966 0233 8806     		movb	%al, (%rsi)
 967 0235 E91DFEFF 		jmp	.L82
 967      FF
 968              		.cfi_endproc
 969              	.LFE63:
 971              		.section	.text.unlikely.arith_encode
 972              	.LCOLDE3:
 973              		.section	.text.arith_encode
 974              	.LHOTE3:
 975              		.section	.text.unlikely.emit_restart,"ax",@progbits
 976              	.LCOLDB4:
 977              		.section	.text.emit_restart,"ax",@progbits
 978              	.LHOTB4:
 979              		.p2align 4,,15
 981              	emit_restart:
 982              	.LFB64:
 320:fltk-1.3.4-1/jpeg/jcarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 983              		.loc 1 320 0
 984              		.cfi_startproc
 985              	.LVL98:
 986 0000 4154     		pushq	%r12
 987              		.cfi_def_cfa_offset 16
 988              		.cfi_offset 12, -16
 989 0002 55       		pushq	%rbp
 990              		.cfi_def_cfa_offset 24
 991              		.cfi_offset 6, -24
 992 0003 4189F4   		movl	%esi, %r12d
 993 0006 53       		pushq	%rbx
 994              		.cfi_def_cfa_offset 32
 995              		.cfi_offset 3, -32
 320:fltk-1.3.4-1/jpeg/jcarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 996              		.loc 1 320 0
 997 0007 4889FB   		movq	%rdi, %rbx
 321:fltk-1.3.4-1/jpeg/jcarith.c ****   int ci;
 998              		.loc 1 321 0
 999 000a 488BAF30 		movq	560(%rdi), %rbp
 999      020000
 1000              	.LVL99:
 325:fltk-1.3.4-1/jpeg/jcarith.c **** 
 1001              		.loc 1 325 0
 1002 0011 E8000000 		call	finish_pass
 1002      00
 1003              	.LVL100:
 327:fltk-1.3.4-1/jpeg/jcarith.c ****   emit_byte(JPEG_RST0 + restart_num, cinfo);
 1004              		.loc 1 327 0
 1005 0016 4889DE   		movq	%rbx, %rsi
 1006 0019 BFFF0000 		movl	$255, %edi
 1006      00
 1007 001e E8000000 		call	emit_byte
 1007      00
 1008              	.LVL101:
 328:fltk-1.3.4-1/jpeg/jcarith.c **** 
 1009              		.loc 1 328 0
 1010 0023 418DBC24 		leal	208(%r12), %edi
 1010      D0000000 
 1011 002b 4889DE   		movq	%rbx, %rsi
 1012 002e E8000000 		call	emit_byte
 1012      00
 1013              	.LVL102:
 331:fltk-1.3.4-1/jpeg/jcarith.c ****     compptr = cinfo->cur_comp_info[ci];
 1014              		.loc 1 331 0
 1015 0033 448B8374 		movl	372(%rbx), %r8d
 1015      010000
 1016 003a 4585C0   		testl	%r8d, %r8d
 1017 003d 7E47     		jle	.L121
 1018 003f 4C8D8378 		leaq	376(%rbx), %r8
 1018      010000
 1019 0046 4C8D4D40 		leaq	64(%rbp), %r9
 1020 004a 31F6     		xorl	%esi, %esi
 1021              	.LBB22:
 1022              	.LBB23:
 1023              		.loc 2 90 0
 1024 004c 31C0     		xorl	%eax, %eax
 1025              	.LVL103:
 1026              	.L120:
 1027              	.LBE23:
 1028              	.LBE22:
 334:fltk-1.3.4-1/jpeg/jcarith.c ****       MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 1029              		.loc 1 334 0
 1030 004e 8BBBCC01 		movl	460(%rbx), %edi
 1030      0000
 332:fltk-1.3.4-1/jpeg/jcarith.c ****     /* DC needs no table for refinement scan */
 1031              		.loc 1 332 0
 1032 0054 4D8B10   		movq	(%r8), %r10
 1033              	.LVL104:
 334:fltk-1.3.4-1/jpeg/jcarith.c ****       MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 1034              		.loc 1 334 0
 1035 0057 85FF     		testl	%edi, %edi
 1036 0059 750E     		jne	.L118
 334:fltk-1.3.4-1/jpeg/jcarith.c ****       MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 1037              		.loc 1 334 0 is_stmt 0 discriminator 1
 1038 005b 8B8BD401 		movl	468(%rbx), %ecx
 1038      0000
 1039 0061 85C9     		testl	%ecx, %ecx
 1040 0063 0F849700 		je	.L125
 1040      0000
 1041              	.L118:
 341:fltk-1.3.4-1/jpeg/jcarith.c ****       MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 1042              		.loc 1 341 0 is_stmt 1
 1043 0069 8B93D001 		movl	464(%rbx), %edx
 1043      0000
 1044 006f 85D2     		testl	%edx, %edx
 1045 0071 754D     		jne	.L126
 1046              	.L119:
 331:fltk-1.3.4-1/jpeg/jcarith.c ****     compptr = cinfo->cur_comp_info[ci];
 1047              		.loc 1 331 0 discriminator 2
 1048 0073 83C601   		addl	$1, %esi
 1049              	.LVL105:
 1050 0076 4983C008 		addq	$8, %r8
 1051 007a 4983C104 		addq	$4, %r9
 1052 007e 39B37401 		cmpl	%esi, 372(%rbx)
 1052      0000
 1053 0084 7FC8     		jg	.L120
 1054              	.LVL106:
 1055              	.L121:
 347:fltk-1.3.4-1/jpeg/jcarith.c ****   entropy->a = 0x10000L;
 1056              		.loc 1 347 0
 1057 0086 48C74518 		movq	$0, 24(%rbp)
 1057      00000000 
 348:fltk-1.3.4-1/jpeg/jcarith.c ****   entropy->sc = 0;
 1058              		.loc 1 348 0
 1059 008e 48C74520 		movq	$65536, 32(%rbp)
 1059      00000100 
 349:fltk-1.3.4-1/jpeg/jcarith.c ****   entropy->zc = 0;
 1060              		.loc 1 349 0
 1061 0096 48C74528 		movq	$0, 40(%rbp)
 1061      00000000 
 350:fltk-1.3.4-1/jpeg/jcarith.c ****   entropy->ct = 11;
 1062              		.loc 1 350 0
 1063 009e 48C74530 		movq	$0, 48(%rbp)
 1063      00000000 
 351:fltk-1.3.4-1/jpeg/jcarith.c ****   entropy->buffer = -1;  /* empty */
 1064              		.loc 1 351 0
 1065 00a6 C745380B 		movl	$11, 56(%rbp)
 1065      000000
 352:fltk-1.3.4-1/jpeg/jcarith.c **** }
 1066              		.loc 1 352 0
 1067 00ad C7453CFF 		movl	$-1, 60(%rbp)
 1067      FFFFFF
 353:fltk-1.3.4-1/jpeg/jcarith.c **** 
 1068              		.loc 1 353 0
 1069 00b4 5B       		popq	%rbx
 1070              		.cfi_remember_state
 1071              		.cfi_def_cfa_offset 24
 1072              	.LVL107:
 1073 00b5 5D       		popq	%rbp
 1074              		.cfi_def_cfa_offset 16
 1075              	.LVL108:
 1076 00b6 415C     		popq	%r12
 1077              		.cfi_def_cfa_offset 8
 1078              	.LVL109:
 1079 00b8 C3       		ret
 1080              	.LVL110:
 1081 00b9 0F1F8000 		.p2align 4,,10
 1081      000000
 1082              		.p2align 3
 1083              	.L126:
 1084              		.cfi_restore_state
 342:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 1085              		.loc 1 342 0
 1086 00c0 49635218 		movslq	24(%r10), %rdx
 1087              	.LBB25:
 1088              	.LBB26:
 1089              		.loc 2 90 0
 1090 00c4 488B94D5 		movq	232(%rbp,%rdx,8), %rdx
 1090      E8000000 
 1091 00cc 488D7A08 		leaq	8(%rdx), %rdi
 1092 00d0 48C70200 		movq	$0, (%rdx)
 1092      000000
 1093              	.LVL111:
 1094 00d7 48C782F8 		movq	$0, 248(%rdx)
 1094      00000000 
 1094      000000
 1095 00e2 4883E7F8 		andq	$-8, %rdi
 1096 00e6 4829FA   		subq	%rdi, %rdx
 1097 00e9 8D8A0001 		leal	256(%rdx), %ecx
 1097      0000
 1098 00ef C1E903   		shrl	$3, %ecx
 1099 00f2 F348AB   		rep stosq
 1100 00f5 E979FFFF 		jmp	.L119
 1100      FF
 1101              	.LVL112:
 1102 00fa 660F1F44 		.p2align 4,,10
 1102      0000
 1103              		.p2align 3
 1104              	.L125:
 1105              	.LBE26:
 1106              	.LBE25:
 335:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Reset DC predictions to 0 */
 1107              		.loc 1 335 0
 1108 0100 49635214 		movslq	20(%r10), %rdx
 1109              	.LBB27:
 1110              	.LBB24:
 1111              		.loc 2 90 0
 1112 0104 488B54D5 		movq	104(%rbp,%rdx,8), %rdx
 1112      68
 1113 0109 488D7A08 		leaq	8(%rdx), %rdi
 1114 010d 48C70200 		movq	$0, (%rdx)
 1114      000000
 1115              	.LVL113:
 1116 0114 48C74238 		movq	$0, 56(%rdx)
 1116      00000000 
 1117 011c 4883E7F8 		andq	$-8, %rdi
 1118 0120 4829FA   		subq	%rdi, %rdx
 1119 0123 8D4A40   		leal	64(%rdx), %ecx
 1120 0126 C1E903   		shrl	$3, %ecx
 1121 0129 F348AB   		rep stosq
 1122              	.LVL114:
 1123              	.LBE24:
 1124              	.LBE27:
 337:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->dc_context[ci] = 0;
 1125              		.loc 1 337 0
 1126 012c 41C70100 		movl	$0, (%r9)
 1126      000000
 338:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 1127              		.loc 1 338 0
 1128 0133 41C74110 		movl	$0, 16(%r9)
 1128      00000000 
 1129 013b E929FFFF 		jmp	.L118
 1129      FF
 1130              		.cfi_endproc
 1131              	.LFE64:
 1133              		.section	.text.unlikely.emit_restart
 1134              	.LCOLDE4:
 1135              		.section	.text.emit_restart
 1136              	.LHOTE4:
 1137              		.section	.text.unlikely.encode_mcu_DC_first,"ax",@progbits
 1138              	.LCOLDB5:
 1139              		.section	.text.encode_mcu_DC_first,"ax",@progbits
 1140              	.LHOTB5:
 1141              		.p2align 4,,15
 1143              	encode_mcu_DC_first:
 1144              	.LFB65:
 363:fltk-1.3.4-1/jpeg/jcarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 1145              		.loc 1 363 0
 1146              		.cfi_startproc
 1147              	.LVL115:
 1148 0000 4157     		pushq	%r15
 1149              		.cfi_def_cfa_offset 16
 1150              		.cfi_offset 15, -16
 1151 0002 4156     		pushq	%r14
 1152              		.cfi_def_cfa_offset 24
 1153              		.cfi_offset 14, -24
 1154 0004 4989F6   		movq	%rsi, %r14
 1155 0007 4155     		pushq	%r13
 1156              		.cfi_def_cfa_offset 32
 1157              		.cfi_offset 13, -32
 1158 0009 4154     		pushq	%r12
 1159              		.cfi_def_cfa_offset 40
 1160              		.cfi_offset 12, -40
 1161 000b 55       		pushq	%rbp
 1162              		.cfi_def_cfa_offset 48
 1163              		.cfi_offset 6, -48
 1164 000c 53       		pushq	%rbx
 1165              		.cfi_def_cfa_offset 56
 1166              		.cfi_offset 3, -56
 1167 000d 4889FB   		movq	%rdi, %rbx
 1168 0010 4883EC38 		subq	$56, %rsp
 1169              		.cfi_def_cfa_offset 112
 371:fltk-1.3.4-1/jpeg/jcarith.c ****     if (entropy->restarts_to_go == 0) {
 1170              		.loc 1 371 0
 1171 0014 8B973C01 		movl	316(%rdi), %edx
 1171      0000
 364:fltk-1.3.4-1/jpeg/jcarith.c ****   unsigned char *st;
 1172              		.loc 1 364 0
 1173 001a 488B8730 		movq	560(%rdi), %rax
 1173      020000
 371:fltk-1.3.4-1/jpeg/jcarith.c ****     if (entropy->restarts_to_go == 0) {
 1174              		.loc 1 371 0
 1175 0021 85D2     		testl	%edx, %edx
 364:fltk-1.3.4-1/jpeg/jcarith.c ****   unsigned char *st;
 1176              		.loc 1 364 0
 1177 0023 48894424 		movq	%rax, 32(%rsp)
 1177      20
 1178              	.LVL116:
 371:fltk-1.3.4-1/jpeg/jcarith.c ****     if (entropy->restarts_to_go == 0) {
 1179              		.loc 1 371 0
 1180 0028 7416     		je	.L128
 372:fltk-1.3.4-1/jpeg/jcarith.c ****       emit_restart(cinfo, entropy->next_restart_num);
 1181              		.loc 1 372 0
 1182 002a 8B4060   		movl	96(%rax), %eax
 1183              	.LVL117:
 1184 002d 85C0     		testl	%eax, %eax
 1185 002f 0F843F02 		je	.L154
 1185      0000
 1186              	.LVL118:
 1187              	.L129:
 378:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 1188              		.loc 1 378 0
 1189 0035 488B7424 		movq	32(%rsp), %rsi
 1189      20
 1190 003a 83E801   		subl	$1, %eax
 1191 003d 894660   		movl	%eax, 96(%rsi)
 1192              	.L128:
 1193              	.LVL119:
 1194 0040 488D83A4 		leaq	420(%rbx), %rax
 1194      010000
 382:fltk-1.3.4-1/jpeg/jcarith.c ****     ci = cinfo->MCU_membership[blkn];
 1195              		.loc 1 382 0 discriminator 1
 1196 0047 C7442408 		movl	$0, 8(%rsp)
 1196      00000000 
 1197 004f 48894424 		movq	%rax, 16(%rsp)
 1197      10
 1198 0054 8B83A001 		movl	416(%rbx), %eax
 1198      0000
 1199 005a 85C0     		testl	%eax, %eax
 1200 005c 7F3F     		jg	.L146
 1201 005e E9FD0100 		jmp	.L152
 1201      00
 1202              	.LVL120:
 1203              		.p2align 4,,10
 1204 0063 0F1F4400 		.p2align 3
 1204      00
 1205              	.L155:
 398:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->dc_context[ci] = 0;	/* zero diff category */
 1206              		.loc 1 398 0
 1207 0068 31D2     		xorl	%edx, %edx
 1208 006a 4C89C6   		movq	%r8, %rsi
 1209              	.LVL121:
 1210 006d 4889DF   		movq	%rbx, %rdi
 1211 0070 E8000000 		call	arith_encode
 1211      00
 1212              	.LVL122:
 399:fltk-1.3.4-1/jpeg/jcarith.c ****     } else {
 1213              		.loc 1 399 0
 1214 0075 41C74424 		movl	$0, 80(%r12)
 1214      50000000 
 1214      00
 1215              	.LVL123:
 1216              	.L132:
 382:fltk-1.3.4-1/jpeg/jcarith.c ****     ci = cinfo->MCU_membership[blkn];
 1217              		.loc 1 382 0 discriminator 2
 1218 007e 83442408 		addl	$1, 8(%rsp)
 1218      01
 1219              	.LVL124:
 1220 0083 48834424 		addq	$4, 16(%rsp)
 1220      1004
 1221 0089 4983C608 		addq	$8, %r14
 1222 008d 8B442408 		movl	8(%rsp), %eax
 1223              	.LVL125:
 1224 0091 3983A001 		cmpl	%eax, 416(%rbx)
 1224      0000
 1225 0097 0F8EC301 		jle	.L152
 1225      0000
 1226              	.LVL126:
 1227              	.L146:
 384:fltk-1.3.4-1/jpeg/jcarith.c **** 
 1228              		.loc 1 384 0
 1229 009d 488B4424 		movq	16(%rsp), %rax
 1229      10
 389:fltk-1.3.4-1/jpeg/jcarith.c **** 
 1230              		.loc 1 389 0
 1231 00a2 8B8BD801 		movl	472(%rbx), %ecx
 1231      0000
 1232 00a8 488B7C24 		movq	32(%rsp), %rdi
 1232      20
 384:fltk-1.3.4-1/jpeg/jcarith.c **** 
 1233              		.loc 1 384 0
 1234 00ad 486310   		movslq	(%rax), %rdx
 389:fltk-1.3.4-1/jpeg/jcarith.c **** 
 1235              		.loc 1 389 0
 1236 00b0 498B06   		movq	(%r14), %rax
 1237 00b3 0FBF00   		movswl	(%rax), %eax
 384:fltk-1.3.4-1/jpeg/jcarith.c **** 
 1238              		.loc 1 384 0
 1239 00b6 488BB4D3 		movq	376(%rbx,%rdx,8), %rsi
 1239      78010000 
 1240              	.LVL127:
 1241 00be 4C8D2497 		leaq	(%rdi,%rdx,4), %r12
 394:fltk-1.3.4-1/jpeg/jcarith.c **** 
 1242              		.loc 1 394 0
 1243 00c2 4D634424 		movslq	80(%r12), %r8
 1243      50
 389:fltk-1.3.4-1/jpeg/jcarith.c **** 
 1244              		.loc 1 389 0
 1245 00c7 D3F8     		sarl	%cl, %eax
 1246              	.LVL128:
 1247 00c9 48634E14 		movslq	20(%rsi), %rcx
 397:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, 0);
 1248              		.loc 1 397 0
 1249 00cd 89C5     		movl	%eax, %ebp
 1250 00cf 48894C24 		movq	%rcx, 24(%rsp)
 1250      18
 1251 00d4 488D0CCF 		leaq	(%rdi,%rcx,8), %rcx
 394:fltk-1.3.4-1/jpeg/jcarith.c **** 
 1252              		.loc 1 394 0
 1253 00d8 4C034168 		addq	104(%rcx), %r8
 397:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, 0);
 1254              		.loc 1 397 0
 1255 00dc 412B6C24 		subl	64(%r12), %ebp
 1255      40
 1256 00e1 48894C24 		movq	%rcx, 40(%rsp)
 1256      28
 394:fltk-1.3.4-1/jpeg/jcarith.c **** 
 1257              		.loc 1 394 0
 1258 00e6 4D89C5   		movq	%r8, %r13
 1259              	.LVL129:
 397:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, 0);
 1260              		.loc 1 397 0
 1261 00e9 0F8479FF 		je	.L155
 1261      FFFF
 401:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, 1);
 1262              		.loc 1 401 0
 1263 00ef 41894424 		movl	%eax, 64(%r12)
 1263      40
 1264              	.LVL130:
 402:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Figure F.6: Encoding nonzero value v */
 1265              		.loc 1 402 0
 1266 00f4 BA010000 		movl	$1, %edx
 1266      00
 1267              	.LVL131:
 1268 00f9 4C89C6   		movq	%r8, %rsi
 1269 00fc 4889DF   		movq	%rbx, %rdi
 1270 00ff E8000000 		call	arith_encode
 1270      00
 1271              	.LVL132:
 405:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st + 1, 0);	/* Table F.4: SS = S0 + 1 */
 1272              		.loc 1 405 0
 1273 0104 85ED     		testl	%ebp, %ebp
 1274 0106 0F8E2C01 		jle	.L133
 1274      0000
 406:fltk-1.3.4-1/jpeg/jcarith.c **** 	st += 2;			/* Table F.4: SP = S0 + 2 */
 1275              		.loc 1 406 0
 1276 010c 498D7501 		leaq	1(%r13), %rsi
 1277 0110 31D2     		xorl	%edx, %edx
 1278 0112 4889DF   		movq	%rbx, %rdi
 407:fltk-1.3.4-1/jpeg/jcarith.c **** 	entropy->dc_context[ci] = 4;	/* small positive diff category */
 1279              		.loc 1 407 0
 1280 0115 4983C502 		addq	$2, %r13
 1281              	.LVL133:
 406:fltk-1.3.4-1/jpeg/jcarith.c **** 	st += 2;			/* Table F.4: SP = S0 + 2 */
 1282              		.loc 1 406 0
 1283 0119 E8000000 		call	arith_encode
 1283      00
 1284              	.LVL134:
 408:fltk-1.3.4-1/jpeg/jcarith.c ****       } else {
 1285              		.loc 1 408 0
 1286 011e 41C74424 		movl	$4, 80(%r12)
 1286      50040000 
 1286      00
 1287              	.L134:
 1288              	.LVL135:
 1289 0127 4531FF   		xorl	%r15d, %r15d
 417:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st, 1);
 1290              		.loc 1 417 0
 1291 012a 83ED01   		subl	$1, %ebp
 1292              	.LVL136:
 416:fltk-1.3.4-1/jpeg/jcarith.c ****       if (v -= 1) {
 1293              		.loc 1 416 0
 1294 012d C744240C 		movl	$0, 12(%rsp)
 1294      00000000 
 417:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st, 1);
 1295              		.loc 1 417 0
 1296 0135 0F859500 		jne	.L156
 1296      0000
 1297              	.LVL137:
 1298              	.L135:
 428:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Section F.1.4.4.1.2: Establish dc_context conditioning category */
 1299              		.loc 1 428 0
 1300 013b 31D2     		xorl	%edx, %edx
 1301 013d 4C89EE   		movq	%r13, %rsi
 1302 0140 4889DF   		movq	%rbx, %rdi
 1303 0143 E8000000 		call	arith_encode
 1303      00
 1304              	.LVL138:
 430:fltk-1.3.4-1/jpeg/jcarith.c **** 	entropy->dc_context[ci] = 0;	/* zero diff category */
 1305              		.loc 1 430 0
 1306 0148 488B4424 		movq	24(%rsp), %rax
 1306      18
 1307 014d BA010000 		movl	$1, %edx
 1307      00
 1308 0152 0FB68C03 		movzbl	224(%rbx,%rax), %ecx
 1308      E0000000 
 1309 015a 48D3E2   		salq	%cl, %rdx
 1310 015d 48D1FA   		sarq	%rdx
 1311 0160 3954240C 		cmpl	%edx, 12(%rsp)
 1312 0164 7D3A     		jge	.L137
 431:fltk-1.3.4-1/jpeg/jcarith.c ****       else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 1313              		.loc 1 431 0
 1314 0166 41C74424 		movl	$0, 80(%r12)
 1314      50000000 
 1314      00
 1315              	.L138:
 436:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st, (m & v) ? 1 : 0);
 1316              		.loc 1 436 0
 1317 016f 4585FF   		testl	%r15d, %r15d
 435:fltk-1.3.4-1/jpeg/jcarith.c ****       while (m >>= 1)
 1318              		.loc 1 435 0
 1319 0172 4D8D650E 		leaq	14(%r13), %r12
 1320              	.LVL139:
 436:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st, (m & v) ? 1 : 0);
 1321              		.loc 1 436 0
 1322 0176 0F8402FF 		je	.L132
 1322      FFFF
 1323 017c 0F1F4000 		.p2align 4,,10
 1324              		.p2align 3
 1325              	.L147:
 1326              	.LVL140:
 437:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 1327              		.loc 1 437 0
 1328 0180 31D2     		xorl	%edx, %edx
 1329 0182 4485FD   		testl	%r15d, %ebp
 1330 0185 4C89E6   		movq	%r12, %rsi
 1331 0188 0F95C2   		setne	%dl
 1332 018b 4889DF   		movq	%rbx, %rdi
 1333 018e E8000000 		call	arith_encode
 1333      00
 1334              	.LVL141:
 436:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st, (m & v) ? 1 : 0);
 1335              		.loc 1 436 0
 1336 0193 41D1FF   		sarl	%r15d
 1337              	.LVL142:
 1338 0196 75E8     		jne	.L147
 1339 0198 E9E1FEFF 		jmp	.L132
 1339      FF
 1340              	.LVL143:
 1341 019d 0F1F00   		.p2align 4,,10
 1342              		.p2align 3
 1343              	.L137:
 432:fltk-1.3.4-1/jpeg/jcarith.c **** 	entropy->dc_context[ci] += 8;	/* large diff category */
 1344              		.loc 1 432 0
 1345 01a0 488B4424 		movq	24(%rsp), %rax
 1345      18
 1346 01a5 BA010000 		movl	$1, %edx
 1346      00
 1347 01aa 0FB68C03 		movzbl	240(%rbx,%rax), %ecx
 1347      F0000000 
 1348 01b2 48D3E2   		salq	%cl, %rdx
 1349 01b5 48D1FA   		sarq	%rdx
 1350 01b8 3954240C 		cmpl	%edx, 12(%rsp)
 1351 01bc 7EB1     		jle	.L138
 433:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Figure F.9: Encoding the magnitude bit pattern of v */
 1352              		.loc 1 433 0
 1353 01be 41834424 		addl	$8, 80(%r12)
 1353      5008
 1354 01c4 EBA9     		jmp	.L138
 1355              	.LVL144:
 1356 01c6 662E0F1F 		.p2align 4,,10
 1356      84000000 
 1356      0000
 1357              		.p2align 3
 1358              	.L156:
 418:fltk-1.3.4-1/jpeg/jcarith.c **** 	m = 1;
 1359              		.loc 1 418 0
 1360 01d0 4C89EE   		movq	%r13, %rsi
 1361 01d3 BA010000 		movl	$1, %edx
 1361      00
 1362 01d8 4889DF   		movq	%rbx, %rdi
 1363 01db E8000000 		call	arith_encode
 1363      00
 1364              	.LVL145:
 421:fltk-1.3.4-1/jpeg/jcarith.c **** 	while (v2 >>= 1) {
 1365              		.loc 1 421 0
 1366 01e0 488B4424 		movq	40(%rsp), %rax
 1366      28
 422:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, st, 1);
 1367              		.loc 1 422 0
 1368 01e5 4189EF   		movl	%ebp, %r15d
 1369 01e8 41D1FF   		sarl	%r15d
 421:fltk-1.3.4-1/jpeg/jcarith.c **** 	while (v2 >>= 1) {
 1370              		.loc 1 421 0
 1371 01eb 4C8B4068 		movq	104(%rax), %r8
 1372 01ef 4D8D6814 		leaq	20(%r8), %r13
 1373              	.LVL146:
 422:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, st, 1);
 1374              		.loc 1 422 0
 1375 01f3 0F84A600 		je	.L145
 1375      0000
 1376 01f9 C744240C 		movl	$1, 12(%rsp)
 1376      01000000 
 1377              	.LVL147:
 1378              		.p2align 4,,10
 1379 0201 0F1F8000 		.p2align 3
 1379      000000
 1380              	.L136:
 423:fltk-1.3.4-1/jpeg/jcarith.c **** 	  m <<= 1;
 1381              		.loc 1 423 0
 1382 0208 4C89EE   		movq	%r13, %rsi
 1383 020b BA010000 		movl	$1, %edx
 1383      00
 1384 0210 4889DF   		movq	%rbx, %rdi
 1385 0213 E8000000 		call	arith_encode
 1385      00
 1386              	.LVL148:
 425:fltk-1.3.4-1/jpeg/jcarith.c **** 	}
 1387              		.loc 1 425 0
 1388 0218 4983C501 		addq	$1, %r13
 1389              	.LVL149:
 424:fltk-1.3.4-1/jpeg/jcarith.c **** 	  st += 1;
 1390              		.loc 1 424 0
 1391 021c D164240C 		sall	12(%rsp)
 1392              	.LVL150:
 422:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, st, 1);
 1393              		.loc 1 422 0
 1394 0220 41D1FF   		sarl	%r15d
 1395              	.LVL151:
 1396 0223 75E3     		jne	.L136
 1397 0225 448B7C24 		movl	12(%rsp), %r15d
 1397      0C
 1398              	.LVL152:
 1399 022a 41D1FF   		sarl	%r15d
 1400 022d E909FFFF 		jmp	.L135
 1400      FF
 1401              	.LVL153:
 1402              		.p2align 4,,10
 1403 0232 660F1F44 		.p2align 3
 1403      0000
 1404              	.L133:
 411:fltk-1.3.4-1/jpeg/jcarith.c **** 	st += 3;			/* Table F.4: SN = S0 + 3 */
 1405              		.loc 1 411 0
 1406 0238 498D7501 		leaq	1(%r13), %rsi
 1407 023c BA010000 		movl	$1, %edx
 1407      00
 1408 0241 4889DF   		movq	%rbx, %rdi
 410:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st + 1, 1);	/* Table F.4: SS = S0 + 1 */
 1409              		.loc 1 410 0
 1410 0244 F7DD     		negl	%ebp
 1411              	.LVL154:
 412:fltk-1.3.4-1/jpeg/jcarith.c **** 	entropy->dc_context[ci] = 8;	/* small negative diff category */
 1412              		.loc 1 412 0
 1413 0246 4983C503 		addq	$3, %r13
 1414              	.LVL155:
 411:fltk-1.3.4-1/jpeg/jcarith.c **** 	st += 3;			/* Table F.4: SN = S0 + 3 */
 1415              		.loc 1 411 0
 1416 024a E8000000 		call	arith_encode
 1416      00
 1417              	.LVL156:
 413:fltk-1.3.4-1/jpeg/jcarith.c ****       }
 1418              		.loc 1 413 0
 1419 024f 41C74424 		movl	$8, 80(%r12)
 1419      50080000 
 1419      00
 1420 0258 E9CAFEFF 		jmp	.L134
 1420      FF
 1421              	.LVL157:
 1422 025d 0F1F00   		.p2align 4,,10
 1423              		.p2align 3
 1424              	.L152:
 442:fltk-1.3.4-1/jpeg/jcarith.c **** 
 1425              		.loc 1 442 0
 1426 0260 4883C438 		addq	$56, %rsp
 1427              		.cfi_remember_state
 1428              		.cfi_def_cfa_offset 56
 1429 0264 B8010000 		movl	$1, %eax
 1429      00
 1430 0269 5B       		popq	%rbx
 1431              		.cfi_def_cfa_offset 48
 1432              	.LVL158:
 1433 026a 5D       		popq	%rbp
 1434              		.cfi_def_cfa_offset 40
 1435 026b 415C     		popq	%r12
 1436              		.cfi_def_cfa_offset 32
 1437 026d 415D     		popq	%r13
 1438              		.cfi_def_cfa_offset 24
 1439 026f 415E     		popq	%r14
 1440              		.cfi_def_cfa_offset 16
 1441 0271 415F     		popq	%r15
 1442              		.cfi_def_cfa_offset 8
 1443 0273 C3       		ret
 1444              	.LVL159:
 1445              	.L154:
 1446              		.cfi_restore_state
 373:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 1447              		.loc 1 373 0
 1448 0274 4C8B7C24 		movq	32(%rsp), %r15
 1448      20
 1449 0279 418B7764 		movl	100(%r15), %esi
 1450              	.LVL160:
 1451 027d E8000000 		call	emit_restart
 1451      00
 1452              	.LVL161:
 376:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 1453              		.loc 1 376 0
 1454 0282 418B7F64 		movl	100(%r15), %edi
 374:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->next_restart_num++;
 1455              		.loc 1 374 0
 1456 0286 8B833C01 		movl	316(%rbx), %eax
 1456      0000
 376:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 1457              		.loc 1 376 0
 1458 028c 8D5701   		leal	1(%rdi), %edx
 1459 028f 897C2408 		movl	%edi, 8(%rsp)
 1460 0293 83E207   		andl	$7, %edx
 1461 0296 41895764 		movl	%edx, 100(%r15)
 1462 029a E996FDFF 		jmp	.L129
 1462      FF
 1463              	.LVL162:
 1464              	.L145:
 422:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, st, 1);
 1465              		.loc 1 422 0
 1466 029f 4531FF   		xorl	%r15d, %r15d
 1467              	.LVL163:
 419:fltk-1.3.4-1/jpeg/jcarith.c **** 	v2 = v;
 1468              		.loc 1 419 0
 1469 02a2 C744240C 		movl	$1, 12(%rsp)
 1469      01000000 
 1470 02aa E98CFEFF 		jmp	.L135
 1470      FF
 1471              		.cfi_endproc
 1472              	.LFE65:
 1474              		.section	.text.unlikely.encode_mcu_DC_first
 1475              	.LCOLDE5:
 1476              		.section	.text.encode_mcu_DC_first
 1477              	.LHOTE5:
 1478              		.section	.text.unlikely.encode_mcu_AC_first,"ax",@progbits
 1479              	.LCOLDB6:
 1480              		.section	.text.encode_mcu_AC_first,"ax",@progbits
 1481              	.LHOTB6:
 1482              		.p2align 4,,15
 1484              	encode_mcu_AC_first:
 1485              	.LFB66:
 452:fltk-1.3.4-1/jpeg/jcarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 1486              		.loc 1 452 0
 1487              		.cfi_startproc
 1488              	.LVL164:
 1489 0000 4157     		pushq	%r15
 1490              		.cfi_def_cfa_offset 16
 1491              		.cfi_offset 15, -16
 1492 0002 4156     		pushq	%r14
 1493              		.cfi_def_cfa_offset 24
 1494              		.cfi_offset 14, -24
 1495 0004 4155     		pushq	%r13
 1496              		.cfi_def_cfa_offset 32
 1497              		.cfi_offset 13, -32
 1498 0006 4154     		pushq	%r12
 1499              		.cfi_def_cfa_offset 40
 1500              		.cfi_offset 12, -40
 1501 0008 55       		pushq	%rbp
 1502              		.cfi_def_cfa_offset 48
 1503              		.cfi_offset 6, -48
 1504 0009 53       		pushq	%rbx
 1505              		.cfi_def_cfa_offset 56
 1506              		.cfi_offset 3, -56
 1507 000a 4889FD   		movq	%rdi, %rbp
 1508 000d 4889F3   		movq	%rsi, %rbx
 1509 0010 4883EC48 		subq	$72, %rsp
 1510              		.cfi_def_cfa_offset 128
 461:fltk-1.3.4-1/jpeg/jcarith.c ****     if (entropy->restarts_to_go == 0) {
 1511              		.loc 1 461 0
 1512 0014 8B973C01 		movl	316(%rdi), %edx
 1512      0000
 453:fltk-1.3.4-1/jpeg/jcarith.c ****   const int * natural_order;
 1513              		.loc 1 453 0
 1514 001a 488B8730 		movq	560(%rdi), %rax
 1514      020000
 461:fltk-1.3.4-1/jpeg/jcarith.c ****     if (entropy->restarts_to_go == 0) {
 1515              		.loc 1 461 0
 1516 0021 85D2     		testl	%edx, %edx
 453:fltk-1.3.4-1/jpeg/jcarith.c ****   const int * natural_order;
 1517              		.loc 1 453 0
 1518 0023 48894424 		movq	%rax, 32(%rsp)
 1518      20
 1519              	.LVL165:
 461:fltk-1.3.4-1/jpeg/jcarith.c ****     if (entropy->restarts_to_go == 0) {
 1520              		.loc 1 461 0
 1521 0028 7416     		je	.L158
 462:fltk-1.3.4-1/jpeg/jcarith.c ****       emit_restart(cinfo, entropy->next_restart_num);
 1522              		.loc 1 462 0
 1523 002a 8B4060   		movl	96(%rax), %eax
 1524              	.LVL166:
 1525 002d 85C0     		testl	%eax, %eax
 1526 002f 0F84C802 		je	.L203
 1526      0000
 1527              	.LVL167:
 1528              	.L159:
 468:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 1529              		.loc 1 468 0
 1530 0035 488B7C24 		movq	32(%rsp), %rdi
 1530      20
 1531 003a 83E801   		subl	$1, %eax
 1532 003d 894760   		movl	%eax, 96(%rdi)
 1533              	.L158:
 471:fltk-1.3.4-1/jpeg/jcarith.c **** 
 1534              		.loc 1 471 0
 1535 0040 488B85E0 		movq	480(%rbp), %rax
 1535      010000
 474:fltk-1.3.4-1/jpeg/jcarith.c ****   tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 1536              		.loc 1 474 0
 1537 0047 4C8B33   		movq	(%rbx), %r14
 1538 004a 8B8DD801 		movl	472(%rbp), %ecx
 1538      0000
 471:fltk-1.3.4-1/jpeg/jcarith.c **** 
 1539              		.loc 1 471 0
 1540 0050 4889C7   		movq	%rax, %rdi
 1541 0053 48894424 		movq	%rax, 16(%rsp)
 1541      10
 1542              	.LVL168:
 475:fltk-1.3.4-1/jpeg/jcarith.c **** 
 1543              		.loc 1 475 0
 1544 0058 488B8578 		movq	376(%rbp), %rax
 1544      010000
 1545              	.LVL169:
 1546 005f 8B4018   		movl	24(%rax), %eax
 1547 0062 8944242C 		movl	%eax, 44(%rsp)
 1548              	.LVL170:
 480:fltk-1.3.4-1/jpeg/jcarith.c ****   do {
 1549              		.loc 1 480 0
 1550 0066 486385D0 		movslq	464(%rbp), %rax
 1550      010000
 1551              	.LVL171:
 1552 006d 488D1487 		leaq	(%rdi,%rax,4), %rdx
 1553 0071 4889C6   		movq	%rax, %rsi
 1554              	.LVL172:
 1555 0074 89C7     		movl	%eax, %edi
 1556              	.LVL173:
 1557 0076 EB17     		jmp	.L163
 1558              	.LVL174:
 1559 0078 0F1F8400 		.p2align 4,,10
 1559      00000000 
 1560              		.p2align 3
 1561              	.L202:
 490:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 1562              		.loc 1 490 0
 1563 0080 D3F8     		sarl	%cl, %eax
 1564              	.LVL175:
 1565 0082 85C0     		testl	%eax, %eax
 1566 0084 751D     		jne	.L199
 1567              	.LVL176:
 1568              	.L204:
 1569 0086 4883EA04 		subq	$4, %rdx
 492:fltk-1.3.4-1/jpeg/jcarith.c **** 
 1570              		.loc 1 492 0
 1571 008a 83EF01   		subl	$1, %edi
 1572              	.LVL177:
 1573 008d 7414     		je	.L199
 1574              	.L163:
 486:fltk-1.3.4-1/jpeg/jcarith.c ****       if (v >>= cinfo->Al) break;
 1575              		.loc 1 486 0
 1576 008f 486302   		movslq	(%rdx), %rax
 1577 0092 410FBF04 		movswl	(%r14,%rax,2), %eax
 1577      46
 1578              	.LVL178:
 1579 0097 85C0     		testl	%eax, %eax
 1580 0099 79E5     		jns	.L202
 489:fltk-1.3.4-1/jpeg/jcarith.c ****       if (v >>= cinfo->Al) break;
 1581              		.loc 1 489 0
 1582 009b F7D8     		negl	%eax
 1583              	.LVL179:
 490:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 1584              		.loc 1 490 0
 1585 009d D3F8     		sarl	%cl, %eax
 1586              	.LVL180:
 1587 009f 85C0     		testl	%eax, %eax
 1588 00a1 74E3     		je	.L204
 1589              	.LVL181:
 1590              	.L199:
 495:fltk-1.3.4-1/jpeg/jcarith.c ****     st = entropy->ac_stats[tbl] + 3 * k;
 1591              		.loc 1 495 0
 1592 00a3 8B85CC01 		movl	460(%rbp), %eax
 1592      0000
 1593 00a9 897C2428 		movl	%edi, 40(%rsp)
 1594              	.LVL182:
 1595 00ad 448D60FF 		leal	-1(%rax), %r12d
 1596              	.LVL183:
 1597 00b1 44396424 		cmpl	%r12d, 40(%rsp)
 1597      28
 1598 00b6 0F8EE700 		jle	.L164
 1598      0000
 1599              	.LVL184:
 1600 00bc 48634424 		movslq	44(%rsp), %rax
 1600      2C
 1601 00c1 488B7C24 		movq	32(%rsp), %rdi
 1601      20
 1602              	.LVL185:
 1603 00c6 488D8F68 		leaq	360(%rdi), %rcx
 1603      010000
 1604 00cd 48894424 		movq	%rax, 48(%rsp)
 1604      30
 1605 00d2 488D04C7 		leaq	(%rdi,%rax,8), %rax
 1606 00d6 48894C24 		movq	%rcx, 24(%rsp)
 1606      18
 1607 00db 48894424 		movq	%rax, 8(%rsp)
 1607      08
 1608              	.LVL186:
 1609              		.p2align 4,,10
 1610              		.p2align 3
 1611              	.L177:
 496:fltk-1.3.4-1/jpeg/jcarith.c ****     arith_encode(cinfo, st, 0);		/* EOB decision */
 1612              		.loc 1 496 0
 1613 00e0 488B4424 		movq	8(%rsp), %rax
 1613      08
 1614 00e5 478D2C64 		leal	(%r12,%r12,2), %r13d
 497:fltk-1.3.4-1/jpeg/jcarith.c ****     for (;;) {
 1615              		.loc 1 497 0
 1616 00e9 4889EF   		movq	%rbp, %rdi
 1617 00ec 31D2     		xorl	%edx, %edx
 496:fltk-1.3.4-1/jpeg/jcarith.c ****     arith_encode(cinfo, st, 0);		/* EOB decision */
 1618              		.loc 1 496 0
 1619 00ee 4D63ED   		movslq	%r13d, %r13
 1620 00f1 4C03A8E8 		addq	232(%rax), %r13
 1620      000000
 1621              	.LVL187:
 497:fltk-1.3.4-1/jpeg/jcarith.c ****     for (;;) {
 1622              		.loc 1 497 0
 1623 00f8 4C89EE   		movq	%r13, %rsi
 1624 00fb E8000000 		call	arith_encode
 1624      00
 1625              	.LVL188:
 1626 0100 488B7C24 		movq	16(%rsp), %rdi
 1626      10
 1627 0105 4963C4   		movslq	%r12d, %rax
 1628 0108 4C8D3C87 		leaq	(%rdi,%rax,4), %r15
 1629 010c EB28     		jmp	.L168
 1630              	.LVL189:
 1631 010e 6690     		.p2align 4,,10
 1632              		.p2align 3
 1633              	.L206:
 500:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, st + 1, 1);
 1634              		.loc 1 500 0
 1635 0110 8B8DD801 		movl	472(%rbp), %ecx
 1635      0000
 1636 0116 D3FB     		sarl	%cl, %ebx
 1637              	.LVL190:
 1638 0118 85DB     		testl	%ebx, %ebx
 1639 011a 0F85C800 		jne	.L205
 1639      0000
 1640              	.L166:
 513:fltk-1.3.4-1/jpeg/jcarith.c ****       st += 3;
 1641              		.loc 1 513 0
 1642 0120 498D7501 		leaq	1(%r13), %rsi
 1643 0124 31D2     		xorl	%edx, %edx
 1644 0126 4889EF   		movq	%rbp, %rdi
 514:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 1645              		.loc 1 514 0
 1646 0129 4983C503 		addq	$3, %r13
 1647              	.LVL191:
 1648 012d 4983C704 		addq	$4, %r15
 513:fltk-1.3.4-1/jpeg/jcarith.c ****       st += 3;
 1649              		.loc 1 513 0
 1650 0131 E8000000 		call	arith_encode
 1650      00
 1651              	.LVL192:
 1652              	.L168:
 499:fltk-1.3.4-1/jpeg/jcarith.c **** 	if (v >>= cinfo->Al) {
 1653              		.loc 1 499 0
 1654 0136 49634704 		movslq	4(%r15), %rax
 1655 013a 4183C401 		addl	$1, %r12d
 1656              	.LVL193:
 1657 013e 410FBF1C 		movswl	(%r14,%rax,2), %ebx
 1657      46
 1658              	.LVL194:
 1659 0143 85DB     		testl	%ebx, %ebx
 1660 0145 79C9     		jns	.L206
 507:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, st + 1, 1);
 1661              		.loc 1 507 0
 1662 0147 8B8DD801 		movl	472(%rbp), %ecx
 1662      0000
 506:fltk-1.3.4-1/jpeg/jcarith.c **** 	if (v >>= cinfo->Al) {
 1663              		.loc 1 506 0
 1664 014d F7DB     		negl	%ebx
 1665              	.LVL195:
 507:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, st + 1, 1);
 1666              		.loc 1 507 0
 1667 014f D3FB     		sarl	%cl, %ebx
 1668              	.LVL196:
 1669 0151 85DB     		testl	%ebx, %ebx
 1670 0153 74CB     		je	.L166
 508:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, entropy->fixed_bin, 1);
 1671              		.loc 1 508 0
 1672 0155 498D7501 		leaq	1(%r13), %rsi
 1673 0159 BA010000 		movl	$1, %edx
 1673      00
 1674 015e 4889EF   		movq	%rbp, %rdi
 516:fltk-1.3.4-1/jpeg/jcarith.c ****     /* Figure F.8: Encoding the magnitude category of v */
 1675              		.loc 1 516 0
 1676 0161 4983C502 		addq	$2, %r13
 1677              	.LVL197:
 508:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, entropy->fixed_bin, 1);
 1678              		.loc 1 508 0
 1679 0165 E8000000 		call	arith_encode
 1679      00
 1680              	.LVL198:
 509:fltk-1.3.4-1/jpeg/jcarith.c **** 	  break;
 1681              		.loc 1 509 0
 1682 016a 488B7424 		movq	24(%rsp), %rsi
 1682      18
 1683 016f BA010000 		movl	$1, %edx
 1683      00
 1684 0174 4889EF   		movq	%rbp, %rdi
 1685 0177 E8000000 		call	arith_encode
 1685      00
 1686              	.LVL199:
 519:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, 1);
 1687              		.loc 1 519 0
 1688 017c 83EB01   		subl	$1, %ebx
 1689              	.LVL200:
 1690 017f 0F859000 		jne	.L207
 1690      0000
 1691              	.LVL201:
 1692              	.L169:
 535:fltk-1.3.4-1/jpeg/jcarith.c ****     /* Figure F.9: Encoding the magnitude bit pattern of v */
 1693              		.loc 1 535 0
 1694 0185 31D2     		xorl	%edx, %edx
 1695 0187 4C89EE   		movq	%r13, %rsi
 1696 018a 4889EF   		movq	%rbp, %rdi
 1697 018d E8000000 		call	arith_encode
 1697      00
 1698              	.LVL202:
 1699              	.L174:
 495:fltk-1.3.4-1/jpeg/jcarith.c ****     st = entropy->ac_stats[tbl] + 3 * k;
 1700              		.loc 1 495 0
 1701 0192 44396424 		cmpl	%r12d, 40(%rsp)
 1701      28
 1702 0197 0F8F43FF 		jg	.L177
 1702      FFFF
 1703 019d 8BB5D001 		movl	464(%rbp), %esi
 1703      0000
 1704              	.LVL203:
 1705              	.L164:
 542:fltk-1.3.4-1/jpeg/jcarith.c ****     st = entropy->ac_stats[tbl] + 3 * k;
 1706              		.loc 1 542 0
 1707 01a3 4139F4   		cmpl	%esi, %r12d
 1708 01a6 7D26     		jge	.L185
 1709              	.LVL204:
 543:fltk-1.3.4-1/jpeg/jcarith.c ****     arith_encode(cinfo, st, 1);
 1710              		.loc 1 543 0
 1711 01a8 48634424 		movslq	44(%rsp), %rax
 1711      2C
 544:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 1712              		.loc 1 544 0
 1713 01ad 488B7C24 		movq	32(%rsp), %rdi
 1713      20
 1714 01b2 438D3464 		leal	(%r12,%r12,2), %esi
 1715 01b6 BA010000 		movl	$1, %edx
 1715      00
 1716 01bb 4863F6   		movslq	%esi, %rsi
 1717 01be 4803B4C7 		addq	232(%rdi,%rax,8), %rsi
 1717      E8000000 
 1718 01c6 4889EF   		movq	%rbp, %rdi
 1719 01c9 E8000000 		call	arith_encode
 1719      00
 1720              	.LVL205:
 1721              	.L185:
 548:fltk-1.3.4-1/jpeg/jcarith.c **** 
 1722              		.loc 1 548 0
 1723 01ce 4883C448 		addq	$72, %rsp
 1724              		.cfi_remember_state
 1725              		.cfi_def_cfa_offset 56
 1726 01d2 B8010000 		movl	$1, %eax
 1726      00
 1727 01d7 5B       		popq	%rbx
 1728              		.cfi_def_cfa_offset 48
 1729 01d8 5D       		popq	%rbp
 1730              		.cfi_def_cfa_offset 40
 1731              	.LVL206:
 1732 01d9 415C     		popq	%r12
 1733              		.cfi_def_cfa_offset 32
 1734              	.LVL207:
 1735 01db 415D     		popq	%r13
 1736              		.cfi_def_cfa_offset 24
 1737 01dd 415E     		popq	%r14
 1738              		.cfi_def_cfa_offset 16
 1739              	.LVL208:
 1740 01df 415F     		popq	%r15
 1741              		.cfi_def_cfa_offset 8
 1742 01e1 C3       		ret
 1743              	.LVL209:
 1744              		.p2align 4,,10
 1745 01e2 660F1F44 		.p2align 3
 1745      0000
 1746              	.L205:
 1747              		.cfi_restore_state
 501:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, entropy->fixed_bin, 0);
 1748              		.loc 1 501 0
 1749 01e8 498D7501 		leaq	1(%r13), %rsi
 1750 01ec BA010000 		movl	$1, %edx
 1750      00
 1751 01f1 4889EF   		movq	%rbp, %rdi
 516:fltk-1.3.4-1/jpeg/jcarith.c ****     /* Figure F.8: Encoding the magnitude category of v */
 1752              		.loc 1 516 0
 1753 01f4 4983C502 		addq	$2, %r13
 1754              	.LVL210:
 501:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, entropy->fixed_bin, 0);
 1755              		.loc 1 501 0
 1756 01f8 E8000000 		call	arith_encode
 1756      00
 1757              	.LVL211:
 502:fltk-1.3.4-1/jpeg/jcarith.c **** 	  break;
 1758              		.loc 1 502 0
 1759 01fd 488B7424 		movq	24(%rsp), %rsi
 1759      18
 1760 0202 31D2     		xorl	%edx, %edx
 1761 0204 4889EF   		movq	%rbp, %rdi
 1762 0207 E8000000 		call	arith_encode
 1762      00
 1763              	.LVL212:
 519:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, 1);
 1764              		.loc 1 519 0
 1765 020c 83EB01   		subl	$1, %ebx
 1766              	.LVL213:
 1767 020f 0F8470FF 		je	.L169
 1767      FFFF
 1768              	.L207:
 520:fltk-1.3.4-1/jpeg/jcarith.c ****       m = 1;
 1769              		.loc 1 520 0
 1770 0215 BA010000 		movl	$1, %edx
 1770      00
 1771 021a 4C89EE   		movq	%r13, %rsi
 1772 021d 4889EF   		movq	%rbp, %rdi
 1773 0220 E8000000 		call	arith_encode
 1773      00
 1774              	.LVL214:
 523:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st, 1);
 1775              		.loc 1 523 0
 1776 0225 89D8     		movl	%ebx, %eax
 1777 0227 D1E8     		shrl	%eax
 1778 0229 0F8456FF 		je	.L169
 1778      FFFF
 524:fltk-1.3.4-1/jpeg/jcarith.c **** 	m <<= 1;
 1779              		.loc 1 524 0
 1780 022f BA010000 		movl	$1, %edx
 1780      00
 1781 0234 4C89EE   		movq	%r13, %rsi
 1782 0237 4889EF   		movq	%rbp, %rdi
 1783 023a E8000000 		call	arith_encode
 1783      00
 1784              	.LVL215:
 526:fltk-1.3.4-1/jpeg/jcarith.c **** 	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 1785              		.loc 1 526 0
 1786 023f 488B4424 		movq	48(%rsp), %rax
 1786      30
 1787 0244 488B7C24 		movq	8(%rsp), %rdi
 1787      08
 1788 0249 BABD0000 		movl	$189, %edx
 1788      00
 528:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, st, 1);
 1789              		.loc 1 528 0
 1790 024e 4189DF   		movl	%ebx, %r15d
 526:fltk-1.3.4-1/jpeg/jcarith.c **** 	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 1791              		.loc 1 526 0
 1792 0251 0FB68405 		movzbl	256(%rbp,%rax), %eax
 1792      00010000 
 1793 0259 4139C4   		cmpl	%eax, %r12d
 1794 025c B8D90000 		movl	$217, %eax
 1794      00
 1795 0261 480F4EC2 		cmovle	%rdx, %rax
 1796 0265 480387E8 		addq	232(%rdi), %rax
 1796      000000
 528:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, st, 1);
 1797              		.loc 1 528 0
 1798 026c 41C1FF02 		sarl	$2, %r15d
 1799 0270 4585FF   		testl	%r15d, %r15d
 526:fltk-1.3.4-1/jpeg/jcarith.c **** 	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 1800              		.loc 1 526 0
 1801 0273 4989C5   		movq	%rax, %r13
 1802              	.LVL216:
 528:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, st, 1);
 1803              		.loc 1 528 0
 1804 0276 0F84AC00 		je	.L171
 1804      0000
 1805 027c B8020000 		movl	$2, %eax
 1805      00
 1806              	.LVL217:
 1807 0281 44896424 		movl	%r12d, 60(%rsp)
 1807      3C
 1808 0286 4D89EC   		movq	%r13, %r12
 1809              	.LVL218:
 1810 0289 4189DD   		movl	%ebx, %r13d
 1811              	.LVL219:
 1812 028c 89C3     		movl	%eax, %ebx
 1813              	.LVL220:
 1814 028e 6690     		.p2align 4,,10
 1815              		.p2align 3
 1816              	.L172:
 529:fltk-1.3.4-1/jpeg/jcarith.c **** 	  m <<= 1;
 1817              		.loc 1 529 0
 1818 0290 4C89E6   		movq	%r12, %rsi
 1819 0293 BA010000 		movl	$1, %edx
 1819      00
 1820 0298 4889EF   		movq	%rbp, %rdi
 1821 029b E8000000 		call	arith_encode
 1821      00
 1822              	.LVL221:
 530:fltk-1.3.4-1/jpeg/jcarith.c **** 	  st += 1;
 1823              		.loc 1 530 0
 1824 02a0 01DB     		addl	%ebx, %ebx
 1825              	.LVL222:
 531:fltk-1.3.4-1/jpeg/jcarith.c **** 	}
 1826              		.loc 1 531 0
 1827 02a2 4983C401 		addq	$1, %r12
 1828              	.LVL223:
 528:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, st, 1);
 1829              		.loc 1 528 0
 1830 02a6 41D1FF   		sarl	%r15d
 1831              	.LVL224:
 1832 02a9 75E5     		jne	.L172
 1833 02ab 895C2438 		movl	%ebx, 56(%rsp)
 1834 02af 4489EB   		movl	%r13d, %ebx
 1835              	.LVL225:
 1836 02b2 4D89E5   		movq	%r12, %r13
 1837              	.LVL226:
 535:fltk-1.3.4-1/jpeg/jcarith.c ****     /* Figure F.9: Encoding the magnitude bit pattern of v */
 1838              		.loc 1 535 0
 1839 02b5 31D2     		xorl	%edx, %edx
 1840 02b7 4C89EE   		movq	%r13, %rsi
 1841 02ba 4889EF   		movq	%rbp, %rdi
 1842 02bd 448B6424 		movl	60(%rsp), %r12d
 1842      3C
 1843              	.LVL227:
 537:fltk-1.3.4-1/jpeg/jcarith.c ****     while (m >>= 1)
 1844              		.loc 1 537 0
 1845 02c2 4D8D7D0E 		leaq	14(%r13), %r15
 1846              	.LVL228:
 535:fltk-1.3.4-1/jpeg/jcarith.c ****     /* Figure F.9: Encoding the magnitude bit pattern of v */
 1847              		.loc 1 535 0
 1848 02c6 E8000000 		call	arith_encode
 1848      00
 1849              	.LVL229:
 538:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, (m & v) ? 1 : 0);
 1850              		.loc 1 538 0
 1851 02cb 448B6C24 		movl	56(%rsp), %r13d
 1851      38
 1852 02d0 41D1FD   		sarl	%r13d
 1853              	.LVL230:
 1854 02d3 0F84B9FE 		je	.L174
 1854      FFFF
 1855 02d9 0F1F8000 		.p2align 4,,10
 1855      000000
 1856              		.p2align 3
 1857              	.L190:
 539:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 1858              		.loc 1 539 0
 1859 02e0 31D2     		xorl	%edx, %edx
 1860 02e2 4485EB   		testl	%r13d, %ebx
 1861 02e5 4C89FE   		movq	%r15, %rsi
 1862 02e8 0F95C2   		setne	%dl
 1863 02eb 4889EF   		movq	%rbp, %rdi
 1864 02ee E8000000 		call	arith_encode
 1864      00
 1865              	.LVL231:
 538:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, (m & v) ? 1 : 0);
 1866              		.loc 1 538 0
 1867 02f3 41D1FD   		sarl	%r13d
 1868              	.LVL232:
 1869 02f6 75E8     		jne	.L190
 1870 02f8 E995FEFF 		jmp	.L174
 1870      FF
 1871              	.LVL233:
 1872              	.L203:
 463:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 1873              		.loc 1 463 0
 1874 02fd 4C8B7424 		movq	32(%rsp), %r14
 1874      20
 1875 0302 418B7664 		movl	100(%r14), %esi
 1876 0306 E8000000 		call	emit_restart
 1876      00
 1877              	.LVL234:
 466:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 1878              		.loc 1 466 0
 1879 030b 418B4E64 		movl	100(%r14), %ecx
 464:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->next_restart_num++;
 1880              		.loc 1 464 0
 1881 030f 8B853C01 		movl	316(%rbp), %eax
 1881      0000
 466:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 1882              		.loc 1 466 0
 1883 0315 8D5101   		leal	1(%rcx), %edx
 1884 0318 894C2428 		movl	%ecx, 40(%rsp)
 1885 031c 83E207   		andl	$7, %edx
 1886 031f 41895664 		movl	%edx, 100(%r14)
 1887 0323 E90DFDFF 		jmp	.L159
 1887      FF
 1888              	.LVL235:
 1889              	.L171:
 535:fltk-1.3.4-1/jpeg/jcarith.c ****     /* Figure F.9: Encoding the magnitude bit pattern of v */
 1890              		.loc 1 535 0
 1891 0328 31D2     		xorl	%edx, %edx
 1892 032a 4889C6   		movq	%rax, %rsi
 1893 032d 4889EF   		movq	%rbp, %rdi
 1894 0330 E8000000 		call	arith_encode
 1894      00
 1895              	.LVL236:
 539:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 1896              		.loc 1 539 0
 1897 0335 89DA     		movl	%ebx, %edx
 1898 0337 498D750E 		leaq	14(%r13), %rsi
 1899              	.LVL237:
 1900 033b 4889EF   		movq	%rbp, %rdi
 1901 033e 83E201   		andl	$1, %edx
 1902 0341 E8000000 		call	arith_encode
 1902      00
 1903              	.LVL238:
 1904 0346 E947FEFF 		jmp	.L174
 1904      FF
 1905              		.cfi_endproc
 1906              	.LFE66:
 1908              		.section	.text.unlikely.encode_mcu_AC_first
 1909              	.LCOLDE6:
 1910              		.section	.text.encode_mcu_AC_first
 1911              	.LHOTE6:
 1912              		.section	.text.unlikely.encode_mcu_DC_refine,"ax",@progbits
 1913              	.LCOLDB7:
 1914              		.section	.text.encode_mcu_DC_refine,"ax",@progbits
 1915              	.LHOTB7:
 1916              		.p2align 4,,15
 1918              	encode_mcu_DC_refine:
 1919              	.LFB67:
 559:fltk-1.3.4-1/jpeg/jcarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 1920              		.loc 1 559 0
 1921              		.cfi_startproc
 1922              	.LVL239:
 1923 0000 4156     		pushq	%r14
 1924              		.cfi_def_cfa_offset 16
 1925              		.cfi_offset 14, -16
 1926 0002 4155     		pushq	%r13
 1927              		.cfi_def_cfa_offset 24
 1928              		.cfi_offset 13, -24
 1929 0004 4989FE   		movq	%rdi, %r14
 1930 0007 4154     		pushq	%r12
 1931              		.cfi_def_cfa_offset 32
 1932              		.cfi_offset 12, -32
 1933 0009 55       		pushq	%rbp
 1934              		.cfi_def_cfa_offset 40
 1935              		.cfi_offset 6, -40
 1936 000a 53       		pushq	%rbx
 1937              		.cfi_def_cfa_offset 48
 1938              		.cfi_offset 3, -48
 565:fltk-1.3.4-1/jpeg/jcarith.c ****     if (entropy->restarts_to_go == 0) {
 1939              		.loc 1 565 0
 1940 000b 8B973C01 		movl	316(%rdi), %edx
 1940      0000
 559:fltk-1.3.4-1/jpeg/jcarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 1941              		.loc 1 559 0
 1942 0011 4889F3   		movq	%rsi, %rbx
 560:fltk-1.3.4-1/jpeg/jcarith.c ****   unsigned char *st;
 1943              		.loc 1 560 0
 1944 0014 488BAF30 		movq	560(%rdi), %rbp
 1944      020000
 1945              	.LVL240:
 565:fltk-1.3.4-1/jpeg/jcarith.c ****     if (entropy->restarts_to_go == 0) {
 1946              		.loc 1 565 0
 1947 001b 85D2     		testl	%edx, %edx
 1948 001d 740D     		je	.L209
 566:fltk-1.3.4-1/jpeg/jcarith.c ****       emit_restart(cinfo, entropy->next_restart_num);
 1949              		.loc 1 566 0
 1950 001f 8B4560   		movl	96(%rbp), %eax
 1951 0022 85C0     		testl	%eax, %eax
 1952 0024 746A     		je	.L218
 1953              	.LVL241:
 1954              	.L210:
 572:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 1955              		.loc 1 572 0
 1956 0026 83E801   		subl	$1, %eax
 1957 0029 894560   		movl	%eax, 96(%rbp)
 1958              	.L209:
 579:fltk-1.3.4-1/jpeg/jcarith.c ****     /* We simply emit the Al'th bit of the DC coefficient value. */
 1959              		.loc 1 579 0
 1960 002c 418B86A0 		movl	416(%r14), %eax
 1960      010000
 575:fltk-1.3.4-1/jpeg/jcarith.c ****   Al = cinfo->Al;
 1961              		.loc 1 575 0
 1962 0033 4881C568 		addq	$360, %rbp
 1962      010000
 1963              	.LVL242:
 579:fltk-1.3.4-1/jpeg/jcarith.c ****     /* We simply emit the Al'th bit of the DC coefficient value. */
 1964              		.loc 1 579 0
 1965 003a 4531ED   		xorl	%r13d, %r13d
 576:fltk-1.3.4-1/jpeg/jcarith.c **** 
 1966              		.loc 1 576 0
 1967 003d 458BA6D8 		movl	472(%r14), %r12d
 1967      010000
 1968              	.LVL243:
 579:fltk-1.3.4-1/jpeg/jcarith.c ****     /* We simply emit the Al'th bit of the DC coefficient value. */
 1969              		.loc 1 579 0
 1970 0044 85C0     		testl	%eax, %eax
 1971 0046 7E32     		jle	.L216
 1972              	.LVL244:
 1973 0048 0F1F8400 		.p2align 4,,10
 1973      00000000 
 1974              		.p2align 3
 1975              	.L214:
 581:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 1976              		.loc 1 581 0 discriminator 3
 1977 0050 488B03   		movq	(%rbx), %rax
 1978 0053 4489E1   		movl	%r12d, %ecx
 1979 0056 4889EE   		movq	%rbp, %rsi
 1980 0059 4C89F7   		movq	%r14, %rdi
 579:fltk-1.3.4-1/jpeg/jcarith.c ****     /* We simply emit the Al'th bit of the DC coefficient value. */
 1981              		.loc 1 579 0 discriminator 3
 1982 005c 4183C501 		addl	$1, %r13d
 1983              	.LVL245:
 1984 0060 4883C308 		addq	$8, %rbx
 581:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 1985              		.loc 1 581 0 discriminator 3
 1986 0064 0FBF10   		movswl	(%rax), %edx
 1987 0067 D3FA     		sarl	%cl, %edx
 1988 0069 83E201   		andl	$1, %edx
 1989 006c E8000000 		call	arith_encode
 1989      00
 1990              	.LVL246:
 579:fltk-1.3.4-1/jpeg/jcarith.c ****     /* We simply emit the Al'th bit of the DC coefficient value. */
 1991              		.loc 1 579 0 discriminator 3
 1992 0071 4539AEA0 		cmpl	%r13d, 416(%r14)
 1992      010000
 1993 0078 7FD6     		jg	.L214
 1994              	.LVL247:
 1995              	.L216:
 585:fltk-1.3.4-1/jpeg/jcarith.c **** 
 1996              		.loc 1 585 0
 1997 007a 5B       		popq	%rbx
 1998              		.cfi_remember_state
 1999              		.cfi_def_cfa_offset 40
 2000 007b B8010000 		movl	$1, %eax
 2000      00
 2001 0080 5D       		popq	%rbp
 2002              		.cfi_def_cfa_offset 32
 2003              	.LVL248:
 2004 0081 415C     		popq	%r12
 2005              		.cfi_def_cfa_offset 24
 2006              	.LVL249:
 2007 0083 415D     		popq	%r13
 2008              		.cfi_def_cfa_offset 16
 2009 0085 415E     		popq	%r14
 2010              		.cfi_def_cfa_offset 8
 2011              	.LVL250:
 2012 0087 C3       		ret
 2013              	.LVL251:
 2014 0088 0F1F8400 		.p2align 4,,10
 2014      00000000 
 2015              		.p2align 3
 2016              	.L218:
 2017              		.cfi_restore_state
 567:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 2018              		.loc 1 567 0
 2019 0090 8B7564   		movl	100(%rbp), %esi
 2020 0093 E8000000 		call	emit_restart
 2020      00
 2021              	.LVL252:
 570:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 2022              		.loc 1 570 0
 2023 0098 8B7D64   		movl	100(%rbp), %edi
 568:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->next_restart_num++;
 2024              		.loc 1 568 0
 2025 009b 418B863C 		movl	316(%r14), %eax
 2025      010000
 570:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 2026              		.loc 1 570 0
 2027 00a2 8D5701   		leal	1(%rdi), %edx
 2028 00a5 83E207   		andl	$7, %edx
 2029 00a8 895564   		movl	%edx, 100(%rbp)
 2030 00ab E976FFFF 		jmp	.L210
 2030      FF
 2031              		.cfi_endproc
 2032              	.LFE67:
 2034              		.section	.text.unlikely.encode_mcu_DC_refine
 2035              	.LCOLDE7:
 2036              		.section	.text.encode_mcu_DC_refine
 2037              	.LHOTE7:
 2038              		.section	.text.unlikely.encode_mcu_AC_refine,"ax",@progbits
 2039              	.LCOLDB8:
 2040              		.section	.text.encode_mcu_AC_refine,"ax",@progbits
 2041              	.LHOTB8:
 2042              		.p2align 4,,15
 2044              	encode_mcu_AC_refine:
 2045              	.LFB68:
 594:fltk-1.3.4-1/jpeg/jcarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 2046              		.loc 1 594 0
 2047              		.cfi_startproc
 2048              	.LVL253:
 2049 0000 4157     		pushq	%r15
 2050              		.cfi_def_cfa_offset 16
 2051              		.cfi_offset 15, -16
 2052 0002 4156     		pushq	%r14
 2053              		.cfi_def_cfa_offset 24
 2054              		.cfi_offset 14, -24
 2055 0004 4989FF   		movq	%rdi, %r15
 2056 0007 4155     		pushq	%r13
 2057              		.cfi_def_cfa_offset 32
 2058              		.cfi_offset 13, -32
 2059 0009 4154     		pushq	%r12
 2060              		.cfi_def_cfa_offset 40
 2061              		.cfi_offset 12, -40
 2062 000b 55       		pushq	%rbp
 2063              		.cfi_def_cfa_offset 48
 2064              		.cfi_offset 6, -48
 2065 000c 53       		pushq	%rbx
 2066              		.cfi_def_cfa_offset 56
 2067              		.cfi_offset 3, -56
 2068 000d 4889F3   		movq	%rsi, %rbx
 2069 0010 4883EC38 		subq	$56, %rsp
 2070              		.cfi_def_cfa_offset 112
 603:fltk-1.3.4-1/jpeg/jcarith.c ****     if (entropy->restarts_to_go == 0) {
 2071              		.loc 1 603 0
 2072 0014 8B973C01 		movl	316(%rdi), %edx
 2072      0000
 595:fltk-1.3.4-1/jpeg/jcarith.c ****   const int * natural_order;
 2073              		.loc 1 595 0
 2074 001a 488B8730 		movq	560(%rdi), %rax
 2074      020000
 603:fltk-1.3.4-1/jpeg/jcarith.c ****     if (entropy->restarts_to_go == 0) {
 2075              		.loc 1 603 0
 2076 0021 85D2     		testl	%edx, %edx
 595:fltk-1.3.4-1/jpeg/jcarith.c ****   const int * natural_order;
 2077              		.loc 1 595 0
 2078 0023 48894424 		movq	%rax, 8(%rsp)
 2078      08
 2079              	.LVL254:
 603:fltk-1.3.4-1/jpeg/jcarith.c ****     if (entropy->restarts_to_go == 0) {
 2080              		.loc 1 603 0
 2081 0028 7416     		je	.L220
 604:fltk-1.3.4-1/jpeg/jcarith.c ****       emit_restart(cinfo, entropy->next_restart_num);
 2082              		.loc 1 604 0
 2083 002a 8B4060   		movl	96(%rax), %eax
 2084              	.LVL255:
 2085 002d 85C0     		testl	%eax, %eax
 2086 002f 0F845202 		je	.L261
 2086      0000
 2087              	.LVL256:
 2088              	.L221:
 610:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 2089              		.loc 1 610 0
 2090 0035 488B7C24 		movq	8(%rsp), %rdi
 2090      08
 2091 003a 83E801   		subl	$1, %eax
 2092 003d 894760   		movl	%eax, 96(%rdi)
 2093              	.L220:
 613:fltk-1.3.4-1/jpeg/jcarith.c **** 
 2094              		.loc 1 613 0
 2095 0040 498B87E0 		movq	480(%r15), %rax
 2095      010000
 616:fltk-1.3.4-1/jpeg/jcarith.c ****   tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 2096              		.loc 1 616 0
 2097 0047 488B2B   		movq	(%rbx), %rbp
 613:fltk-1.3.4-1/jpeg/jcarith.c **** 
 2098              		.loc 1 613 0
 2099 004a 4889C1   		movq	%rax, %rcx
 2100 004d 48894424 		movq	%rax, 16(%rsp)
 2100      10
 2101              	.LVL257:
 617:fltk-1.3.4-1/jpeg/jcarith.c **** 
 2102              		.loc 1 617 0
 2103 0052 498B8778 		movq	376(%r15), %rax
 2103      010000
 2104              	.LVL258:
 2105 0059 8B4018   		movl	24(%rax), %eax
 2106 005c 8944242C 		movl	%eax, 44(%rsp)
 2107              	.LVL259:
 622:fltk-1.3.4-1/jpeg/jcarith.c ****   do {
 2108              		.loc 1 622 0
 2109 0060 496387D0 		movslq	464(%r15), %rax
 2109      010000
 2110              	.LVL260:
 2111 0067 488D1481 		leaq	(%rcx,%rax,4), %rdx
 2112 006b 4889C7   		movq	%rax, %rdi
 2113              	.LVL261:
 2114 006e 4189C4   		movl	%eax, %r12d
 2115 0071 418B8FD8 		movl	472(%r15), %ecx
 2115      010000
 2116              	.LVL262:
 2117 0078 EB1A     		jmp	.L227
 2118              	.LVL263:
 2119 007a 660F1F44 		.p2align 4,,10
 2119      0000
 2120              		.p2align 3
 2121              	.L258:
 632:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 2122              		.loc 1 632 0
 2123 0080 D3FE     		sarl	%cl, %esi
 2124 0082 85F6     		testl	%esi, %esi
 2125 0084 7524     		jne	.L262
 2126              	.LVL264:
 2127              	.L224:
 2128 0086 4883EA04 		subq	$4, %rdx
 634:fltk-1.3.4-1/jpeg/jcarith.c **** 
 2129              		.loc 1 634 0
 2130 008a 4183EC01 		subl	$1, %r12d
 2131              	.LVL265:
 2132 008e 0F84E601 		je	.L263
 2132      0000
 2133              	.L227:
 628:fltk-1.3.4-1/jpeg/jcarith.c ****       if (v >>= cinfo->Al) break;
 2134              		.loc 1 628 0
 2135 0094 486302   		movslq	(%rdx), %rax
 2136 0097 0FBF4445 		movswl	0(%rbp,%rax,2), %eax
 2136      00
 2137              	.LVL266:
 2138 009c 85C0     		testl	%eax, %eax
 629:fltk-1.3.4-1/jpeg/jcarith.c ****     } else {
 2139              		.loc 1 629 0
 2140 009e 89C6     		movl	%eax, %esi
 628:fltk-1.3.4-1/jpeg/jcarith.c ****       if (v >>= cinfo->Al) break;
 2141              		.loc 1 628 0
 2142 00a0 79DE     		jns	.L258
 631:fltk-1.3.4-1/jpeg/jcarith.c ****       if (v >>= cinfo->Al) break;
 2143              		.loc 1 631 0
 2144 00a2 F7DE     		negl	%esi
 2145              	.LVL267:
 632:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 2146              		.loc 1 632 0
 2147 00a4 D3FE     		sarl	%cl, %esi
 2148              	.LVL268:
 2149 00a6 85F6     		testl	%esi, %esi
 2150 00a8 74DC     		je	.L224
 2151              	.LVL269:
 2152              	.L262:
 637:fltk-1.3.4-1/jpeg/jcarith.c ****     if ((v = (*block)[natural_order[kex]]) >= 0) {
 2153              		.loc 1 637 0 discriminator 1
 2154 00aa 4585E4   		testl	%r12d, %r12d
 2155 00ad 0F8E0002 		jle	.L240
 2155      0000
 2156 00b3 488B5C24 		movq	16(%rsp), %rbx
 2156      10
 2157              	.LVL270:
 2158 00b8 4963D4   		movslq	%r12d, %rdx
 637:fltk-1.3.4-1/jpeg/jcarith.c ****     if ((v = (*block)[natural_order[kex]]) >= 0) {
 2159              		.loc 1 637 0 is_stmt 0
 2160 00bb 44896424 		movl	%r12d, 40(%rsp)
 2160      28
 2161 00c0 418B8FD4 		movl	468(%r15), %ecx
 2161      010000
 2162 00c7 488D1493 		leaq	(%rbx,%rdx,4), %rdx
 2163 00cb EB1C     		jmp	.L226
 2164              	.LVL271:
 2165 00cd 0F1F00   		.p2align 4,,10
 2166              		.p2align 3
 2167              	.L259:
 642:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 2168              		.loc 1 642 0 is_stmt 1
 2169 00d0 D3F8     		sarl	%cl, %eax
 2170              	.LVL272:
 2171 00d2 85C0     		testl	%eax, %eax
 2172 00d4 751F     		jne	.L225
 2173              	.L264:
 2174              	.LVL273:
 2175 00d6 4883EA04 		subq	$4, %rdx
 637:fltk-1.3.4-1/jpeg/jcarith.c ****     if ((v = (*block)[natural_order[kex]]) >= 0) {
 2176              		.loc 1 637 0 discriminator 2
 2177 00da 836C2428 		subl	$1, 40(%rsp)
 2177      01
 2178              	.LVL274:
 2179 00df 7414     		je	.L225
 2180 00e1 486302   		movslq	(%rdx), %rax
 2181 00e4 0FBF4445 		movswl	0(%rbp,%rax,2), %eax
 2181      00
 2182              	.L226:
 2183              	.LVL275:
 638:fltk-1.3.4-1/jpeg/jcarith.c ****       if (v >>= cinfo->Ah) break;
 2184              		.loc 1 638 0
 2185 00e9 85C0     		testl	%eax, %eax
 2186 00eb 79E3     		jns	.L259
 641:fltk-1.3.4-1/jpeg/jcarith.c ****       if (v >>= cinfo->Ah) break;
 2187              		.loc 1 641 0
 2188 00ed F7D8     		negl	%eax
 2189              	.LVL276:
 642:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 2190              		.loc 1 642 0
 2191 00ef D3F8     		sarl	%cl, %eax
 2192              	.LVL277:
 2193 00f1 85C0     		testl	%eax, %eax
 2194 00f3 74E1     		je	.L264
 2195              	.LVL278:
 2196              	.L225:
 646:fltk-1.3.4-1/jpeg/jcarith.c ****     st = entropy->ac_stats[tbl] + 3 * k;
 2197              		.loc 1 646 0
 2198 00f5 418B87CC 		movl	460(%r15), %eax
 2198      010000
 2199 00fc 8D58FF   		leal	-1(%rax), %ebx
 2200              	.LVL279:
 2201 00ff 4439E3   		cmpl	%r12d, %ebx
 2202 0102 0F8DE000 		jge	.L230
 2202      0000
 2203 0108 48634424 		movslq	44(%rsp), %rax
 2203      2C
 2204 010d 48894424 		movq	%rax, 24(%rsp)
 2204      18
 668:fltk-1.3.4-1/jpeg/jcarith.c **** 	  }
 2205              		.loc 1 668 0
 2206 0112 488B4424 		movq	8(%rsp), %rax
 2206      08
 2207 0117 48056801 		addq	$360, %rax
 2207      0000
 2208 011d 48894424 		movq	%rax, 32(%rsp)
 2208      20
 2209              	.LVL280:
 2210              		.p2align 4,,10
 2211 0122 660F1F44 		.p2align 3
 2211      0000
 2212              	.L238:
 647:fltk-1.3.4-1/jpeg/jcarith.c ****     if (k >= kex)
 2213              		.loc 1 647 0
 2214 0128 488B7C24 		movq	8(%rsp), %rdi
 2214      08
 2215 012d 488B4C24 		movq	24(%rsp), %rcx
 2215      18
 2216 0132 8D045B   		leal	(%rbx,%rbx,2), %eax
 2217 0135 4898     		cltq
 2218 0137 480384CF 		addq	232(%rdi,%rcx,8), %rax
 2218      E8000000 
 648:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, 0);	/* EOB decision */
 2219              		.loc 1 648 0
 2220 013f 3B5C2428 		cmpl	40(%rsp), %ebx
 647:fltk-1.3.4-1/jpeg/jcarith.c ****     if (k >= kex)
 2221              		.loc 1 647 0
 2222 0143 4989C6   		movq	%rax, %r14
 2223              	.LVL281:
 648:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, 0);	/* EOB decision */
 2224              		.loc 1 648 0
 2225 0146 0F8D1C01 		jge	.L265
 2225      0000
 2226              	.LVL282:
 2227              	.L231:
 2228 014c 488B4424 		movq	16(%rsp), %rax
 2228      10
 2229 0151 4863D3   		movslq	%ebx, %rdx
 2230 0154 4C8D2C90 		leaq	(%rax,%rdx,4), %r13
 2231 0158 EB2D     		jmp	.L237
 2232              	.LVL283:
 2233 015a 660F1F44 		.p2align 4,,10
 2233      0000
 2234              		.p2align 3
 2235              	.L267:
 652:fltk-1.3.4-1/jpeg/jcarith.c **** 	  if (v >> 1)			/* previously nonzero coef */
 2236              		.loc 1 652 0
 2237 0160 418B8FD8 		movl	472(%r15), %ecx
 2237      010000
 2238 0167 D3FA     		sarl	%cl, %edx
 2239              	.LVL284:
 2240 0169 85D2     		testl	%edx, %edx
 2241 016b 0F85B700 		jne	.L266
 2241      0000
 2242              	.L233:
 673:fltk-1.3.4-1/jpeg/jcarith.c ****       st += 3;
 2243              		.loc 1 673 0
 2244 0171 498D7601 		leaq	1(%r14), %rsi
 2245 0175 31D2     		xorl	%edx, %edx
 2246              	.LVL285:
 2247 0177 4C89FF   		movq	%r15, %rdi
 674:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 2248              		.loc 1 674 0
 2249 017a 4983C603 		addq	$3, %r14
 2250              	.LVL286:
 2251 017e 4983C504 		addq	$4, %r13
 673:fltk-1.3.4-1/jpeg/jcarith.c ****       st += 3;
 2252              		.loc 1 673 0
 2253 0182 E8000000 		call	arith_encode
 2253      00
 2254              	.LVL287:
 2255              	.L237:
 651:fltk-1.3.4-1/jpeg/jcarith.c **** 	if (v >>= cinfo->Al) {
 2256              		.loc 1 651 0
 2257 0187 49635504 		movslq	4(%r13), %rdx
 2258 018b 83C301   		addl	$1, %ebx
 2259              	.LVL288:
 2260 018e 0FBF5455 		movswl	0(%rbp,%rdx,2), %edx
 2260      00
 2261              	.LVL289:
 2262 0193 85D2     		testl	%edx, %edx
 2263 0195 79C9     		jns	.L267
 663:fltk-1.3.4-1/jpeg/jcarith.c **** 	  if (v >> 1)			/* previously nonzero coef */
 2264              		.loc 1 663 0
 2265 0197 418B8FD8 		movl	472(%r15), %ecx
 2265      010000
 662:fltk-1.3.4-1/jpeg/jcarith.c **** 	if (v >>= cinfo->Al) {
 2266              		.loc 1 662 0
 2267 019e F7DA     		negl	%edx
 2268              	.LVL290:
 663:fltk-1.3.4-1/jpeg/jcarith.c **** 	  if (v >> 1)			/* previously nonzero coef */
 2269              		.loc 1 663 0
 2270 01a0 D3FA     		sarl	%cl, %edx
 2271              	.LVL291:
 2272 01a2 85D2     		testl	%edx, %edx
 2273 01a4 74CB     		je	.L233
 664:fltk-1.3.4-1/jpeg/jcarith.c **** 	    arith_encode(cinfo, st + 2, (v & 1));
 2274              		.loc 1 664 0
 2275 01a6 89D0     		movl	%edx, %eax
 2276 01a8 D1E8     		shrl	%eax
 2277 01aa 0F85A000 		jne	.L260
 2277      0000
 667:fltk-1.3.4-1/jpeg/jcarith.c **** 	    arith_encode(cinfo, entropy->fixed_bin, 1);
 2278              		.loc 1 667 0
 2279 01b0 498D7601 		leaq	1(%r14), %rsi
 2280 01b4 BA010000 		movl	$1, %edx
 2280      00
 2281              	.LVL292:
 2282 01b9 4C89FF   		movq	%r15, %rdi
 2283 01bc E8000000 		call	arith_encode
 2283      00
 2284              	.LVL293:
 668:fltk-1.3.4-1/jpeg/jcarith.c **** 	  }
 2285              		.loc 1 668 0
 2286 01c1 488B7424 		movq	32(%rsp), %rsi
 2286      20
 2287 01c6 BA010000 		movl	$1, %edx
 2287      00
 2288 01cb 4C89FF   		movq	%r15, %rdi
 2289 01ce E8000000 		call	arith_encode
 2289      00
 2290              	.LVL294:
 2291              		.p2align 4,,10
 2292 01d3 0F1F4400 		.p2align 3
 2292      00
 2293              	.L235:
 646:fltk-1.3.4-1/jpeg/jcarith.c ****     st = entropy->ac_stats[tbl] + 3 * k;
 2294              		.loc 1 646 0 discriminator 1
 2295 01d8 4439E3   		cmpl	%r12d, %ebx
 2296 01db 0F8C47FF 		jl	.L238
 2296      FFFF
 2297 01e1 418BBFD0 		movl	464(%r15), %edi
 2297      010000
 2298              	.LVL295:
 2299              	.L230:
 678:fltk-1.3.4-1/jpeg/jcarith.c ****     st = entropy->ac_stats[tbl] + 3 * k;
 2300              		.loc 1 678 0
 2301 01e8 39FB     		cmpl	%edi, %ebx
 2302 01ea 7D25     		jge	.L239
 2303              	.LVL296:
 679:fltk-1.3.4-1/jpeg/jcarith.c ****     arith_encode(cinfo, st, 1);
 2304              		.loc 1 679 0
 2305 01ec 48634424 		movslq	44(%rsp), %rax
 2305      2C
 680:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 2306              		.loc 1 680 0
 2307 01f1 488B7C24 		movq	8(%rsp), %rdi
 2307      08
 2308 01f6 8D345B   		leal	(%rbx,%rbx,2), %esi
 2309 01f9 BA010000 		movl	$1, %edx
 2309      00
 2310 01fe 4863F6   		movslq	%esi, %rsi
 2311 0201 4803B4C7 		addq	232(%rdi,%rax,8), %rsi
 2311      E8000000 
 2312 0209 4C89FF   		movq	%r15, %rdi
 2313 020c E8000000 		call	arith_encode
 2313      00
 2314              	.LVL297:
 2315              	.L239:
 684:fltk-1.3.4-1/jpeg/jcarith.c **** 
 2316              		.loc 1 684 0
 2317 0211 4883C438 		addq	$56, %rsp
 2318              		.cfi_remember_state
 2319              		.cfi_def_cfa_offset 56
 2320 0215 B8010000 		movl	$1, %eax
 2320      00
 2321 021a 5B       		popq	%rbx
 2322              		.cfi_def_cfa_offset 48
 2323              	.LVL298:
 2324 021b 5D       		popq	%rbp
 2325              		.cfi_def_cfa_offset 40
 2326              	.LVL299:
 2327 021c 415C     		popq	%r12
 2328              		.cfi_def_cfa_offset 32
 2329              	.LVL300:
 2330 021e 415D     		popq	%r13
 2331              		.cfi_def_cfa_offset 24
 2332 0220 415E     		popq	%r14
 2333              		.cfi_def_cfa_offset 16
 2334 0222 415F     		popq	%r15
 2335              		.cfi_def_cfa_offset 8
 2336              	.LVL301:
 2337 0224 C3       		ret
 2338              	.LVL302:
 2339              		.p2align 4,,10
 2340 0225 0F1F00   		.p2align 3
 2341              	.L266:
 2342              		.cfi_restore_state
 653:fltk-1.3.4-1/jpeg/jcarith.c **** 	    arith_encode(cinfo, st + 2, (v & 1));
 2343              		.loc 1 653 0
 2344 0228 89D0     		movl	%edx, %eax
 2345 022a D1E8     		shrl	%eax
 2346 022c 7522     		jne	.L260
 656:fltk-1.3.4-1/jpeg/jcarith.c **** 	    arith_encode(cinfo, entropy->fixed_bin, 0);
 2347              		.loc 1 656 0
 2348 022e 498D7601 		leaq	1(%r14), %rsi
 2349 0232 4C89FF   		movq	%r15, %rdi
 2350 0235 BA010000 		movl	$1, %edx
 2350      00
 2351              	.LVL303:
 2352 023a E8000000 		call	arith_encode
 2352      00
 2353              	.LVL304:
 657:fltk-1.3.4-1/jpeg/jcarith.c **** 	  }
 2354              		.loc 1 657 0
 2355 023f 488B7424 		movq	32(%rsp), %rsi
 2355      20
 2356 0244 31D2     		xorl	%edx, %edx
 2357 0246 4C89FF   		movq	%r15, %rdi
 2358 0249 E8000000 		call	arith_encode
 2358      00
 2359              	.LVL305:
 2360 024e EB88     		jmp	.L235
 2361              	.LVL306:
 2362              		.p2align 4,,10
 2363              		.p2align 3
 2364              	.L260:
 665:fltk-1.3.4-1/jpeg/jcarith.c **** 	  else {			/* newly nonzero coef */
 2365              		.loc 1 665 0
 2366 0250 498D7602 		leaq	2(%r14), %rsi
 2367 0254 83E201   		andl	$1, %edx
 2368              	.LVL307:
 2369 0257 4C89FF   		movq	%r15, %rdi
 2370 025a E8000000 		call	arith_encode
 2370      00
 2371              	.LVL308:
 2372 025f E974FFFF 		jmp	.L235
 2372      FF
 2373              	.LVL309:
 2374              		.p2align 4,,10
 2375 0264 0F1F4000 		.p2align 3
 2376              	.L265:
 649:fltk-1.3.4-1/jpeg/jcarith.c ****     for (;;) {
 2377              		.loc 1 649 0
 2378 0268 31D2     		xorl	%edx, %edx
 2379 026a 4889C6   		movq	%rax, %rsi
 2380 026d 4C89FF   		movq	%r15, %rdi
 2381 0270 E8000000 		call	arith_encode
 2381      00
 2382              	.LVL310:
 2383 0275 E9D2FEFF 		jmp	.L231
 2383      FF
 2384              	.LVL311:
 2385              	.L263:
 2386 027a C7442428 		movl	$0, 40(%rsp)
 2386      00000000 
 2387 0282 E96EFEFF 		jmp	.L225
 2387      FF
 2388              	.LVL312:
 2389              	.L261:
 605:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 2390              		.loc 1 605 0
 2391 0287 4C8B7424 		movq	8(%rsp), %r14
 2391      08
 2392 028c 418B7664 		movl	100(%r14), %esi
 2393 0290 E8000000 		call	emit_restart
 2393      00
 2394              	.LVL313:
 608:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 2395              		.loc 1 608 0
 2396 0295 418B4E64 		movl	100(%r14), %ecx
 606:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->next_restart_num++;
 2397              		.loc 1 606 0
 2398 0299 418B873C 		movl	316(%r15), %eax
 2398      010000
 608:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 2399              		.loc 1 608 0
 2400 02a0 8D5101   		leal	1(%rcx), %edx
 2401 02a3 894C2428 		movl	%ecx, 40(%rsp)
 2402 02a7 83E207   		andl	$7, %edx
 2403 02aa 41895664 		movl	%edx, 100(%r14)
 2404 02ae E982FDFF 		jmp	.L221
 2404      FF
 2405              	.LVL314:
 2406              	.L240:
 637:fltk-1.3.4-1/jpeg/jcarith.c ****     if ((v = (*block)[natural_order[kex]]) >= 0) {
 2407              		.loc 1 637 0
 2408 02b3 44896424 		movl	%r12d, 40(%rsp)
 2408      28
 2409 02b8 E938FEFF 		jmp	.L225
 2409      FF
 2410              		.cfi_endproc
 2411              	.LFE68:
 2413              		.section	.text.unlikely.encode_mcu_AC_refine
 2414              	.LCOLDE8:
 2415              		.section	.text.encode_mcu_AC_refine
 2416              	.LHOTE8:
 2417              		.section	.text.unlikely.encode_mcu,"ax",@progbits
 2418              	.LCOLDB9:
 2419              		.section	.text.encode_mcu,"ax",@progbits
 2420              	.LHOTB9:
 2421              		.p2align 4,,15
 2423              	encode_mcu:
 2424              	.LFB69:
 693:fltk-1.3.4-1/jpeg/jcarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 2425              		.loc 1 693 0
 2426              		.cfi_startproc
 2427              	.LVL315:
 2428 0000 4157     		pushq	%r15
 2429              		.cfi_def_cfa_offset 16
 2430              		.cfi_offset 15, -16
 2431 0002 4156     		pushq	%r14
 2432              		.cfi_def_cfa_offset 24
 2433              		.cfi_offset 14, -24
 2434 0004 4989FF   		movq	%rdi, %r15
 2435 0007 4155     		pushq	%r13
 2436              		.cfi_def_cfa_offset 32
 2437              		.cfi_offset 13, -32
 2438 0009 4154     		pushq	%r12
 2439              		.cfi_def_cfa_offset 40
 2440              		.cfi_offset 12, -40
 2441 000b 55       		pushq	%rbp
 2442              		.cfi_def_cfa_offset 48
 2443              		.cfi_offset 6, -48
 2444 000c 53       		pushq	%rbx
 2445              		.cfi_def_cfa_offset 56
 2446              		.cfi_offset 3, -56
 2447 000d 4889F3   		movq	%rsi, %rbx
 2448 0010 4883EC68 		subq	$104, %rsp
 2449              		.cfi_def_cfa_offset 160
 704:fltk-1.3.4-1/jpeg/jcarith.c ****     if (entropy->restarts_to_go == 0) {
 2450              		.loc 1 704 0
 2451 0014 8B973C01 		movl	316(%rdi), %edx
 2451      0000
 694:fltk-1.3.4-1/jpeg/jcarith.c ****   const int * natural_order;
 2452              		.loc 1 694 0
 2453 001a 488B8730 		movq	560(%rdi), %rax
 2453      020000
 704:fltk-1.3.4-1/jpeg/jcarith.c ****     if (entropy->restarts_to_go == 0) {
 2454              		.loc 1 704 0
 2455 0021 85D2     		testl	%edx, %edx
 694:fltk-1.3.4-1/jpeg/jcarith.c ****   const int * natural_order;
 2456              		.loc 1 694 0
 2457 0023 48894424 		movq	%rax, 64(%rsp)
 2457      40
 2458              	.LVL316:
 704:fltk-1.3.4-1/jpeg/jcarith.c ****     if (entropy->restarts_to_go == 0) {
 2459              		.loc 1 704 0
 2460 0028 7416     		je	.L269
 705:fltk-1.3.4-1/jpeg/jcarith.c ****       emit_restart(cinfo, entropy->next_restart_num);
 2461              		.loc 1 705 0
 2462 002a 8B4060   		movl	96(%rax), %eax
 2463              	.LVL317:
 2464 002d 85C0     		testl	%eax, %eax
 2465 002f 0F840105 		je	.L331
 2465      0000
 2466              	.LVL318:
 2467              	.L270:
 711:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 2468              		.loc 1 711 0
 2469 0035 488B4C24 		movq	64(%rsp), %rcx
 2469      40
 2470 003a 83E801   		subl	$1, %eax
 2471 003d 894160   		movl	%eax, 96(%rcx)
 2472              	.L269:
 714:fltk-1.3.4-1/jpeg/jcarith.c **** 
 2473              		.loc 1 714 0
 2474 0040 498B87E0 		movq	480(%r15), %rax
 2474      010000
 2475 0047 48895C24 		movq	%rbx, 48(%rsp)
 2475      30
 717:fltk-1.3.4-1/jpeg/jcarith.c ****     block = MCU_data[blkn];
 2476              		.loc 1 717 0
 2477 004c C744242C 		movl	$0, 44(%rsp)
 2477      00000000 
 714:fltk-1.3.4-1/jpeg/jcarith.c **** 
 2478              		.loc 1 714 0
 2479 0054 48894424 		movq	%rax, 16(%rsp)
 2479      10
 2480              	.LVL319:
 2481 0059 498D87A4 		leaq	420(%r15), %rax
 2481      010000
 2482              	.LVL320:
 2483 0060 48894424 		movq	%rax, 56(%rsp)
 2483      38
 2484 0065 488B4424 		movq	64(%rsp), %rax
 2484      40
 2485 006a 48056801 		addq	$360, %rax
 2485      0000
 2486 0070 48894424 		movq	%rax, 32(%rsp)
 2486      20
 717:fltk-1.3.4-1/jpeg/jcarith.c ****     block = MCU_data[blkn];
 2487              		.loc 1 717 0
 2488 0075 418B87A0 		movl	416(%r15), %eax
 2488      010000
 2489 007c 85C0     		testl	%eax, %eax
 2490 007e 0F8ECE01 		jle	.L328
 2490      0000
 2491              	.LVL321:
 2492              		.p2align 4,,10
 2493 0084 0F1F4000 		.p2align 3
 2494              	.L313:
 718:fltk-1.3.4-1/jpeg/jcarith.c ****     ci = cinfo->MCU_membership[blkn];
 2495              		.loc 1 718 0
 2496 0088 488B4424 		movq	48(%rsp), %rax
 2496      30
 2497 008d 488B7C24 		movq	64(%rsp), %rdi
 2497      40
 2498 0092 4C8B30   		movq	(%rax), %r14
 2499              	.LVL322:
 720:fltk-1.3.4-1/jpeg/jcarith.c **** 
 2500              		.loc 1 720 0
 2501 0095 488B4424 		movq	56(%rsp), %rax
 2501      38
 2502 009a 486300   		movslq	(%rax), %rax
 2503 009d 498B8CC7 		movq	376(%r15,%rax,8), %rcx
 2503      78010000 
 2504 00a5 488D2C87 		leaq	(%rdi,%rax,4), %rbp
 727:fltk-1.3.4-1/jpeg/jcarith.c **** 
 2505              		.loc 1 727 0
 2506 00a9 48634550 		movslq	80(%rbp), %rax
 720:fltk-1.3.4-1/jpeg/jcarith.c **** 
 2507              		.loc 1 720 0
 2508 00ad 48894C24 		movq	%rcx, 24(%rsp)
 2508      18
 2509              	.LVL323:
 2510 00b2 48634914 		movslq	20(%rcx), %rcx
 2511              	.LVL324:
 2512 00b6 48894C24 		movq	%rcx, 8(%rsp)
 2512      08
 2513 00bb 488D0CCF 		leaq	(%rdi,%rcx,8), %rcx
 727:fltk-1.3.4-1/jpeg/jcarith.c **** 
 2514              		.loc 1 727 0
 2515 00bf 48034168 		addq	104(%rcx), %rax
 2516 00c3 4989C4   		movq	%rax, %r12
 2517              	.LVL325:
 730:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, 0);
 2518              		.loc 1 730 0
 2519 00c6 410FBF06 		movswl	(%r14), %eax
 2520              	.LVL326:
 2521 00ca 89C3     		movl	%eax, %ebx
 2522 00cc 2B5D40   		subl	64(%rbp), %ebx
 2523              	.LVL327:
 2524 00cf 0F859402 		jne	.L272
 2524      0000
 731:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->dc_context[ci] = 0;	/* zero diff category */
 2525              		.loc 1 731 0
 2526 00d5 31D2     		xorl	%edx, %edx
 2527 00d7 4C89E6   		movq	%r12, %rsi
 2528 00da 4C89FF   		movq	%r15, %rdi
 2529 00dd E8000000 		call	arith_encode
 2529      00
 2530              	.LVL328:
 732:fltk-1.3.4-1/jpeg/jcarith.c ****     } else {
 2531              		.loc 1 732 0
 2532 00e2 C7455000 		movl	$0, 80(%rbp)
 2532      000000
 2533              	.LVL329:
 2534              	.L273:
 775:fltk-1.3.4-1/jpeg/jcarith.c ****     tbl = compptr->ac_tbl_no;
 2535              		.loc 1 775 0
 2536 00e9 418B8FE8 		movl	488(%r15), %ecx
 2536      010000
 2537              	.LVL330:
 2538 00f0 85C9     		testl	%ecx, %ecx
 2539 00f2 0F843801 		je	.L284
 2539      0000
 776:fltk-1.3.4-1/jpeg/jcarith.c **** 
 2540              		.loc 1 776 0
 2541 00f8 488B4424 		movq	24(%rsp), %rax
 2541      18
 2542 00fd 488B7C24 		movq	16(%rsp), %rdi
 2542      10
 2543 0102 89CA     		movl	%ecx, %edx
 2544 0104 8B4018   		movl	24(%rax), %eax
 2545 0107 89442448 		movl	%eax, 72(%rsp)
 2546              	.LVL331:
 2547 010b 4863C1   		movslq	%ecx, %rax
 2548              	.LVL332:
 2549 010e 488D0487 		leaq	(%rdi,%rax,4), %rax
 2550 0112 EB11     		jmp	.L286
 2551              	.LVL333:
 2552              		.p2align 4,,10
 2553 0114 0F1F4000 		.p2align 3
 2554              	.L333:
 2555 0118 4883E804 		subq	$4, %rax
 781:fltk-1.3.4-1/jpeg/jcarith.c **** 
 2556              		.loc 1 781 0
 2557 011c 83EA01   		subl	$1, %edx
 2558              	.LVL334:
 2559 011f 0F842803 		je	.L332
 2559      0000
 2560              	.L286:
 780:fltk-1.3.4-1/jpeg/jcarith.c ****     } while (--ke);
 2561              		.loc 1 780 0
 2562 0125 486330   		movslq	(%rax), %rsi
 2563 0128 6641833C 		cmpw	$0, (%r14,%rsi,2)
 2563      7600
 2564 012e 74E8     		je	.L333
 2565 0130 48634424 		movslq	72(%rsp), %rax
 2565      48
 2566 0135 488B7C24 		movq	64(%rsp), %rdi
 2566      40
 784:fltk-1.3.4-1/jpeg/jcarith.c ****       st = entropy->ac_stats[tbl] + 3 * k;
 2567              		.loc 1 784 0 discriminator 1
 2568 013a 4531E4   		xorl	%r12d, %r12d
 2569 013d 85D2     		testl	%edx, %edx
 2570 013f 89542418 		movl	%edx, 24(%rsp)
 2571              	.LVL335:
 2572 0143 48894424 		movq	%rax, 88(%rsp)
 2572      58
 2573 0148 488D04C7 		leaq	(%rdi,%rax,8), %rax
 2574 014c 48894424 		movq	%rax, 8(%rsp)
 2574      08
 2575 0151 0F8ED000 		jle	.L287
 2575      0000
 2576              	.LVL336:
 2577 0157 660F1F84 		.p2align 4,,10
 2577      00000000 
 2577      00
 2578              		.p2align 3
 2579              	.L314:
 785:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, 0);	/* EOB decision */
 2580              		.loc 1 785 0
 2581 0160 488B4424 		movq	8(%rsp), %rax
 2581      08
 2582 0165 438D1C64 		leal	(%r12,%r12,2), %ebx
 786:fltk-1.3.4-1/jpeg/jcarith.c ****       while ((v = (*block)[natural_order[++k]]) == 0) {
 2583              		.loc 1 786 0
 2584 0169 31D2     		xorl	%edx, %edx
 2585 016b 4C89FF   		movq	%r15, %rdi
 787:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st + 1, 0);
 2586              		.loc 1 787 0
 2587 016e 4183C401 		addl	$1, %r12d
 2588              	.LVL337:
 785:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, 0);	/* EOB decision */
 2589              		.loc 1 785 0
 2590 0172 4863DB   		movslq	%ebx, %rbx
 2591 0175 480398E8 		addq	232(%rax), %rbx
 2591      000000
 2592              	.LVL338:
 786:fltk-1.3.4-1/jpeg/jcarith.c ****       while ((v = (*block)[natural_order[++k]]) == 0) {
 2593              		.loc 1 786 0
 2594 017c 4889DE   		movq	%rbx, %rsi
 2595 017f E8000000 		call	arith_encode
 2595      00
 2596              	.LVL339:
 787:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st + 1, 0);
 2597              		.loc 1 787 0
 2598 0184 488B4C24 		movq	16(%rsp), %rcx
 2598      10
 2599 0189 4963C4   		movslq	%r12d, %rax
 2600 018c 488D1485 		leaq	0(,%rax,4), %rdx
 2600      00000000 
 2601 0194 48630481 		movslq	(%rcx,%rax,4), %rax
 2602 0198 410FBF2C 		movswl	(%r14,%rax,2), %ebp
 2602      46
 2603              	.LVL340:
 2604 019d 85ED     		testl	%ebp, %ebp
 2605 019f 7536     		jne	.L288
 2606 01a1 4C8D6C11 		leaq	4(%rcx,%rdx), %r13
 2606      04
 2607 01a6 662E0F1F 		.p2align 4,,10
 2607      84000000 
 2607      0000
 2608              		.p2align 3
 2609              	.L289:
 2610              	.LVL341:
 788:fltk-1.3.4-1/jpeg/jcarith.c **** 	st += 3;
 2611              		.loc 1 788 0
 2612 01b0 488D7301 		leaq	1(%rbx), %rsi
 2613 01b4 31D2     		xorl	%edx, %edx
 2614 01b6 4C89FF   		movq	%r15, %rdi
 789:fltk-1.3.4-1/jpeg/jcarith.c ****       }
 2615              		.loc 1 789 0
 2616 01b9 4883C303 		addq	$3, %rbx
 2617              	.LVL342:
 787:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st + 1, 0);
 2618              		.loc 1 787 0
 2619 01bd 4183C401 		addl	$1, %r12d
 2620              	.LVL343:
 2621 01c1 4983C504 		addq	$4, %r13
 788:fltk-1.3.4-1/jpeg/jcarith.c **** 	st += 3;
 2622              		.loc 1 788 0
 2623 01c5 E8000000 		call	arith_encode
 2623      00
 2624              	.LVL344:
 787:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st + 1, 0);
 2625              		.loc 1 787 0
 2626 01ca 496345FC 		movslq	-4(%r13), %rax
 2627 01ce 410FBF2C 		movswl	(%r14,%rax,2), %ebp
 2627      46
 2628              	.LVL345:
 2629 01d3 85ED     		testl	%ebp, %ebp
 2630 01d5 74D9     		je	.L289
 2631              	.L288:
 791:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Figure F.6: Encoding nonzero value v */
 2632              		.loc 1 791 0
 2633 01d7 488D7301 		leaq	1(%rbx), %rsi
 2634 01db BA010000 		movl	$1, %edx
 2634      00
 2635 01e0 4C89FF   		movq	%r15, %rdi
 2636 01e3 E8000000 		call	arith_encode
 2636      00
 2637              	.LVL346:
 794:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, entropy->fixed_bin, 0);
 2638              		.loc 1 794 0
 2639 01e8 85ED     		testl	%ebp, %ebp
 2640 01ea 0F8E6001 		jle	.L290
 2640      0000
 795:fltk-1.3.4-1/jpeg/jcarith.c ****       } else {
 2641              		.loc 1 795 0
 2642 01f0 488B7424 		movq	32(%rsp), %rsi
 2642      20
 2643 01f5 31D2     		xorl	%edx, %edx
 2644 01f7 4C89FF   		movq	%r15, %rdi
 2645 01fa E8000000 		call	arith_encode
 2645      00
 2646              	.LVL347:
 2647              	.L291:
 800:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Figure F.8: Encoding the magnitude category of v */
 2648              		.loc 1 800 0
 2649 01ff 4883C302 		addq	$2, %rbx
 2650              	.LVL348:
 803:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st, 1);
 2651              		.loc 1 803 0
 2652 0203 83ED01   		subl	$1, %ebp
 2653              	.LVL349:
 2654 0206 7568     		jne	.L334
 2655              	.LVL350:
 2656              	.L292:
 819:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Figure F.9: Encoding the magnitude bit pattern of v */
 2657              		.loc 1 819 0
 2658 0208 31D2     		xorl	%edx, %edx
 2659 020a 4889DE   		movq	%rbx, %rsi
 2660 020d 4C89FF   		movq	%r15, %rdi
 2661 0210 E8000000 		call	arith_encode
 2661      00
 2662              	.LVL351:
 2663              	.L297:
 784:fltk-1.3.4-1/jpeg/jcarith.c ****       st = entropy->ac_stats[tbl] + 3 * k;
 2664              		.loc 1 784 0
 2665 0215 44396424 		cmpl	%r12d, 24(%rsp)
 2665      18
 2666 021a 0F8F40FF 		jg	.L314
 2666      FFFF
 2667 0220 418B8FE8 		movl	488(%r15), %ecx
 2667      010000
 2668              	.LVL352:
 2669              	.L287:
 826:fltk-1.3.4-1/jpeg/jcarith.c ****       st = entropy->ac_stats[tbl] + 3 * k;
 2670              		.loc 1 826 0
 2671 0227 4139CC   		cmpl	%ecx, %r12d
 2672 022a 0F8C2902 		jl	.L335
 2672      0000
 2673              	.LVL353:
 2674              		.p2align 4,,10
 2675              		.p2align 3
 2676              	.L284:
 717:fltk-1.3.4-1/jpeg/jcarith.c ****     block = MCU_data[blkn];
 2677              		.loc 1 717 0 discriminator 2
 2678 0230 8344242C 		addl	$1, 44(%rsp)
 2678      01
 2679              	.LVL354:
 2680 0235 48834424 		addq	$8, 48(%rsp)
 2680      3008
 2681 023b 8B44242C 		movl	44(%rsp), %eax
 2682              	.LVL355:
 2683 023f 48834424 		addq	$4, 56(%rsp)
 2683      3804
 2684 0245 413987A0 		cmpl	%eax, 416(%r15)
 2684      010000
 2685 024c 0F8F36FE 		jg	.L313
 2685      FFFF
 2686              	.LVL356:
 2687              	.L328:
 833:fltk-1.3.4-1/jpeg/jcarith.c **** 
 2688              		.loc 1 833 0
 2689 0252 4883C468 		addq	$104, %rsp
 2690              		.cfi_remember_state
 2691              		.cfi_def_cfa_offset 56
 2692 0256 B8010000 		movl	$1, %eax
 2692      00
 2693 025b 5B       		popq	%rbx
 2694              		.cfi_def_cfa_offset 48
 2695 025c 5D       		popq	%rbp
 2696              		.cfi_def_cfa_offset 40
 2697 025d 415C     		popq	%r12
 2698              		.cfi_def_cfa_offset 32
 2699 025f 415D     		popq	%r13
 2700              		.cfi_def_cfa_offset 24
 2701 0261 415E     		popq	%r14
 2702              		.cfi_def_cfa_offset 16
 2703 0263 415F     		popq	%r15
 2704              		.cfi_def_cfa_offset 8
 2705              	.LVL357:
 2706 0265 C3       		ret
 2707              	.LVL358:
 2708 0266 662E0F1F 		.p2align 4,,10
 2708      84000000 
 2708      0000
 2709              		.p2align 3
 2710              	.L334:
 2711              		.cfi_restore_state
 804:fltk-1.3.4-1/jpeg/jcarith.c **** 	m = 1;
 2712              		.loc 1 804 0
 2713 0270 BA010000 		movl	$1, %edx
 2713      00
 2714 0275 4889DE   		movq	%rbx, %rsi
 2715 0278 4C89FF   		movq	%r15, %rdi
 2716 027b E8000000 		call	arith_encode
 2716      00
 2717              	.LVL359:
 807:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, st, 1);
 2718              		.loc 1 807 0
 2719 0280 89E8     		movl	%ebp, %eax
 2720 0282 D1E8     		shrl	%eax
 2721 0284 7482     		je	.L292
 808:fltk-1.3.4-1/jpeg/jcarith.c **** 	  m <<= 1;
 2722              		.loc 1 808 0
 2723 0286 BA010000 		movl	$1, %edx
 2723      00
 2724 028b 4889DE   		movq	%rbx, %rsi
 2725 028e 4C89FF   		movq	%r15, %rdi
 2726 0291 E8000000 		call	arith_encode
 2726      00
 2727              	.LVL360:
 810:fltk-1.3.4-1/jpeg/jcarith.c **** 	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 2728              		.loc 1 810 0
 2729 0296 488B4424 		movq	88(%rsp), %rax
 2729      58
 2730 029b 488B4C24 		movq	8(%rsp), %rcx
 2730      08
 2731 02a0 BABD0000 		movl	$189, %edx
 2731      00
 812:fltk-1.3.4-1/jpeg/jcarith.c **** 	    arith_encode(cinfo, st, 1);
 2732              		.loc 1 812 0
 2733 02a5 4189ED   		movl	%ebp, %r13d
 810:fltk-1.3.4-1/jpeg/jcarith.c **** 	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 2734              		.loc 1 810 0
 2735 02a8 410FB684 		movzbl	256(%r15,%rax), %eax
 2735      07000100 
 2735      00
 2736 02b1 4439E0   		cmpl	%r12d, %eax
 2737 02b4 B8D90000 		movl	$217, %eax
 2737      00
 2738 02b9 480F4DC2 		cmovge	%rdx, %rax
 2739 02bd 480381E8 		addq	232(%rcx), %rax
 2739      000000
 812:fltk-1.3.4-1/jpeg/jcarith.c **** 	    arith_encode(cinfo, st, 1);
 2740              		.loc 1 812 0
 2741 02c4 41C1FD02 		sarl	$2, %r13d
 2742 02c8 4585ED   		testl	%r13d, %r13d
 810:fltk-1.3.4-1/jpeg/jcarith.c **** 	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 2743              		.loc 1 810 0
 2744 02cb 4889C3   		movq	%rax, %rbx
 2745              	.LVL361:
 812:fltk-1.3.4-1/jpeg/jcarith.c **** 	    arith_encode(cinfo, st, 1);
 2746              		.loc 1 812 0
 2747 02ce 0F848E02 		je	.L294
 2747      0000
 2748 02d4 B8020000 		movl	$2, %eax
 2748      00
 2749              	.LVL362:
 2750 02d9 896C2454 		movl	%ebp, 84(%rsp)
 2751 02dd 4889DD   		movq	%rbx, %rbp
 2752              	.LVL363:
 2753 02e0 89C3     		movl	%eax, %ebx
 2754              	.LVL364:
 2755              		.p2align 4,,10
 2756 02e2 660F1F44 		.p2align 3
 2756      0000
 2757              	.L295:
 813:fltk-1.3.4-1/jpeg/jcarith.c **** 	    m <<= 1;
 2758              		.loc 1 813 0
 2759 02e8 4889EE   		movq	%rbp, %rsi
 2760 02eb BA010000 		movl	$1, %edx
 2760      00
 2761 02f0 4C89FF   		movq	%r15, %rdi
 2762 02f3 E8000000 		call	arith_encode
 2762      00
 2763              	.LVL365:
 814:fltk-1.3.4-1/jpeg/jcarith.c **** 	    st += 1;
 2764              		.loc 1 814 0
 2765 02f8 01DB     		addl	%ebx, %ebx
 2766              	.LVL366:
 815:fltk-1.3.4-1/jpeg/jcarith.c **** 	  }
 2767              		.loc 1 815 0
 2768 02fa 4883C501 		addq	$1, %rbp
 2769              	.LVL367:
 812:fltk-1.3.4-1/jpeg/jcarith.c **** 	    arith_encode(cinfo, st, 1);
 2770              		.loc 1 812 0
 2771 02fe 41D1FD   		sarl	%r13d
 2772              	.LVL368:
 2773 0301 75E5     		jne	.L295
 2774 0303 895C2450 		movl	%ebx, 80(%rsp)
 2775 0307 4889EB   		movq	%rbp, %rbx
 2776              	.LVL369:
 819:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Figure F.9: Encoding the magnitude bit pattern of v */
 2777              		.loc 1 819 0
 2778 030a 31D2     		xorl	%edx, %edx
 2779 030c 4889DE   		movq	%rbx, %rsi
 2780 030f 4C89FF   		movq	%r15, %rdi
 2781 0312 8B6C2454 		movl	84(%rsp), %ebp
 2782              	.LVL370:
 821:fltk-1.3.4-1/jpeg/jcarith.c ****       while (m >>= 1)
 2783              		.loc 1 821 0
 2784 0316 4C8D6B0E 		leaq	14(%rbx), %r13
 2785              	.LVL371:
 819:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Figure F.9: Encoding the magnitude bit pattern of v */
 2786              		.loc 1 819 0
 2787 031a E8000000 		call	arith_encode
 2787      00
 2788              	.LVL372:
 822:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st, (m & v) ? 1 : 0);
 2789              		.loc 1 822 0
 2790 031f 8B5C2450 		movl	80(%rsp), %ebx
 2791 0323 D1FB     		sarl	%ebx
 2792              	.LVL373:
 2793 0325 0F84EAFE 		je	.L297
 2793      FFFF
 2794 032b 0F1F4400 		.p2align 4,,10
 2794      00
 2795              		.p2align 3
 2796              	.L315:
 823:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 2797              		.loc 1 823 0
 2798 0330 31D2     		xorl	%edx, %edx
 2799 0332 85DD     		testl	%ebx, %ebp
 2800 0334 4C89EE   		movq	%r13, %rsi
 2801 0337 0F95C2   		setne	%dl
 2802 033a 4C89FF   		movq	%r15, %rdi
 2803 033d E8000000 		call	arith_encode
 2803      00
 2804              	.LVL374:
 822:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st, (m & v) ? 1 : 0);
 2805              		.loc 1 822 0
 2806 0342 D1FB     		sarl	%ebx
 2807              	.LVL375:
 2808 0344 75EA     		jne	.L315
 2809 0346 E9CAFEFF 		jmp	.L297
 2809      FF
 2810              	.LVL376:
 2811 034b 0F1F4400 		.p2align 4,,10
 2811      00
 2812              		.p2align 3
 2813              	.L290:
 798:fltk-1.3.4-1/jpeg/jcarith.c ****       }
 2814              		.loc 1 798 0
 2815 0350 488B7424 		movq	32(%rsp), %rsi
 2815      20
 2816 0355 BA010000 		movl	$1, %edx
 2816      00
 2817 035a 4C89FF   		movq	%r15, %rdi
 797:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, entropy->fixed_bin, 1);
 2818              		.loc 1 797 0
 2819 035d F7DD     		negl	%ebp
 2820              	.LVL377:
 798:fltk-1.3.4-1/jpeg/jcarith.c ****       }
 2821              		.loc 1 798 0
 2822 035f E8000000 		call	arith_encode
 2822      00
 2823              	.LVL378:
 2824 0364 E996FEFF 		jmp	.L291
 2824      FF
 2825              	.LVL379:
 2826              	.L272:
 734:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, 1);
 2827              		.loc 1 734 0
 2828 0369 894540   		movl	%eax, 64(%rbp)
 2829              	.LVL380:
 735:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Figure F.6: Encoding nonzero value v */
 2830              		.loc 1 735 0
 2831 036c BA010000 		movl	$1, %edx
 2831      00
 2832 0371 4C89E6   		movq	%r12, %rsi
 2833 0374 4C89FF   		movq	%r15, %rdi
 2834 0377 48894C24 		movq	%rcx, 72(%rsp)
 2834      48
 2835 037c E8000000 		call	arith_encode
 2835      00
 2836              	.LVL381:
 738:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st + 1, 0);	/* Table F.4: SS = S0 + 1 */
 2837              		.loc 1 738 0
 2838 0381 85DB     		testl	%ebx, %ebx
 2839 0383 488B4C24 		movq	72(%rsp), %rcx
 2839      48
 2840 0388 0F8E7901 		jle	.L274
 2840      0000
 739:fltk-1.3.4-1/jpeg/jcarith.c **** 	st += 2;			/* Table F.4: SP = S0 + 2 */
 2841              		.loc 1 739 0
 2842 038e 498D7424 		leaq	1(%r12), %rsi
 2842      01
 2843 0393 31D2     		xorl	%edx, %edx
 2844 0395 4C89FF   		movq	%r15, %rdi
 740:fltk-1.3.4-1/jpeg/jcarith.c **** 	entropy->dc_context[ci] = 4;	/* small positive diff category */
 2845              		.loc 1 740 0
 2846 0398 4D8D6C24 		leaq	2(%r12), %r13
 2846      02
 739:fltk-1.3.4-1/jpeg/jcarith.c **** 	st += 2;			/* Table F.4: SP = S0 + 2 */
 2847              		.loc 1 739 0
 2848 039d E8000000 		call	arith_encode
 2848      00
 2849              	.LVL382:
 2850 03a2 488B4C24 		movq	72(%rsp), %rcx
 2850      48
 741:fltk-1.3.4-1/jpeg/jcarith.c ****       } else {
 2851              		.loc 1 741 0
 2852 03a7 C7455004 		movl	$4, 80(%rbp)
 2852      000000
 2853              	.L275:
 2854              	.LVL383:
 2855 03ae 4531E4   		xorl	%r12d, %r12d
 750:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st, 1);
 2856              		.loc 1 750 0
 2857 03b1 83EB01   		subl	$1, %ebx
 2858              	.LVL384:
 749:fltk-1.3.4-1/jpeg/jcarith.c ****       if (v -= 1) {
 2859              		.loc 1 749 0
 2860 03b4 C7442448 		movl	$0, 72(%rsp)
 2860      00000000 
 750:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st, 1);
 2861              		.loc 1 750 0
 2862 03bc 0F85C200 		jne	.L336
 2862      0000
 2863              	.LVL385:
 2864              	.L276:
 761:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Section F.1.4.4.1.2: Establish dc_context conditioning category */
 2865              		.loc 1 761 0
 2866 03c2 31D2     		xorl	%edx, %edx
 2867 03c4 4C89EE   		movq	%r13, %rsi
 2868 03c7 4C89FF   		movq	%r15, %rdi
 2869 03ca E8000000 		call	arith_encode
 2869      00
 2870              	.LVL386:
 763:fltk-1.3.4-1/jpeg/jcarith.c **** 	entropy->dc_context[ci] = 0;	/* zero diff category */
 2871              		.loc 1 763 0
 2872 03cf 488B4424 		movq	8(%rsp), %rax
 2872      08
 2873 03d4 BA010000 		movl	$1, %edx
 2873      00
 2874 03d9 410FB68C 		movzbl	224(%r15,%rax), %ecx
 2874      07E00000 
 2874      00
 2875 03e2 4889D0   		movq	%rdx, %rax
 2876 03e5 48D3E0   		salq	%cl, %rax
 2877 03e8 4889C1   		movq	%rax, %rcx
 2878 03eb 48D1F9   		sarq	%rcx
 2879 03ee 394C2448 		cmpl	%ecx, 72(%rsp)
 2880 03f2 7D39     		jge	.L278
 764:fltk-1.3.4-1/jpeg/jcarith.c ****       else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 2881              		.loc 1 764 0
 2882 03f4 C7455000 		movl	$0, 80(%rbp)
 2882      000000
 2883              	.L279:
 769:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st, (m & v) ? 1 : 0);
 2884              		.loc 1 769 0
 2885 03fb 4585E4   		testl	%r12d, %r12d
 768:fltk-1.3.4-1/jpeg/jcarith.c ****       while (m >>= 1)
 2886              		.loc 1 768 0
 2887 03fe 498D6D0E 		leaq	14(%r13), %rbp
 2888              	.LVL387:
 769:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st, (m & v) ? 1 : 0);
 2889              		.loc 1 769 0
 2890 0402 0F84E1FC 		je	.L273
 2890      FFFF
 2891 0408 0F1F8400 		.p2align 4,,10
 2891      00000000 
 2892              		.p2align 3
 2893              	.L316:
 2894              	.LVL388:
 770:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 2895              		.loc 1 770 0
 2896 0410 31D2     		xorl	%edx, %edx
 2897 0412 4485E3   		testl	%r12d, %ebx
 2898 0415 4889EE   		movq	%rbp, %rsi
 2899 0418 0F95C2   		setne	%dl
 2900 041b 4C89FF   		movq	%r15, %rdi
 2901 041e E8000000 		call	arith_encode
 2901      00
 2902              	.LVL389:
 769:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st, (m & v) ? 1 : 0);
 2903              		.loc 1 769 0
 2904 0423 41D1FC   		sarl	%r12d
 2905              	.LVL390:
 2906 0426 75E8     		jne	.L316
 2907 0428 E9BCFCFF 		jmp	.L273
 2907      FF
 2908              	.LVL391:
 2909              	.L278:
 765:fltk-1.3.4-1/jpeg/jcarith.c **** 	entropy->dc_context[ci] += 8;	/* large diff category */
 2910              		.loc 1 765 0
 2911 042d 488B4424 		movq	8(%rsp), %rax
 2911      08
 2912 0432 410FB68C 		movzbl	240(%r15,%rax), %ecx
 2912      07F00000 
 2912      00
 2913 043b 48D3E2   		salq	%cl, %rdx
 2914 043e 48D1FA   		sarq	%rdx
 2915 0441 39542448 		cmpl	%edx, 72(%rsp)
 2916 0445 7EB4     		jle	.L279
 766:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Figure F.9: Encoding the magnitude bit pattern of v */
 2917              		.loc 1 766 0
 2918 0447 83455008 		addl	$8, 80(%rbp)
 2919 044b EBAE     		jmp	.L279
 2920              	.LVL392:
 2921              	.L332:
 784:fltk-1.3.4-1/jpeg/jcarith.c ****       st = entropy->ac_stats[tbl] + 3 * k;
 2922              		.loc 1 784 0
 2923 044d 4531E4   		xorl	%r12d, %r12d
 826:fltk-1.3.4-1/jpeg/jcarith.c ****       st = entropy->ac_stats[tbl] + 3 * k;
 2924              		.loc 1 826 0
 2925 0450 4139CC   		cmpl	%ecx, %r12d
 2926 0453 0F8DD7FD 		jge	.L284
 2926      FFFF
 2927              	.LVL393:
 2928              	.L335:
 827:fltk-1.3.4-1/jpeg/jcarith.c ****       arith_encode(cinfo, st, 1);
 2929              		.loc 1 827 0
 2930 0459 48634424 		movslq	72(%rsp), %rax
 2930      48
 828:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 2931              		.loc 1 828 0
 2932 045e 488B4C24 		movq	64(%rsp), %rcx
 2932      40
 2933 0463 438D3464 		leal	(%r12,%r12,2), %esi
 2934 0467 BA010000 		movl	$1, %edx
 2934      00
 2935 046c 4C89FF   		movq	%r15, %rdi
 2936 046f 4863F6   		movslq	%esi, %rsi
 2937 0472 4803B4C1 		addq	232(%rcx,%rax,8), %rsi
 2937      E8000000 
 2938 047a E8000000 		call	arith_encode
 2938      00
 2939              	.LVL394:
 2940 047f E9ACFDFF 		jmp	.L284
 2940      FF
 2941              	.LVL395:
 2942              	.L336:
 751:fltk-1.3.4-1/jpeg/jcarith.c **** 	m = 1;
 2943              		.loc 1 751 0
 2944 0484 4C89EE   		movq	%r13, %rsi
 2945 0487 BA010000 		movl	$1, %edx
 2945      00
 2946 048c 4C89FF   		movq	%r15, %rdi
 2947 048f 48894C24 		movq	%rcx, 72(%rsp)
 2947      48
 755:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, st, 1);
 2948              		.loc 1 755 0
 2949 0494 4189DC   		movl	%ebx, %r12d
 751:fltk-1.3.4-1/jpeg/jcarith.c **** 	m = 1;
 2950              		.loc 1 751 0
 2951 0497 E8000000 		call	arith_encode
 2951      00
 2952              	.LVL396:
 754:fltk-1.3.4-1/jpeg/jcarith.c **** 	while (v2 >>= 1) {
 2953              		.loc 1 754 0
 2954 049c 488B4C24 		movq	72(%rsp), %rcx
 2954      48
 755:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, st, 1);
 2955              		.loc 1 755 0
 2956 04a1 41D1FC   		sarl	%r12d
 2957              	.LVL397:
 754:fltk-1.3.4-1/jpeg/jcarith.c **** 	while (v2 >>= 1) {
 2958              		.loc 1 754 0
 2959 04a4 488B4168 		movq	104(%rcx), %rax
 2960 04a8 4C8D6814 		leaq	20(%rax), %r13
 2961              	.LVL398:
 755:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, st, 1);
 2962              		.loc 1 755 0
 2963 04ac 0F84D300 		je	.L306
 2963      0000
 2964 04b2 B8010000 		movl	$1, %eax
 2964      00
 2965 04b7 895C2450 		movl	%ebx, 80(%rsp)
 2966 04bb 89C3     		movl	%eax, %ebx
 2967              	.LVL399:
 2968 04bd 4889E8   		movq	%rbp, %rax
 2969 04c0 4C89ED   		movq	%r13, %rbp
 2970 04c3 4989C5   		movq	%rax, %r13
 2971              	.LVL400:
 2972 04c6 662E0F1F 		.p2align 4,,10
 2972      84000000 
 2972      0000
 2973              		.p2align 3
 2974              	.L277:
 756:fltk-1.3.4-1/jpeg/jcarith.c **** 	  m <<= 1;
 2975              		.loc 1 756 0
 2976 04d0 4889EE   		movq	%rbp, %rsi
 2977 04d3 BA010000 		movl	$1, %edx
 2977      00
 2978 04d8 4C89FF   		movq	%r15, %rdi
 2979 04db E8000000 		call	arith_encode
 2979      00
 2980              	.LVL401:
 757:fltk-1.3.4-1/jpeg/jcarith.c **** 	  st += 1;
 2981              		.loc 1 757 0
 2982 04e0 01DB     		addl	%ebx, %ebx
 2983              	.LVL402:
 758:fltk-1.3.4-1/jpeg/jcarith.c **** 	}
 2984              		.loc 1 758 0
 2985 04e2 4883C501 		addq	$1, %rbp
 2986              	.LVL403:
 755:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, st, 1);
 2987              		.loc 1 755 0
 2988 04e6 41D1FC   		sarl	%r12d
 2989              	.LVL404:
 2990 04e9 75E5     		jne	.L277
 2991 04eb 4189DC   		movl	%ebx, %r12d
 2992              	.LVL405:
 2993 04ee 4C89E8   		movq	%r13, %rax
 2994 04f1 895C2448 		movl	%ebx, 72(%rsp)
 2995 04f5 4989ED   		movq	%rbp, %r13
 2996 04f8 8B5C2450 		movl	80(%rsp), %ebx
 2997              	.LVL406:
 2998 04fc 4889C5   		movq	%rax, %rbp
 2999              	.LVL407:
 3000 04ff 41D1FC   		sarl	%r12d
 3001              	.LVL408:
 3002 0502 E9BBFEFF 		jmp	.L276
 3002      FF
 3003              	.LVL409:
 3004              	.L274:
 744:fltk-1.3.4-1/jpeg/jcarith.c **** 	st += 3;			/* Table F.4: SN = S0 + 3 */
 3005              		.loc 1 744 0
 3006 0507 498D7424 		leaq	1(%r12), %rsi
 3006      01
 3007 050c BA010000 		movl	$1, %edx
 3007      00
 3008 0511 4C89FF   		movq	%r15, %rdi
 3009 0514 48894C24 		movq	%rcx, 72(%rsp)
 3009      48
 743:fltk-1.3.4-1/jpeg/jcarith.c **** 	arith_encode(cinfo, st + 1, 1);	/* Table F.4: SS = S0 + 1 */
 3010              		.loc 1 743 0
 3011 0519 F7DB     		negl	%ebx
 3012              	.LVL410:
 745:fltk-1.3.4-1/jpeg/jcarith.c **** 	entropy->dc_context[ci] = 8;	/* small negative diff category */
 3013              		.loc 1 745 0
 3014 051b 4D8D6C24 		leaq	3(%r12), %r13
 3014      03
 744:fltk-1.3.4-1/jpeg/jcarith.c **** 	st += 3;			/* Table F.4: SN = S0 + 3 */
 3015              		.loc 1 744 0
 3016 0520 E8000000 		call	arith_encode
 3016      00
 3017              	.LVL411:
 746:fltk-1.3.4-1/jpeg/jcarith.c ****       }
 3018              		.loc 1 746 0
 3019 0525 C7455008 		movl	$8, 80(%rbp)
 3019      000000
 3020 052c 488B4C24 		movq	72(%rsp), %rcx
 3020      48
 3021 0531 E978FEFF 		jmp	.L275
 3021      FF
 3022              	.LVL412:
 3023              	.L331:
 706:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->restarts_to_go = cinfo->restart_interval;
 3024              		.loc 1 706 0
 3025 0536 4C8B7424 		movq	64(%rsp), %r14
 3025      40
 3026 053b 418B7664 		movl	100(%r14), %esi
 3027 053f E8000000 		call	emit_restart
 3027      00
 3028              	.LVL413:
 709:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 3029              		.loc 1 709 0
 3030 0544 418B7E64 		movl	100(%r14), %edi
 707:fltk-1.3.4-1/jpeg/jcarith.c ****       entropy->next_restart_num++;
 3031              		.loc 1 707 0
 3032 0548 418B873C 		movl	316(%r15), %eax
 3032      010000
 709:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 3033              		.loc 1 709 0
 3034 054f 8D5701   		leal	1(%rdi), %edx
 3035 0552 897C2408 		movl	%edi, 8(%rsp)
 3036 0556 83E207   		andl	$7, %edx
 3037 0559 41895664 		movl	%edx, 100(%r14)
 3038 055d E9D3FAFF 		jmp	.L270
 3038      FF
 3039              	.LVL414:
 3040              	.L294:
 819:fltk-1.3.4-1/jpeg/jcarith.c ****       /* Figure F.9: Encoding the magnitude bit pattern of v */
 3041              		.loc 1 819 0
 3042 0562 31D2     		xorl	%edx, %edx
 3043 0564 4889C6   		movq	%rax, %rsi
 3044 0567 4C89FF   		movq	%r15, %rdi
 3045 056a E8000000 		call	arith_encode
 3045      00
 3046              	.LVL415:
 823:fltk-1.3.4-1/jpeg/jcarith.c ****     }
 3047              		.loc 1 823 0
 3048 056f 89EA     		movl	%ebp, %edx
 3049 0571 488D730E 		leaq	14(%rbx), %rsi
 3050              	.LVL416:
 3051 0575 4C89FF   		movq	%r15, %rdi
 3052 0578 83E201   		andl	$1, %edx
 3053 057b E8000000 		call	arith_encode
 3053      00
 3054              	.LVL417:
 3055 0580 E990FCFF 		jmp	.L297
 3055      FF
 3056              	.LVL418:
 3057              	.L306:
 755:fltk-1.3.4-1/jpeg/jcarith.c **** 	  arith_encode(cinfo, st, 1);
 3058              		.loc 1 755 0
 3059 0585 4531E4   		xorl	%r12d, %r12d
 3060              	.LVL419:
 752:fltk-1.3.4-1/jpeg/jcarith.c **** 	v2 = v;
 3061              		.loc 1 752 0
 3062 0588 C7442448 		movl	$1, 72(%rsp)
 3062      01000000 
 3063 0590 E92DFEFF 		jmp	.L276
 3063      FF
 3064              		.cfi_endproc
 3065              	.LFE69:
 3067              		.section	.text.unlikely.encode_mcu
 3068              	.LCOLDE9:
 3069              		.section	.text.encode_mcu
 3070              	.LHOTE9:
 3071              		.section	.text.unlikely.jinit_arith_encoder,"ax",@progbits
 3072              	.LCOLDB10:
 3073              		.section	.text.jinit_arith_encoder,"ax",@progbits
 3074              	.LHOTB10:
 3075              		.p2align 4,,15
 3076              		.globl	jinit_arith_encoder
 3078              	jinit_arith_encoder:
 3079              	.LFB71:
 917:fltk-1.3.4-1/jpeg/jcarith.c **** 
 918:fltk-1.3.4-1/jpeg/jcarith.c **** 
 919:fltk-1.3.4-1/jpeg/jcarith.c **** /*
 920:fltk-1.3.4-1/jpeg/jcarith.c ****  * Module initialization routine for arithmetic entropy encoding.
 921:fltk-1.3.4-1/jpeg/jcarith.c ****  */
 922:fltk-1.3.4-1/jpeg/jcarith.c **** 
 923:fltk-1.3.4-1/jpeg/jcarith.c **** GLOBAL(void)
 924:fltk-1.3.4-1/jpeg/jcarith.c **** jinit_arith_encoder (j_compress_ptr cinfo)
 925:fltk-1.3.4-1/jpeg/jcarith.c **** {
 3080              		.loc 1 925 0
 3081              		.cfi_startproc
 3082              	.LVL420:
 926:fltk-1.3.4-1/jpeg/jcarith.c ****   arith_entropy_ptr entropy;
 927:fltk-1.3.4-1/jpeg/jcarith.c ****   int i;
 928:fltk-1.3.4-1/jpeg/jcarith.c **** 
 929:fltk-1.3.4-1/jpeg/jcarith.c ****   entropy = (arith_entropy_ptr)
 930:fltk-1.3.4-1/jpeg/jcarith.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 3083              		.loc 1 930 0
 3084 0000 488B4708 		movq	8(%rdi), %rax
 925:fltk-1.3.4-1/jpeg/jcarith.c ****   arith_entropy_ptr entropy;
 3085              		.loc 1 925 0
 3086 0004 53       		pushq	%rbx
 3087              		.cfi_def_cfa_offset 16
 3088              		.cfi_offset 3, -16
 929:fltk-1.3.4-1/jpeg/jcarith.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 3089              		.loc 1 929 0
 3090 0005 BA700100 		movl	$368, %edx
 3090      00
 925:fltk-1.3.4-1/jpeg/jcarith.c ****   arith_entropy_ptr entropy;
 3091              		.loc 1 925 0
 3092 000a 4889FB   		movq	%rdi, %rbx
 929:fltk-1.3.4-1/jpeg/jcarith.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 3093              		.loc 1 929 0
 3094 000d BE010000 		movl	$1, %esi
 3094      00
 3095 0012 FF10     		call	*(%rax)
 3096              	.LVL421:
 3097 0014 488D5068 		leaq	104(%rax), %rdx
 3098 0018 488D88E8 		leaq	232(%rax), %rcx
 3098      000000
 931:fltk-1.3.4-1/jpeg/jcarith.c **** 				SIZEOF(arith_entropy_encoder));
 932:fltk-1.3.4-1/jpeg/jcarith.c ****   cinfo->entropy = &entropy->pub;
 3099              		.loc 1 932 0
 3100 001f 48898330 		movq	%rax, 560(%rbx)
 3100      020000
 933:fltk-1.3.4-1/jpeg/jcarith.c ****   entropy->pub.start_pass = start_pass;
 3101              		.loc 1 933 0
 3102 0026 48C70000 		movq	$start_pass, (%rax)
 3102      000000
 934:fltk-1.3.4-1/jpeg/jcarith.c ****   entropy->pub.finish_pass = finish_pass;
 3103              		.loc 1 934 0
 3104 002d 48C74010 		movq	$finish_pass, 16(%rax)
 3104      00000000 
 3105              	.LVL422:
 3106              		.p2align 4,,10
 3107 0035 0F1F00   		.p2align 3
 3108              	.L338:
 935:fltk-1.3.4-1/jpeg/jcarith.c **** 
 936:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Mark tables unallocated */
 937:fltk-1.3.4-1/jpeg/jcarith.c ****   for (i = 0; i < NUM_ARITH_TBLS; i++) {
 938:fltk-1.3.4-1/jpeg/jcarith.c ****     entropy->dc_stats[i] = NULL;
 3109              		.loc 1 938 0 discriminator 3
 3110 0038 48C70200 		movq	$0, (%rdx)
 3110      000000
 939:fltk-1.3.4-1/jpeg/jcarith.c ****     entropy->ac_stats[i] = NULL;
 3111              		.loc 1 939 0 discriminator 3
 3112 003f 48C78280 		movq	$0, 128(%rdx)
 3112      00000000 
 3112      000000
 3113 004a 4883C208 		addq	$8, %rdx
 937:fltk-1.3.4-1/jpeg/jcarith.c ****     entropy->dc_stats[i] = NULL;
 3114              		.loc 1 937 0 discriminator 3
 3115 004e 4839CA   		cmpq	%rcx, %rdx
 3116 0051 75E5     		jne	.L338
 940:fltk-1.3.4-1/jpeg/jcarith.c ****   }
 941:fltk-1.3.4-1/jpeg/jcarith.c **** 
 942:fltk-1.3.4-1/jpeg/jcarith.c ****   /* Initialize index for fixed probability estimation */
 943:fltk-1.3.4-1/jpeg/jcarith.c ****   entropy->fixed_bin[0] = 113;
 3117              		.loc 1 943 0
 3118 0053 C6806801 		movb	$113, 360(%rax)
 3118      000071
 944:fltk-1.3.4-1/jpeg/jcarith.c **** }
 3119              		.loc 1 944 0
 3120 005a 5B       		popq	%rbx
 3121              		.cfi_def_cfa_offset 8
 3122              	.LVL423:
 3123 005b C3       		ret
 3124              		.cfi_endproc
 3125              	.LFE71:
 3127              		.section	.text.unlikely.jinit_arith_encoder
 3128              	.LCOLDE10:
 3129              		.section	.text.jinit_arith_encoder
 3130              	.LHOTE10:
 3131              		.text
 3132              	.Letext0:
 3133              		.section	.text.unlikely.start_pass
 3134              	.Letext_cold0:
 3135              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 3136              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 3137              		.file 5 "/usr/include/libio.h"
 3138              		.file 6 "fltk-1.3.4-1/jpeg/jmorecfg.h"
 3139              		.file 7 "fltk-1.3.4-1/jpeg/jpeglib.h"
 3140              		.file 8 "fltk-1.3.4-1/jpeg/jpegint.h"
 3141              		.file 9 "fltk-1.3.4-1/jpeg/jerror.h"
 3142              		.file 10 "/usr/include/stdio.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 jcarith.c
     /tmp/cc0O95Pa.s:13     .text.start_pass:0000000000000000 start_pass
     /tmp/cc0O95Pa.s:1143   .text.encode_mcu_DC_first:0000000000000000 encode_mcu_DC_first
     /tmp/cc0O95Pa.s:1484   .text.encode_mcu_AC_first:0000000000000000 encode_mcu_AC_first
     /tmp/cc0O95Pa.s:2423   .text.encode_mcu:0000000000000000 encode_mcu
     /tmp/cc0O95Pa.s:1918   .text.encode_mcu_DC_refine:0000000000000000 encode_mcu_DC_refine
     /tmp/cc0O95Pa.s:2044   .text.encode_mcu_AC_refine:0000000000000000 encode_mcu_AC_refine
     /tmp/cc0O95Pa.s:328    .text.emit_byte:0000000000000000 emit_byte
     /tmp/cc0O95Pa.s:406    .text.finish_pass:0000000000000000 finish_pass
     /tmp/cc0O95Pa.s:679    .text.arith_encode:0000000000000000 arith_encode
     /tmp/cc0O95Pa.s:981    .text.emit_restart:0000000000000000 emit_restart
     /tmp/cc0O95Pa.s:3078   .text.jinit_arith_encoder:0000000000000000 jinit_arith_encoder
                           .group:0000000000000000 wm4.0.cf9695abff4f49bdfe00dc4091904acd
                           .group:0000000000000000 wm4.stdcpredef.h.19.bf2bf6c5fb087dfb5ef2d2297c2795de
                           .group:0000000000000000 wm4.jconfig.h.10.247fc3ff67998f3074970b1373c70333
                           .group:0000000000000000 wm4.features.h.19.24da27e0a4d0d521fd057013d982b8b5
                           .group:0000000000000000 wm4.cdefs.h.19.56613e71f285ebad825b69b151170a81
                           .group:0000000000000000 wm4.wordsize.h.4.256e8fdbd37801980286acdbc40d0280
                           .group:0000000000000000 wm4.cdefs.h.432.619afd0aac7c4b439843706c1b28ddea
                           .group:0000000000000000 wm4.stubs64.h.10.918ceb5fa58268542bf143e4c1efbcf3
                           .group:0000000000000000 wm4.stdlib.h.27.59e2586c75bdbcb991b248ad7257b993
                           .group:0000000000000000 wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1
                           .group:0000000000000000 wm4.waitflags.h.25.e401b8bcfee800b540b27abd7cc78de9
                           .group:0000000000000000 wm4.waitstatus.h.28.93f167f49d64e2b9b99f98d1162a93bf
                           .group:0000000000000000 wm4.endian.h.19.ff00c9c0f5e9f9a9719c5de76ace57b4
                           .group:0000000000000000 wm4.endian.h.41.24cced64aef71195a51d4daa8e4f4a95
                           .group:0000000000000000 wm4.types.h.89.468e2451361e3b92f048f6cad51690ff
                           .group:0000000000000000 wm4.typesizes.h.24.40eb69a6270178f15d1bf3d7b6635a8b
                           .group:0000000000000000 wm4.byteswap.h.38.11ee5fdc0f6cc53a16c505b9233cecef
                           .group:0000000000000000 wm4.endian.h.63.97272d7c64d5db8020003b32e9289502
                           .group:0000000000000000 wm4.waitstatus.h.99.408b6270fa6eb71377201a241ef15f79
                           .group:0000000000000000 wm4.stdlib.h.50.84aeca2ac6f37d40e1e9b3cef757ba2d
                           .group:0000000000000000 wm4.types.h.23.f6dcbaa72f8f71361acef09804d45a5e
                           .group:0000000000000000 wm4.time.h.53.beb46e650cd406cb917b6b96b45e640a
                           .group:0000000000000000 wm4.stddef.h.238.847b6907dabda77be90a9ab7ad789e2e
                           .group:0000000000000000 wm4.types.h.187.bd5a05039b505b3620e6973f1b2ffeb1
                           .group:0000000000000000 wm4.select.h.28.eb2f3debdbcffd1442ebddaebc4fb6ff
                           .group:0000000000000000 wm4.sigset.h.20.f36413b6d2364ad847d3db53fb03e683
                           .group:0000000000000000 wm4.select.h.36.f76c3b9e55c871743863013cc4cc14c9
                           .group:0000000000000000 wm4.time.h.66.e70ce69790c975f0efb369340c432e0b
                           .group:0000000000000000 wm4.time.h.25.ae5284cdff565e87a9198d819340325d
                           .group:0000000000000000 wm4.select.h.49.e9d2041e5035cc68ebd1a20f7dbc8514
                           .group:0000000000000000 wm4.select2.h.27.f95f2ab0ffee66dc1b6575014894b21a
                           .group:0000000000000000 wm4.sysmacros.h.20.8a0c33ff175cd9b434a86c0aaa36f0a2
                           .group:0000000000000000 wm4.types.h.229.67b3f66bd74b06b451caec392a72a945
                           .group:0000000000000000 wm4.pthreadtypes.h.25.6892b1493314fcf446bbc76e7362acba
                           .group:0000000000000000 wm4.alloca.h.19.edefa922a76c1cbaaf1e416903ba2d1c
                           .group:0000000000000000 wm4.alloca.h.29.156e12058824cc23d961c4d3b13031f6
                           .group:0000000000000000 wm4.stdio.h.26.4719156f1aea2bb9662fd6c582dc9a4c
                           .group:0000000000000000 wm4.stddef.h.238.04cc7214bceba497b20d15c10fd97511
                           .group:0000000000000000 wm4.stdio.h.36.2dd12c1fd035242ad5cfd0152a01be5a
                           .group:0000000000000000 wm4._G_config.h.5.b0f37d9e474454cf6e459063458db32f
                           .group:0000000000000000 wm4.wchar.h.80.eea3eba2d2a17aace9470a8e0d8218dc
                           .group:0000000000000000 wm4._G_config.h.46.5187c97b14fd664662cb32e6b94fc49e
                           .group:0000000000000000 wm4.libio.h.33.a775b9ecae273f33bc59931e9891e4ca
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.libio.h.51.dab170798ec1df48c625aea7c30e1b63
                           .group:0000000000000000 wm4.stdio.h.80.17b7dd1ca72d8a61987532cb1d80194a
                           .group:0000000000000000 wm4.stdio_lim.h.23.557290a6cddeba0587f574f29e3a5fb9
                           .group:0000000000000000 wm4.stdio.h.172.df21df34a7396d7da2e08f9b617d582f
                           .group:0000000000000000 wm4.stdio.h.26.cae64f7ada9bb8327a89dba6a5e93655
                           .group:0000000000000000 wm4.string.h.23.8394011d5995a16f15d67d04e84a1d69
                           .group:0000000000000000 wm4.string.h.24.1b0dc67418e7128d207285861439c2f8
                           .group:0000000000000000 wm4.string2.h.45.00535b99420fc3014c2da41d6645330d
                           .group:0000000000000000 wm4.string3.h.31.0c4b9301b754a2db05eaafef869657d2
                           .group:0000000000000000 wm4.jinclude.h.67.b19f941ec97c4845fa4609292c7e2db4
                           .group:0000000000000000 wm4.jmorecfg.h.33.3b4c5f9cc07b3737823b06caf24d5b05
                           .group:0000000000000000 wm4.jpeglib.h.40.4f111c27252a38df39328d65454e82f4
                           .group:0000000000000000 wm4.jpegint.h.26.5219ef5d4e4921371d38e77b6091fd20
                           .group:0000000000000000 wm4.jerror.h.25.1dbd8674e70ab5215bc0037320e5c2a2

UNDEFINED SYMBOLS
jpeg_aritab
