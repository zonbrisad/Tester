   1              		.file	"jdcoefct.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.unlikely.start_input_pass,"ax",@progbits
   5              	.LCOLDB0:
   6              		.section	.text.start_input_pass,"ax",@progbits
   7              	.LHOTB0:
   8              		.p2align 4,,15
   9              		.section	.text.unlikely.start_input_pass
  10              	.Ltext_cold0:
  11              		.section	.text.start_input_pass
  13              	start_input_pass:
  14              	.LFB62:
  15              		.file 1 "fltk-1.3.4-1/jpeg/jdcoefct.c"
   1:fltk-1.3.4-1/jpeg/jdcoefct.c **** /*
   2:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * jdcoefct.c
   3:fltk-1.3.4-1/jpeg/jdcoefct.c ****  *
   4:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * Copyright (C) 1994-1997, Thomas G. Lane.
   5:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * Modified 2002-2011 by Guido Vollbeding.
   6:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * This file is part of the Independent JPEG Group's software.
   7:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * For conditions of distribution and use, see the accompanying README file.
   8:fltk-1.3.4-1/jpeg/jdcoefct.c ****  *
   9:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * This file contains the coefficient buffer controller for decompression.
  10:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * This controller is the top level of the JPEG decompressor proper.
  11:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * The coefficient buffer lies between entropy decoding and inverse-DCT steps.
  12:fltk-1.3.4-1/jpeg/jdcoefct.c ****  *
  13:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * In buffered-image mode, this controller is the interface between
  14:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * input-oriented processing and output-oriented processing.
  15:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * Also, the input side (only) is used when reading a file for transcoding.
  16:fltk-1.3.4-1/jpeg/jdcoefct.c ****  */
  17:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
  18:fltk-1.3.4-1/jpeg/jdcoefct.c **** #define JPEG_INTERNALS
  19:fltk-1.3.4-1/jpeg/jdcoefct.c **** #include "jinclude.h"
  20:fltk-1.3.4-1/jpeg/jdcoefct.c **** #include "jpeglib.h"
  21:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
  22:fltk-1.3.4-1/jpeg/jdcoefct.c **** /* Block smoothing is only applicable for progressive JPEG, so: */
  23:fltk-1.3.4-1/jpeg/jdcoefct.c **** #ifndef D_PROGRESSIVE_SUPPORTED
  24:fltk-1.3.4-1/jpeg/jdcoefct.c **** #undef BLOCK_SMOOTHING_SUPPORTED
  25:fltk-1.3.4-1/jpeg/jdcoefct.c **** #endif
  26:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
  27:fltk-1.3.4-1/jpeg/jdcoefct.c **** /* Private buffer controller object */
  28:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
  29:fltk-1.3.4-1/jpeg/jdcoefct.c **** typedef struct {
  30:fltk-1.3.4-1/jpeg/jdcoefct.c ****   struct jpeg_d_coef_controller pub; /* public fields */
  31:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
  32:fltk-1.3.4-1/jpeg/jdcoefct.c ****   /* These variables keep track of the current location of the input side. */
  33:fltk-1.3.4-1/jpeg/jdcoefct.c ****   /* cinfo->input_iMCU_row is also used for this. */
  34:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JDIMENSION MCU_ctr;		/* counts MCUs processed in current row */
  35:fltk-1.3.4-1/jpeg/jdcoefct.c ****   int MCU_vert_offset;		/* counts MCU rows within iMCU row */
  36:fltk-1.3.4-1/jpeg/jdcoefct.c ****   int MCU_rows_per_iMCU_row;	/* number of such rows needed */
  37:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
  38:fltk-1.3.4-1/jpeg/jdcoefct.c ****   /* The output side's location is represented by cinfo->output_iMCU_row. */
  39:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
  40:fltk-1.3.4-1/jpeg/jdcoefct.c ****   /* In single-pass modes, it's sufficient to buffer just one MCU.
  41:fltk-1.3.4-1/jpeg/jdcoefct.c ****    * We allocate a workspace of D_MAX_BLOCKS_IN_MCU coefficient blocks,
  42:fltk-1.3.4-1/jpeg/jdcoefct.c ****    * and let the entropy decoder write into that workspace each time.
  43:fltk-1.3.4-1/jpeg/jdcoefct.c ****    * (On 80x86, the workspace is FAR even though it's not really very big;
  44:fltk-1.3.4-1/jpeg/jdcoefct.c ****    * this is to keep the module interfaces unchanged when a large coefficient
  45:fltk-1.3.4-1/jpeg/jdcoefct.c ****    * buffer is necessary.)
  46:fltk-1.3.4-1/jpeg/jdcoefct.c ****    * In multi-pass modes, this array points to the current MCU's blocks
  47:fltk-1.3.4-1/jpeg/jdcoefct.c ****    * within the virtual arrays; it is used only by the input side.
  48:fltk-1.3.4-1/jpeg/jdcoefct.c ****    */
  49:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JBLOCKROW MCU_buffer[D_MAX_BLOCKS_IN_MCU];
  50:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
  51:fltk-1.3.4-1/jpeg/jdcoefct.c **** #ifdef D_MULTISCAN_FILES_SUPPORTED
  52:fltk-1.3.4-1/jpeg/jdcoefct.c ****   /* In multi-pass modes, we need a virtual block array for each component. */
  53:fltk-1.3.4-1/jpeg/jdcoefct.c ****   jvirt_barray_ptr whole_image[MAX_COMPONENTS];
  54:fltk-1.3.4-1/jpeg/jdcoefct.c **** #endif
  55:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
  56:fltk-1.3.4-1/jpeg/jdcoefct.c **** #ifdef BLOCK_SMOOTHING_SUPPORTED
  57:fltk-1.3.4-1/jpeg/jdcoefct.c ****   /* When doing block smoothing, we latch coefficient Al values here */
  58:fltk-1.3.4-1/jpeg/jdcoefct.c ****   int * coef_bits_latch;
  59:fltk-1.3.4-1/jpeg/jdcoefct.c **** #define SAVED_COEFS  6		/* we save coef_bits[0..5] */
  60:fltk-1.3.4-1/jpeg/jdcoefct.c **** #endif
  61:fltk-1.3.4-1/jpeg/jdcoefct.c **** } my_coef_controller;
  62:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
  63:fltk-1.3.4-1/jpeg/jdcoefct.c **** typedef my_coef_controller * my_coef_ptr;
  64:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
  65:fltk-1.3.4-1/jpeg/jdcoefct.c **** /* Forward declarations */
  66:fltk-1.3.4-1/jpeg/jdcoefct.c **** METHODDEF(int) decompress_onepass
  67:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	JPP((j_decompress_ptr cinfo, JSAMPIMAGE output_buf));
  68:fltk-1.3.4-1/jpeg/jdcoefct.c **** #ifdef D_MULTISCAN_FILES_SUPPORTED
  69:fltk-1.3.4-1/jpeg/jdcoefct.c **** METHODDEF(int) decompress_data
  70:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	JPP((j_decompress_ptr cinfo, JSAMPIMAGE output_buf));
  71:fltk-1.3.4-1/jpeg/jdcoefct.c **** #endif
  72:fltk-1.3.4-1/jpeg/jdcoefct.c **** #ifdef BLOCK_SMOOTHING_SUPPORTED
  73:fltk-1.3.4-1/jpeg/jdcoefct.c **** LOCAL(boolean) smoothing_ok JPP((j_decompress_ptr cinfo));
  74:fltk-1.3.4-1/jpeg/jdcoefct.c **** METHODDEF(int) decompress_smooth_data
  75:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	JPP((j_decompress_ptr cinfo, JSAMPIMAGE output_buf));
  76:fltk-1.3.4-1/jpeg/jdcoefct.c **** #endif
  77:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
  78:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
  79:fltk-1.3.4-1/jpeg/jdcoefct.c **** LOCAL(void)
  80:fltk-1.3.4-1/jpeg/jdcoefct.c **** start_iMCU_row (j_decompress_ptr cinfo)
  81:fltk-1.3.4-1/jpeg/jdcoefct.c **** /* Reset within-iMCU-row counters for a new row (input side) */
  82:fltk-1.3.4-1/jpeg/jdcoefct.c **** {
  83:fltk-1.3.4-1/jpeg/jdcoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  84:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
  85:fltk-1.3.4-1/jpeg/jdcoefct.c ****   /* In an interleaved scan, an MCU row is the same as an iMCU row.
  86:fltk-1.3.4-1/jpeg/jdcoefct.c ****    * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
  87:fltk-1.3.4-1/jpeg/jdcoefct.c ****    * But at the bottom of the image, process only what's left.
  88:fltk-1.3.4-1/jpeg/jdcoefct.c ****    */
  89:fltk-1.3.4-1/jpeg/jdcoefct.c ****   if (cinfo->comps_in_scan > 1) {
  90:fltk-1.3.4-1/jpeg/jdcoefct.c ****     coef->MCU_rows_per_iMCU_row = 1;
  91:fltk-1.3.4-1/jpeg/jdcoefct.c ****   } else {
  92:fltk-1.3.4-1/jpeg/jdcoefct.c ****     if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
  93:fltk-1.3.4-1/jpeg/jdcoefct.c ****       coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
  94:fltk-1.3.4-1/jpeg/jdcoefct.c ****     else
  95:fltk-1.3.4-1/jpeg/jdcoefct.c ****       coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
  96:fltk-1.3.4-1/jpeg/jdcoefct.c ****   }
  97:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
  98:fltk-1.3.4-1/jpeg/jdcoefct.c ****   coef->MCU_ctr = 0;
  99:fltk-1.3.4-1/jpeg/jdcoefct.c ****   coef->MCU_vert_offset = 0;
 100:fltk-1.3.4-1/jpeg/jdcoefct.c **** }
 101:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 102:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 103:fltk-1.3.4-1/jpeg/jdcoefct.c **** /*
 104:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * Initialize for an input processing pass.
 105:fltk-1.3.4-1/jpeg/jdcoefct.c ****  */
 106:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 107:fltk-1.3.4-1/jpeg/jdcoefct.c **** METHODDEF(void)
 108:fltk-1.3.4-1/jpeg/jdcoefct.c **** start_input_pass (j_decompress_ptr cinfo)
 109:fltk-1.3.4-1/jpeg/jdcoefct.c **** {
  16              		.loc 1 109 0
  17              		.cfi_startproc
  18              	.LVL0:
  19              	.LBB16:
  20              	.LBB17:
  89:fltk-1.3.4-1/jpeg/jdcoefct.c ****     coef->MCU_rows_per_iMCU_row = 1;
  21              		.loc 1 89 0
  22 0000 83BFC001 		cmpl	$1, 448(%rdi)
  22      000001
  23              	.LBE17:
  24              	.LBE16:
 110:fltk-1.3.4-1/jpeg/jdcoefct.c ****   cinfo->input_iMCU_row = 0;
  25              		.loc 1 110 0
  26 0007 C787B000 		movl	$0, 176(%rdi)
  26      00000000 
  26      0000
  27              	.LVL1:
  28              	.LBB19:
  29              	.LBB18:
  83:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
  30              		.loc 1 83 0
  31 0011 488B8750 		movq	592(%rdi), %rax
  31      020000
  32              	.LVL2:
  89:fltk-1.3.4-1/jpeg/jdcoefct.c ****     coef->MCU_rows_per_iMCU_row = 1;
  33              		.loc 1 89 0
  34 0018 7E16     		jle	.L2
  90:fltk-1.3.4-1/jpeg/jdcoefct.c ****   } else {
  35              		.loc 1 90 0
  36 001a C7403001 		movl	$1, 48(%rax)
  36      000000
  98:fltk-1.3.4-1/jpeg/jdcoefct.c ****   coef->MCU_vert_offset = 0;
  37              		.loc 1 98 0
  38 0021 C7402800 		movl	$0, 40(%rax)
  38      000000
  99:fltk-1.3.4-1/jpeg/jdcoefct.c **** }
  39              		.loc 1 99 0
  40 0028 C7402C00 		movl	$0, 44(%rax)
  40      000000
  41              	.LVL3:
  42 002f C3       		ret
  43              	.LVL4:
  44              		.p2align 4,,10
  45              		.p2align 3
  46              	.L2:
  92:fltk-1.3.4-1/jpeg/jdcoefct.c ****       coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
  47              		.loc 1 92 0
  48 0030 83BFB001 		cmpl	$1, 432(%rdi)
  48      000001
  93:fltk-1.3.4-1/jpeg/jdcoefct.c ****     else
  49              		.loc 1 93 0
  50 0037 488B97C8 		movq	456(%rdi), %rdx
  50      010000
  92:fltk-1.3.4-1/jpeg/jdcoefct.c ****       coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
  51              		.loc 1 92 0
  52 003e 7518     		jne	.L6
  95:fltk-1.3.4-1/jpeg/jdcoefct.c ****   }
  53              		.loc 1 95 0
  54 0040 8B524C   		movl	76(%rdx), %edx
  98:fltk-1.3.4-1/jpeg/jdcoefct.c ****   coef->MCU_vert_offset = 0;
  55              		.loc 1 98 0
  56 0043 C7402800 		movl	$0, 40(%rax)
  56      000000
  99:fltk-1.3.4-1/jpeg/jdcoefct.c **** }
  57              		.loc 1 99 0
  58 004a C7402C00 		movl	$0, 44(%rax)
  58      000000
  59              	.LVL5:
  95:fltk-1.3.4-1/jpeg/jdcoefct.c ****   }
  60              		.loc 1 95 0
  61 0051 895030   		movl	%edx, 48(%rax)
  99:fltk-1.3.4-1/jpeg/jdcoefct.c **** }
  62              		.loc 1 99 0
  63 0054 C3       		ret
  64              	.LVL6:
  65              		.p2align 4,,10
  66 0055 0F1F00   		.p2align 3
  67              	.L6:
  93:fltk-1.3.4-1/jpeg/jdcoefct.c ****     else
  68              		.loc 1 93 0
  69 0058 8B520C   		movl	12(%rdx), %edx
  98:fltk-1.3.4-1/jpeg/jdcoefct.c ****   coef->MCU_vert_offset = 0;
  70              		.loc 1 98 0
  71 005b C7402800 		movl	$0, 40(%rax)
  71      000000
  99:fltk-1.3.4-1/jpeg/jdcoefct.c **** }
  72              		.loc 1 99 0
  73 0062 C7402C00 		movl	$0, 44(%rax)
  73      000000
  74              	.LVL7:
  93:fltk-1.3.4-1/jpeg/jdcoefct.c ****     else
  75              		.loc 1 93 0
  76 0069 895030   		movl	%edx, 48(%rax)
  99:fltk-1.3.4-1/jpeg/jdcoefct.c **** }
  77              		.loc 1 99 0
  78 006c C3       		ret
  79              	.LBE18:
  80              	.LBE19:
  81              		.cfi_endproc
  82              	.LFE62:
  84              		.section	.text.unlikely.start_input_pass
  85              	.LCOLDE0:
  86              		.section	.text.start_input_pass
  87              	.LHOTE0:
  88              		.section	.text.unlikely.dummy_consume_data,"ax",@progbits
  89              	.LCOLDB1:
  90              		.section	.text.dummy_consume_data,"ax",@progbits
  91              	.LHOTB1:
  92              		.p2align 4,,15
  94              	dummy_consume_data:
  95              	.LFB65:
 111:fltk-1.3.4-1/jpeg/jdcoefct.c ****   start_iMCU_row(cinfo);
 112:fltk-1.3.4-1/jpeg/jdcoefct.c **** }
 113:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 114:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 115:fltk-1.3.4-1/jpeg/jdcoefct.c **** /*
 116:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * Initialize for an output processing pass.
 117:fltk-1.3.4-1/jpeg/jdcoefct.c ****  */
 118:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 119:fltk-1.3.4-1/jpeg/jdcoefct.c **** METHODDEF(void)
 120:fltk-1.3.4-1/jpeg/jdcoefct.c **** start_output_pass (j_decompress_ptr cinfo)
 121:fltk-1.3.4-1/jpeg/jdcoefct.c **** {
 122:fltk-1.3.4-1/jpeg/jdcoefct.c **** #ifdef BLOCK_SMOOTHING_SUPPORTED
 123:fltk-1.3.4-1/jpeg/jdcoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 124:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 125:fltk-1.3.4-1/jpeg/jdcoefct.c ****   /* If multipass, check to see whether to use block smoothing on this pass */
 126:fltk-1.3.4-1/jpeg/jdcoefct.c ****   if (coef->pub.coef_arrays != NULL) {
 127:fltk-1.3.4-1/jpeg/jdcoefct.c ****     if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 128:fltk-1.3.4-1/jpeg/jdcoefct.c ****       coef->pub.decompress_data = decompress_smooth_data;
 129:fltk-1.3.4-1/jpeg/jdcoefct.c ****     else
 130:fltk-1.3.4-1/jpeg/jdcoefct.c ****       coef->pub.decompress_data = decompress_data;
 131:fltk-1.3.4-1/jpeg/jdcoefct.c ****   }
 132:fltk-1.3.4-1/jpeg/jdcoefct.c **** #endif
 133:fltk-1.3.4-1/jpeg/jdcoefct.c ****   cinfo->output_iMCU_row = 0;
 134:fltk-1.3.4-1/jpeg/jdcoefct.c **** }
 135:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 136:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 137:fltk-1.3.4-1/jpeg/jdcoefct.c **** /*
 138:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * Decompress and return some data in the single-pass case.
 139:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * Always attempts to emit one fully interleaved MCU row ("iMCU" row).
 140:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * Input and output must run in lockstep since we have only a one-MCU buffer.
 141:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 142:fltk-1.3.4-1/jpeg/jdcoefct.c ****  *
 143:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * NB: output_buf contains a plane for each component in image,
 144:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * which we index according to the component's SOF position.
 145:fltk-1.3.4-1/jpeg/jdcoefct.c ****  */
 146:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 147:fltk-1.3.4-1/jpeg/jdcoefct.c **** METHODDEF(int)
 148:fltk-1.3.4-1/jpeg/jdcoefct.c **** decompress_onepass (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
 149:fltk-1.3.4-1/jpeg/jdcoefct.c **** {
 150:fltk-1.3.4-1/jpeg/jdcoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 151:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JDIMENSION MCU_col_num;	/* index of current MCU within row */
 152:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 153:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 154:fltk-1.3.4-1/jpeg/jdcoefct.c ****   int blkn, ci, xindex, yindex, yoffset, useful_width;
 155:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JSAMPARRAY output_ptr;
 156:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JDIMENSION start_col, output_col;
 157:fltk-1.3.4-1/jpeg/jdcoefct.c ****   jpeg_component_info *compptr;
 158:fltk-1.3.4-1/jpeg/jdcoefct.c ****   inverse_DCT_method_ptr inverse_DCT;
 159:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 160:fltk-1.3.4-1/jpeg/jdcoefct.c ****   /* Loop to process as much as one whole iMCU row */
 161:fltk-1.3.4-1/jpeg/jdcoefct.c ****   for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 162:fltk-1.3.4-1/jpeg/jdcoefct.c ****        yoffset++) {
 163:fltk-1.3.4-1/jpeg/jdcoefct.c ****     for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 164:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	 MCU_col_num++) {
 165:fltk-1.3.4-1/jpeg/jdcoefct.c ****       /* Try to fetch an MCU.  Entropy decoder expects buffer to be zeroed. */
 166:fltk-1.3.4-1/jpeg/jdcoefct.c ****       if (cinfo->lim_Se)	/* can bypass in DC only case */
 167:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	FMEMZERO((void FAR *) coef->MCU_buffer[0],
 168:fltk-1.3.4-1/jpeg/jdcoefct.c **** 		 (size_t) (cinfo->blocks_in_MCU * SIZEOF(JBLOCK)));
 169:fltk-1.3.4-1/jpeg/jdcoefct.c ****       if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 170:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	/* Suspension forced; update state counters and exit */
 171:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	coef->MCU_vert_offset = yoffset;
 172:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	coef->MCU_ctr = MCU_col_num;
 173:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	return JPEG_SUSPENDED;
 174:fltk-1.3.4-1/jpeg/jdcoefct.c ****       }
 175:fltk-1.3.4-1/jpeg/jdcoefct.c ****       /* Determine where data should go in output_buf and do the IDCT thing.
 176:fltk-1.3.4-1/jpeg/jdcoefct.c ****        * We skip dummy blocks at the right and bottom edges (but blkn gets
 177:fltk-1.3.4-1/jpeg/jdcoefct.c ****        * incremented past them!).  Note the inner loop relies on having
 178:fltk-1.3.4-1/jpeg/jdcoefct.c ****        * allocated the MCU_buffer[] blocks sequentially.
 179:fltk-1.3.4-1/jpeg/jdcoefct.c ****        */
 180:fltk-1.3.4-1/jpeg/jdcoefct.c ****       blkn = 0;			/* index of current DCT block within MCU */
 181:fltk-1.3.4-1/jpeg/jdcoefct.c ****       for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 182:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	compptr = cinfo->cur_comp_info[ci];
 183:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	/* Don't bother to IDCT an uninteresting component. */
 184:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	if (! compptr->component_needed) {
 185:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  blkn += compptr->MCU_blocks;
 186:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  continue;
 187:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	}
 188:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 189:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	useful_width = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
 190:fltk-1.3.4-1/jpeg/jdcoefct.c **** 						    : compptr->last_col_width;
 191:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	output_ptr = output_buf[compptr->component_index] +
 192:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  yoffset * compptr->DCT_v_scaled_size;
 193:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	start_col = MCU_col_num * compptr->MCU_sample_width;
 194:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 195:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 196:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      yoffset+yindex < compptr->last_row_height) {
 197:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    output_col = start_col;
 198:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    for (xindex = 0; xindex < useful_width; xindex++) {
 199:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      (*inverse_DCT) (cinfo, compptr,
 200:fltk-1.3.4-1/jpeg/jdcoefct.c **** 			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 201:fltk-1.3.4-1/jpeg/jdcoefct.c **** 			      output_ptr, output_col);
 202:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      output_col += compptr->DCT_h_scaled_size;
 203:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    }
 204:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  }
 205:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  blkn += compptr->MCU_width;
 206:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  output_ptr += compptr->DCT_v_scaled_size;
 207:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	}
 208:fltk-1.3.4-1/jpeg/jdcoefct.c ****       }
 209:fltk-1.3.4-1/jpeg/jdcoefct.c ****     }
 210:fltk-1.3.4-1/jpeg/jdcoefct.c ****     /* Completed an MCU row, but perhaps not an iMCU row */
 211:fltk-1.3.4-1/jpeg/jdcoefct.c ****     coef->MCU_ctr = 0;
 212:fltk-1.3.4-1/jpeg/jdcoefct.c ****   }
 213:fltk-1.3.4-1/jpeg/jdcoefct.c ****   /* Completed the iMCU row, advance counters for next one */
 214:fltk-1.3.4-1/jpeg/jdcoefct.c ****   cinfo->output_iMCU_row++;
 215:fltk-1.3.4-1/jpeg/jdcoefct.c ****   if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 216:fltk-1.3.4-1/jpeg/jdcoefct.c ****     start_iMCU_row(cinfo);
 217:fltk-1.3.4-1/jpeg/jdcoefct.c ****     return JPEG_ROW_COMPLETED;
 218:fltk-1.3.4-1/jpeg/jdcoefct.c ****   }
 219:fltk-1.3.4-1/jpeg/jdcoefct.c ****   /* Completed the scan */
 220:fltk-1.3.4-1/jpeg/jdcoefct.c ****   (*cinfo->inputctl->finish_input_pass) (cinfo);
 221:fltk-1.3.4-1/jpeg/jdcoefct.c ****   return JPEG_SCAN_COMPLETED;
 222:fltk-1.3.4-1/jpeg/jdcoefct.c **** }
 223:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 224:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 225:fltk-1.3.4-1/jpeg/jdcoefct.c **** /*
 226:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * Dummy consume-input routine for single-pass operation.
 227:fltk-1.3.4-1/jpeg/jdcoefct.c ****  */
 228:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 229:fltk-1.3.4-1/jpeg/jdcoefct.c **** METHODDEF(int)
 230:fltk-1.3.4-1/jpeg/jdcoefct.c **** dummy_consume_data (j_decompress_ptr cinfo)
 231:fltk-1.3.4-1/jpeg/jdcoefct.c **** {
  96              		.loc 1 231 0
  97              		.cfi_startproc
  98              	.LVL8:
 232:fltk-1.3.4-1/jpeg/jdcoefct.c ****   return JPEG_SUSPENDED;	/* Always indicate nothing was done */
 233:fltk-1.3.4-1/jpeg/jdcoefct.c **** }
  99              		.loc 1 233 0
 100 0000 31C0     		xorl	%eax, %eax
 101 0002 C3       		ret
 102              		.cfi_endproc
 103              	.LFE65:
 105              		.section	.text.unlikely.dummy_consume_data
 106              	.LCOLDE1:
 107              		.section	.text.dummy_consume_data
 108              	.LHOTE1:
 109              		.section	.text.unlikely.consume_data,"ax",@progbits
 110              	.LCOLDB2:
 111              		.section	.text.consume_data,"ax",@progbits
 112              	.LHOTB2:
 113              		.p2align 4,,15
 115              	consume_data:
 116              	.LFB66:
 234:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 235:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 236:fltk-1.3.4-1/jpeg/jdcoefct.c **** #ifdef D_MULTISCAN_FILES_SUPPORTED
 237:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 238:fltk-1.3.4-1/jpeg/jdcoefct.c **** /*
 239:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * Consume input data and store it in the full-image coefficient buffer.
 240:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * We read as much as one fully interleaved MCU row ("iMCU" row) per call,
 241:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * ie, v_samp_factor block rows for each component in the scan.
 242:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 243:fltk-1.3.4-1/jpeg/jdcoefct.c ****  */
 244:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 245:fltk-1.3.4-1/jpeg/jdcoefct.c **** METHODDEF(int)
 246:fltk-1.3.4-1/jpeg/jdcoefct.c **** consume_data (j_decompress_ptr cinfo)
 247:fltk-1.3.4-1/jpeg/jdcoefct.c **** {
 117              		.loc 1 247 0
 118              		.cfi_startproc
 119              	.LVL9:
 120 0000 4157     		pushq	%r15
 121              		.cfi_def_cfa_offset 16
 122              		.cfi_offset 15, -16
 123 0002 4156     		pushq	%r14
 124              		.cfi_def_cfa_offset 24
 125              		.cfi_offset 14, -24
 126 0004 4155     		pushq	%r13
 127              		.cfi_def_cfa_offset 32
 128              		.cfi_offset 13, -32
 129 0006 4154     		pushq	%r12
 130              		.cfi_def_cfa_offset 40
 131              		.cfi_offset 12, -40
 248:fltk-1.3.4-1/jpeg/jdcoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 249:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JDIMENSION MCU_col_num;	/* index of current MCU within row */
 250:fltk-1.3.4-1/jpeg/jdcoefct.c ****   int blkn, ci, xindex, yindex, yoffset;
 251:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JDIMENSION start_col;
 252:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
 253:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JBLOCKROW buffer_ptr;
 254:fltk-1.3.4-1/jpeg/jdcoefct.c ****   jpeg_component_info *compptr;
 255:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 256:fltk-1.3.4-1/jpeg/jdcoefct.c ****   /* Align the virtual buffers for the components used in this scan. */
 257:fltk-1.3.4-1/jpeg/jdcoefct.c ****   for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 132              		.loc 1 257 0
 133 0008 4531ED   		xorl	%r13d, %r13d
 247:fltk-1.3.4-1/jpeg/jdcoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 134              		.loc 1 247 0
 135 000b 55       		pushq	%rbp
 136              		.cfi_def_cfa_offset 48
 137              		.cfi_offset 6, -48
 138 000c 53       		pushq	%rbx
 139              		.cfi_def_cfa_offset 56
 140              		.cfi_offset 3, -56
 141              		.loc 1 257 0
 142 000d 4531E4   		xorl	%r12d, %r12d
 247:fltk-1.3.4-1/jpeg/jdcoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 143              		.loc 1 247 0
 144 0010 4889FD   		movq	%rdi, %rbp
 145 0013 4883EC48 		subq	$72, %rsp
 146              		.cfi_def_cfa_offset 128
 147              		.loc 1 257 0
 148 0017 448B87C0 		movl	448(%rdi), %r8d
 148      010000
 248:fltk-1.3.4-1/jpeg/jdcoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 149              		.loc 1 248 0
 150 001e 488B9F50 		movq	592(%rdi), %rbx
 150      020000
 151              	.LVL10:
 247:fltk-1.3.4-1/jpeg/jdcoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 152              		.loc 1 247 0
 153 0025 64488B04 		movq	%fs:40, %rax
 153      25280000 
 153      00
 154 002e 48894424 		movq	%rax, 56(%rsp)
 154      38
 155 0033 31C0     		xorl	%eax, %eax
 156              		.loc 1 257 0
 157 0035 4585C0   		testl	%r8d, %r8d
 158 0038 7E46     		jle	.L13
 159              	.LVL11:
 160              	.L12:
 258:fltk-1.3.4-1/jpeg/jdcoefct.c ****     compptr = cinfo->cur_comp_info[ci];
 161              		.loc 1 258 0 discriminator 3
 162 003a 4A8B8425 		movq	456(%rbp,%r12), %rax
 162      C8010000 
 163              	.LVL12:
 259:fltk-1.3.4-1/jpeg/jdcoefct.c ****     buffer[ci] = (*cinfo->mem->access_virt_barray)
 164              		.loc 1 259 0 discriminator 3
 165 0042 8B95B000 		movl	176(%rbp), %edx
 165      0000
 166 0048 41B80100 		movl	$1, %r8d
 166      0000
 167 004e 4889EF   		movq	%rbp, %rdi
 257:fltk-1.3.4-1/jpeg/jdcoefct.c ****     compptr = cinfo->cur_comp_info[ci];
 168              		.loc 1 257 0 discriminator 3
 169 0051 4183C501 		addl	$1, %r13d
 170              	.LVL13:
 171              		.loc 1 259 0 discriminator 3
 172 0055 8B480C   		movl	12(%rax), %ecx
 173 0058 48634004 		movslq	4(%rax), %rax
 174              	.LVL14:
 175 005c 0FAFD1   		imull	%ecx, %edx
 176 005f 488BB4C3 		movq	136(%rbx,%rax,8), %rsi
 176      88000000 
 177 0067 488B4508 		movq	8(%rbp), %rax
 178 006b FF5040   		call	*64(%rax)
 179              	.LVL15:
 180 006e 4A894424 		movq	%rax, 16(%rsp,%r12)
 180      10
 181 0073 4983C408 		addq	$8, %r12
 257:fltk-1.3.4-1/jpeg/jdcoefct.c ****     compptr = cinfo->cur_comp_info[ci];
 182              		.loc 1 257 0 discriminator 3
 183 0077 4439ADC0 		cmpl	%r13d, 448(%rbp)
 183      010000
 184 007e 7FBA     		jg	.L12
 185              	.LVL16:
 186              	.L13:
 260:fltk-1.3.4-1/jpeg/jdcoefct.c ****       ((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
 261:fltk-1.3.4-1/jpeg/jdcoefct.c ****        cinfo->input_iMCU_row * compptr->v_samp_factor,
 262:fltk-1.3.4-1/jpeg/jdcoefct.c ****        (JDIMENSION) compptr->v_samp_factor, TRUE);
 263:fltk-1.3.4-1/jpeg/jdcoefct.c ****     /* Note: entropy decoder expects buffer to be zeroed,
 264:fltk-1.3.4-1/jpeg/jdcoefct.c ****      * but this is handled automatically by the memory manager
 265:fltk-1.3.4-1/jpeg/jdcoefct.c ****      * because we requested a pre-zeroed array.
 266:fltk-1.3.4-1/jpeg/jdcoefct.c ****      */
 267:fltk-1.3.4-1/jpeg/jdcoefct.c ****   }
 268:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 269:fltk-1.3.4-1/jpeg/jdcoefct.c ****   /* Loop to process one whole iMCU row */
 270:fltk-1.3.4-1/jpeg/jdcoefct.c ****   for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 187              		.loc 1 270 0
 188 0080 8B432C   		movl	44(%rbx), %eax
 189 0083 3B4330   		cmpl	48(%rbx), %eax
 190 0086 89442404 		movl	%eax, 4(%rsp)
 191              	.LVL17:
 192 008a 0F8D0001 		jge	.L11
 192      0000
 193 0090 4C636C24 		movslq	4(%rsp), %r13
 193      04
 194 0095 488D4338 		leaq	56(%rbx), %rax
 195              	.LVL18:
 196 0099 448B6328 		movl	40(%rbx), %r12d
 197 009d 48894424 		movq	%rax, 8(%rsp)
 197      08
 198              	.LVL19:
 199 00a2 49C1E503 		salq	$3, %r13
 200              	.LVL20:
 201              	.L42:
 271:fltk-1.3.4-1/jpeg/jdcoefct.c ****        yoffset++) {
 272:fltk-1.3.4-1/jpeg/jdcoefct.c ****     for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
 202              		.loc 1 272 0
 203 00a6 4439A5E8 		cmpl	%r12d, 488(%rbp)
 203      010000
 204 00ad 0F86BD00 		jbe	.L16
 204      0000
 205              	.L45:
 206              	.LVL21:
 273:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	 MCU_col_num++) {
 274:fltk-1.3.4-1/jpeg/jdcoefct.c ****       /* Construct list of pointers to DCT blocks belonging to this MCU */
 275:fltk-1.3.4-1/jpeg/jdcoefct.c ****       blkn = 0;			/* index of current DCT block within MCU */
 276:fltk-1.3.4-1/jpeg/jdcoefct.c ****       for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 207              		.loc 1 276 0 discriminator 1
 208 00b3 8B85C001 		movl	448(%rbp), %eax
 208      0000
 209 00b9 85C0     		testl	%eax, %eax
 210 00bb 0F8E8800 		jle	.L26
 210      0000
 211              		.loc 1 276 0 is_stmt 0
 212 00c1 4531DB   		xorl	%r11d, %r11d
 213 00c4 4531F6   		xorl	%r14d, %r14d
 214 00c7 31C0     		xorl	%eax, %eax
 215              	.LVL22:
 216              	.L22:
 277:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	compptr = cinfo->cur_comp_info[ci];
 217              		.loc 1 277 0 is_stmt 1
 218 00c9 4A8BB41D 		movq	456(%rbp,%r11), %rsi
 218      C8010000 
 219              	.LVL23:
 278:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	start_col = MCU_col_num * compptr->MCU_width;
 220              		.loc 1 278 0
 221 00d1 8B5638   		movl	56(%rsi), %edx
 279:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 222              		.loc 1 279 0
 223 00d4 8B7E3C   		movl	60(%rsi), %edi
 278:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	start_col = MCU_col_num * compptr->MCU_width;
 224              		.loc 1 278 0
 225 00d7 89D1     		movl	%edx, %ecx
 226 00d9 410FAFCC 		imull	%r12d, %ecx
 227              	.LVL24:
 228              		.loc 1 279 0
 229 00dd 85FF     		testl	%edi, %edi
 230 00df 7E57     		jle	.L18
 231 00e1 4D89E8   		movq	%r13, %r8
 232 00e4 4E03441C 		addq	16(%rsp,%r11), %r8
 232      10
 233 00e9 4189CA   		movl	%ecx, %r10d
 234 00ec 49C1E207 		salq	$7, %r10
 235 00f0 89C7     		movl	%eax, %edi
 236 00f2 4531C9   		xorl	%r9d, %r9d
 237              	.LVL25:
 238              		.p2align 4,,10
 239 00f5 0F1F00   		.p2align 3
 240              	.L21:
 280:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 241              		.loc 1 280 0
 242 00f8 4C89D1   		movq	%r10, %rcx
 243 00fb 490308   		addq	(%r8), %rcx
 244              	.LVL26:
 281:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 245              		.loc 1 281 0
 246 00fe 85D2     		testl	%edx, %edx
 247 0100 7E21     		jle	.L19
 248              		.loc 1 281 0 is_stmt 0 discriminator 3
 249 0102 4863D0   		movslq	%eax, %rdx
 250              	.LVL27:
 251              		.p2align 4,,10
 252 0105 0F1F00   		.p2align 3
 253              	.L20:
 282:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    coef->MCU_buffer[blkn++] = buffer_ptr++;
 254              		.loc 1 282 0 is_stmt 1 discriminator 3
 255 0108 83C001   		addl	$1, %eax
 256              	.LVL28:
 257 010b 48894CD3 		movq	%rcx, 56(%rbx,%rdx,8)
 257      38
 258              	.LVL29:
 259 0110 4883E980 		subq	$-128, %rcx
 260              	.LVL30:
 281:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 261              		.loc 1 281 0 discriminator 3
 262 0114 4189C7   		movl	%eax, %r15d
 263              		.loc 1 282 0 discriminator 3
 264 0117 4863D0   		movslq	%eax, %rdx
 281:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 265              		.loc 1 281 0 discriminator 3
 266 011a 4129FF   		subl	%edi, %r15d
 267              	.LVL31:
 268 011d 44397E38 		cmpl	%r15d, 56(%rsi)
 269 0121 7FE5     		jg	.L20
 270              	.LVL32:
 271              	.L19:
 279:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 272              		.loc 1 279 0 discriminator 2
 273 0123 4183C101 		addl	$1, %r9d
 274              	.LVL33:
 275 0127 4983C008 		addq	$8, %r8
 276 012b 44394E3C 		cmpl	%r9d, 60(%rsi)
 277 012f 7E07     		jle	.L18
 278 0131 8B5638   		movl	56(%rsi), %edx
 279:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 279              		.loc 1 279 0 is_stmt 0
 280 0134 89C7     		movl	%eax, %edi
 281 0136 EBC0     		jmp	.L21
 282              	.LVL34:
 283              	.L18:
 276:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	compptr = cinfo->cur_comp_info[ci];
 284              		.loc 1 276 0 is_stmt 1 discriminator 2
 285 0138 4183C601 		addl	$1, %r14d
 286              	.LVL35:
 287 013c 4983C308 		addq	$8, %r11
 288 0140 4439B5C0 		cmpl	%r14d, 448(%rbp)
 288      010000
 289 0147 7F80     		jg	.L22
 290              	.LVL36:
 291              	.L26:
 283:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  }
 284:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	}
 285:fltk-1.3.4-1/jpeg/jdcoefct.c ****       }
 286:fltk-1.3.4-1/jpeg/jdcoefct.c ****       /* Try to fetch the MCU. */
 287:fltk-1.3.4-1/jpeg/jdcoefct.c ****       if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 292              		.loc 1 287 0
 293 0149 488B8570 		movq	624(%rbp), %rax
 293      020000
 294 0150 488B7424 		movq	8(%rsp), %rsi
 294      08
 295 0155 4889EF   		movq	%rbp, %rdi
 296 0158 FF5008   		call	*8(%rax)
 297              	.LVL37:
 298 015b 85C0     		testl	%eax, %eax
 299 015d 7479     		je	.L44
 273:fltk-1.3.4-1/jpeg/jdcoefct.c ****       /* Construct list of pointers to DCT blocks belonging to this MCU */
 300              		.loc 1 273 0
 301 015f 4183C401 		addl	$1, %r12d
 302              	.LVL38:
 272:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	 MCU_col_num++) {
 303              		.loc 1 272 0
 304 0163 4439A5E8 		cmpl	%r12d, 488(%rbp)
 304      010000
 305 016a 0F8743FF 		ja	.L45
 305      FFFF
 306              	.L16:
 271:fltk-1.3.4-1/jpeg/jdcoefct.c ****     for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
 307              		.loc 1 271 0
 308 0170 83442404 		addl	$1, 4(%rsp)
 308      01
 309 0175 4983C508 		addq	$8, %r13
 310 0179 4531E4   		xorl	%r12d, %r12d
 311              	.LVL39:
 312 017c 8B442404 		movl	4(%rsp), %eax
 313              	.LVL40:
 270:fltk-1.3.4-1/jpeg/jdcoefct.c ****        yoffset++) {
 314              		.loc 1 270 0
 315 0180 394330   		cmpl	%eax, 48(%rbx)
 288:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	/* Suspension forced; update state counters and exit */
 289:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	coef->MCU_vert_offset = yoffset;
 290:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	coef->MCU_ctr = MCU_col_num;
 291:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	return JPEG_SUSPENDED;
 292:fltk-1.3.4-1/jpeg/jdcoefct.c ****       }
 293:fltk-1.3.4-1/jpeg/jdcoefct.c ****     }
 294:fltk-1.3.4-1/jpeg/jdcoefct.c ****     /* Completed an MCU row, but perhaps not an iMCU row */
 295:fltk-1.3.4-1/jpeg/jdcoefct.c ****     coef->MCU_ctr = 0;
 316              		.loc 1 295 0
 317 0183 C7432800 		movl	$0, 40(%rbx)
 317      000000
 270:fltk-1.3.4-1/jpeg/jdcoefct.c ****        yoffset++) {
 318              		.loc 1 270 0
 319 018a 0F8F16FF 		jg	.L42
 319      FFFF
 320              	.L11:
 296:fltk-1.3.4-1/jpeg/jdcoefct.c ****   }
 297:fltk-1.3.4-1/jpeg/jdcoefct.c ****   /* Completed the iMCU row, advance counters for next one */
 298:fltk-1.3.4-1/jpeg/jdcoefct.c ****   if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 321              		.loc 1 298 0
 322 0190 8B85B000 		movl	176(%rbp), %eax
 322      0000
 323              	.LVL41:
 324 0196 8B8DB001 		movl	432(%rbp), %ecx
 324      0000
 325 019c 8D5001   		leal	1(%rax), %edx
 326 019f 39CA     		cmpl	%ecx, %edx
 327 01a1 8995B000 		movl	%edx, 176(%rbp)
 327      0000
 328 01a7 7376     		jnb	.L46
 329              	.LVL42:
 330              	.LBB20:
 331              	.LBB21:
  89:fltk-1.3.4-1/jpeg/jdcoefct.c ****     coef->MCU_rows_per_iMCU_row = 1;
 332              		.loc 1 89 0
 333 01a9 83BDC001 		cmpl	$1, 448(%rbp)
 333      000001
  83:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 334              		.loc 1 83 0
 335 01b0 488B8550 		movq	592(%rbp), %rax
 335      020000
 336              	.LVL43:
  89:fltk-1.3.4-1/jpeg/jdcoefct.c ****     coef->MCU_rows_per_iMCU_row = 1;
 337              		.loc 1 89 0
 338 01b7 7E50     		jle	.L28
  90:fltk-1.3.4-1/jpeg/jdcoefct.c ****   } else {
 339              		.loc 1 90 0
 340 01b9 C7403001 		movl	$1, 48(%rax)
 340      000000
 341              	.L29:
  98:fltk-1.3.4-1/jpeg/jdcoefct.c ****   coef->MCU_vert_offset = 0;
 342              		.loc 1 98 0
 343 01c0 C7402800 		movl	$0, 40(%rax)
 343      000000
  99:fltk-1.3.4-1/jpeg/jdcoefct.c **** }
 344              		.loc 1 99 0
 345 01c7 C7402C00 		movl	$0, 44(%rax)
 345      000000
 346              	.LVL44:
 347              	.LBE21:
 348              	.LBE20:
 299:fltk-1.3.4-1/jpeg/jdcoefct.c ****     start_iMCU_row(cinfo);
 300:fltk-1.3.4-1/jpeg/jdcoefct.c ****     return JPEG_ROW_COMPLETED;
 349              		.loc 1 300 0
 350 01ce B8030000 		movl	$3, %eax
 350      00
 351 01d3 EB10     		jmp	.L24
 352              	.LVL45:
 353              		.p2align 4,,10
 354 01d5 0F1F00   		.p2align 3
 355              	.L44:
 289:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	coef->MCU_ctr = MCU_col_num;
 356              		.loc 1 289 0
 357 01d8 8B442404 		movl	4(%rsp), %eax
 290:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	return JPEG_SUSPENDED;
 358              		.loc 1 290 0
 359 01dc 44896328 		movl	%r12d, 40(%rbx)
 289:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	coef->MCU_ctr = MCU_col_num;
 360              		.loc 1 289 0
 361 01e0 89432C   		movl	%eax, 44(%rbx)
 291:fltk-1.3.4-1/jpeg/jdcoefct.c ****       }
 362              		.loc 1 291 0
 363 01e3 31C0     		xorl	%eax, %eax
 364              	.LVL46:
 365              	.L24:
 301:fltk-1.3.4-1/jpeg/jdcoefct.c ****   }
 302:fltk-1.3.4-1/jpeg/jdcoefct.c ****   /* Completed the scan */
 303:fltk-1.3.4-1/jpeg/jdcoefct.c ****   (*cinfo->inputctl->finish_input_pass) (cinfo);
 304:fltk-1.3.4-1/jpeg/jdcoefct.c ****   return JPEG_SCAN_COMPLETED;
 305:fltk-1.3.4-1/jpeg/jdcoefct.c **** }
 366              		.loc 1 305 0
 367 01e5 488B7C24 		movq	56(%rsp), %rdi
 367      38
 368 01ea 6448333C 		xorq	%fs:40, %rdi
 368      25280000 
 368      00
 369 01f3 750F     		jne	.L47
 370 01f5 4883C448 		addq	$72, %rsp
 371              		.cfi_remember_state
 372              		.cfi_def_cfa_offset 56
 373 01f9 5B       		popq	%rbx
 374              		.cfi_def_cfa_offset 48
 375              	.LVL47:
 376 01fa 5D       		popq	%rbp
 377              		.cfi_def_cfa_offset 40
 378              	.LVL48:
 379 01fb 415C     		popq	%r12
 380              		.cfi_def_cfa_offset 32
 381 01fd 415D     		popq	%r13
 382              		.cfi_def_cfa_offset 24
 383 01ff 415E     		popq	%r14
 384              		.cfi_def_cfa_offset 16
 385 0201 415F     		popq	%r15
 386              		.cfi_def_cfa_offset 8
 387 0203 C3       		ret
 388              	.LVL49:
 389              	.L47:
 390              		.cfi_restore_state
 391 0204 E8000000 		call	__stack_chk_fail
 391      00
 392              	.LVL50:
 393              	.L28:
 394              	.LBB24:
 395              	.LBB22:
  92:fltk-1.3.4-1/jpeg/jdcoefct.c ****       coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 396              		.loc 1 92 0
 397 0209 83E901   		subl	$1, %ecx
 398 020c 39CA     		cmpl	%ecx, %edx
  93:fltk-1.3.4-1/jpeg/jdcoefct.c ****     else
 399              		.loc 1 93 0
 400 020e 488B95C8 		movq	456(%rbp), %rdx
 400      010000
  92:fltk-1.3.4-1/jpeg/jdcoefct.c ****       coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 401              		.loc 1 92 0
 402 0215 731C     		jnb	.L30
  93:fltk-1.3.4-1/jpeg/jdcoefct.c ****     else
 403              		.loc 1 93 0
 404 0217 8B520C   		movl	12(%rdx), %edx
 405 021a 895030   		movl	%edx, 48(%rax)
 406 021d EBA1     		jmp	.L29
 407              	.LVL51:
 408              	.L46:
 409              	.LBE22:
 410              	.LBE24:
 303:fltk-1.3.4-1/jpeg/jdcoefct.c ****   return JPEG_SCAN_COMPLETED;
 411              		.loc 1 303 0
 412 021f 488B8560 		movq	608(%rbp), %rax
 412      020000
 413 0226 4889EF   		movq	%rbp, %rdi
 414 0229 FF5018   		call	*24(%rax)
 415              	.LVL52:
 304:fltk-1.3.4-1/jpeg/jdcoefct.c **** }
 416              		.loc 1 304 0
 417 022c B8040000 		movl	$4, %eax
 417      00
 418 0231 EBB2     		jmp	.L24
 419              	.LVL53:
 420              	.L30:
 421              	.LBB25:
 422              	.LBB23:
  95:fltk-1.3.4-1/jpeg/jdcoefct.c ****   }
 423              		.loc 1 95 0
 424 0233 8B524C   		movl	76(%rdx), %edx
 425 0236 895030   		movl	%edx, 48(%rax)
 426 0239 EB85     		jmp	.L29
 427              	.LBE23:
 428              	.LBE25:
 429              		.cfi_endproc
 430              	.LFE66:
 432              		.section	.text.unlikely.consume_data
 433              	.LCOLDE2:
 434              		.section	.text.consume_data
 435              	.LHOTE2:
 436              		.section	.text.unlikely.decompress_data,"ax",@progbits
 437              	.LCOLDB3:
 438              		.section	.text.decompress_data,"ax",@progbits
 439              	.LHOTB3:
 440              		.p2align 4,,15
 442              	decompress_data:
 443              	.LFB67:
 306:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 307:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 308:fltk-1.3.4-1/jpeg/jdcoefct.c **** /*
 309:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * Decompress and return some data in the multi-pass case.
 310:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * Always attempts to emit one fully interleaved MCU row ("iMCU" row).
 311:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 312:fltk-1.3.4-1/jpeg/jdcoefct.c ****  *
 313:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * NB: output_buf contains a plane for each component in image.
 314:fltk-1.3.4-1/jpeg/jdcoefct.c ****  */
 315:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 316:fltk-1.3.4-1/jpeg/jdcoefct.c **** METHODDEF(int)
 317:fltk-1.3.4-1/jpeg/jdcoefct.c **** decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
 318:fltk-1.3.4-1/jpeg/jdcoefct.c **** {
 444              		.loc 1 318 0
 445              		.cfi_startproc
 446              	.LVL54:
 447 0000 4157     		pushq	%r15
 448              		.cfi_def_cfa_offset 16
 449              		.cfi_offset 15, -16
 450 0002 4156     		pushq	%r14
 451              		.cfi_def_cfa_offset 24
 452              		.cfi_offset 14, -24
 453 0004 4155     		pushq	%r13
 454              		.cfi_def_cfa_offset 32
 455              		.cfi_offset 13, -32
 456 0006 4154     		pushq	%r12
 457              		.cfi_def_cfa_offset 40
 458              		.cfi_offset 12, -40
 459 0008 4989F5   		movq	%rsi, %r13
 460 000b 55       		pushq	%rbp
 461              		.cfi_def_cfa_offset 48
 462              		.cfi_offset 6, -48
 463 000c 53       		pushq	%rbx
 464              		.cfi_def_cfa_offset 56
 465              		.cfi_offset 3, -56
 466 000d 4889FB   		movq	%rdi, %rbx
 467 0010 4883EC38 		subq	$56, %rsp
 468              		.cfi_def_cfa_offset 112
 319:fltk-1.3.4-1/jpeg/jdcoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 469              		.loc 1 319 0
 470 0014 4C8BA750 		movq	592(%rdi), %r12
 470      020000
 471              	.LVL55:
 320:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 472              		.loc 1 320 0
 473 001b 8BAFB001 		movl	432(%rdi), %ebp
 473      0000
 474              	.LVL56:
 475              		.p2align 4,,10
 476 0021 0F1F8000 		.p2align 3
 476      000000
 477              	.L49:
 321:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JDIMENSION block_num;
 322:fltk-1.3.4-1/jpeg/jdcoefct.c ****   int ci, block_row, block_rows;
 323:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JBLOCKARRAY buffer;
 324:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JBLOCKROW buffer_ptr;
 325:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JSAMPARRAY output_ptr;
 326:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JDIMENSION output_col;
 327:fltk-1.3.4-1/jpeg/jdcoefct.c ****   jpeg_component_info *compptr;
 328:fltk-1.3.4-1/jpeg/jdcoefct.c ****   inverse_DCT_method_ptr inverse_DCT;
 329:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 330:fltk-1.3.4-1/jpeg/jdcoefct.c ****   /* Force some input to be done if we are getting ahead of the input. */
 331:fltk-1.3.4-1/jpeg/jdcoefct.c ****   while (cinfo->input_scan_number < cinfo->output_scan_number ||
 478              		.loc 1 331 0
 479 0028 8B83B400 		movl	180(%rbx), %eax
 479      0000
 480 002e 3983AC00 		cmpl	%eax, 172(%rbx)
 480      0000
 481 0034 7C10     		jl	.L51
 332:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	 (cinfo->input_scan_number == cinfo->output_scan_number &&
 333:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  cinfo->input_iMCU_row <= cinfo->output_iMCU_row)) {
 482              		.loc 1 333 0 discriminator 1
 483 0036 8BB3B800 		movl	184(%rbx), %esi
 483      0000
 331:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	 (cinfo->input_scan_number == cinfo->output_scan_number &&
 484              		.loc 1 331 0 discriminator 1
 485 003c 7527     		jne	.L53
 332:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	 (cinfo->input_scan_number == cinfo->output_scan_number &&
 486              		.loc 1 332 0
 487 003e 39B3B000 		cmpl	%esi, 176(%rbx)
 487      0000
 488 0044 771F     		ja	.L53
 489              	.L51:
 334:fltk-1.3.4-1/jpeg/jdcoefct.c ****     if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 490              		.loc 1 334 0
 491 0046 488B8360 		movq	608(%rbx), %rax
 491      020000
 492 004d 4889DF   		movq	%rbx, %rdi
 493 0050 FF10     		call	*(%rax)
 494              	.LVL57:
 495 0052 85C0     		testl	%eax, %eax
 496 0054 75D2     		jne	.L49
 335:fltk-1.3.4-1/jpeg/jdcoefct.c ****       return JPEG_SUSPENDED;
 336:fltk-1.3.4-1/jpeg/jdcoefct.c ****   }
 337:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 338:fltk-1.3.4-1/jpeg/jdcoefct.c ****   /* OK, output from the virtual arrays. */
 339:fltk-1.3.4-1/jpeg/jdcoefct.c ****   for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 340:fltk-1.3.4-1/jpeg/jdcoefct.c ****        ci++, compptr++) {
 341:fltk-1.3.4-1/jpeg/jdcoefct.c ****     /* Don't bother to IDCT an uninteresting component. */
 342:fltk-1.3.4-1/jpeg/jdcoefct.c ****     if (! compptr->component_needed)
 343:fltk-1.3.4-1/jpeg/jdcoefct.c ****       continue;
 344:fltk-1.3.4-1/jpeg/jdcoefct.c ****     /* Align the virtual buffer for this component. */
 345:fltk-1.3.4-1/jpeg/jdcoefct.c ****     buffer = (*cinfo->mem->access_virt_barray)
 346:fltk-1.3.4-1/jpeg/jdcoefct.c ****       ((j_common_ptr) cinfo, coef->whole_image[ci],
 347:fltk-1.3.4-1/jpeg/jdcoefct.c ****        cinfo->output_iMCU_row * compptr->v_samp_factor,
 348:fltk-1.3.4-1/jpeg/jdcoefct.c ****        (JDIMENSION) compptr->v_samp_factor, FALSE);
 349:fltk-1.3.4-1/jpeg/jdcoefct.c ****     /* Count non-dummy DCT block rows in this iMCU row. */
 350:fltk-1.3.4-1/jpeg/jdcoefct.c ****     if (cinfo->output_iMCU_row < last_iMCU_row)
 351:fltk-1.3.4-1/jpeg/jdcoefct.c ****       block_rows = compptr->v_samp_factor;
 352:fltk-1.3.4-1/jpeg/jdcoefct.c ****     else {
 353:fltk-1.3.4-1/jpeg/jdcoefct.c ****       /* NB: can't use last_row_height here; it is input-side-dependent! */
 354:fltk-1.3.4-1/jpeg/jdcoefct.c ****       block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 355:fltk-1.3.4-1/jpeg/jdcoefct.c ****       if (block_rows == 0) block_rows = compptr->v_samp_factor;
 356:fltk-1.3.4-1/jpeg/jdcoefct.c ****     }
 357:fltk-1.3.4-1/jpeg/jdcoefct.c ****     inverse_DCT = cinfo->idct->inverse_DCT[ci];
 358:fltk-1.3.4-1/jpeg/jdcoefct.c ****     output_ptr = output_buf[ci];
 359:fltk-1.3.4-1/jpeg/jdcoefct.c ****     /* Loop over all DCT blocks to be processed. */
 360:fltk-1.3.4-1/jpeg/jdcoefct.c ****     for (block_row = 0; block_row < block_rows; block_row++) {
 361:fltk-1.3.4-1/jpeg/jdcoefct.c ****       buffer_ptr = buffer[block_row];
 362:fltk-1.3.4-1/jpeg/jdcoefct.c ****       output_col = 0;
 363:fltk-1.3.4-1/jpeg/jdcoefct.c ****       for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 364:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 365:fltk-1.3.4-1/jpeg/jdcoefct.c **** 			output_ptr, output_col);
 366:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	buffer_ptr++;
 367:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	output_col += compptr->DCT_h_scaled_size;
 368:fltk-1.3.4-1/jpeg/jdcoefct.c ****       }
 369:fltk-1.3.4-1/jpeg/jdcoefct.c ****       output_ptr += compptr->DCT_v_scaled_size;
 370:fltk-1.3.4-1/jpeg/jdcoefct.c ****     }
 371:fltk-1.3.4-1/jpeg/jdcoefct.c ****   }
 372:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 373:fltk-1.3.4-1/jpeg/jdcoefct.c ****   if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 374:fltk-1.3.4-1/jpeg/jdcoefct.c ****     return JPEG_ROW_COMPLETED;
 375:fltk-1.3.4-1/jpeg/jdcoefct.c ****   return JPEG_SCAN_COMPLETED;
 376:fltk-1.3.4-1/jpeg/jdcoefct.c **** }
 497              		.loc 1 376 0
 498 0056 4883C438 		addq	$56, %rsp
 499              		.cfi_remember_state
 500              		.cfi_def_cfa_offset 56
 501 005a 5B       		popq	%rbx
 502              		.cfi_def_cfa_offset 48
 503              	.LVL58:
 504 005b 5D       		popq	%rbp
 505              		.cfi_def_cfa_offset 40
 506              	.LVL59:
 507 005c 415C     		popq	%r12
 508              		.cfi_def_cfa_offset 32
 509              	.LVL60:
 510 005e 415D     		popq	%r13
 511              		.cfi_def_cfa_offset 24
 512              	.LVL61:
 513 0060 415E     		popq	%r14
 514              		.cfi_def_cfa_offset 16
 515 0062 415F     		popq	%r15
 516              		.cfi_def_cfa_offset 8
 517 0064 C3       		ret
 518              	.LVL62:
 519              	.L53:
 520              		.cfi_restore_state
 339:fltk-1.3.4-1/jpeg/jdcoefct.c ****        ci++, compptr++) {
 521              		.loc 1 339 0
 522 0065 8B4B38   		movl	56(%rbx), %ecx
 523 0068 4C8BBB30 		movq	304(%rbx), %r15
 523      010000
 524              	.LVL63:
 525 006f 85C9     		testl	%ecx, %ecx
 526 0071 0F8E4B01 		jle	.L54
 526      0000
 527 0077 498D8424 		leaq	136(%r12), %rax
 527      88000000 
 528 007f 4C896C24 		movq	%r13, 24(%rsp)
 528      18
 529 0084 C7442428 		movl	$0, 40(%rsp)
 529      00000000 
 350:fltk-1.3.4-1/jpeg/jdcoefct.c ****       block_rows = compptr->v_samp_factor;
 530              		.loc 1 350 0
 531 008c 48891C24 		movq	%rbx, (%rsp)
 532 0090 48894424 		movq	%rax, 32(%rsp)
 532      20
 533 0095 8D45FF   		leal	-1(%rbp), %eax
 534 0098 8944242C 		movl	%eax, 44(%rsp)
 535 009c EB28     		jmp	.L63
 536              	.LVL64:
 537 009e 6690     		.p2align 4,,10
 538              		.p2align 3
 539              	.L55:
 339:fltk-1.3.4-1/jpeg/jdcoefct.c ****        ci++, compptr++) {
 540              		.loc 1 339 0
 541 00a0 488B0C24 		movq	(%rsp), %rcx
 340:fltk-1.3.4-1/jpeg/jdcoefct.c ****     /* Don't bother to IDCT an uninteresting component. */
 542              		.loc 1 340 0
 543 00a4 83442428 		addl	$1, 40(%rsp)
 543      01
 544              	.LVL65:
 545 00a9 4983C760 		addq	$96, %r15
 546              	.LVL66:
 547 00ad 8B442428 		movl	40(%rsp), %eax
 548              	.LVL67:
 549 00b1 48834424 		addq	$8, 24(%rsp)
 549      1808
 550 00b7 48834424 		addq	$8, 32(%rsp)
 550      2008
 339:fltk-1.3.4-1/jpeg/jdcoefct.c ****        ci++, compptr++) {
 551              		.loc 1 339 0
 552 00bd 394138   		cmpl	%eax, 56(%rcx)
 553 00c0 0F8EF900 		jle	.L79
 553      0000
 554              	.LVL68:
 555              	.L63:
 342:fltk-1.3.4-1/jpeg/jdcoefct.c ****       continue;
 556              		.loc 1 342 0
 557 00c6 418B5734 		movl	52(%r15), %edx
 558 00ca 85D2     		testl	%edx, %edx
 559 00cc 74D2     		je	.L55
 345:fltk-1.3.4-1/jpeg/jdcoefct.c ****       ((j_common_ptr) cinfo, coef->whole_image[ci],
 560              		.loc 1 345 0
 561 00ce 418B4F0C 		movl	12(%r15), %ecx
 562 00d2 488B1C24 		movq	(%rsp), %rbx
 563 00d6 4531C0   		xorl	%r8d, %r8d
 564 00d9 0FAFF1   		imull	%ecx, %esi
 565 00dc 488B4308 		movq	8(%rbx), %rax
 566 00e0 4889DF   		movq	%rbx, %rdi
 567 00e3 89F2     		movl	%esi, %edx
 568 00e5 488B7424 		movq	32(%rsp), %rsi
 568      20
 569 00ea 488B36   		movq	(%rsi), %rsi
 570 00ed FF5040   		call	*64(%rax)
 571              	.LVL69:
 350:fltk-1.3.4-1/jpeg/jdcoefct.c ****       block_rows = compptr->v_samp_factor;
 572              		.loc 1 350 0
 573 00f0 8BB3B800 		movl	184(%rbx), %esi
 573      0000
 574 00f6 3974242C 		cmpl	%esi, 44(%rsp)
 345:fltk-1.3.4-1/jpeg/jdcoefct.c ****       ((j_common_ptr) cinfo, coef->whole_image[ci],
 575              		.loc 1 345 0
 576 00fa 4989C5   		movq	%rax, %r13
 577              	.LVL70:
 351:fltk-1.3.4-1/jpeg/jdcoefct.c ****     else {
 578              		.loc 1 351 0
 579 00fd 418B4F0C 		movl	12(%r15), %ecx
 350:fltk-1.3.4-1/jpeg/jdcoefct.c ****       block_rows = compptr->v_samp_factor;
 580              		.loc 1 350 0
 581 0101 770D     		ja	.L57
 354:fltk-1.3.4-1/jpeg/jdcoefct.c ****       if (block_rows == 0) block_rows = compptr->v_samp_factor;
 582              		.loc 1 354 0
 583 0103 418B4720 		movl	32(%r15), %eax
 584              	.LVL71:
 585 0107 31D2     		xorl	%edx, %edx
 586 0109 F7F1     		divl	%ecx
 587              	.LVL72:
 355:fltk-1.3.4-1/jpeg/jdcoefct.c ****     }
 588              		.loc 1 355 0
 589 010b 85D2     		testl	%edx, %edx
 590 010d 0F45CA   		cmovne	%edx, %ecx
 591              	.LVL73:
 592              	.L57:
 357:fltk-1.3.4-1/jpeg/jdcoefct.c ****     output_ptr = output_buf[ci];
 593              		.loc 1 357 0
 594 0110 488B0424 		movq	(%rsp), %rax
 595 0114 48635424 		movslq	40(%rsp), %rdx
 595      28
 360:fltk-1.3.4-1/jpeg/jdcoefct.c ****       buffer_ptr = buffer[block_row];
 596              		.loc 1 360 0
 597 0119 85C9     		testl	%ecx, %ecx
 357:fltk-1.3.4-1/jpeg/jdcoefct.c ****     output_ptr = output_buf[ci];
 598              		.loc 1 357 0
 599 011b 488B8078 		movq	632(%rax), %rax
 599      020000
 600 0122 4C8B64D0 		movq	8(%rax,%rdx,8), %r12
 600      08
 601              	.LVL74:
 358:fltk-1.3.4-1/jpeg/jdcoefct.c ****     /* Loop over all DCT blocks to be processed. */
 602              		.loc 1 358 0
 603 0127 488B4424 		movq	24(%rsp), %rax
 603      18
 604 012c 488B28   		movq	(%rax), %rbp
 605              	.LVL75:
 360:fltk-1.3.4-1/jpeg/jdcoefct.c ****       buffer_ptr = buffer[block_row];
 606              		.loc 1 360 0
 607 012f 0F8E6BFF 		jle	.L55
 607      FFFF
 608 0135 8D41FF   		leal	-1(%rcx), %eax
 609 0138 4C896C24 		movq	%r13, 8(%rsp)
 609      08
 610 013d 498D44C5 		leaq	8(%r13,%rax,8), %rax
 610      08
 611 0142 48894424 		movq	%rax, 16(%rsp)
 611      10
 612              	.LVL76:
 613 0147 660F1F84 		.p2align 4,,10
 613      00000000 
 613      00
 614              		.p2align 3
 615              	.L59:
 361:fltk-1.3.4-1/jpeg/jdcoefct.c ****       output_col = 0;
 616              		.loc 1 361 0
 617 0150 488B4424 		movq	8(%rsp), %rax
 617      08
 363:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 618              		.loc 1 363 0
 619 0155 4531ED   		xorl	%r13d, %r13d
 620 0158 4531F6   		xorl	%r14d, %r14d
 361:fltk-1.3.4-1/jpeg/jdcoefct.c ****       output_col = 0;
 621              		.loc 1 361 0
 622 015b 488B18   		movq	(%rax), %rbx
 623              	.LVL77:
 363:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 624              		.loc 1 363 0
 625 015e 418B471C 		movl	28(%r15), %eax
 626 0162 85C0     		testl	%eax, %eax
 627 0164 742F     		je	.L62
 628              	.LVL78:
 629 0166 662E0F1F 		.p2align 4,,10
 629      84000000 
 629      0000
 630              		.p2align 3
 631              	.L69:
 364:fltk-1.3.4-1/jpeg/jdcoefct.c **** 			output_ptr, output_col);
 632              		.loc 1 364 0 discriminator 3
 633 0170 4589E8   		movl	%r13d, %r8d
 634 0173 4889DA   		movq	%rbx, %rdx
 635 0176 4889E9   		movq	%rbp, %rcx
 636 0179 4C89FE   		movq	%r15, %rsi
 637 017c 488B3C24 		movq	(%rsp), %rdi
 366:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	output_col += compptr->DCT_h_scaled_size;
 638              		.loc 1 366 0 discriminator 3
 639 0180 4883EB80 		subq	$-128, %rbx
 640              	.LVL79:
 364:fltk-1.3.4-1/jpeg/jdcoefct.c **** 			output_ptr, output_col);
 641              		.loc 1 364 0 discriminator 3
 642 0184 41FFD4   		call	*%r12
 643              	.LVL80:
 363:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 644              		.loc 1 363 0 discriminator 3
 645 0187 4183C601 		addl	$1, %r14d
 646              	.LVL81:
 367:fltk-1.3.4-1/jpeg/jdcoefct.c ****       }
 647              		.loc 1 367 0 discriminator 3
 648 018b 45036F24 		addl	36(%r15), %r13d
 649              	.LVL82:
 363:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 650              		.loc 1 363 0 discriminator 3
 651 018f 4539771C 		cmpl	%r14d, 28(%r15)
 652 0193 77DB     		ja	.L69
 653              	.LVL83:
 654              	.L62:
 369:fltk-1.3.4-1/jpeg/jdcoefct.c ****     }
 655              		.loc 1 369 0
 656 0195 49634728 		movslq	40(%r15), %rax
 657 0199 48834424 		addq	$8, 8(%rsp)
 657      0808
 658 019f 488D6CC5 		leaq	0(%rbp,%rax,8), %rbp
 658      00
 659              	.LVL84:
 660 01a4 488B4424 		movq	8(%rsp), %rax
 660      08
 360:fltk-1.3.4-1/jpeg/jdcoefct.c ****       buffer_ptr = buffer[block_row];
 661              		.loc 1 360 0
 662 01a9 48394424 		cmpq	%rax, 16(%rsp)
 662      10
 663 01ae 75A0     		jne	.L59
 664 01b0 488B0424 		movq	(%rsp), %rax
 665 01b4 8BB0B800 		movl	184(%rax), %esi
 665      0000
 666 01ba E9E1FEFF 		jmp	.L55
 666      FF
 667              	.LVL85:
 668              	.L79:
 669 01bf 4889CB   		movq	%rcx, %rbx
 670              	.LVL86:
 671              	.L54:
 373:fltk-1.3.4-1/jpeg/jdcoefct.c ****     return JPEG_ROW_COMPLETED;
 672              		.loc 1 373 0
 673 01c2 83C601   		addl	$1, %esi
 374:fltk-1.3.4-1/jpeg/jdcoefct.c ****   return JPEG_SCAN_COMPLETED;
 674              		.loc 1 374 0
 675 01c5 3BB3B001 		cmpl	432(%rbx), %esi
 675      0000
 373:fltk-1.3.4-1/jpeg/jdcoefct.c ****     return JPEG_ROW_COMPLETED;
 676              		.loc 1 373 0
 677 01cb 89B3B800 		movl	%esi, 184(%rbx)
 677      0000
 374:fltk-1.3.4-1/jpeg/jdcoefct.c ****   return JPEG_SCAN_COMPLETED;
 678              		.loc 1 374 0
 679 01d1 19C0     		sbbl	%eax, %eax
 680              		.loc 1 376 0
 681 01d3 4883C438 		addq	$56, %rsp
 682              		.cfi_def_cfa_offset 56
 683 01d7 5B       		popq	%rbx
 684              		.cfi_def_cfa_offset 48
 374:fltk-1.3.4-1/jpeg/jdcoefct.c ****   return JPEG_SCAN_COMPLETED;
 685              		.loc 1 374 0
 686 01d8 83C004   		addl	$4, %eax
 687              		.loc 1 376 0
 688 01db 5D       		popq	%rbp
 689              		.cfi_def_cfa_offset 40
 690 01dc 415C     		popq	%r12
 691              		.cfi_def_cfa_offset 32
 692 01de 415D     		popq	%r13
 693              		.cfi_def_cfa_offset 24
 694 01e0 415E     		popq	%r14
 695              		.cfi_def_cfa_offset 16
 696 01e2 415F     		popq	%r15
 697              		.cfi_def_cfa_offset 8
 698              	.LVL87:
 699 01e4 C3       		ret
 700              		.cfi_endproc
 701              	.LFE67:
 703              		.section	.text.unlikely.decompress_data
 704              	.LCOLDE3:
 705              		.section	.text.decompress_data
 706              	.LHOTE3:
 707              		.section	.text.unlikely.start_output_pass,"ax",@progbits
 708              	.LCOLDB4:
 709              		.section	.text.start_output_pass,"ax",@progbits
 710              	.LHOTB4:
 711              		.p2align 4,,15
 713              	start_output_pass:
 714              	.LFB63:
 121:fltk-1.3.4-1/jpeg/jdcoefct.c **** #ifdef BLOCK_SMOOTHING_SUPPORTED
 715              		.loc 1 121 0
 716              		.cfi_startproc
 717              	.LVL88:
 718 0000 55       		pushq	%rbp
 719              		.cfi_def_cfa_offset 16
 720              		.cfi_offset 6, -16
 721 0001 53       		pushq	%rbx
 722              		.cfi_def_cfa_offset 24
 723              		.cfi_offset 3, -24
 724 0002 4889FB   		movq	%rdi, %rbx
 725 0005 4883EC08 		subq	$8, %rsp
 726              		.cfi_def_cfa_offset 32
 123:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 727              		.loc 1 123 0
 728 0009 488BAF50 		movq	592(%rdi), %rbp
 728      020000
 729              	.LVL89:
 126:fltk-1.3.4-1/jpeg/jdcoefct.c ****     if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 730              		.loc 1 126 0
 731 0010 48837D20 		cmpq	$0, 32(%rbp)
 731      00
 732 0015 740F     		je	.L81
 127:fltk-1.3.4-1/jpeg/jdcoefct.c ****       coef->pub.decompress_data = decompress_smooth_data;
 733              		.loc 1 127 0
 734 0017 8B7F68   		movl	104(%rdi), %edi
 735              	.LVL90:
 736 001a 85FF     		testl	%edi, %edi
 737 001c 7522     		jne	.L104
 738              	.L82:
 130:fltk-1.3.4-1/jpeg/jdcoefct.c ****   }
 739              		.loc 1 130 0
 740 001e 48C74518 		movq	$decompress_data, 24(%rbp)
 740      00000000 
 741              	.L81:
 133:fltk-1.3.4-1/jpeg/jdcoefct.c **** }
 742              		.loc 1 133 0
 743 0026 C783B800 		movl	$0, 184(%rbx)
 743      00000000 
 743      0000
 134:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 744              		.loc 1 134 0
 745 0030 4883C408 		addq	$8, %rsp
 746              		.cfi_remember_state
 747              		.cfi_def_cfa_offset 24
 748 0034 5B       		popq	%rbx
 749              		.cfi_def_cfa_offset 16
 750              	.LVL91:
 751 0035 5D       		popq	%rbp
 752              		.cfi_def_cfa_offset 8
 753              	.LVL92:
 754 0036 C3       		ret
 755              	.LVL93:
 756 0037 660F1F84 		.p2align 4,,10
 756      00000000 
 756      00
 757              		.p2align 3
 758              	.L104:
 759              		.cfi_restore_state
 760              	.LBB28:
 761              	.LBB29:
 377:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 378:fltk-1.3.4-1/jpeg/jdcoefct.c **** #endif /* D_MULTISCAN_FILES_SUPPORTED */
 379:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 380:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 381:fltk-1.3.4-1/jpeg/jdcoefct.c **** #ifdef BLOCK_SMOOTHING_SUPPORTED
 382:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 383:fltk-1.3.4-1/jpeg/jdcoefct.c **** /*
 384:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * This code applies interblock smoothing as described by section K.8
 385:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * of the JPEG standard: the first 5 AC coefficients are estimated from
 386:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * the DC values of a DCT block and its 8 neighboring blocks.
 387:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * We apply smoothing only for progressive JPEG decoding, and only if
 388:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * the coefficients it can estimate are not yet known to full precision.
 389:fltk-1.3.4-1/jpeg/jdcoefct.c ****  */
 390:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 391:fltk-1.3.4-1/jpeg/jdcoefct.c **** /* Natural-order array positions of the first 5 zigzag-order coefficients */
 392:fltk-1.3.4-1/jpeg/jdcoefct.c **** #define Q01_POS  1
 393:fltk-1.3.4-1/jpeg/jdcoefct.c **** #define Q10_POS  8
 394:fltk-1.3.4-1/jpeg/jdcoefct.c **** #define Q20_POS  16
 395:fltk-1.3.4-1/jpeg/jdcoefct.c **** #define Q11_POS  9
 396:fltk-1.3.4-1/jpeg/jdcoefct.c **** #define Q02_POS  2
 397:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 398:fltk-1.3.4-1/jpeg/jdcoefct.c **** /*
 399:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * Determine whether block smoothing is applicable and safe.
 400:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * We also latch the current states of the coef_bits[] entries for the
 401:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * AC coefficients; otherwise, if the input side of the decompressor
 402:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * advances into a new scan, we might think the coefficients are known
 403:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * more accurately than they really are.
 404:fltk-1.3.4-1/jpeg/jdcoefct.c ****  */
 405:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 406:fltk-1.3.4-1/jpeg/jdcoefct.c **** LOCAL(boolean)
 407:fltk-1.3.4-1/jpeg/jdcoefct.c **** smoothing_ok (j_decompress_ptr cinfo)
 408:fltk-1.3.4-1/jpeg/jdcoefct.c **** {
 409:fltk-1.3.4-1/jpeg/jdcoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 410:fltk-1.3.4-1/jpeg/jdcoefct.c ****   boolean smoothing_useful = FALSE;
 411:fltk-1.3.4-1/jpeg/jdcoefct.c ****   int ci, coefi;
 412:fltk-1.3.4-1/jpeg/jdcoefct.c ****   jpeg_component_info *compptr;
 413:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JQUANT_TBL * qtable;
 414:fltk-1.3.4-1/jpeg/jdcoefct.c ****   int * coef_bits;
 415:fltk-1.3.4-1/jpeg/jdcoefct.c ****   int * coef_bits_latch;
 416:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 417:fltk-1.3.4-1/jpeg/jdcoefct.c ****   if (! cinfo->progressive_mode || cinfo->coef_bits == NULL)
 762              		.loc 1 417 0
 763 0040 8BB33C01 		movl	316(%rbx), %esi
 763      0000
 764 0046 85F6     		testl	%esi, %esi
 765 0048 74D4     		je	.L82
 766 004a 4883BBC0 		cmpq	$0, 192(%rbx)
 766      00000000 
 767 0052 74CA     		je	.L82
 418:fltk-1.3.4-1/jpeg/jdcoefct.c ****     return FALSE;
 419:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 420:fltk-1.3.4-1/jpeg/jdcoefct.c ****   /* Allocate latch area if not already done */
 421:fltk-1.3.4-1/jpeg/jdcoefct.c ****   if (coef->coef_bits_latch == NULL)
 768              		.loc 1 421 0
 769 0054 488B85D8 		movq	216(%rbp), %rax
 769      000000
 770 005b 4885C0   		testq	%rax, %rax
 771 005e 0F84F700 		je	.L105
 771      0000
 772              	.L84:
 773              	.LVL94:
 422:fltk-1.3.4-1/jpeg/jdcoefct.c ****     coef->coef_bits_latch = (int *)
 423:fltk-1.3.4-1/jpeg/jdcoefct.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 424:fltk-1.3.4-1/jpeg/jdcoefct.c **** 				  cinfo->num_components *
 425:fltk-1.3.4-1/jpeg/jdcoefct.c **** 				  (SAVED_COEFS * SIZEOF(int)));
 426:fltk-1.3.4-1/jpeg/jdcoefct.c ****   coef_bits_latch = coef->coef_bits_latch;
 427:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 428:fltk-1.3.4-1/jpeg/jdcoefct.c ****   for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 774              		.loc 1 428 0
 775 0064 8B4B38   		movl	56(%rbx), %ecx
 776 0067 4C8B8B30 		movq	304(%rbx), %r9
 776      010000
 777              	.LVL95:
 778 006e 85C9     		testl	%ecx, %ecx
 779 0070 7EAC     		jle	.L82
 429:fltk-1.3.4-1/jpeg/jdcoefct.c ****        ci++, compptr++) {
 430:fltk-1.3.4-1/jpeg/jdcoefct.c ****     /* All components' quantization values must already be latched. */
 431:fltk-1.3.4-1/jpeg/jdcoefct.c ****     if ((qtable = compptr->quant_table) == NULL)
 780              		.loc 1 431 0
 781 0072 498B5150 		movq	80(%r9), %rdx
 782              	.LVL96:
 783 0076 4885D2   		testq	%rdx, %rdx
 784 0079 74A3     		je	.L82
 432:fltk-1.3.4-1/jpeg/jdcoefct.c ****       return FALSE;
 433:fltk-1.3.4-1/jpeg/jdcoefct.c ****     /* Verify DC & first 5 AC quantizers are nonzero to avoid zero-divide. */
 434:fltk-1.3.4-1/jpeg/jdcoefct.c ****     if (qtable->quantval[0] == 0 ||
 785              		.loc 1 434 0
 786 007b 66833A00 		cmpw	$0, (%rdx)
 787 007f 749D     		je	.L82
 788 0081 66837A02 		cmpw	$0, 2(%rdx)
 788      00
 789 0086 7496     		je	.L82
 435:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	qtable->quantval[Q01_POS] == 0 ||
 790              		.loc 1 435 0
 791 0088 66837A10 		cmpw	$0, 16(%rdx)
 791      00
 792 008d 748F     		je	.L82
 436:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	qtable->quantval[Q10_POS] == 0 ||
 793              		.loc 1 436 0
 794 008f 66837A20 		cmpw	$0, 32(%rdx)
 794      00
 795 0094 7488     		je	.L82
 796 0096 4531DB   		xorl	%r11d, %r11d
 797 0099 31F6     		xorl	%esi, %esi
 798 009b 4531D2   		xorl	%r10d, %r10d
 437:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	qtable->quantval[Q20_POS] == 0 ||
 438:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	qtable->quantval[Q11_POS] == 0 ||
 439:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	qtable->quantval[Q02_POS] == 0)
 440:fltk-1.3.4-1/jpeg/jdcoefct.c ****       return FALSE;
 441:fltk-1.3.4-1/jpeg/jdcoefct.c ****     /* DC values must be at least partly known for all components. */
 442:fltk-1.3.4-1/jpeg/jdcoefct.c ****     coef_bits = cinfo->coef_bits[ci];
 443:fltk-1.3.4-1/jpeg/jdcoefct.c ****     if (coef_bits[0] < 0)
 444:fltk-1.3.4-1/jpeg/jdcoefct.c ****       return FALSE;
 445:fltk-1.3.4-1/jpeg/jdcoefct.c ****     /* Block smoothing is helpful if some AC coefficients remain inaccurate. */
 446:fltk-1.3.4-1/jpeg/jdcoefct.c ****     for (coefi = 1; coefi <= 5; coefi++) {
 447:fltk-1.3.4-1/jpeg/jdcoefct.c ****       coef_bits_latch[coefi] = coef_bits[coefi];
 448:fltk-1.3.4-1/jpeg/jdcoefct.c ****       if (coef_bits[coefi] != 0)
 449:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	smoothing_useful = TRUE;
 799              		.loc 1 449 0
 800 009e 41B80100 		movl	$1, %r8d
 800      0000
 801              	.LVL97:
 802              		.p2align 4,,10
 803 00a4 0F1F4000 		.p2align 3
 804              	.L86:
 437:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	qtable->quantval[Q20_POS] == 0 ||
 805              		.loc 1 437 0
 806 00a8 66837A12 		cmpw	$0, 18(%rdx)
 806      00
 807 00ad 0F846BFF 		je	.L82
 807      FFFF
 438:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	qtable->quantval[Q02_POS] == 0)
 808              		.loc 1 438 0
 809 00b3 66837A04 		cmpw	$0, 4(%rdx)
 809      00
 810 00b8 0F8460FF 		je	.L82
 810      FFFF
 442:fltk-1.3.4-1/jpeg/jdcoefct.c ****     if (coef_bits[0] < 0)
 811              		.loc 1 442 0
 812 00be 4C89D9   		movq	%r11, %rcx
 813 00c1 48038BC0 		addq	192(%rbx), %rcx
 813      000000
 814              	.LVL98:
 443:fltk-1.3.4-1/jpeg/jdcoefct.c ****       return FALSE;
 815              		.loc 1 443 0
 816 00c8 8B11     		movl	(%rcx), %edx
 817              	.LVL99:
 818 00ca 85D2     		testl	%edx, %edx
 819 00cc 0F884CFF 		js	.L82
 819      FFFF
 820 00d2 31D2     		xorl	%edx, %edx
 821              	.L88:
 447:fltk-1.3.4-1/jpeg/jdcoefct.c ****       if (coef_bits[coefi] != 0)
 822              		.loc 1 447 0
 823 00d4 8B7C1104 		movl	4(%rcx,%rdx), %edi
 824 00d8 897C1004 		movl	%edi, 4(%rax,%rdx)
 825              		.loc 1 449 0
 826 00dc 8B7C1104 		movl	4(%rcx,%rdx), %edi
 827 00e0 85FF     		testl	%edi, %edi
 828 00e2 410F45F0 		cmovne	%r8d, %esi
 829              	.LVL100:
 830 00e6 4883C204 		addq	$4, %rdx
 446:fltk-1.3.4-1/jpeg/jdcoefct.c ****       coef_bits_latch[coefi] = coef_bits[coefi];
 831              		.loc 1 446 0
 832 00ea 4883FA14 		cmpq	$20, %rdx
 833 00ee 75E4     		jne	.L88
 450:fltk-1.3.4-1/jpeg/jdcoefct.c ****     }
 451:fltk-1.3.4-1/jpeg/jdcoefct.c ****     coef_bits_latch += SAVED_COEFS;
 834              		.loc 1 451 0
 835 00f0 4883C018 		addq	$24, %rax
 836              	.LVL101:
 429:fltk-1.3.4-1/jpeg/jdcoefct.c ****     /* All components' quantization values must already be latched. */
 837              		.loc 1 429 0
 838 00f4 4183C201 		addl	$1, %r10d
 839              	.LVL102:
 840 00f8 4983C160 		addq	$96, %r9
 841              	.LVL103:
 428:fltk-1.3.4-1/jpeg/jdcoefct.c ****        ci++, compptr++) {
 842              		.loc 1 428 0
 843 00fc 443B5338 		cmpl	56(%rbx), %r10d
 844 0100 7D44     		jge	.L106
 431:fltk-1.3.4-1/jpeg/jdcoefct.c ****       return FALSE;
 845              		.loc 1 431 0
 846 0102 498B5150 		movq	80(%r9), %rdx
 847              	.LVL104:
 848 0106 4885D2   		testq	%rdx, %rdx
 849 0109 0F840FFF 		je	.L82
 849      FFFF
 434:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	qtable->quantval[Q01_POS] == 0 ||
 850              		.loc 1 434 0
 851 010f 66833A00 		cmpw	$0, (%rdx)
 852 0113 0F8405FF 		je	.L82
 852      FFFF
 853 0119 66837A02 		cmpw	$0, 2(%rdx)
 853      00
 854 011e 0F84FAFE 		je	.L82
 854      FFFF
 435:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	qtable->quantval[Q10_POS] == 0 ||
 855              		.loc 1 435 0
 856 0124 66837A10 		cmpw	$0, 16(%rdx)
 856      00
 857 0129 0F84EFFE 		je	.L82
 857      FFFF
 858 012f 4981C300 		addq	$256, %r11
 858      010000
 436:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	qtable->quantval[Q20_POS] == 0 ||
 859              		.loc 1 436 0
 860 0136 66837A20 		cmpw	$0, 32(%rdx)
 860      00
 861 013b 0F8567FF 		jne	.L86
 861      FFFF
 862 0141 E9D8FEFF 		jmp	.L82
 862      FF
 863              	.LVL105:
 864              	.L106:
 865              	.LBE29:
 866              	.LBE28:
 127:fltk-1.3.4-1/jpeg/jdcoefct.c ****       coef->pub.decompress_data = decompress_smooth_data;
 867              		.loc 1 127 0
 868 0146 85F6     		testl	%esi, %esi
 869 0148 0F84D0FE 		je	.L82
 869      FFFF
 128:fltk-1.3.4-1/jpeg/jdcoefct.c ****     else
 870              		.loc 1 128 0
 871 014e 48C74518 		movq	$decompress_smooth_data, 24(%rbp)
 871      00000000 
 872 0156 E9CBFEFF 		jmp	.L81
 872      FF
 873              	.LVL106:
 874              	.L105:
 875              	.LBB31:
 876              	.LBB30:
 423:fltk-1.3.4-1/jpeg/jdcoefct.c **** 				  cinfo->num_components *
 877              		.loc 1 423 0
 878 015b 48634338 		movslq	56(%rbx), %rax
 879 015f BE010000 		movl	$1, %esi
 879      00
 880 0164 4889DF   		movq	%rbx, %rdi
 881 0167 488D1440 		leaq	(%rax,%rax,2), %rdx
 882 016b 488B4308 		movq	8(%rbx), %rax
 883 016f 48C1E203 		salq	$3, %rdx
 884 0173 FF10     		call	*(%rax)
 885              	.LVL107:
 422:fltk-1.3.4-1/jpeg/jdcoefct.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 886              		.loc 1 422 0
 887 0175 488985D8 		movq	%rax, 216(%rbp)
 887      000000
 888 017c E9E3FEFF 		jmp	.L84
 888      FF
 889              	.LBE30:
 890              	.LBE31:
 891              		.cfi_endproc
 892              	.LFE63:
 894              		.section	.text.unlikely.start_output_pass
 895              	.LCOLDE4:
 896              		.section	.text.start_output_pass
 897              	.LHOTE4:
 898              		.section	.text.unlikely.decompress_smooth_data,"ax",@progbits
 899              	.LCOLDB5:
 900              		.section	.text.decompress_smooth_data,"ax",@progbits
 901              	.LHOTB5:
 902              		.p2align 4,,15
 904              	decompress_smooth_data:
 905              	.LFB69:
 452:fltk-1.3.4-1/jpeg/jdcoefct.c ****   }
 453:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 454:fltk-1.3.4-1/jpeg/jdcoefct.c ****   return smoothing_useful;
 455:fltk-1.3.4-1/jpeg/jdcoefct.c **** }
 456:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 457:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 458:fltk-1.3.4-1/jpeg/jdcoefct.c **** /*
 459:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * Variant of decompress_data for use when doing block smoothing.
 460:fltk-1.3.4-1/jpeg/jdcoefct.c ****  */
 461:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 462:fltk-1.3.4-1/jpeg/jdcoefct.c **** METHODDEF(int)
 463:fltk-1.3.4-1/jpeg/jdcoefct.c **** decompress_smooth_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
 464:fltk-1.3.4-1/jpeg/jdcoefct.c **** {
 906              		.loc 1 464 0
 907              		.cfi_startproc
 908              	.LVL108:
 909 0000 4157     		pushq	%r15
 910              		.cfi_def_cfa_offset 16
 911              		.cfi_offset 15, -16
 912 0002 4156     		pushq	%r14
 913              		.cfi_def_cfa_offset 24
 914              		.cfi_offset 14, -24
 915 0004 4155     		pushq	%r13
 916              		.cfi_def_cfa_offset 32
 917              		.cfi_offset 13, -32
 918 0006 4154     		pushq	%r12
 919              		.cfi_def_cfa_offset 40
 920              		.cfi_offset 12, -40
 921 0008 4989FC   		movq	%rdi, %r12
 922 000b 55       		pushq	%rbp
 923              		.cfi_def_cfa_offset 48
 924              		.cfi_offset 6, -48
 925 000c 53       		pushq	%rbx
 926              		.cfi_def_cfa_offset 56
 927              		.cfi_offset 3, -56
 928 000d 4889F5   		movq	%rsi, %rbp
 929 0010 4881EC88 		subq	$392, %rsp
 929      010000
 930              		.cfi_def_cfa_offset 448
 931              		.loc 1 464 0
 932 0017 64488B1C 		movq	%fs:40, %rbx
 932      25280000 
 932      00
 933 0020 48899C24 		movq	%rbx, 376(%rsp)
 933      78010000 
 934 0028 31DB     		xorl	%ebx, %ebx
 465:fltk-1.3.4-1/jpeg/jdcoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 935              		.loc 1 465 0
 936 002a 488B9F50 		movq	592(%rdi), %rbx
 936      020000
 464:fltk-1.3.4-1/jpeg/jdcoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 937              		.loc 1 464 0
 938 0031 48897C24 		movq	%rdi, 56(%rsp)
 938      38
 939              		.loc 1 465 0
 940 0036 48899C24 		movq	%rbx, 224(%rsp)
 940      E0000000 
 941              	.LVL109:
 466:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 942              		.loc 1 466 0
 943 003e 8B9FB001 		movl	432(%rdi), %ebx
 943      0000
 944              	.LVL110:
 467:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JDIMENSION block_num, last_block_column;
 468:fltk-1.3.4-1/jpeg/jdcoefct.c ****   int ci, block_row, block_rows, access_rows;
 469:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JBLOCKARRAY buffer;
 470:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JBLOCKROW buffer_ptr, prev_block_row, next_block_row;
 471:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JSAMPARRAY output_ptr;
 472:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JDIMENSION output_col;
 473:fltk-1.3.4-1/jpeg/jdcoefct.c ****   jpeg_component_info *compptr;
 474:fltk-1.3.4-1/jpeg/jdcoefct.c ****   inverse_DCT_method_ptr inverse_DCT;
 475:fltk-1.3.4-1/jpeg/jdcoefct.c ****   boolean first_row, last_row;
 476:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JBLOCK workspace;
 477:fltk-1.3.4-1/jpeg/jdcoefct.c ****   int *coef_bits;
 478:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JQUANT_TBL *quanttbl;
 479:fltk-1.3.4-1/jpeg/jdcoefct.c ****   INT32 Q00,Q01,Q02,Q10,Q11,Q20, num;
 480:fltk-1.3.4-1/jpeg/jdcoefct.c ****   int DC1,DC2,DC3,DC4,DC5,DC6,DC7,DC8,DC9;
 481:fltk-1.3.4-1/jpeg/jdcoefct.c ****   int Al, pred;
 482:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 483:fltk-1.3.4-1/jpeg/jdcoefct.c ****   /* Force some input to be done if we are getting ahead of the input. */
 484:fltk-1.3.4-1/jpeg/jdcoefct.c ****   while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 945              		.loc 1 484 0
 946 0044 EB50     		jmp	.L108
 947              	.LVL111:
 948 0046 662E0F1F 		.p2align 4,,10
 948      84000000 
 948      0000
 949              		.p2align 3
 950              	.L112:
 485:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	 ! cinfo->inputctl->eoi_reached) {
 951              		.loc 1 485 0 discriminator 1
 952 0050 498B8C24 		movq	608(%r12), %rcx
 952      60020000 
 484:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	 ! cinfo->inputctl->eoi_reached) {
 953              		.loc 1 484 0 discriminator 1
 954 0058 448B6924 		movl	36(%rcx), %r13d
 955 005c 4585ED   		testl	%r13d, %r13d
 956 005f 7549     		jne	.L114
 486:fltk-1.3.4-1/jpeg/jdcoefct.c ****     if (cinfo->input_scan_number == cinfo->output_scan_number) {
 957              		.loc 1 486 0
 958 0061 39D0     		cmpl	%edx, %eax
 959 0063 7524     		jne	.L109
 960              	.LVL112:
 961              	.LBB32:
 487:fltk-1.3.4-1/jpeg/jdcoefct.c ****       /* If input is working on current scan, we ordinarily want it to
 488:fltk-1.3.4-1/jpeg/jdcoefct.c ****        * have completed the current row.  But if input scan is DC,
 489:fltk-1.3.4-1/jpeg/jdcoefct.c ****        * we want it to keep one row ahead so that next block row's DC
 490:fltk-1.3.4-1/jpeg/jdcoefct.c ****        * values are up to date.
 491:fltk-1.3.4-1/jpeg/jdcoefct.c ****        */
 492:fltk-1.3.4-1/jpeg/jdcoefct.c ****       JDIMENSION delta = (cinfo->Ss == 0) ? 1 : 0;
 493:fltk-1.3.4-1/jpeg/jdcoefct.c ****       if (cinfo->input_iMCU_row > cinfo->output_iMCU_row+delta)
 962              		.loc 1 493 0
 963 0065 458BB424 		movl	540(%r12), %r14d
 963      1C020000 
 964 006d 418BB424 		movl	184(%r12), %esi
 964      B8000000 
 965 0075 31C0     		xorl	%eax, %eax
 966 0077 4585F6   		testl	%r14d, %r14d
 967 007a 0F94C0   		sete	%al
 968 007d 01F0     		addl	%esi, %eax
 969 007f 41398424 		cmpl	%eax, 176(%r12)
 969      B0000000 
 970 0087 772C     		ja	.L110
 971              	.LVL113:
 972              	.L109:
 973              	.LBE32:
 494:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	break;
 495:fltk-1.3.4-1/jpeg/jdcoefct.c ****     }
 496:fltk-1.3.4-1/jpeg/jdcoefct.c ****     if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 974              		.loc 1 496 0
 975 0089 4C89E7   		movq	%r12, %rdi
 976 008c FF11     		call	*(%rcx)
 977              	.LVL114:
 978 008e 85C0     		testl	%eax, %eax
 979 0090 0F84E405 		je	.L111
 979      0000
 980              	.L108:
 484:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	 ! cinfo->inputctl->eoi_reached) {
 981              		.loc 1 484 0
 982 0096 418B8424 		movl	172(%r12), %eax
 982      AC000000 
 983 009e 418B9424 		movl	180(%r12), %edx
 983      B4000000 
 984 00a6 39D0     		cmpl	%edx, %eax
 985 00a8 7EA6     		jle	.L112
 986              	.L114:
 987 00aa 488B4424 		movq	56(%rsp), %rax
 987      38
 988 00af 8BB0B800 		movl	184(%rax), %esi
 988      0000
 989              	.L110:
 990              	.LVL115:
 497:fltk-1.3.4-1/jpeg/jdcoefct.c ****       return JPEG_SUSPENDED;
 498:fltk-1.3.4-1/jpeg/jdcoefct.c ****   }
 499:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 500:fltk-1.3.4-1/jpeg/jdcoefct.c ****   /* OK, output from the virtual arrays. */
 501:fltk-1.3.4-1/jpeg/jdcoefct.c ****   for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 991              		.loc 1 501 0
 992 00b5 488B4424 		movq	56(%rsp), %rax
 992      38
 993 00ba 448B5838 		movl	56(%rax), %r11d
 994 00be 488B9030 		movq	304(%rax), %rdx
 994      010000
 995 00c5 4585DB   		testl	%r11d, %r11d
 996 00c8 48895424 		movq	%rdx, 16(%rsp)
 996      10
 997              	.LVL116:
 998 00cd 0F8E8E05 		jle	.L115
 998      0000
 999 00d3 488B8424 		movq	224(%rsp), %rax
 999      E0000000 
 1000 00db 4889AC24 		movq	%rbp, 208(%rsp)
 1000      D0000000 
 1001 00e3 C78424CC 		movl	$0, 204(%rsp)
 1001      00000000 
 1001      000000
 1002 00ee 48058800 		addq	$136, %rax
 1002      0000
 1003 00f4 48898424 		movq	%rax, 216(%rsp)
 1003      D8000000 
 502:fltk-1.3.4-1/jpeg/jdcoefct.c ****        ci++, compptr++) {
 503:fltk-1.3.4-1/jpeg/jdcoefct.c ****     /* Don't bother to IDCT an uninteresting component. */
 504:fltk-1.3.4-1/jpeg/jdcoefct.c ****     if (! compptr->component_needed)
 505:fltk-1.3.4-1/jpeg/jdcoefct.c ****       continue;
 506:fltk-1.3.4-1/jpeg/jdcoefct.c ****     /* Count non-dummy DCT block rows in this iMCU row. */
 507:fltk-1.3.4-1/jpeg/jdcoefct.c ****     if (cinfo->output_iMCU_row < last_iMCU_row) {
 1004              		.loc 1 507 0
 1005 00fc 8D43FF   		leal	-1(%rbx), %eax
 1006 00ff 898424EC 		movl	%eax, 236(%rsp)
 1006      000000
 1007              	.LVL117:
 1008 0106 662E0F1F 		.p2align 4,,10
 1008      84000000 
 1008      0000
 1009              		.p2align 3
 1010              	.L149:
 504:fltk-1.3.4-1/jpeg/jdcoefct.c ****       continue;
 1011              		.loc 1 504 0
 1012 0110 488B4424 		movq	16(%rsp), %rax
 1012      10
 1013 0115 448B5034 		movl	52(%rax), %r10d
 1014 0119 4585D2   		testl	%r10d, %r10d
 1015 011c 0F840A05 		je	.L116
 1015      0000
 1016              		.loc 1 507 0
 1017 0122 39B424EC 		cmpl	%esi, 236(%rsp)
 1017      000000
 1018 0129 0F86DE06 		jbe	.L117
 1018      0000
 508:fltk-1.3.4-1/jpeg/jdcoefct.c ****       block_rows = compptr->v_samp_factor;
 1019              		.loc 1 508 0
 1020 012f 8B780C   		movl	12(%rax), %edi
 509:fltk-1.3.4-1/jpeg/jdcoefct.c ****       access_rows = block_rows * 2; /* this and next iMCU row */
 510:fltk-1.3.4-1/jpeg/jdcoefct.c ****       last_row = FALSE;
 1021              		.loc 1 510 0
 1022 0132 C78424C4 		movl	$0, 196(%rsp)
 1022      00000000 
 1022      000000
 509:fltk-1.3.4-1/jpeg/jdcoefct.c ****       access_rows = block_rows * 2; /* this and next iMCU row */
 1023              		.loc 1 509 0
 1024 013d 8D0C3F   		leal	(%rdi,%rdi), %ecx
 508:fltk-1.3.4-1/jpeg/jdcoefct.c ****       block_rows = compptr->v_samp_factor;
 1025              		.loc 1 508 0
 1026 0140 89BC24C0 		movl	%edi, 192(%rsp)
 1026      000000
 1027              	.LVL118:
 1028              	.L118:
 511:fltk-1.3.4-1/jpeg/jdcoefct.c ****     } else {
 512:fltk-1.3.4-1/jpeg/jdcoefct.c ****       /* NB: can't use last_row_height here; it is input-side-dependent! */
 513:fltk-1.3.4-1/jpeg/jdcoefct.c ****       block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 514:fltk-1.3.4-1/jpeg/jdcoefct.c ****       if (block_rows == 0) block_rows = compptr->v_samp_factor;
 515:fltk-1.3.4-1/jpeg/jdcoefct.c ****       access_rows = block_rows; /* this iMCU row only */
 516:fltk-1.3.4-1/jpeg/jdcoefct.c ****       last_row = TRUE;
 517:fltk-1.3.4-1/jpeg/jdcoefct.c ****     }
 518:fltk-1.3.4-1/jpeg/jdcoefct.c ****     /* Align the virtual buffer for this component. */
 519:fltk-1.3.4-1/jpeg/jdcoefct.c ****     if (cinfo->output_iMCU_row > 0) {
 1029              		.loc 1 519 0
 1030 0147 85F6     		testl	%esi, %esi
 1031 0149 0F849706 		je	.L119
 1031      0000
 1032              	.LVL119:
 520:fltk-1.3.4-1/jpeg/jdcoefct.c ****       access_rows += compptr->v_samp_factor; /* prior iMCU row too */
 521:fltk-1.3.4-1/jpeg/jdcoefct.c ****       buffer = (*cinfo->mem->access_virt_barray)
 1033              		.loc 1 521 0
 1034 014f 8D56FF   		leal	-1(%rsi), %edx
 1035 0152 01F9     		addl	%edi, %ecx
 1036              	.LVL120:
 1037 0154 488B9C24 		movq	216(%rsp), %rbx
 1037      D8000000 
 1038 015c 4531C0   		xorl	%r8d, %r8d
 1039 015f 0FAFD7   		imull	%edi, %edx
 1040 0162 488B7C24 		movq	56(%rsp), %rdi
 1040      38
 1041 0167 488B33   		movq	(%rbx), %rsi
 1042 016a 488B4708 		movq	8(%rdi), %rax
 1043 016e FF5040   		call	*64(%rax)
 1044              	.LVL121:
 522:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	((j_common_ptr) cinfo, coef->whole_image[ci],
 523:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	 (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
 524:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	 (JDIMENSION) access_rows, FALSE);
 525:fltk-1.3.4-1/jpeg/jdcoefct.c ****       buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 1045              		.loc 1 525 0
 1046 0171 488B5C24 		movq	16(%rsp), %rbx
 1046      10
 526:fltk-1.3.4-1/jpeg/jdcoefct.c ****       first_row = FALSE;
 1047              		.loc 1 526 0
 1048 0176 4531DB   		xorl	%r11d, %r11d
 525:fltk-1.3.4-1/jpeg/jdcoefct.c ****       first_row = FALSE;
 1049              		.loc 1 525 0
 1050 0179 4863530C 		movslq	12(%rbx), %rdx
 1051 017d 488D04D0 		leaq	(%rax,%rdx,8), %rax
 1052              	.LVL122:
 1053              	.L120:
 527:fltk-1.3.4-1/jpeg/jdcoefct.c ****     } else {
 528:fltk-1.3.4-1/jpeg/jdcoefct.c ****       buffer = (*cinfo->mem->access_virt_barray)
 529:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	((j_common_ptr) cinfo, coef->whole_image[ci],
 530:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	 (JDIMENSION) 0, (JDIMENSION) access_rows, FALSE);
 531:fltk-1.3.4-1/jpeg/jdcoefct.c ****       first_row = TRUE;
 532:fltk-1.3.4-1/jpeg/jdcoefct.c ****     }
 533:fltk-1.3.4-1/jpeg/jdcoefct.c ****     /* Fetch component-dependent info */
 534:fltk-1.3.4-1/jpeg/jdcoefct.c ****     coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 1054              		.loc 1 534 0
 1055 0181 4863AC24 		movslq	204(%rsp), %rbp
 1055      CC000000 
 1056 0189 488B9C24 		movq	224(%rsp), %rbx
 1056      E0000000 
 535:fltk-1.3.4-1/jpeg/jdcoefct.c ****     quanttbl = compptr->quant_table;
 536:fltk-1.3.4-1/jpeg/jdcoefct.c ****     Q00 = quanttbl->quantval[0];
 537:fltk-1.3.4-1/jpeg/jdcoefct.c ****     Q01 = quanttbl->quantval[Q01_POS];
 538:fltk-1.3.4-1/jpeg/jdcoefct.c ****     Q10 = quanttbl->quantval[Q10_POS];
 539:fltk-1.3.4-1/jpeg/jdcoefct.c ****     Q20 = quanttbl->quantval[Q20_POS];
 540:fltk-1.3.4-1/jpeg/jdcoefct.c ****     Q11 = quanttbl->quantval[Q11_POS];
 541:fltk-1.3.4-1/jpeg/jdcoefct.c ****     Q02 = quanttbl->quantval[Q02_POS];
 542:fltk-1.3.4-1/jpeg/jdcoefct.c ****     inverse_DCT = cinfo->idct->inverse_DCT[ci];
 543:fltk-1.3.4-1/jpeg/jdcoefct.c ****     output_ptr = output_buf[ci];
 544:fltk-1.3.4-1/jpeg/jdcoefct.c ****     /* Loop over all DCT blocks to be processed. */
 545:fltk-1.3.4-1/jpeg/jdcoefct.c ****     for (block_row = 0; block_row < block_rows; block_row++) {
 1057              		.loc 1 545 0
 1058 0191 448B8C24 		movl	192(%rsp), %r9d
 1058      C0000000 
 534:fltk-1.3.4-1/jpeg/jdcoefct.c ****     quanttbl = compptr->quant_table;
 1059              		.loc 1 534 0
 1060 0199 488B8BD8 		movq	216(%rbx), %rcx
 1060      000000
 535:fltk-1.3.4-1/jpeg/jdcoefct.c ****     quanttbl = compptr->quant_table;
 1061              		.loc 1 535 0
 1062 01a0 488B5C24 		movq	16(%rsp), %rbx
 1062      10
 534:fltk-1.3.4-1/jpeg/jdcoefct.c ****     quanttbl = compptr->quant_table;
 1063              		.loc 1 534 0
 1064 01a5 8D546D00 		leal	0(%rbp,%rbp,2), %edx
 1065 01a9 01D2     		addl	%edx, %edx
 1066              		.loc 1 545 0
 1067 01ab 4585C9   		testl	%r9d, %r9d
 534:fltk-1.3.4-1/jpeg/jdcoefct.c ****     quanttbl = compptr->quant_table;
 1068              		.loc 1 534 0
 1069 01ae 4863D2   		movslq	%edx, %rdx
 1070 01b1 4C8D3C91 		leaq	(%rcx,%rdx,4), %r15
 1071              	.LVL123:
 535:fltk-1.3.4-1/jpeg/jdcoefct.c ****     quanttbl = compptr->quant_table;
 1072              		.loc 1 535 0
 1073 01b5 488B4B50 		movq	80(%rbx), %rcx
 1074              	.LVL124:
 542:fltk-1.3.4-1/jpeg/jdcoefct.c ****     output_ptr = output_buf[ci];
 1075              		.loc 1 542 0
 1076 01b9 488B5C24 		movq	56(%rsp), %rbx
 1076      38
 1077 01be 488B9B78 		movq	632(%rbx), %rbx
 1077      020000
 536:fltk-1.3.4-1/jpeg/jdcoefct.c ****     Q01 = quanttbl->quantval[Q01_POS];
 1078              		.loc 1 536 0
 1079 01c5 0FB711   		movzwl	(%rcx), %edx
 1080              	.LVL125:
 537:fltk-1.3.4-1/jpeg/jdcoefct.c ****     Q10 = quanttbl->quantval[Q10_POS];
 1081              		.loc 1 537 0
 1082 01c8 440FB751 		movzwl	2(%rcx), %r10d
 1082      02
 1083              	.LVL126:
 538:fltk-1.3.4-1/jpeg/jdcoefct.c ****     Q20 = quanttbl->quantval[Q20_POS];
 1084              		.loc 1 538 0
 1085 01cd 440FB741 		movzwl	16(%rcx), %r8d
 1085      10
 1086              	.LVL127:
 539:fltk-1.3.4-1/jpeg/jdcoefct.c ****     Q11 = quanttbl->quantval[Q11_POS];
 1087              		.loc 1 539 0
 1088 01d2 0FB77920 		movzwl	32(%rcx), %edi
 1089              	.LVL128:
 540:fltk-1.3.4-1/jpeg/jdcoefct.c ****     Q02 = quanttbl->quantval[Q02_POS];
 1090              		.loc 1 540 0
 1091 01d6 0FB77112 		movzwl	18(%rcx), %esi
 1092              	.LVL129:
 542:fltk-1.3.4-1/jpeg/jdcoefct.c ****     output_ptr = output_buf[ci];
 1093              		.loc 1 542 0
 1094 01da 488B5CEB 		movq	8(%rbx,%rbp,8), %rbx
 1094      08
 541:fltk-1.3.4-1/jpeg/jdcoefct.c ****     inverse_DCT = cinfo->idct->inverse_DCT[ci];
 1095              		.loc 1 541 0
 1096 01df 0FB74904 		movzwl	4(%rcx), %ecx
 1097              	.LVL130:
 542:fltk-1.3.4-1/jpeg/jdcoefct.c ****     output_ptr = output_buf[ci];
 1098              		.loc 1 542 0
 1099 01e3 48895C24 		movq	%rbx, 64(%rsp)
 1099      40
 1100              	.LVL131:
 543:fltk-1.3.4-1/jpeg/jdcoefct.c ****     /* Loop over all DCT blocks to be processed. */
 1101              		.loc 1 543 0
 1102 01e8 488B9C24 		movq	208(%rsp), %rbx
 1102      D0000000 
 1103              	.LVL132:
 1104 01f0 488B1B   		movq	(%rbx), %rbx
 1105 01f3 48895C24 		movq	%rbx, 48(%rsp)
 1105      30
 1106              	.LVL133:
 1107              		.loc 1 545 0
 1108 01f8 0F8E2304 		jle	.L187
 1108      0000
 1109 01fe 4489DB   		movl	%r11d, %ebx
 1110              	.LVL134:
 1111 0201 48894424 		movq	%rax, 96(%rsp)
 1111      60
 546:fltk-1.3.4-1/jpeg/jdcoefct.c ****       buffer_ptr = buffer[block_row];
 547:fltk-1.3.4-1/jpeg/jdcoefct.c ****       if (first_row && block_row == 0)
 548:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	prev_block_row = buffer_ptr;
 549:fltk-1.3.4-1/jpeg/jdcoefct.c ****       else
 550:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	prev_block_row = buffer[block_row-1];
 551:fltk-1.3.4-1/jpeg/jdcoefct.c ****       if (last_row && block_row == block_rows-1)
 1112              		.loc 1 551 0
 1113 0206 8B8424C0 		movl	192(%rsp), %eax
 1113      000000
 1114              	.LVL135:
 1115 020d 83E301   		andl	$1, %ebx
 552:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	next_block_row = buffer_ptr;
 553:fltk-1.3.4-1/jpeg/jdcoefct.c ****       else
 554:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	next_block_row = buffer[block_row+1];
 555:fltk-1.3.4-1/jpeg/jdcoefct.c ****       /* We fetch the surrounding DC values using a sliding-register approach.
 556:fltk-1.3.4-1/jpeg/jdcoefct.c ****        * Initialize all nine here so as to do the right thing on narrow pics.
 557:fltk-1.3.4-1/jpeg/jdcoefct.c ****        */
 558:fltk-1.3.4-1/jpeg/jdcoefct.c ****       DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 559:fltk-1.3.4-1/jpeg/jdcoefct.c ****       DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 560:fltk-1.3.4-1/jpeg/jdcoefct.c ****       DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 561:fltk-1.3.4-1/jpeg/jdcoefct.c ****       output_col = 0;
 562:fltk-1.3.4-1/jpeg/jdcoefct.c ****       last_block_column = compptr->width_in_blocks - 1;
 563:fltk-1.3.4-1/jpeg/jdcoefct.c ****       for (block_num = 0; block_num <= last_block_column; block_num++) {
 564:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	/* Fetch current DCT block into workspace so we can modify it. */
 565:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 566:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	/* Update DC values */
 567:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	if (block_num < last_block_column) {
 568:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  DC3 = (int) prev_block_row[1][0];
 569:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  DC6 = (int) buffer_ptr[1][0];
 570:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  DC9 = (int) next_block_row[1][0];
 571:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	}
 572:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	/* Compute coefficient estimates per K.8.
 573:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	 * An estimate is applied only if coefficient is still zero,
 574:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	 * and is not known to be fully accurate.
 575:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	 */
 576:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	/* AC01 */
 577:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	if ((Al=coef_bits[1]) != 0 && workspace[1] == 0) {
 578:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  num = 36 * Q00 * (DC4 - DC6);
 579:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  if (num >= 0) {
 580:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 581:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 582:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 583:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  } else {
 584:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 585:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 586:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 587:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    pred = -pred;
 588:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  }
 589:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  workspace[1] = (JCOEF) pred;
 590:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	}
 591:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	/* AC10 */
 592:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	if ((Al=coef_bits[2]) != 0 && workspace[8] == 0) {
 593:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  num = 36 * Q00 * (DC2 - DC8);
 594:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  if (num >= 0) {
 595:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 596:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 597:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 598:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  } else {
 599:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 600:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 601:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 602:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    pred = -pred;
 603:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  }
 604:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  workspace[8] = (JCOEF) pred;
 605:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	}
 606:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	/* AC20 */
 607:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	if ((Al=coef_bits[3]) != 0 && workspace[16] == 0) {
 608:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
 609:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  if (num >= 0) {
 610:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 611:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 612:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 613:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  } else {
 614:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 615:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 616:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 617:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    pred = -pred;
 618:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  }
 619:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  workspace[16] = (JCOEF) pred;
 620:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	}
 621:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	/* AC11 */
 622:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	if ((Al=coef_bits[4]) != 0 && workspace[9] == 0) {
 623:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
 624:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  if (num >= 0) {
 625:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 626:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 627:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 628:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  } else {
 629:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 630:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 631:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 632:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    pred = -pred;
 633:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  }
 634:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  workspace[9] = (JCOEF) pred;
 635:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	}
 636:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	/* AC02 */
 637:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	if ((Al=coef_bits[5]) != 0 && workspace[2] == 0) {
 638:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
 639:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  if (num >= 0) {
 640:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 1116              		.loc 1 640 0
 1117 0210 C744245C 		movl	$0, 92(%rsp)
 1117      00000000 
 1118 0218 889C24CB 		movb	%bl, 203(%rsp)
 1118      000000
 1119 021f 488D1CD2 		leaq	(%rdx,%rdx,8), %rbx
 551:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	next_block_row = buffer_ptr;
 1120              		.loc 1 551 0
 1121 0223 83E801   		subl	$1, %eax
 1122 0226 48895C24 		movq	%rbx, 72(%rsp)
 1122      48
 1123 022b 48C1E302 		salq	$2, %rbx
 1124 022f 898424E8 		movl	%eax, 232(%rsp)
 1124      000000
 1125 0236 48895C24 		movq	%rbx, 80(%rsp)
 1125      50
 580:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 1126              		.loc 1 580 0
 1127 023b 4C89D3   		movq	%r10, %rbx
 1128 023e 49C1E208 		salq	$8, %r10
 1129              	.LVL136:
 1130 0242 48C1E307 		salq	$7, %rbx
 1131              	.LVL137:
 1132 0246 4C895424 		movq	%r10, 112(%rsp)
 1132      70
 1133 024b 48895C24 		movq	%rbx, 104(%rsp)
 1133      68
 595:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 1134              		.loc 1 595 0
 1135 0250 4C89C3   		movq	%r8, %rbx
 1136 0253 49C1E008 		salq	$8, %r8
 1137              	.LVL138:
 1138 0257 48C1E307 		salq	$7, %rbx
 1139              	.LVL139:
 1140 025b 4C898424 		movq	%r8, 128(%rsp)
 1140      80000000 
 1141 0263 48895C24 		movq	%rbx, 120(%rsp)
 1141      78
 610:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 1142              		.loc 1 610 0
 1143 0268 4889FB   		movq	%rdi, %rbx
 1144 026b 48C1E708 		salq	$8, %rdi
 1145              	.LVL140:
 1146 026f 48C1E307 		salq	$7, %rbx
 1147              	.LVL141:
 1148 0273 4889BC24 		movq	%rdi, 144(%rsp)
 1148      90000000 
 1149 027b 48899C24 		movq	%rbx, 136(%rsp)
 1149      88000000 
 1150 0283 488D1C92 		leaq	(%rdx,%rdx,4), %rbx
 1151 0287 48899C24 		movq	%rbx, 184(%rsp)
 1151      B8000000 
 625:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 1152              		.loc 1 625 0
 1153 028f 4889F3   		movq	%rsi, %rbx
 1154 0292 48C1E608 		salq	$8, %rsi
 1155              	.LVL142:
 1156 0296 48C1E307 		salq	$7, %rbx
 1157              	.LVL143:
 1158 029a 4889B424 		movq	%rsi, 160(%rsp)
 1158      A0000000 
 1159 02a2 48899C24 		movq	%rbx, 152(%rsp)
 1159      98000000 
 1160              		.loc 1 640 0
 1161 02aa 4889CB   		movq	%rcx, %rbx
 1162 02ad 48C1E108 		salq	$8, %rcx
 1163              	.LVL144:
 1164 02b1 48C1E307 		salq	$7, %rbx
 1165              	.LVL145:
 1166 02b5 48898C24 		movq	%rcx, 176(%rsp)
 1166      B0000000 
 1167 02bd 48899C24 		movq	%rbx, 168(%rsp)
 1167      A8000000 
 1168              	.LVL146:
 1169              		.p2align 4,,10
 1170 02c5 0F1F00   		.p2align 3
 1171              	.L148:
 547:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	prev_block_row = buffer_ptr;
 1172              		.loc 1 547 0
 1173 02c8 8B54245C 		movl	92(%rsp), %edx
 546:fltk-1.3.4-1/jpeg/jdcoefct.c ****       if (first_row && block_row == 0)
 1174              		.loc 1 546 0
 1175 02cc 488B4424 		movq	96(%rsp), %rax
 1175      60
 547:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	prev_block_row = buffer_ptr;
 1176              		.loc 1 547 0
 1177 02d1 85D2     		testl	%edx, %edx
 546:fltk-1.3.4-1/jpeg/jdcoefct.c ****       if (first_row && block_row == 0)
 1178              		.loc 1 546 0
 1179 02d3 488B18   		movq	(%rax), %rbx
 1180              	.LVL147:
 547:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	prev_block_row = buffer_ptr;
 1181              		.loc 1 547 0
 1182 02d6 0F85FC04 		jne	.L157
 1182      0000
 1183 02dc 80BC24CB 		cmpb	$0, 203(%rsp)
 1183      00000000 
 546:fltk-1.3.4-1/jpeg/jdcoefct.c ****       if (first_row && block_row == 0)
 1184              		.loc 1 546 0
 1185 02e4 4989DE   		movq	%rbx, %r14
 547:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	prev_block_row = buffer_ptr;
 1186              		.loc 1 547 0
 1187 02e7 0F84EB04 		je	.L157
 1187      0000
 1188              	.L122:
 1189              	.LVL148:
 551:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	next_block_row = buffer_ptr;
 1190              		.loc 1 551 0
 1191 02ed 8B8424C4 		movl	196(%rsp), %eax
 1191      000000
 1192 02f4 85C0     		testl	%eax, %eax
 1193 02f6 7410     		je	.L124
 551:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	next_block_row = buffer_ptr;
 1194              		.loc 1 551 0 is_stmt 0 discriminator 1
 1195 02f8 8B9424E8 		movl	232(%rsp), %edx
 1195      000000
 1196 02ff 3954245C 		cmpl	%edx, 92(%rsp)
 546:fltk-1.3.4-1/jpeg/jdcoefct.c ****       if (first_row && block_row == 0)
 1197              		.loc 1 546 0 is_stmt 1 discriminator 1
 1198 0303 4989DC   		movq	%rbx, %r12
 551:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	next_block_row = buffer_ptr;
 1199              		.loc 1 551 0 discriminator 1
 1200 0306 7409     		je	.L125
 1201              	.L124:
 554:fltk-1.3.4-1/jpeg/jdcoefct.c ****       /* We fetch the surrounding DC values using a sliding-register approach.
 1202              		.loc 1 554 0
 1203 0308 488B4424 		movq	96(%rsp), %rax
 1203      60
 1204 030d 4C8B6008 		movq	8(%rax), %r12
 1205              	.LVL149:
 1206              	.L125:
 562:fltk-1.3.4-1/jpeg/jdcoefct.c ****       for (block_num = 0; block_num <= last_block_column; block_num++) {
 1207              		.loc 1 562 0
 1208 0311 488B7424 		movq	16(%rsp), %rsi
 1208      10
 558:fltk-1.3.4-1/jpeg/jdcoefct.c ****       DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 1209              		.loc 1 558 0
 1210 0316 410FBF06 		movswl	(%r14), %eax
 561:fltk-1.3.4-1/jpeg/jdcoefct.c ****       last_block_column = compptr->width_in_blocks - 1;
 1211              		.loc 1 561 0
 1212 031a 4531ED   		xorl	%r13d, %r13d
 559:fltk-1.3.4-1/jpeg/jdcoefct.c ****       DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 1213              		.loc 1 559 0
 1214 031d 0FBF3B   		movswl	(%rbx), %edi
 560:fltk-1.3.4-1/jpeg/jdcoefct.c ****       output_col = 0;
 1215              		.loc 1 560 0
 1216 0320 410FBF14 		movswl	(%r12), %edx
 1216      24
 563:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	/* Fetch current DCT block into workspace so we can modify it. */
 1217              		.loc 1 563 0
 1218 0325 31ED     		xorl	%ebp, %ebp
 562:fltk-1.3.4-1/jpeg/jdcoefct.c ****       for (block_num = 0; block_num <= last_block_column; block_num++) {
 1219              		.loc 1 562 0
 1220 0327 8B761C   		movl	28(%rsi), %esi
 558:fltk-1.3.4-1/jpeg/jdcoefct.c ****       DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 1221              		.loc 1 558 0
 1222 032a 89442404 		movl	%eax, 4(%rsp)
 1223              	.LVL150:
 1224 032e 8944242C 		movl	%eax, 44(%rsp)
 559:fltk-1.3.4-1/jpeg/jdcoefct.c ****       DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 1225              		.loc 1 559 0
 1226 0332 897C2408 		movl	%edi, 8(%rsp)
 1227              	.LVL151:
 560:fltk-1.3.4-1/jpeg/jdcoefct.c ****       output_col = 0;
 1228              		.loc 1 560 0
 1229 0336 8954240C 		movl	%edx, 12(%rsp)
 1230              	.LVL152:
 562:fltk-1.3.4-1/jpeg/jdcoefct.c ****       for (block_num = 0; block_num <= last_block_column; block_num++) {
 1231              		.loc 1 562 0
 1232 033a 89742418 		movl	%esi, 24(%rsp)
 1233 033e 83EE01   		subl	$1, %esi
 560:fltk-1.3.4-1/jpeg/jdcoefct.c ****       output_col = 0;
 1234              		.loc 1 560 0
 1235 0341 89542458 		movl	%edx, 88(%rsp)
 562:fltk-1.3.4-1/jpeg/jdcoefct.c ****       for (block_num = 0; block_num <= last_block_column; block_num++) {
 1236              		.loc 1 562 0
 1237 0345 89742420 		movl	%esi, 32(%rsp)
 1238              	.LVL153:
 559:fltk-1.3.4-1/jpeg/jdcoefct.c ****       DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 1239              		.loc 1 559 0
 1240 0349 897C2428 		movl	%edi, 40(%rsp)
 1241 034d EB16     		jmp	.L147
 1242              	.LVL154:
 1243 034f 90       		.p2align 4,,10
 1244              		.p2align 3
 1245              	.L155:
 641:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 642:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 643:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  } else {
 644:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 645:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 646:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 647:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    pred = -pred;
 648:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  }
 649:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  workspace[2] = (JCOEF) pred;
 650:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	}
 651:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	/* OK, do the IDCT */
 652:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 653:fltk-1.3.4-1/jpeg/jdcoefct.c **** 			output_ptr, output_col);
 654:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	/* Advance for next column */
 655:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	DC1 = DC2; DC2 = DC3;
 656:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	DC4 = DC5; DC5 = DC6;
 657:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	DC7 = DC8; DC8 = DC9;
 1246              		.loc 1 657 0
 1247 0350 8B44241C 		movl	28(%rsp), %eax
 1248              	.LVL155:
 656:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	DC7 = DC8; DC8 = DC9;
 1249              		.loc 1 656 0
 1250 0354 44895424 		movl	%r10d, 8(%rsp)
 1250      08
 1251              	.LVL156:
 1252              		.loc 1 657 0
 1253 0359 8944240C 		movl	%eax, 12(%rsp)
 1254              	.LVL157:
 655:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	DC4 = DC5; DC5 = DC6;
 1255              		.loc 1 655 0
 1256 035d 8B442418 		movl	24(%rsp), %eax
 1257 0361 89442404 		movl	%eax, 4(%rsp)
 1258              	.LVL158:
 1259              	.L147:
 565:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	/* Update DC values */
 1260              		.loc 1 565 0
 1261 0365 488DB424 		leaq	240(%rsp), %rsi
 1261      F0000000 
 1262 036d BA010000 		movl	$1, %edx
 1262      00
 1263 0372 4889DF   		movq	%rbx, %rdi
 1264 0375 E8000000 		call	jcopy_block_row
 1264      00
 1265              	.LVL159:
 567:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  DC3 = (int) prev_block_row[1][0];
 1266              		.loc 1 567 0
 1267 037a 396C2420 		cmpl	%ebp, 32(%rsp)
 1268 037e 0F86B804 		jbe	.L154
 1268      0000
 568:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  DC6 = (int) buffer_ptr[1][0];
 1269              		.loc 1 568 0
 1270 0384 410FBF86 		movswl	128(%r14), %eax
 1270      80000000 
 569:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  DC9 = (int) next_block_row[1][0];
 1271              		.loc 1 569 0
 1272 038c 440FBF93 		movswl	128(%rbx), %r10d
 1272      80000000 
 568:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  DC6 = (int) buffer_ptr[1][0];
 1273              		.loc 1 568 0
 1274 0394 89442418 		movl	%eax, 24(%rsp)
 1275              	.LVL160:
 570:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	}
 1276              		.loc 1 570 0
 1277 0398 410FBF84 		movswl	128(%r12), %eax
 1277      24800000 
 1277      00
 1278              	.LVL161:
 1279 03a1 8944241C 		movl	%eax, 28(%rsp)
 1280              	.LVL162:
 1281              	.L126:
 577:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  num = 36 * Q00 * (DC4 - DC6);
 1282              		.loc 1 577 0
 1283 03a5 418B4F04 		movl	4(%r15), %ecx
 1284              	.LVL163:
 1285 03a9 85C9     		testl	%ecx, %ecx
 1286 03ab 744E     		je	.L127
 577:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  num = 36 * Q00 * (DC4 - DC6);
 1287              		.loc 1 577 0 is_stmt 0 discriminator 1
 1288 03ad 6683BC24 		cmpw	$0, 242(%rsp)
 1288      F2000000 
 1288      00
 1289 03b6 7543     		jne	.L127
 578:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  if (num >= 0) {
 1290              		.loc 1 578 0 is_stmt 1
 1291 03b8 8B442428 		movl	40(%rsp), %eax
 1292 03bc 4429D0   		subl	%r10d, %eax
 1293 03bf 4898     		cltq
 1294 03c1 480FAF44 		imulq	80(%rsp), %rax
 1294      2450
 1295              	.LVL164:
 579:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 1296              		.loc 1 579 0
 1297 03c7 4885C0   		testq	%rax, %rax
 1298 03ca 0F88D802 		js	.L128
 1298      0000
 580:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 1299              		.loc 1 580 0
 1300 03d0 48034424 		addq	104(%rsp), %rax
 1300      68
 1301              	.LVL165:
 1302 03d5 4899     		cqto
 1303 03d7 48F77C24 		idivq	112(%rsp)
 1303      70
 581:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1304              		.loc 1 581 0
 1305 03dc 85C9     		testl	%ecx, %ecx
 580:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 1306              		.loc 1 580 0
 1307 03de 89C2     		movl	%eax, %edx
 1308              	.LVL166:
 581:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1309              		.loc 1 581 0
 1310 03e0 7E11     		jle	.L129
 581:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1311              		.loc 1 581 0 is_stmt 0 discriminator 1
 1312 03e2 BE010000 		movl	$1, %esi
 1312      00
 1313 03e7 D3E6     		sall	%cl, %esi
 1314 03e9 89F1     		movl	%esi, %ecx
 1315              	.LVL167:
 582:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  } else {
 1316              		.loc 1 582 0 is_stmt 1 discriminator 1
 1317 03eb 8D76FF   		leal	-1(%rsi), %esi
 1318 03ee 39C1     		cmpl	%eax, %ecx
 1319 03f0 0F4ED6   		cmovle	%esi, %edx
 1320              	.LVL168:
 1321              	.L129:
 589:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	}
 1322              		.loc 1 589 0
 1323 03f3 66899424 		movw	%dx, 242(%rsp)
 1323      F2000000 
 1324              	.LVL169:
 1325              	.L127:
 592:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  num = 36 * Q00 * (DC2 - DC8);
 1326              		.loc 1 592 0
 1327 03fb 418B4F08 		movl	8(%r15), %ecx
 1328              	.LVL170:
 1329 03ff 85C9     		testl	%ecx, %ecx
 1330 0401 7452     		je	.L131
 592:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  num = 36 * Q00 * (DC2 - DC8);
 1331              		.loc 1 592 0 is_stmt 0 discriminator 1
 1332 0403 6683BC24 		cmpw	$0, 256(%rsp)
 1332      00010000 
 1332      00
 1333 040c 7547     		jne	.L131
 593:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  if (num >= 0) {
 1334              		.loc 1 593 0 is_stmt 1
 1335 040e 8B442404 		movl	4(%rsp), %eax
 1336 0412 2B44240C 		subl	12(%rsp), %eax
 1337 0416 4898     		cltq
 1338 0418 480FAF44 		imulq	80(%rsp), %rax
 1338      2450
 1339              	.LVL171:
 594:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 1340              		.loc 1 594 0
 1341 041e 4885C0   		testq	%rax, %rax
 1342 0421 0F887903 		js	.L132
 1342      0000
 595:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 1343              		.loc 1 595 0
 1344 0427 48034424 		addq	120(%rsp), %rax
 1344      78
 1345              	.LVL172:
 1346 042c 4899     		cqto
 1347 042e 48F7BC24 		idivq	128(%rsp)
 1347      80000000 
 596:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1348              		.loc 1 596 0
 1349 0436 85C9     		testl	%ecx, %ecx
 595:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 1350              		.loc 1 595 0
 1351 0438 89C2     		movl	%eax, %edx
 1352              	.LVL173:
 596:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1353              		.loc 1 596 0
 1354 043a 7E11     		jle	.L133
 596:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1355              		.loc 1 596 0 is_stmt 0 discriminator 1
 1356 043c BE010000 		movl	$1, %esi
 1356      00
 1357 0441 D3E6     		sall	%cl, %esi
 1358 0443 89F1     		movl	%esi, %ecx
 1359              	.LVL174:
 597:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  } else {
 1360              		.loc 1 597 0 is_stmt 1 discriminator 1
 1361 0445 8D76FF   		leal	-1(%rsi), %esi
 1362 0448 39C1     		cmpl	%eax, %ecx
 1363 044a 0F4ED6   		cmovle	%esi, %edx
 1364              	.LVL175:
 1365              	.L133:
 604:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	}
 1366              		.loc 1 604 0
 1367 044d 66899424 		movw	%dx, 256(%rsp)
 1367      00010000 
 1368              	.LVL176:
 1369              	.L131:
 607:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
 1370              		.loc 1 607 0
 1371 0455 418B4F0C 		movl	12(%r15), %ecx
 1372              	.LVL177:
 1373 0459 85C9     		testl	%ecx, %ecx
 1374 045b 745E     		je	.L135
 607:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
 1375              		.loc 1 607 0 is_stmt 0 discriminator 1
 1376 045d 6683BC24 		cmpw	$0, 272(%rsp)
 1376      10010000 
 1376      00
 1377 0466 7553     		jne	.L135
 608:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  if (num >= 0) {
 1378              		.loc 1 608 0 is_stmt 1
 1379 0468 8B7C2408 		movl	8(%rsp), %edi
 1380 046c 8B44240C 		movl	12(%rsp), %eax
 1381 0470 03442404 		addl	4(%rsp), %eax
 1382 0474 8D143F   		leal	(%rdi,%rdi), %edx
 1383 0477 29D0     		subl	%edx, %eax
 1384 0479 4898     		cltq
 1385 047b 480FAF44 		imulq	72(%rsp), %rax
 1385      2448
 1386              	.LVL178:
 609:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 1387              		.loc 1 609 0
 1388 0481 4885C0   		testq	%rax, %rax
 1389 0484 0F88D602 		js	.L136
 1389      0000
 610:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 1390              		.loc 1 610 0
 1391 048a 48038424 		addq	136(%rsp), %rax
 1391      88000000 
 1392              	.LVL179:
 1393 0492 4899     		cqto
 1394              	.LVL180:
 1395 0494 48F7BC24 		idivq	144(%rsp)
 1395      90000000 
 611:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1396              		.loc 1 611 0
 1397 049c 85C9     		testl	%ecx, %ecx
 610:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 1398              		.loc 1 610 0
 1399 049e 89C2     		movl	%eax, %edx
 1400              	.LVL181:
 611:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1401              		.loc 1 611 0
 1402 04a0 7E11     		jle	.L137
 611:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1403              		.loc 1 611 0 is_stmt 0 discriminator 1
 1404 04a2 BE010000 		movl	$1, %esi
 1404      00
 1405 04a7 D3E6     		sall	%cl, %esi
 1406 04a9 89F1     		movl	%esi, %ecx
 1407              	.LVL182:
 612:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  } else {
 1408              		.loc 1 612 0 is_stmt 1 discriminator 1
 1409 04ab 8D76FF   		leal	-1(%rsi), %esi
 1410 04ae 39C1     		cmpl	%eax, %ecx
 1411 04b0 0F4ED6   		cmovle	%esi, %edx
 1412              	.LVL183:
 1413              	.L137:
 619:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	}
 1414              		.loc 1 619 0
 1415 04b3 66899424 		movw	%dx, 272(%rsp)
 1415      10010000 
 1416              	.LVL184:
 1417              	.L135:
 622:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
 1418              		.loc 1 622 0
 1419 04bb 418B4F10 		movl	16(%r15), %ecx
 1420              	.LVL185:
 1421 04bf 85C9     		testl	%ecx, %ecx
 1422 04c1 7460     		je	.L139
 622:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
 1423              		.loc 1 622 0 is_stmt 0 discriminator 1
 1424 04c3 6683BC24 		cmpw	$0, 258(%rsp)
 1424      02010000 
 1424      00
 1425 04cc 7555     		jne	.L139
 623:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  if (num >= 0) {
 1426              		.loc 1 623 0 is_stmt 1
 1427 04ce 8B44242C 		movl	44(%rsp), %eax
 1428 04d2 2B442418 		subl	24(%rsp), %eax
 1429 04d6 2B442458 		subl	88(%rsp), %eax
 1430 04da 0344241C 		addl	28(%rsp), %eax
 1431 04de 4898     		cltq
 1432 04e0 480FAF84 		imulq	184(%rsp), %rax
 1432      24B80000 
 1432      00
 1433              	.LVL186:
 624:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 1434              		.loc 1 624 0
 1435 04e9 4885C0   		testq	%rax, %rax
 1436 04ec 0F882E02 		js	.L140
 1436      0000
 625:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 1437              		.loc 1 625 0
 1438 04f2 48038424 		addq	152(%rsp), %rax
 1438      98000000 
 1439              	.LVL187:
 1440 04fa 4899     		cqto
 1441 04fc 48F7BC24 		idivq	160(%rsp)
 1441      A0000000 
 626:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1442              		.loc 1 626 0
 1443 0504 85C9     		testl	%ecx, %ecx
 625:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 1444              		.loc 1 625 0
 1445 0506 89C2     		movl	%eax, %edx
 1446              	.LVL188:
 626:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1447              		.loc 1 626 0
 1448 0508 7E11     		jle	.L141
 626:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1449              		.loc 1 626 0 is_stmt 0 discriminator 1
 1450 050a BE010000 		movl	$1, %esi
 1450      00
 1451 050f D3E6     		sall	%cl, %esi
 1452 0511 89F1     		movl	%esi, %ecx
 1453              	.LVL189:
 627:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  } else {
 1454              		.loc 1 627 0 is_stmt 1 discriminator 1
 1455 0513 8D76FF   		leal	-1(%rsi), %esi
 1456 0516 39C1     		cmpl	%eax, %ecx
 1457 0518 0F4ED6   		cmovle	%esi, %edx
 1458              	.LVL190:
 1459              	.L141:
 634:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	}
 1460              		.loc 1 634 0
 1461 051b 66899424 		movw	%dx, 258(%rsp)
 1461      02010000 
 1462              	.LVL191:
 1463              	.L139:
 637:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
 1464              		.loc 1 637 0
 1465 0523 418B4F14 		movl	20(%r15), %ecx
 1466              	.LVL192:
 1467 0527 85C9     		testl	%ecx, %ecx
 1468 0529 745D     		je	.L143
 637:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
 1469              		.loc 1 637 0 is_stmt 0 discriminator 1
 1470 052b 6683BC24 		cmpw	$0, 244(%rsp)
 1470      F4000000 
 1470      00
 1471 0534 7552     		jne	.L143
 638:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  if (num >= 0) {
 1472              		.loc 1 638 0 is_stmt 1
 1473 0536 8B742408 		movl	8(%rsp), %esi
 1474 053a 8B442428 		movl	40(%rsp), %eax
 1475 053e 8D1436   		leal	(%rsi,%rsi), %edx
 1476 0541 4401D0   		addl	%r10d, %eax
 1477 0544 29D0     		subl	%edx, %eax
 1478 0546 4898     		cltq
 1479 0548 480FAF44 		imulq	72(%rsp), %rax
 1479      2448
 1480              	.LVL193:
 639:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 1481              		.loc 1 639 0
 1482 054e 4885C0   		testq	%rax, %rax
 1483 0551 0F888901 		js	.L144
 1483      0000
 640:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 1484              		.loc 1 640 0
 1485 0557 48038424 		addq	168(%rsp), %rax
 1485      A8000000 
 1486              	.LVL194:
 1487 055f 4899     		cqto
 1488              	.LVL195:
 1489 0561 48F7BC24 		idivq	176(%rsp)
 1489      B0000000 
 641:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1490              		.loc 1 641 0
 1491 0569 85C9     		testl	%ecx, %ecx
 640:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 1492              		.loc 1 640 0
 1493 056b 89C2     		movl	%eax, %edx
 1494              	.LVL196:
 641:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1495              		.loc 1 641 0
 1496 056d 7E11     		jle	.L145
 641:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1497              		.loc 1 641 0 is_stmt 0 discriminator 1
 1498 056f BE010000 		movl	$1, %esi
 1498      00
 1499              	.LVL197:
 1500 0574 D3E6     		sall	%cl, %esi
 1501 0576 89F1     		movl	%esi, %ecx
 1502              	.LVL198:
 642:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  } else {
 1503              		.loc 1 642 0 is_stmt 1 discriminator 1
 1504 0578 8D76FF   		leal	-1(%rsi), %esi
 1505 057b 39C1     		cmpl	%eax, %ecx
 1506 057d 0F4ED6   		cmovle	%esi, %edx
 1507              	.LVL199:
 1508              	.L145:
 649:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	}
 1509              		.loc 1 649 0
 1510 0580 66899424 		movw	%dx, 244(%rsp)
 1510      F4000000 
 1511              	.LVL200:
 1512              	.L143:
 1513 0588 44895424 		movl	%r10d, 36(%rsp)
 1513      24
 652:fltk-1.3.4-1/jpeg/jdcoefct.c **** 			output_ptr, output_col);
 1514              		.loc 1 652 0 discriminator 2
 1515 058d 4589E8   		movl	%r13d, %r8d
 1516 0590 488B4C24 		movq	48(%rsp), %rcx
 1516      30
 1517 0595 488D9424 		leaq	240(%rsp), %rdx
 1517      F0000000 
 1518 059d 488B7424 		movq	16(%rsp), %rsi
 1518      10
 1519 05a2 488B7C24 		movq	56(%rsp), %rdi
 1519      38
 1520 05a7 4C8B4C24 		movq	64(%rsp), %r9
 1520      40
 658:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	buffer_ptr++, prev_block_row++, next_block_row++;
 1521              		.loc 1 658 0 discriminator 2
 1522 05ac 4883EB80 		subq	$-128, %rbx
 1523              	.LVL201:
 1524 05b0 4983EE80 		subq	$-128, %r14
 1525              	.LVL202:
 652:fltk-1.3.4-1/jpeg/jdcoefct.c **** 			output_ptr, output_col);
 1526              		.loc 1 652 0 discriminator 2
 1527 05b4 41FFD1   		call	*%r9
 1528              	.LVL203:
 659:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	output_col += compptr->DCT_h_scaled_size;
 1529              		.loc 1 659 0 discriminator 2
 1530 05b7 488B4424 		movq	16(%rsp), %rax
 1530      10
 658:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	buffer_ptr++, prev_block_row++, next_block_row++;
 1531              		.loc 1 658 0 discriminator 2
 1532 05bc 4983EC80 		subq	$-128, %r12
 1533              	.LVL204:
 563:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	/* Fetch current DCT block into workspace so we can modify it. */
 1534              		.loc 1 563 0 discriminator 2
 1535 05c0 83C501   		addl	$1, %ebp
 1536              	.LVL205:
 1537 05c3 448B5424 		movl	36(%rsp), %r10d
 1537      24
 1538              		.loc 1 659 0 discriminator 2
 1539 05c8 44036824 		addl	36(%rax), %r13d
 1540              	.LVL206:
 1541 05cc 8B442404 		movl	4(%rsp), %eax
 563:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	/* Fetch current DCT block into workspace so we can modify it. */
 1542              		.loc 1 563 0 discriminator 2
 1543 05d0 396C2420 		cmpl	%ebp, 32(%rsp)
 1544 05d4 8944242C 		movl	%eax, 44(%rsp)
 1545 05d8 8B442408 		movl	8(%rsp), %eax
 1546 05dc 89442428 		movl	%eax, 40(%rsp)
 1547 05e0 8B44240C 		movl	12(%rsp), %eax
 1548 05e4 89442458 		movl	%eax, 88(%rsp)
 1549 05e8 0F8362FD 		jnb	.L155
 1549      FFFF
 660:fltk-1.3.4-1/jpeg/jdcoefct.c ****       }
 661:fltk-1.3.4-1/jpeg/jdcoefct.c ****       output_ptr += compptr->DCT_v_scaled_size;
 1550              		.loc 1 661 0 discriminator 2
 1551 05ee 488B4424 		movq	16(%rsp), %rax
 1551      10
 1552 05f3 488B5C24 		movq	48(%rsp), %rbx
 1552      30
 1553              	.LVL207:
 545:fltk-1.3.4-1/jpeg/jdcoefct.c ****       buffer_ptr = buffer[block_row];
 1554              		.loc 1 545 0 discriminator 2
 1555 05f8 8344245C 		addl	$1, 92(%rsp)
 1555      01
 1556              	.LVL208:
 1557 05fd 48834424 		addq	$8, 96(%rsp)
 1557      6008
 1558              		.loc 1 661 0 discriminator 2
 1559 0603 48634028 		movslq	40(%rax), %rax
 1560 0607 488D04C3 		leaq	(%rbx,%rax,8), %rax
 1561 060b 48894424 		movq	%rax, 48(%rsp)
 1561      30
 1562              	.LVL209:
 545:fltk-1.3.4-1/jpeg/jdcoefct.c ****       buffer_ptr = buffer[block_row];
 1563              		.loc 1 545 0 discriminator 2
 1564 0610 8B44245C 		movl	92(%rsp), %eax
 1565              	.LVL210:
 1566 0614 398424C0 		cmpl	%eax, 192(%rsp)
 1566      000000
 1567 061b 0F85A7FC 		jne	.L148
 1567      FFFF
 1568              	.LVL211:
 1569              	.L187:
 1570 0621 488B4424 		movq	56(%rsp), %rax
 1570      38
 1571 0626 8BB0B800 		movl	184(%rax), %esi
 1571      0000
 1572              	.LVL212:
 1573              	.L116:
 501:fltk-1.3.4-1/jpeg/jdcoefct.c ****        ci++, compptr++) {
 1574              		.loc 1 501 0
 1575 062c 488B5C24 		movq	56(%rsp), %rbx
 1575      38
 502:fltk-1.3.4-1/jpeg/jdcoefct.c ****     /* Don't bother to IDCT an uninteresting component. */
 1576              		.loc 1 502 0
 1577 0631 838424CC 		addl	$1, 204(%rsp)
 1577      00000001 
 1578              	.LVL213:
 1579 0639 8B8424CC 		movl	204(%rsp), %eax
 1579      000000
 1580              	.LVL214:
 1581 0640 48834424 		addq	$96, 16(%rsp)
 1581      1060
 1582              	.LVL215:
 1583 0646 48838424 		addq	$8, 208(%rsp)
 1583      D0000000 
 1583      08
 1584 064f 48838424 		addq	$8, 216(%rsp)
 1584      D8000000 
 1584      08
 501:fltk-1.3.4-1/jpeg/jdcoefct.c ****        ci++, compptr++) {
 1585              		.loc 1 501 0
 1586 0658 394338   		cmpl	%eax, 56(%rbx)
 1587 065b 0F8FAFFA 		jg	.L149
 1587      FFFF
 1588              	.LVL216:
 1589              	.L115:
 662:fltk-1.3.4-1/jpeg/jdcoefct.c ****     }
 663:fltk-1.3.4-1/jpeg/jdcoefct.c ****   }
 664:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 665:fltk-1.3.4-1/jpeg/jdcoefct.c ****   if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 1590              		.loc 1 665 0
 1591 0661 488B4424 		movq	56(%rsp), %rax
 1591      38
 1592 0666 83C601   		addl	$1, %esi
 666:fltk-1.3.4-1/jpeg/jdcoefct.c ****     return JPEG_ROW_COMPLETED;
 1593              		.loc 1 666 0
 1594 0669 3BB0B001 		cmpl	432(%rax), %esi
 1594      0000
 665:fltk-1.3.4-1/jpeg/jdcoefct.c ****     return JPEG_ROW_COMPLETED;
 1595              		.loc 1 665 0
 1596 066f 89B0B800 		movl	%esi, 184(%rax)
 1596      0000
 1597              		.loc 1 666 0
 1598 0675 19C0     		sbbl	%eax, %eax
 1599 0677 83C004   		addl	$4, %eax
 1600              	.L111:
 667:fltk-1.3.4-1/jpeg/jdcoefct.c ****   return JPEG_SCAN_COMPLETED;
 668:fltk-1.3.4-1/jpeg/jdcoefct.c **** }
 1601              		.loc 1 668 0
 1602 067a 488B9C24 		movq	376(%rsp), %rbx
 1602      78010000 
 1603 0682 6448331C 		xorq	%fs:40, %rbx
 1603      25280000 
 1603      00
 1604 068b 0F85C501 		jne	.L188
 1604      0000
 1605 0691 4881C488 		addq	$392, %rsp
 1605      010000
 1606              		.cfi_remember_state
 1607              		.cfi_def_cfa_offset 56
 1608 0698 5B       		popq	%rbx
 1609              		.cfi_def_cfa_offset 48
 1610 0699 5D       		popq	%rbp
 1611              		.cfi_def_cfa_offset 40
 1612 069a 415C     		popq	%r12
 1613              		.cfi_def_cfa_offset 32
 1614 069c 415D     		popq	%r13
 1615              		.cfi_def_cfa_offset 24
 1616 069e 415E     		popq	%r14
 1617              		.cfi_def_cfa_offset 16
 1618 06a0 415F     		popq	%r15
 1619              		.cfi_def_cfa_offset 8
 1620 06a2 C3       		ret
 1621              	.LVL217:
 1622              		.p2align 4,,10
 1623 06a3 0F1F4400 		.p2align 3
 1623      00
 1624              	.L128:
 1625              		.cfi_restore_state
 584:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 1626              		.loc 1 584 0
 1627 06a8 488B7424 		movq	104(%rsp), %rsi
 1627      68
 1628 06ad 4829C6   		subq	%rax, %rsi
 1629 06b0 4889F0   		movq	%rsi, %rax
 1630              	.LVL218:
 1631 06b3 4899     		cqto
 1632 06b5 48F77C24 		idivq	112(%rsp)
 1632      70
 585:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1633              		.loc 1 585 0
 1634 06ba 85C9     		testl	%ecx, %ecx
 584:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 1635              		.loc 1 584 0
 1636 06bc 89C2     		movl	%eax, %edx
 1637              	.LVL219:
 585:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1638              		.loc 1 585 0
 1639 06be 7E11     		jle	.L130
 585:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1640              		.loc 1 585 0 is_stmt 0 discriminator 1
 1641 06c0 BE010000 		movl	$1, %esi
 1641      00
 1642 06c5 D3E6     		sall	%cl, %esi
 1643 06c7 89F1     		movl	%esi, %ecx
 1644              	.LVL220:
 586:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    pred = -pred;
 1645              		.loc 1 586 0 is_stmt 1 discriminator 1
 1646 06c9 8D76FF   		leal	-1(%rsi), %esi
 1647 06cc 39C1     		cmpl	%eax, %ecx
 1648 06ce 0F4ED6   		cmovle	%esi, %edx
 1649              	.L130:
 1650              	.LVL221:
 587:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  }
 1651              		.loc 1 587 0
 1652 06d1 F7DA     		negl	%edx
 1653              	.LVL222:
 1654 06d3 E91BFDFF 		jmp	.L129
 1654      FF
 1655              	.LVL223:
 1656 06d8 0F1F8400 		.p2align 4,,10
 1656      00000000 
 1657              		.p2align 3
 1658              	.L144:
 644:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 1659              		.loc 1 644 0
 1660 06e0 488B9424 		movq	168(%rsp), %rdx
 1660      A8000000 
 1661 06e8 4829C2   		subq	%rax, %rdx
 1662 06eb 4889D0   		movq	%rdx, %rax
 1663              	.LVL224:
 1664 06ee 4899     		cqto
 1665 06f0 48F7BC24 		idivq	176(%rsp)
 1665      B0000000 
 645:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1666              		.loc 1 645 0
 1667 06f8 85C9     		testl	%ecx, %ecx
 644:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 1668              		.loc 1 644 0
 1669 06fa 89C2     		movl	%eax, %edx
 1670              	.LVL225:
 645:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1671              		.loc 1 645 0
 1672 06fc 7E11     		jle	.L146
 645:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1673              		.loc 1 645 0 is_stmt 0 discriminator 1
 1674 06fe BE010000 		movl	$1, %esi
 1674      00
 1675              	.LVL226:
 1676 0703 D3E6     		sall	%cl, %esi
 1677 0705 89F1     		movl	%esi, %ecx
 1678              	.LVL227:
 646:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    pred = -pred;
 1679              		.loc 1 646 0 is_stmt 1 discriminator 1
 1680 0707 8D76FF   		leal	-1(%rsi), %esi
 1681 070a 39C1     		cmpl	%eax, %ecx
 1682 070c 0F4ED6   		cmovle	%esi, %edx
 1683              	.L146:
 1684              	.LVL228:
 647:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  }
 1685              		.loc 1 647 0
 1686 070f F7DA     		negl	%edx
 1687              	.LVL229:
 1688 0711 E96AFEFF 		jmp	.L145
 1688      FF
 1689              	.LVL230:
 1690 0716 662E0F1F 		.p2align 4,,10
 1690      84000000 
 1690      0000
 1691              		.p2align 3
 1692              	.L140:
 629:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 1693              		.loc 1 629 0
 1694 0720 488BBC24 		movq	152(%rsp), %rdi
 1694      98000000 
 1695 0728 4829C7   		subq	%rax, %rdi
 1696 072b 4889F8   		movq	%rdi, %rax
 1697              	.LVL231:
 1698 072e 4899     		cqto
 1699 0730 48F7BC24 		idivq	160(%rsp)
 1699      A0000000 
 630:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1700              		.loc 1 630 0
 1701 0738 85C9     		testl	%ecx, %ecx
 629:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 1702              		.loc 1 629 0
 1703 073a 89C2     		movl	%eax, %edx
 1704              	.LVL232:
 630:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1705              		.loc 1 630 0
 1706 073c 7E11     		jle	.L142
 630:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1707              		.loc 1 630 0 is_stmt 0 discriminator 1
 1708 073e BE010000 		movl	$1, %esi
 1708      00
 1709 0743 D3E6     		sall	%cl, %esi
 1710 0745 89F1     		movl	%esi, %ecx
 1711              	.LVL233:
 631:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    pred = -pred;
 1712              		.loc 1 631 0 is_stmt 1 discriminator 1
 1713 0747 8D76FF   		leal	-1(%rsi), %esi
 1714 074a 39C1     		cmpl	%eax, %ecx
 1715 074c 0F4ED6   		cmovle	%esi, %edx
 1716              	.L142:
 1717              	.LVL234:
 632:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  }
 1718              		.loc 1 632 0
 1719 074f F7DA     		negl	%edx
 1720              	.LVL235:
 1721 0751 E9C5FDFF 		jmp	.L141
 1721      FF
 1722              	.LVL236:
 1723 0756 662E0F1F 		.p2align 4,,10
 1723      84000000 
 1723      0000
 1724              		.p2align 3
 1725              	.L136:
 614:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 1726              		.loc 1 614 0
 1727 0760 488BB424 		movq	136(%rsp), %rsi
 1727      88000000 
 1728 0768 4829C6   		subq	%rax, %rsi
 1729 076b 4889F0   		movq	%rsi, %rax
 1730              	.LVL237:
 1731 076e 4899     		cqto
 1732              	.LVL238:
 1733 0770 48F7BC24 		idivq	144(%rsp)
 1733      90000000 
 615:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1734              		.loc 1 615 0
 1735 0778 85C9     		testl	%ecx, %ecx
 614:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 1736              		.loc 1 614 0
 1737 077a 89C2     		movl	%eax, %edx
 1738              	.LVL239:
 615:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1739              		.loc 1 615 0
 1740 077c 7E11     		jle	.L138
 615:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1741              		.loc 1 615 0 is_stmt 0 discriminator 1
 1742 077e BE010000 		movl	$1, %esi
 1742      00
 1743 0783 D3E6     		sall	%cl, %esi
 1744 0785 89F1     		movl	%esi, %ecx
 1745              	.LVL240:
 616:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    pred = -pred;
 1746              		.loc 1 616 0 is_stmt 1 discriminator 1
 1747 0787 8D76FF   		leal	-1(%rsi), %esi
 1748 078a 39C1     		cmpl	%eax, %ecx
 1749 078c 0F4ED6   		cmovle	%esi, %edx
 1750              	.L138:
 1751              	.LVL241:
 617:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  }
 1752              		.loc 1 617 0
 1753 078f F7DA     		negl	%edx
 1754              	.LVL242:
 1755 0791 E91DFDFF 		jmp	.L137
 1755      FF
 1756              	.LVL243:
 1757 0796 662E0F1F 		.p2align 4,,10
 1757      84000000 
 1757      0000
 1758              		.p2align 3
 1759              	.L132:
 599:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 1760              		.loc 1 599 0
 1761 07a0 488B7424 		movq	120(%rsp), %rsi
 1761      78
 1762 07a5 4829C6   		subq	%rax, %rsi
 1763 07a8 4889F0   		movq	%rsi, %rax
 1764              	.LVL244:
 1765 07ab 4899     		cqto
 1766 07ad 48F7BC24 		idivq	128(%rsp)
 1766      80000000 
 600:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1767              		.loc 1 600 0
 1768 07b5 85C9     		testl	%ecx, %ecx
 599:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    if (Al > 0 && pred >= (1<<Al))
 1769              		.loc 1 599 0
 1770 07b7 89C2     		movl	%eax, %edx
 1771              	.LVL245:
 600:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1772              		.loc 1 600 0
 1773 07b9 7E11     		jle	.L134
 600:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      pred = (1<<Al)-1;
 1774              		.loc 1 600 0 is_stmt 0 discriminator 1
 1775 07bb BE010000 		movl	$1, %esi
 1775      00
 1776 07c0 D3E6     		sall	%cl, %esi
 1777 07c2 89F1     		movl	%esi, %ecx
 1778              	.LVL246:
 601:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    pred = -pred;
 1779              		.loc 1 601 0 is_stmt 1 discriminator 1
 1780 07c4 8D76FF   		leal	-1(%rsi), %esi
 1781 07c7 39C1     		cmpl	%eax, %ecx
 1782 07c9 0F4ED6   		cmovle	%esi, %edx
 1783              	.L134:
 1784              	.LVL247:
 602:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  }
 1785              		.loc 1 602 0
 1786 07cc F7DA     		negl	%edx
 1787              	.LVL248:
 1788 07ce E97AFCFF 		jmp	.L133
 1788      FF
 1789              	.LVL249:
 1790              		.p2align 4,,10
 1791 07d3 0F1F4400 		.p2align 3
 1791      00
 1792              	.L157:
 550:fltk-1.3.4-1/jpeg/jdcoefct.c ****       if (last_row && block_row == block_rows-1)
 1793              		.loc 1 550 0
 1794 07d8 488B4424 		movq	96(%rsp), %rax
 1794      60
 1795 07dd 4C8B70F8 		movq	-8(%rax), %r14
 1796              	.LVL250:
 1797 07e1 E907FBFF 		jmp	.L122
 1797      FF
 1798              	.LVL251:
 1799              	.L119:
 528:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	((j_common_ptr) cinfo, coef->whole_image[ci],
 1800              		.loc 1 528 0
 1801 07e6 488B7C24 		movq	56(%rsp), %rdi
 1801      38
 1802 07eb 488B9C24 		movq	216(%rsp), %rbx
 1802      D8000000 
 1803 07f3 4531C0   		xorl	%r8d, %r8d
 1804 07f6 31D2     		xorl	%edx, %edx
 1805 07f8 488B4708 		movq	8(%rdi), %rax
 1806 07fc 488B33   		movq	(%rbx), %rsi
 1807 07ff FF5040   		call	*64(%rax)
 1808              	.LVL252:
 531:fltk-1.3.4-1/jpeg/jdcoefct.c ****     }
 1809              		.loc 1 531 0
 1810 0802 41BB0100 		movl	$1, %r11d
 1810      0000
 1811 0808 E974F9FF 		jmp	.L120
 1811      FF
 1812              	.LVL253:
 1813              	.L117:
 513:fltk-1.3.4-1/jpeg/jdcoefct.c ****       if (block_rows == 0) block_rows = compptr->v_samp_factor;
 1814              		.loc 1 513 0
 1815 080d 488B4424 		movq	16(%rsp), %rax
 1815      10
 1816              	.LVL254:
 1817 0812 31D2     		xorl	%edx, %edx
 514:fltk-1.3.4-1/jpeg/jdcoefct.c ****       access_rows = block_rows; /* this iMCU row only */
 1818              		.loc 1 514 0
 1819 0814 C78424C4 		movl	$1, 196(%rsp)
 1819      00000001 
 1819      000000
 513:fltk-1.3.4-1/jpeg/jdcoefct.c ****       if (block_rows == 0) block_rows = compptr->v_samp_factor;
 1820              		.loc 1 513 0
 1821 081f 8B780C   		movl	12(%rax), %edi
 1822 0822 8B4020   		movl	32(%rax), %eax
 1823 0825 F7F7     		divl	%edi
 1824              	.LVL255:
 514:fltk-1.3.4-1/jpeg/jdcoefct.c ****       access_rows = block_rows; /* this iMCU row only */
 1825              		.loc 1 514 0
 1826 0827 85D2     		testl	%edx, %edx
 1827 0829 89D0     		movl	%edx, %eax
 1828 082b 0F44C7   		cmove	%edi, %eax
 1829 082e 898424C0 		movl	%eax, 192(%rsp)
 1829      000000
 1830 0835 89C1     		movl	%eax, %ecx
 1831 0837 E90BF9FF 		jmp	.L118
 1831      FF
 1832              	.LVL256:
 1833              	.L154:
 1834 083c 8B44240C 		movl	12(%rsp), %eax
 1835 0840 448B5424 		movl	8(%rsp), %r10d
 1835      08
 1836 0845 8944241C 		movl	%eax, 28(%rsp)
 1837 0849 8B442404 		movl	4(%rsp), %eax
 1838 084d 89442418 		movl	%eax, 24(%rsp)
 1839 0851 E94FFBFF 		jmp	.L126
 1839      FF
 1840              	.LVL257:
 1841              	.L188:
 1842              		.loc 1 668 0
 1843 0856 E8000000 		call	__stack_chk_fail
 1843      00
 1844              	.LVL258:
 1845              		.cfi_endproc
 1846              	.LFE69:
 1848              		.section	.text.unlikely.decompress_smooth_data
 1849              	.LCOLDE5:
 1850              		.section	.text.decompress_smooth_data
 1851              	.LHOTE5:
 1852              		.section	.text.unlikely.decompress_onepass,"ax",@progbits
 1853              	.LCOLDB6:
 1854              		.section	.text.decompress_onepass,"ax",@progbits
 1855              	.LHOTB6:
 1856              		.p2align 4,,15
 1858              	decompress_onepass:
 1859              	.LFB64:
 149:fltk-1.3.4-1/jpeg/jdcoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 1860              		.loc 1 149 0
 1861              		.cfi_startproc
 1862              	.LVL259:
 1863 0000 4157     		pushq	%r15
 1864              		.cfi_def_cfa_offset 16
 1865              		.cfi_offset 15, -16
 1866 0002 4156     		pushq	%r14
 1867              		.cfi_def_cfa_offset 24
 1868              		.cfi_offset 14, -24
 1869 0004 4889F8   		movq	%rdi, %rax
 1870 0007 4155     		pushq	%r13
 1871              		.cfi_def_cfa_offset 32
 1872              		.cfi_offset 13, -32
 1873 0009 4154     		pushq	%r12
 1874              		.cfi_def_cfa_offset 40
 1875              		.cfi_offset 12, -40
 1876 000b 55       		pushq	%rbp
 1877              		.cfi_def_cfa_offset 48
 1878              		.cfi_offset 6, -48
 1879 000c 53       		pushq	%rbx
 1880              		.cfi_def_cfa_offset 56
 1881              		.cfi_offset 3, -56
 1882 000d 4883EC58 		subq	$88, %rsp
 1883              		.cfi_def_cfa_offset 144
 150:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JDIMENSION MCU_col_num;	/* index of current MCU within row */
 1884              		.loc 1 150 0
 1885 0011 4C8BB750 		movq	592(%rdi), %r14
 1885      020000
 1886              	.LVL260:
 153:fltk-1.3.4-1/jpeg/jdcoefct.c ****   int blkn, ci, xindex, yindex, yoffset, useful_width;
 1887              		.loc 1 153 0
 1888 0018 8B80B001 		movl	432(%rax), %eax
 1888      0000
 149:fltk-1.3.4-1/jpeg/jdcoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 1889              		.loc 1 149 0
 1890 001e 48897424 		movq	%rsi, 64(%rsp)
 1890      40
 152:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 1891              		.loc 1 152 0
 1892 0023 8BB7E801 		movl	488(%rdi), %esi
 1892      0000
 1893              	.LVL261:
 149:fltk-1.3.4-1/jpeg/jdcoefct.c ****   my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 1894              		.loc 1 149 0
 1895 0029 48897C24 		movq	%rdi, 8(%rsp)
 1895      08
 161:fltk-1.3.4-1/jpeg/jdcoefct.c ****        yoffset++) {
 1896              		.loc 1 161 0
 1897 002e 418B4E2C 		movl	44(%r14), %ecx
 1898 0032 413B4E30 		cmpl	48(%r14), %ecx
 152:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 1899              		.loc 1 152 0
 1900 0036 8D7EFF   		leal	-1(%rsi), %edi
 1901              	.LVL262:
 1902 0039 89742410 		movl	%esi, 16(%rsp)
 153:fltk-1.3.4-1/jpeg/jdcoefct.c ****   int blkn, ci, xindex, yindex, yoffset, useful_width;
 1903              		.loc 1 153 0
 1904 003d 8D70FF   		leal	-1(%rax), %esi
 152:fltk-1.3.4-1/jpeg/jdcoefct.c ****   JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 1905              		.loc 1 152 0
 1906 0040 897C243C 		movl	%edi, 60(%rsp)
 1907              	.LVL263:
 153:fltk-1.3.4-1/jpeg/jdcoefct.c ****   int blkn, ci, xindex, yindex, yoffset, useful_width;
 1908              		.loc 1 153 0
 1909 0044 8974241C 		movl	%esi, 28(%rsp)
 1910              	.LVL264:
 161:fltk-1.3.4-1/jpeg/jdcoefct.c ****        yoffset++) {
 1911              		.loc 1 161 0
 1912 0048 894C2428 		movl	%ecx, 40(%rsp)
 1913              	.LVL265:
 1914 004c 0F8DF400 		jge	.L190
 1914      0000
 1915 0052 418B4628 		movl	40(%r14), %eax
 1916 0056 498D4E38 		leaq	56(%r14), %rcx
 1917              	.LVL266:
 1918 005a 48894C24 		movq	%rcx, 72(%rsp)
 1918      48
 1919              	.LVL267:
 163:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	 MCU_col_num++) {
 1920              		.loc 1 163 0
 1921 005f 39C7     		cmpl	%eax, %edi
 1922 0061 89442438 		movl	%eax, 56(%rsp)
 1923 0065 0F82AD00 		jb	.L198
 1923      0000
 1924              	.LVL268:
 1925              	.L225:
 1926 006b 4D89F7   		movq	%r14, %r15
 1927              	.LVL269:
 1928              	.L216:
 166:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	FMEMZERO((void FAR *) coef->MCU_buffer[0],
 1929              		.loc 1 166 0
 1930 006e 488B4424 		movq	8(%rsp), %rax
 1930      08
 1931 0073 8BB03802 		movl	568(%rax), %esi
 1931      0000
 1932 0079 85F6     		testl	%esi, %esi
 1933 007b 0F852F02 		jne	.L228
 1933      0000
 1934              	.L194:
 169:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	/* Suspension forced; update state counters and exit */
 1935              		.loc 1 169 0
 1936 0081 488B5C24 		movq	8(%rsp), %rbx
 1936      08
 1937 0086 488B7424 		movq	72(%rsp), %rsi
 1937      48
 1938 008b 488B8370 		movq	624(%rbx), %rax
 1938      020000
 1939 0092 4889DF   		movq	%rbx, %rdi
 1940 0095 FF5008   		call	*8(%rax)
 1941              	.LVL270:
 1942 0098 85C0     		testl	%eax, %eax
 1943 009a 0F842B02 		je	.L195
 1943      0000
 1944              	.LVL271:
 181:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	compptr = cinfo->cur_comp_info[ci];
 1945              		.loc 1 181 0 discriminator 1
 1946 00a0 8B8BC001 		movl	448(%rbx), %ecx
 1946      0000
 1947 00a6 85C9     		testl	%ecx, %ecx
 1948 00a8 7E58     		jle	.L211
 1949 00aa 488B4424 		movq	8(%rsp), %rax
 1949      08
 181:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	compptr = cinfo->cur_comp_info[ci];
 1950              		.loc 1 181 0 is_stmt 0
 1951 00af C744242C 		movl	$0, 44(%rsp)
 1951      00000000 
 1952 00b7 C7442418 		movl	$0, 24(%rsp)
 1952      00000000 
 1953 00bf 4805C801 		addq	$456, %rax
 1953      0000
 1954 00c5 48894424 		movq	%rax, 48(%rsp)
 1954      30
 1955              	.LVL272:
 1956              	.L210:
 182:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	/* Don't bother to IDCT an uninteresting component. */
 1957              		.loc 1 182 0 is_stmt 1
 1958 00ca 488B4424 		movq	48(%rsp), %rax
 1958      30
 1959 00cf 4C8B30   		movq	(%rax), %r14
 1960              	.LVL273:
 184:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  blkn += compptr->MCU_blocks;
 1961              		.loc 1 184 0
 1962 00d2 418B5634 		movl	52(%r14), %edx
 1963 00d6 85D2     		testl	%edx, %edx
 1964 00d8 0F85D200 		jne	.L200
 1964      0000
 185:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  continue;
 1965              		.loc 1 185 0
 1966 00de 418B4E40 		movl	64(%r14), %ecx
 1967 00e2 014C2418 		addl	%ecx, 24(%rsp)
 1968              	.LVL274:
 1969              	.L201:
 181:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	compptr = cinfo->cur_comp_info[ci];
 1970              		.loc 1 181 0 discriminator 2
 1971 00e6 488B7424 		movq	8(%rsp), %rsi
 1971      08
 1972 00eb 8344242C 		addl	$1, 44(%rsp)
 1972      01
 1973              	.LVL275:
 1974 00f0 8B44242C 		movl	44(%rsp), %eax
 1975              	.LVL276:
 1976 00f4 48834424 		addq	$8, 48(%rsp)
 1976      3008
 1977 00fa 3986C001 		cmpl	%eax, 448(%rsi)
 1977      0000
 1978 0100 7FC8     		jg	.L210
 1979              	.LVL277:
 1980              	.L211:
 164:fltk-1.3.4-1/jpeg/jdcoefct.c ****       /* Try to fetch an MCU.  Entropy decoder expects buffer to be zeroed. */
 1981              		.loc 1 164 0
 1982 0102 83442438 		addl	$1, 56(%rsp)
 1982      01
 1983              	.LVL278:
 1984 0107 8B442438 		movl	56(%rsp), %eax
 1985              	.LVL279:
 163:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	 MCU_col_num++) {
 1986              		.loc 1 163 0
 1987 010b 3944243C 		cmpl	%eax, 60(%rsp)
 1988 010f 0F8359FF 		jnb	.L216
 1988      FFFF
 1989 0115 4D89FE   		movq	%r15, %r14
 1990              	.LVL280:
 1991              	.L198:
 162:fltk-1.3.4-1/jpeg/jdcoefct.c ****     for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 1992              		.loc 1 162 0
 1993 0118 83442428 		addl	$1, 40(%rsp)
 1993      01
 211:fltk-1.3.4-1/jpeg/jdcoefct.c ****   }
 1994              		.loc 1 211 0
 1995 011d 41C74628 		movl	$0, 40(%r14)
 1995      00000000 
 162:fltk-1.3.4-1/jpeg/jdcoefct.c ****     for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 1996              		.loc 1 162 0
 1997 0125 8B442428 		movl	40(%rsp), %eax
 1998              	.LVL281:
 161:fltk-1.3.4-1/jpeg/jdcoefct.c ****        yoffset++) {
 1999              		.loc 1 161 0
 2000 0129 41394630 		cmpl	%eax, 48(%r14)
 2001 012d C7442438 		movl	$0, 56(%rsp)
 2001      00000000 
 2002 0135 0F8F30FF 		jg	.L225
 2002      FFFF
 2003 013b 488B4424 		movq	8(%rsp), %rax
 2003      08
 2004              	.LVL282:
 2005 0140 8B80B001 		movl	432(%rax), %eax
 2005      0000
 2006              	.L190:
 214:fltk-1.3.4-1/jpeg/jdcoefct.c ****   if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 2007              		.loc 1 214 0
 2008 0146 488B5C24 		movq	8(%rsp), %rbx
 2008      08
 215:fltk-1.3.4-1/jpeg/jdcoefct.c ****     start_iMCU_row(cinfo);
 2009              		.loc 1 215 0
 2010 014b 8BB3B000 		movl	176(%rbx), %esi
 2010      0000
 214:fltk-1.3.4-1/jpeg/jdcoefct.c ****   if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 2011              		.loc 1 214 0
 2012 0151 8383B800 		addl	$1, 184(%rbx)
 2012      000001
 215:fltk-1.3.4-1/jpeg/jdcoefct.c ****     start_iMCU_row(cinfo);
 2013              		.loc 1 215 0
 2014 0158 8D4E01   		leal	1(%rsi), %ecx
 2015 015b 89742410 		movl	%esi, 16(%rsp)
 2016 015f 39C8     		cmpl	%ecx, %eax
 2017 0161 898BB000 		movl	%ecx, 176(%rbx)
 2017      0000
 2018 0167 0F86AA01 		jbe	.L212
 2018      0000
 2019              	.LVL283:
 2020              	.LBB33:
 2021              	.LBB34:
  89:fltk-1.3.4-1/jpeg/jdcoefct.c ****     coef->MCU_rows_per_iMCU_row = 1;
 2022              		.loc 1 89 0
 2023 016d 83BBC001 		cmpl	$1, 448(%rbx)
 2023      000001
  83:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 2024              		.loc 1 83 0
 2025 0174 488B9350 		movq	592(%rbx), %rdx
 2025      020000
 2026              	.LVL284:
  89:fltk-1.3.4-1/jpeg/jdcoefct.c ****     coef->MCU_rows_per_iMCU_row = 1;
 2027              		.loc 1 89 0
 2028 017b 0F8E7801 		jle	.L213
 2028      0000
  90:fltk-1.3.4-1/jpeg/jdcoefct.c ****   } else {
 2029              		.loc 1 90 0
 2030 0181 C7423001 		movl	$1, 48(%rdx)
 2030      000000
 2031              	.L214:
  98:fltk-1.3.4-1/jpeg/jdcoefct.c ****   coef->MCU_vert_offset = 0;
 2032              		.loc 1 98 0
 2033 0188 C7422800 		movl	$0, 40(%rdx)
 2033      000000
  99:fltk-1.3.4-1/jpeg/jdcoefct.c **** }
 2034              		.loc 1 99 0
 2035 018f C7422C00 		movl	$0, 44(%rdx)
 2035      000000
 2036              	.LVL285:
 2037              	.LBE34:
 2038              	.LBE33:
 222:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 2039              		.loc 1 222 0
 2040 0196 4883C458 		addq	$88, %rsp
 2041              		.cfi_remember_state
 2042              		.cfi_def_cfa_offset 56
 2043 019a 5B       		popq	%rbx
 2044              		.cfi_def_cfa_offset 48
 217:fltk-1.3.4-1/jpeg/jdcoefct.c ****   }
 2045              		.loc 1 217 0
 2046 019b B8030000 		movl	$3, %eax
 2046      00
 222:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 2047              		.loc 1 222 0
 2048 01a0 5D       		popq	%rbp
 2049              		.cfi_def_cfa_offset 40
 2050 01a1 415C     		popq	%r12
 2051              		.cfi_def_cfa_offset 32
 2052 01a3 415D     		popq	%r13
 2053              		.cfi_def_cfa_offset 24
 2054 01a5 415E     		popq	%r14
 2055              		.cfi_def_cfa_offset 16
 2056              	.LVL286:
 2057 01a7 415F     		popq	%r15
 2058              		.cfi_def_cfa_offset 8
 2059 01a9 C3       		ret
 2060              	.LVL287:
 2061 01aa 660F1F44 		.p2align 4,,10
 2061      0000
 2062              		.p2align 3
 2063              	.L200:
 2064              		.cfi_restore_state
 188:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	useful_width = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
 2065              		.loc 1 188 0
 2066 01b0 488B4424 		movq	8(%rsp), %rax
 2066      08
 2067 01b5 49635604 		movslq	4(%r14), %rdx
 190:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	output_ptr = output_buf[compptr->component_index] +
 2068              		.loc 1 190 0
 2069 01b9 8B4C2438 		movl	56(%rsp), %ecx
 2070 01bd 394C243C 		cmpl	%ecx, 60(%rsp)
 188:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	useful_width = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
 2071              		.loc 1 188 0
 2072 01c1 488B8078 		movq	632(%rax), %rax
 2072      020000
 2073 01c8 4C8B6CD0 		movq	8(%rax,%rdx,8), %r13
 2073      08
 2074              	.LVL288:
 190:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	output_ptr = output_buf[compptr->component_index] +
 2075              		.loc 1 190 0
 2076 01cd 0F861901 		jbe	.L202
 2076      0000
 190:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	output_ptr = output_buf[compptr->component_index] +
 2077              		.loc 1 190 0 is_stmt 0 discriminator 1
 2078 01d3 418B4638 		movl	56(%r14), %eax
 2079 01d7 89442420 		movl	%eax, 32(%rsp)
 2080              	.L203:
 2081              	.LVL289:
 191:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  yoffset * compptr->DCT_v_scaled_size;
 2082              		.loc 1 191 0 is_stmt 1
 2083 01db 8B442428 		movl	40(%rsp), %eax
 2084 01df 488B7C24 		movq	64(%rsp), %rdi
 2084      40
 2085 01e4 410FAF46 		imull	40(%r14), %eax
 2085      28
 2086 01e9 488B14D7 		movq	(%rdi,%rdx,8), %rdx
 2087 01ed 4898     		cltq
 2088 01ef 488D1CC2 		leaq	(%rdx,%rax,8), %rbx
 2089              	.LVL290:
 193:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 2090              		.loc 1 193 0
 2091 01f3 8B442438 		movl	56(%rsp), %eax
 2092 01f7 410FAF46 		imull	68(%r14), %eax
 2092      44
 2093 01fc 89442424 		movl	%eax, 36(%rsp)
 2094              	.LVL291:
 194:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 2095              		.loc 1 194 0
 2096 0200 418B463C 		movl	60(%r14), %eax
 2097              	.LVL292:
 2098 0204 85C0     		testl	%eax, %eax
 2099 0206 0F8EDAFE 		jle	.L201
 2099      FFFF
 2100 020c C7442414 		movl	$0, 20(%rsp)
 2100      00000000 
 2101              	.LVL293:
 2102              		.p2align 4,,10
 2103 0214 0F1F4000 		.p2align 3
 2104              	.L206:
 195:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      yoffset+yindex < compptr->last_row_height) {
 2105              		.loc 1 195 0
 2106 0218 488B4424 		movq	8(%rsp), %rax
 2106      08
 2107 021d 8B7C241C 		movl	28(%rsp), %edi
 2108 0221 3BB8B000 		cmpl	176(%rax), %edi
 2108      0000
 2109 0227 770E     		ja	.L207
 195:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      yoffset+yindex < compptr->last_row_height) {
 2110              		.loc 1 195 0 is_stmt 0 discriminator 1
 2111 0229 8B442414 		movl	20(%rsp), %eax
 2112 022d 03442428 		addl	40(%rsp), %eax
 2113 0231 413B464C 		cmpl	76(%r14), %eax
 2114 0235 7D51     		jge	.L208
 2115              	.L207:
 2116              	.LVL294:
 2117 0237 8B4C2420 		movl	32(%rsp), %ecx
 2118 023b 8B742418 		movl	24(%rsp), %esi
 198:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      (*inverse_DCT) (cinfo, compptr,
 2119              		.loc 1 198 0 is_stmt 1 discriminator 1
 2120 023f 448B6424 		movl	36(%rsp), %r12d
 2120      24
 2121 0244 89C8     		movl	%ecx, %eax
 2122 0246 01F0     		addl	%esi, %eax
 2123 0248 85C9     		testl	%ecx, %ecx
 2124 024a 89442410 		movl	%eax, 16(%rsp)
 2125 024e 7E38     		jle	.L208
 2126 0250 4489E0   		movl	%r12d, %eax
 2127 0253 4189F4   		movl	%esi, %r12d
 2128 0256 89C5     		movl	%eax, %ebp
 2129              	.LVL295:
 2130 0258 0F1F8400 		.p2align 4,,10
 2130      00000000 
 2131              		.p2align 3
 2132              	.L217:
 200:fltk-1.3.4-1/jpeg/jdcoefct.c **** 			      output_ptr, output_col);
 2133              		.loc 1 200 0 discriminator 3
 2134 0260 4963D4   		movslq	%r12d, %rdx
 199:fltk-1.3.4-1/jpeg/jdcoefct.c **** 			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 2135              		.loc 1 199 0 discriminator 3
 2136 0263 4189E8   		movl	%ebp, %r8d
 2137 0266 4889D9   		movq	%rbx, %rcx
 2138 0269 498B54D7 		movq	56(%r15,%rdx,8), %rdx
 2138      38
 2139 026e 4C89F6   		movq	%r14, %rsi
 2140 0271 488B7C24 		movq	8(%rsp), %rdi
 2140      08
 2141 0276 4183C401 		addl	$1, %r12d
 2142              	.LVL296:
 2143 027a 41FFD5   		call	*%r13
 2144              	.LVL297:
 202:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	    }
 2145              		.loc 1 202 0 discriminator 3
 2146 027d 41036E24 		addl	36(%r14), %ebp
 2147              	.LVL298:
 198:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	      (*inverse_DCT) (cinfo, compptr,
 2148              		.loc 1 198 0 discriminator 3
 2149 0281 44396424 		cmpl	%r12d, 16(%rsp)
 2149      10
 2150 0286 75D8     		jne	.L217
 2151              	.LVL299:
 2152              	.L208:
 206:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	}
 2153              		.loc 1 206 0
 2154 0288 49634628 		movslq	40(%r14), %rax
 194:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 2155              		.loc 1 194 0
 2156 028c 83442414 		addl	$1, 20(%rsp)
 2156      01
 2157              	.LVL300:
 205:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  output_ptr += compptr->DCT_v_scaled_size;
 2158              		.loc 1 205 0
 2159 0291 418B7E38 		movl	56(%r14), %edi
 2160 0295 017C2418 		addl	%edi, 24(%rsp)
 2161              	.LVL301:
 206:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	}
 2162              		.loc 1 206 0
 2163 0299 488D1CC3 		leaq	(%rbx,%rax,8), %rbx
 2164              	.LVL302:
 194:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 2165              		.loc 1 194 0
 2166 029d 8B442414 		movl	20(%rsp), %eax
 2167              	.LVL303:
 2168 02a1 4139463C 		cmpl	%eax, 60(%r14)
 2169 02a5 0F8F6DFF 		jg	.L206
 2169      FFFF
 2170 02ab E936FEFF 		jmp	.L201
 2170      FF
 2171              	.LVL304:
 2172              	.L228:
 2173              	.LBB37:
 2174              	.LBB38:
 2175              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string3.h"
   1:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* Copyright (C) 2004-2016 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string3.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string3.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string3.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string3.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string3.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string3.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string3.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string3.h ****    <http://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef _STRING_H
  19:/usr/include/x86_64-linux-gnu/bits/string3.h **** # error "Never use <bits/string3.h> directly; include <string.h> instead."
  20:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  21:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  22:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  23:/usr/include/x86_64-linux-gnu/bits/string3.h **** __warndecl (__warn_memset_zero_len,
  24:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  25:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  26:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  27:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef __cplusplus
  28:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* XXX This is temporarily.  We should not redefine any of the symbols
  29:/usr/include/x86_64-linux-gnu/bits/string3.h ****    and instead integrate the error checking into the original
  30:/usr/include/x86_64-linux-gnu/bits/string3.h ****    definitions.  */
  31:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memcpy
  32:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memmove
  33:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memset
  34:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcat
  35:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcpy
  36:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncat
  37:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncpy
  38:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_GNU
  39:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef mempcpy
  40:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef stpcpy
  41:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  42:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_MISC
  43:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bcopy
  44:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bzero
  45:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  46:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  47:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  48:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  49:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  50:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  51:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	       size_t __len))
  52:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  53:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  54:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  55:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  56:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  57:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memmove (void *__dest, const void *__src, size_t __len))
  58:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  59:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  60:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  61:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  62:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifdef __USE_GNU
  63:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  64:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
  65:/usr/include/x86_64-linux-gnu/bits/string3.h **** 		size_t __len))
  66:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  67:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
  68:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  69:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  70:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  71:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  72:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* The first two tests here help to catch a somewhat common problem
  73:/usr/include/x86_64-linux-gnu/bits/string3.h ****    where the second and third parameter are transposed.  This is
  74:/usr/include/x86_64-linux-gnu/bits/string3.h ****    especially problematic if the intended fill value is zero.  In this
  75:/usr/include/x86_64-linux-gnu/bits/string3.h ****    case no work is done at all.  We detect these problems by referring
  76:/usr/include/x86_64-linux-gnu/bits/string3.h ****    non-existing functions.  */
  77:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  78:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memset (void *__dest, int __ch, size_t __len))
  79:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  80:/usr/include/x86_64-linux-gnu/bits/string3.h ****   /* GCC-5.0 and newer implements these checks in the compiler, so we don't
  81:/usr/include/x86_64-linux-gnu/bits/string3.h ****      need them here.  */
  82:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  83:/usr/include/x86_64-linux-gnu/bits/string3.h ****   if (__builtin_constant_p (__len) && __len == 0
  84:/usr/include/x86_64-linux-gnu/bits/string3.h ****       && (!__builtin_constant_p (__ch) || __ch != 0))
  85:/usr/include/x86_64-linux-gnu/bits/string3.h ****     {
  86:/usr/include/x86_64-linux-gnu/bits/string3.h ****       __warn_memset_zero_len ();
  87:/usr/include/x86_64-linux-gnu/bits/string3.h ****       return __dest;
  88:/usr/include/x86_64-linux-gnu/bits/string3.h ****     }
  89:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  90:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 2176              		.loc 2 90 0
 2177 02b0 486390F0 		movslq	496(%rax), %rdx
 2177      010000
 2178 02b7 498B7F38 		movq	56(%r15), %rdi
 2179 02bb 31F6     		xorl	%esi, %esi
 2180 02bd 48C1E207 		salq	$7, %rdx
 2181 02c1 E8000000 		call	memset
 2181      00
 2182              	.LVL305:
 2183 02c6 E9B6FDFF 		jmp	.L194
 2183      FF
 2184              	.LVL306:
 2185              	.L195:
 2186              	.LBE38:
 2187              	.LBE37:
 171:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	coef->MCU_ctr = MCU_col_num;
 2188              		.loc 1 171 0
 2189 02cb 8B442428 		movl	40(%rsp), %eax
 2190 02cf 4189472C 		movl	%eax, 44(%r15)
 172:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	return JPEG_SUSPENDED;
 2191              		.loc 1 172 0
 2192 02d3 8B442438 		movl	56(%rsp), %eax
 2193 02d7 41894728 		movl	%eax, 40(%r15)
 222:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 2194              		.loc 1 222 0
 2195 02db 4883C458 		addq	$88, %rsp
 2196              		.cfi_remember_state
 2197              		.cfi_def_cfa_offset 56
 173:fltk-1.3.4-1/jpeg/jdcoefct.c ****       }
 2198              		.loc 1 173 0
 2199 02df 31C0     		xorl	%eax, %eax
 222:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 2200              		.loc 1 222 0
 2201 02e1 5B       		popq	%rbx
 2202              		.cfi_def_cfa_offset 48
 2203 02e2 5D       		popq	%rbp
 2204              		.cfi_def_cfa_offset 40
 2205 02e3 415C     		popq	%r12
 2206              		.cfi_def_cfa_offset 32
 2207 02e5 415D     		popq	%r13
 2208              		.cfi_def_cfa_offset 24
 2209 02e7 415E     		popq	%r14
 2210              		.cfi_def_cfa_offset 16
 2211 02e9 415F     		popq	%r15
 2212              		.cfi_def_cfa_offset 8
 2213              	.LVL307:
 2214 02eb C3       		ret
 2215              	.LVL308:
 2216              	.L202:
 2217              		.cfi_restore_state
 190:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	output_ptr = output_buf[compptr->component_index] +
 2218              		.loc 1 190 0 discriminator 2
 2219 02ec 418B4648 		movl	72(%r14), %eax
 2220 02f0 89442420 		movl	%eax, 32(%rsp)
 2221 02f4 E9E2FEFF 		jmp	.L203
 2221      FF
 2222              	.LVL309:
 2223              	.L213:
 2224              	.LBB39:
 2225              	.LBB35:
  92:fltk-1.3.4-1/jpeg/jdcoefct.c ****       coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 2226              		.loc 1 92 0
 2227 02f9 83E801   		subl	$1, %eax
 2228 02fc 39C1     		cmpl	%eax, %ecx
  93:fltk-1.3.4-1/jpeg/jdcoefct.c ****     else
 2229              		.loc 1 93 0
 2230 02fe 488B4424 		movq	8(%rsp), %rax
 2230      08
 2231 0303 488B80C8 		movq	456(%rax), %rax
 2231      010000
  92:fltk-1.3.4-1/jpeg/jdcoefct.c ****       coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 2232              		.loc 1 92 0
 2233 030a 732E     		jnb	.L215
  93:fltk-1.3.4-1/jpeg/jdcoefct.c ****     else
 2234              		.loc 1 93 0
 2235 030c 8B400C   		movl	12(%rax), %eax
 2236 030f 894230   		movl	%eax, 48(%rdx)
 2237 0312 E971FEFF 		jmp	.L214
 2237      FF
 2238              	.LVL310:
 2239              	.L212:
 2240              	.LBE35:
 2241              	.LBE39:
 220:fltk-1.3.4-1/jpeg/jdcoefct.c ****   return JPEG_SCAN_COMPLETED;
 2242              		.loc 1 220 0
 2243 0317 488B7C24 		movq	8(%rsp), %rdi
 2243      08
 2244 031c 488B8760 		movq	608(%rdi), %rax
 2244      020000
 2245 0323 FF5018   		call	*24(%rax)
 2246              	.LVL311:
 222:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 2247              		.loc 1 222 0
 2248 0326 4883C458 		addq	$88, %rsp
 2249              		.cfi_remember_state
 2250              		.cfi_def_cfa_offset 56
 221:fltk-1.3.4-1/jpeg/jdcoefct.c **** }
 2251              		.loc 1 221 0
 2252 032a B8040000 		movl	$4, %eax
 2252      00
 222:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 2253              		.loc 1 222 0
 2254 032f 5B       		popq	%rbx
 2255              		.cfi_def_cfa_offset 48
 2256 0330 5D       		popq	%rbp
 2257              		.cfi_def_cfa_offset 40
 2258 0331 415C     		popq	%r12
 2259              		.cfi_def_cfa_offset 32
 2260 0333 415D     		popq	%r13
 2261              		.cfi_def_cfa_offset 24
 2262 0335 415E     		popq	%r14
 2263              		.cfi_def_cfa_offset 16
 2264              	.LVL312:
 2265 0337 415F     		popq	%r15
 2266              		.cfi_def_cfa_offset 8
 2267 0339 C3       		ret
 2268              	.LVL313:
 2269              	.L215:
 2270              		.cfi_restore_state
 2271              	.LBB40:
 2272              	.LBB36:
  95:fltk-1.3.4-1/jpeg/jdcoefct.c ****   }
 2273              		.loc 1 95 0
 2274 033a 8B404C   		movl	76(%rax), %eax
 2275 033d 894230   		movl	%eax, 48(%rdx)
 2276 0340 E943FEFF 		jmp	.L214
 2276      FF
 2277              	.LBE36:
 2278              	.LBE40:
 2279              		.cfi_endproc
 2280              	.LFE64:
 2282              		.section	.text.unlikely.decompress_onepass
 2283              	.LCOLDE6:
 2284              		.section	.text.decompress_onepass
 2285              	.LHOTE6:
 2286              		.section	.text.unlikely.jinit_d_coef_controller,"ax",@progbits
 2287              	.LCOLDB7:
 2288              		.section	.text.jinit_d_coef_controller,"ax",@progbits
 2289              	.LHOTB7:
 2290              		.p2align 4,,15
 2291              		.globl	jinit_d_coef_controller
 2293              	jinit_d_coef_controller:
 2294              	.LFB70:
 669:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 670:fltk-1.3.4-1/jpeg/jdcoefct.c **** #endif /* BLOCK_SMOOTHING_SUPPORTED */
 671:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 672:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 673:fltk-1.3.4-1/jpeg/jdcoefct.c **** /*
 674:fltk-1.3.4-1/jpeg/jdcoefct.c ****  * Initialize coefficient buffer controller.
 675:fltk-1.3.4-1/jpeg/jdcoefct.c ****  */
 676:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 677:fltk-1.3.4-1/jpeg/jdcoefct.c **** GLOBAL(void)
 678:fltk-1.3.4-1/jpeg/jdcoefct.c **** jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
 679:fltk-1.3.4-1/jpeg/jdcoefct.c **** {
 2295              		.loc 1 679 0
 2296              		.cfi_startproc
 2297              	.LVL314:
 2298 0000 4157     		pushq	%r15
 2299              		.cfi_def_cfa_offset 16
 2300              		.cfi_offset 15, -16
 2301 0002 4156     		pushq	%r14
 2302              		.cfi_def_cfa_offset 24
 2303              		.cfi_offset 14, -24
 680:fltk-1.3.4-1/jpeg/jdcoefct.c ****   my_coef_ptr coef;
 681:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 682:fltk-1.3.4-1/jpeg/jdcoefct.c ****   coef = (my_coef_ptr)
 2304              		.loc 1 682 0
 2305 0004 BAE00000 		movl	$224, %edx
 2305      00
 679:fltk-1.3.4-1/jpeg/jdcoefct.c ****   my_coef_ptr coef;
 2306              		.loc 1 679 0
 2307 0009 4155     		pushq	%r13
 2308              		.cfi_def_cfa_offset 32
 2309              		.cfi_offset 13, -32
 2310 000b 4154     		pushq	%r12
 2311              		.cfi_def_cfa_offset 40
 2312              		.cfi_offset 12, -40
 2313 000d 55       		pushq	%rbp
 2314              		.cfi_def_cfa_offset 48
 2315              		.cfi_offset 6, -48
 2316 000e 53       		pushq	%rbx
 2317              		.cfi_def_cfa_offset 56
 2318              		.cfi_offset 3, -56
 2319 000f 89F3     		movl	%esi, %ebx
 2320 0011 4889FD   		movq	%rdi, %rbp
 2321              		.loc 1 682 0
 2322 0014 BE010000 		movl	$1, %esi
 2322      00
 2323              	.LVL315:
 679:fltk-1.3.4-1/jpeg/jdcoefct.c ****   my_coef_ptr coef;
 2324              		.loc 1 679 0
 2325 0019 4883EC28 		subq	$40, %rsp
 2326              		.cfi_def_cfa_offset 96
 683:fltk-1.3.4-1/jpeg/jdcoefct.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 2327              		.loc 1 683 0
 2328 001d 488B4708 		movq	8(%rdi), %rax
 682:fltk-1.3.4-1/jpeg/jdcoefct.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 2329              		.loc 1 682 0
 2330 0021 FF10     		call	*(%rax)
 2331              	.LVL316:
 684:fltk-1.3.4-1/jpeg/jdcoefct.c **** 				SIZEOF(my_coef_controller));
 685:fltk-1.3.4-1/jpeg/jdcoefct.c ****   cinfo->coef = (struct jpeg_d_coef_controller *) coef;
 686:fltk-1.3.4-1/jpeg/jdcoefct.c ****   coef->pub.start_input_pass = start_input_pass;
 687:fltk-1.3.4-1/jpeg/jdcoefct.c ****   coef->pub.start_output_pass = start_output_pass;
 688:fltk-1.3.4-1/jpeg/jdcoefct.c **** #ifdef BLOCK_SMOOTHING_SUPPORTED
 689:fltk-1.3.4-1/jpeg/jdcoefct.c ****   coef->coef_bits_latch = NULL;
 690:fltk-1.3.4-1/jpeg/jdcoefct.c **** #endif
 691:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 692:fltk-1.3.4-1/jpeg/jdcoefct.c ****   /* Create the coefficient buffer. */
 693:fltk-1.3.4-1/jpeg/jdcoefct.c ****   if (need_full_buffer) {
 2332              		.loc 1 693 0
 2333 0023 85DB     		testl	%ebx, %ebx
 685:fltk-1.3.4-1/jpeg/jdcoefct.c ****   coef->pub.start_input_pass = start_input_pass;
 2334              		.loc 1 685 0
 2335 0025 48898550 		movq	%rax, 592(%rbp)
 2335      020000
 682:fltk-1.3.4-1/jpeg/jdcoefct.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 2336              		.loc 1 682 0
 2337 002c 48894424 		movq	%rax, 16(%rsp)
 2337      10
 2338              	.LVL317:
 686:fltk-1.3.4-1/jpeg/jdcoefct.c ****   coef->pub.start_output_pass = start_output_pass;
 2339              		.loc 1 686 0
 2340 0031 48C70000 		movq	$start_input_pass, (%rax)
 2340      000000
 687:fltk-1.3.4-1/jpeg/jdcoefct.c **** #ifdef BLOCK_SMOOTHING_SUPPORTED
 2341              		.loc 1 687 0
 2342 0038 48C74010 		movq	$start_output_pass, 16(%rax)
 2342      00000000 
 689:fltk-1.3.4-1/jpeg/jdcoefct.c **** #endif
 2343              		.loc 1 689 0
 2344 0040 48C780D8 		movq	$0, 216(%rax)
 2344      00000000 
 2344      000000
 2345              		.loc 1 693 0
 2346 004b 0F84B700 		je	.L230
 2346      0000
 2347              	.LVL318:
 2348              	.LBB41:
 694:fltk-1.3.4-1/jpeg/jdcoefct.c **** #ifdef D_MULTISCAN_FILES_SUPPORTED
 695:fltk-1.3.4-1/jpeg/jdcoefct.c ****     /* Allocate a full-image virtual array for each component, */
 696:fltk-1.3.4-1/jpeg/jdcoefct.c ****     /* padded to a multiple of samp_factor DCT blocks in each direction. */
 697:fltk-1.3.4-1/jpeg/jdcoefct.c ****     /* Note we ask for a pre-zeroed array. */
 698:fltk-1.3.4-1/jpeg/jdcoefct.c ****     int ci, access_rows;
 699:fltk-1.3.4-1/jpeg/jdcoefct.c ****     jpeg_component_info *compptr;
 700:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 701:fltk-1.3.4-1/jpeg/jdcoefct.c ****     for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 2349              		.loc 1 701 0
 2350 0051 8B7538   		movl	56(%rbp), %esi
 2351 0054 48058800 		addq	$136, %rax
 2351      0000
 2352              	.LVL319:
 2353 005a 4531E4   		xorl	%r12d, %r12d
 2354 005d 488B9D30 		movq	304(%rbp), %rbx
 2354      010000
 2355              	.LVL320:
 2356 0064 48894424 		movq	%rax, 24(%rsp)
 2356      18
 2357 0069 4989C7   		movq	%rax, %r15
 2358 006c 85F6     		testl	%esi, %esi
 2359 006e 7E68     		jle	.L235
 2360              	.LVL321:
 2361              		.p2align 4,,10
 2362              		.p2align 3
 2363              	.L239:
 702:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	 ci++, compptr++) {
 703:fltk-1.3.4-1/jpeg/jdcoefct.c ****       access_rows = compptr->v_samp_factor;
 2364              		.loc 1 703 0
 2365 0070 4863730C 		movslq	12(%rbx), %rsi
 2366              	.LVL322:
 704:fltk-1.3.4-1/jpeg/jdcoefct.c **** #ifdef BLOCK_SMOOTHING_SUPPORTED
 705:fltk-1.3.4-1/jpeg/jdcoefct.c ****       /* If block smoothing could be used, need a bigger window */
 706:fltk-1.3.4-1/jpeg/jdcoefct.c ****       if (cinfo->progressive_mode)
 2367              		.loc 1 706 0
 2368 0074 8B8D3C01 		movl	316(%rbp), %ecx
 2368      0000
 707:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	access_rows *= 3;
 708:fltk-1.3.4-1/jpeg/jdcoefct.c **** #endif
 709:fltk-1.3.4-1/jpeg/jdcoefct.c ****       coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 710:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	((j_common_ptr) cinfo, JPOOL_IMAGE, TRUE,
 711:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 712:fltk-1.3.4-1/jpeg/jdcoefct.c **** 				(long) compptr->h_samp_factor),
 713:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 2369              		.loc 1 713 0
 2370 007a 8B7B20   		movl	32(%rbx), %edi
 709:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	((j_common_ptr) cinfo, JPOOL_IMAGE, TRUE,
 2371              		.loc 1 709 0
 2372 007d 488B4508 		movq	8(%rbp), %rax
 706:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	access_rows *= 3;
 2373              		.loc 1 706 0
 2374 0081 85C9     		testl	%ecx, %ecx
 707:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	access_rows *= 3;
 2375              		.loc 1 707 0
 2376 0083 448D0C76 		leal	(%rsi,%rsi,2), %r9d
 709:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	((j_common_ptr) cinfo, JPOOL_IMAGE, TRUE,
 2377              		.loc 1 709 0
 2378 0087 4C8B7028 		movq	40(%rax), %r14
 707:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	access_rows *= 3;
 2379              		.loc 1 707 0
 2380 008b 440F44CE 		cmove	%esi, %r9d
 702:fltk-1.3.4-1/jpeg/jdcoefct.c ****       access_rows = compptr->v_samp_factor;
 2381              		.loc 1 702 0
 2382 008f 4183C401 		addl	$1, %r12d
 2383              	.LVL323:
 2384 0093 4883C360 		addq	$96, %rbx
 2385              	.LVL324:
 707:fltk-1.3.4-1/jpeg/jdcoefct.c **** #endif
 2386              		.loc 1 707 0
 2387 0097 44894C24 		movl	%r9d, 12(%rsp)
 2387      0C
 2388              	.LVL325:
 2389 009c 4983C708 		addq	$8, %r15
 2390              		.loc 1 713 0
 2391 00a0 E8000000 		call	jround_up
 2391      00
 2392              	.LVL326:
 711:fltk-1.3.4-1/jpeg/jdcoefct.c **** 				(long) compptr->h_samp_factor),
 2393              		.loc 1 711 0
 2394 00a5 486373A8 		movslq	-88(%rbx), %rsi
 2395 00a9 8B7BBC   		movl	-68(%rbx), %edi
 2396              		.loc 1 713 0
 2397 00ac 4989C5   		movq	%rax, %r13
 711:fltk-1.3.4-1/jpeg/jdcoefct.c **** 				(long) compptr->h_samp_factor),
 2398              		.loc 1 711 0
 2399 00af E8000000 		call	jround_up
 2399      00
 2400              	.LVL327:
 709:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	((j_common_ptr) cinfo, JPOOL_IMAGE, TRUE,
 2401              		.loc 1 709 0
 2402 00b4 448B4C24 		movl	12(%rsp), %r9d
 2402      0C
 2403 00b9 4589E8   		movl	%r13d, %r8d
 2404 00bc 89C1     		movl	%eax, %ecx
 2405 00be BA010000 		movl	$1, %edx
 2405      00
 2406 00c3 BE010000 		movl	$1, %esi
 2406      00
 2407 00c8 4889EF   		movq	%rbp, %rdi
 2408 00cb 41FFD6   		call	*%r14
 2409              	.LVL328:
 2410 00ce 498947F8 		movq	%rax, -8(%r15)
 701:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	 ci++, compptr++) {
 2411              		.loc 1 701 0
 2412 00d2 44396538 		cmpl	%r12d, 56(%rbp)
 2413 00d6 7F98     		jg	.L239
 2414              	.LVL329:
 2415              	.L235:
 714:fltk-1.3.4-1/jpeg/jdcoefct.c **** 				(long) compptr->v_samp_factor),
 715:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	 (JDIMENSION) access_rows);
 716:fltk-1.3.4-1/jpeg/jdcoefct.c ****     }
 717:fltk-1.3.4-1/jpeg/jdcoefct.c ****     coef->pub.consume_data = consume_data;
 2416              		.loc 1 717 0
 2417 00d8 488B4424 		movq	16(%rsp), %rax
 2417      10
 718:fltk-1.3.4-1/jpeg/jdcoefct.c ****     coef->pub.decompress_data = decompress_data;
 719:fltk-1.3.4-1/jpeg/jdcoefct.c ****     coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
 2418              		.loc 1 719 0
 2419 00dd 488B4C24 		movq	24(%rsp), %rcx
 2419      18
 717:fltk-1.3.4-1/jpeg/jdcoefct.c ****     coef->pub.decompress_data = decompress_data;
 2420              		.loc 1 717 0
 2421 00e2 48C74008 		movq	$consume_data, 8(%rax)
 2421      00000000 
 718:fltk-1.3.4-1/jpeg/jdcoefct.c ****     coef->pub.decompress_data = decompress_data;
 2422              		.loc 1 718 0
 2423 00ea 48C74018 		movq	$decompress_data, 24(%rax)
 2423      00000000 
 2424              		.loc 1 719 0
 2425 00f2 48894820 		movq	%rcx, 32(%rax)
 2426              	.LBE41:
 720:fltk-1.3.4-1/jpeg/jdcoefct.c **** #else
 721:fltk-1.3.4-1/jpeg/jdcoefct.c ****     ERREXIT(cinfo, JERR_NOT_COMPILED);
 722:fltk-1.3.4-1/jpeg/jdcoefct.c **** #endif
 723:fltk-1.3.4-1/jpeg/jdcoefct.c ****   } else {
 724:fltk-1.3.4-1/jpeg/jdcoefct.c ****     /* We only need a single-MCU buffer. */
 725:fltk-1.3.4-1/jpeg/jdcoefct.c ****     JBLOCKROW buffer;
 726:fltk-1.3.4-1/jpeg/jdcoefct.c ****     int i;
 727:fltk-1.3.4-1/jpeg/jdcoefct.c **** 
 728:fltk-1.3.4-1/jpeg/jdcoefct.c ****     buffer = (JBLOCKROW)
 729:fltk-1.3.4-1/jpeg/jdcoefct.c ****       (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 730:fltk-1.3.4-1/jpeg/jdcoefct.c **** 				  D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
 731:fltk-1.3.4-1/jpeg/jdcoefct.c ****     for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 732:fltk-1.3.4-1/jpeg/jdcoefct.c ****       coef->MCU_buffer[i] = buffer + i;
 733:fltk-1.3.4-1/jpeg/jdcoefct.c ****     }
 734:fltk-1.3.4-1/jpeg/jdcoefct.c ****     if (cinfo->lim_Se == 0)	/* DC only case: want to bypass later */
 735:fltk-1.3.4-1/jpeg/jdcoefct.c ****       FMEMZERO((void FAR *) buffer,
 736:fltk-1.3.4-1/jpeg/jdcoefct.c **** 	       (size_t) (D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK)));
 737:fltk-1.3.4-1/jpeg/jdcoefct.c ****     coef->pub.consume_data = dummy_consume_data;
 738:fltk-1.3.4-1/jpeg/jdcoefct.c ****     coef->pub.decompress_data = decompress_onepass;
 739:fltk-1.3.4-1/jpeg/jdcoefct.c ****     coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
 740:fltk-1.3.4-1/jpeg/jdcoefct.c ****   }
 741:fltk-1.3.4-1/jpeg/jdcoefct.c **** }
 2427              		.loc 1 741 0
 2428 00f6 4883C428 		addq	$40, %rsp
 2429              		.cfi_remember_state
 2430              		.cfi_def_cfa_offset 56
 2431 00fa 5B       		popq	%rbx
 2432              		.cfi_def_cfa_offset 48
 2433              	.LVL330:
 2434 00fb 5D       		popq	%rbp
 2435              		.cfi_def_cfa_offset 40
 2436              	.LVL331:
 2437 00fc 415C     		popq	%r12
 2438              		.cfi_def_cfa_offset 32
 2439 00fe 415D     		popq	%r13
 2440              		.cfi_def_cfa_offset 24
 2441 0100 415E     		popq	%r14
 2442              		.cfi_def_cfa_offset 16
 2443 0102 415F     		popq	%r15
 2444              		.cfi_def_cfa_offset 8
 2445 0104 C3       		ret
 2446              	.LVL332:
 2447              		.p2align 4,,10
 2448 0105 0F1F00   		.p2align 3
 2449              	.L230:
 2450              		.cfi_restore_state
 2451              	.LBB42:
 729:fltk-1.3.4-1/jpeg/jdcoefct.c **** 				  D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
 2452              		.loc 1 729 0
 2453 0108 488B4508 		movq	8(%rbp), %rax
 2454              	.LVL333:
 728:fltk-1.3.4-1/jpeg/jdcoefct.c ****       (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 2455              		.loc 1 728 0
 2456 010c BA000500 		movl	$1280, %edx
 2456      00
 2457 0111 BE010000 		movl	$1, %esi
 2457      00
 2458 0116 4889EF   		movq	%rbp, %rdi
 2459 0119 FF5008   		call	*8(%rax)
 2460              	.LVL334:
 2461 011c 488B4C24 		movq	16(%rsp), %rcx
 2461      10
 2462 0121 488DB000 		leaq	1280(%rax), %rsi
 2462      050000
 2463 0128 4889C2   		movq	%rax, %rdx
 2464 012b 4883C138 		addq	$56, %rcx
 2465              	.LVL335:
 2466 012f 90       		.p2align 4,,10
 2467              		.p2align 3
 2468              	.L236:
 732:fltk-1.3.4-1/jpeg/jdcoefct.c ****     }
 2469              		.loc 1 732 0 discriminator 3
 2470 0130 488911   		movq	%rdx, (%rcx)
 2471 0133 4883EA80 		subq	$-128, %rdx
 2472 0137 4883C108 		addq	$8, %rcx
 731:fltk-1.3.4-1/jpeg/jdcoefct.c ****       coef->MCU_buffer[i] = buffer + i;
 2473              		.loc 1 731 0 discriminator 3
 2474 013b 4839F2   		cmpq	%rsi, %rdx
 2475 013e 75F0     		jne	.L236
 734:fltk-1.3.4-1/jpeg/jdcoefct.c ****       FMEMZERO((void FAR *) buffer,
 2476              		.loc 1 734 0
 2477 0140 8B953802 		movl	568(%rbp), %edx
 2477      0000
 2478 0146 85D2     		testl	%edx, %edx
 2479 0148 7436     		je	.L243
 2480              	.LVL336:
 2481              	.L237:
 737:fltk-1.3.4-1/jpeg/jdcoefct.c ****     coef->pub.decompress_data = decompress_onepass;
 2482              		.loc 1 737 0
 2483 014a 488B4424 		movq	16(%rsp), %rax
 2483      10
 2484 014f 48C74008 		movq	$dummy_consume_data, 8(%rax)
 2484      00000000 
 738:fltk-1.3.4-1/jpeg/jdcoefct.c ****     coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
 2485              		.loc 1 738 0
 2486 0157 48C74018 		movq	$decompress_onepass, 24(%rax)
 2486      00000000 
 739:fltk-1.3.4-1/jpeg/jdcoefct.c ****   }
 2487              		.loc 1 739 0
 2488 015f 48C74020 		movq	$0, 32(%rax)
 2488      00000000 
 2489              	.LBE42:
 2490              		.loc 1 741 0
 2491 0167 4883C428 		addq	$40, %rsp
 2492              		.cfi_remember_state
 2493              		.cfi_def_cfa_offset 56
 2494 016b 5B       		popq	%rbx
 2495              		.cfi_def_cfa_offset 48
 2496              	.LVL337:
 2497 016c 5D       		popq	%rbp
 2498              		.cfi_def_cfa_offset 40
 2499              	.LVL338:
 2500 016d 415C     		popq	%r12
 2501              		.cfi_def_cfa_offset 32
 2502 016f 415D     		popq	%r13
 2503              		.cfi_def_cfa_offset 24
 2504 0171 415E     		popq	%r14
 2505              		.cfi_def_cfa_offset 16
 2506 0173 415F     		popq	%r15
 2507              		.cfi_def_cfa_offset 8
 2508 0175 C3       		ret
 2509              	.LVL339:
 2510 0176 662E0F1F 		.p2align 4,,10
 2510      84000000 
 2510      0000
 2511              		.p2align 3
 2512              	.L243:
 2513              		.cfi_restore_state
 2514              	.LBB45:
 2515              	.LBB43:
 2516              	.LBB44:
 2517              		.loc 2 90 0
 2518 0180 488D7808 		leaq	8(%rax), %rdi
 2519 0184 48C70000 		movq	$0, (%rax)
 2519      000000
 2520              	.LVL340:
 2521 018b 48C780F8 		movq	$0, 1272(%rax)
 2521      04000000 
 2521      000000
 2522 0196 4883E7F8 		andq	$-8, %rdi
 2523 019a 4829F8   		subq	%rdi, %rax
 2524              	.LVL341:
 2525 019d 8D880005 		leal	1280(%rax), %ecx
 2525      0000
 2526 01a3 31C0     		xorl	%eax, %eax
 2527 01a5 C1E903   		shrl	$3, %ecx
 2528 01a8 F348AB   		rep stosq
 2529 01ab EB9D     		jmp	.L237
 2530              	.LBE44:
 2531              	.LBE43:
 2532              	.LBE45:
 2533              		.cfi_endproc
 2534              	.LFE70:
 2536              		.section	.text.unlikely.jinit_d_coef_controller
 2537              	.LCOLDE7:
 2538              		.section	.text.jinit_d_coef_controller
 2539              	.LHOTE7:
 2540              		.text
 2541              	.Letext0:
 2542              		.section	.text.unlikely.start_input_pass
 2543              	.Letext_cold0:
 2544              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 2545              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 2546              		.file 5 "/usr/include/libio.h"
 2547              		.file 6 "fltk-1.3.4-1/jpeg/jmorecfg.h"
 2548              		.file 7 "fltk-1.3.4-1/jpeg/jpeglib.h"
 2549              		.file 8 "fltk-1.3.4-1/jpeg/jpegint.h"
 2550              		.file 9 "/usr/include/stdio.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 jdcoefct.c
     /tmp/ccimbuTx.s:13     .text.start_input_pass:0000000000000000 start_input_pass
     /tmp/ccimbuTx.s:94     .text.dummy_consume_data:0000000000000000 dummy_consume_data
     /tmp/ccimbuTx.s:115    .text.consume_data:0000000000000000 consume_data
     /tmp/ccimbuTx.s:442    .text.decompress_data:0000000000000000 decompress_data
     /tmp/ccimbuTx.s:713    .text.start_output_pass:0000000000000000 start_output_pass
     /tmp/ccimbuTx.s:904    .text.decompress_smooth_data:0000000000000000 decompress_smooth_data
     /tmp/ccimbuTx.s:1858   .text.decompress_onepass:0000000000000000 decompress_onepass
     /tmp/ccimbuTx.s:2293   .text.jinit_d_coef_controller:0000000000000000 jinit_d_coef_controller
                           .group:0000000000000000 wm4.0.cf9695abff4f49bdfe00dc4091904acd
                           .group:0000000000000000 wm4.stdcpredef.h.19.bf2bf6c5fb087dfb5ef2d2297c2795de
                           .group:0000000000000000 wm4.jconfig.h.10.247fc3ff67998f3074970b1373c70333
                           .group:0000000000000000 wm4.features.h.19.24da27e0a4d0d521fd057013d982b8b5
                           .group:0000000000000000 wm4.cdefs.h.19.56613e71f285ebad825b69b151170a81
                           .group:0000000000000000 wm4.wordsize.h.4.256e8fdbd37801980286acdbc40d0280
                           .group:0000000000000000 wm4.cdefs.h.432.619afd0aac7c4b439843706c1b28ddea
                           .group:0000000000000000 wm4.stubs64.h.10.918ceb5fa58268542bf143e4c1efbcf3
                           .group:0000000000000000 wm4.stdlib.h.27.59e2586c75bdbcb991b248ad7257b993
                           .group:0000000000000000 wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1
                           .group:0000000000000000 wm4.waitflags.h.25.e401b8bcfee800b540b27abd7cc78de9
                           .group:0000000000000000 wm4.waitstatus.h.28.93f167f49d64e2b9b99f98d1162a93bf
                           .group:0000000000000000 wm4.endian.h.19.ff00c9c0f5e9f9a9719c5de76ace57b4
                           .group:0000000000000000 wm4.endian.h.41.24cced64aef71195a51d4daa8e4f4a95
                           .group:0000000000000000 wm4.types.h.89.468e2451361e3b92f048f6cad51690ff
                           .group:0000000000000000 wm4.typesizes.h.24.40eb69a6270178f15d1bf3d7b6635a8b
                           .group:0000000000000000 wm4.byteswap.h.38.11ee5fdc0f6cc53a16c505b9233cecef
                           .group:0000000000000000 wm4.endian.h.63.97272d7c64d5db8020003b32e9289502
                           .group:0000000000000000 wm4.waitstatus.h.99.408b6270fa6eb71377201a241ef15f79
                           .group:0000000000000000 wm4.stdlib.h.50.84aeca2ac6f37d40e1e9b3cef757ba2d
                           .group:0000000000000000 wm4.types.h.23.f6dcbaa72f8f71361acef09804d45a5e
                           .group:0000000000000000 wm4.time.h.53.beb46e650cd406cb917b6b96b45e640a
                           .group:0000000000000000 wm4.stddef.h.238.847b6907dabda77be90a9ab7ad789e2e
                           .group:0000000000000000 wm4.types.h.187.bd5a05039b505b3620e6973f1b2ffeb1
                           .group:0000000000000000 wm4.select.h.28.eb2f3debdbcffd1442ebddaebc4fb6ff
                           .group:0000000000000000 wm4.sigset.h.20.f36413b6d2364ad847d3db53fb03e683
                           .group:0000000000000000 wm4.select.h.36.f76c3b9e55c871743863013cc4cc14c9
                           .group:0000000000000000 wm4.time.h.66.e70ce69790c975f0efb369340c432e0b
                           .group:0000000000000000 wm4.time.h.25.ae5284cdff565e87a9198d819340325d
                           .group:0000000000000000 wm4.select.h.49.e9d2041e5035cc68ebd1a20f7dbc8514
                           .group:0000000000000000 wm4.select2.h.27.f95f2ab0ffee66dc1b6575014894b21a
                           .group:0000000000000000 wm4.sysmacros.h.20.8a0c33ff175cd9b434a86c0aaa36f0a2
                           .group:0000000000000000 wm4.types.h.229.67b3f66bd74b06b451caec392a72a945
                           .group:0000000000000000 wm4.pthreadtypes.h.25.6892b1493314fcf446bbc76e7362acba
                           .group:0000000000000000 wm4.alloca.h.19.edefa922a76c1cbaaf1e416903ba2d1c
                           .group:0000000000000000 wm4.alloca.h.29.156e12058824cc23d961c4d3b13031f6
                           .group:0000000000000000 wm4.stdio.h.26.4719156f1aea2bb9662fd6c582dc9a4c
                           .group:0000000000000000 wm4.stddef.h.238.04cc7214bceba497b20d15c10fd97511
                           .group:0000000000000000 wm4.stdio.h.36.2dd12c1fd035242ad5cfd0152a01be5a
                           .group:0000000000000000 wm4._G_config.h.5.b0f37d9e474454cf6e459063458db32f
                           .group:0000000000000000 wm4.wchar.h.80.eea3eba2d2a17aace9470a8e0d8218dc
                           .group:0000000000000000 wm4._G_config.h.46.5187c97b14fd664662cb32e6b94fc49e
                           .group:0000000000000000 wm4.libio.h.33.a775b9ecae273f33bc59931e9891e4ca
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.libio.h.51.dab170798ec1df48c625aea7c30e1b63
                           .group:0000000000000000 wm4.stdio.h.80.17b7dd1ca72d8a61987532cb1d80194a
                           .group:0000000000000000 wm4.stdio_lim.h.23.557290a6cddeba0587f574f29e3a5fb9
                           .group:0000000000000000 wm4.stdio.h.172.df21df34a7396d7da2e08f9b617d582f
                           .group:0000000000000000 wm4.stdio.h.26.cae64f7ada9bb8327a89dba6a5e93655
                           .group:0000000000000000 wm4.string.h.23.8394011d5995a16f15d67d04e84a1d69
                           .group:0000000000000000 wm4.string.h.24.1b0dc67418e7128d207285861439c2f8
                           .group:0000000000000000 wm4.string2.h.45.00535b99420fc3014c2da41d6645330d
                           .group:0000000000000000 wm4.string3.h.31.0c4b9301b754a2db05eaafef869657d2
                           .group:0000000000000000 wm4.jinclude.h.67.b19f941ec97c4845fa4609292c7e2db4
                           .group:0000000000000000 wm4.jmorecfg.h.33.3b4c5f9cc07b3737823b06caf24d5b05
                           .group:0000000000000000 wm4.jpeglib.h.40.4f111c27252a38df39328d65454e82f4
                           .group:0000000000000000 wm4.jpegint.h.26.5219ef5d4e4921371d38e77b6091fd20
                           .group:0000000000000000 wm4.jerror.h.25.1dbd8674e70ab5215bc0037320e5c2a2

UNDEFINED SYMBOLS
__stack_chk_fail
jcopy_block_row
memset
jround_up
