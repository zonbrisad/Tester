   1              		.file	"jdmerge.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.start_pass_merged_upsample,"ax",@progbits
   5              		.p2align 4
   7              	start_pass_merged_upsample:
   8              	.LVL0:
   9              	.LFB52:
  10              		.file 1 "fltk-1.3.4-1/jpeg/jdmerge.c"
   1:fltk-1.3.4-1/jpeg/jdmerge.c **** /*
   2:fltk-1.3.4-1/jpeg/jdmerge.c ****  * jdmerge.c
   3:fltk-1.3.4-1/jpeg/jdmerge.c ****  *
   4:fltk-1.3.4-1/jpeg/jdmerge.c ****  * Copyright (C) 1994-1996, Thomas G. Lane.
   5:fltk-1.3.4-1/jpeg/jdmerge.c ****  * Modified 2013 by Guido Vollbeding.
   6:fltk-1.3.4-1/jpeg/jdmerge.c ****  * This file is part of the Independent JPEG Group's software.
   7:fltk-1.3.4-1/jpeg/jdmerge.c ****  * For conditions of distribution and use, see the accompanying README file.
   8:fltk-1.3.4-1/jpeg/jdmerge.c ****  *
   9:fltk-1.3.4-1/jpeg/jdmerge.c ****  * This file contains code for merged upsampling/color conversion.
  10:fltk-1.3.4-1/jpeg/jdmerge.c ****  *
  11:fltk-1.3.4-1/jpeg/jdmerge.c ****  * This file combines functions from jdsample.c and jdcolor.c;
  12:fltk-1.3.4-1/jpeg/jdmerge.c ****  * read those files first to understand what's going on.
  13:fltk-1.3.4-1/jpeg/jdmerge.c ****  *
  14:fltk-1.3.4-1/jpeg/jdmerge.c ****  * When the chroma components are to be upsampled by simple replication
  15:fltk-1.3.4-1/jpeg/jdmerge.c ****  * (ie, box filtering), we can save some work in color conversion by
  16:fltk-1.3.4-1/jpeg/jdmerge.c ****  * calculating all the output pixels corresponding to a pair of chroma
  17:fltk-1.3.4-1/jpeg/jdmerge.c ****  * samples at one time.  In the conversion equations
  18:fltk-1.3.4-1/jpeg/jdmerge.c ****  *	R = Y           + K1 * Cr
  19:fltk-1.3.4-1/jpeg/jdmerge.c ****  *	G = Y + K2 * Cb + K3 * Cr
  20:fltk-1.3.4-1/jpeg/jdmerge.c ****  *	B = Y + K4 * Cb
  21:fltk-1.3.4-1/jpeg/jdmerge.c ****  * only the Y term varies among the group of pixels corresponding to a pair
  22:fltk-1.3.4-1/jpeg/jdmerge.c ****  * of chroma samples, so the rest of the terms can be calculated just once.
  23:fltk-1.3.4-1/jpeg/jdmerge.c ****  * At typical sampling ratios, this eliminates half or three-quarters of the
  24:fltk-1.3.4-1/jpeg/jdmerge.c ****  * multiplications needed for color conversion.
  25:fltk-1.3.4-1/jpeg/jdmerge.c ****  *
  26:fltk-1.3.4-1/jpeg/jdmerge.c ****  * This file currently provides implementations for the following cases:
  27:fltk-1.3.4-1/jpeg/jdmerge.c ****  *	YCbCr => RGB color conversion only.
  28:fltk-1.3.4-1/jpeg/jdmerge.c ****  *	Sampling ratios of 2h1v or 2h2v.
  29:fltk-1.3.4-1/jpeg/jdmerge.c ****  *	No scaling needed at upsample time.
  30:fltk-1.3.4-1/jpeg/jdmerge.c ****  *	Corner-aligned (non-CCIR601) sampling alignment.
  31:fltk-1.3.4-1/jpeg/jdmerge.c ****  * Other special cases could be added, but in most applications these are
  32:fltk-1.3.4-1/jpeg/jdmerge.c ****  * the only common cases.  (For uncommon cases we fall back on the more
  33:fltk-1.3.4-1/jpeg/jdmerge.c ****  * general code in jdsample.c and jdcolor.c.)
  34:fltk-1.3.4-1/jpeg/jdmerge.c ****  */
  35:fltk-1.3.4-1/jpeg/jdmerge.c **** 
  36:fltk-1.3.4-1/jpeg/jdmerge.c **** #define JPEG_INTERNALS
  37:fltk-1.3.4-1/jpeg/jdmerge.c **** #include "jinclude.h"
  38:fltk-1.3.4-1/jpeg/jdmerge.c **** #include "jpeglib.h"
  39:fltk-1.3.4-1/jpeg/jdmerge.c **** 
  40:fltk-1.3.4-1/jpeg/jdmerge.c **** #ifdef UPSAMPLE_MERGING_SUPPORTED
  41:fltk-1.3.4-1/jpeg/jdmerge.c **** 
  42:fltk-1.3.4-1/jpeg/jdmerge.c **** 
  43:fltk-1.3.4-1/jpeg/jdmerge.c **** /* Private subobject */
  44:fltk-1.3.4-1/jpeg/jdmerge.c **** 
  45:fltk-1.3.4-1/jpeg/jdmerge.c **** typedef struct {
  46:fltk-1.3.4-1/jpeg/jdmerge.c ****   struct jpeg_upsampler pub;	/* public fields */
  47:fltk-1.3.4-1/jpeg/jdmerge.c **** 
  48:fltk-1.3.4-1/jpeg/jdmerge.c ****   /* Pointer to routine to do actual upsampling/conversion of one row group */
  49:fltk-1.3.4-1/jpeg/jdmerge.c ****   JMETHOD(void, upmethod, (j_decompress_ptr cinfo,
  50:fltk-1.3.4-1/jpeg/jdmerge.c **** 			   JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
  51:fltk-1.3.4-1/jpeg/jdmerge.c **** 			   JSAMPARRAY output_buf));
  52:fltk-1.3.4-1/jpeg/jdmerge.c **** 
  53:fltk-1.3.4-1/jpeg/jdmerge.c ****   /* Private state for YCC->RGB conversion */
  54:fltk-1.3.4-1/jpeg/jdmerge.c ****   int * Cr_r_tab;		/* => table for Cr to R conversion */
  55:fltk-1.3.4-1/jpeg/jdmerge.c ****   int * Cb_b_tab;		/* => table for Cb to B conversion */
  56:fltk-1.3.4-1/jpeg/jdmerge.c ****   INT32 * Cr_g_tab;		/* => table for Cr to G conversion */
  57:fltk-1.3.4-1/jpeg/jdmerge.c ****   INT32 * Cb_g_tab;		/* => table for Cb to G conversion */
  58:fltk-1.3.4-1/jpeg/jdmerge.c **** 
  59:fltk-1.3.4-1/jpeg/jdmerge.c ****   /* For 2:1 vertical sampling, we produce two output rows at a time.
  60:fltk-1.3.4-1/jpeg/jdmerge.c ****    * We need a "spare" row buffer to hold the second output row if the
  61:fltk-1.3.4-1/jpeg/jdmerge.c ****    * application provides just a one-row buffer; we also use the spare
  62:fltk-1.3.4-1/jpeg/jdmerge.c ****    * to discard the dummy last row if the image height is odd.
  63:fltk-1.3.4-1/jpeg/jdmerge.c ****    */
  64:fltk-1.3.4-1/jpeg/jdmerge.c ****   JSAMPROW spare_row;
  65:fltk-1.3.4-1/jpeg/jdmerge.c ****   boolean spare_full;		/* T if spare buffer is occupied */
  66:fltk-1.3.4-1/jpeg/jdmerge.c **** 
  67:fltk-1.3.4-1/jpeg/jdmerge.c ****   JDIMENSION out_row_width;	/* samples per output row */
  68:fltk-1.3.4-1/jpeg/jdmerge.c ****   JDIMENSION rows_to_go;	/* counts rows remaining in image */
  69:fltk-1.3.4-1/jpeg/jdmerge.c **** } my_upsampler;
  70:fltk-1.3.4-1/jpeg/jdmerge.c **** 
  71:fltk-1.3.4-1/jpeg/jdmerge.c **** typedef my_upsampler * my_upsample_ptr;
  72:fltk-1.3.4-1/jpeg/jdmerge.c **** 
  73:fltk-1.3.4-1/jpeg/jdmerge.c **** #define SCALEBITS	16	/* speediest right-shift on some machines */
  74:fltk-1.3.4-1/jpeg/jdmerge.c **** #define ONE_HALF	((INT32) 1 << (SCALEBITS-1))
  75:fltk-1.3.4-1/jpeg/jdmerge.c **** #define FIX(x)		((INT32) ((x) * (1L<<SCALEBITS) + 0.5))
  76:fltk-1.3.4-1/jpeg/jdmerge.c **** 
  77:fltk-1.3.4-1/jpeg/jdmerge.c **** 
  78:fltk-1.3.4-1/jpeg/jdmerge.c **** /*
  79:fltk-1.3.4-1/jpeg/jdmerge.c ****  * Initialize tables for YCC->RGB colorspace conversion.
  80:fltk-1.3.4-1/jpeg/jdmerge.c ****  * This is taken directly from jdcolor.c; see that file for more info.
  81:fltk-1.3.4-1/jpeg/jdmerge.c ****  */
  82:fltk-1.3.4-1/jpeg/jdmerge.c **** 
  83:fltk-1.3.4-1/jpeg/jdmerge.c **** LOCAL(void)
  84:fltk-1.3.4-1/jpeg/jdmerge.c **** build_ycc_rgb_table (j_decompress_ptr cinfo)
  85:fltk-1.3.4-1/jpeg/jdmerge.c **** {
  86:fltk-1.3.4-1/jpeg/jdmerge.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  87:fltk-1.3.4-1/jpeg/jdmerge.c ****   int i;
  88:fltk-1.3.4-1/jpeg/jdmerge.c ****   INT32 x;
  89:fltk-1.3.4-1/jpeg/jdmerge.c ****   SHIFT_TEMPS
  90:fltk-1.3.4-1/jpeg/jdmerge.c **** 
  91:fltk-1.3.4-1/jpeg/jdmerge.c ****   upsample->Cr_r_tab = (int *)
  92:fltk-1.3.4-1/jpeg/jdmerge.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
  93:fltk-1.3.4-1/jpeg/jdmerge.c **** 				(MAXJSAMPLE+1) * SIZEOF(int));
  94:fltk-1.3.4-1/jpeg/jdmerge.c ****   upsample->Cb_b_tab = (int *)
  95:fltk-1.3.4-1/jpeg/jdmerge.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
  96:fltk-1.3.4-1/jpeg/jdmerge.c **** 				(MAXJSAMPLE+1) * SIZEOF(int));
  97:fltk-1.3.4-1/jpeg/jdmerge.c ****   upsample->Cr_g_tab = (INT32 *)
  98:fltk-1.3.4-1/jpeg/jdmerge.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
  99:fltk-1.3.4-1/jpeg/jdmerge.c **** 				(MAXJSAMPLE+1) * SIZEOF(INT32));
 100:fltk-1.3.4-1/jpeg/jdmerge.c ****   upsample->Cb_g_tab = (INT32 *)
 101:fltk-1.3.4-1/jpeg/jdmerge.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 102:fltk-1.3.4-1/jpeg/jdmerge.c **** 				(MAXJSAMPLE+1) * SIZEOF(INT32));
 103:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 104:fltk-1.3.4-1/jpeg/jdmerge.c ****   for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 105:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
 106:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
 107:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Cr=>R value is nearest int to 1.402 * x */
 108:fltk-1.3.4-1/jpeg/jdmerge.c ****     upsample->Cr_r_tab[i] = (int)
 109:fltk-1.3.4-1/jpeg/jdmerge.c **** 		    RIGHT_SHIFT(FIX(1.402) * x + ONE_HALF, SCALEBITS);
 110:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Cb=>B value is nearest int to 1.772 * x */
 111:fltk-1.3.4-1/jpeg/jdmerge.c ****     upsample->Cb_b_tab[i] = (int)
 112:fltk-1.3.4-1/jpeg/jdmerge.c **** 		    RIGHT_SHIFT(FIX(1.772) * x + ONE_HALF, SCALEBITS);
 113:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Cr=>G value is scaled-up -0.714136286 * x */
 114:fltk-1.3.4-1/jpeg/jdmerge.c ****     upsample->Cr_g_tab[i] = (- FIX(0.714136286)) * x;
 115:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Cb=>G value is scaled-up -0.344136286 * x */
 116:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* We also add in ONE_HALF so that need not do it in inner loop */
 117:fltk-1.3.4-1/jpeg/jdmerge.c ****     upsample->Cb_g_tab[i] = (- FIX(0.344136286)) * x + ONE_HALF;
 118:fltk-1.3.4-1/jpeg/jdmerge.c ****   }
 119:fltk-1.3.4-1/jpeg/jdmerge.c **** }
 120:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 121:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 122:fltk-1.3.4-1/jpeg/jdmerge.c **** /*
 123:fltk-1.3.4-1/jpeg/jdmerge.c ****  * Initialize for an upsampling pass.
 124:fltk-1.3.4-1/jpeg/jdmerge.c ****  */
 125:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 126:fltk-1.3.4-1/jpeg/jdmerge.c **** METHODDEF(void)
 127:fltk-1.3.4-1/jpeg/jdmerge.c **** start_pass_merged_upsample (j_decompress_ptr cinfo)
 128:fltk-1.3.4-1/jpeg/jdmerge.c **** {
  11              		.loc 1 128 1 view -0
  12              		.cfi_startproc
  13              		.loc 1 128 1 is_stmt 0 view .LVU1
  14 0000 F30F1EFA 		endbr64
 129:fltk-1.3.4-1/jpeg/jdmerge.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  15              		.loc 1 129 3 is_stmt 1 view .LVU2
  16              		.loc 1 129 19 is_stmt 0 view .LVU3
  17 0004 488B8780 		movq	640(%rdi), %rax
  17      020000
  18              	.LVL1:
 130:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 131:fltk-1.3.4-1/jpeg/jdmerge.c ****   /* Mark the spare buffer empty */
 132:fltk-1.3.4-1/jpeg/jdmerge.c ****   upsample->spare_full = FALSE;
  19              		.loc 1 132 3 is_stmt 1 view .LVU4
  20              		.loc 1 132 24 is_stmt 0 view .LVU5
  21 000b C7404800 		movl	$0, 72(%rax)
  21      000000
 133:fltk-1.3.4-1/jpeg/jdmerge.c ****   /* Initialize total-height counter for detecting bottom of image */
 134:fltk-1.3.4-1/jpeg/jdmerge.c ****   upsample->rows_to_go = cinfo->output_height;
  22              		.loc 1 134 3 is_stmt 1 view .LVU6
  23              		.loc 1 134 31 is_stmt 0 view .LVU7
  24 0012 8B978C00 		movl	140(%rdi), %edx
  24      0000
  25              		.loc 1 134 24 view .LVU8
  26 0018 895050   		movl	%edx, 80(%rax)
 135:fltk-1.3.4-1/jpeg/jdmerge.c **** }
  27              		.loc 1 135 1 view .LVU9
  28 001b C3       		ret
  29              		.cfi_endproc
  30              	.LFE52:
  32              		.section	.text.merged_1v_upsample,"ax",@progbits
  33              		.p2align 4
  35              	merged_1v_upsample:
  36              	.LVL2:
  37              	.LFB54:
 136:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 137:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 138:fltk-1.3.4-1/jpeg/jdmerge.c **** /*
 139:fltk-1.3.4-1/jpeg/jdmerge.c ****  * Control routine to do upsampling (and color conversion).
 140:fltk-1.3.4-1/jpeg/jdmerge.c ****  *
 141:fltk-1.3.4-1/jpeg/jdmerge.c ****  * The control routine just handles the row buffering considerations.
 142:fltk-1.3.4-1/jpeg/jdmerge.c ****  */
 143:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 144:fltk-1.3.4-1/jpeg/jdmerge.c **** METHODDEF(void)
 145:fltk-1.3.4-1/jpeg/jdmerge.c **** merged_2v_upsample (j_decompress_ptr cinfo,
 146:fltk-1.3.4-1/jpeg/jdmerge.c **** 		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
 147:fltk-1.3.4-1/jpeg/jdmerge.c **** 		    JDIMENSION in_row_groups_avail,
 148:fltk-1.3.4-1/jpeg/jdmerge.c **** 		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
 149:fltk-1.3.4-1/jpeg/jdmerge.c **** 		    JDIMENSION out_rows_avail)
 150:fltk-1.3.4-1/jpeg/jdmerge.c **** /* 2:1 vertical sampling case: may need a spare row. */
 151:fltk-1.3.4-1/jpeg/jdmerge.c **** {
 152:fltk-1.3.4-1/jpeg/jdmerge.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 153:fltk-1.3.4-1/jpeg/jdmerge.c ****   JSAMPROW work_ptrs[2];
 154:fltk-1.3.4-1/jpeg/jdmerge.c ****   JDIMENSION num_rows;		/* number of rows returned to caller */
 155:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 156:fltk-1.3.4-1/jpeg/jdmerge.c ****   if (upsample->spare_full) {
 157:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* If we have a spare row saved from a previous cycle, just return it. */
 158:fltk-1.3.4-1/jpeg/jdmerge.c ****     jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 159:fltk-1.3.4-1/jpeg/jdmerge.c **** 		      1, upsample->out_row_width);
 160:fltk-1.3.4-1/jpeg/jdmerge.c ****     num_rows = 1;
 161:fltk-1.3.4-1/jpeg/jdmerge.c ****     upsample->spare_full = FALSE;
 162:fltk-1.3.4-1/jpeg/jdmerge.c ****   } else {
 163:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Figure number of rows to return to caller. */
 164:fltk-1.3.4-1/jpeg/jdmerge.c ****     num_rows = 2;
 165:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Not more than the distance to the end of the image. */
 166:fltk-1.3.4-1/jpeg/jdmerge.c ****     if (num_rows > upsample->rows_to_go)
 167:fltk-1.3.4-1/jpeg/jdmerge.c ****       num_rows = upsample->rows_to_go;
 168:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* And not more than what the client can accept: */
 169:fltk-1.3.4-1/jpeg/jdmerge.c ****     out_rows_avail -= *out_row_ctr;
 170:fltk-1.3.4-1/jpeg/jdmerge.c ****     if (num_rows > out_rows_avail)
 171:fltk-1.3.4-1/jpeg/jdmerge.c ****       num_rows = out_rows_avail;
 172:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Create output pointer array for upsampler. */
 173:fltk-1.3.4-1/jpeg/jdmerge.c ****     work_ptrs[0] = output_buf[*out_row_ctr];
 174:fltk-1.3.4-1/jpeg/jdmerge.c ****     if (num_rows > 1) {
 175:fltk-1.3.4-1/jpeg/jdmerge.c ****       work_ptrs[1] = output_buf[*out_row_ctr + 1];
 176:fltk-1.3.4-1/jpeg/jdmerge.c ****     } else {
 177:fltk-1.3.4-1/jpeg/jdmerge.c ****       work_ptrs[1] = upsample->spare_row;
 178:fltk-1.3.4-1/jpeg/jdmerge.c ****       upsample->spare_full = TRUE;
 179:fltk-1.3.4-1/jpeg/jdmerge.c ****     }
 180:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Now do the upsampling. */
 181:fltk-1.3.4-1/jpeg/jdmerge.c ****     (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 182:fltk-1.3.4-1/jpeg/jdmerge.c ****   }
 183:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 184:fltk-1.3.4-1/jpeg/jdmerge.c ****   /* Adjust counts */
 185:fltk-1.3.4-1/jpeg/jdmerge.c ****   *out_row_ctr += num_rows;
 186:fltk-1.3.4-1/jpeg/jdmerge.c ****   upsample->rows_to_go -= num_rows;
 187:fltk-1.3.4-1/jpeg/jdmerge.c ****   /* When the buffer is emptied, declare this input row group consumed */
 188:fltk-1.3.4-1/jpeg/jdmerge.c ****   if (! upsample->spare_full)
 189:fltk-1.3.4-1/jpeg/jdmerge.c ****     (*in_row_group_ctr)++;
 190:fltk-1.3.4-1/jpeg/jdmerge.c **** }
 191:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 192:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 193:fltk-1.3.4-1/jpeg/jdmerge.c **** METHODDEF(void)
 194:fltk-1.3.4-1/jpeg/jdmerge.c **** merged_1v_upsample (j_decompress_ptr cinfo,
 195:fltk-1.3.4-1/jpeg/jdmerge.c **** 		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
 196:fltk-1.3.4-1/jpeg/jdmerge.c **** 		    JDIMENSION in_row_groups_avail,
 197:fltk-1.3.4-1/jpeg/jdmerge.c **** 		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
 198:fltk-1.3.4-1/jpeg/jdmerge.c **** 		    JDIMENSION out_rows_avail)
 199:fltk-1.3.4-1/jpeg/jdmerge.c **** /* 1:1 vertical sampling case: much easier, never need a spare row. */
 200:fltk-1.3.4-1/jpeg/jdmerge.c **** {
  38              		.loc 1 200 1 is_stmt 1 view -0
  39              		.cfi_startproc
  40              		.loc 1 200 1 is_stmt 0 view .LVU11
  41 0000 F30F1EFA 		endbr64
 201:fltk-1.3.4-1/jpeg/jdmerge.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  42              		.loc 1 201 3 is_stmt 1 view .LVU12
  43              	.LVL3:
 202:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 203:fltk-1.3.4-1/jpeg/jdmerge.c ****   /* Just do the upsampling. */
 204:fltk-1.3.4-1/jpeg/jdmerge.c ****   (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
  44              		.loc 1 204 3 view .LVU13
 200:fltk-1.3.4-1/jpeg/jdmerge.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  45              		.loc 1 200 1 is_stmt 0 view .LVU14
  46 0004 55       		pushq	%rbp
  47              		.cfi_def_cfa_offset 16
  48              		.cfi_offset 6, -16
  49              	.LVL4:
 200:fltk-1.3.4-1/jpeg/jdmerge.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  50              		.loc 1 200 1 view .LVU15
  51 0005 4C89CD   		movq	%r9, %rbp
  52 0008 53       		pushq	%rbx
  53              		.cfi_def_cfa_offset 24
  54              		.cfi_offset 3, -24
  55 0009 4889D3   		movq	%rdx, %rbx
  56 000c 4883EC08 		subq	$8, %rsp
  57              		.cfi_def_cfa_offset 32
 205:fltk-1.3.4-1/jpeg/jdmerge.c **** 			 output_buf + *out_row_ctr);
  58              		.loc 1 205 18 view .LVU16
  59 0010 418B01   		movl	(%r9), %eax
 204:fltk-1.3.4-1/jpeg/jdmerge.c **** 			 output_buf + *out_row_ctr);
  60              		.loc 1 204 4 view .LVU17
  61 0013 8B12     		movl	(%rdx), %edx
  62              	.LVL5:
 204:fltk-1.3.4-1/jpeg/jdmerge.c **** 			 output_buf + *out_row_ctr);
  63              		.loc 1 204 4 view .LVU18
  64 0015 498D0CC0 		leaq	(%r8,%rax,8), %rcx
  65              	.LVL6:
 204:fltk-1.3.4-1/jpeg/jdmerge.c **** 			 output_buf + *out_row_ctr);
  66              		.loc 1 204 4 view .LVU19
  67 0019 488B8780 		movq	640(%rdi), %rax
  67      020000
  68 0020 FF5018   		call	*24(%rax)
  69              	.LVL7:
 206:fltk-1.3.4-1/jpeg/jdmerge.c ****   /* Adjust counts */
 207:fltk-1.3.4-1/jpeg/jdmerge.c ****   (*out_row_ctr)++;
  70              		.loc 1 207 3 is_stmt 1 view .LVU20
  71              		.loc 1 207 17 is_stmt 0 view .LVU21
  72 0023 83450001 		addl	$1, 0(%rbp)
 208:fltk-1.3.4-1/jpeg/jdmerge.c ****   (*in_row_group_ctr)++;
  73              		.loc 1 208 3 is_stmt 1 view .LVU22
  74              		.loc 1 208 22 is_stmt 0 view .LVU23
  75 0027 830301   		addl	$1, (%rbx)
 209:fltk-1.3.4-1/jpeg/jdmerge.c **** }
  76              		.loc 1 209 1 view .LVU24
  77 002a 4883C408 		addq	$8, %rsp
  78              		.cfi_def_cfa_offset 24
  79 002e 5B       		popq	%rbx
  80              		.cfi_def_cfa_offset 16
  81              	.LVL8:
  82              		.loc 1 209 1 view .LVU25
  83 002f 5D       		popq	%rbp
  84              		.cfi_def_cfa_offset 8
  85              	.LVL9:
  86              		.loc 1 209 1 view .LVU26
  87 0030 C3       		ret
  88              		.cfi_endproc
  89              	.LFE54:
  91              		.section	.text.h2v1_merged_upsample,"ax",@progbits
  92              		.p2align 4
  94              	h2v1_merged_upsample:
  95              	.LVL10:
  96              	.LFB55:
 210:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 211:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 212:fltk-1.3.4-1/jpeg/jdmerge.c **** /*
 213:fltk-1.3.4-1/jpeg/jdmerge.c ****  * These are the routines invoked by the control routines to do
 214:fltk-1.3.4-1/jpeg/jdmerge.c ****  * the actual upsampling/conversion.  One row group is processed per call.
 215:fltk-1.3.4-1/jpeg/jdmerge.c ****  *
 216:fltk-1.3.4-1/jpeg/jdmerge.c ****  * Note: since we may be writing directly into application-supplied buffers,
 217:fltk-1.3.4-1/jpeg/jdmerge.c ****  * we have to be honest about the output width; we can't assume the buffer
 218:fltk-1.3.4-1/jpeg/jdmerge.c ****  * has been rounded up to an even width.
 219:fltk-1.3.4-1/jpeg/jdmerge.c ****  */
 220:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 221:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 222:fltk-1.3.4-1/jpeg/jdmerge.c **** /*
 223:fltk-1.3.4-1/jpeg/jdmerge.c ****  * Upsample and color convert for the case of 2:1 horizontal and 1:1 vertical.
 224:fltk-1.3.4-1/jpeg/jdmerge.c ****  */
 225:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 226:fltk-1.3.4-1/jpeg/jdmerge.c **** METHODDEF(void)
 227:fltk-1.3.4-1/jpeg/jdmerge.c **** h2v1_merged_upsample (j_decompress_ptr cinfo,
 228:fltk-1.3.4-1/jpeg/jdmerge.c **** 		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
 229:fltk-1.3.4-1/jpeg/jdmerge.c **** 		      JSAMPARRAY output_buf)
 230:fltk-1.3.4-1/jpeg/jdmerge.c **** {
  97              		.loc 1 230 1 is_stmt 1 view -0
  98              		.cfi_startproc
  99              		.loc 1 230 1 is_stmt 0 view .LVU28
 100 0000 F30F1EFA 		endbr64
 231:fltk-1.3.4-1/jpeg/jdmerge.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 101              		.loc 1 231 3 is_stmt 1 view .LVU29
 230:fltk-1.3.4-1/jpeg/jdmerge.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 102              		.loc 1 230 1 is_stmt 0 view .LVU30
 103 0004 4157     		pushq	%r15
 104              		.cfi_def_cfa_offset 16
 105              		.cfi_offset 15, -16
 232:fltk-1.3.4-1/jpeg/jdmerge.c ****   register int y, cred, cgreen, cblue;
 233:fltk-1.3.4-1/jpeg/jdmerge.c ****   int cb, cr;
 234:fltk-1.3.4-1/jpeg/jdmerge.c ****   register JSAMPROW outptr;
 235:fltk-1.3.4-1/jpeg/jdmerge.c ****   JSAMPROW inptr0, inptr1, inptr2;
 236:fltk-1.3.4-1/jpeg/jdmerge.c ****   JDIMENSION col;
 237:fltk-1.3.4-1/jpeg/jdmerge.c ****   /* copy these pointers into registers if possible */
 238:fltk-1.3.4-1/jpeg/jdmerge.c ****   register JSAMPLE * range_limit = cinfo->sample_range_limit;
 239:fltk-1.3.4-1/jpeg/jdmerge.c ****   int * Crrtab = upsample->Cr_r_tab;
 240:fltk-1.3.4-1/jpeg/jdmerge.c ****   int * Cbbtab = upsample->Cb_b_tab;
 241:fltk-1.3.4-1/jpeg/jdmerge.c ****   INT32 * Crgtab = upsample->Cr_g_tab;
 242:fltk-1.3.4-1/jpeg/jdmerge.c ****   INT32 * Cbgtab = upsample->Cb_g_tab;
 243:fltk-1.3.4-1/jpeg/jdmerge.c ****   SHIFT_TEMPS
 244:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 245:fltk-1.3.4-1/jpeg/jdmerge.c ****   inptr0 = input_buf[0][in_row_group_ctr];
 106              		.loc 1 245 24 view .LVU31
 107 0006 89D2     		movl	%edx, %edx
 230:fltk-1.3.4-1/jpeg/jdmerge.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 108              		.loc 1 230 1 view .LVU32
 109 0008 4156     		pushq	%r14
 110              		.cfi_def_cfa_offset 24
 111              		.cfi_offset 14, -24
 112 000a 4155     		pushq	%r13
 113              		.cfi_def_cfa_offset 32
 114              		.cfi_offset 13, -32
 115 000c 4154     		pushq	%r12
 116              		.cfi_def_cfa_offset 40
 117              		.cfi_offset 12, -40
 118 000e 55       		pushq	%rbp
 119              		.cfi_def_cfa_offset 48
 120              		.cfi_offset 6, -48
 121 000f 53       		pushq	%rbx
 122              		.cfi_def_cfa_offset 56
 123              		.cfi_offset 3, -56
 231:fltk-1.3.4-1/jpeg/jdmerge.c ****   register int y, cred, cgreen, cblue;
 124              		.loc 1 231 19 view .LVU33
 125 0010 488B8780 		movq	640(%rdi), %rax
 125      020000
 126              	.LVL11:
 232:fltk-1.3.4-1/jpeg/jdmerge.c ****   register int y, cred, cgreen, cblue;
 127              		.loc 1 232 3 is_stmt 1 view .LVU34
 233:fltk-1.3.4-1/jpeg/jdmerge.c ****   register JSAMPROW outptr;
 128              		.loc 1 233 3 view .LVU35
 234:fltk-1.3.4-1/jpeg/jdmerge.c ****   JSAMPROW inptr0, inptr1, inptr2;
 129              		.loc 1 234 3 view .LVU36
 235:fltk-1.3.4-1/jpeg/jdmerge.c ****   JDIMENSION col;
 130              		.loc 1 235 3 view .LVU37
 236:fltk-1.3.4-1/jpeg/jdmerge.c ****   /* copy these pointers into registers if possible */
 131              		.loc 1 236 3 view .LVU38
 238:fltk-1.3.4-1/jpeg/jdmerge.c ****   int * Crrtab = upsample->Cr_r_tab;
 132              		.loc 1 238 3 view .LVU39
 238:fltk-1.3.4-1/jpeg/jdmerge.c ****   int * Crrtab = upsample->Cr_r_tab;
 133              		.loc 1 238 22 is_stmt 0 view .LVU40
 134 0017 4C8B8FB8 		movq	440(%rdi), %r9
 134      010000
 135              	.LVL12:
 239:fltk-1.3.4-1/jpeg/jdmerge.c ****   int * Cbbtab = upsample->Cb_b_tab;
 136              		.loc 1 239 3 is_stmt 1 view .LVU41
 239:fltk-1.3.4-1/jpeg/jdmerge.c ****   int * Cbbtab = upsample->Cb_b_tab;
 137              		.loc 1 239 9 is_stmt 0 view .LVU42
 138 001e 4C8B6020 		movq	32(%rax), %r12
 139              	.LVL13:
 240:fltk-1.3.4-1/jpeg/jdmerge.c ****   INT32 * Crgtab = upsample->Cr_g_tab;
 140              		.loc 1 240 3 is_stmt 1 view .LVU43
 240:fltk-1.3.4-1/jpeg/jdmerge.c ****   INT32 * Crgtab = upsample->Cr_g_tab;
 141              		.loc 1 240 9 is_stmt 0 view .LVU44
 142 0022 4C8B6828 		movq	40(%rax), %r13
 143              	.LVL14:
 241:fltk-1.3.4-1/jpeg/jdmerge.c ****   INT32 * Cbgtab = upsample->Cb_g_tab;
 144              		.loc 1 241 3 is_stmt 1 view .LVU45
 241:fltk-1.3.4-1/jpeg/jdmerge.c ****   INT32 * Cbgtab = upsample->Cb_g_tab;
 145              		.loc 1 241 11 is_stmt 0 view .LVU46
 146 0026 4C8B7830 		movq	48(%rax), %r15
 147              	.LVL15:
 242:fltk-1.3.4-1/jpeg/jdmerge.c ****   SHIFT_TEMPS
 148              		.loc 1 242 3 is_stmt 1 view .LVU47
 242:fltk-1.3.4-1/jpeg/jdmerge.c ****   SHIFT_TEMPS
 149              		.loc 1 242 11 is_stmt 0 view .LVU48
 150 002a 4C8B7038 		movq	56(%rax), %r14
 151              	.LVL16:
 152              		.loc 1 245 3 is_stmt 1 view .LVU49
 230:fltk-1.3.4-1/jpeg/jdmerge.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 153              		.loc 1 230 1 is_stmt 0 view .LVU50
 154 002e 48897C24 		movq	%rdi, -16(%rsp)
 154      F0
 155              		.loc 1 245 10 view .LVU51
 156 0033 488B06   		movq	(%rsi), %rax
 157              	.LVL17:
 158              		.loc 1 245 10 view .LVU52
 159 0036 4C8B1CD0 		movq	(%rax,%rdx,8), %r11
 160              	.LVL18:
 246:fltk-1.3.4-1/jpeg/jdmerge.c ****   inptr1 = input_buf[1][in_row_group_ctr];
 161              		.loc 1 246 3 is_stmt 1 view .LVU53
 162              		.loc 1 246 10 is_stmt 0 view .LVU54
 163 003a 488B4608 		movq	8(%rsi), %rax
 164 003e 488B1CD0 		movq	(%rax,%rdx,8), %rbx
 165              	.LVL19:
 247:fltk-1.3.4-1/jpeg/jdmerge.c ****   inptr2 = input_buf[2][in_row_group_ctr];
 166              		.loc 1 247 3 is_stmt 1 view .LVU55
 167              		.loc 1 247 10 is_stmt 0 view .LVU56
 168 0042 488B4610 		movq	16(%rsi), %rax
 248:fltk-1.3.4-1/jpeg/jdmerge.c ****   outptr = output_buf[0];
 169              		.loc 1 248 10 view .LVU57
 170 0046 488B31   		movq	(%rcx), %rsi
 171              	.LVL20:
 247:fltk-1.3.4-1/jpeg/jdmerge.c ****   inptr2 = input_buf[2][in_row_group_ctr];
 172              		.loc 1 247 10 view .LVU58
 173 0049 488B2CD0 		movq	(%rax,%rdx,8), %rbp
 174              	.LVL21:
 175              		.loc 1 248 3 is_stmt 1 view .LVU59
 249:fltk-1.3.4-1/jpeg/jdmerge.c ****   /* Loop for each pair of output pixels */
 250:fltk-1.3.4-1/jpeg/jdmerge.c ****   for (col = cinfo->output_width >> 1; col > 0; col--) {
 176              		.loc 1 250 19 is_stmt 0 view .LVU60
 177 004d 8B878800 		movl	136(%rdi), %eax
 177      0000
 248:fltk-1.3.4-1/jpeg/jdmerge.c ****   outptr = output_buf[0];
 178              		.loc 1 248 10 view .LVU61
 179 0053 48897424 		movq	%rsi, -24(%rsp)
 179      E8
 180              	.LVL22:
 181              		.loc 1 250 3 is_stmt 1 view .LVU62
 182              		.loc 1 250 40 view .LVU63
 183              		.loc 1 250 3 is_stmt 0 view .LVU64
 184 0058 89C2     		movl	%eax, %edx
 185              	.LVL23:
 186              		.loc 1 250 3 view .LVU65
 187 005a D1EA     		shrl	%edx
 188              	.LVL24:
 189              		.loc 1 250 3 view .LVU66
 190 005c 0F84E000 		je	.L6
 190      0000
 191 0062 8D42FF   		leal	-1(%rdx), %eax
 248:fltk-1.3.4-1/jpeg/jdmerge.c ****   outptr = output_buf[0];
 192              		.loc 1 248 10 view .LVU67
 193 0065 4889F2   		movq	%rsi, %rdx
 194              	.LVL25:
 195              		.loc 1 250 3 view .LVU68
 196 0068 31F6     		xorl	%esi, %esi
 197              	.LVL26:
 198              		.loc 1 250 3 view .LVU69
 199 006a 48894424 		movq	%rax, -32(%rsp)
 199      E0
 200 006f 4883C001 		addq	$1, %rax
 201 0073 48894424 		movq	%rax, -8(%rsp)
 201      F8
 202              	.LVL27:
 203 0078 0F1F8400 		.p2align 4,,10
 203      00000000 
 204              		.p2align 3
 205              	.L7:
 251:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Do the chroma part of the calculation */
 252:fltk-1.3.4-1/jpeg/jdmerge.c ****     cb = GETJSAMPLE(*inptr1++);
 206              		.loc 1 252 5 is_stmt 1 discriminator 3 view .LVU70
 253:fltk-1.3.4-1/jpeg/jdmerge.c ****     cr = GETJSAMPLE(*inptr2++);
 207              		.loc 1 253 5 discriminator 3 view .LVU71
 254:fltk-1.3.4-1/jpeg/jdmerge.c ****     cred = Crrtab[cr];
 208              		.loc 1 254 5 discriminator 3 view .LVU72
 255:fltk-1.3.4-1/jpeg/jdmerge.c ****     cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 209              		.loc 1 255 20 is_stmt 0 discriminator 3 view .LVU73
 210 0080 0FB60C33 		movzbl	(%rbx,%rsi), %ecx
 254:fltk-1.3.4-1/jpeg/jdmerge.c ****     cred = Crrtab[cr];
 211              		.loc 1 254 18 discriminator 3 view .LVU74
 212 0084 0FB64435 		movzbl	0(%rbp,%rsi), %eax
 212      00
 213 0089 4883C206 		addq	$6, %rdx
 214              	.LVL28:
 254:fltk-1.3.4-1/jpeg/jdmerge.c ****     cred = Crrtab[cr];
 215              		.loc 1 254 10 discriminator 3 view .LVU75
 216 008d 458B0484 		movl	(%r12,%rax,4), %r8d
 217              	.LVL29:
 218              		.loc 1 255 5 is_stmt 1 discriminator 3 view .LVU76
 256:fltk-1.3.4-1/jpeg/jdmerge.c ****     cblue = Cbbtab[cb];
 219              		.loc 1 256 11 is_stmt 0 discriminator 3 view .LVU77
 220 0091 418B7C8D 		movl	0(%r13,%rcx,4), %edi
 220      00
 255:fltk-1.3.4-1/jpeg/jdmerge.c ****     cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 221              		.loc 1 255 20 discriminator 3 view .LVU78
 222 0096 498B04C7 		movq	(%r15,%rax,8), %rax
 223 009a 490304CE 		addq	(%r14,%rcx,8), %rax
 257:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Fetch 2 Y values and emit 2 pixels */
 258:fltk-1.3.4-1/jpeg/jdmerge.c ****     y  = GETJSAMPLE(*inptr0++);
 224              		.loc 1 258 8 discriminator 3 view .LVU79
 225 009e 410FB60C 		movzbl	(%r11,%rsi,2), %ecx
 225      73
 255:fltk-1.3.4-1/jpeg/jdmerge.c ****     cblue = Cbbtab[cb];
 226              		.loc 1 255 20 discriminator 3 view .LVU80
 227 00a3 48C1F810 		sarq	$16, %rax
 228              	.LVL30:
 256:fltk-1.3.4-1/jpeg/jdmerge.c ****     cblue = Cbbtab[cb];
 229              		.loc 1 256 5 is_stmt 1 discriminator 3 view .LVU81
 230              		.loc 1 258 5 discriminator 3 view .LVU82
 259:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr[RGB_RED] =   range_limit[y + cred];
 231              		.loc 1 259 5 discriminator 3 view .LVU83
 232              		.loc 1 259 39 is_stmt 0 discriminator 3 view .LVU84
 233 00a7 458D1408 		leal	(%r8,%rcx), %r10d
 234 00ab 4D63D2   		movslq	%r10d, %r10
 235              		.loc 1 259 36 discriminator 3 view .LVU85
 236 00ae 470FB614 		movzbl	(%r9,%r10), %r10d
 236      11
 237              		.loc 1 259 21 discriminator 3 view .LVU86
 238 00b3 448852FA 		movb	%r10b, -6(%rdx)
 239              	.LVL31:
 260:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr[RGB_GREEN] = range_limit[y + cgreen];
 240              		.loc 1 260 5 is_stmt 1 discriminator 3 view .LVU87
 241              		.loc 1 260 39 is_stmt 0 discriminator 3 view .LVU88
 242 00b7 448D1401 		leal	(%rcx,%rax), %r10d
 261:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr[RGB_BLUE] =  range_limit[y + cblue];
 243              		.loc 1 261 39 discriminator 3 view .LVU89
 244 00bb 01F9     		addl	%edi, %ecx
 245              	.LVL32:
 260:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr[RGB_GREEN] = range_limit[y + cgreen];
 246              		.loc 1 260 39 discriminator 3 view .LVU90
 247 00bd 4D63D2   		movslq	%r10d, %r10
 248              		.loc 1 261 39 discriminator 3 view .LVU91
 249 00c0 4863C9   		movslq	%ecx, %rcx
 260:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr[RGB_GREEN] = range_limit[y + cgreen];
 250              		.loc 1 260 36 discriminator 3 view .LVU92
 251 00c3 470FB614 		movzbl	(%r9,%r10), %r10d
 251      11
 260:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr[RGB_GREEN] = range_limit[y + cgreen];
 252              		.loc 1 260 23 discriminator 3 view .LVU93
 253 00c8 448852FB 		movb	%r10b, -5(%rdx)
 254              		.loc 1 261 5 is_stmt 1 discriminator 3 view .LVU94
 255              		.loc 1 261 36 is_stmt 0 discriminator 3 view .LVU95
 256 00cc 410FB60C 		movzbl	(%r9,%rcx), %ecx
 256      09
 257              		.loc 1 261 22 discriminator 3 view .LVU96
 258 00d1 884AFC   		movb	%cl, -4(%rdx)
 262:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr += RGB_PIXELSIZE;
 259              		.loc 1 262 5 is_stmt 1 discriminator 3 view .LVU97
 260              	.LVL33:
 263:fltk-1.3.4-1/jpeg/jdmerge.c ****     y  = GETJSAMPLE(*inptr0++);
 261              		.loc 1 263 5 discriminator 3 view .LVU98
 262              		.loc 1 263 8 is_stmt 0 discriminator 3 view .LVU99
 263 00d4 410FB64C 		movzbl	1(%r11,%rsi,2), %ecx
 263      7301
 264              	.LVL34:
 264:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr[RGB_RED] =   range_limit[y + cred];
 265              		.loc 1 264 5 is_stmt 1 discriminator 3 view .LVU100
 266              		.loc 1 264 39 is_stmt 0 discriminator 3 view .LVU101
 267 00da 4101C8   		addl	%ecx, %r8d
 268              	.LVL35:
 265:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr[RGB_GREEN] = range_limit[y + cgreen];
 269              		.loc 1 265 39 discriminator 3 view .LVU102
 270 00dd 01C8     		addl	%ecx, %eax
 271              	.LVL36:
 266:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr[RGB_BLUE] =  range_limit[y + cblue];
 272              		.loc 1 266 39 discriminator 3 view .LVU103
 273 00df 01CF     		addl	%ecx, %edi
 274              	.LVL37:
 264:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr[RGB_RED] =   range_limit[y + cred];
 275              		.loc 1 264 39 discriminator 3 view .LVU104
 276 00e1 4D63C0   		movslq	%r8d, %r8
 265:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr[RGB_GREEN] = range_limit[y + cgreen];
 277              		.loc 1 265 39 discriminator 3 view .LVU105
 278 00e4 4898     		cltq
 279              		.loc 1 266 39 discriminator 3 view .LVU106
 280 00e6 4863FF   		movslq	%edi, %rdi
 264:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr[RGB_RED] =   range_limit[y + cred];
 281              		.loc 1 264 36 discriminator 3 view .LVU107
 282 00e9 470FB604 		movzbl	(%r9,%r8), %r8d
 282      01
 264:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr[RGB_RED] =   range_limit[y + cred];
 283              		.loc 1 264 21 discriminator 3 view .LVU108
 284 00ee 448842FD 		movb	%r8b, -3(%rdx)
 265:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr[RGB_GREEN] = range_limit[y + cgreen];
 285              		.loc 1 265 5 is_stmt 1 discriminator 3 view .LVU109
 265:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr[RGB_GREEN] = range_limit[y + cgreen];
 286              		.loc 1 265 36 is_stmt 0 discriminator 3 view .LVU110
 287 00f2 410FB604 		movzbl	(%r9,%rax), %eax
 287      01
 265:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr[RGB_GREEN] = range_limit[y + cgreen];
 288              		.loc 1 265 23 discriminator 3 view .LVU111
 289 00f7 8842FE   		movb	%al, -2(%rdx)
 290              		.loc 1 266 5 is_stmt 1 discriminator 3 view .LVU112
 291              		.loc 1 266 36 is_stmt 0 discriminator 3 view .LVU113
 292 00fa 410FB604 		movzbl	(%r9,%rdi), %eax
 292      39
 293              		.loc 1 266 22 discriminator 3 view .LVU114
 294 00ff 8842FF   		movb	%al, -1(%rdx)
 267:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr += RGB_PIXELSIZE;
 295              		.loc 1 267 5 is_stmt 1 discriminator 3 view .LVU115
 296              	.LVL38:
 250:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Do the chroma part of the calculation */
 297              		.loc 1 250 49 discriminator 3 view .LVU116
 250:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Do the chroma part of the calculation */
 298              		.loc 1 250 40 discriminator 3 view .LVU117
 299 0102 4889F0   		movq	%rsi, %rax
 300 0105 4883C601 		addq	$1, %rsi
 301              	.LVL39:
 250:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Do the chroma part of the calculation */
 302              		.loc 1 250 3 is_stmt 0 discriminator 3 view .LVU118
 303 0109 48394424 		cmpq	%rax, -32(%rsp)
 303      E0
 304 010e 0F856CFF 		jne	.L7
 304      FFFF
 305 0114 488B7424 		movq	-8(%rsp), %rsi
 305      F8
 306 0119 488B5424 		movq	-24(%rsp), %rdx
 306      E8
 307              	.LVL40:
 250:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Do the chroma part of the calculation */
 308              		.loc 1 250 3 discriminator 3 view .LVU119
 309 011e 488D0436 		leaq	(%rsi,%rsi), %rax
 310              	.LVL41:
 250:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Do the chroma part of the calculation */
 311              		.loc 1 250 3 discriminator 3 view .LVU120
 312 0122 4801F3   		addq	%rsi, %rbx
 250:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Do the chroma part of the calculation */
 313              		.loc 1 250 3 discriminator 3 view .LVU121
 314 0125 4801F5   		addq	%rsi, %rbp
 250:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Do the chroma part of the calculation */
 315              		.loc 1 250 3 discriminator 3 view .LVU122
 316 0128 4901C3   		addq	%rax, %r11
 317 012b 4801F0   		addq	%rsi, %rax
 318 012e 488D0442 		leaq	(%rdx,%rax,2), %rax
 319 0132 48894424 		movq	%rax, -24(%rsp)
 319      E8
 320 0137 488B4424 		movq	-16(%rsp), %rax
 320      F0
 321 013c 8B808800 		movl	136(%rax), %eax
 321      0000
 322              	.LVL42:
 323              	.L6:
 268:fltk-1.3.4-1/jpeg/jdmerge.c ****   }
 269:fltk-1.3.4-1/jpeg/jdmerge.c ****   /* If image width is odd, do the last output column separately */
 270:fltk-1.3.4-1/jpeg/jdmerge.c ****   if (cinfo->output_width & 1) {
 324              		.loc 1 270 3 is_stmt 1 view .LVU123
 325              		.loc 1 270 6 is_stmt 0 view .LVU124
 326 0142 A801     		testb	$1, %al
 327 0144 744B     		je	.L5
 271:fltk-1.3.4-1/jpeg/jdmerge.c ****     cb = GETJSAMPLE(*inptr1);
 328              		.loc 1 271 5 is_stmt 1 view .LVU125
 329              	.LVL43:
 272:fltk-1.3.4-1/jpeg/jdmerge.c ****     cr = GETJSAMPLE(*inptr2);
 330              		.loc 1 272 5 view .LVU126
 273:fltk-1.3.4-1/jpeg/jdmerge.c ****     cred = Crrtab[cr];
 331              		.loc 1 273 5 view .LVU127
 332              		.loc 1 273 18 is_stmt 0 view .LVU128
 333 0146 0FB67500 		movzbl	0(%rbp), %esi
 334              	.LVL44:
 274:fltk-1.3.4-1/jpeg/jdmerge.c ****     cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 335              		.loc 1 274 5 is_stmt 1 view .LVU129
 275:fltk-1.3.4-1/jpeg/jdmerge.c ****     cblue = Cbbtab[cb];
 276:fltk-1.3.4-1/jpeg/jdmerge.c ****     y  = GETJSAMPLE(*inptr0);
 336              		.loc 1 276 8 is_stmt 0 view .LVU130
 337 014a 410FB60B 		movzbl	(%r11), %ecx
 274:fltk-1.3.4-1/jpeg/jdmerge.c ****     cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 338              		.loc 1 274 20 view .LVU131
 339 014e 0FB613   		movzbl	(%rbx), %edx
 277:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr[RGB_RED] =   range_limit[y + cred];
 340              		.loc 1 277 39 view .LVU132
 341 0151 418B1CB4 		movl	(%r12,%rsi,4), %ebx
 342              	.LVL45:
 274:fltk-1.3.4-1/jpeg/jdmerge.c ****     cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 343              		.loc 1 274 20 view .LVU133
 344 0155 498B04F7 		movq	(%r15,%rsi,8), %rax
 345 0159 490304D6 		addq	(%r14,%rdx,8), %rax
 275:fltk-1.3.4-1/jpeg/jdmerge.c ****     cblue = Cbbtab[cb];
 346              		.loc 1 275 11 view .LVU134
 347 015d 418B5495 		movl	0(%r13,%rdx,4), %edx
 347      00
 348              	.LVL46:
 349              		.loc 1 277 39 view .LVU135
 350 0162 01CB     		addl	%ecx, %ebx
 274:fltk-1.3.4-1/jpeg/jdmerge.c ****     cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 351              		.loc 1 274 20 view .LVU136
 352 0164 48C1F810 		sarq	$16, %rax
 353              	.LVL47:
 275:fltk-1.3.4-1/jpeg/jdmerge.c ****     cblue = Cbbtab[cb];
 354              		.loc 1 275 5 is_stmt 1 view .LVU137
 276:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr[RGB_RED] =   range_limit[y + cred];
 355              		.loc 1 276 5 view .LVU138
 356              		.loc 1 277 5 view .LVU139
 357              		.loc 1 277 39 is_stmt 0 view .LVU140
 358 0168 4863F3   		movslq	%ebx, %rsi
 359              	.LVL48:
 278:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr[RGB_GREEN] = range_limit[y + cgreen];
 360              		.loc 1 278 39 view .LVU141
 361 016b 01C8     		addl	%ecx, %eax
 362              	.LVL49:
 277:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr[RGB_RED] =   range_limit[y + cred];
 363              		.loc 1 277 21 view .LVU142
 364 016d 488B5C24 		movq	-24(%rsp), %rbx
 364      E8
 277:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr[RGB_RED] =   range_limit[y + cred];
 365              		.loc 1 277 36 view .LVU143
 366 0172 410FB634 		movzbl	(%r9,%rsi), %esi
 366      31
 367              		.loc 1 278 39 view .LVU144
 368 0177 4898     		cltq
 277:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr[RGB_RED] =   range_limit[y + cred];
 369              		.loc 1 277 21 view .LVU145
 370 0179 408833   		movb	%sil, (%rbx)
 371              	.LVL50:
 372              		.loc 1 278 5 is_stmt 1 view .LVU146
 373              		.loc 1 278 36 is_stmt 0 view .LVU147
 374 017c 410FB604 		movzbl	(%r9,%rax), %eax
 374      01
 375              		.loc 1 278 23 view .LVU148
 376 0181 884301   		movb	%al, 1(%rbx)
 279:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr[RGB_BLUE] =  range_limit[y + cblue];
 377              		.loc 1 279 5 is_stmt 1 view .LVU149
 378              		.loc 1 279 39 is_stmt 0 view .LVU150
 379 0184 8D040A   		leal	(%rdx,%rcx), %eax
 380 0187 4898     		cltq
 381              		.loc 1 279 36 view .LVU151
 382 0189 410FB604 		movzbl	(%r9,%rax), %eax
 382      01
 383              		.loc 1 279 22 view .LVU152
 384 018e 884302   		movb	%al, 2(%rbx)
 385              	.LVL51:
 386              	.L5:
 280:fltk-1.3.4-1/jpeg/jdmerge.c ****   }
 281:fltk-1.3.4-1/jpeg/jdmerge.c **** }
 387              		.loc 1 281 1 view .LVU153
 388 0191 5B       		popq	%rbx
 389              		.cfi_def_cfa_offset 48
 390 0192 5D       		popq	%rbp
 391              		.cfi_def_cfa_offset 40
 392 0193 415C     		popq	%r12
 393              		.cfi_def_cfa_offset 32
 394              	.LVL52:
 395              		.loc 1 281 1 view .LVU154
 396 0195 415D     		popq	%r13
 397              		.cfi_def_cfa_offset 24
 398              	.LVL53:
 399              		.loc 1 281 1 view .LVU155
 400 0197 415E     		popq	%r14
 401              		.cfi_def_cfa_offset 16
 402              	.LVL54:
 403              		.loc 1 281 1 view .LVU156
 404 0199 415F     		popq	%r15
 405              		.cfi_def_cfa_offset 8
 406              	.LVL55:
 407              		.loc 1 281 1 view .LVU157
 408 019b C3       		ret
 409              		.cfi_endproc
 410              	.LFE55:
 412              		.section	.text.h2v2_merged_upsample,"ax",@progbits
 413              		.p2align 4
 415              	h2v2_merged_upsample:
 416              	.LVL56:
 417              	.LFB56:
 282:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 283:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 284:fltk-1.3.4-1/jpeg/jdmerge.c **** /*
 285:fltk-1.3.4-1/jpeg/jdmerge.c ****  * Upsample and color convert for the case of 2:1 horizontal and 2:1 vertical.
 286:fltk-1.3.4-1/jpeg/jdmerge.c ****  */
 287:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 288:fltk-1.3.4-1/jpeg/jdmerge.c **** METHODDEF(void)
 289:fltk-1.3.4-1/jpeg/jdmerge.c **** h2v2_merged_upsample (j_decompress_ptr cinfo,
 290:fltk-1.3.4-1/jpeg/jdmerge.c **** 		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
 291:fltk-1.3.4-1/jpeg/jdmerge.c **** 		      JSAMPARRAY output_buf)
 292:fltk-1.3.4-1/jpeg/jdmerge.c **** {
 418              		.loc 1 292 1 is_stmt 1 view -0
 419              		.cfi_startproc
 420              		.loc 1 292 1 is_stmt 0 view .LVU159
 421 0000 F30F1EFA 		endbr64
 293:fltk-1.3.4-1/jpeg/jdmerge.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 422              		.loc 1 293 3 is_stmt 1 view .LVU160
 292:fltk-1.3.4-1/jpeg/jdmerge.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 423              		.loc 1 292 1 is_stmt 0 view .LVU161
 424 0004 4157     		pushq	%r15
 425              		.cfi_def_cfa_offset 16
 426              		.cfi_offset 15, -16
 294:fltk-1.3.4-1/jpeg/jdmerge.c ****   register int y, cred, cgreen, cblue;
 295:fltk-1.3.4-1/jpeg/jdmerge.c ****   int cb, cr;
 296:fltk-1.3.4-1/jpeg/jdmerge.c ****   register JSAMPROW outptr0, outptr1;
 297:fltk-1.3.4-1/jpeg/jdmerge.c ****   JSAMPROW inptr00, inptr01, inptr1, inptr2;
 298:fltk-1.3.4-1/jpeg/jdmerge.c ****   JDIMENSION col;
 299:fltk-1.3.4-1/jpeg/jdmerge.c ****   /* copy these pointers into registers if possible */
 300:fltk-1.3.4-1/jpeg/jdmerge.c ****   register JSAMPLE * range_limit = cinfo->sample_range_limit;
 301:fltk-1.3.4-1/jpeg/jdmerge.c ****   int * Crrtab = upsample->Cr_r_tab;
 302:fltk-1.3.4-1/jpeg/jdmerge.c ****   int * Cbbtab = upsample->Cb_b_tab;
 303:fltk-1.3.4-1/jpeg/jdmerge.c ****   INT32 * Crgtab = upsample->Cr_g_tab;
 304:fltk-1.3.4-1/jpeg/jdmerge.c ****   INT32 * Cbgtab = upsample->Cb_g_tab;
 305:fltk-1.3.4-1/jpeg/jdmerge.c ****   SHIFT_TEMPS
 306:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 307:fltk-1.3.4-1/jpeg/jdmerge.c ****   inptr00 = input_buf[0][in_row_group_ctr*2];
 427              		.loc 1 307 42 view .LVU162
 428 0006 448D0C12 		leal	(%rdx,%rdx), %r9d
 308:fltk-1.3.4-1/jpeg/jdmerge.c ****   inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 309:fltk-1.3.4-1/jpeg/jdmerge.c ****   inptr1 = input_buf[1][in_row_group_ctr];
 429              		.loc 1 309 24 view .LVU163
 430 000a 89D2     		movl	%edx, %edx
 292:fltk-1.3.4-1/jpeg/jdmerge.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 431              		.loc 1 292 1 view .LVU164
 432 000c 4989FF   		movq	%rdi, %r15
 433 000f 4156     		pushq	%r14
 434              		.cfi_def_cfa_offset 24
 435              		.cfi_offset 14, -24
 308:fltk-1.3.4-1/jpeg/jdmerge.c ****   inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 436              		.loc 1 308 45 view .LVU165
 437 0011 458D4101 		leal	1(%r9), %r8d
 292:fltk-1.3.4-1/jpeg/jdmerge.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 438              		.loc 1 292 1 view .LVU166
 439 0015 4155     		pushq	%r13
 440              		.cfi_def_cfa_offset 32
 441              		.cfi_offset 13, -32
 442 0017 4154     		pushq	%r12
 443              		.cfi_def_cfa_offset 40
 444              		.cfi_offset 12, -40
 445 0019 55       		pushq	%rbp
 446              		.cfi_def_cfa_offset 48
 447              		.cfi_offset 6, -48
 448 001a 53       		pushq	%rbx
 449              		.cfi_def_cfa_offset 56
 450              		.cfi_offset 3, -56
 293:fltk-1.3.4-1/jpeg/jdmerge.c ****   register int y, cred, cgreen, cblue;
 451              		.loc 1 293 19 view .LVU167
 452 001b 488B8780 		movq	640(%rdi), %rax
 452      020000
 453              	.LVL57:
 294:fltk-1.3.4-1/jpeg/jdmerge.c ****   int cb, cr;
 454              		.loc 1 294 3 is_stmt 1 view .LVU168
 295:fltk-1.3.4-1/jpeg/jdmerge.c ****   register JSAMPROW outptr0, outptr1;
 455              		.loc 1 295 3 view .LVU169
 296:fltk-1.3.4-1/jpeg/jdmerge.c ****   JSAMPROW inptr00, inptr01, inptr1, inptr2;
 456              		.loc 1 296 3 view .LVU170
 297:fltk-1.3.4-1/jpeg/jdmerge.c ****   JDIMENSION col;
 457              		.loc 1 297 3 view .LVU171
 298:fltk-1.3.4-1/jpeg/jdmerge.c ****   /* copy these pointers into registers if possible */
 458              		.loc 1 298 3 view .LVU172
 300:fltk-1.3.4-1/jpeg/jdmerge.c ****   int * Crrtab = upsample->Cr_r_tab;
 459              		.loc 1 300 3 view .LVU173
 302:fltk-1.3.4-1/jpeg/jdmerge.c ****   INT32 * Crgtab = upsample->Cr_g_tab;
 460              		.loc 1 302 9 is_stmt 0 view .LVU174
 461 0022 488B5828 		movq	40(%rax), %rbx
 301:fltk-1.3.4-1/jpeg/jdmerge.c ****   int * Cbbtab = upsample->Cb_b_tab;
 462              		.loc 1 301 9 view .LVU175
 463 0026 4C8B7020 		movq	32(%rax), %r14
 303:fltk-1.3.4-1/jpeg/jdmerge.c ****   INT32 * Cbgtab = upsample->Cb_g_tab;
 464              		.loc 1 303 11 view .LVU176
 465 002a 4C8B6830 		movq	48(%rax), %r13
 304:fltk-1.3.4-1/jpeg/jdmerge.c ****   SHIFT_TEMPS
 466              		.loc 1 304 11 view .LVU177
 467 002e 488B4038 		movq	56(%rax), %rax
 468              	.LVL58:
 292:fltk-1.3.4-1/jpeg/jdmerge.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 469              		.loc 1 292 1 view .LVU178
 470 0032 48897C24 		movq	%rdi, -16(%rsp)
 470      F0
 302:fltk-1.3.4-1/jpeg/jdmerge.c ****   INT32 * Crgtab = upsample->Cr_g_tab;
 471              		.loc 1 302 9 view .LVU179
 472 0037 48895C24 		movq	%rbx, -56(%rsp)
 472      C8
 300:fltk-1.3.4-1/jpeg/jdmerge.c ****   int * Crrtab = upsample->Cr_r_tab;
 473              		.loc 1 300 22 view .LVU180
 474 003c 488BBFB8 		movq	440(%rdi), %rdi
 474      010000
 475              	.LVL59:
 301:fltk-1.3.4-1/jpeg/jdmerge.c ****   int * Cbbtab = upsample->Cb_b_tab;
 476              		.loc 1 301 3 is_stmt 1 view .LVU181
 302:fltk-1.3.4-1/jpeg/jdmerge.c ****   INT32 * Crgtab = upsample->Cr_g_tab;
 477              		.loc 1 302 3 view .LVU182
 303:fltk-1.3.4-1/jpeg/jdmerge.c ****   INT32 * Cbgtab = upsample->Cb_g_tab;
 478              		.loc 1 303 3 view .LVU183
 304:fltk-1.3.4-1/jpeg/jdmerge.c ****   SHIFT_TEMPS
 479              		.loc 1 304 3 view .LVU184
 304:fltk-1.3.4-1/jpeg/jdmerge.c ****   SHIFT_TEMPS
 480              		.loc 1 304 11 is_stmt 0 view .LVU185
 481 0043 48894424 		movq	%rax, -48(%rsp)
 481      D0
 482              	.LVL60:
 307:fltk-1.3.4-1/jpeg/jdmerge.c ****   inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 483              		.loc 1 307 3 is_stmt 1 view .LVU186
 307:fltk-1.3.4-1/jpeg/jdmerge.c ****   inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 484              		.loc 1 307 22 is_stmt 0 view .LVU187
 485 0048 488B06   		movq	(%rsi), %rax
 486              	.LVL61:
 307:fltk-1.3.4-1/jpeg/jdmerge.c ****   inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 487              		.loc 1 307 11 view .LVU188
 488 004b 4A8B1CC8 		movq	(%rax,%r9,8), %rbx
 489              	.LVL62:
 308:fltk-1.3.4-1/jpeg/jdmerge.c ****   inptr1 = input_buf[1][in_row_group_ctr];
 490              		.loc 1 308 3 is_stmt 1 view .LVU189
 308:fltk-1.3.4-1/jpeg/jdmerge.c ****   inptr1 = input_buf[1][in_row_group_ctr];
 491              		.loc 1 308 11 is_stmt 0 view .LVU190
 492 004f 4E8B1CC0 		movq	(%rax,%r8,8), %r11
 493              	.LVL63:
 494              		.loc 1 309 3 is_stmt 1 view .LVU191
 495              		.loc 1 309 10 is_stmt 0 view .LVU192
 496 0053 488B4608 		movq	8(%rsi), %rax
 310:fltk-1.3.4-1/jpeg/jdmerge.c ****   inptr2 = input_buf[2][in_row_group_ctr];
 311:fltk-1.3.4-1/jpeg/jdmerge.c ****   outptr0 = output_buf[0];
 497              		.loc 1 311 11 view .LVU193
 498 0057 4C8B01   		movq	(%rcx), %r8
 312:fltk-1.3.4-1/jpeg/jdmerge.c ****   outptr1 = output_buf[1];
 499              		.loc 1 312 11 view .LVU194
 500 005a 4C8B4908 		movq	8(%rcx), %r9
 309:fltk-1.3.4-1/jpeg/jdmerge.c ****   inptr2 = input_buf[2][in_row_group_ctr];
 501              		.loc 1 309 10 view .LVU195
 502 005e 488B2CD0 		movq	(%rax,%rdx,8), %rbp
 503              	.LVL64:
 310:fltk-1.3.4-1/jpeg/jdmerge.c ****   inptr2 = input_buf[2][in_row_group_ctr];
 504              		.loc 1 310 3 is_stmt 1 view .LVU196
 310:fltk-1.3.4-1/jpeg/jdmerge.c ****   inptr2 = input_buf[2][in_row_group_ctr];
 505              		.loc 1 310 10 is_stmt 0 view .LVU197
 506 0062 488B4610 		movq	16(%rsi), %rax
 311:fltk-1.3.4-1/jpeg/jdmerge.c ****   outptr1 = output_buf[1];
 507              		.loc 1 311 11 view .LVU198
 508 0066 4C894424 		movq	%r8, -24(%rsp)
 508      E8
 509              		.loc 1 312 11 view .LVU199
 510 006b 4C894C24 		movq	%r9, -32(%rsp)
 510      E0
 310:fltk-1.3.4-1/jpeg/jdmerge.c ****   outptr0 = output_buf[0];
 511              		.loc 1 310 10 view .LVU200
 512 0070 4C8B24D0 		movq	(%rax,%rdx,8), %r12
 513              	.LVL65:
 311:fltk-1.3.4-1/jpeg/jdmerge.c ****   outptr1 = output_buf[1];
 514              		.loc 1 311 3 is_stmt 1 view .LVU201
 515              		.loc 1 312 3 view .LVU202
 313:fltk-1.3.4-1/jpeg/jdmerge.c ****   /* Loop for each group of output pixels */
 314:fltk-1.3.4-1/jpeg/jdmerge.c ****   for (col = cinfo->output_width >> 1; col > 0; col--) {
 516              		.loc 1 314 3 view .LVU203
 517              		.loc 1 314 19 is_stmt 0 view .LVU204
 518 0074 418B8788 		movl	136(%r15), %eax
 518      000000
 519              	.LVL66:
 520              		.loc 1 314 40 is_stmt 1 view .LVU205
 521              		.loc 1 314 3 is_stmt 0 view .LVU206
 522 007b 89C2     		movl	%eax, %edx
 523              	.LVL67:
 524              		.loc 1 314 3 view .LVU207
 525 007d D1EA     		shrl	%edx
 526              	.LVL68:
 527              		.loc 1 314 3 view .LVU208
 528 007f 0F845A01 		je	.L18
 528      0000
 529 0085 8D42FF   		leal	-1(%rdx), %eax
 530 0088 31D2     		xorl	%edx, %edx
 531              	.LVL69:
 532              		.loc 1 314 3 view .LVU209
 533 008a 48894424 		movq	%rax, -40(%rsp)
 533      D8
 534 008f 4883C001 		addq	$1, %rax
 535 0093 48894424 		movq	%rax, -8(%rsp)
 535      F8
 536              	.LVL70:
 537 0098 0F1F8400 		.p2align 4,,10
 537      00000000 
 538              		.p2align 3
 539              	.L19:
 315:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Do the chroma part of the calculation */
 316:fltk-1.3.4-1/jpeg/jdmerge.c ****     cb = GETJSAMPLE(*inptr1++);
 540              		.loc 1 316 5 is_stmt 1 discriminator 3 view .LVU210
 317:fltk-1.3.4-1/jpeg/jdmerge.c ****     cr = GETJSAMPLE(*inptr2++);
 541              		.loc 1 317 5 discriminator 3 view .LVU211
 318:fltk-1.3.4-1/jpeg/jdmerge.c ****     cred = Crrtab[cr];
 542              		.loc 1 318 5 discriminator 3 view .LVU212
 543              		.loc 1 318 18 is_stmt 0 discriminator 3 view .LVU213
 544 00a0 410FB604 		movzbl	(%r12,%rdx), %eax
 544      14
 319:fltk-1.3.4-1/jpeg/jdmerge.c ****     cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 545              		.loc 1 319 20 discriminator 3 view .LVU214
 546 00a5 0FB64C15 		movzbl	0(%rbp,%rdx), %ecx
 546      00
 547 00aa 4983C006 		addq	$6, %r8
 548              	.LVL71:
 549              		.loc 1 319 20 discriminator 3 view .LVU215
 550 00ae 4983C106 		addq	$6, %r9
 551              	.LVL72:
 552              		.loc 1 319 20 discriminator 3 view .LVU216
 553 00b2 4C8B5424 		movq	-48(%rsp), %r10
 553      D0
 318:fltk-1.3.4-1/jpeg/jdmerge.c ****     cred = Crrtab[cr];
 554              		.loc 1 318 10 discriminator 3 view .LVU217
 555 00b7 418B3486 		movl	(%r14,%rax,4), %esi
 556              	.LVL73:
 557              		.loc 1 319 5 is_stmt 1 discriminator 3 view .LVU218
 558              		.loc 1 319 20 is_stmt 0 discriminator 3 view .LVU219
 559 00bb 498B44C5 		movq	0(%r13,%rax,8), %rax
 559      00
 560 00c0 490304CA 		addq	(%r10,%rcx,8), %rax
 320:fltk-1.3.4-1/jpeg/jdmerge.c ****     cblue = Cbbtab[cb];
 561              		.loc 1 320 11 discriminator 3 view .LVU220
 562 00c4 4C8B5424 		movq	-56(%rsp), %r10
 562      C8
 319:fltk-1.3.4-1/jpeg/jdmerge.c ****     cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 563              		.loc 1 319 20 discriminator 3 view .LVU221
 564 00c9 48C1F810 		sarq	$16, %rax
 565              	.LVL74:
 566              		.loc 1 320 5 is_stmt 1 discriminator 3 view .LVU222
 567              		.loc 1 320 11 is_stmt 0 discriminator 3 view .LVU223
 568 00cd 418B0C8A 		movl	(%r10,%rcx,4), %ecx
 569              	.LVL75:
 321:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Fetch 4 Y values and emit 4 pixels */
 322:fltk-1.3.4-1/jpeg/jdmerge.c ****     y  = GETJSAMPLE(*inptr00++);
 570              		.loc 1 322 5 is_stmt 1 discriminator 3 view .LVU224
 571              		.loc 1 322 8 is_stmt 0 discriminator 3 view .LVU225
 572 00d1 440FB614 		movzbl	(%rbx,%rdx,2), %r10d
 572      53
 573              	.LVL76:
 323:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr0[RGB_RED] =   range_limit[y + cred];
 574              		.loc 1 323 5 is_stmt 1 discriminator 3 view .LVU226
 575              		.loc 1 323 40 is_stmt 0 discriminator 3 view .LVU227
 576 00d6 468D3C16 		leal	(%rsi,%r10), %r15d
 577 00da 4D63FF   		movslq	%r15d, %r15
 578              		.loc 1 323 37 discriminator 3 view .LVU228
 579 00dd 460FB63C 		movzbl	(%rdi,%r15), %r15d
 579      3F
 580              		.loc 1 323 22 discriminator 3 view .LVU229
 581 00e2 458878FA 		movb	%r15b, -6(%r8)
 582              	.LVL77:
 324:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr0[RGB_GREEN] = range_limit[y + cgreen];
 583              		.loc 1 324 5 is_stmt 1 discriminator 3 view .LVU230
 584              		.loc 1 324 40 is_stmt 0 discriminator 3 view .LVU231
 585 00e6 458D3C02 		leal	(%r10,%rax), %r15d
 325:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr0[RGB_BLUE] =  range_limit[y + cblue];
 586              		.loc 1 325 40 discriminator 3 view .LVU232
 587 00ea 4101CA   		addl	%ecx, %r10d
 588              	.LVL78:
 324:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr0[RGB_GREEN] = range_limit[y + cgreen];
 589              		.loc 1 324 40 discriminator 3 view .LVU233
 590 00ed 4D63FF   		movslq	%r15d, %r15
 591              		.loc 1 325 40 discriminator 3 view .LVU234
 592 00f0 4D63D2   		movslq	%r10d, %r10
 324:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr0[RGB_GREEN] = range_limit[y + cgreen];
 593              		.loc 1 324 37 discriminator 3 view .LVU235
 594 00f3 460FB63C 		movzbl	(%rdi,%r15), %r15d
 594      3F
 324:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr0[RGB_GREEN] = range_limit[y + cgreen];
 595              		.loc 1 324 24 discriminator 3 view .LVU236
 596 00f8 458878FB 		movb	%r15b, -5(%r8)
 597              		.loc 1 325 5 is_stmt 1 discriminator 3 view .LVU237
 598              		.loc 1 325 37 is_stmt 0 discriminator 3 view .LVU238
 599 00fc 460FB614 		movzbl	(%rdi,%r10), %r10d
 599      17
 600              		.loc 1 325 23 discriminator 3 view .LVU239
 601 0101 458850FC 		movb	%r10b, -4(%r8)
 326:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr0 += RGB_PIXELSIZE;
 602              		.loc 1 326 5 is_stmt 1 discriminator 3 view .LVU240
 603              	.LVL79:
 327:fltk-1.3.4-1/jpeg/jdmerge.c ****     y  = GETJSAMPLE(*inptr00++);
 604              		.loc 1 327 5 discriminator 3 view .LVU241
 605              		.loc 1 327 8 is_stmt 0 discriminator 3 view .LVU242
 606 0105 440FB654 		movzbl	1(%rbx,%rdx,2), %r10d
 606      5301
 607              	.LVL80:
 328:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr0[RGB_RED] =   range_limit[y + cred];
 608              		.loc 1 328 5 is_stmt 1 discriminator 3 view .LVU243
 609              		.loc 1 328 40 is_stmt 0 discriminator 3 view .LVU244
 610 010b 468D3C16 		leal	(%rsi,%r10), %r15d
 611 010f 4D63FF   		movslq	%r15d, %r15
 612              		.loc 1 328 37 discriminator 3 view .LVU245
 613 0112 460FB63C 		movzbl	(%rdi,%r15), %r15d
 613      3F
 614              		.loc 1 328 22 discriminator 3 view .LVU246
 615 0117 458878FD 		movb	%r15b, -3(%r8)
 329:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr0[RGB_GREEN] = range_limit[y + cgreen];
 616              		.loc 1 329 5 is_stmt 1 discriminator 3 view .LVU247
 617              		.loc 1 329 40 is_stmt 0 discriminator 3 view .LVU248
 618 011b 458D3C02 		leal	(%r10,%rax), %r15d
 330:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr0[RGB_BLUE] =  range_limit[y + cblue];
 619              		.loc 1 330 40 discriminator 3 view .LVU249
 620 011f 4101CA   		addl	%ecx, %r10d
 621              	.LVL81:
 329:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr0[RGB_GREEN] = range_limit[y + cgreen];
 622              		.loc 1 329 40 discriminator 3 view .LVU250
 623 0122 4D63FF   		movslq	%r15d, %r15
 624              		.loc 1 330 40 discriminator 3 view .LVU251
 625 0125 4D63D2   		movslq	%r10d, %r10
 329:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr0[RGB_GREEN] = range_limit[y + cgreen];
 626              		.loc 1 329 37 discriminator 3 view .LVU252
 627 0128 460FB63C 		movzbl	(%rdi,%r15), %r15d
 627      3F
 329:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr0[RGB_GREEN] = range_limit[y + cgreen];
 628              		.loc 1 329 24 discriminator 3 view .LVU253
 629 012d 458878FE 		movb	%r15b, -2(%r8)
 630              		.loc 1 330 5 is_stmt 1 discriminator 3 view .LVU254
 631              		.loc 1 330 37 is_stmt 0 discriminator 3 view .LVU255
 632 0131 460FB614 		movzbl	(%rdi,%r10), %r10d
 632      17
 633              		.loc 1 330 23 discriminator 3 view .LVU256
 634 0136 458850FF 		movb	%r10b, -1(%r8)
 331:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr0 += RGB_PIXELSIZE;
 635              		.loc 1 331 5 is_stmt 1 discriminator 3 view .LVU257
 636              	.LVL82:
 332:fltk-1.3.4-1/jpeg/jdmerge.c ****     y  = GETJSAMPLE(*inptr01++);
 637              		.loc 1 332 5 discriminator 3 view .LVU258
 638              		.loc 1 332 8 is_stmt 0 discriminator 3 view .LVU259
 639 013a 450FB614 		movzbl	(%r11,%rdx,2), %r10d
 639      53
 640              	.LVL83:
 333:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr1[RGB_RED] =   range_limit[y + cred];
 641              		.loc 1 333 5 is_stmt 1 discriminator 3 view .LVU260
 642              		.loc 1 333 40 is_stmt 0 discriminator 3 view .LVU261
 643 013f 468D3C16 		leal	(%rsi,%r10), %r15d
 644 0143 4D63FF   		movslq	%r15d, %r15
 645              		.loc 1 333 37 discriminator 3 view .LVU262
 646 0146 460FB63C 		movzbl	(%rdi,%r15), %r15d
 646      3F
 647              		.loc 1 333 22 discriminator 3 view .LVU263
 648 014b 458879FA 		movb	%r15b, -6(%r9)
 334:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr1[RGB_GREEN] = range_limit[y + cgreen];
 649              		.loc 1 334 5 is_stmt 1 discriminator 3 view .LVU264
 650              		.loc 1 334 40 is_stmt 0 discriminator 3 view .LVU265
 651 014f 458D3C02 		leal	(%r10,%rax), %r15d
 335:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr1[RGB_BLUE] =  range_limit[y + cblue];
 652              		.loc 1 335 40 discriminator 3 view .LVU266
 653 0153 4101CA   		addl	%ecx, %r10d
 654              	.LVL84:
 334:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr1[RGB_GREEN] = range_limit[y + cgreen];
 655              		.loc 1 334 40 discriminator 3 view .LVU267
 656 0156 4D63FF   		movslq	%r15d, %r15
 657              		.loc 1 335 40 discriminator 3 view .LVU268
 658 0159 4D63D2   		movslq	%r10d, %r10
 334:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr1[RGB_GREEN] = range_limit[y + cgreen];
 659              		.loc 1 334 37 discriminator 3 view .LVU269
 660 015c 460FB63C 		movzbl	(%rdi,%r15), %r15d
 660      3F
 334:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr1[RGB_GREEN] = range_limit[y + cgreen];
 661              		.loc 1 334 24 discriminator 3 view .LVU270
 662 0161 458879FB 		movb	%r15b, -5(%r9)
 663              		.loc 1 335 5 is_stmt 1 discriminator 3 view .LVU271
 664              		.loc 1 335 37 is_stmt 0 discriminator 3 view .LVU272
 665 0165 460FB614 		movzbl	(%rdi,%r10), %r10d
 665      17
 666              		.loc 1 335 23 discriminator 3 view .LVU273
 667 016a 458851FC 		movb	%r10b, -4(%r9)
 336:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr1 += RGB_PIXELSIZE;
 668              		.loc 1 336 5 is_stmt 1 discriminator 3 view .LVU274
 669              	.LVL85:
 337:fltk-1.3.4-1/jpeg/jdmerge.c ****     y  = GETJSAMPLE(*inptr01++);
 670              		.loc 1 337 5 discriminator 3 view .LVU275
 671              		.loc 1 337 8 is_stmt 0 discriminator 3 view .LVU276
 672 016e 450FB654 		movzbl	1(%r11,%rdx,2), %r10d
 672      5301
 673              	.LVL86:
 338:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr1[RGB_RED] =   range_limit[y + cred];
 674              		.loc 1 338 5 is_stmt 1 discriminator 3 view .LVU277
 675              		.loc 1 338 40 is_stmt 0 discriminator 3 view .LVU278
 676 0174 4401D6   		addl	%r10d, %esi
 677              	.LVL87:
 339:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr1[RGB_GREEN] = range_limit[y + cgreen];
 678              		.loc 1 339 40 discriminator 3 view .LVU279
 679 0177 4401D0   		addl	%r10d, %eax
 680              	.LVL88:
 340:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr1[RGB_BLUE] =  range_limit[y + cblue];
 681              		.loc 1 340 40 discriminator 3 view .LVU280
 682 017a 4401D1   		addl	%r10d, %ecx
 683              	.LVL89:
 338:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr1[RGB_RED] =   range_limit[y + cred];
 684              		.loc 1 338 40 discriminator 3 view .LVU281
 685 017d 4863F6   		movslq	%esi, %rsi
 339:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr1[RGB_GREEN] = range_limit[y + cgreen];
 686              		.loc 1 339 40 discriminator 3 view .LVU282
 687 0180 4898     		cltq
 688              		.loc 1 340 40 discriminator 3 view .LVU283
 689 0182 4863C9   		movslq	%ecx, %rcx
 338:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr1[RGB_RED] =   range_limit[y + cred];
 690              		.loc 1 338 37 discriminator 3 view .LVU284
 691 0185 0FB63437 		movzbl	(%rdi,%rsi), %esi
 338:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr1[RGB_RED] =   range_limit[y + cred];
 692              		.loc 1 338 22 discriminator 3 view .LVU285
 693 0189 418871FD 		movb	%sil, -3(%r9)
 339:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr1[RGB_GREEN] = range_limit[y + cgreen];
 694              		.loc 1 339 5 is_stmt 1 discriminator 3 view .LVU286
 339:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr1[RGB_GREEN] = range_limit[y + cgreen];
 695              		.loc 1 339 37 is_stmt 0 discriminator 3 view .LVU287
 696 018d 0FB60407 		movzbl	(%rdi,%rax), %eax
 339:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr1[RGB_GREEN] = range_limit[y + cgreen];
 697              		.loc 1 339 24 discriminator 3 view .LVU288
 698 0191 418841FE 		movb	%al, -2(%r9)
 699              		.loc 1 340 5 is_stmt 1 discriminator 3 view .LVU289
 700              		.loc 1 340 37 is_stmt 0 discriminator 3 view .LVU290
 701 0195 0FB6040F 		movzbl	(%rdi,%rcx), %eax
 702              		.loc 1 340 23 discriminator 3 view .LVU291
 703 0199 418841FF 		movb	%al, -1(%r9)
 341:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr1 += RGB_PIXELSIZE;
 704              		.loc 1 341 5 is_stmt 1 discriminator 3 view .LVU292
 705              	.LVL90:
 314:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Do the chroma part of the calculation */
 706              		.loc 1 314 49 discriminator 3 view .LVU293
 314:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Do the chroma part of the calculation */
 707              		.loc 1 314 40 discriminator 3 view .LVU294
 708 019d 4889D0   		movq	%rdx, %rax
 709 01a0 4883C201 		addq	$1, %rdx
 710              	.LVL91:
 314:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Do the chroma part of the calculation */
 711              		.loc 1 314 3 is_stmt 0 discriminator 3 view .LVU295
 712 01a4 48394424 		cmpq	%rax, -40(%rsp)
 712      D8
 713 01a9 0F85F1FE 		jne	.L19
 713      FFFF
 714 01af 488B4424 		movq	-8(%rsp), %rax
 714      F8
 715              	.LVL92:
 314:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Do the chroma part of the calculation */
 716              		.loc 1 314 3 discriminator 3 view .LVU296
 717 01b4 488D1400 		leaq	(%rax,%rax), %rdx
 718              	.LVL93:
 314:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Do the chroma part of the calculation */
 719              		.loc 1 314 3 discriminator 3 view .LVU297
 720 01b8 4801C5   		addq	%rax, %rbp
 314:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Do the chroma part of the calculation */
 721              		.loc 1 314 3 discriminator 3 view .LVU298
 722 01bb 4901C4   		addq	%rax, %r12
 314:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Do the chroma part of the calculation */
 723              		.loc 1 314 3 discriminator 3 view .LVU299
 724 01be 4801D0   		addq	%rdx, %rax
 725 01c1 4801D3   		addq	%rdx, %rbx
 726 01c4 4901D3   		addq	%rdx, %r11
 727 01c7 4801C0   		addq	%rax, %rax
 728 01ca 48014424 		addq	%rax, -24(%rsp)
 728      E8
 729 01cf 48014424 		addq	%rax, -32(%rsp)
 729      E0
 730 01d4 488B4424 		movq	-16(%rsp), %rax
 730      F0
 731 01d9 8B808800 		movl	136(%rax), %eax
 731      0000
 732              	.LVL94:
 733              	.L18:
 342:fltk-1.3.4-1/jpeg/jdmerge.c ****   }
 343:fltk-1.3.4-1/jpeg/jdmerge.c ****   /* If image width is odd, do the last output column separately */
 344:fltk-1.3.4-1/jpeg/jdmerge.c ****   if (cinfo->output_width & 1) {
 734              		.loc 1 344 3 is_stmt 1 view .LVU300
 735              		.loc 1 344 6 is_stmt 0 view .LVU301
 736 01df A801     		testb	$1, %al
 737 01e1 0F848A00 		je	.L17
 737      0000
 345:fltk-1.3.4-1/jpeg/jdmerge.c ****     cb = GETJSAMPLE(*inptr1);
 738              		.loc 1 345 5 is_stmt 1 view .LVU302
 739              	.LVL95:
 346:fltk-1.3.4-1/jpeg/jdmerge.c ****     cr = GETJSAMPLE(*inptr2);
 740              		.loc 1 346 5 view .LVU303
 347:fltk-1.3.4-1/jpeg/jdmerge.c ****     cred = Crrtab[cr];
 741              		.loc 1 347 5 view .LVU304
 348:fltk-1.3.4-1/jpeg/jdmerge.c ****     cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 742              		.loc 1 348 20 is_stmt 0 view .LVU305
 743 01e7 0FB65500 		movzbl	0(%rbp), %edx
 347:fltk-1.3.4-1/jpeg/jdmerge.c ****     cred = Crrtab[cr];
 744              		.loc 1 347 18 view .LVU306
 745 01eb 410FB604 		movzbl	(%r12), %eax
 745      24
 746              		.loc 1 348 20 view .LVU307
 747 01f0 488B4C24 		movq	-48(%rsp), %rcx
 747      D0
 347:fltk-1.3.4-1/jpeg/jdmerge.c ****     cred = Crrtab[cr];
 748              		.loc 1 347 10 view .LVU308
 749 01f5 418B3486 		movl	(%r14,%rax,4), %esi
 750              	.LVL96:
 751              		.loc 1 348 5 is_stmt 1 view .LVU309
 752              		.loc 1 348 20 is_stmt 0 view .LVU310
 753 01f9 498B44C5 		movq	0(%r13,%rax,8), %rax
 753      00
 754 01fe 480304D1 		addq	(%rcx,%rdx,8), %rax
 349:fltk-1.3.4-1/jpeg/jdmerge.c ****     cblue = Cbbtab[cb];
 755              		.loc 1 349 11 view .LVU311
 756 0202 488B4C24 		movq	-56(%rsp), %rcx
 756      C8
 348:fltk-1.3.4-1/jpeg/jdmerge.c ****     cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 757              		.loc 1 348 20 view .LVU312
 758 0207 48C1F810 		sarq	$16, %rax
 759              	.LVL97:
 760              		.loc 1 349 5 is_stmt 1 view .LVU313
 761              		.loc 1 349 11 is_stmt 0 view .LVU314
 762 020b 8B0C91   		movl	(%rcx,%rdx,4), %ecx
 763              	.LVL98:
 350:fltk-1.3.4-1/jpeg/jdmerge.c ****     y  = GETJSAMPLE(*inptr00);
 764              		.loc 1 350 5 is_stmt 1 view .LVU315
 765              		.loc 1 350 8 is_stmt 0 view .LVU316
 766 020e 0FB613   		movzbl	(%rbx), %edx
 767              	.LVL99:
 351:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr0[RGB_RED] =   range_limit[y + cred];
 768              		.loc 1 351 5 is_stmt 1 view .LVU317
 769              		.loc 1 351 22 is_stmt 0 view .LVU318
 770 0211 488B5C24 		movq	-24(%rsp), %rbx
 770      E8
 771              		.loc 1 351 40 view .LVU319
 772 0216 448D0416 		leal	(%rsi,%rdx), %r8d
 773              	.LVL100:
 774              		.loc 1 351 40 view .LVU320
 775 021a 4D63C0   		movslq	%r8d, %r8
 776              		.loc 1 351 37 view .LVU321
 777 021d 460FB604 		movzbl	(%rdi,%r8), %r8d
 777      07
 778              		.loc 1 351 22 view .LVU322
 779 0222 448803   		movb	%r8b, (%rbx)
 780              	.LVL101:
 352:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr0[RGB_GREEN] = range_limit[y + cgreen];
 781              		.loc 1 352 5 is_stmt 1 view .LVU323
 782              		.loc 1 352 40 is_stmt 0 view .LVU324
 783 0225 448D0402 		leal	(%rdx,%rax), %r8d
 353:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr0[RGB_BLUE] =  range_limit[y + cblue];
 784              		.loc 1 353 40 view .LVU325
 785 0229 01CA     		addl	%ecx, %edx
 786              	.LVL102:
 352:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr0[RGB_GREEN] = range_limit[y + cgreen];
 787              		.loc 1 352 40 view .LVU326
 788 022b 4D63C0   		movslq	%r8d, %r8
 789              		.loc 1 353 40 view .LVU327
 790 022e 4863D2   		movslq	%edx, %rdx
 352:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr0[RGB_GREEN] = range_limit[y + cgreen];
 791              		.loc 1 352 37 view .LVU328
 792 0231 460FB604 		movzbl	(%rdi,%r8), %r8d
 792      07
 352:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr0[RGB_GREEN] = range_limit[y + cgreen];
 793              		.loc 1 352 24 view .LVU329
 794 0236 44884301 		movb	%r8b, 1(%rbx)
 795              		.loc 1 353 5 is_stmt 1 view .LVU330
 796              		.loc 1 353 37 is_stmt 0 view .LVU331
 797 023a 0FB61417 		movzbl	(%rdi,%rdx), %edx
 798              		.loc 1 353 23 view .LVU332
 799 023e 885302   		movb	%dl, 2(%rbx)
 354:fltk-1.3.4-1/jpeg/jdmerge.c ****     y  = GETJSAMPLE(*inptr01);
 800              		.loc 1 354 5 is_stmt 1 view .LVU333
 801              		.loc 1 354 8 is_stmt 0 view .LVU334
 802 0241 450FB603 		movzbl	(%r11), %r8d
 803              	.LVL103:
 355:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr1[RGB_RED] =   range_limit[y + cred];
 804              		.loc 1 355 5 is_stmt 1 view .LVU335
 805              		.loc 1 355 22 is_stmt 0 view .LVU336
 806 0245 488B5C24 		movq	-32(%rsp), %rbx
 806      E0
 807              		.loc 1 355 40 view .LVU337
 808 024a 4401C6   		addl	%r8d, %esi
 809              	.LVL104:
 810              		.loc 1 355 40 view .LVU338
 811 024d 4863F6   		movslq	%esi, %rsi
 812              		.loc 1 355 37 view .LVU339
 813 0250 0FB61437 		movzbl	(%rdi,%rsi), %edx
 814              		.loc 1 355 22 view .LVU340
 815 0254 8813     		movb	%dl, (%rbx)
 356:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr1[RGB_GREEN] = range_limit[y + cgreen];
 816              		.loc 1 356 5 is_stmt 1 view .LVU341
 817              		.loc 1 356 40 is_stmt 0 view .LVU342
 818 0256 418D1400 		leal	(%r8,%rax), %edx
 819 025a 4863D2   		movslq	%edx, %rdx
 820              		.loc 1 356 37 view .LVU343
 821 025d 0FB60417 		movzbl	(%rdi,%rdx), %eax
 822              	.LVL105:
 823              		.loc 1 356 24 view .LVU344
 824 0261 884301   		movb	%al, 1(%rbx)
 357:fltk-1.3.4-1/jpeg/jdmerge.c ****     outptr1[RGB_BLUE] =  range_limit[y + cblue];
 825              		.loc 1 357 5 is_stmt 1 view .LVU345
 826              		.loc 1 357 40 is_stmt 0 view .LVU346
 827 0264 428D0401 		leal	(%rcx,%r8), %eax
 828 0268 4898     		cltq
 829              		.loc 1 357 37 view .LVU347
 830 026a 0FB60407 		movzbl	(%rdi,%rax), %eax
 831              		.loc 1 357 23 view .LVU348
 832 026e 884302   		movb	%al, 2(%rbx)
 833              	.LVL106:
 834              	.L17:
 358:fltk-1.3.4-1/jpeg/jdmerge.c ****   }
 359:fltk-1.3.4-1/jpeg/jdmerge.c **** }
 835              		.loc 1 359 1 view .LVU349
 836 0271 5B       		popq	%rbx
 837              		.cfi_def_cfa_offset 48
 838 0272 5D       		popq	%rbp
 839              		.cfi_def_cfa_offset 40
 840 0273 415C     		popq	%r12
 841              		.cfi_def_cfa_offset 32
 842 0275 415D     		popq	%r13
 843              		.cfi_def_cfa_offset 24
 844              	.LVL107:
 845              		.loc 1 359 1 view .LVU350
 846 0277 415E     		popq	%r14
 847              		.cfi_def_cfa_offset 16
 848              	.LVL108:
 849              		.loc 1 359 1 view .LVU351
 850 0279 415F     		popq	%r15
 851              		.cfi_def_cfa_offset 8
 852 027b C3       		ret
 853              		.cfi_endproc
 854              	.LFE56:
 856              		.section	.text.merged_2v_upsample,"ax",@progbits
 857              		.p2align 4
 859              	merged_2v_upsample:
 860              	.LVL109:
 861              	.LFB53:
 151:fltk-1.3.4-1/jpeg/jdmerge.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 862              		.loc 1 151 1 is_stmt 1 view -0
 863              		.cfi_startproc
 151:fltk-1.3.4-1/jpeg/jdmerge.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 864              		.loc 1 151 1 is_stmt 0 view .LVU353
 865 0000 F30F1EFA 		endbr64
 866 0004 4155     		pushq	%r13
 867              		.cfi_def_cfa_offset 16
 868              		.cfi_offset 13, -16
 869 0006 4989D5   		movq	%rdx, %r13
 870 0009 4154     		pushq	%r12
 871              		.cfi_def_cfa_offset 24
 872              		.cfi_offset 12, -24
 873 000b 4D89CC   		movq	%r9, %r12
 874 000e 55       		pushq	%rbp
 875              		.cfi_def_cfa_offset 32
 876              		.cfi_offset 6, -32
 877 000f 53       		pushq	%rbx
 878              		.cfi_def_cfa_offset 40
 879              		.cfi_offset 3, -40
 880 0010 4883EC28 		subq	$40, %rsp
 881              		.cfi_def_cfa_offset 80
 152:fltk-1.3.4-1/jpeg/jdmerge.c ****   JSAMPROW work_ptrs[2];
 882              		.loc 1 152 19 view .LVU354
 883 0014 488B9F80 		movq	640(%rdi), %rbx
 883      020000
 884 001b 418B11   		movl	(%r9), %edx
 885              	.LVL110:
 151:fltk-1.3.4-1/jpeg/jdmerge.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 886              		.loc 1 151 1 view .LVU355
 887 001e 64488B04 		movq	%fs:40, %rax
 887      25280000 
 887      00
 888 0027 48894424 		movq	%rax, 24(%rsp)
 888      18
 889 002c 31C0     		xorl	%eax, %eax
 152:fltk-1.3.4-1/jpeg/jdmerge.c ****   JSAMPROW work_ptrs[2];
 890              		.loc 1 152 3 is_stmt 1 view .LVU356
 891              	.LVL111:
 153:fltk-1.3.4-1/jpeg/jdmerge.c ****   JDIMENSION num_rows;		/* number of rows returned to caller */
 892              		.loc 1 153 3 view .LVU357
 154:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 893              		.loc 1 154 3 view .LVU358
 156:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* If we have a spare row saved from a previous cycle, just return it. */
 894              		.loc 1 156 3 view .LVU359
 156:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* If we have a spare row saved from a previous cycle, just return it. */
 895              		.loc 1 156 6 is_stmt 0 view .LVU360
 896 002e 8B4B48   		movl	72(%rbx), %ecx
 897              	.LVL112:
 156:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* If we have a spare row saved from a previous cycle, just return it. */
 898              		.loc 1 156 6 view .LVU361
 899 0031 4889D0   		movq	%rdx, %rax
 900 0034 498D14D0 		leaq	(%r8,%rdx,8), %rdx
 901 0038 85C9     		testl	%ecx, %ecx
 902 003a 0F859800 		jne	.L38
 902      0000
 164:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Not more than the distance to the end of the image. */
 903              		.loc 1 164 5 is_stmt 1 view .LVU362
 904              	.LVL113:
 166:fltk-1.3.4-1/jpeg/jdmerge.c ****       num_rows = upsample->rows_to_go;
 905              		.loc 1 166 5 view .LVU363
 166:fltk-1.3.4-1/jpeg/jdmerge.c ****       num_rows = upsample->rows_to_go;
 906              		.loc 1 166 28 is_stmt 0 view .LVU364
 907 0040 8B4B50   		movl	80(%rbx), %ecx
 166:fltk-1.3.4-1/jpeg/jdmerge.c ****       num_rows = upsample->rows_to_go;
 908              		.loc 1 166 8 view .LVU365
 909 0043 83F901   		cmpl	$1, %ecx
 910 0046 7668     		jbe	.L32
 169:fltk-1.3.4-1/jpeg/jdmerge.c ****     if (num_rows > out_rows_avail)
 911              		.loc 1 169 5 is_stmt 1 view .LVU366
 169:fltk-1.3.4-1/jpeg/jdmerge.c ****     if (num_rows > out_rows_avail)
 912              		.loc 1 169 20 is_stmt 0 view .LVU367
 913 0048 8B4C2450 		movl	80(%rsp), %ecx
 173:fltk-1.3.4-1/jpeg/jdmerge.c ****     if (num_rows > 1) {
 914              		.loc 1 173 18 view .LVU368
 915 004c 488B12   		movq	(%rdx), %rdx
 916 004f BD020000 		movl	$2, %ebp
 916      00
 169:fltk-1.3.4-1/jpeg/jdmerge.c ****     if (num_rows > out_rows_avail)
 917              		.loc 1 169 20 view .LVU369
 918 0054 29C1     		subl	%eax, %ecx
 919              	.LVL114:
 170:fltk-1.3.4-1/jpeg/jdmerge.c ****       num_rows = out_rows_avail;
 920              		.loc 1 170 5 is_stmt 1 view .LVU370
 173:fltk-1.3.4-1/jpeg/jdmerge.c ****     if (num_rows > 1) {
 921              		.loc 1 173 18 is_stmt 0 view .LVU371
 922 0056 48891424 		movq	%rdx, (%rsp)
 923 005a 83F902   		cmpl	$2, %ecx
 924 005d 0F46E9   		cmovbe	%ecx, %ebp
 925              	.LVL115:
 173:fltk-1.3.4-1/jpeg/jdmerge.c ****     if (num_rows > 1) {
 926              		.loc 1 173 5 is_stmt 1 view .LVU372
 174:fltk-1.3.4-1/jpeg/jdmerge.c ****       work_ptrs[1] = output_buf[*out_row_ctr + 1];
 927              		.loc 1 174 5 view .LVU373
 174:fltk-1.3.4-1/jpeg/jdmerge.c ****       work_ptrs[1] = output_buf[*out_row_ctr + 1];
 928              		.loc 1 174 8 is_stmt 0 view .LVU374
 929 0060 83F901   		cmpl	$1, %ecx
 930 0063 765D     		jbe	.L33
 175:fltk-1.3.4-1/jpeg/jdmerge.c ****     } else {
 931              		.loc 1 175 7 is_stmt 1 view .LVU375
 175:fltk-1.3.4-1/jpeg/jdmerge.c ****     } else {
 932              		.loc 1 175 46 is_stmt 0 view .LVU376
 933 0065 83C001   		addl	$1, %eax
 934 0068 BD020000 		movl	$2, %ebp
 934      00
 935              	.LVL116:
 175:fltk-1.3.4-1/jpeg/jdmerge.c ****     } else {
 936              		.loc 1 175 20 view .LVU377
 937 006d 498B04C0 		movq	(%r8,%rax,8), %rax
 938 0071 48894424 		movq	%rax, 8(%rsp)
 938      08
 939              	.LVL117:
 940              	.L34:
 181:fltk-1.3.4-1/jpeg/jdmerge.c ****   }
 941              		.loc 1 181 5 is_stmt 1 view .LVU378
 181:fltk-1.3.4-1/jpeg/jdmerge.c ****   }
 942              		.loc 1 181 6 is_stmt 0 view .LVU379
 943 0076 418B5500 		movl	0(%r13), %edx
 944 007a 4889E1   		movq	%rsp, %rcx
 945 007d FF5318   		call	*24(%rbx)
 946              	.LVL118:
 947              	.L31:
 185:fltk-1.3.4-1/jpeg/jdmerge.c ****   upsample->rows_to_go -= num_rows;
 948              		.loc 1 185 3 is_stmt 1 view .LVU380
 185:fltk-1.3.4-1/jpeg/jdmerge.c ****   upsample->rows_to_go -= num_rows;
 949              		.loc 1 185 16 is_stmt 0 view .LVU381
 950 0080 41012C24 		addl	%ebp, (%r12)
 186:fltk-1.3.4-1/jpeg/jdmerge.c ****   /* When the buffer is emptied, declare this input row group consumed */
 951              		.loc 1 186 3 is_stmt 1 view .LVU382
 188:fltk-1.3.4-1/jpeg/jdmerge.c ****     (*in_row_group_ctr)++;
 952              		.loc 1 188 6 is_stmt 0 view .LVU383
 953 0084 8B4348   		movl	72(%rbx), %eax
 186:fltk-1.3.4-1/jpeg/jdmerge.c ****   /* When the buffer is emptied, declare this input row group consumed */
 954              		.loc 1 186 24 view .LVU384
 955 0087 296B50   		subl	%ebp, 80(%rbx)
 188:fltk-1.3.4-1/jpeg/jdmerge.c ****     (*in_row_group_ctr)++;
 956              		.loc 1 188 3 is_stmt 1 view .LVU385
 188:fltk-1.3.4-1/jpeg/jdmerge.c ****     (*in_row_group_ctr)++;
 957              		.loc 1 188 6 is_stmt 0 view .LVU386
 958 008a 85C0     		testl	%eax, %eax
 959 008c 7505     		jne	.L29
 189:fltk-1.3.4-1/jpeg/jdmerge.c **** }
 960              		.loc 1 189 5 is_stmt 1 view .LVU387
 189:fltk-1.3.4-1/jpeg/jdmerge.c **** }
 961              		.loc 1 189 24 is_stmt 0 view .LVU388
 962 008e 41834500 		addl	$1, 0(%r13)
 962      01
 963              	.L29:
 190:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 964              		.loc 1 190 1 view .LVU389
 965 0093 488B4424 		movq	24(%rsp), %rax
 965      18
 966 0098 64483304 		xorq	%fs:40, %rax
 966      25280000 
 966      00
 967 00a1 755A     		jne	.L39
 968 00a3 4883C428 		addq	$40, %rsp
 969              		.cfi_remember_state
 970              		.cfi_def_cfa_offset 40
 971 00a7 5B       		popq	%rbx
 972              		.cfi_def_cfa_offset 32
 973              	.LVL119:
 190:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 974              		.loc 1 190 1 view .LVU390
 975 00a8 5D       		popq	%rbp
 976              		.cfi_def_cfa_offset 24
 977              	.LVL120:
 190:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 978              		.loc 1 190 1 view .LVU391
 979 00a9 415C     		popq	%r12
 980              		.cfi_def_cfa_offset 16
 981              	.LVL121:
 190:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 982              		.loc 1 190 1 view .LVU392
 983 00ab 415D     		popq	%r13
 984              		.cfi_def_cfa_offset 8
 985              	.LVL122:
 190:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 986              		.loc 1 190 1 view .LVU393
 987 00ad C3       		ret
 988              	.LVL123:
 989 00ae 6690     		.p2align 4,,10
 990              		.p2align 3
 991              	.L32:
 992              		.cfi_restore_state
 169:fltk-1.3.4-1/jpeg/jdmerge.c ****     if (num_rows > out_rows_avail)
 993              		.loc 1 169 5 is_stmt 1 view .LVU394
 170:fltk-1.3.4-1/jpeg/jdmerge.c ****       num_rows = out_rows_avail;
 994              		.loc 1 170 5 view .LVU395
 169:fltk-1.3.4-1/jpeg/jdmerge.c ****     if (num_rows > out_rows_avail)
 995              		.loc 1 169 20 is_stmt 0 view .LVU396
 996 00b0 8B6C2450 		movl	80(%rsp), %ebp
 997 00b4 29C5     		subl	%eax, %ebp
 998              	.LVL124:
 173:fltk-1.3.4-1/jpeg/jdmerge.c ****     if (num_rows > 1) {
 999              		.loc 1 173 18 view .LVU397
 1000 00b6 488B02   		movq	(%rdx), %rax
 1001 00b9 39CD     		cmpl	%ecx, %ebp
 1002 00bb 48890424 		movq	%rax, (%rsp)
 1003 00bf 0F47E9   		cmova	%ecx, %ebp
 1004              	.LVL125:
 173:fltk-1.3.4-1/jpeg/jdmerge.c ****     if (num_rows > 1) {
 1005              		.loc 1 173 5 is_stmt 1 view .LVU398
 174:fltk-1.3.4-1/jpeg/jdmerge.c ****       work_ptrs[1] = output_buf[*out_row_ctr + 1];
 1006              		.loc 1 174 5 view .LVU399
 1007              	.L33:
 177:fltk-1.3.4-1/jpeg/jdmerge.c ****       upsample->spare_full = TRUE;
 1008              		.loc 1 177 7 view .LVU400
 177:fltk-1.3.4-1/jpeg/jdmerge.c ****       upsample->spare_full = TRUE;
 1009              		.loc 1 177 20 is_stmt 0 view .LVU401
 1010 00c2 488B4340 		movq	64(%rbx), %rax
 178:fltk-1.3.4-1/jpeg/jdmerge.c ****     }
 1011              		.loc 1 178 28 view .LVU402
 1012 00c6 C7434801 		movl	$1, 72(%rbx)
 1012      000000
 177:fltk-1.3.4-1/jpeg/jdmerge.c ****       upsample->spare_full = TRUE;
 1013              		.loc 1 177 20 view .LVU403
 1014 00cd 48894424 		movq	%rax, 8(%rsp)
 1014      08
 178:fltk-1.3.4-1/jpeg/jdmerge.c ****     }
 1015              		.loc 1 178 7 is_stmt 1 view .LVU404
 1016 00d2 EBA2     		jmp	.L34
 1017              	.LVL126:
 1018              		.p2align 4,,10
 1019 00d4 0F1F4000 		.p2align 3
 1020              	.L38:
 158:fltk-1.3.4-1/jpeg/jdmerge.c **** 		      1, upsample->out_row_width);
 1021              		.loc 1 158 5 view .LVU405
 1022 00d8 448B4B4C 		movl	76(%rbx), %r9d
 1023              	.LVL127:
 158:fltk-1.3.4-1/jpeg/jdmerge.c **** 		      1, upsample->out_row_width);
 1024              		.loc 1 158 5 is_stmt 0 view .LVU406
 1025 00dc 488D7B40 		leaq	64(%rbx), %rdi
 1026              	.LVL128:
 158:fltk-1.3.4-1/jpeg/jdmerge.c **** 		      1, upsample->out_row_width);
 1027              		.loc 1 158 5 view .LVU407
 1028 00e0 41B80100 		movl	$1, %r8d
 1028      0000
 1029              	.LVL129:
 158:fltk-1.3.4-1/jpeg/jdmerge.c **** 		      1, upsample->out_row_width);
 1030              		.loc 1 158 5 view .LVU408
 1031 00e6 31C9     		xorl	%ecx, %ecx
 1032 00e8 31F6     		xorl	%esi, %esi
 1033              	.LVL130:
 160:fltk-1.3.4-1/jpeg/jdmerge.c ****     upsample->spare_full = FALSE;
 1034              		.loc 1 160 14 view .LVU409
 1035 00ea BD010000 		movl	$1, %ebp
 1035      00
 158:fltk-1.3.4-1/jpeg/jdmerge.c **** 		      1, upsample->out_row_width);
 1036              		.loc 1 158 5 view .LVU410
 1037 00ef E8000000 		call	jcopy_sample_rows@PLT
 1037      00
 1038              	.LVL131:
 160:fltk-1.3.4-1/jpeg/jdmerge.c ****     upsample->spare_full = FALSE;
 1039              		.loc 1 160 5 is_stmt 1 view .LVU411
 161:fltk-1.3.4-1/jpeg/jdmerge.c ****   } else {
 1040              		.loc 1 161 5 view .LVU412
 161:fltk-1.3.4-1/jpeg/jdmerge.c ****   } else {
 1041              		.loc 1 161 26 is_stmt 0 view .LVU413
 1042 00f4 C7434800 		movl	$0, 72(%rbx)
 1042      000000
 1043 00fb EB83     		jmp	.L31
 1044              	.LVL132:
 1045              	.L39:
 190:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 1046              		.loc 1 190 1 view .LVU414
 1047 00fd E8000000 		call	__stack_chk_fail@PLT
 1047      00
 1048              	.LVL133:
 1049              		.cfi_endproc
 1050              	.LFE53:
 1052              		.section	.text.jinit_merged_upsampler,"ax",@progbits
 1053              		.p2align 4
 1054              		.globl	jinit_merged_upsampler
 1056              	jinit_merged_upsampler:
 1057              	.LVL134:
 1058              	.LFB57:
 360:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 361:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 362:fltk-1.3.4-1/jpeg/jdmerge.c **** /*
 363:fltk-1.3.4-1/jpeg/jdmerge.c ****  * Module initialization routine for merged upsampling/color conversion.
 364:fltk-1.3.4-1/jpeg/jdmerge.c ****  *
 365:fltk-1.3.4-1/jpeg/jdmerge.c ****  * NB: this is called under the conditions determined by use_merged_upsample()
 366:fltk-1.3.4-1/jpeg/jdmerge.c ****  * in jdmaster.c.  That routine MUST correspond to the actual capabilities
 367:fltk-1.3.4-1/jpeg/jdmerge.c ****  * of this module; no safety checks are made here.
 368:fltk-1.3.4-1/jpeg/jdmerge.c ****  */
 369:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 370:fltk-1.3.4-1/jpeg/jdmerge.c **** GLOBAL(void)
 371:fltk-1.3.4-1/jpeg/jdmerge.c **** jinit_merged_upsampler (j_decompress_ptr cinfo)
 372:fltk-1.3.4-1/jpeg/jdmerge.c **** {
 1059              		.loc 1 372 1 is_stmt 1 view -0
 1060              		.cfi_startproc
 1061              		.loc 1 372 1 is_stmt 0 view .LVU416
 1062 0000 F30F1EFA 		endbr64
 373:fltk-1.3.4-1/jpeg/jdmerge.c ****   my_upsample_ptr upsample;
 1063              		.loc 1 373 3 is_stmt 1 view .LVU417
 374:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 375:fltk-1.3.4-1/jpeg/jdmerge.c ****   upsample = (my_upsample_ptr)
 1064              		.loc 1 375 3 view .LVU418
 372:fltk-1.3.4-1/jpeg/jdmerge.c ****   my_upsample_ptr upsample;
 1065              		.loc 1 372 1 is_stmt 0 view .LVU419
 1066 0004 55       		pushq	%rbp
 1067              		.cfi_def_cfa_offset 16
 1068              		.cfi_offset 6, -16
 376:fltk-1.3.4-1/jpeg/jdmerge.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1069              		.loc 1 376 6 view .LVU420
 1070 0005 BA580000 		movl	$88, %edx
 1070      00
 372:fltk-1.3.4-1/jpeg/jdmerge.c ****   my_upsample_ptr upsample;
 1071              		.loc 1 372 1 view .LVU421
 1072 000a 4889FD   		movq	%rdi, %rbp
 1073              		.loc 1 376 6 view .LVU422
 1074 000d BE010000 		movl	$1, %esi
 1074      00
 372:fltk-1.3.4-1/jpeg/jdmerge.c ****   my_upsample_ptr upsample;
 1075              		.loc 1 372 1 view .LVU423
 1076 0012 53       		pushq	%rbx
 1077              		.cfi_def_cfa_offset 24
 1078              		.cfi_offset 3, -24
 1079 0013 4883EC08 		subq	$8, %rsp
 1080              		.cfi_def_cfa_offset 32
 1081              		.loc 1 376 6 view .LVU424
 1082 0017 488B4708 		movq	8(%rdi), %rax
 1083 001b FF10     		call	*(%rax)
 1084              	.LVL135:
 377:fltk-1.3.4-1/jpeg/jdmerge.c **** 				SIZEOF(my_upsampler));
 378:fltk-1.3.4-1/jpeg/jdmerge.c ****   cinfo->upsample = (struct jpeg_upsampler *) upsample;
 1085              		.loc 1 378 19 view .LVU425
 1086 001d 48898580 		movq	%rax, 640(%rbp)
 1086      020000
 376:fltk-1.3.4-1/jpeg/jdmerge.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1087              		.loc 1 376 6 view .LVU426
 1088 0024 4889C3   		movq	%rax, %rbx
 1089              	.LVL136:
 1090              		.loc 1 378 3 is_stmt 1 view .LVU427
 379:fltk-1.3.4-1/jpeg/jdmerge.c ****   upsample->pub.start_pass = start_pass_merged_upsample;
 1091              		.loc 1 379 3 view .LVU428
 1092              		.loc 1 379 28 is_stmt 0 view .LVU429
 1093 0027 488D0500 		leaq	start_pass_merged_upsample(%rip), %rax
 1093      000000
 1094              	.LVL137:
 1095              		.loc 1 379 28 view .LVU430
 1096 002e 488903   		movq	%rax, (%rbx)
 380:fltk-1.3.4-1/jpeg/jdmerge.c ****   upsample->pub.need_context_rows = FALSE;
 1097              		.loc 1 380 3 is_stmt 1 view .LVU431
 1098              		.loc 1 380 35 is_stmt 0 view .LVU432
 1099 0031 C7431000 		movl	$0, 16(%rbx)
 1099      000000
 381:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 382:fltk-1.3.4-1/jpeg/jdmerge.c ****   upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 1100              		.loc 1 382 3 is_stmt 1 view .LVU433
 1101              		.loc 1 382 49 is_stmt 0 view .LVU434
 1102 0038 8B958800 		movl	136(%rbp), %edx
 1102      0000
 1103 003e 0FAF9590 		imull	144(%rbp), %edx
 1103      000000
 1104              		.loc 1 382 27 view .LVU435
 1105 0045 89534C   		movl	%edx, 76(%rbx)
 383:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 384:fltk-1.3.4-1/jpeg/jdmerge.c ****   if (cinfo->max_v_samp_factor == 2) {
 1106              		.loc 1 384 3 is_stmt 1 view .LVU436
 1107              		.loc 1 384 6 is_stmt 0 view .LVU437
 1108 0048 83BDA401 		cmpl	$2, 420(%rbp)
 1108      000002
 1109 004f 0F84FB00 		je	.L46
 1109      0000
 385:fltk-1.3.4-1/jpeg/jdmerge.c ****     upsample->pub.upsample = merged_2v_upsample;
 386:fltk-1.3.4-1/jpeg/jdmerge.c ****     upsample->upmethod = h2v2_merged_upsample;
 387:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Allocate a spare row buffer */
 388:fltk-1.3.4-1/jpeg/jdmerge.c ****     upsample->spare_row = (JSAMPROW)
 389:fltk-1.3.4-1/jpeg/jdmerge.c ****       (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 390:fltk-1.3.4-1/jpeg/jdmerge.c **** 		(size_t) (upsample->out_row_width * SIZEOF(JSAMPLE)));
 391:fltk-1.3.4-1/jpeg/jdmerge.c ****   } else {
 392:fltk-1.3.4-1/jpeg/jdmerge.c ****     upsample->pub.upsample = merged_1v_upsample;
 1110              		.loc 1 392 5 is_stmt 1 view .LVU438
 1111              		.loc 1 392 28 is_stmt 0 view .LVU439
 1112 0055 488D0500 		leaq	merged_1v_upsample(%rip), %rax
 1112      000000
 393:fltk-1.3.4-1/jpeg/jdmerge.c ****     upsample->upmethod = h2v1_merged_upsample;
 394:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* No spare row needed */
 395:fltk-1.3.4-1/jpeg/jdmerge.c ****     upsample->spare_row = NULL;
 1113              		.loc 1 395 25 view .LVU440
 1114 005c 48C74340 		movq	$0, 64(%rbx)
 1114      00000000 
 392:fltk-1.3.4-1/jpeg/jdmerge.c ****     upsample->upmethod = h2v1_merged_upsample;
 1115              		.loc 1 392 28 view .LVU441
 1116 0064 48894308 		movq	%rax, 8(%rbx)
 393:fltk-1.3.4-1/jpeg/jdmerge.c ****     upsample->upmethod = h2v1_merged_upsample;
 1117              		.loc 1 393 5 is_stmt 1 view .LVU442
 393:fltk-1.3.4-1/jpeg/jdmerge.c ****     upsample->upmethod = h2v1_merged_upsample;
 1118              		.loc 1 393 24 is_stmt 0 view .LVU443
 1119 0068 488D0500 		leaq	h2v1_merged_upsample(%rip), %rax
 1119      000000
 1120 006f 48894318 		movq	%rax, 24(%rbx)
 1121              		.loc 1 395 5 is_stmt 1 view .LVU444
 1122              	.L42:
 396:fltk-1.3.4-1/jpeg/jdmerge.c ****   }
 397:fltk-1.3.4-1/jpeg/jdmerge.c **** 
 398:fltk-1.3.4-1/jpeg/jdmerge.c ****   build_ycc_rgb_table(cinfo);
 1123              		.loc 1 398 3 view .LVU445
 1124              	.LVL138:
 1125              	.LBB4:
 1126              	.LBI4:
  84:fltk-1.3.4-1/jpeg/jdmerge.c **** {
 1127              		.loc 1 84 1 view .LVU446
 1128              	.LBB5:
  86:fltk-1.3.4-1/jpeg/jdmerge.c ****   int i;
 1129              		.loc 1 86 3 view .LVU447
  92:fltk-1.3.4-1/jpeg/jdmerge.c **** 				(MAXJSAMPLE+1) * SIZEOF(int));
 1130              		.loc 1 92 6 is_stmt 0 view .LVU448
 1131 0073 488B4508 		movq	8(%rbp), %rax
  86:fltk-1.3.4-1/jpeg/jdmerge.c ****   int i;
 1132              		.loc 1 86 19 view .LVU449
 1133 0077 488B9D80 		movq	640(%rbp), %rbx
 1133      020000
 1134              	.LVL139:
  87:fltk-1.3.4-1/jpeg/jdmerge.c ****   INT32 x;
 1135              		.loc 1 87 3 is_stmt 1 view .LVU450
  88:fltk-1.3.4-1/jpeg/jdmerge.c ****   SHIFT_TEMPS
 1136              		.loc 1 88 3 view .LVU451
  91:fltk-1.3.4-1/jpeg/jdmerge.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1137              		.loc 1 91 3 view .LVU452
  92:fltk-1.3.4-1/jpeg/jdmerge.c **** 				(MAXJSAMPLE+1) * SIZEOF(int));
 1138              		.loc 1 92 6 is_stmt 0 view .LVU453
 1139 007e BA000400 		movl	$1024, %edx
 1139      00
 1140 0083 4889EF   		movq	%rbp, %rdi
 1141 0086 BE010000 		movl	$1, %esi
 1141      00
 1142 008b FF10     		call	*(%rax)
 1143              	.LVL140:
  95:fltk-1.3.4-1/jpeg/jdmerge.c **** 				(MAXJSAMPLE+1) * SIZEOF(int));
 1144              		.loc 1 95 6 view .LVU454
 1145 008d BA000400 		movl	$1024, %edx
 1145      00
 1146 0092 BE010000 		movl	$1, %esi
 1146      00
 1147 0097 4889EF   		movq	%rbp, %rdi
  91:fltk-1.3.4-1/jpeg/jdmerge.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1148              		.loc 1 91 22 view .LVU455
 1149 009a 48894320 		movq	%rax, 32(%rbx)
  94:fltk-1.3.4-1/jpeg/jdmerge.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1150              		.loc 1 94 3 is_stmt 1 view .LVU456
  95:fltk-1.3.4-1/jpeg/jdmerge.c **** 				(MAXJSAMPLE+1) * SIZEOF(int));
 1151              		.loc 1 95 6 is_stmt 0 view .LVU457
 1152 009e 488B4508 		movq	8(%rbp), %rax
 1153 00a2 FF10     		call	*(%rax)
 1154              	.LVL141:
  98:fltk-1.3.4-1/jpeg/jdmerge.c **** 				(MAXJSAMPLE+1) * SIZEOF(INT32));
 1155              		.loc 1 98 6 view .LVU458
 1156 00a4 BA000800 		movl	$2048, %edx
 1156      00
 1157 00a9 BE010000 		movl	$1, %esi
 1157      00
 1158 00ae 4889EF   		movq	%rbp, %rdi
  94:fltk-1.3.4-1/jpeg/jdmerge.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1159              		.loc 1 94 22 view .LVU459
 1160 00b1 48894328 		movq	%rax, 40(%rbx)
  97:fltk-1.3.4-1/jpeg/jdmerge.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1161              		.loc 1 97 3 is_stmt 1 view .LVU460
  98:fltk-1.3.4-1/jpeg/jdmerge.c **** 				(MAXJSAMPLE+1) * SIZEOF(INT32));
 1162              		.loc 1 98 6 is_stmt 0 view .LVU461
 1163 00b5 488B4508 		movq	8(%rbp), %rax
 1164 00b9 FF10     		call	*(%rax)
 1165              	.LVL142:
 101:fltk-1.3.4-1/jpeg/jdmerge.c **** 				(MAXJSAMPLE+1) * SIZEOF(INT32));
 1166              		.loc 1 101 6 view .LVU462
 1167 00bb BA000800 		movl	$2048, %edx
 1167      00
 1168 00c0 BE010000 		movl	$1, %esi
 1168      00
 1169 00c5 4889EF   		movq	%rbp, %rdi
  97:fltk-1.3.4-1/jpeg/jdmerge.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1170              		.loc 1 97 22 view .LVU463
 1171 00c8 48894330 		movq	%rax, 48(%rbx)
 100:fltk-1.3.4-1/jpeg/jdmerge.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1172              		.loc 1 100 3 is_stmt 1 view .LVU464
 101:fltk-1.3.4-1/jpeg/jdmerge.c **** 				(MAXJSAMPLE+1) * SIZEOF(INT32));
 1173              		.loc 1 101 6 is_stmt 0 view .LVU465
 1174 00cc 488B4508 		movq	8(%rbp), %rax
 1175 00d0 FF10     		call	*(%rax)
 1176              	.LVL143:
 100:fltk-1.3.4-1/jpeg/jdmerge.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1177              		.loc 1 100 22 view .LVU466
 1178 00d2 BF808C2C 		movl	$2919552, %edi
 1178      00
 1179 00d7 BE00695B 		movl	$5990656, %esi
 1179      00
 1180 00dc 48C7C100 		movq	$-14831872, %rcx
 1180      AF1DFF
 1181 00e3 48894338 		movq	%rax, 56(%rbx)
 104:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
 1182              		.loc 1 104 3 is_stmt 1 view .LVU467
 1183              	.LVL144:
 104:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
 1184              		.loc 1 104 35 view .LVU468
 100:fltk-1.3.4-1/jpeg/jdmerge.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1185              		.loc 1 100 22 is_stmt 0 view .LVU469
 1186 00e7 48C7C280 		movq	$-11728000, %rdx
 1186      0B4DFF
 1187 00ee 31C0     		xorl	%eax, %eax
 1188              	.LVL145:
 1189              		.p2align 4,,10
 1190              		.p2align 3
 1191              	.L43:
 108:fltk-1.3.4-1/jpeg/jdmerge.c **** 		    RIGHT_SHIFT(FIX(1.402) * x + ONE_HALF, SCALEBITS);
 1192              		.loc 1 108 5 is_stmt 1 view .LVU470
 108:fltk-1.3.4-1/jpeg/jdmerge.c **** 		    RIGHT_SHIFT(FIX(1.402) * x + ONE_HALF, SCALEBITS);
 1193              		.loc 1 108 27 is_stmt 0 view .LVU471
 1194 00f0 4C8B4320 		movq	32(%rbx), %r8
 109:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Cb=>B value is nearest int to 1.772 * x */
 1195              		.loc 1 109 7 view .LVU472
 1196 00f4 4989D1   		movq	%rdx, %r9
 1197 00f7 4881C2E9 		addq	$91881, %rdx
 1197      660100
 1198 00fe 49C1F910 		sarq	$16, %r9
 108:fltk-1.3.4-1/jpeg/jdmerge.c **** 		    RIGHT_SHIFT(FIX(1.402) * x + ONE_HALF, SCALEBITS);
 1199              		.loc 1 108 29 view .LVU473
 1200 0102 45890C00 		movl	%r9d, (%r8,%rax)
 111:fltk-1.3.4-1/jpeg/jdmerge.c **** 		    RIGHT_SHIFT(FIX(1.772) * x + ONE_HALF, SCALEBITS);
 1201              		.loc 1 111 5 is_stmt 1 view .LVU474
 112:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Cr=>G value is scaled-up -0.714136286 * x */
 1202              		.loc 1 112 7 is_stmt 0 view .LVU475
 1203 0106 4989C9   		movq	%rcx, %r9
 111:fltk-1.3.4-1/jpeg/jdmerge.c **** 		    RIGHT_SHIFT(FIX(1.772) * x + ONE_HALF, SCALEBITS);
 1204              		.loc 1 111 27 view .LVU476
 1205 0109 4C8B4328 		movq	40(%rbx), %r8
 1206 010d 4881C1A2 		addq	$116130, %rcx
 1206      C50100
 112:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Cr=>G value is scaled-up -0.714136286 * x */
 1207              		.loc 1 112 7 view .LVU477
 1208 0114 49C1F910 		sarq	$16, %r9
 111:fltk-1.3.4-1/jpeg/jdmerge.c **** 		    RIGHT_SHIFT(FIX(1.772) * x + ONE_HALF, SCALEBITS);
 1209              		.loc 1 111 29 view .LVU478
 1210 0118 45890C00 		movl	%r9d, (%r8,%rax)
 114:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Cb=>G value is scaled-up -0.344136286 * x */
 1211              		.loc 1 114 5 is_stmt 1 view .LVU479
 114:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Cb=>G value is scaled-up -0.344136286 * x */
 1212              		.loc 1 114 27 is_stmt 0 view .LVU480
 1213 011c 4C8B4330 		movq	48(%rbx), %r8
 1214 0120 49893440 		movq	%rsi, (%r8,%rax,2)
 117:fltk-1.3.4-1/jpeg/jdmerge.c ****   }
 1215              		.loc 1 117 5 is_stmt 1 view .LVU481
 117:fltk-1.3.4-1/jpeg/jdmerge.c ****   }
 1216              		.loc 1 117 27 is_stmt 0 view .LVU482
 1217 0124 4C8B4338 		movq	56(%rbx), %r8
 1218 0128 4881EED2 		subq	$46802, %rsi
 1218      B60000
 1219 012f 49893C40 		movq	%rdi, (%r8,%rax,2)
 104:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
 1220              		.loc 1 104 52 is_stmt 1 view .LVU483
 104:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
 1221              		.loc 1 104 35 view .LVU484
 1222 0133 4883C004 		addq	$4, %rax
 1223 0137 4881EF19 		subq	$22553, %rdi
 1223      580000
 104:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
 1224              		.loc 1 104 3 is_stmt 0 view .LVU485
 1225 013e 4881FA80 		cmpq	$11793536, %rdx
 1225      F4B300
 1226 0145 75A9     		jne	.L43
 1227              	.LBE5:
 1228              	.LBE4:
 399:fltk-1.3.4-1/jpeg/jdmerge.c **** }
 1229              		.loc 1 399 1 view .LVU486
 1230 0147 4883C408 		addq	$8, %rsp
 1231              		.cfi_remember_state
 1232              		.cfi_def_cfa_offset 24
 1233 014b 5B       		popq	%rbx
 1234              		.cfi_def_cfa_offset 16
 1235              	.LVL146:
 1236              		.loc 1 399 1 view .LVU487
 1237 014c 5D       		popq	%rbp
 1238              		.cfi_def_cfa_offset 8
 1239              	.LVL147:
 1240              		.loc 1 399 1 view .LVU488
 1241 014d C3       		ret
 1242              	.LVL148:
 1243 014e 6690     		.p2align 4,,10
 1244              		.p2align 3
 1245              	.L46:
 1246              		.cfi_restore_state
 385:fltk-1.3.4-1/jpeg/jdmerge.c ****     upsample->upmethod = h2v2_merged_upsample;
 1247              		.loc 1 385 5 is_stmt 1 view .LVU489
 385:fltk-1.3.4-1/jpeg/jdmerge.c ****     upsample->upmethod = h2v2_merged_upsample;
 1248              		.loc 1 385 28 is_stmt 0 view .LVU490
 1249 0150 488D0500 		leaq	merged_2v_upsample(%rip), %rax
 1249      000000
 389:fltk-1.3.4-1/jpeg/jdmerge.c **** 		(size_t) (upsample->out_row_width * SIZEOF(JSAMPLE)));
 1250              		.loc 1 389 8 view .LVU491
 1251 0157 BE010000 		movl	$1, %esi
 1251      00
 1252 015c 4889EF   		movq	%rbp, %rdi
 385:fltk-1.3.4-1/jpeg/jdmerge.c ****     upsample->upmethod = h2v2_merged_upsample;
 1253              		.loc 1 385 28 view .LVU492
 1254 015f 48894308 		movq	%rax, 8(%rbx)
 386:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Allocate a spare row buffer */
 1255              		.loc 1 386 5 is_stmt 1 view .LVU493
 386:fltk-1.3.4-1/jpeg/jdmerge.c ****     /* Allocate a spare row buffer */
 1256              		.loc 1 386 24 is_stmt 0 view .LVU494
 1257 0163 488D0500 		leaq	h2v2_merged_upsample(%rip), %rax
 1257      000000
 1258 016a 48894318 		movq	%rax, 24(%rbx)
 388:fltk-1.3.4-1/jpeg/jdmerge.c ****       (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1259              		.loc 1 388 5 is_stmt 1 view .LVU495
 389:fltk-1.3.4-1/jpeg/jdmerge.c **** 		(size_t) (upsample->out_row_width * SIZEOF(JSAMPLE)));
 1260              		.loc 1 389 8 is_stmt 0 view .LVU496
 1261 016e 488B4508 		movq	8(%rbp), %rax
 1262 0172 FF5008   		call	*8(%rax)
 1263              	.LVL149:
 388:fltk-1.3.4-1/jpeg/jdmerge.c ****       (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1264              		.loc 1 388 25 view .LVU497
 1265 0175 48894340 		movq	%rax, 64(%rbx)
 1266 0179 E9F5FEFF 		jmp	.L42
 1266      FF
 1267              		.cfi_endproc
 1268              	.LFE57:
 1270              		.text
 1271              	.Letext0:
 1272              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 1273              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 1274              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 1275              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 1276              		.file 6 "/usr/include/stdio.h"
 1277              		.file 7 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 1278              		.file 8 "fltk-1.3.4-1/jpeg/jmorecfg.h"
 1279              		.file 9 "fltk-1.3.4-1/jpeg/jpeglib.h"
 1280              		.file 10 "fltk-1.3.4-1/jpeg/jpegint.h"
 14466              		.section	.note.gnu.property,"a"
 14467              		.align 8
 14468 0000 04000000 		.long	 1f - 0f
 14469 0004 10000000 		.long	 4f - 1f
 14470 0008 05000000 		.long	 5
 14471              	0:
 14472 000c 474E5500 		.string	 "GNU"
 14473              	1:
 14474              		.align 8
 14475 0010 020000C0 		.long	 0xc0000002
 14476 0014 04000000 		.long	 3f - 2f
 14477              	2:
 14478 0018 03000000 		.long	 0x3
 14479              	3:
 14480 001c 00000000 		.align 8
 14481              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 jdmerge.c
     /tmp/ccAR4PCc.s:7      .text.start_pass_merged_upsample:0000000000000000 start_pass_merged_upsample
     /tmp/ccAR4PCc.s:35     .text.merged_1v_upsample:0000000000000000 merged_1v_upsample
     /tmp/ccAR4PCc.s:94     .text.h2v1_merged_upsample:0000000000000000 h2v1_merged_upsample
     /tmp/ccAR4PCc.s:415    .text.h2v2_merged_upsample:0000000000000000 h2v2_merged_upsample
     /tmp/ccAR4PCc.s:859    .text.merged_2v_upsample:0000000000000000 merged_2v_upsample
     /tmp/ccAR4PCc.s:1056   .text.jinit_merged_upsampler:0000000000000000 jinit_merged_upsampler
                           .group:0000000000000000 wm4.0.a6b23a418548ac0bda5d8549c4a2ec91
                           .group:0000000000000000 wm4.stdcpredef.h.19.8dc41bed5d9037ff9622e015fb5f0ce3
                           .group:0000000000000000 wm4.jconfig.h.10.247fc3ff67998f3074970b1373c70333
                           .group:0000000000000000 wm4.features.h.19.5b5f5a19624a0527f479fdc52d54808f
                           .group:0000000000000000 wm4.cdefs.h.19.98d80eddbb3f64f4f30cd9aee9c5593c
                           .group:0000000000000000 wm4.wordsize.h.4.baf119258a1e53d8dba67ceac44ab6bc
                           .group:0000000000000000 wm4.cdefs.h.475.fb75d2e4416aa349344e6f45f683bf28
                           .group:0000000000000000 wm4.stubs64.h.10.6ce4c34010988db072c080326a6b6319
                           .group:0000000000000000 wm4.libcheaderstart.h.37.d9274df4cc0172452960ad9644fa5579
                           .group:0000000000000000 wm4.stdlib.h.28.2cffa49d94c5d85f4538f55f7b59771d
                           .group:0000000000000000 wm4.stddef.h.181.13772e73e5434e8cc4fafaaddad2b5da
                           .group:0000000000000000 wm4.waitflags.h.25.41934de4af99038521c2782f418699b1
                           .group:0000000000000000 wm4.waitstatus.h.28.93f167f49d64e2b9b99f98d1162a93bf
                           .group:0000000000000000 wm4.stdlib.h.43.9fa4f727a2f1cb8d2450a574c9195553
                           .group:0000000000000000 wm4.floatn.h.20.80c7cf8a8dfad237004b28d051d5afda
                           .group:0000000000000000 wm4.floatncommon.h.34.7e1840d7dfb19e9bdb51aeb077d76637
                           .group:0000000000000000 wm4.stdlib.h.71.2927e068ec678159b4f68ec2f089f7e6
                           .group:0000000000000000 wm4.types.h.109.56eb9ae966b255288cc544f18746a7ff
                           .group:0000000000000000 wm4.typesizes.h.24.2c64f817c0dc4b6fb2a2c619d717be26
                           .group:0000000000000000 wm4.time64.h.24.a8166ae916ec910dab0d8987098d42ee
                           .group:0000000000000000 wm4.types.h.40.18f72bab8242c2bb4c532a2aa95b5f00
                           .group:0000000000000000 wm4.stddef.h.231.0adce5c8c1fd8096aaff50981b3d1f0f
                           .group:0000000000000000 wm4.endian.h.20.efabd1018df5d7b4052c27dc6bdd5ce5
                           .group:0000000000000000 wm4.endianness.h.2.2c6a211f7909f3af5e9e9cfa3b6b63c8
                           .group:0000000000000000 wm4.endian.h.40.9e5d395adda2f4eb53ae69b69b664084
                           .group:0000000000000000 wm4.endian.h.27.4c4f94262c4eaee2982fe00ed1b4f173
                           .group:0000000000000000 wm4.byteswap.h.24.5363c019348146aada5aeadf51456576
                           .group:0000000000000000 wm4.endian.h.39.30a606dbd99b6c3df61c1f06dbdabd4e
                           .group:0000000000000000 wm4.select.h.28.eb2f3debdbcffd1442ebddaebc4fb6ff
                           .group:0000000000000000 wm4.__sigset_t.h.2.6b1ab6ff3d7b8fd9c0c42b0d80afbd80
                           .group:0000000000000000 wm4.select.h.44.887a4ff60aa97fcd9c1be017735e1675
                           .group:0000000000000000 wm4.select2.h.27.f95f2ab0ffee66dc1b6575014894b21a
                           .group:0000000000000000 wm4.types.h.186.489a4ed8f2d29cd358843490f54ddea5
                           .group:0000000000000000 wm4.pthreadtypesarch.h.25.6063cba99664c916e22d3a912bcc348a
                           .group:0000000000000000 wm4.struct_mutex.h.20.ed51f515172b9be99e450ba83eb5dd99
                           .group:0000000000000000 wm4.struct_rwlock.h.21.0254880f2904e3833fb8ae683e0f0330
                           .group:0000000000000000 wm4.alloca.h.19.edefa922a76c1cbaaf1e416903ba2d1c
                           .group:0000000000000000 wm4.alloca.h.29.156e12058824cc23d961c4d3b13031f6
                           .group:0000000000000000 wm4.stdio.h.24.5c1b97eef3c86b7a2549420f69f4f128
                           .group:0000000000000000 wm4.libcheaderstart.h.31.87b3c285aeba93fe355ad19123070832
                           .group:0000000000000000 wm4.stdio.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.stddef.h.231.8136eebbab3406dbf57a7ec475dd5d83
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.struct_FILE.h.19.0888ac70396abe1031c03d393554032f
                           .group:0000000000000000 wm4.stdio.h.53.139e45cf040c0964b2932c0c1bdaf6b2
                           .group:0000000000000000 wm4.stdio_lim.h.19.e4b00b560d878dcfbc6635b3406640c5
                           .group:0000000000000000 wm4.stdio.h.141.d7a290e19ca077c9e4aa7c43ede17a73
                           .group:0000000000000000 wm4.stdio.h.20.b0caa08e5723aa5941367be0e5d2ec59
                           .group:0000000000000000 wm4.stdio2.h.20.f45a0373b68e1296c4aa8cc09d66a9df
                           .group:0000000000000000 wm4.string.h.23.93403f89af7dba8212345449bb14b09d
                           .group:0000000000000000 wm4.string.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.strings.h.19.a259f126920b1bb5ef76bc62b3984a3c
                           .group:0000000000000000 wm4.jinclude.h.67.b19f941ec97c4845fa4609292c7e2db4
                           .group:0000000000000000 wm4.jmorecfg.h.33.3b4c5f9cc07b3737823b06caf24d5b05
                           .group:0000000000000000 wm4.jpeglib.h.40.4f111c27252a38df39328d65454e82f4
                           .group:0000000000000000 wm4.jpegint.h.26.5219ef5d4e4921371d38e77b6091fd20
                           .group:0000000000000000 wm4.jerror.h.25.1dbd8674e70ab5215bc0037320e5c2a2

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
jcopy_sample_rows
__stack_chk_fail
