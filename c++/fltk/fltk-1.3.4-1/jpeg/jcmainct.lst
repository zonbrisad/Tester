   1              		.file	"jcmainct.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.process_data_simple_main,"ax",@progbits
   5              		.p2align 4
   7              	process_data_simple_main:
   8              	.LVL0:
   9              	.LFB52:
  10              		.file 1 "fltk-1.3.4-1/jpeg/jcmainct.c"
   1:fltk-1.3.4-1/jpeg/jcmainct.c **** /*
   2:fltk-1.3.4-1/jpeg/jcmainct.c ****  * jcmainct.c
   3:fltk-1.3.4-1/jpeg/jcmainct.c ****  *
   4:fltk-1.3.4-1/jpeg/jcmainct.c ****  * Copyright (C) 1994-1996, Thomas G. Lane.
   5:fltk-1.3.4-1/jpeg/jcmainct.c ****  * Modified 2003-2012 by Guido Vollbeding.
   6:fltk-1.3.4-1/jpeg/jcmainct.c ****  * This file is part of the Independent JPEG Group's software.
   7:fltk-1.3.4-1/jpeg/jcmainct.c ****  * For conditions of distribution and use, see the accompanying README file.
   8:fltk-1.3.4-1/jpeg/jcmainct.c ****  *
   9:fltk-1.3.4-1/jpeg/jcmainct.c ****  * This file contains the main buffer controller for compression.
  10:fltk-1.3.4-1/jpeg/jcmainct.c ****  * The main buffer lies between the pre-processor and the JPEG
  11:fltk-1.3.4-1/jpeg/jcmainct.c ****  * compressor proper; it holds downsampled data in the JPEG colorspace.
  12:fltk-1.3.4-1/jpeg/jcmainct.c ****  */
  13:fltk-1.3.4-1/jpeg/jcmainct.c **** 
  14:fltk-1.3.4-1/jpeg/jcmainct.c **** #define JPEG_INTERNALS
  15:fltk-1.3.4-1/jpeg/jcmainct.c **** #include "jinclude.h"
  16:fltk-1.3.4-1/jpeg/jcmainct.c **** #include "jpeglib.h"
  17:fltk-1.3.4-1/jpeg/jcmainct.c **** 
  18:fltk-1.3.4-1/jpeg/jcmainct.c **** 
  19:fltk-1.3.4-1/jpeg/jcmainct.c **** /* Note: currently, there is no operating mode in which a full-image buffer
  20:fltk-1.3.4-1/jpeg/jcmainct.c ****  * is needed at this step.  If there were, that mode could not be used with
  21:fltk-1.3.4-1/jpeg/jcmainct.c ****  * "raw data" input, since this module is bypassed in that case.  However,
  22:fltk-1.3.4-1/jpeg/jcmainct.c ****  * we've left the code here for possible use in special applications.
  23:fltk-1.3.4-1/jpeg/jcmainct.c ****  */
  24:fltk-1.3.4-1/jpeg/jcmainct.c **** #undef FULL_MAIN_BUFFER_SUPPORTED
  25:fltk-1.3.4-1/jpeg/jcmainct.c **** 
  26:fltk-1.3.4-1/jpeg/jcmainct.c **** 
  27:fltk-1.3.4-1/jpeg/jcmainct.c **** /* Private buffer controller object */
  28:fltk-1.3.4-1/jpeg/jcmainct.c **** 
  29:fltk-1.3.4-1/jpeg/jcmainct.c **** typedef struct {
  30:fltk-1.3.4-1/jpeg/jcmainct.c ****   struct jpeg_c_main_controller pub; /* public fields */
  31:fltk-1.3.4-1/jpeg/jcmainct.c **** 
  32:fltk-1.3.4-1/jpeg/jcmainct.c ****   JDIMENSION cur_iMCU_row;	/* number of current iMCU row */
  33:fltk-1.3.4-1/jpeg/jcmainct.c ****   JDIMENSION rowgroup_ctr;	/* counts row groups received in iMCU row */
  34:fltk-1.3.4-1/jpeg/jcmainct.c ****   boolean suspended;		/* remember if we suspended output */
  35:fltk-1.3.4-1/jpeg/jcmainct.c ****   J_BUF_MODE pass_mode;		/* current operating mode */
  36:fltk-1.3.4-1/jpeg/jcmainct.c **** 
  37:fltk-1.3.4-1/jpeg/jcmainct.c ****   /* If using just a strip buffer, this points to the entire set of buffers
  38:fltk-1.3.4-1/jpeg/jcmainct.c ****    * (we allocate one for each component).  In the full-image case, this
  39:fltk-1.3.4-1/jpeg/jcmainct.c ****    * points to the currently accessible strips of the virtual arrays.
  40:fltk-1.3.4-1/jpeg/jcmainct.c ****    */
  41:fltk-1.3.4-1/jpeg/jcmainct.c ****   JSAMPARRAY buffer[MAX_COMPONENTS];
  42:fltk-1.3.4-1/jpeg/jcmainct.c **** 
  43:fltk-1.3.4-1/jpeg/jcmainct.c **** #ifdef FULL_MAIN_BUFFER_SUPPORTED
  44:fltk-1.3.4-1/jpeg/jcmainct.c ****   /* If using full-image storage, this array holds pointers to virtual-array
  45:fltk-1.3.4-1/jpeg/jcmainct.c ****    * control blocks for each component.  Unused if not full-image storage.
  46:fltk-1.3.4-1/jpeg/jcmainct.c ****    */
  47:fltk-1.3.4-1/jpeg/jcmainct.c ****   jvirt_sarray_ptr whole_image[MAX_COMPONENTS];
  48:fltk-1.3.4-1/jpeg/jcmainct.c **** #endif
  49:fltk-1.3.4-1/jpeg/jcmainct.c **** } my_main_controller;
  50:fltk-1.3.4-1/jpeg/jcmainct.c **** 
  51:fltk-1.3.4-1/jpeg/jcmainct.c **** typedef my_main_controller * my_main_ptr;
  52:fltk-1.3.4-1/jpeg/jcmainct.c **** 
  53:fltk-1.3.4-1/jpeg/jcmainct.c **** 
  54:fltk-1.3.4-1/jpeg/jcmainct.c **** /* Forward declarations */
  55:fltk-1.3.4-1/jpeg/jcmainct.c **** METHODDEF(void) process_data_simple_main
  56:fltk-1.3.4-1/jpeg/jcmainct.c **** 	JPP((j_compress_ptr cinfo, JSAMPARRAY input_buf,
  57:fltk-1.3.4-1/jpeg/jcmainct.c **** 	     JDIMENSION *in_row_ctr, JDIMENSION in_rows_avail));
  58:fltk-1.3.4-1/jpeg/jcmainct.c **** #ifdef FULL_MAIN_BUFFER_SUPPORTED
  59:fltk-1.3.4-1/jpeg/jcmainct.c **** METHODDEF(void) process_data_buffer_main
  60:fltk-1.3.4-1/jpeg/jcmainct.c **** 	JPP((j_compress_ptr cinfo, JSAMPARRAY input_buf,
  61:fltk-1.3.4-1/jpeg/jcmainct.c **** 	     JDIMENSION *in_row_ctr, JDIMENSION in_rows_avail));
  62:fltk-1.3.4-1/jpeg/jcmainct.c **** #endif
  63:fltk-1.3.4-1/jpeg/jcmainct.c **** 
  64:fltk-1.3.4-1/jpeg/jcmainct.c **** 
  65:fltk-1.3.4-1/jpeg/jcmainct.c **** /*
  66:fltk-1.3.4-1/jpeg/jcmainct.c ****  * Initialize for a processing pass.
  67:fltk-1.3.4-1/jpeg/jcmainct.c ****  */
  68:fltk-1.3.4-1/jpeg/jcmainct.c **** 
  69:fltk-1.3.4-1/jpeg/jcmainct.c **** METHODDEF(void)
  70:fltk-1.3.4-1/jpeg/jcmainct.c **** start_pass_main (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
  71:fltk-1.3.4-1/jpeg/jcmainct.c **** {
  72:fltk-1.3.4-1/jpeg/jcmainct.c ****   my_main_ptr mainp = (my_main_ptr) cinfo->main;
  73:fltk-1.3.4-1/jpeg/jcmainct.c **** 
  74:fltk-1.3.4-1/jpeg/jcmainct.c ****   /* Do nothing in raw-data mode. */
  75:fltk-1.3.4-1/jpeg/jcmainct.c ****   if (cinfo->raw_data_in)
  76:fltk-1.3.4-1/jpeg/jcmainct.c ****     return;
  77:fltk-1.3.4-1/jpeg/jcmainct.c **** 
  78:fltk-1.3.4-1/jpeg/jcmainct.c ****   mainp->cur_iMCU_row = 0;	/* initialize counters */
  79:fltk-1.3.4-1/jpeg/jcmainct.c ****   mainp->rowgroup_ctr = 0;
  80:fltk-1.3.4-1/jpeg/jcmainct.c ****   mainp->suspended = FALSE;
  81:fltk-1.3.4-1/jpeg/jcmainct.c ****   mainp->pass_mode = pass_mode;	/* save mode for use by process_data */
  82:fltk-1.3.4-1/jpeg/jcmainct.c **** 
  83:fltk-1.3.4-1/jpeg/jcmainct.c ****   switch (pass_mode) {
  84:fltk-1.3.4-1/jpeg/jcmainct.c ****   case JBUF_PASS_THRU:
  85:fltk-1.3.4-1/jpeg/jcmainct.c **** #ifdef FULL_MAIN_BUFFER_SUPPORTED
  86:fltk-1.3.4-1/jpeg/jcmainct.c ****     if (mainp->whole_image[0] != NULL)
  87:fltk-1.3.4-1/jpeg/jcmainct.c ****       ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
  88:fltk-1.3.4-1/jpeg/jcmainct.c **** #endif
  89:fltk-1.3.4-1/jpeg/jcmainct.c ****     mainp->pub.process_data = process_data_simple_main;
  90:fltk-1.3.4-1/jpeg/jcmainct.c ****     break;
  91:fltk-1.3.4-1/jpeg/jcmainct.c **** #ifdef FULL_MAIN_BUFFER_SUPPORTED
  92:fltk-1.3.4-1/jpeg/jcmainct.c ****   case JBUF_SAVE_SOURCE:
  93:fltk-1.3.4-1/jpeg/jcmainct.c ****   case JBUF_CRANK_DEST:
  94:fltk-1.3.4-1/jpeg/jcmainct.c ****   case JBUF_SAVE_AND_PASS:
  95:fltk-1.3.4-1/jpeg/jcmainct.c ****     if (mainp->whole_image[0] == NULL)
  96:fltk-1.3.4-1/jpeg/jcmainct.c ****       ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
  97:fltk-1.3.4-1/jpeg/jcmainct.c ****     mainp->pub.process_data = process_data_buffer_main;
  98:fltk-1.3.4-1/jpeg/jcmainct.c ****     break;
  99:fltk-1.3.4-1/jpeg/jcmainct.c **** #endif
 100:fltk-1.3.4-1/jpeg/jcmainct.c ****   default:
 101:fltk-1.3.4-1/jpeg/jcmainct.c ****     ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 102:fltk-1.3.4-1/jpeg/jcmainct.c ****     break;
 103:fltk-1.3.4-1/jpeg/jcmainct.c ****   }
 104:fltk-1.3.4-1/jpeg/jcmainct.c **** }
 105:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 106:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 107:fltk-1.3.4-1/jpeg/jcmainct.c **** /*
 108:fltk-1.3.4-1/jpeg/jcmainct.c ****  * Process some data.
 109:fltk-1.3.4-1/jpeg/jcmainct.c ****  * This routine handles the simple pass-through mode,
 110:fltk-1.3.4-1/jpeg/jcmainct.c ****  * where we have only a strip buffer.
 111:fltk-1.3.4-1/jpeg/jcmainct.c ****  */
 112:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 113:fltk-1.3.4-1/jpeg/jcmainct.c **** METHODDEF(void)
 114:fltk-1.3.4-1/jpeg/jcmainct.c **** process_data_simple_main (j_compress_ptr cinfo,
 115:fltk-1.3.4-1/jpeg/jcmainct.c **** 			  JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
 116:fltk-1.3.4-1/jpeg/jcmainct.c **** 			  JDIMENSION in_rows_avail)
 117:fltk-1.3.4-1/jpeg/jcmainct.c **** {
  11              		.loc 1 117 1 view -0
  12              		.cfi_startproc
  13              		.loc 1 117 1 is_stmt 0 view .LVU1
  14 0000 F30F1EFA 		endbr64
 118:fltk-1.3.4-1/jpeg/jcmainct.c ****   my_main_ptr mainp = (my_main_ptr) cinfo->main;
  15              		.loc 1 118 3 is_stmt 1 view .LVU2
 117:fltk-1.3.4-1/jpeg/jcmainct.c ****   my_main_ptr mainp = (my_main_ptr) cinfo->main;
  16              		.loc 1 117 1 is_stmt 0 view .LVU3
  17 0004 4157     		pushq	%r15
  18              		.cfi_def_cfa_offset 16
  19              		.cfi_offset 15, -16
  20 0006 4156     		pushq	%r14
  21              		.cfi_def_cfa_offset 24
  22              		.cfi_offset 14, -24
  23 0008 4155     		pushq	%r13
  24              		.cfi_def_cfa_offset 32
  25              		.cfi_offset 13, -32
  26 000a 4154     		pushq	%r12
  27              		.cfi_def_cfa_offset 40
  28              		.cfi_offset 12, -40
  29 000c 55       		pushq	%rbp
  30              		.cfi_def_cfa_offset 48
  31              		.cfi_offset 6, -48
  32 000d 53       		pushq	%rbx
  33              		.cfi_def_cfa_offset 56
  34              		.cfi_offset 3, -56
  35 000e 4883EC08 		subq	$8, %rsp
  36              		.cfi_def_cfa_offset 64
  37              		.loc 1 118 15 view .LVU4
  38 0012 488B9FF8 		movq	504(%rdi), %rbx
  38      010000
  39              	.LVL1:
 119:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 120:fltk-1.3.4-1/jpeg/jcmainct.c ****   while (mainp->cur_iMCU_row < cinfo->total_iMCU_rows) {
  40              		.loc 1 120 3 is_stmt 1 view .LVU5
  41              		.loc 1 120 9 view .LVU6
  42 0019 8B877001 		movl	368(%rdi), %eax
  42      0000
  43 001f 394310   		cmpl	%eax, 16(%rbx)
  44 0022 0F839600 		jnb	.L1
  44      0000
  45 0028 4989D4   		movq	%rdx, %r12
  46 002b 4889FD   		movq	%rdi, %rbp
  47 002e 8B5314   		movl	20(%rbx), %edx
  48              	.LVL2:
  49              		.loc 1 120 9 is_stmt 0 view .LVU7
  50 0031 4989F5   		movq	%rsi, %r13
  51 0034 4189CE   		movl	%ecx, %r14d
 121:fltk-1.3.4-1/jpeg/jcmainct.c ****     /* Read input data if we haven't filled the main buffer yet */
 122:fltk-1.3.4-1/jpeg/jcmainct.c ****     if (mainp->rowgroup_ctr < (JDIMENSION) cinfo->min_DCT_v_scaled_size)
 123:fltk-1.3.4-1/jpeg/jcmainct.c ****       (*cinfo->prep->pre_process_data) (cinfo,
  52              		.loc 1 123 8 view .LVU8
  53 0037 4C8D7B14 		leaq	20(%rbx), %r15
  54 003b EB45     		jmp	.L8
  55              	.LVL3:
  56 003d 0F1F00   		.p2align 4,,10
  57              		.p2align 3
  58              	.L13:
 124:fltk-1.3.4-1/jpeg/jcmainct.c **** 					input_buf, in_row_ctr, in_rows_avail,
 125:fltk-1.3.4-1/jpeg/jcmainct.c **** 					mainp->buffer, &mainp->rowgroup_ctr,
 126:fltk-1.3.4-1/jpeg/jcmainct.c **** 					(JDIMENSION) cinfo->min_DCT_v_scaled_size);
 127:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 128:fltk-1.3.4-1/jpeg/jcmainct.c ****     /* If we don't have a full iMCU row buffered, return to application for
 129:fltk-1.3.4-1/jpeg/jcmainct.c ****      * more data.  Note that preprocessor will always pad to fill the iMCU row
 130:fltk-1.3.4-1/jpeg/jcmainct.c ****      * at the bottom of the image.
 131:fltk-1.3.4-1/jpeg/jcmainct.c ****      */
 132:fltk-1.3.4-1/jpeg/jcmainct.c ****     if (mainp->rowgroup_ctr != (JDIMENSION) cinfo->min_DCT_v_scaled_size)
 133:fltk-1.3.4-1/jpeg/jcmainct.c ****       return;
 134:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 135:fltk-1.3.4-1/jpeg/jcmainct.c ****     /* Send the completed row to the compressor */
 136:fltk-1.3.4-1/jpeg/jcmainct.c ****     if (! (*cinfo->coef->compress_data) (cinfo, mainp->buffer)) {
  59              		.loc 1 136 5 is_stmt 1 view .LVU9
  60              		.loc 1 136 12 is_stmt 0 view .LVU10
  61 0040 488B8508 		movq	520(%rbp), %rax
  61      020000
  62              		.loc 1 136 54 view .LVU11
  63 0047 488D7320 		leaq	32(%rbx), %rsi
  64              		.loc 1 136 12 view .LVU12
  65 004b 4889EF   		movq	%rbp, %rdi
  66 004e FF5008   		call	*8(%rax)
  67              	.LVL4:
  68              		.loc 1 136 8 view .LVU13
  69 0051 85C0     		testl	%eax, %eax
  70 0053 747B     		je	.L12
 137:fltk-1.3.4-1/jpeg/jcmainct.c ****       /* If compressor did not consume the whole row, then we must need to
 138:fltk-1.3.4-1/jpeg/jcmainct.c ****        * suspend processing and return to the application.  In this situation
 139:fltk-1.3.4-1/jpeg/jcmainct.c ****        * we pretend we didn't yet consume the last input row; otherwise, if
 140:fltk-1.3.4-1/jpeg/jcmainct.c ****        * it happened to be the last row of the image, the application would
 141:fltk-1.3.4-1/jpeg/jcmainct.c ****        * think we were done.
 142:fltk-1.3.4-1/jpeg/jcmainct.c ****        */
 143:fltk-1.3.4-1/jpeg/jcmainct.c ****       if (! mainp->suspended) {
 144:fltk-1.3.4-1/jpeg/jcmainct.c **** 	(*in_row_ctr)--;
 145:fltk-1.3.4-1/jpeg/jcmainct.c **** 	mainp->suspended = TRUE;
 146:fltk-1.3.4-1/jpeg/jcmainct.c ****       }
 147:fltk-1.3.4-1/jpeg/jcmainct.c ****       return;
 148:fltk-1.3.4-1/jpeg/jcmainct.c ****     }
 149:fltk-1.3.4-1/jpeg/jcmainct.c ****     /* We did finish the row.  Undo our little suspension hack if a previous
 150:fltk-1.3.4-1/jpeg/jcmainct.c ****      * call suspended; then mark the main buffer empty.
 151:fltk-1.3.4-1/jpeg/jcmainct.c ****      */
 152:fltk-1.3.4-1/jpeg/jcmainct.c ****     if (mainp->suspended) {
  71              		.loc 1 152 5 is_stmt 1 view .LVU14
  72              		.loc 1 152 8 is_stmt 0 view .LVU15
  73 0055 8B4318   		movl	24(%rbx), %eax
  74 0058 85C0     		testl	%eax, %eax
  75 005a 740C     		je	.L7
 153:fltk-1.3.4-1/jpeg/jcmainct.c ****       (*in_row_ctr)++;
  76              		.loc 1 153 7 is_stmt 1 view .LVU16
  77              		.loc 1 153 20 is_stmt 0 view .LVU17
  78 005c 41830424 		addl	$1, (%r12)
  78      01
 154:fltk-1.3.4-1/jpeg/jcmainct.c ****       mainp->suspended = FALSE;
  79              		.loc 1 154 7 is_stmt 1 view .LVU18
  80              		.loc 1 154 24 is_stmt 0 view .LVU19
  81 0061 C7431800 		movl	$0, 24(%rbx)
  81      000000
  82              	.L7:
 155:fltk-1.3.4-1/jpeg/jcmainct.c ****     }
 156:fltk-1.3.4-1/jpeg/jcmainct.c ****     mainp->rowgroup_ctr = 0;
  83              		.loc 1 156 5 is_stmt 1 view .LVU20
 157:fltk-1.3.4-1/jpeg/jcmainct.c ****     mainp->cur_iMCU_row++;
  84              		.loc 1 157 24 is_stmt 0 view .LVU21
  85 0068 8B4310   		movl	16(%rbx), %eax
 156:fltk-1.3.4-1/jpeg/jcmainct.c ****     mainp->cur_iMCU_row++;
  86              		.loc 1 156 25 view .LVU22
  87 006b C7431400 		movl	$0, 20(%rbx)
  87      000000
  88              		.loc 1 157 5 is_stmt 1 view .LVU23
  89 0072 31D2     		xorl	%edx, %edx
  90              		.loc 1 157 24 is_stmt 0 view .LVU24
  91 0074 83C001   		addl	$1, %eax
  92 0077 894310   		movl	%eax, 16(%rbx)
 120:fltk-1.3.4-1/jpeg/jcmainct.c ****     /* Read input data if we haven't filled the main buffer yet */
  93              		.loc 1 120 9 is_stmt 1 view .LVU25
  94 007a 3B857001 		cmpl	368(%rbp), %eax
  94      0000
  95 0080 733C     		jnb	.L1
  96              	.L8:
 122:fltk-1.3.4-1/jpeg/jcmainct.c ****       (*cinfo->prep->pre_process_data) (cinfo,
  97              		.loc 1 122 5 view .LVU26
 122:fltk-1.3.4-1/jpeg/jcmainct.c ****       (*cinfo->prep->pre_process_data) (cinfo,
  98              		.loc 1 122 31 is_stmt 0 view .LVU27
  99 0082 8B856C01 		movl	364(%rbp), %eax
  99      0000
 122:fltk-1.3.4-1/jpeg/jcmainct.c ****       (*cinfo->prep->pre_process_data) (cinfo,
 100              		.loc 1 122 8 view .LVU28
 101 0088 39D0     		cmpl	%edx, %eax
 102 008a 762E     		jbe	.L4
 123:fltk-1.3.4-1/jpeg/jcmainct.c **** 					input_buf, in_row_ctr, in_rows_avail,
 103              		.loc 1 123 7 is_stmt 1 view .LVU29
 123:fltk-1.3.4-1/jpeg/jcmainct.c **** 					input_buf, in_row_ctr, in_rows_avail,
 104              		.loc 1 123 8 is_stmt 0 view .LVU30
 105 008c 4C8B9500 		movq	512(%rbp), %r10
 105      020000
 106 0093 4489F1   		movl	%r14d, %ecx
 107 0096 4C89E2   		movq	%r12, %rdx
 108 0099 4C89EE   		movq	%r13, %rsi
 109 009c 4883EC08 		subq	$8, %rsp
 110              		.cfi_def_cfa_offset 72
 111 00a0 4D89F9   		movq	%r15, %r9
 112 00a3 4C8D4320 		leaq	32(%rbx), %r8
 113 00a7 4889EF   		movq	%rbp, %rdi
 114 00aa 50       		pushq	%rax
 115              		.cfi_def_cfa_offset 80
 116 00ab 41FF5208 		call	*8(%r10)
 117              	.LVL5:
 118 00af 8B5314   		movl	20(%rbx), %edx
 119 00b2 8B856C01 		movl	364(%rbp), %eax
 119      0000
 120 00b8 59       		popq	%rcx
 121              		.cfi_def_cfa_offset 72
 122 00b9 5E       		popq	%rsi
 123              		.cfi_def_cfa_offset 64
 124              	.L4:
 132:fltk-1.3.4-1/jpeg/jcmainct.c ****       return;
 125              		.loc 1 132 5 is_stmt 1 view .LVU31
 132:fltk-1.3.4-1/jpeg/jcmainct.c ****       return;
 126              		.loc 1 132 8 is_stmt 0 view .LVU32
 127 00ba 39C2     		cmpl	%eax, %edx
 128 00bc 7482     		je	.L13
 129              	.LVL6:
 130              	.L1:
 158:fltk-1.3.4-1/jpeg/jcmainct.c ****   }
 159:fltk-1.3.4-1/jpeg/jcmainct.c **** }
 131              		.loc 1 159 1 view .LVU33
 132 00be 4883C408 		addq	$8, %rsp
 133              		.cfi_remember_state
 134              		.cfi_def_cfa_offset 56
 135 00c2 5B       		popq	%rbx
 136              		.cfi_def_cfa_offset 48
 137              	.LVL7:
 138              		.loc 1 159 1 view .LVU34
 139 00c3 5D       		popq	%rbp
 140              		.cfi_def_cfa_offset 40
 141 00c4 415C     		popq	%r12
 142              		.cfi_def_cfa_offset 32
 143 00c6 415D     		popq	%r13
 144              		.cfi_def_cfa_offset 24
 145 00c8 415E     		popq	%r14
 146              		.cfi_def_cfa_offset 16
 147 00ca 415F     		popq	%r15
 148              		.cfi_def_cfa_offset 8
 149 00cc C3       		ret
 150              	.LVL8:
 151 00cd 0F1F00   		.p2align 4,,10
 152              		.p2align 3
 153              	.L12:
 154              		.cfi_restore_state
 143:fltk-1.3.4-1/jpeg/jcmainct.c **** 	(*in_row_ctr)--;
 155              		.loc 1 143 7 is_stmt 1 view .LVU35
 143:fltk-1.3.4-1/jpeg/jcmainct.c **** 	(*in_row_ctr)--;
 156              		.loc 1 143 10 is_stmt 0 view .LVU36
 157 00d0 8B5318   		movl	24(%rbx), %edx
 158 00d3 85D2     		testl	%edx, %edx
 159 00d5 75E7     		jne	.L1
 144:fltk-1.3.4-1/jpeg/jcmainct.c **** 	mainp->suspended = TRUE;
 160              		.loc 1 144 2 is_stmt 1 view .LVU37
 144:fltk-1.3.4-1/jpeg/jcmainct.c **** 	mainp->suspended = TRUE;
 161              		.loc 1 144 15 is_stmt 0 view .LVU38
 162 00d7 41832C24 		subl	$1, (%r12)
 162      01
 145:fltk-1.3.4-1/jpeg/jcmainct.c ****       }
 163              		.loc 1 145 2 is_stmt 1 view .LVU39
 145:fltk-1.3.4-1/jpeg/jcmainct.c ****       }
 164              		.loc 1 145 19 is_stmt 0 view .LVU40
 165 00dc C7431801 		movl	$1, 24(%rbx)
 165      000000
 166              		.loc 1 159 1 view .LVU41
 167 00e3 4883C408 		addq	$8, %rsp
 168              		.cfi_def_cfa_offset 56
 169 00e7 5B       		popq	%rbx
 170              		.cfi_def_cfa_offset 48
 171              	.LVL9:
 172              		.loc 1 159 1 view .LVU42
 173 00e8 5D       		popq	%rbp
 174              		.cfi_def_cfa_offset 40
 175              	.LVL10:
 176              		.loc 1 159 1 view .LVU43
 177 00e9 415C     		popq	%r12
 178              		.cfi_def_cfa_offset 32
 179              	.LVL11:
 180              		.loc 1 159 1 view .LVU44
 181 00eb 415D     		popq	%r13
 182              		.cfi_def_cfa_offset 24
 183              	.LVL12:
 184              		.loc 1 159 1 view .LVU45
 185 00ed 415E     		popq	%r14
 186              		.cfi_def_cfa_offset 16
 187              	.LVL13:
 188              		.loc 1 159 1 view .LVU46
 189 00ef 415F     		popq	%r15
 190              		.cfi_def_cfa_offset 8
 191              	.LVL14:
 192              		.loc 1 159 1 view .LVU47
 193 00f1 C3       		ret
 194              		.cfi_endproc
 195              	.LFE52:
 197              		.section	.text.start_pass_main,"ax",@progbits
 198              		.p2align 4
 200              	start_pass_main:
 201              	.LVL15:
 202              	.LFB51:
  71:fltk-1.3.4-1/jpeg/jcmainct.c ****   my_main_ptr mainp = (my_main_ptr) cinfo->main;
 203              		.loc 1 71 1 is_stmt 1 view -0
 204              		.cfi_startproc
  71:fltk-1.3.4-1/jpeg/jcmainct.c ****   my_main_ptr mainp = (my_main_ptr) cinfo->main;
 205              		.loc 1 71 1 is_stmt 0 view .LVU49
 206 0000 F30F1EFA 		endbr64
  72:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 207              		.loc 1 72 3 is_stmt 1 view .LVU50
 208              	.LVL16:
  75:fltk-1.3.4-1/jpeg/jcmainct.c ****     return;
 209              		.loc 1 75 3 view .LVU51
  75:fltk-1.3.4-1/jpeg/jcmainct.c ****     return;
 210              		.loc 1 75 6 is_stmt 0 view .LVU52
 211 0004 8B872001 		movl	288(%rdi), %eax
 211      0000
 212 000a 85C0     		testl	%eax, %eax
 213 000c 7532     		jne	.L14
  72:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 214              		.loc 1 72 15 view .LVU53
 215 000e 488B87F8 		movq	504(%rdi), %rax
 215      010000
  78:fltk-1.3.4-1/jpeg/jcmainct.c ****   mainp->rowgroup_ctr = 0;
 216              		.loc 1 78 3 is_stmt 1 view .LVU54
  79:fltk-1.3.4-1/jpeg/jcmainct.c ****   mainp->suspended = FALSE;
 217              		.loc 1 79 3 view .LVU55
  80:fltk-1.3.4-1/jpeg/jcmainct.c ****   mainp->pass_mode = pass_mode;	/* save mode for use by process_data */
 218              		.loc 1 80 3 view .LVU56
  78:fltk-1.3.4-1/jpeg/jcmainct.c ****   mainp->rowgroup_ctr = 0;
 219              		.loc 1 78 23 is_stmt 0 view .LVU57
 220 0015 48C74010 		movq	$0, 16(%rax)
 220      00000000 
 221              	.LVL17:
  80:fltk-1.3.4-1/jpeg/jcmainct.c ****   mainp->pass_mode = pass_mode;	/* save mode for use by process_data */
 222              		.loc 1 80 20 view .LVU58
 223 001d C7401800 		movl	$0, 24(%rax)
 223      000000
  81:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 224              		.loc 1 81 3 is_stmt 1 view .LVU59
  81:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 225              		.loc 1 81 20 is_stmt 0 view .LVU60
 226 0024 89701C   		movl	%esi, 28(%rax)
  83:fltk-1.3.4-1/jpeg/jcmainct.c ****   case JBUF_PASS_THRU:
 227              		.loc 1 83 3 is_stmt 1 view .LVU61
 228 0027 85F6     		testl	%esi, %esi
 229 0029 741D     		je	.L17
 230              	.LVL18:
 231              	.LBB4:
 232              	.LBI4:
  70:fltk-1.3.4-1/jpeg/jcmainct.c **** {
 233              		.loc 1 70 1 view .LVU62
 234              	.LBB5:
 101:fltk-1.3.4-1/jpeg/jcmainct.c ****     break;
 235              		.loc 1 101 5 view .LVU63
 236 002b 488B07   		movq	(%rdi), %rax
 237              	.LVL19:
 101:fltk-1.3.4-1/jpeg/jcmainct.c ****     break;
 238              		.loc 1 101 5 is_stmt 0 view .LVU64
 239 002e C7402803 		movl	$3, 40(%rax)
 239      000000
 240 0035 488B07   		movq	(%rdi), %rax
 241 0038 FF20     		jmp	*(%rax)
 242              	.LVL20:
 243 003a 660F1F44 		.p2align 4,,10
 243      0000
 244              		.p2align 3
 245              	.L14:
 101:fltk-1.3.4-1/jpeg/jcmainct.c ****     break;
 246              		.loc 1 101 5 view .LVU65
 247              	.LBE5:
 248              	.LBE4:
 104:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 249              		.loc 1 104 1 view .LVU66
 250 0040 C3       		ret
 251              	.LVL21:
 252              		.p2align 4,,10
 253 0041 0F1F8000 		.p2align 3
 253      000000
 254              	.L17:
  89:fltk-1.3.4-1/jpeg/jcmainct.c ****     break;
 255              		.loc 1 89 5 is_stmt 1 view .LVU67
  89:fltk-1.3.4-1/jpeg/jcmainct.c ****     break;
 256              		.loc 1 89 29 is_stmt 0 view .LVU68
 257 0048 488D1500 		leaq	process_data_simple_main(%rip), %rdx
 257      000000
 258 004f 48895008 		movq	%rdx, 8(%rax)
  90:fltk-1.3.4-1/jpeg/jcmainct.c **** #ifdef FULL_MAIN_BUFFER_SUPPORTED
 259              		.loc 1 90 5 is_stmt 1 view .LVU69
 260 0053 C3       		ret
 261              		.cfi_endproc
 262              	.LFE51:
 264              		.section	.text.jinit_c_main_controller,"ax",@progbits
 265              		.p2align 4
 266              		.globl	jinit_c_main_controller
 268              	jinit_c_main_controller:
 269              	.LVL22:
 270              	.LFB53:
 160:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 161:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 162:fltk-1.3.4-1/jpeg/jcmainct.c **** #ifdef FULL_MAIN_BUFFER_SUPPORTED
 163:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 164:fltk-1.3.4-1/jpeg/jcmainct.c **** /*
 165:fltk-1.3.4-1/jpeg/jcmainct.c ****  * Process some data.
 166:fltk-1.3.4-1/jpeg/jcmainct.c ****  * This routine handles all of the modes that use a full-size buffer.
 167:fltk-1.3.4-1/jpeg/jcmainct.c ****  */
 168:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 169:fltk-1.3.4-1/jpeg/jcmainct.c **** METHODDEF(void)
 170:fltk-1.3.4-1/jpeg/jcmainct.c **** process_data_buffer_main (j_compress_ptr cinfo,
 171:fltk-1.3.4-1/jpeg/jcmainct.c **** 			  JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
 172:fltk-1.3.4-1/jpeg/jcmainct.c **** 			  JDIMENSION in_rows_avail)
 173:fltk-1.3.4-1/jpeg/jcmainct.c **** {
 174:fltk-1.3.4-1/jpeg/jcmainct.c ****   my_main_ptr mainp = (my_main_ptr) cinfo->main;
 175:fltk-1.3.4-1/jpeg/jcmainct.c ****   int ci;
 176:fltk-1.3.4-1/jpeg/jcmainct.c ****   jpeg_component_info *compptr;
 177:fltk-1.3.4-1/jpeg/jcmainct.c ****   boolean writing = (mainp->pass_mode != JBUF_CRANK_DEST);
 178:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 179:fltk-1.3.4-1/jpeg/jcmainct.c ****   while (mainp->cur_iMCU_row < cinfo->total_iMCU_rows) {
 180:fltk-1.3.4-1/jpeg/jcmainct.c ****     /* Realign the virtual buffers if at the start of an iMCU row. */
 181:fltk-1.3.4-1/jpeg/jcmainct.c ****     if (mainp->rowgroup_ctr == 0) {
 182:fltk-1.3.4-1/jpeg/jcmainct.c ****       for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 183:fltk-1.3.4-1/jpeg/jcmainct.c **** 	   ci++, compptr++) {
 184:fltk-1.3.4-1/jpeg/jcmainct.c **** 	mainp->buffer[ci] = (*cinfo->mem->access_virt_sarray)
 185:fltk-1.3.4-1/jpeg/jcmainct.c **** 	  ((j_common_ptr) cinfo, mainp->whole_image[ci], mainp->cur_iMCU_row *
 186:fltk-1.3.4-1/jpeg/jcmainct.c **** 	   ((JDIMENSION) (compptr->v_samp_factor * cinfo->min_DCT_v_scaled_size)),
 187:fltk-1.3.4-1/jpeg/jcmainct.c **** 	   (JDIMENSION) (compptr->v_samp_factor * cinfo->min_DCT_v_scaled_size),
 188:fltk-1.3.4-1/jpeg/jcmainct.c **** 	   writing);
 189:fltk-1.3.4-1/jpeg/jcmainct.c ****       }
 190:fltk-1.3.4-1/jpeg/jcmainct.c ****       /* In a read pass, pretend we just read some source data. */
 191:fltk-1.3.4-1/jpeg/jcmainct.c ****       if (! writing) {
 192:fltk-1.3.4-1/jpeg/jcmainct.c **** 	*in_row_ctr += (JDIMENSION)
 193:fltk-1.3.4-1/jpeg/jcmainct.c **** 	  (cinfo->max_v_samp_factor * cinfo->min_DCT_v_scaled_size);
 194:fltk-1.3.4-1/jpeg/jcmainct.c **** 	mainp->rowgroup_ctr = (JDIMENSION) cinfo->min_DCT_v_scaled_size;
 195:fltk-1.3.4-1/jpeg/jcmainct.c ****       }
 196:fltk-1.3.4-1/jpeg/jcmainct.c ****     }
 197:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 198:fltk-1.3.4-1/jpeg/jcmainct.c ****     /* If a write pass, read input data until the current iMCU row is full. */
 199:fltk-1.3.4-1/jpeg/jcmainct.c ****     /* Note: preprocessor will pad if necessary to fill the last iMCU row. */
 200:fltk-1.3.4-1/jpeg/jcmainct.c ****     if (writing) {
 201:fltk-1.3.4-1/jpeg/jcmainct.c ****       (*cinfo->prep->pre_process_data) (cinfo,
 202:fltk-1.3.4-1/jpeg/jcmainct.c **** 					input_buf, in_row_ctr, in_rows_avail,
 203:fltk-1.3.4-1/jpeg/jcmainct.c **** 					mainp->buffer, &mainp->rowgroup_ctr,
 204:fltk-1.3.4-1/jpeg/jcmainct.c **** 					(JDIMENSION) cinfo->min_DCT_v_scaled_size);
 205:fltk-1.3.4-1/jpeg/jcmainct.c ****       /* Return to application if we need more data to fill the iMCU row. */
 206:fltk-1.3.4-1/jpeg/jcmainct.c ****       if (mainp->rowgroup_ctr < (JDIMENSION) cinfo->min_DCT_v_scaled_size)
 207:fltk-1.3.4-1/jpeg/jcmainct.c **** 	return;
 208:fltk-1.3.4-1/jpeg/jcmainct.c ****     }
 209:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 210:fltk-1.3.4-1/jpeg/jcmainct.c ****     /* Emit data, unless this is a sink-only pass. */
 211:fltk-1.3.4-1/jpeg/jcmainct.c ****     if (mainp->pass_mode != JBUF_SAVE_SOURCE) {
 212:fltk-1.3.4-1/jpeg/jcmainct.c ****       if (! (*cinfo->coef->compress_data) (cinfo, mainp->buffer)) {
 213:fltk-1.3.4-1/jpeg/jcmainct.c **** 	/* If compressor did not consume the whole row, then we must need to
 214:fltk-1.3.4-1/jpeg/jcmainct.c **** 	 * suspend processing and return to the application.  In this situation
 215:fltk-1.3.4-1/jpeg/jcmainct.c **** 	 * we pretend we didn't yet consume the last input row; otherwise, if
 216:fltk-1.3.4-1/jpeg/jcmainct.c **** 	 * it happened to be the last row of the image, the application would
 217:fltk-1.3.4-1/jpeg/jcmainct.c **** 	 * think we were done.
 218:fltk-1.3.4-1/jpeg/jcmainct.c **** 	 */
 219:fltk-1.3.4-1/jpeg/jcmainct.c **** 	if (! mainp->suspended) {
 220:fltk-1.3.4-1/jpeg/jcmainct.c **** 	  (*in_row_ctr)--;
 221:fltk-1.3.4-1/jpeg/jcmainct.c **** 	  mainp->suspended = TRUE;
 222:fltk-1.3.4-1/jpeg/jcmainct.c **** 	}
 223:fltk-1.3.4-1/jpeg/jcmainct.c **** 	return;
 224:fltk-1.3.4-1/jpeg/jcmainct.c ****       }
 225:fltk-1.3.4-1/jpeg/jcmainct.c ****       /* We did finish the row.  Undo our little suspension hack if a previous
 226:fltk-1.3.4-1/jpeg/jcmainct.c ****        * call suspended; then mark the main buffer empty.
 227:fltk-1.3.4-1/jpeg/jcmainct.c ****        */
 228:fltk-1.3.4-1/jpeg/jcmainct.c ****       if (mainp->suspended) {
 229:fltk-1.3.4-1/jpeg/jcmainct.c **** 	(*in_row_ctr)++;
 230:fltk-1.3.4-1/jpeg/jcmainct.c **** 	mainp->suspended = FALSE;
 231:fltk-1.3.4-1/jpeg/jcmainct.c ****       }
 232:fltk-1.3.4-1/jpeg/jcmainct.c ****     }
 233:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 234:fltk-1.3.4-1/jpeg/jcmainct.c ****     /* If get here, we are done with this iMCU row.  Mark buffer empty. */
 235:fltk-1.3.4-1/jpeg/jcmainct.c ****     mainp->rowgroup_ctr = 0;
 236:fltk-1.3.4-1/jpeg/jcmainct.c ****     mainp->cur_iMCU_row++;
 237:fltk-1.3.4-1/jpeg/jcmainct.c ****   }
 238:fltk-1.3.4-1/jpeg/jcmainct.c **** }
 239:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 240:fltk-1.3.4-1/jpeg/jcmainct.c **** #endif /* FULL_MAIN_BUFFER_SUPPORTED */
 241:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 242:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 243:fltk-1.3.4-1/jpeg/jcmainct.c **** /*
 244:fltk-1.3.4-1/jpeg/jcmainct.c ****  * Initialize main buffer controller.
 245:fltk-1.3.4-1/jpeg/jcmainct.c ****  */
 246:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 247:fltk-1.3.4-1/jpeg/jcmainct.c **** GLOBAL(void)
 248:fltk-1.3.4-1/jpeg/jcmainct.c **** jinit_c_main_controller (j_compress_ptr cinfo, boolean need_full_buffer)
 249:fltk-1.3.4-1/jpeg/jcmainct.c **** {
 271              		.loc 1 249 1 view -0
 272              		.cfi_startproc
 273              		.loc 1 249 1 is_stmt 0 view .LVU71
 274 0000 F30F1EFA 		endbr64
 250:fltk-1.3.4-1/jpeg/jcmainct.c ****   my_main_ptr mainp;
 275              		.loc 1 250 3 is_stmt 1 view .LVU72
 251:fltk-1.3.4-1/jpeg/jcmainct.c ****   int ci;
 276              		.loc 1 251 3 view .LVU73
 252:fltk-1.3.4-1/jpeg/jcmainct.c ****   jpeg_component_info *compptr;
 277              		.loc 1 252 3 view .LVU74
 253:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 254:fltk-1.3.4-1/jpeg/jcmainct.c ****   mainp = (my_main_ptr)
 278              		.loc 1 254 3 view .LVU75
 249:fltk-1.3.4-1/jpeg/jcmainct.c ****   my_main_ptr mainp;
 279              		.loc 1 249 1 is_stmt 0 view .LVU76
 280 0004 4155     		pushq	%r13
 281              		.cfi_def_cfa_offset 16
 282              		.cfi_offset 13, -16
 255:fltk-1.3.4-1/jpeg/jcmainct.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 283              		.loc 1 255 6 view .LVU77
 284 0006 BA700000 		movl	$112, %edx
 284      00
 249:fltk-1.3.4-1/jpeg/jcmainct.c ****   my_main_ptr mainp;
 285              		.loc 1 249 1 view .LVU78
 286 000b 4154     		pushq	%r12
 287              		.cfi_def_cfa_offset 24
 288              		.cfi_offset 12, -24
 289 000d 55       		pushq	%rbp
 290              		.cfi_def_cfa_offset 32
 291              		.cfi_offset 6, -32
 292 000e 4889FD   		movq	%rdi, %rbp
 293 0011 53       		pushq	%rbx
 294              		.cfi_def_cfa_offset 40
 295              		.cfi_offset 3, -40
 296 0012 89F3     		movl	%esi, %ebx
 297              		.loc 1 255 6 view .LVU79
 298 0014 BE010000 		movl	$1, %esi
 298      00
 299              	.LVL23:
 249:fltk-1.3.4-1/jpeg/jcmainct.c ****   my_main_ptr mainp;
 300              		.loc 1 249 1 view .LVU80
 301 0019 4883EC08 		subq	$8, %rsp
 302              		.cfi_def_cfa_offset 48
 303              		.loc 1 255 6 view .LVU81
 304 001d 488B4708 		movq	8(%rdi), %rax
 305 0021 FF10     		call	*(%rax)
 306              	.LVL24:
 256:fltk-1.3.4-1/jpeg/jcmainct.c **** 				SIZEOF(my_main_controller));
 257:fltk-1.3.4-1/jpeg/jcmainct.c ****   cinfo->main = &mainp->pub;
 307              		.loc 1 257 15 view .LVU82
 308 0023 488985F8 		movq	%rax, 504(%rbp)
 308      010000
 255:fltk-1.3.4-1/jpeg/jcmainct.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 309              		.loc 1 255 6 view .LVU83
 310 002a 4989C5   		movq	%rax, %r13
 311              	.LVL25:
 312              		.loc 1 257 3 is_stmt 1 view .LVU84
 258:fltk-1.3.4-1/jpeg/jcmainct.c ****   mainp->pub.start_pass = start_pass_main;
 313              		.loc 1 258 3 view .LVU85
 314              		.loc 1 258 25 is_stmt 0 view .LVU86
 315 002d 488D0500 		leaq	start_pass_main(%rip), %rax
 315      000000
 316              	.LVL26:
 317              		.loc 1 258 25 view .LVU87
 318 0034 49894500 		movq	%rax, 0(%r13)
 259:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 260:fltk-1.3.4-1/jpeg/jcmainct.c ****   /* We don't need to create a buffer in raw-data mode. */
 261:fltk-1.3.4-1/jpeg/jcmainct.c ****   if (cinfo->raw_data_in)
 319              		.loc 1 261 3 is_stmt 1 view .LVU88
 320              		.loc 1 261 6 is_stmt 0 view .LVU89
 321 0038 8B952001 		movl	288(%rbp), %edx
 321      0000
 322 003e 85D2     		testl	%edx, %edx
 323 0040 7546     		jne	.L18
 262:fltk-1.3.4-1/jpeg/jcmainct.c ****     return;
 263:fltk-1.3.4-1/jpeg/jcmainct.c **** 
 264:fltk-1.3.4-1/jpeg/jcmainct.c ****   /* Create the buffer.  It holds downsampled data, so each component
 265:fltk-1.3.4-1/jpeg/jcmainct.c ****    * may be of a different size.
 266:fltk-1.3.4-1/jpeg/jcmainct.c ****    */
 267:fltk-1.3.4-1/jpeg/jcmainct.c ****   if (need_full_buffer) {
 324              		.loc 1 267 3 is_stmt 1 view .LVU90
 325              		.loc 1 267 6 is_stmt 0 view .LVU91
 326 0042 85DB     		testl	%ebx, %ebx
 327 0044 7552     		jne	.L24
 268:fltk-1.3.4-1/jpeg/jcmainct.c **** #ifdef FULL_MAIN_BUFFER_SUPPORTED
 269:fltk-1.3.4-1/jpeg/jcmainct.c ****     /* Allocate a full-image virtual array for each component */
 270:fltk-1.3.4-1/jpeg/jcmainct.c ****     /* Note we pad the bottom to a multiple of the iMCU height */
 271:fltk-1.3.4-1/jpeg/jcmainct.c ****     for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 272:fltk-1.3.4-1/jpeg/jcmainct.c **** 	 ci++, compptr++) {
 273:fltk-1.3.4-1/jpeg/jcmainct.c ****       mainp->whole_image[ci] = (*cinfo->mem->request_virt_sarray)
 274:fltk-1.3.4-1/jpeg/jcmainct.c **** 	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
 275:fltk-1.3.4-1/jpeg/jcmainct.c **** 	 compptr->width_in_blocks * ((JDIMENSION) compptr->DCT_h_scaled_size),
 276:fltk-1.3.4-1/jpeg/jcmainct.c **** 	 ((JDIMENSION) jround_up((long) compptr->height_in_blocks,
 277:fltk-1.3.4-1/jpeg/jcmainct.c **** 				 (long) compptr->v_samp_factor)) *
 278:fltk-1.3.4-1/jpeg/jcmainct.c **** 	 ((JDIMENSION) cinfo->min_DCT_v_scaled_size),
 279:fltk-1.3.4-1/jpeg/jcmainct.c **** 	 (JDIMENSION) (compptr->v_samp_factor * compptr->DCT_v_scaled_size));
 280:fltk-1.3.4-1/jpeg/jcmainct.c ****     }
 281:fltk-1.3.4-1/jpeg/jcmainct.c **** #else
 282:fltk-1.3.4-1/jpeg/jcmainct.c ****     ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 283:fltk-1.3.4-1/jpeg/jcmainct.c **** #endif
 284:fltk-1.3.4-1/jpeg/jcmainct.c ****   } else {
 285:fltk-1.3.4-1/jpeg/jcmainct.c **** #ifdef FULL_MAIN_BUFFER_SUPPORTED
 286:fltk-1.3.4-1/jpeg/jcmainct.c ****     mainp->whole_image[0] = NULL; /* flag for no virtual arrays */
 287:fltk-1.3.4-1/jpeg/jcmainct.c **** #endif
 288:fltk-1.3.4-1/jpeg/jcmainct.c ****     /* Allocate a strip buffer for each component */
 289:fltk-1.3.4-1/jpeg/jcmainct.c ****     for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 328              		.loc 1 289 5 is_stmt 1 view .LVU92
 329              	.LVL27:
 330              		.loc 1 289 5 is_stmt 0 view .LVU93
 331 0046 8B455C   		movl	92(%rbp), %eax
 332              		.loc 1 289 26 view .LVU94
 333 0049 488B5D68 		movq	104(%rbp), %rbx
 334              	.LVL28:
 335              		.loc 1 289 46 is_stmt 1 view .LVU95
 336              		.loc 1 289 5 is_stmt 0 view .LVU96
 337 004d 85C0     		testl	%eax, %eax
 338 004f 7E37     		jle	.L18
 339 0051 4531E4   		xorl	%r12d, %r12d
 340              	.LVL29:
 341              		.p2align 4,,10
 342 0054 0F1F4000 		.p2align 3
 343              	.L21:
 290:fltk-1.3.4-1/jpeg/jcmainct.c **** 	 ci++, compptr++) {
 291:fltk-1.3.4-1/jpeg/jcmainct.c ****       mainp->buffer[ci] = (*cinfo->mem->alloc_sarray)
 344              		.loc 1 291 7 is_stmt 1 view .LVU97
 345              		.loc 1 291 28 is_stmt 0 view .LVU98
 346 0058 488B4508 		movq	8(%rbp), %rax
 292:fltk-1.3.4-1/jpeg/jcmainct.c **** 	((j_common_ptr) cinfo, JPOOL_IMAGE,
 293:fltk-1.3.4-1/jpeg/jcmainct.c **** 	 compptr->width_in_blocks * ((JDIMENSION) compptr->DCT_h_scaled_size),
 294:fltk-1.3.4-1/jpeg/jcmainct.c **** 	 (JDIMENSION) (compptr->v_samp_factor * compptr->DCT_v_scaled_size));
 347              		.loc 1 294 40 view .LVU99
 348 005c 8B4B0C   		movl	12(%rbx), %ecx
 291:fltk-1.3.4-1/jpeg/jcmainct.c **** 	((j_common_ptr) cinfo, JPOOL_IMAGE,
 349              		.loc 1 291 28 view .LVU100
 350 005f BE010000 		movl	$1, %esi
 350      00
 351 0064 4889EF   		movq	%rbp, %rdi
 352 0067 8B531C   		movl	28(%rbx), %edx
 353              		.loc 1 294 40 view .LVU101
 354 006a 0FAF4B28 		imull	40(%rbx), %ecx
 290:fltk-1.3.4-1/jpeg/jcmainct.c **** 	 ci++, compptr++) {
 355              		.loc 1 290 16 view .LVU102
 356 006e 4883C360 		addq	$96, %rbx
 357              	.LVL30:
 291:fltk-1.3.4-1/jpeg/jcmainct.c **** 	((j_common_ptr) cinfo, JPOOL_IMAGE,
 358              		.loc 1 291 28 view .LVU103
 359 0072 0FAF53C4 		imull	-60(%rbx), %edx
 360 0076 FF5010   		call	*16(%rax)
 361              	.LVL31:
 291:fltk-1.3.4-1/jpeg/jcmainct.c **** 	((j_common_ptr) cinfo, JPOOL_IMAGE,
 362              		.loc 1 291 25 view .LVU104
 363 0079 4B8944E5 		movq	%rax, 32(%r13,%r12,8)
 363      20
 290:fltk-1.3.4-1/jpeg/jcmainct.c **** 	 ci++, compptr++) {
 364              		.loc 1 290 3 is_stmt 1 view .LVU105
 365              	.LVL32:
 289:fltk-1.3.4-1/jpeg/jcmainct.c **** 	 ci++, compptr++) {
 366              		.loc 1 289 46 view .LVU106
 367 007e 4983C401 		addq	$1, %r12
 368              	.LVL33:
 289:fltk-1.3.4-1/jpeg/jcmainct.c **** 	 ci++, compptr++) {
 369              		.loc 1 289 5 is_stmt 0 view .LVU107
 370 0082 4439655C 		cmpl	%r12d, 92(%rbp)
 371 0086 7FD0     		jg	.L21
 372              	.LVL34:
 373              	.L18:
 295:fltk-1.3.4-1/jpeg/jcmainct.c ****     }
 296:fltk-1.3.4-1/jpeg/jcmainct.c ****   }
 297:fltk-1.3.4-1/jpeg/jcmainct.c **** }
 374              		.loc 1 297 1 view .LVU108
 375 0088 4883C408 		addq	$8, %rsp
 376              		.cfi_remember_state
 377              		.cfi_def_cfa_offset 40
 378 008c 5B       		popq	%rbx
 379              		.cfi_def_cfa_offset 32
 380 008d 5D       		popq	%rbp
 381              		.cfi_def_cfa_offset 24
 382              	.LVL35:
 383              		.loc 1 297 1 view .LVU109
 384 008e 415C     		popq	%r12
 385              		.cfi_def_cfa_offset 16
 386 0090 415D     		popq	%r13
 387              		.cfi_def_cfa_offset 8
 388              	.LVL36:
 389              		.loc 1 297 1 view .LVU110
 390 0092 C3       		ret
 391              	.LVL37:
 392              		.p2align 4,,10
 393 0093 0F1F4400 		.p2align 3
 393      00
 394              	.L24:
 395              		.cfi_restore_state
 282:fltk-1.3.4-1/jpeg/jcmainct.c **** #endif
 396              		.loc 1 282 5 is_stmt 1 view .LVU111
 397 0098 488B4500 		movq	0(%rbp), %rax
 398 009c 4889EF   		movq	%rbp, %rdi
 399 009f C7402803 		movl	$3, 40(%rax)
 399      000000
 400 00a6 488B4500 		movq	0(%rbp), %rax
 401 00aa 488B00   		movq	(%rax), %rax
 402              		.loc 1 297 1 is_stmt 0 view .LVU112
 403 00ad 4883C408 		addq	$8, %rsp
 404              		.cfi_def_cfa_offset 40
 405 00b1 5B       		popq	%rbx
 406              		.cfi_def_cfa_offset 32
 407              	.LVL38:
 408              		.loc 1 297 1 view .LVU113
 409 00b2 5D       		popq	%rbp
 410              		.cfi_def_cfa_offset 24
 411              	.LVL39:
 412              		.loc 1 297 1 view .LVU114
 413 00b3 415C     		popq	%r12
 414              		.cfi_def_cfa_offset 16
 415 00b5 415D     		popq	%r13
 416              		.cfi_def_cfa_offset 8
 417              	.LVL40:
 282:fltk-1.3.4-1/jpeg/jcmainct.c **** #endif
 418              		.loc 1 282 5 view .LVU115
 419 00b7 FFE0     		jmp	*%rax
 420              	.LVL41:
 282:fltk-1.3.4-1/jpeg/jcmainct.c **** #endif
 421              		.loc 1 282 5 view .LVU116
 422              		.cfi_endproc
 423              	.LFE53:
 425              		.text
 426              	.Letext0:
 427              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 428              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 429              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 430              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 431              		.file 6 "/usr/include/stdio.h"
 432              		.file 7 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 433              		.file 8 "fltk-1.3.4-1/jpeg/jmorecfg.h"
 434              		.file 9 "fltk-1.3.4-1/jpeg/jpeglib.h"
 435              		.file 10 "fltk-1.3.4-1/jpeg/jpegint.h"
 436              		.file 11 "fltk-1.3.4-1/jpeg/jerror.h"
 11718              		.section	.note.gnu.property,"a"
 11719              		.align 8
 11720 0000 04000000 		.long	 1f - 0f
 11721 0004 10000000 		.long	 4f - 1f
 11722 0008 05000000 		.long	 5
 11723              	0:
 11724 000c 474E5500 		.string	 "GNU"
 11725              	1:
 11726              		.align 8
 11727 0010 020000C0 		.long	 0xc0000002
 11728 0014 04000000 		.long	 3f - 2f
 11729              	2:
 11730 0018 03000000 		.long	 0x3
 11731              	3:
 11732 001c 00000000 		.align 8
 11733              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 jcmainct.c
     /tmp/ccscEIhq.s:7      .text.process_data_simple_main:0000000000000000 process_data_simple_main
     /tmp/ccscEIhq.s:200    .text.start_pass_main:0000000000000000 start_pass_main
     /tmp/ccscEIhq.s:268    .text.jinit_c_main_controller:0000000000000000 jinit_c_main_controller
                           .group:0000000000000000 wm4.0.a6b23a418548ac0bda5d8549c4a2ec91
                           .group:0000000000000000 wm4.stdcpredef.h.19.8dc41bed5d9037ff9622e015fb5f0ce3
                           .group:0000000000000000 wm4.jconfig.h.10.247fc3ff67998f3074970b1373c70333
                           .group:0000000000000000 wm4.features.h.19.5b5f5a19624a0527f479fdc52d54808f
                           .group:0000000000000000 wm4.cdefs.h.19.98d80eddbb3f64f4f30cd9aee9c5593c
                           .group:0000000000000000 wm4.wordsize.h.4.baf119258a1e53d8dba67ceac44ab6bc
                           .group:0000000000000000 wm4.cdefs.h.475.fb75d2e4416aa349344e6f45f683bf28
                           .group:0000000000000000 wm4.stubs64.h.10.6ce4c34010988db072c080326a6b6319
                           .group:0000000000000000 wm4.libcheaderstart.h.37.d9274df4cc0172452960ad9644fa5579
                           .group:0000000000000000 wm4.stdlib.h.28.2cffa49d94c5d85f4538f55f7b59771d
                           .group:0000000000000000 wm4.stddef.h.181.13772e73e5434e8cc4fafaaddad2b5da
                           .group:0000000000000000 wm4.waitflags.h.25.41934de4af99038521c2782f418699b1
                           .group:0000000000000000 wm4.waitstatus.h.28.93f167f49d64e2b9b99f98d1162a93bf
                           .group:0000000000000000 wm4.stdlib.h.43.9fa4f727a2f1cb8d2450a574c9195553
                           .group:0000000000000000 wm4.floatn.h.20.80c7cf8a8dfad237004b28d051d5afda
                           .group:0000000000000000 wm4.floatncommon.h.34.7e1840d7dfb19e9bdb51aeb077d76637
                           .group:0000000000000000 wm4.stdlib.h.71.2927e068ec678159b4f68ec2f089f7e6
                           .group:0000000000000000 wm4.types.h.109.56eb9ae966b255288cc544f18746a7ff
                           .group:0000000000000000 wm4.typesizes.h.24.2c64f817c0dc4b6fb2a2c619d717be26
                           .group:0000000000000000 wm4.time64.h.24.a8166ae916ec910dab0d8987098d42ee
                           .group:0000000000000000 wm4.types.h.40.18f72bab8242c2bb4c532a2aa95b5f00
                           .group:0000000000000000 wm4.stddef.h.231.0adce5c8c1fd8096aaff50981b3d1f0f
                           .group:0000000000000000 wm4.endian.h.20.efabd1018df5d7b4052c27dc6bdd5ce5
                           .group:0000000000000000 wm4.endianness.h.2.2c6a211f7909f3af5e9e9cfa3b6b63c8
                           .group:0000000000000000 wm4.endian.h.40.9e5d395adda2f4eb53ae69b69b664084
                           .group:0000000000000000 wm4.endian.h.27.4c4f94262c4eaee2982fe00ed1b4f173
                           .group:0000000000000000 wm4.byteswap.h.24.5363c019348146aada5aeadf51456576
                           .group:0000000000000000 wm4.endian.h.39.30a606dbd99b6c3df61c1f06dbdabd4e
                           .group:0000000000000000 wm4.select.h.28.eb2f3debdbcffd1442ebddaebc4fb6ff
                           .group:0000000000000000 wm4.__sigset_t.h.2.6b1ab6ff3d7b8fd9c0c42b0d80afbd80
                           .group:0000000000000000 wm4.select.h.44.887a4ff60aa97fcd9c1be017735e1675
                           .group:0000000000000000 wm4.select2.h.27.f95f2ab0ffee66dc1b6575014894b21a
                           .group:0000000000000000 wm4.types.h.186.489a4ed8f2d29cd358843490f54ddea5
                           .group:0000000000000000 wm4.pthreadtypesarch.h.25.6063cba99664c916e22d3a912bcc348a
                           .group:0000000000000000 wm4.struct_mutex.h.20.ed51f515172b9be99e450ba83eb5dd99
                           .group:0000000000000000 wm4.struct_rwlock.h.21.0254880f2904e3833fb8ae683e0f0330
                           .group:0000000000000000 wm4.alloca.h.19.edefa922a76c1cbaaf1e416903ba2d1c
                           .group:0000000000000000 wm4.alloca.h.29.156e12058824cc23d961c4d3b13031f6
                           .group:0000000000000000 wm4.stdio.h.24.5c1b97eef3c86b7a2549420f69f4f128
                           .group:0000000000000000 wm4.libcheaderstart.h.31.87b3c285aeba93fe355ad19123070832
                           .group:0000000000000000 wm4.stdio.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.stddef.h.231.8136eebbab3406dbf57a7ec475dd5d83
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.struct_FILE.h.19.0888ac70396abe1031c03d393554032f
                           .group:0000000000000000 wm4.stdio.h.53.139e45cf040c0964b2932c0c1bdaf6b2
                           .group:0000000000000000 wm4.stdio_lim.h.19.e4b00b560d878dcfbc6635b3406640c5
                           .group:0000000000000000 wm4.stdio.h.141.d7a290e19ca077c9e4aa7c43ede17a73
                           .group:0000000000000000 wm4.stdio.h.20.b0caa08e5723aa5941367be0e5d2ec59
                           .group:0000000000000000 wm4.stdio2.h.20.f45a0373b68e1296c4aa8cc09d66a9df
                           .group:0000000000000000 wm4.string.h.23.93403f89af7dba8212345449bb14b09d
                           .group:0000000000000000 wm4.string.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.strings.h.19.a259f126920b1bb5ef76bc62b3984a3c
                           .group:0000000000000000 wm4.jinclude.h.67.b19f941ec97c4845fa4609292c7e2db4
                           .group:0000000000000000 wm4.jmorecfg.h.33.3b4c5f9cc07b3737823b06caf24d5b05
                           .group:0000000000000000 wm4.jpeglib.h.40.4f111c27252a38df39328d65454e82f4
                           .group:0000000000000000 wm4.jpegint.h.26.5219ef5d4e4921371d38e77b6091fd20
                           .group:0000000000000000 wm4.jerror.h.25.1dbd8674e70ab5215bc0037320e5c2a2

NO UNDEFINED SYMBOLS
