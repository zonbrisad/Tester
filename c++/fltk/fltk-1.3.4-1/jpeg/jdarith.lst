   1              		.file	"jdarith.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.unlikely.get_byte,"ax",@progbits
   5              	.LCOLDB0:
   6              		.section	.text.get_byte,"ax",@progbits
   7              	.LHOTB0:
   8              		.p2align 4,,15
   9              		.section	.text.unlikely.get_byte
  10              	.Ltext_cold0:
  11              		.section	.text.get_byte
  13              	get_byte:
  14              	.LFB61:
  15              		.file 1 "fltk-1.3.4-1/jpeg/jdarith.c"
   1:fltk-1.3.4-1/jpeg/jdarith.c **** /*
   2:fltk-1.3.4-1/jpeg/jdarith.c ****  * jdarith.c
   3:fltk-1.3.4-1/jpeg/jdarith.c ****  *
   4:fltk-1.3.4-1/jpeg/jdarith.c ****  * Developed 1997-2013 by Guido Vollbeding.
   5:fltk-1.3.4-1/jpeg/jdarith.c ****  * This file is part of the Independent JPEG Group's software.
   6:fltk-1.3.4-1/jpeg/jdarith.c ****  * For conditions of distribution and use, see the accompanying README file.
   7:fltk-1.3.4-1/jpeg/jdarith.c ****  *
   8:fltk-1.3.4-1/jpeg/jdarith.c ****  * This file contains portable arithmetic entropy decoding routines for JPEG
   9:fltk-1.3.4-1/jpeg/jdarith.c ****  * (implementing the ISO/IEC IS 10918-1 and CCITT Recommendation ITU-T T.81).
  10:fltk-1.3.4-1/jpeg/jdarith.c ****  *
  11:fltk-1.3.4-1/jpeg/jdarith.c ****  * Both sequential and progressive modes are supported in this single module.
  12:fltk-1.3.4-1/jpeg/jdarith.c ****  *
  13:fltk-1.3.4-1/jpeg/jdarith.c ****  * Suspension is not currently supported in this module.
  14:fltk-1.3.4-1/jpeg/jdarith.c ****  */
  15:fltk-1.3.4-1/jpeg/jdarith.c **** 
  16:fltk-1.3.4-1/jpeg/jdarith.c **** #define JPEG_INTERNALS
  17:fltk-1.3.4-1/jpeg/jdarith.c **** #include "jinclude.h"
  18:fltk-1.3.4-1/jpeg/jdarith.c **** #include "jpeglib.h"
  19:fltk-1.3.4-1/jpeg/jdarith.c **** 
  20:fltk-1.3.4-1/jpeg/jdarith.c **** 
  21:fltk-1.3.4-1/jpeg/jdarith.c **** /* Expanded entropy decoder object for arithmetic decoding. */
  22:fltk-1.3.4-1/jpeg/jdarith.c **** 
  23:fltk-1.3.4-1/jpeg/jdarith.c **** typedef struct {
  24:fltk-1.3.4-1/jpeg/jdarith.c ****   struct jpeg_entropy_decoder pub; /* public fields */
  25:fltk-1.3.4-1/jpeg/jdarith.c **** 
  26:fltk-1.3.4-1/jpeg/jdarith.c ****   INT32 c;       /* C register, base of coding interval + input bit buffer */
  27:fltk-1.3.4-1/jpeg/jdarith.c ****   INT32 a;               /* A register, normalized size of coding interval */
  28:fltk-1.3.4-1/jpeg/jdarith.c ****   int ct;     /* bit shift counter, # of bits left in bit buffer part of C */
  29:fltk-1.3.4-1/jpeg/jdarith.c ****                                                          /* init: ct = -16 */
  30:fltk-1.3.4-1/jpeg/jdarith.c ****                                                          /* run: ct = 0..7 */
  31:fltk-1.3.4-1/jpeg/jdarith.c ****                                                          /* error: ct = -1 */
  32:fltk-1.3.4-1/jpeg/jdarith.c ****   int last_dc_val[MAX_COMPS_IN_SCAN]; /* last DC coef for each component */
  33:fltk-1.3.4-1/jpeg/jdarith.c ****   int dc_context[MAX_COMPS_IN_SCAN]; /* context index for DC conditioning */
  34:fltk-1.3.4-1/jpeg/jdarith.c **** 
  35:fltk-1.3.4-1/jpeg/jdarith.c ****   unsigned int restarts_to_go;	/* MCUs left in this restart interval */
  36:fltk-1.3.4-1/jpeg/jdarith.c **** 
  37:fltk-1.3.4-1/jpeg/jdarith.c ****   /* Pointers to statistics areas (these workspaces have image lifespan) */
  38:fltk-1.3.4-1/jpeg/jdarith.c ****   unsigned char * dc_stats[NUM_ARITH_TBLS];
  39:fltk-1.3.4-1/jpeg/jdarith.c ****   unsigned char * ac_stats[NUM_ARITH_TBLS];
  40:fltk-1.3.4-1/jpeg/jdarith.c **** 
  41:fltk-1.3.4-1/jpeg/jdarith.c ****   /* Statistics bin for coding with fixed probability 0.5 */
  42:fltk-1.3.4-1/jpeg/jdarith.c ****   unsigned char fixed_bin[4];
  43:fltk-1.3.4-1/jpeg/jdarith.c **** } arith_entropy_decoder;
  44:fltk-1.3.4-1/jpeg/jdarith.c **** 
  45:fltk-1.3.4-1/jpeg/jdarith.c **** typedef arith_entropy_decoder * arith_entropy_ptr;
  46:fltk-1.3.4-1/jpeg/jdarith.c **** 
  47:fltk-1.3.4-1/jpeg/jdarith.c **** /* The following two definitions specify the allocation chunk size
  48:fltk-1.3.4-1/jpeg/jdarith.c ****  * for the statistics area.
  49:fltk-1.3.4-1/jpeg/jdarith.c ****  * According to sections F.1.4.4.1.3 and F.1.4.4.2, we need at least
  50:fltk-1.3.4-1/jpeg/jdarith.c ****  * 49 statistics bins for DC, and 245 statistics bins for AC coding.
  51:fltk-1.3.4-1/jpeg/jdarith.c ****  *
  52:fltk-1.3.4-1/jpeg/jdarith.c ****  * We use a compact representation with 1 byte per statistics bin,
  53:fltk-1.3.4-1/jpeg/jdarith.c ****  * thus the numbers directly represent byte sizes.
  54:fltk-1.3.4-1/jpeg/jdarith.c ****  * This 1 byte per statistics bin contains the meaning of the MPS
  55:fltk-1.3.4-1/jpeg/jdarith.c ****  * (more probable symbol) in the highest bit (mask 0x80), and the
  56:fltk-1.3.4-1/jpeg/jdarith.c ****  * index into the probability estimation state machine table
  57:fltk-1.3.4-1/jpeg/jdarith.c ****  * in the lower bits (mask 0x7F).
  58:fltk-1.3.4-1/jpeg/jdarith.c ****  */
  59:fltk-1.3.4-1/jpeg/jdarith.c **** 
  60:fltk-1.3.4-1/jpeg/jdarith.c **** #define DC_STAT_BINS 64
  61:fltk-1.3.4-1/jpeg/jdarith.c **** #define AC_STAT_BINS 256
  62:fltk-1.3.4-1/jpeg/jdarith.c **** 
  63:fltk-1.3.4-1/jpeg/jdarith.c **** 
  64:fltk-1.3.4-1/jpeg/jdarith.c **** LOCAL(int)
  65:fltk-1.3.4-1/jpeg/jdarith.c **** get_byte (j_decompress_ptr cinfo)
  66:fltk-1.3.4-1/jpeg/jdarith.c **** /* Read next input byte; we do not support suspension in this module. */
  67:fltk-1.3.4-1/jpeg/jdarith.c **** {
  16              		.loc 1 67 0
  17              		.cfi_startproc
  18              	.LVL0:
  19 0000 55       		pushq	%rbp
  20              		.cfi_def_cfa_offset 16
  21              		.cfi_offset 6, -16
  22 0001 53       		pushq	%rbx
  23              		.cfi_def_cfa_offset 24
  24              		.cfi_offset 3, -24
  25 0002 4883EC08 		subq	$8, %rsp
  26              		.cfi_def_cfa_offset 32
  68:fltk-1.3.4-1/jpeg/jdarith.c ****   struct jpeg_source_mgr * src = cinfo->src;
  27              		.loc 1 68 0
  28 0006 488B5F28 		movq	40(%rdi), %rbx
  29              	.LVL1:
  69:fltk-1.3.4-1/jpeg/jdarith.c **** 
  70:fltk-1.3.4-1/jpeg/jdarith.c ****   if (src->bytes_in_buffer == 0)
  30              		.loc 1 70 0
  31 000a 488B4308 		movq	8(%rbx), %rax
  32 000e 4885C0   		testq	%rax, %rax
  33 0011 741D     		je	.L7
  34              	.LVL2:
  35              	.L2:
  71:fltk-1.3.4-1/jpeg/jdarith.c ****     if (! (*src->fill_input_buffer) (cinfo))
  72:fltk-1.3.4-1/jpeg/jdarith.c ****       ERREXIT(cinfo, JERR_CANT_SUSPEND);
  73:fltk-1.3.4-1/jpeg/jdarith.c ****   src->bytes_in_buffer--;
  36              		.loc 1 73 0
  37 0013 4883E801 		subq	$1, %rax
  38 0017 48894308 		movq	%rax, 8(%rbx)
  74:fltk-1.3.4-1/jpeg/jdarith.c ****   return GETJOCTET(*src->next_input_byte++);
  39              		.loc 1 74 0
  40 001b 488B03   		movq	(%rbx), %rax
  41 001e 488D5001 		leaq	1(%rax), %rdx
  42 0022 488913   		movq	%rdx, (%rbx)
  43 0025 0FB600   		movzbl	(%rax), %eax
  75:fltk-1.3.4-1/jpeg/jdarith.c **** }
  44              		.loc 1 75 0
  45 0028 4883C408 		addq	$8, %rsp
  46              		.cfi_remember_state
  47              		.cfi_def_cfa_offset 24
  48 002c 5B       		popq	%rbx
  49              		.cfi_def_cfa_offset 16
  50              	.LVL3:
  51 002d 5D       		popq	%rbp
  52              		.cfi_def_cfa_offset 8
  53 002e C3       		ret
  54              	.LVL4:
  55 002f 90       		.p2align 4,,10
  56              		.p2align 3
  57              	.L7:
  58              		.cfi_restore_state
  59 0030 4889FD   		movq	%rdi, %rbp
  71:fltk-1.3.4-1/jpeg/jdarith.c ****     if (! (*src->fill_input_buffer) (cinfo))
  60              		.loc 1 71 0
  61 0033 FF5318   		call	*24(%rbx)
  62              	.LVL5:
  63 0036 85C0     		testl	%eax, %eax
  64 0038 7514     		jne	.L5
  72:fltk-1.3.4-1/jpeg/jdarith.c ****   src->bytes_in_buffer--;
  65              		.loc 1 72 0
  66 003a 488B4500 		movq	0(%rbp), %rax
  67 003e 4889EF   		movq	%rbp, %rdi
  68 0041 C7402819 		movl	$25, 40(%rax)
  68      000000
  69 0048 488B4500 		movq	0(%rbp), %rax
  70 004c FF10     		call	*(%rax)
  71              	.LVL6:
  72              	.L5:
  73 004e 488B4308 		movq	8(%rbx), %rax
  74 0052 EBBF     		jmp	.L2
  75              		.cfi_endproc
  76              	.LFE61:
  78              		.section	.text.unlikely.get_byte
  79              	.LCOLDE0:
  80              		.section	.text.get_byte
  81              	.LHOTE0:
  82              		.section	.text.unlikely.arith_decode,"ax",@progbits
  83              	.LCOLDB1:
  84              		.section	.text.arith_decode,"ax",@progbits
  85              	.LHOTB1:
  86              		.p2align 4,,15
  88              	arith_decode:
  89              	.LFB62:
  76:fltk-1.3.4-1/jpeg/jdarith.c **** 
  77:fltk-1.3.4-1/jpeg/jdarith.c **** 
  78:fltk-1.3.4-1/jpeg/jdarith.c **** /*
  79:fltk-1.3.4-1/jpeg/jdarith.c ****  * The core arithmetic decoding routine (common in JPEG and JBIG).
  80:fltk-1.3.4-1/jpeg/jdarith.c ****  * This needs to go as fast as possible.
  81:fltk-1.3.4-1/jpeg/jdarith.c ****  * Machine-dependent optimization facilities
  82:fltk-1.3.4-1/jpeg/jdarith.c ****  * are not utilized in this portable implementation.
  83:fltk-1.3.4-1/jpeg/jdarith.c ****  * However, this code should be fairly efficient and
  84:fltk-1.3.4-1/jpeg/jdarith.c ****  * may be a good base for further optimizations anyway.
  85:fltk-1.3.4-1/jpeg/jdarith.c ****  *
  86:fltk-1.3.4-1/jpeg/jdarith.c ****  * Return value is 0 or 1 (binary decision).
  87:fltk-1.3.4-1/jpeg/jdarith.c ****  *
  88:fltk-1.3.4-1/jpeg/jdarith.c ****  * Note: I've changed the handling of the code base & bit
  89:fltk-1.3.4-1/jpeg/jdarith.c ****  * buffer register C compared to other implementations
  90:fltk-1.3.4-1/jpeg/jdarith.c ****  * based on the standards layout & procedures.
  91:fltk-1.3.4-1/jpeg/jdarith.c ****  * While it also contains both the actual base of the
  92:fltk-1.3.4-1/jpeg/jdarith.c ****  * coding interval (16 bits) and the next-bits buffer,
  93:fltk-1.3.4-1/jpeg/jdarith.c ****  * the cut-point between these two parts is floating
  94:fltk-1.3.4-1/jpeg/jdarith.c ****  * (instead of fixed) with the bit shift counter CT.
  95:fltk-1.3.4-1/jpeg/jdarith.c ****  * Thus, we also need only one (variable instead of
  96:fltk-1.3.4-1/jpeg/jdarith.c ****  * fixed size) shift for the LPS/MPS decision, and
  97:fltk-1.3.4-1/jpeg/jdarith.c ****  * we can get away with any renormalization update
  98:fltk-1.3.4-1/jpeg/jdarith.c ****  * of C (except for new data insertion, of course).
  99:fltk-1.3.4-1/jpeg/jdarith.c ****  *
 100:fltk-1.3.4-1/jpeg/jdarith.c ****  * I've also introduced a new scheme for accessing
 101:fltk-1.3.4-1/jpeg/jdarith.c ****  * the probability estimation state machine table,
 102:fltk-1.3.4-1/jpeg/jdarith.c ****  * derived from Markus Kuhn's JBIG implementation.
 103:fltk-1.3.4-1/jpeg/jdarith.c ****  */
 104:fltk-1.3.4-1/jpeg/jdarith.c **** 
 105:fltk-1.3.4-1/jpeg/jdarith.c **** LOCAL(int)
 106:fltk-1.3.4-1/jpeg/jdarith.c **** arith_decode (j_decompress_ptr cinfo, unsigned char *st)
 107:fltk-1.3.4-1/jpeg/jdarith.c **** {
  90              		.loc 1 107 0
  91              		.cfi_startproc
  92              	.LVL7:
  93 0000 4154     		pushq	%r12
  94              		.cfi_def_cfa_offset 16
  95              		.cfi_offset 12, -16
  96 0002 55       		pushq	%rbp
  97              		.cfi_def_cfa_offset 24
  98              		.cfi_offset 6, -24
  99 0003 4889F5   		movq	%rsi, %rbp
 100 0006 53       		pushq	%rbx
 101              		.cfi_def_cfa_offset 32
 102              		.cfi_offset 3, -32
 108:fltk-1.3.4-1/jpeg/jdarith.c ****   register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 103              		.loc 1 108 0
 104 0007 488B9F70 		movq	624(%rdi), %rbx
 104      020000
 105              	.LVL8:
 109:fltk-1.3.4-1/jpeg/jdarith.c ****   register unsigned char nl, nm;
 110:fltk-1.3.4-1/jpeg/jdarith.c ****   register INT32 qe, temp;
 111:fltk-1.3.4-1/jpeg/jdarith.c ****   register int sv, data;
 112:fltk-1.3.4-1/jpeg/jdarith.c **** 
 113:fltk-1.3.4-1/jpeg/jdarith.c ****   /* Renormalization & data input per section D.2.6 */
 114:fltk-1.3.4-1/jpeg/jdarith.c ****   while (e->a < 0x8000L) {
 106              		.loc 1 114 0
 107 000e 488B5320 		movq	32(%rbx), %rdx
 108 0012 4881FAFF 		cmpq	$32767, %rdx
 108      7F0000
 109 0019 0F8F9301 		jg	.L33
 109      0000
 110 001f 4989FC   		movq	%rdi, %r12
 111 0022 8B4B28   		movl	40(%rbx), %ecx
 112 0025 EB1E     		jmp	.L19
 113              	.LVL9:
 114 0027 660F1F84 		.p2align 4,,10
 114      00000000 
 114      00
 115              		.p2align 3
 116              	.L31:
 117 0030 488B4320 		movq	32(%rbx), %rax
 118 0034 488D1400 		leaq	(%rax,%rax), %rdx
 119 0038 4881FAFF 		cmpq	$32767, %rdx
 119      7F0000
 115:fltk-1.3.4-1/jpeg/jdarith.c ****     if (--e->ct < 0) {
 116:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Need to fetch next data byte */
 117:fltk-1.3.4-1/jpeg/jdarith.c ****       if (cinfo->unread_marker)
 118:fltk-1.3.4-1/jpeg/jdarith.c **** 	data = 0;		/* stuff zero data */
 119:fltk-1.3.4-1/jpeg/jdarith.c ****       else {
 120:fltk-1.3.4-1/jpeg/jdarith.c **** 	data = get_byte(cinfo);	/* read next input byte */
 121:fltk-1.3.4-1/jpeg/jdarith.c **** 	if (data == 0xFF) {	/* zero stuff or marker code */
 122:fltk-1.3.4-1/jpeg/jdarith.c **** 	  do data = get_byte(cinfo);
 123:fltk-1.3.4-1/jpeg/jdarith.c **** 	  while (data == 0xFF);	/* swallow extra 0xFF bytes */
 124:fltk-1.3.4-1/jpeg/jdarith.c **** 	  if (data == 0)
 125:fltk-1.3.4-1/jpeg/jdarith.c **** 	    data = 0xFF;	/* discard stuffed zero byte */
 126:fltk-1.3.4-1/jpeg/jdarith.c **** 	  else {
 127:fltk-1.3.4-1/jpeg/jdarith.c **** 	    /* Note: Different from the Huffman decoder, hitting
 128:fltk-1.3.4-1/jpeg/jdarith.c **** 	     * a marker while processing the compressed data
 129:fltk-1.3.4-1/jpeg/jdarith.c **** 	     * segment is legal in arithmetic coding.
 130:fltk-1.3.4-1/jpeg/jdarith.c **** 	     * The convention is to supply zero data
 131:fltk-1.3.4-1/jpeg/jdarith.c **** 	     * then until decoding is complete.
 132:fltk-1.3.4-1/jpeg/jdarith.c **** 	     */
 133:fltk-1.3.4-1/jpeg/jdarith.c **** 	    cinfo->unread_marker = data;
 134:fltk-1.3.4-1/jpeg/jdarith.c **** 	    data = 0;
 135:fltk-1.3.4-1/jpeg/jdarith.c **** 	  }
 136:fltk-1.3.4-1/jpeg/jdarith.c **** 	}
 137:fltk-1.3.4-1/jpeg/jdarith.c ****       }
 138:fltk-1.3.4-1/jpeg/jdarith.c ****       e->c = (e->c << 8) | data; /* insert data into C register */
 139:fltk-1.3.4-1/jpeg/jdarith.c ****       if ((e->ct += 8) < 0)	 /* update bit shift counter */
 140:fltk-1.3.4-1/jpeg/jdarith.c **** 	/* Need more initial bytes */
 141:fltk-1.3.4-1/jpeg/jdarith.c **** 	if (++e->ct == 0)
 142:fltk-1.3.4-1/jpeg/jdarith.c **** 	  /* Got 2 initial bytes -> re-init A and exit loop */
 143:fltk-1.3.4-1/jpeg/jdarith.c **** 	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 144:fltk-1.3.4-1/jpeg/jdarith.c ****     }
 145:fltk-1.3.4-1/jpeg/jdarith.c ****     e->a <<= 1;
 120              		.loc 1 145 0
 121 003f 48895320 		movq	%rdx, 32(%rbx)
 114:fltk-1.3.4-1/jpeg/jdarith.c ****     if (--e->ct < 0) {
 122              		.loc 1 114 0
 123 0043 7F53     		jg	.L10
 124              	.L19:
 115:fltk-1.3.4-1/jpeg/jdarith.c ****     if (--e->ct < 0) {
 125              		.loc 1 115 0
 126 0045 83E901   		subl	$1, %ecx
 127 0048 85C9     		testl	%ecx, %ecx
 128 004a 894B28   		movl	%ecx, 40(%rbx)
 129 004d 79E1     		jns	.L31
 117:fltk-1.3.4-1/jpeg/jdarith.c **** 	data = 0;		/* stuff zero data */
 130              		.loc 1 117 0
 131 004f 418B8424 		movl	572(%r12), %eax
 131      3C020000 
 132 0057 31D2     		xorl	%edx, %edx
 133 0059 85C0     		testl	%eax, %eax
 134 005b 0F849F00 		je	.L34
 134      0000
 135              	.L13:
 138:fltk-1.3.4-1/jpeg/jdarith.c ****       if ((e->ct += 8) < 0)	 /* update bit shift counter */
 136              		.loc 1 138 0
 137 0061 488B4318 		movq	24(%rbx), %rax
 138 0065 48C1E008 		salq	$8, %rax
 139 0069 4809C2   		orq	%rax, %rdx
 139:fltk-1.3.4-1/jpeg/jdarith.c **** 	/* Need more initial bytes */
 140              		.loc 1 139 0
 141 006c 8D4108   		leal	8(%rcx), %eax
 138:fltk-1.3.4-1/jpeg/jdarith.c ****       if ((e->ct += 8) < 0)	 /* update bit shift counter */
 142              		.loc 1 138 0
 143 006f 48895318 		movq	%rdx, 24(%rbx)
 139:fltk-1.3.4-1/jpeg/jdarith.c **** 	/* Need more initial bytes */
 144              		.loc 1 139 0
 145 0073 85C0     		testl	%eax, %eax
 146 0075 894328   		movl	%eax, 40(%rbx)
 147 0078 0F88C200 		js	.L16
 147      0000
 148 007e 488B7320 		movq	32(%rbx), %rsi
 149 0082 89C1     		movl	%eax, %ecx
 150 0084 488D1436 		leaq	(%rsi,%rsi), %rdx
 114:fltk-1.3.4-1/jpeg/jdarith.c ****     if (--e->ct < 0) {
 151              		.loc 1 114 0
 152 0088 4881FAFF 		cmpq	$32767, %rdx
 152      7F0000
 153              		.loc 1 145 0
 154 008f 48895320 		movq	%rdx, 32(%rbx)
 114:fltk-1.3.4-1/jpeg/jdarith.c ****     if (--e->ct < 0) {
 155              		.loc 1 114 0
 156 0093 7EB0     		jle	.L19
 157              	.LVL10:
 158              		.p2align 4,,10
 159 0095 0F1F00   		.p2align 3
 160              	.L10:
 146:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 147:fltk-1.3.4-1/jpeg/jdarith.c **** 
 148:fltk-1.3.4-1/jpeg/jdarith.c ****   /* Fetch values from our compact representation of Table D.3(D.2):
 149:fltk-1.3.4-1/jpeg/jdarith.c ****    * Qe values and probability estimation state machine
 150:fltk-1.3.4-1/jpeg/jdarith.c ****    */
 151:fltk-1.3.4-1/jpeg/jdarith.c ****   sv = *st;
 161              		.loc 1 151 0
 162 0098 0FB64500 		movzbl	0(%rbp), %eax
 163 009c 89C6     		movl	%eax, %esi
 164              	.LVL11:
 152:fltk-1.3.4-1/jpeg/jdarith.c ****   qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 165              		.loc 1 152 0
 166 009e 4889F7   		movq	%rsi, %rdi
 167 00a1 83E77F   		andl	$127, %edi
 168 00a4 488B3CFD 		movq	jpeg_aritab(,%rdi,8), %rdi
 168      00000000 
 169              	.LVL12:
 153:fltk-1.3.4-1/jpeg/jdarith.c ****   nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 154:fltk-1.3.4-1/jpeg/jdarith.c ****   nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 170              		.loc 1 154 0
 171 00ac 4989F8   		movq	%rdi, %r8
 153:fltk-1.3.4-1/jpeg/jdarith.c ****   nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 172              		.loc 1 153 0
 173 00af 4989FA   		movq	%rdi, %r10
 174              		.loc 1 154 0
 175 00b2 49C1F810 		sarq	$16, %r8
 153:fltk-1.3.4-1/jpeg/jdarith.c ****   nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 176              		.loc 1 153 0
 177 00b6 49C1FA08 		sarq	$8, %r10
 178              	.LVL13:
 155:fltk-1.3.4-1/jpeg/jdarith.c **** 
 156:fltk-1.3.4-1/jpeg/jdarith.c ****   /* Decode & estimation procedures per sections D.2.4 & D.2.5 */
 157:fltk-1.3.4-1/jpeg/jdarith.c ****   temp = e->a - qe;
 179              		.loc 1 157 0
 180 00ba 4C29C2   		subq	%r8, %rdx
 181              	.LVL14:
 158:fltk-1.3.4-1/jpeg/jdarith.c ****   e->a = temp;
 159:fltk-1.3.4-1/jpeg/jdarith.c ****   temp <<= e->ct;
 182              		.loc 1 159 0
 183 00bd 4989D1   		movq	%rdx, %r9
 158:fltk-1.3.4-1/jpeg/jdarith.c ****   e->a = temp;
 184              		.loc 1 158 0
 185 00c0 48895320 		movq	%rdx, 32(%rbx)
 186              		.loc 1 159 0
 187 00c4 49D3E1   		salq	%cl, %r9
 188              	.LVL15:
 160:fltk-1.3.4-1/jpeg/jdarith.c ****   if (e->c >= temp) {
 189              		.loc 1 160 0
 190 00c7 488B4B18 		movq	24(%rbx), %rcx
 191 00cb 4939C9   		cmpq	%rcx, %r9
 192 00ce 0F8F8C00 		jg	.L20
 192      0000
 161:fltk-1.3.4-1/jpeg/jdarith.c ****     e->c -= temp;
 193              		.loc 1 161 0
 194 00d4 4C29C9   		subq	%r9, %rcx
 162:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Conditional LPS (less probable symbol) exchange */
 163:fltk-1.3.4-1/jpeg/jdarith.c ****     if (e->a < qe) {
 195              		.loc 1 163 0
 196 00d7 4939D0   		cmpq	%rdx, %r8
 164:fltk-1.3.4-1/jpeg/jdarith.c ****       e->a = qe;
 197              		.loc 1 164 0
 198 00da 4C894320 		movq	%r8, 32(%rbx)
 161:fltk-1.3.4-1/jpeg/jdarith.c ****     e->c -= temp;
 199              		.loc 1 161 0
 200 00de 48894B18 		movq	%rcx, 24(%rbx)
 163:fltk-1.3.4-1/jpeg/jdarith.c ****       e->a = qe;
 201              		.loc 1 163 0
 202 00e2 0F8E9800 		jle	.L32
 202      0000
 165:fltk-1.3.4-1/jpeg/jdarith.c ****       *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 203              		.loc 1 165 0
 204 00e8 83E680   		andl	$-128, %esi
 205 00eb 4131F2   		xorl	%esi, %r10d
 206              	.LVL16:
 207 00ee 44885500 		movb	%r10b, 0(%rbp)
 208              	.L22:
 166:fltk-1.3.4-1/jpeg/jdarith.c ****     } else {
 167:fltk-1.3.4-1/jpeg/jdarith.c ****       e->a = qe;
 168:fltk-1.3.4-1/jpeg/jdarith.c ****       *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 169:fltk-1.3.4-1/jpeg/jdarith.c ****       sv ^= 0x80;		/* Exchange LPS/MPS */
 170:fltk-1.3.4-1/jpeg/jdarith.c ****     }
 171:fltk-1.3.4-1/jpeg/jdarith.c ****   } else if (e->a < 0x8000L) {
 172:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Conditional MPS (more probable symbol) exchange */
 173:fltk-1.3.4-1/jpeg/jdarith.c ****     if (e->a < qe) {
 174:fltk-1.3.4-1/jpeg/jdarith.c ****       *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 175:fltk-1.3.4-1/jpeg/jdarith.c ****       sv ^= 0x80;		/* Exchange LPS/MPS */
 176:fltk-1.3.4-1/jpeg/jdarith.c ****     } else {
 177:fltk-1.3.4-1/jpeg/jdarith.c ****       *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 178:fltk-1.3.4-1/jpeg/jdarith.c ****     }
 179:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 180:fltk-1.3.4-1/jpeg/jdarith.c **** 
 181:fltk-1.3.4-1/jpeg/jdarith.c ****   return sv >> 7;
 182:fltk-1.3.4-1/jpeg/jdarith.c **** }
 209              		.loc 1 182 0
 210 00f2 5B       		popq	%rbx
 211              		.cfi_remember_state
 212              		.cfi_def_cfa_offset 24
 213              	.LVL17:
 181:fltk-1.3.4-1/jpeg/jdarith.c **** }
 214              		.loc 1 181 0
 215 00f3 C1F807   		sarl	$7, %eax
 216              	.LVL18:
 217              		.loc 1 182 0
 218 00f6 5D       		popq	%rbp
 219              		.cfi_def_cfa_offset 16
 220              	.LVL19:
 221 00f7 415C     		popq	%r12
 222              		.cfi_def_cfa_offset 8
 223 00f9 C3       		ret
 224              	.LVL20:
 225 00fa 660F1F44 		.p2align 4,,10
 225      0000
 226              		.p2align 3
 227              	.L34:
 228              		.cfi_restore_state
 120:fltk-1.3.4-1/jpeg/jdarith.c **** 	if (data == 0xFF) {	/* zero stuff or marker code */
 229              		.loc 1 120 0
 230 0100 4C89E7   		movq	%r12, %rdi
 231 0103 E8000000 		call	get_byte
 231      00
 232              	.LVL21:
 121:fltk-1.3.4-1/jpeg/jdarith.c **** 	  do data = get_byte(cinfo);
 233              		.loc 1 121 0
 234 0108 3DFF0000 		cmpl	$255, %eax
 234      00
 235 010d 7411     		je	.L14
 236 010f 4863D0   		movslq	%eax, %rdx
 237 0112 8B4B28   		movl	40(%rbx), %ecx
 238 0115 E947FFFF 		jmp	.L13
 238      FF
 239 011a 660F1F44 		.p2align 4,,10
 239      0000
 240              		.p2align 3
 241              	.L14:
 122:fltk-1.3.4-1/jpeg/jdarith.c **** 	  while (data == 0xFF);	/* swallow extra 0xFF bytes */
 242              		.loc 1 122 0 discriminator 1
 243 0120 4C89E7   		movq	%r12, %rdi
 244 0123 E8000000 		call	get_byte
 244      00
 245              	.LVL22:
 123:fltk-1.3.4-1/jpeg/jdarith.c **** 	  if (data == 0)
 246              		.loc 1 123 0 discriminator 1
 247 0128 3DFF0000 		cmpl	$255, %eax
 247      00
 248 012d 74F1     		je	.L14
 124:fltk-1.3.4-1/jpeg/jdarith.c **** 	    data = 0xFF;	/* discard stuffed zero byte */
 249              		.loc 1 124 0
 250 012f 85C0     		testl	%eax, %eax
 251 0131 756D     		jne	.L15
 252 0133 8B4B28   		movl	40(%rbx), %ecx
 253 0136 BAFF0000 		movl	$255, %edx
 253      00
 254 013b E921FFFF 		jmp	.L13
 254      FF
 255              	.LVL23:
 256              		.p2align 4,,10
 257              		.p2align 3
 258              	.L16:
 141:fltk-1.3.4-1/jpeg/jdarith.c **** 	  /* Got 2 initial bytes -> re-init A and exit loop */
 259              		.loc 1 141 0
 260 0140 83C109   		addl	$9, %ecx
 261 0143 85C9     		testl	%ecx, %ecx
 262 0145 894B28   		movl	%ecx, 40(%rbx)
 263 0148 0F85E2FE 		jne	.L31
 263      FFFF
 145:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 264              		.loc 1 145 0
 265 014e 48C74320 		movq	$65536, 32(%rbx)
 265      00000100 
 266 0156 BA000001 		movl	$65536, %edx
 266      00
 267 015b E938FFFF 		jmp	.L10
 267      FF
 268              	.LVL24:
 269              		.p2align 4,,10
 270              		.p2align 3
 271              	.L20:
 171:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Conditional MPS (more probable symbol) exchange */
 272              		.loc 1 171 0
 273 0160 4881FAFF 		cmpq	$32767, %rdx
 273      7F0000
 274 0167 7F89     		jg	.L22
 173:fltk-1.3.4-1/jpeg/jdarith.c ****       *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 275              		.loc 1 173 0
 276 0169 4939D0   		cmpq	%rdx, %r8
 277 016c 7F12     		jg	.L32
 177:fltk-1.3.4-1/jpeg/jdarith.c ****     }
 278              		.loc 1 177 0
 279 016e 83E680   		andl	$-128, %esi
 181:fltk-1.3.4-1/jpeg/jdarith.c **** }
 280              		.loc 1 181 0
 281 0171 C1F807   		sarl	$7, %eax
 282              	.LVL25:
 177:fltk-1.3.4-1/jpeg/jdarith.c ****     }
 283              		.loc 1 177 0
 284 0174 4431D6   		xorl	%r10d, %esi
 285 0177 40887500 		movb	%sil, 0(%rbp)
 286              		.loc 1 182 0
 287 017b 5B       		popq	%rbx
 288              		.cfi_remember_state
 289              		.cfi_def_cfa_offset 24
 290              	.LVL26:
 291 017c 5D       		popq	%rbp
 292              		.cfi_def_cfa_offset 16
 293              	.LVL27:
 294 017d 415C     		popq	%r12
 295              		.cfi_def_cfa_offset 8
 296 017f C3       		ret
 297              	.LVL28:
 298              		.p2align 4,,10
 299              		.p2align 3
 300              	.L32:
 301              		.cfi_restore_state
 174:fltk-1.3.4-1/jpeg/jdarith.c ****       sv ^= 0x80;		/* Exchange LPS/MPS */
 302              		.loc 1 174 0
 303 0180 89F0     		movl	%esi, %eax
 304              	.LVL29:
 305 0182 83E080   		andl	$-128, %eax
 306 0185 31C7     		xorl	%eax, %edi
 307              	.LVL30:
 175:fltk-1.3.4-1/jpeg/jdarith.c ****     } else {
 308              		.loc 1 175 0
 309 0187 8D4680   		leal	-128(%rsi), %eax
 174:fltk-1.3.4-1/jpeg/jdarith.c ****       sv ^= 0x80;		/* Exchange LPS/MPS */
 310              		.loc 1 174 0
 311 018a 40887D00 		movb	%dil, 0(%rbp)
 175:fltk-1.3.4-1/jpeg/jdarith.c ****     } else {
 312              		.loc 1 175 0
 313 018e 0FB6C0   		movzbl	%al, %eax
 314              	.LVL31:
 315              		.loc 1 182 0
 316 0191 5B       		popq	%rbx
 317              		.cfi_remember_state
 318              		.cfi_def_cfa_offset 24
 319              	.LVL32:
 181:fltk-1.3.4-1/jpeg/jdarith.c **** }
 320              		.loc 1 181 0
 321 0192 C1F807   		sarl	$7, %eax
 322              	.LVL33:
 323              		.loc 1 182 0
 324 0195 5D       		popq	%rbp
 325              		.cfi_def_cfa_offset 16
 326              	.LVL34:
 327 0196 415C     		popq	%r12
 328              		.cfi_def_cfa_offset 8
 329 0198 C3       		ret
 330              	.LVL35:
 331 0199 0F1F8000 		.p2align 4,,10
 331      000000
 332              		.p2align 3
 333              	.L15:
 334              		.cfi_restore_state
 133:fltk-1.3.4-1/jpeg/jdarith.c **** 	    data = 0;
 335              		.loc 1 133 0
 336 01a0 41898424 		movl	%eax, 572(%r12)
 336      3C020000 
 337              	.LVL36:
 338 01a8 31D2     		xorl	%edx, %edx
 339 01aa 8B4B28   		movl	40(%rbx), %ecx
 340 01ad E9AFFEFF 		jmp	.L13
 340      FF
 341              	.LVL37:
 342              	.L33:
 343 01b2 8B4B28   		movl	40(%rbx), %ecx
 344 01b5 E9DEFEFF 		jmp	.L10
 344      FF
 345              		.cfi_endproc
 346              	.LFE62:
 348              		.section	.text.unlikely.arith_decode
 349              	.LCOLDE1:
 350              		.section	.text.arith_decode
 351              	.LHOTE1:
 352              		.section	.text.unlikely.finish_pass,"ax",@progbits
 353              	.LCOLDB2:
 354              		.section	.text.finish_pass,"ax",@progbits
 355              	.LHOTB2:
 356              		.p2align 4,,15
 358              	finish_pass:
 359              	.LFB70:
 183:fltk-1.3.4-1/jpeg/jdarith.c **** 
 184:fltk-1.3.4-1/jpeg/jdarith.c **** 
 185:fltk-1.3.4-1/jpeg/jdarith.c **** /*
 186:fltk-1.3.4-1/jpeg/jdarith.c ****  * Check for a restart marker & resynchronize decoder.
 187:fltk-1.3.4-1/jpeg/jdarith.c ****  */
 188:fltk-1.3.4-1/jpeg/jdarith.c **** 
 189:fltk-1.3.4-1/jpeg/jdarith.c **** LOCAL(void)
 190:fltk-1.3.4-1/jpeg/jdarith.c **** process_restart (j_decompress_ptr cinfo)
 191:fltk-1.3.4-1/jpeg/jdarith.c **** {
 192:fltk-1.3.4-1/jpeg/jdarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 193:fltk-1.3.4-1/jpeg/jdarith.c ****   int ci;
 194:fltk-1.3.4-1/jpeg/jdarith.c ****   jpeg_component_info * compptr;
 195:fltk-1.3.4-1/jpeg/jdarith.c **** 
 196:fltk-1.3.4-1/jpeg/jdarith.c ****   /* Advance past the RSTn marker */
 197:fltk-1.3.4-1/jpeg/jdarith.c ****   if (! (*cinfo->marker->read_restart_marker) (cinfo))
 198:fltk-1.3.4-1/jpeg/jdarith.c ****     ERREXIT(cinfo, JERR_CANT_SUSPEND);
 199:fltk-1.3.4-1/jpeg/jdarith.c **** 
 200:fltk-1.3.4-1/jpeg/jdarith.c ****   /* Re-initialize statistics areas */
 201:fltk-1.3.4-1/jpeg/jdarith.c ****   for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 202:fltk-1.3.4-1/jpeg/jdarith.c ****     compptr = cinfo->cur_comp_info[ci];
 203:fltk-1.3.4-1/jpeg/jdarith.c ****     if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 204:fltk-1.3.4-1/jpeg/jdarith.c ****       MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 205:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Reset DC predictions to 0 */
 206:fltk-1.3.4-1/jpeg/jdarith.c ****       entropy->last_dc_val[ci] = 0;
 207:fltk-1.3.4-1/jpeg/jdarith.c ****       entropy->dc_context[ci] = 0;
 208:fltk-1.3.4-1/jpeg/jdarith.c ****     }
 209:fltk-1.3.4-1/jpeg/jdarith.c ****     if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 210:fltk-1.3.4-1/jpeg/jdarith.c **** 	(cinfo->progressive_mode && cinfo->Ss)) {
 211:fltk-1.3.4-1/jpeg/jdarith.c ****       MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 212:fltk-1.3.4-1/jpeg/jdarith.c ****     }
 213:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 214:fltk-1.3.4-1/jpeg/jdarith.c **** 
 215:fltk-1.3.4-1/jpeg/jdarith.c ****   /* Reset arithmetic decoding variables */
 216:fltk-1.3.4-1/jpeg/jdarith.c ****   entropy->c = 0;
 217:fltk-1.3.4-1/jpeg/jdarith.c ****   entropy->a = 0;
 218:fltk-1.3.4-1/jpeg/jdarith.c ****   entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 219:fltk-1.3.4-1/jpeg/jdarith.c **** 
 220:fltk-1.3.4-1/jpeg/jdarith.c ****   /* Reset restart counter */
 221:fltk-1.3.4-1/jpeg/jdarith.c ****   entropy->restarts_to_go = cinfo->restart_interval;
 222:fltk-1.3.4-1/jpeg/jdarith.c **** }
 223:fltk-1.3.4-1/jpeg/jdarith.c **** 
 224:fltk-1.3.4-1/jpeg/jdarith.c **** 
 225:fltk-1.3.4-1/jpeg/jdarith.c **** /*
 226:fltk-1.3.4-1/jpeg/jdarith.c ****  * Arithmetic MCU decoding.
 227:fltk-1.3.4-1/jpeg/jdarith.c ****  * Each of these routines decodes and returns one MCU's worth of
 228:fltk-1.3.4-1/jpeg/jdarith.c ****  * arithmetic-compressed coefficients.
 229:fltk-1.3.4-1/jpeg/jdarith.c ****  * The coefficients are reordered from zigzag order into natural array order,
 230:fltk-1.3.4-1/jpeg/jdarith.c ****  * but are not dequantized.
 231:fltk-1.3.4-1/jpeg/jdarith.c ****  *
 232:fltk-1.3.4-1/jpeg/jdarith.c ****  * The i'th block of the MCU is stored into the block pointed to by
 233:fltk-1.3.4-1/jpeg/jdarith.c ****  * MCU_data[i].  WE ASSUME THIS AREA IS INITIALLY ZEROED BY THE CALLER.
 234:fltk-1.3.4-1/jpeg/jdarith.c ****  */
 235:fltk-1.3.4-1/jpeg/jdarith.c **** 
 236:fltk-1.3.4-1/jpeg/jdarith.c **** /*
 237:fltk-1.3.4-1/jpeg/jdarith.c ****  * MCU decoding for DC initial scan (either spectral selection,
 238:fltk-1.3.4-1/jpeg/jdarith.c ****  * or first pass of successive approximation).
 239:fltk-1.3.4-1/jpeg/jdarith.c ****  */
 240:fltk-1.3.4-1/jpeg/jdarith.c **** 
 241:fltk-1.3.4-1/jpeg/jdarith.c **** METHODDEF(boolean)
 242:fltk-1.3.4-1/jpeg/jdarith.c **** decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
 243:fltk-1.3.4-1/jpeg/jdarith.c **** {
 244:fltk-1.3.4-1/jpeg/jdarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 245:fltk-1.3.4-1/jpeg/jdarith.c ****   JBLOCKROW block;
 246:fltk-1.3.4-1/jpeg/jdarith.c ****   unsigned char *st;
 247:fltk-1.3.4-1/jpeg/jdarith.c ****   int blkn, ci, tbl, sign;
 248:fltk-1.3.4-1/jpeg/jdarith.c ****   int v, m;
 249:fltk-1.3.4-1/jpeg/jdarith.c **** 
 250:fltk-1.3.4-1/jpeg/jdarith.c ****   /* Process restart marker if needed */
 251:fltk-1.3.4-1/jpeg/jdarith.c ****   if (cinfo->restart_interval) {
 252:fltk-1.3.4-1/jpeg/jdarith.c ****     if (entropy->restarts_to_go == 0)
 253:fltk-1.3.4-1/jpeg/jdarith.c ****       process_restart(cinfo);
 254:fltk-1.3.4-1/jpeg/jdarith.c ****     entropy->restarts_to_go--;
 255:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 256:fltk-1.3.4-1/jpeg/jdarith.c **** 
 257:fltk-1.3.4-1/jpeg/jdarith.c ****   if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 258:fltk-1.3.4-1/jpeg/jdarith.c **** 
 259:fltk-1.3.4-1/jpeg/jdarith.c ****   /* Outer loop handles each block in the MCU */
 260:fltk-1.3.4-1/jpeg/jdarith.c **** 
 261:fltk-1.3.4-1/jpeg/jdarith.c ****   for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 262:fltk-1.3.4-1/jpeg/jdarith.c ****     block = MCU_data[blkn];
 263:fltk-1.3.4-1/jpeg/jdarith.c ****     ci = cinfo->MCU_membership[blkn];
 264:fltk-1.3.4-1/jpeg/jdarith.c ****     tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 265:fltk-1.3.4-1/jpeg/jdarith.c **** 
 266:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Sections F.2.4.1 & F.1.4.4.1: Decoding of DC coefficients */
 267:fltk-1.3.4-1/jpeg/jdarith.c **** 
 268:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Table F.4: Point to statistics bin S0 for DC coefficient coding */
 269:fltk-1.3.4-1/jpeg/jdarith.c ****     st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 270:fltk-1.3.4-1/jpeg/jdarith.c **** 
 271:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Figure F.19: Decode_DC_DIFF */
 272:fltk-1.3.4-1/jpeg/jdarith.c ****     if (arith_decode(cinfo, st) == 0)
 273:fltk-1.3.4-1/jpeg/jdarith.c ****       entropy->dc_context[ci] = 0;
 274:fltk-1.3.4-1/jpeg/jdarith.c ****     else {
 275:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Figure F.21: Decoding nonzero value v */
 276:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Figure F.22: Decoding the sign of v */
 277:fltk-1.3.4-1/jpeg/jdarith.c ****       sign = arith_decode(cinfo, st + 1);
 278:fltk-1.3.4-1/jpeg/jdarith.c ****       st += 2; st += sign;
 279:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Figure F.23: Decoding the magnitude category of v */
 280:fltk-1.3.4-1/jpeg/jdarith.c ****       if ((m = arith_decode(cinfo, st)) != 0) {
 281:fltk-1.3.4-1/jpeg/jdarith.c **** 	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 282:fltk-1.3.4-1/jpeg/jdarith.c **** 	while (arith_decode(cinfo, st)) {
 283:fltk-1.3.4-1/jpeg/jdarith.c **** 	  if ((m <<= 1) == 0x8000) {
 284:fltk-1.3.4-1/jpeg/jdarith.c **** 	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 285:fltk-1.3.4-1/jpeg/jdarith.c **** 	    entropy->ct = -1;			/* magnitude overflow */
 286:fltk-1.3.4-1/jpeg/jdarith.c **** 	    return TRUE;
 287:fltk-1.3.4-1/jpeg/jdarith.c **** 	  }
 288:fltk-1.3.4-1/jpeg/jdarith.c **** 	  st += 1;
 289:fltk-1.3.4-1/jpeg/jdarith.c **** 	}
 290:fltk-1.3.4-1/jpeg/jdarith.c ****       }
 291:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Section F.1.4.4.1.2: Establish dc_context conditioning category */
 292:fltk-1.3.4-1/jpeg/jdarith.c ****       if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 293:fltk-1.3.4-1/jpeg/jdarith.c **** 	entropy->dc_context[ci] = 0;		   /* zero diff category */
 294:fltk-1.3.4-1/jpeg/jdarith.c ****       else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 295:fltk-1.3.4-1/jpeg/jdarith.c **** 	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 296:fltk-1.3.4-1/jpeg/jdarith.c ****       else
 297:fltk-1.3.4-1/jpeg/jdarith.c **** 	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 298:fltk-1.3.4-1/jpeg/jdarith.c ****       v = m;
 299:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Figure F.24: Decoding the magnitude bit pattern of v */
 300:fltk-1.3.4-1/jpeg/jdarith.c ****       st += 14;
 301:fltk-1.3.4-1/jpeg/jdarith.c ****       while (m >>= 1)
 302:fltk-1.3.4-1/jpeg/jdarith.c **** 	if (arith_decode(cinfo, st)) v |= m;
 303:fltk-1.3.4-1/jpeg/jdarith.c ****       v += 1; if (sign) v = -v;
 304:fltk-1.3.4-1/jpeg/jdarith.c ****       entropy->last_dc_val[ci] += v;
 305:fltk-1.3.4-1/jpeg/jdarith.c ****     }
 306:fltk-1.3.4-1/jpeg/jdarith.c **** 
 307:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Scale and output the DC coefficient (assumes jpeg_natural_order[0]=0) */
 308:fltk-1.3.4-1/jpeg/jdarith.c ****     (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 309:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 310:fltk-1.3.4-1/jpeg/jdarith.c **** 
 311:fltk-1.3.4-1/jpeg/jdarith.c ****   return TRUE;
 312:fltk-1.3.4-1/jpeg/jdarith.c **** }
 313:fltk-1.3.4-1/jpeg/jdarith.c **** 
 314:fltk-1.3.4-1/jpeg/jdarith.c **** 
 315:fltk-1.3.4-1/jpeg/jdarith.c **** /*
 316:fltk-1.3.4-1/jpeg/jdarith.c ****  * MCU decoding for AC initial scan (either spectral selection,
 317:fltk-1.3.4-1/jpeg/jdarith.c ****  * or first pass of successive approximation).
 318:fltk-1.3.4-1/jpeg/jdarith.c ****  */
 319:fltk-1.3.4-1/jpeg/jdarith.c **** 
 320:fltk-1.3.4-1/jpeg/jdarith.c **** METHODDEF(boolean)
 321:fltk-1.3.4-1/jpeg/jdarith.c **** decode_mcu_AC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
 322:fltk-1.3.4-1/jpeg/jdarith.c **** {
 323:fltk-1.3.4-1/jpeg/jdarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 324:fltk-1.3.4-1/jpeg/jdarith.c ****   JBLOCKROW block;
 325:fltk-1.3.4-1/jpeg/jdarith.c ****   unsigned char *st;
 326:fltk-1.3.4-1/jpeg/jdarith.c ****   int tbl, sign, k;
 327:fltk-1.3.4-1/jpeg/jdarith.c ****   int v, m;
 328:fltk-1.3.4-1/jpeg/jdarith.c ****   const int * natural_order;
 329:fltk-1.3.4-1/jpeg/jdarith.c **** 
 330:fltk-1.3.4-1/jpeg/jdarith.c ****   /* Process restart marker if needed */
 331:fltk-1.3.4-1/jpeg/jdarith.c ****   if (cinfo->restart_interval) {
 332:fltk-1.3.4-1/jpeg/jdarith.c ****     if (entropy->restarts_to_go == 0)
 333:fltk-1.3.4-1/jpeg/jdarith.c ****       process_restart(cinfo);
 334:fltk-1.3.4-1/jpeg/jdarith.c ****     entropy->restarts_to_go--;
 335:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 336:fltk-1.3.4-1/jpeg/jdarith.c **** 
 337:fltk-1.3.4-1/jpeg/jdarith.c ****   if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 338:fltk-1.3.4-1/jpeg/jdarith.c **** 
 339:fltk-1.3.4-1/jpeg/jdarith.c ****   natural_order = cinfo->natural_order;
 340:fltk-1.3.4-1/jpeg/jdarith.c **** 
 341:fltk-1.3.4-1/jpeg/jdarith.c ****   /* There is always only one block per MCU */
 342:fltk-1.3.4-1/jpeg/jdarith.c ****   block = MCU_data[0];
 343:fltk-1.3.4-1/jpeg/jdarith.c ****   tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 344:fltk-1.3.4-1/jpeg/jdarith.c **** 
 345:fltk-1.3.4-1/jpeg/jdarith.c ****   /* Sections F.2.4.2 & F.1.4.4.2: Decoding of AC coefficients */
 346:fltk-1.3.4-1/jpeg/jdarith.c **** 
 347:fltk-1.3.4-1/jpeg/jdarith.c ****   /* Figure F.20: Decode_AC_coefficients */
 348:fltk-1.3.4-1/jpeg/jdarith.c ****   k = cinfo->Ss - 1;
 349:fltk-1.3.4-1/jpeg/jdarith.c ****   do {
 350:fltk-1.3.4-1/jpeg/jdarith.c ****     st = entropy->ac_stats[tbl] + 3 * k;
 351:fltk-1.3.4-1/jpeg/jdarith.c ****     if (arith_decode(cinfo, st)) break;		/* EOB flag */
 352:fltk-1.3.4-1/jpeg/jdarith.c ****     for (;;) {
 353:fltk-1.3.4-1/jpeg/jdarith.c ****       k++;
 354:fltk-1.3.4-1/jpeg/jdarith.c ****       if (arith_decode(cinfo, st + 1)) break;
 355:fltk-1.3.4-1/jpeg/jdarith.c ****       st += 3;
 356:fltk-1.3.4-1/jpeg/jdarith.c ****       if (k >= cinfo->Se) {
 357:fltk-1.3.4-1/jpeg/jdarith.c **** 	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 358:fltk-1.3.4-1/jpeg/jdarith.c **** 	entropy->ct = -1;			/* spectral overflow */
 359:fltk-1.3.4-1/jpeg/jdarith.c **** 	return TRUE;
 360:fltk-1.3.4-1/jpeg/jdarith.c ****       }
 361:fltk-1.3.4-1/jpeg/jdarith.c ****     }
 362:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Figure F.21: Decoding nonzero value v */
 363:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Figure F.22: Decoding the sign of v */
 364:fltk-1.3.4-1/jpeg/jdarith.c ****     sign = arith_decode(cinfo, entropy->fixed_bin);
 365:fltk-1.3.4-1/jpeg/jdarith.c ****     st += 2;
 366:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Figure F.23: Decoding the magnitude category of v */
 367:fltk-1.3.4-1/jpeg/jdarith.c ****     if ((m = arith_decode(cinfo, st)) != 0) {
 368:fltk-1.3.4-1/jpeg/jdarith.c ****       if (arith_decode(cinfo, st)) {
 369:fltk-1.3.4-1/jpeg/jdarith.c **** 	m <<= 1;
 370:fltk-1.3.4-1/jpeg/jdarith.c **** 	st = entropy->ac_stats[tbl] +
 371:fltk-1.3.4-1/jpeg/jdarith.c **** 	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 372:fltk-1.3.4-1/jpeg/jdarith.c **** 	while (arith_decode(cinfo, st)) {
 373:fltk-1.3.4-1/jpeg/jdarith.c **** 	  if ((m <<= 1) == 0x8000) {
 374:fltk-1.3.4-1/jpeg/jdarith.c **** 	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 375:fltk-1.3.4-1/jpeg/jdarith.c **** 	    entropy->ct = -1;			/* magnitude overflow */
 376:fltk-1.3.4-1/jpeg/jdarith.c **** 	    return TRUE;
 377:fltk-1.3.4-1/jpeg/jdarith.c **** 	  }
 378:fltk-1.3.4-1/jpeg/jdarith.c **** 	  st += 1;
 379:fltk-1.3.4-1/jpeg/jdarith.c **** 	}
 380:fltk-1.3.4-1/jpeg/jdarith.c ****       }
 381:fltk-1.3.4-1/jpeg/jdarith.c ****     }
 382:fltk-1.3.4-1/jpeg/jdarith.c ****     v = m;
 383:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Figure F.24: Decoding the magnitude bit pattern of v */
 384:fltk-1.3.4-1/jpeg/jdarith.c ****     st += 14;
 385:fltk-1.3.4-1/jpeg/jdarith.c ****     while (m >>= 1)
 386:fltk-1.3.4-1/jpeg/jdarith.c ****       if (arith_decode(cinfo, st)) v |= m;
 387:fltk-1.3.4-1/jpeg/jdarith.c ****     v += 1; if (sign) v = -v;
 388:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Scale and output coefficient in natural (dezigzagged) order */
 389:fltk-1.3.4-1/jpeg/jdarith.c ****     (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 390:fltk-1.3.4-1/jpeg/jdarith.c ****   } while (k < cinfo->Se);
 391:fltk-1.3.4-1/jpeg/jdarith.c **** 
 392:fltk-1.3.4-1/jpeg/jdarith.c ****   return TRUE;
 393:fltk-1.3.4-1/jpeg/jdarith.c **** }
 394:fltk-1.3.4-1/jpeg/jdarith.c **** 
 395:fltk-1.3.4-1/jpeg/jdarith.c **** 
 396:fltk-1.3.4-1/jpeg/jdarith.c **** /*
 397:fltk-1.3.4-1/jpeg/jdarith.c ****  * MCU decoding for DC successive approximation refinement scan.
 398:fltk-1.3.4-1/jpeg/jdarith.c ****  * Note: we assume such scans can be multi-component,
 399:fltk-1.3.4-1/jpeg/jdarith.c ****  * although the spec is not very clear on the point.
 400:fltk-1.3.4-1/jpeg/jdarith.c ****  */
 401:fltk-1.3.4-1/jpeg/jdarith.c **** 
 402:fltk-1.3.4-1/jpeg/jdarith.c **** METHODDEF(boolean)
 403:fltk-1.3.4-1/jpeg/jdarith.c **** decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
 404:fltk-1.3.4-1/jpeg/jdarith.c **** {
 405:fltk-1.3.4-1/jpeg/jdarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 406:fltk-1.3.4-1/jpeg/jdarith.c ****   unsigned char *st;
 407:fltk-1.3.4-1/jpeg/jdarith.c ****   int p1, blkn;
 408:fltk-1.3.4-1/jpeg/jdarith.c **** 
 409:fltk-1.3.4-1/jpeg/jdarith.c ****   /* Process restart marker if needed */
 410:fltk-1.3.4-1/jpeg/jdarith.c ****   if (cinfo->restart_interval) {
 411:fltk-1.3.4-1/jpeg/jdarith.c ****     if (entropy->restarts_to_go == 0)
 412:fltk-1.3.4-1/jpeg/jdarith.c ****       process_restart(cinfo);
 413:fltk-1.3.4-1/jpeg/jdarith.c ****     entropy->restarts_to_go--;
 414:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 415:fltk-1.3.4-1/jpeg/jdarith.c **** 
 416:fltk-1.3.4-1/jpeg/jdarith.c ****   st = entropy->fixed_bin;	/* use fixed probability estimation */
 417:fltk-1.3.4-1/jpeg/jdarith.c ****   p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 418:fltk-1.3.4-1/jpeg/jdarith.c **** 
 419:fltk-1.3.4-1/jpeg/jdarith.c ****   /* Outer loop handles each block in the MCU */
 420:fltk-1.3.4-1/jpeg/jdarith.c **** 
 421:fltk-1.3.4-1/jpeg/jdarith.c ****   for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 422:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Encoded data is simply the next bit of the two's-complement DC value */
 423:fltk-1.3.4-1/jpeg/jdarith.c ****     if (arith_decode(cinfo, st))
 424:fltk-1.3.4-1/jpeg/jdarith.c ****       MCU_data[blkn][0][0] |= p1;
 425:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 426:fltk-1.3.4-1/jpeg/jdarith.c **** 
 427:fltk-1.3.4-1/jpeg/jdarith.c ****   return TRUE;
 428:fltk-1.3.4-1/jpeg/jdarith.c **** }
 429:fltk-1.3.4-1/jpeg/jdarith.c **** 
 430:fltk-1.3.4-1/jpeg/jdarith.c **** 
 431:fltk-1.3.4-1/jpeg/jdarith.c **** /*
 432:fltk-1.3.4-1/jpeg/jdarith.c ****  * MCU decoding for AC successive approximation refinement scan.
 433:fltk-1.3.4-1/jpeg/jdarith.c ****  */
 434:fltk-1.3.4-1/jpeg/jdarith.c **** 
 435:fltk-1.3.4-1/jpeg/jdarith.c **** METHODDEF(boolean)
 436:fltk-1.3.4-1/jpeg/jdarith.c **** decode_mcu_AC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
 437:fltk-1.3.4-1/jpeg/jdarith.c **** {
 438:fltk-1.3.4-1/jpeg/jdarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 439:fltk-1.3.4-1/jpeg/jdarith.c ****   JBLOCKROW block;
 440:fltk-1.3.4-1/jpeg/jdarith.c ****   JCOEFPTR thiscoef;
 441:fltk-1.3.4-1/jpeg/jdarith.c ****   unsigned char *st;
 442:fltk-1.3.4-1/jpeg/jdarith.c ****   int tbl, k, kex;
 443:fltk-1.3.4-1/jpeg/jdarith.c ****   int p1, m1;
 444:fltk-1.3.4-1/jpeg/jdarith.c ****   const int * natural_order;
 445:fltk-1.3.4-1/jpeg/jdarith.c **** 
 446:fltk-1.3.4-1/jpeg/jdarith.c ****   /* Process restart marker if needed */
 447:fltk-1.3.4-1/jpeg/jdarith.c ****   if (cinfo->restart_interval) {
 448:fltk-1.3.4-1/jpeg/jdarith.c ****     if (entropy->restarts_to_go == 0)
 449:fltk-1.3.4-1/jpeg/jdarith.c ****       process_restart(cinfo);
 450:fltk-1.3.4-1/jpeg/jdarith.c ****     entropy->restarts_to_go--;
 451:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 452:fltk-1.3.4-1/jpeg/jdarith.c **** 
 453:fltk-1.3.4-1/jpeg/jdarith.c ****   if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 454:fltk-1.3.4-1/jpeg/jdarith.c **** 
 455:fltk-1.3.4-1/jpeg/jdarith.c ****   natural_order = cinfo->natural_order;
 456:fltk-1.3.4-1/jpeg/jdarith.c **** 
 457:fltk-1.3.4-1/jpeg/jdarith.c ****   /* There is always only one block per MCU */
 458:fltk-1.3.4-1/jpeg/jdarith.c ****   block = MCU_data[0];
 459:fltk-1.3.4-1/jpeg/jdarith.c ****   tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 460:fltk-1.3.4-1/jpeg/jdarith.c **** 
 461:fltk-1.3.4-1/jpeg/jdarith.c ****   p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 462:fltk-1.3.4-1/jpeg/jdarith.c ****   m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 463:fltk-1.3.4-1/jpeg/jdarith.c **** 
 464:fltk-1.3.4-1/jpeg/jdarith.c ****   /* Establish EOBx (previous stage end-of-block) index */
 465:fltk-1.3.4-1/jpeg/jdarith.c ****   kex = cinfo->Se;
 466:fltk-1.3.4-1/jpeg/jdarith.c ****   do {
 467:fltk-1.3.4-1/jpeg/jdarith.c ****     if ((*block)[natural_order[kex]]) break;
 468:fltk-1.3.4-1/jpeg/jdarith.c ****   } while (--kex);
 469:fltk-1.3.4-1/jpeg/jdarith.c **** 
 470:fltk-1.3.4-1/jpeg/jdarith.c ****   k = cinfo->Ss - 1;
 471:fltk-1.3.4-1/jpeg/jdarith.c ****   do {
 472:fltk-1.3.4-1/jpeg/jdarith.c ****     st = entropy->ac_stats[tbl] + 3 * k;
 473:fltk-1.3.4-1/jpeg/jdarith.c ****     if (k >= kex)
 474:fltk-1.3.4-1/jpeg/jdarith.c ****       if (arith_decode(cinfo, st)) break;	/* EOB flag */
 475:fltk-1.3.4-1/jpeg/jdarith.c ****     for (;;) {
 476:fltk-1.3.4-1/jpeg/jdarith.c ****       thiscoef = *block + natural_order[++k];
 477:fltk-1.3.4-1/jpeg/jdarith.c ****       if (*thiscoef) {				/* previously nonzero coef */
 478:fltk-1.3.4-1/jpeg/jdarith.c **** 	if (arith_decode(cinfo, st + 2)) {
 479:fltk-1.3.4-1/jpeg/jdarith.c **** 	  if (*thiscoef < 0)
 480:fltk-1.3.4-1/jpeg/jdarith.c **** 	    *thiscoef += m1;
 481:fltk-1.3.4-1/jpeg/jdarith.c **** 	  else
 482:fltk-1.3.4-1/jpeg/jdarith.c **** 	    *thiscoef += p1;
 483:fltk-1.3.4-1/jpeg/jdarith.c **** 	}
 484:fltk-1.3.4-1/jpeg/jdarith.c **** 	break;
 485:fltk-1.3.4-1/jpeg/jdarith.c ****       }
 486:fltk-1.3.4-1/jpeg/jdarith.c ****       if (arith_decode(cinfo, st + 1)) {	/* newly nonzero coef */
 487:fltk-1.3.4-1/jpeg/jdarith.c **** 	if (arith_decode(cinfo, entropy->fixed_bin))
 488:fltk-1.3.4-1/jpeg/jdarith.c **** 	  *thiscoef = m1;
 489:fltk-1.3.4-1/jpeg/jdarith.c **** 	else
 490:fltk-1.3.4-1/jpeg/jdarith.c **** 	  *thiscoef = p1;
 491:fltk-1.3.4-1/jpeg/jdarith.c **** 	break;
 492:fltk-1.3.4-1/jpeg/jdarith.c ****       }
 493:fltk-1.3.4-1/jpeg/jdarith.c ****       st += 3;
 494:fltk-1.3.4-1/jpeg/jdarith.c ****       if (k >= cinfo->Se) {
 495:fltk-1.3.4-1/jpeg/jdarith.c **** 	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 496:fltk-1.3.4-1/jpeg/jdarith.c **** 	entropy->ct = -1;			/* spectral overflow */
 497:fltk-1.3.4-1/jpeg/jdarith.c **** 	return TRUE;
 498:fltk-1.3.4-1/jpeg/jdarith.c ****       }
 499:fltk-1.3.4-1/jpeg/jdarith.c ****     }
 500:fltk-1.3.4-1/jpeg/jdarith.c ****   } while (k < cinfo->Se);
 501:fltk-1.3.4-1/jpeg/jdarith.c **** 
 502:fltk-1.3.4-1/jpeg/jdarith.c ****   return TRUE;
 503:fltk-1.3.4-1/jpeg/jdarith.c **** }
 504:fltk-1.3.4-1/jpeg/jdarith.c **** 
 505:fltk-1.3.4-1/jpeg/jdarith.c **** 
 506:fltk-1.3.4-1/jpeg/jdarith.c **** /*
 507:fltk-1.3.4-1/jpeg/jdarith.c ****  * Decode one MCU's worth of arithmetic-compressed coefficients.
 508:fltk-1.3.4-1/jpeg/jdarith.c ****  */
 509:fltk-1.3.4-1/jpeg/jdarith.c **** 
 510:fltk-1.3.4-1/jpeg/jdarith.c **** METHODDEF(boolean)
 511:fltk-1.3.4-1/jpeg/jdarith.c **** decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
 512:fltk-1.3.4-1/jpeg/jdarith.c **** {
 513:fltk-1.3.4-1/jpeg/jdarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 514:fltk-1.3.4-1/jpeg/jdarith.c ****   jpeg_component_info * compptr;
 515:fltk-1.3.4-1/jpeg/jdarith.c ****   JBLOCKROW block;
 516:fltk-1.3.4-1/jpeg/jdarith.c ****   unsigned char *st;
 517:fltk-1.3.4-1/jpeg/jdarith.c ****   int blkn, ci, tbl, sign, k;
 518:fltk-1.3.4-1/jpeg/jdarith.c ****   int v, m;
 519:fltk-1.3.4-1/jpeg/jdarith.c ****   const int * natural_order;
 520:fltk-1.3.4-1/jpeg/jdarith.c **** 
 521:fltk-1.3.4-1/jpeg/jdarith.c ****   /* Process restart marker if needed */
 522:fltk-1.3.4-1/jpeg/jdarith.c ****   if (cinfo->restart_interval) {
 523:fltk-1.3.4-1/jpeg/jdarith.c ****     if (entropy->restarts_to_go == 0)
 524:fltk-1.3.4-1/jpeg/jdarith.c ****       process_restart(cinfo);
 525:fltk-1.3.4-1/jpeg/jdarith.c ****     entropy->restarts_to_go--;
 526:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 527:fltk-1.3.4-1/jpeg/jdarith.c **** 
 528:fltk-1.3.4-1/jpeg/jdarith.c ****   if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 529:fltk-1.3.4-1/jpeg/jdarith.c **** 
 530:fltk-1.3.4-1/jpeg/jdarith.c ****   natural_order = cinfo->natural_order;
 531:fltk-1.3.4-1/jpeg/jdarith.c **** 
 532:fltk-1.3.4-1/jpeg/jdarith.c ****   /* Outer loop handles each block in the MCU */
 533:fltk-1.3.4-1/jpeg/jdarith.c **** 
 534:fltk-1.3.4-1/jpeg/jdarith.c ****   for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 535:fltk-1.3.4-1/jpeg/jdarith.c ****     block = MCU_data[blkn];
 536:fltk-1.3.4-1/jpeg/jdarith.c ****     ci = cinfo->MCU_membership[blkn];
 537:fltk-1.3.4-1/jpeg/jdarith.c ****     compptr = cinfo->cur_comp_info[ci];
 538:fltk-1.3.4-1/jpeg/jdarith.c **** 
 539:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Sections F.2.4.1 & F.1.4.4.1: Decoding of DC coefficients */
 540:fltk-1.3.4-1/jpeg/jdarith.c **** 
 541:fltk-1.3.4-1/jpeg/jdarith.c ****     tbl = compptr->dc_tbl_no;
 542:fltk-1.3.4-1/jpeg/jdarith.c **** 
 543:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Table F.4: Point to statistics bin S0 for DC coefficient coding */
 544:fltk-1.3.4-1/jpeg/jdarith.c ****     st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 545:fltk-1.3.4-1/jpeg/jdarith.c **** 
 546:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Figure F.19: Decode_DC_DIFF */
 547:fltk-1.3.4-1/jpeg/jdarith.c ****     if (arith_decode(cinfo, st) == 0)
 548:fltk-1.3.4-1/jpeg/jdarith.c ****       entropy->dc_context[ci] = 0;
 549:fltk-1.3.4-1/jpeg/jdarith.c ****     else {
 550:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Figure F.21: Decoding nonzero value v */
 551:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Figure F.22: Decoding the sign of v */
 552:fltk-1.3.4-1/jpeg/jdarith.c ****       sign = arith_decode(cinfo, st + 1);
 553:fltk-1.3.4-1/jpeg/jdarith.c ****       st += 2; st += sign;
 554:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Figure F.23: Decoding the magnitude category of v */
 555:fltk-1.3.4-1/jpeg/jdarith.c ****       if ((m = arith_decode(cinfo, st)) != 0) {
 556:fltk-1.3.4-1/jpeg/jdarith.c **** 	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 557:fltk-1.3.4-1/jpeg/jdarith.c **** 	while (arith_decode(cinfo, st)) {
 558:fltk-1.3.4-1/jpeg/jdarith.c **** 	  if ((m <<= 1) == 0x8000) {
 559:fltk-1.3.4-1/jpeg/jdarith.c **** 	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 560:fltk-1.3.4-1/jpeg/jdarith.c **** 	    entropy->ct = -1;			/* magnitude overflow */
 561:fltk-1.3.4-1/jpeg/jdarith.c **** 	    return TRUE;
 562:fltk-1.3.4-1/jpeg/jdarith.c **** 	  }
 563:fltk-1.3.4-1/jpeg/jdarith.c **** 	  st += 1;
 564:fltk-1.3.4-1/jpeg/jdarith.c **** 	}
 565:fltk-1.3.4-1/jpeg/jdarith.c ****       }
 566:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Section F.1.4.4.1.2: Establish dc_context conditioning category */
 567:fltk-1.3.4-1/jpeg/jdarith.c ****       if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 568:fltk-1.3.4-1/jpeg/jdarith.c **** 	entropy->dc_context[ci] = 0;		   /* zero diff category */
 569:fltk-1.3.4-1/jpeg/jdarith.c ****       else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 570:fltk-1.3.4-1/jpeg/jdarith.c **** 	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 571:fltk-1.3.4-1/jpeg/jdarith.c ****       else
 572:fltk-1.3.4-1/jpeg/jdarith.c **** 	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 573:fltk-1.3.4-1/jpeg/jdarith.c ****       v = m;
 574:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Figure F.24: Decoding the magnitude bit pattern of v */
 575:fltk-1.3.4-1/jpeg/jdarith.c ****       st += 14;
 576:fltk-1.3.4-1/jpeg/jdarith.c ****       while (m >>= 1)
 577:fltk-1.3.4-1/jpeg/jdarith.c **** 	if (arith_decode(cinfo, st)) v |= m;
 578:fltk-1.3.4-1/jpeg/jdarith.c ****       v += 1; if (sign) v = -v;
 579:fltk-1.3.4-1/jpeg/jdarith.c ****       entropy->last_dc_val[ci] += v;
 580:fltk-1.3.4-1/jpeg/jdarith.c ****     }
 581:fltk-1.3.4-1/jpeg/jdarith.c **** 
 582:fltk-1.3.4-1/jpeg/jdarith.c ****     (*block)[0] = (JCOEF) entropy->last_dc_val[ci];
 583:fltk-1.3.4-1/jpeg/jdarith.c **** 
 584:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Sections F.2.4.2 & F.1.4.4.2: Decoding of AC coefficients */
 585:fltk-1.3.4-1/jpeg/jdarith.c **** 
 586:fltk-1.3.4-1/jpeg/jdarith.c ****     if (cinfo->lim_Se == 0) continue;
 587:fltk-1.3.4-1/jpeg/jdarith.c ****     tbl = compptr->ac_tbl_no;
 588:fltk-1.3.4-1/jpeg/jdarith.c ****     k = 0;
 589:fltk-1.3.4-1/jpeg/jdarith.c **** 
 590:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Figure F.20: Decode_AC_coefficients */
 591:fltk-1.3.4-1/jpeg/jdarith.c ****     do {
 592:fltk-1.3.4-1/jpeg/jdarith.c ****       st = entropy->ac_stats[tbl] + 3 * k;
 593:fltk-1.3.4-1/jpeg/jdarith.c ****       if (arith_decode(cinfo, st)) break;	/* EOB flag */
 594:fltk-1.3.4-1/jpeg/jdarith.c ****       for (;;) {
 595:fltk-1.3.4-1/jpeg/jdarith.c **** 	k++;
 596:fltk-1.3.4-1/jpeg/jdarith.c **** 	if (arith_decode(cinfo, st + 1)) break;
 597:fltk-1.3.4-1/jpeg/jdarith.c **** 	st += 3;
 598:fltk-1.3.4-1/jpeg/jdarith.c **** 	if (k >= cinfo->lim_Se) {
 599:fltk-1.3.4-1/jpeg/jdarith.c **** 	  WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 600:fltk-1.3.4-1/jpeg/jdarith.c **** 	  entropy->ct = -1;			/* spectral overflow */
 601:fltk-1.3.4-1/jpeg/jdarith.c **** 	  return TRUE;
 602:fltk-1.3.4-1/jpeg/jdarith.c **** 	}
 603:fltk-1.3.4-1/jpeg/jdarith.c ****       }
 604:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Figure F.21: Decoding nonzero value v */
 605:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Figure F.22: Decoding the sign of v */
 606:fltk-1.3.4-1/jpeg/jdarith.c ****       sign = arith_decode(cinfo, entropy->fixed_bin);
 607:fltk-1.3.4-1/jpeg/jdarith.c ****       st += 2;
 608:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Figure F.23: Decoding the magnitude category of v */
 609:fltk-1.3.4-1/jpeg/jdarith.c ****       if ((m = arith_decode(cinfo, st)) != 0) {
 610:fltk-1.3.4-1/jpeg/jdarith.c **** 	if (arith_decode(cinfo, st)) {
 611:fltk-1.3.4-1/jpeg/jdarith.c **** 	  m <<= 1;
 612:fltk-1.3.4-1/jpeg/jdarith.c **** 	  st = entropy->ac_stats[tbl] +
 613:fltk-1.3.4-1/jpeg/jdarith.c **** 	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 614:fltk-1.3.4-1/jpeg/jdarith.c **** 	  while (arith_decode(cinfo, st)) {
 615:fltk-1.3.4-1/jpeg/jdarith.c **** 	    if ((m <<= 1) == 0x8000) {
 616:fltk-1.3.4-1/jpeg/jdarith.c **** 	      WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 617:fltk-1.3.4-1/jpeg/jdarith.c **** 	      entropy->ct = -1;			/* magnitude overflow */
 618:fltk-1.3.4-1/jpeg/jdarith.c **** 	      return TRUE;
 619:fltk-1.3.4-1/jpeg/jdarith.c **** 	    }
 620:fltk-1.3.4-1/jpeg/jdarith.c **** 	    st += 1;
 621:fltk-1.3.4-1/jpeg/jdarith.c **** 	  }
 622:fltk-1.3.4-1/jpeg/jdarith.c **** 	}
 623:fltk-1.3.4-1/jpeg/jdarith.c ****       }
 624:fltk-1.3.4-1/jpeg/jdarith.c ****       v = m;
 625:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Figure F.24: Decoding the magnitude bit pattern of v */
 626:fltk-1.3.4-1/jpeg/jdarith.c ****       st += 14;
 627:fltk-1.3.4-1/jpeg/jdarith.c ****       while (m >>= 1)
 628:fltk-1.3.4-1/jpeg/jdarith.c **** 	if (arith_decode(cinfo, st)) v |= m;
 629:fltk-1.3.4-1/jpeg/jdarith.c ****       v += 1; if (sign) v = -v;
 630:fltk-1.3.4-1/jpeg/jdarith.c ****       (*block)[natural_order[k]] = (JCOEF) v;
 631:fltk-1.3.4-1/jpeg/jdarith.c ****     } while (k < cinfo->lim_Se);
 632:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 633:fltk-1.3.4-1/jpeg/jdarith.c **** 
 634:fltk-1.3.4-1/jpeg/jdarith.c ****   return TRUE;
 635:fltk-1.3.4-1/jpeg/jdarith.c **** }
 636:fltk-1.3.4-1/jpeg/jdarith.c **** 
 637:fltk-1.3.4-1/jpeg/jdarith.c **** 
 638:fltk-1.3.4-1/jpeg/jdarith.c **** /*
 639:fltk-1.3.4-1/jpeg/jdarith.c ****  * Initialize for an arithmetic-compressed scan.
 640:fltk-1.3.4-1/jpeg/jdarith.c ****  */
 641:fltk-1.3.4-1/jpeg/jdarith.c **** 
 642:fltk-1.3.4-1/jpeg/jdarith.c **** METHODDEF(void)
 643:fltk-1.3.4-1/jpeg/jdarith.c **** start_pass (j_decompress_ptr cinfo)
 644:fltk-1.3.4-1/jpeg/jdarith.c **** {
 645:fltk-1.3.4-1/jpeg/jdarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 646:fltk-1.3.4-1/jpeg/jdarith.c ****   int ci, tbl;
 647:fltk-1.3.4-1/jpeg/jdarith.c ****   jpeg_component_info * compptr;
 648:fltk-1.3.4-1/jpeg/jdarith.c **** 
 649:fltk-1.3.4-1/jpeg/jdarith.c ****   if (cinfo->progressive_mode) {
 650:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Validate progressive scan parameters */
 651:fltk-1.3.4-1/jpeg/jdarith.c ****     if (cinfo->Ss == 0) {
 652:fltk-1.3.4-1/jpeg/jdarith.c ****       if (cinfo->Se != 0)
 653:fltk-1.3.4-1/jpeg/jdarith.c **** 	goto bad;
 654:fltk-1.3.4-1/jpeg/jdarith.c ****     } else {
 655:fltk-1.3.4-1/jpeg/jdarith.c ****       /* need not check Ss/Se < 0 since they came from unsigned bytes */
 656:fltk-1.3.4-1/jpeg/jdarith.c ****       if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 657:fltk-1.3.4-1/jpeg/jdarith.c **** 	goto bad;
 658:fltk-1.3.4-1/jpeg/jdarith.c ****       /* AC scans may have only one component */
 659:fltk-1.3.4-1/jpeg/jdarith.c ****       if (cinfo->comps_in_scan != 1)
 660:fltk-1.3.4-1/jpeg/jdarith.c **** 	goto bad;
 661:fltk-1.3.4-1/jpeg/jdarith.c ****     }
 662:fltk-1.3.4-1/jpeg/jdarith.c ****     if (cinfo->Ah != 0) {
 663:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Successive approximation refinement scan: must have Al = Ah-1. */
 664:fltk-1.3.4-1/jpeg/jdarith.c ****       if (cinfo->Ah-1 != cinfo->Al)
 665:fltk-1.3.4-1/jpeg/jdarith.c **** 	goto bad;
 666:fltk-1.3.4-1/jpeg/jdarith.c ****     }
 667:fltk-1.3.4-1/jpeg/jdarith.c ****     if (cinfo->Al > 13) {	/* need not check for < 0 */
 668:fltk-1.3.4-1/jpeg/jdarith.c ****       bad:
 669:fltk-1.3.4-1/jpeg/jdarith.c ****       ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 670:fltk-1.3.4-1/jpeg/jdarith.c **** 	       cinfo->Ss, cinfo->Se, cinfo->Ah, cinfo->Al);
 671:fltk-1.3.4-1/jpeg/jdarith.c ****     }
 672:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Update progression status, and verify that scan order is legal.
 673:fltk-1.3.4-1/jpeg/jdarith.c ****      * Note that inter-scan inconsistencies are treated as warnings
 674:fltk-1.3.4-1/jpeg/jdarith.c ****      * not fatal errors ... not clear if this is right way to behave.
 675:fltk-1.3.4-1/jpeg/jdarith.c ****      */
 676:fltk-1.3.4-1/jpeg/jdarith.c ****     for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 677:fltk-1.3.4-1/jpeg/jdarith.c ****       int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 678:fltk-1.3.4-1/jpeg/jdarith.c ****       int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 679:fltk-1.3.4-1/jpeg/jdarith.c ****       if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 680:fltk-1.3.4-1/jpeg/jdarith.c **** 	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 681:fltk-1.3.4-1/jpeg/jdarith.c ****       for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 682:fltk-1.3.4-1/jpeg/jdarith.c **** 	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 683:fltk-1.3.4-1/jpeg/jdarith.c **** 	if (cinfo->Ah != expected)
 684:fltk-1.3.4-1/jpeg/jdarith.c **** 	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 685:fltk-1.3.4-1/jpeg/jdarith.c **** 	coef_bit_ptr[coefi] = cinfo->Al;
 686:fltk-1.3.4-1/jpeg/jdarith.c ****       }
 687:fltk-1.3.4-1/jpeg/jdarith.c ****     }
 688:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Select MCU decoding routine */
 689:fltk-1.3.4-1/jpeg/jdarith.c ****     if (cinfo->Ah == 0) {
 690:fltk-1.3.4-1/jpeg/jdarith.c ****       if (cinfo->Ss == 0)
 691:fltk-1.3.4-1/jpeg/jdarith.c **** 	entropy->pub.decode_mcu = decode_mcu_DC_first;
 692:fltk-1.3.4-1/jpeg/jdarith.c ****       else
 693:fltk-1.3.4-1/jpeg/jdarith.c **** 	entropy->pub.decode_mcu = decode_mcu_AC_first;
 694:fltk-1.3.4-1/jpeg/jdarith.c ****     } else {
 695:fltk-1.3.4-1/jpeg/jdarith.c ****       if (cinfo->Ss == 0)
 696:fltk-1.3.4-1/jpeg/jdarith.c **** 	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 697:fltk-1.3.4-1/jpeg/jdarith.c ****       else
 698:fltk-1.3.4-1/jpeg/jdarith.c **** 	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 699:fltk-1.3.4-1/jpeg/jdarith.c ****     }
 700:fltk-1.3.4-1/jpeg/jdarith.c ****   } else {
 701:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Check that the scan parameters Ss, Se, Ah/Al are OK for sequential JPEG.
 702:fltk-1.3.4-1/jpeg/jdarith.c ****      * This ought to be an error condition, but we make it a warning.
 703:fltk-1.3.4-1/jpeg/jdarith.c ****      */
 704:fltk-1.3.4-1/jpeg/jdarith.c ****     if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 705:fltk-1.3.4-1/jpeg/jdarith.c **** 	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 706:fltk-1.3.4-1/jpeg/jdarith.c ****       WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 707:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Select MCU decoding routine */
 708:fltk-1.3.4-1/jpeg/jdarith.c ****     entropy->pub.decode_mcu = decode_mcu;
 709:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 710:fltk-1.3.4-1/jpeg/jdarith.c **** 
 711:fltk-1.3.4-1/jpeg/jdarith.c ****   /* Allocate & initialize requested statistics areas */
 712:fltk-1.3.4-1/jpeg/jdarith.c ****   for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 713:fltk-1.3.4-1/jpeg/jdarith.c ****     compptr = cinfo->cur_comp_info[ci];
 714:fltk-1.3.4-1/jpeg/jdarith.c ****     if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 715:fltk-1.3.4-1/jpeg/jdarith.c ****       tbl = compptr->dc_tbl_no;
 716:fltk-1.3.4-1/jpeg/jdarith.c ****       if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 717:fltk-1.3.4-1/jpeg/jdarith.c **** 	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 718:fltk-1.3.4-1/jpeg/jdarith.c ****       if (entropy->dc_stats[tbl] == NULL)
 719:fltk-1.3.4-1/jpeg/jdarith.c **** 	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 720:fltk-1.3.4-1/jpeg/jdarith.c **** 	  ((j_common_ptr) cinfo, JPOOL_IMAGE, DC_STAT_BINS);
 721:fltk-1.3.4-1/jpeg/jdarith.c ****       MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
 722:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Initialize DC predictions to 0 */
 723:fltk-1.3.4-1/jpeg/jdarith.c ****       entropy->last_dc_val[ci] = 0;
 724:fltk-1.3.4-1/jpeg/jdarith.c ****       entropy->dc_context[ci] = 0;
 725:fltk-1.3.4-1/jpeg/jdarith.c ****     }
 726:fltk-1.3.4-1/jpeg/jdarith.c ****     if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 727:fltk-1.3.4-1/jpeg/jdarith.c **** 	(cinfo->progressive_mode && cinfo->Ss)) {
 728:fltk-1.3.4-1/jpeg/jdarith.c ****       tbl = compptr->ac_tbl_no;
 729:fltk-1.3.4-1/jpeg/jdarith.c ****       if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 730:fltk-1.3.4-1/jpeg/jdarith.c **** 	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 731:fltk-1.3.4-1/jpeg/jdarith.c ****       if (entropy->ac_stats[tbl] == NULL)
 732:fltk-1.3.4-1/jpeg/jdarith.c **** 	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 733:fltk-1.3.4-1/jpeg/jdarith.c **** 	  ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
 734:fltk-1.3.4-1/jpeg/jdarith.c ****       MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 735:fltk-1.3.4-1/jpeg/jdarith.c ****     }
 736:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 737:fltk-1.3.4-1/jpeg/jdarith.c **** 
 738:fltk-1.3.4-1/jpeg/jdarith.c ****   /* Initialize arithmetic decoding variables */
 739:fltk-1.3.4-1/jpeg/jdarith.c ****   entropy->c = 0;
 740:fltk-1.3.4-1/jpeg/jdarith.c ****   entropy->a = 0;
 741:fltk-1.3.4-1/jpeg/jdarith.c ****   entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 742:fltk-1.3.4-1/jpeg/jdarith.c **** 
 743:fltk-1.3.4-1/jpeg/jdarith.c ****   /* Initialize restart counter */
 744:fltk-1.3.4-1/jpeg/jdarith.c ****   entropy->restarts_to_go = cinfo->restart_interval;
 745:fltk-1.3.4-1/jpeg/jdarith.c **** }
 746:fltk-1.3.4-1/jpeg/jdarith.c **** 
 747:fltk-1.3.4-1/jpeg/jdarith.c **** 
 748:fltk-1.3.4-1/jpeg/jdarith.c **** /*
 749:fltk-1.3.4-1/jpeg/jdarith.c ****  * Finish up at the end of an arithmetic-compressed scan.
 750:fltk-1.3.4-1/jpeg/jdarith.c ****  */
 751:fltk-1.3.4-1/jpeg/jdarith.c **** 
 752:fltk-1.3.4-1/jpeg/jdarith.c **** METHODDEF(void)
 753:fltk-1.3.4-1/jpeg/jdarith.c **** finish_pass (j_decompress_ptr cinfo)
 754:fltk-1.3.4-1/jpeg/jdarith.c **** {
 360              		.loc 1 754 0
 361              		.cfi_startproc
 362              	.LVL38:
 363 0000 F3C3     		rep ret
 364              		.cfi_endproc
 365              	.LFE70:
 367              		.section	.text.unlikely.finish_pass
 368              	.LCOLDE2:
 369              		.section	.text.finish_pass
 370              	.LHOTE2:
 371              		.section	.text.unlikely.process_restart,"ax",@progbits
 372              	.LCOLDB3:
 373              		.section	.text.process_restart,"ax",@progbits
 374              	.LHOTB3:
 375              		.p2align 4,,15
 377              	process_restart:
 378              	.LFB63:
 191:fltk-1.3.4-1/jpeg/jdarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 379              		.loc 1 191 0
 380              		.cfi_startproc
 381              	.LVL39:
 191:fltk-1.3.4-1/jpeg/jdarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 382              		.loc 1 191 0
 383 0000 55       		pushq	%rbp
 384              		.cfi_def_cfa_offset 16
 385              		.cfi_offset 6, -16
 386 0001 53       		pushq	%rbx
 387              		.cfi_def_cfa_offset 24
 388              		.cfi_offset 3, -24
 389 0002 4889FB   		movq	%rdi, %rbx
 390 0005 4883EC08 		subq	$8, %rsp
 391              		.cfi_def_cfa_offset 32
 197:fltk-1.3.4-1/jpeg/jdarith.c ****     ERREXIT(cinfo, JERR_CANT_SUSPEND);
 392              		.loc 1 197 0
 393 0009 488B8768 		movq	616(%rdi), %rax
 393      020000
 192:fltk-1.3.4-1/jpeg/jdarith.c ****   int ci;
 394              		.loc 1 192 0
 395 0010 488BAF70 		movq	624(%rdi), %rbp
 395      020000
 396              	.LVL40:
 197:fltk-1.3.4-1/jpeg/jdarith.c ****     ERREXIT(cinfo, JERR_CANT_SUSPEND);
 397              		.loc 1 197 0
 398 0017 FF5010   		call	*16(%rax)
 399              	.LVL41:
 400 001a 85C0     		testl	%eax, %eax
 401 001c 0F840E01 		je	.L49
 401      0000
 402              	.L37:
 403              	.LVL42:
 201:fltk-1.3.4-1/jpeg/jdarith.c ****     compptr = cinfo->cur_comp_info[ci];
 404              		.loc 1 201 0 discriminator 1
 405 0022 8BB3C001 		movl	448(%rbx), %esi
 405      0000
 406 0028 85F6     		testl	%esi, %esi
 407 002a 0F8ED700 		jle	.L45
 407      0000
 408 0030 488DB3C8 		leaq	456(%rbx), %rsi
 408      010000
 409 0037 4C8D452C 		leaq	44(%rbp), %r8
 201:fltk-1.3.4-1/jpeg/jdarith.c ****     compptr = cinfo->cur_comp_info[ci];
 410              		.loc 1 201 0 is_stmt 0
 411 003b 31D2     		xorl	%edx, %edx
 412              	.LBB12:
 413              	.LBB13:
 414              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string3.h"
   1:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* Copyright (C) 2004-2016 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string3.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string3.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string3.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string3.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string3.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string3.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string3.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string3.h ****    <http://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef _STRING_H
  19:/usr/include/x86_64-linux-gnu/bits/string3.h **** # error "Never use <bits/string3.h> directly; include <string.h> instead."
  20:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  21:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  22:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  23:/usr/include/x86_64-linux-gnu/bits/string3.h **** __warndecl (__warn_memset_zero_len,
  24:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  25:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  26:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  27:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef __cplusplus
  28:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* XXX This is temporarily.  We should not redefine any of the symbols
  29:/usr/include/x86_64-linux-gnu/bits/string3.h ****    and instead integrate the error checking into the original
  30:/usr/include/x86_64-linux-gnu/bits/string3.h ****    definitions.  */
  31:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memcpy
  32:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memmove
  33:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memset
  34:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcat
  35:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcpy
  36:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncat
  37:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncpy
  38:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_GNU
  39:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef mempcpy
  40:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef stpcpy
  41:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  42:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_MISC
  43:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bcopy
  44:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bzero
  45:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  46:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  47:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  48:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  49:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  50:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  51:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	       size_t __len))
  52:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  53:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  54:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  55:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  56:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  57:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memmove (void *__dest, const void *__src, size_t __len))
  58:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  59:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  60:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  61:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  62:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifdef __USE_GNU
  63:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  64:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
  65:/usr/include/x86_64-linux-gnu/bits/string3.h **** 		size_t __len))
  66:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  67:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
  68:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  69:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  70:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  71:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  72:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* The first two tests here help to catch a somewhat common problem
  73:/usr/include/x86_64-linux-gnu/bits/string3.h ****    where the second and third parameter are transposed.  This is
  74:/usr/include/x86_64-linux-gnu/bits/string3.h ****    especially problematic if the intended fill value is zero.  In this
  75:/usr/include/x86_64-linux-gnu/bits/string3.h ****    case no work is done at all.  We detect these problems by referring
  76:/usr/include/x86_64-linux-gnu/bits/string3.h ****    non-existing functions.  */
  77:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  78:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memset (void *__dest, int __ch, size_t __len))
  79:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  80:/usr/include/x86_64-linux-gnu/bits/string3.h ****   /* GCC-5.0 and newer implements these checks in the compiler, so we don't
  81:/usr/include/x86_64-linux-gnu/bits/string3.h ****      need them here.  */
  82:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  83:/usr/include/x86_64-linux-gnu/bits/string3.h ****   if (__builtin_constant_p (__len) && __len == 0
  84:/usr/include/x86_64-linux-gnu/bits/string3.h ****       && (!__builtin_constant_p (__ch) || __ch != 0))
  85:/usr/include/x86_64-linux-gnu/bits/string3.h ****     {
  86:/usr/include/x86_64-linux-gnu/bits/string3.h ****       __warn_memset_zero_len ();
  87:/usr/include/x86_64-linux-gnu/bits/string3.h ****       return __dest;
  88:/usr/include/x86_64-linux-gnu/bits/string3.h ****     }
  89:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  90:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 415              		.loc 2 90 0 is_stmt 1
 416 003d 31C0     		xorl	%eax, %eax
 417              	.LVL43:
 418              	.L44:
 419              	.LBE13:
 420              	.LBE12:
 203:fltk-1.3.4-1/jpeg/jdarith.c ****       MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 421              		.loc 1 203 0
 422 003f 8B8B3C01 		movl	316(%rbx), %ecx
 422      0000
 202:fltk-1.3.4-1/jpeg/jdarith.c ****     if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 423              		.loc 1 202 0
 424 0045 4C8B0E   		movq	(%rsi), %r9
 425              	.LVL44:
 203:fltk-1.3.4-1/jpeg/jdarith.c ****       MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 426              		.loc 1 203 0
 427 0048 85C9     		testl	%ecx, %ecx
 428 004a 741C     		je	.L39
 203:fltk-1.3.4-1/jpeg/jdarith.c ****       MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 429              		.loc 1 203 0 is_stmt 0 discriminator 1
 430 004c 448B9B1C 		movl	540(%rbx), %r11d
 430      020000
 431 0053 4585DB   		testl	%r11d, %r11d
 432 0056 7563     		jne	.L40
 203:fltk-1.3.4-1/jpeg/jdarith.c ****       MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 433              		.loc 1 203 0 discriminator 2
 434 0058 448B9324 		movl	548(%rbx), %r10d
 434      020000
 435 005f 4585D2   		testl	%r10d, %r10d
 436 0062 0F858800 		jne	.L43
 436      0000
 437              	.L39:
 438              	.LVL45:
 204:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Reset DC predictions to 0 */
 439              		.loc 1 204 0 is_stmt 1
 440 0068 49634914 		movslq	20(%r9), %rcx
 441              	.LVL46:
 442              	.LBB15:
 443              	.LBB16:
 444              		.loc 2 90 0
 445 006c 488B4CCD 		movq	80(%rbp,%rcx,8), %rcx
 445      50
 446              	.LVL47:
 447 0071 488D7908 		leaq	8(%rcx), %rdi
 448 0075 48C70100 		movq	$0, (%rcx)
 448      000000
 449              	.LVL48:
 450 007c 48C74138 		movq	$0, 56(%rcx)
 450      00000000 
 451 0084 4883E7F8 		andq	$-8, %rdi
 452 0088 4829F9   		subq	%rdi, %rcx
 453 008b 83C140   		addl	$64, %ecx
 454 008e C1E903   		shrl	$3, %ecx
 455 0091 F348AB   		rep stosq
 456              	.LVL49:
 457              	.LBE16:
 458              	.LBE15:
 206:fltk-1.3.4-1/jpeg/jdarith.c ****       entropy->dc_context[ci] = 0;
 459              		.loc 1 206 0
 460 0094 41C70000 		movl	$0, (%r8)
 460      000000
 207:fltk-1.3.4-1/jpeg/jdarith.c ****     }
 461              		.loc 1 207 0
 462 009b 41C74010 		movl	$0, 16(%r8)
 462      00000000 
 209:fltk-1.3.4-1/jpeg/jdarith.c **** 	(cinfo->progressive_mode && cinfo->Ss)) {
 463              		.loc 1 209 0
 464 00a3 8BBB3C01 		movl	316(%rbx), %edi
 464      0000
 465 00a9 85FF     		testl	%edi, %edi
 466 00ab 0F859600 		jne	.L50
 466      0000
 209:fltk-1.3.4-1/jpeg/jdarith.c **** 	(cinfo->progressive_mode && cinfo->Ss)) {
 467              		.loc 1 209 0 is_stmt 0 discriminator 1
 468 00b1 8B8B3802 		movl	568(%rbx), %ecx
 468      0000
 469 00b7 85C9     		testl	%ecx, %ecx
 470 00b9 7435     		je	.L43
 471              	.L40:
 472              	.LVL50:
 211:fltk-1.3.4-1/jpeg/jdarith.c ****     }
 473              		.loc 1 211 0 is_stmt 1
 474 00bb 49634918 		movslq	24(%r9), %rcx
 475              	.LVL51:
 476              	.LBB17:
 477              	.LBB14:
 478              		.loc 2 90 0
 479 00bf 488B8CCD 		movq	208(%rbp,%rcx,8), %rcx
 479      D0000000 
 480              	.LVL52:
 481 00c7 488D7908 		leaq	8(%rcx), %rdi
 482 00cb 48C70100 		movq	$0, (%rcx)
 482      000000
 483              	.LVL53:
 484 00d2 48C781F8 		movq	$0, 248(%rcx)
 484      00000000 
 484      000000
 485 00dd 4883E7F8 		andq	$-8, %rdi
 486 00e1 4829F9   		subq	%rdi, %rcx
 487 00e4 81C10001 		addl	$256, %ecx
 487      0000
 488 00ea C1E903   		shrl	$3, %ecx
 489 00ed F348AB   		rep stosq
 490              	.LVL54:
 491              	.L43:
 492              	.LBE14:
 493              	.LBE17:
 201:fltk-1.3.4-1/jpeg/jdarith.c ****     compptr = cinfo->cur_comp_info[ci];
 494              		.loc 1 201 0 discriminator 2
 495 00f0 83C201   		addl	$1, %edx
 496              	.LVL55:
 497 00f3 4883C608 		addq	$8, %rsi
 498 00f7 4983C004 		addq	$4, %r8
 499 00fb 3993C001 		cmpl	%edx, 448(%rbx)
 499      0000
 500 0101 0F8F38FF 		jg	.L44
 500      FFFF
 501              	.LVL56:
 502              	.L45:
 216:fltk-1.3.4-1/jpeg/jdarith.c ****   entropy->a = 0;
 503              		.loc 1 216 0
 504 0107 48C74518 		movq	$0, 24(%rbp)
 504      00000000 
 217:fltk-1.3.4-1/jpeg/jdarith.c ****   entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 505              		.loc 1 217 0
 506 010f 48C74520 		movq	$0, 32(%rbp)
 506      00000000 
 218:fltk-1.3.4-1/jpeg/jdarith.c **** 
 507              		.loc 1 218 0
 508 0117 C74528F0 		movl	$-16, 40(%rbp)
 508      FFFFFF
 221:fltk-1.3.4-1/jpeg/jdarith.c **** }
 509              		.loc 1 221 0
 510 011e 8B837401 		movl	372(%rbx), %eax
 510      0000
 511 0124 89454C   		movl	%eax, 76(%rbp)
 222:fltk-1.3.4-1/jpeg/jdarith.c **** 
 512              		.loc 1 222 0
 513 0127 4883C408 		addq	$8, %rsp
 514              		.cfi_remember_state
 515              		.cfi_def_cfa_offset 24
 516 012b 5B       		popq	%rbx
 517              		.cfi_def_cfa_offset 16
 518              	.LVL57:
 519 012c 5D       		popq	%rbp
 520              		.cfi_def_cfa_offset 8
 521              	.LVL58:
 522 012d C3       		ret
 523              	.LVL59:
 524 012e 6690     		.p2align 4,,10
 525              		.p2align 3
 526              	.L49:
 527              		.cfi_restore_state
 198:fltk-1.3.4-1/jpeg/jdarith.c **** 
 528              		.loc 1 198 0
 529 0130 488B03   		movq	(%rbx), %rax
 530 0133 4889DF   		movq	%rbx, %rdi
 531 0136 C7402819 		movl	$25, 40(%rax)
 531      000000
 532 013d 488B03   		movq	(%rbx), %rax
 533 0140 FF10     		call	*(%rax)
 534              	.LVL60:
 535 0142 E9DBFEFF 		jmp	.L37
 535      FF
 536              	.LVL61:
 537              	.L50:
 210:fltk-1.3.4-1/jpeg/jdarith.c ****       MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 538              		.loc 1 210 0
 539 0147 83BB1C02 		cmpl	$0, 540(%rbx)
 539      000000
 540 014e 74A0     		je	.L43
 541 0150 E966FFFF 		jmp	.L40
 541      FF
 542              		.cfi_endproc
 543              	.LFE63:
 545              		.section	.text.unlikely.process_restart
 546              	.LCOLDE3:
 547              		.section	.text.process_restart
 548              	.LHOTE3:
 549              		.section	.text.unlikely.decode_mcu_DC_first,"ax",@progbits
 550              	.LCOLDB4:
 551              		.section	.text.decode_mcu_DC_first,"ax",@progbits
 552              	.LHOTB4:
 553              		.p2align 4,,15
 555              	decode_mcu_DC_first:
 556              	.LFB64:
 243:fltk-1.3.4-1/jpeg/jdarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 557              		.loc 1 243 0
 558              		.cfi_startproc
 559              	.LVL62:
 560 0000 4157     		pushq	%r15
 561              		.cfi_def_cfa_offset 16
 562              		.cfi_offset 15, -16
 563 0002 4156     		pushq	%r14
 564              		.cfi_def_cfa_offset 24
 565              		.cfi_offset 14, -24
 566 0004 4155     		pushq	%r13
 567              		.cfi_def_cfa_offset 32
 568              		.cfi_offset 13, -32
 569 0006 4154     		pushq	%r12
 570              		.cfi_def_cfa_offset 40
 571              		.cfi_offset 12, -40
 572 0008 55       		pushq	%rbp
 573              		.cfi_def_cfa_offset 48
 574              		.cfi_offset 6, -48
 575 0009 53       		pushq	%rbx
 576              		.cfi_def_cfa_offset 56
 577              		.cfi_offset 3, -56
 578 000a 4889FB   		movq	%rdi, %rbx
 579 000d 4883EC38 		subq	$56, %rsp
 580              		.cfi_def_cfa_offset 112
 251:fltk-1.3.4-1/jpeg/jdarith.c ****     if (entropy->restarts_to_go == 0)
 581              		.loc 1 251 0
 582 0011 448B8774 		movl	372(%rdi), %r8d
 582      010000
 244:fltk-1.3.4-1/jpeg/jdarith.c ****   JBLOCKROW block;
 583              		.loc 1 244 0
 584 0018 4C8BBF70 		movq	624(%rdi), %r15
 584      020000
 585              	.LVL63:
 251:fltk-1.3.4-1/jpeg/jdarith.c ****     if (entropy->restarts_to_go == 0)
 586              		.loc 1 251 0
 587 001f 4585C0   		testl	%r8d, %r8d
 588 0022 7413     		je	.L52
 252:fltk-1.3.4-1/jpeg/jdarith.c ****       process_restart(cinfo);
 589              		.loc 1 252 0
 590 0024 418B474C 		movl	76(%r15), %eax
 591 0028 85C0     		testl	%eax, %eax
 592 002a 0F840F02 		je	.L80
 592      0000
 593              	.LVL64:
 594              	.L53:
 254:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 595              		.loc 1 254 0
 596 0030 83E801   		subl	$1, %eax
 597 0033 4189474C 		movl	%eax, 76(%r15)
 598              	.L52:
 257:fltk-1.3.4-1/jpeg/jdarith.c **** 
 599              		.loc 1 257 0
 600 0037 41837F28 		cmpl	$-1, 40(%r15)
 600      FF
 601 003c 0F84A601 		je	.L55
 601      0000
 602              	.LVL65:
 261:fltk-1.3.4-1/jpeg/jdarith.c ****     block = MCU_data[blkn];
 603              		.loc 1 261 0 discriminator 1
 604 0042 8BBBF001 		movl	496(%rbx), %edi
 604      0000
 605 0048 85FF     		testl	%edi, %edi
 606 004a 0F8E9801 		jle	.L55
 606      0000
 607 0050 48897424 		movq	%rsi, 16(%rsp)
 607      10
 608 0055 4C8DABF4 		leaq	500(%rbx), %r13
 608      010000
 261:fltk-1.3.4-1/jpeg/jdarith.c ****     block = MCU_data[blkn];
 609              		.loc 1 261 0 is_stmt 0
 610 005c C7042400 		movl	$0, (%rsp)
 610      000000
 611 0063 EB3A     		jmp	.L70
 612              	.LVL66:
 613              		.p2align 4,,10
 614 0065 0F1F00   		.p2align 3
 615              	.L81:
 616 0068 8B552C   		movl	44(%rbp), %edx
 273:fltk-1.3.4-1/jpeg/jdarith.c ****     else {
 617              		.loc 1 273 0 is_stmt 1
 618 006b C7453C00 		movl	$0, 60(%rbp)
 618      000000
 619              	.LVL67:
 620              	.L58:
 308:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 621              		.loc 1 308 0 discriminator 2
 622 0072 8B8B2802 		movl	552(%rbx), %ecx
 622      0000
 623 0078 488B4424 		movq	24(%rsp), %rax
 623      18
 624 007d 4983C504 		addq	$4, %r13
 261:fltk-1.3.4-1/jpeg/jdarith.c ****     block = MCU_data[blkn];
 625              		.loc 1 261 0 discriminator 2
 626 0081 83042401 		addl	$1, (%rsp)
 627              	.LVL68:
 628 0085 48834424 		addq	$8, 16(%rsp)
 628      1008
 308:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 629              		.loc 1 308 0 discriminator 2
 630 008b D3E2     		sall	%cl, %edx
 631 008d 668910   		movw	%dx, (%rax)
 261:fltk-1.3.4-1/jpeg/jdarith.c ****     block = MCU_data[blkn];
 632              		.loc 1 261 0 discriminator 2
 633 0090 8B0424   		movl	(%rsp), %eax
 634              	.LVL69:
 635 0093 3983F001 		cmpl	%eax, 496(%rbx)
 635      0000
 636 0099 0F8E4901 		jle	.L55
 636      0000
 637              	.LVL70:
 638              	.L70:
 262:fltk-1.3.4-1/jpeg/jdarith.c ****     ci = cinfo->MCU_membership[blkn];
 639              		.loc 1 262 0
 640 009f 488B4424 		movq	16(%rsp), %rax
 640      10
 641 00a4 488B00   		movq	(%rax), %rax
 642 00a7 48894424 		movq	%rax, 24(%rsp)
 642      18
 643              	.LVL71:
 264:fltk-1.3.4-1/jpeg/jdarith.c **** 
 644              		.loc 1 264 0
 645 00ac 49634500 		movslq	0(%r13), %rax
 646              	.LVL72:
 647 00b0 488B94C3 		movq	456(%rbx,%rax,8), %rdx
 647      C8010000 
 648              	.LVL73:
 649 00b8 498D2C87 		leaq	(%r15,%rax,4), %rbp
 269:fltk-1.3.4-1/jpeg/jdarith.c **** 
 650              		.loc 1 269 0
 651 00bc 4863453C 		movslq	60(%rbp), %rax
 652 00c0 48634A14 		movslq	20(%rdx), %rcx
 653 00c4 498D3CCF 		leaq	(%r15,%rcx,8), %rdi
 654 00c8 48894C24 		movq	%rcx, 8(%rsp)
 654      08
 655 00cd 48034750 		addq	80(%rdi), %rax
 656 00d1 48897C24 		movq	%rdi, 32(%rsp)
 656      20
 272:fltk-1.3.4-1/jpeg/jdarith.c ****       entropy->dc_context[ci] = 0;
 657              		.loc 1 272 0
 658 00d6 4889DF   		movq	%rbx, %rdi
 659 00d9 4889C6   		movq	%rax, %rsi
 269:fltk-1.3.4-1/jpeg/jdarith.c **** 
 660              		.loc 1 269 0
 661 00dc 4989C4   		movq	%rax, %r12
 662              	.LVL74:
 272:fltk-1.3.4-1/jpeg/jdarith.c ****       entropy->dc_context[ci] = 0;
 663              		.loc 1 272 0
 664 00df E8000000 		call	arith_decode
 664      00
 665              	.LVL75:
 666 00e4 85C0     		testl	%eax, %eax
 667 00e6 7480     		je	.L81
 277:fltk-1.3.4-1/jpeg/jdarith.c ****       st += 2; st += sign;
 668              		.loc 1 277 0
 669 00e8 498D7424 		leaq	1(%r12), %rsi
 669      01
 670 00ed 4889DF   		movq	%rbx, %rdi
 671 00f0 E8000000 		call	arith_decode
 671      00
 672              	.LVL76:
 673 00f5 8944242C 		movl	%eax, 44(%rsp)
 674              	.LVL77:
 278:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Figure F.23: Decoding the magnitude category of v */
 675              		.loc 1 278 0
 676 00f9 4898     		cltq
 677              	.LVL78:
 280:fltk-1.3.4-1/jpeg/jdarith.c **** 	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 678              		.loc 1 280 0
 679 00fb 4889DF   		movq	%rbx, %rdi
 278:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Figure F.23: Decoding the magnitude category of v */
 680              		.loc 1 278 0
 681 00fe 4D8D6404 		leaq	2(%r12,%rax), %r12
 681      02
 682              	.LVL79:
 280:fltk-1.3.4-1/jpeg/jdarith.c **** 	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 683              		.loc 1 280 0
 684 0103 4C89E6   		movq	%r12, %rsi
 685 0106 E8000000 		call	arith_decode
 685      00
 686              	.LVL80:
 687 010b 85C0     		testl	%eax, %eax
 688 010d 4189C6   		movl	%eax, %r14d
 689              	.LVL81:
 690 0110 7439     		je	.L59
 281:fltk-1.3.4-1/jpeg/jdarith.c **** 	while (arith_decode(cinfo, st)) {
 691              		.loc 1 281 0
 692 0112 488B4424 		movq	32(%rsp), %rax
 692      20
 693              	.LVL82:
 694 0117 4C8B4050 		movq	80(%rax), %r8
 695 011b 4D8D6014 		leaq	20(%r8), %r12
 696              	.LVL83:
 282:fltk-1.3.4-1/jpeg/jdarith.c **** 	  if ((m <<= 1) == 0x8000) {
 697              		.loc 1 282 0
 698 011f EB1B     		jmp	.L60
 699              		.p2align 4,,10
 700 0121 0F1F8000 		.p2align 3
 700      000000
 701              	.L62:
 283:fltk-1.3.4-1/jpeg/jdarith.c **** 	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 702              		.loc 1 283 0
 703 0128 4501F6   		addl	%r14d, %r14d
 704              	.LVL84:
 705 012b 4181FE00 		cmpl	$32768, %r14d
 705      800000
 706 0132 0F849000 		je	.L82
 706      0000
 288:fltk-1.3.4-1/jpeg/jdarith.c **** 	}
 707              		.loc 1 288 0
 708 0138 4983C401 		addq	$1, %r12
 709              	.LVL85:
 710              	.L60:
 282:fltk-1.3.4-1/jpeg/jdarith.c **** 	  if ((m <<= 1) == 0x8000) {
 711              		.loc 1 282 0
 712 013c 4C89E6   		movq	%r12, %rsi
 713 013f 4889DF   		movq	%rbx, %rdi
 714 0142 E8000000 		call	arith_decode
 714      00
 715              	.LVL86:
 716 0147 85C0     		testl	%eax, %eax
 717 0149 75DD     		jne	.L62
 718              	.L59:
 292:fltk-1.3.4-1/jpeg/jdarith.c **** 	entropy->dc_context[ci] = 0;		   /* zero diff category */
 719              		.loc 1 292 0
 720 014b 488B4424 		movq	8(%rsp), %rax
 720      08
 721 0150 0FB68C03 		movzbl	324(%rbx,%rax), %ecx
 721      44010000 
 722 0158 B8010000 		movl	$1, %eax
 722      00
 723 015d 48D3E0   		salq	%cl, %rax
 724 0160 48D1F8   		sarq	%rax
 725 0163 4139C6   		cmpl	%eax, %r14d
 726 0166 0F8D9400 		jge	.L63
 726      0000
 293:fltk-1.3.4-1/jpeg/jdarith.c ****       else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 727              		.loc 1 293 0
 728 016c C7453C00 		movl	$0, 60(%rbp)
 728      000000
 729              	.L64:
 730              	.LVL87:
 300:fltk-1.3.4-1/jpeg/jdarith.c ****       while (m >>= 1)
 731              		.loc 1 300 0
 732 0173 498D4424 		leaq	14(%r12), %rax
 732      0E
 301:fltk-1.3.4-1/jpeg/jdarith.c **** 	if (arith_decode(cinfo, st)) v |= m;
 733              		.loc 1 301 0
 734 0178 4589F4   		movl	%r14d, %r12d
 735              	.LVL88:
 300:fltk-1.3.4-1/jpeg/jdarith.c ****       while (m >>= 1)
 736              		.loc 1 300 0
 737 017b 48894424 		movq	%rax, 8(%rsp)
 737      08
 738              	.LVL89:
 301:fltk-1.3.4-1/jpeg/jdarith.c **** 	if (arith_decode(cinfo, st)) v |= m;
 739              		.loc 1 301 0
 740 0180 EB1F     		jmp	.L66
 741              	.LVL90:
 742              		.p2align 4,,10
 743 0182 660F1F44 		.p2align 3
 743      0000
 744              	.L68:
 302:fltk-1.3.4-1/jpeg/jdarith.c ****       v += 1; if (sign) v = -v;
 745              		.loc 1 302 0
 746 0188 488B7424 		movq	8(%rsp), %rsi
 746      08
 747 018d 4889DF   		movq	%rbx, %rdi
 748 0190 E8000000 		call	arith_decode
 748      00
 749              	.LVL91:
 750 0195 4489F6   		movl	%r14d, %esi
 751 0198 4409E6   		orl	%r12d, %esi
 752 019b 85C0     		testl	%eax, %eax
 753 019d 440F45F6 		cmovne	%esi, %r14d
 754              	.LVL92:
 755              	.L66:
 301:fltk-1.3.4-1/jpeg/jdarith.c **** 	if (arith_decode(cinfo, st)) v |= m;
 756              		.loc 1 301 0
 757 01a1 41D1FC   		sarl	%r12d
 758              	.LVL93:
 759 01a4 75E2     		jne	.L68
 303:fltk-1.3.4-1/jpeg/jdarith.c ****       entropy->last_dc_val[ci] += v;
 760              		.loc 1 303 0
 761 01a6 418D5601 		leal	1(%r14), %edx
 762              	.LVL94:
 763 01aa 8B4C242C 		movl	44(%rsp), %ecx
 764 01ae 89D0     		movl	%edx, %eax
 765 01b0 F7D8     		negl	%eax
 766 01b2 85C9     		testl	%ecx, %ecx
 767 01b4 0F45D0   		cmovne	%eax, %edx
 768              	.LVL95:
 304:fltk-1.3.4-1/jpeg/jdarith.c ****     }
 769              		.loc 1 304 0
 770 01b7 03552C   		addl	44(%rbp), %edx
 771              	.LVL96:
 772 01ba 89552C   		movl	%edx, 44(%rbp)
 773 01bd E9B0FEFF 		jmp	.L58
 773      FF
 774              	.LVL97:
 775              		.p2align 4,,10
 776 01c2 660F1F44 		.p2align 3
 776      0000
 777              	.L82:
 284:fltk-1.3.4-1/jpeg/jdarith.c **** 	    entropy->ct = -1;			/* magnitude overflow */
 778              		.loc 1 284 0
 779 01c8 488B03   		movq	(%rbx), %rax
 780 01cb BEFFFFFF 		movl	$-1, %esi
 780      FF
 781 01d0 4889DF   		movq	%rbx, %rdi
 782 01d3 C7402875 		movl	$117, 40(%rax)
 782      000000
 783 01da 488B03   		movq	(%rbx), %rax
 784 01dd FF5008   		call	*8(%rax)
 785              	.LVL98:
 285:fltk-1.3.4-1/jpeg/jdarith.c **** 	    return TRUE;
 786              		.loc 1 285 0
 787 01e0 41C74728 		movl	$-1, 40(%r15)
 787      FFFFFFFF 
 788              	.LVL99:
 789              	.L55:
 312:fltk-1.3.4-1/jpeg/jdarith.c **** 
 790              		.loc 1 312 0
 791 01e8 4883C438 		addq	$56, %rsp
 792              		.cfi_remember_state
 793              		.cfi_def_cfa_offset 56
 794 01ec B8010000 		movl	$1, %eax
 794      00
 795 01f1 5B       		popq	%rbx
 796              		.cfi_def_cfa_offset 48
 797              	.LVL100:
 798 01f2 5D       		popq	%rbp
 799              		.cfi_def_cfa_offset 40
 800 01f3 415C     		popq	%r12
 801              		.cfi_def_cfa_offset 32
 802 01f5 415D     		popq	%r13
 803              		.cfi_def_cfa_offset 24
 804 01f7 415E     		popq	%r14
 805              		.cfi_def_cfa_offset 16
 806 01f9 415F     		popq	%r15
 807              		.cfi_def_cfa_offset 8
 808              	.LVL101:
 809 01fb C3       		ret
 810              	.LVL102:
 811 01fc 0F1F4000 		.p2align 4,,10
 812              		.p2align 3
 813              	.L63:
 814              		.cfi_restore_state
 294:fltk-1.3.4-1/jpeg/jdarith.c **** 	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 815              		.loc 1 294 0
 816 0200 488B4424 		movq	8(%rsp), %rax
 816      08
 817 0205 0FB68C03 		movzbl	340(%rbx,%rax), %ecx
 817      54010000 
 818 020d B8010000 		movl	$1, %eax
 818      00
 819 0212 48D3E0   		salq	%cl, %rax
 820 0215 48D1F8   		sarq	%rax
 821 0218 4139C6   		cmpl	%eax, %r14d
 295:fltk-1.3.4-1/jpeg/jdarith.c ****       else
 822              		.loc 1 295 0
 823 021b 8B44242C 		movl	44(%rsp), %eax
 294:fltk-1.3.4-1/jpeg/jdarith.c **** 	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 824              		.loc 1 294 0
 825 021f 7E0F     		jle	.L65
 295:fltk-1.3.4-1/jpeg/jdarith.c ****       else
 826              		.loc 1 295 0
 827 0221 8D04850C 		leal	12(,%rax,4), %eax
 827      000000
 828 0228 89453C   		movl	%eax, 60(%rbp)
 829 022b E943FFFF 		jmp	.L64
 829      FF
 830              		.p2align 4,,10
 831              		.p2align 3
 832              	.L65:
 297:fltk-1.3.4-1/jpeg/jdarith.c ****       v = m;
 833              		.loc 1 297 0
 834 0230 8D048504 		leal	4(,%rax,4), %eax
 834      000000
 835 0237 89453C   		movl	%eax, 60(%rbp)
 836 023a E934FFFF 		jmp	.L64
 836      FF
 837              	.LVL103:
 838              	.L80:
 839 023f 48893424 		movq	%rsi, (%rsp)
 253:fltk-1.3.4-1/jpeg/jdarith.c ****     entropy->restarts_to_go--;
 840              		.loc 1 253 0
 841 0243 E8000000 		call	process_restart
 841      00
 842              	.LVL104:
 843 0248 418B474C 		movl	76(%r15), %eax
 844 024c 488B3424 		movq	(%rsp), %rsi
 845 0250 E9DBFDFF 		jmp	.L53
 845      FF
 846              		.cfi_endproc
 847              	.LFE64:
 849              		.section	.text.unlikely.decode_mcu_DC_first
 850              	.LCOLDE4:
 851              		.section	.text.decode_mcu_DC_first
 852              	.LHOTE4:
 853              		.section	.text.unlikely.decode_mcu_AC_first,"ax",@progbits
 854              	.LCOLDB5:
 855              		.section	.text.decode_mcu_AC_first,"ax",@progbits
 856              	.LHOTB5:
 857              		.p2align 4,,15
 859              	decode_mcu_AC_first:
 860              	.LFB65:
 322:fltk-1.3.4-1/jpeg/jdarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 861              		.loc 1 322 0
 862              		.cfi_startproc
 863              	.LVL105:
 864 0000 4157     		pushq	%r15
 865              		.cfi_def_cfa_offset 16
 866              		.cfi_offset 15, -16
 867 0002 4156     		pushq	%r14
 868              		.cfi_def_cfa_offset 24
 869              		.cfi_offset 14, -24
 870 0004 4155     		pushq	%r13
 871              		.cfi_def_cfa_offset 32
 872              		.cfi_offset 13, -32
 873 0006 4154     		pushq	%r12
 874              		.cfi_def_cfa_offset 40
 875              		.cfi_offset 12, -40
 876 0008 4989FC   		movq	%rdi, %r12
 877 000b 55       		pushq	%rbp
 878              		.cfi_def_cfa_offset 48
 879              		.cfi_offset 6, -48
 880 000c 53       		pushq	%rbx
 881              		.cfi_def_cfa_offset 56
 882              		.cfi_offset 3, -56
 883 000d 4883EC38 		subq	$56, %rsp
 884              		.cfi_def_cfa_offset 112
 323:fltk-1.3.4-1/jpeg/jdarith.c ****   JBLOCKROW block;
 885              		.loc 1 323 0
 886 0011 4C8BAF70 		movq	624(%rdi), %r13
 886      020000
 887              	.LVL106:
 331:fltk-1.3.4-1/jpeg/jdarith.c ****     if (entropy->restarts_to_go == 0)
 888              		.loc 1 331 0
 889 0018 8BBF7401 		movl	372(%rdi), %edi
 889      0000
 890              	.LVL107:
 891 001e 85FF     		testl	%edi, %edi
 892 0020 7413     		je	.L84
 332:fltk-1.3.4-1/jpeg/jdarith.c ****       process_restart(cinfo);
 893              		.loc 1 332 0
 894 0022 418B454C 		movl	76(%r13), %eax
 895 0026 85C0     		testl	%eax, %eax
 896 0028 0F84E901 		je	.L116
 896      0000
 897              	.LVL108:
 898              	.L85:
 334:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 899              		.loc 1 334 0
 900 002e 83E801   		subl	$1, %eax
 901 0031 4189454C 		movl	%eax, 76(%r13)
 902              	.L84:
 337:fltk-1.3.4-1/jpeg/jdarith.c **** 
 903              		.loc 1 337 0
 904 0035 41837D28 		cmpl	$-1, 40(%r13)
 904      FF
 905 003a 0F842A01 		je	.L87
 905      0000
 339:fltk-1.3.4-1/jpeg/jdarith.c **** 
 906              		.loc 1 339 0
 907 0040 498B8424 		movq	560(%r12), %rax
 907      30020000 
 348:fltk-1.3.4-1/jpeg/jdarith.c ****   do {
 908              		.loc 1 348 0
 909 0048 418B8C24 		movl	540(%r12), %ecx
 909      1C020000 
 339:fltk-1.3.4-1/jpeg/jdarith.c **** 
 910              		.loc 1 339 0
 911 0050 48894424 		movq	%rax, 16(%rsp)
 911      10
 912              	.LVL109:
 342:fltk-1.3.4-1/jpeg/jdarith.c ****   tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 913              		.loc 1 342 0
 914 0055 488B06   		movq	(%rsi), %rax
 915              	.LVL110:
 348:fltk-1.3.4-1/jpeg/jdarith.c ****   do {
 916              		.loc 1 348 0
 917 0058 8D69FF   		leal	-1(%rcx), %ebp
 342:fltk-1.3.4-1/jpeg/jdarith.c ****   tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 918              		.loc 1 342 0
 919 005b 48894424 		movq	%rax, 24(%rsp)
 919      18
 920              	.LVL111:
 343:fltk-1.3.4-1/jpeg/jdarith.c **** 
 921              		.loc 1 343 0
 922 0060 498B8424 		movq	456(%r12), %rax
 922      C8010000 
 923              	.LVL112:
 924 0068 48634018 		movslq	24(%rax), %rax
 925              	.LVL113:
 926 006c 48894424 		movq	%rax, 40(%rsp)
 926      28
 927 0071 498D44C5 		leaq	0(%r13,%rax,8), %rax
 927      00
 928 0076 48890424 		movq	%rax, (%rsp)
 364:fltk-1.3.4-1/jpeg/jdarith.c ****     st += 2;
 929              		.loc 1 364 0
 930 007a 498D8550 		leaq	336(%r13), %rax
 930      010000
 931 0081 48894424 		movq	%rax, 8(%rsp)
 931      08
 932              	.LVL114:
 933              	.L100:
 350:fltk-1.3.4-1/jpeg/jdarith.c ****     if (arith_decode(cinfo, st)) break;		/* EOB flag */
 934              		.loc 1 350 0
 935 0086 488B0424 		movq	(%rsp), %rax
 936 008a 8D5C6D00 		leal	0(%rbp,%rbp,2), %ebx
 351:fltk-1.3.4-1/jpeg/jdarith.c ****     for (;;) {
 937              		.loc 1 351 0
 938 008e 4C89E7   		movq	%r12, %rdi
 350:fltk-1.3.4-1/jpeg/jdarith.c ****     if (arith_decode(cinfo, st)) break;		/* EOB flag */
 939              		.loc 1 350 0
 940 0091 4863DB   		movslq	%ebx, %rbx
 941 0094 480398D0 		addq	208(%rax), %rbx
 941      000000
 942              	.LVL115:
 351:fltk-1.3.4-1/jpeg/jdarith.c ****     for (;;) {
 943              		.loc 1 351 0
 944 009b 4889DE   		movq	%rbx, %rsi
 945 009e E8000000 		call	arith_decode
 945      00
 946              	.LVL116:
 947 00a3 85C0     		testl	%eax, %eax
 948 00a5 741B     		je	.L90
 949 00a7 E9BE0000 		jmp	.L87
 949      00
 950 00ac 0F1F4000 		.p2align 4,,10
 951              		.p2align 3
 952              	.L117:
 355:fltk-1.3.4-1/jpeg/jdarith.c ****       if (k >= cinfo->Se) {
 953              		.loc 1 355 0
 954 00b0 4883C303 		addq	$3, %rbx
 955              	.LVL117:
 356:fltk-1.3.4-1/jpeg/jdarith.c **** 	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 956              		.loc 1 356 0
 957 00b4 413BAC24 		cmpl	544(%r12), %ebp
 957      20020000 
 958 00bc 0F8D2E01 		jge	.L115
 958      0000
 959              	.L90:
 354:fltk-1.3.4-1/jpeg/jdarith.c ****       st += 3;
 960              		.loc 1 354 0
 961 00c2 488D7301 		leaq	1(%rbx), %rsi
 962 00c6 4C89E7   		movq	%r12, %rdi
 353:fltk-1.3.4-1/jpeg/jdarith.c ****       if (arith_decode(cinfo, st + 1)) break;
 963              		.loc 1 353 0
 964 00c9 83C501   		addl	$1, %ebp
 965              	.LVL118:
 354:fltk-1.3.4-1/jpeg/jdarith.c ****       st += 3;
 966              		.loc 1 354 0
 967 00cc E8000000 		call	arith_decode
 967      00
 968              	.LVL119:
 969 00d1 85C0     		testl	%eax, %eax
 970 00d3 74DB     		je	.L117
 364:fltk-1.3.4-1/jpeg/jdarith.c ****     st += 2;
 971              		.loc 1 364 0
 972 00d5 488B7424 		movq	8(%rsp), %rsi
 972      08
 973 00da 4C89E7   		movq	%r12, %rdi
 365:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Figure F.23: Decoding the magnitude category of v */
 974              		.loc 1 365 0
 975 00dd 4883C302 		addq	$2, %rbx
 976              	.LVL120:
 364:fltk-1.3.4-1/jpeg/jdarith.c ****     st += 2;
 977              		.loc 1 364 0
 978 00e1 E8000000 		call	arith_decode
 978      00
 979              	.LVL121:
 367:fltk-1.3.4-1/jpeg/jdarith.c ****       if (arith_decode(cinfo, st)) {
 980              		.loc 1 367 0
 981 00e6 4889DE   		movq	%rbx, %rsi
 982 00e9 4C89E7   		movq	%r12, %rdi
 364:fltk-1.3.4-1/jpeg/jdarith.c ****     st += 2;
 983              		.loc 1 364 0
 984 00ec 89442424 		movl	%eax, 36(%rsp)
 985              	.LVL122:
 367:fltk-1.3.4-1/jpeg/jdarith.c ****       if (arith_decode(cinfo, st)) {
 986              		.loc 1 367 0
 987 00f0 E8000000 		call	arith_decode
 987      00
 988              	.LVL123:
 989 00f5 85C0     		testl	%eax, %eax
 990 00f7 4189C6   		movl	%eax, %r14d
 991              	.LVL124:
 992 00fa 0F858000 		jne	.L118
 992      0000
 993              	.LVL125:
 994              	.L91:
 384:fltk-1.3.4-1/jpeg/jdarith.c ****     while (m >>= 1)
 995              		.loc 1 384 0
 996 0100 4883C30E 		addq	$14, %rbx
 997              	.LVL126:
 385:fltk-1.3.4-1/jpeg/jdarith.c ****       if (arith_decode(cinfo, st)) v |= m;
 998              		.loc 1 385 0
 999 0104 4589F7   		movl	%r14d, %r15d
 1000 0107 EB1E     		jmp	.L96
 1001              	.LVL127:
 1002 0109 0F1F8000 		.p2align 4,,10
 1002      000000
 1003              		.p2align 3
 1004              	.L98:
 386:fltk-1.3.4-1/jpeg/jdarith.c ****     v += 1; if (sign) v = -v;
 1005              		.loc 1 386 0
 1006 0110 4889DE   		movq	%rbx, %rsi
 1007 0113 4C89E7   		movq	%r12, %rdi
 1008 0116 E8000000 		call	arith_decode
 1008      00
 1009              	.LVL128:
 1010 011b 4489F2   		movl	%r14d, %edx
 1011 011e 4409FA   		orl	%r15d, %edx
 1012 0121 85C0     		testl	%eax, %eax
 1013 0123 440F45F2 		cmovne	%edx, %r14d
 1014              	.LVL129:
 1015              	.L96:
 385:fltk-1.3.4-1/jpeg/jdarith.c ****       if (arith_decode(cinfo, st)) v |= m;
 1016              		.loc 1 385 0
 1017 0127 41D1FF   		sarl	%r15d
 1018              	.LVL130:
 1019 012a 75E4     		jne	.L98
 387:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Scale and output coefficient in natural (dezigzagged) order */
 1020              		.loc 1 387 0
 1021 012c 418D5601 		leal	1(%r14), %edx
 1022              	.LVL131:
 1023 0130 8B4C2424 		movl	36(%rsp), %ecx
 1024 0134 89D0     		movl	%edx, %eax
 1025 0136 F7D8     		negl	%eax
 1026 0138 85C9     		testl	%ecx, %ecx
 389:fltk-1.3.4-1/jpeg/jdarith.c ****   } while (k < cinfo->Se);
 1027              		.loc 1 389 0
 1028 013a 488B4C24 		movq	16(%rsp), %rcx
 1028      10
 387:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Scale and output coefficient in natural (dezigzagged) order */
 1029              		.loc 1 387 0
 1030 013f 0F45D0   		cmovne	%eax, %edx
 1031              	.LVL132:
 389:fltk-1.3.4-1/jpeg/jdarith.c ****   } while (k < cinfo->Se);
 1032              		.loc 1 389 0
 1033 0142 4863C5   		movslq	%ebp, %rax
 1034 0145 48630481 		movslq	(%rcx,%rax,4), %rax
 1035 0149 418B8C24 		movl	552(%r12), %ecx
 1035      28020000 
 1036 0151 D3E2     		sall	%cl, %edx
 1037              	.LVL133:
 1038 0153 488B4C24 		movq	24(%rsp), %rcx
 1038      18
 1039 0158 66891441 		movw	%dx, (%rcx,%rax,2)
 390:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1040              		.loc 1 390 0
 1041 015c 413BAC24 		cmpl	544(%r12), %ebp
 1041      20020000 
 1042 0164 0F8C1CFF 		jl	.L100
 1042      FFFF
 1043              	.LVL134:
 1044              	.L87:
 393:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1045              		.loc 1 393 0
 1046 016a 4883C438 		addq	$56, %rsp
 1047              		.cfi_remember_state
 1048              		.cfi_def_cfa_offset 56
 1049 016e B8010000 		movl	$1, %eax
 1049      00
 1050 0173 5B       		popq	%rbx
 1051              		.cfi_def_cfa_offset 48
 1052 0174 5D       		popq	%rbp
 1053              		.cfi_def_cfa_offset 40
 1054 0175 415C     		popq	%r12
 1055              		.cfi_def_cfa_offset 32
 1056              	.LVL135:
 1057 0177 415D     		popq	%r13
 1058              		.cfi_def_cfa_offset 24
 1059              	.LVL136:
 1060 0179 415E     		popq	%r14
 1061              		.cfi_def_cfa_offset 16
 1062 017b 415F     		popq	%r15
 1063              		.cfi_def_cfa_offset 8
 1064 017d C3       		ret
 1065              	.LVL137:
 1066 017e 6690     		.p2align 4,,10
 1067              		.p2align 3
 1068              	.L118:
 1069              		.cfi_restore_state
 368:fltk-1.3.4-1/jpeg/jdarith.c **** 	m <<= 1;
 1070              		.loc 1 368 0
 1071 0180 4889DE   		movq	%rbx, %rsi
 1072 0183 4C89E7   		movq	%r12, %rdi
 1073 0186 E8000000 		call	arith_decode
 1073      00
 1074              	.LVL138:
 1075 018b 85C0     		testl	%eax, %eax
 1076 018d 0F846DFF 		je	.L91
 1076      FFFF
 370:fltk-1.3.4-1/jpeg/jdarith.c **** 	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 1077              		.loc 1 370 0
 1078 0193 488B4424 		movq	40(%rsp), %rax
 1078      28
 369:fltk-1.3.4-1/jpeg/jdarith.c **** 	st = entropy->ac_stats[tbl] +
 1079              		.loc 1 369 0
 1080 0198 4501F6   		addl	%r14d, %r14d
 1081              	.LVL139:
 370:fltk-1.3.4-1/jpeg/jdarith.c **** 	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 1082              		.loc 1 370 0
 1083 019b BBBD0000 		movl	$189, %ebx
 1083      00
 1084              	.LVL140:
 1085 01a0 410FB684 		movzbl	356(%r12,%rax), %eax
 1085      04640100 
 1085      00
 1086 01a9 39C5     		cmpl	%eax, %ebp
 1087 01ab B8D90000 		movl	$217, %eax
 1087      00
 1088 01b0 480F4FD8 		cmovg	%rax, %rbx
 1089 01b4 488B0424 		movq	(%rsp), %rax
 1090 01b8 480398D0 		addq	208(%rax), %rbx
 1090      000000
 1091              	.LVL141:
 372:fltk-1.3.4-1/jpeg/jdarith.c **** 	  if ((m <<= 1) == 0x8000) {
 1092              		.loc 1 372 0
 1093 01bf EB0B     		jmp	.L93
 1094              		.p2align 4,,10
 1095 01c1 0F1F8000 		.p2align 3
 1095      000000
 1096              	.L94:
 378:fltk-1.3.4-1/jpeg/jdarith.c **** 	}
 1097              		.loc 1 378 0
 1098 01c8 4883C301 		addq	$1, %rbx
 1099              	.LVL142:
 1100              	.L93:
 372:fltk-1.3.4-1/jpeg/jdarith.c **** 	  if ((m <<= 1) == 0x8000) {
 1101              		.loc 1 372 0
 1102 01cc 4889DE   		movq	%rbx, %rsi
 1103 01cf 4C89E7   		movq	%r12, %rdi
 1104 01d2 E8000000 		call	arith_decode
 1104      00
 1105              	.LVL143:
 1106 01d7 85C0     		testl	%eax, %eax
 1107 01d9 0F8421FF 		je	.L91
 1107      FFFF
 373:fltk-1.3.4-1/jpeg/jdarith.c **** 	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 1108              		.loc 1 373 0
 1109 01df 4501F6   		addl	%r14d, %r14d
 1110              	.LVL144:
 1111 01e2 4181FE00 		cmpl	$32768, %r14d
 1111      800000
 1112 01e9 75DD     		jne	.L94
 1113              	.LVL145:
 1114 01eb 0F1F4400 		.p2align 4,,10
 1114      00
 1115              		.p2align 3
 1116              	.L115:
 374:fltk-1.3.4-1/jpeg/jdarith.c **** 	    entropy->ct = -1;			/* magnitude overflow */
 1117              		.loc 1 374 0
 1118 01f0 498B0424 		movq	(%r12), %rax
 1119 01f4 BEFFFFFF 		movl	$-1, %esi
 1119      FF
 1120 01f9 4C89E7   		movq	%r12, %rdi
 1121 01fc C7402875 		movl	$117, 40(%rax)
 1121      000000
 1122              	.LVL146:
 1123 0203 498B0424 		movq	(%r12), %rax
 1124 0207 FF5008   		call	*8(%rax)
 1125              	.LVL147:
 375:fltk-1.3.4-1/jpeg/jdarith.c **** 	    return TRUE;
 1126              		.loc 1 375 0
 1127 020a 41C74528 		movl	$-1, 40(%r13)
 1127      FFFFFFFF 
 376:fltk-1.3.4-1/jpeg/jdarith.c **** 	  }
 1128              		.loc 1 376 0
 1129 0212 E953FFFF 		jmp	.L87
 1129      FF
 1130              	.LVL148:
 1131              	.L116:
 333:fltk-1.3.4-1/jpeg/jdarith.c ****     entropy->restarts_to_go--;
 1132              		.loc 1 333 0
 1133 0217 4C89E7   		movq	%r12, %rdi
 1134 021a 48893424 		movq	%rsi, (%rsp)
 1135 021e E8000000 		call	process_restart
 1135      00
 1136              	.LVL149:
 1137 0223 418B454C 		movl	76(%r13), %eax
 1138 0227 488B3424 		movq	(%rsp), %rsi
 1139 022b E9FEFDFF 		jmp	.L85
 1139      FF
 1140              		.cfi_endproc
 1141              	.LFE65:
 1143              		.section	.text.unlikely.decode_mcu_AC_first
 1144              	.LCOLDE5:
 1145              		.section	.text.decode_mcu_AC_first
 1146              	.LHOTE5:
 1147              		.section	.text.unlikely.decode_mcu_DC_refine,"ax",@progbits
 1148              	.LCOLDB6:
 1149              		.section	.text.decode_mcu_DC_refine,"ax",@progbits
 1150              	.LHOTB6:
 1151              		.p2align 4,,15
 1153              	decode_mcu_DC_refine:
 1154              	.LFB66:
 404:fltk-1.3.4-1/jpeg/jdarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 1155              		.loc 1 404 0
 1156              		.cfi_startproc
 1157              	.LVL150:
 1158 0000 4156     		pushq	%r14
 1159              		.cfi_def_cfa_offset 16
 1160              		.cfi_offset 14, -16
 1161 0002 4155     		pushq	%r13
 1162              		.cfi_def_cfa_offset 24
 1163              		.cfi_offset 13, -24
 1164 0004 4154     		pushq	%r12
 1165              		.cfi_def_cfa_offset 32
 1166              		.cfi_offset 12, -32
 1167 0006 55       		pushq	%rbp
 1168              		.cfi_def_cfa_offset 40
 1169              		.cfi_offset 6, -40
 1170 0007 4989FC   		movq	%rdi, %r12
 1171 000a 53       		pushq	%rbx
 1172              		.cfi_def_cfa_offset 48
 1173              		.cfi_offset 3, -48
 1174 000b 4883EC10 		subq	$16, %rsp
 1175              		.cfi_def_cfa_offset 64
 410:fltk-1.3.4-1/jpeg/jdarith.c ****     if (entropy->restarts_to_go == 0)
 1176              		.loc 1 410 0
 1177 000f 8B977401 		movl	372(%rdi), %edx
 1177      0000
 405:fltk-1.3.4-1/jpeg/jdarith.c ****   unsigned char *st;
 1178              		.loc 1 405 0
 1179 0015 4C8BAF70 		movq	624(%rdi), %r13
 1179      020000
 1180              	.LVL151:
 410:fltk-1.3.4-1/jpeg/jdarith.c ****     if (entropy->restarts_to_go == 0)
 1181              		.loc 1 410 0
 1182 001c 85D2     		testl	%edx, %edx
 1183 001e 740F     		je	.L120
 411:fltk-1.3.4-1/jpeg/jdarith.c ****       process_restart(cinfo);
 1184              		.loc 1 411 0
 1185 0020 418B454C 		movl	76(%r13), %eax
 1186 0024 85C0     		testl	%eax, %eax
 1187 0026 7478     		je	.L133
 1188              	.LVL152:
 1189              	.L121:
 413:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 1190              		.loc 1 413 0
 1191 0028 83E801   		subl	$1, %eax
 1192 002b 4189454C 		movl	%eax, 76(%r13)
 1193              	.L120:
 417:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1194              		.loc 1 417 0
 1195 002f 418B8C24 		movl	552(%r12), %ecx
 1195      28020000 
 421:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Encoded data is simply the next bit of the two's-complement DC value */
 1196              		.loc 1 421 0
 1197 0037 418B8424 		movl	496(%r12), %eax
 1197      F0010000 
 417:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1198              		.loc 1 417 0
 1199 003f 41BE0100 		movl	$1, %r14d
 1199      0000
 416:fltk-1.3.4-1/jpeg/jdarith.c ****   p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 1200              		.loc 1 416 0
 1201 0045 4981C550 		addq	$336, %r13
 1201      010000
 1202              	.LVL153:
 421:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Encoded data is simply the next bit of the two's-complement DC value */
 1203              		.loc 1 421 0
 1204 004c 31DB     		xorl	%ebx, %ebx
 1205 004e 4889F5   		movq	%rsi, %rbp
 417:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1206              		.loc 1 417 0
 1207 0051 41D3E6   		sall	%cl, %r14d
 1208              	.LVL154:
 421:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Encoded data is simply the next bit of the two's-complement DC value */
 1209              		.loc 1 421 0
 1210 0054 85C0     		testl	%eax, %eax
 1211 0056 7E30     		jle	.L131
 1212              	.LVL155:
 1213 0058 0F1F8400 		.p2align 4,,10
 1213      00000000 
 1214              		.p2align 3
 1215              	.L128:
 423:fltk-1.3.4-1/jpeg/jdarith.c ****       MCU_data[blkn][0][0] |= p1;
 1216              		.loc 1 423 0
 1217 0060 4C89EE   		movq	%r13, %rsi
 1218 0063 4C89E7   		movq	%r12, %rdi
 1219 0066 E8000000 		call	arith_decode
 1219      00
 1220              	.LVL156:
 1221 006b 85C0     		testl	%eax, %eax
 1222 006d 7408     		je	.L123
 424:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 1223              		.loc 1 424 0
 1224 006f 488B4500 		movq	0(%rbp), %rax
 1225 0073 66440930 		orw	%r14w, (%rax)
 1226              	.L123:
 421:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Encoded data is simply the next bit of the two's-complement DC value */
 1227              		.loc 1 421 0 discriminator 2
 1228 0077 83C301   		addl	$1, %ebx
 1229              	.LVL157:
 1230 007a 4883C508 		addq	$8, %rbp
 1231 007e 41399C24 		cmpl	%ebx, 496(%r12)
 1231      F0010000 
 1232 0086 7FD8     		jg	.L128
 1233              	.LVL158:
 1234              	.L131:
 428:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1235              		.loc 1 428 0
 1236 0088 4883C410 		addq	$16, %rsp
 1237              		.cfi_remember_state
 1238              		.cfi_def_cfa_offset 48
 1239 008c B8010000 		movl	$1, %eax
 1239      00
 1240 0091 5B       		popq	%rbx
 1241              		.cfi_def_cfa_offset 40
 1242 0092 5D       		popq	%rbp
 1243              		.cfi_def_cfa_offset 32
 1244 0093 415C     		popq	%r12
 1245              		.cfi_def_cfa_offset 24
 1246              	.LVL159:
 1247 0095 415D     		popq	%r13
 1248              		.cfi_def_cfa_offset 16
 1249              	.LVL160:
 1250 0097 415E     		popq	%r14
 1251              		.cfi_def_cfa_offset 8
 1252              	.LVL161:
 1253 0099 C3       		ret
 1254              	.LVL162:
 1255 009a 660F1F44 		.p2align 4,,10
 1255      0000
 1256              		.p2align 3
 1257              	.L133:
 1258              		.cfi_restore_state
 1259 00a0 48897424 		movq	%rsi, 8(%rsp)
 1259      08
 412:fltk-1.3.4-1/jpeg/jdarith.c ****     entropy->restarts_to_go--;
 1260              		.loc 1 412 0
 1261 00a5 E8000000 		call	process_restart
 1261      00
 1262              	.LVL163:
 1263 00aa 418B454C 		movl	76(%r13), %eax
 1264 00ae 488B7424 		movq	8(%rsp), %rsi
 1264      08
 1265 00b3 E970FFFF 		jmp	.L121
 1265      FF
 1266              		.cfi_endproc
 1267              	.LFE66:
 1269              		.section	.text.unlikely.decode_mcu_DC_refine
 1270              	.LCOLDE6:
 1271              		.section	.text.decode_mcu_DC_refine
 1272              	.LHOTE6:
 1273              		.section	.text.unlikely.decode_mcu_AC_refine,"ax",@progbits
 1274              	.LCOLDB7:
 1275              		.section	.text.decode_mcu_AC_refine,"ax",@progbits
 1276              	.LHOTB7:
 1277              		.p2align 4,,15
 1279              	decode_mcu_AC_refine:
 1280              	.LFB67:
 437:fltk-1.3.4-1/jpeg/jdarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 1281              		.loc 1 437 0
 1282              		.cfi_startproc
 1283              	.LVL164:
 1284 0000 4157     		pushq	%r15
 1285              		.cfi_def_cfa_offset 16
 1286              		.cfi_offset 15, -16
 1287 0002 4156     		pushq	%r14
 1288              		.cfi_def_cfa_offset 24
 1289              		.cfi_offset 14, -24
 1290 0004 4989FF   		movq	%rdi, %r15
 1291 0007 4155     		pushq	%r13
 1292              		.cfi_def_cfa_offset 32
 1293              		.cfi_offset 13, -32
 1294 0009 4154     		pushq	%r12
 1295              		.cfi_def_cfa_offset 40
 1296              		.cfi_offset 12, -40
 1297 000b 55       		pushq	%rbp
 1298              		.cfi_def_cfa_offset 48
 1299              		.cfi_offset 6, -48
 1300 000c 53       		pushq	%rbx
 1301              		.cfi_def_cfa_offset 56
 1302              		.cfi_offset 3, -56
 1303 000d 4883EC38 		subq	$56, %rsp
 1304              		.cfi_def_cfa_offset 112
 447:fltk-1.3.4-1/jpeg/jdarith.c ****     if (entropy->restarts_to_go == 0)
 1305              		.loc 1 447 0
 1306 0011 8B977401 		movl	372(%rdi), %edx
 1306      0000
 438:fltk-1.3.4-1/jpeg/jdarith.c ****   JBLOCKROW block;
 1307              		.loc 1 438 0
 1308 0017 488B8770 		movq	624(%rdi), %rax
 1308      020000
 447:fltk-1.3.4-1/jpeg/jdarith.c ****     if (entropy->restarts_to_go == 0)
 1309              		.loc 1 447 0
 1310 001e 85D2     		testl	%edx, %edx
 438:fltk-1.3.4-1/jpeg/jdarith.c ****   JBLOCKROW block;
 1311              		.loc 1 438 0
 1312 0020 48894424 		movq	%rax, 8(%rsp)
 1312      08
 1313              	.LVL165:
 447:fltk-1.3.4-1/jpeg/jdarith.c ****     if (entropy->restarts_to_go == 0)
 1314              		.loc 1 447 0
 1315 0025 7416     		je	.L135
 448:fltk-1.3.4-1/jpeg/jdarith.c ****       process_restart(cinfo);
 1316              		.loc 1 448 0
 1317 0027 8B404C   		movl	76(%rax), %eax
 1318              	.LVL166:
 1319 002a 85C0     		testl	%eax, %eax
 1320 002c 0F84E601 		je	.L158
 1320      0000
 1321              	.LVL167:
 1322              	.L136:
 450:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 1323              		.loc 1 450 0
 1324 0032 488B7C24 		movq	8(%rsp), %rdi
 1324      08
 1325 0037 83E801   		subl	$1, %eax
 1326 003a 89474C   		movl	%eax, 76(%rdi)
 1327              	.L135:
 453:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1328              		.loc 1 453 0
 1329 003d 488B4424 		movq	8(%rsp), %rax
 1329      08
 1330 0042 837828FF 		cmpl	$-1, 40(%rax)
 1331 0046 0F843401 		je	.L138
 1331      0000
 455:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1332              		.loc 1 455 0
 1333 004c 498B8730 		movq	560(%r15), %rax
 1333      020000
 461:fltk-1.3.4-1/jpeg/jdarith.c ****   m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 1334              		.loc 1 461 0
 1335 0053 418B8F28 		movl	552(%r15), %ecx
 1335      020000
 458:fltk-1.3.4-1/jpeg/jdarith.c ****   tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 1336              		.loc 1 458 0
 1337 005a 488B1E   		movq	(%rsi), %rbx
 455:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1338              		.loc 1 455 0
 1339 005d 4889C2   		movq	%rax, %rdx
 1340 0060 48894424 		movq	%rax, 24(%rsp)
 1340      18
 1341              	.LVL168:
 459:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1342              		.loc 1 459 0
 1343 0065 498B87C8 		movq	456(%r15), %rax
 1343      010000
 1344              	.LVL169:
 1345 006c 448B6818 		movl	24(%rax), %r13d
 1346              	.LVL170:
 461:fltk-1.3.4-1/jpeg/jdarith.c ****   m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 1347              		.loc 1 461 0
 1348 0070 B8010000 		movl	$1, %eax
 1348      00
 1349 0075 D3E0     		sall	%cl, %eax
 1350 0077 89442420 		movl	%eax, 32(%rsp)
 1351              	.LVL171:
 462:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1352              		.loc 1 462 0
 1353 007b B8FFFFFF 		movl	$-1, %eax
 1353      FF
 1354              	.LVL172:
 1355 0080 D3E0     		sall	%cl, %eax
 1356 0082 89442424 		movl	%eax, 36(%rsp)
 1357              	.LVL173:
 465:fltk-1.3.4-1/jpeg/jdarith.c ****   do {
 1358              		.loc 1 465 0
 1359 0086 49638720 		movslq	544(%r15), %rax
 1359      020000
 1360              	.LVL174:
 1361 008d 890424   		movl	%eax, (%rsp)
 1362              	.LVL175:
 1363 0090 488D0482 		leaq	(%rdx,%rax,4), %rax
 1364              	.LVL176:
 1365 0094 EB14     		jmp	.L140
 1366              	.LVL177:
 1367 0096 662E0F1F 		.p2align 4,,10
 1367      84000000 
 1367      0000
 1368              		.p2align 3
 1369              	.L159:
 1370 00a0 4883E804 		subq	$4, %rax
 468:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1371              		.loc 1 468 0
 1372 00a4 832C2401 		subl	$1, (%rsp)
 1373              	.LVL178:
 1374 00a8 740A     		je	.L139
 1375              	.L140:
 467:fltk-1.3.4-1/jpeg/jdarith.c ****   } while (--kex);
 1376              		.loc 1 467 0
 1377 00aa 486310   		movslq	(%rax), %rdx
 1378 00ad 66833C53 		cmpw	$0, (%rbx,%rdx,2)
 1378      00
 1379 00b2 74EC     		je	.L159
 1380              	.L139:
 470:fltk-1.3.4-1/jpeg/jdarith.c ****   do {
 1381              		.loc 1 470 0
 1382 00b4 418B871C 		movl	540(%r15), %eax
 1382      020000
 1383 00bb 448D70FF 		leal	-1(%rax), %r14d
 1384              	.LVL179:
 1385 00bf 4963C5   		movslq	%r13d, %rax
 1386 00c2 48894424 		movq	%rax, 16(%rsp)
 1386      10
 487:fltk-1.3.4-1/jpeg/jdarith.c **** 	  *thiscoef = m1;
 1387              		.loc 1 487 0
 1388 00c7 488B4424 		movq	8(%rsp), %rax
 1388      08
 1389 00cc 48055001 		addq	$336, %rax
 1389      0000
 1390 00d2 48894424 		movq	%rax, 40(%rsp)
 1390      28
 1391              	.LVL180:
 1392              	.L150:
 472:fltk-1.3.4-1/jpeg/jdarith.c ****     if (k >= kex)
 1393              		.loc 1 472 0
 1394 00d7 488B4424 		movq	8(%rsp), %rax
 1394      08
 1395 00dc 488B5424 		movq	16(%rsp), %rdx
 1395      10
 1396 00e1 438D0C76 		leal	(%r14,%r14,2), %ecx
 1397 00e5 4863C9   		movslq	%ecx, %rcx
 1398 00e8 48038CD0 		addq	208(%rax,%rdx,8), %rcx
 1398      D0000000 
 473:fltk-1.3.4-1/jpeg/jdarith.c ****       if (arith_decode(cinfo, st)) break;	/* EOB flag */
 1399              		.loc 1 473 0
 1400 00f0 443B3424 		cmpl	(%rsp), %r14d
 472:fltk-1.3.4-1/jpeg/jdarith.c ****     if (k >= kex)
 1401              		.loc 1 472 0
 1402 00f4 4989CC   		movq	%rcx, %r12
 1403              	.LVL181:
 473:fltk-1.3.4-1/jpeg/jdarith.c ****       if (arith_decode(cinfo, st)) break;	/* EOB flag */
 1404              		.loc 1 473 0
 1405 00f7 0F8D0301 		jge	.L141
 1405      0000
 1406              	.LVL182:
 1407              	.L144:
 1408 00fd 488B5424 		movq	24(%rsp), %rdx
 1408      18
 1409 0102 4963C6   		movslq	%r14d, %rax
 1410 0105 488D2C82 		leaq	(%rdx,%rax,4), %rbp
 1411 0109 EB2B     		jmp	.L142
 1412              	.LVL183:
 1413 010b 0F1F4400 		.p2align 4,,10
 1413      00
 1414              		.p2align 3
 1415              	.L145:
 486:fltk-1.3.4-1/jpeg/jdarith.c **** 	if (arith_decode(cinfo, entropy->fixed_bin))
 1416              		.loc 1 486 0
 1417 0110 498D7424 		leaq	1(%r12), %rsi
 1417      01
 1418 0115 4C89FF   		movq	%r15, %rdi
 1419 0118 E8000000 		call	arith_decode
 1419      00
 1420              	.LVL184:
 1421 011d 85C0     		testl	%eax, %eax
 1422 011f 7577     		jne	.L160
 493:fltk-1.3.4-1/jpeg/jdarith.c ****       if (k >= cinfo->Se) {
 1423              		.loc 1 493 0
 1424 0121 4983C403 		addq	$3, %r12
 1425              	.LVL185:
 1426 0125 4883C504 		addq	$4, %rbp
 494:fltk-1.3.4-1/jpeg/jdarith.c **** 	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 1427              		.loc 1 494 0
 1428 0129 453BB720 		cmpl	544(%r15), %r14d
 1428      020000
 1429 0130 0F8D9A00 		jge	.L161
 1429      0000
 1430              	.LVL186:
 1431              	.L142:
 476:fltk-1.3.4-1/jpeg/jdarith.c ****       if (*thiscoef) {				/* previously nonzero coef */
 1432              		.loc 1 476 0
 1433 0136 48634504 		movslq	4(%rbp), %rax
 1434 013a 4183C601 		addl	$1, %r14d
 1435              	.LVL187:
 1436 013e 4C8D2C43 		leaq	(%rbx,%rax,2), %r13
 1437              	.LVL188:
 477:fltk-1.3.4-1/jpeg/jdarith.c **** 	if (arith_decode(cinfo, st + 2)) {
 1438              		.loc 1 477 0
 1439 0142 6641837D 		cmpw	$0, 0(%r13)
 1439      0000
 1440 0148 74C6     		je	.L145
 478:fltk-1.3.4-1/jpeg/jdarith.c **** 	  if (*thiscoef < 0)
 1441              		.loc 1 478 0
 1442 014a 498D7424 		leaq	2(%r12), %rsi
 1442      02
 1443 014f 4C89FF   		movq	%r15, %rdi
 1444 0152 E8000000 		call	arith_decode
 1444      00
 1445              	.LVL189:
 1446 0157 85C0     		testl	%eax, %eax
 1447 0159 7418     		je	.L146
 479:fltk-1.3.4-1/jpeg/jdarith.c **** 	    *thiscoef += m1;
 1448              		.loc 1 479 0
 1449 015b 410FB745 		movzwl	0(%r13), %eax
 1449      00
 1450 0160 6685C0   		testw	%ax, %ax
 1451 0163 0F88C900 		js	.L162
 1451      0000
 482:fltk-1.3.4-1/jpeg/jdarith.c **** 	}
 1452              		.loc 1 482 0
 1453 0169 66034424 		addw	32(%rsp), %ax
 1453      20
 1454 016e 66418945 		movw	%ax, 0(%r13)
 1454      00
 1455              	.L146:
 500:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1456              		.loc 1 500 0
 1457 0173 453BB720 		cmpl	544(%r15), %r14d
 1457      020000
 1458 017a 0F8C57FF 		jl	.L150
 1458      FFFF
 1459              	.LVL190:
 1460              	.L138:
 503:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1461              		.loc 1 503 0
 1462 0180 4883C438 		addq	$56, %rsp
 1463              		.cfi_remember_state
 1464              		.cfi_def_cfa_offset 56
 1465 0184 B8010000 		movl	$1, %eax
 1465      00
 1466 0189 5B       		popq	%rbx
 1467              		.cfi_def_cfa_offset 48
 1468 018a 5D       		popq	%rbp
 1469              		.cfi_def_cfa_offset 40
 1470 018b 415C     		popq	%r12
 1471              		.cfi_def_cfa_offset 32
 1472 018d 415D     		popq	%r13
 1473              		.cfi_def_cfa_offset 24
 1474 018f 415E     		popq	%r14
 1475              		.cfi_def_cfa_offset 16
 1476 0191 415F     		popq	%r15
 1477              		.cfi_def_cfa_offset 8
 1478              	.LVL191:
 1479 0193 C3       		ret
 1480              	.LVL192:
 1481              		.p2align 4,,10
 1482 0194 0F1F4000 		.p2align 3
 1483              	.L160:
 1484              		.cfi_restore_state
 487:fltk-1.3.4-1/jpeg/jdarith.c **** 	  *thiscoef = m1;
 1485              		.loc 1 487 0
 1486 0198 488B7424 		movq	40(%rsp), %rsi
 1486      28
 1487 019d 4C89FF   		movq	%r15, %rdi
 1488 01a0 E8000000 		call	arith_decode
 1488      00
 1489              	.LVL193:
 488:fltk-1.3.4-1/jpeg/jdarith.c **** 	else
 1490              		.loc 1 488 0
 1491 01a5 85C0     		testl	%eax, %eax
 1492 01a7 0FB74424 		movzwl	36(%rsp), %eax
 1492      24
 1493 01ac 660F4444 		cmove	32(%rsp), %ax
 1493      2420
 1494 01b2 66418945 		movw	%ax, 0(%r13)
 1494      00
 500:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1495              		.loc 1 500 0
 1496 01b7 453BB720 		cmpl	544(%r15), %r14d
 1496      020000
 1497 01be 0F8C13FF 		jl	.L150
 1497      FFFF
 1498 01c4 EBBA     		jmp	.L138
 1499 01c6 662E0F1F 		.p2align 4,,10
 1499      84000000 
 1499      0000
 1500              		.p2align 3
 1501              	.L161:
 495:fltk-1.3.4-1/jpeg/jdarith.c **** 	entropy->ct = -1;			/* spectral overflow */
 1502              		.loc 1 495 0
 1503 01d0 498B07   		movq	(%r15), %rax
 1504 01d3 BEFFFFFF 		movl	$-1, %esi
 1504      FF
 1505 01d8 4C89FF   		movq	%r15, %rdi
 1506 01db C7402875 		movl	$117, 40(%rax)
 1506      000000
 1507 01e2 498B07   		movq	(%r15), %rax
 1508 01e5 FF5008   		call	*8(%rax)
 1509              	.LVL194:
 496:fltk-1.3.4-1/jpeg/jdarith.c **** 	return TRUE;
 1510              		.loc 1 496 0
 1511 01e8 488B4424 		movq	8(%rsp), %rax
 1511      08
 1512 01ed C74028FF 		movl	$-1, 40(%rax)
 1512      FFFFFF
 497:fltk-1.3.4-1/jpeg/jdarith.c ****       }
 1513              		.loc 1 497 0
 1514 01f4 EB8A     		jmp	.L138
 1515              	.LVL195:
 1516 01f6 662E0F1F 		.p2align 4,,10
 1516      84000000 
 1516      0000
 1517              		.p2align 3
 1518              	.L141:
 474:fltk-1.3.4-1/jpeg/jdarith.c ****     for (;;) {
 1519              		.loc 1 474 0
 1520 0200 4889CE   		movq	%rcx, %rsi
 1521 0203 4C89FF   		movq	%r15, %rdi
 1522 0206 E8000000 		call	arith_decode
 1522      00
 1523              	.LVL196:
 1524 020b 85C0     		testl	%eax, %eax
 1525 020d 0F84EAFE 		je	.L144
 1525      FFFF
 1526 0213 E968FFFF 		jmp	.L138
 1526      FF
 1527              	.LVL197:
 1528              	.L158:
 1529 0218 48893424 		movq	%rsi, (%rsp)
 449:fltk-1.3.4-1/jpeg/jdarith.c ****     entropy->restarts_to_go--;
 1530              		.loc 1 449 0
 1531 021c E8000000 		call	process_restart
 1531      00
 1532              	.LVL198:
 1533 0221 488B4424 		movq	8(%rsp), %rax
 1533      08
 1534 0226 488B3424 		movq	(%rsp), %rsi
 1535 022a 8B404C   		movl	76(%rax), %eax
 1536 022d E900FEFF 		jmp	.L136
 1536      FF
 1537              	.LVL199:
 1538              	.L162:
 480:fltk-1.3.4-1/jpeg/jdarith.c **** 	  else
 1539              		.loc 1 480 0
 1540 0232 66034424 		addw	36(%rsp), %ax
 1540      24
 1541 0237 66418945 		movw	%ax, 0(%r13)
 1541      00
 500:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1542              		.loc 1 500 0
 1543 023c 453BB720 		cmpl	544(%r15), %r14d
 1543      020000
 1544 0243 0F8C8EFE 		jl	.L150
 1544      FFFF
 1545 0249 E932FFFF 		jmp	.L138
 1545      FF
 1546              		.cfi_endproc
 1547              	.LFE67:
 1549              		.section	.text.unlikely.decode_mcu_AC_refine
 1550              	.LCOLDE7:
 1551              		.section	.text.decode_mcu_AC_refine
 1552              	.LHOTE7:
 1553              		.section	.text.unlikely.decode_mcu,"ax",@progbits
 1554              	.LCOLDB8:
 1555              		.section	.text.decode_mcu,"ax",@progbits
 1556              	.LHOTB8:
 1557              		.p2align 4,,15
 1559              	decode_mcu:
 1560              	.LFB68:
 512:fltk-1.3.4-1/jpeg/jdarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 1561              		.loc 1 512 0
 1562              		.cfi_startproc
 1563              	.LVL200:
 1564 0000 4157     		pushq	%r15
 1565              		.cfi_def_cfa_offset 16
 1566              		.cfi_offset 15, -16
 1567 0002 4156     		pushq	%r14
 1568              		.cfi_def_cfa_offset 24
 1569              		.cfi_offset 14, -24
 1570 0004 4989FF   		movq	%rdi, %r15
 1571 0007 4155     		pushq	%r13
 1572              		.cfi_def_cfa_offset 32
 1573              		.cfi_offset 13, -32
 1574 0009 4154     		pushq	%r12
 1575              		.cfi_def_cfa_offset 40
 1576              		.cfi_offset 12, -40
 1577 000b 55       		pushq	%rbp
 1578              		.cfi_def_cfa_offset 48
 1579              		.cfi_offset 6, -48
 1580 000c 53       		pushq	%rbx
 1581              		.cfi_def_cfa_offset 56
 1582              		.cfi_offset 3, -56
 1583 000d 4883EC58 		subq	$88, %rsp
 1584              		.cfi_def_cfa_offset 144
 522:fltk-1.3.4-1/jpeg/jdarith.c ****     if (entropy->restarts_to_go == 0)
 1585              		.loc 1 522 0
 1586 0011 448B8F74 		movl	372(%rdi), %r9d
 1586      010000
 513:fltk-1.3.4-1/jpeg/jdarith.c ****   jpeg_component_info * compptr;
 1587              		.loc 1 513 0
 1588 0018 4C8BAF70 		movq	624(%rdi), %r13
 1588      020000
 1589              	.LVL201:
 522:fltk-1.3.4-1/jpeg/jdarith.c ****     if (entropy->restarts_to_go == 0)
 1590              		.loc 1 522 0
 1591 001f 4585C9   		testl	%r9d, %r9d
 1592 0022 7413     		je	.L164
 523:fltk-1.3.4-1/jpeg/jdarith.c ****       process_restart(cinfo);
 1593              		.loc 1 523 0
 1594 0024 418B454C 		movl	76(%r13), %eax
 1595 0028 85C0     		testl	%eax, %eax
 1596 002a 0F84A003 		je	.L222
 1596      0000
 1597              	.LVL202:
 1598              	.L165:
 525:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 1599              		.loc 1 525 0
 1600 0030 83E801   		subl	$1, %eax
 1601 0033 4189454C 		movl	%eax, 76(%r13)
 1602              	.L164:
 528:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1603              		.loc 1 528 0
 1604 0037 41837D28 		cmpl	$-1, 40(%r13)
 1604      FF
 1605 003c 0F84D100 		je	.L167
 1605      0000
 534:fltk-1.3.4-1/jpeg/jdarith.c ****     block = MCU_data[blkn];
 1606              		.loc 1 534 0
 1607 0042 458B87F0 		movl	496(%r15), %r8d
 1607      010000
 530:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1608              		.loc 1 530 0
 1609 0049 498B8730 		movq	560(%r15), %rax
 1609      020000
 534:fltk-1.3.4-1/jpeg/jdarith.c ****     block = MCU_data[blkn];
 1610              		.loc 1 534 0
 1611 0050 4585C0   		testl	%r8d, %r8d
 530:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1612              		.loc 1 530 0
 1613 0053 48894424 		movq	%rax, 64(%rsp)
 1613      40
 1614              	.LVL203:
 534:fltk-1.3.4-1/jpeg/jdarith.c ****     block = MCU_data[blkn];
 1615              		.loc 1 534 0
 1616 0058 0F8EB500 		jle	.L167
 1616      0000
 1617 005e 498D87F4 		leaq	500(%r15), %rax
 1617      010000
 1618              	.LVL204:
 1619 0065 48897424 		movq	%rsi, 16(%rsp)
 1619      10
 1620 006a C7442424 		movl	$0, 36(%rsp)
 1620      00000000 
 606:fltk-1.3.4-1/jpeg/jdarith.c ****       st += 2;
 1621              		.loc 1 606 0
 1622 0072 4D89EE   		movq	%r13, %r14
 1623 0075 48894424 		movq	%rax, 24(%rsp)
 1623      18
 1624 007a 498D8550 		leaq	336(%r13), %rax
 1624      010000
 1625 0081 48894424 		movq	%rax, 56(%rsp)
 1625      38
 1626              	.LVL205:
 1627              	.L183:
 535:fltk-1.3.4-1/jpeg/jdarith.c ****     ci = cinfo->MCU_membership[blkn];
 1628              		.loc 1 535 0
 1629 0086 488B4424 		movq	16(%rsp), %rax
 1629      10
 547:fltk-1.3.4-1/jpeg/jdarith.c ****       entropy->dc_context[ci] = 0;
 1630              		.loc 1 547 0
 1631 008b 4C89FF   		movq	%r15, %rdi
 535:fltk-1.3.4-1/jpeg/jdarith.c ****     ci = cinfo->MCU_membership[blkn];
 1632              		.loc 1 535 0
 1633 008e 488B00   		movq	(%rax), %rax
 1634 0091 48894424 		movq	%rax, 8(%rsp)
 1634      08
 1635              	.LVL206:
 537:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1636              		.loc 1 537 0
 1637 0096 488B4424 		movq	24(%rsp), %rax
 1637      18
 1638              	.LVL207:
 1639 009b 486300   		movslq	(%rax), %rax
 1640 009e 498B8CC7 		movq	456(%r15,%rax,8), %rcx
 1640      C8010000 
 1641 00a6 498D2C86 		leaq	(%r14,%rax,4), %rbp
 544:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1642              		.loc 1 544 0
 1643 00aa 48635D3C 		movslq	60(%rbp), %rbx
 1644 00ae 4C636914 		movslq	20(%rcx), %r13
 537:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1645              		.loc 1 537 0
 1646 00b2 48894C24 		movq	%rcx, 40(%rsp)
 1646      28
 1647              	.LVL208:
 1648 00b7 4B8D0CEE 		leaq	(%r14,%r13,8), %rcx
 1649              	.LVL209:
 544:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1650              		.loc 1 544 0
 1651 00bb 48035950 		addq	80(%rcx), %rbx
 1652              	.LVL210:
 1653 00bf 48894C24 		movq	%rcx, 48(%rsp)
 1653      30
 547:fltk-1.3.4-1/jpeg/jdarith.c ****       entropy->dc_context[ci] = 0;
 1654              		.loc 1 547 0
 1655 00c4 4889DE   		movq	%rbx, %rsi
 1656 00c7 E8000000 		call	arith_decode
 1656      00
 1657              	.LVL211:
 1658 00cc 85C0     		testl	%eax, %eax
 1659 00ce 0F857C01 		jne	.L169
 1659      0000
 1660 00d4 8B552C   		movl	44(%rbp), %edx
 548:fltk-1.3.4-1/jpeg/jdarith.c ****     else {
 1661              		.loc 1 548 0
 1662 00d7 C7453C00 		movl	$0, 60(%rbp)
 1662      000000
 1663              	.LVL212:
 1664              	.L170:
 582:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1665              		.loc 1 582 0
 1666 00de 488B4424 		movq	8(%rsp), %rax
 1666      08
 1667 00e3 668910   		movw	%dx, (%rax)
 586:fltk-1.3.4-1/jpeg/jdarith.c ****     tbl = compptr->ac_tbl_no;
 1668              		.loc 1 586 0
 1669 00e6 418BB738 		movl	568(%r15), %esi
 1669      020000
 1670 00ed 85F6     		testl	%esi, %esi
 1671 00ef 753F     		jne	.L182
 1672              	.LVL213:
 1673              	.L184:
 534:fltk-1.3.4-1/jpeg/jdarith.c ****     block = MCU_data[blkn];
 1674              		.loc 1 534 0
 1675 00f1 83442424 		addl	$1, 36(%rsp)
 1675      01
 1676              	.LVL214:
 1677 00f6 48834424 		addq	$8, 16(%rsp)
 1677      1008
 1678 00fc 8B442424 		movl	36(%rsp), %eax
 1679              	.LVL215:
 1680 0100 48834424 		addq	$4, 24(%rsp)
 1680      1804
 1681 0106 413987F0 		cmpl	%eax, 496(%r15)
 1681      010000
 1682 010d 0F8F73FF 		jg	.L183
 1682      FFFF
 1683              	.LVL216:
 1684              	.L167:
 635:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1685              		.loc 1 635 0
 1686 0113 4883C458 		addq	$88, %rsp
 1687              		.cfi_remember_state
 1688              		.cfi_def_cfa_offset 56
 1689 0117 B8010000 		movl	$1, %eax
 1689      00
 1690 011c 5B       		popq	%rbx
 1691              		.cfi_def_cfa_offset 48
 1692 011d 5D       		popq	%rbp
 1693              		.cfi_def_cfa_offset 40
 1694 011e 415C     		popq	%r12
 1695              		.cfi_def_cfa_offset 32
 1696 0120 415D     		popq	%r13
 1697              		.cfi_def_cfa_offset 24
 1698 0122 415E     		popq	%r14
 1699              		.cfi_def_cfa_offset 16
 1700 0124 415F     		popq	%r15
 1701              		.cfi_def_cfa_offset 8
 1702              	.LVL217:
 1703 0126 C3       		ret
 1704              	.LVL218:
 1705 0127 660F1F84 		.p2align 4,,10
 1705      00000000 
 1705      00
 1706              		.p2align 3
 1707              	.L182:
 1708              		.cfi_restore_state
 1709 0130 488B4424 		movq	40(%rsp), %rax
 1709      28
 588:fltk-1.3.4-1/jpeg/jdarith.c **** 
 1710              		.loc 1 588 0
 1711 0135 31ED     		xorl	%ebp, %ebp
 1712 0137 48634018 		movslq	24(%rax), %rax
 1713 013b 48894424 		movq	%rax, 72(%rsp)
 1713      48
 1714 0140 498D04C6 		leaq	(%r14,%rax,8), %rax
 1715 0144 48894424 		movq	%rax, 40(%rsp)
 1715      28
 1716              	.LVL219:
 1717              	.L196:
 592:fltk-1.3.4-1/jpeg/jdarith.c ****       if (arith_decode(cinfo, st)) break;	/* EOB flag */
 1718              		.loc 1 592 0
 1719 0149 488B4424 		movq	40(%rsp), %rax
 1719      28
 1720 014e 8D5C6D00 		leal	0(%rbp,%rbp,2), %ebx
 1721              	.LVL220:
 593:fltk-1.3.4-1/jpeg/jdarith.c ****       for (;;) {
 1722              		.loc 1 593 0
 1723 0152 4C89FF   		movq	%r15, %rdi
 592:fltk-1.3.4-1/jpeg/jdarith.c ****       if (arith_decode(cinfo, st)) break;	/* EOB flag */
 1724              		.loc 1 592 0
 1725 0155 4863DB   		movslq	%ebx, %rbx
 1726 0158 480398D0 		addq	208(%rax), %rbx
 1726      000000
 1727              	.LVL221:
 593:fltk-1.3.4-1/jpeg/jdarith.c ****       for (;;) {
 1728              		.loc 1 593 0
 1729 015f 4889DE   		movq	%rbx, %rsi
 1730 0162 E8000000 		call	arith_decode
 1730      00
 1731              	.LVL222:
 1732 0167 85C0     		testl	%eax, %eax
 1733 0169 7416     		je	.L186
 1734 016b EB84     		jmp	.L184
 1735 016d 0F1F00   		.p2align 4,,10
 1736              		.p2align 3
 1737              	.L223:
 597:fltk-1.3.4-1/jpeg/jdarith.c **** 	if (k >= cinfo->lim_Se) {
 1738              		.loc 1 597 0
 1739 0170 4883C303 		addq	$3, %rbx
 1740              	.LVL223:
 598:fltk-1.3.4-1/jpeg/jdarith.c **** 	  WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 1741              		.loc 1 598 0
 1742 0174 413BAF38 		cmpl	568(%r15), %ebp
 1742      020000
 1743 017b 0F8DA700 		jge	.L221
 1743      0000
 1744              	.L186:
 596:fltk-1.3.4-1/jpeg/jdarith.c **** 	st += 3;
 1745              		.loc 1 596 0
 1746 0181 488D7301 		leaq	1(%rbx), %rsi
 1747 0185 4C89FF   		movq	%r15, %rdi
 595:fltk-1.3.4-1/jpeg/jdarith.c **** 	if (arith_decode(cinfo, st + 1)) break;
 1748              		.loc 1 595 0
 1749 0188 83C501   		addl	$1, %ebp
 1750              	.LVL224:
 596:fltk-1.3.4-1/jpeg/jdarith.c **** 	st += 3;
 1751              		.loc 1 596 0
 1752 018b E8000000 		call	arith_decode
 1752      00
 1753              	.LVL225:
 1754 0190 85C0     		testl	%eax, %eax
 1755 0192 74DC     		je	.L223
 606:fltk-1.3.4-1/jpeg/jdarith.c ****       st += 2;
 1756              		.loc 1 606 0
 1757 0194 488B7424 		movq	56(%rsp), %rsi
 1757      38
 1758 0199 4C89FF   		movq	%r15, %rdi
 607:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Figure F.23: Decoding the magnitude category of v */
 1759              		.loc 1 607 0
 1760 019c 4883C302 		addq	$2, %rbx
 1761              	.LVL226:
 606:fltk-1.3.4-1/jpeg/jdarith.c ****       st += 2;
 1762              		.loc 1 606 0
 1763 01a0 E8000000 		call	arith_decode
 1763      00
 1764              	.LVL227:
 609:fltk-1.3.4-1/jpeg/jdarith.c **** 	if (arith_decode(cinfo, st)) {
 1765              		.loc 1 609 0
 1766 01a5 4889DE   		movq	%rbx, %rsi
 1767 01a8 4C89FF   		movq	%r15, %rdi
 606:fltk-1.3.4-1/jpeg/jdarith.c ****       st += 2;
 1768              		.loc 1 606 0
 1769 01ab 89442430 		movl	%eax, 48(%rsp)
 1770              	.LVL228:
 609:fltk-1.3.4-1/jpeg/jdarith.c **** 	if (arith_decode(cinfo, st)) {
 1771              		.loc 1 609 0
 1772 01af E8000000 		call	arith_decode
 1772      00
 1773              	.LVL229:
 1774 01b4 85C0     		testl	%eax, %eax
 1775 01b6 4189C4   		movl	%eax, %r12d
 1776              	.LVL230:
 1777 01b9 0F858901 		jne	.L224
 1777      0000
 1778              	.LVL231:
 1779              	.L187:
 626:fltk-1.3.4-1/jpeg/jdarith.c ****       while (m >>= 1)
 1780              		.loc 1 626 0
 1781 01bf 4883C30E 		addq	$14, %rbx
 1782              	.LVL232:
 627:fltk-1.3.4-1/jpeg/jdarith.c **** 	if (arith_decode(cinfo, st)) v |= m;
 1783              		.loc 1 627 0
 1784 01c3 4589E5   		movl	%r12d, %r13d
 1785 01c6 EB1F     		jmp	.L192
 1786              	.LVL233:
 1787 01c8 0F1F8400 		.p2align 4,,10
 1787      00000000 
 1788              		.p2align 3
 1789              	.L194:
 628:fltk-1.3.4-1/jpeg/jdarith.c ****       v += 1; if (sign) v = -v;
 1790              		.loc 1 628 0
 1791 01d0 4889DE   		movq	%rbx, %rsi
 1792 01d3 4C89FF   		movq	%r15, %rdi
 1793 01d6 E8000000 		call	arith_decode
 1793      00
 1794              	.LVL234:
 1795 01db 4489E2   		movl	%r12d, %edx
 1796 01de 4409EA   		orl	%r13d, %edx
 1797 01e1 85C0     		testl	%eax, %eax
 1798 01e3 440F45E2 		cmovne	%edx, %r12d
 1799              	.LVL235:
 1800              	.L192:
 627:fltk-1.3.4-1/jpeg/jdarith.c **** 	if (arith_decode(cinfo, st)) v |= m;
 1801              		.loc 1 627 0
 1802 01e7 41D1FD   		sarl	%r13d
 1803              	.LVL236:
 1804 01ea 75E4     		jne	.L194
 629:fltk-1.3.4-1/jpeg/jdarith.c ****       (*block)[natural_order[k]] = (JCOEF) v;
 1805              		.loc 1 629 0
 1806 01ec 418D5424 		leal	1(%r12), %edx
 1806      01
 1807              	.LVL237:
 1808 01f1 8B4C2430 		movl	48(%rsp), %ecx
 1809 01f5 89D0     		movl	%edx, %eax
 1810 01f7 F7D8     		negl	%eax
 1811 01f9 85C9     		testl	%ecx, %ecx
 630:fltk-1.3.4-1/jpeg/jdarith.c ****     } while (k < cinfo->lim_Se);
 1812              		.loc 1 630 0
 1813 01fb 488B4C24 		movq	64(%rsp), %rcx
 1813      40
 629:fltk-1.3.4-1/jpeg/jdarith.c ****       (*block)[natural_order[k]] = (JCOEF) v;
 1814              		.loc 1 629 0
 1815 0200 0F45D0   		cmovne	%eax, %edx
 1816              	.LVL238:
 630:fltk-1.3.4-1/jpeg/jdarith.c ****     } while (k < cinfo->lim_Se);
 1817              		.loc 1 630 0
 1818 0203 4863C5   		movslq	%ebp, %rax
 1819 0206 48630481 		movslq	(%rcx,%rax,4), %rax
 1820 020a 488B4C24 		movq	8(%rsp), %rcx
 1820      08
 1821 020f 66891441 		movw	%dx, (%rcx,%rax,2)
 631:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 1822              		.loc 1 631 0
 1823 0213 413BAF38 		cmpl	568(%r15), %ebp
 1823      020000
 1824 021a 0F8C29FF 		jl	.L196
 1824      FFFF
 1825 0220 E9CCFEFF 		jmp	.L184
 1825      FF
 1826              	.LVL239:
 1827              		.p2align 4,,10
 1828 0225 0F1F00   		.p2align 3
 1829              	.L221:
 616:fltk-1.3.4-1/jpeg/jdarith.c **** 	      entropy->ct = -1;			/* magnitude overflow */
 1830              		.loc 1 616 0
 1831 0228 498B07   		movq	(%r15), %rax
 1832 022b BEFFFFFF 		movl	$-1, %esi
 1832      FF
 1833 0230 4C89FF   		movq	%r15, %rdi
 1834 0233 C7402875 		movl	$117, 40(%rax)
 1834      000000
 1835              	.LVL240:
 1836 023a 498B07   		movq	(%r15), %rax
 1837 023d FF5008   		call	*8(%rax)
 1838              	.LVL241:
 617:fltk-1.3.4-1/jpeg/jdarith.c **** 	      return TRUE;
 1839              		.loc 1 617 0
 1840 0240 41C74628 		movl	$-1, 40(%r14)
 1840      FFFFFFFF 
 618:fltk-1.3.4-1/jpeg/jdarith.c **** 	    }
 1841              		.loc 1 618 0
 1842 0248 E9C6FEFF 		jmp	.L167
 1842      FF
 1843              	.LVL242:
 1844 024d 0F1F00   		.p2align 4,,10
 1845              		.p2align 3
 1846              	.L169:
 552:fltk-1.3.4-1/jpeg/jdarith.c ****       st += 2; st += sign;
 1847              		.loc 1 552 0
 1848 0250 488D7301 		leaq	1(%rbx), %rsi
 1849 0254 4C89FF   		movq	%r15, %rdi
 1850 0257 E8000000 		call	arith_decode
 1850      00
 1851              	.LVL243:
 1852 025c 89442448 		movl	%eax, 72(%rsp)
 1853              	.LVL244:
 553:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Figure F.23: Decoding the magnitude category of v */
 1854              		.loc 1 553 0
 1855 0260 4898     		cltq
 1856              	.LVL245:
 555:fltk-1.3.4-1/jpeg/jdarith.c **** 	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 1857              		.loc 1 555 0
 1858 0262 4C89FF   		movq	%r15, %rdi
 553:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Figure F.23: Decoding the magnitude category of v */
 1859              		.loc 1 553 0
 1860 0265 488D5C03 		leaq	2(%rbx,%rax), %rbx
 1860      02
 1861              	.LVL246:
 555:fltk-1.3.4-1/jpeg/jdarith.c **** 	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 1862              		.loc 1 555 0
 1863 026a 4889DE   		movq	%rbx, %rsi
 1864 026d E8000000 		call	arith_decode
 1864      00
 1865              	.LVL247:
 1866 0272 85C0     		testl	%eax, %eax
 1867 0274 4189C4   		movl	%eax, %r12d
 1868              	.LVL248:
 1869 0277 7436     		je	.L171
 556:fltk-1.3.4-1/jpeg/jdarith.c **** 	while (arith_decode(cinfo, st)) {
 1870              		.loc 1 556 0
 1871 0279 488B4424 		movq	48(%rsp), %rax
 1871      30
 1872              	.LVL249:
 1873 027e 488B5850 		movq	80(%rax), %rbx
 1874              	.LVL250:
 1875 0282 4883C314 		addq	$20, %rbx
 1876              	.LVL251:
 557:fltk-1.3.4-1/jpeg/jdarith.c **** 	  if ((m <<= 1) == 0x8000) {
 1877              		.loc 1 557 0
 1878 0286 EB18     		jmp	.L172
 1879 0288 0F1F8400 		.p2align 4,,10
 1879      00000000 
 1880              		.p2align 3
 1881              	.L174:
 558:fltk-1.3.4-1/jpeg/jdarith.c **** 	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 1882              		.loc 1 558 0
 1883 0290 4501E4   		addl	%r12d, %r12d
 1884              	.LVL252:
 1885 0293 4181FC00 		cmpl	$32768, %r12d
 1885      800000
 1886 029a 748C     		je	.L221
 563:fltk-1.3.4-1/jpeg/jdarith.c **** 	}
 1887              		.loc 1 563 0
 1888 029c 4883C301 		addq	$1, %rbx
 1889              	.LVL253:
 1890              	.L172:
 557:fltk-1.3.4-1/jpeg/jdarith.c **** 	  if ((m <<= 1) == 0x8000) {
 1891              		.loc 1 557 0
 1892 02a0 4889DE   		movq	%rbx, %rsi
 1893 02a3 4C89FF   		movq	%r15, %rdi
 1894 02a6 E8000000 		call	arith_decode
 1894      00
 1895              	.LVL254:
 1896 02ab 85C0     		testl	%eax, %eax
 1897 02ad 75E1     		jne	.L174
 1898              	.L171:
 567:fltk-1.3.4-1/jpeg/jdarith.c **** 	entropy->dc_context[ci] = 0;		   /* zero diff category */
 1899              		.loc 1 567 0
 1900 02af 430FB68C 		movzbl	324(%r15,%r13), %ecx
 1900      2F440100 
 1900      00
 1901 02b8 B8010000 		movl	$1, %eax
 1901      00
 1902 02bd 4889C7   		movq	%rax, %rdi
 1903 02c0 48D3E7   		salq	%cl, %rdi
 1904 02c3 4889F9   		movq	%rdi, %rcx
 1905 02c6 48D1F9   		sarq	%rcx
 1906 02c9 4139CC   		cmpl	%ecx, %r12d
 1907 02cc 0F8CEE00 		jl	.L225
 1907      0000
 569:fltk-1.3.4-1/jpeg/jdarith.c **** 	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 1908              		.loc 1 569 0
 1909 02d2 430FB68C 		movzbl	340(%r15,%r13), %ecx
 1909      2F540100 
 1909      00
 1910 02db 48D3E0   		salq	%cl, %rax
 1911 02de 48D1F8   		sarq	%rax
 1912 02e1 4139C4   		cmpl	%eax, %r12d
 570:fltk-1.3.4-1/jpeg/jdarith.c ****       else
 1913              		.loc 1 570 0
 1914 02e4 8B442448 		movl	72(%rsp), %eax
 569:fltk-1.3.4-1/jpeg/jdarith.c **** 	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 1915              		.loc 1 569 0
 1916 02e8 0F8EFA00 		jle	.L177
 1916      0000
 570:fltk-1.3.4-1/jpeg/jdarith.c ****       else
 1917              		.loc 1 570 0
 1918 02ee 8D04850C 		leal	12(,%rax,4), %eax
 1918      000000
 1919 02f5 89453C   		movl	%eax, 60(%rbp)
 1920              	.L176:
 1921              	.LVL255:
 575:fltk-1.3.4-1/jpeg/jdarith.c ****       while (m >>= 1)
 1922              		.loc 1 575 0
 1923 02f8 4883C30E 		addq	$14, %rbx
 1924              	.LVL256:
 576:fltk-1.3.4-1/jpeg/jdarith.c **** 	if (arith_decode(cinfo, st)) v |= m;
 1925              		.loc 1 576 0
 1926 02fc 4589E5   		movl	%r12d, %r13d
 1927              	.LVL257:
 1928 02ff EB1E     		jmp	.L178
 1929              	.LVL258:
 1930              		.p2align 4,,10
 1931 0301 0F1F8000 		.p2align 3
 1931      000000
 1932              	.L180:
 577:fltk-1.3.4-1/jpeg/jdarith.c ****       v += 1; if (sign) v = -v;
 1933              		.loc 1 577 0
 1934 0308 4889DE   		movq	%rbx, %rsi
 1935 030b 4C89FF   		movq	%r15, %rdi
 1936 030e E8000000 		call	arith_decode
 1936      00
 1937              	.LVL259:
 1938 0313 4489E2   		movl	%r12d, %edx
 1939 0316 4409EA   		orl	%r13d, %edx
 1940 0319 85C0     		testl	%eax, %eax
 1941 031b 440F45E2 		cmovne	%edx, %r12d
 1942              	.LVL260:
 1943              	.L178:
 576:fltk-1.3.4-1/jpeg/jdarith.c **** 	if (arith_decode(cinfo, st)) v |= m;
 1944              		.loc 1 576 0
 1945 031f 41D1FD   		sarl	%r13d
 1946              	.LVL261:
 1947 0322 75E4     		jne	.L180
 578:fltk-1.3.4-1/jpeg/jdarith.c ****       entropy->last_dc_val[ci] += v;
 1948              		.loc 1 578 0
 1949 0324 418D5424 		leal	1(%r12), %edx
 1949      01
 1950              	.LVL262:
 1951 0329 8B7C2448 		movl	72(%rsp), %edi
 1952 032d 89D0     		movl	%edx, %eax
 1953 032f F7D8     		negl	%eax
 1954 0331 85FF     		testl	%edi, %edi
 1955 0333 0F45D0   		cmovne	%eax, %edx
 1956              	.LVL263:
 579:fltk-1.3.4-1/jpeg/jdarith.c ****     }
 1957              		.loc 1 579 0
 1958 0336 03552C   		addl	44(%rbp), %edx
 1959              	.LVL264:
 1960 0339 89552C   		movl	%edx, 44(%rbp)
 1961 033c E99DFDFF 		jmp	.L170
 1961      FF
 1962              	.LVL265:
 1963              		.p2align 4,,10
 1964 0341 0F1F8000 		.p2align 3
 1964      000000
 1965              	.L224:
 610:fltk-1.3.4-1/jpeg/jdarith.c **** 	  m <<= 1;
 1966              		.loc 1 610 0
 1967 0348 4889DE   		movq	%rbx, %rsi
 1968 034b 4C89FF   		movq	%r15, %rdi
 1969 034e E8000000 		call	arith_decode
 1969      00
 1970              	.LVL266:
 1971 0353 85C0     		testl	%eax, %eax
 1972 0355 0F8464FE 		je	.L187
 1972      FFFF
 612:fltk-1.3.4-1/jpeg/jdarith.c **** 	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 1973              		.loc 1 612 0
 1974 035b 488B4424 		movq	72(%rsp), %rax
 1974      48
 611:fltk-1.3.4-1/jpeg/jdarith.c **** 	  st = entropy->ac_stats[tbl] +
 1975              		.loc 1 611 0
 1976 0360 4501E4   		addl	%r12d, %r12d
 1977              	.LVL267:
 612:fltk-1.3.4-1/jpeg/jdarith.c **** 	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 1978              		.loc 1 612 0
 1979 0363 BBBD0000 		movl	$189, %ebx
 1979      00
 1980              	.LVL268:
 1981 0368 410FB684 		movzbl	356(%r15,%rax), %eax
 1981      07640100 
 1981      00
 1982 0371 39C5     		cmpl	%eax, %ebp
 1983 0373 B8D90000 		movl	$217, %eax
 1983      00
 1984 0378 480F4FD8 		cmovg	%rax, %rbx
 1985 037c 488B4424 		movq	40(%rsp), %rax
 1985      28
 1986 0381 480398D0 		addq	208(%rax), %rbx
 1986      000000
 1987              	.LVL269:
 614:fltk-1.3.4-1/jpeg/jdarith.c **** 	    if ((m <<= 1) == 0x8000) {
 1988              		.loc 1 614 0
 1989 0388 EB1A     		jmp	.L189
 1990 038a 660F1F44 		.p2align 4,,10
 1990      0000
 1991              		.p2align 3
 1992              	.L191:
 615:fltk-1.3.4-1/jpeg/jdarith.c **** 	      WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 1993              		.loc 1 615 0
 1994 0390 4501E4   		addl	%r12d, %r12d
 1995              	.LVL270:
 1996 0393 4181FC00 		cmpl	$32768, %r12d
 1996      800000
 1997 039a 0F8488FE 		je	.L221
 1997      FFFF
 620:fltk-1.3.4-1/jpeg/jdarith.c **** 	  }
 1998              		.loc 1 620 0
 1999 03a0 4883C301 		addq	$1, %rbx
 2000              	.LVL271:
 2001              	.L189:
 614:fltk-1.3.4-1/jpeg/jdarith.c **** 	    if ((m <<= 1) == 0x8000) {
 2002              		.loc 1 614 0
 2003 03a4 4889DE   		movq	%rbx, %rsi
 2004 03a7 4C89FF   		movq	%r15, %rdi
 2005 03aa E8000000 		call	arith_decode
 2005      00
 2006              	.LVL272:
 2007 03af 85C0     		testl	%eax, %eax
 2008 03b1 75DD     		jne	.L191
 2009 03b3 E907FEFF 		jmp	.L187
 2009      FF
 2010              	.LVL273:
 2011 03b8 0F1F8400 		.p2align 4,,10
 2011      00000000 
 2012              		.p2align 3
 2013              	.L225:
 568:fltk-1.3.4-1/jpeg/jdarith.c ****       else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 2014              		.loc 1 568 0
 2015 03c0 C7453C00 		movl	$0, 60(%rbp)
 2015      000000
 2016 03c7 E92CFFFF 		jmp	.L176
 2016      FF
 2017              	.LVL274:
 2018 03cc 0F1F4000 		.p2align 4,,10
 2019              		.p2align 3
 2020              	.L222:
 2021 03d0 48897424 		movq	%rsi, 8(%rsp)
 2021      08
 524:fltk-1.3.4-1/jpeg/jdarith.c ****     entropy->restarts_to_go--;
 2022              		.loc 1 524 0
 2023 03d5 E8000000 		call	process_restart
 2023      00
 2024              	.LVL275:
 2025 03da 418B454C 		movl	76(%r13), %eax
 2026 03de 488B7424 		movq	8(%rsp), %rsi
 2026      08
 2027 03e3 E948FCFF 		jmp	.L165
 2027      FF
 2028              	.LVL276:
 2029              	.L177:
 572:fltk-1.3.4-1/jpeg/jdarith.c ****       v = m;
 2030              		.loc 1 572 0
 2031 03e8 8D048504 		leal	4(,%rax,4), %eax
 2031      000000
 2032 03ef 89453C   		movl	%eax, 60(%rbp)
 2033 03f2 E901FFFF 		jmp	.L176
 2033      FF
 2034              		.cfi_endproc
 2035              	.LFE68:
 2037              		.section	.text.unlikely.decode_mcu
 2038              	.LCOLDE8:
 2039              		.section	.text.decode_mcu
 2040              	.LHOTE8:
 2041              		.section	.text.unlikely.start_pass,"ax",@progbits
 2042              	.LCOLDB9:
 2043              		.section	.text.start_pass,"ax",@progbits
 2044              	.LHOTB9:
 2045              		.p2align 4,,15
 2047              	start_pass:
 2048              	.LFB69:
 644:fltk-1.3.4-1/jpeg/jdarith.c ****   arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 2049              		.loc 1 644 0
 2050              		.cfi_startproc
 2051              	.LVL277:
 2052 0000 4157     		pushq	%r15
 2053              		.cfi_def_cfa_offset 16
 2054              		.cfi_offset 15, -16
 2055 0002 4156     		pushq	%r14
 2056              		.cfi_def_cfa_offset 24
 2057              		.cfi_offset 14, -24
 2058 0004 4155     		pushq	%r13
 2059              		.cfi_def_cfa_offset 32
 2060              		.cfi_offset 13, -32
 2061 0006 4154     		pushq	%r12
 2062              		.cfi_def_cfa_offset 40
 2063              		.cfi_offset 12, -40
 2064 0008 55       		pushq	%rbp
 2065              		.cfi_def_cfa_offset 48
 2066              		.cfi_offset 6, -48
 2067 0009 53       		pushq	%rbx
 2068              		.cfi_def_cfa_offset 56
 2069              		.cfi_offset 3, -56
 2070 000a 4889FB   		movq	%rdi, %rbx
 2071 000d 4883EC18 		subq	$24, %rsp
 2072              		.cfi_def_cfa_offset 80
 649:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Validate progressive scan parameters */
 2073              		.loc 1 649 0
 2074 0011 8B873C01 		movl	316(%rdi), %eax
 2074      0000
 645:fltk-1.3.4-1/jpeg/jdarith.c ****   int ci, tbl;
 2075              		.loc 1 645 0
 2076 0017 4C8BAF70 		movq	624(%rdi), %r13
 2076      020000
 2077              	.LVL278:
 649:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Validate progressive scan parameters */
 2078              		.loc 1 649 0
 2079 001e 85C0     		testl	%eax, %eax
 2080 0020 0F84AA01 		je	.L227
 2080      0000
 651:fltk-1.3.4-1/jpeg/jdarith.c ****       if (cinfo->Se != 0)
 2081              		.loc 1 651 0
 2082 0026 8B8F1C02 		movl	540(%rdi), %ecx
 2082      0000
 2083 002c 85C9     		testl	%ecx, %ecx
 2084 002e 0F85FC02 		jne	.L228
 2084      0000
 652:fltk-1.3.4-1/jpeg/jdarith.c **** 	goto bad;
 2085              		.loc 1 652 0
 2086 0034 8B872002 		movl	544(%rdi), %eax
 2086      0000
 2087 003a 85C0     		testl	%eax, %eax
 2088 003c 0F841503 		je	.L230
 2088      0000
 2089              	.L229:
 669:fltk-1.3.4-1/jpeg/jdarith.c **** 	       cinfo->Ss, cinfo->Se, cinfo->Ah, cinfo->Al);
 2090              		.loc 1 669 0
 2091 0042 488B03   		movq	(%rbx), %rax
 2092 0045 4889DF   		movq	%rbx, %rdi
 2093              	.LVL279:
 2094 0048 C7402811 		movl	$17, 40(%rax)
 2094      000000
 2095 004f 488B03   		movq	(%rbx), %rax
 2096 0052 8B931C02 		movl	540(%rbx), %edx
 2096      0000
 2097 0058 89502C   		movl	%edx, 44(%rax)
 2098 005b 488B03   		movq	(%rbx), %rax
 2099 005e 8B932002 		movl	544(%rbx), %edx
 2099      0000
 2100 0064 895030   		movl	%edx, 48(%rax)
 2101 0067 488B03   		movq	(%rbx), %rax
 2102 006a 8B932402 		movl	548(%rbx), %edx
 2102      0000
 2103 0070 895034   		movl	%edx, 52(%rax)
 2104 0073 488B03   		movq	(%rbx), %rax
 2105 0076 8B932802 		movl	552(%rbx), %edx
 2105      0000
 2106 007c 895038   		movl	%edx, 56(%rax)
 2107 007f 488B03   		movq	(%rbx), %rax
 2108 0082 FF10     		call	*(%rax)
 2109              	.LVL280:
 2110 0084 8B8B1C02 		movl	540(%rbx), %ecx
 2110      0000
 2111              	.L233:
 2112              	.LVL281:
 676:fltk-1.3.4-1/jpeg/jdarith.c ****       int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 2113              		.loc 1 676 0 discriminator 1
 2114 008a 8B83C001 		movl	448(%rbx), %eax
 2114      0000
 2115 0090 85C0     		testl	%eax, %eax
 2116 0092 0F8ED300 		jle	.L234
 2116      0000
 2117 0098 488D83C8 		leaq	456(%rbx), %rax
 2117      010000
 676:fltk-1.3.4-1/jpeg/jdarith.c ****       int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 2118              		.loc 1 676 0 is_stmt 0
 2119 009f C7042400 		movl	$0, (%rsp)
 2119      000000
 2120              	.LBB18:
 2121              	.LBB19:
 683:fltk-1.3.4-1/jpeg/jdarith.c **** 	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 2122              		.loc 1 683 0 is_stmt 1
 2123 00a6 31ED     		xorl	%ebp, %ebp
 2124 00a8 48894424 		movq	%rax, 8(%rsp)
 2124      08
 2125              	.LVL282:
 2126              	.L239:
 2127              	.LBE19:
 677:fltk-1.3.4-1/jpeg/jdarith.c ****       int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 2128              		.loc 1 677 0
 2129 00ad 488B4424 		movq	8(%rsp), %rax
 2129      08
 2130 00b2 4531F6   		xorl	%r14d, %r14d
 2131 00b5 488B00   		movq	(%rax), %rax
 2132 00b8 48634004 		movslq	4(%rax), %rax
 2133 00bc 4989C4   		movq	%rax, %r12
 2134              	.LVL283:
 678:fltk-1.3.4-1/jpeg/jdarith.c ****       if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 2135              		.loc 1 678 0
 2136 00bf 48C1E008 		salq	$8, %rax
 2137              	.LVL284:
 2138 00c3 480383C0 		addq	192(%rbx), %rax
 2138      000000
 679:fltk-1.3.4-1/jpeg/jdarith.c **** 	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 2139              		.loc 1 679 0
 2140 00ca 85C9     		testl	%ecx, %ecx
 678:fltk-1.3.4-1/jpeg/jdarith.c ****       if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 2141              		.loc 1 678 0
 2142 00cc 4989C7   		movq	%rax, %r15
 2143              	.LVL285:
 679:fltk-1.3.4-1/jpeg/jdarith.c **** 	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 2144              		.loc 1 679 0
 2145 00cf 740D     		je	.L235
 679:fltk-1.3.4-1/jpeg/jdarith.c **** 	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 2146              		.loc 1 679 0 is_stmt 0 discriminator 1
 2147 00d1 8B00     		movl	(%rax), %eax
 2148              	.LVL286:
 2149 00d3 4189CE   		movl	%ecx, %r14d
 2150 00d6 85C0     		testl	%eax, %eax
 2151 00d8 0F88AA03 		js	.L267
 2151      0000
 2152              	.L235:
 2153              	.LVL287:
 681:fltk-1.3.4-1/jpeg/jdarith.c **** 	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 2154              		.loc 1 681 0 is_stmt 1
 2155 00de 443BB320 		cmpl	544(%rbx), %r14d
 2155      020000
 2156 00e5 0F8F9503 		jg	.L260
 2156      0000
 2157 00eb 4963CE   		movslq	%r14d, %rcx
 2158 00ee 4D8D3C8F 		leaq	(%r15,%rcx,4), %r15
 2159              	.LVL288:
 2160              		.p2align 4,,10
 2161 00f2 660F1F44 		.p2align 3
 2161      0000
 2162              	.L238:
 2163              	.LBB20:
 683:fltk-1.3.4-1/jpeg/jdarith.c **** 	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 2164              		.loc 1 683 0
 2165 00f8 418B07   		movl	(%r15), %eax
 2166 00fb 89E9     		movl	%ebp, %ecx
 2167 00fd 85C0     		testl	%eax, %eax
 2168 00ff 410F490F 		cmovns	(%r15), %ecx
 2169 0103 3B8B2402 		cmpl	548(%rbx), %ecx
 2169      0000
 2170 0109 7426     		je	.L237
 684:fltk-1.3.4-1/jpeg/jdarith.c **** 	coef_bit_ptr[coefi] = cinfo->Al;
 2171              		.loc 1 684 0
 2172 010b 488B0B   		movq	(%rbx), %rcx
 2173 010e BEFFFFFF 		movl	$-1, %esi
 2173      FF
 2174 0113 4889DF   		movq	%rbx, %rdi
 2175 0116 C7412876 		movl	$118, 40(%rcx)
 2175      000000
 2176              	.LVL289:
 2177 011d 488B0B   		movq	(%rbx), %rcx
 2178 0120 4489612C 		movl	%r12d, 44(%rcx)
 2179 0124 488B0B   		movq	(%rbx), %rcx
 2180 0127 44897130 		movl	%r14d, 48(%rcx)
 2181 012b 488B0B   		movq	(%rbx), %rcx
 2182 012e FF5108   		call	*8(%rcx)
 2183              	.LVL290:
 2184              	.L237:
 685:fltk-1.3.4-1/jpeg/jdarith.c ****       }
 2185              		.loc 1 685 0 discriminator 2
 2186 0131 8B8B2802 		movl	552(%rbx), %ecx
 2186      0000
 2187              	.LBE20:
 681:fltk-1.3.4-1/jpeg/jdarith.c **** 	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 2188              		.loc 1 681 0 discriminator 2
 2189 0137 4183C601 		addl	$1, %r14d
 2190              	.LVL291:
 2191 013b 4983C704 		addq	$4, %r15
 2192              	.LBB21:
 685:fltk-1.3.4-1/jpeg/jdarith.c ****       }
 2193              		.loc 1 685 0 discriminator 2
 2194 013f 41894FFC 		movl	%ecx, -4(%r15)
 2195              	.LBE21:
 681:fltk-1.3.4-1/jpeg/jdarith.c **** 	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 2196              		.loc 1 681 0 discriminator 2
 2197 0143 4439B320 		cmpl	%r14d, 544(%rbx)
 2197      020000
 2198 014a 7DAC     		jge	.L238
 2199 014c 8B8B1C02 		movl	540(%rbx), %ecx
 2199      0000
 2200              	.LVL292:
 2201              	.L236:
 2202              	.LBE18:
 676:fltk-1.3.4-1/jpeg/jdarith.c ****       int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 2203              		.loc 1 676 0 discriminator 2
 2204 0152 83042401 		addl	$1, (%rsp)
 2205              	.LVL293:
 2206 0156 48834424 		addq	$8, 8(%rsp)
 2206      0808
 2207 015c 8B0424   		movl	(%rsp), %eax
 2208              	.LVL294:
 2209 015f 3983C001 		cmpl	%eax, 448(%rbx)
 2209      0000
 2210 0165 0F8F42FF 		jg	.L239
 2210      FFFF
 2211              	.LVL295:
 2212              	.L234:
 689:fltk-1.3.4-1/jpeg/jdarith.c ****       if (cinfo->Ss == 0)
 2213              		.loc 1 689 0
 2214 016b 448BB324 		movl	548(%rbx), %r14d
 2214      020000
 2215 0172 4585F6   		testl	%r14d, %r14d
 2216 0175 0F85B502 		jne	.L240
 2216      0000
 691:fltk-1.3.4-1/jpeg/jdarith.c ****       else
 2217              		.loc 1 691 0
 2218 017b 85C9     		testl	%ecx, %ecx
 2219 017d BA000000 		movl	$decode_mcu_DC_first, %edx
 2219      00
 2220 0182 B8000000 		movl	$decode_mcu_AC_first, %eax
 2220      00
 2221 0187 480F44C2 		cmove	%rdx, %rax
 2222 018b 49894508 		movq	%rax, 8(%r13)
 2223              	.LVL296:
 712:fltk-1.3.4-1/jpeg/jdarith.c ****     compptr = cinfo->cur_comp_info[ci];
 2224              		.loc 1 712 0
 2225 018f 448BA3C0 		movl	448(%rbx), %r12d
 2225      010000
 2226 0196 4585E4   		testl	%r12d, %r12d
 2227 0199 7F7B     		jg	.L244
 2228              	.LVL297:
 2229              	.L257:
 739:fltk-1.3.4-1/jpeg/jdarith.c ****   entropy->a = 0;
 2230              		.loc 1 739 0
 2231 019b 49C74518 		movq	$0, 24(%r13)
 2231      00000000 
 740:fltk-1.3.4-1/jpeg/jdarith.c ****   entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 2232              		.loc 1 740 0
 2233 01a3 49C74520 		movq	$0, 32(%r13)
 2233      00000000 
 741:fltk-1.3.4-1/jpeg/jdarith.c **** 
 2234              		.loc 1 741 0
 2235 01ab 41C74528 		movl	$-16, 40(%r13)
 2235      F0FFFFFF 
 744:fltk-1.3.4-1/jpeg/jdarith.c **** }
 2236              		.loc 1 744 0
 2237 01b3 8B837401 		movl	372(%rbx), %eax
 2237      0000
 2238 01b9 4189454C 		movl	%eax, 76(%r13)
 745:fltk-1.3.4-1/jpeg/jdarith.c **** 
 2239              		.loc 1 745 0
 2240 01bd 4883C418 		addq	$24, %rsp
 2241              		.cfi_remember_state
 2242              		.cfi_def_cfa_offset 56
 2243 01c1 5B       		popq	%rbx
 2244              		.cfi_def_cfa_offset 48
 2245              	.LVL298:
 2246 01c2 5D       		popq	%rbp
 2247              		.cfi_def_cfa_offset 40
 2248 01c3 415C     		popq	%r12
 2249              		.cfi_def_cfa_offset 32
 2250 01c5 415D     		popq	%r13
 2251              		.cfi_def_cfa_offset 24
 2252              	.LVL299:
 2253 01c7 415E     		popq	%r14
 2254              		.cfi_def_cfa_offset 16
 2255 01c9 415F     		popq	%r15
 2256              		.cfi_def_cfa_offset 8
 2257 01cb C3       		ret
 2258              	.LVL300:
 2259 01cc 0F1F4000 		.p2align 4,,10
 2260              		.p2align 3
 2261              	.L227:
 2262              		.cfi_restore_state
 704:fltk-1.3.4-1/jpeg/jdarith.c **** 	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 2263              		.loc 1 704 0
 2264 01d0 8BAF1C02 		movl	540(%rdi), %ebp
 2264      0000
 2265 01d6 85ED     		testl	%ebp, %ebp
 2266 01d8 7510     		jne	.L245
 704:fltk-1.3.4-1/jpeg/jdarith.c **** 	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 2267              		.loc 1 704 0 is_stmt 0 discriminator 1
 2268 01da 448B9F24 		movl	548(%rdi), %r11d
 2268      020000
 2269 01e1 4585DB   		testl	%r11d, %r11d
 2270 01e4 0F845F02 		je	.L268
 2270      0000
 2271              	.L245:
 706:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Select MCU decoding routine */
 2272              		.loc 1 706 0 is_stmt 1
 2273 01ea 488B03   		movq	(%rbx), %rax
 2274 01ed BEFFFFFF 		movl	$-1, %esi
 2274      FF
 2275 01f2 4889DF   		movq	%rbx, %rdi
 2276 01f5 C740287D 		movl	$125, 40(%rax)
 2276      000000
 2277 01fc 488B03   		movq	(%rbx), %rax
 2278 01ff FF5008   		call	*8(%rax)
 2279              	.LVL301:
 2280              	.L246:
 708:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 2281              		.loc 1 708 0
 2282 0202 49C74508 		movq	$decode_mcu, 8(%r13)
 2282      00000000 
 2283              	.L242:
 2284              	.LVL302:
 712:fltk-1.3.4-1/jpeg/jdarith.c ****     compptr = cinfo->cur_comp_info[ci];
 2285              		.loc 1 712 0 discriminator 1
 2286 020a 448BA3C0 		movl	448(%rbx), %r12d
 2286      010000
 2287 0211 4585E4   		testl	%r12d, %r12d
 2288 0214 7E85     		jle	.L257
 2289              	.L244:
 2290 0216 4C8DBBC8 		leaq	456(%rbx), %r15
 2290      010000
 2291 021d 4D8D652C 		leaq	44(%r13), %r12
 712:fltk-1.3.4-1/jpeg/jdarith.c ****     compptr = cinfo->cur_comp_info[ci];
 2292              		.loc 1 712 0 is_stmt 0
 2293 0221 4531F6   		xorl	%r14d, %r14d
 2294              	.LBB22:
 2295              	.LBB23:
 2296              		.loc 2 90 0 is_stmt 1
 2297 0224 31ED     		xorl	%ebp, %ebp
 2298              	.LVL303:
 2299              	.L256:
 2300              	.LBE23:
 2301              	.LBE22:
 714:fltk-1.3.4-1/jpeg/jdarith.c ****       tbl = compptr->dc_tbl_no;
 2302              		.loc 1 714 0
 2303 0226 448B8B3C 		movl	316(%rbx), %r9d
 2303      010000
 713:fltk-1.3.4-1/jpeg/jdarith.c ****     if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 2304              		.loc 1 713 0
 2305 022d 4D8B07   		movq	(%r15), %r8
 2306              	.LVL304:
 714:fltk-1.3.4-1/jpeg/jdarith.c ****       tbl = compptr->dc_tbl_no;
 2307              		.loc 1 714 0
 2308 0230 4585C9   		testl	%r9d, %r9d
 2309 0233 7418     		je	.L247
 714:fltk-1.3.4-1/jpeg/jdarith.c ****       tbl = compptr->dc_tbl_no;
 2310              		.loc 1 714 0 is_stmt 0 discriminator 1
 2311 0235 8BBB1C02 		movl	540(%rbx), %edi
 2311      0000
 2312 023b 85FF     		testl	%edi, %edi
 2313 023d 757C     		jne	.L248
 714:fltk-1.3.4-1/jpeg/jdarith.c ****       tbl = compptr->dc_tbl_no;
 2314              		.loc 1 714 0 discriminator 2
 2315 023f 8BB32402 		movl	548(%rbx), %esi
 2315      0000
 2316 0245 85F6     		testl	%esi, %esi
 2317 0247 0F85BC00 		jne	.L253
 2317      0000
 2318              	.L247:
 715:fltk-1.3.4-1/jpeg/jdarith.c ****       if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 2319              		.loc 1 715 0 is_stmt 1
 2320 024d 49634014 		movslq	20(%r8), %rax
 2321              	.LVL305:
 716:fltk-1.3.4-1/jpeg/jdarith.c **** 	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 2322              		.loc 1 716 0
 2323 0251 83F80F   		cmpl	$15, %eax
 2324 0254 0F872601 		ja	.L269
 2324      0000
 2325 025a 498D4CC5 		leaq	0(%r13,%rax,8), %rcx
 2325      00
 718:fltk-1.3.4-1/jpeg/jdarith.c **** 	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 2326              		.loc 1 718 0
 2327 025f 488B4150 		movq	80(%rcx), %rax
 2328 0263 4885C0   		testq	%rax, %rax
 2329 0266 0F844F01 		je	.L270
 2329      0000
 2330              	.LVL306:
 2331              	.L251:
 2332              	.LBB25:
 2333              	.LBB26:
 2334              		.loc 2 90 0
 2335 026c 488D7808 		leaq	8(%rax), %rdi
 2336 0270 48C70000 		movq	$0, (%rax)
 2336      000000
 2337 0277 48C74038 		movq	$0, 56(%rax)
 2337      00000000 
 2338 027f 4883E7F8 		andq	$-8, %rdi
 2339 0283 4829F8   		subq	%rdi, %rax
 2340 0286 8D4840   		leal	64(%rax), %ecx
 2341 0289 4889E8   		movq	%rbp, %rax
 2342 028c C1E903   		shrl	$3, %ecx
 2343 028f F348AB   		rep stosq
 2344              	.LVL307:
 2345              	.LBE26:
 2346              	.LBE25:
 723:fltk-1.3.4-1/jpeg/jdarith.c ****       entropy->dc_context[ci] = 0;
 2347              		.loc 1 723 0
 2348 0292 41C70424 		movl	$0, (%r12)
 2348      00000000 
 724:fltk-1.3.4-1/jpeg/jdarith.c ****     }
 2349              		.loc 1 724 0
 2350 029a 41C74424 		movl	$0, 16(%r12)
 2350      10000000 
 2350      00
 726:fltk-1.3.4-1/jpeg/jdarith.c **** 	(cinfo->progressive_mode && cinfo->Ss)) {
 2351              		.loc 1 726 0
 2352 02a3 8B8B3C01 		movl	316(%rbx), %ecx
 2352      0000
 2353 02a9 85C9     		testl	%ecx, %ecx
 2354 02ab 0F856701 		jne	.L271
 2354      0000
 726:fltk-1.3.4-1/jpeg/jdarith.c **** 	(cinfo->progressive_mode && cinfo->Ss)) {
 2355              		.loc 1 726 0 is_stmt 0 discriminator 1
 2356 02b1 8B833802 		movl	568(%rbx), %eax
 2356      0000
 2357 02b7 85C0     		testl	%eax, %eax
 2358 02b9 744E     		je	.L253
 2359              	.L248:
 728:fltk-1.3.4-1/jpeg/jdarith.c ****       if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 2360              		.loc 1 728 0 is_stmt 1
 2361 02bb 49634018 		movslq	24(%r8), %rax
 2362              	.LVL308:
 729:fltk-1.3.4-1/jpeg/jdarith.c **** 	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 2363              		.loc 1 729 0
 2364 02bf 83F80F   		cmpl	$15, %eax
 2365 02c2 0F872801 		ja	.L272
 2365      0000
 2366              	.LVL309:
 2367              	.L254:
 2368 02c8 498D4CC5 		leaq	0(%r13,%rax,8), %rcx
 2368      00
 731:fltk-1.3.4-1/jpeg/jdarith.c **** 	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 2369              		.loc 1 731 0
 2370 02cd 488B81D0 		movq	208(%rcx), %rax
 2370      000000
 2371 02d4 4885C0   		testq	%rax, %rax
 2372 02d7 0F84E001 		je	.L273
 2372      0000
 2373              	.L255:
 2374              	.LVL310:
 2375              	.LBB27:
 2376              	.LBB24:
 2377              		.loc 2 90 0
 2378 02dd 488D7808 		leaq	8(%rax), %rdi
 2379 02e1 48C70000 		movq	$0, (%rax)
 2379      000000
 2380 02e8 48C780F8 		movq	$0, 248(%rax)
 2380      00000000 
 2380      000000
 2381 02f3 4883E7F8 		andq	$-8, %rdi
 2382 02f7 4829F8   		subq	%rdi, %rax
 2383 02fa 8D880001 		leal	256(%rax), %ecx
 2383      0000
 2384 0300 4889E8   		movq	%rbp, %rax
 2385 0303 C1E903   		shrl	$3, %ecx
 2386 0306 F348AB   		rep stosq
 2387              	.LVL311:
 2388              	.L253:
 2389              	.LBE24:
 2390              	.LBE27:
 712:fltk-1.3.4-1/jpeg/jdarith.c ****     compptr = cinfo->cur_comp_info[ci];
 2391              		.loc 1 712 0 discriminator 2
 2392 0309 4183C601 		addl	$1, %r14d
 2393              	.LVL312:
 2394 030d 4983C708 		addq	$8, %r15
 2395 0311 4983C404 		addq	$4, %r12
 2396 0315 4439B3C0 		cmpl	%r14d, 448(%rbx)
 2396      010000
 2397 031c 0F8F04FF 		jg	.L256
 2397      FFFF
 2398 0322 E974FEFF 		jmp	.L257
 2398      FF
 2399              	.LVL313:
 2400 0327 660F1F84 		.p2align 4,,10
 2400      00000000 
 2400      00
 2401              		.p2align 3
 2402              	.L228:
 656:fltk-1.3.4-1/jpeg/jdarith.c **** 	goto bad;
 2403              		.loc 1 656 0
 2404 0330 8B872002 		movl	544(%rdi), %eax
 2404      0000
 2405 0336 39C1     		cmpl	%eax, %ecx
 2406 0338 0F8F04FD 		jg	.L229
 2406      FFFF
 656:fltk-1.3.4-1/jpeg/jdarith.c **** 	goto bad;
 2407              		.loc 1 656 0 is_stmt 0 discriminator 1
 2408 033e 3B873802 		cmpl	568(%rdi), %eax
 2408      0000
 2409 0344 0F8FF8FC 		jg	.L229
 2409      FFFF
 659:fltk-1.3.4-1/jpeg/jdarith.c **** 	goto bad;
 2410              		.loc 1 659 0 is_stmt 1
 2411 034a 83BFC001 		cmpl	$1, 448(%rdi)
 2411      000001
 2412 0351 0F85EBFC 		jne	.L229
 2412      FFFF
 2413              	.L230:
 662:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Successive approximation refinement scan: must have Al = Ah-1. */
 2414              		.loc 1 662 0
 2415 0357 8B832402 		movl	548(%rbx), %eax
 2415      0000
 664:fltk-1.3.4-1/jpeg/jdarith.c **** 	goto bad;
 2416              		.loc 1 664 0
 2417 035d 8B932802 		movl	552(%rbx), %edx
 2417      0000
 662:fltk-1.3.4-1/jpeg/jdarith.c ****       /* Successive approximation refinement scan: must have Al = Ah-1. */
 2418              		.loc 1 662 0
 2419 0363 85C0     		testl	%eax, %eax
 2420 0365 740B     		je	.L232
 664:fltk-1.3.4-1/jpeg/jdarith.c **** 	goto bad;
 2421              		.loc 1 664 0
 2422 0367 83E801   		subl	$1, %eax
 2423 036a 39D0     		cmpl	%edx, %eax
 2424 036c 0F85D0FC 		jne	.L229
 2424      FFFF
 2425              	.L232:
 667:fltk-1.3.4-1/jpeg/jdarith.c ****       bad:
 2426              		.loc 1 667 0
 2427 0372 83FA0D   		cmpl	$13, %edx
 2428 0375 0F8E0FFD 		jle	.L233
 2428      FFFF
 2429 037b E9C2FCFF 		jmp	.L229
 2429      FF
 2430              	.LVL314:
 2431              		.p2align 4,,10
 2432              		.p2align 3
 2433              	.L269:
 717:fltk-1.3.4-1/jpeg/jdarith.c ****       if (entropy->dc_stats[tbl] == NULL)
 2434              		.loc 1 717 0
 2435 0380 488B13   		movq	(%rbx), %rdx
 2436 0383 4C894424 		movq	%r8, 8(%rsp)
 2436      08
 2437 0388 4889DF   		movq	%rbx, %rdi
 2438 038b 890424   		movl	%eax, (%rsp)
 2439 038e C7422832 		movl	$50, 40(%rdx)
 2439      000000
 2440              	.LVL315:
 2441 0395 488B13   		movq	(%rbx), %rdx
 2442 0398 89422C   		movl	%eax, 44(%rdx)
 2443 039b 488B13   		movq	(%rbx), %rdx
 2444 039e FF12     		call	*(%rdx)
 2445              	.LVL316:
 2446 03a0 48630424 		movslq	(%rsp), %rax
 2447 03a4 4C8B4424 		movq	8(%rsp), %r8
 2447      08
 2448 03a9 498D4CC5 		leaq	0(%r13,%rax,8), %rcx
 2448      00
 718:fltk-1.3.4-1/jpeg/jdarith.c **** 	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 2449              		.loc 1 718 0
 2450 03ae 488B4150 		movq	80(%rcx), %rax
 2451 03b2 4885C0   		testq	%rax, %rax
 2452 03b5 0F85B1FE 		jne	.L251
 2452      FFFF
 2453              	.LVL317:
 2454              	.L270:
 719:fltk-1.3.4-1/jpeg/jdarith.c **** 	  ((j_common_ptr) cinfo, JPOOL_IMAGE, DC_STAT_BINS);
 2455              		.loc 1 719 0
 2456 03bb 488B4308 		movq	8(%rbx), %rax
 2457 03bf 4C894424 		movq	%r8, 8(%rsp)
 2457      08
 2458 03c4 BA400000 		movl	$64, %edx
 2458      00
 2459 03c9 48890C24 		movq	%rcx, (%rsp)
 2460 03cd BE010000 		movl	$1, %esi
 2460      00
 2461 03d2 4889DF   		movq	%rbx, %rdi
 2462 03d5 FF10     		call	*(%rax)
 2463              	.LVL318:
 2464 03d7 488B0C24 		movq	(%rsp), %rcx
 2465 03db 4C8B4424 		movq	8(%rsp), %r8
 2465      08
 2466 03e0 48894150 		movq	%rax, 80(%rcx)
 2467 03e4 E983FEFF 		jmp	.L251
 2467      FF
 2468              	.LVL319:
 2469 03e9 0F1F8000 		.p2align 4,,10
 2469      000000
 2470              		.p2align 3
 2471              	.L272:
 730:fltk-1.3.4-1/jpeg/jdarith.c ****       if (entropy->ac_stats[tbl] == NULL)
 2472              		.loc 1 730 0
 2473 03f0 488B13   		movq	(%rbx), %rdx
 2474 03f3 890424   		movl	%eax, (%rsp)
 2475 03f6 4889DF   		movq	%rbx, %rdi
 2476 03f9 C7422832 		movl	$50, 40(%rdx)
 2476      000000
 2477              	.LVL320:
 2478 0400 488B13   		movq	(%rbx), %rdx
 2479 0403 89422C   		movl	%eax, 44(%rdx)
 2480 0406 488B13   		movq	(%rbx), %rdx
 2481 0409 FF12     		call	*(%rdx)
 2482              	.LVL321:
 2483 040b 48630424 		movslq	(%rsp), %rax
 2484 040f E9B4FEFF 		jmp	.L254
 2484      FF
 2485              		.p2align 4,,10
 2486 0414 0F1F4000 		.p2align 3
 2487              	.L271:
 727:fltk-1.3.4-1/jpeg/jdarith.c ****       tbl = compptr->ac_tbl_no;
 2488              		.loc 1 727 0
 2489 0418 8B931C02 		movl	540(%rbx), %edx
 2489      0000
 2490 041e 85D2     		testl	%edx, %edx
 2491 0420 0F84E3FE 		je	.L253
 2491      FFFF
 2492 0426 E990FEFF 		jmp	.L248
 2492      FF
 2493              	.LVL322:
 2494 042b 0F1F4400 		.p2align 4,,10
 2494      00
 2495              		.p2align 3
 2496              	.L240:
 696:fltk-1.3.4-1/jpeg/jdarith.c ****       else
 2497              		.loc 1 696 0
 2498 0430 85C9     		testl	%ecx, %ecx
 2499 0432 BA000000 		movl	$decode_mcu_DC_refine, %edx
 2499      00
 2500 0437 B8000000 		movl	$decode_mcu_AC_refine, %eax
 2500      00
 2501 043c 480F44C2 		cmove	%rdx, %rax
 2502 0440 49894508 		movq	%rax, 8(%r13)
 2503 0444 E9C1FDFF 		jmp	.L242
 2503      FF
 2504              	.L268:
 704:fltk-1.3.4-1/jpeg/jdarith.c **** 	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 2505              		.loc 1 704 0 discriminator 2
 2506 0449 448B9728 		movl	552(%rdi), %r10d
 2506      020000
 2507 0450 4585D2   		testl	%r10d, %r10d
 2508 0453 0F8591FD 		jne	.L245
 2508      FFFF
 705:fltk-1.3.4-1/jpeg/jdarith.c ****       WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 2509              		.loc 1 705 0 discriminator 3
 2510 0459 8B872002 		movl	544(%rdi), %eax
 2510      0000
 704:fltk-1.3.4-1/jpeg/jdarith.c **** 	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 2511              		.loc 1 704 0 discriminator 3
 2512 045f 83F83F   		cmpl	$63, %eax
 2513 0462 0F8F9AFD 		jg	.L246
 2513      FFFF
 705:fltk-1.3.4-1/jpeg/jdarith.c ****       WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 2514              		.loc 1 705 0
 2515 0468 3B873802 		cmpl	568(%rdi), %eax
 2515      0000
 2516 046e 0F8576FD 		jne	.L245
 2516      FFFF
 2517 0474 E989FDFF 		jmp	.L246
 2517      FF
 2518              	.LVL323:
 2519 0479 0F1F8000 		.p2align 4,,10
 2519      000000
 2520              		.p2align 3
 2521              	.L260:
 2522              	.LBB28:
 681:fltk-1.3.4-1/jpeg/jdarith.c **** 	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 2523              		.loc 1 681 0
 2524 0480 4489F1   		movl	%r14d, %ecx
 2525 0483 E9CAFCFF 		jmp	.L236
 2525      FF
 2526              	.LVL324:
 2527              	.L267:
 680:fltk-1.3.4-1/jpeg/jdarith.c ****       for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 2528              		.loc 1 680 0
 2529 0488 488B13   		movq	(%rbx), %rdx
 2530 048b BEFFFFFF 		movl	$-1, %esi
 2530      FF
 2531 0490 4889DF   		movq	%rbx, %rdi
 2532 0493 C7422876 		movl	$118, 40(%rdx)
 2532      000000
 2533 049a 488B13   		movq	(%rbx), %rdx
 2534 049d 4489622C 		movl	%r12d, 44(%rdx)
 2535 04a1 488B13   		movq	(%rbx), %rdx
 2536 04a4 C7423000 		movl	$0, 48(%rdx)
 2536      000000
 2537 04ab 488B13   		movq	(%rbx), %rdx
 2538 04ae FF5208   		call	*8(%rdx)
 2539              	.LVL325:
 2540 04b1 448BB31C 		movl	540(%rbx), %r14d
 2540      020000
 2541 04b8 E921FCFF 		jmp	.L235
 2541      FF
 2542              	.LVL326:
 2543              	.L273:
 2544              	.LBE28:
 732:fltk-1.3.4-1/jpeg/jdarith.c **** 	  ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
 2545              		.loc 1 732 0
 2546 04bd 488B4308 		movq	8(%rbx), %rax
 2547 04c1 48890C24 		movq	%rcx, (%rsp)
 2548 04c5 BA000100 		movl	$256, %edx
 2548      00
 2549 04ca BE010000 		movl	$1, %esi
 2549      00
 2550 04cf 4889DF   		movq	%rbx, %rdi
 2551 04d2 FF10     		call	*(%rax)
 2552              	.LVL327:
 2553 04d4 488B0C24 		movq	(%rsp), %rcx
 2554 04d8 488981D0 		movq	%rax, 208(%rcx)
 2554      000000
 2555 04df E9F9FDFF 		jmp	.L255
 2555      FF
 2556              		.cfi_endproc
 2557              	.LFE69:
 2559              		.section	.text.unlikely.start_pass
 2560              	.LCOLDE9:
 2561              		.section	.text.start_pass
 2562              	.LHOTE9:
 2563              		.section	.text.unlikely.jinit_arith_decoder,"ax",@progbits
 2564              	.LCOLDB10:
 2565              		.section	.text.jinit_arith_decoder,"ax",@progbits
 2566              	.LHOTB10:
 2567              		.p2align 4,,15
 2568              		.globl	jinit_arith_decoder
 2570              	jinit_arith_decoder:
 2571              	.LFB71:
 755:fltk-1.3.4-1/jpeg/jdarith.c ****   /* no work necessary here */
 756:fltk-1.3.4-1/jpeg/jdarith.c **** }
 757:fltk-1.3.4-1/jpeg/jdarith.c **** 
 758:fltk-1.3.4-1/jpeg/jdarith.c **** 
 759:fltk-1.3.4-1/jpeg/jdarith.c **** /*
 760:fltk-1.3.4-1/jpeg/jdarith.c ****  * Module initialization routine for arithmetic entropy decoding.
 761:fltk-1.3.4-1/jpeg/jdarith.c ****  */
 762:fltk-1.3.4-1/jpeg/jdarith.c **** 
 763:fltk-1.3.4-1/jpeg/jdarith.c **** GLOBAL(void)
 764:fltk-1.3.4-1/jpeg/jdarith.c **** jinit_arith_decoder (j_decompress_ptr cinfo)
 765:fltk-1.3.4-1/jpeg/jdarith.c **** {
 2572              		.loc 1 765 0
 2573              		.cfi_startproc
 2574              	.LVL328:
 2575 0000 53       		pushq	%rbx
 2576              		.cfi_def_cfa_offset 16
 2577              		.cfi_offset 3, -16
 766:fltk-1.3.4-1/jpeg/jdarith.c ****   arith_entropy_ptr entropy;
 767:fltk-1.3.4-1/jpeg/jdarith.c ****   int i;
 768:fltk-1.3.4-1/jpeg/jdarith.c **** 
 769:fltk-1.3.4-1/jpeg/jdarith.c ****   entropy = (arith_entropy_ptr)
 770:fltk-1.3.4-1/jpeg/jdarith.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 2578              		.loc 1 770 0
 2579 0001 488B4708 		movq	8(%rdi), %rax
 765:fltk-1.3.4-1/jpeg/jdarith.c ****   arith_entropy_ptr entropy;
 2580              		.loc 1 765 0
 2581 0005 4889FB   		movq	%rdi, %rbx
 769:fltk-1.3.4-1/jpeg/jdarith.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 2582              		.loc 1 769 0
 2583 0008 BA580100 		movl	$344, %edx
 2583      00
 2584 000d BE010000 		movl	$1, %esi
 2584      00
 2585 0012 FF10     		call	*(%rax)
 2586              	.LVL329:
 2587 0014 488D5050 		leaq	80(%rax), %rdx
 2588 0018 488D88D0 		leaq	208(%rax), %rcx
 2588      000000
 771:fltk-1.3.4-1/jpeg/jdarith.c **** 				SIZEOF(arith_entropy_decoder));
 772:fltk-1.3.4-1/jpeg/jdarith.c ****   cinfo->entropy = &entropy->pub;
 2589              		.loc 1 772 0
 2590 001f 48898370 		movq	%rax, 624(%rbx)
 2590      020000
 773:fltk-1.3.4-1/jpeg/jdarith.c ****   entropy->pub.start_pass = start_pass;
 2591              		.loc 1 773 0
 2592 0026 48C70000 		movq	$start_pass, (%rax)
 2592      000000
 774:fltk-1.3.4-1/jpeg/jdarith.c ****   entropy->pub.finish_pass = finish_pass;
 2593              		.loc 1 774 0
 2594 002d 48C74010 		movq	$finish_pass, 16(%rax)
 2594      00000000 
 2595              	.LVL330:
 2596              		.p2align 4,,10
 2597 0035 0F1F00   		.p2align 3
 2598              	.L275:
 775:fltk-1.3.4-1/jpeg/jdarith.c **** 
 776:fltk-1.3.4-1/jpeg/jdarith.c ****   /* Mark tables unallocated */
 777:fltk-1.3.4-1/jpeg/jdarith.c ****   for (i = 0; i < NUM_ARITH_TBLS; i++) {
 778:fltk-1.3.4-1/jpeg/jdarith.c ****     entropy->dc_stats[i] = NULL;
 2599              		.loc 1 778 0 discriminator 3
 2600 0038 48C70200 		movq	$0, (%rdx)
 2600      000000
 779:fltk-1.3.4-1/jpeg/jdarith.c ****     entropy->ac_stats[i] = NULL;
 2601              		.loc 1 779 0 discriminator 3
 2602 003f 48C78280 		movq	$0, 128(%rdx)
 2602      00000000 
 2602      000000
 2603 004a 4883C208 		addq	$8, %rdx
 777:fltk-1.3.4-1/jpeg/jdarith.c ****     entropy->dc_stats[i] = NULL;
 2604              		.loc 1 777 0 discriminator 3
 2605 004e 4839D1   		cmpq	%rdx, %rcx
 2606 0051 75E5     		jne	.L275
 780:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 781:fltk-1.3.4-1/jpeg/jdarith.c **** 
 782:fltk-1.3.4-1/jpeg/jdarith.c ****   /* Initialize index for fixed probability estimation */
 783:fltk-1.3.4-1/jpeg/jdarith.c ****   entropy->fixed_bin[0] = 113;
 2607              		.loc 1 783 0
 2608 0053 C6805001 		movb	$113, 336(%rax)
 2608      000071
 784:fltk-1.3.4-1/jpeg/jdarith.c **** 
 785:fltk-1.3.4-1/jpeg/jdarith.c ****   if (cinfo->progressive_mode) {
 2609              		.loc 1 785 0
 2610 005a 8B8B3C01 		movl	316(%rbx), %ecx
 2610      0000
 2611 0060 85C9     		testl	%ecx, %ecx
 2612 0062 7502     		jne	.L284
 2613              	.LVL331:
 2614              	.L274:
 786:fltk-1.3.4-1/jpeg/jdarith.c ****     /* Create progression status table */
 787:fltk-1.3.4-1/jpeg/jdarith.c ****     int *coef_bit_ptr, ci;
 788:fltk-1.3.4-1/jpeg/jdarith.c ****     cinfo->coef_bits = (int (*)[DCTSIZE2])
 789:fltk-1.3.4-1/jpeg/jdarith.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 790:fltk-1.3.4-1/jpeg/jdarith.c **** 				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
 791:fltk-1.3.4-1/jpeg/jdarith.c ****     coef_bit_ptr = & cinfo->coef_bits[0][0];
 792:fltk-1.3.4-1/jpeg/jdarith.c ****     for (ci = 0; ci < cinfo->num_components; ci++) 
 793:fltk-1.3.4-1/jpeg/jdarith.c ****       for (i = 0; i < DCTSIZE2; i++)
 794:fltk-1.3.4-1/jpeg/jdarith.c **** 	*coef_bit_ptr++ = -1;
 795:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 796:fltk-1.3.4-1/jpeg/jdarith.c **** }
 2615              		.loc 1 796 0
 2616 0064 5B       		popq	%rbx
 2617              		.cfi_remember_state
 2618              		.cfi_def_cfa_offset 8
 2619              	.LVL332:
 2620 0065 C3       		ret
 2621              	.LVL333:
 2622              	.L284:
 2623              		.cfi_restore_state
 2624              	.LBB29:
 789:fltk-1.3.4-1/jpeg/jdarith.c **** 				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
 2625              		.loc 1 789 0
 2626 0066 8B5338   		movl	56(%rbx), %edx
 2627 0069 488B4308 		movq	8(%rbx), %rax
 2628              	.LVL334:
 2629 006d BE010000 		movl	$1, %esi
 2629      00
 2630 0072 4889DF   		movq	%rbx, %rdi
 2631 0075 C1E206   		sall	$6, %edx
 2632 0078 4863D2   		movslq	%edx, %rdx
 2633 007b 48C1E202 		salq	$2, %rdx
 2634 007f FF10     		call	*(%rax)
 2635              	.LVL335:
 792:fltk-1.3.4-1/jpeg/jdarith.c ****       for (i = 0; i < DCTSIZE2; i++)
 2636              		.loc 1 792 0
 2637 0081 8B5338   		movl	56(%rbx), %edx
 788:fltk-1.3.4-1/jpeg/jdarith.c ****       (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 2638              		.loc 1 788 0
 2639 0084 488983C0 		movq	%rax, 192(%rbx)
 2639      000000
 2640              	.LVL336:
 792:fltk-1.3.4-1/jpeg/jdarith.c ****       for (i = 0; i < DCTSIZE2; i++)
 2641              		.loc 1 792 0
 2642 008b 85D2     		testl	%edx, %edx
 2643 008d 7ED5     		jle	.L274
 792:fltk-1.3.4-1/jpeg/jdarith.c ****       for (i = 0; i < DCTSIZE2; i++)
 2644              		.loc 1 792 0 is_stmt 0 discriminator 3
 2645 008f 31C9     		xorl	%ecx, %ecx
 2646              	.LVL337:
 2647              		.p2align 4,,10
 2648 0091 0F1F8000 		.p2align 3
 2648      000000
 2649              	.L279:
 2650 0098 488D9000 		leaq	256(%rax), %rdx
 2650      010000
 2651 009f 90       		.p2align 4,,10
 2652              		.p2align 3
 2653              	.L278:
 794:fltk-1.3.4-1/jpeg/jdarith.c ****   }
 2654              		.loc 1 794 0 is_stmt 1 discriminator 3
 2655 00a0 4883C004 		addq	$4, %rax
 2656              	.LVL338:
 2657 00a4 C740FCFF 		movl	$-1, -4(%rax)
 2657      FFFFFF
 793:fltk-1.3.4-1/jpeg/jdarith.c **** 	*coef_bit_ptr++ = -1;
 2658              		.loc 1 793 0 discriminator 3
 2659 00ab 4839C2   		cmpq	%rax, %rdx
 2660 00ae 75F0     		jne	.L278
 792:fltk-1.3.4-1/jpeg/jdarith.c ****       for (i = 0; i < DCTSIZE2; i++)
 2661              		.loc 1 792 0 discriminator 2
 2662 00b0 83C101   		addl	$1, %ecx
 2663              	.LVL339:
 2664 00b3 394B38   		cmpl	%ecx, 56(%rbx)
 2665 00b6 7FE0     		jg	.L279
 2666              	.LBE29:
 2667              		.loc 1 796 0
 2668 00b8 5B       		popq	%rbx
 2669              		.cfi_def_cfa_offset 8
 2670              	.LVL340:
 2671 00b9 C3       		ret
 2672              		.cfi_endproc
 2673              	.LFE71:
 2675              		.section	.text.unlikely.jinit_arith_decoder
 2676              	.LCOLDE10:
 2677              		.section	.text.jinit_arith_decoder
 2678              	.LHOTE10:
 2679              		.text
 2680              	.Letext0:
 2681              		.section	.text.unlikely.get_byte
 2682              	.Letext_cold0:
 2683              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 2684              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 2685              		.file 5 "/usr/include/libio.h"
 2686              		.file 6 "fltk-1.3.4-1/jpeg/jmorecfg.h"
 2687              		.file 7 "fltk-1.3.4-1/jpeg/jpeglib.h"
 2688              		.file 8 "fltk-1.3.4-1/jpeg/jpegint.h"
 2689              		.file 9 "fltk-1.3.4-1/jpeg/jerror.h"
 2690              		.file 10 "/usr/include/stdio.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 jdarith.c
     /tmp/cc7IMPAk.s:13     .text.get_byte:0000000000000000 get_byte
     /tmp/cc7IMPAk.s:88     .text.arith_decode:0000000000000000 arith_decode
     /tmp/cc7IMPAk.s:358    .text.finish_pass:0000000000000000 finish_pass
     /tmp/cc7IMPAk.s:377    .text.process_restart:0000000000000000 process_restart
     /tmp/cc7IMPAk.s:555    .text.decode_mcu_DC_first:0000000000000000 decode_mcu_DC_first
     /tmp/cc7IMPAk.s:859    .text.decode_mcu_AC_first:0000000000000000 decode_mcu_AC_first
     /tmp/cc7IMPAk.s:1153   .text.decode_mcu_DC_refine:0000000000000000 decode_mcu_DC_refine
     /tmp/cc7IMPAk.s:1279   .text.decode_mcu_AC_refine:0000000000000000 decode_mcu_AC_refine
     /tmp/cc7IMPAk.s:1559   .text.decode_mcu:0000000000000000 decode_mcu
     /tmp/cc7IMPAk.s:2047   .text.start_pass:0000000000000000 start_pass
     /tmp/cc7IMPAk.s:2570   .text.jinit_arith_decoder:0000000000000000 jinit_arith_decoder
                           .group:0000000000000000 wm4.0.cf9695abff4f49bdfe00dc4091904acd
                           .group:0000000000000000 wm4.stdcpredef.h.19.bf2bf6c5fb087dfb5ef2d2297c2795de
                           .group:0000000000000000 wm4.jconfig.h.10.247fc3ff67998f3074970b1373c70333
                           .group:0000000000000000 wm4.features.h.19.24da27e0a4d0d521fd057013d982b8b5
                           .group:0000000000000000 wm4.cdefs.h.19.56613e71f285ebad825b69b151170a81
                           .group:0000000000000000 wm4.wordsize.h.4.256e8fdbd37801980286acdbc40d0280
                           .group:0000000000000000 wm4.cdefs.h.432.619afd0aac7c4b439843706c1b28ddea
                           .group:0000000000000000 wm4.stubs64.h.10.918ceb5fa58268542bf143e4c1efbcf3
                           .group:0000000000000000 wm4.stdlib.h.27.59e2586c75bdbcb991b248ad7257b993
                           .group:0000000000000000 wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1
                           .group:0000000000000000 wm4.waitflags.h.25.e401b8bcfee800b540b27abd7cc78de9
                           .group:0000000000000000 wm4.waitstatus.h.28.93f167f49d64e2b9b99f98d1162a93bf
                           .group:0000000000000000 wm4.endian.h.19.ff00c9c0f5e9f9a9719c5de76ace57b4
                           .group:0000000000000000 wm4.endian.h.41.24cced64aef71195a51d4daa8e4f4a95
                           .group:0000000000000000 wm4.types.h.89.468e2451361e3b92f048f6cad51690ff
                           .group:0000000000000000 wm4.typesizes.h.24.40eb69a6270178f15d1bf3d7b6635a8b
                           .group:0000000000000000 wm4.byteswap.h.38.11ee5fdc0f6cc53a16c505b9233cecef
                           .group:0000000000000000 wm4.endian.h.63.97272d7c64d5db8020003b32e9289502
                           .group:0000000000000000 wm4.waitstatus.h.99.408b6270fa6eb71377201a241ef15f79
                           .group:0000000000000000 wm4.stdlib.h.50.84aeca2ac6f37d40e1e9b3cef757ba2d
                           .group:0000000000000000 wm4.types.h.23.f6dcbaa72f8f71361acef09804d45a5e
                           .group:0000000000000000 wm4.time.h.53.beb46e650cd406cb917b6b96b45e640a
                           .group:0000000000000000 wm4.stddef.h.238.847b6907dabda77be90a9ab7ad789e2e
                           .group:0000000000000000 wm4.types.h.187.bd5a05039b505b3620e6973f1b2ffeb1
                           .group:0000000000000000 wm4.select.h.28.eb2f3debdbcffd1442ebddaebc4fb6ff
                           .group:0000000000000000 wm4.sigset.h.20.f36413b6d2364ad847d3db53fb03e683
                           .group:0000000000000000 wm4.select.h.36.f76c3b9e55c871743863013cc4cc14c9
                           .group:0000000000000000 wm4.time.h.66.e70ce69790c975f0efb369340c432e0b
                           .group:0000000000000000 wm4.time.h.25.ae5284cdff565e87a9198d819340325d
                           .group:0000000000000000 wm4.select.h.49.e9d2041e5035cc68ebd1a20f7dbc8514
                           .group:0000000000000000 wm4.select2.h.27.f95f2ab0ffee66dc1b6575014894b21a
                           .group:0000000000000000 wm4.sysmacros.h.20.8a0c33ff175cd9b434a86c0aaa36f0a2
                           .group:0000000000000000 wm4.types.h.229.67b3f66bd74b06b451caec392a72a945
                           .group:0000000000000000 wm4.pthreadtypes.h.25.6892b1493314fcf446bbc76e7362acba
                           .group:0000000000000000 wm4.alloca.h.19.edefa922a76c1cbaaf1e416903ba2d1c
                           .group:0000000000000000 wm4.alloca.h.29.156e12058824cc23d961c4d3b13031f6
                           .group:0000000000000000 wm4.stdio.h.26.4719156f1aea2bb9662fd6c582dc9a4c
                           .group:0000000000000000 wm4.stddef.h.238.04cc7214bceba497b20d15c10fd97511
                           .group:0000000000000000 wm4.stdio.h.36.2dd12c1fd035242ad5cfd0152a01be5a
                           .group:0000000000000000 wm4._G_config.h.5.b0f37d9e474454cf6e459063458db32f
                           .group:0000000000000000 wm4.wchar.h.80.eea3eba2d2a17aace9470a8e0d8218dc
                           .group:0000000000000000 wm4._G_config.h.46.5187c97b14fd664662cb32e6b94fc49e
                           .group:0000000000000000 wm4.libio.h.33.a775b9ecae273f33bc59931e9891e4ca
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.libio.h.51.dab170798ec1df48c625aea7c30e1b63
                           .group:0000000000000000 wm4.stdio.h.80.17b7dd1ca72d8a61987532cb1d80194a
                           .group:0000000000000000 wm4.stdio_lim.h.23.557290a6cddeba0587f574f29e3a5fb9
                           .group:0000000000000000 wm4.stdio.h.172.df21df34a7396d7da2e08f9b617d582f
                           .group:0000000000000000 wm4.stdio.h.26.cae64f7ada9bb8327a89dba6a5e93655
                           .group:0000000000000000 wm4.string.h.23.8394011d5995a16f15d67d04e84a1d69
                           .group:0000000000000000 wm4.string.h.24.1b0dc67418e7128d207285861439c2f8
                           .group:0000000000000000 wm4.string2.h.45.00535b99420fc3014c2da41d6645330d
                           .group:0000000000000000 wm4.string3.h.31.0c4b9301b754a2db05eaafef869657d2
                           .group:0000000000000000 wm4.jinclude.h.67.b19f941ec97c4845fa4609292c7e2db4
                           .group:0000000000000000 wm4.jmorecfg.h.33.3b4c5f9cc07b3737823b06caf24d5b05
                           .group:0000000000000000 wm4.jpeglib.h.40.4f111c27252a38df39328d65454e82f4
                           .group:0000000000000000 wm4.jpegint.h.26.5219ef5d4e4921371d38e77b6091fd20
                           .group:0000000000000000 wm4.jerror.h.25.1dbd8674e70ab5215bc0037320e5c2a2

UNDEFINED SYMBOLS
jpeg_aritab
