   1              		.file	"jquant1.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.create_colorindex,"ax",@progbits
   5              		.p2align 4
   7              	create_colorindex:
   8              	.LVL0:
   9              	.LFB55:
  10              		.file 1 "fltk-1.3.4-1/jpeg/jquant1.c"
   1:fltk-1.3.4-1/jpeg/jquant1.c **** /*
   2:fltk-1.3.4-1/jpeg/jquant1.c ****  * jquant1.c
   3:fltk-1.3.4-1/jpeg/jquant1.c ****  *
   4:fltk-1.3.4-1/jpeg/jquant1.c ****  * Copyright (C) 1991-1996, Thomas G. Lane.
   5:fltk-1.3.4-1/jpeg/jquant1.c ****  * Modified 2011 by Guido Vollbeding.
   6:fltk-1.3.4-1/jpeg/jquant1.c ****  * This file is part of the Independent JPEG Group's software.
   7:fltk-1.3.4-1/jpeg/jquant1.c ****  * For conditions of distribution and use, see the accompanying README file.
   8:fltk-1.3.4-1/jpeg/jquant1.c ****  *
   9:fltk-1.3.4-1/jpeg/jquant1.c ****  * This file contains 1-pass color quantization (color mapping) routines.
  10:fltk-1.3.4-1/jpeg/jquant1.c ****  * These routines provide mapping to a fixed color map using equally spaced
  11:fltk-1.3.4-1/jpeg/jquant1.c ****  * color values.  Optional Floyd-Steinberg or ordered dithering is available.
  12:fltk-1.3.4-1/jpeg/jquant1.c ****  */
  13:fltk-1.3.4-1/jpeg/jquant1.c **** 
  14:fltk-1.3.4-1/jpeg/jquant1.c **** #define JPEG_INTERNALS
  15:fltk-1.3.4-1/jpeg/jquant1.c **** #include "jinclude.h"
  16:fltk-1.3.4-1/jpeg/jquant1.c **** #include "jpeglib.h"
  17:fltk-1.3.4-1/jpeg/jquant1.c **** 
  18:fltk-1.3.4-1/jpeg/jquant1.c **** #ifdef QUANT_1PASS_SUPPORTED
  19:fltk-1.3.4-1/jpeg/jquant1.c **** 
  20:fltk-1.3.4-1/jpeg/jquant1.c **** 
  21:fltk-1.3.4-1/jpeg/jquant1.c **** /*
  22:fltk-1.3.4-1/jpeg/jquant1.c ****  * The main purpose of 1-pass quantization is to provide a fast, if not very
  23:fltk-1.3.4-1/jpeg/jquant1.c ****  * high quality, colormapped output capability.  A 2-pass quantizer usually
  24:fltk-1.3.4-1/jpeg/jquant1.c ****  * gives better visual quality; however, for quantized grayscale output this
  25:fltk-1.3.4-1/jpeg/jquant1.c ****  * quantizer is perfectly adequate.  Dithering is highly recommended with this
  26:fltk-1.3.4-1/jpeg/jquant1.c ****  * quantizer, though you can turn it off if you really want to.
  27:fltk-1.3.4-1/jpeg/jquant1.c ****  *
  28:fltk-1.3.4-1/jpeg/jquant1.c ****  * In 1-pass quantization the colormap must be chosen in advance of seeing the
  29:fltk-1.3.4-1/jpeg/jquant1.c ****  * image.  We use a map consisting of all combinations of Ncolors[i] color
  30:fltk-1.3.4-1/jpeg/jquant1.c ****  * values for the i'th component.  The Ncolors[] values are chosen so that
  31:fltk-1.3.4-1/jpeg/jquant1.c ****  * their product, the total number of colors, is no more than that requested.
  32:fltk-1.3.4-1/jpeg/jquant1.c ****  * (In most cases, the product will be somewhat less.)
  33:fltk-1.3.4-1/jpeg/jquant1.c ****  *
  34:fltk-1.3.4-1/jpeg/jquant1.c ****  * Since the colormap is orthogonal, the representative value for each color
  35:fltk-1.3.4-1/jpeg/jquant1.c ****  * component can be determined without considering the other components;
  36:fltk-1.3.4-1/jpeg/jquant1.c ****  * then these indexes can be combined into a colormap index by a standard
  37:fltk-1.3.4-1/jpeg/jquant1.c ****  * N-dimensional-array-subscript calculation.  Most of the arithmetic involved
  38:fltk-1.3.4-1/jpeg/jquant1.c ****  * can be precalculated and stored in the lookup table colorindex[].
  39:fltk-1.3.4-1/jpeg/jquant1.c ****  * colorindex[i][j] maps pixel value j in component i to the nearest
  40:fltk-1.3.4-1/jpeg/jquant1.c ****  * representative value (grid plane) for that component; this index is
  41:fltk-1.3.4-1/jpeg/jquant1.c ****  * multiplied by the array stride for component i, so that the
  42:fltk-1.3.4-1/jpeg/jquant1.c ****  * index of the colormap entry closest to a given pixel value is just
  43:fltk-1.3.4-1/jpeg/jquant1.c ****  *    sum( colorindex[component-number][pixel-component-value] )
  44:fltk-1.3.4-1/jpeg/jquant1.c ****  * Aside from being fast, this scheme allows for variable spacing between
  45:fltk-1.3.4-1/jpeg/jquant1.c ****  * representative values with no additional lookup cost.
  46:fltk-1.3.4-1/jpeg/jquant1.c ****  *
  47:fltk-1.3.4-1/jpeg/jquant1.c ****  * If gamma correction has been applied in color conversion, it might be wise
  48:fltk-1.3.4-1/jpeg/jquant1.c ****  * to adjust the color grid spacing so that the representative colors are
  49:fltk-1.3.4-1/jpeg/jquant1.c ****  * equidistant in linear space.  At this writing, gamma correction is not
  50:fltk-1.3.4-1/jpeg/jquant1.c ****  * implemented by jdcolor, so nothing is done here.
  51:fltk-1.3.4-1/jpeg/jquant1.c ****  */
  52:fltk-1.3.4-1/jpeg/jquant1.c **** 
  53:fltk-1.3.4-1/jpeg/jquant1.c **** 
  54:fltk-1.3.4-1/jpeg/jquant1.c **** /* Declarations for ordered dithering.
  55:fltk-1.3.4-1/jpeg/jquant1.c ****  *
  56:fltk-1.3.4-1/jpeg/jquant1.c ****  * We use a standard 16x16 ordered dither array.  The basic concept of ordered
  57:fltk-1.3.4-1/jpeg/jquant1.c ****  * dithering is described in many references, for instance Dale Schumacher's
  58:fltk-1.3.4-1/jpeg/jquant1.c ****  * chapter II.2 of Graphics Gems II (James Arvo, ed. Academic Press, 1991).
  59:fltk-1.3.4-1/jpeg/jquant1.c ****  * In place of Schumacher's comparisons against a "threshold" value, we add a
  60:fltk-1.3.4-1/jpeg/jquant1.c ****  * "dither" value to the input pixel and then round the result to the nearest
  61:fltk-1.3.4-1/jpeg/jquant1.c ****  * output value.  The dither value is equivalent to (0.5 - threshold) times
  62:fltk-1.3.4-1/jpeg/jquant1.c ****  * the distance between output values.  For ordered dithering, we assume that
  63:fltk-1.3.4-1/jpeg/jquant1.c ****  * the output colors are equally spaced; if not, results will probably be
  64:fltk-1.3.4-1/jpeg/jquant1.c ****  * worse, since the dither may be too much or too little at a given point.
  65:fltk-1.3.4-1/jpeg/jquant1.c ****  *
  66:fltk-1.3.4-1/jpeg/jquant1.c ****  * The normal calculation would be to form pixel value + dither, range-limit
  67:fltk-1.3.4-1/jpeg/jquant1.c ****  * this to 0..MAXJSAMPLE, and then index into the colorindex table as usual.
  68:fltk-1.3.4-1/jpeg/jquant1.c ****  * We can skip the separate range-limiting step by extending the colorindex
  69:fltk-1.3.4-1/jpeg/jquant1.c ****  * table in both directions.
  70:fltk-1.3.4-1/jpeg/jquant1.c ****  */
  71:fltk-1.3.4-1/jpeg/jquant1.c **** 
  72:fltk-1.3.4-1/jpeg/jquant1.c **** #define ODITHER_SIZE  16	/* dimension of dither matrix */
  73:fltk-1.3.4-1/jpeg/jquant1.c **** /* NB: if ODITHER_SIZE is not a power of 2, ODITHER_MASK uses will break */
  74:fltk-1.3.4-1/jpeg/jquant1.c **** #define ODITHER_CELLS (ODITHER_SIZE*ODITHER_SIZE)	/* # cells in matrix */
  75:fltk-1.3.4-1/jpeg/jquant1.c **** #define ODITHER_MASK  (ODITHER_SIZE-1) /* mask for wrapping around counters */
  76:fltk-1.3.4-1/jpeg/jquant1.c **** 
  77:fltk-1.3.4-1/jpeg/jquant1.c **** typedef int ODITHER_MATRIX[ODITHER_SIZE][ODITHER_SIZE];
  78:fltk-1.3.4-1/jpeg/jquant1.c **** typedef int (*ODITHER_MATRIX_PTR)[ODITHER_SIZE];
  79:fltk-1.3.4-1/jpeg/jquant1.c **** 
  80:fltk-1.3.4-1/jpeg/jquant1.c **** static const UINT8 base_dither_matrix[ODITHER_SIZE][ODITHER_SIZE] = {
  81:fltk-1.3.4-1/jpeg/jquant1.c ****   /* Bayer's order-4 dither array.  Generated by the code given in
  82:fltk-1.3.4-1/jpeg/jquant1.c ****    * Stephen Hawley's article "Ordered Dithering" in Graphics Gems I.
  83:fltk-1.3.4-1/jpeg/jquant1.c ****    * The values in this array must range from 0 to ODITHER_CELLS-1.
  84:fltk-1.3.4-1/jpeg/jquant1.c ****    */
  85:fltk-1.3.4-1/jpeg/jquant1.c ****   {   0,192, 48,240, 12,204, 60,252,  3,195, 51,243, 15,207, 63,255 },
  86:fltk-1.3.4-1/jpeg/jquant1.c ****   { 128, 64,176,112,140, 76,188,124,131, 67,179,115,143, 79,191,127 },
  87:fltk-1.3.4-1/jpeg/jquant1.c ****   {  32,224, 16,208, 44,236, 28,220, 35,227, 19,211, 47,239, 31,223 },
  88:fltk-1.3.4-1/jpeg/jquant1.c ****   { 160, 96,144, 80,172,108,156, 92,163, 99,147, 83,175,111,159, 95 },
  89:fltk-1.3.4-1/jpeg/jquant1.c ****   {   8,200, 56,248,  4,196, 52,244, 11,203, 59,251,  7,199, 55,247 },
  90:fltk-1.3.4-1/jpeg/jquant1.c ****   { 136, 72,184,120,132, 68,180,116,139, 75,187,123,135, 71,183,119 },
  91:fltk-1.3.4-1/jpeg/jquant1.c ****   {  40,232, 24,216, 36,228, 20,212, 43,235, 27,219, 39,231, 23,215 },
  92:fltk-1.3.4-1/jpeg/jquant1.c ****   { 168,104,152, 88,164,100,148, 84,171,107,155, 91,167,103,151, 87 },
  93:fltk-1.3.4-1/jpeg/jquant1.c ****   {   2,194, 50,242, 14,206, 62,254,  1,193, 49,241, 13,205, 61,253 },
  94:fltk-1.3.4-1/jpeg/jquant1.c ****   { 130, 66,178,114,142, 78,190,126,129, 65,177,113,141, 77,189,125 },
  95:fltk-1.3.4-1/jpeg/jquant1.c ****   {  34,226, 18,210, 46,238, 30,222, 33,225, 17,209, 45,237, 29,221 },
  96:fltk-1.3.4-1/jpeg/jquant1.c ****   { 162, 98,146, 82,174,110,158, 94,161, 97,145, 81,173,109,157, 93 },
  97:fltk-1.3.4-1/jpeg/jquant1.c ****   {  10,202, 58,250,  6,198, 54,246,  9,201, 57,249,  5,197, 53,245 },
  98:fltk-1.3.4-1/jpeg/jquant1.c ****   { 138, 74,186,122,134, 70,182,118,137, 73,185,121,133, 69,181,117 },
  99:fltk-1.3.4-1/jpeg/jquant1.c ****   {  42,234, 26,218, 38,230, 22,214, 41,233, 25,217, 37,229, 21,213 },
 100:fltk-1.3.4-1/jpeg/jquant1.c ****   { 170,106,154, 90,166,102,150, 86,169,105,153, 89,165,101,149, 85 }
 101:fltk-1.3.4-1/jpeg/jquant1.c **** };
 102:fltk-1.3.4-1/jpeg/jquant1.c **** 
 103:fltk-1.3.4-1/jpeg/jquant1.c **** 
 104:fltk-1.3.4-1/jpeg/jquant1.c **** /* Declarations for Floyd-Steinberg dithering.
 105:fltk-1.3.4-1/jpeg/jquant1.c ****  *
 106:fltk-1.3.4-1/jpeg/jquant1.c ****  * Errors are accumulated into the array fserrors[], at a resolution of
 107:fltk-1.3.4-1/jpeg/jquant1.c ****  * 1/16th of a pixel count.  The error at a given pixel is propagated
 108:fltk-1.3.4-1/jpeg/jquant1.c ****  * to its not-yet-processed neighbors using the standard F-S fractions,
 109:fltk-1.3.4-1/jpeg/jquant1.c ****  *		...	(here)	7/16
 110:fltk-1.3.4-1/jpeg/jquant1.c ****  *		3/16	5/16	1/16
 111:fltk-1.3.4-1/jpeg/jquant1.c ****  * We work left-to-right on even rows, right-to-left on odd rows.
 112:fltk-1.3.4-1/jpeg/jquant1.c ****  *
 113:fltk-1.3.4-1/jpeg/jquant1.c ****  * We can get away with a single array (holding one row's worth of errors)
 114:fltk-1.3.4-1/jpeg/jquant1.c ****  * by using it to store the current row's errors at pixel columns not yet
 115:fltk-1.3.4-1/jpeg/jquant1.c ****  * processed, but the next row's errors at columns already processed.  We
 116:fltk-1.3.4-1/jpeg/jquant1.c ****  * need only a few extra variables to hold the errors immediately around the
 117:fltk-1.3.4-1/jpeg/jquant1.c ****  * current column.  (If we are lucky, those variables are in registers, but
 118:fltk-1.3.4-1/jpeg/jquant1.c ****  * even if not, they're probably cheaper to access than array elements are.)
 119:fltk-1.3.4-1/jpeg/jquant1.c ****  *
 120:fltk-1.3.4-1/jpeg/jquant1.c ****  * The fserrors[] array is indexed [component#][position].
 121:fltk-1.3.4-1/jpeg/jquant1.c ****  * We provide (#columns + 2) entries per component; the extra entry at each
 122:fltk-1.3.4-1/jpeg/jquant1.c ****  * end saves us from special-casing the first and last pixels.
 123:fltk-1.3.4-1/jpeg/jquant1.c ****  *
 124:fltk-1.3.4-1/jpeg/jquant1.c ****  * Note: on a wide image, we might not have enough room in a PC's near data
 125:fltk-1.3.4-1/jpeg/jquant1.c ****  * segment to hold the error array; so it is allocated with alloc_large.
 126:fltk-1.3.4-1/jpeg/jquant1.c ****  */
 127:fltk-1.3.4-1/jpeg/jquant1.c **** 
 128:fltk-1.3.4-1/jpeg/jquant1.c **** #if BITS_IN_JSAMPLE == 8
 129:fltk-1.3.4-1/jpeg/jquant1.c **** typedef INT16 FSERROR;		/* 16 bits should be enough */
 130:fltk-1.3.4-1/jpeg/jquant1.c **** typedef int LOCFSERROR;		/* use 'int' for calculation temps */
 131:fltk-1.3.4-1/jpeg/jquant1.c **** #else
 132:fltk-1.3.4-1/jpeg/jquant1.c **** typedef INT32 FSERROR;		/* may need more than 16 bits */
 133:fltk-1.3.4-1/jpeg/jquant1.c **** typedef INT32 LOCFSERROR;	/* be sure calculation temps are big enough */
 134:fltk-1.3.4-1/jpeg/jquant1.c **** #endif
 135:fltk-1.3.4-1/jpeg/jquant1.c **** 
 136:fltk-1.3.4-1/jpeg/jquant1.c **** typedef FSERROR FAR *FSERRPTR;	/* pointer to error array (in FAR storage!) */
 137:fltk-1.3.4-1/jpeg/jquant1.c **** 
 138:fltk-1.3.4-1/jpeg/jquant1.c **** 
 139:fltk-1.3.4-1/jpeg/jquant1.c **** /* Private subobject */
 140:fltk-1.3.4-1/jpeg/jquant1.c **** 
 141:fltk-1.3.4-1/jpeg/jquant1.c **** #define MAX_Q_COMPS 4		/* max components I can handle */
 142:fltk-1.3.4-1/jpeg/jquant1.c **** 
 143:fltk-1.3.4-1/jpeg/jquant1.c **** typedef struct {
 144:fltk-1.3.4-1/jpeg/jquant1.c ****   struct jpeg_color_quantizer pub; /* public fields */
 145:fltk-1.3.4-1/jpeg/jquant1.c **** 
 146:fltk-1.3.4-1/jpeg/jquant1.c ****   /* Initially allocated colormap is saved here */
 147:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPARRAY sv_colormap;	/* The color map as a 2-D pixel array */
 148:fltk-1.3.4-1/jpeg/jquant1.c ****   int sv_actual;		/* number of entries in use */
 149:fltk-1.3.4-1/jpeg/jquant1.c **** 
 150:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPARRAY colorindex;	/* Precomputed mapping for speed */
 151:fltk-1.3.4-1/jpeg/jquant1.c ****   /* colorindex[i][j] = index of color closest to pixel value j in component i,
 152:fltk-1.3.4-1/jpeg/jquant1.c ****    * premultiplied as described above.  Since colormap indexes must fit into
 153:fltk-1.3.4-1/jpeg/jquant1.c ****    * JSAMPLEs, the entries of this array will too.
 154:fltk-1.3.4-1/jpeg/jquant1.c ****    */
 155:fltk-1.3.4-1/jpeg/jquant1.c ****   boolean is_padded;		/* is the colorindex padded for odither? */
 156:fltk-1.3.4-1/jpeg/jquant1.c **** 
 157:fltk-1.3.4-1/jpeg/jquant1.c ****   int Ncolors[MAX_Q_COMPS];	/* # of values alloced to each component */
 158:fltk-1.3.4-1/jpeg/jquant1.c **** 
 159:fltk-1.3.4-1/jpeg/jquant1.c ****   /* Variables for ordered dithering */
 160:fltk-1.3.4-1/jpeg/jquant1.c ****   int row_index;		/* cur row's vertical index in dither matrix */
 161:fltk-1.3.4-1/jpeg/jquant1.c ****   ODITHER_MATRIX_PTR odither[MAX_Q_COMPS]; /* one dither array per component */
 162:fltk-1.3.4-1/jpeg/jquant1.c **** 
 163:fltk-1.3.4-1/jpeg/jquant1.c ****   /* Variables for Floyd-Steinberg dithering */
 164:fltk-1.3.4-1/jpeg/jquant1.c ****   FSERRPTR fserrors[MAX_Q_COMPS]; /* accumulated errors */
 165:fltk-1.3.4-1/jpeg/jquant1.c ****   boolean on_odd_row;		/* flag to remember which row we are on */
 166:fltk-1.3.4-1/jpeg/jquant1.c **** } my_cquantizer;
 167:fltk-1.3.4-1/jpeg/jquant1.c **** 
 168:fltk-1.3.4-1/jpeg/jquant1.c **** typedef my_cquantizer * my_cquantize_ptr;
 169:fltk-1.3.4-1/jpeg/jquant1.c **** 
 170:fltk-1.3.4-1/jpeg/jquant1.c **** 
 171:fltk-1.3.4-1/jpeg/jquant1.c **** /*
 172:fltk-1.3.4-1/jpeg/jquant1.c ****  * Policy-making subroutines for create_colormap and create_colorindex.
 173:fltk-1.3.4-1/jpeg/jquant1.c ****  * These routines determine the colormap to be used.  The rest of the module
 174:fltk-1.3.4-1/jpeg/jquant1.c ****  * only assumes that the colormap is orthogonal.
 175:fltk-1.3.4-1/jpeg/jquant1.c ****  *
 176:fltk-1.3.4-1/jpeg/jquant1.c ****  *  * select_ncolors decides how to divvy up the available colors
 177:fltk-1.3.4-1/jpeg/jquant1.c ****  *    among the components.
 178:fltk-1.3.4-1/jpeg/jquant1.c ****  *  * output_value defines the set of representative values for a component.
 179:fltk-1.3.4-1/jpeg/jquant1.c ****  *  * largest_input_value defines the mapping from input values to
 180:fltk-1.3.4-1/jpeg/jquant1.c ****  *    representative values for a component.
 181:fltk-1.3.4-1/jpeg/jquant1.c ****  * Note that the latter two routines may impose different policies for
 182:fltk-1.3.4-1/jpeg/jquant1.c ****  * different components, though this is not currently done.
 183:fltk-1.3.4-1/jpeg/jquant1.c ****  */
 184:fltk-1.3.4-1/jpeg/jquant1.c **** 
 185:fltk-1.3.4-1/jpeg/jquant1.c **** 
 186:fltk-1.3.4-1/jpeg/jquant1.c **** LOCAL(int)
 187:fltk-1.3.4-1/jpeg/jquant1.c **** select_ncolors (j_decompress_ptr cinfo, int Ncolors[])
 188:fltk-1.3.4-1/jpeg/jquant1.c **** /* Determine allocation of desired colors to components, */
 189:fltk-1.3.4-1/jpeg/jquant1.c **** /* and fill in Ncolors[] array to indicate choice. */
 190:fltk-1.3.4-1/jpeg/jquant1.c **** /* Return value is total number of colors (product of Ncolors[] values). */
 191:fltk-1.3.4-1/jpeg/jquant1.c **** {
 192:fltk-1.3.4-1/jpeg/jquant1.c ****   int nc = cinfo->out_color_components; /* number of color components */
 193:fltk-1.3.4-1/jpeg/jquant1.c ****   int max_colors = cinfo->desired_number_of_colors;
 194:fltk-1.3.4-1/jpeg/jquant1.c ****   int total_colors, iroot, i, j;
 195:fltk-1.3.4-1/jpeg/jquant1.c ****   boolean changed;
 196:fltk-1.3.4-1/jpeg/jquant1.c ****   long temp;
 197:fltk-1.3.4-1/jpeg/jquant1.c ****   static const int RGB_order[3] = { RGB_GREEN, RGB_RED, RGB_BLUE };
 198:fltk-1.3.4-1/jpeg/jquant1.c **** 
 199:fltk-1.3.4-1/jpeg/jquant1.c ****   /* We can allocate at least the nc'th root of max_colors per component. */
 200:fltk-1.3.4-1/jpeg/jquant1.c ****   /* Compute floor(nc'th root of max_colors). */
 201:fltk-1.3.4-1/jpeg/jquant1.c ****   iroot = 1;
 202:fltk-1.3.4-1/jpeg/jquant1.c ****   do {
 203:fltk-1.3.4-1/jpeg/jquant1.c ****     iroot++;
 204:fltk-1.3.4-1/jpeg/jquant1.c ****     temp = iroot;		/* set temp = iroot ** nc */
 205:fltk-1.3.4-1/jpeg/jquant1.c ****     for (i = 1; i < nc; i++)
 206:fltk-1.3.4-1/jpeg/jquant1.c ****       temp *= iroot;
 207:fltk-1.3.4-1/jpeg/jquant1.c ****   } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
 208:fltk-1.3.4-1/jpeg/jquant1.c ****   iroot--;			/* now iroot = floor(root) */
 209:fltk-1.3.4-1/jpeg/jquant1.c **** 
 210:fltk-1.3.4-1/jpeg/jquant1.c ****   /* Must have at least 2 color values per component */
 211:fltk-1.3.4-1/jpeg/jquant1.c ****   if (iroot < 2)
 212:fltk-1.3.4-1/jpeg/jquant1.c ****     ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
 213:fltk-1.3.4-1/jpeg/jquant1.c **** 
 214:fltk-1.3.4-1/jpeg/jquant1.c ****   /* Initialize to iroot color values for each component */
 215:fltk-1.3.4-1/jpeg/jquant1.c ****   total_colors = 1;
 216:fltk-1.3.4-1/jpeg/jquant1.c ****   for (i = 0; i < nc; i++) {
 217:fltk-1.3.4-1/jpeg/jquant1.c ****     Ncolors[i] = iroot;
 218:fltk-1.3.4-1/jpeg/jquant1.c ****     total_colors *= iroot;
 219:fltk-1.3.4-1/jpeg/jquant1.c ****   }
 220:fltk-1.3.4-1/jpeg/jquant1.c ****   /* We may be able to increment the count for one or more components without
 221:fltk-1.3.4-1/jpeg/jquant1.c ****    * exceeding max_colors, though we know not all can be incremented.
 222:fltk-1.3.4-1/jpeg/jquant1.c ****    * Sometimes, the first component can be incremented more than once!
 223:fltk-1.3.4-1/jpeg/jquant1.c ****    * (Example: for 16 colors, we start at 2*2*2, go to 3*2*2, then 4*2*2.)
 224:fltk-1.3.4-1/jpeg/jquant1.c ****    * In RGB colorspace, try to increment G first, then R, then B.
 225:fltk-1.3.4-1/jpeg/jquant1.c ****    */
 226:fltk-1.3.4-1/jpeg/jquant1.c ****   do {
 227:fltk-1.3.4-1/jpeg/jquant1.c ****     changed = FALSE;
 228:fltk-1.3.4-1/jpeg/jquant1.c ****     for (i = 0; i < nc; i++) {
 229:fltk-1.3.4-1/jpeg/jquant1.c ****       j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 230:fltk-1.3.4-1/jpeg/jquant1.c ****       /* calculate new total_colors if Ncolors[j] is incremented */
 231:fltk-1.3.4-1/jpeg/jquant1.c ****       temp = total_colors / Ncolors[j];
 232:fltk-1.3.4-1/jpeg/jquant1.c ****       temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 233:fltk-1.3.4-1/jpeg/jquant1.c ****       if (temp > (long) max_colors)
 234:fltk-1.3.4-1/jpeg/jquant1.c **** 	break;			/* won't fit, done with this pass */
 235:fltk-1.3.4-1/jpeg/jquant1.c ****       Ncolors[j]++;		/* OK, apply the increment */
 236:fltk-1.3.4-1/jpeg/jquant1.c ****       total_colors = (int) temp;
 237:fltk-1.3.4-1/jpeg/jquant1.c ****       changed = TRUE;
 238:fltk-1.3.4-1/jpeg/jquant1.c ****     }
 239:fltk-1.3.4-1/jpeg/jquant1.c ****   } while (changed);
 240:fltk-1.3.4-1/jpeg/jquant1.c **** 
 241:fltk-1.3.4-1/jpeg/jquant1.c ****   return total_colors;
 242:fltk-1.3.4-1/jpeg/jquant1.c **** }
 243:fltk-1.3.4-1/jpeg/jquant1.c **** 
 244:fltk-1.3.4-1/jpeg/jquant1.c **** 
 245:fltk-1.3.4-1/jpeg/jquant1.c **** LOCAL(int)
 246:fltk-1.3.4-1/jpeg/jquant1.c **** output_value (j_decompress_ptr cinfo, int ci, int j, int maxj)
 247:fltk-1.3.4-1/jpeg/jquant1.c **** /* Return j'th output value, where j will range from 0 to maxj */
 248:fltk-1.3.4-1/jpeg/jquant1.c **** /* The output values must fall in 0..MAXJSAMPLE in increasing order */
 249:fltk-1.3.4-1/jpeg/jquant1.c **** {
 250:fltk-1.3.4-1/jpeg/jquant1.c ****   /* We always provide values 0 and MAXJSAMPLE for each component;
 251:fltk-1.3.4-1/jpeg/jquant1.c ****    * any additional values are equally spaced between these limits.
 252:fltk-1.3.4-1/jpeg/jquant1.c ****    * (Forcing the upper and lower values to the limits ensures that
 253:fltk-1.3.4-1/jpeg/jquant1.c ****    * dithering can't produce a color outside the selected gamut.)
 254:fltk-1.3.4-1/jpeg/jquant1.c ****    */
 255:fltk-1.3.4-1/jpeg/jquant1.c ****   return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 256:fltk-1.3.4-1/jpeg/jquant1.c **** }
 257:fltk-1.3.4-1/jpeg/jquant1.c **** 
 258:fltk-1.3.4-1/jpeg/jquant1.c **** 
 259:fltk-1.3.4-1/jpeg/jquant1.c **** LOCAL(int)
 260:fltk-1.3.4-1/jpeg/jquant1.c **** largest_input_value (j_decompress_ptr cinfo, int ci, int j, int maxj)
 261:fltk-1.3.4-1/jpeg/jquant1.c **** /* Return largest input value that should map to j'th output value */
 262:fltk-1.3.4-1/jpeg/jquant1.c **** /* Must have largest(j=0) >= 0, and largest(j=maxj) >= MAXJSAMPLE */
 263:fltk-1.3.4-1/jpeg/jquant1.c **** {
 264:fltk-1.3.4-1/jpeg/jquant1.c ****   /* Breakpoints are halfway between values returned by output_value */
 265:fltk-1.3.4-1/jpeg/jquant1.c ****   return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 266:fltk-1.3.4-1/jpeg/jquant1.c **** }
 267:fltk-1.3.4-1/jpeg/jquant1.c **** 
 268:fltk-1.3.4-1/jpeg/jquant1.c **** 
 269:fltk-1.3.4-1/jpeg/jquant1.c **** /*
 270:fltk-1.3.4-1/jpeg/jquant1.c ****  * Create the colormap.
 271:fltk-1.3.4-1/jpeg/jquant1.c ****  */
 272:fltk-1.3.4-1/jpeg/jquant1.c **** 
 273:fltk-1.3.4-1/jpeg/jquant1.c **** LOCAL(void)
 274:fltk-1.3.4-1/jpeg/jquant1.c **** create_colormap (j_decompress_ptr cinfo)
 275:fltk-1.3.4-1/jpeg/jquant1.c **** {
 276:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 277:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPARRAY colormap;		/* Created colormap */
 278:fltk-1.3.4-1/jpeg/jquant1.c ****   int total_colors;		/* Number of distinct output colors */
 279:fltk-1.3.4-1/jpeg/jquant1.c ****   int i,j,k, nci, blksize, blkdist, ptr, val;
 280:fltk-1.3.4-1/jpeg/jquant1.c **** 
 281:fltk-1.3.4-1/jpeg/jquant1.c ****   /* Select number of colors for each component */
 282:fltk-1.3.4-1/jpeg/jquant1.c ****   total_colors = select_ncolors(cinfo, cquantize->Ncolors);
 283:fltk-1.3.4-1/jpeg/jquant1.c **** 
 284:fltk-1.3.4-1/jpeg/jquant1.c ****   /* Report selected color counts */
 285:fltk-1.3.4-1/jpeg/jquant1.c ****   if (cinfo->out_color_components == 3)
 286:fltk-1.3.4-1/jpeg/jquant1.c ****     TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 287:fltk-1.3.4-1/jpeg/jquant1.c **** 	     total_colors, cquantize->Ncolors[0],
 288:fltk-1.3.4-1/jpeg/jquant1.c **** 	     cquantize->Ncolors[1], cquantize->Ncolors[2]);
 289:fltk-1.3.4-1/jpeg/jquant1.c ****   else
 290:fltk-1.3.4-1/jpeg/jquant1.c ****     TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 291:fltk-1.3.4-1/jpeg/jquant1.c **** 
 292:fltk-1.3.4-1/jpeg/jquant1.c ****   /* Allocate and fill in the colormap. */
 293:fltk-1.3.4-1/jpeg/jquant1.c ****   /* The colors are ordered in the map in standard row-major order, */
 294:fltk-1.3.4-1/jpeg/jquant1.c ****   /* i.e. rightmost (highest-indexed) color changes most rapidly. */
 295:fltk-1.3.4-1/jpeg/jquant1.c **** 
 296:fltk-1.3.4-1/jpeg/jquant1.c ****   colormap = (*cinfo->mem->alloc_sarray)
 297:fltk-1.3.4-1/jpeg/jquant1.c ****     ((j_common_ptr) cinfo, JPOOL_IMAGE,
 298:fltk-1.3.4-1/jpeg/jquant1.c ****      (JDIMENSION) total_colors, (JDIMENSION) cinfo->out_color_components);
 299:fltk-1.3.4-1/jpeg/jquant1.c **** 
 300:fltk-1.3.4-1/jpeg/jquant1.c ****   /* blksize is number of adjacent repeated entries for a component */
 301:fltk-1.3.4-1/jpeg/jquant1.c ****   /* blkdist is distance between groups of identical entries for a component */
 302:fltk-1.3.4-1/jpeg/jquant1.c ****   blkdist = total_colors;
 303:fltk-1.3.4-1/jpeg/jquant1.c **** 
 304:fltk-1.3.4-1/jpeg/jquant1.c ****   for (i = 0; i < cinfo->out_color_components; i++) {
 305:fltk-1.3.4-1/jpeg/jquant1.c ****     /* fill in colormap entries for i'th color component */
 306:fltk-1.3.4-1/jpeg/jquant1.c ****     nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 307:fltk-1.3.4-1/jpeg/jquant1.c ****     blksize = blkdist / nci;
 308:fltk-1.3.4-1/jpeg/jquant1.c ****     for (j = 0; j < nci; j++) {
 309:fltk-1.3.4-1/jpeg/jquant1.c ****       /* Compute j'th output value (out of nci) for component */
 310:fltk-1.3.4-1/jpeg/jquant1.c ****       val = output_value(cinfo, i, j, nci-1);
 311:fltk-1.3.4-1/jpeg/jquant1.c ****       /* Fill in all colormap entries that have this value of this component */
 312:fltk-1.3.4-1/jpeg/jquant1.c ****       for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 313:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* fill in blksize entries beginning at ptr */
 314:fltk-1.3.4-1/jpeg/jquant1.c **** 	for (k = 0; k < blksize; k++)
 315:fltk-1.3.4-1/jpeg/jquant1.c **** 	  colormap[i][ptr+k] = (JSAMPLE) val;
 316:fltk-1.3.4-1/jpeg/jquant1.c ****       }
 317:fltk-1.3.4-1/jpeg/jquant1.c ****     }
 318:fltk-1.3.4-1/jpeg/jquant1.c ****     blkdist = blksize;		/* blksize of this color is blkdist of next */
 319:fltk-1.3.4-1/jpeg/jquant1.c ****   }
 320:fltk-1.3.4-1/jpeg/jquant1.c **** 
 321:fltk-1.3.4-1/jpeg/jquant1.c ****   /* Save the colormap in private storage,
 322:fltk-1.3.4-1/jpeg/jquant1.c ****    * where it will survive color quantization mode changes.
 323:fltk-1.3.4-1/jpeg/jquant1.c ****    */
 324:fltk-1.3.4-1/jpeg/jquant1.c ****   cquantize->sv_colormap = colormap;
 325:fltk-1.3.4-1/jpeg/jquant1.c ****   cquantize->sv_actual = total_colors;
 326:fltk-1.3.4-1/jpeg/jquant1.c **** }
 327:fltk-1.3.4-1/jpeg/jquant1.c **** 
 328:fltk-1.3.4-1/jpeg/jquant1.c **** 
 329:fltk-1.3.4-1/jpeg/jquant1.c **** /*
 330:fltk-1.3.4-1/jpeg/jquant1.c ****  * Create the color index table.
 331:fltk-1.3.4-1/jpeg/jquant1.c ****  */
 332:fltk-1.3.4-1/jpeg/jquant1.c **** 
 333:fltk-1.3.4-1/jpeg/jquant1.c **** LOCAL(void)
 334:fltk-1.3.4-1/jpeg/jquant1.c **** create_colorindex (j_decompress_ptr cinfo)
 335:fltk-1.3.4-1/jpeg/jquant1.c **** {
  11              		.loc 1 335 1 view -0
  12              		.cfi_startproc
 336:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  13              		.loc 1 336 3 view .LVU1
 335:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  14              		.loc 1 335 1 is_stmt 0 view .LVU2
  15 0000 4157     		pushq	%r15
  16              		.cfi_def_cfa_offset 16
  17              		.cfi_offset 15, -16
  18 0002 4156     		pushq	%r14
  19              		.cfi_def_cfa_offset 24
  20              		.cfi_offset 14, -24
  21 0004 4155     		pushq	%r13
  22              		.cfi_def_cfa_offset 32
  23              		.cfi_offset 13, -32
  24 0006 4989FD   		movq	%rdi, %r13
  25 0009 4154     		pushq	%r12
  26              		.cfi_def_cfa_offset 40
  27              		.cfi_offset 12, -40
  28 000b 55       		pushq	%rbp
  29              		.cfi_def_cfa_offset 48
  30              		.cfi_offset 6, -48
  31 000c 53       		pushq	%rbx
  32              		.cfi_def_cfa_offset 56
  33              		.cfi_offset 3, -56
  34 000d 4883EC18 		subq	$24, %rsp
  35              		.cfi_def_cfa_offset 80
 337:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPROW indexptr;
 338:fltk-1.3.4-1/jpeg/jquant1.c ****   int i,j,k, nci, blksize, val, pad;
 339:fltk-1.3.4-1/jpeg/jquant1.c **** 
 340:fltk-1.3.4-1/jpeg/jquant1.c ****   /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
 341:fltk-1.3.4-1/jpeg/jquant1.c ****    * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
 342:fltk-1.3.4-1/jpeg/jquant1.c ****    * This is not necessary in the other dithering modes.  However, we
 343:fltk-1.3.4-1/jpeg/jquant1.c ****    * flag whether it was done in case user changes dithering mode.
 344:fltk-1.3.4-1/jpeg/jquant1.c ****    */
 345:fltk-1.3.4-1/jpeg/jquant1.c ****   if (cinfo->dither_mode == JDITHER_ORDERED) {
  36              		.loc 1 345 12 view .LVU3
  37 0011 8B4770   		movl	112(%rdi), %eax
 336:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPROW indexptr;
  38              		.loc 1 336 20 view .LVU4
  39 0014 4C8BA790 		movq	656(%rdi), %r12
  39      020000
  40              	.LVL1:
 337:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPROW indexptr;
  41              		.loc 1 337 3 is_stmt 1 view .LVU5
 338:fltk-1.3.4-1/jpeg/jquant1.c **** 
  42              		.loc 1 338 3 view .LVU6
  43              		.loc 1 345 3 view .LVU7
  44              		.loc 1 345 6 is_stmt 0 view .LVU8
  45 001b 83F801   		cmpl	$1, %eax
  46 001e 0F846401 		je	.L14
  46      0000
 346:fltk-1.3.4-1/jpeg/jquant1.c ****     pad = MAXJSAMPLE*2;
 347:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->is_padded = TRUE;
 348:fltk-1.3.4-1/jpeg/jquant1.c ****   } else {
 349:fltk-1.3.4-1/jpeg/jquant1.c ****     pad = 0;
  47              		.loc 1 349 9 view .LVU9
  48 0024 C7442408 		movl	$0, 8(%rsp)
  48      00000000 
 345:fltk-1.3.4-1/jpeg/jquant1.c ****     pad = MAXJSAMPLE*2;
  49              		.loc 1 345 6 view .LVU10
  50 002c BA000100 		movl	$256, %edx
  50      00
 350:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->is_padded = FALSE;
  51              		.loc 1 350 26 view .LVU11
  52 0031 31C0     		xorl	%eax, %eax
  53              	.L2:
  54 0033 41894424 		movl	%eax, 56(%r12)
  54      38
  55              	.LVL2:
 351:fltk-1.3.4-1/jpeg/jquant1.c ****   }
 352:fltk-1.3.4-1/jpeg/jquant1.c **** 
 353:fltk-1.3.4-1/jpeg/jquant1.c ****   cquantize->colorindex = (*cinfo->mem->alloc_sarray)
  56              		.loc 1 353 3 is_stmt 1 view .LVU12
  57              		.loc 1 353 28 is_stmt 0 view .LVU13
  58 0038 498B4508 		movq	8(%r13), %rax
  59 003c 4C89EF   		movq	%r13, %rdi
  60              	.LVL3:
  61              		.loc 1 353 28 view .LVU14
  62 003f BE010000 		movl	$1, %esi
  62      00
  63 0044 418B8D90 		movl	144(%r13), %ecx
  63      000000
  64 004b FF5010   		call	*16(%rax)
  65              	.LVL4:
  66              		.loc 1 353 25 view .LVU15
  67 004e 49894424 		movq	%rax, 48(%r12)
  67      30
 354:fltk-1.3.4-1/jpeg/jquant1.c ****     ((j_common_ptr) cinfo, JPOOL_IMAGE,
 355:fltk-1.3.4-1/jpeg/jquant1.c ****      (JDIMENSION) (MAXJSAMPLE+1 + pad),
 356:fltk-1.3.4-1/jpeg/jquant1.c ****      (JDIMENSION) cinfo->out_color_components);
 357:fltk-1.3.4-1/jpeg/jquant1.c **** 
 358:fltk-1.3.4-1/jpeg/jquant1.c ****   /* blksize is number of adjacent repeated entries for a component */
 359:fltk-1.3.4-1/jpeg/jquant1.c ****   blksize = cquantize->sv_actual;
  68              		.loc 1 359 3 is_stmt 1 view .LVU16
  69              	.LVL5:
 360:fltk-1.3.4-1/jpeg/jquant1.c **** 
 361:fltk-1.3.4-1/jpeg/jquant1.c ****   for (i = 0; i < cinfo->out_color_components; i++) {
  70              		.loc 1 361 3 view .LVU17
  71              		.loc 1 361 15 view .LVU18
  72              		.loc 1 361 3 is_stmt 0 view .LVU19
  73 0053 418B8D90 		movl	144(%r13), %ecx
  73      000000
 353:fltk-1.3.4-1/jpeg/jquant1.c ****     ((j_common_ptr) cinfo, JPOOL_IMAGE,
  74              		.loc 1 353 28 view .LVU20
  75 005a 4889C6   		movq	%rax, %rsi
  76              		.loc 1 361 3 view .LVU21
  77 005d 85C9     		testl	%ecx, %ecx
  78 005f 0F8EDE00 		jle	.L1
  78      0000
 359:fltk-1.3.4-1/jpeg/jquant1.c **** 
  79              		.loc 1 359 11 view .LVU22
  80 0065 418B4424 		movl	40(%r12), %eax
  80      28
  81 006a 4531FF   		xorl	%r15d, %r15d
  82 006d 8944240C 		movl	%eax, 12(%rsp)
  83              	.LVL6:
  84              	.L13:
 362:fltk-1.3.4-1/jpeg/jquant1.c ****     /* fill in colorindex entries for i'th color component */
 363:fltk-1.3.4-1/jpeg/jquant1.c ****     nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
  85              		.loc 1 363 5 is_stmt 1 view .LVU23
 364:fltk-1.3.4-1/jpeg/jquant1.c ****     blksize = blksize / nci;
  86              		.loc 1 364 13 is_stmt 0 view .LVU24
  87 0071 8B44240C 		movl	12(%rsp), %eax
 363:fltk-1.3.4-1/jpeg/jquant1.c ****     blksize = blksize / nci;
  88              		.loc 1 363 9 view .LVU25
  89 0075 438B4CBC 		movl	60(%r12,%r15,4), %ecx
  89      3C
  90              	.LVL7:
  91              		.loc 1 364 5 is_stmt 1 view .LVU26
  92              		.loc 1 364 13 is_stmt 0 view .LVU27
  93 007a 99       		cltd
  94 007b F7F9     		idivl	%ecx
 365:fltk-1.3.4-1/jpeg/jquant1.c **** 
 366:fltk-1.3.4-1/jpeg/jquant1.c ****     /* adjust colorindex pointers to provide padding at negative indexes. */
 367:fltk-1.3.4-1/jpeg/jquant1.c ****     if (pad)
  95              		.loc 1 367 8 view .LVU28
  96 007d 8B542408 		movl	8(%rsp), %edx
 364:fltk-1.3.4-1/jpeg/jquant1.c **** 
  97              		.loc 1 364 13 view .LVU29
  98 0081 8944240C 		movl	%eax, 12(%rsp)
  99              	.LVL8:
 100              		.loc 1 367 5 is_stmt 1 view .LVU30
 364:fltk-1.3.4-1/jpeg/jquant1.c **** 
 101              		.loc 1 364 13 is_stmt 0 view .LVU31
 102 0085 89C5     		movl	%eax, %ebp
 103 0087 4A8D04FE 		leaq	(%rsi,%r15,8), %rax
 104              	.LVL9:
 364:fltk-1.3.4-1/jpeg/jquant1.c **** 
 105              		.loc 1 364 13 view .LVU32
 106 008b 488B18   		movq	(%rax), %rbx
 107              		.loc 1 367 8 view .LVU33
 108 008e 85D2     		testl	%edx, %edx
 109 0090 7413     		je	.L4
 368:fltk-1.3.4-1/jpeg/jquant1.c ****       cquantize->colorindex[i] += MAXJSAMPLE;
 110              		.loc 1 368 7 is_stmt 1 view .LVU34
 111              		.loc 1 368 32 is_stmt 0 view .LVU35
 112 0092 4881C3FF 		addq	$255, %rbx
 112      000000
 113 0099 488918   		movq	%rbx, (%rax)
 114 009c 498B4424 		movq	48(%r12), %rax
 114      30
 115 00a1 4A8B1CF8 		movq	(%rax,%r15,8), %rbx
 116              	.L4:
 369:fltk-1.3.4-1/jpeg/jquant1.c **** 
 370:fltk-1.3.4-1/jpeg/jquant1.c ****     /* in loop, val = index of current output value, */
 371:fltk-1.3.4-1/jpeg/jquant1.c ****     /* and k = largest j that maps to current val */
 372:fltk-1.3.4-1/jpeg/jquant1.c ****     indexptr = cquantize->colorindex[i];
 117              		.loc 1 372 5 is_stmt 1 view .LVU36
 118              	.LVL10:
 373:fltk-1.3.4-1/jpeg/jquant1.c ****     val = 0;
 119              		.loc 1 373 5 view .LVU37
 374:fltk-1.3.4-1/jpeg/jquant1.c ****     k = largest_input_value(cinfo, i, 0, nci-1);
 120              		.loc 1 374 5 view .LVU38
 121              		.loc 1 374 9 is_stmt 0 view .LVU39
 122 00a5 83E901   		subl	$1, %ecx
 123              	.LVL11:
 124              	.LBB21:
 125              	.LBI21:
 260:fltk-1.3.4-1/jpeg/jquant1.c **** /* Return largest input value that should map to j'th output value */
 126              		.loc 1 260 1 is_stmt 1 view .LVU40
 127              	.LBB22:
 265:fltk-1.3.4-1/jpeg/jquant1.c **** }
 128              		.loc 1 265 3 view .LVU41
 265:fltk-1.3.4-1/jpeg/jquant1.c **** }
 129              		.loc 1 265 10 is_stmt 0 view .LVU42
 130 00a8 4531DB   		xorl	%r11d, %r11d
 131              	.LBE22:
 132              	.LBE21:
 373:fltk-1.3.4-1/jpeg/jquant1.c ****     k = largest_input_value(cinfo, i, 0, nci-1);
 133              		.loc 1 373 9 view .LVU43
 134 00ab 4531C0   		xorl	%r8d, %r8d
 135              	.LBB24:
 136              	.LBB23:
 265:fltk-1.3.4-1/jpeg/jquant1.c **** }
 137              		.loc 1 265 49 view .LVU44
 138 00ae 4C63F1   		movslq	%ecx, %r14
 265:fltk-1.3.4-1/jpeg/jquant1.c **** }
 139              		.loc 1 265 61 view .LVU45
 140 00b1 01C9     		addl	%ecx, %ecx
 141              	.LVL12:
 265:fltk-1.3.4-1/jpeg/jquant1.c **** }
 142              		.loc 1 265 49 view .LVU46
 143 00b3 498D86FF 		leaq	255(%r14), %rax
 143      000000
 265:fltk-1.3.4-1/jpeg/jquant1.c **** }
 144              		.loc 1 265 61 view .LVU47
 145 00ba 4863F9   		movslq	%ecx, %rdi
 265:fltk-1.3.4-1/jpeg/jquant1.c **** }
 146              		.loc 1 265 10 view .LVU48
 147 00bd 4899     		cqto
 148 00bf 48F7FF   		idivq	%rdi
 149 00c2 4989C1   		movq	%rax, %r9
 150              	.LVL13:
 265:fltk-1.3.4-1/jpeg/jquant1.c **** }
 151              		.loc 1 265 10 view .LVU49
 152              	.LBE23:
 153              	.LBE24:
 375:fltk-1.3.4-1/jpeg/jquant1.c ****     for (j = 0; j <= MAXJSAMPLE; j++) {
 154              		.loc 1 375 5 is_stmt 1 view .LVU50
 155              		.loc 1 375 17 view .LVU51
 156              		.p2align 4,,10
 157 00c5 0F1F00   		.p2align 3
 158              	.L5:
 376:fltk-1.3.4-1/jpeg/jquant1.c ****       while (j > k)		/* advance val if past boundary */
 159              		.loc 1 376 13 view .LVU52
 160 00c8 4589DA   		movl	%r11d, %r10d
 161 00cb 4539CB   		cmpl	%r9d, %r11d
 162 00ce 7E3D     		jle	.L9
 163 00d0 418D7001 		leal	1(%r8), %esi
 164 00d4 8D0436   		leal	(%rsi,%rsi), %eax
 165 00d7 4898     		cltq
 166 00d9 4883C001 		addq	$1, %rax
 167 00dd 4889C1   		movq	%rax, %rcx
 168 00e0 48C1E108 		salq	$8, %rcx
 169 00e4 4829C1   		subq	%rax, %rcx
 170 00e7 4C01F1   		addq	%r14, %rcx
 171 00ea EB07     		jmp	.L6
 172              	.LVL14:
 173 00ec 0F1F4000 		.p2align 4,,10
 174              		.p2align 3
 175              	.L24:
 176              		.loc 1 376 13 is_stmt 0 view .LVU53
 177 00f0 83C601   		addl	$1, %esi
 178              	.LVL15:
 179              	.L6:
 377:fltk-1.3.4-1/jpeg/jquant1.c **** 	k = largest_input_value(cinfo, i, ++val, nci-1);
 180              		.loc 1 377 2 is_stmt 1 view .LVU54
 181              	.LBB25:
 182              	.LBB26:
 265:fltk-1.3.4-1/jpeg/jquant1.c **** }
 183              		.loc 1 265 57 is_stmt 0 view .LVU55
 184 00f3 4889C8   		movq	%rcx, %rax
 185              	.LBE26:
 186              	.LBE25:
 187              		.loc 1 377 4 view .LVU56
 188 00f6 4189F0   		movl	%esi, %r8d
 189              	.LVL16:
 190              	.LBB28:
 191              	.LBI25:
 260:fltk-1.3.4-1/jpeg/jquant1.c **** /* Return largest input value that should map to j'th output value */
 192              		.loc 1 260 1 is_stmt 1 view .LVU57
 193              	.LBB27:
 265:fltk-1.3.4-1/jpeg/jquant1.c **** }
 194              		.loc 1 265 3 view .LVU58
 195 00f9 4881C1FE 		addq	$510, %rcx
 195      010000
 265:fltk-1.3.4-1/jpeg/jquant1.c **** }
 196              		.loc 1 265 57 is_stmt 0 view .LVU59
 197 0100 4899     		cqto
 198 0102 48F7FF   		idivq	%rdi
 199              	.LVL17:
 265:fltk-1.3.4-1/jpeg/jquant1.c **** }
 200              		.loc 1 265 10 view .LVU60
 201 0105 4189C1   		movl	%eax, %r9d
 202              	.LVL18:
 265:fltk-1.3.4-1/jpeg/jquant1.c **** }
 203              		.loc 1 265 10 view .LVU61
 204              	.LBE27:
 205              	.LBE28:
 376:fltk-1.3.4-1/jpeg/jquant1.c **** 	k = largest_input_value(cinfo, i, ++val, nci-1);
 206              		.loc 1 376 13 is_stmt 1 view .LVU62
 207 0108 4439D0   		cmpl	%r10d, %eax
 208 010b 7CE3     		jl	.L24
 209              	.LVL19:
 210              	.L9:
 378:fltk-1.3.4-1/jpeg/jquant1.c ****       /* premultiply so that no multiplication needed in main processing */
 379:fltk-1.3.4-1/jpeg/jquant1.c ****       indexptr[j] = (JSAMPLE) (val * blksize);
 211              		.loc 1 379 7 discriminator 2 view .LVU63
 212              		.loc 1 379 21 is_stmt 0 discriminator 2 view .LVU64
 213 010d 89E8     		movl	%ebp, %eax
 214 010f 410FAFC0 		imull	%r8d, %eax
 215              		.loc 1 379 19 discriminator 2 view .LVU65
 216 0113 4288041B 		movb	%al, (%rbx,%r11)
 375:fltk-1.3.4-1/jpeg/jquant1.c ****       while (j > k)		/* advance val if past boundary */
 217              		.loc 1 375 34 is_stmt 1 discriminator 2 view .LVU66
 218              	.LVL20:
 375:fltk-1.3.4-1/jpeg/jquant1.c ****       while (j > k)		/* advance val if past boundary */
 219              		.loc 1 375 17 discriminator 2 view .LVU67
 220 0117 4983C301 		addq	$1, %r11
 375:fltk-1.3.4-1/jpeg/jquant1.c ****       while (j > k)		/* advance val if past boundary */
 221              		.loc 1 375 5 is_stmt 0 discriminator 2 view .LVU68
 222 011b 4981FB00 		cmpq	$256, %r11
 222      010000
 223 0122 75A4     		jne	.L5
 380:fltk-1.3.4-1/jpeg/jquant1.c ****     }
 381:fltk-1.3.4-1/jpeg/jquant1.c ****     /* Pad at both ends if necessary */
 382:fltk-1.3.4-1/jpeg/jquant1.c ****     if (pad)
 224              		.loc 1 382 5 is_stmt 1 view .LVU69
 225              		.loc 1 382 8 is_stmt 0 view .LVU70
 226 0124 8B442408 		movl	8(%rsp), %eax
 227 0128 85C0     		testl	%eax, %eax
 228 012a 7526     		jne	.L15
 229              	.LVL21:
 230              	.L12:
 361:fltk-1.3.4-1/jpeg/jquant1.c ****     /* fill in colorindex entries for i'th color component */
 231              		.loc 1 361 48 is_stmt 1 view .LVU71
 361:fltk-1.3.4-1/jpeg/jquant1.c ****     /* fill in colorindex entries for i'th color component */
 232              		.loc 1 361 15 view .LVU72
 233 012c 4983C701 		addq	$1, %r15
 234              	.LVL22:
 361:fltk-1.3.4-1/jpeg/jquant1.c ****     /* fill in colorindex entries for i'th color component */
 235              		.loc 1 361 3 is_stmt 0 view .LVU73
 236 0130 4539BD90 		cmpl	%r15d, 144(%r13)
 236      000000
 237 0137 7E0A     		jle	.L1
 238 0139 498B7424 		movq	48(%r12), %rsi
 238      30
 239 013e E92EFFFF 		jmp	.L13
 239      FF
 240              	.LVL23:
 241              	.L1:
 383:fltk-1.3.4-1/jpeg/jquant1.c ****       for (j = 1; j <= MAXJSAMPLE; j++) {
 384:fltk-1.3.4-1/jpeg/jquant1.c **** 	indexptr[-j] = indexptr[0];
 385:fltk-1.3.4-1/jpeg/jquant1.c **** 	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
 386:fltk-1.3.4-1/jpeg/jquant1.c ****       }
 387:fltk-1.3.4-1/jpeg/jquant1.c ****   }
 388:fltk-1.3.4-1/jpeg/jquant1.c **** }
 242              		.loc 1 388 1 view .LVU74
 243 0143 4883C418 		addq	$24, %rsp
 244              		.cfi_remember_state
 245              		.cfi_def_cfa_offset 56
 246 0147 5B       		popq	%rbx
 247              		.cfi_def_cfa_offset 48
 248 0148 5D       		popq	%rbp
 249              		.cfi_def_cfa_offset 40
 250 0149 415C     		popq	%r12
 251              		.cfi_def_cfa_offset 32
 252              	.LVL24:
 253              		.loc 1 388 1 view .LVU75
 254 014b 415D     		popq	%r13
 255              		.cfi_def_cfa_offset 24
 256              	.LVL25:
 257              		.loc 1 388 1 view .LVU76
 258 014d 415E     		popq	%r14
 259              		.cfi_def_cfa_offset 16
 260 014f 415F     		popq	%r15
 261              		.cfi_def_cfa_offset 8
 262 0151 C3       		ret
 263              	.LVL26:
 264              	.L15:
 265              		.cfi_restore_state
 266              		.loc 1 388 1 view .LVU77
 267 0152 B8010000 		movl	$1, %eax
 267      00
 268              	.LVL27:
 269 0157 660F1F84 		.p2align 4,,10
 269      00000000 
 269      00
 270              		.p2align 3
 271              	.L10:
 384:fltk-1.3.4-1/jpeg/jquant1.c **** 	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
 272              		.loc 1 384 2 is_stmt 1 discriminator 3 view .LVU78
 384:fltk-1.3.4-1/jpeg/jquant1.c **** 	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
 273              		.loc 1 384 25 is_stmt 0 discriminator 3 view .LVU79
 274 0160 0FB60B   		movzbl	(%rbx), %ecx
 384:fltk-1.3.4-1/jpeg/jquant1.c **** 	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
 275              		.loc 1 384 15 discriminator 3 view .LVU80
 276 0163 4889C2   		movq	%rax, %rdx
 277 0166 48F7DA   		negq	%rdx
 278 0169 880C13   		movb	%cl, (%rbx,%rdx)
 385:fltk-1.3.4-1/jpeg/jquant1.c ****       }
 279              		.loc 1 385 2 is_stmt 1 discriminator 3 view .LVU81
 385:fltk-1.3.4-1/jpeg/jquant1.c ****       }
 280              		.loc 1 385 25 is_stmt 0 discriminator 3 view .LVU82
 281 016c 0FB693FF 		movzbl	255(%rbx), %edx
 281      000000
 282 0173 889403FF 		movb	%dl, 255(%rbx,%rax)
 282      000000
 383:fltk-1.3.4-1/jpeg/jquant1.c ****       for (j = 1; j <= MAXJSAMPLE; j++) {
 283              		.loc 1 383 36 is_stmt 1 discriminator 3 view .LVU83
 284              	.LVL28:
 383:fltk-1.3.4-1/jpeg/jquant1.c ****       for (j = 1; j <= MAXJSAMPLE; j++) {
 285              		.loc 1 383 19 discriminator 3 view .LVU84
 286 017a 4883C001 		addq	$1, %rax
 287              	.LVL29:
 383:fltk-1.3.4-1/jpeg/jquant1.c ****       for (j = 1; j <= MAXJSAMPLE; j++) {
 288              		.loc 1 383 7 is_stmt 0 discriminator 3 view .LVU85
 289 017e 483D0001 		cmpq	$256, %rax
 289      0000
 290 0184 75DA     		jne	.L10
 291 0186 EBA4     		jmp	.L12
 292              	.LVL30:
 293              	.L14:
 346:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->is_padded = TRUE;
 294              		.loc 1 346 9 view .LVU86
 295 0188 C7442408 		movl	$510, 8(%rsp)
 295      FE010000 
 296 0190 BAFE0200 		movl	$766, %edx
 296      00
 297 0195 E999FEFF 		jmp	.L2
 297      FF
 298              		.cfi_endproc
 299              	.LFE55:
 301              		.section	.text.color_quantize,"ax",@progbits
 302              		.p2align 4
 304              	color_quantize:
 305              	.LVL31:
 306              	.LFB58:
 389:fltk-1.3.4-1/jpeg/jquant1.c **** 
 390:fltk-1.3.4-1/jpeg/jquant1.c **** 
 391:fltk-1.3.4-1/jpeg/jquant1.c **** /*
 392:fltk-1.3.4-1/jpeg/jquant1.c ****  * Create an ordered-dither array for a component having ncolors
 393:fltk-1.3.4-1/jpeg/jquant1.c ****  * distinct output values.
 394:fltk-1.3.4-1/jpeg/jquant1.c ****  */
 395:fltk-1.3.4-1/jpeg/jquant1.c **** 
 396:fltk-1.3.4-1/jpeg/jquant1.c **** LOCAL(ODITHER_MATRIX_PTR)
 397:fltk-1.3.4-1/jpeg/jquant1.c **** make_odither_array (j_decompress_ptr cinfo, int ncolors)
 398:fltk-1.3.4-1/jpeg/jquant1.c **** {
 399:fltk-1.3.4-1/jpeg/jquant1.c ****   ODITHER_MATRIX_PTR odither;
 400:fltk-1.3.4-1/jpeg/jquant1.c ****   int j,k;
 401:fltk-1.3.4-1/jpeg/jquant1.c ****   INT32 num,den;
 402:fltk-1.3.4-1/jpeg/jquant1.c **** 
 403:fltk-1.3.4-1/jpeg/jquant1.c ****   odither = (ODITHER_MATRIX_PTR)
 404:fltk-1.3.4-1/jpeg/jquant1.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 405:fltk-1.3.4-1/jpeg/jquant1.c **** 				SIZEOF(ODITHER_MATRIX));
 406:fltk-1.3.4-1/jpeg/jquant1.c ****   /* The inter-value distance for this color is MAXJSAMPLE/(ncolors-1).
 407:fltk-1.3.4-1/jpeg/jquant1.c ****    * Hence the dither value for the matrix cell with fill order f
 408:fltk-1.3.4-1/jpeg/jquant1.c ****    * (f=0..N-1) should be (N-1-2*f)/(2*N) * MAXJSAMPLE/(ncolors-1).
 409:fltk-1.3.4-1/jpeg/jquant1.c ****    * On 16-bit-int machine, be careful to avoid overflow.
 410:fltk-1.3.4-1/jpeg/jquant1.c ****    */
 411:fltk-1.3.4-1/jpeg/jquant1.c ****   den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
 412:fltk-1.3.4-1/jpeg/jquant1.c ****   for (j = 0; j < ODITHER_SIZE; j++) {
 413:fltk-1.3.4-1/jpeg/jquant1.c ****     for (k = 0; k < ODITHER_SIZE; k++) {
 414:fltk-1.3.4-1/jpeg/jquant1.c ****       num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 415:fltk-1.3.4-1/jpeg/jquant1.c **** 	    * MAXJSAMPLE;
 416:fltk-1.3.4-1/jpeg/jquant1.c ****       /* Ensure round towards zero despite C's lack of consistency
 417:fltk-1.3.4-1/jpeg/jquant1.c ****        * about rounding negative values in integer division...
 418:fltk-1.3.4-1/jpeg/jquant1.c ****        */
 419:fltk-1.3.4-1/jpeg/jquant1.c ****       odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
 420:fltk-1.3.4-1/jpeg/jquant1.c ****     }
 421:fltk-1.3.4-1/jpeg/jquant1.c ****   }
 422:fltk-1.3.4-1/jpeg/jquant1.c ****   return odither;
 423:fltk-1.3.4-1/jpeg/jquant1.c **** }
 424:fltk-1.3.4-1/jpeg/jquant1.c **** 
 425:fltk-1.3.4-1/jpeg/jquant1.c **** 
 426:fltk-1.3.4-1/jpeg/jquant1.c **** /*
 427:fltk-1.3.4-1/jpeg/jquant1.c ****  * Create the ordered-dither tables.
 428:fltk-1.3.4-1/jpeg/jquant1.c ****  * Components having the same number of representative colors may 
 429:fltk-1.3.4-1/jpeg/jquant1.c ****  * share a dither table.
 430:fltk-1.3.4-1/jpeg/jquant1.c ****  */
 431:fltk-1.3.4-1/jpeg/jquant1.c **** 
 432:fltk-1.3.4-1/jpeg/jquant1.c **** LOCAL(void)
 433:fltk-1.3.4-1/jpeg/jquant1.c **** create_odither_tables (j_decompress_ptr cinfo)
 434:fltk-1.3.4-1/jpeg/jquant1.c **** {
 435:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 436:fltk-1.3.4-1/jpeg/jquant1.c ****   ODITHER_MATRIX_PTR odither;
 437:fltk-1.3.4-1/jpeg/jquant1.c ****   int i, j, nci;
 438:fltk-1.3.4-1/jpeg/jquant1.c **** 
 439:fltk-1.3.4-1/jpeg/jquant1.c ****   for (i = 0; i < cinfo->out_color_components; i++) {
 440:fltk-1.3.4-1/jpeg/jquant1.c ****     nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 441:fltk-1.3.4-1/jpeg/jquant1.c ****     odither = NULL;		/* search for matching prior component */
 442:fltk-1.3.4-1/jpeg/jquant1.c ****     for (j = 0; j < i; j++) {
 443:fltk-1.3.4-1/jpeg/jquant1.c ****       if (nci == cquantize->Ncolors[j]) {
 444:fltk-1.3.4-1/jpeg/jquant1.c **** 	odither = cquantize->odither[j];
 445:fltk-1.3.4-1/jpeg/jquant1.c **** 	break;
 446:fltk-1.3.4-1/jpeg/jquant1.c ****       }
 447:fltk-1.3.4-1/jpeg/jquant1.c ****     }
 448:fltk-1.3.4-1/jpeg/jquant1.c ****     if (odither == NULL)	/* need a new table? */
 449:fltk-1.3.4-1/jpeg/jquant1.c ****       odither = make_odither_array(cinfo, nci);
 450:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->odither[i] = odither;
 451:fltk-1.3.4-1/jpeg/jquant1.c ****   }
 452:fltk-1.3.4-1/jpeg/jquant1.c **** }
 453:fltk-1.3.4-1/jpeg/jquant1.c **** 
 454:fltk-1.3.4-1/jpeg/jquant1.c **** 
 455:fltk-1.3.4-1/jpeg/jquant1.c **** /*
 456:fltk-1.3.4-1/jpeg/jquant1.c ****  * Map some rows of pixels to the output colormapped representation.
 457:fltk-1.3.4-1/jpeg/jquant1.c ****  */
 458:fltk-1.3.4-1/jpeg/jquant1.c **** 
 459:fltk-1.3.4-1/jpeg/jquant1.c **** METHODDEF(void)
 460:fltk-1.3.4-1/jpeg/jquant1.c **** color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
 461:fltk-1.3.4-1/jpeg/jquant1.c **** 		JSAMPARRAY output_buf, int num_rows)
 462:fltk-1.3.4-1/jpeg/jquant1.c **** /* General case, no dithering */
 463:fltk-1.3.4-1/jpeg/jquant1.c **** {
 307              		.loc 1 463 1 is_stmt 1 view -0
 308              		.cfi_startproc
 309              		.loc 1 463 1 is_stmt 0 view .LVU88
 310 0000 F30F1EFA 		endbr64
 464:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 311              		.loc 1 464 3 is_stmt 1 view .LVU89
 312              	.LVL32:
 465:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPARRAY colorindex = cquantize->colorindex;
 313              		.loc 1 465 3 view .LVU90
 463:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 314              		.loc 1 463 1 is_stmt 0 view .LVU91
 315 0004 4157     		pushq	%r15
 316              		.cfi_def_cfa_offset 16
 317              		.cfi_offset 15, -16
 318              	.LVL33:
 463:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 319              		.loc 1 463 1 view .LVU92
 320 0006 4156     		pushq	%r14
 321              		.cfi_def_cfa_offset 24
 322              		.cfi_offset 14, -24
 323 0008 4989D6   		movq	%rdx, %r14
 324 000b 89CA     		movl	%ecx, %edx
 325              	.LVL34:
 463:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 326              		.loc 1 463 1 view .LVU93
 327 000d 4155     		pushq	%r13
 328              		.cfi_def_cfa_offset 32
 329              		.cfi_offset 13, -32
 330 000f 8D42FF   		leal	-1(%rdx), %eax
 331 0012 4154     		pushq	%r12
 332              		.cfi_def_cfa_offset 40
 333              		.cfi_offset 12, -40
 334 0014 55       		pushq	%rbp
 335              		.cfi_def_cfa_offset 48
 336              		.cfi_offset 6, -48
 337 0015 53       		pushq	%rbx
 338              		.cfi_def_cfa_offset 56
 339              		.cfi_offset 3, -56
 340              		.loc 1 465 14 view .LVU94
 341 0016 488B8F90 		movq	656(%rdi), %rcx
 341      020000
 342              	.LVL35:
 466:fltk-1.3.4-1/jpeg/jquant1.c ****   register int pixcode, ci;
 467:fltk-1.3.4-1/jpeg/jquant1.c ****   register JSAMPROW ptrin, ptrout;
 468:fltk-1.3.4-1/jpeg/jquant1.c ****   int row;
 469:fltk-1.3.4-1/jpeg/jquant1.c ****   JDIMENSION col;
 470:fltk-1.3.4-1/jpeg/jquant1.c ****   JDIMENSION width = cinfo->output_width;
 343              		.loc 1 470 14 view .LVU95
 344 001d 448BBF88 		movl	136(%rdi), %r15d
 344      000000
 471:fltk-1.3.4-1/jpeg/jquant1.c ****   register int nc = cinfo->out_color_components;
 345              		.loc 1 471 16 view .LVU96
 346 0024 8B9F9000 		movl	144(%rdi), %ebx
 346      0000
 465:fltk-1.3.4-1/jpeg/jquant1.c ****   register int pixcode, ci;
 347              		.loc 1 465 14 view .LVU97
 348 002a 4C8B4930 		movq	48(%rcx), %r9
 349              	.LVL36:
 466:fltk-1.3.4-1/jpeg/jquant1.c ****   register int pixcode, ci;
 350              		.loc 1 466 3 is_stmt 1 view .LVU98
 467:fltk-1.3.4-1/jpeg/jquant1.c ****   int row;
 351              		.loc 1 467 3 view .LVU99
 468:fltk-1.3.4-1/jpeg/jquant1.c ****   JDIMENSION col;
 352              		.loc 1 468 3 view .LVU100
 469:fltk-1.3.4-1/jpeg/jquant1.c ****   JDIMENSION width = cinfo->output_width;
 353              		.loc 1 469 3 view .LVU101
 470:fltk-1.3.4-1/jpeg/jquant1.c ****   register int nc = cinfo->out_color_components;
 354              		.loc 1 470 3 view .LVU102
 355              		.loc 1 471 3 view .LVU103
 472:fltk-1.3.4-1/jpeg/jquant1.c **** 
 473:fltk-1.3.4-1/jpeg/jquant1.c ****   for (row = 0; row < num_rows; row++) {
 356              		.loc 1 473 3 view .LVU104
 357              		.loc 1 473 17 view .LVU105
 358 002e 48894424 		movq	%rax, -8(%rsp)
 358      F8
 359              		.loc 1 473 3 is_stmt 0 view .LVU106
 360 0033 85D2     		testl	%edx, %edx
 361 0035 0F8E8500 		jle	.L25
 361      0000
 362 003b 418D47FF 		leal	-1(%r15), %eax
 363 003f 448D43FF 		leal	-1(%rbx), %r8d
 364 0043 4989F5   		movq	%rsi, %r13
 365 0046 4531E4   		xorl	%r12d, %r12d
 366 0049 488D7001 		leaq	1(%rax), %rsi
 367              	.LVL37:
 368              		.loc 1 473 3 view .LVU107
 369 004d 498D6801 		leaq	1(%r8), %rbp
 370              	.LVL38:
 371              		.p2align 4,,10
 372 0051 0F1F8000 		.p2align 3
 372      000000
 373              	.L32:
 474:fltk-1.3.4-1/jpeg/jquant1.c ****     ptrin = input_buf[row];
 374              		.loc 1 474 5 is_stmt 1 view .LVU108
 375              		.loc 1 474 11 is_stmt 0 view .LVU109
 376 0058 4B8B7CE5 		movq	0(%r13,%r12,8), %rdi
 376      00
 377              	.LVL39:
 475:fltk-1.3.4-1/jpeg/jquant1.c ****     ptrout = output_buf[row];
 378              		.loc 1 475 5 is_stmt 1 view .LVU110
 379              		.loc 1 475 12 is_stmt 0 view .LVU111
 380 005d 4F8B14E6 		movq	(%r14,%r12,8), %r10
 381              	.LVL40:
 476:fltk-1.3.4-1/jpeg/jquant1.c ****     for (col = width; col > 0; col--) {
 382              		.loc 1 476 5 is_stmt 1 view .LVU112
 383              		.loc 1 476 23 view .LVU113
 384              		.loc 1 476 5 is_stmt 0 view .LVU114
 385 0061 4585FF   		testl	%r15d, %r15d
 386 0064 7449     		je	.L27
 387 0066 4D8D1C32 		leaq	(%r10,%rsi), %r11
 388 006a 660F1F44 		.p2align 4,,10
 388      0000
 389              		.p2align 3
 390              	.L28:
 391              	.LVL41:
 477:fltk-1.3.4-1/jpeg/jquant1.c ****       pixcode = 0;
 478:fltk-1.3.4-1/jpeg/jquant1.c ****       for (ci = 0; ci < nc; ci++) {
 392              		.loc 1 478 20 is_stmt 1 view .LVU115
 393              		.loc 1 478 7 is_stmt 0 view .LVU116
 394 0070 31C0     		xorl	%eax, %eax
 477:fltk-1.3.4-1/jpeg/jquant1.c ****       pixcode = 0;
 395              		.loc 1 477 15 view .LVU117
 396 0072 31D2     		xorl	%edx, %edx
 397              		.loc 1 478 7 view .LVU118
 398 0074 85DB     		testl	%ebx, %ebx
 399 0076 7E2A     		jle	.L31
 400              		.loc 1 478 7 view .LVU119
 401 0078 48897424 		movq	%rsi, -16(%rsp)
 401      F0
 402              	.LVL42:
 403 007d 0F1F00   		.p2align 4,,10
 404              		.p2align 3
 405              	.L29:
 479:fltk-1.3.4-1/jpeg/jquant1.c **** 	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 406              		.loc 1 479 2 is_stmt 1 discriminator 3 view .LVU120
 407              		.loc 1 479 13 is_stmt 0 discriminator 3 view .LVU121
 408 0080 0FB60C07 		movzbl	(%rdi,%rax), %ecx
 409 0084 498B34C1 		movq	(%r9,%rax,8), %rsi
 410 0088 0FB60C0E 		movzbl	(%rsi,%rcx), %ecx
 411              		.loc 1 479 10 discriminator 3 view .LVU122
 412 008c 01CA     		addl	%ecx, %edx
 413              	.LVL43:
 478:fltk-1.3.4-1/jpeg/jquant1.c **** 	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 414              		.loc 1 478 29 is_stmt 1 discriminator 3 view .LVU123
 478:fltk-1.3.4-1/jpeg/jquant1.c **** 	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 415              		.loc 1 478 20 discriminator 3 view .LVU124
 416 008e 4889C1   		movq	%rax, %rcx
 417 0091 4883C001 		addq	$1, %rax
 418              	.LVL44:
 478:fltk-1.3.4-1/jpeg/jquant1.c **** 	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 419              		.loc 1 478 7 is_stmt 0 discriminator 3 view .LVU125
 420 0095 4939C8   		cmpq	%rcx, %r8
 421 0098 75E6     		jne	.L29
 422 009a 488B7424 		movq	-16(%rsp), %rsi
 422      F0
 423 009f 4801EF   		addq	%rbp, %rdi
 424              	.LVL45:
 425              	.L31:
 480:fltk-1.3.4-1/jpeg/jquant1.c ****       }
 481:fltk-1.3.4-1/jpeg/jquant1.c ****       *ptrout++ = (JSAMPLE) pixcode;
 426              		.loc 1 481 7 is_stmt 1 discriminator 2 view .LVU126
 427              		.loc 1 481 14 is_stmt 0 discriminator 2 view .LVU127
 428 00a2 4983C201 		addq	$1, %r10
 429              	.LVL46:
 430              		.loc 1 481 17 discriminator 2 view .LVU128
 431 00a6 418852FF 		movb	%dl, -1(%r10)
 476:fltk-1.3.4-1/jpeg/jquant1.c ****       pixcode = 0;
 432              		.loc 1 476 32 is_stmt 1 discriminator 2 view .LVU129
 433              	.LVL47:
 476:fltk-1.3.4-1/jpeg/jquant1.c ****       pixcode = 0;
 434              		.loc 1 476 23 discriminator 2 view .LVU130
 476:fltk-1.3.4-1/jpeg/jquant1.c ****       pixcode = 0;
 435              		.loc 1 476 5 is_stmt 0 discriminator 2 view .LVU131
 436 00aa 4D39D3   		cmpq	%r10, %r11
 437 00ad 75C1     		jne	.L28
 438              	.L27:
 473:fltk-1.3.4-1/jpeg/jquant1.c ****     ptrin = input_buf[row];
 439              		.loc 1 473 33 is_stmt 1 view .LVU132
 440              	.LVL48:
 473:fltk-1.3.4-1/jpeg/jquant1.c ****     ptrin = input_buf[row];
 441              		.loc 1 473 17 view .LVU133
 442 00af 498D4424 		leaq	1(%r12), %rax
 442      01
 473:fltk-1.3.4-1/jpeg/jquant1.c ****     ptrin = input_buf[row];
 443              		.loc 1 473 3 is_stmt 0 view .LVU134
 444 00b4 4C396424 		cmpq	%r12, -8(%rsp)
 444      F8
 445 00b9 7405     		je	.L25
 446 00bb 4989C4   		movq	%rax, %r12
 447              	.LVL49:
 473:fltk-1.3.4-1/jpeg/jquant1.c ****     ptrin = input_buf[row];
 448              		.loc 1 473 3 view .LVU135
 449 00be EB98     		jmp	.L32
 450              	.LVL50:
 451              	.L25:
 482:fltk-1.3.4-1/jpeg/jquant1.c ****     }
 483:fltk-1.3.4-1/jpeg/jquant1.c ****   }
 484:fltk-1.3.4-1/jpeg/jquant1.c **** }
 452              		.loc 1 484 1 view .LVU136
 453 00c0 5B       		popq	%rbx
 454              		.cfi_def_cfa_offset 48
 455              	.LVL51:
 456              		.loc 1 484 1 view .LVU137
 457 00c1 5D       		popq	%rbp
 458              		.cfi_def_cfa_offset 40
 459 00c2 415C     		popq	%r12
 460              		.cfi_def_cfa_offset 32
 461 00c4 415D     		popq	%r13
 462              		.cfi_def_cfa_offset 24
 463 00c6 415E     		popq	%r14
 464              		.cfi_def_cfa_offset 16
 465              	.LVL52:
 466              		.loc 1 484 1 view .LVU138
 467 00c8 415F     		popq	%r15
 468              		.cfi_def_cfa_offset 8
 469              	.LVL53:
 470              		.loc 1 484 1 view .LVU139
 471 00ca C3       		ret
 472              		.cfi_endproc
 473              	.LFE58:
 475              		.section	.text.color_quantize3,"ax",@progbits
 476              		.p2align 4
 478              	color_quantize3:
 479              	.LVL54:
 480              	.LFB59:
 485:fltk-1.3.4-1/jpeg/jquant1.c **** 
 486:fltk-1.3.4-1/jpeg/jquant1.c **** 
 487:fltk-1.3.4-1/jpeg/jquant1.c **** METHODDEF(void)
 488:fltk-1.3.4-1/jpeg/jquant1.c **** color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
 489:fltk-1.3.4-1/jpeg/jquant1.c **** 		 JSAMPARRAY output_buf, int num_rows)
 490:fltk-1.3.4-1/jpeg/jquant1.c **** /* Fast path for out_color_components==3, no dithering */
 491:fltk-1.3.4-1/jpeg/jquant1.c **** {
 481              		.loc 1 491 1 is_stmt 1 view -0
 482              		.cfi_startproc
 483              		.loc 1 491 1 is_stmt 0 view .LVU141
 484 0000 F30F1EFA 		endbr64
 492:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 485              		.loc 1 492 3 is_stmt 1 view .LVU142
 486              	.LVL55:
 493:fltk-1.3.4-1/jpeg/jquant1.c ****   register int pixcode;
 487              		.loc 1 493 3 view .LVU143
 494:fltk-1.3.4-1/jpeg/jquant1.c ****   register JSAMPROW ptrin, ptrout;
 488              		.loc 1 494 3 view .LVU144
 495:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPROW colorindex0 = cquantize->colorindex[0];
 489              		.loc 1 495 3 view .LVU145
 491:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 490              		.loc 1 491 1 is_stmt 0 view .LVU146
 491 0004 4156     		pushq	%r14
 492              		.cfi_def_cfa_offset 16
 493              		.cfi_offset 14, -16
 494              	.LVL56:
 491:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 495              		.loc 1 491 1 view .LVU147
 496 0006 4155     		pushq	%r13
 497              		.cfi_def_cfa_offset 24
 498              		.cfi_offset 13, -24
 499 0008 4154     		pushq	%r12
 500              		.cfi_def_cfa_offset 32
 501              		.cfi_offset 12, -32
 502 000a 55       		pushq	%rbp
 503              		.cfi_def_cfa_offset 40
 504              		.cfi_offset 6, -40
 505 000b 4889D5   		movq	%rdx, %rbp
 506 000e 53       		pushq	%rbx
 507              		.cfi_def_cfa_offset 48
 508              		.cfi_offset 3, -48
 509              		.loc 1 495 35 view .LVU148
 510 000f 488B8790 		movq	656(%rdi), %rax
 510      020000
 496:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPROW colorindex1 = cquantize->colorindex[1];
 497:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPROW colorindex2 = cquantize->colorindex[2];
 498:fltk-1.3.4-1/jpeg/jquant1.c ****   int row;
 499:fltk-1.3.4-1/jpeg/jquant1.c ****   JDIMENSION col;
 500:fltk-1.3.4-1/jpeg/jquant1.c ****   JDIMENSION width = cinfo->output_width;
 511              		.loc 1 500 14 view .LVU149
 512 0016 448BA788 		movl	136(%rdi), %r12d
 512      000000
 495:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPROW colorindex1 = cquantize->colorindex[1];
 513              		.loc 1 495 35 view .LVU150
 514 001d 488B4030 		movq	48(%rax), %rax
 495:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPROW colorindex1 = cquantize->colorindex[1];
 515              		.loc 1 495 12 view .LVU151
 516 0021 4C8B10   		movq	(%rax), %r10
 517              	.LVL57:
 496:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPROW colorindex1 = cquantize->colorindex[1];
 518              		.loc 1 496 3 is_stmt 1 view .LVU152
 496:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPROW colorindex1 = cquantize->colorindex[1];
 519              		.loc 1 496 12 is_stmt 0 view .LVU153
 520 0024 4C8B5808 		movq	8(%rax), %r11
 521              	.LVL58:
 497:fltk-1.3.4-1/jpeg/jquant1.c ****   int row;
 522              		.loc 1 497 3 is_stmt 1 view .LVU154
 497:fltk-1.3.4-1/jpeg/jquant1.c ****   int row;
 523              		.loc 1 497 12 is_stmt 0 view .LVU155
 524 0028 488B5010 		movq	16(%rax), %rdx
 525              	.LVL59:
 498:fltk-1.3.4-1/jpeg/jquant1.c ****   JDIMENSION col;
 526              		.loc 1 498 3 is_stmt 1 view .LVU156
 499:fltk-1.3.4-1/jpeg/jquant1.c ****   JDIMENSION width = cinfo->output_width;
 527              		.loc 1 499 3 view .LVU157
 528              		.loc 1 500 3 view .LVU158
 501:fltk-1.3.4-1/jpeg/jquant1.c **** 
 502:fltk-1.3.4-1/jpeg/jquant1.c ****   for (row = 0; row < num_rows; row++) {
 529              		.loc 1 502 3 view .LVU159
 530              		.loc 1 502 17 view .LVU160
 531              		.loc 1 502 3 is_stmt 0 view .LVU161
 532 002c 85C9     		testl	%ecx, %ecx
 533 002e 7E70     		jle	.L43
 534 0030 418D4424 		leal	-1(%r12), %eax
 534      FF
 535 0035 4889F3   		movq	%rsi, %rbx
 536 0038 448D69FF 		leal	-1(%rcx), %r13d
 537 003c 31F6     		xorl	%esi, %esi
 538              	.LVL60:
 539              		.loc 1 502 3 view .LVU162
 540 003e 4C8D7440 		leaq	3(%rax,%rax,2), %r14
 540      03
 541              	.LVL61:
 542              		.p2align 4,,10
 543 0043 0F1F4400 		.p2align 3
 543      00
 544              	.L47:
 503:fltk-1.3.4-1/jpeg/jquant1.c ****     ptrin = input_buf[row];
 545              		.loc 1 503 5 is_stmt 1 view .LVU163
 546              		.loc 1 503 11 is_stmt 0 view .LVU164
 547 0048 488B04F3 		movq	(%rbx,%rsi,8), %rax
 548              	.LVL62:
 504:fltk-1.3.4-1/jpeg/jquant1.c ****     ptrout = output_buf[row];
 549              		.loc 1 504 5 is_stmt 1 view .LVU165
 550              		.loc 1 504 12 is_stmt 0 view .LVU166
 551 004c 4C8B44F5 		movq	0(%rbp,%rsi,8), %r8
 551      00
 552              	.LVL63:
 505:fltk-1.3.4-1/jpeg/jquant1.c ****     for (col = width; col > 0; col--) {
 553              		.loc 1 505 5 is_stmt 1 view .LVU167
 554              		.loc 1 505 23 view .LVU168
 555              		.loc 1 505 5 is_stmt 0 view .LVU169
 556 0051 4585E4   		testl	%r12d, %r12d
 557 0054 7438     		je	.L45
 558 0056 4E8D0C30 		leaq	(%rax,%r14), %r9
 559              	.LVL64:
 560 005a 660F1F44 		.p2align 4,,10
 560      0000
 561              		.p2align 3
 562              	.L46:
 506:fltk-1.3.4-1/jpeg/jquant1.c ****       pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 563              		.loc 1 506 7 is_stmt 1 discriminator 3 view .LVU170
 564              		.loc 1 506 18 is_stmt 0 discriminator 3 view .LVU171
 565 0060 0FB608   		movzbl	(%rax), %ecx
 566 0063 4883C003 		addq	$3, %rax
 567              	.LVL65:
 507:fltk-1.3.4-1/jpeg/jquant1.c ****       pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 508:fltk-1.3.4-1/jpeg/jquant1.c ****       pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
 509:fltk-1.3.4-1/jpeg/jquant1.c ****       *ptrout++ = (JSAMPLE) pixcode;
 568              		.loc 1 509 14 discriminator 3 view .LVU172
 569 0067 4983C001 		addq	$1, %r8
 570              	.LVL66:
 506:fltk-1.3.4-1/jpeg/jquant1.c ****       pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 571              		.loc 1 506 16 discriminator 3 view .LVU173
 572 006b 410FB63C 		movzbl	(%r10,%rcx), %edi
 572      0A
 573              	.LVL67:
 507:fltk-1.3.4-1/jpeg/jquant1.c ****       pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 574              		.loc 1 507 7 is_stmt 1 discriminator 3 view .LVU174
 507:fltk-1.3.4-1/jpeg/jquant1.c ****       pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 575              		.loc 1 507 18 is_stmt 0 discriminator 3 view .LVU175
 576 0070 0FB648FE 		movzbl	-2(%rax), %ecx
 577 0074 410FB60C 		movzbl	(%r11,%rcx), %ecx
 577      0B
 507:fltk-1.3.4-1/jpeg/jquant1.c ****       pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 578              		.loc 1 507 15 discriminator 3 view .LVU176
 579 0079 01CF     		addl	%ecx, %edi
 580              	.LVL68:
 508:fltk-1.3.4-1/jpeg/jquant1.c ****       *ptrout++ = (JSAMPLE) pixcode;
 581              		.loc 1 508 7 is_stmt 1 discriminator 3 view .LVU177
 582              		.loc 1 509 7 discriminator 3 view .LVU178
 508:fltk-1.3.4-1/jpeg/jquant1.c ****       *ptrout++ = (JSAMPLE) pixcode;
 583              		.loc 1 508 18 is_stmt 0 discriminator 3 view .LVU179
 584 007b 0FB648FF 		movzbl	-1(%rax), %ecx
 585              	.LVL69:
 508:fltk-1.3.4-1/jpeg/jquant1.c ****       *ptrout++ = (JSAMPLE) pixcode;
 586              		.loc 1 508 18 discriminator 3 view .LVU180
 587 007f 0FB60C0A 		movzbl	(%rdx,%rcx), %ecx
 588              	.LVL70:
 508:fltk-1.3.4-1/jpeg/jquant1.c ****       *ptrout++ = (JSAMPLE) pixcode;
 589              		.loc 1 508 15 discriminator 3 view .LVU181
 590 0083 01F9     		addl	%edi, %ecx
 591              		.loc 1 509 19 discriminator 3 view .LVU182
 592 0085 418848FF 		movb	%cl, -1(%r8)
 593              	.LVL71:
 505:fltk-1.3.4-1/jpeg/jquant1.c ****       pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 594              		.loc 1 505 32 is_stmt 1 discriminator 3 view .LVU183
 505:fltk-1.3.4-1/jpeg/jquant1.c ****       pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 595              		.loc 1 505 23 discriminator 3 view .LVU184
 505:fltk-1.3.4-1/jpeg/jquant1.c ****       pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 596              		.loc 1 505 5 is_stmt 0 discriminator 3 view .LVU185
 597 0089 4C39C8   		cmpq	%r9, %rax
 598 008c 75D2     		jne	.L46
 599              	.L45:
 502:fltk-1.3.4-1/jpeg/jquant1.c ****     ptrin = input_buf[row];
 600              		.loc 1 502 33 is_stmt 1 view .LVU186
 601              	.LVL72:
 502:fltk-1.3.4-1/jpeg/jquant1.c ****     ptrin = input_buf[row];
 602              		.loc 1 502 17 view .LVU187
 603 008e 488D4601 		leaq	1(%rsi), %rax
 604              	.LVL73:
 502:fltk-1.3.4-1/jpeg/jquant1.c ****     ptrin = input_buf[row];
 605              		.loc 1 502 3 is_stmt 0 view .LVU188
 606 0092 4939F5   		cmpq	%rsi, %r13
 607 0095 7409     		je	.L43
 608 0097 4889C6   		movq	%rax, %rsi
 609              	.LVL74:
 502:fltk-1.3.4-1/jpeg/jquant1.c ****     ptrin = input_buf[row];
 610              		.loc 1 502 3 view .LVU189
 611 009a EBAC     		jmp	.L47
 612              	.LVL75:
 613 009c 0F1F4000 		.p2align 4,,10
 614              		.p2align 3
 615              	.L43:
 510:fltk-1.3.4-1/jpeg/jquant1.c ****     }
 511:fltk-1.3.4-1/jpeg/jquant1.c ****   }
 512:fltk-1.3.4-1/jpeg/jquant1.c **** }
 616              		.loc 1 512 1 view .LVU190
 617 00a0 5B       		popq	%rbx
 618              		.cfi_def_cfa_offset 40
 619 00a1 5D       		popq	%rbp
 620              		.cfi_def_cfa_offset 32
 621              	.LVL76:
 622              		.loc 1 512 1 view .LVU191
 623 00a2 415C     		popq	%r12
 624              		.cfi_def_cfa_offset 24
 625              	.LVL77:
 626              		.loc 1 512 1 view .LVU192
 627 00a4 415D     		popq	%r13
 628              		.cfi_def_cfa_offset 16
 629 00a6 415E     		popq	%r14
 630              		.cfi_def_cfa_offset 8
 631 00a8 C3       		ret
 632              		.cfi_endproc
 633              	.LFE59:
 635              		.section	.text.quantize3_ord_dither,"ax",@progbits
 636              		.p2align 4
 638              	quantize3_ord_dither:
 639              	.LVL78:
 640              	.LFB61:
 513:fltk-1.3.4-1/jpeg/jquant1.c **** 
 514:fltk-1.3.4-1/jpeg/jquant1.c **** 
 515:fltk-1.3.4-1/jpeg/jquant1.c **** METHODDEF(void)
 516:fltk-1.3.4-1/jpeg/jquant1.c **** quantize_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
 517:fltk-1.3.4-1/jpeg/jquant1.c **** 		     JSAMPARRAY output_buf, int num_rows)
 518:fltk-1.3.4-1/jpeg/jquant1.c **** /* General case, with ordered dithering */
 519:fltk-1.3.4-1/jpeg/jquant1.c **** {
 520:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 521:fltk-1.3.4-1/jpeg/jquant1.c ****   register JSAMPROW input_ptr;
 522:fltk-1.3.4-1/jpeg/jquant1.c ****   register JSAMPROW output_ptr;
 523:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPROW colorindex_ci;
 524:fltk-1.3.4-1/jpeg/jquant1.c ****   int * dither;			/* points to active row of dither matrix */
 525:fltk-1.3.4-1/jpeg/jquant1.c ****   int row_index, col_index;	/* current indexes into dither matrix */
 526:fltk-1.3.4-1/jpeg/jquant1.c ****   int nc = cinfo->out_color_components;
 527:fltk-1.3.4-1/jpeg/jquant1.c ****   int ci;
 528:fltk-1.3.4-1/jpeg/jquant1.c ****   int row;
 529:fltk-1.3.4-1/jpeg/jquant1.c ****   JDIMENSION col;
 530:fltk-1.3.4-1/jpeg/jquant1.c ****   JDIMENSION width = cinfo->output_width;
 531:fltk-1.3.4-1/jpeg/jquant1.c **** 
 532:fltk-1.3.4-1/jpeg/jquant1.c ****   for (row = 0; row < num_rows; row++) {
 533:fltk-1.3.4-1/jpeg/jquant1.c ****     /* Initialize output values to 0 so can process components separately */
 534:fltk-1.3.4-1/jpeg/jquant1.c ****     FMEMZERO((void FAR *) output_buf[row],
 535:fltk-1.3.4-1/jpeg/jquant1.c **** 	     (size_t) (width * SIZEOF(JSAMPLE)));
 536:fltk-1.3.4-1/jpeg/jquant1.c ****     row_index = cquantize->row_index;
 537:fltk-1.3.4-1/jpeg/jquant1.c ****     for (ci = 0; ci < nc; ci++) {
 538:fltk-1.3.4-1/jpeg/jquant1.c ****       input_ptr = input_buf[row] + ci;
 539:fltk-1.3.4-1/jpeg/jquant1.c ****       output_ptr = output_buf[row];
 540:fltk-1.3.4-1/jpeg/jquant1.c ****       colorindex_ci = cquantize->colorindex[ci];
 541:fltk-1.3.4-1/jpeg/jquant1.c ****       dither = cquantize->odither[ci][row_index];
 542:fltk-1.3.4-1/jpeg/jquant1.c ****       col_index = 0;
 543:fltk-1.3.4-1/jpeg/jquant1.c **** 
 544:fltk-1.3.4-1/jpeg/jquant1.c ****       for (col = width; col > 0; col--) {
 545:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* Form pixel value + dither, range-limit to 0..MAXJSAMPLE,
 546:fltk-1.3.4-1/jpeg/jquant1.c **** 	 * select output value, accumulate into output code for this pixel.
 547:fltk-1.3.4-1/jpeg/jquant1.c **** 	 * Range-limiting need not be done explicitly, as we have extended
 548:fltk-1.3.4-1/jpeg/jquant1.c **** 	 * the colorindex table to produce the right answers for out-of-range
 549:fltk-1.3.4-1/jpeg/jquant1.c **** 	 * inputs.  The maximum dither is +- MAXJSAMPLE; this sets the
 550:fltk-1.3.4-1/jpeg/jquant1.c **** 	 * required amount of padding.
 551:fltk-1.3.4-1/jpeg/jquant1.c **** 	 */
 552:fltk-1.3.4-1/jpeg/jquant1.c **** 	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 553:fltk-1.3.4-1/jpeg/jquant1.c **** 	input_ptr += nc;
 554:fltk-1.3.4-1/jpeg/jquant1.c **** 	output_ptr++;
 555:fltk-1.3.4-1/jpeg/jquant1.c **** 	col_index = (col_index + 1) & ODITHER_MASK;
 556:fltk-1.3.4-1/jpeg/jquant1.c ****       }
 557:fltk-1.3.4-1/jpeg/jquant1.c ****     }
 558:fltk-1.3.4-1/jpeg/jquant1.c ****     /* Advance row index for next row */
 559:fltk-1.3.4-1/jpeg/jquant1.c ****     row_index = (row_index + 1) & ODITHER_MASK;
 560:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->row_index = row_index;
 561:fltk-1.3.4-1/jpeg/jquant1.c ****   }
 562:fltk-1.3.4-1/jpeg/jquant1.c **** }
 563:fltk-1.3.4-1/jpeg/jquant1.c **** 
 564:fltk-1.3.4-1/jpeg/jquant1.c **** 
 565:fltk-1.3.4-1/jpeg/jquant1.c **** METHODDEF(void)
 566:fltk-1.3.4-1/jpeg/jquant1.c **** quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
 567:fltk-1.3.4-1/jpeg/jquant1.c **** 		      JSAMPARRAY output_buf, int num_rows)
 568:fltk-1.3.4-1/jpeg/jquant1.c **** /* Fast path for out_color_components==3, with ordered dithering */
 569:fltk-1.3.4-1/jpeg/jquant1.c **** {
 641              		.loc 1 569 1 is_stmt 1 view -0
 642              		.cfi_startproc
 643              		.loc 1 569 1 is_stmt 0 view .LVU194
 644 0000 F30F1EFA 		endbr64
 570:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 645              		.loc 1 570 3 is_stmt 1 view .LVU195
 569:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 646              		.loc 1 569 1 is_stmt 0 view .LVU196
 647 0004 4157     		pushq	%r15
 648              		.cfi_def_cfa_offset 16
 649              		.cfi_offset 15, -16
 650 0006 4156     		pushq	%r14
 651              		.cfi_def_cfa_offset 24
 652              		.cfi_offset 14, -24
 653 0008 4155     		pushq	%r13
 654              		.cfi_def_cfa_offset 32
 655              		.cfi_offset 13, -32
 656 000a 4154     		pushq	%r12
 657              		.cfi_def_cfa_offset 40
 658              		.cfi_offset 12, -40
 659 000c 55       		pushq	%rbp
 660              		.cfi_def_cfa_offset 48
 661              		.cfi_offset 6, -48
 662 000d 53       		pushq	%rbx
 663              		.cfi_def_cfa_offset 56
 664              		.cfi_offset 3, -56
 665              		.loc 1 570 20 view .LVU197
 666 000e 488B9F90 		movq	656(%rdi), %rbx
 666      020000
 571:fltk-1.3.4-1/jpeg/jquant1.c ****   register int pixcode;
 572:fltk-1.3.4-1/jpeg/jquant1.c ****   register JSAMPROW input_ptr;
 573:fltk-1.3.4-1/jpeg/jquant1.c ****   register JSAMPROW output_ptr;
 574:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPROW colorindex0 = cquantize->colorindex[0];
 667              		.loc 1 574 35 view .LVU198
 668 0015 488B4330 		movq	48(%rbx), %rax
 569:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 669              		.loc 1 569 1 view .LVU199
 670 0019 48897424 		movq	%rsi, -32(%rsp)
 670      E0
 671              		.loc 1 574 12 view .LVU200
 672 001e 488B28   		movq	(%rax), %rbp
 575:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPROW colorindex1 = cquantize->colorindex[1];
 673              		.loc 1 575 12 view .LVU201
 674 0021 4C8B6008 		movq	8(%rax), %r12
 569:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 675              		.loc 1 569 1 view .LVU202
 676 0025 48895424 		movq	%rdx, -24(%rsp)
 676      E8
 576:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPROW colorindex2 = cquantize->colorindex[2];
 677              		.loc 1 576 12 view .LVU203
 678 002a 4C8B6810 		movq	16(%rax), %r13
 577:fltk-1.3.4-1/jpeg/jquant1.c ****   int * dither0;		/* points to active row of dither matrix */
 578:fltk-1.3.4-1/jpeg/jquant1.c ****   int * dither1;
 579:fltk-1.3.4-1/jpeg/jquant1.c ****   int * dither2;
 580:fltk-1.3.4-1/jpeg/jquant1.c ****   int row_index, col_index;	/* current indexes into dither matrix */
 581:fltk-1.3.4-1/jpeg/jquant1.c ****   int row;
 582:fltk-1.3.4-1/jpeg/jquant1.c ****   JDIMENSION col;
 583:fltk-1.3.4-1/jpeg/jquant1.c ****   JDIMENSION width = cinfo->output_width;
 679              		.loc 1 583 14 view .LVU204
 680 002e 8B878800 		movl	136(%rdi), %eax
 680      0000
 570:fltk-1.3.4-1/jpeg/jquant1.c ****   register int pixcode;
 681              		.loc 1 570 20 view .LVU205
 682 0034 48895C24 		movq	%rbx, -48(%rsp)
 682      D0
 683              	.LVL79:
 571:fltk-1.3.4-1/jpeg/jquant1.c ****   register JSAMPROW input_ptr;
 684              		.loc 1 571 3 is_stmt 1 view .LVU206
 572:fltk-1.3.4-1/jpeg/jquant1.c ****   register JSAMPROW output_ptr;
 685              		.loc 1 572 3 view .LVU207
 573:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPROW colorindex0 = cquantize->colorindex[0];
 686              		.loc 1 573 3 view .LVU208
 574:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPROW colorindex1 = cquantize->colorindex[1];
 687              		.loc 1 574 3 view .LVU209
 575:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPROW colorindex2 = cquantize->colorindex[2];
 688              		.loc 1 575 3 view .LVU210
 576:fltk-1.3.4-1/jpeg/jquant1.c ****   int * dither0;		/* points to active row of dither matrix */
 689              		.loc 1 576 3 view .LVU211
 577:fltk-1.3.4-1/jpeg/jquant1.c ****   int * dither1;
 690              		.loc 1 577 3 view .LVU212
 578:fltk-1.3.4-1/jpeg/jquant1.c ****   int * dither2;
 691              		.loc 1 578 3 view .LVU213
 579:fltk-1.3.4-1/jpeg/jquant1.c ****   int row_index, col_index;	/* current indexes into dither matrix */
 692              		.loc 1 579 3 view .LVU214
 580:fltk-1.3.4-1/jpeg/jquant1.c ****   int row;
 693              		.loc 1 580 3 view .LVU215
 581:fltk-1.3.4-1/jpeg/jquant1.c ****   JDIMENSION col;
 694              		.loc 1 581 3 view .LVU216
 582:fltk-1.3.4-1/jpeg/jquant1.c ****   JDIMENSION width = cinfo->output_width;
 695              		.loc 1 582 3 view .LVU217
 696              		.loc 1 583 3 view .LVU218
 697              		.loc 1 583 14 is_stmt 0 view .LVU219
 698 0039 894424DC 		movl	%eax, -36(%rsp)
 699              	.LVL80:
 584:fltk-1.3.4-1/jpeg/jquant1.c **** 
 585:fltk-1.3.4-1/jpeg/jquant1.c ****   for (row = 0; row < num_rows; row++) {
 700              		.loc 1 585 3 is_stmt 1 view .LVU220
 701              		.loc 1 585 17 view .LVU221
 702              		.loc 1 585 3 is_stmt 0 view .LVU222
 703 003d 85C9     		testl	%ecx, %ecx
 704 003f 0F8EEB00 		jle	.L54
 704      0000
 705 0045 8B5B4C   		movl	76(%rbx), %ebx
 706              	.LVL81:
 707              		.loc 1 585 3 view .LVU223
 708 0048 83E801   		subl	$1, %eax
 709              	.LVL82:
 710              		.loc 1 585 3 view .LVU224
 711 004b 4531F6   		xorl	%r14d, %r14d
 712 004e 488D4440 		leaq	3(%rax,%rax,2), %rax
 712      03
 713 0053 895C24D8 		movl	%ebx, -40(%rsp)
 714 0057 8D59FF   		leal	-1(%rcx), %ebx
 715 005a 48895C24 		movq	%rbx, -16(%rsp)
 715      F0
 716 005f 48894424 		movq	%rax, -8(%rsp)
 716      F8
 717              	.LVL83:
 718              		.p2align 4,,10
 719 0064 0F1F4000 		.p2align 3
 720              	.L57:
 586:fltk-1.3.4-1/jpeg/jquant1.c ****     row_index = cquantize->row_index;
 721              		.loc 1 586 5 is_stmt 1 view .LVU225
 587:fltk-1.3.4-1/jpeg/jquant1.c ****     input_ptr = input_buf[row];
 722              		.loc 1 587 5 view .LVU226
 723              		.loc 1 587 15 is_stmt 0 view .LVU227
 724 0068 488B4424 		movq	-32(%rsp), %rax
 724      E0
 588:fltk-1.3.4-1/jpeg/jquant1.c ****     output_ptr = output_buf[row];
 589:fltk-1.3.4-1/jpeg/jquant1.c ****     dither0 = cquantize->odither[0][row_index];
 725              		.loc 1 589 33 view .LVU228
 726 006d 488B4C24 		movq	-48(%rsp), %rcx
 726      D0
 588:fltk-1.3.4-1/jpeg/jquant1.c ****     output_ptr = output_buf[row];
 727              		.loc 1 588 16 view .LVU229
 728 0072 488B5C24 		movq	-24(%rsp), %rbx
 728      E8
 729              		.loc 1 589 36 view .LVU230
 730 0077 4C634424 		movslq	-40(%rsp), %r8
 730      D8
 587:fltk-1.3.4-1/jpeg/jquant1.c ****     input_ptr = input_buf[row];
 731              		.loc 1 587 15 view .LVU231
 732 007c 4A8B04F0 		movq	(%rax,%r14,8), %rax
 733              	.LVL84:
 588:fltk-1.3.4-1/jpeg/jquant1.c ****     output_ptr = output_buf[row];
 734              		.loc 1 588 5 is_stmt 1 view .LVU232
 735 0080 488B7424 		movq	-8(%rsp), %rsi
 735      F8
 590:fltk-1.3.4-1/jpeg/jquant1.c ****     dither1 = cquantize->odither[1][row_index];
 591:fltk-1.3.4-1/jpeg/jquant1.c ****     dither2 = cquantize->odither[2][row_index];
 592:fltk-1.3.4-1/jpeg/jquant1.c ****     col_index = 0;
 593:fltk-1.3.4-1/jpeg/jquant1.c **** 
 594:fltk-1.3.4-1/jpeg/jquant1.c ****     for (col = width; col > 0; col--) {
 736              		.loc 1 594 5 is_stmt 0 view .LVU233
 737 0085 8B5424DC 		movl	-36(%rsp), %edx
 588:fltk-1.3.4-1/jpeg/jquant1.c ****     output_ptr = output_buf[row];
 738              		.loc 1 588 16 view .LVU234
 739 0089 4A8B3CF3 		movq	(%rbx,%r14,8), %rdi
 740              	.LVL85:
 589:fltk-1.3.4-1/jpeg/jquant1.c ****     dither1 = cquantize->odither[1][row_index];
 741              		.loc 1 589 5 is_stmt 1 view .LVU235
 589:fltk-1.3.4-1/jpeg/jquant1.c ****     dither1 = cquantize->odither[1][row_index];
 742              		.loc 1 589 36 is_stmt 0 view .LVU236
 743 008d 49C1E006 		salq	$6, %r8
 589:fltk-1.3.4-1/jpeg/jquant1.c ****     dither1 = cquantize->odither[1][row_index];
 744              		.loc 1 589 33 view .LVU237
 745 0091 488B5950 		movq	80(%rcx), %rbx
 746              	.LVL86:
 590:fltk-1.3.4-1/jpeg/jquant1.c ****     dither1 = cquantize->odither[1][row_index];
 747              		.loc 1 590 5 is_stmt 1 view .LVU238
 590:fltk-1.3.4-1/jpeg/jquant1.c ****     dither1 = cquantize->odither[1][row_index];
 748              		.loc 1 590 33 is_stmt 0 view .LVU239
 749 0095 4C8B5958 		movq	88(%rcx), %r11
 750              	.LVL87:
 591:fltk-1.3.4-1/jpeg/jquant1.c ****     col_index = 0;
 751              		.loc 1 591 5 is_stmt 1 view .LVU240
 752 0099 4C8D0C30 		leaq	(%rax,%rsi), %r9
 591:fltk-1.3.4-1/jpeg/jquant1.c ****     col_index = 0;
 753              		.loc 1 591 33 is_stmt 0 view .LVU241
 754 009d 4C8B5160 		movq	96(%rcx), %r10
 755              	.LVL88:
 592:fltk-1.3.4-1/jpeg/jquant1.c **** 
 756              		.loc 1 592 5 is_stmt 1 view .LVU242
 757              		.loc 1 594 5 view .LVU243
 758              		.loc 1 594 23 view .LVU244
 592:fltk-1.3.4-1/jpeg/jquant1.c **** 
 759              		.loc 1 592 15 is_stmt 0 view .LVU245
 760 00a1 31C9     		xorl	%ecx, %ecx
 761              		.loc 1 594 5 view .LVU246
 762 00a3 85D2     		testl	%edx, %edx
 763 00a5 745C     		je	.L60
 764              	.LVL89:
 765 00a7 660F1F84 		.p2align 4,,10
 765      00000000 
 765      00
 766              		.p2align 3
 767              	.L59:
 595:fltk-1.3.4-1/jpeg/jquant1.c ****       pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 768              		.loc 1 595 7 is_stmt 1 discriminator 3 view .LVU247
 769              		.loc 1 595 18 is_stmt 0 discriminator 3 view .LVU248
 770 00b0 4863D1   		movslq	%ecx, %rdx
 771 00b3 4883C003 		addq	$3, %rax
 772              	.LVL90:
 596:fltk-1.3.4-1/jpeg/jquant1.c **** 					dither0[col_index]]);
 597:fltk-1.3.4-1/jpeg/jquant1.c ****       pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 598:fltk-1.3.4-1/jpeg/jquant1.c **** 					dither1[col_index]]);
 599:fltk-1.3.4-1/jpeg/jquant1.c ****       pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 600:fltk-1.3.4-1/jpeg/jquant1.c **** 					dither2[col_index]]);
 601:fltk-1.3.4-1/jpeg/jquant1.c ****       *output_ptr++ = (JSAMPLE) pixcode;
 773              		.loc 1 601 18 discriminator 3 view .LVU249
 774 00b7 4883C701 		addq	$1, %rdi
 775              	.LVL91:
 602:fltk-1.3.4-1/jpeg/jquant1.c ****       col_index = (col_index + 1) & ODITHER_MASK;
 776              		.loc 1 602 30 discriminator 3 view .LVU250
 777 00bb 83C101   		addl	$1, %ecx
 778              	.LVL92:
 779              		.loc 1 602 30 discriminator 3 view .LVU251
 780 00be 4D8D3C90 		leaq	(%r8,%rdx,4), %r15
 595:fltk-1.3.4-1/jpeg/jquant1.c ****       pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 781              		.loc 1 595 18 discriminator 3 view .LVU252
 782 00c2 0FB650FD 		movzbl	-3(%rax), %edx
 783              		.loc 1 602 17 discriminator 3 view .LVU253
 784 00c6 83E10F   		andl	$15, %ecx
 785              	.LVL93:
 595:fltk-1.3.4-1/jpeg/jquant1.c ****       pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 786              		.loc 1 595 18 discriminator 3 view .LVU254
 787 00c9 4203143B 		addl	(%rbx,%r15), %edx
 788 00cd 4863D2   		movslq	%edx, %rdx
 595:fltk-1.3.4-1/jpeg/jquant1.c ****       pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 789              		.loc 1 595 16 discriminator 3 view .LVU255
 790 00d0 0FB67415 		movzbl	0(%rbp,%rdx), %esi
 790      00
 791              	.LVL94:
 597:fltk-1.3.4-1/jpeg/jquant1.c **** 					dither1[col_index]]);
 792              		.loc 1 597 7 is_stmt 1 discriminator 3 view .LVU256
 597:fltk-1.3.4-1/jpeg/jquant1.c **** 					dither1[col_index]]);
 793              		.loc 1 597 18 is_stmt 0 discriminator 3 view .LVU257
 794 00d5 0FB650FE 		movzbl	-2(%rax), %edx
 795 00d9 4303143B 		addl	(%r11,%r15), %edx
 796 00dd 4863D2   		movslq	%edx, %rdx
 797 00e0 410FB614 		movzbl	(%r12,%rdx), %edx
 797      14
 597:fltk-1.3.4-1/jpeg/jquant1.c **** 					dither1[col_index]]);
 798              		.loc 1 597 15 discriminator 3 view .LVU258
 799 00e5 01D6     		addl	%edx, %esi
 800              	.LVL95:
 599:fltk-1.3.4-1/jpeg/jquant1.c **** 					dither2[col_index]]);
 801              		.loc 1 599 7 is_stmt 1 discriminator 3 view .LVU259
 601:fltk-1.3.4-1/jpeg/jquant1.c ****       col_index = (col_index + 1) & ODITHER_MASK;
 802              		.loc 1 601 7 discriminator 3 view .LVU260
 599:fltk-1.3.4-1/jpeg/jquant1.c **** 					dither2[col_index]]);
 803              		.loc 1 599 18 is_stmt 0 discriminator 3 view .LVU261
 804 00e7 0FB650FF 		movzbl	-1(%rax), %edx
 805 00eb 4303143A 		addl	(%r10,%r15), %edx
 806 00ef 4863D2   		movslq	%edx, %rdx
 807 00f2 410FB654 		movzbl	0(%r13,%rdx), %edx
 807      1500
 599:fltk-1.3.4-1/jpeg/jquant1.c **** 					dither2[col_index]]);
 808              		.loc 1 599 15 discriminator 3 view .LVU262
 809 00f8 01D6     		addl	%edx, %esi
 810              	.LVL96:
 601:fltk-1.3.4-1/jpeg/jquant1.c ****       col_index = (col_index + 1) & ODITHER_MASK;
 811              		.loc 1 601 23 discriminator 3 view .LVU263
 812 00fa 408877FF 		movb	%sil, -1(%rdi)
 813              	.LVL97:
 814              		.loc 1 602 7 is_stmt 1 discriminator 3 view .LVU264
 594:fltk-1.3.4-1/jpeg/jquant1.c ****       pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 815              		.loc 1 594 32 discriminator 3 view .LVU265
 594:fltk-1.3.4-1/jpeg/jquant1.c ****       pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 816              		.loc 1 594 23 discriminator 3 view .LVU266
 594:fltk-1.3.4-1/jpeg/jquant1.c ****       pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 817              		.loc 1 594 5 is_stmt 0 discriminator 3 view .LVU267
 818 00fe 4C39C8   		cmpq	%r9, %rax
 819 0101 75AD     		jne	.L59
 820              	.LVL98:
 821              	.L60:
 603:fltk-1.3.4-1/jpeg/jquant1.c ****     }
 604:fltk-1.3.4-1/jpeg/jquant1.c ****     row_index = (row_index + 1) & ODITHER_MASK;
 822              		.loc 1 604 5 is_stmt 1 view .LVU268
 823              		.loc 1 604 28 is_stmt 0 view .LVU269
 824 0103 8B4424D8 		movl	-40(%rsp), %eax
 825              	.LVL99:
 605:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->row_index = row_index;
 826              		.loc 1 605 26 view .LVU270
 827 0107 488B5C24 		movq	-48(%rsp), %rbx
 827      D0
 828              	.LVL100:
 604:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->row_index = row_index;
 829              		.loc 1 604 28 view .LVU271
 830 010c 83C001   		addl	$1, %eax
 604:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->row_index = row_index;
 831              		.loc 1 604 15 view .LVU272
 832 010f 83E00F   		andl	$15, %eax
 833 0112 894424D8 		movl	%eax, -40(%rsp)
 834              	.LVL101:
 835              		.loc 1 605 5 is_stmt 1 view .LVU273
 836              		.loc 1 605 26 is_stmt 0 view .LVU274
 837 0116 89434C   		movl	%eax, 76(%rbx)
 585:fltk-1.3.4-1/jpeg/jquant1.c ****     row_index = cquantize->row_index;
 838              		.loc 1 585 33 is_stmt 1 view .LVU275
 839              	.LVL102:
 585:fltk-1.3.4-1/jpeg/jquant1.c ****     row_index = cquantize->row_index;
 840              		.loc 1 585 17 view .LVU276
 841 0119 498D4601 		leaq	1(%r14), %rax
 842              	.LVL103:
 585:fltk-1.3.4-1/jpeg/jquant1.c ****     row_index = cquantize->row_index;
 843              		.loc 1 585 3 is_stmt 0 view .LVU277
 844 011d 4C397424 		cmpq	%r14, -16(%rsp)
 844      F0
 845 0122 740C     		je	.L54
 846 0124 4989C6   		movq	%rax, %r14
 847              	.LVL104:
 585:fltk-1.3.4-1/jpeg/jquant1.c ****     row_index = cquantize->row_index;
 848              		.loc 1 585 3 view .LVU278
 849 0127 E93CFFFF 		jmp	.L57
 849      FF
 850              	.LVL105:
 851 012c 0F1F4000 		.p2align 4,,10
 852              		.p2align 3
 853              	.L54:
 606:fltk-1.3.4-1/jpeg/jquant1.c ****   }
 607:fltk-1.3.4-1/jpeg/jquant1.c **** }
 854              		.loc 1 607 1 view .LVU279
 855 0130 5B       		popq	%rbx
 856              		.cfi_def_cfa_offset 48
 857 0131 5D       		popq	%rbp
 858              		.cfi_def_cfa_offset 40
 859              	.LVL106:
 860              		.loc 1 607 1 view .LVU280
 861 0132 415C     		popq	%r12
 862              		.cfi_def_cfa_offset 32
 863              	.LVL107:
 864              		.loc 1 607 1 view .LVU281
 865 0134 415D     		popq	%r13
 866              		.cfi_def_cfa_offset 24
 867              	.LVL108:
 868              		.loc 1 607 1 view .LVU282
 869 0136 415E     		popq	%r14
 870              		.cfi_def_cfa_offset 16
 871 0138 415F     		popq	%r15
 872              		.cfi_def_cfa_offset 8
 873 013a C3       		ret
 874              		.cfi_endproc
 875              	.LFE61:
 877              		.section	.text.finish_pass_1_quant,"ax",@progbits
 878              		.p2align 4
 880              	finish_pass_1_quant:
 881              	.LVL109:
 882              	.LFB65:
 608:fltk-1.3.4-1/jpeg/jquant1.c **** 
 609:fltk-1.3.4-1/jpeg/jquant1.c **** 
 610:fltk-1.3.4-1/jpeg/jquant1.c **** METHODDEF(void)
 611:fltk-1.3.4-1/jpeg/jquant1.c **** quantize_fs_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
 612:fltk-1.3.4-1/jpeg/jquant1.c **** 		    JSAMPARRAY output_buf, int num_rows)
 613:fltk-1.3.4-1/jpeg/jquant1.c **** /* General case, with Floyd-Steinberg dithering */
 614:fltk-1.3.4-1/jpeg/jquant1.c **** {
 615:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 616:fltk-1.3.4-1/jpeg/jquant1.c ****   register LOCFSERROR cur;	/* current error or pixel value */
 617:fltk-1.3.4-1/jpeg/jquant1.c ****   LOCFSERROR belowerr;		/* error for pixel below cur */
 618:fltk-1.3.4-1/jpeg/jquant1.c ****   LOCFSERROR bpreverr;		/* error for below/prev col */
 619:fltk-1.3.4-1/jpeg/jquant1.c ****   LOCFSERROR bnexterr;		/* error for below/next col */
 620:fltk-1.3.4-1/jpeg/jquant1.c ****   LOCFSERROR delta;
 621:fltk-1.3.4-1/jpeg/jquant1.c ****   register FSERRPTR errorptr;	/* => fserrors[] at column before current */
 622:fltk-1.3.4-1/jpeg/jquant1.c ****   register JSAMPROW input_ptr;
 623:fltk-1.3.4-1/jpeg/jquant1.c ****   register JSAMPROW output_ptr;
 624:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPROW colorindex_ci;
 625:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPROW colormap_ci;
 626:fltk-1.3.4-1/jpeg/jquant1.c ****   int pixcode;
 627:fltk-1.3.4-1/jpeg/jquant1.c ****   int nc = cinfo->out_color_components;
 628:fltk-1.3.4-1/jpeg/jquant1.c ****   int dir;			/* 1 for left-to-right, -1 for right-to-left */
 629:fltk-1.3.4-1/jpeg/jquant1.c ****   int dirnc;			/* dir * nc */
 630:fltk-1.3.4-1/jpeg/jquant1.c ****   int ci;
 631:fltk-1.3.4-1/jpeg/jquant1.c ****   int row;
 632:fltk-1.3.4-1/jpeg/jquant1.c ****   JDIMENSION col;
 633:fltk-1.3.4-1/jpeg/jquant1.c ****   JDIMENSION width = cinfo->output_width;
 634:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPLE *range_limit = cinfo->sample_range_limit;
 635:fltk-1.3.4-1/jpeg/jquant1.c ****   SHIFT_TEMPS
 636:fltk-1.3.4-1/jpeg/jquant1.c **** 
 637:fltk-1.3.4-1/jpeg/jquant1.c ****   for (row = 0; row < num_rows; row++) {
 638:fltk-1.3.4-1/jpeg/jquant1.c ****     /* Initialize output values to 0 so can process components separately */
 639:fltk-1.3.4-1/jpeg/jquant1.c ****     FMEMZERO((void FAR *) output_buf[row],
 640:fltk-1.3.4-1/jpeg/jquant1.c **** 	     (size_t) (width * SIZEOF(JSAMPLE)));
 641:fltk-1.3.4-1/jpeg/jquant1.c ****     for (ci = 0; ci < nc; ci++) {
 642:fltk-1.3.4-1/jpeg/jquant1.c ****       input_ptr = input_buf[row] + ci;
 643:fltk-1.3.4-1/jpeg/jquant1.c ****       output_ptr = output_buf[row];
 644:fltk-1.3.4-1/jpeg/jquant1.c ****       if (cquantize->on_odd_row) {
 645:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* work right to left in this row */
 646:fltk-1.3.4-1/jpeg/jquant1.c **** 	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 647:fltk-1.3.4-1/jpeg/jquant1.c **** 	output_ptr += width-1;
 648:fltk-1.3.4-1/jpeg/jquant1.c **** 	dir = -1;
 649:fltk-1.3.4-1/jpeg/jquant1.c **** 	dirnc = -nc;
 650:fltk-1.3.4-1/jpeg/jquant1.c **** 	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 651:fltk-1.3.4-1/jpeg/jquant1.c ****       } else {
 652:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* work left to right in this row */
 653:fltk-1.3.4-1/jpeg/jquant1.c **** 	dir = 1;
 654:fltk-1.3.4-1/jpeg/jquant1.c **** 	dirnc = nc;
 655:fltk-1.3.4-1/jpeg/jquant1.c **** 	errorptr = cquantize->fserrors[ci]; /* => entry before first column */
 656:fltk-1.3.4-1/jpeg/jquant1.c ****       }
 657:fltk-1.3.4-1/jpeg/jquant1.c ****       colorindex_ci = cquantize->colorindex[ci];
 658:fltk-1.3.4-1/jpeg/jquant1.c ****       colormap_ci = cquantize->sv_colormap[ci];
 659:fltk-1.3.4-1/jpeg/jquant1.c ****       /* Preset error values: no error propagated to first pixel from left */
 660:fltk-1.3.4-1/jpeg/jquant1.c ****       cur = 0;
 661:fltk-1.3.4-1/jpeg/jquant1.c ****       /* and no error propagated to row below yet */
 662:fltk-1.3.4-1/jpeg/jquant1.c ****       belowerr = bpreverr = 0;
 663:fltk-1.3.4-1/jpeg/jquant1.c **** 
 664:fltk-1.3.4-1/jpeg/jquant1.c ****       for (col = width; col > 0; col--) {
 665:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* cur holds the error propagated from the previous pixel on the
 666:fltk-1.3.4-1/jpeg/jquant1.c **** 	 * current line.  Add the error propagated from the previous line
 667:fltk-1.3.4-1/jpeg/jquant1.c **** 	 * to form the complete error correction term for this pixel, and
 668:fltk-1.3.4-1/jpeg/jquant1.c **** 	 * round the error term (which is expressed * 16) to an integer.
 669:fltk-1.3.4-1/jpeg/jquant1.c **** 	 * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
 670:fltk-1.3.4-1/jpeg/jquant1.c **** 	 * for either sign of the error value.
 671:fltk-1.3.4-1/jpeg/jquant1.c **** 	 * Note: errorptr points to *previous* column's array entry.
 672:fltk-1.3.4-1/jpeg/jquant1.c **** 	 */
 673:fltk-1.3.4-1/jpeg/jquant1.c **** 	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 674:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
 675:fltk-1.3.4-1/jpeg/jquant1.c **** 	 * The maximum error is +- MAXJSAMPLE; this sets the required size
 676:fltk-1.3.4-1/jpeg/jquant1.c **** 	 * of the range_limit array.
 677:fltk-1.3.4-1/jpeg/jquant1.c **** 	 */
 678:fltk-1.3.4-1/jpeg/jquant1.c **** 	cur += GETJSAMPLE(*input_ptr);
 679:fltk-1.3.4-1/jpeg/jquant1.c **** 	cur = GETJSAMPLE(range_limit[cur]);
 680:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* Select output value, accumulate into output code for this pixel */
 681:fltk-1.3.4-1/jpeg/jquant1.c **** 	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 682:fltk-1.3.4-1/jpeg/jquant1.c **** 	*output_ptr += (JSAMPLE) pixcode;
 683:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* Compute actual representation error at this pixel */
 684:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* Note: we can do this even though we don't have the final */
 685:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* pixel code, because the colormap is orthogonal. */
 686:fltk-1.3.4-1/jpeg/jquant1.c **** 	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 687:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* Compute error fractions to be propagated to adjacent pixels.
 688:fltk-1.3.4-1/jpeg/jquant1.c **** 	 * Add these into the running sums, and simultaneously shift the
 689:fltk-1.3.4-1/jpeg/jquant1.c **** 	 * next-line error sums left by 1 column.
 690:fltk-1.3.4-1/jpeg/jquant1.c **** 	 */
 691:fltk-1.3.4-1/jpeg/jquant1.c **** 	bnexterr = cur;
 692:fltk-1.3.4-1/jpeg/jquant1.c **** 	delta = cur * 2;
 693:fltk-1.3.4-1/jpeg/jquant1.c **** 	cur += delta;		/* form error * 3 */
 694:fltk-1.3.4-1/jpeg/jquant1.c **** 	errorptr[0] = (FSERROR) (bpreverr + cur);
 695:fltk-1.3.4-1/jpeg/jquant1.c **** 	cur += delta;		/* form error * 5 */
 696:fltk-1.3.4-1/jpeg/jquant1.c **** 	bpreverr = belowerr + cur;
 697:fltk-1.3.4-1/jpeg/jquant1.c **** 	belowerr = bnexterr;
 698:fltk-1.3.4-1/jpeg/jquant1.c **** 	cur += delta;		/* form error * 7 */
 699:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* At this point cur contains the 7/16 error value to be propagated
 700:fltk-1.3.4-1/jpeg/jquant1.c **** 	 * to the next pixel on the current line, and all the errors for the
 701:fltk-1.3.4-1/jpeg/jquant1.c **** 	 * next line have been shifted over. We are therefore ready to move on.
 702:fltk-1.3.4-1/jpeg/jquant1.c **** 	 */
 703:fltk-1.3.4-1/jpeg/jquant1.c **** 	input_ptr += dirnc;	/* advance input ptr to next column */
 704:fltk-1.3.4-1/jpeg/jquant1.c **** 	output_ptr += dir;	/* advance output ptr to next column */
 705:fltk-1.3.4-1/jpeg/jquant1.c **** 	errorptr += dir;	/* advance errorptr to current column */
 706:fltk-1.3.4-1/jpeg/jquant1.c ****       }
 707:fltk-1.3.4-1/jpeg/jquant1.c ****       /* Post-loop cleanup: we must unload the final error value into the
 708:fltk-1.3.4-1/jpeg/jquant1.c ****        * final fserrors[] entry.  Note we need not unload belowerr because
 709:fltk-1.3.4-1/jpeg/jquant1.c ****        * it is for the dummy column before or after the actual array.
 710:fltk-1.3.4-1/jpeg/jquant1.c ****        */
 711:fltk-1.3.4-1/jpeg/jquant1.c ****       errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 712:fltk-1.3.4-1/jpeg/jquant1.c ****     }
 713:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 714:fltk-1.3.4-1/jpeg/jquant1.c ****   }
 715:fltk-1.3.4-1/jpeg/jquant1.c **** }
 716:fltk-1.3.4-1/jpeg/jquant1.c **** 
 717:fltk-1.3.4-1/jpeg/jquant1.c **** 
 718:fltk-1.3.4-1/jpeg/jquant1.c **** /*
 719:fltk-1.3.4-1/jpeg/jquant1.c ****  * Allocate workspace for Floyd-Steinberg errors.
 720:fltk-1.3.4-1/jpeg/jquant1.c ****  */
 721:fltk-1.3.4-1/jpeg/jquant1.c **** 
 722:fltk-1.3.4-1/jpeg/jquant1.c **** LOCAL(void)
 723:fltk-1.3.4-1/jpeg/jquant1.c **** alloc_fs_workspace (j_decompress_ptr cinfo)
 724:fltk-1.3.4-1/jpeg/jquant1.c **** {
 725:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 726:fltk-1.3.4-1/jpeg/jquant1.c ****   size_t arraysize;
 727:fltk-1.3.4-1/jpeg/jquant1.c ****   int i;
 728:fltk-1.3.4-1/jpeg/jquant1.c **** 
 729:fltk-1.3.4-1/jpeg/jquant1.c ****   arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 730:fltk-1.3.4-1/jpeg/jquant1.c ****   for (i = 0; i < cinfo->out_color_components; i++) {
 731:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->fserrors[i] = (FSERRPTR)
 732:fltk-1.3.4-1/jpeg/jquant1.c ****       (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 733:fltk-1.3.4-1/jpeg/jquant1.c ****   }
 734:fltk-1.3.4-1/jpeg/jquant1.c **** }
 735:fltk-1.3.4-1/jpeg/jquant1.c **** 
 736:fltk-1.3.4-1/jpeg/jquant1.c **** 
 737:fltk-1.3.4-1/jpeg/jquant1.c **** /*
 738:fltk-1.3.4-1/jpeg/jquant1.c ****  * Initialize for one-pass color quantization.
 739:fltk-1.3.4-1/jpeg/jquant1.c ****  */
 740:fltk-1.3.4-1/jpeg/jquant1.c **** 
 741:fltk-1.3.4-1/jpeg/jquant1.c **** METHODDEF(void)
 742:fltk-1.3.4-1/jpeg/jquant1.c **** start_pass_1_quant (j_decompress_ptr cinfo, boolean is_pre_scan)
 743:fltk-1.3.4-1/jpeg/jquant1.c **** {
 744:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 745:fltk-1.3.4-1/jpeg/jquant1.c ****   size_t arraysize;
 746:fltk-1.3.4-1/jpeg/jquant1.c ****   int i;
 747:fltk-1.3.4-1/jpeg/jquant1.c **** 
 748:fltk-1.3.4-1/jpeg/jquant1.c ****   /* Install my colormap. */
 749:fltk-1.3.4-1/jpeg/jquant1.c ****   cinfo->colormap = cquantize->sv_colormap;
 750:fltk-1.3.4-1/jpeg/jquant1.c ****   cinfo->actual_number_of_colors = cquantize->sv_actual;
 751:fltk-1.3.4-1/jpeg/jquant1.c **** 
 752:fltk-1.3.4-1/jpeg/jquant1.c ****   /* Initialize for desired dithering mode. */
 753:fltk-1.3.4-1/jpeg/jquant1.c ****   switch (cinfo->dither_mode) {
 754:fltk-1.3.4-1/jpeg/jquant1.c ****   case JDITHER_NONE:
 755:fltk-1.3.4-1/jpeg/jquant1.c ****     if (cinfo->out_color_components == 3)
 756:fltk-1.3.4-1/jpeg/jquant1.c ****       cquantize->pub.color_quantize = color_quantize3;
 757:fltk-1.3.4-1/jpeg/jquant1.c ****     else
 758:fltk-1.3.4-1/jpeg/jquant1.c ****       cquantize->pub.color_quantize = color_quantize;
 759:fltk-1.3.4-1/jpeg/jquant1.c ****     break;
 760:fltk-1.3.4-1/jpeg/jquant1.c ****   case JDITHER_ORDERED:
 761:fltk-1.3.4-1/jpeg/jquant1.c ****     if (cinfo->out_color_components == 3)
 762:fltk-1.3.4-1/jpeg/jquant1.c ****       cquantize->pub.color_quantize = quantize3_ord_dither;
 763:fltk-1.3.4-1/jpeg/jquant1.c ****     else
 764:fltk-1.3.4-1/jpeg/jquant1.c ****       cquantize->pub.color_quantize = quantize_ord_dither;
 765:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->row_index = 0;	/* initialize state for ordered dither */
 766:fltk-1.3.4-1/jpeg/jquant1.c ****     /* If user changed to ordered dither from another mode,
 767:fltk-1.3.4-1/jpeg/jquant1.c ****      * we must recreate the color index table with padding.
 768:fltk-1.3.4-1/jpeg/jquant1.c ****      * This will cost extra space, but probably isn't very likely.
 769:fltk-1.3.4-1/jpeg/jquant1.c ****      */
 770:fltk-1.3.4-1/jpeg/jquant1.c ****     if (! cquantize->is_padded)
 771:fltk-1.3.4-1/jpeg/jquant1.c ****       create_colorindex(cinfo);
 772:fltk-1.3.4-1/jpeg/jquant1.c ****     /* Create ordered-dither tables if we didn't already. */
 773:fltk-1.3.4-1/jpeg/jquant1.c ****     if (cquantize->odither[0] == NULL)
 774:fltk-1.3.4-1/jpeg/jquant1.c ****       create_odither_tables(cinfo);
 775:fltk-1.3.4-1/jpeg/jquant1.c ****     break;
 776:fltk-1.3.4-1/jpeg/jquant1.c ****   case JDITHER_FS:
 777:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->pub.color_quantize = quantize_fs_dither;
 778:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
 779:fltk-1.3.4-1/jpeg/jquant1.c ****     /* Allocate Floyd-Steinberg workspace if didn't already. */
 780:fltk-1.3.4-1/jpeg/jquant1.c ****     if (cquantize->fserrors[0] == NULL)
 781:fltk-1.3.4-1/jpeg/jquant1.c ****       alloc_fs_workspace(cinfo);
 782:fltk-1.3.4-1/jpeg/jquant1.c ****     /* Initialize the propagated errors to zero. */
 783:fltk-1.3.4-1/jpeg/jquant1.c ****     arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 784:fltk-1.3.4-1/jpeg/jquant1.c ****     for (i = 0; i < cinfo->out_color_components; i++)
 785:fltk-1.3.4-1/jpeg/jquant1.c ****       FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 786:fltk-1.3.4-1/jpeg/jquant1.c ****     break;
 787:fltk-1.3.4-1/jpeg/jquant1.c ****   default:
 788:fltk-1.3.4-1/jpeg/jquant1.c ****     ERREXIT(cinfo, JERR_NOT_COMPILED);
 789:fltk-1.3.4-1/jpeg/jquant1.c ****     break;
 790:fltk-1.3.4-1/jpeg/jquant1.c ****   }
 791:fltk-1.3.4-1/jpeg/jquant1.c **** }
 792:fltk-1.3.4-1/jpeg/jquant1.c **** 
 793:fltk-1.3.4-1/jpeg/jquant1.c **** 
 794:fltk-1.3.4-1/jpeg/jquant1.c **** /*
 795:fltk-1.3.4-1/jpeg/jquant1.c ****  * Finish up at the end of the pass.
 796:fltk-1.3.4-1/jpeg/jquant1.c ****  */
 797:fltk-1.3.4-1/jpeg/jquant1.c **** 
 798:fltk-1.3.4-1/jpeg/jquant1.c **** METHODDEF(void)
 799:fltk-1.3.4-1/jpeg/jquant1.c **** finish_pass_1_quant (j_decompress_ptr cinfo)
 800:fltk-1.3.4-1/jpeg/jquant1.c **** {
 883              		.loc 1 800 1 is_stmt 1 view -0
 884              		.cfi_startproc
 885              		.loc 1 800 1 is_stmt 0 view .LVU284
 886 0000 F30F1EFA 		endbr64
 801:fltk-1.3.4-1/jpeg/jquant1.c ****   /* no work in 1-pass case */
 802:fltk-1.3.4-1/jpeg/jquant1.c **** }
 887              		.loc 1 802 1 is_stmt 1 view .LVU285
 888 0004 C3       		ret
 889              		.cfi_endproc
 890              	.LFE65:
 892              		.section	.text.new_color_map_1_quant,"ax",@progbits
 893              		.p2align 4
 895              	new_color_map_1_quant:
 896              	.LVL110:
 897              	.LFB66:
 803:fltk-1.3.4-1/jpeg/jquant1.c **** 
 804:fltk-1.3.4-1/jpeg/jquant1.c **** 
 805:fltk-1.3.4-1/jpeg/jquant1.c **** /*
 806:fltk-1.3.4-1/jpeg/jquant1.c ****  * Switch to a new external colormap between output passes.
 807:fltk-1.3.4-1/jpeg/jquant1.c ****  * Shouldn't get to this module!
 808:fltk-1.3.4-1/jpeg/jquant1.c ****  */
 809:fltk-1.3.4-1/jpeg/jquant1.c **** 
 810:fltk-1.3.4-1/jpeg/jquant1.c **** METHODDEF(void)
 811:fltk-1.3.4-1/jpeg/jquant1.c **** new_color_map_1_quant (j_decompress_ptr cinfo)
 812:fltk-1.3.4-1/jpeg/jquant1.c **** {
 898              		.loc 1 812 1 view -0
 899              		.cfi_startproc
 900              		.loc 1 812 1 is_stmt 0 view .LVU287
 901 0000 F30F1EFA 		endbr64
 813:fltk-1.3.4-1/jpeg/jquant1.c ****   ERREXIT(cinfo, JERR_MODE_CHANGE);
 902              		.loc 1 813 3 is_stmt 1 view .LVU288
 903 0004 488B07   		movq	(%rdi), %rax
 904 0007 C740282F 		movl	$47, 40(%rax)
 904      000000
 905 000e 488B07   		movq	(%rdi), %rax
 906 0011 FF20     		jmp	*(%rax)
 907              	.LVL111:
 908              		.loc 1 813 3 is_stmt 0 view .LVU289
 909              		.cfi_endproc
 910              	.LFE66:
 912              		.section	.text.quantize_ord_dither,"ax",@progbits
 913              		.p2align 4
 915              	quantize_ord_dither:
 916              	.LVL112:
 917              	.LFB60:
 519:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 918              		.loc 1 519 1 is_stmt 1 view -0
 919              		.cfi_startproc
 519:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 920              		.loc 1 519 1 is_stmt 0 view .LVU291
 921 0000 F30F1EFA 		endbr64
 520:fltk-1.3.4-1/jpeg/jquant1.c ****   register JSAMPROW input_ptr;
 922              		.loc 1 520 3 is_stmt 1 view .LVU292
 519:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 923              		.loc 1 519 1 is_stmt 0 view .LVU293
 924 0004 4157     		pushq	%r15
 925              		.cfi_def_cfa_offset 16
 926              		.cfi_offset 15, -16
 927 0006 4156     		pushq	%r14
 928              		.cfi_def_cfa_offset 24
 929              		.cfi_offset 14, -24
 930 0008 4155     		pushq	%r13
 931              		.cfi_def_cfa_offset 32
 932              		.cfi_offset 13, -32
 933 000a 4154     		pushq	%r12
 934              		.cfi_def_cfa_offset 40
 935              		.cfi_offset 12, -40
 936 000c 55       		pushq	%rbp
 937              		.cfi_def_cfa_offset 48
 938              		.cfi_offset 6, -48
 939 000d 53       		pushq	%rbx
 940              		.cfi_def_cfa_offset 56
 941              		.cfi_offset 3, -56
 942 000e 4883EC28 		subq	$40, %rsp
 943              		.cfi_def_cfa_offset 96
 520:fltk-1.3.4-1/jpeg/jquant1.c ****   register JSAMPROW input_ptr;
 944              		.loc 1 520 20 view .LVU294
 945 0012 488B9F90 		movq	656(%rdi), %rbx
 945      020000
 946              	.LVL113:
 521:fltk-1.3.4-1/jpeg/jquant1.c ****   register JSAMPROW output_ptr;
 947              		.loc 1 521 3 is_stmt 1 view .LVU295
 522:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPROW colorindex_ci;
 948              		.loc 1 522 3 view .LVU296
 523:fltk-1.3.4-1/jpeg/jquant1.c ****   int * dither;			/* points to active row of dither matrix */
 949              		.loc 1 523 3 view .LVU297
 524:fltk-1.3.4-1/jpeg/jquant1.c ****   int row_index, col_index;	/* current indexes into dither matrix */
 950              		.loc 1 524 3 view .LVU298
 525:fltk-1.3.4-1/jpeg/jquant1.c ****   int nc = cinfo->out_color_components;
 951              		.loc 1 525 3 view .LVU299
 526:fltk-1.3.4-1/jpeg/jquant1.c ****   int ci;
 952              		.loc 1 526 3 view .LVU300
 526:fltk-1.3.4-1/jpeg/jquant1.c ****   int ci;
 953              		.loc 1 526 7 is_stmt 0 view .LVU301
 954 0019 448BAF90 		movl	144(%rdi), %r13d
 954      000000
 955              	.LVL114:
 527:fltk-1.3.4-1/jpeg/jquant1.c ****   int row;
 956              		.loc 1 527 3 is_stmt 1 view .LVU302
 528:fltk-1.3.4-1/jpeg/jquant1.c ****   JDIMENSION col;
 957              		.loc 1 528 3 view .LVU303
 529:fltk-1.3.4-1/jpeg/jquant1.c ****   JDIMENSION width = cinfo->output_width;
 958              		.loc 1 529 3 view .LVU304
 530:fltk-1.3.4-1/jpeg/jquant1.c **** 
 959              		.loc 1 530 3 view .LVU305
 530:fltk-1.3.4-1/jpeg/jquant1.c **** 
 960              		.loc 1 530 14 is_stmt 0 view .LVU306
 961 0020 8BBF8800 		movl	136(%rdi), %edi
 961      0000
 962              	.LVL115:
 530:fltk-1.3.4-1/jpeg/jquant1.c **** 
 963              		.loc 1 530 14 view .LVU307
 964 0026 897C2408 		movl	%edi, 8(%rsp)
 965              	.LVL116:
 532:fltk-1.3.4-1/jpeg/jquant1.c ****     /* Initialize output values to 0 so can process components separately */
 966              		.loc 1 532 3 is_stmt 1 view .LVU308
 532:fltk-1.3.4-1/jpeg/jquant1.c ****     /* Initialize output values to 0 so can process components separately */
 967              		.loc 1 532 17 view .LVU309
 532:fltk-1.3.4-1/jpeg/jquant1.c ****     /* Initialize output values to 0 so can process components separately */
 968              		.loc 1 532 3 is_stmt 0 view .LVU310
 969 002a 85C9     		testl	%ecx, %ecx
 970 002c 0F8EE000 		jle	.L68
 970      0000
 971 0032 89F8     		movl	%edi, %eax
 972 0034 4989F4   		movq	%rsi, %r12
 973 0037 4889D5   		movq	%rdx, %rbp
 974 003a 48894424 		movq	%rax, 24(%rsp)
 974      18
 975 003f 8D41FF   		leal	-1(%rcx), %eax
 976 0042 488D44C2 		leaq	8(%rdx,%rax,8), %rax
 976      08
 977 0047 48894424 		movq	%rax, 16(%rsp)
 977      10
 978 004c 8D47FF   		leal	-1(%rdi), %eax
 979 004f 4883C001 		addq	$1, %rax
 980 0053 48890424 		movq	%rax, (%rsp)
 981              	.LVL117:
 982 0057 660F1F84 		.p2align 4,,10
 982      00000000 
 982      00
 983              		.p2align 3
 984              	.L71:
 534:fltk-1.3.4-1/jpeg/jquant1.c **** 	     (size_t) (width * SIZEOF(JSAMPLE)));
 985              		.loc 1 534 5 is_stmt 1 view .LVU311
 986              	.LBB29:
 987              	.LBI29:
 988              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h"
   1:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** /* Copyright (C) 2004-2020 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    <https://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifndef _BITS_STRING_FORTIFIED_H
  19:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #define _BITS_STRING_FORTIFIED_H 1
  20:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  21:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifndef _STRING_H
  22:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** # error "Never use <bits/string_fortified.h> directly; include <string.h> instead."
  23:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  24:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  25:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #if !__GNUC_PREREQ (5,0)
  26:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __warndecl (__warn_memset_zero_len,
  27:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  28:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  29:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  30:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  32:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
  33:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  34:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  35:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  36:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  37:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  38:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memmove (void *__dest, const void *__src, size_t __len))
  39:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  40:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  41:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  42:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  43:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifdef __USE_GNU
  44:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  45:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
  46:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 		size_t __len))
  47:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  48:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
  49:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  50:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  51:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  52:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  53:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** /* The first two tests here help to catch a somewhat common problem
  54:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    where the second and third parameter are transposed.  This is
  55:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    especially problematic if the intended fill value is zero.  In this
  56:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    case no work is done at all.  We detect these problems by referring
  57:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    non-existing functions.  */
  58:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  59:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memset (void *__dest, int __ch, size_t __len))
 989              		.loc 2 59 1 view .LVU312
 990              	.LBB30:
  60:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  61:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   /* GCC-5.0 and newer implements these checks in the compiler, so we don't
  62:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****      need them here.  */
  63:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #if !__GNUC_PREREQ (5,0)
  64:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   if (__builtin_constant_p (__len) && __len == 0
  65:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       && (!__builtin_constant_p (__ch) || __ch != 0))
  66:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****     {
  67:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       __warn_memset_zero_len ();
  68:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       return __dest;
  69:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****     }
  70:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  71:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 991              		.loc 2 71 3 view .LVU313
 992              		.loc 2 71 10 is_stmt 0 view .LVU314
 993 0060 488B7D00 		movq	0(%rbp), %rdi
 994 0064 488B5424 		movq	24(%rsp), %rdx
 994      18
 995 0069 31F6     		xorl	%esi, %esi
 996 006b E8000000 		call	memset@PLT
 996      00
 997              	.LVL118:
 998              		.loc 2 71 10 view .LVU315
 999              	.LBE30:
 1000              	.LBE29:
 536:fltk-1.3.4-1/jpeg/jquant1.c ****     for (ci = 0; ci < nc; ci++) {
 1001              		.loc 1 536 5 is_stmt 1 view .LVU316
 536:fltk-1.3.4-1/jpeg/jquant1.c ****     for (ci = 0; ci < nc; ci++) {
 1002              		.loc 1 536 15 is_stmt 0 view .LVU317
 1003 0070 8B434C   		movl	76(%rbx), %eax
 1004 0073 8944240C 		movl	%eax, 12(%rsp)
 1005              	.LVL119:
 537:fltk-1.3.4-1/jpeg/jquant1.c ****       input_ptr = input_buf[row] + ci;
 1006              		.loc 1 537 5 is_stmt 1 view .LVU318
 537:fltk-1.3.4-1/jpeg/jquant1.c ****       input_ptr = input_buf[row] + ci;
 1007              		.loc 1 537 18 view .LVU319
 537:fltk-1.3.4-1/jpeg/jquant1.c ****       input_ptr = input_buf[row] + ci;
 1008              		.loc 1 537 5 is_stmt 0 view .LVU320
 1009 0077 4585ED   		testl	%r13d, %r13d
 1010 007a 7E76     		jle	.L75
 541:fltk-1.3.4-1/jpeg/jquant1.c ****       col_index = 0;
 1011              		.loc 1 541 38 view .LVU321
 1012 007c 4C635C24 		movslq	12(%rsp), %r11
 1012      0C
 1013 0081 4531FF   		xorl	%r15d, %r15d
 1014 0084 4D63F5   		movslq	%r13d, %r14
 1015 0087 49C1E306 		salq	$6, %r11
 1016              	.LVL120:
 1017 008b 0F1F4400 		.p2align 4,,10
 1017      00
 1018              		.p2align 3
 1019              	.L74:
 538:fltk-1.3.4-1/jpeg/jquant1.c ****       output_ptr = output_buf[row];
 1020              		.loc 1 538 7 is_stmt 1 view .LVU322
 540:fltk-1.3.4-1/jpeg/jquant1.c ****       dither = cquantize->odither[ci][row_index];
 1021              		.loc 1 540 21 is_stmt 0 view .LVU323
 1022 0090 488B4330 		movq	48(%rbx), %rax
 539:fltk-1.3.4-1/jpeg/jquant1.c ****       colorindex_ci = cquantize->colorindex[ci];
 1023              		.loc 1 539 18 view .LVU324
 1024 0094 488B5500 		movq	0(%rbp), %rdx
 542:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1025              		.loc 1 542 17 view .LVU325
 1026 0098 31C9     		xorl	%ecx, %ecx
 538:fltk-1.3.4-1/jpeg/jquant1.c ****       output_ptr = output_buf[row];
 1027              		.loc 1 538 17 view .LVU326
 1028 009a 498B3424 		movq	(%r12), %rsi
 541:fltk-1.3.4-1/jpeg/jquant1.c ****       col_index = 0;
 1029              		.loc 1 541 34 view .LVU327
 1030 009e 4E8B4CFB 		movq	80(%rbx,%r15,8), %r9
 1030      50
 540:fltk-1.3.4-1/jpeg/jquant1.c ****       dither = cquantize->odither[ci][row_index];
 1031              		.loc 1 540 21 view .LVU328
 1032 00a3 4E8B14F8 		movq	(%rax,%r15,8), %r10
 1033 00a7 488B0424 		movq	(%rsp), %rax
 538:fltk-1.3.4-1/jpeg/jquant1.c ****       output_ptr = output_buf[row];
 1034              		.loc 1 538 17 view .LVU329
 1035 00ab 4C01FE   		addq	%r15, %rsi
 1036              	.LVL121:
 539:fltk-1.3.4-1/jpeg/jquant1.c ****       colorindex_ci = cquantize->colorindex[ci];
 1037              		.loc 1 539 7 is_stmt 1 view .LVU330
 540:fltk-1.3.4-1/jpeg/jquant1.c ****       dither = cquantize->odither[ci][row_index];
 1038              		.loc 1 540 7 view .LVU331
 541:fltk-1.3.4-1/jpeg/jquant1.c ****       col_index = 0;
 1039              		.loc 1 541 7 view .LVU332
 542:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1040              		.loc 1 542 7 view .LVU333
 544:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* Form pixel value + dither, range-limit to 0..MAXJSAMPLE,
 1041              		.loc 1 544 7 view .LVU334
 544:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* Form pixel value + dither, range-limit to 0..MAXJSAMPLE,
 1042              		.loc 1 544 25 view .LVU335
 1043 00ae 4C8D0402 		leaq	(%rdx,%rax), %r8
 544:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* Form pixel value + dither, range-limit to 0..MAXJSAMPLE,
 1044              		.loc 1 544 7 is_stmt 0 view .LVU336
 1045 00b2 8B442408 		movl	8(%rsp), %eax
 1046 00b6 85C0     		testl	%eax, %eax
 1047 00b8 742F     		je	.L77
 1048              	.LVL122:
 1049 00ba 660F1F44 		.p2align 4,,10
 1049      0000
 1050              		.p2align 3
 1051              	.L76:
 552:fltk-1.3.4-1/jpeg/jquant1.c **** 	input_ptr += nc;
 1052              		.loc 1 552 2 is_stmt 1 discriminator 3 view .LVU337
 552:fltk-1.3.4-1/jpeg/jquant1.c **** 	input_ptr += nc;
 1053              		.loc 1 552 60 is_stmt 0 discriminator 3 view .LVU338
 1054 00c0 4863C1   		movslq	%ecx, %rax
 555:fltk-1.3.4-1/jpeg/jquant1.c ****       }
 1055              		.loc 1 555 25 discriminator 3 view .LVU339
 1056 00c3 83C101   		addl	$1, %ecx
 1057              	.LVL123:
 552:fltk-1.3.4-1/jpeg/jquant1.c **** 	input_ptr += nc;
 1058              		.loc 1 552 60 discriminator 3 view .LVU340
 1059 00c6 498D3C81 		leaq	(%r9,%rax,4), %rdi
 552:fltk-1.3.4-1/jpeg/jquant1.c **** 	input_ptr += nc;
 1060              		.loc 1 552 31 discriminator 3 view .LVU341
 1061 00ca 0FB606   		movzbl	(%rsi), %eax
 555:fltk-1.3.4-1/jpeg/jquant1.c ****       }
 1062              		.loc 1 555 12 discriminator 3 view .LVU342
 1063 00cd 83E10F   		andl	$15, %ecx
 1064              	.LVL124:
 553:fltk-1.3.4-1/jpeg/jquant1.c **** 	output_ptr++;
 1065              		.loc 1 553 12 discriminator 3 view .LVU343
 1066 00d0 4C01F6   		addq	%r14, %rsi
 1067              	.LVL125:
 552:fltk-1.3.4-1/jpeg/jquant1.c **** 	input_ptr += nc;
 1068              		.loc 1 552 53 discriminator 3 view .LVU344
 1069 00d3 4203041F 		addl	(%rdi,%r11), %eax
 1070 00d7 4898     		cltq
 552:fltk-1.3.4-1/jpeg/jquant1.c **** 	input_ptr += nc;
 1071              		.loc 1 552 14 discriminator 3 view .LVU345
 1072 00d9 410FB604 		movzbl	(%r10,%rax), %eax
 1072      02
 1073 00de 0002     		addb	%al, (%rdx)
 553:fltk-1.3.4-1/jpeg/jquant1.c **** 	output_ptr++;
 1074              		.loc 1 553 2 is_stmt 1 discriminator 3 view .LVU346
 1075              	.LVL126:
 554:fltk-1.3.4-1/jpeg/jquant1.c **** 	col_index = (col_index + 1) & ODITHER_MASK;
 1076              		.loc 1 554 2 discriminator 3 view .LVU347
 554:fltk-1.3.4-1/jpeg/jquant1.c **** 	col_index = (col_index + 1) & ODITHER_MASK;
 1077              		.loc 1 554 12 is_stmt 0 discriminator 3 view .LVU348
 1078 00e0 4883C201 		addq	$1, %rdx
 1079              	.LVL127:
 555:fltk-1.3.4-1/jpeg/jquant1.c ****       }
 1080              		.loc 1 555 2 is_stmt 1 discriminator 3 view .LVU349
 544:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* Form pixel value + dither, range-limit to 0..MAXJSAMPLE,
 1081              		.loc 1 544 34 discriminator 3 view .LVU350
 544:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* Form pixel value + dither, range-limit to 0..MAXJSAMPLE,
 1082              		.loc 1 544 25 discriminator 3 view .LVU351
 544:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* Form pixel value + dither, range-limit to 0..MAXJSAMPLE,
 1083              		.loc 1 544 7 is_stmt 0 discriminator 3 view .LVU352
 1084 00e4 4C39C2   		cmpq	%r8, %rdx
 1085 00e7 75D7     		jne	.L76
 1086              	.LVL128:
 1087              	.L77:
 537:fltk-1.3.4-1/jpeg/jquant1.c ****       input_ptr = input_buf[row] + ci;
 1088              		.loc 1 537 27 is_stmt 1 view .LVU353
 537:fltk-1.3.4-1/jpeg/jquant1.c ****       input_ptr = input_buf[row] + ci;
 1089              		.loc 1 537 18 view .LVU354
 1090 00e9 4983C701 		addq	$1, %r15
 1091              	.LVL129:
 537:fltk-1.3.4-1/jpeg/jquant1.c ****       input_ptr = input_buf[row] + ci;
 1092              		.loc 1 537 5 is_stmt 0 view .LVU355
 1093 00ed 4539FD   		cmpl	%r15d, %r13d
 1094 00f0 7F9E     		jg	.L74
 1095              	.LVL130:
 1096              	.L75:
 559:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->row_index = row_index;
 1097              		.loc 1 559 5 is_stmt 1 view .LVU356
 559:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->row_index = row_index;
 1098              		.loc 1 559 28 is_stmt 0 view .LVU357
 1099 00f2 8B44240C 		movl	12(%rsp), %eax
 1100 00f6 4883C508 		addq	$8, %rbp
 1101 00fa 4983C408 		addq	$8, %r12
 1102 00fe 83C001   		addl	$1, %eax
 1103              	.LVL131:
 560:fltk-1.3.4-1/jpeg/jquant1.c ****   }
 1104              		.loc 1 560 5 is_stmt 1 view .LVU358
 559:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->row_index = row_index;
 1105              		.loc 1 559 15 is_stmt 0 view .LVU359
 1106 0101 83E00F   		andl	$15, %eax
 1107              	.LVL132:
 559:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->row_index = row_index;
 1108              		.loc 1 559 15 view .LVU360
 1109 0104 89434C   		movl	%eax, 76(%rbx)
 532:fltk-1.3.4-1/jpeg/jquant1.c ****     /* Initialize output values to 0 so can process components separately */
 1110              		.loc 1 532 33 is_stmt 1 view .LVU361
 532:fltk-1.3.4-1/jpeg/jquant1.c ****     /* Initialize output values to 0 so can process components separately */
 1111              		.loc 1 532 17 view .LVU362
 532:fltk-1.3.4-1/jpeg/jquant1.c ****     /* Initialize output values to 0 so can process components separately */
 1112              		.loc 1 532 3 is_stmt 0 view .LVU363
 1113 0107 48396C24 		cmpq	%rbp, 16(%rsp)
 1113      10
 1114 010c 0F854EFF 		jne	.L71
 1114      FFFF
 1115              	.LVL133:
 1116              	.L68:
 562:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1117              		.loc 1 562 1 view .LVU364
 1118 0112 4883C428 		addq	$40, %rsp
 1119              		.cfi_def_cfa_offset 56
 1120 0116 5B       		popq	%rbx
 1121              		.cfi_def_cfa_offset 48
 1122              	.LVL134:
 562:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1123              		.loc 1 562 1 view .LVU365
 1124 0117 5D       		popq	%rbp
 1125              		.cfi_def_cfa_offset 40
 1126 0118 415C     		popq	%r12
 1127              		.cfi_def_cfa_offset 32
 1128 011a 415D     		popq	%r13
 1129              		.cfi_def_cfa_offset 24
 1130              	.LVL135:
 562:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1131              		.loc 1 562 1 view .LVU366
 1132 011c 415E     		popq	%r14
 1133              		.cfi_def_cfa_offset 16
 1134 011e 415F     		popq	%r15
 1135              		.cfi_def_cfa_offset 8
 1136 0120 C3       		ret
 1137              		.cfi_endproc
 1138              	.LFE60:
 1140              		.section	.text.quantize_fs_dither,"ax",@progbits
 1141              		.p2align 4
 1143              	quantize_fs_dither:
 1144              	.LVL136:
 1145              	.LFB62:
 614:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 1146              		.loc 1 614 1 is_stmt 1 view -0
 1147              		.cfi_startproc
 614:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 1148              		.loc 1 614 1 is_stmt 0 view .LVU368
 1149 0000 F30F1EFA 		endbr64
 615:fltk-1.3.4-1/jpeg/jquant1.c ****   register LOCFSERROR cur;	/* current error or pixel value */
 1150              		.loc 1 615 3 is_stmt 1 view .LVU369
 614:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 1151              		.loc 1 614 1 is_stmt 0 view .LVU370
 1152 0004 4157     		pushq	%r15
 1153              		.cfi_def_cfa_offset 16
 1154              		.cfi_offset 15, -16
 1155 0006 4156     		pushq	%r14
 1156              		.cfi_def_cfa_offset 24
 1157              		.cfi_offset 14, -24
 1158 0008 4155     		pushq	%r13
 1159              		.cfi_def_cfa_offset 32
 1160              		.cfi_offset 13, -32
 1161 000a 4154     		pushq	%r12
 1162              		.cfi_def_cfa_offset 40
 1163              		.cfi_offset 12, -40
 1164 000c 55       		pushq	%rbp
 1165              		.cfi_def_cfa_offset 48
 1166              		.cfi_offset 6, -48
 1167 000d 53       		pushq	%rbx
 1168              		.cfi_def_cfa_offset 56
 1169              		.cfi_offset 3, -56
 1170 000e 4883EC78 		subq	$120, %rsp
 1171              		.cfi_def_cfa_offset 176
 615:fltk-1.3.4-1/jpeg/jquant1.c ****   register LOCFSERROR cur;	/* current error or pixel value */
 1172              		.loc 1 615 20 view .LVU371
 1173 0012 488B8790 		movq	656(%rdi), %rax
 1173      020000
 627:fltk-1.3.4-1/jpeg/jquant1.c ****   int dir;			/* 1 for left-to-right, -1 for right-to-left */
 1174              		.loc 1 627 7 view .LVU372
 1175 0019 448BB790 		movl	144(%rdi), %r14d
 1175      000000
 634:fltk-1.3.4-1/jpeg/jquant1.c ****   SHIFT_TEMPS
 1176              		.loc 1 634 12 view .LVU373
 1177 0020 4C8BBFB8 		movq	440(%rdi), %r15
 1177      010000
 615:fltk-1.3.4-1/jpeg/jquant1.c ****   register LOCFSERROR cur;	/* current error or pixel value */
 1178              		.loc 1 615 20 view .LVU374
 1179 0027 48894424 		movq	%rax, 24(%rsp)
 1179      18
 1180              	.LVL137:
 616:fltk-1.3.4-1/jpeg/jquant1.c ****   LOCFSERROR belowerr;		/* error for pixel below cur */
 1181              		.loc 1 616 3 is_stmt 1 view .LVU375
 617:fltk-1.3.4-1/jpeg/jquant1.c ****   LOCFSERROR bpreverr;		/* error for below/prev col */
 1182              		.loc 1 617 3 view .LVU376
 618:fltk-1.3.4-1/jpeg/jquant1.c ****   LOCFSERROR bnexterr;		/* error for below/next col */
 1183              		.loc 1 618 3 view .LVU377
 619:fltk-1.3.4-1/jpeg/jquant1.c ****   LOCFSERROR delta;
 1184              		.loc 1 619 3 view .LVU378
 620:fltk-1.3.4-1/jpeg/jquant1.c ****   register FSERRPTR errorptr;	/* => fserrors[] at column before current */
 1185              		.loc 1 620 3 view .LVU379
 621:fltk-1.3.4-1/jpeg/jquant1.c ****   register JSAMPROW input_ptr;
 1186              		.loc 1 621 3 view .LVU380
 622:fltk-1.3.4-1/jpeg/jquant1.c ****   register JSAMPROW output_ptr;
 1187              		.loc 1 622 3 view .LVU381
 623:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPROW colorindex_ci;
 1188              		.loc 1 623 3 view .LVU382
 624:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPROW colormap_ci;
 1189              		.loc 1 624 3 view .LVU383
 625:fltk-1.3.4-1/jpeg/jquant1.c ****   int pixcode;
 1190              		.loc 1 625 3 view .LVU384
 626:fltk-1.3.4-1/jpeg/jquant1.c ****   int nc = cinfo->out_color_components;
 1191              		.loc 1 626 3 view .LVU385
 627:fltk-1.3.4-1/jpeg/jquant1.c ****   int dir;			/* 1 for left-to-right, -1 for right-to-left */
 1192              		.loc 1 627 3 view .LVU386
 633:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPLE *range_limit = cinfo->sample_range_limit;
 1193              		.loc 1 633 14 is_stmt 0 view .LVU387
 1194 002c 8B878800 		movl	136(%rdi), %eax
 1194      0000
 1195              	.LVL138:
 627:fltk-1.3.4-1/jpeg/jquant1.c ****   int dir;			/* 1 for left-to-right, -1 for right-to-left */
 1196              		.loc 1 627 7 view .LVU388
 1197 0032 44897424 		movl	%r14d, 56(%rsp)
 1197      38
 1198              	.LVL139:
 628:fltk-1.3.4-1/jpeg/jquant1.c ****   int dirnc;			/* dir * nc */
 1199              		.loc 1 628 3 is_stmt 1 view .LVU389
 629:fltk-1.3.4-1/jpeg/jquant1.c ****   int ci;
 1200              		.loc 1 629 3 view .LVU390
 630:fltk-1.3.4-1/jpeg/jquant1.c ****   int row;
 1201              		.loc 1 630 3 view .LVU391
 631:fltk-1.3.4-1/jpeg/jquant1.c ****   JDIMENSION col;
 1202              		.loc 1 631 3 view .LVU392
 632:fltk-1.3.4-1/jpeg/jquant1.c ****   JDIMENSION width = cinfo->output_width;
 1203              		.loc 1 632 3 view .LVU393
 633:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPLE *range_limit = cinfo->sample_range_limit;
 1204              		.loc 1 633 3 view .LVU394
 633:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPLE *range_limit = cinfo->sample_range_limit;
 1205              		.loc 1 633 14 is_stmt 0 view .LVU395
 1206 0037 8944243C 		movl	%eax, 60(%rsp)
 1207              	.LVL140:
 634:fltk-1.3.4-1/jpeg/jquant1.c ****   SHIFT_TEMPS
 1208              		.loc 1 634 3 is_stmt 1 view .LVU396
 637:fltk-1.3.4-1/jpeg/jquant1.c ****     /* Initialize output values to 0 so can process components separately */
 1209              		.loc 1 637 3 view .LVU397
 637:fltk-1.3.4-1/jpeg/jquant1.c ****     /* Initialize output values to 0 so can process components separately */
 1210              		.loc 1 637 17 view .LVU398
 637:fltk-1.3.4-1/jpeg/jquant1.c ****     /* Initialize output values to 0 so can process components separately */
 1211              		.loc 1 637 3 is_stmt 0 view .LVU399
 1212 003b 85C9     		testl	%ecx, %ecx
 1213 003d 0F8EC901 		jle	.L83
 1213      0000
 646:fltk-1.3.4-1/jpeg/jquant1.c **** 	output_ptr += width-1;
 1214              		.loc 1 646 21 view .LVU400
 1215 0043 8D78FF   		leal	-1(%rax), %edi
 1216              	.LVL141:
 646:fltk-1.3.4-1/jpeg/jquant1.c **** 	output_ptr += width-1;
 1217              		.loc 1 646 25 view .LVU401
 1218 0046 4489F3   		movl	%r14d, %ebx
 1219 0049 48895424 		movq	%rdx, 32(%rsp)
 1219      20
 1220 004e 0FAFDF   		imull	%edi, %ebx
 646:fltk-1.3.4-1/jpeg/jquant1.c **** 	output_ptr += width-1;
 1221              		.loc 1 646 21 view .LVU402
 1222 0051 897C245C 		movl	%edi, 92(%rsp)
 1223 0055 48897424 		movq	%rsi, 40(%rsp)
 1223      28
 646:fltk-1.3.4-1/jpeg/jquant1.c **** 	output_ptr += width-1;
 1224              		.loc 1 646 25 view .LVU403
 1225 005a 48895C24 		movq	%rbx, 72(%rsp)
 1225      48
 650:fltk-1.3.4-1/jpeg/jquant1.c ****       } else {
 1226              		.loc 1 650 45 view .LVU404
 1227 005f 89C3     		movl	%eax, %ebx
 1228 0061 8D4001   		leal	1(%rax), %eax
 1229              	.LVL142:
 650:fltk-1.3.4-1/jpeg/jquant1.c ****       } else {
 1230              		.loc 1 650 37 view .LVU405
 1231 0064 4801C0   		addq	%rax, %rax
 1232 0067 48894424 		movq	%rax, 80(%rsp)
 1232      50
 1233 006c 89D8     		movl	%ebx, %eax
 1234 006e 48894424 		movq	%rax, 104(%rsp)
 1234      68
 1235 0073 8D41FF   		leal	-1(%rcx), %eax
 1236 0076 488D44C2 		leaq	8(%rdx,%rax,8), %rax
 1236      08
 1237 007b 48894424 		movq	%rax, 96(%rsp)
 1237      60
 1238              	.LVL143:
 1239              		.p2align 4,,10
 1240              		.p2align 3
 1241              	.L86:
 639:fltk-1.3.4-1/jpeg/jquant1.c **** 	     (size_t) (width * SIZEOF(JSAMPLE)));
 1242              		.loc 1 639 5 is_stmt 1 view .LVU406
 1243              	.LBB31:
 1244              	.LBI31:
  59:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
 1245              		.loc 2 59 1 view .LVU407
 1246              	.LBB32:
 1247              		.loc 2 71 3 view .LVU408
 1248              		.loc 2 71 10 is_stmt 0 view .LVU409
 1249 0080 488B4424 		movq	32(%rsp), %rax
 1249      20
 1250 0085 488B5424 		movq	104(%rsp), %rdx
 1250      68
 1251 008a 31F6     		xorl	%esi, %esi
 1252 008c 488B38   		movq	(%rax), %rdi
 1253 008f E8000000 		call	memset@PLT
 1253      00
 1254              	.LVL144:
 1255              		.loc 2 71 10 view .LVU410
 1256              	.LBE32:
 1257              	.LBE31:
 641:fltk-1.3.4-1/jpeg/jquant1.c ****       input_ptr = input_buf[row] + ci;
 1258              		.loc 1 641 5 is_stmt 1 view .LVU411
 641:fltk-1.3.4-1/jpeg/jquant1.c ****       input_ptr = input_buf[row] + ci;
 1259              		.loc 1 641 18 view .LVU412
 649:fltk-1.3.4-1/jpeg/jquant1.c **** 	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 1260              		.loc 1 649 8 is_stmt 0 view .LVU413
 1261 0094 8B442438 		movl	56(%rsp), %eax
 647:fltk-1.3.4-1/jpeg/jquant1.c **** 	dir = -1;
 1262              		.loc 1 647 21 view .LVU414
 1263 0098 8B5C245C 		movl	92(%rsp), %ebx
 641:fltk-1.3.4-1/jpeg/jquant1.c ****       input_ptr = input_buf[row] + ci;
 1264              		.loc 1 641 5 view .LVU415
 1265 009c 48C74424 		movq	$0, 8(%rsp)
 1265      08000000 
 1265      00
 649:fltk-1.3.4-1/jpeg/jquant1.c **** 	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 1266              		.loc 1 649 8 view .LVU416
 1267 00a5 89C6     		movl	%eax, %esi
 647:fltk-1.3.4-1/jpeg/jquant1.c **** 	dir = -1;
 1268              		.loc 1 647 21 view .LVU417
 1269 00a7 48895C24 		movq	%rbx, 64(%rsp)
 1269      40
 649:fltk-1.3.4-1/jpeg/jquant1.c **** 	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 1270              		.loc 1 649 8 view .LVU418
 1271 00ac F7DE     		negl	%esi
 1272 00ae 89742458 		movl	%esi, 88(%rsp)
 1273 00b2 488D7301 		leaq	1(%rbx), %rsi
 1274 00b6 48897424 		movq	%rsi, 48(%rsp)
 1274      30
 641:fltk-1.3.4-1/jpeg/jquant1.c ****       input_ptr = input_buf[row] + ci;
 1275              		.loc 1 641 5 view .LVU419
 1276 00bb 85C0     		testl	%eax, %eax
 1277 00bd 0F8E1501 		jle	.L91
 1277      0000
 1278              	.LVL145:
 1279              		.p2align 4,,10
 1280 00c3 0F1F4400 		.p2align 3
 1280      00
 1281              	.L85:
 642:fltk-1.3.4-1/jpeg/jquant1.c ****       output_ptr = output_buf[row];
 1282              		.loc 1 642 7 is_stmt 1 view .LVU420
 642:fltk-1.3.4-1/jpeg/jquant1.c ****       output_ptr = output_buf[row];
 1283              		.loc 1 642 17 is_stmt 0 view .LVU421
 1284 00c8 488B7424 		movq	40(%rsp), %rsi
 1284      28
 1285 00cd 488B4424 		movq	8(%rsp), %rax
 1285      08
 1286 00d2 488B5C24 		movq	24(%rsp), %rbx
 1286      18
 1287 00d7 4C8B0E   		movq	(%rsi), %r9
 643:fltk-1.3.4-1/jpeg/jquant1.c ****       if (cquantize->on_odd_row) {
 1288              		.loc 1 643 18 view .LVU422
 1289 00da 488B7424 		movq	32(%rsp), %rsi
 1289      20
 644:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* work right to left in this row */
 1290              		.loc 1 644 10 view .LVU423
 1291 00df 8B939000 		movl	144(%rbx), %edx
 1291      0000
 642:fltk-1.3.4-1/jpeg/jquant1.c ****       output_ptr = output_buf[row];
 1292              		.loc 1 642 17 view .LVU424
 1293 00e5 4901C1   		addq	%rax, %r9
 1294              	.LVL146:
 643:fltk-1.3.4-1/jpeg/jquant1.c ****       if (cquantize->on_odd_row) {
 1295              		.loc 1 643 7 is_stmt 1 view .LVU425
 1296 00e8 488B44C3 		movq	112(%rbx,%rax,8), %rax
 1296      70
 643:fltk-1.3.4-1/jpeg/jquant1.c ****       if (cquantize->on_odd_row) {
 1297              		.loc 1 643 18 is_stmt 0 view .LVU426
 1298 00ed 488B36   		movq	(%rsi), %rsi
 1299              	.LVL147:
 644:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* work right to left in this row */
 1300              		.loc 1 644 7 is_stmt 1 view .LVU427
 1301 00f0 48894424 		movq	%rax, 16(%rsp)
 1301      10
 644:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* work right to left in this row */
 1302              		.loc 1 644 10 is_stmt 0 view .LVU428
 1303 00f5 85D2     		testl	%edx, %edx
 1304 00f7 0F842301 		je	.L93
 1304      0000
 646:fltk-1.3.4-1/jpeg/jquant1.c **** 	output_ptr += width-1;
 1305              		.loc 1 646 2 is_stmt 1 view .LVU429
 650:fltk-1.3.4-1/jpeg/jquant1.c ****       } else {
 1306              		.loc 1 650 11 is_stmt 0 view .LVU430
 1307 00fd 488B5C24 		movq	80(%rsp), %rbx
 1307      50
 649:fltk-1.3.4-1/jpeg/jquant1.c **** 	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 1308              		.loc 1 649 8 view .LVU431
 1309 0102 4C636424 		movslq	88(%rsp), %r12
 1309      58
 648:fltk-1.3.4-1/jpeg/jquant1.c **** 	dirnc = -nc;
 1310              		.loc 1 648 6 view .LVU432
 1311 0107 48C7C5FF 		movq	$-1, %rbp
 1311      FFFFFF
 646:fltk-1.3.4-1/jpeg/jquant1.c **** 	output_ptr += width-1;
 1312              		.loc 1 646 12 view .LVU433
 1313 010e 4C034C24 		addq	72(%rsp), %r9
 1313      48
 1314              	.LVL148:
 647:fltk-1.3.4-1/jpeg/jquant1.c **** 	dir = -1;
 1315              		.loc 1 647 2 is_stmt 1 view .LVU434
 647:fltk-1.3.4-1/jpeg/jquant1.c **** 	dir = -1;
 1316              		.loc 1 647 13 is_stmt 0 view .LVU435
 1317 0113 48037424 		addq	64(%rsp), %rsi
 1317      40
 1318              	.LVL149:
 648:fltk-1.3.4-1/jpeg/jquant1.c **** 	dirnc = -nc;
 1319              		.loc 1 648 2 is_stmt 1 view .LVU436
 649:fltk-1.3.4-1/jpeg/jquant1.c **** 	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 1320              		.loc 1 649 2 view .LVU437
 650:fltk-1.3.4-1/jpeg/jquant1.c ****       } else {
 1321              		.loc 1 650 2 view .LVU438
 650:fltk-1.3.4-1/jpeg/jquant1.c ****       } else {
 1322              		.loc 1 650 11 is_stmt 0 view .LVU439
 1323 0118 4801D8   		addq	%rbx, %rax
 1324 011b 48894424 		movq	%rax, 16(%rsp)
 1324      10
 1325              	.LVL150:
 1326              	.L88:
 657:fltk-1.3.4-1/jpeg/jquant1.c ****       colormap_ci = cquantize->sv_colormap[ci];
 1327              		.loc 1 657 7 is_stmt 1 view .LVU440
 657:fltk-1.3.4-1/jpeg/jquant1.c ****       colormap_ci = cquantize->sv_colormap[ci];
 1328              		.loc 1 657 21 is_stmt 0 view .LVU441
 1329 0120 488B5C24 		movq	24(%rsp), %rbx
 1329      18
 1330 0125 488B4C24 		movq	8(%rsp), %rcx
 1330      08
 664:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* cur holds the error propagated from the previous pixel on the
 1331              		.loc 1 664 7 view .LVU442
 1332 012a 448B5424 		movl	60(%rsp), %r10d
 1332      3C
 657:fltk-1.3.4-1/jpeg/jquant1.c ****       colormap_ci = cquantize->sv_colormap[ci];
 1333              		.loc 1 657 21 view .LVU443
 1334 012f 488B4330 		movq	48(%rbx), %rax
 1335 0133 4C8B2CC8 		movq	(%rax,%rcx,8), %r13
 1336              	.LVL151:
 658:fltk-1.3.4-1/jpeg/jquant1.c ****       /* Preset error values: no error propagated to first pixel from left */
 1337              		.loc 1 658 7 is_stmt 1 view .LVU444
 658:fltk-1.3.4-1/jpeg/jquant1.c ****       /* Preset error values: no error propagated to first pixel from left */
 1338              		.loc 1 658 19 is_stmt 0 view .LVU445
 1339 0137 488B4320 		movq	32(%rbx), %rax
 1340 013b 4C8B34C8 		movq	(%rax,%rcx,8), %r14
 1341              	.LVL152:
 660:fltk-1.3.4-1/jpeg/jquant1.c ****       /* and no error propagated to row below yet */
 1342              		.loc 1 660 7 is_stmt 1 view .LVU446
 662:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1343              		.loc 1 662 7 view .LVU447
 664:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* cur holds the error propagated from the previous pixel on the
 1344              		.loc 1 664 7 view .LVU448
 664:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* cur holds the error propagated from the previous pixel on the
 1345              		.loc 1 664 25 view .LVU449
 664:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* cur holds the error propagated from the previous pixel on the
 1346              		.loc 1 664 7 is_stmt 0 view .LVU450
 1347 013f 4585D2   		testl	%r10d, %r10d
 1348 0142 0F84E800 		je	.L94
 1348      0000
 664:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* cur holds the error propagated from the previous pixel on the
 1349              		.loc 1 664 7 view .LVU451
 1350 0148 4C8B4424 		movq	16(%rsp), %r8
 1350      10
 673:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
 1351              		.loc 1 673 8 view .LVU452
 1352 014d 4C8D5C2D 		leaq	(%rbp,%rbp), %r11
 1352      00
 662:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1353              		.loc 1 662 27 view .LVU453
 1354 0152 31C9     		xorl	%ecx, %ecx
 662:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1355              		.loc 1 662 16 view .LVU454
 1356 0154 31FF     		xorl	%edi, %edi
 660:fltk-1.3.4-1/jpeg/jquant1.c ****       /* and no error propagated to row below yet */
 1357              		.loc 1 660 11 view .LVU455
 1358 0156 31C0     		xorl	%eax, %eax
 1359              	.LVL153:
 1360 0158 0F1F8400 		.p2align 4,,10
 1360      00000000 
 1361              		.p2align 3
 1362              	.L90:
 673:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
 1363              		.loc 1 673 2 is_stmt 1 discriminator 3 view .LVU456
 673:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
 1364              		.loc 1 673 8 is_stmt 0 discriminator 3 view .LVU457
 1365 0160 430FBF14 		movswl	(%r8,%r11), %edx
 1365      18
 1366 0165 89FB     		movl	%edi, %ebx
 1367 0167 8D441008 		leal	8(%rax,%rdx), %eax
 1368              	.LVL154:
 673:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
 1369              		.loc 1 673 6 discriminator 3 view .LVU458
 1370 016b C1F804   		sarl	$4, %eax
 1371 016e 89C2     		movl	%eax, %edx
 1372              	.LVL155:
 678:fltk-1.3.4-1/jpeg/jquant1.c **** 	cur = GETJSAMPLE(range_limit[cur]);
 1373              		.loc 1 678 2 is_stmt 1 discriminator 3 view .LVU459
 679:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* Select output value, accumulate into output code for this pixel */
 1374              		.loc 1 679 2 discriminator 3 view .LVU460
 678:fltk-1.3.4-1/jpeg/jquant1.c **** 	cur = GETJSAMPLE(range_limit[cur]);
 1375              		.loc 1 678 9 is_stmt 0 discriminator 3 view .LVU461
 1376 0170 410FB601 		movzbl	(%r9), %eax
 1377              	.LVL156:
 703:fltk-1.3.4-1/jpeg/jquant1.c **** 	output_ptr += dir;	/* advance output ptr to next column */
 1378              		.loc 1 703 12 discriminator 3 view .LVU462
 1379 0174 4D01E1   		addq	%r12, %r9
 1380              	.LVL157:
 678:fltk-1.3.4-1/jpeg/jquant1.c **** 	cur = GETJSAMPLE(range_limit[cur]);
 1381              		.loc 1 678 6 discriminator 3 view .LVU463
 1382 0177 01D0     		addl	%edx, %eax
 1383              	.LVL158:
 679:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* Select output value, accumulate into output code for this pixel */
 1384              		.loc 1 679 8 discriminator 3 view .LVU464
 1385 0179 4898     		cltq
 679:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* Select output value, accumulate into output code for this pixel */
 1386              		.loc 1 679 8 discriminator 3 view .LVU465
 1387 017b 410FB614 		movzbl	(%r15,%rax), %edx
 1387      07
 1388              	.LVL159:
 681:fltk-1.3.4-1/jpeg/jquant1.c **** 	*output_ptr += (JSAMPLE) pixcode;
 1389              		.loc 1 681 2 is_stmt 1 discriminator 3 view .LVU466
 681:fltk-1.3.4-1/jpeg/jquant1.c **** 	*output_ptr += (JSAMPLE) pixcode;
 1390              		.loc 1 681 12 is_stmt 0 discriminator 3 view .LVU467
 1391 0180 410FB644 		movzbl	0(%r13,%rdx), %eax
 1391      1500
 1392              	.LVL160:
 682:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* Compute actual representation error at this pixel */
 1393              		.loc 1 682 2 is_stmt 1 discriminator 3 view .LVU468
 682:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* Compute actual representation error at this pixel */
 1394              		.loc 1 682 14 is_stmt 0 discriminator 3 view .LVU469
 1395 0186 0006     		addb	%al, (%rsi)
 686:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* Compute error fractions to be propagated to adjacent pixels.
 1396              		.loc 1 686 2 is_stmt 1 discriminator 3 view .LVU470
 686:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* Compute error fractions to be propagated to adjacent pixels.
 1397              		.loc 1 686 6 is_stmt 0 discriminator 3 view .LVU471
 1398 0188 89D7     		movl	%edx, %edi
 1399              	.LVL161:
 704:fltk-1.3.4-1/jpeg/jquant1.c **** 	errorptr += dir;	/* advance errorptr to current column */
 1400              		.loc 1 704 13 discriminator 3 view .LVU472
 1401 018a 4801EE   		addq	%rbp, %rsi
 1402              	.LVL162:
 686:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* Compute error fractions to be propagated to adjacent pixels.
 1403              		.loc 1 686 9 discriminator 3 view .LVU473
 1404 018d 410FB604 		movzbl	(%r14,%rax), %eax
 1404      06
 1405              	.LVL163:
 686:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* Compute error fractions to be propagated to adjacent pixels.
 1406              		.loc 1 686 6 discriminator 3 view .LVU474
 1407 0192 29C7     		subl	%eax, %edi
 1408              	.LVL164:
 691:fltk-1.3.4-1/jpeg/jquant1.c **** 	delta = cur * 2;
 1409              		.loc 1 691 2 is_stmt 1 discriminator 3 view .LVU475
 692:fltk-1.3.4-1/jpeg/jquant1.c **** 	cur += delta;		/* form error * 3 */
 1410              		.loc 1 692 2 discriminator 3 view .LVU476
 692:fltk-1.3.4-1/jpeg/jquant1.c **** 	cur += delta;		/* form error * 3 */
 1411              		.loc 1 692 8 is_stmt 0 discriminator 3 view .LVU477
 1412 0194 8D043F   		leal	(%rdi,%rdi), %eax
 1413              	.LVL165:
 693:fltk-1.3.4-1/jpeg/jquant1.c **** 	errorptr[0] = (FSERROR) (bpreverr + cur);
 1414              		.loc 1 693 2 is_stmt 1 discriminator 3 view .LVU478
 693:fltk-1.3.4-1/jpeg/jquant1.c **** 	errorptr[0] = (FSERROR) (bpreverr + cur);
 1415              		.loc 1 693 6 is_stmt 0 discriminator 3 view .LVU479
 1416 0197 8D1407   		leal	(%rdi,%rax), %edx
 1417              	.LVL166:
 694:fltk-1.3.4-1/jpeg/jquant1.c **** 	cur += delta;		/* form error * 5 */
 1418              		.loc 1 694 2 is_stmt 1 discriminator 3 view .LVU480
 694:fltk-1.3.4-1/jpeg/jquant1.c **** 	cur += delta;		/* form error * 5 */
 1419              		.loc 1 694 36 is_stmt 0 discriminator 3 view .LVU481
 1420 019a 01D1     		addl	%edx, %ecx
 1421              	.LVL167:
 695:fltk-1.3.4-1/jpeg/jquant1.c **** 	bpreverr = belowerr + cur;
 1422              		.loc 1 695 6 discriminator 3 view .LVU482
 1423 019c 01C2     		addl	%eax, %edx
 1424              	.LVL168:
 694:fltk-1.3.4-1/jpeg/jquant1.c **** 	cur += delta;		/* form error * 5 */
 1425              		.loc 1 694 36 discriminator 3 view .LVU483
 1426 019e 66418908 		movw	%cx, (%r8)
 695:fltk-1.3.4-1/jpeg/jquant1.c **** 	bpreverr = belowerr + cur;
 1427              		.loc 1 695 2 is_stmt 1 discriminator 3 view .LVU484
 1428              	.LVL169:
 696:fltk-1.3.4-1/jpeg/jquant1.c **** 	belowerr = bnexterr;
 1429              		.loc 1 696 2 discriminator 3 view .LVU485
 698:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* At this point cur contains the 7/16 error value to be propagated
 1430              		.loc 1 698 6 is_stmt 0 discriminator 3 view .LVU486
 1431 01a2 01D0     		addl	%edx, %eax
 1432              	.LVL170:
 696:fltk-1.3.4-1/jpeg/jquant1.c **** 	belowerr = bnexterr;
 1433              		.loc 1 696 11 discriminator 3 view .LVU487
 1434 01a4 8D0C1A   		leal	(%rdx,%rbx), %ecx
 1435              	.LVL171:
 697:fltk-1.3.4-1/jpeg/jquant1.c **** 	cur += delta;		/* form error * 7 */
 1436              		.loc 1 697 2 is_stmt 1 discriminator 3 view .LVU488
 698:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* At this point cur contains the 7/16 error value to be propagated
 1437              		.loc 1 698 2 discriminator 3 view .LVU489
 703:fltk-1.3.4-1/jpeg/jquant1.c **** 	output_ptr += dir;	/* advance output ptr to next column */
 1438              		.loc 1 703 2 discriminator 3 view .LVU490
 704:fltk-1.3.4-1/jpeg/jquant1.c **** 	errorptr += dir;	/* advance errorptr to current column */
 1439              		.loc 1 704 2 discriminator 3 view .LVU491
 705:fltk-1.3.4-1/jpeg/jquant1.c ****       }
 1440              		.loc 1 705 2 discriminator 3 view .LVU492
 664:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* cur holds the error propagated from the previous pixel on the
 1441              		.loc 1 664 34 discriminator 3 view .LVU493
 664:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* cur holds the error propagated from the previous pixel on the
 1442              		.loc 1 664 25 discriminator 3 view .LVU494
 1443 01a7 4D01D8   		addq	%r11, %r8
 1444              	.LVL172:
 664:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* cur holds the error propagated from the previous pixel on the
 1445              		.loc 1 664 7 is_stmt 0 discriminator 3 view .LVU495
 1446 01aa 4183EA01 		subl	$1, %r10d
 1447              	.LVL173:
 664:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* cur holds the error propagated from the previous pixel on the
 1448              		.loc 1 664 7 discriminator 3 view .LVU496
 1449 01ae 75B0     		jne	.L90
 1450 01b0 4C0FAF5C 		imulq	48(%rsp), %r11
 1450      2430
 1451 01b6 4C015C24 		addq	%r11, 16(%rsp)
 1451      10
 1452              	.LVL174:
 1453              	.L89:
 711:fltk-1.3.4-1/jpeg/jquant1.c ****     }
 1454              		.loc 1 711 7 is_stmt 1 discriminator 2 view .LVU497
 711:fltk-1.3.4-1/jpeg/jquant1.c ****     }
 1455              		.loc 1 711 19 is_stmt 0 discriminator 2 view .LVU498
 1456 01bb 488B4424 		movq	16(%rsp), %rax
 1456      10
 1457 01c0 48834424 		addq	$1, 8(%rsp)
 1457      0801
 1458              	.LVL175:
 711:fltk-1.3.4-1/jpeg/jquant1.c ****     }
 1459              		.loc 1 711 19 discriminator 2 view .LVU499
 1460 01c6 668908   		movw	%cx, (%rax)
 641:fltk-1.3.4-1/jpeg/jquant1.c ****       input_ptr = input_buf[row] + ci;
 1461              		.loc 1 641 27 is_stmt 1 discriminator 2 view .LVU500
 641:fltk-1.3.4-1/jpeg/jquant1.c ****       input_ptr = input_buf[row] + ci;
 1462              		.loc 1 641 18 discriminator 2 view .LVU501
 1463 01c9 488B4424 		movq	8(%rsp), %rax
 1463      08
 641:fltk-1.3.4-1/jpeg/jquant1.c ****       input_ptr = input_buf[row] + ci;
 1464              		.loc 1 641 5 is_stmt 0 discriminator 2 view .LVU502
 1465 01ce 39442438 		cmpl	%eax, 56(%rsp)
 1466 01d2 0F8FF0FE 		jg	.L85
 1466      FFFF
 1467              	.LVL176:
 1468              	.L91:
 713:fltk-1.3.4-1/jpeg/jquant1.c ****   }
 1469              		.loc 1 713 5 is_stmt 1 view .LVU503
 713:fltk-1.3.4-1/jpeg/jquant1.c ****   }
 1470              		.loc 1 713 60 is_stmt 0 view .LVU504
 1471 01d8 488B7424 		movq	24(%rsp), %rsi
 1471      18
 1472 01dd 31C0     		xorl	%eax, %eax
 1473 01df 8B8E9000 		movl	144(%rsi), %ecx
 1473      0000
 1474 01e5 85C9     		testl	%ecx, %ecx
 1475 01e7 0F94C0   		sete	%al
 1476 01ea 48834424 		addq	$8, 32(%rsp)
 1476      2008
 713:fltk-1.3.4-1/jpeg/jquant1.c ****   }
 1477              		.loc 1 713 27 view .LVU505
 1478 01f0 89869000 		movl	%eax, 144(%rsi)
 1478      0000
 637:fltk-1.3.4-1/jpeg/jquant1.c ****     /* Initialize output values to 0 so can process components separately */
 1479              		.loc 1 637 33 is_stmt 1 view .LVU506
 637:fltk-1.3.4-1/jpeg/jquant1.c ****     /* Initialize output values to 0 so can process components separately */
 1480              		.loc 1 637 17 view .LVU507
 1481 01f6 488B4424 		movq	32(%rsp), %rax
 1481      20
 1482 01fb 48834424 		addq	$8, 40(%rsp)
 1482      2808
 637:fltk-1.3.4-1/jpeg/jquant1.c ****     /* Initialize output values to 0 so can process components separately */
 1483              		.loc 1 637 3 is_stmt 0 view .LVU508
 1484 0201 48394424 		cmpq	%rax, 96(%rsp)
 1484      60
 1485 0206 0F8574FE 		jne	.L86
 1485      FFFF
 1486              	.L83:
 715:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1487              		.loc 1 715 1 view .LVU509
 1488 020c 4883C478 		addq	$120, %rsp
 1489              		.cfi_remember_state
 1490              		.cfi_def_cfa_offset 56
 1491 0210 5B       		popq	%rbx
 1492              		.cfi_def_cfa_offset 48
 1493 0211 5D       		popq	%rbp
 1494              		.cfi_def_cfa_offset 40
 1495 0212 415C     		popq	%r12
 1496              		.cfi_def_cfa_offset 32
 1497 0214 415D     		popq	%r13
 1498              		.cfi_def_cfa_offset 24
 1499 0216 415E     		popq	%r14
 1500              		.cfi_def_cfa_offset 16
 1501 0218 415F     		popq	%r15
 1502              		.cfi_def_cfa_offset 8
 1503              	.LVL177:
 715:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1504              		.loc 1 715 1 view .LVU510
 1505 021a C3       		ret
 1506              	.LVL178:
 1507 021b 0F1F4400 		.p2align 4,,10
 1507      00
 1508              		.p2align 3
 1509              	.L93:
 1510              		.cfi_restore_state
 715:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1511              		.loc 1 715 1 view .LVU511
 1512 0220 4C636424 		movslq	56(%rsp), %r12
 1512      38
 653:fltk-1.3.4-1/jpeg/jquant1.c **** 	dirnc = nc;
 1513              		.loc 1 653 6 view .LVU512
 1514 0225 BD010000 		movl	$1, %ebp
 1514      00
 1515 022a E9F1FEFF 		jmp	.L88
 1515      FF
 1516              	.LVL179:
 1517 022f 90       		.p2align 4,,10
 1518              		.p2align 3
 1519              	.L94:
 664:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* cur holds the error propagated from the previous pixel on the
 1520              		.loc 1 664 7 view .LVU513
 1521 0230 31C9     		xorl	%ecx, %ecx
 1522 0232 EB87     		jmp	.L89
 1523              		.cfi_endproc
 1524              	.LFE62:
 1526              		.section	.text.start_pass_1_quant,"ax",@progbits
 1527              		.p2align 4
 1529              	start_pass_1_quant:
 1530              	.LVL180:
 1531              	.LFB64:
 743:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 1532              		.loc 1 743 1 is_stmt 1 view -0
 1533              		.cfi_startproc
 743:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 1534              		.loc 1 743 1 is_stmt 0 view .LVU515
 1535 0000 F30F1EFA 		endbr64
 744:fltk-1.3.4-1/jpeg/jquant1.c ****   size_t arraysize;
 1536              		.loc 1 744 3 is_stmt 1 view .LVU516
 743:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 1537              		.loc 1 743 1 is_stmt 0 view .LVU517
 1538 0004 4156     		pushq	%r14
 1539              		.cfi_def_cfa_offset 16
 1540              		.cfi_offset 14, -16
 1541 0006 4155     		pushq	%r13
 1542              		.cfi_def_cfa_offset 24
 1543              		.cfi_offset 13, -24
 1544 0008 4154     		pushq	%r12
 1545              		.cfi_def_cfa_offset 32
 1546              		.cfi_offset 12, -32
 1547 000a 55       		pushq	%rbp
 1548              		.cfi_def_cfa_offset 40
 1549              		.cfi_offset 6, -40
 1550 000b 4889FD   		movq	%rdi, %rbp
 1551 000e 53       		pushq	%rbx
 1552              		.cfi_def_cfa_offset 48
 1553              		.cfi_offset 3, -48
 744:fltk-1.3.4-1/jpeg/jquant1.c ****   size_t arraysize;
 1554              		.loc 1 744 20 view .LVU518
 1555 000f 488B9F90 		movq	656(%rdi), %rbx
 1555      020000
 1556              	.LVL181:
 745:fltk-1.3.4-1/jpeg/jquant1.c ****   int i;
 1557              		.loc 1 745 3 is_stmt 1 view .LVU519
 746:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1558              		.loc 1 746 3 view .LVU520
 749:fltk-1.3.4-1/jpeg/jquant1.c ****   cinfo->actual_number_of_colors = cquantize->sv_actual;
 1559              		.loc 1 749 3 view .LVU521
 749:fltk-1.3.4-1/jpeg/jquant1.c ****   cinfo->actual_number_of_colors = cquantize->sv_actual;
 1560              		.loc 1 749 30 is_stmt 0 view .LVU522
 1561 0016 488B4320 		movq	32(%rbx), %rax
 749:fltk-1.3.4-1/jpeg/jquant1.c ****   cinfo->actual_number_of_colors = cquantize->sv_actual;
 1562              		.loc 1 749 19 view .LVU523
 1563 001a 488987A0 		movq	%rax, 160(%rdi)
 1563      000000
 750:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1564              		.loc 1 750 3 is_stmt 1 view .LVU524
 750:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1565              		.loc 1 750 45 is_stmt 0 view .LVU525
 1566 0021 8B4328   		movl	40(%rbx), %eax
 750:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1567              		.loc 1 750 34 view .LVU526
 1568 0024 89879C00 		movl	%eax, 156(%rdi)
 1568      0000
 753:fltk-1.3.4-1/jpeg/jquant1.c ****   case JDITHER_NONE:
 1569              		.loc 1 753 3 is_stmt 1 view .LVU527
 753:fltk-1.3.4-1/jpeg/jquant1.c ****   case JDITHER_NONE:
 1570              		.loc 1 753 16 is_stmt 0 view .LVU528
 1571 002a 8B4770   		movl	112(%rdi), %eax
 753:fltk-1.3.4-1/jpeg/jquant1.c ****   case JDITHER_NONE:
 1572              		.loc 1 753 3 view .LVU529
 1573 002d 83F801   		cmpl	$1, %eax
 1574 0030 742E     		je	.L102
 1575 0032 83F802   		cmpl	$2, %eax
 1576 0035 0F848D00 		je	.L103
 1576      0000
 1577 003b 85C0     		testl	%eax, %eax
 1578 003d 7469     		je	.L137
 788:fltk-1.3.4-1/jpeg/jquant1.c ****     break;
 1579              		.loc 1 788 5 is_stmt 1 view .LVU530
 1580 003f 488B07   		movq	(%rdi), %rax
 1581 0042 C7402831 		movl	$49, 40(%rax)
 1581      000000
 1582 0049 488B07   		movq	(%rdi), %rax
 791:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1583              		.loc 1 791 1 is_stmt 0 view .LVU531
 1584 004c 5B       		popq	%rbx
 1585              		.cfi_remember_state
 1586              		.cfi_def_cfa_offset 40
 1587              	.LVL182:
 791:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1588              		.loc 1 791 1 view .LVU532
 1589 004d 5D       		popq	%rbp
 1590              		.cfi_def_cfa_offset 32
 788:fltk-1.3.4-1/jpeg/jquant1.c ****     break;
 1591              		.loc 1 788 5 view .LVU533
 1592 004e 488B00   		movq	(%rax), %rax
 791:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1593              		.loc 1 791 1 view .LVU534
 1594 0051 415C     		popq	%r12
 1595              		.cfi_def_cfa_offset 24
 1596 0053 415D     		popq	%r13
 1597              		.cfi_def_cfa_offset 16
 1598 0055 415E     		popq	%r14
 1599              		.cfi_def_cfa_offset 8
 788:fltk-1.3.4-1/jpeg/jquant1.c ****     break;
 1600              		.loc 1 788 5 view .LVU535
 1601 0057 FFE0     		jmp	*%rax
 1602              	.LVL183:
 1603 0059 0F1F8000 		.p2align 4,,10
 1603      000000
 1604              		.p2align 3
 1605              	.L102:
 1606              		.cfi_restore_state
 761:fltk-1.3.4-1/jpeg/jquant1.c ****       cquantize->pub.color_quantize = quantize3_ord_dither;
 1607              		.loc 1 761 5 is_stmt 1 view .LVU536
 764:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->row_index = 0;	/* initialize state for ordered dither */
 1608              		.loc 1 764 37 is_stmt 0 view .LVU537
 1609 0060 83BF9000 		cmpl	$3, 144(%rdi)
 1609      000003
 1610 0067 488D0500 		leaq	quantize3_ord_dither(%rip), %rax
 1610      000000
 770:fltk-1.3.4-1/jpeg/jquant1.c ****       create_colorindex(cinfo);
 1611              		.loc 1 770 8 view .LVU538
 1612 006e 8B4B38   		movl	56(%rbx), %ecx
 764:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->row_index = 0;	/* initialize state for ordered dither */
 1613              		.loc 1 764 37 view .LVU539
 1614 0071 488D1500 		leaq	quantize_ord_dither(%rip), %rdx
 1614      000000
 1615 0078 480F45C2 		cmovne	%rdx, %rax
 765:fltk-1.3.4-1/jpeg/jquant1.c ****     /* If user changed to ordered dither from another mode,
 1616              		.loc 1 765 26 view .LVU540
 1617 007c C7434C00 		movl	$0, 76(%rbx)
 1617      000000
 1618 0083 48894308 		movq	%rax, 8(%rbx)
 765:fltk-1.3.4-1/jpeg/jquant1.c ****     /* If user changed to ordered dither from another mode,
 1619              		.loc 1 765 5 is_stmt 1 view .LVU541
 770:fltk-1.3.4-1/jpeg/jquant1.c ****       create_colorindex(cinfo);
 1620              		.loc 1 770 5 view .LVU542
 770:fltk-1.3.4-1/jpeg/jquant1.c ****       create_colorindex(cinfo);
 1621              		.loc 1 770 8 is_stmt 0 view .LVU543
 1622 0087 85C9     		testl	%ecx, %ecx
 1623 0089 0F84B100 		je	.L138
 1623      0000
 1624              	.LVL184:
 1625              	.L108:
 773:fltk-1.3.4-1/jpeg/jquant1.c ****       create_odither_tables(cinfo);
 1626              		.loc 1 773 5 is_stmt 1 view .LVU544
 773:fltk-1.3.4-1/jpeg/jquant1.c ****       create_odither_tables(cinfo);
 1627              		.loc 1 773 8 is_stmt 0 view .LVU545
 1628 008f 48837B50 		cmpq	$0, 80(%rbx)
 1628      00
 1629 0094 0F840E01 		je	.L139
 1629      0000
 1630              	.LVL185:
 1631              	.L101:
 791:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1632              		.loc 1 791 1 view .LVU546
 1633 009a 5B       		popq	%rbx
 1634              		.cfi_remember_state
 1635              		.cfi_def_cfa_offset 40
 1636 009b 5D       		popq	%rbp
 1637              		.cfi_def_cfa_offset 32
 1638              	.LVL186:
 791:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1639              		.loc 1 791 1 view .LVU547
 1640 009c 415C     		popq	%r12
 1641              		.cfi_def_cfa_offset 24
 1642 009e 415D     		popq	%r13
 1643              		.cfi_def_cfa_offset 16
 1644 00a0 415E     		popq	%r14
 1645              		.cfi_def_cfa_offset 8
 1646 00a2 C3       		ret
 1647              	.LVL187:
 1648              		.p2align 4,,10
 1649 00a3 0F1F4400 		.p2align 3
 1649      00
 1650              	.L137:
 1651              		.cfi_restore_state
 755:fltk-1.3.4-1/jpeg/jquant1.c ****       cquantize->pub.color_quantize = color_quantize3;
 1652              		.loc 1 755 5 is_stmt 1 view .LVU548
 755:fltk-1.3.4-1/jpeg/jquant1.c ****       cquantize->pub.color_quantize = color_quantize3;
 1653              		.loc 1 755 8 is_stmt 0 view .LVU549
 1654 00a8 83BF9000 		cmpl	$3, 144(%rdi)
 1654      000003
 1655 00af 7477     		je	.L140
 758:fltk-1.3.4-1/jpeg/jquant1.c ****     break;
 1656              		.loc 1 758 7 is_stmt 1 view .LVU550
 758:fltk-1.3.4-1/jpeg/jquant1.c ****     break;
 1657              		.loc 1 758 37 is_stmt 0 view .LVU551
 1658 00b1 488D0500 		leaq	color_quantize(%rip), %rax
 1658      000000
 1659 00b8 48894308 		movq	%rax, 8(%rbx)
 791:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1660              		.loc 1 791 1 view .LVU552
 1661 00bc 5B       		popq	%rbx
 1662              		.cfi_remember_state
 1663              		.cfi_def_cfa_offset 40
 1664              	.LVL188:
 791:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1665              		.loc 1 791 1 view .LVU553
 1666 00bd 5D       		popq	%rbp
 1667              		.cfi_def_cfa_offset 32
 1668 00be 415C     		popq	%r12
 1669              		.cfi_def_cfa_offset 24
 1670 00c0 415D     		popq	%r13
 1671              		.cfi_def_cfa_offset 16
 1672 00c2 415E     		popq	%r14
 1673              		.cfi_def_cfa_offset 8
 1674 00c4 C3       		ret
 1675              	.LVL189:
 1676              		.p2align 4,,10
 1677 00c5 0F1F00   		.p2align 3
 1678              	.L103:
 1679              		.cfi_restore_state
 777:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
 1680              		.loc 1 777 5 is_stmt 1 view .LVU554
 777:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
 1681              		.loc 1 777 35 is_stmt 0 view .LVU555
 1682 00c8 488D0500 		leaq	quantize_fs_dither(%rip), %rax
 1682      000000
 780:fltk-1.3.4-1/jpeg/jquant1.c ****       alloc_fs_workspace(cinfo);
 1683              		.loc 1 780 8 view .LVU556
 1684 00cf 48837B70 		cmpq	$0, 112(%rbx)
 1684      00
 778:fltk-1.3.4-1/jpeg/jquant1.c ****     /* Allocate Floyd-Steinberg workspace if didn't already. */
 1685              		.loc 1 778 27 view .LVU557
 1686 00d4 C7839000 		movl	$0, 144(%rbx)
 1686      00000000 
 1686      0000
 777:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
 1687              		.loc 1 777 35 view .LVU558
 1688 00de 48894308 		movq	%rax, 8(%rbx)
 778:fltk-1.3.4-1/jpeg/jquant1.c ****     /* Allocate Floyd-Steinberg workspace if didn't already. */
 1689              		.loc 1 778 5 is_stmt 1 view .LVU559
 780:fltk-1.3.4-1/jpeg/jquant1.c ****       alloc_fs_workspace(cinfo);
 1690              		.loc 1 780 5 view .LVU560
 780:fltk-1.3.4-1/jpeg/jquant1.c ****       alloc_fs_workspace(cinfo);
 1691              		.loc 1 780 8 is_stmt 0 view .LVU561
 1692 00e2 746C     		je	.L141
 1693 00e4 8B879000 		movl	144(%rdi), %eax
 1693      0000
 1694              	.LVL190:
 1695              	.L123:
 783:fltk-1.3.4-1/jpeg/jquant1.c ****     for (i = 0; i < cinfo->out_color_components; i++)
 1696              		.loc 1 783 5 is_stmt 1 view .LVU562
 783:fltk-1.3.4-1/jpeg/jquant1.c ****     for (i = 0; i < cinfo->out_color_components; i++)
 1697              		.loc 1 783 48 is_stmt 0 view .LVU563
 1698 00ea 8B958800 		movl	136(%rbp), %edx
 1698      0000
 1699 00f0 448D6A02 		leal	2(%rdx), %r13d
 783:fltk-1.3.4-1/jpeg/jquant1.c ****     for (i = 0; i < cinfo->out_color_components; i++)
 1700              		.loc 1 783 15 view .LVU564
 1701 00f4 4D01ED   		addq	%r13, %r13
 1702              	.LVL191:
 784:fltk-1.3.4-1/jpeg/jquant1.c ****       FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 1703              		.loc 1 784 5 is_stmt 1 view .LVU565
 784:fltk-1.3.4-1/jpeg/jquant1.c ****       FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 1704              		.loc 1 784 17 view .LVU566
 784:fltk-1.3.4-1/jpeg/jquant1.c ****       FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 1705              		.loc 1 784 5 is_stmt 0 view .LVU567
 1706 00f7 85C0     		testl	%eax, %eax
 1707 00f9 7E9F     		jle	.L101
 1708 00fb 4531E4   		xorl	%r12d, %r12d
 1709              	.LVL192:
 1710              	.L124:
 785:fltk-1.3.4-1/jpeg/jquant1.c ****     break;
 1711              		.loc 1 785 7 is_stmt 1 discriminator 3 view .LVU568
 1712              	.LBB41:
 1713              	.LBI41:
  59:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
 1714              		.loc 2 59 1 discriminator 3 view .LVU569
 1715              	.LBB42:
 1716              		.loc 2 71 3 discriminator 3 view .LVU570
 1717              		.loc 2 71 10 is_stmt 0 discriminator 3 view .LVU571
 1718 00fe 4A8B7CE3 		movq	112(%rbx,%r12,8), %rdi
 1718      70
 1719 0103 4C89EA   		movq	%r13, %rdx
 1720 0106 31F6     		xorl	%esi, %esi
 1721 0108 4983C401 		addq	$1, %r12
 1722              	.LVL193:
 1723              		.loc 2 71 10 discriminator 3 view .LVU572
 1724 010c E8000000 		call	memset@PLT
 1724      00
 1725              	.LVL194:
 1726              		.loc 2 71 10 discriminator 3 view .LVU573
 1727              	.LBE42:
 1728              	.LBE41:
 784:fltk-1.3.4-1/jpeg/jquant1.c ****       FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 1729              		.loc 1 784 50 is_stmt 1 discriminator 3 view .LVU574
 784:fltk-1.3.4-1/jpeg/jquant1.c ****       FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 1730              		.loc 1 784 17 discriminator 3 view .LVU575
 784:fltk-1.3.4-1/jpeg/jquant1.c ****       FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 1731              		.loc 1 784 5 is_stmt 0 discriminator 3 view .LVU576
 1732 0111 4439A590 		cmpl	%r12d, 144(%rbp)
 1732      000000
 1733 0118 7FE4     		jg	.L124
 791:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1734              		.loc 1 791 1 view .LVU577
 1735 011a 5B       		popq	%rbx
 1736              		.cfi_remember_state
 1737              		.cfi_def_cfa_offset 40
 1738              	.LVL195:
 791:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1739              		.loc 1 791 1 view .LVU578
 1740 011b 5D       		popq	%rbp
 1741              		.cfi_def_cfa_offset 32
 1742              	.LVL196:
 791:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1743              		.loc 1 791 1 view .LVU579
 1744 011c 415C     		popq	%r12
 1745              		.cfi_def_cfa_offset 24
 1746 011e 415D     		popq	%r13
 1747              		.cfi_def_cfa_offset 16
 1748              	.LVL197:
 791:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1749              		.loc 1 791 1 view .LVU580
 1750 0120 415E     		popq	%r14
 1751              		.cfi_def_cfa_offset 8
 1752 0122 C3       		ret
 1753              	.LVL198:
 1754              		.p2align 4,,10
 1755 0123 0F1F4400 		.p2align 3
 1755      00
 1756              	.L140:
 1757              		.cfi_restore_state
 756:fltk-1.3.4-1/jpeg/jquant1.c ****     else
 1758              		.loc 1 756 7 is_stmt 1 view .LVU581
 756:fltk-1.3.4-1/jpeg/jquant1.c ****     else
 1759              		.loc 1 756 37 is_stmt 0 view .LVU582
 1760 0128 488D0500 		leaq	color_quantize3(%rip), %rax
 1760      000000
 1761 012f 48894308 		movq	%rax, 8(%rbx)
 1762 0133 E962FFFF 		jmp	.L101
 1762      FF
 1763 0138 0F1F8400 		.p2align 4,,10
 1763      00000000 
 1764              		.p2align 3
 1765              	.L138:
 771:fltk-1.3.4-1/jpeg/jquant1.c ****     /* Create ordered-dither tables if we didn't already. */
 1766              		.loc 1 771 7 is_stmt 1 view .LVU583
 1767 0140 E8000000 		call	create_colorindex
 1767      00
 1768              	.LVL199:
 771:fltk-1.3.4-1/jpeg/jquant1.c ****     /* Create ordered-dither tables if we didn't already. */
 1769              		.loc 1 771 7 is_stmt 0 view .LVU584
 1770 0145 E945FFFF 		jmp	.L108
 1770      FF
 1771              	.LVL200:
 1772 014a 660F1F44 		.p2align 4,,10
 1772      0000
 1773              		.p2align 3
 1774              	.L141:
 781:fltk-1.3.4-1/jpeg/jquant1.c ****     /* Initialize the propagated errors to zero. */
 1775              		.loc 1 781 7 is_stmt 1 view .LVU585
 1776              	.LBB43:
 1777              	.LBI43:
 723:fltk-1.3.4-1/jpeg/jquant1.c **** {
 1778              		.loc 1 723 1 view .LVU586
 1779              	.LBB44:
 725:fltk-1.3.4-1/jpeg/jquant1.c ****   size_t arraysize;
 1780              		.loc 1 725 3 view .LVU587
 726:fltk-1.3.4-1/jpeg/jquant1.c ****   int i;
 1781              		.loc 1 726 3 view .LVU588
 727:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1782              		.loc 1 727 3 view .LVU589
 729:fltk-1.3.4-1/jpeg/jquant1.c ****   for (i = 0; i < cinfo->out_color_components; i++) {
 1783              		.loc 1 729 3 view .LVU590
 729:fltk-1.3.4-1/jpeg/jquant1.c ****   for (i = 0; i < cinfo->out_color_components; i++) {
 1784              		.loc 1 729 46 is_stmt 0 view .LVU591
 1785 0150 8B878800 		movl	136(%rdi), %eax
 1785      0000
 1786 0156 448D6802 		leal	2(%rax), %r13d
 730:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->fserrors[i] = (FSERRPTR)
 1787              		.loc 1 730 3 view .LVU592
 1788 015a 8B879000 		movl	144(%rdi), %eax
 1788      0000
 729:fltk-1.3.4-1/jpeg/jquant1.c ****   for (i = 0; i < cinfo->out_color_components; i++) {
 1789              		.loc 1 729 13 view .LVU593
 1790 0160 4D01ED   		addq	%r13, %r13
 1791              	.LVL201:
 730:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->fserrors[i] = (FSERRPTR)
 1792              		.loc 1 730 3 is_stmt 1 view .LVU594
 730:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->fserrors[i] = (FSERRPTR)
 1793              		.loc 1 730 15 view .LVU595
 730:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->fserrors[i] = (FSERRPTR)
 1794              		.loc 1 730 3 is_stmt 0 view .LVU596
 1795 0163 85C0     		testl	%eax, %eax
 1796 0165 0F8E2FFF 		jle	.L101
 1796      FFFF
 725:fltk-1.3.4-1/jpeg/jquant1.c ****   size_t arraysize;
 1797              		.loc 1 725 20 view .LVU597
 1798 016b 4C8BB790 		movq	656(%rdi), %r14
 1798      020000
 1799 0172 4531E4   		xorl	%r12d, %r12d
 1800              	.LVL202:
 1801              		.p2align 4,,10
 1802 0175 0F1F00   		.p2align 3
 1803              	.L122:
 731:fltk-1.3.4-1/jpeg/jquant1.c ****       (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 1804              		.loc 1 731 5 is_stmt 1 view .LVU598
 732:fltk-1.3.4-1/jpeg/jquant1.c ****   }
 1805              		.loc 1 732 8 is_stmt 0 view .LVU599
 1806 0178 488B4508 		movq	8(%rbp), %rax
 1807 017c 4C89EA   		movq	%r13, %rdx
 1808 017f BE010000 		movl	$1, %esi
 1808      00
 1809 0184 4889EF   		movq	%rbp, %rdi
 1810 0187 FF5008   		call	*8(%rax)
 1811              	.LVL203:
 731:fltk-1.3.4-1/jpeg/jquant1.c ****       (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 1812              		.loc 1 731 28 view .LVU600
 1813 018a 4B8944E6 		movq	%rax, 112(%r14,%r12,8)
 1813      70
 730:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->fserrors[i] = (FSERRPTR)
 1814              		.loc 1 730 48 is_stmt 1 view .LVU601
 1815              	.LVL204:
 730:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->fserrors[i] = (FSERRPTR)
 1816              		.loc 1 730 15 view .LVU602
 730:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->fserrors[i] = (FSERRPTR)
 1817              		.loc 1 730 24 is_stmt 0 view .LVU603
 1818 018f 8B859000 		movl	144(%rbp), %eax
 1818      0000
 1819 0195 4983C401 		addq	$1, %r12
 1820              	.LVL205:
 730:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->fserrors[i] = (FSERRPTR)
 1821              		.loc 1 730 3 view .LVU604
 1822 0199 4439E0   		cmpl	%r12d, %eax
 1823 019c 7FDA     		jg	.L122
 1824 019e E947FFFF 		jmp	.L123
 1824      FF
 1825              	.LVL206:
 1826              		.p2align 4,,10
 1827 01a3 0F1F4400 		.p2align 3
 1827      00
 1828              	.L139:
 730:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->fserrors[i] = (FSERRPTR)
 1829              		.loc 1 730 3 view .LVU605
 1830              	.LBE44:
 1831              	.LBE43:
 774:fltk-1.3.4-1/jpeg/jquant1.c ****     break;
 1832              		.loc 1 774 7 is_stmt 1 view .LVU606
 1833              	.LBB45:
 1834              	.LBI45:
 433:fltk-1.3.4-1/jpeg/jquant1.c **** {
 1835              		.loc 1 433 1 view .LVU607
 1836              	.LBB46:
 435:fltk-1.3.4-1/jpeg/jquant1.c ****   ODITHER_MATRIX_PTR odither;
 1837              		.loc 1 435 3 view .LVU608
 436:fltk-1.3.4-1/jpeg/jquant1.c ****   int i, j, nci;
 1838              		.loc 1 436 3 view .LVU609
 437:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1839              		.loc 1 437 3 view .LVU610
 439:fltk-1.3.4-1/jpeg/jquant1.c ****     nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 1840              		.loc 1 439 3 view .LVU611
 439:fltk-1.3.4-1/jpeg/jquant1.c ****     nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 1841              		.loc 1 439 15 view .LVU612
 439:fltk-1.3.4-1/jpeg/jquant1.c ****     nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 1842              		.loc 1 439 3 is_stmt 0 view .LVU613
 1843 01a8 8B959000 		movl	144(%rbp), %edx
 1843      0000
 1844 01ae 85D2     		testl	%edx, %edx
 1845 01b0 0F8EE4FE 		jle	.L101
 1845      FFFF
 435:fltk-1.3.4-1/jpeg/jquant1.c ****   ODITHER_MATRIX_PTR odither;
 1846              		.loc 1 435 20 view .LVU614
 1847 01b6 488B9D90 		movq	656(%rbp), %rbx
 1847      020000
 1848              	.LVL207:
 435:fltk-1.3.4-1/jpeg/jquant1.c ****   ODITHER_MATRIX_PTR odither;
 1849              		.loc 1 435 20 view .LVU615
 1850 01bd 4531E4   		xorl	%r12d, %r12d
 1851 01c0 4C8D2D00 		leaq	256+base_dither_matrix(%rip), %r13
 1851      000000
 1852              	.LVL208:
 1853              	.L120:
 440:fltk-1.3.4-1/jpeg/jquant1.c ****     odither = NULL;		/* search for matching prior component */
 1854              		.loc 1 440 5 is_stmt 1 view .LVU616
 440:fltk-1.3.4-1/jpeg/jquant1.c ****     odither = NULL;		/* search for matching prior component */
 1855              		.loc 1 440 9 is_stmt 0 view .LVU617
 1856 01c7 468B74A3 		movl	60(%rbx,%r12,4), %r14d
 1856      3C
 1857              	.LVL209:
 441:fltk-1.3.4-1/jpeg/jquant1.c ****     for (j = 0; j < i; j++) {
 1858              		.loc 1 441 5 is_stmt 1 view .LVU618
 442:fltk-1.3.4-1/jpeg/jquant1.c ****       if (nci == cquantize->Ncolors[j]) {
 1859              		.loc 1 442 5 view .LVU619
 442:fltk-1.3.4-1/jpeg/jquant1.c ****       if (nci == cquantize->Ncolors[j]) {
 1860              		.loc 1 442 17 view .LVU620
 1861 01cc 4489E1   		movl	%r12d, %ecx
 442:fltk-1.3.4-1/jpeg/jquant1.c ****       if (nci == cquantize->Ncolors[j]) {
 1862              		.loc 1 442 5 is_stmt 0 view .LVU621
 1863 01cf 4D85E4   		testq	%r12, %r12
 1864 01d2 7444     		je	.L111
 1865 01d4 31C0     		xorl	%eax, %eax
 1866 01d6 EB10     		jmp	.L114
 1867              	.LVL210:
 1868 01d8 0F1F8400 		.p2align 4,,10
 1868      00000000 
 1869              		.p2align 3
 1870              	.L112:
 442:fltk-1.3.4-1/jpeg/jquant1.c ****       if (nci == cquantize->Ncolors[j]) {
 1871              		.loc 1 442 24 is_stmt 1 view .LVU622
 442:fltk-1.3.4-1/jpeg/jquant1.c ****       if (nci == cquantize->Ncolors[j]) {
 1872              		.loc 1 442 17 view .LVU623
 1873 01e0 4883C001 		addq	$1, %rax
 1874              	.LVL211:
 442:fltk-1.3.4-1/jpeg/jquant1.c ****       if (nci == cquantize->Ncolors[j]) {
 1875              		.loc 1 442 5 is_stmt 0 view .LVU624
 1876 01e4 39C1     		cmpl	%eax, %ecx
 1877 01e6 7E30     		jle	.L111
 1878              	.LVL212:
 1879              	.L114:
 442:fltk-1.3.4-1/jpeg/jquant1.c ****       if (nci == cquantize->Ncolors[j]) {
 1880              		.loc 1 442 5 view .LVU625
 1881 01e8 4863D0   		movslq	%eax, %rdx
 1882              	.LVL213:
 443:fltk-1.3.4-1/jpeg/jquant1.c **** 	odither = cquantize->odither[j];
 1883              		.loc 1 443 7 is_stmt 1 view .LVU626
 443:fltk-1.3.4-1/jpeg/jquant1.c **** 	odither = cquantize->odither[j];
 1884              		.loc 1 443 10 is_stmt 0 view .LVU627
 1885 01eb 443B7483 		cmpl	60(%rbx,%rax,4), %r14d
 1885      3C
 1886 01f0 75EE     		jne	.L112
 444:fltk-1.3.4-1/jpeg/jquant1.c **** 	break;
 1887              		.loc 1 444 2 is_stmt 1 view .LVU628
 444:fltk-1.3.4-1/jpeg/jquant1.c **** 	break;
 1888              		.loc 1 444 10 is_stmt 0 view .LVU629
 1889 01f2 4C8B54D3 		movq	80(%rbx,%rdx,8), %r10
 1889      50
 1890              	.LVL214:
 445:fltk-1.3.4-1/jpeg/jquant1.c ****       }
 1891              		.loc 1 445 2 is_stmt 1 view .LVU630
 448:fltk-1.3.4-1/jpeg/jquant1.c ****       odither = make_odither_array(cinfo, nci);
 1892              		.loc 1 448 5 view .LVU631
 448:fltk-1.3.4-1/jpeg/jquant1.c ****       odither = make_odither_array(cinfo, nci);
 1893              		.loc 1 448 8 is_stmt 0 view .LVU632
 1894 01f7 4D85D2   		testq	%r10, %r10
 1895 01fa 741C     		je	.L111
 1896              	.LVL215:
 1897              	.L113:
 450:fltk-1.3.4-1/jpeg/jquant1.c ****   }
 1898              		.loc 1 450 5 is_stmt 1 view .LVU633
 450:fltk-1.3.4-1/jpeg/jquant1.c ****   }
 1899              		.loc 1 450 27 is_stmt 0 view .LVU634
 1900 01fc 4E8954E3 		movq	%r10, 80(%rbx,%r12,8)
 1900      50
 439:fltk-1.3.4-1/jpeg/jquant1.c ****     nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 1901              		.loc 1 439 48 is_stmt 1 view .LVU635
 1902              	.LVL216:
 439:fltk-1.3.4-1/jpeg/jquant1.c ****     nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 1903              		.loc 1 439 15 view .LVU636
 1904 0201 4983C401 		addq	$1, %r12
 1905              	.LVL217:
 439:fltk-1.3.4-1/jpeg/jquant1.c ****     nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 1906              		.loc 1 439 3 is_stmt 0 view .LVU637
 1907 0205 4439A590 		cmpl	%r12d, 144(%rbp)
 1907      000000
 1908 020c 7FB9     		jg	.L120
 1909 020e E987FEFF 		jmp	.L101
 1909      FF
 1910              	.LVL218:
 1911              		.p2align 4,,10
 1912 0213 0F1F4400 		.p2align 3
 1912      00
 1913              	.L111:
 449:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->odither[i] = odither;
 1914              		.loc 1 449 7 is_stmt 1 view .LVU638
 1915              	.LBB47:
 1916              	.LBI47:
 397:fltk-1.3.4-1/jpeg/jquant1.c **** {
 1917              		.loc 1 397 1 view .LVU639
 1918              	.LBB48:
 399:fltk-1.3.4-1/jpeg/jquant1.c ****   int j,k;
 1919              		.loc 1 399 3 view .LVU640
 400:fltk-1.3.4-1/jpeg/jquant1.c ****   INT32 num,den;
 1920              		.loc 1 400 3 view .LVU641
 401:fltk-1.3.4-1/jpeg/jquant1.c **** 
 1921              		.loc 1 401 3 view .LVU642
 403:fltk-1.3.4-1/jpeg/jquant1.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 1922              		.loc 1 403 3 view .LVU643
 404:fltk-1.3.4-1/jpeg/jquant1.c **** 				SIZEOF(ODITHER_MATRIX));
 1923              		.loc 1 404 6 is_stmt 0 view .LVU644
 1924 0218 488B4508 		movq	8(%rbp), %rax
 1925 021c BE010000 		movl	$1, %esi
 1925      00
 1926 0221 4889EF   		movq	%rbp, %rdi
 1927 0224 BA000400 		movl	$1024, %edx
 1927      00
 1928 0229 FF10     		call	*(%rax)
 1929              	.LVL219:
 411:fltk-1.3.4-1/jpeg/jquant1.c ****   for (j = 0; j < ODITHER_SIZE; j++) {
 1930              		.loc 1 411 47 view .LVU645
 1931 022b 418D76FF 		leal	-1(%r14), %esi
 1932 022f 488D3D00 		leaq	base_dither_matrix(%rip), %rdi
 1932      000000
 414:fltk-1.3.4-1/jpeg/jquant1.c **** 	    * MAXJSAMPLE;
 1933              		.loc 1 414 39 view .LVU646
 1934 0236 41B9FF00 		movl	$255, %r9d
 1934      0000
 411:fltk-1.3.4-1/jpeg/jquant1.c ****   for (j = 0; j < ODITHER_SIZE; j++) {
 1935              		.loc 1 411 30 view .LVU647
 1936 023c 4863F6   		movslq	%esi, %rsi
 404:fltk-1.3.4-1/jpeg/jquant1.c **** 				SIZEOF(ODITHER_MATRIX));
 1937              		.loc 1 404 6 view .LVU648
 1938 023f 4989C2   		movq	%rax, %r10
 1939              	.LVL220:
 411:fltk-1.3.4-1/jpeg/jquant1.c ****   for (j = 0; j < ODITHER_SIZE; j++) {
 1940              		.loc 1 411 3 is_stmt 1 view .LVU649
 1941 0242 4989C0   		movq	%rax, %r8
 411:fltk-1.3.4-1/jpeg/jquant1.c ****   for (j = 0; j < ODITHER_SIZE; j++) {
 1942              		.loc 1 411 7 is_stmt 0 view .LVU650
 1943 0245 31C0     		xorl	%eax, %eax
 1944              	.LVL221:
 411:fltk-1.3.4-1/jpeg/jquant1.c ****   for (j = 0; j < ODITHER_SIZE; j++) {
 1945              		.loc 1 411 7 view .LVU651
 1946 0247 48C1E609 		salq	$9, %rsi
 1947              	.LVL222:
 412:fltk-1.3.4-1/jpeg/jquant1.c ****     for (k = 0; k < ODITHER_SIZE; k++) {
 1948              		.loc 1 412 3 is_stmt 1 view .LVU652
 412:fltk-1.3.4-1/jpeg/jquant1.c ****     for (k = 0; k < ODITHER_SIZE; k++) {
 1949              		.loc 1 412 15 view .LVU653
 1950 024b 0F1F4400 		.p2align 4,,10
 1950      00
 1951              		.p2align 3
 1952              	.L115:
 413:fltk-1.3.4-1/jpeg/jquant1.c ****       num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 1953              		.loc 1 413 17 view .LVU654
 419:fltk-1.3.4-1/jpeg/jquant1.c ****     }
 1954              		.loc 1 419 14 is_stmt 0 view .LVU655
 1955 0250 31C9     		xorl	%ecx, %ecx
 1956 0252 EB1B     		jmp	.L119
 1957              	.LVL223:
 1958              		.p2align 4,,10
 1959 0254 0F1F4000 		.p2align 3
 1960              	.L116:
 419:fltk-1.3.4-1/jpeg/jquant1.c ****     }
 1961              		.loc 1 419 23 view .LVU656
 1962 0258 4899     		cqto
 1963 025a 48F7FE   		idivq	%rsi
 1964              	.LVL224:
 419:fltk-1.3.4-1/jpeg/jquant1.c ****     }
 1965              		.loc 1 419 21 view .LVU657
 1966 025d 41890488 		movl	%eax, (%r8,%rcx,4)
 413:fltk-1.3.4-1/jpeg/jquant1.c ****       num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 1967              		.loc 1 413 35 is_stmt 1 view .LVU658
 1968              	.LVL225:
 413:fltk-1.3.4-1/jpeg/jquant1.c ****       num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 1969              		.loc 1 413 17 view .LVU659
 1970 0261 4883C101 		addq	$1, %rcx
 1971              	.LVL226:
 413:fltk-1.3.4-1/jpeg/jquant1.c ****       num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 1972              		.loc 1 413 5 is_stmt 0 view .LVU660
 1973 0265 4883F910 		cmpq	$16, %rcx
 1974 0269 7432     		je	.L142
 1975              	.L118:
 413:fltk-1.3.4-1/jpeg/jquant1.c ****       num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 1976              		.loc 1 413 5 view .LVU661
 1977 026b 0FB6040F 		movzbl	(%rdi,%rcx), %eax
 1978              	.L119:
 1979              	.LVL227:
 414:fltk-1.3.4-1/jpeg/jquant1.c **** 	    * MAXJSAMPLE;
 1980              		.loc 1 414 7 is_stmt 1 view .LVU662
 414:fltk-1.3.4-1/jpeg/jquant1.c **** 	    * MAXJSAMPLE;
 1981              		.loc 1 414 42 is_stmt 0 view .LVU663
 1982 026f 01C0     		addl	%eax, %eax
 414:fltk-1.3.4-1/jpeg/jquant1.c **** 	    * MAXJSAMPLE;
 1983              		.loc 1 414 39 view .LVU664
 1984 0271 4489CA   		movl	%r9d, %edx
 1985 0274 29C2     		subl	%eax, %edx
 414:fltk-1.3.4-1/jpeg/jquant1.c **** 	    * MAXJSAMPLE;
 1986              		.loc 1 414 14 view .LVU665
 1987 0276 4863D2   		movslq	%edx, %rdx
 414:fltk-1.3.4-1/jpeg/jquant1.c **** 	    * MAXJSAMPLE;
 1988              		.loc 1 414 11 view .LVU666
 1989 0279 4889D0   		movq	%rdx, %rax
 1990 027c 48C1E008 		salq	$8, %rax
 1991              	.LVL228:
 419:fltk-1.3.4-1/jpeg/jquant1.c ****     }
 1992              		.loc 1 419 7 is_stmt 1 view .LVU667
 419:fltk-1.3.4-1/jpeg/jquant1.c ****     }
 1993              		.loc 1 419 23 is_stmt 0 view .LVU668
 1994 0280 4829D0   		subq	%rdx, %rax
 1995              	.LVL229:
 419:fltk-1.3.4-1/jpeg/jquant1.c ****     }
 1996              		.loc 1 419 23 view .LVU669
 1997 0283 79D3     		jns	.L116
 419:fltk-1.3.4-1/jpeg/jquant1.c ****     }
 1998              		.loc 1 419 41 view .LVU670
 1999 0285 48F7D8   		negq	%rax
 2000              	.LVL230:
 419:fltk-1.3.4-1/jpeg/jquant1.c ****     }
 2001              		.loc 1 419 46 view .LVU671
 2002 0288 4899     		cqto
 2003 028a 48F7FE   		idivq	%rsi
 2004              	.LVL231:
 419:fltk-1.3.4-1/jpeg/jquant1.c ****     }
 2005              		.loc 1 419 23 view .LVU672
 2006 028d F7D8     		negl	%eax
 419:fltk-1.3.4-1/jpeg/jquant1.c ****     }
 2007              		.loc 1 419 21 view .LVU673
 2008 028f 41890488 		movl	%eax, (%r8,%rcx,4)
 413:fltk-1.3.4-1/jpeg/jquant1.c ****       num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 2009              		.loc 1 413 35 is_stmt 1 view .LVU674
 2010              	.LVL232:
 413:fltk-1.3.4-1/jpeg/jquant1.c ****       num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 2011              		.loc 1 413 17 view .LVU675
 2012 0293 4883C101 		addq	$1, %rcx
 2013              	.LVL233:
 413:fltk-1.3.4-1/jpeg/jquant1.c ****       num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 2014              		.loc 1 413 5 is_stmt 0 view .LVU676
 2015 0297 4883F910 		cmpq	$16, %rcx
 2016 029b 75CE     		jne	.L118
 2017              	.L142:
 412:fltk-1.3.4-1/jpeg/jquant1.c ****     for (k = 0; k < ODITHER_SIZE; k++) {
 2018              		.loc 1 412 33 is_stmt 1 view .LVU677
 412:fltk-1.3.4-1/jpeg/jquant1.c ****     for (k = 0; k < ODITHER_SIZE; k++) {
 2019              		.loc 1 412 15 view .LVU678
 2020 029d 4883C710 		addq	$16, %rdi
 2021 02a1 4983C040 		addq	$64, %r8
 412:fltk-1.3.4-1/jpeg/jquant1.c ****     for (k = 0; k < ODITHER_SIZE; k++) {
 2022              		.loc 1 412 3 is_stmt 0 view .LVU679
 2023 02a5 4939FD   		cmpq	%rdi, %r13
 2024 02a8 0F844EFF 		je	.L113
 2024      FFFF
 2025 02ae 0FB607   		movzbl	(%rdi), %eax
 2026 02b1 EB9D     		jmp	.L115
 2027              	.LBE48:
 2028              	.LBE47:
 2029              	.LBE46:
 2030              	.LBE45:
 2031              		.cfi_endproc
 2032              	.LFE64:
 2034              		.section	.text.jinit_1pass_quantizer,"ax",@progbits
 2035              		.p2align 4
 2036              		.globl	jinit_1pass_quantizer
 2038              	jinit_1pass_quantizer:
 2039              	.LVL234:
 2040              	.LFB67:
 814:fltk-1.3.4-1/jpeg/jquant1.c **** }
 815:fltk-1.3.4-1/jpeg/jquant1.c **** 
 816:fltk-1.3.4-1/jpeg/jquant1.c **** 
 817:fltk-1.3.4-1/jpeg/jquant1.c **** /*
 818:fltk-1.3.4-1/jpeg/jquant1.c ****  * Module initialization routine for 1-pass color quantization.
 819:fltk-1.3.4-1/jpeg/jquant1.c ****  */
 820:fltk-1.3.4-1/jpeg/jquant1.c **** 
 821:fltk-1.3.4-1/jpeg/jquant1.c **** GLOBAL(void)
 822:fltk-1.3.4-1/jpeg/jquant1.c **** jinit_1pass_quantizer (j_decompress_ptr cinfo)
 823:fltk-1.3.4-1/jpeg/jquant1.c **** {
 2041              		.loc 1 823 1 is_stmt 1 view -0
 2042              		.cfi_startproc
 2043              		.loc 1 823 1 is_stmt 0 view .LVU681
 2044 0000 F30F1EFA 		endbr64
 824:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize;
 2045              		.loc 1 824 3 is_stmt 1 view .LVU682
 825:fltk-1.3.4-1/jpeg/jquant1.c **** 
 826:fltk-1.3.4-1/jpeg/jquant1.c ****   cquantize = (my_cquantize_ptr)
 2046              		.loc 1 826 3 view .LVU683
 823:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize;
 2047              		.loc 1 823 1 is_stmt 0 view .LVU684
 2048 0004 4157     		pushq	%r15
 2049              		.cfi_def_cfa_offset 16
 2050              		.cfi_offset 15, -16
 827:fltk-1.3.4-1/jpeg/jquant1.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 2051              		.loc 1 827 6 view .LVU685
 2052 0006 BA980000 		movl	$152, %edx
 2052      00
 2053 000b BE010000 		movl	$1, %esi
 2053      00
 823:fltk-1.3.4-1/jpeg/jquant1.c ****   my_cquantize_ptr cquantize;
 2054              		.loc 1 823 1 view .LVU686
 2055 0010 4156     		pushq	%r14
 2056              		.cfi_def_cfa_offset 24
 2057              		.cfi_offset 14, -24
 2058 0012 4989FE   		movq	%rdi, %r14
 2059 0015 4155     		pushq	%r13
 2060              		.cfi_def_cfa_offset 32
 2061              		.cfi_offset 13, -32
 2062 0017 4154     		pushq	%r12
 2063              		.cfi_def_cfa_offset 40
 2064              		.cfi_offset 12, -40
 2065 0019 55       		pushq	%rbp
 2066              		.cfi_def_cfa_offset 48
 2067              		.cfi_offset 6, -48
 2068 001a 53       		pushq	%rbx
 2069              		.cfi_def_cfa_offset 56
 2070              		.cfi_offset 3, -56
 2071 001b 4883EC48 		subq	$72, %rsp
 2072              		.cfi_def_cfa_offset 128
 2073              		.loc 1 827 6 view .LVU687
 2074 001f 488B4708 		movq	8(%rdi), %rax
 2075 0023 FF10     		call	*(%rax)
 2076              	.LVL235:
 828:fltk-1.3.4-1/jpeg/jquant1.c **** 				SIZEOF(my_cquantizer));
 829:fltk-1.3.4-1/jpeg/jquant1.c ****   cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 2077              		.loc 1 829 3 is_stmt 1 view .LVU688
 830:fltk-1.3.4-1/jpeg/jquant1.c ****   cquantize->pub.start_pass = start_pass_1_quant;
 2078              		.loc 1 830 29 is_stmt 0 view .LVU689
 2079 0025 488D3D00 		leaq	start_pass_1_quant(%rip), %rdi
 2079      000000
 829:fltk-1.3.4-1/jpeg/jquant1.c ****   cquantize->pub.start_pass = start_pass_1_quant;
 2080              		.loc 1 829 20 view .LVU690
 2081 002c 49898690 		movq	%rax, 656(%r14)
 2081      020000
 2082              		.loc 1 830 3 is_stmt 1 view .LVU691
 2083              		.loc 1 830 29 is_stmt 0 view .LVU692
 2084 0033 488938   		movq	%rdi, (%rax)
 831:fltk-1.3.4-1/jpeg/jquant1.c ****   cquantize->pub.finish_pass = finish_pass_1_quant;
 2085              		.loc 1 831 3 is_stmt 1 view .LVU693
 2086              		.loc 1 831 30 is_stmt 0 view .LVU694
 2087 0036 488D3D00 		leaq	finish_pass_1_quant(%rip), %rdi
 2087      000000
 2088 003d 48897810 		movq	%rdi, 16(%rax)
 832:fltk-1.3.4-1/jpeg/jquant1.c ****   cquantize->pub.new_color_map = new_color_map_1_quant;
 2089              		.loc 1 832 3 is_stmt 1 view .LVU695
 2090              		.loc 1 832 32 is_stmt 0 view .LVU696
 2091 0041 488D3D00 		leaq	new_color_map_1_quant(%rip), %rdi
 2091      000000
 2092 0048 48897818 		movq	%rdi, 24(%rax)
 833:fltk-1.3.4-1/jpeg/jquant1.c ****   cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
 2093              		.loc 1 833 3 is_stmt 1 view .LVU697
 2094              		.loc 1 833 26 is_stmt 0 view .LVU698
 2095 004c 48C74070 		movq	$0, 112(%rax)
 2095      00000000 
 834:fltk-1.3.4-1/jpeg/jquant1.c ****   cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */
 2096              		.loc 1 834 3 is_stmt 1 view .LVU699
 2097              		.loc 1 834 25 is_stmt 0 view .LVU700
 2098 0054 48C74050 		movq	$0, 80(%rax)
 2098      00000000 
 835:fltk-1.3.4-1/jpeg/jquant1.c **** 
 836:fltk-1.3.4-1/jpeg/jquant1.c ****   /* Make sure my internal arrays won't overflow */
 837:fltk-1.3.4-1/jpeg/jquant1.c ****   if (cinfo->out_color_components > MAX_Q_COMPS)
 2099              		.loc 1 837 3 is_stmt 1 view .LVU701
 2100              		.loc 1 837 6 is_stmt 0 view .LVU702
 2101 005c 4183BE90 		cmpl	$4, 144(%r14)
 2101      00000004 
 2102 0064 7E1C     		jle	.L144
 838:fltk-1.3.4-1/jpeg/jquant1.c ****     ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
 2103              		.loc 1 838 5 is_stmt 1 view .LVU703
 2104 0066 498B06   		movq	(%r14), %rax
 2105              	.LVL236:
 2106              		.loc 1 838 5 is_stmt 0 view .LVU704
 2107 0069 4C89F7   		movq	%r14, %rdi
 2108 006c C7402839 		movl	$57, 40(%rax)
 2108      000000
 2109 0073 498B06   		movq	(%r14), %rax
 2110 0076 C7402C04 		movl	$4, 44(%rax)
 2110      000000
 2111 007d 498B06   		movq	(%r14), %rax
 2112 0080 FF10     		call	*(%rax)
 2113              	.LVL237:
 2114              	.L144:
 839:fltk-1.3.4-1/jpeg/jquant1.c ****   /* Make sure colormap indexes can be represented by JSAMPLEs */
 840:fltk-1.3.4-1/jpeg/jquant1.c ****   if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
 2115              		.loc 1 840 3 is_stmt 1 view .LVU705
 2116              		.loc 1 840 12 is_stmt 0 view .LVU706
 2117 0082 49636E78 		movslq	120(%r14), %rbp
 2118              		.loc 1 840 6 view .LVU707
 2119 0086 81FD0001 		cmpl	$256, %ebp
 2119      0000
 2120 008c 7E20     		jle	.L145
 841:fltk-1.3.4-1/jpeg/jquant1.c ****     ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);
 2121              		.loc 1 841 5 is_stmt 1 view .LVU708
 2122 008e 498B06   		movq	(%r14), %rax
 2123 0091 4C89F7   		movq	%r14, %rdi
 2124 0094 C740283B 		movl	$59, 40(%rax)
 2124      000000
 2125 009b 498B06   		movq	(%r14), %rax
 2126 009e C7402C00 		movl	$256, 44(%rax)
 2126      010000
 2127 00a5 498B06   		movq	(%r14), %rax
 2128 00a8 FF10     		call	*(%rax)
 2129              	.LVL238:
 2130 00aa 49636E78 		movslq	120(%r14), %rbp
 2131              	.L145:
 842:fltk-1.3.4-1/jpeg/jquant1.c **** 
 843:fltk-1.3.4-1/jpeg/jquant1.c ****   /* Create the colormap and color index table. */
 844:fltk-1.3.4-1/jpeg/jquant1.c ****   create_colormap(cinfo);
 2132              		.loc 1 844 3 view .LVU709
 2133              	.LVL239:
 2134              	.LBB58:
 2135              	.LBI58:
 274:fltk-1.3.4-1/jpeg/jquant1.c **** {
 2136              		.loc 1 274 1 view .LVU710
 2137              	.LBB59:
 276:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPARRAY colormap;		/* Created colormap */
 2138              		.loc 1 276 3 view .LVU711
 276:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPARRAY colormap;		/* Created colormap */
 2139              		.loc 1 276 20 is_stmt 0 view .LVU712
 2140 00ae 498B8690 		movq	656(%r14), %rax
 2140      020000
 2141              	.LBB60:
 2142              	.LBB61:
 192:fltk-1.3.4-1/jpeg/jquant1.c ****   int max_colors = cinfo->desired_number_of_colors;
 2143              		.loc 1 192 7 view .LVU713
 2144 00b5 418B9E90 		movl	144(%r14), %ebx
 2144      000000
 2145              	.LBE61:
 2146              	.LBE60:
 276:fltk-1.3.4-1/jpeg/jquant1.c ****   JSAMPARRAY colormap;		/* Created colormap */
 2147              		.loc 1 276 20 view .LVU714
 2148 00bc 48894424 		movq	%rax, 8(%rsp)
 2148      08
 2149              	.LVL240:
 277:fltk-1.3.4-1/jpeg/jquant1.c ****   int total_colors;		/* Number of distinct output colors */
 2150              		.loc 1 277 3 is_stmt 1 view .LVU715
 278:fltk-1.3.4-1/jpeg/jquant1.c ****   int i,j,k, nci, blksize, blkdist, ptr, val;
 2151              		.loc 1 278 3 view .LVU716
 279:fltk-1.3.4-1/jpeg/jquant1.c **** 
 2152              		.loc 1 279 3 view .LVU717
 282:fltk-1.3.4-1/jpeg/jquant1.c **** 
 2153              		.loc 1 282 3 view .LVU718
 282:fltk-1.3.4-1/jpeg/jquant1.c **** 
 2154              		.loc 1 282 49 is_stmt 0 view .LVU719
 2155 00c1 4C8D783C 		leaq	60(%rax), %r15
 2156              	.LVL241:
 2157              	.LBB64:
 2158              	.LBI60:
 187:fltk-1.3.4-1/jpeg/jquant1.c **** /* Determine allocation of desired colors to components, */
 2159              		.loc 1 187 1 is_stmt 1 view .LVU720
 2160              	.LBB62:
 192:fltk-1.3.4-1/jpeg/jquant1.c ****   int max_colors = cinfo->desired_number_of_colors;
 2161              		.loc 1 192 3 view .LVU721
 193:fltk-1.3.4-1/jpeg/jquant1.c ****   int total_colors, iroot, i, j;
 2162              		.loc 1 193 3 view .LVU722
 194:fltk-1.3.4-1/jpeg/jquant1.c ****   boolean changed;
 2163              		.loc 1 194 3 view .LVU723
 195:fltk-1.3.4-1/jpeg/jquant1.c ****   long temp;
 2164              		.loc 1 195 3 view .LVU724
 196:fltk-1.3.4-1/jpeg/jquant1.c ****   static const int RGB_order[3] = { RGB_GREEN, RGB_RED, RGB_BLUE };
 2165              		.loc 1 196 3 view .LVU725
 197:fltk-1.3.4-1/jpeg/jquant1.c **** 
 2166              		.loc 1 197 3 view .LVU726
 201:fltk-1.3.4-1/jpeg/jquant1.c ****   do {
 2167              		.loc 1 201 3 view .LVU727
 192:fltk-1.3.4-1/jpeg/jquant1.c ****   int max_colors = cinfo->desired_number_of_colors;
 2168              		.loc 1 192 7 is_stmt 0 view .LVU728
 2169 00c5 B8020000 		movl	$2, %eax
 2169      00
 2170              	.LVL242:
 2171 00ca 660F1F44 		.p2align 4,,10
 2171      0000
 2172              		.p2align 3
 2173              	.L148:
 192:fltk-1.3.4-1/jpeg/jquant1.c ****   int max_colors = cinfo->desired_number_of_colors;
 2174              		.loc 1 192 7 view .LVU729
 2175 00d0 448D68FF 		leal	-1(%rax), %r13d
 2176              	.LVL243:
 202:fltk-1.3.4-1/jpeg/jquant1.c ****     iroot++;
 2177              		.loc 1 202 3 is_stmt 1 view .LVU730
 203:fltk-1.3.4-1/jpeg/jquant1.c ****     temp = iroot;		/* set temp = iroot ** nc */
 2178              		.loc 1 203 5 view .LVU731
 204:fltk-1.3.4-1/jpeg/jquant1.c ****     for (i = 1; i < nc; i++)
 2179              		.loc 1 204 5 view .LVU732
 205:fltk-1.3.4-1/jpeg/jquant1.c ****       temp *= iroot;
 2180              		.loc 1 205 5 view .LVU733
 205:fltk-1.3.4-1/jpeg/jquant1.c ****       temp *= iroot;
 2181              		.loc 1 205 17 view .LVU734
 204:fltk-1.3.4-1/jpeg/jquant1.c ****     for (i = 1; i < nc; i++)
 2182              		.loc 1 204 10 is_stmt 0 view .LVU735
 2183 00d4 4889C2   		movq	%rax, %rdx
 205:fltk-1.3.4-1/jpeg/jquant1.c ****       temp *= iroot;
 2184              		.loc 1 205 5 view .LVU736
 2185 00d7 83FB01   		cmpl	$1, %ebx
 2186 00da 7E17     		jle	.L146
 205:fltk-1.3.4-1/jpeg/jquant1.c ****       temp *= iroot;
 2187              		.loc 1 205 12 view .LVU737
 2188 00dc B9010000 		movl	$1, %ecx
 2188      00
 2189              	.LVL244:
 2190              		.p2align 4,,10
 2191 00e1 0F1F8000 		.p2align 3
 2191      000000
 2192              	.L147:
 206:fltk-1.3.4-1/jpeg/jquant1.c ****   } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
 2193              		.loc 1 206 7 is_stmt 1 view .LVU738
 205:fltk-1.3.4-1/jpeg/jquant1.c ****       temp *= iroot;
 2194              		.loc 1 205 26 is_stmt 0 view .LVU739
 2195 00e8 83C101   		addl	$1, %ecx
 2196              	.LVL245:
 206:fltk-1.3.4-1/jpeg/jquant1.c ****   } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
 2197              		.loc 1 206 12 view .LVU740
 2198 00eb 480FAFD0 		imulq	%rax, %rdx
 2199              	.LVL246:
 205:fltk-1.3.4-1/jpeg/jquant1.c ****       temp *= iroot;
 2200              		.loc 1 205 25 is_stmt 1 view .LVU741
 205:fltk-1.3.4-1/jpeg/jquant1.c ****       temp *= iroot;
 2201              		.loc 1 205 17 view .LVU742
 205:fltk-1.3.4-1/jpeg/jquant1.c ****       temp *= iroot;
 2202              		.loc 1 205 5 is_stmt 0 view .LVU743
 2203 00ef 39CB     		cmpl	%ecx, %ebx
 2204 00f1 75F5     		jne	.L147
 2205              	.LVL247:
 2206              	.L146:
 207:fltk-1.3.4-1/jpeg/jquant1.c ****   iroot--;			/* now iroot = floor(root) */
 2207              		.loc 1 207 11 is_stmt 1 view .LVU744
 2208 00f3 4883C001 		addq	$1, %rax
 2209              	.LVL248:
 207:fltk-1.3.4-1/jpeg/jquant1.c ****   iroot--;			/* now iroot = floor(root) */
 2210              		.loc 1 207 3 is_stmt 0 view .LVU745
 2211 00f7 4839EA   		cmpq	%rbp, %rdx
 2212 00fa 7ED4     		jle	.L148
 208:fltk-1.3.4-1/jpeg/jquant1.c **** 
 2213              		.loc 1 208 3 is_stmt 1 view .LVU746
 2214              	.LVL249:
 211:fltk-1.3.4-1/jpeg/jquant1.c ****     ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
 2215              		.loc 1 211 3 view .LVU747
 211:fltk-1.3.4-1/jpeg/jquant1.c ****     ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
 2216              		.loc 1 211 6 is_stmt 0 view .LVU748
 2217 00fc 4183FD01 		cmpl	$1, %r13d
 2218 0100 7518     		jne	.L149
 212:fltk-1.3.4-1/jpeg/jquant1.c **** 
 2219              		.loc 1 212 5 is_stmt 1 view .LVU749
 2220 0102 498B06   		movq	(%r14), %rax
 2221 0105 4C89F7   		movq	%r14, %rdi
 2222 0108 C740283A 		movl	$58, 40(%rax)
 2222      000000
 2223              	.LVL250:
 212:fltk-1.3.4-1/jpeg/jquant1.c **** 
 2224              		.loc 1 212 5 is_stmt 0 view .LVU750
 2225 010f 498B06   		movq	(%r14), %rax
 2226 0112 89502C   		movl	%edx, 44(%rax)
 2227 0115 498B06   		movq	(%r14), %rax
 2228 0118 FF10     		call	*(%rax)
 2229              	.LVL251:
 2230              	.L149:
 216:fltk-1.3.4-1/jpeg/jquant1.c ****     Ncolors[i] = iroot;
 2231              		.loc 1 216 15 is_stmt 1 view .LVU751
 216:fltk-1.3.4-1/jpeg/jquant1.c ****     Ncolors[i] = iroot;
 2232              		.loc 1 216 3 is_stmt 0 view .LVU752
 2233 011a 85DB     		testl	%ebx, %ebx
 2234 011c 0F8EB602 		jle	.L173
 2234      0000
 2235 0122 488B7424 		movq	8(%rsp), %rsi
 2235      08
 2236 0127 8D53FF   		leal	-1(%rbx), %edx
 2237 012a 4C89F8   		movq	%r15, %rax
 2238 012d 41BC0100 		movl	$1, %r12d
 2238      0000
 2239 0133 488D5496 		leaq	64(%rsi,%rdx,4), %rdx
 2239      40
 2240              	.LVL252:
 2241 0138 0F1F8400 		.p2align 4,,10
 2241      00000000 
 2242              		.p2align 3
 2243              	.L151:
 217:fltk-1.3.4-1/jpeg/jquant1.c ****     total_colors *= iroot;
 2244              		.loc 1 217 5 is_stmt 1 view .LVU753
 217:fltk-1.3.4-1/jpeg/jquant1.c ****     total_colors *= iroot;
 2245              		.loc 1 217 16 is_stmt 0 view .LVU754
 2246 0140 448928   		movl	%r13d, (%rax)
 218:fltk-1.3.4-1/jpeg/jquant1.c ****   }
 2247              		.loc 1 218 5 is_stmt 1 view .LVU755
 2248 0143 4883C004 		addq	$4, %rax
 218:fltk-1.3.4-1/jpeg/jquant1.c ****   }
 2249              		.loc 1 218 18 is_stmt 0 view .LVU756
 2250 0147 450FAFE5 		imull	%r13d, %r12d
 2251              	.LVL253:
 216:fltk-1.3.4-1/jpeg/jquant1.c ****     Ncolors[i] = iroot;
 2252              		.loc 1 216 23 is_stmt 1 view .LVU757
 216:fltk-1.3.4-1/jpeg/jquant1.c ****     Ncolors[i] = iroot;
 2253              		.loc 1 216 15 view .LVU758
 216:fltk-1.3.4-1/jpeg/jquant1.c ****     Ncolors[i] = iroot;
 2254              		.loc 1 216 3 is_stmt 0 view .LVU759
 2255 014b 4839C2   		cmpq	%rax, %rdx
 2256 014e 75F0     		jne	.L151
 229:fltk-1.3.4-1/jpeg/jquant1.c ****       /* calculate new total_colors if Ncolors[j] is incremented */
 2257              		.loc 1 229 61 view .LVU760
 2258 0150 4C8D0D00 		leaq	RGB_order.4419(%rip), %r9
 2258      000000
 2259              	.LVL254:
 2260 0157 660F1F84 		.p2align 4,,10
 2260      00000000 
 2260      00
 2261              		.p2align 3
 2262              	.L156:
 226:fltk-1.3.4-1/jpeg/jquant1.c ****     changed = FALSE;
 2263              		.loc 1 226 3 is_stmt 1 view .LVU761
 227:fltk-1.3.4-1/jpeg/jquant1.c ****     for (i = 0; i < nc; i++) {
 2264              		.loc 1 227 5 view .LVU762
 228:fltk-1.3.4-1/jpeg/jquant1.c ****       j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 2265              		.loc 1 228 5 view .LVU763
 228:fltk-1.3.4-1/jpeg/jquant1.c ****       j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 2266              		.loc 1 228 17 view .LVU764
 216:fltk-1.3.4-1/jpeg/jquant1.c ****     Ncolors[i] = iroot;
 2267              		.loc 1 216 3 is_stmt 0 view .LVU765
 2268 0160 31F6     		xorl	%esi, %esi
 227:fltk-1.3.4-1/jpeg/jquant1.c ****     for (i = 0; i < nc; i++) {
 2269              		.loc 1 227 13 view .LVU766
 2270 0162 31FF     		xorl	%edi, %edi
 2271 0164 EB1D     		jmp	.L154
 2272              	.LVL255:
 2273 0166 662E0F1F 		.p2align 4,,10
 2273      84000000 
 2273      0000
 2274              		.p2align 3
 2275              	.L192:
 235:fltk-1.3.4-1/jpeg/jquant1.c ****       total_colors = (int) temp;
 2276              		.loc 1 235 7 is_stmt 1 view .LVU767
 2277 0170 4883C601 		addq	$1, %rsi
 2278              	.LVL256:
 235:fltk-1.3.4-1/jpeg/jquant1.c ****       total_colors = (int) temp;
 2279              		.loc 1 235 17 is_stmt 0 view .LVU768
 2280 0174 418908   		movl	%ecx, (%r8)
 236:fltk-1.3.4-1/jpeg/jquant1.c ****       changed = TRUE;
 2281              		.loc 1 236 7 is_stmt 1 view .LVU769
 236:fltk-1.3.4-1/jpeg/jquant1.c ****       changed = TRUE;
 2282              		.loc 1 236 20 is_stmt 0 view .LVU770
 2283 0177 4189C4   		movl	%eax, %r12d
 2284              	.LVL257:
 237:fltk-1.3.4-1/jpeg/jquant1.c ****     }
 2285              		.loc 1 237 7 is_stmt 1 view .LVU771
 228:fltk-1.3.4-1/jpeg/jquant1.c ****       j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 2286              		.loc 1 228 25 view .LVU772
 228:fltk-1.3.4-1/jpeg/jquant1.c ****       j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 2287              		.loc 1 228 17 view .LVU773
 237:fltk-1.3.4-1/jpeg/jquant1.c ****     }
 2288              		.loc 1 237 15 is_stmt 0 view .LVU774
 2289 017a BF010000 		movl	$1, %edi
 2289      00
 228:fltk-1.3.4-1/jpeg/jquant1.c ****       j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 2290              		.loc 1 228 5 view .LVU775
 2291 017f 39F3     		cmpl	%esi, %ebx
 2292 0181 7EDD     		jle	.L156
 2293              	.LVL258:
 2294              	.L154:
 229:fltk-1.3.4-1/jpeg/jquant1.c ****       /* calculate new total_colors if Ncolors[j] is incremented */
 2295              		.loc 1 229 61 view .LVU776
 2296 0183 41837E40 		cmpl	$2, 64(%r14)
 2296      02
 2297 0188 4863C6   		movslq	%esi, %rax
 2298              	.LVL259:
 229:fltk-1.3.4-1/jpeg/jquant1.c ****       /* calculate new total_colors if Ncolors[j] is incremented */
 2299              		.loc 1 229 7 is_stmt 1 view .LVU777
 229:fltk-1.3.4-1/jpeg/jquant1.c ****       /* calculate new total_colors if Ncolors[j] is incremented */
 2300              		.loc 1 229 61 is_stmt 0 view .LVU778
 2301 018b 7504     		jne	.L152
 2302 018d 496304B1 		movslq	(%r9,%rsi,4), %rax
 2303              	.L152:
 2304              	.LVL260:
 231:fltk-1.3.4-1/jpeg/jquant1.c ****       temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 2305              		.loc 1 231 7 is_stmt 1 view .LVU779
 231:fltk-1.3.4-1/jpeg/jquant1.c ****       temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 2306              		.loc 1 231 36 is_stmt 0 view .LVU780
 2307 0191 4D8D0487 		leaq	(%r15,%rax,4), %r8
 231:fltk-1.3.4-1/jpeg/jquant1.c ****       temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 2308              		.loc 1 231 27 view .LVU781
 2309 0195 4489E0   		movl	%r12d, %eax
 2310              	.LVL261:
 231:fltk-1.3.4-1/jpeg/jquant1.c ****       temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 2311              		.loc 1 231 36 view .LVU782
 2312 0198 418B08   		movl	(%r8), %ecx
 231:fltk-1.3.4-1/jpeg/jquant1.c ****       temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 2313              		.loc 1 231 27 view .LVU783
 2314 019b 99       		cltd
 2315 019c F7F9     		idivl	%ecx
 232:fltk-1.3.4-1/jpeg/jquant1.c ****       if (temp > (long) max_colors)
 2316              		.loc 1 232 25 view .LVU784
 2317 019e 83C101   		addl	$1, %ecx
 231:fltk-1.3.4-1/jpeg/jquant1.c ****       temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 2318              		.loc 1 231 12 view .LVU785
 2319 01a1 4863D0   		movslq	%eax, %rdx
 2320              	.LVL262:
 232:fltk-1.3.4-1/jpeg/jquant1.c ****       if (temp > (long) max_colors)
 2321              		.loc 1 232 7 is_stmt 1 view .LVU786
 232:fltk-1.3.4-1/jpeg/jquant1.c ****       if (temp > (long) max_colors)
 2322              		.loc 1 232 25 is_stmt 0 view .LVU787
 2323 01a4 4863C1   		movslq	%ecx, %rax
 232:fltk-1.3.4-1/jpeg/jquant1.c ****       if (temp > (long) max_colors)
 2324              		.loc 1 232 12 view .LVU788
 2325 01a7 480FAFC2 		imulq	%rdx, %rax
 2326              	.LVL263:
 233:fltk-1.3.4-1/jpeg/jquant1.c **** 	break;			/* won't fit, done with this pass */
 2327              		.loc 1 233 7 is_stmt 1 view .LVU789
 233:fltk-1.3.4-1/jpeg/jquant1.c **** 	break;			/* won't fit, done with this pass */
 2328              		.loc 1 233 10 is_stmt 0 view .LVU790
 2329 01ab 4839E8   		cmpq	%rbp, %rax
 2330 01ae 7EC0     		jle	.L192
 239:fltk-1.3.4-1/jpeg/jquant1.c **** 
 2331              		.loc 1 239 11 is_stmt 1 view .LVU791
 239:fltk-1.3.4-1/jpeg/jquant1.c **** 
 2332              		.loc 1 239 3 is_stmt 0 view .LVU792
 2333 01b0 85FF     		testl	%edi, %edi
 2334 01b2 75AC     		jne	.L156
 2335              	.LVL264:
 2336              	.L150:
 241:fltk-1.3.4-1/jpeg/jquant1.c **** }
 2337              		.loc 1 241 3 is_stmt 1 view .LVU793
 241:fltk-1.3.4-1/jpeg/jquant1.c **** }
 2338              		.loc 1 241 3 is_stmt 0 view .LVU794
 2339              	.LBE62:
 2340              	.LBE64:
 285:fltk-1.3.4-1/jpeg/jquant1.c ****     TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 2341              		.loc 1 285 3 is_stmt 1 view .LVU795
 285:fltk-1.3.4-1/jpeg/jquant1.c ****     TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 2342              		.loc 1 285 6 is_stmt 0 view .LVU796
 2343 01b4 4183BE90 		cmpl	$3, 144(%r14)
 2343      00000003 
 2344 01bc 498B06   		movq	(%r14), %rax
 2345 01bf 0F848301 		je	.L193
 2345      0000
 290:fltk-1.3.4-1/jpeg/jquant1.c **** 
 2346              		.loc 1 290 5 is_stmt 1 view .LVU797
 2347 01c5 C7402861 		movl	$97, 40(%rax)
 2347      000000
 2348 01cc 498B06   		movq	(%r14), %rax
 2349 01cf BE010000 		movl	$1, %esi
 2349      00
 2350 01d4 4C89F7   		movq	%r14, %rdi
 2351 01d7 4489602C 		movl	%r12d, 44(%rax)
 2352 01db 498B06   		movq	(%r14), %rax
 2353 01de FF5008   		call	*8(%rax)
 2354              	.LVL265:
 2355              	.L158:
 296:fltk-1.3.4-1/jpeg/jquant1.c ****     ((j_common_ptr) cinfo, JPOOL_IMAGE,
 2356              		.loc 1 296 3 view .LVU798
 296:fltk-1.3.4-1/jpeg/jquant1.c ****     ((j_common_ptr) cinfo, JPOOL_IMAGE,
 2357              		.loc 1 296 15 is_stmt 0 view .LVU799
 2358 01e1 498B4608 		movq	8(%r14), %rax
 2359 01e5 4489E2   		movl	%r12d, %edx
 2360 01e8 BE010000 		movl	$1, %esi
 2360      00
 2361 01ed 4C89F7   		movq	%r14, %rdi
 2362 01f0 418B8E90 		movl	144(%r14), %ecx
 2362      000000
 304:fltk-1.3.4-1/jpeg/jquant1.c ****     /* fill in colormap entries for i'th color component */
 2363              		.loc 1 304 3 view .LVU800
 2364 01f7 4489E5   		movl	%r12d, %ebp
 2365 01fa 4531ED   		xorl	%r13d, %r13d
 296:fltk-1.3.4-1/jpeg/jquant1.c ****     ((j_common_ptr) cinfo, JPOOL_IMAGE,
 2366              		.loc 1 296 15 view .LVU801
 2367 01fd FF5010   		call	*16(%rax)
 2368              	.LVL266:
 304:fltk-1.3.4-1/jpeg/jquant1.c ****     /* fill in colormap entries for i'th color component */
 2369              		.loc 1 304 3 view .LVU802
 2370 0200 418B9690 		movl	144(%r14), %edx
 2370      000000
 296:fltk-1.3.4-1/jpeg/jquant1.c ****     ((j_common_ptr) cinfo, JPOOL_IMAGE,
 2371              		.loc 1 296 15 view .LVU803
 2372 0207 48894424 		movq	%rax, 16(%rsp)
 2372      10
 2373              	.LVL267:
 302:fltk-1.3.4-1/jpeg/jquant1.c **** 
 2374              		.loc 1 302 3 is_stmt 1 view .LVU804
 304:fltk-1.3.4-1/jpeg/jquant1.c ****     /* fill in colormap entries for i'th color component */
 2375              		.loc 1 304 3 view .LVU805
 304:fltk-1.3.4-1/jpeg/jquant1.c ****     /* fill in colormap entries for i'th color component */
 2376              		.loc 1 304 15 view .LVU806
 304:fltk-1.3.4-1/jpeg/jquant1.c ****     /* fill in colormap entries for i'th color component */
 2377              		.loc 1 304 3 is_stmt 0 view .LVU807
 2378 020c 85D2     		testl	%edx, %edx
 2379 020e 0F8EFD00 		jle	.L163
 2379      0000
 2380              	.LVL268:
 2381              		.p2align 4,,10
 2382 0214 0F1F4000 		.p2align 3
 2383              	.L159:
 306:fltk-1.3.4-1/jpeg/jquant1.c ****     blksize = blkdist / nci;
 2384              		.loc 1 306 5 is_stmt 1 view .LVU808
 306:fltk-1.3.4-1/jpeg/jquant1.c ****     blksize = blkdist / nci;
 2385              		.loc 1 306 9 is_stmt 0 view .LVU809
 2386 0218 488B4424 		movq	8(%rsp), %rax
 2386      08
 2387 021d 89EE     		movl	%ebp, %esi
 2388 021f 428B4CA8 		movl	60(%rax,%r13,4), %ecx
 2388      3C
 2389              	.LVL269:
 307:fltk-1.3.4-1/jpeg/jquant1.c ****     for (j = 0; j < nci; j++) {
 2390              		.loc 1 307 5 is_stmt 1 view .LVU810
 307:fltk-1.3.4-1/jpeg/jquant1.c ****     for (j = 0; j < nci; j++) {
 2391              		.loc 1 307 13 is_stmt 0 view .LVU811
 2392 0224 89E8     		movl	%ebp, %eax
 2393 0226 99       		cltd
 2394 0227 F7F9     		idivl	%ecx
 2395 0229 4189C3   		movl	%eax, %r11d
 2396 022c 89C5     		movl	%eax, %ebp
 2397              	.LVL270:
 308:fltk-1.3.4-1/jpeg/jquant1.c ****       /* Compute j'th output value (out of nci) for component */
 2398              		.loc 1 308 5 is_stmt 1 view .LVU812
 308:fltk-1.3.4-1/jpeg/jquant1.c ****       /* Compute j'th output value (out of nci) for component */
 2399              		.loc 1 308 17 view .LVU813
 308:fltk-1.3.4-1/jpeg/jquant1.c ****       /* Compute j'th output value (out of nci) for component */
 2400              		.loc 1 308 5 is_stmt 0 view .LVU814
 2401 022e 85C9     		testl	%ecx, %ecx
 2402 0230 0F8ECA00 		jle	.L170
 2402      0000
 310:fltk-1.3.4-1/jpeg/jquant1.c ****       /* Fill in all colormap entries that have this value of this component */
 2403              		.loc 1 310 13 view .LVU815
 2404 0236 83E901   		subl	$1, %ecx
 2405              	.LVL271:
 310:fltk-1.3.4-1/jpeg/jquant1.c ****       /* Fill in all colormap entries that have this value of this component */
 2406              		.loc 1 310 13 view .LVU816
 2407 0239 4963FB   		movslq	%r11d, %rdi
 2408              	.LBB65:
 2409              	.LBB66:
 255:fltk-1.3.4-1/jpeg/jquant1.c **** }
 2410              		.loc 1 255 47 view .LVU817
 2411 023c 4531D2   		xorl	%r10d, %r10d
 2412 023f 4863C1   		movslq	%ecx, %rax
 2413              	.LVL272:
 255:fltk-1.3.4-1/jpeg/jquant1.c **** }
 2414              		.loc 1 255 47 view .LVU818
 2415 0242 48897C24 		movq	%rdi, 32(%rsp)
 2415      20
 2416 0247 31FF     		xorl	%edi, %edi
 2417 0249 48894424 		movq	%rax, 40(%rsp)
 2417      28
 2418 024e 89C8     		movl	%ecx, %eax
 2419 0250 89C9     		movl	%ecx, %ecx
 2420 0252 4889CA   		movq	%rcx, %rdx
 2421 0255 D1F8     		sarl	%eax
 2422 0257 4898     		cltq
 2423 0259 48C1E208 		salq	$8, %rdx
 2424 025d 4829CA   		subq	%rcx, %rdx
 2425 0260 488D88FF 		leaq	255(%rax), %rcx
 2425      000000
 2426 0267 488D1C0A 		leaq	(%rdx,%rcx), %rbx
 2427 026b 418D53FF 		leal	-1(%r11), %edx
 2428 026f 48895C24 		movq	%rbx, 24(%rsp)
 2428      18
 2429 0274 4863DE   		movslq	%esi, %rbx
 2430 0277 4C8D7A01 		leaq	1(%rdx), %r15
 2431 027b 48895C24 		movq	%rbx, 48(%rsp)
 2431      30
 2432 0280 89F3     		movl	%esi, %ebx
 2433              	.LVL273:
 2434              		.p2align 4,,10
 2435 0282 660F1F44 		.p2align 3
 2435      0000
 2436              	.L169:
 255:fltk-1.3.4-1/jpeg/jquant1.c **** }
 2437              		.loc 1 255 47 view .LVU819
 2438              	.LBE66:
 2439              	.LBE65:
 310:fltk-1.3.4-1/jpeg/jquant1.c ****       /* Fill in all colormap entries that have this value of this component */
 2440              		.loc 1 310 7 is_stmt 1 view .LVU820
 2441              	.LBB69:
 2442              	.LBI65:
 246:fltk-1.3.4-1/jpeg/jquant1.c **** /* Return j'th output value, where j will range from 0 to maxj */
 2443              		.loc 1 246 1 view .LVU821
 2444              	.LBB67:
 255:fltk-1.3.4-1/jpeg/jquant1.c **** }
 2445              		.loc 1 255 3 view .LVU822
 255:fltk-1.3.4-1/jpeg/jquant1.c **** }
 2446              		.loc 1 255 51 is_stmt 0 view .LVU823
 2447 0288 4899     		cqto
 2448              	.LBE67:
 2449              	.LBE69:
 312:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* fill in blksize entries beginning at ptr */
 2450              		.loc 1 312 16 view .LVU824
 2451 028a 4189F8   		movl	%edi, %r8d
 2452              	.LBB70:
 2453              	.LBB68:
 255:fltk-1.3.4-1/jpeg/jquant1.c **** }
 2454              		.loc 1 255 51 view .LVU825
 2455 028d 48F77C24 		idivq	40(%rsp)
 2455      28
 2456              	.LVL274:
 255:fltk-1.3.4-1/jpeg/jquant1.c **** }
 2457              		.loc 1 255 51 view .LVU826
 2458              	.LBE68:
 2459              	.LBE70:
 312:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* fill in blksize entries beginning at ptr */
 2460              		.loc 1 312 7 is_stmt 1 view .LVU827
 312:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* fill in blksize entries beginning at ptr */
 2461              		.loc 1 312 31 view .LVU828
 312:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* fill in blksize entries beginning at ptr */
 2462              		.loc 1 312 7 is_stmt 0 view .LVU829
 2463 0292 4439E7   		cmpl	%r12d, %edi
 2464 0295 7D48     		jge	.L164
 2465 0297 4C89D6   		movq	%r10, %rsi
 2466 029a 4189C1   		movl	%eax, %r9d
 2467              	.LVL275:
 2468 029d 0F1F00   		.p2align 4,,10
 2469              		.p2align 3
 2470              	.L165:
 314:fltk-1.3.4-1/jpeg/jquant1.c **** 	  colormap[i][ptr+k] = (JSAMPLE) val;
 2471              		.loc 1 314 14 is_stmt 1 view .LVU830
 314:fltk-1.3.4-1/jpeg/jquant1.c **** 	  colormap[i][ptr+k] = (JSAMPLE) val;
 2472              		.loc 1 314 2 is_stmt 0 view .LVU831
 2473 02a0 4889F0   		movq	%rsi, %rax
 2474 02a3 498D1437 		leaq	(%r15,%rsi), %rdx
 2475 02a7 4585DB   		testl	%r11d, %r11d
 2476 02aa 7E26     		jle	.L168
 314:fltk-1.3.4-1/jpeg/jquant1.c **** 	  colormap[i][ptr+k] = (JSAMPLE) val;
 2477              		.loc 1 314 2 view .LVU832
 2478 02ac 896C243C 		movl	%ebp, 60(%rsp)
 2479 02b0 4889D5   		movq	%rdx, %rbp
 2480              	.LVL276:
 2481              		.p2align 4,,10
 2482 02b3 0F1F4400 		.p2align 3
 2482      00
 2483              	.L166:
 315:fltk-1.3.4-1/jpeg/jquant1.c ****       }
 2484              		.loc 1 315 4 is_stmt 1 view .LVU833
 315:fltk-1.3.4-1/jpeg/jquant1.c ****       }
 2485              		.loc 1 315 23 is_stmt 0 view .LVU834
 2486 02b8 488B5424 		movq	16(%rsp), %rdx
 2486      10
 2487 02bd 4A8B14EA 		movq	(%rdx,%r13,8), %rdx
 2488 02c1 44880C02 		movb	%r9b, (%rdx,%rax)
 314:fltk-1.3.4-1/jpeg/jquant1.c **** 	  colormap[i][ptr+k] = (JSAMPLE) val;
 2489              		.loc 1 314 27 is_stmt 1 view .LVU835
 2490              	.LVL277:
 314:fltk-1.3.4-1/jpeg/jquant1.c **** 	  colormap[i][ptr+k] = (JSAMPLE) val;
 2491              		.loc 1 314 14 view .LVU836
 2492 02c5 4883C001 		addq	$1, %rax
 2493              	.LVL278:
 314:fltk-1.3.4-1/jpeg/jquant1.c **** 	  colormap[i][ptr+k] = (JSAMPLE) val;
 2494              		.loc 1 314 2 is_stmt 0 view .LVU837
 2495 02c9 4839C5   		cmpq	%rax, %rbp
 2496 02cc 75EA     		jne	.L166
 2497 02ce 8B6C243C 		movl	60(%rsp), %ebp
 2498              	.L168:
 312:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* fill in blksize entries beginning at ptr */
 2499              		.loc 1 312 51 is_stmt 1 view .LVU838
 312:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* fill in blksize entries beginning at ptr */
 2500              		.loc 1 312 55 is_stmt 0 view .LVU839
 2501 02d2 4101D8   		addl	%ebx, %r8d
 2502              	.LVL279:
 312:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* fill in blksize entries beginning at ptr */
 2503              		.loc 1 312 31 is_stmt 1 view .LVU840
 2504 02d5 48037424 		addq	48(%rsp), %rsi
 2504      30
 312:fltk-1.3.4-1/jpeg/jquant1.c **** 	/* fill in blksize entries beginning at ptr */
 2505              		.loc 1 312 7 is_stmt 0 view .LVU841
 2506 02da 4539E0   		cmpl	%r12d, %r8d
 2507 02dd 7CC1     		jl	.L165
 2508              	.L164:
 308:fltk-1.3.4-1/jpeg/jquant1.c ****       /* Compute j'th output value (out of nci) for component */
 2509              		.loc 1 308 26 is_stmt 1 view .LVU842
 308:fltk-1.3.4-1/jpeg/jquant1.c ****       /* Compute j'th output value (out of nci) for component */
 2510              		.loc 1 308 17 view .LVU843
 2511 02df 4889C8   		movq	%rcx, %rax
 2512 02e2 4401DF   		addl	%r11d, %edi
 2513 02e5 4C035424 		addq	32(%rsp), %r10
 2513      20
 308:fltk-1.3.4-1/jpeg/jquant1.c ****       /* Compute j'th output value (out of nci) for component */
 2514              		.loc 1 308 5 is_stmt 0 view .LVU844
 2515 02ea 48394C24 		cmpq	%rcx, 24(%rsp)
 2515      18
 2516 02ef 740F     		je	.L170
 2517 02f1 4881C1FF 		addq	$255, %rcx
 2517      000000
 2518 02f8 EB8E     		jmp	.L169
 2519              	.LVL280:
 2520 02fa 660F1F44 		.p2align 4,,10
 2520      0000
 2521              		.p2align 3
 2522              	.L170:
 318:fltk-1.3.4-1/jpeg/jquant1.c ****   }
 2523              		.loc 1 318 5 is_stmt 1 view .LVU845
 304:fltk-1.3.4-1/jpeg/jquant1.c ****     /* fill in colormap entries for i'th color component */
 2524              		.loc 1 304 48 view .LVU846
 304:fltk-1.3.4-1/jpeg/jquant1.c ****     /* fill in colormap entries for i'th color component */
 2525              		.loc 1 304 15 view .LVU847
 2526 0300 4983C501 		addq	$1, %r13
 2527              	.LVL281:
 304:fltk-1.3.4-1/jpeg/jquant1.c ****     /* fill in colormap entries for i'th color component */
 2528              		.loc 1 304 3 is_stmt 0 view .LVU848
 2529 0304 4539AE90 		cmpl	%r13d, 144(%r14)
 2529      000000
 2530 030b 0F8F07FF 		jg	.L159
 2530      FFFF
 2531              	.LVL282:
 2532              	.L163:
 324:fltk-1.3.4-1/jpeg/jquant1.c ****   cquantize->sv_actual = total_colors;
 2533              		.loc 1 324 3 is_stmt 1 view .LVU849
 324:fltk-1.3.4-1/jpeg/jquant1.c ****   cquantize->sv_actual = total_colors;
 2534              		.loc 1 324 26 is_stmt 0 view .LVU850
 2535 0311 488B4424 		movq	8(%rsp), %rax
 2535      08
 2536 0316 488B5C24 		movq	16(%rsp), %rbx
 2536      10
 2537              	.LBE59:
 2538              	.LBE58:
 845:fltk-1.3.4-1/jpeg/jquant1.c ****   create_colorindex(cinfo);
 2539              		.loc 1 845 3 view .LVU851
 2540 031b 4C89F7   		movq	%r14, %rdi
 2541              	.LBB76:
 2542              	.LBB73:
 324:fltk-1.3.4-1/jpeg/jquant1.c ****   cquantize->sv_actual = total_colors;
 2543              		.loc 1 324 26 view .LVU852
 2544 031e 48895820 		movq	%rbx, 32(%rax)
 325:fltk-1.3.4-1/jpeg/jquant1.c **** }
 2545              		.loc 1 325 3 is_stmt 1 view .LVU853
 325:fltk-1.3.4-1/jpeg/jquant1.c **** }
 2546              		.loc 1 325 24 is_stmt 0 view .LVU854
 2547 0322 44896028 		movl	%r12d, 40(%rax)
 2548              	.LVL283:
 325:fltk-1.3.4-1/jpeg/jquant1.c **** }
 2549              		.loc 1 325 24 view .LVU855
 2550              	.LBE73:
 2551              	.LBE76:
 2552              		.loc 1 845 3 is_stmt 1 view .LVU856
 2553 0326 E8000000 		call	create_colorindex
 2553      00
 2554              	.LVL284:
 846:fltk-1.3.4-1/jpeg/jquant1.c **** 
 847:fltk-1.3.4-1/jpeg/jquant1.c ****   /* Allocate Floyd-Steinberg workspace now if requested.
 848:fltk-1.3.4-1/jpeg/jquant1.c ****    * We do this now since it is FAR storage and may affect the memory
 849:fltk-1.3.4-1/jpeg/jquant1.c ****    * manager's space calculations.  If the user changes to FS dither
 850:fltk-1.3.4-1/jpeg/jquant1.c ****    * mode in a later pass, we will allocate the space then, and will
 851:fltk-1.3.4-1/jpeg/jquant1.c ****    * possibly overrun the max_memory_to_use setting.
 852:fltk-1.3.4-1/jpeg/jquant1.c ****    */
 853:fltk-1.3.4-1/jpeg/jquant1.c ****   if (cinfo->dither_mode == JDITHER_FS)
 2555              		.loc 1 853 3 view .LVU857
 2556              		.loc 1 853 6 is_stmt 0 view .LVU858
 2557 032b 41837E70 		cmpl	$2, 112(%r14)
 2557      02
 2558 0330 744E     		je	.L194
 2559              	.L143:
 854:fltk-1.3.4-1/jpeg/jquant1.c ****     alloc_fs_workspace(cinfo);
 855:fltk-1.3.4-1/jpeg/jquant1.c **** }
 2560              		.loc 1 855 1 view .LVU859
 2561 0332 4883C448 		addq	$72, %rsp
 2562              		.cfi_remember_state
 2563              		.cfi_def_cfa_offset 56
 2564 0336 5B       		popq	%rbx
 2565              		.cfi_def_cfa_offset 48
 2566 0337 5D       		popq	%rbp
 2567              		.cfi_def_cfa_offset 40
 2568 0338 415C     		popq	%r12
 2569              		.cfi_def_cfa_offset 32
 2570 033a 415D     		popq	%r13
 2571              		.cfi_def_cfa_offset 24
 2572 033c 415E     		popq	%r14
 2573              		.cfi_def_cfa_offset 16
 2574              	.LVL285:
 2575              		.loc 1 855 1 view .LVU860
 2576 033e 415F     		popq	%r15
 2577              		.cfi_def_cfa_offset 8
 2578 0340 C3       		ret
 2579              	.LVL286:
 2580              		.p2align 4,,10
 2581 0341 0F1F8000 		.p2align 3
 2581      000000
 2582              	.L193:
 2583              		.cfi_restore_state
 2584              	.LBB77:
 2585              	.LBB74:
 286:fltk-1.3.4-1/jpeg/jquant1.c **** 	     total_colors, cquantize->Ncolors[0],
 2586              		.loc 1 286 5 is_stmt 1 view .LVU861
 2587              	.LBB71:
 286:fltk-1.3.4-1/jpeg/jquant1.c **** 	     total_colors, cquantize->Ncolors[0],
 2588              		.loc 1 286 5 view .LVU862
 286:fltk-1.3.4-1/jpeg/jquant1.c **** 	     total_colors, cquantize->Ncolors[0],
 2589              		.loc 1 286 5 view .LVU863
 2590 0348 488B7C24 		movq	8(%rsp), %rdi
 2590      08
 2591 034d 4489602C 		movl	%r12d, 44(%rax)
 2592              	.LVL287:
 286:fltk-1.3.4-1/jpeg/jquant1.c **** 	     total_colors, cquantize->Ncolors[0],
 2593              		.loc 1 286 5 view .LVU864
 2594 0351 BE010000 		movl	$1, %esi
 2594      00
 2595 0356 8B573C   		movl	60(%rdi), %edx
 2596 0359 895030   		movl	%edx, 48(%rax)
 286:fltk-1.3.4-1/jpeg/jquant1.c **** 	     total_colors, cquantize->Ncolors[0],
 2597              		.loc 1 286 5 view .LVU865
 2598 035c 8B5740   		movl	64(%rdi), %edx
 2599 035f 895034   		movl	%edx, 52(%rax)
 286:fltk-1.3.4-1/jpeg/jquant1.c **** 	     total_colors, cquantize->Ncolors[0],
 2600              		.loc 1 286 5 view .LVU866
 2601 0362 8B5744   		movl	68(%rdi), %edx
 2602 0365 4C89F7   		movq	%r14, %rdi
 2603 0368 895038   		movl	%edx, 56(%rax)
 286:fltk-1.3.4-1/jpeg/jquant1.c **** 	     total_colors, cquantize->Ncolors[0],
 2604              		.loc 1 286 5 view .LVU867
 2605 036b 498B06   		movq	(%r14), %rax
 2606 036e C7402860 		movl	$96, 40(%rax)
 2606      000000
 286:fltk-1.3.4-1/jpeg/jquant1.c **** 	     total_colors, cquantize->Ncolors[0],
 2607              		.loc 1 286 5 view .LVU868
 2608 0375 498B06   		movq	(%r14), %rax
 2609 0378 FF5008   		call	*8(%rax)
 2610              	.LVL288:
 2611              	.LBE71:
 286:fltk-1.3.4-1/jpeg/jquant1.c **** 	     total_colors, cquantize->Ncolors[0],
 2612              		.loc 1 286 5 view .LVU869
 2613 037b E961FEFF 		jmp	.L158
 2613      FF
 2614              	.LVL289:
 2615              		.p2align 4,,10
 2616              		.p2align 3
 2617              	.L194:
 286:fltk-1.3.4-1/jpeg/jquant1.c **** 	     total_colors, cquantize->Ncolors[0],
 2618              		.loc 1 286 5 is_stmt 0 view .LVU870
 2619              	.LBE74:
 2620              	.LBE77:
 854:fltk-1.3.4-1/jpeg/jquant1.c ****     alloc_fs_workspace(cinfo);
 2621              		.loc 1 854 5 is_stmt 1 view .LVU871
 2622              	.LBB78:
 2623              	.LBI78:
 723:fltk-1.3.4-1/jpeg/jquant1.c **** {
 2624              		.loc 1 723 1 view .LVU872
 2625              	.LBB79:
 725:fltk-1.3.4-1/jpeg/jquant1.c ****   size_t arraysize;
 2626              		.loc 1 725 3 view .LVU873
 726:fltk-1.3.4-1/jpeg/jquant1.c ****   int i;
 2627              		.loc 1 726 3 view .LVU874
 727:fltk-1.3.4-1/jpeg/jquant1.c **** 
 2628              		.loc 1 727 3 view .LVU875
 729:fltk-1.3.4-1/jpeg/jquant1.c ****   for (i = 0; i < cinfo->out_color_components; i++) {
 2629              		.loc 1 729 3 view .LVU876
 729:fltk-1.3.4-1/jpeg/jquant1.c ****   for (i = 0; i < cinfo->out_color_components; i++) {
 2630              		.loc 1 729 46 is_stmt 0 view .LVU877
 2631 0380 418B8688 		movl	136(%r14), %eax
 2631      000000
 2632 0387 8D6802   		leal	2(%rax), %ebp
 730:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->fserrors[i] = (FSERRPTR)
 2633              		.loc 1 730 3 view .LVU878
 2634 038a 418B8690 		movl	144(%r14), %eax
 2634      000000
 729:fltk-1.3.4-1/jpeg/jquant1.c ****   for (i = 0; i < cinfo->out_color_components; i++) {
 2635              		.loc 1 729 13 view .LVU879
 2636 0391 4801ED   		addq	%rbp, %rbp
 2637              	.LVL290:
 730:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->fserrors[i] = (FSERRPTR)
 2638              		.loc 1 730 3 is_stmt 1 view .LVU880
 730:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->fserrors[i] = (FSERRPTR)
 2639              		.loc 1 730 15 view .LVU881
 730:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->fserrors[i] = (FSERRPTR)
 2640              		.loc 1 730 3 is_stmt 0 view .LVU882
 2641 0394 85C0     		testl	%eax, %eax
 2642 0396 7E9A     		jle	.L143
 725:fltk-1.3.4-1/jpeg/jquant1.c ****   size_t arraysize;
 2643              		.loc 1 725 20 view .LVU883
 2644 0398 4D8BA690 		movq	656(%r14), %r12
 2644      020000
 2645 039f 31DB     		xorl	%ebx, %ebx
 2646              	.LVL291:
 2647              	.L171:
 731:fltk-1.3.4-1/jpeg/jquant1.c ****       (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 2648              		.loc 1 731 5 is_stmt 1 view .LVU884
 732:fltk-1.3.4-1/jpeg/jquant1.c ****   }
 2649              		.loc 1 732 8 is_stmt 0 view .LVU885
 2650 03a1 498B4608 		movq	8(%r14), %rax
 2651 03a5 4889EA   		movq	%rbp, %rdx
 2652 03a8 BE010000 		movl	$1, %esi
 2652      00
 2653 03ad 4C89F7   		movq	%r14, %rdi
 2654 03b0 FF5008   		call	*8(%rax)
 2655              	.LVL292:
 731:fltk-1.3.4-1/jpeg/jquant1.c ****       (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 2656              		.loc 1 731 28 view .LVU886
 2657 03b3 498944DC 		movq	%rax, 112(%r12,%rbx,8)
 2657      70
 730:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->fserrors[i] = (FSERRPTR)
 2658              		.loc 1 730 48 is_stmt 1 view .LVU887
 2659              	.LVL293:
 730:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->fserrors[i] = (FSERRPTR)
 2660              		.loc 1 730 15 view .LVU888
 2661 03b8 4883C301 		addq	$1, %rbx
 2662              	.LVL294:
 730:fltk-1.3.4-1/jpeg/jquant1.c ****     cquantize->fserrors[i] = (FSERRPTR)
 2663              		.loc 1 730 3 is_stmt 0 view .LVU889
 2664 03bc 41399E90 		cmpl	%ebx, 144(%r14)
 2664      000000
 2665 03c3 7FDC     		jg	.L171
 2666              	.LBE79:
 2667              	.LBE78:
 2668              		.loc 1 855 1 view .LVU890
 2669 03c5 4883C448 		addq	$72, %rsp
 2670              		.cfi_remember_state
 2671              		.cfi_def_cfa_offset 56
 2672 03c9 5B       		popq	%rbx
 2673              		.cfi_def_cfa_offset 48
 2674 03ca 5D       		popq	%rbp
 2675              		.cfi_def_cfa_offset 40
 2676              	.LVL295:
 2677              		.loc 1 855 1 view .LVU891
 2678 03cb 415C     		popq	%r12
 2679              		.cfi_def_cfa_offset 32
 2680              	.LVL296:
 2681              		.loc 1 855 1 view .LVU892
 2682 03cd 415D     		popq	%r13
 2683              		.cfi_def_cfa_offset 24
 2684 03cf 415E     		popq	%r14
 2685              		.cfi_def_cfa_offset 16
 2686              	.LVL297:
 2687              		.loc 1 855 1 view .LVU893
 2688 03d1 415F     		popq	%r15
 2689              		.cfi_def_cfa_offset 8
 2690 03d3 C3       		ret
 2691              	.LVL298:
 2692              		.p2align 4,,10
 2693 03d4 0F1F4000 		.p2align 3
 2694              	.L173:
 2695              		.cfi_restore_state
 2696              	.LBB80:
 2697              	.LBB75:
 2698              	.LBB72:
 2699              	.LBB63:
 216:fltk-1.3.4-1/jpeg/jquant1.c ****     Ncolors[i] = iroot;
 2700              		.loc 1 216 3 view .LVU894
 2701 03d8 41BC0100 		movl	$1, %r12d
 2701      0000
 2702 03de E9D1FDFF 		jmp	.L150
 2702      FF
 2703              	.LBE63:
 2704              	.LBE72:
 2705              	.LBE75:
 2706              	.LBE80:
 2707              		.cfi_endproc
 2708              	.LFE67:
 2710              		.section	.rodata.RGB_order.4419,"a"
 2711              		.align 8
 2714              	RGB_order.4419:
 2715 0000 01000000 		.long	1
 2716 0004 00000000 		.long	0
 2717 0008 02000000 		.long	2
 2718              		.section	.rodata.base_dither_matrix,"a"
 2719              		.align 32
 2722              	base_dither_matrix:
 2723 0000 00       		.string	""
 2724 0001 C030F00C 		.ascii	"\3000\360\f\314<\374\003\3033\363\017\317?\377"
 2724      CC3CFC03 
 2724      C333F30F 
 2724      CF3FFF
 2725 0010 8040B070 		.ascii	"\200@\260p\214L\274|\203C\263s\217O\277\177"
 2725      8C4CBC7C 
 2725      8343B373 
 2725      8F4FBF7F 
 2726 0020 20E010D0 		.ascii	" \340\020\320,\354\034\334#\343\023\323/\357\037\337"
 2726      2CEC1CDC 
 2726      23E313D3 
 2726      2FEF1FDF 
 2727 0030 A0609050 		.ascii	"\240`\220P\254l\234\\\243c\223S\257o\237_"
 2727      AC6C9C5C 
 2727      A3639353 
 2727      AF6F9F5F 
 2728 0040 08C838F8 		.ascii	"\b\3108\370\004\3044\364\013\313;\373\007\3077\367"
 2728      04C434F4 
 2728      0BCB3BFB 
 2728      07C737F7 
 2729 0050 8848B878 		.ascii	"\210H\270x\204D\264t\213K\273{\207G\267w"
 2729      8444B474 
 2729      8B4BBB7B 
 2729      8747B777 
 2730 0060 28E818D8 		.ascii	"(\350\030\330$\344\024\324+\353\033\333'\347\027\327"
 2730      24E414D4 
 2730      2BEB1BDB 
 2730      27E717D7 
 2731 0070 A8689858 		.ascii	"\250h\230X\244d\224T\253k\233[\247g\227W"
 2731      A4649454 
 2731      AB6B9B5B 
 2731      A7679757 
 2732 0080 02C232F2 		.ascii	"\002\3022\362\016\316>\376\001\3011\361\r\315=\375"
 2732      0ECE3EFE 
 2732      01C131F1 
 2732      0DCD3DFD 
 2733 0090 8242B272 		.ascii	"\202B\262r\216N\276~\201A\261q\215M\275}"
 2733      8E4EBE7E 
 2733      8141B171 
 2733      8D4DBD7D 
 2734 00a0 22E212D2 		.ascii	"\"\342\022\322.\356\036\336!\341\021\321-\355\035\335"
 2734      2EEE1EDE 
 2734      21E111D1 
 2734      2DED1DDD 
 2735 00b0 A2629252 		.ascii	"\242b\222R\256n\236^\241a\221Q\255m\235]"
 2735      AE6E9E5E 
 2735      A1619151 
 2735      AD6D9D5D 
 2736 00c0 0ACA3AFA 		.ascii	"\n\312:\372\006\3066\366\t\3119\371\005\3055\365"
 2736      06C636F6 
 2736      09C939F9 
 2736      05C535F5 
 2737 00d0 8A4ABA7A 		.ascii	"\212J\272z\206F\266v\211I\271y\205E\265u"
 2737      8646B676 
 2737      8949B979 
 2737      8545B575 
 2738 00e0 2AEA1ADA 		.ascii	"*\352\032\332&\346\026\326)\351\031\331%\345\025\325"
 2738      26E616D6 
 2738      29E919D9 
 2738      25E515D5 
 2739 00f0 AA6A9A5A 		.ascii	"\252j\232Z\246f\226V\251i\231Y\245e\225U"
 2739      A6669656 
 2739      A9699959 
 2739      A5659555 
 2740              		.text
 2741              	.Letext0:
 2742              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 2743              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 2744              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 2745              		.file 6 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 2746              		.file 7 "/usr/include/stdio.h"
 2747              		.file 8 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 2748              		.file 9 "fltk-1.3.4-1/jpeg/jmorecfg.h"
 2749              		.file 10 "fltk-1.3.4-1/jpeg/jpeglib.h"
 2750              		.file 11 "fltk-1.3.4-1/jpeg/jpegint.h"
 2751              		.file 12 "fltk-1.3.4-1/jpeg/jerror.h"
 2752              		.file 13 "<built-in>"
 20095              		.section	.note.gnu.property,"a"
 20096              		.align 8
 20097 0000 04000000 		.long	 1f - 0f
 20098 0004 10000000 		.long	 4f - 1f
 20099 0008 05000000 		.long	 5
 20100              	0:
 20101 000c 474E5500 		.string	 "GNU"
 20102              	1:
 20103              		.align 8
 20104 0010 020000C0 		.long	 0xc0000002
 20105 0014 04000000 		.long	 3f - 2f
 20106              	2:
 20107 0018 03000000 		.long	 0x3
 20108              	3:
 20109 001c 00000000 		.align 8
 20110              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 jquant1.c
     /tmp/cco0Whig.s:7      .text.create_colorindex:0000000000000000 create_colorindex
     /tmp/cco0Whig.s:304    .text.color_quantize:0000000000000000 color_quantize
     /tmp/cco0Whig.s:478    .text.color_quantize3:0000000000000000 color_quantize3
     /tmp/cco0Whig.s:638    .text.quantize3_ord_dither:0000000000000000 quantize3_ord_dither
     /tmp/cco0Whig.s:880    .text.finish_pass_1_quant:0000000000000000 finish_pass_1_quant
     /tmp/cco0Whig.s:895    .text.new_color_map_1_quant:0000000000000000 new_color_map_1_quant
     /tmp/cco0Whig.s:915    .text.quantize_ord_dither:0000000000000000 quantize_ord_dither
     /tmp/cco0Whig.s:1143   .text.quantize_fs_dither:0000000000000000 quantize_fs_dither
     /tmp/cco0Whig.s:1529   .text.start_pass_1_quant:0000000000000000 start_pass_1_quant
     /tmp/cco0Whig.s:2722   .rodata.base_dither_matrix:0000000000000000 base_dither_matrix
     /tmp/cco0Whig.s:2038   .text.jinit_1pass_quantizer:0000000000000000 jinit_1pass_quantizer
     /tmp/cco0Whig.s:2714   .rodata.RGB_order.4419:0000000000000000 RGB_order.4419
                           .group:0000000000000000 wm4.0.a6b23a418548ac0bda5d8549c4a2ec91
                           .group:0000000000000000 wm4.stdcpredef.h.19.8dc41bed5d9037ff9622e015fb5f0ce3
                           .group:0000000000000000 wm4.jconfig.h.10.247fc3ff67998f3074970b1373c70333
                           .group:0000000000000000 wm4.features.h.19.5b5f5a19624a0527f479fdc52d54808f
                           .group:0000000000000000 wm4.cdefs.h.19.98d80eddbb3f64f4f30cd9aee9c5593c
                           .group:0000000000000000 wm4.wordsize.h.4.baf119258a1e53d8dba67ceac44ab6bc
                           .group:0000000000000000 wm4.cdefs.h.475.fb75d2e4416aa349344e6f45f683bf28
                           .group:0000000000000000 wm4.stubs64.h.10.6ce4c34010988db072c080326a6b6319
                           .group:0000000000000000 wm4.libcheaderstart.h.37.d9274df4cc0172452960ad9644fa5579
                           .group:0000000000000000 wm4.stdlib.h.28.2cffa49d94c5d85f4538f55f7b59771d
                           .group:0000000000000000 wm4.stddef.h.181.13772e73e5434e8cc4fafaaddad2b5da
                           .group:0000000000000000 wm4.waitflags.h.25.41934de4af99038521c2782f418699b1
                           .group:0000000000000000 wm4.waitstatus.h.28.93f167f49d64e2b9b99f98d1162a93bf
                           .group:0000000000000000 wm4.stdlib.h.43.9fa4f727a2f1cb8d2450a574c9195553
                           .group:0000000000000000 wm4.floatn.h.20.80c7cf8a8dfad237004b28d051d5afda
                           .group:0000000000000000 wm4.floatncommon.h.34.7e1840d7dfb19e9bdb51aeb077d76637
                           .group:0000000000000000 wm4.stdlib.h.71.2927e068ec678159b4f68ec2f089f7e6
                           .group:0000000000000000 wm4.types.h.109.56eb9ae966b255288cc544f18746a7ff
                           .group:0000000000000000 wm4.typesizes.h.24.2c64f817c0dc4b6fb2a2c619d717be26
                           .group:0000000000000000 wm4.time64.h.24.a8166ae916ec910dab0d8987098d42ee
                           .group:0000000000000000 wm4.types.h.40.18f72bab8242c2bb4c532a2aa95b5f00
                           .group:0000000000000000 wm4.stddef.h.231.0adce5c8c1fd8096aaff50981b3d1f0f
                           .group:0000000000000000 wm4.endian.h.20.efabd1018df5d7b4052c27dc6bdd5ce5
                           .group:0000000000000000 wm4.endianness.h.2.2c6a211f7909f3af5e9e9cfa3b6b63c8
                           .group:0000000000000000 wm4.endian.h.40.9e5d395adda2f4eb53ae69b69b664084
                           .group:0000000000000000 wm4.endian.h.27.4c4f94262c4eaee2982fe00ed1b4f173
                           .group:0000000000000000 wm4.byteswap.h.24.5363c019348146aada5aeadf51456576
                           .group:0000000000000000 wm4.endian.h.39.30a606dbd99b6c3df61c1f06dbdabd4e
                           .group:0000000000000000 wm4.select.h.28.eb2f3debdbcffd1442ebddaebc4fb6ff
                           .group:0000000000000000 wm4.__sigset_t.h.2.6b1ab6ff3d7b8fd9c0c42b0d80afbd80
                           .group:0000000000000000 wm4.select.h.44.887a4ff60aa97fcd9c1be017735e1675
                           .group:0000000000000000 wm4.select2.h.27.f95f2ab0ffee66dc1b6575014894b21a
                           .group:0000000000000000 wm4.types.h.186.489a4ed8f2d29cd358843490f54ddea5
                           .group:0000000000000000 wm4.pthreadtypesarch.h.25.6063cba99664c916e22d3a912bcc348a
                           .group:0000000000000000 wm4.struct_mutex.h.20.ed51f515172b9be99e450ba83eb5dd99
                           .group:0000000000000000 wm4.struct_rwlock.h.21.0254880f2904e3833fb8ae683e0f0330
                           .group:0000000000000000 wm4.alloca.h.19.edefa922a76c1cbaaf1e416903ba2d1c
                           .group:0000000000000000 wm4.alloca.h.29.156e12058824cc23d961c4d3b13031f6
                           .group:0000000000000000 wm4.stdio.h.24.5c1b97eef3c86b7a2549420f69f4f128
                           .group:0000000000000000 wm4.libcheaderstart.h.31.87b3c285aeba93fe355ad19123070832
                           .group:0000000000000000 wm4.stdio.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.stddef.h.231.8136eebbab3406dbf57a7ec475dd5d83
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.struct_FILE.h.19.0888ac70396abe1031c03d393554032f
                           .group:0000000000000000 wm4.stdio.h.53.139e45cf040c0964b2932c0c1bdaf6b2
                           .group:0000000000000000 wm4.stdio_lim.h.19.e4b00b560d878dcfbc6635b3406640c5
                           .group:0000000000000000 wm4.stdio.h.141.d7a290e19ca077c9e4aa7c43ede17a73
                           .group:0000000000000000 wm4.stdio.h.20.b0caa08e5723aa5941367be0e5d2ec59
                           .group:0000000000000000 wm4.stdio2.h.20.f45a0373b68e1296c4aa8cc09d66a9df
                           .group:0000000000000000 wm4.string.h.23.93403f89af7dba8212345449bb14b09d
                           .group:0000000000000000 wm4.string.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.strings.h.19.a259f126920b1bb5ef76bc62b3984a3c
                           .group:0000000000000000 wm4.jinclude.h.67.b19f941ec97c4845fa4609292c7e2db4
                           .group:0000000000000000 wm4.jmorecfg.h.33.3b4c5f9cc07b3737823b06caf24d5b05
                           .group:0000000000000000 wm4.jpeglib.h.40.4f111c27252a38df39328d65454e82f4
                           .group:0000000000000000 wm4.jpegint.h.26.5219ef5d4e4921371d38e77b6091fd20
                           .group:0000000000000000 wm4.jerror.h.25.1dbd8674e70ab5215bc0037320e5c2a2

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
memset
