   1              		.file	"jquant2.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.unlikely.prescan_quantize,"ax",@progbits
   5              	.LCOLDB0:
   6              		.section	.text.prescan_quantize,"ax",@progbits
   7              	.LHOTB0:
   8              		.p2align 4,,15
   9              		.section	.text.unlikely.prescan_quantize
  10              	.Ltext_cold0:
  11              		.section	.text.prescan_quantize
  13              	prescan_quantize:
  14              	.LFB61:
  15              		.file 1 "fltk-1.3.4-1/jpeg/jquant2.c"
   1:fltk-1.3.4-1/jpeg/jquant2.c **** /*
   2:fltk-1.3.4-1/jpeg/jquant2.c ****  * jquant2.c
   3:fltk-1.3.4-1/jpeg/jquant2.c ****  *
   4:fltk-1.3.4-1/jpeg/jquant2.c ****  * Copyright (C) 1991-1996, Thomas G. Lane.
   5:fltk-1.3.4-1/jpeg/jquant2.c ****  * Modified 2011 by Guido Vollbeding.
   6:fltk-1.3.4-1/jpeg/jquant2.c ****  * This file is part of the Independent JPEG Group's software.
   7:fltk-1.3.4-1/jpeg/jquant2.c ****  * For conditions of distribution and use, see the accompanying README file.
   8:fltk-1.3.4-1/jpeg/jquant2.c ****  *
   9:fltk-1.3.4-1/jpeg/jquant2.c ****  * This file contains 2-pass color quantization (color mapping) routines.
  10:fltk-1.3.4-1/jpeg/jquant2.c ****  * These routines provide selection of a custom color map for an image,
  11:fltk-1.3.4-1/jpeg/jquant2.c ****  * followed by mapping of the image to that color map, with optional
  12:fltk-1.3.4-1/jpeg/jquant2.c ****  * Floyd-Steinberg dithering.
  13:fltk-1.3.4-1/jpeg/jquant2.c ****  * It is also possible to use just the second pass to map to an arbitrary
  14:fltk-1.3.4-1/jpeg/jquant2.c ****  * externally-given color map.
  15:fltk-1.3.4-1/jpeg/jquant2.c ****  *
  16:fltk-1.3.4-1/jpeg/jquant2.c ****  * Note: ordered dithering is not supported, since there isn't any fast
  17:fltk-1.3.4-1/jpeg/jquant2.c ****  * way to compute intercolor distances; it's unclear that ordered dither's
  18:fltk-1.3.4-1/jpeg/jquant2.c ****  * fundamental assumptions even hold with an irregularly spaced color map.
  19:fltk-1.3.4-1/jpeg/jquant2.c ****  */
  20:fltk-1.3.4-1/jpeg/jquant2.c **** 
  21:fltk-1.3.4-1/jpeg/jquant2.c **** #define JPEG_INTERNALS
  22:fltk-1.3.4-1/jpeg/jquant2.c **** #include "jinclude.h"
  23:fltk-1.3.4-1/jpeg/jquant2.c **** #include "jpeglib.h"
  24:fltk-1.3.4-1/jpeg/jquant2.c **** 
  25:fltk-1.3.4-1/jpeg/jquant2.c **** #ifdef QUANT_2PASS_SUPPORTED
  26:fltk-1.3.4-1/jpeg/jquant2.c **** 
  27:fltk-1.3.4-1/jpeg/jquant2.c **** 
  28:fltk-1.3.4-1/jpeg/jquant2.c **** /*
  29:fltk-1.3.4-1/jpeg/jquant2.c ****  * This module implements the well-known Heckbert paradigm for color
  30:fltk-1.3.4-1/jpeg/jquant2.c ****  * quantization.  Most of the ideas used here can be traced back to
  31:fltk-1.3.4-1/jpeg/jquant2.c ****  * Heckbert's seminal paper
  32:fltk-1.3.4-1/jpeg/jquant2.c ****  *   Heckbert, Paul.  "Color Image Quantization for Frame Buffer Display",
  33:fltk-1.3.4-1/jpeg/jquant2.c ****  *   Proc. SIGGRAPH '82, Computer Graphics v.16 #3 (July 1982), pp 297-304.
  34:fltk-1.3.4-1/jpeg/jquant2.c ****  *
  35:fltk-1.3.4-1/jpeg/jquant2.c ****  * In the first pass over the image, we accumulate a histogram showing the
  36:fltk-1.3.4-1/jpeg/jquant2.c ****  * usage count of each possible color.  To keep the histogram to a reasonable
  37:fltk-1.3.4-1/jpeg/jquant2.c ****  * size, we reduce the precision of the input; typical practice is to retain
  38:fltk-1.3.4-1/jpeg/jquant2.c ****  * 5 or 6 bits per color, so that 8 or 4 different input values are counted
  39:fltk-1.3.4-1/jpeg/jquant2.c ****  * in the same histogram cell.
  40:fltk-1.3.4-1/jpeg/jquant2.c ****  *
  41:fltk-1.3.4-1/jpeg/jquant2.c ****  * Next, the color-selection step begins with a box representing the whole
  42:fltk-1.3.4-1/jpeg/jquant2.c ****  * color space, and repeatedly splits the "largest" remaining box until we
  43:fltk-1.3.4-1/jpeg/jquant2.c ****  * have as many boxes as desired colors.  Then the mean color in each
  44:fltk-1.3.4-1/jpeg/jquant2.c ****  * remaining box becomes one of the possible output colors.
  45:fltk-1.3.4-1/jpeg/jquant2.c ****  * 
  46:fltk-1.3.4-1/jpeg/jquant2.c ****  * The second pass over the image maps each input pixel to the closest output
  47:fltk-1.3.4-1/jpeg/jquant2.c ****  * color (optionally after applying a Floyd-Steinberg dithering correction).
  48:fltk-1.3.4-1/jpeg/jquant2.c ****  * This mapping is logically trivial, but making it go fast enough requires
  49:fltk-1.3.4-1/jpeg/jquant2.c ****  * considerable care.
  50:fltk-1.3.4-1/jpeg/jquant2.c ****  *
  51:fltk-1.3.4-1/jpeg/jquant2.c ****  * Heckbert-style quantizers vary a good deal in their policies for choosing
  52:fltk-1.3.4-1/jpeg/jquant2.c ****  * the "largest" box and deciding where to cut it.  The particular policies
  53:fltk-1.3.4-1/jpeg/jquant2.c ****  * used here have proved out well in experimental comparisons, but better ones
  54:fltk-1.3.4-1/jpeg/jquant2.c ****  * may yet be found.
  55:fltk-1.3.4-1/jpeg/jquant2.c ****  *
  56:fltk-1.3.4-1/jpeg/jquant2.c ****  * In earlier versions of the IJG code, this module quantized in YCbCr color
  57:fltk-1.3.4-1/jpeg/jquant2.c ****  * space, processing the raw upsampled data without a color conversion step.
  58:fltk-1.3.4-1/jpeg/jquant2.c ****  * This allowed the color conversion math to be done only once per colormap
  59:fltk-1.3.4-1/jpeg/jquant2.c ****  * entry, not once per pixel.  However, that optimization precluded other
  60:fltk-1.3.4-1/jpeg/jquant2.c ****  * useful optimizations (such as merging color conversion with upsampling)
  61:fltk-1.3.4-1/jpeg/jquant2.c ****  * and it also interfered with desired capabilities such as quantizing to an
  62:fltk-1.3.4-1/jpeg/jquant2.c ****  * externally-supplied colormap.  We have therefore abandoned that approach.
  63:fltk-1.3.4-1/jpeg/jquant2.c ****  * The present code works in the post-conversion color space, typically RGB.
  64:fltk-1.3.4-1/jpeg/jquant2.c ****  *
  65:fltk-1.3.4-1/jpeg/jquant2.c ****  * To improve the visual quality of the results, we actually work in scaled
  66:fltk-1.3.4-1/jpeg/jquant2.c ****  * RGB space, giving G distances more weight than R, and R in turn more than
  67:fltk-1.3.4-1/jpeg/jquant2.c ****  * B.  To do everything in integer math, we must use integer scale factors.
  68:fltk-1.3.4-1/jpeg/jquant2.c ****  * The 2/3/1 scale factors used here correspond loosely to the relative
  69:fltk-1.3.4-1/jpeg/jquant2.c ****  * weights of the colors in the NTSC grayscale equation.
  70:fltk-1.3.4-1/jpeg/jquant2.c ****  * If you want to use this code to quantize a non-RGB color space, you'll
  71:fltk-1.3.4-1/jpeg/jquant2.c ****  * probably need to change these scale factors.
  72:fltk-1.3.4-1/jpeg/jquant2.c ****  */
  73:fltk-1.3.4-1/jpeg/jquant2.c **** 
  74:fltk-1.3.4-1/jpeg/jquant2.c **** #define R_SCALE 2		/* scale R distances by this much */
  75:fltk-1.3.4-1/jpeg/jquant2.c **** #define G_SCALE 3		/* scale G distances by this much */
  76:fltk-1.3.4-1/jpeg/jquant2.c **** #define B_SCALE 1		/* and B by this much */
  77:fltk-1.3.4-1/jpeg/jquant2.c **** 
  78:fltk-1.3.4-1/jpeg/jquant2.c **** /* Relabel R/G/B as components 0/1/2, respecting the RGB ordering defined
  79:fltk-1.3.4-1/jpeg/jquant2.c ****  * in jmorecfg.h.  As the code stands, it will do the right thing for R,G,B
  80:fltk-1.3.4-1/jpeg/jquant2.c ****  * and B,G,R orders.  If you define some other weird order in jmorecfg.h,
  81:fltk-1.3.4-1/jpeg/jquant2.c ****  * you'll get compile errors until you extend this logic.  In that case
  82:fltk-1.3.4-1/jpeg/jquant2.c ****  * you'll probably want to tweak the histogram sizes too.
  83:fltk-1.3.4-1/jpeg/jquant2.c ****  */
  84:fltk-1.3.4-1/jpeg/jquant2.c **** 
  85:fltk-1.3.4-1/jpeg/jquant2.c **** #if RGB_RED == 0
  86:fltk-1.3.4-1/jpeg/jquant2.c **** #define C0_SCALE R_SCALE
  87:fltk-1.3.4-1/jpeg/jquant2.c **** #endif
  88:fltk-1.3.4-1/jpeg/jquant2.c **** #if RGB_BLUE == 0
  89:fltk-1.3.4-1/jpeg/jquant2.c **** #define C0_SCALE B_SCALE
  90:fltk-1.3.4-1/jpeg/jquant2.c **** #endif
  91:fltk-1.3.4-1/jpeg/jquant2.c **** #if RGB_GREEN == 1
  92:fltk-1.3.4-1/jpeg/jquant2.c **** #define C1_SCALE G_SCALE
  93:fltk-1.3.4-1/jpeg/jquant2.c **** #endif
  94:fltk-1.3.4-1/jpeg/jquant2.c **** #if RGB_RED == 2
  95:fltk-1.3.4-1/jpeg/jquant2.c **** #define C2_SCALE R_SCALE
  96:fltk-1.3.4-1/jpeg/jquant2.c **** #endif
  97:fltk-1.3.4-1/jpeg/jquant2.c **** #if RGB_BLUE == 2
  98:fltk-1.3.4-1/jpeg/jquant2.c **** #define C2_SCALE B_SCALE
  99:fltk-1.3.4-1/jpeg/jquant2.c **** #endif
 100:fltk-1.3.4-1/jpeg/jquant2.c **** 
 101:fltk-1.3.4-1/jpeg/jquant2.c **** 
 102:fltk-1.3.4-1/jpeg/jquant2.c **** /*
 103:fltk-1.3.4-1/jpeg/jquant2.c ****  * First we have the histogram data structure and routines for creating it.
 104:fltk-1.3.4-1/jpeg/jquant2.c ****  *
 105:fltk-1.3.4-1/jpeg/jquant2.c ****  * The number of bits of precision can be adjusted by changing these symbols.
 106:fltk-1.3.4-1/jpeg/jquant2.c ****  * We recommend keeping 6 bits for G and 5 each for R and B.
 107:fltk-1.3.4-1/jpeg/jquant2.c ****  * If you have plenty of memory and cycles, 6 bits all around gives marginally
 108:fltk-1.3.4-1/jpeg/jquant2.c ****  * better results; if you are short of memory, 5 bits all around will save
 109:fltk-1.3.4-1/jpeg/jquant2.c ****  * some space but degrade the results.
 110:fltk-1.3.4-1/jpeg/jquant2.c ****  * To maintain a fully accurate histogram, we'd need to allocate a "long"
 111:fltk-1.3.4-1/jpeg/jquant2.c ****  * (preferably unsigned long) for each cell.  In practice this is overkill;
 112:fltk-1.3.4-1/jpeg/jquant2.c ****  * we can get by with 16 bits per cell.  Few of the cell counts will overflow,
 113:fltk-1.3.4-1/jpeg/jquant2.c ****  * and clamping those that do overflow to the maximum value will give close-
 114:fltk-1.3.4-1/jpeg/jquant2.c ****  * enough results.  This reduces the recommended histogram size from 256Kb
 115:fltk-1.3.4-1/jpeg/jquant2.c ****  * to 128Kb, which is a useful savings on PC-class machines.
 116:fltk-1.3.4-1/jpeg/jquant2.c ****  * (In the second pass the histogram space is re-used for pixel mapping data;
 117:fltk-1.3.4-1/jpeg/jquant2.c ****  * in that capacity, each cell must be able to store zero to the number of
 118:fltk-1.3.4-1/jpeg/jquant2.c ****  * desired colors.  16 bits/cell is plenty for that too.)
 119:fltk-1.3.4-1/jpeg/jquant2.c ****  * Since the JPEG code is intended to run in small memory model on 80x86
 120:fltk-1.3.4-1/jpeg/jquant2.c ****  * machines, we can't just allocate the histogram in one chunk.  Instead
 121:fltk-1.3.4-1/jpeg/jquant2.c ****  * of a true 3-D array, we use a row of pointers to 2-D arrays.  Each
 122:fltk-1.3.4-1/jpeg/jquant2.c ****  * pointer corresponds to a C0 value (typically 2^5 = 32 pointers) and
 123:fltk-1.3.4-1/jpeg/jquant2.c ****  * each 2-D array has 2^6*2^5 = 2048 or 2^6*2^6 = 4096 entries.  Note that
 124:fltk-1.3.4-1/jpeg/jquant2.c ****  * on 80x86 machines, the pointer row is in near memory but the actual
 125:fltk-1.3.4-1/jpeg/jquant2.c ****  * arrays are in far memory (same arrangement as we use for image arrays).
 126:fltk-1.3.4-1/jpeg/jquant2.c ****  */
 127:fltk-1.3.4-1/jpeg/jquant2.c **** 
 128:fltk-1.3.4-1/jpeg/jquant2.c **** #define MAXNUMCOLORS  (MAXJSAMPLE+1) /* maximum size of colormap */
 129:fltk-1.3.4-1/jpeg/jquant2.c **** 
 130:fltk-1.3.4-1/jpeg/jquant2.c **** /* These will do the right thing for either R,G,B or B,G,R color order,
 131:fltk-1.3.4-1/jpeg/jquant2.c ****  * but you may not like the results for other color orders.
 132:fltk-1.3.4-1/jpeg/jquant2.c ****  */
 133:fltk-1.3.4-1/jpeg/jquant2.c **** #define HIST_C0_BITS  5		/* bits of precision in R/B histogram */
 134:fltk-1.3.4-1/jpeg/jquant2.c **** #define HIST_C1_BITS  6		/* bits of precision in G histogram */
 135:fltk-1.3.4-1/jpeg/jquant2.c **** #define HIST_C2_BITS  5		/* bits of precision in B/R histogram */
 136:fltk-1.3.4-1/jpeg/jquant2.c **** 
 137:fltk-1.3.4-1/jpeg/jquant2.c **** /* Number of elements along histogram axes. */
 138:fltk-1.3.4-1/jpeg/jquant2.c **** #define HIST_C0_ELEMS  (1<<HIST_C0_BITS)
 139:fltk-1.3.4-1/jpeg/jquant2.c **** #define HIST_C1_ELEMS  (1<<HIST_C1_BITS)
 140:fltk-1.3.4-1/jpeg/jquant2.c **** #define HIST_C2_ELEMS  (1<<HIST_C2_BITS)
 141:fltk-1.3.4-1/jpeg/jquant2.c **** 
 142:fltk-1.3.4-1/jpeg/jquant2.c **** /* These are the amounts to shift an input value to get a histogram index. */
 143:fltk-1.3.4-1/jpeg/jquant2.c **** #define C0_SHIFT  (BITS_IN_JSAMPLE-HIST_C0_BITS)
 144:fltk-1.3.4-1/jpeg/jquant2.c **** #define C1_SHIFT  (BITS_IN_JSAMPLE-HIST_C1_BITS)
 145:fltk-1.3.4-1/jpeg/jquant2.c **** #define C2_SHIFT  (BITS_IN_JSAMPLE-HIST_C2_BITS)
 146:fltk-1.3.4-1/jpeg/jquant2.c **** 
 147:fltk-1.3.4-1/jpeg/jquant2.c **** 
 148:fltk-1.3.4-1/jpeg/jquant2.c **** typedef UINT16 histcell;	/* histogram cell; prefer an unsigned type */
 149:fltk-1.3.4-1/jpeg/jquant2.c **** 
 150:fltk-1.3.4-1/jpeg/jquant2.c **** typedef histcell FAR * histptr;	/* for pointers to histogram cells */
 151:fltk-1.3.4-1/jpeg/jquant2.c **** 
 152:fltk-1.3.4-1/jpeg/jquant2.c **** typedef histcell hist1d[HIST_C2_ELEMS]; /* typedefs for the array */
 153:fltk-1.3.4-1/jpeg/jquant2.c **** typedef hist1d FAR * hist2d;	/* type for the 2nd-level pointers */
 154:fltk-1.3.4-1/jpeg/jquant2.c **** typedef hist2d * hist3d;	/* type for top-level pointer */
 155:fltk-1.3.4-1/jpeg/jquant2.c **** 
 156:fltk-1.3.4-1/jpeg/jquant2.c **** 
 157:fltk-1.3.4-1/jpeg/jquant2.c **** /* Declarations for Floyd-Steinberg dithering.
 158:fltk-1.3.4-1/jpeg/jquant2.c ****  *
 159:fltk-1.3.4-1/jpeg/jquant2.c ****  * Errors are accumulated into the array fserrors[], at a resolution of
 160:fltk-1.3.4-1/jpeg/jquant2.c ****  * 1/16th of a pixel count.  The error at a given pixel is propagated
 161:fltk-1.3.4-1/jpeg/jquant2.c ****  * to its not-yet-processed neighbors using the standard F-S fractions,
 162:fltk-1.3.4-1/jpeg/jquant2.c ****  *		...	(here)	7/16
 163:fltk-1.3.4-1/jpeg/jquant2.c ****  *		3/16	5/16	1/16
 164:fltk-1.3.4-1/jpeg/jquant2.c ****  * We work left-to-right on even rows, right-to-left on odd rows.
 165:fltk-1.3.4-1/jpeg/jquant2.c ****  *
 166:fltk-1.3.4-1/jpeg/jquant2.c ****  * We can get away with a single array (holding one row's worth of errors)
 167:fltk-1.3.4-1/jpeg/jquant2.c ****  * by using it to store the current row's errors at pixel columns not yet
 168:fltk-1.3.4-1/jpeg/jquant2.c ****  * processed, but the next row's errors at columns already processed.  We
 169:fltk-1.3.4-1/jpeg/jquant2.c ****  * need only a few extra variables to hold the errors immediately around the
 170:fltk-1.3.4-1/jpeg/jquant2.c ****  * current column.  (If we are lucky, those variables are in registers, but
 171:fltk-1.3.4-1/jpeg/jquant2.c ****  * even if not, they're probably cheaper to access than array elements are.)
 172:fltk-1.3.4-1/jpeg/jquant2.c ****  *
 173:fltk-1.3.4-1/jpeg/jquant2.c ****  * The fserrors[] array has (#columns + 2) entries; the extra entry at
 174:fltk-1.3.4-1/jpeg/jquant2.c ****  * each end saves us from special-casing the first and last pixels.
 175:fltk-1.3.4-1/jpeg/jquant2.c ****  * Each entry is three values long, one value for each color component.
 176:fltk-1.3.4-1/jpeg/jquant2.c ****  *
 177:fltk-1.3.4-1/jpeg/jquant2.c ****  * Note: on a wide image, we might not have enough room in a PC's near data
 178:fltk-1.3.4-1/jpeg/jquant2.c ****  * segment to hold the error array; so it is allocated with alloc_large.
 179:fltk-1.3.4-1/jpeg/jquant2.c ****  */
 180:fltk-1.3.4-1/jpeg/jquant2.c **** 
 181:fltk-1.3.4-1/jpeg/jquant2.c **** #if BITS_IN_JSAMPLE == 8
 182:fltk-1.3.4-1/jpeg/jquant2.c **** typedef INT16 FSERROR;		/* 16 bits should be enough */
 183:fltk-1.3.4-1/jpeg/jquant2.c **** typedef int LOCFSERROR;		/* use 'int' for calculation temps */
 184:fltk-1.3.4-1/jpeg/jquant2.c **** #else
 185:fltk-1.3.4-1/jpeg/jquant2.c **** typedef INT32 FSERROR;		/* may need more than 16 bits */
 186:fltk-1.3.4-1/jpeg/jquant2.c **** typedef INT32 LOCFSERROR;	/* be sure calculation temps are big enough */
 187:fltk-1.3.4-1/jpeg/jquant2.c **** #endif
 188:fltk-1.3.4-1/jpeg/jquant2.c **** 
 189:fltk-1.3.4-1/jpeg/jquant2.c **** typedef FSERROR FAR *FSERRPTR;	/* pointer to error array (in FAR storage!) */
 190:fltk-1.3.4-1/jpeg/jquant2.c **** 
 191:fltk-1.3.4-1/jpeg/jquant2.c **** 
 192:fltk-1.3.4-1/jpeg/jquant2.c **** /* Private subobject */
 193:fltk-1.3.4-1/jpeg/jquant2.c **** 
 194:fltk-1.3.4-1/jpeg/jquant2.c **** typedef struct {
 195:fltk-1.3.4-1/jpeg/jquant2.c ****   struct jpeg_color_quantizer pub; /* public fields */
 196:fltk-1.3.4-1/jpeg/jquant2.c **** 
 197:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Space for the eventually created colormap is stashed here */
 198:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPARRAY sv_colormap;	/* colormap allocated at init time */
 199:fltk-1.3.4-1/jpeg/jquant2.c ****   int desired;			/* desired # of colors = size of colormap */
 200:fltk-1.3.4-1/jpeg/jquant2.c **** 
 201:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Variables for accumulating image statistics */
 202:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram;		/* pointer to the histogram */
 203:fltk-1.3.4-1/jpeg/jquant2.c **** 
 204:fltk-1.3.4-1/jpeg/jquant2.c ****   boolean needs_zeroed;		/* TRUE if next pass must zero histogram */
 205:fltk-1.3.4-1/jpeg/jquant2.c **** 
 206:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Variables for Floyd-Steinberg dithering */
 207:fltk-1.3.4-1/jpeg/jquant2.c ****   FSERRPTR fserrors;		/* accumulated errors */
 208:fltk-1.3.4-1/jpeg/jquant2.c ****   boolean on_odd_row;		/* flag to remember which row we are on */
 209:fltk-1.3.4-1/jpeg/jquant2.c ****   int * error_limiter;		/* table for clamping the applied error */
 210:fltk-1.3.4-1/jpeg/jquant2.c **** } my_cquantizer;
 211:fltk-1.3.4-1/jpeg/jquant2.c **** 
 212:fltk-1.3.4-1/jpeg/jquant2.c **** typedef my_cquantizer * my_cquantize_ptr;
 213:fltk-1.3.4-1/jpeg/jquant2.c **** 
 214:fltk-1.3.4-1/jpeg/jquant2.c **** 
 215:fltk-1.3.4-1/jpeg/jquant2.c **** /*
 216:fltk-1.3.4-1/jpeg/jquant2.c ****  * Prescan some rows of pixels.
 217:fltk-1.3.4-1/jpeg/jquant2.c ****  * In this module the prescan simply updates the histogram, which has been
 218:fltk-1.3.4-1/jpeg/jquant2.c ****  * initialized to zeroes by start_pass.
 219:fltk-1.3.4-1/jpeg/jquant2.c ****  * An output_buf parameter is required by the method signature, but no data
 220:fltk-1.3.4-1/jpeg/jquant2.c ****  * is actually output (in fact the buffer controller is probably passing a
 221:fltk-1.3.4-1/jpeg/jquant2.c ****  * NULL pointer).
 222:fltk-1.3.4-1/jpeg/jquant2.c ****  */
 223:fltk-1.3.4-1/jpeg/jquant2.c **** 
 224:fltk-1.3.4-1/jpeg/jquant2.c **** METHODDEF(void)
 225:fltk-1.3.4-1/jpeg/jquant2.c **** prescan_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
 226:fltk-1.3.4-1/jpeg/jquant2.c **** 		  JSAMPARRAY output_buf, int num_rows)
 227:fltk-1.3.4-1/jpeg/jquant2.c **** {
  16              		.loc 1 227 0
  17              		.cfi_startproc
  18              	.LVL0:
 228:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 229:fltk-1.3.4-1/jpeg/jquant2.c ****   register JSAMPROW ptr;
 230:fltk-1.3.4-1/jpeg/jquant2.c ****   register histptr histp;
 231:fltk-1.3.4-1/jpeg/jquant2.c ****   register hist3d histogram = cquantize->histogram;
  19              		.loc 1 231 0
  20 0000 488B8790 		movq	656(%rdi), %rax
  20      020000
 232:fltk-1.3.4-1/jpeg/jquant2.c ****   int row;
 233:fltk-1.3.4-1/jpeg/jquant2.c ****   JDIMENSION col;
 234:fltk-1.3.4-1/jpeg/jquant2.c ****   JDIMENSION width = cinfo->output_width;
 235:fltk-1.3.4-1/jpeg/jquant2.c **** 
 236:fltk-1.3.4-1/jpeg/jquant2.c ****   for (row = 0; row < num_rows; row++) {
  21              		.loc 1 236 0
  22 0007 85C9     		testl	%ecx, %ecx
 234:fltk-1.3.4-1/jpeg/jquant2.c **** 
  23              		.loc 1 234 0
  24 0009 448B9788 		movl	136(%rdi), %r10d
  24      000000
 231:fltk-1.3.4-1/jpeg/jquant2.c ****   int row;
  25              		.loc 1 231 0
  26 0010 4C8B4830 		movq	48(%rax), %r9
  27              	.LVL1:
  28              		.loc 1 236 0
  29 0014 7E74     		jle	.L17
  30 0016 8D41FF   		leal	-1(%rcx), %eax
 227:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  31              		.loc 1 227 0
  32 0019 53       		pushq	%rbx
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 3, -16
  35              	.LVL2:
  36 001a 488D5CC6 		leaq	8(%rsi,%rax,8), %rbx
  36      08
  37 001f 418D42FF 		leal	-1(%r10), %eax
  38 0023 4C8D5C40 		leaq	3(%rax,%rax,2), %r11
  38      03
  39              	.LVL3:
  40 0028 0F1F8400 		.p2align 4,,10
  40      00000000 
  41              		.p2align 3
  42              	.L4:
 237:fltk-1.3.4-1/jpeg/jquant2.c ****     ptr = input_buf[row];
  43              		.loc 1 237 0
  44 0030 488B16   		movq	(%rsi), %rdx
  45              	.LVL4:
 238:fltk-1.3.4-1/jpeg/jquant2.c ****     for (col = width; col > 0; col--) {
  46              		.loc 1 238 0
  47 0033 4585D2   		testl	%r10d, %r10d
  48 0036 4E8D041A 		leaq	(%rdx,%r11), %r8
  49 003a 7444     		je	.L8
  50              	.LVL5:
  51 003c 0F1F4000 		.p2align 4,,10
  52              		.p2align 3
  53              	.L11:
 239:fltk-1.3.4-1/jpeg/jquant2.c ****       /* get pixel value and index into the histogram */
 240:fltk-1.3.4-1/jpeg/jquant2.c ****       histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 241:fltk-1.3.4-1/jpeg/jquant2.c **** 			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
  54              		.loc 1 241 0
  55 0040 0FB64201 		movzbl	1(%rdx), %eax
 240:fltk-1.3.4-1/jpeg/jquant2.c **** 			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
  56              		.loc 1 240 0
  57 0044 0FB60A   		movzbl	(%rdx), %ecx
  58 0047 0FB67A02 		movzbl	2(%rdx), %edi
  59              		.loc 1 241 0
  60 004b C0E802   		shrb	$2, %al
 240:fltk-1.3.4-1/jpeg/jquant2.c **** 			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
  61              		.loc 1 240 0
  62 004e C0E903   		shrb	$3, %cl
  63 0051 40C0EF03 		shrb	$3, %dil
  64              		.loc 1 241 0
  65 0055 0FB6C0   		movzbl	%al, %eax
 240:fltk-1.3.4-1/jpeg/jquant2.c **** 			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
  66              		.loc 1 240 0
  67 0058 0FB6C9   		movzbl	%cl, %ecx
  68              		.loc 1 241 0
  69 005b 48C1E006 		salq	$6, %rax
  70              	.LVL6:
  71 005f 400FB6FF 		movzbl	%dil, %edi
  72 0063 488D0478 		leaq	(%rax,%rdi,2), %rax
  73              	.LVL7:
  74 0067 490304C9 		addq	(%r9,%rcx,8), %rax
 242:fltk-1.3.4-1/jpeg/jquant2.c **** 			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 243:fltk-1.3.4-1/jpeg/jquant2.c ****       /* increment, check for overflow and undo increment if so. */
 244:fltk-1.3.4-1/jpeg/jquant2.c ****       if (++(*histp) <= 0)
  75              		.loc 1 244 0
  76 006b 0FB708   		movzwl	(%rax), %ecx
  77              	.LVL8:
  78 006e 6683C101 		addw	$1, %cx
  79 0072 7403     		je	.L6
  80 0074 668908   		movw	%cx, (%rax)
  81              	.LVL9:
  82              	.L6:
 245:fltk-1.3.4-1/jpeg/jquant2.c **** 	(*histp)--;
 246:fltk-1.3.4-1/jpeg/jquant2.c ****       ptr += 3;
  83              		.loc 1 246 0 discriminator 2
  84 0077 4883C203 		addq	$3, %rdx
  85              	.LVL10:
 238:fltk-1.3.4-1/jpeg/jquant2.c ****       /* get pixel value and index into the histogram */
  86              		.loc 1 238 0 discriminator 2
  87 007b 4C39C2   		cmpq	%r8, %rdx
  88 007e 75C0     		jne	.L11
  89              	.L8:
  90 0080 4883C608 		addq	$8, %rsi
 236:fltk-1.3.4-1/jpeg/jquant2.c ****     ptr = input_buf[row];
  91              		.loc 1 236 0
  92 0084 4839DE   		cmpq	%rbx, %rsi
  93 0087 75A7     		jne	.L4
 247:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 248:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 249:fltk-1.3.4-1/jpeg/jquant2.c **** }
  94              		.loc 1 249 0
  95 0089 5B       		popq	%rbx
  96              		.cfi_restore 3
  97              		.cfi_def_cfa_offset 8
  98              	.LVL11:
  99              	.L17:
 100 008a F3C3     		rep ret
 101              		.cfi_endproc
 102              	.LFE61:
 104              		.section	.text.unlikely.prescan_quantize
 105              	.LCOLDE0:
 106              		.section	.text.prescan_quantize
 107              	.LHOTE0:
 108              		.section	.text.unlikely.init_error_limit,"ax",@progbits
 109              	.LCOLDB1:
 110              		.section	.text.init_error_limit,"ax",@progbits
 111              	.LHOTB1:
 112              		.p2align 4,,15
 114              	init_error_limit:
 115              	.LFB73:
 250:fltk-1.3.4-1/jpeg/jquant2.c **** 
 251:fltk-1.3.4-1/jpeg/jquant2.c **** 
 252:fltk-1.3.4-1/jpeg/jquant2.c **** /*
 253:fltk-1.3.4-1/jpeg/jquant2.c ****  * Next we have the really interesting routines: selection of a colormap
 254:fltk-1.3.4-1/jpeg/jquant2.c ****  * given the completed histogram.
 255:fltk-1.3.4-1/jpeg/jquant2.c ****  * These routines work with a list of "boxes", each representing a rectangular
 256:fltk-1.3.4-1/jpeg/jquant2.c ****  * subset of the input color space (to histogram precision).
 257:fltk-1.3.4-1/jpeg/jquant2.c ****  */
 258:fltk-1.3.4-1/jpeg/jquant2.c **** 
 259:fltk-1.3.4-1/jpeg/jquant2.c **** typedef struct {
 260:fltk-1.3.4-1/jpeg/jquant2.c ****   /* The bounds of the box (inclusive); expressed as histogram indexes */
 261:fltk-1.3.4-1/jpeg/jquant2.c ****   int c0min, c0max;
 262:fltk-1.3.4-1/jpeg/jquant2.c ****   int c1min, c1max;
 263:fltk-1.3.4-1/jpeg/jquant2.c ****   int c2min, c2max;
 264:fltk-1.3.4-1/jpeg/jquant2.c ****   /* The volume (actually 2-norm) of the box */
 265:fltk-1.3.4-1/jpeg/jquant2.c ****   INT32 volume;
 266:fltk-1.3.4-1/jpeg/jquant2.c ****   /* The number of nonzero histogram cells within this box */
 267:fltk-1.3.4-1/jpeg/jquant2.c ****   long colorcount;
 268:fltk-1.3.4-1/jpeg/jquant2.c **** } box;
 269:fltk-1.3.4-1/jpeg/jquant2.c **** 
 270:fltk-1.3.4-1/jpeg/jquant2.c **** typedef box * boxptr;
 271:fltk-1.3.4-1/jpeg/jquant2.c **** 
 272:fltk-1.3.4-1/jpeg/jquant2.c **** 
 273:fltk-1.3.4-1/jpeg/jquant2.c **** LOCAL(boxptr)
 274:fltk-1.3.4-1/jpeg/jquant2.c **** find_biggest_color_pop (boxptr boxlist, int numboxes)
 275:fltk-1.3.4-1/jpeg/jquant2.c **** /* Find the splittable box with the largest color population */
 276:fltk-1.3.4-1/jpeg/jquant2.c **** /* Returns NULL if no splittable boxes remain */
 277:fltk-1.3.4-1/jpeg/jquant2.c **** {
 278:fltk-1.3.4-1/jpeg/jquant2.c ****   register boxptr boxp;
 279:fltk-1.3.4-1/jpeg/jquant2.c ****   register int i;
 280:fltk-1.3.4-1/jpeg/jquant2.c ****   register long maxc = 0;
 281:fltk-1.3.4-1/jpeg/jquant2.c ****   boxptr which = NULL;
 282:fltk-1.3.4-1/jpeg/jquant2.c ****   
 283:fltk-1.3.4-1/jpeg/jquant2.c ****   for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 284:fltk-1.3.4-1/jpeg/jquant2.c ****     if (boxp->colorcount > maxc && boxp->volume > 0) {
 285:fltk-1.3.4-1/jpeg/jquant2.c ****       which = boxp;
 286:fltk-1.3.4-1/jpeg/jquant2.c ****       maxc = boxp->colorcount;
 287:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 288:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 289:fltk-1.3.4-1/jpeg/jquant2.c ****   return which;
 290:fltk-1.3.4-1/jpeg/jquant2.c **** }
 291:fltk-1.3.4-1/jpeg/jquant2.c **** 
 292:fltk-1.3.4-1/jpeg/jquant2.c **** 
 293:fltk-1.3.4-1/jpeg/jquant2.c **** LOCAL(boxptr)
 294:fltk-1.3.4-1/jpeg/jquant2.c **** find_biggest_volume (boxptr boxlist, int numboxes)
 295:fltk-1.3.4-1/jpeg/jquant2.c **** /* Find the splittable box with the largest (scaled) volume */
 296:fltk-1.3.4-1/jpeg/jquant2.c **** /* Returns NULL if no splittable boxes remain */
 297:fltk-1.3.4-1/jpeg/jquant2.c **** {
 298:fltk-1.3.4-1/jpeg/jquant2.c ****   register boxptr boxp;
 299:fltk-1.3.4-1/jpeg/jquant2.c ****   register int i;
 300:fltk-1.3.4-1/jpeg/jquant2.c ****   register INT32 maxv = 0;
 301:fltk-1.3.4-1/jpeg/jquant2.c ****   boxptr which = NULL;
 302:fltk-1.3.4-1/jpeg/jquant2.c ****   
 303:fltk-1.3.4-1/jpeg/jquant2.c ****   for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 304:fltk-1.3.4-1/jpeg/jquant2.c ****     if (boxp->volume > maxv) {
 305:fltk-1.3.4-1/jpeg/jquant2.c ****       which = boxp;
 306:fltk-1.3.4-1/jpeg/jquant2.c ****       maxv = boxp->volume;
 307:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 308:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 309:fltk-1.3.4-1/jpeg/jquant2.c ****   return which;
 310:fltk-1.3.4-1/jpeg/jquant2.c **** }
 311:fltk-1.3.4-1/jpeg/jquant2.c **** 
 312:fltk-1.3.4-1/jpeg/jquant2.c **** 
 313:fltk-1.3.4-1/jpeg/jquant2.c **** LOCAL(void)
 314:fltk-1.3.4-1/jpeg/jquant2.c **** update_box (j_decompress_ptr cinfo, boxptr boxp)
 315:fltk-1.3.4-1/jpeg/jquant2.c **** /* Shrink the min/max bounds of a box to enclose only nonzero elements, */
 316:fltk-1.3.4-1/jpeg/jquant2.c **** /* and recompute its volume and population */
 317:fltk-1.3.4-1/jpeg/jquant2.c **** {
 318:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 319:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram = cquantize->histogram;
 320:fltk-1.3.4-1/jpeg/jquant2.c ****   histptr histp;
 321:fltk-1.3.4-1/jpeg/jquant2.c ****   int c0,c1,c2;
 322:fltk-1.3.4-1/jpeg/jquant2.c ****   int c0min,c0max,c1min,c1max,c2min,c2max;
 323:fltk-1.3.4-1/jpeg/jquant2.c ****   INT32 dist0,dist1,dist2;
 324:fltk-1.3.4-1/jpeg/jquant2.c ****   long ccount;
 325:fltk-1.3.4-1/jpeg/jquant2.c ****   
 326:fltk-1.3.4-1/jpeg/jquant2.c ****   c0min = boxp->c0min;  c0max = boxp->c0max;
 327:fltk-1.3.4-1/jpeg/jquant2.c ****   c1min = boxp->c1min;  c1max = boxp->c1max;
 328:fltk-1.3.4-1/jpeg/jquant2.c ****   c2min = boxp->c2min;  c2max = boxp->c2max;
 329:fltk-1.3.4-1/jpeg/jquant2.c ****   
 330:fltk-1.3.4-1/jpeg/jquant2.c ****   if (c0max > c0min)
 331:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c0 = c0min; c0 <= c0max; c0++)
 332:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c1 = c1min; c1 <= c1max; c1++) {
 333:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 334:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c2 = c2min; c2 <= c2max; c2++)
 335:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 336:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c0min = c0min = c0;
 337:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c0min;
 338:fltk-1.3.4-1/jpeg/jquant2.c **** 	  }
 339:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 340:fltk-1.3.4-1/jpeg/jquant2.c ****  have_c0min:
 341:fltk-1.3.4-1/jpeg/jquant2.c ****   if (c0max > c0min)
 342:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c0 = c0max; c0 >= c0min; c0--)
 343:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c1 = c1min; c1 <= c1max; c1++) {
 344:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 345:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c2 = c2min; c2 <= c2max; c2++)
 346:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 347:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c0max = c0max = c0;
 348:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c0max;
 349:fltk-1.3.4-1/jpeg/jquant2.c **** 	  }
 350:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 351:fltk-1.3.4-1/jpeg/jquant2.c ****  have_c0max:
 352:fltk-1.3.4-1/jpeg/jquant2.c ****   if (c1max > c1min)
 353:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++)
 354:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 355:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 356:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c2 = c2min; c2 <= c2max; c2++)
 357:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 358:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c1min = c1min = c1;
 359:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c1min;
 360:fltk-1.3.4-1/jpeg/jquant2.c **** 	  }
 361:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 362:fltk-1.3.4-1/jpeg/jquant2.c ****  have_c1min:
 363:fltk-1.3.4-1/jpeg/jquant2.c ****   if (c1max > c1min)
 364:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1max; c1 >= c1min; c1--)
 365:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 366:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 367:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c2 = c2min; c2 <= c2max; c2++)
 368:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 369:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c1max = c1max = c1;
 370:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c1max;
 371:fltk-1.3.4-1/jpeg/jquant2.c **** 	  }
 372:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 373:fltk-1.3.4-1/jpeg/jquant2.c ****  have_c1max:
 374:fltk-1.3.4-1/jpeg/jquant2.c ****   if (c2max > c2min)
 375:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c2 = c2min; c2 <= c2max; c2++)
 376:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 377:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1min][c2];
 378:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 379:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 380:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c2min = c2min = c2;
 381:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c2min;
 382:fltk-1.3.4-1/jpeg/jquant2.c **** 	  }
 383:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 384:fltk-1.3.4-1/jpeg/jquant2.c ****  have_c2min:
 385:fltk-1.3.4-1/jpeg/jquant2.c ****   if (c2max > c2min)
 386:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c2 = c2max; c2 >= c2min; c2--)
 387:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 388:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1min][c2];
 389:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 390:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 391:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c2max = c2max = c2;
 392:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c2max;
 393:fltk-1.3.4-1/jpeg/jquant2.c **** 	  }
 394:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 395:fltk-1.3.4-1/jpeg/jquant2.c ****  have_c2max:
 396:fltk-1.3.4-1/jpeg/jquant2.c **** 
 397:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Update box volume.
 398:fltk-1.3.4-1/jpeg/jquant2.c ****    * We use 2-norm rather than real volume here; this biases the method
 399:fltk-1.3.4-1/jpeg/jquant2.c ****    * against making long narrow boxes, and it has the side benefit that
 400:fltk-1.3.4-1/jpeg/jquant2.c ****    * a box is splittable iff norm > 0.
 401:fltk-1.3.4-1/jpeg/jquant2.c ****    * Since the differences are expressed in histogram-cell units,
 402:fltk-1.3.4-1/jpeg/jquant2.c ****    * we have to shift back to JSAMPLE units to get consistent distances;
 403:fltk-1.3.4-1/jpeg/jquant2.c ****    * after which, we scale according to the selected distance scale factors.
 404:fltk-1.3.4-1/jpeg/jquant2.c ****    */
 405:fltk-1.3.4-1/jpeg/jquant2.c ****   dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 406:fltk-1.3.4-1/jpeg/jquant2.c ****   dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 407:fltk-1.3.4-1/jpeg/jquant2.c ****   dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 408:fltk-1.3.4-1/jpeg/jquant2.c ****   boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 409:fltk-1.3.4-1/jpeg/jquant2.c ****   
 410:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Now scan remaining volume of box and compute population */
 411:fltk-1.3.4-1/jpeg/jquant2.c ****   ccount = 0;
 412:fltk-1.3.4-1/jpeg/jquant2.c ****   for (c0 = c0min; c0 <= c0max; c0++)
 413:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 414:fltk-1.3.4-1/jpeg/jquant2.c ****       histp = & histogram[c0][c1][c2min];
 415:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c2 = c2min; c2 <= c2max; c2++, histp++)
 416:fltk-1.3.4-1/jpeg/jquant2.c **** 	if (*histp != 0) {
 417:fltk-1.3.4-1/jpeg/jquant2.c **** 	  ccount++;
 418:fltk-1.3.4-1/jpeg/jquant2.c **** 	}
 419:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 420:fltk-1.3.4-1/jpeg/jquant2.c ****   boxp->colorcount = ccount;
 421:fltk-1.3.4-1/jpeg/jquant2.c **** }
 422:fltk-1.3.4-1/jpeg/jquant2.c **** 
 423:fltk-1.3.4-1/jpeg/jquant2.c **** 
 424:fltk-1.3.4-1/jpeg/jquant2.c **** LOCAL(int)
 425:fltk-1.3.4-1/jpeg/jquant2.c **** median_cut (j_decompress_ptr cinfo, boxptr boxlist, int numboxes,
 426:fltk-1.3.4-1/jpeg/jquant2.c **** 	    int desired_colors)
 427:fltk-1.3.4-1/jpeg/jquant2.c **** /* Repeatedly select and split the largest box until we have enough boxes */
 428:fltk-1.3.4-1/jpeg/jquant2.c **** {
 429:fltk-1.3.4-1/jpeg/jquant2.c ****   int n,lb;
 430:fltk-1.3.4-1/jpeg/jquant2.c ****   int c0,c1,c2,cmax;
 431:fltk-1.3.4-1/jpeg/jquant2.c ****   register boxptr b1,b2;
 432:fltk-1.3.4-1/jpeg/jquant2.c **** 
 433:fltk-1.3.4-1/jpeg/jquant2.c ****   while (numboxes < desired_colors) {
 434:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Select box to split.
 435:fltk-1.3.4-1/jpeg/jquant2.c ****      * Current algorithm: by population for first half, then by volume.
 436:fltk-1.3.4-1/jpeg/jquant2.c ****      */
 437:fltk-1.3.4-1/jpeg/jquant2.c ****     if (numboxes*2 <= desired_colors) {
 438:fltk-1.3.4-1/jpeg/jquant2.c ****       b1 = find_biggest_color_pop(boxlist, numboxes);
 439:fltk-1.3.4-1/jpeg/jquant2.c ****     } else {
 440:fltk-1.3.4-1/jpeg/jquant2.c ****       b1 = find_biggest_volume(boxlist, numboxes);
 441:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 442:fltk-1.3.4-1/jpeg/jquant2.c ****     if (b1 == NULL)		/* no splittable boxes left! */
 443:fltk-1.3.4-1/jpeg/jquant2.c ****       break;
 444:fltk-1.3.4-1/jpeg/jquant2.c ****     b2 = &boxlist[numboxes];	/* where new box will go */
 445:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Copy the color bounds to the new box. */
 446:fltk-1.3.4-1/jpeg/jquant2.c ****     b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
 447:fltk-1.3.4-1/jpeg/jquant2.c ****     b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 448:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Choose which axis to split the box on.
 449:fltk-1.3.4-1/jpeg/jquant2.c ****      * Current algorithm: longest scaled axis.
 450:fltk-1.3.4-1/jpeg/jquant2.c ****      * See notes in update_box about scaling distances.
 451:fltk-1.3.4-1/jpeg/jquant2.c ****      */
 452:fltk-1.3.4-1/jpeg/jquant2.c ****     c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 453:fltk-1.3.4-1/jpeg/jquant2.c ****     c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 454:fltk-1.3.4-1/jpeg/jquant2.c ****     c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 455:fltk-1.3.4-1/jpeg/jquant2.c ****     /* We want to break any ties in favor of green, then red, blue last.
 456:fltk-1.3.4-1/jpeg/jquant2.c ****      * This code does the right thing for R,G,B or B,G,R color orders only.
 457:fltk-1.3.4-1/jpeg/jquant2.c ****      */
 458:fltk-1.3.4-1/jpeg/jquant2.c **** #if RGB_RED == 0
 459:fltk-1.3.4-1/jpeg/jquant2.c ****     cmax = c1; n = 1;
 460:fltk-1.3.4-1/jpeg/jquant2.c ****     if (c0 > cmax) { cmax = c0; n = 0; }
 461:fltk-1.3.4-1/jpeg/jquant2.c ****     if (c2 > cmax) { n = 2; }
 462:fltk-1.3.4-1/jpeg/jquant2.c **** #else
 463:fltk-1.3.4-1/jpeg/jquant2.c ****     cmax = c1; n = 1;
 464:fltk-1.3.4-1/jpeg/jquant2.c ****     if (c2 > cmax) { cmax = c2; n = 2; }
 465:fltk-1.3.4-1/jpeg/jquant2.c ****     if (c0 > cmax) { n = 0; }
 466:fltk-1.3.4-1/jpeg/jquant2.c **** #endif
 467:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Choose split point along selected axis, and update box bounds.
 468:fltk-1.3.4-1/jpeg/jquant2.c ****      * Current algorithm: split at halfway point.
 469:fltk-1.3.4-1/jpeg/jquant2.c ****      * (Since the box has been shrunk to minimum volume,
 470:fltk-1.3.4-1/jpeg/jquant2.c ****      * any split will produce two nonempty subboxes.)
 471:fltk-1.3.4-1/jpeg/jquant2.c ****      * Note that lb value is max for lower box, so must be < old max.
 472:fltk-1.3.4-1/jpeg/jquant2.c ****      */
 473:fltk-1.3.4-1/jpeg/jquant2.c ****     switch (n) {
 474:fltk-1.3.4-1/jpeg/jquant2.c ****     case 0:
 475:fltk-1.3.4-1/jpeg/jquant2.c ****       lb = (b1->c0max + b1->c0min) / 2;
 476:fltk-1.3.4-1/jpeg/jquant2.c ****       b1->c0max = lb;
 477:fltk-1.3.4-1/jpeg/jquant2.c ****       b2->c0min = lb+1;
 478:fltk-1.3.4-1/jpeg/jquant2.c ****       break;
 479:fltk-1.3.4-1/jpeg/jquant2.c ****     case 1:
 480:fltk-1.3.4-1/jpeg/jquant2.c ****       lb = (b1->c1max + b1->c1min) / 2;
 481:fltk-1.3.4-1/jpeg/jquant2.c ****       b1->c1max = lb;
 482:fltk-1.3.4-1/jpeg/jquant2.c ****       b2->c1min = lb+1;
 483:fltk-1.3.4-1/jpeg/jquant2.c ****       break;
 484:fltk-1.3.4-1/jpeg/jquant2.c ****     case 2:
 485:fltk-1.3.4-1/jpeg/jquant2.c ****       lb = (b1->c2max + b1->c2min) / 2;
 486:fltk-1.3.4-1/jpeg/jquant2.c ****       b1->c2max = lb;
 487:fltk-1.3.4-1/jpeg/jquant2.c ****       b2->c2min = lb+1;
 488:fltk-1.3.4-1/jpeg/jquant2.c ****       break;
 489:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 490:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Update stats for boxes */
 491:fltk-1.3.4-1/jpeg/jquant2.c ****     update_box(cinfo, b1);
 492:fltk-1.3.4-1/jpeg/jquant2.c ****     update_box(cinfo, b2);
 493:fltk-1.3.4-1/jpeg/jquant2.c ****     numboxes++;
 494:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 495:fltk-1.3.4-1/jpeg/jquant2.c ****   return numboxes;
 496:fltk-1.3.4-1/jpeg/jquant2.c **** }
 497:fltk-1.3.4-1/jpeg/jquant2.c **** 
 498:fltk-1.3.4-1/jpeg/jquant2.c **** 
 499:fltk-1.3.4-1/jpeg/jquant2.c **** LOCAL(void)
 500:fltk-1.3.4-1/jpeg/jquant2.c **** compute_color (j_decompress_ptr cinfo, boxptr boxp, int icolor)
 501:fltk-1.3.4-1/jpeg/jquant2.c **** /* Compute representative color for a box, put it in colormap[icolor] */
 502:fltk-1.3.4-1/jpeg/jquant2.c **** {
 503:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Current algorithm: mean weighted by pixels (not colors) */
 504:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Note it is important to get the rounding correct! */
 505:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 506:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram = cquantize->histogram;
 507:fltk-1.3.4-1/jpeg/jquant2.c ****   histptr histp;
 508:fltk-1.3.4-1/jpeg/jquant2.c ****   int c0,c1,c2;
 509:fltk-1.3.4-1/jpeg/jquant2.c ****   int c0min,c0max,c1min,c1max,c2min,c2max;
 510:fltk-1.3.4-1/jpeg/jquant2.c ****   long count;
 511:fltk-1.3.4-1/jpeg/jquant2.c ****   long total = 0;
 512:fltk-1.3.4-1/jpeg/jquant2.c ****   long c0total = 0;
 513:fltk-1.3.4-1/jpeg/jquant2.c ****   long c1total = 0;
 514:fltk-1.3.4-1/jpeg/jquant2.c ****   long c2total = 0;
 515:fltk-1.3.4-1/jpeg/jquant2.c ****   
 516:fltk-1.3.4-1/jpeg/jquant2.c ****   c0min = boxp->c0min;  c0max = boxp->c0max;
 517:fltk-1.3.4-1/jpeg/jquant2.c ****   c1min = boxp->c1min;  c1max = boxp->c1max;
 518:fltk-1.3.4-1/jpeg/jquant2.c ****   c2min = boxp->c2min;  c2max = boxp->c2max;
 519:fltk-1.3.4-1/jpeg/jquant2.c ****   
 520:fltk-1.3.4-1/jpeg/jquant2.c ****   for (c0 = c0min; c0 <= c0max; c0++)
 521:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 522:fltk-1.3.4-1/jpeg/jquant2.c ****       histp = & histogram[c0][c1][c2min];
 523:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c2 = c2min; c2 <= c2max; c2++) {
 524:fltk-1.3.4-1/jpeg/jquant2.c **** 	if ((count = *histp++) != 0) {
 525:fltk-1.3.4-1/jpeg/jquant2.c **** 	  total += count;
 526:fltk-1.3.4-1/jpeg/jquant2.c **** 	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 527:fltk-1.3.4-1/jpeg/jquant2.c **** 	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 528:fltk-1.3.4-1/jpeg/jquant2.c **** 	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 529:fltk-1.3.4-1/jpeg/jquant2.c **** 	}
 530:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 531:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 532:fltk-1.3.4-1/jpeg/jquant2.c ****   
 533:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 534:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 535:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 536:fltk-1.3.4-1/jpeg/jquant2.c **** }
 537:fltk-1.3.4-1/jpeg/jquant2.c **** 
 538:fltk-1.3.4-1/jpeg/jquant2.c **** 
 539:fltk-1.3.4-1/jpeg/jquant2.c **** LOCAL(void)
 540:fltk-1.3.4-1/jpeg/jquant2.c **** select_colors (j_decompress_ptr cinfo, int desired_colors)
 541:fltk-1.3.4-1/jpeg/jquant2.c **** /* Master routine for color selection */
 542:fltk-1.3.4-1/jpeg/jquant2.c **** {
 543:fltk-1.3.4-1/jpeg/jquant2.c ****   boxptr boxlist;
 544:fltk-1.3.4-1/jpeg/jquant2.c ****   int numboxes;
 545:fltk-1.3.4-1/jpeg/jquant2.c ****   int i;
 546:fltk-1.3.4-1/jpeg/jquant2.c **** 
 547:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Allocate workspace for box list */
 548:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist = (boxptr) (*cinfo->mem->alloc_small)
 549:fltk-1.3.4-1/jpeg/jquant2.c ****     ((j_common_ptr) cinfo, JPOOL_IMAGE, desired_colors * SIZEOF(box));
 550:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Initialize one box containing whole space */
 551:fltk-1.3.4-1/jpeg/jquant2.c ****   numboxes = 1;
 552:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c0min = 0;
 553:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 554:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c1min = 0;
 555:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 556:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c2min = 0;
 557:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 558:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Shrink it to actually-used volume and set its statistics */
 559:fltk-1.3.4-1/jpeg/jquant2.c ****   update_box(cinfo, & boxlist[0]);
 560:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Perform median-cut to produce final box list */
 561:fltk-1.3.4-1/jpeg/jquant2.c ****   numboxes = median_cut(cinfo, boxlist, numboxes, desired_colors);
 562:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Compute the representative color for each box, fill colormap */
 563:fltk-1.3.4-1/jpeg/jquant2.c ****   for (i = 0; i < numboxes; i++)
 564:fltk-1.3.4-1/jpeg/jquant2.c ****     compute_color(cinfo, & boxlist[i], i);
 565:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->actual_number_of_colors = numboxes;
 566:fltk-1.3.4-1/jpeg/jquant2.c ****   TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 567:fltk-1.3.4-1/jpeg/jquant2.c **** }
 568:fltk-1.3.4-1/jpeg/jquant2.c **** 
 569:fltk-1.3.4-1/jpeg/jquant2.c **** 
 570:fltk-1.3.4-1/jpeg/jquant2.c **** /*
 571:fltk-1.3.4-1/jpeg/jquant2.c ****  * These routines are concerned with the time-critical task of mapping input
 572:fltk-1.3.4-1/jpeg/jquant2.c ****  * colors to the nearest color in the selected colormap.
 573:fltk-1.3.4-1/jpeg/jquant2.c ****  *
 574:fltk-1.3.4-1/jpeg/jquant2.c ****  * We re-use the histogram space as an "inverse color map", essentially a
 575:fltk-1.3.4-1/jpeg/jquant2.c ****  * cache for the results of nearest-color searches.  All colors within a
 576:fltk-1.3.4-1/jpeg/jquant2.c ****  * histogram cell will be mapped to the same colormap entry, namely the one
 577:fltk-1.3.4-1/jpeg/jquant2.c ****  * closest to the cell's center.  This may not be quite the closest entry to
 578:fltk-1.3.4-1/jpeg/jquant2.c ****  * the actual input color, but it's almost as good.  A zero in the cache
 579:fltk-1.3.4-1/jpeg/jquant2.c ****  * indicates we haven't found the nearest color for that cell yet; the array
 580:fltk-1.3.4-1/jpeg/jquant2.c ****  * is cleared to zeroes before starting the mapping pass.  When we find the
 581:fltk-1.3.4-1/jpeg/jquant2.c ****  * nearest color for a cell, its colormap index plus one is recorded in the
 582:fltk-1.3.4-1/jpeg/jquant2.c ****  * cache for future use.  The pass2 scanning routines call fill_inverse_cmap
 583:fltk-1.3.4-1/jpeg/jquant2.c ****  * when they need to use an unfilled entry in the cache.
 584:fltk-1.3.4-1/jpeg/jquant2.c ****  *
 585:fltk-1.3.4-1/jpeg/jquant2.c ****  * Our method of efficiently finding nearest colors is based on the "locally
 586:fltk-1.3.4-1/jpeg/jquant2.c ****  * sorted search" idea described by Heckbert and on the incremental distance
 587:fltk-1.3.4-1/jpeg/jquant2.c ****  * calculation described by Spencer W. Thomas in chapter III.1 of Graphics
 588:fltk-1.3.4-1/jpeg/jquant2.c ****  * Gems II (James Arvo, ed.  Academic Press, 1991).  Thomas points out that
 589:fltk-1.3.4-1/jpeg/jquant2.c ****  * the distances from a given colormap entry to each cell of the histogram can
 590:fltk-1.3.4-1/jpeg/jquant2.c ****  * be computed quickly using an incremental method: the differences between
 591:fltk-1.3.4-1/jpeg/jquant2.c ****  * distances to adjacent cells themselves differ by a constant.  This allows a
 592:fltk-1.3.4-1/jpeg/jquant2.c ****  * fairly fast implementation of the "brute force" approach of computing the
 593:fltk-1.3.4-1/jpeg/jquant2.c ****  * distance from every colormap entry to every histogram cell.  Unfortunately,
 594:fltk-1.3.4-1/jpeg/jquant2.c ****  * it needs a work array to hold the best-distance-so-far for each histogram
 595:fltk-1.3.4-1/jpeg/jquant2.c ****  * cell (because the inner loop has to be over cells, not colormap entries).
 596:fltk-1.3.4-1/jpeg/jquant2.c ****  * The work array elements have to be INT32s, so the work array would need
 597:fltk-1.3.4-1/jpeg/jquant2.c ****  * 256Kb at our recommended precision.  This is not feasible in DOS machines.
 598:fltk-1.3.4-1/jpeg/jquant2.c ****  *
 599:fltk-1.3.4-1/jpeg/jquant2.c ****  * To get around these problems, we apply Thomas' method to compute the
 600:fltk-1.3.4-1/jpeg/jquant2.c ****  * nearest colors for only the cells within a small subbox of the histogram.
 601:fltk-1.3.4-1/jpeg/jquant2.c ****  * The work array need be only as big as the subbox, so the memory usage
 602:fltk-1.3.4-1/jpeg/jquant2.c ****  * problem is solved.  Furthermore, we need not fill subboxes that are never
 603:fltk-1.3.4-1/jpeg/jquant2.c ****  * referenced in pass2; many images use only part of the color gamut, so a
 604:fltk-1.3.4-1/jpeg/jquant2.c ****  * fair amount of work is saved.  An additional advantage of this
 605:fltk-1.3.4-1/jpeg/jquant2.c ****  * approach is that we can apply Heckbert's locality criterion to quickly
 606:fltk-1.3.4-1/jpeg/jquant2.c ****  * eliminate colormap entries that are far away from the subbox; typically
 607:fltk-1.3.4-1/jpeg/jquant2.c ****  * three-fourths of the colormap entries are rejected by Heckbert's criterion,
 608:fltk-1.3.4-1/jpeg/jquant2.c ****  * and we need not compute their distances to individual cells in the subbox.
 609:fltk-1.3.4-1/jpeg/jquant2.c ****  * The speed of this approach is heavily influenced by the subbox size: too
 610:fltk-1.3.4-1/jpeg/jquant2.c ****  * small means too much overhead, too big loses because Heckbert's criterion
 611:fltk-1.3.4-1/jpeg/jquant2.c ****  * can't eliminate as many colormap entries.  Empirically the best subbox
 612:fltk-1.3.4-1/jpeg/jquant2.c ****  * size seems to be about 1/512th of the histogram (1/8th in each direction).
 613:fltk-1.3.4-1/jpeg/jquant2.c ****  *
 614:fltk-1.3.4-1/jpeg/jquant2.c ****  * Thomas' article also describes a refined method which is asymptotically
 615:fltk-1.3.4-1/jpeg/jquant2.c ****  * faster than the brute-force method, but it is also far more complex and
 616:fltk-1.3.4-1/jpeg/jquant2.c ****  * cannot efficiently be applied to small subboxes.  It is therefore not
 617:fltk-1.3.4-1/jpeg/jquant2.c ****  * useful for programs intended to be portable to DOS machines.  On machines
 618:fltk-1.3.4-1/jpeg/jquant2.c ****  * with plenty of memory, filling the whole histogram in one shot with Thomas'
 619:fltk-1.3.4-1/jpeg/jquant2.c ****  * refined method might be faster than the present code --- but then again,
 620:fltk-1.3.4-1/jpeg/jquant2.c ****  * it might not be any faster, and it's certainly more complicated.
 621:fltk-1.3.4-1/jpeg/jquant2.c ****  */
 622:fltk-1.3.4-1/jpeg/jquant2.c **** 
 623:fltk-1.3.4-1/jpeg/jquant2.c **** 
 624:fltk-1.3.4-1/jpeg/jquant2.c **** /* log2(histogram cells in update box) for each axis; this can be adjusted */
 625:fltk-1.3.4-1/jpeg/jquant2.c **** #define BOX_C0_LOG  (HIST_C0_BITS-3)
 626:fltk-1.3.4-1/jpeg/jquant2.c **** #define BOX_C1_LOG  (HIST_C1_BITS-3)
 627:fltk-1.3.4-1/jpeg/jquant2.c **** #define BOX_C2_LOG  (HIST_C2_BITS-3)
 628:fltk-1.3.4-1/jpeg/jquant2.c **** 
 629:fltk-1.3.4-1/jpeg/jquant2.c **** #define BOX_C0_ELEMS  (1<<BOX_C0_LOG) /* # of hist cells in update box */
 630:fltk-1.3.4-1/jpeg/jquant2.c **** #define BOX_C1_ELEMS  (1<<BOX_C1_LOG)
 631:fltk-1.3.4-1/jpeg/jquant2.c **** #define BOX_C2_ELEMS  (1<<BOX_C2_LOG)
 632:fltk-1.3.4-1/jpeg/jquant2.c **** 
 633:fltk-1.3.4-1/jpeg/jquant2.c **** #define BOX_C0_SHIFT  (C0_SHIFT + BOX_C0_LOG)
 634:fltk-1.3.4-1/jpeg/jquant2.c **** #define BOX_C1_SHIFT  (C1_SHIFT + BOX_C1_LOG)
 635:fltk-1.3.4-1/jpeg/jquant2.c **** #define BOX_C2_SHIFT  (C2_SHIFT + BOX_C2_LOG)
 636:fltk-1.3.4-1/jpeg/jquant2.c **** 
 637:fltk-1.3.4-1/jpeg/jquant2.c **** 
 638:fltk-1.3.4-1/jpeg/jquant2.c **** /*
 639:fltk-1.3.4-1/jpeg/jquant2.c ****  * The next three routines implement inverse colormap filling.  They could
 640:fltk-1.3.4-1/jpeg/jquant2.c ****  * all be folded into one big routine, but splitting them up this way saves
 641:fltk-1.3.4-1/jpeg/jquant2.c ****  * some stack space (the mindist[] and bestdist[] arrays need not coexist)
 642:fltk-1.3.4-1/jpeg/jquant2.c ****  * and may allow some compilers to produce better code by registerizing more
 643:fltk-1.3.4-1/jpeg/jquant2.c ****  * inner-loop variables.
 644:fltk-1.3.4-1/jpeg/jquant2.c ****  */
 645:fltk-1.3.4-1/jpeg/jquant2.c **** 
 646:fltk-1.3.4-1/jpeg/jquant2.c **** LOCAL(int)
 647:fltk-1.3.4-1/jpeg/jquant2.c **** find_nearby_colors (j_decompress_ptr cinfo, int minc0, int minc1, int minc2,
 648:fltk-1.3.4-1/jpeg/jquant2.c **** 		    JSAMPLE colorlist[])
 649:fltk-1.3.4-1/jpeg/jquant2.c **** /* Locate the colormap entries close enough to an update box to be candidates
 650:fltk-1.3.4-1/jpeg/jquant2.c ****  * for the nearest entry to some cell(s) in the update box.  The update box
 651:fltk-1.3.4-1/jpeg/jquant2.c ****  * is specified by the center coordinates of its first cell.  The number of
 652:fltk-1.3.4-1/jpeg/jquant2.c ****  * candidate colormap entries is returned, and their colormap indexes are
 653:fltk-1.3.4-1/jpeg/jquant2.c ****  * placed in colorlist[].
 654:fltk-1.3.4-1/jpeg/jquant2.c ****  * This routine uses Heckbert's "locally sorted search" criterion to select
 655:fltk-1.3.4-1/jpeg/jquant2.c ****  * the colors that need further consideration.
 656:fltk-1.3.4-1/jpeg/jquant2.c ****  */
 657:fltk-1.3.4-1/jpeg/jquant2.c **** {
 658:fltk-1.3.4-1/jpeg/jquant2.c ****   int numcolors = cinfo->actual_number_of_colors;
 659:fltk-1.3.4-1/jpeg/jquant2.c ****   int maxc0, maxc1, maxc2;
 660:fltk-1.3.4-1/jpeg/jquant2.c ****   int centerc0, centerc1, centerc2;
 661:fltk-1.3.4-1/jpeg/jquant2.c ****   int i, x, ncolors;
 662:fltk-1.3.4-1/jpeg/jquant2.c ****   INT32 minmaxdist, min_dist, max_dist, tdist;
 663:fltk-1.3.4-1/jpeg/jquant2.c ****   INT32 mindist[MAXNUMCOLORS];	/* min distance to colormap entry i */
 664:fltk-1.3.4-1/jpeg/jquant2.c **** 
 665:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Compute true coordinates of update box's upper corner and center.
 666:fltk-1.3.4-1/jpeg/jquant2.c ****    * Actually we compute the coordinates of the center of the upper-corner
 667:fltk-1.3.4-1/jpeg/jquant2.c ****    * histogram cell, which are the upper bounds of the volume we care about.
 668:fltk-1.3.4-1/jpeg/jquant2.c ****    * Note that since ">>" rounds down, the "center" values may be closer to
 669:fltk-1.3.4-1/jpeg/jquant2.c ****    * min than to max; hence comparisons to them must be "<=", not "<".
 670:fltk-1.3.4-1/jpeg/jquant2.c ****    */
 671:fltk-1.3.4-1/jpeg/jquant2.c ****   maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
 672:fltk-1.3.4-1/jpeg/jquant2.c ****   centerc0 = (minc0 + maxc0) >> 1;
 673:fltk-1.3.4-1/jpeg/jquant2.c ****   maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 674:fltk-1.3.4-1/jpeg/jquant2.c ****   centerc1 = (minc1 + maxc1) >> 1;
 675:fltk-1.3.4-1/jpeg/jquant2.c ****   maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 676:fltk-1.3.4-1/jpeg/jquant2.c ****   centerc2 = (minc2 + maxc2) >> 1;
 677:fltk-1.3.4-1/jpeg/jquant2.c **** 
 678:fltk-1.3.4-1/jpeg/jquant2.c ****   /* For each color in colormap, find:
 679:fltk-1.3.4-1/jpeg/jquant2.c ****    *  1. its minimum squared-distance to any point in the update box
 680:fltk-1.3.4-1/jpeg/jquant2.c ****    *     (zero if color is within update box);
 681:fltk-1.3.4-1/jpeg/jquant2.c ****    *  2. its maximum squared-distance to any point in the update box.
 682:fltk-1.3.4-1/jpeg/jquant2.c ****    * Both of these can be found by considering only the corners of the box.
 683:fltk-1.3.4-1/jpeg/jquant2.c ****    * We save the minimum distance for each color in mindist[];
 684:fltk-1.3.4-1/jpeg/jquant2.c ****    * only the smallest maximum distance is of interest.
 685:fltk-1.3.4-1/jpeg/jquant2.c ****    */
 686:fltk-1.3.4-1/jpeg/jquant2.c ****   minmaxdist = 0x7FFFFFFFL;
 687:fltk-1.3.4-1/jpeg/jquant2.c **** 
 688:fltk-1.3.4-1/jpeg/jquant2.c ****   for (i = 0; i < numcolors; i++) {
 689:fltk-1.3.4-1/jpeg/jquant2.c ****     /* We compute the squared-c0-distance term, then add in the other two. */
 690:fltk-1.3.4-1/jpeg/jquant2.c ****     x = GETJSAMPLE(cinfo->colormap[0][i]);
 691:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc0) {
 692:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc0) * C0_SCALE;
 693:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist = tdist*tdist;
 694:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc0) * C0_SCALE;
 695:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist = tdist*tdist;
 696:fltk-1.3.4-1/jpeg/jquant2.c ****     } else if (x > maxc0) {
 697:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc0) * C0_SCALE;
 698:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist = tdist*tdist;
 699:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc0) * C0_SCALE;
 700:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist = tdist*tdist;
 701:fltk-1.3.4-1/jpeg/jquant2.c ****     } else {
 702:fltk-1.3.4-1/jpeg/jquant2.c ****       /* within cell range so no contribution to min_dist */
 703:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist = 0;
 704:fltk-1.3.4-1/jpeg/jquant2.c ****       if (x <= centerc0) {
 705:fltk-1.3.4-1/jpeg/jquant2.c **** 	tdist = (x - maxc0) * C0_SCALE;
 706:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist = tdist*tdist;
 707:fltk-1.3.4-1/jpeg/jquant2.c ****       } else {
 708:fltk-1.3.4-1/jpeg/jquant2.c **** 	tdist = (x - minc0) * C0_SCALE;
 709:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist = tdist*tdist;
 710:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 711:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 712:fltk-1.3.4-1/jpeg/jquant2.c **** 
 713:fltk-1.3.4-1/jpeg/jquant2.c ****     x = GETJSAMPLE(cinfo->colormap[1][i]);
 714:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc1) {
 715:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc1) * C1_SCALE;
 716:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 717:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc1) * C1_SCALE;
 718:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist += tdist*tdist;
 719:fltk-1.3.4-1/jpeg/jquant2.c ****     } else if (x > maxc1) {
 720:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc1) * C1_SCALE;
 721:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 722:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc1) * C1_SCALE;
 723:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist += tdist*tdist;
 724:fltk-1.3.4-1/jpeg/jquant2.c ****     } else {
 725:fltk-1.3.4-1/jpeg/jquant2.c ****       /* within cell range so no contribution to min_dist */
 726:fltk-1.3.4-1/jpeg/jquant2.c ****       if (x <= centerc1) {
 727:fltk-1.3.4-1/jpeg/jquant2.c **** 	tdist = (x - maxc1) * C1_SCALE;
 728:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 729:fltk-1.3.4-1/jpeg/jquant2.c ****       } else {
 730:fltk-1.3.4-1/jpeg/jquant2.c **** 	tdist = (x - minc1) * C1_SCALE;
 731:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 732:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 733:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 734:fltk-1.3.4-1/jpeg/jquant2.c **** 
 735:fltk-1.3.4-1/jpeg/jquant2.c ****     x = GETJSAMPLE(cinfo->colormap[2][i]);
 736:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc2) {
 737:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc2) * C2_SCALE;
 738:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 739:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc2) * C2_SCALE;
 740:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist += tdist*tdist;
 741:fltk-1.3.4-1/jpeg/jquant2.c ****     } else if (x > maxc2) {
 742:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc2) * C2_SCALE;
 743:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 744:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc2) * C2_SCALE;
 745:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist += tdist*tdist;
 746:fltk-1.3.4-1/jpeg/jquant2.c ****     } else {
 747:fltk-1.3.4-1/jpeg/jquant2.c ****       /* within cell range so no contribution to min_dist */
 748:fltk-1.3.4-1/jpeg/jquant2.c ****       if (x <= centerc2) {
 749:fltk-1.3.4-1/jpeg/jquant2.c **** 	tdist = (x - maxc2) * C2_SCALE;
 750:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 751:fltk-1.3.4-1/jpeg/jquant2.c ****       } else {
 752:fltk-1.3.4-1/jpeg/jquant2.c **** 	tdist = (x - minc2) * C2_SCALE;
 753:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 754:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 755:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 756:fltk-1.3.4-1/jpeg/jquant2.c **** 
 757:fltk-1.3.4-1/jpeg/jquant2.c ****     mindist[i] = min_dist;	/* save away the results */
 758:fltk-1.3.4-1/jpeg/jquant2.c ****     if (max_dist < minmaxdist)
 759:fltk-1.3.4-1/jpeg/jquant2.c ****       minmaxdist = max_dist;
 760:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 761:fltk-1.3.4-1/jpeg/jquant2.c **** 
 762:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Now we know that no cell in the update box is more than minmaxdist
 763:fltk-1.3.4-1/jpeg/jquant2.c ****    * away from some colormap entry.  Therefore, only colors that are
 764:fltk-1.3.4-1/jpeg/jquant2.c ****    * within minmaxdist of some part of the box need be considered.
 765:fltk-1.3.4-1/jpeg/jquant2.c ****    */
 766:fltk-1.3.4-1/jpeg/jquant2.c ****   ncolors = 0;
 767:fltk-1.3.4-1/jpeg/jquant2.c ****   for (i = 0; i < numcolors; i++) {
 768:fltk-1.3.4-1/jpeg/jquant2.c ****     if (mindist[i] <= minmaxdist)
 769:fltk-1.3.4-1/jpeg/jquant2.c ****       colorlist[ncolors++] = (JSAMPLE) i;
 770:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 771:fltk-1.3.4-1/jpeg/jquant2.c ****   return ncolors;
 772:fltk-1.3.4-1/jpeg/jquant2.c **** }
 773:fltk-1.3.4-1/jpeg/jquant2.c **** 
 774:fltk-1.3.4-1/jpeg/jquant2.c **** 
 775:fltk-1.3.4-1/jpeg/jquant2.c **** LOCAL(void)
 776:fltk-1.3.4-1/jpeg/jquant2.c **** find_best_colors (j_decompress_ptr cinfo, int minc0, int minc1, int minc2,
 777:fltk-1.3.4-1/jpeg/jquant2.c **** 		  int numcolors, JSAMPLE colorlist[], JSAMPLE bestcolor[])
 778:fltk-1.3.4-1/jpeg/jquant2.c **** /* Find the closest colormap entry for each cell in the update box,
 779:fltk-1.3.4-1/jpeg/jquant2.c ****  * given the list of candidate colors prepared by find_nearby_colors.
 780:fltk-1.3.4-1/jpeg/jquant2.c ****  * Return the indexes of the closest entries in the bestcolor[] array.
 781:fltk-1.3.4-1/jpeg/jquant2.c ****  * This routine uses Thomas' incremental distance calculation method to
 782:fltk-1.3.4-1/jpeg/jquant2.c ****  * find the distance from a colormap entry to successive cells in the box.
 783:fltk-1.3.4-1/jpeg/jquant2.c ****  */
 784:fltk-1.3.4-1/jpeg/jquant2.c **** {
 785:fltk-1.3.4-1/jpeg/jquant2.c ****   int ic0, ic1, ic2;
 786:fltk-1.3.4-1/jpeg/jquant2.c ****   int i, icolor;
 787:fltk-1.3.4-1/jpeg/jquant2.c ****   register INT32 * bptr;	/* pointer into bestdist[] array */
 788:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPLE * cptr;		/* pointer into bestcolor[] array */
 789:fltk-1.3.4-1/jpeg/jquant2.c ****   INT32 dist0, dist1;		/* initial distance values */
 790:fltk-1.3.4-1/jpeg/jquant2.c ****   register INT32 dist2;		/* current distance in inner loop */
 791:fltk-1.3.4-1/jpeg/jquant2.c ****   INT32 xx0, xx1;		/* distance increments */
 792:fltk-1.3.4-1/jpeg/jquant2.c ****   register INT32 xx2;
 793:fltk-1.3.4-1/jpeg/jquant2.c ****   INT32 inc0, inc1, inc2;	/* initial values for increments */
 794:fltk-1.3.4-1/jpeg/jquant2.c ****   /* This array holds the distance to the nearest-so-far color for each cell */
 795:fltk-1.3.4-1/jpeg/jquant2.c ****   INT32 bestdist[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];
 796:fltk-1.3.4-1/jpeg/jquant2.c **** 
 797:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Initialize best-distance for each cell of the update box */
 798:fltk-1.3.4-1/jpeg/jquant2.c ****   bptr = bestdist;
 799:fltk-1.3.4-1/jpeg/jquant2.c ****   for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 800:fltk-1.3.4-1/jpeg/jquant2.c ****     *bptr++ = 0x7FFFFFFFL;
 801:fltk-1.3.4-1/jpeg/jquant2.c ****   
 802:fltk-1.3.4-1/jpeg/jquant2.c ****   /* For each color selected by find_nearby_colors,
 803:fltk-1.3.4-1/jpeg/jquant2.c ****    * compute its distance to the center of each cell in the box.
 804:fltk-1.3.4-1/jpeg/jquant2.c ****    * If that's less than best-so-far, update best distance and color number.
 805:fltk-1.3.4-1/jpeg/jquant2.c ****    */
 806:fltk-1.3.4-1/jpeg/jquant2.c ****   
 807:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Nominal steps between cell centers ("x" in Thomas article) */
 808:fltk-1.3.4-1/jpeg/jquant2.c **** #define STEP_C0  ((1 << C0_SHIFT) * C0_SCALE)
 809:fltk-1.3.4-1/jpeg/jquant2.c **** #define STEP_C1  ((1 << C1_SHIFT) * C1_SCALE)
 810:fltk-1.3.4-1/jpeg/jquant2.c **** #define STEP_C2  ((1 << C2_SHIFT) * C2_SCALE)
 811:fltk-1.3.4-1/jpeg/jquant2.c ****   
 812:fltk-1.3.4-1/jpeg/jquant2.c ****   for (i = 0; i < numcolors; i++) {
 813:fltk-1.3.4-1/jpeg/jquant2.c ****     icolor = GETJSAMPLE(colorlist[i]);
 814:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Compute (square of) distance from minc0/c1/c2 to this color */
 815:fltk-1.3.4-1/jpeg/jquant2.c ****     inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 816:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 = inc0*inc0;
 817:fltk-1.3.4-1/jpeg/jquant2.c ****     inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 818:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc1*inc1;
 819:fltk-1.3.4-1/jpeg/jquant2.c ****     inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 820:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc2*inc2;
 821:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Form the initial difference increments */
 822:fltk-1.3.4-1/jpeg/jquant2.c ****     inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 823:fltk-1.3.4-1/jpeg/jquant2.c ****     inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 824:fltk-1.3.4-1/jpeg/jquant2.c ****     inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 825:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Now loop over all cells in box, updating distance per Thomas method */
 826:fltk-1.3.4-1/jpeg/jquant2.c ****     bptr = bestdist;
 827:fltk-1.3.4-1/jpeg/jquant2.c ****     cptr = bestcolor;
 828:fltk-1.3.4-1/jpeg/jquant2.c ****     xx0 = inc0;
 829:fltk-1.3.4-1/jpeg/jquant2.c ****     for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 830:fltk-1.3.4-1/jpeg/jquant2.c ****       dist1 = dist0;
 831:fltk-1.3.4-1/jpeg/jquant2.c ****       xx1 = inc1;
 832:fltk-1.3.4-1/jpeg/jquant2.c ****       for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 833:fltk-1.3.4-1/jpeg/jquant2.c **** 	dist2 = dist1;
 834:fltk-1.3.4-1/jpeg/jquant2.c **** 	xx2 = inc2;
 835:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 836:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (dist2 < *bptr) {
 837:fltk-1.3.4-1/jpeg/jquant2.c **** 	    *bptr = dist2;
 838:fltk-1.3.4-1/jpeg/jquant2.c **** 	    *cptr = (JSAMPLE) icolor;
 839:fltk-1.3.4-1/jpeg/jquant2.c **** 	  }
 840:fltk-1.3.4-1/jpeg/jquant2.c **** 	  dist2 += xx2;
 841:fltk-1.3.4-1/jpeg/jquant2.c **** 	  xx2 += 2 * STEP_C2 * STEP_C2;
 842:fltk-1.3.4-1/jpeg/jquant2.c **** 	  bptr++;
 843:fltk-1.3.4-1/jpeg/jquant2.c **** 	  cptr++;
 844:fltk-1.3.4-1/jpeg/jquant2.c **** 	}
 845:fltk-1.3.4-1/jpeg/jquant2.c **** 	dist1 += xx1;
 846:fltk-1.3.4-1/jpeg/jquant2.c **** 	xx1 += 2 * STEP_C1 * STEP_C1;
 847:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 848:fltk-1.3.4-1/jpeg/jquant2.c ****       dist0 += xx0;
 849:fltk-1.3.4-1/jpeg/jquant2.c ****       xx0 += 2 * STEP_C0 * STEP_C0;
 850:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 851:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 852:fltk-1.3.4-1/jpeg/jquant2.c **** }
 853:fltk-1.3.4-1/jpeg/jquant2.c **** 
 854:fltk-1.3.4-1/jpeg/jquant2.c **** 
 855:fltk-1.3.4-1/jpeg/jquant2.c **** LOCAL(void)
 856:fltk-1.3.4-1/jpeg/jquant2.c **** fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
 857:fltk-1.3.4-1/jpeg/jquant2.c **** /* Fill the inverse-colormap entries in the update box that contains */
 858:fltk-1.3.4-1/jpeg/jquant2.c **** /* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
 859:fltk-1.3.4-1/jpeg/jquant2.c **** /* we can fill as many others as we wish.) */
 860:fltk-1.3.4-1/jpeg/jquant2.c **** {
 861:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 862:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram = cquantize->histogram;
 863:fltk-1.3.4-1/jpeg/jquant2.c ****   int minc0, minc1, minc2;	/* lower left corner of update box */
 864:fltk-1.3.4-1/jpeg/jquant2.c ****   int ic0, ic1, ic2;
 865:fltk-1.3.4-1/jpeg/jquant2.c ****   register JSAMPLE * cptr;	/* pointer into bestcolor[] array */
 866:fltk-1.3.4-1/jpeg/jquant2.c ****   register histptr cachep;	/* pointer into main cache array */
 867:fltk-1.3.4-1/jpeg/jquant2.c ****   /* This array lists the candidate colormap indexes. */
 868:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPLE colorlist[MAXNUMCOLORS];
 869:fltk-1.3.4-1/jpeg/jquant2.c ****   int numcolors;		/* number of candidate colors */
 870:fltk-1.3.4-1/jpeg/jquant2.c ****   /* This array holds the actually closest colormap index for each cell. */
 871:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];
 872:fltk-1.3.4-1/jpeg/jquant2.c **** 
 873:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Convert cell coordinates to update box ID */
 874:fltk-1.3.4-1/jpeg/jquant2.c ****   c0 >>= BOX_C0_LOG;
 875:fltk-1.3.4-1/jpeg/jquant2.c ****   c1 >>= BOX_C1_LOG;
 876:fltk-1.3.4-1/jpeg/jquant2.c ****   c2 >>= BOX_C2_LOG;
 877:fltk-1.3.4-1/jpeg/jquant2.c **** 
 878:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Compute true coordinates of update box's origin corner.
 879:fltk-1.3.4-1/jpeg/jquant2.c ****    * Actually we compute the coordinates of the center of the corner
 880:fltk-1.3.4-1/jpeg/jquant2.c ****    * histogram cell, which are the lower bounds of the volume we care about.
 881:fltk-1.3.4-1/jpeg/jquant2.c ****    */
 882:fltk-1.3.4-1/jpeg/jquant2.c ****   minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 883:fltk-1.3.4-1/jpeg/jquant2.c ****   minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 884:fltk-1.3.4-1/jpeg/jquant2.c ****   minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 885:fltk-1.3.4-1/jpeg/jquant2.c ****   
 886:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Determine which colormap entries are close enough to be candidates
 887:fltk-1.3.4-1/jpeg/jquant2.c ****    * for the nearest entry to some cell in the update box.
 888:fltk-1.3.4-1/jpeg/jquant2.c ****    */
 889:fltk-1.3.4-1/jpeg/jquant2.c ****   numcolors = find_nearby_colors(cinfo, minc0, minc1, minc2, colorlist);
 890:fltk-1.3.4-1/jpeg/jquant2.c **** 
 891:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Determine the actually nearest colors. */
 892:fltk-1.3.4-1/jpeg/jquant2.c ****   find_best_colors(cinfo, minc0, minc1, minc2, numcolors, colorlist,
 893:fltk-1.3.4-1/jpeg/jquant2.c **** 		   bestcolor);
 894:fltk-1.3.4-1/jpeg/jquant2.c **** 
 895:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Save the best color numbers (plus 1) in the main cache array */
 896:fltk-1.3.4-1/jpeg/jquant2.c ****   c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 897:fltk-1.3.4-1/jpeg/jquant2.c ****   c1 <<= BOX_C1_LOG;
 898:fltk-1.3.4-1/jpeg/jquant2.c ****   c2 <<= BOX_C2_LOG;
 899:fltk-1.3.4-1/jpeg/jquant2.c ****   cptr = bestcolor;
 900:fltk-1.3.4-1/jpeg/jquant2.c ****   for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 901:fltk-1.3.4-1/jpeg/jquant2.c ****     for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 902:fltk-1.3.4-1/jpeg/jquant2.c ****       cachep = & histogram[c0+ic0][c1+ic1][c2];
 903:fltk-1.3.4-1/jpeg/jquant2.c ****       for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 904:fltk-1.3.4-1/jpeg/jquant2.c **** 	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 905:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 906:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 907:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 908:fltk-1.3.4-1/jpeg/jquant2.c **** }
 909:fltk-1.3.4-1/jpeg/jquant2.c **** 
 910:fltk-1.3.4-1/jpeg/jquant2.c **** 
 911:fltk-1.3.4-1/jpeg/jquant2.c **** /*
 912:fltk-1.3.4-1/jpeg/jquant2.c ****  * Map some rows of pixels to the output colormapped representation.
 913:fltk-1.3.4-1/jpeg/jquant2.c ****  */
 914:fltk-1.3.4-1/jpeg/jquant2.c **** 
 915:fltk-1.3.4-1/jpeg/jquant2.c **** METHODDEF(void)
 916:fltk-1.3.4-1/jpeg/jquant2.c **** pass2_no_dither (j_decompress_ptr cinfo,
 917:fltk-1.3.4-1/jpeg/jquant2.c **** 		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
 918:fltk-1.3.4-1/jpeg/jquant2.c **** /* This version performs no dithering */
 919:fltk-1.3.4-1/jpeg/jquant2.c **** {
 920:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 921:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram = cquantize->histogram;
 922:fltk-1.3.4-1/jpeg/jquant2.c ****   register JSAMPROW inptr, outptr;
 923:fltk-1.3.4-1/jpeg/jquant2.c ****   register histptr cachep;
 924:fltk-1.3.4-1/jpeg/jquant2.c ****   register int c0, c1, c2;
 925:fltk-1.3.4-1/jpeg/jquant2.c ****   int row;
 926:fltk-1.3.4-1/jpeg/jquant2.c ****   JDIMENSION col;
 927:fltk-1.3.4-1/jpeg/jquant2.c ****   JDIMENSION width = cinfo->output_width;
 928:fltk-1.3.4-1/jpeg/jquant2.c **** 
 929:fltk-1.3.4-1/jpeg/jquant2.c ****   for (row = 0; row < num_rows; row++) {
 930:fltk-1.3.4-1/jpeg/jquant2.c ****     inptr = input_buf[row];
 931:fltk-1.3.4-1/jpeg/jquant2.c ****     outptr = output_buf[row];
 932:fltk-1.3.4-1/jpeg/jquant2.c ****     for (col = width; col > 0; col--) {
 933:fltk-1.3.4-1/jpeg/jquant2.c ****       /* get pixel value and index into the cache */
 934:fltk-1.3.4-1/jpeg/jquant2.c ****       c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 935:fltk-1.3.4-1/jpeg/jquant2.c ****       c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 936:fltk-1.3.4-1/jpeg/jquant2.c ****       c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 937:fltk-1.3.4-1/jpeg/jquant2.c ****       cachep = & histogram[c0][c1][c2];
 938:fltk-1.3.4-1/jpeg/jquant2.c ****       /* If we have not seen this color before, find nearest colormap entry */
 939:fltk-1.3.4-1/jpeg/jquant2.c ****       /* and update the cache */
 940:fltk-1.3.4-1/jpeg/jquant2.c ****       if (*cachep == 0)
 941:fltk-1.3.4-1/jpeg/jquant2.c **** 	fill_inverse_cmap(cinfo, c0,c1,c2);
 942:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Now emit the colormap index for this cell */
 943:fltk-1.3.4-1/jpeg/jquant2.c ****       *outptr++ = (JSAMPLE) (*cachep - 1);
 944:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 945:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 946:fltk-1.3.4-1/jpeg/jquant2.c **** }
 947:fltk-1.3.4-1/jpeg/jquant2.c **** 
 948:fltk-1.3.4-1/jpeg/jquant2.c **** 
 949:fltk-1.3.4-1/jpeg/jquant2.c **** METHODDEF(void)
 950:fltk-1.3.4-1/jpeg/jquant2.c **** pass2_fs_dither (j_decompress_ptr cinfo,
 951:fltk-1.3.4-1/jpeg/jquant2.c **** 		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
 952:fltk-1.3.4-1/jpeg/jquant2.c **** /* This version performs Floyd-Steinberg dithering */
 953:fltk-1.3.4-1/jpeg/jquant2.c **** {
 954:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 955:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram = cquantize->histogram;
 956:fltk-1.3.4-1/jpeg/jquant2.c ****   register LOCFSERROR cur0, cur1, cur2;	/* current error or pixel value */
 957:fltk-1.3.4-1/jpeg/jquant2.c ****   LOCFSERROR belowerr0, belowerr1, belowerr2; /* error for pixel below cur */
 958:fltk-1.3.4-1/jpeg/jquant2.c ****   LOCFSERROR bpreverr0, bpreverr1, bpreverr2; /* error for below/prev col */
 959:fltk-1.3.4-1/jpeg/jquant2.c ****   register FSERRPTR errorptr;	/* => fserrors[] at column before current */
 960:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW inptr;		/* => current input pixel */
 961:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW outptr;		/* => current output pixel */
 962:fltk-1.3.4-1/jpeg/jquant2.c ****   histptr cachep;
 963:fltk-1.3.4-1/jpeg/jquant2.c ****   int dir;			/* +1 or -1 depending on direction */
 964:fltk-1.3.4-1/jpeg/jquant2.c ****   int dir3;			/* 3*dir, for advancing inptr & errorptr */
 965:fltk-1.3.4-1/jpeg/jquant2.c ****   int row;
 966:fltk-1.3.4-1/jpeg/jquant2.c ****   JDIMENSION col;
 967:fltk-1.3.4-1/jpeg/jquant2.c ****   JDIMENSION width = cinfo->output_width;
 968:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPLE *range_limit = cinfo->sample_range_limit;
 969:fltk-1.3.4-1/jpeg/jquant2.c ****   int *error_limit = cquantize->error_limiter;
 970:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW colormap0 = cinfo->colormap[0];
 971:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW colormap1 = cinfo->colormap[1];
 972:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW colormap2 = cinfo->colormap[2];
 973:fltk-1.3.4-1/jpeg/jquant2.c ****   SHIFT_TEMPS
 974:fltk-1.3.4-1/jpeg/jquant2.c **** 
 975:fltk-1.3.4-1/jpeg/jquant2.c ****   for (row = 0; row < num_rows; row++) {
 976:fltk-1.3.4-1/jpeg/jquant2.c ****     inptr = input_buf[row];
 977:fltk-1.3.4-1/jpeg/jquant2.c ****     outptr = output_buf[row];
 978:fltk-1.3.4-1/jpeg/jquant2.c ****     if (cquantize->on_odd_row) {
 979:fltk-1.3.4-1/jpeg/jquant2.c ****       /* work right to left in this row */
 980:fltk-1.3.4-1/jpeg/jquant2.c ****       inptr += (width-1) * 3;	/* so point to rightmost pixel */
 981:fltk-1.3.4-1/jpeg/jquant2.c ****       outptr += width-1;
 982:fltk-1.3.4-1/jpeg/jquant2.c ****       dir = -1;
 983:fltk-1.3.4-1/jpeg/jquant2.c ****       dir3 = -3;
 984:fltk-1.3.4-1/jpeg/jquant2.c ****       errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 985:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->on_odd_row = FALSE; /* flip for next time */
 986:fltk-1.3.4-1/jpeg/jquant2.c ****     } else {
 987:fltk-1.3.4-1/jpeg/jquant2.c ****       /* work left to right in this row */
 988:fltk-1.3.4-1/jpeg/jquant2.c ****       dir = 1;
 989:fltk-1.3.4-1/jpeg/jquant2.c ****       dir3 = 3;
 990:fltk-1.3.4-1/jpeg/jquant2.c ****       errorptr = cquantize->fserrors; /* => entry before first real column */
 991:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->on_odd_row = TRUE; /* flip for next time */
 992:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 993:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Preset error values: no error propagated to first pixel from left */
 994:fltk-1.3.4-1/jpeg/jquant2.c ****     cur0 = cur1 = cur2 = 0;
 995:fltk-1.3.4-1/jpeg/jquant2.c ****     /* and no error propagated to row below yet */
 996:fltk-1.3.4-1/jpeg/jquant2.c ****     belowerr0 = belowerr1 = belowerr2 = 0;
 997:fltk-1.3.4-1/jpeg/jquant2.c ****     bpreverr0 = bpreverr1 = bpreverr2 = 0;
 998:fltk-1.3.4-1/jpeg/jquant2.c **** 
 999:fltk-1.3.4-1/jpeg/jquant2.c ****     for (col = width; col > 0; col--) {
1000:fltk-1.3.4-1/jpeg/jquant2.c ****       /* curN holds the error propagated from the previous pixel on the
1001:fltk-1.3.4-1/jpeg/jquant2.c ****        * current line.  Add the error propagated from the previous line
1002:fltk-1.3.4-1/jpeg/jquant2.c ****        * to form the complete error correction term for this pixel, and
1003:fltk-1.3.4-1/jpeg/jquant2.c ****        * round the error term (which is expressed * 16) to an integer.
1004:fltk-1.3.4-1/jpeg/jquant2.c ****        * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
1005:fltk-1.3.4-1/jpeg/jquant2.c ****        * for either sign of the error value.
1006:fltk-1.3.4-1/jpeg/jquant2.c ****        * Note: errorptr points to *previous* column's array entry.
1007:fltk-1.3.4-1/jpeg/jquant2.c ****        */
1008:fltk-1.3.4-1/jpeg/jquant2.c ****       cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
1009:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
1010:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
1011:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Limit the error using transfer function set by init_error_limit.
1012:fltk-1.3.4-1/jpeg/jquant2.c ****        * See comments with init_error_limit for rationale.
1013:fltk-1.3.4-1/jpeg/jquant2.c ****        */
1014:fltk-1.3.4-1/jpeg/jquant2.c ****       cur0 = error_limit[cur0];
1015:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 = error_limit[cur1];
1016:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 = error_limit[cur2];
1017:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
1018:fltk-1.3.4-1/jpeg/jquant2.c ****        * The maximum error is +- MAXJSAMPLE (or less with error limiting);
1019:fltk-1.3.4-1/jpeg/jquant2.c ****        * this sets the required size of the range_limit array.
1020:fltk-1.3.4-1/jpeg/jquant2.c ****        */
1021:fltk-1.3.4-1/jpeg/jquant2.c ****       cur0 += GETJSAMPLE(inptr[0]);
1022:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 += GETJSAMPLE(inptr[1]);
1023:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 += GETJSAMPLE(inptr[2]);
1024:fltk-1.3.4-1/jpeg/jquant2.c ****       cur0 = GETJSAMPLE(range_limit[cur0]);
1025:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 = GETJSAMPLE(range_limit[cur1]);
1026:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 = GETJSAMPLE(range_limit[cur2]);
1027:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Index into the cache with adjusted pixel value */
1028:fltk-1.3.4-1/jpeg/jquant2.c ****       cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
1029:fltk-1.3.4-1/jpeg/jquant2.c ****       /* If we have not seen this color before, find nearest colormap */
1030:fltk-1.3.4-1/jpeg/jquant2.c ****       /* entry and update the cache */
1031:fltk-1.3.4-1/jpeg/jquant2.c ****       if (*cachep == 0)
1032:fltk-1.3.4-1/jpeg/jquant2.c **** 	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
1033:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Now emit the colormap index for this cell */
1034:fltk-1.3.4-1/jpeg/jquant2.c ****       { register int pixcode = *cachep - 1;
1035:fltk-1.3.4-1/jpeg/jquant2.c **** 	*outptr = (JSAMPLE) pixcode;
1036:fltk-1.3.4-1/jpeg/jquant2.c **** 	/* Compute representation error for this pixel */
1037:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur0 -= GETJSAMPLE(colormap0[pixcode]);
1038:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 -= GETJSAMPLE(colormap1[pixcode]);
1039:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 -= GETJSAMPLE(colormap2[pixcode]);
1040:fltk-1.3.4-1/jpeg/jquant2.c ****       }
1041:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Compute error fractions to be propagated to adjacent pixels.
1042:fltk-1.3.4-1/jpeg/jquant2.c ****        * Add these into the running sums, and simultaneously shift the
1043:fltk-1.3.4-1/jpeg/jquant2.c ****        * next-line error sums left by 1 column.
1044:fltk-1.3.4-1/jpeg/jquant2.c ****        */
1045:fltk-1.3.4-1/jpeg/jquant2.c ****       { register LOCFSERROR bnexterr, delta;
1046:fltk-1.3.4-1/jpeg/jquant2.c **** 
1047:fltk-1.3.4-1/jpeg/jquant2.c **** 	bnexterr = cur0;	/* Process component 0 */
1048:fltk-1.3.4-1/jpeg/jquant2.c **** 	delta = cur0 * 2;
1049:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur0 += delta;		/* form error * 3 */
1050:fltk-1.3.4-1/jpeg/jquant2.c **** 	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
1051:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur0 += delta;		/* form error * 5 */
1052:fltk-1.3.4-1/jpeg/jquant2.c **** 	bpreverr0 = belowerr0 + cur0;
1053:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr0 = bnexterr;
1054:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur0 += delta;		/* form error * 7 */
1055:fltk-1.3.4-1/jpeg/jquant2.c **** 	bnexterr = cur1;	/* Process component 1 */
1056:fltk-1.3.4-1/jpeg/jquant2.c **** 	delta = cur1 * 2;
1057:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 += delta;		/* form error * 3 */
1058:fltk-1.3.4-1/jpeg/jquant2.c **** 	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
1059:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 += delta;		/* form error * 5 */
1060:fltk-1.3.4-1/jpeg/jquant2.c **** 	bpreverr1 = belowerr1 + cur1;
1061:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr1 = bnexterr;
1062:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 += delta;		/* form error * 7 */
1063:fltk-1.3.4-1/jpeg/jquant2.c **** 	bnexterr = cur2;	/* Process component 2 */
1064:fltk-1.3.4-1/jpeg/jquant2.c **** 	delta = cur2 * 2;
1065:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 += delta;		/* form error * 3 */
1066:fltk-1.3.4-1/jpeg/jquant2.c **** 	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
1067:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 += delta;		/* form error * 5 */
1068:fltk-1.3.4-1/jpeg/jquant2.c **** 	bpreverr2 = belowerr2 + cur2;
1069:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr2 = bnexterr;
1070:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 += delta;		/* form error * 7 */
1071:fltk-1.3.4-1/jpeg/jquant2.c ****       }
1072:fltk-1.3.4-1/jpeg/jquant2.c ****       /* At this point curN contains the 7/16 error value to be propagated
1073:fltk-1.3.4-1/jpeg/jquant2.c ****        * to the next pixel on the current line, and all the errors for the
1074:fltk-1.3.4-1/jpeg/jquant2.c ****        * next line have been shifted over.  We are therefore ready to move on.
1075:fltk-1.3.4-1/jpeg/jquant2.c ****        */
1076:fltk-1.3.4-1/jpeg/jquant2.c ****       inptr += dir3;		/* Advance pixel pointers to next column */
1077:fltk-1.3.4-1/jpeg/jquant2.c ****       outptr += dir;
1078:fltk-1.3.4-1/jpeg/jquant2.c ****       errorptr += dir3;		/* advance errorptr to current column */
1079:fltk-1.3.4-1/jpeg/jquant2.c ****     }
1080:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Post-loop cleanup: we must unload the final error values into the
1081:fltk-1.3.4-1/jpeg/jquant2.c ****      * final fserrors[] entry.  Note we need not unload belowerrN because
1082:fltk-1.3.4-1/jpeg/jquant2.c ****      * it is for the dummy column before or after the actual array.
1083:fltk-1.3.4-1/jpeg/jquant2.c ****      */
1084:fltk-1.3.4-1/jpeg/jquant2.c ****     errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
1085:fltk-1.3.4-1/jpeg/jquant2.c ****     errorptr[1] = (FSERROR) bpreverr1;
1086:fltk-1.3.4-1/jpeg/jquant2.c ****     errorptr[2] = (FSERROR) bpreverr2;
1087:fltk-1.3.4-1/jpeg/jquant2.c ****   }
1088:fltk-1.3.4-1/jpeg/jquant2.c **** }
1089:fltk-1.3.4-1/jpeg/jquant2.c **** 
1090:fltk-1.3.4-1/jpeg/jquant2.c **** 
1091:fltk-1.3.4-1/jpeg/jquant2.c **** /*
1092:fltk-1.3.4-1/jpeg/jquant2.c ****  * Initialize the error-limiting transfer function (lookup table).
1093:fltk-1.3.4-1/jpeg/jquant2.c ****  * The raw F-S error computation can potentially compute error values of up to
1094:fltk-1.3.4-1/jpeg/jquant2.c ****  * +- MAXJSAMPLE.  But we want the maximum correction applied to a pixel to be
1095:fltk-1.3.4-1/jpeg/jquant2.c ****  * much less, otherwise obviously wrong pixels will be created.  (Typical
1096:fltk-1.3.4-1/jpeg/jquant2.c ****  * effects include weird fringes at color-area boundaries, isolated bright
1097:fltk-1.3.4-1/jpeg/jquant2.c ****  * pixels in a dark area, etc.)  The standard advice for avoiding this problem
1098:fltk-1.3.4-1/jpeg/jquant2.c ****  * is to ensure that the "corners" of the color cube are allocated as output
1099:fltk-1.3.4-1/jpeg/jquant2.c ****  * colors; then repeated errors in the same direction cannot cause cascading
1100:fltk-1.3.4-1/jpeg/jquant2.c ****  * error buildup.  However, that only prevents the error from getting
1101:fltk-1.3.4-1/jpeg/jquant2.c ****  * completely out of hand; Aaron Giles reports that error limiting improves
1102:fltk-1.3.4-1/jpeg/jquant2.c ****  * the results even with corner colors allocated.
1103:fltk-1.3.4-1/jpeg/jquant2.c ****  * A simple clamping of the error values to about +- MAXJSAMPLE/8 works pretty
1104:fltk-1.3.4-1/jpeg/jquant2.c ****  * well, but the smoother transfer function used below is even better.  Thanks
1105:fltk-1.3.4-1/jpeg/jquant2.c ****  * to Aaron Giles for this idea.
1106:fltk-1.3.4-1/jpeg/jquant2.c ****  */
1107:fltk-1.3.4-1/jpeg/jquant2.c **** 
1108:fltk-1.3.4-1/jpeg/jquant2.c **** LOCAL(void)
1109:fltk-1.3.4-1/jpeg/jquant2.c **** init_error_limit (j_decompress_ptr cinfo)
1110:fltk-1.3.4-1/jpeg/jquant2.c **** /* Allocate and fill in the error_limiter table */
1111:fltk-1.3.4-1/jpeg/jquant2.c **** {
 116              		.loc 1 1111 0
 117              		.cfi_startproc
 118              	.LVL12:
 119 0000 53       		pushq	%rbx
 120              		.cfi_def_cfa_offset 16
 121              		.cfi_offset 3, -16
1112:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
1113:fltk-1.3.4-1/jpeg/jquant2.c ****   int * table;
1114:fltk-1.3.4-1/jpeg/jquant2.c ****   int in, out;
1115:fltk-1.3.4-1/jpeg/jquant2.c **** 
1116:fltk-1.3.4-1/jpeg/jquant2.c ****   table = (int *) (*cinfo->mem->alloc_small)
 122              		.loc 1 1116 0
 123 0001 488B4708 		movq	8(%rdi), %rax
 124 0005 BAFC0700 		movl	$2044, %edx
 124      00
1112:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 125              		.loc 1 1112 0
 126 000a 488B9F90 		movq	656(%rdi), %rbx
 126      020000
 127              	.LVL13:
 128              		.loc 1 1116 0
 129 0011 BE010000 		movl	$1, %esi
 129      00
 130 0016 FF10     		call	*(%rax)
 131              	.LVL14:
1117:fltk-1.3.4-1/jpeg/jquant2.c ****     ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
1118:fltk-1.3.4-1/jpeg/jquant2.c ****   table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
 132              		.loc 1 1118 0
 133 0018 488D88FC 		leaq	1020(%rax), %rcx
 133      030000
 134              	.LVL15:
1119:fltk-1.3.4-1/jpeg/jquant2.c ****   cquantize->error_limiter = table;
 135              		.loc 1 1119 0
 136 001f 31F6     		xorl	%esi, %esi
 137 0021 31D2     		xorl	%edx, %edx
 138 0023 48894B50 		movq	%rcx, 80(%rbx)
 139              	.LVL16:
 140 0027 660F1F84 		.p2align 4,,10
 140      00000000 
 140      00
 141              		.p2align 3
 142              	.L21:
1120:fltk-1.3.4-1/jpeg/jquant2.c **** 
1121:fltk-1.3.4-1/jpeg/jquant2.c **** #define STEPSIZE ((MAXJSAMPLE+1)/16)
1122:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
1123:fltk-1.3.4-1/jpeg/jquant2.c ****   out = 0;
1124:fltk-1.3.4-1/jpeg/jquant2.c ****   for (in = 0; in < STEPSIZE; in++, out++) {
1125:fltk-1.3.4-1/jpeg/jquant2.c ****     table[in] = out; table[-in] = -out;
 143              		.loc 1 1125 0 discriminator 3
 144 0030 899490FC 		movl	%edx, 1020(%rax,%rdx,4)
 144      030000
 145 0037 4883C201 		addq	$1, %rdx
 146              	.LVL17:
 147 003b 8931     		movl	%esi, (%rcx)
 148              	.LVL18:
 149 003d 83EE01   		subl	$1, %esi
 150 0040 4883E904 		subq	$4, %rcx
1124:fltk-1.3.4-1/jpeg/jquant2.c ****     table[in] = out; table[-in] = -out;
 151              		.loc 1 1124 0 discriminator 3
 152 0044 4883FA10 		cmpq	$16, %rdx
 153 0048 75E6     		jne	.L21
 154 004a 4C8D803C 		leaq	1084(%rax), %r8
 154      040000
 155 0051 488DB8BC 		leaq	956(%rax), %rdi
 155      030000
1124:fltk-1.3.4-1/jpeg/jquant2.c ****     table[in] = out; table[-in] = -out;
 156              		.loc 1 1124 0 is_stmt 0
 157 0058 B9100000 		movl	$16, %ecx
 157      00
 158 005d 0F1F00   		.p2align 4,,10
 159              		.p2align 3
 160              	.L22:
 161              	.LVL19:
1126:fltk-1.3.4-1/jpeg/jquant2.c ****   }
1127:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
1128:fltk-1.3.4-1/jpeg/jquant2.c ****   for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
1129:fltk-1.3.4-1/jpeg/jquant2.c ****     table[in] = out; table[-in] = -out;
 162              		.loc 1 1129 0 is_stmt 1 discriminator 2
 163 0060 89D6     		movl	%edx, %esi
1128:fltk-1.3.4-1/jpeg/jquant2.c ****     table[in] = out; table[-in] = -out;
 164              		.loc 1 1128 0 discriminator 2
 165 0062 83C101   		addl	$1, %ecx
 166              	.LVL20:
 167              		.loc 1 1129 0 discriminator 2
 168 0065 418910   		movl	%edx, (%r8)
 169 0068 F7DE     		negl	%esi
 170 006a 4983C004 		addq	$4, %r8
 171 006e 4883EF04 		subq	$4, %rdi
 172 0072 897704   		movl	%esi, 4(%rdi)
 173 0075 89CE     		movl	%ecx, %esi
 174 0077 83E601   		andl	$1, %esi
 175 007a 83F601   		xorl	$1, %esi
1128:fltk-1.3.4-1/jpeg/jquant2.c ****     table[in] = out; table[-in] = -out;
 176              		.loc 1 1128 0 discriminator 2
 177 007d 01F2     		addl	%esi, %edx
 178              	.LVL21:
 179 007f 83F930   		cmpl	$48, %ecx
 180 0082 75DC     		jne	.L22
 181 0084 89D7     		movl	%edx, %edi
 182 0086 488D88BC 		leaq	1212(%rax), %rcx
 182      040000
 183              	.LVL22:
 184 008d 488DB03C 		leaq	828(%rax), %rsi
 184      030000
 185 0094 F7DF     		negl	%edi
 186 0096 4805FC07 		addq	$2044, %rax
 186      0000
 187              	.LVL23:
 188 009c 0F1F4000 		.p2align 4,,10
 189              		.p2align 3
 190              	.L23:
1130:fltk-1.3.4-1/jpeg/jquant2.c ****   }
1131:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
1132:fltk-1.3.4-1/jpeg/jquant2.c ****   for (; in <= MAXJSAMPLE; in++) {
1133:fltk-1.3.4-1/jpeg/jquant2.c ****     table[in] = out; table[-in] = -out;
 191              		.loc 1 1133 0 discriminator 2
 192 00a0 8911     		movl	%edx, (%rcx)
 193 00a2 4883C104 		addq	$4, %rcx
 194 00a6 893E     		movl	%edi, (%rsi)
 195 00a8 4883EE04 		subq	$4, %rsi
1132:fltk-1.3.4-1/jpeg/jquant2.c ****     table[in] = out; table[-in] = -out;
 196              		.loc 1 1132 0 discriminator 2
 197 00ac 4839C8   		cmpq	%rcx, %rax
 198 00af 75EF     		jne	.L23
1134:fltk-1.3.4-1/jpeg/jquant2.c ****   }
1135:fltk-1.3.4-1/jpeg/jquant2.c **** #undef STEPSIZE
1136:fltk-1.3.4-1/jpeg/jquant2.c **** }
 199              		.loc 1 1136 0
 200 00b1 5B       		popq	%rbx
 201              		.cfi_def_cfa_offset 8
 202              	.LVL24:
 203 00b2 C3       		ret
 204              		.cfi_endproc
 205              	.LFE73:
 207              		.section	.text.unlikely.init_error_limit
 208              	.LCOLDE1:
 209              		.section	.text.init_error_limit
 210              	.LHOTE1:
 211              		.section	.text.unlikely.finish_pass2,"ax",@progbits
 212              	.LCOLDB2:
 213              		.section	.text.finish_pass2,"ax",@progbits
 214              	.LHOTB2:
 215              		.p2align 4,,15
 217              	finish_pass2:
 218              	.LFB75:
1137:fltk-1.3.4-1/jpeg/jquant2.c **** 
1138:fltk-1.3.4-1/jpeg/jquant2.c **** 
1139:fltk-1.3.4-1/jpeg/jquant2.c **** /*
1140:fltk-1.3.4-1/jpeg/jquant2.c ****  * Finish up at the end of each pass.
1141:fltk-1.3.4-1/jpeg/jquant2.c ****  */
1142:fltk-1.3.4-1/jpeg/jquant2.c **** 
1143:fltk-1.3.4-1/jpeg/jquant2.c **** METHODDEF(void)
1144:fltk-1.3.4-1/jpeg/jquant2.c **** finish_pass1 (j_decompress_ptr cinfo)
1145:fltk-1.3.4-1/jpeg/jquant2.c **** {
1146:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
1147:fltk-1.3.4-1/jpeg/jquant2.c **** 
1148:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Select the representative colors and fill in cinfo->colormap */
1149:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->colormap = cquantize->sv_colormap;
1150:fltk-1.3.4-1/jpeg/jquant2.c ****   select_colors(cinfo, cquantize->desired);
1151:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Force next pass to zero the color index table */
1152:fltk-1.3.4-1/jpeg/jquant2.c ****   cquantize->needs_zeroed = TRUE;
1153:fltk-1.3.4-1/jpeg/jquant2.c **** }
1154:fltk-1.3.4-1/jpeg/jquant2.c **** 
1155:fltk-1.3.4-1/jpeg/jquant2.c **** 
1156:fltk-1.3.4-1/jpeg/jquant2.c **** METHODDEF(void)
1157:fltk-1.3.4-1/jpeg/jquant2.c **** finish_pass2 (j_decompress_ptr cinfo)
1158:fltk-1.3.4-1/jpeg/jquant2.c **** {
 219              		.loc 1 1158 0
 220              		.cfi_startproc
 221              	.LVL25:
 222 0000 F3C3     		rep ret
 223              		.cfi_endproc
 224              	.LFE75:
 226              		.section	.text.unlikely.finish_pass2
 227              	.LCOLDE2:
 228              		.section	.text.finish_pass2
 229              	.LHOTE2:
 230              		.section	.text.unlikely.new_color_map_2_quant,"ax",@progbits
 231              	.LCOLDB3:
 232              		.section	.text.new_color_map_2_quant,"ax",@progbits
 233              	.LHOTB3:
 234              		.p2align 4,,15
 236              	new_color_map_2_quant:
 237              	.LFB77:
1159:fltk-1.3.4-1/jpeg/jquant2.c ****   /* no work */
1160:fltk-1.3.4-1/jpeg/jquant2.c **** }
1161:fltk-1.3.4-1/jpeg/jquant2.c **** 
1162:fltk-1.3.4-1/jpeg/jquant2.c **** 
1163:fltk-1.3.4-1/jpeg/jquant2.c **** /*
1164:fltk-1.3.4-1/jpeg/jquant2.c ****  * Initialize for each processing pass.
1165:fltk-1.3.4-1/jpeg/jquant2.c ****  */
1166:fltk-1.3.4-1/jpeg/jquant2.c **** 
1167:fltk-1.3.4-1/jpeg/jquant2.c **** METHODDEF(void)
1168:fltk-1.3.4-1/jpeg/jquant2.c **** start_pass_2_quant (j_decompress_ptr cinfo, boolean is_pre_scan)
1169:fltk-1.3.4-1/jpeg/jquant2.c **** {
1170:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
1171:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram = cquantize->histogram;
1172:fltk-1.3.4-1/jpeg/jquant2.c ****   int i;
1173:fltk-1.3.4-1/jpeg/jquant2.c **** 
1174:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Only F-S dithering or no dithering is supported. */
1175:fltk-1.3.4-1/jpeg/jquant2.c ****   /* If user asks for ordered dither, give him F-S. */
1176:fltk-1.3.4-1/jpeg/jquant2.c ****   if (cinfo->dither_mode != JDITHER_NONE)
1177:fltk-1.3.4-1/jpeg/jquant2.c ****     cinfo->dither_mode = JDITHER_FS;
1178:fltk-1.3.4-1/jpeg/jquant2.c **** 
1179:fltk-1.3.4-1/jpeg/jquant2.c ****   if (is_pre_scan) {
1180:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Set up method pointers */
1181:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->pub.color_quantize = prescan_quantize;
1182:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->pub.finish_pass = finish_pass1;
1183:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->needs_zeroed = TRUE; /* Always zero histogram */
1184:fltk-1.3.4-1/jpeg/jquant2.c ****   } else {
1185:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Set up method pointers */
1186:fltk-1.3.4-1/jpeg/jquant2.c ****     if (cinfo->dither_mode == JDITHER_FS)
1187:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->pub.color_quantize = pass2_fs_dither;
1188:fltk-1.3.4-1/jpeg/jquant2.c ****     else
1189:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->pub.color_quantize = pass2_no_dither;
1190:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->pub.finish_pass = finish_pass2;
1191:fltk-1.3.4-1/jpeg/jquant2.c **** 
1192:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Make sure color count is acceptable */
1193:fltk-1.3.4-1/jpeg/jquant2.c ****     i = cinfo->actual_number_of_colors;
1194:fltk-1.3.4-1/jpeg/jquant2.c ****     if (i < 1)
1195:fltk-1.3.4-1/jpeg/jquant2.c ****       ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
1196:fltk-1.3.4-1/jpeg/jquant2.c ****     if (i > MAXNUMCOLORS)
1197:fltk-1.3.4-1/jpeg/jquant2.c ****       ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
1198:fltk-1.3.4-1/jpeg/jquant2.c **** 
1199:fltk-1.3.4-1/jpeg/jquant2.c ****     if (cinfo->dither_mode == JDITHER_FS) {
1200:fltk-1.3.4-1/jpeg/jquant2.c ****       size_t arraysize = (size_t) ((cinfo->output_width + 2) *
1201:fltk-1.3.4-1/jpeg/jquant2.c **** 				   (3 * SIZEOF(FSERROR)));
1202:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Allocate Floyd-Steinberg workspace if we didn't already. */
1203:fltk-1.3.4-1/jpeg/jquant2.c ****       if (cquantize->fserrors == NULL)
1204:fltk-1.3.4-1/jpeg/jquant2.c **** 	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
1205:fltk-1.3.4-1/jpeg/jquant2.c **** 	  ((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
1206:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Initialize the propagated errors to zero. */
1207:fltk-1.3.4-1/jpeg/jquant2.c ****       FMEMZERO((void FAR *) cquantize->fserrors, arraysize);
1208:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Make the error-limit table if we didn't already. */
1209:fltk-1.3.4-1/jpeg/jquant2.c ****       if (cquantize->error_limiter == NULL)
1210:fltk-1.3.4-1/jpeg/jquant2.c **** 	init_error_limit(cinfo);
1211:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->on_odd_row = FALSE;
1212:fltk-1.3.4-1/jpeg/jquant2.c ****     }
1213:fltk-1.3.4-1/jpeg/jquant2.c **** 
1214:fltk-1.3.4-1/jpeg/jquant2.c ****   }
1215:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Zero the histogram or inverse color map, if necessary */
1216:fltk-1.3.4-1/jpeg/jquant2.c ****   if (cquantize->needs_zeroed) {
1217:fltk-1.3.4-1/jpeg/jquant2.c ****     for (i = 0; i < HIST_C0_ELEMS; i++) {
1218:fltk-1.3.4-1/jpeg/jquant2.c ****       FMEMZERO((void FAR *) histogram[i],
1219:fltk-1.3.4-1/jpeg/jquant2.c **** 	       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
1220:fltk-1.3.4-1/jpeg/jquant2.c ****     }
1221:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->needs_zeroed = FALSE;
1222:fltk-1.3.4-1/jpeg/jquant2.c ****   }
1223:fltk-1.3.4-1/jpeg/jquant2.c **** }
1224:fltk-1.3.4-1/jpeg/jquant2.c **** 
1225:fltk-1.3.4-1/jpeg/jquant2.c **** 
1226:fltk-1.3.4-1/jpeg/jquant2.c **** /*
1227:fltk-1.3.4-1/jpeg/jquant2.c ****  * Switch to a new external colormap between output passes.
1228:fltk-1.3.4-1/jpeg/jquant2.c ****  */
1229:fltk-1.3.4-1/jpeg/jquant2.c **** 
1230:fltk-1.3.4-1/jpeg/jquant2.c **** METHODDEF(void)
1231:fltk-1.3.4-1/jpeg/jquant2.c **** new_color_map_2_quant (j_decompress_ptr cinfo)
1232:fltk-1.3.4-1/jpeg/jquant2.c **** {
 238              		.loc 1 1232 0
 239              		.cfi_startproc
 240              	.LVL26:
1233:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 241              		.loc 1 1233 0
 242 0000 488B8790 		movq	656(%rdi), %rax
 242      020000
 243              	.LVL27:
1234:fltk-1.3.4-1/jpeg/jquant2.c **** 
1235:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Reset the inverse color map */
1236:fltk-1.3.4-1/jpeg/jquant2.c ****   cquantize->needs_zeroed = TRUE;
 244              		.loc 1 1236 0
 245 0007 C7403801 		movl	$1, 56(%rax)
 245      000000
 246 000e C3       		ret
 247              		.cfi_endproc
 248              	.LFE77:
 250              		.section	.text.unlikely.new_color_map_2_quant
 251              	.LCOLDE3:
 252              		.section	.text.new_color_map_2_quant
 253              	.LHOTE3:
 254              		.section	.text.unlikely.start_pass_2_quant,"ax",@progbits
 255              	.LCOLDB4:
 256              		.section	.text.start_pass_2_quant,"ax",@progbits
 257              	.LHOTB4:
 258              		.p2align 4,,15
 260              	start_pass_2_quant:
 261              	.LFB76:
1169:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 262              		.loc 1 1169 0
 263              		.cfi_startproc
 264              	.LVL28:
 265 0000 4155     		pushq	%r13
 266              		.cfi_def_cfa_offset 16
 267              		.cfi_offset 13, -16
 268 0002 4154     		pushq	%r12
 269              		.cfi_def_cfa_offset 24
 270              		.cfi_offset 12, -24
 271 0004 55       		pushq	%rbp
 272              		.cfi_def_cfa_offset 32
 273              		.cfi_offset 6, -32
 274 0005 53       		pushq	%rbx
 275              		.cfi_def_cfa_offset 40
 276              		.cfi_offset 3, -40
 277 0006 4883EC08 		subq	$8, %rsp
 278              		.cfi_def_cfa_offset 48
1176:fltk-1.3.4-1/jpeg/jquant2.c ****     cinfo->dither_mode = JDITHER_FS;
 279              		.loc 1 1176 0
 280 000a 8B5770   		movl	112(%rdi), %edx
1170:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram = cquantize->histogram;
 281              		.loc 1 1170 0
 282 000d 488BAF90 		movq	656(%rdi), %rbp
 282      020000
 283              	.LVL29:
1176:fltk-1.3.4-1/jpeg/jquant2.c ****     cinfo->dither_mode = JDITHER_FS;
 284              		.loc 1 1176 0
 285 0014 85D2     		testl	%edx, %edx
1171:fltk-1.3.4-1/jpeg/jquant2.c ****   int i;
 286              		.loc 1 1171 0
 287 0016 488B5D30 		movq	48(%rbp), %rbx
 288              	.LVL30:
1176:fltk-1.3.4-1/jpeg/jquant2.c ****     cinfo->dither_mode = JDITHER_FS;
 289              		.loc 1 1176 0
 290 001a 0F848000 		je	.L31
 290      0000
1179:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Set up method pointers */
 291              		.loc 1 1179 0
 292 0020 85F6     		testl	%esi, %esi
1177:fltk-1.3.4-1/jpeg/jquant2.c **** 
 293              		.loc 1 1177 0
 294 0022 C7477002 		movl	$2, 112(%rdi)
 294      000000
1179:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Set up method pointers */
 295              		.loc 1 1179 0
 296 0029 0F84D000 		je	.L32
 296      0000
 297              	.L42:
1181:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->pub.finish_pass = finish_pass1;
 298              		.loc 1 1181 0
 299 002f 48C74508 		movq	$prescan_quantize, 8(%rbp)
 299      00000000 
1182:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->needs_zeroed = TRUE; /* Always zero histogram */
 300              		.loc 1 1182 0
 301 0037 48C74510 		movq	$finish_pass1, 16(%rbp)
 301      00000000 
1183:fltk-1.3.4-1/jpeg/jquant2.c ****   } else {
 302              		.loc 1 1183 0
 303 003f C7453801 		movl	$1, 56(%rbp)
 303      000000
 304              	.LVL31:
 305              	.L33:
 306 0046 488DB300 		leaq	256(%rbx), %rsi
 306      010000
 307 004d 4889DA   		movq	%rbx, %rdx
 308              	.LBB15:
 309              	.LBB16:
 310              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string3.h"
   1:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* Copyright (C) 2004-2016 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string3.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string3.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string3.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string3.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string3.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string3.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string3.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string3.h ****    <http://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef _STRING_H
  19:/usr/include/x86_64-linux-gnu/bits/string3.h **** # error "Never use <bits/string3.h> directly; include <string.h> instead."
  20:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  21:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  22:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  23:/usr/include/x86_64-linux-gnu/bits/string3.h **** __warndecl (__warn_memset_zero_len,
  24:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  25:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  26:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  27:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef __cplusplus
  28:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* XXX This is temporarily.  We should not redefine any of the symbols
  29:/usr/include/x86_64-linux-gnu/bits/string3.h ****    and instead integrate the error checking into the original
  30:/usr/include/x86_64-linux-gnu/bits/string3.h ****    definitions.  */
  31:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memcpy
  32:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memmove
  33:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memset
  34:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcat
  35:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcpy
  36:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncat
  37:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncpy
  38:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_GNU
  39:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef mempcpy
  40:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef stpcpy
  41:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  42:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_MISC
  43:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bcopy
  44:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bzero
  45:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  46:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  47:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  48:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  49:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  50:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  51:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	       size_t __len))
  52:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  53:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  54:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  55:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  56:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  57:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memmove (void *__dest, const void *__src, size_t __len))
  58:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  59:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  60:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  61:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  62:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifdef __USE_GNU
  63:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  64:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
  65:/usr/include/x86_64-linux-gnu/bits/string3.h **** 		size_t __len))
  66:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  67:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
  68:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  69:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  70:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  71:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  72:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* The first two tests here help to catch a somewhat common problem
  73:/usr/include/x86_64-linux-gnu/bits/string3.h ****    where the second and third parameter are transposed.  This is
  74:/usr/include/x86_64-linux-gnu/bits/string3.h ****    especially problematic if the intended fill value is zero.  In this
  75:/usr/include/x86_64-linux-gnu/bits/string3.h ****    case no work is done at all.  We detect these problems by referring
  76:/usr/include/x86_64-linux-gnu/bits/string3.h ****    non-existing functions.  */
  77:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  78:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memset (void *__dest, int __ch, size_t __len))
  79:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  80:/usr/include/x86_64-linux-gnu/bits/string3.h ****   /* GCC-5.0 and newer implements these checks in the compiler, so we don't
  81:/usr/include/x86_64-linux-gnu/bits/string3.h ****      need them here.  */
  82:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  83:/usr/include/x86_64-linux-gnu/bits/string3.h ****   if (__builtin_constant_p (__len) && __len == 0
  84:/usr/include/x86_64-linux-gnu/bits/string3.h ****       && (!__builtin_constant_p (__ch) || __ch != 0))
  85:/usr/include/x86_64-linux-gnu/bits/string3.h ****     {
  86:/usr/include/x86_64-linux-gnu/bits/string3.h ****       __warn_memset_zero_len ();
  87:/usr/include/x86_64-linux-gnu/bits/string3.h ****       return __dest;
  88:/usr/include/x86_64-linux-gnu/bits/string3.h ****     }
  89:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  90:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 311              		.loc 2 90 0 discriminator 3
 312 0050 31C0     		xorl	%eax, %eax
 313              		.p2align 4,,10
 314 0052 660F1F44 		.p2align 3
 314      0000
 315              	.L40:
 316              	.LVL32:
 317 0058 488B0A   		movq	(%rdx), %rcx
 318 005b 4883C208 		addq	$8, %rdx
 319              	.LVL33:
 320 005f 488D7908 		leaq	8(%rcx), %rdi
 321 0063 48C70100 		movq	$0, (%rcx)
 321      000000
 322 006a 48C781F8 		movq	$0, 4088(%rcx)
 322      0F000000 
 322      000000
 323 0075 4883E7F8 		andq	$-8, %rdi
 324 0079 4829F9   		subq	%rdi, %rcx
 325              	.LVL34:
 326 007c 81C10010 		addl	$4096, %ecx
 326      0000
 327 0082 C1E903   		shrl	$3, %ecx
 328              	.LBE16:
 329              	.LBE15:
1217:fltk-1.3.4-1/jpeg/jquant2.c ****       FMEMZERO((void FAR *) histogram[i],
 330              		.loc 1 1217 0 discriminator 3
 331 0085 4839F2   		cmpq	%rsi, %rdx
 332              	.LBB18:
 333              	.LBB17:
 334              		.loc 2 90 0 discriminator 3
 335 0088 F348AB   		rep stosq
 336              	.LVL35:
 337              	.LBE17:
 338              	.LBE18:
1217:fltk-1.3.4-1/jpeg/jquant2.c ****       FMEMZERO((void FAR *) histogram[i],
 339              		.loc 1 1217 0 discriminator 3
 340 008b 75CB     		jne	.L40
1221:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 341              		.loc 1 1221 0
 342 008d C7453800 		movl	$0, 56(%rbp)
 342      000000
1223:fltk-1.3.4-1/jpeg/jquant2.c **** 
 343              		.loc 1 1223 0
 344 0094 4883C408 		addq	$8, %rsp
 345              		.cfi_remember_state
 346              		.cfi_def_cfa_offset 40
 347 0098 5B       		popq	%rbx
 348              		.cfi_def_cfa_offset 32
 349              	.LVL36:
 350 0099 5D       		popq	%rbp
 351              		.cfi_def_cfa_offset 24
 352              	.LVL37:
 353 009a 415C     		popq	%r12
 354              		.cfi_def_cfa_offset 16
 355 009c 415D     		popq	%r13
 356              		.cfi_def_cfa_offset 8
 357 009e C3       		ret
 358              	.LVL38:
 359 009f 90       		.p2align 4,,10
 360              		.p2align 3
 361              	.L31:
 362              		.cfi_restore_state
1179:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Set up method pointers */
 363              		.loc 1 1179 0
 364 00a0 85F6     		testl	%esi, %esi
 365 00a2 758B     		jne	.L42
1189:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->pub.finish_pass = finish_pass2;
 366              		.loc 1 1189 0
 367 00a4 48C74508 		movq	$pass2_no_dither, 8(%rbp)
 367      00000000 
 368              	.L41:
1190:fltk-1.3.4-1/jpeg/jquant2.c **** 
 369              		.loc 1 1190 0
 370 00ac 48C74510 		movq	$finish_pass2, 16(%rbp)
 370      00000000 
1193:fltk-1.3.4-1/jpeg/jquant2.c ****     if (i < 1)
 371              		.loc 1 1193 0
 372 00b4 8B879C00 		movl	156(%rdi), %eax
 372      0000
 373              	.LVL39:
 374 00ba 4989FC   		movq	%rdi, %r12
1194:fltk-1.3.4-1/jpeg/jquant2.c ****       ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
 375              		.loc 1 1194 0
 376 00bd 85C0     		testl	%eax, %eax
 377 00bf 7E7D     		jle	.L48
1196:fltk-1.3.4-1/jpeg/jquant2.c ****       ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 378              		.loc 1 1196 0
 379 00c1 3D000100 		cmpl	$256, %eax
 379      00
 380 00c6 7E19     		jle	.L35
1197:fltk-1.3.4-1/jpeg/jquant2.c **** 
 381              		.loc 1 1197 0
 382 00c8 488B07   		movq	(%rdi), %rax
 383              	.LVL40:
 384 00cb C740283B 		movl	$59, 40(%rax)
 384      000000
 385              	.LVL41:
 386 00d2 488B07   		movq	(%rdi), %rax
 387 00d5 C7402C00 		movl	$256, 44(%rax)
 387      010000
 388 00dc 488B07   		movq	(%rdi), %rax
 389 00df FF10     		call	*(%rax)
 390              	.LVL42:
 391              	.L35:
1199:fltk-1.3.4-1/jpeg/jquant2.c ****       size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 392              		.loc 1 1199 0
 393 00e1 41837C24 		cmpl	$2, 112(%r12)
 393      7002
 394 00e7 7420     		je	.L49
 395              	.L36:
1216:fltk-1.3.4-1/jpeg/jquant2.c ****     for (i = 0; i < HIST_C0_ELEMS; i++) {
 396              		.loc 1 1216 0
 397 00e9 8B4538   		movl	56(%rbp), %eax
 398 00ec 85C0     		testl	%eax, %eax
 399 00ee 0F8552FF 		jne	.L33
 399      FFFF
1223:fltk-1.3.4-1/jpeg/jquant2.c **** 
 400              		.loc 1 1223 0
 401 00f4 4883C408 		addq	$8, %rsp
 402              		.cfi_remember_state
 403              		.cfi_def_cfa_offset 40
 404 00f8 5B       		popq	%rbx
 405              		.cfi_def_cfa_offset 32
 406              	.LVL43:
 407 00f9 5D       		popq	%rbp
 408              		.cfi_def_cfa_offset 24
 409              	.LVL44:
 410 00fa 415C     		popq	%r12
 411              		.cfi_def_cfa_offset 16
 412              	.LVL45:
 413 00fc 415D     		popq	%r13
 414              		.cfi_def_cfa_offset 8
 415 00fe C3       		ret
 416              	.LVL46:
 417              	.L32:
 418              		.cfi_restore_state
1187:fltk-1.3.4-1/jpeg/jquant2.c ****     else
 419              		.loc 1 1187 0
 420 00ff 48C74508 		movq	$pass2_fs_dither, 8(%rbp)
 420      00000000 
 421 0107 EBA3     		jmp	.L41
 422              	.LVL47:
 423              	.L49:
 424              	.LBB19:
1200:fltk-1.3.4-1/jpeg/jquant2.c **** 				   (3 * SIZEOF(FSERROR)));
 425              		.loc 1 1200 0
 426 0109 418B8424 		movl	136(%r12), %eax
 426      88000000 
1203:fltk-1.3.4-1/jpeg/jquant2.c **** 	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 427              		.loc 1 1203 0
 428 0111 488B7D40 		movq	64(%rbp), %rdi
1200:fltk-1.3.4-1/jpeg/jquant2.c **** 				   (3 * SIZEOF(FSERROR)));
 429              		.loc 1 1200 0
 430 0115 83C002   		addl	$2, %eax
 431 0118 4C8D2C40 		leaq	(%rax,%rax,2), %r13
 432 011c 4D01ED   		addq	%r13, %r13
 433              	.LVL48:
1203:fltk-1.3.4-1/jpeg/jquant2.c **** 	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 434              		.loc 1 1203 0
 435 011f 4885FF   		testq	%rdi, %rdi
 436 0122 7435     		je	.L50
 437              	.L37:
 438              	.LVL49:
 439              	.LBB20:
 440              	.LBB21:
 441              		.loc 2 90 0
 442 0124 31F6     		xorl	%esi, %esi
 443 0126 4C89EA   		movq	%r13, %rdx
 444 0129 E8000000 		call	memset
 444      00
 445              	.LVL50:
 446              	.LBE21:
 447              	.LBE20:
1209:fltk-1.3.4-1/jpeg/jquant2.c **** 	init_error_limit(cinfo);
 448              		.loc 1 1209 0
 449 012e 48837D50 		cmpq	$0, 80(%rbp)
 449      00
 450 0133 7440     		je	.L51
 451              	.L38:
1211:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 452              		.loc 1 1211 0
 453 0135 C7454800 		movl	$0, 72(%rbp)
 453      000000
 454 013c EBAB     		jmp	.L36
 455              	.LVL51:
 456              	.L48:
 457              	.LBE19:
1195:fltk-1.3.4-1/jpeg/jquant2.c ****     if (i > MAXNUMCOLORS)
 458              		.loc 1 1195 0
 459 013e 488B07   		movq	(%rdi), %rax
 460              	.LVL52:
 461 0141 C740283A 		movl	$58, 40(%rax)
 461      000000
 462              	.LVL53:
 463 0148 488B07   		movq	(%rdi), %rax
 464 014b C7402C01 		movl	$1, 44(%rax)
 464      000000
 465 0152 488B07   		movq	(%rdi), %rax
 466 0155 FF10     		call	*(%rax)
 467              	.LVL54:
 468 0157 EB88     		jmp	.L35
 469              	.LVL55:
 470              	.L50:
 471              	.LBB22:
1204:fltk-1.3.4-1/jpeg/jquant2.c **** 	  ((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 472              		.loc 1 1204 0
 473 0159 498B4424 		movq	8(%r12), %rax
 473      08
 474 015e 4C89E7   		movq	%r12, %rdi
 475 0161 4C89EA   		movq	%r13, %rdx
 476 0164 BE010000 		movl	$1, %esi
 476      00
 477 0169 FF5008   		call	*8(%rax)
 478              	.LVL56:
 479 016c 48894540 		movq	%rax, 64(%rbp)
 480 0170 4889C7   		movq	%rax, %rdi
 481 0173 EBAF     		jmp	.L37
 482              	.L51:
1210:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->on_odd_row = FALSE;
 483              		.loc 1 1210 0
 484 0175 4C89E7   		movq	%r12, %rdi
 485 0178 E8000000 		call	init_error_limit
 485      00
 486              	.LVL57:
 487 017d EBB6     		jmp	.L38
 488              	.LBE22:
 489              		.cfi_endproc
 490              	.LFE76:
 492              		.section	.text.unlikely.start_pass_2_quant
 493              	.LCOLDE4:
 494              		.section	.text.start_pass_2_quant
 495              	.LHOTE4:
 496              		.section	.text.unlikely.update_box.isra.0,"ax",@progbits
 497              	.LCOLDB5:
 498              		.section	.text.update_box.isra.0,"ax",@progbits
 499              	.LHOTB5:
 500              		.p2align 4,,15
 502              	update_box.isra.0:
 503              	.LFB79:
 314:fltk-1.3.4-1/jpeg/jquant2.c **** /* Shrink the min/max bounds of a box to enclose only nonzero elements, */
 504              		.loc 1 314 0
 505              		.cfi_startproc
 506              	.LVL58:
 326:fltk-1.3.4-1/jpeg/jquant2.c ****   c1min = boxp->c1min;  c1max = boxp->c1max;
 507              		.loc 1 326 0
 508 0000 4C6316   		movslq	(%rsi), %r10
 509 0003 448B5E04 		movl	4(%rsi), %r11d
 314:fltk-1.3.4-1/jpeg/jquant2.c **** /* Shrink the min/max bounds of a box to enclose only nonzero elements, */
 510              		.loc 1 314 0
 511 0007 4157     		pushq	%r15
 512              		.cfi_def_cfa_offset 16
 513              		.cfi_offset 15, -16
 327:fltk-1.3.4-1/jpeg/jquant2.c ****   c2min = boxp->c2min;  c2max = boxp->c2max;
 514              		.loc 1 327 0
 515 0009 8B4E0C   		movl	12(%rsi), %ecx
 314:fltk-1.3.4-1/jpeg/jquant2.c **** /* Shrink the min/max bounds of a box to enclose only nonzero elements, */
 516              		.loc 1 314 0
 517 000c 4156     		pushq	%r14
 518              		.cfi_def_cfa_offset 24
 519              		.cfi_offset 14, -24
 328:fltk-1.3.4-1/jpeg/jquant2.c ****   
 520              		.loc 1 328 0
 521 000e 8B5610   		movl	16(%rsi), %edx
 314:fltk-1.3.4-1/jpeg/jquant2.c **** /* Shrink the min/max bounds of a box to enclose only nonzero elements, */
 522              		.loc 1 314 0
 523 0011 4155     		pushq	%r13
 524              		.cfi_def_cfa_offset 32
 525              		.cfi_offset 13, -32
 328:fltk-1.3.4-1/jpeg/jquant2.c ****   
 526              		.loc 1 328 0
 527 0013 8B4614   		movl	20(%rsi), %eax
 330:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c0 = c0min; c0 <= c0max; c0++)
 528              		.loc 1 330 0
 529 0016 4539DA   		cmpl	%r11d, %r10d
 314:fltk-1.3.4-1/jpeg/jquant2.c **** /* Shrink the min/max bounds of a box to enclose only nonzero elements, */
 530              		.loc 1 314 0
 531 0019 4154     		pushq	%r12
 532              		.cfi_def_cfa_offset 40
 533              		.cfi_offset 12, -40
 534 001b 55       		pushq	%rbp
 535              		.cfi_def_cfa_offset 48
 536              		.cfi_offset 6, -48
 537 001c 53       		pushq	%rbx
 538              		.cfi_def_cfa_offset 56
 539              		.cfi_offset 3, -56
 319:fltk-1.3.4-1/jpeg/jquant2.c ****   histptr histp;
 540              		.loc 1 319 0
 541 001d 488B6F30 		movq	48(%rdi), %rbp
 542              	.LVL59:
 327:fltk-1.3.4-1/jpeg/jquant2.c ****   c2min = boxp->c2min;  c2max = boxp->c2max;
 543              		.loc 1 327 0
 544 0021 8B7E08   		movl	8(%rsi), %edi
 545              	.LVL60:
 330:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c0 = c0min; c0 <= c0max; c0++)
 546              		.loc 1 330 0
 547 0024 0F8DE300 		jge	.L54
 547      0000
 548 002a 4D63C2   		movslq	%r10d, %r8
 549 002d 4C63CA   		movslq	%edx, %r9
 550 0030 4489D3   		movl	%r10d, %ebx
 551 0033 4E8D74C5 		leaq	0(%rbp,%r8,8), %r14
 551      00
 552 0038 4C63C7   		movslq	%edi, %r8
 553 003b 49C1E005 		salq	$5, %r8
 554 003f 4F8D6C08 		leaq	1(%r8,%r9), %r13
 554      01
 555 0044 4D01ED   		addq	%r13, %r13
 556              	.L62:
 557              	.LVL61:
 332:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 558              		.loc 1 332 0
 559 0047 39CF     		cmpl	%ecx, %edi
 560 0049 7F40     		jg	.L63
 561 004b 4D89EC   		movq	%r13, %r12
 562 004e 4D0326   		addq	(%r14), %r12
 563 0051 4189FF   		movl	%edi, %r15d
 564              	.LVL62:
 565              	.L61:
 334:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 566              		.loc 1 334 0
 567 0054 39C2     		cmpl	%eax, %edx
 568 0056 7F26     		jg	.L55
 335:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c0min = c0min = c0;
 569              		.loc 1 335 0
 570 0058 6641837C 		cmpw	$0, -2(%r12)
 570      24FE00
 571 005f 4D89E1   		movq	%r12, %r9
 572              	.LVL63:
 573 0062 753C     		jne	.L56
 574 0064 4189D0   		movl	%edx, %r8d
 575 0067 EB0C     		jmp	.L58
 576              	.LVL64:
 577              	.L60:
 578 0069 4983C102 		addq	$2, %r9
 579              	.LVL65:
 580 006d 66418379 		cmpw	$0, -2(%r9)
 580      FE00
 581 0073 752B     		jne	.L56
 582              	.L58:
 334:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 583              		.loc 1 334 0
 584 0075 4183C001 		addl	$1, %r8d
 585              	.LVL66:
 586 0079 4439C0   		cmpl	%r8d, %eax
 587 007c 7DEB     		jge	.L60
 588              	.LVL67:
 589              	.L55:
 332:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 590              		.loc 1 332 0
 591 007e 4183C701 		addl	$1, %r15d
 592              	.LVL68:
 593 0082 4983C440 		addq	$64, %r12
 594 0086 4439F9   		cmpl	%r15d, %ecx
 595 0089 7DC9     		jge	.L61
 596              	.LVL69:
 597              	.L63:
 331:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c1 = c1min; c1 <= c1max; c1++) {
 598              		.loc 1 331 0
 599 008b 83C301   		addl	$1, %ebx
 600              	.LVL70:
 601 008e 4983C608 		addq	$8, %r14
 602 0092 4139DB   		cmpl	%ebx, %r11d
 603 0095 7DB0     		jge	.L62
 604 0097 4489D3   		movl	%r10d, %ebx
 605              	.LVL71:
 606 009a EB0B     		jmp	.L59
 607              	.LVL72:
 608 009c 0F1F4000 		.p2align 4,,10
 609              		.p2align 3
 610              	.L56:
 341:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c0 = c0max; c0 >= c0min; c0--)
 611              		.loc 1 341 0
 612 00a0 4139DB   		cmpl	%ebx, %r11d
 336:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c0min;
 613              		.loc 1 336 0
 614 00a3 891E     		movl	%ebx, (%rsi)
 615              	.LDL1:
 341:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c0 = c0max; c0 >= c0min; c0--)
 616              		.loc 1 341 0
 617 00a5 7E63     		jle	.L120
 618              	.LVL73:
 619              	.L59:
 620 00a7 4D63C3   		movslq	%r11d, %r8
 346:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c0max = c0max = c0;
 621              		.loc 1 346 0
 622 00aa 4589DC   		movl	%r11d, %r12d
 623 00ad 4E8D74C5 		leaq	0(%rbp,%r8,8), %r14
 623      00
 624              	.LVL74:
 625              	.L64:
 343:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 626              		.loc 1 343 0
 627 00b2 39CF     		cmpl	%ecx, %edi
 628 00b4 7F47     		jg	.L71
 629 00b6 4D89EA   		movq	%r13, %r10
 630 00b9 4D0316   		addq	(%r14), %r10
 631 00bc 4189FF   		movl	%edi, %r15d
 632              	.LVL75:
 633              	.L70:
 345:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 634              		.loc 1 345 0
 635 00bf 39C2     		cmpl	%eax, %edx
 636 00c1 7F2D     		jg	.L65
 346:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c0max = c0max = c0;
 637              		.loc 1 346 0
 638 00c3 6641837A 		cmpw	$0, -2(%r10)
 638      FE00
 639 00c9 4D89D1   		movq	%r10, %r9
 640              	.LVL76:
 641 00cc 0F853F03 		jne	.L66
 641      0000
 642 00d2 4189D0   		movl	%edx, %r8d
 643 00d5 EB10     		jmp	.L68
 644              	.LVL77:
 645              	.L69:
 646 00d7 4983C102 		addq	$2, %r9
 647              	.LVL78:
 648 00db 66418379 		cmpw	$0, -2(%r9)
 648      FE00
 649 00e1 0F852A03 		jne	.L66
 649      0000
 650              	.L68:
 345:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 651              		.loc 1 345 0
 652 00e7 4183C001 		addl	$1, %r8d
 653              	.LVL79:
 654 00eb 4439C0   		cmpl	%r8d, %eax
 655 00ee 7DE7     		jge	.L69
 656              	.LVL80:
 657              	.L65:
 343:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 658              		.loc 1 343 0
 659 00f0 4183C701 		addl	$1, %r15d
 660              	.LVL81:
 661 00f4 4983C240 		addq	$64, %r10
 662 00f8 4439F9   		cmpl	%r15d, %ecx
 663 00fb 7DC2     		jge	.L70
 664              	.LVL82:
 665              	.L71:
 342:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c1 = c1min; c1 <= c1max; c1++) {
 666              		.loc 1 342 0
 667 00fd 4183EC01 		subl	$1, %r12d
 668              	.LVL83:
 669 0101 4983EE08 		subq	$8, %r14
 670 0105 4139DC   		cmpl	%ebx, %r12d
 671 0108 7DA8     		jge	.L64
 672              	.LVL84:
 673              	.L120:
 674 010a 4C63D3   		movslq	%ebx, %r10
 675              	.LVL85:
 676              	.L54:
 352:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++)
 677              		.loc 1 352 0
 678 010d 39CF     		cmpl	%ecx, %edi
 679 010f 0F8D1001 		jge	.L73
 679      0000
 680 0115 4D63C2   		movslq	%r10d, %r8
 681 0118 4C63FA   		movslq	%edx, %r15
 682 011b 4C63E7   		movslq	%edi, %r12
 683 011e 4A8D5CC5 		leaq	0(%rbp,%r8,8), %rbx
 683      00
 355:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c2 = c2min; c2 <= c2max; c2++)
 684              		.loc 1 355 0
 685 0123 4F8D343F 		leaq	(%r15,%r15), %r14
 686 0127 49C1E406 		salq	$6, %r12
 687 012b 48895C24 		movq	%rbx, -16(%rsp)
 687      F0
 688 0130 4C897424 		movq	%r14, -8(%rsp)
 688      F8
 352:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++)
 689              		.loc 1 352 0
 690 0135 89FB     		movl	%edi, %ebx
 691              	.L81:
 692              	.LVL86:
 354:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 693              		.loc 1 354 0
 694 0137 4539D3   		cmpl	%r10d, %r11d
 695 013a 4C8B7424 		movq	-16(%rsp), %r14
 695      F0
 696 013f 4589D5   		movl	%r10d, %r13d
 697 0142 7C45     		jl	.L82
 698              	.LVL87:
 699              	.L128:
 355:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c2 = c2min; c2 <= c2max; c2++)
 700              		.loc 1 355 0
 701 0144 4D89E1   		movq	%r12, %r9
 702 0147 4D030E   		addq	(%r14), %r9
 703 014a 4C8B4424 		movq	-8(%rsp), %r8
 703      F8
 704 014f 4D01C8   		addq	%r9, %r8
 705              	.LVL88:
 356:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 706              		.loc 1 356 0
 707 0152 39C2     		cmpl	%eax, %edx
 708 0154 7F26     		jg	.L74
 357:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c1min = c1min = c1;
 709              		.loc 1 357 0
 710 0156 4983C002 		addq	$2, %r8
 711              	.LVL89:
 712 015a 6643833C 		cmpw	$0, (%r9,%r15,2)
 712      7900
 713 0160 753E     		jne	.L75
 714 0162 4189D1   		movl	%edx, %r9d
 715 0165 EB0C     		jmp	.L77
 716              	.LVL90:
 717              	.L79:
 718 0167 4983C002 		addq	$2, %r8
 719              	.LVL91:
 720 016b 66418378 		cmpw	$0, -2(%r8)
 720      FE00
 721 0171 752D     		jne	.L75
 722              	.L77:
 356:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 723              		.loc 1 356 0
 724 0173 4183C101 		addl	$1, %r9d
 725              	.LVL92:
 726 0177 4439C8   		cmpl	%r9d, %eax
 727 017a 7DEB     		jge	.L79
 728              	.LVL93:
 729              	.L74:
 354:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 730              		.loc 1 354 0
 731 017c 4183C501 		addl	$1, %r13d
 732              	.LVL94:
 733 0180 4983C608 		addq	$8, %r14
 734 0184 4539DD   		cmpl	%r11d, %r13d
 735 0187 7EBB     		jle	.L128
 736              	.LVL95:
 737              	.L82:
 353:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 738              		.loc 1 353 0
 739 0189 83C301   		addl	$1, %ebx
 740              	.LVL96:
 741 018c 4983C440 		addq	$64, %r12
 742 0190 39D9     		cmpl	%ebx, %ecx
 743 0192 7DA3     		jge	.L81
 744 0194 89FB     		movl	%edi, %ebx
 745              	.LVL97:
 746 0196 EB0F     		jmp	.L78
 747              	.LVL98:
 748 0198 0F1F8400 		.p2align 4,,10
 748      00000000 
 749              		.p2align 3
 750              	.L75:
 363:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1max; c1 >= c1min; c1--)
 751              		.loc 1 363 0
 752 01a0 39D9     		cmpl	%ebx, %ecx
 358:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c1min;
 753              		.loc 1 358 0
 754 01a2 895E08   		movl	%ebx, 8(%rsi)
 755              	.LDL2:
 363:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1max; c1 >= c1min; c1--)
 756              		.loc 1 363 0
 757 01a5 7E7C     		jle	.L122
 758              	.LVL99:
 759              	.L78:
 760 01a7 4C63FA   		movslq	%edx, %r15
 761 01aa 4C63E1   		movslq	%ecx, %r12
 368:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c1max = c1max = c1;
 762              		.loc 1 368 0
 763 01ad 4189C9   		movl	%ecx, %r9d
 366:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c2 = c2min; c2 <= c2max; c2++)
 764              		.loc 1 366 0
 765 01b0 4B8D3C3F 		leaq	(%r15,%r15), %rdi
 766 01b4 49C1E406 		salq	$6, %r12
 767 01b8 48897C24 		movq	%rdi, -8(%rsp)
 767      F8
 768              	.LVL100:
 769              	.L83:
 365:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 770              		.loc 1 365 0
 771 01bd 4539D3   		cmpl	%r10d, %r11d
 772 01c0 4C8B7424 		movq	-16(%rsp), %r14
 772      F0
 773 01c5 4589D5   		movl	%r10d, %r13d
 774 01c8 7C4C     		jl	.L90
 775              	.LVL101:
 776              	.L127:
 366:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c2 = c2min; c2 <= c2max; c2++)
 777              		.loc 1 366 0
 778 01ca 4D89E0   		movq	%r12, %r8
 779 01cd 4D0306   		addq	(%r14), %r8
 780 01d0 488B7C24 		movq	-8(%rsp), %rdi
 780      F8
 781 01d5 4C01C7   		addq	%r8, %rdi
 782              	.LVL102:
 367:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 783              		.loc 1 367 0
 784 01d8 39C2     		cmpl	%eax, %edx
 785 01da 7F2D     		jg	.L84
 368:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c1max = c1max = c1;
 786              		.loc 1 368 0
 787 01dc 4883C702 		addq	$2, %rdi
 788              	.LVL103:
 789 01e0 6643833C 		cmpw	$0, (%r8,%r15,2)
 789      7800
 790 01e6 0F853402 		jne	.L85
 790      0000
 791 01ec 4189D0   		movl	%edx, %r8d
 792 01ef EB0F     		jmp	.L87
 793              	.LVL104:
 794              	.L88:
 795 01f1 4883C702 		addq	$2, %rdi
 796              	.LVL105:
 797 01f5 66837FFE 		cmpw	$0, -2(%rdi)
 797      00
 798 01fa 0F852002 		jne	.L85
 798      0000
 799              	.L87:
 367:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 800              		.loc 1 367 0
 801 0200 4183C001 		addl	$1, %r8d
 802              	.LVL106:
 803 0204 4439C0   		cmpl	%r8d, %eax
 804 0207 7DE8     		jge	.L88
 805              	.LVL107:
 806              	.L84:
 365:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 807              		.loc 1 365 0
 808 0209 4183C501 		addl	$1, %r13d
 809              	.LVL108:
 810 020d 4983C608 		addq	$8, %r14
 811 0211 4539EB   		cmpl	%r13d, %r11d
 812 0214 7DB4     		jge	.L127
 813              	.LVL109:
 814              	.L90:
 364:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 815              		.loc 1 364 0
 816 0216 4183E901 		subl	$1, %r9d
 817              	.LVL110:
 818 021a 4983EC40 		subq	$64, %r12
 819 021e 4139D9   		cmpl	%ebx, %r9d
 820 0221 7D9A     		jge	.L83
 821              	.LVL111:
 822              	.L122:
 823 0223 89DF     		movl	%ebx, %edi
 824              	.LVL112:
 825              	.L73:
 374:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c2 = c2min; c2 <= c2max; c2++)
 826              		.loc 1 374 0
 827 0225 39C2     		cmpl	%eax, %edx
 828 0227 0F8DF000 		jge	.L92
 828      0000
 829 022d 4C63C7   		movslq	%edi, %r8
 830 0230 49C1E006 		salq	$6, %r8
 831 0234 4C894424 		movq	%r8, -8(%rsp)
 831      F8
 832 0239 4D63C2   		movslq	%r10d, %r8
 833 023c 4A8D5CC5 		leaq	0(%rbp,%r8,8), %rbx
 833      00
 834 0241 48895C24 		movq	%rbx, -16(%rsp)
 834      F0
 835 0246 89D3     		movl	%edx, %ebx
 836              	.L100:
 837              	.LVL113:
 838 0248 4C63F3   		movslq	%ebx, %r14
 376:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1min][c2];
 839              		.loc 1 376 0
 840 024b 4539D3   		cmpl	%r10d, %r11d
 841 024e 4C8B6C24 		movq	-16(%rsp), %r13
 841      F0
 842 0253 4589D4   		movl	%r10d, %r12d
 377:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 843              		.loc 1 377 0
 844 0256 4F8D3C36 		leaq	(%r14,%r14), %r15
 376:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1min][c2];
 845              		.loc 1 376 0
 846 025a 7C3F     		jl	.L102
 847              	.LVL114:
 848              	.L126:
 377:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 849              		.loc 1 377 0
 850 025c 4C8B4424 		movq	-8(%rsp), %r8
 850      F8
 851 0261 4D034500 		addq	0(%r13), %r8
 378:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 852              		.loc 1 378 0
 853 0265 39F9     		cmpl	%edi, %ecx
 377:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 854              		.loc 1 377 0
 855 0267 4F8D0C38 		leaq	(%r8,%r15), %r9
 856              	.LVL115:
 378:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 857              		.loc 1 378 0
 858 026b 7C21     		jl	.L93
 379:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c2min = c2min = c2;
 859              		.loc 1 379 0
 860 026d 6643833C 		cmpw	$0, (%r8,%r14,2)
 860      7000
 861 0273 753B     		jne	.L94
 862 0275 4189F8   		movl	%edi, %r8d
 863 0278 EB07     		jmp	.L96
 864              	.LVL116:
 865              	.L98:
 866 027a 66418339 		cmpw	$0, (%r9)
 866      00
 867 027f 752F     		jne	.L94
 868              	.L96:
 378:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 869              		.loc 1 378 0
 870 0281 4183C001 		addl	$1, %r8d
 871              	.LVL117:
 872 0285 4983C140 		addq	$64, %r9
 873              	.LVL118:
 874 0289 4139C8   		cmpl	%ecx, %r8d
 875 028c 7EEC     		jle	.L98
 876              	.LVL119:
 877              	.L93:
 376:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1min][c2];
 878              		.loc 1 376 0
 879 028e 4183C401 		addl	$1, %r12d
 880              	.LVL120:
 881 0292 4983C508 		addq	$8, %r13
 882 0296 4539E3   		cmpl	%r12d, %r11d
 883 0299 7DC1     		jge	.L126
 884              	.LVL121:
 885              	.L102:
 375:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 886              		.loc 1 375 0
 887 029b 83C301   		addl	$1, %ebx
 888              	.LVL122:
 889 029e 39D8     		cmpl	%ebx, %eax
 890 02a0 7DA6     		jge	.L100
 891 02a2 89D3     		movl	%edx, %ebx
 892              	.LVL123:
 893 02a4 EB11     		jmp	.L97
 894              	.LVL124:
 895 02a6 662E0F1F 		.p2align 4,,10
 895      84000000 
 895      0000
 896              		.p2align 3
 897              	.L94:
 385:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c2 = c2max; c2 >= c2min; c2--)
 898              		.loc 1 385 0
 899 02b0 39D8     		cmpl	%ebx, %eax
 380:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c2min;
 900              		.loc 1 380 0
 901 02b2 895E10   		movl	%ebx, 16(%rsi)
 902              	.LDL3:
 385:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c2 = c2max; c2 >= c2min; c2--)
 903              		.loc 1 385 0
 904 02b5 7E64     		jle	.L124
 905              	.LVL125:
 906              	.L97:
 390:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c2max = c2max = c2;
 907              		.loc 1 390 0
 908 02b7 4189C1   		movl	%eax, %r9d
 909              	.LVL126:
 910              	.L103:
 911 02ba 4D63F1   		movslq	%r9d, %r14
 387:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1min][c2];
 912              		.loc 1 387 0
 913 02bd 4539D3   		cmpl	%r10d, %r11d
 914 02c0 4C8B6C24 		movq	-16(%rsp), %r13
 914      F0
 915 02c5 4589D4   		movl	%r10d, %r12d
 388:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 916              		.loc 1 388 0
 917 02c8 4F8D3C36 		leaq	(%r14,%r14), %r15
 387:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1min][c2];
 918              		.loc 1 387 0
 919 02cc 7C44     		jl	.L111
 920              	.LVL127:
 921              	.L125:
 388:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 922              		.loc 1 388 0
 923 02ce 488B5424 		movq	-8(%rsp), %rdx
 923      F8
 924 02d3 49035500 		addq	0(%r13), %rdx
 389:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 925              		.loc 1 389 0
 926 02d7 39F9     		cmpl	%edi, %ecx
 388:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 927              		.loc 1 388 0
 928 02d9 4E8D043A 		leaq	(%rdx,%r15), %r8
 929              	.LVL128:
 389:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 930              		.loc 1 389 0
 931 02dd 7C26     		jl	.L104
 390:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c2max = c2max = c2;
 932              		.loc 1 390 0
 933 02df 6642833C 		cmpw	$0, (%rdx,%r14,2)
 933      7200
 934 02e5 0F851801 		jne	.L105
 934      0000
 935 02eb 89FA     		movl	%edi, %edx
 936 02ed EB0B     		jmp	.L107
 937              	.LVL129:
 938              	.L108:
 939 02ef 66418338 		cmpw	$0, (%r8)
 939      00
 940 02f4 0F850901 		jne	.L105
 940      0000
 941              	.L107:
 389:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 942              		.loc 1 389 0
 943 02fa 83C201   		addl	$1, %edx
 944              	.LVL130:
 945 02fd 4983C040 		addq	$64, %r8
 946              	.LVL131:
 947 0301 39D1     		cmpl	%edx, %ecx
 948 0303 7DEA     		jge	.L108
 949              	.LVL132:
 950              	.L104:
 387:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1min][c2];
 951              		.loc 1 387 0
 952 0305 4183C401 		addl	$1, %r12d
 953              	.LVL133:
 954 0309 4983C508 		addq	$8, %r13
 955 030d 4539E3   		cmpl	%r12d, %r11d
 956 0310 7DBC     		jge	.L125
 957              	.LVL134:
 958              	.L111:
 386:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 959              		.loc 1 386 0
 960 0312 4183E901 		subl	$1, %r9d
 961              	.LVL135:
 962 0316 4139D9   		cmpl	%ebx, %r9d
 963 0319 7D9F     		jge	.L103
 964              	.LVL136:
 965              	.L124:
 966 031b 89DA     		movl	%ebx, %edx
 967              	.LVL137:
 968              	.L92:
 406:fltk-1.3.4-1/jpeg/jquant2.c ****   dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 969              		.loc 1 406 0
 970 031d 89CB     		movl	%ecx, %ebx
 405:fltk-1.3.4-1/jpeg/jquant2.c ****   dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 971              		.loc 1 405 0
 972 031f 4589DD   		movl	%r11d, %r13d
 407:fltk-1.3.4-1/jpeg/jquant2.c ****   boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 973              		.loc 1 407 0
 974 0322 4189C1   		movl	%eax, %r9d
 406:fltk-1.3.4-1/jpeg/jquant2.c ****   dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 975              		.loc 1 406 0
 976 0325 29FB     		subl	%edi, %ebx
 405:fltk-1.3.4-1/jpeg/jquant2.c ****   dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 977              		.loc 1 405 0
 978 0327 4529D5   		subl	%r10d, %r13d
 407:fltk-1.3.4-1/jpeg/jquant2.c ****   boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 979              		.loc 1 407 0
 980 032a 4129D1   		subl	%edx, %r9d
 406:fltk-1.3.4-1/jpeg/jquant2.c ****   dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 981              		.loc 1 406 0
 982 032d 448D04DD 		leal	0(,%rbx,8), %r8d
 982      00000000 
 405:fltk-1.3.4-1/jpeg/jquant2.c ****   dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 983              		.loc 1 405 0
 984 0335 4589EE   		movl	%r13d, %r14d
 407:fltk-1.3.4-1/jpeg/jquant2.c ****   boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 985              		.loc 1 407 0
 986 0338 468D24CD 		leal	0(,%r9,8), %r12d
 986      00000000 
 405:fltk-1.3.4-1/jpeg/jquant2.c ****   dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 987              		.loc 1 405 0
 988 0340 41C1E604 		sall	$4, %r14d
 406:fltk-1.3.4-1/jpeg/jquant2.c ****   dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 989              		.loc 1 406 0
 990 0344 458D0498 		leal	(%r8,%rbx,4), %r8d
 405:fltk-1.3.4-1/jpeg/jquant2.c ****   dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 991              		.loc 1 405 0
 992 0348 4D63F6   		movslq	%r14d, %r14
 993              	.LVL138:
 407:fltk-1.3.4-1/jpeg/jquant2.c ****   boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 994              		.loc 1 407 0
 995 034b 4D63E4   		movslq	%r12d, %r12
 408:fltk-1.3.4-1/jpeg/jquant2.c ****   
 996              		.loc 1 408 0
 997 034e 4D0FAFF6 		imulq	%r14, %r14
 998              	.LVL139:
 406:fltk-1.3.4-1/jpeg/jquant2.c ****   dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 999              		.loc 1 406 0
 1000 0352 4D63C0   		movslq	%r8d, %r8
 1001              	.LVL140:
 408:fltk-1.3.4-1/jpeg/jquant2.c ****   
 1002              		.loc 1 408 0
 1003 0355 4D0FAFC0 		imulq	%r8, %r8
 1004              	.LVL141:
 1005 0359 4D0FAFE4 		imulq	%r12, %r12
 1006              	.LVL142:
 1007 035d 4D01F0   		addq	%r14, %r8
 1008 0360 4D01E0   		addq	%r12, %r8
 412:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 1009              		.loc 1 412 0
 1010 0363 4539D3   		cmpl	%r10d, %r11d
 408:fltk-1.3.4-1/jpeg/jquant2.c ****   
 1011              		.loc 1 408 0
 1012 0366 4C894618 		movq	%r8, 24(%rsi)
 1013              	.LVL143:
 412:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 1014              		.loc 1 412 0
 1015 036a 0F8CBE00 		jl	.L156
 1015      0000
 1016 0370 4F8D442A 		leaq	1(%r10,%r13), %r8
 1016      01
 1017 0375 4E8D64D5 		leaq	0(%rbp,%r10,8), %r12
 1017      00
 1018 037a 4C63D2   		movslq	%edx, %r10
 1019              	.LVL144:
 1020 037d 4E8D7CC5 		leaq	0(%rbp,%r8,8), %r15
 1020      00
 1021 0382 4C63C7   		movslq	%edi, %r8
 1022 0385 4D89C5   		movq	%r8, %r13
 1023              	.LVL145:
 1024 0388 4901D8   		addq	%rbx, %r8
 1025 038b 49C1E005 		salq	$5, %r8
 1026 038f 49C1E505 		salq	$5, %r13
 1027 0393 4F8D7402 		leaq	32(%r10,%r8), %r14
 1027      20
 1028 0398 4589C8   		movl	%r9d, %r8d
 1029 039b 4D01D5   		addq	%r10, %r13
 1030 039e 4B8D6C00 		leaq	2(%r8,%r8), %rbp
 1030      02
 1031              	.LVL146:
 1032 03a3 4D01ED   		addq	%r13, %r13
 1033 03a6 4531C9   		xorl	%r9d, %r9d
 1034              	.LVL147:
 1035 03a9 4D01F6   		addq	%r14, %r14
 1036              	.LVL148:
 1037              	.L118:
 413:fltk-1.3.4-1/jpeg/jquant2.c ****       histp = & histogram[c0][c1][c2min];
 1038              		.loc 1 413 0
 1039 03ac 39F9     		cmpl	%edi, %ecx
 1040 03ae 7C3B     		jl	.L119
 1041 03b0 498B1C24 		movq	(%r12), %rbx
 1042 03b4 4E8D1C2B 		leaq	(%rbx,%r13), %r11
 1043 03b8 4C01F3   		addq	%r14, %rbx
 1044              	.LVL149:
 1045 03bb 0F1F4400 		.p2align 4,,10
 1045      00
 1046              		.p2align 3
 1047              	.L117:
 415:fltk-1.3.4-1/jpeg/jquant2.c **** 	if (*histp != 0) {
 1048              		.loc 1 415 0
 1049 03c0 39D0     		cmpl	%edx, %eax
 414:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c2 = c2min; c2 <= c2max; c2++, histp++)
 1050              		.loc 1 414 0
 1051 03c2 4D89D8   		movq	%r11, %r8
 1052              	.LVL150:
 415:fltk-1.3.4-1/jpeg/jquant2.c **** 	if (*histp != 0) {
 1053              		.loc 1 415 0
 1054 03c5 7C1B     		jl	.L114
 1055 03c7 4E8D541D 		leaq	0(%rbp,%r11), %r10
 1055      00
 1056              	.LVL151:
 1057 03cc 0F1F4000 		.p2align 4,,10
 1058              		.p2align 3
 1059              	.L116:
 417:fltk-1.3.4-1/jpeg/jquant2.c **** 	}
 1060              		.loc 1 417 0
 1061 03d0 66418338 		cmpw	$1, (%r8)
 1061      01
 1062 03d5 4983D9FF 		sbbq	$-1, %r9
 1063              	.LVL152:
 415:fltk-1.3.4-1/jpeg/jquant2.c **** 	if (*histp != 0) {
 1064              		.loc 1 415 0
 1065 03d9 4983C002 		addq	$2, %r8
 1066              	.LVL153:
 1067 03dd 4D39D0   		cmpq	%r10, %r8
 1068 03e0 75EE     		jne	.L116
 1069              	.L114:
 1070 03e2 4983C340 		addq	$64, %r11
 413:fltk-1.3.4-1/jpeg/jquant2.c ****       histp = & histogram[c0][c1][c2min];
 1071              		.loc 1 413 0
 1072 03e6 4939DB   		cmpq	%rbx, %r11
 1073 03e9 75D5     		jne	.L117
 1074              	.LVL154:
 1075              	.L119:
 1076 03eb 4983C408 		addq	$8, %r12
 412:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 1077              		.loc 1 412 0
 1078 03ef 4D39FC   		cmpq	%r15, %r12
 1079 03f2 75B8     		jne	.L118
 421:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1080              		.loc 1 421 0
 1081 03f4 5B       		popq	%rbx
 1082              		.cfi_remember_state
 1083              		.cfi_def_cfa_offset 48
 420:fltk-1.3.4-1/jpeg/jquant2.c **** }
 1084              		.loc 1 420 0
 1085 03f5 4C894E20 		movq	%r9, 32(%rsi)
 421:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1086              		.loc 1 421 0
 1087 03f9 5D       		popq	%rbp
 1088              		.cfi_def_cfa_offset 40
 1089 03fa 415C     		popq	%r12
 1090              		.cfi_def_cfa_offset 32
 1091 03fc 415D     		popq	%r13
 1092              		.cfi_def_cfa_offset 24
 1093 03fe 415E     		popq	%r14
 1094              		.cfi_def_cfa_offset 16
 1095 0400 415F     		popq	%r15
 1096              		.cfi_def_cfa_offset 8
 1097 0402 C3       		ret
 1098              	.LVL155:
 1099              	.L105:
 1100              		.cfi_restore_state
 391:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c2max;
 1101              		.loc 1 391 0
 1102 0403 44894E14 		movl	%r9d, 20(%rsi)
 1103 0407 89DA     		movl	%ebx, %edx
 1104 0409 4489C8   		movl	%r9d, %eax
 1105 040c E90CFFFF 		jmp	.L92
 1105      FF
 1106              	.LVL156:
 1107              	.L66:
 347:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c0max;
 1108              		.loc 1 347 0
 1109 0411 44896604 		movl	%r12d, 4(%rsi)
 1110 0415 4C63D3   		movslq	%ebx, %r10
 1111 0418 4589E3   		movl	%r12d, %r11d
 1112 041b E9EDFCFF 		jmp	.L54
 1112      FF
 1113              	.LVL157:
 1114              	.L85:
 369:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c1max;
 1115              		.loc 1 369 0
 1116 0420 44894E0C 		movl	%r9d, 12(%rsi)
 1117 0424 89DF     		movl	%ebx, %edi
 1118              	.LVL158:
 1119 0426 4489C9   		movl	%r9d, %ecx
 1120 0429 E9F7FDFF 		jmp	.L73
 1120      FF
 1121              	.LVL159:
 1122              	.L156:
 411:fltk-1.3.4-1/jpeg/jquant2.c ****   for (c0 = c0min; c0 <= c0max; c0++)
 1123              		.loc 1 411 0
 1124 042e 4531C9   		xorl	%r9d, %r9d
 1125              	.LVL160:
 421:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1126              		.loc 1 421 0
 1127 0431 5B       		popq	%rbx
 1128              		.cfi_def_cfa_offset 48
 1129              	.LVL161:
 420:fltk-1.3.4-1/jpeg/jquant2.c **** }
 1130              		.loc 1 420 0
 1131 0432 4C894E20 		movq	%r9, 32(%rsi)
 421:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1132              		.loc 1 421 0
 1133 0436 5D       		popq	%rbp
 1134              		.cfi_def_cfa_offset 40
 1135              	.LVL162:
 1136 0437 415C     		popq	%r12
 1137              		.cfi_def_cfa_offset 32
 1138 0439 415D     		popq	%r13
 1139              		.cfi_def_cfa_offset 24
 1140              	.LVL163:
 1141 043b 415E     		popq	%r14
 1142              		.cfi_def_cfa_offset 16
 1143 043d 415F     		popq	%r15
 1144              		.cfi_def_cfa_offset 8
 1145 043f C3       		ret
 1146              		.cfi_endproc
 1147              	.LFE79:
 1149              		.section	.text.unlikely.update_box.isra.0
 1150              	.LCOLDE5:
 1151              		.section	.text.update_box.isra.0
 1152              	.LHOTE5:
 1153              		.section	.text.unlikely.fill_inverse_cmap,"ax",@progbits
 1154              	.LCOLDB6:
 1155              		.section	.text.fill_inverse_cmap,"ax",@progbits
 1156              	.LHOTB6:
 1157              		.p2align 4,,15
 1159              	fill_inverse_cmap:
 1160              	.LFB70:
 860:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 1161              		.loc 1 860 0
 1162              		.cfi_startproc
 1163              	.LVL164:
 1164 0000 4157     		pushq	%r15
 1165              		.cfi_def_cfa_offset 16
 1166              		.cfi_offset 15, -16
 1167 0002 4156     		pushq	%r14
 1168              		.cfi_def_cfa_offset 24
 1169              		.cfi_offset 14, -24
 874:fltk-1.3.4-1/jpeg/jquant2.c ****   c1 >>= BOX_C1_LOG;
 1170              		.loc 1 874 0
 1171 0004 C1FE02   		sarl	$2, %esi
 1172              	.LVL165:
 860:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 1173              		.loc 1 860 0
 1174 0007 4155     		pushq	%r13
 1175              		.cfi_def_cfa_offset 32
 1176              		.cfi_offset 13, -32
 1177 0009 4154     		pushq	%r12
 1178              		.cfi_def_cfa_offset 40
 1179              		.cfi_offset 12, -40
 875:fltk-1.3.4-1/jpeg/jquant2.c ****   c2 >>= BOX_C2_LOG;
 1180              		.loc 1 875 0
 1181 000b C1FA03   		sarl	$3, %edx
 1182              	.LVL166:
 860:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 1183              		.loc 1 860 0
 1184 000e 55       		pushq	%rbp
 1185              		.cfi_def_cfa_offset 48
 1186              		.cfi_offset 6, -48
 1187 000f 53       		pushq	%rbx
 1188              		.cfi_def_cfa_offset 56
 1189              		.cfi_offset 3, -56
 876:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1190              		.loc 1 876 0
 1191 0010 C1F902   		sarl	$2, %ecx
 1192              	.LVL167:
 860:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 1193              		.loc 1 860 0
 1194 0013 4881ECF8 		subq	$2552, %rsp
 1194      090000
 1195              		.cfi_def_cfa_offset 2608
 860:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 1196              		.loc 1 860 0
 1197 001a 64488B04 		movq	%fs:40, %rax
 1197      25280000 
 1197      00
 1198 0023 48898424 		movq	%rax, 2536(%rsp)
 1198      E8090000 
 1199 002b 31C0     		xorl	%eax, %eax
 1200              	.LVL168:
 862:fltk-1.3.4-1/jpeg/jquant2.c ****   int minc0, minc1, minc2;	/* lower left corner of update box */
 1201              		.loc 1 862 0
 1202 002d 488B8790 		movq	656(%rdi), %rax
 1202      020000
 874:fltk-1.3.4-1/jpeg/jquant2.c ****   c1 >>= BOX_C1_LOG;
 1203              		.loc 1 874 0
 1204 0034 89742454 		movl	%esi, 84(%rsp)
 882:fltk-1.3.4-1/jpeg/jquant2.c ****   minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 1205              		.loc 1 882 0
 1206 0038 C1E605   		sall	$5, %esi
 1207 003b 4189F1   		movl	%esi, %r9d
 1208 003e 448D7E04 		leal	4(%rsi), %r15d
 875:fltk-1.3.4-1/jpeg/jquant2.c ****   c2 >>= BOX_C2_LOG;
 1209              		.loc 1 875 0
 1210 0042 89542458 		movl	%edx, 88(%rsp)
 1211              	.LBB27:
 1212              	.LBB28:
 671:fltk-1.3.4-1/jpeg/jquant2.c ****   centerc0 = (minc0 + maxc0) >> 1;
 1213              		.loc 1 671 0
 1214 0046 4183C11C 		addl	$28, %r9d
 1215              	.LBE28:
 1216              	.LBE27:
 883:fltk-1.3.4-1/jpeg/jquant2.c ****   minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 1217              		.loc 1 883 0
 1218 004a C1E205   		sall	$5, %edx
 876:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1219              		.loc 1 876 0
 1220 004d 894C245C 		movl	%ecx, 92(%rsp)
 862:fltk-1.3.4-1/jpeg/jquant2.c ****   int minc0, minc1, minc2;	/* lower left corner of update box */
 1221              		.loc 1 862 0
 1222 0051 488B4030 		movq	48(%rax), %rax
 883:fltk-1.3.4-1/jpeg/jquant2.c ****   minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 1223              		.loc 1 883 0
 1224 0055 4189D2   		movl	%edx, %r10d
 884:fltk-1.3.4-1/jpeg/jquant2.c ****   
 1225              		.loc 1 884 0
 1226 0058 C1E105   		sall	$5, %ecx
 1227              	.LBB37:
 1228              	.LBB29:
 673:fltk-1.3.4-1/jpeg/jquant2.c ****   centerc1 = (minc1 + maxc1) >> 1;
 1229              		.loc 1 673 0
 1230 005b 4183C21E 		addl	$30, %r10d
 1231              	.LBE29:
 1232              	.LBE37:
 884:fltk-1.3.4-1/jpeg/jquant2.c ****   
 1233              		.loc 1 884 0
 1234 005f 4189CB   		movl	%ecx, %r11d
 860:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 1235              		.loc 1 860 0
 1236 0062 48897C24 		movq	%rdi, 48(%rsp)
 1236      30
 1237              	.LBB38:
 1238              	.LBB30:
 675:fltk-1.3.4-1/jpeg/jquant2.c ****   centerc2 = (minc2 + maxc2) >> 1;
 1239              		.loc 1 675 0
 1240 0067 4183C31C 		addl	$28, %r11d
 1241              	.LBE30:
 1242              	.LBE38:
 862:fltk-1.3.4-1/jpeg/jquant2.c ****   int minc0, minc1, minc2;	/* lower left corner of update box */
 1243              		.loc 1 862 0
 1244 006b 48894424 		movq	%rax, 72(%rsp)
 1244      48
 1245              	.LVL169:
 883:fltk-1.3.4-1/jpeg/jquant2.c ****   minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 1246              		.loc 1 883 0
 1247 0070 8D4202   		leal	2(%rdx), %eax
 1248              	.LVL170:
 1249              	.LBB39:
 1250              	.LBB31:
 672:fltk-1.3.4-1/jpeg/jquant2.c ****   maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 1251              		.loc 1 672 0
 1252 0073 438D140F 		leal	(%r15,%r9), %edx
 1253              	.LBE31:
 1254              	.LBE39:
 883:fltk-1.3.4-1/jpeg/jquant2.c ****   minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 1255              		.loc 1 883 0
 1256 0077 89C3     		movl	%eax, %ebx
 1257              	.LBB40:
 1258              	.LBB32:
 672:fltk-1.3.4-1/jpeg/jquant2.c ****   maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 1259              		.loc 1 672 0
 1260 0079 D1FA     		sarl	%edx
 1261              	.LBE32:
 1262              	.LBE40:
 883:fltk-1.3.4-1/jpeg/jquant2.c ****   minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 1263              		.loc 1 883 0
 1264 007b 8944242C 		movl	%eax, 44(%rsp)
 1265              	.LVL171:
 1266              	.LBB41:
 1267              	.LBB33:
 672:fltk-1.3.4-1/jpeg/jquant2.c ****   maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 1268              		.loc 1 672 0
 1269 007f 89542410 		movl	%edx, 16(%rsp)
 1270              	.LBE33:
 1271              	.LBE41:
 884:fltk-1.3.4-1/jpeg/jquant2.c ****   
 1272              		.loc 1 884 0
 1273 0083 8D4104   		leal	4(%rcx), %eax
 1274              	.LVL172:
 1275              	.LBB42:
 1276              	.LBB34:
 674:fltk-1.3.4-1/jpeg/jquant2.c ****   maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 1277              		.loc 1 674 0
 1278 0086 428D1413 		leal	(%rbx,%r10), %edx
 1279 008a 89D9     		movl	%ebx, %ecx
 1280 008c D1FA     		sarl	%edx
 1281              	.LBE34:
 1282              	.LBE42:
 884:fltk-1.3.4-1/jpeg/jquant2.c ****   
 1283              		.loc 1 884 0
 1284 008e 89C5     		movl	%eax, %ebp
 1285 0090 89442438 		movl	%eax, 56(%rsp)
 1286              	.LVL173:
 1287 0094 8B879C00 		movl	156(%rdi), %eax
 1287      0000
 1288              	.LVL174:
 1289              	.LBB43:
 1290              	.LBB35:
 674:fltk-1.3.4-1/jpeg/jquant2.c ****   maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 1291              		.loc 1 674 0
 1292 009a 89542418 		movl	%edx, 24(%rsp)
 1293              	.LVL175:
 676:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1294              		.loc 1 676 0
 1295 009e 428D541D 		leal	0(%rbp,%r11), %edx
 1295      00
 1296              	.LVL176:
 1297 00a3 D1FA     		sarl	%edx
 688:fltk-1.3.4-1/jpeg/jquant2.c ****     /* We compute the squared-c0-distance term, then add in the other two. */
 1298              		.loc 1 688 0
 1299 00a5 85C0     		testl	%eax, %eax
 676:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1300              		.loc 1 676 0
 1301 00a7 89542420 		movl	%edx, 32(%rsp)
 1302              	.LVL177:
 688:fltk-1.3.4-1/jpeg/jquant2.c ****     /* We compute the squared-c0-distance term, then add in the other two. */
 1303              		.loc 1 688 0
 1304 00ab 0F8E4F04 		jle	.L189
 1304      0000
 1305 00b1 488B97A0 		movq	160(%rdi), %rdx
 1305      000000
 1306              	.LVL178:
 1307 00b8 448D40FF 		leal	-1(%rax), %r8d
 1308 00bc 31F6     		xorl	%esi, %esi
 1309 00be BFFFFFFF 		movl	$2147483647, %edi
 1309      7F
 1310              	.LVL179:
 1311 00c3 4C8D7424 		leaq	96(%rsp), %r14
 1311      60
 1312 00c8 4983C001 		addq	$1, %r8
 1313 00cc 488B1A   		movq	(%rdx), %rbx
 1314              	.LVL180:
 1315 00cf 4C890424 		movq	%r8, (%rsp)
 1316 00d3 4189C8   		movl	%ecx, %r8d
 1317 00d6 4C8B6208 		movq	8(%rdx), %r12
 1318 00da 4C8B6A10 		movq	16(%rdx), %r13
 1319 00de 48895C24 		movq	%rbx, 8(%rsp)
 1319      08
 1320 00e3 89EB     		movl	%ebp, %ebx
 1321 00e5 E9940000 		jmp	.L171
 1321      00
 1322              	.LVL181:
 1323 00ea 660F1F44 		.p2align 4,,10
 1323      0000
 1324              		.p2align 3
 1325              	.L201:
 692:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist = tdist*tdist;
 1326              		.loc 1 692 0
 1327 00f0 89C1     		movl	%eax, %ecx
 694:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist = tdist*tdist;
 1328              		.loc 1 694 0
 1329 00f2 4429C8   		subl	%r9d, %eax
 1330              	.LVL182:
 692:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist = tdist*tdist;
 1331              		.loc 1 692 0
 1332 00f5 4429F9   		subl	%r15d, %ecx
 1333              	.LVL183:
 694:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist = tdist*tdist;
 1334              		.loc 1 694 0
 1335 00f8 01C0     		addl	%eax, %eax
 1336 00fa 4898     		cltq
 692:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist = tdist*tdist;
 1337              		.loc 1 692 0
 1338 00fc 01C9     		addl	%ecx, %ecx
 1339 00fe 4863C9   		movslq	%ecx, %rcx
 1340              	.LVL184:
 695:fltk-1.3.4-1/jpeg/jquant2.c ****     } else if (x > maxc0) {
 1341              		.loc 1 695 0
 1342 0101 4889C2   		movq	%rax, %rdx
 693:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc0) * C0_SCALE;
 1343              		.loc 1 693 0
 1344 0104 480FAFC9 		imulq	%rcx, %rcx
 1345              	.LVL185:
 695:fltk-1.3.4-1/jpeg/jquant2.c ****     } else if (x > maxc0) {
 1346              		.loc 1 695 0
 1347 0108 480FAFD0 		imulq	%rax, %rdx
 1348              	.LVL186:
 1349              	.L160:
 713:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc1) {
 1350              		.loc 1 713 0
 1351 010c 410FB604 		movzbl	(%r12,%rsi), %eax
 1351      34
 1352              	.LVL187:
 714:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc1) * C1_SCALE;
 1353              		.loc 1 714 0
 1354 0111 4139C0   		cmpl	%eax, %r8d
 1355 0114 0F8EA900 		jle	.L163
 1355      0000
 1356              	.L202:
 715:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 1357              		.loc 1 715 0
 1358 011a 89C5     		movl	%eax, %ebp
 1359 011c 4429C5   		subl	%r8d, %ebp
 1360 011f 8D6C6D00 		leal	0(%rbp,%rbp,2), %ebp
 1361 0123 4863ED   		movslq	%ebp, %rbp
 1362              	.LVL188:
 716:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc1) * C1_SCALE;
 1363              		.loc 1 716 0
 1364 0126 480FAFED 		imulq	%rbp, %rbp
 1365              	.LVL189:
 1366 012a 4801E9   		addq	%rbp, %rcx
 1367              	.LVL190:
 1368              	.L199:
 727:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 1369              		.loc 1 727 0
 1370 012d 4429D0   		subl	%r10d, %eax
 1371              	.LVL191:
 1372 0130 8D0440   		leal	(%rax,%rax,2), %eax
 1373 0133 4898     		cltq
 1374              	.LVL192:
 728:fltk-1.3.4-1/jpeg/jquant2.c ****       } else {
 1375              		.loc 1 728 0
 1376 0135 480FAFC0 		imulq	%rax, %rax
 1377              	.LVL193:
 1378 0139 4801D0   		addq	%rdx, %rax
 1379              	.LVL194:
 735:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc2) {
 1380              		.loc 1 735 0
 1381 013c 410FB654 		movzbl	0(%r13,%rsi), %edx
 1381      3500
 1382              	.LVL195:
 736:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc2) * C2_SCALE;
 1383              		.loc 1 736 0
 1384 0142 39D3     		cmpl	%edx, %ebx
 1385 0144 0F8EB200 		jle	.L167
 1385      0000
 1386              	.L203:
 737:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 1387              		.loc 1 737 0
 1388 014a 89D5     		movl	%edx, %ebp
 739:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist += tdist*tdist;
 1389              		.loc 1 739 0
 1390 014c 4429DA   		subl	%r11d, %edx
 1391              	.LVL196:
 737:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 1392              		.loc 1 737 0
 1393 014f 29DD     		subl	%ebx, %ebp
 1394              	.LVL197:
 739:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist += tdist*tdist;
 1395              		.loc 1 739 0
 1396 0151 4863D2   		movslq	%edx, %rdx
 737:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 1397              		.loc 1 737 0
 1398 0154 4863ED   		movslq	%ebp, %rbp
 1399              	.LVL198:
 738:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc2) * C2_SCALE;
 1400              		.loc 1 738 0
 1401 0157 480FAFED 		imulq	%rbp, %rbp
 1402              	.LVL199:
 740:fltk-1.3.4-1/jpeg/jquant2.c ****     } else if (x > maxc2) {
 1403              		.loc 1 740 0
 1404 015b 480FAFD2 		imulq	%rdx, %rdx
 738:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc2) * C2_SCALE;
 1405              		.loc 1 738 0
 1406 015f 4801E9   		addq	%rbp, %rcx
 1407              	.LVL200:
 740:fltk-1.3.4-1/jpeg/jquant2.c ****     } else if (x > maxc2) {
 1408              		.loc 1 740 0
 1409 0162 4801C2   		addq	%rax, %rdx
 1410              	.LVL201:
 1411              	.L168:
 1412 0165 4839D7   		cmpq	%rdx, %rdi
 757:fltk-1.3.4-1/jpeg/jquant2.c ****     if (max_dist < minmaxdist)
 1413              		.loc 1 757 0
 1414 0168 49890CF6 		movq	%rcx, (%r14,%rsi,8)
 1415 016c 480F4FFA 		cmovg	%rdx, %rdi
 1416              	.LVL202:
 1417 0170 4883C601 		addq	$1, %rsi
 1418              	.LVL203:
 688:fltk-1.3.4-1/jpeg/jquant2.c ****     /* We compute the squared-c0-distance term, then add in the other two. */
 1419              		.loc 1 688 0
 1420 0174 483B3424 		cmpq	(%rsp), %rsi
 1421 0178 0F840701 		je	.L200
 1421      0000
 1422              	.LVL204:
 1423              	.L171:
 690:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc0) {
 1424              		.loc 1 690 0
 1425 017e 488B4424 		movq	8(%rsp), %rax
 1425      08
 1426 0183 0FB60430 		movzbl	(%rax,%rsi), %eax
 1427              	.LVL205:
 691:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc0) * C0_SCALE;
 1428              		.loc 1 691 0
 1429 0187 4139C7   		cmpl	%eax, %r15d
 1430 018a 0F8F60FF 		jg	.L201
 1430      FFFF
 696:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc0) * C0_SCALE;
 1431              		.loc 1 696 0
 1432 0190 4139C1   		cmpl	%eax, %r9d
 1433 0193 0F8D8F00 		jge	.L161
 1433      0000
 697:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist = tdist*tdist;
 1434              		.loc 1 697 0
 1435 0199 89C1     		movl	%eax, %ecx
 699:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist = tdist*tdist;
 1436              		.loc 1 699 0
 1437 019b 4429F8   		subl	%r15d, %eax
 1438              	.LVL206:
 1439 019e 01C0     		addl	%eax, %eax
 697:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist = tdist*tdist;
 1440              		.loc 1 697 0
 1441 01a0 4429C9   		subl	%r9d, %ecx
 1442              	.LVL207:
 699:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist = tdist*tdist;
 1443              		.loc 1 699 0
 1444 01a3 4898     		cltq
 697:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist = tdist*tdist;
 1445              		.loc 1 697 0
 1446 01a5 01C9     		addl	%ecx, %ecx
 700:fltk-1.3.4-1/jpeg/jquant2.c ****     } else {
 1447              		.loc 1 700 0
 1448 01a7 4889C2   		movq	%rax, %rdx
 697:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist = tdist*tdist;
 1449              		.loc 1 697 0
 1450 01aa 4863C9   		movslq	%ecx, %rcx
 1451              	.LVL208:
 700:fltk-1.3.4-1/jpeg/jquant2.c ****     } else {
 1452              		.loc 1 700 0
 1453 01ad 480FAFD0 		imulq	%rax, %rdx
 713:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc1) {
 1454              		.loc 1 713 0
 1455 01b1 410FB604 		movzbl	(%r12,%rsi), %eax
 1455      34
 698:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc0) * C0_SCALE;
 1456              		.loc 1 698 0
 1457 01b6 480FAFC9 		imulq	%rcx, %rcx
 1458              	.LVL209:
 714:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc1) * C1_SCALE;
 1459              		.loc 1 714 0
 1460 01ba 4139C0   		cmpl	%eax, %r8d
 1461 01bd 0F8F57FF 		jg	.L202
 1461      FFFF
 1462              	.L163:
 719:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc1) * C1_SCALE;
 1463              		.loc 1 719 0
 1464 01c3 4139C2   		cmpl	%eax, %r10d
 1465 01c6 0F8D9400 		jge	.L165
 1465      0000
 720:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 1466              		.loc 1 720 0
 1467 01cc 89C5     		movl	%eax, %ebp
 1468 01ce 4429D5   		subl	%r10d, %ebp
 1469 01d1 8D6C6D00 		leal	0(%rbp,%rbp,2), %ebp
 1470 01d5 4863ED   		movslq	%ebp, %rbp
 1471              	.LVL210:
 721:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc1) * C1_SCALE;
 1472              		.loc 1 721 0
 1473 01d8 480FAFED 		imulq	%rbp, %rbp
 1474              	.LVL211:
 1475 01dc 4801E9   		addq	%rbp, %rcx
 1476              	.LVL212:
 1477              	.L166:
 730:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 1478              		.loc 1 730 0
 1479 01df 4429C0   		subl	%r8d, %eax
 1480              	.LVL213:
 1481 01e2 8D0440   		leal	(%rax,%rax,2), %eax
 1482 01e5 4898     		cltq
 1483              	.LVL214:
 731:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 1484              		.loc 1 731 0
 1485 01e7 480FAFC0 		imulq	%rax, %rax
 1486              	.LVL215:
 1487 01eb 4801D0   		addq	%rdx, %rax
 1488              	.LVL216:
 735:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc2) {
 1489              		.loc 1 735 0
 1490 01ee 410FB654 		movzbl	0(%r13,%rsi), %edx
 1490      3500
 1491              	.LVL217:
 736:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc2) * C2_SCALE;
 1492              		.loc 1 736 0
 1493 01f4 39D3     		cmpl	%edx, %ebx
 1494 01f6 0F8F4EFF 		jg	.L203
 1494      FFFF
 1495              	.L167:
 741:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc2) * C2_SCALE;
 1496              		.loc 1 741 0
 1497 01fc 4139D3   		cmpl	%edx, %r11d
 1498 01ff 7D47     		jge	.L169
 742:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 1499              		.loc 1 742 0
 1500 0201 89D5     		movl	%edx, %ebp
 744:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist += tdist*tdist;
 1501              		.loc 1 744 0
 1502 0203 29DA     		subl	%ebx, %edx
 1503              	.LVL218:
 742:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 1504              		.loc 1 742 0
 1505 0205 4429DD   		subl	%r11d, %ebp
 1506              	.LVL219:
 744:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist += tdist*tdist;
 1507              		.loc 1 744 0
 1508 0208 4863D2   		movslq	%edx, %rdx
 742:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 1509              		.loc 1 742 0
 1510 020b 4863ED   		movslq	%ebp, %rbp
 1511              	.LVL220:
 743:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc2) * C2_SCALE;
 1512              		.loc 1 743 0
 1513 020e 480FAFED 		imulq	%rbp, %rbp
 1514              	.LVL221:
 745:fltk-1.3.4-1/jpeg/jquant2.c ****     } else {
 1515              		.loc 1 745 0
 1516 0212 480FAFD2 		imulq	%rdx, %rdx
 743:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc2) * C2_SCALE;
 1517              		.loc 1 743 0
 1518 0216 4801E9   		addq	%rbp, %rcx
 1519              	.LVL222:
 745:fltk-1.3.4-1/jpeg/jquant2.c ****     } else {
 1520              		.loc 1 745 0
 1521 0219 4801C2   		addq	%rax, %rdx
 1522              	.LVL223:
 1523 021c E944FFFF 		jmp	.L168
 1523      FF
 1524              	.LVL224:
 1525              		.p2align 4,,10
 1526 0221 0F1F8000 		.p2align 3
 1526      000000
 1527              	.L161:
 704:fltk-1.3.4-1/jpeg/jquant2.c **** 	tdist = (x - maxc0) * C0_SCALE;
 1528              		.loc 1 704 0
 1529 0228 39442410 		cmpl	%eax, 16(%rsp)
 1530 022c 7C41     		jl	.L162
 705:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist = tdist*tdist;
 1531              		.loc 1 705 0
 1532 022e 4429C8   		subl	%r9d, %eax
 1533              	.LVL225:
 1534              	.L198:
 708:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist = tdist*tdist;
 1535              		.loc 1 708 0
 1536 0231 01C0     		addl	%eax, %eax
 703:fltk-1.3.4-1/jpeg/jquant2.c ****       if (x <= centerc0) {
 1537              		.loc 1 703 0
 1538 0233 31C9     		xorl	%ecx, %ecx
 708:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist = tdist*tdist;
 1539              		.loc 1 708 0
 1540 0235 4898     		cltq
 1541              	.LVL226:
 709:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 1542              		.loc 1 709 0
 1543 0237 4889C2   		movq	%rax, %rdx
 1544 023a 480FAFD0 		imulq	%rax, %rdx
 1545              	.LVL227:
 1546 023e E9C9FEFF 		jmp	.L160
 1546      FF
 1547              	.LVL228:
 1548              		.p2align 4,,10
 1549 0243 0F1F4400 		.p2align 3
 1549      00
 1550              	.L169:
 748:fltk-1.3.4-1/jpeg/jquant2.c **** 	tdist = (x - maxc2) * C2_SCALE;
 1551              		.loc 1 748 0
 1552 0248 39542420 		cmpl	%edx, 32(%rsp)
 1553 024c 7C26     		jl	.L170
 749:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 1554              		.loc 1 749 0
 1555 024e 4429DA   		subl	%r11d, %edx
 1556              	.LVL229:
 1557 0251 4863D2   		movslq	%edx, %rdx
 1558              	.LVL230:
 750:fltk-1.3.4-1/jpeg/jquant2.c ****       } else {
 1559              		.loc 1 750 0
 1560 0254 480FAFD2 		imulq	%rdx, %rdx
 1561              	.LVL231:
 1562 0258 4801C2   		addq	%rax, %rdx
 1563              	.LVL232:
 1564 025b E905FFFF 		jmp	.L168
 1564      FF
 1565              	.LVL233:
 1566              		.p2align 4,,10
 1567              		.p2align 3
 1568              	.L165:
 726:fltk-1.3.4-1/jpeg/jquant2.c **** 	tdist = (x - maxc1) * C1_SCALE;
 1569              		.loc 1 726 0
 1570 0260 39442418 		cmpl	%eax, 24(%rsp)
 1571 0264 0F8C75FF 		jl	.L166
 1571      FFFF
 1572 026a E9BEFEFF 		jmp	.L199
 1572      FF
 1573              	.LVL234:
 1574              	.L162:
 708:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist = tdist*tdist;
 1575              		.loc 1 708 0
 1576 026f 4429F8   		subl	%r15d, %eax
 1577              	.LVL235:
 1578 0272 EBBD     		jmp	.L198
 1579              	.LVL236:
 1580              	.L170:
 752:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 1581              		.loc 1 752 0
 1582 0274 29DA     		subl	%ebx, %edx
 1583              	.LVL237:
 1584 0276 4863D2   		movslq	%edx, %rdx
 1585              	.LVL238:
 753:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 1586              		.loc 1 753 0
 1587 0279 480FAFD2 		imulq	%rdx, %rdx
 1588              	.LVL239:
 1589 027d 4801C2   		addq	%rax, %rdx
 1590              	.LVL240:
 1591 0280 E9E0FEFF 		jmp	.L168
 1591      FF
 1592              	.LVL241:
 1593              	.L200:
 1594 0285 4C8B0424 		movq	(%rsp), %r8
 1595              	.LVL242:
 688:fltk-1.3.4-1/jpeg/jquant2.c ****     /* We compute the squared-c0-distance term, then add in the other two. */
 1596              		.loc 1 688 0
 1597 0289 31C0     		xorl	%eax, %eax
 1598 028b 31ED     		xorl	%ebp, %ebp
 1599              	.LVL243:
 1600 028d 0F1F00   		.p2align 4,,10
 1601              		.p2align 3
 1602              	.L173:
 768:fltk-1.3.4-1/jpeg/jquant2.c ****       colorlist[ncolors++] = (JSAMPLE) i;
 1603              		.loc 1 768 0
 1604 0290 49393CC6 		cmpq	%rdi, (%r14,%rax,8)
 1605 0294 7F0D     		jg	.L172
 1606              	.LVL244:
 769:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 1607              		.loc 1 769 0
 1608 0296 4863D5   		movslq	%ebp, %rdx
 1609 0299 83C501   		addl	$1, %ebp
 1610              	.LVL245:
 1611 029c 888414E0 		movb	%al, 2272(%rsp,%rdx)
 1611      080000
 1612              	.L172:
 1613              	.LVL246:
 1614 02a3 4883C001 		addq	$1, %rax
 1615              	.LVL247:
 767:fltk-1.3.4-1/jpeg/jquant2.c ****     if (mindist[i] <= minmaxdist)
 1616              		.loc 1 767 0
 1617 02a7 4939C0   		cmpq	%rax, %r8
 1618 02aa 75E4     		jne	.L173
 1619              	.LVL248:
 1620              	.L158:
 1621              	.LBE35:
 1622              	.LBE43:
 1623              	.LBB44:
 1624              	.LBB45:
 799:fltk-1.3.4-1/jpeg/jquant2.c ****     *bptr++ = 0x7FFFFFFFL;
 1625              		.loc 1 799 0
 1626 02ac 498D9600 		leaq	1024(%r14), %rdx
 1626      040000
 798:fltk-1.3.4-1/jpeg/jquant2.c ****   for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 1627              		.loc 1 798 0
 1628 02b3 4C89F0   		movq	%r14, %rax
 1629              	.LVL249:
 1630 02b6 662E0F1F 		.p2align 4,,10
 1630      84000000 
 1630      0000
 1631              		.p2align 3
 1632              	.L174:
 800:fltk-1.3.4-1/jpeg/jquant2.c ****   
 1633              		.loc 1 800 0
 1634 02c0 4883C008 		addq	$8, %rax
 1635              	.LVL250:
 1636 02c4 48C740F8 		movq	$2147483647, -8(%rax)
 1636      FFFFFF7F 
 799:fltk-1.3.4-1/jpeg/jquant2.c ****     *bptr++ = 0x7FFFFFFFL;
 1637              		.loc 1 799 0
 1638 02cc 4839D0   		cmpq	%rdx, %rax
 1639 02cf 75EF     		jne	.L174
 1640              	.LVL251:
 812:fltk-1.3.4-1/jpeg/jquant2.c ****     icolor = GETJSAMPLE(colorlist[i]);
 1641              		.loc 1 812 0
 1642 02d1 85ED     		testl	%ebp, %ebp
 1643 02d3 0F841502 		je	.L204
 1643      0000
 1644 02d9 488B4424 		movq	48(%rsp), %rax
 1644      30
 1645              	.LVL252:
 1646 02de 48C74424 		movq	$0, 8(%rsp)
 1646      08000000 
 1646      00
 829:fltk-1.3.4-1/jpeg/jquant2.c ****       dist1 = dist0;
 1647              		.loc 1 829 0
 1648 02e7 44897C24 		movl	%r15d, 60(%rsp)
 1648      3C
 1649 02ec 896C2450 		movl	%ebp, 80(%rsp)
 1650 02f0 4C897424 		movq	%r14, 64(%rsp)
 1650      40
 1651 02f5 488B80A0 		movq	160(%rax), %rax
 1651      000000
 1652 02fc 488B18   		movq	(%rax), %rbx
 1653 02ff 48895C24 		movq	%rbx, 24(%rsp)
 1653      18
 1654 0304 488B5808 		movq	8(%rax), %rbx
 1655 0308 488B4010 		movq	16(%rax), %rax
 1656 030c 48895C24 		movq	%rbx, 32(%rsp)
 1656      20
 1657 0311 48894424 		movq	%rax, 48(%rsp)
 1657      30
 1658              	.LVL253:
 1659 0316 488D8424 		leaq	2144(%rsp), %rax
 1659      60080000 
 1660              	.LVL254:
 1661 031e 48894424 		movq	%rax, 16(%rsp)
 1661      10
 1662 0323 488D8424 		leaq	2272(%rsp), %rax
 1662      E0080000 
 1663              	.LVL255:
 1664 032b 48890424 		movq	%rax, (%rsp)
 1665              	.LVL256:
 1666              	.L183:
 813:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Compute (square of) distance from minc0/c1/c2 to this color */
 1667              		.loc 1 813 0
 1668 032f 488B4424 		movq	8(%rsp), %rax
 1668      08
 815:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 = inc0*inc0;
 1669              		.loc 1 815 0
 1670 0334 8B5C243C 		movl	60(%rsp), %ebx
 827:fltk-1.3.4-1/jpeg/jquant2.c ****     xx0 = inc0;
 1671              		.loc 1 827 0
 1672 0338 4C8B6424 		movq	16(%rsp), %r12
 1672      10
 826:fltk-1.3.4-1/jpeg/jquant2.c ****     cptr = bestcolor;
 1673              		.loc 1 826 0
 1674 033d 4C8B7424 		movq	64(%rsp), %r14
 1674      40
 813:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Compute (square of) distance from minc0/c1/c2 to this color */
 1675              		.loc 1 813 0
 1676 0342 0FB69404 		movzbl	2272(%rsp,%rax), %edx
 1676      E0080000 
 815:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 = inc0*inc0;
 1677              		.loc 1 815 0
 1678 034a 488B4424 		movq	24(%rsp), %rax
 1678      18
 1679 034f 0FB60410 		movzbl	(%rax,%rdx), %eax
 813:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Compute (square of) distance from minc0/c1/c2 to this color */
 1680              		.loc 1 813 0
 1681 0353 4989D2   		movq	%rdx, %r10
 1682              	.LVL257:
 815:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 = inc0*inc0;
 1683              		.loc 1 815 0
 1684 0356 29C3     		subl	%eax, %ebx
 1685 0358 89D8     		movl	%ebx, %eax
 817:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc1*inc1;
 1686              		.loc 1 817 0
 1687 035a 488B5C24 		movq	32(%rsp), %rbx
 1687      20
 815:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 = inc0*inc0;
 1688              		.loc 1 815 0
 1689 035f 01C0     		addl	%eax, %eax
 1690 0361 4898     		cltq
 1691              	.LVL258:
 817:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc1*inc1;
 1692              		.loc 1 817 0
 1693 0363 0FB60C13 		movzbl	(%rbx,%rdx), %ecx
 1694 0367 8B5C242C 		movl	44(%rsp), %ebx
 816:fltk-1.3.4-1/jpeg/jquant2.c ****     inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 1695              		.loc 1 816 0
 1696 036b 4989C5   		movq	%rax, %r13
 1697 036e 4C0FAFE8 		imulq	%rax, %r13
 1698              	.LVL259:
 822:fltk-1.3.4-1/jpeg/jquant2.c ****     inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 1699              		.loc 1 822 0
 1700 0372 488D6808 		leaq	8(%rax), %rbp
 1701 0376 48C1E505 		salq	$5, %rbp
 817:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc1*inc1;
 1702              		.loc 1 817 0
 1703 037a 29CB     		subl	%ecx, %ebx
 1704 037c 8D0C5B   		leal	(%rbx,%rbx,2), %ecx
 819:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc2*inc2;
 1705              		.loc 1 819 0
 1706 037f 488B5C24 		movq	48(%rsp), %rbx
 1706      30
 817:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc1*inc1;
 1707              		.loc 1 817 0
 1708 0384 4863C9   		movslq	%ecx, %rcx
 1709              	.LVL260:
 819:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc2*inc2;
 1710              		.loc 1 819 0
 1711 0387 0FB61413 		movzbl	(%rbx,%rdx), %edx
 1712              	.LVL261:
 820:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Form the initial difference increments */
 1713              		.loc 1 820 0
 1714 038b 4889CE   		movq	%rcx, %rsi
 819:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc2*inc2;
 1715              		.loc 1 819 0
 1716 038e 8B5C2438 		movl	56(%rsp), %ebx
 820:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Form the initial difference increments */
 1717              		.loc 1 820 0
 1718 0392 480FAFF1 		imulq	%rcx, %rsi
 823:fltk-1.3.4-1/jpeg/jquant2.c ****     inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 1719              		.loc 1 823 0
 1720 0396 488D0449 		leaq	(%rcx,%rcx,2), %rax
 1721              	.LVL262:
 1722 039a 48C1E003 		salq	$3, %rax
 819:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc2*inc2;
 1723              		.loc 1 819 0
 1724 039e 29D3     		subl	%edx, %ebx
 823:fltk-1.3.4-1/jpeg/jquant2.c ****     inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 1725              		.loc 1 823 0
 1726 03a0 4C8DB890 		leaq	144(%rax), %r15
 1726      000000
 819:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc2*inc2;
 1727              		.loc 1 819 0
 1728 03a7 4863D3   		movslq	%ebx, %rdx
 1729              	.LVL263:
 820:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Form the initial difference increments */
 1730              		.loc 1 820 0
 1731 03aa 4C01EE   		addq	%r13, %rsi
 1732              	.LVL264:
 1733 03ad 488D9890 		leaq	2448(%rax), %rbx
 1733      090000
 1734 03b4 4989D5   		movq	%rdx, %r13
 824:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Now loop over all cells in box, updating distance per Thomas method */
 1735              		.loc 1 824 0
 1736 03b7 4C8D5A04 		leaq	4(%rdx), %r11
 820:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Form the initial difference increments */
 1737              		.loc 1 820 0
 1738 03bb 4C0FAFEA 		imulq	%rdx, %r13
 824:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Now loop over all cells in box, updating distance per Thomas method */
 1739              		.loc 1 824 0
 1740 03bf 49C1E304 		salq	$4, %r11
 820:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Form the initial difference increments */
 1741              		.loc 1 820 0
 1742 03c3 4901F5   		addq	%rsi, %r13
 1743              	.LVL265:
 1744              	.L177:
 812:fltk-1.3.4-1/jpeg/jquant2.c ****     icolor = GETJSAMPLE(colorlist[i]);
 1745              		.loc 1 812 0
 1746 03c6 4D89E0   		movq	%r12, %r8
 1747 03c9 4C89F6   		movq	%r14, %rsi
 1748 03cc 4C89FF   		movq	%r15, %rdi
 1749 03cf 4D89E9   		movq	%r13, %r9
 1750              	.LVL266:
 1751              		.p2align 4,,10
 1752 03d2 660F1F44 		.p2align 3
 1752      0000
 1753              	.L182:
 1754 03d8 4C89D9   		movq	%r11, %rcx
 1755 03db 4C89CA   		movq	%r9, %rdx
 1756 03de 31C0     		xorl	%eax, %eax
 1757              	.LVL267:
 1758              	.L179:
 836:fltk-1.3.4-1/jpeg/jquant2.c **** 	    *bptr = dist2;
 1759              		.loc 1 836 0
 1760 03e0 483914C6 		cmpq	%rdx, (%rsi,%rax,8)
 1761 03e4 7E08     		jle	.L178
 837:fltk-1.3.4-1/jpeg/jquant2.c **** 	    *cptr = (JSAMPLE) icolor;
 1762              		.loc 1 837 0
 1763 03e6 488914C6 		movq	%rdx, (%rsi,%rax,8)
 838:fltk-1.3.4-1/jpeg/jquant2.c **** 	  }
 1764              		.loc 1 838 0
 1765 03ea 45881400 		movb	%r10b, (%r8,%rax)
 1766              	.L178:
 1767 03ee 4883C001 		addq	$1, %rax
 1768              	.LVL268:
 840:fltk-1.3.4-1/jpeg/jquant2.c **** 	  xx2 += 2 * STEP_C2 * STEP_C2;
 1769              		.loc 1 840 0
 1770 03f2 4801CA   		addq	%rcx, %rdx
 1771              	.LVL269:
 841:fltk-1.3.4-1/jpeg/jquant2.c **** 	  bptr++;
 1772              		.loc 1 841 0
 1773 03f5 4883E980 		subq	$-128, %rcx
 1774              	.LVL270:
 835:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (dist2 < *bptr) {
 1775              		.loc 1 835 0
 1776 03f9 4883F804 		cmpq	$4, %rax
 1777 03fd 75E1     		jne	.L179
 845:fltk-1.3.4-1/jpeg/jquant2.c **** 	xx1 += 2 * STEP_C1 * STEP_C1;
 1778              		.loc 1 845 0
 1779 03ff 4901F9   		addq	%rdi, %r9
 1780              	.LVL271:
 846:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 1781              		.loc 1 846 0
 1782 0402 4881C720 		addq	$288, %rdi
 1782      010000
 1783              	.LVL272:
 1784 0409 4883C620 		addq	$32, %rsi
 1785 040d 4983C004 		addq	$4, %r8
 1786              	.LVL273:
 832:fltk-1.3.4-1/jpeg/jquant2.c **** 	dist2 = dist1;
 1787              		.loc 1 832 0
 1788 0411 4839DF   		cmpq	%rbx, %rdi
 1789 0414 75C2     		jne	.L182
 848:fltk-1.3.4-1/jpeg/jquant2.c ****       xx0 += 2 * STEP_C0 * STEP_C0;
 1790              		.loc 1 848 0
 1791 0416 4901ED   		addq	%rbp, %r13
 1792              	.LVL274:
 1793 0419 4981C600 		addq	$256, %r14
 1793      010000
 1794 0420 4983C420 		addq	$32, %r12
 849:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 1795              		.loc 1 849 0
 1796 0424 4881C500 		addq	$512, %rbp
 1796      020000
 1797              	.LVL275:
 829:fltk-1.3.4-1/jpeg/jquant2.c ****       dist1 = dist0;
 1798              		.loc 1 829 0
 1799 042b 4C3B2424 		cmpq	(%rsp), %r12
 1800 042f 7595     		jne	.L177
 1801              	.LVL276:
 1802 0431 48834424 		addq	$1, 8(%rsp)
 1802      0801
 1803              	.LVL277:
 1804 0437 488B4424 		movq	8(%rsp), %rax
 1804      08
 812:fltk-1.3.4-1/jpeg/jquant2.c ****     icolor = GETJSAMPLE(colorlist[i]);
 1805              		.loc 1 812 0
 1806 043c 39442450 		cmpl	%eax, 80(%rsp)
 1807 0440 0F8FE9FE 		jg	.L183
 1807      FFFF
 1808              	.LVL278:
 1809              	.L184:
 1810 0446 8B442454 		movl	84(%rsp), %eax
 1811              	.LBE45:
 1812              	.LBE44:
 898:fltk-1.3.4-1/jpeg/jquant2.c ****   cptr = bestcolor;
 1813              		.loc 1 898 0
 1814 044a 448B4424 		movl	92(%rsp), %r8d
 1814      5C
 1815 044f 448B5C24 		movl	88(%rsp), %r11d
 1815      58
 1816 0454 488B5C24 		movq	72(%rsp), %rbx
 1816      48
 899:fltk-1.3.4-1/jpeg/jquant2.c ****   for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 1817              		.loc 1 899 0
 1818 0459 488B4C24 		movq	16(%rsp), %rcx
 1818      10
 1819 045e C1E002   		sall	$2, %eax
 1820              	.LVL279:
 898:fltk-1.3.4-1/jpeg/jquant2.c ****   cptr = bestcolor;
 1821              		.loc 1 898 0
 1822 0461 41C1E002 		sall	$2, %r8d
 1823              	.LVL280:
 1824 0465 4898     		cltq
 1825 0467 41C1E303 		sall	$3, %r11d
 1826              	.LVL281:
 1827 046b 4D63C0   		movslq	%r8d, %r8
 1828 046e 4C8D0CC3 		leaq	(%rbx,%rax,8), %r9
 1829 0472 4D63DB   		movslq	%r11d, %r11
 900:fltk-1.3.4-1/jpeg/jquant2.c ****     for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 1830              		.loc 1 900 0
 1831 0475 488D9980 		leaq	128(%rcx), %rbx
 1831      000000
 1832 047c 49C1E306 		salq	$6, %r11
 1833              	.LVL282:
 902:fltk-1.3.4-1/jpeg/jquant2.c ****       for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 1834              		.loc 1 902 0
 1835 0480 4D01C0   		addq	%r8, %r8
 1836              	.LVL283:
 1837              	.L176:
 1838 0483 4C8D5120 		leaq	32(%rcx), %r10
 1839              	.LBB47:
 1840              	.LBB46:
 826:fltk-1.3.4-1/jpeg/jquant2.c ****     cptr = bestcolor;
 1841              		.loc 1 826 0
 1842 0487 4C89DF   		movq	%r11, %rdi
 1843              	.LVL284:
 1844 048a 660F1F44 		.p2align 4,,10
 1844      0000
 1845              		.p2align 3
 1846              	.L186:
 1847              	.LBE46:
 1848              	.LBE47:
 902:fltk-1.3.4-1/jpeg/jquant2.c ****       for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 1849              		.loc 1 902 0
 1850 0490 4889FE   		movq	%rdi, %rsi
 1851 0493 490331   		addq	(%r9), %rsi
 1852 0496 31C0     		xorl	%eax, %eax
 1853 0498 4C01C6   		addq	%r8, %rsi
 1854              	.LVL285:
 1855              	.L185:
 904:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 1856              		.loc 1 904 0 discriminator 3
 1857 049b 0FB61401 		movzbl	(%rcx,%rax), %edx
 1858 049f 83C201   		addl	$1, %edx
 1859 04a2 66891446 		movw	%dx, (%rsi,%rax,2)
 1860              	.LVL286:
 1861 04a6 4883C001 		addq	$1, %rax
 1862              	.LVL287:
 903:fltk-1.3.4-1/jpeg/jquant2.c **** 	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 1863              		.loc 1 903 0 discriminator 3
 1864 04aa 4883F804 		cmpq	$4, %rax
 1865 04ae 75EB     		jne	.L185
 1866 04b0 4883C104 		addq	$4, %rcx
 1867              	.LVL288:
 1868 04b4 4883C740 		addq	$64, %rdi
 901:fltk-1.3.4-1/jpeg/jquant2.c ****       cachep = & histogram[c0+ic0][c1+ic1][c2];
 1869              		.loc 1 901 0 discriminator 2
 1870 04b8 4939CA   		cmpq	%rcx, %r10
 1871 04bb 75D3     		jne	.L186
 1872              	.LVL289:
 1873 04bd 4983C108 		addq	$8, %r9
 900:fltk-1.3.4-1/jpeg/jquant2.c ****     for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 1874              		.loc 1 900 0 discriminator 2
 1875 04c1 4939DA   		cmpq	%rbx, %r10
 1876 04c4 4C89D1   		movq	%r10, %rcx
 1877 04c7 75BA     		jne	.L176
 1878              	.LVL290:
 908:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1879              		.loc 1 908 0
 1880 04c9 488B8424 		movq	2536(%rsp), %rax
 1880      E8090000 
 1881 04d1 64483304 		xorq	%fs:40, %rax
 1881      25280000 
 1881      00
 1882              	.LVL291:
 1883 04da 7530     		jne	.L205
 1884 04dc 4881C4F8 		addq	$2552, %rsp
 1884      090000
 1885              		.cfi_remember_state
 1886              		.cfi_def_cfa_offset 56
 1887 04e3 5B       		popq	%rbx
 1888              		.cfi_def_cfa_offset 48
 1889 04e4 5D       		popq	%rbp
 1890              		.cfi_def_cfa_offset 40
 1891 04e5 415C     		popq	%r12
 1892              		.cfi_def_cfa_offset 32
 1893 04e7 415D     		popq	%r13
 1894              		.cfi_def_cfa_offset 24
 1895 04e9 415E     		popq	%r14
 1896              		.cfi_def_cfa_offset 16
 1897 04eb 415F     		popq	%r15
 1898              		.cfi_def_cfa_offset 8
 1899 04ed C3       		ret
 1900              	.LVL292:
 1901              	.L204:
 1902              		.cfi_restore_state
 1903 04ee 488D8424 		leaq	2144(%rsp), %rax
 1903      60080000 
 1904              	.LVL293:
 1905 04f6 48894424 		movq	%rax, 16(%rsp)
 1905      10
 1906 04fb E946FFFF 		jmp	.L184
 1906      FF
 1907              	.LVL294:
 1908              	.L189:
 1909              	.LBB48:
 1910              	.LBB36:
 688:fltk-1.3.4-1/jpeg/jquant2.c ****     /* We compute the squared-c0-distance term, then add in the other two. */
 1911              		.loc 1 688 0
 1912 0500 31ED     		xorl	%ebp, %ebp
 1913              	.LVL295:
 1914 0502 4C8D7424 		leaq	96(%rsp), %r14
 1914      60
 1915 0507 E9A0FDFF 		jmp	.L158
 1915      FF
 1916              	.LVL296:
 1917              	.L205:
 1918              	.LBE36:
 1919              	.LBE48:
 908:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1920              		.loc 1 908 0
 1921 050c E8000000 		call	__stack_chk_fail
 1921      00
 1922              	.LVL297:
 1923              		.cfi_endproc
 1924              	.LFE70:
 1926              		.section	.text.unlikely.fill_inverse_cmap
 1927              	.LCOLDE6:
 1928              		.section	.text.fill_inverse_cmap
 1929              	.LHOTE6:
 1930              		.section	.text.unlikely.pass2_no_dither,"ax",@progbits
 1931              	.LCOLDB7:
 1932              		.section	.text.pass2_no_dither,"ax",@progbits
 1933              	.LHOTB7:
 1934              		.p2align 4,,15
 1936              	pass2_no_dither:
 1937              	.LFB71:
 919:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 1938              		.loc 1 919 0
 1939              		.cfi_startproc
 1940              	.LVL298:
 1941 0000 4157     		pushq	%r15
 1942              		.cfi_def_cfa_offset 16
 1943              		.cfi_offset 15, -16
 1944              	.LVL299:
 1945 0002 4156     		pushq	%r14
 1946              		.cfi_def_cfa_offset 24
 1947              		.cfi_offset 14, -24
 1948 0004 4155     		pushq	%r13
 1949              		.cfi_def_cfa_offset 32
 1950              		.cfi_offset 13, -32
 1951 0006 4154     		pushq	%r12
 1952              		.cfi_def_cfa_offset 40
 1953              		.cfi_offset 12, -40
 1954 0008 55       		pushq	%rbp
 1955              		.cfi_def_cfa_offset 48
 1956              		.cfi_offset 6, -48
 1957 0009 53       		pushq	%rbx
 1958              		.cfi_def_cfa_offset 56
 1959              		.cfi_offset 3, -56
 1960 000a 4883EC38 		subq	$56, %rsp
 1961              		.cfi_def_cfa_offset 112
 921:fltk-1.3.4-1/jpeg/jquant2.c ****   register JSAMPROW inptr, outptr;
 1962              		.loc 1 921 0
 1963 000e 488B8790 		movq	656(%rdi), %rax
 1963      020000
 929:fltk-1.3.4-1/jpeg/jquant2.c ****     inptr = input_buf[row];
 1964              		.loc 1 929 0
 1965 0015 85C9     		testl	%ecx, %ecx
 921:fltk-1.3.4-1/jpeg/jquant2.c ****   register JSAMPROW inptr, outptr;
 1966              		.loc 1 921 0
 1967 0017 4C8B7030 		movq	48(%rax), %r14
 1968              	.LVL300:
 927:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1969              		.loc 1 927 0
 1970 001b 8B878800 		movl	136(%rdi), %eax
 1970      0000
 1971 0021 8944241C 		movl	%eax, 28(%rsp)
 1972              	.LVL301:
 929:fltk-1.3.4-1/jpeg/jquant2.c ****     inptr = input_buf[row];
 1973              		.loc 1 929 0
 1974 0025 0F8EDA00 		jle	.L206
 1974      0000
 1975 002b 4189C2   		movl	%eax, %r10d
 1976 002e 8D41FF   		leal	-1(%rcx), %eax
 1977              	.LVL302:
 1978 0031 48897C24 		movq	%rdi, 8(%rsp)
 1978      08
 1979 0036 458D6AFF 		leal	-1(%r10), %r13d
 1980 003a 4889F3   		movq	%rsi, %rbx
 1981 003d 48895424 		movq	%rdx, 16(%rsp)
 1981      10
 1982 0042 488D44C6 		leaq	8(%rsi,%rax,8), %rax
 1982      08
 1983 0047 48894424 		movq	%rax, 32(%rsp)
 1983      20
 1984 004c 498D4501 		leaq	1(%r13), %rax
 1985 0050 4D89F5   		movq	%r14, %r13
 1986 0053 48894424 		movq	%rax, 40(%rsp)
 1986      28
 1987              	.LVL303:
 1988 0058 0F1F8400 		.p2align 4,,10
 1988      00000000 
 1989              		.p2align 3
 1990              	.L209:
 931:fltk-1.3.4-1/jpeg/jquant2.c ****     for (col = width; col > 0; col--) {
 1991              		.loc 1 931 0
 1992 0060 488B4424 		movq	16(%rsp), %rax
 1992      10
 930:fltk-1.3.4-1/jpeg/jquant2.c ****     outptr = output_buf[row];
 1993              		.loc 1 930 0
 1994 0065 4C8B33   		movq	(%rbx), %r14
 1995              	.LVL304:
 931:fltk-1.3.4-1/jpeg/jquant2.c ****     for (col = width; col > 0; col--) {
 1996              		.loc 1 931 0
 1997 0068 4C8B20   		movq	(%rax), %r12
 1998              	.LVL305:
 1999 006b 488B4424 		movq	40(%rsp), %rax
 1999      28
 2000 0070 4D8D3C04 		leaq	(%r12,%rax), %r15
 932:fltk-1.3.4-1/jpeg/jquant2.c ****       /* get pixel value and index into the cache */
 2001              		.loc 1 932 0
 2002 0074 8B44241C 		movl	28(%rsp), %eax
 2003 0078 85C0     		testl	%eax, %eax
 2004 007a 7515     		jne	.L212
 2005 007c EB72     		jmp	.L213
 2006              	.LVL306:
 2007 007e 6690     		.p2align 4,,10
 2008              		.p2align 3
 2009              	.L211:
 943:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 2010              		.loc 1 943 0 discriminator 2
 2011 0080 4983C401 		addq	$1, %r12
 2012              	.LVL307:
 2013 0084 83E801   		subl	$1, %eax
 932:fltk-1.3.4-1/jpeg/jquant2.c ****       /* get pixel value and index into the cache */
 2014              		.loc 1 932 0 discriminator 2
 2015 0087 4D39FC   		cmpq	%r15, %r12
 943:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 2016              		.loc 1 943 0 discriminator 2
 2017 008a 41884424 		movb	%al, -1(%r12)
 2017      FF
 932:fltk-1.3.4-1/jpeg/jquant2.c ****       /* get pixel value and index into the cache */
 2018              		.loc 1 932 0 discriminator 2
 2019 008f 745F     		je	.L213
 2020              	.L212:
 2021              	.LVL308:
 934:fltk-1.3.4-1/jpeg/jquant2.c ****       c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 2022              		.loc 1 934 0
 2023 0091 410FB636 		movzbl	(%r14), %esi
 935:fltk-1.3.4-1/jpeg/jquant2.c ****       c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 2024              		.loc 1 935 0
 2025 0095 410FB656 		movzbl	1(%r14), %edx
 2025      01
 2026 009a 4983C603 		addq	$3, %r14
 2027              	.LVL309:
 936:fltk-1.3.4-1/jpeg/jquant2.c ****       cachep = & histogram[c0][c1][c2];
 2028              		.loc 1 936 0
 2029 009e 410FB646 		movzbl	-1(%r14), %eax
 2029      FF
 935:fltk-1.3.4-1/jpeg/jquant2.c ****       c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 2030              		.loc 1 935 0
 2031 00a3 C0EA02   		shrb	$2, %dl
 934:fltk-1.3.4-1/jpeg/jquant2.c ****       c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 2032              		.loc 1 934 0
 2033 00a6 40C0EE03 		shrb	$3, %sil
 2034              	.LVL310:
 936:fltk-1.3.4-1/jpeg/jquant2.c ****       cachep = & histogram[c0][c1][c2];
 2035              		.loc 1 936 0
 2036 00aa C0E803   		shrb	$3, %al
 937:fltk-1.3.4-1/jpeg/jquant2.c ****       /* If we have not seen this color before, find nearest colormap entry */
 2037              		.loc 1 937 0
 2038 00ad 0FB6FA   		movzbl	%dl, %edi
 2039 00b0 440FB6CE 		movzbl	%sil, %r9d
 2040 00b4 48C1E706 		salq	$6, %rdi
 936:fltk-1.3.4-1/jpeg/jquant2.c ****       cachep = & histogram[c0][c1][c2];
 2041              		.loc 1 936 0
 2042 00b8 0FB6C8   		movzbl	%al, %ecx
 2043              	.LVL311:
 2044 00bb 0FB6C0   		movzbl	%al, %eax
 2045 00be 4C8D0447 		leaq	(%rdi,%rax,2), %r8
 2046 00c2 4F0344CD 		addq	0(%r13,%r9,8), %r8
 2046      00
 940:fltk-1.3.4-1/jpeg/jquant2.c **** 	fill_inverse_cmap(cinfo, c0,c1,c2);
 2047              		.loc 1 940 0
 2048 00c7 410FB700 		movzwl	(%r8), %eax
 2049 00cb 4C89C5   		movq	%r8, %rbp
 2050 00ce 6685C0   		testw	%ax, %ax
 2051 00d1 75AD     		jne	.L211
 941:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Now emit the colormap index for this cell */
 2052              		.loc 1 941 0
 2053 00d3 488B7C24 		movq	8(%rsp), %rdi
 2053      08
 2054              	.LVL312:
 2055 00d8 0FB6D2   		movzbl	%dl, %edx
 2056              	.LVL313:
 2057 00db 400FB6F6 		movzbl	%sil, %esi
 2058              	.LVL314:
 2059 00df E8000000 		call	fill_inverse_cmap
 2059      00
 2060              	.LVL315:
 2061 00e4 0FB74500 		movzwl	0(%rbp), %eax
 2062 00e8 EB96     		jmp	.L211
 2063 00ea 660F1F44 		.p2align 4,,10
 2063      0000
 2064              		.p2align 3
 2065              	.L213:
 2066 00f0 4883C308 		addq	$8, %rbx
 2067 00f4 48834424 		addq	$8, 16(%rsp)
 2067      1008
 929:fltk-1.3.4-1/jpeg/jquant2.c ****     inptr = input_buf[row];
 2068              		.loc 1 929 0
 2069 00fa 483B5C24 		cmpq	32(%rsp), %rbx
 2069      20
 2070 00ff 0F855BFF 		jne	.L209
 2070      FFFF
 2071              	.LVL316:
 2072              	.L206:
 946:fltk-1.3.4-1/jpeg/jquant2.c **** 
 2073              		.loc 1 946 0
 2074 0105 4883C438 		addq	$56, %rsp
 2075              		.cfi_def_cfa_offset 56
 2076 0109 5B       		popq	%rbx
 2077              		.cfi_def_cfa_offset 48
 2078 010a 5D       		popq	%rbp
 2079              		.cfi_def_cfa_offset 40
 2080 010b 415C     		popq	%r12
 2081              		.cfi_def_cfa_offset 32
 2082 010d 415D     		popq	%r13
 2083              		.cfi_def_cfa_offset 24
 2084 010f 415E     		popq	%r14
 2085              		.cfi_def_cfa_offset 16
 2086 0111 415F     		popq	%r15
 2087              		.cfi_def_cfa_offset 8
 2088 0113 C3       		ret
 2089              		.cfi_endproc
 2090              	.LFE71:
 2092              		.section	.text.unlikely.pass2_no_dither
 2093              	.LCOLDE7:
 2094              		.section	.text.pass2_no_dither
 2095              	.LHOTE7:
 2096              		.section	.text.unlikely.pass2_fs_dither,"ax",@progbits
 2097              	.LCOLDB8:
 2098              		.section	.text.pass2_fs_dither,"ax",@progbits
 2099              	.LHOTB8:
 2100              		.p2align 4,,15
 2102              	pass2_fs_dither:
 2103              	.LFB72:
 953:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 2104              		.loc 1 953 0
 2105              		.cfi_startproc
 2106              	.LVL317:
 2107 0000 4157     		pushq	%r15
 2108              		.cfi_def_cfa_offset 16
 2109              		.cfi_offset 15, -16
 2110 0002 4156     		pushq	%r14
 2111              		.cfi_def_cfa_offset 24
 2112              		.cfi_offset 14, -24
 2113 0004 4155     		pushq	%r13
 2114              		.cfi_def_cfa_offset 32
 2115              		.cfi_offset 13, -32
 2116 0006 4154     		pushq	%r12
 2117              		.cfi_def_cfa_offset 40
 2118              		.cfi_offset 12, -40
 2119 0008 55       		pushq	%rbp
 2120              		.cfi_def_cfa_offset 48
 2121              		.cfi_offset 6, -48
 2122 0009 53       		pushq	%rbx
 2123              		.cfi_def_cfa_offset 56
 2124              		.cfi_offset 3, -56
 2125 000a 4881ECD8 		subq	$216, %rsp
 2125      000000
 2126              		.cfi_def_cfa_offset 272
 954:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram = cquantize->histogram;
 2127              		.loc 1 954 0
 2128 0011 488B8790 		movq	656(%rdi), %rax
 2128      020000
 975:fltk-1.3.4-1/jpeg/jquant2.c ****     inptr = input_buf[row];
 2129              		.loc 1 975 0
 2130 0018 85C9     		testl	%ecx, %ecx
 968:fltk-1.3.4-1/jpeg/jquant2.c ****   int *error_limit = cquantize->error_limiter;
 2131              		.loc 1 968 0
 2132 001a 4C8B97B8 		movq	440(%rdi), %r10
 2132      010000
 955:fltk-1.3.4-1/jpeg/jquant2.c ****   register LOCFSERROR cur0, cur1, cur2;	/* current error or pixel value */
 2133              		.loc 1 955 0
 2134 0021 488B5830 		movq	48(%rax), %rbx
 954:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram = cquantize->histogram;
 2135              		.loc 1 954 0
 2136 0025 48898424 		movq	%rax, 152(%rsp)
 2136      98000000 
 2137              	.LVL318:
 969:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW colormap0 = cinfo->colormap[0];
 2138              		.loc 1 969 0
 2139 002d 4C8B5850 		movq	80(%rax), %r11
 970:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW colormap1 = cinfo->colormap[1];
 2140              		.loc 1 970 0
 2141 0031 488B87A0 		movq	160(%rdi), %rax
 2141      000000
 2142              	.LVL319:
 955:fltk-1.3.4-1/jpeg/jquant2.c ****   register LOCFSERROR cur0, cur1, cur2;	/* current error or pixel value */
 2143              		.loc 1 955 0
 2144 0038 48895C24 		movq	%rbx, 56(%rsp)
 2144      38
 2145              	.LVL320:
 967:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPLE *range_limit = cinfo->sample_range_limit;
 2146              		.loc 1 967 0
 2147 003d 8B9F8800 		movl	136(%rdi), %ebx
 2147      0000
 2148              	.LVL321:
 970:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW colormap1 = cinfo->colormap[1];
 2149              		.loc 1 970 0
 2150 0043 4C8B08   		movq	(%rax), %r9
 967:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPLE *range_limit = cinfo->sample_range_limit;
 2151              		.loc 1 967 0
 2152 0046 899C24A4 		movl	%ebx, 164(%rsp)
 2152      000000
 2153              	.LVL322:
 970:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW colormap1 = cinfo->colormap[1];
 2154              		.loc 1 970 0
 2155 004d 4C894C24 		movq	%r9, 64(%rsp)
 2155      40
 2156              	.LVL323:
 971:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW colormap2 = cinfo->colormap[2];
 2157              		.loc 1 971 0
 2158 0052 4C8B4808 		movq	8(%rax), %r9
 2159              	.LVL324:
 972:fltk-1.3.4-1/jpeg/jquant2.c ****   SHIFT_TEMPS
 2160              		.loc 1 972 0
 2161 0056 488B4010 		movq	16(%rax), %rax
 2162              	.LVL325:
 971:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW colormap2 = cinfo->colormap[2];
 2163              		.loc 1 971 0
 2164 005a 4C894C24 		movq	%r9, 72(%rsp)
 2164      48
 2165              	.LVL326:
 972:fltk-1.3.4-1/jpeg/jquant2.c ****   SHIFT_TEMPS
 2166              		.loc 1 972 0
 2167 005f 48894424 		movq	%rax, 80(%rsp)
 2167      50
 2168              	.LVL327:
 975:fltk-1.3.4-1/jpeg/jquant2.c ****     inptr = input_buf[row];
 2169              		.loc 1 975 0
 2170 0064 0F8E2503 		jle	.L218
 2170      0000
 980:fltk-1.3.4-1/jpeg/jquant2.c ****       outptr += width-1;
 2171              		.loc 1 980 0
 2172 006a 8D045B   		leal	(%rbx,%rbx,2), %eax
 2173              	.LVL328:
 2174 006d 4889BC24 		movq	%rdi, 136(%rsp)
 2174      88000000 
 2175 0075 48897424 		movq	%rsi, 120(%rsp)
 2175      78
 2176 007a 48899424 		movq	%rdx, 144(%rsp)
 2176      90000000 
 2177 0082 8D78FD   		leal	-3(%rax), %edi
 2178              	.LVL329:
 984:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->on_odd_row = FALSE; /* flip for next time */
 2179              		.loc 1 984 0
 2180 0085 83C003   		addl	$3, %eax
 2181 0088 4801C0   		addq	%rax, %rax
 2182 008b 48898424 		movq	%rax, 192(%rsp)
 2182      C0000000 
 2183 0093 8D41FF   		leal	-1(%rcx), %eax
 980:fltk-1.3.4-1/jpeg/jquant2.c ****       outptr += width-1;
 2184              		.loc 1 980 0
 2185 0096 4889BC24 		movq	%rdi, 184(%rsp)
 2185      B8000000 
 2186 009e 488D44C6 		leaq	8(%rsi,%rax,8), %rax
 2186      08
 2187 00a3 48898424 		movq	%rax, 168(%rsp)
 2187      A8000000 
 981:fltk-1.3.4-1/jpeg/jquant2.c ****       dir = -1;
 2188              		.loc 1 981 0
 2189 00ab 8D43FF   		leal	-1(%rbx), %eax
 2190 00ae 48898424 		movq	%rax, 200(%rsp)
 2190      C8000000 
 2191 00b6 4883C001 		addq	$1, %rax
 2192 00ba 48898424 		movq	%rax, 176(%rsp)
 2192      B0000000 
 2193              	.LVL330:
 2194              		.p2align 4,,10
 2195 00c2 660F1F44 		.p2align 3
 2195      0000
 2196              	.L225:
 976:fltk-1.3.4-1/jpeg/jquant2.c ****     outptr = output_buf[row];
 2197              		.loc 1 976 0
 2198 00c8 488B4424 		movq	120(%rsp), %rax
 2198      78
 2199 00cd 4C8B30   		movq	(%rax), %r14
 2200              	.LVL331:
 977:fltk-1.3.4-1/jpeg/jquant2.c ****     if (cquantize->on_odd_row) {
 2201              		.loc 1 977 0
 2202 00d0 488B8424 		movq	144(%rsp), %rax
 2202      90000000 
 2203 00d8 4C8B08   		movq	(%rax), %r9
 2204              	.LVL332:
 978:fltk-1.3.4-1/jpeg/jquant2.c ****       /* work right to left in this row */
 2205              		.loc 1 978 0
 2206 00db 488B8424 		movq	152(%rsp), %rax
 2206      98000000 
 2207 00e3 8B5048   		movl	72(%rax), %edx
 2208 00e6 85D2     		testl	%edx, %edx
 2209 00e8 0F84BA02 		je	.L220
 2209      0000
 984:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->on_odd_row = FALSE; /* flip for next time */
 2210              		.loc 1 984 0
 2211 00ee 488B9C24 		movq	192(%rsp), %rbx
 2211      C0000000 
 999:fltk-1.3.4-1/jpeg/jquant2.c ****       /* curN holds the error propagated from the previous pixel on the
 2212              		.loc 1 999 0
 2213 00f6 8B8C24A4 		movl	164(%rsp), %ecx
 2213      000000
 983:fltk-1.3.4-1/jpeg/jquant2.c ****       errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 2214              		.loc 1 983 0
 2215 00fd BAFDFFFF 		movl	$-3, %edx
 2215      FF
 984:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->on_odd_row = FALSE; /* flip for next time */
 2216              		.loc 1 984 0
 2217 0102 48035840 		addq	64(%rax), %rbx
 980:fltk-1.3.4-1/jpeg/jquant2.c ****       outptr += width-1;
 2218              		.loc 1 980 0
 2219 0106 4C03B424 		addq	184(%rsp), %r14
 2219      B8000000 
 2220              	.LVL333:
 981:fltk-1.3.4-1/jpeg/jquant2.c ****       dir = -1;
 2221              		.loc 1 981 0
 2222 010e 4C038C24 		addq	200(%rsp), %r9
 2222      C8000000 
 2223              	.LVL334:
 985:fltk-1.3.4-1/jpeg/jquant2.c ****     } else {
 2224              		.loc 1 985 0
 2225 0116 C7404800 		movl	$0, 72(%rax)
 2225      000000
 982:fltk-1.3.4-1/jpeg/jquant2.c ****       dir3 = -3;
 2226              		.loc 1 982 0
 2227 011d 48C7C0FF 		movq	$-1, %rax
 2227      FFFFFF
 999:fltk-1.3.4-1/jpeg/jquant2.c ****       /* curN holds the error propagated from the previous pixel on the
 2228              		.loc 1 999 0
 2229 0124 85C9     		testl	%ecx, %ecx
 984:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->on_odd_row = FALSE; /* flip for next time */
 2230              		.loc 1 984 0
 2231 0126 48899C24 		movq	%rbx, 128(%rsp)
 2231      80000000 
 2232              	.LVL335:
 999:fltk-1.3.4-1/jpeg/jquant2.c ****       /* curN holds the error propagated from the previous pixel on the
 2233              		.loc 1 999 0
 2234 012e 0F84A802 		je	.L227
 2234      0000
 2235              	.L232:
 2236 0134 4863DA   		movslq	%edx, %rbx
 2237              	.LVL336:
 2238 0137 48894424 		movq	%rax, 48(%rsp)
 2238      30
 2239 013c 898C24A0 		movl	%ecx, 160(%rsp)
 2239      000000
 2240 0143 4C8D041B 		leaq	(%rbx,%rbx), %r8
 2241 0147 48895C24 		movq	%rbx, 24(%rsp)
 2241      18
 2242 014c C7442408 		movl	$0, 8(%rsp)
 2242      00000000 
 2243 0154 C7442404 		movl	$0, 4(%rsp)
 2243      00000000 
 2244 015c C7042400 		movl	$0, (%rsp)
 2244      000000
 2245 0163 31C9     		xorl	%ecx, %ecx
 2246              	.LVL337:
 2247 0165 498D5802 		leaq	2(%r8), %rbx
 2248 0169 C7442414 		movl	$0, 20(%rsp)
 2248      00000000 
 2249 0171 C7442410 		movl	$0, 16(%rsp)
 2249      00000000 
 2250 0179 C744240C 		movl	$0, 12(%rsp)
 2250      00000000 
 2251 0181 31D2     		xorl	%edx, %edx
 2252              	.LVL338:
 2253 0183 31C0     		xorl	%eax, %eax
 2254              	.LVL339:
 2255 0185 48895C24 		movq	%rbx, 32(%rsp)
 2255      20
 2256 018a 498D5804 		leaq	4(%r8), %rbx
 2257 018e 48895C24 		movq	%rbx, 40(%rsp)
 2257      28
 2258 0193 488B9C24 		movq	128(%rsp), %rbx
 2258      80000000 
 2259 019b E9B80000 		jmp	.L224
 2259      00
 2260              	.LVL340:
 2261              		.p2align 4,,10
 2262              		.p2align 3
 2263              	.L223:
 2264              	.LBB49:
1037:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 2265              		.loc 1 1037 0 discriminator 2
 2266 01a0 488B7C24 		movq	64(%rsp), %rdi
 2266      40
1034:fltk-1.3.4-1/jpeg/jquant2.c **** 	*outptr = (JSAMPLE) pixcode;
 2267              		.loc 1 1034 0 discriminator 2
 2268 01a5 83E801   		subl	$1, %eax
 2269              	.LVL341:
 2270              	.LBE49:
1076:fltk-1.3.4-1/jpeg/jquant2.c ****       outptr += dir;
 2271              		.loc 1 1076 0 discriminator 2
 2272 01a8 4C037424 		addq	24(%rsp), %r14
 2272      18
 2273              	.LVL342:
 2274              	.LBB50:
1035:fltk-1.3.4-1/jpeg/jquant2.c **** 	/* Compute representation error for this pixel */
 2275              		.loc 1 1035 0 discriminator 2
 2276 01ad 418801   		movb	%al, (%r9)
1037:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 2277              		.loc 1 1037 0 discriminator 2
 2278 01b0 4898     		cltq
 2279              	.LBE50:
1077:fltk-1.3.4-1/jpeg/jquant2.c ****       errorptr += dir3;		/* advance errorptr to current column */
 2280              		.loc 1 1077 0 discriminator 2
 2281 01b2 4C034C24 		addq	48(%rsp), %r9
 2281      30
 2282              	.LBB51:
1037:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 2283              		.loc 1 1037 0 discriminator 2
 2284 01b7 0FB61407 		movzbl	(%rdi,%rax), %edx
1039:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 2285              		.loc 1 1039 0 discriminator 2
 2286 01bb 488B7C24 		movq	80(%rsp), %rdi
 2286      50
1037:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 2287              		.loc 1 1037 0 discriminator 2
 2288 01c0 4129D5   		subl	%edx, %r13d
 2289              	.LVL343:
1038:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 2290              		.loc 1 1038 0 discriminator 2
 2291 01c3 488B5424 		movq	72(%rsp), %rdx
 2291      48
 2292              	.LBE51:
 2293              	.LBB52:
1048:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur0 += delta;		/* form error * 3 */
 2294              		.loc 1 1048 0 discriminator 2
 2295 01c8 438D4C2D 		leal	(%r13,%r13), %ecx
 2295      00
 2296              	.LBE52:
 2297              	.LBB53:
1038:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 2298              		.loc 1 1038 0 discriminator 2
 2299 01cd 0FB61402 		movzbl	(%rdx,%rax), %edx
1039:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 2300              		.loc 1 1039 0 discriminator 2
 2301 01d1 0FB60407 		movzbl	(%rdi,%rax), %eax
 2302              	.LVL344:
 2303              	.LBE53:
 2304              	.LBB54:
1052:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr0 = bnexterr;
 2305              		.loc 1 1052 0 discriminator 2
 2306 01d5 8B7C240C 		movl	12(%rsp), %edi
 2307              	.LBE54:
 2308              	.LBB55:
1039:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 2309              		.loc 1 1039 0 discriminator 2
 2310 01d9 29C5     		subl	%eax, %ebp
 2311              	.LVL345:
 2312              	.LBE55:
 2313              	.LBB56:
1050:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur0 += delta;		/* form error * 5 */
 2314              		.loc 1 1050 0 discriminator 2
 2315 01db 0FB70424 		movzwl	(%rsp), %eax
 2316              	.LBE56:
 2317              	.LBB57:
1038:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 2318              		.loc 1 1038 0 discriminator 2
 2319 01df 4129D4   		subl	%edx, %r12d
 2320              	.LVL346:
 2321              	.LBE57:
 2322              	.LBB58:
1049:fltk-1.3.4-1/jpeg/jquant2.c **** 	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 2323              		.loc 1 1049 0 discriminator 2
 2324 01e2 418D540D 		leal	0(%r13,%rcx), %edx
 2324      00
 2325              	.LVL347:
1056:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 += delta;		/* form error * 3 */
 2326              		.loc 1 1056 0 discriminator 2
 2327 01e7 438D3424 		leal	(%r12,%r12), %esi
1050:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur0 += delta;		/* form error * 5 */
 2328              		.loc 1 1050 0 discriminator 2
 2329 01eb 01D0     		addl	%edx, %eax
 2330 01ed 668903   		movw	%ax, (%rbx)
1051:fltk-1.3.4-1/jpeg/jquant2.c **** 	bpreverr0 = belowerr0 + cur0;
 2331              		.loc 1 1051 0 discriminator 2
 2332 01f0 8D0411   		leal	(%rcx,%rdx), %eax
 2333              	.LVL348:
1058:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 += delta;		/* form error * 5 */
 2334              		.loc 1 1058 0 discriminator 2
 2335 01f3 0FB75424 		movzwl	4(%rsp), %edx
 2335      04
1052:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr0 = bnexterr;
 2336              		.loc 1 1052 0 discriminator 2
 2337 01f8 01C7     		addl	%eax, %edi
1054:fltk-1.3.4-1/jpeg/jquant2.c **** 	bnexterr = cur1;	/* Process component 1 */
 2338              		.loc 1 1054 0 discriminator 2
 2339 01fa 01C8     		addl	%ecx, %eax
 2340              	.LVL349:
1057:fltk-1.3.4-1/jpeg/jquant2.c **** 	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 2341              		.loc 1 1057 0 discriminator 2
 2342 01fc 418D0C34 		leal	(%r12,%rsi), %ecx
 2343              	.LVL350:
1052:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr0 = bnexterr;
 2344              		.loc 1 1052 0 discriminator 2
 2345 0200 893C24   		movl	%edi, (%rsp)
 2346              	.LVL351:
1060:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr1 = bnexterr;
 2347              		.loc 1 1060 0 discriminator 2
 2348 0203 8B7C2410 		movl	16(%rsp), %edi
 2349              	.LVL352:
1058:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 += delta;		/* form error * 5 */
 2350              		.loc 1 1058 0 discriminator 2
 2351 0207 01CA     		addl	%ecx, %edx
 2352 0209 66895302 		movw	%dx, 2(%rbx)
1059:fltk-1.3.4-1/jpeg/jquant2.c **** 	bpreverr1 = belowerr1 + cur1;
 2353              		.loc 1 1059 0 discriminator 2
 2354 020d 8D140E   		leal	(%rsi,%rcx), %edx
 2355              	.LVL353:
1064:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 += delta;		/* form error * 3 */
 2356              		.loc 1 1064 0 discriminator 2
 2357 0210 8D4C2D00 		leal	(%rbp,%rbp), %ecx
1060:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr1 = bnexterr;
 2358              		.loc 1 1060 0 discriminator 2
 2359 0214 01D7     		addl	%edx, %edi
1062:fltk-1.3.4-1/jpeg/jquant2.c **** 	bnexterr = cur2;	/* Process component 2 */
 2360              		.loc 1 1062 0 discriminator 2
 2361 0216 01F2     		addl	%esi, %edx
 2362              	.LVL354:
1065:fltk-1.3.4-1/jpeg/jquant2.c **** 	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 2363              		.loc 1 1065 0 discriminator 2
 2364 0218 8D740D00 		leal	0(%rbp,%rcx), %esi
 2365              	.LVL355:
1060:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr1 = bnexterr;
 2366              		.loc 1 1060 0 discriminator 2
 2367 021c 897C2404 		movl	%edi, 4(%rsp)
 2368              	.LVL356:
1066:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 += delta;		/* form error * 5 */
 2369              		.loc 1 1066 0 discriminator 2
 2370 0220 0FB77C24 		movzwl	8(%rsp), %edi
 2370      08
 2371              	.LVL357:
 2372 0225 01F7     		addl	%esi, %edi
1067:fltk-1.3.4-1/jpeg/jquant2.c **** 	bpreverr2 = belowerr2 + cur2;
 2373              		.loc 1 1067 0 discriminator 2
 2374 0227 01CE     		addl	%ecx, %esi
 2375              	.LVL358:
1066:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 += delta;		/* form error * 5 */
 2376              		.loc 1 1066 0 discriminator 2
 2377 0229 66897B04 		movw	%di, 4(%rbx)
1068:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr2 = bnexterr;
 2378              		.loc 1 1068 0 discriminator 2
 2379 022d 8B7C2414 		movl	20(%rsp), %edi
1070:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 2380              		.loc 1 1070 0 discriminator 2
 2381 0231 01F1     		addl	%esi, %ecx
 2382              	.LVL359:
 2383 0233 4C01C3   		addq	%r8, %rbx
 2384              	.LVL360:
1068:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr2 = bnexterr;
 2385              		.loc 1 1068 0 discriminator 2
 2386 0236 01F7     		addl	%esi, %edi
 2387              	.LBE58:
 999:fltk-1.3.4-1/jpeg/jquant2.c ****       /* curN holds the error propagated from the previous pixel on the
 2388              		.loc 1 999 0 discriminator 2
 2389 0238 83AC24A0 		subl	$1, 160(%rsp)
 2389      00000001 
 2390              	.LVL361:
 2391              	.LBB59:
1068:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr2 = bnexterr;
 2392              		.loc 1 1068 0 discriminator 2
 2393 0240 897C2408 		movl	%edi, 8(%rsp)
 2394              	.LVL362:
 2395              	.LBE59:
 999:fltk-1.3.4-1/jpeg/jquant2.c ****       /* curN holds the error propagated from the previous pixel on the
 2396              		.loc 1 999 0 discriminator 2
 2397 0244 0F84EE00 		je	.L231
 2397      0000
 2398              	.LBB60:
1069:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 += delta;		/* form error * 7 */
 2399              		.loc 1 1069 0
 2400 024a 896C2414 		movl	%ebp, 20(%rsp)
1061:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 += delta;		/* form error * 7 */
 2401              		.loc 1 1061 0
 2402 024e 44896424 		movl	%r12d, 16(%rsp)
 2402      10
1053:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur0 += delta;		/* form error * 7 */
 2403              		.loc 1 1053 0
 2404 0253 44896C24 		movl	%r13d, 12(%rsp)
 2404      0C
 2405              	.LVL363:
 2406              	.L224:
 2407              	.LBE60:
1010:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Limit the error using transfer function set by init_error_limit.
 2408              		.loc 1 1010 0
 2409 0258 488B7C24 		movq	40(%rsp), %rdi
 2409      28
 2410 025d 0FBF343B 		movswl	(%rbx,%rdi), %esi
1015:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 = error_limit[cur2];
 2411              		.loc 1 1015 0
 2412 0261 488B7C24 		movq	32(%rsp), %rdi
 2412      20
1010:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Limit the error using transfer function set by init_error_limit.
 2413              		.loc 1 1010 0
 2414 0266 8D4C3108 		leal	8(%rcx,%rsi), %ecx
 2415              	.LVL364:
1014:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 = error_limit[cur1];
 2416              		.loc 1 1014 0
 2417 026a 420FBF34 		movswl	(%rbx,%r8), %esi
 2417      03
1016:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
 2418              		.loc 1 1016 0
 2419 026f C1F904   		sarl	$4, %ecx
 2420              	.LVL365:
1014:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 = error_limit[cur1];
 2421              		.loc 1 1014 0
 2422 0272 8D443008 		leal	8(%rax,%rsi), %eax
 2423              	.LVL366:
1015:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 = error_limit[cur2];
 2424              		.loc 1 1015 0
 2425 0276 0FBF343B 		movswl	(%rbx,%rdi), %esi
1014:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 = error_limit[cur1];
 2426              		.loc 1 1014 0
 2427 027a C1F804   		sarl	$4, %eax
 2428 027d 4898     		cltq
 2429              	.LVL367:
1015:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 = error_limit[cur2];
 2430              		.loc 1 1015 0
 2431 027f 8D743208 		leal	8(%rdx,%rsi), %esi
1016:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
 2432              		.loc 1 1016 0
 2433 0283 4863D1   		movslq	%ecx, %rdx
 2434              	.LVL368:
1024:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 = GETJSAMPLE(range_limit[cur1]);
 2435              		.loc 1 1024 0
 2436 0286 410FB60E 		movzbl	(%r14), %ecx
 2437              	.LVL369:
 2438 028a 41030C83 		addl	(%r11,%rax,4), %ecx
1015:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 = error_limit[cur2];
 2439              		.loc 1 1015 0
 2440 028e C1FE04   		sarl	$4, %esi
 2441 0291 4863F6   		movslq	%esi, %rsi
 2442              	.LVL370:
1024:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 = GETJSAMPLE(range_limit[cur1]);
 2443              		.loc 1 1024 0
 2444 0294 4863C1   		movslq	%ecx, %rax
 2445 0297 450FB62C 		movzbl	(%r10,%rax), %r13d
 2445      02
 2446              	.LVL371:
1025:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 = GETJSAMPLE(range_limit[cur2]);
 2447              		.loc 1 1025 0
 2448 029c 410FB646 		movzbl	1(%r14), %eax
 2448      01
 2449 02a1 410304B3 		addl	(%r11,%rsi,4), %eax
 2450              	.LVL372:
1028:fltk-1.3.4-1/jpeg/jquant2.c ****       /* If we have not seen this color before, find nearest colormap */
 2451              		.loc 1 1028 0
 2452 02a5 4489EE   		movl	%r13d, %esi
1025:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 = GETJSAMPLE(range_limit[cur2]);
 2453              		.loc 1 1025 0
 2454 02a8 4898     		cltq
1028:fltk-1.3.4-1/jpeg/jquant2.c ****       /* If we have not seen this color before, find nearest colormap */
 2455              		.loc 1 1028 0
 2456 02aa C1FE03   		sarl	$3, %esi
1025:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 = GETJSAMPLE(range_limit[cur2]);
 2457              		.loc 1 1025 0
 2458 02ad 450FB624 		movzbl	(%r10,%rax), %r12d
 2458      02
 2459              	.LVL373:
1026:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Index into the cache with adjusted pixel value */
 2460              		.loc 1 1026 0
 2461 02b2 410FB646 		movzbl	2(%r14), %eax
 2461      02
1028:fltk-1.3.4-1/jpeg/jquant2.c ****       /* If we have not seen this color before, find nearest colormap */
 2462              		.loc 1 1028 0
 2463 02b7 4863FE   		movslq	%esi, %rdi
1026:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Index into the cache with adjusted pixel value */
 2464              		.loc 1 1026 0
 2465 02ba 41030493 		addl	(%r11,%rdx,4), %eax
 2466              	.LVL374:
1028:fltk-1.3.4-1/jpeg/jquant2.c ****       /* If we have not seen this color before, find nearest colormap */
 2467              		.loc 1 1028 0
 2468 02be 4489E2   		movl	%r12d, %edx
1026:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Index into the cache with adjusted pixel value */
 2469              		.loc 1 1026 0
 2470 02c1 4898     		cltq
1028:fltk-1.3.4-1/jpeg/jquant2.c ****       /* If we have not seen this color before, find nearest colormap */
 2471              		.loc 1 1028 0
 2472 02c3 C1FA02   		sarl	$2, %edx
1026:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Index into the cache with adjusted pixel value */
 2473              		.loc 1 1026 0
 2474 02c6 410FB62C 		movzbl	(%r10,%rax), %ebp
 2474      02
 2475              	.LVL375:
1028:fltk-1.3.4-1/jpeg/jquant2.c ****       /* If we have not seen this color before, find nearest colormap */
 2476              		.loc 1 1028 0
 2477 02cb 4863C2   		movslq	%edx, %rax
 2478 02ce 48C1E006 		salq	$6, %rax
 2479 02d2 89E9     		movl	%ebp, %ecx
 2480 02d4 C1F903   		sarl	$3, %ecx
 2481              	.LVL376:
 2482 02d7 4C63F9   		movslq	%ecx, %r15
 2483 02da 4E8D3C78 		leaq	(%rax,%r15,2), %r15
 2484 02de 488B4424 		movq	56(%rsp), %rax
 2484      38
 2485              	.LVL377:
 2486 02e3 4C033CF8 		addq	(%rax,%rdi,8), %r15
1031:fltk-1.3.4-1/jpeg/jquant2.c **** 	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
 2487              		.loc 1 1031 0
 2488 02e7 410FB707 		movzwl	(%r15), %eax
 2489 02eb 6685C0   		testw	%ax, %ax
 2490 02ee 0F85ACFE 		jne	.L223
 2490      FFFF
1032:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Now emit the colormap index for this cell */
 2491              		.loc 1 1032 0
 2492 02f4 488BBC24 		movq	136(%rsp), %rdi
 2492      88000000 
 2493              	.LVL378:
 2494 02fc 4C894424 		movq	%r8, 112(%rsp)
 2494      70
 2495 0301 4C894C24 		movq	%r9, 104(%rsp)
 2495      68
 2496 0306 4C895C24 		movq	%r11, 96(%rsp)
 2496      60
 2497 030b 4C895424 		movq	%r10, 88(%rsp)
 2497      58
 2498 0310 E8000000 		call	fill_inverse_cmap
 2498      00
 2499              	.LVL379:
 2500 0315 410FB707 		movzwl	(%r15), %eax
 2501 0319 4C8B4424 		movq	112(%rsp), %r8
 2501      70
 2502 031e 4C8B4C24 		movq	104(%rsp), %r9
 2502      68
 2503 0323 4C8B5C24 		movq	96(%rsp), %r11
 2503      60
 2504 0328 4C8B5424 		movq	88(%rsp), %r10
 2504      58
 2505 032d E96EFEFF 		jmp	.L223
 2505      FF
 2506              	.LVL380:
 2507              		.p2align 4,,10
 2508 0332 660F1F44 		.p2align 3
 2508      0000
 2509              	.L231:
 2510 0338 4C89C0   		movq	%r8, %rax
 2511              	.LVL381:
 2512 033b 0FB75424 		movzwl	4(%rsp), %edx
 2512      04
 2513              	.LVL382:
 2514 0340 0FB77C24 		movzwl	8(%rsp), %edi
 2514      08
 2515              	.LVL383:
 2516 0345 480FAF84 		imulq	176(%rsp), %rax
 2516      24B00000 
 2516      00
 2517 034e 48018424 		addq	%rax, 128(%rsp)
 2517      80000000 
 2518 0356 0FB70424 		movzwl	(%rsp), %eax
 2519              	.LVL384:
 2520              	.L222:
1084:fltk-1.3.4-1/jpeg/jquant2.c ****     errorptr[1] = (FSERROR) bpreverr1;
 2521              		.loc 1 1084 0 discriminator 2
 2522 035a 488B9C24 		movq	128(%rsp), %rbx
 2522      80000000 
 2523 0362 48834424 		addq	$8, 120(%rsp)
 2523      7808
 2524 0368 48838424 		addq	$8, 144(%rsp)
 2524      90000000 
 2524      08
 2525 0371 668903   		movw	%ax, (%rbx)
 2526 0374 488B4424 		movq	120(%rsp), %rax
 2526      78
 975:fltk-1.3.4-1/jpeg/jquant2.c ****     inptr = input_buf[row];
 2527              		.loc 1 975 0 discriminator 2
 2528 0379 483B8424 		cmpq	168(%rsp), %rax
 2528      A8000000 
1085:fltk-1.3.4-1/jpeg/jquant2.c ****     errorptr[2] = (FSERROR) bpreverr2;
 2529              		.loc 1 1085 0 discriminator 2
 2530 0381 66895302 		movw	%dx, 2(%rbx)
1086:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 2531              		.loc 1 1086 0 discriminator 2
 2532 0385 66897B04 		movw	%di, 4(%rbx)
 975:fltk-1.3.4-1/jpeg/jquant2.c ****     inptr = input_buf[row];
 2533              		.loc 1 975 0 discriminator 2
 2534 0389 0F8539FD 		jne	.L225
 2534      FFFF
 2535              	.LVL385:
 2536              	.L218:
1088:fltk-1.3.4-1/jpeg/jquant2.c **** 
 2537              		.loc 1 1088 0
 2538 038f 4881C4D8 		addq	$216, %rsp
 2538      000000
 2539              		.cfi_remember_state
 2540              		.cfi_def_cfa_offset 56
 2541 0396 5B       		popq	%rbx
 2542              		.cfi_def_cfa_offset 48
 2543 0397 5D       		popq	%rbp
 2544              		.cfi_def_cfa_offset 40
 2545 0398 415C     		popq	%r12
 2546              		.cfi_def_cfa_offset 32
 2547 039a 415D     		popq	%r13
 2548              		.cfi_def_cfa_offset 24
 2549 039c 415E     		popq	%r14
 2550              		.cfi_def_cfa_offset 16
 2551 039e 415F     		popq	%r15
 2552              		.cfi_def_cfa_offset 8
 2553 03a0 C3       		ret
 2554              	.LVL386:
 2555              		.p2align 4,,10
 2556 03a1 0F1F8000 		.p2align 3
 2556      000000
 2557              	.L220:
 2558              		.cfi_restore_state
 990:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->on_odd_row = TRUE; /* flip for next time */
 2559              		.loc 1 990 0
 2560 03a8 488B8424 		movq	152(%rsp), %rax
 2560      98000000 
 999:fltk-1.3.4-1/jpeg/jquant2.c ****       /* curN holds the error propagated from the previous pixel on the
 2561              		.loc 1 999 0
 2562 03b0 8B8C24A4 		movl	164(%rsp), %ecx
 2562      000000
 989:fltk-1.3.4-1/jpeg/jquant2.c ****       errorptr = cquantize->fserrors; /* => entry before first real column */
 2563              		.loc 1 989 0
 2564 03b7 BA030000 		movl	$3, %edx
 2564      00
 990:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->on_odd_row = TRUE; /* flip for next time */
 2565              		.loc 1 990 0
 2566 03bc 488B5840 		movq	64(%rax), %rbx
 999:fltk-1.3.4-1/jpeg/jquant2.c ****       /* curN holds the error propagated from the previous pixel on the
 2567              		.loc 1 999 0
 2568 03c0 85C9     		testl	%ecx, %ecx
 991:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 2569              		.loc 1 991 0
 2570 03c2 C7404801 		movl	$1, 72(%rax)
 2570      000000
 988:fltk-1.3.4-1/jpeg/jquant2.c ****       dir3 = 3;
 2571              		.loc 1 988 0
 2572 03c9 B8010000 		movl	$1, %eax
 2572      00
 990:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->on_odd_row = TRUE; /* flip for next time */
 2573              		.loc 1 990 0
 2574 03ce 48899C24 		movq	%rbx, 128(%rsp)
 2574      80000000 
 2575              	.LVL387:
 999:fltk-1.3.4-1/jpeg/jquant2.c ****       /* curN holds the error propagated from the previous pixel on the
 2576              		.loc 1 999 0
 2577 03d6 0F8558FD 		jne	.L232
 2577      FFFF
 2578              	.L227:
 2579 03dc 31FF     		xorl	%edi, %edi
 2580 03de 31D2     		xorl	%edx, %edx
 2581              	.LVL388:
 2582 03e0 31C0     		xorl	%eax, %eax
 2583              	.LVL389:
 2584 03e2 E973FFFF 		jmp	.L222
 2584      FF
 2585              		.cfi_endproc
 2586              	.LFE72:
 2588              		.section	.text.unlikely.pass2_fs_dither
 2589              	.LCOLDE8:
 2590              		.section	.text.pass2_fs_dither
 2591              	.LHOTE8:
 2592              		.section	.text.unlikely.finish_pass1,"ax",@progbits
 2593              	.LCOLDB9:
 2594              		.section	.text.finish_pass1,"ax",@progbits
 2595              	.LHOTB9:
 2596              		.p2align 4,,15
 2598              	finish_pass1:
 2599              	.LFB74:
1145:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 2600              		.loc 1 1145 0
 2601              		.cfi_startproc
 2602              	.LVL390:
 2603 0000 4157     		pushq	%r15
 2604              		.cfi_def_cfa_offset 16
 2605              		.cfi_offset 15, -16
 2606 0002 4156     		pushq	%r14
 2607              		.cfi_def_cfa_offset 24
 2608              		.cfi_offset 14, -24
 2609              	.LBB71:
 2610              	.LBB72:
 548:fltk-1.3.4-1/jpeg/jquant2.c ****     ((j_common_ptr) cinfo, JPOOL_IMAGE, desired_colors * SIZEOF(box));
 2611              		.loc 1 548 0
 2612 0004 BE010000 		movl	$1, %esi
 2612      00
 2613              	.LBE72:
 2614              	.LBE71:
1145:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 2615              		.loc 1 1145 0
 2616 0009 4155     		pushq	%r13
 2617              		.cfi_def_cfa_offset 32
 2618              		.cfi_offset 13, -32
 2619 000b 4154     		pushq	%r12
 2620              		.cfi_def_cfa_offset 40
 2621              		.cfi_offset 12, -40
 2622 000d 4989FD   		movq	%rdi, %r13
 2623 0010 55       		pushq	%rbp
 2624              		.cfi_def_cfa_offset 48
 2625              		.cfi_offset 6, -48
 2626 0011 53       		pushq	%rbx
 2627              		.cfi_def_cfa_offset 56
 2628              		.cfi_offset 3, -56
 2629 0012 4883EC58 		subq	$88, %rsp
 2630              		.cfi_def_cfa_offset 144
1146:fltk-1.3.4-1/jpeg/jquant2.c **** 
 2631              		.loc 1 1146 0
 2632 0016 488B8790 		movq	656(%rdi), %rax
 2632      020000
1145:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 2633              		.loc 1 1145 0
 2634 001d 48897C24 		movq	%rdi, 48(%rsp)
 2634      30
1146:fltk-1.3.4-1/jpeg/jquant2.c **** 
 2635              		.loc 1 1146 0
 2636 0022 4889C3   		movq	%rax, %rbx
 2637 0025 48894424 		movq	%rax, 72(%rsp)
 2637      48
 2638              	.LVL391:
1149:fltk-1.3.4-1/jpeg/jquant2.c ****   select_colors(cinfo, cquantize->desired);
 2639              		.loc 1 1149 0
 2640 002a 488B4020 		movq	32(%rax), %rax
 2641              	.LVL392:
 2642 002e 488987A0 		movq	%rax, 160(%rdi)
 2642      000000
1150:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Force next pass to zero the color index table */
 2643              		.loc 1 1150 0
 2644 0035 48634328 		movslq	40(%rbx), %rax
 2645 0039 4189C7   		movl	%eax, %r15d
 2646 003c 8944242C 		movl	%eax, 44(%rsp)
 2647              	.LVL393:
 2648              	.LBB87:
 2649              	.LBB85:
 548:fltk-1.3.4-1/jpeg/jquant2.c ****     ((j_common_ptr) cinfo, JPOOL_IMAGE, desired_colors * SIZEOF(box));
 2650              		.loc 1 548 0
 2651 0040 488D1480 		leaq	(%rax,%rax,4), %rdx
 2652 0044 488B4708 		movq	8(%rdi), %rax
 2653              	.LVL394:
 2654 0048 48C1E203 		salq	$3, %rdx
 2655 004c FF10     		call	*(%rax)
 2656              	.LVL395:
 552:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 2657              		.loc 1 552 0
 2658 004e C7000000 		movl	$0, (%rax)
 2658      0000
 553:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c1min = 0;
 2659              		.loc 1 553 0
 2660 0054 C740041F 		movl	$31, 4(%rax)
 2660      000000
 559:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Perform median-cut to produce final box list */
 2661              		.loc 1 559 0
 2662 005b 4889C6   		movq	%rax, %rsi
 554:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 2663              		.loc 1 554 0
 2664 005e C7400800 		movl	$0, 8(%rax)
 2664      000000
 555:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c2min = 0;
 2665              		.loc 1 555 0
 2666 0065 C7400C3F 		movl	$63, 12(%rax)
 2666      000000
 548:fltk-1.3.4-1/jpeg/jquant2.c ****     ((j_common_ptr) cinfo, JPOOL_IMAGE, desired_colors * SIZEOF(box));
 2667              		.loc 1 548 0
 2668 006c 4889C5   		movq	%rax, %rbp
 2669              	.LVL396:
 556:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 2670              		.loc 1 556 0
 2671 006f C7401000 		movl	$0, 16(%rax)
 2671      000000
 557:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Shrink it to actually-used volume and set its statistics */
 2672              		.loc 1 557 0
 2673 0076 C740141F 		movl	$31, 20(%rax)
 2673      000000
 559:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Perform median-cut to produce final box list */
 2674              		.loc 1 559 0
 2675 007d 498BBD90 		movq	656(%r13), %rdi
 2675      020000
 2676 0084 E8000000 		call	update_box.isra.0
 2676      00
 2677              	.LVL397:
 2678              	.LBB73:
 2679              	.LBB74:
 433:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Select box to split.
 2680              		.loc 1 433 0
 2681 0089 4183FF01 		cmpl	$1, %r15d
 2682 008d 0F8E6903 		jle	.L256
 2682      0000
 2683 0093 488D5D28 		leaq	40(%rbp), %rbx
 2684              	.LVL398:
 2685 0097 41BC0100 		movl	$1, %r12d
 2685      0000
 2686              	.LVL399:
 2687              	.L245:
 437:fltk-1.3.4-1/jpeg/jquant2.c ****       b1 = find_biggest_color_pop(boxlist, numboxes);
 2688              		.loc 1 437 0
 2689 009d 438D0424 		leal	(%r12,%r12), %eax
 2690 00a1 3944242C 		cmpl	%eax, 44(%rsp)
 2691 00a5 BE000000 		movl	$0, %esi
 2691      00
 2692 00aa 4889E8   		movq	%rbp, %rax
 2693 00ad 0F8C2A03 		jl	.L235
 2693      0000
 2694              	.LVL400:
 2695 00b3 31C9     		xorl	%ecx, %ecx
 2696              	.LVL401:
 2697              		.p2align 4,,10
 2698 00b5 0F1F00   		.p2align 3
 2699              	.L237:
 2700              	.LBB75:
 2701              	.LBB76:
 284:fltk-1.3.4-1/jpeg/jquant2.c ****       which = boxp;
 2702              		.loc 1 284 0
 2703 00b8 488B5020 		movq	32(%rax), %rdx
 2704 00bc 4839CA   		cmpq	%rcx, %rdx
 2705 00bf 7E0D     		jle	.L236
 2706 00c1 48837818 		cmpq	$0, 24(%rax)
 2706      00
 2707 00c6 480F4FF0 		cmovg	%rax, %rsi
 2708              	.LVL402:
 2709 00ca 480F4FCA 		cmovg	%rdx, %rcx
 2710              	.LVL403:
 2711              	.L236:
 283:fltk-1.3.4-1/jpeg/jquant2.c ****     if (boxp->colorcount > maxc && boxp->volume > 0) {
 2712              		.loc 1 283 0
 2713 00ce 4883C028 		addq	$40, %rax
 2714              	.LVL404:
 2715 00d2 4839D8   		cmpq	%rbx, %rax
 2716 00d5 75E1     		jne	.L237
 2717              	.LVL405:
 2718              	.L238:
 2719              	.LBE76:
 2720              	.LBE75:
 442:fltk-1.3.4-1/jpeg/jquant2.c ****       break;
 2721              		.loc 1 442 0
 2722 00d7 4885F6   		testq	%rsi, %rsi
 2723 00da 0F84E400 		je	.L241
 2723      0000
 2724              	.LVL406:
 446:fltk-1.3.4-1/jpeg/jquant2.c ****     b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 2725              		.loc 1 446 0
 2726 00e0 8B4604   		movl	4(%rsi), %eax
 2727 00e3 894304   		movl	%eax, 4(%rbx)
 2728 00e6 8B460C   		movl	12(%rsi), %eax
 2729 00e9 89430C   		movl	%eax, 12(%rbx)
 2730 00ec 8B4614   		movl	20(%rsi), %eax
 2731 00ef 894314   		movl	%eax, 20(%rbx)
 447:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Choose which axis to split the box on.
 2732              		.loc 1 447 0
 2733 00f2 8B06     		movl	(%rsi), %eax
 2734 00f4 8903     		movl	%eax, (%rbx)
 2735 00f6 8B4608   		movl	8(%rsi), %eax
 2736 00f9 894308   		movl	%eax, 8(%rbx)
 2737 00fc 8B4610   		movl	16(%rsi), %eax
 2738 00ff 894310   		movl	%eax, 16(%rbx)
 453:fltk-1.3.4-1/jpeg/jquant2.c ****     c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 2739              		.loc 1 453 0
 2740 0102 448B5E0C 		movl	12(%rsi), %r11d
 2741 0106 8B4E08   		movl	8(%rsi), %ecx
 452:fltk-1.3.4-1/jpeg/jquant2.c ****     c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 2742              		.loc 1 452 0
 2743 0109 448B5604 		movl	4(%rsi), %r10d
 2744 010d 8B16     		movl	(%rsi), %edx
 454:fltk-1.3.4-1/jpeg/jquant2.c ****     /* We want to break any ties in favor of green, then red, blue last.
 2745              		.loc 1 454 0
 2746 010f 448B4E14 		movl	20(%rsi), %r9d
 453:fltk-1.3.4-1/jpeg/jquant2.c ****     c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 2747              		.loc 1 453 0
 2748 0113 4489D8   		movl	%r11d, %eax
 2749 0116 29C8     		subl	%ecx, %eax
 452:fltk-1.3.4-1/jpeg/jquant2.c ****     c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 2750              		.loc 1 452 0
 2751 0118 4589D0   		movl	%r10d, %r8d
 453:fltk-1.3.4-1/jpeg/jquant2.c ****     c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 2752              		.loc 1 453 0
 2753 011b 8D3CC500 		leal	0(,%rax,8), %edi
 2753      000000
 452:fltk-1.3.4-1/jpeg/jquant2.c ****     c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 2754              		.loc 1 452 0
 2755 0122 4129D0   		subl	%edx, %r8d
 2756 0125 41C1E004 		sall	$4, %r8d
 2757              	.LVL407:
 453:fltk-1.3.4-1/jpeg/jquant2.c ****     c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 2758              		.loc 1 453 0
 2759 0129 448D3487 		leal	(%rdi,%rax,4), %r14d
 2760              	.LVL408:
 454:fltk-1.3.4-1/jpeg/jquant2.c ****     /* We want to break any ties in favor of green, then red, blue last.
 2761              		.loc 1 454 0
 2762 012d 8B4610   		movl	16(%rsi), %eax
 2763 0130 4489CF   		movl	%r9d, %edi
 2764 0133 29C7     		subl	%eax, %edi
 2765 0135 C1E703   		sall	$3, %edi
 2766              	.LVL409:
 460:fltk-1.3.4-1/jpeg/jquant2.c ****     if (c2 > cmax) { n = 2; }
 2767              		.loc 1 460 0
 2768 0138 4539F0   		cmpl	%r14d, %r8d
 2769 013b 7E53     		jle	.L272
 2770              	.LVL410:
 461:fltk-1.3.4-1/jpeg/jquant2.c **** #else
 2771              		.loc 1 461 0
 2772 013d 4139F8   		cmpl	%edi, %r8d
 2773 0140 7C6B     		jl	.L243
 2774              	.LVL411:
 475:fltk-1.3.4-1/jpeg/jquant2.c ****       b1->c0max = lb;
 2775              		.loc 1 475 0
 2776 0142 418D0412 		leal	(%r10,%rdx), %eax
 2777 0146 89C2     		movl	%eax, %edx
 2778 0148 C1EA1F   		shrl	$31, %edx
 2779 014b 01D0     		addl	%edx, %eax
 2780 014d D1F8     		sarl	%eax
 2781              	.LVL412:
 476:fltk-1.3.4-1/jpeg/jquant2.c ****       b2->c0min = lb+1;
 2782              		.loc 1 476 0
 2783 014f 894604   		movl	%eax, 4(%rsi)
 477:fltk-1.3.4-1/jpeg/jquant2.c ****       break;
 2784              		.loc 1 477 0
 2785 0152 83C001   		addl	$1, %eax
 2786              	.LVL413:
 2787 0155 8903     		movl	%eax, (%rbx)
 2788              	.LVL414:
 2789              	.L244:
 491:fltk-1.3.4-1/jpeg/jquant2.c ****     update_box(cinfo, b2);
 2790              		.loc 1 491 0
 2791 0157 498BBD90 		movq	656(%r13), %rdi
 2791      020000
 2792              	.LVL415:
 493:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 2793              		.loc 1 493 0
 2794 015e 4183C401 		addl	$1, %r12d
 2795              	.LVL416:
 491:fltk-1.3.4-1/jpeg/jquant2.c ****     update_box(cinfo, b2);
 2796              		.loc 1 491 0
 2797 0162 E8000000 		call	update_box.isra.0
 2797      00
 2798              	.LVL417:
 492:fltk-1.3.4-1/jpeg/jquant2.c ****     numboxes++;
 2799              		.loc 1 492 0
 2800 0167 498BBD90 		movq	656(%r13), %rdi
 2800      020000
 2801 016e 4889DE   		movq	%rbx, %rsi
 2802 0171 4883C328 		addq	$40, %rbx
 2803              	.LVL418:
 2804 0175 E8000000 		call	update_box.isra.0
 2804      00
 2805              	.LVL419:
 433:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Select box to split.
 2806              		.loc 1 433 0
 2807 017a 44396424 		cmpl	%r12d, 44(%rsp)
 2807      2C
 2808 017f 0F8518FF 		jne	.L245
 2808      FFFF
 2809 0185 EB4B     		jmp	.L234
 2810              	.LVL420:
 2811 0187 660F1F84 		.p2align 4,,10
 2811      00000000 
 2811      00
 2812              		.p2align 3
 2813              	.L272:
 461:fltk-1.3.4-1/jpeg/jquant2.c **** #else
 2814              		.loc 1 461 0
 2815 0190 4139FE   		cmpl	%edi, %r14d
 2816 0193 7C18     		jl	.L243
 2817              	.LVL421:
 480:fltk-1.3.4-1/jpeg/jquant2.c ****       b1->c1max = lb;
 2818              		.loc 1 480 0
 2819 0195 418D040B 		leal	(%r11,%rcx), %eax
 2820 0199 89C2     		movl	%eax, %edx
 2821 019b C1EA1F   		shrl	$31, %edx
 2822 019e 01D0     		addl	%edx, %eax
 2823 01a0 D1F8     		sarl	%eax
 2824              	.LVL422:
 481:fltk-1.3.4-1/jpeg/jquant2.c ****       b2->c1min = lb+1;
 2825              		.loc 1 481 0
 2826 01a2 89460C   		movl	%eax, 12(%rsi)
 482:fltk-1.3.4-1/jpeg/jquant2.c ****       break;
 2827              		.loc 1 482 0
 2828 01a5 83C001   		addl	$1, %eax
 2829              	.LVL423:
 2830 01a8 894308   		movl	%eax, 8(%rbx)
 2831              	.LVL424:
 2832 01ab EBAA     		jmp	.L244
 2833              	.LVL425:
 2834              	.L243:
 485:fltk-1.3.4-1/jpeg/jquant2.c ****       b1->c2max = lb;
 2835              		.loc 1 485 0
 2836 01ad 4401C8   		addl	%r9d, %eax
 2837 01b0 89C2     		movl	%eax, %edx
 2838 01b2 C1EA1F   		shrl	$31, %edx
 2839 01b5 01D0     		addl	%edx, %eax
 2840 01b7 D1F8     		sarl	%eax
 2841              	.LVL426:
 486:fltk-1.3.4-1/jpeg/jquant2.c ****       b2->c2min = lb+1;
 2842              		.loc 1 486 0
 2843 01b9 894614   		movl	%eax, 20(%rsi)
 487:fltk-1.3.4-1/jpeg/jquant2.c ****       break;
 2844              		.loc 1 487 0
 2845 01bc 83C001   		addl	$1, %eax
 2846              	.LVL427:
 2847 01bf 894310   		movl	%eax, 16(%rbx)
 2848              	.LVL428:
 2849 01c2 EB93     		jmp	.L244
 2850              	.LVL429:
 2851              	.L241:
 2852              	.LBE74:
 2853              	.LBE73:
 563:fltk-1.3.4-1/jpeg/jquant2.c ****     compute_color(cinfo, & boxlist[i], i);
 2854              		.loc 1 563 0
 2855 01c4 4585E4   		testl	%r12d, %r12d
 2856 01c7 44896424 		movl	%r12d, 44(%rsp)
 2856      2C
 2857 01cc 0F8EB401 		jle	.L246
 2857      0000
 2858              	.LVL430:
 2859              	.L234:
 2860 01d2 48896C24 		movq	%rbp, 56(%rsp)
 2860      38
 2861 01d7 48C74424 		movq	$0, 64(%rsp)
 2861      40000000 
 2861      00
 2862              	.LVL431:
 2863              	.L255:
 2864              	.LBB80:
 2865              	.LBB81:
 506:fltk-1.3.4-1/jpeg/jquant2.c ****   histptr histp;
 2866              		.loc 1 506 0
 2867 01e0 488B4424 		movq	48(%rsp), %rax
 2867      30
 516:fltk-1.3.4-1/jpeg/jquant2.c ****   c1min = boxp->c1min;  c1max = boxp->c1max;
 2868              		.loc 1 516 0
 2869 01e5 488B7C24 		movq	56(%rsp), %rdi
 2869      38
 506:fltk-1.3.4-1/jpeg/jquant2.c ****   histptr histp;
 2870              		.loc 1 506 0
 2871 01ea 488B8090 		movq	656(%rax), %rax
 2871      020000
 517:fltk-1.3.4-1/jpeg/jquant2.c ****   c2min = boxp->c2min;  c2max = boxp->c2max;
 2872              		.loc 1 517 0
 2873 01f1 8B7708   		movl	8(%rdi), %esi
 518:fltk-1.3.4-1/jpeg/jquant2.c ****   
 2874              		.loc 1 518 0
 2875 01f4 448B7710 		movl	16(%rdi), %r14d
 2876 01f8 448B7F14 		movl	20(%rdi), %r15d
 506:fltk-1.3.4-1/jpeg/jquant2.c ****   histptr histp;
 2877              		.loc 1 506 0
 2878 01fc 488B5030 		movq	48(%rax), %rdx
 2879              	.LVL432:
 516:fltk-1.3.4-1/jpeg/jquant2.c ****   c1min = boxp->c1min;  c1max = boxp->c1max;
 2880              		.loc 1 516 0
 2881 0200 8B07     		movl	(%rdi), %eax
 517:fltk-1.3.4-1/jpeg/jquant2.c ****   c2min = boxp->c2min;  c2max = boxp->c2max;
 2882              		.loc 1 517 0
 2883 0202 89742418 		movl	%esi, 24(%rsp)
 2884 0206 8B770C   		movl	12(%rdi), %esi
 516:fltk-1.3.4-1/jpeg/jquant2.c ****   c1min = boxp->c1min;  c1max = boxp->c1max;
 2885              		.loc 1 516 0
 2886 0209 89C3     		movl	%eax, %ebx
 2887 020b 8944240C 		movl	%eax, 12(%rsp)
 2888              	.LVL433:
 2889 020f 8B4704   		movl	4(%rdi), %eax
 2890              	.LVL434:
 517:fltk-1.3.4-1/jpeg/jquant2.c ****   c2min = boxp->c2min;  c2max = boxp->c2max;
 2891              		.loc 1 517 0
 2892 0212 8974241C 		movl	%esi, 28(%rsp)
 2893              	.LVL435:
 520:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 2894              		.loc 1 520 0
 2895 0216 39C3     		cmpl	%eax, %ebx
 2896 0218 0F8FB001 		jg	.L273
 2896      0000
 2897 021e 83C001   		addl	$1, %eax
 2898              	.LVL436:
 2899 0221 48634C24 		movslq	12(%rsp), %rcx
 2899      0C
 2900 0226 458D5F01 		leal	1(%r15), %r11d
 2901 022a 89442428 		movl	%eax, 40(%rsp)
 2902 022e 48634424 		movslq	24(%rsp), %rax
 2902      18
 2903 0233 4531D2   		xorl	%r10d, %r10d
 2904 0236 4531C0   		xorl	%r8d, %r8d
 2905 0239 4531C9   		xorl	%r9d, %r9d
 2906 023c 488D3CCA 		leaq	(%rdx,%rcx,8), %rdi
 2907 0240 48C1E005 		salq	$5, %rax
 2908 0244 4889C2   		movq	%rax, %rdx
 2909              	.LVL437:
 2910 0247 4963C6   		movslq	%r14d, %rax
 2911 024a 48897C24 		movq	%rdi, 16(%rsp)
 2911      10
 2912 024f 4801D0   		addq	%rdx, %rax
 2913 0252 31FF     		xorl	%edi, %edi
 2914 0254 4801C0   		addq	%rax, %rax
 2915 0257 48894424 		movq	%rax, 32(%rsp)
 2915      20
 2916 025c 8B44241C 		movl	28(%rsp), %eax
 2917 0260 83C001   		addl	$1, %eax
 2918 0263 89442408 		movl	%eax, 8(%rsp)
 2919              	.LVL438:
 2920              	.L253:
 521:fltk-1.3.4-1/jpeg/jquant2.c ****       histp = & histogram[c0][c1][c2min];
 2921              		.loc 1 521 0
 2922 0267 8B442418 		movl	24(%rsp), %eax
 2923 026b 8B5C241C 		movl	28(%rsp), %ebx
 2924 026f 39D8     		cmpl	%ebx, %eax
 2925 0271 0F8F8500 		jg	.L254
 2925      0000
 526:fltk-1.3.4-1/jpeg/jquant2.c **** 	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 2926              		.loc 1 526 0
 2927 0277 8B5C240C 		movl	12(%rsp), %ebx
 2928 027b 4C8B6C24 		movq	32(%rsp), %r13
 2928      20
 2929 0280 4189C4   		movl	%eax, %r12d
 2930 0283 8D2CDD04 		leal	4(,%rbx,8), %ebp
 2930      000000
 2931 028a 488B5C24 		movq	16(%rsp), %rbx
 2931      10
 2932 028f 4863ED   		movslq	%ebp, %rbp
 2933 0292 4C032B   		addq	(%rbx), %r13
 2934              	.LVL439:
 2935              		.p2align 4,,10
 2936 0295 0F1F00   		.p2align 3
 2937              	.L252:
 523:fltk-1.3.4-1/jpeg/jquant2.c **** 	if ((count = *histp++) != 0) {
 2938              		.loc 1 523 0
 2939 0298 4539FE   		cmpl	%r15d, %r14d
 522:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c2 = c2min; c2 <= c2max; c2++) {
 2940              		.loc 1 522 0
 2941 029b 4C89EE   		movq	%r13, %rsi
 2942              	.LVL440:
 523:fltk-1.3.4-1/jpeg/jquant2.c **** 	if ((count = *histp++) != 0) {
 2943              		.loc 1 523 0
 2944 029e 7F4D     		jg	.L249
 527:fltk-1.3.4-1/jpeg/jquant2.c **** 	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 2945              		.loc 1 527 0
 2946 02a0 428D1CA5 		leal	2(,%r12,4), %ebx
 2946      02000000 
 2947 02a8 4489F1   		movl	%r14d, %ecx
 2948 02ab 4863DB   		movslq	%ebx, %rbx
 2949              	.LVL441:
 2950 02ae 6690     		.p2align 4,,10
 2951              		.p2align 3
 2952              	.L251:
 524:fltk-1.3.4-1/jpeg/jquant2.c **** 	  total += count;
 2953              		.loc 1 524 0
 2954 02b0 4883C602 		addq	$2, %rsi
 2955              	.LVL442:
 2956 02b4 0FB746FE 		movzwl	-2(%rsi), %eax
 2957              	.LVL443:
 2958 02b8 4885C0   		testq	%rax, %rax
 2959 02bb 7428     		je	.L250
 526:fltk-1.3.4-1/jpeg/jquant2.c **** 	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 2960              		.loc 1 526 0
 2961 02bd 4889C2   		movq	%rax, %rdx
 525:fltk-1.3.4-1/jpeg/jquant2.c **** 	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 2962              		.loc 1 525 0
 2963 02c0 4801C7   		addq	%rax, %rdi
 2964              	.LVL444:
 526:fltk-1.3.4-1/jpeg/jquant2.c **** 	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 2965              		.loc 1 526 0
 2966 02c3 480FAFD5 		imulq	%rbp, %rdx
 2967 02c7 4901D1   		addq	%rdx, %r9
 2968              	.LVL445:
 527:fltk-1.3.4-1/jpeg/jquant2.c **** 	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 2969              		.loc 1 527 0
 2970 02ca 4889C2   		movq	%rax, %rdx
 2971 02cd 480FAFD3 		imulq	%rbx, %rdx
 2972 02d1 4901D0   		addq	%rdx, %r8
 2973              	.LVL446:
 528:fltk-1.3.4-1/jpeg/jquant2.c **** 	}
 2974              		.loc 1 528 0
 2975 02d4 8D14CD04 		leal	4(,%rcx,8), %edx
 2975      000000
 2976 02db 4863D2   		movslq	%edx, %rdx
 2977 02de 480FAFC2 		imulq	%rdx, %rax
 2978              	.LVL447:
 2979 02e2 4901C2   		addq	%rax, %r10
 2980              	.LVL448:
 2981              	.L250:
 523:fltk-1.3.4-1/jpeg/jquant2.c **** 	if ((count = *histp++) != 0) {
 2982              		.loc 1 523 0
 2983 02e5 83C101   		addl	$1, %ecx
 2984              	.LVL449:
 2985 02e8 4439D9   		cmpl	%r11d, %ecx
 2986 02eb 75C3     		jne	.L251
 2987              	.LVL450:
 2988              	.L249:
 521:fltk-1.3.4-1/jpeg/jquant2.c ****       histp = & histogram[c0][c1][c2min];
 2989              		.loc 1 521 0
 2990 02ed 4183C401 		addl	$1, %r12d
 2991              	.LVL451:
 2992 02f1 4983C540 		addq	$64, %r13
 2993 02f5 443B6424 		cmpl	8(%rsp), %r12d
 2993      08
 2994 02fa 759C     		jne	.L252
 2995              	.LVL452:
 2996              	.L254:
 520:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 2997              		.loc 1 520 0
 2998 02fc 8344240C 		addl	$1, 12(%rsp)
 2998      01
 2999              	.LVL453:
 3000 0301 48834424 		addq	$8, 16(%rsp)
 3000      1008
 3001 0307 8B44240C 		movl	12(%rsp), %eax
 3002              	.LVL454:
 3003 030b 3B442428 		cmpl	40(%rsp), %eax
 3004 030f 0F8552FF 		jne	.L253
 3004      FFFF
 3005 0315 4889FA   		movq	%rdi, %rdx
 3006 0318 48D1FA   		sarq	%rdx
 3007 031b 498D0411 		leaq	(%r9,%rdx), %rax
 3008              	.LVL455:
 3009 031f 4901D0   		addq	%rdx, %r8
 3010              	.LVL456:
 3011 0322 4901D2   		addq	%rdx, %r10
 3012              	.LVL457:
 3013              	.L248:
 533:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 3014              		.loc 1 533 0
 3015 0325 488B7424 		movq	48(%rsp), %rsi
 3015      30
 3016 032a 488B5C24 		movq	64(%rsp), %rbx
 3016      40
 3017 032f 48834424 		addq	$40, 56(%rsp)
 3017      3828
 3018              	.LVL458:
 3019 0335 488B96A0 		movq	160(%rsi), %rdx
 3019      000000
 3020 033c 488B0A   		movq	(%rdx), %rcx
 3021 033f 4899     		cqto
 3022 0341 48F7FF   		idivq	%rdi
 3023 0344 880419   		movb	%al, (%rcx,%rbx)
 3024              	.LVL459:
 534:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 3025              		.loc 1 534 0
 3026 0347 488B86A0 		movq	160(%rsi), %rax
 3026      000000
 3027 034e 488B4808 		movq	8(%rax), %rcx
 3028 0352 4C89C0   		movq	%r8, %rax
 3029 0355 4899     		cqto
 3030 0357 48F7FF   		idivq	%rdi
 3031 035a 880419   		movb	%al, (%rcx,%rbx)
 535:fltk-1.3.4-1/jpeg/jquant2.c **** }
 3032              		.loc 1 535 0
 3033 035d 488B86A0 		movq	160(%rsi), %rax
 3033      000000
 3034 0364 488B4810 		movq	16(%rax), %rcx
 3035 0368 4C89D0   		movq	%r10, %rax
 3036 036b 4899     		cqto
 3037 036d 48F7FF   		idivq	%rdi
 3038 0370 880419   		movb	%al, (%rcx,%rbx)
 3039              	.LVL460:
 3040 0373 4883C301 		addq	$1, %rbx
 3041              	.LVL461:
 3042              	.LBE81:
 3043              	.LBE80:
 563:fltk-1.3.4-1/jpeg/jquant2.c ****     compute_color(cinfo, & boxlist[i], i);
 3044              		.loc 1 563 0
 3045 0377 395C242C 		cmpl	%ebx, 44(%rsp)
 3046 037b 48895C24 		movq	%rbx, 64(%rsp)
 3046      40
 3047              	.LVL462:
 3048 0380 0F8F5AFE 		jg	.L255
 3048      FFFF
 3049              	.LVL463:
 3050              	.L246:
 565:fltk-1.3.4-1/jpeg/jquant2.c ****   TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 3051              		.loc 1 565 0
 3052 0386 488B4424 		movq	48(%rsp), %rax
 3052      30
 3053 038b 8B5C242C 		movl	44(%rsp), %ebx
 566:fltk-1.3.4-1/jpeg/jquant2.c **** }
 3054              		.loc 1 566 0
 3055 038f BE010000 		movl	$1, %esi
 3055      00
 565:fltk-1.3.4-1/jpeg/jquant2.c ****   TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 3056              		.loc 1 565 0
 3057 0394 89989C00 		movl	%ebx, 156(%rax)
 3057      0000
 566:fltk-1.3.4-1/jpeg/jquant2.c **** }
 3058              		.loc 1 566 0
 3059 039a 4889C7   		movq	%rax, %rdi
 3060 039d 488B00   		movq	(%rax), %rax
 3061 03a0 C7402862 		movl	$98, 40(%rax)
 3061      000000
 3062 03a7 488B07   		movq	(%rdi), %rax
 3063 03aa 89582C   		movl	%ebx, 44(%rax)
 3064 03ad 488B07   		movq	(%rdi), %rax
 3065 03b0 FF5008   		call	*8(%rax)
 3066              	.LVL464:
 3067              	.LBE85:
 3068              	.LBE87:
1152:fltk-1.3.4-1/jpeg/jquant2.c **** }
 3069              		.loc 1 1152 0
 3070 03b3 488B4424 		movq	72(%rsp), %rax
 3070      48
 3071 03b8 C7403801 		movl	$1, 56(%rax)
 3071      000000
1153:fltk-1.3.4-1/jpeg/jquant2.c **** 
 3072              		.loc 1 1153 0
 3073 03bf 4883C458 		addq	$88, %rsp
 3074              		.cfi_remember_state
 3075              		.cfi_def_cfa_offset 56
 3076 03c3 5B       		popq	%rbx
 3077              		.cfi_def_cfa_offset 48
 3078 03c4 5D       		popq	%rbp
 3079              		.cfi_def_cfa_offset 40
 3080 03c5 415C     		popq	%r12
 3081              		.cfi_def_cfa_offset 32
 3082 03c7 415D     		popq	%r13
 3083              		.cfi_def_cfa_offset 24
 3084 03c9 415E     		popq	%r14
 3085              		.cfi_def_cfa_offset 16
 3086 03cb 415F     		popq	%r15
 3087              		.cfi_def_cfa_offset 8
 3088 03cd C3       		ret
 3089              	.LVL465:
 3090              	.L273:
 3091              		.cfi_restore_state
 3092              	.LBB88:
 3093              	.LBB86:
 3094              	.LBB83:
 3095              	.LBB82:
 520:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 3096              		.loc 1 520 0
 3097 03ce 4531D2   		xorl	%r10d, %r10d
 3098 03d1 4531C0   		xorl	%r8d, %r8d
 3099 03d4 31C0     		xorl	%eax, %eax
 3100              	.LVL466:
 511:fltk-1.3.4-1/jpeg/jquant2.c ****   long c0total = 0;
 3101              		.loc 1 511 0
 3102 03d6 31FF     		xorl	%edi, %edi
 3103              	.LVL467:
 3104 03d8 E948FFFF 		jmp	.L248
 3104      FF
 3105              	.LVL468:
 3106              	.L235:
 3107              	.LBE82:
 3108              	.LBE83:
 3109              	.LBB84:
 3110              	.LBB79:
 437:fltk-1.3.4-1/jpeg/jquant2.c ****       b1 = find_biggest_color_pop(boxlist, numboxes);
 3111              		.loc 1 437 0
 3112 03dd 31D2     		xorl	%edx, %edx
 3113              	.LVL469:
 3114              	.L240:
 3115              	.LBB77:
 3116              	.LBB78:
 304:fltk-1.3.4-1/jpeg/jquant2.c ****       which = boxp;
 3117              		.loc 1 304 0
 3118 03df 488B4818 		movq	24(%rax), %rcx
 3119 03e3 4839D1   		cmpq	%rdx, %rcx
 3120 03e6 7E06     		jle	.L239
 3121 03e8 4889C6   		movq	%rax, %rsi
 3122              	.LVL470:
 3123 03eb 4889CA   		movq	%rcx, %rdx
 3124              	.LVL471:
 3125              	.L239:
 303:fltk-1.3.4-1/jpeg/jquant2.c ****     if (boxp->volume > maxv) {
 3126              		.loc 1 303 0
 3127 03ee 4883C028 		addq	$40, %rax
 3128              	.LVL472:
 3129 03f2 4839D8   		cmpq	%rbx, %rax
 3130 03f5 75E8     		jne	.L240
 3131 03f7 E9DBFCFF 		jmp	.L238
 3131      FF
 3132              	.LVL473:
 3133              	.L256:
 3134              	.LBE78:
 3135              	.LBE77:
 433:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Select box to split.
 3136              		.loc 1 433 0
 3137 03fc C744242C 		movl	$1, 44(%rsp)
 3137      01000000 
 3138 0404 E9C9FDFF 		jmp	.L234
 3138      FF
 3139              	.LBE79:
 3140              	.LBE84:
 3141              	.LBE86:
 3142              	.LBE88:
 3143              		.cfi_endproc
 3144              	.LFE74:
 3146              		.section	.text.unlikely.finish_pass1
 3147              	.LCOLDE9:
 3148              		.section	.text.finish_pass1
 3149              	.LHOTE9:
 3150              		.section	.text.unlikely.jinit_2pass_quantizer,"ax",@progbits
 3151              	.LCOLDB10:
 3152              		.section	.text.jinit_2pass_quantizer,"ax",@progbits
 3153              	.LHOTB10:
 3154              		.p2align 4,,15
 3155              		.globl	jinit_2pass_quantizer
 3157              	jinit_2pass_quantizer:
 3158              	.LFB78:
1237:fltk-1.3.4-1/jpeg/jquant2.c **** }
1238:fltk-1.3.4-1/jpeg/jquant2.c **** 
1239:fltk-1.3.4-1/jpeg/jquant2.c **** 
1240:fltk-1.3.4-1/jpeg/jquant2.c **** /*
1241:fltk-1.3.4-1/jpeg/jquant2.c ****  * Module initialization routine for 2-pass color quantization.
1242:fltk-1.3.4-1/jpeg/jquant2.c ****  */
1243:fltk-1.3.4-1/jpeg/jquant2.c **** 
1244:fltk-1.3.4-1/jpeg/jquant2.c **** GLOBAL(void)
1245:fltk-1.3.4-1/jpeg/jquant2.c **** jinit_2pass_quantizer (j_decompress_ptr cinfo)
1246:fltk-1.3.4-1/jpeg/jquant2.c **** {
 3159              		.loc 1 1246 0
 3160              		.cfi_startproc
 3161              	.LVL474:
 3162 0000 4155     		pushq	%r13
 3163              		.cfi_def_cfa_offset 16
 3164              		.cfi_offset 13, -16
 3165 0002 4154     		pushq	%r12
 3166              		.cfi_def_cfa_offset 24
 3167              		.cfi_offset 12, -24
 3168 0004 4989FC   		movq	%rdi, %r12
 3169 0007 55       		pushq	%rbp
 3170              		.cfi_def_cfa_offset 32
 3171              		.cfi_offset 6, -32
 3172 0008 53       		pushq	%rbx
 3173              		.cfi_def_cfa_offset 40
 3174              		.cfi_offset 3, -40
1247:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize;
1248:fltk-1.3.4-1/jpeg/jquant2.c ****   int i;
1249:fltk-1.3.4-1/jpeg/jquant2.c **** 
1250:fltk-1.3.4-1/jpeg/jquant2.c ****   cquantize = (my_cquantize_ptr)
 3175              		.loc 1 1250 0
 3176 0009 BA580000 		movl	$88, %edx
 3176      00
 3177 000e BE010000 		movl	$1, %esi
 3177      00
1246:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize;
 3178              		.loc 1 1246 0
 3179 0013 4883EC08 		subq	$8, %rsp
 3180              		.cfi_def_cfa_offset 48
1251:fltk-1.3.4-1/jpeg/jquant2.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 3181              		.loc 1 1251 0
 3182 0017 488B4708 		movq	8(%rdi), %rax
1250:fltk-1.3.4-1/jpeg/jquant2.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 3183              		.loc 1 1250 0
 3184 001b FF10     		call	*(%rax)
 3185              	.LVL475:
1252:fltk-1.3.4-1/jpeg/jquant2.c **** 				SIZEOF(my_cquantizer));
1253:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 3186              		.loc 1 1253 0
 3187 001d 49898424 		movq	%rax, 656(%r12)
 3187      90020000 
1254:fltk-1.3.4-1/jpeg/jquant2.c ****   cquantize->pub.start_pass = start_pass_2_quant;
 3188              		.loc 1 1254 0
 3189 0025 48C70000 		movq	$start_pass_2_quant, (%rax)
 3189      000000
1250:fltk-1.3.4-1/jpeg/jquant2.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 3190              		.loc 1 1250 0
 3191 002c 4989C5   		movq	%rax, %r13
 3192              	.LVL476:
1255:fltk-1.3.4-1/jpeg/jquant2.c ****   cquantize->pub.new_color_map = new_color_map_2_quant;
 3193              		.loc 1 1255 0
 3194 002f 48C74018 		movq	$new_color_map_2_quant, 24(%rax)
 3194      00000000 
1256:fltk-1.3.4-1/jpeg/jquant2.c ****   cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
 3195              		.loc 1 1256 0
 3196 0037 48C74040 		movq	$0, 64(%rax)
 3196      00000000 
1257:fltk-1.3.4-1/jpeg/jquant2.c ****   cquantize->error_limiter = NULL;
 3197              		.loc 1 1257 0
 3198 003f 48C74050 		movq	$0, 80(%rax)
 3198      00000000 
1258:fltk-1.3.4-1/jpeg/jquant2.c **** 
1259:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Make sure jdmaster didn't give me a case I can't handle */
1260:fltk-1.3.4-1/jpeg/jquant2.c ****   if (cinfo->out_color_components != 3)
 3199              		.loc 1 1260 0
 3200 0047 4183BC24 		cmpl	$3, 144(%r12)
 3200      90000000 
 3200      03
 3201 0050 7414     		je	.L275
1261:fltk-1.3.4-1/jpeg/jquant2.c ****     ERREXIT(cinfo, JERR_NOTIMPL);
 3202              		.loc 1 1261 0
 3203 0052 498B0424 		movq	(%r12), %rax
 3204              	.LVL477:
 3205 0056 4C89E7   		movq	%r12, %rdi
 3206 0059 C7402830 		movl	$48, 40(%rax)
 3206      000000
 3207 0060 498B0424 		movq	(%r12), %rax
 3208 0064 FF10     		call	*(%rax)
 3209              	.LVL478:
 3210              	.L275:
1262:fltk-1.3.4-1/jpeg/jquant2.c **** 
1263:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Allocate the histogram/inverse colormap storage */
1264:fltk-1.3.4-1/jpeg/jquant2.c ****   cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
 3211              		.loc 1 1264 0
 3212 0066 498B4424 		movq	8(%r12), %rax
 3212      08
 3213 006b BA000100 		movl	$256, %edx
 3213      00
 3214 0070 BE010000 		movl	$1, %esi
 3214      00
 3215 0075 4C89E7   		movq	%r12, %rdi
 3216 0078 31ED     		xorl	%ebp, %ebp
 3217 007a FF10     		call	*(%rax)
 3218              	.LVL479:
 3219 007c 49894530 		movq	%rax, 48(%r13)
 3220              	.LVL480:
 3221 0080 4889C3   		movq	%rax, %rbx
 3222 0083 EB07     		jmp	.L277
 3223              	.LVL481:
 3224              		.p2align 4,,10
 3225 0085 0F1F00   		.p2align 3
 3226              	.L284:
 3227 0088 498B5D30 		movq	48(%r13), %rbx
 3228              	.L277:
1265:fltk-1.3.4-1/jpeg/jquant2.c ****     ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
1266:fltk-1.3.4-1/jpeg/jquant2.c ****   for (i = 0; i < HIST_C0_ELEMS; i++) {
1267:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 3229              		.loc 1 1267 0 discriminator 3
 3230 008c 498B4424 		movq	8(%r12), %rax
 3230      08
 3231 0091 4801EB   		addq	%rbp, %rbx
 3232 0094 4883C508 		addq	$8, %rbp
 3233 0098 BA001000 		movl	$4096, %edx
 3233      00
 3234 009d BE010000 		movl	$1, %esi
 3234      00
 3235 00a2 4C89E7   		movq	%r12, %rdi
 3236 00a5 FF5008   		call	*8(%rax)
 3237              	.LVL482:
1266:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 3238              		.loc 1 1266 0 discriminator 3
 3239 00a8 4881FD00 		cmpq	$256, %rbp
 3239      010000
 3240              		.loc 1 1267 0 discriminator 3
 3241 00af 488903   		movq	%rax, (%rbx)
1266:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 3242              		.loc 1 1266 0 discriminator 3
 3243 00b2 75D4     		jne	.L284
1268:fltk-1.3.4-1/jpeg/jquant2.c ****       ((j_common_ptr) cinfo, JPOOL_IMAGE,
1269:fltk-1.3.4-1/jpeg/jquant2.c ****        HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
1270:fltk-1.3.4-1/jpeg/jquant2.c ****   }
1271:fltk-1.3.4-1/jpeg/jquant2.c ****   cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
 3244              		.loc 1 1271 0
 3245 00b4 41C74538 		movl	$1, 56(%r13)
 3245      01000000 
1272:fltk-1.3.4-1/jpeg/jquant2.c **** 
1273:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Allocate storage for the completed colormap, if required.
1274:fltk-1.3.4-1/jpeg/jquant2.c ****    * We do this now since it is FAR storage and may affect
1275:fltk-1.3.4-1/jpeg/jquant2.c ****    * the memory manager's space calculations.
1276:fltk-1.3.4-1/jpeg/jquant2.c ****    */
1277:fltk-1.3.4-1/jpeg/jquant2.c ****   if (cinfo->enable_2pass_quant) {
 3246              		.loc 1 1277 0
 3247 00bc 418B9424 		movl	132(%r12), %edx
 3247      84000000 
 3248 00c4 85D2     		testl	%edx, %edx
 3249 00c6 7468     		je	.L278
 3250              	.LBB89:
1278:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Make sure color count is acceptable */
1279:fltk-1.3.4-1/jpeg/jquant2.c ****     int desired = cinfo->desired_number_of_colors;
 3251              		.loc 1 1279 0
 3252 00c8 418B5C24 		movl	120(%r12), %ebx
 3252      78
 3253              	.LVL483:
1280:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
1281:fltk-1.3.4-1/jpeg/jquant2.c ****     if (desired < 8)
 3254              		.loc 1 1281 0
 3255 00cd 83FB07   		cmpl	$7, %ebx
 3256 00d0 0F8EAC00 		jle	.L285
 3256      0000
1282:fltk-1.3.4-1/jpeg/jquant2.c ****       ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
1283:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Make sure colormap indexes can be represented by JSAMPLEs */
1284:fltk-1.3.4-1/jpeg/jquant2.c ****     if (desired > MAXNUMCOLORS)
 3257              		.loc 1 1284 0
 3258 00d6 81FB0001 		cmpl	$256, %ebx
 3258      0000
 3259 00dc 7E1F     		jle	.L280
1285:fltk-1.3.4-1/jpeg/jquant2.c ****       ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 3260              		.loc 1 1285 0
 3261 00de 498B0424 		movq	(%r12), %rax
 3262 00e2 4C89E7   		movq	%r12, %rdi
 3263 00e5 C740283B 		movl	$59, 40(%rax)
 3263      000000
 3264 00ec 498B0424 		movq	(%r12), %rax
 3265 00f0 C7402C00 		movl	$256, 44(%rax)
 3265      010000
 3266 00f7 498B0424 		movq	(%r12), %rax
 3267 00fb FF10     		call	*(%rax)
 3268              	.LVL484:
 3269              	.L280:
1286:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 3270              		.loc 1 1286 0
 3271 00fd 498B4424 		movq	8(%r12), %rax
 3271      08
 3272 0102 B9030000 		movl	$3, %ecx
 3272      00
 3273 0107 89DA     		movl	%ebx, %edx
 3274 0109 BE010000 		movl	$1, %esi
 3274      00
 3275 010e 4C89E7   		movq	%r12, %rdi
 3276 0111 FF5010   		call	*16(%rax)
 3277              	.LVL485:
1287:fltk-1.3.4-1/jpeg/jquant2.c ****       ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
1288:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->desired = desired;
 3278              		.loc 1 1288 0
 3279 0114 41895D28 		movl	%ebx, 40(%r13)
1286:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 3280              		.loc 1 1286 0
 3281 0118 49894520 		movq	%rax, 32(%r13)
 3282              	.LBE89:
1289:fltk-1.3.4-1/jpeg/jquant2.c ****   } else
1290:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->sv_colormap = NULL;
1291:fltk-1.3.4-1/jpeg/jquant2.c **** 
1292:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Only F-S dithering or no dithering is supported. */
1293:fltk-1.3.4-1/jpeg/jquant2.c ****   /* If user asks for ordered dither, give him F-S. */
1294:fltk-1.3.4-1/jpeg/jquant2.c ****   if (cinfo->dither_mode != JDITHER_NONE)
 3283              		.loc 1 1294 0
 3284 011c 418B4424 		movl	112(%r12), %eax
 3284      70
 3285 0121 85C0     		testl	%eax, %eax
 3286 0123 751C     		jne	.L286
 3287              	.LVL486:
 3288              	.L274:
1295:fltk-1.3.4-1/jpeg/jquant2.c ****     cinfo->dither_mode = JDITHER_FS;
1296:fltk-1.3.4-1/jpeg/jquant2.c **** 
1297:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Allocate Floyd-Steinberg workspace if necessary.
1298:fltk-1.3.4-1/jpeg/jquant2.c ****    * This isn't really needed until pass 2, but again it is FAR storage.
1299:fltk-1.3.4-1/jpeg/jquant2.c ****    * Although we will cope with a later change in dither_mode,
1300:fltk-1.3.4-1/jpeg/jquant2.c ****    * we do not promise to honor max_memory_to_use if dither_mode changes.
1301:fltk-1.3.4-1/jpeg/jquant2.c ****    */
1302:fltk-1.3.4-1/jpeg/jquant2.c ****   if (cinfo->dither_mode == JDITHER_FS) {
1303:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
1304:fltk-1.3.4-1/jpeg/jquant2.c ****       ((j_common_ptr) cinfo, JPOOL_IMAGE,
1305:fltk-1.3.4-1/jpeg/jquant2.c ****        (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
1306:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Might as well create the error-limiting table too. */
1307:fltk-1.3.4-1/jpeg/jquant2.c ****     init_error_limit(cinfo);
1308:fltk-1.3.4-1/jpeg/jquant2.c ****   }
1309:fltk-1.3.4-1/jpeg/jquant2.c **** }
 3289              		.loc 1 1309 0
 3290 0125 4883C408 		addq	$8, %rsp
 3291              		.cfi_remember_state
 3292              		.cfi_def_cfa_offset 40
 3293 0129 5B       		popq	%rbx
 3294              		.cfi_def_cfa_offset 32
 3295 012a 5D       		popq	%rbp
 3296              		.cfi_def_cfa_offset 24
 3297 012b 415C     		popq	%r12
 3298              		.cfi_def_cfa_offset 16
 3299              	.LVL487:
 3300 012d 415D     		popq	%r13
 3301              		.cfi_def_cfa_offset 8
 3302              	.LVL488:
 3303 012f C3       		ret
 3304              	.LVL489:
 3305              		.p2align 4,,10
 3306              		.p2align 3
 3307              	.L278:
 3308              		.cfi_restore_state
1290:fltk-1.3.4-1/jpeg/jquant2.c **** 
 3309              		.loc 1 1290 0
 3310 0130 49C74520 		movq	$0, 32(%r13)
 3310      00000000 
1294:fltk-1.3.4-1/jpeg/jquant2.c ****     cinfo->dither_mode = JDITHER_FS;
 3311              		.loc 1 1294 0
 3312 0138 418B4424 		movl	112(%r12), %eax
 3312      70
 3313 013d 85C0     		testl	%eax, %eax
 3314 013f 74E4     		je	.L274
 3315              	.L286:
1303:fltk-1.3.4-1/jpeg/jquant2.c ****       ((j_common_ptr) cinfo, JPOOL_IMAGE,
 3316              		.loc 1 1303 0
 3317 0141 418B8424 		movl	136(%r12), %eax
 3317      88000000 
 3318 0149 4C89E7   		movq	%r12, %rdi
1295:fltk-1.3.4-1/jpeg/jquant2.c **** 
 3319              		.loc 1 1295 0
 3320 014c 41C74424 		movl	$2, 112(%r12)
 3320      70020000 
 3320      00
1303:fltk-1.3.4-1/jpeg/jquant2.c ****       ((j_common_ptr) cinfo, JPOOL_IMAGE,
 3321              		.loc 1 1303 0
 3322 0155 BE010000 		movl	$1, %esi
 3322      00
 3323 015a 83C002   		addl	$2, %eax
 3324 015d 488D1440 		leaq	(%rax,%rax,2), %rdx
 3325 0161 498B4424 		movq	8(%r12), %rax
 3325      08
 3326 0166 4801D2   		addq	%rdx, %rdx
 3327 0169 FF5008   		call	*8(%rax)
 3328              	.LVL490:
 3329 016c 49894540 		movq	%rax, 64(%r13)
 3330              		.loc 1 1309 0
 3331 0170 4883C408 		addq	$8, %rsp
 3332              		.cfi_remember_state
 3333              		.cfi_def_cfa_offset 40
1307:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 3334              		.loc 1 1307 0
 3335 0174 4C89E7   		movq	%r12, %rdi
 3336              		.loc 1 1309 0
 3337 0177 5B       		popq	%rbx
 3338              		.cfi_def_cfa_offset 32
 3339 0178 5D       		popq	%rbp
 3340              		.cfi_def_cfa_offset 24
 3341 0179 415C     		popq	%r12
 3342              		.cfi_def_cfa_offset 16
 3343              	.LVL491:
 3344 017b 415D     		popq	%r13
 3345              		.cfi_def_cfa_offset 8
 3346              	.LVL492:
1307:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 3347              		.loc 1 1307 0
 3348 017d E9000000 		jmp	init_error_limit
 3348      00
 3349              	.LVL493:
 3350              	.L285:
 3351              		.cfi_restore_state
 3352              	.LBB90:
1282:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Make sure colormap indexes can be represented by JSAMPLEs */
 3353              		.loc 1 1282 0
 3354 0182 498B0424 		movq	(%r12), %rax
 3355 0186 4C89E7   		movq	%r12, %rdi
 3356 0189 C740283A 		movl	$58, 40(%rax)
 3356      000000
 3357 0190 498B0424 		movq	(%r12), %rax
 3358 0194 C7402C08 		movl	$8, 44(%rax)
 3358      000000
 3359 019b 498B0424 		movq	(%r12), %rax
 3360 019f FF10     		call	*(%rax)
 3361              	.LVL494:
 3362 01a1 E957FFFF 		jmp	.L280
 3362      FF
 3363              	.LBE90:
 3364              		.cfi_endproc
 3365              	.LFE78:
 3367              		.section	.text.unlikely.jinit_2pass_quantizer
 3368              	.LCOLDE10:
 3369              		.section	.text.jinit_2pass_quantizer
 3370              	.LHOTE10:
 3371              		.text
 3372              	.Letext0:
 3373              		.section	.text.unlikely.prescan_quantize
 3374              	.Letext_cold0:
 3375              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 3376              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 3377              		.file 5 "/usr/include/libio.h"
 3378              		.file 6 "fltk-1.3.4-1/jpeg/jmorecfg.h"
 3379              		.file 7 "fltk-1.3.4-1/jpeg/jpeglib.h"
 3380              		.file 8 "fltk-1.3.4-1/jpeg/jpegint.h"
 3381              		.file 9 "fltk-1.3.4-1/jpeg/jerror.h"
 3382              		.file 10 "/usr/include/stdio.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 jquant2.c
     /tmp/ccIOSvwE.s:13     .text.prescan_quantize:0000000000000000 prescan_quantize
     /tmp/ccIOSvwE.s:114    .text.init_error_limit:0000000000000000 init_error_limit
     /tmp/ccIOSvwE.s:217    .text.finish_pass2:0000000000000000 finish_pass2
     /tmp/ccIOSvwE.s:236    .text.new_color_map_2_quant:0000000000000000 new_color_map_2_quant
     /tmp/ccIOSvwE.s:260    .text.start_pass_2_quant:0000000000000000 start_pass_2_quant
     /tmp/ccIOSvwE.s:2598   .text.finish_pass1:0000000000000000 finish_pass1
     /tmp/ccIOSvwE.s:1936   .text.pass2_no_dither:0000000000000000 pass2_no_dither
     /tmp/ccIOSvwE.s:2102   .text.pass2_fs_dither:0000000000000000 pass2_fs_dither
     /tmp/ccIOSvwE.s:502    .text.update_box.isra.0:0000000000000000 update_box.isra.0
     /tmp/ccIOSvwE.s:1159   .text.fill_inverse_cmap:0000000000000000 fill_inverse_cmap
     /tmp/ccIOSvwE.s:3157   .text.jinit_2pass_quantizer:0000000000000000 jinit_2pass_quantizer
                           .group:0000000000000000 wm4.0.cf9695abff4f49bdfe00dc4091904acd
                           .group:0000000000000000 wm4.stdcpredef.h.19.bf2bf6c5fb087dfb5ef2d2297c2795de
                           .group:0000000000000000 wm4.jconfig.h.10.247fc3ff67998f3074970b1373c70333
                           .group:0000000000000000 wm4.features.h.19.24da27e0a4d0d521fd057013d982b8b5
                           .group:0000000000000000 wm4.cdefs.h.19.56613e71f285ebad825b69b151170a81
                           .group:0000000000000000 wm4.wordsize.h.4.256e8fdbd37801980286acdbc40d0280
                           .group:0000000000000000 wm4.cdefs.h.432.619afd0aac7c4b439843706c1b28ddea
                           .group:0000000000000000 wm4.stubs64.h.10.918ceb5fa58268542bf143e4c1efbcf3
                           .group:0000000000000000 wm4.stdlib.h.27.59e2586c75bdbcb991b248ad7257b993
                           .group:0000000000000000 wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1
                           .group:0000000000000000 wm4.waitflags.h.25.e401b8bcfee800b540b27abd7cc78de9
                           .group:0000000000000000 wm4.waitstatus.h.28.93f167f49d64e2b9b99f98d1162a93bf
                           .group:0000000000000000 wm4.endian.h.19.ff00c9c0f5e9f9a9719c5de76ace57b4
                           .group:0000000000000000 wm4.endian.h.41.24cced64aef71195a51d4daa8e4f4a95
                           .group:0000000000000000 wm4.types.h.89.468e2451361e3b92f048f6cad51690ff
                           .group:0000000000000000 wm4.typesizes.h.24.40eb69a6270178f15d1bf3d7b6635a8b
                           .group:0000000000000000 wm4.byteswap.h.38.11ee5fdc0f6cc53a16c505b9233cecef
                           .group:0000000000000000 wm4.endian.h.63.97272d7c64d5db8020003b32e9289502
                           .group:0000000000000000 wm4.waitstatus.h.99.408b6270fa6eb71377201a241ef15f79
                           .group:0000000000000000 wm4.stdlib.h.50.84aeca2ac6f37d40e1e9b3cef757ba2d
                           .group:0000000000000000 wm4.types.h.23.f6dcbaa72f8f71361acef09804d45a5e
                           .group:0000000000000000 wm4.time.h.53.beb46e650cd406cb917b6b96b45e640a
                           .group:0000000000000000 wm4.stddef.h.238.847b6907dabda77be90a9ab7ad789e2e
                           .group:0000000000000000 wm4.types.h.187.bd5a05039b505b3620e6973f1b2ffeb1
                           .group:0000000000000000 wm4.select.h.28.eb2f3debdbcffd1442ebddaebc4fb6ff
                           .group:0000000000000000 wm4.sigset.h.20.f36413b6d2364ad847d3db53fb03e683
                           .group:0000000000000000 wm4.select.h.36.f76c3b9e55c871743863013cc4cc14c9
                           .group:0000000000000000 wm4.time.h.66.e70ce69790c975f0efb369340c432e0b
                           .group:0000000000000000 wm4.time.h.25.ae5284cdff565e87a9198d819340325d
                           .group:0000000000000000 wm4.select.h.49.e9d2041e5035cc68ebd1a20f7dbc8514
                           .group:0000000000000000 wm4.select2.h.27.f95f2ab0ffee66dc1b6575014894b21a
                           .group:0000000000000000 wm4.sysmacros.h.20.8a0c33ff175cd9b434a86c0aaa36f0a2
                           .group:0000000000000000 wm4.types.h.229.67b3f66bd74b06b451caec392a72a945
                           .group:0000000000000000 wm4.pthreadtypes.h.25.6892b1493314fcf446bbc76e7362acba
                           .group:0000000000000000 wm4.alloca.h.19.edefa922a76c1cbaaf1e416903ba2d1c
                           .group:0000000000000000 wm4.alloca.h.29.156e12058824cc23d961c4d3b13031f6
                           .group:0000000000000000 wm4.stdio.h.26.4719156f1aea2bb9662fd6c582dc9a4c
                           .group:0000000000000000 wm4.stddef.h.238.04cc7214bceba497b20d15c10fd97511
                           .group:0000000000000000 wm4.stdio.h.36.2dd12c1fd035242ad5cfd0152a01be5a
                           .group:0000000000000000 wm4._G_config.h.5.b0f37d9e474454cf6e459063458db32f
                           .group:0000000000000000 wm4.wchar.h.80.eea3eba2d2a17aace9470a8e0d8218dc
                           .group:0000000000000000 wm4._G_config.h.46.5187c97b14fd664662cb32e6b94fc49e
                           .group:0000000000000000 wm4.libio.h.33.a775b9ecae273f33bc59931e9891e4ca
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.libio.h.51.dab170798ec1df48c625aea7c30e1b63
                           .group:0000000000000000 wm4.stdio.h.80.17b7dd1ca72d8a61987532cb1d80194a
                           .group:0000000000000000 wm4.stdio_lim.h.23.557290a6cddeba0587f574f29e3a5fb9
                           .group:0000000000000000 wm4.stdio.h.172.df21df34a7396d7da2e08f9b617d582f
                           .group:0000000000000000 wm4.stdio.h.26.cae64f7ada9bb8327a89dba6a5e93655
                           .group:0000000000000000 wm4.string.h.23.8394011d5995a16f15d67d04e84a1d69
                           .group:0000000000000000 wm4.string.h.24.1b0dc67418e7128d207285861439c2f8
                           .group:0000000000000000 wm4.string2.h.45.00535b99420fc3014c2da41d6645330d
                           .group:0000000000000000 wm4.string3.h.31.0c4b9301b754a2db05eaafef869657d2
                           .group:0000000000000000 wm4.jinclude.h.67.b19f941ec97c4845fa4609292c7e2db4
                           .group:0000000000000000 wm4.jmorecfg.h.33.3b4c5f9cc07b3737823b06caf24d5b05
                           .group:0000000000000000 wm4.jpeglib.h.40.4f111c27252a38df39328d65454e82f4
                           .group:0000000000000000 wm4.jpegint.h.26.5219ef5d4e4921371d38e77b6091fd20
                           .group:0000000000000000 wm4.jerror.h.25.1dbd8674e70ab5215bc0037320e5c2a2

UNDEFINED SYMBOLS
memset
__stack_chk_fail
