   1              		.file	"jquant2.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.prescan_quantize,"ax",@progbits
   5              		.p2align 4
   7              	prescan_quantize:
   8              	.LVL0:
   9              	.LFB51:
  10              		.file 1 "fltk-1.3.4-1/jpeg/jquant2.c"
   1:fltk-1.3.4-1/jpeg/jquant2.c **** /*
   2:fltk-1.3.4-1/jpeg/jquant2.c ****  * jquant2.c
   3:fltk-1.3.4-1/jpeg/jquant2.c ****  *
   4:fltk-1.3.4-1/jpeg/jquant2.c ****  * Copyright (C) 1991-1996, Thomas G. Lane.
   5:fltk-1.3.4-1/jpeg/jquant2.c ****  * Modified 2011 by Guido Vollbeding.
   6:fltk-1.3.4-1/jpeg/jquant2.c ****  * This file is part of the Independent JPEG Group's software.
   7:fltk-1.3.4-1/jpeg/jquant2.c ****  * For conditions of distribution and use, see the accompanying README file.
   8:fltk-1.3.4-1/jpeg/jquant2.c ****  *
   9:fltk-1.3.4-1/jpeg/jquant2.c ****  * This file contains 2-pass color quantization (color mapping) routines.
  10:fltk-1.3.4-1/jpeg/jquant2.c ****  * These routines provide selection of a custom color map for an image,
  11:fltk-1.3.4-1/jpeg/jquant2.c ****  * followed by mapping of the image to that color map, with optional
  12:fltk-1.3.4-1/jpeg/jquant2.c ****  * Floyd-Steinberg dithering.
  13:fltk-1.3.4-1/jpeg/jquant2.c ****  * It is also possible to use just the second pass to map to an arbitrary
  14:fltk-1.3.4-1/jpeg/jquant2.c ****  * externally-given color map.
  15:fltk-1.3.4-1/jpeg/jquant2.c ****  *
  16:fltk-1.3.4-1/jpeg/jquant2.c ****  * Note: ordered dithering is not supported, since there isn't any fast
  17:fltk-1.3.4-1/jpeg/jquant2.c ****  * way to compute intercolor distances; it's unclear that ordered dither's
  18:fltk-1.3.4-1/jpeg/jquant2.c ****  * fundamental assumptions even hold with an irregularly spaced color map.
  19:fltk-1.3.4-1/jpeg/jquant2.c ****  */
  20:fltk-1.3.4-1/jpeg/jquant2.c **** 
  21:fltk-1.3.4-1/jpeg/jquant2.c **** #define JPEG_INTERNALS
  22:fltk-1.3.4-1/jpeg/jquant2.c **** #include "jinclude.h"
  23:fltk-1.3.4-1/jpeg/jquant2.c **** #include "jpeglib.h"
  24:fltk-1.3.4-1/jpeg/jquant2.c **** 
  25:fltk-1.3.4-1/jpeg/jquant2.c **** #ifdef QUANT_2PASS_SUPPORTED
  26:fltk-1.3.4-1/jpeg/jquant2.c **** 
  27:fltk-1.3.4-1/jpeg/jquant2.c **** 
  28:fltk-1.3.4-1/jpeg/jquant2.c **** /*
  29:fltk-1.3.4-1/jpeg/jquant2.c ****  * This module implements the well-known Heckbert paradigm for color
  30:fltk-1.3.4-1/jpeg/jquant2.c ****  * quantization.  Most of the ideas used here can be traced back to
  31:fltk-1.3.4-1/jpeg/jquant2.c ****  * Heckbert's seminal paper
  32:fltk-1.3.4-1/jpeg/jquant2.c ****  *   Heckbert, Paul.  "Color Image Quantization for Frame Buffer Display",
  33:fltk-1.3.4-1/jpeg/jquant2.c ****  *   Proc. SIGGRAPH '82, Computer Graphics v.16 #3 (July 1982), pp 297-304.
  34:fltk-1.3.4-1/jpeg/jquant2.c ****  *
  35:fltk-1.3.4-1/jpeg/jquant2.c ****  * In the first pass over the image, we accumulate a histogram showing the
  36:fltk-1.3.4-1/jpeg/jquant2.c ****  * usage count of each possible color.  To keep the histogram to a reasonable
  37:fltk-1.3.4-1/jpeg/jquant2.c ****  * size, we reduce the precision of the input; typical practice is to retain
  38:fltk-1.3.4-1/jpeg/jquant2.c ****  * 5 or 6 bits per color, so that 8 or 4 different input values are counted
  39:fltk-1.3.4-1/jpeg/jquant2.c ****  * in the same histogram cell.
  40:fltk-1.3.4-1/jpeg/jquant2.c ****  *
  41:fltk-1.3.4-1/jpeg/jquant2.c ****  * Next, the color-selection step begins with a box representing the whole
  42:fltk-1.3.4-1/jpeg/jquant2.c ****  * color space, and repeatedly splits the "largest" remaining box until we
  43:fltk-1.3.4-1/jpeg/jquant2.c ****  * have as many boxes as desired colors.  Then the mean color in each
  44:fltk-1.3.4-1/jpeg/jquant2.c ****  * remaining box becomes one of the possible output colors.
  45:fltk-1.3.4-1/jpeg/jquant2.c ****  * 
  46:fltk-1.3.4-1/jpeg/jquant2.c ****  * The second pass over the image maps each input pixel to the closest output
  47:fltk-1.3.4-1/jpeg/jquant2.c ****  * color (optionally after applying a Floyd-Steinberg dithering correction).
  48:fltk-1.3.4-1/jpeg/jquant2.c ****  * This mapping is logically trivial, but making it go fast enough requires
  49:fltk-1.3.4-1/jpeg/jquant2.c ****  * considerable care.
  50:fltk-1.3.4-1/jpeg/jquant2.c ****  *
  51:fltk-1.3.4-1/jpeg/jquant2.c ****  * Heckbert-style quantizers vary a good deal in their policies for choosing
  52:fltk-1.3.4-1/jpeg/jquant2.c ****  * the "largest" box and deciding where to cut it.  The particular policies
  53:fltk-1.3.4-1/jpeg/jquant2.c ****  * used here have proved out well in experimental comparisons, but better ones
  54:fltk-1.3.4-1/jpeg/jquant2.c ****  * may yet be found.
  55:fltk-1.3.4-1/jpeg/jquant2.c ****  *
  56:fltk-1.3.4-1/jpeg/jquant2.c ****  * In earlier versions of the IJG code, this module quantized in YCbCr color
  57:fltk-1.3.4-1/jpeg/jquant2.c ****  * space, processing the raw upsampled data without a color conversion step.
  58:fltk-1.3.4-1/jpeg/jquant2.c ****  * This allowed the color conversion math to be done only once per colormap
  59:fltk-1.3.4-1/jpeg/jquant2.c ****  * entry, not once per pixel.  However, that optimization precluded other
  60:fltk-1.3.4-1/jpeg/jquant2.c ****  * useful optimizations (such as merging color conversion with upsampling)
  61:fltk-1.3.4-1/jpeg/jquant2.c ****  * and it also interfered with desired capabilities such as quantizing to an
  62:fltk-1.3.4-1/jpeg/jquant2.c ****  * externally-supplied colormap.  We have therefore abandoned that approach.
  63:fltk-1.3.4-1/jpeg/jquant2.c ****  * The present code works in the post-conversion color space, typically RGB.
  64:fltk-1.3.4-1/jpeg/jquant2.c ****  *
  65:fltk-1.3.4-1/jpeg/jquant2.c ****  * To improve the visual quality of the results, we actually work in scaled
  66:fltk-1.3.4-1/jpeg/jquant2.c ****  * RGB space, giving G distances more weight than R, and R in turn more than
  67:fltk-1.3.4-1/jpeg/jquant2.c ****  * B.  To do everything in integer math, we must use integer scale factors.
  68:fltk-1.3.4-1/jpeg/jquant2.c ****  * The 2/3/1 scale factors used here correspond loosely to the relative
  69:fltk-1.3.4-1/jpeg/jquant2.c ****  * weights of the colors in the NTSC grayscale equation.
  70:fltk-1.3.4-1/jpeg/jquant2.c ****  * If you want to use this code to quantize a non-RGB color space, you'll
  71:fltk-1.3.4-1/jpeg/jquant2.c ****  * probably need to change these scale factors.
  72:fltk-1.3.4-1/jpeg/jquant2.c ****  */
  73:fltk-1.3.4-1/jpeg/jquant2.c **** 
  74:fltk-1.3.4-1/jpeg/jquant2.c **** #define R_SCALE 2		/* scale R distances by this much */
  75:fltk-1.3.4-1/jpeg/jquant2.c **** #define G_SCALE 3		/* scale G distances by this much */
  76:fltk-1.3.4-1/jpeg/jquant2.c **** #define B_SCALE 1		/* and B by this much */
  77:fltk-1.3.4-1/jpeg/jquant2.c **** 
  78:fltk-1.3.4-1/jpeg/jquant2.c **** /* Relabel R/G/B as components 0/1/2, respecting the RGB ordering defined
  79:fltk-1.3.4-1/jpeg/jquant2.c ****  * in jmorecfg.h.  As the code stands, it will do the right thing for R,G,B
  80:fltk-1.3.4-1/jpeg/jquant2.c ****  * and B,G,R orders.  If you define some other weird order in jmorecfg.h,
  81:fltk-1.3.4-1/jpeg/jquant2.c ****  * you'll get compile errors until you extend this logic.  In that case
  82:fltk-1.3.4-1/jpeg/jquant2.c ****  * you'll probably want to tweak the histogram sizes too.
  83:fltk-1.3.4-1/jpeg/jquant2.c ****  */
  84:fltk-1.3.4-1/jpeg/jquant2.c **** 
  85:fltk-1.3.4-1/jpeg/jquant2.c **** #if RGB_RED == 0
  86:fltk-1.3.4-1/jpeg/jquant2.c **** #define C0_SCALE R_SCALE
  87:fltk-1.3.4-1/jpeg/jquant2.c **** #endif
  88:fltk-1.3.4-1/jpeg/jquant2.c **** #if RGB_BLUE == 0
  89:fltk-1.3.4-1/jpeg/jquant2.c **** #define C0_SCALE B_SCALE
  90:fltk-1.3.4-1/jpeg/jquant2.c **** #endif
  91:fltk-1.3.4-1/jpeg/jquant2.c **** #if RGB_GREEN == 1
  92:fltk-1.3.4-1/jpeg/jquant2.c **** #define C1_SCALE G_SCALE
  93:fltk-1.3.4-1/jpeg/jquant2.c **** #endif
  94:fltk-1.3.4-1/jpeg/jquant2.c **** #if RGB_RED == 2
  95:fltk-1.3.4-1/jpeg/jquant2.c **** #define C2_SCALE R_SCALE
  96:fltk-1.3.4-1/jpeg/jquant2.c **** #endif
  97:fltk-1.3.4-1/jpeg/jquant2.c **** #if RGB_BLUE == 2
  98:fltk-1.3.4-1/jpeg/jquant2.c **** #define C2_SCALE B_SCALE
  99:fltk-1.3.4-1/jpeg/jquant2.c **** #endif
 100:fltk-1.3.4-1/jpeg/jquant2.c **** 
 101:fltk-1.3.4-1/jpeg/jquant2.c **** 
 102:fltk-1.3.4-1/jpeg/jquant2.c **** /*
 103:fltk-1.3.4-1/jpeg/jquant2.c ****  * First we have the histogram data structure and routines for creating it.
 104:fltk-1.3.4-1/jpeg/jquant2.c ****  *
 105:fltk-1.3.4-1/jpeg/jquant2.c ****  * The number of bits of precision can be adjusted by changing these symbols.
 106:fltk-1.3.4-1/jpeg/jquant2.c ****  * We recommend keeping 6 bits for G and 5 each for R and B.
 107:fltk-1.3.4-1/jpeg/jquant2.c ****  * If you have plenty of memory and cycles, 6 bits all around gives marginally
 108:fltk-1.3.4-1/jpeg/jquant2.c ****  * better results; if you are short of memory, 5 bits all around will save
 109:fltk-1.3.4-1/jpeg/jquant2.c ****  * some space but degrade the results.
 110:fltk-1.3.4-1/jpeg/jquant2.c ****  * To maintain a fully accurate histogram, we'd need to allocate a "long"
 111:fltk-1.3.4-1/jpeg/jquant2.c ****  * (preferably unsigned long) for each cell.  In practice this is overkill;
 112:fltk-1.3.4-1/jpeg/jquant2.c ****  * we can get by with 16 bits per cell.  Few of the cell counts will overflow,
 113:fltk-1.3.4-1/jpeg/jquant2.c ****  * and clamping those that do overflow to the maximum value will give close-
 114:fltk-1.3.4-1/jpeg/jquant2.c ****  * enough results.  This reduces the recommended histogram size from 256Kb
 115:fltk-1.3.4-1/jpeg/jquant2.c ****  * to 128Kb, which is a useful savings on PC-class machines.
 116:fltk-1.3.4-1/jpeg/jquant2.c ****  * (In the second pass the histogram space is re-used for pixel mapping data;
 117:fltk-1.3.4-1/jpeg/jquant2.c ****  * in that capacity, each cell must be able to store zero to the number of
 118:fltk-1.3.4-1/jpeg/jquant2.c ****  * desired colors.  16 bits/cell is plenty for that too.)
 119:fltk-1.3.4-1/jpeg/jquant2.c ****  * Since the JPEG code is intended to run in small memory model on 80x86
 120:fltk-1.3.4-1/jpeg/jquant2.c ****  * machines, we can't just allocate the histogram in one chunk.  Instead
 121:fltk-1.3.4-1/jpeg/jquant2.c ****  * of a true 3-D array, we use a row of pointers to 2-D arrays.  Each
 122:fltk-1.3.4-1/jpeg/jquant2.c ****  * pointer corresponds to a C0 value (typically 2^5 = 32 pointers) and
 123:fltk-1.3.4-1/jpeg/jquant2.c ****  * each 2-D array has 2^6*2^5 = 2048 or 2^6*2^6 = 4096 entries.  Note that
 124:fltk-1.3.4-1/jpeg/jquant2.c ****  * on 80x86 machines, the pointer row is in near memory but the actual
 125:fltk-1.3.4-1/jpeg/jquant2.c ****  * arrays are in far memory (same arrangement as we use for image arrays).
 126:fltk-1.3.4-1/jpeg/jquant2.c ****  */
 127:fltk-1.3.4-1/jpeg/jquant2.c **** 
 128:fltk-1.3.4-1/jpeg/jquant2.c **** #define MAXNUMCOLORS  (MAXJSAMPLE+1) /* maximum size of colormap */
 129:fltk-1.3.4-1/jpeg/jquant2.c **** 
 130:fltk-1.3.4-1/jpeg/jquant2.c **** /* These will do the right thing for either R,G,B or B,G,R color order,
 131:fltk-1.3.4-1/jpeg/jquant2.c ****  * but you may not like the results for other color orders.
 132:fltk-1.3.4-1/jpeg/jquant2.c ****  */
 133:fltk-1.3.4-1/jpeg/jquant2.c **** #define HIST_C0_BITS  5		/* bits of precision in R/B histogram */
 134:fltk-1.3.4-1/jpeg/jquant2.c **** #define HIST_C1_BITS  6		/* bits of precision in G histogram */
 135:fltk-1.3.4-1/jpeg/jquant2.c **** #define HIST_C2_BITS  5		/* bits of precision in B/R histogram */
 136:fltk-1.3.4-1/jpeg/jquant2.c **** 
 137:fltk-1.3.4-1/jpeg/jquant2.c **** /* Number of elements along histogram axes. */
 138:fltk-1.3.4-1/jpeg/jquant2.c **** #define HIST_C0_ELEMS  (1<<HIST_C0_BITS)
 139:fltk-1.3.4-1/jpeg/jquant2.c **** #define HIST_C1_ELEMS  (1<<HIST_C1_BITS)
 140:fltk-1.3.4-1/jpeg/jquant2.c **** #define HIST_C2_ELEMS  (1<<HIST_C2_BITS)
 141:fltk-1.3.4-1/jpeg/jquant2.c **** 
 142:fltk-1.3.4-1/jpeg/jquant2.c **** /* These are the amounts to shift an input value to get a histogram index. */
 143:fltk-1.3.4-1/jpeg/jquant2.c **** #define C0_SHIFT  (BITS_IN_JSAMPLE-HIST_C0_BITS)
 144:fltk-1.3.4-1/jpeg/jquant2.c **** #define C1_SHIFT  (BITS_IN_JSAMPLE-HIST_C1_BITS)
 145:fltk-1.3.4-1/jpeg/jquant2.c **** #define C2_SHIFT  (BITS_IN_JSAMPLE-HIST_C2_BITS)
 146:fltk-1.3.4-1/jpeg/jquant2.c **** 
 147:fltk-1.3.4-1/jpeg/jquant2.c **** 
 148:fltk-1.3.4-1/jpeg/jquant2.c **** typedef UINT16 histcell;	/* histogram cell; prefer an unsigned type */
 149:fltk-1.3.4-1/jpeg/jquant2.c **** 
 150:fltk-1.3.4-1/jpeg/jquant2.c **** typedef histcell FAR * histptr;	/* for pointers to histogram cells */
 151:fltk-1.3.4-1/jpeg/jquant2.c **** 
 152:fltk-1.3.4-1/jpeg/jquant2.c **** typedef histcell hist1d[HIST_C2_ELEMS]; /* typedefs for the array */
 153:fltk-1.3.4-1/jpeg/jquant2.c **** typedef hist1d FAR * hist2d;	/* type for the 2nd-level pointers */
 154:fltk-1.3.4-1/jpeg/jquant2.c **** typedef hist2d * hist3d;	/* type for top-level pointer */
 155:fltk-1.3.4-1/jpeg/jquant2.c **** 
 156:fltk-1.3.4-1/jpeg/jquant2.c **** 
 157:fltk-1.3.4-1/jpeg/jquant2.c **** /* Declarations for Floyd-Steinberg dithering.
 158:fltk-1.3.4-1/jpeg/jquant2.c ****  *
 159:fltk-1.3.4-1/jpeg/jquant2.c ****  * Errors are accumulated into the array fserrors[], at a resolution of
 160:fltk-1.3.4-1/jpeg/jquant2.c ****  * 1/16th of a pixel count.  The error at a given pixel is propagated
 161:fltk-1.3.4-1/jpeg/jquant2.c ****  * to its not-yet-processed neighbors using the standard F-S fractions,
 162:fltk-1.3.4-1/jpeg/jquant2.c ****  *		...	(here)	7/16
 163:fltk-1.3.4-1/jpeg/jquant2.c ****  *		3/16	5/16	1/16
 164:fltk-1.3.4-1/jpeg/jquant2.c ****  * We work left-to-right on even rows, right-to-left on odd rows.
 165:fltk-1.3.4-1/jpeg/jquant2.c ****  *
 166:fltk-1.3.4-1/jpeg/jquant2.c ****  * We can get away with a single array (holding one row's worth of errors)
 167:fltk-1.3.4-1/jpeg/jquant2.c ****  * by using it to store the current row's errors at pixel columns not yet
 168:fltk-1.3.4-1/jpeg/jquant2.c ****  * processed, but the next row's errors at columns already processed.  We
 169:fltk-1.3.4-1/jpeg/jquant2.c ****  * need only a few extra variables to hold the errors immediately around the
 170:fltk-1.3.4-1/jpeg/jquant2.c ****  * current column.  (If we are lucky, those variables are in registers, but
 171:fltk-1.3.4-1/jpeg/jquant2.c ****  * even if not, they're probably cheaper to access than array elements are.)
 172:fltk-1.3.4-1/jpeg/jquant2.c ****  *
 173:fltk-1.3.4-1/jpeg/jquant2.c ****  * The fserrors[] array has (#columns + 2) entries; the extra entry at
 174:fltk-1.3.4-1/jpeg/jquant2.c ****  * each end saves us from special-casing the first and last pixels.
 175:fltk-1.3.4-1/jpeg/jquant2.c ****  * Each entry is three values long, one value for each color component.
 176:fltk-1.3.4-1/jpeg/jquant2.c ****  *
 177:fltk-1.3.4-1/jpeg/jquant2.c ****  * Note: on a wide image, we might not have enough room in a PC's near data
 178:fltk-1.3.4-1/jpeg/jquant2.c ****  * segment to hold the error array; so it is allocated with alloc_large.
 179:fltk-1.3.4-1/jpeg/jquant2.c ****  */
 180:fltk-1.3.4-1/jpeg/jquant2.c **** 
 181:fltk-1.3.4-1/jpeg/jquant2.c **** #if BITS_IN_JSAMPLE == 8
 182:fltk-1.3.4-1/jpeg/jquant2.c **** typedef INT16 FSERROR;		/* 16 bits should be enough */
 183:fltk-1.3.4-1/jpeg/jquant2.c **** typedef int LOCFSERROR;		/* use 'int' for calculation temps */
 184:fltk-1.3.4-1/jpeg/jquant2.c **** #else
 185:fltk-1.3.4-1/jpeg/jquant2.c **** typedef INT32 FSERROR;		/* may need more than 16 bits */
 186:fltk-1.3.4-1/jpeg/jquant2.c **** typedef INT32 LOCFSERROR;	/* be sure calculation temps are big enough */
 187:fltk-1.3.4-1/jpeg/jquant2.c **** #endif
 188:fltk-1.3.4-1/jpeg/jquant2.c **** 
 189:fltk-1.3.4-1/jpeg/jquant2.c **** typedef FSERROR FAR *FSERRPTR;	/* pointer to error array (in FAR storage!) */
 190:fltk-1.3.4-1/jpeg/jquant2.c **** 
 191:fltk-1.3.4-1/jpeg/jquant2.c **** 
 192:fltk-1.3.4-1/jpeg/jquant2.c **** /* Private subobject */
 193:fltk-1.3.4-1/jpeg/jquant2.c **** 
 194:fltk-1.3.4-1/jpeg/jquant2.c **** typedef struct {
 195:fltk-1.3.4-1/jpeg/jquant2.c ****   struct jpeg_color_quantizer pub; /* public fields */
 196:fltk-1.3.4-1/jpeg/jquant2.c **** 
 197:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Space for the eventually created colormap is stashed here */
 198:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPARRAY sv_colormap;	/* colormap allocated at init time */
 199:fltk-1.3.4-1/jpeg/jquant2.c ****   int desired;			/* desired # of colors = size of colormap */
 200:fltk-1.3.4-1/jpeg/jquant2.c **** 
 201:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Variables for accumulating image statistics */
 202:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram;		/* pointer to the histogram */
 203:fltk-1.3.4-1/jpeg/jquant2.c **** 
 204:fltk-1.3.4-1/jpeg/jquant2.c ****   boolean needs_zeroed;		/* TRUE if next pass must zero histogram */
 205:fltk-1.3.4-1/jpeg/jquant2.c **** 
 206:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Variables for Floyd-Steinberg dithering */
 207:fltk-1.3.4-1/jpeg/jquant2.c ****   FSERRPTR fserrors;		/* accumulated errors */
 208:fltk-1.3.4-1/jpeg/jquant2.c ****   boolean on_odd_row;		/* flag to remember which row we are on */
 209:fltk-1.3.4-1/jpeg/jquant2.c ****   int * error_limiter;		/* table for clamping the applied error */
 210:fltk-1.3.4-1/jpeg/jquant2.c **** } my_cquantizer;
 211:fltk-1.3.4-1/jpeg/jquant2.c **** 
 212:fltk-1.3.4-1/jpeg/jquant2.c **** typedef my_cquantizer * my_cquantize_ptr;
 213:fltk-1.3.4-1/jpeg/jquant2.c **** 
 214:fltk-1.3.4-1/jpeg/jquant2.c **** 
 215:fltk-1.3.4-1/jpeg/jquant2.c **** /*
 216:fltk-1.3.4-1/jpeg/jquant2.c ****  * Prescan some rows of pixels.
 217:fltk-1.3.4-1/jpeg/jquant2.c ****  * In this module the prescan simply updates the histogram, which has been
 218:fltk-1.3.4-1/jpeg/jquant2.c ****  * initialized to zeroes by start_pass.
 219:fltk-1.3.4-1/jpeg/jquant2.c ****  * An output_buf parameter is required by the method signature, but no data
 220:fltk-1.3.4-1/jpeg/jquant2.c ****  * is actually output (in fact the buffer controller is probably passing a
 221:fltk-1.3.4-1/jpeg/jquant2.c ****  * NULL pointer).
 222:fltk-1.3.4-1/jpeg/jquant2.c ****  */
 223:fltk-1.3.4-1/jpeg/jquant2.c **** 
 224:fltk-1.3.4-1/jpeg/jquant2.c **** METHODDEF(void)
 225:fltk-1.3.4-1/jpeg/jquant2.c **** prescan_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
 226:fltk-1.3.4-1/jpeg/jquant2.c **** 		  JSAMPARRAY output_buf, int num_rows)
 227:fltk-1.3.4-1/jpeg/jquant2.c **** {
  11              		.loc 1 227 1 view -0
  12              		.cfi_startproc
  13              		.loc 1 227 1 is_stmt 0 view .LVU1
  14 0000 F30F1EFA 		endbr64
 228:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  15              		.loc 1 228 3 is_stmt 1 view .LVU2
  16              	.LVL1:
 229:fltk-1.3.4-1/jpeg/jquant2.c ****   register JSAMPROW ptr;
  17              		.loc 1 229 3 view .LVU3
 230:fltk-1.3.4-1/jpeg/jquant2.c ****   register histptr histp;
  18              		.loc 1 230 3 view .LVU4
 231:fltk-1.3.4-1/jpeg/jquant2.c ****   register hist3d histogram = cquantize->histogram;
  19              		.loc 1 231 3 view .LVU5
  20              		.loc 1 231 19 is_stmt 0 view .LVU6
  21 0004 488B8790 		movq	656(%rdi), %rax
  21      020000
 232:fltk-1.3.4-1/jpeg/jquant2.c ****   int row;
 233:fltk-1.3.4-1/jpeg/jquant2.c ****   JDIMENSION col;
 234:fltk-1.3.4-1/jpeg/jquant2.c ****   JDIMENSION width = cinfo->output_width;
  22              		.loc 1 234 14 view .LVU7
  23 000b 448B9788 		movl	136(%rdi), %r10d
  23      000000
 231:fltk-1.3.4-1/jpeg/jquant2.c ****   register hist3d histogram = cquantize->histogram;
  24              		.loc 1 231 19 view .LVU8
  25 0012 4C8B4030 		movq	48(%rax), %r8
  26              	.LVL2:
 232:fltk-1.3.4-1/jpeg/jquant2.c ****   int row;
  27              		.loc 1 232 3 is_stmt 1 view .LVU9
 233:fltk-1.3.4-1/jpeg/jquant2.c ****   JDIMENSION width = cinfo->output_width;
  28              		.loc 1 233 3 view .LVU10
  29              		.loc 1 234 3 view .LVU11
 235:fltk-1.3.4-1/jpeg/jquant2.c **** 
 236:fltk-1.3.4-1/jpeg/jquant2.c ****   for (row = 0; row < num_rows; row++) {
  30              		.loc 1 236 3 view .LVU12
  31              		.loc 1 236 17 view .LVU13
  32              		.loc 1 236 3 is_stmt 0 view .LVU14
  33 0016 85C9     		testl	%ecx, %ecx
  34 0018 7E71     		jle	.L16
  35 001a 8D41FF   		leal	-1(%rcx), %eax
 227:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  36              		.loc 1 227 1 view .LVU15
  37 001d 53       		pushq	%rbx
  38              		.cfi_def_cfa_offset 16
  39              		.cfi_offset 3, -16
  40              	.LVL3:
 227:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  41              		.loc 1 227 1 view .LVU16
  42 001e 4989F1   		movq	%rsi, %r9
  43 0021 4C8D5CC6 		leaq	8(%rsi,%rax,8), %r11
  43      08
  44 0026 418D42FF 		leal	-1(%r10), %eax
  45 002a 488D5C40 		leaq	3(%rax,%rax,2), %rbx
  45      03
  46              	.LVL4:
  47 002f 90       		.p2align 4,,10
  48              		.p2align 3
  49              	.L6:
 237:fltk-1.3.4-1/jpeg/jquant2.c ****     ptr = input_buf[row];
  50              		.loc 1 237 5 is_stmt 1 view .LVU17
  51              		.loc 1 237 9 is_stmt 0 view .LVU18
  52 0030 498B11   		movq	(%r9), %rdx
  53              	.LVL5:
 238:fltk-1.3.4-1/jpeg/jquant2.c ****     for (col = width; col > 0; col--) {
  54              		.loc 1 238 5 is_stmt 1 view .LVU19
  55              		.loc 1 238 23 view .LVU20
  56              		.loc 1 238 5 is_stmt 0 view .LVU21
  57 0033 4585D2   		testl	%r10d, %r10d
  58 0036 7448     		je	.L3
  59 0038 488D3C1A 		leaq	(%rdx,%rbx), %rdi
  60              	.LVL6:
  61 003c 0F1F4000 		.p2align 4,,10
  62              		.p2align 3
  63              	.L5:
 239:fltk-1.3.4-1/jpeg/jquant2.c ****       /* get pixel value and index into the histogram */
 240:fltk-1.3.4-1/jpeg/jquant2.c ****       histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
  64              		.loc 1 240 7 is_stmt 1 view .LVU22
 241:fltk-1.3.4-1/jpeg/jquant2.c **** 			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 242:fltk-1.3.4-1/jpeg/jquant2.c **** 			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 243:fltk-1.3.4-1/jpeg/jquant2.c ****       /* increment, check for overflow and undo increment if so. */
 244:fltk-1.3.4-1/jpeg/jquant2.c ****       if (++(*histp) <= 0)
  65              		.loc 1 244 7 view .LVU23
 241:fltk-1.3.4-1/jpeg/jquant2.c **** 			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
  66              		.loc 1 241 25 is_stmt 0 view .LVU24
  67 0040 0FB64201 		movzbl	1(%rdx), %eax
 240:fltk-1.3.4-1/jpeg/jquant2.c **** 			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
  68              		.loc 1 240 46 view .LVU25
  69 0044 0FB60A   		movzbl	(%rdx), %ecx
 242:fltk-1.3.4-1/jpeg/jquant2.c ****       /* increment, check for overflow and undo increment if so. */
  70              		.loc 1 242 25 view .LVU26
  71 0047 0FB67202 		movzbl	2(%rdx), %esi
 241:fltk-1.3.4-1/jpeg/jquant2.c **** 			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
  72              		.loc 1 241 25 view .LVU27
  73 004b C0E802   		shrb	$2, %al
 240:fltk-1.3.4-1/jpeg/jquant2.c **** 			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
  74              		.loc 1 240 46 view .LVU28
  75 004e C0E903   		shrb	$3, %cl
 241:fltk-1.3.4-1/jpeg/jquant2.c **** 			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
  76              		.loc 1 241 25 view .LVU29
  77 0051 0FB6C0   		movzbl	%al, %eax
 242:fltk-1.3.4-1/jpeg/jquant2.c ****       /* increment, check for overflow and undo increment if so. */
  78              		.loc 1 242 25 view .LVU30
  79 0054 40C0EE03 		shrb	$3, %sil
 240:fltk-1.3.4-1/jpeg/jquant2.c **** 			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
  80              		.loc 1 240 46 view .LVU31
  81 0058 0FB6C9   		movzbl	%cl, %ecx
  82              	.LVL7:
 241:fltk-1.3.4-1/jpeg/jquant2.c **** 			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
  83              		.loc 1 241 5 view .LVU32
  84 005b 48C1E006 		salq	$6, %rax
  85 005f 400FB6F6 		movzbl	%sil, %esi
  86 0063 488D0470 		leaq	(%rax,%rsi,2), %rax
  87 0067 490304C8 		addq	(%r8,%rcx,8), %rax
  88              		.loc 1 244 10 view .LVU33
  89 006b 0FB708   		movzwl	(%rax), %ecx
  90              	.LVL8:
  91              		.loc 1 244 10 view .LVU34
  92 006e 6683C101 		addw	$1, %cx
  93 0072 7403     		je	.L4
  94              		.loc 1 244 10 view .LVU35
  95 0074 668908   		movw	%cx, (%rax)
  96              	.LVL9:
  97              	.L4:
 245:fltk-1.3.4-1/jpeg/jquant2.c **** 	(*histp)--;
 246:fltk-1.3.4-1/jpeg/jquant2.c ****       ptr += 3;
  98              		.loc 1 246 7 is_stmt 1 discriminator 2 view .LVU36
  99              		.loc 1 246 11 is_stmt 0 discriminator 2 view .LVU37
 100 0077 4883C203 		addq	$3, %rdx
 101              	.LVL10:
 238:fltk-1.3.4-1/jpeg/jquant2.c ****       /* get pixel value and index into the histogram */
 102              		.loc 1 238 32 is_stmt 1 discriminator 2 view .LVU38
 238:fltk-1.3.4-1/jpeg/jquant2.c ****       /* get pixel value and index into the histogram */
 103              		.loc 1 238 23 discriminator 2 view .LVU39
 238:fltk-1.3.4-1/jpeg/jquant2.c ****       /* get pixel value and index into the histogram */
 104              		.loc 1 238 5 is_stmt 0 discriminator 2 view .LVU40
 105 007b 4839FA   		cmpq	%rdi, %rdx
 106 007e 75C0     		jne	.L5
 107              	.L3:
 236:fltk-1.3.4-1/jpeg/jquant2.c ****     ptr = input_buf[row];
 108              		.loc 1 236 33 is_stmt 1 view .LVU41
 236:fltk-1.3.4-1/jpeg/jquant2.c ****     ptr = input_buf[row];
 109              		.loc 1 236 17 view .LVU42
 110 0080 4983C108 		addq	$8, %r9
 236:fltk-1.3.4-1/jpeg/jquant2.c ****     ptr = input_buf[row];
 111              		.loc 1 236 3 is_stmt 0 view .LVU43
 112 0084 4D39CB   		cmpq	%r9, %r11
 113 0087 75A7     		jne	.L6
 247:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 248:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 249:fltk-1.3.4-1/jpeg/jquant2.c **** }
 114              		.loc 1 249 1 view .LVU44
 115 0089 5B       		popq	%rbx
 116              		.cfi_def_cfa_offset 8
 117 008a C3       		ret
 118              	.LVL11:
 119              	.L16:
 120              		.cfi_restore 3
 121              		.loc 1 249 1 view .LVU45
 122 008b C3       		ret
 123              		.cfi_endproc
 124              	.LFE51:
 126              		.section	.text.init_error_limit,"ax",@progbits
 127              		.p2align 4
 129              	init_error_limit:
 130              	.LVL12:
 131              	.LFB63:
 250:fltk-1.3.4-1/jpeg/jquant2.c **** 
 251:fltk-1.3.4-1/jpeg/jquant2.c **** 
 252:fltk-1.3.4-1/jpeg/jquant2.c **** /*
 253:fltk-1.3.4-1/jpeg/jquant2.c ****  * Next we have the really interesting routines: selection of a colormap
 254:fltk-1.3.4-1/jpeg/jquant2.c ****  * given the completed histogram.
 255:fltk-1.3.4-1/jpeg/jquant2.c ****  * These routines work with a list of "boxes", each representing a rectangular
 256:fltk-1.3.4-1/jpeg/jquant2.c ****  * subset of the input color space (to histogram precision).
 257:fltk-1.3.4-1/jpeg/jquant2.c ****  */
 258:fltk-1.3.4-1/jpeg/jquant2.c **** 
 259:fltk-1.3.4-1/jpeg/jquant2.c **** typedef struct {
 260:fltk-1.3.4-1/jpeg/jquant2.c ****   /* The bounds of the box (inclusive); expressed as histogram indexes */
 261:fltk-1.3.4-1/jpeg/jquant2.c ****   int c0min, c0max;
 262:fltk-1.3.4-1/jpeg/jquant2.c ****   int c1min, c1max;
 263:fltk-1.3.4-1/jpeg/jquant2.c ****   int c2min, c2max;
 264:fltk-1.3.4-1/jpeg/jquant2.c ****   /* The volume (actually 2-norm) of the box */
 265:fltk-1.3.4-1/jpeg/jquant2.c ****   INT32 volume;
 266:fltk-1.3.4-1/jpeg/jquant2.c ****   /* The number of nonzero histogram cells within this box */
 267:fltk-1.3.4-1/jpeg/jquant2.c ****   long colorcount;
 268:fltk-1.3.4-1/jpeg/jquant2.c **** } box;
 269:fltk-1.3.4-1/jpeg/jquant2.c **** 
 270:fltk-1.3.4-1/jpeg/jquant2.c **** typedef box * boxptr;
 271:fltk-1.3.4-1/jpeg/jquant2.c **** 
 272:fltk-1.3.4-1/jpeg/jquant2.c **** 
 273:fltk-1.3.4-1/jpeg/jquant2.c **** LOCAL(boxptr)
 274:fltk-1.3.4-1/jpeg/jquant2.c **** find_biggest_color_pop (boxptr boxlist, int numboxes)
 275:fltk-1.3.4-1/jpeg/jquant2.c **** /* Find the splittable box with the largest color population */
 276:fltk-1.3.4-1/jpeg/jquant2.c **** /* Returns NULL if no splittable boxes remain */
 277:fltk-1.3.4-1/jpeg/jquant2.c **** {
 278:fltk-1.3.4-1/jpeg/jquant2.c ****   register boxptr boxp;
 279:fltk-1.3.4-1/jpeg/jquant2.c ****   register int i;
 280:fltk-1.3.4-1/jpeg/jquant2.c ****   register long maxc = 0;
 281:fltk-1.3.4-1/jpeg/jquant2.c ****   boxptr which = NULL;
 282:fltk-1.3.4-1/jpeg/jquant2.c ****   
 283:fltk-1.3.4-1/jpeg/jquant2.c ****   for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 284:fltk-1.3.4-1/jpeg/jquant2.c ****     if (boxp->colorcount > maxc && boxp->volume > 0) {
 285:fltk-1.3.4-1/jpeg/jquant2.c ****       which = boxp;
 286:fltk-1.3.4-1/jpeg/jquant2.c ****       maxc = boxp->colorcount;
 287:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 288:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 289:fltk-1.3.4-1/jpeg/jquant2.c ****   return which;
 290:fltk-1.3.4-1/jpeg/jquant2.c **** }
 291:fltk-1.3.4-1/jpeg/jquant2.c **** 
 292:fltk-1.3.4-1/jpeg/jquant2.c **** 
 293:fltk-1.3.4-1/jpeg/jquant2.c **** LOCAL(boxptr)
 294:fltk-1.3.4-1/jpeg/jquant2.c **** find_biggest_volume (boxptr boxlist, int numboxes)
 295:fltk-1.3.4-1/jpeg/jquant2.c **** /* Find the splittable box with the largest (scaled) volume */
 296:fltk-1.3.4-1/jpeg/jquant2.c **** /* Returns NULL if no splittable boxes remain */
 297:fltk-1.3.4-1/jpeg/jquant2.c **** {
 298:fltk-1.3.4-1/jpeg/jquant2.c ****   register boxptr boxp;
 299:fltk-1.3.4-1/jpeg/jquant2.c ****   register int i;
 300:fltk-1.3.4-1/jpeg/jquant2.c ****   register INT32 maxv = 0;
 301:fltk-1.3.4-1/jpeg/jquant2.c ****   boxptr which = NULL;
 302:fltk-1.3.4-1/jpeg/jquant2.c ****   
 303:fltk-1.3.4-1/jpeg/jquant2.c ****   for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 304:fltk-1.3.4-1/jpeg/jquant2.c ****     if (boxp->volume > maxv) {
 305:fltk-1.3.4-1/jpeg/jquant2.c ****       which = boxp;
 306:fltk-1.3.4-1/jpeg/jquant2.c ****       maxv = boxp->volume;
 307:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 308:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 309:fltk-1.3.4-1/jpeg/jquant2.c ****   return which;
 310:fltk-1.3.4-1/jpeg/jquant2.c **** }
 311:fltk-1.3.4-1/jpeg/jquant2.c **** 
 312:fltk-1.3.4-1/jpeg/jquant2.c **** 
 313:fltk-1.3.4-1/jpeg/jquant2.c **** LOCAL(void)
 314:fltk-1.3.4-1/jpeg/jquant2.c **** update_box (j_decompress_ptr cinfo, boxptr boxp)
 315:fltk-1.3.4-1/jpeg/jquant2.c **** /* Shrink the min/max bounds of a box to enclose only nonzero elements, */
 316:fltk-1.3.4-1/jpeg/jquant2.c **** /* and recompute its volume and population */
 317:fltk-1.3.4-1/jpeg/jquant2.c **** {
 318:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 319:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram = cquantize->histogram;
 320:fltk-1.3.4-1/jpeg/jquant2.c ****   histptr histp;
 321:fltk-1.3.4-1/jpeg/jquant2.c ****   int c0,c1,c2;
 322:fltk-1.3.4-1/jpeg/jquant2.c ****   int c0min,c0max,c1min,c1max,c2min,c2max;
 323:fltk-1.3.4-1/jpeg/jquant2.c ****   INT32 dist0,dist1,dist2;
 324:fltk-1.3.4-1/jpeg/jquant2.c ****   long ccount;
 325:fltk-1.3.4-1/jpeg/jquant2.c ****   
 326:fltk-1.3.4-1/jpeg/jquant2.c ****   c0min = boxp->c0min;  c0max = boxp->c0max;
 327:fltk-1.3.4-1/jpeg/jquant2.c ****   c1min = boxp->c1min;  c1max = boxp->c1max;
 328:fltk-1.3.4-1/jpeg/jquant2.c ****   c2min = boxp->c2min;  c2max = boxp->c2max;
 329:fltk-1.3.4-1/jpeg/jquant2.c ****   
 330:fltk-1.3.4-1/jpeg/jquant2.c ****   if (c0max > c0min)
 331:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c0 = c0min; c0 <= c0max; c0++)
 332:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c1 = c1min; c1 <= c1max; c1++) {
 333:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 334:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c2 = c2min; c2 <= c2max; c2++)
 335:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 336:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c0min = c0min = c0;
 337:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c0min;
 338:fltk-1.3.4-1/jpeg/jquant2.c **** 	  }
 339:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 340:fltk-1.3.4-1/jpeg/jquant2.c ****  have_c0min:
 341:fltk-1.3.4-1/jpeg/jquant2.c ****   if (c0max > c0min)
 342:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c0 = c0max; c0 >= c0min; c0--)
 343:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c1 = c1min; c1 <= c1max; c1++) {
 344:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 345:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c2 = c2min; c2 <= c2max; c2++)
 346:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 347:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c0max = c0max = c0;
 348:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c0max;
 349:fltk-1.3.4-1/jpeg/jquant2.c **** 	  }
 350:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 351:fltk-1.3.4-1/jpeg/jquant2.c ****  have_c0max:
 352:fltk-1.3.4-1/jpeg/jquant2.c ****   if (c1max > c1min)
 353:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++)
 354:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 355:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 356:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c2 = c2min; c2 <= c2max; c2++)
 357:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 358:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c1min = c1min = c1;
 359:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c1min;
 360:fltk-1.3.4-1/jpeg/jquant2.c **** 	  }
 361:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 362:fltk-1.3.4-1/jpeg/jquant2.c ****  have_c1min:
 363:fltk-1.3.4-1/jpeg/jquant2.c ****   if (c1max > c1min)
 364:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1max; c1 >= c1min; c1--)
 365:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 366:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 367:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c2 = c2min; c2 <= c2max; c2++)
 368:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 369:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c1max = c1max = c1;
 370:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c1max;
 371:fltk-1.3.4-1/jpeg/jquant2.c **** 	  }
 372:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 373:fltk-1.3.4-1/jpeg/jquant2.c ****  have_c1max:
 374:fltk-1.3.4-1/jpeg/jquant2.c ****   if (c2max > c2min)
 375:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c2 = c2min; c2 <= c2max; c2++)
 376:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 377:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1min][c2];
 378:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 379:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 380:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c2min = c2min = c2;
 381:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c2min;
 382:fltk-1.3.4-1/jpeg/jquant2.c **** 	  }
 383:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 384:fltk-1.3.4-1/jpeg/jquant2.c ****  have_c2min:
 385:fltk-1.3.4-1/jpeg/jquant2.c ****   if (c2max > c2min)
 386:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c2 = c2max; c2 >= c2min; c2--)
 387:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 388:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1min][c2];
 389:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 390:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 391:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c2max = c2max = c2;
 392:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c2max;
 393:fltk-1.3.4-1/jpeg/jquant2.c **** 	  }
 394:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 395:fltk-1.3.4-1/jpeg/jquant2.c ****  have_c2max:
 396:fltk-1.3.4-1/jpeg/jquant2.c **** 
 397:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Update box volume.
 398:fltk-1.3.4-1/jpeg/jquant2.c ****    * We use 2-norm rather than real volume here; this biases the method
 399:fltk-1.3.4-1/jpeg/jquant2.c ****    * against making long narrow boxes, and it has the side benefit that
 400:fltk-1.3.4-1/jpeg/jquant2.c ****    * a box is splittable iff norm > 0.
 401:fltk-1.3.4-1/jpeg/jquant2.c ****    * Since the differences are expressed in histogram-cell units,
 402:fltk-1.3.4-1/jpeg/jquant2.c ****    * we have to shift back to JSAMPLE units to get consistent distances;
 403:fltk-1.3.4-1/jpeg/jquant2.c ****    * after which, we scale according to the selected distance scale factors.
 404:fltk-1.3.4-1/jpeg/jquant2.c ****    */
 405:fltk-1.3.4-1/jpeg/jquant2.c ****   dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 406:fltk-1.3.4-1/jpeg/jquant2.c ****   dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 407:fltk-1.3.4-1/jpeg/jquant2.c ****   dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 408:fltk-1.3.4-1/jpeg/jquant2.c ****   boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 409:fltk-1.3.4-1/jpeg/jquant2.c ****   
 410:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Now scan remaining volume of box and compute population */
 411:fltk-1.3.4-1/jpeg/jquant2.c ****   ccount = 0;
 412:fltk-1.3.4-1/jpeg/jquant2.c ****   for (c0 = c0min; c0 <= c0max; c0++)
 413:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 414:fltk-1.3.4-1/jpeg/jquant2.c ****       histp = & histogram[c0][c1][c2min];
 415:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c2 = c2min; c2 <= c2max; c2++, histp++)
 416:fltk-1.3.4-1/jpeg/jquant2.c **** 	if (*histp != 0) {
 417:fltk-1.3.4-1/jpeg/jquant2.c **** 	  ccount++;
 418:fltk-1.3.4-1/jpeg/jquant2.c **** 	}
 419:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 420:fltk-1.3.4-1/jpeg/jquant2.c ****   boxp->colorcount = ccount;
 421:fltk-1.3.4-1/jpeg/jquant2.c **** }
 422:fltk-1.3.4-1/jpeg/jquant2.c **** 
 423:fltk-1.3.4-1/jpeg/jquant2.c **** 
 424:fltk-1.3.4-1/jpeg/jquant2.c **** LOCAL(int)
 425:fltk-1.3.4-1/jpeg/jquant2.c **** median_cut (j_decompress_ptr cinfo, boxptr boxlist, int numboxes,
 426:fltk-1.3.4-1/jpeg/jquant2.c **** 	    int desired_colors)
 427:fltk-1.3.4-1/jpeg/jquant2.c **** /* Repeatedly select and split the largest box until we have enough boxes */
 428:fltk-1.3.4-1/jpeg/jquant2.c **** {
 429:fltk-1.3.4-1/jpeg/jquant2.c ****   int n,lb;
 430:fltk-1.3.4-1/jpeg/jquant2.c ****   int c0,c1,c2,cmax;
 431:fltk-1.3.4-1/jpeg/jquant2.c ****   register boxptr b1,b2;
 432:fltk-1.3.4-1/jpeg/jquant2.c **** 
 433:fltk-1.3.4-1/jpeg/jquant2.c ****   while (numboxes < desired_colors) {
 434:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Select box to split.
 435:fltk-1.3.4-1/jpeg/jquant2.c ****      * Current algorithm: by population for first half, then by volume.
 436:fltk-1.3.4-1/jpeg/jquant2.c ****      */
 437:fltk-1.3.4-1/jpeg/jquant2.c ****     if (numboxes*2 <= desired_colors) {
 438:fltk-1.3.4-1/jpeg/jquant2.c ****       b1 = find_biggest_color_pop(boxlist, numboxes);
 439:fltk-1.3.4-1/jpeg/jquant2.c ****     } else {
 440:fltk-1.3.4-1/jpeg/jquant2.c ****       b1 = find_biggest_volume(boxlist, numboxes);
 441:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 442:fltk-1.3.4-1/jpeg/jquant2.c ****     if (b1 == NULL)		/* no splittable boxes left! */
 443:fltk-1.3.4-1/jpeg/jquant2.c ****       break;
 444:fltk-1.3.4-1/jpeg/jquant2.c ****     b2 = &boxlist[numboxes];	/* where new box will go */
 445:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Copy the color bounds to the new box. */
 446:fltk-1.3.4-1/jpeg/jquant2.c ****     b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
 447:fltk-1.3.4-1/jpeg/jquant2.c ****     b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 448:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Choose which axis to split the box on.
 449:fltk-1.3.4-1/jpeg/jquant2.c ****      * Current algorithm: longest scaled axis.
 450:fltk-1.3.4-1/jpeg/jquant2.c ****      * See notes in update_box about scaling distances.
 451:fltk-1.3.4-1/jpeg/jquant2.c ****      */
 452:fltk-1.3.4-1/jpeg/jquant2.c ****     c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 453:fltk-1.3.4-1/jpeg/jquant2.c ****     c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 454:fltk-1.3.4-1/jpeg/jquant2.c ****     c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 455:fltk-1.3.4-1/jpeg/jquant2.c ****     /* We want to break any ties in favor of green, then red, blue last.
 456:fltk-1.3.4-1/jpeg/jquant2.c ****      * This code does the right thing for R,G,B or B,G,R color orders only.
 457:fltk-1.3.4-1/jpeg/jquant2.c ****      */
 458:fltk-1.3.4-1/jpeg/jquant2.c **** #if RGB_RED == 0
 459:fltk-1.3.4-1/jpeg/jquant2.c ****     cmax = c1; n = 1;
 460:fltk-1.3.4-1/jpeg/jquant2.c ****     if (c0 > cmax) { cmax = c0; n = 0; }
 461:fltk-1.3.4-1/jpeg/jquant2.c ****     if (c2 > cmax) { n = 2; }
 462:fltk-1.3.4-1/jpeg/jquant2.c **** #else
 463:fltk-1.3.4-1/jpeg/jquant2.c ****     cmax = c1; n = 1;
 464:fltk-1.3.4-1/jpeg/jquant2.c ****     if (c2 > cmax) { cmax = c2; n = 2; }
 465:fltk-1.3.4-1/jpeg/jquant2.c ****     if (c0 > cmax) { n = 0; }
 466:fltk-1.3.4-1/jpeg/jquant2.c **** #endif
 467:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Choose split point along selected axis, and update box bounds.
 468:fltk-1.3.4-1/jpeg/jquant2.c ****      * Current algorithm: split at halfway point.
 469:fltk-1.3.4-1/jpeg/jquant2.c ****      * (Since the box has been shrunk to minimum volume,
 470:fltk-1.3.4-1/jpeg/jquant2.c ****      * any split will produce two nonempty subboxes.)
 471:fltk-1.3.4-1/jpeg/jquant2.c ****      * Note that lb value is max for lower box, so must be < old max.
 472:fltk-1.3.4-1/jpeg/jquant2.c ****      */
 473:fltk-1.3.4-1/jpeg/jquant2.c ****     switch (n) {
 474:fltk-1.3.4-1/jpeg/jquant2.c ****     case 0:
 475:fltk-1.3.4-1/jpeg/jquant2.c ****       lb = (b1->c0max + b1->c0min) / 2;
 476:fltk-1.3.4-1/jpeg/jquant2.c ****       b1->c0max = lb;
 477:fltk-1.3.4-1/jpeg/jquant2.c ****       b2->c0min = lb+1;
 478:fltk-1.3.4-1/jpeg/jquant2.c ****       break;
 479:fltk-1.3.4-1/jpeg/jquant2.c ****     case 1:
 480:fltk-1.3.4-1/jpeg/jquant2.c ****       lb = (b1->c1max + b1->c1min) / 2;
 481:fltk-1.3.4-1/jpeg/jquant2.c ****       b1->c1max = lb;
 482:fltk-1.3.4-1/jpeg/jquant2.c ****       b2->c1min = lb+1;
 483:fltk-1.3.4-1/jpeg/jquant2.c ****       break;
 484:fltk-1.3.4-1/jpeg/jquant2.c ****     case 2:
 485:fltk-1.3.4-1/jpeg/jquant2.c ****       lb = (b1->c2max + b1->c2min) / 2;
 486:fltk-1.3.4-1/jpeg/jquant2.c ****       b1->c2max = lb;
 487:fltk-1.3.4-1/jpeg/jquant2.c ****       b2->c2min = lb+1;
 488:fltk-1.3.4-1/jpeg/jquant2.c ****       break;
 489:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 490:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Update stats for boxes */
 491:fltk-1.3.4-1/jpeg/jquant2.c ****     update_box(cinfo, b1);
 492:fltk-1.3.4-1/jpeg/jquant2.c ****     update_box(cinfo, b2);
 493:fltk-1.3.4-1/jpeg/jquant2.c ****     numboxes++;
 494:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 495:fltk-1.3.4-1/jpeg/jquant2.c ****   return numboxes;
 496:fltk-1.3.4-1/jpeg/jquant2.c **** }
 497:fltk-1.3.4-1/jpeg/jquant2.c **** 
 498:fltk-1.3.4-1/jpeg/jquant2.c **** 
 499:fltk-1.3.4-1/jpeg/jquant2.c **** LOCAL(void)
 500:fltk-1.3.4-1/jpeg/jquant2.c **** compute_color (j_decompress_ptr cinfo, boxptr boxp, int icolor)
 501:fltk-1.3.4-1/jpeg/jquant2.c **** /* Compute representative color for a box, put it in colormap[icolor] */
 502:fltk-1.3.4-1/jpeg/jquant2.c **** {
 503:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Current algorithm: mean weighted by pixels (not colors) */
 504:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Note it is important to get the rounding correct! */
 505:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 506:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram = cquantize->histogram;
 507:fltk-1.3.4-1/jpeg/jquant2.c ****   histptr histp;
 508:fltk-1.3.4-1/jpeg/jquant2.c ****   int c0,c1,c2;
 509:fltk-1.3.4-1/jpeg/jquant2.c ****   int c0min,c0max,c1min,c1max,c2min,c2max;
 510:fltk-1.3.4-1/jpeg/jquant2.c ****   long count;
 511:fltk-1.3.4-1/jpeg/jquant2.c ****   long total = 0;
 512:fltk-1.3.4-1/jpeg/jquant2.c ****   long c0total = 0;
 513:fltk-1.3.4-1/jpeg/jquant2.c ****   long c1total = 0;
 514:fltk-1.3.4-1/jpeg/jquant2.c ****   long c2total = 0;
 515:fltk-1.3.4-1/jpeg/jquant2.c ****   
 516:fltk-1.3.4-1/jpeg/jquant2.c ****   c0min = boxp->c0min;  c0max = boxp->c0max;
 517:fltk-1.3.4-1/jpeg/jquant2.c ****   c1min = boxp->c1min;  c1max = boxp->c1max;
 518:fltk-1.3.4-1/jpeg/jquant2.c ****   c2min = boxp->c2min;  c2max = boxp->c2max;
 519:fltk-1.3.4-1/jpeg/jquant2.c ****   
 520:fltk-1.3.4-1/jpeg/jquant2.c ****   for (c0 = c0min; c0 <= c0max; c0++)
 521:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 522:fltk-1.3.4-1/jpeg/jquant2.c ****       histp = & histogram[c0][c1][c2min];
 523:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c2 = c2min; c2 <= c2max; c2++) {
 524:fltk-1.3.4-1/jpeg/jquant2.c **** 	if ((count = *histp++) != 0) {
 525:fltk-1.3.4-1/jpeg/jquant2.c **** 	  total += count;
 526:fltk-1.3.4-1/jpeg/jquant2.c **** 	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 527:fltk-1.3.4-1/jpeg/jquant2.c **** 	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 528:fltk-1.3.4-1/jpeg/jquant2.c **** 	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 529:fltk-1.3.4-1/jpeg/jquant2.c **** 	}
 530:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 531:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 532:fltk-1.3.4-1/jpeg/jquant2.c ****   
 533:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 534:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 535:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 536:fltk-1.3.4-1/jpeg/jquant2.c **** }
 537:fltk-1.3.4-1/jpeg/jquant2.c **** 
 538:fltk-1.3.4-1/jpeg/jquant2.c **** 
 539:fltk-1.3.4-1/jpeg/jquant2.c **** LOCAL(void)
 540:fltk-1.3.4-1/jpeg/jquant2.c **** select_colors (j_decompress_ptr cinfo, int desired_colors)
 541:fltk-1.3.4-1/jpeg/jquant2.c **** /* Master routine for color selection */
 542:fltk-1.3.4-1/jpeg/jquant2.c **** {
 543:fltk-1.3.4-1/jpeg/jquant2.c ****   boxptr boxlist;
 544:fltk-1.3.4-1/jpeg/jquant2.c ****   int numboxes;
 545:fltk-1.3.4-1/jpeg/jquant2.c ****   int i;
 546:fltk-1.3.4-1/jpeg/jquant2.c **** 
 547:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Allocate workspace for box list */
 548:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist = (boxptr) (*cinfo->mem->alloc_small)
 549:fltk-1.3.4-1/jpeg/jquant2.c ****     ((j_common_ptr) cinfo, JPOOL_IMAGE, desired_colors * SIZEOF(box));
 550:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Initialize one box containing whole space */
 551:fltk-1.3.4-1/jpeg/jquant2.c ****   numboxes = 1;
 552:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c0min = 0;
 553:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 554:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c1min = 0;
 555:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 556:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c2min = 0;
 557:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 558:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Shrink it to actually-used volume and set its statistics */
 559:fltk-1.3.4-1/jpeg/jquant2.c ****   update_box(cinfo, & boxlist[0]);
 560:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Perform median-cut to produce final box list */
 561:fltk-1.3.4-1/jpeg/jquant2.c ****   numboxes = median_cut(cinfo, boxlist, numboxes, desired_colors);
 562:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Compute the representative color for each box, fill colormap */
 563:fltk-1.3.4-1/jpeg/jquant2.c ****   for (i = 0; i < numboxes; i++)
 564:fltk-1.3.4-1/jpeg/jquant2.c ****     compute_color(cinfo, & boxlist[i], i);
 565:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->actual_number_of_colors = numboxes;
 566:fltk-1.3.4-1/jpeg/jquant2.c ****   TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 567:fltk-1.3.4-1/jpeg/jquant2.c **** }
 568:fltk-1.3.4-1/jpeg/jquant2.c **** 
 569:fltk-1.3.4-1/jpeg/jquant2.c **** 
 570:fltk-1.3.4-1/jpeg/jquant2.c **** /*
 571:fltk-1.3.4-1/jpeg/jquant2.c ****  * These routines are concerned with the time-critical task of mapping input
 572:fltk-1.3.4-1/jpeg/jquant2.c ****  * colors to the nearest color in the selected colormap.
 573:fltk-1.3.4-1/jpeg/jquant2.c ****  *
 574:fltk-1.3.4-1/jpeg/jquant2.c ****  * We re-use the histogram space as an "inverse color map", essentially a
 575:fltk-1.3.4-1/jpeg/jquant2.c ****  * cache for the results of nearest-color searches.  All colors within a
 576:fltk-1.3.4-1/jpeg/jquant2.c ****  * histogram cell will be mapped to the same colormap entry, namely the one
 577:fltk-1.3.4-1/jpeg/jquant2.c ****  * closest to the cell's center.  This may not be quite the closest entry to
 578:fltk-1.3.4-1/jpeg/jquant2.c ****  * the actual input color, but it's almost as good.  A zero in the cache
 579:fltk-1.3.4-1/jpeg/jquant2.c ****  * indicates we haven't found the nearest color for that cell yet; the array
 580:fltk-1.3.4-1/jpeg/jquant2.c ****  * is cleared to zeroes before starting the mapping pass.  When we find the
 581:fltk-1.3.4-1/jpeg/jquant2.c ****  * nearest color for a cell, its colormap index plus one is recorded in the
 582:fltk-1.3.4-1/jpeg/jquant2.c ****  * cache for future use.  The pass2 scanning routines call fill_inverse_cmap
 583:fltk-1.3.4-1/jpeg/jquant2.c ****  * when they need to use an unfilled entry in the cache.
 584:fltk-1.3.4-1/jpeg/jquant2.c ****  *
 585:fltk-1.3.4-1/jpeg/jquant2.c ****  * Our method of efficiently finding nearest colors is based on the "locally
 586:fltk-1.3.4-1/jpeg/jquant2.c ****  * sorted search" idea described by Heckbert and on the incremental distance
 587:fltk-1.3.4-1/jpeg/jquant2.c ****  * calculation described by Spencer W. Thomas in chapter III.1 of Graphics
 588:fltk-1.3.4-1/jpeg/jquant2.c ****  * Gems II (James Arvo, ed.  Academic Press, 1991).  Thomas points out that
 589:fltk-1.3.4-1/jpeg/jquant2.c ****  * the distances from a given colormap entry to each cell of the histogram can
 590:fltk-1.3.4-1/jpeg/jquant2.c ****  * be computed quickly using an incremental method: the differences between
 591:fltk-1.3.4-1/jpeg/jquant2.c ****  * distances to adjacent cells themselves differ by a constant.  This allows a
 592:fltk-1.3.4-1/jpeg/jquant2.c ****  * fairly fast implementation of the "brute force" approach of computing the
 593:fltk-1.3.4-1/jpeg/jquant2.c ****  * distance from every colormap entry to every histogram cell.  Unfortunately,
 594:fltk-1.3.4-1/jpeg/jquant2.c ****  * it needs a work array to hold the best-distance-so-far for each histogram
 595:fltk-1.3.4-1/jpeg/jquant2.c ****  * cell (because the inner loop has to be over cells, not colormap entries).
 596:fltk-1.3.4-1/jpeg/jquant2.c ****  * The work array elements have to be INT32s, so the work array would need
 597:fltk-1.3.4-1/jpeg/jquant2.c ****  * 256Kb at our recommended precision.  This is not feasible in DOS machines.
 598:fltk-1.3.4-1/jpeg/jquant2.c ****  *
 599:fltk-1.3.4-1/jpeg/jquant2.c ****  * To get around these problems, we apply Thomas' method to compute the
 600:fltk-1.3.4-1/jpeg/jquant2.c ****  * nearest colors for only the cells within a small subbox of the histogram.
 601:fltk-1.3.4-1/jpeg/jquant2.c ****  * The work array need be only as big as the subbox, so the memory usage
 602:fltk-1.3.4-1/jpeg/jquant2.c ****  * problem is solved.  Furthermore, we need not fill subboxes that are never
 603:fltk-1.3.4-1/jpeg/jquant2.c ****  * referenced in pass2; many images use only part of the color gamut, so a
 604:fltk-1.3.4-1/jpeg/jquant2.c ****  * fair amount of work is saved.  An additional advantage of this
 605:fltk-1.3.4-1/jpeg/jquant2.c ****  * approach is that we can apply Heckbert's locality criterion to quickly
 606:fltk-1.3.4-1/jpeg/jquant2.c ****  * eliminate colormap entries that are far away from the subbox; typically
 607:fltk-1.3.4-1/jpeg/jquant2.c ****  * three-fourths of the colormap entries are rejected by Heckbert's criterion,
 608:fltk-1.3.4-1/jpeg/jquant2.c ****  * and we need not compute their distances to individual cells in the subbox.
 609:fltk-1.3.4-1/jpeg/jquant2.c ****  * The speed of this approach is heavily influenced by the subbox size: too
 610:fltk-1.3.4-1/jpeg/jquant2.c ****  * small means too much overhead, too big loses because Heckbert's criterion
 611:fltk-1.3.4-1/jpeg/jquant2.c ****  * can't eliminate as many colormap entries.  Empirically the best subbox
 612:fltk-1.3.4-1/jpeg/jquant2.c ****  * size seems to be about 1/512th of the histogram (1/8th in each direction).
 613:fltk-1.3.4-1/jpeg/jquant2.c ****  *
 614:fltk-1.3.4-1/jpeg/jquant2.c ****  * Thomas' article also describes a refined method which is asymptotically
 615:fltk-1.3.4-1/jpeg/jquant2.c ****  * faster than the brute-force method, but it is also far more complex and
 616:fltk-1.3.4-1/jpeg/jquant2.c ****  * cannot efficiently be applied to small subboxes.  It is therefore not
 617:fltk-1.3.4-1/jpeg/jquant2.c ****  * useful for programs intended to be portable to DOS machines.  On machines
 618:fltk-1.3.4-1/jpeg/jquant2.c ****  * with plenty of memory, filling the whole histogram in one shot with Thomas'
 619:fltk-1.3.4-1/jpeg/jquant2.c ****  * refined method might be faster than the present code --- but then again,
 620:fltk-1.3.4-1/jpeg/jquant2.c ****  * it might not be any faster, and it's certainly more complicated.
 621:fltk-1.3.4-1/jpeg/jquant2.c ****  */
 622:fltk-1.3.4-1/jpeg/jquant2.c **** 
 623:fltk-1.3.4-1/jpeg/jquant2.c **** 
 624:fltk-1.3.4-1/jpeg/jquant2.c **** /* log2(histogram cells in update box) for each axis; this can be adjusted */
 625:fltk-1.3.4-1/jpeg/jquant2.c **** #define BOX_C0_LOG  (HIST_C0_BITS-3)
 626:fltk-1.3.4-1/jpeg/jquant2.c **** #define BOX_C1_LOG  (HIST_C1_BITS-3)
 627:fltk-1.3.4-1/jpeg/jquant2.c **** #define BOX_C2_LOG  (HIST_C2_BITS-3)
 628:fltk-1.3.4-1/jpeg/jquant2.c **** 
 629:fltk-1.3.4-1/jpeg/jquant2.c **** #define BOX_C0_ELEMS  (1<<BOX_C0_LOG) /* # of hist cells in update box */
 630:fltk-1.3.4-1/jpeg/jquant2.c **** #define BOX_C1_ELEMS  (1<<BOX_C1_LOG)
 631:fltk-1.3.4-1/jpeg/jquant2.c **** #define BOX_C2_ELEMS  (1<<BOX_C2_LOG)
 632:fltk-1.3.4-1/jpeg/jquant2.c **** 
 633:fltk-1.3.4-1/jpeg/jquant2.c **** #define BOX_C0_SHIFT  (C0_SHIFT + BOX_C0_LOG)
 634:fltk-1.3.4-1/jpeg/jquant2.c **** #define BOX_C1_SHIFT  (C1_SHIFT + BOX_C1_LOG)
 635:fltk-1.3.4-1/jpeg/jquant2.c **** #define BOX_C2_SHIFT  (C2_SHIFT + BOX_C2_LOG)
 636:fltk-1.3.4-1/jpeg/jquant2.c **** 
 637:fltk-1.3.4-1/jpeg/jquant2.c **** 
 638:fltk-1.3.4-1/jpeg/jquant2.c **** /*
 639:fltk-1.3.4-1/jpeg/jquant2.c ****  * The next three routines implement inverse colormap filling.  They could
 640:fltk-1.3.4-1/jpeg/jquant2.c ****  * all be folded into one big routine, but splitting them up this way saves
 641:fltk-1.3.4-1/jpeg/jquant2.c ****  * some stack space (the mindist[] and bestdist[] arrays need not coexist)
 642:fltk-1.3.4-1/jpeg/jquant2.c ****  * and may allow some compilers to produce better code by registerizing more
 643:fltk-1.3.4-1/jpeg/jquant2.c ****  * inner-loop variables.
 644:fltk-1.3.4-1/jpeg/jquant2.c ****  */
 645:fltk-1.3.4-1/jpeg/jquant2.c **** 
 646:fltk-1.3.4-1/jpeg/jquant2.c **** LOCAL(int)
 647:fltk-1.3.4-1/jpeg/jquant2.c **** find_nearby_colors (j_decompress_ptr cinfo, int minc0, int minc1, int minc2,
 648:fltk-1.3.4-1/jpeg/jquant2.c **** 		    JSAMPLE colorlist[])
 649:fltk-1.3.4-1/jpeg/jquant2.c **** /* Locate the colormap entries close enough to an update box to be candidates
 650:fltk-1.3.4-1/jpeg/jquant2.c ****  * for the nearest entry to some cell(s) in the update box.  The update box
 651:fltk-1.3.4-1/jpeg/jquant2.c ****  * is specified by the center coordinates of its first cell.  The number of
 652:fltk-1.3.4-1/jpeg/jquant2.c ****  * candidate colormap entries is returned, and their colormap indexes are
 653:fltk-1.3.4-1/jpeg/jquant2.c ****  * placed in colorlist[].
 654:fltk-1.3.4-1/jpeg/jquant2.c ****  * This routine uses Heckbert's "locally sorted search" criterion to select
 655:fltk-1.3.4-1/jpeg/jquant2.c ****  * the colors that need further consideration.
 656:fltk-1.3.4-1/jpeg/jquant2.c ****  */
 657:fltk-1.3.4-1/jpeg/jquant2.c **** {
 658:fltk-1.3.4-1/jpeg/jquant2.c ****   int numcolors = cinfo->actual_number_of_colors;
 659:fltk-1.3.4-1/jpeg/jquant2.c ****   int maxc0, maxc1, maxc2;
 660:fltk-1.3.4-1/jpeg/jquant2.c ****   int centerc0, centerc1, centerc2;
 661:fltk-1.3.4-1/jpeg/jquant2.c ****   int i, x, ncolors;
 662:fltk-1.3.4-1/jpeg/jquant2.c ****   INT32 minmaxdist, min_dist, max_dist, tdist;
 663:fltk-1.3.4-1/jpeg/jquant2.c ****   INT32 mindist[MAXNUMCOLORS];	/* min distance to colormap entry i */
 664:fltk-1.3.4-1/jpeg/jquant2.c **** 
 665:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Compute true coordinates of update box's upper corner and center.
 666:fltk-1.3.4-1/jpeg/jquant2.c ****    * Actually we compute the coordinates of the center of the upper-corner
 667:fltk-1.3.4-1/jpeg/jquant2.c ****    * histogram cell, which are the upper bounds of the volume we care about.
 668:fltk-1.3.4-1/jpeg/jquant2.c ****    * Note that since ">>" rounds down, the "center" values may be closer to
 669:fltk-1.3.4-1/jpeg/jquant2.c ****    * min than to max; hence comparisons to them must be "<=", not "<".
 670:fltk-1.3.4-1/jpeg/jquant2.c ****    */
 671:fltk-1.3.4-1/jpeg/jquant2.c ****   maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
 672:fltk-1.3.4-1/jpeg/jquant2.c ****   centerc0 = (minc0 + maxc0) >> 1;
 673:fltk-1.3.4-1/jpeg/jquant2.c ****   maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 674:fltk-1.3.4-1/jpeg/jquant2.c ****   centerc1 = (minc1 + maxc1) >> 1;
 675:fltk-1.3.4-1/jpeg/jquant2.c ****   maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 676:fltk-1.3.4-1/jpeg/jquant2.c ****   centerc2 = (minc2 + maxc2) >> 1;
 677:fltk-1.3.4-1/jpeg/jquant2.c **** 
 678:fltk-1.3.4-1/jpeg/jquant2.c ****   /* For each color in colormap, find:
 679:fltk-1.3.4-1/jpeg/jquant2.c ****    *  1. its minimum squared-distance to any point in the update box
 680:fltk-1.3.4-1/jpeg/jquant2.c ****    *     (zero if color is within update box);
 681:fltk-1.3.4-1/jpeg/jquant2.c ****    *  2. its maximum squared-distance to any point in the update box.
 682:fltk-1.3.4-1/jpeg/jquant2.c ****    * Both of these can be found by considering only the corners of the box.
 683:fltk-1.3.4-1/jpeg/jquant2.c ****    * We save the minimum distance for each color in mindist[];
 684:fltk-1.3.4-1/jpeg/jquant2.c ****    * only the smallest maximum distance is of interest.
 685:fltk-1.3.4-1/jpeg/jquant2.c ****    */
 686:fltk-1.3.4-1/jpeg/jquant2.c ****   minmaxdist = 0x7FFFFFFFL;
 687:fltk-1.3.4-1/jpeg/jquant2.c **** 
 688:fltk-1.3.4-1/jpeg/jquant2.c ****   for (i = 0; i < numcolors; i++) {
 689:fltk-1.3.4-1/jpeg/jquant2.c ****     /* We compute the squared-c0-distance term, then add in the other two. */
 690:fltk-1.3.4-1/jpeg/jquant2.c ****     x = GETJSAMPLE(cinfo->colormap[0][i]);
 691:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc0) {
 692:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc0) * C0_SCALE;
 693:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist = tdist*tdist;
 694:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc0) * C0_SCALE;
 695:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist = tdist*tdist;
 696:fltk-1.3.4-1/jpeg/jquant2.c ****     } else if (x > maxc0) {
 697:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc0) * C0_SCALE;
 698:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist = tdist*tdist;
 699:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc0) * C0_SCALE;
 700:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist = tdist*tdist;
 701:fltk-1.3.4-1/jpeg/jquant2.c ****     } else {
 702:fltk-1.3.4-1/jpeg/jquant2.c ****       /* within cell range so no contribution to min_dist */
 703:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist = 0;
 704:fltk-1.3.4-1/jpeg/jquant2.c ****       if (x <= centerc0) {
 705:fltk-1.3.4-1/jpeg/jquant2.c **** 	tdist = (x - maxc0) * C0_SCALE;
 706:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist = tdist*tdist;
 707:fltk-1.3.4-1/jpeg/jquant2.c ****       } else {
 708:fltk-1.3.4-1/jpeg/jquant2.c **** 	tdist = (x - minc0) * C0_SCALE;
 709:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist = tdist*tdist;
 710:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 711:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 712:fltk-1.3.4-1/jpeg/jquant2.c **** 
 713:fltk-1.3.4-1/jpeg/jquant2.c ****     x = GETJSAMPLE(cinfo->colormap[1][i]);
 714:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc1) {
 715:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc1) * C1_SCALE;
 716:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 717:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc1) * C1_SCALE;
 718:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist += tdist*tdist;
 719:fltk-1.3.4-1/jpeg/jquant2.c ****     } else if (x > maxc1) {
 720:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc1) * C1_SCALE;
 721:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 722:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc1) * C1_SCALE;
 723:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist += tdist*tdist;
 724:fltk-1.3.4-1/jpeg/jquant2.c ****     } else {
 725:fltk-1.3.4-1/jpeg/jquant2.c ****       /* within cell range so no contribution to min_dist */
 726:fltk-1.3.4-1/jpeg/jquant2.c ****       if (x <= centerc1) {
 727:fltk-1.3.4-1/jpeg/jquant2.c **** 	tdist = (x - maxc1) * C1_SCALE;
 728:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 729:fltk-1.3.4-1/jpeg/jquant2.c ****       } else {
 730:fltk-1.3.4-1/jpeg/jquant2.c **** 	tdist = (x - minc1) * C1_SCALE;
 731:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 732:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 733:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 734:fltk-1.3.4-1/jpeg/jquant2.c **** 
 735:fltk-1.3.4-1/jpeg/jquant2.c ****     x = GETJSAMPLE(cinfo->colormap[2][i]);
 736:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc2) {
 737:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc2) * C2_SCALE;
 738:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 739:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc2) * C2_SCALE;
 740:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist += tdist*tdist;
 741:fltk-1.3.4-1/jpeg/jquant2.c ****     } else if (x > maxc2) {
 742:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc2) * C2_SCALE;
 743:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 744:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc2) * C2_SCALE;
 745:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist += tdist*tdist;
 746:fltk-1.3.4-1/jpeg/jquant2.c ****     } else {
 747:fltk-1.3.4-1/jpeg/jquant2.c ****       /* within cell range so no contribution to min_dist */
 748:fltk-1.3.4-1/jpeg/jquant2.c ****       if (x <= centerc2) {
 749:fltk-1.3.4-1/jpeg/jquant2.c **** 	tdist = (x - maxc2) * C2_SCALE;
 750:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 751:fltk-1.3.4-1/jpeg/jquant2.c ****       } else {
 752:fltk-1.3.4-1/jpeg/jquant2.c **** 	tdist = (x - minc2) * C2_SCALE;
 753:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 754:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 755:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 756:fltk-1.3.4-1/jpeg/jquant2.c **** 
 757:fltk-1.3.4-1/jpeg/jquant2.c ****     mindist[i] = min_dist;	/* save away the results */
 758:fltk-1.3.4-1/jpeg/jquant2.c ****     if (max_dist < minmaxdist)
 759:fltk-1.3.4-1/jpeg/jquant2.c ****       minmaxdist = max_dist;
 760:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 761:fltk-1.3.4-1/jpeg/jquant2.c **** 
 762:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Now we know that no cell in the update box is more than minmaxdist
 763:fltk-1.3.4-1/jpeg/jquant2.c ****    * away from some colormap entry.  Therefore, only colors that are
 764:fltk-1.3.4-1/jpeg/jquant2.c ****    * within minmaxdist of some part of the box need be considered.
 765:fltk-1.3.4-1/jpeg/jquant2.c ****    */
 766:fltk-1.3.4-1/jpeg/jquant2.c ****   ncolors = 0;
 767:fltk-1.3.4-1/jpeg/jquant2.c ****   for (i = 0; i < numcolors; i++) {
 768:fltk-1.3.4-1/jpeg/jquant2.c ****     if (mindist[i] <= minmaxdist)
 769:fltk-1.3.4-1/jpeg/jquant2.c ****       colorlist[ncolors++] = (JSAMPLE) i;
 770:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 771:fltk-1.3.4-1/jpeg/jquant2.c ****   return ncolors;
 772:fltk-1.3.4-1/jpeg/jquant2.c **** }
 773:fltk-1.3.4-1/jpeg/jquant2.c **** 
 774:fltk-1.3.4-1/jpeg/jquant2.c **** 
 775:fltk-1.3.4-1/jpeg/jquant2.c **** LOCAL(void)
 776:fltk-1.3.4-1/jpeg/jquant2.c **** find_best_colors (j_decompress_ptr cinfo, int minc0, int minc1, int minc2,
 777:fltk-1.3.4-1/jpeg/jquant2.c **** 		  int numcolors, JSAMPLE colorlist[], JSAMPLE bestcolor[])
 778:fltk-1.3.4-1/jpeg/jquant2.c **** /* Find the closest colormap entry for each cell in the update box,
 779:fltk-1.3.4-1/jpeg/jquant2.c ****  * given the list of candidate colors prepared by find_nearby_colors.
 780:fltk-1.3.4-1/jpeg/jquant2.c ****  * Return the indexes of the closest entries in the bestcolor[] array.
 781:fltk-1.3.4-1/jpeg/jquant2.c ****  * This routine uses Thomas' incremental distance calculation method to
 782:fltk-1.3.4-1/jpeg/jquant2.c ****  * find the distance from a colormap entry to successive cells in the box.
 783:fltk-1.3.4-1/jpeg/jquant2.c ****  */
 784:fltk-1.3.4-1/jpeg/jquant2.c **** {
 785:fltk-1.3.4-1/jpeg/jquant2.c ****   int ic0, ic1, ic2;
 786:fltk-1.3.4-1/jpeg/jquant2.c ****   int i, icolor;
 787:fltk-1.3.4-1/jpeg/jquant2.c ****   register INT32 * bptr;	/* pointer into bestdist[] array */
 788:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPLE * cptr;		/* pointer into bestcolor[] array */
 789:fltk-1.3.4-1/jpeg/jquant2.c ****   INT32 dist0, dist1;		/* initial distance values */
 790:fltk-1.3.4-1/jpeg/jquant2.c ****   register INT32 dist2;		/* current distance in inner loop */
 791:fltk-1.3.4-1/jpeg/jquant2.c ****   INT32 xx0, xx1;		/* distance increments */
 792:fltk-1.3.4-1/jpeg/jquant2.c ****   register INT32 xx2;
 793:fltk-1.3.4-1/jpeg/jquant2.c ****   INT32 inc0, inc1, inc2;	/* initial values for increments */
 794:fltk-1.3.4-1/jpeg/jquant2.c ****   /* This array holds the distance to the nearest-so-far color for each cell */
 795:fltk-1.3.4-1/jpeg/jquant2.c ****   INT32 bestdist[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];
 796:fltk-1.3.4-1/jpeg/jquant2.c **** 
 797:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Initialize best-distance for each cell of the update box */
 798:fltk-1.3.4-1/jpeg/jquant2.c ****   bptr = bestdist;
 799:fltk-1.3.4-1/jpeg/jquant2.c ****   for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 800:fltk-1.3.4-1/jpeg/jquant2.c ****     *bptr++ = 0x7FFFFFFFL;
 801:fltk-1.3.4-1/jpeg/jquant2.c ****   
 802:fltk-1.3.4-1/jpeg/jquant2.c ****   /* For each color selected by find_nearby_colors,
 803:fltk-1.3.4-1/jpeg/jquant2.c ****    * compute its distance to the center of each cell in the box.
 804:fltk-1.3.4-1/jpeg/jquant2.c ****    * If that's less than best-so-far, update best distance and color number.
 805:fltk-1.3.4-1/jpeg/jquant2.c ****    */
 806:fltk-1.3.4-1/jpeg/jquant2.c ****   
 807:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Nominal steps between cell centers ("x" in Thomas article) */
 808:fltk-1.3.4-1/jpeg/jquant2.c **** #define STEP_C0  ((1 << C0_SHIFT) * C0_SCALE)
 809:fltk-1.3.4-1/jpeg/jquant2.c **** #define STEP_C1  ((1 << C1_SHIFT) * C1_SCALE)
 810:fltk-1.3.4-1/jpeg/jquant2.c **** #define STEP_C2  ((1 << C2_SHIFT) * C2_SCALE)
 811:fltk-1.3.4-1/jpeg/jquant2.c ****   
 812:fltk-1.3.4-1/jpeg/jquant2.c ****   for (i = 0; i < numcolors; i++) {
 813:fltk-1.3.4-1/jpeg/jquant2.c ****     icolor = GETJSAMPLE(colorlist[i]);
 814:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Compute (square of) distance from minc0/c1/c2 to this color */
 815:fltk-1.3.4-1/jpeg/jquant2.c ****     inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 816:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 = inc0*inc0;
 817:fltk-1.3.4-1/jpeg/jquant2.c ****     inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 818:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc1*inc1;
 819:fltk-1.3.4-1/jpeg/jquant2.c ****     inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 820:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc2*inc2;
 821:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Form the initial difference increments */
 822:fltk-1.3.4-1/jpeg/jquant2.c ****     inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 823:fltk-1.3.4-1/jpeg/jquant2.c ****     inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 824:fltk-1.3.4-1/jpeg/jquant2.c ****     inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 825:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Now loop over all cells in box, updating distance per Thomas method */
 826:fltk-1.3.4-1/jpeg/jquant2.c ****     bptr = bestdist;
 827:fltk-1.3.4-1/jpeg/jquant2.c ****     cptr = bestcolor;
 828:fltk-1.3.4-1/jpeg/jquant2.c ****     xx0 = inc0;
 829:fltk-1.3.4-1/jpeg/jquant2.c ****     for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 830:fltk-1.3.4-1/jpeg/jquant2.c ****       dist1 = dist0;
 831:fltk-1.3.4-1/jpeg/jquant2.c ****       xx1 = inc1;
 832:fltk-1.3.4-1/jpeg/jquant2.c ****       for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 833:fltk-1.3.4-1/jpeg/jquant2.c **** 	dist2 = dist1;
 834:fltk-1.3.4-1/jpeg/jquant2.c **** 	xx2 = inc2;
 835:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 836:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (dist2 < *bptr) {
 837:fltk-1.3.4-1/jpeg/jquant2.c **** 	    *bptr = dist2;
 838:fltk-1.3.4-1/jpeg/jquant2.c **** 	    *cptr = (JSAMPLE) icolor;
 839:fltk-1.3.4-1/jpeg/jquant2.c **** 	  }
 840:fltk-1.3.4-1/jpeg/jquant2.c **** 	  dist2 += xx2;
 841:fltk-1.3.4-1/jpeg/jquant2.c **** 	  xx2 += 2 * STEP_C2 * STEP_C2;
 842:fltk-1.3.4-1/jpeg/jquant2.c **** 	  bptr++;
 843:fltk-1.3.4-1/jpeg/jquant2.c **** 	  cptr++;
 844:fltk-1.3.4-1/jpeg/jquant2.c **** 	}
 845:fltk-1.3.4-1/jpeg/jquant2.c **** 	dist1 += xx1;
 846:fltk-1.3.4-1/jpeg/jquant2.c **** 	xx1 += 2 * STEP_C1 * STEP_C1;
 847:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 848:fltk-1.3.4-1/jpeg/jquant2.c ****       dist0 += xx0;
 849:fltk-1.3.4-1/jpeg/jquant2.c ****       xx0 += 2 * STEP_C0 * STEP_C0;
 850:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 851:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 852:fltk-1.3.4-1/jpeg/jquant2.c **** }
 853:fltk-1.3.4-1/jpeg/jquant2.c **** 
 854:fltk-1.3.4-1/jpeg/jquant2.c **** 
 855:fltk-1.3.4-1/jpeg/jquant2.c **** LOCAL(void)
 856:fltk-1.3.4-1/jpeg/jquant2.c **** fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
 857:fltk-1.3.4-1/jpeg/jquant2.c **** /* Fill the inverse-colormap entries in the update box that contains */
 858:fltk-1.3.4-1/jpeg/jquant2.c **** /* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
 859:fltk-1.3.4-1/jpeg/jquant2.c **** /* we can fill as many others as we wish.) */
 860:fltk-1.3.4-1/jpeg/jquant2.c **** {
 861:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 862:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram = cquantize->histogram;
 863:fltk-1.3.4-1/jpeg/jquant2.c ****   int minc0, minc1, minc2;	/* lower left corner of update box */
 864:fltk-1.3.4-1/jpeg/jquant2.c ****   int ic0, ic1, ic2;
 865:fltk-1.3.4-1/jpeg/jquant2.c ****   register JSAMPLE * cptr;	/* pointer into bestcolor[] array */
 866:fltk-1.3.4-1/jpeg/jquant2.c ****   register histptr cachep;	/* pointer into main cache array */
 867:fltk-1.3.4-1/jpeg/jquant2.c ****   /* This array lists the candidate colormap indexes. */
 868:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPLE colorlist[MAXNUMCOLORS];
 869:fltk-1.3.4-1/jpeg/jquant2.c ****   int numcolors;		/* number of candidate colors */
 870:fltk-1.3.4-1/jpeg/jquant2.c ****   /* This array holds the actually closest colormap index for each cell. */
 871:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];
 872:fltk-1.3.4-1/jpeg/jquant2.c **** 
 873:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Convert cell coordinates to update box ID */
 874:fltk-1.3.4-1/jpeg/jquant2.c ****   c0 >>= BOX_C0_LOG;
 875:fltk-1.3.4-1/jpeg/jquant2.c ****   c1 >>= BOX_C1_LOG;
 876:fltk-1.3.4-1/jpeg/jquant2.c ****   c2 >>= BOX_C2_LOG;
 877:fltk-1.3.4-1/jpeg/jquant2.c **** 
 878:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Compute true coordinates of update box's origin corner.
 879:fltk-1.3.4-1/jpeg/jquant2.c ****    * Actually we compute the coordinates of the center of the corner
 880:fltk-1.3.4-1/jpeg/jquant2.c ****    * histogram cell, which are the lower bounds of the volume we care about.
 881:fltk-1.3.4-1/jpeg/jquant2.c ****    */
 882:fltk-1.3.4-1/jpeg/jquant2.c ****   minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 883:fltk-1.3.4-1/jpeg/jquant2.c ****   minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 884:fltk-1.3.4-1/jpeg/jquant2.c ****   minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 885:fltk-1.3.4-1/jpeg/jquant2.c ****   
 886:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Determine which colormap entries are close enough to be candidates
 887:fltk-1.3.4-1/jpeg/jquant2.c ****    * for the nearest entry to some cell in the update box.
 888:fltk-1.3.4-1/jpeg/jquant2.c ****    */
 889:fltk-1.3.4-1/jpeg/jquant2.c ****   numcolors = find_nearby_colors(cinfo, minc0, minc1, minc2, colorlist);
 890:fltk-1.3.4-1/jpeg/jquant2.c **** 
 891:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Determine the actually nearest colors. */
 892:fltk-1.3.4-1/jpeg/jquant2.c ****   find_best_colors(cinfo, minc0, minc1, minc2, numcolors, colorlist,
 893:fltk-1.3.4-1/jpeg/jquant2.c **** 		   bestcolor);
 894:fltk-1.3.4-1/jpeg/jquant2.c **** 
 895:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Save the best color numbers (plus 1) in the main cache array */
 896:fltk-1.3.4-1/jpeg/jquant2.c ****   c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 897:fltk-1.3.4-1/jpeg/jquant2.c ****   c1 <<= BOX_C1_LOG;
 898:fltk-1.3.4-1/jpeg/jquant2.c ****   c2 <<= BOX_C2_LOG;
 899:fltk-1.3.4-1/jpeg/jquant2.c ****   cptr = bestcolor;
 900:fltk-1.3.4-1/jpeg/jquant2.c ****   for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 901:fltk-1.3.4-1/jpeg/jquant2.c ****     for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 902:fltk-1.3.4-1/jpeg/jquant2.c ****       cachep = & histogram[c0+ic0][c1+ic1][c2];
 903:fltk-1.3.4-1/jpeg/jquant2.c ****       for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 904:fltk-1.3.4-1/jpeg/jquant2.c **** 	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 905:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 906:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 907:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 908:fltk-1.3.4-1/jpeg/jquant2.c **** }
 909:fltk-1.3.4-1/jpeg/jquant2.c **** 
 910:fltk-1.3.4-1/jpeg/jquant2.c **** 
 911:fltk-1.3.4-1/jpeg/jquant2.c **** /*
 912:fltk-1.3.4-1/jpeg/jquant2.c ****  * Map some rows of pixels to the output colormapped representation.
 913:fltk-1.3.4-1/jpeg/jquant2.c ****  */
 914:fltk-1.3.4-1/jpeg/jquant2.c **** 
 915:fltk-1.3.4-1/jpeg/jquant2.c **** METHODDEF(void)
 916:fltk-1.3.4-1/jpeg/jquant2.c **** pass2_no_dither (j_decompress_ptr cinfo,
 917:fltk-1.3.4-1/jpeg/jquant2.c **** 		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
 918:fltk-1.3.4-1/jpeg/jquant2.c **** /* This version performs no dithering */
 919:fltk-1.3.4-1/jpeg/jquant2.c **** {
 920:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 921:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram = cquantize->histogram;
 922:fltk-1.3.4-1/jpeg/jquant2.c ****   register JSAMPROW inptr, outptr;
 923:fltk-1.3.4-1/jpeg/jquant2.c ****   register histptr cachep;
 924:fltk-1.3.4-1/jpeg/jquant2.c ****   register int c0, c1, c2;
 925:fltk-1.3.4-1/jpeg/jquant2.c ****   int row;
 926:fltk-1.3.4-1/jpeg/jquant2.c ****   JDIMENSION col;
 927:fltk-1.3.4-1/jpeg/jquant2.c ****   JDIMENSION width = cinfo->output_width;
 928:fltk-1.3.4-1/jpeg/jquant2.c **** 
 929:fltk-1.3.4-1/jpeg/jquant2.c ****   for (row = 0; row < num_rows; row++) {
 930:fltk-1.3.4-1/jpeg/jquant2.c ****     inptr = input_buf[row];
 931:fltk-1.3.4-1/jpeg/jquant2.c ****     outptr = output_buf[row];
 932:fltk-1.3.4-1/jpeg/jquant2.c ****     for (col = width; col > 0; col--) {
 933:fltk-1.3.4-1/jpeg/jquant2.c ****       /* get pixel value and index into the cache */
 934:fltk-1.3.4-1/jpeg/jquant2.c ****       c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 935:fltk-1.3.4-1/jpeg/jquant2.c ****       c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 936:fltk-1.3.4-1/jpeg/jquant2.c ****       c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 937:fltk-1.3.4-1/jpeg/jquant2.c ****       cachep = & histogram[c0][c1][c2];
 938:fltk-1.3.4-1/jpeg/jquant2.c ****       /* If we have not seen this color before, find nearest colormap entry */
 939:fltk-1.3.4-1/jpeg/jquant2.c ****       /* and update the cache */
 940:fltk-1.3.4-1/jpeg/jquant2.c ****       if (*cachep == 0)
 941:fltk-1.3.4-1/jpeg/jquant2.c **** 	fill_inverse_cmap(cinfo, c0,c1,c2);
 942:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Now emit the colormap index for this cell */
 943:fltk-1.3.4-1/jpeg/jquant2.c ****       *outptr++ = (JSAMPLE) (*cachep - 1);
 944:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 945:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 946:fltk-1.3.4-1/jpeg/jquant2.c **** }
 947:fltk-1.3.4-1/jpeg/jquant2.c **** 
 948:fltk-1.3.4-1/jpeg/jquant2.c **** 
 949:fltk-1.3.4-1/jpeg/jquant2.c **** METHODDEF(void)
 950:fltk-1.3.4-1/jpeg/jquant2.c **** pass2_fs_dither (j_decompress_ptr cinfo,
 951:fltk-1.3.4-1/jpeg/jquant2.c **** 		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
 952:fltk-1.3.4-1/jpeg/jquant2.c **** /* This version performs Floyd-Steinberg dithering */
 953:fltk-1.3.4-1/jpeg/jquant2.c **** {
 954:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 955:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram = cquantize->histogram;
 956:fltk-1.3.4-1/jpeg/jquant2.c ****   register LOCFSERROR cur0, cur1, cur2;	/* current error or pixel value */
 957:fltk-1.3.4-1/jpeg/jquant2.c ****   LOCFSERROR belowerr0, belowerr1, belowerr2; /* error for pixel below cur */
 958:fltk-1.3.4-1/jpeg/jquant2.c ****   LOCFSERROR bpreverr0, bpreverr1, bpreverr2; /* error for below/prev col */
 959:fltk-1.3.4-1/jpeg/jquant2.c ****   register FSERRPTR errorptr;	/* => fserrors[] at column before current */
 960:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW inptr;		/* => current input pixel */
 961:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW outptr;		/* => current output pixel */
 962:fltk-1.3.4-1/jpeg/jquant2.c ****   histptr cachep;
 963:fltk-1.3.4-1/jpeg/jquant2.c ****   int dir;			/* +1 or -1 depending on direction */
 964:fltk-1.3.4-1/jpeg/jquant2.c ****   int dir3;			/* 3*dir, for advancing inptr & errorptr */
 965:fltk-1.3.4-1/jpeg/jquant2.c ****   int row;
 966:fltk-1.3.4-1/jpeg/jquant2.c ****   JDIMENSION col;
 967:fltk-1.3.4-1/jpeg/jquant2.c ****   JDIMENSION width = cinfo->output_width;
 968:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPLE *range_limit = cinfo->sample_range_limit;
 969:fltk-1.3.4-1/jpeg/jquant2.c ****   int *error_limit = cquantize->error_limiter;
 970:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW colormap0 = cinfo->colormap[0];
 971:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW colormap1 = cinfo->colormap[1];
 972:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW colormap2 = cinfo->colormap[2];
 973:fltk-1.3.4-1/jpeg/jquant2.c ****   SHIFT_TEMPS
 974:fltk-1.3.4-1/jpeg/jquant2.c **** 
 975:fltk-1.3.4-1/jpeg/jquant2.c ****   for (row = 0; row < num_rows; row++) {
 976:fltk-1.3.4-1/jpeg/jquant2.c ****     inptr = input_buf[row];
 977:fltk-1.3.4-1/jpeg/jquant2.c ****     outptr = output_buf[row];
 978:fltk-1.3.4-1/jpeg/jquant2.c ****     if (cquantize->on_odd_row) {
 979:fltk-1.3.4-1/jpeg/jquant2.c ****       /* work right to left in this row */
 980:fltk-1.3.4-1/jpeg/jquant2.c ****       inptr += (width-1) * 3;	/* so point to rightmost pixel */
 981:fltk-1.3.4-1/jpeg/jquant2.c ****       outptr += width-1;
 982:fltk-1.3.4-1/jpeg/jquant2.c ****       dir = -1;
 983:fltk-1.3.4-1/jpeg/jquant2.c ****       dir3 = -3;
 984:fltk-1.3.4-1/jpeg/jquant2.c ****       errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 985:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->on_odd_row = FALSE; /* flip for next time */
 986:fltk-1.3.4-1/jpeg/jquant2.c ****     } else {
 987:fltk-1.3.4-1/jpeg/jquant2.c ****       /* work left to right in this row */
 988:fltk-1.3.4-1/jpeg/jquant2.c ****       dir = 1;
 989:fltk-1.3.4-1/jpeg/jquant2.c ****       dir3 = 3;
 990:fltk-1.3.4-1/jpeg/jquant2.c ****       errorptr = cquantize->fserrors; /* => entry before first real column */
 991:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->on_odd_row = TRUE; /* flip for next time */
 992:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 993:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Preset error values: no error propagated to first pixel from left */
 994:fltk-1.3.4-1/jpeg/jquant2.c ****     cur0 = cur1 = cur2 = 0;
 995:fltk-1.3.4-1/jpeg/jquant2.c ****     /* and no error propagated to row below yet */
 996:fltk-1.3.4-1/jpeg/jquant2.c ****     belowerr0 = belowerr1 = belowerr2 = 0;
 997:fltk-1.3.4-1/jpeg/jquant2.c ****     bpreverr0 = bpreverr1 = bpreverr2 = 0;
 998:fltk-1.3.4-1/jpeg/jquant2.c **** 
 999:fltk-1.3.4-1/jpeg/jquant2.c ****     for (col = width; col > 0; col--) {
1000:fltk-1.3.4-1/jpeg/jquant2.c ****       /* curN holds the error propagated from the previous pixel on the
1001:fltk-1.3.4-1/jpeg/jquant2.c ****        * current line.  Add the error propagated from the previous line
1002:fltk-1.3.4-1/jpeg/jquant2.c ****        * to form the complete error correction term for this pixel, and
1003:fltk-1.3.4-1/jpeg/jquant2.c ****        * round the error term (which is expressed * 16) to an integer.
1004:fltk-1.3.4-1/jpeg/jquant2.c ****        * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
1005:fltk-1.3.4-1/jpeg/jquant2.c ****        * for either sign of the error value.
1006:fltk-1.3.4-1/jpeg/jquant2.c ****        * Note: errorptr points to *previous* column's array entry.
1007:fltk-1.3.4-1/jpeg/jquant2.c ****        */
1008:fltk-1.3.4-1/jpeg/jquant2.c ****       cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
1009:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
1010:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
1011:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Limit the error using transfer function set by init_error_limit.
1012:fltk-1.3.4-1/jpeg/jquant2.c ****        * See comments with init_error_limit for rationale.
1013:fltk-1.3.4-1/jpeg/jquant2.c ****        */
1014:fltk-1.3.4-1/jpeg/jquant2.c ****       cur0 = error_limit[cur0];
1015:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 = error_limit[cur1];
1016:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 = error_limit[cur2];
1017:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
1018:fltk-1.3.4-1/jpeg/jquant2.c ****        * The maximum error is +- MAXJSAMPLE (or less with error limiting);
1019:fltk-1.3.4-1/jpeg/jquant2.c ****        * this sets the required size of the range_limit array.
1020:fltk-1.3.4-1/jpeg/jquant2.c ****        */
1021:fltk-1.3.4-1/jpeg/jquant2.c ****       cur0 += GETJSAMPLE(inptr[0]);
1022:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 += GETJSAMPLE(inptr[1]);
1023:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 += GETJSAMPLE(inptr[2]);
1024:fltk-1.3.4-1/jpeg/jquant2.c ****       cur0 = GETJSAMPLE(range_limit[cur0]);
1025:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 = GETJSAMPLE(range_limit[cur1]);
1026:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 = GETJSAMPLE(range_limit[cur2]);
1027:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Index into the cache with adjusted pixel value */
1028:fltk-1.3.4-1/jpeg/jquant2.c ****       cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
1029:fltk-1.3.4-1/jpeg/jquant2.c ****       /* If we have not seen this color before, find nearest colormap */
1030:fltk-1.3.4-1/jpeg/jquant2.c ****       /* entry and update the cache */
1031:fltk-1.3.4-1/jpeg/jquant2.c ****       if (*cachep == 0)
1032:fltk-1.3.4-1/jpeg/jquant2.c **** 	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
1033:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Now emit the colormap index for this cell */
1034:fltk-1.3.4-1/jpeg/jquant2.c ****       { register int pixcode = *cachep - 1;
1035:fltk-1.3.4-1/jpeg/jquant2.c **** 	*outptr = (JSAMPLE) pixcode;
1036:fltk-1.3.4-1/jpeg/jquant2.c **** 	/* Compute representation error for this pixel */
1037:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur0 -= GETJSAMPLE(colormap0[pixcode]);
1038:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 -= GETJSAMPLE(colormap1[pixcode]);
1039:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 -= GETJSAMPLE(colormap2[pixcode]);
1040:fltk-1.3.4-1/jpeg/jquant2.c ****       }
1041:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Compute error fractions to be propagated to adjacent pixels.
1042:fltk-1.3.4-1/jpeg/jquant2.c ****        * Add these into the running sums, and simultaneously shift the
1043:fltk-1.3.4-1/jpeg/jquant2.c ****        * next-line error sums left by 1 column.
1044:fltk-1.3.4-1/jpeg/jquant2.c ****        */
1045:fltk-1.3.4-1/jpeg/jquant2.c ****       { register LOCFSERROR bnexterr, delta;
1046:fltk-1.3.4-1/jpeg/jquant2.c **** 
1047:fltk-1.3.4-1/jpeg/jquant2.c **** 	bnexterr = cur0;	/* Process component 0 */
1048:fltk-1.3.4-1/jpeg/jquant2.c **** 	delta = cur0 * 2;
1049:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur0 += delta;		/* form error * 3 */
1050:fltk-1.3.4-1/jpeg/jquant2.c **** 	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
1051:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur0 += delta;		/* form error * 5 */
1052:fltk-1.3.4-1/jpeg/jquant2.c **** 	bpreverr0 = belowerr0 + cur0;
1053:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr0 = bnexterr;
1054:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur0 += delta;		/* form error * 7 */
1055:fltk-1.3.4-1/jpeg/jquant2.c **** 	bnexterr = cur1;	/* Process component 1 */
1056:fltk-1.3.4-1/jpeg/jquant2.c **** 	delta = cur1 * 2;
1057:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 += delta;		/* form error * 3 */
1058:fltk-1.3.4-1/jpeg/jquant2.c **** 	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
1059:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 += delta;		/* form error * 5 */
1060:fltk-1.3.4-1/jpeg/jquant2.c **** 	bpreverr1 = belowerr1 + cur1;
1061:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr1 = bnexterr;
1062:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 += delta;		/* form error * 7 */
1063:fltk-1.3.4-1/jpeg/jquant2.c **** 	bnexterr = cur2;	/* Process component 2 */
1064:fltk-1.3.4-1/jpeg/jquant2.c **** 	delta = cur2 * 2;
1065:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 += delta;		/* form error * 3 */
1066:fltk-1.3.4-1/jpeg/jquant2.c **** 	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
1067:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 += delta;		/* form error * 5 */
1068:fltk-1.3.4-1/jpeg/jquant2.c **** 	bpreverr2 = belowerr2 + cur2;
1069:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr2 = bnexterr;
1070:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 += delta;		/* form error * 7 */
1071:fltk-1.3.4-1/jpeg/jquant2.c ****       }
1072:fltk-1.3.4-1/jpeg/jquant2.c ****       /* At this point curN contains the 7/16 error value to be propagated
1073:fltk-1.3.4-1/jpeg/jquant2.c ****        * to the next pixel on the current line, and all the errors for the
1074:fltk-1.3.4-1/jpeg/jquant2.c ****        * next line have been shifted over.  We are therefore ready to move on.
1075:fltk-1.3.4-1/jpeg/jquant2.c ****        */
1076:fltk-1.3.4-1/jpeg/jquant2.c ****       inptr += dir3;		/* Advance pixel pointers to next column */
1077:fltk-1.3.4-1/jpeg/jquant2.c ****       outptr += dir;
1078:fltk-1.3.4-1/jpeg/jquant2.c ****       errorptr += dir3;		/* advance errorptr to current column */
1079:fltk-1.3.4-1/jpeg/jquant2.c ****     }
1080:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Post-loop cleanup: we must unload the final error values into the
1081:fltk-1.3.4-1/jpeg/jquant2.c ****      * final fserrors[] entry.  Note we need not unload belowerrN because
1082:fltk-1.3.4-1/jpeg/jquant2.c ****      * it is for the dummy column before or after the actual array.
1083:fltk-1.3.4-1/jpeg/jquant2.c ****      */
1084:fltk-1.3.4-1/jpeg/jquant2.c ****     errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
1085:fltk-1.3.4-1/jpeg/jquant2.c ****     errorptr[1] = (FSERROR) bpreverr1;
1086:fltk-1.3.4-1/jpeg/jquant2.c ****     errorptr[2] = (FSERROR) bpreverr2;
1087:fltk-1.3.4-1/jpeg/jquant2.c ****   }
1088:fltk-1.3.4-1/jpeg/jquant2.c **** }
1089:fltk-1.3.4-1/jpeg/jquant2.c **** 
1090:fltk-1.3.4-1/jpeg/jquant2.c **** 
1091:fltk-1.3.4-1/jpeg/jquant2.c **** /*
1092:fltk-1.3.4-1/jpeg/jquant2.c ****  * Initialize the error-limiting transfer function (lookup table).
1093:fltk-1.3.4-1/jpeg/jquant2.c ****  * The raw F-S error computation can potentially compute error values of up to
1094:fltk-1.3.4-1/jpeg/jquant2.c ****  * +- MAXJSAMPLE.  But we want the maximum correction applied to a pixel to be
1095:fltk-1.3.4-1/jpeg/jquant2.c ****  * much less, otherwise obviously wrong pixels will be created.  (Typical
1096:fltk-1.3.4-1/jpeg/jquant2.c ****  * effects include weird fringes at color-area boundaries, isolated bright
1097:fltk-1.3.4-1/jpeg/jquant2.c ****  * pixels in a dark area, etc.)  The standard advice for avoiding this problem
1098:fltk-1.3.4-1/jpeg/jquant2.c ****  * is to ensure that the "corners" of the color cube are allocated as output
1099:fltk-1.3.4-1/jpeg/jquant2.c ****  * colors; then repeated errors in the same direction cannot cause cascading
1100:fltk-1.3.4-1/jpeg/jquant2.c ****  * error buildup.  However, that only prevents the error from getting
1101:fltk-1.3.4-1/jpeg/jquant2.c ****  * completely out of hand; Aaron Giles reports that error limiting improves
1102:fltk-1.3.4-1/jpeg/jquant2.c ****  * the results even with corner colors allocated.
1103:fltk-1.3.4-1/jpeg/jquant2.c ****  * A simple clamping of the error values to about +- MAXJSAMPLE/8 works pretty
1104:fltk-1.3.4-1/jpeg/jquant2.c ****  * well, but the smoother transfer function used below is even better.  Thanks
1105:fltk-1.3.4-1/jpeg/jquant2.c ****  * to Aaron Giles for this idea.
1106:fltk-1.3.4-1/jpeg/jquant2.c ****  */
1107:fltk-1.3.4-1/jpeg/jquant2.c **** 
1108:fltk-1.3.4-1/jpeg/jquant2.c **** LOCAL(void)
1109:fltk-1.3.4-1/jpeg/jquant2.c **** init_error_limit (j_decompress_ptr cinfo)
1110:fltk-1.3.4-1/jpeg/jquant2.c **** /* Allocate and fill in the error_limiter table */
1111:fltk-1.3.4-1/jpeg/jquant2.c **** {
 132              		.loc 1 1111 1 is_stmt 1 view -0
 133              		.cfi_startproc
1112:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 134              		.loc 1 1112 3 view .LVU47
1111:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 135              		.loc 1 1111 1 is_stmt 0 view .LVU48
 136 0000 53       		pushq	%rbx
 137              		.cfi_def_cfa_offset 16
 138              		.cfi_offset 3, -16
1113:fltk-1.3.4-1/jpeg/jquant2.c ****   int * table;
1114:fltk-1.3.4-1/jpeg/jquant2.c ****   int in, out;
1115:fltk-1.3.4-1/jpeg/jquant2.c **** 
1116:fltk-1.3.4-1/jpeg/jquant2.c ****   table = (int *) (*cinfo->mem->alloc_small)
 139              		.loc 1 1116 20 view .LVU49
 140 0001 488B4708 		movq	8(%rdi), %rax
 141 0005 BAFC0700 		movl	$2044, %edx
 141      00
 142 000a BE010000 		movl	$1, %esi
 142      00
1112:fltk-1.3.4-1/jpeg/jquant2.c ****   int * table;
 143              		.loc 1 1112 20 view .LVU50
 144 000f 488B9F90 		movq	656(%rdi), %rbx
 144      020000
 145              	.LVL13:
1113:fltk-1.3.4-1/jpeg/jquant2.c ****   int * table;
 146              		.loc 1 1113 3 is_stmt 1 view .LVU51
1114:fltk-1.3.4-1/jpeg/jquant2.c **** 
 147              		.loc 1 1114 3 view .LVU52
 148              		.loc 1 1116 3 view .LVU53
 149              		.loc 1 1116 20 is_stmt 0 view .LVU54
 150 0016 FF10     		call	*(%rax)
 151              	.LVL14:
1117:fltk-1.3.4-1/jpeg/jquant2.c ****     ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
1118:fltk-1.3.4-1/jpeg/jquant2.c ****   table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
 152              		.loc 1 1118 3 is_stmt 1 view .LVU55
1119:fltk-1.3.4-1/jpeg/jquant2.c ****   cquantize->error_limiter = table;
 153              		.loc 1 1119 28 is_stmt 0 view .LVU56
 154 0018 31D2     		xorl	%edx, %edx
1118:fltk-1.3.4-1/jpeg/jquant2.c ****   cquantize->error_limiter = table;
 155              		.loc 1 1118 9 view .LVU57
 156 001a 488D88FC 		leaq	1020(%rax), %rcx
 156      030000
 157              	.LVL15:
 158              		.loc 1 1119 3 is_stmt 1 view .LVU58
 159              		.loc 1 1119 28 is_stmt 0 view .LVU59
 160 0021 48894B50 		movq	%rcx, 80(%rbx)
1120:fltk-1.3.4-1/jpeg/jquant2.c **** 
1121:fltk-1.3.4-1/jpeg/jquant2.c **** #define STEPSIZE ((MAXJSAMPLE+1)/16)
1122:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
1123:fltk-1.3.4-1/jpeg/jquant2.c ****   out = 0;
 161              		.loc 1 1123 3 is_stmt 1 view .LVU60
 162              	.LVL16:
1124:fltk-1.3.4-1/jpeg/jquant2.c ****   for (in = 0; in < STEPSIZE; in++, out++) {
 163              		.loc 1 1124 3 view .LVU61
 164              		.loc 1 1124 16 view .LVU62
 165              		.p2align 4,,10
 166 0025 0F1F00   		.p2align 3
 167              	.L21:
1125:fltk-1.3.4-1/jpeg/jquant2.c ****     table[in] = out; table[-in] = -out;
 168              		.loc 1 1125 5 discriminator 3 view .LVU63
 169              		.loc 1 1125 28 is_stmt 0 discriminator 3 view .LVU64
 170 0028 89D6     		movl	%edx, %esi
 171              		.loc 1 1125 15 discriminator 3 view .LVU65
 172 002a 899490FC 		movl	%edx, 1020(%rax,%rdx,4)
 172      030000
 173              		.loc 1 1125 22 is_stmt 1 discriminator 3 view .LVU66
 174 0031 4883C201 		addq	$1, %rdx
 175              	.LVL17:
 176              		.loc 1 1125 22 is_stmt 0 discriminator 3 view .LVU67
 177 0035 4883E904 		subq	$4, %rcx
 178              		.loc 1 1125 28 discriminator 3 view .LVU68
 179 0039 F7DE     		negl	%esi
 180              	.LVL18:
 181              		.loc 1 1125 28 discriminator 3 view .LVU69
 182 003b 897104   		movl	%esi, 4(%rcx)
 183              	.LVL19:
1124:fltk-1.3.4-1/jpeg/jquant2.c ****   for (in = 0; in < STEPSIZE; in++, out++) {
 184              		.loc 1 1124 31 is_stmt 1 discriminator 3 view .LVU70
1124:fltk-1.3.4-1/jpeg/jquant2.c ****   for (in = 0; in < STEPSIZE; in++, out++) {
 185              		.loc 1 1124 16 discriminator 3 view .LVU71
1124:fltk-1.3.4-1/jpeg/jquant2.c ****   for (in = 0; in < STEPSIZE; in++, out++) {
 186              		.loc 1 1124 3 is_stmt 0 discriminator 3 view .LVU72
 187 003e 4883FA10 		cmpq	$16, %rdx
 188 0042 75E4     		jne	.L21
 189 0044 488DB0BC 		leaq	956(%rax), %rsi
 189      030000
1124:fltk-1.3.4-1/jpeg/jquant2.c ****   for (in = 0; in < STEPSIZE; in++, out++) {
 190              		.loc 1 1124 3 view .LVU73
 191 004b 31D2     		xorl	%edx, %edx
 192 004d B9100000 		movl	$16, %ecx
 192      00
 193              		.p2align 4,,10
 194 0052 660F1F44 		.p2align 3
 194      0000
 195              	.L22:
 196              	.LVL20:
1126:fltk-1.3.4-1/jpeg/jquant2.c ****   }
1127:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
1128:fltk-1.3.4-1/jpeg/jquant2.c ****   for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
1129:fltk-1.3.4-1/jpeg/jquant2.c ****     table[in] = out; table[-in] = -out;
 197              		.loc 1 1129 5 is_stmt 1 discriminator 2 view .LVU74
 198              		.loc 1 1129 35 is_stmt 0 discriminator 2 view .LVU75
 199 0058 89CF     		movl	%ecx, %edi
 200              		.loc 1 1129 15 discriminator 2 view .LVU76
 201 005a 898C903C 		movl	%ecx, 1084(%rax,%rdx,4)
 201      040000
 202              		.loc 1 1129 22 is_stmt 1 discriminator 2 view .LVU77
 203 0061 4883EE04 		subq	$4, %rsi
 204              		.loc 1 1129 35 is_stmt 0 discriminator 2 view .LVU78
 205 0065 F7DF     		negl	%edi
 206 0067 897E04   		movl	%edi, 4(%rsi)
1128:fltk-1.3.4-1/jpeg/jquant2.c ****     table[in] = out; table[-in] = -out;
 207              		.loc 1 1128 27 is_stmt 1 discriminator 2 view .LVU79
 208              	.LVL21:
1128:fltk-1.3.4-1/jpeg/jquant2.c ****     table[in] = out; table[-in] = -out;
 209              		.loc 1 1128 37 is_stmt 0 discriminator 2 view .LVU80
 210 006a 89D7     		movl	%edx, %edi
 211 006c 4883C201 		addq	$1, %rdx
 212              	.LVL22:
1128:fltk-1.3.4-1/jpeg/jquant2.c ****     table[in] = out; table[-in] = -out;
 213              		.loc 1 1128 37 discriminator 2 view .LVU81
 214 0070 83E701   		andl	$1, %edi
 215              	.LVL23:
1128:fltk-1.3.4-1/jpeg/jquant2.c ****     table[in] = out; table[-in] = -out;
 216              		.loc 1 1128 37 discriminator 2 view .LVU82
 217 0073 01F9     		addl	%edi, %ecx
 218              	.LVL24:
1128:fltk-1.3.4-1/jpeg/jquant2.c ****     table[in] = out; table[-in] = -out;
 219              		.loc 1 1128 10 is_stmt 1 discriminator 2 view .LVU83
1128:fltk-1.3.4-1/jpeg/jquant2.c ****     table[in] = out; table[-in] = -out;
 220              		.loc 1 1128 3 is_stmt 0 discriminator 2 view .LVU84
 221 0075 4883FA20 		cmpq	$32, %rdx
 222 0079 75DD     		jne	.L22
 223 007b 89CF     		movl	%ecx, %edi
1128:fltk-1.3.4-1/jpeg/jquant2.c ****     table[in] = out; table[-in] = -out;
 224              		.loc 1 1128 3 view .LVU85
 225 007d 31D2     		xorl	%edx, %edx
 226 007f F7DF     		negl	%edi
 227              		.p2align 4,,10
 228 0081 0F1F8000 		.p2align 3
 228      000000
 229              	.L23:
1130:fltk-1.3.4-1/jpeg/jquant2.c ****   }
1131:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
1132:fltk-1.3.4-1/jpeg/jquant2.c ****   for (; in <= MAXJSAMPLE; in++) {
1133:fltk-1.3.4-1/jpeg/jquant2.c ****     table[in] = out; table[-in] = -out;
 230              		.loc 1 1133 5 is_stmt 1 discriminator 2 view .LVU86
 231              		.loc 1 1133 33 is_stmt 0 discriminator 2 view .LVU87
 232 0088 4889D6   		movq	%rdx, %rsi
 233              		.loc 1 1133 15 discriminator 2 view .LVU88
 234 008b 898C10BC 		movl	%ecx, 1212(%rax,%rdx)
 234      040000
 235              		.loc 1 1133 22 is_stmt 1 discriminator 2 view .LVU89
 236 0092 4883C204 		addq	$4, %rdx
 237              		.loc 1 1133 33 is_stmt 0 discriminator 2 view .LVU90
 238 0096 48F7DE   		negq	%rsi
 239 0099 89BC303C 		movl	%edi, 828(%rax,%rsi)
 239      030000
1132:fltk-1.3.4-1/jpeg/jquant2.c ****     table[in] = out; table[-in] = -out;
 240              		.loc 1 1132 28 is_stmt 1 discriminator 2 view .LVU91
1132:fltk-1.3.4-1/jpeg/jquant2.c ****     table[in] = out; table[-in] = -out;
 241              		.loc 1 1132 10 discriminator 2 view .LVU92
1132:fltk-1.3.4-1/jpeg/jquant2.c ****     table[in] = out; table[-in] = -out;
 242              		.loc 1 1132 3 is_stmt 0 discriminator 2 view .LVU93
 243 00a0 4881FA40 		cmpq	$832, %rdx
 243      030000
 244 00a7 75DF     		jne	.L23
1134:fltk-1.3.4-1/jpeg/jquant2.c ****   }
1135:fltk-1.3.4-1/jpeg/jquant2.c **** #undef STEPSIZE
1136:fltk-1.3.4-1/jpeg/jquant2.c **** }
 245              		.loc 1 1136 1 view .LVU94
 246 00a9 5B       		popq	%rbx
 247              		.cfi_def_cfa_offset 8
 248              	.LVL25:
 249              		.loc 1 1136 1 view .LVU95
 250 00aa C3       		ret
 251              		.cfi_endproc
 252              	.LFE63:
 254              		.section	.text.finish_pass2,"ax",@progbits
 255              		.p2align 4
 257              	finish_pass2:
 258              	.LVL26:
 259              	.LFB65:
1137:fltk-1.3.4-1/jpeg/jquant2.c **** 
1138:fltk-1.3.4-1/jpeg/jquant2.c **** 
1139:fltk-1.3.4-1/jpeg/jquant2.c **** /*
1140:fltk-1.3.4-1/jpeg/jquant2.c ****  * Finish up at the end of each pass.
1141:fltk-1.3.4-1/jpeg/jquant2.c ****  */
1142:fltk-1.3.4-1/jpeg/jquant2.c **** 
1143:fltk-1.3.4-1/jpeg/jquant2.c **** METHODDEF(void)
1144:fltk-1.3.4-1/jpeg/jquant2.c **** finish_pass1 (j_decompress_ptr cinfo)
1145:fltk-1.3.4-1/jpeg/jquant2.c **** {
1146:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
1147:fltk-1.3.4-1/jpeg/jquant2.c **** 
1148:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Select the representative colors and fill in cinfo->colormap */
1149:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->colormap = cquantize->sv_colormap;
1150:fltk-1.3.4-1/jpeg/jquant2.c ****   select_colors(cinfo, cquantize->desired);
1151:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Force next pass to zero the color index table */
1152:fltk-1.3.4-1/jpeg/jquant2.c ****   cquantize->needs_zeroed = TRUE;
1153:fltk-1.3.4-1/jpeg/jquant2.c **** }
1154:fltk-1.3.4-1/jpeg/jquant2.c **** 
1155:fltk-1.3.4-1/jpeg/jquant2.c **** 
1156:fltk-1.3.4-1/jpeg/jquant2.c **** METHODDEF(void)
1157:fltk-1.3.4-1/jpeg/jquant2.c **** finish_pass2 (j_decompress_ptr cinfo)
1158:fltk-1.3.4-1/jpeg/jquant2.c **** {
 260              		.loc 1 1158 1 is_stmt 1 view -0
 261              		.cfi_startproc
 262              		.loc 1 1158 1 is_stmt 0 view .LVU97
 263 0000 F30F1EFA 		endbr64
1159:fltk-1.3.4-1/jpeg/jquant2.c ****   /* no work */
1160:fltk-1.3.4-1/jpeg/jquant2.c **** }
 264              		.loc 1 1160 1 is_stmt 1 view .LVU98
 265 0004 C3       		ret
 266              		.cfi_endproc
 267              	.LFE65:
 269              		.section	.text.new_color_map_2_quant,"ax",@progbits
 270              		.p2align 4
 272              	new_color_map_2_quant:
 273              	.LVL27:
 274              	.LFB67:
1161:fltk-1.3.4-1/jpeg/jquant2.c **** 
1162:fltk-1.3.4-1/jpeg/jquant2.c **** 
1163:fltk-1.3.4-1/jpeg/jquant2.c **** /*
1164:fltk-1.3.4-1/jpeg/jquant2.c ****  * Initialize for each processing pass.
1165:fltk-1.3.4-1/jpeg/jquant2.c ****  */
1166:fltk-1.3.4-1/jpeg/jquant2.c **** 
1167:fltk-1.3.4-1/jpeg/jquant2.c **** METHODDEF(void)
1168:fltk-1.3.4-1/jpeg/jquant2.c **** start_pass_2_quant (j_decompress_ptr cinfo, boolean is_pre_scan)
1169:fltk-1.3.4-1/jpeg/jquant2.c **** {
1170:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
1171:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram = cquantize->histogram;
1172:fltk-1.3.4-1/jpeg/jquant2.c ****   int i;
1173:fltk-1.3.4-1/jpeg/jquant2.c **** 
1174:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Only F-S dithering or no dithering is supported. */
1175:fltk-1.3.4-1/jpeg/jquant2.c ****   /* If user asks for ordered dither, give him F-S. */
1176:fltk-1.3.4-1/jpeg/jquant2.c ****   if (cinfo->dither_mode != JDITHER_NONE)
1177:fltk-1.3.4-1/jpeg/jquant2.c ****     cinfo->dither_mode = JDITHER_FS;
1178:fltk-1.3.4-1/jpeg/jquant2.c **** 
1179:fltk-1.3.4-1/jpeg/jquant2.c ****   if (is_pre_scan) {
1180:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Set up method pointers */
1181:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->pub.color_quantize = prescan_quantize;
1182:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->pub.finish_pass = finish_pass1;
1183:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->needs_zeroed = TRUE; /* Always zero histogram */
1184:fltk-1.3.4-1/jpeg/jquant2.c ****   } else {
1185:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Set up method pointers */
1186:fltk-1.3.4-1/jpeg/jquant2.c ****     if (cinfo->dither_mode == JDITHER_FS)
1187:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->pub.color_quantize = pass2_fs_dither;
1188:fltk-1.3.4-1/jpeg/jquant2.c ****     else
1189:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->pub.color_quantize = pass2_no_dither;
1190:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->pub.finish_pass = finish_pass2;
1191:fltk-1.3.4-1/jpeg/jquant2.c **** 
1192:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Make sure color count is acceptable */
1193:fltk-1.3.4-1/jpeg/jquant2.c ****     i = cinfo->actual_number_of_colors;
1194:fltk-1.3.4-1/jpeg/jquant2.c ****     if (i < 1)
1195:fltk-1.3.4-1/jpeg/jquant2.c ****       ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
1196:fltk-1.3.4-1/jpeg/jquant2.c ****     if (i > MAXNUMCOLORS)
1197:fltk-1.3.4-1/jpeg/jquant2.c ****       ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
1198:fltk-1.3.4-1/jpeg/jquant2.c **** 
1199:fltk-1.3.4-1/jpeg/jquant2.c ****     if (cinfo->dither_mode == JDITHER_FS) {
1200:fltk-1.3.4-1/jpeg/jquant2.c ****       size_t arraysize = (size_t) ((cinfo->output_width + 2) *
1201:fltk-1.3.4-1/jpeg/jquant2.c **** 				   (3 * SIZEOF(FSERROR)));
1202:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Allocate Floyd-Steinberg workspace if we didn't already. */
1203:fltk-1.3.4-1/jpeg/jquant2.c ****       if (cquantize->fserrors == NULL)
1204:fltk-1.3.4-1/jpeg/jquant2.c **** 	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
1205:fltk-1.3.4-1/jpeg/jquant2.c **** 	  ((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
1206:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Initialize the propagated errors to zero. */
1207:fltk-1.3.4-1/jpeg/jquant2.c ****       FMEMZERO((void FAR *) cquantize->fserrors, arraysize);
1208:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Make the error-limit table if we didn't already. */
1209:fltk-1.3.4-1/jpeg/jquant2.c ****       if (cquantize->error_limiter == NULL)
1210:fltk-1.3.4-1/jpeg/jquant2.c **** 	init_error_limit(cinfo);
1211:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->on_odd_row = FALSE;
1212:fltk-1.3.4-1/jpeg/jquant2.c ****     }
1213:fltk-1.3.4-1/jpeg/jquant2.c **** 
1214:fltk-1.3.4-1/jpeg/jquant2.c ****   }
1215:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Zero the histogram or inverse color map, if necessary */
1216:fltk-1.3.4-1/jpeg/jquant2.c ****   if (cquantize->needs_zeroed) {
1217:fltk-1.3.4-1/jpeg/jquant2.c ****     for (i = 0; i < HIST_C0_ELEMS; i++) {
1218:fltk-1.3.4-1/jpeg/jquant2.c ****       FMEMZERO((void FAR *) histogram[i],
1219:fltk-1.3.4-1/jpeg/jquant2.c **** 	       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
1220:fltk-1.3.4-1/jpeg/jquant2.c ****     }
1221:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->needs_zeroed = FALSE;
1222:fltk-1.3.4-1/jpeg/jquant2.c ****   }
1223:fltk-1.3.4-1/jpeg/jquant2.c **** }
1224:fltk-1.3.4-1/jpeg/jquant2.c **** 
1225:fltk-1.3.4-1/jpeg/jquant2.c **** 
1226:fltk-1.3.4-1/jpeg/jquant2.c **** /*
1227:fltk-1.3.4-1/jpeg/jquant2.c ****  * Switch to a new external colormap between output passes.
1228:fltk-1.3.4-1/jpeg/jquant2.c ****  */
1229:fltk-1.3.4-1/jpeg/jquant2.c **** 
1230:fltk-1.3.4-1/jpeg/jquant2.c **** METHODDEF(void)
1231:fltk-1.3.4-1/jpeg/jquant2.c **** new_color_map_2_quant (j_decompress_ptr cinfo)
1232:fltk-1.3.4-1/jpeg/jquant2.c **** {
 275              		.loc 1 1232 1 view -0
 276              		.cfi_startproc
 277              		.loc 1 1232 1 is_stmt 0 view .LVU100
 278 0000 F30F1EFA 		endbr64
1233:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 279              		.loc 1 1233 3 is_stmt 1 view .LVU101
 280              		.loc 1 1233 20 is_stmt 0 view .LVU102
 281 0004 488B8790 		movq	656(%rdi), %rax
 281      020000
 282              	.LVL28:
1234:fltk-1.3.4-1/jpeg/jquant2.c **** 
1235:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Reset the inverse color map */
1236:fltk-1.3.4-1/jpeg/jquant2.c ****   cquantize->needs_zeroed = TRUE;
 283              		.loc 1 1236 3 is_stmt 1 view .LVU103
 284              		.loc 1 1236 27 is_stmt 0 view .LVU104
 285 000b C7403801 		movl	$1, 56(%rax)
 285      000000
1237:fltk-1.3.4-1/jpeg/jquant2.c **** }
 286              		.loc 1 1237 1 view .LVU105
 287 0012 C3       		ret
 288              		.cfi_endproc
 289              	.LFE67:
 291              		.section	.text.start_pass_2_quant,"ax",@progbits
 292              		.p2align 4
 294              	start_pass_2_quant:
 295              	.LVL29:
 296              	.LFB66:
1169:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 297              		.loc 1 1169 1 is_stmt 1 view -0
 298              		.cfi_startproc
1169:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 299              		.loc 1 1169 1 is_stmt 0 view .LVU107
 300 0000 F30F1EFA 		endbr64
1170:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram = cquantize->histogram;
 301              		.loc 1 1170 3 is_stmt 1 view .LVU108
1169:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 302              		.loc 1 1169 1 is_stmt 0 view .LVU109
 303 0004 4155     		pushq	%r13
 304              		.cfi_def_cfa_offset 16
 305              		.cfi_offset 13, -16
 306 0006 4154     		pushq	%r12
 307              		.cfi_def_cfa_offset 24
 308              		.cfi_offset 12, -24
 309 0008 4989FC   		movq	%rdi, %r12
 310 000b 55       		pushq	%rbp
 311              		.cfi_def_cfa_offset 32
 312              		.cfi_offset 6, -32
 313 000c 53       		pushq	%rbx
 314              		.cfi_def_cfa_offset 40
 315              		.cfi_offset 3, -40
 316 000d 4883EC08 		subq	$8, %rsp
 317              		.cfi_def_cfa_offset 48
1170:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram = cquantize->histogram;
 318              		.loc 1 1170 20 view .LVU110
 319 0011 488BAF90 		movq	656(%rdi), %rbp
 319      020000
 320              	.LVL30:
1171:fltk-1.3.4-1/jpeg/jquant2.c ****   int i;
 321              		.loc 1 1171 3 is_stmt 1 view .LVU111
1176:fltk-1.3.4-1/jpeg/jquant2.c ****     cinfo->dither_mode = JDITHER_FS;
 322              		.loc 1 1176 6 is_stmt 0 view .LVU112
 323 0018 8B5770   		movl	112(%rdi), %edx
1171:fltk-1.3.4-1/jpeg/jquant2.c ****   int i;
 324              		.loc 1 1171 10 view .LVU113
 325 001b 488B5D30 		movq	48(%rbp), %rbx
 326              	.LVL31:
1172:fltk-1.3.4-1/jpeg/jquant2.c **** 
 327              		.loc 1 1172 3 is_stmt 1 view .LVU114
1176:fltk-1.3.4-1/jpeg/jquant2.c ****     cinfo->dither_mode = JDITHER_FS;
 328              		.loc 1 1176 3 view .LVU115
1176:fltk-1.3.4-1/jpeg/jquant2.c ****     cinfo->dither_mode = JDITHER_FS;
 329              		.loc 1 1176 6 is_stmt 0 view .LVU116
 330 001f 85D2     		testl	%edx, %edx
 331 0021 0F848900 		je	.L31
 331      0000
1177:fltk-1.3.4-1/jpeg/jquant2.c **** 
 332              		.loc 1 1177 5 is_stmt 1 view .LVU117
1177:fltk-1.3.4-1/jpeg/jquant2.c **** 
 333              		.loc 1 1177 24 is_stmt 0 view .LVU118
 334 0027 C7477002 		movl	$2, 112(%rdi)
 334      000000
1179:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Set up method pointers */
 335              		.loc 1 1179 3 is_stmt 1 view .LVU119
1179:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Set up method pointers */
 336              		.loc 1 1179 6 is_stmt 0 view .LVU120
 337 002e 85F6     		testl	%esi, %esi
 338 0030 0F844A01 		je	.L42
 338      0000
 339              	.L41:
1181:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->pub.finish_pass = finish_pass1;
 340              		.loc 1 1181 5 is_stmt 1 view .LVU121
1181:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->pub.finish_pass = finish_pass1;
 341              		.loc 1 1181 35 is_stmt 0 view .LVU122
 342 0036 488D0500 		leaq	prescan_quantize(%rip), %rax
 342      000000
1183:fltk-1.3.4-1/jpeg/jquant2.c ****   } else {
 343              		.loc 1 1183 29 view .LVU123
 344 003d C7453801 		movl	$1, 56(%rbp)
 344      000000
1181:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->pub.finish_pass = finish_pass1;
 345              		.loc 1 1181 35 view .LVU124
 346 0044 48894508 		movq	%rax, 8(%rbp)
1182:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->needs_zeroed = TRUE; /* Always zero histogram */
 347              		.loc 1 1182 5 is_stmt 1 view .LVU125
1182:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->needs_zeroed = TRUE; /* Always zero histogram */
 348              		.loc 1 1182 32 is_stmt 0 view .LVU126
 349 0048 488D0500 		leaq	finish_pass1(%rip), %rax
 349      000000
 350 004f 48894510 		movq	%rax, 16(%rbp)
1183:fltk-1.3.4-1/jpeg/jquant2.c ****   } else {
 351              		.loc 1 1183 5 is_stmt 1 view .LVU127
1216:fltk-1.3.4-1/jpeg/jquant2.c ****     for (i = 0; i < HIST_C0_ELEMS; i++) {
 352              		.loc 1 1216 3 view .LVU128
 353              	.LVL32:
 354              	.L33:
1216:fltk-1.3.4-1/jpeg/jquant2.c ****     for (i = 0; i < HIST_C0_ELEMS; i++) {
 355              		.loc 1 1216 3 is_stmt 0 view .LVU129
 356 0053 4889DA   		movq	%rbx, %rdx
 357 0056 488DB300 		leaq	256(%rbx), %rsi
 357      010000
 358              	.LBB15:
 359              	.LBB16:
 360              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h"
   1:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** /* Copyright (C) 2004-2020 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    <https://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifndef _BITS_STRING_FORTIFIED_H
  19:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #define _BITS_STRING_FORTIFIED_H 1
  20:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  21:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifndef _STRING_H
  22:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** # error "Never use <bits/string_fortified.h> directly; include <string.h> instead."
  23:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  24:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  25:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #if !__GNUC_PREREQ (5,0)
  26:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __warndecl (__warn_memset_zero_len,
  27:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  28:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  29:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  30:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  31:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  32:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 	       size_t __len))
  33:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  34:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  35:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  36:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  37:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  38:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memmove (void *__dest, const void *__src, size_t __len))
  39:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  40:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  41:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  42:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  43:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #ifdef __USE_GNU
  44:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  45:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
  46:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 		size_t __len))
  47:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  48:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
  49:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** }
  50:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  51:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  52:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** 
  53:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** /* The first two tests here help to catch a somewhat common problem
  54:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    where the second and third parameter are transposed.  This is
  55:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    especially problematic if the intended fill value is zero.  In this
  56:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    case no work is done at all.  We detect these problems by referring
  57:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****    non-existing functions.  */
  58:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __fortify_function void *
  59:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** __NTH (memset (void *__dest, int __ch, size_t __len))
  60:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
  61:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   /* GCC-5.0 and newer implements these checks in the compiler, so we don't
  62:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****      need them here.  */
  63:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #if !__GNUC_PREREQ (5,0)
  64:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   if (__builtin_constant_p (__len) && __len == 0
  65:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       && (!__builtin_constant_p (__ch) || __ch != 0))
  66:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****     {
  67:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       __warn_memset_zero_len ();
  68:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****       return __dest;
  69:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****     }
  70:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** #endif
  71:/usr/include/x86_64-linux-gnu/bits/string_fortified.h ****   return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 361              		.loc 2 71 10 discriminator 3 view .LVU130
 362 005d 31C0     		xorl	%eax, %eax
 363 005f 90       		.p2align 4,,10
 364              		.p2align 3
 365              	.L40:
 366              	.LBE16:
 367              	.LBE15:
1218:fltk-1.3.4-1/jpeg/jquant2.c **** 	       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
 368              		.loc 1 1218 7 is_stmt 1 discriminator 3 view .LVU131
 369              	.LVL33:
 370              	.LBB18:
 371              	.LBI15:
  59:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
 372              		.loc 2 59 1 discriminator 3 view .LVU132
 373              	.LBB17:
 374              		.loc 2 71 3 discriminator 3 view .LVU133
 375              		.loc 2 71 10 is_stmt 0 discriminator 3 view .LVU134
 376 0060 488B0A   		movq	(%rdx), %rcx
 377 0063 4883C208 		addq	$8, %rdx
 378              	.LVL34:
 379              		.loc 2 71 10 discriminator 3 view .LVU135
 380 0067 488D7908 		leaq	8(%rcx), %rdi
 381 006b 48C70100 		movq	$0, (%rcx)
 381      000000
 382 0072 48C781F8 		movq	$0, 4088(%rcx)
 382      0F000000 
 382      000000
 383 007d 4883E7F8 		andq	$-8, %rdi
 384 0081 4829F9   		subq	%rdi, %rcx
 385              	.LVL35:
 386              		.loc 2 71 10 discriminator 3 view .LVU136
 387 0084 81C10010 		addl	$4096, %ecx
 387      0000
 388 008a C1E903   		shrl	$3, %ecx
 389 008d F348AB   		rep stosq
 390              	.LVL36:
 391              		.loc 2 71 10 discriminator 3 view .LVU137
 392              	.LBE17:
 393              	.LBE18:
1217:fltk-1.3.4-1/jpeg/jquant2.c ****       FMEMZERO((void FAR *) histogram[i],
 394              		.loc 1 1217 36 is_stmt 1 discriminator 3 view .LVU138
1217:fltk-1.3.4-1/jpeg/jquant2.c ****       FMEMZERO((void FAR *) histogram[i],
 395              		.loc 1 1217 17 discriminator 3 view .LVU139
1217:fltk-1.3.4-1/jpeg/jquant2.c ****       FMEMZERO((void FAR *) histogram[i],
 396              		.loc 1 1217 5 is_stmt 0 discriminator 3 view .LVU140
 397 0090 4839F2   		cmpq	%rsi, %rdx
 398 0093 75CB     		jne	.L40
1221:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 399              		.loc 1 1221 5 is_stmt 1 view .LVU141
1221:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 400              		.loc 1 1221 29 is_stmt 0 view .LVU142
 401 0095 C7453800 		movl	$0, 56(%rbp)
 401      000000
1223:fltk-1.3.4-1/jpeg/jquant2.c **** 
 402              		.loc 1 1223 1 view .LVU143
 403 009c 4883C408 		addq	$8, %rsp
 404              		.cfi_remember_state
 405              		.cfi_def_cfa_offset 40
 406 00a0 5B       		popq	%rbx
 407              		.cfi_def_cfa_offset 32
 408              	.LVL37:
1223:fltk-1.3.4-1/jpeg/jquant2.c **** 
 409              		.loc 1 1223 1 view .LVU144
 410 00a1 5D       		popq	%rbp
 411              		.cfi_def_cfa_offset 24
 412              	.LVL38:
1223:fltk-1.3.4-1/jpeg/jquant2.c **** 
 413              		.loc 1 1223 1 view .LVU145
 414 00a2 415C     		popq	%r12
 415              		.cfi_def_cfa_offset 16
 416              	.LVL39:
1223:fltk-1.3.4-1/jpeg/jquant2.c **** 
 417              		.loc 1 1223 1 view .LVU146
 418 00a4 415D     		popq	%r13
 419              		.cfi_def_cfa_offset 8
 420 00a6 C3       		ret
 421              	.LVL40:
 422 00a7 660F1F84 		.p2align 4,,10
 422      00000000 
 422      00
 423              		.p2align 3
 424              	.L31:
 425              		.cfi_restore_state
1179:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Set up method pointers */
 426              		.loc 1 1179 3 is_stmt 1 view .LVU147
1189:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->pub.finish_pass = finish_pass2;
 427              		.loc 1 1189 37 is_stmt 0 view .LVU148
 428 00b0 488D0500 		leaq	pass2_no_dither(%rip), %rax
 428      000000
1179:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Set up method pointers */
 429              		.loc 1 1179 6 view .LVU149
 430 00b7 85F6     		testl	%esi, %esi
 431 00b9 0F8577FF 		jne	.L41
 431      FFFF
 432              	.L32:
1179:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Set up method pointers */
 433              		.loc 1 1179 6 view .LVU150
 434 00bf 48894508 		movq	%rax, 8(%rbp)
1190:fltk-1.3.4-1/jpeg/jquant2.c **** 
 435              		.loc 1 1190 5 is_stmt 1 view .LVU151
1190:fltk-1.3.4-1/jpeg/jquant2.c **** 
 436              		.loc 1 1190 32 is_stmt 0 view .LVU152
 437 00c3 488D0500 		leaq	finish_pass2(%rip), %rax
 437      000000
 438 00ca 48894510 		movq	%rax, 16(%rbp)
1193:fltk-1.3.4-1/jpeg/jquant2.c ****     if (i < 1)
 439              		.loc 1 1193 5 is_stmt 1 view .LVU153
1193:fltk-1.3.4-1/jpeg/jquant2.c ****     if (i < 1)
 440              		.loc 1 1193 7 is_stmt 0 view .LVU154
 441 00ce 418B8424 		movl	156(%r12), %eax
 441      9C000000 
 442              	.LVL41:
1194:fltk-1.3.4-1/jpeg/jquant2.c ****       ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
 443              		.loc 1 1194 5 is_stmt 1 view .LVU155
1194:fltk-1.3.4-1/jpeg/jquant2.c ****       ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
 444              		.loc 1 1194 8 is_stmt 0 view .LVU156
 445 00d6 85C0     		testl	%eax, %eax
 446 00d8 7E46     		jle	.L46
1196:fltk-1.3.4-1/jpeg/jquant2.c ****       ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 447              		.loc 1 1196 5 is_stmt 1 view .LVU157
1196:fltk-1.3.4-1/jpeg/jquant2.c ****       ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 448              		.loc 1 1196 8 is_stmt 0 view .LVU158
 449 00da 3D000100 		cmpl	$256, %eax
 449      00
 450 00df 7E1F     		jle	.L35
1197:fltk-1.3.4-1/jpeg/jquant2.c **** 
 451              		.loc 1 1197 7 is_stmt 1 view .LVU159
 452 00e1 498B0424 		movq	(%r12), %rax
 453              	.LVL42:
1197:fltk-1.3.4-1/jpeg/jquant2.c **** 
 454              		.loc 1 1197 7 is_stmt 0 view .LVU160
 455 00e5 4C89E7   		movq	%r12, %rdi
 456              	.LVL43:
1197:fltk-1.3.4-1/jpeg/jquant2.c **** 
 457              		.loc 1 1197 7 view .LVU161
 458 00e8 C740283B 		movl	$59, 40(%rax)
 458      000000
 459              	.LVL44:
1197:fltk-1.3.4-1/jpeg/jquant2.c **** 
 460              		.loc 1 1197 7 view .LVU162
 461 00ef 498B0424 		movq	(%r12), %rax
 462 00f3 C7402C00 		movl	$256, 44(%rax)
 462      010000
 463 00fa 498B0424 		movq	(%r12), %rax
 464 00fe FF10     		call	*(%rax)
 465              	.LVL45:
 466              	.L35:
1199:fltk-1.3.4-1/jpeg/jquant2.c ****       size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 467              		.loc 1 1199 5 is_stmt 1 view .LVU163
1199:fltk-1.3.4-1/jpeg/jquant2.c ****       size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 468              		.loc 1 1199 8 is_stmt 0 view .LVU164
 469 0100 41837C24 		cmpl	$2, 112(%r12)
 469      7002
 470 0106 743F     		je	.L47
 471              	.L36:
1216:fltk-1.3.4-1/jpeg/jquant2.c ****     for (i = 0; i < HIST_C0_ELEMS; i++) {
 472              		.loc 1 1216 3 is_stmt 1 view .LVU165
1216:fltk-1.3.4-1/jpeg/jquant2.c ****     for (i = 0; i < HIST_C0_ELEMS; i++) {
 473              		.loc 1 1216 6 is_stmt 0 view .LVU166
 474 0108 8B4538   		movl	56(%rbp), %eax
 475 010b 85C0     		testl	%eax, %eax
 476 010d 0F8540FF 		jne	.L33
 476      FFFF
1223:fltk-1.3.4-1/jpeg/jquant2.c **** 
 477              		.loc 1 1223 1 view .LVU167
 478 0113 4883C408 		addq	$8, %rsp
 479              		.cfi_remember_state
 480              		.cfi_def_cfa_offset 40
 481 0117 5B       		popq	%rbx
 482              		.cfi_def_cfa_offset 32
 483              	.LVL46:
1223:fltk-1.3.4-1/jpeg/jquant2.c **** 
 484              		.loc 1 1223 1 view .LVU168
 485 0118 5D       		popq	%rbp
 486              		.cfi_def_cfa_offset 24
 487              	.LVL47:
1223:fltk-1.3.4-1/jpeg/jquant2.c **** 
 488              		.loc 1 1223 1 view .LVU169
 489 0119 415C     		popq	%r12
 490              		.cfi_def_cfa_offset 16
 491              	.LVL48:
1223:fltk-1.3.4-1/jpeg/jquant2.c **** 
 492              		.loc 1 1223 1 view .LVU170
 493 011b 415D     		popq	%r13
 494              		.cfi_def_cfa_offset 8
 495 011d C3       		ret
 496              	.LVL49:
 497 011e 6690     		.p2align 4,,10
 498              		.p2align 3
 499              	.L46:
 500              		.cfi_restore_state
1195:fltk-1.3.4-1/jpeg/jquant2.c ****     if (i > MAXNUMCOLORS)
 501              		.loc 1 1195 7 is_stmt 1 view .LVU171
 502 0120 498B0424 		movq	(%r12), %rax
 503              	.LVL50:
1195:fltk-1.3.4-1/jpeg/jquant2.c ****     if (i > MAXNUMCOLORS)
 504              		.loc 1 1195 7 is_stmt 0 view .LVU172
 505 0124 4C89E7   		movq	%r12, %rdi
 506              	.LVL51:
1195:fltk-1.3.4-1/jpeg/jquant2.c ****     if (i > MAXNUMCOLORS)
 507              		.loc 1 1195 7 view .LVU173
 508 0127 C740283A 		movl	$58, 40(%rax)
 508      000000
 509              	.LVL52:
1195:fltk-1.3.4-1/jpeg/jquant2.c ****     if (i > MAXNUMCOLORS)
 510              		.loc 1 1195 7 view .LVU174
 511 012e 498B0424 		movq	(%r12), %rax
 512 0132 C7402C01 		movl	$1, 44(%rax)
 512      000000
 513 0139 498B0424 		movq	(%r12), %rax
 514 013d FF10     		call	*(%rax)
 515              	.LVL53:
1196:fltk-1.3.4-1/jpeg/jquant2.c ****       ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 516              		.loc 1 1196 5 is_stmt 1 view .LVU175
1199:fltk-1.3.4-1/jpeg/jquant2.c ****       size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 517              		.loc 1 1199 5 view .LVU176
1199:fltk-1.3.4-1/jpeg/jquant2.c ****       size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 518              		.loc 1 1199 8 is_stmt 0 view .LVU177
 519 013f 41837C24 		cmpl	$2, 112(%r12)
 519      7002
 520 0145 75C1     		jne	.L36
 521              	.L47:
 522              	.LBB19:
1200:fltk-1.3.4-1/jpeg/jquant2.c **** 				   (3 * SIZEOF(FSERROR)));
 523              		.loc 1 1200 7 is_stmt 1 view .LVU178
1200:fltk-1.3.4-1/jpeg/jquant2.c **** 				   (3 * SIZEOF(FSERROR)));
 524              		.loc 1 1200 57 is_stmt 0 view .LVU179
 525 0147 418B8424 		movl	136(%r12), %eax
 525      88000000 
1203:fltk-1.3.4-1/jpeg/jquant2.c **** 	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 526              		.loc 1 1203 20 view .LVU180
 527 014f 488B7D40 		movq	64(%rbp), %rdi
1200:fltk-1.3.4-1/jpeg/jquant2.c **** 				   (3 * SIZEOF(FSERROR)));
 528              		.loc 1 1200 57 view .LVU181
 529 0153 83C002   		addl	$2, %eax
1200:fltk-1.3.4-1/jpeg/jquant2.c **** 				   (3 * SIZEOF(FSERROR)));
 530              		.loc 1 1200 14 view .LVU182
 531 0156 488D1440 		leaq	(%rax,%rax,2), %rdx
 532 015a 4C8D2C12 		leaq	(%rdx,%rdx), %r13
 533              	.LVL54:
1203:fltk-1.3.4-1/jpeg/jquant2.c **** 	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 534              		.loc 1 1203 7 is_stmt 1 view .LVU183
1203:fltk-1.3.4-1/jpeg/jquant2.c **** 	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 535              		.loc 1 1203 10 is_stmt 0 view .LVU184
 536 015e 4885FF   		testq	%rdi, %rdi
 537 0161 7429     		je	.L48
 538              	.L37:
1207:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Make the error-limit table if we didn't already. */
 539              		.loc 1 1207 7 is_stmt 1 view .LVU185
 540              	.LVL55:
 541              	.LBB20:
 542              	.LBI20:
  59:/usr/include/x86_64-linux-gnu/bits/string_fortified.h **** {
 543              		.loc 2 59 1 view .LVU186
 544              	.LBB21:
 545              		.loc 2 71 3 view .LVU187
 546              		.loc 2 71 10 is_stmt 0 view .LVU188
 547 0163 31F6     		xorl	%esi, %esi
 548 0165 4C89EA   		movq	%r13, %rdx
 549 0168 E8000000 		call	memset@PLT
 549      00
 550              	.LVL56:
 551              		.loc 2 71 10 view .LVU189
 552              	.LBE21:
 553              	.LBE20:
1209:fltk-1.3.4-1/jpeg/jquant2.c **** 	init_error_limit(cinfo);
 554              		.loc 1 1209 7 is_stmt 1 view .LVU190
1209:fltk-1.3.4-1/jpeg/jquant2.c **** 	init_error_limit(cinfo);
 555              		.loc 1 1209 10 is_stmt 0 view .LVU191
 556 016d 48837D50 		cmpq	$0, 80(%rbp)
 556      00
 557 0172 7434     		je	.L49
 558              	.L38:
1211:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 559              		.loc 1 1211 7 is_stmt 1 view .LVU192
1211:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 560              		.loc 1 1211 29 is_stmt 0 view .LVU193
 561 0174 C7454800 		movl	$0, 72(%rbp)
 561      000000
 562 017b EB8B     		jmp	.L36
 563              	.LVL57:
 564 017d 0F1F00   		.p2align 4,,10
 565              		.p2align 3
 566              	.L42:
1211:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 567              		.loc 1 1211 29 view .LVU194
 568              	.LBE19:
1187:fltk-1.3.4-1/jpeg/jquant2.c ****     else
 569              		.loc 1 1187 37 view .LVU195
 570 0180 488D0500 		leaq	pass2_fs_dither(%rip), %rax
 570      000000
 571 0187 E933FFFF 		jmp	.L32
 571      FF
 572              	.LVL58:
 573              	.L48:
 574              	.LBB22:
1204:fltk-1.3.4-1/jpeg/jquant2.c **** 	  ((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 575              		.loc 1 1204 2 is_stmt 1 view .LVU196
1204:fltk-1.3.4-1/jpeg/jquant2.c **** 	  ((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 576              		.loc 1 1204 36 is_stmt 0 view .LVU197
 577 018c 498B4424 		movq	8(%r12), %rax
 577      08
 578 0191 4C89E7   		movq	%r12, %rdi
 579 0194 4C89EA   		movq	%r13, %rdx
 580 0197 BE010000 		movl	$1, %esi
 580      00
 581 019c FF5008   		call	*8(%rax)
 582              	.LVL59:
1204:fltk-1.3.4-1/jpeg/jquant2.c **** 	  ((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 583              		.loc 1 1204 22 view .LVU198
 584 019f 48894540 		movq	%rax, 64(%rbp)
1204:fltk-1.3.4-1/jpeg/jquant2.c **** 	  ((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 585              		.loc 1 1204 36 view .LVU199
 586 01a3 4889C7   		movq	%rax, %rdi
 587 01a6 EBBB     		jmp	.L37
 588              	.L49:
1210:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->on_odd_row = FALSE;
 589              		.loc 1 1210 2 is_stmt 1 view .LVU200
 590 01a8 4C89E7   		movq	%r12, %rdi
 591 01ab E8000000 		call	init_error_limit
 591      00
 592              	.LVL60:
 593 01b0 EBC2     		jmp	.L38
 594              	.LBE22:
 595              		.cfi_endproc
 596              	.LFE66:
 598              		.section	.text.update_box.isra.0,"ax",@progbits
 599              		.p2align 4
 601              	update_box.isra.0:
 602              	.LVL61:
 603              	.LFB69:
 314:fltk-1.3.4-1/jpeg/jquant2.c **** /* Shrink the min/max bounds of a box to enclose only nonzero elements, */
 604              		.loc 1 314 1 view -0
 605              		.cfi_startproc
 318:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram = cquantize->histogram;
 606              		.loc 1 318 3 view .LVU202
 319:fltk-1.3.4-1/jpeg/jquant2.c ****   histptr histp;
 607              		.loc 1 319 3 view .LVU203
 314:fltk-1.3.4-1/jpeg/jquant2.c **** /* Shrink the min/max bounds of a box to enclose only nonzero elements, */
 608              		.loc 1 314 1 is_stmt 0 view .LVU204
 609 0000 4157     		pushq	%r15
 610              		.cfi_def_cfa_offset 16
 611              		.cfi_offset 15, -16
 612 0002 4989F2   		movq	%rsi, %r10
 613 0005 4156     		pushq	%r14
 614              		.cfi_def_cfa_offset 24
 615              		.cfi_offset 14, -24
 616 0007 4155     		pushq	%r13
 617              		.cfi_def_cfa_offset 32
 618              		.cfi_offset 13, -32
 619 0009 4154     		pushq	%r12
 620              		.cfi_def_cfa_offset 40
 621              		.cfi_offset 12, -40
 622 000b 55       		pushq	%rbp
 623              		.cfi_def_cfa_offset 48
 624              		.cfi_offset 6, -48
 625 000c 53       		pushq	%rbx
 626              		.cfi_def_cfa_offset 56
 627              		.cfi_offset 3, -56
 326:fltk-1.3.4-1/jpeg/jquant2.c ****   c1min = boxp->c1min;  c1max = boxp->c1max;
 628              		.loc 1 326 9 view .LVU205
 629 000d 4C630E   		movslq	(%rsi), %r9
 326:fltk-1.3.4-1/jpeg/jquant2.c ****   c1min = boxp->c1min;  c1max = boxp->c1max;
 630              		.loc 1 326 31 view .LVU206
 631 0010 448B5E04 		movl	4(%rsi), %r11d
 319:fltk-1.3.4-1/jpeg/jquant2.c ****   histptr histp;
 632              		.loc 1 319 10 view .LVU207
 633 0014 488B5F30 		movq	48(%rdi), %rbx
 634              	.LVL62:
 320:fltk-1.3.4-1/jpeg/jquant2.c ****   int c0,c1,c2;
 635              		.loc 1 320 3 is_stmt 1 view .LVU208
 321:fltk-1.3.4-1/jpeg/jquant2.c ****   int c0min,c0max,c1min,c1max,c2min,c2max;
 636              		.loc 1 321 3 view .LVU209
 322:fltk-1.3.4-1/jpeg/jquant2.c ****   INT32 dist0,dist1,dist2;
 637              		.loc 1 322 3 view .LVU210
 323:fltk-1.3.4-1/jpeg/jquant2.c ****   long ccount;
 638              		.loc 1 323 3 view .LVU211
 324:fltk-1.3.4-1/jpeg/jquant2.c ****   
 639              		.loc 1 324 3 view .LVU212
 326:fltk-1.3.4-1/jpeg/jquant2.c ****   c1min = boxp->c1min;  c1max = boxp->c1max;
 640              		.loc 1 326 3 view .LVU213
 326:fltk-1.3.4-1/jpeg/jquant2.c ****   c1min = boxp->c1min;  c1max = boxp->c1max;
 641              		.loc 1 326 25 view .LVU214
 327:fltk-1.3.4-1/jpeg/jquant2.c ****   c2min = boxp->c2min;  c2max = boxp->c2max;
 642              		.loc 1 327 3 view .LVU215
 327:fltk-1.3.4-1/jpeg/jquant2.c ****   c2min = boxp->c2min;  c2max = boxp->c2max;
 643              		.loc 1 327 9 is_stmt 0 view .LVU216
 644 0018 448B4608 		movl	8(%rsi), %r8d
 645              	.LVL63:
 327:fltk-1.3.4-1/jpeg/jquant2.c ****   c2min = boxp->c2min;  c2max = boxp->c2max;
 646              		.loc 1 327 25 is_stmt 1 view .LVU217
 327:fltk-1.3.4-1/jpeg/jquant2.c ****   c2min = boxp->c2min;  c2max = boxp->c2max;
 647              		.loc 1 327 31 is_stmt 0 view .LVU218
 648 001c 8B4E0C   		movl	12(%rsi), %ecx
 649              	.LVL64:
 328:fltk-1.3.4-1/jpeg/jquant2.c ****   
 650              		.loc 1 328 3 is_stmt 1 view .LVU219
 328:fltk-1.3.4-1/jpeg/jquant2.c ****   
 651              		.loc 1 328 9 is_stmt 0 view .LVU220
 652 001f 8B5610   		movl	16(%rsi), %edx
 653              	.LVL65:
 328:fltk-1.3.4-1/jpeg/jquant2.c ****   
 654              		.loc 1 328 25 is_stmt 1 view .LVU221
 328:fltk-1.3.4-1/jpeg/jquant2.c ****   
 655              		.loc 1 328 31 is_stmt 0 view .LVU222
 656 0022 8B4614   		movl	20(%rsi), %eax
 657              	.LVL66:
 330:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c0 = c0min; c0 <= c0max; c0++)
 658              		.loc 1 330 3 is_stmt 1 view .LVU223
 330:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c0 = c0min; c0 <= c0max; c0++)
 659              		.loc 1 330 6 is_stmt 0 view .LVU224
 660 0025 4539D9   		cmpl	%r11d, %r9d
 661 0028 0F8DC200 		jge	.L51
 661      0000
 662 002e 4863F2   		movslq	%edx, %rsi
 663              	.LVL67:
 330:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c0 = c0min; c0 <= c0max; c0++)
 664              		.loc 1 330 6 view .LVU225
 665 0031 4D63E0   		movslq	%r8d, %r12
 666 0034 4D63E9   		movslq	%r9d, %r13
 667 0037 488D3C36 		leaq	(%rsi,%rsi), %rdi
 668              	.LVL68:
 330:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c0 = c0min; c0 <= c0max; c0++)
 669              		.loc 1 330 6 view .LVU226
 670 003b 49C1E406 		salq	$6, %r12
 671 003f 48897C24 		movq	%rdi, -16(%rsp)
 671      F0
 672 0044 4C01E7   		addq	%r12, %rdi
 673 0047 48897C24 		movq	%rdi, -8(%rsp)
 673      F8
 674              	.L52:
 675 004c 4489ED   		movl	%r13d, %ebp
 676              	.LVL69:
 332:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 677              		.loc 1 332 24 is_stmt 1 view .LVU227
 332:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 678              		.loc 1 332 7 is_stmt 0 view .LVU228
 679 004f 4139C8   		cmpl	%ecx, %r8d
 680 0052 0F8F2903 		jg	.L59
 680      0000
 681 0058 4C8B7C24 		movq	-8(%rsp), %r15
 681      F8
 333:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c2 = c2min; c2 <= c2max; c2++)
 682              		.loc 1 333 21 view .LVU229
 683 005d 4589C6   		movl	%r8d, %r14d
 684 0060 4E033CEB 		addq	(%rbx,%r13,8), %r15
 685              	.LVL70:
 686              	.L57:
 333:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c2 = c2min; c2 <= c2max; c2++)
 687              		.loc 1 333 2 is_stmt 1 view .LVU230
 333:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c2 = c2min; c2 <= c2max; c2++)
 688              		.loc 1 333 8 is_stmt 0 view .LVU231
 689 0064 4C89FE   		movq	%r15, %rsi
 690              	.LVL71:
 334:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 691              		.loc 1 334 2 is_stmt 1 view .LVU232
 334:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 692              		.loc 1 334 19 view .LVU233
 334:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 693              		.loc 1 334 2 is_stmt 0 view .LVU234
 694 0067 39C2     		cmpl	%eax, %edx
 695 0069 0F8F0103 		jg	.L53
 695      0000
 334:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 696              		.loc 1 334 2 view .LVU235
 697 006f 89D7     		movl	%edx, %edi
 698 0071 EB10     		jmp	.L56
 699              	.LVL72:
 700              		.p2align 4,,10
 701 0073 0F1F4400 		.p2align 3
 701      00
 702              	.L54:
 334:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 703              		.loc 1 334 32 is_stmt 1 view .LVU236
 334:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 704              		.loc 1 334 34 is_stmt 0 view .LVU237
 705 0078 83C701   		addl	$1, %edi
 706              	.LVL73:
 334:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 707              		.loc 1 334 19 is_stmt 1 view .LVU238
 334:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 708              		.loc 1 334 2 is_stmt 0 view .LVU239
 709 007b 39F8     		cmpl	%edi, %eax
 710 007d 0F8CED02 		jl	.L53
 710      0000
 711              	.L56:
 335:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c0min = c0min = c0;
 712              		.loc 1 335 4 is_stmt 1 view .LVU240
 335:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c0min = c0min = c0;
 713              		.loc 1 335 14 is_stmt 0 view .LVU241
 714 0083 4883C602 		addq	$2, %rsi
 715              	.LVL74:
 335:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c0min = c0min = c0;
 716              		.loc 1 335 7 view .LVU242
 717 0087 66837EFE 		cmpw	$0, -2(%rsi)
 717      00
 718 008c 74EA     		je	.L54
 336:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c0min;
 719              		.loc 1 336 6 is_stmt 1 view .LVU243
 720              	.LVL75:
 336:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c0min;
 721              		.loc 1 336 18 is_stmt 0 view .LVU244
 722 008e 41892A   		movl	%ebp, (%r10)
 337:fltk-1.3.4-1/jpeg/jquant2.c **** 	  }
 723              		.loc 1 337 6 is_stmt 1 view .LVU245
 724              	.LDL1:
 341:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c0 = c0max; c0 >= c0min; c0--)
 725              		.loc 1 341 3 view .LVU246
 341:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c0 = c0max; c0 >= c0min; c0--)
 726              		.loc 1 341 6 is_stmt 0 view .LVU247
 727 0091 4139EB   		cmpl	%ebp, %r11d
 728 0094 0F8EC602 		jle	.L108
 728      0000
 729              	.LVL76:
 730              	.L55:
 342:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c1 = c1min; c1 <= c1max; c1++) {
 731              		.loc 1 342 22 is_stmt 1 view .LVU248
 732 009a 4D63CB   		movslq	%r11d, %r9
 733 009d 4C036424 		addq	-16(%rsp), %r12
 733      F0
 734              	.LVL77:
 735              	.L60:
 342:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c1 = c1min; c1 <= c1max; c1++) {
 736              		.loc 1 342 22 is_stmt 0 view .LVU249
 737 00a2 4589CE   		movl	%r9d, %r14d
 738              	.LVL78:
 343:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 739              		.loc 1 343 24 is_stmt 1 view .LVU250
 343:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 740              		.loc 1 343 7 is_stmt 0 view .LVU251
 741 00a5 4139C8   		cmpl	%ecx, %r8d
 742 00a8 0F8FA502 		jg	.L66
 742      0000
 743 00ae 4E8B3CCB 		movq	(%rbx,%r9,8), %r15
 344:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c2 = c2min; c2 <= c2max; c2++)
 744              		.loc 1 344 21 view .LVU252
 745 00b2 4589C5   		movl	%r8d, %r13d
 746 00b5 4D01E7   		addq	%r12, %r15
 747              	.LVL79:
 748              	.L64:
 344:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c2 = c2min; c2 <= c2max; c2++)
 749              		.loc 1 344 2 is_stmt 1 view .LVU253
 344:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c2 = c2min; c2 <= c2max; c2++)
 750              		.loc 1 344 8 is_stmt 0 view .LVU254
 751 00b8 4C89FE   		movq	%r15, %rsi
 752              	.LVL80:
 345:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 753              		.loc 1 345 2 is_stmt 1 view .LVU255
 345:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 754              		.loc 1 345 19 view .LVU256
 345:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 755              		.loc 1 345 2 is_stmt 0 view .LVU257
 756 00bb 39C2     		cmpl	%eax, %edx
 757 00bd 0F8F7F02 		jg	.L61
 757      0000
 345:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 758              		.loc 1 345 2 view .LVU258
 759 00c3 89D7     		movl	%edx, %edi
 760 00c5 EB14     		jmp	.L63
 761              	.LVL81:
 762 00c7 660F1F84 		.p2align 4,,10
 762      00000000 
 762      00
 763              		.p2align 3
 764              	.L62:
 345:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 765              		.loc 1 345 32 is_stmt 1 view .LVU259
 345:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 766              		.loc 1 345 34 is_stmt 0 view .LVU260
 767 00d0 83C701   		addl	$1, %edi
 768              	.LVL82:
 345:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 769              		.loc 1 345 19 is_stmt 1 view .LVU261
 345:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 770              		.loc 1 345 2 is_stmt 0 view .LVU262
 771 00d3 39F8     		cmpl	%edi, %eax
 772 00d5 0F8C6702 		jl	.L61
 772      0000
 773              	.L63:
 346:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c0max = c0max = c0;
 774              		.loc 1 346 4 is_stmt 1 view .LVU263
 346:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c0max = c0max = c0;
 775              		.loc 1 346 14 is_stmt 0 view .LVU264
 776 00db 4883C602 		addq	$2, %rsi
 777              	.LVL83:
 346:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c0max = c0max = c0;
 778              		.loc 1 346 7 view .LVU265
 779 00df 66837EFE 		cmpw	$0, -2(%rsi)
 779      00
 780 00e4 74EA     		je	.L62
 347:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c0max;
 781              		.loc 1 347 6 is_stmt 1 view .LVU266
 782              	.LVL84:
 347:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c0max;
 783              		.loc 1 347 18 is_stmt 0 view .LVU267
 784 00e6 45897204 		movl	%r14d, 4(%r10)
 348:fltk-1.3.4-1/jpeg/jquant2.c **** 	  }
 785              		.loc 1 348 6 is_stmt 1 view .LVU268
 786 00ea 4C63CD   		movslq	%ebp, %r9
 787              	.LVL85:
 348:fltk-1.3.4-1/jpeg/jquant2.c **** 	  }
 788              		.loc 1 348 6 is_stmt 0 view .LVU269
 789 00ed 4589F3   		movl	%r14d, %r11d
 790              	.LVL86:
 791              	.L51:
 352:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++)
 792              		.loc 1 352 3 is_stmt 1 view .LVU270
 352:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++)
 793              		.loc 1 352 6 is_stmt 0 view .LVU271
 794 00f0 4139C8   		cmpl	%ecx, %r8d
 795 00f3 0F8DA700 		jge	.L67
 795      0000
 352:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++)
 796              		.loc 1 352 6 view .LVU272
 797 00f9 4C63EA   		movslq	%edx, %r13
 798 00fc 4D63E0   		movslq	%r8d, %r12
 799 00ff 4489C5   		movl	%r8d, %ebp
 800 0102 4D01ED   		addq	%r13, %r13
 801 0105 49C1E406 		salq	$6, %r12
 802              	.L68:
 803              	.LVL87:
 354:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 804              		.loc 1 354 24 is_stmt 1 view .LVU273
 805 0109 4D63F1   		movslq	%r9d, %r14
 806 010c 4F8D7C25 		leaq	0(%r13,%r12), %r15
 806      00
 354:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 807              		.loc 1 354 7 is_stmt 0 view .LVU274
 808 0111 4539CB   		cmpl	%r9d, %r11d
 809 0114 0F8CEB02 		jl	.L75
 809      0000
 810              	.LVL88:
 811              	.L73:
 355:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c2 = c2min; c2 <= c2max; c2++)
 812              		.loc 1 355 2 is_stmt 1 view .LVU275
 355:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c2 = c2min; c2 <= c2max; c2++)
 813              		.loc 1 355 8 is_stmt 0 view .LVU276
 814 011a 4A8B34F3 		movq	(%rbx,%r14,8), %rsi
 815 011e 4C01FE   		addq	%r15, %rsi
 816              	.LVL89:
 356:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 817              		.loc 1 356 2 is_stmt 1 view .LVU277
 356:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 818              		.loc 1 356 19 view .LVU278
 356:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 819              		.loc 1 356 2 is_stmt 0 view .LVU279
 820 0121 39C2     		cmpl	%eax, %edx
 821 0123 0F8FCF02 		jg	.L69
 821      0000
 822 0129 89D7     		movl	%edx, %edi
 823 012b EB0E     		jmp	.L72
 824              	.LVL90:
 825 012d 0F1F00   		.p2align 4,,10
 826              		.p2align 3
 827              	.L70:
 356:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 828              		.loc 1 356 32 is_stmt 1 view .LVU280
 356:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 829              		.loc 1 356 34 is_stmt 0 view .LVU281
 830 0130 83C701   		addl	$1, %edi
 831              	.LVL91:
 356:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 832              		.loc 1 356 19 is_stmt 1 view .LVU282
 356:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 833              		.loc 1 356 2 is_stmt 0 view .LVU283
 834 0133 39F8     		cmpl	%edi, %eax
 835 0135 0F8CBD02 		jl	.L69
 835      0000
 836              	.L72:
 357:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c1min = c1min = c1;
 837              		.loc 1 357 4 is_stmt 1 view .LVU284
 357:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c1min = c1min = c1;
 838              		.loc 1 357 14 is_stmt 0 view .LVU285
 839 013b 4883C602 		addq	$2, %rsi
 840              	.LVL92:
 357:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c1min = c1min = c1;
 841              		.loc 1 357 7 view .LVU286
 842 013f 66837EFE 		cmpw	$0, -2(%rsi)
 842      00
 843 0144 74EA     		je	.L70
 358:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c1min;
 844              		.loc 1 358 6 is_stmt 1 view .LVU287
 845              	.LVL93:
 358:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c1min;
 846              		.loc 1 358 18 is_stmt 0 view .LVU288
 847 0146 41896A08 		movl	%ebp, 8(%r10)
 359:fltk-1.3.4-1/jpeg/jquant2.c **** 	  }
 848              		.loc 1 359 6 is_stmt 1 view .LVU289
 849              	.LDL2:
 363:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1max; c1 >= c1min; c1--)
 850              		.loc 1 363 3 view .LVU290
 363:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1max; c1 >= c1min; c1--)
 851              		.loc 1 363 6 is_stmt 0 view .LVU291
 852 014a 39E9     		cmpl	%ebp, %ecx
 853 014c 0F8E6C02 		jle	.L110
 853      0000
 854              	.LVL94:
 855              	.L71:
 364:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 856              		.loc 1 364 22 is_stmt 1 view .LVU292
 857 0152 4C63C1   		movslq	%ecx, %r8
 367:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 858              		.loc 1 367 2 is_stmt 0 view .LVU293
 859 0155 4189CC   		movl	%ecx, %r12d
 860 0158 49C1E006 		salq	$6, %r8
 861              	.LVL95:
 862              	.L76:
 365:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 863              		.loc 1 365 24 is_stmt 1 view .LVU294
 864 015c 4D63F1   		movslq	%r9d, %r14
 865 015f 4F8D7C05 		leaq	0(%r13,%r8), %r15
 865      00
 365:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 866              		.loc 1 365 7 is_stmt 0 view .LVU295
 867 0164 4539CB   		cmpl	%r9d, %r11d
 868 0167 0F8C4002 		jl	.L82
 868      0000
 869              	.LVL96:
 870              	.L80:
 366:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c2 = c2min; c2 <= c2max; c2++)
 871              		.loc 1 366 2 is_stmt 1 view .LVU296
 366:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c2 = c2min; c2 <= c2max; c2++)
 872              		.loc 1 366 8 is_stmt 0 view .LVU297
 873 016d 4A8B34F3 		movq	(%rbx,%r14,8), %rsi
 874 0171 4C01FE   		addq	%r15, %rsi
 875              	.LVL97:
 367:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 876              		.loc 1 367 2 is_stmt 1 view .LVU298
 367:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 877              		.loc 1 367 19 view .LVU299
 367:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 878              		.loc 1 367 2 is_stmt 0 view .LVU300
 879 0174 39C2     		cmpl	%eax, %edx
 880 0176 0F8F2402 		jg	.L77
 880      0000
 881 017c 89D7     		movl	%edx, %edi
 882 017e EB0B     		jmp	.L79
 883              	.LVL98:
 884              		.p2align 4,,10
 885              		.p2align 3
 886              	.L78:
 367:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 887              		.loc 1 367 32 is_stmt 1 view .LVU301
 367:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 888              		.loc 1 367 34 is_stmt 0 view .LVU302
 889 0180 83C701   		addl	$1, %edi
 890              	.LVL99:
 367:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 891              		.loc 1 367 19 is_stmt 1 view .LVU303
 367:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp++ != 0) {
 892              		.loc 1 367 2 is_stmt 0 view .LVU304
 893 0183 39F8     		cmpl	%edi, %eax
 894 0185 0F8C1502 		jl	.L77
 894      0000
 895              	.L79:
 368:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c1max = c1max = c1;
 896              		.loc 1 368 4 is_stmt 1 view .LVU305
 368:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c1max = c1max = c1;
 897              		.loc 1 368 14 is_stmt 0 view .LVU306
 898 018b 4883C602 		addq	$2, %rsi
 899              	.LVL100:
 368:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c1max = c1max = c1;
 900              		.loc 1 368 7 view .LVU307
 901 018f 66837EFE 		cmpw	$0, -2(%rsi)
 901      00
 902 0194 74EA     		je	.L78
 369:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c1max;
 903              		.loc 1 369 6 is_stmt 1 view .LVU308
 904              	.LVL101:
 369:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c1max;
 905              		.loc 1 369 18 is_stmt 0 view .LVU309
 906 0196 4589620C 		movl	%r12d, 12(%r10)
 370:fltk-1.3.4-1/jpeg/jquant2.c **** 	  }
 907              		.loc 1 370 6 is_stmt 1 view .LVU310
 908 019a 4189E8   		movl	%ebp, %r8d
 909 019d 4489E1   		movl	%r12d, %ecx
 910              	.LVL102:
 911              	.L67:
 374:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c2 = c2min; c2 <= c2max; c2++)
 912              		.loc 1 374 3 view .LVU311
 374:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c2 = c2min; c2 <= c2max; c2++)
 913              		.loc 1 374 6 is_stmt 0 view .LVU312
 914 01a0 39C2     		cmpl	%eax, %edx
 915 01a2 0F8DA500 		jge	.L83
 915      0000
 377:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 916              		.loc 1 377 25 view .LVU313
 917 01a8 4D63E0   		movslq	%r8d, %r12
 918 01ab 4C63EA   		movslq	%edx, %r13
 919 01ae 89D5     		movl	%edx, %ebp
 920 01b0 49C1E406 		salq	$6, %r12
 921 01b4 4D01ED   		addq	%r13, %r13
 922              	.L84:
 923              	.LVL103:
 376:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1min][c2];
 924              		.loc 1 376 24 is_stmt 1 view .LVU314
 925 01b7 4D63F1   		movslq	%r9d, %r14
 926 01ba 4F8D3C2C 		leaq	(%r12,%r13), %r15
 376:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1min][c2];
 927              		.loc 1 376 7 is_stmt 0 view .LVU315
 928 01be 4539CB   		cmpl	%r9d, %r11d
 929 01c1 0F8C6602 		jl	.L91
 929      0000
 930              	.LVL104:
 931              	.L89:
 377:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 932              		.loc 1 377 2 is_stmt 1 view .LVU316
 377:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 933              		.loc 1 377 8 is_stmt 0 view .LVU317
 934 01c7 4A8B34F3 		movq	(%rbx,%r14,8), %rsi
 935 01cb 4C01FE   		addq	%r15, %rsi
 936              	.LVL105:
 378:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 937              		.loc 1 378 2 is_stmt 1 view .LVU318
 378:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 938              		.loc 1 378 19 view .LVU319
 378:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 939              		.loc 1 378 2 is_stmt 0 view .LVU320
 940 01ce 4439C1   		cmpl	%r8d, %ecx
 941 01d1 0F8C4902 		jl	.L85
 941      0000
 942 01d7 4489C7   		movl	%r8d, %edi
 943 01da EB13     		jmp	.L88
 944              	.LVL106:
 945 01dc 0F1F4000 		.p2align 4,,10
 946              		.p2align 3
 947              	.L86:
 378:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 948              		.loc 1 378 32 is_stmt 1 view .LVU321
 378:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 949              		.loc 1 378 34 is_stmt 0 view .LVU322
 950 01e0 83C701   		addl	$1, %edi
 951              	.LVL107:
 378:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 952              		.loc 1 378 44 view .LVU323
 953 01e3 4883C640 		addq	$64, %rsi
 954              	.LVL108:
 378:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 955              		.loc 1 378 19 is_stmt 1 view .LVU324
 378:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 956              		.loc 1 378 2 is_stmt 0 view .LVU325
 957 01e7 39CF     		cmpl	%ecx, %edi
 958 01e9 0F8F3102 		jg	.L85
 958      0000
 959              	.L88:
 379:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c2min = c2min = c2;
 960              		.loc 1 379 4 is_stmt 1 view .LVU326
 379:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c2min = c2min = c2;
 961              		.loc 1 379 7 is_stmt 0 view .LVU327
 962 01ef 66833E00 		cmpw	$0, (%rsi)
 963 01f3 74EB     		je	.L86
 380:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c2min;
 964              		.loc 1 380 6 is_stmt 1 view .LVU328
 965              	.LVL109:
 380:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c2min;
 966              		.loc 1 380 18 is_stmt 0 view .LVU329
 967 01f5 41896A10 		movl	%ebp, 16(%r10)
 381:fltk-1.3.4-1/jpeg/jquant2.c **** 	  }
 968              		.loc 1 381 6 is_stmt 1 view .LVU330
 969              	.LDL3:
 385:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c2 = c2max; c2 >= c2min; c2--)
 970              		.loc 1 385 3 view .LVU331
 385:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c2 = c2max; c2 >= c2min; c2--)
 971              		.loc 1 385 6 is_stmt 0 view .LVU332
 972 01f9 39E8     		cmpl	%ebp, %eax
 973 01fb 0F8EEB01 		jle	.L112
 973      0000
 974              	.LVL110:
 975              	.L87:
 386:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 976              		.loc 1 386 22 is_stmt 1 view .LVU333
 977 0201 4C63E8   		movslq	%eax, %r13
 389:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 978              		.loc 1 389 2 is_stmt 0 view .LVU334
 979 0204 89C7     		movl	%eax, %edi
 980 0206 4D01ED   		addq	%r13, %r13
 981              	.LVL111:
 982              	.L92:
 387:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1min][c2];
 983              		.loc 1 387 24 is_stmt 1 view .LVU335
 984 0209 4D63F1   		movslq	%r9d, %r14
 985 020c 4F8D3C2C 		leaq	(%r12,%r13), %r15
 387:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1min][c2];
 986              		.loc 1 387 7 is_stmt 0 view .LVU336
 987 0210 4539CB   		cmpl	%r9d, %r11d
 988 0213 0F8CC401 		jl	.L98
 988      0000
 989              	.LVL112:
 990              	.L96:
 388:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 991              		.loc 1 388 2 is_stmt 1 view .LVU337
 388:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 992              		.loc 1 388 8 is_stmt 0 view .LVU338
 993 0219 4A8B14F3 		movq	(%rbx,%r14,8), %rdx
 994 021d 4C01FA   		addq	%r15, %rdx
 995              	.LVL113:
 389:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 996              		.loc 1 389 2 is_stmt 1 view .LVU339
 389:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 997              		.loc 1 389 19 view .LVU340
 389:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 998              		.loc 1 389 2 is_stmt 0 view .LVU341
 999 0220 4439C1   		cmpl	%r8d, %ecx
 1000 0223 0F8CA701 		jl	.L93
 1000      0000
 1001 0229 4489C6   		movl	%r8d, %esi
 1002 022c EB11     		jmp	.L95
 1003              	.LVL114:
 1004 022e 6690     		.p2align 4,,10
 1005              		.p2align 3
 1006              	.L94:
 389:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 1007              		.loc 1 389 32 is_stmt 1 view .LVU342
 389:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 1008              		.loc 1 389 34 is_stmt 0 view .LVU343
 1009 0230 83C601   		addl	$1, %esi
 1010              	.LVL115:
 389:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 1011              		.loc 1 389 44 view .LVU344
 1012 0233 4883C240 		addq	$64, %rdx
 1013              	.LVL116:
 389:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 1014              		.loc 1 389 19 is_stmt 1 view .LVU345
 389:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (*histp != 0) {
 1015              		.loc 1 389 2 is_stmt 0 view .LVU346
 1016 0237 39F1     		cmpl	%esi, %ecx
 1017 0239 0F8C9101 		jl	.L93
 1017      0000
 1018              	.L95:
 390:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c2max = c2max = c2;
 1019              		.loc 1 390 4 is_stmt 1 view .LVU347
 390:fltk-1.3.4-1/jpeg/jquant2.c **** 	    boxp->c2max = c2max = c2;
 1020              		.loc 1 390 7 is_stmt 0 view .LVU348
 1021 023f 66833A00 		cmpw	$0, (%rdx)
 1022 0243 74EB     		je	.L94
 391:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c2max;
 1023              		.loc 1 391 6 is_stmt 1 view .LVU349
 1024              	.LVL117:
 391:fltk-1.3.4-1/jpeg/jquant2.c **** 	    goto have_c2max;
 1025              		.loc 1 391 18 is_stmt 0 view .LVU350
 1026 0245 41897A14 		movl	%edi, 20(%r10)
 392:fltk-1.3.4-1/jpeg/jquant2.c **** 	  }
 1027              		.loc 1 392 6 is_stmt 1 view .LVU351
 1028 0249 89EA     		movl	%ebp, %edx
 1029              	.LVL118:
 392:fltk-1.3.4-1/jpeg/jquant2.c **** 	  }
 1030              		.loc 1 392 6 is_stmt 0 view .LVU352
 1031 024b 89F8     		movl	%edi, %eax
 1032              	.LVL119:
 1033              	.L83:
 405:fltk-1.3.4-1/jpeg/jquant2.c ****   dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 1034              		.loc 1 405 3 is_stmt 1 view .LVU353
 405:fltk-1.3.4-1/jpeg/jquant2.c ****   dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 1035              		.loc 1 405 19 is_stmt 0 view .LVU354
 1036 024d 4589DD   		movl	%r11d, %r13d
 406:fltk-1.3.4-1/jpeg/jquant2.c ****   dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 1037              		.loc 1 406 19 view .LVU355
 1038 0250 89CF     		movl	%ecx, %edi
 407:fltk-1.3.4-1/jpeg/jquant2.c ****   boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 1039              		.loc 1 407 19 view .LVU356
 1040 0252 4189C4   		movl	%eax, %r12d
 406:fltk-1.3.4-1/jpeg/jquant2.c ****   dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 1041              		.loc 1 406 19 view .LVU357
 1042 0255 4429C7   		subl	%r8d, %edi
 405:fltk-1.3.4-1/jpeg/jquant2.c ****   dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 1043              		.loc 1 405 19 view .LVU358
 1044 0258 4529CD   		subl	%r9d, %r13d
 407:fltk-1.3.4-1/jpeg/jquant2.c ****   boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 1045              		.loc 1 407 19 view .LVU359
 1046 025b 4129D4   		subl	%edx, %r12d
 406:fltk-1.3.4-1/jpeg/jquant2.c ****   dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 1047              		.loc 1 406 41 view .LVU360
 1048 025e 8D2CFD00 		leal	0(,%rdi,8), %ebp
 1048      000000
 405:fltk-1.3.4-1/jpeg/jquant2.c ****   dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 1049              		.loc 1 405 41 view .LVU361
 1050 0265 4489EE   		movl	%r13d, %esi
 406:fltk-1.3.4-1/jpeg/jquant2.c ****   dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 1051              		.loc 1 406 41 view .LVU362
 1052 0268 448D74BD 		leal	0(%rbp,%rdi,4), %r14d
 1052      00
 405:fltk-1.3.4-1/jpeg/jquant2.c ****   dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 1053              		.loc 1 405 41 view .LVU363
 1054 026d C1E604   		sall	$4, %esi
 407:fltk-1.3.4-1/jpeg/jquant2.c ****   boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 1055              		.loc 1 407 41 view .LVU364
 1056 0270 428D2CE5 		leal	0(,%r12,8), %ebp
 1056      00000000 
 405:fltk-1.3.4-1/jpeg/jquant2.c ****   dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 1057              		.loc 1 405 9 view .LVU365
 1058 0278 4863F6   		movslq	%esi, %rsi
 1059              	.LVL120:
 406:fltk-1.3.4-1/jpeg/jquant2.c ****   dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 1060              		.loc 1 406 3 is_stmt 1 view .LVU366
 406:fltk-1.3.4-1/jpeg/jquant2.c ****   dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 1061              		.loc 1 406 9 is_stmt 0 view .LVU367
 1062 027b 4D63F6   		movslq	%r14d, %r14
 1063              	.LVL121:
 407:fltk-1.3.4-1/jpeg/jquant2.c ****   boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 1064              		.loc 1 407 3 is_stmt 1 view .LVU368
 407:fltk-1.3.4-1/jpeg/jquant2.c ****   boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 1065              		.loc 1 407 9 is_stmt 0 view .LVU369
 1066 027e 4863ED   		movslq	%ebp, %rbp
 1067              	.LVL122:
 408:fltk-1.3.4-1/jpeg/jquant2.c ****   
 1068              		.loc 1 408 3 is_stmt 1 view .LVU370
 408:fltk-1.3.4-1/jpeg/jquant2.c ****   
 1069              		.loc 1 408 23 is_stmt 0 view .LVU371
 1070 0281 480FAFF6 		imulq	%rsi, %rsi
 1071              	.LVL123:
 408:fltk-1.3.4-1/jpeg/jquant2.c ****   
 1072              		.loc 1 408 37 view .LVU372
 1073 0285 4D0FAFF6 		imulq	%r14, %r14
 1074              	.LVL124:
 408:fltk-1.3.4-1/jpeg/jquant2.c ****   
 1075              		.loc 1 408 51 view .LVU373
 1076 0289 480FAFED 		imulq	%rbp, %rbp
 1077              	.LVL125:
 408:fltk-1.3.4-1/jpeg/jquant2.c ****   
 1078              		.loc 1 408 30 view .LVU374
 1079 028d 4C01F6   		addq	%r14, %rsi
 408:fltk-1.3.4-1/jpeg/jquant2.c ****   
 1080              		.loc 1 408 44 view .LVU375
 1081 0290 4801EE   		addq	%rbp, %rsi
 1082 0293 49897218 		movq	%rsi, 24(%r10)
 411:fltk-1.3.4-1/jpeg/jquant2.c ****   for (c0 = c0min; c0 <= c0max; c0++)
 1083              		.loc 1 411 3 is_stmt 1 view .LVU376
 1084              	.LVL126:
 412:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 1085              		.loc 1 412 3 view .LVU377
 412:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 1086              		.loc 1 412 20 view .LVU378
 412:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 1087              		.loc 1 412 3 is_stmt 0 view .LVU379
 1088 0297 4539CB   		cmpl	%r9d, %r11d
 1089 029a 0F8CA301 		jl	.L113
 1089      0000
 412:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 1090              		.loc 1 412 3 view .LVU380
 1091 02a0 4A8D2CCB 		leaq	(%rbx,%r9,8), %rbp
 1092 02a4 4D01E9   		addq	%r13, %r9
 1093              	.LVL127:
 412:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 1094              		.loc 1 412 3 view .LVU381
 1095 02a7 48C1E706 		salq	$6, %rdi
 1096              	.LVL128:
 412:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 1097              		.loc 1 412 3 view .LVU382
 1098 02ab 4C63DA   		movslq	%edx, %r11
 1099              	.LVL129:
 412:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 1100              		.loc 1 412 3 view .LVU383
 1101 02ae 4E8D6CCB 		leaq	8(%rbx,%r9,8), %r13
 1101      08
 1102              	.LVL130:
 412:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 1103              		.loc 1 412 3 view .LVU384
 1104 02b3 4963D8   		movslq	%r8d, %rbx
 1105              	.LVL131:
 412:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 1106              		.loc 1 412 3 view .LVU385
 1107 02b6 4589E1   		movl	%r12d, %r9d
 1108 02b9 4D01DB   		addq	%r11, %r11
 1109 02bc 4989DE   		movq	%rbx, %r14
 1110 02bf 48C1E305 		salq	$5, %rbx
 1111 02c3 498D7101 		leaq	1(%r9), %rsi
 1112 02c7 4C01CB   		addq	%r9, %rbx
 1113 02ca 4989F9   		movq	%rdi, %r9
 1114 02cd 49C1E606 		salq	$6, %r14
 1115 02d1 4D8D2473 		leaq	(%r11,%rsi,2), %r12
 1116              	.LVL132:
 412:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 1117              		.loc 1 412 3 view .LVU386
 1118 02d5 4F8D4C0B 		leaq	66(%r11,%r9), %r9
 1118      42
 1119 02da 48F7DE   		negq	%rsi
 1120              	.LVL133:
 412:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 1121              		.loc 1 412 3 view .LVU387
 1122 02dd 4D01F4   		addq	%r14, %r12
 411:fltk-1.3.4-1/jpeg/jquant2.c ****   for (c0 = c0min; c0 <= c0max; c0++)
 1123              		.loc 1 411 10 view .LVU388
 1124 02e0 31FF     		xorl	%edi, %edi
 1125 02e2 4D8D3459 		leaq	(%r9,%rbx,2), %r14
 1126 02e6 488D1C36 		leaq	(%rsi,%rsi), %rbx
 1127              	.LVL134:
 1128 02ea 660F1F44 		.p2align 4,,10
 1128      0000
 1129              		.p2align 3
 1130              	.L100:
 413:fltk-1.3.4-1/jpeg/jquant2.c ****       histp = & histogram[c0][c1][c2min];
 1131              		.loc 1 413 22 is_stmt 1 view .LVU389
 413:fltk-1.3.4-1/jpeg/jquant2.c ****       histp = & histogram[c0][c1][c2min];
 1132              		.loc 1 413 5 is_stmt 0 view .LVU390
 1133 02f0 4439C1   		cmpl	%r8d, %ecx
 1134 02f3 7C35     		jl	.L106
 414:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c2 = c2min; c2 <= c2max; c2++, histp++)
 1135              		.loc 1 414 26 view .LVU391
 1136 02f5 4C8B5D00 		movq	0(%rbp), %r11
 1137 02f9 4F8D0C23 		leaq	(%r11,%r12), %r9
 1138 02fd 4D01F3   		addq	%r14, %r11
 1139              	.LVL135:
 1140              		.p2align 4,,10
 1141              		.p2align 3
 1142              	.L104:
 414:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c2 = c2min; c2 <= c2max; c2++, histp++)
 1143              		.loc 1 414 7 is_stmt 1 view .LVU392
 1144 0300 4A8D340B 		leaq	(%rbx,%r9), %rsi
 1145              	.LVL136:
 415:fltk-1.3.4-1/jpeg/jquant2.c **** 	if (*histp != 0) {
 1146              		.loc 1 415 7 view .LVU393
 415:fltk-1.3.4-1/jpeg/jquant2.c **** 	if (*histp != 0) {
 1147              		.loc 1 415 24 view .LVU394
 415:fltk-1.3.4-1/jpeg/jquant2.c **** 	if (*histp != 0) {
 1148              		.loc 1 415 7 is_stmt 0 view .LVU395
 1149 0304 39D0     		cmpl	%edx, %eax
 1150 0306 7C19     		jl	.L101
 1151              	.LVL137:
 1152 0308 0F1F8400 		.p2align 4,,10
 1152      00000000 
 1153              		.p2align 3
 1154              	.L103:
 416:fltk-1.3.4-1/jpeg/jquant2.c **** 	  ccount++;
 1155              		.loc 1 416 2 is_stmt 1 view .LVU396
 417:fltk-1.3.4-1/jpeg/jquant2.c **** 	}
 1156              		.loc 1 417 10 is_stmt 0 view .LVU397
 1157 0310 66833E01 		cmpw	$1, (%rsi)
 1158 0314 4883DFFF 		sbbq	$-1, %rdi
 1159              	.LVL138:
 415:fltk-1.3.4-1/jpeg/jquant2.c **** 	if (*histp != 0) {
 1160              		.loc 1 415 37 is_stmt 1 view .LVU398
 415:fltk-1.3.4-1/jpeg/jquant2.c **** 	if (*histp != 0) {
 1161              		.loc 1 415 48 is_stmt 0 view .LVU399
 1162 0318 4883C602 		addq	$2, %rsi
 1163              	.LVL139:
 415:fltk-1.3.4-1/jpeg/jquant2.c **** 	if (*histp != 0) {
 1164              		.loc 1 415 24 is_stmt 1 view .LVU400
 415:fltk-1.3.4-1/jpeg/jquant2.c **** 	if (*histp != 0) {
 1165              		.loc 1 415 7 is_stmt 0 view .LVU401
 1166 031c 4C39CE   		cmpq	%r9, %rsi
 1167 031f 75EF     		jne	.L103
 1168              	.L101:
 413:fltk-1.3.4-1/jpeg/jquant2.c ****       histp = & histogram[c0][c1][c2min];
 1169              		.loc 1 413 35 is_stmt 1 view .LVU402
 413:fltk-1.3.4-1/jpeg/jquant2.c ****       histp = & histogram[c0][c1][c2min];
 1170              		.loc 1 413 22 view .LVU403
 1171 0321 4983C140 		addq	$64, %r9
 413:fltk-1.3.4-1/jpeg/jquant2.c ****       histp = & histogram[c0][c1][c2min];
 1172              		.loc 1 413 5 is_stmt 0 view .LVU404
 1173 0325 4D39CB   		cmpq	%r9, %r11
 1174 0328 75D6     		jne	.L104
 1175              	.LVL140:
 1176              	.L106:
 412:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 1177              		.loc 1 412 33 is_stmt 1 view .LVU405
 412:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 1178              		.loc 1 412 20 view .LVU406
 1179 032a 4883C508 		addq	$8, %rbp
 412:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 1180              		.loc 1 412 3 is_stmt 0 view .LVU407
 1181 032e 4939ED   		cmpq	%rbp, %r13
 1182 0331 75BD     		jne	.L100
 420:fltk-1.3.4-1/jpeg/jquant2.c **** }
 1183              		.loc 1 420 3 is_stmt 1 view .LVU408
 421:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1184              		.loc 1 421 1 is_stmt 0 view .LVU409
 1185 0333 5B       		popq	%rbx
 1186              		.cfi_remember_state
 1187              		.cfi_def_cfa_offset 48
 1188 0334 5D       		popq	%rbp
 1189              		.cfi_def_cfa_offset 40
 420:fltk-1.3.4-1/jpeg/jquant2.c **** }
 1190              		.loc 1 420 20 view .LVU410
 1191 0335 49897A20 		movq	%rdi, 32(%r10)
 421:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1192              		.loc 1 421 1 view .LVU411
 1193 0339 415C     		popq	%r12
 1194              		.cfi_def_cfa_offset 32
 1195 033b 415D     		popq	%r13
 1196              		.cfi_def_cfa_offset 24
 1197 033d 415E     		popq	%r14
 1198              		.cfi_def_cfa_offset 16
 1199 033f 415F     		popq	%r15
 1200              		.cfi_def_cfa_offset 8
 1201 0341 C3       		ret
 1202              	.LVL141:
 1203              	.L61:
 1204              		.cfi_restore_state
 343:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 1205              		.loc 1 343 37 is_stmt 1 view .LVU412
 343:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 1206              		.loc 1 343 39 is_stmt 0 view .LVU413
 1207 0342 4183C501 		addl	$1, %r13d
 1208              	.LVL142:
 343:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 1209              		.loc 1 343 24 is_stmt 1 view .LVU414
 1210 0346 4983C740 		addq	$64, %r15
 343:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 1211              		.loc 1 343 7 is_stmt 0 view .LVU415
 1212 034a 4439E9   		cmpl	%r13d, %ecx
 1213 034d 0F8D65FD 		jge	.L64
 1213      FFFF
 1214              	.LVL143:
 1215              	.L66:
 342:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c1 = c1min; c1 <= c1max; c1++) {
 1216              		.loc 1 342 35 is_stmt 1 view .LVU416
 342:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c1 = c1min; c1 <= c1max; c1++) {
 1217              		.loc 1 342 22 view .LVU417
 1218 0353 4983E901 		subq	$1, %r9
 1219              	.LVL144:
 342:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c1 = c1min; c1 <= c1max; c1++) {
 1220              		.loc 1 342 5 is_stmt 0 view .LVU418
 1221 0357 4439CD   		cmpl	%r9d, %ebp
 1222 035a 0F8E42FD 		jle	.L60
 1222      FFFF
 1223              	.LVL145:
 1224              	.L108:
 351:fltk-1.3.4-1/jpeg/jquant2.c ****   if (c1max > c1min)
 1225              		.loc 1 351 2 view .LVU419
 1226 0360 4C63CD   		movslq	%ebp, %r9
 1227 0363 E988FDFF 		jmp	.L51
 1227      FF
 1228              	.LVL146:
 1229 0368 0F1F8400 		.p2align 4,,10
 1229      00000000 
 1230              		.p2align 3
 1231              	.L53:
 332:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 1232              		.loc 1 332 37 is_stmt 1 view .LVU420
 332:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 1233              		.loc 1 332 39 is_stmt 0 view .LVU421
 1234 0370 4183C601 		addl	$1, %r14d
 1235              	.LVL147:
 332:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 1236              		.loc 1 332 24 is_stmt 1 view .LVU422
 1237 0374 4983C740 		addq	$64, %r15
 332:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 1238              		.loc 1 332 7 is_stmt 0 view .LVU423
 1239 0378 4439F1   		cmpl	%r14d, %ecx
 1240 037b 0F8DE3FC 		jge	.L57
 1240      FFFF
 1241              	.LVL148:
 1242              	.L59:
 331:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c1 = c1min; c1 <= c1max; c1++) {
 1243              		.loc 1 331 35 is_stmt 1 view .LVU424
 331:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c1 = c1min; c1 <= c1max; c1++) {
 1244              		.loc 1 331 22 view .LVU425
 1245 0381 4983C501 		addq	$1, %r13
 331:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c1 = c1min; c1 <= c1max; c1++) {
 1246              		.loc 1 331 5 is_stmt 0 view .LVU426
 1247 0385 4539EB   		cmpl	%r13d, %r11d
 1248 0388 0F8DBEFC 		jge	.L52
 1248      FFFF
 340:fltk-1.3.4-1/jpeg/jquant2.c ****   if (c0max > c0min)
 1249              		.loc 1 340 2 view .LVU427
 1250 038e 4489CD   		movl	%r9d, %ebp
 1251              	.LVL149:
 340:fltk-1.3.4-1/jpeg/jquant2.c ****   if (c0max > c0min)
 1252              		.loc 1 340 2 view .LVU428
 1253 0391 E904FDFF 		jmp	.L55
 1253      FF
 1254              	.LVL150:
 1255 0396 662E0F1F 		.p2align 4,,10
 1255      84000000 
 1255      0000
 1256              		.p2align 3
 1257              	.L77:
 365:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 1258              		.loc 1 365 37 is_stmt 1 view .LVU429
 365:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 1259              		.loc 1 365 24 view .LVU430
 1260 03a0 4983C601 		addq	$1, %r14
 1261              	.LVL151:
 365:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 1262              		.loc 1 365 7 is_stmt 0 view .LVU431
 1263 03a4 4539F3   		cmpl	%r14d, %r11d
 1264 03a7 0F8DC0FD 		jge	.L80
 1264      FFFF
 1265              	.LVL152:
 1266              	.L82:
 364:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 1267              		.loc 1 364 35 is_stmt 1 view .LVU432
 364:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 1268              		.loc 1 364 37 is_stmt 0 view .LVU433
 1269 03ad 4183EC01 		subl	$1, %r12d
 1270              	.LVL153:
 364:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 1271              		.loc 1 364 22 is_stmt 1 view .LVU434
 1272 03b1 4983E840 		subq	$64, %r8
 364:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 1273              		.loc 1 364 5 is_stmt 0 view .LVU435
 1274 03b5 4139EC   		cmpl	%ebp, %r12d
 1275 03b8 0F8D9EFD 		jge	.L76
 1275      FFFF
 1276              	.LVL154:
 1277              	.L110:
 373:fltk-1.3.4-1/jpeg/jquant2.c ****   if (c2max > c2min)
 1278              		.loc 1 373 2 view .LVU436
 1279 03be 4189E8   		movl	%ebp, %r8d
 1280 03c1 E9DAFDFF 		jmp	.L67
 1280      FF
 1281              	.LVL155:
 1282 03c6 662E0F1F 		.p2align 4,,10
 1282      84000000 
 1282      0000
 1283              		.p2align 3
 1284              	.L93:
 387:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1min][c2];
 1285              		.loc 1 387 37 is_stmt 1 view .LVU437
 387:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1min][c2];
 1286              		.loc 1 387 24 view .LVU438
 1287 03d0 4983C601 		addq	$1, %r14
 1288              	.LVL156:
 387:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1min][c2];
 1289              		.loc 1 387 7 is_stmt 0 view .LVU439
 1290 03d4 4539F3   		cmpl	%r14d, %r11d
 1291 03d7 0F8D3CFE 		jge	.L96
 1291      FFFF
 1292              	.LVL157:
 1293              	.L98:
 386:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 1294              		.loc 1 386 35 is_stmt 1 view .LVU440
 386:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 1295              		.loc 1 386 37 is_stmt 0 view .LVU441
 1296 03dd 83EF01   		subl	$1, %edi
 1297              	.LVL158:
 386:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 1298              		.loc 1 386 22 is_stmt 1 view .LVU442
 1299 03e0 4983ED02 		subq	$2, %r13
 386:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 1300              		.loc 1 386 5 is_stmt 0 view .LVU443
 1301 03e4 39EF     		cmpl	%ebp, %edi
 1302 03e6 0F8D1DFE 		jge	.L92
 1302      FFFF
 1303              	.LVL159:
 1304              	.L112:
 395:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1305              		.loc 1 395 2 view .LVU444
 1306 03ec 89EA     		movl	%ebp, %edx
 1307 03ee E95AFEFF 		jmp	.L83
 1307      FF
 1308              	.LVL160:
 1309              		.p2align 4,,10
 1310 03f3 0F1F4400 		.p2align 3
 1310      00
 1311              	.L69:
 354:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 1312              		.loc 1 354 37 is_stmt 1 view .LVU445
 354:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 1313              		.loc 1 354 24 view .LVU446
 1314 03f8 4983C601 		addq	$1, %r14
 1315              	.LVL161:
 354:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1][c2min];
 1316              		.loc 1 354 7 is_stmt 0 view .LVU447
 1317 03fc 4539F3   		cmpl	%r14d, %r11d
 1318 03ff 0F8D15FD 		jge	.L73
 1318      FFFF
 1319              	.LVL162:
 1320              	.L75:
 353:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 1321              		.loc 1 353 35 is_stmt 1 view .LVU448
 353:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 1322              		.loc 1 353 37 is_stmt 0 view .LVU449
 1323 0405 83C501   		addl	$1, %ebp
 1324              	.LVL163:
 353:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 1325              		.loc 1 353 22 is_stmt 1 view .LVU450
 1326 0408 4983C440 		addq	$64, %r12
 353:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 1327              		.loc 1 353 5 is_stmt 0 view .LVU451
 1328 040c 39E9     		cmpl	%ebp, %ecx
 1329 040e 0F8DF5FC 		jge	.L68
 1329      FFFF
 362:fltk-1.3.4-1/jpeg/jquant2.c ****   if (c1max > c1min)
 1330              		.loc 1 362 2 view .LVU452
 1331 0414 4489C5   		movl	%r8d, %ebp
 1332              	.LVL164:
 362:fltk-1.3.4-1/jpeg/jquant2.c ****   if (c1max > c1min)
 1333              		.loc 1 362 2 view .LVU453
 1334 0417 E936FDFF 		jmp	.L71
 1334      FF
 1335              	.LVL165:
 1336 041c 0F1F4000 		.p2align 4,,10
 1337              		.p2align 3
 1338              	.L85:
 376:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1min][c2];
 1339              		.loc 1 376 37 is_stmt 1 view .LVU454
 376:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1min][c2];
 1340              		.loc 1 376 24 view .LVU455
 1341 0420 4983C601 		addq	$1, %r14
 1342              	.LVL166:
 376:fltk-1.3.4-1/jpeg/jquant2.c **** 	histp = & histogram[c0][c1min][c2];
 1343              		.loc 1 376 7 is_stmt 0 view .LVU456
 1344 0424 4539F3   		cmpl	%r14d, %r11d
 1345 0427 0F8D9AFD 		jge	.L89
 1345      FFFF
 1346              	.LVL167:
 1347              	.L91:
 375:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 1348              		.loc 1 375 35 is_stmt 1 view .LVU457
 375:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 1349              		.loc 1 375 37 is_stmt 0 view .LVU458
 1350 042d 83C501   		addl	$1, %ebp
 1351              	.LVL168:
 375:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 1352              		.loc 1 375 22 is_stmt 1 view .LVU459
 1353 0430 4983C502 		addq	$2, %r13
 375:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c0 = c0min; c0 <= c0max; c0++) {
 1354              		.loc 1 375 5 is_stmt 0 view .LVU460
 1355 0434 39E8     		cmpl	%ebp, %eax
 1356 0436 0F8D7BFD 		jge	.L84
 1356      FFFF
 384:fltk-1.3.4-1/jpeg/jquant2.c ****   if (c2max > c2min)
 1357              		.loc 1 384 2 view .LVU461
 1358 043c 89D5     		movl	%edx, %ebp
 1359              	.LVL169:
 384:fltk-1.3.4-1/jpeg/jquant2.c ****   if (c2max > c2min)
 1360              		.loc 1 384 2 view .LVU462
 1361 043e E9BEFDFF 		jmp	.L87
 1361      FF
 1362              	.LVL170:
 1363              	.L113:
 411:fltk-1.3.4-1/jpeg/jquant2.c ****   for (c0 = c0min; c0 <= c0max; c0++)
 1364              		.loc 1 411 10 view .LVU463
 1365 0443 31FF     		xorl	%edi, %edi
 1366              	.LVL171:
 420:fltk-1.3.4-1/jpeg/jquant2.c **** }
 1367              		.loc 1 420 3 is_stmt 1 view .LVU464
 421:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1368              		.loc 1 421 1 is_stmt 0 view .LVU465
 1369 0445 5B       		popq	%rbx
 1370              		.cfi_def_cfa_offset 48
 1371              	.LVL172:
 421:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1372              		.loc 1 421 1 view .LVU466
 1373 0446 5D       		popq	%rbp
 1374              		.cfi_def_cfa_offset 40
 420:fltk-1.3.4-1/jpeg/jquant2.c **** }
 1375              		.loc 1 420 20 view .LVU467
 1376 0447 49897A20 		movq	%rdi, 32(%r10)
 421:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1377              		.loc 1 421 1 view .LVU468
 1378 044b 415C     		popq	%r12
 1379              		.cfi_def_cfa_offset 32
 1380              	.LVL173:
 421:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1381              		.loc 1 421 1 view .LVU469
 1382 044d 415D     		popq	%r13
 1383              		.cfi_def_cfa_offset 24
 1384              	.LVL174:
 421:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1385              		.loc 1 421 1 view .LVU470
 1386 044f 415E     		popq	%r14
 1387              		.cfi_def_cfa_offset 16
 1388 0451 415F     		popq	%r15
 1389              		.cfi_def_cfa_offset 8
 1390 0453 C3       		ret
 1391              		.cfi_endproc
 1392              	.LFE69:
 1394              		.section	.text.fill_inverse_cmap,"ax",@progbits
 1395              		.p2align 4
 1397              	fill_inverse_cmap:
 1398              	.LVL175:
 1399              	.LFB60:
 860:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 1400              		.loc 1 860 1 is_stmt 1 view -0
 1401              		.cfi_startproc
 860:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 1402              		.loc 1 860 1 is_stmt 0 view .LVU472
 1403 0000 4157     		pushq	%r15
 1404              		.cfi_def_cfa_offset 16
 1405              		.cfi_offset 15, -16
 1406 0002 4156     		pushq	%r14
 1407              		.cfi_def_cfa_offset 24
 1408              		.cfi_offset 14, -24
 1409 0004 4989FE   		movq	%rdi, %r14
 1410 0007 4155     		pushq	%r13
 1411              		.cfi_def_cfa_offset 32
 1412              		.cfi_offset 13, -32
 1413 0009 4154     		pushq	%r12
 1414              		.cfi_def_cfa_offset 40
 1415              		.cfi_offset 12, -40
 1416 000b 55       		pushq	%rbp
 1417              		.cfi_def_cfa_offset 48
 1418              		.cfi_offset 6, -48
 1419 000c 53       		pushq	%rbx
 1420              		.cfi_def_cfa_offset 56
 1421              		.cfi_offset 3, -56
 1422 000d 4881ECF8 		subq	$2552, %rsp
 1422      090000
 1423              		.cfi_def_cfa_offset 2608
 860:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 1424              		.loc 1 860 1 view .LVU473
 1425 0014 89742454 		movl	%esi, 84(%rsp)
 874:fltk-1.3.4-1/jpeg/jquant2.c ****   c1 >>= BOX_C1_LOG;
 1426              		.loc 1 874 6 view .LVU474
 1427 0018 C1FE02   		sarl	$2, %esi
 1428              	.LVL176:
 860:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 1429              		.loc 1 860 1 view .LVU475
 1430 001b 89542458 		movl	%edx, 88(%rsp)
 874:fltk-1.3.4-1/jpeg/jquant2.c ****   c1 >>= BOX_C1_LOG;
 1431              		.loc 1 874 6 view .LVU476
 1432 001f 4189F0   		movl	%esi, %r8d
 875:fltk-1.3.4-1/jpeg/jquant2.c ****   c2 >>= BOX_C2_LOG;
 1433              		.loc 1 875 6 view .LVU477
 1434 0022 C1FA03   		sarl	$3, %edx
 1435              	.LVL177:
 860:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 1436              		.loc 1 860 1 view .LVU478
 1437 0025 894C245C 		movl	%ecx, 92(%rsp)
 882:fltk-1.3.4-1/jpeg/jquant2.c ****   minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 1438              		.loc 1 882 15 view .LVU479
 1439 0029 41C1E005 		sall	$5, %r8d
 875:fltk-1.3.4-1/jpeg/jquant2.c ****   c2 >>= BOX_C2_LOG;
 1440              		.loc 1 875 6 view .LVU480
 1441 002d 4189D1   		movl	%edx, %r9d
 876:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1442              		.loc 1 876 6 view .LVU481
 1443 0030 C1F902   		sarl	$2, %ecx
 1444              	.LVL178:
 883:fltk-1.3.4-1/jpeg/jquant2.c ****   minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 1445              		.loc 1 883 15 view .LVU482
 1446 0033 41C1E105 		sall	$5, %r9d
 876:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1447              		.loc 1 876 6 view .LVU483
 1448 0037 4189CA   		movl	%ecx, %r10d
 883:fltk-1.3.4-1/jpeg/jquant2.c ****   minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 1449              		.loc 1 883 9 view .LVU484
 1450 003a 418D5902 		leal	2(%r9), %ebx
 884:fltk-1.3.4-1/jpeg/jquant2.c ****   
 1451              		.loc 1 884 15 view .LVU485
 1452 003e 41C1E205 		sall	$5, %r10d
 1453              	.LBB27:
 1454              	.LBB28:
 673:fltk-1.3.4-1/jpeg/jquant2.c ****   centerc1 = (minc1 + maxc1) >> 1;
 1455              		.loc 1 673 9 view .LVU486
 1456 0042 4183C11E 		addl	$30, %r9d
 1457              	.LBE28:
 1458              	.LBE27:
 860:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 1459              		.loc 1 860 1 view .LVU487
 1460 0046 64488B04 		movq	%fs:40, %rax
 1460      25280000 
 1460      00
 1461 004f 48898424 		movq	%rax, 2536(%rsp)
 1461      E8090000 
 1462 0057 31C0     		xorl	%eax, %eax
 861:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram = cquantize->histogram;
 1463              		.loc 1 861 3 is_stmt 1 view .LVU488
 1464              	.LVL179:
 862:fltk-1.3.4-1/jpeg/jquant2.c ****   int minc0, minc1, minc2;	/* lower left corner of update box */
 1465              		.loc 1 862 3 view .LVU489
 862:fltk-1.3.4-1/jpeg/jquant2.c ****   int minc0, minc1, minc2;	/* lower left corner of update box */
 1466              		.loc 1 862 10 is_stmt 0 view .LVU490
 1467 0059 488B8790 		movq	656(%rdi), %rax
 1467      020000
 882:fltk-1.3.4-1/jpeg/jquant2.c ****   minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 1468              		.loc 1 882 9 view .LVU491
 1469 0060 418D7804 		leal	4(%r8), %edi
 1470              	.LVL180:
 1471              	.LBB35:
 1472              	.LBB29:
 671:fltk-1.3.4-1/jpeg/jquant2.c ****   centerc0 = (minc0 + maxc0) >> 1;
 1473              		.loc 1 671 9 view .LVU492
 1474 0064 4183C01C 		addl	$28, %r8d
 672:fltk-1.3.4-1/jpeg/jquant2.c ****   maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 1475              		.loc 1 672 21 view .LVU493
 1476 0068 428D1407 		leal	(%rdi,%r8), %edx
 1477              	.LBE29:
 1478              	.LBE35:
 884:fltk-1.3.4-1/jpeg/jquant2.c ****   
 1479              		.loc 1 884 9 view .LVU494
 1480 006c 418D7204 		leal	4(%r10), %esi
 1481              	.LBB36:
 1482              	.LBB30:
 675:fltk-1.3.4-1/jpeg/jquant2.c ****   centerc2 = (minc2 + maxc2) >> 1;
 1483              		.loc 1 675 9 view .LVU495
 1484 0070 4183C21C 		addl	$28, %r10d
 1485              	.LBE30:
 1486              	.LBE36:
 882:fltk-1.3.4-1/jpeg/jquant2.c ****   minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 1487              		.loc 1 882 9 view .LVU496
 1488 0074 897C241C 		movl	%edi, 28(%rsp)
 862:fltk-1.3.4-1/jpeg/jquant2.c ****   int minc0, minc1, minc2;	/* lower left corner of update box */
 1489              		.loc 1 862 10 view .LVU497
 1490 0078 488B4030 		movq	48(%rax), %rax
 1491              	.LVL181:
 1492              	.LBB37:
 1493              	.LBB31:
 672:fltk-1.3.4-1/jpeg/jquant2.c ****   maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 1494              		.loc 1 672 12 view .LVU498
 1495 007c D1FA     		sarl	%edx
 676:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1496              		.loc 1 676 21 view .LVU499
 1497 007e 468D3C16 		leal	(%rsi,%r10), %r15d
 1498              	.LBE31:
 1499              	.LBE37:
 883:fltk-1.3.4-1/jpeg/jquant2.c ****   minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 1500              		.loc 1 883 9 view .LVU500
 1501 0082 895C2450 		movl	%ebx, 80(%rsp)
 1502              	.LBB38:
 1503              	.LBB32:
 672:fltk-1.3.4-1/jpeg/jquant2.c ****   maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 1504              		.loc 1 672 12 view .LVU501
 1505 0086 89542408 		movl	%edx, 8(%rsp)
 674:fltk-1.3.4-1/jpeg/jquant2.c ****   maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 1506              		.loc 1 674 21 view .LVU502
 1507 008a 428D140B 		leal	(%rbx,%r9), %edx
 676:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1508              		.loc 1 676 12 view .LVU503
 1509 008e 41D1FF   		sarl	%r15d
 1510              	.LBE32:
 1511              	.LBE38:
 862:fltk-1.3.4-1/jpeg/jquant2.c ****   int minc0, minc1, minc2;	/* lower left corner of update box */
 1512              		.loc 1 862 10 view .LVU504
 1513 0091 48894424 		movq	%rax, 72(%rsp)
 1513      48
 1514              	.LVL182:
 863:fltk-1.3.4-1/jpeg/jquant2.c ****   int ic0, ic1, ic2;
 1515              		.loc 1 863 3 is_stmt 1 view .LVU505
 864:fltk-1.3.4-1/jpeg/jquant2.c ****   register JSAMPLE * cptr;	/* pointer into bestcolor[] array */
 1516              		.loc 1 864 3 view .LVU506
 865:fltk-1.3.4-1/jpeg/jquant2.c ****   register histptr cachep;	/* pointer into main cache array */
 1517              		.loc 1 865 3 view .LVU507
 866:fltk-1.3.4-1/jpeg/jquant2.c ****   /* This array lists the candidate colormap indexes. */
 1518              		.loc 1 866 3 view .LVU508
 868:fltk-1.3.4-1/jpeg/jquant2.c ****   int numcolors;		/* number of candidate colors */
 1519              		.loc 1 868 3 view .LVU509
 869:fltk-1.3.4-1/jpeg/jquant2.c ****   /* This array holds the actually closest colormap index for each cell. */
 1520              		.loc 1 869 3 view .LVU510
 871:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1521              		.loc 1 871 3 view .LVU511
 874:fltk-1.3.4-1/jpeg/jquant2.c ****   c1 >>= BOX_C1_LOG;
 1522              		.loc 1 874 3 view .LVU512
 875:fltk-1.3.4-1/jpeg/jquant2.c ****   c2 >>= BOX_C2_LOG;
 1523              		.loc 1 875 3 view .LVU513
 876:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1524              		.loc 1 876 3 view .LVU514
 882:fltk-1.3.4-1/jpeg/jquant2.c ****   minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 1525              		.loc 1 882 3 view .LVU515
 883:fltk-1.3.4-1/jpeg/jquant2.c ****   minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 1526              		.loc 1 883 3 view .LVU516
 884:fltk-1.3.4-1/jpeg/jquant2.c ****   
 1527              		.loc 1 884 3 view .LVU517
 889:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1528              		.loc 1 889 3 view .LVU518
 889:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1529              		.loc 1 889 15 is_stmt 0 view .LVU519
 1530 0096 418B869C 		movl	156(%r14), %eax
 1530      000000
 1531              	.LVL183:
 1532              	.LBB39:
 1533              	.LBI27:
 647:fltk-1.3.4-1/jpeg/jquant2.c **** 		    JSAMPLE colorlist[])
 1534              		.loc 1 647 1 is_stmt 1 view .LVU520
 1535              	.LBB33:
 658:fltk-1.3.4-1/jpeg/jquant2.c ****   int maxc0, maxc1, maxc2;
 1536              		.loc 1 658 3 view .LVU521
 659:fltk-1.3.4-1/jpeg/jquant2.c ****   int centerc0, centerc1, centerc2;
 1537              		.loc 1 659 3 view .LVU522
 660:fltk-1.3.4-1/jpeg/jquant2.c ****   int i, x, ncolors;
 1538              		.loc 1 660 3 view .LVU523
 661:fltk-1.3.4-1/jpeg/jquant2.c ****   INT32 minmaxdist, min_dist, max_dist, tdist;
 1539              		.loc 1 661 3 view .LVU524
 662:fltk-1.3.4-1/jpeg/jquant2.c ****   INT32 mindist[MAXNUMCOLORS];	/* min distance to colormap entry i */
 1540              		.loc 1 662 3 view .LVU525
 663:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1541              		.loc 1 663 3 view .LVU526
 671:fltk-1.3.4-1/jpeg/jquant2.c ****   centerc0 = (minc0 + maxc0) >> 1;
 1542              		.loc 1 671 3 view .LVU527
 672:fltk-1.3.4-1/jpeg/jquant2.c ****   maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 1543              		.loc 1 672 3 view .LVU528
 673:fltk-1.3.4-1/jpeg/jquant2.c ****   centerc1 = (minc1 + maxc1) >> 1;
 1544              		.loc 1 673 3 view .LVU529
 674:fltk-1.3.4-1/jpeg/jquant2.c ****   maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 1545              		.loc 1 674 3 view .LVU530
 674:fltk-1.3.4-1/jpeg/jquant2.c ****   maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 1546              		.loc 1 674 12 is_stmt 0 view .LVU531
 1547 009d D1FA     		sarl	%edx
 1548 009f 89542420 		movl	%edx, 32(%rsp)
 1549              	.LVL184:
 675:fltk-1.3.4-1/jpeg/jquant2.c ****   centerc2 = (minc2 + maxc2) >> 1;
 1550              		.loc 1 675 3 is_stmt 1 view .LVU532
 676:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1551              		.loc 1 676 3 view .LVU533
 686:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1552              		.loc 1 686 3 view .LVU534
 688:fltk-1.3.4-1/jpeg/jquant2.c ****     /* We compute the squared-c0-distance term, then add in the other two. */
 1553              		.loc 1 688 3 view .LVU535
 688:fltk-1.3.4-1/jpeg/jquant2.c ****     /* We compute the squared-c0-distance term, then add in the other two. */
 1554              		.loc 1 688 15 view .LVU536
 676:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1555              		.loc 1 676 21 is_stmt 0 view .LVU537
 1556 00a3 89742418 		movl	%esi, 24(%rsp)
 688:fltk-1.3.4-1/jpeg/jquant2.c ****     /* We compute the squared-c0-distance term, then add in the other two. */
 1557              		.loc 1 688 3 view .LVU538
 1558 00a7 85C0     		testl	%eax, %eax
 1559 00a9 0F8E5E04 		jle	.L165
 1559      0000
 690:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc0) {
 1560              		.loc 1 690 9 view .LVU539
 1561 00af 498B96A0 		movq	160(%r14), %rdx
 1561      000000
 1562              	.LVL185:
 690:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc0) {
 1563              		.loc 1 690 9 view .LVU540
 1564 00b6 448D58FF 		leal	-1(%rax), %r11d
 1565 00ba 89F9     		movl	%edi, %ecx
 1566 00bc 89DD     		movl	%ebx, %ebp
 1567 00be 488D4424 		leaq	96(%rsp), %rax
 1567      60
 1568              	.LVL186:
 690:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc0) {
 1569              		.loc 1 690 9 view .LVU541
 1570 00c3 4C891C24 		movq	%r11, (%rsp)
 735:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc2) {
 1571              		.loc 1 735 9 view .LVU542
 1572 00c7 31F6     		xorl	%esi, %esi
 1573              	.LVL187:
 686:fltk-1.3.4-1/jpeg/jquant2.c **** 
 1574              		.loc 1 686 14 view .LVU543
 1575 00c9 BFFFFFFF 		movl	$2147483647, %edi
 1575      7F
 1576              	.LVL188:
 690:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc0) {
 1577              		.loc 1 690 9 view .LVU544
 1578 00ce 488B1A   		movq	(%rdx), %rbx
 1579              	.LVL189:
 713:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc1) {
 1580              		.loc 1 713 9 view .LVU545
 1581 00d1 4C8B6208 		movq	8(%rdx), %r12
 1582 00d5 4C897424 		movq	%r14, 48(%rsp)
 1582      30
 1583 00da 4189CB   		movl	%ecx, %r11d
 735:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc2) {
 1584              		.loc 1 735 9 view .LVU546
 1585 00dd 4C8B6A10 		movq	16(%rdx), %r13
 1586 00e1 448B7424 		movl	24(%rsp), %r14d
 1586      18
 1587              	.LVL190:
 735:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc2) {
 1588              		.loc 1 735 9 view .LVU547
 1589 00e6 48894424 		movq	%rax, 16(%rsp)
 1589      10
 1590 00eb 44897C24 		movl	%r15d, 40(%rsp)
 1590      28
 1591 00f0 E99C0000 		jmp	.L148
 1591      00
 1592              	.LVL191:
 1593              		.p2align 4,,10
 1594 00f5 0F1F00   		.p2align 3
 1595              	.L180:
 692:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist = tdist*tdist;
 1596              		.loc 1 692 7 is_stmt 1 view .LVU548
 692:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist = tdist*tdist;
 1597              		.loc 1 692 18 is_stmt 0 view .LVU549
 1598 00f8 89C1     		movl	%eax, %ecx
 694:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist = tdist*tdist;
 1599              		.loc 1 694 18 view .LVU550
 1600 00fa 4429C0   		subl	%r8d, %eax
 1601              	.LVL192:
 692:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist = tdist*tdist;
 1602              		.loc 1 692 18 view .LVU551
 1603 00fd 4429D9   		subl	%r11d, %ecx
 1604              	.LVL193:
 694:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist = tdist*tdist;
 1605              		.loc 1 694 27 view .LVU552
 1606 0100 01C0     		addl	%eax, %eax
 692:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist = tdist*tdist;
 1607              		.loc 1 692 27 view .LVU553
 1608 0102 01C9     		addl	%ecx, %ecx
 694:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist = tdist*tdist;
 1609              		.loc 1 694 13 view .LVU554
 1610 0104 4898     		cltq
 695:fltk-1.3.4-1/jpeg/jquant2.c ****     } else if (x > maxc0) {
 1611              		.loc 1 695 16 view .LVU555
 1612 0106 480FAFC0 		imulq	%rax, %rax
 692:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist = tdist*tdist;
 1613              		.loc 1 692 13 view .LVU556
 1614 010a 4863C9   		movslq	%ecx, %rcx
 1615              	.LVL194:
 693:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc0) * C0_SCALE;
 1616              		.loc 1 693 7 is_stmt 1 view .LVU557
 693:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc0) * C0_SCALE;
 1617              		.loc 1 693 16 is_stmt 0 view .LVU558
 1618 010d 480FAFC9 		imulq	%rcx, %rcx
 1619              	.LVL195:
 694:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist = tdist*tdist;
 1620              		.loc 1 694 7 is_stmt 1 view .LVU559
 695:fltk-1.3.4-1/jpeg/jquant2.c ****     } else if (x > maxc0) {
 1621              		.loc 1 695 7 view .LVU560
 695:fltk-1.3.4-1/jpeg/jquant2.c ****     } else if (x > maxc0) {
 1622              		.loc 1 695 16 is_stmt 0 view .LVU561
 1623 0111 4889C2   		movq	%rax, %rdx
 1624              	.LVL196:
 1625              	.L137:
 713:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc1) {
 1626              		.loc 1 713 5 is_stmt 1 view .LVU562
 713:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc1) {
 1627              		.loc 1 713 7 is_stmt 0 view .LVU563
 1628 0114 410FB604 		movzbl	(%r12,%rsi), %eax
 1628      34
 1629              	.LVL197:
 714:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc1) * C1_SCALE;
 1630              		.loc 1 714 5 is_stmt 1 view .LVU564
 714:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc1) * C1_SCALE;
 1631              		.loc 1 714 8 is_stmt 0 view .LVU565
 1632 0119 39C5     		cmpl	%eax, %ebp
 1633 011b 0F8EAF00 		jle	.L140
 1633      0000
 1634              	.L181:
 715:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 1635              		.loc 1 715 7 is_stmt 1 view .LVU566
 715:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 1636              		.loc 1 715 18 is_stmt 0 view .LVU567
 1637 0121 4189C7   		movl	%eax, %r15d
 1638 0124 4129EF   		subl	%ebp, %r15d
 715:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 1639              		.loc 1 715 27 view .LVU568
 1640 0127 478D3C7F 		leal	(%r15,%r15,2), %r15d
 715:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 1641              		.loc 1 715 13 view .LVU569
 1642 012b 4D63FF   		movslq	%r15d, %r15
 1643              	.LVL198:
 716:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc1) * C1_SCALE;
 1644              		.loc 1 716 7 is_stmt 1 view .LVU570
 716:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc1) * C1_SCALE;
 1645              		.loc 1 716 24 is_stmt 0 view .LVU571
 1646 012e 4D0FAFFF 		imulq	%r15, %r15
 1647              	.LVL199:
 716:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc1) * C1_SCALE;
 1648              		.loc 1 716 16 view .LVU572
 1649 0132 4C01F9   		addq	%r15, %rcx
 1650              	.LVL200:
 717:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist += tdist*tdist;
 1651              		.loc 1 717 7 is_stmt 1 view .LVU573
 1652              	.L178:
 727:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 1653              		.loc 1 727 2 view .LVU574
 727:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 1654              		.loc 1 727 13 is_stmt 0 view .LVU575
 1655 0135 4429C8   		subl	%r9d, %eax
 1656              	.LVL201:
 727:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 1657              		.loc 1 727 22 view .LVU576
 1658 0138 8D0440   		leal	(%rax,%rax,2), %eax
 727:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 1659              		.loc 1 727 8 view .LVU577
 1660 013b 4898     		cltq
 1661              	.LVL202:
 728:fltk-1.3.4-1/jpeg/jquant2.c ****       } else {
 1662              		.loc 1 728 2 is_stmt 1 view .LVU578
 728:fltk-1.3.4-1/jpeg/jquant2.c ****       } else {
 1663              		.loc 1 728 19 is_stmt 0 view .LVU579
 1664 013d 480FAFC0 		imulq	%rax, %rax
 1665              	.LVL203:
 728:fltk-1.3.4-1/jpeg/jquant2.c ****       } else {
 1666              		.loc 1 728 11 view .LVU580
 1667 0141 4801D0   		addq	%rdx, %rax
 1668              	.LVL204:
 735:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc2) {
 1669              		.loc 1 735 5 is_stmt 1 view .LVU581
 735:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc2) {
 1670              		.loc 1 735 7 is_stmt 0 view .LVU582
 1671 0144 410FB654 		movzbl	0(%r13,%rsi), %edx
 1671      3500
 1672              	.LVL205:
 736:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc2) * C2_SCALE;
 1673              		.loc 1 736 5 is_stmt 1 view .LVU583
 736:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc2) * C2_SCALE;
 1674              		.loc 1 736 8 is_stmt 0 view .LVU584
 1675 014a 4139D6   		cmpl	%edx, %r14d
 1676 014d 0F8EB700 		jle	.L144
 1676      0000
 1677              	.LVL206:
 1678              	.L182:
 737:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 1679              		.loc 1 737 7 is_stmt 1 view .LVU585
 737:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 1680              		.loc 1 737 27 is_stmt 0 view .LVU586
 1681 0153 4189D7   		movl	%edx, %r15d
 739:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist += tdist*tdist;
 1682              		.loc 1 739 27 view .LVU587
 1683 0156 4429D2   		subl	%r10d, %edx
 1684              	.LVL207:
 737:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 1685              		.loc 1 737 27 view .LVU588
 1686 0159 4529F7   		subl	%r14d, %r15d
 1687              	.LVL208:
 739:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist += tdist*tdist;
 1688              		.loc 1 739 13 view .LVU589
 1689 015c 4863D2   		movslq	%edx, %rdx
 737:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 1690              		.loc 1 737 13 view .LVU590
 1691 015f 4D63FF   		movslq	%r15d, %r15
 1692              	.LVL209:
 738:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc2) * C2_SCALE;
 1693              		.loc 1 738 7 is_stmt 1 view .LVU591
 740:fltk-1.3.4-1/jpeg/jquant2.c ****     } else if (x > maxc2) {
 1694              		.loc 1 740 24 is_stmt 0 view .LVU592
 1695 0162 480FAFD2 		imulq	%rdx, %rdx
 738:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc2) * C2_SCALE;
 1696              		.loc 1 738 24 view .LVU593
 1697 0166 4D0FAFFF 		imulq	%r15, %r15
 1698              	.LVL210:
 740:fltk-1.3.4-1/jpeg/jquant2.c ****     } else if (x > maxc2) {
 1699              		.loc 1 740 16 view .LVU594
 1700 016a 4801C2   		addq	%rax, %rdx
 738:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc2) * C2_SCALE;
 1701              		.loc 1 738 16 view .LVU595
 1702 016d 4C01F9   		addq	%r15, %rcx
 1703              	.LVL211:
 739:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist += tdist*tdist;
 1704              		.loc 1 739 7 is_stmt 1 view .LVU596
 740:fltk-1.3.4-1/jpeg/jquant2.c ****     } else if (x > maxc2) {
 1705              		.loc 1 740 7 view .LVU597
 1706              	.L145:
 757:fltk-1.3.4-1/jpeg/jquant2.c ****     if (max_dist < minmaxdist)
 1707              		.loc 1 757 5 view .LVU598
 757:fltk-1.3.4-1/jpeg/jquant2.c ****     if (max_dist < minmaxdist)
 1708              		.loc 1 757 16 is_stmt 0 view .LVU599
 1709 0170 488B4424 		movq	16(%rsp), %rax
 1709      10
 1710 0175 4839D7   		cmpq	%rdx, %rdi
 1711 0178 480F4FFA 		cmovg	%rdx, %rdi
 1712              	.LVL212:
 757:fltk-1.3.4-1/jpeg/jquant2.c ****     if (max_dist < minmaxdist)
 1713              		.loc 1 757 16 view .LVU600
 1714 017c 48890CF0 		movq	%rcx, (%rax,%rsi,8)
 758:fltk-1.3.4-1/jpeg/jquant2.c ****       minmaxdist = max_dist;
 1715              		.loc 1 758 5 is_stmt 1 view .LVU601
 1716              	.LVL213:
 688:fltk-1.3.4-1/jpeg/jquant2.c ****     /* We compute the squared-c0-distance term, then add in the other two. */
 1717              		.loc 1 688 30 view .LVU602
 688:fltk-1.3.4-1/jpeg/jquant2.c ****     /* We compute the squared-c0-distance term, then add in the other two. */
 1718              		.loc 1 688 15 view .LVU603
 1719 0180 488D4601 		leaq	1(%rsi), %rax
 688:fltk-1.3.4-1/jpeg/jquant2.c ****     /* We compute the squared-c0-distance term, then add in the other two. */
 1720              		.loc 1 688 3 is_stmt 0 view .LVU604
 1721 0184 48393424 		cmpq	%rsi, (%rsp)
 1722 0188 0F840801 		je	.L179
 1722      0000
 688:fltk-1.3.4-1/jpeg/jquant2.c ****     /* We compute the squared-c0-distance term, then add in the other two. */
 1723              		.loc 1 688 3 view .LVU605
 1724 018e 4889C6   		movq	%rax, %rsi
 1725              	.LVL214:
 1726              	.L148:
 690:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc0) {
 1727              		.loc 1 690 5 is_stmt 1 view .LVU606
 690:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc0) {
 1728              		.loc 1 690 7 is_stmt 0 view .LVU607
 1729 0191 0FB60433 		movzbl	(%rbx,%rsi), %eax
 1730              	.LVL215:
 691:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc0) * C0_SCALE;
 1731              		.loc 1 691 5 is_stmt 1 view .LVU608
 691:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc0) * C0_SCALE;
 1732              		.loc 1 691 8 is_stmt 0 view .LVU609
 1733 0195 4139C3   		cmpl	%eax, %r11d
 1734 0198 0F8F5AFF 		jg	.L180
 1734      FFFF
 696:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc0) * C0_SCALE;
 1735              		.loc 1 696 12 is_stmt 1 view .LVU610
 696:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc0) * C0_SCALE;
 1736              		.loc 1 696 15 is_stmt 0 view .LVU611
 1737 019e 4139C0   		cmpl	%eax, %r8d
 1738 01a1 0F8D9100 		jge	.L138
 1738      0000
 697:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist = tdist*tdist;
 1739              		.loc 1 697 7 is_stmt 1 view .LVU612
 697:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist = tdist*tdist;
 1740              		.loc 1 697 18 is_stmt 0 view .LVU613
 1741 01a7 89C1     		movl	%eax, %ecx
 699:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist = tdist*tdist;
 1742              		.loc 1 699 18 view .LVU614
 1743 01a9 4429D8   		subl	%r11d, %eax
 1744              	.LVL216:
 699:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist = tdist*tdist;
 1745              		.loc 1 699 27 view .LVU615
 1746 01ac 01C0     		addl	%eax, %eax
 697:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist = tdist*tdist;
 1747              		.loc 1 697 18 view .LVU616
 1748 01ae 4429C1   		subl	%r8d, %ecx
 1749              	.LVL217:
 699:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist = tdist*tdist;
 1750              		.loc 1 699 13 view .LVU617
 1751 01b1 4898     		cltq
 697:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist = tdist*tdist;
 1752              		.loc 1 697 27 view .LVU618
 1753 01b3 01C9     		addl	%ecx, %ecx
 700:fltk-1.3.4-1/jpeg/jquant2.c ****     } else {
 1754              		.loc 1 700 16 view .LVU619
 1755 01b5 480FAFC0 		imulq	%rax, %rax
 697:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist = tdist*tdist;
 1756              		.loc 1 697 13 view .LVU620
 1757 01b9 4863C9   		movslq	%ecx, %rcx
 1758              	.LVL218:
 698:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc0) * C0_SCALE;
 1759              		.loc 1 698 7 is_stmt 1 view .LVU621
 698:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc0) * C0_SCALE;
 1760              		.loc 1 698 16 is_stmt 0 view .LVU622
 1761 01bc 480FAFC9 		imulq	%rcx, %rcx
 1762              	.LVL219:
 699:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist = tdist*tdist;
 1763              		.loc 1 699 7 is_stmt 1 view .LVU623
 700:fltk-1.3.4-1/jpeg/jquant2.c ****     } else {
 1764              		.loc 1 700 7 view .LVU624
 700:fltk-1.3.4-1/jpeg/jquant2.c ****     } else {
 1765              		.loc 1 700 16 is_stmt 0 view .LVU625
 1766 01c0 4889C2   		movq	%rax, %rdx
 1767              	.LVL220:
 713:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc1) {
 1768              		.loc 1 713 5 is_stmt 1 view .LVU626
 713:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc1) {
 1769              		.loc 1 713 7 is_stmt 0 view .LVU627
 1770 01c3 410FB604 		movzbl	(%r12,%rsi), %eax
 1770      34
 1771              	.LVL221:
 714:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc1) * C1_SCALE;
 1772              		.loc 1 714 5 is_stmt 1 view .LVU628
 714:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc1) * C1_SCALE;
 1773              		.loc 1 714 8 is_stmt 0 view .LVU629
 1774 01c8 39C5     		cmpl	%eax, %ebp
 1775 01ca 0F8F51FF 		jg	.L181
 1775      FFFF
 1776              	.L140:
 719:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc1) * C1_SCALE;
 1777              		.loc 1 719 12 is_stmt 1 view .LVU630
 719:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc1) * C1_SCALE;
 1778              		.loc 1 719 15 is_stmt 0 view .LVU631
 1779 01d0 4139C1   		cmpl	%eax, %r9d
 1780 01d3 0F8D9700 		jge	.L142
 1780      0000
 720:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 1781              		.loc 1 720 7 is_stmt 1 view .LVU632
 720:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 1782              		.loc 1 720 18 is_stmt 0 view .LVU633
 1783 01d9 4189C7   		movl	%eax, %r15d
 1784 01dc 4529CF   		subl	%r9d, %r15d
 720:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 1785              		.loc 1 720 27 view .LVU634
 1786 01df 478D3C7F 		leal	(%r15,%r15,2), %r15d
 720:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 1787              		.loc 1 720 13 view .LVU635
 1788 01e3 4D63FF   		movslq	%r15d, %r15
 1789              	.LVL222:
 721:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc1) * C1_SCALE;
 1790              		.loc 1 721 7 is_stmt 1 view .LVU636
 721:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc1) * C1_SCALE;
 1791              		.loc 1 721 24 is_stmt 0 view .LVU637
 1792 01e6 4D0FAFFF 		imulq	%r15, %r15
 1793              	.LVL223:
 721:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc1) * C1_SCALE;
 1794              		.loc 1 721 16 view .LVU638
 1795 01ea 4C01F9   		addq	%r15, %rcx
 1796              	.LVL224:
 722:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist += tdist*tdist;
 1797              		.loc 1 722 7 is_stmt 1 view .LVU639
 1798              	.L143:
 730:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 1799              		.loc 1 730 2 view .LVU640
 730:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 1800              		.loc 1 730 13 is_stmt 0 view .LVU641
 1801 01ed 29E8     		subl	%ebp, %eax
 1802              	.LVL225:
 730:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 1803              		.loc 1 730 22 view .LVU642
 1804 01ef 8D0440   		leal	(%rax,%rax,2), %eax
 730:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 1805              		.loc 1 730 8 view .LVU643
 1806 01f2 4898     		cltq
 1807              	.LVL226:
 731:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 1808              		.loc 1 731 2 is_stmt 1 view .LVU644
 731:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 1809              		.loc 1 731 19 is_stmt 0 view .LVU645
 1810 01f4 480FAFC0 		imulq	%rax, %rax
 1811              	.LVL227:
 731:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 1812              		.loc 1 731 11 view .LVU646
 1813 01f8 4801D0   		addq	%rdx, %rax
 1814              	.LVL228:
 735:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc2) {
 1815              		.loc 1 735 5 is_stmt 1 view .LVU647
 735:fltk-1.3.4-1/jpeg/jquant2.c ****     if (x < minc2) {
 1816              		.loc 1 735 7 is_stmt 0 view .LVU648
 1817 01fb 410FB654 		movzbl	0(%r13,%rsi), %edx
 1817      3500
 1818              	.LVL229:
 736:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc2) * C2_SCALE;
 1819              		.loc 1 736 5 is_stmt 1 view .LVU649
 736:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc2) * C2_SCALE;
 1820              		.loc 1 736 8 is_stmt 0 view .LVU650
 1821 0201 4139D6   		cmpl	%edx, %r14d
 1822 0204 0F8F49FF 		jg	.L182
 1822      FFFF
 1823              	.L144:
 741:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc2) * C2_SCALE;
 1824              		.loc 1 741 12 is_stmt 1 view .LVU651
 741:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - maxc2) * C2_SCALE;
 1825              		.loc 1 741 15 is_stmt 0 view .LVU652
 1826 020a 4139D2   		cmpl	%edx, %r10d
 1827 020d 7D49     		jge	.L146
 742:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 1828              		.loc 1 742 7 is_stmt 1 view .LVU653
 742:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 1829              		.loc 1 742 27 is_stmt 0 view .LVU654
 1830 020f 4189D7   		movl	%edx, %r15d
 744:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist += tdist*tdist;
 1831              		.loc 1 744 27 view .LVU655
 1832 0212 4429F2   		subl	%r14d, %edx
 1833              	.LVL230:
 742:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 1834              		.loc 1 742 27 view .LVU656
 1835 0215 4529D7   		subl	%r10d, %r15d
 1836              	.LVL231:
 744:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist += tdist*tdist;
 1837              		.loc 1 744 13 view .LVU657
 1838 0218 4863D2   		movslq	%edx, %rdx
 742:fltk-1.3.4-1/jpeg/jquant2.c ****       min_dist += tdist*tdist;
 1839              		.loc 1 742 13 view .LVU658
 1840 021b 4D63FF   		movslq	%r15d, %r15
 1841              	.LVL232:
 743:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc2) * C2_SCALE;
 1842              		.loc 1 743 7 is_stmt 1 view .LVU659
 745:fltk-1.3.4-1/jpeg/jquant2.c ****     } else {
 1843              		.loc 1 745 24 is_stmt 0 view .LVU660
 1844 021e 480FAFD2 		imulq	%rdx, %rdx
 743:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc2) * C2_SCALE;
 1845              		.loc 1 743 24 view .LVU661
 1846 0222 4D0FAFFF 		imulq	%r15, %r15
 1847              	.LVL233:
 745:fltk-1.3.4-1/jpeg/jquant2.c ****     } else {
 1848              		.loc 1 745 16 view .LVU662
 1849 0226 4801C2   		addq	%rax, %rdx
 743:fltk-1.3.4-1/jpeg/jquant2.c ****       tdist = (x - minc2) * C2_SCALE;
 1850              		.loc 1 743 16 view .LVU663
 1851 0229 4C01F9   		addq	%r15, %rcx
 1852              	.LVL234:
 744:fltk-1.3.4-1/jpeg/jquant2.c ****       max_dist += tdist*tdist;
 1853              		.loc 1 744 7 is_stmt 1 view .LVU664
 745:fltk-1.3.4-1/jpeg/jquant2.c ****     } else {
 1854              		.loc 1 745 7 view .LVU665
 745:fltk-1.3.4-1/jpeg/jquant2.c ****     } else {
 1855              		.loc 1 745 7 is_stmt 0 view .LVU666
 1856 022c E93FFFFF 		jmp	.L145
 1856      FF
 1857              	.LVL235:
 1858              		.p2align 4,,10
 1859 0231 0F1F8000 		.p2align 3
 1859      000000
 1860              	.L138:
 703:fltk-1.3.4-1/jpeg/jquant2.c ****       if (x <= centerc0) {
 1861              		.loc 1 703 7 is_stmt 1 view .LVU667
 704:fltk-1.3.4-1/jpeg/jquant2.c **** 	tdist = (x - maxc0) * C0_SCALE;
 1862              		.loc 1 704 7 view .LVU668
 704:fltk-1.3.4-1/jpeg/jquant2.c **** 	tdist = (x - maxc0) * C0_SCALE;
 1863              		.loc 1 704 10 is_stmt 0 view .LVU669
 1864 0238 39442408 		cmpl	%eax, 8(%rsp)
 1865 023c 7C41     		jl	.L139
 705:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist = tdist*tdist;
 1866              		.loc 1 705 2 is_stmt 1 view .LVU670
 705:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist = tdist*tdist;
 1867              		.loc 1 705 13 is_stmt 0 view .LVU671
 1868 023e 4429C0   		subl	%r8d, %eax
 1869              	.LVL236:
 1870              	.L177:
 708:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist = tdist*tdist;
 1871              		.loc 1 708 22 view .LVU672
 1872 0241 01C0     		addl	%eax, %eax
 703:fltk-1.3.4-1/jpeg/jquant2.c ****       if (x <= centerc0) {
 1873              		.loc 1 703 16 view .LVU673
 1874 0243 31C9     		xorl	%ecx, %ecx
 708:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist = tdist*tdist;
 1875              		.loc 1 708 8 view .LVU674
 1876 0245 4898     		cltq
 1877              	.LVL237:
 709:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 1878              		.loc 1 709 2 is_stmt 1 view .LVU675
 709:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 1879              		.loc 1 709 11 is_stmt 0 view .LVU676
 1880 0247 480FAFC0 		imulq	%rax, %rax
 1881              	.LVL238:
 709:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 1882              		.loc 1 709 11 view .LVU677
 1883 024b 4889C2   		movq	%rax, %rdx
 1884              	.LVL239:
 709:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 1885              		.loc 1 709 11 view .LVU678
 1886 024e E9C1FEFF 		jmp	.L137
 1886      FF
 1887              	.LVL240:
 1888              		.p2align 4,,10
 1889 0253 0F1F4400 		.p2align 3
 1889      00
 1890              	.L146:
 748:fltk-1.3.4-1/jpeg/jquant2.c **** 	tdist = (x - maxc2) * C2_SCALE;
 1891              		.loc 1 748 7 is_stmt 1 view .LVU679
 748:fltk-1.3.4-1/jpeg/jquant2.c **** 	tdist = (x - maxc2) * C2_SCALE;
 1892              		.loc 1 748 10 is_stmt 0 view .LVU680
 1893 0258 39542428 		cmpl	%edx, 40(%rsp)
 1894 025c 7C26     		jl	.L147
 749:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 1895              		.loc 1 749 2 is_stmt 1 view .LVU681
 749:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 1896              		.loc 1 749 22 is_stmt 0 view .LVU682
 1897 025e 4429D2   		subl	%r10d, %edx
 1898              	.LVL241:
 749:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 1899              		.loc 1 749 8 view .LVU683
 1900 0261 4863D2   		movslq	%edx, %rdx
 1901              	.LVL242:
 750:fltk-1.3.4-1/jpeg/jquant2.c ****       } else {
 1902              		.loc 1 750 2 is_stmt 1 view .LVU684
 750:fltk-1.3.4-1/jpeg/jquant2.c ****       } else {
 1903              		.loc 1 750 19 is_stmt 0 view .LVU685
 1904 0264 480FAFD2 		imulq	%rdx, %rdx
 1905              	.LVL243:
 750:fltk-1.3.4-1/jpeg/jquant2.c ****       } else {
 1906              		.loc 1 750 11 view .LVU686
 1907 0268 4801C2   		addq	%rax, %rdx
 1908              	.LVL244:
 750:fltk-1.3.4-1/jpeg/jquant2.c ****       } else {
 1909              		.loc 1 750 11 view .LVU687
 1910 026b E900FFFF 		jmp	.L145
 1910      FF
 1911              	.LVL245:
 1912              		.p2align 4,,10
 1913              		.p2align 3
 1914              	.L142:
 726:fltk-1.3.4-1/jpeg/jquant2.c **** 	tdist = (x - maxc1) * C1_SCALE;
 1915              		.loc 1 726 7 is_stmt 1 view .LVU688
 726:fltk-1.3.4-1/jpeg/jquant2.c **** 	tdist = (x - maxc1) * C1_SCALE;
 1916              		.loc 1 726 10 is_stmt 0 view .LVU689
 1917 0270 39442420 		cmpl	%eax, 32(%rsp)
 1918 0274 0F8C73FF 		jl	.L143
 1918      FFFF
 1919 027a E9B6FEFF 		jmp	.L178
 1919      FF
 1920              	.LVL246:
 1921              	.L139:
 708:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist = tdist*tdist;
 1922              		.loc 1 708 2 is_stmt 1 view .LVU690
 708:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist = tdist*tdist;
 1923              		.loc 1 708 13 is_stmt 0 view .LVU691
 1924 027f 4429D8   		subl	%r11d, %eax
 1925              	.LVL247:
 708:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist = tdist*tdist;
 1926              		.loc 1 708 13 view .LVU692
 1927 0282 EBBD     		jmp	.L177
 1928              	.LVL248:
 1929              	.L147:
 752:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 1930              		.loc 1 752 2 is_stmt 1 view .LVU693
 752:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 1931              		.loc 1 752 22 is_stmt 0 view .LVU694
 1932 0284 4429F2   		subl	%r14d, %edx
 1933              	.LVL249:
 752:fltk-1.3.4-1/jpeg/jquant2.c **** 	max_dist += tdist*tdist;
 1934              		.loc 1 752 8 view .LVU695
 1935 0287 4863D2   		movslq	%edx, %rdx
 1936              	.LVL250:
 753:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 1937              		.loc 1 753 2 is_stmt 1 view .LVU696
 753:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 1938              		.loc 1 753 19 is_stmt 0 view .LVU697
 1939 028a 480FAFD2 		imulq	%rdx, %rdx
 1940              	.LVL251:
 753:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 1941              		.loc 1 753 11 view .LVU698
 1942 028e 4801C2   		addq	%rax, %rdx
 1943              	.LVL252:
 753:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 1944              		.loc 1 753 11 view .LVU699
 1945 0291 E9DAFEFF 		jmp	.L145
 1945      FF
 1946              	.LVL253:
 1947              	.L179:
 753:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 1948              		.loc 1 753 11 view .LVU700
 1949 0296 4C8B1C24 		movq	(%rsp), %r11
 1950              	.LVL254:
 753:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 1951              		.loc 1 753 11 view .LVU701
 1952 029a 4C8B7424 		movq	48(%rsp), %r14
 1952      30
 1953              	.LVL255:
 753:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 1954              		.loc 1 753 11 view .LVU702
 1955 029f 31D2     		xorl	%edx, %edx
 1956              	.LVL256:
 753:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 1957              		.loc 1 753 11 view .LVU703
 1958 02a1 31C0     		xorl	%eax, %eax
 1959 02a3 488B7424 		movq	16(%rsp), %rsi
 1959      10
 1960              	.LVL257:
 753:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 1961              		.loc 1 753 11 view .LVU704
 1962 02a8 EB09     		jmp	.L150
 1963              	.LVL258:
 1964 02aa 660F1F44 		.p2align 4,,10
 1964      0000
 1965              		.p2align 3
 1966              	.L167:
 753:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 1967              		.loc 1 753 11 view .LVU705
 1968 02b0 4889CA   		movq	%rcx, %rdx
 1969              	.LVL259:
 1970              	.L150:
 768:fltk-1.3.4-1/jpeg/jquant2.c ****       colorlist[ncolors++] = (JSAMPLE) i;
 1971              		.loc 1 768 5 is_stmt 1 view .LVU706
 768:fltk-1.3.4-1/jpeg/jquant2.c ****       colorlist[ncolors++] = (JSAMPLE) i;
 1972              		.loc 1 768 8 is_stmt 0 view .LVU707
 1973 02b3 483B3CD6 		cmpq	(%rsi,%rdx,8), %rdi
 1974 02b7 7C0D     		jl	.L149
 769:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 1975              		.loc 1 769 7 is_stmt 1 view .LVU708
 1976              	.LVL260:
 769:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 1977              		.loc 1 769 24 is_stmt 0 view .LVU709
 1978 02b9 4863C8   		movslq	%eax, %rcx
 1979 02bc 83C001   		addl	$1, %eax
 1980              	.LVL261:
 769:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 1981              		.loc 1 769 28 view .LVU710
 1982 02bf 88940CE0 		movb	%dl, 2272(%rsp,%rcx)
 1982      080000
 1983              	.L149:
 767:fltk-1.3.4-1/jpeg/jquant2.c ****     if (mindist[i] <= minmaxdist)
 1984              		.loc 1 767 30 is_stmt 1 view .LVU711
 1985              	.LVL262:
 767:fltk-1.3.4-1/jpeg/jquant2.c ****     if (mindist[i] <= minmaxdist)
 1986              		.loc 1 767 15 view .LVU712
 1987 02c6 488D4A01 		leaq	1(%rdx), %rcx
 767:fltk-1.3.4-1/jpeg/jquant2.c ****     if (mindist[i] <= minmaxdist)
 1988              		.loc 1 767 3 is_stmt 0 view .LVU713
 1989 02ca 4939D3   		cmpq	%rdx, %r11
 1990 02cd 75E1     		jne	.L167
 1991              	.LVL263:
 1992              	.L135:
 771:fltk-1.3.4-1/jpeg/jquant2.c **** }
 1993              		.loc 1 771 3 is_stmt 1 view .LVU714
 771:fltk-1.3.4-1/jpeg/jquant2.c **** }
 1994              		.loc 1 771 3 is_stmt 0 view .LVU715
 1995              	.LBE33:
 1996              	.LBE39:
 892:fltk-1.3.4-1/jpeg/jquant2.c **** 		   bestcolor);
 1997              		.loc 1 892 3 is_stmt 1 view .LVU716
 1998              	.LBB40:
 1999              	.LBI40:
 776:fltk-1.3.4-1/jpeg/jquant2.c **** 		  int numcolors, JSAMPLE colorlist[], JSAMPLE bestcolor[])
 2000              		.loc 1 776 1 view .LVU717
 2001              	.LBB41:
 799:fltk-1.3.4-1/jpeg/jquant2.c ****     *bptr++ = 0x7FFFFFFFL;
 2002              		.loc 1 799 54 view .LVU718
 798:fltk-1.3.4-1/jpeg/jquant2.c ****   for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 2003              		.loc 1 798 8 is_stmt 0 view .LVU719
 2004 02cf 488B5424 		movq	16(%rsp), %rdx
 2004      10
 2005 02d4 4C8DBC24 		leaq	1120(%rsp), %r15
 2005      60040000 
 2006              	.LVL264:
 2007 02dc 0F1F4000 		.p2align 4,,10
 2008              		.p2align 3
 2009              	.L151:
 800:fltk-1.3.4-1/jpeg/jquant2.c ****   
 2010              		.loc 1 800 5 is_stmt 1 view .LVU720
 800:fltk-1.3.4-1/jpeg/jquant2.c ****   
 2011              		.loc 1 800 10 is_stmt 0 view .LVU721
 2012 02e0 4883C208 		addq	$8, %rdx
 2013              	.LVL265:
 800:fltk-1.3.4-1/jpeg/jquant2.c ****   
 2014              		.loc 1 800 13 view .LVU722
 2015 02e4 48C742F8 		movq	$2147483647, -8(%rdx)
 2015      FFFFFF7F 
 799:fltk-1.3.4-1/jpeg/jquant2.c ****     *bptr++ = 0x7FFFFFFFL;
 2016              		.loc 1 799 62 is_stmt 1 view .LVU723
 799:fltk-1.3.4-1/jpeg/jquant2.c ****     *bptr++ = 0x7FFFFFFFL;
 2017              		.loc 1 799 54 view .LVU724
 799:fltk-1.3.4-1/jpeg/jquant2.c ****     *bptr++ = 0x7FFFFFFFL;
 2018              		.loc 1 799 3 is_stmt 0 view .LVU725
 2019 02ec 4C39FA   		cmpq	%r15, %rdx
 2020 02ef 75EF     		jne	.L151
 2021              	.LVL266:
 812:fltk-1.3.4-1/jpeg/jquant2.c ****     icolor = GETJSAMPLE(colorlist[i]);
 2022              		.loc 1 812 15 is_stmt 1 view .LVU726
 812:fltk-1.3.4-1/jpeg/jquant2.c ****     icolor = GETJSAMPLE(colorlist[i]);
 2023              		.loc 1 812 3 is_stmt 0 view .LVU727
 2024 02f1 85C0     		testl	%eax, %eax
 2025 02f3 0F846E01 		je	.L152
 2025      0000
 815:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 = inc0*inc0;
 2026              		.loc 1 815 21 view .LVU728
 2027 02f9 498B96A0 		movq	160(%r14), %rdx
 2027      000000
 2028              	.LVL267:
 815:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 = inc0*inc0;
 2029              		.loc 1 815 21 view .LVU729
 2030 0300 83E801   		subl	$1, %eax
 2031              	.LVL268:
 815:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 = inc0*inc0;
 2032              		.loc 1 815 21 view .LVU730
 2033 0303 4C893C24 		movq	%r15, (%rsp)
 2034 0307 488D8404 		leaq	2273(%rsp,%rax), %rax
 2034      E1080000 
 2035 030f 488B3A   		movq	(%rdx), %rdi
 2036 0312 48894424 		movq	%rax, 56(%rsp)
 2036      38
 2037 0317 488D8424 		leaq	2144(%rsp), %rax
 2037      60080000 
 2038              	.LVL269:
 815:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 = inc0*inc0;
 2039              		.loc 1 815 21 view .LVU731
 2040 031f 48894424 		movq	%rax, 64(%rsp)
 2040      40
 2041 0324 48897C24 		movq	%rdi, 32(%rsp)
 2041      20
 817:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc1*inc1;
 2042              		.loc 1 817 21 view .LVU732
 2043 0329 488B7A08 		movq	8(%rdx), %rdi
 2044 032d 48897C24 		movq	%rdi, 40(%rsp)
 2044      28
 819:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc2*inc2;
 2045              		.loc 1 819 21 view .LVU733
 2046 0332 488B7A10 		movq	16(%rdx), %rdi
 2047 0336 48897C24 		movq	%rdi, 48(%rsp)
 2047      30
 2048 033b 488DBC24 		leaq	2272(%rsp), %rdi
 2048      E0080000 
 2049              	.LVL270:
 819:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc2*inc2;
 2050              		.loc 1 819 21 view .LVU734
 2051 0343 48897C24 		movq	%rdi, 8(%rsp)
 2051      08
 2052              	.LVL271:
 2053 0348 0F1F8400 		.p2align 4,,10
 2053      00000000 
 2054              		.p2align 3
 2055              	.L159:
 813:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Compute (square of) distance from minc0/c1/c2 to this color */
 2056              		.loc 1 813 5 is_stmt 1 view .LVU735
 813:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Compute (square of) distance from minc0/c1/c2 to this color */
 2057              		.loc 1 813 14 is_stmt 0 view .LVU736
 2058 0350 488B4424 		movq	8(%rsp), %rax
 2058      08
 815:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 = inc0*inc0;
 2059              		.loc 1 815 19 view .LVU737
 2060 0355 448B5C24 		movl	28(%rsp), %r11d
 2060      1C
 817:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc1*inc1;
 2061              		.loc 1 817 19 view .LVU738
 2062 035a 8B7C2450 		movl	80(%rsp), %edi
 819:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc2*inc2;
 2063              		.loc 1 819 61 view .LVU739
 2064 035e 448B5424 		movl	24(%rsp), %r10d
 2064      18
 813:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Compute (square of) distance from minc0/c1/c2 to this color */
 2065              		.loc 1 813 14 view .LVU740
 2066 0363 0FB608   		movzbl	(%rax), %ecx
 815:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 = inc0*inc0;
 2067              		.loc 1 815 21 view .LVU741
 2068 0366 488B4424 		movq	32(%rsp), %rax
 2068      20
 827:fltk-1.3.4-1/jpeg/jquant2.c ****     xx0 = inc0;
 2069              		.loc 1 827 10 view .LVU742
 2070 036b 4C8B7424 		movq	64(%rsp), %r14
 2070      40
 826:fltk-1.3.4-1/jpeg/jquant2.c ****     cptr = bestcolor;
 2071              		.loc 1 826 10 view .LVU743
 2072 0370 4C8B6424 		movq	16(%rsp), %r12
 2072      10
 815:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 = inc0*inc0;
 2073              		.loc 1 815 21 view .LVU744
 2074 0375 0FB60408 		movzbl	(%rax,%rcx), %eax
 813:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Compute (square of) distance from minc0/c1/c2 to this color */
 2075              		.loc 1 813 14 view .LVU745
 2076 0379 4889CB   		movq	%rcx, %rbx
 2077              	.LVL272:
 815:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 = inc0*inc0;
 2078              		.loc 1 815 5 is_stmt 1 view .LVU746
 815:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 = inc0*inc0;
 2079              		.loc 1 815 19 is_stmt 0 view .LVU747
 2080 037c 4129C3   		subl	%eax, %r11d
 817:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc1*inc1;
 2081              		.loc 1 817 21 view .LVU748
 2082 037f 488B4424 		movq	40(%rsp), %rax
 2082      28
 815:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 = inc0*inc0;
 2083              		.loc 1 815 61 view .LVU749
 2084 0384 4501DB   		addl	%r11d, %r11d
 817:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc1*inc1;
 2085              		.loc 1 817 21 view .LVU750
 2086 0387 0FB60408 		movzbl	(%rax,%rcx), %eax
 815:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 = inc0*inc0;
 2087              		.loc 1 815 10 view .LVU751
 2088 038b 4D63DB   		movslq	%r11d, %r11
 2089              	.LVL273:
 816:fltk-1.3.4-1/jpeg/jquant2.c ****     inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 2090              		.loc 1 816 5 is_stmt 1 view .LVU752
 816:fltk-1.3.4-1/jpeg/jquant2.c ****     inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 2091              		.loc 1 816 11 is_stmt 0 view .LVU753
 2092 038e 4C89DA   		movq	%r11, %rdx
 817:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc1*inc1;
 2093              		.loc 1 817 19 view .LVU754
 2094 0391 29C7     		subl	%eax, %edi
 816:fltk-1.3.4-1/jpeg/jquant2.c ****     inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 2095              		.loc 1 816 11 view .LVU755
 2096 0393 490FAFD3 		imulq	%r11, %rdx
 2097              	.LVL274:
 817:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc1*inc1;
 2098              		.loc 1 817 5 is_stmt 1 view .LVU756
 822:fltk-1.3.4-1/jpeg/jquant2.c ****     inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 2099              		.loc 1 822 33 is_stmt 0 view .LVU757
 2100 0397 4983C308 		addq	$8, %r11
 2101              	.LVL275:
 817:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc1*inc1;
 2102              		.loc 1 817 61 view .LVU758
 2103 039b 8D047F   		leal	(%rdi,%rdi,2), %eax
 819:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc2*inc2;
 2104              		.loc 1 819 21 view .LVU759
 2105 039e 488B7C24 		movq	48(%rsp), %rdi
 2105      30
 822:fltk-1.3.4-1/jpeg/jquant2.c ****     inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 2106              		.loc 1 822 10 view .LVU760
 2107 03a3 49C1E305 		salq	$5, %r11
 2108              	.LVL276:
 817:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc1*inc1;
 2109              		.loc 1 817 10 view .LVU761
 2110 03a7 4898     		cltq
 2111              	.LVL277:
 818:fltk-1.3.4-1/jpeg/jquant2.c ****     inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 2112              		.loc 1 818 5 is_stmt 1 view .LVU762
 818:fltk-1.3.4-1/jpeg/jquant2.c ****     inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 2113              		.loc 1 818 18 is_stmt 0 view .LVU763
 2114 03a9 4989C5   		movq	%rax, %r13
 819:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc2*inc2;
 2115              		.loc 1 819 21 view .LVU764
 2116 03ac 0FB60C0F 		movzbl	(%rdi,%rcx), %ecx
 2117              	.LVL278:
 818:fltk-1.3.4-1/jpeg/jquant2.c ****     inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 2118              		.loc 1 818 18 view .LVU765
 2119 03b0 4C0FAFE8 		imulq	%rax, %r13
 823:fltk-1.3.4-1/jpeg/jquant2.c ****     inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 2120              		.loc 1 823 17 view .LVU766
 2121 03b4 488D0440 		leaq	(%rax,%rax,2), %rax
 2122              	.LVL279:
 819:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc2*inc2;
 2123              		.loc 1 819 61 view .LVU767
 2124 03b8 4129CA   		subl	%ecx, %r10d
 823:fltk-1.3.4-1/jpeg/jquant2.c ****     inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 2125              		.loc 1 823 17 view .LVU768
 2126 03bb 48C1E003 		salq	$3, %rax
 819:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc2*inc2;
 2127              		.loc 1 819 10 view .LVU769
 2128 03bf 4D63D2   		movslq	%r10d, %r10
 823:fltk-1.3.4-1/jpeg/jquant2.c ****     inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 2129              		.loc 1 823 10 view .LVU770
 2130 03c2 4C8DB890 		leaq	144(%rax), %r15
 2130      000000
 2131 03c9 488DA890 		leaq	2448(%rax), %rbp
 2131      090000
 818:fltk-1.3.4-1/jpeg/jquant2.c ****     inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 2132              		.loc 1 818 11 view .LVU771
 2133 03d0 4C01EA   		addq	%r13, %rdx
 2134              	.LVL280:
 819:fltk-1.3.4-1/jpeg/jquant2.c ****     dist0 += inc2*inc2;
 2135              		.loc 1 819 5 is_stmt 1 view .LVU772
 820:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Form the initial difference increments */
 2136              		.loc 1 820 5 view .LVU773
 820:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Form the initial difference increments */
 2137              		.loc 1 820 18 is_stmt 0 view .LVU774
 2138 03d3 4D89D5   		movq	%r10, %r13
 2139 03d6 4D0FAFEA 		imulq	%r10, %r13
 824:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Now loop over all cells in box, updating distance per Thomas method */
 2140              		.loc 1 824 33 view .LVU775
 2141 03da 4983C204 		addq	$4, %r10
 2142              	.LVL281:
 824:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Now loop over all cells in box, updating distance per Thomas method */
 2143              		.loc 1 824 10 view .LVU776
 2144 03de 49C1E204 		salq	$4, %r10
 2145              	.LVL282:
 820:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Form the initial difference increments */
 2146              		.loc 1 820 11 view .LVU777
 2147 03e2 4901D5   		addq	%rdx, %r13
 2148              	.LVL283:
 822:fltk-1.3.4-1/jpeg/jquant2.c ****     inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 2149              		.loc 1 822 5 is_stmt 1 view .LVU778
 823:fltk-1.3.4-1/jpeg/jquant2.c ****     inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 2150              		.loc 1 823 5 view .LVU779
 824:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Now loop over all cells in box, updating distance per Thomas method */
 2151              		.loc 1 824 5 view .LVU780
 826:fltk-1.3.4-1/jpeg/jquant2.c ****     cptr = bestcolor;
 2152              		.loc 1 826 5 view .LVU781
 827:fltk-1.3.4-1/jpeg/jquant2.c ****     xx0 = inc0;
 2153              		.loc 1 827 5 view .LVU782
 828:fltk-1.3.4-1/jpeg/jquant2.c ****     for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 2154              		.loc 1 828 5 view .LVU783
 829:fltk-1.3.4-1/jpeg/jquant2.c ****       dist1 = dist0;
 2155              		.loc 1 829 5 view .LVU784
 829:fltk-1.3.4-1/jpeg/jquant2.c ****       dist1 = dist0;
 2156              		.loc 1 829 32 view .LVU785
 2157              	.L153:
 832:fltk-1.3.4-1/jpeg/jquant2.c **** 	dist2 = dist1;
 2158              		.loc 1 832 34 view .LVU786
 834:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 2159              		.loc 1 834 6 is_stmt 0 view .LVU787
 2160 03e5 4D89F1   		movq	%r14, %r9
 2161 03e8 4C89E6   		movq	%r12, %rsi
 831:fltk-1.3.4-1/jpeg/jquant2.c ****       for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 2162              		.loc 1 831 11 view .LVU788
 2163 03eb 4C89F9   		movq	%r15, %rcx
 2164 03ee 4D89E8   		movq	%r13, %r8
 2165              	.LVL284:
 2166              		.p2align 4,,10
 2167 03f1 0F1F8000 		.p2align 3
 2167      000000
 2168              	.L158:
 835:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (dist2 < *bptr) {
 2169              		.loc 1 835 29 is_stmt 1 view .LVU789
 834:fltk-1.3.4-1/jpeg/jquant2.c **** 	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 2170              		.loc 1 834 6 is_stmt 0 view .LVU790
 2171 03f8 4C89D7   		movq	%r10, %rdi
 2172 03fb 4C89C2   		movq	%r8, %rdx
 2173 03fe 31C0     		xorl	%eax, %eax
 2174              	.LVL285:
 2175              	.L155:
 836:fltk-1.3.4-1/jpeg/jquant2.c **** 	    *bptr = dist2;
 2176              		.loc 1 836 4 is_stmt 1 view .LVU791
 836:fltk-1.3.4-1/jpeg/jquant2.c **** 	    *bptr = dist2;
 2177              		.loc 1 836 7 is_stmt 0 view .LVU792
 2178 0400 483914C6 		cmpq	%rdx, (%rsi,%rax,8)
 2179 0404 7E08     		jle	.L154
 837:fltk-1.3.4-1/jpeg/jquant2.c **** 	    *cptr = (JSAMPLE) icolor;
 2180              		.loc 1 837 6 is_stmt 1 view .LVU793
 837:fltk-1.3.4-1/jpeg/jquant2.c **** 	    *cptr = (JSAMPLE) icolor;
 2181              		.loc 1 837 12 is_stmt 0 view .LVU794
 2182 0406 488914C6 		movq	%rdx, (%rsi,%rax,8)
 838:fltk-1.3.4-1/jpeg/jquant2.c **** 	  }
 2183              		.loc 1 838 6 is_stmt 1 view .LVU795
 838:fltk-1.3.4-1/jpeg/jquant2.c **** 	  }
 2184              		.loc 1 838 12 is_stmt 0 view .LVU796
 2185 040a 41881C01 		movb	%bl, (%r9,%rax)
 2186              	.L154:
 840:fltk-1.3.4-1/jpeg/jquant2.c **** 	  xx2 += 2 * STEP_C2 * STEP_C2;
 2187              		.loc 1 840 4 is_stmt 1 view .LVU797
 2188 040e 4883C001 		addq	$1, %rax
 2189              	.LVL286:
 840:fltk-1.3.4-1/jpeg/jquant2.c **** 	  xx2 += 2 * STEP_C2 * STEP_C2;
 2190              		.loc 1 840 10 is_stmt 0 view .LVU798
 2191 0412 4801FA   		addq	%rdi, %rdx
 2192              	.LVL287:
 841:fltk-1.3.4-1/jpeg/jquant2.c **** 	  bptr++;
 2193              		.loc 1 841 4 is_stmt 1 view .LVU799
 841:fltk-1.3.4-1/jpeg/jquant2.c **** 	  bptr++;
 2194              		.loc 1 841 8 is_stmt 0 view .LVU800
 2195 0415 4883EF80 		subq	$-128, %rdi
 2196              	.LVL288:
 842:fltk-1.3.4-1/jpeg/jquant2.c **** 	  cptr++;
 2197              		.loc 1 842 4 is_stmt 1 view .LVU801
 843:fltk-1.3.4-1/jpeg/jquant2.c **** 	}
 2198              		.loc 1 843 4 view .LVU802
 835:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (dist2 < *bptr) {
 2199              		.loc 1 835 39 view .LVU803
 835:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (dist2 < *bptr) {
 2200              		.loc 1 835 29 view .LVU804
 835:fltk-1.3.4-1/jpeg/jquant2.c **** 	  if (dist2 < *bptr) {
 2201              		.loc 1 835 2 is_stmt 0 view .LVU805
 2202 0419 4883F804 		cmpq	$4, %rax
 2203 041d 75E1     		jne	.L155
 845:fltk-1.3.4-1/jpeg/jquant2.c **** 	xx1 += 2 * STEP_C1 * STEP_C1;
 2204              		.loc 1 845 8 view .LVU806
 2205 041f 4901C8   		addq	%rcx, %r8
 2206              	.LVL289:
 846:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 2207              		.loc 1 846 6 view .LVU807
 2208 0422 4881C120 		addq	$288, %rcx
 2208      010000
 2209              	.LVL290:
 846:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 2210              		.loc 1 846 6 view .LVU808
 2211 0429 4883C620 		addq	$32, %rsi
 2212 042d 4983C104 		addq	$4, %r9
 845:fltk-1.3.4-1/jpeg/jquant2.c **** 	xx1 += 2 * STEP_C1 * STEP_C1;
 2213              		.loc 1 845 2 is_stmt 1 view .LVU809
 2214              	.LVL291:
 846:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 2215              		.loc 1 846 2 view .LVU810
 832:fltk-1.3.4-1/jpeg/jquant2.c **** 	dist2 = dist1;
 2216              		.loc 1 832 44 view .LVU811
 832:fltk-1.3.4-1/jpeg/jquant2.c **** 	dist2 = dist1;
 2217              		.loc 1 832 34 view .LVU812
 832:fltk-1.3.4-1/jpeg/jquant2.c **** 	dist2 = dist1;
 2218              		.loc 1 832 7 is_stmt 0 view .LVU813
 2219 0431 4839E9   		cmpq	%rbp, %rcx
 2220 0434 75C2     		jne	.L158
 848:fltk-1.3.4-1/jpeg/jquant2.c ****       xx0 += 2 * STEP_C0 * STEP_C0;
 2221              		.loc 1 848 13 view .LVU814
 2222 0436 4D01DD   		addq	%r11, %r13
 2223              	.LVL292:
 848:fltk-1.3.4-1/jpeg/jquant2.c ****       xx0 += 2 * STEP_C0 * STEP_C0;
 2224              		.loc 1 848 13 view .LVU815
 2225 0439 4981C400 		addq	$256, %r12
 2225      010000
 2226 0440 4983C620 		addq	$32, %r14
 848:fltk-1.3.4-1/jpeg/jquant2.c ****       xx0 += 2 * STEP_C0 * STEP_C0;
 2227              		.loc 1 848 7 is_stmt 1 view .LVU816
 2228              	.LVL293:
 849:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 2229              		.loc 1 849 7 view .LVU817
 849:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 2230              		.loc 1 849 11 is_stmt 0 view .LVU818
 2231 0444 4981C300 		addq	$512, %r11
 2231      020000
 2232              	.LVL294:
 829:fltk-1.3.4-1/jpeg/jquant2.c ****       dist1 = dist0;
 2233              		.loc 1 829 42 is_stmt 1 view .LVU819
 829:fltk-1.3.4-1/jpeg/jquant2.c ****       dist1 = dist0;
 2234              		.loc 1 829 32 view .LVU820
 829:fltk-1.3.4-1/jpeg/jquant2.c ****       dist1 = dist0;
 2235              		.loc 1 829 5 is_stmt 0 view .LVU821
 2236 044b 4C3B2424 		cmpq	(%rsp), %r12
 2237 044f 7594     		jne	.L153
 812:fltk-1.3.4-1/jpeg/jquant2.c ****     icolor = GETJSAMPLE(colorlist[i]);
 2238              		.loc 1 812 30 is_stmt 1 view .LVU822
 2239              	.LVL295:
 812:fltk-1.3.4-1/jpeg/jquant2.c ****     icolor = GETJSAMPLE(colorlist[i]);
 2240              		.loc 1 812 15 view .LVU823
 2241 0451 48834424 		addq	$1, 8(%rsp)
 2241      0801
 2242              	.LVL296:
 812:fltk-1.3.4-1/jpeg/jquant2.c ****     icolor = GETJSAMPLE(colorlist[i]);
 2243              		.loc 1 812 15 is_stmt 0 view .LVU824
 2244 0457 488B4424 		movq	8(%rsp), %rax
 2244      08
 812:fltk-1.3.4-1/jpeg/jquant2.c ****     icolor = GETJSAMPLE(colorlist[i]);
 2245              		.loc 1 812 3 view .LVU825
 2246 045c 48394424 		cmpq	%rax, 56(%rsp)
 2246      38
 2247 0461 0F85E9FE 		jne	.L159
 2247      FFFF
 2248              	.LVL297:
 2249              	.L152:
 812:fltk-1.3.4-1/jpeg/jquant2.c ****     icolor = GETJSAMPLE(colorlist[i]);
 2250              		.loc 1 812 3 view .LVU826
 2251              	.LBE41:
 2252              	.LBE40:
 896:fltk-1.3.4-1/jpeg/jquant2.c ****   c1 <<= BOX_C1_LOG;
 2253              		.loc 1 896 3 is_stmt 1 view .LVU827
 897:fltk-1.3.4-1/jpeg/jquant2.c ****   c2 <<= BOX_C2_LOG;
 2254              		.loc 1 897 3 view .LVU828
 898:fltk-1.3.4-1/jpeg/jquant2.c ****   cptr = bestcolor;
 2255              		.loc 1 898 3 view .LVU829
 899:fltk-1.3.4-1/jpeg/jquant2.c ****   for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 2256              		.loc 1 899 3 view .LVU830
 900:fltk-1.3.4-1/jpeg/jquant2.c ****     for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 2257              		.loc 1 900 3 view .LVU831
 900:fltk-1.3.4-1/jpeg/jquant2.c ****     for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 2258              		.loc 1 900 17 view .LVU832
 898:fltk-1.3.4-1/jpeg/jquant2.c ****   cptr = bestcolor;
 2259              		.loc 1 898 6 is_stmt 0 view .LVU833
 2260 0467 448B5424 		movl	92(%rsp), %r10d
 2260      5C
 896:fltk-1.3.4-1/jpeg/jquant2.c ****   c1 <<= BOX_C1_LOG;
 2261              		.loc 1 896 6 view .LVU834
 2262 046c 8B742454 		movl	84(%rsp), %esi
 2263 0470 4C8D8424 		leaq	2176(%rsp), %r8
 2263      80080000 
 2264 0478 488D9C24 		leaq	2304(%rsp), %rbx
 2264      00090000 
 897:fltk-1.3.4-1/jpeg/jquant2.c ****   c2 <<= BOX_C2_LOG;
 2265              		.loc 1 897 6 view .LVU835
 2266 0480 448B5C24 		movl	88(%rsp), %r11d
 2266      58
 2267 0485 488B7C24 		movq	72(%rsp), %rdi
 2267      48
 898:fltk-1.3.4-1/jpeg/jquant2.c ****   cptr = bestcolor;
 2268              		.loc 1 898 6 view .LVU836
 2269 048a 4183E2FC 		andl	$-4, %r10d
 2270              	.LVL298:
 896:fltk-1.3.4-1/jpeg/jquant2.c ****   c1 <<= BOX_C1_LOG;
 2271              		.loc 1 896 6 view .LVU837
 2272 048e 83E6FC   		andl	$-4, %esi
 2273              	.LVL299:
 897:fltk-1.3.4-1/jpeg/jquant2.c ****   c2 <<= BOX_C2_LOG;
 2274              		.loc 1 897 6 view .LVU838
 2275 0491 4183E3F8 		andl	$-8, %r11d
 2276              	.LVL300:
 897:fltk-1.3.4-1/jpeg/jquant2.c ****   c2 <<= BOX_C2_LOG;
 2277              		.loc 1 897 6 view .LVU839
 2278 0495 4D63D2   		movslq	%r10d, %r10
 897:fltk-1.3.4-1/jpeg/jquant2.c ****   c2 <<= BOX_C2_LOG;
 2279              		.loc 1 897 6 view .LVU840
 2280 0498 4863C6   		movslq	%esi, %rax
 2281 049b 4D63DB   		movslq	%r11d, %r11
 897:fltk-1.3.4-1/jpeg/jquant2.c ****   c2 <<= BOX_C2_LOG;
 2282              		.loc 1 897 6 view .LVU841
 2283 049e 4D01D2   		addq	%r10, %r10
 2284              	.LVL301:
 897:fltk-1.3.4-1/jpeg/jquant2.c ****   c2 <<= BOX_C2_LOG;
 2285              		.loc 1 897 6 view .LVU842
 2286 04a1 4C8D0CC7 		leaq	(%rdi,%rax,8), %r9
 2287 04a5 49C1E306 		salq	$6, %r11
 2288              	.LVL302:
 2289              	.L160:
 897:fltk-1.3.4-1/jpeg/jquant2.c ****   c2 <<= BOX_C2_LOG;
 2290              		.loc 1 897 6 view .LVU843
 2291 04a9 498D48E0 		leaq	-32(%r8), %rcx
 2292              	.LVL303:
 901:fltk-1.3.4-1/jpeg/jquant2.c ****       cachep = & histogram[c0+ic0][c1+ic1][c2];
 2293              		.loc 1 901 19 is_stmt 1 view .LVU844
 2294              	.LBB43:
 2295              	.LBB42:
 826:fltk-1.3.4-1/jpeg/jquant2.c ****     cptr = bestcolor;
 2296              		.loc 1 826 10 is_stmt 0 view .LVU845
 2297 04ad 4C89DF   		movq	%r11, %rdi
 2298              	.LVL304:
 2299              		.p2align 4,,10
 2300              		.p2align 3
 2301              	.L162:
 826:fltk-1.3.4-1/jpeg/jquant2.c ****     cptr = bestcolor;
 2302              		.loc 1 826 10 view .LVU846
 2303              	.LBE42:
 2304              	.LBE43:
 902:fltk-1.3.4-1/jpeg/jquant2.c ****       for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 2305              		.loc 1 902 7 is_stmt 1 view .LVU847
 902:fltk-1.3.4-1/jpeg/jquant2.c ****       for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 2306              		.loc 1 902 14 is_stmt 0 view .LVU848
 2307 04b0 498D343A 		leaq	(%r10,%rdi), %rsi
 2308 04b4 31C0     		xorl	%eax, %eax
 2309 04b6 490331   		addq	(%r9), %rsi
 2310              	.LVL305:
 903:fltk-1.3.4-1/jpeg/jquant2.c **** 	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 2311              		.loc 1 903 7 is_stmt 1 view .LVU849
 903:fltk-1.3.4-1/jpeg/jquant2.c **** 	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 2312              		.loc 1 903 21 view .LVU850
 2313              	.L161:
 904:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 2314              		.loc 1 904 2 discriminator 3 view .LVU851
 904:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 2315              		.loc 1 904 26 is_stmt 0 discriminator 3 view .LVU852
 2316 04b9 0FB61401 		movzbl	(%rcx,%rax), %edx
 904:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 2317              		.loc 1 904 14 discriminator 3 view .LVU853
 2318 04bd 83C201   		addl	$1, %edx
 2319 04c0 66891446 		movw	%dx, (%rsi,%rax,2)
 903:fltk-1.3.4-1/jpeg/jquant2.c **** 	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 2320              		.loc 1 903 41 is_stmt 1 discriminator 3 view .LVU854
 2321              	.LVL306:
 903:fltk-1.3.4-1/jpeg/jquant2.c **** 	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 2322              		.loc 1 903 21 discriminator 3 view .LVU855
 2323 04c4 4883C001 		addq	$1, %rax
 2324              	.LVL307:
 903:fltk-1.3.4-1/jpeg/jquant2.c **** 	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 2325              		.loc 1 903 7 is_stmt 0 discriminator 3 view .LVU856
 2326 04c8 4883F804 		cmpq	$4, %rax
 2327 04cc 75EB     		jne	.L161
 2328 04ce 4883C104 		addq	$4, %rcx
 2329              	.LVL308:
 901:fltk-1.3.4-1/jpeg/jquant2.c ****       cachep = & histogram[c0+ic0][c1+ic1][c2];
 2330              		.loc 1 901 39 is_stmt 1 discriminator 2 view .LVU857
 901:fltk-1.3.4-1/jpeg/jquant2.c ****       cachep = & histogram[c0+ic0][c1+ic1][c2];
 2331              		.loc 1 901 19 discriminator 2 view .LVU858
 2332 04d2 4883C740 		addq	$64, %rdi
 901:fltk-1.3.4-1/jpeg/jquant2.c ****       cachep = & histogram[c0+ic0][c1+ic1][c2];
 2333              		.loc 1 901 5 is_stmt 0 discriminator 2 view .LVU859
 2334 04d6 4C39C1   		cmpq	%r8, %rcx
 2335 04d9 75D5     		jne	.L162
 900:fltk-1.3.4-1/jpeg/jquant2.c ****     for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 2336              		.loc 1 900 37 is_stmt 1 discriminator 2 view .LVU860
 900:fltk-1.3.4-1/jpeg/jquant2.c ****     for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 2337              		.loc 1 900 17 discriminator 2 view .LVU861
 2338 04db 4C8D4120 		leaq	32(%rcx), %r8
 2339 04df 4983C108 		addq	$8, %r9
 900:fltk-1.3.4-1/jpeg/jquant2.c ****     for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 2340              		.loc 1 900 3 is_stmt 0 discriminator 2 view .LVU862
 2341 04e3 4C39C3   		cmpq	%r8, %rbx
 2342 04e6 75C1     		jne	.L160
 908:fltk-1.3.4-1/jpeg/jquant2.c **** 
 2343              		.loc 1 908 1 view .LVU863
 2344 04e8 488B8424 		movq	2536(%rsp), %rax
 2344      E8090000 
 2345 04f0 64483304 		xorq	%fs:40, %rax
 2345      25280000 
 2345      00
 2346              	.LVL309:
 908:fltk-1.3.4-1/jpeg/jquant2.c **** 
 2347              		.loc 1 908 1 view .LVU864
 2348 04f9 7523     		jne	.L183
 2349 04fb 4881C4F8 		addq	$2552, %rsp
 2349      090000
 2350              		.cfi_remember_state
 2351              		.cfi_def_cfa_offset 56
 2352 0502 5B       		popq	%rbx
 2353              		.cfi_def_cfa_offset 48
 2354 0503 5D       		popq	%rbp
 2355              		.cfi_def_cfa_offset 40
 2356 0504 415C     		popq	%r12
 2357              		.cfi_def_cfa_offset 32
 2358 0506 415D     		popq	%r13
 2359              		.cfi_def_cfa_offset 24
 2360 0508 415E     		popq	%r14
 2361              		.cfi_def_cfa_offset 16
 2362 050a 415F     		popq	%r15
 2363              		.cfi_def_cfa_offset 8
 2364 050c C3       		ret
 2365              	.LVL310:
 2366              	.L165:
 2367              		.cfi_restore_state
 908:fltk-1.3.4-1/jpeg/jquant2.c **** 
 2368              		.loc 1 908 1 view .LVU865
 2369 050d 488D7C24 		leaq	96(%rsp), %rdi
 2369      60
 2370              	.LVL311:
 2371              	.LBB44:
 2372              	.LBB34:
 766:fltk-1.3.4-1/jpeg/jquant2.c ****   for (i = 0; i < numcolors; i++) {
 2373              		.loc 1 766 11 view .LVU866
 2374 0512 31C0     		xorl	%eax, %eax
 2375              	.LVL312:
 766:fltk-1.3.4-1/jpeg/jquant2.c ****   for (i = 0; i < numcolors; i++) {
 2376              		.loc 1 766 11 view .LVU867
 2377 0514 48897C24 		movq	%rdi, 16(%rsp)
 2377      10
 2378 0519 E9B1FDFF 		jmp	.L135
 2378      FF
 2379              	.LVL313:
 2380              	.L183:
 766:fltk-1.3.4-1/jpeg/jquant2.c ****   for (i = 0; i < numcolors; i++) {
 2381              		.loc 1 766 11 view .LVU868
 2382              	.LBE34:
 2383              	.LBE44:
 908:fltk-1.3.4-1/jpeg/jquant2.c **** 
 2384              		.loc 1 908 1 view .LVU869
 2385 051e E8000000 		call	__stack_chk_fail@PLT
 2385      00
 2386              	.LVL314:
 908:fltk-1.3.4-1/jpeg/jquant2.c **** 
 2387              		.loc 1 908 1 view .LVU870
 2388              		.cfi_endproc
 2389              	.LFE60:
 2391              		.section	.text.pass2_no_dither,"ax",@progbits
 2392              		.p2align 4
 2394              	pass2_no_dither:
 2395              	.LVL315:
 2396              	.LFB61:
 919:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 2397              		.loc 1 919 1 is_stmt 1 view -0
 2398              		.cfi_startproc
 919:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 2399              		.loc 1 919 1 is_stmt 0 view .LVU872
 2400 0000 F30F1EFA 		endbr64
 920:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram = cquantize->histogram;
 2401              		.loc 1 920 3 is_stmt 1 view .LVU873
 2402              	.LVL316:
 921:fltk-1.3.4-1/jpeg/jquant2.c ****   register JSAMPROW inptr, outptr;
 2403              		.loc 1 921 3 view .LVU874
 919:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 2404              		.loc 1 919 1 is_stmt 0 view .LVU875
 2405 0004 4157     		pushq	%r15
 2406              		.cfi_def_cfa_offset 16
 2407              		.cfi_offset 15, -16
 2408              	.LVL317:
 919:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 2409              		.loc 1 919 1 view .LVU876
 2410 0006 4156     		pushq	%r14
 2411              		.cfi_def_cfa_offset 24
 2412              		.cfi_offset 14, -24
 2413 0008 4155     		pushq	%r13
 2414              		.cfi_def_cfa_offset 32
 2415              		.cfi_offset 13, -32
 2416 000a 4154     		pushq	%r12
 2417              		.cfi_def_cfa_offset 40
 2418              		.cfi_offset 12, -40
 2419 000c 4989FC   		movq	%rdi, %r12
 2420 000f 55       		pushq	%rbp
 2421              		.cfi_def_cfa_offset 48
 2422              		.cfi_offset 6, -48
 2423 0010 53       		pushq	%rbx
 2424              		.cfi_def_cfa_offset 56
 2425              		.cfi_offset 3, -56
 2426 0011 4883EC38 		subq	$56, %rsp
 2427              		.cfi_def_cfa_offset 112
 921:fltk-1.3.4-1/jpeg/jquant2.c ****   register JSAMPROW inptr, outptr;
 2428              		.loc 1 921 10 view .LVU877
 2429 0015 488B8790 		movq	656(%rdi), %rax
 2429      020000
 927:fltk-1.3.4-1/jpeg/jquant2.c **** 
 2430              		.loc 1 927 14 view .LVU878
 2431 001c 8BBF8800 		movl	136(%rdi), %edi
 2431      0000
 2432              	.LVL318:
 921:fltk-1.3.4-1/jpeg/jquant2.c ****   register JSAMPROW inptr, outptr;
 2433              		.loc 1 921 10 view .LVU879
 2434 0022 4C8B7030 		movq	48(%rax), %r14
 2435              	.LVL319:
 922:fltk-1.3.4-1/jpeg/jquant2.c ****   register histptr cachep;
 2436              		.loc 1 922 3 is_stmt 1 view .LVU880
 923:fltk-1.3.4-1/jpeg/jquant2.c ****   register int c0, c1, c2;
 2437              		.loc 1 923 3 view .LVU881
 924:fltk-1.3.4-1/jpeg/jquant2.c ****   int row;
 2438              		.loc 1 924 3 view .LVU882
 925:fltk-1.3.4-1/jpeg/jquant2.c ****   JDIMENSION col;
 2439              		.loc 1 925 3 view .LVU883
 926:fltk-1.3.4-1/jpeg/jquant2.c ****   JDIMENSION width = cinfo->output_width;
 2440              		.loc 1 926 3 view .LVU884
 927:fltk-1.3.4-1/jpeg/jquant2.c **** 
 2441              		.loc 1 927 3 view .LVU885
 927:fltk-1.3.4-1/jpeg/jquant2.c **** 
 2442              		.loc 1 927 14 is_stmt 0 view .LVU886
 2443 0026 897C241C 		movl	%edi, 28(%rsp)
 2444              	.LVL320:
 929:fltk-1.3.4-1/jpeg/jquant2.c ****     inptr = input_buf[row];
 2445              		.loc 1 929 3 is_stmt 1 view .LVU887
 929:fltk-1.3.4-1/jpeg/jquant2.c ****     inptr = input_buf[row];
 2446              		.loc 1 929 17 view .LVU888
 929:fltk-1.3.4-1/jpeg/jquant2.c ****     inptr = input_buf[row];
 2447              		.loc 1 929 3 is_stmt 0 view .LVU889
 2448 002a 85C9     		testl	%ecx, %ecx
 2449 002c 0F8EE400 		jle	.L184
 2449      0000
 2450 0032 8D41FF   		leal	-1(%rcx), %eax
 2451 0035 48897424 		movq	%rsi, 8(%rsp)
 2451      08
 2452 003a 4D89F5   		movq	%r14, %r13
 2453 003d 488D44C6 		leaq	8(%rsi,%rax,8), %rax
 2453      08
 2454 0042 48895424 		movq	%rdx, 16(%rsp)
 2454      10
 2455 0047 48894424 		movq	%rax, 32(%rsp)
 2455      20
 2456 004c 8D47FF   		leal	-1(%rdi), %eax
 2457 004f 488D4440 		leaq	3(%rax,%rax,2), %rax
 2457      03
 2458 0054 48894424 		movq	%rax, 40(%rsp)
 2458      28
 2459              	.LVL321:
 2460 0059 0F1F8000 		.p2align 4,,10
 2460      000000
 2461              		.p2align 3
 2462              	.L187:
 930:fltk-1.3.4-1/jpeg/jquant2.c ****     outptr = output_buf[row];
 2463              		.loc 1 930 5 is_stmt 1 view .LVU890
 930:fltk-1.3.4-1/jpeg/jquant2.c ****     outptr = output_buf[row];
 2464              		.loc 1 930 11 is_stmt 0 view .LVU891
 2465 0060 488B4424 		movq	8(%rsp), %rax
 2465      08
 2466 0065 4C8B30   		movq	(%rax), %r14
 2467              	.LVL322:
 931:fltk-1.3.4-1/jpeg/jquant2.c ****     for (col = width; col > 0; col--) {
 2468              		.loc 1 931 5 is_stmt 1 view .LVU892
 931:fltk-1.3.4-1/jpeg/jquant2.c ****     for (col = width; col > 0; col--) {
 2469              		.loc 1 931 12 is_stmt 0 view .LVU893
 2470 0068 488B4424 		movq	16(%rsp), %rax
 2470      10
 2471 006d 488B28   		movq	(%rax), %rbp
 2472              	.LVL323:
 932:fltk-1.3.4-1/jpeg/jquant2.c ****       /* get pixel value and index into the cache */
 2473              		.loc 1 932 5 is_stmt 1 view .LVU894
 932:fltk-1.3.4-1/jpeg/jquant2.c ****       /* get pixel value and index into the cache */
 2474              		.loc 1 932 23 view .LVU895
 2475 0070 488B4424 		movq	40(%rsp), %rax
 2475      28
 2476 0075 4D8D3C06 		leaq	(%r14,%rax), %r15
 932:fltk-1.3.4-1/jpeg/jquant2.c ****       /* get pixel value and index into the cache */
 2477              		.loc 1 932 5 is_stmt 0 view .LVU896
 2478 0079 8B44241C 		movl	28(%rsp), %eax
 2479 007d 85C0     		testl	%eax, %eax
 2480 007f 7516     		jne	.L190
 2481 0081 EB77     		jmp	.L191
 2482              	.LVL324:
 2483              		.p2align 4,,10
 2484 0083 0F1F4400 		.p2align 3
 2484      00
 2485              	.L189:
 943:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 2486              		.loc 1 943 7 is_stmt 1 discriminator 2 view .LVU897
 943:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 2487              		.loc 1 943 14 is_stmt 0 discriminator 2 view .LVU898
 2488 0088 4883C501 		addq	$1, %rbp
 2489              	.LVL325:
 943:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 2490              		.loc 1 943 19 discriminator 2 view .LVU899
 2491 008c 83E801   		subl	$1, %eax
 2492 008f 8845FF   		movb	%al, -1(%rbp)
 2493              	.LVL326:
 932:fltk-1.3.4-1/jpeg/jquant2.c ****       /* get pixel value and index into the cache */
 2494              		.loc 1 932 32 is_stmt 1 discriminator 2 view .LVU900
 932:fltk-1.3.4-1/jpeg/jquant2.c ****       /* get pixel value and index into the cache */
 2495              		.loc 1 932 23 discriminator 2 view .LVU901
 932:fltk-1.3.4-1/jpeg/jquant2.c ****       /* get pixel value and index into the cache */
 2496              		.loc 1 932 5 is_stmt 0 discriminator 2 view .LVU902
 2497 0092 4D39FE   		cmpq	%r15, %r14
 2498 0095 7463     		je	.L191
 2499              	.LVL327:
 2500              	.L190:
 934:fltk-1.3.4-1/jpeg/jquant2.c ****       c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 2501              		.loc 1 934 7 is_stmt 1 view .LVU903
 934:fltk-1.3.4-1/jpeg/jquant2.c ****       c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 2502              		.loc 1 934 33 is_stmt 0 view .LVU904
 2503 0097 410FB636 		movzbl	(%r14), %esi
 935:fltk-1.3.4-1/jpeg/jquant2.c ****       c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 2504              		.loc 1 935 33 view .LVU905
 2505 009b 410FB656 		movzbl	1(%r14), %edx
 2505      01
 2506 00a0 4983C603 		addq	$3, %r14
 2507              	.LVL328:
 936:fltk-1.3.4-1/jpeg/jquant2.c ****       cachep = & histogram[c0][c1][c2];
 2508              		.loc 1 936 33 view .LVU906
 2509 00a4 410FB646 		movzbl	-1(%r14), %eax
 2509      FF
 935:fltk-1.3.4-1/jpeg/jquant2.c ****       c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 2510              		.loc 1 935 33 view .LVU907
 2511 00a9 C0EA02   		shrb	$2, %dl
 934:fltk-1.3.4-1/jpeg/jquant2.c ****       c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 2512              		.loc 1 934 33 view .LVU908
 2513 00ac 40C0EE03 		shrb	$3, %sil
 2514              	.LVL329:
 935:fltk-1.3.4-1/jpeg/jquant2.c ****       c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 2515              		.loc 1 935 7 is_stmt 1 view .LVU909
 936:fltk-1.3.4-1/jpeg/jquant2.c ****       cachep = & histogram[c0][c1][c2];
 2516              		.loc 1 936 7 view .LVU910
 936:fltk-1.3.4-1/jpeg/jquant2.c ****       cachep = & histogram[c0][c1][c2];
 2517              		.loc 1 936 33 is_stmt 0 view .LVU911
 2518 00b0 C0E803   		shrb	$3, %al
 937:fltk-1.3.4-1/jpeg/jquant2.c ****       /* If we have not seen this color before, find nearest colormap entry */
 2519              		.loc 1 937 31 view .LVU912
 2520 00b3 0FB6CA   		movzbl	%dl, %ecx
 937:fltk-1.3.4-1/jpeg/jquant2.c ****       /* If we have not seen this color before, find nearest colormap entry */
 2521              		.loc 1 937 27 view .LVU913
 2522 00b6 400FB6FE 		movzbl	%sil, %edi
 936:fltk-1.3.4-1/jpeg/jquant2.c ****       cachep = & histogram[c0][c1][c2];
 2523              		.loc 1 936 10 view .LVU914
 2524 00ba 440FB6C0 		movzbl	%al, %r8d
 2525              	.LVL330:
 937:fltk-1.3.4-1/jpeg/jquant2.c ****       /* If we have not seen this color before, find nearest colormap entry */
 2526              		.loc 1 937 7 is_stmt 1 view .LVU915
 940:fltk-1.3.4-1/jpeg/jquant2.c **** 	fill_inverse_cmap(cinfo, c0,c1,c2);
 2527              		.loc 1 940 7 view .LVU916
 937:fltk-1.3.4-1/jpeg/jquant2.c ****       /* If we have not seen this color before, find nearest colormap entry */
 2528              		.loc 1 937 31 is_stmt 0 view .LVU917
 2529 00be 48C1E106 		salq	$6, %rcx
 2530 00c2 0FB6C0   		movzbl	%al, %eax
 2531 00c5 488D1C41 		leaq	(%rcx,%rax,2), %rbx
 2532 00c9 49035CFD 		addq	0(%r13,%rdi,8), %rbx
 2532      00
 940:fltk-1.3.4-1/jpeg/jquant2.c **** 	fill_inverse_cmap(cinfo, c0,c1,c2);
 2533              		.loc 1 940 11 view .LVU918
 2534 00ce 0FB703   		movzwl	(%rbx), %eax
 940:fltk-1.3.4-1/jpeg/jquant2.c **** 	fill_inverse_cmap(cinfo, c0,c1,c2);
 2535              		.loc 1 940 10 view .LVU919
 2536 00d1 6685C0   		testw	%ax, %ax
 2537 00d4 75B2     		jne	.L189
 941:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Now emit the colormap index for this cell */
 2538              		.loc 1 941 2 is_stmt 1 view .LVU920
 935:fltk-1.3.4-1/jpeg/jquant2.c ****       c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 2539              		.loc 1 935 10 is_stmt 0 view .LVU921
 2540 00d6 0FB6D2   		movzbl	%dl, %edx
 2541              	.LVL331:
 934:fltk-1.3.4-1/jpeg/jquant2.c ****       c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 2542              		.loc 1 934 10 view .LVU922
 2543 00d9 400FB6F6 		movzbl	%sil, %esi
 2544              	.LVL332:
 941:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Now emit the colormap index for this cell */
 2545              		.loc 1 941 2 view .LVU923
 2546 00dd 4489C1   		movl	%r8d, %ecx
 2547 00e0 4C89E7   		movq	%r12, %rdi
 2548              	.LVL333:
 941:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Now emit the colormap index for this cell */
 2549              		.loc 1 941 2 view .LVU924
 2550 00e3 E8000000 		call	fill_inverse_cmap
 2550      00
 2551              	.LVL334:
 941:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Now emit the colormap index for this cell */
 2552              		.loc 1 941 2 view .LVU925
 2553 00e8 0FB703   		movzwl	(%rbx), %eax
 943:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 2554              		.loc 1 943 7 is_stmt 1 view .LVU926
 943:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 2555              		.loc 1 943 14 is_stmt 0 view .LVU927
 2556 00eb 4883C501 		addq	$1, %rbp
 2557              	.LVL335:
 943:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 2558              		.loc 1 943 19 view .LVU928
 2559 00ef 83E801   		subl	$1, %eax
 2560 00f2 8845FF   		movb	%al, -1(%rbp)
 932:fltk-1.3.4-1/jpeg/jquant2.c ****       /* get pixel value and index into the cache */
 2561              		.loc 1 932 32 is_stmt 1 view .LVU929
 932:fltk-1.3.4-1/jpeg/jquant2.c ****       /* get pixel value and index into the cache */
 2562              		.loc 1 932 23 view .LVU930
 932:fltk-1.3.4-1/jpeg/jquant2.c ****       /* get pixel value and index into the cache */
 2563              		.loc 1 932 5 is_stmt 0 view .LVU931
 2564 00f5 4D39FE   		cmpq	%r15, %r14
 2565 00f8 759D     		jne	.L190
 2566              	.L191:
 929:fltk-1.3.4-1/jpeg/jquant2.c ****     inptr = input_buf[row];
 2567              		.loc 1 929 33 is_stmt 1 view .LVU932
 929:fltk-1.3.4-1/jpeg/jquant2.c ****     inptr = input_buf[row];
 2568              		.loc 1 929 17 view .LVU933
 2569 00fa 48834424 		addq	$8, 8(%rsp)
 2569      0808
 2570 0100 488B4424 		movq	8(%rsp), %rax
 2570      08
 2571 0105 48834424 		addq	$8, 16(%rsp)
 2571      1008
 929:fltk-1.3.4-1/jpeg/jquant2.c ****     inptr = input_buf[row];
 2572              		.loc 1 929 3 is_stmt 0 view .LVU934
 2573 010b 48394424 		cmpq	%rax, 32(%rsp)
 2573      20
 2574 0110 0F854AFF 		jne	.L187
 2574      FFFF
 2575              	.LVL336:
 2576              	.L184:
 946:fltk-1.3.4-1/jpeg/jquant2.c **** 
 2577              		.loc 1 946 1 view .LVU935
 2578 0116 4883C438 		addq	$56, %rsp
 2579              		.cfi_def_cfa_offset 56
 2580 011a 5B       		popq	%rbx
 2581              		.cfi_def_cfa_offset 48
 2582 011b 5D       		popq	%rbp
 2583              		.cfi_def_cfa_offset 40
 2584 011c 415C     		popq	%r12
 2585              		.cfi_def_cfa_offset 32
 2586              	.LVL337:
 946:fltk-1.3.4-1/jpeg/jquant2.c **** 
 2587              		.loc 1 946 1 view .LVU936
 2588 011e 415D     		popq	%r13
 2589              		.cfi_def_cfa_offset 24
 2590 0120 415E     		popq	%r14
 2591              		.cfi_def_cfa_offset 16
 2592 0122 415F     		popq	%r15
 2593              		.cfi_def_cfa_offset 8
 2594 0124 C3       		ret
 2595              		.cfi_endproc
 2596              	.LFE61:
 2598              		.section	.text.pass2_fs_dither,"ax",@progbits
 2599              		.p2align 4
 2601              	pass2_fs_dither:
 2602              	.LVL338:
 2603              	.LFB62:
 953:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 2604              		.loc 1 953 1 is_stmt 1 view -0
 2605              		.cfi_startproc
 953:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 2606              		.loc 1 953 1 is_stmt 0 view .LVU938
 2607 0000 F30F1EFA 		endbr64
 954:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram = cquantize->histogram;
 2608              		.loc 1 954 3 is_stmt 1 view .LVU939
 953:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 2609              		.loc 1 953 1 is_stmt 0 view .LVU940
 2610 0004 4157     		pushq	%r15
 2611              		.cfi_def_cfa_offset 16
 2612              		.cfi_offset 15, -16
 2613 0006 4889F8   		movq	%rdi, %rax
 2614 0009 4156     		pushq	%r14
 2615              		.cfi_def_cfa_offset 24
 2616              		.cfi_offset 14, -24
 2617 000b 4155     		pushq	%r13
 2618              		.cfi_def_cfa_offset 32
 2619              		.cfi_offset 13, -32
 2620 000d 4154     		pushq	%r12
 2621              		.cfi_def_cfa_offset 40
 2622              		.cfi_offset 12, -40
 2623 000f 55       		pushq	%rbp
 2624              		.cfi_def_cfa_offset 48
 2625              		.cfi_offset 6, -48
 2626 0010 53       		pushq	%rbx
 2627              		.cfi_def_cfa_offset 56
 2628              		.cfi_offset 3, -56
 2629 0011 4881ECD8 		subq	$216, %rsp
 2629      000000
 2630              		.cfi_def_cfa_offset 272
 954:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram = cquantize->histogram;
 2631              		.loc 1 954 20 view .LVU941
 2632 0018 488B9F90 		movq	656(%rdi), %rbx
 2632      020000
 968:fltk-1.3.4-1/jpeg/jquant2.c ****   int *error_limit = cquantize->error_limiter;
 2633              		.loc 1 968 12 view .LVU942
 2634 001f 4C8B90B8 		movq	440(%rax), %r10
 2634      010000
 953:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 2635              		.loc 1 953 1 view .LVU943
 2636 0026 4889BC24 		movq	%rdi, 136(%rsp)
 2636      88000000 
 955:fltk-1.3.4-1/jpeg/jquant2.c ****   register LOCFSERROR cur0, cur1, cur2;	/* current error or pixel value */
 2637              		.loc 1 955 10 view .LVU944
 2638 002e 488B7B30 		movq	48(%rbx), %rdi
 2639              	.LVL339:
 969:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW colormap0 = cinfo->colormap[0];
 2640              		.loc 1 969 8 view .LVU945
 2641 0032 4C8B5B50 		movq	80(%rbx), %r11
 954:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram = cquantize->histogram;
 2642              		.loc 1 954 20 view .LVU946
 2643 0036 48899C24 		movq	%rbx, 144(%rsp)
 2643      90000000 
 2644              	.LVL340:
 955:fltk-1.3.4-1/jpeg/jquant2.c ****   register LOCFSERROR cur0, cur1, cur2;	/* current error or pixel value */
 2645              		.loc 1 955 3 is_stmt 1 view .LVU947
 955:fltk-1.3.4-1/jpeg/jquant2.c ****   register LOCFSERROR cur0, cur1, cur2;	/* current error or pixel value */
 2646              		.loc 1 955 10 is_stmt 0 view .LVU948
 2647 003e 48897C24 		movq	%rdi, 56(%rsp)
 2647      38
 2648              	.LVL341:
 956:fltk-1.3.4-1/jpeg/jquant2.c ****   LOCFSERROR belowerr0, belowerr1, belowerr2; /* error for pixel below cur */
 2649              		.loc 1 956 3 is_stmt 1 view .LVU949
 957:fltk-1.3.4-1/jpeg/jquant2.c ****   LOCFSERROR bpreverr0, bpreverr1, bpreverr2; /* error for below/prev col */
 2650              		.loc 1 957 3 view .LVU950
 958:fltk-1.3.4-1/jpeg/jquant2.c ****   register FSERRPTR errorptr;	/* => fserrors[] at column before current */
 2651              		.loc 1 958 3 view .LVU951
 959:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW inptr;		/* => current input pixel */
 2652              		.loc 1 959 3 view .LVU952
 960:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW outptr;		/* => current output pixel */
 2653              		.loc 1 960 3 view .LVU953
 961:fltk-1.3.4-1/jpeg/jquant2.c ****   histptr cachep;
 2654              		.loc 1 961 3 view .LVU954
 962:fltk-1.3.4-1/jpeg/jquant2.c ****   int dir;			/* +1 or -1 depending on direction */
 2655              		.loc 1 962 3 view .LVU955
 963:fltk-1.3.4-1/jpeg/jquant2.c ****   int dir3;			/* 3*dir, for advancing inptr & errorptr */
 2656              		.loc 1 963 3 view .LVU956
 964:fltk-1.3.4-1/jpeg/jquant2.c ****   int row;
 2657              		.loc 1 964 3 view .LVU957
 965:fltk-1.3.4-1/jpeg/jquant2.c ****   JDIMENSION col;
 2658              		.loc 1 965 3 view .LVU958
 966:fltk-1.3.4-1/jpeg/jquant2.c ****   JDIMENSION width = cinfo->output_width;
 2659              		.loc 1 966 3 view .LVU959
 967:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPLE *range_limit = cinfo->sample_range_limit;
 2660              		.loc 1 967 3 view .LVU960
 967:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPLE *range_limit = cinfo->sample_range_limit;
 2661              		.loc 1 967 14 is_stmt 0 view .LVU961
 2662 0043 8BB88800 		movl	136(%rax), %edi
 2662      0000
 2663              	.LVL342:
 970:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW colormap1 = cinfo->colormap[1];
 2664              		.loc 1 970 29 view .LVU962
 2665 0049 488B80A0 		movq	160(%rax), %rax
 2665      000000
 2666              	.LVL343:
 967:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPLE *range_limit = cinfo->sample_range_limit;
 2667              		.loc 1 967 14 view .LVU963
 2668 0050 89BC24A4 		movl	%edi, 164(%rsp)
 2668      000000
 2669              	.LVL344:
 968:fltk-1.3.4-1/jpeg/jquant2.c ****   int *error_limit = cquantize->error_limiter;
 2670              		.loc 1 968 3 is_stmt 1 view .LVU964
 969:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW colormap0 = cinfo->colormap[0];
 2671              		.loc 1 969 3 view .LVU965
 970:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW colormap1 = cinfo->colormap[1];
 2672              		.loc 1 970 3 view .LVU966
 970:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW colormap1 = cinfo->colormap[1];
 2673              		.loc 1 970 12 is_stmt 0 view .LVU967
 2674 0057 488B18   		movq	(%rax), %rbx
 2675              	.LVL345:
 970:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW colormap1 = cinfo->colormap[1];
 2676              		.loc 1 970 12 view .LVU968
 2677 005a 48895C24 		movq	%rbx, 64(%rsp)
 2677      40
 2678              	.LVL346:
 971:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW colormap2 = cinfo->colormap[2];
 2679              		.loc 1 971 3 is_stmt 1 view .LVU969
 971:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW colormap2 = cinfo->colormap[2];
 2680              		.loc 1 971 12 is_stmt 0 view .LVU970
 2681 005f 488B5808 		movq	8(%rax), %rbx
 2682              	.LVL347:
 972:fltk-1.3.4-1/jpeg/jquant2.c ****   SHIFT_TEMPS
 2683              		.loc 1 972 12 view .LVU971
 2684 0063 488B4010 		movq	16(%rax), %rax
 2685              	.LVL348:
 971:fltk-1.3.4-1/jpeg/jquant2.c ****   JSAMPROW colormap2 = cinfo->colormap[2];
 2686              		.loc 1 971 12 view .LVU972
 2687 0067 48895C24 		movq	%rbx, 72(%rsp)
 2687      48
 2688              	.LVL349:
 972:fltk-1.3.4-1/jpeg/jquant2.c ****   SHIFT_TEMPS
 2689              		.loc 1 972 3 is_stmt 1 view .LVU973
 972:fltk-1.3.4-1/jpeg/jquant2.c ****   SHIFT_TEMPS
 2690              		.loc 1 972 12 is_stmt 0 view .LVU974
 2691 006c 48894424 		movq	%rax, 80(%rsp)
 2691      50
 2692              	.LVL350:
 975:fltk-1.3.4-1/jpeg/jquant2.c ****     inptr = input_buf[row];
 2693              		.loc 1 975 3 is_stmt 1 view .LVU975
 975:fltk-1.3.4-1/jpeg/jquant2.c ****     inptr = input_buf[row];
 2694              		.loc 1 975 17 view .LVU976
 975:fltk-1.3.4-1/jpeg/jquant2.c ****     inptr = input_buf[row];
 2695              		.loc 1 975 3 is_stmt 0 view .LVU977
 2696 0071 85C9     		testl	%ecx, %ecx
 2697 0073 0F8E2B03 		jle	.L197
 2697      0000
 980:fltk-1.3.4-1/jpeg/jquant2.c ****       outptr += width-1;
 2698              		.loc 1 980 26 view .LVU978
 2699 0079 8D047F   		leal	(%rdi,%rdi,2), %eax
 2700              	.LVL351:
 980:fltk-1.3.4-1/jpeg/jquant2.c ****       outptr += width-1;
 2701              		.loc 1 980 26 view .LVU979
 2702 007c 89FB     		movl	%edi, %ebx
 2703              	.LVL352:
 980:fltk-1.3.4-1/jpeg/jquant2.c ****       outptr += width-1;
 2704              		.loc 1 980 26 view .LVU980
 2705 007e 4889B424 		movq	%rsi, 128(%rsp)
 2705      80000000 
 2706 0086 8D78FD   		leal	-3(%rax), %edi
 2707              	.LVL353:
 984:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->on_odd_row = FALSE; /* flip for next time */
 2708              		.loc 1 984 49 view .LVU981
 2709 0089 83C003   		addl	$3, %eax
 2710 008c 48899424 		movq	%rdx, 152(%rsp)
 2710      98000000 
 984:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->on_odd_row = FALSE; /* flip for next time */
 2711              		.loc 1 984 38 view .LVU982
 2712 0094 4801C0   		addq	%rax, %rax
 980:fltk-1.3.4-1/jpeg/jquant2.c ****       outptr += width-1;
 2713              		.loc 1 980 26 view .LVU983
 2714 0097 4889BC24 		movq	%rdi, 184(%rsp)
 2714      B8000000 
 984:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->on_odd_row = FALSE; /* flip for next time */
 2715              		.loc 1 984 38 view .LVU984
 2716 009f 48898424 		movq	%rax, 192(%rsp)
 2716      C0000000 
 2717 00a7 8D41FF   		leal	-1(%rcx), %eax
 2718 00aa 488D44C6 		leaq	8(%rsi,%rax,8), %rax
 2718      08
 2719 00af 48898424 		movq	%rax, 168(%rsp)
 2719      A8000000 
 981:fltk-1.3.4-1/jpeg/jquant2.c ****       dir = -1;
 2720              		.loc 1 981 22 view .LVU985
 2721 00b7 8D43FF   		leal	-1(%rbx), %eax
 2722 00ba 48898424 		movq	%rax, 200(%rsp)
 2722      C8000000 
 2723 00c2 4883C001 		addq	$1, %rax
 2724 00c6 48898424 		movq	%rax, 176(%rsp)
 2724      B0000000 
 2725              	.LVL354:
 2726 00ce 6690     		.p2align 4,,10
 2727              		.p2align 3
 2728              	.L203:
 976:fltk-1.3.4-1/jpeg/jquant2.c ****     outptr = output_buf[row];
 2729              		.loc 1 976 5 is_stmt 1 view .LVU986
 976:fltk-1.3.4-1/jpeg/jquant2.c ****     outptr = output_buf[row];
 2730              		.loc 1 976 11 is_stmt 0 view .LVU987
 2731 00d0 488B8424 		movq	128(%rsp), %rax
 2731      80000000 
 2732 00d8 4C8B30   		movq	(%rax), %r14
 2733              	.LVL355:
 977:fltk-1.3.4-1/jpeg/jquant2.c ****     if (cquantize->on_odd_row) {
 2734              		.loc 1 977 5 is_stmt 1 view .LVU988
 977:fltk-1.3.4-1/jpeg/jquant2.c ****     if (cquantize->on_odd_row) {
 2735              		.loc 1 977 12 is_stmt 0 view .LVU989
 2736 00db 488B8424 		movq	152(%rsp), %rax
 2736      98000000 
 2737 00e3 4C8B00   		movq	(%rax), %r8
 2738              	.LVL356:
 978:fltk-1.3.4-1/jpeg/jquant2.c ****       /* work right to left in this row */
 2739              		.loc 1 978 5 is_stmt 1 view .LVU990
 2740 00e6 488B8424 		movq	144(%rsp), %rax
 2740      90000000 
 2741 00ee 488B5840 		movq	64(%rax), %rbx
 978:fltk-1.3.4-1/jpeg/jquant2.c ****       /* work right to left in this row */
 2742              		.loc 1 978 8 is_stmt 0 view .LVU991
 2743 00f2 8B4048   		movl	72(%rax), %eax
 2744 00f5 48895C24 		movq	%rbx, 120(%rsp)
 2744      78
 2745 00fa 85C0     		testl	%eax, %eax
 2746 00fc 0F84BE02 		je	.L205
 2746      0000
 980:fltk-1.3.4-1/jpeg/jquant2.c ****       outptr += width-1;
 2747              		.loc 1 980 7 is_stmt 1 view .LVU992
 984:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->on_odd_row = FALSE; /* flip for next time */
 2748              		.loc 1 984 16 is_stmt 0 view .LVU993
 2749 0102 488B8424 		movq	192(%rsp), %rax
 2749      C0000000 
 983:fltk-1.3.4-1/jpeg/jquant2.c ****       errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 2750              		.loc 1 983 12 view .LVU994
 2751 010a B9FDFFFF 		movl	$-3, %ecx
 2751      FF
 982:fltk-1.3.4-1/jpeg/jquant2.c ****       dir3 = -3;
 2752              		.loc 1 982 11 view .LVU995
 2753 010f BAFFFFFF 		movl	$-1, %edx
 2753      FF
 980:fltk-1.3.4-1/jpeg/jquant2.c ****       outptr += width-1;
 2754              		.loc 1 980 13 view .LVU996
 2755 0114 4C03B424 		addq	184(%rsp), %r14
 2755      B8000000 
 2756              	.LVL357:
 981:fltk-1.3.4-1/jpeg/jquant2.c ****       dir = -1;
 2757              		.loc 1 981 7 is_stmt 1 view .LVU997
 981:fltk-1.3.4-1/jpeg/jquant2.c ****       dir = -1;
 2758              		.loc 1 981 14 is_stmt 0 view .LVU998
 2759 011c 4C038424 		addq	200(%rsp), %r8
 2759      C8000000 
 2760              	.LVL358:
 982:fltk-1.3.4-1/jpeg/jquant2.c ****       dir3 = -3;
 2761              		.loc 1 982 7 is_stmt 1 view .LVU999
 983:fltk-1.3.4-1/jpeg/jquant2.c ****       errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 2762              		.loc 1 983 7 view .LVU1000
 984:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->on_odd_row = FALSE; /* flip for next time */
 2763              		.loc 1 984 7 view .LVU1001
 984:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->on_odd_row = FALSE; /* flip for next time */
 2764              		.loc 1 984 16 is_stmt 0 view .LVU1002
 2765 0124 4801C3   		addq	%rax, %rbx
 985:fltk-1.3.4-1/jpeg/jquant2.c ****     } else {
 2766              		.loc 1 985 29 view .LVU1003
 2767 0127 31C0     		xorl	%eax, %eax
 984:fltk-1.3.4-1/jpeg/jquant2.c ****       cquantize->on_odd_row = FALSE; /* flip for next time */
 2768              		.loc 1 984 16 view .LVU1004
 2769 0129 48895C24 		movq	%rbx, 120(%rsp)
 2769      78
 2770              	.LVL359:
 985:fltk-1.3.4-1/jpeg/jquant2.c ****     } else {
 2771              		.loc 1 985 7 is_stmt 1 view .LVU1005
 2772              	.L199:
 985:fltk-1.3.4-1/jpeg/jquant2.c ****     } else {
 2773              		.loc 1 985 7 is_stmt 0 view .LVU1006
 2774 012e 488B9C24 		movq	144(%rsp), %rbx
 2774      90000000 
 2775 0136 894348   		movl	%eax, 72(%rbx)
 2776              	.LVL360:
 994:fltk-1.3.4-1/jpeg/jquant2.c ****     /* and no error propagated to row below yet */
 2777              		.loc 1 994 5 is_stmt 1 view .LVU1007
 996:fltk-1.3.4-1/jpeg/jquant2.c ****     bpreverr0 = bpreverr1 = bpreverr2 = 0;
 2778              		.loc 1 996 5 view .LVU1008
 997:fltk-1.3.4-1/jpeg/jquant2.c **** 
 2779              		.loc 1 997 5 view .LVU1009
 999:fltk-1.3.4-1/jpeg/jquant2.c ****       /* curN holds the error propagated from the previous pixel on the
 2780              		.loc 1 999 5 view .LVU1010
 999:fltk-1.3.4-1/jpeg/jquant2.c ****       /* curN holds the error propagated from the previous pixel on the
 2781              		.loc 1 999 23 view .LVU1011
 999:fltk-1.3.4-1/jpeg/jquant2.c ****       /* curN holds the error propagated from the previous pixel on the
 2782              		.loc 1 999 5 is_stmt 0 view .LVU1012
 2783 0139 8B8424A4 		movl	164(%rsp), %eax
 2783      000000
 2784 0140 85C0     		testl	%eax, %eax
 2785 0142 0F849002 		je	.L206
 2785      0000
1008:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 2786              		.loc 1 1008 14 view .LVU1013
 2787 0148 4863D9   		movslq	%ecx, %rbx
1010:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Limit the error using transfer function set by init_error_limit.
 2788              		.loc 1 1010 14 view .LVU1014
 2789 014b 898424A0 		movl	%eax, 160(%rsp)
 2789      000000
 994:fltk-1.3.4-1/jpeg/jquant2.c ****     /* and no error propagated to row below yet */
 2790              		.loc 1 994 17 view .LVU1015
 2791 0152 31C9     		xorl	%ecx, %ecx
 2792              	.LVL361:
 994:fltk-1.3.4-1/jpeg/jquant2.c ****     /* and no error propagated to row below yet */
 2793              		.loc 1 994 24 view .LVU1016
 2794 0154 31C0     		xorl	%eax, %eax
1008:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 2795              		.loc 1 1008 14 view .LVU1017
 2796 0156 4C8D0C1B 		leaq	(%rbx,%rbx), %r9
 2797 015a 48895C24 		movq	%rbx, 24(%rsp)
 2797      18
1009:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 2798              		.loc 1 1009 14 view .LVU1018
 2799 015f 498D5902 		leaq	2(%r9), %rbx
 2800              	.LVL362:
 997:fltk-1.3.4-1/jpeg/jquant2.c **** 
 2801              		.loc 1 997 39 view .LVU1019
 2802 0163 C7442408 		movl	$0, 8(%rsp)
 2802      00000000 
1009:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 2803              		.loc 1 1009 14 view .LVU1020
 2804 016b 48895C24 		movq	%rbx, 32(%rsp)
 2804      20
1010:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Limit the error using transfer function set by init_error_limit.
 2805              		.loc 1 1010 14 view .LVU1021
 2806 0170 498D5904 		leaq	4(%r9), %rbx
 2807 0174 48895C24 		movq	%rbx, 40(%rsp)
 2807      28
 2808 0179 4863DA   		movslq	%edx, %rbx
 994:fltk-1.3.4-1/jpeg/jquant2.c ****     /* and no error propagated to row below yet */
 2809              		.loc 1 994 10 view .LVU1022
 2810 017c 31D2     		xorl	%edx, %edx
 2811              	.LVL363:
 994:fltk-1.3.4-1/jpeg/jquant2.c ****     /* and no error propagated to row below yet */
 2812              		.loc 1 994 10 view .LVU1023
 2813 017e 48895C24 		movq	%rbx, 48(%rsp)
 2813      30
 2814 0183 488B5C24 		movq	120(%rsp), %rbx
 2814      78
 2815              	.LVL364:
 997:fltk-1.3.4-1/jpeg/jquant2.c **** 
 2816              		.loc 1 997 27 view .LVU1024
 2817 0188 C7442404 		movl	$0, 4(%rsp)
 2817      00000000 
 997:fltk-1.3.4-1/jpeg/jquant2.c **** 
 2818              		.loc 1 997 15 view .LVU1025
 2819 0190 C7042400 		movl	$0, (%rsp)
 2819      000000
 996:fltk-1.3.4-1/jpeg/jquant2.c ****     bpreverr0 = bpreverr1 = bpreverr2 = 0;
 2820              		.loc 1 996 39 view .LVU1026
 2821 0197 C7442414 		movl	$0, 20(%rsp)
 2821      00000000 
 996:fltk-1.3.4-1/jpeg/jquant2.c ****     bpreverr0 = bpreverr1 = bpreverr2 = 0;
 2822              		.loc 1 996 27 view .LVU1027
 2823 019f C7442410 		movl	$0, 16(%rsp)
 2823      00000000 
 996:fltk-1.3.4-1/jpeg/jquant2.c ****     bpreverr0 = bpreverr1 = bpreverr2 = 0;
 2824              		.loc 1 996 15 view .LVU1028
 2825 01a7 C744240C 		movl	$0, 12(%rsp)
 2825      00000000 
 2826 01af E9BA0000 		jmp	.L202
 2826      00
 2827              	.LVL365:
 2828              		.p2align 4,,10
 2829 01b4 0F1F4000 		.p2align 3
 2830              	.L201:
 2831              	.LBB45:
1034:fltk-1.3.4-1/jpeg/jquant2.c **** 	*outptr = (JSAMPLE) pixcode;
 2832              		.loc 1 1034 9 is_stmt 1 discriminator 2 view .LVU1029
1034:fltk-1.3.4-1/jpeg/jquant2.c **** 	*outptr = (JSAMPLE) pixcode;
 2833              		.loc 1 1034 22 is_stmt 0 discriminator 2 view .LVU1030
 2834 01b8 83E801   		subl	$1, %eax
 2835              	.LVL366:
1035:fltk-1.3.4-1/jpeg/jquant2.c **** 	/* Compute representation error for this pixel */
 2836              		.loc 1 1035 2 is_stmt 1 discriminator 2 view .LVU1031
1037:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 2837              		.loc 1 1037 10 is_stmt 0 discriminator 2 view .LVU1032
 2838 01bb 488B4C24 		movq	64(%rsp), %rcx
 2838      40
1038:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 2839              		.loc 1 1038 10 discriminator 2 view .LVU1033
 2840 01c0 488B7C24 		movq	72(%rsp), %rdi
 2840      48
 2841              	.LBE45:
 2842              	.LBB46:
1058:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 += delta;		/* form error * 5 */
 2843              		.loc 1 1058 37 discriminator 2 view .LVU1034
 2844 01c5 0FB77424 		movzwl	4(%rsp), %esi
 2844      04
 2845              	.LBE46:
1076:fltk-1.3.4-1/jpeg/jquant2.c ****       outptr += dir;
 2846              		.loc 1 1076 13 discriminator 2 view .LVU1035
 2847 01ca 4C037424 		addq	24(%rsp), %r14
 2847      18
 2848              	.LVL367:
 2849              	.LBB47:
1035:fltk-1.3.4-1/jpeg/jquant2.c **** 	/* Compute representation error for this pixel */
 2850              		.loc 1 1035 12 discriminator 2 view .LVU1036
 2851 01cf 418800   		movb	%al, (%r8)
1037:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 2852              		.loc 1 1037 2 is_stmt 1 discriminator 2 view .LVU1037
1037:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 2853              		.loc 1 1037 10 is_stmt 0 discriminator 2 view .LVU1038
 2854 01d2 4898     		cltq
1037:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 2855              		.loc 1 1037 10 discriminator 2 view .LVU1039
 2856 01d4 0FB61401 		movzbl	(%rcx,%rax), %edx
1039:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 2857              		.loc 1 1039 10 discriminator 2 view .LVU1040
 2858 01d8 488B4C24 		movq	80(%rsp), %rcx
 2858      50
 2859              	.LBE47:
1077:fltk-1.3.4-1/jpeg/jquant2.c ****       errorptr += dir3;		/* advance errorptr to current column */
 2860              		.loc 1 1077 14 discriminator 2 view .LVU1041
 2861 01dd 4C034424 		addq	48(%rsp), %r8
 2861      30
 2862              	.LBB48:
1037:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 2863              		.loc 1 1037 7 discriminator 2 view .LVU1042
 2864 01e2 4129D5   		subl	%edx, %r13d
 2865              	.LVL368:
1038:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 2866              		.loc 1 1038 2 is_stmt 1 discriminator 2 view .LVU1043
1038:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 2867              		.loc 1 1038 10 is_stmt 0 discriminator 2 view .LVU1044
 2868 01e5 0FB61407 		movzbl	(%rdi,%rax), %edx
1039:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 2869              		.loc 1 1039 10 discriminator 2 view .LVU1045
 2870 01e9 0FB60401 		movzbl	(%rcx,%rax), %eax
 2871              	.LVL369:
1039:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 2872              		.loc 1 1039 10 discriminator 2 view .LVU1046
 2873              	.LBE48:
 2874              	.LBB49:
1050:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur0 += delta;		/* form error * 5 */
 2875              		.loc 1 1050 37 discriminator 2 view .LVU1047
 2876 01ed 0FB70C24 		movzwl	(%rsp), %ecx
1052:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr0 = bnexterr;
 2877              		.loc 1 1052 12 discriminator 2 view .LVU1048
 2878 01f1 8B7C240C 		movl	12(%rsp), %edi
 2879              	.LBE49:
 2880              	.LBB50:
1038:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 2881              		.loc 1 1038 7 discriminator 2 view .LVU1049
 2882 01f5 4129D4   		subl	%edx, %r12d
 2883              	.LVL370:
1039:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 2884              		.loc 1 1039 2 is_stmt 1 discriminator 2 view .LVU1050
 2885              	.LBE50:
 2886              	.LBB51:
1048:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur0 += delta;		/* form error * 3 */
 2887              		.loc 1 1048 8 is_stmt 0 discriminator 2 view .LVU1051
 2888 01f8 438D542D 		leal	(%r13,%r13), %edx
 2888      00
 2889              	.LBE51:
 2890              	.LBB52:
1039:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 2891              		.loc 1 1039 7 discriminator 2 view .LVU1052
 2892 01fd 29C5     		subl	%eax, %ebp
 2893              	.LVL371:
1039:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 2894              		.loc 1 1039 7 discriminator 2 view .LVU1053
 2895              	.LBE52:
 2896              	.LBB53:
1045:fltk-1.3.4-1/jpeg/jquant2.c **** 
 2897              		.loc 1 1045 9 is_stmt 1 discriminator 2 view .LVU1054
1047:fltk-1.3.4-1/jpeg/jquant2.c **** 	delta = cur0 * 2;
 2898              		.loc 1 1047 2 discriminator 2 view .LVU1055
1048:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur0 += delta;		/* form error * 3 */
 2899              		.loc 1 1048 2 discriminator 2 view .LVU1056
1049:fltk-1.3.4-1/jpeg/jquant2.c **** 	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 2900              		.loc 1 1049 2 discriminator 2 view .LVU1057
1049:fltk-1.3.4-1/jpeg/jquant2.c **** 	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 2901              		.loc 1 1049 7 is_stmt 0 discriminator 2 view .LVU1058
 2902 01ff 418D4415 		leal	0(%r13,%rdx), %eax
 2902      00
 2903              	.LVL372:
1050:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur0 += delta;		/* form error * 5 */
 2904              		.loc 1 1050 2 is_stmt 1 discriminator 2 view .LVU1059
1050:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur0 += delta;		/* form error * 5 */
 2905              		.loc 1 1050 37 is_stmt 0 discriminator 2 view .LVU1060
 2906 0204 01C1     		addl	%eax, %ecx
1051:fltk-1.3.4-1/jpeg/jquant2.c **** 	bpreverr0 = belowerr0 + cur0;
 2907              		.loc 1 1051 7 discriminator 2 view .LVU1061
 2908 0206 01D0     		addl	%edx, %eax
 2909              	.LVL373:
1052:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr0 = bnexterr;
 2910              		.loc 1 1052 12 discriminator 2 view .LVU1062
 2911 0208 01C7     		addl	%eax, %edi
1050:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur0 += delta;		/* form error * 5 */
 2912              		.loc 1 1050 37 discriminator 2 view .LVU1063
 2913 020a 66890B   		movw	%cx, (%rbx)
1051:fltk-1.3.4-1/jpeg/jquant2.c **** 	bpreverr0 = belowerr0 + cur0;
 2914              		.loc 1 1051 2 is_stmt 1 discriminator 2 view .LVU1064
 2915              	.LVL374:
1052:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr0 = bnexterr;
 2916              		.loc 1 1052 2 discriminator 2 view .LVU1065
1056:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 += delta;		/* form error * 3 */
 2917              		.loc 1 1056 8 is_stmt 0 discriminator 2 view .LVU1066
 2918 020d 438D0C24 		leal	(%r12,%r12), %ecx
1054:fltk-1.3.4-1/jpeg/jquant2.c **** 	bnexterr = cur1;	/* Process component 1 */
 2919              		.loc 1 1054 7 discriminator 2 view .LVU1067
 2920 0211 01C2     		addl	%eax, %edx
 2921              	.LVL375:
1052:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr0 = bnexterr;
 2922              		.loc 1 1052 12 discriminator 2 view .LVU1068
 2923 0213 893C24   		movl	%edi, (%rsp)
 2924              	.LVL376:
1053:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur0 += delta;		/* form error * 7 */
 2925              		.loc 1 1053 2 is_stmt 1 discriminator 2 view .LVU1069
1054:fltk-1.3.4-1/jpeg/jquant2.c **** 	bnexterr = cur1;	/* Process component 1 */
 2926              		.loc 1 1054 2 discriminator 2 view .LVU1070
1055:fltk-1.3.4-1/jpeg/jquant2.c **** 	delta = cur1 * 2;
 2927              		.loc 1 1055 2 discriminator 2 view .LVU1071
1056:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 += delta;		/* form error * 3 */
 2928              		.loc 1 1056 2 discriminator 2 view .LVU1072
1057:fltk-1.3.4-1/jpeg/jquant2.c **** 	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 2929              		.loc 1 1057 2 discriminator 2 view .LVU1073
1057:fltk-1.3.4-1/jpeg/jquant2.c **** 	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 2930              		.loc 1 1057 7 is_stmt 0 discriminator 2 view .LVU1074
 2931 0216 418D040C 		leal	(%r12,%rcx), %eax
 2932              	.LVL377:
1058:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 += delta;		/* form error * 5 */
 2933              		.loc 1 1058 2 is_stmt 1 discriminator 2 view .LVU1075
1060:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr1 = bnexterr;
 2934              		.loc 1 1060 12 is_stmt 0 discriminator 2 view .LVU1076
 2935 021a 8B7C2410 		movl	16(%rsp), %edi
 2936              	.LVL378:
1058:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 += delta;		/* form error * 5 */
 2937              		.loc 1 1058 37 discriminator 2 view .LVU1077
 2938 021e 01C6     		addl	%eax, %esi
1059:fltk-1.3.4-1/jpeg/jquant2.c **** 	bpreverr1 = belowerr1 + cur1;
 2939              		.loc 1 1059 7 discriminator 2 view .LVU1078
 2940 0220 01C8     		addl	%ecx, %eax
 2941              	.LVL379:
1060:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr1 = bnexterr;
 2942              		.loc 1 1060 12 discriminator 2 view .LVU1079
 2943 0222 01C7     		addl	%eax, %edi
1062:fltk-1.3.4-1/jpeg/jquant2.c **** 	bnexterr = cur2;	/* Process component 2 */
 2944              		.loc 1 1062 7 discriminator 2 view .LVU1080
 2945 0224 01C1     		addl	%eax, %ecx
 2946              	.LVL380:
1064:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 += delta;		/* form error * 3 */
 2947              		.loc 1 1064 8 discriminator 2 view .LVU1081
 2948 0226 8D442D00 		leal	(%rbp,%rbp), %eax
1058:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 += delta;		/* form error * 5 */
 2949              		.loc 1 1058 37 discriminator 2 view .LVU1082
 2950 022a 66897302 		movw	%si, 2(%rbx)
1059:fltk-1.3.4-1/jpeg/jquant2.c **** 	bpreverr1 = belowerr1 + cur1;
 2951              		.loc 1 1059 2 is_stmt 1 discriminator 2 view .LVU1083
 2952              	.LVL381:
1060:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr1 = bnexterr;
 2953              		.loc 1 1060 2 discriminator 2 view .LVU1084
1060:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr1 = bnexterr;
 2954              		.loc 1 1060 12 is_stmt 0 discriminator 2 view .LVU1085
 2955 022e 897C2404 		movl	%edi, 4(%rsp)
 2956              	.LVL382:
1061:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 += delta;		/* form error * 7 */
 2957              		.loc 1 1061 2 is_stmt 1 discriminator 2 view .LVU1086
1062:fltk-1.3.4-1/jpeg/jquant2.c **** 	bnexterr = cur2;	/* Process component 2 */
 2958              		.loc 1 1062 2 discriminator 2 view .LVU1087
1063:fltk-1.3.4-1/jpeg/jquant2.c **** 	delta = cur2 * 2;
 2959              		.loc 1 1063 2 discriminator 2 view .LVU1088
1064:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 += delta;		/* form error * 3 */
 2960              		.loc 1 1064 2 discriminator 2 view .LVU1089
1065:fltk-1.3.4-1/jpeg/jquant2.c **** 	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 2961              		.loc 1 1065 2 discriminator 2 view .LVU1090
1066:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 += delta;		/* form error * 5 */
 2962              		.loc 1 1066 37 is_stmt 0 discriminator 2 view .LVU1091
 2963 0232 0FB77C24 		movzwl	8(%rsp), %edi
 2963      08
 2964              	.LVL383:
1065:fltk-1.3.4-1/jpeg/jquant2.c **** 	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 2965              		.loc 1 1065 7 discriminator 2 view .LVU1092
 2966 0237 8D740500 		leal	0(%rbp,%rax), %esi
 2967              	.LVL384:
1066:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 += delta;		/* form error * 5 */
 2968              		.loc 1 1066 2 is_stmt 1 discriminator 2 view .LVU1093
1066:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 += delta;		/* form error * 5 */
 2969              		.loc 1 1066 37 is_stmt 0 discriminator 2 view .LVU1094
 2970 023b 01F7     		addl	%esi, %edi
1067:fltk-1.3.4-1/jpeg/jquant2.c **** 	bpreverr2 = belowerr2 + cur2;
 2971              		.loc 1 1067 7 discriminator 2 view .LVU1095
 2972 023d 01C6     		addl	%eax, %esi
 2973              	.LVL385:
1066:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 += delta;		/* form error * 5 */
 2974              		.loc 1 1066 37 discriminator 2 view .LVU1096
 2975 023f 66897B04 		movw	%di, 4(%rbx)
1067:fltk-1.3.4-1/jpeg/jquant2.c **** 	bpreverr2 = belowerr2 + cur2;
 2976              		.loc 1 1067 2 is_stmt 1 discriminator 2 view .LVU1097
 2977              	.LVL386:
1068:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr2 = bnexterr;
 2978              		.loc 1 1068 2 discriminator 2 view .LVU1098
1068:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr2 = bnexterr;
 2979              		.loc 1 1068 12 is_stmt 0 discriminator 2 view .LVU1099
 2980 0243 8B7C2414 		movl	20(%rsp), %edi
1070:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 2981              		.loc 1 1070 7 discriminator 2 view .LVU1100
 2982 0247 01F0     		addl	%esi, %eax
 2983              	.LVL387:
1070:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 2984              		.loc 1 1070 7 discriminator 2 view .LVU1101
 2985 0249 4C01CB   		addq	%r9, %rbx
 2986              	.LVL388:
1068:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr2 = bnexterr;
 2987              		.loc 1 1068 12 discriminator 2 view .LVU1102
 2988 024c 01F7     		addl	%esi, %edi
 2989              	.LBE53:
 999:fltk-1.3.4-1/jpeg/jquant2.c ****       /* curN holds the error propagated from the previous pixel on the
 2990              		.loc 1 999 5 discriminator 2 view .LVU1103
 2991 024e 83AC24A0 		subl	$1, 160(%rsp)
 2991      00000001 
 2992              	.LVL389:
 2993              	.LBB54:
1068:fltk-1.3.4-1/jpeg/jquant2.c **** 	belowerr2 = bnexterr;
 2994              		.loc 1 1068 12 discriminator 2 view .LVU1104
 2995 0256 897C2408 		movl	%edi, 8(%rsp)
 2996              	.LVL390:
1069:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 += delta;		/* form error * 7 */
 2997              		.loc 1 1069 2 is_stmt 1 discriminator 2 view .LVU1105
1070:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 2998              		.loc 1 1070 2 discriminator 2 view .LVU1106
1070:fltk-1.3.4-1/jpeg/jquant2.c ****       }
 2999              		.loc 1 1070 2 is_stmt 0 discriminator 2 view .LVU1107
 3000              	.LBE54:
1076:fltk-1.3.4-1/jpeg/jquant2.c ****       outptr += dir;
 3001              		.loc 1 1076 7 is_stmt 1 discriminator 2 view .LVU1108
1077:fltk-1.3.4-1/jpeg/jquant2.c ****       errorptr += dir3;		/* advance errorptr to current column */
 3002              		.loc 1 1077 7 discriminator 2 view .LVU1109
1078:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 3003              		.loc 1 1078 7 discriminator 2 view .LVU1110
 999:fltk-1.3.4-1/jpeg/jquant2.c ****       /* curN holds the error propagated from the previous pixel on the
 3004              		.loc 1 999 32 discriminator 2 view .LVU1111
 999:fltk-1.3.4-1/jpeg/jquant2.c ****       /* curN holds the error propagated from the previous pixel on the
 3005              		.loc 1 999 23 discriminator 2 view .LVU1112
 999:fltk-1.3.4-1/jpeg/jquant2.c ****       /* curN holds the error propagated from the previous pixel on the
 3006              		.loc 1 999 5 is_stmt 0 discriminator 2 view .LVU1113
 3007 025a 0F84F000 		je	.L210
 3007      0000
 3008              	.LBB55:
1069:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur2 += delta;		/* form error * 7 */
 3009              		.loc 1 1069 12 view .LVU1114
 3010 0260 896C2414 		movl	%ebp, 20(%rsp)
1061:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur1 += delta;		/* form error * 7 */
 3011              		.loc 1 1061 12 view .LVU1115
 3012 0264 44896424 		movl	%r12d, 16(%rsp)
 3012      10
1053:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur0 += delta;		/* form error * 7 */
 3013              		.loc 1 1053 12 view .LVU1116
 3014 0269 44896C24 		movl	%r13d, 12(%rsp)
 3014      0C
 3015              	.LVL391:
 3016              	.L202:
1053:fltk-1.3.4-1/jpeg/jquant2.c **** 	cur0 += delta;		/* form error * 7 */
 3017              		.loc 1 1053 12 view .LVU1117
 3018              	.LBE55:
1008:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 3019              		.loc 1 1008 7 is_stmt 1 view .LVU1118
1009:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 3020              		.loc 1 1009 14 is_stmt 0 view .LVU1119
 3021 026e 488B7C24 		movq	32(%rsp), %rdi
 3021      20
1008:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 3022              		.loc 1 1008 14 view .LVU1120
 3023 0273 420FBF34 		movswl	(%rbx,%r9), %esi
 3023      0B
 3024 0278 8D743208 		leal	8(%rdx,%rsi), %esi
 3025              	.LVL392:
1009:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 3026              		.loc 1 1009 7 is_stmt 1 view .LVU1121
1009:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 3027              		.loc 1 1009 14 is_stmt 0 view .LVU1122
 3028 027c 0FBF143B 		movswl	(%rbx,%rdi), %edx
1010:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Limit the error using transfer function set by init_error_limit.
 3029              		.loc 1 1010 14 view .LVU1123
 3030 0280 488B7C24 		movq	40(%rsp), %rdi
 3030      28
1008:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 3031              		.loc 1 1008 12 view .LVU1124
 3032 0285 C1FE04   		sarl	$4, %esi
 3033              	.LVL393:
1009:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 3034              		.loc 1 1009 14 view .LVU1125
 3035 0288 8D4C1108 		leal	8(%rcx,%rdx), %ecx
 3036              	.LVL394:
1010:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Limit the error using transfer function set by init_error_limit.
 3037              		.loc 1 1010 7 is_stmt 1 view .LVU1126
1010:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Limit the error using transfer function set by init_error_limit.
 3038              		.loc 1 1010 14 is_stmt 0 view .LVU1127
 3039 028c 0FBF143B 		movswl	(%rbx,%rdi), %edx
1009:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 3040              		.loc 1 1009 12 view .LVU1128
 3041 0290 C1F904   		sarl	$4, %ecx
 3042              	.LVL395:
1010:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Limit the error using transfer function set by init_error_limit.
 3043              		.loc 1 1010 14 view .LVU1129
 3044 0293 8D541008 		leal	8(%rax,%rdx), %edx
 3045              	.LVL396:
1014:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 = error_limit[cur1];
 3046              		.loc 1 1014 7 is_stmt 1 view .LVU1130
1014:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 = error_limit[cur1];
 3047              		.loc 1 1014 25 is_stmt 0 view .LVU1131
 3048 0297 4863C6   		movslq	%esi, %rax
 3049              	.LVL397:
1015:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 = error_limit[cur2];
 3050              		.loc 1 1015 7 is_stmt 1 view .LVU1132
1021:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 += GETJSAMPLE(inptr[1]);
 3051              		.loc 1 1021 15 is_stmt 0 view .LVU1133
 3052 029a 410FB636 		movzbl	(%r14), %esi
1015:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 = error_limit[cur2];
 3053              		.loc 1 1015 25 view .LVU1134
 3054 029e 4863C9   		movslq	%ecx, %rcx
 3055              	.LVL398:
1016:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
 3056              		.loc 1 1016 7 is_stmt 1 view .LVU1135
1021:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 += GETJSAMPLE(inptr[1]);
 3057              		.loc 1 1021 12 is_stmt 0 view .LVU1136
 3058 02a1 41033483 		addl	(%r11,%rax,4), %esi
1010:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Limit the error using transfer function set by init_error_limit.
 3059              		.loc 1 1010 12 view .LVU1137
 3060 02a5 C1FA04   		sarl	$4, %edx
 3061              	.LVL399:
1021:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 += GETJSAMPLE(inptr[1]);
 3062              		.loc 1 1021 12 view .LVU1138
 3063 02a8 4863C6   		movslq	%esi, %rax
 3064              	.LVL400:
1016:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
 3065              		.loc 1 1016 25 view .LVU1139
 3066 02ab 4863D2   		movslq	%edx, %rdx
 3067              	.LVL401:
1021:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 += GETJSAMPLE(inptr[1]);
 3068              		.loc 1 1021 7 is_stmt 1 view .LVU1140
1022:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 += GETJSAMPLE(inptr[2]);
 3069              		.loc 1 1022 7 view .LVU1141
1023:fltk-1.3.4-1/jpeg/jquant2.c ****       cur0 = GETJSAMPLE(range_limit[cur0]);
 3070              		.loc 1 1023 7 view .LVU1142
1024:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 = GETJSAMPLE(range_limit[cur1]);
 3071              		.loc 1 1024 7 view .LVU1143
1024:fltk-1.3.4-1/jpeg/jquant2.c ****       cur1 = GETJSAMPLE(range_limit[cur1]);
 3072              		.loc 1 1024 12 is_stmt 0 view .LVU1144
 3073 02ae 450FB62C 		movzbl	(%r10,%rax), %r13d
 3073      02
 3074              	.LVL402:
1025:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 = GETJSAMPLE(range_limit[cur2]);
 3075              		.loc 1 1025 7 is_stmt 1 view .LVU1145
1022:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 += GETJSAMPLE(inptr[2]);
 3076              		.loc 1 1022 15 is_stmt 0 view .LVU1146
 3077 02b3 410FB646 		movzbl	1(%r14), %eax
 3077      01
1022:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 += GETJSAMPLE(inptr[2]);
 3078              		.loc 1 1022 12 view .LVU1147
 3079 02b8 4103048B 		addl	(%r11,%rcx,4), %eax
1025:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 = GETJSAMPLE(range_limit[cur2]);
 3080              		.loc 1 1025 14 view .LVU1148
 3081 02bc 4898     		cltq
1028:fltk-1.3.4-1/jpeg/jquant2.c ****       /* If we have not seen this color before, find nearest colormap */
 3082              		.loc 1 1028 32 view .LVU1149
 3083 02be 4489EE   		movl	%r13d, %esi
1025:fltk-1.3.4-1/jpeg/jquant2.c ****       cur2 = GETJSAMPLE(range_limit[cur2]);
 3084              		.loc 1 1025 12 view .LVU1150
 3085 02c1 450FB624 		movzbl	(%r10,%rax), %r12d
 3085      02
 3086              	.LVL403:
1026:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Index into the cache with adjusted pixel value */
 3087              		.loc 1 1026 7 is_stmt 1 view .LVU1151
1023:fltk-1.3.4-1/jpeg/jquant2.c ****       cur0 = GETJSAMPLE(range_limit[cur0]);
 3088              		.loc 1 1023 15 is_stmt 0 view .LVU1152
 3089 02c6 410FB646 		movzbl	2(%r14), %eax
 3089      02
1028:fltk-1.3.4-1/jpeg/jquant2.c ****       /* If we have not seen this color before, find nearest colormap */
 3090              		.loc 1 1028 32 view .LVU1153
 3091 02cb C1FE03   		sarl	$3, %esi
1023:fltk-1.3.4-1/jpeg/jquant2.c ****       cur0 = GETJSAMPLE(range_limit[cur0]);
 3092              		.loc 1 1023 12 view .LVU1154
 3093 02ce 41030493 		addl	(%r11,%rdx,4), %eax
1028:fltk-1.3.4-1/jpeg/jquant2.c ****       /* If we have not seen this color before, find nearest colormap */
 3094              		.loc 1 1028 32 view .LVU1155
 3095 02d2 4863FE   		movslq	%esi, %rdi
1026:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Index into the cache with adjusted pixel value */
 3096              		.loc 1 1026 14 view .LVU1156
 3097 02d5 4898     		cltq
1028:fltk-1.3.4-1/jpeg/jquant2.c ****       /* If we have not seen this color before, find nearest colormap */
 3098              		.loc 1 1028 48 view .LVU1157
 3099 02d7 4489E2   		movl	%r12d, %edx
 3100              	.LVL404:
1026:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Index into the cache with adjusted pixel value */
 3101              		.loc 1 1026 12 view .LVU1158
 3102 02da 410FB62C 		movzbl	(%r10,%rax), %ebp
 3102      02
 3103              	.LVL405:
1028:fltk-1.3.4-1/jpeg/jquant2.c ****       /* If we have not seen this color before, find nearest colormap */
 3104              		.loc 1 1028 7 is_stmt 1 view .LVU1159
1028:fltk-1.3.4-1/jpeg/jquant2.c ****       /* If we have not seen this color before, find nearest colormap */
 3105              		.loc 1 1028 48 is_stmt 0 view .LVU1160
 3106 02df C1FA02   		sarl	$2, %edx
 3107 02e2 4863C2   		movslq	%edx, %rax
1028:fltk-1.3.4-1/jpeg/jquant2.c ****       /* If we have not seen this color before, find nearest colormap */
 3108              		.loc 1 1028 64 view .LVU1161
 3109 02e5 89E9     		movl	%ebp, %ecx
1028:fltk-1.3.4-1/jpeg/jquant2.c ****       /* If we have not seen this color before, find nearest colormap */
 3110              		.loc 1 1028 43 view .LVU1162
 3111 02e7 48C1E006 		salq	$6, %rax
1028:fltk-1.3.4-1/jpeg/jquant2.c ****       /* If we have not seen this color before, find nearest colormap */
 3112              		.loc 1 1028 64 view .LVU1163
 3113 02eb C1F903   		sarl	$3, %ecx
 3114              	.LVL406:
1031:fltk-1.3.4-1/jpeg/jquant2.c **** 	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
 3115              		.loc 1 1031 7 is_stmt 1 view .LVU1164
 3116 02ee 4C63F9   		movslq	%ecx, %r15
 3117 02f1 4E8D3C78 		leaq	(%rax,%r15,2), %r15
 3118 02f5 488B4424 		movq	56(%rsp), %rax
 3118      38
 3119 02fa 4C033CF8 		addq	(%rax,%rdi,8), %r15
1031:fltk-1.3.4-1/jpeg/jquant2.c **** 	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
 3120              		.loc 1 1031 11 is_stmt 0 view .LVU1165
 3121 02fe 410FB707 		movzwl	(%r15), %eax
1031:fltk-1.3.4-1/jpeg/jquant2.c **** 	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
 3122              		.loc 1 1031 10 view .LVU1166
 3123 0302 6685C0   		testw	%ax, %ax
 3124 0305 0F85ADFE 		jne	.L201
 3124      FFFF
1032:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Now emit the colormap index for this cell */
 3125              		.loc 1 1032 2 view .LVU1167
 3126 030b 488BBC24 		movq	136(%rsp), %rdi
 3126      88000000 
 3127              	.LVL407:
1032:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Now emit the colormap index for this cell */
 3128              		.loc 1 1032 2 view .LVU1168
 3129 0313 4C895C24 		movq	%r11, 112(%rsp)
 3129      70
 3130 0318 4C895424 		movq	%r10, 104(%rsp)
 3130      68
 3131 031d 4C894424 		movq	%r8, 96(%rsp)
 3131      60
 3132 0322 4C894C24 		movq	%r9, 88(%rsp)
 3132      58
1032:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Now emit the colormap index for this cell */
 3133              		.loc 1 1032 2 is_stmt 1 view .LVU1169
 3134 0327 E8000000 		call	fill_inverse_cmap
 3134      00
 3135              	.LVL408:
1032:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Now emit the colormap index for this cell */
 3136              		.loc 1 1032 2 is_stmt 0 view .LVU1170
 3137 032c 410FB707 		movzwl	(%r15), %eax
 3138 0330 4C8B5C24 		movq	112(%rsp), %r11
 3138      70
 3139 0335 4C8B5424 		movq	104(%rsp), %r10
 3139      68
 3140 033a 4C8B4424 		movq	96(%rsp), %r8
 3140      60
 3141 033f 4C8B4C24 		movq	88(%rsp), %r9
 3141      58
 3142 0344 E96FFEFF 		jmp	.L201
 3142      FF
 3143              	.LVL409:
 3144 0349 0F1F8000 		.p2align 4,,10
 3144      000000
 3145              		.p2align 3
 3146              	.L210:
1032:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Now emit the colormap index for this cell */
 3147              		.loc 1 1032 2 view .LVU1171
 3148 0350 4C0FAF8C 		imulq	176(%rsp), %r9
 3148      24B00000 
 3148      00
 3149 0359 4C014C24 		addq	%r9, 120(%rsp)
 3149      78
 3150 035e 0FB70424 		movzwl	(%rsp), %eax
 3151              	.LVL410:
1032:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Now emit the colormap index for this cell */
 3152              		.loc 1 1032 2 view .LVU1172
 3153 0362 0FB77424 		movzwl	4(%rsp), %esi
 3153      04
 3154              	.LVL411:
1032:fltk-1.3.4-1/jpeg/jquant2.c ****       /* Now emit the colormap index for this cell */
 3155              		.loc 1 1032 2 view .LVU1173
 3156 0367 0FB77C24 		movzwl	8(%rsp), %edi
 3156      08
 3157              	.LVL412:
 3158              	.L200:
1084:fltk-1.3.4-1/jpeg/jquant2.c ****     errorptr[1] = (FSERROR) bpreverr1;
 3159              		.loc 1 1084 5 is_stmt 1 discriminator 2 view .LVU1174
 3160 036c 48838424 		addq	$8, 128(%rsp)
 3160      80000000 
 3160      08
1084:fltk-1.3.4-1/jpeg/jquant2.c ****     errorptr[1] = (FSERROR) bpreverr1;
 3161              		.loc 1 1084 17 is_stmt 0 discriminator 2 view .LVU1175
 3162 0375 488B5C24 		movq	120(%rsp), %rbx
 3162      78
 3163 037a 48838424 		addq	$8, 152(%rsp)
 3163      98000000 
 3163      08
 3164 0383 668903   		movw	%ax, (%rbx)
1085:fltk-1.3.4-1/jpeg/jquant2.c ****     errorptr[2] = (FSERROR) bpreverr2;
 3165              		.loc 1 1085 5 is_stmt 1 discriminator 2 view .LVU1176
 3166 0386 488B8424 		movq	128(%rsp), %rax
 3166      80000000 
1085:fltk-1.3.4-1/jpeg/jquant2.c ****     errorptr[2] = (FSERROR) bpreverr2;
 3167              		.loc 1 1085 17 is_stmt 0 discriminator 2 view .LVU1177
 3168 038e 66897302 		movw	%si, 2(%rbx)
1086:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 3169              		.loc 1 1086 5 is_stmt 1 discriminator 2 view .LVU1178
1086:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 3170              		.loc 1 1086 17 is_stmt 0 discriminator 2 view .LVU1179
 3171 0392 66897B04 		movw	%di, 4(%rbx)
 975:fltk-1.3.4-1/jpeg/jquant2.c ****     inptr = input_buf[row];
 3172              		.loc 1 975 33 is_stmt 1 discriminator 2 view .LVU1180
 975:fltk-1.3.4-1/jpeg/jquant2.c ****     inptr = input_buf[row];
 3173              		.loc 1 975 17 discriminator 2 view .LVU1181
 975:fltk-1.3.4-1/jpeg/jquant2.c ****     inptr = input_buf[row];
 3174              		.loc 1 975 3 is_stmt 0 discriminator 2 view .LVU1182
 3175 0396 48398424 		cmpq	%rax, 168(%rsp)
 3175      A8000000 
 3176 039e 0F852CFD 		jne	.L203
 3176      FFFF
 3177              	.LVL413:
 3178              	.L197:
1088:fltk-1.3.4-1/jpeg/jquant2.c **** 
 3179              		.loc 1 1088 1 view .LVU1183
 3180 03a4 4881C4D8 		addq	$216, %rsp
 3180      000000
 3181              		.cfi_remember_state
 3182              		.cfi_def_cfa_offset 56
 3183 03ab 5B       		popq	%rbx
 3184              		.cfi_def_cfa_offset 48
 3185 03ac 5D       		popq	%rbp
 3186              		.cfi_def_cfa_offset 40
 3187 03ad 415C     		popq	%r12
 3188              		.cfi_def_cfa_offset 32
 3189 03af 415D     		popq	%r13
 3190              		.cfi_def_cfa_offset 24
 3191 03b1 415E     		popq	%r14
 3192              		.cfi_def_cfa_offset 16
 3193 03b3 415F     		popq	%r15
 3194              		.cfi_def_cfa_offset 8
 3195 03b5 C3       		ret
 3196              	.LVL414:
 3197 03b6 662E0F1F 		.p2align 4,,10
 3197      84000000 
 3197      0000
 3198              		.p2align 3
 3199              	.L205:
 3200              		.cfi_restore_state
 991:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 3201              		.loc 1 991 29 view .LVU1184
 3202 03c0 B8010000 		movl	$1, %eax
 3202      00
 989:fltk-1.3.4-1/jpeg/jquant2.c ****       errorptr = cquantize->fserrors; /* => entry before first real column */
 3203              		.loc 1 989 12 view .LVU1185
 3204 03c5 B9030000 		movl	$3, %ecx
 3204      00
 988:fltk-1.3.4-1/jpeg/jquant2.c ****       dir3 = 3;
 3205              		.loc 1 988 11 view .LVU1186
 3206 03ca BA010000 		movl	$1, %edx
 3206      00
 3207 03cf E95AFDFF 		jmp	.L199
 3207      FF
 3208              	.LVL415:
 3209              		.p2align 4,,10
 3210 03d4 0F1F4000 		.p2align 3
 3211              	.L206:
 999:fltk-1.3.4-1/jpeg/jquant2.c ****       /* curN holds the error propagated from the previous pixel on the
 3212              		.loc 1 999 5 view .LVU1187
 3213 03d8 31FF     		xorl	%edi, %edi
 3214 03da 31F6     		xorl	%esi, %esi
 3215 03dc 31C0     		xorl	%eax, %eax
 3216              	.LVL416:
 999:fltk-1.3.4-1/jpeg/jquant2.c ****       /* curN holds the error propagated from the previous pixel on the
 3217              		.loc 1 999 5 view .LVU1188
 3218 03de EB8C     		jmp	.L200
 3219              		.cfi_endproc
 3220              	.LFE62:
 3222              		.section	.text.unlikely.finish_pass1,"ax",@progbits
 3223              	.LCOLDB0:
 3224              		.section	.text.finish_pass1,"ax",@progbits
 3225              	.LHOTB0:
 3226              		.p2align 4
 3227              		.section	.text.unlikely.finish_pass1
 3228              	.Ltext_cold0:
 3229              		.section	.text.finish_pass1
 3231              	finish_pass1:
 3232              	.LVL417:
 3233              	.LFB64:
1145:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 3234              		.loc 1 1145 1 is_stmt 1 view -0
 3235              		.cfi_startproc
1145:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 3236              		.loc 1 1145 1 is_stmt 0 view .LVU1190
 3237 0000 F30F1EFA 		endbr64
1146:fltk-1.3.4-1/jpeg/jquant2.c **** 
 3238              		.loc 1 1146 3 is_stmt 1 view .LVU1191
1145:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 3239              		.loc 1 1145 1 is_stmt 0 view .LVU1192
 3240 0004 4157     		pushq	%r15
 3241              		.cfi_def_cfa_offset 16
 3242              		.cfi_offset 15, -16
 3243              	.LBB66:
 3244              	.LBB67:
 548:fltk-1.3.4-1/jpeg/jquant2.c ****     ((j_common_ptr) cinfo, JPOOL_IMAGE, desired_colors * SIZEOF(box));
 3245              		.loc 1 548 23 view .LVU1193
 3246 0006 BE010000 		movl	$1, %esi
 3246      00
 3247              	.LBE67:
 3248              	.LBE66:
1145:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 3249              		.loc 1 1145 1 view .LVU1194
 3250 000b 4156     		pushq	%r14
 3251              		.cfi_def_cfa_offset 24
 3252              		.cfi_offset 14, -24
 3253 000d 4989FE   		movq	%rdi, %r14
 3254 0010 4155     		pushq	%r13
 3255              		.cfi_def_cfa_offset 32
 3256              		.cfi_offset 13, -32
 3257 0012 4154     		pushq	%r12
 3258              		.cfi_def_cfa_offset 40
 3259              		.cfi_offset 12, -40
 3260 0014 55       		pushq	%rbp
 3261              		.cfi_def_cfa_offset 48
 3262              		.cfi_offset 6, -48
 3263 0015 53       		pushq	%rbx
 3264              		.cfi_def_cfa_offset 56
 3265              		.cfi_offset 3, -56
 3266              	.LBB92:
 3267              	.LBB88:
 554:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 3268              		.loc 1 554 20 view .LVU1195
 3269 0016 48BB0000 		movabsq	$270582939648, %rbx
 3269      00003F00 
 3269      0000
 3270              	.LBE88:
 3271              	.LBE92:
1145:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 3272              		.loc 1 1145 1 view .LVU1196
 3273 0020 4883EC78 		subq	$120, %rsp
 3274              		.cfi_def_cfa_offset 176
1146:fltk-1.3.4-1/jpeg/jquant2.c **** 
 3275              		.loc 1 1146 20 view .LVU1197
 3276 0024 488B8F90 		movq	656(%rdi), %rcx
 3276      020000
1149:fltk-1.3.4-1/jpeg/jquant2.c ****   select_colors(cinfo, cquantize->desired);
 3277              		.loc 1 1149 30 view .LVU1198
 3278 002b 488B4120 		movq	32(%rcx), %rax
1146:fltk-1.3.4-1/jpeg/jquant2.c **** 
 3279              		.loc 1 1146 20 view .LVU1199
 3280 002f 48894C24 		movq	%rcx, 16(%rsp)
 3280      10
 3281              	.LVL418:
1149:fltk-1.3.4-1/jpeg/jquant2.c ****   select_colors(cinfo, cquantize->desired);
 3282              		.loc 1 1149 3 is_stmt 1 view .LVU1200
1149:fltk-1.3.4-1/jpeg/jquant2.c ****   select_colors(cinfo, cquantize->desired);
 3283              		.loc 1 1149 19 is_stmt 0 view .LVU1201
 3284 0034 488987A0 		movq	%rax, 160(%rdi)
 3284      000000
1150:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Force next pass to zero the color index table */
 3285              		.loc 1 1150 3 is_stmt 1 view .LVU1202
 3286 003b 48634128 		movslq	40(%rcx), %rax
 3287 003f 4989C4   		movq	%rax, %r12
 3288              	.LVL419:
 3289              	.LBB93:
 3290              	.LBI66:
 540:fltk-1.3.4-1/jpeg/jquant2.c **** /* Master routine for color selection */
 3291              		.loc 1 540 1 view .LVU1203
 3292              	.LBB89:
 543:fltk-1.3.4-1/jpeg/jquant2.c ****   int numboxes;
 3293              		.loc 1 543 3 view .LVU1204
 544:fltk-1.3.4-1/jpeg/jquant2.c ****   int i;
 3294              		.loc 1 544 3 view .LVU1205
 545:fltk-1.3.4-1/jpeg/jquant2.c **** 
 3295              		.loc 1 545 3 view .LVU1206
 548:fltk-1.3.4-1/jpeg/jquant2.c ****     ((j_common_ptr) cinfo, JPOOL_IMAGE, desired_colors * SIZEOF(box));
 3296              		.loc 1 548 3 view .LVU1207
 548:fltk-1.3.4-1/jpeg/jquant2.c ****     ((j_common_ptr) cinfo, JPOOL_IMAGE, desired_colors * SIZEOF(box));
 3297              		.loc 1 548 23 is_stmt 0 view .LVU1208
 3298 0042 488D1480 		leaq	(%rax,%rax,4), %rdx
 3299 0046 488B4708 		movq	8(%rdi), %rax
 3300              	.LVL420:
 548:fltk-1.3.4-1/jpeg/jquant2.c ****     ((j_common_ptr) cinfo, JPOOL_IMAGE, desired_colors * SIZEOF(box));
 3301              		.loc 1 548 23 view .LVU1209
 3302 004a 48C1E203 		salq	$3, %rdx
 3303 004e FF10     		call	*(%rax)
 3304              	.LVL421:
 548:fltk-1.3.4-1/jpeg/jquant2.c ****     ((j_common_ptr) cinfo, JPOOL_IMAGE, desired_colors * SIZEOF(box));
 3305              		.loc 1 548 23 view .LVU1210
 3306 0050 4889C5   		movq	%rax, %rbp
 3307              	.LVL422:
 551:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c0min = 0;
 3308              		.loc 1 551 3 is_stmt 1 view .LVU1211
 552:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 3309              		.loc 1 552 3 view .LVU1212
 553:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c1min = 0;
 3310              		.loc 1 553 3 view .LVU1213
 554:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 3311              		.loc 1 554 3 view .LVU1214
 555:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c2min = 0;
 3312              		.loc 1 555 3 view .LVU1215
 556:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 3313              		.loc 1 556 3 view .LVU1216
 557:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Shrink it to actually-used volume and set its statistics */
 3314              		.loc 1 557 3 view .LVU1217
 552:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 3315              		.loc 1 552 20 is_stmt 0 view .LVU1218
 3316 0053 48B80000 		movabsq	$133143986176, %rax
 3316      00001F00 
 3316      0000
 3317              	.LVL423:
 552:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 3318              		.loc 1 552 20 view .LVU1219
 3319 005d 48894500 		movq	%rax, 0(%rbp)
 559:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Perform median-cut to produce final box list */
 3320              		.loc 1 559 3 view .LVU1220
 3321 0061 4889EE   		movq	%rbp, %rsi
 554:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 3322              		.loc 1 554 20 view .LVU1221
 3323 0064 48895D08 		movq	%rbx, 8(%rbp)
 556:fltk-1.3.4-1/jpeg/jquant2.c ****   boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 3324              		.loc 1 556 20 view .LVU1222
 3325 0068 48894510 		movq	%rax, 16(%rbp)
 559:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Perform median-cut to produce final box list */
 3326              		.loc 1 559 3 is_stmt 1 view .LVU1223
 3327 006c 498BBE90 		movq	656(%r14), %rdi
 3327      020000
 3328 0073 E8000000 		call	update_box.isra.0
 3328      00
 3329              	.LVL424:
 561:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Compute the representative color for each box, fill colormap */
 3330              		.loc 1 561 3 view .LVU1224
 3331              	.LBB68:
 3332              	.LBI68:
 425:fltk-1.3.4-1/jpeg/jquant2.c **** 	    int desired_colors)
 3333              		.loc 1 425 1 view .LVU1225
 3334              	.LBB69:
 433:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Select box to split.
 3335              		.loc 1 433 9 view .LVU1226
 3336 0078 4183FC01 		cmpl	$1, %r12d
 3337 007c 0F8EAE03 		jle	.L233
 3337      0000
 3338 0082 488D5D28 		leaq	40(%rbp), %rbx
 3339 0086 41BF0100 		movl	$1, %r15d
 3339      0000
 3340              	.LVL425:
 3341 008c 0F1F4000 		.p2align 4,,10
 3342              		.p2align 3
 3343              	.L222:
 437:fltk-1.3.4-1/jpeg/jquant2.c ****       b1 = find_biggest_color_pop(boxlist, numboxes);
 3344              		.loc 1 437 5 view .LVU1227
 437:fltk-1.3.4-1/jpeg/jquant2.c ****       b1 = find_biggest_color_pop(boxlist, numboxes);
 3345              		.loc 1 437 8 is_stmt 0 view .LVU1228
 3346 0090 438D043F 		leal	(%r15,%r15), %eax
 3347              	.LBB70:
 3348              	.LBB71:
 281:fltk-1.3.4-1/jpeg/jquant2.c ****   
 3349              		.loc 1 281 10 view .LVU1229
 3350 0094 BE000000 		movl	$0, %esi
 3350      00
 280:fltk-1.3.4-1/jpeg/jquant2.c ****   boxptr which = NULL;
 3351              		.loc 1 280 17 view .LVU1230
 3352 0099 BA000000 		movl	$0, %edx
 3352      00
 3353              	.LBE71:
 3354              	.LBE70:
 437:fltk-1.3.4-1/jpeg/jquant2.c ****       b1 = find_biggest_color_pop(boxlist, numboxes);
 3355              		.loc 1 437 8 view .LVU1231
 3356 009e 4139C4   		cmpl	%eax, %r12d
 3357 00a1 4889E8   		movq	%rbp, %rax
 3358 00a4 0F8CD602 		jl	.L213
 3358      0000
 3359              	.LVL426:
 3360 00aa 660F1F44 		.p2align 4,,10
 3360      0000
 3361              		.p2align 3
 3362              	.L215:
 3363              	.LBB73:
 3364              	.LBB72:
 284:fltk-1.3.4-1/jpeg/jquant2.c ****       which = boxp;
 3365              		.loc 1 284 5 is_stmt 1 view .LVU1232
 284:fltk-1.3.4-1/jpeg/jquant2.c ****       which = boxp;
 3366              		.loc 1 284 13 is_stmt 0 view .LVU1233
 3367 00b0 488B4820 		movq	32(%rax), %rcx
 284:fltk-1.3.4-1/jpeg/jquant2.c ****       which = boxp;
 3368              		.loc 1 284 8 view .LVU1234
 3369 00b4 4839D1   		cmpq	%rdx, %rcx
 3370 00b7 7E0D     		jle	.L214
 284:fltk-1.3.4-1/jpeg/jquant2.c ****       which = boxp;
 3371              		.loc 1 284 33 view .LVU1235
 3372 00b9 48837818 		cmpq	$0, 24(%rax)
 3372      00
 3373 00be 480F4FF0 		cmovg	%rax, %rsi
 3374              	.LVL427:
 284:fltk-1.3.4-1/jpeg/jquant2.c ****       which = boxp;
 3375              		.loc 1 284 33 view .LVU1236
 3376 00c2 480F4FD1 		cmovg	%rcx, %rdx
 3377              	.LVL428:
 3378              	.L214:
 283:fltk-1.3.4-1/jpeg/jquant2.c ****     if (boxp->colorcount > maxc && boxp->volume > 0) {
 3379              		.loc 1 283 45 is_stmt 1 view .LVU1237
 283:fltk-1.3.4-1/jpeg/jquant2.c ****     if (boxp->colorcount > maxc && boxp->volume > 0) {
 3380              		.loc 1 283 54 is_stmt 0 view .LVU1238
 3381 00c6 4883C028 		addq	$40, %rax
 3382              	.LVL429:
 283:fltk-1.3.4-1/jpeg/jquant2.c ****     if (boxp->colorcount > maxc && boxp->volume > 0) {
 3383              		.loc 1 283 31 is_stmt 1 view .LVU1239
 283:fltk-1.3.4-1/jpeg/jquant2.c ****     if (boxp->colorcount > maxc && boxp->volume > 0) {
 3384              		.loc 1 283 3 is_stmt 0 view .LVU1240
 3385 00ca 4839D8   		cmpq	%rbx, %rax
 3386 00cd 75E1     		jne	.L215
 3387              	.LVL430:
 3388              	.L216:
 283:fltk-1.3.4-1/jpeg/jquant2.c ****     if (boxp->colorcount > maxc && boxp->volume > 0) {
 3389              		.loc 1 283 3 view .LVU1241
 3390              	.LBE72:
 3391              	.LBE73:
 442:fltk-1.3.4-1/jpeg/jquant2.c ****       break;
 3392              		.loc 1 442 5 is_stmt 1 view .LVU1242
 442:fltk-1.3.4-1/jpeg/jquant2.c ****       break;
 3393              		.loc 1 442 8 is_stmt 0 view .LVU1243
 3394 00cf 4885F6   		testq	%rsi, %rsi
 3395 00d2 0F84B400 		je	.L212
 3395      0000
 444:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Copy the color bounds to the new box. */
 3396              		.loc 1 444 5 is_stmt 1 view .LVU1244
 3397              	.LVL431:
 446:fltk-1.3.4-1/jpeg/jquant2.c ****     b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 3398              		.loc 1 446 5 view .LVU1245
 446:fltk-1.3.4-1/jpeg/jquant2.c ****     b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 3399              		.loc 1 446 19 is_stmt 0 view .LVU1246
 3400 00d8 8B4604   		movl	4(%rsi), %eax
 446:fltk-1.3.4-1/jpeg/jquant2.c ****     b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 3401              		.loc 1 446 15 view .LVU1247
 3402 00db 894304   		movl	%eax, 4(%rbx)
 446:fltk-1.3.4-1/jpeg/jquant2.c ****     b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 3403              		.loc 1 446 28 is_stmt 1 view .LVU1248
 446:fltk-1.3.4-1/jpeg/jquant2.c ****     b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 3404              		.loc 1 446 42 is_stmt 0 view .LVU1249
 3405 00de 8B460C   		movl	12(%rsi), %eax
 446:fltk-1.3.4-1/jpeg/jquant2.c ****     b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 3406              		.loc 1 446 38 view .LVU1250
 3407 00e1 89430C   		movl	%eax, 12(%rbx)
 446:fltk-1.3.4-1/jpeg/jquant2.c ****     b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 3408              		.loc 1 446 51 is_stmt 1 view .LVU1251
 446:fltk-1.3.4-1/jpeg/jquant2.c ****     b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 3409              		.loc 1 446 65 is_stmt 0 view .LVU1252
 3410 00e4 8B4614   		movl	20(%rsi), %eax
 446:fltk-1.3.4-1/jpeg/jquant2.c ****     b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 3411              		.loc 1 446 61 view .LVU1253
 3412 00e7 894314   		movl	%eax, 20(%rbx)
 447:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Choose which axis to split the box on.
 3413              		.loc 1 447 5 is_stmt 1 view .LVU1254
 447:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Choose which axis to split the box on.
 3414              		.loc 1 447 19 is_stmt 0 view .LVU1255
 3415 00ea 8B06     		movl	(%rsi), %eax
 447:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Choose which axis to split the box on.
 3416              		.loc 1 447 15 view .LVU1256
 3417 00ec 8903     		movl	%eax, (%rbx)
 447:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Choose which axis to split the box on.
 3418              		.loc 1 447 28 is_stmt 1 view .LVU1257
 447:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Choose which axis to split the box on.
 3419              		.loc 1 447 42 is_stmt 0 view .LVU1258
 3420 00ee 8B4608   		movl	8(%rsi), %eax
 447:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Choose which axis to split the box on.
 3421              		.loc 1 447 38 view .LVU1259
 3422 00f1 894308   		movl	%eax, 8(%rbx)
 447:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Choose which axis to split the box on.
 3423              		.loc 1 447 51 is_stmt 1 view .LVU1260
 447:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Choose which axis to split the box on.
 3424              		.loc 1 447 65 is_stmt 0 view .LVU1261
 3425 00f4 8B5610   		movl	16(%rsi), %edx
 447:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Choose which axis to split the box on.
 3426              		.loc 1 447 61 view .LVU1262
 3427 00f7 895310   		movl	%edx, 16(%rbx)
 452:fltk-1.3.4-1/jpeg/jquant2.c ****     c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 3428              		.loc 1 452 5 is_stmt 1 view .LVU1263
 453:fltk-1.3.4-1/jpeg/jquant2.c ****     c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 3429              		.loc 1 453 14 is_stmt 0 view .LVU1264
 3430 00fa 8B460C   		movl	12(%rsi), %eax
 453:fltk-1.3.4-1/jpeg/jquant2.c ****     c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 3431              		.loc 1 453 26 view .LVU1265
 3432 00fd 448B5608 		movl	8(%rsi), %r10d
 452:fltk-1.3.4-1/jpeg/jquant2.c ****     c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 3433              		.loc 1 452 14 view .LVU1266
 3434 0101 8B4E04   		movl	4(%rsi), %ecx
 453:fltk-1.3.4-1/jpeg/jquant2.c ****     c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 3435              		.loc 1 453 22 view .LVU1267
 3436 0104 89C7     		movl	%eax, %edi
 452:fltk-1.3.4-1/jpeg/jquant2.c ****     c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 3437              		.loc 1 452 26 view .LVU1268
 3438 0106 448B1E   		movl	(%rsi), %r11d
 453:fltk-1.3.4-1/jpeg/jquant2.c ****     c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 3439              		.loc 1 453 22 view .LVU1269
 3440 0109 4429D7   		subl	%r10d, %edi
 452:fltk-1.3.4-1/jpeg/jquant2.c ****     c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 3441              		.loc 1 452 22 view .LVU1270
 3442 010c 4189C8   		movl	%ecx, %r8d
 453:fltk-1.3.4-1/jpeg/jquant2.c ****     c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 3443              		.loc 1 453 8 view .LVU1271
 3444 010f 448D0CFD 		leal	0(,%rdi,8), %r9d
 3444      00000000 
 452:fltk-1.3.4-1/jpeg/jquant2.c ****     c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 3445              		.loc 1 452 22 view .LVU1272
 3446 0117 4529D8   		subl	%r11d, %r8d
 453:fltk-1.3.4-1/jpeg/jquant2.c ****     c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 3447              		.loc 1 453 8 view .LVU1273
 3448 011a 458D2CB9 		leal	(%r9,%rdi,4), %r13d
 454:fltk-1.3.4-1/jpeg/jquant2.c ****     /* We want to break any ties in favor of green, then red, blue last.
 3449              		.loc 1 454 14 view .LVU1274
 3450 011e 448B4E14 		movl	20(%rsi), %r9d
 452:fltk-1.3.4-1/jpeg/jquant2.c ****     c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 3451              		.loc 1 452 8 view .LVU1275
 3452 0122 41C1E004 		sall	$4, %r8d
 3453              	.LVL432:
 453:fltk-1.3.4-1/jpeg/jquant2.c ****     c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 3454              		.loc 1 453 5 is_stmt 1 view .LVU1276
 454:fltk-1.3.4-1/jpeg/jquant2.c ****     /* We want to break any ties in favor of green, then red, blue last.
 3455              		.loc 1 454 5 view .LVU1277
 454:fltk-1.3.4-1/jpeg/jquant2.c ****     /* We want to break any ties in favor of green, then red, blue last.
 3456              		.loc 1 454 22 is_stmt 0 view .LVU1278
 3457 0126 4489CF   		movl	%r9d, %edi
 3458 0129 29D7     		subl	%edx, %edi
 454:fltk-1.3.4-1/jpeg/jquant2.c ****     /* We want to break any ties in favor of green, then red, blue last.
 3459              		.loc 1 454 8 view .LVU1279
 3460 012b C1E703   		sall	$3, %edi
 3461              	.LVL433:
 459:fltk-1.3.4-1/jpeg/jquant2.c ****     if (c0 > cmax) { cmax = c0; n = 0; }
 3462              		.loc 1 459 5 is_stmt 1 view .LVU1280
 459:fltk-1.3.4-1/jpeg/jquant2.c ****     if (c0 > cmax) { cmax = c0; n = 0; }
 3463              		.loc 1 459 16 view .LVU1281
 460:fltk-1.3.4-1/jpeg/jquant2.c ****     if (c2 > cmax) { n = 2; }
 3464              		.loc 1 460 5 view .LVU1282
 460:fltk-1.3.4-1/jpeg/jquant2.c ****     if (c2 > cmax) { n = 2; }
 3465              		.loc 1 460 8 is_stmt 0 view .LVU1283
 3466 012e 4539E8   		cmpl	%r13d, %r8d
 3467 0131 0F8F8902 		jg	.L218
 3467      0000
 461:fltk-1.3.4-1/jpeg/jquant2.c **** #else
 3468              		.loc 1 461 5 is_stmt 1 view .LVU1284
 461:fltk-1.3.4-1/jpeg/jquant2.c **** #else
 3469              		.loc 1 461 8 is_stmt 0 view .LVU1285
 3470 0137 4139FD   		cmpl	%edi, %r13d
 3471 013a 0F8C6002 		jl	.L219
 3471      0000
 473:fltk-1.3.4-1/jpeg/jquant2.c ****     case 0:
 3472              		.loc 1 473 5 is_stmt 1 view .LVU1286
 480:fltk-1.3.4-1/jpeg/jquant2.c ****       b1->c1max = lb;
 3473              		.loc 1 480 7 view .LVU1287
 480:fltk-1.3.4-1/jpeg/jquant2.c ****       b1->c1max = lb;
 3474              		.loc 1 480 23 is_stmt 0 view .LVU1288
 3475 0140 428D1410 		leal	(%rax,%r10), %edx
 480:fltk-1.3.4-1/jpeg/jquant2.c ****       b1->c1max = lb;
 3476              		.loc 1 480 10 view .LVU1289
 3477 0144 89D0     		movl	%edx, %eax
 3478 0146 C1E81F   		shrl	$31, %eax
 3479 0149 01D0     		addl	%edx, %eax
 3480 014b D1F8     		sarl	%eax
 3481              	.LVL434:
 481:fltk-1.3.4-1/jpeg/jquant2.c ****       b2->c1min = lb+1;
 3482              		.loc 1 481 7 is_stmt 1 view .LVU1290
 481:fltk-1.3.4-1/jpeg/jquant2.c ****       b2->c1min = lb+1;
 3483              		.loc 1 481 17 is_stmt 0 view .LVU1291
 3484 014d 89460C   		movl	%eax, 12(%rsi)
 482:fltk-1.3.4-1/jpeg/jquant2.c ****       break;
 3485              		.loc 1 482 7 is_stmt 1 view .LVU1292
 482:fltk-1.3.4-1/jpeg/jquant2.c ****       break;
 3486              		.loc 1 482 21 is_stmt 0 view .LVU1293
 3487 0150 83C001   		addl	$1, %eax
 3488              	.LVL435:
 482:fltk-1.3.4-1/jpeg/jquant2.c ****       break;
 3489              		.loc 1 482 21 view .LVU1294
 3490 0153 894308   		movl	%eax, 8(%rbx)
 3491              	.LVL436:
 483:fltk-1.3.4-1/jpeg/jquant2.c ****     case 2:
 3492              		.loc 1 483 7 is_stmt 1 view .LVU1295
 3493 0156 662E0F1F 		.p2align 4,,10
 3493      84000000 
 3493      0000
 3494              		.p2align 3
 3495              	.L221:
 491:fltk-1.3.4-1/jpeg/jquant2.c ****     update_box(cinfo, b2);
 3496              		.loc 1 491 5 view .LVU1296
 3497 0160 498BBE90 		movq	656(%r14), %rdi
 3497      020000
 3498              	.LVL437:
 493:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 3499              		.loc 1 493 13 is_stmt 0 view .LVU1297
 3500 0167 4183C701 		addl	$1, %r15d
 491:fltk-1.3.4-1/jpeg/jquant2.c ****     update_box(cinfo, b2);
 3501              		.loc 1 491 5 view .LVU1298
 3502 016b E8000000 		call	update_box.isra.0
 3502      00
 3503              	.LVL438:
 492:fltk-1.3.4-1/jpeg/jquant2.c ****     numboxes++;
 3504              		.loc 1 492 5 is_stmt 1 view .LVU1299
 3505 0170 498BBE90 		movq	656(%r14), %rdi
 3505      020000
 3506 0177 4889DE   		movq	%rbx, %rsi
 3507 017a 4883C328 		addq	$40, %rbx
 3508              	.LVL439:
 492:fltk-1.3.4-1/jpeg/jquant2.c ****     numboxes++;
 3509              		.loc 1 492 5 is_stmt 0 view .LVU1300
 3510 017e E8000000 		call	update_box.isra.0
 3510      00
 3511              	.LVL440:
 493:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 3512              		.loc 1 493 5 is_stmt 1 view .LVU1301
 433:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Select box to split.
 3513              		.loc 1 433 9 view .LVU1302
 3514 0183 4539FC   		cmpl	%r15d, %r12d
 3515 0186 0F8504FF 		jne	.L222
 3515      FFFF
 3516              	.LVL441:
 3517              	.L212:
 433:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Select box to split.
 3518              		.loc 1 433 9 is_stmt 0 view .LVU1303
 3519              	.LBE69:
 3520              	.LBE68:
 563:fltk-1.3.4-1/jpeg/jquant2.c ****     compute_color(cinfo, & boxlist[i], i);
 3521              		.loc 1 563 15 is_stmt 1 view .LVU1304
 3522 018c 418D47FF 		leal	-1(%r15), %eax
 3523 0190 44897C24 		movl	%r15d, 108(%rsp)
 3523      6C
 3524 0195 4989EA   		movq	%rbp, %r10
 3525              	.LBB80:
 3526              	.LBB76:
 3527 0198 31ED     		xorl	%ebp, %ebp
 3528              	.LVL442:
 563:fltk-1.3.4-1/jpeg/jquant2.c ****     compute_color(cinfo, & boxlist[i], i);
 3529              		.loc 1 563 15 is_stmt 0 view .LVU1305
 3530 019a 48894424 		movq	%rax, 80(%rsp)
 3530      50
 3531              	.LVL443:
 3532 019f 90       		.p2align 4,,10
 3533              		.p2align 3
 3534              	.L232:
 563:fltk-1.3.4-1/jpeg/jquant2.c ****     compute_color(cinfo, & boxlist[i], i);
 3535              		.loc 1 563 15 view .LVU1306
 3536              	.LBE76:
 3537              	.LBE80:
 564:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->actual_number_of_colors = numboxes;
 3538              		.loc 1 564 5 is_stmt 1 view .LVU1307
 3539              	.LBB81:
 3540              	.LBI81:
 500:fltk-1.3.4-1/jpeg/jquant2.c **** /* Compute representative color for a box, put it in colormap[icolor] */
 3541              		.loc 1 500 1 view .LVU1308
 3542              	.LBB82:
 505:fltk-1.3.4-1/jpeg/jquant2.c ****   hist3d histogram = cquantize->histogram;
 3543              		.loc 1 505 3 view .LVU1309
 506:fltk-1.3.4-1/jpeg/jquant2.c ****   histptr histp;
 3544              		.loc 1 506 3 view .LVU1310
 506:fltk-1.3.4-1/jpeg/jquant2.c ****   histptr histp;
 3545              		.loc 1 506 10 is_stmt 0 view .LVU1311
 3546 01a0 498B8690 		movq	656(%r14), %rax
 3546      020000
 517:fltk-1.3.4-1/jpeg/jquant2.c ****   c2min = boxp->c2min;  c2max = boxp->c2max;
 3547              		.loc 1 517 31 view .LVU1312
 3548 01a7 458B5A0C 		movl	12(%r10), %r11d
 518:fltk-1.3.4-1/jpeg/jquant2.c ****   
 3549              		.loc 1 518 31 view .LVU1313
 3550 01ab 458B7A14 		movl	20(%r10), %r15d
 516:fltk-1.3.4-1/jpeg/jquant2.c ****   c1min = boxp->c1min;  c1max = boxp->c1max;
 3551              		.loc 1 516 9 view .LVU1314
 3552 01af 418B12   		movl	(%r10), %edx
 516:fltk-1.3.4-1/jpeg/jquant2.c ****   c1min = boxp->c1min;  c1max = boxp->c1max;
 3553              		.loc 1 516 31 view .LVU1315
 3554 01b2 418B4A04 		movl	4(%r10), %ecx
 506:fltk-1.3.4-1/jpeg/jquant2.c ****   histptr histp;
 3555              		.loc 1 506 10 view .LVU1316
 3556 01b6 488B7030 		movq	48(%rax), %rsi
 3557              	.LVL444:
 507:fltk-1.3.4-1/jpeg/jquant2.c ****   int c0,c1,c2;
 3558              		.loc 1 507 3 is_stmt 1 view .LVU1317
 508:fltk-1.3.4-1/jpeg/jquant2.c ****   int c0min,c0max,c1min,c1max,c2min,c2max;
 3559              		.loc 1 508 3 view .LVU1318
 509:fltk-1.3.4-1/jpeg/jquant2.c ****   long count;
 3560              		.loc 1 509 3 view .LVU1319
 510:fltk-1.3.4-1/jpeg/jquant2.c ****   long total = 0;
 3561              		.loc 1 510 3 view .LVU1320
 511:fltk-1.3.4-1/jpeg/jquant2.c ****   long c0total = 0;
 3562              		.loc 1 511 3 view .LVU1321
 512:fltk-1.3.4-1/jpeg/jquant2.c ****   long c1total = 0;
 3563              		.loc 1 512 3 view .LVU1322
 513:fltk-1.3.4-1/jpeg/jquant2.c ****   long c2total = 0;
 3564              		.loc 1 513 3 view .LVU1323
 514:fltk-1.3.4-1/jpeg/jquant2.c ****   
 3565              		.loc 1 514 3 view .LVU1324
 516:fltk-1.3.4-1/jpeg/jquant2.c ****   c1min = boxp->c1min;  c1max = boxp->c1max;
 3566              		.loc 1 516 3 view .LVU1325
 516:fltk-1.3.4-1/jpeg/jquant2.c ****   c1min = boxp->c1min;  c1max = boxp->c1max;
 3567              		.loc 1 516 25 view .LVU1326
 517:fltk-1.3.4-1/jpeg/jquant2.c ****   c2min = boxp->c2min;  c2max = boxp->c2max;
 3568              		.loc 1 517 3 view .LVU1327
 517:fltk-1.3.4-1/jpeg/jquant2.c ****   c2min = boxp->c2min;  c2max = boxp->c2max;
 3569              		.loc 1 517 31 is_stmt 0 view .LVU1328
 3570 01ba 44895C24 		movl	%r11d, 32(%rsp)
 3570      20
 517:fltk-1.3.4-1/jpeg/jquant2.c ****   c2min = boxp->c2min;  c2max = boxp->c2max;
 3571              		.loc 1 517 9 view .LVU1329
 3572 01bf 458B6A08 		movl	8(%r10), %r13d
 3573              	.LVL445:
 517:fltk-1.3.4-1/jpeg/jquant2.c ****   c2min = boxp->c2min;  c2max = boxp->c2max;
 3574              		.loc 1 517 25 is_stmt 1 view .LVU1330
 518:fltk-1.3.4-1/jpeg/jquant2.c ****   
 3575              		.loc 1 518 3 view .LVU1331
 518:fltk-1.3.4-1/jpeg/jquant2.c ****   
 3576              		.loc 1 518 9 is_stmt 0 view .LVU1332
 3577 01c3 418B5A10 		movl	16(%r10), %ebx
 3578              	.LVL446:
 518:fltk-1.3.4-1/jpeg/jquant2.c ****   
 3579              		.loc 1 518 25 is_stmt 1 view .LVU1333
 518:fltk-1.3.4-1/jpeg/jquant2.c ****   
 3580              		.loc 1 518 31 is_stmt 0 view .LVU1334
 3581 01c7 44897C24 		movl	%r15d, 36(%rsp)
 3581      24
 3582              	.LVL447:
 520:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 3583              		.loc 1 520 3 is_stmt 1 view .LVU1335
 520:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 3584              		.loc 1 520 20 view .LVU1336
 520:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 3585              		.loc 1 520 3 is_stmt 0 view .LVU1337
 3586 01cc 39CA     		cmpl	%ecx, %edx
 3587 01ce 0F8F0000 		jg	.L223
 3587      0000
 3588 01d4 4863FA   		movslq	%edx, %rdi
 3589 01d7 29D1     		subl	%edx, %ecx
 3590              	.LVL448:
 520:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 3591              		.loc 1 520 3 view .LVU1338
 3592 01d9 C1E203   		sall	$3, %edx
 3593              	.LVL449:
 520:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 3594              		.loc 1 520 3 view .LVU1339
 3595 01dc 4C63CB   		movslq	%ebx, %r9
 3596 01df 4801F9   		addq	%rdi, %rcx
 3597 01e2 488D04FE 		leaq	(%rsi,%rdi,8), %rax
 3598 01e6 4963FD   		movslq	%r13d, %rdi
 3599 01e9 4589F8   		movl	%r15d, %r8d
 3600 01ec 488D4CCE 		leaq	8(%rsi,%rcx,8), %rcx
 3600      08
 3601 01f1 4489DE   		movl	%r11d, %esi
 3602              	.LVL450:
 520:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 3603              		.loc 1 520 3 view .LVU1340
 3604 01f4 29C2     		subl	%eax, %edx
 3605 01f6 48C1E706 		salq	$6, %rdi
 3606 01fa 4429EE   		subl	%r13d, %esi
 526:fltk-1.3.4-1/jpeg/jquant2.c **** 	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 3607              		.loc 1 526 33 view .LVU1341
 3608 01fd 83C204   		addl	$4, %edx
 3609 0200 4A8D3C4F 		leaq	(%rdi,%r9,2), %rdi
 3610 0204 4129D8   		subl	%ebx, %r8d
 3611 0207 48C1E606 		salq	$6, %rsi
 3612 020b 89542468 		movl	%edx, 104(%rsp)
 3613 020f 4589EC   		movl	%r13d, %r12d
 514:fltk-1.3.4-1/jpeg/jquant2.c ****   
 3614              		.loc 1 514 8 view .LVU1342
 3615 0212 4531FF   		xorl	%r15d, %r15d
 3616              	.LVL451:
 514:fltk-1.3.4-1/jpeg/jquant2.c ****   
 3617              		.loc 1 514 8 view .LVU1343
 3618 0215 488D543E 		leaq	64(%rsi,%rdi), %rdx
 3618      40
 3619 021a 48894C24 		movq	%rcx, 72(%rsp)
 3619      48
 3620 021f 428D0CAD 		leal	2(,%r13,4), %ecx
 3620      02000000 
 3621 0227 4189DD   		movl	%ebx, %r13d
 3622              	.LVL452:
 514:fltk-1.3.4-1/jpeg/jquant2.c ****   
 3623              		.loc 1 514 8 view .LVU1344
 3624 022a 48895424 		movq	%rdx, 88(%rsp)
 3624      58
 3625 022f 4B8D5400 		leaq	2(%r8,%r8), %rdx
 3625      02
 513:fltk-1.3.4-1/jpeg/jquant2.c ****   long c2total = 0;
 3626              		.loc 1 513 8 view .LVU1345
 3627 0234 48C74424 		movq	$0, 8(%rsp)
 3627      08000000 
 3627      00
 512:fltk-1.3.4-1/jpeg/jquant2.c ****   long c1total = 0;
 3628              		.loc 1 512 8 view .LVU1346
 3629 023d 48C70424 		movq	$0, (%rsp)
 3629      00000000 
 3630 0245 48895424 		movq	%rdx, 96(%rsp)
 3630      60
 3631 024a 894C2438 		movl	%ecx, 56(%rsp)
 3632 024e 8D0CDD04 		leal	4(,%rbx,8), %ecx
 3632      000000
 3633 0255 894C243C 		movl	%ecx, 60(%rsp)
 511:fltk-1.3.4-1/jpeg/jquant2.c ****   long c0total = 0;
 3634              		.loc 1 511 8 view .LVU1347
 3635 0259 31C9     		xorl	%ecx, %ecx
 3636              	.LVL453:
 3637 025b 0F1F4400 		.p2align 4,,10
 3637      00
 3638              		.p2align 3
 3639              	.L224:
 521:fltk-1.3.4-1/jpeg/jquant2.c ****       histp = & histogram[c0][c1][c2min];
 3640              		.loc 1 521 22 is_stmt 1 view .LVU1348
 521:fltk-1.3.4-1/jpeg/jquant2.c ****       histp = & histogram[c0][c1][c2min];
 3641              		.loc 1 521 5 is_stmt 0 view .LVU1349
 3642 0260 443B6424 		cmpl	32(%rsp), %r12d
 3642      20
 3643 0265 0F8F9C00 		jg	.L231
 3643      0000
 526:fltk-1.3.4-1/jpeg/jquant2.c **** 	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 3644              		.loc 1 526 33 view .LVU1350
 3645 026b 8B5C2468 		movl	104(%rsp), %ebx
 522:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c2 = c2min; c2 <= c2max; c2++) {
 3646              		.loc 1 522 26 view .LVU1351
 3647 026f 488B30   		movq	(%rax), %rsi
 526:fltk-1.3.4-1/jpeg/jquant2.c **** 	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 3648              		.loc 1 526 33 view .LVU1352
 3649 0272 448B4C24 		movl	56(%rsp), %r9d
 3649      38
 3650 0277 8D1403   		leal	(%rbx,%rax), %edx
 3651 027a 4863DA   		movslq	%edx, %rbx
 3652 027d 488D143E 		leaq	(%rsi,%rdi), %rdx
 3653 0281 48037424 		addq	88(%rsp), %rsi
 3653      58
 3654 0286 48895C24 		movq	%rbx, 40(%rsp)
 3654      28
 3655 028b 48897424 		movq	%rsi, 24(%rsp)
 3655      18
 3656              	.LVL454:
 3657              		.p2align 4,,10
 3658              		.p2align 3
 3659              	.L228:
 522:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c2 = c2min; c2 <= c2max; c2++) {
 3660              		.loc 1 522 7 is_stmt 1 view .LVU1353
 522:fltk-1.3.4-1/jpeg/jquant2.c ****       for (c2 = c2min; c2 <= c2max; c2++) {
 3661              		.loc 1 522 13 is_stmt 0 view .LVU1354
 3662 0290 4989D0   		movq	%rdx, %r8
 3663              	.LVL455:
 523:fltk-1.3.4-1/jpeg/jquant2.c **** 	if ((count = *histp++) != 0) {
 3664              		.loc 1 523 7 is_stmt 1 view .LVU1355
 523:fltk-1.3.4-1/jpeg/jquant2.c **** 	if ((count = *histp++) != 0) {
 3665              		.loc 1 523 24 view .LVU1356
 523:fltk-1.3.4-1/jpeg/jquant2.c **** 	if ((count = *histp++) != 0) {
 3666              		.loc 1 523 7 is_stmt 0 view .LVU1357
 3667 0293 443B6C24 		cmpl	36(%rsp), %r13d
 3667      24
 3668 0298 7F5E     		jg	.L225
 527:fltk-1.3.4-1/jpeg/jquant2.c **** 	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 3669              		.loc 1 527 33 view .LVU1358
 3670 029a 4963D9   		movslq	%r9d, %rbx
 3671 029d 448B5C24 		movl	60(%rsp), %r11d
 3671      3C
 3672 02a2 48895C24 		movq	%rbx, 48(%rsp)
 3672      30
 3673 02a7 488B5C24 		movq	96(%rsp), %rbx
 3673      60
 3674 02ac 4801D3   		addq	%rdx, %rbx
 3675 02af 48895C24 		movq	%rbx, 64(%rsp)
 3675      40
 3676              	.LVL456:
 3677              		.p2align 4,,10
 3678 02b4 0F1F4000 		.p2align 3
 3679              	.L227:
 524:fltk-1.3.4-1/jpeg/jquant2.c **** 	  total += count;
 3680              		.loc 1 524 2 is_stmt 1 view .LVU1359
 524:fltk-1.3.4-1/jpeg/jquant2.c **** 	  total += count;
 3681              		.loc 1 524 13 is_stmt 0 view .LVU1360
 3682 02b8 410FB730 		movzwl	(%r8), %esi
 524:fltk-1.3.4-1/jpeg/jquant2.c **** 	  total += count;
 3683              		.loc 1 524 21 view .LVU1361
 3684 02bc 4983C002 		addq	$2, %r8
 3685              	.LVL457:
 524:fltk-1.3.4-1/jpeg/jquant2.c **** 	  total += count;
 3686              		.loc 1 524 5 view .LVU1362
 3687 02c0 4885F6   		testq	%rsi, %rsi
 3688 02c3 7428     		je	.L226
 525:fltk-1.3.4-1/jpeg/jquant2.c **** 	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 3689              		.loc 1 525 4 is_stmt 1 view .LVU1363
 526:fltk-1.3.4-1/jpeg/jquant2.c **** 	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 3690              		.loc 1 526 55 is_stmt 0 view .LVU1364
 3691 02c5 488B5C24 		movq	40(%rsp), %rbx
 3691      28
 525:fltk-1.3.4-1/jpeg/jquant2.c **** 	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 3692              		.loc 1 525 10 view .LVU1365
 3693 02ca 4801F1   		addq	%rsi, %rcx
 3694              	.LVL458:
 526:fltk-1.3.4-1/jpeg/jquant2.c **** 	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 3695              		.loc 1 526 4 is_stmt 1 view .LVU1366
 527:fltk-1.3.4-1/jpeg/jquant2.c **** 	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 3696              		.loc 1 527 4 view .LVU1367
 528:fltk-1.3.4-1/jpeg/jquant2.c **** 	}
 3697              		.loc 1 528 4 view .LVU1368
 526:fltk-1.3.4-1/jpeg/jquant2.c **** 	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 3698              		.loc 1 526 55 is_stmt 0 view .LVU1369
 3699 02cd 480FAFDE 		imulq	%rsi, %rbx
 526:fltk-1.3.4-1/jpeg/jquant2.c **** 	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 3700              		.loc 1 526 12 view .LVU1370
 3701 02d1 48011C24 		addq	%rbx, (%rsp)
 3702              	.LVL459:
 527:fltk-1.3.4-1/jpeg/jquant2.c **** 	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 3703              		.loc 1 527 55 view .LVU1371
 3704 02d5 488B5C24 		movq	48(%rsp), %rbx
 3704      30
 3705 02da 480FAFDE 		imulq	%rsi, %rbx
 527:fltk-1.3.4-1/jpeg/jquant2.c **** 	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 3706              		.loc 1 527 12 view .LVU1372
 3707 02de 48015C24 		addq	%rbx, 8(%rsp)
 3707      08
 3708              	.LVL460:
 528:fltk-1.3.4-1/jpeg/jquant2.c **** 	}
 3709              		.loc 1 528 33 view .LVU1373
 3710 02e3 4963DB   		movslq	%r11d, %rbx
 528:fltk-1.3.4-1/jpeg/jquant2.c **** 	}
 3711              		.loc 1 528 55 view .LVU1374
 3712 02e6 480FAFF3 		imulq	%rbx, %rsi
 3713              	.LVL461:
 528:fltk-1.3.4-1/jpeg/jquant2.c **** 	}
 3714              		.loc 1 528 12 view .LVU1375
 3715 02ea 4901F7   		addq	%rsi, %r15
 3716              	.LVL462:
 3717              	.L226:
 523:fltk-1.3.4-1/jpeg/jquant2.c **** 	if ((count = *histp++) != 0) {
 3718              		.loc 1 523 37 is_stmt 1 view .LVU1376
 523:fltk-1.3.4-1/jpeg/jquant2.c **** 	if ((count = *histp++) != 0) {
 3719              		.loc 1 523 24 view .LVU1377
 3720 02ed 4183C308 		addl	$8, %r11d
 523:fltk-1.3.4-1/jpeg/jquant2.c **** 	if ((count = *histp++) != 0) {
 3721              		.loc 1 523 7 is_stmt 0 view .LVU1378
 3722 02f1 4C3B4424 		cmpq	64(%rsp), %r8
 3722      40
 3723 02f6 75C0     		jne	.L227
 3724              	.LVL463:
 3725              	.L225:
 521:fltk-1.3.4-1/jpeg/jquant2.c ****       histp = & histogram[c0][c1][c2min];
 3726              		.loc 1 521 35 is_stmt 1 view .LVU1379
 521:fltk-1.3.4-1/jpeg/jquant2.c ****       histp = & histogram[c0][c1][c2min];
 3727              		.loc 1 521 22 view .LVU1380
 3728 02f8 4883C240 		addq	$64, %rdx
 3729 02fc 4183C104 		addl	$4, %r9d
 521:fltk-1.3.4-1/jpeg/jquant2.c ****       histp = & histogram[c0][c1][c2min];
 3730              		.loc 1 521 5 is_stmt 0 view .LVU1381
 3731 0300 48395424 		cmpq	%rdx, 24(%rsp)
 3731      18
 3732 0305 7589     		jne	.L228
 3733              	.LVL464:
 3734              	.L231:
 520:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 3735              		.loc 1 520 33 is_stmt 1 view .LVU1382
 520:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 3736              		.loc 1 520 20 view .LVU1383
 3737 0307 4883C008 		addq	$8, %rax
 520:fltk-1.3.4-1/jpeg/jquant2.c ****     for (c1 = c1min; c1 <= c1max; c1++) {
 3738              		.loc 1 520 3 is_stmt 0 view .LVU1384
 3739 030b 483B4424 		cmpq	72(%rsp), %rax
 3739      48
 3740 0310 0F854AFF 		jne	.L224
 3740      FFFF
 533:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 3741              		.loc 1 533 3 is_stmt 1 view .LVU1385
 533:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 3742              		.loc 1 533 18 is_stmt 0 view .LVU1386
 3743 0316 498B86A0 		movq	160(%r14), %rax
 3743      000000
 533:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 3744              		.loc 1 533 60 view .LVU1387
 3745 031d 4889CE   		movq	%rcx, %rsi
 3746 0320 4983C228 		addq	$40, %r10
 3747              	.LVL465:
 533:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 3748              		.loc 1 533 60 view .LVU1388
 3749 0324 48D1FE   		sarq	%rsi
 533:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 3750              		.loc 1 533 30 view .LVU1389
 3751 0327 488B38   		movq	(%rax), %rdi
 533:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 3752              		.loc 1 533 52 view .LVU1390
 3753 032a 488B0424 		movq	(%rsp), %rax
 3754 032e 4801F0   		addq	%rsi, %rax
 533:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 3755              		.loc 1 533 66 view .LVU1391
 3756 0331 4899     		cqto
 3757 0333 48F7F9   		idivq	%rcx
 533:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 3758              		.loc 1 533 32 view .LVU1392
 3759 0336 88042F   		movb	%al, (%rdi,%rbp)
 3760              	.LVL466:
 534:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 3761              		.loc 1 534 3 is_stmt 1 view .LVU1393
 534:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 3762              		.loc 1 534 18 is_stmt 0 view .LVU1394
 3763 0339 498B86A0 		movq	160(%r14), %rax
 3763      000000
 534:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 3764              		.loc 1 534 30 view .LVU1395
 3765 0340 488B7808 		movq	8(%rax), %rdi
 534:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 3766              		.loc 1 534 52 view .LVU1396
 3767 0344 488B4424 		movq	8(%rsp), %rax
 3767      08
 3768 0349 4801F0   		addq	%rsi, %rax
 534:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 3769              		.loc 1 534 66 view .LVU1397
 3770 034c 4899     		cqto
 3771 034e 48F7F9   		idivq	%rcx
 534:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 3772              		.loc 1 534 32 view .LVU1398
 3773 0351 88042F   		movb	%al, (%rdi,%rbp)
 535:fltk-1.3.4-1/jpeg/jquant2.c **** }
 3774              		.loc 1 535 3 is_stmt 1 view .LVU1399
 535:fltk-1.3.4-1/jpeg/jquant2.c **** }
 3775              		.loc 1 535 18 is_stmt 0 view .LVU1400
 3776 0354 498B86A0 		movq	160(%r14), %rax
 3776      000000
 535:fltk-1.3.4-1/jpeg/jquant2.c **** }
 3777              		.loc 1 535 30 view .LVU1401
 3778 035b 488B7810 		movq	16(%rax), %rdi
 535:fltk-1.3.4-1/jpeg/jquant2.c **** }
 3779              		.loc 1 535 52 view .LVU1402
 3780 035f 4A8D043E 		leaq	(%rsi,%r15), %rax
 535:fltk-1.3.4-1/jpeg/jquant2.c **** }
 3781              		.loc 1 535 66 view .LVU1403
 3782 0363 4899     		cqto
 3783 0365 48F7F9   		idivq	%rcx
 535:fltk-1.3.4-1/jpeg/jquant2.c **** }
 3784              		.loc 1 535 32 view .LVU1404
 3785 0368 88042F   		movb	%al, (%rdi,%rbp)
 3786              	.LVL467:
 535:fltk-1.3.4-1/jpeg/jquant2.c **** }
 3787              		.loc 1 535 32 view .LVU1405
 3788              	.LBE82:
 3789              	.LBE81:
 563:fltk-1.3.4-1/jpeg/jquant2.c ****     compute_color(cinfo, & boxlist[i], i);
 3790              		.loc 1 563 29 is_stmt 1 view .LVU1406
 563:fltk-1.3.4-1/jpeg/jquant2.c ****     compute_color(cinfo, & boxlist[i], i);
 3791              		.loc 1 563 15 view .LVU1407
 3792 036b 488D4501 		leaq	1(%rbp), %rax
 563:fltk-1.3.4-1/jpeg/jquant2.c ****     compute_color(cinfo, & boxlist[i], i);
 3793              		.loc 1 563 3 is_stmt 0 view .LVU1408
 3794 036f 483B6C24 		cmpq	80(%rsp), %rbp
 3794      50
 3795 0374 746A     		je	.L251
 3796 0376 4889C5   		movq	%rax, %rbp
 3797              	.LVL468:
 563:fltk-1.3.4-1/jpeg/jquant2.c ****     compute_color(cinfo, & boxlist[i], i);
 3798              		.loc 1 563 3 view .LVU1409
 3799 0379 E922FEFF 		jmp	.L232
 3799      FF
 3800              	.LVL469:
 3801 037e 6690     		.p2align 4,,10
 3802              		.p2align 3
 3803              	.L213:
 3804              	.LBB84:
 3805              	.LBB77:
 3806              	.LBB74:
 3807              	.LBB75:
 304:fltk-1.3.4-1/jpeg/jquant2.c ****       which = boxp;
 3808              		.loc 1 304 5 is_stmt 1 view .LVU1410
 304:fltk-1.3.4-1/jpeg/jquant2.c ****       which = boxp;
 3809              		.loc 1 304 13 is_stmt 0 view .LVU1411
 3810 0380 488B4818 		movq	24(%rax), %rcx
 304:fltk-1.3.4-1/jpeg/jquant2.c ****       which = boxp;
 3811              		.loc 1 304 8 view .LVU1412
 3812 0384 4839D1   		cmpq	%rdx, %rcx
 3813 0387 7E06     		jle	.L217
 3814 0389 4889C6   		movq	%rax, %rsi
 3815              	.LVL470:
 304:fltk-1.3.4-1/jpeg/jquant2.c ****       which = boxp;
 3816              		.loc 1 304 8 view .LVU1413
 3817 038c 4889CA   		movq	%rcx, %rdx
 3818              	.LVL471:
 3819              	.L217:
 303:fltk-1.3.4-1/jpeg/jquant2.c ****     if (boxp->volume > maxv) {
 3820              		.loc 1 303 45 is_stmt 1 view .LVU1414
 303:fltk-1.3.4-1/jpeg/jquant2.c ****     if (boxp->volume > maxv) {
 3821              		.loc 1 303 54 is_stmt 0 view .LVU1415
 3822 038f 4883C028 		addq	$40, %rax
 3823              	.LVL472:
 303:fltk-1.3.4-1/jpeg/jquant2.c ****     if (boxp->volume > maxv) {
 3824              		.loc 1 303 31 is_stmt 1 view .LVU1416
 303:fltk-1.3.4-1/jpeg/jquant2.c ****     if (boxp->volume > maxv) {
 3825              		.loc 1 303 3 is_stmt 0 view .LVU1417
 3826 0393 4839D8   		cmpq	%rbx, %rax
 3827 0396 75E8     		jne	.L213
 3828 0398 E932FDFF 		jmp	.L216
 3828      FF
 3829              	.LVL473:
 3830 039d 0F1F00   		.p2align 4,,10
 3831              		.p2align 3
 3832              	.L219:
 303:fltk-1.3.4-1/jpeg/jquant2.c ****     if (boxp->volume > maxv) {
 3833              		.loc 1 303 3 view .LVU1418
 3834              	.LBE75:
 3835              	.LBE74:
 485:fltk-1.3.4-1/jpeg/jquant2.c ****       b1->c2max = lb;
 3836              		.loc 1 485 7 is_stmt 1 view .LVU1419
 485:fltk-1.3.4-1/jpeg/jquant2.c ****       b1->c2max = lb;
 3837              		.loc 1 485 23 is_stmt 0 view .LVU1420
 3838 03a0 4401CA   		addl	%r9d, %edx
 485:fltk-1.3.4-1/jpeg/jquant2.c ****       b1->c2max = lb;
 3839              		.loc 1 485 10 view .LVU1421
 3840 03a3 89D0     		movl	%edx, %eax
 3841 03a5 C1E81F   		shrl	$31, %eax
 3842 03a8 01D0     		addl	%edx, %eax
 3843 03aa D1F8     		sarl	%eax
 3844              	.LVL474:
 486:fltk-1.3.4-1/jpeg/jquant2.c ****       b2->c2min = lb+1;
 3845              		.loc 1 486 7 is_stmt 1 view .LVU1422
 486:fltk-1.3.4-1/jpeg/jquant2.c ****       b2->c2min = lb+1;
 3846              		.loc 1 486 17 is_stmt 0 view .LVU1423
 3847 03ac 894614   		movl	%eax, 20(%rsi)
 487:fltk-1.3.4-1/jpeg/jquant2.c ****       break;
 3848              		.loc 1 487 7 is_stmt 1 view .LVU1424
 487:fltk-1.3.4-1/jpeg/jquant2.c ****       break;
 3849              		.loc 1 487 21 is_stmt 0 view .LVU1425
 3850 03af 83C001   		addl	$1, %eax
 3851              	.LVL475:
 487:fltk-1.3.4-1/jpeg/jquant2.c ****       break;
 3852              		.loc 1 487 21 view .LVU1426
 3853 03b2 894310   		movl	%eax, 16(%rbx)
 3854              	.LVL476:
 488:fltk-1.3.4-1/jpeg/jquant2.c ****     }
 3855              		.loc 1 488 7 is_stmt 1 view .LVU1427
 3856 03b5 E9A6FDFF 		jmp	.L221
 3856      FF
 3857              	.LVL477:
 3858 03ba 660F1F44 		.p2align 4,,10
 3858      0000
 3859              		.p2align 3
 3860              	.L218:
 460:fltk-1.3.4-1/jpeg/jquant2.c ****     if (c2 > cmax) { n = 2; }
 3861              		.loc 1 460 22 view .LVU1428
 460:fltk-1.3.4-1/jpeg/jquant2.c ****     if (c2 > cmax) { n = 2; }
 3862              		.loc 1 460 33 view .LVU1429
 461:fltk-1.3.4-1/jpeg/jquant2.c **** #else
 3863              		.loc 1 461 5 view .LVU1430
 461:fltk-1.3.4-1/jpeg/jquant2.c **** #else
 3864              		.loc 1 461 8 is_stmt 0 view .LVU1431
 3865 03c0 4139F8   		cmpl	%edi, %r8d
 3866 03c3 7CDB     		jl	.L219
 473:fltk-1.3.4-1/jpeg/jquant2.c ****     case 0:
 3867              		.loc 1 473 5 is_stmt 1 view .LVU1432
 475:fltk-1.3.4-1/jpeg/jquant2.c ****       b1->c0max = lb;
 3868              		.loc 1 475 7 view .LVU1433
 475:fltk-1.3.4-1/jpeg/jquant2.c ****       b1->c0max = lb;
 3869              		.loc 1 475 23 is_stmt 0 view .LVU1434
 3870 03c5 428D1419 		leal	(%rcx,%r11), %edx
 475:fltk-1.3.4-1/jpeg/jquant2.c ****       b1->c0max = lb;
 3871              		.loc 1 475 10 view .LVU1435
 3872 03c9 89D0     		movl	%edx, %eax
 3873 03cb C1E81F   		shrl	$31, %eax
 3874 03ce 01D0     		addl	%edx, %eax
 3875 03d0 D1F8     		sarl	%eax
 3876              	.LVL478:
 476:fltk-1.3.4-1/jpeg/jquant2.c ****       b2->c0min = lb+1;
 3877              		.loc 1 476 7 is_stmt 1 view .LVU1436
 476:fltk-1.3.4-1/jpeg/jquant2.c ****       b2->c0min = lb+1;
 3878              		.loc 1 476 17 is_stmt 0 view .LVU1437
 3879 03d2 894604   		movl	%eax, 4(%rsi)
 477:fltk-1.3.4-1/jpeg/jquant2.c ****       break;
 3880              		.loc 1 477 7 is_stmt 1 view .LVU1438
 477:fltk-1.3.4-1/jpeg/jquant2.c ****       break;
 3881              		.loc 1 477 21 is_stmt 0 view .LVU1439
 3882 03d5 83C001   		addl	$1, %eax
 3883              	.LVL479:
 477:fltk-1.3.4-1/jpeg/jquant2.c ****       break;
 3884              		.loc 1 477 21 view .LVU1440
 3885 03d8 8903     		movl	%eax, (%rbx)
 3886              	.LVL480:
 478:fltk-1.3.4-1/jpeg/jquant2.c ****     case 1:
 3887              		.loc 1 478 7 is_stmt 1 view .LVU1441
 3888 03da E981FDFF 		jmp	.L221
 3888      FF
 3889              	.LVL481:
 3890 03df 90       		.p2align 4,,10
 3891              		.p2align 3
 3892              	.L251:
 478:fltk-1.3.4-1/jpeg/jquant2.c ****     case 1:
 3893              		.loc 1 478 7 is_stmt 0 view .LVU1442
 3894 03e0 448B7C24 		movl	108(%rsp), %r15d
 3894      6C
 3895              	.LBE77:
 3896              	.LBE84:
 565:fltk-1.3.4-1/jpeg/jquant2.c ****   TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 3897              		.loc 1 565 3 is_stmt 1 view .LVU1443
 566:fltk-1.3.4-1/jpeg/jquant2.c **** }
 3898              		.loc 1 566 3 is_stmt 0 view .LVU1444
 3899 03e5 498B06   		movq	(%r14), %rax
 3900 03e8 4C89F7   		movq	%r14, %rdi
 3901 03eb BE010000 		movl	$1, %esi
 3901      00
 565:fltk-1.3.4-1/jpeg/jquant2.c ****   TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 3902              		.loc 1 565 34 view .LVU1445
 3903 03f0 4589BE9C 		movl	%r15d, 156(%r14)
 3903      000000
 566:fltk-1.3.4-1/jpeg/jquant2.c **** }
 3904              		.loc 1 566 3 is_stmt 1 view .LVU1446
 3905 03f7 C7402862 		movl	$98, 40(%rax)
 3905      000000
 3906 03fe 498B06   		movq	(%r14), %rax
 3907 0401 4489782C 		movl	%r15d, 44(%rax)
 3908 0405 498B06   		movq	(%r14), %rax
 3909 0408 FF5008   		call	*8(%rax)
 3910              	.LVL482:
 566:fltk-1.3.4-1/jpeg/jquant2.c **** }
 3911              		.loc 1 566 3 is_stmt 0 view .LVU1447
 3912              	.LBE89:
 3913              	.LBE93:
1152:fltk-1.3.4-1/jpeg/jquant2.c **** }
 3914              		.loc 1 1152 3 is_stmt 1 view .LVU1448
1152:fltk-1.3.4-1/jpeg/jquant2.c **** }
 3915              		.loc 1 1152 27 is_stmt 0 view .LVU1449
 3916 040b 488B4424 		movq	16(%rsp), %rax
 3916      10
 3917 0410 C7403801 		movl	$1, 56(%rax)
 3917      000000
1153:fltk-1.3.4-1/jpeg/jquant2.c **** 
 3918              		.loc 1 1153 1 view .LVU1450
 3919 0417 4883C478 		addq	$120, %rsp
 3920              		.cfi_remember_state
 3921              		.cfi_def_cfa_offset 56
 3922 041b 5B       		popq	%rbx
 3923              		.cfi_def_cfa_offset 48
 3924 041c 5D       		popq	%rbp
 3925              		.cfi_def_cfa_offset 40
 3926 041d 415C     		popq	%r12
 3927              		.cfi_def_cfa_offset 32
 3928 041f 415D     		popq	%r13
 3929              		.cfi_def_cfa_offset 24
 3930 0421 415E     		popq	%r14
 3931              		.cfi_def_cfa_offset 16
 3932              	.LVL483:
1153:fltk-1.3.4-1/jpeg/jquant2.c **** 
 3933              		.loc 1 1153 1 view .LVU1451
 3934 0423 415F     		popq	%r15
 3935              		.cfi_def_cfa_offset 8
 3936 0425 C3       		ret
 3937              	.LVL484:
 3938 0426 662E0F1F 		.p2align 4,,10
 3938      84000000 
 3938      0000
 3939              		.p2align 3
 3940              	.L233:
 3941              		.cfi_restore_state
 3942              	.LBB94:
 3943              	.LBB90:
 3944              	.LBB85:
 3945              	.LBB78:
 433:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Select box to split.
 3946              		.loc 1 433 9 view .LVU1452
 3947 0430 41BF0100 		movl	$1, %r15d
 3947      0000
 3948 0436 E951FDFF 		jmp	.L212
 3948      FF
 3949              	.LVL485:
 433:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Select box to split.
 3950              		.loc 1 433 9 view .LVU1453
 3951              	.LBE78:
 3952              	.LBE85:
 3953              	.LBE90:
 3954              	.LBE94:
 3955              		.cfi_endproc
 3956              		.section	.text.unlikely.finish_pass1
 3957              		.cfi_startproc
 3959              	finish_pass1.cold:
 3960              	.LFSB64:
 3961              	.LBB95:
 3962              	.LBB91:
 3963              	.LBB86:
 3964              	.LBB79:
 3965              	.L223:
 3966              		.cfi_def_cfa_offset 176
 3967              		.cfi_offset 3, -56
 3968              		.cfi_offset 6, -48
 3969              		.cfi_offset 12, -40
 3970              		.cfi_offset 13, -32
 3971              		.cfi_offset 14, -24
 3972              		.cfi_offset 15, -16
 3973              	.LBE79:
 3974              	.LBE86:
 3975              	.LBB87:
 3976              	.LBB83:
 533:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 3977              		.loc 1 533 3 is_stmt 1 view -0
 3978 0000 0F0B     		ud2
 3979              	.LBE83:
 3980              	.LBE87:
 3981              	.LBE91:
 3982              	.LBE95:
 3983              		.cfi_endproc
 3984              	.LFE64:
 3985              		.section	.text.finish_pass1
 3987              		.section	.text.unlikely.finish_pass1
 3989              	.LCOLDE0:
 3990              		.section	.text.finish_pass1
 3991              	.LHOTE0:
 3992              		.section	.text.jinit_2pass_quantizer,"ax",@progbits
 3993              		.p2align 4
 3994              		.globl	jinit_2pass_quantizer
 3996              	jinit_2pass_quantizer:
 3997              	.LVL486:
 3998              	.LFB68:
1238:fltk-1.3.4-1/jpeg/jquant2.c **** 
1239:fltk-1.3.4-1/jpeg/jquant2.c **** 
1240:fltk-1.3.4-1/jpeg/jquant2.c **** /*
1241:fltk-1.3.4-1/jpeg/jquant2.c ****  * Module initialization routine for 2-pass color quantization.
1242:fltk-1.3.4-1/jpeg/jquant2.c ****  */
1243:fltk-1.3.4-1/jpeg/jquant2.c **** 
1244:fltk-1.3.4-1/jpeg/jquant2.c **** GLOBAL(void)
1245:fltk-1.3.4-1/jpeg/jquant2.c **** jinit_2pass_quantizer (j_decompress_ptr cinfo)
1246:fltk-1.3.4-1/jpeg/jquant2.c **** {
 3999              		.loc 1 1246 1 view -0
 4000              		.cfi_startproc
 4001              		.loc 1 1246 1 is_stmt 0 view .LVU1456
 4002 0000 F30F1EFA 		endbr64
1247:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize;
 4003              		.loc 1 1247 3 is_stmt 1 view .LVU1457
1248:fltk-1.3.4-1/jpeg/jquant2.c ****   int i;
 4004              		.loc 1 1248 3 view .LVU1458
1249:fltk-1.3.4-1/jpeg/jquant2.c **** 
1250:fltk-1.3.4-1/jpeg/jquant2.c ****   cquantize = (my_cquantize_ptr)
 4005              		.loc 1 1250 3 view .LVU1459
1246:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize;
 4006              		.loc 1 1246 1 is_stmt 0 view .LVU1460
 4007 0004 4155     		pushq	%r13
 4008              		.cfi_def_cfa_offset 16
 4009              		.cfi_offset 13, -16
1251:fltk-1.3.4-1/jpeg/jquant2.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 4010              		.loc 1 1251 6 view .LVU1461
 4011 0006 BA580000 		movl	$88, %edx
 4011      00
 4012 000b BE010000 		movl	$1, %esi
 4012      00
1246:fltk-1.3.4-1/jpeg/jquant2.c ****   my_cquantize_ptr cquantize;
 4013              		.loc 1 1246 1 view .LVU1462
 4014 0010 4154     		pushq	%r12
 4015              		.cfi_def_cfa_offset 24
 4016              		.cfi_offset 12, -24
 4017 0012 4989FC   		movq	%rdi, %r12
 4018 0015 55       		pushq	%rbp
 4019              		.cfi_def_cfa_offset 32
 4020              		.cfi_offset 6, -32
 4021 0016 53       		pushq	%rbx
 4022              		.cfi_def_cfa_offset 40
 4023              		.cfi_offset 3, -40
 4024 0017 4883EC08 		subq	$8, %rsp
 4025              		.cfi_def_cfa_offset 48
 4026              		.loc 1 1251 6 view .LVU1463
 4027 001b 488B4708 		movq	8(%rdi), %rax
 4028 001f FF10     		call	*(%rax)
 4029              	.LVL487:
1252:fltk-1.3.4-1/jpeg/jquant2.c **** 				SIZEOF(my_cquantizer));
1253:fltk-1.3.4-1/jpeg/jquant2.c ****   cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 4030              		.loc 1 1253 20 view .LVU1464
 4031 0021 49898424 		movq	%rax, 656(%r12)
 4031      90020000 
1251:fltk-1.3.4-1/jpeg/jquant2.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 4032              		.loc 1 1251 6 view .LVU1465
 4033 0029 4989C5   		movq	%rax, %r13
 4034              	.LVL488:
 4035              		.loc 1 1253 3 is_stmt 1 view .LVU1466
1254:fltk-1.3.4-1/jpeg/jquant2.c ****   cquantize->pub.start_pass = start_pass_2_quant;
 4036              		.loc 1 1254 3 view .LVU1467
 4037              		.loc 1 1254 29 is_stmt 0 view .LVU1468
 4038 002c 488D0500 		leaq	start_pass_2_quant(%rip), %rax
 4038      000000
 4039              	.LVL489:
 4040              		.loc 1 1254 29 view .LVU1469
 4041 0033 49894500 		movq	%rax, 0(%r13)
1255:fltk-1.3.4-1/jpeg/jquant2.c ****   cquantize->pub.new_color_map = new_color_map_2_quant;
 4042              		.loc 1 1255 3 is_stmt 1 view .LVU1470
 4043              		.loc 1 1255 32 is_stmt 0 view .LVU1471
 4044 0037 488D0500 		leaq	new_color_map_2_quant(%rip), %rax
 4044      000000
 4045 003e 49894518 		movq	%rax, 24(%r13)
1256:fltk-1.3.4-1/jpeg/jquant2.c ****   cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
 4046              		.loc 1 1256 3 is_stmt 1 view .LVU1472
 4047              		.loc 1 1256 23 is_stmt 0 view .LVU1473
 4048 0042 49C74540 		movq	$0, 64(%r13)
 4048      00000000 
1257:fltk-1.3.4-1/jpeg/jquant2.c ****   cquantize->error_limiter = NULL;
 4049              		.loc 1 1257 3 is_stmt 1 view .LVU1474
 4050              		.loc 1 1257 28 is_stmt 0 view .LVU1475
 4051 004a 49C74550 		movq	$0, 80(%r13)
 4051      00000000 
1258:fltk-1.3.4-1/jpeg/jquant2.c **** 
1259:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Make sure jdmaster didn't give me a case I can't handle */
1260:fltk-1.3.4-1/jpeg/jquant2.c ****   if (cinfo->out_color_components != 3)
 4052              		.loc 1 1260 3 is_stmt 1 view .LVU1476
 4053              		.loc 1 1260 6 is_stmt 0 view .LVU1477
 4054 0052 4183BC24 		cmpl	$3, 144(%r12)
 4054      90000000 
 4054      03
 4055 005b 7414     		je	.L253
1261:fltk-1.3.4-1/jpeg/jquant2.c ****     ERREXIT(cinfo, JERR_NOTIMPL);
 4056              		.loc 1 1261 5 is_stmt 1 view .LVU1478
 4057 005d 498B0424 		movq	(%r12), %rax
 4058 0061 4C89E7   		movq	%r12, %rdi
 4059 0064 C7402830 		movl	$48, 40(%rax)
 4059      000000
 4060 006b 498B0424 		movq	(%r12), %rax
 4061 006f FF10     		call	*(%rax)
 4062              	.LVL490:
 4063              	.L253:
1262:fltk-1.3.4-1/jpeg/jquant2.c **** 
1263:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Allocate the histogram/inverse colormap storage */
1264:fltk-1.3.4-1/jpeg/jquant2.c ****   cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
 4064              		.loc 1 1264 3 view .LVU1479
 4065              		.loc 1 1264 36 is_stmt 0 view .LVU1480
 4066 0071 498B4424 		movq	8(%r12), %rax
 4066      08
 4067 0076 BA000100 		movl	$256, %edx
 4067      00
 4068 007b 4C89E7   		movq	%r12, %rdi
 4069              		.loc 1 1264 24 view .LVU1481
 4070 007e 31ED     		xorl	%ebp, %ebp
 4071              		.loc 1 1264 36 view .LVU1482
 4072 0080 BE010000 		movl	$1, %esi
 4072      00
 4073 0085 FF10     		call	*(%rax)
 4074              	.LVL491:
 4075              		.loc 1 1264 24 view .LVU1483
 4076 0087 49894530 		movq	%rax, 48(%r13)
1265:fltk-1.3.4-1/jpeg/jquant2.c ****     ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
1266:fltk-1.3.4-1/jpeg/jquant2.c ****   for (i = 0; i < HIST_C0_ELEMS; i++) {
 4077              		.loc 1 1266 3 is_stmt 1 view .LVU1484
 4078              	.LVL492:
 4079              		.loc 1 1266 15 view .LVU1485
 4080 008b EB07     		jmp	.L255
 4081              	.LVL493:
 4082 008d 0F1F00   		.p2align 4,,10
 4083              		.p2align 3
 4084              	.L262:
 4085              		.loc 1 1266 15 is_stmt 0 view .LVU1486
 4086 0090 498B4530 		movq	48(%r13), %rax
 4087              	.L255:
1267:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 4088              		.loc 1 1267 5 is_stmt 1 discriminator 3 view .LVU1487
 4089              		.loc 1 1267 25 is_stmt 0 discriminator 3 view .LVU1488
 4090 0094 488D1C28 		leaq	(%rax,%rbp), %rbx
 4091              		.loc 1 1267 41 discriminator 3 view .LVU1489
 4092 0098 498B4424 		movq	8(%r12), %rax
 4092      08
 4093 009d BA001000 		movl	$4096, %edx
 4093      00
 4094 00a2 4C89E7   		movq	%r12, %rdi
 4095 00a5 BE010000 		movl	$1, %esi
 4095      00
 4096 00aa 4883C508 		addq	$8, %rbp
 4097 00ae FF5008   		call	*8(%rax)
 4098              	.LVL494:
 4099              		.loc 1 1267 29 discriminator 3 view .LVU1490
 4100 00b1 488903   		movq	%rax, (%rbx)
1266:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 4101              		.loc 1 1266 34 is_stmt 1 discriminator 3 view .LVU1491
1266:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 4102              		.loc 1 1266 15 discriminator 3 view .LVU1492
1266:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 4103              		.loc 1 1266 3 is_stmt 0 discriminator 3 view .LVU1493
 4104 00b4 4881FD00 		cmpq	$256, %rbp
 4104      010000
 4105 00bb 75D3     		jne	.L262
1268:fltk-1.3.4-1/jpeg/jquant2.c ****       ((j_common_ptr) cinfo, JPOOL_IMAGE,
1269:fltk-1.3.4-1/jpeg/jquant2.c ****        HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
1270:fltk-1.3.4-1/jpeg/jquant2.c ****   }
1271:fltk-1.3.4-1/jpeg/jquant2.c ****   cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
 4106              		.loc 1 1271 3 is_stmt 1 view .LVU1494
 4107              		.loc 1 1271 27 is_stmt 0 view .LVU1495
 4108 00bd 41C74538 		movl	$1, 56(%r13)
 4108      01000000 
1272:fltk-1.3.4-1/jpeg/jquant2.c **** 
1273:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Allocate storage for the completed colormap, if required.
1274:fltk-1.3.4-1/jpeg/jquant2.c ****    * We do this now since it is FAR storage and may affect
1275:fltk-1.3.4-1/jpeg/jquant2.c ****    * the memory manager's space calculations.
1276:fltk-1.3.4-1/jpeg/jquant2.c ****    */
1277:fltk-1.3.4-1/jpeg/jquant2.c ****   if (cinfo->enable_2pass_quant) {
 4109              		.loc 1 1277 3 is_stmt 1 view .LVU1496
 4110              		.loc 1 1277 6 is_stmt 0 view .LVU1497
 4111 00c5 418B9424 		movl	132(%r12), %edx
 4111      84000000 
 4112 00cd 85D2     		testl	%edx, %edx
 4113 00cf 746F     		je	.L256
 4114              	.LBB96:
1278:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Make sure color count is acceptable */
1279:fltk-1.3.4-1/jpeg/jquant2.c ****     int desired = cinfo->desired_number_of_colors;
 4115              		.loc 1 1279 5 is_stmt 1 view .LVU1498
 4116              		.loc 1 1279 9 is_stmt 0 view .LVU1499
 4117 00d1 418B5C24 		movl	120(%r12), %ebx
 4117      78
 4118              	.LVL495:
1280:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
1281:fltk-1.3.4-1/jpeg/jquant2.c ****     if (desired < 8)
 4119              		.loc 1 1281 5 is_stmt 1 view .LVU1500
 4120              		.loc 1 1281 8 is_stmt 0 view .LVU1501
 4121 00d6 83FB07   		cmpl	$7, %ebx
 4122 00d9 0F8EB300 		jle	.L263
 4122      0000
1282:fltk-1.3.4-1/jpeg/jquant2.c ****       ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
1283:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Make sure colormap indexes can be represented by JSAMPLEs */
1284:fltk-1.3.4-1/jpeg/jquant2.c ****     if (desired > MAXNUMCOLORS)
 4123              		.loc 1 1284 5 is_stmt 1 view .LVU1502
 4124              		.loc 1 1284 8 is_stmt 0 view .LVU1503
 4125 00df 81FB0001 		cmpl	$256, %ebx
 4125      0000
 4126 00e5 7E1F     		jle	.L258
1285:fltk-1.3.4-1/jpeg/jquant2.c ****       ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 4127              		.loc 1 1285 7 is_stmt 1 view .LVU1504
 4128 00e7 498B0424 		movq	(%r12), %rax
 4129 00eb 4C89E7   		movq	%r12, %rdi
 4130 00ee C740283B 		movl	$59, 40(%rax)
 4130      000000
 4131 00f5 498B0424 		movq	(%r12), %rax
 4132 00f9 C7402C00 		movl	$256, 44(%rax)
 4132      010000
 4133 0100 498B0424 		movq	(%r12), %rax
 4134 0104 FF10     		call	*(%rax)
 4135              	.LVL496:
 4136              	.L258:
1286:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 4137              		.loc 1 1286 5 view .LVU1505
 4138              		.loc 1 1286 31 is_stmt 0 view .LVU1506
 4139 0106 498B4424 		movq	8(%r12), %rax
 4139      08
 4140 010b B9030000 		movl	$3, %ecx
 4140      00
 4141 0110 89DA     		movl	%ebx, %edx
 4142 0112 4C89E7   		movq	%r12, %rdi
 4143 0115 BE010000 		movl	$1, %esi
 4143      00
 4144 011a FF5010   		call	*16(%rax)
 4145              	.LVL497:
1287:fltk-1.3.4-1/jpeg/jquant2.c ****       ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
1288:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->desired = desired;
 4146              		.loc 1 1288 24 view .LVU1507
 4147 011d 41895D28 		movl	%ebx, 40(%r13)
1286:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 4148              		.loc 1 1286 28 view .LVU1508
 4149 0121 49894520 		movq	%rax, 32(%r13)
 4150              		.loc 1 1288 5 is_stmt 1 view .LVU1509
 4151              	.LBE96:
1289:fltk-1.3.4-1/jpeg/jquant2.c ****   } else
1290:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->sv_colormap = NULL;
1291:fltk-1.3.4-1/jpeg/jquant2.c **** 
1292:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Only F-S dithering or no dithering is supported. */
1293:fltk-1.3.4-1/jpeg/jquant2.c ****   /* If user asks for ordered dither, give him F-S. */
1294:fltk-1.3.4-1/jpeg/jquant2.c ****   if (cinfo->dither_mode != JDITHER_NONE)
 4152              		.loc 1 1294 3 view .LVU1510
 4153              		.loc 1 1294 6 is_stmt 0 view .LVU1511
 4154 0125 418B4424 		movl	112(%r12), %eax
 4154      70
 4155 012a 85C0     		testl	%eax, %eax
 4156 012c 7523     		jne	.L264
 4157              	.LVL498:
 4158              	.L252:
1295:fltk-1.3.4-1/jpeg/jquant2.c ****     cinfo->dither_mode = JDITHER_FS;
1296:fltk-1.3.4-1/jpeg/jquant2.c **** 
1297:fltk-1.3.4-1/jpeg/jquant2.c ****   /* Allocate Floyd-Steinberg workspace if necessary.
1298:fltk-1.3.4-1/jpeg/jquant2.c ****    * This isn't really needed until pass 2, but again it is FAR storage.
1299:fltk-1.3.4-1/jpeg/jquant2.c ****    * Although we will cope with a later change in dither_mode,
1300:fltk-1.3.4-1/jpeg/jquant2.c ****    * we do not promise to honor max_memory_to_use if dither_mode changes.
1301:fltk-1.3.4-1/jpeg/jquant2.c ****    */
1302:fltk-1.3.4-1/jpeg/jquant2.c ****   if (cinfo->dither_mode == JDITHER_FS) {
1303:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
1304:fltk-1.3.4-1/jpeg/jquant2.c ****       ((j_common_ptr) cinfo, JPOOL_IMAGE,
1305:fltk-1.3.4-1/jpeg/jquant2.c ****        (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
1306:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Might as well create the error-limiting table too. */
1307:fltk-1.3.4-1/jpeg/jquant2.c ****     init_error_limit(cinfo);
1308:fltk-1.3.4-1/jpeg/jquant2.c ****   }
1309:fltk-1.3.4-1/jpeg/jquant2.c **** }
 4159              		.loc 1 1309 1 view .LVU1512
 4160 012e 4883C408 		addq	$8, %rsp
 4161              		.cfi_remember_state
 4162              		.cfi_def_cfa_offset 40
 4163 0132 5B       		popq	%rbx
 4164              		.cfi_def_cfa_offset 32
 4165 0133 5D       		popq	%rbp
 4166              		.cfi_def_cfa_offset 24
 4167 0134 415C     		popq	%r12
 4168              		.cfi_def_cfa_offset 16
 4169              	.LVL499:
 4170              		.loc 1 1309 1 view .LVU1513
 4171 0136 415D     		popq	%r13
 4172              		.cfi_def_cfa_offset 8
 4173              	.LVL500:
 4174              		.loc 1 1309 1 view .LVU1514
 4175 0138 C3       		ret
 4176              	.LVL501:
 4177 0139 0F1F8000 		.p2align 4,,10
 4177      000000
 4178              		.p2align 3
 4179              	.L256:
 4180              		.cfi_restore_state
1290:fltk-1.3.4-1/jpeg/jquant2.c **** 
 4181              		.loc 1 1290 5 is_stmt 1 view .LVU1515
1290:fltk-1.3.4-1/jpeg/jquant2.c **** 
 4182              		.loc 1 1290 28 is_stmt 0 view .LVU1516
 4183 0140 49C74520 		movq	$0, 32(%r13)
 4183      00000000 
1294:fltk-1.3.4-1/jpeg/jquant2.c ****     cinfo->dither_mode = JDITHER_FS;
 4184              		.loc 1 1294 3 is_stmt 1 view .LVU1517
1294:fltk-1.3.4-1/jpeg/jquant2.c ****     cinfo->dither_mode = JDITHER_FS;
 4185              		.loc 1 1294 6 is_stmt 0 view .LVU1518
 4186 0148 418B4424 		movl	112(%r12), %eax
 4186      70
 4187 014d 85C0     		testl	%eax, %eax
 4188 014f 74DD     		je	.L252
 4189              	.L264:
1295:fltk-1.3.4-1/jpeg/jquant2.c ****     cinfo->dither_mode = JDITHER_FS;
 4190              		.loc 1 1295 5 is_stmt 1 view .LVU1519
1305:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Might as well create the error-limiting table too. */
 4191              		.loc 1 1305 39 is_stmt 0 view .LVU1520
 4192 0151 418B8424 		movl	136(%r12), %eax
 4192      88000000 
1303:fltk-1.3.4-1/jpeg/jquant2.c ****       ((j_common_ptr) cinfo, JPOOL_IMAGE,
 4193              		.loc 1 1303 39 view .LVU1521
 4194 0159 4C89E7   		movq	%r12, %rdi
 4195 015c BE010000 		movl	$1, %esi
 4195      00
1295:fltk-1.3.4-1/jpeg/jquant2.c **** 
 4196              		.loc 1 1295 24 view .LVU1522
 4197 0161 41C74424 		movl	$2, 112(%r12)
 4197      70020000 
 4197      00
1302:fltk-1.3.4-1/jpeg/jquant2.c ****     cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 4198              		.loc 1 1302 3 is_stmt 1 view .LVU1523
1303:fltk-1.3.4-1/jpeg/jquant2.c ****       ((j_common_ptr) cinfo, JPOOL_IMAGE,
 4199              		.loc 1 1303 5 view .LVU1524
1305:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Might as well create the error-limiting table too. */
 4200              		.loc 1 1305 39 is_stmt 0 view .LVU1525
 4201 016a 83C002   		addl	$2, %eax
1303:fltk-1.3.4-1/jpeg/jquant2.c ****       ((j_common_ptr) cinfo, JPOOL_IMAGE,
 4202              		.loc 1 1303 39 view .LVU1526
 4203 016d 488D1440 		leaq	(%rax,%rax,2), %rdx
 4204 0171 498B4424 		movq	8(%r12), %rax
 4204      08
 4205 0176 4801D2   		addq	%rdx, %rdx
 4206 0179 FF5008   		call	*8(%rax)
 4207              	.LVL502:
1307:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 4208              		.loc 1 1307 5 view .LVU1527
 4209 017c 4C89E7   		movq	%r12, %rdi
1303:fltk-1.3.4-1/jpeg/jquant2.c ****       ((j_common_ptr) cinfo, JPOOL_IMAGE,
 4210              		.loc 1 1303 25 view .LVU1528
 4211 017f 49894540 		movq	%rax, 64(%r13)
1307:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 4212              		.loc 1 1307 5 is_stmt 1 view .LVU1529
 4213              		.loc 1 1309 1 is_stmt 0 view .LVU1530
 4214 0183 4883C408 		addq	$8, %rsp
 4215              		.cfi_remember_state
 4216              		.cfi_def_cfa_offset 40
 4217 0187 5B       		popq	%rbx
 4218              		.cfi_def_cfa_offset 32
 4219 0188 5D       		popq	%rbp
 4220              		.cfi_def_cfa_offset 24
 4221 0189 415C     		popq	%r12
 4222              		.cfi_def_cfa_offset 16
 4223              	.LVL503:
 4224              		.loc 1 1309 1 view .LVU1531
 4225 018b 415D     		popq	%r13
 4226              		.cfi_def_cfa_offset 8
 4227              	.LVL504:
1307:fltk-1.3.4-1/jpeg/jquant2.c ****   }
 4228              		.loc 1 1307 5 view .LVU1532
 4229 018d E9000000 		jmp	init_error_limit
 4229      00
 4230              	.LVL505:
 4231              	.L263:
 4232              		.cfi_restore_state
 4233              	.LBB97:
1282:fltk-1.3.4-1/jpeg/jquant2.c ****     /* Make sure colormap indexes can be represented by JSAMPLEs */
 4234              		.loc 1 1282 7 is_stmt 1 view .LVU1533
 4235 0192 498B0424 		movq	(%r12), %rax
 4236 0196 4C89E7   		movq	%r12, %rdi
 4237 0199 C740283A 		movl	$58, 40(%rax)
 4237      000000
 4238 01a0 498B0424 		movq	(%r12), %rax
 4239 01a4 C7402C08 		movl	$8, 44(%rax)
 4239      000000
 4240 01ab 498B0424 		movq	(%r12), %rax
 4241 01af FF10     		call	*(%rax)
 4242              	.LVL506:
1284:fltk-1.3.4-1/jpeg/jquant2.c ****       ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 4243              		.loc 1 1284 5 view .LVU1534
 4244 01b1 E950FFFF 		jmp	.L258
 4244      FF
 4245              	.LBE97:
 4246              		.cfi_endproc
 4247              	.LFE68:
 4249              		.text
 4250              	.Letext0:
 4251              		.section	.text.unlikely.finish_pass1
 4252              	.Letext_cold0:
 4253              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 4254              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 4255              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 4256              		.file 6 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 4257              		.file 7 "/usr/include/stdio.h"
 4258              		.file 8 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 4259              		.file 9 "fltk-1.3.4-1/jpeg/jmorecfg.h"
 4260              		.file 10 "fltk-1.3.4-1/jpeg/jpeglib.h"
 4261              		.file 11 "fltk-1.3.4-1/jpeg/jpegint.h"
 4262              		.file 12 "fltk-1.3.4-1/jpeg/jerror.h"
 4263              		.file 13 "<built-in>"
 25993              		.section	.note.gnu.property,"a"
 25994              		.align 8
 25995 0000 04000000 		.long	 1f - 0f
 25996 0004 10000000 		.long	 4f - 1f
 25997 0008 05000000 		.long	 5
 25998              	0:
 25999 000c 474E5500 		.string	 "GNU"
 26000              	1:
 26001              		.align 8
 26002 0010 020000C0 		.long	 0xc0000002
 26003 0014 04000000 		.long	 3f - 2f
 26004              	2:
 26005 0018 03000000 		.long	 0x3
 26006              	3:
 26007 001c 00000000 		.align 8
 26008              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 jquant2.c
     /tmp/ccQNWig2.s:7      .text.prescan_quantize:0000000000000000 prescan_quantize
     /tmp/ccQNWig2.s:129    .text.init_error_limit:0000000000000000 init_error_limit
     /tmp/ccQNWig2.s:257    .text.finish_pass2:0000000000000000 finish_pass2
     /tmp/ccQNWig2.s:272    .text.new_color_map_2_quant:0000000000000000 new_color_map_2_quant
     /tmp/ccQNWig2.s:294    .text.start_pass_2_quant:0000000000000000 start_pass_2_quant
     /tmp/ccQNWig2.s:3231   .text.finish_pass1:0000000000000000 finish_pass1
     /tmp/ccQNWig2.s:2394   .text.pass2_no_dither:0000000000000000 pass2_no_dither
     /tmp/ccQNWig2.s:2601   .text.pass2_fs_dither:0000000000000000 pass2_fs_dither
     /tmp/ccQNWig2.s:601    .text.update_box.isra.0:0000000000000000 update_box.isra.0
     /tmp/ccQNWig2.s:1397   .text.fill_inverse_cmap:0000000000000000 fill_inverse_cmap
     /tmp/ccQNWig2.s:3959   .text.unlikely.finish_pass1:0000000000000000 finish_pass1.cold
     /tmp/ccQNWig2.s:3996   .text.jinit_2pass_quantizer:0000000000000000 jinit_2pass_quantizer
                           .group:0000000000000000 wm4.0.a6b23a418548ac0bda5d8549c4a2ec91
                           .group:0000000000000000 wm4.stdcpredef.h.19.8dc41bed5d9037ff9622e015fb5f0ce3
                           .group:0000000000000000 wm4.jconfig.h.10.247fc3ff67998f3074970b1373c70333
                           .group:0000000000000000 wm4.features.h.19.5b5f5a19624a0527f479fdc52d54808f
                           .group:0000000000000000 wm4.cdefs.h.19.98d80eddbb3f64f4f30cd9aee9c5593c
                           .group:0000000000000000 wm4.wordsize.h.4.baf119258a1e53d8dba67ceac44ab6bc
                           .group:0000000000000000 wm4.cdefs.h.475.fb75d2e4416aa349344e6f45f683bf28
                           .group:0000000000000000 wm4.stubs64.h.10.6ce4c34010988db072c080326a6b6319
                           .group:0000000000000000 wm4.libcheaderstart.h.37.d9274df4cc0172452960ad9644fa5579
                           .group:0000000000000000 wm4.stdlib.h.28.2cffa49d94c5d85f4538f55f7b59771d
                           .group:0000000000000000 wm4.stddef.h.181.13772e73e5434e8cc4fafaaddad2b5da
                           .group:0000000000000000 wm4.waitflags.h.25.41934de4af99038521c2782f418699b1
                           .group:0000000000000000 wm4.waitstatus.h.28.93f167f49d64e2b9b99f98d1162a93bf
                           .group:0000000000000000 wm4.stdlib.h.43.9fa4f727a2f1cb8d2450a574c9195553
                           .group:0000000000000000 wm4.floatn.h.20.80c7cf8a8dfad237004b28d051d5afda
                           .group:0000000000000000 wm4.floatncommon.h.34.7e1840d7dfb19e9bdb51aeb077d76637
                           .group:0000000000000000 wm4.stdlib.h.71.2927e068ec678159b4f68ec2f089f7e6
                           .group:0000000000000000 wm4.types.h.109.56eb9ae966b255288cc544f18746a7ff
                           .group:0000000000000000 wm4.typesizes.h.24.2c64f817c0dc4b6fb2a2c619d717be26
                           .group:0000000000000000 wm4.time64.h.24.a8166ae916ec910dab0d8987098d42ee
                           .group:0000000000000000 wm4.types.h.40.18f72bab8242c2bb4c532a2aa95b5f00
                           .group:0000000000000000 wm4.stddef.h.231.0adce5c8c1fd8096aaff50981b3d1f0f
                           .group:0000000000000000 wm4.endian.h.20.efabd1018df5d7b4052c27dc6bdd5ce5
                           .group:0000000000000000 wm4.endianness.h.2.2c6a211f7909f3af5e9e9cfa3b6b63c8
                           .group:0000000000000000 wm4.endian.h.40.9e5d395adda2f4eb53ae69b69b664084
                           .group:0000000000000000 wm4.endian.h.27.4c4f94262c4eaee2982fe00ed1b4f173
                           .group:0000000000000000 wm4.byteswap.h.24.5363c019348146aada5aeadf51456576
                           .group:0000000000000000 wm4.endian.h.39.30a606dbd99b6c3df61c1f06dbdabd4e
                           .group:0000000000000000 wm4.select.h.28.eb2f3debdbcffd1442ebddaebc4fb6ff
                           .group:0000000000000000 wm4.__sigset_t.h.2.6b1ab6ff3d7b8fd9c0c42b0d80afbd80
                           .group:0000000000000000 wm4.select.h.44.887a4ff60aa97fcd9c1be017735e1675
                           .group:0000000000000000 wm4.select2.h.27.f95f2ab0ffee66dc1b6575014894b21a
                           .group:0000000000000000 wm4.types.h.186.489a4ed8f2d29cd358843490f54ddea5
                           .group:0000000000000000 wm4.pthreadtypesarch.h.25.6063cba99664c916e22d3a912bcc348a
                           .group:0000000000000000 wm4.struct_mutex.h.20.ed51f515172b9be99e450ba83eb5dd99
                           .group:0000000000000000 wm4.struct_rwlock.h.21.0254880f2904e3833fb8ae683e0f0330
                           .group:0000000000000000 wm4.alloca.h.19.edefa922a76c1cbaaf1e416903ba2d1c
                           .group:0000000000000000 wm4.alloca.h.29.156e12058824cc23d961c4d3b13031f6
                           .group:0000000000000000 wm4.stdio.h.24.5c1b97eef3c86b7a2549420f69f4f128
                           .group:0000000000000000 wm4.libcheaderstart.h.31.87b3c285aeba93fe355ad19123070832
                           .group:0000000000000000 wm4.stdio.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.stddef.h.231.8136eebbab3406dbf57a7ec475dd5d83
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.struct_FILE.h.19.0888ac70396abe1031c03d393554032f
                           .group:0000000000000000 wm4.stdio.h.53.139e45cf040c0964b2932c0c1bdaf6b2
                           .group:0000000000000000 wm4.stdio_lim.h.19.e4b00b560d878dcfbc6635b3406640c5
                           .group:0000000000000000 wm4.stdio.h.141.d7a290e19ca077c9e4aa7c43ede17a73
                           .group:0000000000000000 wm4.stdio.h.20.b0caa08e5723aa5941367be0e5d2ec59
                           .group:0000000000000000 wm4.stdio2.h.20.f45a0373b68e1296c4aa8cc09d66a9df
                           .group:0000000000000000 wm4.string.h.23.93403f89af7dba8212345449bb14b09d
                           .group:0000000000000000 wm4.string.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.strings.h.19.a259f126920b1bb5ef76bc62b3984a3c
                           .group:0000000000000000 wm4.jinclude.h.67.b19f941ec97c4845fa4609292c7e2db4
                           .group:0000000000000000 wm4.jmorecfg.h.33.3b4c5f9cc07b3737823b06caf24d5b05
                           .group:0000000000000000 wm4.jpeglib.h.40.4f111c27252a38df39328d65454e82f4
                           .group:0000000000000000 wm4.jpegint.h.26.5219ef5d4e4921371d38e77b6091fd20
                           .group:0000000000000000 wm4.jerror.h.25.1dbd8674e70ab5215bc0037320e5c2a2

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
memset
__stack_chk_fail
