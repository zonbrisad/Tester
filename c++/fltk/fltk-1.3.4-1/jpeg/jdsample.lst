   1              		.file	"jdsample.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.start_pass_upsample,"ax",@progbits
   5              		.p2align 4
   7              	start_pass_upsample:
   8              	.LVL0:
   9              	.LFB51:
  10              		.file 1 "fltk-1.3.4-1/jpeg/jdsample.c"
   1:fltk-1.3.4-1/jpeg/jdsample.c **** /*
   2:fltk-1.3.4-1/jpeg/jdsample.c ****  * jdsample.c
   3:fltk-1.3.4-1/jpeg/jdsample.c ****  *
   4:fltk-1.3.4-1/jpeg/jdsample.c ****  * Copyright (C) 1991-1996, Thomas G. Lane.
   5:fltk-1.3.4-1/jpeg/jdsample.c ****  * Modified 2002-2008 by Guido Vollbeding.
   6:fltk-1.3.4-1/jpeg/jdsample.c ****  * This file is part of the Independent JPEG Group's software.
   7:fltk-1.3.4-1/jpeg/jdsample.c ****  * For conditions of distribution and use, see the accompanying README file.
   8:fltk-1.3.4-1/jpeg/jdsample.c ****  *
   9:fltk-1.3.4-1/jpeg/jdsample.c ****  * This file contains upsampling routines.
  10:fltk-1.3.4-1/jpeg/jdsample.c ****  *
  11:fltk-1.3.4-1/jpeg/jdsample.c ****  * Upsampling input data is counted in "row groups".  A row group
  12:fltk-1.3.4-1/jpeg/jdsample.c ****  * is defined to be (v_samp_factor * DCT_v_scaled_size / min_DCT_v_scaled_size)
  13:fltk-1.3.4-1/jpeg/jdsample.c ****  * sample rows of each component.  Upsampling will normally produce
  14:fltk-1.3.4-1/jpeg/jdsample.c ****  * max_v_samp_factor pixel rows from each row group (but this could vary
  15:fltk-1.3.4-1/jpeg/jdsample.c ****  * if the upsampler is applying a scale factor of its own).
  16:fltk-1.3.4-1/jpeg/jdsample.c ****  *
  17:fltk-1.3.4-1/jpeg/jdsample.c ****  * An excellent reference for image resampling is
  18:fltk-1.3.4-1/jpeg/jdsample.c ****  *   Digital Image Warping, George Wolberg, 1990.
  19:fltk-1.3.4-1/jpeg/jdsample.c ****  *   Pub. by IEEE Computer Society Press, Los Alamitos, CA. ISBN 0-8186-8944-7.
  20:fltk-1.3.4-1/jpeg/jdsample.c ****  */
  21:fltk-1.3.4-1/jpeg/jdsample.c **** 
  22:fltk-1.3.4-1/jpeg/jdsample.c **** #define JPEG_INTERNALS
  23:fltk-1.3.4-1/jpeg/jdsample.c **** #include "jinclude.h"
  24:fltk-1.3.4-1/jpeg/jdsample.c **** #include "jpeglib.h"
  25:fltk-1.3.4-1/jpeg/jdsample.c **** 
  26:fltk-1.3.4-1/jpeg/jdsample.c **** 
  27:fltk-1.3.4-1/jpeg/jdsample.c **** /* Pointer to routine to upsample a single component */
  28:fltk-1.3.4-1/jpeg/jdsample.c **** typedef JMETHOD(void, upsample1_ptr,
  29:fltk-1.3.4-1/jpeg/jdsample.c **** 		(j_decompress_ptr cinfo, jpeg_component_info * compptr,
  30:fltk-1.3.4-1/jpeg/jdsample.c **** 		 JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr));
  31:fltk-1.3.4-1/jpeg/jdsample.c **** 
  32:fltk-1.3.4-1/jpeg/jdsample.c **** /* Private subobject */
  33:fltk-1.3.4-1/jpeg/jdsample.c **** 
  34:fltk-1.3.4-1/jpeg/jdsample.c **** typedef struct {
  35:fltk-1.3.4-1/jpeg/jdsample.c ****   struct jpeg_upsampler pub;	/* public fields */
  36:fltk-1.3.4-1/jpeg/jdsample.c **** 
  37:fltk-1.3.4-1/jpeg/jdsample.c ****   /* Color conversion buffer.  When using separate upsampling and color
  38:fltk-1.3.4-1/jpeg/jdsample.c ****    * conversion steps, this buffer holds one upsampled row group until it
  39:fltk-1.3.4-1/jpeg/jdsample.c ****    * has been color converted and output.
  40:fltk-1.3.4-1/jpeg/jdsample.c ****    * Note: we do not allocate any storage for component(s) which are full-size,
  41:fltk-1.3.4-1/jpeg/jdsample.c ****    * ie do not need rescaling.  The corresponding entry of color_buf[] is
  42:fltk-1.3.4-1/jpeg/jdsample.c ****    * simply set to point to the input data array, thereby avoiding copying.
  43:fltk-1.3.4-1/jpeg/jdsample.c ****    */
  44:fltk-1.3.4-1/jpeg/jdsample.c ****   JSAMPARRAY color_buf[MAX_COMPONENTS];
  45:fltk-1.3.4-1/jpeg/jdsample.c **** 
  46:fltk-1.3.4-1/jpeg/jdsample.c ****   /* Per-component upsampling method pointers */
  47:fltk-1.3.4-1/jpeg/jdsample.c ****   upsample1_ptr methods[MAX_COMPONENTS];
  48:fltk-1.3.4-1/jpeg/jdsample.c **** 
  49:fltk-1.3.4-1/jpeg/jdsample.c ****   int next_row_out;		/* counts rows emitted from color_buf */
  50:fltk-1.3.4-1/jpeg/jdsample.c ****   JDIMENSION rows_to_go;	/* counts rows remaining in image */
  51:fltk-1.3.4-1/jpeg/jdsample.c **** 
  52:fltk-1.3.4-1/jpeg/jdsample.c ****   /* Height of an input row group for each component. */
  53:fltk-1.3.4-1/jpeg/jdsample.c ****   int rowgroup_height[MAX_COMPONENTS];
  54:fltk-1.3.4-1/jpeg/jdsample.c **** 
  55:fltk-1.3.4-1/jpeg/jdsample.c ****   /* These arrays save pixel expansion factors so that int_expand need not
  56:fltk-1.3.4-1/jpeg/jdsample.c ****    * recompute them each time.  They are unused for other upsampling methods.
  57:fltk-1.3.4-1/jpeg/jdsample.c ****    */
  58:fltk-1.3.4-1/jpeg/jdsample.c ****   UINT8 h_expand[MAX_COMPONENTS];
  59:fltk-1.3.4-1/jpeg/jdsample.c ****   UINT8 v_expand[MAX_COMPONENTS];
  60:fltk-1.3.4-1/jpeg/jdsample.c **** } my_upsampler;
  61:fltk-1.3.4-1/jpeg/jdsample.c **** 
  62:fltk-1.3.4-1/jpeg/jdsample.c **** typedef my_upsampler * my_upsample_ptr;
  63:fltk-1.3.4-1/jpeg/jdsample.c **** 
  64:fltk-1.3.4-1/jpeg/jdsample.c **** 
  65:fltk-1.3.4-1/jpeg/jdsample.c **** /*
  66:fltk-1.3.4-1/jpeg/jdsample.c ****  * Initialize for an upsampling pass.
  67:fltk-1.3.4-1/jpeg/jdsample.c ****  */
  68:fltk-1.3.4-1/jpeg/jdsample.c **** 
  69:fltk-1.3.4-1/jpeg/jdsample.c **** METHODDEF(void)
  70:fltk-1.3.4-1/jpeg/jdsample.c **** start_pass_upsample (j_decompress_ptr cinfo)
  71:fltk-1.3.4-1/jpeg/jdsample.c **** {
  11              		.loc 1 71 1 view -0
  12              		.cfi_startproc
  13              		.loc 1 71 1 is_stmt 0 view .LVU1
  14 0000 F30F1EFA 		endbr64
  72:fltk-1.3.4-1/jpeg/jdsample.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  15              		.loc 1 72 3 is_stmt 1 view .LVU2
  73:fltk-1.3.4-1/jpeg/jdsample.c **** 
  74:fltk-1.3.4-1/jpeg/jdsample.c ****   /* Mark the conversion buffer empty */
  75:fltk-1.3.4-1/jpeg/jdsample.c ****   upsample->next_row_out = cinfo->max_v_samp_factor;
  16              		.loc 1 75 33 is_stmt 0 view .LVU3
  17 0004 8B97A401 		movl	420(%rdi), %edx
  17      0000
  72:fltk-1.3.4-1/jpeg/jdsample.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  18              		.loc 1 72 19 view .LVU4
  19 000a 488B8780 		movq	640(%rdi), %rax
  19      020000
  20              	.LVL1:
  21              		.loc 1 75 3 is_stmt 1 view .LVU5
  22              		.loc 1 75 26 is_stmt 0 view .LVU6
  23 0011 8990B800 		movl	%edx, 184(%rax)
  23      0000
  76:fltk-1.3.4-1/jpeg/jdsample.c ****   /* Initialize total-height counter for detecting bottom of image */
  77:fltk-1.3.4-1/jpeg/jdsample.c ****   upsample->rows_to_go = cinfo->output_height;
  24              		.loc 1 77 3 is_stmt 1 view .LVU7
  25              		.loc 1 77 31 is_stmt 0 view .LVU8
  26 0017 8B978C00 		movl	140(%rdi), %edx
  26      0000
  27              		.loc 1 77 24 view .LVU9
  28 001d 8990BC00 		movl	%edx, 188(%rax)
  28      0000
  78:fltk-1.3.4-1/jpeg/jdsample.c **** }
  29              		.loc 1 78 1 view .LVU10
  30 0023 C3       		ret
  31              		.cfi_endproc
  32              	.LFE51:
  34              		.section	.text.sep_upsample,"ax",@progbits
  35              		.p2align 4
  37              	sep_upsample:
  38              	.LVL2:
  39              	.LFB52:
  79:fltk-1.3.4-1/jpeg/jdsample.c **** 
  80:fltk-1.3.4-1/jpeg/jdsample.c **** 
  81:fltk-1.3.4-1/jpeg/jdsample.c **** /*
  82:fltk-1.3.4-1/jpeg/jdsample.c ****  * Control routine to do upsampling (and color conversion).
  83:fltk-1.3.4-1/jpeg/jdsample.c ****  *
  84:fltk-1.3.4-1/jpeg/jdsample.c ****  * In this version we upsample each component independently.
  85:fltk-1.3.4-1/jpeg/jdsample.c ****  * We upsample one row group into the conversion buffer, then apply
  86:fltk-1.3.4-1/jpeg/jdsample.c ****  * color conversion a row at a time.
  87:fltk-1.3.4-1/jpeg/jdsample.c ****  */
  88:fltk-1.3.4-1/jpeg/jdsample.c **** 
  89:fltk-1.3.4-1/jpeg/jdsample.c **** METHODDEF(void)
  90:fltk-1.3.4-1/jpeg/jdsample.c **** sep_upsample (j_decompress_ptr cinfo,
  91:fltk-1.3.4-1/jpeg/jdsample.c **** 	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
  92:fltk-1.3.4-1/jpeg/jdsample.c **** 	      JDIMENSION in_row_groups_avail,
  93:fltk-1.3.4-1/jpeg/jdsample.c **** 	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
  94:fltk-1.3.4-1/jpeg/jdsample.c **** 	      JDIMENSION out_rows_avail)
  95:fltk-1.3.4-1/jpeg/jdsample.c **** {
  40              		.loc 1 95 1 is_stmt 1 view -0
  41              		.cfi_startproc
  42              		.loc 1 95 1 is_stmt 0 view .LVU12
  43 0000 F30F1EFA 		endbr64
  96:fltk-1.3.4-1/jpeg/jdsample.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  44              		.loc 1 96 3 is_stmt 1 view .LVU13
  95:fltk-1.3.4-1/jpeg/jdsample.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  45              		.loc 1 95 1 is_stmt 0 view .LVU14
  46 0004 4157     		pushq	%r15
  47              		.cfi_def_cfa_offset 16
  48              		.cfi_offset 15, -16
  49 0006 4156     		pushq	%r14
  50              		.cfi_def_cfa_offset 24
  51              		.cfi_offset 14, -24
  52 0008 4989D6   		movq	%rdx, %r14
  53 000b 4155     		pushq	%r13
  54              		.cfi_def_cfa_offset 32
  55              		.cfi_offset 13, -32
  56 000d 4154     		pushq	%r12
  57              		.cfi_def_cfa_offset 40
  58              		.cfi_offset 12, -40
  59 000f 55       		pushq	%rbp
  60              		.cfi_def_cfa_offset 48
  61              		.cfi_offset 6, -48
  62 0010 4889FD   		movq	%rdi, %rbp
  63 0013 53       		pushq	%rbx
  64              		.cfi_def_cfa_offset 56
  65              		.cfi_offset 3, -56
  66 0014 4883EC28 		subq	$40, %rsp
  67              		.cfi_def_cfa_offset 96
  68              		.loc 1 96 19 view .LVU15
  69 0018 4C8BBF80 		movq	640(%rdi), %r15
  69      020000
  70              	.LVL3:
  97:fltk-1.3.4-1/jpeg/jdsample.c ****   int ci;
  71              		.loc 1 97 3 is_stmt 1 view .LVU16
  98:fltk-1.3.4-1/jpeg/jdsample.c ****   jpeg_component_info * compptr;
  72              		.loc 1 98 3 view .LVU17
  99:fltk-1.3.4-1/jpeg/jdsample.c ****   JDIMENSION num_rows;
  73              		.loc 1 99 3 view .LVU18
 100:fltk-1.3.4-1/jpeg/jdsample.c **** 
 101:fltk-1.3.4-1/jpeg/jdsample.c ****   /* Fill the conversion buffer, if it's empty */
 102:fltk-1.3.4-1/jpeg/jdsample.c ****   if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
  74              		.loc 1 102 3 view .LVU19
  75              		.loc 1 102 38 is_stmt 0 view .LVU20
  76 001f 8B9FA401 		movl	420(%rdi), %ebx
  76      0000
  95:fltk-1.3.4-1/jpeg/jdsample.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  77              		.loc 1 95 1 view .LVU21
  78 0025 4C894424 		movq	%r8, 16(%rsp)
  78      10
  79              		.loc 1 102 15 view .LVU22
  80 002a 418B87B8 		movl	184(%r15), %eax
  80      000000
  81 0031 498D4F18 		leaq	24(%r15), %rcx
  82              	.LVL4:
  95:fltk-1.3.4-1/jpeg/jdsample.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  83              		.loc 1 95 1 view .LVU23
  84 0035 4C894C24 		movq	%r9, 24(%rsp)
  84      18
  85 003a 48894C24 		movq	%rcx, 8(%rsp)
  85      08
  86 003f 89C2     		movl	%eax, %edx
  87              	.LVL5:
  88              		.loc 1 102 6 view .LVU24
  89 0041 39D8     		cmpl	%ebx, %eax
  90 0043 7C6B     		jl	.L5
 103:fltk-1.3.4-1/jpeg/jdsample.c ****     for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
  91              		.loc 1 103 5 view .LVU25
  92 0045 8B4738   		movl	56(%rdi), %eax
  93              		.loc 1 103 26 view .LVU26
  94 0048 4C8BAF30 		movq	304(%rdi), %r13
  94      010000
  95 004f 4989F3   		movq	%rsi, %r11
  96              		.loc 1 103 5 is_stmt 1 view .LVU27
  97              	.LVL6:
  98              		.loc 1 103 46 view .LVU28
  99              		.loc 1 103 5 is_stmt 0 view .LVU29
 100 0052 31DB     		xorl	%ebx, %ebx
 101 0054 4D8D6718 		leaq	24(%r15), %r12
 102 0058 85C0     		testl	%eax, %eax
 103 005a 7E3F     		jle	.L8
 104              	.LVL7:
 105 005c 0F1F4000 		.p2align 4,,10
 106              		.p2align 3
 107              	.L7:
 104:fltk-1.3.4-1/jpeg/jdsample.c **** 	 ci++, compptr++) {
 105:fltk-1.3.4-1/jpeg/jdsample.c ****       /* Invoke per-component upsample method.  Notice we pass a POINTER
 106:fltk-1.3.4-1/jpeg/jdsample.c ****        * to color_buf[ci], so that fullsize_upsample can change it.
 107:fltk-1.3.4-1/jpeg/jdsample.c ****        */
 108:fltk-1.3.4-1/jpeg/jdsample.c ****       (*upsample->methods[ci]) (cinfo, compptr,
 108              		.loc 1 108 7 is_stmt 1 view .LVU30
 109:fltk-1.3.4-1/jpeg/jdsample.c **** 	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 109              		.loc 1 109 37 is_stmt 0 view .LVU31
 110 0060 418B06   		movl	(%r14), %eax
 108:fltk-1.3.4-1/jpeg/jdsample.c **** 	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 111              		.loc 1 108 8 view .LVU32
 112 0063 498B14DB 		movq	(%r11,%rbx,8), %rdx
 113 0067 4C891C24 		movq	%r11, (%rsp)
 114 006b 4C89E1   		movq	%r12, %rcx
 115              		.loc 1 109 37 view .LVU33
 116 006e 410FAF84 		imull	192(%r15,%rbx,4), %eax
 116      9FC00000 
 116      00
 108:fltk-1.3.4-1/jpeg/jdsample.c **** 	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 117              		.loc 1 108 8 view .LVU34
 118 0077 4C89EE   		movq	%r13, %rsi
 119 007a 4889EF   		movq	%rbp, %rdi
 104:fltk-1.3.4-1/jpeg/jdsample.c **** 	 ci++, compptr++) {
 120              		.loc 1 104 16 view .LVU35
 121 007d 4983C560 		addq	$96, %r13
 122              	.LVL8:
 104:fltk-1.3.4-1/jpeg/jdsample.c **** 	 ci++, compptr++) {
 123              		.loc 1 104 16 view .LVU36
 124 0081 4883C301 		addq	$1, %rbx
 125              	.LVL9:
 108:fltk-1.3.4-1/jpeg/jdsample.c **** 	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 126              		.loc 1 108 8 view .LVU37
 127 0085 488D14C2 		leaq	(%rdx,%rax,8), %rdx
 128 0089 41FF5424 		call	*80(%r12)
 128      50
 129              	.LVL10:
 104:fltk-1.3.4-1/jpeg/jdsample.c **** 	 ci++, compptr++) {
 130              		.loc 1 104 3 is_stmt 1 view .LVU38
 103:fltk-1.3.4-1/jpeg/jdsample.c **** 	 ci++, compptr++) {
 131              		.loc 1 103 46 view .LVU39
 132 008e 4983C408 		addq	$8, %r12
 103:fltk-1.3.4-1/jpeg/jdsample.c **** 	 ci++, compptr++) {
 133              		.loc 1 103 5 is_stmt 0 view .LVU40
 134 0092 395D38   		cmpl	%ebx, 56(%rbp)
 135 0095 4C8B1C24 		movq	(%rsp), %r11
 136 0099 7FC5     		jg	.L7
 137              	.L8:
 110:fltk-1.3.4-1/jpeg/jdsample.c **** 	upsample->color_buf + ci);
 111:fltk-1.3.4-1/jpeg/jdsample.c ****     }
 112:fltk-1.3.4-1/jpeg/jdsample.c ****     upsample->next_row_out = 0;
 138              		.loc 1 112 5 is_stmt 1 view .LVU41
 139              		.loc 1 112 28 is_stmt 0 view .LVU42
 140 009b 41C787B8 		movl	$0, 184(%r15)
 140      00000000 
 140      000000
 141 00a6 31D2     		xorl	%edx, %edx
 142 00a8 31C0     		xorl	%eax, %eax
 143 00aa 8B9DA401 		movl	420(%rbp), %ebx
 143      0000
 144              	.LVL11:
 145              	.L5:
 113:fltk-1.3.4-1/jpeg/jdsample.c ****   }
 114:fltk-1.3.4-1/jpeg/jdsample.c **** 
 115:fltk-1.3.4-1/jpeg/jdsample.c ****   /* Color-convert and emit rows */
 116:fltk-1.3.4-1/jpeg/jdsample.c **** 
 117:fltk-1.3.4-1/jpeg/jdsample.c ****   /* How many we have in the buffer: */
 118:fltk-1.3.4-1/jpeg/jdsample.c ****   num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 146              		.loc 1 118 3 is_stmt 1 view .LVU43
 119:fltk-1.3.4-1/jpeg/jdsample.c ****   /* Not more than the distance to the end of the image.  Need this test
 120:fltk-1.3.4-1/jpeg/jdsample.c ****    * in case the image height is not a multiple of max_v_samp_factor:
 121:fltk-1.3.4-1/jpeg/jdsample.c ****    */
 122:fltk-1.3.4-1/jpeg/jdsample.c ****   if (num_rows > upsample->rows_to_go) 
 123:fltk-1.3.4-1/jpeg/jdsample.c ****     num_rows = upsample->rows_to_go;
 124:fltk-1.3.4-1/jpeg/jdsample.c ****   /* And not more than what the client can accept: */
 125:fltk-1.3.4-1/jpeg/jdsample.c ****   out_rows_avail -= *out_row_ctr;
 147              		.loc 1 125 21 is_stmt 0 view .LVU44
 148 00b0 4C8B6C24 		movq	24(%rsp), %r13
 148      18
 118:fltk-1.3.4-1/jpeg/jdsample.c ****   /* Not more than the distance to the end of the image.  Need this test
 149              		.loc 1 118 53 view .LVU45
 150 00b5 29C3     		subl	%eax, %ebx
 126:fltk-1.3.4-1/jpeg/jdsample.c ****   if (num_rows > out_rows_avail)
 127:fltk-1.3.4-1/jpeg/jdsample.c ****     num_rows = out_rows_avail;
 128:fltk-1.3.4-1/jpeg/jdsample.c **** 
 129:fltk-1.3.4-1/jpeg/jdsample.c ****   (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 151              		.loc 1 129 4 view .LVU46
 152 00b7 488B7424 		movq	16(%rsp), %rsi
 152      10
 153 00bc 4889EF   		movq	%rbp, %rdi
 118:fltk-1.3.4-1/jpeg/jdsample.c ****   /* Not more than the distance to the end of the image.  Need this test
 154              		.loc 1 118 53 view .LVU47
 155 00bf 4189D8   		movl	%ebx, %r8d
 156              	.LVL12:
 122:fltk-1.3.4-1/jpeg/jdsample.c ****     num_rows = upsample->rows_to_go;
 157              		.loc 1 122 3 is_stmt 1 view .LVU48
 125:fltk-1.3.4-1/jpeg/jdsample.c ****   if (num_rows > out_rows_avail)
 158              		.loc 1 125 3 view .LVU49
 125:fltk-1.3.4-1/jpeg/jdsample.c ****   if (num_rows > out_rows_avail)
 159              		.loc 1 125 18 is_stmt 0 view .LVU50
 160 00c2 8B5C2460 		movl	96(%rsp), %ebx
 161              	.LVL13:
 125:fltk-1.3.4-1/jpeg/jdsample.c ****   if (num_rows > out_rows_avail)
 162              		.loc 1 125 21 view .LVU51
 163 00c6 418B4500 		movl	0(%r13), %eax
 164              	.LVL14:
 126:fltk-1.3.4-1/jpeg/jdsample.c ****   if (num_rows > out_rows_avail)
 165              		.loc 1 126 3 is_stmt 1 view .LVU52
 125:fltk-1.3.4-1/jpeg/jdsample.c ****   if (num_rows > out_rows_avail)
 166              		.loc 1 125 18 is_stmt 0 view .LVU53
 167 00ca 29C3     		subl	%eax, %ebx
 168              	.LVL15:
 125:fltk-1.3.4-1/jpeg/jdsample.c ****   if (num_rows > out_rows_avail)
 169              		.loc 1 125 18 view .LVU54
 170 00cc 41399FBC 		cmpl	%ebx, 188(%r15)
 170      000000
 171              		.loc 1 129 4 view .LVU55
 172 00d3 488D0CC6 		leaq	(%rsi,%rax,8), %rcx
 173 00d7 410F469F 		cmovbe	188(%r15), %ebx
 173      BC000000 
 174              	.LVL16:
 175              		.loc 1 129 4 view .LVU56
 176 00df 488B8588 		movq	648(%rbp), %rax
 176      020000
 177              	.LVL17:
 178              		.loc 1 129 4 view .LVU57
 179 00e6 488B7424 		movq	8(%rsp), %rsi
 179      08
 180 00eb 4439C3   		cmpl	%r8d, %ebx
 181 00ee 410F47D8 		cmova	%r8d, %ebx
 182              	.LVL18:
 183              		.loc 1 129 3 is_stmt 1 view .LVU58
 184              		.loc 1 129 4 is_stmt 0 view .LVU59
 185 00f2 4189D8   		movl	%ebx, %r8d
 186 00f5 FF5008   		call	*8(%rax)
 187              	.LVL19:
 130:fltk-1.3.4-1/jpeg/jdsample.c **** 				     (JDIMENSION) upsample->next_row_out,
 131:fltk-1.3.4-1/jpeg/jdsample.c **** 				     output_buf + *out_row_ctr,
 132:fltk-1.3.4-1/jpeg/jdsample.c **** 				     (int) num_rows);
 133:fltk-1.3.4-1/jpeg/jdsample.c **** 
 134:fltk-1.3.4-1/jpeg/jdsample.c ****   /* Adjust counts */
 135:fltk-1.3.4-1/jpeg/jdsample.c ****   *out_row_ctr += num_rows;
 188              		.loc 1 135 3 is_stmt 1 view .LVU60
 189              		.loc 1 135 16 is_stmt 0 view .LVU61
 190 00f8 41015D00 		addl	%ebx, 0(%r13)
 136:fltk-1.3.4-1/jpeg/jdsample.c ****   upsample->rows_to_go -= num_rows;
 191              		.loc 1 136 3 is_stmt 1 view .LVU62
 192              		.loc 1 136 24 is_stmt 0 view .LVU63
 193 00fc 41299FBC 		subl	%ebx, 188(%r15)
 193      000000
 137:fltk-1.3.4-1/jpeg/jdsample.c ****   upsample->next_row_out += num_rows;
 194              		.loc 1 137 3 is_stmt 1 view .LVU64
 195              		.loc 1 137 26 is_stmt 0 view .LVU65
 196 0103 41039FB8 		addl	184(%r15), %ebx
 196      000000
 197              	.LVL20:
 198              		.loc 1 137 26 view .LVU66
 199 010a 41899FB8 		movl	%ebx, 184(%r15)
 199      000000
 138:fltk-1.3.4-1/jpeg/jdsample.c ****   /* When the buffer is emptied, declare this input row group consumed */
 139:fltk-1.3.4-1/jpeg/jdsample.c ****   if (upsample->next_row_out >= cinfo->max_v_samp_factor)
 200              		.loc 1 139 3 is_stmt 1 view .LVU67
 201              		.loc 1 139 6 is_stmt 0 view .LVU68
 202 0111 3B9DA401 		cmpl	420(%rbp), %ebx
 202      0000
 203 0117 7C04     		jl	.L3
 140:fltk-1.3.4-1/jpeg/jdsample.c ****     (*in_row_group_ctr)++;
 204              		.loc 1 140 5 is_stmt 1 view .LVU69
 205              		.loc 1 140 24 is_stmt 0 view .LVU70
 206 0119 41830601 		addl	$1, (%r14)
 207              	.L3:
 141:fltk-1.3.4-1/jpeg/jdsample.c **** }
 208              		.loc 1 141 1 view .LVU71
 209 011d 4883C428 		addq	$40, %rsp
 210              		.cfi_def_cfa_offset 56
 211 0121 5B       		popq	%rbx
 212              		.cfi_def_cfa_offset 48
 213 0122 5D       		popq	%rbp
 214              		.cfi_def_cfa_offset 40
 215              	.LVL21:
 216              		.loc 1 141 1 view .LVU72
 217 0123 415C     		popq	%r12
 218              		.cfi_def_cfa_offset 32
 219 0125 415D     		popq	%r13
 220              		.cfi_def_cfa_offset 24
 221 0127 415E     		popq	%r14
 222              		.cfi_def_cfa_offset 16
 223              	.LVL22:
 224              		.loc 1 141 1 view .LVU73
 225 0129 415F     		popq	%r15
 226              		.cfi_def_cfa_offset 8
 227              	.LVL23:
 228              		.loc 1 141 1 view .LVU74
 229 012b C3       		ret
 230              		.cfi_endproc
 231              	.LFE52:
 233              		.section	.text.fullsize_upsample,"ax",@progbits
 234              		.p2align 4
 236              	fullsize_upsample:
 237              	.LVL24:
 238              	.LFB53:
 142:fltk-1.3.4-1/jpeg/jdsample.c **** 
 143:fltk-1.3.4-1/jpeg/jdsample.c **** 
 144:fltk-1.3.4-1/jpeg/jdsample.c **** /*
 145:fltk-1.3.4-1/jpeg/jdsample.c ****  * These are the routines invoked by sep_upsample to upsample pixel values
 146:fltk-1.3.4-1/jpeg/jdsample.c ****  * of a single component.  One row group is processed per call.
 147:fltk-1.3.4-1/jpeg/jdsample.c ****  */
 148:fltk-1.3.4-1/jpeg/jdsample.c **** 
 149:fltk-1.3.4-1/jpeg/jdsample.c **** 
 150:fltk-1.3.4-1/jpeg/jdsample.c **** /*
 151:fltk-1.3.4-1/jpeg/jdsample.c ****  * For full-size components, we just make color_buf[ci] point at the
 152:fltk-1.3.4-1/jpeg/jdsample.c ****  * input buffer, and thus avoid copying any data.  Note that this is
 153:fltk-1.3.4-1/jpeg/jdsample.c ****  * safe only because sep_upsample doesn't declare the input row group
 154:fltk-1.3.4-1/jpeg/jdsample.c ****  * "consumed" until we are done color converting and emitting it.
 155:fltk-1.3.4-1/jpeg/jdsample.c ****  */
 156:fltk-1.3.4-1/jpeg/jdsample.c **** 
 157:fltk-1.3.4-1/jpeg/jdsample.c **** METHODDEF(void)
 158:fltk-1.3.4-1/jpeg/jdsample.c **** fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
 159:fltk-1.3.4-1/jpeg/jdsample.c **** 		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
 160:fltk-1.3.4-1/jpeg/jdsample.c **** {
 239              		.loc 1 160 1 is_stmt 1 view -0
 240              		.cfi_startproc
 241              		.loc 1 160 1 is_stmt 0 view .LVU76
 242 0000 F30F1EFA 		endbr64
 161:fltk-1.3.4-1/jpeg/jdsample.c ****   *output_data_ptr = input_data;
 243              		.loc 1 161 3 is_stmt 1 view .LVU77
 244              		.loc 1 161 20 is_stmt 0 view .LVU78
 245 0004 488911   		movq	%rdx, (%rcx)
 162:fltk-1.3.4-1/jpeg/jdsample.c **** }
 246              		.loc 1 162 1 view .LVU79
 247 0007 C3       		ret
 248              		.cfi_endproc
 249              	.LFE53:
 251              		.section	.text.noop_upsample,"ax",@progbits
 252              		.p2align 4
 254              	noop_upsample:
 255              	.LVL25:
 256              	.LFB54:
 163:fltk-1.3.4-1/jpeg/jdsample.c **** 
 164:fltk-1.3.4-1/jpeg/jdsample.c **** 
 165:fltk-1.3.4-1/jpeg/jdsample.c **** /*
 166:fltk-1.3.4-1/jpeg/jdsample.c ****  * This is a no-op version used for "uninteresting" components.
 167:fltk-1.3.4-1/jpeg/jdsample.c ****  * These components will not be referenced by color conversion.
 168:fltk-1.3.4-1/jpeg/jdsample.c ****  */
 169:fltk-1.3.4-1/jpeg/jdsample.c **** 
 170:fltk-1.3.4-1/jpeg/jdsample.c **** METHODDEF(void)
 171:fltk-1.3.4-1/jpeg/jdsample.c **** noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
 172:fltk-1.3.4-1/jpeg/jdsample.c **** 	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
 173:fltk-1.3.4-1/jpeg/jdsample.c **** {
 257              		.loc 1 173 1 is_stmt 1 view -0
 258              		.cfi_startproc
 259              		.loc 1 173 1 is_stmt 0 view .LVU81
 260 0000 F30F1EFA 		endbr64
 174:fltk-1.3.4-1/jpeg/jdsample.c ****   *output_data_ptr = NULL;	/* safety check */
 261              		.loc 1 174 3 is_stmt 1 view .LVU82
 262              		.loc 1 174 20 is_stmt 0 view .LVU83
 263 0004 48C70100 		movq	$0, (%rcx)
 263      000000
 175:fltk-1.3.4-1/jpeg/jdsample.c **** }
 264              		.loc 1 175 1 view .LVU84
 265 000b C3       		ret
 266              		.cfi_endproc
 267              	.LFE54:
 269              		.section	.text.h2v1_upsample,"ax",@progbits
 270              		.p2align 4
 272              	h2v1_upsample:
 273              	.LVL26:
 274              	.LFB56:
 176:fltk-1.3.4-1/jpeg/jdsample.c **** 
 177:fltk-1.3.4-1/jpeg/jdsample.c **** 
 178:fltk-1.3.4-1/jpeg/jdsample.c **** /*
 179:fltk-1.3.4-1/jpeg/jdsample.c ****  * This version handles any integral sampling ratios.
 180:fltk-1.3.4-1/jpeg/jdsample.c ****  * This is not used for typical JPEG files, so it need not be fast.
 181:fltk-1.3.4-1/jpeg/jdsample.c ****  * Nor, for that matter, is it particularly accurate: the algorithm is
 182:fltk-1.3.4-1/jpeg/jdsample.c ****  * simple replication of the input pixel onto the corresponding output
 183:fltk-1.3.4-1/jpeg/jdsample.c ****  * pixels.  The hi-falutin sampling literature refers to this as a
 184:fltk-1.3.4-1/jpeg/jdsample.c ****  * "box filter".  A box filter tends to introduce visible artifacts,
 185:fltk-1.3.4-1/jpeg/jdsample.c ****  * so if you are actually going to use 3:1 or 4:1 sampling ratios
 186:fltk-1.3.4-1/jpeg/jdsample.c ****  * you would be well advised to improve this code.
 187:fltk-1.3.4-1/jpeg/jdsample.c ****  */
 188:fltk-1.3.4-1/jpeg/jdsample.c **** 
 189:fltk-1.3.4-1/jpeg/jdsample.c **** METHODDEF(void)
 190:fltk-1.3.4-1/jpeg/jdsample.c **** int_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
 191:fltk-1.3.4-1/jpeg/jdsample.c **** 	      JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
 192:fltk-1.3.4-1/jpeg/jdsample.c **** {
 193:fltk-1.3.4-1/jpeg/jdsample.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 194:fltk-1.3.4-1/jpeg/jdsample.c ****   JSAMPARRAY output_data = *output_data_ptr;
 195:fltk-1.3.4-1/jpeg/jdsample.c ****   register JSAMPROW inptr, outptr;
 196:fltk-1.3.4-1/jpeg/jdsample.c ****   register JSAMPLE invalue;
 197:fltk-1.3.4-1/jpeg/jdsample.c ****   register int h;
 198:fltk-1.3.4-1/jpeg/jdsample.c ****   JSAMPROW outend;
 199:fltk-1.3.4-1/jpeg/jdsample.c ****   int h_expand, v_expand;
 200:fltk-1.3.4-1/jpeg/jdsample.c ****   int inrow, outrow;
 201:fltk-1.3.4-1/jpeg/jdsample.c **** 
 202:fltk-1.3.4-1/jpeg/jdsample.c ****   h_expand = upsample->h_expand[compptr->component_index];
 203:fltk-1.3.4-1/jpeg/jdsample.c ****   v_expand = upsample->v_expand[compptr->component_index];
 204:fltk-1.3.4-1/jpeg/jdsample.c **** 
 205:fltk-1.3.4-1/jpeg/jdsample.c ****   inrow = outrow = 0;
 206:fltk-1.3.4-1/jpeg/jdsample.c ****   while (outrow < cinfo->max_v_samp_factor) {
 207:fltk-1.3.4-1/jpeg/jdsample.c ****     /* Generate one output row with proper horizontal expansion */
 208:fltk-1.3.4-1/jpeg/jdsample.c ****     inptr = input_data[inrow];
 209:fltk-1.3.4-1/jpeg/jdsample.c ****     outptr = output_data[outrow];
 210:fltk-1.3.4-1/jpeg/jdsample.c ****     outend = outptr + cinfo->output_width;
 211:fltk-1.3.4-1/jpeg/jdsample.c ****     while (outptr < outend) {
 212:fltk-1.3.4-1/jpeg/jdsample.c ****       invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 213:fltk-1.3.4-1/jpeg/jdsample.c ****       for (h = h_expand; h > 0; h--) {
 214:fltk-1.3.4-1/jpeg/jdsample.c **** 	*outptr++ = invalue;
 215:fltk-1.3.4-1/jpeg/jdsample.c ****       }
 216:fltk-1.3.4-1/jpeg/jdsample.c ****     }
 217:fltk-1.3.4-1/jpeg/jdsample.c ****     /* Generate any additional output rows by duplicating the first one */
 218:fltk-1.3.4-1/jpeg/jdsample.c ****     if (v_expand > 1) {
 219:fltk-1.3.4-1/jpeg/jdsample.c ****       jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 220:fltk-1.3.4-1/jpeg/jdsample.c **** 			v_expand-1, cinfo->output_width);
 221:fltk-1.3.4-1/jpeg/jdsample.c ****     }
 222:fltk-1.3.4-1/jpeg/jdsample.c ****     inrow++;
 223:fltk-1.3.4-1/jpeg/jdsample.c ****     outrow += v_expand;
 224:fltk-1.3.4-1/jpeg/jdsample.c ****   }
 225:fltk-1.3.4-1/jpeg/jdsample.c **** }
 226:fltk-1.3.4-1/jpeg/jdsample.c **** 
 227:fltk-1.3.4-1/jpeg/jdsample.c **** 
 228:fltk-1.3.4-1/jpeg/jdsample.c **** /*
 229:fltk-1.3.4-1/jpeg/jdsample.c ****  * Fast processing for the common case of 2:1 horizontal and 1:1 vertical.
 230:fltk-1.3.4-1/jpeg/jdsample.c ****  * It's still a box filter.
 231:fltk-1.3.4-1/jpeg/jdsample.c ****  */
 232:fltk-1.3.4-1/jpeg/jdsample.c **** 
 233:fltk-1.3.4-1/jpeg/jdsample.c **** METHODDEF(void)
 234:fltk-1.3.4-1/jpeg/jdsample.c **** h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
 235:fltk-1.3.4-1/jpeg/jdsample.c **** 	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
 236:fltk-1.3.4-1/jpeg/jdsample.c **** {
 275              		.loc 1 236 1 is_stmt 1 view -0
 276              		.cfi_startproc
 277              		.loc 1 236 1 is_stmt 0 view .LVU86
 278 0000 F30F1EFA 		endbr64
 237:fltk-1.3.4-1/jpeg/jdsample.c ****   JSAMPARRAY output_data = *output_data_ptr;
 279              		.loc 1 237 3 is_stmt 1 view .LVU87
 238:fltk-1.3.4-1/jpeg/jdsample.c ****   register JSAMPROW inptr, outptr;
 239:fltk-1.3.4-1/jpeg/jdsample.c ****   register JSAMPLE invalue;
 240:fltk-1.3.4-1/jpeg/jdsample.c ****   JSAMPROW outend;
 241:fltk-1.3.4-1/jpeg/jdsample.c ****   int outrow;
 242:fltk-1.3.4-1/jpeg/jdsample.c **** 
 243:fltk-1.3.4-1/jpeg/jdsample.c ****   for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 280              		.loc 1 243 3 is_stmt 0 view .LVU88
 281 0004 8B87A401 		movl	420(%rdi), %eax
 281      0000
 237:fltk-1.3.4-1/jpeg/jdsample.c ****   JSAMPARRAY output_data = *output_data_ptr;
 282              		.loc 1 237 14 view .LVU89
 283 000a 4C8B11   		movq	(%rcx), %r10
 284              	.LVL27:
 238:fltk-1.3.4-1/jpeg/jdsample.c ****   register JSAMPROW inptr, outptr;
 285              		.loc 1 238 3 is_stmt 1 view .LVU90
 239:fltk-1.3.4-1/jpeg/jdsample.c ****   JSAMPROW outend;
 286              		.loc 1 239 3 view .LVU91
 240:fltk-1.3.4-1/jpeg/jdsample.c ****   int outrow;
 287              		.loc 1 240 3 view .LVU92
 241:fltk-1.3.4-1/jpeg/jdsample.c **** 
 288              		.loc 1 241 3 view .LVU93
 289              		.loc 1 243 3 view .LVU94
 290              		.loc 1 243 20 view .LVU95
 291              		.loc 1 243 3 is_stmt 0 view .LVU96
 292 000d 85C0     		testl	%eax, %eax
 293 000f 7E44     		jle	.L15
 294 0011 4531C9   		xorl	%r9d, %r9d
 295              	.LVL28:
 296              		.p2align 4,,10
 297 0014 0F1F4000 		.p2align 3
 298              	.L19:
 244:fltk-1.3.4-1/jpeg/jdsample.c ****     inptr = input_data[outrow];
 299              		.loc 1 244 5 is_stmt 1 view .LVU97
 245:fltk-1.3.4-1/jpeg/jdsample.c ****     outptr = output_data[outrow];
 300              		.loc 1 245 12 is_stmt 0 view .LVU98
 301 0018 4B8B04CA 		movq	(%r10,%r9,8), %rax
 246:fltk-1.3.4-1/jpeg/jdsample.c ****     outend = outptr + cinfo->output_width;
 302              		.loc 1 246 28 view .LVU99
 303 001c 448B8788 		movl	136(%rdi), %r8d
 303      000000
 244:fltk-1.3.4-1/jpeg/jdsample.c ****     inptr = input_data[outrow];
 304              		.loc 1 244 11 view .LVU100
 305 0023 4A8B0CCA 		movq	(%rdx,%r9,8), %rcx
 306              	.LVL29:
 245:fltk-1.3.4-1/jpeg/jdsample.c ****     outptr = output_data[outrow];
 307              		.loc 1 245 5 is_stmt 1 view .LVU101
 308              		.loc 1 246 5 view .LVU102
 309              		.loc 1 246 12 is_stmt 0 view .LVU103
 310 0027 4901C0   		addq	%rax, %r8
 311              	.LVL30:
 247:fltk-1.3.4-1/jpeg/jdsample.c ****     while (outptr < outend) {
 312              		.loc 1 247 5 is_stmt 1 view .LVU104
 313              		.loc 1 247 11 view .LVU105
 314 002a 4C39C0   		cmpq	%r8, %rax
 315 002d 7319     		jnb	.L17
 316 002f 90       		.p2align 4,,10
 317              		.p2align 3
 318              	.L18:
 248:fltk-1.3.4-1/jpeg/jdsample.c ****       invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 319              		.loc 1 248 7 view .LVU106
 320              		.loc 1 248 15 is_stmt 0 view .LVU107
 321 0030 0FB631   		movzbl	(%rcx), %esi
 322 0033 4883C002 		addq	$2, %rax
 323              	.LVL31:
 324              		.loc 1 248 23 view .LVU108
 325 0037 4883C101 		addq	$1, %rcx
 326              	.LVL32:
 249:fltk-1.3.4-1/jpeg/jdsample.c ****       *outptr++ = invalue;
 327              		.loc 1 249 7 is_stmt 1 view .LVU109
 328              		.loc 1 249 17 is_stmt 0 view .LVU110
 329 003b 408870FE 		movb	%sil, -2(%rax)
 250:fltk-1.3.4-1/jpeg/jdsample.c ****       *outptr++ = invalue;
 330              		.loc 1 250 7 is_stmt 1 view .LVU111
 331              	.LVL33:
 332              		.loc 1 250 17 is_stmt 0 view .LVU112
 333 003f 408870FF 		movb	%sil, -1(%rax)
 247:fltk-1.3.4-1/jpeg/jdsample.c ****       invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 334              		.loc 1 247 11 is_stmt 1 view .LVU113
 335 0043 4939C0   		cmpq	%rax, %r8
 336 0046 77E8     		ja	.L18
 337              	.LVL34:
 338              	.L17:
 243:fltk-1.3.4-1/jpeg/jdsample.c ****     inptr = input_data[outrow];
 339              		.loc 1 243 55 view .LVU114
 243:fltk-1.3.4-1/jpeg/jdsample.c ****     inptr = input_data[outrow];
 340              		.loc 1 243 20 view .LVU115
 341 0048 4983C101 		addq	$1, %r9
 342              	.LVL35:
 243:fltk-1.3.4-1/jpeg/jdsample.c ****     inptr = input_data[outrow];
 343              		.loc 1 243 3 is_stmt 0 view .LVU116
 344 004c 44398FA4 		cmpl	%r9d, 420(%rdi)
 344      010000
 345 0053 7FC3     		jg	.L19
 346              	.LVL36:
 347              	.L15:
 251:fltk-1.3.4-1/jpeg/jdsample.c ****     }
 252:fltk-1.3.4-1/jpeg/jdsample.c ****   }
 253:fltk-1.3.4-1/jpeg/jdsample.c **** }
 348              		.loc 1 253 1 view .LVU117
 349 0055 C3       		ret
 350              		.cfi_endproc
 351              	.LFE56:
 353              		.section	.text.int_upsample,"ax",@progbits
 354              		.p2align 4
 356              	int_upsample:
 357              	.LVL37:
 358              	.LFB55:
 192:fltk-1.3.4-1/jpeg/jdsample.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 359              		.loc 1 192 1 is_stmt 1 view -0
 360              		.cfi_startproc
 192:fltk-1.3.4-1/jpeg/jdsample.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 361              		.loc 1 192 1 is_stmt 0 view .LVU119
 362 0000 F30F1EFA 		endbr64
 193:fltk-1.3.4-1/jpeg/jdsample.c ****   JSAMPARRAY output_data = *output_data_ptr;
 363              		.loc 1 193 3 is_stmt 1 view .LVU120
 192:fltk-1.3.4-1/jpeg/jdsample.c ****   my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 364              		.loc 1 192 1 is_stmt 0 view .LVU121
 365 0004 4157     		pushq	%r15
 366              		.cfi_def_cfa_offset 16
 367              		.cfi_offset 15, -16
 368 0006 4156     		pushq	%r14
 369              		.cfi_def_cfa_offset 24
 370              		.cfi_offset 14, -24
 371 0008 4989FE   		movq	%rdi, %r14
 372 000b 4155     		pushq	%r13
 373              		.cfi_def_cfa_offset 32
 374              		.cfi_offset 13, -32
 375 000d 4154     		pushq	%r12
 376              		.cfi_def_cfa_offset 40
 377              		.cfi_offset 12, -40
 378 000f 4989D4   		movq	%rdx, %r12
 379 0012 55       		pushq	%rbp
 380              		.cfi_def_cfa_offset 48
 381              		.cfi_offset 6, -48
 382 0013 53       		pushq	%rbx
 383              		.cfi_def_cfa_offset 56
 384              		.cfi_offset 3, -56
 385 0014 4883EC28 		subq	$40, %rsp
 386              		.cfi_def_cfa_offset 96
 193:fltk-1.3.4-1/jpeg/jdsample.c ****   JSAMPARRAY output_data = *output_data_ptr;
 387              		.loc 1 193 19 view .LVU122
 388 0018 488B9780 		movq	640(%rdi), %rdx
 388      020000
 389              	.LVL38:
 194:fltk-1.3.4-1/jpeg/jdsample.c ****   register JSAMPROW inptr, outptr;
 390              		.loc 1 194 3 is_stmt 1 view .LVU123
 202:fltk-1.3.4-1/jpeg/jdsample.c ****   v_expand = upsample->v_expand[compptr->component_index];
 391              		.loc 1 202 32 is_stmt 0 view .LVU124
 392 001f 48634604 		movslq	4(%rsi), %rax
 194:fltk-1.3.4-1/jpeg/jdsample.c ****   register JSAMPROW inptr, outptr;
 393              		.loc 1 194 14 view .LVU125
 394 0023 488B39   		movq	(%rcx), %rdi
 395              	.LVL39:
 195:fltk-1.3.4-1/jpeg/jdsample.c ****   register JSAMPLE invalue;
 396              		.loc 1 195 3 is_stmt 1 view .LVU126
 196:fltk-1.3.4-1/jpeg/jdsample.c ****   register int h;
 397              		.loc 1 196 3 view .LVU127
 197:fltk-1.3.4-1/jpeg/jdsample.c ****   JSAMPROW outend;
 398              		.loc 1 197 3 view .LVU128
 198:fltk-1.3.4-1/jpeg/jdsample.c ****   int h_expand, v_expand;
 399              		.loc 1 198 3 view .LVU129
 199:fltk-1.3.4-1/jpeg/jdsample.c ****   int inrow, outrow;
 400              		.loc 1 199 3 view .LVU130
 200:fltk-1.3.4-1/jpeg/jdsample.c **** 
 401              		.loc 1 200 3 view .LVU131
 202:fltk-1.3.4-1/jpeg/jdsample.c ****   v_expand = upsample->v_expand[compptr->component_index];
 402              		.loc 1 202 3 view .LVU132
 202:fltk-1.3.4-1/jpeg/jdsample.c ****   v_expand = upsample->v_expand[compptr->component_index];
 403              		.loc 1 202 12 is_stmt 0 view .LVU133
 404 0026 0FB69C02 		movzbl	232(%rdx,%rax), %ebx
 404      E8000000 
 405              	.LVL40:
 203:fltk-1.3.4-1/jpeg/jdsample.c **** 
 406              		.loc 1 203 3 is_stmt 1 view .LVU134
 203:fltk-1.3.4-1/jpeg/jdsample.c **** 
 407              		.loc 1 203 32 is_stmt 0 view .LVU135
 408 002e 440FB6BC 		movzbl	242(%rdx,%rax), %r15d
 408      02F20000 
 408      00
 409              	.LVL41:
 205:fltk-1.3.4-1/jpeg/jdsample.c ****   while (outrow < cinfo->max_v_samp_factor) {
 410              		.loc 1 205 3 is_stmt 1 view .LVU136
 206:fltk-1.3.4-1/jpeg/jdsample.c ****     /* Generate one output row with proper horizontal expansion */
 411              		.loc 1 206 3 view .LVU137
 206:fltk-1.3.4-1/jpeg/jdsample.c ****     /* Generate one output row with proper horizontal expansion */
 412              		.loc 1 206 9 view .LVU138
 413 0037 418B86A4 		movl	420(%r14), %eax
 413      010000
 414 003e 85C0     		testl	%eax, %eax
 415 0040 0F8EBD00 		jle	.L22
 415      0000
 416 0046 4C89F8   		movq	%r15, %rax
 417 0049 4989FD   		movq	%rdi, %r13
 205:fltk-1.3.4-1/jpeg/jdsample.c ****   while (outrow < cinfo->max_v_samp_factor) {
 418              		.loc 1 205 18 is_stmt 0 view .LVU139
 419 004c 31F6     		xorl	%esi, %esi
 420              	.LVL42:
 205:fltk-1.3.4-1/jpeg/jdsample.c ****   while (outrow < cinfo->max_v_samp_factor) {
 421              		.loc 1 205 18 view .LVU140
 422 004e 48C1E003 		salq	$3, %rax
 423 0052 48894424 		movq	%rax, 8(%rsp)
 423      08
 424 0057 8D43FF   		leal	-1(%rbx), %eax
 425 005a 89442418 		movl	%eax, 24(%rsp)
 426 005e 4863E8   		movslq	%eax, %rbp
 427 0061 4883C501 		addq	$1, %rbp
 428              	.LVL43:
 429              		.p2align 4,,10
 430 0065 0F1F00   		.p2align 3
 431              	.L29:
 208:fltk-1.3.4-1/jpeg/jdsample.c ****     outptr = output_data[outrow];
 432              		.loc 1 208 5 is_stmt 1 view .LVU141
 209:fltk-1.3.4-1/jpeg/jdsample.c ****     outend = outptr + cinfo->output_width;
 433              		.loc 1 209 12 is_stmt 0 view .LVU142
 434 0068 4D8B4500 		movq	0(%r13), %r8
 210:fltk-1.3.4-1/jpeg/jdsample.c ****     while (outptr < outend) {
 435              		.loc 1 210 28 view .LVU143
 436 006c 458B9688 		movl	136(%r14), %r10d
 436      000000
 208:fltk-1.3.4-1/jpeg/jdsample.c ****     outptr = output_data[outrow];
 437              		.loc 1 208 11 view .LVU144
 438 0073 4D8B0C24 		movq	(%r12), %r9
 439              	.LVL44:
 209:fltk-1.3.4-1/jpeg/jdsample.c ****     outend = outptr + cinfo->output_width;
 440              		.loc 1 209 5 is_stmt 1 view .LVU145
 210:fltk-1.3.4-1/jpeg/jdsample.c ****     while (outptr < outend) {
 441              		.loc 1 210 5 view .LVU146
 210:fltk-1.3.4-1/jpeg/jdsample.c ****     while (outptr < outend) {
 442              		.loc 1 210 12 is_stmt 0 view .LVU147
 443 0077 4D01C2   		addq	%r8, %r10
 444              	.LVL45:
 211:fltk-1.3.4-1/jpeg/jdsample.c ****       invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 445              		.loc 1 211 5 is_stmt 1 view .LVU148
 211:fltk-1.3.4-1/jpeg/jdsample.c ****       invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 446              		.loc 1 211 11 view .LVU149
 447 007a 4D39D0   		cmpq	%r10, %r8
 448 007d 733D     		jnb	.L24
 449 007f 448B5C24 		movl	24(%rsp), %r11d
 449      18
 450 0084 4983C301 		addq	$1, %r11
 451 0088 0F1F8400 		.p2align 4,,10
 451      00000000 
 452              		.p2align 3
 453              	.L27:
 212:fltk-1.3.4-1/jpeg/jdsample.c ****       for (h = h_expand; h > 0; h--) {
 454              		.loc 1 212 7 view .LVU150
 212:fltk-1.3.4-1/jpeg/jdsample.c ****       for (h = h_expand; h > 0; h--) {
 455              		.loc 1 212 23 is_stmt 0 view .LVU151
 456 0090 4983C101 		addq	$1, %r9
 457              	.LVL46:
 212:fltk-1.3.4-1/jpeg/jdsample.c ****       for (h = h_expand; h > 0; h--) {
 458              		.loc 1 212 15 view .LVU152
 459 0094 410FB651 		movzbl	-1(%r9), %edx
 459      FF
 460              	.LVL47:
 213:fltk-1.3.4-1/jpeg/jdsample.c **** 	*outptr++ = invalue;
 461              		.loc 1 213 7 is_stmt 1 view .LVU153
 213:fltk-1.3.4-1/jpeg/jdsample.c **** 	*outptr++ = invalue;
 462              		.loc 1 213 26 view .LVU154
 213:fltk-1.3.4-1/jpeg/jdsample.c **** 	*outptr++ = invalue;
 463              		.loc 1 213 7 is_stmt 0 view .LVU155
 464 0099 85DB     		testl	%ebx, %ebx
 465 009b 741A     		je	.L25
 213:fltk-1.3.4-1/jpeg/jdsample.c **** 	*outptr++ = invalue;
 466              		.loc 1 213 7 view .LVU156
 467 009d 4B8D0C18 		leaq	(%r8,%r11), %rcx
 468 00a1 4C89C0   		movq	%r8, %rax
 469              	.LVL48:
 470              		.p2align 4,,10
 471 00a4 0F1F4000 		.p2align 3
 472              	.L26:
 214:fltk-1.3.4-1/jpeg/jdsample.c ****       }
 473              		.loc 1 214 2 is_stmt 1 discriminator 3 view .LVU157
 214:fltk-1.3.4-1/jpeg/jdsample.c ****       }
 474              		.loc 1 214 9 is_stmt 0 discriminator 3 view .LVU158
 475 00a8 4883C001 		addq	$1, %rax
 476              	.LVL49:
 214:fltk-1.3.4-1/jpeg/jdsample.c ****       }
 477              		.loc 1 214 12 discriminator 3 view .LVU159
 478 00ac 8850FF   		movb	%dl, -1(%rax)
 213:fltk-1.3.4-1/jpeg/jdsample.c **** 	*outptr++ = invalue;
 479              		.loc 1 213 33 is_stmt 1 discriminator 3 view .LVU160
 480              	.LVL50:
 213:fltk-1.3.4-1/jpeg/jdsample.c **** 	*outptr++ = invalue;
 481              		.loc 1 213 26 discriminator 3 view .LVU161
 213:fltk-1.3.4-1/jpeg/jdsample.c **** 	*outptr++ = invalue;
 482              		.loc 1 213 7 is_stmt 0 discriminator 3 view .LVU162
 483 00af 4839C1   		cmpq	%rax, %rcx
 484 00b2 75F4     		jne	.L26
 213:fltk-1.3.4-1/jpeg/jdsample.c **** 	*outptr++ = invalue;
 485              		.loc 1 213 7 discriminator 3 view .LVU163
 486 00b4 4901E8   		addq	%rbp, %r8
 487              	.LVL51:
 488              	.L25:
 211:fltk-1.3.4-1/jpeg/jdsample.c ****       invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 489              		.loc 1 211 11 is_stmt 1 view .LVU164
 490 00b7 4D39C2   		cmpq	%r8, %r10
 491 00ba 77D4     		ja	.L27
 492              	.LVL52:
 493              	.L24:
 218:fltk-1.3.4-1/jpeg/jdsample.c ****       jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 494              		.loc 1 218 5 view .LVU165
 218:fltk-1.3.4-1/jpeg/jdsample.c ****       jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 495              		.loc 1 218 8 is_stmt 0 view .LVU166
 496 00bc 4183FF01 		cmpl	$1, %r15d
 497 00c0 7E28     		jle	.L28
 219:fltk-1.3.4-1/jpeg/jdsample.c **** 			v_expand-1, cinfo->output_width);
 498              		.loc 1 219 7 is_stmt 1 view .LVU167
 499 00c2 8D4E01   		leal	1(%rsi), %ecx
 500 00c5 4889FA   		movq	%rdi, %rdx
 501 00c8 458D47FF 		leal	-1(%r15), %r8d
 502              	.LVL53:
 219:fltk-1.3.4-1/jpeg/jdsample.c **** 			v_expand-1, cinfo->output_width);
 503              		.loc 1 219 7 is_stmt 0 view .LVU168
 504 00cc 8974241C 		movl	%esi, 28(%rsp)
 505 00d0 458B8E88 		movl	136(%r14), %r9d
 505      000000
 506              	.LVL54:
 219:fltk-1.3.4-1/jpeg/jdsample.c **** 			v_expand-1, cinfo->output_width);
 507              		.loc 1 219 7 view .LVU169
 508 00d7 48897C24 		movq	%rdi, 16(%rsp)
 508      10
 509 00dc E8000000 		call	jcopy_sample_rows@PLT
 509      00
 510              	.LVL55:
 219:fltk-1.3.4-1/jpeg/jdsample.c **** 			v_expand-1, cinfo->output_width);
 511              		.loc 1 219 7 view .LVU170
 512 00e1 8B74241C 		movl	28(%rsp), %esi
 513 00e5 488B7C24 		movq	16(%rsp), %rdi
 513      10
 514              	.LVL56:
 515              	.L28:
 222:fltk-1.3.4-1/jpeg/jdsample.c ****     outrow += v_expand;
 516              		.loc 1 222 5 is_stmt 1 view .LVU171
 223:fltk-1.3.4-1/jpeg/jdsample.c ****   }
 517              		.loc 1 223 5 view .LVU172
 223:fltk-1.3.4-1/jpeg/jdsample.c ****   }
 518              		.loc 1 223 12 is_stmt 0 view .LVU173
 519 00ea 4401FE   		addl	%r15d, %esi
 520              	.LVL57:
 206:fltk-1.3.4-1/jpeg/jdsample.c ****     /* Generate one output row with proper horizontal expansion */
 521              		.loc 1 206 9 is_stmt 1 view .LVU174
 522 00ed 4983C408 		addq	$8, %r12
 523 00f1 4C036C24 		addq	8(%rsp), %r13
 523      08
 524 00f6 4139B6A4 		cmpl	%esi, 420(%r14)
 524      010000
 525 00fd 0F8F65FF 		jg	.L29
 525      FFFF
 526              	.LVL58:
 527              	.L22:
 225:fltk-1.3.4-1/jpeg/jdsample.c **** 
 528              		.loc 1 225 1 is_stmt 0 view .LVU175
 529 0103 4883C428 		addq	$40, %rsp
 530              		.cfi_def_cfa_offset 56
 531 0107 5B       		popq	%rbx
 532              		.cfi_def_cfa_offset 48
 533              	.LVL59:
 225:fltk-1.3.4-1/jpeg/jdsample.c **** 
 534              		.loc 1 225 1 view .LVU176
 535 0108 5D       		popq	%rbp
 536              		.cfi_def_cfa_offset 40
 537 0109 415C     		popq	%r12
 538              		.cfi_def_cfa_offset 32
 539 010b 415D     		popq	%r13
 540              		.cfi_def_cfa_offset 24
 541 010d 415E     		popq	%r14
 542              		.cfi_def_cfa_offset 16
 543              	.LVL60:
 225:fltk-1.3.4-1/jpeg/jdsample.c **** 
 544              		.loc 1 225 1 view .LVU177
 545 010f 415F     		popq	%r15
 546              		.cfi_def_cfa_offset 8
 547              	.LVL61:
 225:fltk-1.3.4-1/jpeg/jdsample.c **** 
 548              		.loc 1 225 1 view .LVU178
 549 0111 C3       		ret
 550              		.cfi_endproc
 551              	.LFE55:
 553              		.section	.text.h2v2_upsample,"ax",@progbits
 554              		.p2align 4
 556              	h2v2_upsample:
 557              	.LVL62:
 558              	.LFB57:
 254:fltk-1.3.4-1/jpeg/jdsample.c **** 
 255:fltk-1.3.4-1/jpeg/jdsample.c **** 
 256:fltk-1.3.4-1/jpeg/jdsample.c **** /*
 257:fltk-1.3.4-1/jpeg/jdsample.c ****  * Fast processing for the common case of 2:1 horizontal and 2:1 vertical.
 258:fltk-1.3.4-1/jpeg/jdsample.c ****  * It's still a box filter.
 259:fltk-1.3.4-1/jpeg/jdsample.c ****  */
 260:fltk-1.3.4-1/jpeg/jdsample.c **** 
 261:fltk-1.3.4-1/jpeg/jdsample.c **** METHODDEF(void)
 262:fltk-1.3.4-1/jpeg/jdsample.c **** h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
 263:fltk-1.3.4-1/jpeg/jdsample.c **** 	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
 264:fltk-1.3.4-1/jpeg/jdsample.c **** {
 559              		.loc 1 264 1 is_stmt 1 view -0
 560              		.cfi_startproc
 561              		.loc 1 264 1 is_stmt 0 view .LVU180
 562 0000 F30F1EFA 		endbr64
 265:fltk-1.3.4-1/jpeg/jdsample.c ****   JSAMPARRAY output_data = *output_data_ptr;
 563              		.loc 1 265 3 is_stmt 1 view .LVU181
 264:fltk-1.3.4-1/jpeg/jdsample.c ****   JSAMPARRAY output_data = *output_data_ptr;
 564              		.loc 1 264 1 is_stmt 0 view .LVU182
 565 0004 4155     		pushq	%r13
 566              		.cfi_def_cfa_offset 16
 567              		.cfi_offset 13, -16
 568 0006 4154     		pushq	%r12
 569              		.cfi_def_cfa_offset 24
 570              		.cfi_offset 12, -24
 571 0008 55       		pushq	%rbp
 572              		.cfi_def_cfa_offset 32
 573              		.cfi_offset 6, -32
 574 0009 53       		pushq	%rbx
 575              		.cfi_def_cfa_offset 40
 576              		.cfi_offset 3, -40
 577 000a 4883EC08 		subq	$8, %rsp
 578              		.cfi_def_cfa_offset 48
 266:fltk-1.3.4-1/jpeg/jdsample.c ****   register JSAMPROW inptr, outptr;
 267:fltk-1.3.4-1/jpeg/jdsample.c ****   register JSAMPLE invalue;
 268:fltk-1.3.4-1/jpeg/jdsample.c ****   JSAMPROW outend;
 269:fltk-1.3.4-1/jpeg/jdsample.c ****   int inrow, outrow;
 270:fltk-1.3.4-1/jpeg/jdsample.c **** 
 271:fltk-1.3.4-1/jpeg/jdsample.c ****   inrow = outrow = 0;
 272:fltk-1.3.4-1/jpeg/jdsample.c ****   while (outrow < cinfo->max_v_samp_factor) {
 579              		.loc 1 272 9 view .LVU183
 580 000e 8B87A401 		movl	420(%rdi), %eax
 580      0000
 265:fltk-1.3.4-1/jpeg/jdsample.c ****   register JSAMPROW inptr, outptr;
 581              		.loc 1 265 14 view .LVU184
 582 0014 4C8B29   		movq	(%rcx), %r13
 583              	.LVL63:
 266:fltk-1.3.4-1/jpeg/jdsample.c ****   register JSAMPROW inptr, outptr;
 584              		.loc 1 266 3 is_stmt 1 view .LVU185
 267:fltk-1.3.4-1/jpeg/jdsample.c ****   JSAMPROW outend;
 585              		.loc 1 267 3 view .LVU186
 268:fltk-1.3.4-1/jpeg/jdsample.c ****   int inrow, outrow;
 586              		.loc 1 268 3 view .LVU187
 269:fltk-1.3.4-1/jpeg/jdsample.c **** 
 587              		.loc 1 269 3 view .LVU188
 271:fltk-1.3.4-1/jpeg/jdsample.c ****   while (outrow < cinfo->max_v_samp_factor) {
 588              		.loc 1 271 3 view .LVU189
 589              		.loc 1 272 3 view .LVU190
 590              		.loc 1 272 9 view .LVU191
 591 0017 85C0     		testl	%eax, %eax
 592 0019 7E7A     		jle	.L37
 593 001b 4989FC   		movq	%rdi, %r12
 594 001e 4889D3   		movq	%rdx, %rbx
 595 0021 31ED     		xorl	%ebp, %ebp
 596              	.LVL64:
 597              		.p2align 4,,10
 598 0023 0F1F4400 		.p2align 3
 598      00
 599              	.L38:
 273:fltk-1.3.4-1/jpeg/jdsample.c ****     inptr = input_data[inrow];
 274:fltk-1.3.4-1/jpeg/jdsample.c ****     outptr = output_data[outrow];
 600              		.loc 1 274 12 is_stmt 0 view .LVU192
 601 0028 498B44ED 		movq	0(%r13,%rbp,8), %rax
 601      00
 273:fltk-1.3.4-1/jpeg/jdsample.c ****     inptr = input_data[inrow];
 602              		.loc 1 273 11 view .LVU193
 603 002d 488B14AB 		movq	(%rbx,%rbp,4), %rdx
 604 0031 89E9     		movl	%ebp, %ecx
 605 0033 4189EA   		movl	%ebp, %r10d
 606              	.LVL65:
 273:fltk-1.3.4-1/jpeg/jdsample.c ****     inptr = input_data[inrow];
 607              		.loc 1 273 5 is_stmt 1 view .LVU194
 608              		.loc 1 274 5 view .LVU195
 275:fltk-1.3.4-1/jpeg/jdsample.c ****     outend = outptr + cinfo->output_width;
 609              		.loc 1 275 5 view .LVU196
 610              		.loc 1 275 28 is_stmt 0 view .LVU197
 611 0036 418BBC24 		movl	136(%r12), %edi
 611      88000000 
 612 003e 4989F9   		movq	%rdi, %r9
 613              		.loc 1 275 12 view .LVU198
 614 0041 4801C7   		addq	%rax, %rdi
 615              	.LVL66:
 276:fltk-1.3.4-1/jpeg/jdsample.c ****     while (outptr < outend) {
 616              		.loc 1 276 5 is_stmt 1 view .LVU199
 617              		.loc 1 276 11 view .LVU200
 618 0044 4839F8   		cmpq	%rdi, %rax
 619 0047 7327     		jnb	.L39
 620 0049 0F1F8000 		.p2align 4,,10
 620      000000
 621              		.p2align 3
 622              	.L40:
 277:fltk-1.3.4-1/jpeg/jdsample.c ****       invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 623              		.loc 1 277 7 view .LVU201
 624              		.loc 1 277 15 is_stmt 0 view .LVU202
 625 0050 0FB632   		movzbl	(%rdx), %esi
 626 0053 4883C002 		addq	$2, %rax
 627              	.LVL67:
 628              		.loc 1 277 23 view .LVU203
 629 0057 4883C201 		addq	$1, %rdx
 630              	.LVL68:
 278:fltk-1.3.4-1/jpeg/jdsample.c ****       *outptr++ = invalue;
 631              		.loc 1 278 7 is_stmt 1 view .LVU204
 632              		.loc 1 278 17 is_stmt 0 view .LVU205
 633 005b 408870FE 		movb	%sil, -2(%rax)
 279:fltk-1.3.4-1/jpeg/jdsample.c ****       *outptr++ = invalue;
 634              		.loc 1 279 7 is_stmt 1 view .LVU206
 635              	.LVL69:
 636              		.loc 1 279 17 is_stmt 0 view .LVU207
 637 005f 408870FF 		movb	%sil, -1(%rax)
 276:fltk-1.3.4-1/jpeg/jdsample.c ****       invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 638              		.loc 1 276 11 is_stmt 1 view .LVU208
 639 0063 4839C7   		cmpq	%rax, %rdi
 640 0066 77E8     		ja	.L40
 641 0068 458B8C24 		movl	136(%r12), %r9d
 641      88000000 
 642              	.LVL70:
 643              	.L39:
 280:fltk-1.3.4-1/jpeg/jdsample.c ****     }
 281:fltk-1.3.4-1/jpeg/jdsample.c ****     jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 644              		.loc 1 281 5 view .LVU209
 645 0070 83C101   		addl	$1, %ecx
 646              	.LVL71:
 647              		.loc 1 281 5 is_stmt 0 view .LVU210
 648 0073 41B80100 		movl	$1, %r8d
 648      0000
 649 0079 4C89EA   		movq	%r13, %rdx
 650              	.LVL72:
 651              		.loc 1 281 5 view .LVU211
 652 007c 4489D6   		movl	%r10d, %esi
 653 007f 4C89EF   		movq	%r13, %rdi
 654              	.LVL73:
 655              		.loc 1 281 5 view .LVU212
 656 0082 4883C502 		addq	$2, %rbp
 657              	.LVL74:
 658              		.loc 1 281 5 view .LVU213
 659 0086 E8000000 		call	jcopy_sample_rows@PLT
 659      00
 660              	.LVL75:
 282:fltk-1.3.4-1/jpeg/jdsample.c **** 		      1, cinfo->output_width);
 283:fltk-1.3.4-1/jpeg/jdsample.c ****     inrow++;
 661              		.loc 1 283 5 is_stmt 1 view .LVU214
 284:fltk-1.3.4-1/jpeg/jdsample.c ****     outrow += 2;
 662              		.loc 1 284 5 view .LVU215
 272:fltk-1.3.4-1/jpeg/jdsample.c ****     inptr = input_data[inrow];
 663              		.loc 1 272 9 view .LVU216
 664 008b 4139AC24 		cmpl	%ebp, 420(%r12)
 664      A4010000 
 665 0093 7F93     		jg	.L38
 666              	.LVL76:
 667              	.L37:
 285:fltk-1.3.4-1/jpeg/jdsample.c ****   }
 286:fltk-1.3.4-1/jpeg/jdsample.c **** }
 668              		.loc 1 286 1 is_stmt 0 view .LVU217
 669 0095 4883C408 		addq	$8, %rsp
 670              		.cfi_def_cfa_offset 40
 671 0099 5B       		popq	%rbx
 672              		.cfi_def_cfa_offset 32
 673 009a 5D       		popq	%rbp
 674              		.cfi_def_cfa_offset 24
 675 009b 415C     		popq	%r12
 676              		.cfi_def_cfa_offset 16
 677 009d 415D     		popq	%r13
 678              		.cfi_def_cfa_offset 8
 679              	.LVL77:
 680              		.loc 1 286 1 view .LVU218
 681 009f C3       		ret
 682              		.cfi_endproc
 683              	.LFE57:
 685              		.section	.text.jinit_upsampler,"ax",@progbits
 686              		.p2align 4
 687              		.globl	jinit_upsampler
 689              	jinit_upsampler:
 690              	.LVL78:
 691              	.LFB58:
 287:fltk-1.3.4-1/jpeg/jdsample.c **** 
 288:fltk-1.3.4-1/jpeg/jdsample.c **** 
 289:fltk-1.3.4-1/jpeg/jdsample.c **** /*
 290:fltk-1.3.4-1/jpeg/jdsample.c ****  * Module initialization routine for upsampling.
 291:fltk-1.3.4-1/jpeg/jdsample.c ****  */
 292:fltk-1.3.4-1/jpeg/jdsample.c **** 
 293:fltk-1.3.4-1/jpeg/jdsample.c **** GLOBAL(void)
 294:fltk-1.3.4-1/jpeg/jdsample.c **** jinit_upsampler (j_decompress_ptr cinfo)
 295:fltk-1.3.4-1/jpeg/jdsample.c **** {
 692              		.loc 1 295 1 is_stmt 1 view -0
 693              		.cfi_startproc
 694              		.loc 1 295 1 is_stmt 0 view .LVU220
 695 0000 F30F1EFA 		endbr64
 296:fltk-1.3.4-1/jpeg/jdsample.c ****   my_upsample_ptr upsample;
 696              		.loc 1 296 3 is_stmt 1 view .LVU221
 297:fltk-1.3.4-1/jpeg/jdsample.c ****   int ci;
 697              		.loc 1 297 3 view .LVU222
 298:fltk-1.3.4-1/jpeg/jdsample.c ****   jpeg_component_info * compptr;
 698              		.loc 1 298 3 view .LVU223
 299:fltk-1.3.4-1/jpeg/jdsample.c ****   boolean need_buffer;
 699              		.loc 1 299 3 view .LVU224
 300:fltk-1.3.4-1/jpeg/jdsample.c ****   int h_in_group, v_in_group, h_out_group, v_out_group;
 700              		.loc 1 300 3 view .LVU225
 301:fltk-1.3.4-1/jpeg/jdsample.c **** 
 302:fltk-1.3.4-1/jpeg/jdsample.c ****   upsample = (my_upsample_ptr)
 701              		.loc 1 302 3 view .LVU226
 295:fltk-1.3.4-1/jpeg/jdsample.c ****   my_upsample_ptr upsample;
 702              		.loc 1 295 1 is_stmt 0 view .LVU227
 703 0004 4157     		pushq	%r15
 704              		.cfi_def_cfa_offset 16
 705              		.cfi_offset 15, -16
 303:fltk-1.3.4-1/jpeg/jdsample.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 706              		.loc 1 303 6 view .LVU228
 707 0006 BA000100 		movl	$256, %edx
 707      00
 708 000b BE010000 		movl	$1, %esi
 708      00
 295:fltk-1.3.4-1/jpeg/jdsample.c ****   my_upsample_ptr upsample;
 709              		.loc 1 295 1 view .LVU229
 710 0010 4156     		pushq	%r14
 711              		.cfi_def_cfa_offset 24
 712              		.cfi_offset 14, -24
 713 0012 4155     		pushq	%r13
 714              		.cfi_def_cfa_offset 32
 715              		.cfi_offset 13, -32
 716 0014 4154     		pushq	%r12
 717              		.cfi_def_cfa_offset 40
 718              		.cfi_offset 12, -40
 719 0016 55       		pushq	%rbp
 720              		.cfi_def_cfa_offset 48
 721              		.cfi_offset 6, -48
 722 0017 53       		pushq	%rbx
 723              		.cfi_def_cfa_offset 56
 724              		.cfi_offset 3, -56
 725 0018 4889FB   		movq	%rdi, %rbx
 726 001b 4883EC08 		subq	$8, %rsp
 727              		.cfi_def_cfa_offset 64
 728              		.loc 1 303 6 view .LVU230
 729 001f 488B4708 		movq	8(%rdi), %rax
 730 0023 FF10     		call	*(%rax)
 731              	.LVL79:
 304:fltk-1.3.4-1/jpeg/jdsample.c **** 				SIZEOF(my_upsampler));
 305:fltk-1.3.4-1/jpeg/jdsample.c ****   cinfo->upsample = (struct jpeg_upsampler *) upsample;
 732              		.loc 1 305 19 view .LVU231
 733 0025 48898380 		movq	%rax, 640(%rbx)
 733      020000
 303:fltk-1.3.4-1/jpeg/jdsample.c ****     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 734              		.loc 1 303 6 view .LVU232
 735 002c 4989C7   		movq	%rax, %r15
 736              	.LVL80:
 737              		.loc 1 305 3 is_stmt 1 view .LVU233
 306:fltk-1.3.4-1/jpeg/jdsample.c ****   upsample->pub.start_pass = start_pass_upsample;
 738              		.loc 1 306 3 view .LVU234
 739              		.loc 1 306 28 is_stmt 0 view .LVU235
 740 002f 488D0500 		leaq	start_pass_upsample(%rip), %rax
 740      000000
 741              	.LVL81:
 742              		.loc 1 306 28 view .LVU236
 743 0036 498907   		movq	%rax, (%r15)
 307:fltk-1.3.4-1/jpeg/jdsample.c ****   upsample->pub.upsample = sep_upsample;
 744              		.loc 1 307 3 is_stmt 1 view .LVU237
 745              		.loc 1 307 26 is_stmt 0 view .LVU238
 746 0039 488D0500 		leaq	sep_upsample(%rip), %rax
 746      000000
 747 0040 49894708 		movq	%rax, 8(%r15)
 308:fltk-1.3.4-1/jpeg/jdsample.c ****   upsample->pub.need_context_rows = FALSE; /* until we find out differently */
 748              		.loc 1 308 3 is_stmt 1 view .LVU239
 749              		.loc 1 308 35 is_stmt 0 view .LVU240
 750 0044 41C74710 		movl	$0, 16(%r15)
 750      00000000 
 309:fltk-1.3.4-1/jpeg/jdsample.c **** 
 310:fltk-1.3.4-1/jpeg/jdsample.c ****   if (cinfo->CCIR601_sampling)	/* this isn't supported */
 751              		.loc 1 310 3 is_stmt 1 view .LVU241
 752              		.loc 1 310 6 is_stmt 0 view .LVU242
 753 004c 8B8B9001 		movl	400(%rbx), %ecx
 753      0000
 754 0052 85C9     		testl	%ecx, %ecx
 755 0054 7412     		je	.L48
 311:fltk-1.3.4-1/jpeg/jdsample.c ****     ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
 756              		.loc 1 311 5 is_stmt 1 view .LVU243
 757 0056 488B03   		movq	(%rbx), %rax
 758 0059 4889DF   		movq	%rbx, %rdi
 759 005c C740281A 		movl	$26, 40(%rax)
 759      000000
 760 0063 488B03   		movq	(%rbx), %rax
 761 0066 FF10     		call	*(%rax)
 762              	.LVL82:
 763              	.L48:
 312:fltk-1.3.4-1/jpeg/jdsample.c **** 
 313:fltk-1.3.4-1/jpeg/jdsample.c ****   /* Verify we can handle the sampling factors, select per-component methods,
 314:fltk-1.3.4-1/jpeg/jdsample.c ****    * and create storage as needed.
 315:fltk-1.3.4-1/jpeg/jdsample.c ****    */
 316:fltk-1.3.4-1/jpeg/jdsample.c ****   for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 764              		.loc 1 316 3 view .LVU244
 765              		.loc 1 316 3 is_stmt 0 view .LVU245
 766 0068 8B5338   		movl	56(%rbx), %edx
 767              		.loc 1 316 24 view .LVU246
 768 006b 488BAB30 		movq	304(%rbx), %rbp
 768      010000
 769              	.LVL83:
 770              		.loc 1 316 44 is_stmt 1 view .LVU247
 771              		.loc 1 316 3 is_stmt 0 view .LVU248
 772 0072 85D2     		testl	%edx, %edx
 773 0074 0F8E8900 		jle	.L47
 773      0000
 774 007a 4531E4   		xorl	%r12d, %r12d
 775 007d EB1B     		jmp	.L57
 776              	.LVL84:
 777 007f 90       		.p2align 4,,10
 778              		.p2align 3
 779              	.L66:
 317:fltk-1.3.4-1/jpeg/jdsample.c ****        ci++, compptr++) {
 318:fltk-1.3.4-1/jpeg/jdsample.c ****     /* Compute size of an "input group" after IDCT scaling.  This many samples
 319:fltk-1.3.4-1/jpeg/jdsample.c ****      * are to be converted to max_h_samp_factor * max_v_samp_factor pixels.
 320:fltk-1.3.4-1/jpeg/jdsample.c ****      */
 321:fltk-1.3.4-1/jpeg/jdsample.c ****     h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 322:fltk-1.3.4-1/jpeg/jdsample.c **** 		 cinfo->min_DCT_h_scaled_size;
 323:fltk-1.3.4-1/jpeg/jdsample.c ****     v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 324:fltk-1.3.4-1/jpeg/jdsample.c **** 		 cinfo->min_DCT_v_scaled_size;
 325:fltk-1.3.4-1/jpeg/jdsample.c ****     h_out_group = cinfo->max_h_samp_factor;
 326:fltk-1.3.4-1/jpeg/jdsample.c ****     v_out_group = cinfo->max_v_samp_factor;
 327:fltk-1.3.4-1/jpeg/jdsample.c ****     upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
 328:fltk-1.3.4-1/jpeg/jdsample.c ****     need_buffer = TRUE;
 329:fltk-1.3.4-1/jpeg/jdsample.c ****     if (! compptr->component_needed) {
 330:fltk-1.3.4-1/jpeg/jdsample.c ****       /* Don't bother to upsample an uninteresting component. */
 331:fltk-1.3.4-1/jpeg/jdsample.c ****       upsample->methods[ci] = noop_upsample;
 780              		.loc 1 331 7 is_stmt 1 view .LVU249
 781              		.loc 1 331 29 is_stmt 0 view .LVU250
 782 0080 488D0500 		leaq	noop_upsample(%rip), %rax
 782      000000
 783 0087 4B8944E7 		movq	%rax, 104(%r15,%r12,8)
 783      68
 332:fltk-1.3.4-1/jpeg/jdsample.c ****       need_buffer = FALSE;
 784              		.loc 1 332 7 is_stmt 1 view .LVU251
 785              	.LVL85:
 333:fltk-1.3.4-1/jpeg/jdsample.c ****     } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
 334:fltk-1.3.4-1/jpeg/jdsample.c ****       /* Fullsize components can be processed without any work. */
 335:fltk-1.3.4-1/jpeg/jdsample.c ****       upsample->methods[ci] = fullsize_upsample;
 336:fltk-1.3.4-1/jpeg/jdsample.c ****       need_buffer = FALSE;
 337:fltk-1.3.4-1/jpeg/jdsample.c ****     } else if (h_in_group * 2 == h_out_group &&
 338:fltk-1.3.4-1/jpeg/jdsample.c **** 	       v_in_group == v_out_group) {
 339:fltk-1.3.4-1/jpeg/jdsample.c ****       /* Special case for 2h1v upsampling */
 340:fltk-1.3.4-1/jpeg/jdsample.c ****       upsample->methods[ci] = h2v1_upsample;
 341:fltk-1.3.4-1/jpeg/jdsample.c ****     } else if (h_in_group * 2 == h_out_group &&
 342:fltk-1.3.4-1/jpeg/jdsample.c **** 	       v_in_group * 2 == v_out_group) {
 343:fltk-1.3.4-1/jpeg/jdsample.c ****       /* Special case for 2h2v upsampling */
 344:fltk-1.3.4-1/jpeg/jdsample.c ****       upsample->methods[ci] = h2v2_upsample;
 345:fltk-1.3.4-1/jpeg/jdsample.c ****     } else if ((h_out_group % h_in_group) == 0 &&
 346:fltk-1.3.4-1/jpeg/jdsample.c **** 	       (v_out_group % v_in_group) == 0) {
 347:fltk-1.3.4-1/jpeg/jdsample.c ****       /* Generic integral-factors upsampling method */
 348:fltk-1.3.4-1/jpeg/jdsample.c ****       upsample->methods[ci] = int_upsample;
 349:fltk-1.3.4-1/jpeg/jdsample.c ****       upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
 350:fltk-1.3.4-1/jpeg/jdsample.c ****       upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
 351:fltk-1.3.4-1/jpeg/jdsample.c ****     } else
 352:fltk-1.3.4-1/jpeg/jdsample.c ****       ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
 353:fltk-1.3.4-1/jpeg/jdsample.c ****     if (need_buffer) {
 786              		.loc 1 353 5 view .LVU252
 787              	.L51:
 317:fltk-1.3.4-1/jpeg/jdsample.c ****     /* Compute size of an "input group" after IDCT scaling.  This many samples
 788              		.loc 1 317 8 view .LVU253
 317:fltk-1.3.4-1/jpeg/jdsample.c ****     /* Compute size of an "input group" after IDCT scaling.  This many samples
 789              		.loc 1 317 21 is_stmt 0 view .LVU254
 790 008c 4883C560 		addq	$96, %rbp
 791              	.LVL86:
 316:fltk-1.3.4-1/jpeg/jdsample.c ****        ci++, compptr++) {
 792              		.loc 1 316 44 is_stmt 1 view .LVU255
 793 0090 4983C401 		addq	$1, %r12
 794              	.LVL87:
 316:fltk-1.3.4-1/jpeg/jdsample.c ****        ci++, compptr++) {
 795              		.loc 1 316 3 is_stmt 0 view .LVU256
 796 0094 44396338 		cmpl	%r12d, 56(%rbx)
 797 0098 7E69     		jle	.L47
 798              	.L57:
 799              	.LVL88:
 321:fltk-1.3.4-1/jpeg/jdsample.c **** 		 cinfo->min_DCT_h_scaled_size;
 800              		.loc 1 321 5 is_stmt 1 view .LVU257
 323:fltk-1.3.4-1/jpeg/jdsample.c **** 		 cinfo->min_DCT_v_scaled_size;
 801              		.loc 1 323 42 is_stmt 0 view .LVU258
 802 009a 8B450C   		movl	12(%rbp), %eax
 803 009d 0FAF4528 		imull	40(%rbp), %eax
 321:fltk-1.3.4-1/jpeg/jdsample.c **** 		 cinfo->min_DCT_h_scaled_size;
 804              		.loc 1 321 26 view .LVU259
 805 00a1 8B4D08   		movl	8(%rbp), %ecx
 321:fltk-1.3.4-1/jpeg/jdsample.c **** 		 cinfo->min_DCT_h_scaled_size;
 806              		.loc 1 321 51 view .LVU260
 807 00a4 448B5D24 		movl	36(%rbp), %r11d
 322:fltk-1.3.4-1/jpeg/jdsample.c ****     v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 808              		.loc 1 322 9 view .LVU261
 809 00a8 448B8BA8 		movl	424(%rbx), %r9d
 809      010000
 810              	.LVL89:
 323:fltk-1.3.4-1/jpeg/jdsample.c **** 		 cinfo->min_DCT_v_scaled_size;
 811              		.loc 1 323 5 is_stmt 1 view .LVU262
 325:fltk-1.3.4-1/jpeg/jdsample.c ****     v_out_group = cinfo->max_v_samp_factor;
 812              		.loc 1 325 17 is_stmt 0 view .LVU263
 813 00af 8BBBA001 		movl	416(%rbx), %edi
 813      0000
 323:fltk-1.3.4-1/jpeg/jdsample.c **** 		 cinfo->min_DCT_v_scaled_size;
 814              		.loc 1 323 16 view .LVU264
 815 00b5 99       		cltd
 326:fltk-1.3.4-1/jpeg/jdsample.c ****     upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
 816              		.loc 1 326 17 view .LVU265
 817 00b6 448B93A4 		movl	420(%rbx), %r10d
 817      010000
 323:fltk-1.3.4-1/jpeg/jdsample.c **** 		 cinfo->min_DCT_v_scaled_size;
 818              		.loc 1 323 16 view .LVU266
 819 00bd F7BBAC01 		idivl	428(%rbx)
 819      0000
 327:fltk-1.3.4-1/jpeg/jdsample.c ****     need_buffer = TRUE;
 820              		.loc 1 327 35 view .LVU267
 821 00c3 438984A7 		movl	%eax, 192(%r15,%r12,4)
 821      C0000000 
 323:fltk-1.3.4-1/jpeg/jdsample.c **** 		 cinfo->min_DCT_v_scaled_size;
 822              		.loc 1 323 16 view .LVU268
 823 00cb 89C6     		movl	%eax, %esi
 824              	.LVL90:
 325:fltk-1.3.4-1/jpeg/jdsample.c ****     v_out_group = cinfo->max_v_samp_factor;
 825              		.loc 1 325 5 is_stmt 1 view .LVU269
 326:fltk-1.3.4-1/jpeg/jdsample.c ****     upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
 826              		.loc 1 326 5 view .LVU270
 327:fltk-1.3.4-1/jpeg/jdsample.c ****     need_buffer = TRUE;
 827              		.loc 1 327 5 view .LVU271
 328:fltk-1.3.4-1/jpeg/jdsample.c ****     if (! compptr->component_needed) {
 828              		.loc 1 328 5 view .LVU272
 329:fltk-1.3.4-1/jpeg/jdsample.c ****       /* Don't bother to upsample an uninteresting component. */
 829              		.loc 1 329 5 view .LVU273
 329:fltk-1.3.4-1/jpeg/jdsample.c ****       /* Don't bother to upsample an uninteresting component. */
 830              		.loc 1 329 8 is_stmt 0 view .LVU274
 831 00cd 8B4534   		movl	52(%rbp), %eax
 832              	.LVL91:
 329:fltk-1.3.4-1/jpeg/jdsample.c ****       /* Don't bother to upsample an uninteresting component. */
 833              		.loc 1 329 8 view .LVU275
 834 00d0 85C0     		testl	%eax, %eax
 835 00d2 74AC     		je	.L66
 321:fltk-1.3.4-1/jpeg/jdsample.c **** 		 cinfo->min_DCT_h_scaled_size;
 836              		.loc 1 321 42 view .LVU276
 837 00d4 410FAFCB 		imull	%r11d, %ecx
 838              	.LVL92:
 321:fltk-1.3.4-1/jpeg/jdsample.c **** 		 cinfo->min_DCT_h_scaled_size;
 839              		.loc 1 321 16 view .LVU277
 840 00d8 89C8     		movl	%ecx, %eax
 841 00da 99       		cltd
 842 00db 41F7F9   		idivl	%r9d
 843 00de 89C1     		movl	%eax, %ecx
 844              	.LVL93:
 333:fltk-1.3.4-1/jpeg/jdsample.c ****       /* Fullsize components can be processed without any work. */
 845              		.loc 1 333 12 is_stmt 1 view .LVU278
 333:fltk-1.3.4-1/jpeg/jdsample.c ****       /* Fullsize components can be processed without any work. */
 846              		.loc 1 333 15 is_stmt 0 view .LVU279
 847 00e0 39F8     		cmpl	%edi, %eax
 848 00e2 7534     		jne	.L52
 849 00e4 4439D6   		cmpl	%r10d, %esi
 850 00e7 752F     		jne	.L52
 335:fltk-1.3.4-1/jpeg/jdsample.c ****       need_buffer = FALSE;
 851              		.loc 1 335 7 is_stmt 1 view .LVU280
 335:fltk-1.3.4-1/jpeg/jdsample.c ****       need_buffer = FALSE;
 852              		.loc 1 335 29 is_stmt 0 view .LVU281
 853 00e9 488D0500 		leaq	fullsize_upsample(%rip), %rax
 853      000000
 317:fltk-1.3.4-1/jpeg/jdsample.c ****     /* Compute size of an "input group" after IDCT scaling.  This many samples
 854              		.loc 1 317 21 view .LVU282
 855 00f0 4883C560 		addq	$96, %rbp
 856              	.LVL94:
 335:fltk-1.3.4-1/jpeg/jdsample.c ****       need_buffer = FALSE;
 857              		.loc 1 335 29 view .LVU283
 858 00f4 4B8944E7 		movq	%rax, 104(%r15,%r12,8)
 858      68
 336:fltk-1.3.4-1/jpeg/jdsample.c ****     } else if (h_in_group * 2 == h_out_group &&
 859              		.loc 1 336 7 is_stmt 1 view .LVU284
 860              	.LVL95:
 861              		.loc 1 353 5 view .LVU285
 317:fltk-1.3.4-1/jpeg/jdsample.c ****     /* Compute size of an "input group" after IDCT scaling.  This many samples
 862              		.loc 1 317 8 view .LVU286
 316:fltk-1.3.4-1/jpeg/jdsample.c ****        ci++, compptr++) {
 863              		.loc 1 316 44 view .LVU287
 864 00f9 4983C401 		addq	$1, %r12
 865              	.LVL96:
 316:fltk-1.3.4-1/jpeg/jdsample.c ****        ci++, compptr++) {
 866              		.loc 1 316 3 is_stmt 0 view .LVU288
 867 00fd 44396338 		cmpl	%r12d, 56(%rbx)
 868 0101 7F97     		jg	.L57
 869              	.LVL97:
 870              	.L47:
 354:fltk-1.3.4-1/jpeg/jdsample.c ****       upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 355:fltk-1.3.4-1/jpeg/jdsample.c **** 	((j_common_ptr) cinfo, JPOOL_IMAGE,
 356:fltk-1.3.4-1/jpeg/jdsample.c **** 	 (JDIMENSION) jround_up((long) cinfo->output_width,
 357:fltk-1.3.4-1/jpeg/jdsample.c **** 				(long) cinfo->max_h_samp_factor),
 358:fltk-1.3.4-1/jpeg/jdsample.c **** 	 (JDIMENSION) cinfo->max_v_samp_factor);
 359:fltk-1.3.4-1/jpeg/jdsample.c ****     }
 360:fltk-1.3.4-1/jpeg/jdsample.c ****   }
 361:fltk-1.3.4-1/jpeg/jdsample.c **** }
 871              		.loc 1 361 1 view .LVU289
 872 0103 4883C408 		addq	$8, %rsp
 873              		.cfi_remember_state
 874              		.cfi_def_cfa_offset 56
 875 0107 5B       		popq	%rbx
 876              		.cfi_def_cfa_offset 48
 877              	.LVL98:
 878              		.loc 1 361 1 view .LVU290
 879 0108 5D       		popq	%rbp
 880              		.cfi_def_cfa_offset 40
 881              	.LVL99:
 882              		.loc 1 361 1 view .LVU291
 883 0109 415C     		popq	%r12
 884              		.cfi_def_cfa_offset 32
 885 010b 415D     		popq	%r13
 886              		.cfi_def_cfa_offset 24
 887 010d 415E     		popq	%r14
 888              		.cfi_def_cfa_offset 16
 889 010f 415F     		popq	%r15
 890              		.cfi_def_cfa_offset 8
 891              	.LVL100:
 892              		.loc 1 361 1 view .LVU292
 893 0111 C3       		ret
 894              	.LVL101:
 895              		.p2align 4,,10
 896 0112 660F1F44 		.p2align 3
 896      0000
 897              	.L52:
 898              		.cfi_restore_state
 337:fltk-1.3.4-1/jpeg/jdsample.c **** 	       v_in_group == v_out_group) {
 899              		.loc 1 337 12 is_stmt 1 view .LVU293
 337:fltk-1.3.4-1/jpeg/jdsample.c **** 	       v_in_group == v_out_group) {
 900              		.loc 1 337 27 is_stmt 0 view .LVU294
 901 0118 8D0409   		leal	(%rcx,%rcx), %eax
 337:fltk-1.3.4-1/jpeg/jdsample.c **** 	       v_in_group == v_out_group) {
 902              		.loc 1 337 15 view .LVU295
 903 011b 39F8     		cmpl	%edi, %eax
 904 011d 7469     		je	.L67
 905              	.L53:
 345:fltk-1.3.4-1/jpeg/jdsample.c **** 	       (v_out_group % v_in_group) == 0) {
 906              		.loc 1 345 12 is_stmt 1 view .LVU296
 907 011f 89F8     		movl	%edi, %eax
 908 0121 99       		cltd
 909 0122 F7F9     		idivl	%ecx
 910 0124 89C7     		movl	%eax, %edi
 911              	.LVL102:
 345:fltk-1.3.4-1/jpeg/jdsample.c **** 	       (v_out_group % v_in_group) == 0) {
 912              		.loc 1 345 15 is_stmt 0 view .LVU297
 913 0126 85D2     		testl	%edx, %edx
 914 0128 750A     		jne	.L56
 915 012a 4489D0   		movl	%r10d, %eax
 916 012d 99       		cltd
 917 012e F7FE     		idivl	%esi
 345:fltk-1.3.4-1/jpeg/jdsample.c **** 	       (v_out_group % v_in_group) == 0) {
 918              		.loc 1 345 48 discriminator 1 view .LVU298
 919 0130 85D2     		testl	%edx, %edx
 920 0132 7474     		je	.L68
 921              	.L56:
 352:fltk-1.3.4-1/jpeg/jdsample.c ****     if (need_buffer) {
 922              		.loc 1 352 7 is_stmt 1 view .LVU299
 923 0134 488B03   		movq	(%rbx), %rax
 924 0137 4889DF   		movq	%rbx, %rdi
 925 013a C7402827 		movl	$39, 40(%rax)
 925      000000
 926 0141 488B03   		movq	(%rbx), %rax
 927 0144 FF10     		call	*(%rax)
 928              	.LVL103:
 353:fltk-1.3.4-1/jpeg/jdsample.c ****       upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 929              		.loc 1 353 5 view .LVU300
 930              	.L55:
 354:fltk-1.3.4-1/jpeg/jdsample.c **** 	((j_common_ptr) cinfo, JPOOL_IMAGE,
 931              		.loc 1 354 7 view .LVU301
 354:fltk-1.3.4-1/jpeg/jdsample.c **** 	((j_common_ptr) cinfo, JPOOL_IMAGE,
 932              		.loc 1 354 34 is_stmt 0 view .LVU302
 933 0146 488B4308 		movq	8(%rbx), %rax
 356:fltk-1.3.4-1/jpeg/jdsample.c **** 				(long) cinfo->max_h_samp_factor),
 934              		.loc 1 356 16 view .LVU303
 935 014a 4863B3A0 		movslq	416(%rbx), %rsi
 935      010000
 936 0151 8BBB8800 		movl	136(%rbx), %edi
 936      0000
 354:fltk-1.3.4-1/jpeg/jdsample.c **** 	((j_common_ptr) cinfo, JPOOL_IMAGE,
 937              		.loc 1 354 34 view .LVU304
 938 0157 448BABA4 		movl	420(%rbx), %r13d
 938      010000
 939 015e 4C8B7010 		movq	16(%rax), %r14
 356:fltk-1.3.4-1/jpeg/jdsample.c **** 				(long) cinfo->max_h_samp_factor),
 940              		.loc 1 356 16 view .LVU305
 941 0162 E8000000 		call	jround_up@PLT
 941      00
 942              	.LVL104:
 354:fltk-1.3.4-1/jpeg/jdsample.c **** 	((j_common_ptr) cinfo, JPOOL_IMAGE,
 943              		.loc 1 354 34 view .LVU306
 944 0167 4489E9   		movl	%r13d, %ecx
 945 016a BE010000 		movl	$1, %esi
 945      00
 946 016f 4889DF   		movq	%rbx, %rdi
 356:fltk-1.3.4-1/jpeg/jdsample.c **** 				(long) cinfo->max_h_samp_factor),
 947              		.loc 1 356 16 view .LVU307
 948 0172 4889C2   		movq	%rax, %rdx
 354:fltk-1.3.4-1/jpeg/jdsample.c **** 	((j_common_ptr) cinfo, JPOOL_IMAGE,
 949              		.loc 1 354 34 view .LVU308
 950 0175 41FFD6   		call	*%r14
 951              	.LVL105:
 354:fltk-1.3.4-1/jpeg/jdsample.c **** 	((j_common_ptr) cinfo, JPOOL_IMAGE,
 952              		.loc 1 354 31 view .LVU309
 953 0178 4B8944E7 		movq	%rax, 24(%r15,%r12,8)
 953      18
 954 017d E90AFFFF 		jmp	.L51
 954      FF
 955              	.LVL106:
 956              		.p2align 4,,10
 957 0182 660F1F44 		.p2align 3
 957      0000
 958              	.L67:
 337:fltk-1.3.4-1/jpeg/jdsample.c **** 	       v_in_group == v_out_group) {
 959              		.loc 1 337 46 discriminator 1 view .LVU310
 960 0188 4439D6   		cmpl	%r10d, %esi
 961 018b 7443     		je	.L69
 341:fltk-1.3.4-1/jpeg/jdsample.c **** 	       v_in_group * 2 == v_out_group) {
 962              		.loc 1 341 12 is_stmt 1 discriminator 1 view .LVU311
 342:fltk-1.3.4-1/jpeg/jdsample.c ****       /* Special case for 2h2v upsampling */
 963              		.loc 1 342 20 is_stmt 0 discriminator 1 view .LVU312
 964 018d 8D0436   		leal	(%rsi,%rsi), %eax
 341:fltk-1.3.4-1/jpeg/jdsample.c **** 	       v_in_group * 2 == v_out_group) {
 965              		.loc 1 341 46 discriminator 1 view .LVU313
 966 0190 4439D0   		cmpl	%r10d, %eax
 967 0193 758A     		jne	.L53
 344:fltk-1.3.4-1/jpeg/jdsample.c ****     } else if ((h_out_group % h_in_group) == 0 &&
 968              		.loc 1 344 7 is_stmt 1 view .LVU314
 344:fltk-1.3.4-1/jpeg/jdsample.c ****     } else if ((h_out_group % h_in_group) == 0 &&
 969              		.loc 1 344 29 is_stmt 0 view .LVU315
 970 0195 488D0500 		leaq	h2v2_upsample(%rip), %rax
 970      000000
 971 019c 4B8944E7 		movq	%rax, 104(%r15,%r12,8)
 971      68
 353:fltk-1.3.4-1/jpeg/jdsample.c ****       upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 972              		.loc 1 353 5 is_stmt 1 view .LVU316
 973 01a1 EBA3     		jmp	.L55
 974              	.LVL107:
 975              		.p2align 4,,10
 976 01a3 0F1F4400 		.p2align 3
 976      00
 977              	.L68:
 348:fltk-1.3.4-1/jpeg/jdsample.c ****       upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
 978              		.loc 1 348 7 view .LVU317
 348:fltk-1.3.4-1/jpeg/jdsample.c ****       upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
 979              		.loc 1 348 29 is_stmt 0 view .LVU318
 980 01a8 488D1500 		leaq	int_upsample(%rip), %rdx
 980      000000
 981 01af 4B8954E7 		movq	%rdx, 104(%r15,%r12,8)
 981      68
 349:fltk-1.3.4-1/jpeg/jdsample.c ****       upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
 982              		.loc 1 349 7 is_stmt 1 view .LVU319
 349:fltk-1.3.4-1/jpeg/jdsample.c ****       upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
 983              		.loc 1 349 32 is_stmt 0 view .LVU320
 984 01b4 4388BC27 		movb	%dil, 232(%r15,%r12)
 984      E8000000 
 350:fltk-1.3.4-1/jpeg/jdsample.c ****     } else
 985              		.loc 1 350 7 is_stmt 1 view .LVU321
 350:fltk-1.3.4-1/jpeg/jdsample.c ****     } else
 986              		.loc 1 350 32 is_stmt 0 view .LVU322
 987 01bc 43888427 		movb	%al, 242(%r15,%r12)
 987      F2000000 
 353:fltk-1.3.4-1/jpeg/jdsample.c ****       upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 988              		.loc 1 353 5 is_stmt 1 view .LVU323
 989 01c4 EB80     		jmp	.L55
 990              	.LVL108:
 991 01c6 662E0F1F 		.p2align 4,,10
 991      84000000 
 991      0000
 992              		.p2align 3
 993              	.L69:
 340:fltk-1.3.4-1/jpeg/jdsample.c ****     } else if (h_in_group * 2 == h_out_group &&
 994              		.loc 1 340 7 view .LVU324
 340:fltk-1.3.4-1/jpeg/jdsample.c ****     } else if (h_in_group * 2 == h_out_group &&
 995              		.loc 1 340 29 is_stmt 0 view .LVU325
 996 01d0 488D0500 		leaq	h2v1_upsample(%rip), %rax
 996      000000
 997 01d7 4B8944E7 		movq	%rax, 104(%r15,%r12,8)
 997      68
 353:fltk-1.3.4-1/jpeg/jdsample.c ****       upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 998              		.loc 1 353 5 is_stmt 1 view .LVU326
 999 01dc E965FFFF 		jmp	.L55
 999      FF
 1000              		.cfi_endproc
 1001              	.LFE58:
 1003              		.text
 1004              	.Letext0:
 1005              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 1006              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 1007              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 1008              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 1009              		.file 6 "/usr/include/stdio.h"
 1010              		.file 7 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 1011              		.file 8 "fltk-1.3.4-1/jpeg/jmorecfg.h"
 1012              		.file 9 "fltk-1.3.4-1/jpeg/jpeglib.h"
 1013              		.file 10 "fltk-1.3.4-1/jpeg/jpegint.h"
 1014              		.file 11 "fltk-1.3.4-1/jpeg/jerror.h"
 14067              		.section	.note.gnu.property,"a"
 14068              		.align 8
 14069 0000 04000000 		.long	 1f - 0f
 14070 0004 10000000 		.long	 4f - 1f
 14071 0008 05000000 		.long	 5
 14072              	0:
 14073 000c 474E5500 		.string	 "GNU"
 14074              	1:
 14075              		.align 8
 14076 0010 020000C0 		.long	 0xc0000002
 14077 0014 04000000 		.long	 3f - 2f
 14078              	2:
 14079 0018 03000000 		.long	 0x3
 14080              	3:
 14081 001c 00000000 		.align 8
 14082              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 jdsample.c
     /tmp/ccTgwBhN.s:7      .text.start_pass_upsample:0000000000000000 start_pass_upsample
     /tmp/ccTgwBhN.s:37     .text.sep_upsample:0000000000000000 sep_upsample
     /tmp/ccTgwBhN.s:236    .text.fullsize_upsample:0000000000000000 fullsize_upsample
     /tmp/ccTgwBhN.s:254    .text.noop_upsample:0000000000000000 noop_upsample
     /tmp/ccTgwBhN.s:272    .text.h2v1_upsample:0000000000000000 h2v1_upsample
     /tmp/ccTgwBhN.s:356    .text.int_upsample:0000000000000000 int_upsample
     /tmp/ccTgwBhN.s:556    .text.h2v2_upsample:0000000000000000 h2v2_upsample
     /tmp/ccTgwBhN.s:689    .text.jinit_upsampler:0000000000000000 jinit_upsampler
                           .group:0000000000000000 wm4.0.a6b23a418548ac0bda5d8549c4a2ec91
                           .group:0000000000000000 wm4.stdcpredef.h.19.8dc41bed5d9037ff9622e015fb5f0ce3
                           .group:0000000000000000 wm4.jconfig.h.10.247fc3ff67998f3074970b1373c70333
                           .group:0000000000000000 wm4.features.h.19.5b5f5a19624a0527f479fdc52d54808f
                           .group:0000000000000000 wm4.cdefs.h.19.98d80eddbb3f64f4f30cd9aee9c5593c
                           .group:0000000000000000 wm4.wordsize.h.4.baf119258a1e53d8dba67ceac44ab6bc
                           .group:0000000000000000 wm4.cdefs.h.475.fb75d2e4416aa349344e6f45f683bf28
                           .group:0000000000000000 wm4.stubs64.h.10.6ce4c34010988db072c080326a6b6319
                           .group:0000000000000000 wm4.libcheaderstart.h.37.d9274df4cc0172452960ad9644fa5579
                           .group:0000000000000000 wm4.stdlib.h.28.2cffa49d94c5d85f4538f55f7b59771d
                           .group:0000000000000000 wm4.stddef.h.181.13772e73e5434e8cc4fafaaddad2b5da
                           .group:0000000000000000 wm4.waitflags.h.25.41934de4af99038521c2782f418699b1
                           .group:0000000000000000 wm4.waitstatus.h.28.93f167f49d64e2b9b99f98d1162a93bf
                           .group:0000000000000000 wm4.stdlib.h.43.9fa4f727a2f1cb8d2450a574c9195553
                           .group:0000000000000000 wm4.floatn.h.20.80c7cf8a8dfad237004b28d051d5afda
                           .group:0000000000000000 wm4.floatncommon.h.34.7e1840d7dfb19e9bdb51aeb077d76637
                           .group:0000000000000000 wm4.stdlib.h.71.2927e068ec678159b4f68ec2f089f7e6
                           .group:0000000000000000 wm4.types.h.109.56eb9ae966b255288cc544f18746a7ff
                           .group:0000000000000000 wm4.typesizes.h.24.2c64f817c0dc4b6fb2a2c619d717be26
                           .group:0000000000000000 wm4.time64.h.24.a8166ae916ec910dab0d8987098d42ee
                           .group:0000000000000000 wm4.types.h.40.18f72bab8242c2bb4c532a2aa95b5f00
                           .group:0000000000000000 wm4.stddef.h.231.0adce5c8c1fd8096aaff50981b3d1f0f
                           .group:0000000000000000 wm4.endian.h.20.efabd1018df5d7b4052c27dc6bdd5ce5
                           .group:0000000000000000 wm4.endianness.h.2.2c6a211f7909f3af5e9e9cfa3b6b63c8
                           .group:0000000000000000 wm4.endian.h.40.9e5d395adda2f4eb53ae69b69b664084
                           .group:0000000000000000 wm4.endian.h.27.4c4f94262c4eaee2982fe00ed1b4f173
                           .group:0000000000000000 wm4.byteswap.h.24.5363c019348146aada5aeadf51456576
                           .group:0000000000000000 wm4.endian.h.39.30a606dbd99b6c3df61c1f06dbdabd4e
                           .group:0000000000000000 wm4.select.h.28.eb2f3debdbcffd1442ebddaebc4fb6ff
                           .group:0000000000000000 wm4.__sigset_t.h.2.6b1ab6ff3d7b8fd9c0c42b0d80afbd80
                           .group:0000000000000000 wm4.select.h.44.887a4ff60aa97fcd9c1be017735e1675
                           .group:0000000000000000 wm4.select2.h.27.f95f2ab0ffee66dc1b6575014894b21a
                           .group:0000000000000000 wm4.types.h.186.489a4ed8f2d29cd358843490f54ddea5
                           .group:0000000000000000 wm4.pthreadtypesarch.h.25.6063cba99664c916e22d3a912bcc348a
                           .group:0000000000000000 wm4.struct_mutex.h.20.ed51f515172b9be99e450ba83eb5dd99
                           .group:0000000000000000 wm4.struct_rwlock.h.21.0254880f2904e3833fb8ae683e0f0330
                           .group:0000000000000000 wm4.alloca.h.19.edefa922a76c1cbaaf1e416903ba2d1c
                           .group:0000000000000000 wm4.alloca.h.29.156e12058824cc23d961c4d3b13031f6
                           .group:0000000000000000 wm4.stdio.h.24.5c1b97eef3c86b7a2549420f69f4f128
                           .group:0000000000000000 wm4.libcheaderstart.h.31.87b3c285aeba93fe355ad19123070832
                           .group:0000000000000000 wm4.stdio.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.stddef.h.231.8136eebbab3406dbf57a7ec475dd5d83
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.struct_FILE.h.19.0888ac70396abe1031c03d393554032f
                           .group:0000000000000000 wm4.stdio.h.53.139e45cf040c0964b2932c0c1bdaf6b2
                           .group:0000000000000000 wm4.stdio_lim.h.19.e4b00b560d878dcfbc6635b3406640c5
                           .group:0000000000000000 wm4.stdio.h.141.d7a290e19ca077c9e4aa7c43ede17a73
                           .group:0000000000000000 wm4.stdio.h.20.b0caa08e5723aa5941367be0e5d2ec59
                           .group:0000000000000000 wm4.stdio2.h.20.f45a0373b68e1296c4aa8cc09d66a9df
                           .group:0000000000000000 wm4.string.h.23.93403f89af7dba8212345449bb14b09d
                           .group:0000000000000000 wm4.string.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.strings.h.19.a259f126920b1bb5ef76bc62b3984a3c
                           .group:0000000000000000 wm4.jinclude.h.67.b19f941ec97c4845fa4609292c7e2db4
                           .group:0000000000000000 wm4.jmorecfg.h.33.3b4c5f9cc07b3737823b06caf24d5b05
                           .group:0000000000000000 wm4.jpeglib.h.40.4f111c27252a38df39328d65454e82f4
                           .group:0000000000000000 wm4.jpegint.h.26.5219ef5d4e4921371d38e77b6091fd20
                           .group:0000000000000000 wm4.jerror.h.25.1dbd8674e70ab5215bc0037320e5c2a2

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
jcopy_sample_rows
jround_up
