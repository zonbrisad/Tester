   1              		.file	"pngwutil.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.unlikely.png_image_size,"ax",@progbits
   5              	.LCOLDB0:
   6              		.section	.text.png_image_size,"ax",@progbits
   7              	.LHOTB0:
   8              		.p2align 4,,15
   9              		.section	.text.unlikely.png_image_size
  10              	.Ltext_cold0:
  11              		.section	.text.png_image_size
  13              	png_image_size:
  14              	.LFB65:
  15              		.file 1 "fltk-1.3.4-1/png/pngwutil.c"
   1:fltk-1.3.4-1/png/pngwutil.c **** 
   2:fltk-1.3.4-1/png/pngwutil.c **** /* pngwutil.c - utilities to write a PNG file
   3:fltk-1.3.4-1/png/pngwutil.c ****  *
   4:fltk-1.3.4-1/png/pngwutil.c ****  * Last changed in libpng 1.6.15 [November 20, 2014]
   5:fltk-1.3.4-1/png/pngwutil.c ****  * Copyright (c) 1998-2014 Glenn Randers-Pehrson
   6:fltk-1.3.4-1/png/pngwutil.c ****  * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
   7:fltk-1.3.4-1/png/pngwutil.c ****  * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
   8:fltk-1.3.4-1/png/pngwutil.c ****  *
   9:fltk-1.3.4-1/png/pngwutil.c ****  * This code is released under the libpng license.
  10:fltk-1.3.4-1/png/pngwutil.c ****  * For conditions of distribution and use, see the disclaimer
  11:fltk-1.3.4-1/png/pngwutil.c ****  * and license in png.h
  12:fltk-1.3.4-1/png/pngwutil.c ****  */
  13:fltk-1.3.4-1/png/pngwutil.c **** 
  14:fltk-1.3.4-1/png/pngwutil.c **** #include "pngpriv.h"
  15:fltk-1.3.4-1/png/pngwutil.c **** 
  16:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_SUPPORTED
  17:fltk-1.3.4-1/png/pngwutil.c **** 
  18:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_INT_FUNCTIONS_SUPPORTED
  19:fltk-1.3.4-1/png/pngwutil.c **** /* Place a 32-bit number into a buffer in PNG byte order.  We work
  20:fltk-1.3.4-1/png/pngwutil.c ****  * with unsigned numbers for convenience, although one supported
  21:fltk-1.3.4-1/png/pngwutil.c ****  * ancillary chunk uses signed (two's complement) numbers.
  22:fltk-1.3.4-1/png/pngwutil.c ****  */
  23:fltk-1.3.4-1/png/pngwutil.c **** void PNGAPI
  24:fltk-1.3.4-1/png/pngwutil.c **** png_save_uint_32(png_bytep buf, png_uint_32 i)
  25:fltk-1.3.4-1/png/pngwutil.c **** {
  26:fltk-1.3.4-1/png/pngwutil.c ****    buf[0] = (png_byte)((i >> 24) & 0xff);
  27:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)((i >> 16) & 0xff);
  28:fltk-1.3.4-1/png/pngwutil.c ****    buf[2] = (png_byte)((i >> 8) & 0xff);
  29:fltk-1.3.4-1/png/pngwutil.c ****    buf[3] = (png_byte)(i & 0xff);
  30:fltk-1.3.4-1/png/pngwutil.c **** }
  31:fltk-1.3.4-1/png/pngwutil.c **** 
  32:fltk-1.3.4-1/png/pngwutil.c **** /* Place a 16-bit number into a buffer in PNG byte order.
  33:fltk-1.3.4-1/png/pngwutil.c ****  * The parameter is declared unsigned int, not png_uint_16,
  34:fltk-1.3.4-1/png/pngwutil.c ****  * just to avoid potential problems on pre-ANSI C compilers.
  35:fltk-1.3.4-1/png/pngwutil.c ****  */
  36:fltk-1.3.4-1/png/pngwutil.c **** void PNGAPI
  37:fltk-1.3.4-1/png/pngwutil.c **** png_save_uint_16(png_bytep buf, unsigned int i)
  38:fltk-1.3.4-1/png/pngwutil.c **** {
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[0] = (png_byte)((i >> 8) & 0xff);
  40:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
  41:fltk-1.3.4-1/png/pngwutil.c **** }
  42:fltk-1.3.4-1/png/pngwutil.c **** #endif
  43:fltk-1.3.4-1/png/pngwutil.c **** 
  44:fltk-1.3.4-1/png/pngwutil.c **** /* Simple function to write the signature.  If we have already written
  45:fltk-1.3.4-1/png/pngwutil.c ****  * the magic bytes of the signature, or more likely, the PNG stream is
  46:fltk-1.3.4-1/png/pngwutil.c ****  * being embedded into another stream and doesn't need its own signature,
  47:fltk-1.3.4-1/png/pngwutil.c ****  * we should call png_set_sig_bytes() to tell libpng how many of the
  48:fltk-1.3.4-1/png/pngwutil.c ****  * bytes have already been written.
  49:fltk-1.3.4-1/png/pngwutil.c ****  */
  50:fltk-1.3.4-1/png/pngwutil.c **** void PNGAPI
  51:fltk-1.3.4-1/png/pngwutil.c **** png_write_sig(png_structrp png_ptr)
  52:fltk-1.3.4-1/png/pngwutil.c **** {
  53:fltk-1.3.4-1/png/pngwutil.c ****    png_byte png_signature[8] = {137, 80, 78, 71, 13, 10, 26, 10};
  54:fltk-1.3.4-1/png/pngwutil.c **** 
  55:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_IO_STATE_SUPPORTED
  56:fltk-1.3.4-1/png/pngwutil.c ****    /* Inform the I/O callback that the signature is being written */
  57:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->io_state = PNG_IO_WRITING | PNG_IO_SIGNATURE;
  58:fltk-1.3.4-1/png/pngwutil.c **** #endif
  59:fltk-1.3.4-1/png/pngwutil.c **** 
  60:fltk-1.3.4-1/png/pngwutil.c ****    /* Write the rest of the 8 byte signature */
  61:fltk-1.3.4-1/png/pngwutil.c ****    png_write_data(png_ptr, &png_signature[png_ptr->sig_bytes],
  62:fltk-1.3.4-1/png/pngwutil.c ****       (png_size_t)(8 - png_ptr->sig_bytes));
  63:fltk-1.3.4-1/png/pngwutil.c **** 
  64:fltk-1.3.4-1/png/pngwutil.c ****    if (png_ptr->sig_bytes < 3)
  65:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->mode |= PNG_HAVE_PNG_SIGNATURE;
  66:fltk-1.3.4-1/png/pngwutil.c **** }
  67:fltk-1.3.4-1/png/pngwutil.c **** 
  68:fltk-1.3.4-1/png/pngwutil.c **** /* Write the start of a PNG chunk.  The type is the chunk type.
  69:fltk-1.3.4-1/png/pngwutil.c ****  * The total_length is the sum of the lengths of all the data you will be
  70:fltk-1.3.4-1/png/pngwutil.c ****  * passing in png_write_chunk_data().
  71:fltk-1.3.4-1/png/pngwutil.c ****  */
  72:fltk-1.3.4-1/png/pngwutil.c **** static void
  73:fltk-1.3.4-1/png/pngwutil.c **** png_write_chunk_header(png_structrp png_ptr, png_uint_32 chunk_name,
  74:fltk-1.3.4-1/png/pngwutil.c ****     png_uint_32 length)
  75:fltk-1.3.4-1/png/pngwutil.c **** {
  76:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[8];
  77:fltk-1.3.4-1/png/pngwutil.c **** 
  78:fltk-1.3.4-1/png/pngwutil.c **** #if defined(PNG_DEBUG) && (PNG_DEBUG > 0)
  79:fltk-1.3.4-1/png/pngwutil.c ****    PNG_CSTRING_FROM_CHUNK(buf, chunk_name);
  80:fltk-1.3.4-1/png/pngwutil.c ****    png_debug2(0, "Writing %s chunk, length = %lu", buf, (unsigned long)length);
  81:fltk-1.3.4-1/png/pngwutil.c **** #endif
  82:fltk-1.3.4-1/png/pngwutil.c **** 
  83:fltk-1.3.4-1/png/pngwutil.c ****    if (png_ptr == NULL)
  84:fltk-1.3.4-1/png/pngwutil.c ****       return;
  85:fltk-1.3.4-1/png/pngwutil.c **** 
  86:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_IO_STATE_SUPPORTED
  87:fltk-1.3.4-1/png/pngwutil.c ****    /* Inform the I/O callback that the chunk header is being written.
  88:fltk-1.3.4-1/png/pngwutil.c ****     * PNG_IO_CHUNK_HDR requires a single I/O call.
  89:fltk-1.3.4-1/png/pngwutil.c ****     */
  90:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->io_state = PNG_IO_WRITING | PNG_IO_CHUNK_HDR;
  91:fltk-1.3.4-1/png/pngwutil.c **** #endif
  92:fltk-1.3.4-1/png/pngwutil.c **** 
  93:fltk-1.3.4-1/png/pngwutil.c ****    /* Write the length and the chunk name */
  94:fltk-1.3.4-1/png/pngwutil.c ****    png_save_uint_32(buf, length);
  95:fltk-1.3.4-1/png/pngwutil.c ****    png_save_uint_32(buf + 4, chunk_name);
  96:fltk-1.3.4-1/png/pngwutil.c ****    png_write_data(png_ptr, buf, 8);
  97:fltk-1.3.4-1/png/pngwutil.c **** 
  98:fltk-1.3.4-1/png/pngwutil.c ****    /* Put the chunk name into png_ptr->chunk_name */
  99:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->chunk_name = chunk_name;
 100:fltk-1.3.4-1/png/pngwutil.c **** 
 101:fltk-1.3.4-1/png/pngwutil.c ****    /* Reset the crc and run it over the chunk name */
 102:fltk-1.3.4-1/png/pngwutil.c ****    png_reset_crc(png_ptr);
 103:fltk-1.3.4-1/png/pngwutil.c **** 
 104:fltk-1.3.4-1/png/pngwutil.c ****    png_calculate_crc(png_ptr, buf + 4, 4);
 105:fltk-1.3.4-1/png/pngwutil.c **** 
 106:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_IO_STATE_SUPPORTED
 107:fltk-1.3.4-1/png/pngwutil.c ****    /* Inform the I/O callback that chunk data will (possibly) be written.
 108:fltk-1.3.4-1/png/pngwutil.c ****     * PNG_IO_CHUNK_DATA does NOT require a specific number of I/O calls.
 109:fltk-1.3.4-1/png/pngwutil.c ****     */
 110:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->io_state = PNG_IO_WRITING | PNG_IO_CHUNK_DATA;
 111:fltk-1.3.4-1/png/pngwutil.c **** #endif
 112:fltk-1.3.4-1/png/pngwutil.c **** }
 113:fltk-1.3.4-1/png/pngwutil.c **** 
 114:fltk-1.3.4-1/png/pngwutil.c **** void PNGAPI
 115:fltk-1.3.4-1/png/pngwutil.c **** png_write_chunk_start(png_structrp png_ptr, png_const_bytep chunk_string,
 116:fltk-1.3.4-1/png/pngwutil.c ****     png_uint_32 length)
 117:fltk-1.3.4-1/png/pngwutil.c **** {
 118:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_header(png_ptr, PNG_CHUNK_FROM_STRING(chunk_string), length);
 119:fltk-1.3.4-1/png/pngwutil.c **** }
 120:fltk-1.3.4-1/png/pngwutil.c **** 
 121:fltk-1.3.4-1/png/pngwutil.c **** /* Write the data of a PNG chunk started with png_write_chunk_header().
 122:fltk-1.3.4-1/png/pngwutil.c ****  * Note that multiple calls to this function are allowed, and that the
 123:fltk-1.3.4-1/png/pngwutil.c ****  * sum of the lengths from these calls *must* add up to the total_length
 124:fltk-1.3.4-1/png/pngwutil.c ****  * given to png_write_chunk_header().
 125:fltk-1.3.4-1/png/pngwutil.c ****  */
 126:fltk-1.3.4-1/png/pngwutil.c **** void PNGAPI
 127:fltk-1.3.4-1/png/pngwutil.c **** png_write_chunk_data(png_structrp png_ptr, png_const_bytep data,
 128:fltk-1.3.4-1/png/pngwutil.c ****     png_size_t length)
 129:fltk-1.3.4-1/png/pngwutil.c **** {
 130:fltk-1.3.4-1/png/pngwutil.c ****    /* Write the data, and run the CRC over it */
 131:fltk-1.3.4-1/png/pngwutil.c ****    if (png_ptr == NULL)
 132:fltk-1.3.4-1/png/pngwutil.c ****       return;
 133:fltk-1.3.4-1/png/pngwutil.c **** 
 134:fltk-1.3.4-1/png/pngwutil.c ****    if (data != NULL && length > 0)
 135:fltk-1.3.4-1/png/pngwutil.c ****    {
 136:fltk-1.3.4-1/png/pngwutil.c ****       png_write_data(png_ptr, data, length);
 137:fltk-1.3.4-1/png/pngwutil.c **** 
 138:fltk-1.3.4-1/png/pngwutil.c ****       /* Update the CRC after writing the data,
 139:fltk-1.3.4-1/png/pngwutil.c ****        * in case the user I/O routine alters it.
 140:fltk-1.3.4-1/png/pngwutil.c ****        */
 141:fltk-1.3.4-1/png/pngwutil.c ****       png_calculate_crc(png_ptr, data, length);
 142:fltk-1.3.4-1/png/pngwutil.c ****    }
 143:fltk-1.3.4-1/png/pngwutil.c **** }
 144:fltk-1.3.4-1/png/pngwutil.c **** 
 145:fltk-1.3.4-1/png/pngwutil.c **** /* Finish a chunk started with png_write_chunk_header(). */
 146:fltk-1.3.4-1/png/pngwutil.c **** void PNGAPI
 147:fltk-1.3.4-1/png/pngwutil.c **** png_write_chunk_end(png_structrp png_ptr)
 148:fltk-1.3.4-1/png/pngwutil.c **** {
 149:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[4];
 150:fltk-1.3.4-1/png/pngwutil.c **** 
 151:fltk-1.3.4-1/png/pngwutil.c ****    if (png_ptr == NULL) return;
 152:fltk-1.3.4-1/png/pngwutil.c **** 
 153:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_IO_STATE_SUPPORTED
 154:fltk-1.3.4-1/png/pngwutil.c ****    /* Inform the I/O callback that the chunk CRC is being written.
 155:fltk-1.3.4-1/png/pngwutil.c ****     * PNG_IO_CHUNK_CRC requires a single I/O function call.
 156:fltk-1.3.4-1/png/pngwutil.c ****     */
 157:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->io_state = PNG_IO_WRITING | PNG_IO_CHUNK_CRC;
 158:fltk-1.3.4-1/png/pngwutil.c **** #endif
 159:fltk-1.3.4-1/png/pngwutil.c **** 
 160:fltk-1.3.4-1/png/pngwutil.c ****    /* Write the crc in a single operation */
 161:fltk-1.3.4-1/png/pngwutil.c ****    png_save_uint_32(buf, png_ptr->crc);
 162:fltk-1.3.4-1/png/pngwutil.c **** 
 163:fltk-1.3.4-1/png/pngwutil.c ****    png_write_data(png_ptr, buf, (png_size_t)4);
 164:fltk-1.3.4-1/png/pngwutil.c **** }
 165:fltk-1.3.4-1/png/pngwutil.c **** 
 166:fltk-1.3.4-1/png/pngwutil.c **** /* Write a PNG chunk all at once.  The type is an array of ASCII characters
 167:fltk-1.3.4-1/png/pngwutil.c ****  * representing the chunk name.  The array must be at least 4 bytes in
 168:fltk-1.3.4-1/png/pngwutil.c ****  * length, and does not need to be null terminated.  To be safe, pass the
 169:fltk-1.3.4-1/png/pngwutil.c ****  * pre-defined chunk names here, and if you need a new one, define it
 170:fltk-1.3.4-1/png/pngwutil.c ****  * where the others are defined.  The length is the length of the data.
 171:fltk-1.3.4-1/png/pngwutil.c ****  * All the data must be present.  If that is not possible, use the
 172:fltk-1.3.4-1/png/pngwutil.c ****  * png_write_chunk_start(), png_write_chunk_data(), and png_write_chunk_end()
 173:fltk-1.3.4-1/png/pngwutil.c ****  * functions instead.
 174:fltk-1.3.4-1/png/pngwutil.c ****  */
 175:fltk-1.3.4-1/png/pngwutil.c **** static void
 176:fltk-1.3.4-1/png/pngwutil.c **** png_write_complete_chunk(png_structrp png_ptr, png_uint_32 chunk_name,
 177:fltk-1.3.4-1/png/pngwutil.c ****    png_const_bytep data, png_size_t length)
 178:fltk-1.3.4-1/png/pngwutil.c **** {
 179:fltk-1.3.4-1/png/pngwutil.c ****    if (png_ptr == NULL)
 180:fltk-1.3.4-1/png/pngwutil.c ****       return;
 181:fltk-1.3.4-1/png/pngwutil.c **** 
 182:fltk-1.3.4-1/png/pngwutil.c ****    /* On 64 bit architectures 'length' may not fit in a png_uint_32. */
 183:fltk-1.3.4-1/png/pngwutil.c ****    if (length > PNG_UINT_31_MAX)
 184:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "length exceeds PNG maximum");
 185:fltk-1.3.4-1/png/pngwutil.c **** 
 186:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_header(png_ptr, chunk_name, (png_uint_32)length);
 187:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_data(png_ptr, data, length);
 188:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_end(png_ptr);
 189:fltk-1.3.4-1/png/pngwutil.c **** }
 190:fltk-1.3.4-1/png/pngwutil.c **** 
 191:fltk-1.3.4-1/png/pngwutil.c **** /* This is the API that calls the internal function above. */
 192:fltk-1.3.4-1/png/pngwutil.c **** void PNGAPI
 193:fltk-1.3.4-1/png/pngwutil.c **** png_write_chunk(png_structrp png_ptr, png_const_bytep chunk_string,
 194:fltk-1.3.4-1/png/pngwutil.c ****    png_const_bytep data, png_size_t length)
 195:fltk-1.3.4-1/png/pngwutil.c **** {
 196:fltk-1.3.4-1/png/pngwutil.c ****    png_write_complete_chunk(png_ptr, PNG_CHUNK_FROM_STRING(chunk_string), data,
 197:fltk-1.3.4-1/png/pngwutil.c ****       length);
 198:fltk-1.3.4-1/png/pngwutil.c **** }
 199:fltk-1.3.4-1/png/pngwutil.c **** 
 200:fltk-1.3.4-1/png/pngwutil.c **** /* This is used below to find the size of an image to pass to png_deflate_claim,
 201:fltk-1.3.4-1/png/pngwutil.c ****  * so it only needs to be accurate if the size is less than 16384 bytes (the
 202:fltk-1.3.4-1/png/pngwutil.c ****  * point at which a lower LZ window size can be used.)
 203:fltk-1.3.4-1/png/pngwutil.c ****  */
 204:fltk-1.3.4-1/png/pngwutil.c **** static png_alloc_size_t
 205:fltk-1.3.4-1/png/pngwutil.c **** png_image_size(png_structrp png_ptr)
 206:fltk-1.3.4-1/png/pngwutil.c **** {
  16              		.loc 1 206 0
  17              		.cfi_startproc
  18              	.LVL0:
 207:fltk-1.3.4-1/png/pngwutil.c ****    /* Only return sizes up to the maximum of a png_uint_32; do this by limiting
 208:fltk-1.3.4-1/png/pngwutil.c ****     * the width and height used to 15 bits.
 209:fltk-1.3.4-1/png/pngwutil.c ****     */
 210:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 h = png_ptr->height;
  19              		.loc 1 210 0
  20 0000 448B87FC 		movl	508(%rdi), %r8d
  20      010000
  21              	.LVL1:
 211:fltk-1.3.4-1/png/pngwutil.c **** 
 212:fltk-1.3.4-1/png/pngwutil.c ****    if (png_ptr->rowbytes < 32768 && h < 32768)
  22              		.loc 1 212 0
  23 0007 488B8708 		movq	520(%rdi), %rax
  23      020000
  24 000e 4181F8FF 		cmpl	$32767, %r8d
  24      7F0000
  25 0015 7708     		ja	.L12
  26 0017 483DFF7F 		cmpq	$32767, %rax
  26      0000
  27 001d 7609     		jbe	.L28
  28              	.L12:
 213:fltk-1.3.4-1/png/pngwutil.c ****    {
 214:fltk-1.3.4-1/png/pngwutil.c ****       if (png_ptr->interlaced != 0)
 215:fltk-1.3.4-1/png/pngwutil.c ****       {
 216:fltk-1.3.4-1/png/pngwutil.c ****          /* Interlacing makes the image larger because of the replication of
 217:fltk-1.3.4-1/png/pngwutil.c ****           * both the filter byte and the padding to a byte boundary.
 218:fltk-1.3.4-1/png/pngwutil.c ****           */
 219:fltk-1.3.4-1/png/pngwutil.c ****          png_uint_32 w = png_ptr->width;
 220:fltk-1.3.4-1/png/pngwutil.c ****          unsigned int pd = png_ptr->pixel_depth;
 221:fltk-1.3.4-1/png/pngwutil.c ****          png_alloc_size_t cb_base;
 222:fltk-1.3.4-1/png/pngwutil.c ****          int pass;
 223:fltk-1.3.4-1/png/pngwutil.c **** 
 224:fltk-1.3.4-1/png/pngwutil.c ****          for (cb_base=0, pass=0; pass<=6; ++pass)
 225:fltk-1.3.4-1/png/pngwutil.c ****          {
 226:fltk-1.3.4-1/png/pngwutil.c ****             png_uint_32 pw = PNG_PASS_COLS(w, pass);
 227:fltk-1.3.4-1/png/pngwutil.c **** 
 228:fltk-1.3.4-1/png/pngwutil.c ****             if (pw > 0)
 229:fltk-1.3.4-1/png/pngwutil.c ****                cb_base += (PNG_ROWBYTES(pd, pw)+1) * PNG_PASS_ROWS(h, pass);
 230:fltk-1.3.4-1/png/pngwutil.c ****          }
 231:fltk-1.3.4-1/png/pngwutil.c **** 
 232:fltk-1.3.4-1/png/pngwutil.c ****          return cb_base;
 233:fltk-1.3.4-1/png/pngwutil.c ****       }
 234:fltk-1.3.4-1/png/pngwutil.c **** 
 235:fltk-1.3.4-1/png/pngwutil.c ****       else
 236:fltk-1.3.4-1/png/pngwutil.c ****          return (png_ptr->rowbytes+1) * h;
 237:fltk-1.3.4-1/png/pngwutil.c ****    }
 238:fltk-1.3.4-1/png/pngwutil.c **** 
 239:fltk-1.3.4-1/png/pngwutil.c ****    else
 240:fltk-1.3.4-1/png/pngwutil.c ****       return 0xffffffffU;
  29              		.loc 1 240 0
  30 001f B8FFFFFF 		movl	$4294967295, %eax
  30      FF
  31 0024 C3       		ret
  32              		.p2align 4,,10
  33 0025 0F1F00   		.p2align 3
  34              	.L28:
 214:fltk-1.3.4-1/png/pngwutil.c ****       {
  35              		.loc 1 214 0
  36 0028 80BF7402 		cmpb	$0, 628(%rdi)
  36      000000
  37 002f 0F844B01 		je	.L3
  37      0000
 206:fltk-1.3.4-1/png/pngwutil.c ****    /* Only return sizes up to the maximum of a png_uint_32; do this by limiting
  38              		.loc 1 206 0
  39 0035 4157     		pushq	%r15
  40              		.cfi_def_cfa_offset 16
  41              		.cfi_offset 15, -16
  42 0037 4156     		pushq	%r14
  43              		.cfi_def_cfa_offset 24
  44              		.cfi_offset 14, -24
  45              	.LBB185:
  46              	.LBB186:
 229:fltk-1.3.4-1/png/pngwutil.c ****          }
  47              		.loc 1 229 0
  48 0039 41BA0100 		movl	$1, %r10d
  48      0000
  49              	.LBE186:
  50              	.LBE185:
 206:fltk-1.3.4-1/png/pngwutil.c ****    /* Only return sizes up to the maximum of a png_uint_32; do this by limiting
  51              		.loc 1 206 0
  52 003f 4155     		pushq	%r13
  53              		.cfi_def_cfa_offset 32
  54              		.cfi_offset 13, -32
  55 0041 4154     		pushq	%r12
  56              		.cfi_def_cfa_offset 40
  57              		.cfi_offset 12, -40
  58              	.LBB194:
  59              	.LBB187:
 226:fltk-1.3.4-1/png/pngwutil.c **** 
  60              		.loc 1 226 0
  61 0043 41BC0100 		movl	$1, %r12d
  61      0000
  62              	.LBE187:
  63              	.LBE194:
 206:fltk-1.3.4-1/png/pngwutil.c ****    /* Only return sizes up to the maximum of a png_uint_32; do this by limiting
  64              		.loc 1 206 0
  65 0049 55       		pushq	%rbp
  66              		.cfi_def_cfa_offset 48
  67              		.cfi_offset 6, -48
  68 004a 53       		pushq	%rbx
  69              		.cfi_def_cfa_offset 56
  70              		.cfi_offset 3, -56
  71              	.LBB195:
  72              	.LBB188:
 226:fltk-1.3.4-1/png/pngwutil.c **** 
  73              		.loc 1 226 0
  74 004b BD070000 		movl	$7, %ebp
  74      00
  75              	.LBE188:
 220:fltk-1.3.4-1/png/pngwutil.c ****          png_alloc_size_t cb_base;
  76              		.loc 1 220 0
  77 0050 440FB6B7 		movzbl	634(%rdi), %r14d
  77      7A020000 
 219:fltk-1.3.4-1/png/pngwutil.c ****          unsigned int pd = png_ptr->pixel_depth;
  78              		.loc 1 219 0
  79 0058 448BAFF8 		movl	504(%rdi), %r13d
  79      010000
  80              	.LVL2:
  81              	.LBB189:
 226:fltk-1.3.4-1/png/pngwutil.c **** 
  82              		.loc 1 226 0
  83 005f BB030000 		movl	$3, %ebx
  83      00
 229:fltk-1.3.4-1/png/pngwutil.c ****          }
  84              		.loc 1 229 0
  85 0064 31FF     		xorl	%edi, %edi
  86              	.LVL3:
  87 0066 4489F0   		movl	%r14d, %eax
  88 0069 410FB6F6 		movzbl	%r14b, %esi
  89 006d C1E803   		shrl	$3, %eax
  90 0070 48897424 		movq	%rsi, -8(%rsp)
  90      F8
  91 0075 48894424 		movq	%rax, -16(%rsp)
  91      F0
  92              	.LBE189:
 224:fltk-1.3.4-1/png/pngwutil.c ****          {
  93              		.loc 1 224 0
  94 007a 31C0     		xorl	%eax, %eax
  95 007c EB5E     		jmp	.L9
  96              	.LVL4:
  97 007e 6690     		.p2align 4,,10
  98              		.p2align 3
  99              	.L30:
 100              	.LBB190:
 229:fltk-1.3.4-1/png/pngwutil.c ****          }
 101              		.loc 1 229 0 discriminator 1
 102 0080 480FAF54 		imulq	-16(%rsp), %rdx
 102      24F0
 103              	.LVL5:
 104 0086 4883C201 		addq	$1, %rdx
 105              	.L7:
 229:fltk-1.3.4-1/png/pngwutil.c ****          }
 106              		.loc 1 229 0 is_stmt 0 discriminator 4
 107 008a 83FF02   		cmpl	$2, %edi
 108 008d 0F86C500 		jbe	.L8
 108      0000
 229:fltk-1.3.4-1/png/pngwutil.c ****          }
 109              		.loc 1 229 0 discriminator 5
 110 0093 41BB0800 		movl	$8, %r11d
 110      0000
 111 0099 4489E6   		movl	%r12d, %esi
 112 009c 4189DF   		movl	%ebx, %r15d
 113 009f 4129FB   		subl	%edi, %r11d
 114 00a2 4183F101 		xorl	$1, %r9d
 115 00a6 41D1FB   		sarl	%r11d
 116 00a9 4489D9   		movl	%r11d, %ecx
 117 00ac D3E6     		sall	%cl, %esi
 118 00ae 89F9     		movl	%edi, %ecx
 119 00b0 D1F9     		sarl	%ecx
 120 00b2 83EE01   		subl	$1, %esi
 121 00b5 4129CF   		subl	%ecx, %r15d
 122 00b8 4489F9   		movl	%r15d, %ecx
 123 00bb 41D3E1   		sall	%cl, %r9d
 124 00be 4429CE   		subl	%r9d, %esi
 125 00c1 4401C6   		addl	%r8d, %esi
 126              	.L11:
 229:fltk-1.3.4-1/png/pngwutil.c ****          }
 127              		.loc 1 229 0 discriminator 12
 128 00c4 4489D9   		movl	%r11d, %ecx
 129 00c7 D3EE     		shrl	%cl, %esi
 130 00c9 480FAFD6 		imulq	%rsi, %rdx
 131 00cd 4801D0   		addq	%rdx, %rax
 132              	.LVL6:
 133              	.L5:
 134 00d0 83C701   		addl	$1, %edi
 135 00d3 4183C201 		addl	$1, %r10d
 136              	.LBE190:
 224:fltk-1.3.4-1/png/pngwutil.c ****          {
 137              		.loc 1 224 0 is_stmt 1 discriminator 1
 138 00d7 83FF07   		cmpl	$7, %edi
 139 00da 746C     		je	.L29
 140              	.LVL7:
 141              	.L9:
 142              	.LBB191:
 226:fltk-1.3.4-1/png/pngwutil.c **** 
 143              		.loc 1 226 0
 144 00dc 83FF01   		cmpl	$1, %edi
 145 00df 0F86AB00 		jbe	.L4
 145      0000
 226:fltk-1.3.4-1/png/pngwutil.c **** 
 146              		.loc 1 226 0 is_stmt 0 discriminator 1
 147 00e5 89EE     		movl	%ebp, %esi
 148 00e7 4489E2   		movl	%r12d, %edx
 149 00ea 4189F9   		movl	%edi, %r9d
 150 00ed 29FE     		subl	%edi, %esi
 151 00ef 4189DB   		movl	%ebx, %r11d
 152 00f2 4183E101 		andl	$1, %r9d
 153 00f6 D1FE     		sarl	%esi
 154 00f8 89F1     		movl	%esi, %ecx
 155 00fa D3E2     		sall	%cl, %edx
 156 00fc 4489D1   		movl	%r10d, %ecx
 157 00ff D1F9     		sarl	%ecx
 158 0101 83EA01   		subl	$1, %edx
 159 0104 4129CB   		subl	%ecx, %r11d
 160 0107 4489D9   		movl	%r11d, %ecx
 161 010a 4589CB   		movl	%r9d, %r11d
 162 010d 41D3E3   		sall	%cl, %r11d
 163 0110 4489D9   		movl	%r11d, %ecx
 164 0113 83E107   		andl	$7, %ecx
 165 0116 29CA     		subl	%ecx, %edx
 166 0118 4401EA   		addl	%r13d, %edx
 167              	.L10:
 226:fltk-1.3.4-1/png/pngwutil.c **** 
 168              		.loc 1 226 0 discriminator 8
 169 011b 89F1     		movl	%esi, %ecx
 170 011d D3EA     		shrl	%cl, %edx
 171              	.LVL8:
 228:fltk-1.3.4-1/png/pngwutil.c ****                cb_base += (PNG_ROWBYTES(pd, pw)+1) * PNG_PASS_ROWS(h, pass);
 172              		.loc 1 228 0 is_stmt 1 discriminator 8
 173 011f 85D2     		testl	%edx, %edx
 174 0121 74AD     		je	.L5
 229:fltk-1.3.4-1/png/pngwutil.c ****          }
 175              		.loc 1 229 0
 176 0123 4183FE07 		cmpl	$7, %r14d
 177 0127 0F8753FF 		ja	.L30
 177      FFFF
 229:fltk-1.3.4-1/png/pngwutil.c ****          }
 178              		.loc 1 229 0 is_stmt 0 discriminator 2
 179 012d 480FAF54 		imulq	-8(%rsp), %rdx
 179      24F8
 180              	.LVL9:
 181 0133 4883C207 		addq	$7, %rdx
 182 0137 48C1EA03 		shrq	$3, %rdx
 183 013b 4883C201 		addq	$1, %rdx
 184 013f E946FFFF 		jmp	.L7
 184      FF
 185              	.LVL10:
 186              		.p2align 4,,10
 187 0144 0F1F4000 		.p2align 3
 188              	.L29:
 189              	.LBE191:
 190              	.LBE195:
 241:fltk-1.3.4-1/png/pngwutil.c **** }
 191              		.loc 1 241 0 is_stmt 1
 192 0148 5B       		popq	%rbx
 193              		.cfi_remember_state
 194              		.cfi_restore 3
 195              		.cfi_def_cfa_offset 48
 196 0149 5D       		popq	%rbp
 197              		.cfi_restore 6
 198              		.cfi_def_cfa_offset 40
 199 014a 415C     		popq	%r12
 200              		.cfi_restore 12
 201              		.cfi_def_cfa_offset 32
 202 014c 415D     		popq	%r13
 203              		.cfi_restore 13
 204              		.cfi_def_cfa_offset 24
 205              	.LVL11:
 206 014e 415E     		popq	%r14
 207              		.cfi_restore 14
 208              		.cfi_def_cfa_offset 16
 209              	.LVL12:
 210 0150 415F     		popq	%r15
 211              		.cfi_restore 15
 212              		.cfi_def_cfa_offset 8
 213 0152 C3       		ret
 214              	.LVL13:
 215              		.p2align 4,,10
 216 0153 0F1F4400 		.p2align 3
 216      00
 217              	.L8:
 218              		.cfi_restore_state
 219              	.LBB196:
 220              	.LBB192:
 229:fltk-1.3.4-1/png/pngwutil.c ****          }
 221              		.loc 1 229 0
 222 0158 89F9     		movl	%edi, %ecx
 223 015a 89DE     		movl	%ebx, %esi
 224 015c 4183F101 		xorl	$1, %r9d
 225 0160 D1F9     		sarl	%ecx
 226 0162 41BB0300 		movl	$3, %r11d
 226      0000
 227 0168 29CE     		subl	%ecx, %esi
 228 016a 89F1     		movl	%esi, %ecx
 229 016c 89EE     		movl	%ebp, %esi
 230 016e 41D3E1   		sall	%cl, %r9d
 231 0171 4183E107 		andl	$7, %r9d
 232 0175 4429CE   		subl	%r9d, %esi
 233 0178 4401C6   		addl	%r8d, %esi
 234 017b E944FFFF 		jmp	.L11
 234      FF
 235              	.LVL14:
 236              		.p2align 4,,10
 237              		.p2align 3
 238              	.L3:
 239              		.cfi_def_cfa_offset 8
 240              		.cfi_restore 3
 241              		.cfi_restore 6
 242              		.cfi_restore 12
 243              		.cfi_restore 13
 244              		.cfi_restore 14
 245              		.cfi_restore 15
 246              	.LBE192:
 247              	.LBE196:
 236:fltk-1.3.4-1/png/pngwutil.c ****    }
 248              		.loc 1 236 0
 249 0180 4883C001 		addq	$1, %rax
 250 0184 490FAFC0 		imulq	%r8, %rax
 251              		.loc 1 241 0
 252 0188 C3       		ret
 253              	.LVL15:
 254 0189 0F1F8000 		.p2align 4,,10
 254      000000
 255              		.p2align 3
 256              	.L4:
 257              		.cfi_def_cfa_offset 56
 258              		.cfi_offset 3, -56
 259              		.cfi_offset 6, -48
 260              		.cfi_offset 12, -40
 261              		.cfi_offset 13, -32
 262              		.cfi_offset 14, -24
 263              		.cfi_offset 15, -16
 264              	.LBB197:
 265              	.LBB193:
 226:fltk-1.3.4-1/png/pngwutil.c **** 
 266              		.loc 1 226 0
 267 0190 4489D2   		movl	%r10d, %edx
 268 0193 89D9     		movl	%ebx, %ecx
 269 0195 89EE     		movl	%ebp, %esi
 270 0197 D1FA     		sarl	%edx
 271 0199 4189F9   		movl	%edi, %r9d
 272 019c 29D1     		subl	%edx, %ecx
 273 019e 89FA     		movl	%edi, %edx
 274 01a0 D3E2     		sall	%cl, %edx
 275 01a2 83E207   		andl	$7, %edx
 276 01a5 29D6     		subl	%edx, %esi
 277 01a7 89F2     		movl	%esi, %edx
 278 01a9 BE030000 		movl	$3, %esi
 278      00
 279 01ae 4401EA   		addl	%r13d, %edx
 280 01b1 E965FFFF 		jmp	.L10
 280      FF
 281              	.LBE193:
 282              	.LBE197:
 283              		.cfi_endproc
 284              	.LFE65:
 286              		.section	.text.unlikely.png_image_size
 287              	.LCOLDE0:
 288              		.section	.text.png_image_size
 289              	.LHOTE0:
 290              		.section	.rodata.str1.1,"aMS",@progbits,1
 291              	.LC1:
 292 0000 20757369 		.string	" using zstream"
 292      6E67207A 
 292      73747265 
 292      616D00
 293              	.LC2:
 294 000f 696E2075 		.string	"in use by IDAT"
 294      73652062 
 294      79204944 
 294      415400
 295              	.LC3:
 296 001e 6465666C 		.string	"deflateEnd failed (ignored)"
 296      61746545 
 296      6E642066 
 296      61696C65 
 296      64202869 
 297              	.LC4:
 298 003a 312E322E 		.string	"1.2.8"
 298      3800
 299              		.section	.text.unlikely.png_deflate_claim,"ax",@progbits
 300              	.LCOLDB5:
 301              		.section	.text.png_deflate_claim,"ax",@progbits
 302              	.LHOTB5:
 303              		.p2align 4,,15
 305              	png_deflate_claim:
 306              	.LFB67:
 242:fltk-1.3.4-1/png/pngwutil.c **** 
 243:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_OPTIMIZE_CMF_SUPPORTED
 244:fltk-1.3.4-1/png/pngwutil.c ****    /* This is the code to hack the first two bytes of the deflate stream (the
 245:fltk-1.3.4-1/png/pngwutil.c ****     * deflate header) to correct the windowBits value to match the actual data
 246:fltk-1.3.4-1/png/pngwutil.c ****     * size.  Note that the second argument is the *uncompressed* size but the
 247:fltk-1.3.4-1/png/pngwutil.c ****     * first argument is the *compressed* data (and it must be deflate
 248:fltk-1.3.4-1/png/pngwutil.c ****     * compressed.)
 249:fltk-1.3.4-1/png/pngwutil.c ****     */
 250:fltk-1.3.4-1/png/pngwutil.c **** static void
 251:fltk-1.3.4-1/png/pngwutil.c **** optimize_cmf(png_bytep data, png_alloc_size_t data_size)
 252:fltk-1.3.4-1/png/pngwutil.c **** {
 253:fltk-1.3.4-1/png/pngwutil.c ****    /* Optimize the CMF field in the zlib stream.  The resultant zlib stream is
 254:fltk-1.3.4-1/png/pngwutil.c ****     * still compliant to the stream specification.
 255:fltk-1.3.4-1/png/pngwutil.c ****     */
 256:fltk-1.3.4-1/png/pngwutil.c ****    if (data_size <= 16384) /* else windowBits must be 15 */
 257:fltk-1.3.4-1/png/pngwutil.c ****    {
 258:fltk-1.3.4-1/png/pngwutil.c ****       unsigned int z_cmf = data[0];  /* zlib compression method and flags */
 259:fltk-1.3.4-1/png/pngwutil.c **** 
 260:fltk-1.3.4-1/png/pngwutil.c ****       if ((z_cmf & 0x0f) == 8 && (z_cmf & 0xf0) <= 0x70)
 261:fltk-1.3.4-1/png/pngwutil.c ****       {
 262:fltk-1.3.4-1/png/pngwutil.c ****          unsigned int z_cinfo;
 263:fltk-1.3.4-1/png/pngwutil.c ****          unsigned int half_z_window_size;
 264:fltk-1.3.4-1/png/pngwutil.c **** 
 265:fltk-1.3.4-1/png/pngwutil.c ****          z_cinfo = z_cmf >> 4;
 266:fltk-1.3.4-1/png/pngwutil.c ****          half_z_window_size = 1U << (z_cinfo + 7);
 267:fltk-1.3.4-1/png/pngwutil.c **** 
 268:fltk-1.3.4-1/png/pngwutil.c ****          if (data_size <= half_z_window_size) /* else no change */
 269:fltk-1.3.4-1/png/pngwutil.c ****          {
 270:fltk-1.3.4-1/png/pngwutil.c ****             unsigned int tmp;
 271:fltk-1.3.4-1/png/pngwutil.c **** 
 272:fltk-1.3.4-1/png/pngwutil.c ****             do
 273:fltk-1.3.4-1/png/pngwutil.c ****             {
 274:fltk-1.3.4-1/png/pngwutil.c ****                half_z_window_size >>= 1;
 275:fltk-1.3.4-1/png/pngwutil.c ****                --z_cinfo;
 276:fltk-1.3.4-1/png/pngwutil.c ****             }
 277:fltk-1.3.4-1/png/pngwutil.c ****             while (z_cinfo > 0 && data_size <= half_z_window_size);
 278:fltk-1.3.4-1/png/pngwutil.c **** 
 279:fltk-1.3.4-1/png/pngwutil.c ****             z_cmf = (z_cmf & 0x0f) | (z_cinfo << 4);
 280:fltk-1.3.4-1/png/pngwutil.c **** 
 281:fltk-1.3.4-1/png/pngwutil.c ****             data[0] = (png_byte)z_cmf;
 282:fltk-1.3.4-1/png/pngwutil.c ****             tmp = data[1] & 0xe0;
 283:fltk-1.3.4-1/png/pngwutil.c ****             tmp += 0x1f - ((z_cmf << 8) + tmp) % 0x1f;
 284:fltk-1.3.4-1/png/pngwutil.c ****             data[1] = (png_byte)tmp;
 285:fltk-1.3.4-1/png/pngwutil.c ****          }
 286:fltk-1.3.4-1/png/pngwutil.c ****       }
 287:fltk-1.3.4-1/png/pngwutil.c ****    }
 288:fltk-1.3.4-1/png/pngwutil.c **** }
 289:fltk-1.3.4-1/png/pngwutil.c **** #endif /* WRITE_OPTIMIZE_CMF */
 290:fltk-1.3.4-1/png/pngwutil.c **** 
 291:fltk-1.3.4-1/png/pngwutil.c **** /* Initialize the compressor for the appropriate type of compression. */
 292:fltk-1.3.4-1/png/pngwutil.c **** static int
 293:fltk-1.3.4-1/png/pngwutil.c **** png_deflate_claim(png_structrp png_ptr, png_uint_32 owner,
 294:fltk-1.3.4-1/png/pngwutil.c ****    png_alloc_size_t data_size)
 295:fltk-1.3.4-1/png/pngwutil.c **** {
 307              		.loc 1 295 0
 308              		.cfi_startproc
 309              	.LVL16:
 310 0000 4157     		pushq	%r15
 311              		.cfi_def_cfa_offset 16
 312              		.cfi_offset 15, -16
 313 0002 4156     		pushq	%r14
 314              		.cfi_def_cfa_offset 24
 315              		.cfi_offset 14, -24
 316 0004 4155     		pushq	%r13
 317              		.cfi_def_cfa_offset 32
 318              		.cfi_offset 13, -32
 319 0006 4154     		pushq	%r12
 320              		.cfi_def_cfa_offset 40
 321              		.cfi_offset 12, -40
 322 0008 4189F4   		movl	%esi, %r12d
 323 000b 55       		pushq	%rbp
 324              		.cfi_def_cfa_offset 48
 325              		.cfi_offset 6, -48
 326 000c 53       		pushq	%rbx
 327              		.cfi_def_cfa_offset 56
 328              		.cfi_offset 3, -56
 329 000d 4889D5   		movq	%rdx, %rbp
 330 0010 4889FB   		movq	%rdi, %rbx
 331 0013 4883EC68 		subq	$104, %rsp
 332              		.cfi_def_cfa_offset 160
 333              		.loc 1 295 0
 334 0017 64488B04 		movq	%fs:40, %rax
 334      25280000 
 334      00
 335 0020 48894424 		movq	%rax, 88(%rsp)
 335      58
 336 0025 31C0     		xorl	%eax, %eax
 296:fltk-1.3.4-1/png/pngwutil.c ****    if (png_ptr->zowner != 0)
 337              		.loc 1 296 0
 338 0027 8B873801 		movl	312(%rdi), %eax
 338      0000
 339 002d 85C0     		testl	%eax, %eax
 340 002f 0F85EB01 		jne	.L58
 340      0000
 341              	.LVL17:
 342              	.LBB198:
 297:fltk-1.3.4-1/png/pngwutil.c ****    {
 298:fltk-1.3.4-1/png/pngwutil.c **** #if defined(PNG_WARNINGS_SUPPORTED) || defined(PNG_ERROR_TEXT_SUPPORTED)
 299:fltk-1.3.4-1/png/pngwutil.c ****       char msg[64];
 300:fltk-1.3.4-1/png/pngwutil.c **** 
 301:fltk-1.3.4-1/png/pngwutil.c ****       PNG_STRING_FROM_CHUNK(msg, owner);
 302:fltk-1.3.4-1/png/pngwutil.c ****       msg[4] = ':';
 303:fltk-1.3.4-1/png/pngwutil.c ****       msg[5] = ' ';
 304:fltk-1.3.4-1/png/pngwutil.c ****       PNG_STRING_FROM_CHUNK(msg+6, png_ptr->zowner);
 305:fltk-1.3.4-1/png/pngwutil.c ****       /* So the message that results is "<chunk> using zstream"; this is an
 306:fltk-1.3.4-1/png/pngwutil.c ****        * internal error, but is very useful for debugging.  i18n requirements
 307:fltk-1.3.4-1/png/pngwutil.c ****        * are minimal.
 308:fltk-1.3.4-1/png/pngwutil.c ****        */
 309:fltk-1.3.4-1/png/pngwutil.c ****       (void)png_safecat(msg, (sizeof msg), 10, " using zstream");
 310:fltk-1.3.4-1/png/pngwutil.c **** #endif
 311:fltk-1.3.4-1/png/pngwutil.c **** #if PNG_LIBPNG_BUILD_BASE_TYPE >= PNG_LIBPNG_BUILD_RC
 312:fltk-1.3.4-1/png/pngwutil.c ****          png_warning(png_ptr, msg);
 313:fltk-1.3.4-1/png/pngwutil.c **** 
 314:fltk-1.3.4-1/png/pngwutil.c ****          /* Attempt sane error recovery */
 315:fltk-1.3.4-1/png/pngwutil.c ****          if (png_ptr->zowner == png_IDAT) /* don't steal from IDAT */
 316:fltk-1.3.4-1/png/pngwutil.c ****          {
 317:fltk-1.3.4-1/png/pngwutil.c ****             png_ptr->zstream.msg = PNGZ_MSG_CAST("in use by IDAT");
 318:fltk-1.3.4-1/png/pngwutil.c ****             return Z_STREAM_ERROR;
 319:fltk-1.3.4-1/png/pngwutil.c ****          }
 320:fltk-1.3.4-1/png/pngwutil.c **** 
 321:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zowner = 0;
 322:fltk-1.3.4-1/png/pngwutil.c **** #else
 323:fltk-1.3.4-1/png/pngwutil.c ****          png_error(png_ptr, msg);
 324:fltk-1.3.4-1/png/pngwutil.c **** #endif
 325:fltk-1.3.4-1/png/pngwutil.c ****    }
 326:fltk-1.3.4-1/png/pngwutil.c **** 
 327:fltk-1.3.4-1/png/pngwutil.c ****    {
 328:fltk-1.3.4-1/png/pngwutil.c ****       int level = png_ptr->zlib_level;
 329:fltk-1.3.4-1/png/pngwutil.c ****       int method = png_ptr->zlib_method;
 330:fltk-1.3.4-1/png/pngwutil.c ****       int windowBits = png_ptr->zlib_window_bits;
 331:fltk-1.3.4-1/png/pngwutil.c ****       int memLevel = png_ptr->zlib_mem_level;
 332:fltk-1.3.4-1/png/pngwutil.c ****       int strategy; /* set below */
 333:fltk-1.3.4-1/png/pngwutil.c ****       int ret; /* zlib return code */
 334:fltk-1.3.4-1/png/pngwutil.c **** 
 335:fltk-1.3.4-1/png/pngwutil.c ****       if (owner == png_IDAT)
 343              		.loc 1 335 0
 344 0035 4181FC54 		cmpl	$1229209940, %r12d
 344      414449
 345 003c 0F847402 		je	.L59
 345      0000
 346              	.LVL18:
 347              	.L35:
 336:fltk-1.3.4-1/png/pngwutil.c ****       {
 337:fltk-1.3.4-1/png/pngwutil.c ****          if ((png_ptr->flags & PNG_FLAG_ZLIB_CUSTOM_STRATEGY) != 0)
 338:fltk-1.3.4-1/png/pngwutil.c ****             strategy = png_ptr->zlib_strategy;
 339:fltk-1.3.4-1/png/pngwutil.c **** 
 340:fltk-1.3.4-1/png/pngwutil.c ****          else if (png_ptr->do_filter != PNG_FILTER_NONE)
 341:fltk-1.3.4-1/png/pngwutil.c ****             strategy = PNG_Z_DEFAULT_STRATEGY;
 342:fltk-1.3.4-1/png/pngwutil.c **** 
 343:fltk-1.3.4-1/png/pngwutil.c ****          else
 344:fltk-1.3.4-1/png/pngwutil.c ****             strategy = PNG_Z_DEFAULT_NOFILTER_STRATEGY;
 345:fltk-1.3.4-1/png/pngwutil.c ****       }
 346:fltk-1.3.4-1/png/pngwutil.c **** 
 347:fltk-1.3.4-1/png/pngwutil.c ****       else
 348:fltk-1.3.4-1/png/pngwutil.c ****       {
 349:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_CUSTOMIZE_ZTXT_COMPRESSION_SUPPORTED
 350:fltk-1.3.4-1/png/pngwutil.c ****             level = png_ptr->zlib_text_level;
 348              		.loc 1 350 0
 349 0042 448BB3D0 		movl	464(%rbx), %r14d
 349      010000
 350              	.LVL19:
 351:fltk-1.3.4-1/png/pngwutil.c ****             method = png_ptr->zlib_text_method;
 351              		.loc 1 351 0
 352 0049 448BBBD4 		movl	468(%rbx), %r15d
 352      010000
 353              	.LVL20:
 352:fltk-1.3.4-1/png/pngwutil.c ****             windowBits = png_ptr->zlib_text_window_bits;
 354              		.loc 1 352 0
 355 0050 448BABD8 		movl	472(%rbx), %r13d
 355      010000
 356              	.LVL21:
 353:fltk-1.3.4-1/png/pngwutil.c ****             memLevel = png_ptr->zlib_text_mem_level;
 357              		.loc 1 353 0
 358 0057 448B83DC 		movl	476(%rbx), %r8d
 358      010000
 359              	.LVL22:
 354:fltk-1.3.4-1/png/pngwutil.c ****             strategy = png_ptr->zlib_text_strategy;
 360              		.loc 1 354 0
 361 005e 448B8BE0 		movl	480(%rbx), %r9d
 361      010000
 362              	.LVL23:
 363 0065 8BB33001 		movl	304(%rbx), %esi
 363      0000
 364              	.LVL24:
 365              	.L37:
 355:fltk-1.3.4-1/png/pngwutil.c **** #else
 356:fltk-1.3.4-1/png/pngwutil.c ****             /* If customization is not supported the values all come from the
 357:fltk-1.3.4-1/png/pngwutil.c ****              * IDAT values except for the strategy, which is fixed to the
 358:fltk-1.3.4-1/png/pngwutil.c ****              * default.  (This is the pre-1.6.0 behavior too, although it was
 359:fltk-1.3.4-1/png/pngwutil.c ****              * implemented in a very different way.)
 360:fltk-1.3.4-1/png/pngwutil.c ****              */
 361:fltk-1.3.4-1/png/pngwutil.c ****             strategy = Z_DEFAULT_STRATEGY;
 362:fltk-1.3.4-1/png/pngwutil.c **** #endif
 363:fltk-1.3.4-1/png/pngwutil.c ****       }
 364:fltk-1.3.4-1/png/pngwutil.c **** 
 365:fltk-1.3.4-1/png/pngwutil.c ****       /* Adjust 'windowBits' down if larger than 'data_size'; to stop this
 366:fltk-1.3.4-1/png/pngwutil.c ****        * happening just pass 32768 as the data_size parameter.  Notice that zlib
 367:fltk-1.3.4-1/png/pngwutil.c ****        * requires an extra 262 bytes in the window in addition to the data to be
 368:fltk-1.3.4-1/png/pngwutil.c ****        * able to see the whole of the data, so if data_size+262 takes us to the
 369:fltk-1.3.4-1/png/pngwutil.c ****        * next windowBits size we need to fix up the value later.  (Because even
 370:fltk-1.3.4-1/png/pngwutil.c ****        * though deflate needs the extra window, inflate does not!)
 371:fltk-1.3.4-1/png/pngwutil.c ****        */
 372:fltk-1.3.4-1/png/pngwutil.c ****       if (data_size <= 16384)
 366              		.loc 1 372 0
 367 006b 4881FD00 		cmpq	$16384, %rbp
 367      400000
 368 0072 772B     		ja	.L38
 369              	.LBB199:
 373:fltk-1.3.4-1/png/pngwutil.c ****       {
 374:fltk-1.3.4-1/png/pngwutil.c ****          /* IMPLEMENTATION NOTE: this 'half_window_size' stuff is only here to
 375:fltk-1.3.4-1/png/pngwutil.c ****           * work round a Microsoft Visual C misbehavior which, contrary to C-90,
 376:fltk-1.3.4-1/png/pngwutil.c ****           * widens the result of the following shift to 64-bits if (and,
 377:fltk-1.3.4-1/png/pngwutil.c ****           * apparently, only if) it is used in a test.
 378:fltk-1.3.4-1/png/pngwutil.c ****           */
 379:fltk-1.3.4-1/png/pngwutil.c ****          unsigned int half_window_size = 1U << (windowBits-1);
 370              		.loc 1 379 0
 371 0074 418D4DFF 		leal	-1(%r13), %ecx
 372 0078 B8010000 		movl	$1, %eax
 372      00
 380:fltk-1.3.4-1/png/pngwutil.c **** 
 381:fltk-1.3.4-1/png/pngwutil.c ****          while (data_size + 262 <= half_window_size)
 373              		.loc 1 381 0
 374 007d 4881C506 		addq	$262, %rbp
 374      010000
 375              	.LVL25:
 379:fltk-1.3.4-1/png/pngwutil.c **** 
 376              		.loc 1 379 0
 377 0084 D3E0     		sall	%cl, %eax
 378              	.LVL26:
 379              		.loc 1 381 0
 380 0086 89C2     		movl	%eax, %edx
 381 0088 4839EA   		cmpq	%rbp, %rdx
 382 008b 7306     		jnb	.L39
 383 008d EB10     		jmp	.L38
 384              	.LVL27:
 385 008f 90       		.p2align 4,,10
 386              		.p2align 3
 387              	.L60:
 388 0090 83E901   		subl	$1, %ecx
 389              	.LVL28:
 390              	.L39:
 382:fltk-1.3.4-1/png/pngwutil.c ****          {
 383:fltk-1.3.4-1/png/pngwutil.c ****             half_window_size >>= 1;
 391              		.loc 1 383 0
 392 0093 D1E8     		shrl	%eax
 393              	.LVL29:
 384:fltk-1.3.4-1/png/pngwutil.c ****             --windowBits;
 394              		.loc 1 384 0
 395 0095 4189CD   		movl	%ecx, %r13d
 381:fltk-1.3.4-1/png/pngwutil.c ****          {
 396              		.loc 1 381 0
 397 0098 89C2     		movl	%eax, %edx
 398 009a 4839EA   		cmpq	%rbp, %rdx
 399 009d 73F1     		jnb	.L60
 400              	.LVL30:
 401              	.L38:
 402              	.LBE199:
 385:fltk-1.3.4-1/png/pngwutil.c ****          }
 386:fltk-1.3.4-1/png/pngwutil.c ****       }
 387:fltk-1.3.4-1/png/pngwutil.c **** 
 388:fltk-1.3.4-1/png/pngwutil.c ****       /* Check against the previous initialized values, if any. */
 389:fltk-1.3.4-1/png/pngwutil.c ****       if ((png_ptr->flags & PNG_FLAG_ZSTREAM_INITIALIZED) != 0 &&
 403              		.loc 1 389 0
 404 009f 83E602   		andl	$2, %esi
 405 00a2 0F858800 		jne	.L40
 405      0000
 406 00a8 488DAB40 		leaq	320(%rbx), %rbp
 406      010000
 390:fltk-1.3.4-1/png/pngwutil.c ****          (png_ptr->zlib_set_level != level ||
 391:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zlib_set_method != method ||
 392:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zlib_set_window_bits != windowBits ||
 393:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zlib_set_mem_level != memLevel ||
 394:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zlib_set_strategy != strategy))
 395:fltk-1.3.4-1/png/pngwutil.c ****       {
 396:fltk-1.3.4-1/png/pngwutil.c ****          if (deflateEnd(&png_ptr->zstream) != Z_OK)
 397:fltk-1.3.4-1/png/pngwutil.c ****             png_warning(png_ptr, "deflateEnd failed (ignored)");
 398:fltk-1.3.4-1/png/pngwutil.c **** 
 399:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->flags &= ~PNG_FLAG_ZSTREAM_INITIALIZED;
 400:fltk-1.3.4-1/png/pngwutil.c ****       }
 401:fltk-1.3.4-1/png/pngwutil.c **** 
 402:fltk-1.3.4-1/png/pngwutil.c ****       /* For safety clear out the input and output pointers (currently zlib
 403:fltk-1.3.4-1/png/pngwutil.c ****        * doesn't use them on Init, but it might in the future).
 404:fltk-1.3.4-1/png/pngwutil.c ****        */
 405:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zstream.next_in = NULL;
 407              		.loc 1 405 0
 408 00af 48C78340 		movq	$0, 320(%rbx)
 408      01000000 
 408      000000
 406:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zstream.avail_in = 0;
 409              		.loc 1 406 0
 410 00ba C7834801 		movl	$0, 328(%rbx)
 410      00000000 
 410      0000
 407:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zstream.next_out = NULL;
 411              		.loc 1 407 0
 412 00c4 48C78358 		movq	$0, 344(%rbx)
 412      01000000 
 412      000000
 408:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zstream.avail_out = 0;
 413              		.loc 1 408 0
 414 00cf C7836001 		movl	$0, 352(%rbx)
 414      00000000 
 414      0000
 415              	.LVL31:
 416              	.L41:
 409:fltk-1.3.4-1/png/pngwutil.c **** 
 410:fltk-1.3.4-1/png/pngwutil.c ****       /* Now initialize if required, setting the new parameters, otherwise just
 411:fltk-1.3.4-1/png/pngwutil.c ****        * to a simple reset to the previous parameters.
 412:fltk-1.3.4-1/png/pngwutil.c ****        */
 413:fltk-1.3.4-1/png/pngwutil.c ****       if ((png_ptr->flags & PNG_FLAG_ZSTREAM_INITIALIZED) != 0)
 414:fltk-1.3.4-1/png/pngwutil.c ****          ret = deflateReset(&png_ptr->zstream);
 415:fltk-1.3.4-1/png/pngwutil.c **** 
 416:fltk-1.3.4-1/png/pngwutil.c ****       else
 417:fltk-1.3.4-1/png/pngwutil.c ****       {
 418:fltk-1.3.4-1/png/pngwutil.c ****          ret = deflateInit2(&png_ptr->zstream, level, method, windowBits,
 417              		.loc 1 418 0
 418 00d9 6A70     		pushq	$112
 419              		.cfi_def_cfa_offset 168
 420 00db 68000000 		pushq	$.LC4
 420      00
 421              		.cfi_def_cfa_offset 176
 422 00e0 4489FA   		movl	%r15d, %edx
 423 00e3 4889EF   		movq	%rbp, %rdi
 424 00e6 4489E9   		movl	%r13d, %ecx
 425 00e9 4489F6   		movl	%r14d, %esi
 426 00ec E8000000 		call	deflateInit2_
 426      00
 427              	.LVL32:
 428 00f1 89C5     		movl	%eax, %ebp
 429              	.LVL33:
 419:fltk-1.3.4-1/png/pngwutil.c ****             memLevel, strategy);
 420:fltk-1.3.4-1/png/pngwutil.c **** 
 421:fltk-1.3.4-1/png/pngwutil.c ****          if (ret == Z_OK)
 430              		.loc 1 421 0
 431 00f3 85ED     		testl	%ebp, %ebp
 432 00f5 58       		popq	%rax
 433              		.cfi_def_cfa_offset 168
 434              	.LVL34:
 435 00f6 5A       		popq	%rdx
 436              		.cfi_def_cfa_offset 160
 437 00f7 0F850A01 		jne	.L44
 437      0000
 422:fltk-1.3.4-1/png/pngwutil.c ****             png_ptr->flags |= PNG_FLAG_ZSTREAM_INITIALIZED;
 438              		.loc 1 422 0
 439 00fd 838B3001 		orl	$2, 304(%rbx)
 439      000002
 440              	.LVL35:
 441              	.L43:
 423:fltk-1.3.4-1/png/pngwutil.c ****       }
 424:fltk-1.3.4-1/png/pngwutil.c **** 
 425:fltk-1.3.4-1/png/pngwutil.c ****       /* The return code is from either deflateReset or deflateInit2; they have
 426:fltk-1.3.4-1/png/pngwutil.c ****        * pretty much the same set of error codes.
 427:fltk-1.3.4-1/png/pngwutil.c ****        */
 428:fltk-1.3.4-1/png/pngwutil.c ****       if (ret == Z_OK)
 429:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zowner = owner;
 442              		.loc 1 429 0
 443 0104 4489A338 		movl	%r12d, 312(%rbx)
 443      010000
 444 010b 31C0     		xorl	%eax, %eax
 445              	.LVL36:
 446              	.L34:
 447              	.LBE198:
 430:fltk-1.3.4-1/png/pngwutil.c **** 
 431:fltk-1.3.4-1/png/pngwutil.c ****       else
 432:fltk-1.3.4-1/png/pngwutil.c ****          png_zstream_error(png_ptr, ret);
 433:fltk-1.3.4-1/png/pngwutil.c **** 
 434:fltk-1.3.4-1/png/pngwutil.c ****       return ret;
 435:fltk-1.3.4-1/png/pngwutil.c ****    }
 436:fltk-1.3.4-1/png/pngwutil.c **** }
 448              		.loc 1 436 0
 449 010d 488B7C24 		movq	88(%rsp), %rdi
 449      58
 450 0112 6448333C 		xorq	%fs:40, %rdi
 450      25280000 
 450      00
 451 011b 0F851802 		jne	.L61
 451      0000
 452 0121 4883C468 		addq	$104, %rsp
 453              		.cfi_remember_state
 454              		.cfi_def_cfa_offset 56
 455 0125 5B       		popq	%rbx
 456              		.cfi_def_cfa_offset 48
 457              	.LVL37:
 458 0126 5D       		popq	%rbp
 459              		.cfi_def_cfa_offset 40
 460 0127 415C     		popq	%r12
 461              		.cfi_def_cfa_offset 32
 462              	.LVL38:
 463 0129 415D     		popq	%r13
 464              		.cfi_def_cfa_offset 24
 465 012b 415E     		popq	%r14
 466              		.cfi_def_cfa_offset 16
 467 012d 415F     		popq	%r15
 468              		.cfi_def_cfa_offset 8
 469 012f C3       		ret
 470              	.LVL39:
 471              		.p2align 4,,10
 472              		.p2align 3
 473              	.L40:
 474              		.cfi_restore_state
 475              	.LBB200:
 389:fltk-1.3.4-1/png/pngwutil.c ****          (png_ptr->zlib_set_level != level ||
 476              		.loc 1 389 0 discriminator 1
 477 0130 443BB3E4 		cmpl	484(%rbx), %r14d
 477      010000
 478 0137 7509     		jne	.L42
 390:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zlib_set_method != method ||
 479              		.loc 1 390 0
 480 0139 443BBBE8 		cmpl	488(%rbx), %r15d
 480      010000
 481 0140 7466     		je	.L62
 482              	.L42:
 396:fltk-1.3.4-1/png/pngwutil.c ****             png_warning(png_ptr, "deflateEnd failed (ignored)");
 483              		.loc 1 396 0
 484 0142 488DAB40 		leaq	320(%rbx), %rbp
 484      010000
 485 0149 44894C24 		movl	%r9d, 12(%rsp)
 485      0C
 486 014e 44894424 		movl	%r8d, 8(%rsp)
 486      08
 487 0153 4889EF   		movq	%rbp, %rdi
 488 0156 E8000000 		call	deflateEnd
 488      00
 489              	.LVL40:
 490 015b 85C0     		testl	%eax, %eax
 491 015d 448B4424 		movl	8(%rsp), %r8d
 491      08
 492 0162 448B4C24 		movl	12(%rsp), %r9d
 492      0C
 493 0167 0F859B01 		jne	.L63
 493      0000
 494              	.L45:
 399:fltk-1.3.4-1/png/pngwutil.c ****       }
 495              		.loc 1 399 0
 496 016d 83A33001 		andl	$-3, 304(%rbx)
 496      0000FD
 405:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zstream.avail_in = 0;
 497              		.loc 1 405 0
 498 0174 48C78340 		movq	$0, 320(%rbx)
 498      01000000 
 498      000000
 406:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zstream.next_out = NULL;
 499              		.loc 1 406 0
 500 017f C7834801 		movl	$0, 328(%rbx)
 500      00000000 
 500      0000
 407:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zstream.avail_out = 0;
 501              		.loc 1 407 0
 502 0189 48C78358 		movq	$0, 344(%rbx)
 502      01000000 
 502      000000
 408:fltk-1.3.4-1/png/pngwutil.c **** 
 503              		.loc 1 408 0
 504 0194 C7836001 		movl	$0, 352(%rbx)
 504      00000000 
 504      0000
 505 019e E936FFFF 		jmp	.L41
 505      FF
 506              	.LVL41:
 507              		.p2align 4,,10
 508 01a3 0F1F4400 		.p2align 3
 508      00
 509              	.L62:
 391:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zlib_set_window_bits != windowBits ||
 510              		.loc 1 391 0
 511 01a8 443BABEC 		cmpl	492(%rbx), %r13d
 511      010000
 512 01af 7591     		jne	.L42
 392:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zlib_set_mem_level != memLevel ||
 513              		.loc 1 392 0
 514 01b1 443B83F0 		cmpl	496(%rbx), %r8d
 514      010000
 515 01b8 7588     		jne	.L42
 393:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zlib_set_strategy != strategy))
 516              		.loc 1 393 0
 517 01ba 443B8BF4 		cmpl	500(%rbx), %r9d
 517      010000
 518 01c1 0F857BFF 		jne	.L42
 518      FFFF
 519 01c7 488DBB40 		leaq	320(%rbx), %rdi
 519      010000
 405:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zstream.avail_in = 0;
 520              		.loc 1 405 0
 521 01ce 48C78340 		movq	$0, 320(%rbx)
 521      01000000 
 521      000000
 406:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zstream.next_out = NULL;
 522              		.loc 1 406 0
 523 01d9 C7834801 		movl	$0, 328(%rbx)
 523      00000000 
 523      0000
 407:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zstream.avail_out = 0;
 524              		.loc 1 407 0
 525 01e3 48C78358 		movq	$0, 344(%rbx)
 525      01000000 
 525      000000
 408:fltk-1.3.4-1/png/pngwutil.c **** 
 526              		.loc 1 408 0
 527 01ee C7836001 		movl	$0, 352(%rbx)
 527      00000000 
 527      0000
 414:fltk-1.3.4-1/png/pngwutil.c **** 
 528              		.loc 1 414 0
 529 01f8 E8000000 		call	deflateReset
 529      00
 530              	.LVL42:
 428:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zowner = owner;
 531              		.loc 1 428 0
 532 01fd 85C0     		testl	%eax, %eax
 414:fltk-1.3.4-1/png/pngwutil.c **** 
 533              		.loc 1 414 0
 534 01ff 89C5     		movl	%eax, %ebp
 535              	.LVL43:
 428:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zowner = owner;
 536              		.loc 1 428 0
 537 0201 0F84FDFE 		je	.L43
 537      FFFF
 538              	.LVL44:
 539              	.L44:
 432:fltk-1.3.4-1/png/pngwutil.c **** 
 540              		.loc 1 432 0
 541 0207 89EE     		movl	%ebp, %esi
 542 0209 4889DF   		movq	%rbx, %rdi
 543 020c E8000000 		call	png_zstream_error
 543      00
 544              	.LVL45:
 545 0211 89E8     		movl	%ebp, %eax
 546 0213 E9F5FEFF 		jmp	.L34
 546      FF
 547              	.LVL46:
 548 0218 0F1F8400 		.p2align 4,,10
 548      00000000 
 549              		.p2align 3
 550              	.L58:
 551              	.LBE200:
 552              	.LBB201:
 301:fltk-1.3.4-1/png/pngwutil.c ****       msg[4] = ':';
 553              		.loc 1 301 0
 554 0220 89F2     		movl	%esi, %edx
 555              	.LVL47:
 309:fltk-1.3.4-1/png/pngwutil.c **** #endif
 556              		.loc 1 309 0
 557 0222 488D7C24 		leaq	16(%rsp), %rdi
 557      10
 301:fltk-1.3.4-1/png/pngwutil.c ****       msg[4] = ':';
 558              		.loc 1 301 0
 559 0227 40887424 		movb	%sil, 19(%rsp)
 559      13
 560 022c C1EA18   		shrl	$24, %edx
 309:fltk-1.3.4-1/png/pngwutil.c **** #endif
 561              		.loc 1 309 0
 562 022f B9000000 		movl	$.LC1, %ecx
 562      00
 302:fltk-1.3.4-1/png/pngwutil.c ****       msg[5] = ' ';
 563              		.loc 1 302 0
 564 0234 C6442414 		movb	$58, 20(%rsp)
 564      3A
 301:fltk-1.3.4-1/png/pngwutil.c ****       msg[4] = ':';
 565              		.loc 1 301 0
 566 0239 88542410 		movb	%dl, 16(%rsp)
 567 023d 89F2     		movl	%esi, %edx
 303:fltk-1.3.4-1/png/pngwutil.c ****       PNG_STRING_FROM_CHUNK(msg+6, png_ptr->zowner);
 568              		.loc 1 303 0
 569 023f C6442415 		movb	$32, 21(%rsp)
 569      20
 301:fltk-1.3.4-1/png/pngwutil.c ****       msg[4] = ':';
 570              		.loc 1 301 0
 571 0244 C1EA10   		shrl	$16, %edx
 304:fltk-1.3.4-1/png/pngwutil.c ****       /* So the message that results is "<chunk> using zstream"; this is an
 572              		.loc 1 304 0
 573 0247 88442419 		movb	%al, 25(%rsp)
 301:fltk-1.3.4-1/png/pngwutil.c ****       msg[4] = ':';
 574              		.loc 1 301 0
 575 024b 88542411 		movb	%dl, 17(%rsp)
 576 024f 89F2     		movl	%esi, %edx
 309:fltk-1.3.4-1/png/pngwutil.c **** #endif
 577              		.loc 1 309 0
 578 0251 BE400000 		movl	$64, %esi
 578      00
 579              	.LVL48:
 301:fltk-1.3.4-1/png/pngwutil.c ****       msg[4] = ':';
 580              		.loc 1 301 0
 581 0256 C1EA08   		shrl	$8, %edx
 582 0259 88542412 		movb	%dl, 18(%rsp)
 304:fltk-1.3.4-1/png/pngwutil.c ****       /* So the message that results is "<chunk> using zstream"; this is an
 583              		.loc 1 304 0
 584 025d 89C2     		movl	%eax, %edx
 585 025f C1EA18   		shrl	$24, %edx
 586 0262 88542416 		movb	%dl, 22(%rsp)
 587 0266 89C2     		movl	%eax, %edx
 588 0268 C1EA10   		shrl	$16, %edx
 589 026b 88542417 		movb	%dl, 23(%rsp)
 590 026f 89C2     		movl	%eax, %edx
 591 0271 C1EA08   		shrl	$8, %edx
 592 0274 88542418 		movb	%dl, 24(%rsp)
 309:fltk-1.3.4-1/png/pngwutil.c **** #endif
 593              		.loc 1 309 0
 594 0278 BA0A0000 		movl	$10, %edx
 594      00
 595 027d E8000000 		call	png_safecat
 595      00
 596              	.LVL49:
 312:fltk-1.3.4-1/png/pngwutil.c **** 
 597              		.loc 1 312 0
 598 0282 488D7424 		leaq	16(%rsp), %rsi
 598      10
 599 0287 4889DF   		movq	%rbx, %rdi
 600 028a E8000000 		call	png_warning
 600      00
 601              	.LVL50:
 315:fltk-1.3.4-1/png/pngwutil.c ****          {
 602              		.loc 1 315 0
 603 028f 81BB3801 		cmpl	$1229209940, 312(%rbx)
 603      00005441 
 603      4449
 604 0299 0F848500 		je	.L64
 604      0000
 605              	.LBE201:
 606              	.LBB202:
 335:fltk-1.3.4-1/png/pngwutil.c ****       {
 607              		.loc 1 335 0
 608 029f 4181FC54 		cmpl	$1229209940, %r12d
 608      414449
 609              	.LBE202:
 610              	.LBB203:
 321:fltk-1.3.4-1/png/pngwutil.c **** #else
 611              		.loc 1 321 0
 612 02a6 C7833801 		movl	$0, 312(%rbx)
 612      00000000 
 612      0000
 613              	.LVL51:
 614              	.LBE203:
 615              	.LBB204:
 335:fltk-1.3.4-1/png/pngwutil.c ****       {
 616              		.loc 1 335 0
 617 02b0 0F858CFD 		jne	.L35
 617      FFFF
 618              	.LVL52:
 619              	.L59:
 337:fltk-1.3.4-1/png/pngwutil.c ****             strategy = png_ptr->zlib_strategy;
 620              		.loc 1 337 0
 621 02b6 8BB33001 		movl	304(%rbx), %esi
 621      0000
 328:fltk-1.3.4-1/png/pngwutil.c ****       int method = png_ptr->zlib_method;
 622              		.loc 1 328 0
 623 02bc 448BB3BC 		movl	444(%rbx), %r14d
 623      010000
 329:fltk-1.3.4-1/png/pngwutil.c ****       int windowBits = png_ptr->zlib_window_bits;
 624              		.loc 1 329 0
 625 02c3 448BBBC0 		movl	448(%rbx), %r15d
 625      010000
 330:fltk-1.3.4-1/png/pngwutil.c ****       int memLevel = png_ptr->zlib_mem_level;
 626              		.loc 1 330 0
 627 02ca 448BABC4 		movl	452(%rbx), %r13d
 627      010000
 331:fltk-1.3.4-1/png/pngwutil.c ****       int strategy; /* set below */
 628              		.loc 1 331 0
 629 02d1 448B83C8 		movl	456(%rbx), %r8d
 629      010000
 337:fltk-1.3.4-1/png/pngwutil.c ****             strategy = png_ptr->zlib_strategy;
 630              		.loc 1 337 0
 631 02d8 40F6C601 		testb	$1, %sil
 632 02dc 7412     		je	.L36
 338:fltk-1.3.4-1/png/pngwutil.c **** 
 633              		.loc 1 338 0
 634 02de 448B8BCC 		movl	460(%rbx), %r9d
 634      010000
 635              	.LVL53:
 636 02e5 E981FDFF 		jmp	.L37
 636      FF
 637              	.LVL54:
 638 02ea 660F1F44 		.p2align 4,,10
 638      0000
 639              		.p2align 3
 640              	.L36:
 341:fltk-1.3.4-1/png/pngwutil.c **** 
 641              		.loc 1 341 0
 642 02f0 4531C9   		xorl	%r9d, %r9d
 643 02f3 80BB7602 		cmpb	$8, 630(%rbx)
 643      000008
 644 02fa 410F95C1 		setne	%r9b
 645 02fe E968FDFF 		jmp	.L37
 645      FF
 646              	.LVL55:
 647              		.p2align 4,,10
 648 0303 0F1F4400 		.p2align 3
 648      00
 649              	.L63:
 397:fltk-1.3.4-1/png/pngwutil.c **** 
 650              		.loc 1 397 0
 651 0308 BE000000 		movl	$.LC3, %esi
 651      00
 652 030d 4889DF   		movq	%rbx, %rdi
 653 0310 E8000000 		call	png_warning
 653      00
 654              	.LVL56:
 655 0315 448B4C24 		movl	12(%rsp), %r9d
 655      0C
 656 031a 448B4424 		movl	8(%rsp), %r8d
 656      08
 657 031f E949FEFF 		jmp	.L45
 657      FF
 658              	.LVL57:
 659              	.L64:
 660              	.LBE204:
 661              	.LBB205:
 317:fltk-1.3.4-1/png/pngwutil.c ****             return Z_STREAM_ERROR;
 662              		.loc 1 317 0
 663 0324 48C78370 		movq	$.LC2, 368(%rbx)
 663      01000000 
 663      000000
 318:fltk-1.3.4-1/png/pngwutil.c ****          }
 664              		.loc 1 318 0
 665 032f B8FEFFFF 		movl	$-2, %eax
 665      FF
 666 0334 E9D4FDFF 		jmp	.L34
 666      FF
 667              	.LVL58:
 668              	.L61:
 669              	.LBE205:
 670              		.loc 1 436 0
 671 0339 E8000000 		call	__stack_chk_fail
 671      00
 672              	.LVL59:
 673              		.cfi_endproc
 674              	.LFE67:
 676              		.section	.text.unlikely.png_deflate_claim
 677              	.LCOLDE5:
 678              		.section	.text.png_deflate_claim
 679              	.LHOTE5:
 680              		.section	.rodata.str1.1
 681              	.LC6:
 682 0040 6B657977 		.string	"keyword truncated"
 682      6F726420 
 682      7472756E 
 682      63617465 
 682      6400
 683              		.section	.rodata.str1.8,"aMS",@progbits,1
 684              		.align 8
 685              	.LC7:
 686 0000 6B657977 		.string	"keyword \"@1\": bad character '0x@2'"
 686      6F726420 
 686      22403122 
 686      3A206261 
 686      64206368 
 687              		.section	.text.unlikely.png_check_keyword,"ax",@progbits
 688              	.LCOLDB8:
 689              		.section	.text.png_check_keyword,"ax",@progbits
 690              	.LHOTB8:
 691              		.p2align 4,,15
 693              	png_check_keyword:
 694              	.LFB72:
 437:fltk-1.3.4-1/png/pngwutil.c **** 
 438:fltk-1.3.4-1/png/pngwutil.c **** /* Clean up (or trim) a linked list of compression buffers. */
 439:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
 440:fltk-1.3.4-1/png/pngwutil.c **** png_free_buffer_list(png_structrp png_ptr, png_compression_bufferp *listp)
 441:fltk-1.3.4-1/png/pngwutil.c **** {
 442:fltk-1.3.4-1/png/pngwutil.c ****    png_compression_bufferp list = *listp;
 443:fltk-1.3.4-1/png/pngwutil.c **** 
 444:fltk-1.3.4-1/png/pngwutil.c ****    if (list != NULL)
 445:fltk-1.3.4-1/png/pngwutil.c ****    {
 446:fltk-1.3.4-1/png/pngwutil.c ****       *listp = NULL;
 447:fltk-1.3.4-1/png/pngwutil.c **** 
 448:fltk-1.3.4-1/png/pngwutil.c ****       do
 449:fltk-1.3.4-1/png/pngwutil.c ****       {
 450:fltk-1.3.4-1/png/pngwutil.c ****          png_compression_bufferp next = list->next;
 451:fltk-1.3.4-1/png/pngwutil.c **** 
 452:fltk-1.3.4-1/png/pngwutil.c ****          png_free(png_ptr, list);
 453:fltk-1.3.4-1/png/pngwutil.c ****          list = next;
 454:fltk-1.3.4-1/png/pngwutil.c ****       }
 455:fltk-1.3.4-1/png/pngwutil.c ****       while (list != NULL);
 456:fltk-1.3.4-1/png/pngwutil.c ****    }
 457:fltk-1.3.4-1/png/pngwutil.c **** }
 458:fltk-1.3.4-1/png/pngwutil.c **** 
 459:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_COMPRESSED_TEXT_SUPPORTED
 460:fltk-1.3.4-1/png/pngwutil.c **** /* This pair of functions encapsulates the operation of (a) compressing a
 461:fltk-1.3.4-1/png/pngwutil.c ****  * text string, and (b) issuing it later as a series of chunk data writes.
 462:fltk-1.3.4-1/png/pngwutil.c ****  * The compression_state structure is shared context for these functions
 463:fltk-1.3.4-1/png/pngwutil.c ****  * set up by the caller to allow access to the relevant local variables.
 464:fltk-1.3.4-1/png/pngwutil.c ****  *
 465:fltk-1.3.4-1/png/pngwutil.c ****  * compression_buffer (new in 1.6.0) is just a linked list of zbuffer_size
 466:fltk-1.3.4-1/png/pngwutil.c ****  * temporary buffers.  From 1.6.0 it is retained in png_struct so that it will
 467:fltk-1.3.4-1/png/pngwutil.c ****  * be correctly freed in the event of a write error (previous implementations
 468:fltk-1.3.4-1/png/pngwutil.c ****  * just leaked memory.)
 469:fltk-1.3.4-1/png/pngwutil.c ****  */
 470:fltk-1.3.4-1/png/pngwutil.c **** typedef struct
 471:fltk-1.3.4-1/png/pngwutil.c **** {
 472:fltk-1.3.4-1/png/pngwutil.c ****    png_const_bytep      input;        /* The uncompressed input data */
 473:fltk-1.3.4-1/png/pngwutil.c ****    png_alloc_size_t     input_len;    /* Its length */
 474:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32          output_len;   /* Final compressed length */
 475:fltk-1.3.4-1/png/pngwutil.c ****    png_byte             output[1024]; /* First block of output */
 476:fltk-1.3.4-1/png/pngwutil.c **** } compression_state;
 477:fltk-1.3.4-1/png/pngwutil.c **** 
 478:fltk-1.3.4-1/png/pngwutil.c **** static void
 479:fltk-1.3.4-1/png/pngwutil.c **** png_text_compress_init(compression_state *comp, png_const_bytep input,
 480:fltk-1.3.4-1/png/pngwutil.c ****    png_alloc_size_t input_len)
 481:fltk-1.3.4-1/png/pngwutil.c **** {
 482:fltk-1.3.4-1/png/pngwutil.c ****    comp->input = input;
 483:fltk-1.3.4-1/png/pngwutil.c ****    comp->input_len = input_len;
 484:fltk-1.3.4-1/png/pngwutil.c ****    comp->output_len = 0;
 485:fltk-1.3.4-1/png/pngwutil.c **** }
 486:fltk-1.3.4-1/png/pngwutil.c **** 
 487:fltk-1.3.4-1/png/pngwutil.c **** /* Compress the data in the compression state input */
 488:fltk-1.3.4-1/png/pngwutil.c **** static int
 489:fltk-1.3.4-1/png/pngwutil.c **** png_text_compress(png_structrp png_ptr, png_uint_32 chunk_name,
 490:fltk-1.3.4-1/png/pngwutil.c ****    compression_state *comp, png_uint_32 prefix_len)
 491:fltk-1.3.4-1/png/pngwutil.c **** {
 492:fltk-1.3.4-1/png/pngwutil.c ****    int ret;
 493:fltk-1.3.4-1/png/pngwutil.c **** 
 494:fltk-1.3.4-1/png/pngwutil.c ****    /* To find the length of the output it is necessary to first compress the
 495:fltk-1.3.4-1/png/pngwutil.c ****     * input. The result is buffered rather than using the two-pass algorithm
 496:fltk-1.3.4-1/png/pngwutil.c ****     * that is used on the inflate side; deflate is assumed to be slower and a
 497:fltk-1.3.4-1/png/pngwutil.c ****     * PNG writer is assumed to have more memory available than a PNG reader.
 498:fltk-1.3.4-1/png/pngwutil.c ****     *
 499:fltk-1.3.4-1/png/pngwutil.c ****     * IMPLEMENTATION NOTE: the zlib API deflateBound() can be used to find an
 500:fltk-1.3.4-1/png/pngwutil.c ****     * upper limit on the output size, but it is always bigger than the input
 501:fltk-1.3.4-1/png/pngwutil.c ****     * size so it is likely to be more efficient to use this linked-list
 502:fltk-1.3.4-1/png/pngwutil.c ****     * approach.
 503:fltk-1.3.4-1/png/pngwutil.c ****     */
 504:fltk-1.3.4-1/png/pngwutil.c ****    ret = png_deflate_claim(png_ptr, chunk_name, comp->input_len);
 505:fltk-1.3.4-1/png/pngwutil.c **** 
 506:fltk-1.3.4-1/png/pngwutil.c ****    if (ret != Z_OK)
 507:fltk-1.3.4-1/png/pngwutil.c ****       return ret;
 508:fltk-1.3.4-1/png/pngwutil.c **** 
 509:fltk-1.3.4-1/png/pngwutil.c ****    /* Set up the compression buffers, we need a loop here to avoid overflowing a
 510:fltk-1.3.4-1/png/pngwutil.c ****     * uInt.  Use ZLIB_IO_MAX to limit the input.  The output is always limited
 511:fltk-1.3.4-1/png/pngwutil.c ****     * by the output buffer size, so there is no need to check that.  Since this
 512:fltk-1.3.4-1/png/pngwutil.c ****     * is ANSI-C we know that an 'int', hence a uInt, is always at least 16 bits
 513:fltk-1.3.4-1/png/pngwutil.c ****     * in size.
 514:fltk-1.3.4-1/png/pngwutil.c ****     */
 515:fltk-1.3.4-1/png/pngwutil.c ****    {
 516:fltk-1.3.4-1/png/pngwutil.c ****       png_compression_bufferp *end = &png_ptr->zbuffer_list;
 517:fltk-1.3.4-1/png/pngwutil.c ****       png_alloc_size_t input_len = comp->input_len; /* may be zero! */
 518:fltk-1.3.4-1/png/pngwutil.c ****       png_uint_32 output_len;
 519:fltk-1.3.4-1/png/pngwutil.c **** 
 520:fltk-1.3.4-1/png/pngwutil.c ****       /* zlib updates these for us: */
 521:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zstream.next_in = PNGZ_INPUT_CAST(comp->input);
 522:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zstream.avail_in = 0; /* Set below */
 523:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zstream.next_out = comp->output;
 524:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zstream.avail_out = (sizeof comp->output);
 525:fltk-1.3.4-1/png/pngwutil.c **** 
 526:fltk-1.3.4-1/png/pngwutil.c ****       output_len = png_ptr->zstream.avail_out;
 527:fltk-1.3.4-1/png/pngwutil.c **** 
 528:fltk-1.3.4-1/png/pngwutil.c ****       do
 529:fltk-1.3.4-1/png/pngwutil.c ****       {
 530:fltk-1.3.4-1/png/pngwutil.c ****          uInt avail_in = ZLIB_IO_MAX;
 531:fltk-1.3.4-1/png/pngwutil.c **** 
 532:fltk-1.3.4-1/png/pngwutil.c ****          if (avail_in > input_len)
 533:fltk-1.3.4-1/png/pngwutil.c ****             avail_in = (uInt)input_len;
 534:fltk-1.3.4-1/png/pngwutil.c **** 
 535:fltk-1.3.4-1/png/pngwutil.c ****          input_len -= avail_in;
 536:fltk-1.3.4-1/png/pngwutil.c **** 
 537:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zstream.avail_in = avail_in;
 538:fltk-1.3.4-1/png/pngwutil.c **** 
 539:fltk-1.3.4-1/png/pngwutil.c ****          if (png_ptr->zstream.avail_out == 0)
 540:fltk-1.3.4-1/png/pngwutil.c ****          {
 541:fltk-1.3.4-1/png/pngwutil.c ****             png_compression_buffer *next;
 542:fltk-1.3.4-1/png/pngwutil.c **** 
 543:fltk-1.3.4-1/png/pngwutil.c ****             /* Chunk data is limited to 2^31 bytes in length, so the prefix
 544:fltk-1.3.4-1/png/pngwutil.c ****              * length must be counted here.
 545:fltk-1.3.4-1/png/pngwutil.c ****              */
 546:fltk-1.3.4-1/png/pngwutil.c ****             if (output_len + prefix_len > PNG_UINT_31_MAX)
 547:fltk-1.3.4-1/png/pngwutil.c ****             {
 548:fltk-1.3.4-1/png/pngwutil.c ****                ret = Z_MEM_ERROR;
 549:fltk-1.3.4-1/png/pngwutil.c ****                break;
 550:fltk-1.3.4-1/png/pngwutil.c ****             }
 551:fltk-1.3.4-1/png/pngwutil.c **** 
 552:fltk-1.3.4-1/png/pngwutil.c ****             /* Need a new (malloc'ed) buffer, but there may be one present
 553:fltk-1.3.4-1/png/pngwutil.c ****              * already.
 554:fltk-1.3.4-1/png/pngwutil.c ****              */
 555:fltk-1.3.4-1/png/pngwutil.c ****             next = *end;
 556:fltk-1.3.4-1/png/pngwutil.c ****             if (next == NULL)
 557:fltk-1.3.4-1/png/pngwutil.c ****             {
 558:fltk-1.3.4-1/png/pngwutil.c ****                next = png_voidcast(png_compression_bufferp, png_malloc_base
 559:fltk-1.3.4-1/png/pngwutil.c ****                   (png_ptr, PNG_COMPRESSION_BUFFER_SIZE(png_ptr)));
 560:fltk-1.3.4-1/png/pngwutil.c **** 
 561:fltk-1.3.4-1/png/pngwutil.c ****                if (next == NULL)
 562:fltk-1.3.4-1/png/pngwutil.c ****                {
 563:fltk-1.3.4-1/png/pngwutil.c ****                   ret = Z_MEM_ERROR;
 564:fltk-1.3.4-1/png/pngwutil.c ****                   break;
 565:fltk-1.3.4-1/png/pngwutil.c ****                }
 566:fltk-1.3.4-1/png/pngwutil.c **** 
 567:fltk-1.3.4-1/png/pngwutil.c ****                /* Link in this buffer (so that it will be freed later) */
 568:fltk-1.3.4-1/png/pngwutil.c ****                next->next = NULL;
 569:fltk-1.3.4-1/png/pngwutil.c ****                *end = next;
 570:fltk-1.3.4-1/png/pngwutil.c ****             }
 571:fltk-1.3.4-1/png/pngwutil.c **** 
 572:fltk-1.3.4-1/png/pngwutil.c ****             png_ptr->zstream.next_out = next->output;
 573:fltk-1.3.4-1/png/pngwutil.c ****             png_ptr->zstream.avail_out = png_ptr->zbuffer_size;
 574:fltk-1.3.4-1/png/pngwutil.c ****             output_len += png_ptr->zstream.avail_out;
 575:fltk-1.3.4-1/png/pngwutil.c **** 
 576:fltk-1.3.4-1/png/pngwutil.c ****             /* Move 'end' to the next buffer pointer. */
 577:fltk-1.3.4-1/png/pngwutil.c ****             end = &next->next;
 578:fltk-1.3.4-1/png/pngwutil.c ****          }
 579:fltk-1.3.4-1/png/pngwutil.c **** 
 580:fltk-1.3.4-1/png/pngwutil.c ****          /* Compress the data */
 581:fltk-1.3.4-1/png/pngwutil.c ****          ret = deflate(&png_ptr->zstream,
 582:fltk-1.3.4-1/png/pngwutil.c ****             input_len > 0 ? Z_NO_FLUSH : Z_FINISH);
 583:fltk-1.3.4-1/png/pngwutil.c **** 
 584:fltk-1.3.4-1/png/pngwutil.c ****          /* Claw back input data that was not consumed (because avail_in is
 585:fltk-1.3.4-1/png/pngwutil.c ****           * reset above every time round the loop).
 586:fltk-1.3.4-1/png/pngwutil.c ****           */
 587:fltk-1.3.4-1/png/pngwutil.c ****          input_len += png_ptr->zstream.avail_in;
 588:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zstream.avail_in = 0; /* safety */
 589:fltk-1.3.4-1/png/pngwutil.c ****       }
 590:fltk-1.3.4-1/png/pngwutil.c ****       while (ret == Z_OK);
 591:fltk-1.3.4-1/png/pngwutil.c **** 
 592:fltk-1.3.4-1/png/pngwutil.c ****       /* There may be some space left in the last output buffer. This needs to
 593:fltk-1.3.4-1/png/pngwutil.c ****        * be subtracted from output_len.
 594:fltk-1.3.4-1/png/pngwutil.c ****        */
 595:fltk-1.3.4-1/png/pngwutil.c ****       output_len -= png_ptr->zstream.avail_out;
 596:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zstream.avail_out = 0; /* safety */
 597:fltk-1.3.4-1/png/pngwutil.c ****       comp->output_len = output_len;
 598:fltk-1.3.4-1/png/pngwutil.c **** 
 599:fltk-1.3.4-1/png/pngwutil.c ****       /* Now double check the output length, put in a custom message if it is
 600:fltk-1.3.4-1/png/pngwutil.c ****        * too long.  Otherwise ensure the z_stream::msg pointer is set to
 601:fltk-1.3.4-1/png/pngwutil.c ****        * something.
 602:fltk-1.3.4-1/png/pngwutil.c ****        */
 603:fltk-1.3.4-1/png/pngwutil.c ****       if (output_len + prefix_len >= PNG_UINT_31_MAX)
 604:fltk-1.3.4-1/png/pngwutil.c ****       {
 605:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zstream.msg = PNGZ_MSG_CAST("compressed data too long");
 606:fltk-1.3.4-1/png/pngwutil.c ****          ret = Z_MEM_ERROR;
 607:fltk-1.3.4-1/png/pngwutil.c ****       }
 608:fltk-1.3.4-1/png/pngwutil.c **** 
 609:fltk-1.3.4-1/png/pngwutil.c ****       else
 610:fltk-1.3.4-1/png/pngwutil.c ****          png_zstream_error(png_ptr, ret);
 611:fltk-1.3.4-1/png/pngwutil.c **** 
 612:fltk-1.3.4-1/png/pngwutil.c ****       /* Reset zlib for another zTXt/iTXt or image data */
 613:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zowner = 0;
 614:fltk-1.3.4-1/png/pngwutil.c **** 
 615:fltk-1.3.4-1/png/pngwutil.c ****       /* The only success case is Z_STREAM_END, input_len must be 0; if not this
 616:fltk-1.3.4-1/png/pngwutil.c ****        * is an internal error.
 617:fltk-1.3.4-1/png/pngwutil.c ****        */
 618:fltk-1.3.4-1/png/pngwutil.c ****       if (ret == Z_STREAM_END && input_len == 0)
 619:fltk-1.3.4-1/png/pngwutil.c ****       {
 620:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_OPTIMIZE_CMF_SUPPORTED
 621:fltk-1.3.4-1/png/pngwutil.c ****          /* Fix up the deflate header, if required */
 622:fltk-1.3.4-1/png/pngwutil.c ****          optimize_cmf(comp->output, comp->input_len);
 623:fltk-1.3.4-1/png/pngwutil.c **** #endif
 624:fltk-1.3.4-1/png/pngwutil.c ****          /* But Z_OK is returned, not Z_STREAM_END; this allows the claim
 625:fltk-1.3.4-1/png/pngwutil.c ****           * function above to return Z_STREAM_END on an error (though it never
 626:fltk-1.3.4-1/png/pngwutil.c ****           * does in the current versions of zlib.)
 627:fltk-1.3.4-1/png/pngwutil.c ****           */
 628:fltk-1.3.4-1/png/pngwutil.c ****          return Z_OK;
 629:fltk-1.3.4-1/png/pngwutil.c ****       }
 630:fltk-1.3.4-1/png/pngwutil.c **** 
 631:fltk-1.3.4-1/png/pngwutil.c ****       else
 632:fltk-1.3.4-1/png/pngwutil.c ****          return ret;
 633:fltk-1.3.4-1/png/pngwutil.c ****    }
 634:fltk-1.3.4-1/png/pngwutil.c **** }
 635:fltk-1.3.4-1/png/pngwutil.c **** 
 636:fltk-1.3.4-1/png/pngwutil.c **** /* Ship the compressed text out via chunk writes */
 637:fltk-1.3.4-1/png/pngwutil.c **** static void
 638:fltk-1.3.4-1/png/pngwutil.c **** png_write_compressed_data_out(png_structrp png_ptr, compression_state *comp)
 639:fltk-1.3.4-1/png/pngwutil.c **** {
 640:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 output_len = comp->output_len;
 641:fltk-1.3.4-1/png/pngwutil.c ****    png_const_bytep output = comp->output;
 642:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 avail = (sizeof comp->output);
 643:fltk-1.3.4-1/png/pngwutil.c ****    png_compression_buffer *next = png_ptr->zbuffer_list;
 644:fltk-1.3.4-1/png/pngwutil.c **** 
 645:fltk-1.3.4-1/png/pngwutil.c ****    for (;;)
 646:fltk-1.3.4-1/png/pngwutil.c ****    {
 647:fltk-1.3.4-1/png/pngwutil.c ****       if (avail > output_len)
 648:fltk-1.3.4-1/png/pngwutil.c ****          avail = output_len;
 649:fltk-1.3.4-1/png/pngwutil.c **** 
 650:fltk-1.3.4-1/png/pngwutil.c ****       png_write_chunk_data(png_ptr, output, avail);
 651:fltk-1.3.4-1/png/pngwutil.c **** 
 652:fltk-1.3.4-1/png/pngwutil.c ****       output_len -= avail;
 653:fltk-1.3.4-1/png/pngwutil.c **** 
 654:fltk-1.3.4-1/png/pngwutil.c ****       if (output_len == 0 || next == NULL)
 655:fltk-1.3.4-1/png/pngwutil.c ****          break;
 656:fltk-1.3.4-1/png/pngwutil.c **** 
 657:fltk-1.3.4-1/png/pngwutil.c ****       avail = png_ptr->zbuffer_size;
 658:fltk-1.3.4-1/png/pngwutil.c ****       output = next->output;
 659:fltk-1.3.4-1/png/pngwutil.c ****       next = next->next;
 660:fltk-1.3.4-1/png/pngwutil.c ****    }
 661:fltk-1.3.4-1/png/pngwutil.c **** 
 662:fltk-1.3.4-1/png/pngwutil.c ****    /* This is an internal error; 'next' must have been NULL! */
 663:fltk-1.3.4-1/png/pngwutil.c ****    if (output_len > 0)
 664:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "error writing ancillary chunked compressed data");
 665:fltk-1.3.4-1/png/pngwutil.c **** }
 666:fltk-1.3.4-1/png/pngwutil.c **** #endif /* WRITE_COMPRESSED_TEXT */
 667:fltk-1.3.4-1/png/pngwutil.c **** 
 668:fltk-1.3.4-1/png/pngwutil.c **** #if defined(PNG_WRITE_TEXT_SUPPORTED) || defined(PNG_WRITE_pCAL_SUPPORTED) || \
 669:fltk-1.3.4-1/png/pngwutil.c ****     defined(PNG_WRITE_iCCP_SUPPORTED) || defined(PNG_WRITE_sPLT_SUPPORTED)
 670:fltk-1.3.4-1/png/pngwutil.c **** /* Check that the tEXt or zTXt keyword is valid per PNG 1.0 specification,
 671:fltk-1.3.4-1/png/pngwutil.c ****  * and if invalid, correct the keyword rather than discarding the entire
 672:fltk-1.3.4-1/png/pngwutil.c ****  * chunk.  The PNG 1.0 specification requires keywords 1-79 characters in
 673:fltk-1.3.4-1/png/pngwutil.c ****  * length, forbids leading or trailing whitespace, multiple internal spaces,
 674:fltk-1.3.4-1/png/pngwutil.c ****  * and the non-break space (0x80) from ISO 8859-1.  Returns keyword length.
 675:fltk-1.3.4-1/png/pngwutil.c ****  *
 676:fltk-1.3.4-1/png/pngwutil.c ****  * The 'new_key' buffer must be 80 characters in size (for the keyword plus a
 677:fltk-1.3.4-1/png/pngwutil.c ****  * trailing '\0').  If this routine returns 0 then there was no keyword, or a
 678:fltk-1.3.4-1/png/pngwutil.c ****  * valid one could not be generated, and the caller must png_error.
 679:fltk-1.3.4-1/png/pngwutil.c ****  */
 680:fltk-1.3.4-1/png/pngwutil.c **** static png_uint_32
 681:fltk-1.3.4-1/png/pngwutil.c **** png_check_keyword(png_structrp png_ptr, png_const_charp key, png_bytep new_key)
 682:fltk-1.3.4-1/png/pngwutil.c **** {
 695              		.loc 1 682 0
 696              		.cfi_startproc
 697              	.LVL60:
 698 0000 4154     		pushq	%r12
 699              		.cfi_def_cfa_offset 16
 700              		.cfi_offset 12, -16
 701 0002 55       		pushq	%rbp
 702              		.cfi_def_cfa_offset 24
 703              		.cfi_offset 6, -24
 704 0003 53       		pushq	%rbx
 705              		.cfi_def_cfa_offset 32
 706              		.cfi_offset 3, -32
 707 0004 4881EC20 		subq	$288, %rsp
 707      010000
 708              		.cfi_def_cfa_offset 320
 709              		.loc 1 682 0
 710 000b 64488B04 		movq	%fs:40, %rax
 710      25280000 
 710      00
 711 0014 48898424 		movq	%rax, 280(%rsp)
 711      18010000 
 712 001c 31C0     		xorl	%eax, %eax
 713              	.LVL61:
 683:fltk-1.3.4-1/png/pngwutil.c ****    png_const_charp orig_key = key;
 684:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 key_len = 0;
 685:fltk-1.3.4-1/png/pngwutil.c ****    int bad_character = 0;
 686:fltk-1.3.4-1/png/pngwutil.c ****    int space = 1;
 687:fltk-1.3.4-1/png/pngwutil.c **** 
 688:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_check_keyword");
 689:fltk-1.3.4-1/png/pngwutil.c **** 
 690:fltk-1.3.4-1/png/pngwutil.c ****    if (key == NULL)
 714              		.loc 1 690 0
 715 001e 4885F6   		testq	%rsi, %rsi
 716 0021 0F847101 		je	.L66
 716      0000
 717 0027 4989FC   		movq	%rdi, %r12
 718 002a 41B90100 		movl	$1, %r9d
 718      0000
 719 0030 4889F7   		movq	%rsi, %rdi
 720              	.LVL62:
 721 0033 31ED     		xorl	%ebp, %ebp
 722 0035 31DB     		xorl	%ebx, %ebx
 723              	.LVL63:
 724 0037 660F1F84 		.p2align 4,,10
 724      00000000 
 724      00
 725              		.p2align 3
 726              	.L67:
 691:fltk-1.3.4-1/png/pngwutil.c ****    {
 692:fltk-1.3.4-1/png/pngwutil.c ****       *new_key = 0;
 693:fltk-1.3.4-1/png/pngwutil.c ****       return 0;
 694:fltk-1.3.4-1/png/pngwutil.c ****    }
 695:fltk-1.3.4-1/png/pngwutil.c **** 
 696:fltk-1.3.4-1/png/pngwutil.c ****    while (*key && key_len < 79)
 727              		.loc 1 696 0
 728 0040 0FB607   		movzbl	(%rdi), %eax
 729 0043 84C0     		testb	%al, %al
 730 0045 7451     		je	.L84
 731              	.L97:
 732 0047 83FB4E   		cmpl	$78, %ebx
 733 004a 774C     		ja	.L84
 734              	.LBB206:
 697:fltk-1.3.4-1/png/pngwutil.c ****    {
 698:fltk-1.3.4-1/png/pngwutil.c ****       png_byte ch = (png_byte)(0xff & *key++);
 699:fltk-1.3.4-1/png/pngwutil.c **** 
 700:fltk-1.3.4-1/png/pngwutil.c ****       if ((ch > 32 && ch <= 126) || (ch >= 161 /*&& ch <= 255*/))
 735              		.loc 1 700 0
 736 004c 448D40DF 		leal	-33(%rax), %r8d
 698:fltk-1.3.4-1/png/pngwutil.c **** 
 737              		.loc 1 698 0
 738 0050 4883C701 		addq	$1, %rdi
 739              	.LVL64:
 740              		.loc 1 700 0
 741 0054 4180F85D 		cmpb	$93, %r8b
 742 0058 0F869200 		jbe	.L83
 742      0000
 743 005e 3CA0     		cmpb	$-96, %al
 744 0060 0F878A00 		ja	.L83
 744      0000
 701:fltk-1.3.4-1/png/pngwutil.c ****          *new_key++ = ch, ++key_len, space = 0;
 702:fltk-1.3.4-1/png/pngwutil.c **** 
 703:fltk-1.3.4-1/png/pngwutil.c ****       else if (space == 0)
 745              		.loc 1 703 0
 746 0066 4585C9   		testl	%r9d, %r9d
 747 0069 0F859900 		jne	.L72
 747      0000
 704:fltk-1.3.4-1/png/pngwutil.c ****       {
 705:fltk-1.3.4-1/png/pngwutil.c ****          /* A space or an invalid character when one wasn't seen immediately
 706:fltk-1.3.4-1/png/pngwutil.c ****           * before; output just a space.
 707:fltk-1.3.4-1/png/pngwutil.c ****           */
 708:fltk-1.3.4-1/png/pngwutil.c ****          *new_key++ = 32, ++key_len, space = 1;
 748              		.loc 1 708 0
 749 006f 83C301   		addl	$1, %ebx
 750              	.LVL65:
 709:fltk-1.3.4-1/png/pngwutil.c **** 
 710:fltk-1.3.4-1/png/pngwutil.c ****          /* If the character was not a space then it is invalid. */
 711:fltk-1.3.4-1/png/pngwutil.c ****          if (ch != 32)
 751              		.loc 1 711 0
 752 0072 3C20     		cmpb	$32, %al
 708:fltk-1.3.4-1/png/pngwutil.c **** 
 753              		.loc 1 708 0
 754 0074 488D4A01 		leaq	1(%rdx), %rcx
 755              	.LVL66:
 756 0078 C60220   		movb	$32, (%rdx)
 757              		.loc 1 711 0
 758 007b 0F849F00 		je	.L78
 758      0000
 712:fltk-1.3.4-1/png/pngwutil.c ****             bad_character = ch;
 759              		.loc 1 712 0
 760 0081 0FB6E8   		movzbl	%al, %ebp
 761              	.LVL67:
 762              	.LBE206:
 696:fltk-1.3.4-1/png/pngwutil.c ****    {
 763              		.loc 1 696 0
 764 0084 0FB607   		movzbl	(%rdi), %eax
 765              	.LVL68:
 766              	.LBB207:
 708:fltk-1.3.4-1/png/pngwutil.c **** 
 767              		.loc 1 708 0
 768 0087 4889CA   		movq	%rcx, %rdx
 769 008a 41B90100 		movl	$1, %r9d
 769      0000
 770              	.LVL69:
 771              	.LBE207:
 696:fltk-1.3.4-1/png/pngwutil.c ****    {
 772              		.loc 1 696 0
 773 0090 84C0     		testb	%al, %al
 774 0092 75B3     		jne	.L97
 775              	.LVL70:
 776              		.p2align 4,,10
 777 0094 0F1F4000 		.p2align 3
 778              	.L84:
 713:fltk-1.3.4-1/png/pngwutil.c ****       }
 714:fltk-1.3.4-1/png/pngwutil.c **** 
 715:fltk-1.3.4-1/png/pngwutil.c ****       else if (bad_character == 0)
 716:fltk-1.3.4-1/png/pngwutil.c ****          bad_character = ch; /* just skip it, record the first error */
 717:fltk-1.3.4-1/png/pngwutil.c ****    }
 718:fltk-1.3.4-1/png/pngwutil.c **** 
 719:fltk-1.3.4-1/png/pngwutil.c ****    if (key_len > 0 && space != 0) /* trailing space */
 779              		.loc 1 719 0
 780 0098 85DB     		testl	%ebx, %ebx
 781 009a 7416     		je	.L75
 782 009c 4585C9   		testl	%r9d, %r9d
 783 009f 7411     		je	.L75
 720:fltk-1.3.4-1/png/pngwutil.c ****    {
 721:fltk-1.3.4-1/png/pngwutil.c ****       --key_len, --new_key;
 784              		.loc 1 721 0
 785 00a1 83EB01   		subl	$1, %ebx
 786              	.LVL71:
 787 00a4 4883EA01 		subq	$1, %rdx
 788              	.LVL72:
 722:fltk-1.3.4-1/png/pngwutil.c ****       if (bad_character == 0)
 723:fltk-1.3.4-1/png/pngwutil.c ****          bad_character = 32;
 789              		.loc 1 723 0
 790 00a8 B8200000 		movl	$32, %eax
 790      00
 791 00ad 85ED     		testl	%ebp, %ebp
 792 00af 0F44E8   		cmove	%eax, %ebp
 793              	.LVL73:
 794              	.L75:
 724:fltk-1.3.4-1/png/pngwutil.c ****    }
 725:fltk-1.3.4-1/png/pngwutil.c **** 
 726:fltk-1.3.4-1/png/pngwutil.c ****    /* Terminate the keyword */
 727:fltk-1.3.4-1/png/pngwutil.c ****    *new_key = 0;
 728:fltk-1.3.4-1/png/pngwutil.c **** 
 729:fltk-1.3.4-1/png/pngwutil.c ****    if (key_len == 0)
 730:fltk-1.3.4-1/png/pngwutil.c ****       return 0;
 795              		.loc 1 730 0
 796 00b2 31C0     		xorl	%eax, %eax
 729:fltk-1.3.4-1/png/pngwutil.c ****       return 0;
 797              		.loc 1 729 0
 798 00b4 85DB     		testl	%ebx, %ebx
 727:fltk-1.3.4-1/png/pngwutil.c **** 
 799              		.loc 1 727 0
 800 00b6 C60200   		movb	$0, (%rdx)
 729:fltk-1.3.4-1/png/pngwutil.c ****       return 0;
 801              		.loc 1 729 0
 802 00b9 740F     		je	.L68
 731:fltk-1.3.4-1/png/pngwutil.c **** 
 732:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WARNINGS_SUPPORTED
 733:fltk-1.3.4-1/png/pngwutil.c ****    /* Try to only output one warning per keyword: */
 734:fltk-1.3.4-1/png/pngwutil.c ****    if (*key != 0) /* keyword too long */
 803              		.loc 1 734 0
 804 00bb 803F00   		cmpb	$0, (%rdi)
 805 00be 0F85BC00 		jne	.L98
 805      0000
 735:fltk-1.3.4-1/png/pngwutil.c ****       png_warning(png_ptr, "keyword truncated");
 736:fltk-1.3.4-1/png/pngwutil.c **** 
 737:fltk-1.3.4-1/png/pngwutil.c ****    else if (bad_character != 0)
 806              		.loc 1 737 0
 807 00c4 85ED     		testl	%ebp, %ebp
 808 00c6 89D8     		movl	%ebx, %eax
 809 00c8 7566     		jne	.L99
 810              	.LVL74:
 811              	.L68:
 738:fltk-1.3.4-1/png/pngwutil.c ****    {
 739:fltk-1.3.4-1/png/pngwutil.c ****       PNG_WARNING_PARAMETERS(p)
 740:fltk-1.3.4-1/png/pngwutil.c **** 
 741:fltk-1.3.4-1/png/pngwutil.c ****       png_warning_parameter(p, 1, orig_key);
 742:fltk-1.3.4-1/png/pngwutil.c ****       png_warning_parameter_signed(p, 2, PNG_NUMBER_FORMAT_02x, bad_character);
 743:fltk-1.3.4-1/png/pngwutil.c **** 
 744:fltk-1.3.4-1/png/pngwutil.c ****       png_formatted_warning(png_ptr, p, "keyword \"@1\": bad character '0x@2'");
 745:fltk-1.3.4-1/png/pngwutil.c ****    }
 746:fltk-1.3.4-1/png/pngwutil.c **** #endif /* WARNINGS */
 747:fltk-1.3.4-1/png/pngwutil.c **** 
 748:fltk-1.3.4-1/png/pngwutil.c ****    return key_len;
 749:fltk-1.3.4-1/png/pngwutil.c **** }
 812              		.loc 1 749 0
 813 00ca 488BB424 		movq	280(%rsp), %rsi
 813      18010000 
 814 00d2 64483334 		xorq	%fs:40, %rsi
 814      25280000 
 814      00
 815 00db 0F85C100 		jne	.L100
 815      0000
 816 00e1 4881C420 		addq	$288, %rsp
 816      010000
 817              		.cfi_remember_state
 818              		.cfi_def_cfa_offset 32
 819 00e8 5B       		popq	%rbx
 820              		.cfi_def_cfa_offset 24
 821 00e9 5D       		popq	%rbp
 822              		.cfi_def_cfa_offset 16
 823 00ea 415C     		popq	%r12
 824              		.cfi_def_cfa_offset 8
 825 00ec C3       		ret
 826              	.LVL75:
 827 00ed 0F1F00   		.p2align 4,,10
 828              		.p2align 3
 829              	.L83:
 830              		.cfi_restore_state
 831              	.LBB208:
 701:fltk-1.3.4-1/png/pngwutil.c **** 
 832              		.loc 1 701 0
 833 00f0 8802     		movb	%al, (%rdx)
 834 00f2 83C301   		addl	$1, %ebx
 835              	.LVL76:
 836 00f5 4883C201 		addq	$1, %rdx
 837              	.LVL77:
 838 00f9 4531C9   		xorl	%r9d, %r9d
 839 00fc E93FFFFF 		jmp	.L67
 839      FF
 840              	.LVL78:
 841              		.p2align 4,,10
 842 0101 0F1F8000 		.p2align 3
 842      000000
 843              	.L72:
 715:fltk-1.3.4-1/png/pngwutil.c ****          bad_character = ch; /* just skip it, record the first error */
 844              		.loc 1 715 0
 845 0108 85ED     		testl	%ebp, %ebp
 846 010a 41B90100 		movl	$1, %r9d
 846      0000
 847              	.LVL79:
 716:fltk-1.3.4-1/png/pngwutil.c ****    }
 848              		.loc 1 716 0
 849 0110 0F44E8   		cmove	%eax, %ebp
 850              	.LVL80:
 851 0113 E928FFFF 		jmp	.L67
 851      FF
 852              	.LVL81:
 853 0118 0F1F8400 		.p2align 4,,10
 853      00000000 
 854              		.p2align 3
 855              	.L78:
 708:fltk-1.3.4-1/png/pngwutil.c **** 
 856              		.loc 1 708 0
 857 0120 4889CA   		movq	%rcx, %rdx
 858 0123 41B90100 		movl	$1, %r9d
 858      0000
 859 0129 E912FFFF 		jmp	.L67
 859      FF
 860              	.LVL82:
 861 012e 6690     		.p2align 4,,10
 862              		.p2align 3
 863              	.L99:
 864              	.LBE208:
 865              	.LBB209:
 741:fltk-1.3.4-1/png/pngwutil.c ****       png_warning_parameter_signed(p, 2, PNG_NUMBER_FORMAT_02x, bad_character);
 866              		.loc 1 741 0
 867 0130 488D7C24 		leaq	16(%rsp), %rdi
 867      10
 868              	.LVL83:
 869 0135 4889F2   		movq	%rsi, %rdx
 870              	.LVL84:
 871 0138 BE010000 		movl	$1, %esi
 871      00
 872              	.LVL85:
 873 013d 895C240C 		movl	%ebx, 12(%rsp)
 874 0141 E8000000 		call	png_warning_parameter
 874      00
 875              	.LVL86:
 742:fltk-1.3.4-1/png/pngwutil.c **** 
 876              		.loc 1 742 0
 877 0146 488D7C24 		leaq	16(%rsp), %rdi
 877      10
 878 014b 89E9     		movl	%ebp, %ecx
 879 014d BA040000 		movl	$4, %edx
 879      00
 880 0152 BE020000 		movl	$2, %esi
 880      00
 881 0157 E8000000 		call	png_warning_parameter_signed
 881      00
 882              	.LVL87:
 744:fltk-1.3.4-1/png/pngwutil.c ****    }
 883              		.loc 1 744 0
 884 015c 488D7424 		leaq	16(%rsp), %rsi
 884      10
 885 0161 BA000000 		movl	$.LC7, %edx
 885      00
 886 0166 4C89E7   		movq	%r12, %rdi
 887 0169 E8000000 		call	png_formatted_warning
 887      00
 888              	.LVL88:
 889 016e 8B44240C 		movl	12(%rsp), %eax
 890 0172 E953FFFF 		jmp	.L68
 890      FF
 891              	.LVL89:
 892 0177 660F1F84 		.p2align 4,,10
 892      00000000 
 892      00
 893              		.p2align 3
 894              	.L98:
 895              	.LBE209:
 735:fltk-1.3.4-1/png/pngwutil.c **** 
 896              		.loc 1 735 0
 897 0180 BE000000 		movl	$.LC6, %esi
 897      00
 898              	.LVL90:
 899 0185 4C89E7   		movq	%r12, %rdi
 900              	.LVL91:
 901 0188 E8000000 		call	png_warning
 901      00
 902              	.LVL92:
 903 018d 89D8     		movl	%ebx, %eax
 904 018f E936FFFF 		jmp	.L68
 904      FF
 905              	.LVL93:
 906              		.p2align 4,,10
 907 0194 0F1F4000 		.p2align 3
 908              	.L66:
 692:fltk-1.3.4-1/png/pngwutil.c ****       return 0;
 909              		.loc 1 692 0
 910 0198 C60200   		movb	$0, (%rdx)
 693:fltk-1.3.4-1/png/pngwutil.c ****    }
 911              		.loc 1 693 0
 912 019b 31C0     		xorl	%eax, %eax
 913 019d E928FFFF 		jmp	.L68
 913      FF
 914              	.LVL94:
 915              	.L100:
 916              		.loc 1 749 0
 917 01a2 E8000000 		call	__stack_chk_fail
 917      00
 918              	.LVL95:
 919              		.cfi_endproc
 920              	.LFE72:
 922              		.section	.text.unlikely.png_check_keyword
 923              	.LCOLDE8:
 924              		.section	.text.png_check_keyword
 925              	.LHOTE8:
 926              		.section	.text.unlikely.optimize_cmf.part.0,"ax",@progbits
 927              	.LCOLDB9:
 928              		.section	.text.optimize_cmf.part.0,"ax",@progbits
 929              	.LHOTB9:
 930              		.p2align 4,,15
 932              	optimize_cmf.part.0:
 933              	.LFB99:
 251:fltk-1.3.4-1/png/pngwutil.c **** {
 934              		.loc 1 251 0
 935              		.cfi_startproc
 936              	.LVL96:
 937              	.LBB210:
 258:fltk-1.3.4-1/png/pngwutil.c **** 
 938              		.loc 1 258 0
 939 0000 0FB607   		movzbl	(%rdi), %eax
 940              	.LVL97:
 941 0003 4189C0   		movl	%eax, %r8d
 942 0006 4183E00F 		andl	$15, %r8d
 260:fltk-1.3.4-1/png/pngwutil.c ****       {
 943              		.loc 1 260 0
 944 000a 4180F808 		cmpb	$8, %r8b
 945 000e 7408     		je	.L107
 946              	.LVL98:
 947              	.L101:
 948 0010 F3C3     		rep ret
 949              	.LVL99:
 950              		.p2align 4,,10
 951 0012 660F1F44 		.p2align 3
 951      0000
 952              	.L107:
 953 0018 89C2     		movl	%eax, %edx
 954 001a 83E2F0   		andl	$-16, %edx
 955 001d 80FA70   		cmpb	$112, %dl
 956 0020 77EE     		ja	.L101
 957              	.LBB211:
 265:fltk-1.3.4-1/png/pngwutil.c ****          half_z_window_size = 1U << (z_cinfo + 7);
 958              		.loc 1 265 0
 959 0022 C1E804   		shrl	$4, %eax
 960              	.LVL100:
 266:fltk-1.3.4-1/png/pngwutil.c **** 
 961              		.loc 1 266 0
 962 0025 BA010000 		movl	$1, %edx
 962      00
 963 002a 8D4807   		leal	7(%rax), %ecx
 964 002d D3E2     		sall	%cl, %edx
 965              	.LVL101:
 268:fltk-1.3.4-1/png/pngwutil.c ****          {
 966              		.loc 1 268 0
 967 002f 89D1     		movl	%edx, %ecx
 968 0031 4839F1   		cmpq	%rsi, %rcx
 969 0034 72DA     		jb	.L101
 970              	.LBB212:
 274:fltk-1.3.4-1/png/pngwutil.c ****                --z_cinfo;
 971              		.loc 1 274 0
 972 0036 D1EA     		shrl	%edx
 973              	.LVL102:
 277:fltk-1.3.4-1/png/pngwutil.c **** 
 974              		.loc 1 277 0
 975 0038 83E801   		subl	$1, %eax
 976              	.LVL103:
 977 003b 7411     		je	.L105
 978 003d 0F1F00   		.p2align 4,,10
 979              		.p2align 3
 980              	.L109:
 981 0040 89D1     		movl	%edx, %ecx
 982 0042 4839CE   		cmpq	%rcx, %rsi
 983 0045 7749     		ja	.L108
 274:fltk-1.3.4-1/png/pngwutil.c ****                --z_cinfo;
 984              		.loc 1 274 0
 985 0047 D1EA     		shrl	%edx
 986              	.LVL104:
 277:fltk-1.3.4-1/png/pngwutil.c **** 
 987              		.loc 1 277 0
 988 0049 83E801   		subl	$1, %eax
 989              	.LVL105:
 990 004c 75F2     		jne	.L109
 991              	.L105:
 992 004e B9000800 		movl	$2048, %ecx
 992      00
 993              	.LVL106:
 994              	.L103:
 282:fltk-1.3.4-1/png/pngwutil.c ****             tmp += 0x1f - ((z_cmf << 8) + tmp) % 0x1f;
 995              		.loc 1 282 0
 996 0053 0FB67701 		movzbl	1(%rdi), %esi
 997              	.LVL107:
 283:fltk-1.3.4-1/png/pngwutil.c ****             data[1] = (png_byte)tmp;
 998              		.loc 1 283 0
 999 0057 BA851042 		movl	$138547333, %edx
 999      08
 1000              	.LVL108:
 281:fltk-1.3.4-1/png/pngwutil.c ****             tmp = data[1] & 0xe0;
 1001              		.loc 1 281 0
 1002 005c 448807   		movb	%r8b, (%rdi)
 282:fltk-1.3.4-1/png/pngwutil.c ****             tmp += 0x1f - ((z_cmf << 8) + tmp) % 0x1f;
 1003              		.loc 1 282 0
 1004 005f 81E6E000 		andl	$224, %esi
 1004      0000
 1005              	.LVL109:
 283:fltk-1.3.4-1/png/pngwutil.c ****             data[1] = (png_byte)tmp;
 1006              		.loc 1 283 0
 1007 0065 01F1     		addl	%esi, %ecx
 1008 0067 89C8     		movl	%ecx, %eax
 1009 0069 29CE     		subl	%ecx, %esi
 1010              	.LVL110:
 1011 006b F7E2     		mull	%edx
 1012 006d 89C8     		movl	%ecx, %eax
 1013 006f 29D0     		subl	%edx, %eax
 1014 0071 D1E8     		shrl	%eax
 1015 0073 01C2     		addl	%eax, %edx
 1016 0075 C1EA04   		shrl	$4, %edx
 1017 0078 89D0     		movl	%edx, %eax
 1018 007a C1E005   		sall	$5, %eax
 1019 007d 29D0     		subl	%edx, %eax
 284:fltk-1.3.4-1/png/pngwutil.c ****          }
 1020              		.loc 1 284 0
 1021 007f 8D44061F 		leal	31(%rsi,%rax), %eax
 1022 0083 884701   		movb	%al, 1(%rdi)
 1023 0086 C3       		ret
 1024              	.LVL111:
 1025 0087 660F1F84 		.p2align 4,,10
 1025      00000000 
 1025      00
 1026              		.p2align 3
 1027              	.L108:
 1028 0090 C1E004   		sall	$4, %eax
 1029              	.LVL112:
 1030 0093 89C1     		movl	%eax, %ecx
 1031 0095 83C908   		orl	$8, %ecx
 1032 0098 4189C8   		movl	%ecx, %r8d
 1033 009b C1E108   		sall	$8, %ecx
 1034 009e EBB3     		jmp	.L103
 1035              	.LBE212:
 1036              	.LBE211:
 1037              	.LBE210:
 1038              		.cfi_endproc
 1039              	.LFE99:
 1041              		.section	.text.unlikely.optimize_cmf.part.0
 1042              	.LCOLDE9:
 1043              		.section	.text.optimize_cmf.part.0
 1044              	.LHOTE9:
 1045              		.section	.rodata.str1.1
 1046              	.LC10:
 1047 0052 636F6D70 		.string	"compressed data too long"
 1047      72657373 
 1047      65642064 
 1047      61746120 
 1047      746F6F20 
 1048              		.section	.text.unlikely.png_text_compress,"ax",@progbits
 1049              	.LCOLDB11:
 1050              		.section	.text.png_text_compress,"ax",@progbits
 1051              	.LHOTB11:
 1052              		.p2align 4,,15
 1054              	png_text_compress:
 1055              	.LFB70:
 491:fltk-1.3.4-1/png/pngwutil.c ****    int ret;
 1056              		.loc 1 491 0
 1057              		.cfi_startproc
 1058              	.LVL113:
 1059 0000 4157     		pushq	%r15
 1060              		.cfi_def_cfa_offset 16
 1061              		.cfi_offset 15, -16
 1062 0002 4156     		pushq	%r14
 1063              		.cfi_def_cfa_offset 24
 1064              		.cfi_offset 14, -24
 1065 0004 4155     		pushq	%r13
 1066              		.cfi_def_cfa_offset 32
 1067              		.cfi_offset 13, -32
 1068 0006 4154     		pushq	%r12
 1069              		.cfi_def_cfa_offset 40
 1070              		.cfi_offset 12, -40
 1071 0008 4989FC   		movq	%rdi, %r12
 1072 000b 55       		pushq	%rbp
 1073              		.cfi_def_cfa_offset 48
 1074              		.cfi_offset 6, -48
 1075 000c 53       		pushq	%rbx
 1076              		.cfi_def_cfa_offset 56
 1077              		.cfi_offset 3, -56
 1078 000d 4889D3   		movq	%rdx, %rbx
 1079 0010 4883EC28 		subq	$40, %rsp
 1080              		.cfi_def_cfa_offset 96
 491:fltk-1.3.4-1/png/pngwutil.c ****    int ret;
 1081              		.loc 1 491 0
 1082 0014 48895424 		movq	%rdx, 16(%rsp)
 1082      10
 504:fltk-1.3.4-1/png/pngwutil.c **** 
 1083              		.loc 1 504 0
 1084 0019 488B5208 		movq	8(%rdx), %rdx
 1085              	.LVL114:
 491:fltk-1.3.4-1/png/pngwutil.c ****    int ret;
 1086              		.loc 1 491 0
 1087 001d 894C240C 		movl	%ecx, 12(%rsp)
 504:fltk-1.3.4-1/png/pngwutil.c **** 
 1088              		.loc 1 504 0
 1089 0021 E8000000 		call	png_deflate_claim
 1089      00
 1090              	.LVL115:
 506:fltk-1.3.4-1/png/pngwutil.c ****       return ret;
 1091              		.loc 1 506 0
 1092 0026 85C0     		testl	%eax, %eax
 1093 0028 0F859301 		jne	.L111
 1093      0000
 1094              	.LVL116:
 1095              	.LBB220:
 1096              	.LBB221:
 1097              	.LBB222:
 521:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zstream.avail_in = 0; /* Set below */
 1098              		.loc 1 521 0
 1099 002e 488B03   		movq	(%rbx), %rax
 1100              	.LVL117:
 517:fltk-1.3.4-1/png/pngwutil.c ****       png_uint_32 output_len;
 1101              		.loc 1 517 0
 1102 0031 4C8B7B08 		movq	8(%rbx), %r15
 516:fltk-1.3.4-1/png/pngwutil.c ****       png_alloc_size_t input_len = comp->input_len; /* may be zero! */
 1103              		.loc 1 516 0
 1104 0035 4D8DB424 		leaq	432(%r12), %r14
 1104      B0010000 
 1105              	.LVL118:
 524:fltk-1.3.4-1/png/pngwutil.c **** 
 1106              		.loc 1 524 0
 1107 003d 41C78424 		movl	$1024, 352(%r12)
 1107      60010000 
 1107      00040000 
 1108              	.LVL119:
 1109 0049 B9000400 		movl	$1024, %ecx
 1109      00
 526:fltk-1.3.4-1/png/pngwutil.c **** 
 1110              		.loc 1 526 0
 1111 004e BD000400 		movl	$1024, %ebp
 1111      00
 1112              	.LBB223:
 533:fltk-1.3.4-1/png/pngwutil.c **** 
 1113              		.loc 1 533 0
 1114 0053 41BDFFFF 		movl	$-1, %r13d
 1114      FFFF
 1115              	.LBE223:
 521:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zstream.avail_in = 0; /* Set below */
 1116              		.loc 1 521 0
 1117 0059 49898424 		movq	%rax, 320(%r12)
 1117      40010000 
 523:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zstream.avail_out = (sizeof comp->output);
 1118              		.loc 1 523 0
 1119 0061 4889D8   		movq	%rbx, %rax
 1120              	.LBB227:
 532:fltk-1.3.4-1/png/pngwutil.c ****             avail_in = (uInt)input_len;
 1121              		.loc 1 532 0
 1122 0064 BBFEFFFF 		movl	$4294967294, %ebx
 1122      FF
 1123              	.LVL120:
 1124              	.LBE227:
 523:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zstream.avail_out = (sizeof comp->output);
 1125              		.loc 1 523 0
 1126 0069 4883C014 		addq	$20, %rax
 1127              	.LVL121:
 1128 006d 48894424 		movq	%rax, 24(%rsp)
 1128      18
 1129 0072 49898424 		movq	%rax, 344(%r12)
 1129      58010000 
 1130              	.LBB228:
 581:fltk-1.3.4-1/png/pngwutil.c ****             input_len > 0 ? Z_NO_FLUSH : Z_FINISH);
 1131              		.loc 1 581 0
 1132 007a 498D8424 		leaq	320(%r12), %rax
 1132      40010000 
 1133 0082 48890424 		movq	%rax, (%rsp)
 1134 0086 EB5E     		jmp	.L119
 1135              	.LVL122:
 1136 0088 0F1F8400 		.p2align 4,,10
 1136      00000000 
 1137              		.p2align 3
 1138              	.L115:
 1139              	.LBB224:
 572:fltk-1.3.4-1/png/pngwutil.c ****             png_ptr->zstream.avail_out = png_ptr->zbuffer_size;
 1140              		.loc 1 572 0
 1141 0090 488D4808 		leaq	8(%rax), %rcx
 577:fltk-1.3.4-1/png/pngwutil.c ****          }
 1142              		.loc 1 577 0
 1143 0094 4989C6   		movq	%rax, %r14
 1144              	.LVL123:
 572:fltk-1.3.4-1/png/pngwutil.c ****             png_ptr->zstream.avail_out = png_ptr->zbuffer_size;
 1145              		.loc 1 572 0
 1146 0097 49898C24 		movq	%rcx, 344(%r12)
 1146      58010000 
 573:fltk-1.3.4-1/png/pngwutil.c ****             output_len += png_ptr->zstream.avail_out;
 1147              		.loc 1 573 0
 1148 009f 418B8C24 		movl	440(%r12), %ecx
 1148      B8010000 
 1149 00a7 41898C24 		movl	%ecx, 352(%r12)
 1149      60010000 
 574:fltk-1.3.4-1/png/pngwutil.c **** 
 1150              		.loc 1 574 0
 1151 00af 01CD     		addl	%ecx, %ebp
 1152              	.LVL124:
 1153              	.L113:
 1154              	.LBE224:
 581:fltk-1.3.4-1/png/pngwutil.c ****             input_len > 0 ? Z_NO_FLUSH : Z_FINISH);
 1155              		.loc 1 581 0
 1156 00b1 4983FF01 		cmpq	$1, %r15
 1157 00b5 488B3C24 		movq	(%rsp), %rdi
 1158 00b9 19F6     		sbbl	%esi, %esi
 1159 00bb 83E604   		andl	$4, %esi
 1160 00be E8000000 		call	deflate
 1160      00
 1161              	.LVL125:
 587:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zstream.avail_in = 0; /* safety */
 1162              		.loc 1 587 0
 1163 00c3 418B8C24 		movl	328(%r12), %ecx
 1163      48010000 
 588:fltk-1.3.4-1/png/pngwutil.c ****       }
 1164              		.loc 1 588 0
 1165 00cb 41C78424 		movl	$0, 328(%r12)
 1165      48010000 
 1165      00000000 
 587:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zstream.avail_in = 0; /* safety */
 1166              		.loc 1 587 0
 1167 00d7 4901CF   		addq	%rcx, %r15
 1168              	.LVL126:
 1169              	.LBE228:
 590:fltk-1.3.4-1/png/pngwutil.c **** 
 1170              		.loc 1 590 0
 1171 00da 85C0     		testl	%eax, %eax
 1172 00dc 418B8C24 		movl	352(%r12), %ecx
 1172      60010000 
 1173 00e4 756F     		jne	.L114
 1174              	.LVL127:
 1175              	.L119:
 1176              	.LBB229:
 533:fltk-1.3.4-1/png/pngwutil.c **** 
 1177              		.loc 1 533 0
 1178 00e6 4939DF   		cmpq	%rbx, %r15
 1179 00e9 BEFFFFFF 		movl	$4294967295, %esi
 1179      FF
 1180 00ee 4489E8   		movl	%r13d, %eax
 1181 00f1 490F46F7 		cmovbe	%r15, %rsi
 1182 00f5 410F46C7 		cmovbe	%r15d, %eax
 1183              	.LVL128:
 535:fltk-1.3.4-1/png/pngwutil.c **** 
 1184              		.loc 1 535 0
 1185 00f9 4929F7   		subq	%rsi, %r15
 1186              	.LVL129:
 539:fltk-1.3.4-1/png/pngwutil.c ****          {
 1187              		.loc 1 539 0
 1188 00fc 85C9     		testl	%ecx, %ecx
 537:fltk-1.3.4-1/png/pngwutil.c **** 
 1189              		.loc 1 537 0
 1190 00fe 41898424 		movl	%eax, 328(%r12)
 1190      48010000 
 539:fltk-1.3.4-1/png/pngwutil.c ****          {
 1191              		.loc 1 539 0
 1192 0106 75A9     		jne	.L113
 1193              	.LBB225:
 546:fltk-1.3.4-1/png/pngwutil.c ****             {
 1194              		.loc 1 546 0
 1195 0108 8B44240C 		movl	12(%rsp), %eax
 1196              	.LVL130:
 1197 010c 01E8     		addl	%ebp, %eax
 1198 010e 7840     		js	.L123
 555:fltk-1.3.4-1/png/pngwutil.c ****             if (next == NULL)
 1199              		.loc 1 555 0
 1200 0110 498B06   		movq	(%r14), %rax
 1201              	.LVL131:
 556:fltk-1.3.4-1/png/pngwutil.c ****             {
 1202              		.loc 1 556 0
 1203 0113 4885C0   		testq	%rax, %rax
 1204 0116 0F8574FF 		jne	.L115
 1204      FFFF
 558:fltk-1.3.4-1/png/pngwutil.c ****                   (png_ptr, PNG_COMPRESSION_BUFFER_SIZE(png_ptr)));
 1205              		.loc 1 558 0
 1206 011c 418BB424 		movl	440(%r12), %esi
 1206      B8010000 
 1207 0124 4C89E7   		movq	%r12, %rdi
 1208 0127 4883C608 		addq	$8, %rsi
 1209 012b E8000000 		call	png_malloc_base
 1209      00
 1210              	.LVL132:
 561:fltk-1.3.4-1/png/pngwutil.c ****                {
 1211              		.loc 1 561 0
 1212 0130 4885C0   		testq	%rax, %rax
 1213 0133 0F84C300 		je	.L134
 1213      0000
 568:fltk-1.3.4-1/png/pngwutil.c ****                *end = next;
 1214              		.loc 1 568 0
 1215 0139 48C70000 		movq	$0, (%rax)
 1215      000000
 569:fltk-1.3.4-1/png/pngwutil.c ****             }
 1216              		.loc 1 569 0
 1217 0140 498906   		movq	%rax, (%r14)
 1218 0143 E948FFFF 		jmp	.L115
 1218      FF
 1219              	.LVL133:
 1220 0148 0F1F8400 		.p2align 4,,10
 1220      00000000 
 1221              		.p2align 3
 1222              	.L123:
 548:fltk-1.3.4-1/png/pngwutil.c ****                break;
 1223              		.loc 1 548 0
 1224 0150 B8FCFFFF 		movl	$-4, %eax
 1224      FF
 1225              	.LVL134:
 1226              	.L114:
 1227              	.LBE225:
 1228              	.LBE229:
 597:fltk-1.3.4-1/png/pngwutil.c **** 
 1229              		.loc 1 597 0
 1230 0155 488B5424 		movq	16(%rsp), %rdx
 1230      10
 595:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zstream.avail_out = 0; /* safety */
 1231              		.loc 1 595 0
 1232 015a 29CD     		subl	%ecx, %ebp
 1233              	.LVL135:
 596:fltk-1.3.4-1/png/pngwutil.c ****       comp->output_len = output_len;
 1234              		.loc 1 596 0
 1235 015c 41C78424 		movl	$0, 352(%r12)
 1235      60010000 
 1235      00000000 
 597:fltk-1.3.4-1/png/pngwutil.c **** 
 1236              		.loc 1 597 0
 1237 0168 896A10   		movl	%ebp, 16(%rdx)
 603:fltk-1.3.4-1/png/pngwutil.c ****       {
 1238              		.loc 1 603 0
 1239 016b 036C240C 		addl	12(%rsp), %ebp
 1240              	.LVL136:
 1241 016f 81FDFEFF 		cmpl	$2147483646, %ebp
 1241      FF7F
 1242 0175 7759     		ja	.L135
 610:fltk-1.3.4-1/png/pngwutil.c **** 
 1243              		.loc 1 610 0
 1244 0177 89C6     		movl	%eax, %esi
 1245 0179 4C89E7   		movq	%r12, %rdi
 1246 017c 890424   		movl	%eax, (%rsp)
 1247 017f E8000000 		call	png_zstream_error
 1247      00
 1248              	.LVL137:
 618:fltk-1.3.4-1/png/pngwutil.c ****       {
 1249              		.loc 1 618 0
 1250 0184 8B0424   		movl	(%rsp), %eax
 613:fltk-1.3.4-1/png/pngwutil.c **** 
 1251              		.loc 1 613 0
 1252 0187 41C78424 		movl	$0, 312(%r12)
 1252      38010000 
 1252      00000000 
 618:fltk-1.3.4-1/png/pngwutil.c ****       {
 1253              		.loc 1 618 0
 1254 0193 83F801   		cmpl	$1, %eax
 1255 0196 7529     		jne	.L111
 1256 0198 4D85FF   		testq	%r15, %r15
 1257 019b 7524     		jne	.L111
 622:fltk-1.3.4-1/png/pngwutil.c **** #endif
 1258              		.loc 1 622 0
 1259 019d 488B4424 		movq	16(%rsp), %rax
 1259      10
 1260 01a2 488B7008 		movq	8(%rax), %rsi
 1261              	.LVL138:
 628:fltk-1.3.4-1/png/pngwutil.c ****       }
 1262              		.loc 1 628 0
 1263 01a6 31C0     		xorl	%eax, %eax
 1264              	.LBB230:
 1265              	.LBB231:
 256:fltk-1.3.4-1/png/pngwutil.c ****    {
 1266              		.loc 1 256 0
 1267 01a8 4881FE00 		cmpq	$16384, %rsi
 1267      400000
 1268 01af 7710     		ja	.L111
 1269 01b1 488B7C24 		movq	24(%rsp), %rdi
 1269      18
 1270 01b6 890424   		movl	%eax, (%rsp)
 1271              	.LVL139:
 1272 01b9 E8000000 		call	optimize_cmf.part.0
 1272      00
 1273              	.LVL140:
 1274 01be 8B0424   		movl	(%rsp), %eax
 1275              	.LVL141:
 1276              	.L111:
 1277              	.LBE231:
 1278              	.LBE230:
 1279              	.LBE222:
 1280              	.LBE221:
 1281              	.LBE220:
 634:fltk-1.3.4-1/png/pngwutil.c **** 
 1282              		.loc 1 634 0
 1283 01c1 4883C428 		addq	$40, %rsp
 1284              		.cfi_remember_state
 1285              		.cfi_def_cfa_offset 56
 1286 01c5 5B       		popq	%rbx
 1287              		.cfi_def_cfa_offset 48
 1288 01c6 5D       		popq	%rbp
 1289              		.cfi_def_cfa_offset 40
 1290 01c7 415C     		popq	%r12
 1291              		.cfi_def_cfa_offset 32
 1292              	.LVL142:
 1293 01c9 415D     		popq	%r13
 1294              		.cfi_def_cfa_offset 24
 1295 01cb 415E     		popq	%r14
 1296              		.cfi_def_cfa_offset 16
 1297 01cd 415F     		popq	%r15
 1298              		.cfi_def_cfa_offset 8
 1299 01cf C3       		ret
 1300              	.LVL143:
 1301              		.p2align 4,,10
 1302              		.p2align 3
 1303              	.L135:
 1304              		.cfi_restore_state
 1305              	.LBB239:
 1306              	.LBB236:
 1307              	.LBB233:
 605:fltk-1.3.4-1/png/pngwutil.c ****          ret = Z_MEM_ERROR;
 1308              		.loc 1 605 0
 1309 01d0 49C78424 		movq	$.LC10, 368(%r12)
 1309      70010000 
 1309      00000000 
 1310              	.LVL144:
 613:fltk-1.3.4-1/png/pngwutil.c **** 
 1311              		.loc 1 613 0
 1312 01dc 41C78424 		movl	$0, 312(%r12)
 1312      38010000 
 1312      00000000 
 1313              	.LBE233:
 1314              	.LBE236:
 1315              	.LBE239:
 634:fltk-1.3.4-1/png/pngwutil.c **** 
 1316              		.loc 1 634 0
 1317 01e8 4883C428 		addq	$40, %rsp
 1318              		.cfi_remember_state
 1319              		.cfi_def_cfa_offset 56
 1320 01ec 5B       		popq	%rbx
 1321              		.cfi_def_cfa_offset 48
 1322              	.LBB240:
 1323              	.LBB237:
 1324              	.LBB234:
 606:fltk-1.3.4-1/png/pngwutil.c ****       }
 1325              		.loc 1 606 0
 1326 01ed B8FCFFFF 		movl	$-4, %eax
 1326      FF
 1327              	.LBE234:
 1328              	.LBE237:
 1329              	.LBE240:
 634:fltk-1.3.4-1/png/pngwutil.c **** 
 1330              		.loc 1 634 0
 1331 01f2 5D       		popq	%rbp
 1332              		.cfi_def_cfa_offset 40
 1333 01f3 415C     		popq	%r12
 1334              		.cfi_def_cfa_offset 32
 1335              	.LVL145:
 1336 01f5 415D     		popq	%r13
 1337              		.cfi_def_cfa_offset 24
 1338 01f7 415E     		popq	%r14
 1339              		.cfi_def_cfa_offset 16
 1340              	.LVL146:
 1341 01f9 415F     		popq	%r15
 1342              		.cfi_def_cfa_offset 8
 1343              	.LVL147:
 1344 01fb C3       		ret
 1345              	.LVL148:
 1346              	.L134:
 1347              		.cfi_restore_state
 1348 01fc 418B8C24 		movl	352(%r12), %ecx
 1348      60010000 
 1349              	.LBB241:
 1350              	.LBB238:
 1351              	.LBB235:
 1352              	.LBB232:
 1353              	.LBB226:
 563:fltk-1.3.4-1/png/pngwutil.c ****                   break;
 1354              		.loc 1 563 0
 1355 0204 B8FCFFFF 		movl	$-4, %eax
 1355      FF
 1356              	.LVL149:
 1357 0209 E947FFFF 		jmp	.L114
 1357      FF
 1358              	.LBE226:
 1359              	.LBE232:
 1360              	.LBE235:
 1361              	.LBE238:
 1362              	.LBE241:
 1363              		.cfi_endproc
 1364              	.LFE70:
 1366              		.section	.text.unlikely.png_text_compress
 1367              	.LCOLDE11:
 1368              		.section	.text.png_text_compress
 1369              	.LHOTE11:
 1370              		.section	.text.unlikely.png_write_chunk_header.part.2,"ax",@progbits
 1371              	.LCOLDB12:
 1372              		.section	.text.png_write_chunk_header.part.2,"ax",@progbits
 1373              	.LHOTB12:
 1374              		.p2align 4,,15
 1376              	png_write_chunk_header.part.2:
 1377              	.LFB101:
  73:fltk-1.3.4-1/png/pngwutil.c ****     png_uint_32 length)
 1378              		.loc 1 73 0
 1379              		.cfi_startproc
 1380              	.LVL150:
 1381 0000 55       		pushq	%rbp
 1382              		.cfi_def_cfa_offset 16
 1383              		.cfi_offset 6, -16
 1384 0001 53       		pushq	%rbx
 1385              		.cfi_def_cfa_offset 24
 1386              		.cfi_offset 3, -24
 1387 0002 89F5     		movl	%esi, %ebp
 1388 0004 4889FB   		movq	%rdi, %rbx
 1389 0007 4883EC18 		subq	$24, %rsp
 1390              		.cfi_def_cfa_offset 48
  90:fltk-1.3.4-1/png/pngwutil.c **** #endif
 1391              		.loc 1 90 0
 1392 000b C787AC04 		movl	$34, 1196(%rdi)
 1392      00002200 
 1392      0000
 1393              	.LVL151:
  73:fltk-1.3.4-1/png/pngwutil.c ****     png_uint_32 length)
 1394              		.loc 1 73 0
 1395 0015 64488B04 		movq	%fs:40, %rax
 1395      25280000 
 1395      00
 1396 001e 48894424 		movq	%rax, 8(%rsp)
 1396      08
 1397 0023 31C0     		xorl	%eax, %eax
 1398              	.LBB242:
 1399              	.LBB243:
  26:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)((i >> 16) & 0xff);
 1400              		.loc 1 26 0
 1401 0025 89D0     		movl	%edx, %eax
  29:fltk-1.3.4-1/png/pngwutil.c **** }
 1402              		.loc 1 29 0
 1403 0027 88542403 		movb	%dl, 3(%rsp)
 1404              	.LVL152:
 1405              	.LBE243:
 1406              	.LBE242:
 1407              	.LBB246:
 1408              	.LBB247:
 1409 002b 40887424 		movb	%sil, 7(%rsp)
 1409      07
 1410              	.LVL153:
 1411              	.LBE247:
 1412              	.LBE246:
 1413              	.LBB250:
 1414              	.LBB244:
  26:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)((i >> 16) & 0xff);
 1415              		.loc 1 26 0
 1416 0030 C1E818   		shrl	$24, %eax
 1417 0033 880424   		movb	%al, (%rsp)
  27:fltk-1.3.4-1/png/pngwutil.c ****    buf[2] = (png_byte)((i >> 8) & 0xff);
 1418              		.loc 1 27 0
 1419 0036 89D0     		movl	%edx, %eax
 1420 0038 C1E810   		shrl	$16, %eax
 1421 003b 88442401 		movb	%al, 1(%rsp)
  28:fltk-1.3.4-1/png/pngwutil.c ****    buf[3] = (png_byte)(i & 0xff);
 1422              		.loc 1 28 0
 1423 003f 89D0     		movl	%edx, %eax
 1424              	.LBE244:
 1425              	.LBE250:
  96:fltk-1.3.4-1/png/pngwutil.c **** 
 1426              		.loc 1 96 0
 1427 0041 BA080000 		movl	$8, %edx
 1427      00
 1428              	.LVL154:
 1429              	.LBB251:
 1430              	.LBB245:
  28:fltk-1.3.4-1/png/pngwutil.c ****    buf[3] = (png_byte)(i & 0xff);
 1431              		.loc 1 28 0
 1432 0046 C1E808   		shrl	$8, %eax
 1433              	.LVL155:
 1434 0049 88442402 		movb	%al, 2(%rsp)
 1435              	.LBE245:
 1436              	.LBE251:
 1437              	.LBB252:
 1438              	.LBB248:
  26:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)((i >> 16) & 0xff);
 1439              		.loc 1 26 0
 1440 004d 89F0     		movl	%esi, %eax
 1441 004f C1E818   		shrl	$24, %eax
 1442 0052 88442404 		movb	%al, 4(%rsp)
  27:fltk-1.3.4-1/png/pngwutil.c ****    buf[2] = (png_byte)((i >> 8) & 0xff);
 1443              		.loc 1 27 0
 1444 0056 89F0     		movl	%esi, %eax
 1445 0058 C1E810   		shrl	$16, %eax
 1446 005b 88442405 		movb	%al, 5(%rsp)
  28:fltk-1.3.4-1/png/pngwutil.c ****    buf[3] = (png_byte)(i & 0xff);
 1447              		.loc 1 28 0
 1448 005f 89F0     		movl	%esi, %eax
 1449              	.LBE248:
 1450              	.LBE252:
  96:fltk-1.3.4-1/png/pngwutil.c **** 
 1451              		.loc 1 96 0
 1452 0061 4889E6   		movq	%rsp, %rsi
 1453              	.LVL156:
 1454              	.LBB253:
 1455              	.LBB249:
  28:fltk-1.3.4-1/png/pngwutil.c ****    buf[3] = (png_byte)(i & 0xff);
 1456              		.loc 1 28 0
 1457 0064 C1E808   		shrl	$8, %eax
 1458              	.LVL157:
 1459 0067 88442406 		movb	%al, 6(%rsp)
 1460              	.LBE249:
 1461              	.LBE253:
  96:fltk-1.3.4-1/png/pngwutil.c **** 
 1462              		.loc 1 96 0
 1463 006b E8000000 		call	png_write_data
 1463      00
 1464              	.LVL158:
 102:fltk-1.3.4-1/png/pngwutil.c **** 
 1465              		.loc 1 102 0
 1466 0070 4889DF   		movq	%rbx, %rdi
  99:fltk-1.3.4-1/png/pngwutil.c **** 
 1467              		.loc 1 99 0
 1468 0073 89AB1802 		movl	%ebp, 536(%rbx)
 1468      0000
 102:fltk-1.3.4-1/png/pngwutil.c **** 
 1469              		.loc 1 102 0
 1470 0079 E8000000 		call	png_reset_crc
 1470      00
 1471              	.LVL159:
 104:fltk-1.3.4-1/png/pngwutil.c **** 
 1472              		.loc 1 104 0
 1473 007e 488D7424 		leaq	4(%rsp), %rsi
 1473      04
 1474 0083 BA040000 		movl	$4, %edx
 1474      00
 1475 0088 4889DF   		movq	%rbx, %rdi
 1476 008b E8000000 		call	png_calculate_crc
 1476      00
 1477              	.LVL160:
 112:fltk-1.3.4-1/png/pngwutil.c **** 
 1478              		.loc 1 112 0
 1479 0090 488B4424 		movq	8(%rsp), %rax
 1479      08
 1480 0095 64483304 		xorq	%fs:40, %rax
 1480      25280000 
 1480      00
 110:fltk-1.3.4-1/png/pngwutil.c **** #endif
 1481              		.loc 1 110 0
 1482 009e C783AC04 		movl	$66, 1196(%rbx)
 1482      00004200 
 1482      0000
 112:fltk-1.3.4-1/png/pngwutil.c **** 
 1483              		.loc 1 112 0
 1484 00a8 7507     		jne	.L139
 1485 00aa 4883C418 		addq	$24, %rsp
 1486              		.cfi_remember_state
 1487              		.cfi_def_cfa_offset 24
 1488 00ae 5B       		popq	%rbx
 1489              		.cfi_def_cfa_offset 16
 1490              	.LVL161:
 1491 00af 5D       		popq	%rbp
 1492              		.cfi_def_cfa_offset 8
 1493              	.LVL162:
 1494 00b0 C3       		ret
 1495              	.LVL163:
 1496              	.L139:
 1497              		.cfi_restore_state
 1498 00b1 E8000000 		call	__stack_chk_fail
 1498      00
 1499              	.LVL164:
 1500              		.cfi_endproc
 1501              	.LFE101:
 1503              		.section	.text.unlikely.png_write_chunk_header.part.2
 1504              	.LCOLDE12:
 1505              		.section	.text.png_write_chunk_header.part.2
 1506              	.LHOTE12:
 1507              		.section	.text.unlikely.png_write_chunk_data.part.3,"ax",@progbits
 1508              	.LCOLDB13:
 1509              		.section	.text.png_write_chunk_data.part.3,"ax",@progbits
 1510              	.LHOTB13:
 1511              		.p2align 4,,15
 1513              	png_write_chunk_data.part.3:
 1514              	.LFB102:
 127:fltk-1.3.4-1/png/pngwutil.c ****     png_size_t length)
 1515              		.loc 1 127 0
 1516              		.cfi_startproc
 1517              	.LVL165:
 1518 0000 4154     		pushq	%r12
 1519              		.cfi_def_cfa_offset 16
 1520              		.cfi_offset 12, -16
 1521 0002 55       		pushq	%rbp
 1522              		.cfi_def_cfa_offset 24
 1523              		.cfi_offset 6, -24
 1524 0003 4989D4   		movq	%rdx, %r12
 1525 0006 53       		pushq	%rbx
 1526              		.cfi_def_cfa_offset 32
 1527              		.cfi_offset 3, -32
 127:fltk-1.3.4-1/png/pngwutil.c ****     png_size_t length)
 1528              		.loc 1 127 0
 1529 0007 4889F5   		movq	%rsi, %rbp
 1530 000a 4889FB   		movq	%rdi, %rbx
 136:fltk-1.3.4-1/png/pngwutil.c **** 
 1531              		.loc 1 136 0
 1532 000d E8000000 		call	png_write_data
 1532      00
 1533              	.LVL166:
 141:fltk-1.3.4-1/png/pngwutil.c ****    }
 1534              		.loc 1 141 0
 1535 0012 4C89E2   		movq	%r12, %rdx
 1536 0015 4889EE   		movq	%rbp, %rsi
 1537 0018 4889DF   		movq	%rbx, %rdi
 143:fltk-1.3.4-1/png/pngwutil.c **** 
 1538              		.loc 1 143 0
 1539 001b 5B       		popq	%rbx
 1540              		.cfi_def_cfa_offset 24
 1541              	.LVL167:
 1542 001c 5D       		popq	%rbp
 1543              		.cfi_def_cfa_offset 16
 1544              	.LVL168:
 1545 001d 415C     		popq	%r12
 1546              		.cfi_def_cfa_offset 8
 1547              	.LVL169:
 141:fltk-1.3.4-1/png/pngwutil.c ****    }
 1548              		.loc 1 141 0
 1549 001f E9000000 		jmp	png_calculate_crc
 1549      00
 1550              	.LVL170:
 1551              		.cfi_endproc
 1552              	.LFE102:
 1554              		.section	.text.unlikely.png_write_chunk_data.part.3
 1555              	.LCOLDE13:
 1556              		.section	.text.png_write_chunk_data.part.3
 1557              	.LHOTE13:
 1558              		.section	.rodata.str1.8
 1559 0023 00000000 		.align 8
 1559      00
 1560              	.LC14:
 1561 0028 6572726F 		.string	"error writing ancillary chunked compressed data"
 1561      72207772 
 1561      6974696E 
 1561      6720616E 
 1561      63696C6C 
 1562              		.section	.text.unlikely.png_write_compressed_data_out,"ax",@progbits
 1563              	.LCOLDB15:
 1564              		.section	.text.png_write_compressed_data_out,"ax",@progbits
 1565              	.LHOTB15:
 1566              		.p2align 4,,15
 1568              	png_write_compressed_data_out:
 1569              	.LFB71:
 639:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 output_len = comp->output_len;
 1570              		.loc 1 639 0
 1571              		.cfi_startproc
 1572              	.LVL171:
 1573 0000 4155     		pushq	%r13
 1574              		.cfi_def_cfa_offset 16
 1575              		.cfi_offset 13, -16
 1576 0002 4154     		pushq	%r12
 1577              		.cfi_def_cfa_offset 24
 1578              		.cfi_offset 12, -24
 1579 0004 4989FD   		movq	%rdi, %r13
 1580 0007 55       		pushq	%rbp
 1581              		.cfi_def_cfa_offset 32
 1582              		.cfi_offset 6, -32
 1583 0008 53       		pushq	%rbx
 1584              		.cfi_def_cfa_offset 40
 1585              		.cfi_offset 3, -40
 641:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 avail = (sizeof comp->output);
 1586              		.loc 1 641 0
 1587 0009 4883C614 		addq	$20, %rsi
 1588              	.LVL172:
 642:fltk-1.3.4-1/png/pngwutil.c ****    png_compression_buffer *next = png_ptr->zbuffer_list;
 1589              		.loc 1 642 0
 1590 000d BB000400 		movl	$1024, %ebx
 1590      00
 639:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 output_len = comp->output_len;
 1591              		.loc 1 639 0
 1592 0012 4883EC08 		subq	$8, %rsp
 1593              		.cfi_def_cfa_offset 48
 640:fltk-1.3.4-1/png/pngwutil.c ****    png_const_bytep output = comp->output;
 1594              		.loc 1 640 0
 1595 0016 8B6EFC   		movl	-4(%rsi), %ebp
 1596              	.LVL173:
 643:fltk-1.3.4-1/png/pngwutil.c **** 
 1597              		.loc 1 643 0
 1598 0019 4C8BA7B0 		movq	432(%rdi), %r12
 1598      010000
 1599              	.LVL174:
 1600 0020 EB1F     		jmp	.L145
 1601              	.LVL175:
 1602              		.p2align 4,,10
 1603 0022 660F1F44 		.p2align 3
 1603      0000
 1604              	.L143:
 654:fltk-1.3.4-1/png/pngwutil.c ****          break;
 1605              		.loc 1 654 0
 1606 0028 29DD     		subl	%ebx, %ebp
 1607              	.LVL176:
 1608 002a 7434     		je	.L144
 1609              	.LVL177:
 1610              	.L151:
 1611 002c 4D85E4   		testq	%r12, %r12
 1612 002f 742F     		je	.L144
 658:fltk-1.3.4-1/png/pngwutil.c ****       next = next->next;
 1613              		.loc 1 658 0
 1614 0031 498D7424 		leaq	8(%r12), %rsi
 1614      08
 657:fltk-1.3.4-1/png/pngwutil.c ****       output = next->output;
 1615              		.loc 1 657 0
 1616 0036 418B9DB8 		movl	440(%r13), %ebx
 1616      010000
 1617              	.LVL178:
 659:fltk-1.3.4-1/png/pngwutil.c ****    }
 1618              		.loc 1 659 0
 1619 003d 4D8B2424 		movq	(%r12), %r12
 1620              	.LVL179:
 1621              	.L145:
 1622 0041 39DD     		cmpl	%ebx, %ebp
 1623 0043 0F46DD   		cmovbe	%ebp, %ebx
 1624              	.LVL180:
 1625              	.LBB254:
 1626              	.LBB255:
 134:fltk-1.3.4-1/png/pngwutil.c ****    {
 1627              		.loc 1 134 0
 1628 0046 85DB     		testl	%ebx, %ebx
 1629              	.LBE255:
 1630              	.LBE254:
 650:fltk-1.3.4-1/png/pngwutil.c **** 
 1631              		.loc 1 650 0
 1632 0048 89DA     		movl	%ebx, %edx
 1633              	.LVL181:
 1634              	.LBB257:
 1635              	.LBB256:
 134:fltk-1.3.4-1/png/pngwutil.c ****    {
 1636              		.loc 1 134 0
 1637 004a 74DC     		je	.L143
 1638 004c 4C89EF   		movq	%r13, %rdi
 1639 004f E8000000 		call	png_write_chunk_data.part.3
 1639      00
 1640              	.LVL182:
 1641              	.LBE256:
 1642              	.LBE257:
 654:fltk-1.3.4-1/png/pngwutil.c ****          break;
 1643              		.loc 1 654 0
 1644 0054 29DD     		subl	%ebx, %ebp
 1645              	.LVL183:
 1646 0056 75D4     		jne	.L151
 1647 0058 0F1F8400 		.p2align 4,,10
 1647      00000000 
 1648              		.p2align 3
 1649              	.L144:
 663:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "error writing ancillary chunked compressed data");
 1650              		.loc 1 663 0
 1651 0060 85ED     		testl	%ebp, %ebp
 1652 0062 750B     		jne	.L152
 665:fltk-1.3.4-1/png/pngwutil.c **** #endif /* WRITE_COMPRESSED_TEXT */
 1653              		.loc 1 665 0
 1654 0064 4883C408 		addq	$8, %rsp
 1655              		.cfi_remember_state
 1656              		.cfi_def_cfa_offset 40
 1657 0068 5B       		popq	%rbx
 1658              		.cfi_def_cfa_offset 32
 1659              	.LVL184:
 1660 0069 5D       		popq	%rbp
 1661              		.cfi_def_cfa_offset 24
 1662              	.LVL185:
 1663 006a 415C     		popq	%r12
 1664              		.cfi_def_cfa_offset 16
 1665              	.LVL186:
 1666 006c 415D     		popq	%r13
 1667              		.cfi_def_cfa_offset 8
 1668              	.LVL187:
 1669 006e C3       		ret
 1670              	.LVL188:
 1671              	.L152:
 1672              		.cfi_restore_state
 664:fltk-1.3.4-1/png/pngwutil.c **** }
 1673              		.loc 1 664 0
 1674 006f BE000000 		movl	$.LC14, %esi
 1674      00
 1675 0074 4C89EF   		movq	%r13, %rdi
 1676 0077 E8000000 		call	png_error
 1676      00
 1677              	.LVL189:
 1678              		.cfi_endproc
 1679              	.LFE71:
 1681              		.section	.text.unlikely.png_write_compressed_data_out
 1682              	.LCOLDE15:
 1683              		.section	.text.png_write_compressed_data_out
 1684              	.LHOTE15:
 1685              		.section	.text.unlikely.png_write_chunk_end.part.4,"ax",@progbits
 1686              	.LCOLDB16:
 1687              		.section	.text.png_write_chunk_end.part.4,"ax",@progbits
 1688              	.LHOTB16:
 1689              		.p2align 4,,15
 1691              	png_write_chunk_end.part.4:
 1692              	.LFB103:
 147:fltk-1.3.4-1/png/pngwutil.c **** {
 1693              		.loc 1 147 0
 1694              		.cfi_startproc
 1695              	.LVL190:
 1696 0000 4883EC18 		subq	$24, %rsp
 1697              		.cfi_def_cfa_offset 32
 157:fltk-1.3.4-1/png/pngwutil.c **** #endif
 1698              		.loc 1 157 0
 1699 0004 C787AC04 		movl	$130, 1196(%rdi)
 1699      00008200 
 1699      0000
 147:fltk-1.3.4-1/png/pngwutil.c **** {
 1700              		.loc 1 147 0
 1701 000e 64488B04 		movq	%fs:40, %rax
 1701      25280000 
 1701      00
 1702 0017 48894424 		movq	%rax, 8(%rsp)
 1702      08
 1703 001c 31C0     		xorl	%eax, %eax
 161:fltk-1.3.4-1/png/pngwutil.c **** 
 1704              		.loc 1 161 0
 1705 001e 8B875C02 		movl	604(%rdi), %eax
 1705      0000
 1706              	.LVL191:
 163:fltk-1.3.4-1/png/pngwutil.c **** }
 1707              		.loc 1 163 0
 1708 0024 4889E6   		movq	%rsp, %rsi
 1709              	.LBB258:
 1710              	.LBB259:
  26:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)((i >> 16) & 0xff);
 1711              		.loc 1 26 0
 1712 0027 89C2     		movl	%eax, %edx
  29:fltk-1.3.4-1/png/pngwutil.c **** }
 1713              		.loc 1 29 0
 1714 0029 88442403 		movb	%al, 3(%rsp)
 1715              	.LVL192:
  26:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)((i >> 16) & 0xff);
 1716              		.loc 1 26 0
 1717 002d C1EA18   		shrl	$24, %edx
 1718 0030 881424   		movb	%dl, (%rsp)
  27:fltk-1.3.4-1/png/pngwutil.c ****    buf[2] = (png_byte)((i >> 8) & 0xff);
 1719              		.loc 1 27 0
 1720 0033 89C2     		movl	%eax, %edx
 1721 0035 C1EA10   		shrl	$16, %edx
 1722 0038 88542401 		movb	%dl, 1(%rsp)
  28:fltk-1.3.4-1/png/pngwutil.c ****    buf[3] = (png_byte)(i & 0xff);
 1723              		.loc 1 28 0
 1724 003c 89C2     		movl	%eax, %edx
 1725 003e C1EA08   		shrl	$8, %edx
 1726 0041 88542402 		movb	%dl, 2(%rsp)
 1727              	.LBE259:
 1728              	.LBE258:
 163:fltk-1.3.4-1/png/pngwutil.c **** }
 1729              		.loc 1 163 0
 1730 0045 BA040000 		movl	$4, %edx
 1730      00
 1731 004a E8000000 		call	png_write_data
 1731      00
 1732              	.LVL193:
 164:fltk-1.3.4-1/png/pngwutil.c **** 
 1733              		.loc 1 164 0
 1734 004f 488B4424 		movq	8(%rsp), %rax
 1734      08
 1735 0054 64483304 		xorq	%fs:40, %rax
 1735      25280000 
 1735      00
 1736 005d 7505     		jne	.L156
 1737 005f 4883C418 		addq	$24, %rsp
 1738              		.cfi_remember_state
 1739              		.cfi_def_cfa_offset 8
 1740 0063 C3       		ret
 1741              	.L156:
 1742              		.cfi_restore_state
 1743 0064 E8000000 		call	__stack_chk_fail
 1743      00
 1744              	.LVL194:
 1745              		.cfi_endproc
 1746              	.LFE103:
 1748              		.section	.text.unlikely.png_write_chunk_end.part.4
 1749              	.LCOLDE16:
 1750              		.section	.text.png_write_chunk_end.part.4
 1751              	.LHOTE16:
 1752              		.section	.rodata.str1.1
 1753              	.LC17:
 1754 006b 6C656E67 		.string	"length exceeds PNG maximum"
 1754      74682065 
 1754      78636565 
 1754      64732050 
 1754      4E47206D 
 1755              		.section	.text.unlikely.png_write_complete_chunk,"ax",@progbits
 1756              	.LCOLDB18:
 1757              		.section	.text.png_write_complete_chunk,"ax",@progbits
 1758              	.LHOTB18:
 1759              		.p2align 4,,15
 1761              	png_write_complete_chunk:
 1762              	.LFB63:
 178:fltk-1.3.4-1/png/pngwutil.c ****    if (png_ptr == NULL)
 1763              		.loc 1 178 0
 1764              		.cfi_startproc
 1765              	.LVL195:
 179:fltk-1.3.4-1/png/pngwutil.c ****       return;
 1766              		.loc 1 179 0
 1767 0000 4885FF   		testq	%rdi, %rdi
 1768 0003 745B     		je	.L168
 183:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "length exceeds PNG maximum");
 1769              		.loc 1 183 0
 1770 0005 4881F9FF 		cmpq	$2147483647, %rcx
 1770      FFFF7F
 178:fltk-1.3.4-1/png/pngwutil.c ****    if (png_ptr == NULL)
 1771              		.loc 1 178 0
 1772 000c 4154     		pushq	%r12
 1773              		.cfi_def_cfa_offset 16
 1774              		.cfi_offset 12, -16
 1775 000e 4989D4   		movq	%rdx, %r12
 1776 0011 55       		pushq	%rbp
 1777              		.cfi_def_cfa_offset 24
 1778              		.cfi_offset 6, -24
 1779 0012 4889CD   		movq	%rcx, %rbp
 1780 0015 53       		pushq	%rbx
 1781              		.cfi_def_cfa_offset 32
 1782              		.cfi_offset 3, -32
 1783 0016 4889FB   		movq	%rdi, %rbx
 183:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "length exceeds PNG maximum");
 1784              		.loc 1 183 0
 1785 0019 7747     		ja	.L169
 1786              	.LVL196:
 1787              	.LBB260:
 1788              	.LBB261:
 1789 001b 89CA     		movl	%ecx, %edx
 1790              	.LVL197:
 1791 001d E8000000 		call	png_write_chunk_header.part.2
 1791      00
 1792              	.LVL198:
 1793              	.LBE261:
 1794              	.LBE260:
 1795              	.LBB262:
 1796              	.LBB263:
 134:fltk-1.3.4-1/png/pngwutil.c ****    {
 1797              		.loc 1 134 0
 1798 0022 4D85E4   		testq	%r12, %r12
 1799 0025 7405     		je	.L160
 1800 0027 4885ED   		testq	%rbp, %rbp
 1801 002a 7514     		jne	.L170
 1802              	.L160:
 1803              	.LVL199:
 1804              	.LBE263:
 1805              	.LBE262:
 1806              	.LBB265:
 1807              	.LBB266:
 1808 002c 4889DF   		movq	%rbx, %rdi
 1809              	.LBE266:
 1810              	.LBE265:
 189:fltk-1.3.4-1/png/pngwutil.c **** 
 1811              		.loc 1 189 0
 1812 002f 5B       		popq	%rbx
 1813              		.cfi_remember_state
 1814              		.cfi_restore 3
 1815              		.cfi_def_cfa_offset 24
 1816              	.LVL200:
 1817 0030 5D       		popq	%rbp
 1818              		.cfi_restore 6
 1819              		.cfi_def_cfa_offset 16
 1820              	.LVL201:
 1821 0031 415C     		popq	%r12
 1822              		.cfi_restore 12
 1823              		.cfi_def_cfa_offset 8
 1824              	.LVL202:
 1825              	.LBB270:
 1826              	.LBB267:
 1827 0033 E9000000 		jmp	png_write_chunk_end.part.4
 1827      00
 1828              	.LVL203:
 1829 0038 0F1F8400 		.p2align 4,,10
 1829      00000000 
 1830              		.p2align 3
 1831              	.L170:
 1832              		.cfi_restore_state
 1833              	.LBE267:
 1834              	.LBE270:
 1835              	.LBB271:
 1836              	.LBB264:
 1837 0040 4889DF   		movq	%rbx, %rdi
 1838 0043 4889EA   		movq	%rbp, %rdx
 1839 0046 4C89E6   		movq	%r12, %rsi
 1840 0049 E8000000 		call	png_write_chunk_data.part.3
 1840      00
 1841              	.LVL204:
 1842              	.LBE264:
 1843              	.LBE271:
 1844              	.LBB272:
 1845              	.LBB268:
 1846 004e 4889DF   		movq	%rbx, %rdi
 1847              	.LBE268:
 1848              	.LBE272:
 1849 0051 5B       		popq	%rbx
 1850              		.cfi_restore 3
 1851              		.cfi_def_cfa_offset 24
 1852              	.LVL205:
 1853 0052 5D       		popq	%rbp
 1854              		.cfi_restore 6
 1855              		.cfi_def_cfa_offset 16
 1856              	.LVL206:
 1857 0053 415C     		popq	%r12
 1858              		.cfi_restore 12
 1859              		.cfi_def_cfa_offset 8
 1860              	.LVL207:
 1861              	.LBB273:
 1862              	.LBB269:
 1863 0055 E9000000 		jmp	png_write_chunk_end.part.4
 1863      00
 1864              	.LVL208:
 1865 005a 660F1F44 		.p2align 4,,10
 1865      0000
 1866              		.p2align 3
 1867              	.L168:
 1868 0060 F3C3     		rep ret
 1869              	.LVL209:
 1870              	.L169:
 1871              		.cfi_def_cfa_offset 32
 1872              		.cfi_offset 3, -32
 1873              		.cfi_offset 6, -24
 1874              		.cfi_offset 12, -16
 1875              	.LBE269:
 1876              	.LBE273:
 184:fltk-1.3.4-1/png/pngwutil.c **** 
 1877              		.loc 1 184 0
 1878 0062 BE000000 		movl	$.LC17, %esi
 1878      00
 1879              	.LVL210:
 1880 0067 E8000000 		call	png_error
 1880      00
 1881              	.LVL211:
 1882              		.cfi_endproc
 1883              	.LFE63:
 1885              		.section	.text.unlikely.png_write_complete_chunk
 1886              	.LCOLDE18:
 1887              		.section	.text.png_write_complete_chunk
 1888              	.LHOTE18:
 1889              		.section	.text.unlikely.png_save_uint_32,"ax",@progbits
 1890              	.LCOLDB19:
 1891              		.section	.text.png_save_uint_32,"ax",@progbits
 1892              	.LHOTB19:
 1893              		.p2align 4,,15
 1894              		.globl	png_save_uint_32
 1896              	png_save_uint_32:
 1897              	.LFB56:
  25:fltk-1.3.4-1/png/pngwutil.c ****    buf[0] = (png_byte)((i >> 24) & 0xff);
 1898              		.loc 1 25 0
 1899              		.cfi_startproc
 1900              	.LVL212:
  26:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)((i >> 16) & 0xff);
 1901              		.loc 1 26 0
 1902 0000 89F0     		movl	%esi, %eax
  29:fltk-1.3.4-1/png/pngwutil.c **** }
 1903              		.loc 1 29 0
 1904 0002 40887703 		movb	%sil, 3(%rdi)
  26:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)((i >> 16) & 0xff);
 1905              		.loc 1 26 0
 1906 0006 C1E818   		shrl	$24, %eax
 1907 0009 8807     		movb	%al, (%rdi)
  27:fltk-1.3.4-1/png/pngwutil.c ****    buf[2] = (png_byte)((i >> 8) & 0xff);
 1908              		.loc 1 27 0
 1909 000b 89F0     		movl	%esi, %eax
 1910 000d C1E810   		shrl	$16, %eax
 1911 0010 884701   		movb	%al, 1(%rdi)
  28:fltk-1.3.4-1/png/pngwutil.c ****    buf[3] = (png_byte)(i & 0xff);
 1912              		.loc 1 28 0
 1913 0013 89F0     		movl	%esi, %eax
 1914 0015 C1E808   		shrl	$8, %eax
 1915 0018 884702   		movb	%al, 2(%rdi)
  29:fltk-1.3.4-1/png/pngwutil.c **** }
 1916              		.loc 1 29 0
 1917 001b C3       		ret
 1918              		.cfi_endproc
 1919              	.LFE56:
 1921              		.section	.text.unlikely.png_save_uint_32
 1922              	.LCOLDE19:
 1923              		.section	.text.png_save_uint_32
 1924              	.LHOTE19:
 1925              		.section	.text.unlikely.png_save_uint_16,"ax",@progbits
 1926              	.LCOLDB20:
 1927              		.section	.text.png_save_uint_16,"ax",@progbits
 1928              	.LHOTB20:
 1929              		.p2align 4,,15
 1930              		.globl	png_save_uint_16
 1932              	png_save_uint_16:
 1933              	.LFB57:
  38:fltk-1.3.4-1/png/pngwutil.c ****    buf[0] = (png_byte)((i >> 8) & 0xff);
 1934              		.loc 1 38 0
 1935              		.cfi_startproc
 1936              	.LVL213:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 1937              		.loc 1 39 0
 1938 0000 89F0     		movl	%esi, %eax
  40:fltk-1.3.4-1/png/pngwutil.c **** }
 1939              		.loc 1 40 0
 1940 0002 40887701 		movb	%sil, 1(%rdi)
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 1941              		.loc 1 39 0
 1942 0006 C1E808   		shrl	$8, %eax
 1943 0009 8807     		movb	%al, (%rdi)
  40:fltk-1.3.4-1/png/pngwutil.c **** }
 1944              		.loc 1 40 0
 1945 000b C3       		ret
 1946              		.cfi_endproc
 1947              	.LFE57:
 1949              		.section	.text.unlikely.png_save_uint_16
 1950              	.LCOLDE20:
 1951              		.section	.text.png_save_uint_16
 1952              	.LHOTE20:
 1953              		.section	.text.unlikely.png_write_sig,"ax",@progbits
 1954              	.LCOLDB21:
 1955              		.section	.text.png_write_sig,"ax",@progbits
 1956              	.LHOTB21:
 1957              		.p2align 4,,15
 1958              		.globl	png_write_sig
 1960              	png_write_sig:
 1961              	.LFB58:
  52:fltk-1.3.4-1/png/pngwutil.c ****    png_byte png_signature[8] = {137, 80, 78, 71, 13, 10, 26, 10};
 1962              		.loc 1 52 0
 1963              		.cfi_startproc
 1964              	.LVL214:
 1965 0000 53       		pushq	%rbx
 1966              		.cfi_def_cfa_offset 16
 1967              		.cfi_offset 3, -16
  61:fltk-1.3.4-1/png/pngwutil.c ****       (png_size_t)(8 - png_ptr->sig_bytes));
 1968              		.loc 1 61 0
 1969 0001 BA080000 		movl	$8, %edx
 1969      00
  52:fltk-1.3.4-1/png/pngwutil.c ****    png_byte png_signature[8] = {137, 80, 78, 71, 13, 10, 26, 10};
 1970              		.loc 1 52 0
 1971 0006 4889FB   		movq	%rdi, %rbx
 1972 0009 4883EC10 		subq	$16, %rsp
 1973              		.cfi_def_cfa_offset 32
  57:fltk-1.3.4-1/png/pngwutil.c **** #endif
 1974              		.loc 1 57 0
 1975 000d C787AC04 		movl	$18, 1196(%rdi)
 1975      00001200 
 1975      0000
  52:fltk-1.3.4-1/png/pngwutil.c ****    png_byte png_signature[8] = {137, 80, 78, 71, 13, 10, 26, 10};
 1976              		.loc 1 52 0
 1977 0017 64488B04 		movq	%fs:40, %rax
 1977      25280000 
 1977      00
 1978 0020 48894424 		movq	%rax, 8(%rsp)
 1978      08
 1979 0025 31C0     		xorl	%eax, %eax
  62:fltk-1.3.4-1/png/pngwutil.c **** 
 1980              		.loc 1 62 0
 1981 0027 0FB6877D 		movzbl	637(%rdi), %eax
 1981      020000
  53:fltk-1.3.4-1/png/pngwutil.c **** 
 1982              		.loc 1 53 0
 1983 002e C6042489 		movb	$-119, (%rsp)
 1984 0032 C6442401 		movb	$80, 1(%rsp)
 1984      50
 1985 0037 C6442402 		movb	$78, 2(%rsp)
 1985      4E
 1986 003c C6442403 		movb	$71, 3(%rsp)
 1986      47
 1987 0041 C6442404 		movb	$13, 4(%rsp)
 1987      0D
 1988 0046 C6442405 		movb	$10, 5(%rsp)
 1988      0A
 1989 004b C6442406 		movb	$26, 6(%rsp)
 1989      1A
  61:fltk-1.3.4-1/png/pngwutil.c ****       (png_size_t)(8 - png_ptr->sig_bytes));
 1990              		.loc 1 61 0
 1991 0050 29C2     		subl	%eax, %edx
 1992 0052 488D3404 		leaq	(%rsp,%rax), %rsi
  53:fltk-1.3.4-1/png/pngwutil.c **** 
 1993              		.loc 1 53 0
 1994 0056 C6442407 		movb	$10, 7(%rsp)
 1994      0A
  61:fltk-1.3.4-1/png/pngwutil.c ****       (png_size_t)(8 - png_ptr->sig_bytes));
 1995              		.loc 1 61 0
 1996 005b 4863D2   		movslq	%edx, %rdx
 1997 005e E8000000 		call	png_write_data
 1997      00
 1998              	.LVL215:
  64:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->mode |= PNG_HAVE_PNG_SIGNATURE;
 1999              		.loc 1 64 0
 2000 0063 80BB7D02 		cmpb	$2, 637(%rbx)
 2000      000002
 2001 006a 770A     		ja	.L173
  65:fltk-1.3.4-1/png/pngwutil.c **** }
 2002              		.loc 1 65 0
 2003 006c 818B2C01 		orl	$4096, 300(%rbx)
 2003      00000010 
 2003      0000
 2004              	.L173:
  66:fltk-1.3.4-1/png/pngwutil.c **** 
 2005              		.loc 1 66 0
 2006 0076 488B4424 		movq	8(%rsp), %rax
 2006      08
 2007 007b 64483304 		xorq	%fs:40, %rax
 2007      25280000 
 2007      00
 2008 0084 7506     		jne	.L177
 2009 0086 4883C410 		addq	$16, %rsp
 2010              		.cfi_remember_state
 2011              		.cfi_def_cfa_offset 16
 2012 008a 5B       		popq	%rbx
 2013              		.cfi_def_cfa_offset 8
 2014              	.LVL216:
 2015 008b C3       		ret
 2016              	.LVL217:
 2017              	.L177:
 2018              		.cfi_restore_state
 2019 008c E8000000 		call	__stack_chk_fail
 2019      00
 2020              	.LVL218:
 2021              		.cfi_endproc
 2022              	.LFE58:
 2024              		.section	.text.unlikely.png_write_sig
 2025              	.LCOLDE21:
 2026              		.section	.text.png_write_sig
 2027              	.LHOTE21:
 2028              		.section	.text.unlikely.png_write_chunk_start,"ax",@progbits
 2029              	.LCOLDB22:
 2030              		.section	.text.png_write_chunk_start,"ax",@progbits
 2031              	.LHOTB22:
 2032              		.p2align 4,,15
 2033              		.globl	png_write_chunk_start
 2035              	png_write_chunk_start:
 2036              	.LFB60:
 117:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_header(png_ptr, PNG_CHUNK_FROM_STRING(chunk_string), length);
 2037              		.loc 1 117 0
 2038              		.cfi_startproc
 2039              	.LVL219:
 2040 0000 8B36     		movl	(%rsi), %esi
 2041              	.LVL220:
 2042              	.LBB274:
 2043              	.LBB275:
  83:fltk-1.3.4-1/png/pngwutil.c ****       return;
 2044              		.loc 1 83 0
 2045 0002 4885FF   		testq	%rdi, %rdi
 2046 0005 0FCE     		bswap	%esi
 2047              	.LVL221:
 2048 0007 7407     		je	.L178
 2049 0009 E9000000 		jmp	png_write_chunk_header.part.2
 2049      00
 2050              	.LVL222:
 2051 000e 6690     		.p2align 4,,10
 2052              		.p2align 3
 2053              	.L178:
 2054 0010 F3C3     		rep ret
 2055              	.LBE275:
 2056              	.LBE274:
 2057              		.cfi_endproc
 2058              	.LFE60:
 2060              		.section	.text.unlikely.png_write_chunk_start
 2061              	.LCOLDE22:
 2062              		.section	.text.png_write_chunk_start
 2063              	.LHOTE22:
 2064              		.section	.text.unlikely.png_write_chunk_data,"ax",@progbits
 2065              	.LCOLDB23:
 2066              		.section	.text.png_write_chunk_data,"ax",@progbits
 2067              	.LHOTB23:
 2068              		.p2align 4,,15
 2069              		.globl	png_write_chunk_data
 2071              	png_write_chunk_data:
 2072              	.LFB61:
 129:fltk-1.3.4-1/png/pngwutil.c ****    /* Write the data, and run the CRC over it */
 2073              		.loc 1 129 0
 2074              		.cfi_startproc
 2075              	.LVL223:
 131:fltk-1.3.4-1/png/pngwutil.c ****       return;
 2076              		.loc 1 131 0
 2077 0000 4885FF   		testq	%rdi, %rdi
 2078 0003 7413     		je	.L180
 134:fltk-1.3.4-1/png/pngwutil.c ****    {
 2079              		.loc 1 134 0
 2080 0005 4885F6   		testq	%rsi, %rsi
 2081 0008 740E     		je	.L180
 2082 000a 4885D2   		testq	%rdx, %rdx
 2083 000d 7409     		je	.L180
 2084 000f E9000000 		jmp	png_write_chunk_data.part.3
 2084      00
 2085              	.LVL224:
 2086              		.p2align 4,,10
 2087 0014 0F1F4000 		.p2align 3
 2088              	.L180:
 2089 0018 F3C3     		rep ret
 2090              		.cfi_endproc
 2091              	.LFE61:
 2093              		.section	.text.unlikely.png_write_chunk_data
 2094              	.LCOLDE23:
 2095              		.section	.text.png_write_chunk_data
 2096              	.LHOTE23:
 2097              		.section	.text.unlikely.png_write_chunk_end,"ax",@progbits
 2098              	.LCOLDB24:
 2099              		.section	.text.png_write_chunk_end,"ax",@progbits
 2100              	.LHOTB24:
 2101              		.p2align 4,,15
 2102              		.globl	png_write_chunk_end
 2104              	png_write_chunk_end:
 2105              	.LFB62:
 148:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[4];
 2106              		.loc 1 148 0
 2107              		.cfi_startproc
 2108              	.LVL225:
 151:fltk-1.3.4-1/png/pngwutil.c **** 
 2109              		.loc 1 151 0
 2110 0000 4885FF   		testq	%rdi, %rdi
 2111 0003 740B     		je	.L191
 2112 0005 E9000000 		jmp	png_write_chunk_end.part.4
 2112      00
 2113              	.LVL226:
 2114 000a 660F1F44 		.p2align 4,,10
 2114      0000
 2115              		.p2align 3
 2116              	.L191:
 2117 0010 F3C3     		rep ret
 2118              		.cfi_endproc
 2119              	.LFE62:
 2121              		.section	.text.unlikely.png_write_chunk_end
 2122              	.LCOLDE24:
 2123              		.section	.text.png_write_chunk_end
 2124              	.LHOTE24:
 2125              		.section	.text.unlikely.png_write_chunk,"ax",@progbits
 2126              	.LCOLDB25:
 2127              		.section	.text.png_write_chunk,"ax",@progbits
 2128              	.LHOTB25:
 2129              		.p2align 4,,15
 2130              		.globl	png_write_chunk
 2132              	png_write_chunk:
 2133              	.LFB64:
 195:fltk-1.3.4-1/png/pngwutil.c ****    png_write_complete_chunk(png_ptr, PNG_CHUNK_FROM_STRING(chunk_string), data,
 2134              		.loc 1 195 0
 2135              		.cfi_startproc
 2136              	.LVL227:
 2137 0000 8B36     		movl	(%rsi), %esi
 2138              	.LVL228:
 2139 0002 0FCE     		bswap	%esi
 196:fltk-1.3.4-1/png/pngwutil.c ****       length);
 2140              		.loc 1 196 0
 2141 0004 E9000000 		jmp	png_write_complete_chunk
 2141      00
 2142              	.LVL229:
 2143              		.cfi_endproc
 2144              	.LFE64:
 2146              		.section	.text.unlikely.png_write_chunk
 2147              	.LCOLDE25:
 2148              		.section	.text.png_write_chunk
 2149              	.LHOTE25:
 2150              		.section	.text.unlikely.png_free_buffer_list,"ax",@progbits
 2151              	.LCOLDB26:
 2152              		.section	.text.png_free_buffer_list,"ax",@progbits
 2153              	.LHOTB26:
 2154              		.p2align 4,,15
 2155              		.globl	png_free_buffer_list
 2157              	png_free_buffer_list:
 2158              	.LFB68:
 441:fltk-1.3.4-1/png/pngwutil.c ****    png_compression_bufferp list = *listp;
 2159              		.loc 1 441 0
 2160              		.cfi_startproc
 2161              	.LVL230:
 2162 0000 4889F0   		movq	%rsi, %rax
 442:fltk-1.3.4-1/png/pngwutil.c **** 
 2163              		.loc 1 442 0
 2164 0003 488B36   		movq	(%rsi), %rsi
 2165              	.LVL231:
 444:fltk-1.3.4-1/png/pngwutil.c ****    {
 2166              		.loc 1 444 0
 2167 0006 4885F6   		testq	%rsi, %rsi
 2168 0009 742E     		je	.L201
 441:fltk-1.3.4-1/png/pngwutil.c ****    png_compression_bufferp list = *listp;
 2169              		.loc 1 441 0
 2170 000b 55       		pushq	%rbp
 2171              		.cfi_def_cfa_offset 16
 2172              		.cfi_offset 6, -16
 2173 000c 53       		pushq	%rbx
 2174              		.cfi_def_cfa_offset 24
 2175              		.cfi_offset 3, -24
 2176 000d 4889FD   		movq	%rdi, %rbp
 2177 0010 4883EC08 		subq	$8, %rsp
 2178              		.cfi_def_cfa_offset 32
 446:fltk-1.3.4-1/png/pngwutil.c **** 
 2179              		.loc 1 446 0
 2180 0014 48C70000 		movq	$0, (%rax)
 2180      000000
 2181              	.LVL232:
 2182 001b 0F1F4400 		.p2align 4,,10
 2182      00
 2183              		.p2align 3
 2184              	.L196:
 2185              	.LBB276:
 450:fltk-1.3.4-1/png/pngwutil.c **** 
 2186              		.loc 1 450 0 discriminator 1
 2187 0020 488B1E   		movq	(%rsi), %rbx
 2188              	.LVL233:
 452:fltk-1.3.4-1/png/pngwutil.c ****          list = next;
 2189              		.loc 1 452 0 discriminator 1
 2190 0023 4889EF   		movq	%rbp, %rdi
 2191 0026 E8000000 		call	png_free
 2191      00
 2192              	.LVL234:
 2193              	.LBE276:
 455:fltk-1.3.4-1/png/pngwutil.c ****    }
 2194              		.loc 1 455 0 discriminator 1
 2195 002b 4885DB   		testq	%rbx, %rbx
 2196 002e 4889DE   		movq	%rbx, %rsi
 2197 0031 75ED     		jne	.L196
 457:fltk-1.3.4-1/png/pngwutil.c **** 
 2198              		.loc 1 457 0
 2199 0033 4883C408 		addq	$8, %rsp
 2200              		.cfi_def_cfa_offset 24
 2201 0037 5B       		popq	%rbx
 2202              		.cfi_restore 3
 2203              		.cfi_def_cfa_offset 16
 2204              	.LVL235:
 2205 0038 5D       		popq	%rbp
 2206              		.cfi_restore 6
 2207              		.cfi_def_cfa_offset 8
 2208              	.LVL236:
 2209              	.L201:
 2210 0039 F3C3     		rep ret
 2211              		.cfi_endproc
 2212              	.LFE68:
 2214              		.section	.text.unlikely.png_free_buffer_list
 2215              	.LCOLDE26:
 2216              		.section	.text.png_free_buffer_list
 2217              	.LHOTE26:
 2218              		.section	.rodata.str1.8
 2219              		.align 8
 2220              	.LC27:
 2221 0058 496E7661 		.string	"Invalid bit depth for grayscale image"
 2221      6C696420 
 2221      62697420 
 2221      64657074 
 2221      6820666F 
 2222 007e 0000     		.align 8
 2223              	.LC28:
 2224 0080 496E7661 		.string	"Invalid bit depth for RGB image"
 2224      6C696420 
 2224      62697420 
 2224      64657074 
 2224      6820666F 
 2225              		.align 8
 2226              	.LC29:
 2227 00a0 496E7661 		.string	"Invalid bit depth for paletted image"
 2227      6C696420 
 2227      62697420 
 2227      64657074 
 2227      6820666F 
 2228 00c5 000000   		.align 8
 2229              	.LC30:
 2230 00c8 496E7661 		.string	"Invalid bit depth for grayscale+alpha image"
 2230      6C696420 
 2230      62697420 
 2230      64657074 
 2230      6820666F 
 2231 00f4 00000000 		.align 8
 2232              	.LC31:
 2233 00f8 496E7661 		.string	"Invalid bit depth for RGBA image"
 2233      6C696420 
 2233      62697420 
 2233      64657074 
 2233      6820666F 
 2234 0119 00000000 		.align 8
 2234      000000
 2235              	.LC32:
 2236 0120 496E7661 		.string	"Invalid image color type specified"
 2236      6C696420 
 2236      696D6167 
 2236      6520636F 
 2236      6C6F7220 
 2237 0143 00000000 		.align 8
 2237      00
 2238              	.LC33:
 2239 0148 496E7661 		.string	"Invalid compression type specified"
 2239      6C696420 
 2239      636F6D70 
 2239      72657373 
 2239      696F6E20 
 2240              		.section	.rodata.str1.1
 2241              	.LC34:
 2242 0086 496E7661 		.string	"Invalid filter type specified"
 2242      6C696420 
 2242      66696C74 
 2242      65722074 
 2242      79706520 
 2243              		.section	.rodata.str1.8
 2244 016b 00000000 		.align 8
 2244      00
 2245              	.LC35:
 2246 0170 496E7661 		.string	"Invalid interlace type specified"
 2246      6C696420 
 2246      696E7465 
 2246      726C6163 
 2246      65207479 
 2247              		.section	.text.unlikely.png_write_IHDR,"ax",@progbits
 2248              	.LCOLDB36:
 2249              		.section	.text.png_write_IHDR,"ax",@progbits
 2250              	.LHOTB36:
 2251              		.p2align 4,,15
 2252              		.globl	png_write_IHDR
 2254              	png_write_IHDR:
 2255              	.LFB73:
 750:fltk-1.3.4-1/png/pngwutil.c **** #endif /* WRITE_TEXT || WRITE_pCAL || WRITE_iCCP || WRITE_sPLT */
 751:fltk-1.3.4-1/png/pngwutil.c **** 
 752:fltk-1.3.4-1/png/pngwutil.c **** /* Write the IHDR chunk, and update the png_struct with the necessary
 753:fltk-1.3.4-1/png/pngwutil.c ****  * information.  Note that the rest of this code depends upon this
 754:fltk-1.3.4-1/png/pngwutil.c ****  * information being correct.
 755:fltk-1.3.4-1/png/pngwutil.c ****  */
 756:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
 757:fltk-1.3.4-1/png/pngwutil.c **** png_write_IHDR(png_structrp png_ptr, png_uint_32 width, png_uint_32 height,
 758:fltk-1.3.4-1/png/pngwutil.c ****     int bit_depth, int color_type, int compression_type, int filter_type,
 759:fltk-1.3.4-1/png/pngwutil.c ****     int interlace_type)
 760:fltk-1.3.4-1/png/pngwutil.c **** {
 2256              		.loc 1 760 0
 2257              		.cfi_startproc
 2258              	.LVL237:
 2259 0000 4157     		pushq	%r15
 2260              		.cfi_def_cfa_offset 16
 2261              		.cfi_offset 15, -16
 2262 0002 4156     		pushq	%r14
 2263              		.cfi_def_cfa_offset 24
 2264              		.cfi_offset 14, -24
 2265 0004 4155     		pushq	%r13
 2266              		.cfi_def_cfa_offset 32
 2267              		.cfi_offset 13, -32
 2268 0006 4154     		pushq	%r12
 2269              		.cfi_def_cfa_offset 40
 2270              		.cfi_offset 12, -40
 2271 0008 55       		pushq	%rbp
 2272              		.cfi_def_cfa_offset 48
 2273              		.cfi_offset 6, -48
 2274 0009 53       		pushq	%rbx
 2275              		.cfi_def_cfa_offset 56
 2276              		.cfi_offset 3, -56
 2277 000a 4889FB   		movq	%rdi, %rbx
 2278 000d 4883EC28 		subq	$40, %rsp
 2279              		.cfi_def_cfa_offset 96
 2280              		.loc 1 760 0
 2281 0011 64488B04 		movq	%fs:40, %rax
 2281      25280000 
 2281      00
 2282 001a 48894424 		movq	%rax, 24(%rsp)
 2282      18
 2283 001f 31C0     		xorl	%eax, %eax
 761:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[13]; /* Buffer to store the IHDR info */
 762:fltk-1.3.4-1/png/pngwutil.c **** 
 763:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_write_IHDR");
 764:fltk-1.3.4-1/png/pngwutil.c **** 
 765:fltk-1.3.4-1/png/pngwutil.c ****    /* Check that we have valid input data from the application info */
 766:fltk-1.3.4-1/png/pngwutil.c ****    switch (color_type)
 2284              		.loc 1 766 0
 2285 0021 4183F806 		cmpl	$6, %r8d
 2286 0025 0F876502 		ja	.L203
 2286      0000
 2287 002b 4489C0   		movl	%r8d, %eax
 2288 002e 89F5     		movl	%esi, %ebp
 2289 0030 4189D5   		movl	%edx, %r13d
 2290 0033 4189CC   		movl	%ecx, %r12d
 2291 0036 4589C6   		movl	%r8d, %r14d
 2292 0039 FF24C500 		jmp	*.L205(,%rax,8)
 2292      000000
 2293              		.section	.rodata.png_write_IHDR,"a",@progbits
 2294              		.align 8
 2295              		.align 4
 2296              	.L205:
 2297 0000 00000000 		.quad	.L204
 2297      00000000 
 2298 0008 00000000 		.quad	.L203
 2298      00000000 
 2299 0010 00000000 		.quad	.L206
 2299      00000000 
 2300 0018 00000000 		.quad	.L207
 2300      00000000 
 2301 0020 00000000 		.quad	.L208
 2301      00000000 
 2302 0028 00000000 		.quad	.L203
 2302      00000000 
 2303 0030 00000000 		.quad	.L209
 2303      00000000 
 2304              		.section	.text.png_write_IHDR
 2305              		.p2align 4,,10
 2306              		.p2align 3
 2307              	.L209:
 767:fltk-1.3.4-1/png/pngwutil.c ****    {
 768:fltk-1.3.4-1/png/pngwutil.c ****       case PNG_COLOR_TYPE_GRAY:
 769:fltk-1.3.4-1/png/pngwutil.c ****          switch (bit_depth)
 770:fltk-1.3.4-1/png/pngwutil.c ****          {
 771:fltk-1.3.4-1/png/pngwutil.c ****             case 1:
 772:fltk-1.3.4-1/png/pngwutil.c ****             case 2:
 773:fltk-1.3.4-1/png/pngwutil.c ****             case 4:
 774:fltk-1.3.4-1/png/pngwutil.c ****             case 8:
 775:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_16BIT_SUPPORTED
 776:fltk-1.3.4-1/png/pngwutil.c ****             case 16:
 777:fltk-1.3.4-1/png/pngwutil.c **** #endif
 778:fltk-1.3.4-1/png/pngwutil.c ****                png_ptr->channels = 1; break;
 779:fltk-1.3.4-1/png/pngwutil.c **** 
 780:fltk-1.3.4-1/png/pngwutil.c ****             default:
 781:fltk-1.3.4-1/png/pngwutil.c ****                png_error(png_ptr,
 782:fltk-1.3.4-1/png/pngwutil.c ****                    "Invalid bit depth for grayscale image");
 783:fltk-1.3.4-1/png/pngwutil.c ****          }
 784:fltk-1.3.4-1/png/pngwutil.c ****          break;
 785:fltk-1.3.4-1/png/pngwutil.c **** 
 786:fltk-1.3.4-1/png/pngwutil.c ****       case PNG_COLOR_TYPE_RGB:
 787:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_16BIT_SUPPORTED
 788:fltk-1.3.4-1/png/pngwutil.c ****          if (bit_depth != 8 && bit_depth != 16)
 789:fltk-1.3.4-1/png/pngwutil.c **** #else
 790:fltk-1.3.4-1/png/pngwutil.c ****          if (bit_depth != 8)
 791:fltk-1.3.4-1/png/pngwutil.c **** #endif
 792:fltk-1.3.4-1/png/pngwutil.c ****             png_error(png_ptr, "Invalid bit depth for RGB image");
 793:fltk-1.3.4-1/png/pngwutil.c **** 
 794:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->channels = 3;
 795:fltk-1.3.4-1/png/pngwutil.c ****          break;
 796:fltk-1.3.4-1/png/pngwutil.c **** 
 797:fltk-1.3.4-1/png/pngwutil.c ****       case PNG_COLOR_TYPE_PALETTE:
 798:fltk-1.3.4-1/png/pngwutil.c ****          switch (bit_depth)
 799:fltk-1.3.4-1/png/pngwutil.c ****          {
 800:fltk-1.3.4-1/png/pngwutil.c ****             case 1:
 801:fltk-1.3.4-1/png/pngwutil.c ****             case 2:
 802:fltk-1.3.4-1/png/pngwutil.c ****             case 4:
 803:fltk-1.3.4-1/png/pngwutil.c ****             case 8:
 804:fltk-1.3.4-1/png/pngwutil.c ****                png_ptr->channels = 1;
 805:fltk-1.3.4-1/png/pngwutil.c ****                break;
 806:fltk-1.3.4-1/png/pngwutil.c **** 
 807:fltk-1.3.4-1/png/pngwutil.c ****             default:
 808:fltk-1.3.4-1/png/pngwutil.c ****                png_error(png_ptr, "Invalid bit depth for paletted image");
 809:fltk-1.3.4-1/png/pngwutil.c ****          }
 810:fltk-1.3.4-1/png/pngwutil.c ****          break;
 811:fltk-1.3.4-1/png/pngwutil.c **** 
 812:fltk-1.3.4-1/png/pngwutil.c ****       case PNG_COLOR_TYPE_GRAY_ALPHA:
 813:fltk-1.3.4-1/png/pngwutil.c ****          if (bit_depth != 8 && bit_depth != 16)
 814:fltk-1.3.4-1/png/pngwutil.c ****             png_error(png_ptr, "Invalid bit depth for grayscale+alpha image");
 815:fltk-1.3.4-1/png/pngwutil.c **** 
 816:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->channels = 2;
 817:fltk-1.3.4-1/png/pngwutil.c ****          break;
 818:fltk-1.3.4-1/png/pngwutil.c **** 
 819:fltk-1.3.4-1/png/pngwutil.c ****       case PNG_COLOR_TYPE_RGB_ALPHA:
 820:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_16BIT_SUPPORTED
 821:fltk-1.3.4-1/png/pngwutil.c ****          if (bit_depth != 8 && bit_depth != 16)
 2308              		.loc 1 821 0
 2309 0040 8D41F8   		leal	-8(%rcx), %eax
 2310 0043 83E0F7   		andl	$-9, %eax
 2311 0046 0F85D202 		jne	.L246
 2311      0000
 822:fltk-1.3.4-1/png/pngwutil.c **** #else
 823:fltk-1.3.4-1/png/pngwutil.c ****          if (bit_depth != 8)
 824:fltk-1.3.4-1/png/pngwutil.c **** #endif
 825:fltk-1.3.4-1/png/pngwutil.c ****             png_error(png_ptr, "Invalid bit depth for RGBA image");
 826:fltk-1.3.4-1/png/pngwutil.c **** 
 827:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->channels = 4;
 2312              		.loc 1 827 0
 2313 004c C6877B02 		movb	$4, 635(%rdi)
 2313      000004
 2314              	.LVL238:
 2315              	.L211:
 828:fltk-1.3.4-1/png/pngwutil.c ****          break;
 829:fltk-1.3.4-1/png/pngwutil.c **** 
 830:fltk-1.3.4-1/png/pngwutil.c ****       default:
 831:fltk-1.3.4-1/png/pngwutil.c ****          png_error(png_ptr, "Invalid image color type specified");
 832:fltk-1.3.4-1/png/pngwutil.c ****    }
 833:fltk-1.3.4-1/png/pngwutil.c **** 
 834:fltk-1.3.4-1/png/pngwutil.c ****    if (compression_type != PNG_COMPRESSION_TYPE_BASE)
 2316              		.loc 1 834 0
 2317 0053 4585C9   		testl	%r9d, %r9d
 2318 0056 0F85C001 		jne	.L247
 2318      0000
 2319              	.LVL239:
 2320              	.L216:
 835:fltk-1.3.4-1/png/pngwutil.c ****    {
 836:fltk-1.3.4-1/png/pngwutil.c ****       png_warning(png_ptr, "Invalid compression type specified");
 837:fltk-1.3.4-1/png/pngwutil.c ****       compression_type = PNG_COMPRESSION_TYPE_BASE;
 838:fltk-1.3.4-1/png/pngwutil.c ****    }
 839:fltk-1.3.4-1/png/pngwutil.c **** 
 840:fltk-1.3.4-1/png/pngwutil.c ****    /* Write filter_method 64 (intrapixel differencing) only if
 841:fltk-1.3.4-1/png/pngwutil.c ****     * 1. Libpng was compiled with PNG_MNG_FEATURES_SUPPORTED and
 842:fltk-1.3.4-1/png/pngwutil.c ****     * 2. Libpng did not write a PNG signature (this filter_method is only
 843:fltk-1.3.4-1/png/pngwutil.c ****     *    used in PNG datastreams that are embedded in MNG datastreams) and
 844:fltk-1.3.4-1/png/pngwutil.c ****     * 3. The application called png_permit_mng_features with a mask that
 845:fltk-1.3.4-1/png/pngwutil.c ****     *    included PNG_FLAG_MNG_FILTER_64 and
 846:fltk-1.3.4-1/png/pngwutil.c ****     * 4. The filter_method is 64 and
 847:fltk-1.3.4-1/png/pngwutil.c ****     * 5. The color_type is RGB or RGBA
 848:fltk-1.3.4-1/png/pngwutil.c ****     */
 849:fltk-1.3.4-1/png/pngwutil.c ****    if (
 2321              		.loc 1 849 0
 2322 005c F6831804 		testb	$4, 1048(%rbx)
 2322      000004
 2323 0063 742B     		je	.L217
 850:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_MNG_FEATURES_SUPPORTED
 851:fltk-1.3.4-1/png/pngwutil.c ****        !((png_ptr->mng_features_permitted & PNG_FLAG_MNG_FILTER_64) != 0 &&
 2324              		.loc 1 851 0
 2325 0065 F6832D01 		testb	$16, 301(%rbx)
 2325      000010
 2326 006c 7522     		jne	.L217
 2327 006e 4489F0   		movl	%r14d, %eax
 2328 0071 83E0FB   		andl	$-5, %eax
 2329 0074 83F802   		cmpl	$2, %eax
 2330 0077 7517     		jne	.L217
 2331 0079 837C2460 		cmpl	$64, 96(%rsp)
 2331      40
 2332 007e 41BF4000 		movl	$64, %r15d
 2332      0000
 2333 0084 7419     		je	.L218
 2334 0086 662E0F1F 		.p2align 4,,10
 2334      84000000 
 2334      0000
 2335              		.p2align 3
 2336              	.L217:
 852:fltk-1.3.4-1/png/pngwutil.c ****        ((png_ptr->mode & PNG_HAVE_PNG_SIGNATURE) == 0) &&
 853:fltk-1.3.4-1/png/pngwutil.c ****        (color_type == PNG_COLOR_TYPE_RGB ||
 854:fltk-1.3.4-1/png/pngwutil.c ****         color_type == PNG_COLOR_TYPE_RGB_ALPHA) &&
 855:fltk-1.3.4-1/png/pngwutil.c ****        (filter_type == PNG_INTRAPIXEL_DIFFERENCING)) &&
 2337              		.loc 1 855 0
 2338 0090 8B442460 		movl	96(%rsp), %eax
 2339 0094 4531FF   		xorl	%r15d, %r15d
 2340 0097 85C0     		testl	%eax, %eax
 2341 0099 0F855102 		jne	.L248
 2341      0000
 2342              	.LVL240:
 2343              	.L218:
 856:fltk-1.3.4-1/png/pngwutil.c **** #endif
 857:fltk-1.3.4-1/png/pngwutil.c ****        filter_type != PNG_FILTER_TYPE_BASE)
 858:fltk-1.3.4-1/png/pngwutil.c ****    {
 859:fltk-1.3.4-1/png/pngwutil.c ****       png_warning(png_ptr, "Invalid filter type specified");
 860:fltk-1.3.4-1/png/pngwutil.c ****       filter_type = PNG_FILTER_TYPE_BASE;
 861:fltk-1.3.4-1/png/pngwutil.c ****    }
 862:fltk-1.3.4-1/png/pngwutil.c **** 
 863:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_INTERLACING_SUPPORTED
 864:fltk-1.3.4-1/png/pngwutil.c ****    if (interlace_type != PNG_INTERLACE_NONE &&
 2344              		.loc 1 864 0
 2345 009f 837C2468 		cmpl	$1, 104(%rsp)
 2345      01
 2346 00a4 0F87F601 		ja	.L220
 2346      0000
 2347 00aa 0FB64C24 		movzbl	104(%rsp), %ecx
 2347      68
 2348              	.LVL241:
 2349              	.L221:
 865:fltk-1.3.4-1/png/pngwutil.c ****        interlace_type != PNG_INTERLACE_ADAM7)
 866:fltk-1.3.4-1/png/pngwutil.c ****    {
 867:fltk-1.3.4-1/png/pngwutil.c ****       png_warning(png_ptr, "Invalid interlace type specified");
 868:fltk-1.3.4-1/png/pngwutil.c ****       interlace_type = PNG_INTERLACE_ADAM7;
 869:fltk-1.3.4-1/png/pngwutil.c ****    }
 870:fltk-1.3.4-1/png/pngwutil.c **** #else
 871:fltk-1.3.4-1/png/pngwutil.c ****    interlace_type=PNG_INTERLACE_NONE;
 872:fltk-1.3.4-1/png/pngwutil.c **** #endif
 873:fltk-1.3.4-1/png/pngwutil.c **** 
 874:fltk-1.3.4-1/png/pngwutil.c ****    /* Save the relevent information */
 875:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->bit_depth = (png_byte)bit_depth;
 876:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->color_type = (png_byte)color_type;
 877:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->interlaced = (png_byte)interlace_type;
 878:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_MNG_FEATURES_SUPPORTED
 879:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->filter_type = (png_byte)filter_type;
 880:fltk-1.3.4-1/png/pngwutil.c **** #endif
 881:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->compression_type = (png_byte)compression_type;
 882:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->width = width;
 883:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->height = height;
 884:fltk-1.3.4-1/png/pngwutil.c **** 
 885:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->pixel_depth = (png_byte)(bit_depth * png_ptr->channels);
 2350              		.loc 1 885 0
 2351 00af 0FB6BB7B 		movzbl	635(%rbx), %edi
 2351      020000
 875:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->color_type = (png_byte)color_type;
 2352              		.loc 1 875 0
 2353 00b6 4488A378 		movb	%r12b, 632(%rbx)
 2353      020000
 876:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->interlaced = (png_byte)interlace_type;
 2354              		.loc 1 876 0
 2355 00bd 4488B377 		movb	%r14b, 631(%rbx)
 2355      020000
 877:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_MNG_FEATURES_SUPPORTED
 2356              		.loc 1 877 0
 2357 00c4 888B7402 		movb	%cl, 628(%rbx)
 2357      0000
 879:fltk-1.3.4-1/png/pngwutil.c **** #endif
 2358              		.loc 1 879 0
 2359 00ca 4488BB1C 		movb	%r15b, 1052(%rbx)
 2359      040000
 881:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->width = width;
 2360              		.loc 1 881 0
 2361 00d1 C6835804 		movb	$0, 1112(%rbx)
 2361      000000
 882:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->height = height;
 2362              		.loc 1 882 0
 2363 00d8 89ABF801 		movl	%ebp, 504(%rbx)
 2363      0000
 883:fltk-1.3.4-1/png/pngwutil.c **** 
 2364              		.loc 1 883 0
 2365 00de 4489ABFC 		movl	%r13d, 508(%rbx)
 2365      010000
 2366              		.loc 1 885 0
 2367 00e5 89F8     		movl	%edi, %eax
 2368 00e7 410FAFC4 		imull	%r12d, %eax
 886:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->rowbytes = PNG_ROWBYTES(png_ptr->pixel_depth, width);
 2369              		.loc 1 886 0
 2370 00eb 3C07     		cmpb	$7, %al
 885:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->rowbytes = PNG_ROWBYTES(png_ptr->pixel_depth, width);
 2371              		.loc 1 885 0
 2372 00ed 88837A02 		movb	%al, 634(%rbx)
 2372      0000
 2373              		.loc 1 886 0
 2374 00f3 0F86C701 		jbe	.L222
 2374      0000
 2375              		.loc 1 886 0 is_stmt 0 discriminator 1
 2376 00f9 C0E803   		shrb	$3, %al
 2377 00fc 89EA     		movl	%ebp, %edx
 2378 00fe 0FB6C0   		movzbl	%al, %eax
 2379 0101 480FAFC2 		imulq	%rdx, %rax
 2380              	.L223:
 2381              		.loc 1 886 0 discriminator 4
 2382 0105 48898308 		movq	%rax, 520(%rbx)
 2382      020000
 2383              	.LBB277:
 2384              	.LBB278:
  26:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)((i >> 16) & 0xff);
 2385              		.loc 1 26 0 is_stmt 1 discriminator 4
 2386 010c 89E8     		movl	%ebp, %eax
 2387              	.LBE278:
 2388              	.LBE277:
 887:fltk-1.3.4-1/png/pngwutil.c ****    /* Set the usr info, so any transformations can modify it */
 888:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->usr_width = png_ptr->width;
 889:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->usr_bit_depth = png_ptr->bit_depth;
 890:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->usr_channels = png_ptr->channels;
 2389              		.loc 1 890 0 discriminator 4
 2390 010e 4088BB7C 		movb	%dil, 636(%rbx)
 2390      020000
 2391              	.LVL242:
 2392              	.LBB285:
 2393              	.LBB279:
  26:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)((i >> 16) & 0xff);
 2394              		.loc 1 26 0 discriminator 4
 2395 0115 C1E818   		shrl	$24, %eax
 2396              	.LVL243:
 2397              	.LBE279:
 2398              	.LBE285:
 891:fltk-1.3.4-1/png/pngwutil.c **** 
 892:fltk-1.3.4-1/png/pngwutil.c ****    /* Pack the header information into the buffer */
 893:fltk-1.3.4-1/png/pngwutil.c ****    png_save_uint_32(buf, width);
 894:fltk-1.3.4-1/png/pngwutil.c ****    png_save_uint_32(buf + 4, height);
 895:fltk-1.3.4-1/png/pngwutil.c ****    buf[8] = (png_byte)bit_depth;
 896:fltk-1.3.4-1/png/pngwutil.c ****    buf[9] = (png_byte)color_type;
 897:fltk-1.3.4-1/png/pngwutil.c ****    buf[10] = (png_byte)compression_type;
 898:fltk-1.3.4-1/png/pngwutil.c ****    buf[11] = (png_byte)filter_type;
 899:fltk-1.3.4-1/png/pngwutil.c ****    buf[12] = (png_byte)interlace_type;
 2399              		.loc 1 899 0 discriminator 4
 2400 0118 884C240C 		movb	%cl, 12(%rsp)
 888:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->usr_bit_depth = png_ptr->bit_depth;
 2401              		.loc 1 888 0 discriminator 4
 2402 011c 89AB0402 		movl	%ebp, 516(%rbx)
 2402      0000
 2403              	.LBB286:
 2404              	.LBB280:
  26:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)((i >> 16) & 0xff);
 2405              		.loc 1 26 0 discriminator 4
 2406 0122 880424   		movb	%al, (%rsp)
  27:fltk-1.3.4-1/png/pngwutil.c ****    buf[2] = (png_byte)((i >> 8) & 0xff);
 2407              		.loc 1 27 0 discriminator 4
 2408 0125 89E8     		movl	%ebp, %eax
 2409              	.LBE280:
 2410              	.LBE286:
 889:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->usr_channels = png_ptr->channels;
 2411              		.loc 1 889 0 discriminator 4
 2412 0127 4488A379 		movb	%r12b, 633(%rbx)
 2412      020000
 2413              	.LBB287:
 2414              	.LBB281:
  27:fltk-1.3.4-1/png/pngwutil.c ****    buf[2] = (png_byte)((i >> 8) & 0xff);
 2415              		.loc 1 27 0 discriminator 4
 2416 012e C1E810   		shrl	$16, %eax
 2417              	.LBE281:
 2418              	.LBE287:
 900:fltk-1.3.4-1/png/pngwutil.c **** 
 901:fltk-1.3.4-1/png/pngwutil.c ****    /* Write the chunk */
 902:fltk-1.3.4-1/png/pngwutil.c ****    png_write_complete_chunk(png_ptr, png_IHDR, buf, (png_size_t)13);
 2419              		.loc 1 902 0 discriminator 4
 2420 0131 B90D0000 		movl	$13, %ecx
 2420      00
 2421 0136 4889E2   		movq	%rsp, %rdx
 2422              	.LBB288:
 2423              	.LBB282:
  27:fltk-1.3.4-1/png/pngwutil.c ****    buf[2] = (png_byte)((i >> 8) & 0xff);
 2424              		.loc 1 27 0 discriminator 4
 2425 0139 88442401 		movb	%al, 1(%rsp)
  28:fltk-1.3.4-1/png/pngwutil.c ****    buf[3] = (png_byte)(i & 0xff);
 2426              		.loc 1 28 0 discriminator 4
 2427 013d 89E8     		movl	%ebp, %eax
 2428              	.LBE282:
 2429              	.LBE288:
 2430              		.loc 1 902 0 discriminator 4
 2431 013f BE524448 		movl	$1229472850, %esi
 2431      49
 2432              	.LBB289:
 2433              	.LBB283:
  28:fltk-1.3.4-1/png/pngwutil.c ****    buf[3] = (png_byte)(i & 0xff);
 2434              		.loc 1 28 0 discriminator 4
 2435 0144 C1E808   		shrl	$8, %eax
 2436              	.LBE283:
 2437              	.LBE289:
 2438              		.loc 1 902 0 discriminator 4
 2439 0147 4889DF   		movq	%rbx, %rdi
 2440              	.LBB290:
 2441              	.LBB284:
  29:fltk-1.3.4-1/png/pngwutil.c **** }
 2442              		.loc 1 29 0 discriminator 4
 2443 014a 40886C24 		movb	%bpl, 3(%rsp)
 2443      03
 2444              	.LVL244:
  28:fltk-1.3.4-1/png/pngwutil.c ****    buf[3] = (png_byte)(i & 0xff);
 2445              		.loc 1 28 0 discriminator 4
 2446 014f 88442402 		movb	%al, 2(%rsp)
 2447              	.LBE284:
 2448              	.LBE290:
 2449              	.LBB291:
 2450              	.LBB292:
  26:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)((i >> 16) & 0xff);
 2451              		.loc 1 26 0 discriminator 4
 2452 0153 4489E8   		movl	%r13d, %eax
  29:fltk-1.3.4-1/png/pngwutil.c **** }
 2453              		.loc 1 29 0 discriminator 4
 2454 0156 44886C24 		movb	%r13b, 7(%rsp)
 2454      07
 2455              	.LVL245:
  26:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)((i >> 16) & 0xff);
 2456              		.loc 1 26 0 discriminator 4
 2457 015b C1E818   		shrl	$24, %eax
 2458              	.LBE292:
 2459              	.LBE291:
 895:fltk-1.3.4-1/png/pngwutil.c ****    buf[9] = (png_byte)color_type;
 2460              		.loc 1 895 0 discriminator 4
 2461 015e 44886424 		movb	%r12b, 8(%rsp)
 2461      08
 896:fltk-1.3.4-1/png/pngwutil.c ****    buf[10] = (png_byte)compression_type;
 2462              		.loc 1 896 0 discriminator 4
 2463 0163 44887424 		movb	%r14b, 9(%rsp)
 2463      09
 2464              	.LBB296:
 2465              	.LBB293:
  26:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)((i >> 16) & 0xff);
 2466              		.loc 1 26 0 discriminator 4
 2467 0168 88442404 		movb	%al, 4(%rsp)
  27:fltk-1.3.4-1/png/pngwutil.c ****    buf[2] = (png_byte)((i >> 8) & 0xff);
 2468              		.loc 1 27 0 discriminator 4
 2469 016c 4489E8   		movl	%r13d, %eax
 2470              	.LBE293:
 2471              	.LBE296:
 897:fltk-1.3.4-1/png/pngwutil.c ****    buf[11] = (png_byte)filter_type;
 2472              		.loc 1 897 0 discriminator 4
 2473 016f C644240A 		movb	$0, 10(%rsp)
 2473      00
 2474              	.LBB297:
 2475              	.LBB294:
  27:fltk-1.3.4-1/png/pngwutil.c ****    buf[2] = (png_byte)((i >> 8) & 0xff);
 2476              		.loc 1 27 0 discriminator 4
 2477 0174 C1E810   		shrl	$16, %eax
 2478              	.LBE294:
 2479              	.LBE297:
 898:fltk-1.3.4-1/png/pngwutil.c ****    buf[12] = (png_byte)interlace_type;
 2480              		.loc 1 898 0 discriminator 4
 2481 0177 44887C24 		movb	%r15b, 11(%rsp)
 2481      0B
 2482              	.LBB298:
 2483              	.LBB295:
  27:fltk-1.3.4-1/png/pngwutil.c ****    buf[2] = (png_byte)((i >> 8) & 0xff);
 2484              		.loc 1 27 0 discriminator 4
 2485 017c 88442405 		movb	%al, 5(%rsp)
  28:fltk-1.3.4-1/png/pngwutil.c ****    buf[3] = (png_byte)(i & 0xff);
 2486              		.loc 1 28 0 discriminator 4
 2487 0180 4489E8   		movl	%r13d, %eax
 2488 0183 C1E808   		shrl	$8, %eax
 2489 0186 88442406 		movb	%al, 6(%rsp)
 2490              	.LBE295:
 2491              	.LBE298:
 2492              		.loc 1 902 0 discriminator 4
 2493 018a E8000000 		call	png_write_complete_chunk
 2493      00
 2494              	.LVL246:
 903:fltk-1.3.4-1/png/pngwutil.c **** 
 904:fltk-1.3.4-1/png/pngwutil.c ****    if ((png_ptr->do_filter) == PNG_NO_FILTERS)
 2495              		.loc 1 904 0 discriminator 4
 2496 018f 80BB7602 		cmpb	$0, 630(%rbx)
 2496      000000
 2497 0196 7521     		jne	.L224
 905:fltk-1.3.4-1/png/pngwutil.c ****    {
 906:fltk-1.3.4-1/png/pngwutil.c ****       if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE ||
 2498              		.loc 1 906 0
 2499 0198 80BB7702 		cmpb	$3, 631(%rbx)
 2499      000003
 2500 019f 0F843B01 		je	.L225
 2500      0000
 2501              		.loc 1 906 0 is_stmt 0 discriminator 1
 2502 01a5 80BB7802 		cmpb	$7, 632(%rbx)
 2502      000007
 2503 01ac 0F862E01 		jbe	.L225
 2503      0000
 907:fltk-1.3.4-1/png/pngwutil.c ****           png_ptr->bit_depth < 8)
 908:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->do_filter = PNG_FILTER_NONE;
 909:fltk-1.3.4-1/png/pngwutil.c **** 
 910:fltk-1.3.4-1/png/pngwutil.c ****       else
 911:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->do_filter = PNG_ALL_FILTERS;
 2504              		.loc 1 911 0 is_stmt 1
 2505 01b2 C6837602 		movb	$-8, 630(%rbx)
 2505      0000F8
 2506              	.L224:
 912:fltk-1.3.4-1/png/pngwutil.c ****    }
 913:fltk-1.3.4-1/png/pngwutil.c **** 
 914:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->mode = PNG_HAVE_IHDR; /* not READY_FOR_ZTXT */
 915:fltk-1.3.4-1/png/pngwutil.c **** }
 2507              		.loc 1 915 0
 2508 01b9 488B4424 		movq	24(%rsp), %rax
 2508      18
 2509 01be 64483304 		xorq	%fs:40, %rax
 2509      25280000 
 2509      00
 914:fltk-1.3.4-1/png/pngwutil.c **** }
 2510              		.loc 1 914 0
 2511 01c7 C7832C01 		movl	$1, 300(%rbx)
 2511      00000100 
 2511      0000
 2512              		.loc 1 915 0
 2513 01d1 0F852B01 		jne	.L249
 2513      0000
 2514 01d7 4883C428 		addq	$40, %rsp
 2515              		.cfi_remember_state
 2516              		.cfi_def_cfa_offset 56
 2517 01db 5B       		popq	%rbx
 2518              		.cfi_def_cfa_offset 48
 2519              	.LVL247:
 2520 01dc 5D       		popq	%rbp
 2521              		.cfi_def_cfa_offset 40
 2522              	.LVL248:
 2523 01dd 415C     		popq	%r12
 2524              		.cfi_def_cfa_offset 32
 2525              	.LVL249:
 2526 01df 415D     		popq	%r13
 2527              		.cfi_def_cfa_offset 24
 2528              	.LVL250:
 2529 01e1 415E     		popq	%r14
 2530              		.cfi_def_cfa_offset 16
 2531              	.LVL251:
 2532 01e3 415F     		popq	%r15
 2533              		.cfi_def_cfa_offset 8
 2534 01e5 C3       		ret
 2535              	.LVL252:
 2536 01e6 662E0F1F 		.p2align 4,,10
 2536      84000000 
 2536      0000
 2537              		.p2align 3
 2538              	.L204:
 2539              		.cfi_restore_state
 2540 01f0 83F910   		cmpl	$16, %ecx
 2541 01f3 0F871801 		ja	.L210
 2541      0000
 2542 01f9 B8010000 		movl	$1, %eax
 2542      00
 2543 01fe 48D3E0   		salq	%cl, %rax
 2544 0201 A9160101 		testl	$65814, %eax
 2544      00
 2545 0206 0F840501 		je	.L210
 2545      0000
 2546              	.L245:
 834:fltk-1.3.4-1/png/pngwutil.c ****    {
 2547              		.loc 1 834 0
 2548 020c 4585C9   		testl	%r9d, %r9d
 804:fltk-1.3.4-1/png/pngwutil.c ****                break;
 2549              		.loc 1 804 0
 2550 020f C6837B02 		movb	$1, 635(%rbx)
 2550      000001
 834:fltk-1.3.4-1/png/pngwutil.c ****    {
 2551              		.loc 1 834 0
 2552 0216 0F8440FE 		je	.L216
 2552      FFFF
 2553              	.L247:
 836:fltk-1.3.4-1/png/pngwutil.c ****       compression_type = PNG_COMPRESSION_TYPE_BASE;
 2554              		.loc 1 836 0
 2555 021c BE000000 		movl	$.LC33, %esi
 2555      00
 2556              	.LVL253:
 2557 0221 4889DF   		movq	%rbx, %rdi
 2558 0224 E8000000 		call	png_warning
 2558      00
 2559              	.LVL254:
 2560 0229 E92EFEFF 		jmp	.L216
 2560      FF
 2561              	.LVL255:
 2562 022e 6690     		.p2align 4,,10
 2563              		.p2align 3
 2564              	.L206:
 788:fltk-1.3.4-1/png/pngwutil.c **** #else
 2565              		.loc 1 788 0
 2566 0230 8D41F8   		leal	-8(%rcx), %eax
 2567 0233 83E0F7   		andl	$-9, %eax
 2568 0236 0F85CB00 		jne	.L250
 2568      0000
 794:fltk-1.3.4-1/png/pngwutil.c ****          break;
 2569              		.loc 1 794 0
 2570 023c C6877B02 		movb	$3, 635(%rdi)
 2570      000003
 795:fltk-1.3.4-1/png/pngwutil.c **** 
 2571              		.loc 1 795 0
 2572 0243 E90BFEFF 		jmp	.L211
 2572      FF
 2573 0248 0F1F8400 		.p2align 4,,10
 2573      00000000 
 2574              		.p2align 3
 2575              	.L207:
 2576 0250 83F908   		cmpl	$8, %ecx
 2577 0253 770F     		ja	.L213
 2578 0255 B8010000 		movl	$1, %eax
 2578      00
 2579 025a 48D3E0   		salq	%cl, %rax
 2580 025d A9160100 		testl	$278, %eax
 2580      00
 2581 0262 75A8     		jne	.L245
 2582              	.L213:
 808:fltk-1.3.4-1/png/pngwutil.c ****          }
 2583              		.loc 1 808 0
 2584 0264 BE000000 		movl	$.LC29, %esi
 2584      00
 2585              	.LVL256:
 2586 0269 4889DF   		movq	%rbx, %rdi
 2587 026c E8000000 		call	png_error
 2587      00
 2588              	.LVL257:
 2589              		.p2align 4,,10
 2590 0271 0F1F8000 		.p2align 3
 2590      000000
 2591              	.L208:
 813:fltk-1.3.4-1/png/pngwutil.c ****             png_error(png_ptr, "Invalid bit depth for grayscale+alpha image");
 2592              		.loc 1 813 0
 2593 0278 8D41F8   		leal	-8(%rcx), %eax
 2594 027b 83E0F7   		andl	$-9, %eax
 2595 027e 0F85A400 		jne	.L251
 2595      0000
 816:fltk-1.3.4-1/png/pngwutil.c ****          break;
 2596              		.loc 1 816 0
 2597 0284 C6877B02 		movb	$2, 635(%rdi)
 2597      000002
 817:fltk-1.3.4-1/png/pngwutil.c **** 
 2598              		.loc 1 817 0
 2599 028b E9C3FDFF 		jmp	.L211
 2599      FF
 2600              		.p2align 4,,10
 2601              		.p2align 3
 2602              	.L203:
 831:fltk-1.3.4-1/png/pngwutil.c ****    }
 2603              		.loc 1 831 0
 2604 0290 BE000000 		movl	$.LC32, %esi
 2604      00
 2605              	.LVL258:
 2606 0295 4889DF   		movq	%rbx, %rdi
 2607 0298 E8000000 		call	png_error
 2607      00
 2608              	.LVL259:
 2609 029d 0F1F00   		.p2align 4,,10
 2610              		.p2align 3
 2611              	.L220:
 867:fltk-1.3.4-1/png/pngwutil.c ****       interlace_type = PNG_INTERLACE_ADAM7;
 2612              		.loc 1 867 0
 2613 02a0 BE000000 		movl	$.LC35, %esi
 2613      00
 2614 02a5 4889DF   		movq	%rbx, %rdi
 2615 02a8 E8000000 		call	png_warning
 2615      00
 2616              	.LVL260:
 2617 02ad B9010000 		movl	$1, %ecx
 2617      00
 2618 02b2 E9F8FDFF 		jmp	.L221
 2618      FF
 2619              	.LVL261:
 2620 02b7 660F1F84 		.p2align 4,,10
 2620      00000000 
 2620      00
 2621              		.p2align 3
 2622              	.L222:
 886:fltk-1.3.4-1/png/pngwutil.c ****    /* Set the usr info, so any transformations can modify it */
 2623              		.loc 1 886 0 discriminator 2
 2624 02c0 89EA     		movl	%ebp, %edx
 2625 02c2 0FB6F0   		movzbl	%al, %esi
 2626 02c5 4889D0   		movq	%rdx, %rax
 2627 02c8 480FAFC6 		imulq	%rsi, %rax
 2628 02cc 4883C007 		addq	$7, %rax
 2629 02d0 48C1E803 		shrq	$3, %rax
 2630 02d4 E92CFEFF 		jmp	.L223
 2630      FF
 2631 02d9 0F1F8000 		.p2align 4,,10
 2631      000000
 2632              		.p2align 3
 2633              	.L225:
 908:fltk-1.3.4-1/png/pngwutil.c **** 
 2634              		.loc 1 908 0
 2635 02e0 C6837602 		movb	$8, 630(%rbx)
 2635      000008
 2636 02e7 E9CDFEFF 		jmp	.L224
 2636      FF
 2637              	.LVL262:
 2638 02ec 0F1F4000 		.p2align 4,,10
 2639              		.p2align 3
 2640              	.L248:
 859:fltk-1.3.4-1/png/pngwutil.c ****       filter_type = PNG_FILTER_TYPE_BASE;
 2641              		.loc 1 859 0
 2642 02f0 BE000000 		movl	$.LC34, %esi
 2642      00
 2643 02f5 4889DF   		movq	%rbx, %rdi
 2644 02f8 E8000000 		call	png_warning
 2644      00
 2645              	.LVL263:
 2646 02fd E99DFDFF 		jmp	.L218
 2646      FF
 2647              	.LVL264:
 2648              	.L249:
 2649              		.loc 1 915 0
 2650 0302 E8000000 		call	__stack_chk_fail
 2650      00
 2651              	.LVL265:
 2652              	.L250:
 792:fltk-1.3.4-1/png/pngwutil.c **** 
 2653              		.loc 1 792 0
 2654 0307 BE000000 		movl	$.LC28, %esi
 2654      00
 2655              	.LVL266:
 2656 030c E8000000 		call	png_error
 2656      00
 2657              	.LVL267:
 2658              	.L210:
 781:fltk-1.3.4-1/png/pngwutil.c ****                    "Invalid bit depth for grayscale image");
 2659              		.loc 1 781 0
 2660 0311 BE000000 		movl	$.LC27, %esi
 2660      00
 2661              	.LVL268:
 2662 0316 4889DF   		movq	%rbx, %rdi
 2663 0319 E8000000 		call	png_error
 2663      00
 2664              	.LVL269:
 2665              	.L246:
 825:fltk-1.3.4-1/png/pngwutil.c **** 
 2666              		.loc 1 825 0
 2667 031e BE000000 		movl	$.LC31, %esi
 2667      00
 2668              	.LVL270:
 2669 0323 E8000000 		call	png_error
 2669      00
 2670              	.LVL271:
 2671              	.L251:
 814:fltk-1.3.4-1/png/pngwutil.c **** 
 2672              		.loc 1 814 0
 2673 0328 BE000000 		movl	$.LC30, %esi
 2673      00
 2674              	.LVL272:
 2675 032d E8000000 		call	png_error
 2675      00
 2676              	.LVL273:
 2677              		.cfi_endproc
 2678              	.LFE73:
 2680              		.section	.text.unlikely.png_write_IHDR
 2681              	.LCOLDE36:
 2682              		.section	.text.png_write_IHDR
 2683              	.LHOTE36:
 2684              		.section	.rodata.str1.8
 2685 0191 00000000 		.align 8
 2685      000000
 2686              	.LC37:
 2687 0198 496E7661 		.string	"Invalid number of colors in palette"
 2687      6C696420 
 2687      6E756D62 
 2687      6572206F 
 2687      6620636F 
 2688 01bc 00000000 		.align 8
 2689              	.LC38:
 2690 01c0 49676E6F 		.string	"Ignoring request to write a PLTE chunk in grayscale PNG"
 2690      72696E67 
 2690      20726571 
 2690      75657374 
 2690      20746F20 
 2691              		.section	.text.unlikely.png_write_PLTE,"ax",@progbits
 2692              	.LCOLDB39:
 2693              		.section	.text.png_write_PLTE,"ax",@progbits
 2694              	.LHOTB39:
 2695              		.p2align 4,,15
 2696              		.globl	png_write_PLTE
 2698              	png_write_PLTE:
 2699              	.LFB74:
 916:fltk-1.3.4-1/png/pngwutil.c **** 
 917:fltk-1.3.4-1/png/pngwutil.c **** /* Write the palette.  We are careful not to trust png_color to be in the
 918:fltk-1.3.4-1/png/pngwutil.c ****  * correct order for PNG, so people can redefine it to any convenient
 919:fltk-1.3.4-1/png/pngwutil.c ****  * structure.
 920:fltk-1.3.4-1/png/pngwutil.c ****  */
 921:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
 922:fltk-1.3.4-1/png/pngwutil.c **** png_write_PLTE(png_structrp png_ptr, png_const_colorp palette,
 923:fltk-1.3.4-1/png/pngwutil.c ****     png_uint_32 num_pal)
 924:fltk-1.3.4-1/png/pngwutil.c **** {
 2700              		.loc 1 924 0
 2701              		.cfi_startproc
 2702              	.LVL274:
 2703 0000 4154     		pushq	%r12
 2704              		.cfi_def_cfa_offset 16
 2705              		.cfi_offset 12, -16
 2706 0002 55       		pushq	%rbp
 2707              		.cfi_def_cfa_offset 24
 2708              		.cfi_offset 6, -24
 2709 0003 4889FD   		movq	%rdi, %rbp
 2710 0006 53       		pushq	%rbx
 2711              		.cfi_def_cfa_offset 32
 2712              		.cfi_offset 3, -32
 2713 0007 4883EC10 		subq	$16, %rsp
 2714              		.cfi_def_cfa_offset 48
 2715              		.loc 1 924 0
 2716 000b 64488B04 		movq	%fs:40, %rax
 2716      25280000 
 2716      00
 2717 0014 48894424 		movq	%rax, 8(%rsp)
 2717      08
 2718 0019 31C0     		xorl	%eax, %eax
 925:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 i;
 926:fltk-1.3.4-1/png/pngwutil.c ****    png_const_colorp pal_ptr;
 927:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[3];
 928:fltk-1.3.4-1/png/pngwutil.c **** 
 929:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_write_PLTE");
 930:fltk-1.3.4-1/png/pngwutil.c **** 
 931:fltk-1.3.4-1/png/pngwutil.c ****    if ((
 932:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_MNG_FEATURES_SUPPORTED
 933:fltk-1.3.4-1/png/pngwutil.c ****        (png_ptr->mng_features_permitted & PNG_FLAG_MNG_EMPTY_PLTE) == 0 &&
 934:fltk-1.3.4-1/png/pngwutil.c **** #endif
 935:fltk-1.3.4-1/png/pngwutil.c ****        num_pal == 0) || num_pal > 256)
 2719              		.loc 1 935 0
 2720 001b 8B871804 		movl	1048(%rdi), %eax
 2720      0000
 2721 0021 83E001   		andl	$1, %eax
 2722 0024 09D0     		orl	%edx, %eax
 2723 0026 0F848400 		je	.L263
 2723      0000
 2724 002c 81FA0001 		cmpl	$256, %edx
 2724      0000
 2725 0032 4189D4   		movl	%edx, %r12d
 2726 0035 7779     		ja	.L263
 936:fltk-1.3.4-1/png/pngwutil.c ****    {
 937:fltk-1.3.4-1/png/pngwutil.c ****       if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
 938:fltk-1.3.4-1/png/pngwutil.c ****       {
 939:fltk-1.3.4-1/png/pngwutil.c ****          png_error(png_ptr, "Invalid number of colors in palette");
 940:fltk-1.3.4-1/png/pngwutil.c ****       }
 941:fltk-1.3.4-1/png/pngwutil.c **** 
 942:fltk-1.3.4-1/png/pngwutil.c ****       else
 943:fltk-1.3.4-1/png/pngwutil.c ****       {
 944:fltk-1.3.4-1/png/pngwutil.c ****          png_warning(png_ptr, "Invalid number of colors in palette");
 945:fltk-1.3.4-1/png/pngwutil.c ****          return;
 946:fltk-1.3.4-1/png/pngwutil.c ****       }
 947:fltk-1.3.4-1/png/pngwutil.c ****    }
 948:fltk-1.3.4-1/png/pngwutil.c **** 
 949:fltk-1.3.4-1/png/pngwutil.c ****    if ((png_ptr->color_type & PNG_COLOR_MASK_COLOR) == 0)
 2727              		.loc 1 949 0
 2728 0037 F6877702 		testb	$2, 631(%rdi)
 2728      000002
 2729 003e 0F849C00 		je	.L267
 2729      0000
 950:fltk-1.3.4-1/png/pngwutil.c ****    {
 951:fltk-1.3.4-1/png/pngwutil.c ****       png_warning(png_ptr,
 952:fltk-1.3.4-1/png/pngwutil.c ****           "Ignoring request to write a PLTE chunk in grayscale PNG");
 953:fltk-1.3.4-1/png/pngwutil.c **** 
 954:fltk-1.3.4-1/png/pngwutil.c ****       return;
 955:fltk-1.3.4-1/png/pngwutil.c ****    }
 956:fltk-1.3.4-1/png/pngwutil.c **** 
 957:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->num_palette = (png_uint_16)num_pal;
 2730              		.loc 1 957 0
 2731 0044 66899568 		movw	%dx, 616(%rbp)
 2731      020000
 2732              	.LVL275:
 2733              	.LBB299:
 2734              	.LBB300:
 2735 004b 8D1452   		leal	(%rdx,%rdx,2), %edx
 2736              	.LVL276:
 2737 004e 4889F3   		movq	%rsi, %rbx
 2738 0051 BE45544C 		movl	$1347179589, %esi
 2738      50
 2739              	.LVL277:
 2740 0056 E8000000 		call	png_write_chunk_header.part.2
 2740      00
 2741              	.LVL278:
 2742              	.LBE300:
 2743              	.LBE299:
 958:fltk-1.3.4-1/png/pngwutil.c ****    png_debug1(3, "num_palette = %d", png_ptr->num_palette);
 959:fltk-1.3.4-1/png/pngwutil.c **** 
 960:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_header(png_ptr, png_PLTE, (png_uint_32)(num_pal * 3));
 961:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_POINTER_INDEXING_SUPPORTED
 962:fltk-1.3.4-1/png/pngwutil.c **** 
 963:fltk-1.3.4-1/png/pngwutil.c ****    for (i = 0, pal_ptr = palette; i < num_pal; i++, pal_ptr++)
 2744              		.loc 1 963 0
 2745 005b 4585E4   		testl	%r12d, %r12d
 2746 005e 743F     		je	.L261
 2747 0060 418D4424 		leal	-1(%r12), %eax
 2747      FF
 2748 0065 4C8D6440 		leaq	3(%rax,%rax,2), %r12
 2748      03
 2749              	.LVL279:
 2750 006a 4901DC   		addq	%rbx, %r12
 2751              	.LVL280:
 2752 006d 0F1F00   		.p2align 4,,10
 2753              		.p2align 3
 2754              	.L260:
 964:fltk-1.3.4-1/png/pngwutil.c ****    {
 965:fltk-1.3.4-1/png/pngwutil.c ****       buf[0] = pal_ptr->red;
 2755              		.loc 1 965 0 discriminator 3
 2756 0070 0FB603   		movzbl	(%rbx), %eax
 2757              	.LBB301:
 2758              	.LBB302:
 2759 0073 BA030000 		movl	$3, %edx
 2759      00
 2760 0078 4889E6   		movq	%rsp, %rsi
 2761 007b 4889EF   		movq	%rbp, %rdi
 2762              	.LBE302:
 2763              	.LBE301:
 963:fltk-1.3.4-1/png/pngwutil.c ****    {
 2764              		.loc 1 963 0 discriminator 3
 2765 007e 4883C303 		addq	$3, %rbx
 2766              	.LVL281:
 2767              		.loc 1 965 0 discriminator 3
 2768 0082 880424   		movb	%al, (%rsp)
 966:fltk-1.3.4-1/png/pngwutil.c ****       buf[1] = pal_ptr->green;
 2769              		.loc 1 966 0 discriminator 3
 2770 0085 0FB643FE 		movzbl	-2(%rbx), %eax
 2771 0089 88442401 		movb	%al, 1(%rsp)
 967:fltk-1.3.4-1/png/pngwutil.c ****       buf[2] = pal_ptr->blue;
 2772              		.loc 1 967 0 discriminator 3
 2773 008d 0FB643FF 		movzbl	-1(%rbx), %eax
 2774 0091 88442402 		movb	%al, 2(%rsp)
 2775              	.LVL282:
 2776              	.LBB304:
 2777              	.LBB303:
 2778 0095 E8000000 		call	png_write_chunk_data.part.3
 2778      00
 2779              	.LVL283:
 2780              	.LBE303:
 2781              	.LBE304:
 963:fltk-1.3.4-1/png/pngwutil.c ****    {
 2782              		.loc 1 963 0 discriminator 3
 2783 009a 4939DC   		cmpq	%rbx, %r12
 2784 009d 75D1     		jne	.L260
 2785              	.L261:
 2786              	.LVL284:
 2787              	.LBB305:
 2788              	.LBB306:
 2789 009f 4889EF   		movq	%rbp, %rdi
 2790 00a2 E8000000 		call	png_write_chunk_end.part.4
 2790      00
 2791              	.LVL285:
 2792              	.LBE306:
 2793              	.LBE305:
 968:fltk-1.3.4-1/png/pngwutil.c ****       png_write_chunk_data(png_ptr, buf, (png_size_t)3);
 969:fltk-1.3.4-1/png/pngwutil.c ****    }
 970:fltk-1.3.4-1/png/pngwutil.c **** 
 971:fltk-1.3.4-1/png/pngwutil.c **** #else
 972:fltk-1.3.4-1/png/pngwutil.c ****    /* This is a little slower but some buggy compilers need to do this
 973:fltk-1.3.4-1/png/pngwutil.c ****     * instead
 974:fltk-1.3.4-1/png/pngwutil.c ****     */
 975:fltk-1.3.4-1/png/pngwutil.c ****    pal_ptr=palette;
 976:fltk-1.3.4-1/png/pngwutil.c **** 
 977:fltk-1.3.4-1/png/pngwutil.c ****    for (i = 0; i < num_pal; i++)
 978:fltk-1.3.4-1/png/pngwutil.c ****    {
 979:fltk-1.3.4-1/png/pngwutil.c ****       buf[0] = pal_ptr[i].red;
 980:fltk-1.3.4-1/png/pngwutil.c ****       buf[1] = pal_ptr[i].green;
 981:fltk-1.3.4-1/png/pngwutil.c ****       buf[2] = pal_ptr[i].blue;
 982:fltk-1.3.4-1/png/pngwutil.c ****       png_write_chunk_data(png_ptr, buf, (png_size_t)3);
 983:fltk-1.3.4-1/png/pngwutil.c ****    }
 984:fltk-1.3.4-1/png/pngwutil.c **** 
 985:fltk-1.3.4-1/png/pngwutil.c **** #endif
 986:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_end(png_ptr);
 987:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->mode |= PNG_HAVE_PLTE;
 2794              		.loc 1 987 0
 2795 00a7 838D2C01 		orl	$2, 300(%rbp)
 2795      000002
 2796 00ae EB16     		jmp	.L252
 2797              	.LVL286:
 2798              		.p2align 4,,10
 2799              		.p2align 3
 2800              	.L263:
 937:fltk-1.3.4-1/png/pngwutil.c ****       {
 2801              		.loc 1 937 0
 2802 00b0 80BD7702 		cmpb	$3, 631(%rbp)
 2802      000003
 939:fltk-1.3.4-1/png/pngwutil.c ****       }
 2803              		.loc 1 939 0
 2804 00b7 BE000000 		movl	$.LC37, %esi
 2804      00
 2805              	.LVL287:
 2806 00bc 4889EF   		movq	%rbp, %rdi
 2807              	.LVL288:
 937:fltk-1.3.4-1/png/pngwutil.c ****       {
 2808              		.loc 1 937 0
 2809 00bf 7426     		je	.L268
 2810              	.LVL289:
 2811              	.L266:
 951:fltk-1.3.4-1/png/pngwutil.c ****           "Ignoring request to write a PLTE chunk in grayscale PNG");
 2812              		.loc 1 951 0
 2813 00c1 E8000000 		call	png_warning
 2813      00
 2814              	.LVL290:
 2815              	.L252:
 988:fltk-1.3.4-1/png/pngwutil.c **** }
 2816              		.loc 1 988 0
 2817 00c6 488B4424 		movq	8(%rsp), %rax
 2817      08
 2818 00cb 64483304 		xorq	%fs:40, %rax
 2818      25280000 
 2818      00
 2819 00d4 7516     		jne	.L269
 2820 00d6 4883C410 		addq	$16, %rsp
 2821              		.cfi_remember_state
 2822              		.cfi_def_cfa_offset 32
 2823 00da 5B       		popq	%rbx
 2824              		.cfi_def_cfa_offset 24
 2825 00db 5D       		popq	%rbp
 2826              		.cfi_def_cfa_offset 16
 2827              	.LVL291:
 2828 00dc 415C     		popq	%r12
 2829              		.cfi_def_cfa_offset 8
 2830 00de C3       		ret
 2831              	.LVL292:
 2832 00df 90       		.p2align 4,,10
 2833              		.p2align 3
 2834              	.L267:
 2835              		.cfi_restore_state
 951:fltk-1.3.4-1/png/pngwutil.c ****           "Ignoring request to write a PLTE chunk in grayscale PNG");
 2836              		.loc 1 951 0
 2837 00e0 BE000000 		movl	$.LC38, %esi
 2837      00
 2838              	.LVL293:
 2839 00e5 EBDA     		jmp	.L266
 2840              	.L268:
 939:fltk-1.3.4-1/png/pngwutil.c ****       }
 2841              		.loc 1 939 0
 2842 00e7 E8000000 		call	png_error
 2842      00
 2843              	.LVL294:
 2844              	.L269:
 2845              		.loc 1 988 0
 2846 00ec E8000000 		call	__stack_chk_fail
 2846      00
 2847              	.LVL295:
 2848              		.cfi_endproc
 2849              	.LFE74:
 2851              		.section	.text.unlikely.png_write_PLTE
 2852              	.LCOLDE39:
 2853              		.section	.text.png_write_PLTE
 2854              	.LHOTE39:
 2855              		.section	.rodata.str1.8
 2856              		.align 8
 2857              	.LC40:
 2858 01f8 5A5F4F4B 		.string	"Z_OK on Z_FINISH with output space"
 2858      206F6E20 
 2858      5A5F4649 
 2858      4E495348 
 2858      20776974 
 2859              		.section	.text.unlikely.png_compress_IDAT,"ax",@progbits
 2860              	.LCOLDB41:
 2861              		.section	.text.png_compress_IDAT,"ax",@progbits
 2862              	.LHOTB41:
 2863              		.p2align 4,,15
 2864              		.globl	png_compress_IDAT
 2866              	png_compress_IDAT:
 2867              	.LFB75:
 989:fltk-1.3.4-1/png/pngwutil.c **** 
 990:fltk-1.3.4-1/png/pngwutil.c **** /* This is similar to png_text_compress, above, except that it does not require
 991:fltk-1.3.4-1/png/pngwutil.c ****  * all of the data at once and, instead of buffering the compressed result,
 992:fltk-1.3.4-1/png/pngwutil.c ****  * writes it as IDAT chunks.  Unlike png_text_compress it *can* png_error out
 993:fltk-1.3.4-1/png/pngwutil.c ****  * because it calls the write interface.  As a result it does its own error
 994:fltk-1.3.4-1/png/pngwutil.c ****  * reporting and does not return an error code.  In the event of error it will
 995:fltk-1.3.4-1/png/pngwutil.c ****  * just call png_error.  The input data length may exceed 32-bits.  The 'flush'
 996:fltk-1.3.4-1/png/pngwutil.c ****  * parameter is exactly the same as that to deflate, with the following
 997:fltk-1.3.4-1/png/pngwutil.c ****  * meanings:
 998:fltk-1.3.4-1/png/pngwutil.c ****  *
 999:fltk-1.3.4-1/png/pngwutil.c ****  * Z_NO_FLUSH: normal incremental output of compressed data
1000:fltk-1.3.4-1/png/pngwutil.c ****  * Z_SYNC_FLUSH: do a SYNC_FLUSH, used by png_write_flush
1001:fltk-1.3.4-1/png/pngwutil.c ****  * Z_FINISH: this is the end of the input, do a Z_FINISH and clean up
1002:fltk-1.3.4-1/png/pngwutil.c ****  *
1003:fltk-1.3.4-1/png/pngwutil.c ****  * The routine manages the acquire and release of the png_ptr->zstream by
1004:fltk-1.3.4-1/png/pngwutil.c ****  * checking and (at the end) clearing png_ptr->zowner; it does some sanity
1005:fltk-1.3.4-1/png/pngwutil.c ****  * checks on the 'mode' flags while doing this.
1006:fltk-1.3.4-1/png/pngwutil.c ****  */
1007:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
1008:fltk-1.3.4-1/png/pngwutil.c **** png_compress_IDAT(png_structrp png_ptr, png_const_bytep input,
1009:fltk-1.3.4-1/png/pngwutil.c ****    png_alloc_size_t input_len, int flush)
1010:fltk-1.3.4-1/png/pngwutil.c **** {
 2868              		.loc 1 1010 0
 2869              		.cfi_startproc
 2870              	.LVL296:
 2871 0000 4157     		pushq	%r15
 2872              		.cfi_def_cfa_offset 16
 2873              		.cfi_offset 15, -16
 2874 0002 4156     		pushq	%r14
 2875              		.cfi_def_cfa_offset 24
 2876              		.cfi_offset 14, -24
 2877 0004 4989FE   		movq	%rdi, %r14
 2878 0007 4155     		pushq	%r13
 2879              		.cfi_def_cfa_offset 32
 2880              		.cfi_offset 13, -32
 2881 0009 4154     		pushq	%r12
 2882              		.cfi_def_cfa_offset 40
 2883              		.cfi_offset 12, -40
 2884 000b 4989F5   		movq	%rsi, %r13
 2885 000e 55       		pushq	%rbp
 2886              		.cfi_def_cfa_offset 48
 2887              		.cfi_offset 6, -48
 2888 000f 53       		pushq	%rbx
 2889              		.cfi_def_cfa_offset 56
 2890              		.cfi_offset 3, -56
 2891 0010 4189CC   		movl	%ecx, %r12d
 2892 0013 4889D3   		movq	%rdx, %rbx
 2893 0016 4883EC18 		subq	$24, %rsp
 2894              		.cfi_def_cfa_offset 80
1011:fltk-1.3.4-1/png/pngwutil.c ****    if (png_ptr->zowner != png_IDAT)
 2895              		.loc 1 1011 0
 2896 001a 81BF3801 		cmpl	$1229209940, 312(%rdi)
 2896      00005441 
 2896      4449
 2897 0024 7475     		je	.L271
1012:fltk-1.3.4-1/png/pngwutil.c ****    {
1013:fltk-1.3.4-1/png/pngwutil.c ****       /* First time.   Ensure we have a temporary buffer for compression and
1014:fltk-1.3.4-1/png/pngwutil.c ****        * trim the buffer list if it has more than one entry to free memory.
1015:fltk-1.3.4-1/png/pngwutil.c ****        * If 'WRITE_COMPRESSED_TEXT' is not set the list will never have been
1016:fltk-1.3.4-1/png/pngwutil.c ****        * created at this point, but the check here is quick and safe.
1017:fltk-1.3.4-1/png/pngwutil.c ****        */
1018:fltk-1.3.4-1/png/pngwutil.c ****       if (png_ptr->zbuffer_list == NULL)
 2898              		.loc 1 1018 0
 2899 0026 488B87B0 		movq	432(%rdi), %rax
 2899      010000
 2900 002d 4885C0   		testq	%rax, %rax
 2901 0030 0F844C02 		je	.L307
 2901      0000
 2902              	.LVL297:
 2903              	.LBB307:
 2904              	.LBB308:
 442:fltk-1.3.4-1/png/pngwutil.c **** 
 2905              		.loc 1 442 0
 2906 0036 488B30   		movq	(%rax), %rsi
 2907              	.LVL298:
 444:fltk-1.3.4-1/png/pngwutil.c ****    {
 2908              		.loc 1 444 0
 2909 0039 4885F6   		testq	%rsi, %rsi
 2910 003c 741D     		je	.L273
 446:fltk-1.3.4-1/png/pngwutil.c **** 
 2911              		.loc 1 446 0
 2912 003e 48C70000 		movq	$0, (%rax)
 2912      000000
 2913              	.LVL299:
 2914              		.p2align 4,,10
 2915 0045 0F1F00   		.p2align 3
 2916              	.L275:
 2917              	.LBB309:
 450:fltk-1.3.4-1/png/pngwutil.c **** 
 2918              		.loc 1 450 0
 2919 0048 488B2E   		movq	(%rsi), %rbp
 2920              	.LVL300:
 452:fltk-1.3.4-1/png/pngwutil.c ****          list = next;
 2921              		.loc 1 452 0
 2922 004b 4C89F7   		movq	%r14, %rdi
 2923 004e E8000000 		call	png_free
 2923      00
 2924              	.LVL301:
 2925              	.LBE309:
 455:fltk-1.3.4-1/png/pngwutil.c ****    }
 2926              		.loc 1 455 0
 2927 0053 4885ED   		testq	%rbp, %rbp
 2928 0056 4889EE   		movq	%rbp, %rsi
 2929 0059 75ED     		jne	.L275
 2930              	.LVL302:
 2931              	.L273:
 2932              	.LBE308:
 2933              	.LBE307:
1019:fltk-1.3.4-1/png/pngwutil.c ****       {
1020:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zbuffer_list = png_voidcast(png_compression_bufferp,
1021:fltk-1.3.4-1/png/pngwutil.c ****             png_malloc(png_ptr, PNG_COMPRESSION_BUFFER_SIZE(png_ptr)));
1022:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zbuffer_list->next = NULL;
1023:fltk-1.3.4-1/png/pngwutil.c ****       }
1024:fltk-1.3.4-1/png/pngwutil.c **** 
1025:fltk-1.3.4-1/png/pngwutil.c ****       else
1026:fltk-1.3.4-1/png/pngwutil.c ****          png_free_buffer_list(png_ptr, &png_ptr->zbuffer_list->next);
1027:fltk-1.3.4-1/png/pngwutil.c **** 
1028:fltk-1.3.4-1/png/pngwutil.c ****       /* It is a terminal error if we can't claim the zstream. */
1029:fltk-1.3.4-1/png/pngwutil.c ****       if (png_deflate_claim(png_ptr, png_IDAT, png_image_size(png_ptr)) != Z_OK)
 2934              		.loc 1 1029 0
 2935 005b 4C89F7   		movq	%r14, %rdi
 2936 005e E8000000 		call	png_image_size
 2936      00
 2937              	.LVL303:
 2938 0063 BE544144 		movl	$1229209940, %esi
 2938      49
 2939 0068 4889C2   		movq	%rax, %rdx
 2940 006b 4C89F7   		movq	%r14, %rdi
 2941 006e E8000000 		call	png_deflate_claim
 2941      00
 2942              	.LVL304:
 2943 0073 85C0     		testl	%eax, %eax
 2944 0075 0F853402 		jne	.L305
 2944      0000
1030:fltk-1.3.4-1/png/pngwutil.c ****          png_error(png_ptr, png_ptr->zstream.msg);
1031:fltk-1.3.4-1/png/pngwutil.c **** 
1032:fltk-1.3.4-1/png/pngwutil.c ****       /* The output state is maintained in png_ptr->zstream, so it must be
1033:fltk-1.3.4-1/png/pngwutil.c ****        * initialized here after the claim.
1034:fltk-1.3.4-1/png/pngwutil.c ****        */
1035:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zstream.next_out = png_ptr->zbuffer_list->output;
 2945              		.loc 1 1035 0
 2946 007b 498B86B0 		movq	432(%r14), %rax
 2946      010000
 2947 0082 4883C008 		addq	$8, %rax
 2948 0086 49898658 		movq	%rax, 344(%r14)
 2948      010000
1036:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zstream.avail_out = png_ptr->zbuffer_size;
 2949              		.loc 1 1036 0
 2950 008d 418B86B8 		movl	440(%r14), %eax
 2950      010000
 2951 0094 41898660 		movl	%eax, 352(%r14)
 2951      010000
 2952              	.L271:
 2953 009b 498D8640 		leaq	320(%r14), %rax
 2953      010000
1037:fltk-1.3.4-1/png/pngwutil.c ****    }
1038:fltk-1.3.4-1/png/pngwutil.c **** 
1039:fltk-1.3.4-1/png/pngwutil.c ****    /* Now loop reading and writing until all the input is consumed or an error
1040:fltk-1.3.4-1/png/pngwutil.c ****     * terminates the operation.  The _out values are maintained across calls to
1041:fltk-1.3.4-1/png/pngwutil.c ****     * this function, but the input must be reset each time.
1042:fltk-1.3.4-1/png/pngwutil.c ****     */
1043:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->zstream.next_in = PNGZ_INPUT_CAST(input);
 2954              		.loc 1 1043 0
 2955 00a2 4D89AE40 		movq	%r13, 320(%r14)
 2955      010000
 2956              	.LBB310:
1044:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->zstream.avail_in = 0; /* set below */
1045:fltk-1.3.4-1/png/pngwutil.c ****    for (;;)
1046:fltk-1.3.4-1/png/pngwutil.c ****    {
1047:fltk-1.3.4-1/png/pngwutil.c ****       int ret;
1048:fltk-1.3.4-1/png/pngwutil.c **** 
1049:fltk-1.3.4-1/png/pngwutil.c ****       /* INPUT: from the row data */
1050:fltk-1.3.4-1/png/pngwutil.c ****       uInt avail = ZLIB_IO_MAX;
1051:fltk-1.3.4-1/png/pngwutil.c **** 
1052:fltk-1.3.4-1/png/pngwutil.c ****       if (avail > input_len)
 2957              		.loc 1 1052 0
 2958 00a9 BDFEFFFF 		movl	$4294967294, %ebp
 2958      FF
 2959 00ae 48890424 		movq	%rax, (%rsp)
 2960              	.LVL305:
 2961              		.p2align 4,,10
 2962 00b2 660F1F44 		.p2align 3
 2962      0000
 2963              	.L278:
1053:fltk-1.3.4-1/png/pngwutil.c ****          avail = (uInt)input_len; /* safe because of the check */
 2964              		.loc 1 1053 0
 2965 00b8 4839EB   		cmpq	%rbp, %rbx
 2966 00bb B8FFFFFF 		movl	$4294967295, %eax
 2966      FF
 2967 00c0 BAFFFFFF 		movl	$-1, %edx
 2967      FF
 2968 00c5 480F46C3 		cmovbe	%rbx, %rax
1054:fltk-1.3.4-1/png/pngwutil.c **** 
1055:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zstream.avail_in = avail;
1056:fltk-1.3.4-1/png/pngwutil.c ****       input_len -= avail;
1057:fltk-1.3.4-1/png/pngwutil.c **** 
1058:fltk-1.3.4-1/png/pngwutil.c ****       ret = deflate(&png_ptr->zstream, input_len > 0 ? Z_NO_FLUSH : flush);
 2969              		.loc 1 1058 0
 2970 00c9 488B3C24 		movq	(%rsp), %rdi
1053:fltk-1.3.4-1/png/pngwutil.c ****          avail = (uInt)input_len; /* safe because of the check */
 2971              		.loc 1 1053 0
 2972 00cd 0F46D3   		cmovbe	%ebx, %edx
 2973              	.LVL306:
 2974              		.loc 1 1058 0
 2975 00d0 BE000000 		movl	$0, %esi
 2975      00
 2976 00d5 4829C3   		subq	%rax, %rbx
 2977              	.LVL307:
1055:fltk-1.3.4-1/png/pngwutil.c ****       input_len -= avail;
 2978              		.loc 1 1055 0
 2979 00d8 41899648 		movl	%edx, 328(%r14)
 2979      010000
 2980              		.loc 1 1058 0
 2981 00df 410F44F4 		cmove	%r12d, %esi
 2982 00e3 E8000000 		call	deflate
 2982      00
 2983              	.LVL308:
 2984 00e8 4189C5   		movl	%eax, %r13d
 2985              	.LVL309:
1059:fltk-1.3.4-1/png/pngwutil.c **** 
1060:fltk-1.3.4-1/png/pngwutil.c ****       /* Include as-yet unconsumed input */
1061:fltk-1.3.4-1/png/pngwutil.c ****       input_len += png_ptr->zstream.avail_in;
 2986              		.loc 1 1061 0
 2987 00eb 418B8648 		movl	328(%r14), %eax
 2987      010000
 2988              	.LVL310:
1062:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zstream.avail_in = 0;
 2989              		.loc 1 1062 0
 2990 00f2 41C78648 		movl	$0, 328(%r14)
 2990      01000000 
 2990      000000
1061:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->zstream.avail_in = 0;
 2991              		.loc 1 1061 0
 2992 00fd 4801C3   		addq	%rax, %rbx
 2993              	.LVL311:
1063:fltk-1.3.4-1/png/pngwutil.c **** 
1064:fltk-1.3.4-1/png/pngwutil.c ****       /* OUTPUT: write complete IDAT chunks when avail_out drops to zero. Note
1065:fltk-1.3.4-1/png/pngwutil.c ****        * that these two zstream fields are preserved across the calls, therefore
1066:fltk-1.3.4-1/png/pngwutil.c ****        * there is no need to set these up on entry to the loop.
1067:fltk-1.3.4-1/png/pngwutil.c ****        */
1068:fltk-1.3.4-1/png/pngwutil.c ****       if (png_ptr->zstream.avail_out == 0)
 2994              		.loc 1 1068 0
 2995 0100 418B8660 		movl	352(%r14), %eax
 2995      010000
 2996 0107 85C0     		testl	%eax, %eax
 2997 0109 0F858900 		jne	.L287
 2997      0000
 2998              	.LBB311:
1069:fltk-1.3.4-1/png/pngwutil.c ****       {
1070:fltk-1.3.4-1/png/pngwutil.c ****          png_bytep data = png_ptr->zbuffer_list->output;
1071:fltk-1.3.4-1/png/pngwutil.c ****          uInt size = png_ptr->zbuffer_size;
1072:fltk-1.3.4-1/png/pngwutil.c **** 
1073:fltk-1.3.4-1/png/pngwutil.c ****          /* Write an IDAT containing the data then reset the buffer.  The
1074:fltk-1.3.4-1/png/pngwutil.c ****           * first IDAT may need deflate header optimization.
1075:fltk-1.3.4-1/png/pngwutil.c ****           */
1076:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_OPTIMIZE_CMF_SUPPORTED
1077:fltk-1.3.4-1/png/pngwutil.c ****             if ((png_ptr->mode & PNG_HAVE_IDAT) == 0 &&
 2999              		.loc 1 1077 0
 3000 010f 41F6862C 		testb	$4, 300(%r14)
 3000      01000004 
1070:fltk-1.3.4-1/png/pngwutil.c ****          uInt size = png_ptr->zbuffer_size;
 3001              		.loc 1 1070 0
 3002 0117 498B86B0 		movq	432(%r14), %rax
 3002      010000
1071:fltk-1.3.4-1/png/pngwutil.c **** 
 3003              		.loc 1 1071 0
 3004 011e 458BBEB8 		movl	440(%r14), %r15d
 3004      010000
1070:fltk-1.3.4-1/png/pngwutil.c ****          uInt size = png_ptr->zbuffer_size;
 3005              		.loc 1 1070 0
 3006 0125 4C8D4808 		leaq	8(%rax), %r9
 3007              	.LVL312:
 3008              		.loc 1 1077 0
 3009 0129 7525     		jne	.L284
 3010              		.loc 1 1077 0 is_stmt 0 discriminator 1
 3011 012b 4180BE58 		cmpb	$0, 1112(%r14)
 3011      04000000 
 3012 0133 751B     		jne	.L284
1078:fltk-1.3.4-1/png/pngwutil.c ****                 png_ptr->compression_type == PNG_COMPRESSION_TYPE_BASE)
1079:fltk-1.3.4-1/png/pngwutil.c ****                optimize_cmf(data, png_image_size(png_ptr));
 3013              		.loc 1 1079 0 is_stmt 1
 3014 0135 4C89F7   		movq	%r14, %rdi
 3015 0138 4C894C24 		movq	%r9, 8(%rsp)
 3015      08
 3016 013d E8000000 		call	png_image_size
 3016      00
 3017              	.LVL313:
 3018              	.LBB312:
 3019              	.LBB313:
 256:fltk-1.3.4-1/png/pngwutil.c ****    {
 3020              		.loc 1 256 0
 3021 0142 483D0040 		cmpq	$16384, %rax
 3021      0000
 3022 0148 4C8B4C24 		movq	8(%rsp), %r9
 3022      08
 3023 014d 7671     		jbe	.L308
 3024              	.LVL314:
 3025 014f 90       		.p2align 4,,10
 3026              		.p2align 3
 3027              	.L284:
 3028              	.LBE313:
 3029              	.LBE312:
1080:fltk-1.3.4-1/png/pngwutil.c **** #endif
1081:fltk-1.3.4-1/png/pngwutil.c **** 
1082:fltk-1.3.4-1/png/pngwutil.c ****          png_write_complete_chunk(png_ptr, png_IDAT, data, size);
 3030              		.loc 1 1082 0
 3031 0150 4C89CA   		movq	%r9, %rdx
 3032 0153 4489F9   		movl	%r15d, %ecx
 3033 0156 BE544144 		movl	$1229209940, %esi
 3033      49
 3034 015b 4C89F7   		movq	%r14, %rdi
 3035 015e 4C894C24 		movq	%r9, 8(%rsp)
 3035      08
 3036 0163 E8000000 		call	png_write_complete_chunk
 3036      00
 3037              	.LVL315:
1083:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->mode |= PNG_HAVE_IDAT;
1084:fltk-1.3.4-1/png/pngwutil.c **** 
1085:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zstream.next_out = data;
 3038              		.loc 1 1085 0
 3039 0168 4C8B4C24 		movq	8(%rsp), %r9
 3039      08
1083:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->mode |= PNG_HAVE_IDAT;
 3040              		.loc 1 1083 0
 3041 016d 41838E2C 		orl	$4, 300(%r14)
 3041      01000004 
1086:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zstream.avail_out = size;
1087:fltk-1.3.4-1/png/pngwutil.c **** 
1088:fltk-1.3.4-1/png/pngwutil.c ****          /* For SYNC_FLUSH or FINISH it is essential to keep calling zlib with
1089:fltk-1.3.4-1/png/pngwutil.c ****           * the same flush parameter until it has finished output, for NO_FLUSH
1090:fltk-1.3.4-1/png/pngwutil.c ****           * it doesn't matter.
1091:fltk-1.3.4-1/png/pngwutil.c ****           */
1092:fltk-1.3.4-1/png/pngwutil.c ****          if (ret == Z_OK && flush != Z_NO_FLUSH)
 3042              		.loc 1 1092 0
 3043 0175 4585ED   		testl	%r13d, %r13d
1086:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zstream.avail_out = size;
 3044              		.loc 1 1086 0
 3045 0178 4589BE60 		movl	%r15d, 352(%r14)
 3045      010000
1085:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zstream.avail_out = size;
 3046              		.loc 1 1085 0
 3047 017f 4D898E58 		movq	%r9, 344(%r14)
 3047      010000
 3048              		.loc 1 1092 0
 3049 0186 7510     		jne	.L287
 3050 0188 4585E4   		testl	%r12d, %r12d
 3051 018b 0F8527FF 		jne	.L278
 3051      FFFF
 3052              	.LVL316:
 3053              		.p2align 4,,10
 3054 0191 0F1F8000 		.p2align 3
 3054      000000
 3055              	.L287:
 3056              	.LBE311:
1093:fltk-1.3.4-1/png/pngwutil.c ****             continue;
1094:fltk-1.3.4-1/png/pngwutil.c ****       }
1095:fltk-1.3.4-1/png/pngwutil.c **** 
1096:fltk-1.3.4-1/png/pngwutil.c ****       /* The order of these checks doesn't matter much; it just affects which
1097:fltk-1.3.4-1/png/pngwutil.c ****        * possible error might be detected if multiple things go wrong at once.
1098:fltk-1.3.4-1/png/pngwutil.c ****        */
1099:fltk-1.3.4-1/png/pngwutil.c ****       if (ret == Z_OK) /* most likely return code! */
 3057              		.loc 1 1099 0
 3058 0198 4585ED   		testl	%r13d, %r13d
 3059 019b 753B     		jne	.L309
1100:fltk-1.3.4-1/png/pngwutil.c ****       {
1101:fltk-1.3.4-1/png/pngwutil.c ****          /* If all the input has been consumed then just return.  If Z_FINISH
1102:fltk-1.3.4-1/png/pngwutil.c ****           * was used as the flush parameter something has gone wrong if we get
1103:fltk-1.3.4-1/png/pngwutil.c ****           * here.
1104:fltk-1.3.4-1/png/pngwutil.c ****           */
1105:fltk-1.3.4-1/png/pngwutil.c ****          if (input_len == 0)
 3060              		.loc 1 1105 0
 3061 019d 4885DB   		testq	%rbx, %rbx
 3062 01a0 0F8512FF 		jne	.L278
 3062      FFFF
1106:fltk-1.3.4-1/png/pngwutil.c ****          {
1107:fltk-1.3.4-1/png/pngwutil.c ****             if (flush == Z_FINISH)
 3063              		.loc 1 1107 0
 3064 01a6 4183FC04 		cmpl	$4, %r12d
 3065 01aa 0F85C300 		jne	.L270
 3065      0000
1108:fltk-1.3.4-1/png/pngwutil.c ****                png_error(png_ptr, "Z_OK on Z_FINISH with output space");
 3066              		.loc 1 1108 0
 3067 01b0 BE000000 		movl	$.LC40, %esi
 3067      00
 3068 01b5 4C89F7   		movq	%r14, %rdi
 3069 01b8 E8000000 		call	png_error
 3069      00
 3070              	.LVL317:
 3071 01bd 0F1F00   		.p2align 4,,10
 3072              		.p2align 3
 3073              	.L308:
 3074              	.LBB316:
 3075              	.LBB315:
 3076              	.LBB314:
 3077 01c0 4C89CF   		movq	%r9, %rdi
 3078 01c3 4889C6   		movq	%rax, %rsi
 3079 01c6 E8000000 		call	optimize_cmf.part.0
 3079      00
 3080              	.LVL318:
 3081 01cb 4C8B4C24 		movq	8(%rsp), %r9
 3081      08
 3082 01d0 E97BFFFF 		jmp	.L284
 3082      FF
 3083              	.LVL319:
 3084              		.p2align 4,,10
 3085 01d5 0F1F00   		.p2align 3
 3086              	.L309:
 3087              	.LBE314:
 3088              	.LBE315:
 3089              	.LBE316:
1109:fltk-1.3.4-1/png/pngwutil.c **** 
1110:fltk-1.3.4-1/png/pngwutil.c ****             return;
1111:fltk-1.3.4-1/png/pngwutil.c ****          }
1112:fltk-1.3.4-1/png/pngwutil.c ****       }
1113:fltk-1.3.4-1/png/pngwutil.c **** 
1114:fltk-1.3.4-1/png/pngwutil.c ****       else if (ret == Z_STREAM_END && flush == Z_FINISH)
 3090              		.loc 1 1114 0
 3091 01d8 4183FD01 		cmpl	$1, %r13d
 3092 01dc 0F85C200 		jne	.L289
 3092      0000
 3093 01e2 4183FC04 		cmpl	$4, %r12d
 3094 01e6 0F85B800 		jne	.L289
 3094      0000
 3095              	.LBB317:
1115:fltk-1.3.4-1/png/pngwutil.c ****       {
1116:fltk-1.3.4-1/png/pngwutil.c ****          /* This is the end of the IDAT data; any pending output must be
1117:fltk-1.3.4-1/png/pngwutil.c ****           * flushed.  For small PNG files we may still be at the beginning.
1118:fltk-1.3.4-1/png/pngwutil.c ****           */
1119:fltk-1.3.4-1/png/pngwutil.c ****          png_bytep data = png_ptr->zbuffer_list->output;
1120:fltk-1.3.4-1/png/pngwutil.c ****          uInt size = png_ptr->zbuffer_size - png_ptr->zstream.avail_out;
 3096              		.loc 1 1120 0
 3097 01ec 418B9EB8 		movl	440(%r14), %ebx
 3097      010000
 3098              	.LVL320:
 3099 01f3 412B9E60 		subl	352(%r14), %ebx
 3099      010000
1121:fltk-1.3.4-1/png/pngwutil.c **** 
1122:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_OPTIMIZE_CMF_SUPPORTED
1123:fltk-1.3.4-1/png/pngwutil.c ****          if ((png_ptr->mode & PNG_HAVE_IDAT) == 0 &&
 3100              		.loc 1 1123 0
 3101 01fa 41F6862C 		testb	$4, 300(%r14)
 3101      01000004 
1119:fltk-1.3.4-1/png/pngwutil.c ****          uInt size = png_ptr->zbuffer_size - png_ptr->zstream.avail_out;
 3102              		.loc 1 1119 0
 3103 0202 498B86B0 		movq	432(%r14), %rax
 3103      010000
 3104 0209 488D6808 		leaq	8(%rax), %rbp
 3105              	.LVL321:
 3106              		.loc 1 1123 0
 3107 020d 7529     		jne	.L290
 3108              		.loc 1 1123 0 is_stmt 0 discriminator 1
 3109 020f 4180BE58 		cmpb	$0, 1112(%r14)
 3109      04000000 
 3110 0217 751F     		jne	.L290
1124:fltk-1.3.4-1/png/pngwutil.c ****              png_ptr->compression_type == PNG_COMPRESSION_TYPE_BASE)
1125:fltk-1.3.4-1/png/pngwutil.c ****             optimize_cmf(data, png_image_size(png_ptr));
 3111              		.loc 1 1125 0 is_stmt 1
 3112 0219 4C89F7   		movq	%r14, %rdi
 3113 021c E8000000 		call	png_image_size
 3113      00
 3114              	.LVL322:
 3115              	.LBB318:
 3116              	.LBB319:
 256:fltk-1.3.4-1/png/pngwutil.c ****    {
 3117              		.loc 1 256 0
 3118 0221 483D0040 		cmpq	$16384, %rax
 3118      0000
 3119 0227 770F     		ja	.L290
 3120 0229 4889C6   		movq	%rax, %rsi
 3121 022c 4889EF   		movq	%rbp, %rdi
 3122 022f E8000000 		call	optimize_cmf.part.0
 3122      00
 3123              	.LVL323:
 3124              		.p2align 4,,10
 3125 0234 0F1F4000 		.p2align 3
 3126              	.L290:
 3127              	.LBE319:
 3128              	.LBE318:
1126:fltk-1.3.4-1/png/pngwutil.c **** #endif
1127:fltk-1.3.4-1/png/pngwutil.c **** 
1128:fltk-1.3.4-1/png/pngwutil.c ****          png_write_complete_chunk(png_ptr, png_IDAT, data, size);
 3129              		.loc 1 1128 0
 3130 0238 89D9     		movl	%ebx, %ecx
 3131 023a 4889EA   		movq	%rbp, %rdx
 3132 023d BE544144 		movl	$1229209940, %esi
 3132      49
 3133 0242 4C89F7   		movq	%r14, %rdi
 3134 0245 E8000000 		call	png_write_complete_chunk
 3134      00
 3135              	.LVL324:
1129:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zstream.avail_out = 0;
1130:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zstream.next_out = NULL;
1131:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->mode |= PNG_HAVE_IDAT | PNG_AFTER_IDAT;
 3136              		.loc 1 1131 0
 3137 024a 41838E2C 		orl	$12, 300(%r14)
 3137      0100000C 
1129:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zstream.avail_out = 0;
 3138              		.loc 1 1129 0
 3139 0252 41C78660 		movl	$0, 352(%r14)
 3139      01000000 
 3139      000000
1130:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->mode |= PNG_HAVE_IDAT | PNG_AFTER_IDAT;
 3140              		.loc 1 1130 0
 3141 025d 49C78658 		movq	$0, 344(%r14)
 3141      01000000 
 3141      000000
1132:fltk-1.3.4-1/png/pngwutil.c **** 
1133:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->zowner = 0; /* Release the stream */
 3142              		.loc 1 1133 0
 3143 0268 41C78638 		movl	$0, 312(%r14)
 3143      01000000 
 3143      000000
 3144              	.LVL325:
 3145              	.L270:
 3146              	.LBE317:
 3147              	.LBE310:
1134:fltk-1.3.4-1/png/pngwutil.c ****          return;
1135:fltk-1.3.4-1/png/pngwutil.c ****       }
1136:fltk-1.3.4-1/png/pngwutil.c **** 
1137:fltk-1.3.4-1/png/pngwutil.c ****       else
1138:fltk-1.3.4-1/png/pngwutil.c ****       {
1139:fltk-1.3.4-1/png/pngwutil.c ****          /* This is an error condition. */
1140:fltk-1.3.4-1/png/pngwutil.c ****          png_zstream_error(png_ptr, ret);
1141:fltk-1.3.4-1/png/pngwutil.c ****          png_error(png_ptr, png_ptr->zstream.msg);
1142:fltk-1.3.4-1/png/pngwutil.c ****       }
1143:fltk-1.3.4-1/png/pngwutil.c ****    }
1144:fltk-1.3.4-1/png/pngwutil.c **** }
 3148              		.loc 1 1144 0
 3149 0273 4883C418 		addq	$24, %rsp
 3150              		.cfi_remember_state
 3151              		.cfi_def_cfa_offset 56
 3152 0277 5B       		popq	%rbx
 3153              		.cfi_def_cfa_offset 48
 3154 0278 5D       		popq	%rbp
 3155              		.cfi_def_cfa_offset 40
 3156 0279 415C     		popq	%r12
 3157              		.cfi_def_cfa_offset 32
 3158              	.LVL326:
 3159 027b 415D     		popq	%r13
 3160              		.cfi_def_cfa_offset 24
 3161              	.LVL327:
 3162 027d 415E     		popq	%r14
 3163              		.cfi_def_cfa_offset 16
 3164              	.LVL328:
 3165 027f 415F     		popq	%r15
 3166              		.cfi_def_cfa_offset 8
 3167 0281 C3       		ret
 3168              	.LVL329:
 3169              	.L307:
 3170              		.cfi_restore_state
1020:fltk-1.3.4-1/png/pngwutil.c ****             png_malloc(png_ptr, PNG_COMPRESSION_BUFFER_SIZE(png_ptr)));
 3171              		.loc 1 1020 0
 3172 0282 8BB7B801 		movl	440(%rdi), %esi
 3172      0000
 3173              	.LVL330:
 3174 0288 4883C608 		addq	$8, %rsi
 3175 028c E8000000 		call	png_malloc
 3175      00
 3176              	.LVL331:
 3177 0291 498986B0 		movq	%rax, 432(%r14)
 3177      010000
1022:fltk-1.3.4-1/png/pngwutil.c ****       }
 3178              		.loc 1 1022 0
 3179 0298 48C70000 		movq	$0, (%rax)
 3179      000000
 3180 029f E9B7FDFF 		jmp	.L273
 3180      FF
 3181              	.LVL332:
 3182              	.L289:
 3183              	.LBB320:
1140:fltk-1.3.4-1/png/pngwutil.c ****          png_error(png_ptr, png_ptr->zstream.msg);
 3184              		.loc 1 1140 0
 3185 02a4 4489EE   		movl	%r13d, %esi
 3186 02a7 4C89F7   		movq	%r14, %rdi
 3187 02aa E8000000 		call	png_zstream_error
 3187      00
 3188              	.LVL333:
 3189              	.L305:
1141:fltk-1.3.4-1/png/pngwutil.c ****       }
 3190              		.loc 1 1141 0
 3191 02af 498BB670 		movq	368(%r14), %rsi
 3191      010000
 3192 02b6 4C89F7   		movq	%r14, %rdi
 3193 02b9 E8000000 		call	png_error
 3193      00
 3194              	.LVL334:
 3195              	.LBE320:
 3196              		.cfi_endproc
 3197              	.LFE75:
 3199              		.section	.text.unlikely.png_compress_IDAT
 3200              	.LCOLDE41:
 3201              		.section	.text.png_compress_IDAT
 3202              	.LHOTE41:
 3203              		.section	.text.unlikely.png_write_finish_row.part.5,"ax",@progbits
 3204              	.LCOLDB42:
 3205              		.section	.text.png_write_finish_row.part.5,"ax",@progbits
 3206              	.LHOTB42:
 3207              		.p2align 4,,15
 3209              	png_write_finish_row.part.5:
 3210              	.LFB104:
1145:fltk-1.3.4-1/png/pngwutil.c **** 
1146:fltk-1.3.4-1/png/pngwutil.c **** /* Write an IEND chunk */
1147:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
1148:fltk-1.3.4-1/png/pngwutil.c **** png_write_IEND(png_structrp png_ptr)
1149:fltk-1.3.4-1/png/pngwutil.c **** {
1150:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_write_IEND");
1151:fltk-1.3.4-1/png/pngwutil.c **** 
1152:fltk-1.3.4-1/png/pngwutil.c ****    png_write_complete_chunk(png_ptr, png_IEND, NULL, (png_size_t)0);
1153:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->mode |= PNG_HAVE_IEND;
1154:fltk-1.3.4-1/png/pngwutil.c **** }
1155:fltk-1.3.4-1/png/pngwutil.c **** 
1156:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_gAMA_SUPPORTED
1157:fltk-1.3.4-1/png/pngwutil.c **** /* Write a gAMA chunk */
1158:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
1159:fltk-1.3.4-1/png/pngwutil.c **** png_write_gAMA_fixed(png_structrp png_ptr, png_fixed_point file_gamma)
1160:fltk-1.3.4-1/png/pngwutil.c **** {
1161:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[4];
1162:fltk-1.3.4-1/png/pngwutil.c **** 
1163:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_write_gAMA");
1164:fltk-1.3.4-1/png/pngwutil.c **** 
1165:fltk-1.3.4-1/png/pngwutil.c ****    /* file_gamma is saved in 1/100,000ths */
1166:fltk-1.3.4-1/png/pngwutil.c ****    png_save_uint_32(buf, (png_uint_32)file_gamma);
1167:fltk-1.3.4-1/png/pngwutil.c ****    png_write_complete_chunk(png_ptr, png_gAMA, buf, (png_size_t)4);
1168:fltk-1.3.4-1/png/pngwutil.c **** }
1169:fltk-1.3.4-1/png/pngwutil.c **** #endif
1170:fltk-1.3.4-1/png/pngwutil.c **** 
1171:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_sRGB_SUPPORTED
1172:fltk-1.3.4-1/png/pngwutil.c **** /* Write a sRGB chunk */
1173:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
1174:fltk-1.3.4-1/png/pngwutil.c **** png_write_sRGB(png_structrp png_ptr, int srgb_intent)
1175:fltk-1.3.4-1/png/pngwutil.c **** {
1176:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[1];
1177:fltk-1.3.4-1/png/pngwutil.c **** 
1178:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_write_sRGB");
1179:fltk-1.3.4-1/png/pngwutil.c **** 
1180:fltk-1.3.4-1/png/pngwutil.c ****    if (srgb_intent >= PNG_sRGB_INTENT_LAST)
1181:fltk-1.3.4-1/png/pngwutil.c ****       png_warning(png_ptr,
1182:fltk-1.3.4-1/png/pngwutil.c ****           "Invalid sRGB rendering intent specified");
1183:fltk-1.3.4-1/png/pngwutil.c **** 
1184:fltk-1.3.4-1/png/pngwutil.c ****    buf[0]=(png_byte)srgb_intent;
1185:fltk-1.3.4-1/png/pngwutil.c ****    png_write_complete_chunk(png_ptr, png_sRGB, buf, (png_size_t)1);
1186:fltk-1.3.4-1/png/pngwutil.c **** }
1187:fltk-1.3.4-1/png/pngwutil.c **** #endif
1188:fltk-1.3.4-1/png/pngwutil.c **** 
1189:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_iCCP_SUPPORTED
1190:fltk-1.3.4-1/png/pngwutil.c **** /* Write an iCCP chunk */
1191:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
1192:fltk-1.3.4-1/png/pngwutil.c **** png_write_iCCP(png_structrp png_ptr, png_const_charp name,
1193:fltk-1.3.4-1/png/pngwutil.c ****     png_const_bytep profile)
1194:fltk-1.3.4-1/png/pngwutil.c **** {
1195:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 name_len;
1196:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 profile_len;
1197:fltk-1.3.4-1/png/pngwutil.c ****    png_byte new_name[81]; /* 1 byte for the compression byte */
1198:fltk-1.3.4-1/png/pngwutil.c ****    compression_state comp;
1199:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 temp;
1200:fltk-1.3.4-1/png/pngwutil.c **** 
1201:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_write_iCCP");
1202:fltk-1.3.4-1/png/pngwutil.c **** 
1203:fltk-1.3.4-1/png/pngwutil.c ****    /* These are all internal problems: the profile should have been checked
1204:fltk-1.3.4-1/png/pngwutil.c ****     * before when it was stored.
1205:fltk-1.3.4-1/png/pngwutil.c ****     */
1206:fltk-1.3.4-1/png/pngwutil.c ****    if (profile == NULL)
1207:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "No profile for iCCP chunk"); /* internal error */
1208:fltk-1.3.4-1/png/pngwutil.c **** 
1209:fltk-1.3.4-1/png/pngwutil.c ****    profile_len = png_get_uint_32(profile);
1210:fltk-1.3.4-1/png/pngwutil.c **** 
1211:fltk-1.3.4-1/png/pngwutil.c ****    if (profile_len < 132)
1212:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "ICC profile too short");
1213:fltk-1.3.4-1/png/pngwutil.c **** 
1214:fltk-1.3.4-1/png/pngwutil.c ****    temp = (png_uint_32) (*(profile+8));
1215:fltk-1.3.4-1/png/pngwutil.c ****    if (temp > 3 && (profile_len & 0x03))
1216:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "ICC profile length invalid (not a multiple of 4)");
1217:fltk-1.3.4-1/png/pngwutil.c **** 
1218:fltk-1.3.4-1/png/pngwutil.c ****    {
1219:fltk-1.3.4-1/png/pngwutil.c ****       png_uint_32 embedded_profile_len = png_get_uint_32(profile);
1220:fltk-1.3.4-1/png/pngwutil.c **** 
1221:fltk-1.3.4-1/png/pngwutil.c ****       if (profile_len != embedded_profile_len)
1222:fltk-1.3.4-1/png/pngwutil.c ****          png_error(png_ptr, "Profile length does not match profile");
1223:fltk-1.3.4-1/png/pngwutil.c ****    }
1224:fltk-1.3.4-1/png/pngwutil.c **** 
1225:fltk-1.3.4-1/png/pngwutil.c ****    name_len = png_check_keyword(png_ptr, name, new_name);
1226:fltk-1.3.4-1/png/pngwutil.c **** 
1227:fltk-1.3.4-1/png/pngwutil.c ****    if (name_len == 0)
1228:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "iCCP: invalid keyword");
1229:fltk-1.3.4-1/png/pngwutil.c **** 
1230:fltk-1.3.4-1/png/pngwutil.c ****    new_name[++name_len] = PNG_COMPRESSION_TYPE_BASE;
1231:fltk-1.3.4-1/png/pngwutil.c **** 
1232:fltk-1.3.4-1/png/pngwutil.c ****    /* Make sure we include the NULL after the name and the compression type */
1233:fltk-1.3.4-1/png/pngwutil.c ****    ++name_len;
1234:fltk-1.3.4-1/png/pngwutil.c **** 
1235:fltk-1.3.4-1/png/pngwutil.c ****    png_text_compress_init(&comp, profile, profile_len);
1236:fltk-1.3.4-1/png/pngwutil.c **** 
1237:fltk-1.3.4-1/png/pngwutil.c ****    /* Allow for keyword terminator and compression byte */
1238:fltk-1.3.4-1/png/pngwutil.c ****    if (png_text_compress(png_ptr, png_iCCP, &comp, name_len) != Z_OK)
1239:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, png_ptr->zstream.msg);
1240:fltk-1.3.4-1/png/pngwutil.c **** 
1241:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_header(png_ptr, png_iCCP, name_len + comp.output_len);
1242:fltk-1.3.4-1/png/pngwutil.c **** 
1243:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_data(png_ptr, new_name, name_len);
1244:fltk-1.3.4-1/png/pngwutil.c **** 
1245:fltk-1.3.4-1/png/pngwutil.c ****    png_write_compressed_data_out(png_ptr, &comp);
1246:fltk-1.3.4-1/png/pngwutil.c **** 
1247:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_end(png_ptr);
1248:fltk-1.3.4-1/png/pngwutil.c **** }
1249:fltk-1.3.4-1/png/pngwutil.c **** #endif
1250:fltk-1.3.4-1/png/pngwutil.c **** 
1251:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_sPLT_SUPPORTED
1252:fltk-1.3.4-1/png/pngwutil.c **** /* Write a sPLT chunk */
1253:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
1254:fltk-1.3.4-1/png/pngwutil.c **** png_write_sPLT(png_structrp png_ptr, png_const_sPLT_tp spalette)
1255:fltk-1.3.4-1/png/pngwutil.c **** {
1256:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 name_len;
1257:fltk-1.3.4-1/png/pngwutil.c ****    png_byte new_name[80];
1258:fltk-1.3.4-1/png/pngwutil.c ****    png_byte entrybuf[10];
1259:fltk-1.3.4-1/png/pngwutil.c ****    png_size_t entry_size = (spalette->depth == 8 ? 6 : 10);
1260:fltk-1.3.4-1/png/pngwutil.c ****    png_size_t palette_size = entry_size * spalette->nentries;
1261:fltk-1.3.4-1/png/pngwutil.c ****    png_sPLT_entryp ep;
1262:fltk-1.3.4-1/png/pngwutil.c **** #ifndef PNG_POINTER_INDEXING_SUPPORTED
1263:fltk-1.3.4-1/png/pngwutil.c ****    int i;
1264:fltk-1.3.4-1/png/pngwutil.c **** #endif
1265:fltk-1.3.4-1/png/pngwutil.c **** 
1266:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_write_sPLT");
1267:fltk-1.3.4-1/png/pngwutil.c **** 
1268:fltk-1.3.4-1/png/pngwutil.c ****    name_len = png_check_keyword(png_ptr, spalette->name, new_name);
1269:fltk-1.3.4-1/png/pngwutil.c **** 
1270:fltk-1.3.4-1/png/pngwutil.c ****    if (name_len == 0)
1271:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "sPLT: invalid keyword");
1272:fltk-1.3.4-1/png/pngwutil.c **** 
1273:fltk-1.3.4-1/png/pngwutil.c ****    /* Make sure we include the NULL after the name */
1274:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_header(png_ptr, png_sPLT,
1275:fltk-1.3.4-1/png/pngwutil.c ****        (png_uint_32)(name_len + 2 + palette_size));
1276:fltk-1.3.4-1/png/pngwutil.c **** 
1277:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_data(png_ptr, (png_bytep)new_name,
1278:fltk-1.3.4-1/png/pngwutil.c ****        (png_size_t)(name_len + 1));
1279:fltk-1.3.4-1/png/pngwutil.c **** 
1280:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_data(png_ptr, &spalette->depth, (png_size_t)1);
1281:fltk-1.3.4-1/png/pngwutil.c **** 
1282:fltk-1.3.4-1/png/pngwutil.c ****    /* Loop through each palette entry, writing appropriately */
1283:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_POINTER_INDEXING_SUPPORTED
1284:fltk-1.3.4-1/png/pngwutil.c ****    for (ep = spalette->entries; ep<spalette->entries + spalette->nentries; ep++)
1285:fltk-1.3.4-1/png/pngwutil.c ****    {
1286:fltk-1.3.4-1/png/pngwutil.c ****       if (spalette->depth == 8)
1287:fltk-1.3.4-1/png/pngwutil.c ****       {
1288:fltk-1.3.4-1/png/pngwutil.c ****          entrybuf[0] = (png_byte)ep->red;
1289:fltk-1.3.4-1/png/pngwutil.c ****          entrybuf[1] = (png_byte)ep->green;
1290:fltk-1.3.4-1/png/pngwutil.c ****          entrybuf[2] = (png_byte)ep->blue;
1291:fltk-1.3.4-1/png/pngwutil.c ****          entrybuf[3] = (png_byte)ep->alpha;
1292:fltk-1.3.4-1/png/pngwutil.c ****          png_save_uint_16(entrybuf + 4, ep->frequency);
1293:fltk-1.3.4-1/png/pngwutil.c ****       }
1294:fltk-1.3.4-1/png/pngwutil.c **** 
1295:fltk-1.3.4-1/png/pngwutil.c ****       else
1296:fltk-1.3.4-1/png/pngwutil.c ****       {
1297:fltk-1.3.4-1/png/pngwutil.c ****          png_save_uint_16(entrybuf + 0, ep->red);
1298:fltk-1.3.4-1/png/pngwutil.c ****          png_save_uint_16(entrybuf + 2, ep->green);
1299:fltk-1.3.4-1/png/pngwutil.c ****          png_save_uint_16(entrybuf + 4, ep->blue);
1300:fltk-1.3.4-1/png/pngwutil.c ****          png_save_uint_16(entrybuf + 6, ep->alpha);
1301:fltk-1.3.4-1/png/pngwutil.c ****          png_save_uint_16(entrybuf + 8, ep->frequency);
1302:fltk-1.3.4-1/png/pngwutil.c ****       }
1303:fltk-1.3.4-1/png/pngwutil.c **** 
1304:fltk-1.3.4-1/png/pngwutil.c ****       png_write_chunk_data(png_ptr, entrybuf, entry_size);
1305:fltk-1.3.4-1/png/pngwutil.c ****    }
1306:fltk-1.3.4-1/png/pngwutil.c **** #else
1307:fltk-1.3.4-1/png/pngwutil.c ****    ep=spalette->entries;
1308:fltk-1.3.4-1/png/pngwutil.c ****    for (i = 0; i>spalette->nentries; i++)
1309:fltk-1.3.4-1/png/pngwutil.c ****    {
1310:fltk-1.3.4-1/png/pngwutil.c ****       if (spalette->depth == 8)
1311:fltk-1.3.4-1/png/pngwutil.c ****       {
1312:fltk-1.3.4-1/png/pngwutil.c ****          entrybuf[0] = (png_byte)ep[i].red;
1313:fltk-1.3.4-1/png/pngwutil.c ****          entrybuf[1] = (png_byte)ep[i].green;
1314:fltk-1.3.4-1/png/pngwutil.c ****          entrybuf[2] = (png_byte)ep[i].blue;
1315:fltk-1.3.4-1/png/pngwutil.c ****          entrybuf[3] = (png_byte)ep[i].alpha;
1316:fltk-1.3.4-1/png/pngwutil.c ****          png_save_uint_16(entrybuf + 4, ep[i].frequency);
1317:fltk-1.3.4-1/png/pngwutil.c ****       }
1318:fltk-1.3.4-1/png/pngwutil.c **** 
1319:fltk-1.3.4-1/png/pngwutil.c ****       else
1320:fltk-1.3.4-1/png/pngwutil.c ****       {
1321:fltk-1.3.4-1/png/pngwutil.c ****          png_save_uint_16(entrybuf + 0, ep[i].red);
1322:fltk-1.3.4-1/png/pngwutil.c ****          png_save_uint_16(entrybuf + 2, ep[i].green);
1323:fltk-1.3.4-1/png/pngwutil.c ****          png_save_uint_16(entrybuf + 4, ep[i].blue);
1324:fltk-1.3.4-1/png/pngwutil.c ****          png_save_uint_16(entrybuf + 6, ep[i].alpha);
1325:fltk-1.3.4-1/png/pngwutil.c ****          png_save_uint_16(entrybuf + 8, ep[i].frequency);
1326:fltk-1.3.4-1/png/pngwutil.c ****       }
1327:fltk-1.3.4-1/png/pngwutil.c **** 
1328:fltk-1.3.4-1/png/pngwutil.c ****       png_write_chunk_data(png_ptr, entrybuf, entry_size);
1329:fltk-1.3.4-1/png/pngwutil.c ****    }
1330:fltk-1.3.4-1/png/pngwutil.c **** #endif
1331:fltk-1.3.4-1/png/pngwutil.c **** 
1332:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_end(png_ptr);
1333:fltk-1.3.4-1/png/pngwutil.c **** }
1334:fltk-1.3.4-1/png/pngwutil.c **** #endif
1335:fltk-1.3.4-1/png/pngwutil.c **** 
1336:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_sBIT_SUPPORTED
1337:fltk-1.3.4-1/png/pngwutil.c **** /* Write the sBIT chunk */
1338:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
1339:fltk-1.3.4-1/png/pngwutil.c **** png_write_sBIT(png_structrp png_ptr, png_const_color_8p sbit, int color_type)
1340:fltk-1.3.4-1/png/pngwutil.c **** {
1341:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[4];
1342:fltk-1.3.4-1/png/pngwutil.c ****    png_size_t size;
1343:fltk-1.3.4-1/png/pngwutil.c **** 
1344:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_write_sBIT");
1345:fltk-1.3.4-1/png/pngwutil.c **** 
1346:fltk-1.3.4-1/png/pngwutil.c ****    /* Make sure we don't depend upon the order of PNG_COLOR_8 */
1347:fltk-1.3.4-1/png/pngwutil.c ****    if ((color_type & PNG_COLOR_MASK_COLOR) != 0)
1348:fltk-1.3.4-1/png/pngwutil.c ****    {
1349:fltk-1.3.4-1/png/pngwutil.c ****       png_byte maxbits;
1350:fltk-1.3.4-1/png/pngwutil.c **** 
1351:fltk-1.3.4-1/png/pngwutil.c ****       maxbits = (png_byte)(color_type==PNG_COLOR_TYPE_PALETTE ? 8 :
1352:fltk-1.3.4-1/png/pngwutil.c ****           png_ptr->usr_bit_depth);
1353:fltk-1.3.4-1/png/pngwutil.c **** 
1354:fltk-1.3.4-1/png/pngwutil.c ****       if (sbit->red == 0 || sbit->red > maxbits ||
1355:fltk-1.3.4-1/png/pngwutil.c ****           sbit->green == 0 || sbit->green > maxbits ||
1356:fltk-1.3.4-1/png/pngwutil.c ****           sbit->blue == 0 || sbit->blue > maxbits)
1357:fltk-1.3.4-1/png/pngwutil.c ****       {
1358:fltk-1.3.4-1/png/pngwutil.c ****          png_warning(png_ptr, "Invalid sBIT depth specified");
1359:fltk-1.3.4-1/png/pngwutil.c ****          return;
1360:fltk-1.3.4-1/png/pngwutil.c ****       }
1361:fltk-1.3.4-1/png/pngwutil.c **** 
1362:fltk-1.3.4-1/png/pngwutil.c ****       buf[0] = sbit->red;
1363:fltk-1.3.4-1/png/pngwutil.c ****       buf[1] = sbit->green;
1364:fltk-1.3.4-1/png/pngwutil.c ****       buf[2] = sbit->blue;
1365:fltk-1.3.4-1/png/pngwutil.c ****       size = 3;
1366:fltk-1.3.4-1/png/pngwutil.c ****    }
1367:fltk-1.3.4-1/png/pngwutil.c **** 
1368:fltk-1.3.4-1/png/pngwutil.c ****    else
1369:fltk-1.3.4-1/png/pngwutil.c ****    {
1370:fltk-1.3.4-1/png/pngwutil.c ****       if (sbit->gray == 0 || sbit->gray > png_ptr->usr_bit_depth)
1371:fltk-1.3.4-1/png/pngwutil.c ****       {
1372:fltk-1.3.4-1/png/pngwutil.c ****          png_warning(png_ptr, "Invalid sBIT depth specified");
1373:fltk-1.3.4-1/png/pngwutil.c ****          return;
1374:fltk-1.3.4-1/png/pngwutil.c ****       }
1375:fltk-1.3.4-1/png/pngwutil.c **** 
1376:fltk-1.3.4-1/png/pngwutil.c ****       buf[0] = sbit->gray;
1377:fltk-1.3.4-1/png/pngwutil.c ****       size = 1;
1378:fltk-1.3.4-1/png/pngwutil.c ****    }
1379:fltk-1.3.4-1/png/pngwutil.c **** 
1380:fltk-1.3.4-1/png/pngwutil.c ****    if ((color_type & PNG_COLOR_MASK_ALPHA) != 0)
1381:fltk-1.3.4-1/png/pngwutil.c ****    {
1382:fltk-1.3.4-1/png/pngwutil.c ****       if (sbit->alpha == 0 || sbit->alpha > png_ptr->usr_bit_depth)
1383:fltk-1.3.4-1/png/pngwutil.c ****       {
1384:fltk-1.3.4-1/png/pngwutil.c ****          png_warning(png_ptr, "Invalid sBIT depth specified");
1385:fltk-1.3.4-1/png/pngwutil.c ****          return;
1386:fltk-1.3.4-1/png/pngwutil.c ****       }
1387:fltk-1.3.4-1/png/pngwutil.c **** 
1388:fltk-1.3.4-1/png/pngwutil.c ****       buf[size++] = sbit->alpha;
1389:fltk-1.3.4-1/png/pngwutil.c ****    }
1390:fltk-1.3.4-1/png/pngwutil.c **** 
1391:fltk-1.3.4-1/png/pngwutil.c ****    png_write_complete_chunk(png_ptr, png_sBIT, buf, size);
1392:fltk-1.3.4-1/png/pngwutil.c **** }
1393:fltk-1.3.4-1/png/pngwutil.c **** #endif
1394:fltk-1.3.4-1/png/pngwutil.c **** 
1395:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_cHRM_SUPPORTED
1396:fltk-1.3.4-1/png/pngwutil.c **** /* Write the cHRM chunk */
1397:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
1398:fltk-1.3.4-1/png/pngwutil.c **** png_write_cHRM_fixed(png_structrp png_ptr, const png_xy *xy)
1399:fltk-1.3.4-1/png/pngwutil.c **** {
1400:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[32];
1401:fltk-1.3.4-1/png/pngwutil.c **** 
1402:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_write_cHRM");
1403:fltk-1.3.4-1/png/pngwutil.c **** 
1404:fltk-1.3.4-1/png/pngwutil.c ****    /* Each value is saved in 1/100,000ths */
1405:fltk-1.3.4-1/png/pngwutil.c ****    png_save_int_32(buf,      xy->whitex);
1406:fltk-1.3.4-1/png/pngwutil.c ****    png_save_int_32(buf +  4, xy->whitey);
1407:fltk-1.3.4-1/png/pngwutil.c **** 
1408:fltk-1.3.4-1/png/pngwutil.c ****    png_save_int_32(buf +  8, xy->redx);
1409:fltk-1.3.4-1/png/pngwutil.c ****    png_save_int_32(buf + 12, xy->redy);
1410:fltk-1.3.4-1/png/pngwutil.c **** 
1411:fltk-1.3.4-1/png/pngwutil.c ****    png_save_int_32(buf + 16, xy->greenx);
1412:fltk-1.3.4-1/png/pngwutil.c ****    png_save_int_32(buf + 20, xy->greeny);
1413:fltk-1.3.4-1/png/pngwutil.c **** 
1414:fltk-1.3.4-1/png/pngwutil.c ****    png_save_int_32(buf + 24, xy->bluex);
1415:fltk-1.3.4-1/png/pngwutil.c ****    png_save_int_32(buf + 28, xy->bluey);
1416:fltk-1.3.4-1/png/pngwutil.c **** 
1417:fltk-1.3.4-1/png/pngwutil.c ****    png_write_complete_chunk(png_ptr, png_cHRM, buf, 32);
1418:fltk-1.3.4-1/png/pngwutil.c **** }
1419:fltk-1.3.4-1/png/pngwutil.c **** #endif
1420:fltk-1.3.4-1/png/pngwutil.c **** 
1421:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_tRNS_SUPPORTED
1422:fltk-1.3.4-1/png/pngwutil.c **** /* Write the tRNS chunk */
1423:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
1424:fltk-1.3.4-1/png/pngwutil.c **** png_write_tRNS(png_structrp png_ptr, png_const_bytep trans_alpha,
1425:fltk-1.3.4-1/png/pngwutil.c ****     png_const_color_16p tran, int num_trans, int color_type)
1426:fltk-1.3.4-1/png/pngwutil.c **** {
1427:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[6];
1428:fltk-1.3.4-1/png/pngwutil.c **** 
1429:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_write_tRNS");
1430:fltk-1.3.4-1/png/pngwutil.c **** 
1431:fltk-1.3.4-1/png/pngwutil.c ****    if (color_type == PNG_COLOR_TYPE_PALETTE)
1432:fltk-1.3.4-1/png/pngwutil.c ****    {
1433:fltk-1.3.4-1/png/pngwutil.c ****       if (num_trans <= 0 || num_trans > (int)png_ptr->num_palette)
1434:fltk-1.3.4-1/png/pngwutil.c ****       {
1435:fltk-1.3.4-1/png/pngwutil.c ****          png_app_warning(png_ptr,
1436:fltk-1.3.4-1/png/pngwutil.c ****              "Invalid number of transparent colors specified");
1437:fltk-1.3.4-1/png/pngwutil.c ****          return;
1438:fltk-1.3.4-1/png/pngwutil.c ****       }
1439:fltk-1.3.4-1/png/pngwutil.c **** 
1440:fltk-1.3.4-1/png/pngwutil.c ****       /* Write the chunk out as it is */
1441:fltk-1.3.4-1/png/pngwutil.c ****       png_write_complete_chunk(png_ptr, png_tRNS, trans_alpha,
1442:fltk-1.3.4-1/png/pngwutil.c ****          (png_size_t)num_trans);
1443:fltk-1.3.4-1/png/pngwutil.c ****    }
1444:fltk-1.3.4-1/png/pngwutil.c **** 
1445:fltk-1.3.4-1/png/pngwutil.c ****    else if (color_type == PNG_COLOR_TYPE_GRAY)
1446:fltk-1.3.4-1/png/pngwutil.c ****    {
1447:fltk-1.3.4-1/png/pngwutil.c ****       /* One 16 bit value */
1448:fltk-1.3.4-1/png/pngwutil.c ****       if (tran->gray >= (1 << png_ptr->bit_depth))
1449:fltk-1.3.4-1/png/pngwutil.c ****       {
1450:fltk-1.3.4-1/png/pngwutil.c ****          png_app_warning(png_ptr,
1451:fltk-1.3.4-1/png/pngwutil.c ****              "Ignoring attempt to write tRNS chunk out-of-range for bit_depth");
1452:fltk-1.3.4-1/png/pngwutil.c **** 
1453:fltk-1.3.4-1/png/pngwutil.c ****          return;
1454:fltk-1.3.4-1/png/pngwutil.c ****       }
1455:fltk-1.3.4-1/png/pngwutil.c **** 
1456:fltk-1.3.4-1/png/pngwutil.c ****       png_save_uint_16(buf, tran->gray);
1457:fltk-1.3.4-1/png/pngwutil.c ****       png_write_complete_chunk(png_ptr, png_tRNS, buf, (png_size_t)2);
1458:fltk-1.3.4-1/png/pngwutil.c ****    }
1459:fltk-1.3.4-1/png/pngwutil.c **** 
1460:fltk-1.3.4-1/png/pngwutil.c ****    else if (color_type == PNG_COLOR_TYPE_RGB)
1461:fltk-1.3.4-1/png/pngwutil.c ****    {
1462:fltk-1.3.4-1/png/pngwutil.c ****       /* Three 16 bit values */
1463:fltk-1.3.4-1/png/pngwutil.c ****       png_save_uint_16(buf, tran->red);
1464:fltk-1.3.4-1/png/pngwutil.c ****       png_save_uint_16(buf + 2, tran->green);
1465:fltk-1.3.4-1/png/pngwutil.c ****       png_save_uint_16(buf + 4, tran->blue);
1466:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_16BIT_SUPPORTED
1467:fltk-1.3.4-1/png/pngwutil.c ****       if (png_ptr->bit_depth == 8 && (buf[0] | buf[2] | buf[4]) != 0)
1468:fltk-1.3.4-1/png/pngwutil.c **** #else
1469:fltk-1.3.4-1/png/pngwutil.c ****       if ((buf[0] | buf[2] | buf[4]) != 0)
1470:fltk-1.3.4-1/png/pngwutil.c **** #endif
1471:fltk-1.3.4-1/png/pngwutil.c ****       {
1472:fltk-1.3.4-1/png/pngwutil.c ****          png_app_warning(png_ptr,
1473:fltk-1.3.4-1/png/pngwutil.c ****            "Ignoring attempt to write 16-bit tRNS chunk when bit_depth is 8");
1474:fltk-1.3.4-1/png/pngwutil.c ****          return;
1475:fltk-1.3.4-1/png/pngwutil.c ****       }
1476:fltk-1.3.4-1/png/pngwutil.c **** 
1477:fltk-1.3.4-1/png/pngwutil.c ****       png_write_complete_chunk(png_ptr, png_tRNS, buf, (png_size_t)6);
1478:fltk-1.3.4-1/png/pngwutil.c ****    }
1479:fltk-1.3.4-1/png/pngwutil.c **** 
1480:fltk-1.3.4-1/png/pngwutil.c ****    else
1481:fltk-1.3.4-1/png/pngwutil.c ****    {
1482:fltk-1.3.4-1/png/pngwutil.c ****       png_app_warning(png_ptr, "Can't write tRNS with an alpha channel");
1483:fltk-1.3.4-1/png/pngwutil.c ****    }
1484:fltk-1.3.4-1/png/pngwutil.c **** }
1485:fltk-1.3.4-1/png/pngwutil.c **** #endif
1486:fltk-1.3.4-1/png/pngwutil.c **** 
1487:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_bKGD_SUPPORTED
1488:fltk-1.3.4-1/png/pngwutil.c **** /* Write the background chunk */
1489:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
1490:fltk-1.3.4-1/png/pngwutil.c **** png_write_bKGD(png_structrp png_ptr, png_const_color_16p back, int color_type)
1491:fltk-1.3.4-1/png/pngwutil.c **** {
1492:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[6];
1493:fltk-1.3.4-1/png/pngwutil.c **** 
1494:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_write_bKGD");
1495:fltk-1.3.4-1/png/pngwutil.c **** 
1496:fltk-1.3.4-1/png/pngwutil.c ****    if (color_type == PNG_COLOR_TYPE_PALETTE)
1497:fltk-1.3.4-1/png/pngwutil.c ****    {
1498:fltk-1.3.4-1/png/pngwutil.c ****       if (
1499:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_MNG_FEATURES_SUPPORTED
1500:fltk-1.3.4-1/png/pngwutil.c ****           (png_ptr->num_palette != 0 ||
1501:fltk-1.3.4-1/png/pngwutil.c ****           (png_ptr->mng_features_permitted & PNG_FLAG_MNG_EMPTY_PLTE) == 0) &&
1502:fltk-1.3.4-1/png/pngwutil.c **** #endif
1503:fltk-1.3.4-1/png/pngwutil.c ****          back->index >= png_ptr->num_palette)
1504:fltk-1.3.4-1/png/pngwutil.c ****       {
1505:fltk-1.3.4-1/png/pngwutil.c ****          png_warning(png_ptr, "Invalid background palette index");
1506:fltk-1.3.4-1/png/pngwutil.c ****          return;
1507:fltk-1.3.4-1/png/pngwutil.c ****       }
1508:fltk-1.3.4-1/png/pngwutil.c **** 
1509:fltk-1.3.4-1/png/pngwutil.c ****       buf[0] = back->index;
1510:fltk-1.3.4-1/png/pngwutil.c ****       png_write_complete_chunk(png_ptr, png_bKGD, buf, (png_size_t)1);
1511:fltk-1.3.4-1/png/pngwutil.c ****    }
1512:fltk-1.3.4-1/png/pngwutil.c **** 
1513:fltk-1.3.4-1/png/pngwutil.c ****    else if ((color_type & PNG_COLOR_MASK_COLOR) != 0)
1514:fltk-1.3.4-1/png/pngwutil.c ****    {
1515:fltk-1.3.4-1/png/pngwutil.c ****       png_save_uint_16(buf, back->red);
1516:fltk-1.3.4-1/png/pngwutil.c ****       png_save_uint_16(buf + 2, back->green);
1517:fltk-1.3.4-1/png/pngwutil.c ****       png_save_uint_16(buf + 4, back->blue);
1518:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_16BIT_SUPPORTED
1519:fltk-1.3.4-1/png/pngwutil.c ****       if (png_ptr->bit_depth == 8 && (buf[0] | buf[2] | buf[4]) != 0)
1520:fltk-1.3.4-1/png/pngwutil.c **** #else
1521:fltk-1.3.4-1/png/pngwutil.c ****       if ((buf[0] | buf[2] | buf[4]) != 0)
1522:fltk-1.3.4-1/png/pngwutil.c **** #endif
1523:fltk-1.3.4-1/png/pngwutil.c ****       {
1524:fltk-1.3.4-1/png/pngwutil.c ****          png_warning(png_ptr,
1525:fltk-1.3.4-1/png/pngwutil.c ****              "Ignoring attempt to write 16-bit bKGD chunk when bit_depth is 8");
1526:fltk-1.3.4-1/png/pngwutil.c **** 
1527:fltk-1.3.4-1/png/pngwutil.c ****          return;
1528:fltk-1.3.4-1/png/pngwutil.c ****       }
1529:fltk-1.3.4-1/png/pngwutil.c **** 
1530:fltk-1.3.4-1/png/pngwutil.c ****       png_write_complete_chunk(png_ptr, png_bKGD, buf, (png_size_t)6);
1531:fltk-1.3.4-1/png/pngwutil.c ****    }
1532:fltk-1.3.4-1/png/pngwutil.c **** 
1533:fltk-1.3.4-1/png/pngwutil.c ****    else
1534:fltk-1.3.4-1/png/pngwutil.c ****    {
1535:fltk-1.3.4-1/png/pngwutil.c ****       if (back->gray >= (1 << png_ptr->bit_depth))
1536:fltk-1.3.4-1/png/pngwutil.c ****       {
1537:fltk-1.3.4-1/png/pngwutil.c ****          png_warning(png_ptr,
1538:fltk-1.3.4-1/png/pngwutil.c ****              "Ignoring attempt to write bKGD chunk out-of-range for bit_depth");
1539:fltk-1.3.4-1/png/pngwutil.c **** 
1540:fltk-1.3.4-1/png/pngwutil.c ****          return;
1541:fltk-1.3.4-1/png/pngwutil.c ****       }
1542:fltk-1.3.4-1/png/pngwutil.c **** 
1543:fltk-1.3.4-1/png/pngwutil.c ****       png_save_uint_16(buf, back->gray);
1544:fltk-1.3.4-1/png/pngwutil.c ****       png_write_complete_chunk(png_ptr, png_bKGD, buf, (png_size_t)2);
1545:fltk-1.3.4-1/png/pngwutil.c ****    }
1546:fltk-1.3.4-1/png/pngwutil.c **** }
1547:fltk-1.3.4-1/png/pngwutil.c **** #endif
1548:fltk-1.3.4-1/png/pngwutil.c **** 
1549:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_hIST_SUPPORTED
1550:fltk-1.3.4-1/png/pngwutil.c **** /* Write the histogram */
1551:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
1552:fltk-1.3.4-1/png/pngwutil.c **** png_write_hIST(png_structrp png_ptr, png_const_uint_16p hist, int num_hist)
1553:fltk-1.3.4-1/png/pngwutil.c **** {
1554:fltk-1.3.4-1/png/pngwutil.c ****    int i;
1555:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[3];
1556:fltk-1.3.4-1/png/pngwutil.c **** 
1557:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_write_hIST");
1558:fltk-1.3.4-1/png/pngwutil.c **** 
1559:fltk-1.3.4-1/png/pngwutil.c ****    if (num_hist > (int)png_ptr->num_palette)
1560:fltk-1.3.4-1/png/pngwutil.c ****    {
1561:fltk-1.3.4-1/png/pngwutil.c ****       png_debug2(3, "num_hist = %d, num_palette = %d", num_hist,
1562:fltk-1.3.4-1/png/pngwutil.c ****           png_ptr->num_palette);
1563:fltk-1.3.4-1/png/pngwutil.c **** 
1564:fltk-1.3.4-1/png/pngwutil.c ****       png_warning(png_ptr, "Invalid number of histogram entries specified");
1565:fltk-1.3.4-1/png/pngwutil.c ****       return;
1566:fltk-1.3.4-1/png/pngwutil.c ****    }
1567:fltk-1.3.4-1/png/pngwutil.c **** 
1568:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_header(png_ptr, png_hIST, (png_uint_32)(num_hist * 2));
1569:fltk-1.3.4-1/png/pngwutil.c **** 
1570:fltk-1.3.4-1/png/pngwutil.c ****    for (i = 0; i < num_hist; i++)
1571:fltk-1.3.4-1/png/pngwutil.c ****    {
1572:fltk-1.3.4-1/png/pngwutil.c ****       png_save_uint_16(buf, hist[i]);
1573:fltk-1.3.4-1/png/pngwutil.c ****       png_write_chunk_data(png_ptr, buf, (png_size_t)2);
1574:fltk-1.3.4-1/png/pngwutil.c ****    }
1575:fltk-1.3.4-1/png/pngwutil.c **** 
1576:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_end(png_ptr);
1577:fltk-1.3.4-1/png/pngwutil.c **** }
1578:fltk-1.3.4-1/png/pngwutil.c **** #endif
1579:fltk-1.3.4-1/png/pngwutil.c **** 
1580:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_tEXt_SUPPORTED
1581:fltk-1.3.4-1/png/pngwutil.c **** /* Write a tEXt chunk */
1582:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
1583:fltk-1.3.4-1/png/pngwutil.c **** png_write_tEXt(png_structrp png_ptr, png_const_charp key, png_const_charp text,
1584:fltk-1.3.4-1/png/pngwutil.c ****     png_size_t text_len)
1585:fltk-1.3.4-1/png/pngwutil.c **** {
1586:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 key_len;
1587:fltk-1.3.4-1/png/pngwutil.c ****    png_byte new_key[80];
1588:fltk-1.3.4-1/png/pngwutil.c **** 
1589:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_write_tEXt");
1590:fltk-1.3.4-1/png/pngwutil.c **** 
1591:fltk-1.3.4-1/png/pngwutil.c ****    key_len = png_check_keyword(png_ptr, key, new_key);
1592:fltk-1.3.4-1/png/pngwutil.c **** 
1593:fltk-1.3.4-1/png/pngwutil.c ****    if (key_len == 0)
1594:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "tEXt: invalid keyword");
1595:fltk-1.3.4-1/png/pngwutil.c **** 
1596:fltk-1.3.4-1/png/pngwutil.c ****    if (text == NULL || *text == '\0')
1597:fltk-1.3.4-1/png/pngwutil.c ****       text_len = 0;
1598:fltk-1.3.4-1/png/pngwutil.c **** 
1599:fltk-1.3.4-1/png/pngwutil.c ****    else
1600:fltk-1.3.4-1/png/pngwutil.c ****       text_len = strlen(text);
1601:fltk-1.3.4-1/png/pngwutil.c **** 
1602:fltk-1.3.4-1/png/pngwutil.c ****    if (text_len > PNG_UINT_31_MAX - (key_len+1))
1603:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "tEXt: text too long");
1604:fltk-1.3.4-1/png/pngwutil.c **** 
1605:fltk-1.3.4-1/png/pngwutil.c ****    /* Make sure we include the 0 after the key */
1606:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_header(png_ptr, png_tEXt,
1607:fltk-1.3.4-1/png/pngwutil.c ****        (png_uint_32)/*checked above*/(key_len + text_len + 1));
1608:fltk-1.3.4-1/png/pngwutil.c ****    /*
1609:fltk-1.3.4-1/png/pngwutil.c ****     * We leave it to the application to meet PNG-1.0 requirements on the
1610:fltk-1.3.4-1/png/pngwutil.c ****     * contents of the text.  PNG-1.0 through PNG-1.2 discourage the use of
1611:fltk-1.3.4-1/png/pngwutil.c ****     * any non-Latin-1 characters except for NEWLINE.  ISO PNG will forbid them.
1612:fltk-1.3.4-1/png/pngwutil.c ****     * The NUL character is forbidden by PNG-1.0 through PNG-1.2 and ISO PNG.
1613:fltk-1.3.4-1/png/pngwutil.c ****     */
1614:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_data(png_ptr, new_key, key_len + 1);
1615:fltk-1.3.4-1/png/pngwutil.c **** 
1616:fltk-1.3.4-1/png/pngwutil.c ****    if (text_len != 0)
1617:fltk-1.3.4-1/png/pngwutil.c ****       png_write_chunk_data(png_ptr, (png_const_bytep)text, text_len);
1618:fltk-1.3.4-1/png/pngwutil.c **** 
1619:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_end(png_ptr);
1620:fltk-1.3.4-1/png/pngwutil.c **** }
1621:fltk-1.3.4-1/png/pngwutil.c **** #endif
1622:fltk-1.3.4-1/png/pngwutil.c **** 
1623:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_zTXt_SUPPORTED
1624:fltk-1.3.4-1/png/pngwutil.c **** /* Write a compressed text chunk */
1625:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
1626:fltk-1.3.4-1/png/pngwutil.c **** png_write_zTXt(png_structrp png_ptr, png_const_charp key, png_const_charp text,
1627:fltk-1.3.4-1/png/pngwutil.c ****     int compression)
1628:fltk-1.3.4-1/png/pngwutil.c **** {
1629:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 key_len;
1630:fltk-1.3.4-1/png/pngwutil.c ****    png_byte new_key[81];
1631:fltk-1.3.4-1/png/pngwutil.c ****    compression_state comp;
1632:fltk-1.3.4-1/png/pngwutil.c **** 
1633:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_write_zTXt");
1634:fltk-1.3.4-1/png/pngwutil.c **** 
1635:fltk-1.3.4-1/png/pngwutil.c ****    if (compression == PNG_TEXT_COMPRESSION_NONE)
1636:fltk-1.3.4-1/png/pngwutil.c ****    {
1637:fltk-1.3.4-1/png/pngwutil.c ****       png_write_tEXt(png_ptr, key, text, 0);
1638:fltk-1.3.4-1/png/pngwutil.c ****       return;
1639:fltk-1.3.4-1/png/pngwutil.c ****    }
1640:fltk-1.3.4-1/png/pngwutil.c **** 
1641:fltk-1.3.4-1/png/pngwutil.c ****    if (compression != PNG_TEXT_COMPRESSION_zTXt)
1642:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "zTXt: invalid compression type");
1643:fltk-1.3.4-1/png/pngwutil.c **** 
1644:fltk-1.3.4-1/png/pngwutil.c ****    key_len = png_check_keyword(png_ptr, key, new_key);
1645:fltk-1.3.4-1/png/pngwutil.c **** 
1646:fltk-1.3.4-1/png/pngwutil.c ****    if (key_len == 0)
1647:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "zTXt: invalid keyword");
1648:fltk-1.3.4-1/png/pngwutil.c **** 
1649:fltk-1.3.4-1/png/pngwutil.c ****    /* Add the compression method and 1 for the keyword separator. */
1650:fltk-1.3.4-1/png/pngwutil.c ****    new_key[++key_len] = PNG_COMPRESSION_TYPE_BASE;
1651:fltk-1.3.4-1/png/pngwutil.c ****    ++key_len;
1652:fltk-1.3.4-1/png/pngwutil.c **** 
1653:fltk-1.3.4-1/png/pngwutil.c ****    /* Compute the compressed data; do it now for the length */
1654:fltk-1.3.4-1/png/pngwutil.c ****    png_text_compress_init(&comp, (png_const_bytep)text,
1655:fltk-1.3.4-1/png/pngwutil.c ****       text == NULL ? 0 : strlen(text));
1656:fltk-1.3.4-1/png/pngwutil.c **** 
1657:fltk-1.3.4-1/png/pngwutil.c ****    if (png_text_compress(png_ptr, png_zTXt, &comp, key_len) != Z_OK)
1658:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, png_ptr->zstream.msg);
1659:fltk-1.3.4-1/png/pngwutil.c **** 
1660:fltk-1.3.4-1/png/pngwutil.c ****    /* Write start of chunk */
1661:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_header(png_ptr, png_zTXt, key_len + comp.output_len);
1662:fltk-1.3.4-1/png/pngwutil.c **** 
1663:fltk-1.3.4-1/png/pngwutil.c ****    /* Write key */
1664:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_data(png_ptr, new_key, key_len);
1665:fltk-1.3.4-1/png/pngwutil.c **** 
1666:fltk-1.3.4-1/png/pngwutil.c ****    /* Write the compressed data */
1667:fltk-1.3.4-1/png/pngwutil.c ****    png_write_compressed_data_out(png_ptr, &comp);
1668:fltk-1.3.4-1/png/pngwutil.c **** 
1669:fltk-1.3.4-1/png/pngwutil.c ****    /* Close the chunk */
1670:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_end(png_ptr);
1671:fltk-1.3.4-1/png/pngwutil.c **** }
1672:fltk-1.3.4-1/png/pngwutil.c **** #endif
1673:fltk-1.3.4-1/png/pngwutil.c **** 
1674:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_iTXt_SUPPORTED
1675:fltk-1.3.4-1/png/pngwutil.c **** /* Write an iTXt chunk */
1676:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
1677:fltk-1.3.4-1/png/pngwutil.c **** png_write_iTXt(png_structrp png_ptr, int compression, png_const_charp key,
1678:fltk-1.3.4-1/png/pngwutil.c ****     png_const_charp lang, png_const_charp lang_key, png_const_charp text)
1679:fltk-1.3.4-1/png/pngwutil.c **** {
1680:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 key_len, prefix_len;
1681:fltk-1.3.4-1/png/pngwutil.c ****    png_size_t lang_len, lang_key_len;
1682:fltk-1.3.4-1/png/pngwutil.c ****    png_byte new_key[82];
1683:fltk-1.3.4-1/png/pngwutil.c ****    compression_state comp;
1684:fltk-1.3.4-1/png/pngwutil.c **** 
1685:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_write_iTXt");
1686:fltk-1.3.4-1/png/pngwutil.c **** 
1687:fltk-1.3.4-1/png/pngwutil.c ****    key_len = png_check_keyword(png_ptr, key, new_key);
1688:fltk-1.3.4-1/png/pngwutil.c **** 
1689:fltk-1.3.4-1/png/pngwutil.c ****    if (key_len == 0)
1690:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "iTXt: invalid keyword");
1691:fltk-1.3.4-1/png/pngwutil.c **** 
1692:fltk-1.3.4-1/png/pngwutil.c ****    /* Set the compression flag */
1693:fltk-1.3.4-1/png/pngwutil.c ****    switch (compression)
1694:fltk-1.3.4-1/png/pngwutil.c ****    {
1695:fltk-1.3.4-1/png/pngwutil.c ****       case PNG_ITXT_COMPRESSION_NONE:
1696:fltk-1.3.4-1/png/pngwutil.c ****       case PNG_TEXT_COMPRESSION_NONE:
1697:fltk-1.3.4-1/png/pngwutil.c ****          compression = new_key[++key_len] = 0; /* no compression */
1698:fltk-1.3.4-1/png/pngwutil.c ****          break;
1699:fltk-1.3.4-1/png/pngwutil.c **** 
1700:fltk-1.3.4-1/png/pngwutil.c ****       case PNG_TEXT_COMPRESSION_zTXt:
1701:fltk-1.3.4-1/png/pngwutil.c ****       case PNG_ITXT_COMPRESSION_zTXt:
1702:fltk-1.3.4-1/png/pngwutil.c ****          compression = new_key[++key_len] = 1; /* compressed */
1703:fltk-1.3.4-1/png/pngwutil.c ****          break;
1704:fltk-1.3.4-1/png/pngwutil.c **** 
1705:fltk-1.3.4-1/png/pngwutil.c ****       default:
1706:fltk-1.3.4-1/png/pngwutil.c ****          png_error(png_ptr, "iTXt: invalid compression");
1707:fltk-1.3.4-1/png/pngwutil.c ****    }
1708:fltk-1.3.4-1/png/pngwutil.c **** 
1709:fltk-1.3.4-1/png/pngwutil.c ****    new_key[++key_len] = PNG_COMPRESSION_TYPE_BASE;
1710:fltk-1.3.4-1/png/pngwutil.c ****    ++key_len; /* for the keywod separator */
1711:fltk-1.3.4-1/png/pngwutil.c **** 
1712:fltk-1.3.4-1/png/pngwutil.c ****    /* We leave it to the application to meet PNG-1.0 requirements on the
1713:fltk-1.3.4-1/png/pngwutil.c ****     * contents of the text.  PNG-1.0 through PNG-1.2 discourage the use of
1714:fltk-1.3.4-1/png/pngwutil.c ****     * any non-Latin-1 characters except for NEWLINE.  ISO PNG, however,
1715:fltk-1.3.4-1/png/pngwutil.c ****     * specifies that the text is UTF-8 and this really doesn't require any
1716:fltk-1.3.4-1/png/pngwutil.c ****     * checking.
1717:fltk-1.3.4-1/png/pngwutil.c ****     *
1718:fltk-1.3.4-1/png/pngwutil.c ****     * The NUL character is forbidden by PNG-1.0 through PNG-1.2 and ISO PNG.
1719:fltk-1.3.4-1/png/pngwutil.c ****     *
1720:fltk-1.3.4-1/png/pngwutil.c ****     * TODO: validate the language tag correctly (see the spec.)
1721:fltk-1.3.4-1/png/pngwutil.c ****     */
1722:fltk-1.3.4-1/png/pngwutil.c ****    if (lang == NULL) lang = ""; /* empty language is valid */
1723:fltk-1.3.4-1/png/pngwutil.c ****    lang_len = strlen(lang)+1;
1724:fltk-1.3.4-1/png/pngwutil.c ****    if (lang_key == NULL) lang_key = ""; /* may be empty */
1725:fltk-1.3.4-1/png/pngwutil.c ****    lang_key_len = strlen(lang_key)+1;
1726:fltk-1.3.4-1/png/pngwutil.c ****    if (text == NULL) text = ""; /* may be empty */
1727:fltk-1.3.4-1/png/pngwutil.c **** 
1728:fltk-1.3.4-1/png/pngwutil.c ****    prefix_len = key_len;
1729:fltk-1.3.4-1/png/pngwutil.c ****    if (lang_len > PNG_UINT_31_MAX-prefix_len)
1730:fltk-1.3.4-1/png/pngwutil.c ****       prefix_len = PNG_UINT_31_MAX;
1731:fltk-1.3.4-1/png/pngwutil.c ****    else
1732:fltk-1.3.4-1/png/pngwutil.c ****       prefix_len = (png_uint_32)(prefix_len + lang_len);
1733:fltk-1.3.4-1/png/pngwutil.c **** 
1734:fltk-1.3.4-1/png/pngwutil.c ****    if (lang_key_len > PNG_UINT_31_MAX-prefix_len)
1735:fltk-1.3.4-1/png/pngwutil.c ****       prefix_len = PNG_UINT_31_MAX;
1736:fltk-1.3.4-1/png/pngwutil.c ****    else
1737:fltk-1.3.4-1/png/pngwutil.c ****       prefix_len = (png_uint_32)(prefix_len + lang_key_len);
1738:fltk-1.3.4-1/png/pngwutil.c **** 
1739:fltk-1.3.4-1/png/pngwutil.c ****    png_text_compress_init(&comp, (png_const_bytep)text, strlen(text));
1740:fltk-1.3.4-1/png/pngwutil.c **** 
1741:fltk-1.3.4-1/png/pngwutil.c ****    if (compression != 0)
1742:fltk-1.3.4-1/png/pngwutil.c ****    {
1743:fltk-1.3.4-1/png/pngwutil.c ****       if (png_text_compress(png_ptr, png_iTXt, &comp, prefix_len) != Z_OK)
1744:fltk-1.3.4-1/png/pngwutil.c ****          png_error(png_ptr, png_ptr->zstream.msg);
1745:fltk-1.3.4-1/png/pngwutil.c ****    }
1746:fltk-1.3.4-1/png/pngwutil.c **** 
1747:fltk-1.3.4-1/png/pngwutil.c ****    else
1748:fltk-1.3.4-1/png/pngwutil.c ****    {
1749:fltk-1.3.4-1/png/pngwutil.c ****       if (comp.input_len > PNG_UINT_31_MAX-prefix_len)
1750:fltk-1.3.4-1/png/pngwutil.c ****          png_error(png_ptr, "iTXt: uncompressed text too long");
1751:fltk-1.3.4-1/png/pngwutil.c **** 
1752:fltk-1.3.4-1/png/pngwutil.c ****       /* So the string will fit in a chunk: */
1753:fltk-1.3.4-1/png/pngwutil.c ****       comp.output_len = (png_uint_32)/*SAFE*/comp.input_len;
1754:fltk-1.3.4-1/png/pngwutil.c ****    }
1755:fltk-1.3.4-1/png/pngwutil.c **** 
1756:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_header(png_ptr, png_iTXt, comp.output_len + prefix_len);
1757:fltk-1.3.4-1/png/pngwutil.c **** 
1758:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_data(png_ptr, new_key, key_len);
1759:fltk-1.3.4-1/png/pngwutil.c **** 
1760:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_data(png_ptr, (png_const_bytep)lang, lang_len);
1761:fltk-1.3.4-1/png/pngwutil.c **** 
1762:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_data(png_ptr, (png_const_bytep)lang_key, lang_key_len);
1763:fltk-1.3.4-1/png/pngwutil.c **** 
1764:fltk-1.3.4-1/png/pngwutil.c ****    if (compression != 0)
1765:fltk-1.3.4-1/png/pngwutil.c ****       png_write_compressed_data_out(png_ptr, &comp);
1766:fltk-1.3.4-1/png/pngwutil.c **** 
1767:fltk-1.3.4-1/png/pngwutil.c ****    else
1768:fltk-1.3.4-1/png/pngwutil.c ****       png_write_chunk_data(png_ptr, (png_const_bytep)text, comp.input_len);
1769:fltk-1.3.4-1/png/pngwutil.c **** 
1770:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_end(png_ptr);
1771:fltk-1.3.4-1/png/pngwutil.c **** }
1772:fltk-1.3.4-1/png/pngwutil.c **** #endif
1773:fltk-1.3.4-1/png/pngwutil.c **** 
1774:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_oFFs_SUPPORTED
1775:fltk-1.3.4-1/png/pngwutil.c **** /* Write the oFFs chunk */
1776:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
1777:fltk-1.3.4-1/png/pngwutil.c **** png_write_oFFs(png_structrp png_ptr, png_int_32 x_offset, png_int_32 y_offset,
1778:fltk-1.3.4-1/png/pngwutil.c ****     int unit_type)
1779:fltk-1.3.4-1/png/pngwutil.c **** {
1780:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[9];
1781:fltk-1.3.4-1/png/pngwutil.c **** 
1782:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_write_oFFs");
1783:fltk-1.3.4-1/png/pngwutil.c **** 
1784:fltk-1.3.4-1/png/pngwutil.c ****    if (unit_type >= PNG_OFFSET_LAST)
1785:fltk-1.3.4-1/png/pngwutil.c ****       png_warning(png_ptr, "Unrecognized unit type for oFFs chunk");
1786:fltk-1.3.4-1/png/pngwutil.c **** 
1787:fltk-1.3.4-1/png/pngwutil.c ****    png_save_int_32(buf, x_offset);
1788:fltk-1.3.4-1/png/pngwutil.c ****    png_save_int_32(buf + 4, y_offset);
1789:fltk-1.3.4-1/png/pngwutil.c ****    buf[8] = (png_byte)unit_type;
1790:fltk-1.3.4-1/png/pngwutil.c **** 
1791:fltk-1.3.4-1/png/pngwutil.c ****    png_write_complete_chunk(png_ptr, png_oFFs, buf, (png_size_t)9);
1792:fltk-1.3.4-1/png/pngwutil.c **** }
1793:fltk-1.3.4-1/png/pngwutil.c **** #endif
1794:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_pCAL_SUPPORTED
1795:fltk-1.3.4-1/png/pngwutil.c **** /* Write the pCAL chunk (described in the PNG extensions document) */
1796:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
1797:fltk-1.3.4-1/png/pngwutil.c **** png_write_pCAL(png_structrp png_ptr, png_charp purpose, png_int_32 X0,
1798:fltk-1.3.4-1/png/pngwutil.c ****     png_int_32 X1, int type, int nparams, png_const_charp units,
1799:fltk-1.3.4-1/png/pngwutil.c ****     png_charpp params)
1800:fltk-1.3.4-1/png/pngwutil.c **** {
1801:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 purpose_len;
1802:fltk-1.3.4-1/png/pngwutil.c ****    png_size_t units_len, total_len;
1803:fltk-1.3.4-1/png/pngwutil.c ****    png_size_tp params_len;
1804:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[10];
1805:fltk-1.3.4-1/png/pngwutil.c ****    png_byte new_purpose[80];
1806:fltk-1.3.4-1/png/pngwutil.c ****    int i;
1807:fltk-1.3.4-1/png/pngwutil.c **** 
1808:fltk-1.3.4-1/png/pngwutil.c ****    png_debug1(1, "in png_write_pCAL (%d parameters)", nparams);
1809:fltk-1.3.4-1/png/pngwutil.c **** 
1810:fltk-1.3.4-1/png/pngwutil.c ****    if (type >= PNG_EQUATION_LAST)
1811:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "Unrecognized equation type for pCAL chunk");
1812:fltk-1.3.4-1/png/pngwutil.c **** 
1813:fltk-1.3.4-1/png/pngwutil.c ****    purpose_len = png_check_keyword(png_ptr, purpose, new_purpose);
1814:fltk-1.3.4-1/png/pngwutil.c **** 
1815:fltk-1.3.4-1/png/pngwutil.c ****    if (purpose_len == 0)
1816:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "pCAL: invalid keyword");
1817:fltk-1.3.4-1/png/pngwutil.c **** 
1818:fltk-1.3.4-1/png/pngwutil.c ****    ++purpose_len; /* terminator */
1819:fltk-1.3.4-1/png/pngwutil.c **** 
1820:fltk-1.3.4-1/png/pngwutil.c ****    png_debug1(3, "pCAL purpose length = %d", (int)purpose_len);
1821:fltk-1.3.4-1/png/pngwutil.c ****    units_len = strlen(units) + (nparams == 0 ? 0 : 1);
1822:fltk-1.3.4-1/png/pngwutil.c ****    png_debug1(3, "pCAL units length = %d", (int)units_len);
1823:fltk-1.3.4-1/png/pngwutil.c ****    total_len = purpose_len + units_len + 10;
1824:fltk-1.3.4-1/png/pngwutil.c **** 
1825:fltk-1.3.4-1/png/pngwutil.c ****    params_len = (png_size_tp)png_malloc(png_ptr,
1826:fltk-1.3.4-1/png/pngwutil.c ****        (png_alloc_size_t)(nparams * (sizeof (png_size_t))));
1827:fltk-1.3.4-1/png/pngwutil.c **** 
1828:fltk-1.3.4-1/png/pngwutil.c ****    /* Find the length of each parameter, making sure we don't count the
1829:fltk-1.3.4-1/png/pngwutil.c ****     * null terminator for the last parameter.
1830:fltk-1.3.4-1/png/pngwutil.c ****     */
1831:fltk-1.3.4-1/png/pngwutil.c ****    for (i = 0; i < nparams; i++)
1832:fltk-1.3.4-1/png/pngwutil.c ****    {
1833:fltk-1.3.4-1/png/pngwutil.c ****       params_len[i] = strlen(params[i]) + (i == nparams - 1 ? 0 : 1);
1834:fltk-1.3.4-1/png/pngwutil.c ****       png_debug2(3, "pCAL parameter %d length = %lu", i,
1835:fltk-1.3.4-1/png/pngwutil.c ****           (unsigned long)params_len[i]);
1836:fltk-1.3.4-1/png/pngwutil.c ****       total_len += params_len[i];
1837:fltk-1.3.4-1/png/pngwutil.c ****    }
1838:fltk-1.3.4-1/png/pngwutil.c **** 
1839:fltk-1.3.4-1/png/pngwutil.c ****    png_debug1(3, "pCAL total length = %d", (int)total_len);
1840:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_header(png_ptr, png_pCAL, (png_uint_32)total_len);
1841:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_data(png_ptr, new_purpose, purpose_len);
1842:fltk-1.3.4-1/png/pngwutil.c ****    png_save_int_32(buf, X0);
1843:fltk-1.3.4-1/png/pngwutil.c ****    png_save_int_32(buf + 4, X1);
1844:fltk-1.3.4-1/png/pngwutil.c ****    buf[8] = (png_byte)type;
1845:fltk-1.3.4-1/png/pngwutil.c ****    buf[9] = (png_byte)nparams;
1846:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_data(png_ptr, buf, (png_size_t)10);
1847:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_data(png_ptr, (png_const_bytep)units, (png_size_t)units_len);
1848:fltk-1.3.4-1/png/pngwutil.c **** 
1849:fltk-1.3.4-1/png/pngwutil.c ****    for (i = 0; i < nparams; i++)
1850:fltk-1.3.4-1/png/pngwutil.c ****    {
1851:fltk-1.3.4-1/png/pngwutil.c ****       png_write_chunk_data(png_ptr, (png_const_bytep)params[i], params_len[i]);
1852:fltk-1.3.4-1/png/pngwutil.c ****    }
1853:fltk-1.3.4-1/png/pngwutil.c **** 
1854:fltk-1.3.4-1/png/pngwutil.c ****    png_free(png_ptr, params_len);
1855:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_end(png_ptr);
1856:fltk-1.3.4-1/png/pngwutil.c **** }
1857:fltk-1.3.4-1/png/pngwutil.c **** #endif
1858:fltk-1.3.4-1/png/pngwutil.c **** 
1859:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_sCAL_SUPPORTED
1860:fltk-1.3.4-1/png/pngwutil.c **** /* Write the sCAL chunk */
1861:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
1862:fltk-1.3.4-1/png/pngwutil.c **** png_write_sCAL_s(png_structrp png_ptr, int unit, png_const_charp width,
1863:fltk-1.3.4-1/png/pngwutil.c ****     png_const_charp height)
1864:fltk-1.3.4-1/png/pngwutil.c **** {
1865:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[64];
1866:fltk-1.3.4-1/png/pngwutil.c ****    png_size_t wlen, hlen, total_len;
1867:fltk-1.3.4-1/png/pngwutil.c **** 
1868:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_write_sCAL_s");
1869:fltk-1.3.4-1/png/pngwutil.c **** 
1870:fltk-1.3.4-1/png/pngwutil.c ****    wlen = strlen(width);
1871:fltk-1.3.4-1/png/pngwutil.c ****    hlen = strlen(height);
1872:fltk-1.3.4-1/png/pngwutil.c ****    total_len = wlen + hlen + 2;
1873:fltk-1.3.4-1/png/pngwutil.c **** 
1874:fltk-1.3.4-1/png/pngwutil.c ****    if (total_len > 64)
1875:fltk-1.3.4-1/png/pngwutil.c ****    {
1876:fltk-1.3.4-1/png/pngwutil.c ****       png_warning(png_ptr, "Can't write sCAL (buffer too small)");
1877:fltk-1.3.4-1/png/pngwutil.c ****       return;
1878:fltk-1.3.4-1/png/pngwutil.c ****    }
1879:fltk-1.3.4-1/png/pngwutil.c **** 
1880:fltk-1.3.4-1/png/pngwutil.c ****    buf[0] = (png_byte)unit;
1881:fltk-1.3.4-1/png/pngwutil.c ****    memcpy(buf + 1, width, wlen + 1);      /* Append the '\0' here */
1882:fltk-1.3.4-1/png/pngwutil.c ****    memcpy(buf + wlen + 2, height, hlen);  /* Do NOT append the '\0' here */
1883:fltk-1.3.4-1/png/pngwutil.c **** 
1884:fltk-1.3.4-1/png/pngwutil.c ****    png_debug1(3, "sCAL total length = %u", (unsigned int)total_len);
1885:fltk-1.3.4-1/png/pngwutil.c ****    png_write_complete_chunk(png_ptr, png_sCAL, buf, total_len);
1886:fltk-1.3.4-1/png/pngwutil.c **** }
1887:fltk-1.3.4-1/png/pngwutil.c **** #endif
1888:fltk-1.3.4-1/png/pngwutil.c **** 
1889:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_pHYs_SUPPORTED
1890:fltk-1.3.4-1/png/pngwutil.c **** /* Write the pHYs chunk */
1891:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
1892:fltk-1.3.4-1/png/pngwutil.c **** png_write_pHYs(png_structrp png_ptr, png_uint_32 x_pixels_per_unit,
1893:fltk-1.3.4-1/png/pngwutil.c ****     png_uint_32 y_pixels_per_unit,
1894:fltk-1.3.4-1/png/pngwutil.c ****     int unit_type)
1895:fltk-1.3.4-1/png/pngwutil.c **** {
1896:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[9];
1897:fltk-1.3.4-1/png/pngwutil.c **** 
1898:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_write_pHYs");
1899:fltk-1.3.4-1/png/pngwutil.c **** 
1900:fltk-1.3.4-1/png/pngwutil.c ****    if (unit_type >= PNG_RESOLUTION_LAST)
1901:fltk-1.3.4-1/png/pngwutil.c ****       png_warning(png_ptr, "Unrecognized unit type for pHYs chunk");
1902:fltk-1.3.4-1/png/pngwutil.c **** 
1903:fltk-1.3.4-1/png/pngwutil.c ****    png_save_uint_32(buf, x_pixels_per_unit);
1904:fltk-1.3.4-1/png/pngwutil.c ****    png_save_uint_32(buf + 4, y_pixels_per_unit);
1905:fltk-1.3.4-1/png/pngwutil.c ****    buf[8] = (png_byte)unit_type;
1906:fltk-1.3.4-1/png/pngwutil.c **** 
1907:fltk-1.3.4-1/png/pngwutil.c ****    png_write_complete_chunk(png_ptr, png_pHYs, buf, (png_size_t)9);
1908:fltk-1.3.4-1/png/pngwutil.c **** }
1909:fltk-1.3.4-1/png/pngwutil.c **** #endif
1910:fltk-1.3.4-1/png/pngwutil.c **** 
1911:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_tIME_SUPPORTED
1912:fltk-1.3.4-1/png/pngwutil.c **** /* Write the tIME chunk.  Use either png_convert_from_struct_tm()
1913:fltk-1.3.4-1/png/pngwutil.c ****  * or png_convert_from_time_t(), or fill in the structure yourself.
1914:fltk-1.3.4-1/png/pngwutil.c ****  */
1915:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
1916:fltk-1.3.4-1/png/pngwutil.c **** png_write_tIME(png_structrp png_ptr, png_const_timep mod_time)
1917:fltk-1.3.4-1/png/pngwutil.c **** {
1918:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[7];
1919:fltk-1.3.4-1/png/pngwutil.c **** 
1920:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_write_tIME");
1921:fltk-1.3.4-1/png/pngwutil.c **** 
1922:fltk-1.3.4-1/png/pngwutil.c ****    if (mod_time->month  > 12 || mod_time->month  < 1 ||
1923:fltk-1.3.4-1/png/pngwutil.c ****        mod_time->day    > 31 || mod_time->day    < 1 ||
1924:fltk-1.3.4-1/png/pngwutil.c ****        mod_time->hour   > 23 || mod_time->second > 60)
1925:fltk-1.3.4-1/png/pngwutil.c ****    {
1926:fltk-1.3.4-1/png/pngwutil.c ****       png_warning(png_ptr, "Invalid time specified for tIME chunk");
1927:fltk-1.3.4-1/png/pngwutil.c ****       return;
1928:fltk-1.3.4-1/png/pngwutil.c ****    }
1929:fltk-1.3.4-1/png/pngwutil.c **** 
1930:fltk-1.3.4-1/png/pngwutil.c ****    png_save_uint_16(buf, mod_time->year);
1931:fltk-1.3.4-1/png/pngwutil.c ****    buf[2] = mod_time->month;
1932:fltk-1.3.4-1/png/pngwutil.c ****    buf[3] = mod_time->day;
1933:fltk-1.3.4-1/png/pngwutil.c ****    buf[4] = mod_time->hour;
1934:fltk-1.3.4-1/png/pngwutil.c ****    buf[5] = mod_time->minute;
1935:fltk-1.3.4-1/png/pngwutil.c ****    buf[6] = mod_time->second;
1936:fltk-1.3.4-1/png/pngwutil.c **** 
1937:fltk-1.3.4-1/png/pngwutil.c ****    png_write_complete_chunk(png_ptr, png_tIME, buf, (png_size_t)7);
1938:fltk-1.3.4-1/png/pngwutil.c **** }
1939:fltk-1.3.4-1/png/pngwutil.c **** #endif
1940:fltk-1.3.4-1/png/pngwutil.c **** 
1941:fltk-1.3.4-1/png/pngwutil.c **** /* Initializes the row writing capability of libpng */
1942:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
1943:fltk-1.3.4-1/png/pngwutil.c **** png_write_start_row(png_structrp png_ptr)
1944:fltk-1.3.4-1/png/pngwutil.c **** {
1945:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_INTERLACING_SUPPORTED
1946:fltk-1.3.4-1/png/pngwutil.c ****    /* Arrays to facilitate easy interlacing - use pass (0 - 6) as index */
1947:fltk-1.3.4-1/png/pngwutil.c **** 
1948:fltk-1.3.4-1/png/pngwutil.c ****    /* Start of interlace block */
1949:fltk-1.3.4-1/png/pngwutil.c ****    static PNG_CONST png_byte png_pass_start[7] = {0, 4, 0, 2, 0, 1, 0};
1950:fltk-1.3.4-1/png/pngwutil.c **** 
1951:fltk-1.3.4-1/png/pngwutil.c ****    /* Offset to next interlace block */
1952:fltk-1.3.4-1/png/pngwutil.c ****    static PNG_CONST png_byte png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1};
1953:fltk-1.3.4-1/png/pngwutil.c **** 
1954:fltk-1.3.4-1/png/pngwutil.c ****    /* Start of interlace block in the y direction */
1955:fltk-1.3.4-1/png/pngwutil.c ****    static PNG_CONST png_byte png_pass_ystart[7] = {0, 0, 4, 0, 2, 0, 1};
1956:fltk-1.3.4-1/png/pngwutil.c **** 
1957:fltk-1.3.4-1/png/pngwutil.c ****    /* Offset to next interlace block in the y direction */
1958:fltk-1.3.4-1/png/pngwutil.c ****    static PNG_CONST png_byte png_pass_yinc[7] = {8, 8, 8, 4, 4, 2, 2};
1959:fltk-1.3.4-1/png/pngwutil.c **** #endif
1960:fltk-1.3.4-1/png/pngwutil.c **** 
1961:fltk-1.3.4-1/png/pngwutil.c ****    png_alloc_size_t buf_size;
1962:fltk-1.3.4-1/png/pngwutil.c ****    int usr_pixel_depth;
1963:fltk-1.3.4-1/png/pngwutil.c **** 
1964:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_write_start_row");
1965:fltk-1.3.4-1/png/pngwutil.c **** 
1966:fltk-1.3.4-1/png/pngwutil.c ****    usr_pixel_depth = png_ptr->usr_channels * png_ptr->usr_bit_depth;
1967:fltk-1.3.4-1/png/pngwutil.c ****    buf_size = PNG_ROWBYTES(usr_pixel_depth, png_ptr->width) + 1;
1968:fltk-1.3.4-1/png/pngwutil.c **** 
1969:fltk-1.3.4-1/png/pngwutil.c ****    /* 1.5.6: added to allow checking in the row write code. */
1970:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->transformed_pixel_depth = png_ptr->pixel_depth;
1971:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->maximum_pixel_depth = (png_byte)usr_pixel_depth;
1972:fltk-1.3.4-1/png/pngwutil.c **** 
1973:fltk-1.3.4-1/png/pngwutil.c ****    /* Set up row buffer */
1974:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->row_buf = (png_bytep)png_malloc(png_ptr, buf_size);
1975:fltk-1.3.4-1/png/pngwutil.c **** 
1976:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->row_buf[0] = PNG_FILTER_VALUE_NONE;
1977:fltk-1.3.4-1/png/pngwutil.c **** 
1978:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_FILTER_SUPPORTED
1979:fltk-1.3.4-1/png/pngwutil.c ****    /* Set up filtering buffer, if using this filter */
1980:fltk-1.3.4-1/png/pngwutil.c ****    if (png_ptr->do_filter & PNG_FILTER_SUB)
1981:fltk-1.3.4-1/png/pngwutil.c ****    {
1982:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->sub_row = (png_bytep)png_malloc(png_ptr, png_ptr->rowbytes + 1);
1983:fltk-1.3.4-1/png/pngwutil.c **** 
1984:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->sub_row[0] = PNG_FILTER_VALUE_SUB;
1985:fltk-1.3.4-1/png/pngwutil.c ****    }
1986:fltk-1.3.4-1/png/pngwutil.c **** 
1987:fltk-1.3.4-1/png/pngwutil.c ****    /* We only need to keep the previous row if we are using one of these. */
1988:fltk-1.3.4-1/png/pngwutil.c ****    if ((png_ptr->do_filter &
1989:fltk-1.3.4-1/png/pngwutil.c ****       (PNG_FILTER_AVG | PNG_FILTER_UP | PNG_FILTER_PAETH)) != 0)
1990:fltk-1.3.4-1/png/pngwutil.c ****    {
1991:fltk-1.3.4-1/png/pngwutil.c ****       /* Set up previous row buffer */
1992:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->prev_row = (png_bytep)png_calloc(png_ptr, buf_size);
1993:fltk-1.3.4-1/png/pngwutil.c **** 
1994:fltk-1.3.4-1/png/pngwutil.c ****       if ((png_ptr->do_filter & PNG_FILTER_UP) != 0)
1995:fltk-1.3.4-1/png/pngwutil.c ****       {
1996:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->up_row = (png_bytep)png_malloc(png_ptr,
1997:fltk-1.3.4-1/png/pngwutil.c ****             png_ptr->rowbytes + 1);
1998:fltk-1.3.4-1/png/pngwutil.c **** 
1999:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->up_row[0] = PNG_FILTER_VALUE_UP;
2000:fltk-1.3.4-1/png/pngwutil.c ****       }
2001:fltk-1.3.4-1/png/pngwutil.c **** 
2002:fltk-1.3.4-1/png/pngwutil.c ****       if ((png_ptr->do_filter & PNG_FILTER_AVG) != 0)
2003:fltk-1.3.4-1/png/pngwutil.c ****       {
2004:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->avg_row = (png_bytep)png_malloc(png_ptr,
2005:fltk-1.3.4-1/png/pngwutil.c ****              png_ptr->rowbytes + 1);
2006:fltk-1.3.4-1/png/pngwutil.c **** 
2007:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->avg_row[0] = PNG_FILTER_VALUE_AVG;
2008:fltk-1.3.4-1/png/pngwutil.c ****       }
2009:fltk-1.3.4-1/png/pngwutil.c **** 
2010:fltk-1.3.4-1/png/pngwutil.c ****       if ((png_ptr->do_filter & PNG_FILTER_PAETH) != 0)
2011:fltk-1.3.4-1/png/pngwutil.c ****       {
2012:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->paeth_row = (png_bytep)png_malloc(png_ptr,
2013:fltk-1.3.4-1/png/pngwutil.c ****              png_ptr->rowbytes + 1);
2014:fltk-1.3.4-1/png/pngwutil.c **** 
2015:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->paeth_row[0] = PNG_FILTER_VALUE_PAETH;
2016:fltk-1.3.4-1/png/pngwutil.c ****       }
2017:fltk-1.3.4-1/png/pngwutil.c ****    }
2018:fltk-1.3.4-1/png/pngwutil.c **** #endif /* WRITE_FILTER */
2019:fltk-1.3.4-1/png/pngwutil.c **** 
2020:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_INTERLACING_SUPPORTED
2021:fltk-1.3.4-1/png/pngwutil.c ****    /* If interlaced, we need to set up width and height of pass */
2022:fltk-1.3.4-1/png/pngwutil.c ****    if (png_ptr->interlaced != 0)
2023:fltk-1.3.4-1/png/pngwutil.c ****    {
2024:fltk-1.3.4-1/png/pngwutil.c ****       if ((png_ptr->transformations & PNG_INTERLACE) == 0)
2025:fltk-1.3.4-1/png/pngwutil.c ****       {
2026:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->num_rows = (png_ptr->height + png_pass_yinc[0] - 1 -
2027:fltk-1.3.4-1/png/pngwutil.c ****              png_pass_ystart[0]) / png_pass_yinc[0];
2028:fltk-1.3.4-1/png/pngwutil.c **** 
2029:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->usr_width = (png_ptr->width + png_pass_inc[0] - 1 -
2030:fltk-1.3.4-1/png/pngwutil.c ****              png_pass_start[0]) / png_pass_inc[0];
2031:fltk-1.3.4-1/png/pngwutil.c ****       }
2032:fltk-1.3.4-1/png/pngwutil.c **** 
2033:fltk-1.3.4-1/png/pngwutil.c ****       else
2034:fltk-1.3.4-1/png/pngwutil.c ****       {
2035:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->num_rows = png_ptr->height;
2036:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->usr_width = png_ptr->width;
2037:fltk-1.3.4-1/png/pngwutil.c ****       }
2038:fltk-1.3.4-1/png/pngwutil.c ****    }
2039:fltk-1.3.4-1/png/pngwutil.c **** 
2040:fltk-1.3.4-1/png/pngwutil.c ****    else
2041:fltk-1.3.4-1/png/pngwutil.c **** #endif
2042:fltk-1.3.4-1/png/pngwutil.c ****    {
2043:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->num_rows = png_ptr->height;
2044:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->usr_width = png_ptr->width;
2045:fltk-1.3.4-1/png/pngwutil.c ****    }
2046:fltk-1.3.4-1/png/pngwutil.c **** }
2047:fltk-1.3.4-1/png/pngwutil.c **** 
2048:fltk-1.3.4-1/png/pngwutil.c **** /* Internal use only.  Called when finished processing a row of data. */
2049:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
2050:fltk-1.3.4-1/png/pngwutil.c **** png_write_finish_row(png_structrp png_ptr)
 3211              		.loc 1 2050 0
 3212              		.cfi_startproc
 3213              	.LVL335:
2051:fltk-1.3.4-1/png/pngwutil.c **** {
2052:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_INTERLACING_SUPPORTED
2053:fltk-1.3.4-1/png/pngwutil.c ****    /* Arrays to facilitate easy interlacing - use pass (0 - 6) as index */
2054:fltk-1.3.4-1/png/pngwutil.c **** 
2055:fltk-1.3.4-1/png/pngwutil.c ****    /* Start of interlace block */
2056:fltk-1.3.4-1/png/pngwutil.c ****    static PNG_CONST png_byte png_pass_start[7] = {0, 4, 0, 2, 0, 1, 0};
2057:fltk-1.3.4-1/png/pngwutil.c **** 
2058:fltk-1.3.4-1/png/pngwutil.c ****    /* Offset to next interlace block */
2059:fltk-1.3.4-1/png/pngwutil.c ****    static PNG_CONST png_byte png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1};
2060:fltk-1.3.4-1/png/pngwutil.c **** 
2061:fltk-1.3.4-1/png/pngwutil.c ****    /* Start of interlace block in the y direction */
2062:fltk-1.3.4-1/png/pngwutil.c ****    static PNG_CONST png_byte png_pass_ystart[7] = {0, 0, 4, 0, 2, 0, 1};
2063:fltk-1.3.4-1/png/pngwutil.c **** 
2064:fltk-1.3.4-1/png/pngwutil.c ****    /* Offset to next interlace block in the y direction */
2065:fltk-1.3.4-1/png/pngwutil.c ****    static PNG_CONST png_byte png_pass_yinc[7] = {8, 8, 8, 4, 4, 2, 2};
2066:fltk-1.3.4-1/png/pngwutil.c **** #endif
2067:fltk-1.3.4-1/png/pngwutil.c **** 
2068:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_write_finish_row");
2069:fltk-1.3.4-1/png/pngwutil.c **** 
2070:fltk-1.3.4-1/png/pngwutil.c ****    /* Next row */
2071:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->row_number++;
2072:fltk-1.3.4-1/png/pngwutil.c **** 
2073:fltk-1.3.4-1/png/pngwutil.c ****    /* See if we are done */
2074:fltk-1.3.4-1/png/pngwutil.c ****    if (png_ptr->row_number < png_ptr->num_rows)
2075:fltk-1.3.4-1/png/pngwutil.c ****       return;
2076:fltk-1.3.4-1/png/pngwutil.c **** 
2077:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_INTERLACING_SUPPORTED
2078:fltk-1.3.4-1/png/pngwutil.c ****    /* If interlaced, go to next pass */
2079:fltk-1.3.4-1/png/pngwutil.c ****    if (png_ptr->interlaced != 0)
 3214              		.loc 1 2079 0
 3215 0000 80BF7402 		cmpb	$0, 628(%rdi)
 3215      000000
 3216 0007 0F849C00 		je	.L311
 3216      0000
2080:fltk-1.3.4-1/png/pngwutil.c ****    {
2081:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->row_number = 0;
2082:fltk-1.3.4-1/png/pngwutil.c ****       if ((png_ptr->transformations & PNG_INTERLACE) != 0)
 3217              		.loc 1 2082 0
 3218 000d F6873401 		testb	$2, 308(%rdi)
 3218      000002
2081:fltk-1.3.4-1/png/pngwutil.c ****       if ((png_ptr->transformations & PNG_INTERLACE) != 0)
 3219              		.loc 1 2081 0
 3220 0014 C7871402 		movl	$0, 532(%rdi)
 3220      00000000 
 3220      0000
2083:fltk-1.3.4-1/png/pngwutil.c ****       {
2084:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->pass++;
 3221              		.loc 1 2084 0
 3222 001e 0FB68775 		movzbl	629(%rdi), %eax
 3222      020000
2082:fltk-1.3.4-1/png/pngwutil.c ****       {
 3223              		.loc 1 2082 0
 3224 0025 0F859500 		jne	.L322
 3224      0000
 3225 002b 448D4001 		leal	1(%rax), %r8d
 3226 002f EB6B     		jmp	.L316
 3227              		.p2align 4,,10
 3228 0031 0F1F8000 		.p2align 3
 3228      000000
 3229              	.L315:
2085:fltk-1.3.4-1/png/pngwutil.c ****       }
2086:fltk-1.3.4-1/png/pngwutil.c **** 
2087:fltk-1.3.4-1/png/pngwutil.c ****       else
2088:fltk-1.3.4-1/png/pngwutil.c ****       {
2089:fltk-1.3.4-1/png/pngwutil.c ****          /* Loop until we find a non-zero width or height pass */
2090:fltk-1.3.4-1/png/pngwutil.c ****          do
2091:fltk-1.3.4-1/png/pngwutil.c ****          {
2092:fltk-1.3.4-1/png/pngwutil.c ****             png_ptr->pass++;
2093:fltk-1.3.4-1/png/pngwutil.c **** 
2094:fltk-1.3.4-1/png/pngwutil.c ****             if (png_ptr->pass >= 7)
2095:fltk-1.3.4-1/png/pngwutil.c ****                break;
2096:fltk-1.3.4-1/png/pngwutil.c **** 
2097:fltk-1.3.4-1/png/pngwutil.c ****             png_ptr->usr_width = (png_ptr->width +
2098:fltk-1.3.4-1/png/pngwutil.c ****                 png_pass_inc[png_ptr->pass] - 1 -
 3230              		.loc 1 2098 0
 3231 0038 410FB6F0 		movzbl	%r8b, %esi
2099:fltk-1.3.4-1/png/pngwutil.c ****                 png_pass_start[png_ptr->pass]) /
 3232              		.loc 1 2099 0
 3233 003c 8B87F801 		movl	504(%rdi), %eax
 3233      0000
2097:fltk-1.3.4-1/png/pngwutil.c ****                 png_pass_inc[png_ptr->pass] - 1 -
 3234              		.loc 1 2097 0
 3235 0042 0FB68E00 		movzbl	png_pass_inc.7095(%rsi), %ecx
 3235      000000
 3236              		.loc 1 2099 0
 3237 0049 0FB69600 		movzbl	png_pass_start.7094(%rsi), %edx
 3237      000000
2100:fltk-1.3.4-1/png/pngwutil.c ****                 png_pass_inc[png_ptr->pass];
2101:fltk-1.3.4-1/png/pngwutil.c **** 
2102:fltk-1.3.4-1/png/pngwutil.c ****             png_ptr->num_rows = (png_ptr->height +
 3238              		.loc 1 2102 0
 3239 0050 440FB68E 		movzbl	png_pass_yinc.7097(%rsi), %r9d
 3239      00000000 
2099:fltk-1.3.4-1/png/pngwutil.c ****                 png_pass_inc[png_ptr->pass];
 3240              		.loc 1 2099 0
 3241 0058 8D4401FF 		leal	-1(%rcx,%rax), %eax
 3242 005c 29D0     		subl	%edx, %eax
 3243 005e 31D2     		xorl	%edx, %edx
 3244 0060 F7F1     		divl	%ecx
2103:fltk-1.3.4-1/png/pngwutil.c ****                 png_pass_yinc[png_ptr->pass] - 1 -
2104:fltk-1.3.4-1/png/pngwutil.c ****                 png_pass_ystart[png_ptr->pass]) /
 3245              		.loc 1 2104 0
 3246 0062 0FB69600 		movzbl	png_pass_ystart.7096(%rsi), %edx
 3246      000000
2099:fltk-1.3.4-1/png/pngwutil.c ****                 png_pass_inc[png_ptr->pass];
 3247              		.loc 1 2099 0
 3248 0069 89C1     		movl	%eax, %ecx
2097:fltk-1.3.4-1/png/pngwutil.c ****                 png_pass_inc[png_ptr->pass] - 1 -
 3249              		.loc 1 2097 0
 3250 006b 89870402 		movl	%eax, 516(%rdi)
 3250      0000
 3251              		.loc 1 2104 0
 3252 0071 8B87FC01 		movl	508(%rdi), %eax
 3252      0000
 3253 0077 418D4401 		leal	-1(%r9,%rax), %eax
 3253      FF
 3254 007c 29D0     		subl	%edx, %eax
 3255 007e 31D2     		xorl	%edx, %edx
 3256 0080 41F7F1   		divl	%r9d
 3257 0083 418D5001 		leal	1(%r8), %edx
2105:fltk-1.3.4-1/png/pngwutil.c ****                 png_pass_yinc[png_ptr->pass];
2106:fltk-1.3.4-1/png/pngwutil.c **** 
2107:fltk-1.3.4-1/png/pngwutil.c ****             if ((png_ptr->transformations & PNG_INTERLACE) != 0)
2108:fltk-1.3.4-1/png/pngwutil.c ****                break;
2109:fltk-1.3.4-1/png/pngwutil.c **** 
2110:fltk-1.3.4-1/png/pngwutil.c ****          } while (png_ptr->usr_width == 0 || png_ptr->num_rows == 0);
 3258              		.loc 1 2110 0
 3259 0087 85C0     		testl	%eax, %eax
2102:fltk-1.3.4-1/png/pngwutil.c ****                 png_pass_yinc[png_ptr->pass] - 1 -
 3260              		.loc 1 2102 0
 3261 0089 89870002 		movl	%eax, 512(%rdi)
 3261      0000
 3262              		.loc 1 2110 0
 3263 008f 7408     		je	.L320
 3264 0091 85C9     		testl	%ecx, %ecx
 3265 0093 0F859700 		jne	.L323
 3265      0000
 3266              	.L320:
 3267 0099 4189D0   		movl	%edx, %r8d
 3268              	.L316:
2094:fltk-1.3.4-1/png/pngwutil.c ****                break;
 3269              		.loc 1 2094 0
 3270 009c 4180F806 		cmpb	$6, %r8b
 3271 00a0 7696     		jbe	.L315
 3272 00a2 44888775 		movb	%r8b, 629(%rdi)
 3272      020000
 3273              	.L311:
2111:fltk-1.3.4-1/png/pngwutil.c **** 
2112:fltk-1.3.4-1/png/pngwutil.c ****       }
2113:fltk-1.3.4-1/png/pngwutil.c **** 
2114:fltk-1.3.4-1/png/pngwutil.c ****       /* Reset the row above the image for the next pass */
2115:fltk-1.3.4-1/png/pngwutil.c ****       if (png_ptr->pass < 7)
2116:fltk-1.3.4-1/png/pngwutil.c ****       {
2117:fltk-1.3.4-1/png/pngwutil.c ****          if (png_ptr->prev_row != NULL)
2118:fltk-1.3.4-1/png/pngwutil.c ****             memset(png_ptr->prev_row, 0,
2119:fltk-1.3.4-1/png/pngwutil.c ****                 (png_size_t)(PNG_ROWBYTES(png_ptr->usr_channels*
2120:fltk-1.3.4-1/png/pngwutil.c ****                 png_ptr->usr_bit_depth, png_ptr->width)) + 1);
2121:fltk-1.3.4-1/png/pngwutil.c **** 
2122:fltk-1.3.4-1/png/pngwutil.c ****          return;
2123:fltk-1.3.4-1/png/pngwutil.c ****       }
2124:fltk-1.3.4-1/png/pngwutil.c ****    }
2125:fltk-1.3.4-1/png/pngwutil.c **** #endif
2126:fltk-1.3.4-1/png/pngwutil.c **** 
2127:fltk-1.3.4-1/png/pngwutil.c ****    /* If we get here, we've just written the last row, so we need
2128:fltk-1.3.4-1/png/pngwutil.c ****       to flush the compressor */
2129:fltk-1.3.4-1/png/pngwutil.c ****    png_compress_IDAT(png_ptr, NULL, 0, Z_FINISH);
 3274              		.loc 1 2129 0
 3275 00a9 B9040000 		movl	$4, %ecx
 3275      00
 3276 00ae 31D2     		xorl	%edx, %edx
 3277 00b0 31F6     		xorl	%esi, %esi
 3278 00b2 E9000000 		jmp	png_compress_IDAT
 3278      00
 3279              	.LVL336:
 3280 00b7 660F1F84 		.p2align 4,,10
 3280      00000000 
 3280      00
 3281              		.p2align 3
 3282              	.L322:
2084:fltk-1.3.4-1/png/pngwutil.c ****       }
 3283              		.loc 1 2084 0
 3284 00c0 83C001   		addl	$1, %eax
2115:fltk-1.3.4-1/png/pngwutil.c ****       {
 3285              		.loc 1 2115 0
 3286 00c3 3C06     		cmpb	$6, %al
2084:fltk-1.3.4-1/png/pngwutil.c ****       }
 3287              		.loc 1 2084 0
 3288 00c5 88877502 		movb	%al, 629(%rdi)
 3288      0000
2115:fltk-1.3.4-1/png/pngwutil.c ****       {
 3289              		.loc 1 2115 0
 3290 00cb 77DC     		ja	.L311
 3291              	.L317:
2117:fltk-1.3.4-1/png/pngwutil.c ****             memset(png_ptr->prev_row, 0,
 3292              		.loc 1 2117 0
 3293 00cd 488B8F20 		movq	544(%rdi), %rcx
 3293      020000
 3294 00d4 4885C9   		testq	%rcx, %rcx
 3295 00d7 7460     		je	.L324
2119:fltk-1.3.4-1/png/pngwutil.c ****                 png_ptr->usr_bit_depth, png_ptr->width)) + 1);
 3296              		.loc 1 2119 0
 3297 00d9 0FB6977C 		movzbl	636(%rdi), %edx
 3297      020000
 3298 00e0 0FB68779 		movzbl	633(%rdi), %eax
 3298      020000
 3299 00e7 0FAFC2   		imull	%edx, %eax
2118:fltk-1.3.4-1/png/pngwutil.c ****                 (png_size_t)(PNG_ROWBYTES(png_ptr->usr_channels*
 3300              		.loc 1 2118 0
 3301 00ea 8B97F801 		movl	504(%rdi), %edx
 3301      0000
 3302 00f0 83F807   		cmpl	$7, %eax
 3303 00f3 4898     		cltq
 3304 00f5 7F21     		jg	.L325
 3305 00f7 480FAFD0 		imulq	%rax, %rdx
 3306              	.LBB321:
 3307              	.LBB322:
 3308              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string3.h"
   1:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* Copyright (C) 2004-2016 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string3.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string3.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string3.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string3.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string3.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string3.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string3.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string3.h ****    <http://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef _STRING_H
  19:/usr/include/x86_64-linux-gnu/bits/string3.h **** # error "Never use <bits/string3.h> directly; include <string.h> instead."
  20:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  21:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  22:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  23:/usr/include/x86_64-linux-gnu/bits/string3.h **** __warndecl (__warn_memset_zero_len,
  24:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  25:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  26:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  27:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef __cplusplus
  28:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* XXX This is temporarily.  We should not redefine any of the symbols
  29:/usr/include/x86_64-linux-gnu/bits/string3.h ****    and instead integrate the error checking into the original
  30:/usr/include/x86_64-linux-gnu/bits/string3.h ****    definitions.  */
  31:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memcpy
  32:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memmove
  33:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memset
  34:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcat
  35:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcpy
  36:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncat
  37:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncpy
  38:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_GNU
  39:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef mempcpy
  40:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef stpcpy
  41:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  42:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_MISC
  43:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bcopy
  44:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bzero
  45:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  46:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  47:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  48:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  49:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  50:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  51:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	       size_t __len))
  52:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  53:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  54:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  55:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  56:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  57:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memmove (void *__dest, const void *__src, size_t __len))
  58:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  59:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  60:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  61:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  62:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifdef __USE_GNU
  63:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  64:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
  65:/usr/include/x86_64-linux-gnu/bits/string3.h **** 		size_t __len))
  66:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  67:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
  68:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  69:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  70:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  71:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  72:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* The first two tests here help to catch a somewhat common problem
  73:/usr/include/x86_64-linux-gnu/bits/string3.h ****    where the second and third parameter are transposed.  This is
  74:/usr/include/x86_64-linux-gnu/bits/string3.h ****    especially problematic if the intended fill value is zero.  In this
  75:/usr/include/x86_64-linux-gnu/bits/string3.h ****    case no work is done at all.  We detect these problems by referring
  76:/usr/include/x86_64-linux-gnu/bits/string3.h ****    non-existing functions.  */
  77:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  78:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memset (void *__dest, int __ch, size_t __len))
  79:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  80:/usr/include/x86_64-linux-gnu/bits/string3.h ****   /* GCC-5.0 and newer implements these checks in the compiler, so we don't
  81:/usr/include/x86_64-linux-gnu/bits/string3.h ****      need them here.  */
  82:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  83:/usr/include/x86_64-linux-gnu/bits/string3.h ****   if (__builtin_constant_p (__len) && __len == 0
  84:/usr/include/x86_64-linux-gnu/bits/string3.h ****       && (!__builtin_constant_p (__ch) || __ch != 0))
  85:/usr/include/x86_64-linux-gnu/bits/string3.h ****     {
  86:/usr/include/x86_64-linux-gnu/bits/string3.h ****       __warn_memset_zero_len ();
  87:/usr/include/x86_64-linux-gnu/bits/string3.h ****       return __dest;
  88:/usr/include/x86_64-linux-gnu/bits/string3.h ****     }
  89:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  90:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 3309              		.loc 2 90 0
 3310 00fb 31F6     		xorl	%esi, %esi
 3311 00fd 4889CF   		movq	%rcx, %rdi
 3312              	.LVL337:
 3313              	.LBE322:
 3314              	.LBE321:
2118:fltk-1.3.4-1/png/pngwutil.c ****                 (png_size_t)(PNG_ROWBYTES(png_ptr->usr_channels*
 3315              		.loc 1 2118 0
 3316 0100 4883C207 		addq	$7, %rdx
 3317 0104 48C1EA03 		shrq	$3, %rdx
 3318 0108 4883C201 		addq	$1, %rdx
 3319              	.LVL338:
 3320              	.LBB326:
 3321              	.LBB323:
 3322              		.loc 2 90 0
 3323 010c E9000000 		jmp	memset
 3323      00
 3324              	.LVL339:
 3325              		.p2align 4,,10
 3326 0111 0F1F8000 		.p2align 3
 3326      000000
 3327              	.L325:
 3328              	.LBE323:
 3329              	.LBE326:
2118:fltk-1.3.4-1/png/pngwutil.c ****                 (png_size_t)(PNG_ROWBYTES(png_ptr->usr_channels*
 3330              		.loc 1 2118 0
 3331 0118 48C1E803 		shrq	$3, %rax
 3332              	.LBB327:
 3333              	.LBB324:
 3334              		.loc 2 90 0
 3335 011c 31F6     		xorl	%esi, %esi
 3336 011e 4889CF   		movq	%rcx, %rdi
 3337              	.LVL340:
 3338              	.LBE324:
 3339              	.LBE327:
2118:fltk-1.3.4-1/png/pngwutil.c ****                 (png_size_t)(PNG_ROWBYTES(png_ptr->usr_channels*
 3340              		.loc 1 2118 0
 3341 0121 480FAFD0 		imulq	%rax, %rdx
 3342 0125 4883C201 		addq	$1, %rdx
 3343              	.LVL341:
 3344              	.LBB328:
 3345              	.LBB325:
 3346              		.loc 2 90 0
 3347 0129 E9000000 		jmp	memset
 3347      00
 3348              	.LVL342:
 3349 012e 6690     		.p2align 4,,10
 3350              		.p2align 3
 3351              	.L323:
 3352 0130 44888775 		movb	%r8b, 629(%rdi)
 3352      020000
 3353 0137 EB94     		jmp	.L317
 3354              	.L324:
 3355 0139 F3C3     		rep ret
 3356              	.LBE325:
 3357              	.LBE328:
 3358              		.cfi_endproc
 3359              	.LFE104:
 3361              		.section	.text.unlikely.png_write_finish_row.part.5
 3362              	.LCOLDE42:
 3363              		.section	.text.png_write_finish_row.part.5
 3364              	.LHOTE42:
 3365              		.section	.text.unlikely.png_write_IEND,"ax",@progbits
 3366              	.LCOLDB43:
 3367              		.section	.text.png_write_IEND,"ax",@progbits
 3368              	.LHOTB43:
 3369              		.p2align 4,,15
 3370              		.globl	png_write_IEND
 3372              	png_write_IEND:
 3373              	.LFB76:
1149:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_write_IEND");
 3374              		.loc 1 1149 0
 3375              		.cfi_startproc
 3376              	.LVL343:
 3377 0000 53       		pushq	%rbx
 3378              		.cfi_def_cfa_offset 16
 3379              		.cfi_offset 3, -16
1152:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->mode |= PNG_HAVE_IEND;
 3380              		.loc 1 1152 0
 3381 0001 31C9     		xorl	%ecx, %ecx
1149:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_write_IEND");
 3382              		.loc 1 1149 0
 3383 0003 4889FB   		movq	%rdi, %rbx
1152:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->mode |= PNG_HAVE_IEND;
 3384              		.loc 1 1152 0
 3385 0006 31D2     		xorl	%edx, %edx
 3386 0008 BE444E45 		movl	$1229278788, %esi
 3386      49
 3387 000d E8000000 		call	png_write_complete_chunk
 3387      00
 3388              	.LVL344:
1153:fltk-1.3.4-1/png/pngwutil.c **** }
 3389              		.loc 1 1153 0
 3390 0012 838B2C01 		orl	$16, 300(%rbx)
 3390      000010
1154:fltk-1.3.4-1/png/pngwutil.c **** 
 3391              		.loc 1 1154 0
 3392 0019 5B       		popq	%rbx
 3393              		.cfi_def_cfa_offset 8
 3394              	.LVL345:
 3395 001a C3       		ret
 3396              		.cfi_endproc
 3397              	.LFE76:
 3399              		.section	.text.unlikely.png_write_IEND
 3400              	.LCOLDE43:
 3401              		.section	.text.png_write_IEND
 3402              	.LHOTE43:
 3403              		.section	.text.unlikely.png_write_gAMA_fixed,"ax",@progbits
 3404              	.LCOLDB44:
 3405              		.section	.text.png_write_gAMA_fixed,"ax",@progbits
 3406              	.LHOTB44:
 3407              		.p2align 4,,15
 3408              		.globl	png_write_gAMA_fixed
 3410              	png_write_gAMA_fixed:
 3411              	.LFB77:
1160:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[4];
 3412              		.loc 1 1160 0
 3413              		.cfi_startproc
 3414              	.LVL346:
 3415 0000 4883EC18 		subq	$24, %rsp
 3416              		.cfi_def_cfa_offset 32
1167:fltk-1.3.4-1/png/pngwutil.c **** }
 3417              		.loc 1 1167 0
 3418 0004 B9040000 		movl	$4, %ecx
 3418      00
1160:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[4];
 3419              		.loc 1 1160 0
 3420 0009 64488B04 		movq	%fs:40, %rax
 3420      25280000 
 3420      00
 3421 0012 48894424 		movq	%rax, 8(%rsp)
 3421      08
 3422 0017 31C0     		xorl	%eax, %eax
 3423              	.LVL347:
 3424              	.LBB329:
 3425              	.LBB330:
  26:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)((i >> 16) & 0xff);
 3426              		.loc 1 26 0
 3427 0019 89F0     		movl	%esi, %eax
  29:fltk-1.3.4-1/png/pngwutil.c **** }
 3428              		.loc 1 29 0
 3429 001b 40887424 		movb	%sil, 3(%rsp)
 3429      03
 3430              	.LVL348:
 3431              	.LBE330:
 3432              	.LBE329:
1167:fltk-1.3.4-1/png/pngwutil.c **** }
 3433              		.loc 1 1167 0
 3434 0020 4889E2   		movq	%rsp, %rdx
 3435              	.LBB333:
 3436              	.LBB331:
  26:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)((i >> 16) & 0xff);
 3437              		.loc 1 26 0
 3438 0023 C1E818   		shrl	$24, %eax
 3439 0026 880424   		movb	%al, (%rsp)
  27:fltk-1.3.4-1/png/pngwutil.c ****    buf[2] = (png_byte)((i >> 8) & 0xff);
 3440              		.loc 1 27 0
 3441 0029 89F0     		movl	%esi, %eax
 3442 002b C1E810   		shrl	$16, %eax
 3443 002e 88442401 		movb	%al, 1(%rsp)
  28:fltk-1.3.4-1/png/pngwutil.c ****    buf[3] = (png_byte)(i & 0xff);
 3444              		.loc 1 28 0
 3445 0032 89F0     		movl	%esi, %eax
 3446              	.LBE331:
 3447              	.LBE333:
1167:fltk-1.3.4-1/png/pngwutil.c **** }
 3448              		.loc 1 1167 0
 3449 0034 BE414D41 		movl	$1732332865, %esi
 3449      67
 3450              	.LVL349:
 3451              	.LBB334:
 3452              	.LBB332:
  28:fltk-1.3.4-1/png/pngwutil.c ****    buf[3] = (png_byte)(i & 0xff);
 3453              		.loc 1 28 0
 3454 0039 C1E808   		shrl	$8, %eax
 3455              	.LVL350:
 3456 003c 88442402 		movb	%al, 2(%rsp)
 3457              	.LBE332:
 3458              	.LBE334:
1167:fltk-1.3.4-1/png/pngwutil.c **** }
 3459              		.loc 1 1167 0
 3460 0040 E8000000 		call	png_write_complete_chunk
 3460      00
 3461              	.LVL351:
1168:fltk-1.3.4-1/png/pngwutil.c **** #endif
 3462              		.loc 1 1168 0
 3463 0045 488B4424 		movq	8(%rsp), %rax
 3463      08
 3464 004a 64483304 		xorq	%fs:40, %rax
 3464      25280000 
 3464      00
 3465 0053 7505     		jne	.L331
 3466 0055 4883C418 		addq	$24, %rsp
 3467              		.cfi_remember_state
 3468              		.cfi_def_cfa_offset 8
 3469 0059 C3       		ret
 3470              	.L331:
 3471              		.cfi_restore_state
 3472 005a E8000000 		call	__stack_chk_fail
 3472      00
 3473              	.LVL352:
 3474              		.cfi_endproc
 3475              	.LFE77:
 3477              		.section	.text.unlikely.png_write_gAMA_fixed
 3478              	.LCOLDE44:
 3479              		.section	.text.png_write_gAMA_fixed
 3480              	.LHOTE44:
 3481              		.section	.rodata.str1.8
 3482 021b 00000000 		.align 8
 3482      00
 3483              	.LC45:
 3484 0220 496E7661 		.string	"Invalid sRGB rendering intent specified"
 3484      6C696420 
 3484      73524742 
 3484      2072656E 
 3484      64657269 
 3485              		.section	.text.unlikely.png_write_sRGB,"ax",@progbits
 3486              	.LCOLDB46:
 3487              		.section	.text.png_write_sRGB,"ax",@progbits
 3488              	.LHOTB46:
 3489              		.p2align 4,,15
 3490              		.globl	png_write_sRGB
 3492              	png_write_sRGB:
 3493              	.LFB78:
1175:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[1];
 3494              		.loc 1 1175 0
 3495              		.cfi_startproc
 3496              	.LVL353:
 3497 0000 55       		pushq	%rbp
 3498              		.cfi_def_cfa_offset 16
 3499              		.cfi_offset 6, -16
 3500 0001 53       		pushq	%rbx
 3501              		.cfi_def_cfa_offset 24
 3502              		.cfi_offset 3, -24
 3503 0002 4889FD   		movq	%rdi, %rbp
 3504 0005 89F3     		movl	%esi, %ebx
 3505 0007 4883EC18 		subq	$24, %rsp
 3506              		.cfi_def_cfa_offset 48
1175:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[1];
 3507              		.loc 1 1175 0
 3508 000b 64488B04 		movq	%fs:40, %rax
 3508      25280000 
 3508      00
 3509 0014 48894424 		movq	%rax, 8(%rsp)
 3509      08
 3510 0019 31C0     		xorl	%eax, %eax
1180:fltk-1.3.4-1/png/pngwutil.c ****       png_warning(png_ptr,
 3511              		.loc 1 1180 0
 3512 001b 83FE03   		cmpl	$3, %esi
 3513 001e 7E0A     		jle	.L333
1181:fltk-1.3.4-1/png/pngwutil.c ****           "Invalid sRGB rendering intent specified");
 3514              		.loc 1 1181 0
 3515 0020 BE000000 		movl	$.LC45, %esi
 3515      00
 3516              	.LVL354:
 3517 0025 E8000000 		call	png_warning
 3517      00
 3518              	.LVL355:
 3519              	.L333:
1185:fltk-1.3.4-1/png/pngwutil.c **** }
 3520              		.loc 1 1185 0
 3521 002a 488D5424 		leaq	7(%rsp), %rdx
 3521      07
 3522 002f B9010000 		movl	$1, %ecx
 3522      00
 3523 0034 BE424752 		movl	$1934772034, %esi
 3523      73
 3524 0039 4889EF   		movq	%rbp, %rdi
1184:fltk-1.3.4-1/png/pngwutil.c ****    png_write_complete_chunk(png_ptr, png_sRGB, buf, (png_size_t)1);
 3525              		.loc 1 1184 0
 3526 003c 885C2407 		movb	%bl, 7(%rsp)
1185:fltk-1.3.4-1/png/pngwutil.c **** }
 3527              		.loc 1 1185 0
 3528 0040 E8000000 		call	png_write_complete_chunk
 3528      00
 3529              	.LVL356:
1186:fltk-1.3.4-1/png/pngwutil.c **** #endif
 3530              		.loc 1 1186 0
 3531 0045 488B4424 		movq	8(%rsp), %rax
 3531      08
 3532 004a 64483304 		xorq	%fs:40, %rax
 3532      25280000 
 3532      00
 3533 0053 7507     		jne	.L336
 3534 0055 4883C418 		addq	$24, %rsp
 3535              		.cfi_remember_state
 3536              		.cfi_def_cfa_offset 24
 3537 0059 5B       		popq	%rbx
 3538              		.cfi_def_cfa_offset 16
 3539              	.LVL357:
 3540 005a 5D       		popq	%rbp
 3541              		.cfi_def_cfa_offset 8
 3542              	.LVL358:
 3543 005b C3       		ret
 3544              	.LVL359:
 3545              	.L336:
 3546              		.cfi_restore_state
 3547 005c E8000000 		call	__stack_chk_fail
 3547      00
 3548              	.LVL360:
 3549              		.cfi_endproc
 3550              	.LFE78:
 3552              		.section	.text.unlikely.png_write_sRGB
 3553              	.LCOLDE46:
 3554              		.section	.text.png_write_sRGB
 3555              	.LHOTE46:
 3556              		.section	.rodata.str1.1
 3557              	.LC47:
 3558 00a4 4E6F2070 		.string	"No profile for iCCP chunk"
 3558      726F6669 
 3558      6C652066 
 3558      6F722069 
 3558      43435020 
 3559              	.LC48:
 3560 00be 49434320 		.string	"ICC profile too short"
 3560      70726F66 
 3560      696C6520 
 3560      746F6F20 
 3560      73686F72 
 3561              		.section	.rodata.str1.8
 3562              		.align 8
 3563              	.LC49:
 3564 0248 49434320 		.string	"ICC profile length invalid (not a multiple of 4)"
 3564      70726F66 
 3564      696C6520 
 3564      6C656E67 
 3564      74682069 
 3565              		.section	.rodata.str1.1
 3566              	.LC50:
 3567 00d4 69434350 		.string	"iCCP: invalid keyword"
 3567      3A20696E 
 3567      76616C69 
 3567      64206B65 
 3567      79776F72 
 3568              		.section	.text.unlikely.png_write_iCCP,"ax",@progbits
 3569              	.LCOLDB51:
 3570              		.section	.text.png_write_iCCP,"ax",@progbits
 3571              	.LHOTB51:
 3572              		.p2align 4,,15
 3573              		.globl	png_write_iCCP
 3575              	png_write_iCCP:
 3576              	.LFB79:
1194:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 name_len;
 3577              		.loc 1 1194 0
 3578              		.cfi_startproc
 3579              	.LVL361:
 3580 0000 4155     		pushq	%r13
 3581              		.cfi_def_cfa_offset 16
 3582              		.cfi_offset 13, -16
 3583 0002 4154     		pushq	%r12
 3584              		.cfi_def_cfa_offset 24
 3585              		.cfi_offset 12, -24
 3586 0004 4989FD   		movq	%rdi, %r13
 3587 0007 55       		pushq	%rbp
 3588              		.cfi_def_cfa_offset 32
 3589              		.cfi_offset 6, -32
 3590 0008 53       		pushq	%rbx
 3591              		.cfi_def_cfa_offset 40
 3592              		.cfi_offset 3, -40
 3593 0009 4881EC88 		subq	$1160, %rsp
 3593      040000
 3594              		.cfi_def_cfa_offset 1200
1194:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 name_len;
 3595              		.loc 1 1194 0
 3596 0010 64488B04 		movq	%fs:40, %rax
 3596      25280000 
 3596      00
 3597 0019 48898424 		movq	%rax, 1144(%rsp)
 3597      78040000 
 3598 0021 31C0     		xorl	%eax, %eax
1206:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "No profile for iCCP chunk"); /* internal error */
 3599              		.loc 1 1206 0
 3600 0023 4885D2   		testq	%rdx, %rdx
 3601 0026 0F844301 		je	.L354
 3601      0000
1209:fltk-1.3.4-1/png/pngwutil.c **** 
 3602              		.loc 1 1209 0
 3603 002c 0FB602   		movzbl	(%rdx), %eax
 3604 002f 4889D5   		movq	%rdx, %rbp
 3605 0032 C1E018   		sall	$24, %eax
 3606 0035 4189C4   		movl	%eax, %r12d
 3607 0038 0FB64201 		movzbl	1(%rdx), %eax
 3608 003c C1E010   		sall	$16, %eax
 3609 003f 4401E0   		addl	%r12d, %eax
 3610 0042 440FB662 		movzbl	3(%rdx), %r12d
 3610      03
 3611 0047 4401E0   		addl	%r12d, %eax
 3612 004a 440FB662 		movzbl	2(%rdx), %r12d
 3612      02
 3613 004f 41C1E408 		sall	$8, %r12d
 3614 0053 4101C4   		addl	%eax, %r12d
 3615              	.LVL362:
1211:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "ICC profile too short");
 3616              		.loc 1 1211 0
 3617 0056 4181FC83 		cmpl	$131, %r12d
 3617      000000
 3618 005d 0F860201 		jbe	.L355
 3618      0000
 3619              	.LVL363:
1215:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "ICC profile length invalid (not a multiple of 4)");
 3620              		.loc 1 1215 0
 3621 0063 807A0803 		cmpb	$3, 8(%rdx)
 3622 0067 760A     		jbe	.L340
1215:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "ICC profile length invalid (not a multiple of 4)");
 3623              		.loc 1 1215 0 is_stmt 0 discriminator 1
 3624 0069 41F6C403 		testb	$3, %r12b
 3625 006d 0F850601 		jne	.L356
 3625      0000
 3626              	.L340:
 3627              	.LVL364:
1225:fltk-1.3.4-1/png/pngwutil.c **** 
 3628              		.loc 1 1225 0 is_stmt 1
 3629 0073 488D9424 		leaq	1056(%rsp), %rdx
 3629      20040000 
 3630              	.LVL365:
 3631 007b 4C89EF   		movq	%r13, %rdi
 3632              	.LVL366:
 3633 007e E8000000 		call	png_check_keyword
 3633      00
 3634              	.LVL367:
1227:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "iCCP: invalid keyword");
 3635              		.loc 1 1227 0
 3636 0083 85C0     		testl	%eax, %eax
 3637 0085 0F84CD00 		je	.L357
 3637      0000
 3638              	.LVL368:
1230:fltk-1.3.4-1/png/pngwutil.c **** 
 3639              		.loc 1 1230 0
 3640 008b 8D5001   		leal	1(%rax), %edx
1233:fltk-1.3.4-1/png/pngwutil.c **** 
 3641              		.loc 1 1233 0
 3642 008e 8D5802   		leal	2(%rax), %ebx
1238:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, png_ptr->zstream.msg);
 3643              		.loc 1 1238 0
 3644 0091 BE504343 		movl	$1766015824, %esi
 3644      69
 3645              	.LBB335:
 3646              	.LBB336:
 483:fltk-1.3.4-1/png/pngwutil.c ****    comp->output_len = 0;
 3647              		.loc 1 483 0
 3648 0096 4489E0   		movl	%r12d, %eax
 3649              	.LVL369:
 3650              	.LBE336:
 3651              	.LBE335:
1238:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, png_ptr->zstream.msg);
 3652              		.loc 1 1238 0
 3653 0099 4C89EF   		movq	%r13, %rdi
 3654              	.LBB339:
 3655              	.LBB337:
 482:fltk-1.3.4-1/png/pngwutil.c ****    comp->input_len = input_len;
 3656              		.loc 1 482 0
 3657 009c 48892C24 		movq	%rbp, (%rsp)
 3658              	.LBE337:
 3659              	.LBE339:
1230:fltk-1.3.4-1/png/pngwutil.c **** 
 3660              		.loc 1 1230 0
 3661 00a0 C6841420 		movb	$0, 1056(%rsp,%rdx)
 3661      04000000 
 3662              	.LVL370:
1238:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, png_ptr->zstream.msg);
 3663              		.loc 1 1238 0
 3664 00a8 89D9     		movl	%ebx, %ecx
 3665 00aa 4889E2   		movq	%rsp, %rdx
 3666              	.LBB340:
 3667              	.LBB338:
 483:fltk-1.3.4-1/png/pngwutil.c ****    comp->output_len = 0;
 3668              		.loc 1 483 0
 3669 00ad 48894424 		movq	%rax, 8(%rsp)
 3669      08
 484:fltk-1.3.4-1/png/pngwutil.c **** }
 3670              		.loc 1 484 0
 3671 00b2 C7442410 		movl	$0, 16(%rsp)
 3671      00000000 
 3672              	.LVL371:
 3673              	.LBE338:
 3674              	.LBE340:
1238:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, png_ptr->zstream.msg);
 3675              		.loc 1 1238 0
 3676 00ba E8000000 		call	png_text_compress
 3676      00
 3677              	.LVL372:
 3678 00bf 85C0     		testl	%eax, %eax
 3679 00c1 0F858200 		jne	.L358
 3679      0000
1241:fltk-1.3.4-1/png/pngwutil.c **** 
 3680              		.loc 1 1241 0
 3681 00c7 8B542410 		movl	16(%rsp), %edx
 3682 00cb 01DA     		addl	%ebx, %edx
 3683              	.LVL373:
 3684              	.LBB341:
 3685              	.LBB342:
  83:fltk-1.3.4-1/png/pngwutil.c ****       return;
 3686              		.loc 1 83 0
 3687 00cd 4D85ED   		testq	%r13, %r13
 3688 00d0 7466     		je	.L343
 3689 00d2 BE504343 		movl	$1766015824, %esi
 3689      69
 3690 00d7 4C89EF   		movq	%r13, %rdi
 3691 00da E8000000 		call	png_write_chunk_header.part.2
 3691      00
 3692              	.LVL374:
 3693              	.LBE342:
 3694              	.LBE341:
1243:fltk-1.3.4-1/png/pngwutil.c **** 
 3695              		.loc 1 1243 0
 3696 00df 89DA     		movl	%ebx, %edx
 3697              	.LVL375:
 3698              	.LBB343:
 3699              	.LBB344:
 134:fltk-1.3.4-1/png/pngwutil.c ****    {
 3700              		.loc 1 134 0
 3701 00e1 4885D2   		testq	%rdx, %rdx
 3702 00e4 753A     		jne	.L359
 3703              	.LVL376:
 3704              	.L344:
 3705              	.LBE344:
 3706              	.LBE343:
1245:fltk-1.3.4-1/png/pngwutil.c **** 
 3707              		.loc 1 1245 0
 3708 00e6 4C89EF   		movq	%r13, %rdi
 3709 00e9 4889E6   		movq	%rsp, %rsi
 3710 00ec E8000000 		call	png_write_compressed_data_out
 3710      00
 3711              	.LVL377:
 3712              	.LBB346:
 3713              	.LBB347:
 3714 00f1 4C89EF   		movq	%r13, %rdi
 3715 00f4 E8000000 		call	png_write_chunk_end.part.4
 3715      00
 3716              	.LVL378:
 3717              	.L337:
 3718              	.LBE347:
 3719              	.LBE346:
1248:fltk-1.3.4-1/png/pngwutil.c **** #endif
 3720              		.loc 1 1248 0
 3721 00f9 488B8424 		movq	1144(%rsp), %rax
 3721      78040000 
 3722 0101 64483304 		xorq	%fs:40, %rax
 3722      25280000 
 3722      00
 3723 010a 7538     		jne	.L360
 3724 010c 4881C488 		addq	$1160, %rsp
 3724      040000
 3725              		.cfi_remember_state
 3726              		.cfi_def_cfa_offset 40
 3727 0113 5B       		popq	%rbx
 3728              		.cfi_def_cfa_offset 32
 3729 0114 5D       		popq	%rbp
 3730              		.cfi_def_cfa_offset 24
 3731              	.LVL379:
 3732 0115 415C     		popq	%r12
 3733              		.cfi_def_cfa_offset 16
 3734              	.LVL380:
 3735 0117 415D     		popq	%r13
 3736              		.cfi_def_cfa_offset 8
 3737              	.LVL381:
 3738 0119 C3       		ret
 3739              	.LVL382:
 3740 011a 660F1F44 		.p2align 4,,10
 3740      0000
 3741              		.p2align 3
 3742              	.L359:
 3743              		.cfi_restore_state
 3744              	.LBB348:
 3745              	.LBB345:
 3746 0120 488DB424 		leaq	1056(%rsp), %rsi
 3746      20040000 
 3747              	.LVL383:
 3748 0128 4C89EF   		movq	%r13, %rdi
 3749 012b E8000000 		call	png_write_chunk_data.part.3
 3749      00
 3750              	.LVL384:
 3751 0130 EBB4     		jmp	.L344
 3752              	.LVL385:
 3753              		.p2align 4,,10
 3754 0132 660F1F44 		.p2align 3
 3754      0000
 3755              	.L343:
 3756              	.LBE345:
 3757              	.LBE348:
1245:fltk-1.3.4-1/png/pngwutil.c **** 
 3758              		.loc 1 1245 0
 3759 0138 4889E6   		movq	%rsp, %rsi
 3760 013b 31FF     		xorl	%edi, %edi
 3761 013d E8000000 		call	png_write_compressed_data_out
 3761      00
 3762              	.LVL386:
 3763 0142 EBB5     		jmp	.L337
 3764              	.LVL387:
 3765              	.L360:
1248:fltk-1.3.4-1/png/pngwutil.c **** #endif
 3766              		.loc 1 1248 0
 3767 0144 E8000000 		call	__stack_chk_fail
 3767      00
 3768              	.LVL388:
 3769              	.L358:
1239:fltk-1.3.4-1/png/pngwutil.c **** 
 3770              		.loc 1 1239 0
 3771 0149 498BB570 		movq	368(%r13), %rsi
 3771      010000
 3772 0150 4C89EF   		movq	%r13, %rdi
 3773 0153 E8000000 		call	png_error
 3773      00
 3774              	.LVL389:
 3775              	.L357:
1228:fltk-1.3.4-1/png/pngwutil.c **** 
 3776              		.loc 1 1228 0
 3777 0158 BE000000 		movl	$.LC50, %esi
 3777      00
 3778 015d 4C89EF   		movq	%r13, %rdi
 3779 0160 E8000000 		call	png_error
 3779      00
 3780              	.LVL390:
 3781              	.L355:
1212:fltk-1.3.4-1/png/pngwutil.c **** 
 3782              		.loc 1 1212 0
 3783 0165 BE000000 		movl	$.LC48, %esi
 3783      00
 3784              	.LVL391:
 3785 016a E8000000 		call	png_error
 3785      00
 3786              	.LVL392:
 3787              	.L354:
1207:fltk-1.3.4-1/png/pngwutil.c **** 
 3788              		.loc 1 1207 0
 3789 016f BE000000 		movl	$.LC47, %esi
 3789      00
 3790              	.LVL393:
 3791 0174 E8000000 		call	png_error
 3791      00
 3792              	.LVL394:
 3793              	.L356:
1216:fltk-1.3.4-1/png/pngwutil.c **** 
 3794              		.loc 1 1216 0
 3795 0179 BE000000 		movl	$.LC49, %esi
 3795      00
 3796              	.LVL395:
 3797 017e E8000000 		call	png_error
 3797      00
 3798              	.LVL396:
 3799              		.cfi_endproc
 3800              	.LFE79:
 3802              		.section	.text.unlikely.png_write_iCCP
 3803              	.LCOLDE51:
 3804              		.section	.text.png_write_iCCP
 3805              	.LHOTE51:
 3806              		.section	.rodata.str1.1
 3807              	.LC52:
 3808 00ea 73504C54 		.string	"sPLT: invalid keyword"
 3808      3A20696E 
 3808      76616C69 
 3808      64206B65 
 3808      79776F72 
 3809              		.section	.text.unlikely.png_write_sPLT,"ax",@progbits
 3810              	.LCOLDB53:
 3811              		.section	.text.png_write_sPLT,"ax",@progbits
 3812              	.LHOTB53:
 3813              		.p2align 4,,15
 3814              		.globl	png_write_sPLT
 3816              	png_write_sPLT:
 3817              	.LFB80:
1255:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 name_len;
 3818              		.loc 1 1255 0
 3819              		.cfi_startproc
 3820              	.LVL397:
 3821 0000 4156     		pushq	%r14
 3822              		.cfi_def_cfa_offset 16
 3823              		.cfi_offset 14, -16
 3824 0002 4155     		pushq	%r13
 3825              		.cfi_def_cfa_offset 24
 3826              		.cfi_offset 13, -24
1259:fltk-1.3.4-1/png/pngwutil.c ****    png_size_t palette_size = entry_size * spalette->nentries;
 3827              		.loc 1 1259 0
 3828 0004 4531ED   		xorl	%r13d, %r13d
1255:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 name_len;
 3829              		.loc 1 1255 0
 3830 0007 4154     		pushq	%r12
 3831              		.cfi_def_cfa_offset 32
 3832              		.cfi_offset 12, -32
 3833 0009 55       		pushq	%rbp
 3834              		.cfi_def_cfa_offset 40
 3835              		.cfi_offset 6, -40
 3836 000a 4889F5   		movq	%rsi, %rbp
 3837 000d 53       		pushq	%rbx
 3838              		.cfi_def_cfa_offset 48
 3839              		.cfi_offset 3, -48
 3840 000e 4989FC   		movq	%rdi, %r12
 3841 0011 4883EC70 		subq	$112, %rsp
 3842              		.cfi_def_cfa_offset 160
1260:fltk-1.3.4-1/png/pngwutil.c ****    png_sPLT_entryp ep;
 3843              		.loc 1 1260 0
 3844 0015 48635E18 		movslq	24(%rsi), %rbx
1255:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 name_len;
 3845              		.loc 1 1255 0
 3846 0019 64488B04 		movq	%fs:40, %rax
 3846      25280000 
 3846      00
 3847 0022 48894424 		movq	%rax, 104(%rsp)
 3847      68
 3848 0027 31C0     		xorl	%eax, %eax
1259:fltk-1.3.4-1/png/pngwutil.c ****    png_size_t palette_size = entry_size * spalette->nentries;
 3849              		.loc 1 1259 0
 3850 0029 807E0808 		cmpb	$8, 8(%rsi)
1268:fltk-1.3.4-1/png/pngwutil.c **** 
 3851              		.loc 1 1268 0
 3852 002d 488B36   		movq	(%rsi), %rsi
 3853              	.LVL398:
 3854 0030 488D5424 		leaq	16(%rsp), %rdx
 3854      10
1259:fltk-1.3.4-1/png/pngwutil.c ****    png_size_t palette_size = entry_size * spalette->nentries;
 3855              		.loc 1 1259 0
 3856 0035 410F95C5 		setne	%r13b
 3857 0039 4E8D2CAD 		leaq	6(,%r13,4), %r13
 3857      06000000 
 3858              	.LVL399:
1268:fltk-1.3.4-1/png/pngwutil.c **** 
 3859              		.loc 1 1268 0
 3860 0041 E8000000 		call	png_check_keyword
 3860      00
 3861              	.LVL400:
1260:fltk-1.3.4-1/png/pngwutil.c ****    png_sPLT_entryp ep;
 3862              		.loc 1 1260 0
 3863 0046 490FAFDD 		imulq	%r13, %rbx
 3864              	.LVL401:
1270:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "sPLT: invalid keyword");
 3865              		.loc 1 1270 0
 3866 004a 85C0     		testl	%eax, %eax
 3867 004c 0F848801 		je	.L384
 3867      0000
 3868              	.LBB349:
 3869              	.LBB350:
  83:fltk-1.3.4-1/png/pngwutil.c ****       return;
 3870              		.loc 1 83 0
 3871 0052 4D85E4   		testq	%r12, %r12
 3872 0055 4189C6   		movl	%eax, %r14d
 3873              	.LBE350:
 3874              	.LBE349:
1274:fltk-1.3.4-1/png/pngwutil.c ****        (png_uint_32)(name_len + 2 + palette_size));
 3875              		.loc 1 1274 0
 3876 0058 8D541802 		leal	2(%rax,%rbx), %edx
 3877              	.LVL402:
 3878              	.LBB352:
 3879              	.LBB351:
  83:fltk-1.3.4-1/png/pngwutil.c ****       return;
 3880              		.loc 1 83 0
 3881 005c 0F843E01 		je	.L364
 3881      0000
 3882 0062 BE544C50 		movl	$1934642260, %esi
 3882      73
 3883 0067 4C89E7   		movq	%r12, %rdi
 3884 006a E8000000 		call	png_write_chunk_header.part.2
 3884      00
 3885              	.LVL403:
 3886              	.LBE351:
 3887              	.LBE352:
1277:fltk-1.3.4-1/png/pngwutil.c ****        (png_size_t)(name_len + 1));
 3888              		.loc 1 1277 0
 3889 006f 418D5601 		leal	1(%r14), %edx
 3890              	.LVL404:
 3891              	.LBB353:
 3892              	.LBB354:
 134:fltk-1.3.4-1/png/pngwutil.c ****    {
 3893              		.loc 1 134 0
 3894 0073 4885D2   		testq	%rdx, %rdx
 3895 0076 0F854C01 		jne	.L385
 3895      0000
 3896              	.LVL405:
 3897              	.L365:
 3898              	.LBE354:
 3899              	.LBE353:
1280:fltk-1.3.4-1/png/pngwutil.c **** 
 3900              		.loc 1 1280 0
 3901 007c 488D7508 		leaq	8(%rbp), %rsi
 3902              	.LVL406:
 3903              	.LBB356:
 3904              	.LBB357:
 3905 0080 BA010000 		movl	$1, %edx
 3905      00
 3906 0085 4C89E7   		movq	%r12, %rdi
 3907 0088 E8000000 		call	png_write_chunk_data.part.3
 3907      00
 3908              	.LVL407:
 3909              	.LBE357:
 3910              	.LBE356:
1284:fltk-1.3.4-1/png/pngwutil.c ****    {
 3911              		.loc 1 1284 0
 3912 008d 48634518 		movslq	24(%rbp), %rax
 3913 0091 488B5510 		movq	16(%rbp), %rdx
 3914 0095 4889D3   		movq	%rdx, %rbx
 3915              	.LVL408:
 3916 0098 4889C1   		movq	%rax, %rcx
 3917 009b 488D0480 		leaq	(%rax,%rax,4), %rax
 3918 009f 488D0442 		leaq	(%rdx,%rax,2), %rax
 3919 00a3 4839C2   		cmpq	%rax, %rdx
 3920 00a6 0F828500 		jb	.L369
 3920      0000
 3921 00ac E9C40000 		jmp	.L370
 3921      00
 3922              	.LVL409:
 3923              		.p2align 4,,10
 3924 00b1 0F1F8000 		.p2align 3
 3924      000000
 3925              	.L366:
 3926              	.LBB358:
 3927              	.LBB359:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 3928              		.loc 1 39 0
 3929 00b8 0FB6F4   		movzbl	%ah, %esi
  40:fltk-1.3.4-1/png/pngwutil.c **** }
 3930              		.loc 1 40 0
 3931 00bb 88442401 		movb	%al, 1(%rsp)
 3932              	.LVL410:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 3933              		.loc 1 39 0
 3934 00bf 40883424 		movb	%sil, (%rsp)
 3935              	.LBE359:
 3936              	.LBE358:
1298:fltk-1.3.4-1/png/pngwutil.c ****          png_save_uint_16(entrybuf + 4, ep->blue);
 3937              		.loc 1 1298 0
 3938 00c3 0FB74302 		movzwl	2(%rbx), %eax
 3939              	.LVL411:
 3940              	.LBB360:
 3941              	.LBB361:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 3942              		.loc 1 39 0
 3943 00c7 0FB6F4   		movzbl	%ah, %esi
  40:fltk-1.3.4-1/png/pngwutil.c **** }
 3944              		.loc 1 40 0
 3945 00ca 88442403 		movb	%al, 3(%rsp)
 3946              	.LVL412:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 3947              		.loc 1 39 0
 3948 00ce 40887424 		movb	%sil, 2(%rsp)
 3948      02
 3949              	.LBE361:
 3950              	.LBE360:
1299:fltk-1.3.4-1/png/pngwutil.c ****          png_save_uint_16(entrybuf + 6, ep->alpha);
 3951              		.loc 1 1299 0
 3952 00d3 0FB74304 		movzwl	4(%rbx), %eax
 3953              	.LVL413:
 3954              	.LBB362:
 3955              	.LBB363:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 3956              		.loc 1 39 0
 3957 00d7 0FB6F4   		movzbl	%ah, %esi
  40:fltk-1.3.4-1/png/pngwutil.c **** }
 3958              		.loc 1 40 0
 3959 00da 88442405 		movb	%al, 5(%rsp)
 3960              	.LVL414:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 3961              		.loc 1 39 0
 3962 00de 40887424 		movb	%sil, 4(%rsp)
 3962      04
 3963              	.LBE363:
 3964              	.LBE362:
1300:fltk-1.3.4-1/png/pngwutil.c ****          png_save_uint_16(entrybuf + 8, ep->frequency);
 3965              		.loc 1 1300 0
 3966 00e3 0FB74306 		movzwl	6(%rbx), %eax
 3967              	.LVL415:
 3968              	.LBB364:
 3969              	.LBB365:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 3970              		.loc 1 39 0
 3971 00e7 0FB6F4   		movzbl	%ah, %esi
  40:fltk-1.3.4-1/png/pngwutil.c **** }
 3972              		.loc 1 40 0
 3973 00ea 88442407 		movb	%al, 7(%rsp)
 3974              	.LVL416:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 3975              		.loc 1 39 0
 3976 00ee 40887424 		movb	%sil, 6(%rsp)
 3976      06
 3977              	.LBE365:
 3978              	.LBE364:
1301:fltk-1.3.4-1/png/pngwutil.c ****       }
 3979              		.loc 1 1301 0
 3980 00f3 0FB74308 		movzwl	8(%rbx), %eax
 3981              	.LVL417:
 3982              	.LBB366:
 3983              	.LBB367:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 3984              		.loc 1 39 0
 3985 00f7 0FB6F4   		movzbl	%ah, %esi
  40:fltk-1.3.4-1/png/pngwutil.c **** }
 3986              		.loc 1 40 0
 3987 00fa 88442409 		movb	%al, 9(%rsp)
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 3988              		.loc 1 39 0
 3989 00fe 40887424 		movb	%sil, 8(%rsp)
 3989      08
 3990              	.LVL418:
 3991              	.L367:
 3992              	.LBE367:
 3993              	.LBE366:
 3994              	.LBB368:
 3995              	.LBB369:
 131:fltk-1.3.4-1/png/pngwutil.c ****       return;
 3996              		.loc 1 131 0 discriminator 2
 3997 0103 4D85E4   		testq	%r12, %r12
 3998 0106 7415     		je	.L368
 3999 0108 4C89EA   		movq	%r13, %rdx
 4000 010b 4889E6   		movq	%rsp, %rsi
 4001 010e 4C89E7   		movq	%r12, %rdi
 4002 0111 E8000000 		call	png_write_chunk_data.part.3
 4002      00
 4003              	.LVL419:
 4004 0116 8B4D18   		movl	24(%rbp), %ecx
 4005 0119 488B5510 		movq	16(%rbp), %rdx
 4006              	.L368:
 4007              	.LVL420:
 4008              	.LBE369:
 4009              	.LBE368:
1284:fltk-1.3.4-1/png/pngwutil.c ****    {
 4010              		.loc 1 1284 0 discriminator 2
 4011 011d 4863C1   		movslq	%ecx, %rax
 4012 0120 4883C30A 		addq	$10, %rbx
 4013              	.LVL421:
 4014 0124 488D0480 		leaq	(%rax,%rax,4), %rax
 4015 0128 488D0442 		leaq	(%rdx,%rax,2), %rax
 4016 012c 4839C3   		cmpq	%rax, %rbx
 4017 012f 733F     		jnb	.L386
 4018              	.L369:
1286:fltk-1.3.4-1/png/pngwutil.c ****       {
 4019              		.loc 1 1286 0
 4020 0131 807D0808 		cmpb	$8, 8(%rbp)
1288:fltk-1.3.4-1/png/pngwutil.c ****          entrybuf[1] = (png_byte)ep->green;
 4021              		.loc 1 1288 0
 4022 0135 0FB703   		movzwl	(%rbx), %eax
1286:fltk-1.3.4-1/png/pngwutil.c ****       {
 4023              		.loc 1 1286 0
 4024 0138 0F857AFF 		jne	.L366
 4024      FFFF
1288:fltk-1.3.4-1/png/pngwutil.c ****          entrybuf[1] = (png_byte)ep->green;
 4025              		.loc 1 1288 0
 4026 013e 880424   		movb	%al, (%rsp)
1289:fltk-1.3.4-1/png/pngwutil.c ****          entrybuf[2] = (png_byte)ep->blue;
 4027              		.loc 1 1289 0
 4028 0141 0FB74302 		movzwl	2(%rbx), %eax
 4029 0145 88442401 		movb	%al, 1(%rsp)
1290:fltk-1.3.4-1/png/pngwutil.c ****          entrybuf[3] = (png_byte)ep->alpha;
 4030              		.loc 1 1290 0
 4031 0149 0FB74304 		movzwl	4(%rbx), %eax
 4032 014d 88442402 		movb	%al, 2(%rsp)
1291:fltk-1.3.4-1/png/pngwutil.c ****          png_save_uint_16(entrybuf + 4, ep->frequency);
 4033              		.loc 1 1291 0
 4034 0151 0FB74306 		movzwl	6(%rbx), %eax
 4035 0155 88442403 		movb	%al, 3(%rsp)
1292:fltk-1.3.4-1/png/pngwutil.c ****       }
 4036              		.loc 1 1292 0
 4037 0159 0FB74308 		movzwl	8(%rbx), %eax
 4038              	.LVL422:
 4039              	.LBB370:
 4040              	.LBB371:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 4041              		.loc 1 39 0
 4042 015d 0FB6F4   		movzbl	%ah, %esi
  40:fltk-1.3.4-1/png/pngwutil.c **** }
 4043              		.loc 1 40 0
 4044 0160 88442405 		movb	%al, 5(%rsp)
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 4045              		.loc 1 39 0
 4046 0164 40887424 		movb	%sil, 4(%rsp)
 4046      04
 4047 0169 EB98     		jmp	.L367
 4048              	.LVL423:
 4049 016b 0F1F4400 		.p2align 4,,10
 4049      00
 4050              		.p2align 3
 4051              	.L386:
 4052              	.LBE371:
 4053              	.LBE370:
 4054              	.LBB372:
 4055              	.LBB373:
 151:fltk-1.3.4-1/png/pngwutil.c **** 
 4056              		.loc 1 151 0
 4057 0170 4D85E4   		testq	%r12, %r12
 4058 0173 7408     		je	.L361
 4059              	.LVL424:
 4060              	.L370:
 4061 0175 4C89E7   		movq	%r12, %rdi
 4062 0178 E8000000 		call	png_write_chunk_end.part.4
 4062      00
 4063              	.LVL425:
 4064              	.L361:
 4065              	.LBE373:
 4066              	.LBE372:
1333:fltk-1.3.4-1/png/pngwutil.c **** #endif
 4067              		.loc 1 1333 0
 4068 017d 488B4424 		movq	104(%rsp), %rax
 4068      68
 4069 0182 64483304 		xorq	%fs:40, %rax
 4069      25280000 
 4069      00
 4070 018b 755A     		jne	.L387
 4071 018d 4883C470 		addq	$112, %rsp
 4072              		.cfi_remember_state
 4073              		.cfi_def_cfa_offset 48
 4074 0191 5B       		popq	%rbx
 4075              		.cfi_def_cfa_offset 40
 4076              	.LVL426:
 4077 0192 5D       		popq	%rbp
 4078              		.cfi_def_cfa_offset 32
 4079              	.LVL427:
 4080 0193 415C     		popq	%r12
 4081              		.cfi_def_cfa_offset 24
 4082              	.LVL428:
 4083 0195 415D     		popq	%r13
 4084              		.cfi_def_cfa_offset 16
 4085              	.LVL429:
 4086 0197 415E     		popq	%r14
 4087              		.cfi_def_cfa_offset 8
 4088              	.LVL430:
 4089 0199 C3       		ret
 4090              	.LVL431:
 4091 019a 660F1F44 		.p2align 4,,10
 4091      0000
 4092              		.p2align 3
 4093              	.L364:
 4094              		.cfi_restore_state
1284:fltk-1.3.4-1/png/pngwutil.c ****    {
 4095              		.loc 1 1284 0
 4096 01a0 48634518 		movslq	24(%rbp), %rax
 4097              	.LVL432:
 4098 01a4 488B5510 		movq	16(%rbp), %rdx
 4099              	.LVL433:
 4100 01a8 4889D3   		movq	%rdx, %rbx
 4101              	.LVL434:
 4102 01ab 4889C1   		movq	%rax, %rcx
 4103 01ae 488D0480 		leaq	(%rax,%rax,4), %rax
 4104 01b2 488D0442 		leaq	(%rdx,%rax,2), %rax
 4105 01b6 4839C2   		cmpq	%rax, %rdx
 4106 01b9 0F8272FF 		jb	.L369
 4106      FFFF
 4107 01bf EBBC     		jmp	.L361
 4108              	.LVL435:
 4109              		.p2align 4,,10
 4110 01c1 0F1F8000 		.p2align 3
 4110      000000
 4111              	.L385:
 4112              	.LBB374:
 4113              	.LBB355:
 4114 01c8 488D7424 		leaq	16(%rsp), %rsi
 4114      10
 4115              	.LVL436:
 4116 01cd 4C89E7   		movq	%r12, %rdi
 4117 01d0 E8000000 		call	png_write_chunk_data.part.3
 4117      00
 4118              	.LVL437:
 4119 01d5 E9A2FEFF 		jmp	.L365
 4119      FF
 4120              	.LVL438:
 4121              	.L384:
 4122              	.LBE355:
 4123              	.LBE374:
1271:fltk-1.3.4-1/png/pngwutil.c **** 
 4124              		.loc 1 1271 0
 4125 01da BE000000 		movl	$.LC52, %esi
 4125      00
 4126 01df 4C89E7   		movq	%r12, %rdi
 4127 01e2 E8000000 		call	png_error
 4127      00
 4128              	.LVL439:
 4129              	.L387:
1333:fltk-1.3.4-1/png/pngwutil.c **** #endif
 4130              		.loc 1 1333 0
 4131 01e7 E8000000 		call	__stack_chk_fail
 4131      00
 4132              	.LVL440:
 4133              		.cfi_endproc
 4134              	.LFE80:
 4136              		.section	.text.unlikely.png_write_sPLT
 4137              	.LCOLDE53:
 4138              		.section	.text.png_write_sPLT
 4139              	.LHOTE53:
 4140              		.section	.rodata.str1.1
 4141              	.LC54:
 4142 0100 496E7661 		.string	"Invalid sBIT depth specified"
 4142      6C696420 
 4142      73424954 
 4142      20646570 
 4142      74682073 
 4143              		.section	.text.unlikely.png_write_sBIT,"ax",@progbits
 4144              	.LCOLDB55:
 4145              		.section	.text.png_write_sBIT,"ax",@progbits
 4146              	.LHOTB55:
 4147              		.p2align 4,,15
 4148              		.globl	png_write_sBIT
 4150              	png_write_sBIT:
 4151              	.LFB81:
1340:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[4];
 4152              		.loc 1 1340 0
 4153              		.cfi_startproc
 4154              	.LVL441:
 4155 0000 4883EC18 		subq	$24, %rsp
 4156              		.cfi_def_cfa_offset 32
1340:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[4];
 4157              		.loc 1 1340 0
 4158 0004 64488B04 		movq	%fs:40, %rax
 4158      25280000 
 4158      00
 4159 000d 48894424 		movq	%rax, 8(%rsp)
 4159      08
 4160 0012 31C0     		xorl	%eax, %eax
1347:fltk-1.3.4-1/png/pngwutil.c ****    {
 4161              		.loc 1 1347 0
 4162 0014 F6C202   		testb	$2, %dl
 4163 0017 7457     		je	.L389
 4164              	.LBB375:
1351:fltk-1.3.4-1/png/pngwutil.c ****           png_ptr->usr_bit_depth);
 4165              		.loc 1 1351 0
 4166 0019 83FA03   		cmpl	$3, %edx
 4167 001c B8080000 		movl	$8, %eax
 4167      00
 4168 0021 7407     		je	.L390
1351:fltk-1.3.4-1/png/pngwutil.c ****           png_ptr->usr_bit_depth);
 4169              		.loc 1 1351 0 is_stmt 0 discriminator 1
 4170 0023 0FB68779 		movzbl	633(%rdi), %eax
 4170      020000
 4171              	.L390:
 4172              	.LVL442:
1354:fltk-1.3.4-1/png/pngwutil.c ****           sbit->green == 0 || sbit->green > maxbits ||
 4173              		.loc 1 1354 0 is_stmt 1 discriminator 4
 4174 002a 0FB60E   		movzbl	(%rsi), %ecx
 4175 002d 84C9     		testb	%cl, %cl
 4176 002f 744F     		je	.L394
 4177 0031 38C8     		cmpb	%cl, %al
 4178 0033 724B     		jb	.L394
1355:fltk-1.3.4-1/png/pngwutil.c ****           sbit->blue == 0 || sbit->blue > maxbits)
 4179              		.loc 1 1355 0 discriminator 2
 4180 0035 440FB646 		movzbl	1(%rsi), %r8d
 4180      01
 4181 003a 4584C0   		testb	%r8b, %r8b
 4182 003d 7441     		je	.L394
 4183 003f 4438C0   		cmpb	%r8b, %al
 4184 0042 723C     		jb	.L394
1356:fltk-1.3.4-1/png/pngwutil.c ****       {
 4185              		.loc 1 1356 0 discriminator 1
 4186 0044 440FB64E 		movzbl	2(%rsi), %r9d
 4186      02
 4187 0049 4584C9   		testb	%r9b, %r9b
 4188 004c 7432     		je	.L394
 4189 004e 4438C8   		cmpb	%r9b, %al
 4190 0051 722D     		jb	.L394
1362:fltk-1.3.4-1/png/pngwutil.c ****       buf[1] = sbit->green;
 4191              		.loc 1 1362 0
 4192 0053 880C24   		movb	%cl, (%rsp)
1363:fltk-1.3.4-1/png/pngwutil.c ****       buf[2] = sbit->blue;
 4193              		.loc 1 1363 0
 4194 0056 44884424 		movb	%r8b, 1(%rsp)
 4194      01
1365:fltk-1.3.4-1/png/pngwutil.c ****    }
 4195              		.loc 1 1365 0
 4196 005b B9030000 		movl	$3, %ecx
 4196      00
1364:fltk-1.3.4-1/png/pngwutil.c ****       size = 3;
 4197              		.loc 1 1364 0
 4198 0060 44884C24 		movb	%r9b, 2(%rsp)
 4198      02
 4199              	.LVL443:
 4200              	.LBE375:
 4201 0065 EB41     		jmp	.L395
 4202              	.LVL444:
 4203 0067 660F1F84 		.p2align 4,,10
 4203      00000000 
 4203      00
 4204              		.p2align 3
 4205              	.L389:
1370:fltk-1.3.4-1/png/pngwutil.c ****       {
 4206              		.loc 1 1370 0
 4207 0070 0FB64603 		movzbl	3(%rsi), %eax
 4208 0074 84C0     		testb	%al, %al
 4209 0076 7408     		je	.L394
1370:fltk-1.3.4-1/png/pngwutil.c ****       {
 4210              		.loc 1 1370 0 is_stmt 0 discriminator 1
 4211 0078 3A877902 		cmpb	633(%rdi), %al
 4211      0000
 4212 007e 7620     		jbe	.L410
 4213              	.LVL445:
 4214              	.L394:
 4215              	.LBB376:
1358:fltk-1.3.4-1/png/pngwutil.c ****          return;
 4216              		.loc 1 1358 0 is_stmt 1
 4217 0080 BE000000 		movl	$.LC54, %esi
 4217      00
 4218              	.LVL446:
 4219 0085 E8000000 		call	png_warning
 4219      00
 4220              	.LVL447:
 4221              	.L388:
 4222              	.LBE376:
1392:fltk-1.3.4-1/png/pngwutil.c **** #endif
 4223              		.loc 1 1392 0
 4224 008a 488B4424 		movq	8(%rsp), %rax
 4224      08
 4225 008f 64483304 		xorq	%fs:40, %rax
 4225      25280000 
 4225      00
 4226 0098 7539     		jne	.L411
 4227 009a 4883C418 		addq	$24, %rsp
 4228              		.cfi_remember_state
 4229              		.cfi_def_cfa_offset 8
 4230 009e C3       		ret
 4231              	.LVL448:
 4232 009f 90       		.p2align 4,,10
 4233              		.p2align 3
 4234              	.L410:
 4235              		.cfi_restore_state
1376:fltk-1.3.4-1/png/pngwutil.c ****       size = 1;
 4236              		.loc 1 1376 0
 4237 00a0 880424   		movb	%al, (%rsp)
 4238              	.LVL449:
1377:fltk-1.3.4-1/png/pngwutil.c ****    }
 4239              		.loc 1 1377 0
 4240 00a3 B9010000 		movl	$1, %ecx
 4240      00
 4241              	.LVL450:
 4242              	.L395:
1380:fltk-1.3.4-1/png/pngwutil.c ****    {
 4243              		.loc 1 1380 0
 4244 00a8 83E204   		andl	$4, %edx
 4245              	.LVL451:
 4246 00ab 7417     		je	.L396
1382:fltk-1.3.4-1/png/pngwutil.c ****       {
 4247              		.loc 1 1382 0
 4248 00ad 0FB64604 		movzbl	4(%rsi), %eax
 4249 00b1 84C0     		testb	%al, %al
 4250 00b3 74CB     		je	.L394
1382:fltk-1.3.4-1/png/pngwutil.c ****       {
 4251              		.loc 1 1382 0 is_stmt 0 discriminator 1
 4252 00b5 3A877902 		cmpb	633(%rdi), %al
 4252      0000
 4253 00bb 77C3     		ja	.L394
 4254              	.LVL452:
1388:fltk-1.3.4-1/png/pngwutil.c ****    }
 4255              		.loc 1 1388 0 is_stmt 1
 4256 00bd 88040C   		movb	%al, (%rsp,%rcx)
 4257 00c0 4883C101 		addq	$1, %rcx
 4258              	.LVL453:
 4259              	.L396:
1391:fltk-1.3.4-1/png/pngwutil.c **** }
 4260              		.loc 1 1391 0
 4261 00c4 4889E2   		movq	%rsp, %rdx
 4262 00c7 BE544942 		movl	$1933723988, %esi
 4262      73
 4263              	.LVL454:
 4264 00cc E8000000 		call	png_write_complete_chunk
 4264      00
 4265              	.LVL455:
 4266 00d1 EBB7     		jmp	.L388
 4267              	.L411:
1392:fltk-1.3.4-1/png/pngwutil.c **** #endif
 4268              		.loc 1 1392 0
 4269 00d3 E8000000 		call	__stack_chk_fail
 4269      00
 4270              	.LVL456:
 4271              		.cfi_endproc
 4272              	.LFE81:
 4274              		.section	.text.unlikely.png_write_sBIT
 4275              	.LCOLDE55:
 4276              		.section	.text.png_write_sBIT
 4277              	.LHOTE55:
 4278              		.section	.text.unlikely.png_write_cHRM_fixed,"ax",@progbits
 4279              	.LCOLDB56:
 4280              		.section	.text.png_write_cHRM_fixed,"ax",@progbits
 4281              	.LHOTB56:
 4282              		.p2align 4,,15
 4283              		.globl	png_write_cHRM_fixed
 4285              	png_write_cHRM_fixed:
 4286              	.LFB82:
1399:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[32];
 4287              		.loc 1 1399 0
 4288              		.cfi_startproc
 4289              	.LVL457:
 4290 0000 55       		pushq	%rbp
 4291              		.cfi_def_cfa_offset 16
 4292              		.cfi_offset 6, -16
 4293 0001 53       		pushq	%rbx
 4294              		.cfi_def_cfa_offset 24
 4295              		.cfi_offset 3, -24
 4296 0002 4889F3   		movq	%rsi, %rbx
 4297 0005 4889FD   		movq	%rdi, %rbp
 4298 0008 4883EC38 		subq	$56, %rsp
 4299              		.cfi_def_cfa_offset 80
1405:fltk-1.3.4-1/png/pngwutil.c ****    png_save_int_32(buf +  4, xy->whitey);
 4300              		.loc 1 1405 0
 4301 000c 8B7618   		movl	24(%rsi), %esi
 4302              	.LVL458:
 4303 000f 4889E7   		movq	%rsp, %rdi
 4304              	.LVL459:
1399:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[32];
 4305              		.loc 1 1399 0
 4306 0012 64488B04 		movq	%fs:40, %rax
 4306      25280000 
 4306      00
 4307 001b 48894424 		movq	%rax, 40(%rsp)
 4307      28
 4308 0020 31C0     		xorl	%eax, %eax
1405:fltk-1.3.4-1/png/pngwutil.c ****    png_save_int_32(buf +  4, xy->whitey);
 4309              		.loc 1 1405 0
 4310 0022 E8000000 		call	png_save_int_32
 4310      00
 4311              	.LVL460:
1406:fltk-1.3.4-1/png/pngwutil.c **** 
 4312              		.loc 1 1406 0
 4313 0027 8B731C   		movl	28(%rbx), %esi
 4314 002a 488D7C24 		leaq	4(%rsp), %rdi
 4314      04
 4315 002f E8000000 		call	png_save_int_32
 4315      00
 4316              	.LVL461:
1408:fltk-1.3.4-1/png/pngwutil.c ****    png_save_int_32(buf + 12, xy->redy);
 4317              		.loc 1 1408 0
 4318 0034 8B33     		movl	(%rbx), %esi
 4319 0036 488D7C24 		leaq	8(%rsp), %rdi
 4319      08
 4320 003b E8000000 		call	png_save_int_32
 4320      00
 4321              	.LVL462:
1409:fltk-1.3.4-1/png/pngwutil.c **** 
 4322              		.loc 1 1409 0
 4323 0040 8B7304   		movl	4(%rbx), %esi
 4324 0043 488D7C24 		leaq	12(%rsp), %rdi
 4324      0C
 4325 0048 E8000000 		call	png_save_int_32
 4325      00
 4326              	.LVL463:
1411:fltk-1.3.4-1/png/pngwutil.c ****    png_save_int_32(buf + 20, xy->greeny);
 4327              		.loc 1 1411 0
 4328 004d 8B7308   		movl	8(%rbx), %esi
 4329 0050 488D7C24 		leaq	16(%rsp), %rdi
 4329      10
 4330 0055 E8000000 		call	png_save_int_32
 4330      00
 4331              	.LVL464:
1412:fltk-1.3.4-1/png/pngwutil.c **** 
 4332              		.loc 1 1412 0
 4333 005a 8B730C   		movl	12(%rbx), %esi
 4334 005d 488D7C24 		leaq	20(%rsp), %rdi
 4334      14
 4335 0062 E8000000 		call	png_save_int_32
 4335      00
 4336              	.LVL465:
1414:fltk-1.3.4-1/png/pngwutil.c ****    png_save_int_32(buf + 28, xy->bluey);
 4337              		.loc 1 1414 0
 4338 0067 8B7310   		movl	16(%rbx), %esi
 4339 006a 488D7C24 		leaq	24(%rsp), %rdi
 4339      18
 4340 006f E8000000 		call	png_save_int_32
 4340      00
 4341              	.LVL466:
1415:fltk-1.3.4-1/png/pngwutil.c **** 
 4342              		.loc 1 1415 0
 4343 0074 8B7314   		movl	20(%rbx), %esi
 4344 0077 488D7C24 		leaq	28(%rsp), %rdi
 4344      1C
 4345 007c E8000000 		call	png_save_int_32
 4345      00
 4346              	.LVL467:
1417:fltk-1.3.4-1/png/pngwutil.c **** }
 4347              		.loc 1 1417 0
 4348 0081 B9200000 		movl	$32, %ecx
 4348      00
 4349 0086 4889E2   		movq	%rsp, %rdx
 4350 0089 BE4D5248 		movl	$1665684045, %esi
 4350      63
 4351 008e 4889EF   		movq	%rbp, %rdi
 4352 0091 E8000000 		call	png_write_complete_chunk
 4352      00
 4353              	.LVL468:
1418:fltk-1.3.4-1/png/pngwutil.c **** #endif
 4354              		.loc 1 1418 0
 4355 0096 488B4424 		movq	40(%rsp), %rax
 4355      28
 4356 009b 64483304 		xorq	%fs:40, %rax
 4356      25280000 
 4356      00
 4357 00a4 7507     		jne	.L415
 4358 00a6 4883C438 		addq	$56, %rsp
 4359              		.cfi_remember_state
 4360              		.cfi_def_cfa_offset 24
 4361 00aa 5B       		popq	%rbx
 4362              		.cfi_def_cfa_offset 16
 4363              	.LVL469:
 4364 00ab 5D       		popq	%rbp
 4365              		.cfi_def_cfa_offset 8
 4366              	.LVL470:
 4367 00ac C3       		ret
 4368              	.LVL471:
 4369              	.L415:
 4370              		.cfi_restore_state
 4371 00ad E8000000 		call	__stack_chk_fail
 4371      00
 4372              	.LVL472:
 4373              		.cfi_endproc
 4374              	.LFE82:
 4376              		.section	.text.unlikely.png_write_cHRM_fixed
 4377              	.LCOLDE56:
 4378              		.section	.text.png_write_cHRM_fixed
 4379              	.LHOTE56:
 4380              		.section	.rodata.str1.8
 4381 0279 00000000 		.align 8
 4381      000000
 4382              	.LC57:
 4383 0280 496E7661 		.string	"Invalid number of transparent colors specified"
 4383      6C696420 
 4383      6E756D62 
 4383      6572206F 
 4383      66207472 
 4384 02af 00       		.align 8
 4385              	.LC58:
 4386 02b0 49676E6F 		.string	"Ignoring attempt to write tRNS chunk out-of-range for bit_depth"
 4386      72696E67 
 4386      20617474 
 4386      656D7074 
 4386      20746F20 
 4387              		.align 8
 4388              	.LC59:
 4389 02f0 49676E6F 		.string	"Ignoring attempt to write 16-bit tRNS chunk when bit_depth is 8"
 4389      72696E67 
 4389      20617474 
 4389      656D7074 
 4389      20746F20 
 4390              		.align 8
 4391              	.LC60:
 4392 0330 43616E27 		.string	"Can't write tRNS with an alpha channel"
 4392      74207772 
 4392      69746520 
 4392      74524E53 
 4392      20776974 
 4393              		.section	.text.unlikely.png_write_tRNS,"ax",@progbits
 4394              	.LCOLDB61:
 4395              		.section	.text.png_write_tRNS,"ax",@progbits
 4396              	.LHOTB61:
 4397              		.p2align 4,,15
 4398              		.globl	png_write_tRNS
 4400              	png_write_tRNS:
 4401              	.LFB83:
1426:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[6];
 4402              		.loc 1 1426 0
 4403              		.cfi_startproc
 4404              	.LVL473:
 4405 0000 4883EC18 		subq	$24, %rsp
 4406              		.cfi_def_cfa_offset 32
1426:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[6];
 4407              		.loc 1 1426 0
 4408 0004 64488B04 		movq	%fs:40, %rax
 4408      25280000 
 4408      00
 4409 000d 48894424 		movq	%rax, 8(%rsp)
 4409      08
 4410 0012 31C0     		xorl	%eax, %eax
1431:fltk-1.3.4-1/png/pngwutil.c ****    {
 4411              		.loc 1 1431 0
 4412 0014 4183F803 		cmpl	$3, %r8d
 4413 0018 7446     		je	.L432
1445:fltk-1.3.4-1/png/pngwutil.c ****    {
 4414              		.loc 1 1445 0
 4415 001a 4585C0   		testl	%r8d, %r8d
 4416 001d 7529     		jne	.L422
1448:fltk-1.3.4-1/png/pngwutil.c ****       {
 4417              		.loc 1 1448 0
 4418 001f 0FB68F78 		movzbl	632(%rdi), %ecx
 4418      020000
 4419              	.LVL474:
 4420 0026 0FB75208 		movzwl	8(%rdx), %edx
 4421              	.LVL475:
 4422 002a B8010000 		movl	$1, %eax
 4422      00
 4423 002f D3E0     		sall	%cl, %eax
 4424 0031 89D6     		movl	%edx, %esi
 4425              	.LVL476:
 4426 0033 39C2     		cmpl	%eax, %edx
 4427 0035 7C69     		jl	.L423
1450:fltk-1.3.4-1/png/pngwutil.c ****              "Ignoring attempt to write tRNS chunk out-of-range for bit_depth");
 4428              		.loc 1 1450 0
 4429 0037 BE000000 		movl	$.LC58, %esi
 4429      00
 4430 003c E8000000 		call	png_app_warning
 4430      00
 4431              	.LVL477:
1453:fltk-1.3.4-1/png/pngwutil.c ****       }
 4432              		.loc 1 1453 0
 4433 0041 EB3A     		jmp	.L416
 4434              	.LVL478:
 4435              		.p2align 4,,10
 4436 0043 0F1F4400 		.p2align 3
 4436      00
 4437              	.L422:
1460:fltk-1.3.4-1/png/pngwutil.c ****    {
 4438              		.loc 1 1460 0
 4439 0048 4183F802 		cmpl	$2, %r8d
 4440 004c 7472     		je	.L433
1482:fltk-1.3.4-1/png/pngwutil.c ****    }
 4441              		.loc 1 1482 0
 4442 004e BE000000 		movl	$.LC60, %esi
 4442      00
 4443              	.LVL479:
 4444 0053 E8000000 		call	png_app_warning
 4444      00
 4445              	.LVL480:
 4446 0058 EB23     		jmp	.L416
 4447              	.LVL481:
 4448 005a 660F1F44 		.p2align 4,,10
 4448      0000
 4449              		.p2align 3
 4450              	.L432:
1433:fltk-1.3.4-1/png/pngwutil.c ****       {
 4451              		.loc 1 1433 0
 4452 0060 85C9     		testl	%ecx, %ecx
 4453 0062 7E0F     		jle	.L418
1433:fltk-1.3.4-1/png/pngwutil.c ****       {
 4454              		.loc 1 1433 0 is_stmt 0 discriminator 1
 4455 0064 0FB78768 		movzwl	616(%rdi), %eax
 4455      020000
 4456 006b 39C1     		cmpl	%eax, %ecx
 4457 006d 0F8EA500 		jle	.L419
 4457      0000
 4458              	.L418:
1435:fltk-1.3.4-1/png/pngwutil.c ****              "Invalid number of transparent colors specified");
 4459              		.loc 1 1435 0 is_stmt 1
 4460 0073 BE000000 		movl	$.LC57, %esi
 4460      00
 4461              	.LVL482:
 4462 0078 E8000000 		call	png_app_warning
 4462      00
 4463              	.LVL483:
 4464              	.L416:
1484:fltk-1.3.4-1/png/pngwutil.c **** #endif
 4465              		.loc 1 1484 0
 4466 007d 488B4424 		movq	8(%rsp), %rax
 4466      08
 4467 0082 64483304 		xorq	%fs:40, %rax
 4467      25280000 
 4467      00
 4468 008b 0F85AE00 		jne	.L434
 4468      0000
 4469 0091 4883C418 		addq	$24, %rsp
 4470              		.cfi_remember_state
 4471              		.cfi_def_cfa_offset 8
 4472 0095 C3       		ret
 4473              	.LVL484:
 4474 0096 662E0F1F 		.p2align 4,,10
 4474      84000000 
 4474      0000
 4475              		.p2align 3
 4476              	.L423:
 4477              		.cfi_restore_state
 4478              	.LBB377:
 4479              	.LBB378:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 4480              		.loc 1 39 0
 4481 00a0 C1EA08   		shrl	$8, %edx
 4482              	.LVL485:
  40:fltk-1.3.4-1/png/pngwutil.c **** }
 4483              		.loc 1 40 0
 4484 00a3 40887424 		movb	%sil, 1(%rsp)
 4484      01
 4485              	.LVL486:
 4486              	.LBE378:
 4487              	.LBE377:
1457:fltk-1.3.4-1/png/pngwutil.c ****    }
 4488              		.loc 1 1457 0
 4489 00a8 B9020000 		movl	$2, %ecx
 4489      00
 4490              	.LBB380:
 4491              	.LBB379:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 4492              		.loc 1 39 0
 4493 00ad 881424   		movb	%dl, (%rsp)
 4494              	.LBE379:
 4495              	.LBE380:
1457:fltk-1.3.4-1/png/pngwutil.c ****    }
 4496              		.loc 1 1457 0
 4497 00b0 BE534E52 		movl	$1951551059, %esi
 4497      74
 4498 00b5 4889E2   		movq	%rsp, %rdx
 4499 00b8 E8000000 		call	png_write_complete_chunk
 4499      00
 4500              	.LVL487:
 4501 00bd EBBE     		jmp	.L416
 4502              	.LVL488:
 4503 00bf 90       		.p2align 4,,10
 4504              		.p2align 3
 4505              	.L433:
1463:fltk-1.3.4-1/png/pngwutil.c ****       png_save_uint_16(buf + 2, tran->green);
 4506              		.loc 1 1463 0
 4507 00c0 0FB74A02 		movzwl	2(%rdx), %ecx
 4508              	.LVL489:
1467:fltk-1.3.4-1/png/pngwutil.c **** #else
 4509              		.loc 1 1467 0
 4510 00c4 80BF7802 		cmpb	$8, 632(%rdi)
 4510      000008
 4511              	.LBB381:
 4512              	.LBB382:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 4513              		.loc 1 39 0
 4514 00cb 0FB6F5   		movzbl	%ch, %esi
 4515              	.LVL490:
  40:fltk-1.3.4-1/png/pngwutil.c **** }
 4516              		.loc 1 40 0
 4517 00ce 884C2401 		movb	%cl, 1(%rsp)
 4518              	.LVL491:
 4519              	.LBE382:
 4520              	.LBE381:
1464:fltk-1.3.4-1/png/pngwutil.c ****       png_save_uint_16(buf + 4, tran->blue);
 4521              		.loc 1 1464 0
 4522 00d2 0FB74A04 		movzwl	4(%rdx), %ecx
 4523              	.LVL492:
1465:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_16BIT_SUPPORTED
 4524              		.loc 1 1465 0
 4525 00d6 0FB75206 		movzwl	6(%rdx), %edx
 4526              	.LVL493:
 4527              	.LBB384:
 4528              	.LBB383:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 4529              		.loc 1 39 0
 4530 00da 40883424 		movb	%sil, (%rsp)
 4531              	.LBE383:
 4532              	.LBE384:
 4533              	.LBB385:
 4534              	.LBB386:
 4535 00de 0FB6C5   		movzbl	%ch, %eax
  40:fltk-1.3.4-1/png/pngwutil.c **** }
 4536              		.loc 1 40 0
 4537 00e1 884C2403 		movb	%cl, 3(%rsp)
 4538              	.LVL494:
 4539              	.LBE386:
 4540              	.LBE385:
 4541              	.LBB388:
 4542              	.LBB389:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 4543              		.loc 1 39 0
 4544 00e5 0FB6CE   		movzbl	%dh, %ecx
 4545              	.LBE389:
 4546              	.LBE388:
 4547              	.LBB391:
 4548              	.LBB387:
 4549 00e8 88442402 		movb	%al, 2(%rsp)
 4550              	.LBE387:
 4551              	.LBE391:
 4552              	.LBB392:
 4553              	.LBB390:
  40:fltk-1.3.4-1/png/pngwutil.c **** }
 4554              		.loc 1 40 0
 4555 00ec 88542405 		movb	%dl, 5(%rsp)
 4556              	.LVL495:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 4557              		.loc 1 39 0
 4558 00f0 884C2404 		movb	%cl, 4(%rsp)
 4559              	.LBE390:
 4560              	.LBE392:
1467:fltk-1.3.4-1/png/pngwutil.c **** #else
 4561              		.loc 1 1467 0
 4562 00f4 7506     		jne	.L425
1467:fltk-1.3.4-1/png/pngwutil.c **** #else
 4563              		.loc 1 1467 0 is_stmt 0 discriminator 1
 4564 00f6 09F0     		orl	%esi, %eax
 4565 00f8 08C8     		orb	%cl, %al
 4566 00fa 7534     		jne	.L435
 4567              	.L425:
1477:fltk-1.3.4-1/png/pngwutil.c ****    }
 4568              		.loc 1 1477 0 is_stmt 1
 4569 00fc B9060000 		movl	$6, %ecx
 4569      00
 4570 0101 4889E2   		movq	%rsp, %rdx
 4571 0104 BE534E52 		movl	$1951551059, %esi
 4571      74
 4572 0109 E8000000 		call	png_write_complete_chunk
 4572      00
 4573              	.LVL496:
 4574 010e E96AFFFF 		jmp	.L416
 4574      FF
 4575              	.LVL497:
 4576              		.p2align 4,,10
 4577 0113 0F1F4400 		.p2align 3
 4577      00
 4578              	.L419:
1441:fltk-1.3.4-1/png/pngwutil.c ****          (png_size_t)num_trans);
 4579              		.loc 1 1441 0
 4580 0118 4889F2   		movq	%rsi, %rdx
 4581              	.LVL498:
 4582 011b 4863C9   		movslq	%ecx, %rcx
 4583 011e BE534E52 		movl	$1951551059, %esi
 4583      74
 4584              	.LVL499:
 4585 0123 E8000000 		call	png_write_complete_chunk
 4585      00
 4586              	.LVL500:
 4587 0128 E950FFFF 		jmp	.L416
 4587      FF
 4588              	.LVL501:
 4589 012d 0F1F00   		.p2align 4,,10
 4590              		.p2align 3
 4591              	.L435:
1472:fltk-1.3.4-1/png/pngwutil.c ****            "Ignoring attempt to write 16-bit tRNS chunk when bit_depth is 8");
 4592              		.loc 1 1472 0
 4593 0130 BE000000 		movl	$.LC59, %esi
 4593      00
 4594 0135 E8000000 		call	png_app_warning
 4594      00
 4595              	.LVL502:
1474:fltk-1.3.4-1/png/pngwutil.c ****       }
 4596              		.loc 1 1474 0
 4597 013a E93EFFFF 		jmp	.L416
 4597      FF
 4598              	.L434:
1484:fltk-1.3.4-1/png/pngwutil.c **** #endif
 4599              		.loc 1 1484 0
 4600 013f E8000000 		call	__stack_chk_fail
 4600      00
 4601              	.LVL503:
 4602              		.cfi_endproc
 4603              	.LFE83:
 4605              		.section	.text.unlikely.png_write_tRNS
 4606              	.LCOLDE61:
 4607              		.section	.text.png_write_tRNS
 4608              	.LHOTE61:
 4609              		.section	.rodata.str1.8
 4610 0357 00       		.align 8
 4611              	.LC62:
 4612 0358 496E7661 		.string	"Invalid background palette index"
 4612      6C696420 
 4612      6261636B 
 4612      67726F75 
 4612      6E642070 
 4613 0379 00000000 		.align 8
 4613      000000
 4614              	.LC63:
 4615 0380 49676E6F 		.string	"Ignoring attempt to write 16-bit bKGD chunk when bit_depth is 8"
 4615      72696E67 
 4615      20617474 
 4615      656D7074 
 4615      20746F20 
 4616              		.align 8
 4617              	.LC64:
 4618 03c0 49676E6F 		.string	"Ignoring attempt to write bKGD chunk out-of-range for bit_depth"
 4618      72696E67 
 4618      20617474 
 4618      656D7074 
 4618      20746F20 
 4619              		.section	.text.unlikely.png_write_bKGD,"ax",@progbits
 4620              	.LCOLDB65:
 4621              		.section	.text.png_write_bKGD,"ax",@progbits
 4622              	.LHOTB65:
 4623              		.p2align 4,,15
 4624              		.globl	png_write_bKGD
 4626              	png_write_bKGD:
 4627              	.LFB84:
1491:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[6];
 4628              		.loc 1 1491 0
 4629              		.cfi_startproc
 4630              	.LVL504:
 4631 0000 53       		pushq	%rbx
 4632              		.cfi_def_cfa_offset 16
 4633              		.cfi_offset 3, -16
 4634 0001 4883EC10 		subq	$16, %rsp
 4635              		.cfi_def_cfa_offset 32
1491:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[6];
 4636              		.loc 1 1491 0
 4637 0005 64488B04 		movq	%fs:40, %rax
 4637      25280000 
 4637      00
 4638 000e 48894424 		movq	%rax, 8(%rsp)
 4638      08
 4639 0013 31C0     		xorl	%eax, %eax
1496:fltk-1.3.4-1/png/pngwutil.c ****    {
 4640              		.loc 1 1496 0
 4641 0015 83FA03   		cmpl	$3, %edx
 4642 0018 0F849A00 		je	.L458
 4642      0000
1513:fltk-1.3.4-1/png/pngwutil.c ****    {
 4643              		.loc 1 1513 0
 4644 001e 83E202   		andl	$2, %edx
 4645              	.LVL505:
 4646 0021 746D     		je	.L444
1515:fltk-1.3.4-1/png/pngwutil.c ****       png_save_uint_16(buf + 2, back->green);
 4647              		.loc 1 1515 0
 4648 0023 0FB75602 		movzwl	2(%rsi), %edx
 4649              	.LVL506:
1519:fltk-1.3.4-1/png/pngwutil.c **** #else
 4650              		.loc 1 1519 0
 4651 0027 80BF7802 		cmpb	$8, 632(%rdi)
 4651      000008
 4652              	.LBB393:
 4653              	.LBB394:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 4654              		.loc 1 39 0
 4655 002e 0FB6DE   		movzbl	%dh, %ebx
  40:fltk-1.3.4-1/png/pngwutil.c **** }
 4656              		.loc 1 40 0
 4657 0031 88542401 		movb	%dl, 1(%rsp)
 4658              	.LVL507:
 4659              	.LBE394:
 4660              	.LBE393:
1516:fltk-1.3.4-1/png/pngwutil.c ****       png_save_uint_16(buf + 4, back->blue);
 4661              		.loc 1 1516 0
 4662 0035 0FB75604 		movzwl	4(%rsi), %edx
 4663              	.LVL508:
 4664              	.LBB396:
 4665              	.LBB395:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 4666              		.loc 1 39 0
 4667 0039 881C24   		movb	%bl, (%rsp)
 4668              	.LBE395:
 4669              	.LBE396:
 4670              	.LBB397:
 4671              	.LBB398:
 4672 003c 0FB6C6   		movzbl	%dh, %eax
  40:fltk-1.3.4-1/png/pngwutil.c **** }
 4673              		.loc 1 40 0
 4674 003f 88542403 		movb	%dl, 3(%rsp)
 4675              	.LVL509:
 4676              	.LBE398:
 4677              	.LBE397:
1517:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_16BIT_SUPPORTED
 4678              		.loc 1 1517 0
 4679 0043 0FB75606 		movzwl	6(%rsi), %edx
 4680              	.LVL510:
 4681              	.LBB400:
 4682              	.LBB399:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 4683              		.loc 1 39 0
 4684 0047 88442402 		movb	%al, 2(%rsp)
 4685              	.LBE399:
 4686              	.LBE400:
 4687              	.LBB401:
 4688              	.LBB402:
 4689 004b 0FB6CE   		movzbl	%dh, %ecx
  40:fltk-1.3.4-1/png/pngwutil.c **** }
 4690              		.loc 1 40 0
 4691 004e 88542405 		movb	%dl, 5(%rsp)
 4692              	.LVL511:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 4693              		.loc 1 39 0
 4694 0052 884C2404 		movb	%cl, 4(%rsp)
 4695              	.LBE402:
 4696              	.LBE401:
1519:fltk-1.3.4-1/png/pngwutil.c **** #else
 4697              		.loc 1 1519 0
 4698 0056 0F84B400 		je	.L459
 4698      0000
 4699              	.L445:
1530:fltk-1.3.4-1/png/pngwutil.c ****    }
 4700              		.loc 1 1530 0
 4701 005c B9060000 		movl	$6, %ecx
 4701      00
 4702 0061 4889E2   		movq	%rsp, %rdx
 4703 0064 BE44474B 		movl	$1649100612, %esi
 4703      62
 4704              	.LVL512:
 4705 0069 E8000000 		call	png_write_complete_chunk
 4705      00
 4706              	.LVL513:
 4707              	.L436:
1546:fltk-1.3.4-1/png/pngwutil.c **** #endif
 4708              		.loc 1 1546 0
 4709 006e 488B4424 		movq	8(%rsp), %rax
 4709      08
 4710 0073 64483304 		xorq	%fs:40, %rax
 4710      25280000 
 4710      00
 4711 007c 0F85D600 		jne	.L460
 4711      0000
 4712 0082 4883C410 		addq	$16, %rsp
 4713              		.cfi_remember_state
 4714              		.cfi_def_cfa_offset 16
 4715 0086 5B       		popq	%rbx
 4716              		.cfi_def_cfa_offset 8
 4717 0087 C3       		ret
 4718              	.LVL514:
 4719 0088 0F1F8400 		.p2align 4,,10
 4719      00000000 
 4720              		.p2align 3
 4721              	.L444:
 4722              		.cfi_restore_state
1535:fltk-1.3.4-1/png/pngwutil.c ****       {
 4723              		.loc 1 1535 0
 4724 0090 0FB68F78 		movzbl	632(%rdi), %ecx
 4724      020000
 4725 0097 0FB75608 		movzwl	8(%rsi), %edx
 4726 009b B8010000 		movl	$1, %eax
 4726      00
 4727 00a0 D3E0     		sall	%cl, %eax
 4728 00a2 89D6     		movl	%edx, %esi
 4729              	.LVL515:
 4730 00a4 39C2     		cmpl	%eax, %edx
 4731 00a6 7C40     		jl	.L446
1537:fltk-1.3.4-1/png/pngwutil.c ****              "Ignoring attempt to write bKGD chunk out-of-range for bit_depth");
 4732              		.loc 1 1537 0
 4733 00a8 BE000000 		movl	$.LC64, %esi
 4733      00
 4734 00ad E8000000 		call	png_warning
 4734      00
 4735              	.LVL516:
1540:fltk-1.3.4-1/png/pngwutil.c ****       }
 4736              		.loc 1 1540 0
 4737 00b2 EBBA     		jmp	.L436
 4738              	.LVL517:
 4739              		.p2align 4,,10
 4740 00b4 0F1F4000 		.p2align 3
 4741              	.L458:
1500:fltk-1.3.4-1/png/pngwutil.c ****           (png_ptr->mng_features_permitted & PNG_FLAG_MNG_EMPTY_PLTE) == 0) &&
 4742              		.loc 1 1500 0
 4743 00b8 0FB78768 		movzwl	616(%rdi), %eax
 4743      020000
1498:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_MNG_FEATURES_SUPPORTED
 4744              		.loc 1 1498 0
 4745 00bf 6685C0   		testw	%ax, %ax
 4746 00c2 746C     		je	.L461
1503:fltk-1.3.4-1/png/pngwutil.c ****       {
 4747              		.loc 1 1503 0
 4748 00c4 0FB60E   		movzbl	(%rsi), %ecx
1501:fltk-1.3.4-1/png/pngwutil.c **** #endif
 4749              		.loc 1 1501 0
 4750 00c7 6639C8   		cmpw	%cx, %ax
1503:fltk-1.3.4-1/png/pngwutil.c ****       {
 4751              		.loc 1 1503 0
 4752 00ca 89CA     		movl	%ecx, %edx
 4753              	.LVL518:
1501:fltk-1.3.4-1/png/pngwutil.c **** #endif
 4754              		.loc 1 1501 0
 4755 00cc 766B     		jbe	.L439
 4756              	.L441:
1509:fltk-1.3.4-1/png/pngwutil.c ****       png_write_complete_chunk(png_ptr, png_bKGD, buf, (png_size_t)1);
 4757              		.loc 1 1509 0
 4758 00ce 881424   		movb	%dl, (%rsp)
1510:fltk-1.3.4-1/png/pngwutil.c ****    }
 4759              		.loc 1 1510 0
 4760 00d1 B9010000 		movl	$1, %ecx
 4760      00
 4761 00d6 4889E2   		movq	%rsp, %rdx
 4762 00d9 BE44474B 		movl	$1649100612, %esi
 4762      62
 4763              	.LVL519:
 4764 00de E8000000 		call	png_write_complete_chunk
 4764      00
 4765              	.LVL520:
 4766 00e3 EB89     		jmp	.L436
 4767              	.LVL521:
 4768              		.p2align 4,,10
 4769 00e5 0F1F00   		.p2align 3
 4770              	.L446:
 4771              	.LBB403:
 4772              	.LBB404:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 4773              		.loc 1 39 0
 4774 00e8 C1EA08   		shrl	$8, %edx
 4775              	.LVL522:
  40:fltk-1.3.4-1/png/pngwutil.c **** }
 4776              		.loc 1 40 0
 4777 00eb 40887424 		movb	%sil, 1(%rsp)
 4777      01
 4778              	.LVL523:
 4779              	.LBE404:
 4780              	.LBE403:
1544:fltk-1.3.4-1/png/pngwutil.c ****    }
 4781              		.loc 1 1544 0
 4782 00f0 B9020000 		movl	$2, %ecx
 4782      00
 4783              	.LBB406:
 4784              	.LBB405:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 4785              		.loc 1 39 0
 4786 00f5 881424   		movb	%dl, (%rsp)
 4787              	.LBE405:
 4788              	.LBE406:
1544:fltk-1.3.4-1/png/pngwutil.c ****    }
 4789              		.loc 1 1544 0
 4790 00f8 BE44474B 		movl	$1649100612, %esi
 4790      62
 4791 00fd 4889E2   		movq	%rsp, %rdx
 4792 0100 E8000000 		call	png_write_complete_chunk
 4792      00
 4793              	.LVL524:
 4794 0105 E964FFFF 		jmp	.L436
 4794      FF
 4795              	.LVL525:
 4796 010a 660F1F44 		.p2align 4,,10
 4796      0000
 4797              		.p2align 3
 4798              	.L459:
1519:fltk-1.3.4-1/png/pngwutil.c **** #else
 4799              		.loc 1 1519 0 discriminator 1
 4800 0110 09D8     		orl	%ebx, %eax
 4801 0112 08C8     		orb	%cl, %al
 4802 0114 0F8442FF 		je	.L445
 4802      FFFF
1524:fltk-1.3.4-1/png/pngwutil.c ****              "Ignoring attempt to write 16-bit bKGD chunk when bit_depth is 8");
 4803              		.loc 1 1524 0
 4804 011a BE000000 		movl	$.LC63, %esi
 4804      00
 4805              	.LVL526:
 4806 011f E8000000 		call	png_warning
 4806      00
 4807              	.LVL527:
1527:fltk-1.3.4-1/png/pngwutil.c ****       }
 4808              		.loc 1 1527 0
 4809 0124 E945FFFF 		jmp	.L436
 4809      FF
 4810              	.LVL528:
 4811 0129 0F1F8000 		.p2align 4,,10
 4811      000000
 4812              		.p2align 3
 4813              	.L461:
1500:fltk-1.3.4-1/png/pngwutil.c ****           (png_ptr->mng_features_permitted & PNG_FLAG_MNG_EMPTY_PLTE) == 0) &&
 4814              		.loc 1 1500 0
 4815 0130 F6871804 		testb	$1, 1048(%rdi)
 4815      000001
 4816 0137 7517     		jne	.L462
 4817              	.LVL529:
 4818              	.L439:
1505:fltk-1.3.4-1/png/pngwutil.c ****          return;
 4819              		.loc 1 1505 0
 4820 0139 BE000000 		movl	$.LC62, %esi
 4820      00
 4821              	.LVL530:
 4822 013e E8000000 		call	png_warning
 4822      00
 4823              	.LVL531:
1506:fltk-1.3.4-1/png/pngwutil.c ****       }
 4824              		.loc 1 1506 0
 4825 0143 E926FFFF 		jmp	.L436
 4825      FF
 4826              	.LVL532:
 4827 0148 0F1F8400 		.p2align 4,,10
 4827      00000000 
 4828              		.p2align 3
 4829              	.L462:
 4830 0150 0FB616   		movzbl	(%rsi), %edx
 4831              	.LVL533:
 4832 0153 E976FFFF 		jmp	.L441
 4832      FF
 4833              	.LVL534:
 4834              	.L460:
1546:fltk-1.3.4-1/png/pngwutil.c **** #endif
 4835              		.loc 1 1546 0
 4836 0158 E8000000 		call	__stack_chk_fail
 4836      00
 4837              	.LVL535:
 4838              		.cfi_endproc
 4839              	.LFE84:
 4841              		.section	.text.unlikely.png_write_bKGD
 4842              	.LCOLDE65:
 4843              		.section	.text.png_write_bKGD
 4844              	.LHOTE65:
 4845              		.section	.rodata.str1.8
 4846              		.align 8
 4847              	.LC66:
 4848 0400 496E7661 		.string	"Invalid number of histogram entries specified"
 4848      6C696420 
 4848      6E756D62 
 4848      6572206F 
 4848      66206869 
 4849              		.section	.text.unlikely.png_write_hIST,"ax",@progbits
 4850              	.LCOLDB67:
 4851              		.section	.text.png_write_hIST,"ax",@progbits
 4852              	.LHOTB67:
 4853              		.p2align 4,,15
 4854              		.globl	png_write_hIST
 4856              	png_write_hIST:
 4857              	.LFB85:
1553:fltk-1.3.4-1/png/pngwutil.c ****    int i;
 4858              		.loc 1 1553 0
 4859              		.cfi_startproc
 4860              	.LVL536:
 4861 0000 4154     		pushq	%r12
 4862              		.cfi_def_cfa_offset 16
 4863              		.cfi_offset 12, -16
 4864 0002 55       		pushq	%rbp
 4865              		.cfi_def_cfa_offset 24
 4866              		.cfi_offset 6, -24
 4867 0003 4889FD   		movq	%rdi, %rbp
 4868 0006 53       		pushq	%rbx
 4869              		.cfi_def_cfa_offset 32
 4870              		.cfi_offset 3, -32
 4871 0007 4883EC10 		subq	$16, %rsp
 4872              		.cfi_def_cfa_offset 48
1553:fltk-1.3.4-1/png/pngwutil.c ****    int i;
 4873              		.loc 1 1553 0
 4874 000b 64488B04 		movq	%fs:40, %rax
 4874      25280000 
 4874      00
 4875 0014 48894424 		movq	%rax, 8(%rsp)
 4875      08
 4876 0019 31C0     		xorl	%eax, %eax
1559:fltk-1.3.4-1/png/pngwutil.c ****    {
 4877              		.loc 1 1559 0
 4878 001b 0FB78768 		movzwl	616(%rdi), %eax
 4878      020000
 4879 0022 39D0     		cmpl	%edx, %eax
 4880 0024 7C7A     		jl	.L472
 4881 0026 4189D4   		movl	%edx, %r12d
 4882              	.LVL537:
 4883              	.LBB407:
 4884              	.LBB408:
 4885 0029 8D1412   		leal	(%rdx,%rdx), %edx
 4886              	.LVL538:
 4887 002c 4889F3   		movq	%rsi, %rbx
 4888 002f BE545349 		movl	$1749635924, %esi
 4888      68
 4889              	.LVL539:
 4890 0034 E8000000 		call	png_write_chunk_header.part.2
 4890      00
 4891              	.LVL540:
 4892              	.LBE408:
 4893              	.LBE407:
1570:fltk-1.3.4-1/png/pngwutil.c ****    {
 4894              		.loc 1 1570 0
 4895 0039 4585E4   		testl	%r12d, %r12d
 4896 003c 7E38     		jle	.L468
 4897 003e 418D4424 		leal	-1(%r12), %eax
 4897      FF
 4898 0043 4C8D6443 		leaq	2(%rbx,%rax,2), %r12
 4898      02
 4899              	.LVL541:
 4900 0048 0F1F8400 		.p2align 4,,10
 4900      00000000 
 4901              		.p2align 3
 4902              	.L467:
1572:fltk-1.3.4-1/png/pngwutil.c ****       png_write_chunk_data(png_ptr, buf, (png_size_t)2);
 4903              		.loc 1 1572 0 discriminator 3
 4904 0050 0FB703   		movzwl	(%rbx), %eax
 4905              	.LVL542:
 4906              	.LBB409:
 4907              	.LBB410:
 4908 0053 4889E6   		movq	%rsp, %rsi
 4909 0056 4889EF   		movq	%rbp, %rdi
 4910 0059 4883C302 		addq	$2, %rbx
 4911              	.LBE410:
 4912              	.LBE409:
 4913              	.LBB412:
 4914              	.LBB413:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 4915              		.loc 1 39 0 discriminator 3
 4916 005d 0FB6D4   		movzbl	%ah, %edx
  40:fltk-1.3.4-1/png/pngwutil.c **** }
 4917              		.loc 1 40 0 discriminator 3
 4918 0060 88442401 		movb	%al, 1(%rsp)
 4919              	.LVL543:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 4920              		.loc 1 39 0 discriminator 3
 4921 0064 881424   		movb	%dl, (%rsp)
 4922              	.LBE413:
 4923              	.LBE412:
 4924              	.LBB414:
 4925              	.LBB411:
 4926 0067 BA020000 		movl	$2, %edx
 4926      00
 4927 006c E8000000 		call	png_write_chunk_data.part.3
 4927      00
 4928              	.LVL544:
 4929              	.LBE411:
 4930              	.LBE414:
1570:fltk-1.3.4-1/png/pngwutil.c ****    {
 4931              		.loc 1 1570 0 discriminator 3
 4932 0071 4C39E3   		cmpq	%r12, %rbx
 4933 0074 75DA     		jne	.L467
 4934              	.L468:
 4935              	.LVL545:
 4936              	.LBB415:
 4937              	.LBB416:
 4938 0076 4889EF   		movq	%rbp, %rdi
 4939 0079 E8000000 		call	png_write_chunk_end.part.4
 4939      00
 4940              	.LVL546:
 4941              	.L463:
 4942              	.LBE416:
 4943              	.LBE415:
1577:fltk-1.3.4-1/png/pngwutil.c **** #endif
 4944              		.loc 1 1577 0
 4945 007e 488B4424 		movq	8(%rsp), %rax
 4945      08
 4946 0083 64483304 		xorq	%fs:40, %rax
 4946      25280000 
 4946      00
 4947 008c 751E     		jne	.L473
 4948 008e 4883C410 		addq	$16, %rsp
 4949              		.cfi_remember_state
 4950              		.cfi_def_cfa_offset 32
 4951 0092 5B       		popq	%rbx
 4952              		.cfi_def_cfa_offset 24
 4953 0093 5D       		popq	%rbp
 4954              		.cfi_def_cfa_offset 16
 4955              	.LVL547:
 4956 0094 415C     		popq	%r12
 4957              		.cfi_def_cfa_offset 8
 4958 0096 C3       		ret
 4959              	.LVL548:
 4960 0097 660F1F84 		.p2align 4,,10
 4960      00000000 
 4960      00
 4961              		.p2align 3
 4962              	.L472:
 4963              		.cfi_restore_state
1564:fltk-1.3.4-1/png/pngwutil.c ****       return;
 4964              		.loc 1 1564 0
 4965 00a0 BE000000 		movl	$.LC66, %esi
 4965      00
 4966              	.LVL549:
 4967 00a5 E8000000 		call	png_warning
 4967      00
 4968              	.LVL550:
 4969 00aa EBD2     		jmp	.L463
 4970              	.L473:
1577:fltk-1.3.4-1/png/pngwutil.c **** #endif
 4971              		.loc 1 1577 0
 4972 00ac E8000000 		call	__stack_chk_fail
 4972      00
 4973              	.LVL551:
 4974              		.cfi_endproc
 4975              	.LFE85:
 4977              		.section	.text.unlikely.png_write_hIST
 4978              	.LCOLDE67:
 4979              		.section	.text.png_write_hIST
 4980              	.LHOTE67:
 4981              		.section	.rodata.str1.1
 4982              	.LC68:
 4983 011d 74455874 		.string	"tEXt: invalid keyword"
 4983      3A20696E 
 4983      76616C69 
 4983      64206B65 
 4983      79776F72 
 4984              	.LC69:
 4985 0133 74455874 		.string	"tEXt: text too long"
 4985      3A207465 
 4985      78742074 
 4985      6F6F206C 
 4985      6F6E6700 
 4986              		.section	.text.unlikely.png_write_tEXt,"ax",@progbits
 4987              	.LCOLDB70:
 4988              		.section	.text.png_write_tEXt,"ax",@progbits
 4989              	.LHOTB70:
 4990              		.p2align 4,,15
 4991              		.globl	png_write_tEXt
 4993              	png_write_tEXt:
 4994              	.LFB86:
1585:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 key_len;
 4995              		.loc 1 1585 0
 4996              		.cfi_startproc
 4997              	.LVL552:
 4998 0000 4155     		pushq	%r13
 4999              		.cfi_def_cfa_offset 16
 5000              		.cfi_offset 13, -16
 5001 0002 4154     		pushq	%r12
 5002              		.cfi_def_cfa_offset 24
 5003              		.cfi_offset 12, -24
 5004 0004 4989D4   		movq	%rdx, %r12
 5005 0007 55       		pushq	%rbp
 5006              		.cfi_def_cfa_offset 32
 5007              		.cfi_offset 6, -32
 5008 0008 53       		pushq	%rbx
 5009              		.cfi_def_cfa_offset 40
 5010              		.cfi_offset 3, -40
 5011 0009 4889FD   		movq	%rdi, %rbp
 5012 000c 4883EC68 		subq	$104, %rsp
 5013              		.cfi_def_cfa_offset 144
1591:fltk-1.3.4-1/png/pngwutil.c **** 
 5014              		.loc 1 1591 0
 5015 0010 4889E2   		movq	%rsp, %rdx
 5016              	.LVL553:
1585:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 key_len;
 5017              		.loc 1 1585 0
 5018 0013 64488B04 		movq	%fs:40, %rax
 5018      25280000 
 5018      00
 5019 001c 48894424 		movq	%rax, 88(%rsp)
 5019      58
 5020 0021 31C0     		xorl	%eax, %eax
1591:fltk-1.3.4-1/png/pngwutil.c **** 
 5021              		.loc 1 1591 0
 5022 0023 E8000000 		call	png_check_keyword
 5022      00
 5023              	.LVL554:
1593:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "tEXt: invalid keyword");
 5024              		.loc 1 1593 0
 5025 0028 85C0     		testl	%eax, %eax
 5026 002a 0F84C200 		je	.L500
 5026      0000
1596:fltk-1.3.4-1/png/pngwutil.c ****       text_len = 0;
 5027              		.loc 1 1596 0
 5028 0030 4D85E4   		testq	%r12, %r12
 5029 0033 89C3     		movl	%eax, %ebx
 5030 0035 7479     		je	.L476
1596:fltk-1.3.4-1/png/pngwutil.c ****       text_len = 0;
 5031              		.loc 1 1596 0 is_stmt 0 discriminator 1
 5032 0037 41803C24 		cmpb	$0, (%r12)
 5032      00
 5033 003c 7472     		je	.L476
1600:fltk-1.3.4-1/png/pngwutil.c **** 
 5034              		.loc 1 1600 0 is_stmt 1
 5035 003e 4C89E7   		movq	%r12, %rdi
 5036 0041 E8000000 		call	strlen
 5036      00
 5037              	.LVL555:
 5038 0046 4989C5   		movq	%rax, %r13
 5039              	.LVL556:
1602:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "tEXt: text too long");
 5040              		.loc 1 1602 0
 5041 0049 B8FEFFFF 		movl	$2147483646, %eax
 5041      7F
 5042              	.LVL557:
 5043 004e 29D8     		subl	%ebx, %eax
 5044 0050 4939C5   		cmpq	%rax, %r13
 5045 0053 0F878700 		ja	.L477
 5045      0000
 5046 0059 83C301   		addl	$1, %ebx
 5047              	.LVL558:
 5048              	.LBB417:
 5049              	.LBB418:
  83:fltk-1.3.4-1/png/pngwutil.c ****       return;
 5050              		.loc 1 83 0
 5051 005c 4885ED   		testq	%rbp, %rbp
 5052              	.LBE418:
 5053              	.LBE417:
1606:fltk-1.3.4-1/png/pngwutil.c ****        (png_uint_32)/*checked above*/(key_len + text_len + 1));
 5054              		.loc 1 1606 0
 5055 005f 428D142B 		leal	(%rbx,%r13), %edx
 5056              	.LVL559:
 5057              	.LBB422:
 5058              	.LBB419:
  83:fltk-1.3.4-1/png/pngwutil.c ****       return;
 5059              		.loc 1 83 0
 5060 0063 7426     		je	.L474
 5061              	.LVL560:
 5062              	.L479:
 5063 0065 BE745845 		movl	$1950701684, %esi
 5063      74
 5064 006a 4889EF   		movq	%rbp, %rdi
 5065 006d E8000000 		call	png_write_chunk_header.part.2
 5065      00
 5066              	.LVL561:
 5067              	.LBE419:
 5068              	.LBE422:
1614:fltk-1.3.4-1/png/pngwutil.c **** 
 5069              		.loc 1 1614 0
 5070 0072 89DA     		movl	%ebx, %edx
 5071              	.LVL562:
 5072              	.LBB423:
 5073              	.LBB424:
 134:fltk-1.3.4-1/png/pngwutil.c ****    {
 5074              		.loc 1 134 0
 5075 0074 4885D2   		testq	%rdx, %rdx
 5076 0077 7547     		jne	.L501
 5077              	.LVL563:
 5078              	.L480:
 5079              	.LBE424:
 5080              	.LBE423:
1616:fltk-1.3.4-1/png/pngwutil.c ****       png_write_chunk_data(png_ptr, (png_const_bytep)text, text_len);
 5081              		.loc 1 1616 0
 5082 0079 4D85ED   		testq	%r13, %r13
 5083 007c 7405     		je	.L481
 5084              	.LVL564:
 5085              	.LBB426:
 5086              	.LBB427:
 134:fltk-1.3.4-1/png/pngwutil.c ****    {
 5087              		.loc 1 134 0
 5088 007e 4D85E4   		testq	%r12, %r12
 5089 0081 754D     		jne	.L502
 5090              	.LVL565:
 5091              	.L481:
 5092              	.LBE427:
 5093              	.LBE426:
 5094              	.LBB429:
 5095              	.LBB430:
 5096 0083 4889EF   		movq	%rbp, %rdi
 5097 0086 E8000000 		call	png_write_chunk_end.part.4
 5097      00
 5098              	.LVL566:
 5099              	.L474:
 5100              	.LBE430:
 5101              	.LBE429:
1620:fltk-1.3.4-1/png/pngwutil.c **** #endif
 5102              		.loc 1 1620 0
 5103 008b 488B4424 		movq	88(%rsp), %rax
 5103      58
 5104 0090 64483304 		xorq	%fs:40, %rax
 5104      25280000 
 5104      00
 5105 0099 7552     		jne	.L503
 5106 009b 4883C468 		addq	$104, %rsp
 5107              		.cfi_remember_state
 5108              		.cfi_def_cfa_offset 40
 5109 009f 5B       		popq	%rbx
 5110              		.cfi_def_cfa_offset 32
 5111 00a0 5D       		popq	%rbp
 5112              		.cfi_def_cfa_offset 24
 5113              	.LVL567:
 5114 00a1 415C     		popq	%r12
 5115              		.cfi_def_cfa_offset 16
 5116              	.LVL568:
 5117 00a3 415D     		popq	%r13
 5118              		.cfi_def_cfa_offset 8
 5119 00a5 C3       		ret
 5120              	.LVL569:
 5121 00a6 662E0F1F 		.p2align 4,,10
 5121      84000000 
 5121      0000
 5122              		.p2align 3
 5123              	.L476:
 5124              		.cfi_restore_state
 5125 00b0 83C301   		addl	$1, %ebx
 5126              	.LVL570:
 5127              	.LBB431:
 5128              	.LBB420:
  83:fltk-1.3.4-1/png/pngwutil.c ****       return;
 5129              		.loc 1 83 0
 5130 00b3 4885ED   		testq	%rbp, %rbp
 5131 00b6 74D3     		je	.L474
 5132              	.LBE420:
 5133              	.LBE431:
1606:fltk-1.3.4-1/png/pngwutil.c ****        (png_uint_32)/*checked above*/(key_len + text_len + 1));
 5134              		.loc 1 1606 0
 5135 00b8 89DA     		movl	%ebx, %edx
 5136              	.LBB432:
 5137              	.LBB421:
  83:fltk-1.3.4-1/png/pngwutil.c ****       return;
 5138              		.loc 1 83 0
 5139 00ba 4531ED   		xorl	%r13d, %r13d
 5140 00bd EBA6     		jmp	.L479
 5141              	.LVL571:
 5142 00bf 90       		.p2align 4,,10
 5143              		.p2align 3
 5144              	.L501:
 5145              	.LBE421:
 5146              	.LBE432:
 5147              	.LBB433:
 5148              	.LBB425:
 5149 00c0 4889E6   		movq	%rsp, %rsi
 5150 00c3 4889EF   		movq	%rbp, %rdi
 5151 00c6 E8000000 		call	png_write_chunk_data.part.3
 5151      00
 5152              	.LVL572:
 5153 00cb EBAC     		jmp	.L480
 5154              	.LVL573:
 5155 00cd 0F1F00   		.p2align 4,,10
 5156              		.p2align 3
 5157              	.L502:
 5158              	.LBE425:
 5159              	.LBE433:
 5160              	.LBB434:
 5161              	.LBB428:
 5162 00d0 4C89EA   		movq	%r13, %rdx
 5163 00d3 4C89E6   		movq	%r12, %rsi
 5164 00d6 4889EF   		movq	%rbp, %rdi
 5165 00d9 E8000000 		call	png_write_chunk_data.part.3
 5165      00
 5166              	.LVL574:
 5167 00de EBA3     		jmp	.L481
 5168              	.LVL575:
 5169              	.L477:
 5170              	.LBE428:
 5171              	.LBE434:
1603:fltk-1.3.4-1/png/pngwutil.c **** 
 5172              		.loc 1 1603 0
 5173 00e0 BE000000 		movl	$.LC69, %esi
 5173      00
 5174 00e5 4889EF   		movq	%rbp, %rdi
 5175 00e8 E8000000 		call	png_error
 5175      00
 5176              	.LVL576:
 5177              	.L503:
1620:fltk-1.3.4-1/png/pngwutil.c **** #endif
 5178              		.loc 1 1620 0
 5179 00ed E8000000 		call	__stack_chk_fail
 5179      00
 5180              	.LVL577:
 5181              	.L500:
1594:fltk-1.3.4-1/png/pngwutil.c **** 
 5182              		.loc 1 1594 0
 5183 00f2 BE000000 		movl	$.LC68, %esi
 5183      00
 5184 00f7 4889EF   		movq	%rbp, %rdi
 5185 00fa E8000000 		call	png_error
 5185      00
 5186              	.LVL578:
 5187              		.cfi_endproc
 5188              	.LFE86:
 5190              		.section	.text.unlikely.png_write_tEXt
 5191              	.LCOLDE70:
 5192              		.section	.text.png_write_tEXt
 5193              	.LHOTE70:
 5194              		.section	.rodata.str1.8
 5195 042e 0000     		.align 8
 5196              	.LC71:
 5197 0430 7A545874 		.string	"zTXt: invalid compression type"
 5197      3A20696E 
 5197      76616C69 
 5197      6420636F 
 5197      6D707265 
 5198              		.section	.rodata.str1.1
 5199              	.LC72:
 5200 0147 7A545874 		.string	"zTXt: invalid keyword"
 5200      3A20696E 
 5200      76616C69 
 5200      64206B65 
 5200      79776F72 
 5201              		.section	.text.unlikely.png_write_zTXt,"ax",@progbits
 5202              	.LCOLDB73:
 5203              		.section	.text.png_write_zTXt,"ax",@progbits
 5204              	.LHOTB73:
 5205              		.p2align 4,,15
 5206              		.globl	png_write_zTXt
 5208              	png_write_zTXt:
 5209              	.LFB87:
1628:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 key_len;
 5210              		.loc 1 1628 0
 5211              		.cfi_startproc
 5212              	.LVL579:
 5213 0000 4154     		pushq	%r12
 5214              		.cfi_def_cfa_offset 16
 5215              		.cfi_offset 12, -16
 5216 0002 55       		pushq	%rbp
 5217              		.cfi_def_cfa_offset 24
 5218              		.cfi_offset 6, -24
 5219 0003 4989D4   		movq	%rdx, %r12
 5220 0006 53       		pushq	%rbx
 5221              		.cfi_def_cfa_offset 32
 5222              		.cfi_offset 3, -32
 5223 0007 4889FD   		movq	%rdi, %rbp
 5224 000a 4881EC80 		subq	$1152, %rsp
 5224      040000
 5225              		.cfi_def_cfa_offset 1184
1628:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 key_len;
 5226              		.loc 1 1628 0
 5227 0011 64488B04 		movq	%fs:40, %rax
 5227      25280000 
 5227      00
 5228 001a 48898424 		movq	%rax, 1144(%rsp)
 5228      78040000 
 5229 0022 31C0     		xorl	%eax, %eax
1635:fltk-1.3.4-1/png/pngwutil.c ****    {
 5230              		.loc 1 1635 0
 5231 0024 83F9FF   		cmpl	$-1, %ecx
 5232 0027 0F84F300 		je	.L520
 5232      0000
1641:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "zTXt: invalid compression type");
 5233              		.loc 1 1641 0
 5234 002d 85C9     		testl	%ecx, %ecx
 5235 002f 0F85F400 		jne	.L521
 5235      0000
1644:fltk-1.3.4-1/png/pngwutil.c **** 
 5236              		.loc 1 1644 0
 5237 0035 488D9424 		leaq	1056(%rsp), %rdx
 5237      20040000 
 5238              	.LVL580:
 5239 003d E8000000 		call	png_check_keyword
 5239      00
 5240              	.LVL581:
1646:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "zTXt: invalid keyword");
 5241              		.loc 1 1646 0
 5242 0042 85C0     		testl	%eax, %eax
 5243 0044 0F84FD00 		je	.L522
 5243      0000
 5244              	.LVL582:
1650:fltk-1.3.4-1/png/pngwutil.c ****    ++key_len;
 5245              		.loc 1 1650 0
 5246 004a 8D5001   		leal	1(%rax), %edx
1654:fltk-1.3.4-1/png/pngwutil.c ****       text == NULL ? 0 : strlen(text));
 5247              		.loc 1 1654 0
 5248 004d 4D85E4   		testq	%r12, %r12
1651:fltk-1.3.4-1/png/pngwutil.c **** 
 5249              		.loc 1 1651 0
 5250 0050 8D5802   		leal	2(%rax), %ebx
1650:fltk-1.3.4-1/png/pngwutil.c ****    ++key_len;
 5251              		.loc 1 1650 0
 5252 0053 C6841420 		movb	$0, 1056(%rsp,%rdx)
 5252      04000000 
 5253              	.LVL583:
1654:fltk-1.3.4-1/png/pngwutil.c ****       text == NULL ? 0 : strlen(text));
 5254              		.loc 1 1654 0
 5255 005b 0F849F00 		je	.L515
 5255      0000
1654:fltk-1.3.4-1/png/pngwutil.c ****       text == NULL ? 0 : strlen(text));
 5256              		.loc 1 1654 0 is_stmt 0 discriminator 1
 5257 0061 4C89E7   		movq	%r12, %rdi
 5258 0064 E8000000 		call	strlen
 5258      00
 5259              	.LVL584:
 5260              	.L509:
1657:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, png_ptr->zstream.msg);
 5261              		.loc 1 1657 0 is_stmt 1 discriminator 4
 5262 0069 89D9     		movl	%ebx, %ecx
 5263 006b 4889E2   		movq	%rsp, %rdx
 5264 006e BE745854 		movl	$2052348020, %esi
 5264      7A
 5265 0073 4889EF   		movq	%rbp, %rdi
 5266              	.LBB435:
 5267              	.LBB436:
 482:fltk-1.3.4-1/png/pngwutil.c ****    comp->input_len = input_len;
 5268              		.loc 1 482 0 discriminator 4
 5269 0076 4C892424 		movq	%r12, (%rsp)
 483:fltk-1.3.4-1/png/pngwutil.c ****    comp->output_len = 0;
 5270              		.loc 1 483 0 discriminator 4
 5271 007a 48894424 		movq	%rax, 8(%rsp)
 5271      08
 484:fltk-1.3.4-1/png/pngwutil.c **** }
 5272              		.loc 1 484 0 discriminator 4
 5273 007f C7442410 		movl	$0, 16(%rsp)
 5273      00000000 
 5274              	.LVL585:
 5275              	.LBE436:
 5276              	.LBE435:
1657:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, png_ptr->zstream.msg);
 5277              		.loc 1 1657 0 discriminator 4
 5278 0087 E8000000 		call	png_text_compress
 5278      00
 5279              	.LVL586:
 5280 008c 85C0     		testl	%eax, %eax
 5281 008e 0F859F00 		jne	.L523
 5281      0000
1661:fltk-1.3.4-1/png/pngwutil.c **** 
 5282              		.loc 1 1661 0
 5283 0094 8B542410 		movl	16(%rsp), %edx
 5284 0098 01DA     		addl	%ebx, %edx
 5285              	.LVL587:
 5286              	.LBB437:
 5287              	.LBB438:
  83:fltk-1.3.4-1/png/pngwutil.c ****       return;
 5288              		.loc 1 83 0
 5289 009a 4885ED   		testq	%rbp, %rbp
 5290 009d 7471     		je	.L511
 5291 009f BE745854 		movl	$2052348020, %esi
 5291      7A
 5292 00a4 4889EF   		movq	%rbp, %rdi
 5293 00a7 E8000000 		call	png_write_chunk_header.part.2
 5293      00
 5294              	.LVL588:
 5295              	.LBE438:
 5296              	.LBE437:
1664:fltk-1.3.4-1/png/pngwutil.c **** 
 5297              		.loc 1 1664 0
 5298 00ac 89DA     		movl	%ebx, %edx
 5299              	.LVL589:
 5300              	.LBB439:
 5301              	.LBB440:
 134:fltk-1.3.4-1/png/pngwutil.c ****    {
 5302              		.loc 1 134 0
 5303 00ae 4885D2   		testq	%rdx, %rdx
 5304 00b1 7535     		jne	.L524
 5305              	.LVL590:
 5306              	.L512:
 5307              	.LBE440:
 5308              	.LBE439:
1667:fltk-1.3.4-1/png/pngwutil.c **** 
 5309              		.loc 1 1667 0
 5310 00b3 4889EF   		movq	%rbp, %rdi
 5311 00b6 4889E6   		movq	%rsp, %rsi
 5312 00b9 E8000000 		call	png_write_compressed_data_out
 5312      00
 5313              	.LVL591:
 5314              	.LBB442:
 5315              	.LBB443:
 5316 00be 4889EF   		movq	%rbp, %rdi
 5317 00c1 E8000000 		call	png_write_chunk_end.part.4
 5317      00
 5318              	.LVL592:
 5319              	.L504:
 5320              	.LBE443:
 5321              	.LBE442:
1671:fltk-1.3.4-1/png/pngwutil.c **** #endif
 5322              		.loc 1 1671 0
 5323 00c6 488B8424 		movq	1144(%rsp), %rax
 5323      78040000 
 5324 00ce 64483304 		xorq	%fs:40, %rax
 5324      25280000 
 5324      00
 5325 00d7 7569     		jne	.L525
 5326 00d9 4881C480 		addq	$1152, %rsp
 5326      040000
 5327              		.cfi_remember_state
 5328              		.cfi_def_cfa_offset 32
 5329 00e0 5B       		popq	%rbx
 5330              		.cfi_def_cfa_offset 24
 5331 00e1 5D       		popq	%rbp
 5332              		.cfi_def_cfa_offset 16
 5333              	.LVL593:
 5334 00e2 415C     		popq	%r12
 5335              		.cfi_def_cfa_offset 8
 5336              	.LVL594:
 5337 00e4 C3       		ret
 5338              	.LVL595:
 5339              		.p2align 4,,10
 5340 00e5 0F1F00   		.p2align 3
 5341              	.L524:
 5342              		.cfi_restore_state
 5343              	.LBB444:
 5344              	.LBB441:
 5345 00e8 488DB424 		leaq	1056(%rsp), %rsi
 5345      20040000 
 5346              	.LVL596:
 5347 00f0 4889EF   		movq	%rbp, %rdi
 5348 00f3 E8000000 		call	png_write_chunk_data.part.3
 5348      00
 5349              	.LVL597:
 5350 00f8 EBB9     		jmp	.L512
 5351              	.LVL598:
 5352 00fa 660F1F44 		.p2align 4,,10
 5352      0000
 5353              		.p2align 3
 5354              	.L515:
 5355              	.LBE441:
 5356              	.LBE444:
1654:fltk-1.3.4-1/png/pngwutil.c ****       text == NULL ? 0 : strlen(text));
 5357              		.loc 1 1654 0
 5358 0100 31C0     		xorl	%eax, %eax
 5359 0102 E962FFFF 		jmp	.L509
 5359      FF
 5360              	.LVL599:
 5361 0107 660F1F84 		.p2align 4,,10
 5361      00000000 
 5361      00
 5362              		.p2align 3
 5363              	.L511:
1667:fltk-1.3.4-1/png/pngwutil.c **** 
 5364              		.loc 1 1667 0
 5365 0110 4889E6   		movq	%rsp, %rsi
 5366 0113 31FF     		xorl	%edi, %edi
 5367 0115 E8000000 		call	png_write_compressed_data_out
 5367      00
 5368              	.LVL600:
 5369 011a EBAA     		jmp	.L504
 5370              	.LVL601:
 5371 011c 0F1F4000 		.p2align 4,,10
 5372              		.p2align 3
 5373              	.L520:
1637:fltk-1.3.4-1/png/pngwutil.c ****       return;
 5374              		.loc 1 1637 0
 5375 0120 31C9     		xorl	%ecx, %ecx
 5376              	.LVL602:
 5377 0122 E8000000 		call	png_write_tEXt
 5377      00
 5378              	.LVL603:
 5379 0127 EB9D     		jmp	.L504
 5380              	.LVL604:
 5381              	.L521:
1642:fltk-1.3.4-1/png/pngwutil.c **** 
 5382              		.loc 1 1642 0
 5383 0129 BE000000 		movl	$.LC71, %esi
 5383      00
 5384              	.LVL605:
 5385 012e E8000000 		call	png_error
 5385      00
 5386              	.LVL606:
 5387              	.L523:
1658:fltk-1.3.4-1/png/pngwutil.c **** 
 5388              		.loc 1 1658 0
 5389 0133 488BB570 		movq	368(%rbp), %rsi
 5389      010000
 5390 013a 4889EF   		movq	%rbp, %rdi
 5391 013d E8000000 		call	png_error
 5391      00
 5392              	.LVL607:
 5393              	.L525:
1671:fltk-1.3.4-1/png/pngwutil.c **** #endif
 5394              		.loc 1 1671 0
 5395 0142 E8000000 		call	__stack_chk_fail
 5395      00
 5396              	.LVL608:
 5397              	.L522:
1647:fltk-1.3.4-1/png/pngwutil.c **** 
 5398              		.loc 1 1647 0
 5399 0147 BE000000 		movl	$.LC72, %esi
 5399      00
 5400 014c 4889EF   		movq	%rbp, %rdi
 5401 014f E8000000 		call	png_error
 5401      00
 5402              	.LVL609:
 5403              		.cfi_endproc
 5404              	.LFE87:
 5406              		.section	.text.unlikely.png_write_zTXt
 5407              	.LCOLDE73:
 5408              		.section	.text.png_write_zTXt
 5409              	.LHOTE73:
 5410              		.section	.rodata.str1.1
 5411              	.LC74:
 5412 015d 00       		.string	""
 5413              	.LC75:
 5414 015e 69545874 		.string	"iTXt: invalid keyword"
 5414      3A20696E 
 5414      76616C69 
 5414      64206B65 
 5414      79776F72 
 5415              	.LC76:
 5416 0174 69545874 		.string	"iTXt: invalid compression"
 5416      3A20696E 
 5416      76616C69 
 5416      6420636F 
 5416      6D707265 
 5417              		.section	.rodata.str1.8
 5418 044f 00       		.align 8
 5419              	.LC77:
 5420 0450 69545874 		.string	"iTXt: uncompressed text too long"
 5420      3A20756E 
 5420      636F6D70 
 5420      72657373 
 5420      65642074 
 5421              		.section	.text.unlikely.png_write_iTXt,"ax",@progbits
 5422              	.LCOLDB78:
 5423              		.section	.text.png_write_iTXt,"ax",@progbits
 5424              	.LHOTB78:
 5425              		.p2align 4,,15
 5426              		.globl	png_write_iTXt
 5428              	png_write_iTXt:
 5429              	.LFB88:
1679:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 key_len, prefix_len;
 5430              		.loc 1 1679 0
 5431              		.cfi_startproc
 5432              	.LVL610:
 5433 0000 4157     		pushq	%r15
 5434              		.cfi_def_cfa_offset 16
 5435              		.cfi_offset 15, -16
 5436 0002 4156     		pushq	%r14
 5437              		.cfi_def_cfa_offset 24
 5438              		.cfi_offset 14, -24
 5439 0004 4989CF   		movq	%rcx, %r15
 5440 0007 4155     		pushq	%r13
 5441              		.cfi_def_cfa_offset 32
 5442              		.cfi_offset 13, -32
 5443 0009 4154     		pushq	%r12
 5444              		.cfi_def_cfa_offset 40
 5445              		.cfi_offset 12, -40
 5446 000b 4D89C6   		movq	%r8, %r14
 5447 000e 55       		pushq	%rbp
 5448              		.cfi_def_cfa_offset 48
 5449              		.cfi_offset 6, -48
 5450 000f 53       		pushq	%rbx
 5451              		.cfi_def_cfa_offset 56
 5452              		.cfi_offset 3, -56
 5453 0010 89F5     		movl	%esi, %ebp
 5454 0012 4889D6   		movq	%rdx, %rsi
 5455              	.LVL611:
 5456 0015 4889FB   		movq	%rdi, %rbx
 5457 0018 4D89CD   		movq	%r9, %r13
 5458 001b 4881EC98 		subq	$1176, %rsp
 5458      040000
 5459              		.cfi_def_cfa_offset 1232
1687:fltk-1.3.4-1/png/pngwutil.c **** 
 5460              		.loc 1 1687 0
 5461 0022 488D9424 		leaq	1072(%rsp), %rdx
 5461      30040000 
 5462              	.LVL612:
1679:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 key_len, prefix_len;
 5463              		.loc 1 1679 0
 5464 002a 64488B04 		movq	%fs:40, %rax
 5464      25280000 
 5464      00
 5465 0033 48898424 		movq	%rax, 1160(%rsp)
 5465      88040000 
 5466 003b 31C0     		xorl	%eax, %eax
1687:fltk-1.3.4-1/png/pngwutil.c **** 
 5467              		.loc 1 1687 0
 5468 003d E8000000 		call	png_check_keyword
 5468      00
 5469              	.LVL613:
1689:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "iTXt: invalid keyword");
 5470              		.loc 1 1689 0
 5471 0042 85C0     		testl	%eax, %eax
 5472 0044 0F848702 		je	.L581
 5472      0000
1693:fltk-1.3.4-1/png/pngwutil.c ****    {
 5473              		.loc 1 1693 0
 5474 004a 83FD00   		cmpl	$0, %ebp
 5475 004d 7410     		je	.L529
 5476 004f 7E2F     		jle	.L582
 5477 0051 83FD01   		cmpl	$1, %ebp
 5478 0054 7433     		je	.L531
 5479 0056 83FD02   		cmpl	$2, %ebp
 5480 0059 0F856101 		jne	.L528
 5480      0000
 5481              	.L529:
1702:fltk-1.3.4-1/png/pngwutil.c ****          break;
 5482              		.loc 1 1702 0
 5483 005f 8D5001   		leal	1(%rax), %edx
 5484 0062 C7442404 		movl	$1, 4(%rsp)
 5484      01000000 
 5485 006a 4889D0   		movq	%rdx, %rax
 5486              	.LVL614:
 5487 006d C6841430 		movb	$1, 1072(%rsp,%rdx)
 5487      04000001 
 5488              	.LVL615:
1703:fltk-1.3.4-1/png/pngwutil.c **** 
 5489              		.loc 1 1703 0
 5490 0075 EB28     		jmp	.L532
 5491              	.LVL616:
 5492 0077 660F1F84 		.p2align 4,,10
 5492      00000000 
 5492      00
 5493              		.p2align 3
 5494              	.L582:
1693:fltk-1.3.4-1/png/pngwutil.c ****    {
 5495              		.loc 1 1693 0
 5496 0080 83FDFF   		cmpl	$-1, %ebp
 5497 0083 0F853701 		jne	.L528
 5497      0000
 5498              	.L531:
1697:fltk-1.3.4-1/png/pngwutil.c ****          break;
 5499              		.loc 1 1697 0
 5500 0089 8D5001   		leal	1(%rax), %edx
 5501 008c C7442404 		movl	$0, 4(%rsp)
 5501      00000000 
 5502 0094 4889D0   		movq	%rdx, %rax
 5503              	.LVL617:
 5504 0097 C6841430 		movb	$0, 1072(%rsp,%rdx)
 5504      04000000 
 5505              	.LVL618:
 5506              	.L532:
1709:fltk-1.3.4-1/png/pngwutil.c ****    ++key_len; /* for the keywod separator */
 5507              		.loc 1 1709 0
 5508 009f 8D5001   		leal	1(%rax), %edx
1710:fltk-1.3.4-1/png/pngwutil.c **** 
 5509              		.loc 1 1710 0
 5510 00a2 83C002   		addl	$2, %eax
 5511              	.LVL619:
1722:fltk-1.3.4-1/png/pngwutil.c ****    lang_len = strlen(lang)+1;
 5512              		.loc 1 1722 0
 5513 00a5 4D85FF   		testq	%r15, %r15
1710:fltk-1.3.4-1/png/pngwutil.c **** 
 5514              		.loc 1 1710 0
 5515 00a8 89442408 		movl	%eax, 8(%rsp)
 5516              	.LVL620:
1709:fltk-1.3.4-1/png/pngwutil.c ****    ++key_len; /* for the keywod separator */
 5517              		.loc 1 1709 0
 5518 00ac C6841430 		movb	$0, 1072(%rsp,%rdx)
 5518      04000000 
1722:fltk-1.3.4-1/png/pngwutil.c ****    lang_len = strlen(lang)+1;
 5519              		.loc 1 1722 0
 5520 00b4 0F840602 		je	.L554
 5520      0000
 5521 00ba 4C89FF   		movq	%r15, %rdi
 5522 00bd E8000000 		call	strlen
 5522      00
 5523              	.LVL621:
 5524 00c2 4C8D6001 		leaq	1(%rax), %r12
 5525              	.LVL622:
 5526              	.L533:
1724:fltk-1.3.4-1/png/pngwutil.c ****    lang_key_len = strlen(lang_key)+1;
 5527              		.loc 1 1724 0
 5528 00c6 4D85F6   		testq	%r14, %r14
 5529 00c9 0F84E101 		je	.L555
 5529      0000
 5530 00cf 4C89F7   		movq	%r14, %rdi
 5531 00d2 E8000000 		call	strlen
 5531      00
 5532              	.LVL623:
 5533 00d7 488D6801 		leaq	1(%rax), %rbp
 5534              	.LVL624:
 5535              	.L534:
1726:fltk-1.3.4-1/png/pngwutil.c **** 
 5536              		.loc 1 1726 0
 5537 00db 4D85ED   		testq	%r13, %r13
 5538 00de 0F84BC01 		je	.L556
 5538      0000
 5539 00e4 4C89EF   		movq	%r13, %rdi
 5540 00e7 E8000000 		call	strlen
 5540      00
 5541              	.LVL625:
 5542              	.L535:
1729:fltk-1.3.4-1/png/pngwutil.c ****       prefix_len = PNG_UINT_31_MAX;
 5543              		.loc 1 1729 0
 5544 00ec 8B4C2408 		movl	8(%rsp), %ecx
 5545 00f0 BEFFFFFF 		movl	$2147483647, %esi
 5545      7F
 5546 00f5 89F2     		movl	%esi, %edx
 5547 00f7 29CA     		subl	%ecx, %edx
 5548 00f9 4C39E2   		cmpq	%r12, %rdx
 5549 00fc 0F82CE00 		jb	.L557
 5549      0000
1732:fltk-1.3.4-1/png/pngwutil.c **** 
 5550              		.loc 1 1732 0
 5551 0102 4401E1   		addl	%r12d, %ecx
 5552              	.LVL626:
 5553 0105 29CE     		subl	%ecx, %esi
 5554              	.LVL627:
 5555              	.L536:
1741:fltk-1.3.4-1/png/pngwutil.c ****    {
 5556              		.loc 1 1741 0
 5557 0107 8B542404 		movl	4(%rsp), %edx
1737:fltk-1.3.4-1/png/pngwutil.c **** 
 5558              		.loc 1 1737 0
 5559 010b 01E9     		addl	%ebp, %ecx
 5560              	.LVL628:
 5561 010d BFFFFFFF 		movl	$2147483647, %edi
 5561      7F
 5562 0112 4839F5   		cmpq	%rsi, %rbp
 5563              	.LBB445:
 5564              	.LBB446:
 482:fltk-1.3.4-1/png/pngwutil.c ****    comp->input_len = input_len;
 5565              		.loc 1 482 0
 5566 0115 4C896C24 		movq	%r13, 16(%rsp)
 5566      10
 483:fltk-1.3.4-1/png/pngwutil.c ****    comp->output_len = 0;
 5567              		.loc 1 483 0
 5568 011a 48894424 		movq	%rax, 24(%rsp)
 5568      18
 5569              	.LBE446:
 5570              	.LBE445:
1737:fltk-1.3.4-1/png/pngwutil.c **** 
 5571              		.loc 1 1737 0
 5572 011f 0F47CF   		cmova	%edi, %ecx
 5573              	.LVL629:
 5574              	.LBB448:
 5575              	.LBB447:
 484:fltk-1.3.4-1/png/pngwutil.c **** }
 5576              		.loc 1 484 0
 5577 0122 C7442420 		movl	$0, 32(%rsp)
 5577      00000000 
 5578              	.LVL630:
 5579              	.LBE447:
 5580              	.LBE448:
1741:fltk-1.3.4-1/png/pngwutil.c ****    {
 5581              		.loc 1 1741 0
 5582 012a 85D2     		testl	%edx, %edx
 5583 012c 0F85AE00 		jne	.L583
 5583      0000
1749:fltk-1.3.4-1/png/pngwutil.c ****          png_error(png_ptr, "iTXt: uncompressed text too long");
 5584              		.loc 1 1749 0
 5585 0132 29CF     		subl	%ecx, %edi
 5586 0134 4839C7   		cmpq	%rax, %rdi
 5587 0137 0F82A601 		jb	.L584
 5587      0000
 5588              	.LBB449:
 5589              	.LBB450:
  83:fltk-1.3.4-1/png/pngwutil.c ****       return;
 5590              		.loc 1 83 0
 5591 013d 4885DB   		testq	%rbx, %rbx
 5592              	.LBE450:
 5593              	.LBE449:
1753:fltk-1.3.4-1/png/pngwutil.c ****    }
 5594              		.loc 1 1753 0
 5595 0140 89442420 		movl	%eax, 32(%rsp)
1756:fltk-1.3.4-1/png/pngwutil.c **** 
 5596              		.loc 1 1756 0
 5597 0144 8D1401   		leal	(%rcx,%rax), %edx
 5598              	.LVL631:
 5599              	.LBB453:
 5600              	.LBB451:
  83:fltk-1.3.4-1/png/pngwutil.c ****       return;
 5601              		.loc 1 83 0
 5602 0147 744E     		je	.L526
 5603              	.LVL632:
 5604              	.L541:
 5605 0149 BE745854 		movl	$1767135348, %esi
 5605      69
 5606 014e 4889DF   		movq	%rbx, %rdi
 5607 0151 E8000000 		call	png_write_chunk_header.part.2
 5607      00
 5608              	.LVL633:
 5609              	.LBE451:
 5610              	.LBE453:
1758:fltk-1.3.4-1/png/pngwutil.c **** 
 5611              		.loc 1 1758 0
 5612 0156 8B542408 		movl	8(%rsp), %edx
 5613              	.LVL634:
 5614              	.LBB454:
 5615              	.LBB455:
 134:fltk-1.3.4-1/png/pngwutil.c ****    {
 5616              		.loc 1 134 0
 5617 015a 4885D2   		testq	%rdx, %rdx
 5618 015d 0F850D01 		jne	.L585
 5618      0000
 5619              	.LVL635:
 5620              	.L544:
 5621              	.LBE455:
 5622              	.LBE454:
 5623              	.LBB457:
 5624              	.LBB458:
 5625 0163 4D85E4   		testq	%r12, %r12
 5626 0166 0F85EC00 		jne	.L548
 5626      0000
 5627              	.L545:
 5628              	.LVL636:
 5629              	.LBE458:
 5630              	.LBE457:
 5631              	.LBB460:
 5632              	.LBB461:
 5633 016c 4885ED   		testq	%rbp, %rbp
 5634 016f 0F85B300 		jne	.L586
 5634      0000
 5635              	.LVL637:
 5636              	.LBE461:
 5637              	.LBE460:
1764:fltk-1.3.4-1/png/pngwutil.c ****       png_write_compressed_data_out(png_ptr, &comp);
 5638              		.loc 1 1764 0
 5639 0175 8B442404 		movl	4(%rsp), %eax
 5640 0179 85C0     		testl	%eax, %eax
 5641 017b 0F85C100 		jne	.L551
 5641      0000
 5642              	.L589:
 5643              	.LVL638:
1768:fltk-1.3.4-1/png/pngwutil.c **** 
 5644              		.loc 1 1768 0
 5645 0181 488B5424 		movq	24(%rsp), %rdx
 5645      18
 5646              	.LBB463:
 5647              	.LBB464:
 134:fltk-1.3.4-1/png/pngwutil.c ****    {
 5648              		.loc 1 134 0
 5649 0186 4885D2   		testq	%rdx, %rdx
 5650 0189 0F85F900 		jne	.L587
 5650      0000
 5651              	.LVL639:
 5652              	.L550:
 5653              	.LBE464:
 5654              	.LBE463:
 5655              	.LBB466:
 5656              	.LBB467:
 5657 018f 4889DF   		movq	%rbx, %rdi
 5658 0192 E8000000 		call	png_write_chunk_end.part.4
 5658      00
 5659              	.LVL640:
 5660              	.L526:
 5661              	.LBE467:
 5662              	.LBE466:
1771:fltk-1.3.4-1/png/pngwutil.c **** #endif
 5663              		.loc 1 1771 0
 5664 0197 488B8424 		movq	1160(%rsp), %rax
 5664      88040000 
 5665 019f 64483304 		xorq	%fs:40, %rax
 5665      25280000 
 5665      00
 5666 01a8 0F853001 		jne	.L588
 5666      0000
 5667 01ae 4881C498 		addq	$1176, %rsp
 5667      040000
 5668              		.cfi_remember_state
 5669              		.cfi_def_cfa_offset 56
 5670 01b5 5B       		popq	%rbx
 5671              		.cfi_def_cfa_offset 48
 5672              	.LVL641:
 5673 01b6 5D       		popq	%rbp
 5674              		.cfi_def_cfa_offset 40
 5675 01b7 415C     		popq	%r12
 5676              		.cfi_def_cfa_offset 32
 5677 01b9 415D     		popq	%r13
 5678              		.cfi_def_cfa_offset 24
 5679              	.LVL642:
 5680 01bb 415E     		popq	%r14
 5681              		.cfi_def_cfa_offset 16
 5682              	.LVL643:
 5683 01bd 415F     		popq	%r15
 5684              		.cfi_def_cfa_offset 8
 5685              	.LVL644:
 5686 01bf C3       		ret
 5687              	.LVL645:
 5688              		.p2align 4,,10
 5689              		.p2align 3
 5690              	.L528:
 5691              		.cfi_restore_state
1706:fltk-1.3.4-1/png/pngwutil.c ****    }
 5692              		.loc 1 1706 0
 5693 01c0 BE000000 		movl	$.LC76, %esi
 5693      00
 5694 01c5 4889DF   		movq	%rbx, %rdi
 5695 01c8 E8000000 		call	png_error
 5695      00
 5696              	.LVL646:
 5697 01cd 0F1F00   		.p2align 4,,10
 5698              		.p2align 3
 5699              	.L557:
 5700 01d0 31F6     		xorl	%esi, %esi
1730:fltk-1.3.4-1/png/pngwutil.c ****    else
 5701              		.loc 1 1730 0
 5702 01d2 B9FFFFFF 		movl	$2147483647, %ecx
 5702      7F
 5703              	.LVL647:
 5704 01d7 E92BFFFF 		jmp	.L536
 5704      FF
 5705              	.LVL648:
 5706 01dc 0F1F4000 		.p2align 4,,10
 5707              		.p2align 3
 5708              	.L583:
1743:fltk-1.3.4-1/png/pngwutil.c ****          png_error(png_ptr, png_ptr->zstream.msg);
 5709              		.loc 1 1743 0
 5710 01e0 488D5424 		leaq	16(%rsp), %rdx
 5710      10
 5711 01e5 BE745854 		movl	$1767135348, %esi
 5711      69
 5712 01ea 4889DF   		movq	%rbx, %rdi
 5713 01ed 894C240C 		movl	%ecx, 12(%rsp)
 5714 01f1 E8000000 		call	png_text_compress
 5714      00
 5715              	.LVL649:
 5716 01f6 85C0     		testl	%eax, %eax
 5717 01f8 0F85F200 		jne	.L539
 5717      0000
1756:fltk-1.3.4-1/png/pngwutil.c **** 
 5718              		.loc 1 1756 0
 5719 01fe 448B4424 		movl	12(%rsp), %r8d
 5719      0C
 5720 0203 8B542420 		movl	32(%rsp), %edx
 5721 0207 4401C2   		addl	%r8d, %edx
 5722              	.LVL650:
 5723              	.LBB468:
 5724              	.LBB452:
  83:fltk-1.3.4-1/png/pngwutil.c ****       return;
 5725              		.loc 1 83 0
 5726 020a 4885DB   		testq	%rbx, %rbx
 5727 020d 0F8536FF 		jne	.L541
 5727      FFFF
 5728              	.LBE452:
 5729              	.LBE468:
1765:fltk-1.3.4-1/png/pngwutil.c **** 
 5730              		.loc 1 1765 0
 5731 0213 488D7424 		leaq	16(%rsp), %rsi
 5731      10
 5732 0218 31FF     		xorl	%edi, %edi
 5733 021a E8000000 		call	png_write_compressed_data_out
 5733      00
 5734              	.LVL651:
 5735 021f E973FFFF 		jmp	.L526
 5735      FF
 5736              	.LVL652:
 5737              		.p2align 4,,10
 5738 0224 0F1F4000 		.p2align 3
 5739              	.L586:
 5740              	.LBB469:
 5741              	.LBB462:
 5742 0228 4889EA   		movq	%rbp, %rdx
 5743 022b 4C89F6   		movq	%r14, %rsi
 5744 022e 4889DF   		movq	%rbx, %rdi
 5745 0231 E8000000 		call	png_write_chunk_data.part.3
 5745      00
 5746              	.LVL653:
 5747              	.LBE462:
 5748              	.LBE469:
1764:fltk-1.3.4-1/png/pngwutil.c ****       png_write_compressed_data_out(png_ptr, &comp);
 5749              		.loc 1 1764 0
 5750 0236 8B442404 		movl	4(%rsp), %eax
 5751 023a 85C0     		testl	%eax, %eax
 5752 023c 0F843FFF 		je	.L589
 5752      FFFF
 5753              	.L551:
1765:fltk-1.3.4-1/png/pngwutil.c **** 
 5754              		.loc 1 1765 0
 5755 0242 488D7424 		leaq	16(%rsp), %rsi
 5755      10
 5756 0247 4889DF   		movq	%rbx, %rdi
 5757 024a E8000000 		call	png_write_compressed_data_out
 5757      00
 5758              	.LVL654:
 5759 024f E93BFFFF 		jmp	.L550
 5759      FF
 5760              	.LVL655:
 5761              		.p2align 4,,10
 5762 0254 0F1F4000 		.p2align 3
 5763              	.L548:
 5764              	.LBB470:
 5765              	.LBB459:
 5766 0258 4C89E2   		movq	%r12, %rdx
 5767 025b 4C89FE   		movq	%r15, %rsi
 5768 025e 4889DF   		movq	%rbx, %rdi
 5769 0261 E8000000 		call	png_write_chunk_data.part.3
 5769      00
 5770              	.LVL656:
 5771 0266 E901FFFF 		jmp	.L545
 5771      FF
 5772              	.LVL657:
 5773 026b 0F1F4400 		.p2align 4,,10
 5773      00
 5774              		.p2align 3
 5775              	.L585:
 5776              	.LBE459:
 5777              	.LBE470:
 5778              	.LBB471:
 5779              	.LBB456:
 5780 0270 488DB424 		leaq	1072(%rsp), %rsi
 5780      30040000 
 5781              	.LVL658:
 5782 0278 4889DF   		movq	%rbx, %rdi
 5783 027b E8000000 		call	png_write_chunk_data.part.3
 5783      00
 5784              	.LVL659:
 5785 0280 E9DEFEFF 		jmp	.L544
 5785      FF
 5786              	.LVL660:
 5787              		.p2align 4,,10
 5788 0285 0F1F00   		.p2align 3
 5789              	.L587:
 5790              	.LBE456:
 5791              	.LBE471:
 5792              	.LBB472:
 5793              	.LBB465:
 5794 0288 4C89EE   		movq	%r13, %rsi
 5795 028b 4889DF   		movq	%rbx, %rdi
 5796 028e E8000000 		call	png_write_chunk_data.part.3
 5796      00
 5797              	.LVL661:
 5798 0293 E9F7FEFF 		jmp	.L550
 5798      FF
 5799              	.LVL662:
 5800 0298 0F1F8400 		.p2align 4,,10
 5800      00000000 
 5801              		.p2align 3
 5802              	.L556:
 5803              	.LBE465:
 5804              	.LBE472:
 5805 02a0 31C0     		xorl	%eax, %eax
1726:fltk-1.3.4-1/png/pngwutil.c **** 
 5806              		.loc 1 1726 0
 5807 02a2 41BD0000 		movl	$.LC74, %r13d
 5807      0000
 5808              	.LVL663:
 5809 02a8 E93FFEFF 		jmp	.L535
 5809      FF
 5810              	.LVL664:
 5811 02ad 0F1F00   		.p2align 4,,10
 5812              		.p2align 3
 5813              	.L555:
 5814 02b0 BD010000 		movl	$1, %ebp
 5814      00
1724:fltk-1.3.4-1/png/pngwutil.c ****    lang_key_len = strlen(lang_key)+1;
 5815              		.loc 1 1724 0
 5816 02b5 41BE0000 		movl	$.LC74, %r14d
 5816      0000
 5817              	.LVL665:
 5818 02bb E91BFEFF 		jmp	.L534
 5818      FF
 5819              	.LVL666:
 5820              		.p2align 4,,10
 5821              		.p2align 3
 5822              	.L554:
 5823 02c0 41BC0100 		movl	$1, %r12d
 5823      0000
1722:fltk-1.3.4-1/png/pngwutil.c ****    lang_len = strlen(lang)+1;
 5824              		.loc 1 1722 0
 5825 02c6 41BF0000 		movl	$.LC74, %r15d
 5825      0000
 5826              	.LVL667:
 5827 02cc E9F5FDFF 		jmp	.L533
 5827      FF
 5828              	.LVL668:
 5829              	.L581:
1690:fltk-1.3.4-1/png/pngwutil.c **** 
 5830              		.loc 1 1690 0
 5831 02d1 BE000000 		movl	$.LC75, %esi
 5831      00
 5832 02d6 4889DF   		movq	%rbx, %rdi
 5833 02d9 E8000000 		call	png_error
 5833      00
 5834              	.LVL669:
 5835              	.L588:
1771:fltk-1.3.4-1/png/pngwutil.c **** #endif
 5836              		.loc 1 1771 0
 5837 02de E8000000 		call	__stack_chk_fail
 5837      00
 5838              	.LVL670:
 5839              	.L584:
1750:fltk-1.3.4-1/png/pngwutil.c **** 
 5840              		.loc 1 1750 0
 5841 02e3 BE000000 		movl	$.LC77, %esi
 5841      00
 5842 02e8 4889DF   		movq	%rbx, %rdi
 5843 02eb E8000000 		call	png_error
 5843      00
 5844              	.LVL671:
 5845              	.L539:
1744:fltk-1.3.4-1/png/pngwutil.c ****    }
 5846              		.loc 1 1744 0
 5847 02f0 488BB370 		movq	368(%rbx), %rsi
 5847      010000
 5848 02f7 4889DF   		movq	%rbx, %rdi
 5849 02fa E8000000 		call	png_error
 5849      00
 5850              	.LVL672:
 5851              		.cfi_endproc
 5852              	.LFE88:
 5854              		.section	.text.unlikely.png_write_iTXt
 5855              	.LCOLDE78:
 5856              		.section	.text.png_write_iTXt
 5857              	.LHOTE78:
 5858              		.section	.rodata.str1.8
 5859 0471 00000000 		.align 8
 5859      000000
 5860              	.LC79:
 5861 0478 556E7265 		.string	"Unrecognized unit type for oFFs chunk"
 5861      636F676E 
 5861      697A6564 
 5861      20756E69 
 5861      74207479 
 5862              		.section	.text.unlikely.png_write_oFFs,"ax",@progbits
 5863              	.LCOLDB80:
 5864              		.section	.text.png_write_oFFs,"ax",@progbits
 5865              	.LHOTB80:
 5866              		.p2align 4,,15
 5867              		.globl	png_write_oFFs
 5869              	png_write_oFFs:
 5870              	.LFB89:
1779:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[9];
 5871              		.loc 1 1779 0
 5872              		.cfi_startproc
 5873              	.LVL673:
 5874 0000 4155     		pushq	%r13
 5875              		.cfi_def_cfa_offset 16
 5876              		.cfi_offset 13, -16
 5877 0002 4154     		pushq	%r12
 5878              		.cfi_def_cfa_offset 24
 5879              		.cfi_offset 12, -24
 5880 0004 4189F5   		movl	%esi, %r13d
 5881 0007 55       		pushq	%rbp
 5882              		.cfi_def_cfa_offset 32
 5883              		.cfi_offset 6, -32
 5884 0008 53       		pushq	%rbx
 5885              		.cfi_def_cfa_offset 40
 5886              		.cfi_offset 3, -40
 5887 0009 4889FD   		movq	%rdi, %rbp
 5888 000c 4189D4   		movl	%edx, %r12d
 5889 000f 89CB     		movl	%ecx, %ebx
 5890 0011 4883EC28 		subq	$40, %rsp
 5891              		.cfi_def_cfa_offset 80
1779:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[9];
 5892              		.loc 1 1779 0
 5893 0015 64488B04 		movq	%fs:40, %rax
 5893      25280000 
 5893      00
 5894 001e 48894424 		movq	%rax, 24(%rsp)
 5894      18
 5895 0023 31C0     		xorl	%eax, %eax
1784:fltk-1.3.4-1/png/pngwutil.c ****       png_warning(png_ptr, "Unrecognized unit type for oFFs chunk");
 5896              		.loc 1 1784 0
 5897 0025 83F901   		cmpl	$1, %ecx
 5898 0028 7E0A     		jle	.L591
1785:fltk-1.3.4-1/png/pngwutil.c **** 
 5899              		.loc 1 1785 0
 5900 002a BE000000 		movl	$.LC79, %esi
 5900      00
 5901              	.LVL674:
 5902 002f E8000000 		call	png_warning
 5902      00
 5903              	.LVL675:
 5904              	.L591:
1787:fltk-1.3.4-1/png/pngwutil.c ****    png_save_int_32(buf + 4, y_offset);
 5905              		.loc 1 1787 0
 5906 0034 4489EE   		movl	%r13d, %esi
 5907 0037 4889E7   		movq	%rsp, %rdi
 5908 003a E8000000 		call	png_save_int_32
 5908      00
 5909              	.LVL676:
1788:fltk-1.3.4-1/png/pngwutil.c ****    buf[8] = (png_byte)unit_type;
 5910              		.loc 1 1788 0
 5911 003f 488D7C24 		leaq	4(%rsp), %rdi
 5911      04
 5912 0044 4489E6   		movl	%r12d, %esi
 5913 0047 E8000000 		call	png_save_int_32
 5913      00
 5914              	.LVL677:
1791:fltk-1.3.4-1/png/pngwutil.c **** }
 5915              		.loc 1 1791 0
 5916 004c B9090000 		movl	$9, %ecx
 5916      00
 5917 0051 4889E2   		movq	%rsp, %rdx
 5918 0054 BE734646 		movl	$1866876531, %esi
 5918      6F
 5919 0059 4889EF   		movq	%rbp, %rdi
1789:fltk-1.3.4-1/png/pngwutil.c **** 
 5920              		.loc 1 1789 0
 5921 005c 885C2408 		movb	%bl, 8(%rsp)
1791:fltk-1.3.4-1/png/pngwutil.c **** }
 5922              		.loc 1 1791 0
 5923 0060 E8000000 		call	png_write_complete_chunk
 5923      00
 5924              	.LVL678:
1792:fltk-1.3.4-1/png/pngwutil.c **** #endif
 5925              		.loc 1 1792 0
 5926 0065 488B4424 		movq	24(%rsp), %rax
 5926      18
 5927 006a 64483304 		xorq	%fs:40, %rax
 5927      25280000 
 5927      00
 5928 0073 750B     		jne	.L594
 5929 0075 4883C428 		addq	$40, %rsp
 5930              		.cfi_remember_state
 5931              		.cfi_def_cfa_offset 40
 5932 0079 5B       		popq	%rbx
 5933              		.cfi_def_cfa_offset 32
 5934              	.LVL679:
 5935 007a 5D       		popq	%rbp
 5936              		.cfi_def_cfa_offset 24
 5937              	.LVL680:
 5938 007b 415C     		popq	%r12
 5939              		.cfi_def_cfa_offset 16
 5940              	.LVL681:
 5941 007d 415D     		popq	%r13
 5942              		.cfi_def_cfa_offset 8
 5943              	.LVL682:
 5944 007f C3       		ret
 5945              	.LVL683:
 5946              	.L594:
 5947              		.cfi_restore_state
 5948 0080 E8000000 		call	__stack_chk_fail
 5948      00
 5949              	.LVL684:
 5950              		.cfi_endproc
 5951              	.LFE89:
 5953              		.section	.text.unlikely.png_write_oFFs
 5954              	.LCOLDE80:
 5955              		.section	.text.png_write_oFFs
 5956              	.LHOTE80:
 5957              		.section	.rodata.str1.8
 5958 049e 0000     		.align 8
 5959              	.LC81:
 5960 04a0 556E7265 		.string	"Unrecognized equation type for pCAL chunk"
 5960      636F676E 
 5960      697A6564 
 5960      20657175 
 5960      6174696F 
 5961              		.section	.rodata.str1.1
 5962              	.LC82:
 5963 018e 7043414C 		.string	"pCAL: invalid keyword"
 5963      3A20696E 
 5963      76616C69 
 5963      64206B65 
 5963      79776F72 
 5964              		.section	.text.unlikely.png_write_pCAL,"ax",@progbits
 5965              	.LCOLDB83:
 5966              		.section	.text.png_write_pCAL,"ax",@progbits
 5967              	.LHOTB83:
 5968              		.p2align 4,,15
 5969              		.globl	png_write_pCAL
 5971              	png_write_pCAL:
 5972              	.LFB90:
1800:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 purpose_len;
 5973              		.loc 1 1800 0
 5974              		.cfi_startproc
 5975              	.LVL685:
 5976 0000 4157     		pushq	%r15
 5977              		.cfi_def_cfa_offset 16
 5978              		.cfi_offset 15, -16
 5979 0002 4156     		pushq	%r14
 5980              		.cfi_def_cfa_offset 24
 5981              		.cfi_offset 14, -24
 5982 0004 4155     		pushq	%r13
 5983              		.cfi_def_cfa_offset 32
 5984              		.cfi_offset 13, -32
 5985 0006 4154     		pushq	%r12
 5986              		.cfi_def_cfa_offset 40
 5987              		.cfi_offset 12, -40
 5988 0008 4989FC   		movq	%rdi, %r12
 5989 000b 55       		pushq	%rbp
 5990              		.cfi_def_cfa_offset 48
 5991              		.cfi_offset 6, -48
 5992 000c 53       		pushq	%rbx
 5993              		.cfi_def_cfa_offset 56
 5994              		.cfi_offset 3, -56
 5995 000d 4881ECA8 		subq	$168, %rsp
 5995      000000
 5996              		.cfi_def_cfa_offset 224
1800:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 purpose_len;
 5997              		.loc 1 1800 0
 5998 0014 89542408 		movl	%edx, 8(%rsp)
 5999 0018 488B9424 		movq	224(%rsp), %rdx
 5999      E0000000 
 6000              	.LVL686:
 6001 0020 894C240C 		movl	%ecx, 12(%rsp)
 6002 0024 44894424 		movl	%r8d, 40(%rsp)
 6002      28
 6003 0029 64488B0C 		movq	%fs:40, %rcx
 6003      25280000 
 6003      00
 6004 0032 48898C24 		movq	%rcx, 152(%rsp)
 6004      98000000 
 6005 003a 31C9     		xorl	%ecx, %ecx
 6006              	.LVL687:
1810:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "Unrecognized equation type for pCAL chunk");
 6007              		.loc 1 1810 0
 6008 003c 4183F803 		cmpl	$3, %r8d
1800:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 purpose_len;
 6009              		.loc 1 1800 0
 6010 0040 48891424 		movq	%rdx, (%rsp)
 6011 0044 4C8BAC24 		movq	232(%rsp), %r13
 6011      E8000000 
1810:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "Unrecognized equation type for pCAL chunk");
 6012              		.loc 1 1810 0
 6013 004c 0F8F6602 		jg	.L635
 6013      0000
1813:fltk-1.3.4-1/png/pngwutil.c **** 
 6014              		.loc 1 1813 0
 6015 0052 488D5424 		leaq	64(%rsp), %rdx
 6015      40
 6016 0057 4589CE   		movl	%r9d, %r14d
 6017 005a E8000000 		call	png_check_keyword
 6017      00
 6018              	.LVL688:
1815:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "pCAL: invalid keyword");
 6019              		.loc 1 1815 0
 6020 005f 85C0     		testl	%eax, %eax
1813:fltk-1.3.4-1/png/pngwutil.c **** 
 6021              		.loc 1 1813 0
 6022 0061 89C3     		movl	%eax, %ebx
 6023              	.LVL689:
1815:fltk-1.3.4-1/png/pngwutil.c ****       png_error(png_ptr, "pCAL: invalid keyword");
 6024              		.loc 1 1815 0
 6025 0063 0F844202 		je	.L636
 6025      0000
 6026              	.LVL690:
1821:fltk-1.3.4-1/png/pngwutil.c ****    png_debug1(3, "pCAL units length = %d", (int)units_len);
 6027              		.loc 1 1821 0
 6028 0069 488B3C24 		movq	(%rsp), %rdi
 6029 006d E8000000 		call	strlen
 6029      00
 6030              	.LVL691:
 6031 0072 31D2     		xorl	%edx, %edx
 6032 0074 4585F6   		testl	%r14d, %r14d
1823:fltk-1.3.4-1/png/pngwutil.c **** 
 6033              		.loc 1 1823 0
 6034 0077 8D4B01   		leal	1(%rbx), %ecx
1821:fltk-1.3.4-1/png/pngwutil.c ****    png_debug1(3, "pCAL units length = %d", (int)units_len);
 6035              		.loc 1 1821 0
 6036 007a 0F95C2   		setne	%dl
1825:fltk-1.3.4-1/png/pngwutil.c ****        (png_alloc_size_t)(nparams * (sizeof (png_size_t))));
 6037              		.loc 1 1825 0
 6038 007d 4963F6   		movslq	%r14d, %rsi
 6039 0080 4C89E7   		movq	%r12, %rdi
1821:fltk-1.3.4-1/png/pngwutil.c ****    png_debug1(3, "pCAL units length = %d", (int)units_len);
 6040              		.loc 1 1821 0
 6041 0083 4801D0   		addq	%rdx, %rax
1825:fltk-1.3.4-1/png/pngwutil.c ****        (png_alloc_size_t)(nparams * (sizeof (png_size_t))));
 6042              		.loc 1 1825 0
 6043 0086 48C1E603 		salq	$3, %rsi
1823:fltk-1.3.4-1/png/pngwutil.c **** 
 6044              		.loc 1 1823 0
 6045 008a 48894C24 		movq	%rcx, 24(%rsp)
 6045      18
1821:fltk-1.3.4-1/png/pngwutil.c ****    png_debug1(3, "pCAL units length = %d", (int)units_len);
 6046              		.loc 1 1821 0
 6047 008f 48894424 		movq	%rax, 16(%rsp)
 6047      10
 6048              	.LVL692:
1823:fltk-1.3.4-1/png/pngwutil.c **** 
 6049              		.loc 1 1823 0
 6050 0094 488D5C08 		leaq	10(%rax,%rcx), %rbx
 6050      0A
 6051              	.LVL693:
1825:fltk-1.3.4-1/png/pngwutil.c ****        (png_alloc_size_t)(nparams * (sizeof (png_size_t))));
 6052              		.loc 1 1825 0
 6053 0099 E8000000 		call	png_malloc
 6053      00
 6054              	.LVL694:
1831:fltk-1.3.4-1/png/pngwutil.c ****    {
 6055              		.loc 1 1831 0
 6056 009e 4585F6   		testl	%r14d, %r14d
1825:fltk-1.3.4-1/png/pngwutil.c ****        (png_alloc_size_t)(nparams * (sizeof (png_size_t))));
 6057              		.loc 1 1825 0
 6058 00a1 4889C5   		movq	%rax, %rbp
 6059              	.LVL695:
1831:fltk-1.3.4-1/png/pngwutil.c ****    {
 6060              		.loc 1 1831 0
 6061 00a4 0F8EAD01 		jle	.L598
 6061      0000
 6062 00aa 418D46FF 		leal	-1(%r14), %eax
 6063              	.LVL696:
 6064 00ae 4531FF   		xorl	%r15d, %r15d
 6065 00b1 4C896424 		movq	%r12, 32(%rsp)
 6065      20
 6066 00b6 44897424 		movl	%r14d, 44(%rsp)
 6066      2C
 6067 00bb 4D89EE   		movq	%r13, %r14
 6068              	.LVL697:
 6069 00be 4D89FD   		movq	%r15, %r13
 6070 00c1 89C1     		movl	%eax, %ecx
 6071 00c3 4883C001 		addq	$1, %rax
 6072 00c7 4189CC   		movl	%ecx, %r12d
 6073              	.LVL698:
 6074 00ca 4989C7   		movq	%rax, %r15
 6075              	.LVL699:
 6076 00cd 0F1F00   		.p2align 4,,10
 6077              		.p2align 3
 6078              	.L599:
1833:fltk-1.3.4-1/png/pngwutil.c ****       png_debug2(3, "pCAL parameter %d length = %lu", i,
 6079              		.loc 1 1833 0 discriminator 3
 6080 00d0 4B8B3CEE 		movq	(%r14,%r13,8), %rdi
 6081 00d4 E8000000 		call	strlen
 6081      00
 6082              	.LVL700:
 6083 00d9 31C9     		xorl	%ecx, %ecx
 6084 00db 4539EC   		cmpl	%r13d, %r12d
 6085 00de 0F95C1   		setne	%cl
 6086 00e1 4801C8   		addq	%rcx, %rax
 6087 00e4 4A8944ED 		movq	%rax, 0(%rbp,%r13,8)
 6087      00
 6088              	.LVL701:
 6089 00e9 4983C501 		addq	$1, %r13
 6090              	.LVL702:
1836:fltk-1.3.4-1/png/pngwutil.c ****    }
 6091              		.loc 1 1836 0 discriminator 3
 6092 00ed 4801C3   		addq	%rax, %rbx
 6093              	.LVL703:
1831:fltk-1.3.4-1/png/pngwutil.c ****    {
 6094              		.loc 1 1831 0 discriminator 3
 6095 00f0 4D39FD   		cmpq	%r15, %r13
 6096 00f3 75DB     		jne	.L599
 6097 00f5 4C8B6424 		movq	32(%rsp), %r12
 6097      20
 6098 00fa 4D89F5   		movq	%r14, %r13
1840:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_data(png_ptr, new_purpose, purpose_len);
 6099              		.loc 1 1840 0
 6100 00fd 89DA     		movl	%ebx, %edx
 6101              	.LVL704:
 6102 00ff 448B7424 		movl	44(%rsp), %r14d
 6102      2C
 6103              	.LBB473:
 6104              	.LBB474:
  83:fltk-1.3.4-1/png/pngwutil.c ****       return;
 6105              		.loc 1 83 0
 6106 0104 4D85E4   		testq	%r12, %r12
 6107 0107 0F84E300 		je	.L600
 6107      0000
 6108              	.LVL705:
 6109              	.L611:
 6110 010d BE4C4143 		movl	$1883455820, %esi
 6110      70
 6111 0112 4C89E7   		movq	%r12, %rdi
 6112 0115 E8000000 		call	png_write_chunk_header.part.2
 6112      00
 6113              	.LVL706:
 6114              	.LBE474:
 6115              	.LBE473:
 6116              	.LBB477:
 6117              	.LBB478:
 134:fltk-1.3.4-1/png/pngwutil.c ****    {
 6118              		.loc 1 134 0
 6119 011a 48837C24 		cmpq	$0, 24(%rsp)
 6119      1800
 6120 0120 0F851A01 		jne	.L637
 6120      0000
 6121              	.L601:
 6122              	.LVL707:
 6123              	.LBE478:
 6124              	.LBE477:
1842:fltk-1.3.4-1/png/pngwutil.c ****    png_save_int_32(buf + 4, X1);
 6125              		.loc 1 1842 0
 6126 0126 8B742408 		movl	8(%rsp), %esi
 6127 012a 488D7C24 		leaq	48(%rsp), %rdi
 6127      30
 6128 012f E8000000 		call	png_save_int_32
 6128      00
 6129              	.LVL708:
1843:fltk-1.3.4-1/png/pngwutil.c ****    buf[8] = (png_byte)type;
 6130              		.loc 1 1843 0
 6131 0134 8B74240C 		movl	12(%rsp), %esi
 6132 0138 488D7C24 		leaq	52(%rsp), %rdi
 6132      34
 6133 013d E8000000 		call	png_save_int_32
 6133      00
 6134              	.LVL709:
1844:fltk-1.3.4-1/png/pngwutil.c ****    buf[9] = (png_byte)nparams;
 6135              		.loc 1 1844 0
 6136 0142 0FB64424 		movzbl	40(%rsp), %eax
 6136      28
 6137              	.LBB480:
 6138              	.LBB481:
 6139 0147 488D7424 		leaq	48(%rsp), %rsi
 6139      30
 6140 014c BA0A0000 		movl	$10, %edx
 6140      00
 6141 0151 4C89E7   		movq	%r12, %rdi
 6142              	.LBE481:
 6143              	.LBE480:
1845:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_data(png_ptr, buf, (png_size_t)10);
 6144              		.loc 1 1845 0
 6145 0154 44887424 		movb	%r14b, 57(%rsp)
 6145      39
 6146              	.LVL710:
1844:fltk-1.3.4-1/png/pngwutil.c ****    buf[9] = (png_byte)nparams;
 6147              		.loc 1 1844 0
 6148 0159 88442438 		movb	%al, 56(%rsp)
 6149              	.LBB483:
 6150              	.LBB482:
 6151 015d E8000000 		call	png_write_chunk_data.part.3
 6151      00
 6152              	.LVL711:
 6153              	.LBE482:
 6154              	.LBE483:
 6155              	.LBB484:
 6156              	.LBB485:
 134:fltk-1.3.4-1/png/pngwutil.c ****    {
 6157              		.loc 1 134 0
 6158 0162 48837C24 		cmpq	$0, 16(%rsp)
 6158      1000
 6159 0168 0F85B200 		jne	.L638
 6159      0000
 6160              	.L602:
 6161              	.LVL712:
 6162              	.LBE485:
 6163              	.LBE484:
1849:fltk-1.3.4-1/png/pngwutil.c ****    {
 6164              		.loc 1 1849 0
 6165 016e 4585F6   		testl	%r14d, %r14d
 6166 0171 0F8E2401 		jle	.L639
 6166      0000
 6167              	.LVL713:
 6168              	.L607:
1831:fltk-1.3.4-1/png/pngwutil.c ****    {
 6169              		.loc 1 1831 0
 6170 0177 31DB     		xorl	%ebx, %ebx
 6171              	.LVL714:
 6172 0179 0F1F8000 		.p2align 4,,10
 6172      000000
 6173              		.p2align 3
 6174              	.L604:
 6175              	.LBB487:
 6176              	.LBB488:
 131:fltk-1.3.4-1/png/pngwutil.c ****       return;
 6177              		.loc 1 131 0 discriminator 3
 6178 0180 4D85E4   		testq	%r12, %r12
 6179              	.LBE488:
 6180              	.LBE487:
1851:fltk-1.3.4-1/png/pngwutil.c ****    }
 6181              		.loc 1 1851 0 discriminator 3
 6182 0183 488B54DD 		movq	0(%rbp,%rbx,8), %rdx
 6182      00
 6183 0188 498B74DD 		movq	0(%r13,%rbx,8), %rsi
 6183      00
 6184              	.LVL715:
 6185              	.LBB490:
 6186              	.LBB489:
 131:fltk-1.3.4-1/png/pngwutil.c ****       return;
 6187              		.loc 1 131 0 discriminator 3
 6188 018d 7412     		je	.L603
 134:fltk-1.3.4-1/png/pngwutil.c ****    {
 6189              		.loc 1 134 0
 6190 018f 4885F6   		testq	%rsi, %rsi
 6191 0192 740D     		je	.L603
 6192 0194 4885D2   		testq	%rdx, %rdx
 6193 0197 7408     		je	.L603
 6194 0199 4C89E7   		movq	%r12, %rdi
 6195 019c E8000000 		call	png_write_chunk_data.part.3
 6195      00
 6196              	.LVL716:
 6197              	.L603:
 6198 01a1 4883C301 		addq	$1, %rbx
 6199              	.LVL717:
 6200              	.LBE489:
 6201              	.LBE490:
1849:fltk-1.3.4-1/png/pngwutil.c ****    {
 6202              		.loc 1 1849 0 discriminator 3
 6203 01a5 4139DE   		cmpl	%ebx, %r14d
 6204 01a8 7FD6     		jg	.L604
1854:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_end(png_ptr);
 6205              		.loc 1 1854 0
 6206 01aa 4889EE   		movq	%rbp, %rsi
 6207 01ad 4C89E7   		movq	%r12, %rdi
 6208 01b0 E8000000 		call	png_free
 6208      00
 6209              	.LVL718:
 6210              	.LBB491:
 6211              	.LBB492:
 151:fltk-1.3.4-1/png/pngwutil.c **** 
 6212              		.loc 1 151 0
 6213 01b5 4D85E4   		testq	%r12, %r12
 6214 01b8 7408     		je	.L595
 6215              	.L608:
 6216 01ba 4C89E7   		movq	%r12, %rdi
 6217 01bd E8000000 		call	png_write_chunk_end.part.4
 6217      00
 6218              	.LVL719:
 6219              	.L595:
 6220              	.LBE492:
 6221              	.LBE491:
1856:fltk-1.3.4-1/png/pngwutil.c **** #endif
 6222              		.loc 1 1856 0
 6223 01c2 488B8424 		movq	152(%rsp), %rax
 6223      98000000 
 6224 01ca 64483304 		xorq	%fs:40, %rax
 6224      25280000 
 6224      00
 6225 01d3 0F85E900 		jne	.L640
 6225      0000
 6226 01d9 4881C4A8 		addq	$168, %rsp
 6226      000000
 6227              		.cfi_remember_state
 6228              		.cfi_def_cfa_offset 56
 6229 01e0 5B       		popq	%rbx
 6230              		.cfi_def_cfa_offset 48
 6231 01e1 5D       		popq	%rbp
 6232              		.cfi_def_cfa_offset 40
 6233              	.LVL720:
 6234 01e2 415C     		popq	%r12
 6235              		.cfi_def_cfa_offset 32
 6236 01e4 415D     		popq	%r13
 6237              		.cfi_def_cfa_offset 24
 6238 01e6 415E     		popq	%r14
 6239              		.cfi_def_cfa_offset 16
 6240 01e8 415F     		popq	%r15
 6241              		.cfi_def_cfa_offset 8
 6242 01ea C3       		ret
 6243              	.LVL721:
 6244 01eb 0F1F4400 		.p2align 4,,10
 6244      00
 6245              		.p2align 3
 6246              	.L600:
 6247              		.cfi_restore_state
1842:fltk-1.3.4-1/png/pngwutil.c ****    png_save_int_32(buf + 4, X1);
 6248              		.loc 1 1842 0
 6249 01f0 8B742408 		movl	8(%rsp), %esi
 6250 01f4 488D7C24 		leaq	48(%rsp), %rdi
 6250      30
 6251 01f9 E8000000 		call	png_save_int_32
 6251      00
 6252              	.LVL722:
1843:fltk-1.3.4-1/png/pngwutil.c ****    buf[8] = (png_byte)type;
 6253              		.loc 1 1843 0
 6254 01fe 8B74240C 		movl	12(%rsp), %esi
 6255 0202 488D7C24 		leaq	52(%rsp), %rdi
 6255      34
 6256 0207 E8000000 		call	png_save_int_32
 6256      00
 6257              	.LVL723:
1844:fltk-1.3.4-1/png/pngwutil.c ****    buf[9] = (png_byte)nparams;
 6258              		.loc 1 1844 0
 6259 020c 0FB64424 		movzbl	40(%rsp), %eax
 6259      28
1845:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_data(png_ptr, buf, (png_size_t)10);
 6260              		.loc 1 1845 0
 6261 0211 44887424 		movb	%r14b, 57(%rsp)
 6261      39
 6262              	.LVL724:
1844:fltk-1.3.4-1/png/pngwutil.c ****    buf[9] = (png_byte)nparams;
 6263              		.loc 1 1844 0
 6264 0216 88442438 		movb	%al, 56(%rsp)
 6265 021a E958FFFF 		jmp	.L607
 6265      FF
 6266              	.LVL725:
 6267 021f 90       		.p2align 4,,10
 6268              		.p2align 3
 6269              	.L638:
 6270              	.LBB493:
 6271              	.LBB486:
 6272 0220 488B5424 		movq	16(%rsp), %rdx
 6272      10
 6273 0225 488B3424 		movq	(%rsp), %rsi
 6274 0229 4C89E7   		movq	%r12, %rdi
 6275 022c E8000000 		call	png_write_chunk_data.part.3
 6275      00
 6276              	.LVL726:
 6277 0231 E938FFFF 		jmp	.L602
 6277      FF
 6278              	.LVL727:
 6279 0236 662E0F1F 		.p2align 4,,10
 6279      84000000 
 6279      0000
 6280              		.p2align 3
 6281              	.L637:
 6282              	.LBE486:
 6283              	.LBE493:
 6284              	.LBB494:
 6285              	.LBB479:
 6286 0240 488B5424 		movq	24(%rsp), %rdx
 6286      18
 6287 0245 488D7424 		leaq	64(%rsp), %rsi
 6287      40
 6288              	.LVL728:
 6289 024a 4C89E7   		movq	%r12, %rdi
 6290 024d E8000000 		call	png_write_chunk_data.part.3
 6290      00
 6291              	.LVL729:
 6292 0252 E9CFFEFF 		jmp	.L601
 6292      FF
 6293              	.LVL730:
 6294              	.L598:
 6295              	.LBE479:
 6296              	.LBE494:
 6297              	.LBB495:
 6298              	.LBB475:
  83:fltk-1.3.4-1/png/pngwutil.c ****       return;
 6299              		.loc 1 83 0
 6300 0257 4D85E4   		testq	%r12, %r12
 6301              	.LBE475:
 6302              	.LBE495:
1840:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_data(png_ptr, new_purpose, purpose_len);
 6303              		.loc 1 1840 0
 6304 025a 89DA     		movl	%ebx, %edx
 6305              	.LVL731:
 6306              	.LBB496:
 6307              	.LBB476:
  83:fltk-1.3.4-1/png/pngwutil.c ****       return;
 6308              		.loc 1 83 0
 6309 025c 0F85ABFE 		jne	.L611
 6309      FFFF
 6310              	.LVL732:
 6311              	.LBE476:
 6312              	.LBE496:
1842:fltk-1.3.4-1/png/pngwutil.c ****    png_save_int_32(buf + 4, X1);
 6313              		.loc 1 1842 0
 6314 0262 8B742408 		movl	8(%rsp), %esi
 6315 0266 488D7C24 		leaq	48(%rsp), %rdi
 6315      30
 6316 026b E8000000 		call	png_save_int_32
 6316      00
 6317              	.LVL733:
1843:fltk-1.3.4-1/png/pngwutil.c ****    buf[8] = (png_byte)type;
 6318              		.loc 1 1843 0
 6319 0270 8B74240C 		movl	12(%rsp), %esi
 6320 0274 488D7C24 		leaq	52(%rsp), %rdi
 6320      34
 6321 0279 E8000000 		call	png_save_int_32
 6321      00
 6322              	.LVL734:
1844:fltk-1.3.4-1/png/pngwutil.c ****    buf[9] = (png_byte)nparams;
 6323              		.loc 1 1844 0
 6324 027e 0FB64424 		movzbl	40(%rsp), %eax
 6324      28
1854:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_end(png_ptr);
 6325              		.loc 1 1854 0
 6326 0283 4889EE   		movq	%rbp, %rsi
 6327 0286 31FF     		xorl	%edi, %edi
1845:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_data(png_ptr, buf, (png_size_t)10);
 6328              		.loc 1 1845 0
 6329 0288 44887424 		movb	%r14b, 57(%rsp)
 6329      39
 6330              	.LVL735:
1844:fltk-1.3.4-1/png/pngwutil.c ****    buf[9] = (png_byte)nparams;
 6331              		.loc 1 1844 0
 6332 028d 88442438 		movb	%al, 56(%rsp)
1854:fltk-1.3.4-1/png/pngwutil.c ****    png_write_chunk_end(png_ptr);
 6333              		.loc 1 1854 0
 6334 0291 E8000000 		call	png_free
 6334      00
 6335              	.LVL736:
 6336 0296 E927FFFF 		jmp	.L595
 6336      FF
 6337              	.LVL737:
 6338              	.L639:
 6339 029b 4889EE   		movq	%rbp, %rsi
 6340 029e 4C89E7   		movq	%r12, %rdi
 6341 02a1 E8000000 		call	png_free
 6341      00
 6342              	.LVL738:
 6343 02a6 E90FFFFF 		jmp	.L608
 6343      FF
 6344              	.LVL739:
 6345              	.L636:
1816:fltk-1.3.4-1/png/pngwutil.c **** 
 6346              		.loc 1 1816 0
 6347 02ab BE000000 		movl	$.LC82, %esi
 6347      00
 6348 02b0 4C89E7   		movq	%r12, %rdi
 6349 02b3 E8000000 		call	png_error
 6349      00
 6350              	.LVL740:
 6351              	.L635:
1811:fltk-1.3.4-1/png/pngwutil.c **** 
 6352              		.loc 1 1811 0
 6353 02b8 BE000000 		movl	$.LC81, %esi
 6353      00
 6354              	.LVL741:
 6355 02bd E8000000 		call	png_error
 6355      00
 6356              	.LVL742:
 6357              	.L640:
1856:fltk-1.3.4-1/png/pngwutil.c **** #endif
 6358              		.loc 1 1856 0
 6359 02c2 E8000000 		call	__stack_chk_fail
 6359      00
 6360              	.LVL743:
 6361              		.cfi_endproc
 6362              	.LFE90:
 6364              		.section	.text.unlikely.png_write_pCAL
 6365              	.LCOLDE83:
 6366              		.section	.text.png_write_pCAL
 6367              	.LHOTE83:
 6368              		.section	.rodata.str1.8
 6369 04ca 00000000 		.align 8
 6369      0000
 6370              	.LC84:
 6371 04d0 43616E27 		.string	"Can't write sCAL (buffer too small)"
 6371      74207772 
 6371      69746520 
 6371      7343414C 
 6371      20286275 
 6372              		.section	.text.unlikely.png_write_sCAL_s,"ax",@progbits
 6373              	.LCOLDB85:
 6374              		.section	.text.png_write_sCAL_s,"ax",@progbits
 6375              	.LHOTB85:
 6376              		.p2align 4,,15
 6377              		.globl	png_write_sCAL_s
 6379              	png_write_sCAL_s:
 6380              	.LFB91:
1864:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[64];
 6381              		.loc 1 1864 0
 6382              		.cfi_startproc
 6383              	.LVL744:
 6384 0000 4157     		pushq	%r15
 6385              		.cfi_def_cfa_offset 16
 6386              		.cfi_offset 15, -16
 6387 0002 4156     		pushq	%r14
 6388              		.cfi_def_cfa_offset 24
 6389              		.cfi_offset 14, -24
 6390 0004 4989FF   		movq	%rdi, %r15
 6391 0007 4155     		pushq	%r13
 6392              		.cfi_def_cfa_offset 32
 6393              		.cfi_offset 13, -32
 6394 0009 4154     		pushq	%r12
 6395              		.cfi_def_cfa_offset 40
 6396              		.cfi_offset 12, -40
1870:fltk-1.3.4-1/png/pngwutil.c ****    hlen = strlen(height);
 6397              		.loc 1 1870 0
 6398 000b 4889D7   		movq	%rdx, %rdi
 6399              	.LVL745:
1864:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[64];
 6400              		.loc 1 1864 0
 6401 000e 55       		pushq	%rbp
 6402              		.cfi_def_cfa_offset 48
 6403              		.cfi_offset 6, -48
 6404 000f 53       		pushq	%rbx
 6405              		.cfi_def_cfa_offset 56
 6406              		.cfi_offset 3, -56
 6407 0010 4989CC   		movq	%rcx, %r12
 6408 0013 4989D6   		movq	%rdx, %r14
 6409 0016 4883EC68 		subq	$104, %rsp
 6410              		.cfi_def_cfa_offset 160
1864:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[64];
 6411              		.loc 1 1864 0
 6412 001a 8974240C 		movl	%esi, 12(%rsp)
 6413 001e 64488B04 		movq	%fs:40, %rax
 6413      25280000 
 6413      00
 6414 0027 48894424 		movq	%rax, 88(%rsp)
 6414      58
 6415 002c 31C0     		xorl	%eax, %eax
1870:fltk-1.3.4-1/png/pngwutil.c ****    hlen = strlen(height);
 6416              		.loc 1 1870 0
 6417 002e E8000000 		call	strlen
 6417      00
 6418              	.LVL746:
1871:fltk-1.3.4-1/png/pngwutil.c ****    total_len = wlen + hlen + 2;
 6419              		.loc 1 1871 0
 6420 0033 4C89E7   		movq	%r12, %rdi
1870:fltk-1.3.4-1/png/pngwutil.c ****    hlen = strlen(height);
 6421              		.loc 1 1870 0
 6422 0036 4889C3   		movq	%rax, %rbx
 6423              	.LVL747:
1871:fltk-1.3.4-1/png/pngwutil.c ****    total_len = wlen + hlen + 2;
 6424              		.loc 1 1871 0
 6425 0039 E8000000 		call	strlen
 6425      00
 6426              	.LVL748:
1872:fltk-1.3.4-1/png/pngwutil.c **** 
 6427              		.loc 1 1872 0
 6428 003e 488D6C03 		leaq	2(%rbx,%rax), %rbp
 6428      02
 6429              	.LVL749:
1874:fltk-1.3.4-1/png/pngwutil.c ****    {
 6430              		.loc 1 1874 0
 6431 0043 8B74240C 		movl	12(%rsp), %esi
 6432 0047 4883FD40 		cmpq	$64, %rbp
 6433 004b 7763     		ja	.L646
 6434              	.LBB497:
 6435              	.LBB498:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 6436              		.loc 2 53 0
 6437 004d 488D5301 		leaq	1(%rbx), %rdx
 6438 0051 488D7C24 		leaq	17(%rsp), %rdi
 6438      11
 6439 0056 B93F0000 		movl	$63, %ecx
 6439      00
 6440              	.LBE498:
 6441              	.LBE497:
1880:fltk-1.3.4-1/png/pngwutil.c ****    memcpy(buf + 1, width, wlen + 1);      /* Append the '\0' here */
 6442              		.loc 1 1880 0
 6443 005b 40887424 		movb	%sil, 16(%rsp)
 6443      10
 6444              	.LVL750:
 6445              	.LBB500:
 6446              	.LBB499:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 6447              		.loc 2 53 0
 6448 0060 4C89F6   		movq	%r14, %rsi
 6449 0063 4989C5   		movq	%rax, %r13
 6450 0066 E8000000 		call	__memcpy_chk
 6450      00
 6451              	.LVL751:
 6452              	.LBE499:
 6453              	.LBE500:
 6454              	.LBB501:
 6455              	.LBB502:
 6456 006b 488D7C1C 		leaq	18(%rsp,%rbx), %rdi
 6456      12
 6457              	.LVL752:
 6458 0070 4C89EA   		movq	%r13, %rdx
 6459 0073 4C89E6   		movq	%r12, %rsi
 6460 0076 E8000000 		call	memcpy
 6460      00
 6461              	.LVL753:
 6462              	.LBE502:
 6463              	.LBE501:
1885:fltk-1.3.4-1/png/pngwutil.c **** }
 6464              		.loc 1 1885 0
 6465 007b 488D5424 		leaq	16(%rsp), %rdx
 6465      10
 6466 0080 4889E9   		movq	%rbp, %rcx
 6467 0083 BE4C4143 		movl	$1933787468, %esi
 6467      73
 6468 0088 4C89FF   		movq	%r15, %rdi
 6469 008b E8000000 		call	png_write_complete_chunk
 6469      00
 6470              	.LVL754:
 6471              	.L641:
1886:fltk-1.3.4-1/png/pngwutil.c **** #endif
 6472              		.loc 1 1886 0
 6473 0090 488B4424 		movq	88(%rsp), %rax
 6473      58
 6474 0095 64483304 		xorq	%fs:40, %rax
 6474      25280000 
 6474      00
 6475 009e 751F     		jne	.L647
 6476 00a0 4883C468 		addq	$104, %rsp
 6477              		.cfi_remember_state
 6478              		.cfi_def_cfa_offset 56
 6479 00a4 5B       		popq	%rbx
 6480              		.cfi_def_cfa_offset 48
 6481              	.LVL755:
 6482 00a5 5D       		popq	%rbp
 6483              		.cfi_def_cfa_offset 40
 6484              	.LVL756:
 6485 00a6 415C     		popq	%r12
 6486              		.cfi_def_cfa_offset 32
 6487              	.LVL757:
 6488 00a8 415D     		popq	%r13
 6489              		.cfi_def_cfa_offset 24
 6490 00aa 415E     		popq	%r14
 6491              		.cfi_def_cfa_offset 16
 6492              	.LVL758:
 6493 00ac 415F     		popq	%r15
 6494              		.cfi_def_cfa_offset 8
 6495              	.LVL759:
 6496 00ae C3       		ret
 6497              	.LVL760:
 6498 00af 90       		.p2align 4,,10
 6499              		.p2align 3
 6500              	.L646:
 6501              		.cfi_restore_state
1876:fltk-1.3.4-1/png/pngwutil.c ****       return;
 6502              		.loc 1 1876 0
 6503 00b0 BE000000 		movl	$.LC84, %esi
 6503      00
 6504              	.LVL761:
 6505 00b5 4C89FF   		movq	%r15, %rdi
 6506 00b8 E8000000 		call	png_warning
 6506      00
 6507              	.LVL762:
 6508 00bd EBD1     		jmp	.L641
 6509              	.L647:
1886:fltk-1.3.4-1/png/pngwutil.c **** #endif
 6510              		.loc 1 1886 0
 6511 00bf E8000000 		call	__stack_chk_fail
 6511      00
 6512              	.LVL763:
 6513              		.cfi_endproc
 6514              	.LFE91:
 6516              		.section	.text.unlikely.png_write_sCAL_s
 6517              	.LCOLDE85:
 6518              		.section	.text.png_write_sCAL_s
 6519              	.LHOTE85:
 6520              		.section	.rodata.str1.8
 6521 04f4 00000000 		.align 8
 6522              	.LC86:
 6523 04f8 556E7265 		.string	"Unrecognized unit type for pHYs chunk"
 6523      636F676E 
 6523      697A6564 
 6523      20756E69 
 6523      74207479 
 6524              		.section	.text.unlikely.png_write_pHYs,"ax",@progbits
 6525              	.LCOLDB87:
 6526              		.section	.text.png_write_pHYs,"ax",@progbits
 6527              	.LHOTB87:
 6528              		.p2align 4,,15
 6529              		.globl	png_write_pHYs
 6531              	png_write_pHYs:
 6532              	.LFB92:
1895:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[9];
 6533              		.loc 1 1895 0
 6534              		.cfi_startproc
 6535              	.LVL764:
 6536 0000 4155     		pushq	%r13
 6537              		.cfi_def_cfa_offset 16
 6538              		.cfi_offset 13, -16
 6539 0002 4154     		pushq	%r12
 6540              		.cfi_def_cfa_offset 24
 6541              		.cfi_offset 12, -24
 6542 0004 4989FD   		movq	%rdi, %r13
 6543 0007 55       		pushq	%rbp
 6544              		.cfi_def_cfa_offset 32
 6545              		.cfi_offset 6, -32
 6546 0008 53       		pushq	%rbx
 6547              		.cfi_def_cfa_offset 40
 6548              		.cfi_offset 3, -40
 6549 0009 89F5     		movl	%esi, %ebp
 6550 000b 89D3     		movl	%edx, %ebx
 6551 000d 4189CC   		movl	%ecx, %r12d
 6552 0010 4883EC28 		subq	$40, %rsp
 6553              		.cfi_def_cfa_offset 80
1895:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[9];
 6554              		.loc 1 1895 0
 6555 0014 64488B04 		movq	%fs:40, %rax
 6555      25280000 
 6555      00
 6556 001d 48894424 		movq	%rax, 24(%rsp)
 6556      18
 6557 0022 31C0     		xorl	%eax, %eax
1900:fltk-1.3.4-1/png/pngwutil.c ****       png_warning(png_ptr, "Unrecognized unit type for pHYs chunk");
 6558              		.loc 1 1900 0
 6559 0024 83F901   		cmpl	$1, %ecx
 6560 0027 7E0A     		jle	.L649
1901:fltk-1.3.4-1/png/pngwutil.c **** 
 6561              		.loc 1 1901 0
 6562 0029 BE000000 		movl	$.LC86, %esi
 6562      00
 6563              	.LVL765:
 6564 002e E8000000 		call	png_warning
 6564      00
 6565              	.LVL766:
 6566              	.L649:
 6567              	.LBB503:
 6568              	.LBB504:
  26:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)((i >> 16) & 0xff);
 6569              		.loc 1 26 0
 6570 0033 89E8     		movl	%ebp, %eax
 6571              	.LBE504:
 6572              	.LBE503:
1907:fltk-1.3.4-1/png/pngwutil.c **** }
 6573              		.loc 1 1907 0
 6574 0035 B9090000 		movl	$9, %ecx
 6574      00
 6575 003a 4889E2   		movq	%rsp, %rdx
 6576              	.LBB508:
 6577              	.LBB505:
  26:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)((i >> 16) & 0xff);
 6578              		.loc 1 26 0
 6579 003d C1E818   		shrl	$24, %eax
 6580              	.LBE505:
 6581              	.LBE508:
1907:fltk-1.3.4-1/png/pngwutil.c **** }
 6582              		.loc 1 1907 0
 6583 0040 BE735948 		movl	$1883789683, %esi
 6583      70
 6584 0045 4C89EF   		movq	%r13, %rdi
 6585              	.LBB509:
 6586              	.LBB506:
  26:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)((i >> 16) & 0xff);
 6587              		.loc 1 26 0
 6588 0048 880424   		movb	%al, (%rsp)
  27:fltk-1.3.4-1/png/pngwutil.c ****    buf[2] = (png_byte)((i >> 8) & 0xff);
 6589              		.loc 1 27 0
 6590 004b 89E8     		movl	%ebp, %eax
  29:fltk-1.3.4-1/png/pngwutil.c **** }
 6591              		.loc 1 29 0
 6592 004d 40886C24 		movb	%bpl, 3(%rsp)
 6592      03
 6593              	.LVL767:
  27:fltk-1.3.4-1/png/pngwutil.c ****    buf[2] = (png_byte)((i >> 8) & 0xff);
 6594              		.loc 1 27 0
 6595 0052 C1E810   		shrl	$16, %eax
 6596              	.LBE506:
 6597              	.LBE509:
 6598              	.LBB510:
 6599              	.LBB511:
  29:fltk-1.3.4-1/png/pngwutil.c **** }
 6600              		.loc 1 29 0
 6601 0055 885C2407 		movb	%bl, 7(%rsp)
 6602              	.LVL768:
 6603              	.LBE511:
 6604              	.LBE510:
1905:fltk-1.3.4-1/png/pngwutil.c **** 
 6605              		.loc 1 1905 0
 6606 0059 44886424 		movb	%r12b, 8(%rsp)
 6606      08
 6607              	.LBB513:
 6608              	.LBB507:
  27:fltk-1.3.4-1/png/pngwutil.c ****    buf[2] = (png_byte)((i >> 8) & 0xff);
 6609              		.loc 1 27 0
 6610 005e 88442401 		movb	%al, 1(%rsp)
  28:fltk-1.3.4-1/png/pngwutil.c ****    buf[3] = (png_byte)(i & 0xff);
 6611              		.loc 1 28 0
 6612 0062 89E8     		movl	%ebp, %eax
 6613 0064 C1E808   		shrl	$8, %eax
 6614 0067 88442402 		movb	%al, 2(%rsp)
 6615              	.LBE507:
 6616              	.LBE513:
 6617              	.LBB514:
 6618              	.LBB512:
  26:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)((i >> 16) & 0xff);
 6619              		.loc 1 26 0
 6620 006b 89D8     		movl	%ebx, %eax
 6621 006d C1E818   		shrl	$24, %eax
 6622 0070 88442404 		movb	%al, 4(%rsp)
  27:fltk-1.3.4-1/png/pngwutil.c ****    buf[2] = (png_byte)((i >> 8) & 0xff);
 6623              		.loc 1 27 0
 6624 0074 89D8     		movl	%ebx, %eax
 6625 0076 C1E810   		shrl	$16, %eax
 6626 0079 88442405 		movb	%al, 5(%rsp)
  28:fltk-1.3.4-1/png/pngwutil.c ****    buf[3] = (png_byte)(i & 0xff);
 6627              		.loc 1 28 0
 6628 007d 89D8     		movl	%ebx, %eax
 6629 007f C1E808   		shrl	$8, %eax
 6630 0082 88442406 		movb	%al, 6(%rsp)
 6631              	.LBE512:
 6632              	.LBE514:
1907:fltk-1.3.4-1/png/pngwutil.c **** }
 6633              		.loc 1 1907 0
 6634 0086 E8000000 		call	png_write_complete_chunk
 6634      00
 6635              	.LVL769:
1908:fltk-1.3.4-1/png/pngwutil.c **** #endif
 6636              		.loc 1 1908 0
 6637 008b 488B4424 		movq	24(%rsp), %rax
 6637      18
 6638 0090 64483304 		xorq	%fs:40, %rax
 6638      25280000 
 6638      00
 6639 0099 750B     		jne	.L652
 6640 009b 4883C428 		addq	$40, %rsp
 6641              		.cfi_remember_state
 6642              		.cfi_def_cfa_offset 40
 6643 009f 5B       		popq	%rbx
 6644              		.cfi_def_cfa_offset 32
 6645              	.LVL770:
 6646 00a0 5D       		popq	%rbp
 6647              		.cfi_def_cfa_offset 24
 6648              	.LVL771:
 6649 00a1 415C     		popq	%r12
 6650              		.cfi_def_cfa_offset 16
 6651              	.LVL772:
 6652 00a3 415D     		popq	%r13
 6653              		.cfi_def_cfa_offset 8
 6654              	.LVL773:
 6655 00a5 C3       		ret
 6656              	.LVL774:
 6657              	.L652:
 6658              		.cfi_restore_state
 6659 00a6 E8000000 		call	__stack_chk_fail
 6659      00
 6660              	.LVL775:
 6661              		.cfi_endproc
 6662              	.LFE92:
 6664              		.section	.text.unlikely.png_write_pHYs
 6665              	.LCOLDE87:
 6666              		.section	.text.png_write_pHYs
 6667              	.LHOTE87:
 6668              		.section	.rodata.str1.8
 6669 051e 0000     		.align 8
 6670              	.LC88:
 6671 0520 496E7661 		.string	"Invalid time specified for tIME chunk"
 6671      6C696420 
 6671      74696D65 
 6671      20737065 
 6671      63696669 
 6672              		.section	.text.unlikely.png_write_tIME,"ax",@progbits
 6673              	.LCOLDB89:
 6674              		.section	.text.png_write_tIME,"ax",@progbits
 6675              	.LHOTB89:
 6676              		.p2align 4,,15
 6677              		.globl	png_write_tIME
 6679              	png_write_tIME:
 6680              	.LFB93:
1917:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[7];
 6681              		.loc 1 1917 0
 6682              		.cfi_startproc
 6683              	.LVL776:
 6684 0000 55       		pushq	%rbp
 6685              		.cfi_def_cfa_offset 16
 6686              		.cfi_offset 6, -16
 6687 0001 53       		pushq	%rbx
 6688              		.cfi_def_cfa_offset 24
 6689              		.cfi_offset 3, -24
 6690 0002 4883EC18 		subq	$24, %rsp
 6691              		.cfi_def_cfa_offset 48
1917:fltk-1.3.4-1/png/pngwutil.c ****    png_byte buf[7];
 6692              		.loc 1 1917 0
 6693 0006 64488B04 		movq	%fs:40, %rax
 6693      25280000 
 6693      00
 6694 000f 48894424 		movq	%rax, 8(%rsp)
 6694      08
 6695 0014 31C0     		xorl	%eax, %eax
1922:fltk-1.3.4-1/png/pngwutil.c ****        mod_time->day    > 31 || mod_time->day    < 1 ||
 6696              		.loc 1 1922 0
 6697 0016 0FB64602 		movzbl	2(%rsi), %eax
 6698 001a 8D50FF   		leal	-1(%rax), %edx
 6699 001d 80FA0B   		cmpb	$11, %dl
 6700 0020 775E     		ja	.L654
1923:fltk-1.3.4-1/png/pngwutil.c ****        mod_time->hour   > 23 || mod_time->second > 60)
 6701              		.loc 1 1923 0 discriminator 1
 6702 0022 0FB65603 		movzbl	3(%rsi), %edx
 6703 0026 8D4AFF   		leal	-1(%rdx), %ecx
 6704 0029 80F91E   		cmpb	$30, %cl
 6705 002c 7752     		ja	.L654
1924:fltk-1.3.4-1/png/pngwutil.c ****    {
 6706              		.loc 1 1924 0 discriminator 1
 6707 002e 0FB64E04 		movzbl	4(%rsi), %ecx
1923:fltk-1.3.4-1/png/pngwutil.c ****        mod_time->hour   > 23 || mod_time->second > 60)
 6708              		.loc 1 1923 0 discriminator 1
 6709 0032 80F917   		cmpb	$23, %cl
 6710 0035 7749     		ja	.L654
1924:fltk-1.3.4-1/png/pngwutil.c ****    {
 6711              		.loc 1 1924 0
 6712 0037 440FB646 		movzbl	6(%rsi), %r8d
 6712      06
 6713 003c 4180F83C 		cmpb	$60, %r8b
 6714 0040 773E     		ja	.L654
1930:fltk-1.3.4-1/png/pngwutil.c ****    buf[2] = mod_time->month;
 6715              		.loc 1 1930 0
 6716 0042 0FB71E   		movzwl	(%rsi), %ebx
 6717              	.LVL777:
1931:fltk-1.3.4-1/png/pngwutil.c ****    buf[3] = mod_time->day;
 6718              		.loc 1 1931 0
 6719 0045 88442402 		movb	%al, 2(%rsp)
1934:fltk-1.3.4-1/png/pngwutil.c ****    buf[6] = mod_time->second;
 6720              		.loc 1 1934 0
 6721 0049 0FB64605 		movzbl	5(%rsi), %eax
1932:fltk-1.3.4-1/png/pngwutil.c ****    buf[4] = mod_time->hour;
 6722              		.loc 1 1932 0
 6723 004d 88542403 		movb	%dl, 3(%rsp)
1937:fltk-1.3.4-1/png/pngwutil.c **** }
 6724              		.loc 1 1937 0
 6725 0051 BE454D49 		movl	$1950960965, %esi
 6725      74
 6726              	.LVL778:
1933:fltk-1.3.4-1/png/pngwutil.c ****    buf[5] = mod_time->minute;
 6727              		.loc 1 1933 0
 6728 0056 884C2404 		movb	%cl, 4(%rsp)
1937:fltk-1.3.4-1/png/pngwutil.c **** }
 6729              		.loc 1 1937 0
 6730 005a 4889E2   		movq	%rsp, %rdx
 6731 005d B9070000 		movl	$7, %ecx
 6731      00
1935:fltk-1.3.4-1/png/pngwutil.c **** 
 6732              		.loc 1 1935 0
 6733 0062 44884424 		movb	%r8b, 6(%rsp)
 6733      06
 6734              	.LBB515:
 6735              	.LBB516:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 6736              		.loc 1 39 0
 6737 0067 0FB6EF   		movzbl	%bh, %ebp
  40:fltk-1.3.4-1/png/pngwutil.c **** }
 6738              		.loc 1 40 0
 6739 006a 885C2401 		movb	%bl, 1(%rsp)
 6740              	.LVL779:
  39:fltk-1.3.4-1/png/pngwutil.c ****    buf[1] = (png_byte)(i & 0xff);
 6741              		.loc 1 39 0
 6742 006e 40882C24 		movb	%bpl, (%rsp)
 6743              	.LBE516:
 6744              	.LBE515:
1934:fltk-1.3.4-1/png/pngwutil.c ****    buf[6] = mod_time->second;
 6745              		.loc 1 1934 0
 6746 0072 88442405 		movb	%al, 5(%rsp)
1937:fltk-1.3.4-1/png/pngwutil.c **** }
 6747              		.loc 1 1937 0
 6748 0076 E8000000 		call	png_write_complete_chunk
 6748      00
 6749              	.LVL780:
 6750 007b EB0D     		jmp	.L653
 6751              	.LVL781:
 6752 007d 0F1F00   		.p2align 4,,10
 6753              		.p2align 3
 6754              	.L654:
1926:fltk-1.3.4-1/png/pngwutil.c ****       return;
 6755              		.loc 1 1926 0
 6756 0080 BE000000 		movl	$.LC88, %esi
 6756      00
 6757              	.LVL782:
 6758 0085 E8000000 		call	png_warning
 6758      00
 6759              	.LVL783:
 6760              	.L653:
1938:fltk-1.3.4-1/png/pngwutil.c **** #endif
 6761              		.loc 1 1938 0
 6762 008a 488B4424 		movq	8(%rsp), %rax
 6762      08
 6763 008f 64483304 		xorq	%fs:40, %rax
 6763      25280000 
 6763      00
 6764 0098 7507     		jne	.L659
 6765 009a 4883C418 		addq	$24, %rsp
 6766              		.cfi_remember_state
 6767              		.cfi_def_cfa_offset 24
 6768 009e 5B       		popq	%rbx
 6769              		.cfi_def_cfa_offset 16
 6770 009f 5D       		popq	%rbp
 6771              		.cfi_def_cfa_offset 8
 6772 00a0 C3       		ret
 6773              	.L659:
 6774              		.cfi_restore_state
 6775 00a1 E8000000 		call	__stack_chk_fail
 6775      00
 6776              	.LVL784:
 6777              		.cfi_endproc
 6778              	.LFE93:
 6780              		.section	.text.unlikely.png_write_tIME
 6781              	.LCOLDE89:
 6782              		.section	.text.png_write_tIME
 6783              	.LHOTE89:
 6784              		.section	.text.unlikely.png_write_start_row,"ax",@progbits
 6785              	.LCOLDB90:
 6786              		.section	.text.png_write_start_row,"ax",@progbits
 6787              	.LHOTB90:
 6788              		.p2align 4,,15
 6789              		.globl	png_write_start_row
 6791              	png_write_start_row:
 6792              	.LFB94:
1944:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_INTERLACING_SUPPORTED
 6793              		.loc 1 1944 0
 6794              		.cfi_startproc
 6795              	.LVL785:
 6796 0000 55       		pushq	%rbp
 6797              		.cfi_def_cfa_offset 16
 6798              		.cfi_offset 6, -16
 6799 0001 53       		pushq	%rbx
 6800              		.cfi_def_cfa_offset 24
 6801              		.cfi_offset 3, -24
 6802 0002 4889FB   		movq	%rdi, %rbx
 6803 0005 4883EC08 		subq	$8, %rsp
 6804              		.cfi_def_cfa_offset 32
1966:fltk-1.3.4-1/png/pngwutil.c ****    buf_size = PNG_ROWBYTES(usr_pixel_depth, png_ptr->width) + 1;
 6805              		.loc 1 1966 0
 6806 0009 0FB6977C 		movzbl	636(%rdi), %edx
 6806      020000
 6807 0010 0FB68779 		movzbl	633(%rdi), %eax
 6807      020000
 6808 0017 0FAFC2   		imull	%edx, %eax
 6809              	.LVL786:
1967:fltk-1.3.4-1/png/pngwutil.c **** 
 6810              		.loc 1 1967 0
 6811 001a 83F807   		cmpl	$7, %eax
 6812 001d 0F8E8D00 		jle	.L661
 6812      0000
1967:fltk-1.3.4-1/png/pngwutil.c **** 
 6813              		.loc 1 1967 0 is_stmt 0 discriminator 1
 6814 0023 8B97F801 		movl	504(%rdi), %edx
 6814      0000
 6815 0029 4863E8   		movslq	%eax, %rbp
 6816 002c 48C1ED03 		shrq	$3, %rbp
 6817 0030 480FAFEA 		imulq	%rdx, %rbp
 6818 0034 4883C501 		addq	$1, %rbp
 6819              	.L662:
 6820              	.LVL787:
1970:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->maximum_pixel_depth = (png_byte)usr_pixel_depth;
 6821              		.loc 1 1970 0 is_stmt 1 discriminator 4
 6822 0038 0FB6937A 		movzbl	634(%rbx), %edx
 6822      020000
1971:fltk-1.3.4-1/png/pngwutil.c **** 
 6823              		.loc 1 1971 0 discriminator 4
 6824 003f 88837E02 		movb	%al, 638(%rbx)
 6824      0000
1974:fltk-1.3.4-1/png/pngwutil.c **** 
 6825              		.loc 1 1974 0 discriminator 4
 6826 0045 4889EE   		movq	%rbp, %rsi
 6827 0048 4889DF   		movq	%rbx, %rdi
 6828              	.LVL788:
1970:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->maximum_pixel_depth = (png_byte)usr_pixel_depth;
 6829              		.loc 1 1970 0 discriminator 4
 6830 004b 88937F02 		movb	%dl, 639(%rbx)
 6830      0000
1974:fltk-1.3.4-1/png/pngwutil.c **** 
 6831              		.loc 1 1974 0 discriminator 4
 6832 0051 E8000000 		call	png_malloc
 6832      00
 6833              	.LVL789:
 6834 0056 48898328 		movq	%rax, 552(%rbx)
 6834      020000
1976:fltk-1.3.4-1/png/pngwutil.c **** 
 6835              		.loc 1 1976 0 discriminator 4
 6836 005d C60000   		movb	$0, (%rax)
1980:fltk-1.3.4-1/png/pngwutil.c ****    {
 6837              		.loc 1 1980 0 discriminator 4
 6838 0060 0FB68376 		movzbl	630(%rbx), %eax
 6838      020000
 6839 0067 A810     		testb	$16, %al
 6840 0069 0F85E100 		jne	.L681
 6840      0000
 6841              	.L663:
1988:fltk-1.3.4-1/png/pngwutil.c ****       (PNG_FILTER_AVG | PNG_FILTER_UP | PNG_FILTER_PAETH)) != 0)
 6842              		.loc 1 1988 0
 6843 006f A8E0     		testb	$-32, %al
 6844 0071 0F858900 		jne	.L682
 6844      0000
 6845              	.L665:
2022:fltk-1.3.4-1/png/pngwutil.c ****    {
 6846              		.loc 1 2022 0
 6847 0077 80BB7402 		cmpb	$0, 628(%rbx)
 6847      000000
 6848 007e 7409     		je	.L669
2024:fltk-1.3.4-1/png/pngwutil.c ****       {
 6849              		.loc 1 2024 0
 6850 0080 F6833401 		testb	$2, 308(%rbx)
 6850      000002
 6851 0087 7447     		je	.L683
 6852              	.L669:
2035:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->usr_width = png_ptr->width;
 6853              		.loc 1 2035 0
 6854 0089 8B83FC01 		movl	508(%rbx), %eax
 6854      0000
 6855 008f 89830002 		movl	%eax, 512(%rbx)
 6855      0000
2036:fltk-1.3.4-1/png/pngwutil.c ****       }
 6856              		.loc 1 2036 0
 6857 0095 8B83F801 		movl	504(%rbx), %eax
 6857      0000
 6858 009b 89830402 		movl	%eax, 516(%rbx)
 6858      0000
2046:fltk-1.3.4-1/png/pngwutil.c **** 
 6859              		.loc 1 2046 0
 6860 00a1 4883C408 		addq	$8, %rsp
 6861              		.cfi_remember_state
 6862              		.cfi_def_cfa_offset 24
 6863 00a5 5B       		popq	%rbx
 6864              		.cfi_def_cfa_offset 16
 6865              	.LVL790:
 6866 00a6 5D       		popq	%rbp
 6867              		.cfi_def_cfa_offset 8
 6868              	.LVL791:
 6869 00a7 C3       		ret
 6870              	.LVL792:
 6871 00a8 0F1F8400 		.p2align 4,,10
 6871      00000000 
 6872              		.p2align 3
 6873              	.L661:
 6874              		.cfi_restore_state
1967:fltk-1.3.4-1/png/pngwutil.c **** 
 6875              		.loc 1 1967 0 discriminator 2
 6876 00b0 8BAFF801 		movl	504(%rdi), %ebp
 6876      0000
 6877 00b6 4863D0   		movslq	%eax, %rdx
 6878 00b9 480FAFEA 		imulq	%rdx, %rbp
 6879 00bd 4883C507 		addq	$7, %rbp
 6880 00c1 48C1ED03 		shrq	$3, %rbp
 6881 00c5 4883C501 		addq	$1, %rbp
 6882 00c9 E96AFFFF 		jmp	.L662
 6882      FF
 6883              	.LVL793:
 6884 00ce 6690     		.p2align 4,,10
 6885              		.p2align 3
 6886              	.L683:
2026:fltk-1.3.4-1/png/pngwutil.c ****              png_pass_ystart[0]) / png_pass_yinc[0];
 6887              		.loc 1 2026 0
 6888 00d0 8B83FC01 		movl	508(%rbx), %eax
 6888      0000
 6889 00d6 83C007   		addl	$7, %eax
 6890 00d9 C1E803   		shrl	$3, %eax
 6891 00dc 89830002 		movl	%eax, 512(%rbx)
 6891      0000
2029:fltk-1.3.4-1/png/pngwutil.c ****              png_pass_start[0]) / png_pass_inc[0];
 6892              		.loc 1 2029 0
 6893 00e2 8B83F801 		movl	504(%rbx), %eax
 6893      0000
 6894 00e8 83C007   		addl	$7, %eax
 6895 00eb C1E803   		shrl	$3, %eax
 6896 00ee 89830402 		movl	%eax, 516(%rbx)
 6896      0000
2046:fltk-1.3.4-1/png/pngwutil.c **** 
 6897              		.loc 1 2046 0
 6898 00f4 4883C408 		addq	$8, %rsp
 6899              		.cfi_remember_state
 6900              		.cfi_def_cfa_offset 24
 6901 00f8 5B       		popq	%rbx
 6902              		.cfi_def_cfa_offset 16
 6903              	.LVL794:
 6904 00f9 5D       		popq	%rbp
 6905              		.cfi_def_cfa_offset 8
 6906              	.LVL795:
 6907 00fa C3       		ret
 6908              	.LVL796:
 6909 00fb 0F1F4400 		.p2align 4,,10
 6909      00
 6910              		.p2align 3
 6911              	.L682:
 6912              		.cfi_restore_state
1992:fltk-1.3.4-1/png/pngwutil.c **** 
 6913              		.loc 1 1992 0
 6914 0100 4889EE   		movq	%rbp, %rsi
 6915 0103 4889DF   		movq	%rbx, %rdi
 6916 0106 E8000000 		call	png_calloc
 6916      00
 6917              	.LVL797:
 6918 010b 48898320 		movq	%rax, 544(%rbx)
 6918      020000
1994:fltk-1.3.4-1/png/pngwutil.c ****       {
 6919              		.loc 1 1994 0
 6920 0112 0FB68376 		movzbl	630(%rbx), %eax
 6920      020000
 6921 0119 A820     		testb	$32, %al
 6922 011b 0F858F00 		jne	.L684
 6922      0000
 6923              	.L666:
2002:fltk-1.3.4-1/png/pngwutil.c ****       {
 6924              		.loc 1 2002 0
 6925 0121 A840     		testb	$64, %al
 6926 0123 755B     		jne	.L685
 6927              	.L667:
2010:fltk-1.3.4-1/png/pngwutil.c ****       {
 6928              		.loc 1 2010 0
 6929 0125 84C0     		testb	%al, %al
 6930 0127 0F894AFF 		jns	.L665
 6930      FFFF
2012:fltk-1.3.4-1/png/pngwutil.c ****              png_ptr->rowbytes + 1);
 6931              		.loc 1 2012 0
 6932 012d 488B8308 		movq	520(%rbx), %rax
 6932      020000
 6933 0134 4889DF   		movq	%rbx, %rdi
 6934 0137 488D7001 		leaq	1(%rax), %rsi
 6935 013b E8000000 		call	png_malloc
 6935      00
 6936              	.LVL798:
 6937 0140 48898348 		movq	%rax, 584(%rbx)
 6937      020000
2015:fltk-1.3.4-1/png/pngwutil.c ****       }
 6938              		.loc 1 2015 0
 6939 0147 C60004   		movb	$4, (%rax)
 6940 014a E928FFFF 		jmp	.L665
 6940      FF
 6941 014f 90       		.p2align 4,,10
 6942              		.p2align 3
 6943              	.L681:
1982:fltk-1.3.4-1/png/pngwutil.c **** 
 6944              		.loc 1 1982 0
 6945 0150 488B8308 		movq	520(%rbx), %rax
 6945      020000
 6946 0157 4889DF   		movq	%rbx, %rdi
 6947 015a 488D7001 		leaq	1(%rax), %rsi
 6948 015e E8000000 		call	png_malloc
 6948      00
 6949              	.LVL799:
 6950 0163 48898330 		movq	%rax, 560(%rbx)
 6950      020000
1984:fltk-1.3.4-1/png/pngwutil.c ****    }
 6951              		.loc 1 1984 0
 6952 016a C60001   		movb	$1, (%rax)
 6953 016d 0FB68376 		movzbl	630(%rbx), %eax
 6953      020000
 6954 0174 E9F6FEFF 		jmp	.L663
 6954      FF
 6955 0179 0F1F8000 		.p2align 4,,10
 6955      000000
 6956              		.p2align 3
 6957              	.L685:
2004:fltk-1.3.4-1/png/pngwutil.c ****              png_ptr->rowbytes + 1);
 6958              		.loc 1 2004 0
 6959 0180 488B8308 		movq	520(%rbx), %rax
 6959      020000
 6960 0187 4889DF   		movq	%rbx, %rdi
 6961 018a 488D7001 		leaq	1(%rax), %rsi
 6962 018e E8000000 		call	png_malloc
 6962      00
 6963              	.LVL800:
 6964 0193 48898340 		movq	%rax, 576(%rbx)
 6964      020000
2007:fltk-1.3.4-1/png/pngwutil.c ****       }
 6965              		.loc 1 2007 0
 6966 019a C60003   		movb	$3, (%rax)
 6967 019d 0FB68376 		movzbl	630(%rbx), %eax
 6967      020000
 6968 01a4 E97CFFFF 		jmp	.L667
 6968      FF
 6969 01a9 0F1F8000 		.p2align 4,,10
 6969      000000
 6970              		.p2align 3
 6971              	.L684:
1996:fltk-1.3.4-1/png/pngwutil.c ****             png_ptr->rowbytes + 1);
 6972              		.loc 1 1996 0
 6973 01b0 488B8308 		movq	520(%rbx), %rax
 6973      020000
 6974 01b7 4889DF   		movq	%rbx, %rdi
 6975 01ba 488D7001 		leaq	1(%rax), %rsi
 6976 01be E8000000 		call	png_malloc
 6976      00
 6977              	.LVL801:
 6978 01c3 48898338 		movq	%rax, 568(%rbx)
 6978      020000
1999:fltk-1.3.4-1/png/pngwutil.c ****       }
 6979              		.loc 1 1999 0
 6980 01ca C60002   		movb	$2, (%rax)
 6981 01cd 0FB68376 		movzbl	630(%rbx), %eax
 6981      020000
 6982 01d4 E948FFFF 		jmp	.L666
 6982      FF
 6983              		.cfi_endproc
 6984              	.LFE94:
 6986              		.section	.text.unlikely.png_write_start_row
 6987              	.LCOLDE90:
 6988              		.section	.text.png_write_start_row
 6989              	.LHOTE90:
 6990              		.section	.text.unlikely.png_write_finish_row,"ax",@progbits
 6991              	.LCOLDB91:
 6992              		.section	.text.png_write_finish_row,"ax",@progbits
 6993              	.LHOTB91:
 6994              		.p2align 4,,15
 6995              		.globl	png_write_finish_row
 6997              	png_write_finish_row:
 6998              	.LFB95:
2051:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_INTERLACING_SUPPORTED
 6999              		.loc 1 2051 0
 7000              		.cfi_startproc
 7001              	.LVL802:
2071:fltk-1.3.4-1/png/pngwutil.c **** 
 7002              		.loc 1 2071 0
 7003 0000 8B871402 		movl	532(%rdi), %eax
 7003      0000
 7004 0006 83C001   		addl	$1, %eax
2074:fltk-1.3.4-1/png/pngwutil.c ****       return;
 7005              		.loc 1 2074 0
 7006 0009 3B870002 		cmpl	512(%rdi), %eax
 7006      0000
2071:fltk-1.3.4-1/png/pngwutil.c **** 
 7007              		.loc 1 2071 0
 7008 000f 89871402 		movl	%eax, 532(%rdi)
 7008      0000
2074:fltk-1.3.4-1/png/pngwutil.c ****       return;
 7009              		.loc 1 2074 0
 7010 0015 7209     		jb	.L686
 7011 0017 E9000000 		jmp	png_write_finish_row.part.5
 7011      00
 7012              	.LVL803:
 7013 001c 0F1F4000 		.p2align 4,,10
 7014              		.p2align 3
 7015              	.L686:
 7016 0020 F3C3     		rep ret
 7017              		.cfi_endproc
 7018              	.LFE95:
 7020              		.section	.text.unlikely.png_write_finish_row
 7021              	.LCOLDE91:
 7022              		.section	.text.png_write_finish_row
 7023              	.LHOTE91:
 7024              		.section	.text.unlikely.png_do_write_interlace,"ax",@progbits
 7025              	.LCOLDB92:
 7026              		.section	.text.png_do_write_interlace,"ax",@progbits
 7027              	.LHOTB92:
 7028              		.p2align 4,,15
 7029              		.globl	png_do_write_interlace
 7031              	png_do_write_interlace:
 7032              	.LFB96:
2130:fltk-1.3.4-1/png/pngwutil.c **** }
2131:fltk-1.3.4-1/png/pngwutil.c **** 
2132:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_INTERLACING_SUPPORTED
2133:fltk-1.3.4-1/png/pngwutil.c **** /* Pick out the correct pixels for the interlace pass.
2134:fltk-1.3.4-1/png/pngwutil.c ****  * The basic idea here is to go through the row with a source
2135:fltk-1.3.4-1/png/pngwutil.c ****  * pointer and a destination pointer (sp and dp), and copy the
2136:fltk-1.3.4-1/png/pngwutil.c ****  * correct pixels for the pass.  As the row gets compacted,
2137:fltk-1.3.4-1/png/pngwutil.c ****  * sp will always be >= dp, so we should never overwrite anything.
2138:fltk-1.3.4-1/png/pngwutil.c ****  * See the default: case for the easiest code to understand.
2139:fltk-1.3.4-1/png/pngwutil.c ****  */
2140:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
2141:fltk-1.3.4-1/png/pngwutil.c **** png_do_write_interlace(png_row_infop row_info, png_bytep row, int pass)
2142:fltk-1.3.4-1/png/pngwutil.c **** {
 7033              		.loc 1 2142 0
 7034              		.cfi_startproc
 7035              	.LVL804:
2143:fltk-1.3.4-1/png/pngwutil.c ****    /* Arrays to facilitate easy interlacing - use pass (0 - 6) as index */
2144:fltk-1.3.4-1/png/pngwutil.c **** 
2145:fltk-1.3.4-1/png/pngwutil.c ****    /* Start of interlace block */
2146:fltk-1.3.4-1/png/pngwutil.c ****    static PNG_CONST png_byte png_pass_start[7] = {0, 4, 0, 2, 0, 1, 0};
2147:fltk-1.3.4-1/png/pngwutil.c **** 
2148:fltk-1.3.4-1/png/pngwutil.c ****    /* Offset to next interlace block */
2149:fltk-1.3.4-1/png/pngwutil.c ****    static PNG_CONST png_byte  png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1};
2150:fltk-1.3.4-1/png/pngwutil.c **** 
2151:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_do_write_interlace");
2152:fltk-1.3.4-1/png/pngwutil.c **** 
2153:fltk-1.3.4-1/png/pngwutil.c ****    /* We don't have to do anything on the last pass (6) */
2154:fltk-1.3.4-1/png/pngwutil.c ****    if (pass < 6)
 7036              		.loc 1 2154 0
 7037 0000 83FA05   		cmpl	$5, %edx
 7038 0003 0F8F5C01 		jg	.L735
 7038      0000
2155:fltk-1.3.4-1/png/pngwutil.c ****    {
2156:fltk-1.3.4-1/png/pngwutil.c ****       /* Each pixel depth is handled separately */
2157:fltk-1.3.4-1/png/pngwutil.c ****       switch (row_info->pixel_depth)
 7039              		.loc 1 2157 0
 7040 0009 0FB64F13 		movzbl	19(%rdi), %ecx
2142:fltk-1.3.4-1/png/pngwutil.c ****    /* Arrays to facilitate easy interlacing - use pass (0 - 6) as index */
 7041              		.loc 1 2142 0
 7042 000d 4157     		pushq	%r15
 7043              		.cfi_def_cfa_offset 16
 7044              		.cfi_offset 15, -16
 7045 000f 4156     		pushq	%r14
 7046              		.cfi_def_cfa_offset 24
 7047              		.cfi_offset 14, -24
 7048 0011 4155     		pushq	%r13
 7049              		.cfi_def_cfa_offset 32
 7050              		.cfi_offset 13, -32
 7051 0013 4154     		pushq	%r12
 7052              		.cfi_def_cfa_offset 40
 7053              		.cfi_offset 12, -40
 7054 0015 55       		pushq	%rbp
 7055              		.cfi_def_cfa_offset 48
 7056              		.cfi_offset 6, -48
 7057 0016 53       		pushq	%rbx
 7058              		.cfi_def_cfa_offset 56
 7059              		.cfi_offset 3, -56
 7060              		.loc 1 2157 0
 7061 0017 80F902   		cmpb	$2, %cl
 7062 001a 0F848001 		je	.L691
 7062      0000
 7063 0020 80F904   		cmpb	$4, %cl
 7064 0023 0F849F02 		je	.L692
 7064      0000
 7065 0029 80F901   		cmpb	$1, %cl
 7066 002c 0F840602 		je	.L737
 7066      0000
 7067              	.LBB517:
2158:fltk-1.3.4-1/png/pngwutil.c ****       {
2159:fltk-1.3.4-1/png/pngwutil.c ****          case 1:
2160:fltk-1.3.4-1/png/pngwutil.c ****          {
2161:fltk-1.3.4-1/png/pngwutil.c ****             png_bytep sp;
2162:fltk-1.3.4-1/png/pngwutil.c ****             png_bytep dp;
2163:fltk-1.3.4-1/png/pngwutil.c ****             int shift;
2164:fltk-1.3.4-1/png/pngwutil.c ****             int d;
2165:fltk-1.3.4-1/png/pngwutil.c ****             int value;
2166:fltk-1.3.4-1/png/pngwutil.c ****             png_uint_32 i;
2167:fltk-1.3.4-1/png/pngwutil.c ****             png_uint_32 row_width = row_info->width;
2168:fltk-1.3.4-1/png/pngwutil.c **** 
2169:fltk-1.3.4-1/png/pngwutil.c ****             dp = row;
2170:fltk-1.3.4-1/png/pngwutil.c ****             d = 0;
2171:fltk-1.3.4-1/png/pngwutil.c ****             shift = 7;
2172:fltk-1.3.4-1/png/pngwutil.c **** 
2173:fltk-1.3.4-1/png/pngwutil.c ****             for (i = png_pass_start[pass]; i < row_width;
2174:fltk-1.3.4-1/png/pngwutil.c ****                i += png_pass_inc[pass])
2175:fltk-1.3.4-1/png/pngwutil.c ****             {
2176:fltk-1.3.4-1/png/pngwutil.c ****                sp = row + (png_size_t)(i >> 3);
2177:fltk-1.3.4-1/png/pngwutil.c ****                value = (int)(*sp >> (7 - (int)(i & 0x07))) & 0x01;
2178:fltk-1.3.4-1/png/pngwutil.c ****                d |= (value << shift);
2179:fltk-1.3.4-1/png/pngwutil.c **** 
2180:fltk-1.3.4-1/png/pngwutil.c ****                if (shift == 0)
2181:fltk-1.3.4-1/png/pngwutil.c ****                {
2182:fltk-1.3.4-1/png/pngwutil.c ****                   shift = 7;
2183:fltk-1.3.4-1/png/pngwutil.c ****                   *dp++ = (png_byte)d;
2184:fltk-1.3.4-1/png/pngwutil.c ****                   d = 0;
2185:fltk-1.3.4-1/png/pngwutil.c ****                }
2186:fltk-1.3.4-1/png/pngwutil.c **** 
2187:fltk-1.3.4-1/png/pngwutil.c ****                else
2188:fltk-1.3.4-1/png/pngwutil.c ****                   shift--;
2189:fltk-1.3.4-1/png/pngwutil.c **** 
2190:fltk-1.3.4-1/png/pngwutil.c ****             }
2191:fltk-1.3.4-1/png/pngwutil.c ****             if (shift != 7)
2192:fltk-1.3.4-1/png/pngwutil.c ****                *dp = (png_byte)d;
2193:fltk-1.3.4-1/png/pngwutil.c **** 
2194:fltk-1.3.4-1/png/pngwutil.c ****             break;
2195:fltk-1.3.4-1/png/pngwutil.c ****          }
2196:fltk-1.3.4-1/png/pngwutil.c **** 
2197:fltk-1.3.4-1/png/pngwutil.c ****          case 2:
2198:fltk-1.3.4-1/png/pngwutil.c ****          {
2199:fltk-1.3.4-1/png/pngwutil.c ****             png_bytep sp;
2200:fltk-1.3.4-1/png/pngwutil.c ****             png_bytep dp;
2201:fltk-1.3.4-1/png/pngwutil.c ****             int shift;
2202:fltk-1.3.4-1/png/pngwutil.c ****             int d;
2203:fltk-1.3.4-1/png/pngwutil.c ****             int value;
2204:fltk-1.3.4-1/png/pngwutil.c ****             png_uint_32 i;
2205:fltk-1.3.4-1/png/pngwutil.c ****             png_uint_32 row_width = row_info->width;
2206:fltk-1.3.4-1/png/pngwutil.c **** 
2207:fltk-1.3.4-1/png/pngwutil.c ****             dp = row;
2208:fltk-1.3.4-1/png/pngwutil.c ****             shift = 6;
2209:fltk-1.3.4-1/png/pngwutil.c ****             d = 0;
2210:fltk-1.3.4-1/png/pngwutil.c **** 
2211:fltk-1.3.4-1/png/pngwutil.c ****             for (i = png_pass_start[pass]; i < row_width;
2212:fltk-1.3.4-1/png/pngwutil.c ****                i += png_pass_inc[pass])
2213:fltk-1.3.4-1/png/pngwutil.c ****             {
2214:fltk-1.3.4-1/png/pngwutil.c ****                sp = row + (png_size_t)(i >> 2);
2215:fltk-1.3.4-1/png/pngwutil.c ****                value = (*sp >> ((3 - (int)(i & 0x03)) << 1)) & 0x03;
2216:fltk-1.3.4-1/png/pngwutil.c ****                d |= (value << shift);
2217:fltk-1.3.4-1/png/pngwutil.c **** 
2218:fltk-1.3.4-1/png/pngwutil.c ****                if (shift == 0)
2219:fltk-1.3.4-1/png/pngwutil.c ****                {
2220:fltk-1.3.4-1/png/pngwutil.c ****                   shift = 6;
2221:fltk-1.3.4-1/png/pngwutil.c ****                   *dp++ = (png_byte)d;
2222:fltk-1.3.4-1/png/pngwutil.c ****                   d = 0;
2223:fltk-1.3.4-1/png/pngwutil.c ****                }
2224:fltk-1.3.4-1/png/pngwutil.c **** 
2225:fltk-1.3.4-1/png/pngwutil.c ****                else
2226:fltk-1.3.4-1/png/pngwutil.c ****                   shift -= 2;
2227:fltk-1.3.4-1/png/pngwutil.c ****             }
2228:fltk-1.3.4-1/png/pngwutil.c ****             if (shift != 6)
2229:fltk-1.3.4-1/png/pngwutil.c ****                *dp = (png_byte)d;
2230:fltk-1.3.4-1/png/pngwutil.c **** 
2231:fltk-1.3.4-1/png/pngwutil.c ****             break;
2232:fltk-1.3.4-1/png/pngwutil.c ****          }
2233:fltk-1.3.4-1/png/pngwutil.c **** 
2234:fltk-1.3.4-1/png/pngwutil.c ****          case 4:
2235:fltk-1.3.4-1/png/pngwutil.c ****          {
2236:fltk-1.3.4-1/png/pngwutil.c ****             png_bytep sp;
2237:fltk-1.3.4-1/png/pngwutil.c ****             png_bytep dp;
2238:fltk-1.3.4-1/png/pngwutil.c ****             int shift;
2239:fltk-1.3.4-1/png/pngwutil.c ****             int d;
2240:fltk-1.3.4-1/png/pngwutil.c ****             int value;
2241:fltk-1.3.4-1/png/pngwutil.c ****             png_uint_32 i;
2242:fltk-1.3.4-1/png/pngwutil.c ****             png_uint_32 row_width = row_info->width;
2243:fltk-1.3.4-1/png/pngwutil.c **** 
2244:fltk-1.3.4-1/png/pngwutil.c ****             dp = row;
2245:fltk-1.3.4-1/png/pngwutil.c ****             shift = 4;
2246:fltk-1.3.4-1/png/pngwutil.c ****             d = 0;
2247:fltk-1.3.4-1/png/pngwutil.c ****             for (i = png_pass_start[pass]; i < row_width;
2248:fltk-1.3.4-1/png/pngwutil.c ****                 i += png_pass_inc[pass])
2249:fltk-1.3.4-1/png/pngwutil.c ****             {
2250:fltk-1.3.4-1/png/pngwutil.c ****                sp = row + (png_size_t)(i >> 1);
2251:fltk-1.3.4-1/png/pngwutil.c ****                value = (*sp >> ((1 - (int)(i & 0x01)) << 2)) & 0x0f;
2252:fltk-1.3.4-1/png/pngwutil.c ****                d |= (value << shift);
2253:fltk-1.3.4-1/png/pngwutil.c **** 
2254:fltk-1.3.4-1/png/pngwutil.c ****                if (shift == 0)
2255:fltk-1.3.4-1/png/pngwutil.c ****                {
2256:fltk-1.3.4-1/png/pngwutil.c ****                   shift = 4;
2257:fltk-1.3.4-1/png/pngwutil.c ****                   *dp++ = (png_byte)d;
2258:fltk-1.3.4-1/png/pngwutil.c ****                   d = 0;
2259:fltk-1.3.4-1/png/pngwutil.c ****                }
2260:fltk-1.3.4-1/png/pngwutil.c **** 
2261:fltk-1.3.4-1/png/pngwutil.c ****                else
2262:fltk-1.3.4-1/png/pngwutil.c ****                   shift -= 4;
2263:fltk-1.3.4-1/png/pngwutil.c ****             }
2264:fltk-1.3.4-1/png/pngwutil.c ****             if (shift != 4)
2265:fltk-1.3.4-1/png/pngwutil.c ****                *dp = (png_byte)d;
2266:fltk-1.3.4-1/png/pngwutil.c **** 
2267:fltk-1.3.4-1/png/pngwutil.c ****             break;
2268:fltk-1.3.4-1/png/pngwutil.c ****          }
2269:fltk-1.3.4-1/png/pngwutil.c **** 
2270:fltk-1.3.4-1/png/pngwutil.c ****          default:
2271:fltk-1.3.4-1/png/pngwutil.c ****          {
2272:fltk-1.3.4-1/png/pngwutil.c ****             png_bytep sp;
2273:fltk-1.3.4-1/png/pngwutil.c ****             png_bytep dp;
2274:fltk-1.3.4-1/png/pngwutil.c ****             png_uint_32 i;
2275:fltk-1.3.4-1/png/pngwutil.c ****             png_uint_32 row_width = row_info->width;
2276:fltk-1.3.4-1/png/pngwutil.c ****             png_size_t pixel_bytes;
2277:fltk-1.3.4-1/png/pngwutil.c **** 
2278:fltk-1.3.4-1/png/pngwutil.c ****             /* Start at the beginning */
2279:fltk-1.3.4-1/png/pngwutil.c ****             dp = row;
2280:fltk-1.3.4-1/png/pngwutil.c **** 
2281:fltk-1.3.4-1/png/pngwutil.c ****             /* Find out how many bytes each pixel takes up */
2282:fltk-1.3.4-1/png/pngwutil.c ****             pixel_bytes = (row_info->pixel_depth >> 3);
2283:fltk-1.3.4-1/png/pngwutil.c **** 
2284:fltk-1.3.4-1/png/pngwutil.c ****             /* Loop through the row, only looking at the pixels that matter */
2285:fltk-1.3.4-1/png/pngwutil.c ****             for (i = png_pass_start[pass]; i < row_width;
 7068              		.loc 1 2285 0
 7069 0032 4863D2   		movslq	%edx, %rdx
2275:fltk-1.3.4-1/png/pngwutil.c ****             png_size_t pixel_bytes;
 7070              		.loc 1 2275 0
 7071 0035 8B1F     		movl	(%rdi), %ebx
 7072              	.LVL805:
2282:fltk-1.3.4-1/png/pngwutil.c **** 
 7073              		.loc 1 2282 0
 7074 0037 4189C9   		movl	%ecx, %r9d
 7075              		.loc 1 2285 0
 7076 003a 440FB69A 		movzbl	png_pass_start.7105(%rdx), %r11d
 7076      00000000 
2282:fltk-1.3.4-1/png/pngwutil.c **** 
 7077              		.loc 1 2282 0
 7078 0042 41C0E903 		shrb	$3, %r9b
 7079 0046 440FB682 		movzbl	png_pass_inc.7106(%rdx), %r8d
 7079      00000000 
 7080 004e 450FB6C9 		movzbl	%r9b, %r9d
 7081              	.LVL806:
 7082              		.loc 1 2285 0
 7083 0052 4439DB   		cmpl	%r11d, %ebx
 7084 0055 0F86D800 		jbe	.L700
 7084      0000
 7085              	.LBB518:
 7086              	.LBB519:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 7087              		.loc 2 53 0
 7088 005b 4489C8   		movl	%r9d, %eax
 7089 005e 4589CF   		movl	%r9d, %r15d
 7090              	.LBE519:
 7091              	.LBE518:
 7092              		.loc 1 2285 0
 7093 0061 4489D9   		movl	%r11d, %ecx
 7094              	.LBB524:
 7095              	.LBB520:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 7096              		.loc 2 53 0
 7097 0064 83E002   		andl	$2, %eax
 7098              	.LBE520:
 7099              	.LBE524:
 7100              		.loc 1 2285 0
 7101 0067 4889F2   		movq	%rsi, %rdx
 7102              	.LVL807:
 7103              	.LBB525:
 7104              	.LBB521:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 7105              		.loc 2 53 0
 7106 006a 4589CD   		movl	%r9d, %r13d
 7107 006d 4183E704 		andl	$4, %r15d
 7108 0071 894424FC 		movl	%eax, -4(%rsp)
 7109 0075 EB3F     		jmp	.L720
 7110              	.LVL808:
 7111 0077 660F1F84 		.p2align 4,,10
 7111      00000000 
 7111      00
 7112              		.p2align 3
 7113              	.L740:
 7114 0080 4585FF   		testl	%r15d, %r15d
 7115 0083 0F85C702 		jne	.L738
 7115      0000
 7116 0089 4585C9   		testl	%r9d, %r9d
 7117 008c 741A     		je	.L713
 7118 008e 440FB610 		movzbl	(%rax), %r10d
 7119 0092 448812   		movb	%r10b, (%rdx)
 7120 0095 448B5424 		movl	-4(%rsp), %r10d
 7120      FC
 7121 009a 4585D2   		testl	%r10d, %r10d
 7122 009d 0F85C502 		jne	.L739
 7122      0000
 7123              	.LVL809:
 7124              		.p2align 4,,10
 7125 00a3 0F1F4400 		.p2align 3
 7125      00
 7126              	.L713:
 7127              	.LBE521:
 7128              	.LBE525:
2286:fltk-1.3.4-1/png/pngwutil.c ****                i += png_pass_inc[pass])
 7129              		.loc 1 2286 0
 7130 00a8 4401C1   		addl	%r8d, %ecx
 7131              	.LVL810:
2287:fltk-1.3.4-1/png/pngwutil.c ****             {
2288:fltk-1.3.4-1/png/pngwutil.c ****                /* Find out where the original pixel is */
2289:fltk-1.3.4-1/png/pngwutil.c ****                sp = row + (png_size_t)i * pixel_bytes;
2290:fltk-1.3.4-1/png/pngwutil.c **** 
2291:fltk-1.3.4-1/png/pngwutil.c ****                /* Move the pixel */
2292:fltk-1.3.4-1/png/pngwutil.c ****                if (dp != sp)
2293:fltk-1.3.4-1/png/pngwutil.c ****                   memcpy(dp, sp, pixel_bytes);
2294:fltk-1.3.4-1/png/pngwutil.c **** 
2295:fltk-1.3.4-1/png/pngwutil.c ****                /* Next pixel */
2296:fltk-1.3.4-1/png/pngwutil.c ****                dp += pixel_bytes;
 7132              		.loc 1 2296 0
 7133 00ab 4C01CA   		addq	%r9, %rdx
 7134              	.LVL811:
2285:fltk-1.3.4-1/png/pngwutil.c ****                i += png_pass_inc[pass])
 7135              		.loc 1 2285 0
 7136 00ae 39CB     		cmpl	%ecx, %ebx
 7137 00b0 0F867201 		jbe	.L736
 7137      0000
 7138              	.L720:
2289:fltk-1.3.4-1/png/pngwutil.c **** 
 7139              		.loc 1 2289 0
 7140 00b6 89C8     		movl	%ecx, %eax
 7141 00b8 490FAFC1 		imulq	%r9, %rax
 7142 00bc 4801F0   		addq	%rsi, %rax
 7143              	.LVL812:
2292:fltk-1.3.4-1/png/pngwutil.c ****                   memcpy(dp, sp, pixel_bytes);
 7144              		.loc 1 2292 0
 7145 00bf 4839D0   		cmpq	%rdx, %rax
 7146 00c2 74E4     		je	.L713
 7147              	.LVL813:
 7148              	.LBB526:
 7149              	.LBB522:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 7150              		.loc 2 53 0
 7151 00c4 4183F908 		cmpl	$8, %r9d
 7152 00c8 72B6     		jb	.L740
 7153 00ca 4C8B10   		movq	(%rax), %r10
 7154 00cd 488D6A08 		leaq	8(%rdx), %rbp
 7155 00d1 4883E5F8 		andq	$-8, %rbp
 7156 00d5 4C8912   		movq	%r10, (%rdx)
 7157 00d8 4E8B5428 		movq	-8(%rax,%r13), %r10
 7157      F8
 7158 00dd 4E89542A 		movq	%r10, -8(%rdx,%r13)
 7158      F8
 7159 00e2 4989D2   		movq	%rdx, %r10
 7160 00e5 4929EA   		subq	%rbp, %r10
 7161 00e8 4C29D0   		subq	%r10, %rax
 7162              	.LVL814:
 7163 00eb 4501CA   		addl	%r9d, %r10d
 7164 00ee 4183E2F8 		andl	$-8, %r10d
 7165 00f2 4183FA08 		cmpl	$8, %r10d
 7166 00f6 72B0     		jb	.L713
 7167 00f8 4183E2F8 		andl	$-8, %r10d
 7168 00fc 4531E4   		xorl	%r12d, %r12d
 7169 00ff 48895424 		movq	%rdx, -16(%rsp)
 7169      F0
 7170              	.LVL815:
 7171              	.L718:
 7172 0104 4589E6   		movl	%r12d, %r14d
 7173 0107 4183C408 		addl	$8, %r12d
 7174 010b 4A8B1430 		movq	(%rax,%r14), %rdx
 7175 010f 4539D4   		cmpl	%r10d, %r12d
 7176 0112 4A895435 		movq	%rdx, 0(%rbp,%r14)
 7176      00
 7177 0117 72EB     		jb	.L718
 7178 0119 488B5424 		movq	-16(%rsp), %rdx
 7178      F0
 7179 011e EB88     		jmp	.L713
 7180              	.LVL816:
 7181              		.p2align 4,,10
 7182              		.p2align 3
 7183              	.L741:
 7184              	.LBE522:
 7185              	.LBE526:
 7186              	.LBE517:
 7187              	.LBB528:
2228:fltk-1.3.4-1/png/pngwutil.c ****                *dp = (png_byte)d;
 7188              		.loc 1 2228 0
 7189 0120 4183F906 		cmpl	$6, %r9d
 7190 0124 0F84FE00 		je	.L736
 7190      0000
 7191              	.LVL817:
 7192              	.L711:
 7193              	.LBE528:
 7194              	.LBB529:
2265:fltk-1.3.4-1/png/pngwutil.c **** 
 7195              		.loc 1 2265 0
 7196 012a 885D00   		movb	%bl, 0(%rbp)
 7197 012d 0FB64F13 		movzbl	19(%rdi), %ecx
 7198 0131 8B1F     		movl	(%rdi), %ebx
 7199              	.L700:
 7200              	.LBE529:
2297:fltk-1.3.4-1/png/pngwutil.c ****             }
2298:fltk-1.3.4-1/png/pngwutil.c ****             break;
2299:fltk-1.3.4-1/png/pngwutil.c ****          }
2300:fltk-1.3.4-1/png/pngwutil.c ****       }
2301:fltk-1.3.4-1/png/pngwutil.c ****       /* Set new row width */
2302:fltk-1.3.4-1/png/pngwutil.c ****       row_info->width = (row_info->width +
2303:fltk-1.3.4-1/png/pngwutil.c ****           png_pass_inc[pass] - 1 -
2304:fltk-1.3.4-1/png/pngwutil.c ****           png_pass_start[pass]) /
 7201              		.loc 1 2304 0
 7202 0133 418D4418 		leal	-1(%r8,%rbx), %eax
 7202      FF
 7203 0138 31D2     		xorl	%edx, %edx
 7204 013a 4429D8   		subl	%r11d, %eax
 7205 013d 41F7F0   		divl	%r8d
2305:fltk-1.3.4-1/png/pngwutil.c ****           png_pass_inc[pass];
2306:fltk-1.3.4-1/png/pngwutil.c **** 
2307:fltk-1.3.4-1/png/pngwutil.c ****       row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth,
 7206              		.loc 1 2307 0
 7207 0140 80F907   		cmpb	$7, %cl
2304:fltk-1.3.4-1/png/pngwutil.c ****           png_pass_inc[pass];
 7208              		.loc 1 2304 0
 7209 0143 89C6     		movl	%eax, %esi
 7210              	.LVL818:
2302:fltk-1.3.4-1/png/pngwutil.c ****           png_pass_inc[pass] - 1 -
 7211              		.loc 1 2302 0
 7212 0145 8907     		movl	%eax, (%rdi)
 7213              		.loc 1 2307 0
 7214 0147 763F     		jbe	.L721
 7215              		.loc 1 2307 0 is_stmt 0 discriminator 1
 7216 0149 89CA     		movl	%ecx, %edx
 7217 014b 89C0     		movl	%eax, %eax
 7218 014d C0EA03   		shrb	$3, %dl
 7219 0150 0FB6D2   		movzbl	%dl, %edx
 7220 0153 480FAFC2 		imulq	%rdx, %rax
 7221              	.L722:
2308:fltk-1.3.4-1/png/pngwutil.c ****           row_info->width);
2309:fltk-1.3.4-1/png/pngwutil.c ****    }
2310:fltk-1.3.4-1/png/pngwutil.c **** }
 7222              		.loc 1 2310 0 is_stmt 1 discriminator 4
 7223 0157 5B       		popq	%rbx
 7224              		.cfi_restore 3
 7225              		.cfi_def_cfa_offset 48
 7226 0158 5D       		popq	%rbp
 7227              		.cfi_restore 6
 7228              		.cfi_def_cfa_offset 40
 7229 0159 415C     		popq	%r12
 7230              		.cfi_restore 12
 7231              		.cfi_def_cfa_offset 32
 7232 015b 415D     		popq	%r13
 7233              		.cfi_restore 13
 7234              		.cfi_def_cfa_offset 24
 7235 015d 415E     		popq	%r14
 7236              		.cfi_restore 14
 7237              		.cfi_def_cfa_offset 16
 7238 015f 415F     		popq	%r15
 7239              		.cfi_restore 15
 7240              		.cfi_def_cfa_offset 8
2307:fltk-1.3.4-1/png/pngwutil.c ****           row_info->width);
 7241              		.loc 1 2307 0 discriminator 4
 7242 0161 48894708 		movq	%rax, 8(%rdi)
 7243              	.L735:
 7244              		.loc 1 2310 0
 7245 0165 F3C3     		rep ret
 7246              	.LVL819:
 7247 0167 660F1F84 		.p2align 4,,10
 7247      00000000 
 7247      00
 7248              		.p2align 3
 7249              	.L695:
 7250              		.cfi_def_cfa_offset 56
 7251              		.cfi_offset 3, -56
 7252              		.cfi_offset 6, -48
 7253              		.cfi_offset 12, -40
 7254              		.cfi_offset 13, -32
 7255              		.cfi_offset 14, -24
 7256              		.cfi_offset 15, -16
2304:fltk-1.3.4-1/png/pngwutil.c ****           png_pass_inc[pass];
 7257              		.loc 1 2304 0
 7258 0170 438D4402 		leal	-1(%r10,%r8), %eax
 7258      FF
 7259 0175 31D2     		xorl	%edx, %edx
 7260 0177 4429D8   		subl	%r11d, %eax
 7261 017a 41F7F0   		divl	%r8d
 7262 017d 89C6     		movl	%eax, %esi
 7263              	.LVL820:
2302:fltk-1.3.4-1/png/pngwutil.c ****           png_pass_inc[pass] - 1 -
 7264              		.loc 1 2302 0
 7265 017f 8907     		movl	%eax, (%rdi)
 7266              		.p2align 4,,10
 7267 0181 0F1F8000 		.p2align 3
 7267      000000
 7268              	.L721:
2307:fltk-1.3.4-1/png/pngwutil.c ****           row_info->width);
 7269              		.loc 1 2307 0 discriminator 2
 7270 0188 89F0     		movl	%esi, %eax
 7271 018a 0FB6D1   		movzbl	%cl, %edx
 7272 018d 480FAFC2 		imulq	%rdx, %rax
 7273 0191 4883C007 		addq	$7, %rax
 7274 0195 48C1E803 		shrq	$3, %rax
 7275 0199 EBBC     		jmp	.L722
 7276              	.LVL821:
 7277 019b 0F1F4400 		.p2align 4,,10
 7277      00
 7278              		.p2align 3
 7279              	.L691:
 7280              	.LBB530:
2211:fltk-1.3.4-1/png/pngwutil.c ****                i += png_pass_inc[pass])
 7281              		.loc 1 2211 0
 7282 01a0 4863D2   		movslq	%edx, %rdx
2205:fltk-1.3.4-1/png/pngwutil.c **** 
 7283              		.loc 1 2205 0
 7284 01a3 448B17   		movl	(%rdi), %r10d
 7285              	.LVL822:
2211:fltk-1.3.4-1/png/pngwutil.c ****                i += png_pass_inc[pass])
 7286              		.loc 1 2211 0
 7287 01a6 440FB69A 		movzbl	png_pass_start.7105(%rdx), %r11d
 7287      00000000 
 7288              	.LVL823:
 7289 01ae 440FB682 		movzbl	png_pass_inc.7106(%rdx), %r8d
 7289      00000000 
 7290 01b6 4539DA   		cmpl	%r11d, %r10d
 7291 01b9 76B5     		jbe	.L695
 7292 01bb 4489DA   		movl	%r11d, %edx
 7293              	.LVL824:
 7294 01be 4889F5   		movq	%rsi, %rbp
 7295 01c1 31DB     		xorl	%ebx, %ebx
 7296 01c3 41B90600 		movl	$6, %r9d
 7296      0000
 7297 01c9 EB20     		jmp	.L704
 7298              	.LVL825:
 7299 01cb 0F1F4400 		.p2align 4,,10
 7299      00
 7300              		.p2align 3
 7301              	.L742:
2221:fltk-1.3.4-1/png/pngwutil.c ****                   d = 0;
 7302              		.loc 1 2221 0
 7303 01d0 885D00   		movb	%bl, 0(%rbp)
 7304              	.LVL826:
2220:fltk-1.3.4-1/png/pngwutil.c ****                   *dp++ = (png_byte)d;
 7305              		.loc 1 2220 0
 7306 01d3 41B90600 		movl	$6, %r9d
 7306      0000
2221:fltk-1.3.4-1/png/pngwutil.c ****                   d = 0;
 7307              		.loc 1 2221 0
 7308 01d9 4883C501 		addq	$1, %rbp
 7309              	.LVL827:
2222:fltk-1.3.4-1/png/pngwutil.c ****                }
 7310              		.loc 1 2222 0
 7311 01dd 31DB     		xorl	%ebx, %ebx
 7312              	.LVL828:
 7313              	.L703:
2212:fltk-1.3.4-1/png/pngwutil.c ****             {
 7314              		.loc 1 2212 0
 7315 01df 4401C2   		addl	%r8d, %edx
 7316              	.LVL829:
2211:fltk-1.3.4-1/png/pngwutil.c ****                i += png_pass_inc[pass])
 7317              		.loc 1 2211 0
 7318 01e2 4139D2   		cmpl	%edx, %r10d
 7319 01e5 0F8635FF 		jbe	.L741
 7319      FFFF
 7320              	.LVL830:
 7321              	.L704:
2215:fltk-1.3.4-1/png/pngwutil.c ****                d |= (value << shift);
 7322              		.loc 1 2215 0
 7323 01eb 89D0     		movl	%edx, %eax
2216:fltk-1.3.4-1/png/pngwutil.c **** 
 7324              		.loc 1 2216 0
 7325 01ed 89D1     		movl	%edx, %ecx
2215:fltk-1.3.4-1/png/pngwutil.c ****                d |= (value << shift);
 7326              		.loc 1 2215 0
 7327 01ef C1E802   		shrl	$2, %eax
2216:fltk-1.3.4-1/png/pngwutil.c **** 
 7328              		.loc 1 2216 0
 7329 01f2 F7D1     		notl	%ecx
 7330              	.LVL831:
 7331 01f4 0FB60406 		movzbl	(%rsi,%rax), %eax
 7332 01f8 83E103   		andl	$3, %ecx
 7333              	.LVL832:
 7334 01fb 01C9     		addl	%ecx, %ecx
 7335 01fd D3F8     		sarl	%cl, %eax
 7336 01ff 4489C9   		movl	%r9d, %ecx
 7337 0202 83E003   		andl	$3, %eax
 7338 0205 D3E0     		sall	%cl, %eax
 7339 0207 09C3     		orl	%eax, %ebx
 7340              	.LVL833:
2218:fltk-1.3.4-1/png/pngwutil.c ****                {
 7341              		.loc 1 2218 0
 7342 0209 4585C9   		testl	%r9d, %r9d
 7343 020c 74C2     		je	.L742
2226:fltk-1.3.4-1/png/pngwutil.c ****             }
 7344              		.loc 1 2226 0
 7345 020e 4183E902 		subl	$2, %r9d
 7346              	.LVL834:
 7347 0212 EBCB     		jmp	.L703
 7348              	.LVL835:
 7349              		.p2align 4,,10
 7350 0214 0F1F4000 		.p2align 3
 7351              	.L745:
 7352              	.LBE530:
 7353              	.LBB531:
2264:fltk-1.3.4-1/png/pngwutil.c ****                *dp = (png_byte)d;
 7354              		.loc 1 2264 0
 7355 0218 4183F904 		cmpl	$4, %r9d
 7356 021c 0F8508FF 		jne	.L711
 7356      FFFF
 7357              	.LVL836:
 7358              		.p2align 4,,10
 7359 0222 660F1F44 		.p2align 3
 7359      0000
 7360              	.L736:
 7361 0228 8B1F     		movl	(%rdi), %ebx
 7362 022a 0FB64F13 		movzbl	19(%rdi), %ecx
 7363 022e E900FFFF 		jmp	.L700
 7363      FF
 7364              	.LVL837:
 7365              		.p2align 4,,10
 7366 0233 0F1F4400 		.p2align 3
 7366      00
 7367              	.L737:
 7368              	.LBE531:
 7369              	.LBB532:
2173:fltk-1.3.4-1/png/pngwutil.c ****                i += png_pass_inc[pass])
 7370              		.loc 1 2173 0
 7371 0238 4863D2   		movslq	%edx, %rdx
2167:fltk-1.3.4-1/png/pngwutil.c **** 
 7372              		.loc 1 2167 0
 7373 023b 448B17   		movl	(%rdi), %r10d
 7374              	.LVL838:
2173:fltk-1.3.4-1/png/pngwutil.c ****                i += png_pass_inc[pass])
 7375              		.loc 1 2173 0
 7376 023e 440FB69A 		movzbl	png_pass_start.7105(%rdx), %r11d
 7376      00000000 
 7377              	.LVL839:
 7378 0246 440FB682 		movzbl	png_pass_inc.7106(%rdx), %r8d
 7378      00000000 
 7379 024e 4539DA   		cmpl	%r11d, %r10d
 7380 0251 0F8619FF 		jbe	.L695
 7380      FFFF
 7381 0257 4489DA   		movl	%r11d, %edx
 7382              	.LVL840:
 7383 025a 4889F5   		movq	%rsi, %rbp
 7384 025d 31DB     		xorl	%ebx, %ebx
 7385 025f 41B90700 		movl	$7, %r9d
 7385      0000
 7386 0265 EB20     		jmp	.L698
 7387              	.LVL841:
 7388 0267 660F1F84 		.p2align 4,,10
 7388      00000000 
 7388      00
 7389              		.p2align 3
 7390              	.L744:
2174:fltk-1.3.4-1/png/pngwutil.c ****             {
 7391              		.loc 1 2174 0
 7392 0270 4401C2   		addl	%r8d, %edx
 7393              	.LVL842:
2183:fltk-1.3.4-1/png/pngwutil.c ****                   d = 0;
 7394              		.loc 1 2183 0
 7395 0273 885D00   		movb	%bl, 0(%rbp)
 7396              	.LVL843:
 7397 0276 4883C501 		addq	$1, %rbp
 7398              	.LVL844:
2184:fltk-1.3.4-1/png/pngwutil.c ****                }
 7399              		.loc 1 2184 0
 7400 027a 31DB     		xorl	%ebx, %ebx
2173:fltk-1.3.4-1/png/pngwutil.c ****                i += png_pass_inc[pass])
 7401              		.loc 1 2173 0
 7402 027c 4139D2   		cmpl	%edx, %r10d
2182:fltk-1.3.4-1/png/pngwutil.c ****                   *dp++ = (png_byte)d;
 7403              		.loc 1 2182 0
 7404 027f 41B90700 		movl	$7, %r9d
 7404      0000
 7405              	.LVL845:
2173:fltk-1.3.4-1/png/pngwutil.c ****                i += png_pass_inc[pass])
 7406              		.loc 1 2173 0
 7407 0285 762D     		jbe	.L743
 7408              	.LVL846:
 7409              	.L698:
2177:fltk-1.3.4-1/png/pngwutil.c ****                d |= (value << shift);
 7410              		.loc 1 2177 0
 7411 0287 89D0     		movl	%edx, %eax
2178:fltk-1.3.4-1/png/pngwutil.c **** 
 7412              		.loc 1 2178 0
 7413 0289 89D1     		movl	%edx, %ecx
2177:fltk-1.3.4-1/png/pngwutil.c ****                d |= (value << shift);
 7414              		.loc 1 2177 0
 7415 028b C1E803   		shrl	$3, %eax
2178:fltk-1.3.4-1/png/pngwutil.c **** 
 7416              		.loc 1 2178 0
 7417 028e F7D1     		notl	%ecx
 7418 0290 0FB60406 		movzbl	(%rsi,%rax), %eax
 7419 0294 83E107   		andl	$7, %ecx
 7420 0297 D3F8     		sarl	%cl, %eax
 7421 0299 4489C9   		movl	%r9d, %ecx
 7422 029c 83E001   		andl	$1, %eax
 7423 029f D3E0     		sall	%cl, %eax
 7424 02a1 09C3     		orl	%eax, %ebx
 7425              	.LVL847:
2180:fltk-1.3.4-1/png/pngwutil.c ****                {
 7426              		.loc 1 2180 0
 7427 02a3 4585C9   		testl	%r9d, %r9d
 7428 02a6 74C8     		je	.L744
2174:fltk-1.3.4-1/png/pngwutil.c ****             {
 7429              		.loc 1 2174 0
 7430 02a8 4401C2   		addl	%r8d, %edx
 7431              	.LVL848:
2188:fltk-1.3.4-1/png/pngwutil.c **** 
 7432              		.loc 1 2188 0
 7433 02ab 4183E901 		subl	$1, %r9d
 7434              	.LVL849:
2173:fltk-1.3.4-1/png/pngwutil.c ****                i += png_pass_inc[pass])
 7435              		.loc 1 2173 0
 7436 02af 4139D2   		cmpl	%edx, %r10d
 7437 02b2 77D3     		ja	.L698
 7438              	.L743:
2191:fltk-1.3.4-1/png/pngwutil.c ****                *dp = (png_byte)d;
 7439              		.loc 1 2191 0
 7440 02b4 4183F907 		cmpl	$7, %r9d
 7441 02b8 0F856CFE 		jne	.L711
 7441      FFFF
 7442 02be E965FFFF 		jmp	.L736
 7442      FF
 7443              	.LVL850:
 7444              		.p2align 4,,10
 7445 02c3 0F1F4400 		.p2align 3
 7445      00
 7446              	.L692:
 7447              	.LBE532:
 7448              	.LBB533:
2247:fltk-1.3.4-1/png/pngwutil.c ****                 i += png_pass_inc[pass])
 7449              		.loc 1 2247 0
 7450 02c8 4863D2   		movslq	%edx, %rdx
2242:fltk-1.3.4-1/png/pngwutil.c **** 
 7451              		.loc 1 2242 0
 7452 02cb 448B17   		movl	(%rdi), %r10d
 7453              	.LVL851:
2247:fltk-1.3.4-1/png/pngwutil.c ****                 i += png_pass_inc[pass])
 7454              		.loc 1 2247 0
 7455 02ce 440FB69A 		movzbl	png_pass_start.7105(%rdx), %r11d
 7455      00000000 
 7456              	.LVL852:
 7457 02d6 440FB682 		movzbl	png_pass_inc.7106(%rdx), %r8d
 7457      00000000 
 7458 02de 4539DA   		cmpl	%r11d, %r10d
 7459 02e1 0F8689FE 		jbe	.L695
 7459      FFFF
 7460 02e7 4489DA   		movl	%r11d, %edx
 7461              	.LVL853:
 7462 02ea 4889F5   		movq	%rsi, %rbp
 7463 02ed 31DB     		xorl	%ebx, %ebx
 7464 02ef 41B90400 		movl	$4, %r9d
 7464      0000
 7465 02f5 EB24     		jmp	.L710
 7466              	.LVL854:
 7467 02f7 660F1F84 		.p2align 4,,10
 7467      00000000 
 7467      00
 7468              		.p2align 3
 7469              	.L746:
2257:fltk-1.3.4-1/png/pngwutil.c ****                   d = 0;
 7470              		.loc 1 2257 0
 7471 0300 885D00   		movb	%bl, 0(%rbp)
 7472              	.LVL855:
2256:fltk-1.3.4-1/png/pngwutil.c ****                   *dp++ = (png_byte)d;
 7473              		.loc 1 2256 0
 7474 0303 41B90400 		movl	$4, %r9d
 7474      0000
2257:fltk-1.3.4-1/png/pngwutil.c ****                   d = 0;
 7475              		.loc 1 2257 0
 7476 0309 4883C501 		addq	$1, %rbp
 7477              	.LVL856:
2258:fltk-1.3.4-1/png/pngwutil.c ****                }
 7478              		.loc 1 2258 0
 7479 030d 31DB     		xorl	%ebx, %ebx
 7480              	.LVL857:
 7481              	.L709:
2248:fltk-1.3.4-1/png/pngwutil.c ****             {
 7482              		.loc 1 2248 0
 7483 030f 4401C2   		addl	%r8d, %edx
 7484              	.LVL858:
2247:fltk-1.3.4-1/png/pngwutil.c ****                 i += png_pass_inc[pass])
 7485              		.loc 1 2247 0
 7486 0312 4139D2   		cmpl	%edx, %r10d
 7487 0315 0F86FDFE 		jbe	.L745
 7487      FFFF
 7488              	.LVL859:
 7489              	.L710:
2251:fltk-1.3.4-1/png/pngwutil.c ****                d |= (value << shift);
 7490              		.loc 1 2251 0
 7491 031b 89D0     		movl	%edx, %eax
 7492 031d 89D1     		movl	%edx, %ecx
 7493 031f D1E8     		shrl	%eax
 7494 0321 83E101   		andl	$1, %ecx
 7495 0324 0FB60406 		movzbl	(%rsi,%rax), %eax
 7496 0328 83F901   		cmpl	$1, %ecx
 7497 032b 19C9     		sbbl	%ecx, %ecx
 7498 032d 83E104   		andl	$4, %ecx
 7499              	.LVL860:
2252:fltk-1.3.4-1/png/pngwutil.c **** 
 7500              		.loc 1 2252 0
 7501 0330 D3F8     		sarl	%cl, %eax
 7502              	.LVL861:
 7503 0332 4489C9   		movl	%r9d, %ecx
 7504              	.LVL862:
 7505 0335 83E00F   		andl	$15, %eax
 7506 0338 D3E0     		sall	%cl, %eax
 7507 033a 09C3     		orl	%eax, %ebx
 7508              	.LVL863:
2254:fltk-1.3.4-1/png/pngwutil.c ****                {
 7509              		.loc 1 2254 0
 7510 033c 4585C9   		testl	%r9d, %r9d
 7511 033f 74BF     		je	.L746
2262:fltk-1.3.4-1/png/pngwutil.c ****             }
 7512              		.loc 1 2262 0
 7513 0341 4183E904 		subl	$4, %r9d
 7514              	.LVL864:
 7515 0345 EBC8     		jmp	.L709
 7516              	.LVL865:
 7517 0347 660F1F84 		.p2align 4,,10
 7517      00000000 
 7517      00
 7518              		.p2align 3
 7519              	.L738:
 7520              	.LBE533:
 7521              	.LBB534:
 7522              	.LBB527:
 7523              	.LBB523:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 7524              		.loc 2 53 0
 7525 0350 448B10   		movl	(%rax), %r10d
 7526 0353 448912   		movl	%r10d, (%rdx)
 7527 0356 428B4428 		movl	-4(%rax,%r13), %eax
 7527      FC
 7528              	.LVL866:
 7529 035b 4289442A 		movl	%eax, -4(%rdx,%r13)
 7529      FC
 7530 0360 E943FDFF 		jmp	.L713
 7530      FF
 7531              	.LVL867:
 7532              		.p2align 4,,10
 7533 0365 0F1F00   		.p2align 3
 7534              	.L739:
 7535 0368 420FB744 		movzwl	-2(%rax,%r13), %eax
 7535      28FE
 7536              	.LVL868:
 7537 036e 66428944 		movw	%ax, -2(%rdx,%r13)
 7537      2AFE
 7538 0374 E92FFDFF 		jmp	.L713
 7538      FF
 7539              	.LBE523:
 7540              	.LBE527:
 7541              	.LBE534:
 7542              		.cfi_endproc
 7543              	.LFE96:
 7545              		.section	.text.unlikely.png_do_write_interlace
 7546              	.LCOLDE92:
 7547              		.section	.text.png_do_write_interlace
 7548              	.LHOTE92:
 7549              		.section	.text.unlikely.png_write_find_filter,"ax",@progbits
 7550              	.LCOLDB93:
 7551              		.section	.text.png_write_find_filter,"ax",@progbits
 7552              	.LHOTB93:
 7553              		.p2align 4,,15
 7554              		.globl	png_write_find_filter
 7556              	png_write_find_filter:
 7557              	.LFB97:
2311:fltk-1.3.4-1/png/pngwutil.c **** #endif
2312:fltk-1.3.4-1/png/pngwutil.c **** 
2313:fltk-1.3.4-1/png/pngwutil.c **** /* This filters the row, chooses which filter to use, if it has not already
2314:fltk-1.3.4-1/png/pngwutil.c ****  * been specified by the application, and then writes the row out with the
2315:fltk-1.3.4-1/png/pngwutil.c ****  * chosen filter.
2316:fltk-1.3.4-1/png/pngwutil.c ****  */
2317:fltk-1.3.4-1/png/pngwutil.c **** static void
2318:fltk-1.3.4-1/png/pngwutil.c **** png_write_filtered_row(png_structrp png_ptr, png_bytep filtered_row,
2319:fltk-1.3.4-1/png/pngwutil.c ****    png_size_t row_bytes);
2320:fltk-1.3.4-1/png/pngwutil.c **** 
2321:fltk-1.3.4-1/png/pngwutil.c **** #define PNG_MAXSUM (((png_uint_32)(-1)) >> 1)
2322:fltk-1.3.4-1/png/pngwutil.c **** #define PNG_HISHIFT 10
2323:fltk-1.3.4-1/png/pngwutil.c **** #define PNG_LOMASK ((png_uint_32)0xffffL)
2324:fltk-1.3.4-1/png/pngwutil.c **** #define PNG_HIMASK ((png_uint_32)(~PNG_LOMASK >> PNG_HISHIFT))
2325:fltk-1.3.4-1/png/pngwutil.c **** void /* PRIVATE */
2326:fltk-1.3.4-1/png/pngwutil.c **** png_write_find_filter(png_structrp png_ptr, png_row_infop row_info)
2327:fltk-1.3.4-1/png/pngwutil.c **** {
 7558              		.loc 1 2327 0
 7559              		.cfi_startproc
 7560              	.LVL869:
 7561 0000 4157     		pushq	%r15
 7562              		.cfi_def_cfa_offset 16
 7563              		.cfi_offset 15, -16
 7564 0002 4156     		pushq	%r14
 7565              		.cfi_def_cfa_offset 24
 7566              		.cfi_offset 14, -24
 7567 0004 4889F0   		movq	%rsi, %rax
 7568 0007 4155     		pushq	%r13
 7569              		.cfi_def_cfa_offset 32
 7570              		.cfi_offset 13, -32
 7571 0009 4154     		pushq	%r12
 7572              		.cfi_def_cfa_offset 40
 7573              		.cfi_offset 12, -40
 7574 000b 55       		pushq	%rbp
 7575              		.cfi_def_cfa_offset 48
 7576              		.cfi_offset 6, -48
 7577 000c 53       		pushq	%rbx
 7578              		.cfi_def_cfa_offset 56
 7579              		.cfi_offset 3, -56
 7580 000d 4889FB   		movq	%rdi, %rbx
 7581 0010 4883EC48 		subq	$72, %rsp
 7582              		.cfi_def_cfa_offset 128
2328:fltk-1.3.4-1/png/pngwutil.c ****    png_bytep best_row;
2329:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_FILTER_SUPPORTED
2330:fltk-1.3.4-1/png/pngwutil.c ****    png_bytep prev_row, row_buf;
2331:fltk-1.3.4-1/png/pngwutil.c ****    png_uint_32 mins, bpp;
2332:fltk-1.3.4-1/png/pngwutil.c ****    png_byte filter_to_do = png_ptr->do_filter;
 7583              		.loc 1 2332 0
 7584 0014 0FB68F76 		movzbl	630(%rdi), %ecx
 7584      020000
2333:fltk-1.3.4-1/png/pngwutil.c ****    png_size_t row_bytes = row_info->rowbytes;
 7585              		.loc 1 2333 0
 7586 001b 488B7808 		movq	8(%rax), %rdi
 7587              	.LVL870:
2334:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
2335:fltk-1.3.4-1/png/pngwutil.c ****    int num_p_filters = png_ptr->num_prev_filters;
2336:fltk-1.3.4-1/png/pngwutil.c **** #endif
2337:fltk-1.3.4-1/png/pngwutil.c **** 
2338:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_write_find_filter");
2339:fltk-1.3.4-1/png/pngwutil.c **** 
2340:fltk-1.3.4-1/png/pngwutil.c **** #ifndef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
2341:fltk-1.3.4-1/png/pngwutil.c ****   if (png_ptr->row_number == 0 && filter_to_do == PNG_ALL_FILTERS)
2342:fltk-1.3.4-1/png/pngwutil.c ****   {
2343:fltk-1.3.4-1/png/pngwutil.c ****      /* These will never be selected so we need not test them. */
2344:fltk-1.3.4-1/png/pngwutil.c ****      filter_to_do &= ~(PNG_FILTER_UP | PNG_FILTER_PAETH);
2345:fltk-1.3.4-1/png/pngwutil.c ****   }
2346:fltk-1.3.4-1/png/pngwutil.c **** #endif
2347:fltk-1.3.4-1/png/pngwutil.c **** 
2348:fltk-1.3.4-1/png/pngwutil.c ****    /* Find out how many bytes offset each pixel is */
2349:fltk-1.3.4-1/png/pngwutil.c ****    bpp = (row_info->pixel_depth + 7) >> 3;
 7588              		.loc 1 2349 0
 7589 001f 0FB64013 		movzbl	19(%rax), %eax
2335:fltk-1.3.4-1/png/pngwutil.c **** #endif
 7590              		.loc 1 2335 0
 7591 0023 440FB6BB 		movzbl	921(%rbx), %r15d
 7591      99030000 
2327:fltk-1.3.4-1/png/pngwutil.c ****    png_bytep best_row;
 7592              		.loc 1 2327 0
 7593 002b 48897424 		movq	%rsi, 40(%rsp)
 7593      28
2350:fltk-1.3.4-1/png/pngwutil.c **** 
2351:fltk-1.3.4-1/png/pngwutil.c ****    prev_row = png_ptr->prev_row;
 7594              		.loc 1 2351 0
 7595 0030 4C8BB320 		movq	544(%rbx), %r14
 7595      020000
2332:fltk-1.3.4-1/png/pngwutil.c ****    png_size_t row_bytes = row_info->rowbytes;
 7596              		.loc 1 2332 0
 7597 0037 89CE     		movl	%ecx, %esi
 7598              	.LVL871:
 7599 0039 880C24   		movb	%cl, (%rsp)
 7600              	.LVL872:
2352:fltk-1.3.4-1/png/pngwutil.c **** #endif
2353:fltk-1.3.4-1/png/pngwutil.c ****    best_row = png_ptr->row_buf;
 7601              		.loc 1 2353 0
 7602 003c 488B8B28 		movq	552(%rbx), %rcx
 7602      020000
 7603              	.LVL873:
2349:fltk-1.3.4-1/png/pngwutil.c **** 
 7604              		.loc 1 2349 0
 7605 0043 83C007   		addl	$7, %eax
2335:fltk-1.3.4-1/png/pngwutil.c **** #endif
 7606              		.loc 1 2335 0
 7607 0046 44887C24 		movb	%r15b, 59(%rsp)
 7607      3B
 7608              	.LVL874:
2349:fltk-1.3.4-1/png/pngwutil.c **** 
 7609              		.loc 1 2349 0
 7610 004b C1F803   		sarl	$3, %eax
 7611 004e 89442418 		movl	%eax, 24(%rsp)
 7612              	.LVL875:
2354:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_FILTER_SUPPORTED
2355:fltk-1.3.4-1/png/pngwutil.c ****    row_buf = best_row;
2356:fltk-1.3.4-1/png/pngwutil.c ****    mins = PNG_MAXSUM;
2357:fltk-1.3.4-1/png/pngwutil.c **** 
2358:fltk-1.3.4-1/png/pngwutil.c ****    /* The prediction method we use is to find which method provides the
2359:fltk-1.3.4-1/png/pngwutil.c ****     * smallest value when summing the absolute values of the distances
2360:fltk-1.3.4-1/png/pngwutil.c ****     * from zero, using anything >= 128 as negative numbers.  This is known
2361:fltk-1.3.4-1/png/pngwutil.c ****     * as the "minimum sum of absolute differences" heuristic.  Other
2362:fltk-1.3.4-1/png/pngwutil.c ****     * heuristics are the "weighted minimum sum of absolute differences"
2363:fltk-1.3.4-1/png/pngwutil.c ****     * (experimental and can in theory improve compression), and the "zlib
2364:fltk-1.3.4-1/png/pngwutil.c ****     * predictive" method (not implemented yet), which does test compressions
2365:fltk-1.3.4-1/png/pngwutil.c ****     * of lines using different filter methods, and then chooses the
2366:fltk-1.3.4-1/png/pngwutil.c ****     * (series of) filter(s) that give minimum compressed data size (VERY
2367:fltk-1.3.4-1/png/pngwutil.c ****     * computationally expensive).
2368:fltk-1.3.4-1/png/pngwutil.c ****     *
2369:fltk-1.3.4-1/png/pngwutil.c ****     * GRR 980525:  consider also
2370:fltk-1.3.4-1/png/pngwutil.c ****     *
2371:fltk-1.3.4-1/png/pngwutil.c ****     *   (1) minimum sum of absolute differences from running average (i.e.,
2372:fltk-1.3.4-1/png/pngwutil.c ****     *       keep running sum of non-absolute differences & count of bytes)
2373:fltk-1.3.4-1/png/pngwutil.c ****     *       [track dispersion, too?  restart average if dispersion too large?]
2374:fltk-1.3.4-1/png/pngwutil.c ****     *
2375:fltk-1.3.4-1/png/pngwutil.c ****     *  (1b) minimum sum of absolute differences from sliding average, probably
2376:fltk-1.3.4-1/png/pngwutil.c ****     *       with window size <= deflate window (usually 32K)
2377:fltk-1.3.4-1/png/pngwutil.c ****     *
2378:fltk-1.3.4-1/png/pngwutil.c ****     *   (2) minimum sum of squared differences from zero or running average
2379:fltk-1.3.4-1/png/pngwutil.c ****     *       (i.e., ~ root-mean-square approach)
2380:fltk-1.3.4-1/png/pngwutil.c ****     */
2381:fltk-1.3.4-1/png/pngwutil.c **** 
2382:fltk-1.3.4-1/png/pngwutil.c **** 
2383:fltk-1.3.4-1/png/pngwutil.c ****    /* We don't need to test the 'no filter' case if this is the only filter
2384:fltk-1.3.4-1/png/pngwutil.c ****     * that has been chosen, as it doesn't actually do anything to the data.
2385:fltk-1.3.4-1/png/pngwutil.c ****     */
2386:fltk-1.3.4-1/png/pngwutil.c ****    if ((filter_to_do & PNG_FILTER_NONE) != 0 && filter_to_do != PNG_FILTER_NONE)
 7613              		.loc 1 2386 0
 7614 0052 89F0     		movl	%esi, %eax
 7615              	.LVL876:
 7616 0054 A808     		testb	$8, %al
 7617 0056 0F84B407 		je	.L857
 7617      0000
 7618 005c 4080FE08 		cmpb	$8, %sil
 7619 0060 0F84AA07 		je	.L857
 7619      0000
 7620              	.LVL877:
 7621              	.LBB561:
2387:fltk-1.3.4-1/png/pngwutil.c ****    {
2388:fltk-1.3.4-1/png/pngwutil.c ****       png_bytep rp;
2389:fltk-1.3.4-1/png/pngwutil.c ****       png_uint_32 sum = 0;
2390:fltk-1.3.4-1/png/pngwutil.c ****       png_size_t i;
2391:fltk-1.3.4-1/png/pngwutil.c ****       int v;
2392:fltk-1.3.4-1/png/pngwutil.c **** 
2393:fltk-1.3.4-1/png/pngwutil.c ****       for (i = 0, rp = row_buf + 1; i < row_bytes; i++, rp++)
 7622              		.loc 1 2393 0
 7623 0066 4885FF   		testq	%rdi, %rdi
 7624 0069 488D5101 		leaq	1(%rcx), %rdx
 7625              	.LVL878:
 7626 006d 0F84820D 		je	.L858
 7626      0000
 7627 0073 4C8D4C39 		leaq	1(%rcx,%rdi), %r9
 7627      01
 7628 0078 31F6     		xorl	%esi, %esi
 7629              	.LVL879:
2394:fltk-1.3.4-1/png/pngwutil.c ****       {
2395:fltk-1.3.4-1/png/pngwutil.c ****          v = *rp;
2396:fltk-1.3.4-1/png/pngwutil.c ****          sum += (v < 128) ? v : 256 - v;
 7630              		.loc 1 2396 0
 7631 007a 41B80001 		movl	$256, %r8d
 7631      0000
 7632              	.LVL880:
 7633              		.p2align 4,,10
 7634              		.p2align 3
 7635              	.L752:
2395:fltk-1.3.4-1/png/pngwutil.c ****          sum += (v < 128) ? v : 256 - v;
 7636              		.loc 1 2395 0
 7637 0080 0FB602   		movzbl	(%rdx), %eax
 7638              	.LVL881:
 7639              		.loc 1 2396 0
 7640 0083 4589C2   		movl	%r8d, %r10d
 7641 0086 4129C2   		subl	%eax, %r10d
 7642 0089 3D800000 		cmpl	$128, %eax
 7642      00
 7643 008e 410F4DC2 		cmovge	%r10d, %eax
 7644              	.LVL882:
2393:fltk-1.3.4-1/png/pngwutil.c ****       {
 7645              		.loc 1 2393 0
 7646 0092 4883C201 		addq	$1, %rdx
 7647              	.LVL883:
 7648              		.loc 1 2396 0
 7649 0096 01C6     		addl	%eax, %esi
 7650              	.LVL884:
2393:fltk-1.3.4-1/png/pngwutil.c ****       {
 7651              		.loc 1 2393 0
 7652 0098 4C39CA   		cmpq	%r9, %rdx
 7653 009b 75E3     		jne	.L752
 7654 009d 89742414 		movl	%esi, 20(%rsp)
 7655              	.LVL885:
 7656              	.L749:
2397:fltk-1.3.4-1/png/pngwutil.c ****       }
2398:fltk-1.3.4-1/png/pngwutil.c **** 
2399:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
2400:fltk-1.3.4-1/png/pngwutil.c ****       if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
 7657              		.loc 1 2400 0
 7658 00a1 80BB9803 		cmpb	$2, 920(%rbx)
 7658      000002
 7659 00a8 0F840A0A 		je	.L982
 7659      0000
 7660              	.LVL886:
 7661              	.L748:
 7662              	.LBE561:
2401:fltk-1.3.4-1/png/pngwutil.c ****       {
2402:fltk-1.3.4-1/png/pngwutil.c ****          png_uint_32 sumhi, sumlo;
2403:fltk-1.3.4-1/png/pngwutil.c ****          int j;
2404:fltk-1.3.4-1/png/pngwutil.c ****          sumlo = sum & PNG_LOMASK;
2405:fltk-1.3.4-1/png/pngwutil.c ****          sumhi = (sum >> PNG_HISHIFT) & PNG_HIMASK; /* Gives us some footroom */
2406:fltk-1.3.4-1/png/pngwutil.c **** 
2407:fltk-1.3.4-1/png/pngwutil.c ****          /* Reduce the sum if we match any of the previous rows */
2408:fltk-1.3.4-1/png/pngwutil.c ****          for (j = 0; j < num_p_filters; j++)
2409:fltk-1.3.4-1/png/pngwutil.c ****          {
2410:fltk-1.3.4-1/png/pngwutil.c ****             if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_NONE)
2411:fltk-1.3.4-1/png/pngwutil.c ****             {
2412:fltk-1.3.4-1/png/pngwutil.c ****                sumlo = (sumlo * png_ptr->filter_weights[j]) >>
2413:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
2414:fltk-1.3.4-1/png/pngwutil.c **** 
2415:fltk-1.3.4-1/png/pngwutil.c ****                sumhi = (sumhi * png_ptr->filter_weights[j]) >>
2416:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
2417:fltk-1.3.4-1/png/pngwutil.c ****             }
2418:fltk-1.3.4-1/png/pngwutil.c ****          }
2419:fltk-1.3.4-1/png/pngwutil.c **** 
2420:fltk-1.3.4-1/png/pngwutil.c ****          /* Factor in the cost of this filter (this is here for completeness,
2421:fltk-1.3.4-1/png/pngwutil.c ****           * but it makes no sense to have a "cost" for the NONE filter, as
2422:fltk-1.3.4-1/png/pngwutil.c ****           * it has the minimum possible computational cost - none).
2423:fltk-1.3.4-1/png/pngwutil.c ****           */
2424:fltk-1.3.4-1/png/pngwutil.c ****          sumlo = (sumlo * png_ptr->filter_costs[PNG_FILTER_VALUE_NONE]) >>
2425:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
2426:fltk-1.3.4-1/png/pngwutil.c **** 
2427:fltk-1.3.4-1/png/pngwutil.c ****          sumhi = (sumhi * png_ptr->filter_costs[PNG_FILTER_VALUE_NONE]) >>
2428:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
2429:fltk-1.3.4-1/png/pngwutil.c **** 
2430:fltk-1.3.4-1/png/pngwutil.c ****          if (sumhi > PNG_HIMASK)
2431:fltk-1.3.4-1/png/pngwutil.c ****             sum = PNG_MAXSUM;
2432:fltk-1.3.4-1/png/pngwutil.c **** 
2433:fltk-1.3.4-1/png/pngwutil.c ****          else
2434:fltk-1.3.4-1/png/pngwutil.c ****             sum = (sumhi << PNG_HISHIFT) + sumlo;
2435:fltk-1.3.4-1/png/pngwutil.c ****       }
2436:fltk-1.3.4-1/png/pngwutil.c **** #endif
2437:fltk-1.3.4-1/png/pngwutil.c ****       mins = sum;
2438:fltk-1.3.4-1/png/pngwutil.c ****    }
2439:fltk-1.3.4-1/png/pngwutil.c **** 
2440:fltk-1.3.4-1/png/pngwutil.c ****    /* Sub filter */
2441:fltk-1.3.4-1/png/pngwutil.c ****    if (filter_to_do == PNG_FILTER_SUB)
 7663              		.loc 1 2441 0
 7664 00ae 803C2410 		cmpb	$16, (%rsp)
 7665 00b2 0F841803 		je	.L983
 7665      0000
2442:fltk-1.3.4-1/png/pngwutil.c ****    /* It's the only filter so no testing is needed */
2443:fltk-1.3.4-1/png/pngwutil.c ****    {
2444:fltk-1.3.4-1/png/pngwutil.c ****       png_bytep rp, lp, dp;
2445:fltk-1.3.4-1/png/pngwutil.c ****       png_size_t i;
2446:fltk-1.3.4-1/png/pngwutil.c **** 
2447:fltk-1.3.4-1/png/pngwutil.c ****       for (i = 0, rp = row_buf + 1, dp = png_ptr->sub_row + 1; i < bpp;
2448:fltk-1.3.4-1/png/pngwutil.c ****            i++, rp++, dp++)
2449:fltk-1.3.4-1/png/pngwutil.c ****       {
2450:fltk-1.3.4-1/png/pngwutil.c ****          *dp = *rp;
2451:fltk-1.3.4-1/png/pngwutil.c ****       }
2452:fltk-1.3.4-1/png/pngwutil.c **** 
2453:fltk-1.3.4-1/png/pngwutil.c ****       for (lp = row_buf + 1; i < row_bytes;
2454:fltk-1.3.4-1/png/pngwutil.c ****          i++, rp++, lp++, dp++)
2455:fltk-1.3.4-1/png/pngwutil.c ****       {
2456:fltk-1.3.4-1/png/pngwutil.c ****          *dp = (png_byte)(((int)*rp - (int)*lp) & 0xff);
2457:fltk-1.3.4-1/png/pngwutil.c ****       }
2458:fltk-1.3.4-1/png/pngwutil.c **** 
2459:fltk-1.3.4-1/png/pngwutil.c ****       best_row = png_ptr->sub_row;
2460:fltk-1.3.4-1/png/pngwutil.c ****    }
2461:fltk-1.3.4-1/png/pngwutil.c **** 
2462:fltk-1.3.4-1/png/pngwutil.c ****    else if ((filter_to_do & PNG_FILTER_SUB) != 0)
 7666              		.loc 1 2462 0
 7667 00b8 F6042410 		testb	$16, (%rsp)
2353:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_FILTER_SUPPORTED
 7668              		.loc 1 2353 0
 7669 00bc 48894C24 		movq	%rcx, 8(%rsp)
 7669      08
 7670              		.loc 1 2462 0
 7671 00c1 0F84DD00 		je	.L763
 7671      0000
 7672              	.LVL887:
 7673              	.LBB564:
2463:fltk-1.3.4-1/png/pngwutil.c ****    {
2464:fltk-1.3.4-1/png/pngwutil.c ****       png_bytep rp, dp, lp;
2465:fltk-1.3.4-1/png/pngwutil.c ****       png_uint_32 sum = 0, lmins = mins;
2466:fltk-1.3.4-1/png/pngwutil.c ****       png_size_t i;
2467:fltk-1.3.4-1/png/pngwutil.c ****       int v;
2468:fltk-1.3.4-1/png/pngwutil.c **** 
2469:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
2470:fltk-1.3.4-1/png/pngwutil.c ****       /* We temporarily increase the "minimum sum" by the factor we
2471:fltk-1.3.4-1/png/pngwutil.c ****        * would reduce the sum of this filter, so that we can do the
2472:fltk-1.3.4-1/png/pngwutil.c ****        * early exit comparison without scaling the sum each time.
2473:fltk-1.3.4-1/png/pngwutil.c ****        */
2474:fltk-1.3.4-1/png/pngwutil.c ****       if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
 7674              		.loc 1 2474 0
 7675 00c7 80BB9803 		cmpb	$2, 920(%rbx)
 7675      000002
 7676              	.LBB565:
 7677 00ce 448B5C24 		movl	20(%rsp), %r11d
 7677      14
 7678              	.LBE565:
 7679 00d3 0F845709 		je	.L984
 7679      0000
 7680              	.L764:
 7681              	.LVL888:
2475:fltk-1.3.4-1/png/pngwutil.c ****       {
2476:fltk-1.3.4-1/png/pngwutil.c ****          int j;
2477:fltk-1.3.4-1/png/pngwutil.c ****          png_uint_32 lmhi, lmlo;
2478:fltk-1.3.4-1/png/pngwutil.c ****          lmlo = lmins & PNG_LOMASK;
2479:fltk-1.3.4-1/png/pngwutil.c ****          lmhi = (lmins >> PNG_HISHIFT) & PNG_HIMASK;
2480:fltk-1.3.4-1/png/pngwutil.c **** 
2481:fltk-1.3.4-1/png/pngwutil.c ****          for (j = 0; j < num_p_filters; j++)
2482:fltk-1.3.4-1/png/pngwutil.c ****          {
2483:fltk-1.3.4-1/png/pngwutil.c ****             if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_SUB)
2484:fltk-1.3.4-1/png/pngwutil.c ****             {
2485:fltk-1.3.4-1/png/pngwutil.c ****                lmlo = (lmlo * png_ptr->inv_filter_weights[j]) >>
2486:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
2487:fltk-1.3.4-1/png/pngwutil.c **** 
2488:fltk-1.3.4-1/png/pngwutil.c ****                lmhi = (lmhi * png_ptr->inv_filter_weights[j]) >>
2489:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
2490:fltk-1.3.4-1/png/pngwutil.c ****             }
2491:fltk-1.3.4-1/png/pngwutil.c ****          }
2492:fltk-1.3.4-1/png/pngwutil.c **** 
2493:fltk-1.3.4-1/png/pngwutil.c ****          lmlo = (lmlo * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_SUB]) >>
2494:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
2495:fltk-1.3.4-1/png/pngwutil.c **** 
2496:fltk-1.3.4-1/png/pngwutil.c ****          lmhi = (lmhi * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_SUB]) >>
2497:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
2498:fltk-1.3.4-1/png/pngwutil.c **** 
2499:fltk-1.3.4-1/png/pngwutil.c ****          if (lmhi > PNG_HIMASK)
2500:fltk-1.3.4-1/png/pngwutil.c ****             lmins = PNG_MAXSUM;
2501:fltk-1.3.4-1/png/pngwutil.c **** 
2502:fltk-1.3.4-1/png/pngwutil.c ****          else
2503:fltk-1.3.4-1/png/pngwutil.c ****             lmins = (lmhi << PNG_HISHIFT) + lmlo;
2504:fltk-1.3.4-1/png/pngwutil.c ****       }
2505:fltk-1.3.4-1/png/pngwutil.c **** #endif
2506:fltk-1.3.4-1/png/pngwutil.c **** 
2507:fltk-1.3.4-1/png/pngwutil.c ****       for (i = 0, rp = row_buf + 1, dp = png_ptr->sub_row + 1; i < bpp;
 7682              		.loc 1 2507 0
 7683 00d9 4C634C24 		movslq	24(%rsp), %r9
 7683      18
 7684 00de 4C8BA330 		movq	560(%rbx), %r12
 7684      020000
 7685 00e5 488D6901 		leaq	1(%rcx), %rbp
 7686              	.LVL889:
 7687 00e9 4D8D5424 		leaq	1(%r12), %r10
 7687      01
 7688              	.LVL890:
 7689 00ee 4585C9   		testl	%r9d, %r9d
 7690 00f1 0F84140D 		je	.L864
 7690      0000
 7691 00f7 31D2     		xorl	%edx, %edx
 7692 00f9 31F6     		xorl	%esi, %esi
2508:fltk-1.3.4-1/png/pngwutil.c ****            i++, rp++, dp++)
2509:fltk-1.3.4-1/png/pngwutil.c ****       {
2510:fltk-1.3.4-1/png/pngwutil.c ****          v = *dp = *rp;
2511:fltk-1.3.4-1/png/pngwutil.c **** 
2512:fltk-1.3.4-1/png/pngwutil.c ****          sum += (v < 128) ? v : 256 - v;
 7693              		.loc 1 2512 0
 7694 00fb 41BD0001 		movl	$256, %r13d
 7694      0000
 7695              	.LVL891:
 7696              		.p2align 4,,10
 7697 0101 0F1F8000 		.p2align 3
 7697      000000
 7698              	.L771:
2510:fltk-1.3.4-1/png/pngwutil.c **** 
 7699              		.loc 1 2510 0
 7700 0108 0FB64411 		movzbl	1(%rcx,%rdx), %eax
 7700      01
 7701              		.loc 1 2512 0
 7702 010d 4589E8   		movl	%r13d, %r8d
 7703 0110 4129C0   		subl	%eax, %r8d
 7704 0113 3D800000 		cmpl	$128, %eax
 7704      00
2510:fltk-1.3.4-1/png/pngwutil.c **** 
 7705              		.loc 1 2510 0
 7706 0118 41884414 		movb	%al, 1(%r12,%rdx)
 7706      01
 7707              	.LVL892:
 7708              		.loc 1 2512 0
 7709 011d 410F4DC0 		cmovge	%r8d, %eax
 7710              	.LVL893:
2508:fltk-1.3.4-1/png/pngwutil.c ****            i++, rp++, dp++)
 7711              		.loc 1 2508 0
 7712 0121 4883C201 		addq	$1, %rdx
 7713              	.LVL894:
 7714              		.loc 1 2512 0
 7715 0125 01C6     		addl	%eax, %esi
 7716              	.LVL895:
2507:fltk-1.3.4-1/png/pngwutil.c ****            i++, rp++, dp++)
 7717              		.loc 1 2507 0
 7718 0127 4C39CA   		cmpq	%r9, %rdx
 7719 012a 75DC     		jne	.L771
 7720 012c 4C01CD   		addq	%r9, %rbp
 7721 012f 4D01CA   		addq	%r9, %r10
 7722              	.LVL896:
 7723              	.L768:
2513:fltk-1.3.4-1/png/pngwutil.c ****       }
2514:fltk-1.3.4-1/png/pngwutil.c **** 
2515:fltk-1.3.4-1/png/pngwutil.c ****       for (lp = row_buf + 1; i < row_bytes;
 7724              		.loc 1 2515 0 discriminator 1
 7725 0132 4C39CF   		cmpq	%r9, %rdi
 7726 0135 7651     		jbe	.L772
 7727 0137 4C89CA   		movq	%r9, %rdx
 7728              		.loc 1 2515 0 is_stmt 0
 7729 013a 4C89C8   		movq	%r9, %rax
2516:fltk-1.3.4-1/png/pngwutil.c ****          i++, rp++, lp++, dp++)
2517:fltk-1.3.4-1/png/pngwutil.c ****       {
2518:fltk-1.3.4-1/png/pngwutil.c ****          v = *dp = (png_byte)(((int)*rp - (int)*lp) & 0xff);
2519:fltk-1.3.4-1/png/pngwutil.c **** 
2520:fltk-1.3.4-1/png/pngwutil.c ****          sum += (v < 128) ? v : 256 - v;
 7730              		.loc 1 2520 0 is_stmt 1
 7731 013d 41BD0001 		movl	$256, %r13d
 7731      0000
 7732 0143 48F7DA   		negq	%rdx
2518:fltk-1.3.4-1/png/pngwutil.c **** 
 7733              		.loc 1 2518 0
 7734 0146 4801D5   		addq	%rdx, %rbp
 7735 0149 4C8D2411 		leaq	(%rcx,%rdx), %r12
 7736 014d 4901D2   		addq	%rdx, %r10
 7737              	.LVL897:
 7738 0150 EB0F     		jmp	.L775
 7739              	.LVL898:
 7740              		.p2align 4,,10
 7741 0152 660F1F44 		.p2align 3
 7741      0000
 7742              	.L985:
2516:fltk-1.3.4-1/png/pngwutil.c ****          i++, rp++, lp++, dp++)
 7743              		.loc 1 2516 0
 7744 0158 4883C001 		addq	$1, %rax
 7745              	.LVL899:
2515:fltk-1.3.4-1/png/pngwutil.c ****          i++, rp++, lp++, dp++)
 7746              		.loc 1 2515 0
 7747 015c 4839C7   		cmpq	%rax, %rdi
 7748 015f 7627     		jbe	.L772
 7749              	.LVL900:
 7750              	.L775:
2518:fltk-1.3.4-1/png/pngwutil.c **** 
 7751              		.loc 1 2518 0
 7752 0161 0FB65405 		movzbl	0(%rbp,%rax), %edx
 7752      00
 7753              		.loc 1 2520 0
 7754 0166 4589E9   		movl	%r13d, %r9d
2518:fltk-1.3.4-1/png/pngwutil.c **** 
 7755              		.loc 1 2518 0
 7756 0169 412A5404 		subb	1(%r12,%rax), %dl
 7756      01
 7757              		.loc 1 2520 0
 7758 016e 440FB6C2 		movzbl	%dl, %r8d
2518:fltk-1.3.4-1/png/pngwutil.c **** 
 7759              		.loc 1 2518 0
 7760 0172 41881402 		movb	%dl, (%r10,%rax)
 7761              	.LVL901:
 7762              		.loc 1 2520 0
 7763 0176 4529C1   		subl	%r8d, %r9d
 7764 0179 80FA80   		cmpb	$-128, %dl
 7765 017c 450F43C1 		cmovnb	%r9d, %r8d
 7766              	.LVL902:
 7767 0180 4401C6   		addl	%r8d, %esi
 7768              	.LVL903:
2521:fltk-1.3.4-1/png/pngwutil.c **** 
2522:fltk-1.3.4-1/png/pngwutil.c ****          if (sum > lmins)  /* We are already worse, don't continue. */
 7769              		.loc 1 2522 0
 7770 0183 4139F3   		cmpl	%esi, %r11d
 7771 0186 73D0     		jnb	.L985
 7772              	.LVL904:
 7773              	.L772:
2523:fltk-1.3.4-1/png/pngwutil.c ****             break;
2524:fltk-1.3.4-1/png/pngwutil.c ****       }
2525:fltk-1.3.4-1/png/pngwutil.c **** 
2526:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
2527:fltk-1.3.4-1/png/pngwutil.c ****       if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
 7774              		.loc 1 2527 0
 7775 0188 80BB9803 		cmpb	$2, 920(%rbx)
 7775      000002
 7776 018f 0F841308 		je	.L986
 7776      0000
 7777              	.LVL905:
 7778              	.L776:
2528:fltk-1.3.4-1/png/pngwutil.c ****       {
2529:fltk-1.3.4-1/png/pngwutil.c ****          int j;
2530:fltk-1.3.4-1/png/pngwutil.c ****          png_uint_32 sumhi, sumlo;
2531:fltk-1.3.4-1/png/pngwutil.c ****          sumlo = sum & PNG_LOMASK;
2532:fltk-1.3.4-1/png/pngwutil.c ****          sumhi = (sum >> PNG_HISHIFT) & PNG_HIMASK;
2533:fltk-1.3.4-1/png/pngwutil.c **** 
2534:fltk-1.3.4-1/png/pngwutil.c ****          for (j = 0; j < num_p_filters; j++)
2535:fltk-1.3.4-1/png/pngwutil.c ****          {
2536:fltk-1.3.4-1/png/pngwutil.c ****             if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_SUB)
2537:fltk-1.3.4-1/png/pngwutil.c ****             {
2538:fltk-1.3.4-1/png/pngwutil.c ****                sumlo = (sumlo * png_ptr->inv_filter_weights[j]) >>
2539:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
2540:fltk-1.3.4-1/png/pngwutil.c **** 
2541:fltk-1.3.4-1/png/pngwutil.c ****                sumhi = (sumhi * png_ptr->inv_filter_weights[j]) >>
2542:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
2543:fltk-1.3.4-1/png/pngwutil.c ****             }
2544:fltk-1.3.4-1/png/pngwutil.c ****          }
2545:fltk-1.3.4-1/png/pngwutil.c **** 
2546:fltk-1.3.4-1/png/pngwutil.c ****          sumlo = (sumlo * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_SUB]) >>
2547:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
2548:fltk-1.3.4-1/png/pngwutil.c **** 
2549:fltk-1.3.4-1/png/pngwutil.c ****          sumhi = (sumhi * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_SUB]) >>
2550:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
2551:fltk-1.3.4-1/png/pngwutil.c **** 
2552:fltk-1.3.4-1/png/pngwutil.c ****          if (sumhi > PNG_HIMASK)
2553:fltk-1.3.4-1/png/pngwutil.c ****             sum = PNG_MAXSUM;
2554:fltk-1.3.4-1/png/pngwutil.c **** 
2555:fltk-1.3.4-1/png/pngwutil.c ****          else
2556:fltk-1.3.4-1/png/pngwutil.c ****             sum = (sumhi << PNG_HISHIFT) + sumlo;
2557:fltk-1.3.4-1/png/pngwutil.c ****       }
2558:fltk-1.3.4-1/png/pngwutil.c **** #endif
2559:fltk-1.3.4-1/png/pngwutil.c **** 
2560:fltk-1.3.4-1/png/pngwutil.c ****       if (sum < mins)
 7779              		.loc 1 2560 0
 7780 0195 39742414 		cmpl	%esi, 20(%rsp)
 7781              	.LBE564:
2353:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_FILTER_SUPPORTED
 7782              		.loc 1 2353 0
 7783 0199 48894C24 		movq	%rcx, 8(%rsp)
 7783      08
 7784              	.LBB568:
 7785              		.loc 1 2560 0
 7786 019e 0F87EC06 		ja	.L987
 7786      0000
 7787              	.LVL906:
 7788              	.L763:
 7789              	.LBE568:
2561:fltk-1.3.4-1/png/pngwutil.c ****       {
2562:fltk-1.3.4-1/png/pngwutil.c ****          mins = sum;
2563:fltk-1.3.4-1/png/pngwutil.c ****          best_row = png_ptr->sub_row;
2564:fltk-1.3.4-1/png/pngwutil.c ****       }
2565:fltk-1.3.4-1/png/pngwutil.c ****    }
2566:fltk-1.3.4-1/png/pngwutil.c **** 
2567:fltk-1.3.4-1/png/pngwutil.c ****    /* Up filter */
2568:fltk-1.3.4-1/png/pngwutil.c ****    if (filter_to_do == PNG_FILTER_UP)
 7790              		.loc 1 2568 0
 7791 01a4 803C2420 		cmpb	$32, (%rsp)
 7792 01a8 0F847206 		je	.L988
 7792      0000
2569:fltk-1.3.4-1/png/pngwutil.c ****    {
2570:fltk-1.3.4-1/png/pngwutil.c ****       png_bytep rp, dp, pp;
2571:fltk-1.3.4-1/png/pngwutil.c ****       png_size_t i;
2572:fltk-1.3.4-1/png/pngwutil.c **** 
2573:fltk-1.3.4-1/png/pngwutil.c ****       for (i = 0, rp = row_buf + 1, dp = png_ptr->up_row + 1,
2574:fltk-1.3.4-1/png/pngwutil.c ****           pp = prev_row + 1; i < row_bytes;
2575:fltk-1.3.4-1/png/pngwutil.c ****           i++, rp++, pp++, dp++)
2576:fltk-1.3.4-1/png/pngwutil.c ****       {
2577:fltk-1.3.4-1/png/pngwutil.c ****          *dp = (png_byte)(((int)*rp - (int)*pp) & 0xff);
2578:fltk-1.3.4-1/png/pngwutil.c ****       }
2579:fltk-1.3.4-1/png/pngwutil.c **** 
2580:fltk-1.3.4-1/png/pngwutil.c ****       best_row = png_ptr->up_row;
2581:fltk-1.3.4-1/png/pngwutil.c ****    }
2582:fltk-1.3.4-1/png/pngwutil.c **** 
2583:fltk-1.3.4-1/png/pngwutil.c ****    else if ((filter_to_do & PNG_FILTER_UP) != 0)
 7793              		.loc 1 2583 0
 7794 01ae F6042420 		testb	$32, (%rsp)
 7795 01b2 0F848500 		je	.L784
 7795      0000
 7796              	.LVL907:
 7797              	.LBB569:
2584:fltk-1.3.4-1/png/pngwutil.c ****    {
2585:fltk-1.3.4-1/png/pngwutil.c ****       png_bytep rp, dp, pp;
2586:fltk-1.3.4-1/png/pngwutil.c ****       png_uint_32 sum = 0, lmins = mins;
2587:fltk-1.3.4-1/png/pngwutil.c ****       png_size_t i;
2588:fltk-1.3.4-1/png/pngwutil.c ****       int v;
2589:fltk-1.3.4-1/png/pngwutil.c **** 
2590:fltk-1.3.4-1/png/pngwutil.c **** 
2591:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
2592:fltk-1.3.4-1/png/pngwutil.c ****       if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
 7798              		.loc 1 2592 0
 7799 01b8 80BB9803 		cmpb	$2, 920(%rbx)
 7799      000002
 7800 01bf 0F840B07 		je	.L989
 7800      0000
 7801              	.LVL908:
2593:fltk-1.3.4-1/png/pngwutil.c ****       {
2594:fltk-1.3.4-1/png/pngwutil.c ****          int j;
2595:fltk-1.3.4-1/png/pngwutil.c ****          png_uint_32 lmhi, lmlo;
2596:fltk-1.3.4-1/png/pngwutil.c ****          lmlo = lmins & PNG_LOMASK;
2597:fltk-1.3.4-1/png/pngwutil.c ****          lmhi = (lmins >> PNG_HISHIFT) & PNG_HIMASK;
2598:fltk-1.3.4-1/png/pngwutil.c **** 
2599:fltk-1.3.4-1/png/pngwutil.c ****          for (j = 0; j < num_p_filters; j++)
2600:fltk-1.3.4-1/png/pngwutil.c ****          {
2601:fltk-1.3.4-1/png/pngwutil.c ****             if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_UP)
2602:fltk-1.3.4-1/png/pngwutil.c ****             {
2603:fltk-1.3.4-1/png/pngwutil.c ****                lmlo = (lmlo * png_ptr->inv_filter_weights[j]) >>
2604:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
2605:fltk-1.3.4-1/png/pngwutil.c **** 
2606:fltk-1.3.4-1/png/pngwutil.c ****                lmhi = (lmhi * png_ptr->inv_filter_weights[j]) >>
2607:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
2608:fltk-1.3.4-1/png/pngwutil.c ****             }
2609:fltk-1.3.4-1/png/pngwutil.c ****          }
2610:fltk-1.3.4-1/png/pngwutil.c **** 
2611:fltk-1.3.4-1/png/pngwutil.c ****          lmlo = (lmlo * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_UP]) >>
2612:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
2613:fltk-1.3.4-1/png/pngwutil.c **** 
2614:fltk-1.3.4-1/png/pngwutil.c ****          lmhi = (lmhi * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_UP]) >>
2615:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
2616:fltk-1.3.4-1/png/pngwutil.c **** 
2617:fltk-1.3.4-1/png/pngwutil.c ****          if (lmhi > PNG_HIMASK)
2618:fltk-1.3.4-1/png/pngwutil.c ****             lmins = PNG_MAXSUM;
2619:fltk-1.3.4-1/png/pngwutil.c **** 
2620:fltk-1.3.4-1/png/pngwutil.c ****          else
2621:fltk-1.3.4-1/png/pngwutil.c ****             lmins = (lmhi << PNG_HISHIFT) + lmlo;
2622:fltk-1.3.4-1/png/pngwutil.c ****       }
2623:fltk-1.3.4-1/png/pngwutil.c **** #endif
2624:fltk-1.3.4-1/png/pngwutil.c **** 
2625:fltk-1.3.4-1/png/pngwutil.c ****       for (i = 0, rp = row_buf + 1, dp = png_ptr->up_row + 1,
 7802              		.loc 1 2625 0
 7803 01c5 488B8338 		movq	568(%rbx), %rax
 7803      020000
 7804 01cc 4885FF   		testq	%rdi, %rdi
 7805 01cf 4C8D6101 		leaq	1(%rcx), %r12
 7806              	.LVL909:
2626:fltk-1.3.4-1/png/pngwutil.c ****           pp = prev_row + 1; i < row_bytes; i++)
 7807              		.loc 1 2626 0
 7808 01d3 498D6E01 		leaq	1(%r14), %rbp
2625:fltk-1.3.4-1/png/pngwutil.c ****           pp = prev_row + 1; i < row_bytes; i++)
 7809              		.loc 1 2625 0
 7810 01d7 4C8D5001 		leaq	1(%rax), %r10
 7811              	.LVL910:
 7812 01db 0F845C0C 		je	.L990
 7812      0000
 7813 01e1 448B5C24 		movl	20(%rsp), %r11d
 7813      14
 7814              	.L852:
 7815 01e6 31D2     		xorl	%edx, %edx
 7816 01e8 4531C0   		xorl	%r8d, %r8d
2627:fltk-1.3.4-1/png/pngwutil.c ****       {
2628:fltk-1.3.4-1/png/pngwutil.c ****          v = *dp++ = (png_byte)(((int)*rp++ - (int)*pp++) & 0xff);
2629:fltk-1.3.4-1/png/pngwutil.c **** 
2630:fltk-1.3.4-1/png/pngwutil.c ****          sum += (v < 128) ? v : 256 - v;
 7817              		.loc 1 2630 0
 7818 01eb 41BD0001 		movl	$256, %r13d
 7818      0000
 7819 01f1 EB0E     		jmp	.L793
 7820              	.LVL911:
 7821              		.p2align 4,,10
 7822 01f3 0F1F4400 		.p2align 3
 7822      00
 7823              	.L991:
2626:fltk-1.3.4-1/png/pngwutil.c ****       {
 7824              		.loc 1 2626 0
 7825 01f8 4883C201 		addq	$1, %rdx
 7826              	.LVL912:
2625:fltk-1.3.4-1/png/pngwutil.c ****           pp = prev_row + 1; i < row_bytes; i++)
 7827              		.loc 1 2625 0
 7828 01fc 4839D7   		cmpq	%rdx, %rdi
 7829 01ff 7624     		jbe	.L792
 7830              	.LVL913:
 7831              	.L793:
2628:fltk-1.3.4-1/png/pngwutil.c **** 
 7832              		.loc 1 2628 0
 7833 0201 410FB604 		movzbl	(%r12,%rdx), %eax
 7833      14
 7834              		.loc 1 2630 0
 7835 0206 4589E9   		movl	%r13d, %r9d
2628:fltk-1.3.4-1/png/pngwutil.c **** 
 7836              		.loc 1 2628 0
 7837 0209 2A441500 		subb	0(%rbp,%rdx), %al
 7838              		.loc 1 2630 0
 7839 020d 0FB6F0   		movzbl	%al, %esi
2628:fltk-1.3.4-1/png/pngwutil.c **** 
 7840              		.loc 1 2628 0
 7841 0210 41880412 		movb	%al, (%r10,%rdx)
 7842              	.LVL914:
 7843              		.loc 1 2630 0
 7844 0214 4129F1   		subl	%esi, %r9d
 7845 0217 3C80     		cmpb	$-128, %al
 7846 0219 410F43F1 		cmovnb	%r9d, %esi
 7847              	.LVL915:
 7848 021d 4101F0   		addl	%esi, %r8d
 7849              	.LVL916:
2631:fltk-1.3.4-1/png/pngwutil.c **** 
2632:fltk-1.3.4-1/png/pngwutil.c ****          if (sum > lmins)  /* We are already worse, don't continue. */
 7850              		.loc 1 2632 0
 7851 0220 4539D8   		cmpl	%r11d, %r8d
 7852 0223 76D3     		jbe	.L991
 7853              	.LVL917:
 7854              	.L792:
2633:fltk-1.3.4-1/png/pngwutil.c ****             break;
2634:fltk-1.3.4-1/png/pngwutil.c ****       }
2635:fltk-1.3.4-1/png/pngwutil.c **** 
2636:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
2637:fltk-1.3.4-1/png/pngwutil.c ****       if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
 7855              		.loc 1 2637 0
 7856 0225 80BB9803 		cmpb	$2, 920(%rbx)
 7856      000002
 7857 022c 0F842E0A 		je	.L992
 7857      0000
 7858              	.LVL918:
 7859              	.L794:
2638:fltk-1.3.4-1/png/pngwutil.c ****       {
2639:fltk-1.3.4-1/png/pngwutil.c ****          int j;
2640:fltk-1.3.4-1/png/pngwutil.c ****          png_uint_32 sumhi, sumlo;
2641:fltk-1.3.4-1/png/pngwutil.c ****          sumlo = sum & PNG_LOMASK;
2642:fltk-1.3.4-1/png/pngwutil.c ****          sumhi = (sum >> PNG_HISHIFT) & PNG_HIMASK;
2643:fltk-1.3.4-1/png/pngwutil.c **** 
2644:fltk-1.3.4-1/png/pngwutil.c ****          for (j = 0; j < num_p_filters; j++)
2645:fltk-1.3.4-1/png/pngwutil.c ****          {
2646:fltk-1.3.4-1/png/pngwutil.c ****             if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_UP)
2647:fltk-1.3.4-1/png/pngwutil.c ****             {
2648:fltk-1.3.4-1/png/pngwutil.c ****                sumlo = (sumlo * png_ptr->filter_weights[j]) >>
2649:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
2650:fltk-1.3.4-1/png/pngwutil.c **** 
2651:fltk-1.3.4-1/png/pngwutil.c ****                sumhi = (sumhi * png_ptr->filter_weights[j]) >>
2652:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
2653:fltk-1.3.4-1/png/pngwutil.c ****             }
2654:fltk-1.3.4-1/png/pngwutil.c ****          }
2655:fltk-1.3.4-1/png/pngwutil.c **** 
2656:fltk-1.3.4-1/png/pngwutil.c ****          sumlo = (sumlo * png_ptr->filter_costs[PNG_FILTER_VALUE_UP]) >>
2657:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
2658:fltk-1.3.4-1/png/pngwutil.c **** 
2659:fltk-1.3.4-1/png/pngwutil.c ****          sumhi = (sumhi * png_ptr->filter_costs[PNG_FILTER_VALUE_UP]) >>
2660:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
2661:fltk-1.3.4-1/png/pngwutil.c **** 
2662:fltk-1.3.4-1/png/pngwutil.c ****          if (sumhi > PNG_HIMASK)
2663:fltk-1.3.4-1/png/pngwutil.c ****             sum = PNG_MAXSUM;
2664:fltk-1.3.4-1/png/pngwutil.c **** 
2665:fltk-1.3.4-1/png/pngwutil.c ****          else
2666:fltk-1.3.4-1/png/pngwutil.c ****             sum = (sumhi << PNG_HISHIFT) + sumlo;
2667:fltk-1.3.4-1/png/pngwutil.c ****       }
2668:fltk-1.3.4-1/png/pngwutil.c **** #endif
2669:fltk-1.3.4-1/png/pngwutil.c **** 
2670:fltk-1.3.4-1/png/pngwutil.c ****       if (sum < mins)
 7860              		.loc 1 2670 0
 7861 0232 44394424 		cmpl	%r8d, 20(%rsp)
 7861      14
 7862 0237 0F873B06 		ja	.L993
 7862      0000
 7863              	.LVL919:
 7864              	.L784:
 7865              	.LBE569:
2671:fltk-1.3.4-1/png/pngwutil.c ****       {
2672:fltk-1.3.4-1/png/pngwutil.c ****          mins = sum;
2673:fltk-1.3.4-1/png/pngwutil.c ****          best_row = png_ptr->up_row;
2674:fltk-1.3.4-1/png/pngwutil.c ****       }
2675:fltk-1.3.4-1/png/pngwutil.c ****    }
2676:fltk-1.3.4-1/png/pngwutil.c **** 
2677:fltk-1.3.4-1/png/pngwutil.c ****    /* Avg filter */
2678:fltk-1.3.4-1/png/pngwutil.c ****    if (filter_to_do == PNG_FILTER_AVG)
 7866              		.loc 1 2678 0
 7867 023d 803C2440 		cmpb	$64, (%rsp)
 7868 0241 0F85FA01 		jne	.L760
 7868      0000
2349:fltk-1.3.4-1/png/pngwutil.c **** 
 7869              		.loc 1 2349 0
 7870 0247 8B6C2418 		movl	24(%rsp), %ebp
 7871              	.LBB573:
2679:fltk-1.3.4-1/png/pngwutil.c ****    {
2680:fltk-1.3.4-1/png/pngwutil.c ****       png_bytep rp, dp, pp, lp;
2681:fltk-1.3.4-1/png/pngwutil.c ****       png_uint_32 i;
2682:fltk-1.3.4-1/png/pngwutil.c **** 
2683:fltk-1.3.4-1/png/pngwutil.c ****       for (i = 0, rp = row_buf + 1, dp = png_ptr->avg_row + 1,
 7872              		.loc 1 2683 0
 7873 024b 4C8B9B40 		movq	576(%rbx), %r11
 7873      020000
 7874 0252 4C8D4101 		leaq	1(%rcx), %r8
2684:fltk-1.3.4-1/png/pngwutil.c ****            pp = prev_row + 1; i < bpp; i++)
 7875              		.loc 1 2684 0
 7876 0256 4D8D4E01 		leaq	1(%r14), %r9
2683:fltk-1.3.4-1/png/pngwutil.c ****            pp = prev_row + 1; i < bpp; i++)
 7877              		.loc 1 2683 0
 7878 025a B8000000 		movl	$0, %eax
 7878      00
 7879 025f 85ED     		testl	%ebp, %ebp
 7880              	.LBE573:
2349:fltk-1.3.4-1/png/pngwutil.c **** 
 7881              		.loc 1 2349 0
 7882 0261 89EA     		movl	%ebp, %edx
 7883              	.LVL920:
 7884              	.LBB574:
2683:fltk-1.3.4-1/png/pngwutil.c ****            pp = prev_row + 1; i < bpp; i++)
 7885              		.loc 1 2683 0
 7886 0263 498D7301 		leaq	1(%r11), %rsi
 7887              	.LVL921:
 7888 0267 7441     		je	.L798
 7889              	.LVL922:
 7890 0269 0F1F8000 		.p2align 4,,10
 7890      000000
 7891              		.p2align 3
 7892              	.L799:
2685:fltk-1.3.4-1/png/pngwutil.c ****       {
2686:fltk-1.3.4-1/png/pngwutil.c ****          *dp++ = (png_byte)(((int)*rp++ - ((int)*pp++ / 2)) & 0xff);
 7893              		.loc 1 2686 0
 7894 0270 450FB654 		movzbl	1(%r14,%rax), %r10d
 7894      0601
 7895 0276 440FB66C 		movzbl	1(%rcx,%rax), %r13d
 7895      0101
 7896 027c 41D0EA   		shrb	%r10b
 7897 027f 4529D5   		subl	%r10d, %r13d
 7898 0282 45886C03 		movb	%r13b, 1(%r11,%rax)
 7898      01
 7899              	.LVL923:
 7900 0287 4883C001 		addq	$1, %rax
 7901              	.LVL924:
2683:fltk-1.3.4-1/png/pngwutil.c ****            pp = prev_row + 1; i < bpp; i++)
 7902              		.loc 1 2683 0
 7903 028b 39C5     		cmpl	%eax, %ebp
 7904 028d 77E1     		ja	.L799
 7905 028f 448B7424 		movl	24(%rsp), %r14d
 7905      18
 7906              	.LVL925:
 7907 0294 4489F0   		movl	%r14d, %eax
 7908              	.LVL926:
 7909 0297 83E801   		subl	$1, %eax
 7910 029a 4883C001 		addq	$1, %rax
 7911 029e 4801C6   		addq	%rax, %rsi
 7912 02a1 4901C0   		addq	%rax, %r8
 7913 02a4 4901C1   		addq	%rax, %r9
 7914              	.LVL927:
 7915 02a7 4489F0   		movl	%r14d, %eax
 7916              	.L798:
 7917              	.LVL928:
2687:fltk-1.3.4-1/png/pngwutil.c ****       }
2688:fltk-1.3.4-1/png/pngwutil.c **** 
2689:fltk-1.3.4-1/png/pngwutil.c ****       for (lp = row_buf + 1; i < row_bytes; i++)
 7918              		.loc 1 2689 0 discriminator 1
 7919 02aa 4531DB   		xorl	%r11d, %r11d
 7920 02ad 4839C7   		cmpq	%rax, %rdi
 7921 02b0 7631     		jbe	.L803
 7922              	.LVL929:
 7923              		.p2align 4,,10
 7924 02b2 660F1F44 		.p2align 3
 7924      0000
 7925              	.L925:
2690:fltk-1.3.4-1/png/pngwutil.c ****       {
2691:fltk-1.3.4-1/png/pngwutil.c ****          *dp++ = (png_byte)(((int)*rp++ - (((int)*pp++ + (int)*lp++) / 2))
 7926              		.loc 1 2691 0 discriminator 3
 7927 02b8 470FB614 		movzbl	(%r9,%r11), %r10d
 7927      19
 7928 02bd 420FB644 		movzbl	1(%rcx,%r11), %eax
 7928      1901
 7929 02c3 470FB634 		movzbl	(%r8,%r11), %r14d
 7929      18
 7930 02c8 4401D0   		addl	%r10d, %eax
 7931 02cb D1F8     		sarl	%eax
 7932 02cd 4129C6   		subl	%eax, %r14d
2689:fltk-1.3.4-1/png/pngwutil.c ****       {
 7933              		.loc 1 2689 0 discriminator 3
 7934 02d0 8D4201   		leal	1(%rdx), %eax
 7935              		.loc 1 2691 0 discriminator 3
 7936 02d3 4688341E 		movb	%r14b, (%rsi,%r11)
 7937 02d7 4983C301 		addq	$1, %r11
 7938              	.LVL930:
2689:fltk-1.3.4-1/png/pngwutil.c ****       {
 7939              		.loc 1 2689 0 discriminator 3
 7940 02db 4839C7   		cmpq	%rax, %rdi
 7941 02de 4889C2   		movq	%rax, %rdx
 7942              	.LVL931:
 7943 02e1 77D5     		ja	.L925
 7944              	.LVL932:
 7945              	.L803:
2692:fltk-1.3.4-1/png/pngwutil.c ****                  & 0xff);
2693:fltk-1.3.4-1/png/pngwutil.c ****       }
2694:fltk-1.3.4-1/png/pngwutil.c ****       best_row = png_ptr->avg_row;
 7946              		.loc 1 2694 0
 7947 02e3 488B8340 		movq	576(%rbx), %rax
 7947      020000
 7948 02ea 48894424 		movq	%rax, 8(%rsp)
 7948      08
 7949              	.LVL933:
 7950              	.L801:
 7951              	.LBE574:
 7952              	.LBB575:
 7953              	.LBB576:
2695:fltk-1.3.4-1/png/pngwutil.c ****    }
2696:fltk-1.3.4-1/png/pngwutil.c **** 
2697:fltk-1.3.4-1/png/pngwutil.c ****    else if ((filter_to_do & PNG_FILTER_AVG) != 0)
2698:fltk-1.3.4-1/png/pngwutil.c ****    {
2699:fltk-1.3.4-1/png/pngwutil.c ****       png_bytep rp, dp, pp, lp;
2700:fltk-1.3.4-1/png/pngwutil.c ****       png_uint_32 sum = 0, lmins = mins;
2701:fltk-1.3.4-1/png/pngwutil.c ****       png_size_t i;
2702:fltk-1.3.4-1/png/pngwutil.c ****       int v;
2703:fltk-1.3.4-1/png/pngwutil.c **** 
2704:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
2705:fltk-1.3.4-1/png/pngwutil.c ****       if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
2706:fltk-1.3.4-1/png/pngwutil.c ****       {
2707:fltk-1.3.4-1/png/pngwutil.c ****          int j;
2708:fltk-1.3.4-1/png/pngwutil.c ****          png_uint_32 lmhi, lmlo;
2709:fltk-1.3.4-1/png/pngwutil.c ****          lmlo = lmins & PNG_LOMASK;
2710:fltk-1.3.4-1/png/pngwutil.c ****          lmhi = (lmins >> PNG_HISHIFT) & PNG_HIMASK;
2711:fltk-1.3.4-1/png/pngwutil.c **** 
2712:fltk-1.3.4-1/png/pngwutil.c ****          for (j = 0; j < num_p_filters; j++)
2713:fltk-1.3.4-1/png/pngwutil.c ****          {
2714:fltk-1.3.4-1/png/pngwutil.c ****             if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_AVG)
2715:fltk-1.3.4-1/png/pngwutil.c ****             {
2716:fltk-1.3.4-1/png/pngwutil.c ****                lmlo = (lmlo * png_ptr->inv_filter_weights[j]) >>
2717:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
2718:fltk-1.3.4-1/png/pngwutil.c **** 
2719:fltk-1.3.4-1/png/pngwutil.c ****                lmhi = (lmhi * png_ptr->inv_filter_weights[j]) >>
2720:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
2721:fltk-1.3.4-1/png/pngwutil.c ****             }
2722:fltk-1.3.4-1/png/pngwutil.c ****          }
2723:fltk-1.3.4-1/png/pngwutil.c **** 
2724:fltk-1.3.4-1/png/pngwutil.c ****          lmlo = (lmlo * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_AVG]) >>
2725:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
2726:fltk-1.3.4-1/png/pngwutil.c **** 
2727:fltk-1.3.4-1/png/pngwutil.c ****          lmhi = (lmhi * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_AVG]) >>
2728:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
2729:fltk-1.3.4-1/png/pngwutil.c **** 
2730:fltk-1.3.4-1/png/pngwutil.c ****          if (lmhi > PNG_HIMASK)
2731:fltk-1.3.4-1/png/pngwutil.c ****             lmins = PNG_MAXSUM;
2732:fltk-1.3.4-1/png/pngwutil.c **** 
2733:fltk-1.3.4-1/png/pngwutil.c ****          else
2734:fltk-1.3.4-1/png/pngwutil.c ****             lmins = (lmhi << PNG_HISHIFT) + lmlo;
2735:fltk-1.3.4-1/png/pngwutil.c ****       }
2736:fltk-1.3.4-1/png/pngwutil.c **** #endif
2737:fltk-1.3.4-1/png/pngwutil.c **** 
2738:fltk-1.3.4-1/png/pngwutil.c ****       for (i = 0, rp = row_buf + 1, dp = png_ptr->avg_row + 1,
2739:fltk-1.3.4-1/png/pngwutil.c ****            pp = prev_row + 1; i < bpp; i++)
2740:fltk-1.3.4-1/png/pngwutil.c ****       {
2741:fltk-1.3.4-1/png/pngwutil.c ****          v = *dp++ = (png_byte)(((int)*rp++ - ((int)*pp++ / 2)) & 0xff);
2742:fltk-1.3.4-1/png/pngwutil.c **** 
2743:fltk-1.3.4-1/png/pngwutil.c ****          sum += (v < 128) ? v : 256 - v;
2744:fltk-1.3.4-1/png/pngwutil.c ****       }
2745:fltk-1.3.4-1/png/pngwutil.c **** 
2746:fltk-1.3.4-1/png/pngwutil.c ****       for (lp = row_buf + 1; i < row_bytes; i++)
2747:fltk-1.3.4-1/png/pngwutil.c ****       {
2748:fltk-1.3.4-1/png/pngwutil.c ****          v = *dp++ =
2749:fltk-1.3.4-1/png/pngwutil.c ****              (png_byte)(((int)*rp++ - (((int)*pp++ + (int)*lp++) / 2)) & 0xff);
2750:fltk-1.3.4-1/png/pngwutil.c **** 
2751:fltk-1.3.4-1/png/pngwutil.c ****          sum += (v < 128) ? v : 256 - v;
2752:fltk-1.3.4-1/png/pngwutil.c **** 
2753:fltk-1.3.4-1/png/pngwutil.c ****          if (sum > lmins)  /* We are already worse, don't continue. */
2754:fltk-1.3.4-1/png/pngwutil.c ****             break;
2755:fltk-1.3.4-1/png/pngwutil.c ****       }
2756:fltk-1.3.4-1/png/pngwutil.c **** 
2757:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
2758:fltk-1.3.4-1/png/pngwutil.c ****       if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
2759:fltk-1.3.4-1/png/pngwutil.c ****       {
2760:fltk-1.3.4-1/png/pngwutil.c ****          int j;
2761:fltk-1.3.4-1/png/pngwutil.c ****          png_uint_32 sumhi, sumlo;
2762:fltk-1.3.4-1/png/pngwutil.c ****          sumlo = sum & PNG_LOMASK;
2763:fltk-1.3.4-1/png/pngwutil.c ****          sumhi = (sum >> PNG_HISHIFT) & PNG_HIMASK;
2764:fltk-1.3.4-1/png/pngwutil.c **** 
2765:fltk-1.3.4-1/png/pngwutil.c ****          for (j = 0; j < num_p_filters; j++)
2766:fltk-1.3.4-1/png/pngwutil.c ****          {
2767:fltk-1.3.4-1/png/pngwutil.c ****             if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_NONE)
2768:fltk-1.3.4-1/png/pngwutil.c ****             {
2769:fltk-1.3.4-1/png/pngwutil.c ****                sumlo = (sumlo * png_ptr->filter_weights[j]) >>
2770:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
2771:fltk-1.3.4-1/png/pngwutil.c **** 
2772:fltk-1.3.4-1/png/pngwutil.c ****                sumhi = (sumhi * png_ptr->filter_weights[j]) >>
2773:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
2774:fltk-1.3.4-1/png/pngwutil.c ****             }
2775:fltk-1.3.4-1/png/pngwutil.c ****          }
2776:fltk-1.3.4-1/png/pngwutil.c **** 
2777:fltk-1.3.4-1/png/pngwutil.c ****          sumlo = (sumlo * png_ptr->filter_costs[PNG_FILTER_VALUE_AVG]) >>
2778:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
2779:fltk-1.3.4-1/png/pngwutil.c **** 
2780:fltk-1.3.4-1/png/pngwutil.c ****          sumhi = (sumhi * png_ptr->filter_costs[PNG_FILTER_VALUE_AVG]) >>
2781:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
2782:fltk-1.3.4-1/png/pngwutil.c **** 
2783:fltk-1.3.4-1/png/pngwutil.c ****          if (sumhi > PNG_HIMASK)
2784:fltk-1.3.4-1/png/pngwutil.c ****             sum = PNG_MAXSUM;
2785:fltk-1.3.4-1/png/pngwutil.c **** 
2786:fltk-1.3.4-1/png/pngwutil.c ****          else
2787:fltk-1.3.4-1/png/pngwutil.c ****             sum = (sumhi << PNG_HISHIFT) + sumlo;
2788:fltk-1.3.4-1/png/pngwutil.c ****       }
2789:fltk-1.3.4-1/png/pngwutil.c **** #endif
2790:fltk-1.3.4-1/png/pngwutil.c **** 
2791:fltk-1.3.4-1/png/pngwutil.c ****       if (sum < mins)
2792:fltk-1.3.4-1/png/pngwutil.c ****       {
2793:fltk-1.3.4-1/png/pngwutil.c ****          mins = sum;
2794:fltk-1.3.4-1/png/pngwutil.c ****          best_row = png_ptr->avg_row;
2795:fltk-1.3.4-1/png/pngwutil.c ****       }
2796:fltk-1.3.4-1/png/pngwutil.c ****    }
2797:fltk-1.3.4-1/png/pngwutil.c **** 
2798:fltk-1.3.4-1/png/pngwutil.c ****    /* Paeth filter */
2799:fltk-1.3.4-1/png/pngwutil.c ****    if ((filter_to_do == PNG_FILTER_PAETH) != 0)
2800:fltk-1.3.4-1/png/pngwutil.c ****    {
2801:fltk-1.3.4-1/png/pngwutil.c ****       png_bytep rp, dp, pp, cp, lp;
2802:fltk-1.3.4-1/png/pngwutil.c ****       png_size_t i;
2803:fltk-1.3.4-1/png/pngwutil.c **** 
2804:fltk-1.3.4-1/png/pngwutil.c ****       for (i = 0, rp = row_buf + 1, dp = png_ptr->paeth_row + 1,
2805:fltk-1.3.4-1/png/pngwutil.c ****           pp = prev_row + 1; i < bpp; i++)
2806:fltk-1.3.4-1/png/pngwutil.c ****       {
2807:fltk-1.3.4-1/png/pngwutil.c ****          *dp++ = (png_byte)(((int)*rp++ - (int)*pp++) & 0xff);
2808:fltk-1.3.4-1/png/pngwutil.c ****       }
2809:fltk-1.3.4-1/png/pngwutil.c **** 
2810:fltk-1.3.4-1/png/pngwutil.c ****       for (lp = row_buf + 1, cp = prev_row + 1; i < row_bytes; i++)
2811:fltk-1.3.4-1/png/pngwutil.c ****       {
2812:fltk-1.3.4-1/png/pngwutil.c ****          int a, b, c, pa, pb, pc, p;
2813:fltk-1.3.4-1/png/pngwutil.c **** 
2814:fltk-1.3.4-1/png/pngwutil.c ****          b = *pp++;
2815:fltk-1.3.4-1/png/pngwutil.c ****          c = *cp++;
2816:fltk-1.3.4-1/png/pngwutil.c ****          a = *lp++;
2817:fltk-1.3.4-1/png/pngwutil.c **** 
2818:fltk-1.3.4-1/png/pngwutil.c ****          p = b - c;
2819:fltk-1.3.4-1/png/pngwutil.c ****          pc = a - c;
2820:fltk-1.3.4-1/png/pngwutil.c **** 
2821:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_USE_ABS
2822:fltk-1.3.4-1/png/pngwutil.c ****          pa = abs(p);
2823:fltk-1.3.4-1/png/pngwutil.c ****          pb = abs(pc);
2824:fltk-1.3.4-1/png/pngwutil.c ****          pc = abs(p + pc);
2825:fltk-1.3.4-1/png/pngwutil.c **** #else
2826:fltk-1.3.4-1/png/pngwutil.c ****          pa = p < 0 ? -p : p;
2827:fltk-1.3.4-1/png/pngwutil.c ****          pb = pc < 0 ? -pc : pc;
2828:fltk-1.3.4-1/png/pngwutil.c ****          pc = (p + pc) < 0 ? -(p + pc) : p + pc;
2829:fltk-1.3.4-1/png/pngwutil.c **** #endif
2830:fltk-1.3.4-1/png/pngwutil.c **** 
2831:fltk-1.3.4-1/png/pngwutil.c ****          p = (pa <= pb && pa <=pc) ? a : (pb <= pc) ? b : c;
2832:fltk-1.3.4-1/png/pngwutil.c **** 
2833:fltk-1.3.4-1/png/pngwutil.c ****          *dp++ = (png_byte)(((int)*rp++ - p) & 0xff);
2834:fltk-1.3.4-1/png/pngwutil.c ****       }
2835:fltk-1.3.4-1/png/pngwutil.c ****       best_row = png_ptr->paeth_row;
2836:fltk-1.3.4-1/png/pngwutil.c ****    }
2837:fltk-1.3.4-1/png/pngwutil.c **** 
2838:fltk-1.3.4-1/png/pngwutil.c ****    else if ((filter_to_do & PNG_FILTER_PAETH) != 0)
2839:fltk-1.3.4-1/png/pngwutil.c ****    {
2840:fltk-1.3.4-1/png/pngwutil.c ****       png_bytep rp, dp, pp, cp, lp;
2841:fltk-1.3.4-1/png/pngwutil.c ****       png_uint_32 sum = 0, lmins = mins;
2842:fltk-1.3.4-1/png/pngwutil.c ****       png_size_t i;
2843:fltk-1.3.4-1/png/pngwutil.c ****       int v;
2844:fltk-1.3.4-1/png/pngwutil.c **** 
2845:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
2846:fltk-1.3.4-1/png/pngwutil.c ****       if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
2847:fltk-1.3.4-1/png/pngwutil.c ****       {
2848:fltk-1.3.4-1/png/pngwutil.c ****          int j;
2849:fltk-1.3.4-1/png/pngwutil.c ****          png_uint_32 lmhi, lmlo;
2850:fltk-1.3.4-1/png/pngwutil.c ****          lmlo = lmins & PNG_LOMASK;
2851:fltk-1.3.4-1/png/pngwutil.c ****          lmhi = (lmins >> PNG_HISHIFT) & PNG_HIMASK;
2852:fltk-1.3.4-1/png/pngwutil.c **** 
2853:fltk-1.3.4-1/png/pngwutil.c ****          for (j = 0; j < num_p_filters; j++)
2854:fltk-1.3.4-1/png/pngwutil.c ****          {
2855:fltk-1.3.4-1/png/pngwutil.c ****             if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_PAETH)
2856:fltk-1.3.4-1/png/pngwutil.c ****             {
2857:fltk-1.3.4-1/png/pngwutil.c ****                lmlo = (lmlo * png_ptr->inv_filter_weights[j]) >>
2858:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
2859:fltk-1.3.4-1/png/pngwutil.c **** 
2860:fltk-1.3.4-1/png/pngwutil.c ****                lmhi = (lmhi * png_ptr->inv_filter_weights[j]) >>
2861:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
2862:fltk-1.3.4-1/png/pngwutil.c ****             }
2863:fltk-1.3.4-1/png/pngwutil.c ****          }
2864:fltk-1.3.4-1/png/pngwutil.c **** 
2865:fltk-1.3.4-1/png/pngwutil.c ****          lmlo = (lmlo * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_PAETH]) >>
2866:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
2867:fltk-1.3.4-1/png/pngwutil.c **** 
2868:fltk-1.3.4-1/png/pngwutil.c ****          lmhi = (lmhi * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_PAETH]) >>
2869:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
2870:fltk-1.3.4-1/png/pngwutil.c **** 
2871:fltk-1.3.4-1/png/pngwutil.c ****          if (lmhi > PNG_HIMASK)
2872:fltk-1.3.4-1/png/pngwutil.c ****             lmins = PNG_MAXSUM;
2873:fltk-1.3.4-1/png/pngwutil.c **** 
2874:fltk-1.3.4-1/png/pngwutil.c ****          else
2875:fltk-1.3.4-1/png/pngwutil.c ****             lmins = (lmhi << PNG_HISHIFT) + lmlo;
2876:fltk-1.3.4-1/png/pngwutil.c ****       }
2877:fltk-1.3.4-1/png/pngwutil.c **** #endif
2878:fltk-1.3.4-1/png/pngwutil.c **** 
2879:fltk-1.3.4-1/png/pngwutil.c ****       for (i = 0, rp = row_buf + 1, dp = png_ptr->paeth_row + 1,
2880:fltk-1.3.4-1/png/pngwutil.c ****           pp = prev_row + 1; i < bpp; i++)
2881:fltk-1.3.4-1/png/pngwutil.c ****       {
2882:fltk-1.3.4-1/png/pngwutil.c ****          v = *dp++ = (png_byte)(((int)*rp++ - (int)*pp++) & 0xff);
2883:fltk-1.3.4-1/png/pngwutil.c **** 
2884:fltk-1.3.4-1/png/pngwutil.c ****          sum += (v < 128) ? v : 256 - v;
2885:fltk-1.3.4-1/png/pngwutil.c ****       }
2886:fltk-1.3.4-1/png/pngwutil.c **** 
2887:fltk-1.3.4-1/png/pngwutil.c ****       for (lp = row_buf + 1, cp = prev_row + 1; i < row_bytes; i++)
2888:fltk-1.3.4-1/png/pngwutil.c ****       {
2889:fltk-1.3.4-1/png/pngwutil.c ****          int a, b, c, pa, pb, pc, p;
2890:fltk-1.3.4-1/png/pngwutil.c **** 
2891:fltk-1.3.4-1/png/pngwutil.c ****          b = *pp++;
2892:fltk-1.3.4-1/png/pngwutil.c ****          c = *cp++;
2893:fltk-1.3.4-1/png/pngwutil.c ****          a = *lp++;
2894:fltk-1.3.4-1/png/pngwutil.c **** 
2895:fltk-1.3.4-1/png/pngwutil.c **** #ifndef PNG_SLOW_PAETH
2896:fltk-1.3.4-1/png/pngwutil.c ****          p = b - c;
2897:fltk-1.3.4-1/png/pngwutil.c ****          pc = a - c;
2898:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_USE_ABS
2899:fltk-1.3.4-1/png/pngwutil.c ****          pa = abs(p);
2900:fltk-1.3.4-1/png/pngwutil.c ****          pb = abs(pc);
2901:fltk-1.3.4-1/png/pngwutil.c ****          pc = abs(p + pc);
2902:fltk-1.3.4-1/png/pngwutil.c **** #else
2903:fltk-1.3.4-1/png/pngwutil.c ****          pa = p < 0 ? -p : p;
2904:fltk-1.3.4-1/png/pngwutil.c ****          pb = pc < 0 ? -pc : pc;
2905:fltk-1.3.4-1/png/pngwutil.c ****          pc = (p + pc) < 0 ? -(p + pc) : p + pc;
2906:fltk-1.3.4-1/png/pngwutil.c **** #endif
2907:fltk-1.3.4-1/png/pngwutil.c ****          p = (pa <= pb && pa <=pc) ? a : (pb <= pc) ? b : c;
2908:fltk-1.3.4-1/png/pngwutil.c **** #else /* SLOW_PAETH */
2909:fltk-1.3.4-1/png/pngwutil.c ****          p = a + b - c;
2910:fltk-1.3.4-1/png/pngwutil.c ****          pa = abs(p - a);
2911:fltk-1.3.4-1/png/pngwutil.c ****          pb = abs(p - b);
2912:fltk-1.3.4-1/png/pngwutil.c ****          pc = abs(p - c);
2913:fltk-1.3.4-1/png/pngwutil.c **** 
2914:fltk-1.3.4-1/png/pngwutil.c ****          if (pa <= pb && pa <= pc)
2915:fltk-1.3.4-1/png/pngwutil.c ****             p = a;
2916:fltk-1.3.4-1/png/pngwutil.c **** 
2917:fltk-1.3.4-1/png/pngwutil.c ****          else if (pb <= pc)
2918:fltk-1.3.4-1/png/pngwutil.c ****             p = b;
2919:fltk-1.3.4-1/png/pngwutil.c **** 
2920:fltk-1.3.4-1/png/pngwutil.c ****          else
2921:fltk-1.3.4-1/png/pngwutil.c ****             p = c;
2922:fltk-1.3.4-1/png/pngwutil.c **** #endif /* SLOW_PAETH */
2923:fltk-1.3.4-1/png/pngwutil.c **** 
2924:fltk-1.3.4-1/png/pngwutil.c ****          v = *dp++ = (png_byte)(((int)*rp++ - p) & 0xff);
2925:fltk-1.3.4-1/png/pngwutil.c **** 
2926:fltk-1.3.4-1/png/pngwutil.c ****          sum += (v < 128) ? v : 256 - v;
2927:fltk-1.3.4-1/png/pngwutil.c **** 
2928:fltk-1.3.4-1/png/pngwutil.c ****          if (sum > lmins)  /* We are already worse, don't continue. */
2929:fltk-1.3.4-1/png/pngwutil.c ****             break;
2930:fltk-1.3.4-1/png/pngwutil.c ****       }
2931:fltk-1.3.4-1/png/pngwutil.c **** 
2932:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
2933:fltk-1.3.4-1/png/pngwutil.c ****       if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
2934:fltk-1.3.4-1/png/pngwutil.c ****       {
2935:fltk-1.3.4-1/png/pngwutil.c ****          int j;
2936:fltk-1.3.4-1/png/pngwutil.c ****          png_uint_32 sumhi, sumlo;
2937:fltk-1.3.4-1/png/pngwutil.c ****          sumlo = sum & PNG_LOMASK;
2938:fltk-1.3.4-1/png/pngwutil.c ****          sumhi = (sum >> PNG_HISHIFT) & PNG_HIMASK;
2939:fltk-1.3.4-1/png/pngwutil.c **** 
2940:fltk-1.3.4-1/png/pngwutil.c ****          for (j = 0; j < num_p_filters; j++)
2941:fltk-1.3.4-1/png/pngwutil.c ****          {
2942:fltk-1.3.4-1/png/pngwutil.c ****             if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_PAETH)
2943:fltk-1.3.4-1/png/pngwutil.c ****             {
2944:fltk-1.3.4-1/png/pngwutil.c ****                sumlo = (sumlo * png_ptr->filter_weights[j]) >>
2945:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
2946:fltk-1.3.4-1/png/pngwutil.c **** 
2947:fltk-1.3.4-1/png/pngwutil.c ****                sumhi = (sumhi * png_ptr->filter_weights[j]) >>
2948:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
2949:fltk-1.3.4-1/png/pngwutil.c ****             }
2950:fltk-1.3.4-1/png/pngwutil.c ****          }
2951:fltk-1.3.4-1/png/pngwutil.c **** 
2952:fltk-1.3.4-1/png/pngwutil.c ****          sumlo = (sumlo * png_ptr->filter_costs[PNG_FILTER_VALUE_PAETH]) >>
2953:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
2954:fltk-1.3.4-1/png/pngwutil.c **** 
2955:fltk-1.3.4-1/png/pngwutil.c ****          sumhi = (sumhi * png_ptr->filter_costs[PNG_FILTER_VALUE_PAETH]) >>
2956:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
2957:fltk-1.3.4-1/png/pngwutil.c **** 
2958:fltk-1.3.4-1/png/pngwutil.c ****          if (sumhi > PNG_HIMASK)
2959:fltk-1.3.4-1/png/pngwutil.c ****             sum = PNG_MAXSUM;
2960:fltk-1.3.4-1/png/pngwutil.c **** 
2961:fltk-1.3.4-1/png/pngwutil.c ****          else
2962:fltk-1.3.4-1/png/pngwutil.c ****             sum = (sumhi << PNG_HISHIFT) + sumlo;
2963:fltk-1.3.4-1/png/pngwutil.c ****       }
2964:fltk-1.3.4-1/png/pngwutil.c **** #endif
2965:fltk-1.3.4-1/png/pngwutil.c **** 
2966:fltk-1.3.4-1/png/pngwutil.c ****       if (sum < mins)
2967:fltk-1.3.4-1/png/pngwutil.c ****       {
2968:fltk-1.3.4-1/png/pngwutil.c ****          best_row = png_ptr->paeth_row;
2969:fltk-1.3.4-1/png/pngwutil.c ****       }
2970:fltk-1.3.4-1/png/pngwutil.c ****    }
2971:fltk-1.3.4-1/png/pngwutil.c **** #endif /* WRITE_FILTER */
2972:fltk-1.3.4-1/png/pngwutil.c **** 
2973:fltk-1.3.4-1/png/pngwutil.c ****    /* Do the actual writing of the filtered row data from the chosen filter. */
2974:fltk-1.3.4-1/png/pngwutil.c ****    png_write_filtered_row(png_ptr, best_row, row_info->rowbytes+1);
2975:fltk-1.3.4-1/png/pngwutil.c **** 
2976:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_FILTER_SUPPORTED
2977:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
2978:fltk-1.3.4-1/png/pngwutil.c ****    /* Save the type of filter we picked this time for future calculations */
2979:fltk-1.3.4-1/png/pngwutil.c ****    if (png_ptr->num_prev_filters > 0)
2980:fltk-1.3.4-1/png/pngwutil.c ****    {
2981:fltk-1.3.4-1/png/pngwutil.c ****       int j;
2982:fltk-1.3.4-1/png/pngwutil.c **** 
2983:fltk-1.3.4-1/png/pngwutil.c ****       for (j = 1; j < num_p_filters; j++)
2984:fltk-1.3.4-1/png/pngwutil.c ****       {
2985:fltk-1.3.4-1/png/pngwutil.c ****          png_ptr->prev_filters[j] = png_ptr->prev_filters[j - 1];
2986:fltk-1.3.4-1/png/pngwutil.c ****       }
2987:fltk-1.3.4-1/png/pngwutil.c **** 
2988:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->prev_filters[j] = best_row[0];
2989:fltk-1.3.4-1/png/pngwutil.c ****    }
2990:fltk-1.3.4-1/png/pngwutil.c **** #endif
2991:fltk-1.3.4-1/png/pngwutil.c **** #endif /* WRITE_FILTER */
2992:fltk-1.3.4-1/png/pngwutil.c **** }
2993:fltk-1.3.4-1/png/pngwutil.c **** 
2994:fltk-1.3.4-1/png/pngwutil.c **** 
2995:fltk-1.3.4-1/png/pngwutil.c **** /* Do the actual writing of a previously filtered row. */
2996:fltk-1.3.4-1/png/pngwutil.c **** static void
2997:fltk-1.3.4-1/png/pngwutil.c **** png_write_filtered_row(png_structrp png_ptr, png_bytep filtered_row,
2998:fltk-1.3.4-1/png/pngwutil.c ****    png_size_t full_row_length/*includes filter byte*/)
2999:fltk-1.3.4-1/png/pngwutil.c **** {
3000:fltk-1.3.4-1/png/pngwutil.c ****    png_debug(1, "in png_write_filtered_row");
3001:fltk-1.3.4-1/png/pngwutil.c **** 
3002:fltk-1.3.4-1/png/pngwutil.c ****    png_debug1(2, "filter = %d", filtered_row[0]);
3003:fltk-1.3.4-1/png/pngwutil.c **** 
3004:fltk-1.3.4-1/png/pngwutil.c ****    png_compress_IDAT(png_ptr, filtered_row, full_row_length, Z_NO_FLUSH);
 7954              		.loc 1 3004 0
 7955 02ef 488B4424 		movq	40(%rsp), %rax
 7955      28
 7956 02f4 488B7424 		movq	8(%rsp), %rsi
 7956      08
 7957 02f9 31C9     		xorl	%ecx, %ecx
 7958 02fb 4889DF   		movq	%rbx, %rdi
 7959 02fe 488B5008 		movq	8(%rax), %rdx
 7960 0302 4883C201 		addq	$1, %rdx
 7961              	.LVL934:
 7962 0306 E8000000 		call	png_compress_IDAT
 7962      00
 7963              	.LVL935:
3005:fltk-1.3.4-1/png/pngwutil.c **** 
3006:fltk-1.3.4-1/png/pngwutil.c ****    /* Swap the current and previous rows */
3007:fltk-1.3.4-1/png/pngwutil.c ****    if (png_ptr->prev_row != NULL)
 7964              		.loc 1 3007 0
 7965 030b 488B8320 		movq	544(%rbx), %rax
 7965      020000
 7966 0312 4885C0   		testq	%rax, %rax
 7967 0315 7415     		je	.L846
 7968              	.LVL936:
 7969              	.LBB577:
3008:fltk-1.3.4-1/png/pngwutil.c ****    {
3009:fltk-1.3.4-1/png/pngwutil.c ****       png_bytep tptr;
3010:fltk-1.3.4-1/png/pngwutil.c **** 
3011:fltk-1.3.4-1/png/pngwutil.c ****       tptr = png_ptr->prev_row;
3012:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->prev_row = png_ptr->row_buf;
 7970              		.loc 1 3012 0
 7971 0317 488B9328 		movq	552(%rbx), %rdx
 7971      020000
3013:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->row_buf = tptr;
 7972              		.loc 1 3013 0
 7973 031e 48898328 		movq	%rax, 552(%rbx)
 7973      020000
3012:fltk-1.3.4-1/png/pngwutil.c ****       png_ptr->row_buf = tptr;
 7974              		.loc 1 3012 0
 7975 0325 48899320 		movq	%rdx, 544(%rbx)
 7975      020000
 7976              	.LVL937:
 7977              	.L846:
 7978              	.LBE577:
 7979              	.LBB578:
 7980              	.LBB579:
2071:fltk-1.3.4-1/png/pngwutil.c **** 
 7981              		.loc 1 2071 0
 7982 032c 8B831402 		movl	532(%rbx), %eax
 7982      0000
 7983 0332 83C001   		addl	$1, %eax
2074:fltk-1.3.4-1/png/pngwutil.c ****       return;
 7984              		.loc 1 2074 0
 7985 0335 3B830002 		cmpl	512(%rbx), %eax
 7985      0000
2071:fltk-1.3.4-1/png/pngwutil.c **** 
 7986              		.loc 1 2071 0
 7987 033b 89831402 		movl	%eax, 532(%rbx)
 7987      0000
2074:fltk-1.3.4-1/png/pngwutil.c ****       return;
 7988              		.loc 1 2074 0
 7989 0341 0F83B904 		jnb	.L994
 7989      0000
 7990              	.L847:
 7991              	.LVL938:
 7992              	.LBE579:
 7993              	.LBE578:
3014:fltk-1.3.4-1/png/pngwutil.c ****    }
3015:fltk-1.3.4-1/png/pngwutil.c **** 
3016:fltk-1.3.4-1/png/pngwutil.c ****    /* Finish row - updates counters and flushes zlib if last row */
3017:fltk-1.3.4-1/png/pngwutil.c ****    png_write_finish_row(png_ptr);
3018:fltk-1.3.4-1/png/pngwutil.c **** 
3019:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_WRITE_FLUSH_SUPPORTED
3020:fltk-1.3.4-1/png/pngwutil.c ****    png_ptr->flush_rows++;
 7994              		.loc 1 3020 0
 7995 0347 8B83AC02 		movl	684(%rbx), %eax
 7995      0000
3021:fltk-1.3.4-1/png/pngwutil.c **** 
3022:fltk-1.3.4-1/png/pngwutil.c ****    if (png_ptr->flush_dist > 0 &&
 7996              		.loc 1 3022 0
 7997 034d 8B93A802 		movl	680(%rbx), %edx
 7997      0000
3020:fltk-1.3.4-1/png/pngwutil.c **** 
 7998              		.loc 1 3020 0
 7999 0353 83C001   		addl	$1, %eax
 8000              		.loc 1 3022 0
 8001 0356 39D0     		cmpl	%edx, %eax
3020:fltk-1.3.4-1/png/pngwutil.c **** 
 8002              		.loc 1 3020 0
 8003 0358 8983AC02 		movl	%eax, 684(%rbx)
 8003      0000
 8004              		.loc 1 3022 0
 8005 035e 720C     		jb	.L848
 8006 0360 85D2     		testl	%edx, %edx
 8007 0362 7408     		je	.L848
3023:fltk-1.3.4-1/png/pngwutil.c ****        png_ptr->flush_rows >= png_ptr->flush_dist)
3024:fltk-1.3.4-1/png/pngwutil.c ****    {
3025:fltk-1.3.4-1/png/pngwutil.c ****       png_write_flush(png_ptr);
 8008              		.loc 1 3025 0
 8009 0364 4889DF   		movq	%rbx, %rdi
 8010 0367 E8000000 		call	png_write_flush
 8010      00
 8011              	.LVL939:
 8012              	.L848:
 8013              	.LBE576:
 8014              	.LBE575:
2979:fltk-1.3.4-1/png/pngwutil.c ****    {
 8015              		.loc 1 2979 0
 8016 036c 80BB9903 		cmpb	$0, 921(%rbx)
 8016      000000
 8017 0373 7442     		je	.L747
 8018              	.LVL940:
 8019              	.LBB583:
2983:fltk-1.3.4-1/png/pngwutil.c ****       {
 8020              		.loc 1 2983 0 discriminator 1
 8021 0375 4183FF01 		cmpl	$1, %r15d
 8022 0379 0F8E5D09 		jle	.L882
 8022      0000
2983:fltk-1.3.4-1/png/pngwutil.c ****       {
 8023              		.loc 1 2983 0 is_stmt 0 discriminator 3
 8024 037f B8010000 		movl	$1, %eax
 8024      00
 8025              	.LVL941:
 8026              		.p2align 4,,10
 8027 0384 0F1F4000 		.p2align 3
 8028              	.L851:
2985:fltk-1.3.4-1/png/pngwutil.c ****       }
 8029              		.loc 1 2985 0 is_stmt 1 discriminator 3
 8030 0388 488B93A0 		movq	928(%rbx), %rdx
 8030      030000
 8031 038f 0FB64C02 		movzbl	-1(%rdx,%rax), %ecx
 8031      FF
 8032 0394 880C02   		movb	%cl, (%rdx,%rax)
 8033              	.LVL942:
 8034 0397 4883C001 		addq	$1, %rax
 8035              	.LVL943:
2983:fltk-1.3.4-1/png/pngwutil.c ****       {
 8036              		.loc 1 2983 0 discriminator 3
 8037 039b 4139C7   		cmpl	%eax, %r15d
 8038 039e 7FE8     		jg	.L851
 8039 03a0 0FB64C24 		movzbl	59(%rsp), %ecx
 8039      3B
 8040              	.L850:
2988:fltk-1.3.4-1/png/pngwutil.c ****    }
 8041              		.loc 1 2988 0
 8042 03a5 488B4424 		movq	8(%rsp), %rax
 8042      08
 8043 03aa 0FB610   		movzbl	(%rax), %edx
 8044 03ad 488B83A0 		movq	928(%rbx), %rax
 8044      030000
 8045 03b4 881408   		movb	%dl, (%rax,%rcx)
 8046              	.L747:
 8047              	.LBE583:
2992:fltk-1.3.4-1/png/pngwutil.c **** 
 8048              		.loc 1 2992 0
 8049 03b7 4883C448 		addq	$72, %rsp
 8050              		.cfi_remember_state
 8051              		.cfi_def_cfa_offset 56
 8052 03bb 5B       		popq	%rbx
 8053              		.cfi_def_cfa_offset 48
 8054 03bc 5D       		popq	%rbp
 8055              		.cfi_def_cfa_offset 40
 8056 03bd 415C     		popq	%r12
 8057              		.cfi_def_cfa_offset 32
 8058 03bf 415D     		popq	%r13
 8059              		.cfi_def_cfa_offset 24
 8060 03c1 415E     		popq	%r14
 8061              		.cfi_def_cfa_offset 16
 8062 03c3 415F     		popq	%r15
 8063              		.cfi_def_cfa_offset 8
 8064 03c5 C3       		ret
 8065              	.LVL944:
 8066 03c6 662E0F1F 		.p2align 4,,10
 8066      84000000 
 8066      0000
 8067              		.p2align 3
 8068              	.L983:
 8069              		.cfi_restore_state
 8070              	.LBB584:
2447:fltk-1.3.4-1/png/pngwutil.c ****            i++, rp++, dp++)
 8071              		.loc 1 2447 0
 8072 03d0 48635424 		movslq	24(%rsp), %rdx
 8072      18
 8073 03d5 4C8B8B30 		movq	560(%rbx), %r9
 8073      020000
 8074 03dc 4C8D4101 		leaq	1(%rcx), %r8
 8075              	.LVL945:
 8076 03e0 498D7101 		leaq	1(%r9), %rsi
 8077              	.LVL946:
 8078 03e4 85D2     		testl	%edx, %edx
 8079 03e6 0F843A0A 		je	.L860
 8079      0000
 8080 03ec 31C0     		xorl	%eax, %eax
 8081              	.LVL947:
 8082 03ee 6690     		.p2align 4,,10
 8083              		.p2align 3
 8084              	.L758:
2450:fltk-1.3.4-1/png/pngwutil.c ****       }
 8085              		.loc 1 2450 0
 8086 03f0 440FB654 		movzbl	1(%rcx,%rax), %r10d
 8086      0101
 8087 03f6 45885401 		movb	%r10b, 1(%r9,%rax)
 8087      01
2448:fltk-1.3.4-1/png/pngwutil.c ****       {
 8088              		.loc 1 2448 0
 8089 03fb 4883C001 		addq	$1, %rax
 8090              	.LVL948:
2447:fltk-1.3.4-1/png/pngwutil.c ****            i++, rp++, dp++)
 8091              		.loc 1 2447 0
 8092 03ff 4839D0   		cmpq	%rdx, %rax
 8093 0402 75EC     		jne	.L758
 8094 0404 4901D0   		addq	%rdx, %r8
 8095 0407 4801D6   		addq	%rdx, %rsi
 8096              	.LVL949:
 8097              	.L757:
 8098 040a 4989F9   		movq	%rdi, %r9
2453:fltk-1.3.4-1/png/pngwutil.c ****          i++, rp++, lp++, dp++)
 8099              		.loc 1 2453 0 discriminator 1
 8100 040d 31C0     		xorl	%eax, %eax
 8101 040f 4929D1   		subq	%rdx, %r9
 8102 0412 4839D7   		cmpq	%rdx, %rdi
 8103 0415 761E     		jbe	.L762
 8104              	.LVL950:
 8105 0417 660F1F84 		.p2align 4,,10
 8105      00000000 
 8105      00
 8106              		.p2align 3
 8107              	.L924:
2456:fltk-1.3.4-1/png/pngwutil.c ****       }
 8108              		.loc 1 2456 0
 8109 0420 410FB614 		movzbl	(%r8,%rax), %edx
 8109      00
 8110 0425 2A540101 		subb	1(%rcx,%rax), %dl
 8111 0429 881406   		movb	%dl, (%rsi,%rax)
 8112              	.LVL951:
 8113 042c 4883C001 		addq	$1, %rax
 8114              	.LVL952:
2453:fltk-1.3.4-1/png/pngwutil.c ****          i++, rp++, lp++, dp++)
 8115              		.loc 1 2453 0
 8116 0430 4C39C8   		cmpq	%r9, %rax
 8117 0433 75EB     		jne	.L924
 8118              	.LVL953:
 8119              	.L762:
2459:fltk-1.3.4-1/png/pngwutil.c ****    }
 8120              		.loc 1 2459 0
 8121 0435 488B8330 		movq	560(%rbx), %rax
 8121      020000
 8122 043c 48894424 		movq	%rax, 8(%rsp)
 8122      08
 8123              	.LVL954:
 8124              	.L760:
 8125              	.LBE584:
2697:fltk-1.3.4-1/png/pngwutil.c ****    {
 8126              		.loc 1 2697 0
 8127 0441 F6042440 		testb	$64, (%rsp)
 8128 0445 0F842101 		je	.L804
 8128      0000
 8129              	.LVL955:
 8130              	.LBB585:
2705:fltk-1.3.4-1/png/pngwutil.c ****       {
 8131              		.loc 1 2705 0
 8132 044b 80BB9803 		cmpb	$2, 920(%rbx)
 8132      000002
 8133              	.LBB586:
 8134 0452 8B442414 		movl	20(%rsp), %eax
 8135 0456 89442430 		movl	%eax, 48(%rsp)
 8136              	.LBE586:
 8137 045a 0F847007 		je	.L995
 8137      0000
 8138              	.L805:
 8139              	.LVL956:
2738:fltk-1.3.4-1/png/pngwutil.c ****            pp = prev_row + 1; i < bpp; i++)
 8140              		.loc 1 2738 0
 8141 0460 4C8B9B40 		movq	576(%rbx), %r11
 8141      020000
2739:fltk-1.3.4-1/png/pngwutil.c ****       {
 8142              		.loc 1 2739 0
 8143 0467 8B742418 		movl	24(%rsp), %esi
2738:fltk-1.3.4-1/png/pngwutil.c ****            pp = prev_row + 1; i < bpp; i++)
 8144              		.loc 1 2738 0
 8145 046b 4C8D6101 		leaq	1(%rcx), %r12
 8146              	.LVL957:
2739:fltk-1.3.4-1/png/pngwutil.c ****       {
 8147              		.loc 1 2739 0
 8148 046f 4D8D6E01 		leaq	1(%r14), %r13
2738:fltk-1.3.4-1/png/pngwutil.c ****            pp = prev_row + 1; i < bpp; i++)
 8149              		.loc 1 2738 0
 8150 0473 498D4301 		leaq	1(%r11), %rax
 8151 0477 85F6     		testl	%esi, %esi
 8152 0479 48894424 		movq	%rax, 32(%rsp)
 8152      20
 8153              	.LVL958:
2739:fltk-1.3.4-1/png/pngwutil.c ****       {
 8154              		.loc 1 2739 0
 8155 047e 4863C6   		movslq	%esi, %rax
 8156              	.LVL959:
2738:fltk-1.3.4-1/png/pngwutil.c ****            pp = prev_row + 1; i < bpp; i++)
 8157              		.loc 1 2738 0
 8158 0481 0F847B09 		je	.L873
 8158      0000
 8159 0487 4531C0   		xorl	%r8d, %r8d
 8160 048a 31F6     		xorl	%esi, %esi
2743:fltk-1.3.4-1/png/pngwutil.c ****       }
 8161              		.loc 1 2743 0
 8162 048c BD000100 		movl	$256, %ebp
 8162      00
 8163              	.LVL960:
 8164              		.p2align 4,,10
 8165 0491 0F1F8000 		.p2align 3
 8165      000000
 8166              	.L812:
2741:fltk-1.3.4-1/png/pngwutil.c **** 
 8167              		.loc 1 2741 0
 8168 0498 430FB654 		movzbl	1(%r14,%r8), %edx
 8168      0601
 8169 049e 460FB654 		movzbl	1(%rcx,%r8), %r10d
 8169      0101
 8170 04a4 D0EA     		shrb	%dl
 8171 04a6 4129D2   		subl	%edx, %r10d
 8172 04a9 450FB6CA 		movzbl	%r10b, %r9d
2743:fltk-1.3.4-1/png/pngwutil.c ****       }
 8173              		.loc 1 2743 0
 8174 04ad 4189EA   		movl	%ebp, %r10d
 8175 04b0 4529CA   		subl	%r9d, %r10d
 8176 04b3 4180F980 		cmpb	$-128, %r9b
2741:fltk-1.3.4-1/png/pngwutil.c **** 
 8177              		.loc 1 2741 0
 8178 04b7 47884C03 		movb	%r9b, 1(%r11,%r8)
 8178      01
 8179              	.LVL961:
2743:fltk-1.3.4-1/png/pngwutil.c ****       }
 8180              		.loc 1 2743 0
 8181 04bc 450F43CA 		cmovnb	%r10d, %r9d
 8182              	.LVL962:
2739:fltk-1.3.4-1/png/pngwutil.c ****       {
 8183              		.loc 1 2739 0
 8184 04c0 4983C001 		addq	$1, %r8
 8185              	.LVL963:
2743:fltk-1.3.4-1/png/pngwutil.c ****       }
 8186              		.loc 1 2743 0
 8187 04c4 4401CE   		addl	%r9d, %esi
 8188              	.LVL964:
2738:fltk-1.3.4-1/png/pngwutil.c ****            pp = prev_row + 1; i < bpp; i++)
 8189              		.loc 1 2738 0
 8190 04c7 4939C0   		cmpq	%rax, %r8
 8191 04ca 75CC     		jne	.L812
 8192 04cc 48014424 		addq	%rax, 32(%rsp)
 8192      20
 8193 04d1 4901C4   		addq	%rax, %r12
 8194 04d4 4901C5   		addq	%rax, %r13
 8195              	.LVL965:
 8196              	.L809:
2746:fltk-1.3.4-1/png/pngwutil.c ****       {
 8197              		.loc 1 2746 0 discriminator 1
 8198 04d7 4839C7   		cmpq	%rax, %rdi
 8199 04da 7679     		jbe	.L813
 8200 04dc 4989C2   		movq	%rax, %r10
 8201 04df 49F7DA   		negq	%r10
2749:fltk-1.3.4-1/png/pngwutil.c **** 
 8202              		.loc 1 2749 0
 8203 04e2 4B8D2C14 		leaq	(%r12,%r10), %rbp
 8204 04e6 4F8D5C15 		leaq	0(%r13,%r10), %r11
 8204      00
2751:fltk-1.3.4-1/png/pngwutil.c **** 
 8205              		.loc 1 2751 0
 8206 04eb 41BC0001 		movl	$256, %r12d
 8206      0000
 8207              	.LVL966:
2749:fltk-1.3.4-1/png/pngwutil.c **** 
 8208              		.loc 1 2749 0
 8209 04f1 4E8D2C11 		leaq	(%rcx,%r10), %r13
 8210              	.LVL967:
2748:fltk-1.3.4-1/png/pngwutil.c ****              (png_byte)(((int)*rp++ - (((int)*pp++ + (int)*lp++) / 2)) & 0xff);
 8211              		.loc 1 2748 0
 8212 04f5 4C035424 		addq	32(%rsp), %r10
 8212      20
2751:fltk-1.3.4-1/png/pngwutil.c **** 
 8213              		.loc 1 2751 0
 8214 04fa 44897C24 		movl	%r15d, 32(%rsp)
 8214      20
 8215 04ff 448B7C24 		movl	48(%rsp), %r15d
 8215      30
 8216              	.LVL968:
 8217 0504 EB13     		jmp	.L816
 8218              	.LVL969:
 8219 0506 662E0F1F 		.p2align 4,,10
 8219      84000000 
 8219      0000
 8220              		.p2align 3
 8221              	.L996:
2746:fltk-1.3.4-1/png/pngwutil.c ****       {
 8222              		.loc 1 2746 0 discriminator 2
 8223 0510 4883C001 		addq	$1, %rax
 8224              	.LVL970:
 8225 0514 4839C7   		cmpq	%rax, %rdi
 8226 0517 7637     		jbe	.L975
 8227              	.LVL971:
 8228              	.L816:
2749:fltk-1.3.4-1/png/pngwutil.c **** 
 8229              		.loc 1 2749 0
 8230 0519 450FB604 		movzbl	(%r11,%rax), %r8d
 8230      03
 8231 051e 410FB654 		movzbl	1(%r13,%rax), %edx
 8231      0501
 8232 0524 440FB64C 		movzbl	0(%rbp,%rax), %r9d
 8232      0500
 8233 052a 4401C2   		addl	%r8d, %edx
 8234 052d D1FA     		sarl	%edx
 8235 052f 4129D1   		subl	%edx, %r9d
 8236 0532 450FB6C1 		movzbl	%r9b, %r8d
2751:fltk-1.3.4-1/png/pngwutil.c **** 
 8237              		.loc 1 2751 0
 8238 0536 4589E1   		movl	%r12d, %r9d
 8239 0539 4529C1   		subl	%r8d, %r9d
 8240 053c 4180F880 		cmpb	$-128, %r8b
2748:fltk-1.3.4-1/png/pngwutil.c ****              (png_byte)(((int)*rp++ - (((int)*pp++ + (int)*lp++) / 2)) & 0xff);
 8241              		.loc 1 2748 0
 8242 0540 45880402 		movb	%r8b, (%r10,%rax)
 8243              	.LVL972:
2751:fltk-1.3.4-1/png/pngwutil.c **** 
 8244              		.loc 1 2751 0
 8245 0544 450F43C1 		cmovnb	%r9d, %r8d
 8246              	.LVL973:
 8247 0548 4401C6   		addl	%r8d, %esi
 8248              	.LVL974:
2753:fltk-1.3.4-1/png/pngwutil.c ****             break;
 8249              		.loc 1 2753 0
 8250 054b 4139F7   		cmpl	%esi, %r15d
 8251 054e 73C0     		jnb	.L996
 8252              	.LVL975:
 8253              	.L975:
 8254 0550 448B7C24 		movl	32(%rsp), %r15d
 8254      20
 8255              	.LVL976:
 8256              	.L813:
2758:fltk-1.3.4-1/png/pngwutil.c ****       {
 8257              		.loc 1 2758 0
 8258 0555 80BB9803 		cmpb	$2, 920(%rbx)
 8258      000002
 8259 055c 0F84E605 		je	.L997
 8259      0000
 8260              	.LVL977:
 8261              	.L817:
2791:fltk-1.3.4-1/png/pngwutil.c ****       {
 8262              		.loc 1 2791 0
 8263 0562 3B742414 		cmpl	20(%rsp), %esi
 8264 0566 0F82F402 		jb	.L998
 8264      0000
 8265              	.LVL978:
 8266              	.L804:
 8267              	.LBE585:
2799:fltk-1.3.4-1/png/pngwutil.c ****    {
 8268              		.loc 1 2799 0
 8269 056c 803C2480 		cmpb	$-128, (%rsp)
 8270 0570 0F85FA00 		jne	.L783
 8270      0000
 8271              	.LVL979:
 8272              	.LBB589:
2804:fltk-1.3.4-1/png/pngwutil.c ****           pp = prev_row + 1; i < bpp; i++)
 8273              		.loc 1 2804 0
 8274 0576 4C8B8348 		movq	584(%rbx), %r8
 8274      020000
2805:fltk-1.3.4-1/png/pngwutil.c ****       {
 8275              		.loc 1 2805 0
 8276 057d 48635424 		movslq	24(%rsp), %rdx
 8276      18
2804:fltk-1.3.4-1/png/pngwutil.c ****           pp = prev_row + 1; i < bpp; i++)
 8277              		.loc 1 2804 0
 8278 0582 4C8D6901 		leaq	1(%rcx), %r13
 8279              	.LVL980:
2805:fltk-1.3.4-1/png/pngwutil.c ****       {
 8280              		.loc 1 2805 0
 8281 0586 4D8D6601 		leaq	1(%r14), %r12
2804:fltk-1.3.4-1/png/pngwutil.c ****           pp = prev_row + 1; i < bpp; i++)
 8282              		.loc 1 2804 0
 8283 058a 498D4001 		leaq	1(%r8), %rax
 8284 058e 85D2     		testl	%edx, %edx
 8285 0590 4989C3   		movq	%rax, %r11
 8286              	.LVL981:
 8287 0593 0F847C08 		je	.L875
 8287      0000
 8288 0599 31C0     		xorl	%eax, %eax
 8289              	.LVL982:
 8290 059b 0F1F4400 		.p2align 4,,10
 8290      00
 8291              		.p2align 3
 8292              	.L822:
2807:fltk-1.3.4-1/png/pngwutil.c ****       }
 8293              		.loc 1 2807 0 discriminator 2
 8294 05a0 0FB67401 		movzbl	1(%rcx,%rax), %esi
 8294      01
 8295 05a5 412A7406 		subb	1(%r14,%rax), %sil
 8295      01
 8296 05aa 41887400 		movb	%sil, 1(%r8,%rax)
 8296      01
2805:fltk-1.3.4-1/png/pngwutil.c ****       {
 8297              		.loc 1 2805 0 discriminator 2
 8298 05af 4883C001 		addq	$1, %rax
 8299              	.LVL983:
2804:fltk-1.3.4-1/png/pngwutil.c ****           pp = prev_row + 1; i < bpp; i++)
 8300              		.loc 1 2804 0 discriminator 2
 8301 05b3 4839D0   		cmpq	%rdx, %rax
 8302 05b6 75E8     		jne	.L822
 8303 05b8 4C89D8   		movq	%r11, %rax
 8304              	.LVL984:
 8305 05bb 4901D5   		addq	%rdx, %r13
 8306 05be 4901D4   		addq	%rdx, %r12
 8307 05c1 4801D0   		addq	%rdx, %rax
 8308 05c4 4989C3   		movq	%rax, %r11
 8309              	.L821:
 8310              	.LVL985:
 8311 05c7 4889F8   		movq	%rdi, %rax
2810:fltk-1.3.4-1/png/pngwutil.c ****       {
 8312              		.loc 1 2810 0 discriminator 2
 8313 05ca 31F6     		xorl	%esi, %esi
 8314 05cc 4829D0   		subq	%rdx, %rax
 8315 05cf 4839D7   		cmpq	%rdx, %rdi
 8316 05d2 0F861102 		jbe	.L979
 8316      0000
 8317 05d8 44893C24 		movl	%r15d, (%rsp)
 8318              	.LVL986:
 8319 05dc 4C89DD   		movq	%r11, %rbp
 8320 05df 4989C7   		movq	%rax, %r15
 8321 05e2 48895C24 		movq	%rbx, 8(%rsp)
 8321      08
 8322              	.LVL987:
 8323 05e7 EB25     		jmp	.L923
 8324              	.LVL988:
 8325 05e9 0F1F8000 		.p2align 4,,10
 8325      000000
 8326              		.p2align 3
 8327              	.L1000:
 8328              	.LBB590:
2831:fltk-1.3.4-1/png/pngwutil.c **** 
 8329              		.loc 1 2831 0
 8330 05f0 39C2     		cmpl	%eax, %edx
 8331 05f2 7F67     		jg	.L885
 8332              	.LVL989:
 8333              	.L824:
2833:fltk-1.3.4-1/png/pngwutil.c ****       }
 8334              		.loc 1 2833 0 discriminator 8
 8335 05f4 410FB644 		movzbl	0(%r13,%rsi), %eax
 8335      3500
 8336              	.LVL990:
 8337 05fa 4429C8   		subl	%r9d, %eax
 8338 05fd 88443500 		movb	%al, 0(%rbp,%rsi)
 8339              	.LVL991:
 8340 0601 4883C601 		addq	$1, %rsi
 8341              	.LVL992:
 8342              	.LBE590:
2810:fltk-1.3.4-1/png/pngwutil.c ****       {
 8343              		.loc 1 2810 0 discriminator 8
 8344 0605 4939F7   		cmpq	%rsi, %r15
 8345 0608 0F84D201 		je	.L999
 8345      0000
 8346              	.LVL993:
 8347              	.L923:
 8348              	.LBB591:
2814:fltk-1.3.4-1/png/pngwutil.c ****          c = *cp++;
 8349              		.loc 1 2814 0
 8350 060e 410FB61C 		movzbl	(%r12,%rsi), %ebx
 8350      34
 8351              	.LVL994:
2815:fltk-1.3.4-1/png/pngwutil.c ****          a = *lp++;
 8352              		.loc 1 2815 0
 8353 0613 450FB654 		movzbl	1(%r14,%rsi), %r10d
 8353      3601
 8354              	.LVL995:
2816:fltk-1.3.4-1/png/pngwutil.c **** 
 8355              		.loc 1 2816 0
 8356 0619 440FB64C 		movzbl	1(%rcx,%rsi), %r9d
 8356      3101
 8357              	.LVL996:
2818:fltk-1.3.4-1/png/pngwutil.c ****          pc = a - c;
 8358              		.loc 1 2818 0
 8359 061f 4189D8   		movl	%ebx, %r8d
 8360 0622 4529D0   		subl	%r10d, %r8d
 8361              	.LVL997:
2819:fltk-1.3.4-1/png/pngwutil.c **** 
 8362              		.loc 1 2819 0
 8363 0625 4489C8   		movl	%r9d, %eax
2826:fltk-1.3.4-1/png/pngwutil.c ****          pb = pc < 0 ? -pc : pc;
 8364              		.loc 1 2826 0
 8365 0628 4489C7   		movl	%r8d, %edi
2819:fltk-1.3.4-1/png/pngwutil.c **** 
 8366              		.loc 1 2819 0
 8367 062b 4429D0   		subl	%r10d, %eax
 8368              	.LVL998:
2826:fltk-1.3.4-1/png/pngwutil.c ****          pb = pc < 0 ? -pc : pc;
 8369              		.loc 1 2826 0
 8370 062e C1FF1F   		sarl	$31, %edi
2827:fltk-1.3.4-1/png/pngwutil.c ****          pc = (p + pc) < 0 ? -(p + pc) : p + pc;
 8371              		.loc 1 2827 0
 8372 0631 4189C3   		movl	%eax, %r11d
2826:fltk-1.3.4-1/png/pngwutil.c ****          pb = pc < 0 ? -pc : pc;
 8373              		.loc 1 2826 0
 8374 0634 89FA     		movl	%edi, %edx
2827:fltk-1.3.4-1/png/pngwutil.c ****          pc = (p + pc) < 0 ? -(p + pc) : p + pc;
 8375              		.loc 1 2827 0
 8376 0636 41C1FB1F 		sarl	$31, %r11d
2826:fltk-1.3.4-1/png/pngwutil.c ****          pb = pc < 0 ? -pc : pc;
 8377              		.loc 1 2826 0
 8378 063a 4431C2   		xorl	%r8d, %edx
 8379 063d 29FA     		subl	%edi, %edx
 8380              	.LVL999:
2827:fltk-1.3.4-1/png/pngwutil.c ****          pc = (p + pc) < 0 ? -(p + pc) : p + pc;
 8381              		.loc 1 2827 0
 8382 063f 4489DF   		movl	%r11d, %edi
 8383 0642 31C7     		xorl	%eax, %edi
2828:fltk-1.3.4-1/png/pngwutil.c **** #endif
 8384              		.loc 1 2828 0
 8385 0644 4401C0   		addl	%r8d, %eax
 8386              	.LVL1000:
2827:fltk-1.3.4-1/png/pngwutil.c ****          pc = (p + pc) < 0 ? -(p + pc) : p + pc;
 8387              		.loc 1 2827 0
 8388 0647 4429DF   		subl	%r11d, %edi
 8389              	.LVL1001:
2828:fltk-1.3.4-1/png/pngwutil.c **** #endif
 8390              		.loc 1 2828 0
 8391 064a 4189C3   		movl	%eax, %r11d
 8392 064d 41C1FB1F 		sarl	$31, %r11d
 8393 0651 4431D8   		xorl	%r11d, %eax
 8394 0654 4429D8   		subl	%r11d, %eax
 8395              	.LVL1002:
2831:fltk-1.3.4-1/png/pngwutil.c **** 
 8396              		.loc 1 2831 0
 8397 0657 39FA     		cmpl	%edi, %edx
 8398 0659 7E95     		jle	.L1000
 8399              	.L885:
2831:fltk-1.3.4-1/png/pngwutil.c **** 
 8400              		.loc 1 2831 0 is_stmt 0 discriminator 1
 8401 065b 39C7     		cmpl	%eax, %edi
 8402 065d 410F4FDA 		cmovg	%r10d, %ebx
 8403              	.LVL1003:
 8404 0661 4189D9   		movl	%ebx, %r9d
 8405              	.LVL1004:
 8406 0664 EB8E     		jmp	.L824
 8407              	.LVL1005:
 8408 0666 662E0F1F 		.p2align 4,,10
 8408      84000000 
 8408      0000
 8409              		.p2align 3
 8410              	.L783:
 8411              	.LBE591:
 8412              	.LBE589:
2838:fltk-1.3.4-1/png/pngwutil.c ****    {
 8413              		.loc 1 2838 0 is_stmt 1
 8414 0670 803C2400 		cmpb	$0, (%rsp)
 8415 0674 0F8975FC 		jns	.L801
 8415      FFFF
 8416              	.LVL1006:
 8417              	.LBB592:
2846:fltk-1.3.4-1/png/pngwutil.c ****       {
 8418              		.loc 1 2846 0
 8419 067a 80BB9803 		cmpb	$2, 920(%rbx)
 8419      000002
 8420              	.LBB593:
 8421 0681 8B442414 		movl	20(%rsp), %eax
 8422 0685 89442420 		movl	%eax, 32(%rsp)
 8423              	.LBE593:
 8424 0689 0F84DC06 		je	.L1001
 8424      0000
 8425              	.L828:
 8426              	.LVL1007:
2879:fltk-1.3.4-1/png/pngwutil.c ****           pp = prev_row + 1; i < bpp; i++)
 8427              		.loc 1 2879 0
 8428 068f 4C8B9348 		movq	584(%rbx), %r10
 8428      020000
2880:fltk-1.3.4-1/png/pngwutil.c ****       {
 8429              		.loc 1 2880 0
 8430 0696 48637424 		movslq	24(%rsp), %rsi
 8430      18
2879:fltk-1.3.4-1/png/pngwutil.c ****           pp = prev_row + 1; i < bpp; i++)
 8431              		.loc 1 2879 0
 8432 069b 4C8D6901 		leaq	1(%rcx), %r13
 8433              	.LVL1008:
 8434 069f 498D4201 		leaq	1(%r10), %rax
 8435 06a3 85F6     		testl	%esi, %esi
2880:fltk-1.3.4-1/png/pngwutil.c ****       {
 8436              		.loc 1 2880 0
 8437 06a5 48893424 		movq	%rsi, (%rsp)
 8438              	.LVL1009:
2879:fltk-1.3.4-1/png/pngwutil.c ****           pp = prev_row + 1; i < bpp; i++)
 8439              		.loc 1 2879 0
 8440 06a9 4989C4   		movq	%rax, %r12
 8441              	.LVL1010:
2880:fltk-1.3.4-1/png/pngwutil.c ****       {
 8442              		.loc 1 2880 0
 8443 06ac 498D4601 		leaq	1(%r14), %rax
 8444              	.LVL1011:
 8445 06b0 48894424 		movq	%rax, 48(%rsp)
 8445      30
 8446              	.LVL1012:
2879:fltk-1.3.4-1/png/pngwutil.c ****           pp = prev_row + 1; i < bpp; i++)
 8447              		.loc 1 2879 0
 8448 06b5 0F847207 		je	.L879
 8448      0000
 8449 06bb 31D2     		xorl	%edx, %edx
 8450 06bd 4531C0   		xorl	%r8d, %r8d
2884:fltk-1.3.4-1/png/pngwutil.c ****       }
 8451              		.loc 1 2884 0
 8452 06c0 41BB0001 		movl	$256, %r11d
 8452      0000
 8453 06c6 4889F5   		movq	%rsi, %rbp
 8454              	.LVL1013:
 8455 06c9 0F1F8000 		.p2align 4,,10
 8455      000000
 8456              		.p2align 3
 8457              	.L835:
2882:fltk-1.3.4-1/png/pngwutil.c **** 
 8458              		.loc 1 2882 0
 8459 06d0 0FB64411 		movzbl	1(%rcx,%rdx), %eax
 8459      01
2884:fltk-1.3.4-1/png/pngwutil.c ****       }
 8460              		.loc 1 2884 0
 8461 06d5 4589D9   		movl	%r11d, %r9d
2882:fltk-1.3.4-1/png/pngwutil.c **** 
 8462              		.loc 1 2882 0
 8463 06d8 412A4416 		subb	1(%r14,%rdx), %al
 8463      01
2884:fltk-1.3.4-1/png/pngwutil.c ****       }
 8464              		.loc 1 2884 0
 8465 06dd 0FB6F0   		movzbl	%al, %esi
2882:fltk-1.3.4-1/png/pngwutil.c **** 
 8466              		.loc 1 2882 0
 8467 06e0 41884412 		movb	%al, 1(%r10,%rdx)
 8467      01
 8468              	.LVL1014:
2884:fltk-1.3.4-1/png/pngwutil.c ****       }
 8469              		.loc 1 2884 0
 8470 06e5 4129F1   		subl	%esi, %r9d
 8471 06e8 3C80     		cmpb	$-128, %al
 8472 06ea 410F43F1 		cmovnb	%r9d, %esi
 8473              	.LVL1015:
2880:fltk-1.3.4-1/png/pngwutil.c ****       {
 8474              		.loc 1 2880 0
 8475 06ee 4883C201 		addq	$1, %rdx
 8476              	.LVL1016:
2884:fltk-1.3.4-1/png/pngwutil.c ****       }
 8477              		.loc 1 2884 0
 8478 06f2 4101F0   		addl	%esi, %r8d
 8479              	.LVL1017:
2879:fltk-1.3.4-1/png/pngwutil.c ****           pp = prev_row + 1; i < bpp; i++)
 8480              		.loc 1 2879 0
 8481 06f5 4839D5   		cmpq	%rdx, %rbp
 8482 06f8 75D6     		jne	.L835
 8483 06fa 488B0424 		movq	(%rsp), %rax
 8484              	.LVL1018:
 8485 06fe 48014424 		addq	%rax, 48(%rsp)
 8485      30
 8486 0703 4C89E6   		movq	%r12, %rsi
 8487 0706 4801C6   		addq	%rax, %rsi
 8488 0709 4901C5   		addq	%rax, %r13
 8489 070c 4989F4   		movq	%rsi, %r12
 8490              	.LVL1019:
 8491              	.L832:
2887:fltk-1.3.4-1/png/pngwutil.c ****       {
 8492              		.loc 1 2887 0 discriminator 1
 8493 070f 483B3C24 		cmpq	(%rsp), %rdi
 8494 0713 0F869901 		jbe	.L836
 8494      0000
 8495              	.LBB594:
2926:fltk-1.3.4-1/png/pngwutil.c **** 
 8496              		.loc 1 2926 0
 8497 0719 48897C24 		movq	%rdi, 24(%rsp)
 8497      18
 8498              	.LVL1020:
 8499 071e 44897C24 		movl	%r15d, 60(%rsp)
 8499      3C
 8500              	.LBE594:
2887:fltk-1.3.4-1/png/pngwutil.c ****       {
 8501              		.loc 1 2887 0
 8502 0723 31F6     		xorl	%esi, %esi
 8503              	.LBB595:
2926:fltk-1.3.4-1/png/pngwutil.c **** 
 8504              		.loc 1 2926 0
 8505 0725 4C8B7C24 		movq	48(%rsp), %r15
 8505      30
 8506 072a 4C89E7   		movq	%r12, %rdi
 8507              	.LVL1021:
 8508 072d 48895C24 		movq	%rbx, 48(%rsp)
 8508      30
 8509              	.LVL1022:
 8510 0732 EB4E     		jmp	.L841
 8511              	.LVL1023:
 8512              		.p2align 4,,10
 8513 0734 0F1F4000 		.p2align 3
 8514              	.L1002:
2907:fltk-1.3.4-1/png/pngwutil.c **** #else /* SLOW_PAETH */
 8515              		.loc 1 2907 0
 8516 0738 39C2     		cmpl	%eax, %edx
 8517 073a 0F8F9100 		jg	.L886
 8517      0000
 8518              	.LVL1024:
 8519              	.L837:
2924:fltk-1.3.4-1/png/pngwutil.c **** 
 8520              		.loc 1 2924 0 discriminator 8
 8521 0740 410FB644 		movzbl	0(%r13,%rsi), %eax
 8521      3500
 8522              	.LVL1025:
2926:fltk-1.3.4-1/png/pngwutil.c **** 
 8523              		.loc 1 2926 0 discriminator 8
 8524 0746 41B90001 		movl	$256, %r9d
 8524      0000
 8525              	.LVL1026:
2924:fltk-1.3.4-1/png/pngwutil.c **** 
 8526              		.loc 1 2924 0 discriminator 8
 8527 074c 4429D8   		subl	%r11d, %eax
2926:fltk-1.3.4-1/png/pngwutil.c **** 
 8528              		.loc 1 2926 0 discriminator 8
 8529 074f 0FB6D0   		movzbl	%al, %edx
 8530              	.LVL1027:
2924:fltk-1.3.4-1/png/pngwutil.c **** 
 8531              		.loc 1 2924 0 discriminator 8
 8532 0752 880437   		movb	%al, (%rdi,%rsi)
 8533              	.LVL1028:
2926:fltk-1.3.4-1/png/pngwutil.c **** 
 8534              		.loc 1 2926 0 discriminator 8
 8535 0755 4129D1   		subl	%edx, %r9d
 8536 0758 3C80     		cmpb	$-128, %al
 8537 075a 410F43D1 		cmovnb	%r9d, %edx
 8538              	.LVL1029:
 8539 075e 4101D0   		addl	%edx, %r8d
 8540              	.LVL1030:
2928:fltk-1.3.4-1/png/pngwutil.c ****             break;
 8541              		.loc 1 2928 0 discriminator 8
 8542 0761 44394424 		cmpl	%r8d, 32(%rsp)
 8542      20
 8543 0766 0F823C01 		jb	.L977
 8543      0000
 8544              	.LVL1031:
 8545              	.LBE595:
2887:fltk-1.3.4-1/png/pngwutil.c ****       {
 8546              		.loc 1 2887 0 discriminator 2
 8547 076c 488B0424 		movq	(%rsp), %rax
 8548              	.LVL1032:
 8549 0770 4883C601 		addq	$1, %rsi
 8550              	.LVL1033:
 8551 0774 4801F0   		addq	%rsi, %rax
 8552 0777 48394424 		cmpq	%rax, 24(%rsp)
 8552      18
 8553 077c 0F862601 		jbe	.L977
 8553      0000
 8554              	.LVL1034:
 8555              	.L841:
 8556              	.LBB596:
2891:fltk-1.3.4-1/png/pngwutil.c ****          c = *cp++;
 8557              		.loc 1 2891 0
 8558 0782 450FB624 		movzbl	(%r15,%rsi), %r12d
 8558      37
 8559              	.LVL1035:
2892:fltk-1.3.4-1/png/pngwutil.c ****          a = *lp++;
 8560              		.loc 1 2892 0
 8561 0787 410FB65C 		movzbl	1(%r14,%rsi), %ebx
 8561      3601
 8562              	.LVL1036:
2893:fltk-1.3.4-1/png/pngwutil.c **** 
 8563              		.loc 1 2893 0
 8564 078d 440FB65C 		movzbl	1(%rcx,%rsi), %r11d
 8564      3101
 8565              	.LVL1037:
2896:fltk-1.3.4-1/png/pngwutil.c ****          pc = a - c;
 8566              		.loc 1 2896 0
 8567 0793 4589E2   		movl	%r12d, %r10d
 8568 0796 4129DA   		subl	%ebx, %r10d
 8569              	.LVL1038:
2897:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_USE_ABS
 8570              		.loc 1 2897 0
 8571 0799 4489D8   		movl	%r11d, %eax
2903:fltk-1.3.4-1/png/pngwutil.c ****          pb = pc < 0 ? -pc : pc;
 8572              		.loc 1 2903 0
 8573 079c 4589D1   		movl	%r10d, %r9d
2897:fltk-1.3.4-1/png/pngwutil.c **** #ifdef PNG_USE_ABS
 8574              		.loc 1 2897 0
 8575 079f 29D8     		subl	%ebx, %eax
 8576              	.LVL1039:
2903:fltk-1.3.4-1/png/pngwutil.c ****          pb = pc < 0 ? -pc : pc;
 8577              		.loc 1 2903 0
 8578 07a1 41C1F91F 		sarl	$31, %r9d
2904:fltk-1.3.4-1/png/pngwutil.c ****          pc = (p + pc) < 0 ? -(p + pc) : p + pc;
 8579              		.loc 1 2904 0
 8580 07a5 89C5     		movl	%eax, %ebp
2903:fltk-1.3.4-1/png/pngwutil.c ****          pb = pc < 0 ? -pc : pc;
 8581              		.loc 1 2903 0
 8582 07a7 4489CA   		movl	%r9d, %edx
2904:fltk-1.3.4-1/png/pngwutil.c ****          pc = (p + pc) < 0 ? -(p + pc) : p + pc;
 8583              		.loc 1 2904 0
 8584 07aa C1FD1F   		sarl	$31, %ebp
2903:fltk-1.3.4-1/png/pngwutil.c ****          pb = pc < 0 ? -pc : pc;
 8585              		.loc 1 2903 0
 8586 07ad 4431D2   		xorl	%r10d, %edx
 8587 07b0 4429CA   		subl	%r9d, %edx
 8588              	.LVL1040:
2904:fltk-1.3.4-1/png/pngwutil.c ****          pc = (p + pc) < 0 ? -(p + pc) : p + pc;
 8589              		.loc 1 2904 0
 8590 07b3 4189E9   		movl	%ebp, %r9d
 8591 07b6 4131C1   		xorl	%eax, %r9d
2905:fltk-1.3.4-1/png/pngwutil.c **** #endif
 8592              		.loc 1 2905 0
 8593 07b9 4401D0   		addl	%r10d, %eax
 8594              	.LVL1041:
2904:fltk-1.3.4-1/png/pngwutil.c ****          pc = (p + pc) < 0 ? -(p + pc) : p + pc;
 8595              		.loc 1 2904 0
 8596 07bc 4129E9   		subl	%ebp, %r9d
 8597              	.LVL1042:
2905:fltk-1.3.4-1/png/pngwutil.c **** #endif
 8598              		.loc 1 2905 0
 8599 07bf 89C5     		movl	%eax, %ebp
 8600 07c1 C1FD1F   		sarl	$31, %ebp
 8601 07c4 31E8     		xorl	%ebp, %eax
 8602 07c6 29E8     		subl	%ebp, %eax
 8603              	.LVL1043:
2907:fltk-1.3.4-1/png/pngwutil.c **** #else /* SLOW_PAETH */
 8604              		.loc 1 2907 0
 8605 07c8 4439CA   		cmpl	%r9d, %edx
 8606 07cb 0F8E67FF 		jle	.L1002
 8606      FFFF
 8607              	.L886:
2907:fltk-1.3.4-1/png/pngwutil.c **** #else /* SLOW_PAETH */
 8608              		.loc 1 2907 0 is_stmt 0 discriminator 1
 8609 07d1 4139C1   		cmpl	%eax, %r9d
 8610 07d4 4589E3   		movl	%r12d, %r11d
 8611              	.LVL1044:
 8612 07d7 440F4FDB 		cmovg	%ebx, %r11d
 8613 07db E960FFFF 		jmp	.L837
 8613      FF
 8614              	.LVL1045:
 8615              		.p2align 4,,10
 8616              		.p2align 3
 8617              	.L999:
 8618 07e0 448B3C24 		movl	(%rsp), %r15d
 8619 07e4 488B5C24 		movq	8(%rsp), %rbx
 8619      08
 8620              	.LVL1046:
 8621              	.L979:
 8622              	.LBE596:
2968:fltk-1.3.4-1/png/pngwutil.c ****       }
 8623              		.loc 1 2968 0 is_stmt 1
 8624 07e9 488B8348 		movq	584(%rbx), %rax
 8624      020000
 8625 07f0 48894424 		movq	%rax, 8(%rsp)
 8625      08
 8626              	.LVL1047:
 8627 07f5 E9F5FAFF 		jmp	.L801
 8627      FF
 8628              	.LVL1048:
 8629 07fa 660F1F44 		.p2align 4,,10
 8629      0000
 8630              		.p2align 3
 8631              	.L994:
 8632              	.LBE592:
 8633              	.LBB599:
 8634              	.LBB582:
 8635              	.LBB581:
 8636              	.LBB580:
 8637 0800 4889DF   		movq	%rbx, %rdi
 8638 0803 E8000000 		call	png_write_finish_row.part.5
 8638      00
 8639              	.LVL1049:
 8640 0808 E93AFBFF 		jmp	.L847
 8640      FF
 8641              	.LVL1050:
 8642 080d 0F1F00   		.p2align 4,,10
 8643              		.p2align 3
 8644              	.L857:
 8645              	.LBE580:
 8646              	.LBE581:
 8647              	.LBE582:
 8648              	.LBE599:
2356:fltk-1.3.4-1/png/pngwutil.c **** 
 8649              		.loc 1 2356 0
 8650 0810 C7442414 		movl	$2147483647, 20(%rsp)
 8650      FFFFFF7F 
 8651 0818 E991F8FF 		jmp	.L748
 8651      FF
 8652              	.LVL1051:
 8653 081d 0F1F00   		.p2align 4,,10
 8654              		.p2align 3
 8655              	.L988:
 8656              	.LBB600:
2573:fltk-1.3.4-1/png/pngwutil.c ****           pp = prev_row + 1; i < row_bytes;
 8657              		.loc 1 2573 0
 8658 0820 4885FF   		testq	%rdi, %rdi
 8659 0823 488BB338 		movq	568(%rbx), %rsi
 8659      020000
 8660              	.LVL1052:
 8661 082a 0F84EC05 		je	.L867
 8661      0000
 8662 0830 31C0     		xorl	%eax, %eax
 8663              	.LVL1053:
 8664              		.p2align 4,,10
 8665 0832 660F1F44 		.p2align 3
 8665      0000
 8666              	.L782:
2577:fltk-1.3.4-1/png/pngwutil.c ****       }
 8667              		.loc 1 2577 0
 8668 0838 0FB65401 		movzbl	1(%rcx,%rax), %edx
 8668      01
 8669 083d 412A5406 		subb	1(%r14,%rax), %dl
 8669      01
 8670 0842 88540601 		movb	%dl, 1(%rsi,%rax)
2575:fltk-1.3.4-1/png/pngwutil.c ****       {
 8671              		.loc 1 2575 0
 8672 0846 4883C001 		addq	$1, %rax
 8673              	.LVL1054:
2573:fltk-1.3.4-1/png/pngwutil.c ****           pp = prev_row + 1; i < row_bytes;
 8674              		.loc 1 2573 0
 8675 084a 4839C7   		cmpq	%rax, %rdi
 8676 084d 75E9     		jne	.L782
 8677 084f 488B8338 		movq	568(%rbx), %rax
 8677      020000
 8678              	.LVL1055:
 8679 0856 48894424 		movq	%rax, 8(%rsp)
 8679      08
 8680              	.LVL1056:
 8681 085b E98FFAFF 		jmp	.L801
 8681      FF
 8682              	.LVL1057:
 8683              		.p2align 4,,10
 8684              		.p2align 3
 8685              	.L998:
 8686              	.LBE600:
 8687              	.LBB601:
2794:fltk-1.3.4-1/png/pngwutil.c ****       }
 8688              		.loc 1 2794 0
 8689 0860 488B8340 		movq	576(%rbx), %rax
 8689      020000
 8690 0867 89742414 		movl	%esi, 20(%rsp)
 8691 086b 48894424 		movq	%rax, 8(%rsp)
 8691      08
 8692              	.LVL1058:
 8693 0870 E9F7FCFF 		jmp	.L804
 8693      FF
 8694              	.LVL1059:
 8695              		.p2align 4,,10
 8696 0875 0F1F00   		.p2align 3
 8697              	.L993:
 8698              	.LBE601:
 8699              	.LBB602:
2673:fltk-1.3.4-1/png/pngwutil.c ****       }
 8700              		.loc 1 2673 0
 8701 0878 488B8338 		movq	568(%rbx), %rax
 8701      020000
 8702 087f 44894424 		movl	%r8d, 20(%rsp)
 8702      14
 8703 0884 48894424 		movq	%rax, 8(%rsp)
 8703      08
 8704              	.LVL1060:
 8705 0889 E9AFF9FF 		jmp	.L784
 8705      FF
 8706              	.LVL1061:
 8707 088e 6690     		.p2align 4,,10
 8708              		.p2align 3
 8709              	.L987:
 8710              	.LBE602:
 8711              	.LBB603:
2563:fltk-1.3.4-1/png/pngwutil.c ****       }
 8712              		.loc 1 2563 0
 8713 0890 488B8330 		movq	560(%rbx), %rax
 8713      020000
 8714 0897 89742414 		movl	%esi, 20(%rsp)
 8715 089b 48894424 		movq	%rax, 8(%rsp)
 8715      08
 8716              	.LVL1062:
 8717 08a0 E9FFF8FF 		jmp	.L763
 8717      FF
 8718              	.LVL1063:
 8719              		.p2align 4,,10
 8720 08a5 0F1F00   		.p2align 3
 8721              	.L977:
 8722 08a8 448B7C24 		movl	60(%rsp), %r15d
 8722      3C
 8723 08ad 488B5C24 		movq	48(%rsp), %rbx
 8723      30
 8724              	.LVL1064:
 8725              	.L836:
 8726              	.LBE603:
 8727              	.LBB604:
2933:fltk-1.3.4-1/png/pngwutil.c ****       {
 8728              		.loc 1 2933 0
 8729 08b2 80BB9803 		cmpb	$2, 920(%rbx)
 8729      000002
 8730 08b9 0F842704 		je	.L1003
 8730      0000
 8731              	.LVL1065:
 8732              	.L842:
2966:fltk-1.3.4-1/png/pngwutil.c ****       {
 8733              		.loc 1 2966 0
 8734 08bf 443B4424 		cmpl	20(%rsp), %r8d
 8734      14
 8735 08c4 0F8325FA 		jnb	.L801
 8735      FFFF
 8736 08ca E91AFFFF 		jmp	.L979
 8736      FF
 8737              	.LVL1066:
 8738 08cf 90       		.p2align 4,,10
 8739              		.p2align 3
 8740              	.L989:
 8741              	.LBE604:
 8742              	.LBB605:
 8743              	.LBB570:
2596:fltk-1.3.4-1/png/pngwutil.c ****          lmhi = (lmins >> PNG_HISHIFT) & PNG_HIMASK;
 8744              		.loc 1 2596 0
 8745 08d0 8B742414 		movl	20(%rsp), %esi
 8746 08d4 440FB7C6 		movzwl	%si, %r8d
 8747              	.LVL1067:
2597:fltk-1.3.4-1/png/pngwutil.c **** 
 8748              		.loc 1 2597 0
 8749 08d8 C1EE0A   		shrl	$10, %esi
 8750 08db 81E6C0FF 		andl	$4194240, %esi
 8750      3F00
 8751              	.LVL1068:
2599:fltk-1.3.4-1/png/pngwutil.c ****          {
 8752              		.loc 1 2599 0
 8753 08e1 4585FF   		testl	%r15d, %r15d
 8754 08e4 7442     		je	.L786
 8755 08e6 4C8B8BA0 		movq	928(%rbx), %r9
 8755      030000
 8756 08ed 31C0     		xorl	%eax, %eax
 8757 08ef EB10     		jmp	.L788
 8758              	.LVL1069:
 8759              		.p2align 4,,10
 8760 08f1 0F1F8000 		.p2align 3
 8760      000000
 8761              	.L787:
 8762 08f8 4883C001 		addq	$1, %rax
 8763              	.LVL1070:
2599:fltk-1.3.4-1/png/pngwutil.c ****          {
 8764              		.loc 1 2599 0 is_stmt 0 discriminator 2
 8765 08fc 4139C7   		cmpl	%eax, %r15d
 8766 08ff 7E27     		jle	.L786
 8767              	.L788:
 8768              	.LVL1071:
2601:fltk-1.3.4-1/png/pngwutil.c ****             {
 8769              		.loc 1 2601 0 is_stmt 1
 8770 0901 41803C01 		cmpb	$2, (%r9,%rax)
 8770      02
 8771 0906 75F0     		jne	.L787
2603:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 8772              		.loc 1 2603 0
 8773 0908 488B93B0 		movq	944(%rbx), %rdx
 8773      030000
 8774 090f 0FB71442 		movzwl	(%rdx,%rax,2), %edx
 8775 0913 440FAFC2 		imull	%edx, %r8d
 8776              	.LVL1072:
2606:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 8777              		.loc 1 2606 0
 8778 0917 0FAFF2   		imull	%edx, %esi
 8779              	.LVL1073:
2603:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 8780              		.loc 1 2603 0
 8781 091a 41C1E808 		shrl	$8, %r8d
 8782              	.LVL1074:
2606:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 8783              		.loc 1 2606 0
 8784 091e C1EE08   		shrl	$8, %esi
 8785              	.LVL1075:
 8786 0921 EBD5     		jmp	.L787
 8787              	.LVL1076:
 8788              		.p2align 4,,10
 8789 0923 0F1F4400 		.p2align 3
 8789      00
 8790              	.L786:
2611:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 8791              		.loc 1 2611 0
 8792 0928 488B83C0 		movq	960(%rbx), %rax
 8792      030000
2618:fltk-1.3.4-1/png/pngwutil.c **** 
 8793              		.loc 1 2618 0
 8794 092f 41BBFFFF 		movl	$2147483647, %r11d
 8794      FF7F
2611:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 8795              		.loc 1 2611 0
 8796 0935 0FB74004 		movzwl	4(%rax), %eax
 8797              	.LVL1077:
2614:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 8798              		.loc 1 2614 0
 8799 0939 0FAFF0   		imull	%eax, %esi
 8800              	.LVL1078:
 8801 093c C1EE03   		shrl	$3, %esi
 8802              	.LVL1079:
2617:fltk-1.3.4-1/png/pngwutil.c ****             lmins = PNG_MAXSUM;
 8803              		.loc 1 2617 0
 8804 093f 81FEC0FF 		cmpl	$4194240, %esi
 8804      3F00
 8805 0945 770F     		ja	.L789
2611:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 8806              		.loc 1 2611 0
 8807 0947 440FAFC0 		imull	%eax, %r8d
 8808              	.LVL1080:
2621:fltk-1.3.4-1/png/pngwutil.c ****       }
 8809              		.loc 1 2621 0
 8810 094b C1E60A   		sall	$10, %esi
 8811              	.LVL1081:
 8812 094e 41C1E803 		shrl	$3, %r8d
 8813              	.LVL1082:
 8814 0952 458D1C30 		leal	(%r8,%rsi), %r11d
 8815              	.LVL1083:
 8816              	.L789:
 8817              	.LBE570:
2625:fltk-1.3.4-1/png/pngwutil.c ****           pp = prev_row + 1; i < row_bytes; i++)
 8818              		.loc 1 2625 0
 8819 0956 488B8338 		movq	568(%rbx), %rax
 8819      020000
 8820 095d 4885FF   		testq	%rdi, %rdi
 8821 0960 4C8D6101 		leaq	1(%rcx), %r12
 8822              	.LVL1084:
2626:fltk-1.3.4-1/png/pngwutil.c ****       {
 8823              		.loc 1 2626 0
 8824 0964 498D6E01 		leaq	1(%r14), %rbp
2625:fltk-1.3.4-1/png/pngwutil.c ****           pp = prev_row + 1; i < row_bytes; i++)
 8825              		.loc 1 2625 0
 8826 0968 4C8D5001 		leaq	1(%rax), %r10
 8827              	.LVL1085:
 8828 096c 0F8574F8 		jne	.L852
 8828      FFFF
 8829              	.LVL1086:
 8830              	.LBB571:
2644:fltk-1.3.4-1/png/pngwutil.c ****          {
 8831              		.loc 1 2644 0
 8832 0972 4531C0   		xorl	%r8d, %r8d
 8833 0975 31F6     		xorl	%esi, %esi
 8834 0977 4585FF   		testl	%r15d, %r15d
 8835 097a 0F85F402 		jne	.L855
 8835      0000
2656:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 8836              		.loc 1 2656 0
 8837 0980 488B83B8 		movq	952(%rbx), %rax
 8837      030000
 8838 0987 4489FE   		movl	%r15d, %esi
2659:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 8839              		.loc 1 2659 0
 8840 098a 31D2     		xorl	%edx, %edx
2656:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 8841              		.loc 1 2656 0
 8842 098c 0FB74004 		movzwl	4(%rax), %eax
 8843              	.LVL1087:
 8844              	.L854:
 8845 0990 0FAFF0   		imull	%eax, %esi
 8846              	.LVL1088:
2666:fltk-1.3.4-1/png/pngwutil.c ****       }
 8847              		.loc 1 2666 0
 8848 0993 C1E20A   		sall	$10, %edx
 8849              	.LVL1089:
 8850 0996 C1EE03   		shrl	$3, %esi
 8851              	.LVL1090:
 8852 0999 448D0416 		leal	(%rsi,%rdx), %r8d
 8853              	.LVL1091:
 8854 099d E990F8FF 		jmp	.L794
 8854      FF
 8855              	.LVL1092:
 8856              		.p2align 4,,10
 8857 09a2 660F1F44 		.p2align 3
 8857      0000
 8858              	.L986:
 8859              	.LBE571:
 8860              	.LBE605:
 8861              	.LBB606:
 8862              	.LBB566:
2531:fltk-1.3.4-1/png/pngwutil.c ****          sumhi = (sum >> PNG_HISHIFT) & PNG_HIMASK;
 8863              		.loc 1 2531 0
 8864 09a8 0FB7D6   		movzwl	%si, %edx
 8865              	.LVL1093:
2532:fltk-1.3.4-1/png/pngwutil.c **** 
 8866              		.loc 1 2532 0
 8867 09ab C1EE0A   		shrl	$10, %esi
 8868              	.LVL1094:
 8869 09ae 81E6C0FF 		andl	$4194240, %esi
 8869      3F00
 8870              	.LVL1095:
2534:fltk-1.3.4-1/png/pngwutil.c ****          {
 8871              		.loc 1 2534 0
 8872 09b4 4585FF   		testl	%r15d, %r15d
 8873 09b7 743F     		je	.L777
 8874 09b9 4C8B83A0 		movq	928(%rbx), %r8
 8874      030000
 8875 09c0 31C0     		xorl	%eax, %eax
 8876 09c2 EB0D     		jmp	.L779
 8877              	.LVL1096:
 8878              		.p2align 4,,10
 8879 09c4 0F1F4000 		.p2align 3
 8880              	.L778:
 8881 09c8 4883C001 		addq	$1, %rax
 8882              	.LVL1097:
2534:fltk-1.3.4-1/png/pngwutil.c ****          {
 8883              		.loc 1 2534 0 is_stmt 0 discriminator 2
 8884 09cc 4139C7   		cmpl	%eax, %r15d
 8885 09cf 7E27     		jle	.L777
 8886              	.L779:
 8887              	.LVL1098:
2536:fltk-1.3.4-1/png/pngwutil.c ****             {
 8888              		.loc 1 2536 0 is_stmt 1
 8889 09d1 41803C00 		cmpb	$1, (%r8,%rax)
 8889      01
 8890 09d6 75F0     		jne	.L778
2538:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 8891              		.loc 1 2538 0
 8892 09d8 4C8B8BB0 		movq	944(%rbx), %r9
 8892      030000
 8893 09df 450FB70C 		movzwl	(%r9,%rax,2), %r9d
 8893      41
 8894 09e4 410FAFD1 		imull	%r9d, %edx
 8895              	.LVL1099:
2541:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 8896              		.loc 1 2541 0
 8897 09e8 410FAFF1 		imull	%r9d, %esi
 8898              	.LVL1100:
2538:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 8899              		.loc 1 2538 0
 8900 09ec C1EA08   		shrl	$8, %edx
 8901              	.LVL1101:
2541:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 8902              		.loc 1 2541 0
 8903 09ef C1EE08   		shrl	$8, %esi
 8904              	.LVL1102:
 8905 09f2 EBD4     		jmp	.L778
 8906              	.LVL1103:
 8907              		.p2align 4,,10
 8908 09f4 0F1F4000 		.p2align 3
 8909              	.L777:
2546:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 8910              		.loc 1 2546 0
 8911 09f8 488B83C0 		movq	960(%rbx), %rax
 8911      030000
 8912 09ff 440FB740 		movzwl	2(%rax), %r8d
 8912      02
 8913              	.LVL1104:
2549:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 8914              		.loc 1 2549 0
 8915 0a04 410FAFF0 		imull	%r8d, %esi
 8916              	.LVL1105:
 8917 0a08 89F0     		movl	%esi, %eax
2553:fltk-1.3.4-1/png/pngwutil.c **** 
 8918              		.loc 1 2553 0
 8919 0a0a BEFFFFFF 		movl	$2147483647, %esi
 8919      7F
2549:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 8920              		.loc 1 2549 0
 8921 0a0f C1E803   		shrl	$3, %eax
 8922              	.LVL1106:
2552:fltk-1.3.4-1/png/pngwutil.c ****             sum = PNG_MAXSUM;
 8923              		.loc 1 2552 0
 8924 0a12 3DC0FF3F 		cmpl	$4194240, %eax
 8924      00
 8925 0a17 0F8778F7 		ja	.L776
 8925      FFFF
2546:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 8926              		.loc 1 2546 0
 8927 0a1d 410FAFD0 		imull	%r8d, %edx
 8928              	.LVL1107:
2556:fltk-1.3.4-1/png/pngwutil.c ****       }
 8929              		.loc 1 2556 0
 8930 0a21 C1E00A   		sall	$10, %eax
 8931              	.LVL1108:
 8932 0a24 C1EA03   		shrl	$3, %edx
 8933              	.LVL1109:
 8934 0a27 8D3402   		leal	(%rdx,%rax), %esi
 8935              	.LVL1110:
 8936 0a2a E966F7FF 		jmp	.L776
 8936      FF
 8937              	.LVL1111:
 8938 0a2f 90       		.p2align 4,,10
 8939              		.p2align 3
 8940              	.L984:
 8941              	.LBE566:
 8942              	.LBB567:
2478:fltk-1.3.4-1/png/pngwutil.c ****          lmhi = (lmins >> PNG_HISHIFT) & PNG_HIMASK;
 8943              		.loc 1 2478 0
 8944 0a30 4489DA   		movl	%r11d, %edx
 8945 0a33 410FB7F3 		movzwl	%r11w, %esi
 8946              	.LVL1112:
2479:fltk-1.3.4-1/png/pngwutil.c **** 
 8947              		.loc 1 2479 0
 8948 0a37 C1EA0A   		shrl	$10, %edx
 8949 0a3a 81E2C0FF 		andl	$4194240, %edx
 8949      3F00
 8950              	.LVL1113:
2481:fltk-1.3.4-1/png/pngwutil.c ****          {
 8951              		.loc 1 2481 0
 8952 0a40 4585FF   		testl	%r15d, %r15d
 8953 0a43 743B     		je	.L765
 8954 0a45 4C8B83A0 		movq	928(%rbx), %r8
 8954      030000
 8955 0a4c 31C0     		xorl	%eax, %eax
 8956 0a4e EB09     		jmp	.L767
 8957              	.LVL1114:
 8958              		.p2align 4,,10
 8959              		.p2align 3
 8960              	.L766:
 8961 0a50 4883C001 		addq	$1, %rax
 8962              	.LVL1115:
2481:fltk-1.3.4-1/png/pngwutil.c ****          {
 8963              		.loc 1 2481 0 is_stmt 0 discriminator 2
 8964 0a54 4139C7   		cmpl	%eax, %r15d
 8965 0a57 7E27     		jle	.L765
 8966              	.L767:
 8967              	.LVL1116:
2483:fltk-1.3.4-1/png/pngwutil.c ****             {
 8968              		.loc 1 2483 0 is_stmt 1
 8969 0a59 41803C00 		cmpb	$1, (%r8,%rax)
 8969      01
 8970 0a5e 75F0     		jne	.L766
2485:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 8971              		.loc 1 2485 0
 8972 0a60 4C8B8BB0 		movq	944(%rbx), %r9
 8972      030000
 8973 0a67 450FB70C 		movzwl	(%r9,%rax,2), %r9d
 8973      41
 8974 0a6c 410FAFF1 		imull	%r9d, %esi
 8975              	.LVL1117:
2488:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 8976              		.loc 1 2488 0
 8977 0a70 410FAFD1 		imull	%r9d, %edx
 8978              	.LVL1118:
2485:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 8979              		.loc 1 2485 0
 8980 0a74 C1EE08   		shrl	$8, %esi
 8981              	.LVL1119:
2488:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 8982              		.loc 1 2488 0
 8983 0a77 C1EA08   		shrl	$8, %edx
 8984              	.LVL1120:
 8985 0a7a EBD4     		jmp	.L766
 8986              	.LVL1121:
 8987 0a7c 0F1F4000 		.p2align 4,,10
 8988              		.p2align 3
 8989              	.L765:
2493:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 8990              		.loc 1 2493 0
 8991 0a80 488B83C0 		movq	960(%rbx), %rax
 8991      030000
2500:fltk-1.3.4-1/png/pngwutil.c **** 
 8992              		.loc 1 2500 0
 8993 0a87 41BBFFFF 		movl	$2147483647, %r11d
 8993      FF7F
2493:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 8994              		.loc 1 2493 0
 8995 0a8d 0FB74002 		movzwl	2(%rax), %eax
 8996              	.LVL1122:
2496:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 8997              		.loc 1 2496 0
 8998 0a91 0FAFD0   		imull	%eax, %edx
 8999              	.LVL1123:
 9000 0a94 C1EA03   		shrl	$3, %edx
 9001              	.LVL1124:
2499:fltk-1.3.4-1/png/pngwutil.c ****             lmins = PNG_MAXSUM;
 9002              		.loc 1 2499 0
 9003 0a97 81FAC0FF 		cmpl	$4194240, %edx
 9003      3F00
 9004 0a9d 0F8736F6 		ja	.L764
 9004      FFFF
2493:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 9005              		.loc 1 2493 0
 9006 0aa3 0FAFF0   		imull	%eax, %esi
 9007              	.LVL1125:
2503:fltk-1.3.4-1/png/pngwutil.c ****       }
 9008              		.loc 1 2503 0
 9009 0aa6 C1E20A   		sall	$10, %edx
 9010              	.LVL1126:
 9011 0aa9 C1EE03   		shrl	$3, %esi
 9012              	.LVL1127:
 9013 0aac 448D1C16 		leal	(%rsi,%rdx), %r11d
 9014              	.LVL1128:
 9015 0ab0 E924F6FF 		jmp	.L764
 9015      FF
 9016              	.LVL1129:
 9017              		.p2align 4,,10
 9018 0ab5 0F1F00   		.p2align 3
 9019              	.L982:
 9020              	.LBE567:
 9021              	.LBE606:
 9022              	.LBB607:
 9023              	.LBB562:
2404:fltk-1.3.4-1/png/pngwutil.c ****          sumhi = (sum >> PNG_HISHIFT) & PNG_HIMASK; /* Gives us some footroom */
 9024              		.loc 1 2404 0
 9025 0ab8 8B742414 		movl	20(%rsp), %esi
 9026 0abc 440FB7C6 		movzwl	%si, %r8d
 9027              	.LVL1130:
2405:fltk-1.3.4-1/png/pngwutil.c **** 
 9028              		.loc 1 2405 0
 9029 0ac0 C1EE0A   		shrl	$10, %esi
 9030 0ac3 81E6C0FF 		andl	$4194240, %esi
 9030      3F00
 9031              	.LVL1131:
2408:fltk-1.3.4-1/png/pngwutil.c ****          {
 9032              		.loc 1 2408 0
 9033 0ac9 4585FF   		testl	%r15d, %r15d
 9034 0acc 743B     		je	.L753
 9035 0ace 4C8B8BA0 		movq	928(%rbx), %r9
 9035      030000
 9036 0ad5 31C0     		xorl	%eax, %eax
 9037              	.LVL1132:
 9038 0ad7 660F1F84 		.p2align 4,,10
 9038      00000000 
 9038      00
 9039              		.p2align 3
 9040              	.L755:
2410:fltk-1.3.4-1/png/pngwutil.c ****             {
 9041              		.loc 1 2410 0
 9042 0ae0 41803C01 		cmpb	$0, (%r9,%rax)
 9042      00
 9043 0ae5 7519     		jne	.L754
2412:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 9044              		.loc 1 2412 0
 9045 0ae7 488B93A8 		movq	936(%rbx), %rdx
 9045      030000
 9046 0aee 0FB71442 		movzwl	(%rdx,%rax,2), %edx
 9047 0af2 440FAFC2 		imull	%edx, %r8d
 9048              	.LVL1133:
2415:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 9049              		.loc 1 2415 0
 9050 0af6 0FAFF2   		imull	%edx, %esi
 9051              	.LVL1134:
2412:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 9052              		.loc 1 2412 0
 9053 0af9 41C1E808 		shrl	$8, %r8d
 9054              	.LVL1135:
2415:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 9055              		.loc 1 2415 0
 9056 0afd C1EE08   		shrl	$8, %esi
 9057              	.LVL1136:
 9058              	.L754:
 9059 0b00 4883C001 		addq	$1, %rax
 9060              	.LVL1137:
2408:fltk-1.3.4-1/png/pngwutil.c ****          {
 9061              		.loc 1 2408 0 discriminator 2
 9062 0b04 4139C7   		cmpl	%eax, %r15d
 9063 0b07 7FD7     		jg	.L755
 9064              	.L753:
2424:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 9065              		.loc 1 2424 0
 9066 0b09 488B83B8 		movq	952(%rbx), %rax
 9066      030000
 9067              	.LBE562:
 9068              	.LBE607:
2356:fltk-1.3.4-1/png/pngwutil.c **** 
 9069              		.loc 1 2356 0
 9070 0b10 C7442414 		movl	$2147483647, 20(%rsp)
 9070      FFFFFF7F 
 9071              	.LBB608:
 9072              	.LBB563:
2424:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 9073              		.loc 1 2424 0
 9074 0b18 0FB700   		movzwl	(%rax), %eax
 9075              	.LVL1138:
2427:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 9076              		.loc 1 2427 0
 9077 0b1b 0FAFF0   		imull	%eax, %esi
 9078              	.LVL1139:
 9079 0b1e C1EE03   		shrl	$3, %esi
 9080              	.LVL1140:
2430:fltk-1.3.4-1/png/pngwutil.c ****             sum = PNG_MAXSUM;
 9081              		.loc 1 2430 0
 9082 0b21 81FEC0FF 		cmpl	$4194240, %esi
 9082      3F00
 9083 0b27 0F8781F5 		ja	.L748
 9083      FFFF
2424:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 9084              		.loc 1 2424 0
 9085 0b2d 440FAFC0 		imull	%eax, %r8d
 9086              	.LVL1141:
2434:fltk-1.3.4-1/png/pngwutil.c ****       }
 9087              		.loc 1 2434 0
 9088 0b31 C1E60A   		sall	$10, %esi
 9089              	.LVL1142:
 9090 0b34 41C1E803 		shrl	$3, %r8d
 9091              	.LVL1143:
 9092 0b38 418D0430 		leal	(%r8,%rsi), %eax
 9093 0b3c 89442414 		movl	%eax, 20(%rsp)
 9094              	.LVL1144:
 9095 0b40 E969F5FF 		jmp	.L748
 9095      FF
 9096              	.LVL1145:
 9097              		.p2align 4,,10
 9098 0b45 0F1F00   		.p2align 3
 9099              	.L997:
 9100              	.LBE563:
 9101              	.LBE608:
 9102              	.LBB609:
 9103              	.LBB587:
2762:fltk-1.3.4-1/png/pngwutil.c ****          sumhi = (sum >> PNG_HISHIFT) & PNG_HIMASK;
 9104              		.loc 1 2762 0
 9105 0b48 440FB7C6 		movzwl	%si, %r8d
 9106              	.LVL1146:
2763:fltk-1.3.4-1/png/pngwutil.c **** 
 9107              		.loc 1 2763 0
 9108 0b4c C1EE0A   		shrl	$10, %esi
 9109              	.LVL1147:
 9110 0b4f 81E6C0FF 		andl	$4194240, %esi
 9110      3F00
 9111              	.LVL1148:
2765:fltk-1.3.4-1/png/pngwutil.c ****          {
 9112              		.loc 1 2765 0
 9113 0b55 4585FF   		testl	%r15d, %r15d
 9114 0b58 7437     		je	.L818
 9115 0b5a 4C8B8BA0 		movq	928(%rbx), %r9
 9115      030000
 9116 0b61 31C0     		xorl	%eax, %eax
 9117              	.LVL1149:
 9118              		.p2align 4,,10
 9119 0b63 0F1F4400 		.p2align 3
 9119      00
 9120              	.L820:
2767:fltk-1.3.4-1/png/pngwutil.c ****             {
 9121              		.loc 1 2767 0
 9122 0b68 41803C01 		cmpb	$0, (%r9,%rax)
 9122      00
 9123 0b6d 7519     		jne	.L819
2769:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 9124              		.loc 1 2769 0
 9125 0b6f 488B93A8 		movq	936(%rbx), %rdx
 9125      030000
 9126 0b76 0FB71442 		movzwl	(%rdx,%rax,2), %edx
 9127 0b7a 440FAFC2 		imull	%edx, %r8d
 9128              	.LVL1150:
2772:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 9129              		.loc 1 2772 0
 9130 0b7e 0FAFF2   		imull	%edx, %esi
 9131              	.LVL1151:
2769:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 9132              		.loc 1 2769 0
 9133 0b81 41C1E808 		shrl	$8, %r8d
 9134              	.LVL1152:
2772:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 9135              		.loc 1 2772 0
 9136 0b85 C1EE08   		shrl	$8, %esi
 9137              	.LVL1153:
 9138              	.L819:
 9139 0b88 4883C001 		addq	$1, %rax
 9140              	.LVL1154:
2765:fltk-1.3.4-1/png/pngwutil.c ****          {
 9141              		.loc 1 2765 0 discriminator 2
 9142 0b8c 4139C7   		cmpl	%eax, %r15d
 9143 0b8f 7FD7     		jg	.L820
 9144              	.L818:
2777:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 9145              		.loc 1 2777 0
 9146 0b91 488B83B8 		movq	952(%rbx), %rax
 9146      030000
 9147 0b98 0FB74006 		movzwl	6(%rax), %eax
 9148              	.LVL1155:
2780:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 9149              		.loc 1 2780 0
 9150 0b9c 0FAFF0   		imull	%eax, %esi
 9151              	.LVL1156:
 9152 0b9f C1EE03   		shrl	$3, %esi
 9153 0ba2 89F2     		movl	%esi, %edx
 9154              	.LVL1157:
2784:fltk-1.3.4-1/png/pngwutil.c **** 
 9155              		.loc 1 2784 0
 9156 0ba4 BEFFFFFF 		movl	$2147483647, %esi
 9156      7F
2783:fltk-1.3.4-1/png/pngwutil.c ****             sum = PNG_MAXSUM;
 9157              		.loc 1 2783 0
 9158 0ba9 81FAC0FF 		cmpl	$4194240, %edx
 9158      3F00
 9159 0baf 0F87ADF9 		ja	.L817
 9159      FFFF
2777:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 9160              		.loc 1 2777 0
 9161 0bb5 440FAFC0 		imull	%eax, %r8d
 9162              	.LVL1158:
2787:fltk-1.3.4-1/png/pngwutil.c ****       }
 9163              		.loc 1 2787 0
 9164 0bb9 C1E20A   		sall	$10, %edx
 9165              	.LVL1159:
 9166 0bbc 41C1E803 		shrl	$3, %r8d
 9167              	.LVL1160:
 9168 0bc0 418D3410 		leal	(%r8,%rdx), %esi
 9169              	.LVL1161:
 9170 0bc4 E999F9FF 		jmp	.L817
 9170      FF
 9171              	.LVL1162:
 9172 0bc9 0F1F8000 		.p2align 4,,10
 9172      000000
 9173              		.p2align 3
 9174              	.L995:
 9175              	.LBE587:
 9176              	.LBB588:
2709:fltk-1.3.4-1/png/pngwutil.c ****          lmhi = (lmins >> PNG_HISHIFT) & PNG_HIMASK;
 9177              		.loc 1 2709 0
 9178 0bd0 89C6     		movl	%eax, %esi
 9179 0bd2 440FB7C0 		movzwl	%ax, %r8d
 9180              	.LVL1163:
2710:fltk-1.3.4-1/png/pngwutil.c **** 
 9181              		.loc 1 2710 0
 9182 0bd6 C1EE0A   		shrl	$10, %esi
 9183 0bd9 81E6C0FF 		andl	$4194240, %esi
 9183      3F00
 9184              	.LVL1164:
2712:fltk-1.3.4-1/png/pngwutil.c ****          {
 9185              		.loc 1 2712 0
 9186 0bdf 4585FF   		testl	%r15d, %r15d
 9187 0be2 743C     		je	.L806
 9188 0be4 4C8B8BA0 		movq	928(%rbx), %r9
 9188      030000
 9189 0beb 31C0     		xorl	%eax, %eax
 9190 0bed EB0A     		jmp	.L808
 9191              	.LVL1165:
 9192 0bef 90       		.p2align 4,,10
 9193              		.p2align 3
 9194              	.L807:
 9195 0bf0 4883C001 		addq	$1, %rax
 9196              	.LVL1166:
2712:fltk-1.3.4-1/png/pngwutil.c ****          {
 9197              		.loc 1 2712 0 is_stmt 0 discriminator 2
 9198 0bf4 4139C7   		cmpl	%eax, %r15d
 9199 0bf7 7E27     		jle	.L806
 9200              	.L808:
 9201              	.LVL1167:
2714:fltk-1.3.4-1/png/pngwutil.c ****             {
 9202              		.loc 1 2714 0 is_stmt 1
 9203 0bf9 41803C01 		cmpb	$3, (%r9,%rax)
 9203      03
 9204 0bfe 75F0     		jne	.L807
2716:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 9205              		.loc 1 2716 0
 9206 0c00 488B93B0 		movq	944(%rbx), %rdx
 9206      030000
 9207 0c07 0FB71442 		movzwl	(%rdx,%rax,2), %edx
 9208 0c0b 440FAFC2 		imull	%edx, %r8d
 9209              	.LVL1168:
2719:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 9210              		.loc 1 2719 0
 9211 0c0f 0FAFF2   		imull	%edx, %esi
 9212              	.LVL1169:
2716:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 9213              		.loc 1 2716 0
 9214 0c12 41C1E808 		shrl	$8, %r8d
 9215              	.LVL1170:
2719:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 9216              		.loc 1 2719 0
 9217 0c16 C1EE08   		shrl	$8, %esi
 9218              	.LVL1171:
 9219 0c19 EBD5     		jmp	.L807
 9220              	.LVL1172:
 9221 0c1b 0F1F4400 		.p2align 4,,10
 9221      00
 9222              		.p2align 3
 9223              	.L806:
2724:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 9224              		.loc 1 2724 0
 9225 0c20 488B83C0 		movq	960(%rbx), %rax
 9225      030000
2731:fltk-1.3.4-1/png/pngwutil.c **** 
 9226              		.loc 1 2731 0
 9227 0c27 C7442430 		movl	$2147483647, 48(%rsp)
 9227      FFFFFF7F 
2724:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 9228              		.loc 1 2724 0
 9229 0c2f 0FB74006 		movzwl	6(%rax), %eax
 9230              	.LVL1173:
2727:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 9231              		.loc 1 2727 0
 9232 0c33 0FAFF0   		imull	%eax, %esi
 9233              	.LVL1174:
 9234 0c36 C1EE03   		shrl	$3, %esi
 9235              	.LVL1175:
2730:fltk-1.3.4-1/png/pngwutil.c ****             lmins = PNG_MAXSUM;
 9236              		.loc 1 2730 0
 9237 0c39 81FEC0FF 		cmpl	$4194240, %esi
 9237      3F00
 9238 0c3f 0F871BF8 		ja	.L805
 9238      FFFF
2724:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 9239              		.loc 1 2724 0
 9240 0c45 440FAFC0 		imull	%eax, %r8d
 9241              	.LVL1176:
2734:fltk-1.3.4-1/png/pngwutil.c ****       }
 9242              		.loc 1 2734 0
 9243 0c49 C1E60A   		sall	$10, %esi
 9244              	.LVL1177:
 9245 0c4c 41C1E803 		shrl	$3, %r8d
 9246              	.LVL1178:
 9247 0c50 418D0430 		leal	(%r8,%rsi), %eax
 9248 0c54 89442430 		movl	%eax, 48(%rsp)
 9249              	.LVL1179:
 9250 0c58 E903F8FF 		jmp	.L805
 9250      FF
 9251              	.LVL1180:
 9252 0c5d 0F1F00   		.p2align 4,,10
 9253              		.p2align 3
 9254              	.L992:
 9255 0c60 410FB7F0 		movzwl	%r8w, %esi
 9256 0c64 41C1E80A 		shrl	$10, %r8d
 9257              	.LVL1181:
 9258 0c68 4181E0C0 		andl	$4194240, %r8d
 9258      FF3F00
 9259              	.LVL1182:
 9260              	.LBE588:
 9261              	.LBE609:
 9262              	.LBB610:
 9263              	.LBB572:
2644:fltk-1.3.4-1/png/pngwutil.c ****          {
 9264              		.loc 1 2644 0
 9265 0c6f 4585FF   		testl	%r15d, %r15d
 9266 0c72 743C     		je	.L795
 9267              	.LVL1183:
 9268              	.L855:
 9269 0c74 4C8B8BA0 		movq	928(%rbx), %r9
 9269      030000
 9270 0c7b 31C0     		xorl	%eax, %eax
 9271 0c7d EB0A     		jmp	.L797
 9272              	.LVL1184:
 9273 0c7f 90       		.p2align 4,,10
 9274              		.p2align 3
 9275              	.L796:
 9276 0c80 4883C001 		addq	$1, %rax
 9277              	.LVL1185:
2644:fltk-1.3.4-1/png/pngwutil.c ****          {
 9278              		.loc 1 2644 0 is_stmt 0 discriminator 2
 9279 0c84 4139C7   		cmpl	%eax, %r15d
 9280 0c87 7E27     		jle	.L795
 9281              	.LVL1186:
 9282              	.L797:
2646:fltk-1.3.4-1/png/pngwutil.c ****             {
 9283              		.loc 1 2646 0 is_stmt 1
 9284 0c89 41803C01 		cmpb	$2, (%r9,%rax)
 9284      02
 9285 0c8e 75F0     		jne	.L796
2648:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 9286              		.loc 1 2648 0
 9287 0c90 488B93A8 		movq	936(%rbx), %rdx
 9287      030000
 9288 0c97 0FB71442 		movzwl	(%rdx,%rax,2), %edx
 9289 0c9b 0FAFF2   		imull	%edx, %esi
 9290              	.LVL1187:
2651:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 9291              		.loc 1 2651 0
 9292 0c9e 440FAFC2 		imull	%edx, %r8d
 9293              	.LVL1188:
2648:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 9294              		.loc 1 2648 0
 9295 0ca2 C1EE08   		shrl	$8, %esi
 9296              	.LVL1189:
2651:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 9297              		.loc 1 2651 0
 9298 0ca5 41C1E808 		shrl	$8, %r8d
 9299              	.LVL1190:
 9300 0ca9 EBD5     		jmp	.L796
 9301              	.LVL1191:
 9302 0cab 0F1F4400 		.p2align 4,,10
 9302      00
 9303              		.p2align 3
 9304              	.L795:
2656:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 9305              		.loc 1 2656 0
 9306 0cb0 488B83B8 		movq	952(%rbx), %rax
 9306      030000
 9307 0cb7 0FB74004 		movzwl	4(%rax), %eax
 9308              	.LVL1192:
2659:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 9309              		.loc 1 2659 0
 9310 0cbb 440FAFC0 		imull	%eax, %r8d
 9311 0cbf 4489C2   		movl	%r8d, %edx
2663:fltk-1.3.4-1/png/pngwutil.c **** 
 9312              		.loc 1 2663 0
 9313 0cc2 41B8FFFF 		movl	$2147483647, %r8d
 9313      FF7F
2659:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 9314              		.loc 1 2659 0
 9315 0cc8 C1EA03   		shrl	$3, %edx
 9316              	.LVL1193:
2662:fltk-1.3.4-1/png/pngwutil.c ****             sum = PNG_MAXSUM;
 9317              		.loc 1 2662 0
 9318 0ccb 81FAC0FF 		cmpl	$4194240, %edx
 9318      3F00
 9319 0cd1 0F875BF5 		ja	.L794
 9319      FFFF
 9320 0cd7 E9B4FCFF 		jmp	.L854
 9320      FF
 9321              	.LVL1194:
 9322              	.L882:
 9323              	.LBE572:
 9324              	.LBE610:
 9325              	.LBB611:
2983:fltk-1.3.4-1/png/pngwutil.c ****       {
 9326              		.loc 1 2983 0
 9327 0cdc B9010000 		movl	$1, %ecx
 9327      00
 9328 0ce1 E9BFF6FF 		jmp	.L850
 9328      FF
 9329              	.LVL1195:
 9330              	.L1003:
 9331              	.LBE611:
 9332              	.LBB612:
 9333              	.LBB597:
2937:fltk-1.3.4-1/png/pngwutil.c ****          sumhi = (sum >> PNG_HISHIFT) & PNG_HIMASK;
 9334              		.loc 1 2937 0
 9335 0ce6 410FB7C8 		movzwl	%r8w, %ecx
 9336              	.LVL1196:
2938:fltk-1.3.4-1/png/pngwutil.c **** 
 9337              		.loc 1 2938 0
 9338 0cea 41C1E80A 		shrl	$10, %r8d
 9339              	.LVL1197:
 9340 0cee 4181E0C0 		andl	$4194240, %r8d
 9340      FF3F00
 9341              	.LVL1198:
2940:fltk-1.3.4-1/png/pngwutil.c ****          {
 9342              		.loc 1 2940 0
 9343 0cf5 4585FF   		testl	%r15d, %r15d
 9344 0cf8 7438     		je	.L843
 9345 0cfa 488BB3A0 		movq	928(%rbx), %rsi
 9345      030000
 9346 0d01 31C0     		xorl	%eax, %eax
 9347 0d03 EB0C     		jmp	.L845
 9348              	.LVL1199:
 9349              		.p2align 4,,10
 9350 0d05 0F1F00   		.p2align 3
 9351              	.L844:
 9352 0d08 4883C001 		addq	$1, %rax
 9353              	.LVL1200:
2940:fltk-1.3.4-1/png/pngwutil.c ****          {
 9354              		.loc 1 2940 0 is_stmt 0 discriminator 2
 9355 0d0c 4139C7   		cmpl	%eax, %r15d
 9356 0d0f 7E21     		jle	.L843
 9357              	.L845:
 9358              	.LVL1201:
2942:fltk-1.3.4-1/png/pngwutil.c ****             {
 9359              		.loc 1 2942 0 is_stmt 1
 9360 0d11 803C0604 		cmpb	$4, (%rsi,%rax)
 9361 0d15 75F1     		jne	.L844
2944:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 9362              		.loc 1 2944 0
 9363 0d17 488B93A8 		movq	936(%rbx), %rdx
 9363      030000
 9364 0d1e 0FB71442 		movzwl	(%rdx,%rax,2), %edx
 9365 0d22 0FAFCA   		imull	%edx, %ecx
 9366              	.LVL1202:
2947:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 9367              		.loc 1 2947 0
 9368 0d25 440FAFC2 		imull	%edx, %r8d
 9369              	.LVL1203:
2944:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 9370              		.loc 1 2944 0
 9371 0d29 C1E908   		shrl	$8, %ecx
 9372              	.LVL1204:
2947:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 9373              		.loc 1 2947 0
 9374 0d2c 41C1E808 		shrl	$8, %r8d
 9375              	.LVL1205:
 9376 0d30 EBD6     		jmp	.L844
 9377              	.LVL1206:
 9378              	.L843:
2952:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 9379              		.loc 1 2952 0
 9380 0d32 488B83B8 		movq	952(%rbx), %rax
 9380      030000
 9381 0d39 0FB74008 		movzwl	8(%rax), %eax
 9382              	.LVL1207:
2955:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 9383              		.loc 1 2955 0
 9384 0d3d 440FAFC0 		imull	%eax, %r8d
 9385              	.LVL1208:
 9386 0d41 4489C2   		movl	%r8d, %edx
2959:fltk-1.3.4-1/png/pngwutil.c **** 
 9387              		.loc 1 2959 0
 9388 0d44 41B8FFFF 		movl	$2147483647, %r8d
 9388      FF7F
2955:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 9389              		.loc 1 2955 0
 9390 0d4a C1EA03   		shrl	$3, %edx
 9391              	.LVL1209:
2958:fltk-1.3.4-1/png/pngwutil.c ****             sum = PNG_MAXSUM;
 9392              		.loc 1 2958 0
 9393 0d4d 81FAC0FF 		cmpl	$4194240, %edx
 9393      3F00
 9394 0d53 0F8766FB 		ja	.L842
 9394      FFFF
2952:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 9395              		.loc 1 2952 0
 9396 0d59 0FAFC8   		imull	%eax, %ecx
 9397              	.LVL1210:
2962:fltk-1.3.4-1/png/pngwutil.c ****       }
 9398              		.loc 1 2962 0
 9399 0d5c C1E20A   		sall	$10, %edx
 9400              	.LVL1211:
 9401 0d5f C1E903   		shrl	$3, %ecx
 9402              	.LVL1212:
 9403 0d62 448D0411 		leal	(%rcx,%rdx), %r8d
 9404              	.LVL1213:
 9405 0d66 E954FBFF 		jmp	.L842
 9405      FF
 9406              	.LVL1214:
 9407              	.L1001:
 9408              	.LBE597:
 9409              	.LBB598:
2850:fltk-1.3.4-1/png/pngwutil.c ****          lmhi = (lmins >> PNG_HISHIFT) & PNG_HIMASK;
 9410              		.loc 1 2850 0
 9411 0d6b 89C6     		movl	%eax, %esi
 9412 0d6d 440FB7C0 		movzwl	%ax, %r8d
 9413              	.LVL1215:
2851:fltk-1.3.4-1/png/pngwutil.c **** 
 9414              		.loc 1 2851 0
 9415 0d71 C1EE0A   		shrl	$10, %esi
 9416 0d74 81E6C0FF 		andl	$4194240, %esi
 9416      3F00
 9417              	.LVL1216:
2853:fltk-1.3.4-1/png/pngwutil.c ****          {
 9418              		.loc 1 2853 0
 9419 0d7a 4585FF   		testl	%r15d, %r15d
 9420 0d7d 743C     		je	.L829
 9421 0d7f 4C8B8BA0 		movq	928(%rbx), %r9
 9421      030000
 9422 0d86 31C0     		xorl	%eax, %eax
 9423 0d88 EB0F     		jmp	.L831
 9424              	.LVL1217:
 9425 0d8a 660F1F44 		.p2align 4,,10
 9425      0000
 9426              		.p2align 3
 9427              	.L830:
 9428 0d90 4883C001 		addq	$1, %rax
 9429              	.LVL1218:
2853:fltk-1.3.4-1/png/pngwutil.c ****          {
 9430              		.loc 1 2853 0 is_stmt 0 discriminator 2
 9431 0d94 4139C7   		cmpl	%eax, %r15d
 9432 0d97 7E22     		jle	.L829
 9433              	.L831:
 9434              	.LVL1219:
2855:fltk-1.3.4-1/png/pngwutil.c ****             {
 9435              		.loc 1 2855 0 is_stmt 1
 9436 0d99 41803C01 		cmpb	$4, (%r9,%rax)
 9436      04
 9437 0d9e 75F0     		jne	.L830
2857:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 9438              		.loc 1 2857 0
 9439 0da0 488B93B0 		movq	944(%rbx), %rdx
 9439      030000
 9440 0da7 0FB71442 		movzwl	(%rdx,%rax,2), %edx
 9441 0dab 440FAFC2 		imull	%edx, %r8d
 9442              	.LVL1220:
2860:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 9443              		.loc 1 2860 0
 9444 0daf 0FAFF2   		imull	%edx, %esi
 9445              	.LVL1221:
2857:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 9446              		.loc 1 2857 0
 9447 0db2 41C1E808 		shrl	$8, %r8d
 9448              	.LVL1222:
2860:fltk-1.3.4-1/png/pngwutil.c ****                    PNG_WEIGHT_SHIFT;
 9449              		.loc 1 2860 0
 9450 0db6 C1EE08   		shrl	$8, %esi
 9451              	.LVL1223:
 9452 0db9 EBD5     		jmp	.L830
 9453              	.LVL1224:
 9454              	.L829:
2865:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 9455              		.loc 1 2865 0
 9456 0dbb 488B83C0 		movq	960(%rbx), %rax
 9456      030000
2872:fltk-1.3.4-1/png/pngwutil.c **** 
 9457              		.loc 1 2872 0
 9458 0dc2 C7442420 		movl	$2147483647, 32(%rsp)
 9458      FFFFFF7F 
2865:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 9459              		.loc 1 2865 0
 9460 0dca 0FB74008 		movzwl	8(%rax), %eax
 9461              	.LVL1225:
2868:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 9462              		.loc 1 2868 0
 9463 0dce 0FAFF0   		imull	%eax, %esi
 9464              	.LVL1226:
 9465 0dd1 C1EE03   		shrl	$3, %esi
 9466              	.LVL1227:
2871:fltk-1.3.4-1/png/pngwutil.c ****             lmins = PNG_MAXSUM;
 9467              		.loc 1 2871 0
 9468 0dd4 81FEC0FF 		cmpl	$4194240, %esi
 9468      3F00
 9469 0dda 0F87AFF8 		ja	.L828
 9469      FFFF
2865:fltk-1.3.4-1/png/pngwutil.c ****              PNG_COST_SHIFT;
 9470              		.loc 1 2865 0
 9471 0de0 410FAFC0 		imull	%r8d, %eax
 9472              	.LVL1228:
2875:fltk-1.3.4-1/png/pngwutil.c ****       }
 9473              		.loc 1 2875 0
 9474 0de4 C1E60A   		sall	$10, %esi
 9475              	.LVL1229:
 9476 0de7 C1E803   		shrl	$3, %eax
 9477              	.LVL1230:
 9478 0dea 01F0     		addl	%esi, %eax
 9479 0dec 89442420 		movl	%eax, 32(%rsp)
 9480              	.LVL1231:
 9481 0df0 E99AF8FF 		jmp	.L828
 9481      FF
 9482              	.LVL1232:
 9483              	.L858:
 9484              	.LBE598:
 9485              	.LBE612:
 9486              	.LBB613:
2389:fltk-1.3.4-1/png/pngwutil.c ****       png_size_t i;
 9487              		.loc 1 2389 0
 9488 0df5 C7442414 		movl	$0, 20(%rsp)
 9488      00000000 
 9489 0dfd E99FF2FF 		jmp	.L749
 9489      FF
 9490              	.LVL1233:
 9491              	.L873:
 9492              	.LBE613:
 9493              	.LBB614:
2738:fltk-1.3.4-1/png/pngwutil.c ****            pp = prev_row + 1; i < bpp; i++)
 9494              		.loc 1 2738 0
 9495 0e02 31C0     		xorl	%eax, %eax
2700:fltk-1.3.4-1/png/pngwutil.c ****       png_size_t i;
 9496              		.loc 1 2700 0
 9497 0e04 31F6     		xorl	%esi, %esi
 9498 0e06 E9CCF6FF 		jmp	.L809
 9498      FF
 9499              	.LVL1234:
 9500              	.L864:
 9501              	.LBE614:
 9502              	.LBB615:
2507:fltk-1.3.4-1/png/pngwutil.c ****            i++, rp++, dp++)
 9503              		.loc 1 2507 0
 9504 0e0b 4531C9   		xorl	%r9d, %r9d
2465:fltk-1.3.4-1/png/pngwutil.c ****       png_size_t i;
 9505              		.loc 1 2465 0
 9506 0e0e 31F6     		xorl	%esi, %esi
 9507 0e10 E91DF3FF 		jmp	.L768
 9507      FF
 9508              	.LVL1235:
 9509              	.L875:
 9510              	.LBE615:
 9511              	.LBB616:
2804:fltk-1.3.4-1/png/pngwutil.c ****           pp = prev_row + 1; i < bpp; i++)
 9512              		.loc 1 2804 0
 9513 0e15 31D2     		xorl	%edx, %edx
 9514 0e17 E9ABF7FF 		jmp	.L821
 9514      FF
 9515              	.LVL1236:
 9516              	.L867:
 9517              	.LBE616:
 9518              	.LBB617:
2573:fltk-1.3.4-1/png/pngwutil.c ****           pp = prev_row + 1; i < row_bytes;
 9519              		.loc 1 2573 0
 9520 0e1c 48897424 		movq	%rsi, 8(%rsp)
 9520      08
 9521              	.LVL1237:
 9522 0e21 E9C9F4FF 		jmp	.L801
 9522      FF
 9523              	.LVL1238:
 9524              	.L860:
 9525              	.LBE617:
 9526              	.LBB618:
2447:fltk-1.3.4-1/png/pngwutil.c ****            i++, rp++, dp++)
 9527              		.loc 1 2447 0
 9528 0e26 31D2     		xorl	%edx, %edx
 9529 0e28 E9DDF5FF 		jmp	.L757
 9529      FF
 9530              	.LVL1239:
 9531              	.L879:
 9532              	.LBE618:
 9533              	.LBB619:
2879:fltk-1.3.4-1/png/pngwutil.c ****           pp = prev_row + 1; i < bpp; i++)
 9534              		.loc 1 2879 0
 9535 0e2d 48C70424 		movq	$0, (%rsp)
 9535      00000000 
2841:fltk-1.3.4-1/png/pngwutil.c ****       png_size_t i;
 9536              		.loc 1 2841 0
 9537 0e35 4531C0   		xorl	%r8d, %r8d
 9538 0e38 E9D2F8FF 		jmp	.L832
 9538      FF
 9539              	.LVL1240:
 9540              	.L990:
 9541              	.LBE619:
 9542              	.LBB620:
2586:fltk-1.3.4-1/png/pngwutil.c ****       png_size_t i;
 9543              		.loc 1 2586 0
 9544 0e3d 4531C0   		xorl	%r8d, %r8d
 9545 0e40 E9EDF3FF 		jmp	.L794
 9545      FF
 9546              	.LBE620:
 9547              		.cfi_endproc
 9548              	.LFE97:
 9550              		.section	.text.unlikely.png_write_find_filter
 9551              	.LCOLDE93:
 9552              		.section	.text.png_write_find_filter
 9553              	.LHOTE93:
 9554              		.section	.rodata.png_pass_inc.7106,"a",@progbits
 9557              	png_pass_inc.7106:
 9558 0000 08       		.byte	8
 9559 0001 08       		.byte	8
 9560 0002 04       		.byte	4
 9561 0003 04       		.byte	4
 9562 0004 02       		.byte	2
 9563 0005 02       		.byte	2
 9564 0006 01       		.byte	1
 9565              		.set	png_pass_inc.7095,png_pass_inc.7106
 9566              		.section	.rodata.png_pass_start.7105,"a",@progbits
 9569              	png_pass_start.7105:
 9570 0000 00       		.byte	0
 9571 0001 04       		.byte	4
 9572 0002 00       		.byte	0
 9573 0003 02       		.byte	2
 9574 0004 00       		.byte	0
 9575 0005 01       		.byte	1
 9576 0006 00       		.byte	0
 9577              		.set	png_pass_start.7094,png_pass_start.7105
 9578              		.section	.rodata.png_pass_ystart.7096,"a",@progbits
 9581              	png_pass_ystart.7096:
 9582 0000 00       		.byte	0
 9583 0001 00       		.byte	0
 9584 0002 04       		.byte	4
 9585 0003 00       		.byte	0
 9586 0004 02       		.byte	2
 9587 0005 00       		.byte	0
 9588 0006 01       		.byte	1
 9589              		.section	.rodata.png_pass_yinc.7097,"a",@progbits
 9592              	png_pass_yinc.7097:
 9593 0000 08       		.byte	8
 9594 0001 08       		.byte	8
 9595 0002 08       		.byte	8
 9596 0003 04       		.byte	4
 9597 0004 04       		.byte	4
 9598 0005 02       		.byte	2
 9599 0006 02       		.byte	2
 9600              		.text
 9601              	.Letext0:
 9602              		.section	.text.unlikely.png_image_size
 9603              	.Letext_cold0:
 9604              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 9605              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 9606              		.file 5 "/usr/include/libio.h"
 9607              		.file 6 "/usr/include/x86_64-linux-gnu/bits/setjmp.h"
 9608              		.file 7 "/usr/include/x86_64-linux-gnu/bits/sigset.h"
 9609              		.file 8 "/usr/include/setjmp.h"
 9610              		.file 9 "fltk-1.3.4-1/png/pngconf.h"
 9611              		.file 10 "fltk-1.3.4-1/png/png.h"
 9612              		.file 11 "fltk-1.3.4-1/png/pngstruct.h"
 9613              		.file 12 "fltk-1.3.4-1/png/pnginfo.h"
 9614              		.file 13 "/usr/include/x86_64-linux-gnu/zconf.h"
 9615              		.file 14 "/usr/include/zlib.h"
 9616              		.file 15 "fltk-1.3.4-1/png/pngpriv.h"
 9617              		.file 16 "/usr/include/stdio.h"
 9618              		.file 17 "/usr/include/string.h"
 9619              		.file 18 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 pngwutil.c
     /tmp/ccAKnxtd.s:13     .text.png_image_size:0000000000000000 png_image_size
     /tmp/ccAKnxtd.s:305    .text.png_deflate_claim:0000000000000000 png_deflate_claim
     /tmp/ccAKnxtd.s:693    .text.png_check_keyword:0000000000000000 png_check_keyword
     /tmp/ccAKnxtd.s:932    .text.optimize_cmf.part.0:0000000000000000 optimize_cmf.part.0
     /tmp/ccAKnxtd.s:1054   .text.png_text_compress:0000000000000000 png_text_compress
     /tmp/ccAKnxtd.s:1376   .text.png_write_chunk_header.part.2:0000000000000000 png_write_chunk_header.part.2
     /tmp/ccAKnxtd.s:1513   .text.png_write_chunk_data.part.3:0000000000000000 png_write_chunk_data.part.3
     /tmp/ccAKnxtd.s:1568   .text.png_write_compressed_data_out:0000000000000000 png_write_compressed_data_out
     /tmp/ccAKnxtd.s:1691   .text.png_write_chunk_end.part.4:0000000000000000 png_write_chunk_end.part.4
     /tmp/ccAKnxtd.s:1761   .text.png_write_complete_chunk:0000000000000000 png_write_complete_chunk
     /tmp/ccAKnxtd.s:1896   .text.png_save_uint_32:0000000000000000 png_save_uint_32
     /tmp/ccAKnxtd.s:1932   .text.png_save_uint_16:0000000000000000 png_save_uint_16
     /tmp/ccAKnxtd.s:1960   .text.png_write_sig:0000000000000000 png_write_sig
     /tmp/ccAKnxtd.s:2035   .text.png_write_chunk_start:0000000000000000 png_write_chunk_start
     /tmp/ccAKnxtd.s:2071   .text.png_write_chunk_data:0000000000000000 png_write_chunk_data
     /tmp/ccAKnxtd.s:2104   .text.png_write_chunk_end:0000000000000000 png_write_chunk_end
     /tmp/ccAKnxtd.s:2132   .text.png_write_chunk:0000000000000000 png_write_chunk
     /tmp/ccAKnxtd.s:2157   .text.png_free_buffer_list:0000000000000000 png_free_buffer_list
     /tmp/ccAKnxtd.s:2254   .text.png_write_IHDR:0000000000000000 png_write_IHDR
     /tmp/ccAKnxtd.s:2698   .text.png_write_PLTE:0000000000000000 png_write_PLTE
     /tmp/ccAKnxtd.s:2866   .text.png_compress_IDAT:0000000000000000 png_compress_IDAT
     /tmp/ccAKnxtd.s:3209   .text.png_write_finish_row.part.5:0000000000000000 png_write_finish_row.part.5
     /tmp/ccAKnxtd.s:9557   .rodata.png_pass_inc.7106:0000000000000000 png_pass_inc.7095
     /tmp/ccAKnxtd.s:9569   .rodata.png_pass_start.7105:0000000000000000 png_pass_start.7094
     /tmp/ccAKnxtd.s:9592   .rodata.png_pass_yinc.7097:0000000000000000 png_pass_yinc.7097
     /tmp/ccAKnxtd.s:9581   .rodata.png_pass_ystart.7096:0000000000000000 png_pass_ystart.7096
     /tmp/ccAKnxtd.s:3372   .text.png_write_IEND:0000000000000000 png_write_IEND
     /tmp/ccAKnxtd.s:3410   .text.png_write_gAMA_fixed:0000000000000000 png_write_gAMA_fixed
     /tmp/ccAKnxtd.s:3492   .text.png_write_sRGB:0000000000000000 png_write_sRGB
     /tmp/ccAKnxtd.s:3575   .text.png_write_iCCP:0000000000000000 png_write_iCCP
     /tmp/ccAKnxtd.s:3816   .text.png_write_sPLT:0000000000000000 png_write_sPLT
     /tmp/ccAKnxtd.s:4150   .text.png_write_sBIT:0000000000000000 png_write_sBIT
     /tmp/ccAKnxtd.s:4285   .text.png_write_cHRM_fixed:0000000000000000 png_write_cHRM_fixed
     /tmp/ccAKnxtd.s:4400   .text.png_write_tRNS:0000000000000000 png_write_tRNS
     /tmp/ccAKnxtd.s:4626   .text.png_write_bKGD:0000000000000000 png_write_bKGD
     /tmp/ccAKnxtd.s:4856   .text.png_write_hIST:0000000000000000 png_write_hIST
     /tmp/ccAKnxtd.s:4993   .text.png_write_tEXt:0000000000000000 png_write_tEXt
     /tmp/ccAKnxtd.s:5208   .text.png_write_zTXt:0000000000000000 png_write_zTXt
     /tmp/ccAKnxtd.s:5428   .text.png_write_iTXt:0000000000000000 png_write_iTXt
     /tmp/ccAKnxtd.s:5869   .text.png_write_oFFs:0000000000000000 png_write_oFFs
     /tmp/ccAKnxtd.s:5971   .text.png_write_pCAL:0000000000000000 png_write_pCAL
     /tmp/ccAKnxtd.s:6379   .text.png_write_sCAL_s:0000000000000000 png_write_sCAL_s
     /tmp/ccAKnxtd.s:6531   .text.png_write_pHYs:0000000000000000 png_write_pHYs
     /tmp/ccAKnxtd.s:6679   .text.png_write_tIME:0000000000000000 png_write_tIME
     /tmp/ccAKnxtd.s:6791   .text.png_write_start_row:0000000000000000 png_write_start_row
     /tmp/ccAKnxtd.s:6997   .text.png_write_finish_row:0000000000000000 png_write_finish_row
     /tmp/ccAKnxtd.s:7031   .text.png_do_write_interlace:0000000000000000 png_do_write_interlace
     /tmp/ccAKnxtd.s:9569   .rodata.png_pass_start.7105:0000000000000000 png_pass_start.7105
     /tmp/ccAKnxtd.s:9557   .rodata.png_pass_inc.7106:0000000000000000 png_pass_inc.7106
     /tmp/ccAKnxtd.s:7556   .text.png_write_find_filter:0000000000000000 png_write_find_filter
                           .group:0000000000000000 wm4.0.cf9695abff4f49bdfe00dc4091904acd
                           .group:0000000000000000 wm4.stdcpredef.h.19.bf2bf6c5fb087dfb5ef2d2297c2795de
                           .group:0000000000000000 wm4.pngpriv.h.26.ca3d1719773cd86007410b516123e125
                           .group:0000000000000000 wm4.features.h.19.22780be97c2f806ec599b8b99aa89f7d
                           .group:0000000000000000 wm4.cdefs.h.19.56613e71f285ebad825b69b151170a81
                           .group:0000000000000000 wm4.wordsize.h.4.256e8fdbd37801980286acdbc40d0280
                           .group:0000000000000000 wm4.cdefs.h.432.619afd0aac7c4b439843706c1b28ddea
                           .group:0000000000000000 wm4.stubs64.h.10.918ceb5fa58268542bf143e4c1efbcf3
                           .group:0000000000000000 wm4.stdlib.h.27.59e2586c75bdbcb991b248ad7257b993
                           .group:0000000000000000 wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1
                           .group:0000000000000000 wm4.stdlib.h.37.e081b308f911db94d3185af615f2b2e2
                           .group:0000000000000000 wm4.string.h.23.8394011d5995a16f15d67d04e84a1d69
                           .group:0000000000000000 wm4.stddef.h.238.04cc7214bceba497b20d15c10fd97511
                           .group:0000000000000000 wm4.string.h.24.1b0dc67418e7128d207285861439c2f8
                           .group:0000000000000000 wm4.endian.h.19.ff00c9c0f5e9f9a9719c5de76ace57b4
                           .group:0000000000000000 wm4.endian.h.41.27d650ce666b76881e2a2a218ea61984
                           .group:0000000000000000 wm4.types.h.89.468e2451361e3b92f048f6cad51690ff
                           .group:0000000000000000 wm4.typesizes.h.24.40eb69a6270178f15d1bf3d7b6635a8b
                           .group:0000000000000000 wm4.string2.h.55.e4a4cfd7781cc64a4341475e67436ab1
                           .group:0000000000000000 wm4.string3.h.31.2b75bd65145c50aeedb61673ce0d3293
                           .group:0000000000000000 wm4.pnglibconf.h.15.30e2eea90e566ac06da4f4de487193d7
                           .group:0000000000000000 wm4.pngpriv.h.130.f65d93453b5b5837849611ffe82d627a
                           .group:0000000000000000 wm4.png.h.412.12a95b2193a7d0bc2282b72c70a28ce1
                           .group:0000000000000000 wm4.limits.h.23.f0fd92c175c1576df467c4d5fe2b091a
                           .group:0000000000000000 wm4.posix1_lim.h.25.28c8eb2d22697e7711efefdec5344a02
                           .group:0000000000000000 wm4.local_lim.h.25.97ee4129efb08ad296101237bcd3401b
                           .group:0000000000000000 wm4.limits.h.2.9ff59823e8adcf4502d980ef41362326
                           .group:0000000000000000 wm4.local_lim.h.42.9dc3935e0e3b94e23cda247e4e39bd8b
                           .group:0000000000000000 wm4.limits.h.60.eb7066f861c8b8edc7a0a399744b0335
                           .group:0000000000000000 wm4.stddef.h.39.d5a83c17f38162a5dd6f834eaf38f8ef
                           .group:0000000000000000 wm4.stdio.h.26.4719156f1aea2bb9662fd6c582dc9a4c
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:0000000000000000 wm4.stdio.h.36.2dd12c1fd035242ad5cfd0152a01be5a
                           .group:0000000000000000 wm4._G_config.h.5.b0f37d9e474454cf6e459063458db32f
                           .group:0000000000000000 wm4.wchar.h.80.eea3eba2d2a17aace9470a8e0d8218dc
                           .group:0000000000000000 wm4._G_config.h.46.5187c97b14fd664662cb32e6b94fc49e
                           .group:0000000000000000 wm4.libio.h.33.a775b9ecae273f33bc59931e9891e4ca
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.libio.h.51.dab170798ec1df48c625aea7c30e1b63
                           .group:0000000000000000 wm4.stdio.h.120.80cbf0ec1718a5b27e6428218e29c72d
                           .group:0000000000000000 wm4.stdio_lim.h.23.f8541119d1bcf759d7de9531671fd758
                           .group:0000000000000000 wm4.stdio.h.172.df21df34a7396d7da2e08f9b617d582f
                           .group:0000000000000000 wm4.stdio.h.26.e50fc3808d57d965ceefc6f6dd102eb7
                           .group:0000000000000000 wm4.sigset.h.20.f36413b6d2364ad847d3db53fb03e683
                           .group:0000000000000000 wm4.setjmp.h.67.51aa194c3c89a841663c00cb93fd90ff
                           .group:0000000000000000 wm4.time.h.26.6a3cabd4f228e226db6723a3b0c81ba6
                           .group:0000000000000000 wm4.time.h.40.99bfb90272c7e82357ef3c2f5c6fefc8
                           .group:0000000000000000 wm4.time.h.53.f8af6908497bac0ca16faea86fb8cd87
                           .group:0000000000000000 wm4.pngconf.h.86.6636b2584cb7be1618479e118d71e58c
                           .group:0000000000000000 wm4.png.h.506.fa53b6434c0b20c8e63094b04d7940c5
                           .group:0000000000000000 wm4.pngpriv.h.298.dc2c896ce0eddc5cfadee24e76e3c417
                           .group:0000000000000000 wm4.float.h.29.1cf88a0527b6b1225d49fbee2b32acb7
                           .group:0000000000000000 wm4.math.h.26.671af5ac9cd425a35e0730f7b6d7cde2
                           .group:0000000000000000 wm4.libmsimddeclstubs.h.34.75644856b74ba3d815155fe5fe7ecc56
                           .group:0000000000000000 wm4.mathdef.h.23.67c0aa4a204f1f427459dfc651aba565
                           .group:0000000000000000 wm4.math.h.55.cf380f99c57d42476a5252f30065036a
                           .group:0000000000000000 wm4.math.h.84.742292806c6be54f49dc607928a827f7
                           .group:0000000000000000 wm4.math.h.105.59ff0f83ebf6a04e70e145cef2d1185e
                           .group:0000000000000000 wm4.math.h.152.48a142bc1575e748473ff86330dee044
                           .group:0000000000000000 wm4.math.h.30.7cada3efe024725df2da4c705b6566be
                           .group:0000000000000000 wm4.pngpriv.h.481.f98e7c29eaaa759546a3f9808bc25c74
                           .group:0000000000000000 wm4.pngstruct.h.22.7b9573417641055ab8f42438aa8afadf
                           .group:0000000000000000 wm4.zconf.h.9.bbc7b5783b51507f7721a5620139b4ee
                           .group:0000000000000000 wm4.zconf.h.397.69c03305677a9a6792fe2a94f7c9f69b
                           .group:0000000000000000 wm4.types.h.23.92678977f3921b8dce508274ac68f78d
                           .group:0000000000000000 wm4.types.h.187.12f6c32afb936b45a5f241219964ce93
                           .group:0000000000000000 wm4.stdarg.h.31.48e922dd0aaedfb616aafd8a7b7a4949
                           .group:0000000000000000 wm4.unistd.h.23.c85a58a698f53edadcf64287ab24fecb
                           .group:0000000000000000 wm4.posix_opt.h.20.9a8aece77957db1725bd2b9521e5f9c5
                           .group:0000000000000000 wm4.unistd.h.213.4c582e35260d661b081322974b7c1e74
                           .group:0000000000000000 wm4.unistd.h.284.7e168706bc8bd978e02fd1da439d9bc3
                           .group:0000000000000000 wm4.confname.h.27.6b00117a32f457cc72e5ac810a9adade
                           .group:0000000000000000 wm4.zconf.h.457.505c3613686dd75e492569d7a56a6eb0
                           .group:0000000000000000 wm4.zlib.h.40.5a15529ab8e285cee4b0ddab32502c27
                           .group:0000000000000000 wm4.pngstruct.h.44.bc957704556ff8ddcb697678a008ffae
                           .group:0000000000000000 wm4.pngpriv.h.853.4585af3e74cfb155d8486c5333b94adf
                           .group:0000000000000000 wm4.pngdebug.h.36.e9c57d5f35e3128225fb629498ec6fc8

UNDEFINED SYMBOLS
deflateInit2_
deflateEnd
deflateReset
png_zstream_error
png_safecat
png_warning
__stack_chk_fail
png_warning_parameter
png_warning_parameter_signed
png_formatted_warning
deflate
png_malloc_base
png_write_data
png_reset_crc
png_calculate_crc
png_error
png_free
png_malloc
memset
png_save_int_32
png_app_warning
strlen
__memcpy_chk
memcpy
png_calloc
png_write_flush
