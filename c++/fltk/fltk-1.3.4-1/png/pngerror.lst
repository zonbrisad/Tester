   1              		.file	"pngerror.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.unlikely.png_format_buffer.isra.0,"ax",@progbits
   5              	.LCOLDB0:
   6              		.section	.text.png_format_buffer.isra.0,"ax",@progbits
   7              	.LHOTB0:
   8              		.p2align 4,,15
   9              		.section	.text.unlikely.png_format_buffer.isra.0
  10              	.Ltext_cold0:
  11              		.section	.text.png_format_buffer.isra.0
  13              	png_format_buffer.isra.0:
  14              	.LFB83:
  15              		.file 1 "fltk-1.3.4-1/png/pngerror.c"
   1:fltk-1.3.4-1/png/pngerror.c **** 
   2:fltk-1.3.4-1/png/pngerror.c **** /* pngerror.c - stub functions for i/o and memory allocation
   3:fltk-1.3.4-1/png/pngerror.c ****  *
   4:fltk-1.3.4-1/png/pngerror.c ****  * Last changed in libpng 1.6.15 [November 20, 2014]
   5:fltk-1.3.4-1/png/pngerror.c ****  * Copyright (c) 1998-2014 Glenn Randers-Pehrson
   6:fltk-1.3.4-1/png/pngerror.c ****  * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
   7:fltk-1.3.4-1/png/pngerror.c ****  * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
   8:fltk-1.3.4-1/png/pngerror.c ****  *
   9:fltk-1.3.4-1/png/pngerror.c ****  * This code is released under the libpng license.
  10:fltk-1.3.4-1/png/pngerror.c ****  * For conditions of distribution and use, see the disclaimer
  11:fltk-1.3.4-1/png/pngerror.c ****  * and license in png.h
  12:fltk-1.3.4-1/png/pngerror.c ****  *
  13:fltk-1.3.4-1/png/pngerror.c ****  * This file provides a location for all error handling.  Users who
  14:fltk-1.3.4-1/png/pngerror.c ****  * need special error handling are expected to write replacement functions
  15:fltk-1.3.4-1/png/pngerror.c ****  * and use png_set_error_fn() to use those functions.  See the instructions
  16:fltk-1.3.4-1/png/pngerror.c ****  * at each function.
  17:fltk-1.3.4-1/png/pngerror.c ****  */
  18:fltk-1.3.4-1/png/pngerror.c **** 
  19:fltk-1.3.4-1/png/pngerror.c **** #include "pngpriv.h"
  20:fltk-1.3.4-1/png/pngerror.c **** 
  21:fltk-1.3.4-1/png/pngerror.c **** #if defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED)
  22:fltk-1.3.4-1/png/pngerror.c **** 
  23:fltk-1.3.4-1/png/pngerror.c **** static PNG_FUNCTION(void, png_default_error,PNGARG((png_const_structrp png_ptr,
  24:fltk-1.3.4-1/png/pngerror.c ****     png_const_charp error_message)),PNG_NORETURN);
  25:fltk-1.3.4-1/png/pngerror.c **** 
  26:fltk-1.3.4-1/png/pngerror.c **** #ifdef PNG_WARNINGS_SUPPORTED
  27:fltk-1.3.4-1/png/pngerror.c **** static void /* PRIVATE */
  28:fltk-1.3.4-1/png/pngerror.c **** png_default_warning PNGARG((png_const_structrp png_ptr,
  29:fltk-1.3.4-1/png/pngerror.c ****    png_const_charp warning_message));
  30:fltk-1.3.4-1/png/pngerror.c **** #endif /* WARNINGS */
  31:fltk-1.3.4-1/png/pngerror.c **** 
  32:fltk-1.3.4-1/png/pngerror.c **** /* This function is called whenever there is a fatal error.  This function
  33:fltk-1.3.4-1/png/pngerror.c ****  * should not be changed.  If there is a need to handle errors differently,
  34:fltk-1.3.4-1/png/pngerror.c ****  * you should supply a replacement error function and use png_set_error_fn()
  35:fltk-1.3.4-1/png/pngerror.c ****  * to replace the error function at run-time.
  36:fltk-1.3.4-1/png/pngerror.c ****  */
  37:fltk-1.3.4-1/png/pngerror.c **** #ifdef PNG_ERROR_TEXT_SUPPORTED
  38:fltk-1.3.4-1/png/pngerror.c **** PNG_FUNCTION(void,PNGAPI
  39:fltk-1.3.4-1/png/pngerror.c **** png_error,(png_const_structrp png_ptr, png_const_charp error_message),
  40:fltk-1.3.4-1/png/pngerror.c ****    PNG_NORETURN)
  41:fltk-1.3.4-1/png/pngerror.c **** {
  42:fltk-1.3.4-1/png/pngerror.c **** #ifdef PNG_ERROR_NUMBERS_SUPPORTED
  43:fltk-1.3.4-1/png/pngerror.c ****    char msg[16];
  44:fltk-1.3.4-1/png/pngerror.c ****    if (png_ptr != NULL)
  45:fltk-1.3.4-1/png/pngerror.c ****    {
  46:fltk-1.3.4-1/png/pngerror.c ****       if ((png_ptr->flags &
  47:fltk-1.3.4-1/png/pngerror.c ****          (PNG_FLAG_STRIP_ERROR_NUMBERS|PNG_FLAG_STRIP_ERROR_TEXT)) != 0
  48:fltk-1.3.4-1/png/pngerror.c ****       {
  49:fltk-1.3.4-1/png/pngerror.c ****          if (*error_message == PNG_LITERAL_SHARP)
  50:fltk-1.3.4-1/png/pngerror.c ****          {
  51:fltk-1.3.4-1/png/pngerror.c ****             /* Strip "#nnnn " from beginning of error message. */
  52:fltk-1.3.4-1/png/pngerror.c ****             int offset;
  53:fltk-1.3.4-1/png/pngerror.c ****             for (offset = 1; offset<15; offset++)
  54:fltk-1.3.4-1/png/pngerror.c ****                if (error_message[offset] == ' ')
  55:fltk-1.3.4-1/png/pngerror.c ****                   break;
  56:fltk-1.3.4-1/png/pngerror.c **** 
  57:fltk-1.3.4-1/png/pngerror.c ****             if ((png_ptr->flags & PNG_FLAG_STRIP_ERROR_TEXT) != 0)
  58:fltk-1.3.4-1/png/pngerror.c ****             {
  59:fltk-1.3.4-1/png/pngerror.c ****                int i;
  60:fltk-1.3.4-1/png/pngerror.c ****                for (i = 0; i < offset - 1; i++)
  61:fltk-1.3.4-1/png/pngerror.c ****                   msg[i] = error_message[i + 1];
  62:fltk-1.3.4-1/png/pngerror.c ****                msg[i - 1] = '\0';
  63:fltk-1.3.4-1/png/pngerror.c ****                error_message = msg;
  64:fltk-1.3.4-1/png/pngerror.c ****             }
  65:fltk-1.3.4-1/png/pngerror.c **** 
  66:fltk-1.3.4-1/png/pngerror.c ****             else
  67:fltk-1.3.4-1/png/pngerror.c ****                error_message += offset;
  68:fltk-1.3.4-1/png/pngerror.c ****       }
  69:fltk-1.3.4-1/png/pngerror.c **** 
  70:fltk-1.3.4-1/png/pngerror.c ****       else
  71:fltk-1.3.4-1/png/pngerror.c ****       {
  72:fltk-1.3.4-1/png/pngerror.c ****          if ((png_ptr->flags & PNG_FLAG_STRIP_ERROR_TEXT) != 0)
  73:fltk-1.3.4-1/png/pngerror.c ****          {
  74:fltk-1.3.4-1/png/pngerror.c ****             msg[0] = '0';
  75:fltk-1.3.4-1/png/pngerror.c ****             msg[1] = '\0';
  76:fltk-1.3.4-1/png/pngerror.c ****             error_message = msg;
  77:fltk-1.3.4-1/png/pngerror.c ****          }
  78:fltk-1.3.4-1/png/pngerror.c ****        }
  79:fltk-1.3.4-1/png/pngerror.c ****      }
  80:fltk-1.3.4-1/png/pngerror.c ****    }
  81:fltk-1.3.4-1/png/pngerror.c **** #endif
  82:fltk-1.3.4-1/png/pngerror.c ****    if (png_ptr != NULL && png_ptr->error_fn != NULL)
  83:fltk-1.3.4-1/png/pngerror.c ****       (*(png_ptr->error_fn))(png_constcast(png_structrp,png_ptr),
  84:fltk-1.3.4-1/png/pngerror.c ****           error_message);
  85:fltk-1.3.4-1/png/pngerror.c **** 
  86:fltk-1.3.4-1/png/pngerror.c ****    /* If the custom handler doesn't exist, or if it returns,
  87:fltk-1.3.4-1/png/pngerror.c ****       use the default handler, which will not return. */
  88:fltk-1.3.4-1/png/pngerror.c ****    png_default_error(png_ptr, error_message);
  89:fltk-1.3.4-1/png/pngerror.c **** }
  90:fltk-1.3.4-1/png/pngerror.c **** #else
  91:fltk-1.3.4-1/png/pngerror.c **** PNG_FUNCTION(void,PNGAPI
  92:fltk-1.3.4-1/png/pngerror.c **** png_err,(png_const_structrp png_ptr),PNG_NORETURN)
  93:fltk-1.3.4-1/png/pngerror.c **** {
  94:fltk-1.3.4-1/png/pngerror.c ****    /* Prior to 1.5.2 the error_fn received a NULL pointer, expressed
  95:fltk-1.3.4-1/png/pngerror.c ****     * erroneously as '\0', instead of the empty string "".  This was
  96:fltk-1.3.4-1/png/pngerror.c ****     * apparently an error, introduced in libpng-1.2.20, and png_default_error
  97:fltk-1.3.4-1/png/pngerror.c ****     * will crash in this case.
  98:fltk-1.3.4-1/png/pngerror.c ****     */
  99:fltk-1.3.4-1/png/pngerror.c ****    if (png_ptr != NULL && png_ptr->error_fn != NULL)
 100:fltk-1.3.4-1/png/pngerror.c ****       (*(png_ptr->error_fn))(png_constcast(png_structrp,png_ptr), "");
 101:fltk-1.3.4-1/png/pngerror.c **** 
 102:fltk-1.3.4-1/png/pngerror.c ****    /* If the custom handler doesn't exist, or if it returns,
 103:fltk-1.3.4-1/png/pngerror.c ****       use the default handler, which will not return. */
 104:fltk-1.3.4-1/png/pngerror.c ****    png_default_error(png_ptr, "");
 105:fltk-1.3.4-1/png/pngerror.c **** }
 106:fltk-1.3.4-1/png/pngerror.c **** #endif /* ERROR_TEXT */
 107:fltk-1.3.4-1/png/pngerror.c **** 
 108:fltk-1.3.4-1/png/pngerror.c **** /* Utility to safely appends strings to a buffer.  This never errors out so
 109:fltk-1.3.4-1/png/pngerror.c ****  * error checking is not required in the caller.
 110:fltk-1.3.4-1/png/pngerror.c ****  */
 111:fltk-1.3.4-1/png/pngerror.c **** size_t
 112:fltk-1.3.4-1/png/pngerror.c **** png_safecat(png_charp buffer, size_t bufsize, size_t pos,
 113:fltk-1.3.4-1/png/pngerror.c ****    png_const_charp string)
 114:fltk-1.3.4-1/png/pngerror.c **** {
 115:fltk-1.3.4-1/png/pngerror.c ****    if (buffer != NULL && pos < bufsize)
 116:fltk-1.3.4-1/png/pngerror.c ****    {
 117:fltk-1.3.4-1/png/pngerror.c ****       if (string != NULL)
 118:fltk-1.3.4-1/png/pngerror.c ****          while (*string != '\0' && pos < bufsize-1)
 119:fltk-1.3.4-1/png/pngerror.c ****            buffer[pos++] = *string++;
 120:fltk-1.3.4-1/png/pngerror.c **** 
 121:fltk-1.3.4-1/png/pngerror.c ****       buffer[pos] = '\0';
 122:fltk-1.3.4-1/png/pngerror.c ****    }
 123:fltk-1.3.4-1/png/pngerror.c **** 
 124:fltk-1.3.4-1/png/pngerror.c ****    return pos;
 125:fltk-1.3.4-1/png/pngerror.c **** }
 126:fltk-1.3.4-1/png/pngerror.c **** 
 127:fltk-1.3.4-1/png/pngerror.c **** #if defined(PNG_WARNINGS_SUPPORTED) || defined(PNG_TIME_RFC1123_SUPPORTED)
 128:fltk-1.3.4-1/png/pngerror.c **** /* Utility to dump an unsigned value into a buffer, given a start pointer and
 129:fltk-1.3.4-1/png/pngerror.c ****  * and end pointer (which should point just *beyond* the end of the buffer!)
 130:fltk-1.3.4-1/png/pngerror.c ****  * Returns the pointer to the start of the formatted string.
 131:fltk-1.3.4-1/png/pngerror.c ****  */
 132:fltk-1.3.4-1/png/pngerror.c **** png_charp
 133:fltk-1.3.4-1/png/pngerror.c **** png_format_number(png_const_charp start, png_charp end, int format,
 134:fltk-1.3.4-1/png/pngerror.c ****    png_alloc_size_t number)
 135:fltk-1.3.4-1/png/pngerror.c **** {
 136:fltk-1.3.4-1/png/pngerror.c ****    int count = 0;    /* number of digits output */
 137:fltk-1.3.4-1/png/pngerror.c ****    int mincount = 1; /* minimum number required */
 138:fltk-1.3.4-1/png/pngerror.c ****    int output = 0;   /* digit output (for the fixed point format) */
 139:fltk-1.3.4-1/png/pngerror.c **** 
 140:fltk-1.3.4-1/png/pngerror.c ****    *--end = '\0';
 141:fltk-1.3.4-1/png/pngerror.c **** 
 142:fltk-1.3.4-1/png/pngerror.c ****    /* This is written so that the loop always runs at least once, even with
 143:fltk-1.3.4-1/png/pngerror.c ****     * number zero.
 144:fltk-1.3.4-1/png/pngerror.c ****     */
 145:fltk-1.3.4-1/png/pngerror.c ****    while (end > start && (number != 0 || count < mincount))
 146:fltk-1.3.4-1/png/pngerror.c ****    {
 147:fltk-1.3.4-1/png/pngerror.c **** 
 148:fltk-1.3.4-1/png/pngerror.c ****       static const char digits[] = "0123456789ABCDEF";
 149:fltk-1.3.4-1/png/pngerror.c **** 
 150:fltk-1.3.4-1/png/pngerror.c ****       switch (format)
 151:fltk-1.3.4-1/png/pngerror.c ****       {
 152:fltk-1.3.4-1/png/pngerror.c ****          case PNG_NUMBER_FORMAT_fixed:
 153:fltk-1.3.4-1/png/pngerror.c ****             /* Needs five digits (the fraction) */
 154:fltk-1.3.4-1/png/pngerror.c ****             mincount = 5;
 155:fltk-1.3.4-1/png/pngerror.c ****             if (output != 0 || number % 10 != 0)
 156:fltk-1.3.4-1/png/pngerror.c ****             {
 157:fltk-1.3.4-1/png/pngerror.c ****                *--end = digits[number % 10];
 158:fltk-1.3.4-1/png/pngerror.c ****                output = 1;
 159:fltk-1.3.4-1/png/pngerror.c ****             }
 160:fltk-1.3.4-1/png/pngerror.c ****             number /= 10;
 161:fltk-1.3.4-1/png/pngerror.c ****             break;
 162:fltk-1.3.4-1/png/pngerror.c **** 
 163:fltk-1.3.4-1/png/pngerror.c ****          case PNG_NUMBER_FORMAT_02u:
 164:fltk-1.3.4-1/png/pngerror.c ****             /* Expects at least 2 digits. */
 165:fltk-1.3.4-1/png/pngerror.c ****             mincount = 2;
 166:fltk-1.3.4-1/png/pngerror.c ****             /* FALL THROUGH */
 167:fltk-1.3.4-1/png/pngerror.c **** 
 168:fltk-1.3.4-1/png/pngerror.c ****          case PNG_NUMBER_FORMAT_u:
 169:fltk-1.3.4-1/png/pngerror.c ****             *--end = digits[number % 10];
 170:fltk-1.3.4-1/png/pngerror.c ****             number /= 10;
 171:fltk-1.3.4-1/png/pngerror.c ****             break;
 172:fltk-1.3.4-1/png/pngerror.c **** 
 173:fltk-1.3.4-1/png/pngerror.c ****          case PNG_NUMBER_FORMAT_02x:
 174:fltk-1.3.4-1/png/pngerror.c ****             /* This format expects at least two digits */
 175:fltk-1.3.4-1/png/pngerror.c ****             mincount = 2;
 176:fltk-1.3.4-1/png/pngerror.c ****             /* FALL THROUGH */
 177:fltk-1.3.4-1/png/pngerror.c **** 
 178:fltk-1.3.4-1/png/pngerror.c ****          case PNG_NUMBER_FORMAT_x:
 179:fltk-1.3.4-1/png/pngerror.c ****             *--end = digits[number & 0xf];
 180:fltk-1.3.4-1/png/pngerror.c ****             number >>= 4;
 181:fltk-1.3.4-1/png/pngerror.c ****             break;
 182:fltk-1.3.4-1/png/pngerror.c **** 
 183:fltk-1.3.4-1/png/pngerror.c ****          default: /* an error */
 184:fltk-1.3.4-1/png/pngerror.c ****             number = 0;
 185:fltk-1.3.4-1/png/pngerror.c ****             break;
 186:fltk-1.3.4-1/png/pngerror.c ****       }
 187:fltk-1.3.4-1/png/pngerror.c **** 
 188:fltk-1.3.4-1/png/pngerror.c ****       /* Keep track of the number of digits added */
 189:fltk-1.3.4-1/png/pngerror.c ****       ++count;
 190:fltk-1.3.4-1/png/pngerror.c **** 
 191:fltk-1.3.4-1/png/pngerror.c ****       /* Float a fixed number here: */
 192:fltk-1.3.4-1/png/pngerror.c ****       if ((format == PNG_NUMBER_FORMAT_fixed) && (count == 5) && (end > start))
 193:fltk-1.3.4-1/png/pngerror.c ****       {
 194:fltk-1.3.4-1/png/pngerror.c ****          /* End of the fraction, but maybe nothing was output?  In that case
 195:fltk-1.3.4-1/png/pngerror.c ****           * drop the decimal point.  If the number is a true zero handle that
 196:fltk-1.3.4-1/png/pngerror.c ****           * here.
 197:fltk-1.3.4-1/png/pngerror.c ****           */
 198:fltk-1.3.4-1/png/pngerror.c ****          if (output != 0)
 199:fltk-1.3.4-1/png/pngerror.c ****             *--end = '.';
 200:fltk-1.3.4-1/png/pngerror.c ****          else if (number == 0) /* and !output */
 201:fltk-1.3.4-1/png/pngerror.c ****             *--end = '0';
 202:fltk-1.3.4-1/png/pngerror.c ****       }
 203:fltk-1.3.4-1/png/pngerror.c ****    }
 204:fltk-1.3.4-1/png/pngerror.c **** 
 205:fltk-1.3.4-1/png/pngerror.c ****    return end;
 206:fltk-1.3.4-1/png/pngerror.c **** }
 207:fltk-1.3.4-1/png/pngerror.c **** #endif
 208:fltk-1.3.4-1/png/pngerror.c **** 
 209:fltk-1.3.4-1/png/pngerror.c **** #ifdef PNG_WARNINGS_SUPPORTED
 210:fltk-1.3.4-1/png/pngerror.c **** /* This function is called whenever there is a non-fatal error.  This function
 211:fltk-1.3.4-1/png/pngerror.c ****  * should not be changed.  If there is a need to handle warnings differently,
 212:fltk-1.3.4-1/png/pngerror.c ****  * you should supply a replacement warning function and use
 213:fltk-1.3.4-1/png/pngerror.c ****  * png_set_error_fn() to replace the warning function at run-time.
 214:fltk-1.3.4-1/png/pngerror.c ****  */
 215:fltk-1.3.4-1/png/pngerror.c **** void PNGAPI
 216:fltk-1.3.4-1/png/pngerror.c **** png_warning(png_const_structrp png_ptr, png_const_charp warning_message)
 217:fltk-1.3.4-1/png/pngerror.c **** {
 218:fltk-1.3.4-1/png/pngerror.c ****    int offset = 0;
 219:fltk-1.3.4-1/png/pngerror.c ****    if (png_ptr != NULL)
 220:fltk-1.3.4-1/png/pngerror.c ****    {
 221:fltk-1.3.4-1/png/pngerror.c **** #ifdef PNG_ERROR_NUMBERS_SUPPORTED
 222:fltk-1.3.4-1/png/pngerror.c ****    if ((png_ptr->flags &
 223:fltk-1.3.4-1/png/pngerror.c ****        (PNG_FLAG_STRIP_ERROR_NUMBERS|PNG_FLAG_STRIP_ERROR_TEXT)) != 0)
 224:fltk-1.3.4-1/png/pngerror.c **** #endif
 225:fltk-1.3.4-1/png/pngerror.c ****       {
 226:fltk-1.3.4-1/png/pngerror.c ****          if (*warning_message == PNG_LITERAL_SHARP)
 227:fltk-1.3.4-1/png/pngerror.c ****          {
 228:fltk-1.3.4-1/png/pngerror.c ****             for (offset = 1; offset < 15; offset++)
 229:fltk-1.3.4-1/png/pngerror.c ****                if (warning_message[offset] == ' ')
 230:fltk-1.3.4-1/png/pngerror.c ****                   break;
 231:fltk-1.3.4-1/png/pngerror.c ****          }
 232:fltk-1.3.4-1/png/pngerror.c ****       }
 233:fltk-1.3.4-1/png/pngerror.c ****    }
 234:fltk-1.3.4-1/png/pngerror.c ****    if (png_ptr != NULL && png_ptr->warning_fn != NULL)
 235:fltk-1.3.4-1/png/pngerror.c ****       (*(png_ptr->warning_fn))(png_constcast(png_structrp,png_ptr),
 236:fltk-1.3.4-1/png/pngerror.c ****          warning_message + offset);
 237:fltk-1.3.4-1/png/pngerror.c ****    else
 238:fltk-1.3.4-1/png/pngerror.c ****       png_default_warning(png_ptr, warning_message + offset);
 239:fltk-1.3.4-1/png/pngerror.c **** }
 240:fltk-1.3.4-1/png/pngerror.c **** 
 241:fltk-1.3.4-1/png/pngerror.c **** /* These functions support 'formatted' warning messages with up to
 242:fltk-1.3.4-1/png/pngerror.c ****  * PNG_WARNING_PARAMETER_COUNT parameters.  In the format string the parameter
 243:fltk-1.3.4-1/png/pngerror.c ****  * is introduced by @<number>, where 'number' starts at 1.  This follows the
 244:fltk-1.3.4-1/png/pngerror.c ****  * standard established by X/Open for internationalizable error messages.
 245:fltk-1.3.4-1/png/pngerror.c ****  */
 246:fltk-1.3.4-1/png/pngerror.c **** void
 247:fltk-1.3.4-1/png/pngerror.c **** png_warning_parameter(png_warning_parameters p, int number,
 248:fltk-1.3.4-1/png/pngerror.c ****    png_const_charp string)
 249:fltk-1.3.4-1/png/pngerror.c **** {
 250:fltk-1.3.4-1/png/pngerror.c ****    if (number > 0 && number <= PNG_WARNING_PARAMETER_COUNT)
 251:fltk-1.3.4-1/png/pngerror.c ****       (void)png_safecat(p[number-1], (sizeof p[number-1]), 0, string);
 252:fltk-1.3.4-1/png/pngerror.c **** }
 253:fltk-1.3.4-1/png/pngerror.c **** 
 254:fltk-1.3.4-1/png/pngerror.c **** void
 255:fltk-1.3.4-1/png/pngerror.c **** png_warning_parameter_unsigned(png_warning_parameters p, int number, int format,
 256:fltk-1.3.4-1/png/pngerror.c ****    png_alloc_size_t value)
 257:fltk-1.3.4-1/png/pngerror.c **** {
 258:fltk-1.3.4-1/png/pngerror.c ****    char buffer[PNG_NUMBER_BUFFER_SIZE];
 259:fltk-1.3.4-1/png/pngerror.c ****    png_warning_parameter(p, number, PNG_FORMAT_NUMBER(buffer, format, value));
 260:fltk-1.3.4-1/png/pngerror.c **** }
 261:fltk-1.3.4-1/png/pngerror.c **** 
 262:fltk-1.3.4-1/png/pngerror.c **** void
 263:fltk-1.3.4-1/png/pngerror.c **** png_warning_parameter_signed(png_warning_parameters p, int number, int format,
 264:fltk-1.3.4-1/png/pngerror.c ****    png_int_32 value)
 265:fltk-1.3.4-1/png/pngerror.c **** {
 266:fltk-1.3.4-1/png/pngerror.c ****    png_alloc_size_t u;
 267:fltk-1.3.4-1/png/pngerror.c ****    png_charp str;
 268:fltk-1.3.4-1/png/pngerror.c ****    char buffer[PNG_NUMBER_BUFFER_SIZE];
 269:fltk-1.3.4-1/png/pngerror.c **** 
 270:fltk-1.3.4-1/png/pngerror.c ****    /* Avoid overflow by doing the negate in a png_alloc_size_t: */
 271:fltk-1.3.4-1/png/pngerror.c ****    u = (png_alloc_size_t)value;
 272:fltk-1.3.4-1/png/pngerror.c ****    if (value < 0)
 273:fltk-1.3.4-1/png/pngerror.c ****       u = ~u + 1;
 274:fltk-1.3.4-1/png/pngerror.c **** 
 275:fltk-1.3.4-1/png/pngerror.c ****    str = PNG_FORMAT_NUMBER(buffer, format, u);
 276:fltk-1.3.4-1/png/pngerror.c **** 
 277:fltk-1.3.4-1/png/pngerror.c ****    if (value < 0 && str > buffer)
 278:fltk-1.3.4-1/png/pngerror.c ****       *--str = '-';
 279:fltk-1.3.4-1/png/pngerror.c **** 
 280:fltk-1.3.4-1/png/pngerror.c ****    png_warning_parameter(p, number, str);
 281:fltk-1.3.4-1/png/pngerror.c **** }
 282:fltk-1.3.4-1/png/pngerror.c **** 
 283:fltk-1.3.4-1/png/pngerror.c **** void
 284:fltk-1.3.4-1/png/pngerror.c **** png_formatted_warning(png_const_structrp png_ptr, png_warning_parameters p,
 285:fltk-1.3.4-1/png/pngerror.c ****    png_const_charp message)
 286:fltk-1.3.4-1/png/pngerror.c **** {
 287:fltk-1.3.4-1/png/pngerror.c ****    /* The internal buffer is just 192 bytes - enough for all our messages,
 288:fltk-1.3.4-1/png/pngerror.c ****     * overflow doesn't happen because this code checks!  If someone figures
 289:fltk-1.3.4-1/png/pngerror.c ****     * out how to send us a message longer than 192 bytes, all that will
 290:fltk-1.3.4-1/png/pngerror.c ****     * happen is that the message will be truncated appropriately.
 291:fltk-1.3.4-1/png/pngerror.c ****     */
 292:fltk-1.3.4-1/png/pngerror.c ****    size_t i = 0; /* Index in the msg[] buffer: */
 293:fltk-1.3.4-1/png/pngerror.c ****    char msg[192];
 294:fltk-1.3.4-1/png/pngerror.c **** 
 295:fltk-1.3.4-1/png/pngerror.c ****    /* Each iteration through the following loop writes at most one character
 296:fltk-1.3.4-1/png/pngerror.c ****     * to msg[i++] then returns here to validate that there is still space for
 297:fltk-1.3.4-1/png/pngerror.c ****     * the trailing '\0'.  It may (in the case of a parameter) read more than
 298:fltk-1.3.4-1/png/pngerror.c ****     * one character from message[]; it must check for '\0' and continue to the
 299:fltk-1.3.4-1/png/pngerror.c ****     * test if it finds the end of string.
 300:fltk-1.3.4-1/png/pngerror.c ****     */
 301:fltk-1.3.4-1/png/pngerror.c ****    while (i<(sizeof msg)-1 && *message != '\0')
 302:fltk-1.3.4-1/png/pngerror.c ****    {
 303:fltk-1.3.4-1/png/pngerror.c ****       /* '@' at end of string is now just printed (previously it was skipped);
 304:fltk-1.3.4-1/png/pngerror.c ****        * it is an error in the calling code to terminate the string with @.
 305:fltk-1.3.4-1/png/pngerror.c ****        */
 306:fltk-1.3.4-1/png/pngerror.c ****       if (p != NULL && *message == '@' && message[1] != '\0')
 307:fltk-1.3.4-1/png/pngerror.c ****       {
 308:fltk-1.3.4-1/png/pngerror.c ****          int parameter_char = *++message; /* Consume the '@' */
 309:fltk-1.3.4-1/png/pngerror.c ****          static const char valid_parameters[] = "123456789";
 310:fltk-1.3.4-1/png/pngerror.c ****          int parameter = 0;
 311:fltk-1.3.4-1/png/pngerror.c **** 
 312:fltk-1.3.4-1/png/pngerror.c ****          /* Search for the parameter digit, the index in the string is the
 313:fltk-1.3.4-1/png/pngerror.c ****           * parameter to use.
 314:fltk-1.3.4-1/png/pngerror.c ****           */
 315:fltk-1.3.4-1/png/pngerror.c ****          while (valid_parameters[parameter] != parameter_char &&
 316:fltk-1.3.4-1/png/pngerror.c ****             valid_parameters[parameter] != '\0')
 317:fltk-1.3.4-1/png/pngerror.c ****             ++parameter;
 318:fltk-1.3.4-1/png/pngerror.c **** 
 319:fltk-1.3.4-1/png/pngerror.c ****          /* If the parameter digit is out of range it will just get printed. */
 320:fltk-1.3.4-1/png/pngerror.c ****          if (parameter < PNG_WARNING_PARAMETER_COUNT)
 321:fltk-1.3.4-1/png/pngerror.c ****          {
 322:fltk-1.3.4-1/png/pngerror.c ****             /* Append this parameter */
 323:fltk-1.3.4-1/png/pngerror.c ****             png_const_charp parm = p[parameter];
 324:fltk-1.3.4-1/png/pngerror.c ****             png_const_charp pend = p[parameter] + (sizeof p[parameter]);
 325:fltk-1.3.4-1/png/pngerror.c **** 
 326:fltk-1.3.4-1/png/pngerror.c ****             /* No need to copy the trailing '\0' here, but there is no guarantee
 327:fltk-1.3.4-1/png/pngerror.c ****              * that parm[] has been initialized, so there is no guarantee of a
 328:fltk-1.3.4-1/png/pngerror.c ****              * trailing '\0':
 329:fltk-1.3.4-1/png/pngerror.c ****              */
 330:fltk-1.3.4-1/png/pngerror.c ****             while (i<(sizeof msg)-1 && *parm != '\0' && parm < pend)
 331:fltk-1.3.4-1/png/pngerror.c ****                msg[i++] = *parm++;
 332:fltk-1.3.4-1/png/pngerror.c **** 
 333:fltk-1.3.4-1/png/pngerror.c ****             /* Consume the parameter digit too: */
 334:fltk-1.3.4-1/png/pngerror.c ****             ++message;
 335:fltk-1.3.4-1/png/pngerror.c ****             continue;
 336:fltk-1.3.4-1/png/pngerror.c ****          }
 337:fltk-1.3.4-1/png/pngerror.c **** 
 338:fltk-1.3.4-1/png/pngerror.c ****          /* else not a parameter and there is a character after the @ sign; just
 339:fltk-1.3.4-1/png/pngerror.c ****           * copy that.  This is known not to be '\0' because of the test above.
 340:fltk-1.3.4-1/png/pngerror.c ****           */
 341:fltk-1.3.4-1/png/pngerror.c ****       }
 342:fltk-1.3.4-1/png/pngerror.c **** 
 343:fltk-1.3.4-1/png/pngerror.c ****       /* At this point *message can't be '\0', even in the bad parameter case
 344:fltk-1.3.4-1/png/pngerror.c ****        * above where there is a lone '@' at the end of the message string.
 345:fltk-1.3.4-1/png/pngerror.c ****        */
 346:fltk-1.3.4-1/png/pngerror.c ****       msg[i++] = *message++;
 347:fltk-1.3.4-1/png/pngerror.c ****    }
 348:fltk-1.3.4-1/png/pngerror.c **** 
 349:fltk-1.3.4-1/png/pngerror.c ****    /* i is always less than (sizeof msg), so: */
 350:fltk-1.3.4-1/png/pngerror.c ****    msg[i] = '\0';
 351:fltk-1.3.4-1/png/pngerror.c **** 
 352:fltk-1.3.4-1/png/pngerror.c ****    /* And this is the formatted message. It may be larger than
 353:fltk-1.3.4-1/png/pngerror.c ****     * PNG_MAX_ERROR_TEXT, but that is only used for 'chunk' errors and these
 354:fltk-1.3.4-1/png/pngerror.c ****     * are not (currently) formatted.
 355:fltk-1.3.4-1/png/pngerror.c ****     */
 356:fltk-1.3.4-1/png/pngerror.c ****    png_warning(png_ptr, msg);
 357:fltk-1.3.4-1/png/pngerror.c **** }
 358:fltk-1.3.4-1/png/pngerror.c **** #endif /* WARNINGS */
 359:fltk-1.3.4-1/png/pngerror.c **** 
 360:fltk-1.3.4-1/png/pngerror.c **** #ifdef PNG_BENIGN_ERRORS_SUPPORTED
 361:fltk-1.3.4-1/png/pngerror.c **** void PNGAPI
 362:fltk-1.3.4-1/png/pngerror.c **** png_benign_error(png_const_structrp png_ptr, png_const_charp error_message)
 363:fltk-1.3.4-1/png/pngerror.c **** {
 364:fltk-1.3.4-1/png/pngerror.c ****    if ((png_ptr->flags & PNG_FLAG_BENIGN_ERRORS_WARN) != 0)
 365:fltk-1.3.4-1/png/pngerror.c ****    {
 366:fltk-1.3.4-1/png/pngerror.c **** #     ifdef PNG_READ_SUPPORTED
 367:fltk-1.3.4-1/png/pngerror.c ****          if ((png_ptr->mode & PNG_IS_READ_STRUCT) != 0 &&
 368:fltk-1.3.4-1/png/pngerror.c ****             png_ptr->chunk_name != 0)
 369:fltk-1.3.4-1/png/pngerror.c ****             png_chunk_warning(png_ptr, error_message);
 370:fltk-1.3.4-1/png/pngerror.c ****          else
 371:fltk-1.3.4-1/png/pngerror.c **** #     endif
 372:fltk-1.3.4-1/png/pngerror.c ****       png_warning(png_ptr, error_message);
 373:fltk-1.3.4-1/png/pngerror.c ****    }
 374:fltk-1.3.4-1/png/pngerror.c **** 
 375:fltk-1.3.4-1/png/pngerror.c ****    else
 376:fltk-1.3.4-1/png/pngerror.c ****    {
 377:fltk-1.3.4-1/png/pngerror.c **** #     ifdef PNG_READ_SUPPORTED
 378:fltk-1.3.4-1/png/pngerror.c ****          if ((png_ptr->mode & PNG_IS_READ_STRUCT) != 0 &&
 379:fltk-1.3.4-1/png/pngerror.c ****             png_ptr->chunk_name != 0)
 380:fltk-1.3.4-1/png/pngerror.c ****             png_chunk_error(png_ptr, error_message);
 381:fltk-1.3.4-1/png/pngerror.c ****          else
 382:fltk-1.3.4-1/png/pngerror.c **** #     endif
 383:fltk-1.3.4-1/png/pngerror.c ****       png_error(png_ptr, error_message);
 384:fltk-1.3.4-1/png/pngerror.c ****    }
 385:fltk-1.3.4-1/png/pngerror.c **** 
 386:fltk-1.3.4-1/png/pngerror.c **** #  ifndef PNG_ERROR_TEXT_SUPPORTED
 387:fltk-1.3.4-1/png/pngerror.c ****       PNG_UNUSED(error_message)
 388:fltk-1.3.4-1/png/pngerror.c **** #  endif
 389:fltk-1.3.4-1/png/pngerror.c **** }
 390:fltk-1.3.4-1/png/pngerror.c **** 
 391:fltk-1.3.4-1/png/pngerror.c **** void /* PRIVATE */
 392:fltk-1.3.4-1/png/pngerror.c **** png_app_warning(png_const_structrp png_ptr, png_const_charp error_message)
 393:fltk-1.3.4-1/png/pngerror.c **** {
 394:fltk-1.3.4-1/png/pngerror.c ****   if ((png_ptr->flags & PNG_FLAG_APP_WARNINGS_WARN) != 0)
 395:fltk-1.3.4-1/png/pngerror.c ****      png_warning(png_ptr, error_message);
 396:fltk-1.3.4-1/png/pngerror.c ****   else
 397:fltk-1.3.4-1/png/pngerror.c ****      png_error(png_ptr, error_message);
 398:fltk-1.3.4-1/png/pngerror.c **** 
 399:fltk-1.3.4-1/png/pngerror.c **** #  ifndef PNG_ERROR_TEXT_SUPPORTED
 400:fltk-1.3.4-1/png/pngerror.c ****       PNG_UNUSED(error_message)
 401:fltk-1.3.4-1/png/pngerror.c **** #  endif
 402:fltk-1.3.4-1/png/pngerror.c **** }
 403:fltk-1.3.4-1/png/pngerror.c **** 
 404:fltk-1.3.4-1/png/pngerror.c **** void /* PRIVATE */
 405:fltk-1.3.4-1/png/pngerror.c **** png_app_error(png_const_structrp png_ptr, png_const_charp error_message)
 406:fltk-1.3.4-1/png/pngerror.c **** {
 407:fltk-1.3.4-1/png/pngerror.c ****   if ((png_ptr->flags & PNG_FLAG_APP_ERRORS_WARN) != 0)
 408:fltk-1.3.4-1/png/pngerror.c ****      png_warning(png_ptr, error_message);
 409:fltk-1.3.4-1/png/pngerror.c ****   else
 410:fltk-1.3.4-1/png/pngerror.c ****      png_error(png_ptr, error_message);
 411:fltk-1.3.4-1/png/pngerror.c **** 
 412:fltk-1.3.4-1/png/pngerror.c **** #  ifndef PNG_ERROR_TEXT_SUPPORTED
 413:fltk-1.3.4-1/png/pngerror.c ****       PNG_UNUSED(error_message)
 414:fltk-1.3.4-1/png/pngerror.c **** #  endif
 415:fltk-1.3.4-1/png/pngerror.c **** }
 416:fltk-1.3.4-1/png/pngerror.c **** #endif /* BENIGN_ERRORS */
 417:fltk-1.3.4-1/png/pngerror.c **** 
 418:fltk-1.3.4-1/png/pngerror.c **** #define PNG_MAX_ERROR_TEXT 196 /* Currently limited by profile_error in png.c */
 419:fltk-1.3.4-1/png/pngerror.c **** #if defined(PNG_WARNINGS_SUPPORTED) || \
 420:fltk-1.3.4-1/png/pngerror.c ****    (defined(PNG_READ_SUPPORTED) && defined(PNG_ERROR_TEXT_SUPPORTED))
 421:fltk-1.3.4-1/png/pngerror.c **** /* These utilities are used internally to build an error message that relates
 422:fltk-1.3.4-1/png/pngerror.c ****  * to the current chunk.  The chunk name comes from png_ptr->chunk_name,
 423:fltk-1.3.4-1/png/pngerror.c ****  * which is used to prefix the message.  The message is limited in length
 424:fltk-1.3.4-1/png/pngerror.c ****  * to 63 bytes. The name characters are output as hex digits wrapped in []
 425:fltk-1.3.4-1/png/pngerror.c ****  * if the character is invalid.
 426:fltk-1.3.4-1/png/pngerror.c ****  */
 427:fltk-1.3.4-1/png/pngerror.c **** #define isnonalpha(c) ((c) < 65 || (c) > 122 || ((c) > 90 && (c) < 97))
 428:fltk-1.3.4-1/png/pngerror.c **** static PNG_CONST char png_digit[16] = {
 429:fltk-1.3.4-1/png/pngerror.c ****    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
 430:fltk-1.3.4-1/png/pngerror.c ****    'A', 'B', 'C', 'D', 'E', 'F'
 431:fltk-1.3.4-1/png/pngerror.c **** };
 432:fltk-1.3.4-1/png/pngerror.c **** 
 433:fltk-1.3.4-1/png/pngerror.c **** static void /* PRIVATE */
 434:fltk-1.3.4-1/png/pngerror.c **** png_format_buffer(png_const_structrp png_ptr, png_charp buffer, png_const_charp
  16              		.loc 1 434 0
  17              		.cfi_startproc
  18              	.LVL0:
 435:fltk-1.3.4-1/png/pngerror.c ****     error_message)
 436:fltk-1.3.4-1/png/pngerror.c **** {
 437:fltk-1.3.4-1/png/pngerror.c ****    png_uint_32 chunk_name = png_ptr->chunk_name;
 438:fltk-1.3.4-1/png/pngerror.c ****    int iout = 0, ishift = 24;
  19              		.loc 1 438 0
  20 0000 31C0     		xorl	%eax, %eax
  21 0002 B9180000 		movl	$24, %ecx
  21      00
  22              	.LVL1:
  23              	.L5:
  24              	.LBB35:
 439:fltk-1.3.4-1/png/pngerror.c **** 
 440:fltk-1.3.4-1/png/pngerror.c ****    while (ishift >= 0)
 441:fltk-1.3.4-1/png/pngerror.c ****    {
 442:fltk-1.3.4-1/png/pngerror.c ****       int c = (int)(chunk_name >> ishift) & 0xff;
  25              		.loc 1 442 0
  26 0007 4189F8   		movl	%edi, %r8d
  27 000a 41D3E8   		shrl	%cl, %r8d
  28              	.LVL2:
 443:fltk-1.3.4-1/png/pngerror.c **** 
 444:fltk-1.3.4-1/png/pngerror.c ****       ishift -= 8;
  29              		.loc 1 444 0
  30 000d 83E908   		subl	$8, %ecx
  31              	.LVL3:
 445:fltk-1.3.4-1/png/pngerror.c ****       if (isnonalpha(c) != 0)
  32              		.loc 1 445 0
  33 0010 450FB6C8 		movzbl	%r8b, %r9d
  34 0014 458D51BF 		leal	-65(%r9), %r10d
  35 0018 4183FA39 		cmpl	$57, %r10d
  36 001c 7772     		ja	.L12
  37 001e 4183E95B 		subl	$91, %r9d
  38 0022 4183F905 		cmpl	$5, %r9d
  39 0026 7668     		jbe	.L12
  40              	.LVL4:
 446:fltk-1.3.4-1/png/pngerror.c ****       {
 447:fltk-1.3.4-1/png/pngerror.c ****          buffer[iout++] = PNG_LITERAL_LEFT_SQUARE_BRACKET;
 448:fltk-1.3.4-1/png/pngerror.c ****          buffer[iout++] = png_digit[(c & 0xf0) >> 4];
 449:fltk-1.3.4-1/png/pngerror.c ****          buffer[iout++] = png_digit[c & 0x0f];
 450:fltk-1.3.4-1/png/pngerror.c ****          buffer[iout++] = PNG_LITERAL_RIGHT_SQUARE_BRACKET;
 451:fltk-1.3.4-1/png/pngerror.c ****       }
 452:fltk-1.3.4-1/png/pngerror.c **** 
 453:fltk-1.3.4-1/png/pngerror.c ****       else
 454:fltk-1.3.4-1/png/pngerror.c ****       {
 455:fltk-1.3.4-1/png/pngerror.c ****          buffer[iout++] = (char)c;
  41              		.loc 1 455 0
  42 0028 4C63C8   		movslq	%eax, %r9
  43 002b 83C001   		addl	$1, %eax
  44              	.LVL5:
  45 002e 4688040E 		movb	%r8b, (%rsi,%r9)
  46              	.LVL6:
  47              	.L4:
  48              	.LBE35:
 440:fltk-1.3.4-1/png/pngerror.c ****    {
  49              		.loc 1 440 0
  50 0032 83F9F8   		cmpl	$-8, %ecx
  51 0035 75D0     		jne	.L5
 456:fltk-1.3.4-1/png/pngerror.c ****       }
 457:fltk-1.3.4-1/png/pngerror.c ****    }
 458:fltk-1.3.4-1/png/pngerror.c **** 
 459:fltk-1.3.4-1/png/pngerror.c ****    if (error_message == NULL)
  52              		.loc 1 459 0
  53 0037 4885D2   		testq	%rdx, %rdx
  54 003a 0F84A100 		je	.L15
  54      0000
  55              	.LVL7:
  56              	.LBB36:
 460:fltk-1.3.4-1/png/pngerror.c ****       buffer[iout] = '\0';
 461:fltk-1.3.4-1/png/pngerror.c **** 
 462:fltk-1.3.4-1/png/pngerror.c ****    else
 463:fltk-1.3.4-1/png/pngerror.c ****    {
 464:fltk-1.3.4-1/png/pngerror.c ****       int iin = 0;
 465:fltk-1.3.4-1/png/pngerror.c **** 
 466:fltk-1.3.4-1/png/pngerror.c ****       buffer[iout++] = ':';
  57              		.loc 1 466 0
  58 0040 4863C8   		movslq	%eax, %rcx
  59              	.LVL8:
  60 0043 448D88C5 		leal	197(%rax), %r9d
  60      000000
  61 004a C6040E3A 		movb	$58, (%rsi,%rcx)
 467:fltk-1.3.4-1/png/pngerror.c ****       buffer[iout++] = ' ';
  62              		.loc 1 467 0
  63 004e 8D4801   		leal	1(%rax), %ecx
  64 0051 4863C9   		movslq	%ecx, %rcx
  65 0054 C6040E20 		movb	$32, (%rsi,%rcx)
  66 0058 8D4802   		leal	2(%rax), %ecx
  67              	.LVL9:
  68 005b 31C0     		xorl	%eax, %eax
 468:fltk-1.3.4-1/png/pngerror.c **** 
 469:fltk-1.3.4-1/png/pngerror.c ****       while (iin < PNG_MAX_ERROR_TEXT-1 && error_message[iin] != '\0')
 470:fltk-1.3.4-1/png/pngerror.c ****          buffer[iout++] = error_message[iin++];
  69              		.loc 1 470 0
  70 005d 4C63C1   		movslq	%ecx, %r8
  71 0060 4901F0   		addq	%rsi, %r8
  72 0063 EB13     		jmp	.L8
  73              	.LVL10:
  74              		.p2align 4,,10
  75 0065 0F1F00   		.p2align 3
  76              	.L10:
  77 0068 83C101   		addl	$1, %ecx
  78              	.LVL11:
  79 006b 41883C00 		movb	%dil, (%r8,%rax)
  80 006f 4883C001 		addq	$1, %rax
 469:fltk-1.3.4-1/png/pngerror.c ****          buffer[iout++] = error_message[iin++];
  81              		.loc 1 469 0
  82 0073 4439C9   		cmpl	%r9d, %ecx
  83 0076 7409     		je	.L9
  84              	.L8:
  85 0078 0FB63C02 		movzbl	(%rdx,%rax), %edi
  86 007c 4084FF   		testb	%dil, %dil
  87 007f 75E7     		jne	.L10
  88              	.L9:
 471:fltk-1.3.4-1/png/pngerror.c **** 
 472:fltk-1.3.4-1/png/pngerror.c ****       /* iin < PNG_MAX_ERROR_TEXT, so the following is safe: */
 473:fltk-1.3.4-1/png/pngerror.c ****       buffer[iout] = '\0';
  89              		.loc 1 473 0
  90 0081 4863C9   		movslq	%ecx, %rcx
  91 0084 C6040E00 		movb	$0, (%rsi,%rcx)
  92 0088 C3       		ret
  93              	.LVL12:
  94 0089 0F1F8000 		.p2align 4,,10
  94      000000
  95              		.p2align 3
  96              	.L12:
  97              	.LBE36:
  98              	.LBB37:
 448:fltk-1.3.4-1/png/pngerror.c ****          buffer[iout++] = png_digit[c & 0x0f];
  99              		.loc 1 448 0
 100 0090 4D89C2   		movq	%r8, %r10
 447:fltk-1.3.4-1/png/pngerror.c ****          buffer[iout++] = png_digit[(c & 0xf0) >> 4];
 101              		.loc 1 447 0
 102 0093 4C63C8   		movslq	%eax, %r9
 449:fltk-1.3.4-1/png/pngerror.c ****          buffer[iout++] = PNG_LITERAL_RIGHT_SQUARE_BRACKET;
 103              		.loc 1 449 0
 104 0096 4183E00F 		andl	$15, %r8d
 105              	.LVL13:
 448:fltk-1.3.4-1/png/pngerror.c ****          buffer[iout++] = png_digit[c & 0x0f];
 106              		.loc 1 448 0
 107 009a 49C1EA04 		shrq	$4, %r10
 447:fltk-1.3.4-1/png/pngerror.c ****          buffer[iout++] = png_digit[(c & 0xf0) >> 4];
 108              		.loc 1 447 0
 109 009e 42C6040E 		movb	$91, (%rsi,%r9)
 109      5B
 448:fltk-1.3.4-1/png/pngerror.c ****          buffer[iout++] = png_digit[c & 0x0f];
 110              		.loc 1 448 0
 111 00a3 448D4801 		leal	1(%rax), %r9d
 112 00a7 4183E20F 		andl	$15, %r10d
 449:fltk-1.3.4-1/png/pngerror.c ****          buffer[iout++] = PNG_LITERAL_RIGHT_SQUARE_BRACKET;
 113              		.loc 1 449 0
 114 00ab 450FB680 		movzbl	png_digit(%r8), %r8d
 114      00000000 
 448:fltk-1.3.4-1/png/pngerror.c ****          buffer[iout++] = png_digit[c & 0x0f];
 115              		.loc 1 448 0
 116 00b3 450FB692 		movzbl	png_digit(%r10), %r10d
 116      00000000 
 117 00bb 4D63C9   		movslq	%r9d, %r9
 118 00be 4688140E 		movb	%r10b, (%rsi,%r9)
 449:fltk-1.3.4-1/png/pngerror.c ****          buffer[iout++] = PNG_LITERAL_RIGHT_SQUARE_BRACKET;
 119              		.loc 1 449 0
 120 00c2 448D5002 		leal	2(%rax), %r10d
 121 00c6 448D4803 		leal	3(%rax), %r9d
 122              	.LVL14:
 450:fltk-1.3.4-1/png/pngerror.c ****       }
 123              		.loc 1 450 0
 124 00ca 83C004   		addl	$4, %eax
 449:fltk-1.3.4-1/png/pngerror.c ****          buffer[iout++] = PNG_LITERAL_RIGHT_SQUARE_BRACKET;
 125              		.loc 1 449 0
 126 00cd 4D63D2   		movslq	%r10d, %r10
 127 00d0 46880416 		movb	%r8b, (%rsi,%r10)
 128              	.LVL15:
 450:fltk-1.3.4-1/png/pngerror.c ****       }
 129              		.loc 1 450 0
 130 00d4 4D63C1   		movslq	%r9d, %r8
 131 00d7 42C60406 		movb	$93, (%rsi,%r8)
 131      5D
 132 00dc E951FFFF 		jmp	.L4
 132      FF
 133              	.L15:
 134              	.LBE37:
 460:fltk-1.3.4-1/png/pngerror.c **** 
 135              		.loc 1 460 0
 136 00e1 4898     		cltq
 137 00e3 C6040600 		movb	$0, (%rsi,%rax)
 138 00e7 C3       		ret
 139              		.cfi_endproc
 140              	.LFE83:
 142              		.section	.text.unlikely.png_format_buffer.isra.0
 143              	.LCOLDE0:
 144              		.section	.text.png_format_buffer.isra.0
 145              	.LHOTE0:
 146              		.section	.text.unlikely.png_safecat.part.2,"ax",@progbits
 147              	.LCOLDB1:
 148              		.section	.text.png_safecat.part.2,"ax",@progbits
 149              	.LHOTB1:
 150              		.p2align 4,,15
 152              	png_safecat.part.2:
 153              	.LFB85:
 112:fltk-1.3.4-1/png/pngerror.c ****    png_const_charp string)
 154              		.loc 1 112 0
 155              		.cfi_startproc
 156              	.LVL16:
 117:fltk-1.3.4-1/png/pngerror.c ****          while (*string != '\0' && pos < bufsize-1)
 157              		.loc 1 117 0
 158 0000 4885C9   		testq	%rcx, %rcx
 159 0003 743B     		je	.L20
 118:fltk-1.3.4-1/png/pngerror.c ****            buffer[pos++] = *string++;
 160              		.loc 1 118 0
 161 0005 440FB601 		movzbl	(%rcx), %r8d
 162 0009 4584C0   		testb	%r8b, %r8b
 163 000c 7432     		je	.L20
 164 000e 4883EE01 		subq	$1, %rsi
 165              	.LVL17:
 166 0012 4889D0   		movq	%rdx, %rax
 167 0015 4839F2   		cmpq	%rsi, %rdx
 168 0018 731E     		jnb	.L17
 169 001a 4829D1   		subq	%rdx, %rcx
 170              	.LVL18:
 171 001d EB06     		jmp	.L18
 172              	.LVL19:
 173 001f 90       		.p2align 4,,10
 174              		.p2align 3
 175              	.L26:
 176 0020 4839F0   		cmpq	%rsi, %rax
 177 0023 7313     		jnb	.L17
 178              	.LVL20:
 179              	.L18:
 119:fltk-1.3.4-1/png/pngerror.c **** 
 180              		.loc 1 119 0
 181 0025 4883C001 		addq	$1, %rax
 182              	.LVL21:
 183 0029 44884407 		movb	%r8b, -1(%rdi,%rax)
 183      FF
 118:fltk-1.3.4-1/png/pngerror.c ****            buffer[pos++] = *string++;
 184              		.loc 1 118 0
 185 002e 440FB604 		movzbl	(%rcx,%rax), %r8d
 185      01
 186 0033 4584C0   		testb	%r8b, %r8b
 187 0036 75E8     		jne	.L26
 188              	.LVL22:
 189              	.L17:
 121:fltk-1.3.4-1/png/pngerror.c ****    }
 190              		.loc 1 121 0
 191 0038 C6040700 		movb	$0, (%rdi,%rax)
 125:fltk-1.3.4-1/png/pngerror.c **** 
 192              		.loc 1 125 0
 193 003c C3       		ret
 194              	.LVL23:
 195 003d 0F1F00   		.p2align 4,,10
 196              		.p2align 3
 197              	.L20:
 118:fltk-1.3.4-1/png/pngerror.c ****            buffer[pos++] = *string++;
 198              		.loc 1 118 0
 199 0040 4889D0   		movq	%rdx, %rax
 200              	.LVL24:
 121:fltk-1.3.4-1/png/pngerror.c ****    }
 201              		.loc 1 121 0
 202 0043 C6040700 		movb	$0, (%rdi,%rax)
 125:fltk-1.3.4-1/png/pngerror.c **** 
 203              		.loc 1 125 0
 204 0047 C3       		ret
 205              		.cfi_endproc
 206              	.LFE85:
 208              		.section	.text.unlikely.png_safecat.part.2
 209              	.LCOLDE1:
 210              		.section	.text.png_safecat.part.2
 211              	.LHOTE1:
 212              		.section	.text.unlikely.png_warning_parameter.part.3,"ax",@progbits
 213              	.LCOLDB2:
 214              		.section	.text.png_warning_parameter.part.3,"ax",@progbits
 215              	.LHOTB2:
 216              		.p2align 4,,15
 218              	png_warning_parameter.part.3:
 219              	.LFB86:
 247:fltk-1.3.4-1/png/pngerror.c ****    png_const_charp string)
 220              		.loc 1 247 0
 221              		.cfi_startproc
 222              	.LVL25:
 251:fltk-1.3.4-1/png/pngerror.c **** }
 223              		.loc 1 251 0
 224 0000 4863F6   		movslq	%esi, %rsi
 225 0003 48C1E605 		salq	$5, %rsi
 226              	.LVL26:
 227 0007 488D7C37 		leaq	-32(%rdi,%rsi), %rdi
 227      E0
 228              	.LVL27:
 229              	.LBB38:
 230              	.LBB39:
 115:fltk-1.3.4-1/png/pngerror.c ****    {
 231              		.loc 1 115 0
 232 000c 4885FF   		testq	%rdi, %rdi
 233 000f 740F     		je	.L27
 234 0011 4889D1   		movq	%rdx, %rcx
 235 0014 BE200000 		movl	$32, %esi
 235      00
 236 0019 31D2     		xorl	%edx, %edx
 237              	.LVL28:
 238 001b E9000000 		jmp	png_safecat.part.2
 238      00
 239              	.LVL29:
 240              		.p2align 4,,10
 241              		.p2align 3
 242              	.L27:
 243 0020 F3C3     		rep ret
 244              	.LBE39:
 245              	.LBE38:
 246              		.cfi_endproc
 247              	.LFE86:
 249              		.section	.text.unlikely.png_warning_parameter.part.3
 250              	.LCOLDE2:
 251              		.section	.text.png_warning_parameter.part.3
 252              	.LHOTE2:
 253              		.section	.text.unlikely.png_safecat,"ax",@progbits
 254              	.LCOLDB3:
 255              		.section	.text.png_safecat,"ax",@progbits
 256              	.LHOTB3:
 257              		.p2align 4,,15
 258              		.globl	png_safecat
 260              	png_safecat:
 261              	.LFB57:
 114:fltk-1.3.4-1/png/pngerror.c ****    if (buffer != NULL && pos < bufsize)
 262              		.loc 1 114 0
 263              		.cfi_startproc
 264              	.LVL30:
 115:fltk-1.3.4-1/png/pngerror.c ****    {
 265              		.loc 1 115 0
 266 0000 4885FF   		testq	%rdi, %rdi
 267 0003 740B     		je	.L30
 268 0005 4839F2   		cmpq	%rsi, %rdx
 269 0008 7306     		jnb	.L30
 270 000a E9000000 		jmp	png_safecat.part.2
 270      00
 271              	.LVL31:
 272 000f 90       		.p2align 4,,10
 273              		.p2align 3
 274              	.L30:
 125:fltk-1.3.4-1/png/pngerror.c **** 
 275              		.loc 1 125 0
 276 0010 4889D0   		movq	%rdx, %rax
 277 0013 C3       		ret
 278              		.cfi_endproc
 279              	.LFE57:
 281              		.section	.text.unlikely.png_safecat
 282              	.LCOLDE3:
 283              		.section	.text.png_safecat
 284              	.LHOTE3:
 285              		.section	.text.unlikely.png_format_number,"ax",@progbits
 286              	.LCOLDB4:
 287              		.section	.text.png_format_number,"ax",@progbits
 288              	.LHOTB4:
 289              		.p2align 4,,15
 290              		.globl	png_format_number
 292              	png_format_number:
 293              	.LFB58:
 135:fltk-1.3.4-1/png/pngerror.c ****    int count = 0;    /* number of digits output */
 294              		.loc 1 135 0
 295              		.cfi_startproc
 296              	.LVL32:
 140:fltk-1.3.4-1/png/pngerror.c **** 
 297              		.loc 1 140 0
 298 0000 4C8D46FF 		leaq	-1(%rsi), %r8
 299              	.LVL33:
 300 0004 C646FF00 		movb	$0, -1(%rsi)
 145:fltk-1.3.4-1/png/pngerror.c ****    {
 301              		.loc 1 145 0
 302 0008 4939F8   		cmpq	%rdi, %r8
 303 000b 0F867901 		jbe	.L65
 303      0000
 304 0011 83FA05   		cmpl	$5, %edx
 135:fltk-1.3.4-1/png/pngerror.c ****    int count = 0;    /* number of digits output */
 305              		.loc 1 135 0
 306 0014 55       		pushq	%rbp
 307              		.cfi_def_cfa_offset 16
 308              		.cfi_offset 6, -16
 309 0015 4189D1   		movl	%edx, %r9d
 310 0018 410F94C3 		sete	%r11b
 311 001c 53       		pushq	%rbx
 312              		.cfi_def_cfa_offset 24
 313              		.cfi_offset 3, -24
 145:fltk-1.3.4-1/png/pngerror.c ****    {
 314              		.loc 1 145 0
 315 001d 31ED     		xorl	%ebp, %ebp
 316 001f 41BA0100 		movl	$1, %r10d
 316      0000
 317 0025 31F6     		xorl	%esi, %esi
 318              	.LBB40:
 169:fltk-1.3.4-1/png/pngerror.c ****             number /= 10;
 319              		.loc 1 169 0
 320 0027 48BBCDCC 		movabsq	$-3689348814741910323, %rbx
 320      CCCCCCCC 
 320      CCCC
 321              	.LVL34:
 322              		.p2align 4,,10
 323 0031 0F1F8000 		.p2align 3
 323      000000
 324              	.L39:
 150:fltk-1.3.4-1/png/pngerror.c ****       {
 325              		.loc 1 150 0
 326 0038 4183F905 		cmpl	$5, %r9d
 327 003c 0F87A300 		ja	.L53
 327      0000
 328              	.L69:
 329 0042 4489C8   		movl	%r9d, %eax
 330 0045 FF24C500 		jmp	*.L42(,%rax,8)
 330      000000
 331              		.section	.rodata.png_format_number,"a",@progbits
 332              		.align 8
 333              		.align 4
 334              	.L42:
 335 0000 00000000 		.quad	.L53
 335      00000000 
 336 0008 00000000 		.quad	.L41
 336      00000000 
 337 0010 00000000 		.quad	.L43
 337      00000000 
 338 0018 00000000 		.quad	.L44
 338      00000000 
 339 0020 00000000 		.quad	.L45
 339      00000000 
 340 0028 00000000 		.quad	.L46
 340      00000000 
 341              		.section	.text.png_format_number
 342 004c 0F1F4000 		.p2align 4,,10
 343              		.p2align 3
 344              	.L45:
 175:fltk-1.3.4-1/png/pngerror.c ****             /* FALL THROUGH */
 345              		.loc 1 175 0
 346 0050 41BA0200 		movl	$2, %r10d
 346      0000
 347              	.LVL35:
 348              	.L44:
 179:fltk-1.3.4-1/png/pngerror.c ****             number >>= 4;
 349              		.loc 1 179 0
 350 0056 4889C8   		movq	%rcx, %rax
 351 0059 4983E801 		subq	$1, %r8
 352              	.LVL36:
 180:fltk-1.3.4-1/png/pngerror.c ****             break;
 353              		.loc 1 180 0
 354 005d 48C1E904 		shrq	$4, %rcx
 355              	.LVL37:
 179:fltk-1.3.4-1/png/pngerror.c ****             number >>= 4;
 356              		.loc 1 179 0
 357 0061 83E00F   		andl	$15, %eax
 358 0064 0FB68000 		movzbl	digits.6752(%rax), %eax
 358      000000
 359 006b 418800   		movb	%al, (%r8)
 360              	.LVL38:
 361              	.L40:
 189:fltk-1.3.4-1/png/pngerror.c **** 
 362              		.loc 1 189 0
 363 006e 83C601   		addl	$1, %esi
 364              	.LVL39:
 192:fltk-1.3.4-1/png/pngerror.c ****       {
 365              		.loc 1 192 0
 366 0071 83FE05   		cmpl	$5, %esi
 367 0074 7552     		jne	.L50
 368              	.L68:
 369 0076 4584DB   		testb	%r11b, %r11b
 370 0079 744D     		je	.L50
 192:fltk-1.3.4-1/png/pngerror.c ****       {
 371              		.loc 1 192 0 is_stmt 0 discriminator 1
 372 007b 4939F8   		cmpq	%rdi, %r8
 373 007e 0F87BC00 		ja	.L67
 373      0000
 374              	.L38:
 375              	.LBE40:
 206:fltk-1.3.4-1/png/pngerror.c **** #endif
 376              		.loc 1 206 0 is_stmt 1
 377 0084 4C89C0   		movq	%r8, %rax
 378 0087 5B       		popq	%rbx
 379              		.cfi_remember_state
 380              		.cfi_restore 3
 381              		.cfi_def_cfa_offset 16
 382 0088 5D       		popq	%rbp
 383              		.cfi_restore 6
 384              		.cfi_def_cfa_offset 8
 385              	.LVL40:
 386 0089 C3       		ret
 387              	.LVL41:
 388 008a 660F1F44 		.p2align 4,,10
 388      0000
 389              		.p2align 3
 390              	.L43:
 391              		.cfi_restore_state
 392              	.LBB41:
 165:fltk-1.3.4-1/png/pngerror.c ****             /* FALL THROUGH */
 393              		.loc 1 165 0
 394 0090 41BA0200 		movl	$2, %r10d
 394      0000
 395              	.LVL42:
 396              	.L41:
 169:fltk-1.3.4-1/png/pngerror.c ****             number /= 10;
 397              		.loc 1 169 0
 398 0096 4889C8   		movq	%rcx, %rax
 189:fltk-1.3.4-1/png/pngerror.c **** 
 399              		.loc 1 189 0
 400 0099 83C601   		addl	$1, %esi
 401              	.LVL43:
 169:fltk-1.3.4-1/png/pngerror.c ****             number /= 10;
 402              		.loc 1 169 0
 403 009c 4983E801 		subq	$1, %r8
 404              	.LVL44:
 405 00a0 48F7E3   		mulq	%rbx
 406 00a3 48C1EA03 		shrq	$3, %rdx
 407 00a7 488D0492 		leaq	(%rdx,%rdx,4), %rax
 408 00ab 4801C0   		addq	%rax, %rax
 409 00ae 4829C1   		subq	%rax, %rcx
 410              	.LVL45:
 411 00b1 0FB68100 		movzbl	digits.6752(%rcx), %eax
 411      000000
 170:fltk-1.3.4-1/png/pngerror.c ****             break;
 412              		.loc 1 170 0
 413 00b8 4889D1   		movq	%rdx, %rcx
 414              	.LVL46:
 169:fltk-1.3.4-1/png/pngerror.c ****             number /= 10;
 415              		.loc 1 169 0
 416 00bb 418800   		movb	%al, (%r8)
 417              	.LVL47:
 192:fltk-1.3.4-1/png/pngerror.c ****       {
 418              		.loc 1 192 0
 419 00be 83FE05   		cmpl	$5, %esi
 420 00c1 74B3     		je	.L68
 421              	.LVL48:
 422              		.p2align 4,,10
 423 00c3 0F1F4400 		.p2align 3
 423      00
 424              	.L50:
 425              	.LBE41:
 145:fltk-1.3.4-1/png/pngerror.c ****    {
 426              		.loc 1 145 0
 427 00c8 4C39C7   		cmpq	%r8, %rdi
 428 00cb 73B7     		jnb	.L38
 145:fltk-1.3.4-1/png/pngerror.c ****    {
 429              		.loc 1 145 0 is_stmt 0 discriminator 1
 430 00cd 4885C9   		testq	%rcx, %rcx
 431 00d0 0F8562FF 		jne	.L39
 431      FFFF
 432 00d6 4139F2   		cmpl	%esi, %r10d
 433 00d9 7EA9     		jle	.L38
 434              	.LBB42:
 150:fltk-1.3.4-1/png/pngerror.c ****       {
 435              		.loc 1 150 0 is_stmt 1
 436 00db 4183F905 		cmpl	$5, %r9d
 437 00df 0F865DFF 		jbe	.L69
 437      FFFF
 438              	.L53:
 184:fltk-1.3.4-1/png/pngerror.c ****             break;
 439              		.loc 1 184 0
 440 00e5 31C9     		xorl	%ecx, %ecx
 441              	.LVL49:
 442 00e7 EB85     		jmp	.L40
 443              	.LVL50:
 444 00e9 0F1F8000 		.p2align 4,,10
 444      000000
 445              		.p2align 3
 446              	.L46:
 447 00f0 4889C8   		movq	%rcx, %rax
 448 00f3 48F7E3   		mulq	%rbx
 449 00f6 48C1EA03 		shrq	$3, %rdx
 450 00fa 488D0492 		leaq	(%rdx,%rdx,4), %rax
 451 00fe 4889CA   		movq	%rcx, %rdx
 452 0101 4801C0   		addq	%rax, %rax
 155:fltk-1.3.4-1/png/pngerror.c ****             {
 453              		.loc 1 155 0
 454 0104 85ED     		testl	%ebp, %ebp
 455 0106 7468     		je	.L47
 456              	.LVL51:
 457 0108 4829C2   		subq	%rax, %rdx
 458              	.LVL52:
 459              	.L48:
 157:fltk-1.3.4-1/png/pngerror.c ****                output = 1;
 460              		.loc 1 157 0
 461 010b 0FB68200 		movzbl	digits.6752(%rdx), %eax
 461      000000
 462 0112 4983E801 		subq	$1, %r8
 463              	.LVL53:
 158:fltk-1.3.4-1/png/pngerror.c ****             }
 464              		.loc 1 158 0
 465 0116 BD010000 		movl	$1, %ebp
 465      00
 466              	.LVL54:
 157:fltk-1.3.4-1/png/pngerror.c ****                output = 1;
 467              		.loc 1 157 0
 468 011b 418800   		movb	%al, (%r8)
 469              	.LVL55:
 470              	.L49:
 160:fltk-1.3.4-1/png/pngerror.c ****             break;
 471              		.loc 1 160 0
 472 011e 4889C8   		movq	%rcx, %rax
 154:fltk-1.3.4-1/png/pngerror.c ****             if (output != 0 || number % 10 != 0)
 473              		.loc 1 154 0
 474 0121 41BA0500 		movl	$5, %r10d
 474      0000
 160:fltk-1.3.4-1/png/pngerror.c ****             break;
 475              		.loc 1 160 0
 476 0127 48F7E3   		mulq	%rbx
 477 012a 48C1EA03 		shrq	$3, %rdx
 478 012e 4889D1   		movq	%rdx, %rcx
 479              	.LVL56:
 161:fltk-1.3.4-1/png/pngerror.c **** 
 480              		.loc 1 161 0
 481 0131 E938FFFF 		jmp	.L40
 481      FF
 482              	.LVL57:
 483 0136 662E0F1F 		.p2align 4,,10
 483      84000000 
 483      0000
 484              		.p2align 3
 485              	.L67:
 198:fltk-1.3.4-1/png/pngerror.c ****             *--end = '.';
 486              		.loc 1 198 0
 487 0140 85ED     		testl	%ebp, %ebp
 488 0142 7414     		je	.L51
 489              	.LVL58:
 199:fltk-1.3.4-1/png/pngerror.c ****          else if (number == 0) /* and !output */
 490              		.loc 1 199 0
 491 0144 41C640FF 		movb	$46, -1(%r8)
 491      2E
 492 0149 4983E801 		subq	$1, %r8
 493              	.LVL59:
 494 014d E976FFFF 		jmp	.L50
 494      FF
 495              		.p2align 4,,10
 496 0152 660F1F44 		.p2align 3
 496      0000
 497              	.L51:
 200:fltk-1.3.4-1/png/pngerror.c ****             *--end = '0';
 498              		.loc 1 200 0
 499 0158 4885C9   		testq	%rcx, %rcx
 500 015b 7523     		jne	.L54
 501              	.LVL60:
 201:fltk-1.3.4-1/png/pngerror.c ****       }
 502              		.loc 1 201 0
 503 015d 41C640FF 		movb	$48, -1(%r8)
 503      30
 504 0162 BE050000 		movl	$5, %esi
 504      00
 505              	.LVL61:
 506 0167 4983E801 		subq	$1, %r8
 507              	.LVL62:
 508 016b E958FFFF 		jmp	.L50
 508      FF
 509              	.LVL63:
 510              		.p2align 4,,10
 511              		.p2align 3
 512              	.L47:
 155:fltk-1.3.4-1/png/pngerror.c ****             {
 513              		.loc 1 155 0 discriminator 1
 514 0170 4829C2   		subq	%rax, %rdx
 515              	.LVL64:
 516 0173 74A9     		je	.L49
 517 0175 EB94     		jmp	.L48
 518              	.LVL65:
 519 0177 660F1F84 		.p2align 4,,10
 519      00000000 
 519      00
 520              		.p2align 3
 521              	.L54:
 522 0180 BE050000 		movl	$5, %esi
 522      00
 523              	.LVL66:
 524 0185 E9AEFEFF 		jmp	.L39
 524      FF
 525              	.LVL67:
 526              	.L65:
 527              		.cfi_def_cfa_offset 8
 528              		.cfi_restore 3
 529              		.cfi_restore 6
 530              	.LBE42:
 206:fltk-1.3.4-1/png/pngerror.c **** #endif
 531              		.loc 1 206 0
 532 018a 4C89C0   		movq	%r8, %rax
 533 018d C3       		ret
 534              		.cfi_endproc
 535              	.LFE58:
 537              		.section	.text.unlikely.png_format_number
 538              	.LCOLDE4:
 539              		.section	.text.png_format_number
 540              	.LHOTE4:
 541              		.section	.rodata.str1.1,"aMS",@progbits,1
 542              	.LC5:
 543 0000 6C696270 		.string	"libpng warning: %s"
 543      6E672077 
 543      61726E69 
 543      6E673A20 
 543      257300
 544              		.section	.text.unlikely.png_warning,"ax",@progbits
 545              	.LCOLDB6:
 546              		.section	.text.png_warning,"ax",@progbits
 547              	.LHOTB6:
 548              		.p2align 4,,15
 549              		.globl	png_warning
 551              	png_warning:
 552              	.LFB59:
 217:fltk-1.3.4-1/png/pngerror.c ****    int offset = 0;
 553              		.loc 1 217 0
 554              		.cfi_startproc
 555              	.LVL68:
 556 0000 4883EC08 		subq	$8, %rsp
 557              		.cfi_def_cfa_offset 16
 219:fltk-1.3.4-1/png/pngerror.c ****    {
 558              		.loc 1 219 0
 559 0004 4885FF   		testq	%rdi, %rdi
 560 0007 7417     		je	.L71
 226:fltk-1.3.4-1/png/pngerror.c ****          {
 561              		.loc 1 226 0
 562 0009 803E23   		cmpb	$35, (%rsi)
 563 000c 7442     		je	.L80
 564              	.LVL69:
 565              	.L72:
 234:fltk-1.3.4-1/png/pngerror.c ****       (*(png_ptr->warning_fn))(png_constcast(png_structrp,png_ptr),
 566              		.loc 1 234 0
 567 000e 488B87E8 		movq	232(%rdi), %rax
 567      000000
 568 0015 4885C0   		testq	%rax, %rax
 569 0018 7406     		je	.L71
 239:fltk-1.3.4-1/png/pngerror.c **** 
 570              		.loc 1 239 0
 571 001a 4883C408 		addq	$8, %rsp
 572              		.cfi_remember_state
 573              		.cfi_def_cfa_offset 8
 235:fltk-1.3.4-1/png/pngerror.c ****          warning_message + offset);
 574              		.loc 1 235 0
 575 001e FFE0     		jmp	*%rax
 576              	.LVL70:
 577              		.p2align 4,,10
 578              		.p2align 3
 579              	.L71:
 580              		.cfi_restore_state
 581              	.LBB49:
 582              	.LBB50:
 583              	.LBB51:
 584              	.LBB52:
 585              		.file 2 "/usr/include/x86_64-linux-gnu/bits/stdio2.h"
   1:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** /* Checking macros for stdio functions.
   2:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Copyright (C) 2004-2016 Free Software Foundation, Inc.
   3:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    This file is part of the GNU C Library.
   4:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
   5:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is free software; you can redistribute it and/or
   6:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    modify it under the terms of the GNU Lesser General Public
   7:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License as published by the Free Software Foundation; either
   8:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    version 2.1 of the License, or (at your option) any later version.
   9:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  10:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is distributed in the hope that it will be useful,
  11:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Lesser General Public License for more details.
  14:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  15:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    You should have received a copy of the GNU Lesser General Public
  16:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License along with the GNU C Library; if not, see
  17:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    <http://www.gnu.org/licenses/>.  */
  18:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  19:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifndef _STDIO_H
  20:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # error "Never include <bits/stdio2.h> directly; use <stdio.h> instead."
  21:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  22:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  23:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  24:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...) __THROW;
  25:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  26:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format,
  27:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   _G_va_list __ap) __THROW;
  28:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  29:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifdef __va_arg_pack
  30:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  31:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))
  32:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  33:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  34:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				  __bos (__s), __fmt, __va_arg_pack ());
  35:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  36:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #elif !defined __cplusplus
  37:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # define sprintf(str, ...) \
  38:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___sprintf_chk (str, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  39:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   __VA_ARGS__)
  40:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  41:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  42:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  43:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsprintf (char *__restrict __s, const char *__restrict __fmt,
  44:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 _G_va_list __ap))
  45:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  46:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  47:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __ap);
  48:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  49:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  50:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if defined __USE_ISOC99 || defined __USE_UNIX98
  51:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  52:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
  53:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   size_t __slen, const char *__restrict __format,
  54:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   ...) __THROW;
  55:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
  56:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    size_t __slen, const char *__restrict __format,
  57:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    _G_va_list __ap) __THROW;
  58:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  59:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  60:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  61:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (snprintf (char *__restrict __s, size_t __n,
  62:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 const char *__restrict __fmt, ...))
  63:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  64:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  65:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __va_arg_pack ());
  66:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  67:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # elif !defined __cplusplus
  68:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  define snprintf(str, len, ...) \
  69:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___snprintf_chk (str, len, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  70:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    __VA_ARGS__)
  71:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # endif
  72:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  73:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  74:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsnprintf (char *__restrict __s, size_t __n,
  75:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		  const char *__restrict __fmt, _G_va_list __ap))
  76:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  77:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsnprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  78:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				    __bos (__s), __fmt, __ap);
  79:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  80:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  81:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  82:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  83:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if __USE_FORTIFY_LEVEL > 1
  84:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  85:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
  86:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...);
  87:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __printf_chk (int __flag, const char *__restrict __format, ...);
  88:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
  89:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format, _G_va_list __ap);
  90:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vprintf_chk (int __flag, const char *__restrict __format,
  91:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  _G_va_list __ap);
  92:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  93:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  94:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  95:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
  96:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  97:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
 586              		.loc 2 97 0
 587 0020 488B3D00 		movq	stderr(%rip), %rdi
 587      000000
 588              	.LVL71:
 589 0027 4889F1   		movq	%rsi, %rcx
 590 002a BA000000 		movl	$.LC5, %edx
 590      00
 591 002f BE010000 		movl	$1, %esi
 591      00
 592 0034 31C0     		xorl	%eax, %eax
 593 0036 E8000000 		call	__fprintf_chk
 593      00
 594              	.LVL72:
 595              	.LBE52:
 596              	.LBE51:
 597              	.LBB53:
 598              	.LBB54:
 599 003b 488B3500 		movq	stderr(%rip), %rsi
 599      000000
 600 0042 BF0A0000 		movl	$10, %edi
 600      00
 601              	.LBE54:
 602              	.LBE53:
 603              	.LBE50:
 604              	.LBE49:
 239:fltk-1.3.4-1/png/pngerror.c **** 
 605              		.loc 1 239 0
 606 0047 4883C408 		addq	$8, %rsp
 607              		.cfi_remember_state
 608              		.cfi_def_cfa_offset 8
 609              	.LBB58:
 610              	.LBB57:
 611              	.LBB56:
 612              	.LBB55:
 613              		.loc 2 97 0
 614 004b E9000000 		jmp	fputc
 614      00
 615              	.LVL73:
 616              		.p2align 4,,10
 617              		.p2align 3
 618              	.L80:
 619              		.cfi_restore_state
 620 0050 488D4601 		leaq	1(%rsi), %rax
 621 0054 4883C60F 		addq	$15, %rsi
 622              	.LVL74:
 623 0058 EB0F     		jmp	.L73
 624              	.LVL75:
 625 005a 660F1F44 		.p2align 4,,10
 625      0000
 626              		.p2align 3
 627              	.L81:
 628 0060 4883C001 		addq	$1, %rax
 629              	.LVL76:
 630              	.LBE55:
 631              	.LBE56:
 632              	.LBE57:
 633              	.LBE58:
 228:fltk-1.3.4-1/png/pngerror.c ****                if (warning_message[offset] == ' ')
 634              		.loc 1 228 0 discriminator 2
 635 0064 4839C6   		cmpq	%rax, %rsi
 636 0067 74A5     		je	.L72
 637              	.L73:
 638              	.LVL77:
 229:fltk-1.3.4-1/png/pngerror.c ****                   break;
 639              		.loc 1 229 0
 640 0069 803820   		cmpb	$32, (%rax)
 641 006c 75F2     		jne	.L81
 642 006e 4889C6   		movq	%rax, %rsi
 643              	.LVL78:
 644 0071 EB9B     		jmp	.L72
 645              		.cfi_endproc
 646              	.LFE59:
 648              		.section	.text.unlikely.png_warning
 649              	.LCOLDE6:
 650              		.section	.text.png_warning
 651              	.LHOTE6:
 652              		.section	.text.unlikely.png_warning_parameter,"ax",@progbits
 653              	.LCOLDB7:
 654              		.section	.text.png_warning_parameter,"ax",@progbits
 655              	.LHOTB7:
 656              		.p2align 4,,15
 657              		.globl	png_warning_parameter
 659              	png_warning_parameter:
 660              	.LFB60:
 249:fltk-1.3.4-1/png/pngerror.c ****    if (number > 0 && number <= PNG_WARNING_PARAMETER_COUNT)
 661              		.loc 1 249 0
 662              		.cfi_startproc
 663              	.LVL79:
 250:fltk-1.3.4-1/png/pngerror.c ****       (void)png_safecat(p[number-1], (sizeof p[number-1]), 0, string);
 664              		.loc 1 250 0
 665 0000 8D46FF   		leal	-1(%rsi), %eax
 666 0003 83F807   		cmpl	$7, %eax
 667 0006 7708     		ja	.L82
 668 0008 E9000000 		jmp	png_warning_parameter.part.3
 668      00
 669              	.LVL80:
 670 000d 0F1F00   		.p2align 4,,10
 671              		.p2align 3
 672              	.L82:
 673 0010 F3C3     		rep ret
 674              		.cfi_endproc
 675              	.LFE60:
 677              		.section	.text.unlikely.png_warning_parameter
 678              	.LCOLDE7:
 679              		.section	.text.png_warning_parameter
 680              	.LHOTE7:
 681              		.section	.text.unlikely.png_warning_parameter_unsigned,"ax",@progbits
 682              	.LCOLDB8:
 683              		.section	.text.png_warning_parameter_unsigned,"ax",@progbits
 684              	.LHOTB8:
 685              		.p2align 4,,15
 686              		.globl	png_warning_parameter_unsigned
 688              	png_warning_parameter_unsigned:
 689              	.LFB61:
 257:fltk-1.3.4-1/png/pngerror.c ****    char buffer[PNG_NUMBER_BUFFER_SIZE];
 690              		.loc 1 257 0
 691              		.cfi_startproc
 692              	.LVL81:
 693 0000 55       		pushq	%rbp
 694              		.cfi_def_cfa_offset 16
 695              		.cfi_offset 6, -16
 696 0001 53       		pushq	%rbx
 697              		.cfi_def_cfa_offset 24
 698              		.cfi_offset 3, -24
 699 0002 89F3     		movl	%esi, %ebx
 700 0004 4889FD   		movq	%rdi, %rbp
 701 0007 4883EC28 		subq	$40, %rsp
 702              		.cfi_def_cfa_offset 64
 259:fltk-1.3.4-1/png/pngerror.c **** }
 703              		.loc 1 259 0
 704 000b 488D7424 		leaq	24(%rsp), %rsi
 704      18
 705              	.LVL82:
 706 0010 4889E7   		movq	%rsp, %rdi
 707              	.LVL83:
 257:fltk-1.3.4-1/png/pngerror.c ****    char buffer[PNG_NUMBER_BUFFER_SIZE];
 708              		.loc 1 257 0
 709 0013 64488B04 		movq	%fs:40, %rax
 709      25280000 
 709      00
 710 001c 48894424 		movq	%rax, 24(%rsp)
 710      18
 711 0021 31C0     		xorl	%eax, %eax
 259:fltk-1.3.4-1/png/pngerror.c **** }
 712              		.loc 1 259 0
 713 0023 E8000000 		call	png_format_number
 713      00
 714              	.LVL84:
 715              	.LBB59:
 716              	.LBB60:
 250:fltk-1.3.4-1/png/pngerror.c ****       (void)png_safecat(p[number-1], (sizeof p[number-1]), 0, string);
 717              		.loc 1 250 0
 718 0028 8D4BFF   		leal	-1(%rbx), %ecx
 719 002b 83F907   		cmpl	$7, %ecx
 720 002e 770D     		ja	.L84
 721 0030 4889C2   		movq	%rax, %rdx
 722 0033 89DE     		movl	%ebx, %esi
 723 0035 4889EF   		movq	%rbp, %rdi
 724 0038 E8000000 		call	png_warning_parameter.part.3
 724      00
 725              	.LVL85:
 726              	.L84:
 727              	.LBE60:
 728              	.LBE59:
 260:fltk-1.3.4-1/png/pngerror.c **** 
 729              		.loc 1 260 0
 730 003d 488B4424 		movq	24(%rsp), %rax
 730      18
 731 0042 64483304 		xorq	%fs:40, %rax
 731      25280000 
 731      00
 732 004b 7507     		jne	.L88
 733 004d 4883C428 		addq	$40, %rsp
 734              		.cfi_remember_state
 735              		.cfi_def_cfa_offset 24
 736 0051 5B       		popq	%rbx
 737              		.cfi_def_cfa_offset 16
 738              	.LVL86:
 739 0052 5D       		popq	%rbp
 740              		.cfi_def_cfa_offset 8
 741              	.LVL87:
 742 0053 C3       		ret
 743              	.LVL88:
 744              	.L88:
 745              		.cfi_restore_state
 746 0054 E8000000 		call	__stack_chk_fail
 746      00
 747              	.LVL89:
 748              		.cfi_endproc
 749              	.LFE61:
 751              		.section	.text.unlikely.png_warning_parameter_unsigned
 752              	.LCOLDE8:
 753              		.section	.text.png_warning_parameter_unsigned
 754              	.LHOTE8:
 755              		.section	.text.unlikely.png_warning_parameter_signed,"ax",@progbits
 756              	.LCOLDB9:
 757              		.section	.text.png_warning_parameter_signed,"ax",@progbits
 758              	.LHOTB9:
 759              		.p2align 4,,15
 760              		.globl	png_warning_parameter_signed
 762              	png_warning_parameter_signed:
 763              	.LFB62:
 265:fltk-1.3.4-1/png/pngerror.c ****    png_alloc_size_t u;
 764              		.loc 1 265 0
 765              		.cfi_startproc
 766              	.LVL90:
 767 0000 4154     		pushq	%r12
 768              		.cfi_def_cfa_offset 16
 769              		.cfi_offset 12, -16
 770 0002 55       		pushq	%rbp
 771              		.cfi_def_cfa_offset 24
 772              		.cfi_offset 6, -24
 773 0003 4863C9   		movslq	%ecx, %rcx
 774 0006 53       		pushq	%rbx
 775              		.cfi_def_cfa_offset 32
 776              		.cfi_offset 3, -32
 777 0007 4889FD   		movq	%rdi, %rbp
 778 000a 89F3     		movl	%esi, %ebx
 779 000c 4883EC20 		subq	$32, %rsp
 780              		.cfi_def_cfa_offset 64
 265:fltk-1.3.4-1/png/pngerror.c ****    png_alloc_size_t u;
 781              		.loc 1 265 0
 782 0010 64488B3C 		movq	%fs:40, %rdi
 782      25280000 
 782      00
 783 0019 48897C24 		movq	%rdi, 24(%rsp)
 783      18
 784 001e 31FF     		xorl	%edi, %edi
 785              	.LVL91:
 272:fltk-1.3.4-1/png/pngerror.c ****       u = ~u + 1;
 786              		.loc 1 272 0
 787 0020 85C9     		testl	%ecx, %ecx
 788 0022 783C     		js	.L95
 275:fltk-1.3.4-1/png/pngerror.c **** 
 789              		.loc 1 275 0
 790 0024 488D7424 		leaq	24(%rsp), %rsi
 790      18
 791              	.LVL92:
 792 0029 4889E7   		movq	%rsp, %rdi
 793 002c E8000000 		call	png_format_number
 793      00
 794              	.LVL93:
 795              	.L91:
 796              	.LBB61:
 797              	.LBB62:
 250:fltk-1.3.4-1/png/pngerror.c ****       (void)png_safecat(p[number-1], (sizeof p[number-1]), 0, string);
 798              		.loc 1 250 0
 799 0031 8D53FF   		leal	-1(%rbx), %edx
 800 0034 83FA07   		cmpl	$7, %edx
 801 0037 770D     		ja	.L89
 802 0039 4889C2   		movq	%rax, %rdx
 803 003c 89DE     		movl	%ebx, %esi
 804 003e 4889EF   		movq	%rbp, %rdi
 805 0041 E8000000 		call	png_warning_parameter.part.3
 805      00
 806              	.LVL94:
 807              	.L89:
 808              	.LBE62:
 809              	.LBE61:
 281:fltk-1.3.4-1/png/pngerror.c **** 
 810              		.loc 1 281 0
 811 0046 488B4424 		movq	24(%rsp), %rax
 811      18
 812 004b 64483304 		xorq	%fs:40, %rax
 812      25280000 
 812      00
 813 0054 7529     		jne	.L96
 814 0056 4883C420 		addq	$32, %rsp
 815              		.cfi_remember_state
 816              		.cfi_def_cfa_offset 32
 817 005a 5B       		popq	%rbx
 818              		.cfi_def_cfa_offset 24
 819              	.LVL95:
 820 005b 5D       		popq	%rbp
 821              		.cfi_def_cfa_offset 16
 822              	.LVL96:
 823 005c 415C     		popq	%r12
 824              		.cfi_def_cfa_offset 8
 825 005e C3       		ret
 826              	.LVL97:
 827 005f 90       		.p2align 4,,10
 828              		.p2align 3
 829              	.L95:
 830              		.cfi_restore_state
 275:fltk-1.3.4-1/png/pngerror.c **** 
 831              		.loc 1 275 0
 832 0060 488D7424 		leaq	24(%rsp), %rsi
 832      18
 833 0065 48F7D9   		negq	%rcx
 834              	.LVL98:
 835 0068 4889E7   		movq	%rsp, %rdi
 836 006b E8000000 		call	png_format_number
 836      00
 837              	.LVL99:
 277:fltk-1.3.4-1/png/pngerror.c ****       *--str = '-';
 838              		.loc 1 277 0
 839 0070 4839E0   		cmpq	%rsp, %rax
 840 0073 76BC     		jbe	.L91
 841              	.LVL100:
 278:fltk-1.3.4-1/png/pngerror.c **** 
 842              		.loc 1 278 0
 843 0075 C640FF2D 		movb	$45, -1(%rax)
 844 0079 4883E801 		subq	$1, %rax
 845              	.LVL101:
 846 007d EBB2     		jmp	.L91
 847              	.LVL102:
 848              	.L96:
 281:fltk-1.3.4-1/png/pngerror.c **** 
 849              		.loc 1 281 0
 850 007f E8000000 		call	__stack_chk_fail
 850      00
 851              	.LVL103:
 852              		.cfi_endproc
 853              	.LFE62:
 855              		.section	.text.unlikely.png_warning_parameter_signed
 856              	.LCOLDE9:
 857              		.section	.text.png_warning_parameter_signed
 858              	.LHOTE9:
 859              		.section	.text.unlikely.png_formatted_warning,"ax",@progbits
 860              	.LCOLDB10:
 861              		.section	.text.png_formatted_warning,"ax",@progbits
 862              	.LHOTB10:
 863              		.p2align 4,,15
 864              		.globl	png_formatted_warning
 866              	png_formatted_warning:
 867              	.LFB63:
 286:fltk-1.3.4-1/png/pngerror.c ****    /* The internal buffer is just 192 bytes - enough for all our messages,
 868              		.loc 1 286 0
 869              		.cfi_startproc
 870              	.LVL104:
 871 0000 4881ECD8 		subq	$216, %rsp
 871      000000
 872              		.cfi_def_cfa_offset 224
 286:fltk-1.3.4-1/png/pngerror.c ****    /* The internal buffer is just 192 bytes - enough for all our messages,
 873              		.loc 1 286 0
 874 0007 64488B04 		movq	%fs:40, %rax
 874      25280000 
 874      00
 875 0010 48898424 		movq	%rax, 200(%rsp)
 875      C8000000 
 876 0018 31C0     		xorl	%eax, %eax
 877              	.LVL105:
 878 001a EB18     		jmp	.L98
 879              	.LVL106:
 880 001c 0F1F4000 		.p2align 4,,10
 881              		.p2align 3
 882              	.L99:
 346:fltk-1.3.4-1/png/pngerror.c ****    }
 883              		.loc 1 346 0
 884 0020 44880404 		movb	%r8b, (%rsp,%rax)
 885 0024 4883C201 		addq	$1, %rdx
 886              	.LVL107:
 887 0028 4883C001 		addq	$1, %rax
 888              	.LVL108:
 889              	.L108:
 301:fltk-1.3.4-1/png/pngerror.c ****    {
 890              		.loc 1 301 0
 891 002c 483DBF00 		cmpq	$191, %rax
 891      0000
 892 0032 746C     		je	.L109
 893              	.LVL109:
 894              	.L98:
 301:fltk-1.3.4-1/png/pngerror.c ****    {
 895              		.loc 1 301 0 is_stmt 0 discriminator 1
 896 0034 440FB602 		movzbl	(%rdx), %r8d
 897 0038 4584C0   		testb	%r8b, %r8b
 898 003b 7463     		je	.L109
 306:fltk-1.3.4-1/png/pngerror.c ****       {
 899              		.loc 1 306 0 is_stmt 1 discriminator 1
 900 003d 4885F6   		testq	%rsi, %rsi
 901 0040 74DE     		je	.L99
 902 0042 4180F840 		cmpb	$64, %r8b
 903 0046 75D8     		jne	.L99
 306:fltk-1.3.4-1/png/pngerror.c ****       {
 904              		.loc 1 306 0 is_stmt 0 discriminator 2
 905 0048 440FB642 		movzbl	1(%rdx), %r8d
 905      01
 906 004d 4584C0   		testb	%r8b, %r8b
 907 0050 743E     		je	.L112
 908              	.LVL110:
 909              	.LBB63:
 315:fltk-1.3.4-1/png/pngerror.c ****             valid_parameters[parameter] != '\0')
 910              		.loc 1 315 0 is_stmt 1
 911 0052 4180F831 		cmpb	$49, %r8b
 912 0056 0F84B800 		je	.L113
 912      0000
 913 005c 41BA0000 		movl	$valid_parameters.6800+2, %r10d
 913      0000
 914 0062 41B93200 		movl	$50, %r9d
 914      0000
 915 0068 31C9     		xorl	%ecx, %ecx
 916 006a EB11     		jmp	.L102
 917              	.LVL111:
 918 006c 0F1F4000 		.p2align 4,,10
 919              		.p2align 3
 920              	.L136:
 921 0070 4584C9   		testb	%r9b, %r9b
 922 0073 7410     		je	.L101
 923 0075 450FB60A 		movzbl	(%r10), %r9d
 924 0079 4983C201 		addq	$1, %r10
 925              	.LVL112:
 926              	.L102:
 317:fltk-1.3.4-1/png/pngerror.c **** 
 927              		.loc 1 317 0
 928 007d 83C101   		addl	$1, %ecx
 929              	.LVL113:
 315:fltk-1.3.4-1/png/pngerror.c ****             valid_parameters[parameter] != '\0')
 930              		.loc 1 315 0
 931 0080 4538C8   		cmpb	%r9b, %r8b
 932 0083 75EB     		jne	.L136
 933              	.L101:
 320:fltk-1.3.4-1/png/pngerror.c ****          {
 934              		.loc 1 320 0
 935 0085 83F907   		cmpl	$7, %ecx
 936 0088 7E46     		jle	.L103
 308:fltk-1.3.4-1/png/pngerror.c ****          static const char valid_parameters[] = "123456789";
 937              		.loc 1 308 0
 938 008a 4883C201 		addq	$1, %rdx
 939              	.LVL114:
 940 008e EB90     		jmp	.L99
 941              	.LVL115:
 942              		.p2align 4,,10
 943              		.p2align 3
 944              	.L112:
 945 0090 41B84000 		movl	$64, %r8d
 945      0000
 946 0096 EB88     		jmp	.L99
 947 0098 0F1F8400 		.p2align 4,,10
 947      00000000 
 948              		.p2align 3
 949              	.L109:
 950              	.LBE63:
 356:fltk-1.3.4-1/png/pngerror.c **** }
 951              		.loc 1 356 0
 952 00a0 4889E6   		movq	%rsp, %rsi
 953              	.LVL116:
 350:fltk-1.3.4-1/png/pngerror.c **** 
 954              		.loc 1 350 0
 955 00a3 C6040400 		movb	$0, (%rsp,%rax)
 356:fltk-1.3.4-1/png/pngerror.c **** }
 956              		.loc 1 356 0
 957 00a7 E8000000 		call	png_warning
 957      00
 958              	.LVL117:
 357:fltk-1.3.4-1/png/pngerror.c **** #endif /* WARNINGS */
 959              		.loc 1 357 0
 960 00ac 488B8424 		movq	200(%rsp), %rax
 960      C8000000 
 961 00b4 64483304 		xorq	%fs:40, %rax
 961      25280000 
 961      00
 962 00bd 755F     		jne	.L137
 963 00bf 4881C4D8 		addq	$216, %rsp
 963      000000
 964              		.cfi_remember_state
 965              		.cfi_def_cfa_offset 8
 966 00c6 C3       		ret
 967              	.LVL118:
 968 00c7 660F1F84 		.p2align 4,,10
 968      00000000 
 968      00
 969              		.p2align 3
 970              	.L103:
 971              		.cfi_restore_state
 972 00d0 4863C9   		movslq	%ecx, %rcx
 973 00d3 48C1E105 		salq	$5, %rcx
 974              	.LVL119:
 975 00d7 4C8D4920 		leaq	32(%rcx), %r9
 976              	.L100:
 977              	.LBB65:
 978              	.LBB64:
 323:fltk-1.3.4-1/png/pngerror.c ****             png_const_charp pend = p[parameter] + (sizeof p[parameter]);
 979              		.loc 1 323 0
 980 00db 4801F1   		addq	%rsi, %rcx
 981              	.LVL120:
 324:fltk-1.3.4-1/png/pngerror.c **** 
 982              		.loc 1 324 0
 983 00de 4901F1   		addq	%rsi, %r9
 984              	.LVL121:
 985              		.p2align 4,,10
 986 00e1 0F1F8000 		.p2align 3
 986      000000
 987              	.L104:
 330:fltk-1.3.4-1/png/pngerror.c ****                msg[i++] = *parm++;
 988              		.loc 1 330 0 discriminator 1
 989 00e8 4939C9   		cmpq	%rcx, %r9
 990 00eb 440FB601 		movzbl	(%rcx), %r8d
 991 00ef 761A     		jbe	.L105
 992 00f1 4584C0   		testb	%r8b, %r8b
 993 00f4 7415     		je	.L105
 331:fltk-1.3.4-1/png/pngerror.c **** 
 994              		.loc 1 331 0
 995 00f6 4883C001 		addq	$1, %rax
 996              	.LVL122:
 997 00fa 4883C101 		addq	$1, %rcx
 998              	.LVL123:
 330:fltk-1.3.4-1/png/pngerror.c ****                msg[i++] = *parm++;
 999              		.loc 1 330 0
 1000 00fe 483DBF00 		cmpq	$191, %rax
 1000      0000
 331:fltk-1.3.4-1/png/pngerror.c **** 
 1001              		.loc 1 331 0
 1002 0104 44884404 		movb	%r8b, -1(%rsp,%rax)
 1002      FF
 330:fltk-1.3.4-1/png/pngerror.c ****                msg[i++] = *parm++;
 1003              		.loc 1 330 0
 1004 0109 75DD     		jne	.L104
 1005              	.L105:
 334:fltk-1.3.4-1/png/pngerror.c ****             continue;
 1006              		.loc 1 334 0
 1007 010b 4883C202 		addq	$2, %rdx
 1008              	.LVL124:
 335:fltk-1.3.4-1/png/pngerror.c ****          }
 1009              		.loc 1 335 0
 1010 010f E918FFFF 		jmp	.L108
 1010      FF
 1011              	.LVL125:
 1012              	.L113:
 1013              	.LBE64:
 315:fltk-1.3.4-1/png/pngerror.c ****             valid_parameters[parameter] != '\0')
 1014              		.loc 1 315 0
 1015 0114 41B92000 		movl	$32, %r9d
 1015      0000
 1016 011a 31C9     		xorl	%ecx, %ecx
 1017 011c EBBD     		jmp	.L100
 1018              	.LVL126:
 1019              	.L137:
 1020              	.LBE65:
 357:fltk-1.3.4-1/png/pngerror.c **** #endif /* WARNINGS */
 1021              		.loc 1 357 0
 1022 011e E8000000 		call	__stack_chk_fail
 1022      00
 1023              	.LVL127:
 1024              		.cfi_endproc
 1025              	.LFE63:
 1027              		.section	.text.unlikely.png_formatted_warning
 1028              	.LCOLDE10:
 1029              		.section	.text.png_formatted_warning
 1030              	.LHOTE10:
 1031              		.section	.text.unlikely.png_chunk_warning,"ax",@progbits
 1032              	.LCOLDB11:
 1033              		.section	.text.png_chunk_warning,"ax",@progbits
 1034              	.LHOTB11:
 1035              		.p2align 4,,15
 1036              		.globl	png_chunk_warning
 1038              	png_chunk_warning:
 1039              	.LFB69:
 474:fltk-1.3.4-1/png/pngerror.c ****    }
 475:fltk-1.3.4-1/png/pngerror.c **** }
 476:fltk-1.3.4-1/png/pngerror.c **** #endif /* WARNINGS || ERROR_TEXT */
 477:fltk-1.3.4-1/png/pngerror.c **** 
 478:fltk-1.3.4-1/png/pngerror.c **** #if defined(PNG_READ_SUPPORTED) && defined(PNG_ERROR_TEXT_SUPPORTED)
 479:fltk-1.3.4-1/png/pngerror.c **** PNG_FUNCTION(void,PNGAPI
 480:fltk-1.3.4-1/png/pngerror.c **** png_chunk_error,(png_const_structrp png_ptr, png_const_charp error_message),
 481:fltk-1.3.4-1/png/pngerror.c ****    PNG_NORETURN)
 482:fltk-1.3.4-1/png/pngerror.c **** {
 483:fltk-1.3.4-1/png/pngerror.c ****    char msg[18+PNG_MAX_ERROR_TEXT];
 484:fltk-1.3.4-1/png/pngerror.c ****    if (png_ptr == NULL)
 485:fltk-1.3.4-1/png/pngerror.c ****       png_error(png_ptr, error_message);
 486:fltk-1.3.4-1/png/pngerror.c **** 
 487:fltk-1.3.4-1/png/pngerror.c ****    else
 488:fltk-1.3.4-1/png/pngerror.c ****    {
 489:fltk-1.3.4-1/png/pngerror.c ****       png_format_buffer(png_ptr, msg, error_message);
 490:fltk-1.3.4-1/png/pngerror.c ****       png_error(png_ptr, msg);
 491:fltk-1.3.4-1/png/pngerror.c ****    }
 492:fltk-1.3.4-1/png/pngerror.c **** }
 493:fltk-1.3.4-1/png/pngerror.c **** #endif /* READ && ERROR_TEXT */
 494:fltk-1.3.4-1/png/pngerror.c **** 
 495:fltk-1.3.4-1/png/pngerror.c **** #ifdef PNG_WARNINGS_SUPPORTED
 496:fltk-1.3.4-1/png/pngerror.c **** void PNGAPI
 497:fltk-1.3.4-1/png/pngerror.c **** png_chunk_warning(png_const_structrp png_ptr, png_const_charp warning_message)
 498:fltk-1.3.4-1/png/pngerror.c **** {
 1040              		.loc 1 498 0
 1041              		.cfi_startproc
 1042              	.LVL128:
 1043 0000 4881ECE8 		subq	$232, %rsp
 1043      000000
 1044              		.cfi_def_cfa_offset 240
 1045              		.loc 1 498 0
 1046 0007 64488B04 		movq	%fs:40, %rax
 1046      25280000 
 1046      00
 1047 0010 48898424 		movq	%rax, 216(%rsp)
 1047      D8000000 
 1048 0018 31C0     		xorl	%eax, %eax
 499:fltk-1.3.4-1/png/pngerror.c ****    char msg[18+PNG_MAX_ERROR_TEXT];
 500:fltk-1.3.4-1/png/pngerror.c ****    if (png_ptr == NULL)
 1049              		.loc 1 500 0
 1050 001a 4885FF   		testq	%rdi, %rdi
 1051 001d 7441     		je	.L143
 1052 001f 4989FB   		movq	%rdi, %r11
 501:fltk-1.3.4-1/png/pngerror.c ****       png_warning(png_ptr, warning_message);
 502:fltk-1.3.4-1/png/pngerror.c **** 
 503:fltk-1.3.4-1/png/pngerror.c ****    else
 504:fltk-1.3.4-1/png/pngerror.c ****    {
 505:fltk-1.3.4-1/png/pngerror.c ****       png_format_buffer(png_ptr, msg, warning_message);
 1053              		.loc 1 505 0
 1054 0022 8BBF1802 		movl	536(%rdi), %edi
 1054      0000
 1055              	.LVL129:
 1056 0028 4889F2   		movq	%rsi, %rdx
 1057 002b 4889E6   		movq	%rsp, %rsi
 1058              	.LVL130:
 1059 002e E8000000 		call	png_format_buffer.isra.0
 1059      00
 1060              	.LVL131:
 506:fltk-1.3.4-1/png/pngerror.c ****       png_warning(png_ptr, msg);
 1061              		.loc 1 506 0
 1062 0033 4889E6   		movq	%rsp, %rsi
 1063 0036 4C89DF   		movq	%r11, %rdi
 1064 0039 E8000000 		call	png_warning
 1064      00
 1065              	.LVL132:
 1066              	.L138:
 507:fltk-1.3.4-1/png/pngerror.c ****    }
 508:fltk-1.3.4-1/png/pngerror.c **** }
 1067              		.loc 1 508 0
 1068 003e 488B8424 		movq	216(%rsp), %rax
 1068      D8000000 
 1069 0046 64483304 		xorq	%fs:40, %rax
 1069      25280000 
 1069      00
 1070 004f 7518     		jne	.L144
 1071 0051 4881C4E8 		addq	$232, %rsp
 1071      000000
 1072              		.cfi_remember_state
 1073              		.cfi_def_cfa_offset 8
 1074 0058 C3       		ret
 1075              	.LVL133:
 1076 0059 0F1F8000 		.p2align 4,,10
 1076      000000
 1077              		.p2align 3
 1078              	.L143:
 1079              		.cfi_restore_state
 501:fltk-1.3.4-1/png/pngerror.c **** 
 1080              		.loc 1 501 0
 1081 0060 31FF     		xorl	%edi, %edi
 1082              	.LVL134:
 1083 0062 E8000000 		call	png_warning
 1083      00
 1084              	.LVL135:
 1085 0067 EBD5     		jmp	.L138
 1086              	.L144:
 1087              		.loc 1 508 0
 1088 0069 E8000000 		call	__stack_chk_fail
 1088      00
 1089              	.LVL136:
 1090              		.cfi_endproc
 1091              	.LFE69:
 1093              		.section	.text.unlikely.png_chunk_warning
 1094              	.LCOLDE11:
 1095              		.section	.text.png_chunk_warning
 1096              	.LHOTE11:
 1097              		.section	.text.unlikely.png_free_jmpbuf,"ax",@progbits
 1098              	.LCOLDB12:
 1099              		.section	.text.png_free_jmpbuf,"ax",@progbits
 1100              	.LHOTB12:
 1101              		.p2align 4,,15
 1102              		.globl	png_free_jmpbuf
 1104              	png_free_jmpbuf:
 1105              	.LFB74:
 509:fltk-1.3.4-1/png/pngerror.c **** #endif /* WARNINGS */
 510:fltk-1.3.4-1/png/pngerror.c **** 
 511:fltk-1.3.4-1/png/pngerror.c **** #ifdef PNG_READ_SUPPORTED
 512:fltk-1.3.4-1/png/pngerror.c **** #ifdef PNG_BENIGN_ERRORS_SUPPORTED
 513:fltk-1.3.4-1/png/pngerror.c **** void PNGAPI
 514:fltk-1.3.4-1/png/pngerror.c **** png_chunk_benign_error(png_const_structrp png_ptr, png_const_charp
 515:fltk-1.3.4-1/png/pngerror.c ****     error_message)
 516:fltk-1.3.4-1/png/pngerror.c **** {
 517:fltk-1.3.4-1/png/pngerror.c ****    if ((png_ptr->flags & PNG_FLAG_BENIGN_ERRORS_WARN) != 0)
 518:fltk-1.3.4-1/png/pngerror.c ****       png_chunk_warning(png_ptr, error_message);
 519:fltk-1.3.4-1/png/pngerror.c **** 
 520:fltk-1.3.4-1/png/pngerror.c ****    else
 521:fltk-1.3.4-1/png/pngerror.c ****       png_chunk_error(png_ptr, error_message);
 522:fltk-1.3.4-1/png/pngerror.c **** 
 523:fltk-1.3.4-1/png/pngerror.c **** #  ifndef PNG_ERROR_TEXT_SUPPORTED
 524:fltk-1.3.4-1/png/pngerror.c ****       PNG_UNUSED(error_message)
 525:fltk-1.3.4-1/png/pngerror.c **** #  endif
 526:fltk-1.3.4-1/png/pngerror.c **** }
 527:fltk-1.3.4-1/png/pngerror.c **** #endif
 528:fltk-1.3.4-1/png/pngerror.c **** #endif /* READ */
 529:fltk-1.3.4-1/png/pngerror.c **** 
 530:fltk-1.3.4-1/png/pngerror.c **** void /* PRIVATE */
 531:fltk-1.3.4-1/png/pngerror.c **** png_chunk_report(png_const_structrp png_ptr, png_const_charp message, int error)
 532:fltk-1.3.4-1/png/pngerror.c **** {
 533:fltk-1.3.4-1/png/pngerror.c **** #  ifndef PNG_WARNINGS_SUPPORTED
 534:fltk-1.3.4-1/png/pngerror.c ****       PNG_UNUSED(message)
 535:fltk-1.3.4-1/png/pngerror.c **** #  endif
 536:fltk-1.3.4-1/png/pngerror.c **** 
 537:fltk-1.3.4-1/png/pngerror.c ****    /* This is always supported, but for just read or just write it
 538:fltk-1.3.4-1/png/pngerror.c ****     * unconditionally does the right thing.
 539:fltk-1.3.4-1/png/pngerror.c ****     */
 540:fltk-1.3.4-1/png/pngerror.c **** #  if defined(PNG_READ_SUPPORTED) && defined(PNG_WRITE_SUPPORTED)
 541:fltk-1.3.4-1/png/pngerror.c ****       if ((png_ptr->mode & PNG_IS_READ_STRUCT) != 0)
 542:fltk-1.3.4-1/png/pngerror.c **** #  endif
 543:fltk-1.3.4-1/png/pngerror.c **** 
 544:fltk-1.3.4-1/png/pngerror.c **** #  ifdef PNG_READ_SUPPORTED
 545:fltk-1.3.4-1/png/pngerror.c ****       {
 546:fltk-1.3.4-1/png/pngerror.c ****          if (error < PNG_CHUNK_ERROR)
 547:fltk-1.3.4-1/png/pngerror.c ****             png_chunk_warning(png_ptr, message);
 548:fltk-1.3.4-1/png/pngerror.c **** 
 549:fltk-1.3.4-1/png/pngerror.c ****          else
 550:fltk-1.3.4-1/png/pngerror.c ****             png_chunk_benign_error(png_ptr, message);
 551:fltk-1.3.4-1/png/pngerror.c ****       }
 552:fltk-1.3.4-1/png/pngerror.c **** #  endif
 553:fltk-1.3.4-1/png/pngerror.c **** 
 554:fltk-1.3.4-1/png/pngerror.c **** #  if defined(PNG_READ_SUPPORTED) && defined(PNG_WRITE_SUPPORTED)
 555:fltk-1.3.4-1/png/pngerror.c ****       else if ((png_ptr->mode & PNG_IS_READ_STRUCT) == 0)
 556:fltk-1.3.4-1/png/pngerror.c **** #  endif
 557:fltk-1.3.4-1/png/pngerror.c **** 
 558:fltk-1.3.4-1/png/pngerror.c **** #  ifdef PNG_WRITE_SUPPORTED
 559:fltk-1.3.4-1/png/pngerror.c ****       {
 560:fltk-1.3.4-1/png/pngerror.c ****          if (error < PNG_CHUNK_WRITE_ERROR)
 561:fltk-1.3.4-1/png/pngerror.c ****             png_app_warning(png_ptr, message);
 562:fltk-1.3.4-1/png/pngerror.c **** 
 563:fltk-1.3.4-1/png/pngerror.c ****          else
 564:fltk-1.3.4-1/png/pngerror.c ****             png_app_error(png_ptr, message);
 565:fltk-1.3.4-1/png/pngerror.c ****       }
 566:fltk-1.3.4-1/png/pngerror.c **** #  endif
 567:fltk-1.3.4-1/png/pngerror.c **** }
 568:fltk-1.3.4-1/png/pngerror.c **** 
 569:fltk-1.3.4-1/png/pngerror.c **** #ifdef PNG_ERROR_TEXT_SUPPORTED
 570:fltk-1.3.4-1/png/pngerror.c **** #ifdef PNG_FLOATING_POINT_SUPPORTED
 571:fltk-1.3.4-1/png/pngerror.c **** PNG_FUNCTION(void,
 572:fltk-1.3.4-1/png/pngerror.c **** png_fixed_error,(png_const_structrp png_ptr, png_const_charp name),PNG_NORETURN)
 573:fltk-1.3.4-1/png/pngerror.c **** {
 574:fltk-1.3.4-1/png/pngerror.c **** #  define fixed_message "fixed point overflow in "
 575:fltk-1.3.4-1/png/pngerror.c **** #  define fixed_message_ln ((sizeof fixed_message)-1)
 576:fltk-1.3.4-1/png/pngerror.c ****    int  iin;
 577:fltk-1.3.4-1/png/pngerror.c ****    char msg[fixed_message_ln+PNG_MAX_ERROR_TEXT];
 578:fltk-1.3.4-1/png/pngerror.c ****    memcpy(msg, fixed_message, fixed_message_ln);
 579:fltk-1.3.4-1/png/pngerror.c ****    iin = 0;
 580:fltk-1.3.4-1/png/pngerror.c ****    if (name != NULL)
 581:fltk-1.3.4-1/png/pngerror.c ****       while (iin < (PNG_MAX_ERROR_TEXT-1) && name[iin] != 0)
 582:fltk-1.3.4-1/png/pngerror.c ****       {
 583:fltk-1.3.4-1/png/pngerror.c ****          msg[fixed_message_ln + iin] = name[iin];
 584:fltk-1.3.4-1/png/pngerror.c ****          ++iin;
 585:fltk-1.3.4-1/png/pngerror.c ****       }
 586:fltk-1.3.4-1/png/pngerror.c ****    msg[fixed_message_ln + iin] = 0;
 587:fltk-1.3.4-1/png/pngerror.c ****    png_error(png_ptr, msg);
 588:fltk-1.3.4-1/png/pngerror.c **** }
 589:fltk-1.3.4-1/png/pngerror.c **** #endif
 590:fltk-1.3.4-1/png/pngerror.c **** #endif
 591:fltk-1.3.4-1/png/pngerror.c **** 
 592:fltk-1.3.4-1/png/pngerror.c **** #ifdef PNG_SETJMP_SUPPORTED
 593:fltk-1.3.4-1/png/pngerror.c **** /* This API only exists if ANSI-C style error handling is used,
 594:fltk-1.3.4-1/png/pngerror.c ****  * otherwise it is necessary for png_default_error to be overridden.
 595:fltk-1.3.4-1/png/pngerror.c ****  */
 596:fltk-1.3.4-1/png/pngerror.c **** jmp_buf* PNGAPI
 597:fltk-1.3.4-1/png/pngerror.c **** png_set_longjmp_fn(png_structrp png_ptr, png_longjmp_ptr longjmp_fn,
 598:fltk-1.3.4-1/png/pngerror.c ****     size_t jmp_buf_size)
 599:fltk-1.3.4-1/png/pngerror.c **** {
 600:fltk-1.3.4-1/png/pngerror.c ****    /* From libpng 1.6.0 the app gets one chance to set a 'jmpbuf_size' value
 601:fltk-1.3.4-1/png/pngerror.c ****     * and it must not change after that.  Libpng doesn't care how big the
 602:fltk-1.3.4-1/png/pngerror.c ****     * buffer is, just that it doesn't change.
 603:fltk-1.3.4-1/png/pngerror.c ****     *
 604:fltk-1.3.4-1/png/pngerror.c ****     * If the buffer size is no *larger* than the size of jmp_buf when libpng is
 605:fltk-1.3.4-1/png/pngerror.c ****     * compiled a built in jmp_buf is returned; this preserves the pre-1.6.0
 606:fltk-1.3.4-1/png/pngerror.c ****     * semantics that this call will not fail.  If the size is larger, however,
 607:fltk-1.3.4-1/png/pngerror.c ****     * the buffer is allocated and this may fail, causing the function to return
 608:fltk-1.3.4-1/png/pngerror.c ****     * NULL.
 609:fltk-1.3.4-1/png/pngerror.c ****     */
 610:fltk-1.3.4-1/png/pngerror.c ****    if (png_ptr == NULL)
 611:fltk-1.3.4-1/png/pngerror.c ****       return NULL;
 612:fltk-1.3.4-1/png/pngerror.c **** 
 613:fltk-1.3.4-1/png/pngerror.c ****    if (png_ptr->jmp_buf_ptr == NULL)
 614:fltk-1.3.4-1/png/pngerror.c ****    {
 615:fltk-1.3.4-1/png/pngerror.c ****       png_ptr->jmp_buf_size = 0; /* not allocated */
 616:fltk-1.3.4-1/png/pngerror.c **** 
 617:fltk-1.3.4-1/png/pngerror.c ****       if (jmp_buf_size <= (sizeof png_ptr->jmp_buf_local))
 618:fltk-1.3.4-1/png/pngerror.c ****          png_ptr->jmp_buf_ptr = &png_ptr->jmp_buf_local;
 619:fltk-1.3.4-1/png/pngerror.c **** 
 620:fltk-1.3.4-1/png/pngerror.c ****       else
 621:fltk-1.3.4-1/png/pngerror.c ****       {
 622:fltk-1.3.4-1/png/pngerror.c ****          png_ptr->jmp_buf_ptr = png_voidcast(jmp_buf *,
 623:fltk-1.3.4-1/png/pngerror.c ****             png_malloc_warn(png_ptr, jmp_buf_size));
 624:fltk-1.3.4-1/png/pngerror.c **** 
 625:fltk-1.3.4-1/png/pngerror.c ****          if (png_ptr->jmp_buf_ptr == NULL)
 626:fltk-1.3.4-1/png/pngerror.c ****             return NULL; /* new NULL return on OOM */
 627:fltk-1.3.4-1/png/pngerror.c **** 
 628:fltk-1.3.4-1/png/pngerror.c ****          png_ptr->jmp_buf_size = jmp_buf_size;
 629:fltk-1.3.4-1/png/pngerror.c ****       }
 630:fltk-1.3.4-1/png/pngerror.c ****    }
 631:fltk-1.3.4-1/png/pngerror.c **** 
 632:fltk-1.3.4-1/png/pngerror.c ****    else /* Already allocated: check the size */
 633:fltk-1.3.4-1/png/pngerror.c ****    {
 634:fltk-1.3.4-1/png/pngerror.c ****       size_t size = png_ptr->jmp_buf_size;
 635:fltk-1.3.4-1/png/pngerror.c **** 
 636:fltk-1.3.4-1/png/pngerror.c ****       if (size == 0)
 637:fltk-1.3.4-1/png/pngerror.c ****       {
 638:fltk-1.3.4-1/png/pngerror.c ****          size = (sizeof png_ptr->jmp_buf_local);
 639:fltk-1.3.4-1/png/pngerror.c ****          if (png_ptr->jmp_buf_ptr != &png_ptr->jmp_buf_local)
 640:fltk-1.3.4-1/png/pngerror.c ****          {
 641:fltk-1.3.4-1/png/pngerror.c ****             /* This is an internal error in libpng: somehow we have been left
 642:fltk-1.3.4-1/png/pngerror.c ****              * with a stack allocated jmp_buf when the application regained
 643:fltk-1.3.4-1/png/pngerror.c ****              * control.  It's always possible to fix this up, but for the moment
 644:fltk-1.3.4-1/png/pngerror.c ****              * this is a png_error because that makes it easy to detect.
 645:fltk-1.3.4-1/png/pngerror.c ****              */
 646:fltk-1.3.4-1/png/pngerror.c ****             png_error(png_ptr, "Libpng jmp_buf still allocated");
 647:fltk-1.3.4-1/png/pngerror.c ****             /* png_ptr->jmp_buf_ptr = &png_ptr->jmp_buf_local; */
 648:fltk-1.3.4-1/png/pngerror.c ****          }
 649:fltk-1.3.4-1/png/pngerror.c ****       }
 650:fltk-1.3.4-1/png/pngerror.c **** 
 651:fltk-1.3.4-1/png/pngerror.c ****       if (size != jmp_buf_size)
 652:fltk-1.3.4-1/png/pngerror.c ****       {
 653:fltk-1.3.4-1/png/pngerror.c ****          png_warning(png_ptr, "Application jmp_buf size changed");
 654:fltk-1.3.4-1/png/pngerror.c ****          return NULL; /* caller will probably crash: no choice here */
 655:fltk-1.3.4-1/png/pngerror.c ****       }
 656:fltk-1.3.4-1/png/pngerror.c ****    }
 657:fltk-1.3.4-1/png/pngerror.c **** 
 658:fltk-1.3.4-1/png/pngerror.c ****    /* Finally fill in the function, now we have a satisfactory buffer. It is
 659:fltk-1.3.4-1/png/pngerror.c ****     * valid to change the function on every call.
 660:fltk-1.3.4-1/png/pngerror.c ****     */
 661:fltk-1.3.4-1/png/pngerror.c ****    png_ptr->longjmp_fn = longjmp_fn;
 662:fltk-1.3.4-1/png/pngerror.c ****    return png_ptr->jmp_buf_ptr;
 663:fltk-1.3.4-1/png/pngerror.c **** }
 664:fltk-1.3.4-1/png/pngerror.c **** 
 665:fltk-1.3.4-1/png/pngerror.c **** void /* PRIVATE */
 666:fltk-1.3.4-1/png/pngerror.c **** png_free_jmpbuf(png_structrp png_ptr)
 667:fltk-1.3.4-1/png/pngerror.c **** {
 1106              		.loc 1 667 0
 1107              		.cfi_startproc
 1108              	.LVL137:
 1109 0000 4881ECE8 		subq	$232, %rsp
 1109      000000
 1110              		.cfi_def_cfa_offset 240
 1111              		.loc 1 667 0
 1112 0007 64488B0C 		movq	%fs:40, %rcx
 1112      25280000 
 1112      00
 1113 0010 48898C24 		movq	%rcx, 216(%rsp)
 1113      D8000000 
 1114 0018 31C9     		xorl	%ecx, %ecx
 668:fltk-1.3.4-1/png/pngerror.c ****    if (png_ptr != NULL)
 1115              		.loc 1 668 0
 1116 001a 4885FF   		testq	%rdi, %rdi
 667:fltk-1.3.4-1/png/pngerror.c ****    if (png_ptr != NULL)
 1117              		.loc 1 667 0
 1118 001d 48893C24 		movq	%rdi, (%rsp)
 1119              		.loc 1 668 0
 1120 0021 7440     		je	.L145
 1121              	.LBB66:
 669:fltk-1.3.4-1/png/pngerror.c ****    {
 670:fltk-1.3.4-1/png/pngerror.c ****       jmp_buf *jb = png_ptr->jmp_buf_ptr;
 1122              		.loc 1 670 0
 1123 0023 488B97D0 		movq	208(%rdi), %rdx
 1123      000000
 671:fltk-1.3.4-1/png/pngerror.c **** 
 672:fltk-1.3.4-1/png/pngerror.c ****       /* A size of 0 is used to indicate a local, stack, allocation of the
 673:fltk-1.3.4-1/png/pngerror.c ****        * pointer; used here and in png.c
 674:fltk-1.3.4-1/png/pngerror.c ****        */
 675:fltk-1.3.4-1/png/pngerror.c ****       if (jb != NULL && png_ptr->jmp_buf_size > 0)
 1124              		.loc 1 675 0
 1125 002a 4885D2   		testq	%rdx, %rdx
 670:fltk-1.3.4-1/png/pngerror.c **** 
 1126              		.loc 1 670 0
 1127 002d 48895424 		movq	%rdx, 8(%rsp)
 1127      08
 1128              	.LVL138:
 1129              		.loc 1 675 0
 1130 0032 740A     		je	.L147
 1131              		.loc 1 675 0 is_stmt 0 discriminator 1
 1132 0034 4883BFD8 		cmpq	$0, 216(%rdi)
 1132      00000000 
 1133 003c 7542     		jne	.L152
 1134              	.LVL139:
 1135              	.L147:
 676:fltk-1.3.4-1/png/pngerror.c ****       {
 677:fltk-1.3.4-1/png/pngerror.c **** 
 678:fltk-1.3.4-1/png/pngerror.c ****          /* This stuff is so that a failure to free the error control structure
 679:fltk-1.3.4-1/png/pngerror.c ****           * does not leave libpng in a state with no valid error handling: the
 680:fltk-1.3.4-1/png/pngerror.c ****           * free always succeeds, if there is an error it gets ignored.
 681:fltk-1.3.4-1/png/pngerror.c ****           */
 682:fltk-1.3.4-1/png/pngerror.c ****          if (jb != &png_ptr->jmp_buf_local)
 683:fltk-1.3.4-1/png/pngerror.c ****          {
 684:fltk-1.3.4-1/png/pngerror.c ****             /* Make an internal, libpng, jmp_buf to return here */
 685:fltk-1.3.4-1/png/pngerror.c ****             jmp_buf free_jmp_buf;
 686:fltk-1.3.4-1/png/pngerror.c **** 
 687:fltk-1.3.4-1/png/pngerror.c ****             if (!setjmp(free_jmp_buf))
 688:fltk-1.3.4-1/png/pngerror.c ****             {
 689:fltk-1.3.4-1/png/pngerror.c ****                png_ptr->jmp_buf_ptr = &free_jmp_buf; /* come back here */
 690:fltk-1.3.4-1/png/pngerror.c ****                png_ptr->jmp_buf_size = 0; /* stack allocation */
 691:fltk-1.3.4-1/png/pngerror.c ****                png_ptr->longjmp_fn = longjmp;
 692:fltk-1.3.4-1/png/pngerror.c ****                png_free(png_ptr, jb); /* Return to setjmp on error */
 693:fltk-1.3.4-1/png/pngerror.c ****             }
 694:fltk-1.3.4-1/png/pngerror.c ****          }
 695:fltk-1.3.4-1/png/pngerror.c ****       }
 696:fltk-1.3.4-1/png/pngerror.c **** 
 697:fltk-1.3.4-1/png/pngerror.c ****       /* *Always* cancel everything out: */
 698:fltk-1.3.4-1/png/pngerror.c ****       png_ptr->jmp_buf_size = 0;
 1136              		.loc 1 698 0 is_stmt 1
 1137 003e 488B0424 		movq	(%rsp), %rax
 1138 0042 48C780D8 		movq	$0, 216(%rax)
 1138      00000000 
 1138      000000
 699:fltk-1.3.4-1/png/pngerror.c ****       png_ptr->jmp_buf_ptr = NULL;
 1139              		.loc 1 699 0
 1140 004d 48C780D0 		movq	$0, 208(%rax)
 1140      00000000 
 1140      000000
 700:fltk-1.3.4-1/png/pngerror.c ****       png_ptr->longjmp_fn = 0;
 1141              		.loc 1 700 0
 1142 0058 48C780C8 		movq	$0, 200(%rax)
 1142      00000000 
 1142      000000
 1143              	.LVL140:
 1144              	.L145:
 1145              	.LBE66:
 701:fltk-1.3.4-1/png/pngerror.c ****    }
 702:fltk-1.3.4-1/png/pngerror.c **** }
 1146              		.loc 1 702 0
 1147 0063 488B8424 		movq	216(%rsp), %rax
 1147      D8000000 
 1148 006b 64483304 		xorq	%fs:40, %rax
 1148      25280000 
 1148      00
 1149 0074 7555     		jne	.L153
 1150 0076 4881C4E8 		addq	$232, %rsp
 1150      000000
 1151              		.cfi_remember_state
 1152              		.cfi_def_cfa_offset 8
 1153              	.LVL141:
 1154 007d C3       		ret
 1155              	.LVL142:
 1156 007e 6690     		.p2align 4,,10
 1157              		.p2align 3
 1158              	.L152:
 1159              		.cfi_restore_state
 1160              	.LBB68:
 682:fltk-1.3.4-1/png/pngerror.c ****          {
 1161              		.loc 1 682 0
 1162 0080 4839FA   		cmpq	%rdi, %rdx
 1163 0083 74B9     		je	.L147
 1164              	.LBB67:
 687:fltk-1.3.4-1/png/pngerror.c ****             {
 1165              		.loc 1 687 0
 1166 0085 488D7C24 		leaq	16(%rsp), %rdi
 1166      10
 1167              	.LVL143:
 1168 008a E8000000 		call	_setjmp
 1168      00
 1169              	.LVL144:
 1170 008f 85C0     		testl	%eax, %eax
 1171 0091 75AB     		jne	.L147
 689:fltk-1.3.4-1/png/pngerror.c ****                png_ptr->jmp_buf_size = 0; /* stack allocation */
 1172              		.loc 1 689 0
 1173 0093 488B0424 		movq	(%rsp), %rax
 1174 0097 488D7424 		leaq	16(%rsp), %rsi
 1174      10
 1175 009c 4889B0D0 		movq	%rsi, 208(%rax)
 1175      000000
 692:fltk-1.3.4-1/png/pngerror.c ****             }
 1176              		.loc 1 692 0
 1177 00a3 488B7424 		movq	8(%rsp), %rsi
 1177      08
 1178 00a8 4889C7   		movq	%rax, %rdi
 690:fltk-1.3.4-1/png/pngerror.c ****                png_ptr->longjmp_fn = longjmp;
 1179              		.loc 1 690 0
 1180 00ab 48C780D8 		movq	$0, 216(%rax)
 1180      00000000 
 1180      000000
 691:fltk-1.3.4-1/png/pngerror.c ****                png_free(png_ptr, jb); /* Return to setjmp on error */
 1181              		.loc 1 691 0
 1182 00b6 48C780C8 		movq	$__longjmp_chk, 200(%rax)
 1182      00000000 
 1182      000000
 692:fltk-1.3.4-1/png/pngerror.c ****             }
 1183              		.loc 1 692 0
 1184 00c1 E8000000 		call	png_free
 1184      00
 1185              	.LVL145:
 1186 00c6 E973FFFF 		jmp	.L147
 1186      FF
 1187              	.LVL146:
 1188              	.L153:
 1189              	.LBE67:
 1190              	.LBE68:
 1191              		.loc 1 702 0
 1192 00cb E8000000 		call	__stack_chk_fail
 1192      00
 1193              	.LVL147:
 1194              		.cfi_endproc
 1195              	.LFE74:
 1197              		.section	.text.unlikely.png_free_jmpbuf
 1198              	.LCOLDE12:
 1199              		.section	.text.png_free_jmpbuf
 1200              	.LHOTE12:
 1201              		.section	.text.unlikely.png_longjmp,"ax",@progbits
 1202              	.LCOLDB13:
 1203              		.section	.text.png_longjmp,"ax",@progbits
 1204              	.LHOTB13:
 1205              		.p2align 4,,15
 1206              		.globl	png_longjmp
 1208              	png_longjmp:
 1209              	.LFB76:
 703:fltk-1.3.4-1/png/pngerror.c **** #endif
 704:fltk-1.3.4-1/png/pngerror.c **** 
 705:fltk-1.3.4-1/png/pngerror.c **** /* This is the default error handling function.  Note that replacements for
 706:fltk-1.3.4-1/png/pngerror.c ****  * this function MUST NOT RETURN, or the program will likely crash.  This
 707:fltk-1.3.4-1/png/pngerror.c ****  * function is used by default, or if the program supplies NULL for the
 708:fltk-1.3.4-1/png/pngerror.c ****  * error function pointer in png_set_error_fn().
 709:fltk-1.3.4-1/png/pngerror.c ****  */
 710:fltk-1.3.4-1/png/pngerror.c **** static PNG_FUNCTION(void /* PRIVATE */,
 711:fltk-1.3.4-1/png/pngerror.c **** png_default_error,(png_const_structrp png_ptr, png_const_charp error_message),
 712:fltk-1.3.4-1/png/pngerror.c ****    PNG_NORETURN)
 713:fltk-1.3.4-1/png/pngerror.c **** {
 714:fltk-1.3.4-1/png/pngerror.c **** #ifdef PNG_CONSOLE_IO_SUPPORTED
 715:fltk-1.3.4-1/png/pngerror.c **** #ifdef PNG_ERROR_NUMBERS_SUPPORTED
 716:fltk-1.3.4-1/png/pngerror.c ****    /* Check on NULL only added in 1.5.4 */
 717:fltk-1.3.4-1/png/pngerror.c ****    if (error_message != NULL && *error_message == PNG_LITERAL_SHARP)
 718:fltk-1.3.4-1/png/pngerror.c ****    {
 719:fltk-1.3.4-1/png/pngerror.c ****       /* Strip "#nnnn " from beginning of error message. */
 720:fltk-1.3.4-1/png/pngerror.c ****       int offset;
 721:fltk-1.3.4-1/png/pngerror.c ****       char error_number[16];
 722:fltk-1.3.4-1/png/pngerror.c ****       for (offset = 0; offset<15; offset++)
 723:fltk-1.3.4-1/png/pngerror.c ****       {
 724:fltk-1.3.4-1/png/pngerror.c ****          error_number[offset] = error_message[offset + 1];
 725:fltk-1.3.4-1/png/pngerror.c ****          if (error_message[offset] == ' ')
 726:fltk-1.3.4-1/png/pngerror.c ****             break;
 727:fltk-1.3.4-1/png/pngerror.c ****       }
 728:fltk-1.3.4-1/png/pngerror.c **** 
 729:fltk-1.3.4-1/png/pngerror.c ****       if ((offset > 1) && (offset < 15))
 730:fltk-1.3.4-1/png/pngerror.c ****       {
 731:fltk-1.3.4-1/png/pngerror.c ****          error_number[offset - 1] = '\0';
 732:fltk-1.3.4-1/png/pngerror.c ****          fprintf(stderr, "libpng error no. %s: %s",
 733:fltk-1.3.4-1/png/pngerror.c ****              error_number, error_message + offset + 1);
 734:fltk-1.3.4-1/png/pngerror.c ****          fprintf(stderr, PNG_STRING_NEWLINE);
 735:fltk-1.3.4-1/png/pngerror.c ****       }
 736:fltk-1.3.4-1/png/pngerror.c **** 
 737:fltk-1.3.4-1/png/pngerror.c ****       else
 738:fltk-1.3.4-1/png/pngerror.c ****       {
 739:fltk-1.3.4-1/png/pngerror.c ****          fprintf(stderr, "libpng error: %s, offset=%d",
 740:fltk-1.3.4-1/png/pngerror.c ****              error_message, offset);
 741:fltk-1.3.4-1/png/pngerror.c ****          fprintf(stderr, PNG_STRING_NEWLINE);
 742:fltk-1.3.4-1/png/pngerror.c ****       }
 743:fltk-1.3.4-1/png/pngerror.c ****    }
 744:fltk-1.3.4-1/png/pngerror.c ****    else
 745:fltk-1.3.4-1/png/pngerror.c **** #endif
 746:fltk-1.3.4-1/png/pngerror.c ****    {
 747:fltk-1.3.4-1/png/pngerror.c ****       fprintf(stderr, "libpng error: %s", error_message ? error_message :
 748:fltk-1.3.4-1/png/pngerror.c ****          "undefined");
 749:fltk-1.3.4-1/png/pngerror.c ****       fprintf(stderr, PNG_STRING_NEWLINE);
 750:fltk-1.3.4-1/png/pngerror.c ****    }
 751:fltk-1.3.4-1/png/pngerror.c **** #else
 752:fltk-1.3.4-1/png/pngerror.c ****    PNG_UNUSED(error_message) /* Make compiler happy */
 753:fltk-1.3.4-1/png/pngerror.c **** #endif
 754:fltk-1.3.4-1/png/pngerror.c ****    png_longjmp(png_ptr, 1);
 755:fltk-1.3.4-1/png/pngerror.c **** }
 756:fltk-1.3.4-1/png/pngerror.c **** 
 757:fltk-1.3.4-1/png/pngerror.c **** PNG_FUNCTION(void,PNGAPI
 758:fltk-1.3.4-1/png/pngerror.c **** png_longjmp,(png_const_structrp png_ptr, int val),PNG_NORETURN)
 759:fltk-1.3.4-1/png/pngerror.c **** {
 1210              		.loc 1 759 0
 1211              		.cfi_startproc
 1212              	.LVL148:
 1213 0000 4883EC08 		subq	$8, %rsp
 1214              		.cfi_def_cfa_offset 16
 760:fltk-1.3.4-1/png/pngerror.c **** #ifdef PNG_SETJMP_SUPPORTED
 761:fltk-1.3.4-1/png/pngerror.c ****    if (png_ptr != NULL && png_ptr->longjmp_fn != NULL &&
 1215              		.loc 1 761 0
 1216 0004 4885FF   		testq	%rdi, %rdi
 1217 0007 741A     		je	.L155
 1218              		.loc 1 761 0 is_stmt 0 discriminator 1
 1219 0009 488B87C8 		movq	200(%rdi), %rax
 1219      000000
 1220 0010 4885C0   		testq	%rax, %rax
 1221 0013 740E     		je	.L155
 762:fltk-1.3.4-1/png/pngerror.c ****        png_ptr->jmp_buf_ptr != NULL)
 1222              		.loc 1 762 0 is_stmt 1 discriminator 2
 1223 0015 488BBFD0 		movq	208(%rdi), %rdi
 1223      000000
 1224              	.LVL149:
 761:fltk-1.3.4-1/png/pngerror.c ****        png_ptr->jmp_buf_ptr != NULL)
 1225              		.loc 1 761 0 discriminator 2
 1226 001c 4885FF   		testq	%rdi, %rdi
 1227 001f 7402     		je	.L155
 763:fltk-1.3.4-1/png/pngerror.c ****       png_ptr->longjmp_fn(*png_ptr->jmp_buf_ptr, val);
 1228              		.loc 1 763 0
 1229 0021 FFD0     		call	*%rax
 1230              	.LVL150:
 1231              	.L155:
 764:fltk-1.3.4-1/png/pngerror.c **** #else
 765:fltk-1.3.4-1/png/pngerror.c ****    PNG_UNUSED(png_ptr)
 766:fltk-1.3.4-1/png/pngerror.c ****    PNG_UNUSED(val)
 767:fltk-1.3.4-1/png/pngerror.c **** #endif
 768:fltk-1.3.4-1/png/pngerror.c **** 
 769:fltk-1.3.4-1/png/pngerror.c ****    /* If control reaches this point, png_longjmp() must not return. The only
 770:fltk-1.3.4-1/png/pngerror.c ****     * choice is to terminate the whole process (or maybe the thread); to do
 771:fltk-1.3.4-1/png/pngerror.c ****     * this the ANSI-C abort() function is used unless a different method is 
 772:fltk-1.3.4-1/png/pngerror.c ****     * implemented by overriding the default configuration setting for
 773:fltk-1.3.4-1/png/pngerror.c ****     * PNG_ABORT().
 774:fltk-1.3.4-1/png/pngerror.c ****     */
 775:fltk-1.3.4-1/png/pngerror.c ****    PNG_ABORT();
 1232              		.loc 1 775 0
 1233 0023 E8000000 		call	abort
 1233      00
 1234              	.LVL151:
 1235              		.cfi_endproc
 1236              	.LFE76:
 1238              		.section	.text.unlikely.png_longjmp
 1239              	.LCOLDE13:
 1240              		.section	.text.png_longjmp
 1241              	.LHOTE13:
 1242              		.section	.rodata.str1.1
 1243              	.LC14:
 1244 0013 756E6465 		.string	"undefined"
 1244      66696E65 
 1244      6400
 1245              	.LC15:
 1246 001d 6C696270 		.string	"libpng error: %s"
 1246      6E672065 
 1246      72726F72 
 1246      3A202573 
 1246      00
 1247              		.section	.text.unlikely.png_error,"ax",@progbits
 1248              	.LCOLDB16:
 1249              		.section	.text.png_error,"ax",@progbits
 1250              	.LHOTB16:
 1251              		.p2align 4,,15
 1252              		.globl	png_error
 1254              	png_error:
 1255              	.LFB56:
  41:fltk-1.3.4-1/png/pngerror.c **** #ifdef PNG_ERROR_NUMBERS_SUPPORTED
 1256              		.loc 1 41 0
 1257              		.cfi_startproc
 1258              	.LVL152:
 1259 0000 55       		pushq	%rbp
 1260              		.cfi_def_cfa_offset 16
 1261              		.cfi_offset 6, -16
 1262 0001 53       		pushq	%rbx
 1263              		.cfi_def_cfa_offset 24
 1264              		.cfi_offset 3, -24
 1265 0002 4889FD   		movq	%rdi, %rbp
 1266 0005 4889F3   		movq	%rsi, %rbx
 1267 0008 4883EC08 		subq	$8, %rsp
 1268              		.cfi_def_cfa_offset 32
  82:fltk-1.3.4-1/png/pngerror.c ****       (*(png_ptr->error_fn))(png_constcast(png_structrp,png_ptr),
 1269              		.loc 1 82 0
 1270 000c 4885FF   		testq	%rdi, %rdi
 1271 000f 740E     		je	.L167
  82:fltk-1.3.4-1/png/pngerror.c ****       (*(png_ptr->error_fn))(png_constcast(png_structrp,png_ptr),
 1272              		.loc 1 82 0 is_stmt 0 discriminator 1
 1273 0011 488B87E0 		movq	224(%rdi), %rax
 1273      000000
 1274 0018 4885C0   		testq	%rax, %rax
 1275 001b 7402     		je	.L167
  83:fltk-1.3.4-1/png/pngerror.c ****           error_message);
 1276              		.loc 1 83 0 is_stmt 1
 1277 001d FFD0     		call	*%rax
 1278              	.LVL153:
 1279              	.L167:
 1280              	.LBB75:
 1281              	.LBB76:
 1282              	.LBB77:
 1283              	.LBB78:
 1284              		.loc 2 97 0
 1285 001f 488B3D00 		movq	stderr(%rip), %rdi
 1285      000000
 1286              	.LBE78:
 1287              	.LBE77:
 747:fltk-1.3.4-1/png/pngerror.c ****          "undefined");
 1288              		.loc 1 747 0
 1289 0026 4885DB   		testq	%rbx, %rbx
 1290 0029 B9000000 		movl	$.LC14, %ecx
 1290      00
 1291 002e 480F45CB 		cmovne	%rbx, %rcx
 1292              	.LVL154:
 1293              	.LBB80:
 1294              	.LBB79:
 1295              		.loc 2 97 0
 1296 0032 BA000000 		movl	$.LC15, %edx
 1296      00
 1297 0037 BE010000 		movl	$1, %esi
 1297      00
 1298 003c 31C0     		xorl	%eax, %eax
 1299 003e E8000000 		call	__fprintf_chk
 1299      00
 1300              	.LVL155:
 1301              	.LBE79:
 1302              	.LBE80:
 1303              	.LBB81:
 1304              	.LBB82:
 1305 0043 488B3500 		movq	stderr(%rip), %rsi
 1305      000000
 1306 004a BF0A0000 		movl	$10, %edi
 1306      00
 1307 004f E8000000 		call	fputc
 1307      00
 1308              	.LVL156:
 1309              	.LBE82:
 1310              	.LBE81:
 754:fltk-1.3.4-1/png/pngerror.c **** }
 1311              		.loc 1 754 0
 1312 0054 BE010000 		movl	$1, %esi
 1312      00
 1313 0059 4889EF   		movq	%rbp, %rdi
 1314 005c E8000000 		call	png_longjmp
 1314      00
 1315              	.LVL157:
 1316              	.LBE76:
 1317              	.LBE75:
 1318              		.cfi_endproc
 1319              	.LFE56:
 1321              		.section	.text.unlikely.png_error
 1322              	.LCOLDE16:
 1323              		.section	.text.png_error
 1324              	.LHOTE16:
 1325              		.section	.text.unlikely.png_app_warning,"ax",@progbits
 1326              	.LCOLDB17:
 1327              		.section	.text.png_app_warning,"ax",@progbits
 1328              	.LHOTB17:
 1329              		.p2align 4,,15
 1330              		.globl	png_app_warning
 1332              	png_app_warning:
 1333              	.LFB65:
 393:fltk-1.3.4-1/png/pngerror.c ****   if ((png_ptr->flags & PNG_FLAG_APP_WARNINGS_WARN) != 0)
 1334              		.loc 1 393 0
 1335              		.cfi_startproc
 1336              	.LVL158:
 394:fltk-1.3.4-1/png/pngerror.c ****      png_warning(png_ptr, error_message);
 1337              		.loc 1 394 0
 1338 0000 F6873201 		testb	$32, 306(%rdi)
 1338      000020
 1339 0007 7405     		je	.L178
 395:fltk-1.3.4-1/png/pngerror.c ****   else
 1340              		.loc 1 395 0
 1341 0009 E9000000 		jmp	png_warning
 1341      00
 1342              	.LVL159:
 1343              	.L178:
 393:fltk-1.3.4-1/png/pngerror.c ****   if ((png_ptr->flags & PNG_FLAG_APP_WARNINGS_WARN) != 0)
 1344              		.loc 1 393 0
 1345 000e 50       		pushq	%rax
 1346              		.cfi_def_cfa_offset 16
 397:fltk-1.3.4-1/png/pngerror.c **** 
 1347              		.loc 1 397 0
 1348 000f E8000000 		call	png_error
 1348      00
 1349              	.LVL160:
 1350              		.cfi_endproc
 1351              	.LFE65:
 1353              		.section	.text.unlikely.png_app_warning
 1354              	.LCOLDE17:
 1355              		.section	.text.png_app_warning
 1356              	.LHOTE17:
 1357              		.section	.text.unlikely.png_app_error,"ax",@progbits
 1358              	.LCOLDB18:
 1359              		.section	.text.png_app_error,"ax",@progbits
 1360              	.LHOTB18:
 1361              		.p2align 4,,15
 1362              		.globl	png_app_error
 1364              	png_app_error:
 1365              	.LFB66:
 406:fltk-1.3.4-1/png/pngerror.c ****   if ((png_ptr->flags & PNG_FLAG_APP_ERRORS_WARN) != 0)
 1366              		.loc 1 406 0
 1367              		.cfi_startproc
 1368              	.LVL161:
 407:fltk-1.3.4-1/png/pngerror.c ****      png_warning(png_ptr, error_message);
 1369              		.loc 1 407 0
 1370 0000 F6873201 		testb	$64, 306(%rdi)
 1370      000040
 1371 0007 7405     		je	.L181
 408:fltk-1.3.4-1/png/pngerror.c ****   else
 1372              		.loc 1 408 0
 1373 0009 E9000000 		jmp	png_warning
 1373      00
 1374              	.LVL162:
 1375              	.L181:
 406:fltk-1.3.4-1/png/pngerror.c ****   if ((png_ptr->flags & PNG_FLAG_APP_ERRORS_WARN) != 0)
 1376              		.loc 1 406 0
 1377 000e 50       		pushq	%rax
 1378              		.cfi_def_cfa_offset 16
 410:fltk-1.3.4-1/png/pngerror.c **** 
 1379              		.loc 1 410 0
 1380 000f E8000000 		call	png_error
 1380      00
 1381              	.LVL163:
 1382              		.cfi_endproc
 1383              	.LFE66:
 1385              		.section	.text.unlikely.png_app_error
 1386              	.LCOLDE18:
 1387              		.section	.text.png_app_error
 1388              	.LHOTE18:
 1389              		.section	.text.unlikely.png_chunk_error,"ax",@progbits
 1390              	.LCOLDB19:
 1391              		.section	.text.png_chunk_error,"ax",@progbits
 1392              	.LHOTB19:
 1393              		.p2align 4,,15
 1394              		.globl	png_chunk_error
 1396              	png_chunk_error:
 1397              	.LFB68:
 482:fltk-1.3.4-1/png/pngerror.c ****    char msg[18+PNG_MAX_ERROR_TEXT];
 1398              		.loc 1 482 0
 1399              		.cfi_startproc
 1400              	.LVL164:
 1401 0000 4881ECE8 		subq	$232, %rsp
 1401      000000
 1402              		.cfi_def_cfa_offset 240
 482:fltk-1.3.4-1/png/pngerror.c ****    char msg[18+PNG_MAX_ERROR_TEXT];
 1403              		.loc 1 482 0
 1404 0007 64488B04 		movq	%fs:40, %rax
 1404      25280000 
 1404      00
 1405 0010 48898424 		movq	%rax, 216(%rsp)
 1405      D8000000 
 1406 0018 31C0     		xorl	%eax, %eax
 484:fltk-1.3.4-1/png/pngerror.c ****       png_error(png_ptr, error_message);
 1407              		.loc 1 484 0
 1408 001a 4885FF   		testq	%rdi, %rdi
 1409 001d 741F     		je	.L187
 1410 001f 4989FB   		movq	%rdi, %r11
 489:fltk-1.3.4-1/png/pngerror.c ****       png_error(png_ptr, msg);
 1411              		.loc 1 489 0
 1412 0022 8BBF1802 		movl	536(%rdi), %edi
 1412      0000
 1413              	.LVL165:
 1414 0028 4889F2   		movq	%rsi, %rdx
 1415 002b 4889E6   		movq	%rsp, %rsi
 1416              	.LVL166:
 1417 002e E8000000 		call	png_format_buffer.isra.0
 1417      00
 1418              	.LVL167:
 490:fltk-1.3.4-1/png/pngerror.c ****    }
 1419              		.loc 1 490 0
 1420 0033 4889E6   		movq	%rsp, %rsi
 1421 0036 4C89DF   		movq	%r11, %rdi
 1422 0039 E8000000 		call	png_error
 1422      00
 1423              	.LVL168:
 1424              	.L187:
 485:fltk-1.3.4-1/png/pngerror.c **** 
 1425              		.loc 1 485 0
 1426 003e 31FF     		xorl	%edi, %edi
 1427              	.LVL169:
 1428 0040 E8000000 		call	png_error
 1428      00
 1429              	.LVL170:
 1430              		.cfi_endproc
 1431              	.LFE68:
 1433              		.section	.text.unlikely.png_chunk_error
 1434              	.LCOLDE19:
 1435              		.section	.text.png_chunk_error
 1436              	.LHOTE19:
 1437              		.section	.text.unlikely.png_chunk_benign_error,"ax",@progbits
 1438              	.LCOLDB20:
 1439              		.section	.text.png_chunk_benign_error,"ax",@progbits
 1440              	.LHOTB20:
 1441              		.p2align 4,,15
 1442              		.globl	png_chunk_benign_error
 1444              	png_chunk_benign_error:
 1445              	.LFB70:
 516:fltk-1.3.4-1/png/pngerror.c ****    if ((png_ptr->flags & PNG_FLAG_BENIGN_ERRORS_WARN) != 0)
 1446              		.loc 1 516 0
 1447              		.cfi_startproc
 1448              	.LVL171:
 517:fltk-1.3.4-1/png/pngerror.c ****       png_chunk_warning(png_ptr, error_message);
 1449              		.loc 1 517 0
 1450 0000 F6873201 		testb	$16, 306(%rdi)
 1450      000010
 1451 0007 7405     		je	.L189
 518:fltk-1.3.4-1/png/pngerror.c **** 
 1452              		.loc 1 518 0
 1453 0009 E9000000 		jmp	png_chunk_warning
 1453      00
 1454              	.LVL172:
 1455              	.L189:
 516:fltk-1.3.4-1/png/pngerror.c ****    if ((png_ptr->flags & PNG_FLAG_BENIGN_ERRORS_WARN) != 0)
 1456              		.loc 1 516 0
 1457 000e 50       		pushq	%rax
 1458              		.cfi_def_cfa_offset 16
 521:fltk-1.3.4-1/png/pngerror.c **** 
 1459              		.loc 1 521 0
 1460 000f E8000000 		call	png_chunk_error
 1460      00
 1461              	.LVL173:
 1462              		.cfi_endproc
 1463              	.LFE70:
 1465              		.section	.text.unlikely.png_chunk_benign_error
 1466              	.LCOLDE20:
 1467              		.section	.text.png_chunk_benign_error
 1468              	.LHOTE20:
 1469              		.section	.text.unlikely.png_chunk_report,"ax",@progbits
 1470              	.LCOLDB21:
 1471              		.section	.text.png_chunk_report,"ax",@progbits
 1472              	.LHOTB21:
 1473              		.p2align 4,,15
 1474              		.globl	png_chunk_report
 1476              	png_chunk_report:
 1477              	.LFB71:
 532:fltk-1.3.4-1/png/pngerror.c **** #  ifndef PNG_WARNINGS_SUPPORTED
 1478              		.loc 1 532 0
 1479              		.cfi_startproc
 1480              	.LVL174:
 541:fltk-1.3.4-1/png/pngerror.c **** #  endif
 1481              		.loc 1 541 0
 1482 0000 F6872D01 		testb	$-128, 301(%rdi)
 1482      000080
 1483 0007 750F     		jne	.L195
 560:fltk-1.3.4-1/png/pngerror.c ****             png_app_warning(png_ptr, message);
 1484              		.loc 1 560 0
 1485 0009 85D2     		testl	%edx, %edx
 1486 000b 7E23     		jle	.L196
 564:fltk-1.3.4-1/png/pngerror.c ****       }
 1487              		.loc 1 564 0
 1488 000d E9000000 		jmp	png_app_error
 1488      00
 1489              	.LVL175:
 1490              		.p2align 4,,10
 1491 0012 660F1F44 		.p2align 3
 1491      0000
 1492              	.L195:
 546:fltk-1.3.4-1/png/pngerror.c ****             png_chunk_warning(png_ptr, message);
 1493              		.loc 1 546 0
 1494 0018 83FA01   		cmpl	$1, %edx
 1495 001b 7E0B     		jle	.L197
 550:fltk-1.3.4-1/png/pngerror.c ****       }
 1496              		.loc 1 550 0
 1497 001d E9000000 		jmp	png_chunk_benign_error
 1497      00
 1498              	.LVL176:
 1499              		.p2align 4,,10
 1500 0022 660F1F44 		.p2align 3
 1500      0000
 1501              	.L197:
 547:fltk-1.3.4-1/png/pngerror.c **** 
 1502              		.loc 1 547 0
 1503 0028 E9000000 		jmp	png_chunk_warning
 1503      00
 1504              	.LVL177:
 1505 002d 0F1F00   		.p2align 4,,10
 1506              		.p2align 3
 1507              	.L196:
 561:fltk-1.3.4-1/png/pngerror.c **** 
 1508              		.loc 1 561 0
 1509 0030 E9000000 		jmp	png_app_warning
 1509      00
 1510              	.LVL178:
 1511              		.cfi_endproc
 1512              	.LFE71:
 1514              		.section	.text.unlikely.png_chunk_report
 1515              	.LCOLDE21:
 1516              		.section	.text.png_chunk_report
 1517              	.LHOTE21:
 1518              		.section	.text.unlikely.png_benign_error,"ax",@progbits
 1519              	.LCOLDB22:
 1520              		.section	.text.png_benign_error,"ax",@progbits
 1521              	.LHOTB22:
 1522              		.p2align 4,,15
 1523              		.globl	png_benign_error
 1525              	png_benign_error:
 1526              	.LFB64:
 363:fltk-1.3.4-1/png/pngerror.c ****    if ((png_ptr->flags & PNG_FLAG_BENIGN_ERRORS_WARN) != 0)
 1527              		.loc 1 363 0
 1528              		.cfi_startproc
 1529              	.LVL179:
 364:fltk-1.3.4-1/png/pngerror.c ****    {
 1530              		.loc 1 364 0
 1531 0000 F6873201 		testb	$16, 306(%rdi)
 1531      000010
 1532 0007 741F     		je	.L199
 367:fltk-1.3.4-1/png/pngerror.c ****             png_ptr->chunk_name != 0)
 1533              		.loc 1 367 0
 1534 0009 F6872D01 		testb	$-128, 301(%rdi)
 1534      000080
 1535 0010 740A     		je	.L200
 367:fltk-1.3.4-1/png/pngerror.c ****             png_ptr->chunk_name != 0)
 1536              		.loc 1 367 0 is_stmt 0 discriminator 1
 1537 0012 8B971802 		movl	536(%rdi), %edx
 1537      0000
 1538 0018 85D2     		testl	%edx, %edx
 1539 001a 7534     		jne	.L209
 1540              	.L200:
 372:fltk-1.3.4-1/png/pngerror.c ****    }
 1541              		.loc 1 372 0 is_stmt 1
 1542 001c E9000000 		jmp	png_warning
 1542      00
 1543              	.LVL180:
 1544              		.p2align 4,,10
 1545 0021 0F1F8000 		.p2align 3
 1545      000000
 1546              	.L199:
 363:fltk-1.3.4-1/png/pngerror.c ****    if ((png_ptr->flags & PNG_FLAG_BENIGN_ERRORS_WARN) != 0)
 1547              		.loc 1 363 0
 1548 0028 4883EC08 		subq	$8, %rsp
 1549              		.cfi_def_cfa_offset 16
 378:fltk-1.3.4-1/png/pngerror.c ****             png_ptr->chunk_name != 0)
 1550              		.loc 1 378 0
 1551 002c F6872D01 		testb	$-128, 301(%rdi)
 1551      000080
 1552 0033 740A     		je	.L201
 378:fltk-1.3.4-1/png/pngerror.c ****             png_ptr->chunk_name != 0)
 1553              		.loc 1 378 0 is_stmt 0 discriminator 1
 1554 0035 8B871802 		movl	536(%rdi), %eax
 1554      0000
 1555 003b 85C0     		testl	%eax, %eax
 1556 003d 7509     		jne	.L210
 1557              	.L201:
 383:fltk-1.3.4-1/png/pngerror.c ****    }
 1558              		.loc 1 383 0 is_stmt 1
 1559 003f E8000000 		call	png_error
 1559      00
 1560              	.LVL181:
 1561              		.p2align 4,,10
 1562 0044 0F1F4000 		.p2align 3
 1563              	.L210:
 380:fltk-1.3.4-1/png/pngerror.c ****          else
 1564              		.loc 1 380 0
 1565 0048 E8000000 		call	png_chunk_error
 1565      00
 1566              	.LVL182:
 1567 004d 0F1F00   		.p2align 4,,10
 1568              		.p2align 3
 1569              	.L209:
 1570              		.cfi_def_cfa_offset 8
 369:fltk-1.3.4-1/png/pngerror.c ****          else
 1571              		.loc 1 369 0
 1572 0050 E9000000 		jmp	png_chunk_warning
 1572      00
 1573              	.LVL183:
 1574              		.cfi_endproc
 1575              	.LFE64:
 1577              		.section	.text.unlikely.png_benign_error
 1578              	.LCOLDE22:
 1579              		.section	.text.png_benign_error
 1580              	.LHOTE22:
 1581              		.section	.text.unlikely.png_fixed_error,"ax",@progbits
 1582              	.LCOLDB23:
 1583              		.section	.text.png_fixed_error,"ax",@progbits
 1584              	.LHOTB23:
 1585              		.p2align 4,,15
 1586              		.globl	png_fixed_error
 1588              	png_fixed_error:
 1589              	.LFB72:
 573:fltk-1.3.4-1/png/pngerror.c **** #  define fixed_message "fixed point overflow in "
 1590              		.loc 1 573 0
 1591              		.cfi_startproc
 1592              	.LVL184:
 1593 0000 4881ECF8 		subq	$248, %rsp
 1593      000000
 1594              		.cfi_def_cfa_offset 256
 573:fltk-1.3.4-1/png/pngerror.c **** #  define fixed_message "fixed point overflow in "
 1595              		.loc 1 573 0
 1596 0007 64488B04 		movq	%fs:40, %rax
 1596      25280000 
 1596      00
 1597 0010 48898424 		movq	%rax, 232(%rsp)
 1597      E8000000 
 1598 0018 31C0     		xorl	%eax, %eax
 1599              	.LVL185:
 1600              	.LBB83:
 1601              	.LBB84:
 1602              		.file 3 "/usr/include/x86_64-linux-gnu/bits/string3.h"
   1:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* Copyright (C) 2004-2016 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string3.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string3.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string3.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string3.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string3.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string3.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string3.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string3.h ****    <http://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef _STRING_H
  19:/usr/include/x86_64-linux-gnu/bits/string3.h **** # error "Never use <bits/string3.h> directly; include <string.h> instead."
  20:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  21:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  22:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  23:/usr/include/x86_64-linux-gnu/bits/string3.h **** __warndecl (__warn_memset_zero_len,
  24:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  25:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  26:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  27:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef __cplusplus
  28:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* XXX This is temporarily.  We should not redefine any of the symbols
  29:/usr/include/x86_64-linux-gnu/bits/string3.h ****    and instead integrate the error checking into the original
  30:/usr/include/x86_64-linux-gnu/bits/string3.h ****    definitions.  */
  31:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memcpy
  32:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memmove
  33:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memset
  34:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcat
  35:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcpy
  36:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncat
  37:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncpy
  38:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_GNU
  39:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef mempcpy
  40:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef stpcpy
  41:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  42:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_MISC
  43:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bcopy
  44:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bzero
  45:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  46:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  47:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  48:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  49:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  50:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  51:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	       size_t __len))
  52:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  53:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
 1603              		.loc 3 53 0
 1604 001a 48B86669 		movabsq	$8029953751172802918, %rax
 1604      78656420 
 1604      706F
 1605 0024 488D4C24 		leaq	24(%rsp), %rcx
 1605      18
 1606 0029 48890424 		movq	%rax, (%rsp)
 1607 002d 48B8696E 		movabsq	$8243124912629509737, %rax
 1607      74206F76 
 1607      6572
 1608 0037 48894424 		movq	%rax, 8(%rsp)
 1608      08
 1609 003c 48B8666C 		movabsq	$2336920844815527014, %rax
 1609      6F772069 
 1609      6E20
 1610 0046 48894424 		movq	%rax, 16(%rsp)
 1610      10
 1611              	.LVL186:
 1612              	.LBE84:
 1613              	.LBE83:
 1614 004b 31C0     		xorl	%eax, %eax
 580:fltk-1.3.4-1/png/pngerror.c ****       while (iin < (PNG_MAX_ERROR_TEXT-1) && name[iin] != 0)
 1615              		.loc 1 580 0
 1616 004d 4885F6   		testq	%rsi, %rsi
 1617 0050 7515     		jne	.L217
 1618 0052 EB1B     		jmp	.L213
 1619              	.LVL187:
 1620              		.p2align 4,,10
 1621 0054 0F1F4000 		.p2align 3
 1622              	.L215:
 583:fltk-1.3.4-1/png/pngerror.c ****          ++iin;
 1623              		.loc 1 583 0
 1624 0058 881401   		movb	%dl, (%rcx,%rax)
 1625              	.LVL188:
 1626 005b 4883C001 		addq	$1, %rax
 1627              	.LVL189:
 581:fltk-1.3.4-1/png/pngerror.c ****       {
 1628              		.loc 1 581 0
 1629 005f 483DC300 		cmpq	$195, %rax
 1629      0000
 1630 0065 7408     		je	.L213
 1631              	.L217:
 1632              	.LVL190:
 581:fltk-1.3.4-1/png/pngerror.c ****       {
 1633              		.loc 1 581 0 is_stmt 0 discriminator 1
 1634 0067 0FB61406 		movzbl	(%rsi,%rax), %edx
 1635 006b 84D2     		testb	%dl, %dl
 1636 006d 75E9     		jne	.L215
 1637              	.LVL191:
 1638              	.L213:
 587:fltk-1.3.4-1/png/pngerror.c **** }
 1639              		.loc 1 587 0 is_stmt 1
 1640 006f 4889E6   		movq	%rsp, %rsi
 1641              	.LVL192:
 586:fltk-1.3.4-1/png/pngerror.c ****    png_error(png_ptr, msg);
 1642              		.loc 1 586 0
 1643 0072 C6440418 		movb	$0, 24(%rsp,%rax)
 1643      00
 587:fltk-1.3.4-1/png/pngerror.c **** }
 1644              		.loc 1 587 0
 1645 0077 E8000000 		call	png_error
 1645      00
 1646              	.LVL193:
 1647              		.cfi_endproc
 1648              	.LFE72:
 1650              		.section	.text.unlikely.png_fixed_error
 1651              	.LCOLDE23:
 1652              		.section	.text.png_fixed_error
 1653              	.LHOTE23:
 1654              		.section	.rodata.str1.8,"aMS",@progbits,1
 1655              		.align 8
 1656              	.LC24:
 1657 0000 4C696270 		.string	"Libpng jmp_buf still allocated"
 1657      6E67206A 
 1657      6D705F62 
 1657      75662073 
 1657      74696C6C 
 1658 001f 00       		.align 8
 1659              	.LC25:
 1660 0020 4170706C 		.string	"Application jmp_buf size changed"
 1660      69636174 
 1660      696F6E20 
 1660      6A6D705F 
 1660      62756620 
 1661              		.section	.text.unlikely.png_set_longjmp_fn,"ax",@progbits
 1662              	.LCOLDB26:
 1663              		.section	.text.png_set_longjmp_fn,"ax",@progbits
 1664              	.LHOTB26:
 1665              		.p2align 4,,15
 1666              		.globl	png_set_longjmp_fn
 1668              	png_set_longjmp_fn:
 1669              	.LFB73:
 599:fltk-1.3.4-1/png/pngerror.c ****    /* From libpng 1.6.0 the app gets one chance to set a 'jmpbuf_size' value
 1670              		.loc 1 599 0
 1671              		.cfi_startproc
 1672              	.LVL194:
 610:fltk-1.3.4-1/png/pngerror.c ****       return NULL;
 1673              		.loc 1 610 0
 1674 0000 4885FF   		testq	%rdi, %rdi
 1675 0003 0F849F00 		je	.L236
 1675      0000
 599:fltk-1.3.4-1/png/pngerror.c ****    /* From libpng 1.6.0 the app gets one chance to set a 'jmpbuf_size' value
 1676              		.loc 1 599 0
 1677 0009 4154     		pushq	%r12
 1678              		.cfi_def_cfa_offset 16
 1679              		.cfi_offset 12, -16
 1680 000b 55       		pushq	%rbp
 1681              		.cfi_def_cfa_offset 24
 1682              		.cfi_offset 6, -24
 1683 000c 4989D4   		movq	%rdx, %r12
 1684 000f 53       		pushq	%rbx
 1685              		.cfi_def_cfa_offset 32
 1686              		.cfi_offset 3, -32
 613:fltk-1.3.4-1/png/pngerror.c ****    {
 1687              		.loc 1 613 0
 1688 0010 488B87D0 		movq	208(%rdi), %rax
 1688      000000
 1689 0017 4889F5   		movq	%rsi, %rbp
 1690 001a 4889FB   		movq	%rdi, %rbx
 1691 001d 4885C0   		testq	%rax, %rax
 1692 0020 742E     		je	.L237
 1693              	.LBB85:
 634:fltk-1.3.4-1/png/pngerror.c **** 
 1694              		.loc 1 634 0
 1695 0022 488B8FD8 		movq	216(%rdi), %rcx
 1695      000000
 1696              	.LVL195:
 636:fltk-1.3.4-1/png/pngerror.c ****       {
 1697              		.loc 1 636 0
 1698 0029 4885C9   		testq	%rcx, %rcx
 1699 002c 7412     		je	.L238
 1700              	.LVL196:
 1701              	.L228:
 651:fltk-1.3.4-1/png/pngerror.c ****       {
 1702              		.loc 1 651 0
 1703 002e 4C39E1   		cmpq	%r12, %rcx
 1704 0031 753D     		jne	.L239
 1705              	.LVL197:
 1706              	.L226:
 1707              	.LBE85:
 661:fltk-1.3.4-1/png/pngerror.c ****    return png_ptr->jmp_buf_ptr;
 1708              		.loc 1 661 0
 1709 0033 4889ABC8 		movq	%rbp, 200(%rbx)
 1709      000000
 1710              	.L223:
 663:fltk-1.3.4-1/png/pngerror.c **** 
 1711              		.loc 1 663 0
 1712 003a 5B       		popq	%rbx
 1713              		.cfi_remember_state
 1714              		.cfi_restore 3
 1715              		.cfi_def_cfa_offset 24
 1716              	.LVL198:
 1717 003b 5D       		popq	%rbp
 1718              		.cfi_restore 6
 1719              		.cfi_def_cfa_offset 16
 1720              	.LVL199:
 1721 003c 415C     		popq	%r12
 1722              		.cfi_restore 12
 1723              		.cfi_def_cfa_offset 8
 1724              	.LVL200:
 1725 003e C3       		ret
 1726              	.LVL201:
 1727 003f 90       		.p2align 4,,10
 1728              		.p2align 3
 1729              	.L238:
 1730              		.cfi_restore_state
 1731              	.LBB86:
 639:fltk-1.3.4-1/png/pngerror.c ****          {
 1732              		.loc 1 639 0
 1733 0040 4839F8   		cmpq	%rdi, %rax
 1734 0043 7566     		jne	.L240
 638:fltk-1.3.4-1/png/pngerror.c ****          if (png_ptr->jmp_buf_ptr != &png_ptr->jmp_buf_local)
 1735              		.loc 1 638 0
 1736 0045 B9C80000 		movl	$200, %ecx
 1736      00
 1737 004a EBE2     		jmp	.L228
 1738              	.LVL202:
 1739 004c 0F1F4000 		.p2align 4,,10
 1740              		.p2align 3
 1741              	.L237:
 1742              	.LBE86:
 617:fltk-1.3.4-1/png/pngerror.c ****          png_ptr->jmp_buf_ptr = &png_ptr->jmp_buf_local;
 1743              		.loc 1 617 0
 1744 0050 4881FAC8 		cmpq	$200, %rdx
 1744      000000
 615:fltk-1.3.4-1/png/pngerror.c **** 
 1745              		.loc 1 615 0
 1746 0057 48C787D8 		movq	$0, 216(%rdi)
 1746      00000000 
 1746      000000
 617:fltk-1.3.4-1/png/pngerror.c ****          png_ptr->jmp_buf_ptr = &png_ptr->jmp_buf_local;
 1747              		.loc 1 617 0
 1748 0062 7724     		ja	.L225
 618:fltk-1.3.4-1/png/pngerror.c **** 
 1749              		.loc 1 618 0
 1750 0064 4889F8   		movq	%rdi, %rax
 1751 0067 4889BBD0 		movq	%rdi, 208(%rbx)
 1751      000000
 1752 006e EBC3     		jmp	.L226
 1753              	.LVL203:
 1754              		.p2align 4,,10
 1755              		.p2align 3
 1756              	.L239:
 1757              	.LBB87:
 653:fltk-1.3.4-1/png/pngerror.c ****          return NULL; /* caller will probably crash: no choice here */
 1758              		.loc 1 653 0
 1759 0070 BE000000 		movl	$.LC25, %esi
 1759      00
 1760              	.LVL204:
 1761 0075 4889DF   		movq	%rbx, %rdi
 1762 0078 E8000000 		call	png_warning
 1762      00
 1763              	.LVL205:
 1764              	.L235:
 654:fltk-1.3.4-1/png/pngerror.c ****       }
 1765              		.loc 1 654 0
 1766 007d 31C0     		xorl	%eax, %eax
 1767 007f EBB9     		jmp	.L223
 1768              	.LVL206:
 1769              		.p2align 4,,10
 1770 0081 0F1F8000 		.p2align 3
 1770      000000
 1771              	.L225:
 1772              	.LBE87:
 622:fltk-1.3.4-1/png/pngerror.c ****             png_malloc_warn(png_ptr, jmp_buf_size));
 1773              		.loc 1 622 0
 1774 0088 4889D6   		movq	%rdx, %rsi
 1775              	.LVL207:
 1776 008b E8000000 		call	png_malloc_warn
 1776      00
 1777              	.LVL208:
 625:fltk-1.3.4-1/png/pngerror.c ****             return NULL; /* new NULL return on OOM */
 1778              		.loc 1 625 0
 1779 0090 4885C0   		testq	%rax, %rax
 622:fltk-1.3.4-1/png/pngerror.c ****             png_malloc_warn(png_ptr, jmp_buf_size));
 1780              		.loc 1 622 0
 1781 0093 488983D0 		movq	%rax, 208(%rbx)
 1781      000000
 625:fltk-1.3.4-1/png/pngerror.c ****             return NULL; /* new NULL return on OOM */
 1782              		.loc 1 625 0
 1783 009a 74E1     		je	.L235
 628:fltk-1.3.4-1/png/pngerror.c ****       }
 1784              		.loc 1 628 0
 1785 009c 4C89A3D8 		movq	%r12, 216(%rbx)
 1785      000000
 1786 00a3 EB8E     		jmp	.L226
 1787              	.LVL209:
 1788              		.p2align 4,,10
 1789 00a5 0F1F00   		.p2align 3
 1790              	.L236:
 1791              		.cfi_def_cfa_offset 8
 1792              		.cfi_restore 3
 1793              		.cfi_restore 6
 1794              		.cfi_restore 12
 611:fltk-1.3.4-1/png/pngerror.c **** 
 1795              		.loc 1 611 0
 1796 00a8 31C0     		xorl	%eax, %eax
 663:fltk-1.3.4-1/png/pngerror.c **** 
 1797              		.loc 1 663 0
 1798 00aa C3       		ret
 1799              	.LVL210:
 1800              	.L240:
 1801              		.cfi_def_cfa_offset 32
 1802              		.cfi_offset 3, -32
 1803              		.cfi_offset 6, -24
 1804              		.cfi_offset 12, -16
 1805              	.LBB88:
 646:fltk-1.3.4-1/png/pngerror.c ****             /* png_ptr->jmp_buf_ptr = &png_ptr->jmp_buf_local; */
 1806              		.loc 1 646 0
 1807 00ab BE000000 		movl	$.LC24, %esi
 1807      00
 1808              	.LVL211:
 1809 00b0 E8000000 		call	png_error
 1809      00
 1810              	.LVL212:
 1811              	.LBE88:
 1812              		.cfi_endproc
 1813              	.LFE73:
 1815              		.section	.text.unlikely.png_set_longjmp_fn
 1816              	.LCOLDE26:
 1817              		.section	.text.png_set_longjmp_fn
 1818              	.LHOTE26:
 1819              		.section	.text.unlikely.png_set_error_fn,"ax",@progbits
 1820              	.LCOLDB27:
 1821              		.section	.text.png_set_error_fn,"ax",@progbits
 1822              	.LHOTB27:
 1823              		.p2align 4,,15
 1824              		.globl	png_set_error_fn
 1826              	png_set_error_fn:
 1827              	.LFB78:
 776:fltk-1.3.4-1/png/pngerror.c **** }
 777:fltk-1.3.4-1/png/pngerror.c **** 
 778:fltk-1.3.4-1/png/pngerror.c **** #ifdef PNG_WARNINGS_SUPPORTED
 779:fltk-1.3.4-1/png/pngerror.c **** /* This function is called when there is a warning, but the library thinks
 780:fltk-1.3.4-1/png/pngerror.c ****  * it can continue anyway.  Replacement functions don't have to do anything
 781:fltk-1.3.4-1/png/pngerror.c ****  * here if you don't want them to.  In the default configuration, png_ptr is
 782:fltk-1.3.4-1/png/pngerror.c ****  * not used, but it is passed in case it may be useful.
 783:fltk-1.3.4-1/png/pngerror.c ****  */
 784:fltk-1.3.4-1/png/pngerror.c **** static void /* PRIVATE */
 785:fltk-1.3.4-1/png/pngerror.c **** png_default_warning(png_const_structrp png_ptr, png_const_charp warning_message)
 786:fltk-1.3.4-1/png/pngerror.c **** {
 787:fltk-1.3.4-1/png/pngerror.c **** #ifdef PNG_CONSOLE_IO_SUPPORTED
 788:fltk-1.3.4-1/png/pngerror.c **** #  ifdef PNG_ERROR_NUMBERS_SUPPORTED
 789:fltk-1.3.4-1/png/pngerror.c ****    if (*warning_message == PNG_LITERAL_SHARP)
 790:fltk-1.3.4-1/png/pngerror.c ****    {
 791:fltk-1.3.4-1/png/pngerror.c ****       int offset;
 792:fltk-1.3.4-1/png/pngerror.c ****       char warning_number[16];
 793:fltk-1.3.4-1/png/pngerror.c ****       for (offset = 0; offset < 15; offset++)
 794:fltk-1.3.4-1/png/pngerror.c ****       {
 795:fltk-1.3.4-1/png/pngerror.c ****          warning_number[offset] = warning_message[offset + 1];
 796:fltk-1.3.4-1/png/pngerror.c ****          if (warning_message[offset] == ' ')
 797:fltk-1.3.4-1/png/pngerror.c ****             break;
 798:fltk-1.3.4-1/png/pngerror.c ****       }
 799:fltk-1.3.4-1/png/pngerror.c **** 
 800:fltk-1.3.4-1/png/pngerror.c ****       if ((offset > 1) && (offset < 15))
 801:fltk-1.3.4-1/png/pngerror.c ****       {
 802:fltk-1.3.4-1/png/pngerror.c ****          warning_number[offset + 1] = '\0';
 803:fltk-1.3.4-1/png/pngerror.c ****          fprintf(stderr, "libpng warning no. %s: %s",
 804:fltk-1.3.4-1/png/pngerror.c ****              warning_number, warning_message + offset);
 805:fltk-1.3.4-1/png/pngerror.c ****          fprintf(stderr, PNG_STRING_NEWLINE);
 806:fltk-1.3.4-1/png/pngerror.c ****       }
 807:fltk-1.3.4-1/png/pngerror.c **** 
 808:fltk-1.3.4-1/png/pngerror.c ****       else
 809:fltk-1.3.4-1/png/pngerror.c ****       {
 810:fltk-1.3.4-1/png/pngerror.c ****          fprintf(stderr, "libpng warning: %s",
 811:fltk-1.3.4-1/png/pngerror.c ****              warning_message);
 812:fltk-1.3.4-1/png/pngerror.c ****          fprintf(stderr, PNG_STRING_NEWLINE);
 813:fltk-1.3.4-1/png/pngerror.c ****       }
 814:fltk-1.3.4-1/png/pngerror.c ****    }
 815:fltk-1.3.4-1/png/pngerror.c ****    else
 816:fltk-1.3.4-1/png/pngerror.c **** #  endif
 817:fltk-1.3.4-1/png/pngerror.c **** 
 818:fltk-1.3.4-1/png/pngerror.c ****    {
 819:fltk-1.3.4-1/png/pngerror.c ****       fprintf(stderr, "libpng warning: %s", warning_message);
 820:fltk-1.3.4-1/png/pngerror.c ****       fprintf(stderr, PNG_STRING_NEWLINE);
 821:fltk-1.3.4-1/png/pngerror.c ****    }
 822:fltk-1.3.4-1/png/pngerror.c **** #else
 823:fltk-1.3.4-1/png/pngerror.c ****    PNG_UNUSED(warning_message) /* Make compiler happy */
 824:fltk-1.3.4-1/png/pngerror.c **** #endif
 825:fltk-1.3.4-1/png/pngerror.c ****    PNG_UNUSED(png_ptr) /* Make compiler happy */
 826:fltk-1.3.4-1/png/pngerror.c **** }
 827:fltk-1.3.4-1/png/pngerror.c **** #endif /* WARNINGS */
 828:fltk-1.3.4-1/png/pngerror.c **** 
 829:fltk-1.3.4-1/png/pngerror.c **** /* This function is called when the application wants to use another method
 830:fltk-1.3.4-1/png/pngerror.c ****  * of handling errors and warnings.  Note that the error function MUST NOT
 831:fltk-1.3.4-1/png/pngerror.c ****  * return to the calling routine or serious problems will occur.  The return
 832:fltk-1.3.4-1/png/pngerror.c ****  * method used in the default routine calls longjmp(png_ptr->jmp_buf_ptr, 1)
 833:fltk-1.3.4-1/png/pngerror.c ****  */
 834:fltk-1.3.4-1/png/pngerror.c **** void PNGAPI
 835:fltk-1.3.4-1/png/pngerror.c **** png_set_error_fn(png_structrp png_ptr, png_voidp error_ptr,
 836:fltk-1.3.4-1/png/pngerror.c ****     png_error_ptr error_fn, png_error_ptr warning_fn)
 837:fltk-1.3.4-1/png/pngerror.c **** {
 1828              		.loc 1 837 0
 1829              		.cfi_startproc
 1830              	.LVL213:
 838:fltk-1.3.4-1/png/pngerror.c ****    if (png_ptr == NULL)
 1831              		.loc 1 838 0
 1832 0000 4885FF   		testq	%rdi, %rdi
 1833 0003 7415     		je	.L241
 839:fltk-1.3.4-1/png/pngerror.c ****       return;
 840:fltk-1.3.4-1/png/pngerror.c **** 
 841:fltk-1.3.4-1/png/pngerror.c ****    png_ptr->error_ptr = error_ptr;
 1834              		.loc 1 841 0
 1835 0005 4889B7F0 		movq	%rsi, 240(%rdi)
 1835      000000
 842:fltk-1.3.4-1/png/pngerror.c ****    png_ptr->error_fn = error_fn;
 1836              		.loc 1 842 0
 1837 000c 488997E0 		movq	%rdx, 224(%rdi)
 1837      000000
 843:fltk-1.3.4-1/png/pngerror.c **** #ifdef PNG_WARNINGS_SUPPORTED
 844:fltk-1.3.4-1/png/pngerror.c ****    png_ptr->warning_fn = warning_fn;
 1838              		.loc 1 844 0
 1839 0013 48898FE8 		movq	%rcx, 232(%rdi)
 1839      000000
 1840              	.L241:
 1841 001a F3C3     		rep ret
 1842              		.cfi_endproc
 1843              	.LFE78:
 1845              		.section	.text.unlikely.png_set_error_fn
 1846              	.LCOLDE27:
 1847              		.section	.text.png_set_error_fn
 1848              	.LHOTE27:
 1849              		.section	.text.unlikely.png_get_error_ptr,"ax",@progbits
 1850              	.LCOLDB28:
 1851              		.section	.text.png_get_error_ptr,"ax",@progbits
 1852              	.LHOTB28:
 1853              		.p2align 4,,15
 1854              		.globl	png_get_error_ptr
 1856              	png_get_error_ptr:
 1857              	.LFB79:
 845:fltk-1.3.4-1/png/pngerror.c **** #else
 846:fltk-1.3.4-1/png/pngerror.c ****    PNG_UNUSED(warning_fn)
 847:fltk-1.3.4-1/png/pngerror.c **** #endif
 848:fltk-1.3.4-1/png/pngerror.c **** }
 849:fltk-1.3.4-1/png/pngerror.c **** 
 850:fltk-1.3.4-1/png/pngerror.c **** 
 851:fltk-1.3.4-1/png/pngerror.c **** /* This function returns a pointer to the error_ptr associated with the user
 852:fltk-1.3.4-1/png/pngerror.c ****  * functions.  The application should free any memory associated with this
 853:fltk-1.3.4-1/png/pngerror.c ****  * pointer before png_write_destroy and png_read_destroy are called.
 854:fltk-1.3.4-1/png/pngerror.c ****  */
 855:fltk-1.3.4-1/png/pngerror.c **** png_voidp PNGAPI
 856:fltk-1.3.4-1/png/pngerror.c **** png_get_error_ptr(png_const_structrp png_ptr)
 857:fltk-1.3.4-1/png/pngerror.c **** {
 1858              		.loc 1 857 0
 1859              		.cfi_startproc
 1860              	.LVL214:
 858:fltk-1.3.4-1/png/pngerror.c ****    if (png_ptr == NULL)
 1861              		.loc 1 858 0
 1862 0000 4885FF   		testq	%rdi, %rdi
 1863 0003 740B     		je	.L248
 859:fltk-1.3.4-1/png/pngerror.c ****       return NULL;
 860:fltk-1.3.4-1/png/pngerror.c **** 
 861:fltk-1.3.4-1/png/pngerror.c ****    return ((png_voidp)png_ptr->error_ptr);
 1864              		.loc 1 861 0
 1865 0005 488B87F0 		movq	240(%rdi), %rax
 1865      000000
 1866 000c C3       		ret
 1867 000d 0F1F00   		.p2align 4,,10
 1868              		.p2align 3
 1869              	.L248:
 859:fltk-1.3.4-1/png/pngerror.c ****       return NULL;
 1870              		.loc 1 859 0
 1871 0010 31C0     		xorl	%eax, %eax
 862:fltk-1.3.4-1/png/pngerror.c **** }
 1872              		.loc 1 862 0
 1873 0012 C3       		ret
 1874              		.cfi_endproc
 1875              	.LFE79:
 1877              		.section	.text.unlikely.png_get_error_ptr
 1878              	.LCOLDE28:
 1879              		.section	.text.png_get_error_ptr
 1880              	.LHOTE28:
 1881              		.section	.rodata.str1.1
 1882              	.LC29:
 1883 002e 62616420 		.string	"bad longjmp: "
 1883      6C6F6E67 
 1883      6A6D703A 
 1883      2000
 1884              		.section	.text.unlikely.png_safe_error,"ax",@progbits
 1885              	.LCOLDB30:
 1886              		.section	.text.png_safe_error,"ax",@progbits
 1887              	.LHOTB30:
 1888              		.p2align 4,,15
 1889              		.globl	png_safe_error
 1891              	png_safe_error:
 1892              	.LFB80:
 863:fltk-1.3.4-1/png/pngerror.c **** 
 864:fltk-1.3.4-1/png/pngerror.c **** 
 865:fltk-1.3.4-1/png/pngerror.c **** #ifdef PNG_ERROR_NUMBERS_SUPPORTED
 866:fltk-1.3.4-1/png/pngerror.c **** void PNGAPI
 867:fltk-1.3.4-1/png/pngerror.c **** png_set_strip_error_numbers(png_structrp png_ptr, png_uint_32 strip_mode)
 868:fltk-1.3.4-1/png/pngerror.c **** {
 869:fltk-1.3.4-1/png/pngerror.c ****    if (png_ptr != NULL)
 870:fltk-1.3.4-1/png/pngerror.c ****    {
 871:fltk-1.3.4-1/png/pngerror.c ****       png_ptr->flags &=
 872:fltk-1.3.4-1/png/pngerror.c ****          ((~(PNG_FLAG_STRIP_ERROR_NUMBERS |
 873:fltk-1.3.4-1/png/pngerror.c ****          PNG_FLAG_STRIP_ERROR_TEXT))&strip_mode);
 874:fltk-1.3.4-1/png/pngerror.c ****    }
 875:fltk-1.3.4-1/png/pngerror.c **** }
 876:fltk-1.3.4-1/png/pngerror.c **** #endif
 877:fltk-1.3.4-1/png/pngerror.c **** 
 878:fltk-1.3.4-1/png/pngerror.c **** #if defined(PNG_SIMPLIFIED_READ_SUPPORTED) ||\
 879:fltk-1.3.4-1/png/pngerror.c ****    defined(PNG_SIMPLIFIED_WRITE_SUPPORTED)
 880:fltk-1.3.4-1/png/pngerror.c ****    /* Currently the above both depend on SETJMP_SUPPORTED, however it would be
 881:fltk-1.3.4-1/png/pngerror.c ****     * possible to implement without setjmp support just so long as there is some
 882:fltk-1.3.4-1/png/pngerror.c ****     * way to handle the error return here:
 883:fltk-1.3.4-1/png/pngerror.c ****     */
 884:fltk-1.3.4-1/png/pngerror.c **** PNG_FUNCTION(void /* PRIVATE */, (PNGCBAPI
 885:fltk-1.3.4-1/png/pngerror.c **** png_safe_error),(png_structp png_nonconst_ptr, png_const_charp error_message),
 886:fltk-1.3.4-1/png/pngerror.c ****    PNG_NORETURN)
 887:fltk-1.3.4-1/png/pngerror.c **** {
 1893              		.loc 1 887 0
 1894              		.cfi_startproc
 1895              	.LVL215:
 1896 0000 4883EC08 		subq	$8, %rsp
 1897              		.cfi_def_cfa_offset 16
 888:fltk-1.3.4-1/png/pngerror.c ****    const png_const_structrp png_ptr = png_nonconst_ptr;
 889:fltk-1.3.4-1/png/pngerror.c ****    png_imagep image = png_voidcast(png_imagep, png_ptr->error_ptr);
 1898              		.loc 1 889 0
 1899 0004 4C8B8FF0 		movq	240(%rdi), %r9
 1899      000000
 1900              	.LVL216:
 890:fltk-1.3.4-1/png/pngerror.c **** 
 891:fltk-1.3.4-1/png/pngerror.c ****    /* An error is always logged here, overwriting anything (typically a warning)
 892:fltk-1.3.4-1/png/pngerror.c ****     * that is already there:
 893:fltk-1.3.4-1/png/pngerror.c ****     */
 894:fltk-1.3.4-1/png/pngerror.c ****    if (image != NULL)
 1901              		.loc 1 894 0
 1902 000b 4D85C9   		testq	%r9, %r9
 1903 000e 7466     		je	.L251
 895:fltk-1.3.4-1/png/pngerror.c ****    {
 896:fltk-1.3.4-1/png/pngerror.c ****       png_safecat(image->message, (sizeof image->message), 0, error_message);
 1904              		.loc 1 896 0
 1905 0010 4D8D5124 		leaq	36(%r9), %r10
 1906              	.LVL217:
 1907 0014 4989F3   		movq	%rsi, %r11
 1908              	.LBB89:
 1909              	.LBB90:
 1910 0017 4889F1   		movq	%rsi, %rcx
 1911 001a 31D2     		xorl	%edx, %edx
 1912 001c BE400000 		movl	$64, %esi
 1912      00
 1913              	.LVL218:
 1914 0021 4C89D7   		movq	%r10, %rdi
 1915              	.LVL219:
 1916 0024 E8000000 		call	png_safecat.part.2
 1916      00
 1917              	.LVL220:
 1918              	.LBE90:
 1919              	.LBE89:
 897:fltk-1.3.4-1/png/pngerror.c ****       image->warning_or_error |= PNG_IMAGE_ERROR;
 898:fltk-1.3.4-1/png/pngerror.c **** 
 899:fltk-1.3.4-1/png/pngerror.c ****       /* Retrieve the jmp_buf from within the png_control, making this work for
 900:fltk-1.3.4-1/png/pngerror.c ****        * C++ compilation too is pretty tricky: C++ wants a pointer to the first
 901:fltk-1.3.4-1/png/pngerror.c ****        * element of a jmp_buf, but C doesn't tell us the type of that.
 902:fltk-1.3.4-1/png/pngerror.c ****        */
 903:fltk-1.3.4-1/png/pngerror.c ****       if (image->opaque != NULL && image->opaque->error_buf != NULL)
 1920              		.loc 1 903 0
 1921 0029 498B01   		movq	(%r9), %rax
 897:fltk-1.3.4-1/png/pngerror.c ****       image->warning_or_error |= PNG_IMAGE_ERROR;
 1922              		.loc 1 897 0
 1923 002c 41834920 		orl	$2, 32(%r9)
 1923      02
 1924              		.loc 1 903 0
 1925 0031 4885C0   		testq	%rax, %rax
 1926 0034 7413     		je	.L252
 1927              		.loc 1 903 0 is_stmt 0 discriminator 1
 1928 0036 488B7810 		movq	16(%rax), %rdi
 1929 003a 4885FF   		testq	%rdi, %rdi
 1930 003d 740A     		je	.L252
 904:fltk-1.3.4-1/png/pngerror.c ****          longjmp(png_control_jmp_buf(image->opaque), 1);
 1931              		.loc 1 904 0 is_stmt 1
 1932 003f BE010000 		movl	$1, %esi
 1932      00
 1933 0044 E8000000 		call	__longjmp_chk
 1933      00
 1934              	.LVL221:
 1935              	.L252:
 1936              	.LBB91:
 1937              	.LBB92:
 1938              	.LBB93:
 1939 0049 31D2     		xorl	%edx, %edx
 1940 004b B9000000 		movl	$.LC29, %ecx
 1940      00
 1941 0050 BE400000 		movl	$64, %esi
 1941      00
 1942 0055 4C89D7   		movq	%r10, %rdi
 1943 0058 E8000000 		call	png_safecat.part.2
 1943      00
 1944              	.LVL222:
 1945              	.LBE93:
 1946              	.LBE92:
 1947              	.LBB94:
 1948              	.LBB95:
 115:fltk-1.3.4-1/png/pngerror.c ****    {
 1949              		.loc 1 115 0
 1950 005d 4883F83F 		cmpq	$63, %rax
 1951 0061 7713     		ja	.L251
 1952 0063 4C89D9   		movq	%r11, %rcx
 1953 0066 4889C2   		movq	%rax, %rdx
 1954 0069 BE400000 		movl	$64, %esi
 1954      00
 1955 006e 4C89D7   		movq	%r10, %rdi
 1956 0071 E8000000 		call	png_safecat.part.2
 1956      00
 1957              	.LVL223:
 1958              	.L251:
 1959              	.LBE95:
 1960              	.LBE94:
 1961              	.LBE91:
 905:fltk-1.3.4-1/png/pngerror.c **** 
 906:fltk-1.3.4-1/png/pngerror.c ****       /* Missing longjmp buffer, the following is to help debugging: */
 907:fltk-1.3.4-1/png/pngerror.c ****       {
 908:fltk-1.3.4-1/png/pngerror.c ****          size_t pos = png_safecat(image->message, (sizeof image->message), 0,
 909:fltk-1.3.4-1/png/pngerror.c ****             "bad longjmp: ");
 910:fltk-1.3.4-1/png/pngerror.c ****          png_safecat(image->message, (sizeof image->message), pos,
 911:fltk-1.3.4-1/png/pngerror.c ****              error_message);
 912:fltk-1.3.4-1/png/pngerror.c ****       }
 913:fltk-1.3.4-1/png/pngerror.c ****    }
 914:fltk-1.3.4-1/png/pngerror.c **** 
 915:fltk-1.3.4-1/png/pngerror.c ****    /* Here on an internal programming error. */
 916:fltk-1.3.4-1/png/pngerror.c ****    abort();
 1962              		.loc 1 916 0
 1963 0076 E8000000 		call	abort
 1963      00
 1964              	.LVL224:
 1965              		.cfi_endproc
 1966              	.LFE80:
 1968              		.section	.text.unlikely.png_safe_error
 1969              	.LCOLDE30:
 1970              		.section	.text.png_safe_error
 1971              	.LHOTE30:
 1972              		.section	.text.unlikely.png_safe_warning,"ax",@progbits
 1973              	.LCOLDB31:
 1974              		.section	.text.png_safe_warning,"ax",@progbits
 1975              	.LHOTB31:
 1976              		.p2align 4,,15
 1977              		.globl	png_safe_warning
 1979              	png_safe_warning:
 1980              	.LFB81:
 917:fltk-1.3.4-1/png/pngerror.c **** }
 918:fltk-1.3.4-1/png/pngerror.c **** 
 919:fltk-1.3.4-1/png/pngerror.c **** #ifdef PNG_WARNINGS_SUPPORTED
 920:fltk-1.3.4-1/png/pngerror.c **** void /* PRIVATE */ PNGCBAPI
 921:fltk-1.3.4-1/png/pngerror.c **** png_safe_warning(png_structp png_nonconst_ptr, png_const_charp warning_message)
 922:fltk-1.3.4-1/png/pngerror.c **** {
 1981              		.loc 1 922 0
 1982              		.cfi_startproc
 1983              	.LVL225:
 923:fltk-1.3.4-1/png/pngerror.c ****    const png_const_structrp png_ptr = png_nonconst_ptr;
 924:fltk-1.3.4-1/png/pngerror.c ****    png_imagep image = png_voidcast(png_imagep, png_ptr->error_ptr);
 1984              		.loc 1 924 0
 1985 0000 4C8B8FF0 		movq	240(%rdi), %r9
 1985      000000
 1986              	.LVL226:
 925:fltk-1.3.4-1/png/pngerror.c **** 
 926:fltk-1.3.4-1/png/pngerror.c ****    /* A warning is only logged if there is no prior warning or error. */
 927:fltk-1.3.4-1/png/pngerror.c ****    if (image->warning_or_error == 0)
 1987              		.loc 1 927 0
 1988 0007 418B4120 		movl	32(%r9), %eax
 1989 000b 85C0     		testl	%eax, %eax
 1990 000d 7518     		jne	.L261
 928:fltk-1.3.4-1/png/pngerror.c ****    {
 929:fltk-1.3.4-1/png/pngerror.c ****       png_safecat(image->message, (sizeof image->message), 0, warning_message);
 1991              		.loc 1 929 0
 1992 000f 498D7924 		leaq	36(%r9), %rdi
 1993              	.LVL227:
 1994 0013 4889F1   		movq	%rsi, %rcx
 1995              	.LVL228:
 1996              	.LBB96:
 1997              	.LBB97:
 1998 0016 31D2     		xorl	%edx, %edx
 1999 0018 BE400000 		movl	$64, %esi
 1999      00
 2000              	.LVL229:
 2001 001d E8000000 		call	png_safecat.part.2
 2001      00
 2002              	.LVL230:
 2003              	.LBE97:
 2004              	.LBE96:
 930:fltk-1.3.4-1/png/pngerror.c ****       image->warning_or_error |= PNG_IMAGE_WARNING;
 2005              		.loc 1 930 0
 2006 0022 41834920 		orl	$1, 32(%r9)
 2006      01
 2007              	.L261:
 2008 0027 F3C3     		rep ret
 2009              		.cfi_endproc
 2010              	.LFE81:
 2012              		.section	.text.unlikely.png_safe_warning
 2013              	.LCOLDE31:
 2014              		.section	.text.png_safe_warning
 2015              	.LHOTE31:
 2016              		.section	.text.unlikely.png_safe_execute,"ax",@progbits
 2017              	.LCOLDB32:
 2018              		.section	.text.png_safe_execute,"ax",@progbits
 2019              	.LHOTB32:
 2020              		.p2align 4,,15
 2021              		.globl	png_safe_execute
 2023              	png_safe_execute:
 2024              	.LFB82:
 931:fltk-1.3.4-1/png/pngerror.c ****    }
 932:fltk-1.3.4-1/png/pngerror.c **** }
 933:fltk-1.3.4-1/png/pngerror.c **** #endif
 934:fltk-1.3.4-1/png/pngerror.c **** 
 935:fltk-1.3.4-1/png/pngerror.c **** int /* PRIVATE */
 936:fltk-1.3.4-1/png/pngerror.c **** png_safe_execute(png_imagep image_in, int (*function)(png_voidp), png_voidp arg)
 937:fltk-1.3.4-1/png/pngerror.c **** {
 2025              		.loc 1 937 0
 2026              		.cfi_startproc
 2027              	.LVL231:
 2028 0000 4881EC08 		subq	$264, %rsp
 2028      010000
 2029              		.cfi_def_cfa_offset 272
 2030              		.loc 1 937 0
 2031 0007 64488B04 		movq	%fs:40, %rax
 2031      25280000 
 2031      00
 2032 0010 48898424 		movq	%rax, 248(%rsp)
 2032      F8000000 
 2033 0018 31C0     		xorl	%eax, %eax
 938:fltk-1.3.4-1/png/pngerror.c ****    volatile png_imagep image = image_in;
 2034              		.loc 1 938 0
 2035 001a 48897C24 		movq	%rdi, 32(%rsp)
 2035      20
 939:fltk-1.3.4-1/png/pngerror.c ****    volatile int result;
 940:fltk-1.3.4-1/png/pngerror.c ****    volatile png_voidp saved_error_buf;
 941:fltk-1.3.4-1/png/pngerror.c ****    jmp_buf safe_jmpbuf;
 942:fltk-1.3.4-1/png/pngerror.c **** 
 943:fltk-1.3.4-1/png/pngerror.c ****    /* Safely execute function(arg) with png_error returning to this function. */
 944:fltk-1.3.4-1/png/pngerror.c ****    saved_error_buf = image->opaque->error_buf;
 2036              		.loc 1 944 0
 2037 001f 488B4424 		movq	32(%rsp), %rax
 2037      20
 945:fltk-1.3.4-1/png/pngerror.c ****    result = setjmp(safe_jmpbuf) == 0;
 2038              		.loc 1 945 0
 2039 0024 488D7C24 		leaq	48(%rsp), %rdi
 2039      30
 2040              	.LVL232:
 937:fltk-1.3.4-1/png/pngerror.c ****    volatile png_imagep image = image_in;
 2041              		.loc 1 937 0
 2042 0029 48893424 		movq	%rsi, (%rsp)
 2043 002d 48895424 		movq	%rdx, 8(%rsp)
 2043      08
 944:fltk-1.3.4-1/png/pngerror.c ****    result = setjmp(safe_jmpbuf) == 0;
 2044              		.loc 1 944 0
 2045 0032 488B00   		movq	(%rax), %rax
 2046 0035 488B4010 		movq	16(%rax), %rax
 2047 0039 48894424 		movq	%rax, 40(%rsp)
 2047      28
 2048              	.LVL233:
 2049              		.loc 1 945 0
 2050 003e E8000000 		call	_setjmp
 2050      00
 2051              	.LVL234:
 2052 0043 85C0     		testl	%eax, %eax
 2053 0045 0F94C0   		sete	%al
 2054 0048 0FB6C0   		movzbl	%al, %eax
 2055 004b 8944241C 		movl	%eax, 28(%rsp)
 946:fltk-1.3.4-1/png/pngerror.c **** 
 947:fltk-1.3.4-1/png/pngerror.c ****    if (result != 0)
 2056              		.loc 1 947 0
 2057 004f 8B44241C 		movl	28(%rsp), %eax
 2058 0053 85C0     		testl	%eax, %eax
 2059 0055 7549     		jne	.L272
 2060              	.L265:
 948:fltk-1.3.4-1/png/pngerror.c ****    {
 949:fltk-1.3.4-1/png/pngerror.c **** 
 950:fltk-1.3.4-1/png/pngerror.c ****       image->opaque->error_buf = safe_jmpbuf;
 951:fltk-1.3.4-1/png/pngerror.c ****       result = function(arg);
 952:fltk-1.3.4-1/png/pngerror.c ****    }
 953:fltk-1.3.4-1/png/pngerror.c **** 
 954:fltk-1.3.4-1/png/pngerror.c ****    image->opaque->error_buf = saved_error_buf;
 2061              		.loc 1 954 0
 2062 0057 488B4424 		movq	32(%rsp), %rax
 2062      20
 2063 005c 488B5424 		movq	40(%rsp), %rdx
 2063      28
 2064 0061 488B00   		movq	(%rax), %rax
 2065 0064 48895010 		movq	%rdx, 16(%rax)
 955:fltk-1.3.4-1/png/pngerror.c **** 
 956:fltk-1.3.4-1/png/pngerror.c ****    /* And do the cleanup prior to any failure return. */
 957:fltk-1.3.4-1/png/pngerror.c ****    if (result == 0)
 2066              		.loc 1 957 0
 2067 0068 8B44241C 		movl	28(%rsp), %eax
 2068 006c 85C0     		testl	%eax, %eax
 2069 006e 750A     		jne	.L267
 958:fltk-1.3.4-1/png/pngerror.c ****       png_image_free(image);
 2070              		.loc 1 958 0
 2071 0070 488B7C24 		movq	32(%rsp), %rdi
 2071      20
 2072 0075 E8000000 		call	png_image_free
 2072      00
 2073              	.LVL235:
 2074              	.L267:
 959:fltk-1.3.4-1/png/pngerror.c **** 
 960:fltk-1.3.4-1/png/pngerror.c ****    return result;
 2075              		.loc 1 960 0
 2076 007a 8B44241C 		movl	28(%rsp), %eax
 961:fltk-1.3.4-1/png/pngerror.c **** }
 2077              		.loc 1 961 0
 2078 007e 488B8C24 		movq	248(%rsp), %rcx
 2078      F8000000 
 2079 0086 6448330C 		xorq	%fs:40, %rcx
 2079      25280000 
 2079      00
 2080 008f 7531     		jne	.L273
 2081 0091 4881C408 		addq	$264, %rsp
 2081      010000
 2082              		.cfi_remember_state
 2083              		.cfi_def_cfa_offset 8
 2084              	.LVL236:
 2085 0098 C3       		ret
 2086              	.LVL237:
 2087 0099 0F1F8000 		.p2align 4,,10
 2087      000000
 2088              		.p2align 3
 2089              	.L272:
 2090              		.cfi_restore_state
 950:fltk-1.3.4-1/png/pngerror.c ****       result = function(arg);
 2091              		.loc 1 950 0
 2092 00a0 488B4424 		movq	32(%rsp), %rax
 2092      20
 2093 00a5 488D5424 		leaq	48(%rsp), %rdx
 2093      30
 951:fltk-1.3.4-1/png/pngerror.c ****    }
 2094              		.loc 1 951 0
 2095 00aa 488B7C24 		movq	8(%rsp), %rdi
 2095      08
 950:fltk-1.3.4-1/png/pngerror.c ****       result = function(arg);
 2096              		.loc 1 950 0
 2097 00af 488B00   		movq	(%rax), %rax
 2098 00b2 48895010 		movq	%rdx, 16(%rax)
 951:fltk-1.3.4-1/png/pngerror.c ****    }
 2099              		.loc 1 951 0
 2100 00b6 488B0424 		movq	(%rsp), %rax
 2101 00ba FFD0     		call	*%rax
 2102              	.LVL238:
 2103 00bc 8944241C 		movl	%eax, 28(%rsp)
 2104 00c0 EB95     		jmp	.L265
 2105              	.L273:
 2106              		.loc 1 961 0
 2107 00c2 E8000000 		call	__stack_chk_fail
 2107      00
 2108              	.LVL239:
 2109              		.cfi_endproc
 2110              	.LFE82:
 2112              		.section	.text.unlikely.png_safe_execute
 2113              	.LCOLDE32:
 2114              		.section	.text.png_safe_execute
 2115              	.LHOTE32:
 2116              		.section	.rodata.valid_parameters.6800,"a",@progbits
 2117              		.align 8
 2120              	valid_parameters.6800:
 2121 0000 31323334 		.string	"123456789"
 2121      35363738 
 2121      3900
 2122              		.section	.rodata.digits.6752,"a",@progbits
 2123              		.align 16
 2126              	digits.6752:
 2127 0000 30313233 		.string	"0123456789ABCDEF"
 2127      34353637 
 2127      38394142 
 2127      43444546 
 2127      00
 2128              		.section	.rodata.png_digit,"a",@progbits
 2129              		.align 16
 2132              	png_digit:
 2133 0000 30       		.byte	48
 2134 0001 31       		.byte	49
 2135 0002 32       		.byte	50
 2136 0003 33       		.byte	51
 2137 0004 34       		.byte	52
 2138 0005 35       		.byte	53
 2139 0006 36       		.byte	54
 2140 0007 37       		.byte	55
 2141 0008 38       		.byte	56
 2142 0009 39       		.byte	57
 2143 000a 41       		.byte	65
 2144 000b 42       		.byte	66
 2145 000c 43       		.byte	67
 2146 000d 44       		.byte	68
 2147 000e 45       		.byte	69
 2148 000f 46       		.byte	70
 2149              		.text
 2150              	.Letext0:
 2151              		.section	.text.unlikely.png_format_buffer.isra.0
 2152              	.Letext_cold0:
 2153              		.file 4 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 2154              		.file 5 "/usr/include/x86_64-linux-gnu/bits/types.h"
 2155              		.file 6 "/usr/include/stdio.h"
 2156              		.file 7 "/usr/include/libio.h"
 2157              		.file 8 "/usr/include/x86_64-linux-gnu/bits/setjmp.h"
 2158              		.file 9 "/usr/include/x86_64-linux-gnu/bits/sigset.h"
 2159              		.file 10 "/usr/include/setjmp.h"
 2160              		.file 11 "fltk-1.3.4-1/png/pngconf.h"
 2161              		.file 12 "fltk-1.3.4-1/png/png.h"
 2162              		.file 13 "fltk-1.3.4-1/png/pngstruct.h"
 2163              		.file 14 "fltk-1.3.4-1/png/pnginfo.h"
 2164              		.file 15 "fltk-1.3.4-1/png/pngpriv.h"
 2165              		.file 16 "/usr/include/x86_64-linux-gnu/zconf.h"
 2166              		.file 17 "/usr/include/zlib.h"
 2167              		.file 18 "/usr/include/stdlib.h"
 2168              		.file 19 "<built-in>"
 2169              		.file 20 "/usr/include/x86_64-linux-gnu/bits/setjmp2.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 pngerror.c
     /tmp/ccLu5F2D.s:13     .text.png_format_buffer.isra.0:0000000000000000 png_format_buffer.isra.0
     /tmp/ccLu5F2D.s:2132   .rodata.png_digit:0000000000000000 png_digit
     /tmp/ccLu5F2D.s:152    .text.png_safecat.part.2:0000000000000000 png_safecat.part.2
     /tmp/ccLu5F2D.s:218    .text.png_warning_parameter.part.3:0000000000000000 png_warning_parameter.part.3
     /tmp/ccLu5F2D.s:260    .text.png_safecat:0000000000000000 png_safecat
     /tmp/ccLu5F2D.s:292    .text.png_format_number:0000000000000000 png_format_number
     /tmp/ccLu5F2D.s:2126   .rodata.digits.6752:0000000000000000 digits.6752
     /tmp/ccLu5F2D.s:551    .text.png_warning:0000000000000000 png_warning
     /tmp/ccLu5F2D.s:659    .text.png_warning_parameter:0000000000000000 png_warning_parameter
     /tmp/ccLu5F2D.s:688    .text.png_warning_parameter_unsigned:0000000000000000 png_warning_parameter_unsigned
     /tmp/ccLu5F2D.s:762    .text.png_warning_parameter_signed:0000000000000000 png_warning_parameter_signed
     /tmp/ccLu5F2D.s:866    .text.png_formatted_warning:0000000000000000 png_formatted_warning
     /tmp/ccLu5F2D.s:2120   .rodata.valid_parameters.6800:0000000000000000 valid_parameters.6800
     /tmp/ccLu5F2D.s:1038   .text.png_chunk_warning:0000000000000000 png_chunk_warning
     /tmp/ccLu5F2D.s:1104   .text.png_free_jmpbuf:0000000000000000 png_free_jmpbuf
     /tmp/ccLu5F2D.s:1208   .text.png_longjmp:0000000000000000 png_longjmp
     /tmp/ccLu5F2D.s:1254   .text.png_error:0000000000000000 png_error
     /tmp/ccLu5F2D.s:1332   .text.png_app_warning:0000000000000000 png_app_warning
     /tmp/ccLu5F2D.s:1364   .text.png_app_error:0000000000000000 png_app_error
     /tmp/ccLu5F2D.s:1396   .text.png_chunk_error:0000000000000000 png_chunk_error
     /tmp/ccLu5F2D.s:1444   .text.png_chunk_benign_error:0000000000000000 png_chunk_benign_error
     /tmp/ccLu5F2D.s:1476   .text.png_chunk_report:0000000000000000 png_chunk_report
     /tmp/ccLu5F2D.s:1525   .text.png_benign_error:0000000000000000 png_benign_error
     /tmp/ccLu5F2D.s:1588   .text.png_fixed_error:0000000000000000 png_fixed_error
     /tmp/ccLu5F2D.s:1668   .text.png_set_longjmp_fn:0000000000000000 png_set_longjmp_fn
     /tmp/ccLu5F2D.s:1826   .text.png_set_error_fn:0000000000000000 png_set_error_fn
     /tmp/ccLu5F2D.s:1856   .text.png_get_error_ptr:0000000000000000 png_get_error_ptr
     /tmp/ccLu5F2D.s:1891   .text.png_safe_error:0000000000000000 png_safe_error
     /tmp/ccLu5F2D.s:1979   .text.png_safe_warning:0000000000000000 png_safe_warning
     /tmp/ccLu5F2D.s:2023   .text.png_safe_execute:0000000000000000 png_safe_execute
                           .group:0000000000000000 wm4.0.cf9695abff4f49bdfe00dc4091904acd
                           .group:0000000000000000 wm4.stdcpredef.h.19.bf2bf6c5fb087dfb5ef2d2297c2795de
                           .group:0000000000000000 wm4.pngpriv.h.26.ca3d1719773cd86007410b516123e125
                           .group:0000000000000000 wm4.features.h.19.22780be97c2f806ec599b8b99aa89f7d
                           .group:0000000000000000 wm4.cdefs.h.19.56613e71f285ebad825b69b151170a81
                           .group:0000000000000000 wm4.wordsize.h.4.256e8fdbd37801980286acdbc40d0280
                           .group:0000000000000000 wm4.cdefs.h.432.619afd0aac7c4b439843706c1b28ddea
                           .group:0000000000000000 wm4.stubs64.h.10.918ceb5fa58268542bf143e4c1efbcf3
                           .group:0000000000000000 wm4.stdlib.h.27.59e2586c75bdbcb991b248ad7257b993
                           .group:0000000000000000 wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1
                           .group:0000000000000000 wm4.stdlib.h.37.e081b308f911db94d3185af615f2b2e2
                           .group:0000000000000000 wm4.string.h.23.8394011d5995a16f15d67d04e84a1d69
                           .group:0000000000000000 wm4.stddef.h.238.04cc7214bceba497b20d15c10fd97511
                           .group:0000000000000000 wm4.string.h.24.1b0dc67418e7128d207285861439c2f8
                           .group:0000000000000000 wm4.endian.h.19.ff00c9c0f5e9f9a9719c5de76ace57b4
                           .group:0000000000000000 wm4.endian.h.41.27d650ce666b76881e2a2a218ea61984
                           .group:0000000000000000 wm4.types.h.89.468e2451361e3b92f048f6cad51690ff
                           .group:0000000000000000 wm4.typesizes.h.24.40eb69a6270178f15d1bf3d7b6635a8b
                           .group:0000000000000000 wm4.string2.h.55.e4a4cfd7781cc64a4341475e67436ab1
                           .group:0000000000000000 wm4.string3.h.31.2b75bd65145c50aeedb61673ce0d3293
                           .group:0000000000000000 wm4.pnglibconf.h.15.30e2eea90e566ac06da4f4de487193d7
                           .group:0000000000000000 wm4.pngpriv.h.130.f65d93453b5b5837849611ffe82d627a
                           .group:0000000000000000 wm4.png.h.412.12a95b2193a7d0bc2282b72c70a28ce1
                           .group:0000000000000000 wm4.limits.h.23.f0fd92c175c1576df467c4d5fe2b091a
                           .group:0000000000000000 wm4.posix1_lim.h.25.28c8eb2d22697e7711efefdec5344a02
                           .group:0000000000000000 wm4.local_lim.h.25.97ee4129efb08ad296101237bcd3401b
                           .group:0000000000000000 wm4.limits.h.2.9ff59823e8adcf4502d980ef41362326
                           .group:0000000000000000 wm4.local_lim.h.42.9dc3935e0e3b94e23cda247e4e39bd8b
                           .group:0000000000000000 wm4.limits.h.60.eb7066f861c8b8edc7a0a399744b0335
                           .group:0000000000000000 wm4.stddef.h.39.d5a83c17f38162a5dd6f834eaf38f8ef
                           .group:0000000000000000 wm4.stdio.h.26.4719156f1aea2bb9662fd6c582dc9a4c
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:0000000000000000 wm4.stdio.h.36.2dd12c1fd035242ad5cfd0152a01be5a
                           .group:0000000000000000 wm4._G_config.h.5.b0f37d9e474454cf6e459063458db32f
                           .group:0000000000000000 wm4.wchar.h.80.eea3eba2d2a17aace9470a8e0d8218dc
                           .group:0000000000000000 wm4._G_config.h.46.5187c97b14fd664662cb32e6b94fc49e
                           .group:0000000000000000 wm4.libio.h.33.a775b9ecae273f33bc59931e9891e4ca
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.libio.h.51.dab170798ec1df48c625aea7c30e1b63
                           .group:0000000000000000 wm4.stdio.h.120.80cbf0ec1718a5b27e6428218e29c72d
                           .group:0000000000000000 wm4.stdio_lim.h.23.f8541119d1bcf759d7de9531671fd758
                           .group:0000000000000000 wm4.stdio.h.172.df21df34a7396d7da2e08f9b617d582f
                           .group:0000000000000000 wm4.stdio.h.26.e50fc3808d57d965ceefc6f6dd102eb7
                           .group:0000000000000000 wm4.sigset.h.20.f36413b6d2364ad847d3db53fb03e683
                           .group:0000000000000000 wm4.setjmp.h.67.51aa194c3c89a841663c00cb93fd90ff
                           .group:0000000000000000 wm4.time.h.26.6a3cabd4f228e226db6723a3b0c81ba6
                           .group:0000000000000000 wm4.time.h.40.99bfb90272c7e82357ef3c2f5c6fefc8
                           .group:0000000000000000 wm4.time.h.53.f8af6908497bac0ca16faea86fb8cd87
                           .group:0000000000000000 wm4.pngconf.h.86.6636b2584cb7be1618479e118d71e58c
                           .group:0000000000000000 wm4.png.h.506.fa53b6434c0b20c8e63094b04d7940c5
                           .group:0000000000000000 wm4.pngpriv.h.298.dc2c896ce0eddc5cfadee24e76e3c417
                           .group:0000000000000000 wm4.float.h.29.1cf88a0527b6b1225d49fbee2b32acb7
                           .group:0000000000000000 wm4.math.h.26.671af5ac9cd425a35e0730f7b6d7cde2
                           .group:0000000000000000 wm4.libmsimddeclstubs.h.34.75644856b74ba3d815155fe5fe7ecc56
                           .group:0000000000000000 wm4.mathdef.h.23.67c0aa4a204f1f427459dfc651aba565
                           .group:0000000000000000 wm4.math.h.55.cf380f99c57d42476a5252f30065036a
                           .group:0000000000000000 wm4.math.h.84.742292806c6be54f49dc607928a827f7
                           .group:0000000000000000 wm4.math.h.105.59ff0f83ebf6a04e70e145cef2d1185e
                           .group:0000000000000000 wm4.math.h.152.48a142bc1575e748473ff86330dee044
                           .group:0000000000000000 wm4.math.h.30.7cada3efe024725df2da4c705b6566be
                           .group:0000000000000000 wm4.pngpriv.h.481.f98e7c29eaaa759546a3f9808bc25c74
                           .group:0000000000000000 wm4.pngstruct.h.22.7b9573417641055ab8f42438aa8afadf
                           .group:0000000000000000 wm4.zconf.h.9.bbc7b5783b51507f7721a5620139b4ee
                           .group:0000000000000000 wm4.zconf.h.397.69c03305677a9a6792fe2a94f7c9f69b
                           .group:0000000000000000 wm4.types.h.23.92678977f3921b8dce508274ac68f78d
                           .group:0000000000000000 wm4.types.h.187.12f6c32afb936b45a5f241219964ce93
                           .group:0000000000000000 wm4.stdarg.h.31.48e922dd0aaedfb616aafd8a7b7a4949
                           .group:0000000000000000 wm4.unistd.h.23.c85a58a698f53edadcf64287ab24fecb
                           .group:0000000000000000 wm4.posix_opt.h.20.9a8aece77957db1725bd2b9521e5f9c5
                           .group:0000000000000000 wm4.unistd.h.213.4c582e35260d661b081322974b7c1e74
                           .group:0000000000000000 wm4.unistd.h.284.7e168706bc8bd978e02fd1da439d9bc3
                           .group:0000000000000000 wm4.confname.h.27.6b00117a32f457cc72e5ac810a9adade
                           .group:0000000000000000 wm4.zconf.h.457.505c3613686dd75e492569d7a56a6eb0
                           .group:0000000000000000 wm4.zlib.h.40.5a15529ab8e285cee4b0ddab32502c27
                           .group:0000000000000000 wm4.pngstruct.h.44.bc957704556ff8ddcb697678a008ffae
                           .group:0000000000000000 wm4.pngpriv.h.853.4585af3e74cfb155d8486c5333b94adf
                           .group:0000000000000000 wm4.pngdebug.h.36.e9c57d5f35e3128225fb629498ec6fc8

UNDEFINED SYMBOLS
stderr
__fprintf_chk
fputc
__stack_chk_fail
_setjmp
__longjmp_chk
png_free
abort
png_malloc_warn
png_image_free
