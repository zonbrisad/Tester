   1              		.file	"pngset.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.rodata.str1.8,"aMS",@progbits,1
   5              		.align 8
   6              	.LC0:
   7 0000 706E675F 		.string	"png_set_unknown_chunks now expects a valid location"
   7      7365745F 
   7      756E6B6E 
   7      6F776E5F 
   7      6368756E 
   8 0034 00000000 		.align 8
   9              	.LC1:
  10 0038 696E7661 		.string	"invalid location in png_set_unknown_chunks"
  10      6C696420 
  10      6C6F6361 
  10      74696F6E 
  10      20696E20 
  11              		.section	.text.unlikely.check_location,"ax",@progbits
  12              	.LCOLDB2:
  13              		.section	.text.check_location,"ax",@progbits
  14              	.LHOTB2:
  15              		.p2align 4,,15
  16              		.section	.text.unlikely.check_location
  17              	.Ltext_cold0:
  18              		.section	.text.check_location
  20              	check_location:
  21              	.LFB81:
  22              		.file 1 "fltk-1.3.4-1/png/pngset.c"
   1:fltk-1.3.4-1/png/pngset.c **** 
   2:fltk-1.3.4-1/png/pngset.c **** /* pngset.c - storage of image information into info struct
   3:fltk-1.3.4-1/png/pngset.c ****  *
   4:fltk-1.3.4-1/png/pngset.c ****  * Last changed in libpng 1.6.15 [November 20, 2014]
   5:fltk-1.3.4-1/png/pngset.c ****  * Copyright (c) 1998-2014 Glenn Randers-Pehrson
   6:fltk-1.3.4-1/png/pngset.c ****  * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
   7:fltk-1.3.4-1/png/pngset.c ****  * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
   8:fltk-1.3.4-1/png/pngset.c ****  *
   9:fltk-1.3.4-1/png/pngset.c ****  * This code is released under the libpng license.
  10:fltk-1.3.4-1/png/pngset.c ****  * For conditions of distribution and use, see the disclaimer
  11:fltk-1.3.4-1/png/pngset.c ****  * and license in png.h
  12:fltk-1.3.4-1/png/pngset.c ****  *
  13:fltk-1.3.4-1/png/pngset.c ****  * The functions here are used during reads to store data from the file
  14:fltk-1.3.4-1/png/pngset.c ****  * into the info struct, and during writes to store application data
  15:fltk-1.3.4-1/png/pngset.c ****  * into the info struct for writing into the file.  This abstracts the
  16:fltk-1.3.4-1/png/pngset.c ****  * info struct and allows us to change the structure in the future.
  17:fltk-1.3.4-1/png/pngset.c ****  */
  18:fltk-1.3.4-1/png/pngset.c **** 
  19:fltk-1.3.4-1/png/pngset.c **** #include "pngpriv.h"
  20:fltk-1.3.4-1/png/pngset.c **** 
  21:fltk-1.3.4-1/png/pngset.c **** #if defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED)
  22:fltk-1.3.4-1/png/pngset.c **** 
  23:fltk-1.3.4-1/png/pngset.c **** #ifdef PNG_bKGD_SUPPORTED
  24:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
  25:fltk-1.3.4-1/png/pngset.c **** png_set_bKGD(png_const_structrp png_ptr, png_inforp info_ptr,
  26:fltk-1.3.4-1/png/pngset.c ****     png_const_color_16p background)
  27:fltk-1.3.4-1/png/pngset.c **** {
  28:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "bKGD");
  29:fltk-1.3.4-1/png/pngset.c **** 
  30:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr == NULL || info_ptr == NULL || background == NULL)
  31:fltk-1.3.4-1/png/pngset.c ****       return;
  32:fltk-1.3.4-1/png/pngset.c **** 
  33:fltk-1.3.4-1/png/pngset.c ****    info_ptr->background = *background;
  34:fltk-1.3.4-1/png/pngset.c ****    info_ptr->valid |= PNG_INFO_bKGD;
  35:fltk-1.3.4-1/png/pngset.c **** }
  36:fltk-1.3.4-1/png/pngset.c **** #endif
  37:fltk-1.3.4-1/png/pngset.c **** 
  38:fltk-1.3.4-1/png/pngset.c **** #ifdef PNG_cHRM_SUPPORTED
  39:fltk-1.3.4-1/png/pngset.c **** void PNGFAPI
  40:fltk-1.3.4-1/png/pngset.c **** png_set_cHRM_fixed(png_const_structrp png_ptr, png_inforp info_ptr,
  41:fltk-1.3.4-1/png/pngset.c ****     png_fixed_point white_x, png_fixed_point white_y, png_fixed_point red_x,
  42:fltk-1.3.4-1/png/pngset.c ****     png_fixed_point red_y, png_fixed_point green_x, png_fixed_point green_y,
  43:fltk-1.3.4-1/png/pngset.c ****     png_fixed_point blue_x, png_fixed_point blue_y)
  44:fltk-1.3.4-1/png/pngset.c **** {
  45:fltk-1.3.4-1/png/pngset.c ****    png_xy xy;
  46:fltk-1.3.4-1/png/pngset.c **** 
  47:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "cHRM fixed");
  48:fltk-1.3.4-1/png/pngset.c **** 
  49:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr == NULL || info_ptr == NULL)
  50:fltk-1.3.4-1/png/pngset.c ****       return;
  51:fltk-1.3.4-1/png/pngset.c **** 
  52:fltk-1.3.4-1/png/pngset.c ****    xy.redx = red_x;
  53:fltk-1.3.4-1/png/pngset.c ****    xy.redy = red_y;
  54:fltk-1.3.4-1/png/pngset.c ****    xy.greenx = green_x;
  55:fltk-1.3.4-1/png/pngset.c ****    xy.greeny = green_y;
  56:fltk-1.3.4-1/png/pngset.c ****    xy.bluex = blue_x;
  57:fltk-1.3.4-1/png/pngset.c ****    xy.bluey = blue_y;
  58:fltk-1.3.4-1/png/pngset.c ****    xy.whitex = white_x;
  59:fltk-1.3.4-1/png/pngset.c ****    xy.whitey = white_y;
  60:fltk-1.3.4-1/png/pngset.c **** 
  61:fltk-1.3.4-1/png/pngset.c ****    if (png_colorspace_set_chromaticities(png_ptr, &info_ptr->colorspace, &xy,
  62:fltk-1.3.4-1/png/pngset.c ****        2/* override with app values*/) != 0)
  63:fltk-1.3.4-1/png/pngset.c ****       info_ptr->colorspace.flags |= PNG_COLORSPACE_FROM_cHRM;
  64:fltk-1.3.4-1/png/pngset.c **** 
  65:fltk-1.3.4-1/png/pngset.c ****    png_colorspace_sync_info(png_ptr, info_ptr);
  66:fltk-1.3.4-1/png/pngset.c **** }
  67:fltk-1.3.4-1/png/pngset.c **** 
  68:fltk-1.3.4-1/png/pngset.c **** void PNGFAPI
  69:fltk-1.3.4-1/png/pngset.c **** png_set_cHRM_XYZ_fixed(png_const_structrp png_ptr, png_inforp info_ptr,
  70:fltk-1.3.4-1/png/pngset.c ****     png_fixed_point int_red_X, png_fixed_point int_red_Y,
  71:fltk-1.3.4-1/png/pngset.c ****     png_fixed_point int_red_Z, png_fixed_point int_green_X,
  72:fltk-1.3.4-1/png/pngset.c ****     png_fixed_point int_green_Y, png_fixed_point int_green_Z,
  73:fltk-1.3.4-1/png/pngset.c ****     png_fixed_point int_blue_X, png_fixed_point int_blue_Y,
  74:fltk-1.3.4-1/png/pngset.c ****     png_fixed_point int_blue_Z)
  75:fltk-1.3.4-1/png/pngset.c **** {
  76:fltk-1.3.4-1/png/pngset.c ****    png_XYZ XYZ;
  77:fltk-1.3.4-1/png/pngset.c **** 
  78:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "cHRM XYZ fixed");
  79:fltk-1.3.4-1/png/pngset.c **** 
  80:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr == NULL || info_ptr == NULL)
  81:fltk-1.3.4-1/png/pngset.c ****       return;
  82:fltk-1.3.4-1/png/pngset.c **** 
  83:fltk-1.3.4-1/png/pngset.c ****    XYZ.red_X = int_red_X;
  84:fltk-1.3.4-1/png/pngset.c ****    XYZ.red_Y = int_red_Y;
  85:fltk-1.3.4-1/png/pngset.c ****    XYZ.red_Z = int_red_Z;
  86:fltk-1.3.4-1/png/pngset.c ****    XYZ.green_X = int_green_X;
  87:fltk-1.3.4-1/png/pngset.c ****    XYZ.green_Y = int_green_Y;
  88:fltk-1.3.4-1/png/pngset.c ****    XYZ.green_Z = int_green_Z;
  89:fltk-1.3.4-1/png/pngset.c ****    XYZ.blue_X = int_blue_X;
  90:fltk-1.3.4-1/png/pngset.c ****    XYZ.blue_Y = int_blue_Y;
  91:fltk-1.3.4-1/png/pngset.c ****    XYZ.blue_Z = int_blue_Z;
  92:fltk-1.3.4-1/png/pngset.c **** 
  93:fltk-1.3.4-1/png/pngset.c ****    if (png_colorspace_set_endpoints(png_ptr, &info_ptr->colorspace,
  94:fltk-1.3.4-1/png/pngset.c ****        &XYZ, 2) != 0)
  95:fltk-1.3.4-1/png/pngset.c ****       info_ptr->colorspace.flags |= PNG_COLORSPACE_FROM_cHRM;
  96:fltk-1.3.4-1/png/pngset.c **** 
  97:fltk-1.3.4-1/png/pngset.c ****    png_colorspace_sync_info(png_ptr, info_ptr);
  98:fltk-1.3.4-1/png/pngset.c **** }
  99:fltk-1.3.4-1/png/pngset.c **** 
 100:fltk-1.3.4-1/png/pngset.c **** #  ifdef PNG_FLOATING_POINT_SUPPORTED
 101:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
 102:fltk-1.3.4-1/png/pngset.c **** png_set_cHRM(png_const_structrp png_ptr, png_inforp info_ptr,
 103:fltk-1.3.4-1/png/pngset.c ****     double white_x, double white_y, double red_x, double red_y,
 104:fltk-1.3.4-1/png/pngset.c ****     double green_x, double green_y, double blue_x, double blue_y)
 105:fltk-1.3.4-1/png/pngset.c **** {
 106:fltk-1.3.4-1/png/pngset.c ****    png_set_cHRM_fixed(png_ptr, info_ptr,
 107:fltk-1.3.4-1/png/pngset.c ****       png_fixed(png_ptr, white_x, "cHRM White X"),
 108:fltk-1.3.4-1/png/pngset.c ****       png_fixed(png_ptr, white_y, "cHRM White Y"),
 109:fltk-1.3.4-1/png/pngset.c ****       png_fixed(png_ptr, red_x, "cHRM Red X"),
 110:fltk-1.3.4-1/png/pngset.c ****       png_fixed(png_ptr, red_y, "cHRM Red Y"),
 111:fltk-1.3.4-1/png/pngset.c ****       png_fixed(png_ptr, green_x, "cHRM Green X"),
 112:fltk-1.3.4-1/png/pngset.c ****       png_fixed(png_ptr, green_y, "cHRM Green Y"),
 113:fltk-1.3.4-1/png/pngset.c ****       png_fixed(png_ptr, blue_x, "cHRM Blue X"),
 114:fltk-1.3.4-1/png/pngset.c ****       png_fixed(png_ptr, blue_y, "cHRM Blue Y"));
 115:fltk-1.3.4-1/png/pngset.c **** }
 116:fltk-1.3.4-1/png/pngset.c **** 
 117:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
 118:fltk-1.3.4-1/png/pngset.c **** png_set_cHRM_XYZ(png_const_structrp png_ptr, png_inforp info_ptr, double red_X,
 119:fltk-1.3.4-1/png/pngset.c ****     double red_Y, double red_Z, double green_X, double green_Y, double green_Z,
 120:fltk-1.3.4-1/png/pngset.c ****     double blue_X, double blue_Y, double blue_Z)
 121:fltk-1.3.4-1/png/pngset.c **** {
 122:fltk-1.3.4-1/png/pngset.c ****    png_set_cHRM_XYZ_fixed(png_ptr, info_ptr,
 123:fltk-1.3.4-1/png/pngset.c ****       png_fixed(png_ptr, red_X, "cHRM Red X"),
 124:fltk-1.3.4-1/png/pngset.c ****       png_fixed(png_ptr, red_Y, "cHRM Red Y"),
 125:fltk-1.3.4-1/png/pngset.c ****       png_fixed(png_ptr, red_Z, "cHRM Red Z"),
 126:fltk-1.3.4-1/png/pngset.c ****       png_fixed(png_ptr, green_X, "cHRM Red X"),
 127:fltk-1.3.4-1/png/pngset.c ****       png_fixed(png_ptr, green_Y, "cHRM Red Y"),
 128:fltk-1.3.4-1/png/pngset.c ****       png_fixed(png_ptr, green_Z, "cHRM Red Z"),
 129:fltk-1.3.4-1/png/pngset.c ****       png_fixed(png_ptr, blue_X, "cHRM Red X"),
 130:fltk-1.3.4-1/png/pngset.c ****       png_fixed(png_ptr, blue_Y, "cHRM Red Y"),
 131:fltk-1.3.4-1/png/pngset.c ****       png_fixed(png_ptr, blue_Z, "cHRM Red Z"));
 132:fltk-1.3.4-1/png/pngset.c **** }
 133:fltk-1.3.4-1/png/pngset.c **** #  endif /* FLOATING_POINT */
 134:fltk-1.3.4-1/png/pngset.c **** 
 135:fltk-1.3.4-1/png/pngset.c **** #endif /* cHRM */
 136:fltk-1.3.4-1/png/pngset.c **** 
 137:fltk-1.3.4-1/png/pngset.c **** #ifdef PNG_gAMA_SUPPORTED
 138:fltk-1.3.4-1/png/pngset.c **** void PNGFAPI
 139:fltk-1.3.4-1/png/pngset.c **** png_set_gAMA_fixed(png_const_structrp png_ptr, png_inforp info_ptr,
 140:fltk-1.3.4-1/png/pngset.c ****     png_fixed_point file_gamma)
 141:fltk-1.3.4-1/png/pngset.c **** {
 142:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "gAMA");
 143:fltk-1.3.4-1/png/pngset.c **** 
 144:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr == NULL || info_ptr == NULL)
 145:fltk-1.3.4-1/png/pngset.c ****       return;
 146:fltk-1.3.4-1/png/pngset.c **** 
 147:fltk-1.3.4-1/png/pngset.c ****    png_colorspace_set_gamma(png_ptr, &info_ptr->colorspace, file_gamma);
 148:fltk-1.3.4-1/png/pngset.c ****    png_colorspace_sync_info(png_ptr, info_ptr);
 149:fltk-1.3.4-1/png/pngset.c **** }
 150:fltk-1.3.4-1/png/pngset.c **** 
 151:fltk-1.3.4-1/png/pngset.c **** #  ifdef PNG_FLOATING_POINT_SUPPORTED
 152:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
 153:fltk-1.3.4-1/png/pngset.c **** png_set_gAMA(png_const_structrp png_ptr, png_inforp info_ptr, double file_gamma)
 154:fltk-1.3.4-1/png/pngset.c **** {
 155:fltk-1.3.4-1/png/pngset.c ****    png_set_gAMA_fixed(png_ptr, info_ptr, png_fixed(png_ptr, file_gamma,
 156:fltk-1.3.4-1/png/pngset.c ****        "png_set_gAMA"));
 157:fltk-1.3.4-1/png/pngset.c **** }
 158:fltk-1.3.4-1/png/pngset.c **** #  endif
 159:fltk-1.3.4-1/png/pngset.c **** #endif
 160:fltk-1.3.4-1/png/pngset.c **** 
 161:fltk-1.3.4-1/png/pngset.c **** #ifdef PNG_hIST_SUPPORTED
 162:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
 163:fltk-1.3.4-1/png/pngset.c **** png_set_hIST(png_const_structrp png_ptr, png_inforp info_ptr,
 164:fltk-1.3.4-1/png/pngset.c ****     png_const_uint_16p hist)
 165:fltk-1.3.4-1/png/pngset.c **** {
 166:fltk-1.3.4-1/png/pngset.c ****    int i;
 167:fltk-1.3.4-1/png/pngset.c **** 
 168:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "hIST");
 169:fltk-1.3.4-1/png/pngset.c **** 
 170:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr == NULL || info_ptr == NULL)
 171:fltk-1.3.4-1/png/pngset.c ****       return;
 172:fltk-1.3.4-1/png/pngset.c **** 
 173:fltk-1.3.4-1/png/pngset.c ****    if (info_ptr->num_palette == 0 || info_ptr->num_palette
 174:fltk-1.3.4-1/png/pngset.c ****        > PNG_MAX_PALETTE_LENGTH)
 175:fltk-1.3.4-1/png/pngset.c ****    {
 176:fltk-1.3.4-1/png/pngset.c ****       png_warning(png_ptr,
 177:fltk-1.3.4-1/png/pngset.c ****           "Invalid palette size, hIST allocation skipped");
 178:fltk-1.3.4-1/png/pngset.c **** 
 179:fltk-1.3.4-1/png/pngset.c ****       return;
 180:fltk-1.3.4-1/png/pngset.c ****    }
 181:fltk-1.3.4-1/png/pngset.c **** 
 182:fltk-1.3.4-1/png/pngset.c ****    png_free_data(png_ptr, info_ptr, PNG_FREE_HIST, 0);
 183:fltk-1.3.4-1/png/pngset.c **** 
 184:fltk-1.3.4-1/png/pngset.c ****    /* Changed from info->num_palette to PNG_MAX_PALETTE_LENGTH in
 185:fltk-1.3.4-1/png/pngset.c ****     * version 1.2.1
 186:fltk-1.3.4-1/png/pngset.c ****     */
 187:fltk-1.3.4-1/png/pngset.c ****    info_ptr->hist = png_voidcast(png_uint_16p, png_malloc_warn(png_ptr,
 188:fltk-1.3.4-1/png/pngset.c ****        PNG_MAX_PALETTE_LENGTH * (sizeof (png_uint_16))));
 189:fltk-1.3.4-1/png/pngset.c **** 
 190:fltk-1.3.4-1/png/pngset.c ****    if (info_ptr->hist == NULL)
 191:fltk-1.3.4-1/png/pngset.c ****    {
 192:fltk-1.3.4-1/png/pngset.c ****       png_warning(png_ptr, "Insufficient memory for hIST chunk data");
 193:fltk-1.3.4-1/png/pngset.c ****       return;
 194:fltk-1.3.4-1/png/pngset.c ****    }
 195:fltk-1.3.4-1/png/pngset.c **** 
 196:fltk-1.3.4-1/png/pngset.c ****    info_ptr->free_me |= PNG_FREE_HIST;
 197:fltk-1.3.4-1/png/pngset.c **** 
 198:fltk-1.3.4-1/png/pngset.c ****    for (i = 0; i < info_ptr->num_palette; i++)
 199:fltk-1.3.4-1/png/pngset.c ****       info_ptr->hist[i] = hist[i];
 200:fltk-1.3.4-1/png/pngset.c **** 
 201:fltk-1.3.4-1/png/pngset.c ****    info_ptr->valid |= PNG_INFO_hIST;
 202:fltk-1.3.4-1/png/pngset.c **** }
 203:fltk-1.3.4-1/png/pngset.c **** #endif
 204:fltk-1.3.4-1/png/pngset.c **** 
 205:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
 206:fltk-1.3.4-1/png/pngset.c **** png_set_IHDR(png_const_structrp png_ptr, png_inforp info_ptr,
 207:fltk-1.3.4-1/png/pngset.c ****     png_uint_32 width, png_uint_32 height, int bit_depth,
 208:fltk-1.3.4-1/png/pngset.c ****     int color_type, int interlace_type, int compression_type,
 209:fltk-1.3.4-1/png/pngset.c ****     int filter_type)
 210:fltk-1.3.4-1/png/pngset.c **** {
 211:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "IHDR");
 212:fltk-1.3.4-1/png/pngset.c **** 
 213:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr == NULL || info_ptr == NULL)
 214:fltk-1.3.4-1/png/pngset.c ****       return;
 215:fltk-1.3.4-1/png/pngset.c **** 
 216:fltk-1.3.4-1/png/pngset.c ****    info_ptr->width = width;
 217:fltk-1.3.4-1/png/pngset.c ****    info_ptr->height = height;
 218:fltk-1.3.4-1/png/pngset.c ****    info_ptr->bit_depth = (png_byte)bit_depth;
 219:fltk-1.3.4-1/png/pngset.c ****    info_ptr->color_type = (png_byte)color_type;
 220:fltk-1.3.4-1/png/pngset.c ****    info_ptr->compression_type = (png_byte)compression_type;
 221:fltk-1.3.4-1/png/pngset.c ****    info_ptr->filter_type = (png_byte)filter_type;
 222:fltk-1.3.4-1/png/pngset.c ****    info_ptr->interlace_type = (png_byte)interlace_type;
 223:fltk-1.3.4-1/png/pngset.c **** 
 224:fltk-1.3.4-1/png/pngset.c ****    png_check_IHDR (png_ptr, info_ptr->width, info_ptr->height,
 225:fltk-1.3.4-1/png/pngset.c ****        info_ptr->bit_depth, info_ptr->color_type, info_ptr->interlace_type,
 226:fltk-1.3.4-1/png/pngset.c ****        info_ptr->compression_type, info_ptr->filter_type);
 227:fltk-1.3.4-1/png/pngset.c **** 
 228:fltk-1.3.4-1/png/pngset.c ****    if (info_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
 229:fltk-1.3.4-1/png/pngset.c ****       info_ptr->channels = 1;
 230:fltk-1.3.4-1/png/pngset.c **** 
 231:fltk-1.3.4-1/png/pngset.c ****    else if ((info_ptr->color_type & PNG_COLOR_MASK_COLOR) != 0)
 232:fltk-1.3.4-1/png/pngset.c ****       info_ptr->channels = 3;
 233:fltk-1.3.4-1/png/pngset.c **** 
 234:fltk-1.3.4-1/png/pngset.c ****    else
 235:fltk-1.3.4-1/png/pngset.c ****       info_ptr->channels = 1;
 236:fltk-1.3.4-1/png/pngset.c **** 
 237:fltk-1.3.4-1/png/pngset.c ****    if ((info_ptr->color_type & PNG_COLOR_MASK_ALPHA) != 0)
 238:fltk-1.3.4-1/png/pngset.c ****       info_ptr->channels++;
 239:fltk-1.3.4-1/png/pngset.c **** 
 240:fltk-1.3.4-1/png/pngset.c ****    info_ptr->pixel_depth = (png_byte)(info_ptr->channels * info_ptr->bit_depth);
 241:fltk-1.3.4-1/png/pngset.c **** 
 242:fltk-1.3.4-1/png/pngset.c ****    info_ptr->rowbytes = PNG_ROWBYTES(info_ptr->pixel_depth, width);
 243:fltk-1.3.4-1/png/pngset.c **** }
 244:fltk-1.3.4-1/png/pngset.c **** 
 245:fltk-1.3.4-1/png/pngset.c **** #ifdef PNG_oFFs_SUPPORTED
 246:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
 247:fltk-1.3.4-1/png/pngset.c **** png_set_oFFs(png_const_structrp png_ptr, png_inforp info_ptr,
 248:fltk-1.3.4-1/png/pngset.c ****     png_int_32 offset_x, png_int_32 offset_y, int unit_type)
 249:fltk-1.3.4-1/png/pngset.c **** {
 250:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "oFFs");
 251:fltk-1.3.4-1/png/pngset.c **** 
 252:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr == NULL || info_ptr == NULL)
 253:fltk-1.3.4-1/png/pngset.c ****       return;
 254:fltk-1.3.4-1/png/pngset.c **** 
 255:fltk-1.3.4-1/png/pngset.c ****    info_ptr->x_offset = offset_x;
 256:fltk-1.3.4-1/png/pngset.c ****    info_ptr->y_offset = offset_y;
 257:fltk-1.3.4-1/png/pngset.c ****    info_ptr->offset_unit_type = (png_byte)unit_type;
 258:fltk-1.3.4-1/png/pngset.c ****    info_ptr->valid |= PNG_INFO_oFFs;
 259:fltk-1.3.4-1/png/pngset.c **** }
 260:fltk-1.3.4-1/png/pngset.c **** #endif
 261:fltk-1.3.4-1/png/pngset.c **** 
 262:fltk-1.3.4-1/png/pngset.c **** #ifdef PNG_pCAL_SUPPORTED
 263:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
 264:fltk-1.3.4-1/png/pngset.c **** png_set_pCAL(png_const_structrp png_ptr, png_inforp info_ptr,
 265:fltk-1.3.4-1/png/pngset.c ****     png_const_charp purpose, png_int_32 X0, png_int_32 X1, int type,
 266:fltk-1.3.4-1/png/pngset.c ****     int nparams, png_const_charp units, png_charpp params)
 267:fltk-1.3.4-1/png/pngset.c **** {
 268:fltk-1.3.4-1/png/pngset.c ****    png_size_t length;
 269:fltk-1.3.4-1/png/pngset.c ****    int i;
 270:fltk-1.3.4-1/png/pngset.c **** 
 271:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "pCAL");
 272:fltk-1.3.4-1/png/pngset.c **** 
 273:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr == NULL || info_ptr == NULL || purpose == NULL || units == NULL
 274:fltk-1.3.4-1/png/pngset.c ****       || (nparams > 0 && params == NULL))
 275:fltk-1.3.4-1/png/pngset.c ****       return;
 276:fltk-1.3.4-1/png/pngset.c **** 
 277:fltk-1.3.4-1/png/pngset.c ****    length = strlen(purpose) + 1;
 278:fltk-1.3.4-1/png/pngset.c ****    png_debug1(3, "allocating purpose for info (%lu bytes)",
 279:fltk-1.3.4-1/png/pngset.c ****        (unsigned long)length);
 280:fltk-1.3.4-1/png/pngset.c **** 
 281:fltk-1.3.4-1/png/pngset.c ****    /* TODO: validate format of calibration name and unit name */
 282:fltk-1.3.4-1/png/pngset.c **** 
 283:fltk-1.3.4-1/png/pngset.c ****    /* Check that the type matches the specification. */
 284:fltk-1.3.4-1/png/pngset.c ****    if (type < 0 || type > 3)
 285:fltk-1.3.4-1/png/pngset.c ****       png_error(png_ptr, "Invalid pCAL equation type");
 286:fltk-1.3.4-1/png/pngset.c **** 
 287:fltk-1.3.4-1/png/pngset.c ****    if (nparams < 0 || nparams > 255)
 288:fltk-1.3.4-1/png/pngset.c ****       png_error(png_ptr, "Invalid pCAL parameter count");
 289:fltk-1.3.4-1/png/pngset.c **** 
 290:fltk-1.3.4-1/png/pngset.c ****    /* Validate params[nparams] */
 291:fltk-1.3.4-1/png/pngset.c ****    for (i=0; i<nparams; ++i)
 292:fltk-1.3.4-1/png/pngset.c ****    {
 293:fltk-1.3.4-1/png/pngset.c ****       if (params[i] == NULL ||
 294:fltk-1.3.4-1/png/pngset.c ****           !png_check_fp_string(params[i], strlen(params[i])))
 295:fltk-1.3.4-1/png/pngset.c ****          png_error(png_ptr, "Invalid format for pCAL parameter");
 296:fltk-1.3.4-1/png/pngset.c ****    }
 297:fltk-1.3.4-1/png/pngset.c **** 
 298:fltk-1.3.4-1/png/pngset.c ****    info_ptr->pcal_purpose = png_voidcast(png_charp,
 299:fltk-1.3.4-1/png/pngset.c ****        png_malloc_warn(png_ptr, length));
 300:fltk-1.3.4-1/png/pngset.c **** 
 301:fltk-1.3.4-1/png/pngset.c ****    if (info_ptr->pcal_purpose == NULL)
 302:fltk-1.3.4-1/png/pngset.c ****    {
 303:fltk-1.3.4-1/png/pngset.c ****       png_warning(png_ptr, "Insufficient memory for pCAL purpose");
 304:fltk-1.3.4-1/png/pngset.c ****       return;
 305:fltk-1.3.4-1/png/pngset.c ****    }
 306:fltk-1.3.4-1/png/pngset.c **** 
 307:fltk-1.3.4-1/png/pngset.c ****    memcpy(info_ptr->pcal_purpose, purpose, length);
 308:fltk-1.3.4-1/png/pngset.c **** 
 309:fltk-1.3.4-1/png/pngset.c ****    png_debug(3, "storing X0, X1, type, and nparams in info");
 310:fltk-1.3.4-1/png/pngset.c ****    info_ptr->pcal_X0 = X0;
 311:fltk-1.3.4-1/png/pngset.c ****    info_ptr->pcal_X1 = X1;
 312:fltk-1.3.4-1/png/pngset.c ****    info_ptr->pcal_type = (png_byte)type;
 313:fltk-1.3.4-1/png/pngset.c ****    info_ptr->pcal_nparams = (png_byte)nparams;
 314:fltk-1.3.4-1/png/pngset.c **** 
 315:fltk-1.3.4-1/png/pngset.c ****    length = strlen(units) + 1;
 316:fltk-1.3.4-1/png/pngset.c ****    png_debug1(3, "allocating units for info (%lu bytes)",
 317:fltk-1.3.4-1/png/pngset.c ****      (unsigned long)length);
 318:fltk-1.3.4-1/png/pngset.c **** 
 319:fltk-1.3.4-1/png/pngset.c ****    info_ptr->pcal_units = png_voidcast(png_charp,
 320:fltk-1.3.4-1/png/pngset.c ****       png_malloc_warn(png_ptr, length));
 321:fltk-1.3.4-1/png/pngset.c **** 
 322:fltk-1.3.4-1/png/pngset.c ****    if (info_ptr->pcal_units == NULL)
 323:fltk-1.3.4-1/png/pngset.c ****    {
 324:fltk-1.3.4-1/png/pngset.c ****       png_warning(png_ptr, "Insufficient memory for pCAL units");
 325:fltk-1.3.4-1/png/pngset.c ****       return;
 326:fltk-1.3.4-1/png/pngset.c ****    }
 327:fltk-1.3.4-1/png/pngset.c **** 
 328:fltk-1.3.4-1/png/pngset.c ****    memcpy(info_ptr->pcal_units, units, length);
 329:fltk-1.3.4-1/png/pngset.c **** 
 330:fltk-1.3.4-1/png/pngset.c ****    info_ptr->pcal_params = png_voidcast(png_charpp, png_malloc_warn(png_ptr,
 331:fltk-1.3.4-1/png/pngset.c ****        (png_size_t)((nparams + 1) * (sizeof (png_charp)))));
 332:fltk-1.3.4-1/png/pngset.c **** 
 333:fltk-1.3.4-1/png/pngset.c ****    if (info_ptr->pcal_params == NULL)
 334:fltk-1.3.4-1/png/pngset.c ****    {
 335:fltk-1.3.4-1/png/pngset.c ****       png_warning(png_ptr, "Insufficient memory for pCAL params");
 336:fltk-1.3.4-1/png/pngset.c ****       return;
 337:fltk-1.3.4-1/png/pngset.c ****    }
 338:fltk-1.3.4-1/png/pngset.c **** 
 339:fltk-1.3.4-1/png/pngset.c ****    memset(info_ptr->pcal_params, 0, (nparams + 1) * (sizeof (png_charp)));
 340:fltk-1.3.4-1/png/pngset.c **** 
 341:fltk-1.3.4-1/png/pngset.c ****    for (i = 0; i < nparams; i++)
 342:fltk-1.3.4-1/png/pngset.c ****    {
 343:fltk-1.3.4-1/png/pngset.c ****       length = strlen(params[i]) + 1;
 344:fltk-1.3.4-1/png/pngset.c ****       png_debug2(3, "allocating parameter %d for info (%lu bytes)", i,
 345:fltk-1.3.4-1/png/pngset.c ****           (unsigned long)length);
 346:fltk-1.3.4-1/png/pngset.c **** 
 347:fltk-1.3.4-1/png/pngset.c ****       info_ptr->pcal_params[i] = (png_charp)png_malloc_warn(png_ptr, length);
 348:fltk-1.3.4-1/png/pngset.c **** 
 349:fltk-1.3.4-1/png/pngset.c ****       if (info_ptr->pcal_params[i] == NULL)
 350:fltk-1.3.4-1/png/pngset.c ****       {
 351:fltk-1.3.4-1/png/pngset.c ****          png_warning(png_ptr, "Insufficient memory for pCAL parameter");
 352:fltk-1.3.4-1/png/pngset.c ****          return;
 353:fltk-1.3.4-1/png/pngset.c ****       }
 354:fltk-1.3.4-1/png/pngset.c **** 
 355:fltk-1.3.4-1/png/pngset.c ****       memcpy(info_ptr->pcal_params[i], params[i], length);
 356:fltk-1.3.4-1/png/pngset.c ****    }
 357:fltk-1.3.4-1/png/pngset.c **** 
 358:fltk-1.3.4-1/png/pngset.c ****    info_ptr->valid |= PNG_INFO_pCAL;
 359:fltk-1.3.4-1/png/pngset.c ****    info_ptr->free_me |= PNG_FREE_PCAL;
 360:fltk-1.3.4-1/png/pngset.c **** }
 361:fltk-1.3.4-1/png/pngset.c **** #endif
 362:fltk-1.3.4-1/png/pngset.c **** 
 363:fltk-1.3.4-1/png/pngset.c **** #ifdef PNG_sCAL_SUPPORTED
 364:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
 365:fltk-1.3.4-1/png/pngset.c **** png_set_sCAL_s(png_const_structrp png_ptr, png_inforp info_ptr,
 366:fltk-1.3.4-1/png/pngset.c ****     int unit, png_const_charp swidth, png_const_charp sheight)
 367:fltk-1.3.4-1/png/pngset.c **** {
 368:fltk-1.3.4-1/png/pngset.c ****    png_size_t lengthw = 0, lengthh = 0;
 369:fltk-1.3.4-1/png/pngset.c **** 
 370:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "sCAL");
 371:fltk-1.3.4-1/png/pngset.c **** 
 372:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr == NULL || info_ptr == NULL)
 373:fltk-1.3.4-1/png/pngset.c ****       return;
 374:fltk-1.3.4-1/png/pngset.c **** 
 375:fltk-1.3.4-1/png/pngset.c ****    /* Double check the unit (should never get here with an invalid
 376:fltk-1.3.4-1/png/pngset.c ****     * unit unless this is an API call.)
 377:fltk-1.3.4-1/png/pngset.c ****     */
 378:fltk-1.3.4-1/png/pngset.c ****    if (unit != 1 && unit != 2)
 379:fltk-1.3.4-1/png/pngset.c ****       png_error(png_ptr, "Invalid sCAL unit");
 380:fltk-1.3.4-1/png/pngset.c **** 
 381:fltk-1.3.4-1/png/pngset.c ****    if (swidth == NULL || (lengthw = strlen(swidth)) == 0 ||
 382:fltk-1.3.4-1/png/pngset.c ****        swidth[0] == 45 /* '-' */ || !png_check_fp_string(swidth, lengthw))
 383:fltk-1.3.4-1/png/pngset.c ****       png_error(png_ptr, "Invalid sCAL width");
 384:fltk-1.3.4-1/png/pngset.c **** 
 385:fltk-1.3.4-1/png/pngset.c ****    if (sheight == NULL || (lengthh = strlen(sheight)) == 0 ||
 386:fltk-1.3.4-1/png/pngset.c ****        sheight[0] == 45 /* '-' */ || !png_check_fp_string(sheight, lengthh))
 387:fltk-1.3.4-1/png/pngset.c ****       png_error(png_ptr, "Invalid sCAL height");
 388:fltk-1.3.4-1/png/pngset.c **** 
 389:fltk-1.3.4-1/png/pngset.c ****    info_ptr->scal_unit = (png_byte)unit;
 390:fltk-1.3.4-1/png/pngset.c **** 
 391:fltk-1.3.4-1/png/pngset.c ****    ++lengthw;
 392:fltk-1.3.4-1/png/pngset.c **** 
 393:fltk-1.3.4-1/png/pngset.c ****    png_debug1(3, "allocating unit for info (%u bytes)", (unsigned int)lengthw);
 394:fltk-1.3.4-1/png/pngset.c **** 
 395:fltk-1.3.4-1/png/pngset.c ****    info_ptr->scal_s_width = png_voidcast(png_charp,
 396:fltk-1.3.4-1/png/pngset.c ****       png_malloc_warn(png_ptr, lengthw));
 397:fltk-1.3.4-1/png/pngset.c **** 
 398:fltk-1.3.4-1/png/pngset.c ****    if (info_ptr->scal_s_width == NULL)
 399:fltk-1.3.4-1/png/pngset.c ****    {
 400:fltk-1.3.4-1/png/pngset.c ****       png_warning(png_ptr, "Memory allocation failed while processing sCAL");
 401:fltk-1.3.4-1/png/pngset.c ****       return;
 402:fltk-1.3.4-1/png/pngset.c ****    }
 403:fltk-1.3.4-1/png/pngset.c **** 
 404:fltk-1.3.4-1/png/pngset.c ****    memcpy(info_ptr->scal_s_width, swidth, lengthw);
 405:fltk-1.3.4-1/png/pngset.c **** 
 406:fltk-1.3.4-1/png/pngset.c ****    ++lengthh;
 407:fltk-1.3.4-1/png/pngset.c **** 
 408:fltk-1.3.4-1/png/pngset.c ****    png_debug1(3, "allocating unit for info (%u bytes)", (unsigned int)lengthh);
 409:fltk-1.3.4-1/png/pngset.c **** 
 410:fltk-1.3.4-1/png/pngset.c ****    info_ptr->scal_s_height = png_voidcast(png_charp,
 411:fltk-1.3.4-1/png/pngset.c ****       png_malloc_warn(png_ptr, lengthh));
 412:fltk-1.3.4-1/png/pngset.c **** 
 413:fltk-1.3.4-1/png/pngset.c ****    if (info_ptr->scal_s_height == NULL)
 414:fltk-1.3.4-1/png/pngset.c ****    {
 415:fltk-1.3.4-1/png/pngset.c ****       png_free (png_ptr, info_ptr->scal_s_width);
 416:fltk-1.3.4-1/png/pngset.c ****       info_ptr->scal_s_width = NULL;
 417:fltk-1.3.4-1/png/pngset.c **** 
 418:fltk-1.3.4-1/png/pngset.c ****       png_warning(png_ptr, "Memory allocation failed while processing sCAL");
 419:fltk-1.3.4-1/png/pngset.c ****       return;
 420:fltk-1.3.4-1/png/pngset.c ****    }
 421:fltk-1.3.4-1/png/pngset.c **** 
 422:fltk-1.3.4-1/png/pngset.c ****    memcpy(info_ptr->scal_s_height, sheight, lengthh);
 423:fltk-1.3.4-1/png/pngset.c **** 
 424:fltk-1.3.4-1/png/pngset.c ****    info_ptr->valid |= PNG_INFO_sCAL;
 425:fltk-1.3.4-1/png/pngset.c ****    info_ptr->free_me |= PNG_FREE_SCAL;
 426:fltk-1.3.4-1/png/pngset.c **** }
 427:fltk-1.3.4-1/png/pngset.c **** 
 428:fltk-1.3.4-1/png/pngset.c **** #  ifdef PNG_FLOATING_POINT_SUPPORTED
 429:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
 430:fltk-1.3.4-1/png/pngset.c **** png_set_sCAL(png_const_structrp png_ptr, png_inforp info_ptr, int unit,
 431:fltk-1.3.4-1/png/pngset.c ****     double width, double height)
 432:fltk-1.3.4-1/png/pngset.c **** {
 433:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "sCAL");
 434:fltk-1.3.4-1/png/pngset.c **** 
 435:fltk-1.3.4-1/png/pngset.c ****    /* Check the arguments. */
 436:fltk-1.3.4-1/png/pngset.c ****    if (width <= 0)
 437:fltk-1.3.4-1/png/pngset.c ****       png_warning(png_ptr, "Invalid sCAL width ignored");
 438:fltk-1.3.4-1/png/pngset.c **** 
 439:fltk-1.3.4-1/png/pngset.c ****    else if (height <= 0)
 440:fltk-1.3.4-1/png/pngset.c ****       png_warning(png_ptr, "Invalid sCAL height ignored");
 441:fltk-1.3.4-1/png/pngset.c **** 
 442:fltk-1.3.4-1/png/pngset.c ****    else
 443:fltk-1.3.4-1/png/pngset.c ****    {
 444:fltk-1.3.4-1/png/pngset.c ****       /* Convert 'width' and 'height' to ASCII. */
 445:fltk-1.3.4-1/png/pngset.c ****       char swidth[PNG_sCAL_MAX_DIGITS+1];
 446:fltk-1.3.4-1/png/pngset.c ****       char sheight[PNG_sCAL_MAX_DIGITS+1];
 447:fltk-1.3.4-1/png/pngset.c **** 
 448:fltk-1.3.4-1/png/pngset.c ****       png_ascii_from_fp(png_ptr, swidth, (sizeof swidth), width,
 449:fltk-1.3.4-1/png/pngset.c ****          PNG_sCAL_PRECISION);
 450:fltk-1.3.4-1/png/pngset.c ****       png_ascii_from_fp(png_ptr, sheight, (sizeof sheight), height,
 451:fltk-1.3.4-1/png/pngset.c ****          PNG_sCAL_PRECISION);
 452:fltk-1.3.4-1/png/pngset.c **** 
 453:fltk-1.3.4-1/png/pngset.c ****       png_set_sCAL_s(png_ptr, info_ptr, unit, swidth, sheight);
 454:fltk-1.3.4-1/png/pngset.c ****    }
 455:fltk-1.3.4-1/png/pngset.c **** }
 456:fltk-1.3.4-1/png/pngset.c **** #  endif
 457:fltk-1.3.4-1/png/pngset.c **** 
 458:fltk-1.3.4-1/png/pngset.c **** #  ifdef PNG_FIXED_POINT_SUPPORTED
 459:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
 460:fltk-1.3.4-1/png/pngset.c **** png_set_sCAL_fixed(png_const_structrp png_ptr, png_inforp info_ptr, int unit,
 461:fltk-1.3.4-1/png/pngset.c ****     png_fixed_point width, png_fixed_point height)
 462:fltk-1.3.4-1/png/pngset.c **** {
 463:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "sCAL");
 464:fltk-1.3.4-1/png/pngset.c **** 
 465:fltk-1.3.4-1/png/pngset.c ****    /* Check the arguments. */
 466:fltk-1.3.4-1/png/pngset.c ****    if (width <= 0)
 467:fltk-1.3.4-1/png/pngset.c ****       png_warning(png_ptr, "Invalid sCAL width ignored");
 468:fltk-1.3.4-1/png/pngset.c **** 
 469:fltk-1.3.4-1/png/pngset.c ****    else if (height <= 0)
 470:fltk-1.3.4-1/png/pngset.c ****       png_warning(png_ptr, "Invalid sCAL height ignored");
 471:fltk-1.3.4-1/png/pngset.c **** 
 472:fltk-1.3.4-1/png/pngset.c ****    else
 473:fltk-1.3.4-1/png/pngset.c ****    {
 474:fltk-1.3.4-1/png/pngset.c ****       /* Convert 'width' and 'height' to ASCII. */
 475:fltk-1.3.4-1/png/pngset.c ****       char swidth[PNG_sCAL_MAX_DIGITS+1];
 476:fltk-1.3.4-1/png/pngset.c ****       char sheight[PNG_sCAL_MAX_DIGITS+1];
 477:fltk-1.3.4-1/png/pngset.c **** 
 478:fltk-1.3.4-1/png/pngset.c ****       png_ascii_from_fixed(png_ptr, swidth, (sizeof swidth), width);
 479:fltk-1.3.4-1/png/pngset.c ****       png_ascii_from_fixed(png_ptr, sheight, (sizeof sheight), height);
 480:fltk-1.3.4-1/png/pngset.c **** 
 481:fltk-1.3.4-1/png/pngset.c ****       png_set_sCAL_s(png_ptr, info_ptr, unit, swidth, sheight);
 482:fltk-1.3.4-1/png/pngset.c ****    }
 483:fltk-1.3.4-1/png/pngset.c **** }
 484:fltk-1.3.4-1/png/pngset.c **** #  endif
 485:fltk-1.3.4-1/png/pngset.c **** #endif
 486:fltk-1.3.4-1/png/pngset.c **** 
 487:fltk-1.3.4-1/png/pngset.c **** #ifdef PNG_pHYs_SUPPORTED
 488:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
 489:fltk-1.3.4-1/png/pngset.c **** png_set_pHYs(png_const_structrp png_ptr, png_inforp info_ptr,
 490:fltk-1.3.4-1/png/pngset.c ****     png_uint_32 res_x, png_uint_32 res_y, int unit_type)
 491:fltk-1.3.4-1/png/pngset.c **** {
 492:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "pHYs");
 493:fltk-1.3.4-1/png/pngset.c **** 
 494:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr == NULL || info_ptr == NULL)
 495:fltk-1.3.4-1/png/pngset.c ****       return;
 496:fltk-1.3.4-1/png/pngset.c **** 
 497:fltk-1.3.4-1/png/pngset.c ****    info_ptr->x_pixels_per_unit = res_x;
 498:fltk-1.3.4-1/png/pngset.c ****    info_ptr->y_pixels_per_unit = res_y;
 499:fltk-1.3.4-1/png/pngset.c ****    info_ptr->phys_unit_type = (png_byte)unit_type;
 500:fltk-1.3.4-1/png/pngset.c ****    info_ptr->valid |= PNG_INFO_pHYs;
 501:fltk-1.3.4-1/png/pngset.c **** }
 502:fltk-1.3.4-1/png/pngset.c **** #endif
 503:fltk-1.3.4-1/png/pngset.c **** 
 504:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
 505:fltk-1.3.4-1/png/pngset.c **** png_set_PLTE(png_structrp png_ptr, png_inforp info_ptr,
 506:fltk-1.3.4-1/png/pngset.c ****     png_const_colorp palette, int num_palette)
 507:fltk-1.3.4-1/png/pngset.c **** {
 508:fltk-1.3.4-1/png/pngset.c **** 
 509:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "PLTE");
 510:fltk-1.3.4-1/png/pngset.c **** 
 511:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr == NULL || info_ptr == NULL)
 512:fltk-1.3.4-1/png/pngset.c ****       return;
 513:fltk-1.3.4-1/png/pngset.c **** 
 514:fltk-1.3.4-1/png/pngset.c ****    if (num_palette < 0 || num_palette > PNG_MAX_PALETTE_LENGTH)
 515:fltk-1.3.4-1/png/pngset.c ****    {
 516:fltk-1.3.4-1/png/pngset.c ****       if (info_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
 517:fltk-1.3.4-1/png/pngset.c ****          png_error(png_ptr, "Invalid palette length");
 518:fltk-1.3.4-1/png/pngset.c **** 
 519:fltk-1.3.4-1/png/pngset.c ****       else
 520:fltk-1.3.4-1/png/pngset.c ****       {
 521:fltk-1.3.4-1/png/pngset.c ****          png_warning(png_ptr, "Invalid palette length");
 522:fltk-1.3.4-1/png/pngset.c ****          return;
 523:fltk-1.3.4-1/png/pngset.c ****       }
 524:fltk-1.3.4-1/png/pngset.c ****    }
 525:fltk-1.3.4-1/png/pngset.c **** 
 526:fltk-1.3.4-1/png/pngset.c ****    if ((num_palette > 0 && palette == NULL) ||
 527:fltk-1.3.4-1/png/pngset.c ****       (num_palette == 0
 528:fltk-1.3.4-1/png/pngset.c **** #        ifdef PNG_MNG_FEATURES_SUPPORTED
 529:fltk-1.3.4-1/png/pngset.c ****             && (png_ptr->mng_features_permitted & PNG_FLAG_MNG_EMPTY_PLTE) == 0
 530:fltk-1.3.4-1/png/pngset.c **** #        endif
 531:fltk-1.3.4-1/png/pngset.c ****       ))
 532:fltk-1.3.4-1/png/pngset.c ****    {
 533:fltk-1.3.4-1/png/pngset.c ****       png_error(png_ptr, "Invalid palette");
 534:fltk-1.3.4-1/png/pngset.c ****       return;
 535:fltk-1.3.4-1/png/pngset.c ****    }
 536:fltk-1.3.4-1/png/pngset.c **** 
 537:fltk-1.3.4-1/png/pngset.c ****    /* It may not actually be necessary to set png_ptr->palette here;
 538:fltk-1.3.4-1/png/pngset.c ****     * we do it for backward compatibility with the way the png_handle_tRNS
 539:fltk-1.3.4-1/png/pngset.c ****     * function used to do the allocation.
 540:fltk-1.3.4-1/png/pngset.c ****     *
 541:fltk-1.3.4-1/png/pngset.c ****     * 1.6.0: the above statement appears to be incorrect; something has to set
 542:fltk-1.3.4-1/png/pngset.c ****     * the palette inside png_struct on read.
 543:fltk-1.3.4-1/png/pngset.c ****     */
 544:fltk-1.3.4-1/png/pngset.c ****    png_free_data(png_ptr, info_ptr, PNG_FREE_PLTE, 0);
 545:fltk-1.3.4-1/png/pngset.c **** 
 546:fltk-1.3.4-1/png/pngset.c ****    /* Changed in libpng-1.2.1 to allocate PNG_MAX_PALETTE_LENGTH instead
 547:fltk-1.3.4-1/png/pngset.c ****     * of num_palette entries, in case of an invalid PNG file that has
 548:fltk-1.3.4-1/png/pngset.c ****     * too-large sample values.
 549:fltk-1.3.4-1/png/pngset.c ****     */
 550:fltk-1.3.4-1/png/pngset.c ****    png_ptr->palette = png_voidcast(png_colorp, png_calloc(png_ptr,
 551:fltk-1.3.4-1/png/pngset.c ****        PNG_MAX_PALETTE_LENGTH * (sizeof (png_color))));
 552:fltk-1.3.4-1/png/pngset.c **** 
 553:fltk-1.3.4-1/png/pngset.c ****    if (num_palette > 0)
 554:fltk-1.3.4-1/png/pngset.c ****       memcpy(png_ptr->palette, palette, num_palette * (sizeof (png_color)));
 555:fltk-1.3.4-1/png/pngset.c ****    info_ptr->palette = png_ptr->palette;
 556:fltk-1.3.4-1/png/pngset.c ****    info_ptr->num_palette = png_ptr->num_palette = (png_uint_16)num_palette;
 557:fltk-1.3.4-1/png/pngset.c **** 
 558:fltk-1.3.4-1/png/pngset.c ****    info_ptr->free_me |= PNG_FREE_PLTE;
 559:fltk-1.3.4-1/png/pngset.c **** 
 560:fltk-1.3.4-1/png/pngset.c ****    info_ptr->valid |= PNG_INFO_PLTE;
 561:fltk-1.3.4-1/png/pngset.c **** }
 562:fltk-1.3.4-1/png/pngset.c **** 
 563:fltk-1.3.4-1/png/pngset.c **** #ifdef PNG_sBIT_SUPPORTED
 564:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
 565:fltk-1.3.4-1/png/pngset.c **** png_set_sBIT(png_const_structrp png_ptr, png_inforp info_ptr,
 566:fltk-1.3.4-1/png/pngset.c ****     png_const_color_8p sig_bit)
 567:fltk-1.3.4-1/png/pngset.c **** {
 568:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "sBIT");
 569:fltk-1.3.4-1/png/pngset.c **** 
 570:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr == NULL || info_ptr == NULL || sig_bit == NULL)
 571:fltk-1.3.4-1/png/pngset.c ****       return;
 572:fltk-1.3.4-1/png/pngset.c **** 
 573:fltk-1.3.4-1/png/pngset.c ****    info_ptr->sig_bit = *sig_bit;
 574:fltk-1.3.4-1/png/pngset.c ****    info_ptr->valid |= PNG_INFO_sBIT;
 575:fltk-1.3.4-1/png/pngset.c **** }
 576:fltk-1.3.4-1/png/pngset.c **** #endif
 577:fltk-1.3.4-1/png/pngset.c **** 
 578:fltk-1.3.4-1/png/pngset.c **** #ifdef PNG_sRGB_SUPPORTED
 579:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
 580:fltk-1.3.4-1/png/pngset.c **** png_set_sRGB(png_const_structrp png_ptr, png_inforp info_ptr, int srgb_intent)
 581:fltk-1.3.4-1/png/pngset.c **** {
 582:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "sRGB");
 583:fltk-1.3.4-1/png/pngset.c **** 
 584:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr == NULL || info_ptr == NULL)
 585:fltk-1.3.4-1/png/pngset.c ****       return;
 586:fltk-1.3.4-1/png/pngset.c **** 
 587:fltk-1.3.4-1/png/pngset.c ****    (void)png_colorspace_set_sRGB(png_ptr, &info_ptr->colorspace, srgb_intent);
 588:fltk-1.3.4-1/png/pngset.c ****    png_colorspace_sync_info(png_ptr, info_ptr);
 589:fltk-1.3.4-1/png/pngset.c **** }
 590:fltk-1.3.4-1/png/pngset.c **** 
 591:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
 592:fltk-1.3.4-1/png/pngset.c **** png_set_sRGB_gAMA_and_cHRM(png_const_structrp png_ptr, png_inforp info_ptr,
 593:fltk-1.3.4-1/png/pngset.c ****     int srgb_intent)
 594:fltk-1.3.4-1/png/pngset.c **** {
 595:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "sRGB_gAMA_and_cHRM");
 596:fltk-1.3.4-1/png/pngset.c **** 
 597:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr == NULL || info_ptr == NULL)
 598:fltk-1.3.4-1/png/pngset.c ****       return;
 599:fltk-1.3.4-1/png/pngset.c **** 
 600:fltk-1.3.4-1/png/pngset.c ****    if (png_colorspace_set_sRGB(png_ptr, &info_ptr->colorspace,
 601:fltk-1.3.4-1/png/pngset.c ****        srgb_intent) != 0)
 602:fltk-1.3.4-1/png/pngset.c ****    {
 603:fltk-1.3.4-1/png/pngset.c ****       /* This causes the gAMA and cHRM to be written too */
 604:fltk-1.3.4-1/png/pngset.c ****       info_ptr->colorspace.flags |=
 605:fltk-1.3.4-1/png/pngset.c ****          PNG_COLORSPACE_FROM_gAMA|PNG_COLORSPACE_FROM_cHRM;
 606:fltk-1.3.4-1/png/pngset.c ****    }
 607:fltk-1.3.4-1/png/pngset.c **** 
 608:fltk-1.3.4-1/png/pngset.c ****    png_colorspace_sync_info(png_ptr, info_ptr);
 609:fltk-1.3.4-1/png/pngset.c **** }
 610:fltk-1.3.4-1/png/pngset.c **** #endif /* sRGB */
 611:fltk-1.3.4-1/png/pngset.c **** 
 612:fltk-1.3.4-1/png/pngset.c **** 
 613:fltk-1.3.4-1/png/pngset.c **** #ifdef PNG_iCCP_SUPPORTED
 614:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
 615:fltk-1.3.4-1/png/pngset.c **** png_set_iCCP(png_const_structrp png_ptr, png_inforp info_ptr,
 616:fltk-1.3.4-1/png/pngset.c ****     png_const_charp name, int compression_type,
 617:fltk-1.3.4-1/png/pngset.c ****     png_const_bytep profile, png_uint_32 proflen)
 618:fltk-1.3.4-1/png/pngset.c **** {
 619:fltk-1.3.4-1/png/pngset.c ****    png_charp new_iccp_name;
 620:fltk-1.3.4-1/png/pngset.c ****    png_bytep new_iccp_profile;
 621:fltk-1.3.4-1/png/pngset.c ****    png_size_t length;
 622:fltk-1.3.4-1/png/pngset.c **** 
 623:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "iCCP");
 624:fltk-1.3.4-1/png/pngset.c **** 
 625:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr == NULL || info_ptr == NULL || name == NULL || profile == NULL)
 626:fltk-1.3.4-1/png/pngset.c ****       return;
 627:fltk-1.3.4-1/png/pngset.c **** 
 628:fltk-1.3.4-1/png/pngset.c ****    if (compression_type != PNG_COMPRESSION_TYPE_BASE)
 629:fltk-1.3.4-1/png/pngset.c ****       png_app_error(png_ptr, "Invalid iCCP compression method");
 630:fltk-1.3.4-1/png/pngset.c **** 
 631:fltk-1.3.4-1/png/pngset.c ****    /* Set the colorspace first because this validates the profile; do not
 632:fltk-1.3.4-1/png/pngset.c ****     * override previously set app cHRM or gAMA here (because likely as not the
 633:fltk-1.3.4-1/png/pngset.c ****     * application knows better than libpng what the correct values are.)  Pass
 634:fltk-1.3.4-1/png/pngset.c ****     * the info_ptr color_type field to png_colorspace_set_ICC because in the
 635:fltk-1.3.4-1/png/pngset.c ****     * write case it has not yet been stored in png_ptr.
 636:fltk-1.3.4-1/png/pngset.c ****     */
 637:fltk-1.3.4-1/png/pngset.c ****    {
 638:fltk-1.3.4-1/png/pngset.c ****       int result = png_colorspace_set_ICC(png_ptr, &info_ptr->colorspace, name,
 639:fltk-1.3.4-1/png/pngset.c ****          proflen, profile, info_ptr->color_type);
 640:fltk-1.3.4-1/png/pngset.c **** 
 641:fltk-1.3.4-1/png/pngset.c ****       png_colorspace_sync_info(png_ptr, info_ptr);
 642:fltk-1.3.4-1/png/pngset.c **** 
 643:fltk-1.3.4-1/png/pngset.c ****       /* Don't do any of the copying if the profile was bad, or inconsistent. */
 644:fltk-1.3.4-1/png/pngset.c ****       if (result == 0)
 645:fltk-1.3.4-1/png/pngset.c ****          return;
 646:fltk-1.3.4-1/png/pngset.c **** 
 647:fltk-1.3.4-1/png/pngset.c ****       /* But do write the gAMA and cHRM chunks from the profile. */
 648:fltk-1.3.4-1/png/pngset.c ****       info_ptr->colorspace.flags |=
 649:fltk-1.3.4-1/png/pngset.c ****          PNG_COLORSPACE_FROM_gAMA|PNG_COLORSPACE_FROM_cHRM;
 650:fltk-1.3.4-1/png/pngset.c ****    }
 651:fltk-1.3.4-1/png/pngset.c **** 
 652:fltk-1.3.4-1/png/pngset.c ****    length = strlen(name)+1;
 653:fltk-1.3.4-1/png/pngset.c ****    new_iccp_name = png_voidcast(png_charp, png_malloc_warn(png_ptr, length));
 654:fltk-1.3.4-1/png/pngset.c **** 
 655:fltk-1.3.4-1/png/pngset.c ****    if (new_iccp_name == NULL)
 656:fltk-1.3.4-1/png/pngset.c ****    {
 657:fltk-1.3.4-1/png/pngset.c ****       png_benign_error(png_ptr, "Insufficient memory to process iCCP chunk");
 658:fltk-1.3.4-1/png/pngset.c ****       return;
 659:fltk-1.3.4-1/png/pngset.c ****    }
 660:fltk-1.3.4-1/png/pngset.c **** 
 661:fltk-1.3.4-1/png/pngset.c ****    memcpy(new_iccp_name, name, length);
 662:fltk-1.3.4-1/png/pngset.c ****    new_iccp_profile = png_voidcast(png_bytep,
 663:fltk-1.3.4-1/png/pngset.c ****       png_malloc_warn(png_ptr, proflen));
 664:fltk-1.3.4-1/png/pngset.c **** 
 665:fltk-1.3.4-1/png/pngset.c ****    if (new_iccp_profile == NULL)
 666:fltk-1.3.4-1/png/pngset.c ****    {
 667:fltk-1.3.4-1/png/pngset.c ****       png_free(png_ptr, new_iccp_name);
 668:fltk-1.3.4-1/png/pngset.c ****       new_iccp_name = NULL;
 669:fltk-1.3.4-1/png/pngset.c ****       png_benign_error(png_ptr,
 670:fltk-1.3.4-1/png/pngset.c ****           "Insufficient memory to process iCCP profile");
 671:fltk-1.3.4-1/png/pngset.c ****       return;
 672:fltk-1.3.4-1/png/pngset.c ****    }
 673:fltk-1.3.4-1/png/pngset.c **** 
 674:fltk-1.3.4-1/png/pngset.c ****    memcpy(new_iccp_profile, profile, proflen);
 675:fltk-1.3.4-1/png/pngset.c **** 
 676:fltk-1.3.4-1/png/pngset.c ****    png_free_data(png_ptr, info_ptr, PNG_FREE_ICCP, 0);
 677:fltk-1.3.4-1/png/pngset.c **** 
 678:fltk-1.3.4-1/png/pngset.c ****    info_ptr->iccp_proflen = proflen;
 679:fltk-1.3.4-1/png/pngset.c ****    info_ptr->iccp_name = new_iccp_name;
 680:fltk-1.3.4-1/png/pngset.c ****    info_ptr->iccp_profile = new_iccp_profile;
 681:fltk-1.3.4-1/png/pngset.c ****    info_ptr->free_me |= PNG_FREE_ICCP;
 682:fltk-1.3.4-1/png/pngset.c ****    info_ptr->valid |= PNG_INFO_iCCP;
 683:fltk-1.3.4-1/png/pngset.c **** }
 684:fltk-1.3.4-1/png/pngset.c **** #endif
 685:fltk-1.3.4-1/png/pngset.c **** 
 686:fltk-1.3.4-1/png/pngset.c **** #ifdef PNG_TEXT_SUPPORTED
 687:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
 688:fltk-1.3.4-1/png/pngset.c **** png_set_text(png_const_structrp png_ptr, png_inforp info_ptr,
 689:fltk-1.3.4-1/png/pngset.c ****     png_const_textp text_ptr, int num_text)
 690:fltk-1.3.4-1/png/pngset.c **** {
 691:fltk-1.3.4-1/png/pngset.c ****    int ret;
 692:fltk-1.3.4-1/png/pngset.c ****    ret = png_set_text_2(png_ptr, info_ptr, text_ptr, num_text);
 693:fltk-1.3.4-1/png/pngset.c **** 
 694:fltk-1.3.4-1/png/pngset.c ****    if (ret != 0)
 695:fltk-1.3.4-1/png/pngset.c ****       png_error(png_ptr, "Insufficient memory to store text");
 696:fltk-1.3.4-1/png/pngset.c **** }
 697:fltk-1.3.4-1/png/pngset.c **** 
 698:fltk-1.3.4-1/png/pngset.c **** int /* PRIVATE */
 699:fltk-1.3.4-1/png/pngset.c **** png_set_text_2(png_const_structrp png_ptr, png_inforp info_ptr,
 700:fltk-1.3.4-1/png/pngset.c ****     png_const_textp text_ptr, int num_text)
 701:fltk-1.3.4-1/png/pngset.c **** {
 702:fltk-1.3.4-1/png/pngset.c ****    int i;
 703:fltk-1.3.4-1/png/pngset.c **** 
 704:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %lx storage function", png_ptr == NULL ? "unexpected" :
 705:fltk-1.3.4-1/png/pngset.c ****       (unsigned long)png_ptr->chunk_name);
 706:fltk-1.3.4-1/png/pngset.c **** 
 707:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr == NULL || info_ptr == NULL || num_text <= 0 || text_ptr == NULL)
 708:fltk-1.3.4-1/png/pngset.c ****       return(0);
 709:fltk-1.3.4-1/png/pngset.c **** 
 710:fltk-1.3.4-1/png/pngset.c ****    /* Make sure we have enough space in the "text" array in info_struct
 711:fltk-1.3.4-1/png/pngset.c ****     * to hold all of the incoming text_ptr objects.  This compare can't overflow
 712:fltk-1.3.4-1/png/pngset.c ****     * because max_text >= num_text (anyway, subtract of two positive integers
 713:fltk-1.3.4-1/png/pngset.c ****     * can't overflow in any case.)
 714:fltk-1.3.4-1/png/pngset.c ****     */
 715:fltk-1.3.4-1/png/pngset.c ****    if (num_text > info_ptr->max_text - info_ptr->num_text)
 716:fltk-1.3.4-1/png/pngset.c ****    {
 717:fltk-1.3.4-1/png/pngset.c ****       int old_num_text = info_ptr->num_text;
 718:fltk-1.3.4-1/png/pngset.c ****       int max_text;
 719:fltk-1.3.4-1/png/pngset.c ****       png_textp new_text = NULL;
 720:fltk-1.3.4-1/png/pngset.c **** 
 721:fltk-1.3.4-1/png/pngset.c ****       /* Calculate an appropriate max_text, checking for overflow. */
 722:fltk-1.3.4-1/png/pngset.c ****       max_text = old_num_text;
 723:fltk-1.3.4-1/png/pngset.c ****       if (num_text <= INT_MAX - max_text)
 724:fltk-1.3.4-1/png/pngset.c ****       {
 725:fltk-1.3.4-1/png/pngset.c ****          max_text += num_text;
 726:fltk-1.3.4-1/png/pngset.c **** 
 727:fltk-1.3.4-1/png/pngset.c ****          /* Round up to a multiple of 8 */
 728:fltk-1.3.4-1/png/pngset.c ****          if (max_text < INT_MAX-8)
 729:fltk-1.3.4-1/png/pngset.c ****             max_text = (max_text + 8) & ~0x7;
 730:fltk-1.3.4-1/png/pngset.c **** 
 731:fltk-1.3.4-1/png/pngset.c ****          else
 732:fltk-1.3.4-1/png/pngset.c ****             max_text = INT_MAX;
 733:fltk-1.3.4-1/png/pngset.c **** 
 734:fltk-1.3.4-1/png/pngset.c ****          /* Now allocate a new array and copy the old members in; this does all
 735:fltk-1.3.4-1/png/pngset.c ****           * the overflow checks.
 736:fltk-1.3.4-1/png/pngset.c ****           */
 737:fltk-1.3.4-1/png/pngset.c ****          new_text = png_voidcast(png_textp,png_realloc_array(png_ptr,
 738:fltk-1.3.4-1/png/pngset.c ****             info_ptr->text, old_num_text, max_text-old_num_text,
 739:fltk-1.3.4-1/png/pngset.c ****             sizeof *new_text));
 740:fltk-1.3.4-1/png/pngset.c ****       }
 741:fltk-1.3.4-1/png/pngset.c **** 
 742:fltk-1.3.4-1/png/pngset.c ****       if (new_text == NULL)
 743:fltk-1.3.4-1/png/pngset.c ****       {
 744:fltk-1.3.4-1/png/pngset.c ****          png_chunk_report(png_ptr, "too many text chunks",
 745:fltk-1.3.4-1/png/pngset.c ****             PNG_CHUNK_WRITE_ERROR);
 746:fltk-1.3.4-1/png/pngset.c ****          return 1;
 747:fltk-1.3.4-1/png/pngset.c ****       }
 748:fltk-1.3.4-1/png/pngset.c **** 
 749:fltk-1.3.4-1/png/pngset.c ****       png_free(png_ptr, info_ptr->text);
 750:fltk-1.3.4-1/png/pngset.c **** 
 751:fltk-1.3.4-1/png/pngset.c ****       info_ptr->text = new_text;
 752:fltk-1.3.4-1/png/pngset.c ****       info_ptr->free_me |= PNG_FREE_TEXT;
 753:fltk-1.3.4-1/png/pngset.c ****       info_ptr->max_text = max_text;
 754:fltk-1.3.4-1/png/pngset.c ****       /* num_text is adjusted below as the entries are copied in */
 755:fltk-1.3.4-1/png/pngset.c **** 
 756:fltk-1.3.4-1/png/pngset.c ****       png_debug1(3, "allocated %d entries for info_ptr->text", max_text);
 757:fltk-1.3.4-1/png/pngset.c ****    }
 758:fltk-1.3.4-1/png/pngset.c **** 
 759:fltk-1.3.4-1/png/pngset.c ****    for (i = 0; i < num_text; i++)
 760:fltk-1.3.4-1/png/pngset.c ****    {
 761:fltk-1.3.4-1/png/pngset.c ****       size_t text_length, key_len;
 762:fltk-1.3.4-1/png/pngset.c ****       size_t lang_len, lang_key_len;
 763:fltk-1.3.4-1/png/pngset.c ****       png_textp textp = &(info_ptr->text[info_ptr->num_text]);
 764:fltk-1.3.4-1/png/pngset.c **** 
 765:fltk-1.3.4-1/png/pngset.c ****       if (text_ptr[i].key == NULL)
 766:fltk-1.3.4-1/png/pngset.c ****           continue;
 767:fltk-1.3.4-1/png/pngset.c **** 
 768:fltk-1.3.4-1/png/pngset.c ****       if (text_ptr[i].compression < PNG_TEXT_COMPRESSION_NONE ||
 769:fltk-1.3.4-1/png/pngset.c ****           text_ptr[i].compression >= PNG_TEXT_COMPRESSION_LAST)
 770:fltk-1.3.4-1/png/pngset.c ****       {
 771:fltk-1.3.4-1/png/pngset.c ****          png_chunk_report(png_ptr, "text compression mode is out of range",
 772:fltk-1.3.4-1/png/pngset.c ****             PNG_CHUNK_WRITE_ERROR);
 773:fltk-1.3.4-1/png/pngset.c ****          continue;
 774:fltk-1.3.4-1/png/pngset.c ****       }
 775:fltk-1.3.4-1/png/pngset.c **** 
 776:fltk-1.3.4-1/png/pngset.c ****       key_len = strlen(text_ptr[i].key);
 777:fltk-1.3.4-1/png/pngset.c **** 
 778:fltk-1.3.4-1/png/pngset.c ****       if (text_ptr[i].compression <= 0)
 779:fltk-1.3.4-1/png/pngset.c ****       {
 780:fltk-1.3.4-1/png/pngset.c ****          lang_len = 0;
 781:fltk-1.3.4-1/png/pngset.c ****          lang_key_len = 0;
 782:fltk-1.3.4-1/png/pngset.c ****       }
 783:fltk-1.3.4-1/png/pngset.c **** 
 784:fltk-1.3.4-1/png/pngset.c ****       else
 785:fltk-1.3.4-1/png/pngset.c **** #  ifdef PNG_iTXt_SUPPORTED
 786:fltk-1.3.4-1/png/pngset.c ****       {
 787:fltk-1.3.4-1/png/pngset.c ****          /* Set iTXt data */
 788:fltk-1.3.4-1/png/pngset.c **** 
 789:fltk-1.3.4-1/png/pngset.c ****          if (text_ptr[i].lang != NULL)
 790:fltk-1.3.4-1/png/pngset.c ****             lang_len = strlen(text_ptr[i].lang);
 791:fltk-1.3.4-1/png/pngset.c **** 
 792:fltk-1.3.4-1/png/pngset.c ****          else
 793:fltk-1.3.4-1/png/pngset.c ****             lang_len = 0;
 794:fltk-1.3.4-1/png/pngset.c **** 
 795:fltk-1.3.4-1/png/pngset.c ****          if (text_ptr[i].lang_key != NULL)
 796:fltk-1.3.4-1/png/pngset.c ****             lang_key_len = strlen(text_ptr[i].lang_key);
 797:fltk-1.3.4-1/png/pngset.c **** 
 798:fltk-1.3.4-1/png/pngset.c ****          else
 799:fltk-1.3.4-1/png/pngset.c ****             lang_key_len = 0;
 800:fltk-1.3.4-1/png/pngset.c ****       }
 801:fltk-1.3.4-1/png/pngset.c **** #  else /* PNG_iTXt_SUPPORTED */
 802:fltk-1.3.4-1/png/pngset.c ****       {
 803:fltk-1.3.4-1/png/pngset.c ****          png_chunk_report(png_ptr, "iTXt chunk not supported",
 804:fltk-1.3.4-1/png/pngset.c ****             PNG_CHUNK_WRITE_ERROR);
 805:fltk-1.3.4-1/png/pngset.c ****          continue;
 806:fltk-1.3.4-1/png/pngset.c ****       }
 807:fltk-1.3.4-1/png/pngset.c **** #  endif
 808:fltk-1.3.4-1/png/pngset.c **** 
 809:fltk-1.3.4-1/png/pngset.c ****       if (text_ptr[i].text == NULL || text_ptr[i].text[0] == '\0')
 810:fltk-1.3.4-1/png/pngset.c ****       {
 811:fltk-1.3.4-1/png/pngset.c ****          text_length = 0;
 812:fltk-1.3.4-1/png/pngset.c **** #  ifdef PNG_iTXt_SUPPORTED
 813:fltk-1.3.4-1/png/pngset.c ****          if (text_ptr[i].compression > 0)
 814:fltk-1.3.4-1/png/pngset.c ****             textp->compression = PNG_ITXT_COMPRESSION_NONE;
 815:fltk-1.3.4-1/png/pngset.c **** 
 816:fltk-1.3.4-1/png/pngset.c ****          else
 817:fltk-1.3.4-1/png/pngset.c **** #  endif
 818:fltk-1.3.4-1/png/pngset.c ****             textp->compression = PNG_TEXT_COMPRESSION_NONE;
 819:fltk-1.3.4-1/png/pngset.c ****       }
 820:fltk-1.3.4-1/png/pngset.c **** 
 821:fltk-1.3.4-1/png/pngset.c ****       else
 822:fltk-1.3.4-1/png/pngset.c ****       {
 823:fltk-1.3.4-1/png/pngset.c ****          text_length = strlen(text_ptr[i].text);
 824:fltk-1.3.4-1/png/pngset.c ****          textp->compression = text_ptr[i].compression;
 825:fltk-1.3.4-1/png/pngset.c ****       }
 826:fltk-1.3.4-1/png/pngset.c **** 
 827:fltk-1.3.4-1/png/pngset.c ****       textp->key = png_voidcast(png_charp,png_malloc_base(png_ptr,
 828:fltk-1.3.4-1/png/pngset.c ****           key_len + text_length + lang_len + lang_key_len + 4));
 829:fltk-1.3.4-1/png/pngset.c **** 
 830:fltk-1.3.4-1/png/pngset.c ****       if (textp->key == NULL)
 831:fltk-1.3.4-1/png/pngset.c ****       {
 832:fltk-1.3.4-1/png/pngset.c ****          png_chunk_report(png_ptr, "text chunk: out of memory",
 833:fltk-1.3.4-1/png/pngset.c ****                PNG_CHUNK_WRITE_ERROR);
 834:fltk-1.3.4-1/png/pngset.c ****          return 1;
 835:fltk-1.3.4-1/png/pngset.c ****       }
 836:fltk-1.3.4-1/png/pngset.c **** 
 837:fltk-1.3.4-1/png/pngset.c ****       png_debug2(2, "Allocated %lu bytes at %p in png_set_text",
 838:fltk-1.3.4-1/png/pngset.c ****           (unsigned long)(png_uint_32)
 839:fltk-1.3.4-1/png/pngset.c ****           (key_len + lang_len + lang_key_len + text_length + 4),
 840:fltk-1.3.4-1/png/pngset.c ****           textp->key);
 841:fltk-1.3.4-1/png/pngset.c **** 
 842:fltk-1.3.4-1/png/pngset.c ****       memcpy(textp->key, text_ptr[i].key, key_len);
 843:fltk-1.3.4-1/png/pngset.c ****       *(textp->key + key_len) = '\0';
 844:fltk-1.3.4-1/png/pngset.c **** 
 845:fltk-1.3.4-1/png/pngset.c ****       if (text_ptr[i].compression > 0)
 846:fltk-1.3.4-1/png/pngset.c ****       {
 847:fltk-1.3.4-1/png/pngset.c ****          textp->lang = textp->key + key_len + 1;
 848:fltk-1.3.4-1/png/pngset.c ****          memcpy(textp->lang, text_ptr[i].lang, lang_len);
 849:fltk-1.3.4-1/png/pngset.c ****          *(textp->lang + lang_len) = '\0';
 850:fltk-1.3.4-1/png/pngset.c ****          textp->lang_key = textp->lang + lang_len + 1;
 851:fltk-1.3.4-1/png/pngset.c ****          memcpy(textp->lang_key, text_ptr[i].lang_key, lang_key_len);
 852:fltk-1.3.4-1/png/pngset.c ****          *(textp->lang_key + lang_key_len) = '\0';
 853:fltk-1.3.4-1/png/pngset.c ****          textp->text = textp->lang_key + lang_key_len + 1;
 854:fltk-1.3.4-1/png/pngset.c ****       }
 855:fltk-1.3.4-1/png/pngset.c **** 
 856:fltk-1.3.4-1/png/pngset.c ****       else
 857:fltk-1.3.4-1/png/pngset.c ****       {
 858:fltk-1.3.4-1/png/pngset.c ****          textp->lang=NULL;
 859:fltk-1.3.4-1/png/pngset.c ****          textp->lang_key=NULL;
 860:fltk-1.3.4-1/png/pngset.c ****          textp->text = textp->key + key_len + 1;
 861:fltk-1.3.4-1/png/pngset.c ****       }
 862:fltk-1.3.4-1/png/pngset.c **** 
 863:fltk-1.3.4-1/png/pngset.c ****       if (text_length != 0)
 864:fltk-1.3.4-1/png/pngset.c ****          memcpy(textp->text, text_ptr[i].text, text_length);
 865:fltk-1.3.4-1/png/pngset.c **** 
 866:fltk-1.3.4-1/png/pngset.c ****       *(textp->text + text_length) = '\0';
 867:fltk-1.3.4-1/png/pngset.c **** 
 868:fltk-1.3.4-1/png/pngset.c **** #  ifdef PNG_iTXt_SUPPORTED
 869:fltk-1.3.4-1/png/pngset.c ****       if (textp->compression > 0)
 870:fltk-1.3.4-1/png/pngset.c ****       {
 871:fltk-1.3.4-1/png/pngset.c ****          textp->text_length = 0;
 872:fltk-1.3.4-1/png/pngset.c ****          textp->itxt_length = text_length;
 873:fltk-1.3.4-1/png/pngset.c ****       }
 874:fltk-1.3.4-1/png/pngset.c **** 
 875:fltk-1.3.4-1/png/pngset.c ****       else
 876:fltk-1.3.4-1/png/pngset.c **** #  endif
 877:fltk-1.3.4-1/png/pngset.c ****       {
 878:fltk-1.3.4-1/png/pngset.c ****          textp->text_length = text_length;
 879:fltk-1.3.4-1/png/pngset.c ****          textp->itxt_length = 0;
 880:fltk-1.3.4-1/png/pngset.c ****       }
 881:fltk-1.3.4-1/png/pngset.c **** 
 882:fltk-1.3.4-1/png/pngset.c ****       info_ptr->num_text++;
 883:fltk-1.3.4-1/png/pngset.c ****       png_debug1(3, "transferred text chunk %d", info_ptr->num_text);
 884:fltk-1.3.4-1/png/pngset.c ****    }
 885:fltk-1.3.4-1/png/pngset.c **** 
 886:fltk-1.3.4-1/png/pngset.c ****    return(0);
 887:fltk-1.3.4-1/png/pngset.c **** }
 888:fltk-1.3.4-1/png/pngset.c **** #endif
 889:fltk-1.3.4-1/png/pngset.c **** 
 890:fltk-1.3.4-1/png/pngset.c **** #ifdef PNG_tIME_SUPPORTED
 891:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
 892:fltk-1.3.4-1/png/pngset.c **** png_set_tIME(png_const_structrp png_ptr, png_inforp info_ptr,
 893:fltk-1.3.4-1/png/pngset.c ****     png_const_timep mod_time)
 894:fltk-1.3.4-1/png/pngset.c **** {
 895:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "tIME");
 896:fltk-1.3.4-1/png/pngset.c **** 
 897:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr == NULL || info_ptr == NULL || mod_time == NULL ||
 898:fltk-1.3.4-1/png/pngset.c ****        (png_ptr->mode & PNG_WROTE_tIME) != 0)
 899:fltk-1.3.4-1/png/pngset.c ****       return;
 900:fltk-1.3.4-1/png/pngset.c **** 
 901:fltk-1.3.4-1/png/pngset.c ****    if (mod_time->month == 0   || mod_time->month > 12  ||
 902:fltk-1.3.4-1/png/pngset.c ****        mod_time->day   == 0   || mod_time->day   > 31  ||
 903:fltk-1.3.4-1/png/pngset.c ****        mod_time->hour  > 23   || mod_time->minute > 59 ||
 904:fltk-1.3.4-1/png/pngset.c ****        mod_time->second > 60)
 905:fltk-1.3.4-1/png/pngset.c ****    {
 906:fltk-1.3.4-1/png/pngset.c ****       png_warning(png_ptr, "Ignoring invalid time value");
 907:fltk-1.3.4-1/png/pngset.c ****       return;
 908:fltk-1.3.4-1/png/pngset.c ****    }
 909:fltk-1.3.4-1/png/pngset.c **** 
 910:fltk-1.3.4-1/png/pngset.c ****    info_ptr->mod_time = *mod_time;
 911:fltk-1.3.4-1/png/pngset.c ****    info_ptr->valid |= PNG_INFO_tIME;
 912:fltk-1.3.4-1/png/pngset.c **** }
 913:fltk-1.3.4-1/png/pngset.c **** #endif
 914:fltk-1.3.4-1/png/pngset.c **** 
 915:fltk-1.3.4-1/png/pngset.c **** #ifdef PNG_tRNS_SUPPORTED
 916:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
 917:fltk-1.3.4-1/png/pngset.c **** png_set_tRNS(png_structrp png_ptr, png_inforp info_ptr,
 918:fltk-1.3.4-1/png/pngset.c ****     png_const_bytep trans_alpha, int num_trans, png_const_color_16p trans_color)
 919:fltk-1.3.4-1/png/pngset.c **** {
 920:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "tRNS");
 921:fltk-1.3.4-1/png/pngset.c **** 
 922:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr == NULL || info_ptr == NULL)
 923:fltk-1.3.4-1/png/pngset.c ****       return;
 924:fltk-1.3.4-1/png/pngset.c **** 
 925:fltk-1.3.4-1/png/pngset.c ****    if (trans_alpha != NULL)
 926:fltk-1.3.4-1/png/pngset.c ****    {
 927:fltk-1.3.4-1/png/pngset.c ****        /* It may not actually be necessary to set png_ptr->trans_alpha here;
 928:fltk-1.3.4-1/png/pngset.c ****         * we do it for backward compatibility with the way the png_handle_tRNS
 929:fltk-1.3.4-1/png/pngset.c ****         * function used to do the allocation.
 930:fltk-1.3.4-1/png/pngset.c ****         *
 931:fltk-1.3.4-1/png/pngset.c ****         * 1.6.0: The above statement is incorrect; png_handle_tRNS effectively
 932:fltk-1.3.4-1/png/pngset.c ****         * relies on png_set_tRNS storing the information in png_struct
 933:fltk-1.3.4-1/png/pngset.c ****         * (otherwise it won't be there for the code in pngrtran.c).
 934:fltk-1.3.4-1/png/pngset.c ****         */
 935:fltk-1.3.4-1/png/pngset.c **** 
 936:fltk-1.3.4-1/png/pngset.c ****        png_free_data(png_ptr, info_ptr, PNG_FREE_TRNS, 0);
 937:fltk-1.3.4-1/png/pngset.c **** 
 938:fltk-1.3.4-1/png/pngset.c ****        /* Changed from num_trans to PNG_MAX_PALETTE_LENGTH in version 1.2.1 */
 939:fltk-1.3.4-1/png/pngset.c ****        png_ptr->trans_alpha = info_ptr->trans_alpha = png_voidcast(png_bytep,
 940:fltk-1.3.4-1/png/pngset.c ****          png_malloc(png_ptr, PNG_MAX_PALETTE_LENGTH));
 941:fltk-1.3.4-1/png/pngset.c **** 
 942:fltk-1.3.4-1/png/pngset.c ****        if (num_trans > 0 && num_trans <= PNG_MAX_PALETTE_LENGTH)
 943:fltk-1.3.4-1/png/pngset.c ****           memcpy(info_ptr->trans_alpha, trans_alpha, (png_size_t)num_trans);
 944:fltk-1.3.4-1/png/pngset.c ****    }
 945:fltk-1.3.4-1/png/pngset.c **** 
 946:fltk-1.3.4-1/png/pngset.c ****    if (trans_color != NULL)
 947:fltk-1.3.4-1/png/pngset.c ****    {
 948:fltk-1.3.4-1/png/pngset.c ****       int sample_max = (1 << info_ptr->bit_depth);
 949:fltk-1.3.4-1/png/pngset.c **** 
 950:fltk-1.3.4-1/png/pngset.c ****       if ((info_ptr->color_type == PNG_COLOR_TYPE_GRAY &&
 951:fltk-1.3.4-1/png/pngset.c ****           trans_color->gray > sample_max) ||
 952:fltk-1.3.4-1/png/pngset.c ****           (info_ptr->color_type == PNG_COLOR_TYPE_RGB &&
 953:fltk-1.3.4-1/png/pngset.c ****           (trans_color->red > sample_max ||
 954:fltk-1.3.4-1/png/pngset.c ****           trans_color->green > sample_max ||
 955:fltk-1.3.4-1/png/pngset.c ****           trans_color->blue > sample_max)))
 956:fltk-1.3.4-1/png/pngset.c ****          png_warning(png_ptr,
 957:fltk-1.3.4-1/png/pngset.c ****             "tRNS chunk has out-of-range samples for bit_depth");
 958:fltk-1.3.4-1/png/pngset.c **** 
 959:fltk-1.3.4-1/png/pngset.c ****       info_ptr->trans_color = *trans_color;
 960:fltk-1.3.4-1/png/pngset.c **** 
 961:fltk-1.3.4-1/png/pngset.c ****       if (num_trans == 0)
 962:fltk-1.3.4-1/png/pngset.c ****          num_trans = 1;
 963:fltk-1.3.4-1/png/pngset.c ****    }
 964:fltk-1.3.4-1/png/pngset.c **** 
 965:fltk-1.3.4-1/png/pngset.c ****    info_ptr->num_trans = (png_uint_16)num_trans;
 966:fltk-1.3.4-1/png/pngset.c **** 
 967:fltk-1.3.4-1/png/pngset.c ****    if (num_trans != 0)
 968:fltk-1.3.4-1/png/pngset.c ****    {
 969:fltk-1.3.4-1/png/pngset.c ****       info_ptr->valid |= PNG_INFO_tRNS;
 970:fltk-1.3.4-1/png/pngset.c ****       info_ptr->free_me |= PNG_FREE_TRNS;
 971:fltk-1.3.4-1/png/pngset.c ****    }
 972:fltk-1.3.4-1/png/pngset.c **** }
 973:fltk-1.3.4-1/png/pngset.c **** #endif
 974:fltk-1.3.4-1/png/pngset.c **** 
 975:fltk-1.3.4-1/png/pngset.c **** #ifdef PNG_sPLT_SUPPORTED
 976:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
 977:fltk-1.3.4-1/png/pngset.c **** png_set_sPLT(png_const_structrp png_ptr,
 978:fltk-1.3.4-1/png/pngset.c ****     png_inforp info_ptr, png_const_sPLT_tp entries, int nentries)
 979:fltk-1.3.4-1/png/pngset.c **** /*
 980:fltk-1.3.4-1/png/pngset.c ****  *  entries        - array of png_sPLT_t structures
 981:fltk-1.3.4-1/png/pngset.c ****  *                   to be added to the list of palettes
 982:fltk-1.3.4-1/png/pngset.c ****  *                   in the info structure.
 983:fltk-1.3.4-1/png/pngset.c ****  *
 984:fltk-1.3.4-1/png/pngset.c ****  *  nentries       - number of palette structures to be
 985:fltk-1.3.4-1/png/pngset.c ****  *                   added.
 986:fltk-1.3.4-1/png/pngset.c ****  */
 987:fltk-1.3.4-1/png/pngset.c **** {
 988:fltk-1.3.4-1/png/pngset.c ****    png_sPLT_tp np;
 989:fltk-1.3.4-1/png/pngset.c **** 
 990:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr == NULL || info_ptr == NULL || nentries <= 0 || entries == NULL)
 991:fltk-1.3.4-1/png/pngset.c ****       return;
 992:fltk-1.3.4-1/png/pngset.c **** 
 993:fltk-1.3.4-1/png/pngset.c ****    /* Use the internal realloc function, which checks for all the possible
 994:fltk-1.3.4-1/png/pngset.c ****     * overflows.  Notice that the parameters are (int) and (size_t)
 995:fltk-1.3.4-1/png/pngset.c ****     */
 996:fltk-1.3.4-1/png/pngset.c ****    np = png_voidcast(png_sPLT_tp,png_realloc_array(png_ptr,
 997:fltk-1.3.4-1/png/pngset.c ****       info_ptr->splt_palettes, info_ptr->splt_palettes_num, nentries,
 998:fltk-1.3.4-1/png/pngset.c ****       sizeof *np));
 999:fltk-1.3.4-1/png/pngset.c **** 
1000:fltk-1.3.4-1/png/pngset.c ****    if (np == NULL)
1001:fltk-1.3.4-1/png/pngset.c ****    {
1002:fltk-1.3.4-1/png/pngset.c ****       /* Out of memory or too many chunks */
1003:fltk-1.3.4-1/png/pngset.c ****       png_chunk_report(png_ptr, "too many sPLT chunks", PNG_CHUNK_WRITE_ERROR);
1004:fltk-1.3.4-1/png/pngset.c ****       return;
1005:fltk-1.3.4-1/png/pngset.c ****    }
1006:fltk-1.3.4-1/png/pngset.c **** 
1007:fltk-1.3.4-1/png/pngset.c ****    png_free(png_ptr, info_ptr->splt_palettes);
1008:fltk-1.3.4-1/png/pngset.c ****    info_ptr->splt_palettes = np;
1009:fltk-1.3.4-1/png/pngset.c ****    info_ptr->free_me |= PNG_FREE_SPLT;
1010:fltk-1.3.4-1/png/pngset.c **** 
1011:fltk-1.3.4-1/png/pngset.c ****    np += info_ptr->splt_palettes_num;
1012:fltk-1.3.4-1/png/pngset.c **** 
1013:fltk-1.3.4-1/png/pngset.c ****    do
1014:fltk-1.3.4-1/png/pngset.c ****    {
1015:fltk-1.3.4-1/png/pngset.c ****       png_size_t length;
1016:fltk-1.3.4-1/png/pngset.c **** 
1017:fltk-1.3.4-1/png/pngset.c ****       /* Skip invalid input entries */
1018:fltk-1.3.4-1/png/pngset.c ****       if (entries->name == NULL || entries->entries == NULL)
1019:fltk-1.3.4-1/png/pngset.c ****       {
1020:fltk-1.3.4-1/png/pngset.c ****          /* png_handle_sPLT doesn't do this, so this is an app error */
1021:fltk-1.3.4-1/png/pngset.c ****          png_app_error(png_ptr, "png_set_sPLT: invalid sPLT");
1022:fltk-1.3.4-1/png/pngset.c ****          /* Just skip the invalid entry */
1023:fltk-1.3.4-1/png/pngset.c ****          continue;
1024:fltk-1.3.4-1/png/pngset.c ****       }
1025:fltk-1.3.4-1/png/pngset.c **** 
1026:fltk-1.3.4-1/png/pngset.c ****       np->depth = entries->depth;
1027:fltk-1.3.4-1/png/pngset.c **** 
1028:fltk-1.3.4-1/png/pngset.c ****       /* In the event of out-of-memory just return - there's no point keeping
1029:fltk-1.3.4-1/png/pngset.c ****        * on trying to add sPLT chunks.
1030:fltk-1.3.4-1/png/pngset.c ****        */
1031:fltk-1.3.4-1/png/pngset.c ****       length = strlen(entries->name) + 1;
1032:fltk-1.3.4-1/png/pngset.c ****       np->name = png_voidcast(png_charp, png_malloc_base(png_ptr, length));
1033:fltk-1.3.4-1/png/pngset.c **** 
1034:fltk-1.3.4-1/png/pngset.c ****       if (np->name == NULL)
1035:fltk-1.3.4-1/png/pngset.c ****          break;
1036:fltk-1.3.4-1/png/pngset.c **** 
1037:fltk-1.3.4-1/png/pngset.c ****       memcpy(np->name, entries->name, length);
1038:fltk-1.3.4-1/png/pngset.c **** 
1039:fltk-1.3.4-1/png/pngset.c ****       /* IMPORTANT: we have memory now that won't get freed if something else
1040:fltk-1.3.4-1/png/pngset.c ****        * goes wrong; this code must free it.  png_malloc_array produces no
1041:fltk-1.3.4-1/png/pngset.c ****        * warnings; use a png_chunk_report (below) if there is an error.
1042:fltk-1.3.4-1/png/pngset.c ****        */
1043:fltk-1.3.4-1/png/pngset.c ****       np->entries = png_voidcast(png_sPLT_entryp, png_malloc_array(png_ptr,
1044:fltk-1.3.4-1/png/pngset.c ****           entries->nentries, sizeof (png_sPLT_entry)));
1045:fltk-1.3.4-1/png/pngset.c **** 
1046:fltk-1.3.4-1/png/pngset.c ****       if (np->entries == NULL)
1047:fltk-1.3.4-1/png/pngset.c ****       {
1048:fltk-1.3.4-1/png/pngset.c ****          png_free(png_ptr, np->name);
1049:fltk-1.3.4-1/png/pngset.c ****          np->name = NULL;
1050:fltk-1.3.4-1/png/pngset.c ****          break;
1051:fltk-1.3.4-1/png/pngset.c ****       }
1052:fltk-1.3.4-1/png/pngset.c **** 
1053:fltk-1.3.4-1/png/pngset.c ****       np->nentries = entries->nentries;
1054:fltk-1.3.4-1/png/pngset.c ****       /* This multiply can't overflow because png_malloc_array has already
1055:fltk-1.3.4-1/png/pngset.c ****        * checked it when doing the allocation.
1056:fltk-1.3.4-1/png/pngset.c ****        */
1057:fltk-1.3.4-1/png/pngset.c ****       memcpy(np->entries, entries->entries,
1058:fltk-1.3.4-1/png/pngset.c ****          entries->nentries * sizeof (png_sPLT_entry));
1059:fltk-1.3.4-1/png/pngset.c **** 
1060:fltk-1.3.4-1/png/pngset.c ****       /* Note that 'continue' skips the advance of the out pointer and out
1061:fltk-1.3.4-1/png/pngset.c ****        * count, so an invalid entry is not added.
1062:fltk-1.3.4-1/png/pngset.c ****        */
1063:fltk-1.3.4-1/png/pngset.c ****       info_ptr->valid |= PNG_INFO_sPLT;
1064:fltk-1.3.4-1/png/pngset.c ****       ++(info_ptr->splt_palettes_num);
1065:fltk-1.3.4-1/png/pngset.c ****       ++np;
1066:fltk-1.3.4-1/png/pngset.c ****    }
1067:fltk-1.3.4-1/png/pngset.c ****    while (++entries, --nentries);
1068:fltk-1.3.4-1/png/pngset.c **** 
1069:fltk-1.3.4-1/png/pngset.c ****    if (nentries > 0)
1070:fltk-1.3.4-1/png/pngset.c ****       png_chunk_report(png_ptr, "sPLT out of memory", PNG_CHUNK_WRITE_ERROR);
1071:fltk-1.3.4-1/png/pngset.c **** }
1072:fltk-1.3.4-1/png/pngset.c **** #endif /* sPLT */
1073:fltk-1.3.4-1/png/pngset.c **** 
1074:fltk-1.3.4-1/png/pngset.c **** #ifdef PNG_STORE_UNKNOWN_CHUNKS_SUPPORTED
1075:fltk-1.3.4-1/png/pngset.c **** static png_byte
1076:fltk-1.3.4-1/png/pngset.c **** check_location(png_const_structrp png_ptr, int location)
1077:fltk-1.3.4-1/png/pngset.c **** {
  23              		.loc 1 1077 0
  24              		.cfi_startproc
  25              	.LVL0:
1078:fltk-1.3.4-1/png/pngset.c ****    location &= (PNG_HAVE_IHDR|PNG_HAVE_PLTE|PNG_AFTER_IDAT);
1079:fltk-1.3.4-1/png/pngset.c **** 
1080:fltk-1.3.4-1/png/pngset.c ****    /* New in 1.6.0; copy the location and check it.  This is an API
1081:fltk-1.3.4-1/png/pngset.c ****     * change; previously the app had to use the
1082:fltk-1.3.4-1/png/pngset.c ****     * png_set_unknown_chunk_location API below for each chunk.
1083:fltk-1.3.4-1/png/pngset.c ****     */
1084:fltk-1.3.4-1/png/pngset.c ****    if (location == 0 && (png_ptr->mode & PNG_IS_READ_STRUCT) == 0)
  26              		.loc 1 1084 0
  27 0000 89F0     		movl	%esi, %eax
1077:fltk-1.3.4-1/png/pngset.c ****    location &= (PNG_HAVE_IHDR|PNG_HAVE_PLTE|PNG_AFTER_IDAT);
  28              		.loc 1 1077 0
  29 0002 53       		pushq	%rbx
  30              		.cfi_def_cfa_offset 16
  31              		.cfi_offset 3, -16
  32              		.loc 1 1084 0
  33 0003 83E00B   		andl	$11, %eax
  34              	.LVL1:
  35 0006 7524     		jne	.L13
  36              		.loc 1 1084 0 is_stmt 0 discriminator 1
  37 0008 F6872D01 		testb	$-128, 301(%rdi)
  37      000080
  38 000f 4889FB   		movq	%rdi, %rbx
  39 0012 742C     		je	.L15
  40              	.LVL2:
  41              	.L3:
1085:fltk-1.3.4-1/png/pngset.c ****    {
1086:fltk-1.3.4-1/png/pngset.c ****       /* Write struct, so unknown chunks come from the app */
1087:fltk-1.3.4-1/png/pngset.c ****       png_app_warning(png_ptr,
1088:fltk-1.3.4-1/png/pngset.c ****          "png_set_unknown_chunks now expects a valid location");
1089:fltk-1.3.4-1/png/pngset.c ****       /* Use the old behavior */
1090:fltk-1.3.4-1/png/pngset.c ****       location = (png_byte)(png_ptr->mode &
1091:fltk-1.3.4-1/png/pngset.c ****          (PNG_HAVE_IHDR|PNG_HAVE_PLTE|PNG_AFTER_IDAT));
1092:fltk-1.3.4-1/png/pngset.c ****    }
1093:fltk-1.3.4-1/png/pngset.c **** 
1094:fltk-1.3.4-1/png/pngset.c ****    /* This need not be an internal error - if the app calls
1095:fltk-1.3.4-1/png/pngset.c ****     * png_set_unknown_chunks on a read pointer it must get the location right.
1096:fltk-1.3.4-1/png/pngset.c ****     */
1097:fltk-1.3.4-1/png/pngset.c ****    if (location == 0)
1098:fltk-1.3.4-1/png/pngset.c ****       png_error(png_ptr, "invalid location in png_set_unknown_chunks");
  42              		.loc 1 1098 0 is_stmt 1
  43 0014 BE000000 		movl	$.LC1, %esi
  43      00
  44 0019 4889DF   		movq	%rbx, %rdi
  45 001c E8000000 		call	png_error
  45      00
  46              	.LVL3:
  47              		.p2align 4,,10
  48 0021 0F1F8000 		.p2align 3
  48      000000
  49              	.L9:
1099:fltk-1.3.4-1/png/pngset.c **** 
1100:fltk-1.3.4-1/png/pngset.c ****    /* Now reduce the location to the top-most set bit by removing each least
1101:fltk-1.3.4-1/png/pngset.c ****     * significant bit in turn.
1102:fltk-1.3.4-1/png/pngset.c ****     */
1103:fltk-1.3.4-1/png/pngset.c ****    while (location != (location & -location))
1104:fltk-1.3.4-1/png/pngset.c ****       location &= ~(location & -location);
  50              		.loc 1 1104 0
  51 0028 F7D2     		notl	%edx
  52 002a 21D0     		andl	%edx, %eax
  53              	.LVL4:
  54              	.L13:
1103:fltk-1.3.4-1/png/pngset.c ****       location &= ~(location & -location);
  55              		.loc 1 1103 0
  56 002c 89C2     		movl	%eax, %edx
  57 002e F7DA     		negl	%edx
  58 0030 21C2     		andl	%eax, %edx
  59 0032 39C2     		cmpl	%eax, %edx
  60 0034 75F2     		jne	.L9
1105:fltk-1.3.4-1/png/pngset.c **** 
1106:fltk-1.3.4-1/png/pngset.c ****    /* The cast is safe because 'location' is a bit mask and only the low four
1107:fltk-1.3.4-1/png/pngset.c ****     * bits are significant.
1108:fltk-1.3.4-1/png/pngset.c ****     */
1109:fltk-1.3.4-1/png/pngset.c ****    return (png_byte)location;
1110:fltk-1.3.4-1/png/pngset.c **** }
  61              		.loc 1 1110 0
  62 0036 5B       		popq	%rbx
  63              		.cfi_remember_state
  64              		.cfi_def_cfa_offset 8
  65 0037 C3       		ret
  66              	.LVL5:
  67 0038 0F1F8400 		.p2align 4,,10
  67      00000000 
  68              		.p2align 3
  69              	.L15:
  70              		.cfi_restore_state
1087:fltk-1.3.4-1/png/pngset.c ****          "png_set_unknown_chunks now expects a valid location");
  71              		.loc 1 1087 0
  72 0040 BE000000 		movl	$.LC0, %esi
  72      00
  73 0045 E8000000 		call	png_app_warning
  73      00
  74              	.LVL6:
1097:fltk-1.3.4-1/png/pngset.c ****       png_error(png_ptr, "invalid location in png_set_unknown_chunks");
  75              		.loc 1 1097 0
  76 004a 8B832C01 		movl	300(%rbx), %eax
  76      0000
  77 0050 83E00B   		andl	$11, %eax
  78              	.LVL7:
  79 0053 75D7     		jne	.L13
  80 0055 EBBD     		jmp	.L3
  81              		.cfi_endproc
  82              	.LFE81:
  84              		.section	.text.unlikely.check_location
  85              	.LCOLDE2:
  86              		.section	.text.check_location
  87              	.LHOTE2:
  88              		.section	.text.unlikely.png_set_bKGD,"ax",@progbits
  89              	.LCOLDB3:
  90              		.section	.text.png_set_bKGD,"ax",@progbits
  91              	.LHOTB3:
  92              		.p2align 4,,15
  93              		.globl	png_set_bKGD
  95              	png_set_bKGD:
  96              	.LFB56:
  27:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "bKGD");
  97              		.loc 1 27 0
  98              		.cfi_startproc
  99              	.LVL8:
  30:fltk-1.3.4-1/png/pngset.c ****       return;
 100              		.loc 1 30 0
 101 0000 4885F6   		testq	%rsi, %rsi
 102 0003 0F94C1   		sete	%cl
 103 0006 4885D2   		testq	%rdx, %rdx
 104 0009 0F94C0   		sete	%al
 105 000c 08C1     		orb	%al, %cl
 106 000e 751E     		jne	.L16
 107 0010 4885FF   		testq	%rdi, %rdi
 108 0013 7419     		je	.L16
  33:fltk-1.3.4-1/png/pngset.c ****    info_ptr->valid |= PNG_INFO_bKGD;
 109              		.loc 1 33 0
 110 0015 488B02   		movq	(%rdx), %rax
 111 0018 488986CA 		movq	%rax, 202(%rsi)
 111      000000
 112 001f 0FB74208 		movzwl	8(%rdx), %eax
  34:fltk-1.3.4-1/png/pngset.c **** }
 113              		.loc 1 34 0
 114 0023 834E0820 		orl	$32, 8(%rsi)
  33:fltk-1.3.4-1/png/pngset.c ****    info_ptr->valid |= PNG_INFO_bKGD;
 115              		.loc 1 33 0
 116 0027 668986D2 		movw	%ax, 210(%rsi)
 116      000000
 117              	.L16:
 118 002e F3C3     		rep ret
 119              		.cfi_endproc
 120              	.LFE56:
 122              		.section	.text.unlikely.png_set_bKGD
 123              	.LCOLDE3:
 124              		.section	.text.png_set_bKGD
 125              	.LHOTE3:
 126              		.section	.text.unlikely.png_set_cHRM_fixed,"ax",@progbits
 127              	.LCOLDB4:
 128              		.section	.text.png_set_cHRM_fixed,"ax",@progbits
 129              	.LHOTB4:
 130              		.p2align 4,,15
 131              		.globl	png_set_cHRM_fixed
 133              	png_set_cHRM_fixed:
 134              	.LFB57:
  44:fltk-1.3.4-1/png/pngset.c ****    png_xy xy;
 135              		.loc 1 44 0
 136              		.cfi_startproc
 137              	.LVL9:
 138 0000 55       		pushq	%rbp
 139              		.cfi_def_cfa_offset 16
 140              		.cfi_offset 6, -16
 141 0001 53       		pushq	%rbx
 142              		.cfi_def_cfa_offset 24
 143              		.cfi_offset 3, -24
 144 0002 4883EC38 		subq	$56, %rsp
 145              		.cfi_def_cfa_offset 80
  44:fltk-1.3.4-1/png/pngset.c ****    png_xy xy;
 146              		.loc 1 44 0
 147 0006 64488B04 		movq	%fs:40, %rax
 147      25280000 
 147      00
 148 000f 48894424 		movq	%rax, 40(%rsp)
 148      28
 149 0014 31C0     		xorl	%eax, %eax
  49:fltk-1.3.4-1/png/pngset.c ****       return;
 150              		.loc 1 49 0
 151 0016 4885FF   		testq	%rdi, %rdi
 152 0019 7408     		je	.L18
 153 001b 4885F6   		testq	%rsi, %rsi
 154 001e 4889F5   		movq	%rsi, %rbp
 155 0021 751D     		jne	.L26
 156              	.LVL10:
 157              	.L18:
  66:fltk-1.3.4-1/png/pngset.c **** 
 158              		.loc 1 66 0
 159 0023 488B4424 		movq	40(%rsp), %rax
 159      28
 160 0028 64483304 		xorq	%fs:40, %rax
 160      25280000 
 160      00
 161 0031 7568     		jne	.L27
 162 0033 4883C438 		addq	$56, %rsp
 163              		.cfi_remember_state
 164              		.cfi_def_cfa_offset 24
 165 0037 5B       		popq	%rbx
 166              		.cfi_def_cfa_offset 16
 167 0038 5D       		popq	%rbp
 168              		.cfi_def_cfa_offset 8
 169 0039 C3       		ret
 170              	.LVL11:
 171 003a 660F1F44 		.p2align 4,,10
 171      0000
 172              		.p2align 3
 173              	.L26:
 174              		.cfi_restore_state
 175              	.LBB73:
 176              	.LBB74:
  54:fltk-1.3.4-1/png/pngset.c ****    xy.greeny = green_y;
 177              		.loc 1 54 0
 178 0040 8B442450 		movl	80(%rsp), %eax
  61:fltk-1.3.4-1/png/pngset.c ****        2/* override with app values*/) != 0)
 179              		.loc 1 61 0
 180 0044 488D7634 		leaq	52(%rsi), %rsi
 181              	.LVL12:
  58:fltk-1.3.4-1/png/pngset.c ****    xy.whitey = white_y;
 182              		.loc 1 58 0
 183 0048 89542418 		movl	%edx, 24(%rsp)
  59:fltk-1.3.4-1/png/pngset.c **** 
 184              		.loc 1 59 0
 185 004c 894C241C 		movl	%ecx, 28(%rsp)
  61:fltk-1.3.4-1/png/pngset.c ****        2/* override with app values*/) != 0)
 186              		.loc 1 61 0
 187 0050 4889E2   		movq	%rsp, %rdx
 188              	.LVL13:
 189 0053 B9020000 		movl	$2, %ecx
 189      00
 190              	.LVL14:
 191 0058 4889FB   		movq	%rdi, %rbx
 192              	.LVL15:
  52:fltk-1.3.4-1/png/pngset.c ****    xy.redy = red_y;
 193              		.loc 1 52 0
 194 005b 44890424 		movl	%r8d, (%rsp)
  53:fltk-1.3.4-1/png/pngset.c ****    xy.greenx = green_x;
 195              		.loc 1 53 0
 196 005f 44894C24 		movl	%r9d, 4(%rsp)
 196      04
  54:fltk-1.3.4-1/png/pngset.c ****    xy.greeny = green_y;
 197              		.loc 1 54 0
 198 0064 89442408 		movl	%eax, 8(%rsp)
  55:fltk-1.3.4-1/png/pngset.c ****    xy.bluex = blue_x;
 199              		.loc 1 55 0
 200 0068 8B442458 		movl	88(%rsp), %eax
 201              	.LVL16:
 202 006c 8944240C 		movl	%eax, 12(%rsp)
  56:fltk-1.3.4-1/png/pngset.c ****    xy.bluey = blue_y;
 203              		.loc 1 56 0
 204 0070 8B442460 		movl	96(%rsp), %eax
 205 0074 89442410 		movl	%eax, 16(%rsp)
  57:fltk-1.3.4-1/png/pngset.c ****    xy.whitex = white_x;
 206              		.loc 1 57 0
 207 0078 8B442468 		movl	104(%rsp), %eax
 208 007c 89442414 		movl	%eax, 20(%rsp)
  61:fltk-1.3.4-1/png/pngset.c ****        2/* override with app values*/) != 0)
 209              		.loc 1 61 0
 210 0080 E8000000 		call	png_colorspace_set_chromaticities
 210      00
 211              	.LVL17:
 212 0085 85C0     		testl	%eax, %eax
 213 0087 7405     		je	.L20
  63:fltk-1.3.4-1/png/pngset.c **** 
 214              		.loc 1 63 0
 215 0089 66834D7E 		orw	$16, 126(%rbp)
 215      10
 216              	.L20:
  65:fltk-1.3.4-1/png/pngset.c **** }
 217              		.loc 1 65 0
 218 008e 4889EE   		movq	%rbp, %rsi
 219 0091 4889DF   		movq	%rbx, %rdi
 220 0094 E8000000 		call	png_colorspace_sync_info
 220      00
 221              	.LVL18:
 222 0099 EB88     		jmp	.L18
 223              	.LVL19:
 224              	.L27:
 225              	.LBE74:
 226              	.LBE73:
  66:fltk-1.3.4-1/png/pngset.c **** 
 227              		.loc 1 66 0
 228 009b E8000000 		call	__stack_chk_fail
 228      00
 229              	.LVL20:
 230              		.cfi_endproc
 231              	.LFE57:
 233              		.section	.text.unlikely.png_set_cHRM_fixed
 234              	.LCOLDE4:
 235              		.section	.text.png_set_cHRM_fixed
 236              	.LHOTE4:
 237              		.section	.text.unlikely.png_set_cHRM_XYZ_fixed,"ax",@progbits
 238              	.LCOLDB5:
 239              		.section	.text.png_set_cHRM_XYZ_fixed,"ax",@progbits
 240              	.LHOTB5:
 241              		.p2align 4,,15
 242              		.globl	png_set_cHRM_XYZ_fixed
 244              	png_set_cHRM_XYZ_fixed:
 245              	.LFB58:
  75:fltk-1.3.4-1/png/pngset.c ****    png_XYZ XYZ;
 246              		.loc 1 75 0
 247              		.cfi_startproc
 248              	.LVL21:
 249 0000 55       		pushq	%rbp
 250              		.cfi_def_cfa_offset 16
 251              		.cfi_offset 6, -16
 252 0001 53       		pushq	%rbx
 253              		.cfi_def_cfa_offset 24
 254              		.cfi_offset 3, -24
 255 0002 4883EC38 		subq	$56, %rsp
 256              		.cfi_def_cfa_offset 80
  75:fltk-1.3.4-1/png/pngset.c ****    png_XYZ XYZ;
 257              		.loc 1 75 0
 258 0006 64488B04 		movq	%fs:40, %rax
 258      25280000 
 258      00
 259 000f 48894424 		movq	%rax, 40(%rsp)
 259      28
 260 0014 31C0     		xorl	%eax, %eax
  80:fltk-1.3.4-1/png/pngset.c ****       return;
 261              		.loc 1 80 0
 262 0016 4885FF   		testq	%rdi, %rdi
 263 0019 7408     		je	.L28
 264 001b 4885F6   		testq	%rsi, %rsi
 265 001e 4889F5   		movq	%rsi, %rbp
 266 0021 751D     		jne	.L36
 267              	.LVL22:
 268              	.L28:
  98:fltk-1.3.4-1/png/pngset.c **** 
 269              		.loc 1 98 0
 270 0023 488B4424 		movq	40(%rsp), %rax
 270      28
 271 0028 64483304 		xorq	%fs:40, %rax
 271      25280000 
 271      00
 272 0031 7570     		jne	.L37
 273 0033 4883C438 		addq	$56, %rsp
 274              		.cfi_remember_state
 275              		.cfi_def_cfa_offset 24
 276 0037 5B       		popq	%rbx
 277              		.cfi_def_cfa_offset 16
 278 0038 5D       		popq	%rbp
 279              		.cfi_def_cfa_offset 8
 280 0039 C3       		ret
 281              	.LVL23:
 282 003a 660F1F44 		.p2align 4,,10
 282      0000
 283              		.p2align 3
 284              	.L36:
 285              		.cfi_restore_state
 286              	.LBB77:
 287              	.LBB78:
  87:fltk-1.3.4-1/png/pngset.c ****    XYZ.green_Z = int_green_Z;
 288              		.loc 1 87 0
 289 0040 8B442450 		movl	80(%rsp), %eax
  93:fltk-1.3.4-1/png/pngset.c ****        &XYZ, 2) != 0)
 290              		.loc 1 93 0
 291 0044 488D7634 		leaq	52(%rsi), %rsi
 292              	.LVL24:
  83:fltk-1.3.4-1/png/pngset.c ****    XYZ.red_Y = int_red_Y;
 293              		.loc 1 83 0
 294 0048 891424   		movl	%edx, (%rsp)
  84:fltk-1.3.4-1/png/pngset.c ****    XYZ.red_Z = int_red_Z;
 295              		.loc 1 84 0
 296 004b 894C2404 		movl	%ecx, 4(%rsp)
  93:fltk-1.3.4-1/png/pngset.c ****        &XYZ, 2) != 0)
 297              		.loc 1 93 0
 298 004f 4889E2   		movq	%rsp, %rdx
 299              	.LVL25:
 300 0052 B9020000 		movl	$2, %ecx
 300      00
 301              	.LVL26:
 302 0057 4889FB   		movq	%rdi, %rbx
 303              	.LVL27:
  85:fltk-1.3.4-1/png/pngset.c ****    XYZ.green_X = int_green_X;
 304              		.loc 1 85 0
 305 005a 44894424 		movl	%r8d, 8(%rsp)
 305      08
  86:fltk-1.3.4-1/png/pngset.c ****    XYZ.green_Y = int_green_Y;
 306              		.loc 1 86 0
 307 005f 44894C24 		movl	%r9d, 12(%rsp)
 307      0C
  87:fltk-1.3.4-1/png/pngset.c ****    XYZ.green_Z = int_green_Z;
 308              		.loc 1 87 0
 309 0064 89442410 		movl	%eax, 16(%rsp)
  88:fltk-1.3.4-1/png/pngset.c ****    XYZ.blue_X = int_blue_X;
 310              		.loc 1 88 0
 311 0068 8B442458 		movl	88(%rsp), %eax
 312              	.LVL28:
 313 006c 89442414 		movl	%eax, 20(%rsp)
  89:fltk-1.3.4-1/png/pngset.c ****    XYZ.blue_Y = int_blue_Y;
 314              		.loc 1 89 0
 315 0070 8B442460 		movl	96(%rsp), %eax
 316 0074 89442418 		movl	%eax, 24(%rsp)
  90:fltk-1.3.4-1/png/pngset.c ****    XYZ.blue_Z = int_blue_Z;
 317              		.loc 1 90 0
 318 0078 8B442468 		movl	104(%rsp), %eax
 319 007c 8944241C 		movl	%eax, 28(%rsp)
  91:fltk-1.3.4-1/png/pngset.c **** 
 320              		.loc 1 91 0
 321 0080 8B442470 		movl	112(%rsp), %eax
 322 0084 89442420 		movl	%eax, 32(%rsp)
  93:fltk-1.3.4-1/png/pngset.c ****        &XYZ, 2) != 0)
 323              		.loc 1 93 0
 324 0088 E8000000 		call	png_colorspace_set_endpoints
 324      00
 325              	.LVL29:
 326 008d 85C0     		testl	%eax, %eax
 327 008f 7405     		je	.L30
  95:fltk-1.3.4-1/png/pngset.c **** 
 328              		.loc 1 95 0
 329 0091 66834D7E 		orw	$16, 126(%rbp)
 329      10
 330              	.L30:
  97:fltk-1.3.4-1/png/pngset.c **** }
 331              		.loc 1 97 0
 332 0096 4889EE   		movq	%rbp, %rsi
 333 0099 4889DF   		movq	%rbx, %rdi
 334 009c E8000000 		call	png_colorspace_sync_info
 334      00
 335              	.LVL30:
 336 00a1 EB80     		jmp	.L28
 337              	.LVL31:
 338              	.L37:
 339              	.LBE78:
 340              	.LBE77:
  98:fltk-1.3.4-1/png/pngset.c **** 
 341              		.loc 1 98 0
 342 00a3 E8000000 		call	__stack_chk_fail
 342      00
 343              	.LVL32:
 344              		.cfi_endproc
 345              	.LFE58:
 347              		.section	.text.unlikely.png_set_cHRM_XYZ_fixed
 348              	.LCOLDE5:
 349              		.section	.text.png_set_cHRM_XYZ_fixed
 350              	.LHOTE5:
 351              		.section	.rodata.str1.1,"aMS",@progbits,1
 352              	.LC6:
 353 0000 6348524D 		.string	"cHRM Blue Y"
 353      20426C75 
 353      65205900 
 354              	.LC7:
 355 000c 6348524D 		.string	"cHRM Blue X"
 355      20426C75 
 355      65205800 
 356              	.LC8:
 357 0018 6348524D 		.string	"cHRM Green Y"
 357      20477265 
 357      656E2059 
 357      00
 358              	.LC9:
 359 0025 6348524D 		.string	"cHRM Green X"
 359      20477265 
 359      656E2058 
 359      00
 360              	.LC10:
 361 0032 6348524D 		.string	"cHRM Red Y"
 361      20526564 
 361      205900
 362              	.LC11:
 363 003d 6348524D 		.string	"cHRM Red X"
 363      20526564 
 363      205800
 364              	.LC12:
 365 0048 6348524D 		.string	"cHRM White Y"
 365      20576869 
 365      74652059 
 365      00
 366              	.LC13:
 367 0055 6348524D 		.string	"cHRM White X"
 367      20576869 
 367      74652058 
 367      00
 368              		.section	.text.unlikely.png_set_cHRM,"ax",@progbits
 369              	.LCOLDB14:
 370              		.section	.text.png_set_cHRM,"ax",@progbits
 371              	.LHOTB14:
 372              		.p2align 4,,15
 373              		.globl	png_set_cHRM
 375              	png_set_cHRM:
 376              	.LFB59:
 105:fltk-1.3.4-1/png/pngset.c ****    png_set_cHRM_fixed(png_ptr, info_ptr,
 377              		.loc 1 105 0
 378              		.cfi_startproc
 379              	.LVL33:
 380 0000 4157     		pushq	%r15
 381              		.cfi_def_cfa_offset 16
 382              		.cfi_offset 15, -16
 383 0002 4156     		pushq	%r14
 384              		.cfi_def_cfa_offset 24
 385              		.cfi_offset 14, -24
 386 0004 4155     		pushq	%r13
 387              		.cfi_def_cfa_offset 32
 388              		.cfi_offset 13, -32
 389 0006 4154     		pushq	%r12
 390              		.cfi_def_cfa_offset 40
 391              		.cfi_offset 12, -40
 392 0008 55       		pushq	%rbp
 393              		.cfi_def_cfa_offset 48
 394              		.cfi_offset 6, -48
 395 0009 53       		pushq	%rbx
 396              		.cfi_def_cfa_offset 56
 397              		.cfi_offset 3, -56
 398 000a 4889F5   		movq	%rsi, %rbp
 106:fltk-1.3.4-1/png/pngset.c ****       png_fixed(png_ptr, white_x, "cHRM White X"),
 399              		.loc 1 106 0
 400 000d BE000000 		movl	$.LC6, %esi
 400      00
 401              	.LVL34:
 105:fltk-1.3.4-1/png/pngset.c ****    png_set_cHRM_fixed(png_ptr, info_ptr,
 402              		.loc 1 105 0
 403 0012 4889FB   		movq	%rdi, %rbx
 404 0015 4883EC78 		subq	$120, %rsp
 405              		.cfi_def_cfa_offset 176
 105:fltk-1.3.4-1/png/pngset.c ****    png_set_cHRM_fixed(png_ptr, info_ptr,
 406              		.loc 1 105 0
 407 0019 F20F1144 		movsd	%xmm0, 48(%rsp)
 407      2430
 106:fltk-1.3.4-1/png/pngset.c ****       png_fixed(png_ptr, white_x, "cHRM White X"),
 408              		.loc 1 106 0
 409 001f 660F28C7 		movapd	%xmm7, %xmm0
 410              	.LVL35:
 105:fltk-1.3.4-1/png/pngset.c ****    png_set_cHRM_fixed(png_ptr, info_ptr,
 411              		.loc 1 105 0
 412 0023 F20F114C 		movsd	%xmm1, 40(%rsp)
 412      2428
 413 0029 F20F1154 		movsd	%xmm2, 32(%rsp)
 413      2420
 414 002f F20F115C 		movsd	%xmm3, 24(%rsp)
 414      2418
 415 0035 F20F1164 		movsd	%xmm4, 16(%rsp)
 415      2410
 416 003b F20F116C 		movsd	%xmm5, 8(%rsp)
 416      2408
 417 0041 F20F1134 		movsd	%xmm6, (%rsp)
 417      24
 418 0046 64488B04 		movq	%fs:40, %rax
 418      25280000 
 418      00
 419 004f 48894424 		movq	%rax, 104(%rsp)
 419      68
 420 0054 31C0     		xorl	%eax, %eax
 106:fltk-1.3.4-1/png/pngset.c ****       png_fixed(png_ptr, white_x, "cHRM White X"),
 421              		.loc 1 106 0
 422 0056 E8000000 		call	png_fixed
 422      00
 423              	.LVL36:
 424 005b F20F1034 		movsd	(%rsp), %xmm6
 424      24
 425 0060 BE000000 		movl	$.LC7, %esi
 425      00
 426 0065 4889DF   		movq	%rbx, %rdi
 427 0068 8944243C 		movl	%eax, 60(%rsp)
 428 006c 660F28C6 		movapd	%xmm6, %xmm0
 429 0070 E8000000 		call	png_fixed
 429      00
 430              	.LVL37:
 431 0075 F20F106C 		movsd	8(%rsp), %xmm5
 431      2408
 432 007b BE000000 		movl	$.LC8, %esi
 432      00
 433 0080 4889DF   		movq	%rbx, %rdi
 434 0083 890424   		movl	%eax, (%rsp)
 435              	.LVL38:
 436 0086 660F28C5 		movapd	%xmm5, %xmm0
 437 008a E8000000 		call	png_fixed
 437      00
 438              	.LVL39:
 439 008f F20F1064 		movsd	16(%rsp), %xmm4
 439      2410
 440 0095 BE000000 		movl	$.LC9, %esi
 440      00
 441 009a 4889DF   		movq	%rbx, %rdi
 442 009d 4189C4   		movl	%eax, %r12d
 443 00a0 660F28C4 		movapd	%xmm4, %xmm0
 444 00a4 E8000000 		call	png_fixed
 444      00
 445              	.LVL40:
 446 00a9 F20F105C 		movsd	24(%rsp), %xmm3
 446      2418
 447 00af BE000000 		movl	$.LC10, %esi
 447      00
 448 00b4 4889DF   		movq	%rbx, %rdi
 449 00b7 4189C5   		movl	%eax, %r13d
 450 00ba 660F28C3 		movapd	%xmm3, %xmm0
 451 00be E8000000 		call	png_fixed
 451      00
 452              	.LVL41:
 453 00c3 F20F1054 		movsd	32(%rsp), %xmm2
 453      2420
 454 00c9 BE000000 		movl	$.LC11, %esi
 454      00
 455 00ce 4889DF   		movq	%rbx, %rdi
 456 00d1 4189C6   		movl	%eax, %r14d
 457 00d4 660F28C2 		movapd	%xmm2, %xmm0
 458 00d8 E8000000 		call	png_fixed
 458      00
 459              	.LVL42:
 460 00dd F20F104C 		movsd	40(%rsp), %xmm1
 460      2428
 461 00e3 BE000000 		movl	$.LC12, %esi
 461      00
 462 00e8 4889DF   		movq	%rbx, %rdi
 463 00eb 4189C7   		movl	%eax, %r15d
 464 00ee 660F28C1 		movapd	%xmm1, %xmm0
 465 00f2 E8000000 		call	png_fixed
 465      00
 466              	.LVL43:
 467 00f7 F2440F10 		movsd	48(%rsp), %xmm8
 467      442430
 468 00fe BE000000 		movl	$.LC13, %esi
 468      00
 469 0103 4889DF   		movq	%rbx, %rdi
 470 0106 89442408 		movl	%eax, 8(%rsp)
 471              	.LVL44:
 472 010a 66410F28 		movapd	%xmm8, %xmm0
 472      C0
 473 010f E8000000 		call	png_fixed
 473      00
 474              	.LVL45:
 475              	.LBB83:
 476              	.LBB84:
  49:fltk-1.3.4-1/png/pngset.c ****       return;
 477              		.loc 1 49 0
 478 0114 4885DB   		testq	%rbx, %rbx
 479 0117 745E     		je	.L38
 480 0119 4885ED   		testq	%rbp, %rbp
 481 011c 7459     		je	.L38
 482              	.LVL46:
 483              	.LBB85:
 484              	.LBB86:
  56:fltk-1.3.4-1/png/pngset.c ****    xy.bluey = blue_y;
 485              		.loc 1 56 0
 486 011e 8B1424   		movl	(%rsp), %edx
  57:fltk-1.3.4-1/png/pngset.c ****    xy.whitex = white_x;
 487              		.loc 1 57 0
 488 0121 8B4C243C 		movl	60(%rsp), %ecx
  61:fltk-1.3.4-1/png/pngset.c ****        2/* override with app values*/) != 0)
 489              		.loc 1 61 0
 490 0125 488D7534 		leaq	52(%rbp), %rsi
  58:fltk-1.3.4-1/png/pngset.c ****    xy.whitey = white_y;
 491              		.loc 1 58 0
 492 0129 89442458 		movl	%eax, 88(%rsp)
  59:fltk-1.3.4-1/png/pngset.c **** 
 493              		.loc 1 59 0
 494 012d 8B442408 		movl	8(%rsp), %eax
 495              	.LVL47:
  61:fltk-1.3.4-1/png/pngset.c ****        2/* override with app values*/) != 0)
 496              		.loc 1 61 0
 497 0131 4889DF   		movq	%rbx, %rdi
  52:fltk-1.3.4-1/png/pngset.c ****    xy.redy = red_y;
 498              		.loc 1 52 0
 499 0134 44897C24 		movl	%r15d, 64(%rsp)
 499      40
  53:fltk-1.3.4-1/png/pngset.c ****    xy.greenx = green_x;
 500              		.loc 1 53 0
 501 0139 44897424 		movl	%r14d, 68(%rsp)
 501      44
  56:fltk-1.3.4-1/png/pngset.c ****    xy.bluey = blue_y;
 502              		.loc 1 56 0
 503 013e 89542450 		movl	%edx, 80(%rsp)
  61:fltk-1.3.4-1/png/pngset.c ****        2/* override with app values*/) != 0)
 504              		.loc 1 61 0
 505 0142 488D5424 		leaq	64(%rsp), %rdx
 505      40
  57:fltk-1.3.4-1/png/pngset.c ****    xy.whitex = white_x;
 506              		.loc 1 57 0
 507 0147 894C2454 		movl	%ecx, 84(%rsp)
  61:fltk-1.3.4-1/png/pngset.c ****        2/* override with app values*/) != 0)
 508              		.loc 1 61 0
 509 014b B9020000 		movl	$2, %ecx
 509      00
  54:fltk-1.3.4-1/png/pngset.c ****    xy.greeny = green_y;
 510              		.loc 1 54 0
 511 0150 44896C24 		movl	%r13d, 72(%rsp)
 511      48
  55:fltk-1.3.4-1/png/pngset.c ****    xy.bluex = blue_x;
 512              		.loc 1 55 0
 513 0155 44896424 		movl	%r12d, 76(%rsp)
 513      4C
  59:fltk-1.3.4-1/png/pngset.c **** 
 514              		.loc 1 59 0
 515 015a 8944245C 		movl	%eax, 92(%rsp)
  61:fltk-1.3.4-1/png/pngset.c ****        2/* override with app values*/) != 0)
 516              		.loc 1 61 0
 517 015e E8000000 		call	png_colorspace_set_chromaticities
 517      00
 518              	.LVL48:
 519 0163 85C0     		testl	%eax, %eax
 520 0165 7405     		je	.L40
  63:fltk-1.3.4-1/png/pngset.c **** 
 521              		.loc 1 63 0
 522 0167 66834D7E 		orw	$16, 126(%rbp)
 522      10
 523              	.L40:
  65:fltk-1.3.4-1/png/pngset.c **** }
 524              		.loc 1 65 0
 525 016c 4889EE   		movq	%rbp, %rsi
 526 016f 4889DF   		movq	%rbx, %rdi
 527 0172 E8000000 		call	png_colorspace_sync_info
 527      00
 528              	.LVL49:
 529              	.L38:
 530              	.LBE86:
 531              	.LBE85:
 532              	.LBE84:
 533              	.LBE83:
 115:fltk-1.3.4-1/png/pngset.c **** 
 534              		.loc 1 115 0
 535 0177 488B4424 		movq	104(%rsp), %rax
 535      68
 536 017c 64483304 		xorq	%fs:40, %rax
 536      25280000 
 536      00
 537 0185 750F     		jne	.L46
 538 0187 4883C478 		addq	$120, %rsp
 539              		.cfi_remember_state
 540              		.cfi_def_cfa_offset 56
 541 018b 5B       		popq	%rbx
 542              		.cfi_def_cfa_offset 48
 543              	.LVL50:
 544 018c 5D       		popq	%rbp
 545              		.cfi_def_cfa_offset 40
 546              	.LVL51:
 547 018d 415C     		popq	%r12
 548              		.cfi_def_cfa_offset 32
 549 018f 415D     		popq	%r13
 550              		.cfi_def_cfa_offset 24
 551 0191 415E     		popq	%r14
 552              		.cfi_def_cfa_offset 16
 553 0193 415F     		popq	%r15
 554              		.cfi_def_cfa_offset 8
 555 0195 C3       		ret
 556              	.LVL52:
 557              	.L46:
 558              		.cfi_restore_state
 559 0196 E8000000 		call	__stack_chk_fail
 559      00
 560              	.LVL53:
 561              		.cfi_endproc
 562              	.LFE59:
 564              		.section	.text.unlikely.png_set_cHRM
 565              	.LCOLDE14:
 566              		.section	.text.png_set_cHRM
 567              	.LHOTE14:
 568              		.section	.rodata.str1.1
 569              	.LC15:
 570 0062 6348524D 		.string	"cHRM Red Z"
 570      20526564 
 570      205A00
 571              		.section	.text.unlikely.png_set_cHRM_XYZ,"ax",@progbits
 572              	.LCOLDB16:
 573              		.section	.text.png_set_cHRM_XYZ,"ax",@progbits
 574              	.LHOTB16:
 575              		.p2align 4,,15
 576              		.globl	png_set_cHRM_XYZ
 578              	png_set_cHRM_XYZ:
 579              	.LFB60:
 121:fltk-1.3.4-1/png/pngset.c ****    png_set_cHRM_XYZ_fixed(png_ptr, info_ptr,
 580              		.loc 1 121 0
 581              		.cfi_startproc
 582              	.LVL54:
 583 0000 4157     		pushq	%r15
 584              		.cfi_def_cfa_offset 16
 585              		.cfi_offset 15, -16
 586 0002 4156     		pushq	%r14
 587              		.cfi_def_cfa_offset 24
 588              		.cfi_offset 14, -24
 589 0004 4155     		pushq	%r13
 590              		.cfi_def_cfa_offset 32
 591              		.cfi_offset 13, -32
 592 0006 4154     		pushq	%r12
 593              		.cfi_def_cfa_offset 40
 594              		.cfi_offset 12, -40
 595 0008 55       		pushq	%rbp
 596              		.cfi_def_cfa_offset 48
 597              		.cfi_offset 6, -48
 598 0009 53       		pushq	%rbx
 599              		.cfi_def_cfa_offset 56
 600              		.cfi_offset 3, -56
 601 000a 4889F5   		movq	%rsi, %rbp
 122:fltk-1.3.4-1/png/pngset.c ****       png_fixed(png_ptr, red_X, "cHRM Red X"),
 602              		.loc 1 122 0
 603 000d BE000000 		movl	$.LC15, %esi
 603      00
 604              	.LVL55:
 121:fltk-1.3.4-1/png/pngset.c ****    png_set_cHRM_XYZ_fixed(png_ptr, info_ptr,
 605              		.loc 1 121 0
 606 0012 4889FB   		movq	%rdi, %rbx
 607 0015 4881EC88 		subq	$136, %rsp
 607      000000
 608              		.cfi_def_cfa_offset 192
 121:fltk-1.3.4-1/png/pngset.c ****    png_set_cHRM_XYZ_fixed(png_ptr, info_ptr,
 609              		.loc 1 121 0
 610 001c F20F1144 		movsd	%xmm0, 64(%rsp)
 610      2440
 122:fltk-1.3.4-1/png/pngset.c ****       png_fixed(png_ptr, red_X, "cHRM Red X"),
 611              		.loc 1 122 0
 612 0022 F20F1084 		movsd	192(%rsp), %xmm0
 612      24C00000 
 612      00
 613              	.LVL56:
 121:fltk-1.3.4-1/png/pngset.c ****    png_set_cHRM_XYZ_fixed(png_ptr, info_ptr,
 614              		.loc 1 121 0
 615 002b F20F114C 		movsd	%xmm1, 56(%rsp)
 615      2438
 616 0031 F20F1154 		movsd	%xmm2, 48(%rsp)
 616      2430
 617 0037 F20F115C 		movsd	%xmm3, 40(%rsp)
 617      2428
 618 003d F20F1164 		movsd	%xmm4, 32(%rsp)
 618      2420
 619 0043 F20F116C 		movsd	%xmm5, 24(%rsp)
 619      2418
 620 0049 F20F1174 		movsd	%xmm6, 16(%rsp)
 620      2410
 621 004f F20F117C 		movsd	%xmm7, 8(%rsp)
 621      2408
 622 0055 64488B04 		movq	%fs:40, %rax
 622      25280000 
 622      00
 623 005e 48894424 		movq	%rax, 120(%rsp)
 623      78
 624 0063 31C0     		xorl	%eax, %eax
 122:fltk-1.3.4-1/png/pngset.c ****       png_fixed(png_ptr, red_X, "cHRM Red X"),
 625              		.loc 1 122 0
 626 0065 E8000000 		call	png_fixed
 626      00
 627              	.LVL57:
 628 006a F20F107C 		movsd	8(%rsp), %xmm7
 628      2408
 629 0070 BE000000 		movl	$.LC10, %esi
 629      00
 630 0075 4889DF   		movq	%rbx, %rdi
 631 0078 8944244C 		movl	%eax, 76(%rsp)
 632 007c 660F28C7 		movapd	%xmm7, %xmm0
 633 0080 E8000000 		call	png_fixed
 633      00
 634              	.LVL58:
 635 0085 F20F1074 		movsd	16(%rsp), %xmm6
 635      2410
 636 008b BE000000 		movl	$.LC11, %esi
 636      00
 637 0090 4889DF   		movq	%rbx, %rdi
 638 0093 89442408 		movl	%eax, 8(%rsp)
 639              	.LVL59:
 640 0097 660F28C6 		movapd	%xmm6, %xmm0
 641 009b E8000000 		call	png_fixed
 641      00
 642              	.LVL60:
 643 00a0 F20F106C 		movsd	24(%rsp), %xmm5
 643      2418
 644 00a6 BE000000 		movl	$.LC15, %esi
 644      00
 645 00ab 4889DF   		movq	%rbx, %rdi
 646 00ae 89442410 		movl	%eax, 16(%rsp)
 647              	.LVL61:
 648 00b2 660F28C5 		movapd	%xmm5, %xmm0
 649 00b6 E8000000 		call	png_fixed
 649      00
 650              	.LVL62:
 651 00bb F20F1064 		movsd	32(%rsp), %xmm4
 651      2420
 652 00c1 BE000000 		movl	$.LC10, %esi
 652      00
 653 00c6 4889DF   		movq	%rbx, %rdi
 654 00c9 89442418 		movl	%eax, 24(%rsp)
 655              	.LVL63:
 656 00cd 660F28C4 		movapd	%xmm4, %xmm0
 657 00d1 E8000000 		call	png_fixed
 657      00
 658              	.LVL64:
 659 00d6 F20F105C 		movsd	40(%rsp), %xmm3
 659      2428
 660 00dc BE000000 		movl	$.LC11, %esi
 660      00
 661 00e1 4889DF   		movq	%rbx, %rdi
 662 00e4 4189C4   		movl	%eax, %r12d
 663 00e7 660F28C3 		movapd	%xmm3, %xmm0
 664 00eb E8000000 		call	png_fixed
 664      00
 665              	.LVL65:
 666 00f0 F20F1054 		movsd	48(%rsp), %xmm2
 666      2430
 667 00f6 BE000000 		movl	$.LC15, %esi
 667      00
 668 00fb 4889DF   		movq	%rbx, %rdi
 669 00fe 4189C5   		movl	%eax, %r13d
 670 0101 660F28C2 		movapd	%xmm2, %xmm0
 671 0105 E8000000 		call	png_fixed
 671      00
 672              	.LVL66:
 673 010a F20F104C 		movsd	56(%rsp), %xmm1
 673      2438
 674 0110 BE000000 		movl	$.LC10, %esi
 674      00
 675 0115 4889DF   		movq	%rbx, %rdi
 676 0118 4189C6   		movl	%eax, %r14d
 677 011b 660F28C1 		movapd	%xmm1, %xmm0
 678 011f E8000000 		call	png_fixed
 678      00
 679              	.LVL67:
 680 0124 F2440F10 		movsd	64(%rsp), %xmm8
 680      442440
 681 012b BE000000 		movl	$.LC11, %esi
 681      00
 682 0130 4889DF   		movq	%rbx, %rdi
 683 0133 4189C7   		movl	%eax, %r15d
 684 0136 66410F28 		movapd	%xmm8, %xmm0
 684      C0
 685 013b E8000000 		call	png_fixed
 685      00
 686              	.LVL68:
 687              	.LBB91:
 688              	.LBB92:
  80:fltk-1.3.4-1/png/pngset.c ****       return;
 689              		.loc 1 80 0
 690 0140 4885DB   		testq	%rbx, %rbx
 691 0143 7467     		je	.L47
 692 0145 4885ED   		testq	%rbp, %rbp
 693 0148 7462     		je	.L47
 694              	.LVL69:
 695              	.LBB93:
 696              	.LBB94:
  88:fltk-1.3.4-1/png/pngset.c ****    XYZ.blue_X = int_blue_X;
 697              		.loc 1 88 0
 698 014a 8B542418 		movl	24(%rsp), %edx
  89:fltk-1.3.4-1/png/pngset.c ****    XYZ.blue_Y = int_blue_Y;
 699              		.loc 1 89 0
 700 014e 8B4C2410 		movl	16(%rsp), %ecx
  93:fltk-1.3.4-1/png/pngset.c ****        &XYZ, 2) != 0)
 701              		.loc 1 93 0
 702 0152 488D7534 		leaq	52(%rbp), %rsi
  83:fltk-1.3.4-1/png/pngset.c ****    XYZ.red_Y = int_red_Y;
 703              		.loc 1 83 0
 704 0156 89442450 		movl	%eax, 80(%rsp)
  91:fltk-1.3.4-1/png/pngset.c **** 
 705              		.loc 1 91 0
 706 015a 8B44244C 		movl	76(%rsp), %eax
 707              	.LVL70:
  93:fltk-1.3.4-1/png/pngset.c ****        &XYZ, 2) != 0)
 708              		.loc 1 93 0
 709 015e 4889DF   		movq	%rbx, %rdi
  84:fltk-1.3.4-1/png/pngset.c ****    XYZ.red_Z = int_red_Z;
 710              		.loc 1 84 0
 711 0161 44897C24 		movl	%r15d, 84(%rsp)
 711      54
  85:fltk-1.3.4-1/png/pngset.c ****    XYZ.green_X = int_green_X;
 712              		.loc 1 85 0
 713 0166 44897424 		movl	%r14d, 88(%rsp)
 713      58
  88:fltk-1.3.4-1/png/pngset.c ****    XYZ.blue_X = int_blue_X;
 714              		.loc 1 88 0
 715 016b 89542464 		movl	%edx, 100(%rsp)
  90:fltk-1.3.4-1/png/pngset.c ****    XYZ.blue_Z = int_blue_Z;
 716              		.loc 1 90 0
 717 016f 8B542408 		movl	8(%rsp), %edx
  89:fltk-1.3.4-1/png/pngset.c ****    XYZ.blue_Y = int_blue_Y;
 718              		.loc 1 89 0
 719 0173 894C2468 		movl	%ecx, 104(%rsp)
  93:fltk-1.3.4-1/png/pngset.c ****        &XYZ, 2) != 0)
 720              		.loc 1 93 0
 721 0177 B9020000 		movl	$2, %ecx
 721      00
  86:fltk-1.3.4-1/png/pngset.c ****    XYZ.green_Y = int_green_Y;
 722              		.loc 1 86 0
 723 017c 44896C24 		movl	%r13d, 92(%rsp)
 723      5C
  87:fltk-1.3.4-1/png/pngset.c ****    XYZ.green_Z = int_green_Z;
 724              		.loc 1 87 0
 725 0181 44896424 		movl	%r12d, 96(%rsp)
 725      60
  91:fltk-1.3.4-1/png/pngset.c **** 
 726              		.loc 1 91 0
 727 0186 89442470 		movl	%eax, 112(%rsp)
  90:fltk-1.3.4-1/png/pngset.c ****    XYZ.blue_Z = int_blue_Z;
 728              		.loc 1 90 0
 729 018a 8954246C 		movl	%edx, 108(%rsp)
  93:fltk-1.3.4-1/png/pngset.c ****        &XYZ, 2) != 0)
 730              		.loc 1 93 0
 731 018e 488D5424 		leaq	80(%rsp), %rdx
 731      50
 732              	.LVL71:
 733 0193 E8000000 		call	png_colorspace_set_endpoints
 733      00
 734              	.LVL72:
 735 0198 85C0     		testl	%eax, %eax
 736 019a 7405     		je	.L49
  95:fltk-1.3.4-1/png/pngset.c **** 
 737              		.loc 1 95 0
 738 019c 66834D7E 		orw	$16, 126(%rbp)
 738      10
 739              	.L49:
  97:fltk-1.3.4-1/png/pngset.c **** }
 740              		.loc 1 97 0
 741 01a1 4889EE   		movq	%rbp, %rsi
 742 01a4 4889DF   		movq	%rbx, %rdi
 743 01a7 E8000000 		call	png_colorspace_sync_info
 743      00
 744              	.LVL73:
 745              	.L47:
 746              	.LBE94:
 747              	.LBE93:
 748              	.LBE92:
 749              	.LBE91:
 132:fltk-1.3.4-1/png/pngset.c **** #  endif /* FLOATING_POINT */
 750              		.loc 1 132 0
 751 01ac 488B4424 		movq	120(%rsp), %rax
 751      78
 752 01b1 64483304 		xorq	%fs:40, %rax
 752      25280000 
 752      00
 753 01ba 7512     		jne	.L55
 754 01bc 4881C488 		addq	$136, %rsp
 754      000000
 755              		.cfi_remember_state
 756              		.cfi_def_cfa_offset 56
 757 01c3 5B       		popq	%rbx
 758              		.cfi_def_cfa_offset 48
 759              	.LVL74:
 760 01c4 5D       		popq	%rbp
 761              		.cfi_def_cfa_offset 40
 762              	.LVL75:
 763 01c5 415C     		popq	%r12
 764              		.cfi_def_cfa_offset 32
 765 01c7 415D     		popq	%r13
 766              		.cfi_def_cfa_offset 24
 767 01c9 415E     		popq	%r14
 768              		.cfi_def_cfa_offset 16
 769 01cb 415F     		popq	%r15
 770              		.cfi_def_cfa_offset 8
 771 01cd C3       		ret
 772              	.LVL76:
 773              	.L55:
 774              		.cfi_restore_state
 775 01ce E8000000 		call	__stack_chk_fail
 775      00
 776              	.LVL77:
 777              		.cfi_endproc
 778              	.LFE60:
 780              		.section	.text.unlikely.png_set_cHRM_XYZ
 781              	.LCOLDE16:
 782              		.section	.text.png_set_cHRM_XYZ
 783              	.LHOTE16:
 784              		.section	.text.unlikely.png_set_gAMA_fixed,"ax",@progbits
 785              	.LCOLDB17:
 786              		.section	.text.png_set_gAMA_fixed,"ax",@progbits
 787              	.LHOTB17:
 788              		.p2align 4,,15
 789              		.globl	png_set_gAMA_fixed
 791              	png_set_gAMA_fixed:
 792              	.LFB61:
 141:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "gAMA");
 793              		.loc 1 141 0
 794              		.cfi_startproc
 795              	.LVL78:
 144:fltk-1.3.4-1/png/pngset.c ****       return;
 796              		.loc 1 144 0
 797 0000 4885FF   		testq	%rdi, %rdi
 798 0003 742B     		je	.L59
 799 0005 4885F6   		testq	%rsi, %rsi
 800 0008 7426     		je	.L59
 141:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "gAMA");
 801              		.loc 1 141 0
 802 000a 55       		pushq	%rbp
 803              		.cfi_def_cfa_offset 16
 804              		.cfi_offset 6, -16
 805 000b 53       		pushq	%rbx
 806              		.cfi_def_cfa_offset 24
 807              		.cfi_offset 3, -24
 808 000c 4889F5   		movq	%rsi, %rbp
 809              	.LBB97:
 810              	.LBB98:
 147:fltk-1.3.4-1/png/pngset.c ****    png_colorspace_sync_info(png_ptr, info_ptr);
 811              		.loc 1 147 0
 812 000f 488D7634 		leaq	52(%rsi), %rsi
 813              	.LVL79:
 814 0013 4889FB   		movq	%rdi, %rbx
 815              	.LVL80:
 816              	.LBE98:
 817              	.LBE97:
 141:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "gAMA");
 818              		.loc 1 141 0
 819 0016 4883EC08 		subq	$8, %rsp
 820              		.cfi_def_cfa_offset 32
 821              	.LBB102:
 822              	.LBB99:
 147:fltk-1.3.4-1/png/pngset.c ****    png_colorspace_sync_info(png_ptr, info_ptr);
 823              		.loc 1 147 0
 824 001a E8000000 		call	png_colorspace_set_gamma
 824      00
 825              	.LVL81:
 826              	.LBE99:
 827              	.LBE102:
 149:fltk-1.3.4-1/png/pngset.c **** 
 828              		.loc 1 149 0
 829 001f 4883C408 		addq	$8, %rsp
 830              		.cfi_def_cfa_offset 24
 831              	.LBB103:
 832              	.LBB100:
 148:fltk-1.3.4-1/png/pngset.c **** }
 833              		.loc 1 148 0
 834 0023 4889EE   		movq	%rbp, %rsi
 835 0026 4889DF   		movq	%rbx, %rdi
 836              	.LBE100:
 837              	.LBE103:
 149:fltk-1.3.4-1/png/pngset.c **** 
 838              		.loc 1 149 0
 839 0029 5B       		popq	%rbx
 840              		.cfi_restore 3
 841              		.cfi_def_cfa_offset 16
 842              	.LVL82:
 843 002a 5D       		popq	%rbp
 844              		.cfi_restore 6
 845              		.cfi_def_cfa_offset 8
 846              	.LVL83:
 847              	.LBB104:
 848              	.LBB101:
 148:fltk-1.3.4-1/png/pngset.c **** }
 849              		.loc 1 148 0
 850 002b E9000000 		jmp	png_colorspace_sync_info
 850      00
 851              	.LVL84:
 852              		.p2align 4,,10
 853              		.p2align 3
 854              	.L59:
 855 0030 F3C3     		rep ret
 856              	.LBE101:
 857              	.LBE104:
 858              		.cfi_endproc
 859              	.LFE61:
 861              		.section	.text.unlikely.png_set_gAMA_fixed
 862              	.LCOLDE17:
 863              		.section	.text.png_set_gAMA_fixed
 864              	.LHOTE17:
 865              		.section	.rodata.str1.1
 866              	.LC18:
 867 006d 706E675F 		.string	"png_set_gAMA"
 867      7365745F 
 867      67414D41 
 867      00
 868              		.section	.text.unlikely.png_set_gAMA,"ax",@progbits
 869              	.LCOLDB19:
 870              		.section	.text.png_set_gAMA,"ax",@progbits
 871              	.LHOTB19:
 872              		.p2align 4,,15
 873              		.globl	png_set_gAMA
 875              	png_set_gAMA:
 876              	.LFB62:
 154:fltk-1.3.4-1/png/pngset.c ****    png_set_gAMA_fixed(png_ptr, info_ptr, png_fixed(png_ptr, file_gamma,
 877              		.loc 1 154 0
 878              		.cfi_startproc
 879              	.LVL85:
 880 0000 55       		pushq	%rbp
 881              		.cfi_def_cfa_offset 16
 882              		.cfi_offset 6, -16
 883 0001 53       		pushq	%rbx
 884              		.cfi_def_cfa_offset 24
 885              		.cfi_offset 3, -24
 886 0002 4889F5   		movq	%rsi, %rbp
 887 0005 4889FB   		movq	%rdi, %rbx
 155:fltk-1.3.4-1/png/pngset.c ****        "png_set_gAMA"));
 888              		.loc 1 155 0
 889 0008 BE000000 		movl	$.LC18, %esi
 889      00
 890              	.LVL86:
 154:fltk-1.3.4-1/png/pngset.c ****    png_set_gAMA_fixed(png_ptr, info_ptr, png_fixed(png_ptr, file_gamma,
 891              		.loc 1 154 0
 892 000d 4883EC08 		subq	$8, %rsp
 893              		.cfi_def_cfa_offset 32
 155:fltk-1.3.4-1/png/pngset.c ****        "png_set_gAMA"));
 894              		.loc 1 155 0
 895 0011 E8000000 		call	png_fixed
 895      00
 896              	.LVL87:
 897              	.LBB109:
 898              	.LBB110:
 144:fltk-1.3.4-1/png/pngset.c ****       return;
 899              		.loc 1 144 0
 900 0016 4885DB   		testq	%rbx, %rbx
 901 0019 7425     		je	.L60
 902 001b 4885ED   		testq	%rbp, %rbp
 903 001e 7420     		je	.L60
 904              	.LVL88:
 905              	.LBB111:
 906              	.LBB112:
 147:fltk-1.3.4-1/png/pngset.c ****    png_colorspace_sync_info(png_ptr, info_ptr);
 907              		.loc 1 147 0
 908 0020 488D7534 		leaq	52(%rbp), %rsi
 909 0024 4889DF   		movq	%rbx, %rdi
 910 0027 89C2     		movl	%eax, %edx
 911 0029 E8000000 		call	png_colorspace_set_gamma
 911      00
 912              	.LVL89:
 913              	.LBE112:
 914              	.LBE111:
 915              	.LBE110:
 916              	.LBE109:
 157:fltk-1.3.4-1/png/pngset.c **** #  endif
 917              		.loc 1 157 0
 918 002e 4883C408 		addq	$8, %rsp
 919              		.cfi_remember_state
 920              		.cfi_def_cfa_offset 24
 921              	.LBB119:
 922              	.LBB117:
 923              	.LBB115:
 924              	.LBB113:
 148:fltk-1.3.4-1/png/pngset.c **** }
 925              		.loc 1 148 0
 926 0032 4889EE   		movq	%rbp, %rsi
 927 0035 4889DF   		movq	%rbx, %rdi
 928              	.LBE113:
 929              	.LBE115:
 930              	.LBE117:
 931              	.LBE119:
 157:fltk-1.3.4-1/png/pngset.c **** #  endif
 932              		.loc 1 157 0
 933 0038 5B       		popq	%rbx
 934              		.cfi_def_cfa_offset 16
 935              	.LVL90:
 936 0039 5D       		popq	%rbp
 937              		.cfi_def_cfa_offset 8
 938              	.LVL91:
 939              	.LBB120:
 940              	.LBB118:
 941              	.LBB116:
 942              	.LBB114:
 148:fltk-1.3.4-1/png/pngset.c **** }
 943              		.loc 1 148 0
 944 003a E9000000 		jmp	png_colorspace_sync_info
 944      00
 945              	.LVL92:
 946 003f 90       		.p2align 4,,10
 947              		.p2align 3
 948              	.L60:
 949              		.cfi_restore_state
 950              	.LBE114:
 951              	.LBE116:
 952              	.LBE118:
 953              	.LBE120:
 157:fltk-1.3.4-1/png/pngset.c **** #  endif
 954              		.loc 1 157 0
 955 0040 4883C408 		addq	$8, %rsp
 956              		.cfi_def_cfa_offset 24
 957 0044 5B       		popq	%rbx
 958              		.cfi_def_cfa_offset 16
 959              	.LVL93:
 960 0045 5D       		popq	%rbp
 961              		.cfi_def_cfa_offset 8
 962              	.LVL94:
 963 0046 C3       		ret
 964              		.cfi_endproc
 965              	.LFE62:
 967              		.section	.text.unlikely.png_set_gAMA
 968              	.LCOLDE19:
 969              		.section	.text.png_set_gAMA
 970              	.LHOTE19:
 971              		.section	.rodata.str1.8
 972 0063 00000000 		.align 8
 972      00
 973              	.LC20:
 974 0068 496E7661 		.string	"Invalid palette size, hIST allocation skipped"
 974      6C696420 
 974      70616C65 
 974      74746520 
 974      73697A65 
 975 0096 0000     		.align 8
 976              	.LC21:
 977 0098 496E7375 		.string	"Insufficient memory for hIST chunk data"
 977      66666963 
 977      69656E74 
 977      206D656D 
 977      6F727920 
 978              		.section	.text.unlikely.png_set_hIST,"ax",@progbits
 979              	.LCOLDB22:
 980              		.section	.text.png_set_hIST,"ax",@progbits
 981              	.LHOTB22:
 982              		.p2align 4,,15
 983              		.globl	png_set_hIST
 985              	png_set_hIST:
 986              	.LFB63:
 165:fltk-1.3.4-1/png/pngset.c ****    int i;
 987              		.loc 1 165 0
 988              		.cfi_startproc
 989              	.LVL95:
 170:fltk-1.3.4-1/png/pngset.c ****       return;
 990              		.loc 1 170 0
 991 0000 4885FF   		testq	%rdi, %rdi
 992 0003 0F848600 		je	.L71
 992      0000
 993 0009 4885F6   		testq	%rsi, %rsi
 994 000c 0F847D00 		je	.L71
 994      0000
 173:fltk-1.3.4-1/png/pngset.c ****        > PNG_MAX_PALETTE_LENGTH)
 995              		.loc 1 173 0
 996 0012 0FB74620 		movzwl	32(%rsi), %eax
 997 0016 83E801   		subl	$1, %eax
 998 0019 663DFF00 		cmpw	$255, %ax
 999 001d 7779     		ja	.L72
 165:fltk-1.3.4-1/png/pngset.c ****    int i;
 1000              		.loc 1 165 0
 1001 001f 4154     		pushq	%r12
 1002              		.cfi_def_cfa_offset 16
 1003              		.cfi_offset 12, -16
 1004 0021 55       		pushq	%rbp
 1005              		.cfi_def_cfa_offset 24
 1006              		.cfi_offset 6, -24
 182:fltk-1.3.4-1/png/pngset.c **** 
 1007              		.loc 1 182 0
 1008 0022 31C9     		xorl	%ecx, %ecx
 165:fltk-1.3.4-1/png/pngset.c ****    int i;
 1009              		.loc 1 165 0
 1010 0024 53       		pushq	%rbx
 1011              		.cfi_def_cfa_offset 32
 1012              		.cfi_offset 3, -32
 1013 0025 4989FC   		movq	%rdi, %r12
 1014 0028 4889D5   		movq	%rdx, %rbp
 182:fltk-1.3.4-1/png/pngset.c **** 
 1015              		.loc 1 182 0
 1016 002b BA080000 		movl	$8, %edx
 1016      00
 1017              	.LVL96:
 1018 0030 4889F3   		movq	%rsi, %rbx
 1019 0033 E8000000 		call	png_free_data
 1019      00
 1020              	.LVL97:
 187:fltk-1.3.4-1/png/pngset.c ****        PNG_MAX_PALETTE_LENGTH * (sizeof (png_uint_16))));
 1021              		.loc 1 187 0
 1022 0038 BE000200 		movl	$512, %esi
 1022      00
 1023 003d 4C89E7   		movq	%r12, %rdi
 1024 0040 E8000000 		call	png_malloc_warn
 1024      00
 1025              	.LVL98:
 190:fltk-1.3.4-1/png/pngset.c ****    {
 1026              		.loc 1 190 0
 1027 0045 4885C0   		testq	%rax, %rax
 187:fltk-1.3.4-1/png/pngset.c ****        PNG_MAX_PALETTE_LENGTH * (sizeof (png_uint_16))));
 1028              		.loc 1 187 0
 1029 0048 488983F0 		movq	%rax, 240(%rbx)
 1029      000000
 190:fltk-1.3.4-1/png/pngset.c ****    {
 1030              		.loc 1 190 0
 1031 004f 7451     		je	.L73
 196:fltk-1.3.4-1/png/pngset.c **** 
 1032              		.loc 1 196 0
 1033 0051 838B1C01 		orl	$8, 284(%rbx)
 1033      000008
 1034              	.LVL99:
 198:fltk-1.3.4-1/png/pngset.c ****       info_ptr->hist[i] = hist[i];
 1035              		.loc 1 198 0
 1036 0058 66837B20 		cmpw	$0, 32(%rbx)
 1036      00
 1037 005d 7428     		je	.L67
 198:fltk-1.3.4-1/png/pngset.c ****       info_ptr->hist[i] = hist[i];
 1038              		.loc 1 198 0 is_stmt 0 discriminator 3
 1039 005f 31C9     		xorl	%ecx, %ecx
 1040 0061 31F6     		xorl	%esi, %esi
 1041 0063 EB0A     		jmp	.L68
 1042              	.LVL100:
 1043              		.p2align 4,,10
 1044 0065 0F1F00   		.p2align 3
 1045              	.L74:
 1046 0068 488B83F0 		movq	240(%rbx), %rax
 1046      000000
 1047              	.LVL101:
 1048              	.L68:
 199:fltk-1.3.4-1/png/pngset.c **** 
 1049              		.loc 1 199 0 is_stmt 1 discriminator 3
 1050 006f 0FB77C0D 		movzwl	0(%rbp,%rcx), %edi
 1050      00
 198:fltk-1.3.4-1/png/pngset.c ****       info_ptr->hist[i] = hist[i];
 1051              		.loc 1 198 0 discriminator 3
 1052 0074 83C601   		addl	$1, %esi
 1053              	.LVL102:
 199:fltk-1.3.4-1/png/pngset.c **** 
 1054              		.loc 1 199 0 discriminator 3
 1055 0077 66893C08 		movw	%di, (%rax,%rcx)
 198:fltk-1.3.4-1/png/pngset.c ****       info_ptr->hist[i] = hist[i];
 1056              		.loc 1 198 0 discriminator 3
 1057 007b 0FB74320 		movzwl	32(%rbx), %eax
 1058 007f 4883C102 		addq	$2, %rcx
 1059 0083 39F0     		cmpl	%esi, %eax
 1060 0085 7FE1     		jg	.L74
 1061              	.LVL103:
 1062              	.L67:
 201:fltk-1.3.4-1/png/pngset.c **** }
 1063              		.loc 1 201 0
 1064 0087 834B0840 		orl	$64, 8(%rbx)
 202:fltk-1.3.4-1/png/pngset.c **** #endif
 1065              		.loc 1 202 0
 1066 008b 5B       		popq	%rbx
 1067              		.cfi_restore 3
 1068              		.cfi_def_cfa_offset 24
 1069              	.LVL104:
 1070 008c 5D       		popq	%rbp
 1071              		.cfi_restore 6
 1072              		.cfi_def_cfa_offset 16
 1073              	.LVL105:
 1074 008d 415C     		popq	%r12
 1075              		.cfi_restore 12
 1076              		.cfi_def_cfa_offset 8
 1077              	.LVL106:
 1078              	.L71:
 1079 008f F3C3     		rep ret
 1080              	.LVL107:
 1081              		.p2align 4,,10
 1082 0091 0F1F8000 		.p2align 3
 1082      000000
 1083              	.L72:
 176:fltk-1.3.4-1/png/pngset.c ****           "Invalid palette size, hIST allocation skipped");
 1084              		.loc 1 176 0
 1085 0098 BE000000 		movl	$.LC20, %esi
 1085      00
 1086              	.LVL108:
 1087 009d E9000000 		jmp	png_warning
 1087      00
 1088              	.LVL109:
 1089              	.L73:
 1090              		.cfi_def_cfa_offset 32
 1091              		.cfi_offset 3, -32
 1092              		.cfi_offset 6, -24
 1093              		.cfi_offset 12, -16
 202:fltk-1.3.4-1/png/pngset.c **** #endif
 1094              		.loc 1 202 0
 1095 00a2 5B       		popq	%rbx
 1096              		.cfi_restore 3
 1097              		.cfi_def_cfa_offset 24
 1098              	.LVL110:
 192:fltk-1.3.4-1/png/pngset.c ****       return;
 1099              		.loc 1 192 0
 1100 00a3 4C89E7   		movq	%r12, %rdi
 1101 00a6 BE000000 		movl	$.LC21, %esi
 1101      00
 202:fltk-1.3.4-1/png/pngset.c **** #endif
 1102              		.loc 1 202 0
 1103 00ab 5D       		popq	%rbp
 1104              		.cfi_restore 6
 1105              		.cfi_def_cfa_offset 16
 1106              	.LVL111:
 1107 00ac 415C     		popq	%r12
 1108              		.cfi_restore 12
 1109              		.cfi_def_cfa_offset 8
 1110              	.LVL112:
 192:fltk-1.3.4-1/png/pngset.c ****       return;
 1111              		.loc 1 192 0
 1112 00ae E9000000 		jmp	png_warning
 1112      00
 1113              	.LVL113:
 1114              		.cfi_endproc
 1115              	.LFE63:
 1117              		.section	.text.unlikely.png_set_hIST
 1118              	.LCOLDE22:
 1119              		.section	.text.png_set_hIST
 1120              	.LHOTE22:
 1121              		.section	.text.unlikely.png_set_IHDR,"ax",@progbits
 1122              	.LCOLDB23:
 1123              		.section	.text.png_set_IHDR,"ax",@progbits
 1124              	.LHOTB23:
 1125              		.p2align 4,,15
 1126              		.globl	png_set_IHDR
 1128              	png_set_IHDR:
 1129              	.LFB64:
 210:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "IHDR");
 1130              		.loc 1 210 0
 1131              		.cfi_startproc
 1132              	.LVL114:
 213:fltk-1.3.4-1/png/pngset.c ****       return;
 1133              		.loc 1 213 0
 1134 0000 4885FF   		testq	%rdi, %rdi
 1135 0003 0F84A700 		je	.L88
 1135      0000
 1136 0009 4885F6   		testq	%rsi, %rsi
 1137 000c 0F849E00 		je	.L88
 1137      0000
 210:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "IHDR");
 1138              		.loc 1 210 0
 1139 0012 55       		pushq	%rbp
 1140              		.cfi_def_cfa_offset 16
 1141              		.cfi_offset 6, -16
 1142 0013 53       		pushq	%rbx
 1143              		.cfi_def_cfa_offset 24
 1144              		.cfi_offset 3, -24
 1145 0014 4889F3   		movq	%rsi, %rbx
 1146 0017 4589CB   		movl	%r9d, %r11d
 1147 001a 4189CA   		movl	%ecx, %r10d
 1148 001d 89D5     		movl	%edx, %ebp
 1149 001f 4883EC08 		subq	$8, %rsp
 1150              		.cfi_def_cfa_offset 32
 216:fltk-1.3.4-1/png/pngset.c ****    info_ptr->height = height;
 1151              		.loc 1 216 0
 1152 0023 8913     		movl	%edx, (%rbx)
 217:fltk-1.3.4-1/png/pngset.c ****    info_ptr->bit_depth = (png_byte)bit_depth;
 1153              		.loc 1 217 0
 1154 0025 894B04   		movl	%ecx, 4(%rbx)
 220:fltk-1.3.4-1/png/pngset.c ****    info_ptr->filter_type = (png_byte)filter_type;
 1155              		.loc 1 220 0
 1156 0028 0FB64424 		movzbl	40(%rsp), %eax
 1156      28
 218:fltk-1.3.4-1/png/pngset.c ****    info_ptr->color_type = (png_byte)color_type;
 1157              		.loc 1 218 0
 1158 002d 44884624 		movb	%r8b, 36(%rsi)
 224:fltk-1.3.4-1/png/pngset.c ****        info_ptr->bit_depth, info_ptr->color_type, info_ptr->interlace_type,
 1159              		.loc 1 224 0
 1160 0031 410FB6C8 		movzbl	%r8b, %ecx
 1161              	.LVL115:
 219:fltk-1.3.4-1/png/pngset.c ****    info_ptr->compression_type = (png_byte)compression_type;
 1162              		.loc 1 219 0
 1163 0035 44884B25 		movb	%r9b, 37(%rbx)
 224:fltk-1.3.4-1/png/pngset.c ****        info_ptr->bit_depth, info_ptr->color_type, info_ptr->interlace_type,
 1164              		.loc 1 224 0
 1165 0039 4489D2   		movl	%r10d, %edx
 1166              	.LVL116:
 1167 003c 450FB6C3 		movzbl	%r11b, %r8d
 1168              	.LVL117:
 220:fltk-1.3.4-1/png/pngset.c ****    info_ptr->filter_type = (png_byte)filter_type;
 1169              		.loc 1 220 0
 1170 0040 884626   		movb	%al, 38(%rsi)
 221:fltk-1.3.4-1/png/pngset.c ****    info_ptr->interlace_type = (png_byte)interlace_type;
 1171              		.loc 1 221 0
 1172 0043 0FB64424 		movzbl	48(%rsp), %eax
 1172      30
 1173 0048 884627   		movb	%al, 39(%rsi)
 222:fltk-1.3.4-1/png/pngset.c **** 
 1174              		.loc 1 222 0
 1175 004b 0FB64424 		movzbl	32(%rsp), %eax
 1175      20
 1176 0050 884628   		movb	%al, 40(%rsi)
 224:fltk-1.3.4-1/png/pngset.c ****        info_ptr->bit_depth, info_ptr->color_type, info_ptr->interlace_type,
 1177              		.loc 1 224 0
 1178 0053 0FB64424 		movzbl	48(%rsp), %eax
 1178      30
 1179 0058 89EE     		movl	%ebp, %esi
 1180              	.LVL118:
 1181 005a 50       		pushq	%rax
 1182              		.cfi_def_cfa_offset 40
 1183 005b 0FB64424 		movzbl	48(%rsp), %eax
 1183      30
 1184 0060 50       		pushq	%rax
 1185              		.cfi_def_cfa_offset 48
 1186 0061 440FB64C 		movzbl	48(%rsp), %r9d
 1186      2430
 1187              	.LVL119:
 1188 0067 E8000000 		call	png_check_IHDR
 1188      00
 1189              	.LVL120:
 228:fltk-1.3.4-1/png/pngset.c ****       info_ptr->channels = 1;
 1190              		.loc 1 228 0
 1191 006c 0FB65325 		movzbl	37(%rbx), %edx
 1192 0070 58       		popq	%rax
 1193              		.cfi_def_cfa_offset 40
 1194 0071 59       		popq	%rcx
 1195              		.cfi_def_cfa_offset 32
 1196 0072 80FA03   		cmpb	$3, %dl
 1197 0075 7469     		je	.L89
 231:fltk-1.3.4-1/png/pngset.c ****       info_ptr->channels = 3;
 1198              		.loc 1 231 0
 1199 0077 F6C202   		testb	$2, %dl
 1200 007a 753C     		jne	.L90
 235:fltk-1.3.4-1/png/pngset.c **** 
 1201              		.loc 1 235 0
 1202 007c C6432901 		movb	$1, 41(%rbx)
 1203 0080 B8010000 		movl	$1, %eax
 1203      00
 1204              	.L80:
 237:fltk-1.3.4-1/png/pngset.c ****       info_ptr->channels++;
 1205              		.loc 1 237 0
 1206 0085 83E204   		andl	$4, %edx
 1207 0088 7406     		je	.L78
 238:fltk-1.3.4-1/png/pngset.c **** 
 1208              		.loc 1 238 0
 1209 008a 83C001   		addl	$1, %eax
 1210 008d 884329   		movb	%al, 41(%rbx)
 1211              	.L78:
 240:fltk-1.3.4-1/png/pngset.c **** 
 1212              		.loc 1 240 0
 1213 0090 F66324   		mulb	36(%rbx)
 242:fltk-1.3.4-1/png/pngset.c **** }
 1214              		.loc 1 242 0
 1215 0093 3C07     		cmpb	$7, %al
 240:fltk-1.3.4-1/png/pngset.c **** 
 1216              		.loc 1 240 0
 1217 0095 88432A   		movb	%al, 42(%rbx)
 242:fltk-1.3.4-1/png/pngset.c **** }
 1218              		.loc 1 242 0
 1219 0098 762E     		jbe	.L81
 242:fltk-1.3.4-1/png/pngset.c **** }
 1220              		.loc 1 242 0 is_stmt 0 discriminator 1
 1221 009a C0E803   		shrb	$3, %al
 1222 009d 89EA     		movl	%ebp, %edx
 1223 009f 0FB6C0   		movzbl	%al, %eax
 1224 00a2 480FAFC2 		imulq	%rdx, %rax
 1225              	.L82:
 242:fltk-1.3.4-1/png/pngset.c **** }
 1226              		.loc 1 242 0 discriminator 4
 1227 00a6 48894310 		movq	%rax, 16(%rbx)
 243:fltk-1.3.4-1/png/pngset.c **** 
 1228              		.loc 1 243 0 is_stmt 1 discriminator 4
 1229 00aa 4883C408 		addq	$8, %rsp
 1230              		.cfi_def_cfa_offset 24
 1231 00ae 5B       		popq	%rbx
 1232              		.cfi_restore 3
 1233              		.cfi_def_cfa_offset 16
 1234              	.LVL121:
 1235 00af 5D       		popq	%rbp
 1236              		.cfi_restore 6
 1237              		.cfi_def_cfa_offset 8
 1238              	.LVL122:
 1239              	.L88:
 243:fltk-1.3.4-1/png/pngset.c **** 
 1240              		.loc 1 243 0 is_stmt 0
 1241 00b0 F3C3     		rep ret
 1242              	.LVL123:
 1243              		.p2align 4,,10
 1244 00b2 660F1F44 		.p2align 3
 1244      0000
 1245              	.L90:
 1246              		.cfi_def_cfa_offset 32
 1247              		.cfi_offset 3, -24
 1248              		.cfi_offset 6, -16
 232:fltk-1.3.4-1/png/pngset.c **** 
 1249              		.loc 1 232 0 is_stmt 1
 1250 00b8 C6432903 		movb	$3, 41(%rbx)
 1251 00bc B8030000 		movl	$3, %eax
 1251      00
 1252 00c1 EBC2     		jmp	.L80
 1253              		.p2align 4,,10
 1254 00c3 0F1F4400 		.p2align 3
 1254      00
 1255              	.L81:
 242:fltk-1.3.4-1/png/pngset.c **** }
 1256              		.loc 1 242 0 discriminator 2
 1257 00c8 89EA     		movl	%ebp, %edx
 1258 00ca 0FB6C0   		movzbl	%al, %eax
 1259 00cd 480FAFC2 		imulq	%rdx, %rax
 1260 00d1 4883C007 		addq	$7, %rax
 1261 00d5 48C1E803 		shrq	$3, %rax
 1262 00d9 EBCB     		jmp	.L82
 1263 00db 0F1F4400 		.p2align 4,,10
 1263      00
 1264              		.p2align 3
 1265              	.L89:
 229:fltk-1.3.4-1/png/pngset.c **** 
 1266              		.loc 1 229 0
 1267 00e0 C6432901 		movb	$1, 41(%rbx)
 1268 00e4 B8010000 		movl	$1, %eax
 1268      00
 1269 00e9 EBA5     		jmp	.L78
 1270              		.cfi_endproc
 1271              	.LFE64:
 1273              		.section	.text.unlikely.png_set_IHDR
 1274              	.LCOLDE23:
 1275              		.section	.text.png_set_IHDR
 1276              	.LHOTE23:
 1277              		.section	.text.unlikely.png_set_oFFs,"ax",@progbits
 1278              	.LCOLDB24:
 1279              		.section	.text.png_set_oFFs,"ax",@progbits
 1280              	.LHOTB24:
 1281              		.p2align 4,,15
 1282              		.globl	png_set_oFFs
 1284              	png_set_oFFs:
 1285              	.LFB65:
 249:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "oFFs");
 1286              		.loc 1 249 0
 1287              		.cfi_startproc
 1288              	.LVL124:
 252:fltk-1.3.4-1/png/pngset.c ****       return;
 1289              		.loc 1 252 0
 1290 0000 4885FF   		testq	%rdi, %rdi
 1291 0003 741F     		je	.L91
 1292 0005 4885F6   		testq	%rsi, %rsi
 1293 0008 741A     		je	.L91
 258:fltk-1.3.4-1/png/pngset.c **** }
 1294              		.loc 1 258 0
 1295 000a 814E0800 		orl	$256, 8(%rsi)
 1295      010000
 255:fltk-1.3.4-1/png/pngset.c ****    info_ptr->y_offset = offset_y;
 1296              		.loc 1 255 0
 1297 0011 8996D400 		movl	%edx, 212(%rsi)
 1297      0000
 256:fltk-1.3.4-1/png/pngset.c ****    info_ptr->offset_unit_type = (png_byte)unit_type;
 1298              		.loc 1 256 0
 1299 0017 898ED800 		movl	%ecx, 216(%rsi)
 1299      0000
 257:fltk-1.3.4-1/png/pngset.c ****    info_ptr->valid |= PNG_INFO_oFFs;
 1300              		.loc 1 257 0
 1301 001d 448886DC 		movb	%r8b, 220(%rsi)
 1301      000000
 1302              	.L91:
 1303 0024 F3C3     		rep ret
 1304              		.cfi_endproc
 1305              	.LFE65:
 1307              		.section	.text.unlikely.png_set_oFFs
 1308              	.LCOLDE24:
 1309              		.section	.text.png_set_oFFs
 1310              	.LHOTE24:
 1311              		.section	.rodata.str1.1
 1312              	.LC25:
 1313 007a 496E7661 		.string	"Invalid pCAL equation type"
 1313      6C696420 
 1313      7043414C 
 1313      20657175 
 1313      6174696F 
 1314              		.section	.rodata.str1.8
 1315              		.align 8
 1316              	.LC26:
 1317 00c0 496E7661 		.string	"Invalid format for pCAL parameter"
 1317      6C696420 
 1317      666F726D 
 1317      61742066 
 1317      6F722070 
 1318              		.section	.rodata.str1.1
 1319              	.LC27:
 1320 0095 496E7661 		.string	"Invalid pCAL parameter count"
 1320      6C696420 
 1320      7043414C 
 1320      20706172 
 1320      616D6574 
 1321              		.section	.rodata.str1.8
 1322 00e2 00000000 		.align 8
 1322      0000
 1323              	.LC28:
 1324 00e8 496E7375 		.string	"Insufficient memory for pCAL purpose"
 1324      66666963 
 1324      69656E74 
 1324      206D656D 
 1324      6F727920 
 1325 010d 000000   		.align 8
 1326              	.LC29:
 1327 0110 496E7375 		.string	"Insufficient memory for pCAL units"
 1327      66666963 
 1327      69656E74 
 1327      206D656D 
 1327      6F727920 
 1328 0133 00000000 		.align 8
 1328      00
 1329              	.LC30:
 1330 0138 496E7375 		.string	"Insufficient memory for pCAL params"
 1330      66666963 
 1330      69656E74 
 1330      206D656D 
 1330      6F727920 
 1331 015c 00000000 		.align 8
 1332              	.LC31:
 1333 0160 496E7375 		.string	"Insufficient memory for pCAL parameter"
 1333      66666963 
 1333      69656E74 
 1333      206D656D 
 1333      6F727920 
 1334              		.section	.text.unlikely.png_set_pCAL,"ax",@progbits
 1335              	.LCOLDB32:
 1336              		.section	.text.png_set_pCAL,"ax",@progbits
 1337              	.LHOTB32:
 1338              		.p2align 4,,15
 1339              		.globl	png_set_pCAL
 1341              	png_set_pCAL:
 1342              	.LFB66:
 267:fltk-1.3.4-1/png/pngset.c ****    png_size_t length;
 1343              		.loc 1 267 0
 1344              		.cfi_startproc
 1345              	.LVL125:
 1346 0000 4157     		pushq	%r15
 1347              		.cfi_def_cfa_offset 16
 1348              		.cfi_offset 15, -16
 1349 0002 4156     		pushq	%r14
 1350              		.cfi_def_cfa_offset 24
 1351              		.cfi_offset 14, -24
 1352 0004 4155     		pushq	%r13
 1353              		.cfi_def_cfa_offset 32
 1354              		.cfi_offset 13, -32
 1355 0006 4154     		pushq	%r12
 1356              		.cfi_def_cfa_offset 40
 1357              		.cfi_offset 12, -40
 1358 0008 55       		pushq	%rbp
 1359              		.cfi_def_cfa_offset 48
 1360              		.cfi_offset 6, -48
 1361 0009 53       		pushq	%rbx
 1362              		.cfi_def_cfa_offset 56
 1363              		.cfi_offset 3, -56
 1364 000a 4883EC38 		subq	$56, %rsp
 1365              		.cfi_def_cfa_offset 112
 273:fltk-1.3.4-1/png/pngset.c ****       || (nparams > 0 && params == NULL))
 1366              		.loc 1 273 0
 1367 000e 4885FF   		testq	%rdi, %rdi
 267:fltk-1.3.4-1/png/pngset.c ****    png_size_t length;
 1368              		.loc 1 267 0
 1369 0011 488B4424 		movq	120(%rsp), %rax
 1369      78
 1370 0016 448B7424 		movl	112(%rsp), %r14d
 1370      70
 1371 001b 4C8BA424 		movq	128(%rsp), %r12
 1371      80000000 
 1372 0023 48894424 		movq	%rax, 8(%rsp)
 1372      08
 273:fltk-1.3.4-1/png/pngset.c ****       || (nparams > 0 && params == NULL))
 1373              		.loc 1 273 0
 1374 0028 7419     		je	.L93
 1375 002a 4885F6   		testq	%rsi, %rsi
 1376 002d 7414     		je	.L93
 273:fltk-1.3.4-1/png/pngset.c ****       || (nparams > 0 && params == NULL))
 1377              		.loc 1 273 0 is_stmt 0 discriminator 1
 1378 002f 4885D2   		testq	%rdx, %rdx
 1379 0032 740F     		je	.L93
 1380 0034 4885C0   		testq	%rax, %rax
 1381 0037 740A     		je	.L93
 274:fltk-1.3.4-1/png/pngset.c ****       return;
 1382              		.loc 1 274 0 is_stmt 1
 1383 0039 4585F6   		testl	%r14d, %r14d
 1384 003c 7E1A     		jle	.L111
 1385 003e 4D85E4   		testq	%r12, %r12
 1386 0041 7515     		jne	.L111
 1387              	.LVL126:
 1388              	.L93:
 360:fltk-1.3.4-1/png/pngset.c **** #endif
 1389              		.loc 1 360 0
 1390 0043 4883C438 		addq	$56, %rsp
 1391              		.cfi_remember_state
 1392              		.cfi_def_cfa_offset 56
 1393 0047 5B       		popq	%rbx
 1394              		.cfi_def_cfa_offset 48
 1395 0048 5D       		popq	%rbp
 1396              		.cfi_def_cfa_offset 40
 1397 0049 415C     		popq	%r12
 1398              		.cfi_def_cfa_offset 32
 1399 004b 415D     		popq	%r13
 1400              		.cfi_def_cfa_offset 24
 1401 004d 415E     		popq	%r14
 1402              		.cfi_def_cfa_offset 16
 1403 004f 415F     		popq	%r15
 1404              		.cfi_def_cfa_offset 8
 1405 0051 C3       		ret
 1406              	.LVL127:
 1407              		.p2align 4,,10
 1408 0052 660F1F44 		.p2align 3
 1408      0000
 1409              	.L111:
 1410              		.cfi_restore_state
 1411 0058 4489CB   		movl	%r9d, %ebx
 1412 005b 48893C24 		movq	%rdi, (%rsp)
 277:fltk-1.3.4-1/png/pngset.c ****    png_debug1(3, "allocating purpose for info (%lu bytes)",
 1413              		.loc 1 277 0
 1414 005f 4889D7   		movq	%rdx, %rdi
 1415              	.LVL128:
 1416 0062 44894C24 		movl	%r9d, 44(%rsp)
 1416      2C
 1417 0067 44894424 		movl	%r8d, 40(%rsp)
 1417      28
 1418 006c 4889F5   		movq	%rsi, %rbp
 1419 006f 894C2424 		movl	%ecx, 36(%rsp)
 1420 0073 48895424 		movq	%rdx, 24(%rsp)
 1420      18
 1421 0078 E8000000 		call	strlen
 1421      00
 1422              	.LVL129:
 1423 007d 4883C001 		addq	$1, %rax
 284:fltk-1.3.4-1/png/pngset.c ****       png_error(png_ptr, "Invalid pCAL equation type");
 1424              		.loc 1 284 0
 1425 0081 83FB03   		cmpl	$3, %ebx
 277:fltk-1.3.4-1/png/pngset.c ****    png_debug1(3, "allocating purpose for info (%lu bytes)",
 1426              		.loc 1 277 0
 1427 0084 48894424 		movq	%rax, 16(%rsp)
 1427      10
 1428              	.LVL130:
 284:fltk-1.3.4-1/png/pngset.c ****       png_error(png_ptr, "Invalid pCAL equation type");
 1429              		.loc 1 284 0
 1430 0089 0F870C02 		ja	.L125
 1430      0000
 287:fltk-1.3.4-1/png/pngset.c ****       png_error(png_ptr, "Invalid pCAL parameter count");
 1431              		.loc 1 287 0
 1432 008f 4181FEFF 		cmpl	$255, %r14d
 1432      000000
 1433 0096 0F870D02 		ja	.L97
 1433      0000
 1434              	.LVL131:
 291:fltk-1.3.4-1/png/pngset.c ****    {
 1435              		.loc 1 291 0 discriminator 1
 1436 009c 4585F6   		testl	%r14d, %r14d
 1437 009f 7E50     		jle	.L105
 293:fltk-1.3.4-1/png/pngset.c ****           !png_check_fp_string(params[i], strlen(params[i])))
 1438              		.loc 1 293 0
 1439 00a1 4D8B2C24 		movq	(%r12), %r13
 1440 00a5 4D85ED   		testq	%r13, %r13
 1441 00a8 0F84DF01 		je	.L102
 1441      0000
 1442 00ae 418D46FF 		leal	-1(%r14), %eax
 1443              	.LVL132:
 1444 00b2 4D8D7C24 		leaq	8(%r12), %r15
 1444      08
 1445 00b7 498D5CC4 		leaq	8(%r12,%rax,8), %rbx
 1445      08
 1446              	.LVL133:
 1447 00bc EB13     		jmp	.L103
 1448              	.LVL134:
 1449 00be 6690     		.p2align 4,,10
 1450              		.p2align 3
 1451              	.L104:
 1452 00c0 4983C708 		addq	$8, %r15
 1453 00c4 4D8B6FF8 		movq	-8(%r15), %r13
 1454 00c8 4D85ED   		testq	%r13, %r13
 1455 00cb 0F84BC01 		je	.L102
 1455      0000
 1456              	.L103:
 294:fltk-1.3.4-1/png/pngset.c ****          png_error(png_ptr, "Invalid format for pCAL parameter");
 1457              		.loc 1 294 0 discriminator 1
 1458 00d1 4C89EF   		movq	%r13, %rdi
 1459 00d4 E8000000 		call	strlen
 1459      00
 1460              	.LVL135:
 1461 00d9 4C89EF   		movq	%r13, %rdi
 1462 00dc 4889C6   		movq	%rax, %rsi
 1463 00df E8000000 		call	png_check_fp_string
 1463      00
 1464              	.LVL136:
 293:fltk-1.3.4-1/png/pngset.c ****           !png_check_fp_string(params[i], strlen(params[i])))
 1465              		.loc 1 293 0 discriminator 1
 1466 00e4 85C0     		testl	%eax, %eax
 1467 00e6 0F84A101 		je	.L102
 1467      0000
 291:fltk-1.3.4-1/png/pngset.c ****    {
 1468              		.loc 1 291 0 discriminator 2
 1469 00ec 4C39FB   		cmpq	%r15, %rbx
 1470 00ef 75CF     		jne	.L104
 1471              	.L105:
 298:fltk-1.3.4-1/png/pngset.c ****        png_malloc_warn(png_ptr, length));
 1472              		.loc 1 298 0
 1473 00f1 488B7424 		movq	16(%rsp), %rsi
 1473      10
 1474 00f6 488B3C24 		movq	(%rsp), %rdi
 1475 00fa E8000000 		call	png_malloc_warn
 1475      00
 1476              	.LVL137:
 301:fltk-1.3.4-1/png/pngset.c ****    {
 1477              		.loc 1 301 0
 1478 00ff 4885C0   		testq	%rax, %rax
 298:fltk-1.3.4-1/png/pngset.c ****        png_malloc_warn(png_ptr, length));
 1479              		.loc 1 298 0
 1480 0102 488985F8 		movq	%rax, 248(%rbp)
 1480      000000
 301:fltk-1.3.4-1/png/pngset.c ****    {
 1481              		.loc 1 301 0
 1482 0109 0F847701 		je	.L126
 1482      0000
 1483              	.LVL138:
 1484              	.LBB121:
 1485              	.LBB122:
 1486              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string3.h"
   1:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* Copyright (C) 2004-2016 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string3.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string3.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string3.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string3.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string3.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string3.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string3.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string3.h ****    <http://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef _STRING_H
  19:/usr/include/x86_64-linux-gnu/bits/string3.h **** # error "Never use <bits/string3.h> directly; include <string.h> instead."
  20:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  21:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  22:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  23:/usr/include/x86_64-linux-gnu/bits/string3.h **** __warndecl (__warn_memset_zero_len,
  24:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  25:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  26:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  27:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef __cplusplus
  28:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* XXX This is temporarily.  We should not redefine any of the symbols
  29:/usr/include/x86_64-linux-gnu/bits/string3.h ****    and instead integrate the error checking into the original
  30:/usr/include/x86_64-linux-gnu/bits/string3.h ****    definitions.  */
  31:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memcpy
  32:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memmove
  33:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memset
  34:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcat
  35:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcpy
  36:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncat
  37:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncpy
  38:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_GNU
  39:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef mempcpy
  40:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef stpcpy
  41:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  42:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_MISC
  43:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bcopy
  44:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bzero
  45:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  46:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  47:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  48:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  49:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  50:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  51:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	       size_t __len))
  52:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  53:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
 1487              		.loc 2 53 0
 1488 010f 488B5424 		movq	16(%rsp), %rdx
 1488      10
 1489 0114 488B7424 		movq	24(%rsp), %rsi
 1489      18
 1490 0119 4889C7   		movq	%rax, %rdi
 1491 011c E8000000 		call	memcpy
 1491      00
 1492              	.LVL139:
 1493              	.LBE122:
 1494              	.LBE121:
 310:fltk-1.3.4-1/png/pngset.c ****    info_ptr->pcal_X1 = X1;
 1495              		.loc 1 310 0
 1496 0121 8B442424 		movl	36(%rsp), %eax
 315:fltk-1.3.4-1/png/pngset.c ****    png_debug1(3, "allocating units for info (%lu bytes)",
 1497              		.loc 1 315 0
 1498 0125 488B7C24 		movq	8(%rsp), %rdi
 1498      08
 313:fltk-1.3.4-1/png/pngset.c **** 
 1499              		.loc 1 313 0
 1500 012a 4488B519 		movb	%r14b, 281(%rbp)
 1500      010000
 310:fltk-1.3.4-1/png/pngset.c ****    info_ptr->pcal_X1 = X1;
 1501              		.loc 1 310 0
 1502 0131 89850001 		movl	%eax, 256(%rbp)
 1502      0000
 311:fltk-1.3.4-1/png/pngset.c ****    info_ptr->pcal_type = (png_byte)type;
 1503              		.loc 1 311 0
 1504 0137 8B442428 		movl	40(%rsp), %eax
 1505 013b 89850401 		movl	%eax, 260(%rbp)
 1505      0000
 312:fltk-1.3.4-1/png/pngset.c ****    info_ptr->pcal_nparams = (png_byte)nparams;
 1506              		.loc 1 312 0
 1507 0141 0FB64424 		movzbl	44(%rsp), %eax
 1507      2C
 1508 0146 88851801 		movb	%al, 280(%rbp)
 1508      0000
 315:fltk-1.3.4-1/png/pngset.c ****    png_debug1(3, "allocating units for info (%lu bytes)",
 1509              		.loc 1 315 0
 1510 014c E8000000 		call	strlen
 1510      00
 1511              	.LVL140:
 319:fltk-1.3.4-1/png/pngset.c ****       png_malloc_warn(png_ptr, length));
 1512              		.loc 1 319 0
 1513 0151 488B3C24 		movq	(%rsp), %rdi
 315:fltk-1.3.4-1/png/pngset.c ****    png_debug1(3, "allocating units for info (%lu bytes)",
 1514              		.loc 1 315 0
 1515 0155 488D5801 		leaq	1(%rax), %rbx
 1516              	.LVL141:
 319:fltk-1.3.4-1/png/pngset.c ****       png_malloc_warn(png_ptr, length));
 1517              		.loc 1 319 0
 1518 0159 4889DE   		movq	%rbx, %rsi
 1519 015c E8000000 		call	png_malloc_warn
 1519      00
 1520              	.LVL142:
 322:fltk-1.3.4-1/png/pngset.c ****    {
 1521              		.loc 1 322 0
 1522 0161 4885C0   		testq	%rax, %rax
 319:fltk-1.3.4-1/png/pngset.c ****       png_malloc_warn(png_ptr, length));
 1523              		.loc 1 319 0
 1524 0164 48898508 		movq	%rax, 264(%rbp)
 1524      010000
 324:fltk-1.3.4-1/png/pngset.c ****       return;
 1525              		.loc 1 324 0
 1526 016b BE000000 		movl	$.LC29, %esi
 1526      00
 322:fltk-1.3.4-1/png/pngset.c ****    {
 1527              		.loc 1 322 0
 1528 0170 0F84DA00 		je	.L123
 1528      0000
 1529              	.LVL143:
 1530              	.LBB123:
 1531              	.LBB124:
 1532              		.loc 2 53 0
 1533 0176 488B7424 		movq	8(%rsp), %rsi
 1533      08
 1534 017b 4889DA   		movq	%rbx, %rdx
 1535 017e 4889C7   		movq	%rax, %rdi
 1536 0181 E8000000 		call	memcpy
 1536      00
 1537              	.LVL144:
 1538              	.LBE124:
 1539              	.LBE123:
 330:fltk-1.3.4-1/png/pngset.c ****        (png_size_t)((nparams + 1) * (sizeof (png_charp)))));
 1540              		.loc 1 330 0
 1541 0186 418D4E01 		leal	1(%r14), %ecx
 1542 018a 488B3C24 		movq	(%rsp), %rdi
 1543 018e 4863C9   		movslq	%ecx, %rcx
 1544 0191 488D1CCD 		leaq	0(,%rcx,8), %rbx
 1544      00000000 
 1545              	.LVL145:
 1546 0199 4889DE   		movq	%rbx, %rsi
 1547 019c E8000000 		call	png_malloc_warn
 1547      00
 1548              	.LVL146:
 333:fltk-1.3.4-1/png/pngset.c ****    {
 1549              		.loc 1 333 0
 1550 01a1 4885C0   		testq	%rax, %rax
 330:fltk-1.3.4-1/png/pngset.c ****        (png_size_t)((nparams + 1) * (sizeof (png_charp)))));
 1551              		.loc 1 330 0
 1552 01a4 4889C2   		movq	%rax, %rdx
 1553 01a7 48898510 		movq	%rax, 272(%rbp)
 1553      010000
 335:fltk-1.3.4-1/png/pngset.c ****       return;
 1554              		.loc 1 335 0
 1555 01ae BE000000 		movl	$.LC30, %esi
 1555      00
 333:fltk-1.3.4-1/png/pngset.c ****    {
 1556              		.loc 1 333 0
 1557 01b3 0F849700 		je	.L123
 1557      0000
 1558              	.LVL147:
 1559              	.LBB125:
 1560              	.LBB126:
  54:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  55:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  56:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  57:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memmove (void *__dest, const void *__src, size_t __len))
  58:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  59:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  60:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  61:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  62:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifdef __USE_GNU
  63:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  64:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
  65:/usr/include/x86_64-linux-gnu/bits/string3.h **** 		size_t __len))
  66:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  67:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
  68:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  69:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  70:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  71:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  72:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* The first two tests here help to catch a somewhat common problem
  73:/usr/include/x86_64-linux-gnu/bits/string3.h ****    where the second and third parameter are transposed.  This is
  74:/usr/include/x86_64-linux-gnu/bits/string3.h ****    especially problematic if the intended fill value is zero.  In this
  75:/usr/include/x86_64-linux-gnu/bits/string3.h ****    case no work is done at all.  We detect these problems by referring
  76:/usr/include/x86_64-linux-gnu/bits/string3.h ****    non-existing functions.  */
  77:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  78:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memset (void *__dest, int __ch, size_t __len))
  79:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  80:/usr/include/x86_64-linux-gnu/bits/string3.h ****   /* GCC-5.0 and newer implements these checks in the compiler, so we don't
  81:/usr/include/x86_64-linux-gnu/bits/string3.h ****      need them here.  */
  82:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  83:/usr/include/x86_64-linux-gnu/bits/string3.h ****   if (__builtin_constant_p (__len) && __len == 0
  84:/usr/include/x86_64-linux-gnu/bits/string3.h ****       && (!__builtin_constant_p (__ch) || __ch != 0))
  85:/usr/include/x86_64-linux-gnu/bits/string3.h ****     {
  86:/usr/include/x86_64-linux-gnu/bits/string3.h ****       __warn_memset_zero_len ();
  87:/usr/include/x86_64-linux-gnu/bits/string3.h ****       return __dest;
  88:/usr/include/x86_64-linux-gnu/bits/string3.h ****     }
  89:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  90:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 1561              		.loc 2 90 0
 1562 01b9 488D7A08 		leaq	8(%rdx), %rdi
 1563 01bd 48C70000 		movq	$0, (%rax)
 1563      000000
 1564              	.LVL148:
 1565 01c4 89D8     		movl	%ebx, %eax
 1566              	.LVL149:
 1567 01c6 48C74402 		movq	$0, -8(%rdx,%rax)
 1567      F8000000 
 1567      00
 1568 01cf 4889D0   		movq	%rdx, %rax
 1569 01d2 4883E7F8 		andq	$-8, %rdi
 1570 01d6 4829F8   		subq	%rdi, %rax
 1571 01d9 8D0C03   		leal	(%rbx,%rax), %ecx
 1572 01dc 31C0     		xorl	%eax, %eax
 1573 01de C1E903   		shrl	$3, %ecx
 1574              	.LBE126:
 1575              	.LBE125:
 341:fltk-1.3.4-1/png/pngset.c ****    {
 1576              		.loc 1 341 0
 1577 01e1 4585F6   		testl	%r14d, %r14d
 1578              	.LBB128:
 1579              	.LBB127:
 1580              		.loc 2 90 0
 1581 01e4 F348AB   		rep stosq
 1582              	.LVL150:
 1583              	.LBE127:
 1584              	.LBE128:
 341:fltk-1.3.4-1/png/pngset.c ****    {
 1585              		.loc 1 341 0
 1586 01e7 0F8E8300 		jle	.L108
 1586      0000
 1587 01ed 458D7EFF 		leal	-1(%r14), %r15d
 1588 01f1 31DB     		xorl	%ebx, %ebx
 1589 01f3 4989D6   		movq	%rdx, %r14
 1590 01f6 49C1E703 		salq	$3, %r15
 1591 01fa EB20     		jmp	.L109
 1592              	.LVL151:
 1593 01fc 0F1F4000 		.p2align 4,,10
 1594              		.p2align 3
 1595              	.L110:
 1596              	.LBB129:
 1597              	.LBB130:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 1598              		.loc 2 53 0 discriminator 2
 1599 0200 498B341C 		movq	(%r12,%rbx), %rsi
 1600 0204 4C89EA   		movq	%r13, %rdx
 1601 0207 E8000000 		call	memcpy
 1601      00
 1602              	.LVL152:
 1603              	.LBE130:
 1604              	.LBE129:
 341:fltk-1.3.4-1/png/pngset.c ****    {
 1605              		.loc 1 341 0 discriminator 2
 1606 020c 4C39FB   		cmpq	%r15, %rbx
 1607 020f 745F     		je	.L108
 1608 0211 4C8BB510 		movq	272(%rbp), %r14
 1608      010000
 1609 0218 4883C308 		addq	$8, %rbx
 1610              	.LVL153:
 1611              	.L109:
 343:fltk-1.3.4-1/png/pngset.c ****       png_debug2(3, "allocating parameter %d for info (%lu bytes)", i,
 1612              		.loc 1 343 0
 1613 021c 498B3C1C 		movq	(%r12,%rbx), %rdi
 347:fltk-1.3.4-1/png/pngset.c **** 
 1614              		.loc 1 347 0
 1615 0220 4901DE   		addq	%rbx, %r14
 343:fltk-1.3.4-1/png/pngset.c ****       png_debug2(3, "allocating parameter %d for info (%lu bytes)", i,
 1616              		.loc 1 343 0
 1617 0223 E8000000 		call	strlen
 1617      00
 1618              	.LVL154:
 347:fltk-1.3.4-1/png/pngset.c **** 
 1619              		.loc 1 347 0
 1620 0228 488B3C24 		movq	(%rsp), %rdi
 343:fltk-1.3.4-1/png/pngset.c ****       png_debug2(3, "allocating parameter %d for info (%lu bytes)", i,
 1621              		.loc 1 343 0
 1622 022c 4C8D6801 		leaq	1(%rax), %r13
 1623              	.LVL155:
 347:fltk-1.3.4-1/png/pngset.c **** 
 1624              		.loc 1 347 0
 1625 0230 4C89EE   		movq	%r13, %rsi
 1626 0233 E8000000 		call	png_malloc_warn
 1626      00
 1627              	.LVL156:
 1628 0238 498906   		movq	%rax, (%r14)
 349:fltk-1.3.4-1/png/pngset.c ****       {
 1629              		.loc 1 349 0
 1630 023b 488B8510 		movq	272(%rbp), %rax
 1630      010000
 1631 0242 488B3C18 		movq	(%rax,%rbx), %rdi
 1632 0246 4885FF   		testq	%rdi, %rdi
 1633 0249 75B5     		jne	.L110
 351:fltk-1.3.4-1/png/pngset.c ****          return;
 1634              		.loc 1 351 0
 1635 024b BE000000 		movl	$.LC31, %esi
 1635      00
 1636              	.LVL157:
 1637              	.L123:
 1638 0250 488B3C24 		movq	(%rsp), %rdi
 360:fltk-1.3.4-1/png/pngset.c **** #endif
 1639              		.loc 1 360 0
 1640 0254 4883C438 		addq	$56, %rsp
 1641              		.cfi_remember_state
 1642              		.cfi_def_cfa_offset 56
 1643 0258 5B       		popq	%rbx
 1644              		.cfi_def_cfa_offset 48
 1645 0259 5D       		popq	%rbp
 1646              		.cfi_def_cfa_offset 40
 1647              	.LVL158:
 1648 025a 415C     		popq	%r12
 1649              		.cfi_def_cfa_offset 32
 1650 025c 415D     		popq	%r13
 1651              		.cfi_def_cfa_offset 24
 1652 025e 415E     		popq	%r14
 1653              		.cfi_def_cfa_offset 16
 1654 0260 415F     		popq	%r15
 1655              		.cfi_def_cfa_offset 8
 351:fltk-1.3.4-1/png/pngset.c ****          return;
 1656              		.loc 1 351 0
 1657 0262 E9000000 		jmp	png_warning
 1657      00
 1658              	.LVL159:
 1659 0267 660F1F84 		.p2align 4,,10
 1659      00000000 
 1659      00
 1660              		.p2align 3
 1661              	.L108:
 1662              		.cfi_restore_state
 358:fltk-1.3.4-1/png/pngset.c ****    info_ptr->free_me |= PNG_FREE_PCAL;
 1663              		.loc 1 358 0
 1664 0270 814D0800 		orl	$1024, 8(%rbp)
 1664      040000
 359:fltk-1.3.4-1/png/pngset.c **** }
 1665              		.loc 1 359 0
 1666 0277 818D1C01 		orl	$128, 284(%rbp)
 1666      00008000 
 1666      0000
 1667 0281 E9BDFDFF 		jmp	.L93
 1667      FF
 1668              	.LVL160:
 1669              	.L126:
 303:fltk-1.3.4-1/png/pngset.c ****       return;
 1670              		.loc 1 303 0
 1671 0286 BE000000 		movl	$.LC28, %esi
 1671      00
 1672 028b EBC3     		jmp	.L123
 1673              	.L102:
 295:fltk-1.3.4-1/png/pngset.c ****    }
 1674              		.loc 1 295 0
 1675 028d 488B3C24 		movq	(%rsp), %rdi
 1676 0291 BE000000 		movl	$.LC26, %esi
 1676      00
 1677 0296 E8000000 		call	png_error
 1677      00
 1678              	.LVL161:
 1679              	.L125:
 285:fltk-1.3.4-1/png/pngset.c **** 
 1680              		.loc 1 285 0
 1681 029b 488B3C24 		movq	(%rsp), %rdi
 1682 029f BE000000 		movl	$.LC25, %esi
 1682      00
 1683 02a4 E8000000 		call	png_error
 1683      00
 1684              	.LVL162:
 1685              	.L97:
 288:fltk-1.3.4-1/png/pngset.c **** 
 1686              		.loc 1 288 0
 1687 02a9 488B3C24 		movq	(%rsp), %rdi
 1688 02ad BE000000 		movl	$.LC27, %esi
 1688      00
 1689 02b2 E8000000 		call	png_error
 1689      00
 1690              	.LVL163:
 1691              		.cfi_endproc
 1692              	.LFE66:
 1694              		.section	.text.unlikely.png_set_pCAL
 1695              	.LCOLDE32:
 1696              		.section	.text.png_set_pCAL
 1697              	.LHOTE32:
 1698              		.section	.rodata.str1.1
 1699              	.LC33:
 1700 00b2 496E7661 		.string	"Invalid sCAL unit"
 1700      6C696420 
 1700      7343414C 
 1700      20756E69 
 1700      7400
 1701              	.LC34:
 1702 00c4 496E7661 		.string	"Invalid sCAL width"
 1702      6C696420 
 1702      7343414C 
 1702      20776964 
 1702      746800
 1703              	.LC35:
 1704 00d7 496E7661 		.string	"Invalid sCAL height"
 1704      6C696420 
 1704      7343414C 
 1704      20686569 
 1704      67687400 
 1705              		.section	.rodata.str1.8
 1706 0187 00       		.align 8
 1707              	.LC36:
 1708 0188 4D656D6F 		.string	"Memory allocation failed while processing sCAL"
 1708      72792061 
 1708      6C6C6F63 
 1708      6174696F 
 1708      6E206661 
 1709              		.section	.text.unlikely.png_set_sCAL_s,"ax",@progbits
 1710              	.LCOLDB37:
 1711              		.section	.text.png_set_sCAL_s,"ax",@progbits
 1712              	.LHOTB37:
 1713              		.p2align 4,,15
 1714              		.globl	png_set_sCAL_s
 1716              	png_set_sCAL_s:
 1717              	.LFB67:
 367:fltk-1.3.4-1/png/pngset.c ****    png_size_t lengthw = 0, lengthh = 0;
 1718              		.loc 1 367 0
 1719              		.cfi_startproc
 1720              	.LVL164:
 372:fltk-1.3.4-1/png/pngset.c ****       return;
 1721              		.loc 1 372 0
 1722 0000 4885FF   		testq	%rdi, %rdi
 1723 0003 0F842501 		je	.L150
 1723      0000
 1724 0009 4885F6   		testq	%rsi, %rsi
 1725 000c 0F841C01 		je	.L150
 1725      0000
 367:fltk-1.3.4-1/png/pngset.c ****    png_size_t lengthw = 0, lengthh = 0;
 1726              		.loc 1 367 0
 1727 0012 4157     		pushq	%r15
 1728              		.cfi_def_cfa_offset 16
 1729              		.cfi_offset 15, -16
 378:fltk-1.3.4-1/png/pngset.c ****       png_error(png_ptr, "Invalid sCAL unit");
 1730              		.loc 1 378 0
 1731 0014 8D42FF   		leal	-1(%rdx), %eax
 367:fltk-1.3.4-1/png/pngset.c ****    png_size_t lengthw = 0, lengthh = 0;
 1732              		.loc 1 367 0
 1733 0017 4156     		pushq	%r14
 1734              		.cfi_def_cfa_offset 24
 1735              		.cfi_offset 14, -24
 1736 0019 4155     		pushq	%r13
 1737              		.cfi_def_cfa_offset 32
 1738              		.cfi_offset 13, -32
 1739 001b 4154     		pushq	%r12
 1740              		.cfi_def_cfa_offset 40
 1741              		.cfi_offset 12, -40
 1742 001d 4189D7   		movl	%edx, %r15d
 1743 0020 55       		pushq	%rbp
 1744              		.cfi_def_cfa_offset 48
 1745              		.cfi_offset 6, -48
 1746 0021 53       		pushq	%rbx
 1747              		.cfi_def_cfa_offset 56
 1748              		.cfi_offset 3, -56
 1749 0022 4D89C4   		movq	%r8, %r12
 1750 0025 4889CD   		movq	%rcx, %rbp
 1751 0028 4889F3   		movq	%rsi, %rbx
 1752 002b 4883EC18 		subq	$24, %rsp
 1753              		.cfi_def_cfa_offset 80
 378:fltk-1.3.4-1/png/pngset.c ****       png_error(png_ptr, "Invalid sCAL unit");
 1754              		.loc 1 378 0
 1755 002f 83F801   		cmpl	$1, %eax
 1756 0032 48897C24 		movq	%rdi, 8(%rsp)
 1756      08
 1757 0037 0F874A01 		ja	.L152
 1757      0000
 1758              	.LVL165:
 1759              	.LBB137:
 1760              	.LBB138:
 381:fltk-1.3.4-1/png/pngset.c ****        swidth[0] == 45 /* '-' */ || !png_check_fp_string(swidth, lengthw))
 1761              		.loc 1 381 0
 1762 003d 4885C9   		testq	%rcx, %rcx
 1763 0040 0F843201 		je	.L131
 1763      0000
 1764 0046 4889CF   		movq	%rcx, %rdi
 1765              	.LVL166:
 1766 0049 E8000000 		call	strlen
 1766      00
 1767              	.LVL167:
 1768 004e 4885C0   		testq	%rax, %rax
 1769 0051 4989C5   		movq	%rax, %r13
 1770              	.LVL168:
 1771 0054 0F841E01 		je	.L131
 1771      0000
 1772 005a 807D002D 		cmpb	$45, 0(%rbp)
 1773 005e 0F841401 		je	.L131
 1773      0000
 382:fltk-1.3.4-1/png/pngset.c ****       png_error(png_ptr, "Invalid sCAL width");
 1774              		.loc 1 382 0
 1775 0064 4889C6   		movq	%rax, %rsi
 1776 0067 4889EF   		movq	%rbp, %rdi
 1777 006a E8000000 		call	png_check_fp_string
 1777      00
 1778              	.LVL169:
 1779 006f 85C0     		testl	%eax, %eax
 1780 0071 0F840101 		je	.L131
 1780      0000
 385:fltk-1.3.4-1/png/pngset.c ****        sheight[0] == 45 /* '-' */ || !png_check_fp_string(sheight, lengthh))
 1781              		.loc 1 385 0
 1782 0077 4D85E4   		testq	%r12, %r12
 1783 007a 0F84E900 		je	.L133
 1783      0000
 1784 0080 4C89E7   		movq	%r12, %rdi
 1785 0083 E8000000 		call	strlen
 1785      00
 1786              	.LVL170:
 1787 0088 4885C0   		testq	%rax, %rax
 1788 008b 4989C6   		movq	%rax, %r14
 1789              	.LVL171:
 1790 008e 0F84D500 		je	.L133
 1790      0000
 1791 0094 41803C24 		cmpb	$45, (%r12)
 1791      2D
 1792 0099 0F84CA00 		je	.L133
 1792      0000
 386:fltk-1.3.4-1/png/pngset.c ****       png_error(png_ptr, "Invalid sCAL height");
 1793              		.loc 1 386 0
 1794 009f 4889C6   		movq	%rax, %rsi
 1795 00a2 4C89E7   		movq	%r12, %rdi
 1796 00a5 E8000000 		call	png_check_fp_string
 1796      00
 1797              	.LVL172:
 1798 00aa 85C0     		testl	%eax, %eax
 1799 00ac 0F84B700 		je	.L133
 1799      0000
 395:fltk-1.3.4-1/png/pngset.c ****       png_malloc_warn(png_ptr, lengthw));
 1800              		.loc 1 395 0
 1801 00b2 488B7C24 		movq	8(%rsp), %rdi
 1801      08
 391:fltk-1.3.4-1/png/pngset.c **** 
 1802              		.loc 1 391 0
 1803 00b7 4983C501 		addq	$1, %r13
 1804              	.LVL173:
 389:fltk-1.3.4-1/png/pngset.c **** 
 1805              		.loc 1 389 0
 1806 00bb 4488BB3C 		movb	%r15b, 316(%rbx)
 1806      010000
 395:fltk-1.3.4-1/png/pngset.c ****       png_malloc_warn(png_ptr, lengthw));
 1807              		.loc 1 395 0
 1808 00c2 4C89EE   		movq	%r13, %rsi
 1809 00c5 E8000000 		call	png_malloc_warn
 1809      00
 1810              	.LVL174:
 398:fltk-1.3.4-1/png/pngset.c ****    {
 1811              		.loc 1 398 0
 1812 00ca 4885C0   		testq	%rax, %rax
 395:fltk-1.3.4-1/png/pngset.c ****       png_malloc_warn(png_ptr, lengthw));
 1813              		.loc 1 395 0
 1814 00cd 48898340 		movq	%rax, 320(%rbx)
 1814      010000
 398:fltk-1.3.4-1/png/pngset.c ****    {
 1815              		.loc 1 398 0
 1816 00d4 7476     		je	.L151
 1817              	.LVL175:
 1818              	.LBB139:
 1819              	.LBB140:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 1820              		.loc 2 53 0
 1821 00d6 4C89EA   		movq	%r13, %rdx
 1822 00d9 4889EE   		movq	%rbp, %rsi
 1823 00dc 4889C7   		movq	%rax, %rdi
 1824 00df E8000000 		call	memcpy
 1824      00
 1825              	.LVL176:
 1826              	.LBE140:
 1827              	.LBE139:
 410:fltk-1.3.4-1/png/pngset.c ****       png_malloc_warn(png_ptr, lengthh));
 1828              		.loc 1 410 0
 1829 00e4 488B7C24 		movq	8(%rsp), %rdi
 1829      08
 406:fltk-1.3.4-1/png/pngset.c **** 
 1830              		.loc 1 406 0
 1831 00e9 4983C601 		addq	$1, %r14
 1832              	.LVL177:
 410:fltk-1.3.4-1/png/pngset.c ****       png_malloc_warn(png_ptr, lengthh));
 1833              		.loc 1 410 0
 1834 00ed 4C89F6   		movq	%r14, %rsi
 1835 00f0 E8000000 		call	png_malloc_warn
 1835      00
 1836              	.LVL178:
 413:fltk-1.3.4-1/png/pngset.c ****    {
 1837              		.loc 1 413 0
 1838 00f5 4885C0   		testq	%rax, %rax
 410:fltk-1.3.4-1/png/pngset.c ****       png_malloc_warn(png_ptr, lengthh));
 1839              		.loc 1 410 0
 1840 00f8 48898348 		movq	%rax, 328(%rbx)
 1840      010000
 413:fltk-1.3.4-1/png/pngset.c ****    {
 1841              		.loc 1 413 0
 1842 00ff 742F     		je	.L153
 1843              	.LVL179:
 1844              	.LBB141:
 1845              	.LBB142:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 1846              		.loc 2 53 0
 1847 0101 4C89F2   		movq	%r14, %rdx
 1848 0104 4C89E6   		movq	%r12, %rsi
 1849 0107 4889C7   		movq	%rax, %rdi
 1850 010a E8000000 		call	memcpy
 1850      00
 1851              	.LVL180:
 1852              	.LBE142:
 1853              	.LBE141:
 424:fltk-1.3.4-1/png/pngset.c ****    info_ptr->free_me |= PNG_FREE_SCAL;
 1854              		.loc 1 424 0
 1855 010f 814B0800 		orl	$16384, 8(%rbx)
 1855      400000
 425:fltk-1.3.4-1/png/pngset.c **** }
 1856              		.loc 1 425 0
 1857 0116 818B1C01 		orl	$256, 284(%rbx)
 1857      00000001 
 1857      0000
 1858              	.LBE138:
 1859              	.LBE137:
 426:fltk-1.3.4-1/png/pngset.c **** 
 1860              		.loc 1 426 0
 1861 0120 4883C418 		addq	$24, %rsp
 1862              		.cfi_def_cfa_offset 56
 1863 0124 5B       		popq	%rbx
 1864              		.cfi_restore 3
 1865              		.cfi_def_cfa_offset 48
 1866              	.LVL181:
 1867 0125 5D       		popq	%rbp
 1868              		.cfi_restore 6
 1869              		.cfi_def_cfa_offset 40
 1870              	.LVL182:
 1871 0126 415C     		popq	%r12
 1872              		.cfi_restore 12
 1873              		.cfi_def_cfa_offset 32
 1874              	.LVL183:
 1875 0128 415D     		popq	%r13
 1876              		.cfi_restore 13
 1877              		.cfi_def_cfa_offset 24
 1878              	.LVL184:
 1879 012a 415E     		popq	%r14
 1880              		.cfi_restore 14
 1881              		.cfi_def_cfa_offset 16
 1882              	.LVL185:
 1883 012c 415F     		popq	%r15
 1884              		.cfi_restore 15
 1885              		.cfi_def_cfa_offset 8
 1886              	.LVL186:
 1887              	.L150:
 1888 012e F3C3     		rep ret
 1889              	.LVL187:
 1890              		.p2align 4,,10
 1891              		.p2align 3
 1892              	.L153:
 1893              		.cfi_def_cfa_offset 80
 1894              		.cfi_offset 3, -56
 1895              		.cfi_offset 6, -48
 1896              		.cfi_offset 12, -40
 1897              		.cfi_offset 13, -32
 1898              		.cfi_offset 14, -24
 1899              		.cfi_offset 15, -16
 1900              	.LBB146:
 1901              	.LBB143:
 415:fltk-1.3.4-1/png/pngset.c ****       info_ptr->scal_s_width = NULL;
 1902              		.loc 1 415 0
 1903 0130 488BB340 		movq	320(%rbx), %rsi
 1903      010000
 1904 0137 488B7C24 		movq	8(%rsp), %rdi
 1904      08
 1905 013c E8000000 		call	png_free
 1905      00
 1906              	.LVL188:
 416:fltk-1.3.4-1/png/pngset.c **** 
 1907              		.loc 1 416 0
 1908 0141 48C78340 		movq	$0, 320(%rbx)
 1908      01000000 
 1908      000000
 1909              	.L151:
 418:fltk-1.3.4-1/png/pngset.c ****       return;
 1910              		.loc 1 418 0
 1911 014c 488B7C24 		movq	8(%rsp), %rdi
 1911      08
 1912              	.LBE143:
 1913              	.LBE146:
 426:fltk-1.3.4-1/png/pngset.c **** 
 1914              		.loc 1 426 0
 1915 0151 4883C418 		addq	$24, %rsp
 1916              		.cfi_remember_state
 1917              		.cfi_def_cfa_offset 56
 1918              	.LBB147:
 1919              	.LBB144:
 418:fltk-1.3.4-1/png/pngset.c ****       return;
 1920              		.loc 1 418 0
 1921 0155 BE000000 		movl	$.LC36, %esi
 1921      00
 1922              	.LBE144:
 1923              	.LBE147:
 426:fltk-1.3.4-1/png/pngset.c **** 
 1924              		.loc 1 426 0
 1925 015a 5B       		popq	%rbx
 1926              		.cfi_restore 3
 1927              		.cfi_def_cfa_offset 48
 1928              	.LVL189:
 1929 015b 5D       		popq	%rbp
 1930              		.cfi_restore 6
 1931              		.cfi_def_cfa_offset 40
 1932              	.LVL190:
 1933 015c 415C     		popq	%r12
 1934              		.cfi_restore 12
 1935              		.cfi_def_cfa_offset 32
 1936              	.LVL191:
 1937 015e 415D     		popq	%r13
 1938              		.cfi_restore 13
 1939              		.cfi_def_cfa_offset 24
 1940              	.LVL192:
 1941 0160 415E     		popq	%r14
 1942              		.cfi_restore 14
 1943              		.cfi_def_cfa_offset 16
 1944              	.LVL193:
 1945 0162 415F     		popq	%r15
 1946              		.cfi_restore 15
 1947              		.cfi_def_cfa_offset 8
 1948              	.LVL194:
 1949              	.LBB148:
 1950              	.LBB145:
 418:fltk-1.3.4-1/png/pngset.c ****       return;
 1951              		.loc 1 418 0
 1952 0164 E9000000 		jmp	png_warning
 1952      00
 1953              	.LVL195:
 1954              	.L133:
 1955              		.cfi_restore_state
 387:fltk-1.3.4-1/png/pngset.c **** 
 1956              		.loc 1 387 0
 1957 0169 488B7C24 		movq	8(%rsp), %rdi
 1957      08
 1958 016e BE000000 		movl	$.LC35, %esi
 1958      00
 1959 0173 E8000000 		call	png_error
 1959      00
 1960              	.LVL196:
 1961              	.L131:
 383:fltk-1.3.4-1/png/pngset.c **** 
 1962              		.loc 1 383 0
 1963 0178 488B7C24 		movq	8(%rsp), %rdi
 1963      08
 1964 017d BE000000 		movl	$.LC34, %esi
 1964      00
 1965 0182 E8000000 		call	png_error
 1965      00
 1966              	.LVL197:
 1967              	.L152:
 1968              	.LBE145:
 1969              	.LBE148:
 379:fltk-1.3.4-1/png/pngset.c **** 
 1970              		.loc 1 379 0
 1971 0187 BE000000 		movl	$.LC33, %esi
 1971      00
 1972 018c E8000000 		call	png_error
 1972      00
 1973              	.LVL198:
 1974              		.cfi_endproc
 1975              	.LFE67:
 1977              		.section	.text.unlikely.png_set_sCAL_s
 1978              	.LCOLDE37:
 1979              		.section	.text.png_set_sCAL_s
 1980              	.LHOTE37:
 1981              		.section	.rodata.str1.1
 1982              	.LC39:
 1983 00eb 496E7661 		.string	"Invalid sCAL width ignored"
 1983      6C696420 
 1983      7343414C 
 1983      20776964 
 1983      74682069 
 1984              	.LC40:
 1985 0106 496E7661 		.string	"Invalid sCAL height ignored"
 1985      6C696420 
 1985      7343414C 
 1985      20686569 
 1985      67687420 
 1986              		.section	.text.unlikely.png_set_sCAL,"ax",@progbits
 1987              	.LCOLDB41:
 1988              		.section	.text.png_set_sCAL,"ax",@progbits
 1989              	.LHOTB41:
 1990              		.p2align 4,,15
 1991              		.globl	png_set_sCAL
 1993              	png_set_sCAL:
 1994              	.LFB68:
 432:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "sCAL");
 1995              		.loc 1 432 0
 1996              		.cfi_startproc
 1997              	.LVL199:
 1998 0000 4154     		pushq	%r12
 1999              		.cfi_def_cfa_offset 16
 2000              		.cfi_offset 12, -16
 436:fltk-1.3.4-1/png/pngset.c ****       png_warning(png_ptr, "Invalid sCAL width ignored");
 2001              		.loc 1 436 0
 2002 0002 660FEFD2 		pxor	%xmm2, %xmm2
 432:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "sCAL");
 2003              		.loc 1 432 0
 2004 0006 55       		pushq	%rbp
 2005              		.cfi_def_cfa_offset 24
 2006              		.cfi_offset 6, -24
 2007 0007 53       		pushq	%rbx
 2008              		.cfi_def_cfa_offset 32
 2009              		.cfi_offset 3, -32
 2010 0008 4889FB   		movq	%rdi, %rbx
 2011 000b 4883EC50 		subq	$80, %rsp
 2012              		.cfi_def_cfa_offset 112
 432:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "sCAL");
 2013              		.loc 1 432 0
 2014 000f 64488B04 		movq	%fs:40, %rax
 2014      25280000 
 2014      00
 2015 0018 48894424 		movq	%rax, 72(%rsp)
 2015      48
 2016 001d 31C0     		xorl	%eax, %eax
 436:fltk-1.3.4-1/png/pngset.c ****       png_warning(png_ptr, "Invalid sCAL width ignored");
 2017              		.loc 1 436 0
 2018 001f 660F2ED0 		ucomisd	%xmm0, %xmm2
 2019 0023 0F838F00 		jnb	.L166
 2019      0000
 439:fltk-1.3.4-1/png/pngset.c ****       png_warning(png_ptr, "Invalid sCAL height ignored");
 2020              		.loc 1 439 0
 2021 0029 660F2ED1 		ucomisd	%xmm1, %xmm2
 2022 002d 7379     		jnb	.L167
 2023 002f 4889F5   		movq	%rsi, %rbp
 2024              	.LBB149:
 448:fltk-1.3.4-1/png/pngset.c ****          PNG_sCAL_PRECISION);
 2025              		.loc 1 448 0
 2026 0032 488D7424 		leaq	16(%rsp), %rsi
 2026      10
 2027              	.LVL200:
 2028 0037 4189D4   		movl	%edx, %r12d
 2029 003a B9050000 		movl	$5, %ecx
 2029      00
 2030 003f BA120000 		movl	$18, %edx
 2030      00
 2031              	.LVL201:
 2032 0044 F20F114C 		movsd	%xmm1, 8(%rsp)
 2032      2408
 2033 004a E8000000 		call	png_ascii_from_fp
 2033      00
 2034              	.LVL202:
 450:fltk-1.3.4-1/png/pngset.c ****          PNG_sCAL_PRECISION);
 2035              		.loc 1 450 0
 2036 004f F20F104C 		movsd	8(%rsp), %xmm1
 2036      2408
 2037 0055 488D7424 		leaq	48(%rsp), %rsi
 2037      30
 2038 005a B9050000 		movl	$5, %ecx
 2038      00
 2039 005f BA120000 		movl	$18, %edx
 2039      00
 2040 0064 4889DF   		movq	%rbx, %rdi
 2041 0067 660F28C1 		movapd	%xmm1, %xmm0
 2042 006b E8000000 		call	png_ascii_from_fp
 2042      00
 2043              	.LVL203:
 453:fltk-1.3.4-1/png/pngset.c ****    }
 2044              		.loc 1 453 0
 2045 0070 4C8D4424 		leaq	48(%rsp), %r8
 2045      30
 2046 0075 488D4C24 		leaq	16(%rsp), %rcx
 2046      10
 2047 007a 4489E2   		movl	%r12d, %edx
 2048 007d 4889EE   		movq	%rbp, %rsi
 2049 0080 4889DF   		movq	%rbx, %rdi
 2050 0083 E8000000 		call	png_set_sCAL_s
 2050      00
 2051              	.LVL204:
 2052              	.L154:
 2053              	.LBE149:
 455:fltk-1.3.4-1/png/pngset.c **** #  endif
 2054              		.loc 1 455 0
 2055 0088 488B4424 		movq	72(%rsp), %rax
 2055      48
 2056 008d 64483304 		xorq	%fs:40, %rax
 2056      25280000 
 2056      00
 2057 0096 752C     		jne	.L168
 2058 0098 4883C450 		addq	$80, %rsp
 2059              		.cfi_remember_state
 2060              		.cfi_def_cfa_offset 32
 2061 009c 5B       		popq	%rbx
 2062              		.cfi_def_cfa_offset 24
 2063              	.LVL205:
 2064 009d 5D       		popq	%rbp
 2065              		.cfi_def_cfa_offset 16
 2066 009e 415C     		popq	%r12
 2067              		.cfi_def_cfa_offset 8
 2068 00a0 C3       		ret
 2069              	.LVL206:
 2070              		.p2align 4,,10
 2071 00a1 0F1F8000 		.p2align 3
 2071      000000
 2072              	.L167:
 2073              		.cfi_restore_state
 440:fltk-1.3.4-1/png/pngset.c **** 
 2074              		.loc 1 440 0
 2075 00a8 BE000000 		movl	$.LC40, %esi
 2075      00
 2076              	.LVL207:
 2077 00ad E8000000 		call	png_warning
 2077      00
 2078              	.LVL208:
 2079 00b2 EBD4     		jmp	.L154
 2080              	.LVL209:
 2081              		.p2align 4,,10
 2082 00b4 0F1F4000 		.p2align 3
 2083              	.L166:
 437:fltk-1.3.4-1/png/pngset.c **** 
 2084              		.loc 1 437 0
 2085 00b8 BE000000 		movl	$.LC39, %esi
 2085      00
 2086              	.LVL210:
 2087 00bd E8000000 		call	png_warning
 2087      00
 2088              	.LVL211:
 2089 00c2 EBC4     		jmp	.L154
 2090              	.L168:
 455:fltk-1.3.4-1/png/pngset.c **** #  endif
 2091              		.loc 1 455 0
 2092 00c4 E8000000 		call	__stack_chk_fail
 2092      00
 2093              	.LVL212:
 2094              		.cfi_endproc
 2095              	.LFE68:
 2097              		.section	.text.unlikely.png_set_sCAL
 2098              	.LCOLDE41:
 2099              		.section	.text.png_set_sCAL
 2100              	.LHOTE41:
 2101              		.section	.text.unlikely.png_set_sCAL_fixed,"ax",@progbits
 2102              	.LCOLDB42:
 2103              		.section	.text.png_set_sCAL_fixed,"ax",@progbits
 2104              	.LHOTB42:
 2105              		.p2align 4,,15
 2106              		.globl	png_set_sCAL_fixed
 2108              	png_set_sCAL_fixed:
 2109              	.LFB69:
 462:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "sCAL");
 2110              		.loc 1 462 0
 2111              		.cfi_startproc
 2112              	.LVL213:
 2113 0000 4155     		pushq	%r13
 2114              		.cfi_def_cfa_offset 16
 2115              		.cfi_offset 13, -16
 2116 0002 4154     		pushq	%r12
 2117              		.cfi_def_cfa_offset 24
 2118              		.cfi_offset 12, -24
 2119 0004 55       		pushq	%rbp
 2120              		.cfi_def_cfa_offset 32
 2121              		.cfi_offset 6, -32
 2122 0005 53       		pushq	%rbx
 2123              		.cfi_def_cfa_offset 40
 2124              		.cfi_offset 3, -40
 2125 0006 4889FB   		movq	%rdi, %rbx
 2126 0009 4883EC48 		subq	$72, %rsp
 2127              		.cfi_def_cfa_offset 112
 462:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "sCAL");
 2128              		.loc 1 462 0
 2129 000d 64488B04 		movq	%fs:40, %rax
 2129      25280000 
 2129      00
 2130 0016 48894424 		movq	%rax, 56(%rsp)
 2130      38
 2131 001b 31C0     		xorl	%eax, %eax
 466:fltk-1.3.4-1/png/pngset.c ****       png_warning(png_ptr, "Invalid sCAL width ignored");
 2132              		.loc 1 466 0
 2133 001d 85C9     		testl	%ecx, %ecx
 2134 001f 7E77     		jle	.L175
 469:fltk-1.3.4-1/png/pngset.c ****       png_warning(png_ptr, "Invalid sCAL height ignored");
 2135              		.loc 1 469 0
 2136 0021 4585C0   		testl	%r8d, %r8d
 2137 0024 4489C5   		movl	%r8d, %ebp
 2138 0027 7E5F     		jle	.L176
 2139 0029 4989F4   		movq	%rsi, %r12
 2140 002c 4189D5   		movl	%edx, %r13d
 2141              	.LBB150:
 478:fltk-1.3.4-1/png/pngset.c ****       png_ascii_from_fixed(png_ptr, sheight, (sizeof sheight), height);
 2142              		.loc 1 478 0
 2143 002f 4889E6   		movq	%rsp, %rsi
 2144              	.LVL214:
 2145 0032 BA120000 		movl	$18, %edx
 2145      00
 2146              	.LVL215:
 2147 0037 E8000000 		call	png_ascii_from_fixed
 2147      00
 2148              	.LVL216:
 479:fltk-1.3.4-1/png/pngset.c **** 
 2149              		.loc 1 479 0
 2150 003c 488D7424 		leaq	32(%rsp), %rsi
 2150      20
 2151 0041 89E9     		movl	%ebp, %ecx
 2152 0043 BA120000 		movl	$18, %edx
 2152      00
 2153 0048 4889DF   		movq	%rbx, %rdi
 2154 004b E8000000 		call	png_ascii_from_fixed
 2154      00
 2155              	.LVL217:
 481:fltk-1.3.4-1/png/pngset.c ****    }
 2156              		.loc 1 481 0
 2157 0050 4C8D4424 		leaq	32(%rsp), %r8
 2157      20
 2158 0055 4889E1   		movq	%rsp, %rcx
 2159 0058 4489EA   		movl	%r13d, %edx
 2160 005b 4C89E6   		movq	%r12, %rsi
 2161 005e 4889DF   		movq	%rbx, %rdi
 2162 0061 E8000000 		call	png_set_sCAL_s
 2162      00
 2163              	.LVL218:
 2164              	.L169:
 2165              	.LBE150:
 483:fltk-1.3.4-1/png/pngset.c **** #  endif
 2166              		.loc 1 483 0
 2167 0066 488B4424 		movq	56(%rsp), %rax
 2167      38
 2168 006b 64483304 		xorq	%fs:40, %rax
 2168      25280000 
 2168      00
 2169 0074 752E     		jne	.L177
 2170 0076 4883C448 		addq	$72, %rsp
 2171              		.cfi_remember_state
 2172              		.cfi_def_cfa_offset 40
 2173 007a 5B       		popq	%rbx
 2174              		.cfi_def_cfa_offset 32
 2175              	.LVL219:
 2176 007b 5D       		popq	%rbp
 2177              		.cfi_def_cfa_offset 24
 2178 007c 415C     		popq	%r12
 2179              		.cfi_def_cfa_offset 16
 2180 007e 415D     		popq	%r13
 2181              		.cfi_def_cfa_offset 8
 2182 0080 C3       		ret
 2183              	.LVL220:
 2184              		.p2align 4,,10
 2185 0081 0F1F8000 		.p2align 3
 2185      000000
 2186              	.L176:
 2187              		.cfi_restore_state
 470:fltk-1.3.4-1/png/pngset.c **** 
 2188              		.loc 1 470 0
 2189 0088 BE000000 		movl	$.LC40, %esi
 2189      00
 2190              	.LVL221:
 2191 008d E8000000 		call	png_warning
 2191      00
 2192              	.LVL222:
 2193 0092 EBD2     		jmp	.L169
 2194              	.LVL223:
 2195              		.p2align 4,,10
 2196 0094 0F1F4000 		.p2align 3
 2197              	.L175:
 467:fltk-1.3.4-1/png/pngset.c **** 
 2198              		.loc 1 467 0
 2199 0098 BE000000 		movl	$.LC39, %esi
 2199      00
 2200              	.LVL224:
 2201 009d E8000000 		call	png_warning
 2201      00
 2202              	.LVL225:
 2203 00a2 EBC2     		jmp	.L169
 2204              	.L177:
 483:fltk-1.3.4-1/png/pngset.c **** #  endif
 2205              		.loc 1 483 0
 2206 00a4 E8000000 		call	__stack_chk_fail
 2206      00
 2207              	.LVL226:
 2208              		.cfi_endproc
 2209              	.LFE69:
 2211              		.section	.text.unlikely.png_set_sCAL_fixed
 2212              	.LCOLDE42:
 2213              		.section	.text.png_set_sCAL_fixed
 2214              	.LHOTE42:
 2215              		.section	.text.unlikely.png_set_pHYs,"ax",@progbits
 2216              	.LCOLDB43:
 2217              		.section	.text.png_set_pHYs,"ax",@progbits
 2218              	.LHOTB43:
 2219              		.p2align 4,,15
 2220              		.globl	png_set_pHYs
 2222              	png_set_pHYs:
 2223              	.LFB70:
 491:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "pHYs");
 2224              		.loc 1 491 0
 2225              		.cfi_startproc
 2226              	.LVL227:
 494:fltk-1.3.4-1/png/pngset.c ****       return;
 2227              		.loc 1 494 0
 2228 0000 4885FF   		testq	%rdi, %rdi
 2229 0003 741F     		je	.L178
 2230 0005 4885F6   		testq	%rsi, %rsi
 2231 0008 741A     		je	.L178
 500:fltk-1.3.4-1/png/pngset.c **** }
 2232              		.loc 1 500 0
 2233 000a 814E0880 		orl	$128, 8(%rsi)
 2233      000000
 497:fltk-1.3.4-1/png/pngset.c ****    info_ptr->y_pixels_per_unit = res_y;
 2234              		.loc 1 497 0
 2235 0011 8996E000 		movl	%edx, 224(%rsi)
 2235      0000
 498:fltk-1.3.4-1/png/pngset.c ****    info_ptr->phys_unit_type = (png_byte)unit_type;
 2236              		.loc 1 498 0
 2237 0017 898EE400 		movl	%ecx, 228(%rsi)
 2237      0000
 499:fltk-1.3.4-1/png/pngset.c ****    info_ptr->valid |= PNG_INFO_pHYs;
 2238              		.loc 1 499 0
 2239 001d 448886E8 		movb	%r8b, 232(%rsi)
 2239      000000
 2240              	.L178:
 2241 0024 F3C3     		rep ret
 2242              		.cfi_endproc
 2243              	.LFE70:
 2245              		.section	.text.unlikely.png_set_pHYs
 2246              	.LCOLDE43:
 2247              		.section	.text.png_set_pHYs
 2248              	.LHOTE43:
 2249              		.section	.rodata.str1.1
 2250              	.LC44:
 2251 0122 496E7661 		.string	"Invalid palette length"
 2251      6C696420 
 2251      70616C65 
 2251      74746520 
 2251      6C656E67 
 2252              	.LC45:
 2253 0139 496E7661 		.string	"Invalid palette"
 2253      6C696420 
 2253      70616C65 
 2253      74746500 
 2254              		.section	.text.unlikely.png_set_PLTE,"ax",@progbits
 2255              	.LCOLDB46:
 2256              		.section	.text.png_set_PLTE,"ax",@progbits
 2257              	.LHOTB46:
 2258              		.p2align 4,,15
 2259              		.globl	png_set_PLTE
 2261              	png_set_PLTE:
 2262              	.LFB71:
 507:fltk-1.3.4-1/png/pngset.c **** 
 2263              		.loc 1 507 0
 2264              		.cfi_startproc
 2265              	.LVL228:
 511:fltk-1.3.4-1/png/pngset.c ****       return;
 2266              		.loc 1 511 0
 2267 0000 4885FF   		testq	%rdi, %rdi
 2268 0003 0F84B500 		je	.L202
 2268      0000
 2269 0009 4885F6   		testq	%rsi, %rsi
 2270 000c 0F84AC00 		je	.L202
 2270      0000
 507:fltk-1.3.4-1/png/pngset.c **** 
 2271              		.loc 1 507 0
 2272 0012 4155     		pushq	%r13
 2273              		.cfi_def_cfa_offset 16
 2274              		.cfi_offset 13, -16
 2275 0014 4154     		pushq	%r12
 2276              		.cfi_def_cfa_offset 24
 2277              		.cfi_offset 12, -24
 2278 0016 4989D5   		movq	%rdx, %r13
 2279 0019 55       		pushq	%rbp
 2280              		.cfi_def_cfa_offset 32
 2281              		.cfi_offset 6, -32
 2282 001a 53       		pushq	%rbx
 2283              		.cfi_def_cfa_offset 40
 2284              		.cfi_offset 3, -40
 2285 001b 4189CC   		movl	%ecx, %r12d
 2286 001e 4889F3   		movq	%rsi, %rbx
 2287 0021 4889FD   		movq	%rdi, %rbp
 2288 0024 4883EC08 		subq	$8, %rsp
 2289              		.cfi_def_cfa_offset 48
 514:fltk-1.3.4-1/png/pngset.c ****    {
 2290              		.loc 1 514 0
 2291 0028 81F90001 		cmpl	$256, %ecx
 2291      0000
 2292 002e 7620     		jbe	.L182
 516:fltk-1.3.4-1/png/pngset.c ****          png_error(png_ptr, "Invalid palette length");
 2293              		.loc 1 516 0
 2294 0030 807B2503 		cmpb	$3, 37(%rbx)
 517:fltk-1.3.4-1/png/pngset.c **** 
 2295              		.loc 1 517 0
 2296 0034 BE000000 		movl	$.LC44, %esi
 2296      00
 2297              	.LVL229:
 516:fltk-1.3.4-1/png/pngset.c ****          png_error(png_ptr, "Invalid palette length");
 2298              		.loc 1 516 0
 2299 0039 0F843F01 		je	.L203
 2299      0000
 561:fltk-1.3.4-1/png/pngset.c **** 
 2300              		.loc 1 561 0
 2301 003f 4883C408 		addq	$8, %rsp
 2302              		.cfi_remember_state
 2303              		.cfi_def_cfa_offset 40
 2304 0043 5B       		popq	%rbx
 2305              		.cfi_restore 3
 2306              		.cfi_def_cfa_offset 32
 2307              	.LVL230:
 2308 0044 5D       		popq	%rbp
 2309              		.cfi_restore 6
 2310              		.cfi_def_cfa_offset 24
 2311 0045 415C     		popq	%r12
 2312              		.cfi_restore 12
 2313              		.cfi_def_cfa_offset 16
 2314 0047 415D     		popq	%r13
 2315              		.cfi_restore 13
 2316              		.cfi_def_cfa_offset 8
 521:fltk-1.3.4-1/png/pngset.c ****          return;
 2317              		.loc 1 521 0
 2318 0049 E9000000 		jmp	png_warning
 2318      00
 2319              	.LVL231:
 2320 004e 6690     		.p2align 4,,10
 2321              		.p2align 3
 2322              	.L182:
 2323              		.cfi_restore_state
 526:fltk-1.3.4-1/png/pngset.c ****       (num_palette == 0
 2324              		.loc 1 526 0
 2325 0050 85C9     		testl	%ecx, %ecx
 2326 0052 7E09     		jle	.L193
 2327 0054 4885D2   		testq	%rdx, %rdx
 2328 0057 0F84F900 		je	.L184
 2328      0000
 2329              	.L193:
 526:fltk-1.3.4-1/png/pngset.c ****       (num_palette == 0
 2330              		.loc 1 526 0 is_stmt 0 discriminator 1
 2331 005d 4585E4   		testl	%r12d, %r12d
 2332 0060 755E     		jne	.L186
 529:fltk-1.3.4-1/png/pngset.c **** #        endif
 2333              		.loc 1 529 0 is_stmt 1
 2334 0062 F6851804 		testb	$1, 1048(%rbp)
 2334      000001
 2335 0069 0F84E700 		je	.L184
 2335      0000
 544:fltk-1.3.4-1/png/pngset.c **** 
 2336              		.loc 1 544 0
 2337 006f 31C9     		xorl	%ecx, %ecx
 2338              	.LVL232:
 2339 0071 BA001000 		movl	$4096, %edx
 2339      00
 2340              	.LVL233:
 2341 0076 4889DE   		movq	%rbx, %rsi
 2342 0079 4889EF   		movq	%rbp, %rdi
 2343              	.LVL234:
 2344 007c E8000000 		call	png_free_data
 2344      00
 2345              	.LVL235:
 550:fltk-1.3.4-1/png/pngset.c ****        PNG_MAX_PALETTE_LENGTH * (sizeof (png_color))));
 2346              		.loc 1 550 0
 2347 0081 BE000300 		movl	$768, %esi
 2347      00
 2348 0086 4889EF   		movq	%rbp, %rdi
 2349 0089 E8000000 		call	png_calloc
 2349      00
 2350              	.LVL236:
 2351 008e 48898560 		movq	%rax, 608(%rbp)
 2351      020000
 2352              	.L188:
 555:fltk-1.3.4-1/png/pngset.c ****    info_ptr->num_palette = png_ptr->num_palette = (png_uint_16)num_palette;
 2353              		.loc 1 555 0
 2354 0095 48894318 		movq	%rax, 24(%rbx)
 556:fltk-1.3.4-1/png/pngset.c **** 
 2355              		.loc 1 556 0
 2356 0099 664489A5 		movw	%r12w, 616(%rbp)
 2356      68020000 
 2357 00a1 66448963 		movw	%r12w, 32(%rbx)
 2357      20
 558:fltk-1.3.4-1/png/pngset.c **** 
 2358              		.loc 1 558 0
 2359 00a6 818B1C01 		orl	$4096, 284(%rbx)
 2359      00000010 
 2359      0000
 560:fltk-1.3.4-1/png/pngset.c **** }
 2360              		.loc 1 560 0
 2361 00b0 834B0808 		orl	$8, 8(%rbx)
 561:fltk-1.3.4-1/png/pngset.c **** 
 2362              		.loc 1 561 0
 2363 00b4 4883C408 		addq	$8, %rsp
 2364              		.cfi_def_cfa_offset 40
 2365 00b8 5B       		popq	%rbx
 2366              		.cfi_restore 3
 2367              		.cfi_def_cfa_offset 32
 2368              	.LVL237:
 2369 00b9 5D       		popq	%rbp
 2370              		.cfi_restore 6
 2371              		.cfi_def_cfa_offset 24
 2372              	.LVL238:
 2373 00ba 415C     		popq	%r12
 2374              		.cfi_restore 12
 2375              		.cfi_def_cfa_offset 16
 2376              	.LVL239:
 2377 00bc 415D     		popq	%r13
 2378              		.cfi_restore 13
 2379              		.cfi_def_cfa_offset 8
 2380              	.LVL240:
 2381              	.L202:
 2382 00be F3C3     		rep ret
 2383              	.LVL241:
 2384              		.p2align 4,,10
 2385              		.p2align 3
 2386              	.L186:
 2387              		.cfi_def_cfa_offset 48
 2388              		.cfi_offset 3, -40
 2389              		.cfi_offset 6, -32
 2390              		.cfi_offset 12, -24
 2391              		.cfi_offset 13, -16
 544:fltk-1.3.4-1/png/pngset.c **** 
 2392              		.loc 1 544 0
 2393 00c0 31C9     		xorl	%ecx, %ecx
 2394              	.LVL242:
 2395 00c2 BA001000 		movl	$4096, %edx
 2395      00
 2396              	.LVL243:
 2397 00c7 4889DE   		movq	%rbx, %rsi
 2398 00ca 4889EF   		movq	%rbp, %rdi
 2399              	.LVL244:
 2400 00cd E8000000 		call	png_free_data
 2400      00
 2401              	.LVL245:
 550:fltk-1.3.4-1/png/pngset.c ****        PNG_MAX_PALETTE_LENGTH * (sizeof (png_color))));
 2402              		.loc 1 550 0
 2403 00d2 BE000300 		movl	$768, %esi
 2403      00
 2404 00d7 4889EF   		movq	%rbp, %rdi
 2405 00da E8000000 		call	png_calloc
 2405      00
 2406              	.LVL246:
 2407              	.LBB151:
 2408              	.LBB152:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 2409              		.loc 2 53 0
 2410 00df 4963D4   		movslq	%r12d, %rdx
 2411              	.LBE152:
 2412              	.LBE151:
 550:fltk-1.3.4-1/png/pngset.c ****        PNG_MAX_PALETTE_LENGTH * (sizeof (png_color))));
 2413              		.loc 1 550 0
 2414 00e2 48898560 		movq	%rax, 608(%rbp)
 2414      020000
 2415              	.LVL247:
 2416              	.LBB155:
 2417              	.LBB153:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 2418              		.loc 2 53 0
 2419 00e9 488D0C52 		leaq	(%rdx,%rdx,2), %rcx
 2420 00ed 83F908   		cmpl	$8, %ecx
 2421 00f0 732E     		jnb	.L189
 2422 00f2 F6C104   		testb	$4, %cl
 2423 00f5 7571     		jne	.L204
 2424 00f7 85C9     		testl	%ecx, %ecx
 2425 00f9 749A     		je	.L188
 2426 00fb 410FB655 		movzbl	0(%r13), %edx
 2426      00
 2427 0100 F6C102   		testb	$2, %cl
 2428 0103 8810     		movb	%dl, (%rax)
 2429 0105 748E     		je	.L188
 2430 0107 89C9     		movl	%ecx, %ecx
 2431 0109 410FB754 		movzwl	-2(%r13,%rcx), %edx
 2431      0DFE
 2432 010f 66895408 		movw	%dx, -2(%rax,%rcx)
 2432      FE
 2433 0114 E97CFFFF 		jmp	.L188
 2433      FF
 2434 0119 0F1F8000 		.p2align 4,,10
 2434      000000
 2435              		.p2align 3
 2436              	.L189:
 2437 0120 498B5500 		movq	0(%r13), %rdx
 2438 0124 488D7808 		leaq	8(%rax), %rdi
 2439 0128 4883E7F8 		andq	$-8, %rdi
 2440 012c 488910   		movq	%rdx, (%rax)
 2441 012f 89CA     		movl	%ecx, %edx
 2442 0131 498B7415 		movq	-8(%r13,%rdx), %rsi
 2442      F8
 2443 0136 48897410 		movq	%rsi, -8(%rax,%rdx)
 2443      F8
 2444 013b 4889C2   		movq	%rax, %rdx
 2445 013e 4C89EE   		movq	%r13, %rsi
 2446 0141 4829FA   		subq	%rdi, %rdx
 2447 0144 01D1     		addl	%edx, %ecx
 2448 0146 4829D6   		subq	%rdx, %rsi
 2449 0149 C1E903   		shrl	$3, %ecx
 2450 014c 89C9     		movl	%ecx, %ecx
 2451 014e F348A5   		rep movsq
 2452 0151 E93FFFFF 		jmp	.L188
 2452      FF
 2453              	.LVL248:
 2454              	.L184:
 2455              	.LBE153:
 2456              	.LBE155:
 533:fltk-1.3.4-1/png/pngset.c ****       return;
 2457              		.loc 1 533 0
 2458 0156 BE000000 		movl	$.LC45, %esi
 2458      00
 2459 015b 4889EF   		movq	%rbp, %rdi
 2460              	.LVL249:
 2461 015e E8000000 		call	png_error
 2461      00
 2462              	.LVL250:
 2463              		.p2align 4,,10
 2464 0163 0F1F4400 		.p2align 3
 2464      00
 2465              	.L204:
 2466              	.LBB156:
 2467              	.LBB154:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 2468              		.loc 2 53 0
 2469 0168 418B5500 		movl	0(%r13), %edx
 2470 016c 89C9     		movl	%ecx, %ecx
 2471 016e 8910     		movl	%edx, (%rax)
 2472 0170 418B540D 		movl	-4(%r13,%rcx), %edx
 2472      FC
 2473 0175 895408FC 		movl	%edx, -4(%rax,%rcx)
 2474 0179 E917FFFF 		jmp	.L188
 2474      FF
 2475              	.LVL251:
 2476              	.L203:
 2477              	.LBE154:
 2478              	.LBE156:
 517:fltk-1.3.4-1/png/pngset.c **** 
 2479              		.loc 1 517 0
 2480 017e E8000000 		call	png_error
 2480      00
 2481              	.LVL252:
 2482              		.cfi_endproc
 2483              	.LFE71:
 2485              		.section	.text.unlikely.png_set_PLTE
 2486              	.LCOLDE46:
 2487              		.section	.text.png_set_PLTE
 2488              	.LHOTE46:
 2489              		.section	.text.unlikely.png_set_sBIT,"ax",@progbits
 2490              	.LCOLDB47:
 2491              		.section	.text.png_set_sBIT,"ax",@progbits
 2492              	.LHOTB47:
 2493              		.p2align 4,,15
 2494              		.globl	png_set_sBIT
 2496              	png_set_sBIT:
 2497              	.LFB72:
 567:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "sBIT");
 2498              		.loc 1 567 0
 2499              		.cfi_startproc
 2500              	.LVL253:
 570:fltk-1.3.4-1/png/pngset.c ****       return;
 2501              		.loc 1 570 0
 2502 0000 4885F6   		testq	%rsi, %rsi
 2503 0003 0F94C1   		sete	%cl
 2504 0006 4885D2   		testq	%rdx, %rdx
 2505 0009 0F94C0   		sete	%al
 2506 000c 08C1     		orb	%al, %cl
 2507 000e 751B     		jne	.L205
 2508 0010 4885FF   		testq	%rdi, %rdi
 2509 0013 7416     		je	.L205
 573:fltk-1.3.4-1/png/pngset.c ****    info_ptr->valid |= PNG_INFO_sBIT;
 2510              		.loc 1 573 0
 2511 0015 8B02     		movl	(%rdx), %eax
 2512 0017 8986B000 		movl	%eax, 176(%rsi)
 2512      0000
 2513 001d 0FB64204 		movzbl	4(%rdx), %eax
 574:fltk-1.3.4-1/png/pngset.c **** }
 2514              		.loc 1 574 0
 2515 0021 834E0802 		orl	$2, 8(%rsi)
 573:fltk-1.3.4-1/png/pngset.c ****    info_ptr->valid |= PNG_INFO_sBIT;
 2516              		.loc 1 573 0
 2517 0025 8886B400 		movb	%al, 180(%rsi)
 2517      0000
 2518              	.L205:
 2519 002b F3C3     		rep ret
 2520              		.cfi_endproc
 2521              	.LFE72:
 2523              		.section	.text.unlikely.png_set_sBIT
 2524              	.LCOLDE47:
 2525              		.section	.text.png_set_sBIT
 2526              	.LHOTE47:
 2527              		.section	.text.unlikely.png_set_sRGB,"ax",@progbits
 2528              	.LCOLDB48:
 2529              		.section	.text.png_set_sRGB,"ax",@progbits
 2530              	.LHOTB48:
 2531              		.p2align 4,,15
 2532              		.globl	png_set_sRGB
 2534              	png_set_sRGB:
 2535              	.LFB73:
 581:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "sRGB");
 2536              		.loc 1 581 0
 2537              		.cfi_startproc
 2538              	.LVL254:
 584:fltk-1.3.4-1/png/pngset.c ****       return;
 2539              		.loc 1 584 0
 2540 0000 4885FF   		testq	%rdi, %rdi
 2541 0003 742B     		je	.L210
 2542 0005 4885F6   		testq	%rsi, %rsi
 2543 0008 7426     		je	.L210
 581:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "sRGB");
 2544              		.loc 1 581 0
 2545 000a 55       		pushq	%rbp
 2546              		.cfi_def_cfa_offset 16
 2547              		.cfi_offset 6, -16
 2548 000b 53       		pushq	%rbx
 2549              		.cfi_def_cfa_offset 24
 2550              		.cfi_offset 3, -24
 2551 000c 4889F5   		movq	%rsi, %rbp
 587:fltk-1.3.4-1/png/pngset.c ****    png_colorspace_sync_info(png_ptr, info_ptr);
 2552              		.loc 1 587 0
 2553 000f 488D7634 		leaq	52(%rsi), %rsi
 2554              	.LVL255:
 2555 0013 4889FB   		movq	%rdi, %rbx
 581:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "sRGB");
 2556              		.loc 1 581 0
 2557 0016 4883EC08 		subq	$8, %rsp
 2558              		.cfi_def_cfa_offset 32
 587:fltk-1.3.4-1/png/pngset.c ****    png_colorspace_sync_info(png_ptr, info_ptr);
 2559              		.loc 1 587 0
 2560 001a E8000000 		call	png_colorspace_set_sRGB
 2560      00
 2561              	.LVL256:
 589:fltk-1.3.4-1/png/pngset.c **** 
 2562              		.loc 1 589 0
 2563 001f 4883C408 		addq	$8, %rsp
 2564              		.cfi_def_cfa_offset 24
 588:fltk-1.3.4-1/png/pngset.c **** }
 2565              		.loc 1 588 0
 2566 0023 4889EE   		movq	%rbp, %rsi
 2567 0026 4889DF   		movq	%rbx, %rdi
 589:fltk-1.3.4-1/png/pngset.c **** 
 2568              		.loc 1 589 0
 2569 0029 5B       		popq	%rbx
 2570              		.cfi_restore 3
 2571              		.cfi_def_cfa_offset 16
 2572              	.LVL257:
 2573 002a 5D       		popq	%rbp
 2574              		.cfi_restore 6
 2575              		.cfi_def_cfa_offset 8
 2576              	.LVL258:
 588:fltk-1.3.4-1/png/pngset.c **** }
 2577              		.loc 1 588 0
 2578 002b E9000000 		jmp	png_colorspace_sync_info
 2578      00
 2579              	.LVL259:
 2580              		.p2align 4,,10
 2581              		.p2align 3
 2582              	.L210:
 2583 0030 F3C3     		rep ret
 2584              		.cfi_endproc
 2585              	.LFE73:
 2587              		.section	.text.unlikely.png_set_sRGB
 2588              	.LCOLDE48:
 2589              		.section	.text.png_set_sRGB
 2590              	.LHOTE48:
 2591              		.section	.text.unlikely.png_set_sRGB_gAMA_and_cHRM,"ax",@progbits
 2592              	.LCOLDB49:
 2593              		.section	.text.png_set_sRGB_gAMA_and_cHRM,"ax",@progbits
 2594              	.LHOTB49:
 2595              		.p2align 4,,15
 2596              		.globl	png_set_sRGB_gAMA_and_cHRM
 2598              	png_set_sRGB_gAMA_and_cHRM:
 2599              	.LFB74:
 594:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "sRGB_gAMA_and_cHRM");
 2600              		.loc 1 594 0
 2601              		.cfi_startproc
 2602              	.LVL260:
 597:fltk-1.3.4-1/png/pngset.c ****       return;
 2603              		.loc 1 597 0
 2604 0000 4885FF   		testq	%rdi, %rdi
 2605 0003 743B     		je	.L218
 2606 0005 4885F6   		testq	%rsi, %rsi
 2607 0008 7436     		je	.L218
 594:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "sRGB_gAMA_and_cHRM");
 2608              		.loc 1 594 0
 2609 000a 55       		pushq	%rbp
 2610              		.cfi_def_cfa_offset 16
 2611              		.cfi_offset 6, -16
 2612 000b 53       		pushq	%rbx
 2613              		.cfi_def_cfa_offset 24
 2614              		.cfi_offset 3, -24
 2615 000c 4889F3   		movq	%rsi, %rbx
 600:fltk-1.3.4-1/png/pngset.c ****        srgb_intent) != 0)
 2616              		.loc 1 600 0
 2617 000f 488D7634 		leaq	52(%rsi), %rsi
 2618              	.LVL261:
 2619 0013 4889FD   		movq	%rdi, %rbp
 594:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "sRGB_gAMA_and_cHRM");
 2620              		.loc 1 594 0
 2621 0016 4883EC08 		subq	$8, %rsp
 2622              		.cfi_def_cfa_offset 32
 600:fltk-1.3.4-1/png/pngset.c ****        srgb_intent) != 0)
 2623              		.loc 1 600 0
 2624 001a E8000000 		call	png_colorspace_set_sRGB
 2624      00
 2625              	.LVL262:
 2626 001f 85C0     		testl	%eax, %eax
 2627 0021 7405     		je	.L213
 604:fltk-1.3.4-1/png/pngset.c ****          PNG_COLORSPACE_FROM_gAMA|PNG_COLORSPACE_FROM_cHRM;
 2628              		.loc 1 604 0
 2629 0023 66834B7E 		orw	$24, 126(%rbx)
 2629      18
 2630              	.L213:
 609:fltk-1.3.4-1/png/pngset.c **** #endif /* sRGB */
 2631              		.loc 1 609 0
 2632 0028 4883C408 		addq	$8, %rsp
 2633              		.cfi_def_cfa_offset 24
 608:fltk-1.3.4-1/png/pngset.c **** }
 2634              		.loc 1 608 0
 2635 002c 4889DE   		movq	%rbx, %rsi
 2636 002f 4889EF   		movq	%rbp, %rdi
 609:fltk-1.3.4-1/png/pngset.c **** #endif /* sRGB */
 2637              		.loc 1 609 0
 2638 0032 5B       		popq	%rbx
 2639              		.cfi_restore 3
 2640              		.cfi_def_cfa_offset 16
 2641              	.LVL263:
 2642 0033 5D       		popq	%rbp
 2643              		.cfi_restore 6
 2644              		.cfi_def_cfa_offset 8
 2645              	.LVL264:
 608:fltk-1.3.4-1/png/pngset.c **** }
 2646              		.loc 1 608 0
 2647 0034 E9000000 		jmp	png_colorspace_sync_info
 2647      00
 2648              	.LVL265:
 2649 0039 0F1F8000 		.p2align 4,,10
 2649      000000
 2650              		.p2align 3
 2651              	.L218:
 2652 0040 F3C3     		rep ret
 2653              		.cfi_endproc
 2654              	.LFE74:
 2656              		.section	.text.unlikely.png_set_sRGB_gAMA_and_cHRM
 2657              	.LCOLDE49:
 2658              		.section	.text.png_set_sRGB_gAMA_and_cHRM
 2659              	.LHOTE49:
 2660              		.section	.rodata.str1.8
 2661 01b7 00       		.align 8
 2662              	.LC50:
 2663 01b8 496E7661 		.string	"Invalid iCCP compression method"
 2663      6C696420 
 2663      69434350 
 2663      20636F6D 
 2663      70726573 
 2664              		.align 8
 2665              	.LC51:
 2666 01d8 496E7375 		.string	"Insufficient memory to process iCCP chunk"
 2666      66666963 
 2666      69656E74 
 2666      206D656D 
 2666      6F727920 
 2667 0202 00000000 		.align 8
 2667      0000
 2668              	.LC52:
 2669 0208 496E7375 		.string	"Insufficient memory to process iCCP profile"
 2669      66666963 
 2669      69656E74 
 2669      206D656D 
 2669      6F727920 
 2670              		.section	.text.unlikely.png_set_iCCP,"ax",@progbits
 2671              	.LCOLDB53:
 2672              		.section	.text.png_set_iCCP,"ax",@progbits
 2673              	.LHOTB53:
 2674              		.p2align 4,,15
 2675              		.globl	png_set_iCCP
 2677              	png_set_iCCP:
 2678              	.LFB75:
 618:fltk-1.3.4-1/png/pngset.c ****    png_charp new_iccp_name;
 2679              		.loc 1 618 0
 2680              		.cfi_startproc
 2681              	.LVL266:
 625:fltk-1.3.4-1/png/pngset.c ****       return;
 2682              		.loc 1 625 0
 2683 0000 4885FF   		testq	%rdi, %rdi
 2684 0003 746F     		je	.L235
 2685 0005 4885F6   		testq	%rsi, %rsi
 2686 0008 746A     		je	.L235
 625:fltk-1.3.4-1/png/pngset.c ****       return;
 2687              		.loc 1 625 0 is_stmt 0 discriminator 1
 2688 000a 4885D2   		testq	%rdx, %rdx
 2689 000d 7465     		je	.L235
 2690 000f 4D85C0   		testq	%r8, %r8
 2691 0012 7460     		je	.L235
 618:fltk-1.3.4-1/png/pngset.c ****    png_charp new_iccp_name;
 2692              		.loc 1 618 0 is_stmt 1
 2693 0014 4157     		pushq	%r15
 2694              		.cfi_def_cfa_offset 16
 2695              		.cfi_offset 15, -16
 2696 0016 4156     		pushq	%r14
 2697              		.cfi_def_cfa_offset 24
 2698              		.cfi_offset 14, -24
 2699 0018 4989FE   		movq	%rdi, %r14
 2700 001b 4155     		pushq	%r13
 2701              		.cfi_def_cfa_offset 32
 2702              		.cfi_offset 13, -32
 2703 001d 4154     		pushq	%r12
 2704              		.cfi_def_cfa_offset 40
 2705              		.cfi_offset 12, -40
 2706 001f 4589CD   		movl	%r9d, %r13d
 2707 0022 55       		pushq	%rbp
 2708              		.cfi_def_cfa_offset 48
 2709              		.cfi_offset 6, -48
 2710 0023 53       		pushq	%rbx
 2711              		.cfi_def_cfa_offset 56
 2712              		.cfi_offset 3, -56
 2713 0024 4D89C4   		movq	%r8, %r12
 2714 0027 4889D5   		movq	%rdx, %rbp
 2715 002a 4889F3   		movq	%rsi, %rbx
 2716 002d 4883EC18 		subq	$24, %rsp
 2717              		.cfi_def_cfa_offset 80
 628:fltk-1.3.4-1/png/pngset.c ****       png_app_error(png_ptr, "Invalid iCCP compression method");
 2718              		.loc 1 628 0
 2719 0031 85C9     		testl	%ecx, %ecx
 2720 0033 0F85F700 		jne	.L237
 2720      0000
 2721              	.LVL267:
 2722              	.L224:
 2723              	.LBB157:
 638:fltk-1.3.4-1/png/pngset.c ****          proflen, profile, info_ptr->color_type);
 2724              		.loc 1 638 0
 2725 0039 440FB64B 		movzbl	37(%rbx), %r9d
 2725      25
 2726 003e 488D7334 		leaq	52(%rbx), %rsi
 2727 0042 4D89E0   		movq	%r12, %r8
 2728 0045 4489E9   		movl	%r13d, %ecx
 2729 0048 4889EA   		movq	%rbp, %rdx
 2730 004b 4C89F7   		movq	%r14, %rdi
 2731 004e E8000000 		call	png_colorspace_set_ICC
 2731      00
 2732              	.LVL268:
 641:fltk-1.3.4-1/png/pngset.c **** 
 2733              		.loc 1 641 0
 2734 0053 4889DE   		movq	%rbx, %rsi
 638:fltk-1.3.4-1/png/pngset.c ****          proflen, profile, info_ptr->color_type);
 2735              		.loc 1 638 0
 2736 0056 4189C7   		movl	%eax, %r15d
 2737              	.LVL269:
 641:fltk-1.3.4-1/png/pngset.c **** 
 2738              		.loc 1 641 0
 2739 0059 4C89F7   		movq	%r14, %rdi
 2740 005c E8000000 		call	png_colorspace_sync_info
 2740      00
 2741              	.LVL270:
 644:fltk-1.3.4-1/png/pngset.c ****          return;
 2742              		.loc 1 644 0
 2743 0061 4585FF   		testl	%r15d, %r15d
 2744 0064 751A     		jne	.L238
 2745              	.LVL271:
 2746              	.L219:
 2747              	.LBE157:
 683:fltk-1.3.4-1/png/pngset.c **** #endif
 2748              		.loc 1 683 0
 2749 0066 4883C418 		addq	$24, %rsp
 2750              		.cfi_def_cfa_offset 56
 2751 006a 5B       		popq	%rbx
 2752              		.cfi_restore 3
 2753              		.cfi_def_cfa_offset 48
 2754              	.LVL272:
 2755 006b 5D       		popq	%rbp
 2756              		.cfi_restore 6
 2757              		.cfi_def_cfa_offset 40
 2758 006c 415C     		popq	%r12
 2759              		.cfi_restore 12
 2760              		.cfi_def_cfa_offset 32
 2761              	.LVL273:
 2762 006e 415D     		popq	%r13
 2763              		.cfi_restore 13
 2764              		.cfi_def_cfa_offset 24
 2765              	.LVL274:
 2766 0070 415E     		popq	%r14
 2767              		.cfi_restore 14
 2768              		.cfi_def_cfa_offset 16
 2769              	.LVL275:
 2770 0072 415F     		popq	%r15
 2771              		.cfi_restore 15
 2772              		.cfi_def_cfa_offset 8
 2773              	.L235:
 2774 0074 F3C3     		rep ret
 2775              	.LVL276:
 2776 0076 662E0F1F 		.p2align 4,,10
 2776      84000000 
 2776      0000
 2777              		.p2align 3
 2778              	.L238:
 2779              		.cfi_def_cfa_offset 80
 2780              		.cfi_offset 3, -56
 2781              		.cfi_offset 6, -48
 2782              		.cfi_offset 12, -40
 2783              		.cfi_offset 13, -32
 2784              		.cfi_offset 14, -24
 2785              		.cfi_offset 15, -16
 2786              	.LBB158:
 648:fltk-1.3.4-1/png/pngset.c ****          PNG_COLORSPACE_FROM_gAMA|PNG_COLORSPACE_FROM_cHRM;
 2787              		.loc 1 648 0
 2788 0080 66834B7E 		orw	$24, 126(%rbx)
 2788      18
 2789              	.LBE158:
 652:fltk-1.3.4-1/png/pngset.c ****    new_iccp_name = png_voidcast(png_charp, png_malloc_warn(png_ptr, length));
 2790              		.loc 1 652 0
 2791 0085 4889EF   		movq	%rbp, %rdi
 2792 0088 E8000000 		call	strlen
 2792      00
 2793              	.LVL277:
 2794 008d 4C8D7801 		leaq	1(%rax), %r15
 2795              	.LVL278:
 653:fltk-1.3.4-1/png/pngset.c **** 
 2796              		.loc 1 653 0
 2797 0091 4C89F7   		movq	%r14, %rdi
 2798 0094 4C89FE   		movq	%r15, %rsi
 2799 0097 E8000000 		call	png_malloc_warn
 2799      00
 2800              	.LVL279:
 655:fltk-1.3.4-1/png/pngset.c ****    {
 2801              		.loc 1 655 0
 2802 009c 4885C0   		testq	%rax, %rax
 657:fltk-1.3.4-1/png/pngset.c ****       return;
 2803              		.loc 1 657 0
 2804 009f BE000000 		movl	$.LC51, %esi
 2804      00
 655:fltk-1.3.4-1/png/pngset.c ****    {
 2805              		.loc 1 655 0
 2806 00a4 0F84A600 		je	.L236
 2806      0000
 2807              	.LVL280:
 2808              	.LBB159:
 2809              	.LBB160:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 2810              		.loc 2 53 0
 2811 00aa 4C89FA   		movq	%r15, %rdx
 2812 00ad 4889EE   		movq	%rbp, %rsi
 2813 00b0 4889C7   		movq	%rax, %rdi
 2814              	.LBE160:
 2815              	.LBE159:
 662:fltk-1.3.4-1/png/pngset.c ****       png_malloc_warn(png_ptr, proflen));
 2816              		.loc 1 662 0
 2817 00b3 4589EF   		movl	%r13d, %r15d
 2818              	.LVL281:
 2819              	.LBB162:
 2820              	.LBB161:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 2821              		.loc 2 53 0
 2822 00b6 48894424 		movq	%rax, 8(%rsp)
 2822      08
 2823 00bb E8000000 		call	memcpy
 2823      00
 2824              	.LVL282:
 2825              	.LBE161:
 2826              	.LBE162:
 662:fltk-1.3.4-1/png/pngset.c ****       png_malloc_warn(png_ptr, proflen));
 2827              		.loc 1 662 0
 2828 00c0 4C89FE   		movq	%r15, %rsi
 2829 00c3 4C89F7   		movq	%r14, %rdi
 2830 00c6 E8000000 		call	png_malloc_warn
 2830      00
 2831              	.LVL283:
 665:fltk-1.3.4-1/png/pngset.c ****    {
 2832              		.loc 1 665 0
 2833 00cb 4885C0   		testq	%rax, %rax
 662:fltk-1.3.4-1/png/pngset.c ****       png_malloc_warn(png_ptr, proflen));
 2834              		.loc 1 662 0
 2835 00ce 4889C5   		movq	%rax, %rbp
 2836              	.LVL284:
 665:fltk-1.3.4-1/png/pngset.c ****    {
 2837              		.loc 1 665 0
 2838 00d1 4C8B4424 		movq	8(%rsp), %r8
 2838      08
 2839 00d6 7468     		je	.L239
 2840              	.LBB163:
 2841              	.LBB164:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 2842              		.loc 2 53 0
 2843 00d8 4C89FA   		movq	%r15, %rdx
 2844 00db 4C89E6   		movq	%r12, %rsi
 2845 00de 4889C7   		movq	%rax, %rdi
 2846 00e1 4C894424 		movq	%r8, 8(%rsp)
 2846      08
 2847              	.LVL285:
 2848 00e6 E8000000 		call	memcpy
 2848      00
 2849              	.LVL286:
 2850              	.LBE164:
 2851              	.LBE163:
 676:fltk-1.3.4-1/png/pngset.c **** 
 2852              		.loc 1 676 0
 2853 00eb 31C9     		xorl	%ecx, %ecx
 2854 00ed BA100000 		movl	$16, %edx
 2854      00
 2855 00f2 4889DE   		movq	%rbx, %rsi
 2856 00f5 4C89F7   		movq	%r14, %rdi
 2857 00f8 E8000000 		call	png_free_data
 2857      00
 2858              	.LVL287:
 679:fltk-1.3.4-1/png/pngset.c ****    info_ptr->iccp_profile = new_iccp_profile;
 2859              		.loc 1 679 0
 2860 00fd 4C8B4424 		movq	8(%rsp), %r8
 2860      08
 678:fltk-1.3.4-1/png/pngset.c ****    info_ptr->iccp_name = new_iccp_name;
 2861              		.loc 1 678 0
 2862 0102 4489AB90 		movl	%r13d, 144(%rbx)
 2862      000000
 680:fltk-1.3.4-1/png/pngset.c ****    info_ptr->free_me |= PNG_FREE_ICCP;
 2863              		.loc 1 680 0
 2864 0109 4889AB88 		movq	%rbp, 136(%rbx)
 2864      000000
 681:fltk-1.3.4-1/png/pngset.c ****    info_ptr->valid |= PNG_INFO_iCCP;
 2865              		.loc 1 681 0
 2866 0110 838B1C01 		orl	$16, 284(%rbx)
 2866      000010
 682:fltk-1.3.4-1/png/pngset.c **** }
 2867              		.loc 1 682 0
 2868 0117 814B0800 		orl	$4096, 8(%rbx)
 2868      100000
 679:fltk-1.3.4-1/png/pngset.c ****    info_ptr->iccp_profile = new_iccp_profile;
 2869              		.loc 1 679 0
 2870 011e 4C898380 		movq	%r8, 128(%rbx)
 2870      000000
 2871 0125 E93CFFFF 		jmp	.L219
 2871      FF
 2872              	.LVL288:
 2873 012a 660F1F44 		.p2align 4,,10
 2873      0000
 2874              		.p2align 3
 2875              	.L237:
 629:fltk-1.3.4-1/png/pngset.c **** 
 2876              		.loc 1 629 0
 2877 0130 BE000000 		movl	$.LC50, %esi
 2877      00
 2878 0135 E8000000 		call	png_app_error
 2878      00
 2879              	.LVL289:
 2880 013a E9FAFEFF 		jmp	.L224
 2880      FF
 2881              	.LVL290:
 2882 013f 90       		.p2align 4,,10
 2883              		.p2align 3
 2884              	.L239:
 667:fltk-1.3.4-1/png/pngset.c ****       new_iccp_name = NULL;
 2885              		.loc 1 667 0
 2886 0140 4C89C6   		movq	%r8, %rsi
 2887 0143 4C89F7   		movq	%r14, %rdi
 2888 0146 E8000000 		call	png_free
 2888      00
 2889              	.LVL291:
 669:fltk-1.3.4-1/png/pngset.c ****           "Insufficient memory to process iCCP profile");
 2890              		.loc 1 669 0
 2891 014b BE000000 		movl	$.LC52, %esi
 2891      00
 2892              	.LVL292:
 2893              	.L236:
 683:fltk-1.3.4-1/png/pngset.c **** #endif
 2894              		.loc 1 683 0
 2895 0150 4883C418 		addq	$24, %rsp
 2896              		.cfi_def_cfa_offset 56
 669:fltk-1.3.4-1/png/pngset.c ****           "Insufficient memory to process iCCP profile");
 2897              		.loc 1 669 0
 2898 0154 4C89F7   		movq	%r14, %rdi
 683:fltk-1.3.4-1/png/pngset.c **** #endif
 2899              		.loc 1 683 0
 2900 0157 5B       		popq	%rbx
 2901              		.cfi_restore 3
 2902              		.cfi_def_cfa_offset 48
 2903              	.LVL293:
 2904 0158 5D       		popq	%rbp
 2905              		.cfi_restore 6
 2906              		.cfi_def_cfa_offset 40
 2907 0159 415C     		popq	%r12
 2908              		.cfi_restore 12
 2909              		.cfi_def_cfa_offset 32
 2910              	.LVL294:
 2911 015b 415D     		popq	%r13
 2912              		.cfi_restore 13
 2913              		.cfi_def_cfa_offset 24
 2914              	.LVL295:
 2915 015d 415E     		popq	%r14
 2916              		.cfi_restore 14
 2917              		.cfi_def_cfa_offset 16
 2918              	.LVL296:
 2919 015f 415F     		popq	%r15
 2920              		.cfi_restore 15
 2921              		.cfi_def_cfa_offset 8
 669:fltk-1.3.4-1/png/pngset.c ****           "Insufficient memory to process iCCP profile");
 2922              		.loc 1 669 0
 2923 0161 E9000000 		jmp	png_benign_error
 2923      00
 2924              	.LVL297:
 2925              		.cfi_endproc
 2926              	.LFE75:
 2928              		.section	.text.unlikely.png_set_iCCP
 2929              	.LCOLDE53:
 2930              		.section	.text.png_set_iCCP
 2931              	.LHOTE53:
 2932              		.section	.rodata.str1.1
 2933              	.LC54:
 2934 0149 746F6F20 		.string	"too many text chunks"
 2934      6D616E79 
 2934      20746578 
 2934      74206368 
 2934      756E6B73 
 2935              		.section	.rodata.str1.8
 2936 0234 00000000 		.align 8
 2937              	.LC55:
 2938 0238 74657874 		.string	"text compression mode is out of range"
 2938      20636F6D 
 2938      70726573 
 2938      73696F6E 
 2938      206D6F64 
 2939              		.section	.rodata.str1.1
 2940              	.LC56:
 2941 015e 74657874 		.string	"text chunk: out of memory"
 2941      20636875 
 2941      6E6B3A20 
 2941      6F757420 
 2941      6F66206D 
 2942              		.section	.text.unlikely.png_set_text_2,"ax",@progbits
 2943              	.LCOLDB57:
 2944              		.section	.text.png_set_text_2,"ax",@progbits
 2945              	.LHOTB57:
 2946              		.p2align 4,,15
 2947              		.globl	png_set_text_2
 2949              	png_set_text_2:
 2950              	.LFB77:
 701:fltk-1.3.4-1/png/pngset.c ****    int i;
 2951              		.loc 1 701 0
 2952              		.cfi_startproc
 2953              	.LVL298:
 707:fltk-1.3.4-1/png/pngset.c ****       return(0);
 2954              		.loc 1 707 0
 2955 0000 4885FF   		testq	%rdi, %rdi
 2956 0003 0F845702 		je	.L290
 2956      0000
 2957 0009 4885F6   		testq	%rsi, %rsi
 2958 000c 0F844E02 		je	.L290
 2958      0000
 707:fltk-1.3.4-1/png/pngset.c ****       return(0);
 2959              		.loc 1 707 0 is_stmt 0 discriminator 1
 2960 0012 85C9     		testl	%ecx, %ecx
 2961 0014 0F8E4602 		jle	.L290
 2961      0000
 2962 001a 4885D2   		testq	%rdx, %rdx
 2963 001d 0F843D02 		je	.L290
 2963      0000
 701:fltk-1.3.4-1/png/pngset.c ****    int i;
 2964              		.loc 1 701 0 is_stmt 1
 2965 0023 4157     		pushq	%r15
 2966              		.cfi_def_cfa_offset 16
 2967              		.cfi_offset 15, -16
 2968 0025 4156     		pushq	%r14
 2969              		.cfi_def_cfa_offset 24
 2970              		.cfi_offset 14, -24
 2971 0027 4155     		pushq	%r13
 2972              		.cfi_def_cfa_offset 32
 2973              		.cfi_offset 13, -32
 2974 0029 4154     		pushq	%r12
 2975              		.cfi_def_cfa_offset 40
 2976              		.cfi_offset 12, -40
 2977 002b 55       		pushq	%rbp
 2978              		.cfi_def_cfa_offset 48
 2979              		.cfi_offset 6, -48
 2980 002c 53       		pushq	%rbx
 2981              		.cfi_def_cfa_offset 56
 2982              		.cfi_offset 3, -56
 2983 002d 4889D5   		movq	%rdx, %rbp
 2984 0030 4889F3   		movq	%rsi, %rbx
 2985 0033 4883EC28 		subq	$40, %rsp
 2986              		.cfi_def_cfa_offset 96
 2987              	.LBB177:
 2988              	.LBB178:
 715:fltk-1.3.4-1/png/pngset.c ****    {
 2989              		.loc 1 715 0
 2990 0037 48639694 		movslq	148(%rsi), %rdx
 2990      000000
 2991              	.LVL299:
 2992 003e 8B869800 		movl	152(%rsi), %eax
 2992      0000
 2993 0044 894C2414 		movl	%ecx, 20(%rsp)
 2994 0048 48897C24 		movq	%rdi, 24(%rsp)
 2994      18
 2995              	.LVL300:
 2996 004d 29D0     		subl	%edx, %eax
 2997 004f 39C1     		cmpl	%eax, %ecx
 2998 0051 0F8F1102 		jg	.L245
 2998      0000
 2999 0057 488B8EA0 		movq	160(%rsi), %rcx
 2999      000000
 3000              	.LVL301:
 3001              	.L246:
 3002 005e 4C8D7D10 		leaq	16(%rbp), %r15
 3003 0062 C7442410 		movl	$0, 16(%rsp)
 3003      00000000 
 3004 006a E9B60000 		jmp	.L262
 3004      00
 3005              	.LVL302:
 3006 006f 90       		.p2align 4,,10
 3007              		.p2align 3
 3008              	.L295:
 3009              	.LBB179:
 847:fltk-1.3.4-1/png/pngset.c ****          memcpy(textp->lang, text_ptr[i].lang, lang_len);
 3010              		.loc 1 847 0
 3011 0070 498B4424 		movq	8(%r12), %rax
 3011      08
 3012              	.LBB180:
 3013              	.LBB181:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 3014              		.loc 2 53 0
 3015 0075 4C8B3424 		movq	(%rsp), %r14
 3016              	.LBE181:
 3017              	.LBE180:
 847:fltk-1.3.4-1/png/pngset.c ****          memcpy(textp->lang, text_ptr[i].lang, lang_len);
 3018              		.loc 1 847 0
 3019 0079 4A8D7C28 		leaq	1(%rax,%r13), %rdi
 3019      01
 3020              	.LBB184:
 3021              	.LBB182:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 3022              		.loc 2 53 0
 3023 007e 4C89F2   		movq	%r14, %rdx
 3024              	.LBE182:
 3025              	.LBE184:
 847:fltk-1.3.4-1/png/pngset.c ****          memcpy(textp->lang, text_ptr[i].lang, lang_len);
 3026              		.loc 1 847 0
 3027 0081 49897C24 		movq	%rdi, 40(%r12)
 3027      28
 3028              	.LVL303:
 3029              	.LBB185:
 3030              	.LBB183:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 3031              		.loc 2 53 0
 3032 0086 498B7718 		movq	24(%r15), %rsi
 3033 008a E8000000 		call	memcpy
 3033      00
 3034              	.LVL304:
 3035              	.LBE183:
 3036              	.LBE185:
 849:fltk-1.3.4-1/png/pngset.c ****          textp->lang_key = textp->lang + lang_len + 1;
 3037              		.loc 1 849 0
 3038 008f 498B4424 		movq	40(%r12), %rax
 3038      28
 3039 0094 42C60430 		movb	$0, (%rax,%r14)
 3039      00
 850:fltk-1.3.4-1/png/pngset.c ****          memcpy(textp->lang_key, text_ptr[i].lang_key, lang_key_len);
 3040              		.loc 1 850 0
 3041 0099 498B4424 		movq	40(%r12), %rax
 3041      28
 3042 009e 4A8D7C30 		leaq	1(%rax,%r14), %rdi
 3042      01
 3043              	.LBB186:
 3044              	.LBB187:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 3045              		.loc 2 53 0
 3046 00a3 4C8B7424 		movq	8(%rsp), %r14
 3046      08
 3047              	.LBE187:
 3048              	.LBE186:
 850:fltk-1.3.4-1/png/pngset.c ****          memcpy(textp->lang_key, text_ptr[i].lang_key, lang_key_len);
 3049              		.loc 1 850 0
 3050 00a8 49897C24 		movq	%rdi, 48(%r12)
 3050      30
 3051              	.LVL305:
 3052              	.LBB189:
 3053              	.LBB188:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 3054              		.loc 2 53 0
 3055 00ad 498B7720 		movq	32(%r15), %rsi
 3056 00b1 4C89F2   		movq	%r14, %rdx
 3057 00b4 E8000000 		call	memcpy
 3057      00
 3058              	.LVL306:
 3059              	.LBE188:
 3060              	.LBE189:
 852:fltk-1.3.4-1/png/pngset.c ****          textp->text = textp->lang_key + lang_key_len + 1;
 3061              		.loc 1 852 0
 3062 00b9 498B4424 		movq	48(%r12), %rax
 3062      30
 863:fltk-1.3.4-1/png/pngset.c ****          memcpy(textp->text, text_ptr[i].text, text_length);
 3063              		.loc 1 863 0
 3064 00be 4885ED   		testq	%rbp, %rbp
 852:fltk-1.3.4-1/png/pngset.c ****          textp->text = textp->lang_key + lang_key_len + 1;
 3065              		.loc 1 852 0
 3066 00c1 42C60430 		movb	$0, (%rax,%r14)
 3066      00
 853:fltk-1.3.4-1/png/pngset.c ****       }
 3067              		.loc 1 853 0
 3068 00c6 498B4424 		movq	48(%r12), %rax
 3068      30
 3069 00cb 4A8D7C30 		leaq	1(%rax,%r14), %rdi
 3069      01
 3070 00d0 49897C24 		movq	%rdi, 16(%r12)
 3070      10
 863:fltk-1.3.4-1/png/pngset.c ****          memcpy(textp->text, text_ptr[i].text, text_length);
 3071              		.loc 1 863 0
 3072 00d5 0F854801 		jne	.L292
 3072      0000
 3073              	.L259:
 866:fltk-1.3.4-1/png/pngset.c **** 
 3074              		.loc 1 866 0
 3075 00db C6042F00 		movb	$0, (%rdi,%rbp)
 869:fltk-1.3.4-1/png/pngset.c ****       {
 3076              		.loc 1 869 0
 3077 00df 418B0424 		movl	(%r12), %eax
 3078 00e3 85C0     		testl	%eax, %eax
 3079 00e5 0F8E5801 		jle	.L260
 3079      0000
 3080              	.L296:
 871:fltk-1.3.4-1/png/pngset.c ****          textp->itxt_length = text_length;
 3081              		.loc 1 871 0
 3082 00eb 49C74424 		movq	$0, 24(%r12)
 3082      18000000 
 3082      00
 872:fltk-1.3.4-1/png/pngset.c ****       }
 3083              		.loc 1 872 0
 3084 00f4 49896C24 		movq	%rbp, 32(%r12)
 3084      20
 3085              	.L261:
 882:fltk-1.3.4-1/png/pngset.c ****       png_debug1(3, "transferred text chunk %d", info_ptr->num_text);
 3086              		.loc 1 882 0
 3087 00f9 83839400 		addl	$1, 148(%rbx)
 3087      000001
 3088              	.LVL307:
 3089              	.L250:
 3090              	.LBE179:
 759:fltk-1.3.4-1/png/pngset.c ****    {
 3091              		.loc 1 759 0
 3092 0100 83442410 		addl	$1, 16(%rsp)
 3092      01
 3093              	.LVL308:
 3094 0105 4983C738 		addq	$56, %r15
 3095 0109 8B442410 		movl	16(%rsp), %eax
 3096              	.LVL309:
 3097 010d 39442414 		cmpl	%eax, 20(%rsp)
 3098 0111 0F8E3902 		jle	.L244
 3098      0000
 3099 0117 48639394 		movslq	148(%rbx), %rdx
 3099      000000
 3100 011e 488B8BA0 		movq	160(%rbx), %rcx
 3100      000000
 3101              	.LVL310:
 3102              	.L262:
 3103              	.LBB194:
 765:fltk-1.3.4-1/png/pngset.c ****           continue;
 3104              		.loc 1 765 0
 3105 0125 498B7FF8 		movq	-8(%r15), %rdi
 3106 0129 4885FF   		testq	%rdi, %rdi
 3107 012c 74D2     		je	.L250
 768:fltk-1.3.4-1/png/pngset.c ****           text_ptr[i].compression >= PNG_TEXT_COMPRESSION_LAST)
 3108              		.loc 1 768 0
 3109 012e 458B77F0 		movl	-16(%r15), %r14d
 3110 0132 418D4601 		leal	1(%r14), %eax
 3111 0136 83F803   		cmpl	$3, %eax
 3112 0139 0F879101 		ja	.L293
 3112      0000
 763:fltk-1.3.4-1/png/pngset.c **** 
 3113              		.loc 1 763 0
 3114 013f 488D04D5 		leaq	0(,%rdx,8), %rax
 3114      00000000 
 3115 0147 48C1E206 		salq	$6, %rdx
 3116              	.LVL311:
 3117 014b 4829C2   		subq	%rax, %rdx
 3118 014e 4C8D2411 		leaq	(%rcx,%rdx), %r12
 776:fltk-1.3.4-1/png/pngset.c **** 
 3119              		.loc 1 776 0
 3120 0152 E8000000 		call	strlen
 3120      00
 3121              	.LVL312:
 778:fltk-1.3.4-1/png/pngset.c ****       {
 3122              		.loc 1 778 0
 3123 0157 4585F6   		testl	%r14d, %r14d
 776:fltk-1.3.4-1/png/pngset.c **** 
 3124              		.loc 1 776 0
 3125 015a 4989C5   		movq	%rax, %r13
 3126              	.LVL313:
 778:fltk-1.3.4-1/png/pngset.c ****       {
 3127              		.loc 1 778 0
 3128 015d 0F8E8D01 		jle	.L252
 3128      0000
 789:fltk-1.3.4-1/png/pngset.c ****             lang_len = strlen(text_ptr[i].lang);
 3129              		.loc 1 789 0
 3130 0163 498B7F18 		movq	24(%r15), %rdi
 3131 0167 4885FF   		testq	%rdi, %rdi
 3132 016a 0F84B001 		je	.L269
 3132      0000
 790:fltk-1.3.4-1/png/pngset.c **** 
 3133              		.loc 1 790 0
 3134 0170 E8000000 		call	strlen
 3134      00
 3135              	.LVL314:
 795:fltk-1.3.4-1/png/pngset.c ****             lang_key_len = strlen(text_ptr[i].lang_key);
 3136              		.loc 1 795 0
 3137 0175 498B7F20 		movq	32(%r15), %rdi
 790:fltk-1.3.4-1/png/pngset.c **** 
 3138              		.loc 1 790 0
 3139 0179 48890424 		movq	%rax, (%rsp)
 3140              	.LVL315:
 795:fltk-1.3.4-1/png/pngset.c ****             lang_key_len = strlen(text_ptr[i].lang_key);
 3141              		.loc 1 795 0
 3142 017d 4885FF   		testq	%rdi, %rdi
 3143 0180 0F84B201 		je	.L270
 3143      0000
 3144              	.LVL316:
 3145              	.L298:
 796:fltk-1.3.4-1/png/pngset.c **** 
 3146              		.loc 1 796 0
 3147 0186 E8000000 		call	strlen
 3147      00
 3148              	.LVL317:
 3149 018b 48894424 		movq	%rax, 8(%rsp)
 3149      08
 3150              	.LVL318:
 3151              	.L254:
 809:fltk-1.3.4-1/png/pngset.c ****       {
 3152              		.loc 1 809 0
 3153 0190 498B3F   		movq	(%r15), %rdi
 3154 0193 4885FF   		testq	%rdi, %rdi
 3155 0196 7409     		je	.L263
 3156 0198 803F00   		cmpb	$0, (%rdi)
 3157 019b 0F851D01 		jne	.L267
 3157      0000
 3158              	.L263:
 3159              	.LVL319:
 814:fltk-1.3.4-1/png/pngset.c **** 
 3160              		.loc 1 814 0
 3161 01a1 41C70424 		movl	$1, (%r12)
 3161      01000000 
 811:fltk-1.3.4-1/png/pngset.c **** #  ifdef PNG_iTXt_SUPPORTED
 3162              		.loc 1 811 0
 3163 01a9 31ED     		xorl	%ebp, %ebp
 3164              	.LVL320:
 3165              	.L255:
 827:fltk-1.3.4-1/png/pngset.c ****           key_len + text_length + lang_len + lang_key_len + 4));
 3166              		.loc 1 827 0
 3167 01ab 488B0424 		movq	(%rsp), %rax
 3168 01af 488B7C24 		movq	24(%rsp), %rdi
 3168      18
 3169 01b4 4A8D7428 		leaq	4(%rax,%r13), %rsi
 3169      04
 3170 01b9 4801EE   		addq	%rbp, %rsi
 3171 01bc 48037424 		addq	8(%rsp), %rsi
 3171      08
 3172 01c1 E8000000 		call	png_malloc_base
 3172      00
 3173              	.LVL321:
 830:fltk-1.3.4-1/png/pngset.c ****       {
 3174              		.loc 1 830 0
 3175 01c6 4885C0   		testq	%rax, %rax
 827:fltk-1.3.4-1/png/pngset.c ****           key_len + text_length + lang_len + lang_key_len + 4));
 3176              		.loc 1 827 0
 3177 01c9 49894424 		movq	%rax, 8(%r12)
 3177      08
 830:fltk-1.3.4-1/png/pngset.c ****       {
 3178              		.loc 1 830 0
 3179 01ce 0F849401 		je	.L294
 3179      0000
 3180              	.LVL322:
 3181              	.LBB190:
 3182              	.LBB191:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 3183              		.loc 2 53 0
 3184 01d4 498B77F8 		movq	-8(%r15), %rsi
 3185 01d8 4C89EA   		movq	%r13, %rdx
 3186 01db 4889C7   		movq	%rax, %rdi
 3187 01de E8000000 		call	memcpy
 3187      00
 3188              	.LVL323:
 3189              	.LBE191:
 3190              	.LBE190:
 843:fltk-1.3.4-1/png/pngset.c **** 
 3191              		.loc 1 843 0
 3192 01e3 498B4424 		movq	8(%r12), %rax
 3192      08
 3193 01e8 42C60428 		movb	$0, (%rax,%r13)
 3193      00
 845:fltk-1.3.4-1/png/pngset.c ****       {
 3194              		.loc 1 845 0
 3195 01ed 418B57F0 		movl	-16(%r15), %edx
 3196 01f1 85D2     		testl	%edx, %edx
 3197 01f3 0F8F77FE 		jg	.L295
 3197      FFFF
 860:fltk-1.3.4-1/png/pngset.c ****       }
 3198              		.loc 1 860 0
 3199 01f9 498B4424 		movq	8(%r12), %rax
 3199      08
 863:fltk-1.3.4-1/png/pngset.c ****          memcpy(textp->text, text_ptr[i].text, text_length);
 3200              		.loc 1 863 0
 3201 01fe 4885ED   		testq	%rbp, %rbp
 858:fltk-1.3.4-1/png/pngset.c ****          textp->lang_key=NULL;
 3202              		.loc 1 858 0
 3203 0201 49C74424 		movq	$0, 40(%r12)
 3203      28000000 
 3203      00
 859:fltk-1.3.4-1/png/pngset.c ****          textp->text = textp->key + key_len + 1;
 3204              		.loc 1 859 0
 3205 020a 49C74424 		movq	$0, 48(%r12)
 3205      30000000 
 3205      00
 860:fltk-1.3.4-1/png/pngset.c ****       }
 3206              		.loc 1 860 0
 3207 0213 4A8D7C28 		leaq	1(%rax,%r13), %rdi
 3207      01
 3208 0218 49897C24 		movq	%rdi, 16(%r12)
 3208      10
 863:fltk-1.3.4-1/png/pngset.c ****          memcpy(textp->text, text_ptr[i].text, text_length);
 3209              		.loc 1 863 0
 3210 021d 0F84B8FE 		je	.L259
 3210      FFFF
 3211              	.L292:
 3212              	.LVL324:
 3213              	.LBB192:
 3214              	.LBB193:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 3215              		.loc 2 53 0
 3216 0223 498B37   		movq	(%r15), %rsi
 3217 0226 4889EA   		movq	%rbp, %rdx
 3218 0229 E8000000 		call	memcpy
 3218      00
 3219              	.LVL325:
 3220 022e 498B7C24 		movq	16(%r12), %rdi
 3220      10
 3221              	.LBE193:
 3222              	.LBE192:
 866:fltk-1.3.4-1/png/pngset.c **** 
 3223              		.loc 1 866 0
 3224 0233 C6042F00 		movb	$0, (%rdi,%rbp)
 869:fltk-1.3.4-1/png/pngset.c ****       {
 3225              		.loc 1 869 0
 3226 0237 418B0424 		movl	(%r12), %eax
 3227 023b 85C0     		testl	%eax, %eax
 3228 023d 0F8FA8FE 		jg	.L296
 3228      FFFF
 3229              	.LVL326:
 3230              	.L260:
 878:fltk-1.3.4-1/png/pngset.c ****          textp->itxt_length = 0;
 3231              		.loc 1 878 0
 3232 0243 49896C24 		movq	%rbp, 24(%r12)
 3232      18
 879:fltk-1.3.4-1/png/pngset.c ****       }
 3233              		.loc 1 879 0
 3234 0248 49C74424 		movq	$0, 32(%r12)
 3234      20000000 
 3234      00
 3235 0251 E9A3FEFF 		jmp	.L261
 3235      FF
 3236              	.LVL327:
 3237 0256 662E0F1F 		.p2align 4,,10
 3237      84000000 
 3237      0000
 3238              		.p2align 3
 3239              	.L290:
 3240              		.cfi_def_cfa_offset 8
 3241              		.cfi_restore 3
 3242              		.cfi_restore 6
 3243              		.cfi_restore 12
 3244              		.cfi_restore 13
 3245              		.cfi_restore 14
 3246              		.cfi_restore 15
 3247              	.LBE194:
 3248              	.LBE178:
 3249              	.LBE177:
 708:fltk-1.3.4-1/png/pngset.c **** 
 3250              		.loc 1 708 0
 3251 0260 31C0     		xorl	%eax, %eax
 887:fltk-1.3.4-1/png/pngset.c **** #endif
 3252              		.loc 1 887 0
 3253 0262 C3       		ret
 3254              	.LVL328:
 3255              		.p2align 4,,10
 3256 0263 0F1F4400 		.p2align 3
 3256      00
 3257              	.L245:
 3258              		.cfi_def_cfa_offset 96
 3259              		.cfi_offset 3, -56
 3260              		.cfi_offset 6, -48
 3261              		.cfi_offset 12, -40
 3262              		.cfi_offset 13, -32
 3263              		.cfi_offset 14, -24
 3264              		.cfi_offset 15, -16
 3265              	.LBB207:
 3266              	.LBB201:
 3267              	.LBB195:
 723:fltk-1.3.4-1/png/pngset.c ****       {
 3268              		.loc 1 723 0
 3269 0268 B9FFFFFF 		movl	$2147483647, %ecx
 3269      7F
 3270              	.LVL329:
 3271 026d 29D1     		subl	%edx, %ecx
 3272 026f 394C2414 		cmpl	%ecx, 20(%rsp)
 3273 0273 0F8E1701 		jle	.L247
 3273      0000
 3274              	.LVL330:
 3275              	.L249:
 744:fltk-1.3.4-1/png/pngset.c ****             PNG_CHUNK_WRITE_ERROR);
 3276              		.loc 1 744 0
 3277 0279 488B7C24 		movq	24(%rsp), %rdi
 3277      18
 3278 027e BA010000 		movl	$1, %edx
 3278      00
 3279 0283 BE000000 		movl	$.LC54, %esi
 3279      00
 3280 0288 E8000000 		call	png_chunk_report
 3280      00
 3281              	.LVL331:
 3282              	.LBE195:
 3283              	.LBE201:
 3284              	.LBE207:
 887:fltk-1.3.4-1/png/pngset.c **** #endif
 3285              		.loc 1 887 0
 3286 028d 4883C428 		addq	$40, %rsp
 3287              		.cfi_remember_state
 3288              		.cfi_def_cfa_offset 56
 3289              	.LBB208:
 3290              	.LBB202:
 3291              	.LBB196:
 746:fltk-1.3.4-1/png/pngset.c ****       }
 3292              		.loc 1 746 0
 3293 0291 B8010000 		movl	$1, %eax
 3293      00
 3294              	.LBE196:
 3295              	.LBE202:
 3296              	.LBE208:
 887:fltk-1.3.4-1/png/pngset.c **** #endif
 3297              		.loc 1 887 0
 3298 0296 5B       		popq	%rbx
 3299              		.cfi_restore 3
 3300              		.cfi_def_cfa_offset 48
 3301              	.LVL332:
 3302 0297 5D       		popq	%rbp
 3303              		.cfi_restore 6
 3304              		.cfi_def_cfa_offset 40
 3305              	.LVL333:
 3306 0298 415C     		popq	%r12
 3307              		.cfi_restore 12
 3308              		.cfi_def_cfa_offset 32
 3309 029a 415D     		popq	%r13
 3310              		.cfi_restore 13
 3311              		.cfi_def_cfa_offset 24
 3312 029c 415E     		popq	%r14
 3313              		.cfi_restore 14
 3314              		.cfi_def_cfa_offset 16
 3315 029e 415F     		popq	%r15
 3316              		.cfi_restore 15
 3317              		.cfi_def_cfa_offset 8
 3318 02a0 C3       		ret
 3319              	.LVL334:
 3320              		.p2align 4,,10
 3321 02a1 0F1F8000 		.p2align 3
 3321      000000
 3322              	.L297:
 3323              		.cfi_restore_state
 3324              	.LBB209:
 3325              	.LBB203:
 3326              	.LBB197:
 809:fltk-1.3.4-1/png/pngset.c ****       {
 3327              		.loc 1 809 0
 3328 02a8 803F00   		cmpb	$0, (%rdi)
 3329 02ab 744B     		je	.L265
 780:fltk-1.3.4-1/png/pngset.c ****          lang_key_len = 0;
 3330              		.loc 1 780 0
 3331 02ad 48C70424 		movq	$0, (%rsp)
 3331      00000000 
 781:fltk-1.3.4-1/png/pngset.c ****       }
 3332              		.loc 1 781 0
 3333 02b5 48C74424 		movq	$0, 8(%rsp)
 3333      08000000 
 3333      00
 3334              	.LVL335:
 3335              	.L267:
 823:fltk-1.3.4-1/png/pngset.c ****          textp->compression = text_ptr[i].compression;
 3336              		.loc 1 823 0
 3337 02be E8000000 		call	strlen
 3337      00
 3338              	.LVL336:
 824:fltk-1.3.4-1/png/pngset.c ****       }
 3339              		.loc 1 824 0
 3340 02c3 45893424 		movl	%r14d, (%r12)
 823:fltk-1.3.4-1/png/pngset.c ****          textp->compression = text_ptr[i].compression;
 3341              		.loc 1 823 0
 3342 02c7 4889C5   		movq	%rax, %rbp
 3343              	.LVL337:
 3344 02ca E9DCFEFF 		jmp	.L255
 3344      FF
 3345              	.LVL338:
 3346 02cf 90       		.p2align 4,,10
 3347              		.p2align 3
 3348              	.L293:
 771:fltk-1.3.4-1/png/pngset.c ****             PNG_CHUNK_WRITE_ERROR);
 3349              		.loc 1 771 0
 3350 02d0 488B7C24 		movq	24(%rsp), %rdi
 3350      18
 3351 02d5 BA010000 		movl	$1, %edx
 3351      00
 3352              	.LVL339:
 3353 02da BE000000 		movl	$.LC55, %esi
 3353      00
 3354 02df E8000000 		call	png_chunk_report
 3354      00
 3355              	.LVL340:
 3356 02e4 E917FEFF 		jmp	.L250
 3356      FF
 3357              	.LVL341:
 3358 02e9 0F1F8000 		.p2align 4,,10
 3358      000000
 3359              		.p2align 3
 3360              	.L252:
 809:fltk-1.3.4-1/png/pngset.c ****       {
 3361              		.loc 1 809 0
 3362 02f0 498B3F   		movq	(%r15), %rdi
 3363 02f3 4885FF   		testq	%rdi, %rdi
 3364 02f6 75B0     		jne	.L297
 3365              	.L265:
 3366              	.LVL342:
 818:fltk-1.3.4-1/png/pngset.c ****       }
 3367              		.loc 1 818 0
 3368 02f8 41C70424 		movl	$-1, (%r12)
 3368      FFFFFFFF 
 3369 0300 48C74424 		movq	$0, 8(%rsp)
 3369      08000000 
 3369      00
 811:fltk-1.3.4-1/png/pngset.c **** #  ifdef PNG_iTXt_SUPPORTED
 3370              		.loc 1 811 0
 3371 0309 31ED     		xorl	%ebp, %ebp
 818:fltk-1.3.4-1/png/pngset.c ****       }
 3372              		.loc 1 818 0
 3373 030b 48C70424 		movq	$0, (%rsp)
 3373      00000000 
 3374 0313 E993FEFF 		jmp	.L255
 3374      FF
 3375              	.LVL343:
 3376 0318 0F1F8400 		.p2align 4,,10
 3376      00000000 
 3377              		.p2align 3
 3378              	.L269:
 795:fltk-1.3.4-1/png/pngset.c ****             lang_key_len = strlen(text_ptr[i].lang_key);
 3379              		.loc 1 795 0
 3380 0320 498B7F20 		movq	32(%r15), %rdi
 793:fltk-1.3.4-1/png/pngset.c **** 
 3381              		.loc 1 793 0
 3382 0324 48C70424 		movq	$0, (%rsp)
 3382      00000000 
 3383              	.LVL344:
 795:fltk-1.3.4-1/png/pngset.c ****             lang_key_len = strlen(text_ptr[i].lang_key);
 3384              		.loc 1 795 0
 3385 032c 4885FF   		testq	%rdi, %rdi
 3386 032f 0F8551FE 		jne	.L298
 3386      FFFF
 3387              	.LVL345:
 3388              		.p2align 4,,10
 3389 0335 0F1F00   		.p2align 3
 3390              	.L270:
 799:fltk-1.3.4-1/png/pngset.c ****       }
 3391              		.loc 1 799 0
 3392 0338 48C74424 		movq	$0, 8(%rsp)
 3392      08000000 
 3392      00
 3393 0341 E94AFEFF 		jmp	.L254
 3393      FF
 3394              	.LVL346:
 3395 0346 662E0F1F 		.p2align 4,,10
 3395      84000000 
 3395      0000
 3396              		.p2align 3
 3397              	.L244:
 3398              	.LBE197:
 3399              	.LBE203:
 3400              	.LBE209:
 887:fltk-1.3.4-1/png/pngset.c **** #endif
 3401              		.loc 1 887 0
 3402 0350 4883C428 		addq	$40, %rsp
 3403              		.cfi_remember_state
 3404              		.cfi_def_cfa_offset 56
 708:fltk-1.3.4-1/png/pngset.c **** 
 3405              		.loc 1 708 0
 3406 0354 31C0     		xorl	%eax, %eax
 3407              	.LVL347:
 887:fltk-1.3.4-1/png/pngset.c **** #endif
 3408              		.loc 1 887 0
 3409 0356 5B       		popq	%rbx
 3410              		.cfi_restore 3
 3411              		.cfi_def_cfa_offset 48
 3412              	.LVL348:
 3413 0357 5D       		popq	%rbp
 3414              		.cfi_restore 6
 3415              		.cfi_def_cfa_offset 40
 3416 0358 415C     		popq	%r12
 3417              		.cfi_restore 12
 3418              		.cfi_def_cfa_offset 32
 3419 035a 415D     		popq	%r13
 3420              		.cfi_restore 13
 3421              		.cfi_def_cfa_offset 24
 3422 035c 415E     		popq	%r14
 3423              		.cfi_restore 14
 3424              		.cfi_def_cfa_offset 16
 3425 035e 415F     		popq	%r15
 3426              		.cfi_restore 15
 3427              		.cfi_def_cfa_offset 8
 3428 0360 C3       		ret
 3429              	.LVL349:
 3430              		.p2align 4,,10
 3431 0361 0F1F8000 		.p2align 3
 3431      000000
 3432              	.L294:
 3433              		.cfi_restore_state
 3434              	.LBB210:
 3435              	.LBB204:
 3436              	.LBB198:
 832:fltk-1.3.4-1/png/pngset.c ****                PNG_CHUNK_WRITE_ERROR);
 3437              		.loc 1 832 0
 3438 0368 488B7C24 		movq	24(%rsp), %rdi
 3438      18
 3439 036d BA010000 		movl	$1, %edx
 3439      00
 3440 0372 BE000000 		movl	$.LC56, %esi
 3440      00
 3441 0377 E8000000 		call	png_chunk_report
 3441      00
 3442              	.LVL350:
 3443              	.LBE198:
 3444              	.LBE204:
 3445              	.LBE210:
 887:fltk-1.3.4-1/png/pngset.c **** #endif
 3446              		.loc 1 887 0
 3447 037c 4883C428 		addq	$40, %rsp
 3448              		.cfi_remember_state
 3449              		.cfi_def_cfa_offset 56
 3450              	.LBB211:
 3451              	.LBB205:
 3452              	.LBB199:
 834:fltk-1.3.4-1/png/pngset.c ****       }
 3453              		.loc 1 834 0
 3454 0380 B8010000 		movl	$1, %eax
 3454      00
 3455              	.LBE199:
 3456              	.LBE205:
 3457              	.LBE211:
 887:fltk-1.3.4-1/png/pngset.c **** #endif
 3458              		.loc 1 887 0
 3459 0385 5B       		popq	%rbx
 3460              		.cfi_restore 3
 3461              		.cfi_def_cfa_offset 48
 3462              	.LVL351:
 3463 0386 5D       		popq	%rbp
 3464              		.cfi_restore 6
 3465              		.cfi_def_cfa_offset 40
 3466              	.LVL352:
 3467 0387 415C     		popq	%r12
 3468              		.cfi_restore 12
 3469              		.cfi_def_cfa_offset 32
 3470 0389 415D     		popq	%r13
 3471              		.cfi_restore 13
 3472              		.cfi_def_cfa_offset 24
 3473              	.LVL353:
 3474 038b 415E     		popq	%r14
 3475              		.cfi_restore 14
 3476              		.cfi_def_cfa_offset 16
 3477 038d 415F     		popq	%r15
 3478              		.cfi_restore 15
 3479              		.cfi_def_cfa_offset 8
 3480 038f C3       		ret
 3481              	.LVL354:
 3482              		.p2align 4,,10
 3483              		.p2align 3
 3484              	.L247:
 3485              		.cfi_restore_state
 3486              	.LBB212:
 3487              	.LBB206:
 3488              	.LBB200:
 725:fltk-1.3.4-1/png/pngset.c **** 
 3489              		.loc 1 725 0
 3490 0390 8B442414 		movl	20(%rsp), %eax
 732:fltk-1.3.4-1/png/pngset.c **** 
 3491              		.loc 1 732 0
 3492 0394 41BCFFFF 		movl	$2147483647, %r12d
 3492      FF7F
 725:fltk-1.3.4-1/png/pngset.c **** 
 3493              		.loc 1 725 0
 3494 039a 01D0     		addl	%edx, %eax
 3495              	.LVL355:
 728:fltk-1.3.4-1/png/pngset.c ****             max_text = (max_text + 8) & ~0x7;
 3496              		.loc 1 728 0
 3497 039c 3DF6FFFF 		cmpl	$2147483638, %eax
 3497      7F
 3498 03a1 7E5C     		jle	.L299
 3499              	.LVL356:
 3500              	.L248:
 737:fltk-1.3.4-1/png/pngset.c ****             info_ptr->text, old_num_text, max_text-old_num_text,
 3501              		.loc 1 737 0
 3502 03a3 4C8B7424 		movq	24(%rsp), %r14
 3502      18
 3503 03a8 488BB3A0 		movq	160(%rbx), %rsi
 3503      000000
 3504 03af 41B83800 		movl	$56, %r8d
 3504      0000
 3505 03b5 4C89F7   		movq	%r14, %rdi
 3506              	.LVL357:
 3507 03b8 E8000000 		call	png_realloc_array
 3507      00
 3508              	.LVL358:
 742:fltk-1.3.4-1/png/pngset.c ****       {
 3509              		.loc 1 742 0
 3510 03bd 4885C0   		testq	%rax, %rax
 737:fltk-1.3.4-1/png/pngset.c ****             info_ptr->text, old_num_text, max_text-old_num_text,
 3511              		.loc 1 737 0
 3512 03c0 4989C5   		movq	%rax, %r13
 3513              	.LVL359:
 742:fltk-1.3.4-1/png/pngset.c ****       {
 3514              		.loc 1 742 0
 3515 03c3 0F84B0FE 		je	.L249
 3515      FFFF
 749:fltk-1.3.4-1/png/pngset.c **** 
 3516              		.loc 1 749 0
 3517 03c9 488BB3A0 		movq	160(%rbx), %rsi
 3517      000000
 3518 03d0 4C89F7   		movq	%r14, %rdi
 3519 03d3 E8000000 		call	png_free
 3519      00
 3520              	.LVL360:
 751:fltk-1.3.4-1/png/pngset.c ****       info_ptr->free_me |= PNG_FREE_TEXT;
 3521              		.loc 1 751 0
 3522 03d8 4C89ABA0 		movq	%r13, 160(%rbx)
 3522      000000
 752:fltk-1.3.4-1/png/pngset.c ****       info_ptr->max_text = max_text;
 3523              		.loc 1 752 0
 3524 03df 818B1C01 		orl	$16384, 284(%rbx)
 3524      00000040 
 3524      0000
 753:fltk-1.3.4-1/png/pngset.c ****       /* num_text is adjusted below as the entries are copied in */
 3525              		.loc 1 753 0
 3526 03e9 4C89E9   		movq	%r13, %rcx
 3527 03ec 4489A398 		movl	%r12d, 152(%rbx)
 3527      000000
 3528 03f3 48639394 		movslq	148(%rbx), %rdx
 3528      000000
 3529 03fa E95FFCFF 		jmp	.L246
 3529      FF
 3530              	.LVL361:
 3531              	.L299:
 729:fltk-1.3.4-1/png/pngset.c **** 
 3532              		.loc 1 729 0
 3533 03ff 448D6008 		leal	8(%rax), %r12d
 3534 0403 4183E4F8 		andl	$-8, %r12d
 3535              	.LVL362:
 3536 0407 4489E1   		movl	%r12d, %ecx
 3537 040a 29D1     		subl	%edx, %ecx
 3538 040c EB95     		jmp	.L248
 3539              	.LBE200:
 3540              	.LBE206:
 3541              	.LBE212:
 3542              		.cfi_endproc
 3543              	.LFE77:
 3545              		.section	.text.unlikely.png_set_text_2
 3546              	.LCOLDE57:
 3547              		.section	.text.png_set_text_2
 3548              	.LHOTE57:
 3549              		.section	.rodata.str1.8
 3550 025e 0000     		.align 8
 3551              	.LC58:
 3552 0260 496E7375 		.string	"Insufficient memory to store text"
 3552      66666963 
 3552      69656E74 
 3552      206D656D 
 3552      6F727920 
 3553              		.section	.text.unlikely.png_set_text,"ax",@progbits
 3554              	.LCOLDB59:
 3555              		.section	.text.png_set_text,"ax",@progbits
 3556              	.LHOTB59:
 3557              		.p2align 4,,15
 3558              		.globl	png_set_text
 3560              	png_set_text:
 3561              	.LFB76:
 690:fltk-1.3.4-1/png/pngset.c ****    int ret;
 3562              		.loc 1 690 0
 3563              		.cfi_startproc
 3564              	.LVL363:
 3565 0000 53       		pushq	%rbx
 3566              		.cfi_def_cfa_offset 16
 3567              		.cfi_offset 3, -16
 690:fltk-1.3.4-1/png/pngset.c ****    int ret;
 3568              		.loc 1 690 0
 3569 0001 4889FB   		movq	%rdi, %rbx
 692:fltk-1.3.4-1/png/pngset.c **** 
 3570              		.loc 1 692 0
 3571 0004 E8000000 		call	png_set_text_2
 3571      00
 3572              	.LVL364:
 694:fltk-1.3.4-1/png/pngset.c ****       png_error(png_ptr, "Insufficient memory to store text");
 3573              		.loc 1 694 0
 3574 0009 85C0     		testl	%eax, %eax
 3575 000b 7502     		jne	.L303
 696:fltk-1.3.4-1/png/pngset.c **** 
 3576              		.loc 1 696 0
 3577 000d 5B       		popq	%rbx
 3578              		.cfi_remember_state
 3579              		.cfi_def_cfa_offset 8
 3580              	.LVL365:
 3581 000e C3       		ret
 3582              	.LVL366:
 3583              	.L303:
 3584              		.cfi_restore_state
 695:fltk-1.3.4-1/png/pngset.c **** }
 3585              		.loc 1 695 0
 3586 000f BE000000 		movl	$.LC58, %esi
 3586      00
 3587 0014 4889DF   		movq	%rbx, %rdi
 3588 0017 E8000000 		call	png_error
 3588      00
 3589              	.LVL367:
 3590              		.cfi_endproc
 3591              	.LFE76:
 3593              		.section	.text.unlikely.png_set_text
 3594              	.LCOLDE59:
 3595              		.section	.text.png_set_text
 3596              	.LHOTE59:
 3597              		.section	.rodata.str1.1
 3598              	.LC60:
 3599 0178 49676E6F 		.string	"Ignoring invalid time value"
 3599      72696E67 
 3599      20696E76 
 3599      616C6964 
 3599      2074696D 
 3600              		.section	.text.unlikely.png_set_tIME,"ax",@progbits
 3601              	.LCOLDB61:
 3602              		.section	.text.png_set_tIME,"ax",@progbits
 3603              	.LHOTB61:
 3604              		.p2align 4,,15
 3605              		.globl	png_set_tIME
 3607              	png_set_tIME:
 3608              	.LFB78:
 894:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "tIME");
 3609              		.loc 1 894 0
 3610              		.cfi_startproc
 3611              	.LVL368:
 897:fltk-1.3.4-1/png/pngset.c ****        (png_ptr->mode & PNG_WROTE_tIME) != 0)
 3612              		.loc 1 897 0
 3613 0000 4885F6   		testq	%rsi, %rsi
 3614 0003 0F94C1   		sete	%cl
 3615 0006 4885D2   		testq	%rdx, %rdx
 3616 0009 0F94C0   		sete	%al
 3617 000c 08C1     		orb	%al, %cl
 3618 000e 7547     		jne	.L304
 3619 0010 4885FF   		testq	%rdi, %rdi
 3620 0013 7442     		je	.L304
 897:fltk-1.3.4-1/png/pngset.c ****        (png_ptr->mode & PNG_WROTE_tIME) != 0)
 3621              		.loc 1 897 0 is_stmt 0 discriminator 2
 3622 0015 F6872D01 		testb	$2, 301(%rdi)
 3622      000002
 3623 001c 7539     		jne	.L304
 901:fltk-1.3.4-1/png/pngset.c ****        mod_time->day   == 0   || mod_time->day   > 31  ||
 3624              		.loc 1 901 0 is_stmt 1
 3625 001e 0FB64202 		movzbl	2(%rdx), %eax
 3626 0022 83E801   		subl	$1, %eax
 3627 0025 3C0B     		cmpb	$11, %al
 3628 0027 7737     		ja	.L306
 902:fltk-1.3.4-1/png/pngset.c ****        mod_time->hour  > 23   || mod_time->minute > 59 ||
 3629              		.loc 1 902 0 discriminator 1
 3630 0029 0FB64203 		movzbl	3(%rdx), %eax
 3631 002d 83E801   		subl	$1, %eax
 3632 0030 3C1E     		cmpb	$30, %al
 3633 0032 772C     		ja	.L306
 3634 0034 807A0417 		cmpb	$23, 4(%rdx)
 3635 0038 7726     		ja	.L306
 903:fltk-1.3.4-1/png/pngset.c ****        mod_time->second > 60)
 3636              		.loc 1 903 0
 3637 003a 807A053B 		cmpb	$59, 5(%rdx)
 3638 003e 7720     		ja	.L306
 903:fltk-1.3.4-1/png/pngset.c ****        mod_time->second > 60)
 3639              		.loc 1 903 0 is_stmt 0 discriminator 1
 3640 0040 807A063C 		cmpb	$60, 6(%rdx)
 3641 0044 771A     		ja	.L306
 910:fltk-1.3.4-1/png/pngset.c ****    info_ptr->valid |= PNG_INFO_tIME;
 3642              		.loc 1 910 0 is_stmt 1
 3643 0046 488B02   		movq	(%rdx), %rax
 911:fltk-1.3.4-1/png/pngset.c **** }
 3644              		.loc 1 911 0
 3645 0049 814E0800 		orl	$512, 8(%rsi)
 3645      020000
 910:fltk-1.3.4-1/png/pngset.c ****    info_ptr->valid |= PNG_INFO_tIME;
 3646              		.loc 1 910 0
 3647 0050 488986A8 		movq	%rax, 168(%rsi)
 3647      000000
 3648              	.L304:
 3649 0057 F3C3     		rep ret
 3650 0059 0F1F8000 		.p2align 4,,10
 3650      000000
 3651              		.p2align 3
 3652              	.L306:
 906:fltk-1.3.4-1/png/pngset.c ****       return;
 3653              		.loc 1 906 0
 3654 0060 BE000000 		movl	$.LC60, %esi
 3654      00
 3655              	.LVL369:
 3656 0065 E9000000 		jmp	png_warning
 3656      00
 3657              	.LVL370:
 3658              		.cfi_endproc
 3659              	.LFE78:
 3661              		.section	.text.unlikely.png_set_tIME
 3662              	.LCOLDE61:
 3663              		.section	.text.png_set_tIME
 3664              	.LHOTE61:
 3665              		.section	.rodata.str1.8
 3666 0282 00000000 		.align 8
 3666      0000
 3667              	.LC62:
 3668 0288 74524E53 		.string	"tRNS chunk has out-of-range samples for bit_depth"
 3668      20636875 
 3668      6E6B2068 
 3668      6173206F 
 3668      75742D6F 
 3669              		.section	.text.unlikely.png_set_tRNS,"ax",@progbits
 3670              	.LCOLDB63:
 3671              		.section	.text.png_set_tRNS,"ax",@progbits
 3672              	.LHOTB63:
 3673              		.p2align 4,,15
 3674              		.globl	png_set_tRNS
 3676              	png_set_tRNS:
 3677              	.LFB79:
 919:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "tRNS");
 3678              		.loc 1 919 0
 3679              		.cfi_startproc
 3680              	.LVL371:
 922:fltk-1.3.4-1/png/pngset.c ****       return;
 3681              		.loc 1 922 0
 3682 0000 4885FF   		testq	%rdi, %rdi
 3683 0003 0F84C100 		je	.L338
 3683      0000
 3684 0009 4885F6   		testq	%rsi, %rsi
 3685 000c 0F84B800 		je	.L338
 3685      0000
 925:fltk-1.3.4-1/png/pngset.c ****    {
 3686              		.loc 1 925 0
 3687 0012 4885D2   		testq	%rdx, %rdx
 919:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "tRNS");
 3688              		.loc 1 919 0
 3689 0015 4156     		pushq	%r14
 3690              		.cfi_def_cfa_offset 16
 3691              		.cfi_offset 14, -16
 3692 0017 4989D6   		movq	%rdx, %r14
 3693 001a 4155     		pushq	%r13
 3694              		.cfi_def_cfa_offset 24
 3695              		.cfi_offset 13, -24
 3696 001c 4189CD   		movl	%ecx, %r13d
 3697 001f 4154     		pushq	%r12
 3698              		.cfi_def_cfa_offset 32
 3699              		.cfi_offset 12, -32
 3700 0021 4D89C4   		movq	%r8, %r12
 3701 0024 55       		pushq	%rbp
 3702              		.cfi_def_cfa_offset 40
 3703              		.cfi_offset 6, -40
 3704 0025 4889FD   		movq	%rdi, %rbp
 3705 0028 53       		pushq	%rbx
 3706              		.cfi_def_cfa_offset 48
 3707              		.cfi_offset 3, -48
 3708 0029 4889F3   		movq	%rsi, %rbx
 925:fltk-1.3.4-1/png/pngset.c ****    {
 3709              		.loc 1 925 0
 3710 002c 7437     		je	.L313
 936:fltk-1.3.4-1/png/pngset.c **** 
 3711              		.loc 1 936 0
 3712 002e 31C9     		xorl	%ecx, %ecx
 3713              	.LVL372:
 3714 0030 BA002000 		movl	$8192, %edx
 3714      00
 3715              	.LVL373:
 3716 0035 E8000000 		call	png_free_data
 3716      00
 3717              	.LVL374:
 939:fltk-1.3.4-1/png/pngset.c ****          png_malloc(png_ptr, PNG_MAX_PALETTE_LENGTH));
 3718              		.loc 1 939 0
 3719 003a BE000100 		movl	$256, %esi
 3719      00
 3720 003f 4889EF   		movq	%rbp, %rdi
 3721 0042 E8000000 		call	png_malloc
 3721      00
 3722              	.LVL375:
 942:fltk-1.3.4-1/png/pngset.c ****           memcpy(info_ptr->trans_alpha, trans_alpha, (png_size_t)num_trans);
 3723              		.loc 1 942 0
 3724 0047 418D55FF 		leal	-1(%r13), %edx
 939:fltk-1.3.4-1/png/pngset.c ****          png_malloc(png_ptr, PNG_MAX_PALETTE_LENGTH));
 3725              		.loc 1 939 0
 3726 004b 488983B8 		movq	%rax, 184(%rbx)
 3726      000000
 3727 0052 488985F8 		movq	%rax, 760(%rbp)
 3727      020000
 942:fltk-1.3.4-1/png/pngset.c ****           memcpy(info_ptr->trans_alpha, trans_alpha, (png_size_t)num_trans);
 3728              		.loc 1 942 0
 3729 0059 81FAFF00 		cmpl	$255, %edx
 3729      0000
 3730 005f 0F869B00 		jbe	.L339
 3730      0000
 3731              	.L313:
 946:fltk-1.3.4-1/png/pngset.c ****    {
 3732              		.loc 1 946 0
 3733 0065 4D85E4   		testq	%r12, %r12
 3734 0068 0F84D200 		je	.L319
 3734      0000
 3735              	.LBB213:
 948:fltk-1.3.4-1/png/pngset.c **** 
 3736              		.loc 1 948 0
 3737 006e 0FB64B24 		movzbl	36(%rbx), %ecx
 950:fltk-1.3.4-1/png/pngset.c ****           trans_color->gray > sample_max) ||
 3738              		.loc 1 950 0
 3739 0072 0FB65325 		movzbl	37(%rbx), %edx
 948:fltk-1.3.4-1/png/pngset.c **** 
 3740              		.loc 1 948 0
 3741 0076 B8010000 		movl	$1, %eax
 3741      00
 3742 007b D3E0     		sall	%cl, %eax
 3743              	.LVL376:
 950:fltk-1.3.4-1/png/pngset.c ****           trans_color->gray > sample_max) ||
 3744              		.loc 1 950 0
 3745 007d 84D2     		testb	%dl, %dl
 3746 007f 754F     		jne	.L320
 950:fltk-1.3.4-1/png/pngset.c ****           trans_color->gray > sample_max) ||
 3747              		.loc 1 950 0 is_stmt 0 discriminator 1
 3748 0081 410FB754 		movzwl	8(%r12), %edx
 3748      2408
 3749 0087 39D0     		cmpl	%edx, %eax
 3750 0089 7C65     		jl	.L321
 3751              	.LVL377:
 3752              	.L322:
 959:fltk-1.3.4-1/png/pngset.c **** 
 3753              		.loc 1 959 0 is_stmt 1
 3754 008b 498B0424 		movq	(%r12), %rax
 3755 008f 4585ED   		testl	%r13d, %r13d
 3756 0092 B9010000 		movl	$1, %ecx
 3756      00
 3757 0097 440F44E9 		cmove	%ecx, %r13d
 3758              	.LVL378:
 3759 009b 488983C0 		movq	%rax, 192(%rbx)
 3759      000000
 3760 00a2 410FB744 		movzwl	8(%r12), %eax
 3760      2408
 3761              	.LBE213:
 965:fltk-1.3.4-1/png/pngset.c **** 
 3762              		.loc 1 965 0
 3763 00a8 6644896B 		movw	%r13w, 34(%rbx)
 3763      22
 3764              	.LBB214:
 959:fltk-1.3.4-1/png/pngset.c **** 
 3765              		.loc 1 959 0
 3766 00ad 668983C8 		movw	%ax, 200(%rbx)
 3766      000000
 3767              	.L325:
 3768              	.LBE214:
 969:fltk-1.3.4-1/png/pngset.c ****       info_ptr->free_me |= PNG_FREE_TRNS;
 3769              		.loc 1 969 0
 3770 00b4 834B0810 		orl	$16, 8(%rbx)
 970:fltk-1.3.4-1/png/pngset.c ****    }
 3771              		.loc 1 970 0
 3772 00b8 818B1C01 		orl	$8192, 284(%rbx)
 3772      00000020 
 3772      0000
 3773              	.L308:
 972:fltk-1.3.4-1/png/pngset.c **** #endif
 3774              		.loc 1 972 0
 3775 00c2 5B       		popq	%rbx
 3776              		.cfi_restore 3
 3777              		.cfi_def_cfa_offset 40
 3778              	.LVL379:
 3779 00c3 5D       		popq	%rbp
 3780              		.cfi_restore 6
 3781              		.cfi_def_cfa_offset 32
 3782              	.LVL380:
 3783 00c4 415C     		popq	%r12
 3784              		.cfi_restore 12
 3785              		.cfi_def_cfa_offset 24
 3786              	.LVL381:
 3787 00c6 415D     		popq	%r13
 3788              		.cfi_restore 13
 3789              		.cfi_def_cfa_offset 16
 3790 00c8 415E     		popq	%r14
 3791              		.cfi_restore 14
 3792              		.cfi_def_cfa_offset 8
 3793              	.LVL382:
 3794              	.L338:
 3795 00ca F3C3     		rep ret
 3796              	.LVL383:
 3797 00cc 0F1F4000 		.p2align 4,,10
 3798              		.p2align 3
 3799              	.L320:
 3800              		.cfi_def_cfa_offset 48
 3801              		.cfi_offset 3, -48
 3802              		.cfi_offset 6, -40
 3803              		.cfi_offset 12, -32
 3804              		.cfi_offset 13, -24
 3805              		.cfi_offset 14, -16
 3806              	.LBB215:
 951:fltk-1.3.4-1/png/pngset.c ****           (info_ptr->color_type == PNG_COLOR_TYPE_RGB &&
 3807              		.loc 1 951 0
 3808 00d0 80FA02   		cmpb	$2, %dl
 3809 00d3 75B6     		jne	.L322
 952:fltk-1.3.4-1/png/pngset.c ****           (trans_color->red > sample_max ||
 3810              		.loc 1 952 0
 3811 00d5 410FB754 		movzwl	2(%r12), %edx
 3811      2402
 3812 00db 39D0     		cmpl	%edx, %eax
 3813 00dd 7C11     		jl	.L321
 953:fltk-1.3.4-1/png/pngset.c ****           trans_color->green > sample_max ||
 3814              		.loc 1 953 0
 3815 00df 410FB754 		movzwl	4(%r12), %edx
 3815      2404
 3816 00e5 39D0     		cmpl	%edx, %eax
 3817 00e7 0F8DA300 		jge	.L340
 3817      0000
 3818 00ed 0F1F00   		.p2align 4,,10
 3819              		.p2align 3
 3820              	.L321:
 956:fltk-1.3.4-1/png/pngset.c ****             "tRNS chunk has out-of-range samples for bit_depth");
 3821              		.loc 1 956 0
 3822 00f0 BE000000 		movl	$.LC62, %esi
 3822      00
 3823 00f5 4889EF   		movq	%rbp, %rdi
 3824 00f8 E8000000 		call	png_warning
 3824      00
 3825              	.LVL384:
 3826 00fd EB8C     		jmp	.L322
 3827 00ff 90       		.p2align 4,,10
 3828              		.p2align 3
 3829              	.L339:
 3830              	.LVL385:
 3831              	.LBE215:
 3832              	.LBB216:
 3833              	.LBB217:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 3834              		.loc 2 53 0
 3835 0100 4183FD08 		cmpl	$8, %r13d
 3836 0104 7352     		jnb	.L315
 3837 0106 41F6C504 		testb	$4, %r13b
 3838 010a 0F859300 		jne	.L341
 3838      0000
 3839 0110 4585ED   		testl	%r13d, %r13d
 3840 0113 0F844CFF 		je	.L313
 3840      FFFF
 3841 0119 410FB616 		movzbl	(%r14), %edx
 3842 011d 41F6C502 		testb	$2, %r13b
 3843 0121 8810     		movb	%dl, (%rax)
 3844 0123 0F843CFF 		je	.L313
 3844      FFFF
 3845 0129 4489EA   		movl	%r13d, %edx
 3846 012c 410FB74C 		movzwl	-2(%r14,%rdx), %ecx
 3846      16FE
 3847 0132 66894C10 		movw	%cx, -2(%rax,%rdx)
 3847      FE
 3848 0137 E929FFFF 		jmp	.L313
 3848      FF
 3849              	.LVL386:
 3850 013c 0F1F4000 		.p2align 4,,10
 3851              		.p2align 3
 3852              	.L319:
 3853              	.LBE217:
 3854              	.LBE216:
 967:fltk-1.3.4-1/png/pngset.c ****    {
 3855              		.loc 1 967 0
 3856 0140 4585ED   		testl	%r13d, %r13d
 965:fltk-1.3.4-1/png/pngset.c **** 
 3857              		.loc 1 965 0
 3858 0143 6644896B 		movw	%r13w, 34(%rbx)
 3858      22
 967:fltk-1.3.4-1/png/pngset.c ****    {
 3859              		.loc 1 967 0
 3860 0148 0F8474FF 		je	.L308
 3860      FFFF
 3861 014e E961FFFF 		jmp	.L325
 3861      FF
 3862              	.LVL387:
 3863              		.p2align 4,,10
 3864 0153 0F1F4400 		.p2align 3
 3864      00
 3865              	.L315:
 3866              	.LBB220:
 3867              	.LBB218:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 3868              		.loc 2 53 0
 3869 0158 498B16   		movq	(%r14), %rdx
 3870 015b 488D7808 		leaq	8(%rax), %rdi
 3871 015f 4C89F6   		movq	%r14, %rsi
 3872 0162 4883E7F8 		andq	$-8, %rdi
 3873 0166 488910   		movq	%rdx, (%rax)
 3874 0169 4489EA   		movl	%r13d, %edx
 3875 016c 498B4C16 		movq	-8(%r14,%rdx), %rcx
 3875      F8
 3876 0171 48894C10 		movq	%rcx, -8(%rax,%rdx)
 3876      F8
 3877 0176 4829F8   		subq	%rdi, %rax
 3878              	.LVL388:
 3879 0179 4829C6   		subq	%rax, %rsi
 3880 017c 4401E8   		addl	%r13d, %eax
 3881 017f C1E803   		shrl	$3, %eax
 3882 0182 89C1     		movl	%eax, %ecx
 3883 0184 F348A5   		rep movsq
 3884 0187 E9D9FEFF 		jmp	.L313
 3884      FF
 3885              	.LVL389:
 3886 018c 0F1F4000 		.p2align 4,,10
 3887              		.p2align 3
 3888              	.L340:
 3889              	.LBE218:
 3890              	.LBE220:
 3891              	.LBB221:
 954:fltk-1.3.4-1/png/pngset.c ****           trans_color->blue > sample_max)))
 3892              		.loc 1 954 0
 3893 0190 410FB754 		movzwl	6(%r12), %edx
 3893      2406
 3894 0196 39D0     		cmpl	%edx, %eax
 3895 0198 0F8DEDFE 		jge	.L322
 3895      FFFF
 3896 019e E94DFFFF 		jmp	.L321
 3896      FF
 3897              	.LVL390:
 3898              	.L341:
 3899              	.LBE221:
 3900              	.LBB222:
 3901              	.LBB219:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 3902              		.loc 2 53 0
 3903 01a3 418B16   		movl	(%r14), %edx
 3904 01a6 8910     		movl	%edx, (%rax)
 3905 01a8 4489EA   		movl	%r13d, %edx
 3906 01ab 418B4C16 		movl	-4(%r14,%rdx), %ecx
 3906      FC
 3907 01b0 894C10FC 		movl	%ecx, -4(%rax,%rdx)
 3908 01b4 E9ACFEFF 		jmp	.L313
 3908      FF
 3909              	.LBE219:
 3910              	.LBE222:
 3911              		.cfi_endproc
 3912              	.LFE79:
 3914              		.section	.text.unlikely.png_set_tRNS
 3915              	.LCOLDE63:
 3916              		.section	.text.png_set_tRNS
 3917              	.LHOTE63:
 3918              		.section	.rodata.str1.1
 3919              	.LC64:
 3920 0194 746F6F20 		.string	"too many sPLT chunks"
 3920      6D616E79 
 3920      2073504C 
 3920      54206368 
 3920      756E6B73 
 3921              	.LC65:
 3922 01a9 706E675F 		.string	"png_set_sPLT: invalid sPLT"
 3922      7365745F 
 3922      73504C54 
 3922      3A20696E 
 3922      76616C69 
 3923              	.LC66:
 3924 01c4 73504C54 		.string	"sPLT out of memory"
 3924      206F7574 
 3924      206F6620 
 3924      6D656D6F 
 3924      727900
 3925              		.section	.text.unlikely.png_set_sPLT,"ax",@progbits
 3926              	.LCOLDB67:
 3927              		.section	.text.png_set_sPLT,"ax",@progbits
 3928              	.LHOTB67:
 3929              		.p2align 4,,15
 3930              		.globl	png_set_sPLT
 3932              	png_set_sPLT:
 3933              	.LFB80:
 987:fltk-1.3.4-1/png/pngset.c ****    png_sPLT_tp np;
 3934              		.loc 1 987 0
 3935              		.cfi_startproc
 3936              	.LVL391:
 990:fltk-1.3.4-1/png/pngset.c ****       return;
 3937              		.loc 1 990 0
 3938 0000 4885FF   		testq	%rdi, %rdi
 3939 0003 0F846501 		je	.L363
 3939      0000
 987:fltk-1.3.4-1/png/pngset.c ****    png_sPLT_tp np;
 3940              		.loc 1 987 0
 3941 0009 4157     		pushq	%r15
 3942              		.cfi_def_cfa_offset 16
 3943              		.cfi_offset 15, -16
 3944 000b 4156     		pushq	%r14
 3945              		.cfi_def_cfa_offset 24
 3946              		.cfi_offset 14, -24
 3947 000d 4155     		pushq	%r13
 3948              		.cfi_def_cfa_offset 32
 3949              		.cfi_offset 13, -32
 3950 000f 4154     		pushq	%r12
 3951              		.cfi_def_cfa_offset 40
 3952              		.cfi_offset 12, -40
 3953 0011 4989F4   		movq	%rsi, %r12
 3954 0014 55       		pushq	%rbp
 3955              		.cfi_def_cfa_offset 48
 3956              		.cfi_offset 6, -48
 3957 0015 53       		pushq	%rbx
 3958              		.cfi_def_cfa_offset 56
 3959              		.cfi_offset 3, -56
 3960 0016 4883EC08 		subq	$8, %rsp
 3961              		.cfi_def_cfa_offset 64
 990:fltk-1.3.4-1/png/pngset.c ****       return;
 3962              		.loc 1 990 0
 3963 001a 4885F6   		testq	%rsi, %rsi
 3964 001d 0F843D01 		je	.L342
 3964      0000
 990:fltk-1.3.4-1/png/pngset.c ****       return;
 3965              		.loc 1 990 0 is_stmt 0 discriminator 1
 3966 0023 85C9     		testl	%ecx, %ecx
 3967 0025 4189CE   		movl	%ecx, %r14d
 3968 0028 0F8E3201 		jle	.L342
 3968      0000
 3969 002e 4885D2   		testq	%rdx, %rdx
 3970 0031 4889D3   		movq	%rdx, %rbx
 3971 0034 0F842601 		je	.L342
 3971      0000
 996:fltk-1.3.4-1/png/pngset.c ****       info_ptr->splt_palettes, info_ptr->splt_palettes_num, nentries,
 3972              		.loc 1 996 0 is_stmt 1
 3973 003a 8B963801 		movl	312(%rsi), %edx
 3973      0000
 3974              	.LVL392:
 3975 0040 488BB630 		movq	304(%rsi), %rsi
 3975      010000
 3976              	.LVL393:
 3977 0047 41B82000 		movl	$32, %r8d
 3977      0000
 3978 004d 4989FD   		movq	%rdi, %r13
 3979 0050 E8000000 		call	png_realloc_array
 3979      00
 3980              	.LVL394:
1000:fltk-1.3.4-1/png/pngset.c ****    {
 3981              		.loc 1 1000 0
 3982 0055 4885C0   		testq	%rax, %rax
 996:fltk-1.3.4-1/png/pngset.c ****       info_ptr->splt_palettes, info_ptr->splt_palettes_num, nentries,
 3983              		.loc 1 996 0
 3984 0058 4989C7   		movq	%rax, %r15
 3985              	.LVL395:
1003:fltk-1.3.4-1/png/pngset.c ****       return;
 3986              		.loc 1 1003 0
 3987 005b BA010000 		movl	$1, %edx
 3987      00
 3988 0060 BE000000 		movl	$.LC64, %esi
 3988      00
1000:fltk-1.3.4-1/png/pngset.c ****    {
 3989              		.loc 1 1000 0
 3990 0065 0F842301 		je	.L364
 3990      0000
1007:fltk-1.3.4-1/png/pngset.c ****    info_ptr->splt_palettes = np;
 3991              		.loc 1 1007 0
 3992 006b 498BB424 		movq	304(%r12), %rsi
 3992      30010000 
 3993 0073 4C89EF   		movq	%r13, %rdi
 3994 0076 4183EE01 		subl	$1, %r14d
 3995              	.LVL396:
 3996 007a 4983C601 		addq	$1, %r14
 3997 007e 49C1E605 		salq	$5, %r14
 3998 0082 E8000000 		call	png_free
 3998      00
 3999              	.LVL397:
1011:fltk-1.3.4-1/png/pngset.c **** 
 4000              		.loc 1 1011 0
 4001 0087 4963AC24 		movslq	312(%r12), %rbp
 4001      38010000 
1008:fltk-1.3.4-1/png/pngset.c ****    info_ptr->free_me |= PNG_FREE_SPLT;
 4002              		.loc 1 1008 0
 4003 008f 4D89BC24 		movq	%r15, 304(%r12)
 4003      30010000 
 4004 0097 4901DE   		addq	%rbx, %r14
1009:fltk-1.3.4-1/png/pngset.c **** 
 4005              		.loc 1 1009 0
 4006 009a 41838C24 		orl	$32, 284(%r12)
 4006      1C010000 
 4006      20
1011:fltk-1.3.4-1/png/pngset.c **** 
 4007              		.loc 1 1011 0
 4008 00a3 48C1E505 		salq	$5, %rbp
 4009 00a7 4C01FD   		addq	%r15, %rbp
 4010              	.LVL398:
 4011 00aa E9890000 		jmp	.L353
 4011      00
 4012              	.LVL399:
 4013 00af 90       		.p2align 4,,10
 4014              		.p2align 3
 4015              	.L349:
 4016              	.LBB223:
1026:fltk-1.3.4-1/png/pngset.c **** 
 4017              		.loc 1 1026 0
 4018 00b0 0FB64308 		movzbl	8(%rbx), %eax
 4019 00b4 884508   		movb	%al, 8(%rbp)
1031:fltk-1.3.4-1/png/pngset.c ****       np->name = png_voidcast(png_charp, png_malloc_base(png_ptr, length));
 4020              		.loc 1 1031 0
 4021 00b7 E8000000 		call	strlen
 4021      00
 4022              	.LVL400:
 4023 00bc 4C8D7801 		leaq	1(%rax), %r15
 4024              	.LVL401:
1032:fltk-1.3.4-1/png/pngset.c **** 
 4025              		.loc 1 1032 0
 4026 00c0 4C89EF   		movq	%r13, %rdi
 4027 00c3 4C89FE   		movq	%r15, %rsi
 4028 00c6 E8000000 		call	png_malloc_base
 4028      00
 4029              	.LVL402:
1034:fltk-1.3.4-1/png/pngset.c ****          break;
 4030              		.loc 1 1034 0
 4031 00cb 4885C0   		testq	%rax, %rax
1032:fltk-1.3.4-1/png/pngset.c **** 
 4032              		.loc 1 1032 0
 4033 00ce 48894500 		movq	%rax, 0(%rbp)
1034:fltk-1.3.4-1/png/pngset.c ****          break;
 4034              		.loc 1 1034 0
 4035 00d2 0F84AC00 		je	.L351
 4035      0000
 4036              	.LVL403:
 4037              	.LBB224:
 4038              	.LBB225:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 4039              		.loc 2 53 0
 4040 00d8 488B33   		movq	(%rbx), %rsi
 4041 00db 4C89FA   		movq	%r15, %rdx
 4042 00de 4889C7   		movq	%rax, %rdi
 4043 00e1 E8000000 		call	memcpy
 4043      00
 4044              	.LVL404:
 4045              	.LBE225:
 4046              	.LBE224:
1043:fltk-1.3.4-1/png/pngset.c ****           entries->nentries, sizeof (png_sPLT_entry)));
 4047              		.loc 1 1043 0
 4048 00e6 8B7318   		movl	24(%rbx), %esi
 4049 00e9 BA0A0000 		movl	$10, %edx
 4049      00
 4050 00ee 4C89EF   		movq	%r13, %rdi
 4051 00f1 E8000000 		call	png_malloc_array
 4051      00
 4052              	.LVL405:
1046:fltk-1.3.4-1/png/pngset.c ****       {
 4053              		.loc 1 1046 0
 4054 00f6 4885C0   		testq	%rax, %rax
1043:fltk-1.3.4-1/png/pngset.c ****           entries->nentries, sizeof (png_sPLT_entry)));
 4055              		.loc 1 1043 0
 4056 00f9 48894510 		movq	%rax, 16(%rbp)
1046:fltk-1.3.4-1/png/pngset.c ****       {
 4057              		.loc 1 1046 0
 4058 00fd 7471     		je	.L365
1053:fltk-1.3.4-1/png/pngset.c ****       /* This multiply can't overflow because png_malloc_array has already
 4059              		.loc 1 1053 0
 4060 00ff 48635318 		movslq	24(%rbx), %rdx
 4061              	.LBB226:
 4062              	.LBB227:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 4063              		.loc 2 53 0
 4064 0103 488B7310 		movq	16(%rbx), %rsi
 4065 0107 4889C7   		movq	%rax, %rdi
 4066              	.LBE227:
 4067              	.LBE226:
1065:fltk-1.3.4-1/png/pngset.c ****    }
 4068              		.loc 1 1065 0
 4069 010a 4883C520 		addq	$32, %rbp
 4070              	.LVL406:
1053:fltk-1.3.4-1/png/pngset.c ****       /* This multiply can't overflow because png_malloc_array has already
 4071              		.loc 1 1053 0
 4072 010e 8955F8   		movl	%edx, -8(%rbp)
 4073              	.LVL407:
 4074              	.LBB229:
 4075              	.LBB228:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 4076              		.loc 2 53 0
 4077 0111 488D1492 		leaq	(%rdx,%rdx,4), %rdx
 4078              	.LVL408:
 4079 0115 4801D2   		addq	%rdx, %rdx
 4080 0118 E8000000 		call	memcpy
 4080      00
 4081              	.LVL409:
 4082              	.LBE228:
 4083              	.LBE229:
1063:fltk-1.3.4-1/png/pngset.c ****       ++(info_ptr->splt_palettes_num);
 4084              		.loc 1 1063 0
 4085 011d 41814C24 		orl	$8192, 8(%r12)
 4085      08002000 
 4085      00
1064:fltk-1.3.4-1/png/pngset.c ****       ++np;
 4086              		.loc 1 1064 0
 4087 0126 41838424 		addl	$1, 312(%r12)
 4087      38010000 
 4087      01
 4088              	.LVL410:
 4089              	.L350:
 4090              	.LBE223:
1067:fltk-1.3.4-1/png/pngset.c **** 
 4091              		.loc 1 1067 0
 4092 012f 4883C320 		addq	$32, %rbx
 4093              	.LVL411:
 4094 0133 4939DE   		cmpq	%rbx, %r14
 4095 0136 7428     		je	.L342
 4096              	.L353:
 4097              	.LBB230:
1018:fltk-1.3.4-1/png/pngset.c ****       {
 4098              		.loc 1 1018 0
 4099 0138 488B3B   		movq	(%rbx), %rdi
 4100 013b 4885FF   		testq	%rdi, %rdi
 4101 013e 740B     		je	.L348
1018:fltk-1.3.4-1/png/pngset.c ****       {
 4102              		.loc 1 1018 0 is_stmt 0 discriminator 1
 4103 0140 48837B10 		cmpq	$0, 16(%rbx)
 4103      00
 4104 0145 0F8565FF 		jne	.L349
 4104      FFFF
 4105              	.L348:
1021:fltk-1.3.4-1/png/pngset.c ****          /* Just skip the invalid entry */
 4106              		.loc 1 1021 0 is_stmt 1
 4107 014b BE000000 		movl	$.LC65, %esi
 4107      00
 4108 0150 4C89EF   		movq	%r13, %rdi
 4109 0153 E8000000 		call	png_app_error
 4109      00
 4110              	.LVL412:
1023:fltk-1.3.4-1/png/pngset.c ****       }
 4111              		.loc 1 1023 0
 4112 0158 EBD5     		jmp	.L350
 4113              	.LVL413:
 4114 015a 660F1F44 		.p2align 4,,10
 4114      0000
 4115              		.p2align 3
 4116              	.L342:
 4117              	.LBE230:
1071:fltk-1.3.4-1/png/pngset.c **** #endif /* sPLT */
 4118              		.loc 1 1071 0
 4119 0160 4883C408 		addq	$8, %rsp
 4120              		.cfi_def_cfa_offset 56
 4121 0164 5B       		popq	%rbx
 4122              		.cfi_restore 3
 4123              		.cfi_def_cfa_offset 48
 4124 0165 5D       		popq	%rbp
 4125              		.cfi_restore 6
 4126              		.cfi_def_cfa_offset 40
 4127 0166 415C     		popq	%r12
 4128              		.cfi_restore 12
 4129              		.cfi_def_cfa_offset 32
 4130              	.LVL414:
 4131 0168 415D     		popq	%r13
 4132              		.cfi_restore 13
 4133              		.cfi_def_cfa_offset 24
 4134 016a 415E     		popq	%r14
 4135              		.cfi_restore 14
 4136              		.cfi_def_cfa_offset 16
 4137 016c 415F     		popq	%r15
 4138              		.cfi_restore 15
 4139              		.cfi_def_cfa_offset 8
 4140              	.L363:
 4141 016e F3C3     		rep ret
 4142              	.LVL415:
 4143              		.p2align 4,,10
 4144              		.p2align 3
 4145              	.L365:
 4146              		.cfi_def_cfa_offset 64
 4147              		.cfi_offset 3, -56
 4148              		.cfi_offset 6, -48
 4149              		.cfi_offset 12, -40
 4150              		.cfi_offset 13, -32
 4151              		.cfi_offset 14, -24
 4152              		.cfi_offset 15, -16
 4153              	.LBB231:
1048:fltk-1.3.4-1/png/pngset.c ****          np->name = NULL;
 4154              		.loc 1 1048 0
 4155 0170 488B7500 		movq	0(%rbp), %rsi
 4156 0174 4C89EF   		movq	%r13, %rdi
 4157 0177 E8000000 		call	png_free
 4157      00
 4158              	.LVL416:
1049:fltk-1.3.4-1/png/pngset.c ****          break;
 4159              		.loc 1 1049 0
 4160 017c 48C74500 		movq	$0, 0(%rbp)
 4160      00000000 
 4161              	.L351:
 4162              	.LBE231:
1070:fltk-1.3.4-1/png/pngset.c **** }
 4163              		.loc 1 1070 0
 4164 0184 BA010000 		movl	$1, %edx
 4164      00
 4165 0189 BE000000 		movl	$.LC66, %esi
 4165      00
 4166              	.LVL417:
 4167              	.L364:
1071:fltk-1.3.4-1/png/pngset.c **** #endif /* sPLT */
 4168              		.loc 1 1071 0
 4169 018e 4883C408 		addq	$8, %rsp
 4170              		.cfi_def_cfa_offset 56
1070:fltk-1.3.4-1/png/pngset.c **** }
 4171              		.loc 1 1070 0
 4172 0192 4C89EF   		movq	%r13, %rdi
1071:fltk-1.3.4-1/png/pngset.c **** #endif /* sPLT */
 4173              		.loc 1 1071 0
 4174 0195 5B       		popq	%rbx
 4175              		.cfi_restore 3
 4176              		.cfi_def_cfa_offset 48
 4177              	.LVL418:
 4178 0196 5D       		popq	%rbp
 4179              		.cfi_restore 6
 4180              		.cfi_def_cfa_offset 40
 4181 0197 415C     		popq	%r12
 4182              		.cfi_restore 12
 4183              		.cfi_def_cfa_offset 32
 4184              	.LVL419:
 4185 0199 415D     		popq	%r13
 4186              		.cfi_restore 13
 4187              		.cfi_def_cfa_offset 24
 4188              	.LVL420:
 4189 019b 415E     		popq	%r14
 4190              		.cfi_restore 14
 4191              		.cfi_def_cfa_offset 16
 4192 019d 415F     		popq	%r15
 4193              		.cfi_restore 15
 4194              		.cfi_def_cfa_offset 8
1070:fltk-1.3.4-1/png/pngset.c **** }
 4195              		.loc 1 1070 0
 4196 019f E9000000 		jmp	png_chunk_report
 4196      00
 4197              	.LVL421:
 4198              		.cfi_endproc
 4199              	.LFE80:
 4201              		.section	.text.unlikely.png_set_sPLT
 4202              	.LCOLDE67:
 4203              		.section	.text.png_set_sPLT
 4204              	.LHOTE67:
 4205              		.section	.rodata.str1.1
 4206              	.LC68:
 4207 01d7 746F6F20 		.string	"too many unknown chunks"
 4207      6D616E79 
 4207      20756E6B 
 4207      6E6F776E 
 4207      20636875 
 4208              	.LC69:
 4209 01ef 756E6B6E 		.string	"unknown chunk: out of memory"
 4209      6F776E20 
 4209      6368756E 
 4209      6B3A206F 
 4209      7574206F 
 4210              		.section	.text.unlikely.png_set_unknown_chunks,"ax",@progbits
 4211              	.LCOLDB70:
 4212              		.section	.text.png_set_unknown_chunks,"ax",@progbits
 4213              	.LHOTB70:
 4214              		.p2align 4,,15
 4215              		.globl	png_set_unknown_chunks
 4217              	png_set_unknown_chunks:
 4218              	.LFB82:
1111:fltk-1.3.4-1/png/pngset.c **** 
1112:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
1113:fltk-1.3.4-1/png/pngset.c **** png_set_unknown_chunks(png_const_structrp png_ptr,
1114:fltk-1.3.4-1/png/pngset.c ****    png_inforp info_ptr, png_const_unknown_chunkp unknowns, int num_unknowns)
1115:fltk-1.3.4-1/png/pngset.c **** {
 4219              		.loc 1 1115 0
 4220              		.cfi_startproc
 4221              	.LVL422:
1116:fltk-1.3.4-1/png/pngset.c ****    png_unknown_chunkp np;
1117:fltk-1.3.4-1/png/pngset.c **** 
1118:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr == NULL || info_ptr == NULL || num_unknowns <= 0 ||
 4222              		.loc 1 1118 0
 4223 0000 4885FF   		testq	%rdi, %rdi
 4224 0003 0F842501 		je	.L380
 4224      0000
1115:fltk-1.3.4-1/png/pngset.c ****    png_unknown_chunkp np;
 4225              		.loc 1 1115 0
 4226 0009 4157     		pushq	%r15
 4227              		.cfi_def_cfa_offset 16
 4228              		.cfi_offset 15, -16
 4229 000b 4156     		pushq	%r14
 4230              		.cfi_def_cfa_offset 24
 4231              		.cfi_offset 14, -24
 4232 000d 4155     		pushq	%r13
 4233              		.cfi_def_cfa_offset 32
 4234              		.cfi_offset 13, -32
 4235 000f 4154     		pushq	%r12
 4236              		.cfi_def_cfa_offset 40
 4237              		.cfi_offset 12, -40
 4238 0011 4989F4   		movq	%rsi, %r12
 4239 0014 55       		pushq	%rbp
 4240              		.cfi_def_cfa_offset 48
 4241              		.cfi_offset 6, -48
 4242 0015 53       		pushq	%rbx
 4243              		.cfi_def_cfa_offset 56
 4244              		.cfi_offset 3, -56
 4245 0016 4883EC08 		subq	$8, %rsp
 4246              		.cfi_def_cfa_offset 64
 4247              		.loc 1 1118 0
 4248 001a 4885F6   		testq	%rsi, %rsi
 4249 001d 0F84FD00 		je	.L366
 4249      0000
 4250              		.loc 1 1118 0 is_stmt 0 discriminator 1
 4251 0023 85C9     		testl	%ecx, %ecx
 4252 0025 4189CE   		movl	%ecx, %r14d
 4253 0028 0F8EF200 		jle	.L366
 4253      0000
 4254 002e 4885D2   		testq	%rdx, %rdx
 4255 0031 4889D5   		movq	%rdx, %rbp
 4256 0034 0F84E600 		je	.L366
 4256      0000
1119:fltk-1.3.4-1/png/pngset.c ****       unknowns == NULL)
1120:fltk-1.3.4-1/png/pngset.c ****       return;
1121:fltk-1.3.4-1/png/pngset.c **** 
1122:fltk-1.3.4-1/png/pngset.c ****    /* Check for the failure cases where support has been disabled at compile
1123:fltk-1.3.4-1/png/pngset.c ****     * time.  This code is hardly ever compiled - it's here because
1124:fltk-1.3.4-1/png/pngset.c ****     * STORE_UNKNOWN_CHUNKS is set by both read and write code (compiling in this
1125:fltk-1.3.4-1/png/pngset.c ****     * code) but may be meaningless if the read or write handling of unknown
1126:fltk-1.3.4-1/png/pngset.c ****     * chunks is not compiled in.
1127:fltk-1.3.4-1/png/pngset.c ****     */
1128:fltk-1.3.4-1/png/pngset.c **** #  if !defined(PNG_READ_UNKNOWN_CHUNKS_SUPPORTED) && \
1129:fltk-1.3.4-1/png/pngset.c ****       defined(PNG_READ_SUPPORTED)
1130:fltk-1.3.4-1/png/pngset.c ****       if ((png_ptr->mode & PNG_IS_READ_STRUCT) != 0)
1131:fltk-1.3.4-1/png/pngset.c ****       {
1132:fltk-1.3.4-1/png/pngset.c ****          png_app_error(png_ptr, "no unknown chunk support on read");
1133:fltk-1.3.4-1/png/pngset.c ****          return;
1134:fltk-1.3.4-1/png/pngset.c ****       }
1135:fltk-1.3.4-1/png/pngset.c **** #  endif
1136:fltk-1.3.4-1/png/pngset.c **** #  if !defined(PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED) && \
1137:fltk-1.3.4-1/png/pngset.c ****       defined(PNG_WRITE_SUPPORTED)
1138:fltk-1.3.4-1/png/pngset.c ****       if ((png_ptr->mode & PNG_IS_READ_STRUCT) == 0)
1139:fltk-1.3.4-1/png/pngset.c ****       {
1140:fltk-1.3.4-1/png/pngset.c ****          png_app_error(png_ptr, "no unknown chunk support on write");
1141:fltk-1.3.4-1/png/pngset.c ****          return;
1142:fltk-1.3.4-1/png/pngset.c ****       }
1143:fltk-1.3.4-1/png/pngset.c **** #  endif
1144:fltk-1.3.4-1/png/pngset.c **** 
1145:fltk-1.3.4-1/png/pngset.c ****    /* Prior to 1.6.0 this code used png_malloc_warn; however, this meant that
1146:fltk-1.3.4-1/png/pngset.c ****     * unknown critical chunks could be lost with just a warning resulting in
1147:fltk-1.3.4-1/png/pngset.c ****     * undefined behavior.  Now png_chunk_report is used to provide behavior
1148:fltk-1.3.4-1/png/pngset.c ****     * appropriate to read or write.
1149:fltk-1.3.4-1/png/pngset.c ****     */
1150:fltk-1.3.4-1/png/pngset.c ****    np = png_voidcast(png_unknown_chunkp, png_realloc_array(png_ptr,
 4257              		.loc 1 1150 0 is_stmt 1
 4258 003a 8B962801 		movl	296(%rsi), %edx
 4258      0000
 4259              	.LVL423:
 4260 0040 488BB620 		movq	288(%rsi), %rsi
 4260      010000
 4261              	.LVL424:
 4262 0047 41B82000 		movl	$32, %r8d
 4262      0000
 4263 004d 4989FD   		movq	%rdi, %r13
 4264 0050 E8000000 		call	png_realloc_array
 4264      00
 4265              	.LVL425:
1151:fltk-1.3.4-1/png/pngset.c ****          info_ptr->unknown_chunks, info_ptr->unknown_chunks_num, num_unknowns,
1152:fltk-1.3.4-1/png/pngset.c ****          sizeof *np));
1153:fltk-1.3.4-1/png/pngset.c **** 
1154:fltk-1.3.4-1/png/pngset.c ****    if (np == NULL)
 4266              		.loc 1 1154 0
 4267 0055 4885C0   		testq	%rax, %rax
1150:fltk-1.3.4-1/png/pngset.c ****          info_ptr->unknown_chunks, info_ptr->unknown_chunks_num, num_unknowns,
 4268              		.loc 1 1150 0
 4269 0058 4989C7   		movq	%rax, %r15
 4270              	.LVL426:
 4271              		.loc 1 1154 0
 4272 005b 0F84E700 		je	.L381
 4272      0000
1155:fltk-1.3.4-1/png/pngset.c ****    {
1156:fltk-1.3.4-1/png/pngset.c ****       png_chunk_report(png_ptr, "too many unknown chunks",
1157:fltk-1.3.4-1/png/pngset.c ****          PNG_CHUNK_WRITE_ERROR);
1158:fltk-1.3.4-1/png/pngset.c ****       return;
1159:fltk-1.3.4-1/png/pngset.c ****    }
1160:fltk-1.3.4-1/png/pngset.c **** 
1161:fltk-1.3.4-1/png/pngset.c ****    png_free(png_ptr, info_ptr->unknown_chunks);
 4273              		.loc 1 1161 0
 4274 0061 498BB424 		movq	288(%r12), %rsi
 4274      20010000 
 4275 0069 4C89EF   		movq	%r13, %rdi
 4276 006c 4183EE01 		subl	$1, %r14d
 4277              	.LVL427:
 4278 0070 4983C601 		addq	$1, %r14
 4279 0074 49C1E605 		salq	$5, %r14
 4280 0078 E8000000 		call	png_free
 4280      00
 4281              	.LVL428:
1162:fltk-1.3.4-1/png/pngset.c ****    info_ptr->unknown_chunks = np; /* safe because it is initialized */
1163:fltk-1.3.4-1/png/pngset.c ****    info_ptr->free_me |= PNG_FREE_UNKN;
1164:fltk-1.3.4-1/png/pngset.c **** 
1165:fltk-1.3.4-1/png/pngset.c ****    np += info_ptr->unknown_chunks_num;
 4282              		.loc 1 1165 0
 4283 007d 49639C24 		movslq	296(%r12), %rbx
 4283      28010000 
1162:fltk-1.3.4-1/png/pngset.c ****    info_ptr->unknown_chunks = np; /* safe because it is initialized */
 4284              		.loc 1 1162 0
 4285 0085 4D89BC24 		movq	%r15, 288(%r12)
 4285      20010000 
 4286 008d 4901EE   		addq	%rbp, %r14
1163:fltk-1.3.4-1/png/pngset.c **** 
 4287              		.loc 1 1163 0
 4288 0090 41818C24 		orl	$512, 284(%r12)
 4288      1C010000 
 4288      00020000 
 4289              		.loc 1 1165 0
 4290 009c 48C1E305 		salq	$5, %rbx
 4291 00a0 4C01FB   		addq	%r15, %rbx
 4292              	.LVL429:
 4293 00a3 EB29     		jmp	.L376
 4294              		.p2align 4,,10
 4295 00a5 0F1F00   		.p2align 3
 4296              	.L382:
1166:fltk-1.3.4-1/png/pngset.c **** 
1167:fltk-1.3.4-1/png/pngset.c ****    /* Increment unknown_chunks_num each time round the loop to protect the
1168:fltk-1.3.4-1/png/pngset.c ****     * just-allocated chunk data.
1169:fltk-1.3.4-1/png/pngset.c ****     */
1170:fltk-1.3.4-1/png/pngset.c ****    for (; num_unknowns > 0; --num_unknowns, ++unknowns)
1171:fltk-1.3.4-1/png/pngset.c ****    {
1172:fltk-1.3.4-1/png/pngset.c ****       memcpy(np->name, unknowns->name, (sizeof np->name));
1173:fltk-1.3.4-1/png/pngset.c ****       np->name[(sizeof np->name)-1] = '\0';
1174:fltk-1.3.4-1/png/pngset.c ****       np->location = check_location(png_ptr, unknowns->location);
1175:fltk-1.3.4-1/png/pngset.c **** 
1176:fltk-1.3.4-1/png/pngset.c ****       if (unknowns->size == 0)
1177:fltk-1.3.4-1/png/pngset.c ****       {
1178:fltk-1.3.4-1/png/pngset.c ****          np->data = NULL;
 4297              		.loc 1 1178 0
 4298 00a8 48C74308 		movq	$0, 8(%rbx)
 4298      00000000 
1179:fltk-1.3.4-1/png/pngset.c ****          np->size = 0;
 4299              		.loc 1 1179 0
 4300 00b0 48C74310 		movq	$0, 16(%rbx)
 4300      00000000 
 4301              	.L373:
1180:fltk-1.3.4-1/png/pngset.c ****       }
1181:fltk-1.3.4-1/png/pngset.c **** 
1182:fltk-1.3.4-1/png/pngset.c ****       else
1183:fltk-1.3.4-1/png/pngset.c ****       {
1184:fltk-1.3.4-1/png/pngset.c ****          np->data = png_voidcast(png_bytep,
1185:fltk-1.3.4-1/png/pngset.c ****             png_malloc_base(png_ptr, unknowns->size));
1186:fltk-1.3.4-1/png/pngset.c **** 
1187:fltk-1.3.4-1/png/pngset.c ****          if (np->data == NULL)
1188:fltk-1.3.4-1/png/pngset.c ****          {
1189:fltk-1.3.4-1/png/pngset.c ****             png_chunk_report(png_ptr, "unknown chunk: out of memory",
1190:fltk-1.3.4-1/png/pngset.c ****                PNG_CHUNK_WRITE_ERROR);
1191:fltk-1.3.4-1/png/pngset.c ****             /* But just skip storing the unknown chunk */
1192:fltk-1.3.4-1/png/pngset.c ****             continue;
1193:fltk-1.3.4-1/png/pngset.c ****          }
1194:fltk-1.3.4-1/png/pngset.c **** 
1195:fltk-1.3.4-1/png/pngset.c ****          memcpy(np->data, unknowns->data, unknowns->size);
1196:fltk-1.3.4-1/png/pngset.c ****          np->size = unknowns->size;
1197:fltk-1.3.4-1/png/pngset.c ****       }
1198:fltk-1.3.4-1/png/pngset.c **** 
1199:fltk-1.3.4-1/png/pngset.c ****       /* These increments are skipped on out-of-memory for the data - the
1200:fltk-1.3.4-1/png/pngset.c ****        * unknown chunk entry gets overwritten if the png_chunk_report returns.
1201:fltk-1.3.4-1/png/pngset.c ****        * This is correct in the read case (the chunk is just dropped.)
1202:fltk-1.3.4-1/png/pngset.c ****        */
1203:fltk-1.3.4-1/png/pngset.c ****       ++np;
1204:fltk-1.3.4-1/png/pngset.c ****       ++(info_ptr->unknown_chunks_num);
 4302              		.loc 1 1204 0
 4303 00b8 41838424 		addl	$1, 296(%r12)
 4303      28010000 
 4303      01
1203:fltk-1.3.4-1/png/pngset.c ****       ++(info_ptr->unknown_chunks_num);
 4304              		.loc 1 1203 0
 4305 00c1 4883C320 		addq	$32, %rbx
 4306              	.LVL430:
 4307              	.L375:
1170:fltk-1.3.4-1/png/pngset.c ****    {
 4308              		.loc 1 1170 0
 4309 00c5 4883C520 		addq	$32, %rbp
 4310              	.LVL431:
 4311 00c9 4C39F5   		cmpq	%r14, %rbp
 4312 00cc 7452     		je	.L366
 4313              	.L376:
 4314              	.LVL432:
 4315              	.LBB232:
 4316              	.LBB233:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 4317              		.loc 2 53 0
 4318 00ce 8B4500   		movl	0(%rbp), %eax
 4319              	.LBE233:
 4320              	.LBE232:
1174:fltk-1.3.4-1/png/pngset.c **** 
 4321              		.loc 1 1174 0
 4322 00d1 4C89EF   		movq	%r13, %rdi
 4323 00d4 0FB67518 		movzbl	24(%rbp), %esi
1173:fltk-1.3.4-1/png/pngset.c ****       np->location = check_location(png_ptr, unknowns->location);
 4324              		.loc 1 1173 0
 4325 00d8 C6430400 		movb	$0, 4(%rbx)
 4326              	.LBB235:
 4327              	.LBB234:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 4328              		.loc 2 53 0
 4329 00dc 8903     		movl	%eax, (%rbx)
 4330              	.LVL433:
 4331              	.LBE234:
 4332              	.LBE235:
1174:fltk-1.3.4-1/png/pngset.c **** 
 4333              		.loc 1 1174 0
 4334 00de E8000000 		call	check_location
 4334      00
 4335              	.LVL434:
1176:fltk-1.3.4-1/png/pngset.c ****       {
 4336              		.loc 1 1176 0
 4337 00e3 488B7510 		movq	16(%rbp), %rsi
1174:fltk-1.3.4-1/png/pngset.c **** 
 4338              		.loc 1 1174 0
 4339 00e7 884318   		movb	%al, 24(%rbx)
1176:fltk-1.3.4-1/png/pngset.c ****       {
 4340              		.loc 1 1176 0
 4341 00ea 4885F6   		testq	%rsi, %rsi
 4342 00ed 74B9     		je	.L382
1184:fltk-1.3.4-1/png/pngset.c ****             png_malloc_base(png_ptr, unknowns->size));
 4343              		.loc 1 1184 0
 4344 00ef 4C89EF   		movq	%r13, %rdi
 4345 00f2 E8000000 		call	png_malloc_base
 4345      00
 4346              	.LVL435:
1187:fltk-1.3.4-1/png/pngset.c ****          {
 4347              		.loc 1 1187 0
 4348 00f7 4885C0   		testq	%rax, %rax
1184:fltk-1.3.4-1/png/pngset.c ****             png_malloc_base(png_ptr, unknowns->size));
 4349              		.loc 1 1184 0
 4350 00fa 48894308 		movq	%rax, 8(%rbx)
1187:fltk-1.3.4-1/png/pngset.c ****          {
 4351              		.loc 1 1187 0
 4352 00fe 7430     		je	.L383
1195:fltk-1.3.4-1/png/pngset.c ****          np->size = unknowns->size;
 4353              		.loc 1 1195 0
 4354 0100 4C8B7D10 		movq	16(%rbp), %r15
 4355              	.LVL436:
 4356              	.LBB236:
 4357              	.LBB237:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 4358              		.loc 2 53 0
 4359 0104 488B7508 		movq	8(%rbp), %rsi
 4360 0108 4889C7   		movq	%rax, %rdi
 4361 010b 4C89FA   		movq	%r15, %rdx
 4362 010e E8000000 		call	memcpy
 4362      00
 4363              	.LVL437:
 4364              	.LBE237:
 4365              	.LBE236:
1196:fltk-1.3.4-1/png/pngset.c ****       }
 4366              		.loc 1 1196 0
 4367 0113 4C897B10 		movq	%r15, 16(%rbx)
 4368 0117 EB9F     		jmp	.L373
 4369              	.LVL438:
 4370 0119 0F1F8000 		.p2align 4,,10
 4370      000000
 4371              		.p2align 3
 4372              	.L366:
1205:fltk-1.3.4-1/png/pngset.c ****    }
1206:fltk-1.3.4-1/png/pngset.c **** }
 4373              		.loc 1 1206 0
 4374 0120 4883C408 		addq	$8, %rsp
 4375              		.cfi_def_cfa_offset 56
 4376 0124 5B       		popq	%rbx
 4377              		.cfi_restore 3
 4378              		.cfi_def_cfa_offset 48
 4379 0125 5D       		popq	%rbp
 4380              		.cfi_restore 6
 4381              		.cfi_def_cfa_offset 40
 4382 0126 415C     		popq	%r12
 4383              		.cfi_restore 12
 4384              		.cfi_def_cfa_offset 32
 4385              	.LVL439:
 4386 0128 415D     		popq	%r13
 4387              		.cfi_restore 13
 4388              		.cfi_def_cfa_offset 24
 4389 012a 415E     		popq	%r14
 4390              		.cfi_restore 14
 4391              		.cfi_def_cfa_offset 16
 4392 012c 415F     		popq	%r15
 4393              		.cfi_restore 15
 4394              		.cfi_def_cfa_offset 8
 4395              	.L380:
 4396 012e F3C3     		rep ret
 4397              	.LVL440:
 4398              		.p2align 4,,10
 4399              		.p2align 3
 4400              	.L383:
 4401              		.cfi_def_cfa_offset 64
 4402              		.cfi_offset 3, -56
 4403              		.cfi_offset 6, -48
 4404              		.cfi_offset 12, -40
 4405              		.cfi_offset 13, -32
 4406              		.cfi_offset 14, -24
 4407              		.cfi_offset 15, -16
1189:fltk-1.3.4-1/png/pngset.c ****                PNG_CHUNK_WRITE_ERROR);
 4408              		.loc 1 1189 0
 4409 0130 BA010000 		movl	$1, %edx
 4409      00
 4410 0135 BE000000 		movl	$.LC69, %esi
 4410      00
 4411 013a 4C89EF   		movq	%r13, %rdi
 4412 013d E8000000 		call	png_chunk_report
 4412      00
 4413              	.LVL441:
1192:fltk-1.3.4-1/png/pngset.c ****          }
 4414              		.loc 1 1192 0
 4415 0142 EB81     		jmp	.L375
 4416              	.LVL442:
 4417              		.p2align 4,,10
 4418 0144 0F1F4000 		.p2align 3
 4419              	.L381:
 4420              		.loc 1 1206 0
 4421 0148 4883C408 		addq	$8, %rsp
 4422              		.cfi_def_cfa_offset 56
1156:fltk-1.3.4-1/png/pngset.c ****          PNG_CHUNK_WRITE_ERROR);
 4423              		.loc 1 1156 0
 4424 014c 4C89EF   		movq	%r13, %rdi
 4425 014f BA010000 		movl	$1, %edx
 4425      00
 4426              		.loc 1 1206 0
 4427 0154 5B       		popq	%rbx
 4428              		.cfi_restore 3
 4429              		.cfi_def_cfa_offset 48
 4430 0155 5D       		popq	%rbp
 4431              		.cfi_restore 6
 4432              		.cfi_def_cfa_offset 40
 4433              	.LVL443:
 4434 0156 415C     		popq	%r12
 4435              		.cfi_restore 12
 4436              		.cfi_def_cfa_offset 32
 4437              	.LVL444:
 4438 0158 415D     		popq	%r13
 4439              		.cfi_restore 13
 4440              		.cfi_def_cfa_offset 24
 4441              	.LVL445:
 4442 015a 415E     		popq	%r14
 4443              		.cfi_restore 14
 4444              		.cfi_def_cfa_offset 16
 4445              	.LVL446:
 4446 015c 415F     		popq	%r15
 4447              		.cfi_restore 15
 4448              		.cfi_def_cfa_offset 8
1156:fltk-1.3.4-1/png/pngset.c ****          PNG_CHUNK_WRITE_ERROR);
 4449              		.loc 1 1156 0
 4450 015e BE000000 		movl	$.LC68, %esi
 4450      00
 4451 0163 E9000000 		jmp	png_chunk_report
 4451      00
 4452              	.LVL447:
 4453              		.cfi_endproc
 4454              	.LFE82:
 4456              		.section	.text.unlikely.png_set_unknown_chunks
 4457              	.LCOLDE70:
 4458              		.section	.text.png_set_unknown_chunks
 4459              	.LHOTE70:
 4460              		.section	.rodata.str1.8
 4461 02ba 00000000 		.align 8
 4461      0000
 4462              	.LC71:
 4463 02c0 696E7661 		.string	"invalid unknown chunk location"
 4463      6C696420 
 4463      756E6B6E 
 4463      6F776E20 
 4463      6368756E 
 4464              		.section	.text.unlikely.png_set_unknown_chunk_location,"ax",@progbits
 4465              	.LCOLDB72:
 4466              		.section	.text.png_set_unknown_chunk_location,"ax",@progbits
 4467              	.LHOTB72:
 4468              		.p2align 4,,15
 4469              		.globl	png_set_unknown_chunk_location
 4471              	png_set_unknown_chunk_location:
 4472              	.LFB83:
1207:fltk-1.3.4-1/png/pngset.c **** 
1208:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
1209:fltk-1.3.4-1/png/pngset.c **** png_set_unknown_chunk_location(png_const_structrp png_ptr, png_inforp info_ptr,
1210:fltk-1.3.4-1/png/pngset.c ****     int chunk, int location)
1211:fltk-1.3.4-1/png/pngset.c **** {
 4473              		.loc 1 1211 0
 4474              		.cfi_startproc
 4475              	.LVL448:
 4476 0000 55       		pushq	%rbp
 4477              		.cfi_def_cfa_offset 16
 4478              		.cfi_offset 6, -16
 4479 0001 53       		pushq	%rbx
 4480              		.cfi_def_cfa_offset 24
 4481              		.cfi_offset 3, -24
1212:fltk-1.3.4-1/png/pngset.c ****    /* This API is pretty pointless in 1.6.0 because the location can be set
1213:fltk-1.3.4-1/png/pngset.c ****     * before the call to png_set_unknown_chunks.
1214:fltk-1.3.4-1/png/pngset.c ****     *
1215:fltk-1.3.4-1/png/pngset.c ****     * TODO: add a png_app_warning in 1.7
1216:fltk-1.3.4-1/png/pngset.c ****     */
1217:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr != NULL && info_ptr != NULL && chunk >= 0 &&
 4482              		.loc 1 1217 0
 4483 0002 89D0     		movl	%edx, %eax
 4484 0004 F7D0     		notl	%eax
1211:fltk-1.3.4-1/png/pngset.c ****    /* This API is pretty pointless in 1.6.0 because the location can be set
 4485              		.loc 1 1211 0
 4486 0006 4889F3   		movq	%rsi, %rbx
 4487 0009 4883EC18 		subq	$24, %rsp
 4488              		.cfi_def_cfa_offset 48
 4489              		.loc 1 1217 0
 4490 000d 4885F6   		testq	%rsi, %rsi
 4491 0010 400F95C6 		setne	%sil
 4492              	.LVL449:
 4493 0014 C1E81F   		shrl	$31, %eax
 4494 0017 4084C6   		testb	%al, %sil
 4495 001a 7433     		je	.L384
 4496 001c 4885FF   		testq	%rdi, %rdi
 4497 001f 4889FD   		movq	%rdi, %rbp
 4498 0022 742B     		je	.L384
 4499              		.loc 1 1217 0 is_stmt 0 discriminator 2
 4500 0024 3B932801 		cmpl	296(%rbx), %edx
 4500      0000
 4501 002a 7D23     		jge	.L384
1218:fltk-1.3.4-1/png/pngset.c ****       chunk < info_ptr->unknown_chunks_num)
1219:fltk-1.3.4-1/png/pngset.c ****    {
1220:fltk-1.3.4-1/png/pngset.c ****       if ((location & (PNG_HAVE_IHDR|PNG_HAVE_PLTE|PNG_AFTER_IDAT)) == 0)
 4502              		.loc 1 1220 0 is_stmt 1
 4503 002c F6C10B   		testb	$11, %cl
 4504 002f 742F     		je	.L395
 4505              	.LVL450:
 4506              	.L386:
1221:fltk-1.3.4-1/png/pngset.c ****       {
1222:fltk-1.3.4-1/png/pngset.c ****          png_app_error(png_ptr, "invalid unknown chunk location");
1223:fltk-1.3.4-1/png/pngset.c ****          /* Fake out the pre 1.6.0 behavior: */
1224:fltk-1.3.4-1/png/pngset.c ****          if ((location & PNG_HAVE_IDAT) != 0) /* undocumented! */
1225:fltk-1.3.4-1/png/pngset.c ****             location = PNG_AFTER_IDAT;
1226:fltk-1.3.4-1/png/pngset.c **** 
1227:fltk-1.3.4-1/png/pngset.c ****          else
1228:fltk-1.3.4-1/png/pngset.c ****             location = PNG_HAVE_IHDR; /* also undocumented */
1229:fltk-1.3.4-1/png/pngset.c ****       }
1230:fltk-1.3.4-1/png/pngset.c **** 
1231:fltk-1.3.4-1/png/pngset.c ****       info_ptr->unknown_chunks[chunk].location =
 4507              		.loc 1 1231 0
 4508 0031 4863D2   		movslq	%edx, %rdx
1232:fltk-1.3.4-1/png/pngset.c ****          check_location(png_ptr, location);
 4509              		.loc 1 1232 0
 4510 0034 89CE     		movl	%ecx, %esi
 4511 0036 4889EF   		movq	%rbp, %rdi
1231:fltk-1.3.4-1/png/pngset.c ****          check_location(png_ptr, location);
 4512              		.loc 1 1231 0
 4513 0039 48C1E205 		salq	$5, %rdx
 4514 003d 48039320 		addq	288(%rbx), %rdx
 4514      010000
 4515 0044 4889D3   		movq	%rdx, %rbx
 4516              	.LVL451:
 4517              		.loc 1 1232 0
 4518 0047 E8000000 		call	check_location
 4518      00
 4519              	.LVL452:
1231:fltk-1.3.4-1/png/pngset.c ****          check_location(png_ptr, location);
 4520              		.loc 1 1231 0
 4521 004c 884318   		movb	%al, 24(%rbx)
 4522              	.LVL453:
 4523              	.L384:
1233:fltk-1.3.4-1/png/pngset.c ****    }
1234:fltk-1.3.4-1/png/pngset.c **** }
 4524              		.loc 1 1234 0
 4525 004f 4883C418 		addq	$24, %rsp
 4526              		.cfi_remember_state
 4527              		.cfi_def_cfa_offset 24
 4528 0053 5B       		popq	%rbx
 4529              		.cfi_def_cfa_offset 16
 4530 0054 5D       		popq	%rbp
 4531              		.cfi_def_cfa_offset 8
 4532 0055 C3       		ret
 4533              	.LVL454:
 4534 0056 662E0F1F 		.p2align 4,,10
 4534      84000000 
 4534      0000
 4535              		.p2align 3
 4536              	.L395:
 4537              		.cfi_restore_state
1222:fltk-1.3.4-1/png/pngset.c ****          /* Fake out the pre 1.6.0 behavior: */
 4538              		.loc 1 1222 0
 4539 0060 BE000000 		movl	$.LC71, %esi
 4539      00
 4540 0065 894C240C 		movl	%ecx, 12(%rsp)
 4541 0069 89542408 		movl	%edx, 8(%rsp)
 4542 006d E8000000 		call	png_app_error
 4542      00
 4543              	.LVL455:
1224:fltk-1.3.4-1/png/pngset.c ****             location = PNG_AFTER_IDAT;
 4544              		.loc 1 1224 0
 4545 0072 8B4C240C 		movl	12(%rsp), %ecx
1228:fltk-1.3.4-1/png/pngset.c ****       }
 4546              		.loc 1 1228 0
 4547 0076 8B542408 		movl	8(%rsp), %edx
1224:fltk-1.3.4-1/png/pngset.c ****             location = PNG_AFTER_IDAT;
 4548              		.loc 1 1224 0
 4549 007a 83E104   		andl	$4, %ecx
1228:fltk-1.3.4-1/png/pngset.c ****       }
 4550              		.loc 1 1228 0
 4551 007d 83F901   		cmpl	$1, %ecx
 4552 0080 19C9     		sbbl	%ecx, %ecx
 4553 0082 83E1F9   		andl	$-7, %ecx
 4554 0085 83C108   		addl	$8, %ecx
 4555 0088 EBA7     		jmp	.L386
 4556              		.cfi_endproc
 4557              	.LFE83:
 4559              		.section	.text.unlikely.png_set_unknown_chunk_location
 4560              	.LCOLDE72:
 4561              		.section	.text.png_set_unknown_chunk_location
 4562              	.LHOTE72:
 4563              		.section	.text.unlikely.png_permit_mng_features,"ax",@progbits
 4564              	.LCOLDB73:
 4565              		.section	.text.png_permit_mng_features,"ax",@progbits
 4566              	.LHOTB73:
 4567              		.p2align 4,,15
 4568              		.globl	png_permit_mng_features
 4570              	png_permit_mng_features:
 4571              	.LFB84:
1235:fltk-1.3.4-1/png/pngset.c **** #endif
1236:fltk-1.3.4-1/png/pngset.c **** 
1237:fltk-1.3.4-1/png/pngset.c **** 
1238:fltk-1.3.4-1/png/pngset.c **** #ifdef PNG_MNG_FEATURES_SUPPORTED
1239:fltk-1.3.4-1/png/pngset.c **** png_uint_32 PNGAPI
1240:fltk-1.3.4-1/png/pngset.c **** png_permit_mng_features (png_structrp png_ptr, png_uint_32 mng_features)
1241:fltk-1.3.4-1/png/pngset.c **** {
 4572              		.loc 1 1241 0
 4573              		.cfi_startproc
 4574              	.LVL456:
1242:fltk-1.3.4-1/png/pngset.c ****    png_debug(1, "in png_permit_mng_features");
1243:fltk-1.3.4-1/png/pngset.c **** 
1244:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr == NULL)
 4575              		.loc 1 1244 0
 4576 0000 4885FF   		testq	%rdi, %rdi
 4577 0003 7413     		je	.L398
1245:fltk-1.3.4-1/png/pngset.c ****       return 0;
1246:fltk-1.3.4-1/png/pngset.c **** 
1247:fltk-1.3.4-1/png/pngset.c ****    png_ptr->mng_features_permitted = mng_features & PNG_ALL_MNG_FEATURES;
 4578              		.loc 1 1247 0
 4579 0005 89F0     		movl	%esi, %eax
 4580 0007 83E005   		andl	$5, %eax
 4581 000a 89871804 		movl	%eax, 1048(%rdi)
 4581      0000
1248:fltk-1.3.4-1/png/pngset.c **** 
1249:fltk-1.3.4-1/png/pngset.c ****    return png_ptr->mng_features_permitted;
 4582              		.loc 1 1249 0
 4583 0010 C3       		ret
 4584              		.p2align 4,,10
 4585 0011 0F1F8000 		.p2align 3
 4585      000000
 4586              	.L398:
1245:fltk-1.3.4-1/png/pngset.c ****       return 0;
 4587              		.loc 1 1245 0
 4588 0018 31C0     		xorl	%eax, %eax
1250:fltk-1.3.4-1/png/pngset.c **** }
 4589              		.loc 1 1250 0
 4590 001a C3       		ret
 4591              		.cfi_endproc
 4592              	.LFE84:
 4594              		.section	.text.unlikely.png_permit_mng_features
 4595              	.LCOLDE73:
 4596              		.section	.text.png_permit_mng_features
 4597              	.LHOTE73:
 4598              		.section	.rodata.str1.8
 4599 02df 00       		.align 8
 4600              	.LC74:
 4601 02e0 706E675F 		.string	"png_set_keep_unknown_chunks: invalid keep"
 4601      7365745F 
 4601      6B656570 
 4601      5F756E6B 
 4601      6E6F776E 
 4602 030a 00000000 		.align 8
 4602      0000
 4603              	.LC75:
 4604 0310 706E675F 		.string	"png_set_keep_unknown_chunks: no chunk list"
 4604      7365745F 
 4604      6B656570 
 4604      5F756E6B 
 4604      6E6F776E 
 4605 033b 00000000 		.align 8
 4605      00
 4606              	.LC76:
 4607 0340 706E675F 		.string	"png_set_keep_unknown_chunks: too many chunks"
 4607      7365745F 
 4607      6B656570 
 4607      5F756E6B 
 4607      6E6F776E 
 4608              		.section	.text.unlikely.png_set_keep_unknown_chunks,"ax",@progbits
 4609              	.LCOLDB77:
 4610              		.section	.text.png_set_keep_unknown_chunks,"ax",@progbits
 4611              	.LHOTB77:
 4612              		.p2align 4,,15
 4613              		.globl	png_set_keep_unknown_chunks
 4615              	png_set_keep_unknown_chunks:
 4616              	.LFB86:
1251:fltk-1.3.4-1/png/pngset.c **** #endif
1252:fltk-1.3.4-1/png/pngset.c **** 
1253:fltk-1.3.4-1/png/pngset.c **** #ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED
1254:fltk-1.3.4-1/png/pngset.c **** static unsigned int
1255:fltk-1.3.4-1/png/pngset.c **** add_one_chunk(png_bytep list, unsigned int count, png_const_bytep add, int keep)
1256:fltk-1.3.4-1/png/pngset.c **** {
1257:fltk-1.3.4-1/png/pngset.c ****    unsigned int i;
1258:fltk-1.3.4-1/png/pngset.c **** 
1259:fltk-1.3.4-1/png/pngset.c ****    /* Utility function: update the 'keep' state of a chunk if it is already in
1260:fltk-1.3.4-1/png/pngset.c ****     * the list, otherwise add it to the list.
1261:fltk-1.3.4-1/png/pngset.c ****     */
1262:fltk-1.3.4-1/png/pngset.c ****    for (i=0; i<count; ++i, list += 5)
1263:fltk-1.3.4-1/png/pngset.c ****    {
1264:fltk-1.3.4-1/png/pngset.c ****       if (memcmp(list, add, 4) == 0)
1265:fltk-1.3.4-1/png/pngset.c ****       {
1266:fltk-1.3.4-1/png/pngset.c ****          list[4] = (png_byte)keep;
1267:fltk-1.3.4-1/png/pngset.c ****          return count;
1268:fltk-1.3.4-1/png/pngset.c ****       }
1269:fltk-1.3.4-1/png/pngset.c ****    }
1270:fltk-1.3.4-1/png/pngset.c **** 
1271:fltk-1.3.4-1/png/pngset.c ****    if (keep != PNG_HANDLE_CHUNK_AS_DEFAULT)
1272:fltk-1.3.4-1/png/pngset.c ****    {
1273:fltk-1.3.4-1/png/pngset.c ****       ++count;
1274:fltk-1.3.4-1/png/pngset.c ****       memcpy(list, add, 4);
1275:fltk-1.3.4-1/png/pngset.c ****       list[4] = (png_byte)keep;
1276:fltk-1.3.4-1/png/pngset.c ****    }
1277:fltk-1.3.4-1/png/pngset.c **** 
1278:fltk-1.3.4-1/png/pngset.c ****    return count;
1279:fltk-1.3.4-1/png/pngset.c **** }
1280:fltk-1.3.4-1/png/pngset.c **** 
1281:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
1282:fltk-1.3.4-1/png/pngset.c **** png_set_keep_unknown_chunks(png_structrp png_ptr, int keep,
1283:fltk-1.3.4-1/png/pngset.c ****     png_const_bytep chunk_list, int num_chunks_in)
1284:fltk-1.3.4-1/png/pngset.c **** {
 4617              		.loc 1 1284 0
 4618              		.cfi_startproc
 4619              	.LVL457:
 4620 0000 4157     		pushq	%r15
 4621              		.cfi_def_cfa_offset 16
 4622              		.cfi_offset 15, -16
 4623 0002 4156     		pushq	%r14
 4624              		.cfi_def_cfa_offset 24
 4625              		.cfi_offset 14, -24
 4626 0004 4155     		pushq	%r13
 4627              		.cfi_def_cfa_offset 32
 4628              		.cfi_offset 13, -32
 4629 0006 4154     		pushq	%r12
 4630              		.cfi_def_cfa_offset 40
 4631              		.cfi_offset 12, -40
 4632 0008 55       		pushq	%rbp
 4633              		.cfi_def_cfa_offset 48
 4634              		.cfi_offset 6, -48
 4635 0009 53       		pushq	%rbx
 4636              		.cfi_def_cfa_offset 56
 4637              		.cfi_offset 3, -56
 4638 000a 4883EC28 		subq	$40, %rsp
 4639              		.cfi_def_cfa_offset 96
1285:fltk-1.3.4-1/png/pngset.c ****    png_bytep new_list;
1286:fltk-1.3.4-1/png/pngset.c ****    unsigned int num_chunks, old_num_chunks;
1287:fltk-1.3.4-1/png/pngset.c **** 
1288:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr == NULL)
 4640              		.loc 1 1288 0
 4641 000e 4885FF   		testq	%rdi, %rdi
1284:fltk-1.3.4-1/png/pngset.c ****    png_bytep new_list;
 4642              		.loc 1 1284 0
 4643 0011 48897C24 		movq	%rdi, 24(%rsp)
 4643      18
 4644 0016 89742410 		movl	%esi, 16(%rsp)
 4645 001a 48895424 		movq	%rdx, 8(%rsp)
 4645      08
 4646              		.loc 1 1288 0
 4647 001f 0F847101 		je	.L399
 4647      0000
1289:fltk-1.3.4-1/png/pngset.c ****       return;
1290:fltk-1.3.4-1/png/pngset.c **** 
1291:fltk-1.3.4-1/png/pngset.c ****    if (keep < 0 || keep >= PNG_HANDLE_CHUNK_LAST)
 4648              		.loc 1 1291 0
 4649 0025 89F0     		movl	%esi, %eax
1292:fltk-1.3.4-1/png/pngset.c ****    {
1293:fltk-1.3.4-1/png/pngset.c ****       png_app_error(png_ptr, "png_set_keep_unknown_chunks: invalid keep");
 4650              		.loc 1 1293 0
 4651 0027 BE000000 		movl	$.LC74, %esi
 4651      00
 4652              	.LVL458:
1291:fltk-1.3.4-1/png/pngset.c ****    {
 4653              		.loc 1 1291 0
 4654 002c 83F803   		cmpl	$3, %eax
 4655 002f 0F87A701 		ja	.L461
 4655      0000
1294:fltk-1.3.4-1/png/pngset.c ****       return;
1295:fltk-1.3.4-1/png/pngset.c ****    }
1296:fltk-1.3.4-1/png/pngset.c **** 
1297:fltk-1.3.4-1/png/pngset.c ****    if (num_chunks_in <= 0)
 4656              		.loc 1 1297 0
 4657 0035 83F900   		cmpl	$0, %ecx
 4658 0038 0F8E1002 		jle	.L403
 4658      0000
1298:fltk-1.3.4-1/png/pngset.c ****    {
1299:fltk-1.3.4-1/png/pngset.c ****       png_ptr->unknown_default = keep;
1300:fltk-1.3.4-1/png/pngset.c **** 
1301:fltk-1.3.4-1/png/pngset.c ****       /* '0' means just set the flags, so stop here */
1302:fltk-1.3.4-1/png/pngset.c ****       if (num_chunks_in == 0)
1303:fltk-1.3.4-1/png/pngset.c ****         return;
1304:fltk-1.3.4-1/png/pngset.c ****    }
1305:fltk-1.3.4-1/png/pngset.c **** 
1306:fltk-1.3.4-1/png/pngset.c ****    if (num_chunks_in < 0)
1307:fltk-1.3.4-1/png/pngset.c ****    {
1308:fltk-1.3.4-1/png/pngset.c ****       /* Ignore all unknown chunks and all chunks recognized by
1309:fltk-1.3.4-1/png/pngset.c ****        * libpng except for IHDR, PLTE, tRNS, IDAT, and IEND
1310:fltk-1.3.4-1/png/pngset.c ****        */
1311:fltk-1.3.4-1/png/pngset.c ****       static PNG_CONST png_byte chunks_to_ignore[] = {
1312:fltk-1.3.4-1/png/pngset.c ****          98,  75,  71,  68, '\0',  /* bKGD */
1313:fltk-1.3.4-1/png/pngset.c ****          99,  72,  82,  77, '\0',  /* cHRM */
1314:fltk-1.3.4-1/png/pngset.c ****         103,  65,  77,  65, '\0',  /* gAMA */
1315:fltk-1.3.4-1/png/pngset.c ****         104,  73,  83,  84, '\0',  /* hIST */
1316:fltk-1.3.4-1/png/pngset.c ****         105,  67,  67,  80, '\0',  /* iCCP */
1317:fltk-1.3.4-1/png/pngset.c ****         105,  84,  88, 116, '\0',  /* iTXt */
1318:fltk-1.3.4-1/png/pngset.c ****         111,  70,  70, 115, '\0',  /* oFFs */
1319:fltk-1.3.4-1/png/pngset.c ****         112,  67,  65,  76, '\0',  /* pCAL */
1320:fltk-1.3.4-1/png/pngset.c ****         112,  72,  89, 115, '\0',  /* pHYs */
1321:fltk-1.3.4-1/png/pngset.c ****         115,  66,  73,  84, '\0',  /* sBIT */
1322:fltk-1.3.4-1/png/pngset.c ****         115,  67,  65,  76, '\0',  /* sCAL */
1323:fltk-1.3.4-1/png/pngset.c ****         115,  80,  76,  84, '\0',  /* sPLT */
1324:fltk-1.3.4-1/png/pngset.c ****         115,  84,  69,  82, '\0',  /* sTER */
1325:fltk-1.3.4-1/png/pngset.c ****         115,  82,  71,  66, '\0',  /* sRGB */
1326:fltk-1.3.4-1/png/pngset.c ****         116,  69,  88, 116, '\0',  /* tEXt */
1327:fltk-1.3.4-1/png/pngset.c ****         116,  73,  77,  69, '\0',  /* tIME */
1328:fltk-1.3.4-1/png/pngset.c ****         122,  84,  88, 116, '\0'   /* zTXt */
1329:fltk-1.3.4-1/png/pngset.c ****       };
1330:fltk-1.3.4-1/png/pngset.c **** 
1331:fltk-1.3.4-1/png/pngset.c ****       chunk_list = chunks_to_ignore;
1332:fltk-1.3.4-1/png/pngset.c ****       num_chunks = (unsigned int)/*SAFE*/(sizeof chunks_to_ignore)/5U;
1333:fltk-1.3.4-1/png/pngset.c ****    }
1334:fltk-1.3.4-1/png/pngset.c **** 
1335:fltk-1.3.4-1/png/pngset.c ****    else /* num_chunks_in > 0 */
1336:fltk-1.3.4-1/png/pngset.c ****    {
1337:fltk-1.3.4-1/png/pngset.c ****       if (chunk_list == NULL)
 4659              		.loc 1 1337 0
 4660 003e 48837C24 		cmpq	$0, 8(%rsp)
 4660      0800
 4661 0044 0F84B702 		je	.L466
 4661      0000
1338:fltk-1.3.4-1/png/pngset.c ****       {
1339:fltk-1.3.4-1/png/pngset.c ****          /* Prior to 1.6.0 this was silently ignored, now it is an app_error
1340:fltk-1.3.4-1/png/pngset.c ****           * which can be switched off.
1341:fltk-1.3.4-1/png/pngset.c ****           */
1342:fltk-1.3.4-1/png/pngset.c ****          png_app_error(png_ptr, "png_set_keep_unknown_chunks: no chunk list");
1343:fltk-1.3.4-1/png/pngset.c ****          return;
1344:fltk-1.3.4-1/png/pngset.c ****       }
1345:fltk-1.3.4-1/png/pngset.c **** 
1346:fltk-1.3.4-1/png/pngset.c ****       num_chunks = num_chunks_in;
1347:fltk-1.3.4-1/png/pngset.c ****    }
1348:fltk-1.3.4-1/png/pngset.c **** 
1349:fltk-1.3.4-1/png/pngset.c ****    old_num_chunks = png_ptr->num_chunk_list;
 4662              		.loc 1 1349 0
 4663 004a 488B4424 		movq	24(%rsp), %rax
 4663      18
 4664              	.LVL459:
1346:fltk-1.3.4-1/png/pngset.c ****    }
 4665              		.loc 1 1346 0
 4666 004f 89CB     		movl	%ecx, %ebx
 4667              	.LVL460:
1350:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr->chunk_list == NULL)
 4668              		.loc 1 1350 0
 4669 0051 4C8BB008 		movq	1032(%rax), %r14
 4669      040000
1349:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr->chunk_list == NULL)
 4670              		.loc 1 1349 0
 4671 0058 448BA804 		movl	1028(%rax), %r13d
 4671      040000
 4672              	.LVL461:
1351:fltk-1.3.4-1/png/pngset.c ****       old_num_chunks = 0;
 4673              		.loc 1 1351 0
 4674 005f B8000000 		movl	$0, %eax
 4674      00
 4675 0064 4D85F6   		testq	%r14, %r14
 4676 0067 440F44E8 		cmove	%eax, %r13d
 4677              	.LVL462:
 4678              	.L408:
1352:fltk-1.3.4-1/png/pngset.c **** 
1353:fltk-1.3.4-1/png/pngset.c ****    /* Since num_chunks is always restricted to UINT_MAX/5 this can't overflow.
1354:fltk-1.3.4-1/png/pngset.c ****     */
1355:fltk-1.3.4-1/png/pngset.c ****    if (num_chunks + old_num_chunks > UINT_MAX/5)
 4679              		.loc 1 1355 0
 4680 006b 418D441D 		leal	0(%r13,%rbx), %eax
 4680      00
 4681 0070 3D333333 		cmpl	$858993459, %eax
 4681      33
 4682 0075 0F875701 		ja	.L467
 4682      0000
1356:fltk-1.3.4-1/png/pngset.c ****    {
1357:fltk-1.3.4-1/png/pngset.c ****       png_app_error(png_ptr, "png_set_keep_unknown_chunks: too many chunks");
1358:fltk-1.3.4-1/png/pngset.c ****       return;
1359:fltk-1.3.4-1/png/pngset.c ****    }
1360:fltk-1.3.4-1/png/pngset.c **** 
1361:fltk-1.3.4-1/png/pngset.c ****    /* If these chunks are being reset to the default then no more memory is
1362:fltk-1.3.4-1/png/pngset.c ****     * required because add_one_chunk above doesn't extend the list if the 'keep'
1363:fltk-1.3.4-1/png/pngset.c ****     * parameter is the default.
1364:fltk-1.3.4-1/png/pngset.c ****     */
1365:fltk-1.3.4-1/png/pngset.c ****    if (keep != 0)
 4683              		.loc 1 1365 0
 4684 007b 8B4C2410 		movl	16(%rsp), %ecx
 4685 007f 85C9     		testl	%ecx, %ecx
 4686 0081 0F850702 		jne	.L468
 4686      0000
1366:fltk-1.3.4-1/png/pngset.c ****    {
1367:fltk-1.3.4-1/png/pngset.c ****       new_list = png_voidcast(png_bytep, png_malloc(png_ptr,
1368:fltk-1.3.4-1/png/pngset.c ****           5 * (num_chunks + old_num_chunks)));
1369:fltk-1.3.4-1/png/pngset.c **** 
1370:fltk-1.3.4-1/png/pngset.c ****       if (old_num_chunks > 0)
1371:fltk-1.3.4-1/png/pngset.c ****          memcpy(new_list, png_ptr->chunk_list, 5*old_num_chunks);
1372:fltk-1.3.4-1/png/pngset.c ****    }
1373:fltk-1.3.4-1/png/pngset.c **** 
1374:fltk-1.3.4-1/png/pngset.c ****    else if (old_num_chunks > 0)
 4687              		.loc 1 1374 0
 4688 0087 4585ED   		testl	%r13d, %r13d
 4689 008a 0F849101 		je	.L432
 4689      0000
 4690              	.LVL463:
 4691              	.L411:
1375:fltk-1.3.4-1/png/pngset.c ****       new_list = png_ptr->chunk_list;
1376:fltk-1.3.4-1/png/pngset.c **** 
1377:fltk-1.3.4-1/png/pngset.c ****    else
1378:fltk-1.3.4-1/png/pngset.c ****       new_list = NULL;
1379:fltk-1.3.4-1/png/pngset.c **** 
1380:fltk-1.3.4-1/png/pngset.c ****    /* Add the new chunks together with each one's handling code.  If the chunk
1381:fltk-1.3.4-1/png/pngset.c ****     * already exists the code is updated, otherwise the chunk is added to the
1382:fltk-1.3.4-1/png/pngset.c ****     * end.  (In libpng 1.6.0 order no longer matters because this code enforces
1383:fltk-1.3.4-1/png/pngset.c ****     * the earlier convention that the last setting is the one that is used.)
1384:fltk-1.3.4-1/png/pngset.c ****     */
1385:fltk-1.3.4-1/png/pngset.c ****    if (new_list != NULL)
 4692              		.loc 1 1385 0
 4693 0090 4D85F6   		testq	%r14, %r14
 4694 0093 0F847202 		je	.L469
 4694      0000
 4695              	.LVL464:
 4696              	.LBB248:
1386:fltk-1.3.4-1/png/pngset.c ****    {
1387:fltk-1.3.4-1/png/pngset.c ****       png_const_bytep inlist;
1388:fltk-1.3.4-1/png/pngset.c ****       png_bytep outlist;
1389:fltk-1.3.4-1/png/pngset.c ****       unsigned int i;
1390:fltk-1.3.4-1/png/pngset.c **** 
1391:fltk-1.3.4-1/png/pngset.c ****       for (i=0; i<num_chunks; ++i)
 4697              		.loc 1 1391 0 discriminator 1
 4698 0099 85DB     		testl	%ebx, %ebx
 4699 009b 7470     		je	.L416
 4700              	.L412:
 4701 009d 8D049B   		leal	(%rbx,%rbx,4), %eax
 4702              	.LBE248:
1351:fltk-1.3.4-1/png/pngset.c **** 
 4703              		.loc 1 1351 0 discriminator 3
 4704 00a0 4531E4   		xorl	%r12d, %r12d
 4705 00a3 89442414 		movl	%eax, 20(%rsp)
 4706              	.LVL465:
 4707 00a7 660F1F84 		.p2align 4,,10
 4707      00000000 
 4707      00
 4708              		.p2align 3
 4709              	.L421:
 4710              	.LBB259:
1392:fltk-1.3.4-1/png/pngset.c ****       {
1393:fltk-1.3.4-1/png/pngset.c ****          old_num_chunks = add_one_chunk(new_list, old_num_chunks,
 4711              		.loc 1 1393 0 discriminator 3
 4712 00b0 4489E3   		movl	%r12d, %ebx
 4713 00b3 48035C24 		addq	8(%rsp), %rbx
 4713      08
 4714              	.LVL466:
 4715              	.LBB249:
 4716              	.LBB250:
1262:fltk-1.3.4-1/png/pngset.c ****    {
 4717              		.loc 1 1262 0 discriminator 3
 4718 00b8 4585ED   		testl	%r13d, %r13d
 4719 00bb 0F84E400 		je	.L435
 4719      0000
 4720 00c1 418D45FF 		leal	-1(%r13), %eax
1262:fltk-1.3.4-1/png/pngset.c ****    {
 4721              		.loc 1 1262 0 is_stmt 0
 4722 00c5 4D89F7   		movq	%r14, %r15
 4723 00c8 488D6C80 		leaq	5(%rax,%rax,4), %rbp
 4723      05
 4724 00cd 4C01F5   		addq	%r14, %rbp
 4725 00d0 EB13     		jmp	.L420
 4726              	.LVL467:
 4727              		.p2align 4,,10
 4728 00d2 660F1F44 		.p2align 3
 4728      0000
 4729              	.L418:
 4730 00d8 4983C705 		addq	$5, %r15
 4731              	.LVL468:
 4732 00dc 4939EF   		cmpq	%rbp, %r15
 4733 00df 0F84CB00 		je	.L417
 4733      0000
 4734              	.L420:
1264:fltk-1.3.4-1/png/pngset.c ****       {
 4735              		.loc 1 1264 0 is_stmt 1
 4736 00e5 BA040000 		movl	$4, %edx
 4736      00
 4737 00ea 4889DE   		movq	%rbx, %rsi
 4738 00ed 4C89FF   		movq	%r15, %rdi
 4739 00f0 E8000000 		call	memcmp
 4739      00
 4740              	.LVL469:
 4741 00f5 85C0     		testl	%eax, %eax
 4742 00f7 75DF     		jne	.L418
1266:fltk-1.3.4-1/png/pngset.c ****          return count;
 4743              		.loc 1 1266 0
 4744 00f9 0FB64424 		movzbl	16(%rsp), %eax
 4744      10
 4745 00fe 41884704 		movb	%al, 4(%r15)
 4746              	.LVL470:
 4747              	.L419:
 4748 0102 4183C405 		addl	$5, %r12d
 4749              	.LBE250:
 4750              	.LBE249:
1391:fltk-1.3.4-1/png/pngset.c ****       {
 4751              		.loc 1 1391 0
 4752 0106 44396424 		cmpl	%r12d, 20(%rsp)
 4752      14
 4753 010b 75A3     		jne	.L421
 4754              	.L416:
 4755              	.LVL471:
1394:fltk-1.3.4-1/png/pngset.c ****             chunk_list+5*i, keep);
1395:fltk-1.3.4-1/png/pngset.c ****       }
1396:fltk-1.3.4-1/png/pngset.c **** 
1397:fltk-1.3.4-1/png/pngset.c ****       /* Now remove any spurious 'default' entries. */
1398:fltk-1.3.4-1/png/pngset.c ****       num_chunks = 0;
1399:fltk-1.3.4-1/png/pngset.c ****       for (i=0, inlist=outlist=new_list; i<old_num_chunks; ++i, inlist += 5)
 4756              		.loc 1 1399 0 discriminator 1
 4757 010d 4585ED   		testl	%r13d, %r13d
 4758 0110 0F84D900 		je	.L427
 4758      0000
 4759              	.LVL472:
 4760              	.L413:
 4761 0116 418D45FF 		leal	-1(%r13), %eax
 4762              	.LBB255:
 4763              	.LBB253:
1262:fltk-1.3.4-1/png/pngset.c ****    {
 4764              		.loc 1 1262 0
 4765 011a 4C89F2   		movq	%r14, %rdx
 4766 011d 31C9     		xorl	%ecx, %ecx
 4767 011f 488D7480 		leaq	5(%rax,%rax,4), %rsi
 4767      05
 4768 0124 4C89F0   		movq	%r14, %rax
 4769 0127 4C01F6   		addq	%r14, %rsi
 4770              	.LVL473:
 4771 012a 660F1F44 		.p2align 4,,10
 4771      0000
 4772              		.p2align 3
 4773              	.L426:
 4774              	.LBE253:
 4775              	.LBE255:
1400:fltk-1.3.4-1/png/pngset.c ****       {
1401:fltk-1.3.4-1/png/pngset.c ****          if (inlist[4])
 4776              		.loc 1 1401 0
 4777 0130 80780400 		cmpb	$0, 4(%rax)
 4778 0134 7418     		je	.L424
1402:fltk-1.3.4-1/png/pngset.c ****          {
1403:fltk-1.3.4-1/png/pngset.c ****             if (outlist != inlist)
 4779              		.loc 1 1403 0
 4780 0136 4839D0   		cmpq	%rdx, %rax
 4781 0139 740C     		je	.L425
 4782              	.LVL474:
 4783              	.LBB256:
 4784              	.LBB257:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 4785              		.loc 2 53 0
 4786 013b 8B38     		movl	(%rax), %edi
 4787 013d 893A     		movl	%edi, (%rdx)
 4788 013f 0FB67804 		movzbl	4(%rax), %edi
 4789 0143 40887A04 		movb	%dil, 4(%rdx)
 4790              	.LVL475:
 4791              	.L425:
 4792              	.LBE257:
 4793              	.LBE256:
1404:fltk-1.3.4-1/png/pngset.c ****                memcpy(outlist, inlist, 5);
1405:fltk-1.3.4-1/png/pngset.c ****             outlist += 5;
 4794              		.loc 1 1405 0
 4795 0147 4883C205 		addq	$5, %rdx
 4796              	.LVL476:
1406:fltk-1.3.4-1/png/pngset.c ****             ++num_chunks;
 4797              		.loc 1 1406 0
 4798 014b 83C101   		addl	$1, %ecx
 4799              	.LVL477:
 4800              	.L424:
1399:fltk-1.3.4-1/png/pngset.c ****       {
 4801              		.loc 1 1399 0 discriminator 2
 4802 014e 4883C005 		addq	$5, %rax
 4803              	.LVL478:
 4804 0152 4839F0   		cmpq	%rsi, %rax
 4805 0155 75D9     		jne	.L426
1407:fltk-1.3.4-1/png/pngset.c ****          }
1408:fltk-1.3.4-1/png/pngset.c ****       }
1409:fltk-1.3.4-1/png/pngset.c **** 
1410:fltk-1.3.4-1/png/pngset.c ****       /* This means the application has removed all the specialized handling. */
1411:fltk-1.3.4-1/png/pngset.c ****       if (num_chunks == 0)
 4806              		.loc 1 1411 0
 4807 0157 85C9     		testl	%ecx, %ecx
 4808 0159 0F849000 		je	.L427
 4808      0000
 4809 015f 488B4424 		movq	24(%rsp), %rax
 4809      18
 4810              	.LVL479:
 4811 0164 488BB008 		movq	1032(%rax), %rsi
 4811      040000
 4812              	.LVL480:
 4813              	.L414:
 4814              	.LBE259:
1412:fltk-1.3.4-1/png/pngset.c ****       {
1413:fltk-1.3.4-1/png/pngset.c ****          if (png_ptr->chunk_list != new_list)
1414:fltk-1.3.4-1/png/pngset.c ****             png_free(png_ptr, new_list);
1415:fltk-1.3.4-1/png/pngset.c **** 
1416:fltk-1.3.4-1/png/pngset.c ****          new_list = NULL;
1417:fltk-1.3.4-1/png/pngset.c ****       }
1418:fltk-1.3.4-1/png/pngset.c ****    }
1419:fltk-1.3.4-1/png/pngset.c **** 
1420:fltk-1.3.4-1/png/pngset.c ****    else
1421:fltk-1.3.4-1/png/pngset.c ****       num_chunks = 0;
1422:fltk-1.3.4-1/png/pngset.c **** 
1423:fltk-1.3.4-1/png/pngset.c ****    png_ptr->num_chunk_list = num_chunks;
 4815              		.loc 1 1423 0
 4816 016b 488B4424 		movq	24(%rsp), %rax
 4816      18
1424:fltk-1.3.4-1/png/pngset.c **** 
1425:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr->chunk_list != new_list)
 4817              		.loc 1 1425 0
 4818 0170 4939F6   		cmpq	%rsi, %r14
1423:fltk-1.3.4-1/png/pngset.c **** 
 4819              		.loc 1 1423 0
 4820 0173 89880404 		movl	%ecx, 1028(%rax)
 4820      0000
 4821              		.loc 1 1425 0
 4822 0179 741B     		je	.L399
 4823              	.LVL481:
 4824              	.L433:
1426:fltk-1.3.4-1/png/pngset.c ****    {
1427:fltk-1.3.4-1/png/pngset.c ****       if (png_ptr->chunk_list != NULL)
 4825              		.loc 1 1427 0
 4826 017b 4885F6   		testq	%rsi, %rsi
 4827 017e 740A     		je	.L428
1428:fltk-1.3.4-1/png/pngset.c ****          png_free(png_ptr, png_ptr->chunk_list);
 4828              		.loc 1 1428 0
 4829 0180 488B7C24 		movq	24(%rsp), %rdi
 4829      18
 4830 0185 E8000000 		call	png_free
 4830      00
 4831              	.LVL482:
 4832              	.L428:
1429:fltk-1.3.4-1/png/pngset.c **** 
1430:fltk-1.3.4-1/png/pngset.c ****       png_ptr->chunk_list = new_list;
 4833              		.loc 1 1430 0
 4834 018a 488B4424 		movq	24(%rsp), %rax
 4834      18
 4835 018f 4C89B008 		movq	%r14, 1032(%rax)
 4835      040000
 4836              	.LVL483:
 4837              	.L399:
1431:fltk-1.3.4-1/png/pngset.c ****    }
1432:fltk-1.3.4-1/png/pngset.c **** }
 4838              		.loc 1 1432 0
 4839 0196 4883C428 		addq	$40, %rsp
 4840              		.cfi_remember_state
 4841              		.cfi_def_cfa_offset 56
 4842 019a 5B       		popq	%rbx
 4843              		.cfi_def_cfa_offset 48
 4844 019b 5D       		popq	%rbp
 4845              		.cfi_def_cfa_offset 40
 4846 019c 415C     		popq	%r12
 4847              		.cfi_def_cfa_offset 32
 4848 019e 415D     		popq	%r13
 4849              		.cfi_def_cfa_offset 24
 4850 01a0 415E     		popq	%r14
 4851              		.cfi_def_cfa_offset 16
 4852 01a2 415F     		popq	%r15
 4853              		.cfi_def_cfa_offset 8
 4854 01a4 C3       		ret
 4855              	.LVL484:
 4856              	.L435:
 4857              		.cfi_restore_state
 4858              	.LBB260:
 4859              	.LBB258:
 4860              	.LBB254:
1262:fltk-1.3.4-1/png/pngset.c ****    {
 4861              		.loc 1 1262 0
 4862 01a5 4C89F5   		movq	%r14, %rbp
 4863              	.LVL485:
 4864 01a8 0F1F8400 		.p2align 4,,10
 4864      00000000 
 4865              		.p2align 3
 4866              	.L417:
1271:fltk-1.3.4-1/png/pngset.c ****    {
 4867              		.loc 1 1271 0
 4868 01b0 8B542410 		movl	16(%rsp), %edx
 4869 01b4 85D2     		testl	%edx, %edx
 4870 01b6 0F8446FF 		je	.L419
 4870      FFFF
 4871 01bc 8B03     		movl	(%rbx), %eax
1273:fltk-1.3.4-1/png/pngset.c ****       memcpy(list, add, 4);
 4872              		.loc 1 1273 0
 4873 01be 4183C501 		addl	$1, %r13d
 4874              	.LVL486:
 4875              	.LBB251:
 4876              	.LBB252:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 4877              		.loc 2 53 0
 4878 01c2 894500   		movl	%eax, 0(%rbp)
 4879              	.LVL487:
 4880              	.LBE252:
 4881              	.LBE251:
1275:fltk-1.3.4-1/png/pngset.c ****    }
 4882              		.loc 1 1275 0
 4883 01c5 0FB64424 		movzbl	16(%rsp), %eax
 4883      10
 4884 01ca 884504   		movb	%al, 4(%rbp)
 4885 01cd E930FFFF 		jmp	.L419
 4885      FF
 4886              	.LVL488:
 4887              	.L467:
 4888              	.LBE254:
 4889              	.LBE258:
 4890              	.LBE260:
1357:fltk-1.3.4-1/png/pngset.c ****       return;
 4891              		.loc 1 1357 0
 4892 01d2 BE000000 		movl	$.LC76, %esi
 4892      00
 4893              	.LVL489:
 4894              	.L462:
 4895 01d7 488B7C24 		movq	24(%rsp), %rdi
 4895      18
 4896              	.LVL490:
 4897              	.L461:
 4898              		.loc 1 1432 0
 4899 01dc 4883C428 		addq	$40, %rsp
 4900              		.cfi_remember_state
 4901              		.cfi_def_cfa_offset 56
 4902 01e0 5B       		popq	%rbx
 4903              		.cfi_def_cfa_offset 48
 4904 01e1 5D       		popq	%rbp
 4905              		.cfi_def_cfa_offset 40
 4906 01e2 415C     		popq	%r12
 4907              		.cfi_def_cfa_offset 32
 4908 01e4 415D     		popq	%r13
 4909              		.cfi_def_cfa_offset 24
 4910 01e6 415E     		popq	%r14
 4911              		.cfi_def_cfa_offset 16
 4912 01e8 415F     		popq	%r15
 4913              		.cfi_def_cfa_offset 8
1357:fltk-1.3.4-1/png/pngset.c ****       return;
 4914              		.loc 1 1357 0
 4915 01ea E9000000 		jmp	png_app_error
 4915      00
 4916              	.LVL491:
 4917              	.L427:
 4918              		.cfi_restore_state
 4919              	.LBB261:
1413:fltk-1.3.4-1/png/pngset.c ****             png_free(png_ptr, new_list);
 4920              		.loc 1 1413 0
 4921 01ef 488B4424 		movq	24(%rsp), %rax
 4921      18
 4922 01f4 488BB008 		movq	1032(%rax), %rsi
 4922      040000
 4923 01fb 4C39F6   		cmpq	%r14, %rsi
 4924 01fe 7437     		je	.L470
1414:fltk-1.3.4-1/png/pngset.c **** 
 4925              		.loc 1 1414 0
 4926 0200 488B5C24 		movq	24(%rsp), %rbx
 4926      18
 4927 0205 4C89F6   		movq	%r14, %rsi
1416:fltk-1.3.4-1/png/pngset.c ****       }
 4928              		.loc 1 1416 0
 4929 0208 4531F6   		xorl	%r14d, %r14d
 4930              	.LVL492:
1414:fltk-1.3.4-1/png/pngset.c **** 
 4931              		.loc 1 1414 0
 4932 020b 4889DF   		movq	%rbx, %rdi
 4933 020e E8000000 		call	png_free
 4933      00
 4934              	.LVL493:
 4935 0213 488BB308 		movq	1032(%rbx), %rsi
 4935      040000
 4936 021a 31C9     		xorl	%ecx, %ecx
 4937 021c E94AFFFF 		jmp	.L414
 4937      FF
 4938              	.LVL494:
 4939              	.L432:
 4940 0221 488B4424 		movq	24(%rsp), %rax
 4940      18
 4941              	.LBE261:
1421:fltk-1.3.4-1/png/pngset.c **** 
 4942              		.loc 1 1421 0
 4943 0226 31C9     		xorl	%ecx, %ecx
 4944 0228 4531F6   		xorl	%r14d, %r14d
 4945 022b 488BB008 		movq	1032(%rax), %rsi
 4945      040000
 4946 0232 E934FFFF 		jmp	.L414
 4946      FF
 4947              	.LVL495:
 4948              	.L470:
1423:fltk-1.3.4-1/png/pngset.c **** 
 4949              		.loc 1 1423 0
 4950 0237 488B4424 		movq	24(%rsp), %rax
 4950      18
 4951              	.LBB262:
1416:fltk-1.3.4-1/png/pngset.c ****       }
 4952              		.loc 1 1416 0
 4953 023c 4531F6   		xorl	%r14d, %r14d
 4954              	.LBE262:
1423:fltk-1.3.4-1/png/pngset.c **** 
 4955              		.loc 1 1423 0
 4956 023f C7800404 		movl	$0, 1028(%rax)
 4956      00000000 
 4956      0000
 4957 0249 E92DFFFF 		jmp	.L433
 4957      FF
 4958              	.LVL496:
 4959              	.L403:
1299:fltk-1.3.4-1/png/pngset.c **** 
 4960              		.loc 1 1299 0
 4961 024e 488B4424 		movq	24(%rsp), %rax
 4961      18
 4962              	.LVL497:
 4963 0253 8B4C2410 		movl	16(%rsp), %ecx
 4964              	.LVL498:
 4965 0257 89880004 		movl	%ecx, 1024(%rax)
 4965      0000
1302:fltk-1.3.4-1/png/pngset.c ****         return;
 4966              		.loc 1 1302 0
 4967 025d 0F8433FF 		je	.L399
 4967      FFFF
 4968              	.LVL499:
1349:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr->chunk_list == NULL)
 4969              		.loc 1 1349 0
 4970 0263 488B4424 		movq	24(%rsp), %rax
 4970      18
1350:fltk-1.3.4-1/png/pngset.c ****       old_num_chunks = 0;
 4971              		.loc 1 1350 0
 4972 0268 4C8BB008 		movq	1032(%rax), %r14
 4972      040000
1349:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr->chunk_list == NULL)
 4973              		.loc 1 1349 0
 4974 026f 448BA804 		movl	1028(%rax), %r13d
 4974      040000
 4975              	.LVL500:
1350:fltk-1.3.4-1/png/pngset.c ****       old_num_chunks = 0;
 4976              		.loc 1 1350 0
 4977 0276 4D85F6   		testq	%r14, %r14
 4978 0279 7452     		je	.L429
 4979              	.LBB263:
1332:fltk-1.3.4-1/png/pngset.c ****    }
 4980              		.loc 1 1332 0
 4981 027b BB110000 		movl	$17, %ebx
 4981      00
1331:fltk-1.3.4-1/png/pngset.c ****       num_chunks = (unsigned int)/*SAFE*/(sizeof chunks_to_ignore)/5U;
 4982              		.loc 1 1331 0
 4983 0280 48C74424 		movq	$chunks_to_ignore.7001, 8(%rsp)
 4983      08000000 
 4983      00
 4984 0289 E9DDFDFF 		jmp	.L408
 4984      FF
 4985              	.LVL501:
 4986              	.L468:
 4987              	.LBE263:
1367:fltk-1.3.4-1/png/pngset.c ****           5 * (num_chunks + old_num_chunks)));
 4988              		.loc 1 1367 0
 4989 028e 488B7C24 		movq	24(%rsp), %rdi
 4989      18
 4990              	.LVL502:
 4991 0293 8D3480   		leal	(%rax,%rax,4), %esi
 4992 0296 E8000000 		call	png_malloc
 4992      00
 4993              	.LVL503:
1370:fltk-1.3.4-1/png/pngset.c ****          memcpy(new_list, png_ptr->chunk_list, 5*old_num_chunks);
 4994              		.loc 1 1370 0
 4995 029b 4585ED   		testl	%r13d, %r13d
1367:fltk-1.3.4-1/png/pngset.c ****           5 * (num_chunks + old_num_chunks)));
 4996              		.loc 1 1367 0
 4997 029e 4989C6   		movq	%rax, %r14
 4998              	.LVL504:
1370:fltk-1.3.4-1/png/pngset.c ****          memcpy(new_list, png_ptr->chunk_list, 5*old_num_chunks);
 4999              		.loc 1 1370 0
 5000 02a1 0F84E9FD 		je	.L411
 5000      FFFF
 5001              	.LVL505:
 5002              	.LBB264:
 5003              	.LBB265:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 5004              		.loc 2 53 0
 5005 02a7 488B4424 		movq	24(%rsp), %rax
 5005      18
 5006              	.LVL506:
 5007 02ac 438D54AD 		leal	0(%r13,%r13,4), %edx
 5007      00
 5008 02b1 4C89F7   		movq	%r14, %rdi
 5009 02b4 488BB008 		movq	1032(%rax), %rsi
 5009      040000
 5010 02bb E8000000 		call	memcpy
 5010      00
 5011              	.LVL507:
 5012              	.LBE265:
 5013              	.LBE264:
 5014              	.LBB266:
1391:fltk-1.3.4-1/png/pngset.c ****       {
 5015              		.loc 1 1391 0
 5016 02c0 85DB     		testl	%ebx, %ebx
 5017 02c2 0F85D5FD 		jne	.L412
 5017      FFFF
 5018 02c8 E949FEFF 		jmp	.L413
 5018      FF
 5019              	.LVL508:
 5020              	.L429:
 5021              	.LBE266:
1365:fltk-1.3.4-1/png/pngset.c ****    {
 5022              		.loc 1 1365 0
 5023 02cd 8B442410 		movl	16(%rsp), %eax
 5024 02d1 85C0     		testl	%eax, %eax
 5025 02d3 0F8448FF 		je	.L432
 5025      FFFF
1367:fltk-1.3.4-1/png/pngset.c ****           5 * (num_chunks + old_num_chunks)));
 5026              		.loc 1 1367 0
 5027 02d9 488B7C24 		movq	24(%rsp), %rdi
 5027      18
 5028              	.LVL509:
 5029 02de BE550000 		movl	$85, %esi
 5029      00
 5030              	.LBB267:
1332:fltk-1.3.4-1/png/pngset.c ****    }
 5031              		.loc 1 1332 0
 5032 02e3 BB110000 		movl	$17, %ebx
 5032      00
 5033              	.LBE267:
1351:fltk-1.3.4-1/png/pngset.c **** 
 5034              		.loc 1 1351 0
 5035 02e8 4531ED   		xorl	%r13d, %r13d
1367:fltk-1.3.4-1/png/pngset.c ****           5 * (num_chunks + old_num_chunks)));
 5036              		.loc 1 1367 0
 5037 02eb E8000000 		call	png_malloc
 5037      00
 5038              	.LVL510:
 5039              	.LBB268:
1331:fltk-1.3.4-1/png/pngset.c ****       num_chunks = (unsigned int)/*SAFE*/(sizeof chunks_to_ignore)/5U;
 5040              		.loc 1 1331 0
 5041 02f0 48C74424 		movq	$chunks_to_ignore.7001, 8(%rsp)
 5041      08000000 
 5041      00
 5042              	.LBE268:
1367:fltk-1.3.4-1/png/pngset.c ****           5 * (num_chunks + old_num_chunks)));
 5043              		.loc 1 1367 0
 5044 02f9 4989C6   		movq	%rax, %r14
 5045              	.LVL511:
 5046 02fc E98FFDFF 		jmp	.L411
 5046      FF
 5047              	.LVL512:
 5048              	.L466:
1342:fltk-1.3.4-1/png/pngset.c ****          return;
 5049              		.loc 1 1342 0
 5050 0301 BE000000 		movl	$.LC75, %esi
 5050      00
 5051 0306 E9CCFEFF 		jmp	.L462
 5051      FF
 5052              	.LVL513:
 5053              	.L469:
 5054 030b 488B4424 		movq	24(%rsp), %rax
 5054      18
1421:fltk-1.3.4-1/png/pngset.c **** 
 5055              		.loc 1 1421 0
 5056 0310 31C9     		xorl	%ecx, %ecx
 5057 0312 488BB008 		movq	1032(%rax), %rsi
 5057      040000
 5058 0319 E94DFEFF 		jmp	.L414
 5058      FF
 5059              		.cfi_endproc
 5060              	.LFE86:
 5062              		.section	.text.unlikely.png_set_keep_unknown_chunks
 5063              	.LCOLDE77:
 5064              		.section	.text.png_set_keep_unknown_chunks
 5065              	.LHOTE77:
 5066              		.section	.text.unlikely.png_set_read_user_chunk_fn,"ax",@progbits
 5067              	.LCOLDB78:
 5068              		.section	.text.png_set_read_user_chunk_fn,"ax",@progbits
 5069              	.LHOTB78:
 5070              		.p2align 4,,15
 5071              		.globl	png_set_read_user_chunk_fn
 5073              	png_set_read_user_chunk_fn:
 5074              	.LFB87:
1433:fltk-1.3.4-1/png/pngset.c **** #endif
1434:fltk-1.3.4-1/png/pngset.c **** 
1435:fltk-1.3.4-1/png/pngset.c **** #ifdef PNG_READ_USER_CHUNKS_SUPPORTED
1436:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
1437:fltk-1.3.4-1/png/pngset.c **** png_set_read_user_chunk_fn(png_structrp png_ptr, png_voidp user_chunk_ptr,
1438:fltk-1.3.4-1/png/pngset.c ****     png_user_chunk_ptr read_user_chunk_fn)
1439:fltk-1.3.4-1/png/pngset.c **** {
 5075              		.loc 1 1439 0
 5076              		.cfi_startproc
 5077              	.LVL514:
1440:fltk-1.3.4-1/png/pngset.c ****    png_debug(1, "in png_set_read_user_chunk_fn");
1441:fltk-1.3.4-1/png/pngset.c **** 
1442:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr == NULL)
 5078              		.loc 1 1442 0
 5079 0000 4885FF   		testq	%rdi, %rdi
 5080 0003 740E     		je	.L471
1443:fltk-1.3.4-1/png/pngset.c ****       return;
1444:fltk-1.3.4-1/png/pngset.c **** 
1445:fltk-1.3.4-1/png/pngset.c ****    png_ptr->read_user_chunk_fn = read_user_chunk_fn;
 5081              		.loc 1 1445 0
 5082 0005 488997F8 		movq	%rdx, 1016(%rdi)
 5082      030000
1446:fltk-1.3.4-1/png/pngset.c ****    png_ptr->user_chunk_ptr = user_chunk_ptr;
 5083              		.loc 1 1446 0
 5084 000c 4889B7F0 		movq	%rsi, 1008(%rdi)
 5084      030000
 5085              	.L471:
 5086 0013 F3C3     		rep ret
 5087              		.cfi_endproc
 5088              	.LFE87:
 5090              		.section	.text.unlikely.png_set_read_user_chunk_fn
 5091              	.LCOLDE78:
 5092              		.section	.text.png_set_read_user_chunk_fn
 5093              	.LHOTE78:
 5094              		.section	.text.unlikely.png_set_rows,"ax",@progbits
 5095              	.LCOLDB79:
 5096              		.section	.text.png_set_rows,"ax",@progbits
 5097              	.LHOTB79:
 5098              		.p2align 4,,15
 5099              		.globl	png_set_rows
 5101              	png_set_rows:
 5102              	.LFB88:
1447:fltk-1.3.4-1/png/pngset.c **** }
1448:fltk-1.3.4-1/png/pngset.c **** #endif
1449:fltk-1.3.4-1/png/pngset.c **** 
1450:fltk-1.3.4-1/png/pngset.c **** #ifdef PNG_INFO_IMAGE_SUPPORTED
1451:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
1452:fltk-1.3.4-1/png/pngset.c **** png_set_rows(png_const_structrp png_ptr, png_inforp info_ptr,
1453:fltk-1.3.4-1/png/pngset.c ****     png_bytepp row_pointers)
1454:fltk-1.3.4-1/png/pngset.c **** {
 5103              		.loc 1 1454 0
 5104              		.cfi_startproc
 5105              	.LVL515:
1455:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "rows");
1456:fltk-1.3.4-1/png/pngset.c **** 
1457:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr == NULL || info_ptr == NULL)
 5106              		.loc 1 1457 0
 5107 0000 4885FF   		testq	%rdi, %rdi
 5108 0003 7447     		je	.L489
 5109 0005 4885F6   		testq	%rsi, %rsi
 5110 0008 7442     		je	.L489
1454:fltk-1.3.4-1/png/pngset.c ****    png_debug1(1, "in %s storage function", "rows");
 5111              		.loc 1 1454 0
 5112 000a 55       		pushq	%rbp
 5113              		.cfi_def_cfa_offset 16
 5114              		.cfi_offset 6, -16
 5115 000b 53       		pushq	%rbx
 5116              		.cfi_def_cfa_offset 24
 5117              		.cfi_offset 3, -24
 5118 000c 4889D5   		movq	%rdx, %rbp
 5119 000f 4889F3   		movq	%rsi, %rbx
 5120 0012 4883EC08 		subq	$8, %rsp
 5121              		.cfi_def_cfa_offset 32
1458:fltk-1.3.4-1/png/pngset.c ****       return;
1459:fltk-1.3.4-1/png/pngset.c **** 
1460:fltk-1.3.4-1/png/pngset.c ****    if (info_ptr->row_pointers != NULL &&
 5122              		.loc 1 1460 0
 5123 0016 488B8650 		movq	336(%rsi), %rax
 5123      010000
 5124 001d 4885C0   		testq	%rax, %rax
 5125 0020 7411     		je	.L480
 5126              		.loc 1 1460 0 is_stmt 0 discriminator 1
 5127 0022 4839D0   		cmpq	%rdx, %rax
 5128 0025 7418     		je	.L482
1461:fltk-1.3.4-1/png/pngset.c ****        (info_ptr->row_pointers != row_pointers))
1462:fltk-1.3.4-1/png/pngset.c ****       png_free_data(png_ptr, info_ptr, PNG_FREE_ROWS, 0);
 5129              		.loc 1 1462 0 is_stmt 1
 5130 0027 31C9     		xorl	%ecx, %ecx
 5131 0029 BA400000 		movl	$64, %edx
 5131      00
 5132              	.LVL516:
 5133 002e E8000000 		call	png_free_data
 5133      00
 5134              	.LVL517:
 5135              	.L480:
1463:fltk-1.3.4-1/png/pngset.c **** 
1464:fltk-1.3.4-1/png/pngset.c ****    info_ptr->row_pointers = row_pointers;
1465:fltk-1.3.4-1/png/pngset.c **** 
1466:fltk-1.3.4-1/png/pngset.c ****    if (row_pointers != NULL)
 5136              		.loc 1 1466 0
 5137 0033 4885ED   		testq	%rbp, %rbp
1464:fltk-1.3.4-1/png/pngset.c **** 
 5138              		.loc 1 1464 0
 5139 0036 4889AB50 		movq	%rbp, 336(%rbx)
 5139      010000
 5140              		.loc 1 1466 0
 5141 003d 7407     		je	.L476
 5142              	.L482:
1467:fltk-1.3.4-1/png/pngset.c ****       info_ptr->valid |= PNG_INFO_IDAT;
 5143              		.loc 1 1467 0
 5144 003f 814B0800 		orl	$32768, 8(%rbx)
 5144      800000
 5145              	.L476:
1468:fltk-1.3.4-1/png/pngset.c **** }
 5146              		.loc 1 1468 0
 5147 0046 4883C408 		addq	$8, %rsp
 5148              		.cfi_def_cfa_offset 24
 5149 004a 5B       		popq	%rbx
 5150              		.cfi_restore 3
 5151              		.cfi_def_cfa_offset 16
 5152              	.LVL518:
 5153 004b 5D       		popq	%rbp
 5154              		.cfi_restore 6
 5155              		.cfi_def_cfa_offset 8
 5156              	.LVL519:
 5157              	.L489:
 5158 004c F3C3     		rep ret
 5159              		.cfi_endproc
 5160              	.LFE88:
 5162              		.section	.text.unlikely.png_set_rows
 5163              	.LCOLDE79:
 5164              		.section	.text.png_set_rows
 5165              	.LHOTE79:
 5166              		.section	.rodata.str1.8
 5167 036d 000000   		.align 8
 5168              	.LC80:
 5169 0370 696E7661 		.string	"invalid compression buffer size"
 5169      6C696420 
 5169      636F6D70 
 5169      72657373 
 5169      696F6E20 
 5170              		.align 8
 5171              	.LC81:
 5172 0390 436F6D70 		.string	"Compression buffer size cannot be changed because it is in use"
 5172      72657373 
 5172      696F6E20 
 5172      62756666 
 5172      65722073 
 5173 03cf 00       		.align 8
 5174              	.LC82:
 5175 03d0 436F6D70 		.string	"Compression buffer size cannot be reduced below 6"
 5175      72657373 
 5175      696F6E20 
 5175      62756666 
 5175      65722073 
 5176              		.section	.text.unlikely.png_set_compression_buffer_size,"ax",@progbits
 5177              	.LCOLDB83:
 5178              		.section	.text.png_set_compression_buffer_size,"ax",@progbits
 5179              	.LHOTB83:
 5180              		.p2align 4,,15
 5181              		.globl	png_set_compression_buffer_size
 5183              	png_set_compression_buffer_size:
 5184              	.LFB89:
1469:fltk-1.3.4-1/png/pngset.c **** #endif
1470:fltk-1.3.4-1/png/pngset.c **** 
1471:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
1472:fltk-1.3.4-1/png/pngset.c **** png_set_compression_buffer_size(png_structrp png_ptr, png_size_t size)
1473:fltk-1.3.4-1/png/pngset.c **** {
 5185              		.loc 1 1473 0
 5186              		.cfi_startproc
 5187              	.LVL520:
1474:fltk-1.3.4-1/png/pngset.c ****     if (png_ptr == NULL)
 5188              		.loc 1 1474 0
 5189 0000 4885FF   		testq	%rdi, %rdi
 5190 0003 7459     		je	.L501
1473:fltk-1.3.4-1/png/pngset.c ****     if (png_ptr == NULL)
 5191              		.loc 1 1473 0
 5192 0005 55       		pushq	%rbp
 5193              		.cfi_def_cfa_offset 16
 5194              		.cfi_offset 6, -16
1475:fltk-1.3.4-1/png/pngset.c ****        return;
1476:fltk-1.3.4-1/png/pngset.c **** 
1477:fltk-1.3.4-1/png/pngset.c ****     if (size == 0 || size > PNG_UINT_31_MAX)
 5195              		.loc 1 1477 0
 5196 0006 488D46FF 		leaq	-1(%rsi), %rax
1473:fltk-1.3.4-1/png/pngset.c ****     if (png_ptr == NULL)
 5197              		.loc 1 1473 0
 5198 000a 53       		pushq	%rbx
 5199              		.cfi_def_cfa_offset 24
 5200              		.cfi_offset 3, -24
 5201 000b 4889F5   		movq	%rsi, %rbp
 5202 000e 4889FB   		movq	%rdi, %rbx
 5203 0011 4883EC08 		subq	$8, %rsp
 5204              		.cfi_def_cfa_offset 32
 5205              		.loc 1 1477 0
 5206 0015 483DFEFF 		cmpq	$2147483646, %rax
 5206      FF7F
 5207 001b 7766     		ja	.L503
1478:fltk-1.3.4-1/png/pngset.c ****        png_error(png_ptr, "invalid compression buffer size");
1479:fltk-1.3.4-1/png/pngset.c **** 
1480:fltk-1.3.4-1/png/pngset.c **** #  ifdef PNG_SEQUENTIAL_READ_SUPPORTED
1481:fltk-1.3.4-1/png/pngset.c ****       if ((png_ptr->mode & PNG_IS_READ_STRUCT) != 0)
 5208              		.loc 1 1481 0
 5209 001d F6872D01 		testb	$-128, 301(%rdi)
 5209      000080
 5210 0024 753A     		jne	.L504
1482:fltk-1.3.4-1/png/pngset.c ****       {
1483:fltk-1.3.4-1/png/pngset.c ****          png_ptr->IDAT_read_size = (png_uint_32)size; /* checked above */
1484:fltk-1.3.4-1/png/pngset.c ****          return;
1485:fltk-1.3.4-1/png/pngset.c ****       }
1486:fltk-1.3.4-1/png/pngset.c **** #  endif
1487:fltk-1.3.4-1/png/pngset.c **** 
1488:fltk-1.3.4-1/png/pngset.c **** #  ifdef PNG_WRITE_SUPPORTED
1489:fltk-1.3.4-1/png/pngset.c ****       if ((png_ptr->mode & PNG_IS_READ_STRUCT) == 0)
1490:fltk-1.3.4-1/png/pngset.c ****       {
1491:fltk-1.3.4-1/png/pngset.c ****          if (png_ptr->zowner != 0)
 5211              		.loc 1 1491 0
 5212 0026 8B873801 		movl	312(%rdi), %eax
 5212      0000
1492:fltk-1.3.4-1/png/pngset.c ****          {
1493:fltk-1.3.4-1/png/pngset.c ****             png_warning(png_ptr,
 5213              		.loc 1 1493 0
 5214 002c BE000000 		movl	$.LC81, %esi
 5214      00
 5215              	.LVL521:
1491:fltk-1.3.4-1/png/pngset.c ****          {
 5216              		.loc 1 1491 0
 5217 0031 85C0     		testl	%eax, %eax
 5218 0033 7540     		jne	.L502
1494:fltk-1.3.4-1/png/pngset.c ****               "Compression buffer size cannot be changed because it is in use");
1495:fltk-1.3.4-1/png/pngset.c ****             return;
1496:fltk-1.3.4-1/png/pngset.c ****          }
1497:fltk-1.3.4-1/png/pngset.c **** 
1498:fltk-1.3.4-1/png/pngset.c ****          if (size > ZLIB_IO_MAX)
1499:fltk-1.3.4-1/png/pngset.c ****          {
1500:fltk-1.3.4-1/png/pngset.c ****             png_warning(png_ptr,
1501:fltk-1.3.4-1/png/pngset.c ****                "Compression buffer size limited to system maximum");
1502:fltk-1.3.4-1/png/pngset.c ****             size = ZLIB_IO_MAX; /* must fit */
1503:fltk-1.3.4-1/png/pngset.c ****          }
1504:fltk-1.3.4-1/png/pngset.c **** 
1505:fltk-1.3.4-1/png/pngset.c ****          else if (size < 6)
 5219              		.loc 1 1505 0
 5220 0035 4883FD05 		cmpq	$5, %rbp
 5221 0039 7635     		jbe	.L505
1506:fltk-1.3.4-1/png/pngset.c ****          {
1507:fltk-1.3.4-1/png/pngset.c ****             /* Deflate will potentially go into an infinite loop on a SYNC_FLUSH
1508:fltk-1.3.4-1/png/pngset.c ****              * if this is permitted.
1509:fltk-1.3.4-1/png/pngset.c ****              */
1510:fltk-1.3.4-1/png/pngset.c ****             png_warning(png_ptr,
1511:fltk-1.3.4-1/png/pngset.c ****                "Compression buffer size cannot be reduced below 6");
1512:fltk-1.3.4-1/png/pngset.c ****             return;
1513:fltk-1.3.4-1/png/pngset.c ****          }
1514:fltk-1.3.4-1/png/pngset.c **** 
1515:fltk-1.3.4-1/png/pngset.c ****          if (png_ptr->zbuffer_size != size)
 5222              		.loc 1 1515 0
 5223 003b 8B87B801 		movl	440(%rdi), %eax
 5223      0000
 5224 0041 4839C5   		cmpq	%rax, %rbp
 5225 0044 7420     		je	.L490
1516:fltk-1.3.4-1/png/pngset.c ****          {
1517:fltk-1.3.4-1/png/pngset.c ****             png_free_buffer_list(png_ptr, &png_ptr->zbuffer_list);
 5226              		.loc 1 1517 0
 5227 0046 488DB7B0 		leaq	432(%rdi), %rsi
 5227      010000
 5228 004d E8000000 		call	png_free_buffer_list
 5228      00
 5229              	.LVL522:
1518:fltk-1.3.4-1/png/pngset.c ****             png_ptr->zbuffer_size = (uInt)size;
 5230              		.loc 1 1518 0
 5231 0052 89ABB801 		movl	%ebp, 440(%rbx)
 5231      0000
1519:fltk-1.3.4-1/png/pngset.c ****          }
1520:fltk-1.3.4-1/png/pngset.c ****       }
1521:fltk-1.3.4-1/png/pngset.c **** #  endif
1522:fltk-1.3.4-1/png/pngset.c **** }
 5232              		.loc 1 1522 0
 5233 0058 4883C408 		addq	$8, %rsp
 5234              		.cfi_def_cfa_offset 24
 5235 005c 5B       		popq	%rbx
 5236              		.cfi_restore 3
 5237              		.cfi_def_cfa_offset 16
 5238              	.LVL523:
 5239 005d 5D       		popq	%rbp
 5240              		.cfi_restore 6
 5241              		.cfi_def_cfa_offset 8
 5242              	.LVL524:
 5243              	.L501:
 5244 005e F3C3     		rep ret
 5245              	.LVL525:
 5246              		.p2align 4,,10
 5247              		.p2align 3
 5248              	.L504:
 5249              		.cfi_def_cfa_offset 32
 5250              		.cfi_offset 3, -24
 5251              		.cfi_offset 6, -16
1483:fltk-1.3.4-1/png/pngset.c ****          return;
 5252              		.loc 1 1483 0
 5253 0060 89B3A804 		movl	%esi, 1192(%rbx)
 5253      0000
 5254              	.LVL526:
 5255              	.L490:
 5256              		.loc 1 1522 0
 5257 0066 4883C408 		addq	$8, %rsp
 5258              		.cfi_remember_state
 5259              		.cfi_def_cfa_offset 24
 5260 006a 5B       		popq	%rbx
 5261              		.cfi_restore 3
 5262              		.cfi_def_cfa_offset 16
 5263              	.LVL527:
 5264 006b 5D       		popq	%rbp
 5265              		.cfi_restore 6
 5266              		.cfi_def_cfa_offset 8
 5267              	.LVL528:
 5268 006c C3       		ret
 5269              	.LVL529:
 5270 006d 0F1F00   		.p2align 4,,10
 5271              		.p2align 3
 5272              	.L505:
 5273              		.cfi_restore_state
1510:fltk-1.3.4-1/png/pngset.c ****                "Compression buffer size cannot be reduced below 6");
 5274              		.loc 1 1510 0
 5275 0070 BE000000 		movl	$.LC82, %esi
 5275      00
 5276              	.L502:
 5277              		.loc 1 1522 0
 5278 0075 4883C408 		addq	$8, %rsp
 5279              		.cfi_remember_state
 5280              		.cfi_def_cfa_offset 24
1510:fltk-1.3.4-1/png/pngset.c ****                "Compression buffer size cannot be reduced below 6");
 5281              		.loc 1 1510 0
 5282 0079 4889DF   		movq	%rbx, %rdi
 5283              		.loc 1 1522 0
 5284 007c 5B       		popq	%rbx
 5285              		.cfi_restore 3
 5286              		.cfi_def_cfa_offset 16
 5287              	.LVL530:
 5288 007d 5D       		popq	%rbp
 5289              		.cfi_restore 6
 5290              		.cfi_def_cfa_offset 8
 5291              	.LVL531:
1510:fltk-1.3.4-1/png/pngset.c ****                "Compression buffer size cannot be reduced below 6");
 5292              		.loc 1 1510 0
 5293 007e E9000000 		jmp	png_warning
 5293      00
 5294              	.LVL532:
 5295              	.L503:
 5296              		.cfi_restore_state
1478:fltk-1.3.4-1/png/pngset.c **** 
 5297              		.loc 1 1478 0
 5298 0083 BE000000 		movl	$.LC80, %esi
 5298      00
 5299              	.LVL533:
 5300 0088 E8000000 		call	png_error
 5300      00
 5301              	.LVL534:
 5302              		.cfi_endproc
 5303              	.LFE89:
 5305              		.section	.text.unlikely.png_set_compression_buffer_size
 5306              	.LCOLDE83:
 5307              		.section	.text.png_set_compression_buffer_size
 5308              	.LHOTE83:
 5309              		.section	.text.unlikely.png_set_invalid,"ax",@progbits
 5310              	.LCOLDB84:
 5311              		.section	.text.png_set_invalid,"ax",@progbits
 5312              	.LHOTB84:
 5313              		.p2align 4,,15
 5314              		.globl	png_set_invalid
 5316              	png_set_invalid:
 5317              	.LFB90:
1523:fltk-1.3.4-1/png/pngset.c **** 
1524:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
1525:fltk-1.3.4-1/png/pngset.c **** png_set_invalid(png_const_structrp png_ptr, png_inforp info_ptr, int mask)
1526:fltk-1.3.4-1/png/pngset.c **** {
 5318              		.loc 1 1526 0
 5319              		.cfi_startproc
 5320              	.LVL535:
1527:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr != NULL && info_ptr != NULL)
 5321              		.loc 1 1527 0
 5322 0000 4885FF   		testq	%rdi, %rdi
 5323 0003 740A     		je	.L506
 5324 0005 4885F6   		testq	%rsi, %rsi
 5325 0008 7405     		je	.L506
1528:fltk-1.3.4-1/png/pngset.c ****       info_ptr->valid &= ~mask;
 5326              		.loc 1 1528 0
 5327 000a F7D2     		notl	%edx
 5328              	.LVL536:
 5329 000c 215608   		andl	%edx, 8(%rsi)
 5330              	.LVL537:
 5331              	.L506:
 5332 000f F3C3     		rep ret
 5333              		.cfi_endproc
 5334              	.LFE90:
 5336              		.section	.text.unlikely.png_set_invalid
 5337              	.LCOLDE84:
 5338              		.section	.text.png_set_invalid
 5339              	.LHOTE84:
 5340              		.section	.text.unlikely.png_set_user_limits,"ax",@progbits
 5341              	.LCOLDB85:
 5342              		.section	.text.png_set_user_limits,"ax",@progbits
 5343              	.LHOTB85:
 5344              		.p2align 4,,15
 5345              		.globl	png_set_user_limits
 5347              	png_set_user_limits:
 5348              	.LFB91:
1529:fltk-1.3.4-1/png/pngset.c **** }
1530:fltk-1.3.4-1/png/pngset.c **** 
1531:fltk-1.3.4-1/png/pngset.c **** 
1532:fltk-1.3.4-1/png/pngset.c **** #ifdef PNG_SET_USER_LIMITS_SUPPORTED
1533:fltk-1.3.4-1/png/pngset.c **** /* This function was added to libpng 1.2.6 */
1534:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
1535:fltk-1.3.4-1/png/pngset.c **** png_set_user_limits (png_structrp png_ptr, png_uint_32 user_width_max,
1536:fltk-1.3.4-1/png/pngset.c ****     png_uint_32 user_height_max)
1537:fltk-1.3.4-1/png/pngset.c **** {
 5349              		.loc 1 1537 0
 5350              		.cfi_startproc
 5351              	.LVL538:
1538:fltk-1.3.4-1/png/pngset.c ****    /* Images with dimensions larger than these limits will be
1539:fltk-1.3.4-1/png/pngset.c ****     * rejected by png_set_IHDR().  To accept any PNG datastream
1540:fltk-1.3.4-1/png/pngset.c ****     * regardless of dimensions, set both limits to 0x7ffffffL.
1541:fltk-1.3.4-1/png/pngset.c ****     */
1542:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr == NULL)
 5352              		.loc 1 1542 0
 5353 0000 4885FF   		testq	%rdi, %rdi
 5354 0003 740C     		je	.L514
1543:fltk-1.3.4-1/png/pngset.c ****       return;
1544:fltk-1.3.4-1/png/pngset.c **** 
1545:fltk-1.3.4-1/png/pngset.c ****    png_ptr->user_width_max = user_width_max;
 5355              		.loc 1 1545 0
 5356 0005 89B75C04 		movl	%esi, 1116(%rdi)
 5356      0000
1546:fltk-1.3.4-1/png/pngset.c ****    png_ptr->user_height_max = user_height_max;
 5357              		.loc 1 1546 0
 5358 000b 89976004 		movl	%edx, 1120(%rdi)
 5358      0000
 5359              	.L514:
 5360 0011 F3C3     		rep ret
 5361              		.cfi_endproc
 5362              	.LFE91:
 5364              		.section	.text.unlikely.png_set_user_limits
 5365              	.LCOLDE85:
 5366              		.section	.text.png_set_user_limits
 5367              	.LHOTE85:
 5368              		.section	.text.unlikely.png_set_chunk_cache_max,"ax",@progbits
 5369              	.LCOLDB86:
 5370              		.section	.text.png_set_chunk_cache_max,"ax",@progbits
 5371              	.LHOTB86:
 5372              		.p2align 4,,15
 5373              		.globl	png_set_chunk_cache_max
 5375              	png_set_chunk_cache_max:
 5376              	.LFB92:
1547:fltk-1.3.4-1/png/pngset.c **** }
1548:fltk-1.3.4-1/png/pngset.c **** 
1549:fltk-1.3.4-1/png/pngset.c **** /* This function was added to libpng 1.4.0 */
1550:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
1551:fltk-1.3.4-1/png/pngset.c **** png_set_chunk_cache_max (png_structrp png_ptr, png_uint_32 user_chunk_cache_max)
1552:fltk-1.3.4-1/png/pngset.c **** {
 5377              		.loc 1 1552 0
 5378              		.cfi_startproc
 5379              	.LVL539:
1553:fltk-1.3.4-1/png/pngset.c ****     if (png_ptr != NULL)
 5380              		.loc 1 1553 0
 5381 0000 4885FF   		testq	%rdi, %rdi
 5382 0003 7406     		je	.L519
1554:fltk-1.3.4-1/png/pngset.c ****        png_ptr->user_chunk_cache_max = user_chunk_cache_max;
 5383              		.loc 1 1554 0
 5384 0005 89B76404 		movl	%esi, 1124(%rdi)
 5384      0000
 5385              	.L519:
 5386 000b F3C3     		rep ret
 5387              		.cfi_endproc
 5388              	.LFE92:
 5390              		.section	.text.unlikely.png_set_chunk_cache_max
 5391              	.LCOLDE86:
 5392              		.section	.text.png_set_chunk_cache_max
 5393              	.LHOTE86:
 5394              		.section	.text.unlikely.png_set_chunk_malloc_max,"ax",@progbits
 5395              	.LCOLDB87:
 5396              		.section	.text.png_set_chunk_malloc_max,"ax",@progbits
 5397              	.LHOTB87:
 5398              		.p2align 4,,15
 5399              		.globl	png_set_chunk_malloc_max
 5401              	png_set_chunk_malloc_max:
 5402              	.LFB93:
1555:fltk-1.3.4-1/png/pngset.c **** }
1556:fltk-1.3.4-1/png/pngset.c **** 
1557:fltk-1.3.4-1/png/pngset.c **** /* This function was added to libpng 1.4.1 */
1558:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
1559:fltk-1.3.4-1/png/pngset.c **** png_set_chunk_malloc_max (png_structrp png_ptr,
1560:fltk-1.3.4-1/png/pngset.c ****     png_alloc_size_t user_chunk_malloc_max)
1561:fltk-1.3.4-1/png/pngset.c **** {
 5403              		.loc 1 1561 0
 5404              		.cfi_startproc
 5405              	.LVL540:
1562:fltk-1.3.4-1/png/pngset.c ****    if (png_ptr != NULL)
 5406              		.loc 1 1562 0
 5407 0000 4885FF   		testq	%rdi, %rdi
 5408 0003 7407     		je	.L524
1563:fltk-1.3.4-1/png/pngset.c ****       png_ptr->user_chunk_malloc_max = user_chunk_malloc_max;
 5409              		.loc 1 1563 0
 5410 0005 4889B768 		movq	%rsi, 1128(%rdi)
 5410      040000
 5411              	.L524:
 5412 000c F3C3     		rep ret
 5413              		.cfi_endproc
 5414              	.LFE93:
 5416              		.section	.text.unlikely.png_set_chunk_malloc_max
 5417              	.LCOLDE87:
 5418              		.section	.text.png_set_chunk_malloc_max
 5419              	.LHOTE87:
 5420              		.section	.text.unlikely.png_set_benign_errors,"ax",@progbits
 5421              	.LCOLDB88:
 5422              		.section	.text.png_set_benign_errors,"ax",@progbits
 5423              	.LHOTB88:
 5424              		.p2align 4,,15
 5425              		.globl	png_set_benign_errors
 5427              	png_set_benign_errors:
 5428              	.LFB94:
1564:fltk-1.3.4-1/png/pngset.c **** }
1565:fltk-1.3.4-1/png/pngset.c **** #endif /* ?SET_USER_LIMITS */
1566:fltk-1.3.4-1/png/pngset.c **** 
1567:fltk-1.3.4-1/png/pngset.c **** 
1568:fltk-1.3.4-1/png/pngset.c **** #ifdef PNG_BENIGN_ERRORS_SUPPORTED
1569:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
1570:fltk-1.3.4-1/png/pngset.c **** png_set_benign_errors(png_structrp png_ptr, int allowed)
1571:fltk-1.3.4-1/png/pngset.c **** {
 5429              		.loc 1 1571 0
 5430              		.cfi_startproc
 5431              	.LVL541:
1572:fltk-1.3.4-1/png/pngset.c ****    png_debug(1, "in png_set_benign_errors");
1573:fltk-1.3.4-1/png/pngset.c **** 
1574:fltk-1.3.4-1/png/pngset.c ****    /* If allowed is 1, png_benign_error() is treated as a warning.
1575:fltk-1.3.4-1/png/pngset.c ****     *
1576:fltk-1.3.4-1/png/pngset.c ****     * If allowed is 0, png_benign_error() is treated as an error (which
1577:fltk-1.3.4-1/png/pngset.c ****     * is the default behavior if png_set_benign_errors() is not called).
1578:fltk-1.3.4-1/png/pngset.c ****     */
1579:fltk-1.3.4-1/png/pngset.c **** 
1580:fltk-1.3.4-1/png/pngset.c ****    if (allowed != 0)
 5432              		.loc 1 1580 0
 5433 0000 85F6     		testl	%esi, %esi
 5434 0002 750C     		jne	.L532
1581:fltk-1.3.4-1/png/pngset.c ****       png_ptr->flags |= PNG_FLAG_BENIGN_ERRORS_WARN |
1582:fltk-1.3.4-1/png/pngset.c ****          PNG_FLAG_APP_WARNINGS_WARN | PNG_FLAG_APP_ERRORS_WARN;
1583:fltk-1.3.4-1/png/pngset.c **** 
1584:fltk-1.3.4-1/png/pngset.c ****    else
1585:fltk-1.3.4-1/png/pngset.c ****       png_ptr->flags &= ~(PNG_FLAG_BENIGN_ERRORS_WARN |
 5435              		.loc 1 1585 0
 5436 0004 81A73001 		andl	$-7340033, 304(%rdi)
 5436      0000FFFF 
 5436      8FFF
 5437 000e C3       		ret
 5438 000f 90       		.p2align 4,,10
 5439              		.p2align 3
 5440              	.L532:
1581:fltk-1.3.4-1/png/pngset.c ****       png_ptr->flags |= PNG_FLAG_BENIGN_ERRORS_WARN |
 5441              		.loc 1 1581 0
 5442 0010 818F3001 		orl	$7340032, 304(%rdi)
 5442      00000000 
 5442      7000
 5443 001a C3       		ret
 5444              		.cfi_endproc
 5445              	.LFE94:
 5447              		.section	.text.unlikely.png_set_benign_errors
 5448              	.LCOLDE88:
 5449              		.section	.text.png_set_benign_errors
 5450              	.LHOTE88:
 5451              		.section	.text.unlikely.png_set_check_for_invalid_index,"ax",@progbits
 5452              	.LCOLDB89:
 5453              		.section	.text.png_set_check_for_invalid_index,"ax",@progbits
 5454              	.LHOTB89:
 5455              		.p2align 4,,15
 5456              		.globl	png_set_check_for_invalid_index
 5458              	png_set_check_for_invalid_index:
 5459              	.LFB95:
1586:fltk-1.3.4-1/png/pngset.c ****          PNG_FLAG_APP_WARNINGS_WARN | PNG_FLAG_APP_ERRORS_WARN);
1587:fltk-1.3.4-1/png/pngset.c **** }
1588:fltk-1.3.4-1/png/pngset.c **** #endif /* BENIGN_ERRORS */
1589:fltk-1.3.4-1/png/pngset.c **** 
1590:fltk-1.3.4-1/png/pngset.c **** #ifdef PNG_CHECK_FOR_INVALID_INDEX_SUPPORTED
1591:fltk-1.3.4-1/png/pngset.c ****    /* Whether to report invalid palette index; added at libng-1.5.10.
1592:fltk-1.3.4-1/png/pngset.c ****     * It is possible for an indexed (color-type==3) PNG file to contain
1593:fltk-1.3.4-1/png/pngset.c ****     * pixels with invalid (out-of-range) indexes if the PLTE chunk has
1594:fltk-1.3.4-1/png/pngset.c ****     * fewer entries than the image's bit-depth would allow. We recover
1595:fltk-1.3.4-1/png/pngset.c ****     * from this gracefully by filling any incomplete palette with zeros
1596:fltk-1.3.4-1/png/pngset.c ****     * (opaque black).  By default, when this occurs libpng will issue
1597:fltk-1.3.4-1/png/pngset.c ****     * a benign error.  This API can be used to override that behavior.
1598:fltk-1.3.4-1/png/pngset.c ****     */
1599:fltk-1.3.4-1/png/pngset.c **** void PNGAPI
1600:fltk-1.3.4-1/png/pngset.c **** png_set_check_for_invalid_index(png_structrp png_ptr, int allowed)
1601:fltk-1.3.4-1/png/pngset.c **** {
 5460              		.loc 1 1601 0
 5461              		.cfi_startproc
 5462              	.LVL542:
1602:fltk-1.3.4-1/png/pngset.c ****    png_debug(1, "in png_set_check_for_invalid_index");
1603:fltk-1.3.4-1/png/pngset.c **** 
1604:fltk-1.3.4-1/png/pngset.c ****    if (allowed > 0)
1605:fltk-1.3.4-1/png/pngset.c ****       png_ptr->num_palette_max = 0;
 5463              		.loc 1 1605 0
 5464 0000 31C0     		xorl	%eax, %eax
 5465 0002 85F6     		testl	%esi, %esi
 5466 0004 0F9FC0   		setg	%al
 5467 0007 83E801   		subl	$1, %eax
 5468 000a 89876C02 		movl	%eax, 620(%rdi)
 5468      0000
 5469 0010 C3       		ret
 5470              		.cfi_endproc
 5471              	.LFE95:
 5473              		.section	.text.unlikely.png_set_check_for_invalid_index
 5474              	.LCOLDE89:
 5475              		.section	.text.png_set_check_for_invalid_index
 5476              	.LHOTE89:
 5477              		.section	.rodata.chunks_to_ignore.7001,"a",@progbits
 5478              		.align 32
 5481              	chunks_to_ignore.7001:
 5482 0000 62       		.byte	98
 5483 0001 4B       		.byte	75
 5484 0002 47       		.byte	71
 5485 0003 44       		.byte	68
 5486 0004 00       		.byte	0
 5487 0005 63       		.byte	99
 5488 0006 48       		.byte	72
 5489 0007 52       		.byte	82
 5490 0008 4D       		.byte	77
 5491 0009 00       		.byte	0
 5492 000a 67       		.byte	103
 5493 000b 41       		.byte	65
 5494 000c 4D       		.byte	77
 5495 000d 41       		.byte	65
 5496 000e 00       		.byte	0
 5497 000f 68       		.byte	104
 5498 0010 49       		.byte	73
 5499 0011 53       		.byte	83
 5500 0012 54       		.byte	84
 5501 0013 00       		.byte	0
 5502 0014 69       		.byte	105
 5503 0015 43       		.byte	67
 5504 0016 43       		.byte	67
 5505 0017 50       		.byte	80
 5506 0018 00       		.byte	0
 5507 0019 69       		.byte	105
 5508 001a 54       		.byte	84
 5509 001b 58       		.byte	88
 5510 001c 74       		.byte	116
 5511 001d 00       		.byte	0
 5512 001e 6F       		.byte	111
 5513 001f 46       		.byte	70
 5514 0020 46       		.byte	70
 5515 0021 73       		.byte	115
 5516 0022 00       		.byte	0
 5517 0023 70       		.byte	112
 5518 0024 43       		.byte	67
 5519 0025 41       		.byte	65
 5520 0026 4C       		.byte	76
 5521 0027 00       		.byte	0
 5522 0028 70       		.byte	112
 5523 0029 48       		.byte	72
 5524 002a 59       		.byte	89
 5525 002b 73       		.byte	115
 5526 002c 00       		.byte	0
 5527 002d 73       		.byte	115
 5528 002e 42       		.byte	66
 5529 002f 49       		.byte	73
 5530 0030 54       		.byte	84
 5531 0031 00       		.byte	0
 5532 0032 73       		.byte	115
 5533 0033 43       		.byte	67
 5534 0034 41       		.byte	65
 5535 0035 4C       		.byte	76
 5536 0036 00       		.byte	0
 5537 0037 73       		.byte	115
 5538 0038 50       		.byte	80
 5539 0039 4C       		.byte	76
 5540 003a 54       		.byte	84
 5541 003b 00       		.byte	0
 5542 003c 73       		.byte	115
 5543 003d 54       		.byte	84
 5544 003e 45       		.byte	69
 5545 003f 52       		.byte	82
 5546 0040 00       		.byte	0
 5547 0041 73       		.byte	115
 5548 0042 52       		.byte	82
 5549 0043 47       		.byte	71
 5550 0044 42       		.byte	66
 5551 0045 00       		.byte	0
 5552 0046 74       		.byte	116
 5553 0047 45       		.byte	69
 5554 0048 58       		.byte	88
 5555 0049 74       		.byte	116
 5556 004a 00       		.byte	0
 5557 004b 74       		.byte	116
 5558 004c 49       		.byte	73
 5559 004d 4D       		.byte	77
 5560 004e 45       		.byte	69
 5561 004f 00       		.byte	0
 5562 0050 7A       		.byte	122
 5563 0051 54       		.byte	84
 5564 0052 58       		.byte	88
 5565 0053 74       		.byte	116
 5566 0054 00       		.byte	0
 5567              		.text
 5568              	.Letext0:
 5569              		.section	.text.unlikely.check_location
 5570              	.Letext_cold0:
 5571              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 5572              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 5573              		.file 5 "/usr/include/libio.h"
 5574              		.file 6 "/usr/include/x86_64-linux-gnu/bits/setjmp.h"
 5575              		.file 7 "/usr/include/x86_64-linux-gnu/bits/sigset.h"
 5576              		.file 8 "/usr/include/setjmp.h"
 5577              		.file 9 "fltk-1.3.4-1/png/pngconf.h"
 5578              		.file 10 "fltk-1.3.4-1/png/png.h"
 5579              		.file 11 "fltk-1.3.4-1/png/pngstruct.h"
 5580              		.file 12 "fltk-1.3.4-1/png/pnginfo.h"
 5581              		.file 13 "/usr/include/x86_64-linux-gnu/zconf.h"
 5582              		.file 14 "/usr/include/zlib.h"
 5583              		.file 15 "/usr/include/stdio.h"
 5584              		.file 16 "fltk-1.3.4-1/png/pngpriv.h"
 5585              		.file 17 "/usr/include/string.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 pngset.c
     /tmp/ccp3YHWo.s:20     .text.check_location:0000000000000000 check_location
     /tmp/ccp3YHWo.s:95     .text.png_set_bKGD:0000000000000000 png_set_bKGD
     /tmp/ccp3YHWo.s:133    .text.png_set_cHRM_fixed:0000000000000000 png_set_cHRM_fixed
     /tmp/ccp3YHWo.s:244    .text.png_set_cHRM_XYZ_fixed:0000000000000000 png_set_cHRM_XYZ_fixed
     /tmp/ccp3YHWo.s:375    .text.png_set_cHRM:0000000000000000 png_set_cHRM
     /tmp/ccp3YHWo.s:578    .text.png_set_cHRM_XYZ:0000000000000000 png_set_cHRM_XYZ
     /tmp/ccp3YHWo.s:791    .text.png_set_gAMA_fixed:0000000000000000 png_set_gAMA_fixed
     /tmp/ccp3YHWo.s:875    .text.png_set_gAMA:0000000000000000 png_set_gAMA
     /tmp/ccp3YHWo.s:985    .text.png_set_hIST:0000000000000000 png_set_hIST
     /tmp/ccp3YHWo.s:1128   .text.png_set_IHDR:0000000000000000 png_set_IHDR
     /tmp/ccp3YHWo.s:1284   .text.png_set_oFFs:0000000000000000 png_set_oFFs
     /tmp/ccp3YHWo.s:1341   .text.png_set_pCAL:0000000000000000 png_set_pCAL
     /tmp/ccp3YHWo.s:1716   .text.png_set_sCAL_s:0000000000000000 png_set_sCAL_s
     /tmp/ccp3YHWo.s:1993   .text.png_set_sCAL:0000000000000000 png_set_sCAL
     /tmp/ccp3YHWo.s:2108   .text.png_set_sCAL_fixed:0000000000000000 png_set_sCAL_fixed
     /tmp/ccp3YHWo.s:2222   .text.png_set_pHYs:0000000000000000 png_set_pHYs
     /tmp/ccp3YHWo.s:2261   .text.png_set_PLTE:0000000000000000 png_set_PLTE
     /tmp/ccp3YHWo.s:2496   .text.png_set_sBIT:0000000000000000 png_set_sBIT
     /tmp/ccp3YHWo.s:2534   .text.png_set_sRGB:0000000000000000 png_set_sRGB
     /tmp/ccp3YHWo.s:2598   .text.png_set_sRGB_gAMA_and_cHRM:0000000000000000 png_set_sRGB_gAMA_and_cHRM
     /tmp/ccp3YHWo.s:2677   .text.png_set_iCCP:0000000000000000 png_set_iCCP
     /tmp/ccp3YHWo.s:2949   .text.png_set_text_2:0000000000000000 png_set_text_2
     /tmp/ccp3YHWo.s:3560   .text.png_set_text:0000000000000000 png_set_text
     /tmp/ccp3YHWo.s:3607   .text.png_set_tIME:0000000000000000 png_set_tIME
     /tmp/ccp3YHWo.s:3676   .text.png_set_tRNS:0000000000000000 png_set_tRNS
     /tmp/ccp3YHWo.s:3932   .text.png_set_sPLT:0000000000000000 png_set_sPLT
     /tmp/ccp3YHWo.s:4217   .text.png_set_unknown_chunks:0000000000000000 png_set_unknown_chunks
     /tmp/ccp3YHWo.s:4471   .text.png_set_unknown_chunk_location:0000000000000000 png_set_unknown_chunk_location
     /tmp/ccp3YHWo.s:4570   .text.png_permit_mng_features:0000000000000000 png_permit_mng_features
     /tmp/ccp3YHWo.s:4615   .text.png_set_keep_unknown_chunks:0000000000000000 png_set_keep_unknown_chunks
     /tmp/ccp3YHWo.s:5481   .rodata.chunks_to_ignore.7001:0000000000000000 chunks_to_ignore.7001
     /tmp/ccp3YHWo.s:5073   .text.png_set_read_user_chunk_fn:0000000000000000 png_set_read_user_chunk_fn
     /tmp/ccp3YHWo.s:5101   .text.png_set_rows:0000000000000000 png_set_rows
     /tmp/ccp3YHWo.s:5183   .text.png_set_compression_buffer_size:0000000000000000 png_set_compression_buffer_size
     /tmp/ccp3YHWo.s:5316   .text.png_set_invalid:0000000000000000 png_set_invalid
     /tmp/ccp3YHWo.s:5347   .text.png_set_user_limits:0000000000000000 png_set_user_limits
     /tmp/ccp3YHWo.s:5375   .text.png_set_chunk_cache_max:0000000000000000 png_set_chunk_cache_max
     /tmp/ccp3YHWo.s:5401   .text.png_set_chunk_malloc_max:0000000000000000 png_set_chunk_malloc_max
     /tmp/ccp3YHWo.s:5427   .text.png_set_benign_errors:0000000000000000 png_set_benign_errors
     /tmp/ccp3YHWo.s:5458   .text.png_set_check_for_invalid_index:0000000000000000 png_set_check_for_invalid_index
                           .group:0000000000000000 wm4.0.cf9695abff4f49bdfe00dc4091904acd
                           .group:0000000000000000 wm4.stdcpredef.h.19.bf2bf6c5fb087dfb5ef2d2297c2795de
                           .group:0000000000000000 wm4.pngpriv.h.26.ca3d1719773cd86007410b516123e125
                           .group:0000000000000000 wm4.features.h.19.22780be97c2f806ec599b8b99aa89f7d
                           .group:0000000000000000 wm4.cdefs.h.19.56613e71f285ebad825b69b151170a81
                           .group:0000000000000000 wm4.wordsize.h.4.256e8fdbd37801980286acdbc40d0280
                           .group:0000000000000000 wm4.cdefs.h.432.619afd0aac7c4b439843706c1b28ddea
                           .group:0000000000000000 wm4.stubs64.h.10.918ceb5fa58268542bf143e4c1efbcf3
                           .group:0000000000000000 wm4.stdlib.h.27.59e2586c75bdbcb991b248ad7257b993
                           .group:0000000000000000 wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1
                           .group:0000000000000000 wm4.stdlib.h.37.e081b308f911db94d3185af615f2b2e2
                           .group:0000000000000000 wm4.string.h.23.8394011d5995a16f15d67d04e84a1d69
                           .group:0000000000000000 wm4.stddef.h.238.04cc7214bceba497b20d15c10fd97511
                           .group:0000000000000000 wm4.string.h.24.1b0dc67418e7128d207285861439c2f8
                           .group:0000000000000000 wm4.endian.h.19.ff00c9c0f5e9f9a9719c5de76ace57b4
                           .group:0000000000000000 wm4.endian.h.41.27d650ce666b76881e2a2a218ea61984
                           .group:0000000000000000 wm4.types.h.89.468e2451361e3b92f048f6cad51690ff
                           .group:0000000000000000 wm4.typesizes.h.24.40eb69a6270178f15d1bf3d7b6635a8b
                           .group:0000000000000000 wm4.string2.h.55.e4a4cfd7781cc64a4341475e67436ab1
                           .group:0000000000000000 wm4.string3.h.31.2b75bd65145c50aeedb61673ce0d3293
                           .group:0000000000000000 wm4.pnglibconf.h.15.30e2eea90e566ac06da4f4de487193d7
                           .group:0000000000000000 wm4.pngpriv.h.130.f65d93453b5b5837849611ffe82d627a
                           .group:0000000000000000 wm4.png.h.412.12a95b2193a7d0bc2282b72c70a28ce1
                           .group:0000000000000000 wm4.limits.h.23.f0fd92c175c1576df467c4d5fe2b091a
                           .group:0000000000000000 wm4.posix1_lim.h.25.28c8eb2d22697e7711efefdec5344a02
                           .group:0000000000000000 wm4.local_lim.h.25.97ee4129efb08ad296101237bcd3401b
                           .group:0000000000000000 wm4.limits.h.2.9ff59823e8adcf4502d980ef41362326
                           .group:0000000000000000 wm4.local_lim.h.42.9dc3935e0e3b94e23cda247e4e39bd8b
                           .group:0000000000000000 wm4.limits.h.60.eb7066f861c8b8edc7a0a399744b0335
                           .group:0000000000000000 wm4.stddef.h.39.d5a83c17f38162a5dd6f834eaf38f8ef
                           .group:0000000000000000 wm4.stdio.h.26.4719156f1aea2bb9662fd6c582dc9a4c
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:0000000000000000 wm4.stdio.h.36.2dd12c1fd035242ad5cfd0152a01be5a
                           .group:0000000000000000 wm4._G_config.h.5.b0f37d9e474454cf6e459063458db32f
                           .group:0000000000000000 wm4.wchar.h.80.eea3eba2d2a17aace9470a8e0d8218dc
                           .group:0000000000000000 wm4._G_config.h.46.5187c97b14fd664662cb32e6b94fc49e
                           .group:0000000000000000 wm4.libio.h.33.a775b9ecae273f33bc59931e9891e4ca
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.libio.h.51.dab170798ec1df48c625aea7c30e1b63
                           .group:0000000000000000 wm4.stdio.h.120.80cbf0ec1718a5b27e6428218e29c72d
                           .group:0000000000000000 wm4.stdio_lim.h.23.f8541119d1bcf759d7de9531671fd758
                           .group:0000000000000000 wm4.stdio.h.172.df21df34a7396d7da2e08f9b617d582f
                           .group:0000000000000000 wm4.stdio.h.26.e50fc3808d57d965ceefc6f6dd102eb7
                           .group:0000000000000000 wm4.sigset.h.20.f36413b6d2364ad847d3db53fb03e683
                           .group:0000000000000000 wm4.setjmp.h.67.51aa194c3c89a841663c00cb93fd90ff
                           .group:0000000000000000 wm4.time.h.26.6a3cabd4f228e226db6723a3b0c81ba6
                           .group:0000000000000000 wm4.time.h.40.99bfb90272c7e82357ef3c2f5c6fefc8
                           .group:0000000000000000 wm4.time.h.53.f8af6908497bac0ca16faea86fb8cd87
                           .group:0000000000000000 wm4.pngconf.h.86.6636b2584cb7be1618479e118d71e58c
                           .group:0000000000000000 wm4.png.h.506.fa53b6434c0b20c8e63094b04d7940c5
                           .group:0000000000000000 wm4.pngpriv.h.298.dc2c896ce0eddc5cfadee24e76e3c417
                           .group:0000000000000000 wm4.float.h.29.1cf88a0527b6b1225d49fbee2b32acb7
                           .group:0000000000000000 wm4.math.h.26.671af5ac9cd425a35e0730f7b6d7cde2
                           .group:0000000000000000 wm4.libmsimddeclstubs.h.34.75644856b74ba3d815155fe5fe7ecc56
                           .group:0000000000000000 wm4.mathdef.h.23.67c0aa4a204f1f427459dfc651aba565
                           .group:0000000000000000 wm4.math.h.55.cf380f99c57d42476a5252f30065036a
                           .group:0000000000000000 wm4.math.h.84.742292806c6be54f49dc607928a827f7
                           .group:0000000000000000 wm4.math.h.105.59ff0f83ebf6a04e70e145cef2d1185e
                           .group:0000000000000000 wm4.math.h.152.48a142bc1575e748473ff86330dee044
                           .group:0000000000000000 wm4.math.h.30.7cada3efe024725df2da4c705b6566be
                           .group:0000000000000000 wm4.pngpriv.h.481.f98e7c29eaaa759546a3f9808bc25c74
                           .group:0000000000000000 wm4.pngstruct.h.22.7b9573417641055ab8f42438aa8afadf
                           .group:0000000000000000 wm4.zconf.h.9.bbc7b5783b51507f7721a5620139b4ee
                           .group:0000000000000000 wm4.zconf.h.397.69c03305677a9a6792fe2a94f7c9f69b
                           .group:0000000000000000 wm4.types.h.23.92678977f3921b8dce508274ac68f78d
                           .group:0000000000000000 wm4.types.h.187.12f6c32afb936b45a5f241219964ce93
                           .group:0000000000000000 wm4.stdarg.h.31.48e922dd0aaedfb616aafd8a7b7a4949
                           .group:0000000000000000 wm4.unistd.h.23.c85a58a698f53edadcf64287ab24fecb
                           .group:0000000000000000 wm4.posix_opt.h.20.9a8aece77957db1725bd2b9521e5f9c5
                           .group:0000000000000000 wm4.unistd.h.213.4c582e35260d661b081322974b7c1e74
                           .group:0000000000000000 wm4.unistd.h.284.7e168706bc8bd978e02fd1da439d9bc3
                           .group:0000000000000000 wm4.confname.h.27.6b00117a32f457cc72e5ac810a9adade
                           .group:0000000000000000 wm4.zconf.h.457.505c3613686dd75e492569d7a56a6eb0
                           .group:0000000000000000 wm4.zlib.h.40.5a15529ab8e285cee4b0ddab32502c27
                           .group:0000000000000000 wm4.pngstruct.h.44.bc957704556ff8ddcb697678a008ffae
                           .group:0000000000000000 wm4.pngpriv.h.853.4585af3e74cfb155d8486c5333b94adf
                           .group:0000000000000000 wm4.pngdebug.h.36.e9c57d5f35e3128225fb629498ec6fc8

UNDEFINED SYMBOLS
png_error
png_app_warning
png_colorspace_set_chromaticities
png_colorspace_sync_info
__stack_chk_fail
png_colorspace_set_endpoints
png_fixed
png_colorspace_set_gamma
png_free_data
png_malloc_warn
png_warning
png_check_IHDR
strlen
png_check_fp_string
memcpy
png_free
png_ascii_from_fp
png_ascii_from_fixed
png_calloc
png_colorspace_set_sRGB
png_colorspace_set_ICC
png_app_error
png_benign_error
png_malloc_base
png_chunk_report
png_realloc_array
png_malloc
png_malloc_array
memcmp
png_free_buffer_list
