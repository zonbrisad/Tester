   1              		.file	"pngtrans.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.unlikely.png_set_bgr,"ax",@progbits
   5              	.LCOLDB0:
   6              		.section	.text.png_set_bgr,"ax",@progbits
   7              	.LHOTB0:
   8              		.p2align 4,,15
   9              		.section	.text.unlikely.png_set_bgr
  10              	.Ltext_cold0:
  11              		.section	.text.png_set_bgr
  12              		.globl	png_set_bgr
  14              	png_set_bgr:
  15              	.LFB56:
  16              		.file 1 "fltk-1.3.4-1/png/pngtrans.c"
   1:fltk-1.3.4-1/png/pngtrans.c **** 
   2:fltk-1.3.4-1/png/pngtrans.c **** /* pngtrans.c - transforms the data in a row (used by both readers and writers)
   3:fltk-1.3.4-1/png/pngtrans.c ****  *
   4:fltk-1.3.4-1/png/pngtrans.c ****  * Last changed in libpng 1.6.15 [November 20, 2014]
   5:fltk-1.3.4-1/png/pngtrans.c ****  * Copyright (c) 1998-2014 Glenn Randers-Pehrson
   6:fltk-1.3.4-1/png/pngtrans.c ****  * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
   7:fltk-1.3.4-1/png/pngtrans.c ****  * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
   8:fltk-1.3.4-1/png/pngtrans.c ****  *
   9:fltk-1.3.4-1/png/pngtrans.c ****  * This code is released under the libpng license.
  10:fltk-1.3.4-1/png/pngtrans.c ****  * For conditions of distribution and use, see the disclaimer
  11:fltk-1.3.4-1/png/pngtrans.c ****  * and license in png.h
  12:fltk-1.3.4-1/png/pngtrans.c ****  */
  13:fltk-1.3.4-1/png/pngtrans.c **** 
  14:fltk-1.3.4-1/png/pngtrans.c **** #include "pngpriv.h"
  15:fltk-1.3.4-1/png/pngtrans.c **** 
  16:fltk-1.3.4-1/png/pngtrans.c **** #if defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED)
  17:fltk-1.3.4-1/png/pngtrans.c **** 
  18:fltk-1.3.4-1/png/pngtrans.c **** #if defined(PNG_READ_BGR_SUPPORTED) || defined(PNG_WRITE_BGR_SUPPORTED)
  19:fltk-1.3.4-1/png/pngtrans.c **** /* Turn on BGR-to-RGB mapping */
  20:fltk-1.3.4-1/png/pngtrans.c **** void PNGAPI
  21:fltk-1.3.4-1/png/pngtrans.c **** png_set_bgr(png_structrp png_ptr)
  22:fltk-1.3.4-1/png/pngtrans.c **** {
  17              		.loc 1 22 0
  18              		.cfi_startproc
  19              	.LVL0:
  23:fltk-1.3.4-1/png/pngtrans.c ****    png_debug(1, "in png_set_bgr");
  24:fltk-1.3.4-1/png/pngtrans.c **** 
  25:fltk-1.3.4-1/png/pngtrans.c ****    if (png_ptr == NULL)
  20              		.loc 1 25 0
  21 0000 4885FF   		testq	%rdi, %rdi
  22 0003 7407     		je	.L1
  26:fltk-1.3.4-1/png/pngtrans.c ****       return;
  27:fltk-1.3.4-1/png/pngtrans.c **** 
  28:fltk-1.3.4-1/png/pngtrans.c ****    png_ptr->transformations |= PNG_BGR;
  23              		.loc 1 28 0
  24 0005 838F3401 		orl	$1, 308(%rdi)
  24      000001
  25              	.L1:
  26 000c F3C3     		rep ret
  27              		.cfi_endproc
  28              	.LFE56:
  30              		.section	.text.unlikely.png_set_bgr
  31              	.LCOLDE0:
  32              		.section	.text.png_set_bgr
  33              	.LHOTE0:
  34              		.section	.text.unlikely.png_set_swap,"ax",@progbits
  35              	.LCOLDB1:
  36              		.section	.text.png_set_swap,"ax",@progbits
  37              	.LHOTB1:
  38              		.p2align 4,,15
  39              		.globl	png_set_swap
  41              	png_set_swap:
  42              	.LFB57:
  29:fltk-1.3.4-1/png/pngtrans.c **** }
  30:fltk-1.3.4-1/png/pngtrans.c **** #endif
  31:fltk-1.3.4-1/png/pngtrans.c **** 
  32:fltk-1.3.4-1/png/pngtrans.c **** #if defined(PNG_READ_SWAP_SUPPORTED) || defined(PNG_WRITE_SWAP_SUPPORTED)
  33:fltk-1.3.4-1/png/pngtrans.c **** /* Turn on 16 bit byte swapping */
  34:fltk-1.3.4-1/png/pngtrans.c **** void PNGAPI
  35:fltk-1.3.4-1/png/pngtrans.c **** png_set_swap(png_structrp png_ptr)
  36:fltk-1.3.4-1/png/pngtrans.c **** {
  43              		.loc 1 36 0
  44              		.cfi_startproc
  45              	.LVL1:
  37:fltk-1.3.4-1/png/pngtrans.c ****    png_debug(1, "in png_set_swap");
  38:fltk-1.3.4-1/png/pngtrans.c **** 
  39:fltk-1.3.4-1/png/pngtrans.c ****    if (png_ptr == NULL)
  46              		.loc 1 39 0
  47 0000 4885FF   		testq	%rdi, %rdi
  48 0003 7409     		je	.L7
  40:fltk-1.3.4-1/png/pngtrans.c ****       return;
  41:fltk-1.3.4-1/png/pngtrans.c **** 
  42:fltk-1.3.4-1/png/pngtrans.c ****    if (png_ptr->bit_depth == 16)
  49              		.loc 1 42 0
  50 0005 80BF7802 		cmpb	$16, 632(%rdi)
  50      000010
  51 000c 7402     		je	.L12
  52              	.L7:
  53 000e F3C3     		rep ret
  54              		.p2align 4,,10
  55              		.p2align 3
  56              	.L12:
  43:fltk-1.3.4-1/png/pngtrans.c ****       png_ptr->transformations |= PNG_SWAP_BYTES;
  57              		.loc 1 43 0
  58 0010 838F3401 		orl	$16, 308(%rdi)
  58      000010
  59 0017 C3       		ret
  60              		.cfi_endproc
  61              	.LFE57:
  63              		.section	.text.unlikely.png_set_swap
  64              	.LCOLDE1:
  65              		.section	.text.png_set_swap
  66              	.LHOTE1:
  67              		.section	.text.unlikely.png_set_packing,"ax",@progbits
  68              	.LCOLDB2:
  69              		.section	.text.png_set_packing,"ax",@progbits
  70              	.LHOTB2:
  71              		.p2align 4,,15
  72              		.globl	png_set_packing
  74              	png_set_packing:
  75              	.LFB58:
  44:fltk-1.3.4-1/png/pngtrans.c **** }
  45:fltk-1.3.4-1/png/pngtrans.c **** #endif
  46:fltk-1.3.4-1/png/pngtrans.c **** 
  47:fltk-1.3.4-1/png/pngtrans.c **** #if defined(PNG_READ_PACK_SUPPORTED) || defined(PNG_WRITE_PACK_SUPPORTED)
  48:fltk-1.3.4-1/png/pngtrans.c **** /* Turn on pixel packing */
  49:fltk-1.3.4-1/png/pngtrans.c **** void PNGAPI
  50:fltk-1.3.4-1/png/pngtrans.c **** png_set_packing(png_structrp png_ptr)
  51:fltk-1.3.4-1/png/pngtrans.c **** {
  76              		.loc 1 51 0
  77              		.cfi_startproc
  78              	.LVL2:
  52:fltk-1.3.4-1/png/pngtrans.c ****    png_debug(1, "in png_set_packing");
  53:fltk-1.3.4-1/png/pngtrans.c **** 
  54:fltk-1.3.4-1/png/pngtrans.c ****    if (png_ptr == NULL)
  79              		.loc 1 54 0
  80 0000 4885FF   		testq	%rdi, %rdi
  81 0003 7417     		je	.L13
  55:fltk-1.3.4-1/png/pngtrans.c ****       return;
  56:fltk-1.3.4-1/png/pngtrans.c **** 
  57:fltk-1.3.4-1/png/pngtrans.c ****    if (png_ptr->bit_depth < 8)
  82              		.loc 1 57 0
  83 0005 80BF7802 		cmpb	$7, 632(%rdi)
  83      000007
  84 000c 770E     		ja	.L13
  58:fltk-1.3.4-1/png/pngtrans.c ****    {
  59:fltk-1.3.4-1/png/pngtrans.c ****       png_ptr->transformations |= PNG_PACK;
  85              		.loc 1 59 0
  86 000e 838F3401 		orl	$4, 308(%rdi)
  86      000004
  60:fltk-1.3.4-1/png/pngtrans.c **** #     ifdef PNG_WRITE_SUPPORTED
  61:fltk-1.3.4-1/png/pngtrans.c ****          png_ptr->usr_bit_depth = 8;
  87              		.loc 1 61 0
  88 0015 C6877902 		movb	$8, 633(%rdi)
  88      000008
  89              	.L13:
  90 001c F3C3     		rep ret
  91              		.cfi_endproc
  92              	.LFE58:
  94              		.section	.text.unlikely.png_set_packing
  95              	.LCOLDE2:
  96              		.section	.text.png_set_packing
  97              	.LHOTE2:
  98              		.section	.text.unlikely.png_set_packswap,"ax",@progbits
  99              	.LCOLDB3:
 100              		.section	.text.png_set_packswap,"ax",@progbits
 101              	.LHOTB3:
 102              		.p2align 4,,15
 103              		.globl	png_set_packswap
 105              	png_set_packswap:
 106              	.LFB59:
  62:fltk-1.3.4-1/png/pngtrans.c **** #     endif
  63:fltk-1.3.4-1/png/pngtrans.c ****    }
  64:fltk-1.3.4-1/png/pngtrans.c **** }
  65:fltk-1.3.4-1/png/pngtrans.c **** #endif
  66:fltk-1.3.4-1/png/pngtrans.c **** 
  67:fltk-1.3.4-1/png/pngtrans.c **** #if defined(PNG_READ_PACKSWAP_SUPPORTED)||defined(PNG_WRITE_PACKSWAP_SUPPORTED)
  68:fltk-1.3.4-1/png/pngtrans.c **** /* Turn on packed pixel swapping */
  69:fltk-1.3.4-1/png/pngtrans.c **** void PNGAPI
  70:fltk-1.3.4-1/png/pngtrans.c **** png_set_packswap(png_structrp png_ptr)
  71:fltk-1.3.4-1/png/pngtrans.c **** {
 107              		.loc 1 71 0
 108              		.cfi_startproc
 109              	.LVL3:
  72:fltk-1.3.4-1/png/pngtrans.c ****    png_debug(1, "in png_set_packswap");
  73:fltk-1.3.4-1/png/pngtrans.c **** 
  74:fltk-1.3.4-1/png/pngtrans.c ****    if (png_ptr == NULL)
 110              		.loc 1 74 0
 111 0000 4885FF   		testq	%rdi, %rdi
 112 0003 7413     		je	.L18
  75:fltk-1.3.4-1/png/pngtrans.c ****       return;
  76:fltk-1.3.4-1/png/pngtrans.c **** 
  77:fltk-1.3.4-1/png/pngtrans.c ****    if (png_ptr->bit_depth < 8)
 113              		.loc 1 77 0
 114 0005 80BF7802 		cmpb	$7, 632(%rdi)
 114      000007
 115 000c 770A     		ja	.L18
  78:fltk-1.3.4-1/png/pngtrans.c ****       png_ptr->transformations |= PNG_PACKSWAP;
 116              		.loc 1 78 0
 117 000e 818F3401 		orl	$65536, 308(%rdi)
 117      00000000 
 117      0100
 118              	.L18:
 119 0018 F3C3     		rep ret
 120              		.cfi_endproc
 121              	.LFE59:
 123              		.section	.text.unlikely.png_set_packswap
 124              	.LCOLDE3:
 125              		.section	.text.png_set_packswap
 126              	.LHOTE3:
 127              		.section	.text.unlikely.png_set_shift,"ax",@progbits
 128              	.LCOLDB4:
 129              		.section	.text.png_set_shift,"ax",@progbits
 130              	.LHOTB4:
 131              		.p2align 4,,15
 132              		.globl	png_set_shift
 134              	png_set_shift:
 135              	.LFB60:
  79:fltk-1.3.4-1/png/pngtrans.c **** }
  80:fltk-1.3.4-1/png/pngtrans.c **** #endif
  81:fltk-1.3.4-1/png/pngtrans.c **** 
  82:fltk-1.3.4-1/png/pngtrans.c **** #if defined(PNG_READ_SHIFT_SUPPORTED) || defined(PNG_WRITE_SHIFT_SUPPORTED)
  83:fltk-1.3.4-1/png/pngtrans.c **** void PNGAPI
  84:fltk-1.3.4-1/png/pngtrans.c **** png_set_shift(png_structrp png_ptr, png_const_color_8p true_bits)
  85:fltk-1.3.4-1/png/pngtrans.c **** {
 136              		.loc 1 85 0
 137              		.cfi_startproc
 138              	.LVL4:
  86:fltk-1.3.4-1/png/pngtrans.c ****    png_debug(1, "in png_set_shift");
  87:fltk-1.3.4-1/png/pngtrans.c **** 
  88:fltk-1.3.4-1/png/pngtrans.c ****    if (png_ptr == NULL)
 139              		.loc 1 88 0
 140 0000 4885FF   		testq	%rdi, %rdi
 141 0003 7419     		je	.L23
  89:fltk-1.3.4-1/png/pngtrans.c ****       return;
  90:fltk-1.3.4-1/png/pngtrans.c **** 
  91:fltk-1.3.4-1/png/pngtrans.c ****    png_ptr->transformations |= PNG_SHIFT;
 142              		.loc 1 91 0
 143 0005 838F3401 		orl	$8, 308(%rdi)
 143      000008
  92:fltk-1.3.4-1/png/pngtrans.c ****    png_ptr->shift = *true_bits;
 144              		.loc 1 92 0
 145 000c 8B06     		movl	(%rsi), %eax
 146 000e 8987ED02 		movl	%eax, 749(%rdi)
 146      0000
 147 0014 0FB64604 		movzbl	4(%rsi), %eax
 148 0018 8887F102 		movb	%al, 753(%rdi)
 148      0000
 149              	.L23:
 150 001e F3C3     		rep ret
 151              		.cfi_endproc
 152              	.LFE60:
 154              		.section	.text.unlikely.png_set_shift
 155              	.LCOLDE4:
 156              		.section	.text.png_set_shift
 157              	.LHOTE4:
 158              		.section	.text.unlikely.png_set_interlace_handling,"ax",@progbits
 159              	.LCOLDB5:
 160              		.section	.text.png_set_interlace_handling,"ax",@progbits
 161              	.LHOTB5:
 162              		.p2align 4,,15
 163              		.globl	png_set_interlace_handling
 165              	png_set_interlace_handling:
 166              	.LFB61:
  93:fltk-1.3.4-1/png/pngtrans.c **** }
  94:fltk-1.3.4-1/png/pngtrans.c **** #endif
  95:fltk-1.3.4-1/png/pngtrans.c **** 
  96:fltk-1.3.4-1/png/pngtrans.c **** #if defined(PNG_READ_INTERLACING_SUPPORTED) || \
  97:fltk-1.3.4-1/png/pngtrans.c ****     defined(PNG_WRITE_INTERLACING_SUPPORTED)
  98:fltk-1.3.4-1/png/pngtrans.c **** int PNGAPI
  99:fltk-1.3.4-1/png/pngtrans.c **** png_set_interlace_handling(png_structrp png_ptr)
 100:fltk-1.3.4-1/png/pngtrans.c **** {
 167              		.loc 1 100 0
 168              		.cfi_startproc
 169              	.LVL5:
 101:fltk-1.3.4-1/png/pngtrans.c ****    png_debug(1, "in png_set_interlace handling");
 102:fltk-1.3.4-1/png/pngtrans.c **** 
 103:fltk-1.3.4-1/png/pngtrans.c ****    if (png_ptr != 0 && png_ptr->interlaced != 0)
 170              		.loc 1 103 0
 171 0000 4885FF   		testq	%rdi, %rdi
 104:fltk-1.3.4-1/png/pngtrans.c ****    {
 105:fltk-1.3.4-1/png/pngtrans.c ****       png_ptr->transformations |= PNG_INTERLACE;
 106:fltk-1.3.4-1/png/pngtrans.c ****       return (7);
 107:fltk-1.3.4-1/png/pngtrans.c ****    }
 108:fltk-1.3.4-1/png/pngtrans.c **** 
 109:fltk-1.3.4-1/png/pngtrans.c ****    return (1);
 172              		.loc 1 109 0
 173 0003 B8010000 		movl	$1, %eax
 173      00
 103:fltk-1.3.4-1/png/pngtrans.c ****    {
 174              		.loc 1 103 0
 175 0008 7416     		je	.L29
 103:fltk-1.3.4-1/png/pngtrans.c ****    {
 176              		.loc 1 103 0 is_stmt 0 discriminator 1
 177 000a 80BF7402 		cmpb	$0, 628(%rdi)
 177      000000
 178 0011 740D     		je	.L29
 105:fltk-1.3.4-1/png/pngtrans.c ****       return (7);
 179              		.loc 1 105 0 is_stmt 1
 180 0013 838F3401 		orl	$2, 308(%rdi)
 180      000002
 106:fltk-1.3.4-1/png/pngtrans.c ****    }
 181              		.loc 1 106 0
 182 001a B8070000 		movl	$7, %eax
 182      00
 183 001f C3       		ret
 184              		.p2align 4,,10
 185              		.p2align 3
 186              	.L29:
 110:fltk-1.3.4-1/png/pngtrans.c **** }
 187              		.loc 1 110 0
 188 0020 F3C3     		rep ret
 189              		.cfi_endproc
 190              	.LFE61:
 192              		.section	.text.unlikely.png_set_interlace_handling
 193              	.LCOLDE5:
 194              		.section	.text.png_set_interlace_handling
 195              	.LHOTE5:
 196              		.section	.rodata.str1.8,"aMS",@progbits,1
 197              		.align 8
 198              	.LC6:
 199 0000 706E675F 		.string	"png_set_filler is invalid for low bit depth gray output"
 199      7365745F 
 199      66696C6C 
 199      65722069 
 199      7320696E 
 200              		.align 8
 201              	.LC7:
 202 0038 706E675F 		.string	"png_set_filler: inappropriate color type"
 202      7365745F 
 202      66696C6C 
 202      65723A20 
 202      696E6170 
 203              		.section	.text.unlikely.png_set_filler,"ax",@progbits
 204              	.LCOLDB8:
 205              		.section	.text.png_set_filler,"ax",@progbits
 206              	.LHOTB8:
 207              		.p2align 4,,15
 208              		.globl	png_set_filler
 210              	png_set_filler:
 211              	.LFB62:
 111:fltk-1.3.4-1/png/pngtrans.c **** #endif
 112:fltk-1.3.4-1/png/pngtrans.c **** 
 113:fltk-1.3.4-1/png/pngtrans.c **** #if defined(PNG_READ_FILLER_SUPPORTED) || defined(PNG_WRITE_FILLER_SUPPORTED)
 114:fltk-1.3.4-1/png/pngtrans.c **** /* Add a filler byte on read, or remove a filler or alpha byte on write.
 115:fltk-1.3.4-1/png/pngtrans.c ****  * The filler type has changed in v0.95 to allow future 2-byte fillers
 116:fltk-1.3.4-1/png/pngtrans.c ****  * for 48-bit input data, as well as to avoid problems with some compilers
 117:fltk-1.3.4-1/png/pngtrans.c ****  * that don't like bytes as parameters.
 118:fltk-1.3.4-1/png/pngtrans.c ****  */
 119:fltk-1.3.4-1/png/pngtrans.c **** void PNGAPI
 120:fltk-1.3.4-1/png/pngtrans.c **** png_set_filler(png_structrp png_ptr, png_uint_32 filler, int filler_loc)
 121:fltk-1.3.4-1/png/pngtrans.c **** {
 212              		.loc 1 121 0
 213              		.cfi_startproc
 214              	.LVL6:
 122:fltk-1.3.4-1/png/pngtrans.c ****    png_debug(1, "in png_set_filler");
 123:fltk-1.3.4-1/png/pngtrans.c **** 
 124:fltk-1.3.4-1/png/pngtrans.c ****    if (png_ptr == NULL)
 215              		.loc 1 124 0
 216 0000 4885FF   		testq	%rdi, %rdi
 217 0003 7429     		je	.L32
 125:fltk-1.3.4-1/png/pngtrans.c ****       return;
 126:fltk-1.3.4-1/png/pngtrans.c **** 
 127:fltk-1.3.4-1/png/pngtrans.c ****    /* In libpng 1.6 it is possible to determine whether this is a read or write
 128:fltk-1.3.4-1/png/pngtrans.c ****     * operation and therefore to do more checking here for a valid call.
 129:fltk-1.3.4-1/png/pngtrans.c ****     */
 130:fltk-1.3.4-1/png/pngtrans.c ****    if ((png_ptr->mode & PNG_IS_READ_STRUCT) != 0)
 218              		.loc 1 130 0
 219 0005 F6872D01 		testb	$-128, 301(%rdi)
 219      000080
 220 000c 7422     		je	.L34
 131:fltk-1.3.4-1/png/pngtrans.c ****    {
 132:fltk-1.3.4-1/png/pngtrans.c **** #     ifdef PNG_READ_FILLER_SUPPORTED
 133:fltk-1.3.4-1/png/pngtrans.c ****          /* On read png_set_filler is always valid, regardless of the base PNG
 134:fltk-1.3.4-1/png/pngtrans.c ****           * format, because other transformations can give a format where the
 135:fltk-1.3.4-1/png/pngtrans.c ****           * filler code can execute (basically an 8 or 16-bit component RGB or G
 136:fltk-1.3.4-1/png/pngtrans.c ****           * format.)
 137:fltk-1.3.4-1/png/pngtrans.c ****           *
 138:fltk-1.3.4-1/png/pngtrans.c ****           * NOTE: usr_channels is not used by the read code!  (This has led to
 139:fltk-1.3.4-1/png/pngtrans.c ****           * confusion in the past.)  The filler is only used in the read code.
 140:fltk-1.3.4-1/png/pngtrans.c ****           */
 141:fltk-1.3.4-1/png/pngtrans.c ****          png_ptr->filler = (png_uint_16)filler;
 221              		.loc 1 141 0
 222 000e 6689B780 		movw	%si, 640(%rdi)
 222      020000
 223              	.L35:
 142:fltk-1.3.4-1/png/pngtrans.c **** #     else
 143:fltk-1.3.4-1/png/pngtrans.c ****          png_app_error(png_ptr, "png_set_filler not supported on read");
 144:fltk-1.3.4-1/png/pngtrans.c ****          PNG_UNUSED(filler) /* not used in the write case */
 145:fltk-1.3.4-1/png/pngtrans.c ****          return;
 146:fltk-1.3.4-1/png/pngtrans.c **** #     endif
 147:fltk-1.3.4-1/png/pngtrans.c ****    }
 148:fltk-1.3.4-1/png/pngtrans.c **** 
 149:fltk-1.3.4-1/png/pngtrans.c ****    else /* write */
 150:fltk-1.3.4-1/png/pngtrans.c ****    {
 151:fltk-1.3.4-1/png/pngtrans.c **** #     ifdef PNG_WRITE_FILLER_SUPPORTED
 152:fltk-1.3.4-1/png/pngtrans.c ****          /* On write the usr_channels parameter must be set correctly at the
 153:fltk-1.3.4-1/png/pngtrans.c ****           * start to record the number of channels in the app-supplied data.
 154:fltk-1.3.4-1/png/pngtrans.c ****           */
 155:fltk-1.3.4-1/png/pngtrans.c ****          switch (png_ptr->color_type)
 156:fltk-1.3.4-1/png/pngtrans.c ****          {
 157:fltk-1.3.4-1/png/pngtrans.c ****             case PNG_COLOR_TYPE_RGB:
 158:fltk-1.3.4-1/png/pngtrans.c ****                png_ptr->usr_channels = 4;
 159:fltk-1.3.4-1/png/pngtrans.c ****                break;
 160:fltk-1.3.4-1/png/pngtrans.c **** 
 161:fltk-1.3.4-1/png/pngtrans.c ****             case PNG_COLOR_TYPE_GRAY:
 162:fltk-1.3.4-1/png/pngtrans.c ****                if (png_ptr->bit_depth >= 8)
 163:fltk-1.3.4-1/png/pngtrans.c ****                {
 164:fltk-1.3.4-1/png/pngtrans.c ****                   png_ptr->usr_channels = 2;
 165:fltk-1.3.4-1/png/pngtrans.c ****                   break;
 166:fltk-1.3.4-1/png/pngtrans.c ****                }
 167:fltk-1.3.4-1/png/pngtrans.c **** 
 168:fltk-1.3.4-1/png/pngtrans.c ****                else
 169:fltk-1.3.4-1/png/pngtrans.c ****                {
 170:fltk-1.3.4-1/png/pngtrans.c ****                   /* There simply isn't any code in libpng to strip out bits
 171:fltk-1.3.4-1/png/pngtrans.c ****                    * from bytes when the components are less than a byte in
 172:fltk-1.3.4-1/png/pngtrans.c ****                    * size!
 173:fltk-1.3.4-1/png/pngtrans.c ****                    */
 174:fltk-1.3.4-1/png/pngtrans.c ****                   png_app_error(png_ptr,
 175:fltk-1.3.4-1/png/pngtrans.c ****                      "png_set_filler is invalid for low bit depth gray output");
 176:fltk-1.3.4-1/png/pngtrans.c ****                   return;
 177:fltk-1.3.4-1/png/pngtrans.c ****                }
 178:fltk-1.3.4-1/png/pngtrans.c **** 
 179:fltk-1.3.4-1/png/pngtrans.c ****             default:
 180:fltk-1.3.4-1/png/pngtrans.c ****                png_app_error(png_ptr,
 181:fltk-1.3.4-1/png/pngtrans.c ****                   "png_set_filler: inappropriate color type");
 182:fltk-1.3.4-1/png/pngtrans.c ****                return;
 183:fltk-1.3.4-1/png/pngtrans.c ****          }
 184:fltk-1.3.4-1/png/pngtrans.c **** #     else
 185:fltk-1.3.4-1/png/pngtrans.c ****          png_app_error(png_ptr, "png_set_filler not supported on write");
 186:fltk-1.3.4-1/png/pngtrans.c ****          return;
 187:fltk-1.3.4-1/png/pngtrans.c **** #     endif
 188:fltk-1.3.4-1/png/pngtrans.c ****    }
 189:fltk-1.3.4-1/png/pngtrans.c **** 
 190:fltk-1.3.4-1/png/pngtrans.c ****    /* Here on success - libpng supports the operation, set the transformation
 191:fltk-1.3.4-1/png/pngtrans.c ****     * and the flag to say where the filler channel is.
 192:fltk-1.3.4-1/png/pngtrans.c ****     */
 193:fltk-1.3.4-1/png/pngtrans.c ****    png_ptr->transformations |= PNG_FILLER;
 224              		.loc 1 193 0
 225 0015 818F3401 		orl	$32768, 308(%rdi)
 225      00000080 
 225      0000
 194:fltk-1.3.4-1/png/pngtrans.c **** 
 195:fltk-1.3.4-1/png/pngtrans.c ****    if (filler_loc == PNG_FILLER_AFTER)
 226              		.loc 1 195 0
 227 001f 83FA01   		cmpl	$1, %edx
 228 0022 7431     		je	.L45
 229              	.L40:
 196:fltk-1.3.4-1/png/pngtrans.c ****       png_ptr->flags |= PNG_FLAG_FILLER_AFTER;
 197:fltk-1.3.4-1/png/pngtrans.c **** 
 198:fltk-1.3.4-1/png/pngtrans.c ****    else
 199:fltk-1.3.4-1/png/pngtrans.c ****       png_ptr->flags &= ~PNG_FLAG_FILLER_AFTER;
 230              		.loc 1 199 0
 231 0024 81A73001 		andl	$-129, 304(%rdi)
 231      00007FFF 
 231      FFFF
 232              	.L32:
 233 002e F3C3     		rep ret
 234              		.p2align 4,,10
 235              		.p2align 3
 236              	.L34:
 155:fltk-1.3.4-1/png/pngtrans.c ****          {
 237              		.loc 1 155 0
 238 0030 0FB68777 		movzbl	631(%rdi), %eax
 238      020000
 239 0037 84C0     		testb	%al, %al
 240 0039 7435     		je	.L37
 241 003b 3C02     		cmpb	$2, %al
 242 003d 7521     		jne	.L44
 193:fltk-1.3.4-1/png/pngtrans.c **** 
 243              		.loc 1 193 0
 244 003f 818F3401 		orl	$32768, 308(%rdi)
 244      00000080 
 244      0000
 195:fltk-1.3.4-1/png/pngtrans.c ****       png_ptr->flags |= PNG_FLAG_FILLER_AFTER;
 245              		.loc 1 195 0
 246 0049 83FA01   		cmpl	$1, %edx
 158:fltk-1.3.4-1/png/pngtrans.c ****                break;
 247              		.loc 1 158 0
 248 004c C6877C02 		movb	$4, 636(%rdi)
 248      000004
 195:fltk-1.3.4-1/png/pngtrans.c ****       png_ptr->flags |= PNG_FLAG_FILLER_AFTER;
 249              		.loc 1 195 0
 250 0053 75CF     		jne	.L40
 251              	.L45:
 196:fltk-1.3.4-1/png/pngtrans.c **** 
 252              		.loc 1 196 0
 253 0055 818F3001 		orl	$128, 304(%rdi)
 253      00008000 
 253      0000
 254 005f C3       		ret
 255              		.p2align 4,,10
 256              		.p2align 3
 257              	.L44:
 180:fltk-1.3.4-1/png/pngtrans.c ****                   "png_set_filler: inappropriate color type");
 258              		.loc 1 180 0
 259 0060 BE000000 		movl	$.LC7, %esi
 259      00
 260              	.LVL7:
 261 0065 E9000000 		jmp	png_app_error
 261      00
 262              	.LVL8:
 263 006a 660F1F44 		.p2align 4,,10
 263      0000
 264              		.p2align 3
 265              	.L37:
 162:fltk-1.3.4-1/png/pngtrans.c ****                {
 266              		.loc 1 162 0
 267 0070 80BF7802 		cmpb	$7, 632(%rdi)
 267      000007
 268 0077 760F     		jbe	.L39
 164:fltk-1.3.4-1/png/pngtrans.c ****                   break;
 269              		.loc 1 164 0
 270 0079 C6877C02 		movb	$2, 636(%rdi)
 270      000002
 165:fltk-1.3.4-1/png/pngtrans.c ****                }
 271              		.loc 1 165 0
 272 0080 EB93     		jmp	.L35
 273              		.p2align 4,,10
 274 0082 660F1F44 		.p2align 3
 274      0000
 275              	.L39:
 174:fltk-1.3.4-1/png/pngtrans.c ****                      "png_set_filler is invalid for low bit depth gray output");
 276              		.loc 1 174 0
 277 0088 BE000000 		movl	$.LC6, %esi
 277      00
 278              	.LVL9:
 279 008d E9000000 		jmp	png_app_error
 279      00
 280              	.LVL10:
 281              		.cfi_endproc
 282              	.LFE62:
 284              		.section	.text.unlikely.png_set_filler
 285              	.LCOLDE8:
 286              		.section	.text.png_set_filler
 287              	.LHOTE8:
 288              		.section	.text.unlikely.png_set_add_alpha,"ax",@progbits
 289              	.LCOLDB9:
 290              		.section	.text.png_set_add_alpha,"ax",@progbits
 291              	.LHOTB9:
 292              		.p2align 4,,15
 293              		.globl	png_set_add_alpha
 295              	png_set_add_alpha:
 296              	.LFB63:
 200:fltk-1.3.4-1/png/pngtrans.c **** }
 201:fltk-1.3.4-1/png/pngtrans.c **** 
 202:fltk-1.3.4-1/png/pngtrans.c **** /* Added to libpng-1.2.7 */
 203:fltk-1.3.4-1/png/pngtrans.c **** void PNGAPI
 204:fltk-1.3.4-1/png/pngtrans.c **** png_set_add_alpha(png_structrp png_ptr, png_uint_32 filler, int filler_loc)
 205:fltk-1.3.4-1/png/pngtrans.c **** {
 297              		.loc 1 205 0
 298              		.cfi_startproc
 299              	.LVL11:
 206:fltk-1.3.4-1/png/pngtrans.c ****    png_debug(1, "in png_set_add_alpha");
 207:fltk-1.3.4-1/png/pngtrans.c **** 
 208:fltk-1.3.4-1/png/pngtrans.c ****    if (png_ptr == NULL)
 300              		.loc 1 208 0
 301 0000 4885FF   		testq	%rdi, %rdi
 302 0003 7420     		je	.L55
 205:fltk-1.3.4-1/png/pngtrans.c ****    png_debug(1, "in png_set_add_alpha");
 303              		.loc 1 205 0
 304 0005 53       		pushq	%rbx
 305              		.cfi_def_cfa_offset 16
 306              		.cfi_offset 3, -16
 307 0006 4889FB   		movq	%rdi, %rbx
 209:fltk-1.3.4-1/png/pngtrans.c ****       return;
 210:fltk-1.3.4-1/png/pngtrans.c **** 
 211:fltk-1.3.4-1/png/pngtrans.c ****    png_set_filler(png_ptr, filler, filler_loc);
 308              		.loc 1 211 0
 309 0009 E8000000 		call	png_set_filler
 309      00
 310              	.LVL12:
 212:fltk-1.3.4-1/png/pngtrans.c ****    /* The above may fail to do anything. */
 213:fltk-1.3.4-1/png/pngtrans.c ****    if ((png_ptr->transformations & PNG_FILLER) != 0)
 311              		.loc 1 213 0
 312 000e 8B833401 		movl	308(%rbx), %eax
 312      0000
 313 0014 F6C480   		testb	$128, %ah
 314 0017 740B     		je	.L46
 214:fltk-1.3.4-1/png/pngtrans.c ****       png_ptr->transformations |= PNG_ADD_ALPHA;
 315              		.loc 1 214 0
 316 0019 0D000000 		orl	$16777216, %eax
 316      01
 317 001e 89833401 		movl	%eax, 308(%rbx)
 317      0000
 318              	.L46:
 215:fltk-1.3.4-1/png/pngtrans.c **** }
 319              		.loc 1 215 0
 320 0024 5B       		popq	%rbx
 321              		.cfi_restore 3
 322              		.cfi_def_cfa_offset 8
 323              	.LVL13:
 324              	.L55:
 325 0025 F3C3     		rep ret
 326              		.cfi_endproc
 327              	.LFE63:
 329              		.section	.text.unlikely.png_set_add_alpha
 330              	.LCOLDE9:
 331              		.section	.text.png_set_add_alpha
 332              	.LHOTE9:
 333              		.section	.text.unlikely.png_set_swap_alpha,"ax",@progbits
 334              	.LCOLDB10:
 335              		.section	.text.png_set_swap_alpha,"ax",@progbits
 336              	.LHOTB10:
 337              		.p2align 4,,15
 338              		.globl	png_set_swap_alpha
 340              	png_set_swap_alpha:
 341              	.LFB64:
 216:fltk-1.3.4-1/png/pngtrans.c **** 
 217:fltk-1.3.4-1/png/pngtrans.c **** #endif
 218:fltk-1.3.4-1/png/pngtrans.c **** 
 219:fltk-1.3.4-1/png/pngtrans.c **** #if defined(PNG_READ_SWAP_ALPHA_SUPPORTED) || \
 220:fltk-1.3.4-1/png/pngtrans.c ****     defined(PNG_WRITE_SWAP_ALPHA_SUPPORTED)
 221:fltk-1.3.4-1/png/pngtrans.c **** void PNGAPI
 222:fltk-1.3.4-1/png/pngtrans.c **** png_set_swap_alpha(png_structrp png_ptr)
 223:fltk-1.3.4-1/png/pngtrans.c **** {
 342              		.loc 1 223 0
 343              		.cfi_startproc
 344              	.LVL14:
 224:fltk-1.3.4-1/png/pngtrans.c ****    png_debug(1, "in png_set_swap_alpha");
 225:fltk-1.3.4-1/png/pngtrans.c **** 
 226:fltk-1.3.4-1/png/pngtrans.c ****    if (png_ptr == NULL)
 345              		.loc 1 226 0
 346 0000 4885FF   		testq	%rdi, %rdi
 347 0003 740A     		je	.L56
 227:fltk-1.3.4-1/png/pngtrans.c ****       return;
 228:fltk-1.3.4-1/png/pngtrans.c **** 
 229:fltk-1.3.4-1/png/pngtrans.c ****    png_ptr->transformations |= PNG_SWAP_ALPHA;
 348              		.loc 1 229 0
 349 0005 818F3401 		orl	$131072, 308(%rdi)
 349      00000000 
 349      0200
 350              	.L56:
 351 000f F3C3     		rep ret
 352              		.cfi_endproc
 353              	.LFE64:
 355              		.section	.text.unlikely.png_set_swap_alpha
 356              	.LCOLDE10:
 357              		.section	.text.png_set_swap_alpha
 358              	.LHOTE10:
 359              		.section	.text.unlikely.png_set_invert_alpha,"ax",@progbits
 360              	.LCOLDB11:
 361              		.section	.text.png_set_invert_alpha,"ax",@progbits
 362              	.LHOTB11:
 363              		.p2align 4,,15
 364              		.globl	png_set_invert_alpha
 366              	png_set_invert_alpha:
 367              	.LFB65:
 230:fltk-1.3.4-1/png/pngtrans.c **** }
 231:fltk-1.3.4-1/png/pngtrans.c **** #endif
 232:fltk-1.3.4-1/png/pngtrans.c **** 
 233:fltk-1.3.4-1/png/pngtrans.c **** #if defined(PNG_READ_INVERT_ALPHA_SUPPORTED) || \
 234:fltk-1.3.4-1/png/pngtrans.c ****     defined(PNG_WRITE_INVERT_ALPHA_SUPPORTED)
 235:fltk-1.3.4-1/png/pngtrans.c **** void PNGAPI
 236:fltk-1.3.4-1/png/pngtrans.c **** png_set_invert_alpha(png_structrp png_ptr)
 237:fltk-1.3.4-1/png/pngtrans.c **** {
 368              		.loc 1 237 0
 369              		.cfi_startproc
 370              	.LVL15:
 238:fltk-1.3.4-1/png/pngtrans.c ****    png_debug(1, "in png_set_invert_alpha");
 239:fltk-1.3.4-1/png/pngtrans.c **** 
 240:fltk-1.3.4-1/png/pngtrans.c ****    if (png_ptr == NULL)
 371              		.loc 1 240 0
 372 0000 4885FF   		testq	%rdi, %rdi
 373 0003 740A     		je	.L61
 241:fltk-1.3.4-1/png/pngtrans.c ****       return;
 242:fltk-1.3.4-1/png/pngtrans.c **** 
 243:fltk-1.3.4-1/png/pngtrans.c ****    png_ptr->transformations |= PNG_INVERT_ALPHA;
 374              		.loc 1 243 0
 375 0005 818F3401 		orl	$524288, 308(%rdi)
 375      00000000 
 375      0800
 376              	.L61:
 377 000f F3C3     		rep ret
 378              		.cfi_endproc
 379              	.LFE65:
 381              		.section	.text.unlikely.png_set_invert_alpha
 382              	.LCOLDE11:
 383              		.section	.text.png_set_invert_alpha
 384              	.LHOTE11:
 385              		.section	.text.unlikely.png_set_invert_mono,"ax",@progbits
 386              	.LCOLDB12:
 387              		.section	.text.png_set_invert_mono,"ax",@progbits
 388              	.LHOTB12:
 389              		.p2align 4,,15
 390              		.globl	png_set_invert_mono
 392              	png_set_invert_mono:
 393              	.LFB66:
 244:fltk-1.3.4-1/png/pngtrans.c **** }
 245:fltk-1.3.4-1/png/pngtrans.c **** #endif
 246:fltk-1.3.4-1/png/pngtrans.c **** 
 247:fltk-1.3.4-1/png/pngtrans.c **** #if defined(PNG_READ_INVERT_SUPPORTED) || defined(PNG_WRITE_INVERT_SUPPORTED)
 248:fltk-1.3.4-1/png/pngtrans.c **** void PNGAPI
 249:fltk-1.3.4-1/png/pngtrans.c **** png_set_invert_mono(png_structrp png_ptr)
 250:fltk-1.3.4-1/png/pngtrans.c **** {
 394              		.loc 1 250 0
 395              		.cfi_startproc
 396              	.LVL16:
 251:fltk-1.3.4-1/png/pngtrans.c ****    png_debug(1, "in png_set_invert_mono");
 252:fltk-1.3.4-1/png/pngtrans.c **** 
 253:fltk-1.3.4-1/png/pngtrans.c ****    if (png_ptr == NULL)
 397              		.loc 1 253 0
 398 0000 4885FF   		testq	%rdi, %rdi
 399 0003 7407     		je	.L66
 254:fltk-1.3.4-1/png/pngtrans.c ****       return;
 255:fltk-1.3.4-1/png/pngtrans.c **** 
 256:fltk-1.3.4-1/png/pngtrans.c ****    png_ptr->transformations |= PNG_INVERT_MONO;
 400              		.loc 1 256 0
 401 0005 838F3401 		orl	$32, 308(%rdi)
 401      000020
 402              	.L66:
 403 000c F3C3     		rep ret
 404              		.cfi_endproc
 405              	.LFE66:
 407              		.section	.text.unlikely.png_set_invert_mono
 408              	.LCOLDE12:
 409              		.section	.text.png_set_invert_mono
 410              	.LHOTE12:
 411              		.section	.text.unlikely.png_do_invert,"ax",@progbits
 412              	.LCOLDB13:
 413              		.section	.text.png_do_invert,"ax",@progbits
 414              	.LHOTB13:
 415              		.p2align 4,,15
 416              		.globl	png_do_invert
 418              	png_do_invert:
 419              	.LFB67:
 257:fltk-1.3.4-1/png/pngtrans.c **** }
 258:fltk-1.3.4-1/png/pngtrans.c **** 
 259:fltk-1.3.4-1/png/pngtrans.c **** /* Invert monochrome grayscale data */
 260:fltk-1.3.4-1/png/pngtrans.c **** void /* PRIVATE */
 261:fltk-1.3.4-1/png/pngtrans.c **** png_do_invert(png_row_infop row_info, png_bytep row)
 262:fltk-1.3.4-1/png/pngtrans.c **** {
 420              		.loc 1 262 0
 421              		.cfi_startproc
 422              	.LVL17:
 263:fltk-1.3.4-1/png/pngtrans.c ****    png_debug(1, "in png_do_invert");
 264:fltk-1.3.4-1/png/pngtrans.c **** 
 265:fltk-1.3.4-1/png/pngtrans.c ****   /* This test removed from libpng version 1.0.13 and 1.2.0:
 266:fltk-1.3.4-1/png/pngtrans.c ****    *   if (row_info->bit_depth == 1 &&
 267:fltk-1.3.4-1/png/pngtrans.c ****    */
 268:fltk-1.3.4-1/png/pngtrans.c ****    if (row_info->color_type == PNG_COLOR_TYPE_GRAY)
 423              		.loc 1 268 0
 424 0000 807F1000 		cmpb	$0, 16(%rdi)
 425 0004 7522     		jne	.L72
 426              	.LVL18:
 427              	.LBB2:
 269:fltk-1.3.4-1/png/pngtrans.c ****    {
 270:fltk-1.3.4-1/png/pngtrans.c ****       png_bytep rp = row;
 271:fltk-1.3.4-1/png/pngtrans.c ****       png_size_t i;
 272:fltk-1.3.4-1/png/pngtrans.c ****       png_size_t istop = row_info->rowbytes;
 428              		.loc 1 272 0
 429 0006 488B5708 		movq	8(%rdi), %rdx
 430              	.LVL19:
 273:fltk-1.3.4-1/png/pngtrans.c **** 
 274:fltk-1.3.4-1/png/pngtrans.c ****       for (i = 0; i < istop; i++)
 431              		.loc 1 274 0
 432 000a 4885D2   		testq	%rdx, %rdx
 433 000d 488D0416 		leaq	(%rsi,%rdx), %rax
 434 0011 7425     		je	.L71
 435              	.LVL20:
 436              		.p2align 4,,10
 437 0013 0F1F4400 		.p2align 3
 437      00
 438              	.L83:
 275:fltk-1.3.4-1/png/pngtrans.c ****       {
 276:fltk-1.3.4-1/png/pngtrans.c ****          *rp = (png_byte)(~(*rp));
 439              		.loc 1 276 0 discriminator 3
 440 0018 F616     		notb	(%rsi)
 277:fltk-1.3.4-1/png/pngtrans.c ****          rp++;
 441              		.loc 1 277 0 discriminator 3
 442 001a 4883C601 		addq	$1, %rsi
 443              	.LVL21:
 274:fltk-1.3.4-1/png/pngtrans.c ****       {
 444              		.loc 1 274 0 discriminator 3
 445 001e 4839C6   		cmpq	%rax, %rsi
 446 0021 75F5     		jne	.L83
 447 0023 F3C3     		rep ret
 448              	.LVL22:
 449              		.p2align 4,,10
 450 0025 0F1F00   		.p2align 3
 451              	.L72:
 452              	.LBE2:
 278:fltk-1.3.4-1/png/pngtrans.c ****       }
 279:fltk-1.3.4-1/png/pngtrans.c ****    }
 280:fltk-1.3.4-1/png/pngtrans.c **** 
 281:fltk-1.3.4-1/png/pngtrans.c ****    else if (row_info->color_type == PNG_COLOR_TYPE_GRAY_ALPHA &&
 453              		.loc 1 281 0
 454 0028 0FB74710 		movzwl	16(%rdi), %eax
 455 002c 663D0408 		cmpw	$2052, %ax
 456 0030 740E     		je	.L89
 282:fltk-1.3.4-1/png/pngtrans.c ****       row_info->bit_depth == 8)
 283:fltk-1.3.4-1/png/pngtrans.c ****    {
 284:fltk-1.3.4-1/png/pngtrans.c ****       png_bytep rp = row;
 285:fltk-1.3.4-1/png/pngtrans.c ****       png_size_t i;
 286:fltk-1.3.4-1/png/pngtrans.c ****       png_size_t istop = row_info->rowbytes;
 287:fltk-1.3.4-1/png/pngtrans.c **** 
 288:fltk-1.3.4-1/png/pngtrans.c ****       for (i = 0; i < istop; i += 2)
 289:fltk-1.3.4-1/png/pngtrans.c ****       {
 290:fltk-1.3.4-1/png/pngtrans.c ****          *rp = (png_byte)(~(*rp));
 291:fltk-1.3.4-1/png/pngtrans.c ****          rp += 2;
 292:fltk-1.3.4-1/png/pngtrans.c ****       }
 293:fltk-1.3.4-1/png/pngtrans.c ****    }
 294:fltk-1.3.4-1/png/pngtrans.c **** 
 295:fltk-1.3.4-1/png/pngtrans.c **** #ifdef PNG_16BIT_SUPPORTED
 296:fltk-1.3.4-1/png/pngtrans.c ****    else if (row_info->color_type == PNG_COLOR_TYPE_GRAY_ALPHA &&
 457              		.loc 1 296 0
 458 0032 663D0410 		cmpw	$4100, %ax
 459 0036 7428     		je	.L90
 460              	.L71:
 461 0038 F3C3     		rep ret
 462 003a 660F1F44 		.p2align 4,,10
 462      0000
 463              		.p2align 3
 464              	.L89:
 465              	.LVL23:
 466              	.LBB3:
 286:fltk-1.3.4-1/png/pngtrans.c **** 
 467              		.loc 1 286 0
 468 0040 488B5708 		movq	8(%rdi), %rdx
 469              	.LVL24:
 288:fltk-1.3.4-1/png/pngtrans.c ****       {
 470              		.loc 1 288 0
 471 0044 4885D2   		testq	%rdx, %rdx
 472 0047 74EF     		je	.L71
 288:fltk-1.3.4-1/png/pngtrans.c ****       {
 473              		.loc 1 288 0 is_stmt 0 discriminator 3
 474 0049 31C0     		xorl	%eax, %eax
 475              	.LVL25:
 476 004b 0F1F4400 		.p2align 4,,10
 476      00
 477              		.p2align 3
 478              	.L77:
 290:fltk-1.3.4-1/png/pngtrans.c ****          rp += 2;
 479              		.loc 1 290 0 is_stmt 1 discriminator 3
 480 0050 F61406   		notb	(%rsi,%rax)
 481              	.LVL26:
 288:fltk-1.3.4-1/png/pngtrans.c ****       {
 482              		.loc 1 288 0 discriminator 3
 483 0053 4883C002 		addq	$2, %rax
 484              	.LVL27:
 485 0057 4839C2   		cmpq	%rax, %rdx
 486 005a 77F4     		ja	.L77
 487 005c F3C3     		rep ret
 488              	.LVL28:
 489 005e 6690     		.p2align 4,,10
 490              		.p2align 3
 491              	.L90:
 492              	.LBE3:
 493              	.LBB4:
 297:fltk-1.3.4-1/png/pngtrans.c ****       row_info->bit_depth == 16)
 298:fltk-1.3.4-1/png/pngtrans.c ****    {
 299:fltk-1.3.4-1/png/pngtrans.c ****       png_bytep rp = row;
 300:fltk-1.3.4-1/png/pngtrans.c ****       png_size_t i;
 301:fltk-1.3.4-1/png/pngtrans.c ****       png_size_t istop = row_info->rowbytes;
 494              		.loc 1 301 0
 495 0060 488B4F08 		movq	8(%rdi), %rcx
 496              	.LVL29:
 302:fltk-1.3.4-1/png/pngtrans.c **** 
 303:fltk-1.3.4-1/png/pngtrans.c ****       for (i = 0; i < istop; i += 4)
 497              		.loc 1 303 0
 498 0064 4885C9   		testq	%rcx, %rcx
 499 0067 74CF     		je	.L71
 500              		.loc 1 303 0 is_stmt 0 discriminator 3
 501 0069 4889F0   		movq	%rsi, %rax
 502              	.LVL30:
 503 006c 0F1F4000 		.p2align 4,,10
 504              		.p2align 3
 505              	.L78:
 304:fltk-1.3.4-1/png/pngtrans.c ****       {
 305:fltk-1.3.4-1/png/pngtrans.c ****          *rp = (png_byte)(~(*rp));
 506              		.loc 1 305 0 is_stmt 1 discriminator 3
 507 0070 F610     		notb	(%rax)
 306:fltk-1.3.4-1/png/pngtrans.c ****          *(rp + 1) = (png_byte)(~(*(rp + 1)));
 508              		.loc 1 306 0 discriminator 3
 509 0072 F65001   		notb	1(%rax)
 307:fltk-1.3.4-1/png/pngtrans.c ****          rp += 4;
 510              		.loc 1 307 0 discriminator 3
 511 0075 4883C004 		addq	$4, %rax
 512              	.LVL31:
 303:fltk-1.3.4-1/png/pngtrans.c ****       {
 513              		.loc 1 303 0 discriminator 3
 514 0079 4889C2   		movq	%rax, %rdx
 515 007c 4829F2   		subq	%rsi, %rdx
 516              	.LVL32:
 517 007f 4839D1   		cmpq	%rdx, %rcx
 518 0082 77EC     		ja	.L78
 519 0084 F3C3     		rep ret
 520              	.LBE4:
 521              		.cfi_endproc
 522              	.LFE67:
 524              		.section	.text.unlikely.png_do_invert
 525              	.LCOLDE13:
 526              		.section	.text.png_do_invert
 527              	.LHOTE13:
 528              		.section	.text.unlikely.png_do_swap,"ax",@progbits
 529              	.LCOLDB14:
 530              		.section	.text.png_do_swap,"ax",@progbits
 531              	.LHOTB14:
 532              		.p2align 4,,15
 533              		.globl	png_do_swap
 535              	png_do_swap:
 536              	.LFB68:
 308:fltk-1.3.4-1/png/pngtrans.c ****       }
 309:fltk-1.3.4-1/png/pngtrans.c ****    }
 310:fltk-1.3.4-1/png/pngtrans.c **** #endif
 311:fltk-1.3.4-1/png/pngtrans.c **** }
 312:fltk-1.3.4-1/png/pngtrans.c **** #endif
 313:fltk-1.3.4-1/png/pngtrans.c **** 
 314:fltk-1.3.4-1/png/pngtrans.c **** #ifdef PNG_16BIT_SUPPORTED
 315:fltk-1.3.4-1/png/pngtrans.c **** #if defined(PNG_READ_SWAP_SUPPORTED) || defined(PNG_WRITE_SWAP_SUPPORTED)
 316:fltk-1.3.4-1/png/pngtrans.c **** /* Swaps byte order on 16 bit depth images */
 317:fltk-1.3.4-1/png/pngtrans.c **** void /* PRIVATE */
 318:fltk-1.3.4-1/png/pngtrans.c **** png_do_swap(png_row_infop row_info, png_bytep row)
 319:fltk-1.3.4-1/png/pngtrans.c **** {
 537              		.loc 1 319 0
 538              		.cfi_startproc
 539              	.LVL33:
 320:fltk-1.3.4-1/png/pngtrans.c ****    png_debug(1, "in png_do_swap");
 321:fltk-1.3.4-1/png/pngtrans.c **** 
 322:fltk-1.3.4-1/png/pngtrans.c ****    if (row_info->bit_depth == 16)
 540              		.loc 1 322 0
 541 0000 807F1110 		cmpb	$16, 17(%rdi)
 542 0004 740A     		je	.L99
 543              	.L91:
 544 0006 F3C3     		rep ret
 545 0008 0F1F8400 		.p2align 4,,10
 545      00000000 
 546              		.p2align 3
 547              	.L99:
 548              	.LVL34:
 549              	.LBB5:
 323:fltk-1.3.4-1/png/pngtrans.c ****    {
 324:fltk-1.3.4-1/png/pngtrans.c ****       png_bytep rp = row;
 325:fltk-1.3.4-1/png/pngtrans.c ****       png_uint_32 i;
 326:fltk-1.3.4-1/png/pngtrans.c ****       png_uint_32 istop= row_info->width * row_info->channels;
 550              		.loc 1 326 0
 551 0010 0FB64712 		movzbl	18(%rdi), %eax
 552 0014 0FAF07   		imull	(%rdi), %eax
 553              	.LVL35:
 327:fltk-1.3.4-1/png/pngtrans.c **** 
 328:fltk-1.3.4-1/png/pngtrans.c ****       for (i = 0; i < istop; i++, rp += 2)
 554              		.loc 1 328 0
 555 0017 85C0     		testl	%eax, %eax
 556 0019 74EB     		je	.L91
 557 001b 83E801   		subl	$1, %eax
 558              	.LVL36:
 559 001e 488D4C46 		leaq	2(%rsi,%rax,2), %rcx
 559      02
 560              	.LVL37:
 561              		.p2align 4,,10
 562 0023 0F1F4400 		.p2align 3
 562      00
 563              	.L94:
 564              	.LBB6:
 329:fltk-1.3.4-1/png/pngtrans.c ****       {
 330:fltk-1.3.4-1/png/pngtrans.c **** #ifdef PNG_BUILTIN_BSWAP16_SUPPORTED
 331:fltk-1.3.4-1/png/pngtrans.c ****          /* Feature added to libpng-1.6.11 for testing purposes, not
 332:fltk-1.3.4-1/png/pngtrans.c ****           * enabled by default.
 333:fltk-1.3.4-1/png/pngtrans.c ****           */
 334:fltk-1.3.4-1/png/pngtrans.c ****          *(png_uint_16*)rp = __builtin_bswap16(*(png_uint_16*)rp);
 335:fltk-1.3.4-1/png/pngtrans.c **** #else
 336:fltk-1.3.4-1/png/pngtrans.c ****          png_byte t = *rp;
 565              		.loc 1 336 0 discriminator 3
 566 0028 0FB606   		movzbl	(%rsi), %eax
 567              	.LVL38:
 337:fltk-1.3.4-1/png/pngtrans.c ****          *rp = *(rp + 1);
 568              		.loc 1 337 0 discriminator 3
 569 002b 0FB65601 		movzbl	1(%rsi), %edx
 570              	.LBE6:
 328:fltk-1.3.4-1/png/pngtrans.c ****       {
 571              		.loc 1 328 0 discriminator 3
 572 002f 4883C602 		addq	$2, %rsi
 573              	.LVL39:
 574              	.LBB7:
 575              		.loc 1 337 0 discriminator 3
 576 0033 8856FE   		movb	%dl, -2(%rsi)
 338:fltk-1.3.4-1/png/pngtrans.c ****          *(rp + 1) = t;
 577              		.loc 1 338 0 discriminator 3
 578 0036 8846FF   		movb	%al, -1(%rsi)
 579              	.LVL40:
 580              	.LBE7:
 328:fltk-1.3.4-1/png/pngtrans.c ****       {
 581              		.loc 1 328 0 discriminator 3
 582 0039 4839CE   		cmpq	%rcx, %rsi
 583 003c 75EA     		jne	.L94
 584 003e F3C3     		rep ret
 585              	.LBE5:
 586              		.cfi_endproc
 587              	.LFE68:
 589              		.section	.text.unlikely.png_do_swap
 590              	.LCOLDE14:
 591              		.section	.text.png_do_swap
 592              	.LHOTE14:
 593              		.section	.text.unlikely.png_do_packswap,"ax",@progbits
 594              	.LCOLDB15:
 595              		.section	.text.png_do_packswap,"ax",@progbits
 596              	.LHOTB15:
 597              		.p2align 4,,15
 598              		.globl	png_do_packswap
 600              	png_do_packswap:
 601              	.LFB69:
 339:fltk-1.3.4-1/png/pngtrans.c **** #endif
 340:fltk-1.3.4-1/png/pngtrans.c ****       }
 341:fltk-1.3.4-1/png/pngtrans.c ****    }
 342:fltk-1.3.4-1/png/pngtrans.c **** }
 343:fltk-1.3.4-1/png/pngtrans.c **** #endif
 344:fltk-1.3.4-1/png/pngtrans.c **** #endif
 345:fltk-1.3.4-1/png/pngtrans.c **** 
 346:fltk-1.3.4-1/png/pngtrans.c **** #if defined(PNG_READ_PACKSWAP_SUPPORTED)||defined(PNG_WRITE_PACKSWAP_SUPPORTED)
 347:fltk-1.3.4-1/png/pngtrans.c **** static PNG_CONST png_byte onebppswaptable[256] = {
 348:fltk-1.3.4-1/png/pngtrans.c ****    0x00, 0x80, 0x40, 0xC0, 0x20, 0xA0, 0x60, 0xE0,
 349:fltk-1.3.4-1/png/pngtrans.c ****    0x10, 0x90, 0x50, 0xD0, 0x30, 0xB0, 0x70, 0xF0,
 350:fltk-1.3.4-1/png/pngtrans.c ****    0x08, 0x88, 0x48, 0xC8, 0x28, 0xA8, 0x68, 0xE8,
 351:fltk-1.3.4-1/png/pngtrans.c ****    0x18, 0x98, 0x58, 0xD8, 0x38, 0xB8, 0x78, 0xF8,
 352:fltk-1.3.4-1/png/pngtrans.c ****    0x04, 0x84, 0x44, 0xC4, 0x24, 0xA4, 0x64, 0xE4,
 353:fltk-1.3.4-1/png/pngtrans.c ****    0x14, 0x94, 0x54, 0xD4, 0x34, 0xB4, 0x74, 0xF4,
 354:fltk-1.3.4-1/png/pngtrans.c ****    0x0C, 0x8C, 0x4C, 0xCC, 0x2C, 0xAC, 0x6C, 0xEC,
 355:fltk-1.3.4-1/png/pngtrans.c ****    0x1C, 0x9C, 0x5C, 0xDC, 0x3C, 0xBC, 0x7C, 0xFC,
 356:fltk-1.3.4-1/png/pngtrans.c ****    0x02, 0x82, 0x42, 0xC2, 0x22, 0xA2, 0x62, 0xE2,
 357:fltk-1.3.4-1/png/pngtrans.c ****    0x12, 0x92, 0x52, 0xD2, 0x32, 0xB2, 0x72, 0xF2,
 358:fltk-1.3.4-1/png/pngtrans.c ****    0x0A, 0x8A, 0x4A, 0xCA, 0x2A, 0xAA, 0x6A, 0xEA,
 359:fltk-1.3.4-1/png/pngtrans.c ****    0x1A, 0x9A, 0x5A, 0xDA, 0x3A, 0xBA, 0x7A, 0xFA,
 360:fltk-1.3.4-1/png/pngtrans.c ****    0x06, 0x86, 0x46, 0xC6, 0x26, 0xA6, 0x66, 0xE6,
 361:fltk-1.3.4-1/png/pngtrans.c ****    0x16, 0x96, 0x56, 0xD6, 0x36, 0xB6, 0x76, 0xF6,
 362:fltk-1.3.4-1/png/pngtrans.c ****    0x0E, 0x8E, 0x4E, 0xCE, 0x2E, 0xAE, 0x6E, 0xEE,
 363:fltk-1.3.4-1/png/pngtrans.c ****    0x1E, 0x9E, 0x5E, 0xDE, 0x3E, 0xBE, 0x7E, 0xFE,
 364:fltk-1.3.4-1/png/pngtrans.c ****    0x01, 0x81, 0x41, 0xC1, 0x21, 0xA1, 0x61, 0xE1,
 365:fltk-1.3.4-1/png/pngtrans.c ****    0x11, 0x91, 0x51, 0xD1, 0x31, 0xB1, 0x71, 0xF1,
 366:fltk-1.3.4-1/png/pngtrans.c ****    0x09, 0x89, 0x49, 0xC9, 0x29, 0xA9, 0x69, 0xE9,
 367:fltk-1.3.4-1/png/pngtrans.c ****    0x19, 0x99, 0x59, 0xD9, 0x39, 0xB9, 0x79, 0xF9,
 368:fltk-1.3.4-1/png/pngtrans.c ****    0x05, 0x85, 0x45, 0xC5, 0x25, 0xA5, 0x65, 0xE5,
 369:fltk-1.3.4-1/png/pngtrans.c ****    0x15, 0x95, 0x55, 0xD5, 0x35, 0xB5, 0x75, 0xF5,
 370:fltk-1.3.4-1/png/pngtrans.c ****    0x0D, 0x8D, 0x4D, 0xCD, 0x2D, 0xAD, 0x6D, 0xED,
 371:fltk-1.3.4-1/png/pngtrans.c ****    0x1D, 0x9D, 0x5D, 0xDD, 0x3D, 0xBD, 0x7D, 0xFD,
 372:fltk-1.3.4-1/png/pngtrans.c ****    0x03, 0x83, 0x43, 0xC3, 0x23, 0xA3, 0x63, 0xE3,
 373:fltk-1.3.4-1/png/pngtrans.c ****    0x13, 0x93, 0x53, 0xD3, 0x33, 0xB3, 0x73, 0xF3,
 374:fltk-1.3.4-1/png/pngtrans.c ****    0x0B, 0x8B, 0x4B, 0xCB, 0x2B, 0xAB, 0x6B, 0xEB,
 375:fltk-1.3.4-1/png/pngtrans.c ****    0x1B, 0x9B, 0x5B, 0xDB, 0x3B, 0xBB, 0x7B, 0xFB,
 376:fltk-1.3.4-1/png/pngtrans.c ****    0x07, 0x87, 0x47, 0xC7, 0x27, 0xA7, 0x67, 0xE7,
 377:fltk-1.3.4-1/png/pngtrans.c ****    0x17, 0x97, 0x57, 0xD7, 0x37, 0xB7, 0x77, 0xF7,
 378:fltk-1.3.4-1/png/pngtrans.c ****    0x0F, 0x8F, 0x4F, 0xCF, 0x2F, 0xAF, 0x6F, 0xEF,
 379:fltk-1.3.4-1/png/pngtrans.c ****    0x1F, 0x9F, 0x5F, 0xDF, 0x3F, 0xBF, 0x7F, 0xFF
 380:fltk-1.3.4-1/png/pngtrans.c **** };
 381:fltk-1.3.4-1/png/pngtrans.c **** 
 382:fltk-1.3.4-1/png/pngtrans.c **** static PNG_CONST png_byte twobppswaptable[256] = {
 383:fltk-1.3.4-1/png/pngtrans.c ****    0x00, 0x40, 0x80, 0xC0, 0x10, 0x50, 0x90, 0xD0,
 384:fltk-1.3.4-1/png/pngtrans.c ****    0x20, 0x60, 0xA0, 0xE0, 0x30, 0x70, 0xB0, 0xF0,
 385:fltk-1.3.4-1/png/pngtrans.c ****    0x04, 0x44, 0x84, 0xC4, 0x14, 0x54, 0x94, 0xD4,
 386:fltk-1.3.4-1/png/pngtrans.c ****    0x24, 0x64, 0xA4, 0xE4, 0x34, 0x74, 0xB4, 0xF4,
 387:fltk-1.3.4-1/png/pngtrans.c ****    0x08, 0x48, 0x88, 0xC8, 0x18, 0x58, 0x98, 0xD8,
 388:fltk-1.3.4-1/png/pngtrans.c ****    0x28, 0x68, 0xA8, 0xE8, 0x38, 0x78, 0xB8, 0xF8,
 389:fltk-1.3.4-1/png/pngtrans.c ****    0x0C, 0x4C, 0x8C, 0xCC, 0x1C, 0x5C, 0x9C, 0xDC,
 390:fltk-1.3.4-1/png/pngtrans.c ****    0x2C, 0x6C, 0xAC, 0xEC, 0x3C, 0x7C, 0xBC, 0xFC,
 391:fltk-1.3.4-1/png/pngtrans.c ****    0x01, 0x41, 0x81, 0xC1, 0x11, 0x51, 0x91, 0xD1,
 392:fltk-1.3.4-1/png/pngtrans.c ****    0x21, 0x61, 0xA1, 0xE1, 0x31, 0x71, 0xB1, 0xF1,
 393:fltk-1.3.4-1/png/pngtrans.c ****    0x05, 0x45, 0x85, 0xC5, 0x15, 0x55, 0x95, 0xD5,
 394:fltk-1.3.4-1/png/pngtrans.c ****    0x25, 0x65, 0xA5, 0xE5, 0x35, 0x75, 0xB5, 0xF5,
 395:fltk-1.3.4-1/png/pngtrans.c ****    0x09, 0x49, 0x89, 0xC9, 0x19, 0x59, 0x99, 0xD9,
 396:fltk-1.3.4-1/png/pngtrans.c ****    0x29, 0x69, 0xA9, 0xE9, 0x39, 0x79, 0xB9, 0xF9,
 397:fltk-1.3.4-1/png/pngtrans.c ****    0x0D, 0x4D, 0x8D, 0xCD, 0x1D, 0x5D, 0x9D, 0xDD,
 398:fltk-1.3.4-1/png/pngtrans.c ****    0x2D, 0x6D, 0xAD, 0xED, 0x3D, 0x7D, 0xBD, 0xFD,
 399:fltk-1.3.4-1/png/pngtrans.c ****    0x02, 0x42, 0x82, 0xC2, 0x12, 0x52, 0x92, 0xD2,
 400:fltk-1.3.4-1/png/pngtrans.c ****    0x22, 0x62, 0xA2, 0xE2, 0x32, 0x72, 0xB2, 0xF2,
 401:fltk-1.3.4-1/png/pngtrans.c ****    0x06, 0x46, 0x86, 0xC6, 0x16, 0x56, 0x96, 0xD6,
 402:fltk-1.3.4-1/png/pngtrans.c ****    0x26, 0x66, 0xA6, 0xE6, 0x36, 0x76, 0xB6, 0xF6,
 403:fltk-1.3.4-1/png/pngtrans.c ****    0x0A, 0x4A, 0x8A, 0xCA, 0x1A, 0x5A, 0x9A, 0xDA,
 404:fltk-1.3.4-1/png/pngtrans.c ****    0x2A, 0x6A, 0xAA, 0xEA, 0x3A, 0x7A, 0xBA, 0xFA,
 405:fltk-1.3.4-1/png/pngtrans.c ****    0x0E, 0x4E, 0x8E, 0xCE, 0x1E, 0x5E, 0x9E, 0xDE,
 406:fltk-1.3.4-1/png/pngtrans.c ****    0x2E, 0x6E, 0xAE, 0xEE, 0x3E, 0x7E, 0xBE, 0xFE,
 407:fltk-1.3.4-1/png/pngtrans.c ****    0x03, 0x43, 0x83, 0xC3, 0x13, 0x53, 0x93, 0xD3,
 408:fltk-1.3.4-1/png/pngtrans.c ****    0x23, 0x63, 0xA3, 0xE3, 0x33, 0x73, 0xB3, 0xF3,
 409:fltk-1.3.4-1/png/pngtrans.c ****    0x07, 0x47, 0x87, 0xC7, 0x17, 0x57, 0x97, 0xD7,
 410:fltk-1.3.4-1/png/pngtrans.c ****    0x27, 0x67, 0xA7, 0xE7, 0x37, 0x77, 0xB7, 0xF7,
 411:fltk-1.3.4-1/png/pngtrans.c ****    0x0B, 0x4B, 0x8B, 0xCB, 0x1B, 0x5B, 0x9B, 0xDB,
 412:fltk-1.3.4-1/png/pngtrans.c ****    0x2B, 0x6B, 0xAB, 0xEB, 0x3B, 0x7B, 0xBB, 0xFB,
 413:fltk-1.3.4-1/png/pngtrans.c ****    0x0F, 0x4F, 0x8F, 0xCF, 0x1F, 0x5F, 0x9F, 0xDF,
 414:fltk-1.3.4-1/png/pngtrans.c ****    0x2F, 0x6F, 0xAF, 0xEF, 0x3F, 0x7F, 0xBF, 0xFF
 415:fltk-1.3.4-1/png/pngtrans.c **** };
 416:fltk-1.3.4-1/png/pngtrans.c **** 
 417:fltk-1.3.4-1/png/pngtrans.c **** static PNG_CONST png_byte fourbppswaptable[256] = {
 418:fltk-1.3.4-1/png/pngtrans.c ****    0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70,
 419:fltk-1.3.4-1/png/pngtrans.c ****    0x80, 0x90, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0, 0xF0,
 420:fltk-1.3.4-1/png/pngtrans.c ****    0x01, 0x11, 0x21, 0x31, 0x41, 0x51, 0x61, 0x71,
 421:fltk-1.3.4-1/png/pngtrans.c ****    0x81, 0x91, 0xA1, 0xB1, 0xC1, 0xD1, 0xE1, 0xF1,
 422:fltk-1.3.4-1/png/pngtrans.c ****    0x02, 0x12, 0x22, 0x32, 0x42, 0x52, 0x62, 0x72,
 423:fltk-1.3.4-1/png/pngtrans.c ****    0x82, 0x92, 0xA2, 0xB2, 0xC2, 0xD2, 0xE2, 0xF2,
 424:fltk-1.3.4-1/png/pngtrans.c ****    0x03, 0x13, 0x23, 0x33, 0x43, 0x53, 0x63, 0x73,
 425:fltk-1.3.4-1/png/pngtrans.c ****    0x83, 0x93, 0xA3, 0xB3, 0xC3, 0xD3, 0xE3, 0xF3,
 426:fltk-1.3.4-1/png/pngtrans.c ****    0x04, 0x14, 0x24, 0x34, 0x44, 0x54, 0x64, 0x74,
 427:fltk-1.3.4-1/png/pngtrans.c ****    0x84, 0x94, 0xA4, 0xB4, 0xC4, 0xD4, 0xE4, 0xF4,
 428:fltk-1.3.4-1/png/pngtrans.c ****    0x05, 0x15, 0x25, 0x35, 0x45, 0x55, 0x65, 0x75,
 429:fltk-1.3.4-1/png/pngtrans.c ****    0x85, 0x95, 0xA5, 0xB5, 0xC5, 0xD5, 0xE5, 0xF5,
 430:fltk-1.3.4-1/png/pngtrans.c ****    0x06, 0x16, 0x26, 0x36, 0x46, 0x56, 0x66, 0x76,
 431:fltk-1.3.4-1/png/pngtrans.c ****    0x86, 0x96, 0xA6, 0xB6, 0xC6, 0xD6, 0xE6, 0xF6,
 432:fltk-1.3.4-1/png/pngtrans.c ****    0x07, 0x17, 0x27, 0x37, 0x47, 0x57, 0x67, 0x77,
 433:fltk-1.3.4-1/png/pngtrans.c ****    0x87, 0x97, 0xA7, 0xB7, 0xC7, 0xD7, 0xE7, 0xF7,
 434:fltk-1.3.4-1/png/pngtrans.c ****    0x08, 0x18, 0x28, 0x38, 0x48, 0x58, 0x68, 0x78,
 435:fltk-1.3.4-1/png/pngtrans.c ****    0x88, 0x98, 0xA8, 0xB8, 0xC8, 0xD8, 0xE8, 0xF8,
 436:fltk-1.3.4-1/png/pngtrans.c ****    0x09, 0x19, 0x29, 0x39, 0x49, 0x59, 0x69, 0x79,
 437:fltk-1.3.4-1/png/pngtrans.c ****    0x89, 0x99, 0xA9, 0xB9, 0xC9, 0xD9, 0xE9, 0xF9,
 438:fltk-1.3.4-1/png/pngtrans.c ****    0x0A, 0x1A, 0x2A, 0x3A, 0x4A, 0x5A, 0x6A, 0x7A,
 439:fltk-1.3.4-1/png/pngtrans.c ****    0x8A, 0x9A, 0xAA, 0xBA, 0xCA, 0xDA, 0xEA, 0xFA,
 440:fltk-1.3.4-1/png/pngtrans.c ****    0x0B, 0x1B, 0x2B, 0x3B, 0x4B, 0x5B, 0x6B, 0x7B,
 441:fltk-1.3.4-1/png/pngtrans.c ****    0x8B, 0x9B, 0xAB, 0xBB, 0xCB, 0xDB, 0xEB, 0xFB,
 442:fltk-1.3.4-1/png/pngtrans.c ****    0x0C, 0x1C, 0x2C, 0x3C, 0x4C, 0x5C, 0x6C, 0x7C,
 443:fltk-1.3.4-1/png/pngtrans.c ****    0x8C, 0x9C, 0xAC, 0xBC, 0xCC, 0xDC, 0xEC, 0xFC,
 444:fltk-1.3.4-1/png/pngtrans.c ****    0x0D, 0x1D, 0x2D, 0x3D, 0x4D, 0x5D, 0x6D, 0x7D,
 445:fltk-1.3.4-1/png/pngtrans.c ****    0x8D, 0x9D, 0xAD, 0xBD, 0xCD, 0xDD, 0xED, 0xFD,
 446:fltk-1.3.4-1/png/pngtrans.c ****    0x0E, 0x1E, 0x2E, 0x3E, 0x4E, 0x5E, 0x6E, 0x7E,
 447:fltk-1.3.4-1/png/pngtrans.c ****    0x8E, 0x9E, 0xAE, 0xBE, 0xCE, 0xDE, 0xEE, 0xFE,
 448:fltk-1.3.4-1/png/pngtrans.c ****    0x0F, 0x1F, 0x2F, 0x3F, 0x4F, 0x5F, 0x6F, 0x7F,
 449:fltk-1.3.4-1/png/pngtrans.c ****    0x8F, 0x9F, 0xAF, 0xBF, 0xCF, 0xDF, 0xEF, 0xFF
 450:fltk-1.3.4-1/png/pngtrans.c **** };
 451:fltk-1.3.4-1/png/pngtrans.c **** 
 452:fltk-1.3.4-1/png/pngtrans.c **** /* Swaps pixel packing order within bytes */
 453:fltk-1.3.4-1/png/pngtrans.c **** void /* PRIVATE */
 454:fltk-1.3.4-1/png/pngtrans.c **** png_do_packswap(png_row_infop row_info, png_bytep row)
 455:fltk-1.3.4-1/png/pngtrans.c **** {
 602              		.loc 1 455 0
 603              		.cfi_startproc
 604              	.LVL41:
 456:fltk-1.3.4-1/png/pngtrans.c ****    png_debug(1, "in png_do_packswap");
 457:fltk-1.3.4-1/png/pngtrans.c **** 
 458:fltk-1.3.4-1/png/pngtrans.c ****    if (row_info->bit_depth < 8)
 605              		.loc 1 458 0
 606 0000 0FB64711 		movzbl	17(%rdi), %eax
 607 0004 3C07     		cmpb	$7, %al
 608 0006 7711     		ja	.L100
 609              	.LVL42:
 610              	.LBB8:
 459:fltk-1.3.4-1/png/pngtrans.c ****    {
 460:fltk-1.3.4-1/png/pngtrans.c ****       png_bytep rp;
 461:fltk-1.3.4-1/png/pngtrans.c ****       png_const_bytep end, table;
 462:fltk-1.3.4-1/png/pngtrans.c **** 
 463:fltk-1.3.4-1/png/pngtrans.c ****       end = row + row_info->rowbytes;
 464:fltk-1.3.4-1/png/pngtrans.c **** 
 465:fltk-1.3.4-1/png/pngtrans.c ****       if (row_info->bit_depth == 1)
 611              		.loc 1 465 0
 612 0008 3C01     		cmpb	$1, %al
 613 000a 7444     		je	.L105
 466:fltk-1.3.4-1/png/pngtrans.c ****          table = onebppswaptable;
 467:fltk-1.3.4-1/png/pngtrans.c **** 
 468:fltk-1.3.4-1/png/pngtrans.c ****       else if (row_info->bit_depth == 2)
 614              		.loc 1 468 0
 615 000c 3C02     		cmpb	$2, %al
 616 000e 7410     		je	.L106
 469:fltk-1.3.4-1/png/pngtrans.c ****          table = twobppswaptable;
 470:fltk-1.3.4-1/png/pngtrans.c **** 
 471:fltk-1.3.4-1/png/pngtrans.c ****       else if (row_info->bit_depth == 4)
 617              		.loc 1 471 0
 618 0010 3C04     		cmpb	$4, %al
 472:fltk-1.3.4-1/png/pngtrans.c ****          table = fourbppswaptable;
 619              		.loc 1 472 0
 620 0012 B9000000 		movl	$fourbppswaptable, %ecx
 620      00
 471:fltk-1.3.4-1/png/pngtrans.c ****          table = fourbppswaptable;
 621              		.loc 1 471 0
 622 0017 740C     		je	.L102
 623              	.LVL43:
 624              	.L100:
 625 0019 F3C3     		rep ret
 626              	.LVL44:
 627 001b 0F1F4400 		.p2align 4,,10
 627      00
 628              		.p2align 3
 629              	.L106:
 469:fltk-1.3.4-1/png/pngtrans.c ****          table = twobppswaptable;
 630              		.loc 1 469 0
 631 0020 B9000000 		movl	$twobppswaptable, %ecx
 631      00
 632              	.L102:
 463:fltk-1.3.4-1/png/pngtrans.c **** 
 633              		.loc 1 463 0
 634 0025 4889F2   		movq	%rsi, %rdx
 635 0028 48035708 		addq	8(%rdi), %rdx
 636              	.LVL45:
 473:fltk-1.3.4-1/png/pngtrans.c **** 
 474:fltk-1.3.4-1/png/pngtrans.c ****       else
 475:fltk-1.3.4-1/png/pngtrans.c ****          return;
 476:fltk-1.3.4-1/png/pngtrans.c **** 
 477:fltk-1.3.4-1/png/pngtrans.c ****       for (rp = row; rp < end; rp++)
 637              		.loc 1 477 0
 638 002c 4839D6   		cmpq	%rdx, %rsi
 639 002f 73E8     		jnb	.L100
 640              	.LVL46:
 641              		.p2align 4,,10
 642 0031 0F1F8000 		.p2align 3
 642      000000
 643              	.L104:
 478:fltk-1.3.4-1/png/pngtrans.c ****          *rp = table[*rp];
 644              		.loc 1 478 0 discriminator 3
 645 0038 0FB606   		movzbl	(%rsi), %eax
 477:fltk-1.3.4-1/png/pngtrans.c ****          *rp = table[*rp];
 646              		.loc 1 477 0 discriminator 3
 647 003b 4883C601 		addq	$1, %rsi
 648              	.LVL47:
 649              		.loc 1 478 0 discriminator 3
 650 003f 0FB60401 		movzbl	(%rcx,%rax), %eax
 651 0043 8846FF   		movb	%al, -1(%rsi)
 652              	.LVL48:
 477:fltk-1.3.4-1/png/pngtrans.c ****          *rp = table[*rp];
 653              		.loc 1 477 0 discriminator 3
 654 0046 4839F2   		cmpq	%rsi, %rdx
 655 0049 75ED     		jne	.L104
 656 004b F3C3     		rep ret
 657              	.LVL49:
 658 004d 0F1F00   		.p2align 4,,10
 659              		.p2align 3
 660              	.L105:
 466:fltk-1.3.4-1/png/pngtrans.c **** 
 661              		.loc 1 466 0
 662 0050 B9000000 		movl	$onebppswaptable, %ecx
 662      00
 663 0055 EBCE     		jmp	.L102
 664              	.LBE8:
 665              		.cfi_endproc
 666              	.LFE69:
 668              		.section	.text.unlikely.png_do_packswap
 669              	.LCOLDE15:
 670              		.section	.text.png_do_packswap
 671              	.LHOTE15:
 672              		.section	.text.unlikely.png_do_strip_channel,"ax",@progbits
 673              	.LCOLDB16:
 674              		.section	.text.png_do_strip_channel,"ax",@progbits
 675              	.LHOTB16:
 676              		.p2align 4,,15
 677              		.globl	png_do_strip_channel
 679              	png_do_strip_channel:
 680              	.LFB70:
 479:fltk-1.3.4-1/png/pngtrans.c ****    }
 480:fltk-1.3.4-1/png/pngtrans.c **** }
 481:fltk-1.3.4-1/png/pngtrans.c **** #endif /* PACKSWAP || WRITE_PACKSWAP */
 482:fltk-1.3.4-1/png/pngtrans.c **** 
 483:fltk-1.3.4-1/png/pngtrans.c **** #if defined(PNG_WRITE_FILLER_SUPPORTED) || \
 484:fltk-1.3.4-1/png/pngtrans.c ****     defined(PNG_READ_STRIP_ALPHA_SUPPORTED)
 485:fltk-1.3.4-1/png/pngtrans.c **** /* Remove a channel - this used to be 'png_do_strip_filler' but it used a
 486:fltk-1.3.4-1/png/pngtrans.c ****  * somewhat weird combination of flags to determine what to do.  All the calls
 487:fltk-1.3.4-1/png/pngtrans.c ****  * to png_do_strip_filler are changed in 1.5.2 to call this instead with the
 488:fltk-1.3.4-1/png/pngtrans.c ****  * correct arguments.
 489:fltk-1.3.4-1/png/pngtrans.c ****  *
 490:fltk-1.3.4-1/png/pngtrans.c ****  * The routine isn't general - the channel must be the channel at the start or
 491:fltk-1.3.4-1/png/pngtrans.c ****  * end (not in the middle) of each pixel.
 492:fltk-1.3.4-1/png/pngtrans.c ****  */
 493:fltk-1.3.4-1/png/pngtrans.c **** void /* PRIVATE */
 494:fltk-1.3.4-1/png/pngtrans.c **** png_do_strip_channel(png_row_infop row_info, png_bytep row, int at_start)
 495:fltk-1.3.4-1/png/pngtrans.c **** {
 681              		.loc 1 495 0
 682              		.cfi_startproc
 683              	.LVL50:
 496:fltk-1.3.4-1/png/pngtrans.c ****    png_bytep sp = row; /* source pointer */
 497:fltk-1.3.4-1/png/pngtrans.c ****    png_bytep dp = row; /* destination pointer */
 498:fltk-1.3.4-1/png/pngtrans.c ****    png_bytep ep = row + row_info->rowbytes; /* One beyond end of row */
 499:fltk-1.3.4-1/png/pngtrans.c **** 
 500:fltk-1.3.4-1/png/pngtrans.c ****    /* At the start sp will point to the first byte to copy and dp to where
 501:fltk-1.3.4-1/png/pngtrans.c ****     * it is copied to.  ep always points just beyond the end of the row, so
 502:fltk-1.3.4-1/png/pngtrans.c ****     * the loop simply copies (channels-1) channels until sp reaches ep.
 503:fltk-1.3.4-1/png/pngtrans.c ****     *
 504:fltk-1.3.4-1/png/pngtrans.c ****     * at_start:        0 -- convert AG, XG, ARGB, XRGB, AAGG, XXGG, etc.
 505:fltk-1.3.4-1/png/pngtrans.c ****     *            nonzero -- convert GA, GX, RGBA, RGBX, GGAA, RRGGBBXX, etc.
 506:fltk-1.3.4-1/png/pngtrans.c ****     */
 507:fltk-1.3.4-1/png/pngtrans.c **** 
 508:fltk-1.3.4-1/png/pngtrans.c ****    /* GA, GX, XG cases */
 509:fltk-1.3.4-1/png/pngtrans.c ****    if (row_info->channels == 2)
 684              		.loc 1 509 0
 685 0000 0FB64712 		movzbl	18(%rdi), %eax
 498:fltk-1.3.4-1/png/pngtrans.c **** 
 686              		.loc 1 498 0
 687 0004 4889F1   		movq	%rsi, %rcx
 688 0007 48034F08 		addq	8(%rdi), %rcx
 689              	.LVL51:
 690              		.loc 1 509 0
 691 000b 3C02     		cmpb	$2, %al
 692 000d 0F849D00 		je	.L136
 692      0000
 510:fltk-1.3.4-1/png/pngtrans.c ****    {
 511:fltk-1.3.4-1/png/pngtrans.c ****       if (row_info->bit_depth == 8)
 512:fltk-1.3.4-1/png/pngtrans.c ****       {
 513:fltk-1.3.4-1/png/pngtrans.c ****          if (at_start != 0) /* Skip initial filler */
 514:fltk-1.3.4-1/png/pngtrans.c ****             ++sp;
 515:fltk-1.3.4-1/png/pngtrans.c ****          else          /* Skip initial channel and, for sp, the filler */
 516:fltk-1.3.4-1/png/pngtrans.c ****             sp += 2, ++dp;
 517:fltk-1.3.4-1/png/pngtrans.c **** 
 518:fltk-1.3.4-1/png/pngtrans.c ****          /* For a 1 pixel wide image there is nothing to do */
 519:fltk-1.3.4-1/png/pngtrans.c ****          while (sp < ep)
 520:fltk-1.3.4-1/png/pngtrans.c ****             *dp++ = *sp, sp += 2;
 521:fltk-1.3.4-1/png/pngtrans.c **** 
 522:fltk-1.3.4-1/png/pngtrans.c ****          row_info->pixel_depth = 8;
 523:fltk-1.3.4-1/png/pngtrans.c ****       }
 524:fltk-1.3.4-1/png/pngtrans.c **** 
 525:fltk-1.3.4-1/png/pngtrans.c ****       else if (row_info->bit_depth == 16)
 526:fltk-1.3.4-1/png/pngtrans.c ****       {
 527:fltk-1.3.4-1/png/pngtrans.c ****          if (at_start != 0) /* Skip initial filler */
 528:fltk-1.3.4-1/png/pngtrans.c ****             sp += 2;
 529:fltk-1.3.4-1/png/pngtrans.c ****          else          /* Skip initial channel and, for sp, the filler */
 530:fltk-1.3.4-1/png/pngtrans.c ****             sp += 4, dp += 2;
 531:fltk-1.3.4-1/png/pngtrans.c **** 
 532:fltk-1.3.4-1/png/pngtrans.c ****          while (sp < ep)
 533:fltk-1.3.4-1/png/pngtrans.c ****             *dp++ = *sp++, *dp++ = *sp, sp += 3;
 534:fltk-1.3.4-1/png/pngtrans.c **** 
 535:fltk-1.3.4-1/png/pngtrans.c ****          row_info->pixel_depth = 16;
 536:fltk-1.3.4-1/png/pngtrans.c ****       }
 537:fltk-1.3.4-1/png/pngtrans.c **** 
 538:fltk-1.3.4-1/png/pngtrans.c ****       else
 539:fltk-1.3.4-1/png/pngtrans.c ****          return; /* bad bit depth */
 540:fltk-1.3.4-1/png/pngtrans.c **** 
 541:fltk-1.3.4-1/png/pngtrans.c ****       row_info->channels = 1;
 542:fltk-1.3.4-1/png/pngtrans.c **** 
 543:fltk-1.3.4-1/png/pngtrans.c ****       /* Finally fix the color type if it records an alpha channel */
 544:fltk-1.3.4-1/png/pngtrans.c ****       if (row_info->color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
 545:fltk-1.3.4-1/png/pngtrans.c ****          row_info->color_type = PNG_COLOR_TYPE_GRAY;
 546:fltk-1.3.4-1/png/pngtrans.c ****    }
 547:fltk-1.3.4-1/png/pngtrans.c **** 
 548:fltk-1.3.4-1/png/pngtrans.c ****    /* RGBA, RGBX, XRGB cases */
 549:fltk-1.3.4-1/png/pngtrans.c ****    else if (row_info->channels == 4)
 693              		.loc 1 549 0
 694 0013 3C04     		cmpb	$4, %al
 695 0015 7409     		je	.L137
 696              	.L108:
 697 0017 F3C3     		rep ret
 698 0019 0F1F8000 		.p2align 4,,10
 698      000000
 699              		.p2align 3
 700              	.L137:
 550:fltk-1.3.4-1/png/pngtrans.c ****    {
 551:fltk-1.3.4-1/png/pngtrans.c ****       if (row_info->bit_depth == 8)
 701              		.loc 1 551 0
 702 0020 0FB64711 		movzbl	17(%rdi), %eax
 703 0024 3C08     		cmpb	$8, %al
 704 0026 0F84F400 		je	.L138
 704      0000
 552:fltk-1.3.4-1/png/pngtrans.c ****       {
 553:fltk-1.3.4-1/png/pngtrans.c ****          if (at_start != 0) /* Skip initial filler */
 554:fltk-1.3.4-1/png/pngtrans.c ****             ++sp;
 555:fltk-1.3.4-1/png/pngtrans.c ****          else          /* Skip initial channels and, for sp, the filler */
 556:fltk-1.3.4-1/png/pngtrans.c ****             sp += 4, dp += 3;
 557:fltk-1.3.4-1/png/pngtrans.c **** 
 558:fltk-1.3.4-1/png/pngtrans.c ****          /* Note that the loop adds 3 to dp and 4 to sp each time. */
 559:fltk-1.3.4-1/png/pngtrans.c ****          while (sp < ep)
 560:fltk-1.3.4-1/png/pngtrans.c ****             *dp++ = *sp++, *dp++ = *sp++, *dp++ = *sp, sp += 2;
 561:fltk-1.3.4-1/png/pngtrans.c **** 
 562:fltk-1.3.4-1/png/pngtrans.c ****          row_info->pixel_depth = 24;
 563:fltk-1.3.4-1/png/pngtrans.c ****       }
 564:fltk-1.3.4-1/png/pngtrans.c **** 
 565:fltk-1.3.4-1/png/pngtrans.c ****       else if (row_info->bit_depth == 16)
 705              		.loc 1 565 0
 706 002c 3C10     		cmpb	$16, %al
 707 002e 75E7     		jne	.L108
 566:fltk-1.3.4-1/png/pngtrans.c ****       {
 567:fltk-1.3.4-1/png/pngtrans.c ****          if (at_start != 0) /* Skip initial filler */
 708              		.loc 1 567 0
 709 0030 85D2     		testl	%edx, %edx
 710 0032 0F85E801 		jne	.L139
 710      0000
 568:fltk-1.3.4-1/png/pngtrans.c ****             sp += 2;
 569:fltk-1.3.4-1/png/pngtrans.c ****          else          /* Skip initial channels and, for sp, the filler */
 570:fltk-1.3.4-1/png/pngtrans.c ****             sp += 8, dp += 6;
 711              		.loc 1 570 0
 712 0038 4C8D5608 		leaq	8(%rsi), %r10
 713              	.LVL52:
 714 003c 4C8D4606 		leaq	6(%rsi), %r8
 715              	.LVL53:
 716              	.L129:
 571:fltk-1.3.4-1/png/pngtrans.c **** 
 572:fltk-1.3.4-1/png/pngtrans.c ****          while (sp < ep)
 717              		.loc 1 572 0
 718 0040 4C39D1   		cmpq	%r10, %rcx
 719 0043 7661     		jbe	.L130
 720 0045 4C89C2   		movq	%r8, %rdx
 721              	.LVL54:
 722 0048 4C89D0   		movq	%r10, %rax
 723              	.LVL55:
 724 004b 0F1F4400 		.p2align 4,,10
 724      00
 725              		.p2align 3
 726              	.L131:
 573:fltk-1.3.4-1/png/pngtrans.c ****          {
 574:fltk-1.3.4-1/png/pngtrans.c ****             /* Copy 6 bytes, skip 2 */
 575:fltk-1.3.4-1/png/pngtrans.c ****             *dp++ = *sp++, *dp++ = *sp++;
 727              		.loc 1 575 0
 728 0050 440FB608 		movzbl	(%rax), %r9d
 729 0054 4883C008 		addq	$8, %rax
 730              	.LVL56:
 731 0058 4883C206 		addq	$6, %rdx
 732              	.LVL57:
 733 005c 44884AFA 		movb	%r9b, -6(%rdx)
 734              	.LVL58:
 735 0060 440FB648 		movzbl	-7(%rax), %r9d
 735      F9
 736 0065 44884AFB 		movb	%r9b, -5(%rdx)
 737              	.LVL59:
 576:fltk-1.3.4-1/png/pngtrans.c ****             *dp++ = *sp++, *dp++ = *sp++;
 738              		.loc 1 576 0
 739 0069 440FB648 		movzbl	-6(%rax), %r9d
 739      FA
 740 006e 44884AFC 		movb	%r9b, -4(%rdx)
 741              	.LVL60:
 742 0072 440FB648 		movzbl	-5(%rax), %r9d
 742      FB
 743 0077 44884AFD 		movb	%r9b, -3(%rdx)
 744              	.LVL61:
 577:fltk-1.3.4-1/png/pngtrans.c ****             *dp++ = *sp++, *dp++ = *sp, sp += 3;
 745              		.loc 1 577 0
 746 007b 440FB648 		movzbl	-4(%rax), %r9d
 746      FC
 747 0080 44884AFE 		movb	%r9b, -2(%rdx)
 748              	.LVL62:
 749 0084 440FB648 		movzbl	-3(%rax), %r9d
 749      FD
 750              	.LVL63:
 572:fltk-1.3.4-1/png/pngtrans.c ****          {
 751              		.loc 1 572 0
 752 0089 4839C8   		cmpq	%rcx, %rax
 753              		.loc 1 577 0
 754 008c 44884AFF 		movb	%r9b, -1(%rdx)
 572:fltk-1.3.4-1/png/pngtrans.c ****          {
 755              		.loc 1 572 0
 756 0090 72BE     		jb	.L131
 757 0092 49F7D2   		notq	%r10
 758 0095 498D040A 		leaq	(%r10,%rcx), %rax
 759              	.LVL64:
 760 0099 48C1E803 		shrq	$3, %rax
 761 009d 488D4440 		leaq	3(%rax,%rax,2), %rax
 761      03
 762 00a2 4D8D0440 		leaq	(%r8,%rax,2), %r8
 763              	.LVL65:
 764              	.L130:
 578:fltk-1.3.4-1/png/pngtrans.c ****          }
 579:fltk-1.3.4-1/png/pngtrans.c **** 
 580:fltk-1.3.4-1/png/pngtrans.c ****          row_info->pixel_depth = 48;
 765              		.loc 1 580 0
 766 00a6 C6471330 		movb	$48, 19(%rdi)
 767 00aa E9CF0000 		jmp	.L127
 767      00
 768              	.LVL66:
 769 00af 90       		.p2align 4,,10
 770              		.p2align 3
 771              	.L136:
 511:fltk-1.3.4-1/png/pngtrans.c ****       {
 772              		.loc 1 511 0
 773 00b0 0FB64711 		movzbl	17(%rdi), %eax
 774 00b4 3C08     		cmpb	$8, %al
 775 00b6 0F84D400 		je	.L140
 775      0000
 525:fltk-1.3.4-1/png/pngtrans.c ****       {
 776              		.loc 1 525 0
 777 00bc 3C10     		cmpb	$16, %al
 778 00be 0F8553FF 		jne	.L108
 778      FFFF
 527:fltk-1.3.4-1/png/pngtrans.c ****             sp += 2;
 779              		.loc 1 527 0
 780 00c4 85D2     		testl	%edx, %edx
 781 00c6 0F853401 		jne	.L141
 781      0000
 530:fltk-1.3.4-1/png/pngtrans.c **** 
 782              		.loc 1 530 0
 783 00cc 4C8D5604 		leaq	4(%rsi), %r10
 784              	.LVL67:
 785 00d0 4C8D4602 		leaq	2(%rsi), %r8
 786              	.LVL68:
 787              	.L118:
 532:fltk-1.3.4-1/png/pngtrans.c ****             *dp++ = *sp++, *dp++ = *sp, sp += 3;
 788              		.loc 1 532 0
 789 00d4 4C39D1   		cmpq	%r10, %rcx
 790 00d7 7635     		jbe	.L119
 791 00d9 4C89C2   		movq	%r8, %rdx
 792              	.LVL69:
 793 00dc 4C89D0   		movq	%r10, %rax
 794              	.LVL70:
 795 00df 90       		.p2align 4,,10
 796              		.p2align 3
 797              	.L120:
 533:fltk-1.3.4-1/png/pngtrans.c **** 
 798              		.loc 1 533 0
 799 00e0 440FB608 		movzbl	(%rax), %r9d
 800 00e4 4883C004 		addq	$4, %rax
 801              	.LVL71:
 802 00e8 4883C202 		addq	$2, %rdx
 803              	.LVL72:
 804 00ec 44884AFE 		movb	%r9b, -2(%rdx)
 805              	.LVL73:
 806 00f0 440FB648 		movzbl	-3(%rax), %r9d
 806      FD
 807              	.LVL74:
 532:fltk-1.3.4-1/png/pngtrans.c ****             *dp++ = *sp++, *dp++ = *sp, sp += 3;
 808              		.loc 1 532 0
 809 00f5 4839C1   		cmpq	%rax, %rcx
 533:fltk-1.3.4-1/png/pngtrans.c **** 
 810              		.loc 1 533 0
 811 00f8 44884AFF 		movb	%r9b, -1(%rdx)
 532:fltk-1.3.4-1/png/pngtrans.c ****             *dp++ = *sp++, *dp++ = *sp, sp += 3;
 812              		.loc 1 532 0
 813 00fc 77E2     		ja	.L120
 814 00fe 49F7D2   		notq	%r10
 815 0101 498D040A 		leaq	(%r10,%rcx), %rax
 816              	.LVL75:
 817 0105 48C1E802 		shrq	$2, %rax
 818 0109 4D8D4440 		leaq	2(%r8,%rax,2), %r8
 818      02
 819              	.LVL76:
 820              	.L119:
 535:fltk-1.3.4-1/png/pngtrans.c ****       }
 821              		.loc 1 535 0
 822 010e C6471310 		movb	$16, 19(%rdi)
 823 0112 E9C10000 		jmp	.L115
 823      00
 824              	.LVL77:
 825 0117 660F1F84 		.p2align 4,,10
 825      00000000 
 825      00
 826              		.p2align 3
 827              	.L138:
 553:fltk-1.3.4-1/png/pngtrans.c ****             ++sp;
 828              		.loc 1 553 0
 829 0120 85D2     		testl	%edx, %edx
 830 0122 0F85E800 		jne	.L142
 830      0000
 556:fltk-1.3.4-1/png/pngtrans.c **** 
 831              		.loc 1 556 0
 832 0128 4C8D5604 		leaq	4(%rsi), %r10
 833              	.LVL78:
 834 012c 4C8D4603 		leaq	3(%rsi), %r8
 835              	.LVL79:
 836              	.L124:
 559:fltk-1.3.4-1/png/pngtrans.c ****             *dp++ = *sp++, *dp++ = *sp++, *dp++ = *sp, sp += 2;
 837              		.loc 1 559 0
 838 0130 4C39D1   		cmpq	%r10, %rcx
 839 0133 7645     		jbe	.L125
 840 0135 4C89C2   		movq	%r8, %rdx
 841              	.LVL80:
 842 0138 4C89D0   		movq	%r10, %rax
 843              	.LVL81:
 844 013b 0F1F4400 		.p2align 4,,10
 844      00
 845              		.p2align 3
 846              	.L126:
 560:fltk-1.3.4-1/png/pngtrans.c **** 
 847              		.loc 1 560 0
 848 0140 440FB608 		movzbl	(%rax), %r9d
 849 0144 4883C004 		addq	$4, %rax
 850              	.LVL82:
 851 0148 4883C203 		addq	$3, %rdx
 852              	.LVL83:
 853 014c 44884AFD 		movb	%r9b, -3(%rdx)
 854              	.LVL84:
 855 0150 440FB648 		movzbl	-3(%rax), %r9d
 855      FD
 856 0155 44884AFE 		movb	%r9b, -2(%rdx)
 857              	.LVL85:
 858 0159 440FB648 		movzbl	-2(%rax), %r9d
 858      FE
 859              	.LVL86:
 559:fltk-1.3.4-1/png/pngtrans.c ****             *dp++ = *sp++, *dp++ = *sp++, *dp++ = *sp, sp += 2;
 860              		.loc 1 559 0
 861 015e 4839C1   		cmpq	%rax, %rcx
 560:fltk-1.3.4-1/png/pngtrans.c **** 
 862              		.loc 1 560 0
 863 0161 44884AFF 		movb	%r9b, -1(%rdx)
 559:fltk-1.3.4-1/png/pngtrans.c ****             *dp++ = *sp++, *dp++ = *sp++, *dp++ = *sp, sp += 2;
 864              		.loc 1 559 0
 865 0165 77D9     		ja	.L126
 866 0167 49F7D2   		notq	%r10
 867 016a 498D040A 		leaq	(%r10,%rcx), %rax
 868              	.LVL87:
 869 016e 48C1E802 		shrq	$2, %rax
 870 0172 488D4440 		leaq	3(%rax,%rax,2), %rax
 870      03
 871 0177 4901C0   		addq	%rax, %r8
 872              	.LVL88:
 873              	.L125:
 562:fltk-1.3.4-1/png/pngtrans.c ****       }
 874              		.loc 1 562 0
 875 017a C6471318 		movb	$24, 19(%rdi)
 876              	.L127:
 877              	.LVL89:
 581:fltk-1.3.4-1/png/pngtrans.c ****       }
 582:fltk-1.3.4-1/png/pngtrans.c **** 
 583:fltk-1.3.4-1/png/pngtrans.c ****       else
 584:fltk-1.3.4-1/png/pngtrans.c ****          return; /* bad bit depth */
 585:fltk-1.3.4-1/png/pngtrans.c **** 
 586:fltk-1.3.4-1/png/pngtrans.c ****       row_info->channels = 3;
 587:fltk-1.3.4-1/png/pngtrans.c **** 
 588:fltk-1.3.4-1/png/pngtrans.c ****       /* Finally fix the color type if it records an alpha channel */
 589:fltk-1.3.4-1/png/pngtrans.c ****       if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
 878              		.loc 1 589 0
 879 017e 807F1006 		cmpb	$6, 16(%rdi)
 586:fltk-1.3.4-1/png/pngtrans.c **** 
 880              		.loc 1 586 0
 881 0182 C6471203 		movb	$3, 18(%rdi)
 882              		.loc 1 589 0
 883 0186 755A     		jne	.L121
 590:fltk-1.3.4-1/png/pngtrans.c ****          row_info->color_type = PNG_COLOR_TYPE_RGB;
 884              		.loc 1 590 0
 885 0188 C6471002 		movb	$2, 16(%rdi)
 886 018c EB54     		jmp	.L121
 887              	.LVL90:
 888 018e 6690     		.p2align 4,,10
 889              		.p2align 3
 890              	.L140:
 513:fltk-1.3.4-1/png/pngtrans.c ****             ++sp;
 891              		.loc 1 513 0
 892 0190 85D2     		testl	%edx, %edx
 893 0192 755C     		jne	.L143
 516:fltk-1.3.4-1/png/pngtrans.c **** 
 894              		.loc 1 516 0
 895 0194 4C8D5602 		leaq	2(%rsi), %r10
 896              	.LVL91:
 897 0198 4C8D4601 		leaq	1(%rsi), %r8
 898              	.LVL92:
 899              	.L112:
 519:fltk-1.3.4-1/png/pngtrans.c ****             *dp++ = *sp, sp += 2;
 900              		.loc 1 519 0
 901 019c 4939CA   		cmpq	%rcx, %r10
 902 019f 7333     		jnb	.L113
 903 01a1 4C89C2   		movq	%r8, %rdx
 904              	.LVL93:
 905 01a4 4C89D0   		movq	%r10, %rax
 906              	.LVL94:
 907 01a7 660F1F84 		.p2align 4,,10
 907      00000000 
 907      00
 908              		.p2align 3
 909              	.L114:
 520:fltk-1.3.4-1/png/pngtrans.c **** 
 910              		.loc 1 520 0
 911 01b0 440FB608 		movzbl	(%rax), %r9d
 912 01b4 4883C002 		addq	$2, %rax
 913              	.LVL95:
 914 01b8 4883C201 		addq	$1, %rdx
 915              	.LVL96:
 519:fltk-1.3.4-1/png/pngtrans.c ****             *dp++ = *sp, sp += 2;
 916              		.loc 1 519 0
 917 01bc 4839C1   		cmpq	%rax, %rcx
 520:fltk-1.3.4-1/png/pngtrans.c **** 
 918              		.loc 1 520 0
 919 01bf 44884AFF 		movb	%r9b, -1(%rdx)
 519:fltk-1.3.4-1/png/pngtrans.c ****             *dp++ = *sp, sp += 2;
 920              		.loc 1 519 0
 921 01c3 77EB     		ja	.L114
 922 01c5 49F7D2   		notq	%r10
 923 01c8 498D040A 		leaq	(%r10,%rcx), %rax
 924              	.LVL97:
 925 01cc 48D1E8   		shrq	%rax
 926 01cf 4D8D4400 		leaq	1(%r8,%rax), %r8
 926      01
 927              	.LVL98:
 928              	.L113:
 522:fltk-1.3.4-1/png/pngtrans.c ****       }
 929              		.loc 1 522 0
 930 01d4 C6471308 		movb	$8, 19(%rdi)
 931              	.L115:
 932              	.LVL99:
 544:fltk-1.3.4-1/png/pngtrans.c ****          row_info->color_type = PNG_COLOR_TYPE_GRAY;
 933              		.loc 1 544 0
 934 01d8 807F1004 		cmpb	$4, 16(%rdi)
 541:fltk-1.3.4-1/png/pngtrans.c **** 
 935              		.loc 1 541 0
 936 01dc C6471201 		movb	$1, 18(%rdi)
 544:fltk-1.3.4-1/png/pngtrans.c ****          row_info->color_type = PNG_COLOR_TYPE_GRAY;
 937              		.loc 1 544 0
 938 01e0 744E     		je	.L144
 939              	.L121:
 591:fltk-1.3.4-1/png/pngtrans.c ****    }
 592:fltk-1.3.4-1/png/pngtrans.c **** 
 593:fltk-1.3.4-1/png/pngtrans.c ****    else
 594:fltk-1.3.4-1/png/pngtrans.c ****       return; /* The filler channel has gone already */
 595:fltk-1.3.4-1/png/pngtrans.c **** 
 596:fltk-1.3.4-1/png/pngtrans.c ****    /* Fix the rowbytes value. */
 597:fltk-1.3.4-1/png/pngtrans.c ****    row_info->rowbytes = dp-row;
 940              		.loc 1 597 0
 941 01e2 4929F0   		subq	%rsi, %r8
 942              	.LVL100:
 943 01e5 4C894708 		movq	%r8, 8(%rdi)
 944 01e9 C3       		ret
 945              	.LVL101:
 946 01ea 660F1F44 		.p2align 4,,10
 946      0000
 947              		.p2align 3
 948              	.L143:
 514:fltk-1.3.4-1/png/pngtrans.c ****          else          /* Skip initial channel and, for sp, the filler */
 949              		.loc 1 514 0
 950 01f0 4C8D5601 		leaq	1(%rsi), %r10
 951              	.LVL102:
 497:fltk-1.3.4-1/png/pngtrans.c ****    png_bytep ep = row + row_info->rowbytes; /* One beyond end of row */
 952              		.loc 1 497 0
 953 01f4 4989F0   		movq	%rsi, %r8
 954 01f7 EBA3     		jmp	.L112
 955              	.LVL103:
 956 01f9 0F1F8000 		.p2align 4,,10
 956      000000
 957              		.p2align 3
 958              	.L141:
 528:fltk-1.3.4-1/png/pngtrans.c ****          else          /* Skip initial channel and, for sp, the filler */
 959              		.loc 1 528 0
 960 0200 4C8D5602 		leaq	2(%rsi), %r10
 961              	.LVL104:
 497:fltk-1.3.4-1/png/pngtrans.c ****    png_bytep ep = row + row_info->rowbytes; /* One beyond end of row */
 962              		.loc 1 497 0
 963 0204 4989F0   		movq	%rsi, %r8
 964 0207 E9C8FEFF 		jmp	.L118
 964      FF
 965              	.LVL105:
 966 020c 0F1F4000 		.p2align 4,,10
 967              		.p2align 3
 968              	.L142:
 554:fltk-1.3.4-1/png/pngtrans.c ****          else          /* Skip initial channels and, for sp, the filler */
 969              		.loc 1 554 0
 970 0210 4C8D5601 		leaq	1(%rsi), %r10
 971              	.LVL106:
 497:fltk-1.3.4-1/png/pngtrans.c ****    png_bytep ep = row + row_info->rowbytes; /* One beyond end of row */
 972              		.loc 1 497 0
 973 0214 4989F0   		movq	%rsi, %r8
 974 0217 E914FFFF 		jmp	.L124
 974      FF
 975              	.LVL107:
 976 021c 0F1F4000 		.p2align 4,,10
 977              		.p2align 3
 978              	.L139:
 568:fltk-1.3.4-1/png/pngtrans.c ****          else          /* Skip initial channels and, for sp, the filler */
 979              		.loc 1 568 0
 980 0220 4C8D5602 		leaq	2(%rsi), %r10
 981              	.LVL108:
 497:fltk-1.3.4-1/png/pngtrans.c ****    png_bytep ep = row + row_info->rowbytes; /* One beyond end of row */
 982              		.loc 1 497 0
 983 0224 4989F0   		movq	%rsi, %r8
 984 0227 E914FEFF 		jmp	.L129
 984      FF
 985              	.LVL109:
 986 022c 0F1F4000 		.p2align 4,,10
 987              		.p2align 3
 988              	.L144:
 545:fltk-1.3.4-1/png/pngtrans.c ****    }
 989              		.loc 1 545 0
 990 0230 C6471000 		movb	$0, 16(%rdi)
 991 0234 EBAC     		jmp	.L121
 992              		.cfi_endproc
 993              	.LFE70:
 995              		.section	.text.unlikely.png_do_strip_channel
 996              	.LCOLDE16:
 997              		.section	.text.png_do_strip_channel
 998              	.LHOTE16:
 999              		.section	.text.unlikely.png_do_bgr,"ax",@progbits
 1000              	.LCOLDB17:
 1001              		.section	.text.png_do_bgr,"ax",@progbits
 1002              	.LHOTB17:
 1003              		.p2align 4,,15
 1004              		.globl	png_do_bgr
 1006              	png_do_bgr:
 1007              	.LFB71:
 598:fltk-1.3.4-1/png/pngtrans.c **** }
 599:fltk-1.3.4-1/png/pngtrans.c **** #endif
 600:fltk-1.3.4-1/png/pngtrans.c **** 
 601:fltk-1.3.4-1/png/pngtrans.c **** #if defined(PNG_READ_BGR_SUPPORTED) || defined(PNG_WRITE_BGR_SUPPORTED)
 602:fltk-1.3.4-1/png/pngtrans.c **** /* Swaps red and blue bytes within a pixel */
 603:fltk-1.3.4-1/png/pngtrans.c **** void /* PRIVATE */
 604:fltk-1.3.4-1/png/pngtrans.c **** png_do_bgr(png_row_infop row_info, png_bytep row)
 605:fltk-1.3.4-1/png/pngtrans.c **** {
 1008              		.loc 1 605 0
 1009              		.cfi_startproc
 1010              	.LVL110:
 606:fltk-1.3.4-1/png/pngtrans.c ****    png_debug(1, "in png_do_bgr");
 607:fltk-1.3.4-1/png/pngtrans.c **** 
 608:fltk-1.3.4-1/png/pngtrans.c ****    if ((row_info->color_type & PNG_COLOR_MASK_COLOR) != 0)
 1011              		.loc 1 608 0
 1012 0000 0FB64710 		movzbl	16(%rdi), %eax
 1013 0004 A802     		testb	$2, %al
 1014 0006 7410     		je	.L145
 1015              	.LBB9:
 609:fltk-1.3.4-1/png/pngtrans.c ****    {
 610:fltk-1.3.4-1/png/pngtrans.c ****       png_uint_32 row_width = row_info->width;
 611:fltk-1.3.4-1/png/pngtrans.c ****       if (row_info->bit_depth == 8)
 1016              		.loc 1 611 0
 1017 0008 0FB65711 		movzbl	17(%rdi), %edx
 610:fltk-1.3.4-1/png/pngtrans.c ****       if (row_info->bit_depth == 8)
 1018              		.loc 1 610 0
 1019 000c 8B0F     		movl	(%rdi), %ecx
 1020              	.LVL111:
 1021              		.loc 1 611 0
 1022 000e 80FA08   		cmpb	$8, %dl
 1023 0011 740D     		je	.L171
 612:fltk-1.3.4-1/png/pngtrans.c ****       {
 613:fltk-1.3.4-1/png/pngtrans.c ****          if (row_info->color_type == PNG_COLOR_TYPE_RGB)
 614:fltk-1.3.4-1/png/pngtrans.c ****          {
 615:fltk-1.3.4-1/png/pngtrans.c ****             png_bytep rp;
 616:fltk-1.3.4-1/png/pngtrans.c ****             png_uint_32 i;
 617:fltk-1.3.4-1/png/pngtrans.c **** 
 618:fltk-1.3.4-1/png/pngtrans.c ****             for (i = 0, rp = row; i < row_width; i++, rp += 3)
 619:fltk-1.3.4-1/png/pngtrans.c ****             {
 620:fltk-1.3.4-1/png/pngtrans.c ****                png_byte save = *rp;
 621:fltk-1.3.4-1/png/pngtrans.c ****                *rp = *(rp + 2);
 622:fltk-1.3.4-1/png/pngtrans.c ****                *(rp + 2) = save;
 623:fltk-1.3.4-1/png/pngtrans.c ****             }
 624:fltk-1.3.4-1/png/pngtrans.c ****          }
 625:fltk-1.3.4-1/png/pngtrans.c **** 
 626:fltk-1.3.4-1/png/pngtrans.c ****          else if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
 627:fltk-1.3.4-1/png/pngtrans.c ****          {
 628:fltk-1.3.4-1/png/pngtrans.c ****             png_bytep rp;
 629:fltk-1.3.4-1/png/pngtrans.c ****             png_uint_32 i;
 630:fltk-1.3.4-1/png/pngtrans.c **** 
 631:fltk-1.3.4-1/png/pngtrans.c ****             for (i = 0, rp = row; i < row_width; i++, rp += 4)
 632:fltk-1.3.4-1/png/pngtrans.c ****             {
 633:fltk-1.3.4-1/png/pngtrans.c ****                png_byte save = *rp;
 634:fltk-1.3.4-1/png/pngtrans.c ****                *rp = *(rp + 2);
 635:fltk-1.3.4-1/png/pngtrans.c ****                *(rp + 2) = save;
 636:fltk-1.3.4-1/png/pngtrans.c ****             }
 637:fltk-1.3.4-1/png/pngtrans.c ****          }
 638:fltk-1.3.4-1/png/pngtrans.c ****       }
 639:fltk-1.3.4-1/png/pngtrans.c **** 
 640:fltk-1.3.4-1/png/pngtrans.c **** #ifdef PNG_16BIT_SUPPORTED
 641:fltk-1.3.4-1/png/pngtrans.c ****       else if (row_info->bit_depth == 16)
 1024              		.loc 1 641 0
 1025 0013 80FA10   		cmpb	$16, %dl
 1026 0016 7438     		je	.L172
 1027              	.LVL112:
 1028              	.L145:
 1029 0018 F3C3     		rep ret
 1030              	.LVL113:
 1031 001a 660F1F44 		.p2align 4,,10
 1031      0000
 1032              		.p2align 3
 1033              	.L171:
 613:fltk-1.3.4-1/png/pngtrans.c ****          {
 1034              		.loc 1 613 0
 1035 0020 3C02     		cmpb	$2, %al
 1036 0022 746C     		je	.L173
 626:fltk-1.3.4-1/png/pngtrans.c ****          {
 1037              		.loc 1 626 0
 1038 0024 3C06     		cmpb	$6, %al
 1039 0026 75F0     		jne	.L145
 1040              	.LVL114:
 1041              	.LBB10:
 631:fltk-1.3.4-1/png/pngtrans.c ****             {
 1042              		.loc 1 631 0 discriminator 1
 1043 0028 85C9     		testl	%ecx, %ecx
 1044 002a 74EC     		je	.L145
 1045 002c 8D41FF   		leal	-1(%rcx), %eax
 1046 002f 488D4C86 		leaq	4(%rsi,%rax,4), %rcx
 1046      04
 1047              	.LVL115:
 1048              		.p2align 4,,10
 1049 0034 0F1F4000 		.p2align 3
 1050              	.L151:
 1051              	.LBB11:
 633:fltk-1.3.4-1/png/pngtrans.c ****                *rp = *(rp + 2);
 1052              		.loc 1 633 0 discriminator 3
 1053 0038 0FB606   		movzbl	(%rsi), %eax
 1054              	.LVL116:
 634:fltk-1.3.4-1/png/pngtrans.c ****                *(rp + 2) = save;
 1055              		.loc 1 634 0 discriminator 3
 1056 003b 0FB65602 		movzbl	2(%rsi), %edx
 1057              	.LBE11:
 631:fltk-1.3.4-1/png/pngtrans.c ****             {
 1058              		.loc 1 631 0 discriminator 3
 1059 003f 4883C604 		addq	$4, %rsi
 1060              	.LVL117:
 1061              	.LBB12:
 634:fltk-1.3.4-1/png/pngtrans.c ****                *(rp + 2) = save;
 1062              		.loc 1 634 0 discriminator 3
 1063 0043 8856FC   		movb	%dl, -4(%rsi)
 635:fltk-1.3.4-1/png/pngtrans.c ****             }
 1064              		.loc 1 635 0 discriminator 3
 1065 0046 8846FE   		movb	%al, -2(%rsi)
 1066              	.LVL118:
 1067              	.LBE12:
 631:fltk-1.3.4-1/png/pngtrans.c ****             {
 1068              		.loc 1 631 0 discriminator 3
 1069 0049 4839CE   		cmpq	%rcx, %rsi
 1070 004c 75EA     		jne	.L151
 1071 004e F3C3     		rep ret
 1072              	.LVL119:
 1073              		.p2align 4,,10
 1074              		.p2align 3
 1075              	.L172:
 1076              	.LBE10:
 642:fltk-1.3.4-1/png/pngtrans.c ****       {
 643:fltk-1.3.4-1/png/pngtrans.c ****          if (row_info->color_type == PNG_COLOR_TYPE_RGB)
 1077              		.loc 1 643 0
 1078 0050 3C02     		cmpb	$2, %al
 1079 0052 746C     		je	.L174
 644:fltk-1.3.4-1/png/pngtrans.c ****          {
 645:fltk-1.3.4-1/png/pngtrans.c ****             png_bytep rp;
 646:fltk-1.3.4-1/png/pngtrans.c ****             png_uint_32 i;
 647:fltk-1.3.4-1/png/pngtrans.c **** 
 648:fltk-1.3.4-1/png/pngtrans.c ****             for (i = 0, rp = row; i < row_width; i++, rp += 6)
 649:fltk-1.3.4-1/png/pngtrans.c ****             {
 650:fltk-1.3.4-1/png/pngtrans.c ****                png_byte save = *rp;
 651:fltk-1.3.4-1/png/pngtrans.c ****                *rp = *(rp + 4);
 652:fltk-1.3.4-1/png/pngtrans.c ****                *(rp + 4) = save;
 653:fltk-1.3.4-1/png/pngtrans.c ****                save = *(rp + 1);
 654:fltk-1.3.4-1/png/pngtrans.c ****                *(rp + 1) = *(rp + 5);
 655:fltk-1.3.4-1/png/pngtrans.c ****                *(rp + 5) = save;
 656:fltk-1.3.4-1/png/pngtrans.c ****             }
 657:fltk-1.3.4-1/png/pngtrans.c ****          }
 658:fltk-1.3.4-1/png/pngtrans.c **** 
 659:fltk-1.3.4-1/png/pngtrans.c ****          else if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
 1080              		.loc 1 659 0
 1081 0054 3C06     		cmpb	$6, %al
 1082 0056 75C0     		jne	.L145
 1083              	.LVL120:
 1084              	.LBB13:
 660:fltk-1.3.4-1/png/pngtrans.c ****          {
 661:fltk-1.3.4-1/png/pngtrans.c ****             png_bytep rp;
 662:fltk-1.3.4-1/png/pngtrans.c ****             png_uint_32 i;
 663:fltk-1.3.4-1/png/pngtrans.c **** 
 664:fltk-1.3.4-1/png/pngtrans.c ****             for (i = 0, rp = row; i < row_width; i++, rp += 8)
 1085              		.loc 1 664 0 discriminator 1
 1086 0058 85C9     		testl	%ecx, %ecx
 1087 005a 74BC     		je	.L145
 1088 005c 8D41FF   		leal	-1(%rcx), %eax
 1089 005f 488D4CC6 		leaq	8(%rsi,%rax,8), %rcx
 1089      08
 1090              	.LVL121:
 1091              		.p2align 4,,10
 1092 0064 0F1F4000 		.p2align 3
 1093              	.L154:
 1094              	.LBB14:
 665:fltk-1.3.4-1/png/pngtrans.c ****             {
 666:fltk-1.3.4-1/png/pngtrans.c ****                png_byte save = *rp;
 1095              		.loc 1 666 0 discriminator 3
 1096 0068 0FB606   		movzbl	(%rsi), %eax
 1097              	.LVL122:
 667:fltk-1.3.4-1/png/pngtrans.c ****                *rp = *(rp + 4);
 1098              		.loc 1 667 0 discriminator 3
 1099 006b 0FB65604 		movzbl	4(%rsi), %edx
 1100              	.LBE14:
 664:fltk-1.3.4-1/png/pngtrans.c ****             {
 1101              		.loc 1 664 0 discriminator 3
 1102 006f 4883C608 		addq	$8, %rsi
 1103              	.LVL123:
 1104              	.LBB15:
 1105              		.loc 1 667 0 discriminator 3
 1106 0073 8856F8   		movb	%dl, -8(%rsi)
 668:fltk-1.3.4-1/png/pngtrans.c ****                *(rp + 4) = save;
 1107              		.loc 1 668 0 discriminator 3
 1108 0076 8846FC   		movb	%al, -4(%rsi)
 669:fltk-1.3.4-1/png/pngtrans.c ****                save = *(rp + 1);
 670:fltk-1.3.4-1/png/pngtrans.c ****                *(rp + 1) = *(rp + 5);
 1109              		.loc 1 670 0 discriminator 3
 1110 0079 0FB656FD 		movzbl	-3(%rsi), %edx
 669:fltk-1.3.4-1/png/pngtrans.c ****                save = *(rp + 1);
 1111              		.loc 1 669 0 discriminator 3
 1112 007d 0FB646F9 		movzbl	-7(%rsi), %eax
 1113              	.LVL124:
 1114              		.loc 1 670 0 discriminator 3
 1115 0081 8856F9   		movb	%dl, -7(%rsi)
 671:fltk-1.3.4-1/png/pngtrans.c ****                *(rp + 5) = save;
 1116              		.loc 1 671 0 discriminator 3
 1117 0084 8846FD   		movb	%al, -3(%rsi)
 1118              	.LVL125:
 1119              	.LBE15:
 664:fltk-1.3.4-1/png/pngtrans.c ****             {
 1120              		.loc 1 664 0 discriminator 3
 1121 0087 4839F1   		cmpq	%rsi, %rcx
 1122 008a 75DC     		jne	.L154
 1123 008c F3C3     		rep ret
 1124              	.LVL126:
 1125 008e 6690     		.p2align 4,,10
 1126              		.p2align 3
 1127              	.L173:
 1128              	.LBE13:
 1129              	.LBB16:
 618:fltk-1.3.4-1/png/pngtrans.c ****             {
 1130              		.loc 1 618 0 discriminator 1
 1131 0090 85C9     		testl	%ecx, %ecx
 1132 0092 7484     		je	.L145
 1133 0094 8D41FF   		leal	-1(%rcx), %eax
 1134 0097 488D4C40 		leaq	3(%rax,%rax,2), %rcx
 1134      03
 1135              	.LVL127:
 1136 009c 4801F1   		addq	%rsi, %rcx
 1137              	.LVL128:
 1138 009f 90       		.p2align 4,,10
 1139              		.p2align 3
 1140              	.L150:
 1141              	.LBB17:
 620:fltk-1.3.4-1/png/pngtrans.c ****                *rp = *(rp + 2);
 1142              		.loc 1 620 0 discriminator 3
 1143 00a0 0FB606   		movzbl	(%rsi), %eax
 1144              	.LVL129:
 621:fltk-1.3.4-1/png/pngtrans.c ****                *(rp + 2) = save;
 1145              		.loc 1 621 0 discriminator 3
 1146 00a3 0FB65602 		movzbl	2(%rsi), %edx
 1147              	.LBE17:
 618:fltk-1.3.4-1/png/pngtrans.c ****             {
 1148              		.loc 1 618 0 discriminator 3
 1149 00a7 4883C603 		addq	$3, %rsi
 1150              	.LVL130:
 1151              	.LBB18:
 621:fltk-1.3.4-1/png/pngtrans.c ****                *(rp + 2) = save;
 1152              		.loc 1 621 0 discriminator 3
 1153 00ab 8856FD   		movb	%dl, -3(%rsi)
 622:fltk-1.3.4-1/png/pngtrans.c ****             }
 1154              		.loc 1 622 0 discriminator 3
 1155 00ae 8846FF   		movb	%al, -1(%rsi)
 1156              	.LVL131:
 1157              	.LBE18:
 618:fltk-1.3.4-1/png/pngtrans.c ****             {
 1158              		.loc 1 618 0 discriminator 3
 1159 00b1 4839CE   		cmpq	%rcx, %rsi
 1160 00b4 75EA     		jne	.L150
 1161 00b6 F3C3     		rep ret
 1162              	.LVL132:
 1163 00b8 0F1F8400 		.p2align 4,,10
 1163      00000000 
 1164              		.p2align 3
 1165              	.L174:
 1166              	.LBE16:
 1167              	.LBB19:
 648:fltk-1.3.4-1/png/pngtrans.c ****             {
 1168              		.loc 1 648 0 discriminator 1
 1169 00c0 85C9     		testl	%ecx, %ecx
 1170 00c2 0F8450FF 		je	.L145
 1170      FFFF
 1171 00c8 8D41FF   		leal	-1(%rcx), %eax
 1172 00cb 488D4440 		leaq	3(%rax,%rax,2), %rax
 1172      03
 1173 00d0 488D0C46 		leaq	(%rsi,%rax,2), %rcx
 1174              	.LVL133:
 1175              		.p2align 4,,10
 1176 00d4 0F1F4000 		.p2align 3
 1177              	.L153:
 1178              	.LBB20:
 650:fltk-1.3.4-1/png/pngtrans.c ****                *rp = *(rp + 4);
 1179              		.loc 1 650 0 discriminator 3
 1180 00d8 0FB606   		movzbl	(%rsi), %eax
 1181              	.LVL134:
 651:fltk-1.3.4-1/png/pngtrans.c ****                *(rp + 4) = save;
 1182              		.loc 1 651 0 discriminator 3
 1183 00db 0FB65604 		movzbl	4(%rsi), %edx
 1184              	.LBE20:
 648:fltk-1.3.4-1/png/pngtrans.c ****             {
 1185              		.loc 1 648 0 discriminator 3
 1186 00df 4883C606 		addq	$6, %rsi
 1187              	.LVL135:
 1188              	.LBB21:
 651:fltk-1.3.4-1/png/pngtrans.c ****                *(rp + 4) = save;
 1189              		.loc 1 651 0 discriminator 3
 1190 00e3 8856FA   		movb	%dl, -6(%rsi)
 652:fltk-1.3.4-1/png/pngtrans.c ****                save = *(rp + 1);
 1191              		.loc 1 652 0 discriminator 3
 1192 00e6 8846FE   		movb	%al, -2(%rsi)
 654:fltk-1.3.4-1/png/pngtrans.c ****                *(rp + 5) = save;
 1193              		.loc 1 654 0 discriminator 3
 1194 00e9 0FB656FF 		movzbl	-1(%rsi), %edx
 653:fltk-1.3.4-1/png/pngtrans.c ****                *(rp + 1) = *(rp + 5);
 1195              		.loc 1 653 0 discriminator 3
 1196 00ed 0FB646FB 		movzbl	-5(%rsi), %eax
 1197              	.LVL136:
 654:fltk-1.3.4-1/png/pngtrans.c ****                *(rp + 5) = save;
 1198              		.loc 1 654 0 discriminator 3
 1199 00f1 8856FB   		movb	%dl, -5(%rsi)
 655:fltk-1.3.4-1/png/pngtrans.c ****             }
 1200              		.loc 1 655 0 discriminator 3
 1201 00f4 8846FF   		movb	%al, -1(%rsi)
 1202              	.LVL137:
 1203              	.LBE21:
 648:fltk-1.3.4-1/png/pngtrans.c ****             {
 1204              		.loc 1 648 0 discriminator 3
 1205 00f7 4839F1   		cmpq	%rsi, %rcx
 1206 00fa 75DC     		jne	.L153
 1207 00fc F3C3     		rep ret
 1208              	.LBE19:
 1209              	.LBE9:
 1210              		.cfi_endproc
 1211              	.LFE71:
 1213              		.section	.text.unlikely.png_do_bgr
 1214              	.LCOLDE17:
 1215              		.section	.text.png_do_bgr
 1216              	.LHOTE17:
 1217              		.section	.text.unlikely.png_do_check_palette_indexes,"ax",@progbits
 1218              	.LCOLDB18:
 1219              		.section	.text.png_do_check_palette_indexes,"ax",@progbits
 1220              	.LHOTB18:
 1221              		.p2align 4,,15
 1222              		.globl	png_do_check_palette_indexes
 1224              	png_do_check_palette_indexes:
 1225              	.LFB72:
 672:fltk-1.3.4-1/png/pngtrans.c ****             }
 673:fltk-1.3.4-1/png/pngtrans.c ****          }
 674:fltk-1.3.4-1/png/pngtrans.c ****       }
 675:fltk-1.3.4-1/png/pngtrans.c **** #endif
 676:fltk-1.3.4-1/png/pngtrans.c ****    }
 677:fltk-1.3.4-1/png/pngtrans.c **** }
 678:fltk-1.3.4-1/png/pngtrans.c **** #endif /* READ_BGR || WRITE_BGR */
 679:fltk-1.3.4-1/png/pngtrans.c **** 
 680:fltk-1.3.4-1/png/pngtrans.c **** #if defined(PNG_READ_CHECK_FOR_INVALID_INDEX_SUPPORTED) || \
 681:fltk-1.3.4-1/png/pngtrans.c ****     defined(PNG_WRITE_CHECK_FOR_INVALID_INDEX_SUPPORTED)
 682:fltk-1.3.4-1/png/pngtrans.c **** /* Added at libpng-1.5.10 */
 683:fltk-1.3.4-1/png/pngtrans.c **** void /* PRIVATE */
 684:fltk-1.3.4-1/png/pngtrans.c **** png_do_check_palette_indexes(png_structrp png_ptr, png_row_infop row_info)
 685:fltk-1.3.4-1/png/pngtrans.c **** {
 1226              		.loc 1 685 0
 1227              		.cfi_startproc
 1228              	.LVL138:
 686:fltk-1.3.4-1/png/pngtrans.c ****    if (png_ptr->num_palette < (1 << row_info->bit_depth) &&
 1229              		.loc 1 686 0
 1230 0000 440FB64E 		movzbl	17(%rsi), %r9d
 1230      11
 1231 0005 440FB787 		movzwl	616(%rdi), %r8d
 1231      68020000 
 1232 000d B8010000 		movl	$1, %eax
 1232      00
 1233 0012 4489C9   		movl	%r9d, %ecx
 1234 0015 D3E0     		sall	%cl, %eax
 1235 0017 4139C0   		cmpl	%eax, %r8d
 1236 001a 7D5E     		jge	.L175
 1237 001c 664585C0 		testw	%r8w, %r8w
 1238 0020 7458     		je	.L175
 1239              	.LBB22:
 687:fltk-1.3.4-1/png/pngtrans.c ****       png_ptr->num_palette > 0) /* num_palette can be 0 in MNG files */
 688:fltk-1.3.4-1/png/pngtrans.c ****    {
 689:fltk-1.3.4-1/png/pngtrans.c ****       /* Calculations moved outside switch in an attempt to stop different
 690:fltk-1.3.4-1/png/pngtrans.c ****        * compiler warnings.  'padding' is in *bits* within the last byte, it is
 691:fltk-1.3.4-1/png/pngtrans.c ****        * an 'int' because pixel_depth becomes an 'int' in the expression below,
 692:fltk-1.3.4-1/png/pngtrans.c ****        * and this calculation is used because it avoids warnings that other
 693:fltk-1.3.4-1/png/pngtrans.c ****        * forms produced on either GCC or MSVC.
 694:fltk-1.3.4-1/png/pngtrans.c ****        */
 695:fltk-1.3.4-1/png/pngtrans.c ****       int padding = (-row_info->pixel_depth * row_info->width) & 7;
 1240              		.loc 1 695 0
 1241 0022 0FB64E13 		movzbl	19(%rsi), %ecx
 696:fltk-1.3.4-1/png/pngtrans.c ****       png_bytep rp = png_ptr->row_buf + row_info->rowbytes;
 1242              		.loc 1 696 0
 1243 0026 4C8B8728 		movq	552(%rdi), %r8
 1243      020000
 1244 002d 4C89C0   		movq	%r8, %rax
 1245 0030 48034608 		addq	8(%rsi), %rax
 695:fltk-1.3.4-1/png/pngtrans.c ****       png_bytep rp = png_ptr->row_buf + row_info->rowbytes;
 1246              		.loc 1 695 0
 1247 0034 F7D9     		negl	%ecx
 1248 0036 0FAF0E   		imull	(%rsi), %ecx
 1249 0039 83E107   		andl	$7, %ecx
 1250              	.LVL139:
 697:fltk-1.3.4-1/png/pngtrans.c **** 
 698:fltk-1.3.4-1/png/pngtrans.c ****       switch (row_info->bit_depth)
 1251              		.loc 1 698 0
 1252 003c 4180F902 		cmpb	$2, %r9b
 1253 0040 746E     		je	.L179
 1254 0042 763C     		jbe	.L213
 1255 0044 4180F904 		cmpb	$4, %r9b
 1256 0048 0F84F200 		je	.L182
 1256      0000
 1257 004e 4180F908 		cmpb	$8, %r9b
 1258 0052 7526     		jne	.L175
 699:fltk-1.3.4-1/png/pngtrans.c ****       {
 700:fltk-1.3.4-1/png/pngtrans.c ****          case 1:
 701:fltk-1.3.4-1/png/pngtrans.c ****          {
 702:fltk-1.3.4-1/png/pngtrans.c ****             /* in this case, all bytes must be 0 so we don't need
 703:fltk-1.3.4-1/png/pngtrans.c ****              * to unpack the pixels except for the rightmost one.
 704:fltk-1.3.4-1/png/pngtrans.c ****              */
 705:fltk-1.3.4-1/png/pngtrans.c ****             for (; rp > png_ptr->row_buf; rp--)
 706:fltk-1.3.4-1/png/pngtrans.c ****             {
 707:fltk-1.3.4-1/png/pngtrans.c ****               if (*rp >> padding != 0)
 708:fltk-1.3.4-1/png/pngtrans.c ****                  png_ptr->num_palette_max = 1;
 709:fltk-1.3.4-1/png/pngtrans.c ****               padding = 0;
 710:fltk-1.3.4-1/png/pngtrans.c ****             }
 711:fltk-1.3.4-1/png/pngtrans.c **** 
 712:fltk-1.3.4-1/png/pngtrans.c ****             break;
 713:fltk-1.3.4-1/png/pngtrans.c ****          }
 714:fltk-1.3.4-1/png/pngtrans.c **** 
 715:fltk-1.3.4-1/png/pngtrans.c ****          case 2:
 716:fltk-1.3.4-1/png/pngtrans.c ****          {
 717:fltk-1.3.4-1/png/pngtrans.c ****             for (; rp > png_ptr->row_buf; rp--)
 718:fltk-1.3.4-1/png/pngtrans.c ****             {
 719:fltk-1.3.4-1/png/pngtrans.c ****               int i = ((*rp >> padding) & 0x03);
 720:fltk-1.3.4-1/png/pngtrans.c **** 
 721:fltk-1.3.4-1/png/pngtrans.c ****               if (i > png_ptr->num_palette_max)
 722:fltk-1.3.4-1/png/pngtrans.c ****                  png_ptr->num_palette_max = i;
 723:fltk-1.3.4-1/png/pngtrans.c **** 
 724:fltk-1.3.4-1/png/pngtrans.c ****               i = (((*rp >> padding) >> 2) & 0x03);
 725:fltk-1.3.4-1/png/pngtrans.c **** 
 726:fltk-1.3.4-1/png/pngtrans.c ****               if (i > png_ptr->num_palette_max)
 727:fltk-1.3.4-1/png/pngtrans.c ****                  png_ptr->num_palette_max = i;
 728:fltk-1.3.4-1/png/pngtrans.c **** 
 729:fltk-1.3.4-1/png/pngtrans.c ****               i = (((*rp >> padding) >> 4) & 0x03);
 730:fltk-1.3.4-1/png/pngtrans.c **** 
 731:fltk-1.3.4-1/png/pngtrans.c ****               if (i > png_ptr->num_palette_max)
 732:fltk-1.3.4-1/png/pngtrans.c ****                  png_ptr->num_palette_max = i;
 733:fltk-1.3.4-1/png/pngtrans.c **** 
 734:fltk-1.3.4-1/png/pngtrans.c ****               i = (((*rp >> padding) >> 6) & 0x03);
 735:fltk-1.3.4-1/png/pngtrans.c **** 
 736:fltk-1.3.4-1/png/pngtrans.c ****               if (i > png_ptr->num_palette_max)
 737:fltk-1.3.4-1/png/pngtrans.c ****                  png_ptr->num_palette_max = i;
 738:fltk-1.3.4-1/png/pngtrans.c **** 
 739:fltk-1.3.4-1/png/pngtrans.c ****               padding = 0;
 740:fltk-1.3.4-1/png/pngtrans.c ****             }
 741:fltk-1.3.4-1/png/pngtrans.c **** 
 742:fltk-1.3.4-1/png/pngtrans.c ****             break;
 743:fltk-1.3.4-1/png/pngtrans.c ****          }
 744:fltk-1.3.4-1/png/pngtrans.c **** 
 745:fltk-1.3.4-1/png/pngtrans.c ****          case 4:
 746:fltk-1.3.4-1/png/pngtrans.c ****          {
 747:fltk-1.3.4-1/png/pngtrans.c ****             for (; rp > png_ptr->row_buf; rp--)
 748:fltk-1.3.4-1/png/pngtrans.c ****             {
 749:fltk-1.3.4-1/png/pngtrans.c ****               int i = ((*rp >> padding) & 0x0f);
 750:fltk-1.3.4-1/png/pngtrans.c **** 
 751:fltk-1.3.4-1/png/pngtrans.c ****               if (i > png_ptr->num_palette_max)
 752:fltk-1.3.4-1/png/pngtrans.c ****                  png_ptr->num_palette_max = i;
 753:fltk-1.3.4-1/png/pngtrans.c **** 
 754:fltk-1.3.4-1/png/pngtrans.c ****               i = (((*rp >> padding) >> 4) & 0x0f);
 755:fltk-1.3.4-1/png/pngtrans.c **** 
 756:fltk-1.3.4-1/png/pngtrans.c ****               if (i > png_ptr->num_palette_max)
 757:fltk-1.3.4-1/png/pngtrans.c ****                  png_ptr->num_palette_max = i;
 758:fltk-1.3.4-1/png/pngtrans.c **** 
 759:fltk-1.3.4-1/png/pngtrans.c ****               padding = 0;
 760:fltk-1.3.4-1/png/pngtrans.c ****             }
 761:fltk-1.3.4-1/png/pngtrans.c **** 
 762:fltk-1.3.4-1/png/pngtrans.c ****             break;
 763:fltk-1.3.4-1/png/pngtrans.c ****          }
 764:fltk-1.3.4-1/png/pngtrans.c **** 
 765:fltk-1.3.4-1/png/pngtrans.c ****          case 8:
 766:fltk-1.3.4-1/png/pngtrans.c ****          {
 767:fltk-1.3.4-1/png/pngtrans.c ****             for (; rp > png_ptr->row_buf; rp--)
 1259              		.loc 1 767 0 discriminator 1
 1260 0054 4939C0   		cmpq	%rax, %r8
 1261 0057 0F833501 		jnb	.L214
 1261      0000
 1262 005d 0F1F00   		.p2align 4,,10
 1263              		.p2align 3
 1264              	.L206:
 768:fltk-1.3.4-1/png/pngtrans.c ****             {
 769:fltk-1.3.4-1/png/pngtrans.c ****                if (*rp > png_ptr->num_palette_max)
 1265              		.loc 1 769 0
 1266 0060 0FB610   		movzbl	(%rax), %edx
 1267 0063 3B976C02 		cmpl	620(%rdi), %edx
 1267      0000
 1268 0069 7E06     		jle	.L198
 770:fltk-1.3.4-1/png/pngtrans.c ****                   png_ptr->num_palette_max = (int) *rp;
 1269              		.loc 1 770 0
 1270 006b 89976C02 		movl	%edx, 620(%rdi)
 1270      0000
 1271              	.L198:
 767:fltk-1.3.4-1/png/pngtrans.c ****             {
 1272              		.loc 1 767 0
 1273 0071 4883E801 		subq	$1, %rax
 1274              	.LVL140:
 1275 0075 4939C0   		cmpq	%rax, %r8
 1276 0078 75E6     		jne	.L206
 1277              	.LVL141:
 1278              	.L175:
 1279 007a F3C3     		rep ret
 1280              	.LVL142:
 1281 007c 0F1F4000 		.p2align 4,,10
 1282              		.p2align 3
 1283              	.L213:
 698:fltk-1.3.4-1/png/pngtrans.c ****       {
 1284              		.loc 1 698 0
 1285 0080 4180F901 		cmpb	$1, %r9b
 1286 0084 0F850601 		jne	.L215
 1286      0000
 705:fltk-1.3.4-1/png/pngtrans.c ****             {
 1287              		.loc 1 705 0 discriminator 1
 1288 008a 4939C0   		cmpq	%rax, %r8
 1289 008d 73EB     		jnb	.L175
 1290              	.LVL143:
 1291 008f 90       		.p2align 4,,10
 1292              		.p2align 3
 1293              	.L189:
 707:fltk-1.3.4-1/png/pngtrans.c ****                  png_ptr->num_palette_max = 1;
 1294              		.loc 1 707 0
 1295 0090 0FB610   		movzbl	(%rax), %edx
 1296 0093 D3FA     		sarl	%cl, %edx
 1297 0095 85D2     		testl	%edx, %edx
 1298 0097 740A     		je	.L188
 708:fltk-1.3.4-1/png/pngtrans.c ****               padding = 0;
 1299              		.loc 1 708 0
 1300 0099 C7876C02 		movl	$1, 620(%rdi)
 1300      00000100 
 1300      0000
 1301              	.L188:
 1302              	.LVL144:
 705:fltk-1.3.4-1/png/pngtrans.c ****             {
 1303              		.loc 1 705 0
 1304 00a3 4883E801 		subq	$1, %rax
 1305              	.LVL145:
 709:fltk-1.3.4-1/png/pngtrans.c ****             }
 1306              		.loc 1 709 0
 1307 00a7 31C9     		xorl	%ecx, %ecx
 705:fltk-1.3.4-1/png/pngtrans.c ****             {
 1308              		.loc 1 705 0
 1309 00a9 4939C0   		cmpq	%rax, %r8
 1310 00ac 75E2     		jne	.L189
 1311 00ae F3C3     		rep ret
 1312              	.LVL146:
 1313              		.p2align 4,,10
 1314              		.p2align 3
 1315              	.L179:
 717:fltk-1.3.4-1/png/pngtrans.c ****             {
 1316              		.loc 1 717 0 discriminator 1
 1317 00b0 4939C0   		cmpq	%rax, %r8
 1318 00b3 0F83DD00 		jnb	.L216
 1318      0000
 1319              	.LVL147:
 1320 00b9 0F1F8000 		.p2align 4,,10
 1320      000000
 1321              		.p2align 3
 1322              	.L204:
 1323              	.LBB23:
 719:fltk-1.3.4-1/png/pngtrans.c **** 
 1324              		.loc 1 719 0
 1325 00c0 0FB610   		movzbl	(%rax), %edx
 721:fltk-1.3.4-1/png/pngtrans.c ****                  png_ptr->num_palette_max = i;
 1326              		.loc 1 721 0
 1327 00c3 8BB76C02 		movl	620(%rdi), %esi
 1327      0000
 719:fltk-1.3.4-1/png/pngtrans.c **** 
 1328              		.loc 1 719 0
 1329 00c9 D3FA     		sarl	%cl, %edx
 1330 00cb 4189D1   		movl	%edx, %r9d
 1331 00ce 4183E103 		andl	$3, %r9d
 1332              	.LVL148:
 721:fltk-1.3.4-1/png/pngtrans.c ****                  png_ptr->num_palette_max = i;
 1333              		.loc 1 721 0
 1334 00d2 4139F1   		cmpl	%esi, %r9d
 1335 00d5 7E0F     		jle	.L190
 722:fltk-1.3.4-1/png/pngtrans.c **** 
 1336              		.loc 1 722 0
 1337 00d7 44898F6C 		movl	%r9d, 620(%rdi)
 1337      020000
 1338 00de 0FB610   		movzbl	(%rax), %edx
 1339 00e1 4489CE   		movl	%r9d, %esi
 1340 00e4 D3FA     		sarl	%cl, %edx
 1341              	.L190:
 724:fltk-1.3.4-1/png/pngtrans.c **** 
 1342              		.loc 1 724 0
 1343 00e6 4189D1   		movl	%edx, %r9d
 1344              	.LVL149:
 1345 00e9 41C1F902 		sarl	$2, %r9d
 1346 00ed 4183E103 		andl	$3, %r9d
 1347              	.LVL150:
 726:fltk-1.3.4-1/png/pngtrans.c ****                  png_ptr->num_palette_max = i;
 1348              		.loc 1 726 0
 1349 00f1 4139F1   		cmpl	%esi, %r9d
 1350 00f4 7E0F     		jle	.L191
 727:fltk-1.3.4-1/png/pngtrans.c **** 
 1351              		.loc 1 727 0
 1352 00f6 44898F6C 		movl	%r9d, 620(%rdi)
 1352      020000
 1353 00fd 0FB610   		movzbl	(%rax), %edx
 1354 0100 4489CE   		movl	%r9d, %esi
 1355 0103 D3FA     		sarl	%cl, %edx
 1356              	.L191:
 729:fltk-1.3.4-1/png/pngtrans.c **** 
 1357              		.loc 1 729 0
 1358 0105 4189D1   		movl	%edx, %r9d
 1359              	.LVL151:
 1360 0108 41C1F904 		sarl	$4, %r9d
 1361 010c 4183E103 		andl	$3, %r9d
 1362              	.LVL152:
 731:fltk-1.3.4-1/png/pngtrans.c ****                  png_ptr->num_palette_max = i;
 1363              		.loc 1 731 0
 1364 0110 4139F1   		cmpl	%esi, %r9d
 1365 0113 7E0F     		jle	.L192
 732:fltk-1.3.4-1/png/pngtrans.c **** 
 1366              		.loc 1 732 0
 1367 0115 44898F6C 		movl	%r9d, 620(%rdi)
 1367      020000
 1368 011c 0FB610   		movzbl	(%rax), %edx
 1369 011f 4489CE   		movl	%r9d, %esi
 1370 0122 D3FA     		sarl	%cl, %edx
 1371              	.L192:
 734:fltk-1.3.4-1/png/pngtrans.c **** 
 1372              		.loc 1 734 0
 1373 0124 C1FA06   		sarl	$6, %edx
 1374              	.LVL153:
 736:fltk-1.3.4-1/png/pngtrans.c ****                  png_ptr->num_palette_max = i;
 1375              		.loc 1 736 0
 1376 0127 39F2     		cmpl	%esi, %edx
 1377 0129 7E06     		jle	.L193
 737:fltk-1.3.4-1/png/pngtrans.c **** 
 1378              		.loc 1 737 0
 1379 012b 89976C02 		movl	%edx, 620(%rdi)
 1379      0000
 1380              	.L193:
 1381              	.LVL154:
 1382              	.LBE23:
 717:fltk-1.3.4-1/png/pngtrans.c ****             {
 1383              		.loc 1 717 0
 1384 0131 4883E801 		subq	$1, %rax
 1385              	.LVL155:
 1386              	.LBB24:
 739:fltk-1.3.4-1/png/pngtrans.c ****             }
 1387              		.loc 1 739 0
 1388 0135 31C9     		xorl	%ecx, %ecx
 1389              	.LBE24:
 717:fltk-1.3.4-1/png/pngtrans.c ****             {
 1390              		.loc 1 717 0
 1391 0137 4939C0   		cmpq	%rax, %r8
 1392 013a 7584     		jne	.L204
 1393 013c F3C3     		rep ret
 1394              	.LVL156:
 1395 013e 6690     		.p2align 4,,10
 1396              		.p2align 3
 1397              	.L182:
 747:fltk-1.3.4-1/png/pngtrans.c ****             {
 1398              		.loc 1 747 0 discriminator 1
 1399 0140 4939C0   		cmpq	%rax, %r8
 1400 0143 734F     		jnb	.L217
 1401              	.LVL157:
 1402              		.p2align 4,,10
 1403 0145 0F1F00   		.p2align 3
 1404              	.L205:
 1405              	.LBB25:
 749:fltk-1.3.4-1/png/pngtrans.c **** 
 1406              		.loc 1 749 0
 1407 0148 0FB610   		movzbl	(%rax), %edx
 751:fltk-1.3.4-1/png/pngtrans.c ****                  png_ptr->num_palette_max = i;
 1408              		.loc 1 751 0
 1409 014b 8BB76C02 		movl	620(%rdi), %esi
 1409      0000
 749:fltk-1.3.4-1/png/pngtrans.c **** 
 1410              		.loc 1 749 0
 1411 0151 D3FA     		sarl	%cl, %edx
 1412 0153 4189D1   		movl	%edx, %r9d
 1413 0156 4183E10F 		andl	$15, %r9d
 1414              	.LVL158:
 751:fltk-1.3.4-1/png/pngtrans.c ****                  png_ptr->num_palette_max = i;
 1415              		.loc 1 751 0
 1416 015a 4139F1   		cmpl	%esi, %r9d
 1417 015d 7E0F     		jle	.L195
 752:fltk-1.3.4-1/png/pngtrans.c **** 
 1418              		.loc 1 752 0
 1419 015f 44898F6C 		movl	%r9d, 620(%rdi)
 1419      020000
 1420 0166 0FB610   		movzbl	(%rax), %edx
 1421 0169 4489CE   		movl	%r9d, %esi
 1422 016c D3FA     		sarl	%cl, %edx
 1423              	.L195:
 754:fltk-1.3.4-1/png/pngtrans.c **** 
 1424              		.loc 1 754 0
 1425 016e C1FA04   		sarl	$4, %edx
 1426              	.LVL159:
 756:fltk-1.3.4-1/png/pngtrans.c ****                  png_ptr->num_palette_max = i;
 1427              		.loc 1 756 0
 1428 0171 39F2     		cmpl	%esi, %edx
 1429 0173 7E06     		jle	.L196
 757:fltk-1.3.4-1/png/pngtrans.c **** 
 1430              		.loc 1 757 0
 1431 0175 89976C02 		movl	%edx, 620(%rdi)
 1431      0000
 1432              	.L196:
 1433              	.LVL160:
 1434              	.LBE25:
 747:fltk-1.3.4-1/png/pngtrans.c ****             {
 1435              		.loc 1 747 0
 1436 017b 4883E801 		subq	$1, %rax
 1437              	.LVL161:
 1438              	.LBB26:
 759:fltk-1.3.4-1/png/pngtrans.c ****             }
 1439              		.loc 1 759 0
 1440 017f 31C9     		xorl	%ecx, %ecx
 1441              	.LBE26:
 747:fltk-1.3.4-1/png/pngtrans.c ****             {
 1442              		.loc 1 747 0
 1443 0181 4939C0   		cmpq	%rax, %r8
 1444 0184 75C2     		jne	.L205
 1445 0186 F3C3     		rep ret
 1446              	.LVL162:
 1447 0188 0F1F8400 		.p2align 4,,10
 1447      00000000 
 1448              		.p2align 3
 1449              	.L215:
 1450 0190 F3C3     		rep ret
 1451              	.L214:
 1452 0192 F3C3     		rep ret
 1453              	.L217:
 1454 0194 F3C3     		rep ret
 1455              	.L216:
 1456 0196 F3C3     		rep ret
 1457              	.LBE22:
 1458              		.cfi_endproc
 1459              	.LFE72:
 1461              		.section	.text.unlikely.png_do_check_palette_indexes
 1462              	.LCOLDE18:
 1463              		.section	.text.png_do_check_palette_indexes
 1464              	.LHOTE18:
 1465              		.section	.rodata.str1.8
 1466 0061 00000000 		.align 8
 1466      000000
 1467              	.LC19:
 1468 0068 696E666F 		.string	"info change after png_start_read_image or png_read_update_info"
 1468      20636861 
 1468      6E676520 
 1468      61667465 
 1468      7220706E 
 1469              		.section	.text.unlikely.png_set_user_transform_info,"ax",@progbits
 1470              	.LCOLDB20:
 1471              		.section	.text.png_set_user_transform_info,"ax",@progbits
 1472              	.LHOTB20:
 1473              		.p2align 4,,15
 1474              		.globl	png_set_user_transform_info
 1476              	png_set_user_transform_info:
 1477              	.LFB73:
 771:fltk-1.3.4-1/png/pngtrans.c ****             }
 772:fltk-1.3.4-1/png/pngtrans.c **** 
 773:fltk-1.3.4-1/png/pngtrans.c ****             break;
 774:fltk-1.3.4-1/png/pngtrans.c ****          }
 775:fltk-1.3.4-1/png/pngtrans.c **** 
 776:fltk-1.3.4-1/png/pngtrans.c ****          default:
 777:fltk-1.3.4-1/png/pngtrans.c ****             break;
 778:fltk-1.3.4-1/png/pngtrans.c ****       }
 779:fltk-1.3.4-1/png/pngtrans.c ****    }
 780:fltk-1.3.4-1/png/pngtrans.c **** }
 781:fltk-1.3.4-1/png/pngtrans.c **** #endif /* CHECK_FOR_INVALID_INDEX */
 782:fltk-1.3.4-1/png/pngtrans.c **** 
 783:fltk-1.3.4-1/png/pngtrans.c **** #if defined(PNG_READ_USER_TRANSFORM_SUPPORTED) || \
 784:fltk-1.3.4-1/png/pngtrans.c ****     defined(PNG_WRITE_USER_TRANSFORM_SUPPORTED)
 785:fltk-1.3.4-1/png/pngtrans.c **** #ifdef PNG_USER_TRANSFORM_PTR_SUPPORTED
 786:fltk-1.3.4-1/png/pngtrans.c **** void PNGAPI
 787:fltk-1.3.4-1/png/pngtrans.c **** png_set_user_transform_info(png_structrp png_ptr, png_voidp
 788:fltk-1.3.4-1/png/pngtrans.c ****    user_transform_ptr, int user_transform_depth, int user_transform_channels)
 789:fltk-1.3.4-1/png/pngtrans.c **** {
 1478              		.loc 1 789 0
 1479              		.cfi_startproc
 1480              	.LVL163:
 790:fltk-1.3.4-1/png/pngtrans.c ****    png_debug(1, "in png_set_user_transform_info");
 791:fltk-1.3.4-1/png/pngtrans.c **** 
 792:fltk-1.3.4-1/png/pngtrans.c ****    if (png_ptr == NULL)
 1481              		.loc 1 792 0
 1482 0000 4885FF   		testq	%rdi, %rdi
 1483 0003 7425     		je	.L218
 793:fltk-1.3.4-1/png/pngtrans.c ****       return;
 794:fltk-1.3.4-1/png/pngtrans.c **** 
 795:fltk-1.3.4-1/png/pngtrans.c **** #ifdef PNG_READ_USER_TRANSFORM_SUPPORTED
 796:fltk-1.3.4-1/png/pngtrans.c ****    if ((png_ptr->mode & PNG_IS_READ_STRUCT) != 0 &&
 1484              		.loc 1 796 0
 1485 0005 F6872D01 		testb	$-128, 301(%rdi)
 1485      000080
 1486 000c 7409     		je	.L220
 1487              		.loc 1 796 0 is_stmt 0 discriminator 1
 1488 000e F6873001 		testb	$64, 304(%rdi)
 1488      000040
 1489 0015 7519     		jne	.L230
 1490              	.L220:
 797:fltk-1.3.4-1/png/pngtrans.c ****       (png_ptr->flags & PNG_FLAG_ROW_INIT) != 0)
 798:fltk-1.3.4-1/png/pngtrans.c ****    {
 799:fltk-1.3.4-1/png/pngtrans.c ****       png_app_error(png_ptr,
 800:fltk-1.3.4-1/png/pngtrans.c ****             "info change after png_start_read_image or png_read_update_info");
 801:fltk-1.3.4-1/png/pngtrans.c ****       return;
 802:fltk-1.3.4-1/png/pngtrans.c ****    }
 803:fltk-1.3.4-1/png/pngtrans.c **** #endif
 804:fltk-1.3.4-1/png/pngtrans.c **** 
 805:fltk-1.3.4-1/png/pngtrans.c ****    png_ptr->user_transform_ptr = user_transform_ptr;
 1491              		.loc 1 805 0 is_stmt 1
 1492 0017 4889B720 		movq	%rsi, 288(%rdi)
 1492      010000
 806:fltk-1.3.4-1/png/pngtrans.c ****    png_ptr->user_transform_depth = (png_byte)user_transform_depth;
 1493              		.loc 1 806 0
 1494 001e 88972801 		movb	%dl, 296(%rdi)
 1494      0000
 807:fltk-1.3.4-1/png/pngtrans.c ****    png_ptr->user_transform_channels = (png_byte)user_transform_channels;
 1495              		.loc 1 807 0
 1496 0024 888F2901 		movb	%cl, 297(%rdi)
 1496      0000
 1497              	.L218:
 1498 002a F3C3     		rep ret
 1499 002c 0F1F4000 		.p2align 4,,10
 1500              		.p2align 3
 1501              	.L230:
 799:fltk-1.3.4-1/png/pngtrans.c ****             "info change after png_start_read_image or png_read_update_info");
 1502              		.loc 1 799 0
 1503 0030 BE000000 		movl	$.LC19, %esi
 1503      00
 1504              	.LVL164:
 1505 0035 E9000000 		jmp	png_app_error
 1505      00
 1506              	.LVL165:
 1507              		.cfi_endproc
 1508              	.LFE73:
 1510              		.section	.text.unlikely.png_set_user_transform_info
 1511              	.LCOLDE20:
 1512              		.section	.text.png_set_user_transform_info
 1513              	.LHOTE20:
 1514              		.section	.text.unlikely.png_get_user_transform_ptr,"ax",@progbits
 1515              	.LCOLDB21:
 1516              		.section	.text.png_get_user_transform_ptr,"ax",@progbits
 1517              	.LHOTB21:
 1518              		.p2align 4,,15
 1519              		.globl	png_get_user_transform_ptr
 1521              	png_get_user_transform_ptr:
 1522              	.LFB74:
 808:fltk-1.3.4-1/png/pngtrans.c **** }
 809:fltk-1.3.4-1/png/pngtrans.c **** #endif
 810:fltk-1.3.4-1/png/pngtrans.c **** 
 811:fltk-1.3.4-1/png/pngtrans.c **** /* This function returns a pointer to the user_transform_ptr associated with
 812:fltk-1.3.4-1/png/pngtrans.c ****  * the user transform functions.  The application should free any memory
 813:fltk-1.3.4-1/png/pngtrans.c ****  * associated with this pointer before png_write_destroy and png_read_destroy
 814:fltk-1.3.4-1/png/pngtrans.c ****  * are called.
 815:fltk-1.3.4-1/png/pngtrans.c ****  */
 816:fltk-1.3.4-1/png/pngtrans.c **** #ifdef PNG_USER_TRANSFORM_PTR_SUPPORTED
 817:fltk-1.3.4-1/png/pngtrans.c **** png_voidp PNGAPI
 818:fltk-1.3.4-1/png/pngtrans.c **** png_get_user_transform_ptr(png_const_structrp png_ptr)
 819:fltk-1.3.4-1/png/pngtrans.c **** {
 1523              		.loc 1 819 0
 1524              		.cfi_startproc
 1525              	.LVL166:
 820:fltk-1.3.4-1/png/pngtrans.c ****    if (png_ptr == NULL)
 1526              		.loc 1 820 0
 1527 0000 4885FF   		testq	%rdi, %rdi
 1528 0003 740B     		je	.L233
 821:fltk-1.3.4-1/png/pngtrans.c ****       return (NULL);
 822:fltk-1.3.4-1/png/pngtrans.c **** 
 823:fltk-1.3.4-1/png/pngtrans.c ****    return png_ptr->user_transform_ptr;
 1529              		.loc 1 823 0
 1530 0005 488B8720 		movq	288(%rdi), %rax
 1530      010000
 1531 000c C3       		ret
 1532 000d 0F1F00   		.p2align 4,,10
 1533              		.p2align 3
 1534              	.L233:
 821:fltk-1.3.4-1/png/pngtrans.c ****       return (NULL);
 1535              		.loc 1 821 0
 1536 0010 31C0     		xorl	%eax, %eax
 824:fltk-1.3.4-1/png/pngtrans.c **** }
 1537              		.loc 1 824 0
 1538 0012 C3       		ret
 1539              		.cfi_endproc
 1540              	.LFE74:
 1542              		.section	.text.unlikely.png_get_user_transform_ptr
 1543              	.LCOLDE21:
 1544              		.section	.text.png_get_user_transform_ptr
 1545              	.LHOTE21:
 1546              		.section	.text.unlikely.png_get_current_row_number,"ax",@progbits
 1547              	.LCOLDB22:
 1548              		.section	.text.png_get_current_row_number,"ax",@progbits
 1549              	.LHOTB22:
 1550              		.p2align 4,,15
 1551              		.globl	png_get_current_row_number
 1553              	png_get_current_row_number:
 1554              	.LFB75:
 825:fltk-1.3.4-1/png/pngtrans.c **** #endif
 826:fltk-1.3.4-1/png/pngtrans.c **** 
 827:fltk-1.3.4-1/png/pngtrans.c **** #ifdef PNG_USER_TRANSFORM_INFO_SUPPORTED
 828:fltk-1.3.4-1/png/pngtrans.c **** png_uint_32 PNGAPI
 829:fltk-1.3.4-1/png/pngtrans.c **** png_get_current_row_number(png_const_structrp png_ptr)
 830:fltk-1.3.4-1/png/pngtrans.c **** {
 1555              		.loc 1 830 0
 1556              		.cfi_startproc
 1557              	.LVL167:
 831:fltk-1.3.4-1/png/pngtrans.c ****    /* See the comments in png.h - this is the sub-image row when reading an
 832:fltk-1.3.4-1/png/pngtrans.c ****     * interlaced image.
 833:fltk-1.3.4-1/png/pngtrans.c ****     */
 834:fltk-1.3.4-1/png/pngtrans.c ****    if (png_ptr != NULL)
 1558              		.loc 1 834 0
 1559 0000 4885FF   		testq	%rdi, %rdi
 835:fltk-1.3.4-1/png/pngtrans.c ****       return png_ptr->row_number;
 836:fltk-1.3.4-1/png/pngtrans.c **** 
 837:fltk-1.3.4-1/png/pngtrans.c ****    return PNG_UINT_32_MAX; /* help the app not to fail silently */
 1560              		.loc 1 837 0
 1561 0003 B8FFFFFF 		movl	$-1, %eax
 1561      FF
 834:fltk-1.3.4-1/png/pngtrans.c ****       return png_ptr->row_number;
 1562              		.loc 1 834 0
 1563 0008 7406     		je	.L235
 835:fltk-1.3.4-1/png/pngtrans.c ****       return png_ptr->row_number;
 1564              		.loc 1 835 0
 1565 000a 8B871402 		movl	532(%rdi), %eax
 1565      0000
 1566              	.L235:
 838:fltk-1.3.4-1/png/pngtrans.c **** }
 1567              		.loc 1 838 0
 1568 0010 F3C3     		rep ret
 1569              		.cfi_endproc
 1570              	.LFE75:
 1572              		.section	.text.unlikely.png_get_current_row_number
 1573              	.LCOLDE22:
 1574              		.section	.text.png_get_current_row_number
 1575              	.LHOTE22:
 1576              		.section	.text.unlikely.png_get_current_pass_number,"ax",@progbits
 1577              	.LCOLDB23:
 1578              		.section	.text.png_get_current_pass_number,"ax",@progbits
 1579              	.LHOTB23:
 1580              		.p2align 4,,15
 1581              		.globl	png_get_current_pass_number
 1583              	png_get_current_pass_number:
 1584              	.LFB76:
 839:fltk-1.3.4-1/png/pngtrans.c **** 
 840:fltk-1.3.4-1/png/pngtrans.c **** png_byte PNGAPI
 841:fltk-1.3.4-1/png/pngtrans.c **** png_get_current_pass_number(png_const_structrp png_ptr)
 842:fltk-1.3.4-1/png/pngtrans.c **** {
 1585              		.loc 1 842 0
 1586              		.cfi_startproc
 1587              	.LVL168:
 843:fltk-1.3.4-1/png/pngtrans.c ****    if (png_ptr != NULL)
 1588              		.loc 1 843 0
 1589 0000 4885FF   		testq	%rdi, %rdi
 844:fltk-1.3.4-1/png/pngtrans.c ****       return png_ptr->pass;
 845:fltk-1.3.4-1/png/pngtrans.c ****    return 8; /* invalid */
 1590              		.loc 1 845 0
 1591 0003 B8080000 		movl	$8, %eax
 1591      00
 843:fltk-1.3.4-1/png/pngtrans.c ****    if (png_ptr != NULL)
 1592              		.loc 1 843 0
 1593 0008 7407     		je	.L239
 844:fltk-1.3.4-1/png/pngtrans.c ****       return png_ptr->pass;
 1594              		.loc 1 844 0
 1595 000a 0FB68775 		movzbl	629(%rdi), %eax
 1595      020000
 1596              	.L239:
 846:fltk-1.3.4-1/png/pngtrans.c **** }
 1597              		.loc 1 846 0
 1598 0011 F3C3     		rep ret
 1599              		.cfi_endproc
 1600              	.LFE76:
 1602              		.section	.text.unlikely.png_get_current_pass_number
 1603              	.LCOLDE23:
 1604              		.section	.text.png_get_current_pass_number
 1605              	.LHOTE23:
 1606              		.section	.rodata.fourbppswaptable,"a",@progbits
 1607              		.align 32
 1610              	fourbppswaptable:
 1611 0000 00       		.byte	0
 1612 0001 10       		.byte	16
 1613 0002 20       		.byte	32
 1614 0003 30       		.byte	48
 1615 0004 40       		.byte	64
 1616 0005 50       		.byte	80
 1617 0006 60       		.byte	96
 1618 0007 70       		.byte	112
 1619 0008 80       		.byte	-128
 1620 0009 90       		.byte	-112
 1621 000a A0       		.byte	-96
 1622 000b B0       		.byte	-80
 1623 000c C0       		.byte	-64
 1624 000d D0       		.byte	-48
 1625 000e E0       		.byte	-32
 1626 000f F0       		.byte	-16
 1627 0010 01       		.byte	1
 1628 0011 11       		.byte	17
 1629 0012 21       		.byte	33
 1630 0013 31       		.byte	49
 1631 0014 41       		.byte	65
 1632 0015 51       		.byte	81
 1633 0016 61       		.byte	97
 1634 0017 71       		.byte	113
 1635 0018 81       		.byte	-127
 1636 0019 91       		.byte	-111
 1637 001a A1       		.byte	-95
 1638 001b B1       		.byte	-79
 1639 001c C1       		.byte	-63
 1640 001d D1       		.byte	-47
 1641 001e E1       		.byte	-31
 1642 001f F1       		.byte	-15
 1643 0020 02       		.byte	2
 1644 0021 12       		.byte	18
 1645 0022 22       		.byte	34
 1646 0023 32       		.byte	50
 1647 0024 42       		.byte	66
 1648 0025 52       		.byte	82
 1649 0026 62       		.byte	98
 1650 0027 72       		.byte	114
 1651 0028 82       		.byte	-126
 1652 0029 92       		.byte	-110
 1653 002a A2       		.byte	-94
 1654 002b B2       		.byte	-78
 1655 002c C2       		.byte	-62
 1656 002d D2       		.byte	-46
 1657 002e E2       		.byte	-30
 1658 002f F2       		.byte	-14
 1659 0030 03       		.byte	3
 1660 0031 13       		.byte	19
 1661 0032 23       		.byte	35
 1662 0033 33       		.byte	51
 1663 0034 43       		.byte	67
 1664 0035 53       		.byte	83
 1665 0036 63       		.byte	99
 1666 0037 73       		.byte	115
 1667 0038 83       		.byte	-125
 1668 0039 93       		.byte	-109
 1669 003a A3       		.byte	-93
 1670 003b B3       		.byte	-77
 1671 003c C3       		.byte	-61
 1672 003d D3       		.byte	-45
 1673 003e E3       		.byte	-29
 1674 003f F3       		.byte	-13
 1675 0040 04       		.byte	4
 1676 0041 14       		.byte	20
 1677 0042 24       		.byte	36
 1678 0043 34       		.byte	52
 1679 0044 44       		.byte	68
 1680 0045 54       		.byte	84
 1681 0046 64       		.byte	100
 1682 0047 74       		.byte	116
 1683 0048 84       		.byte	-124
 1684 0049 94       		.byte	-108
 1685 004a A4       		.byte	-92
 1686 004b B4       		.byte	-76
 1687 004c C4       		.byte	-60
 1688 004d D4       		.byte	-44
 1689 004e E4       		.byte	-28
 1690 004f F4       		.byte	-12
 1691 0050 05       		.byte	5
 1692 0051 15       		.byte	21
 1693 0052 25       		.byte	37
 1694 0053 35       		.byte	53
 1695 0054 45       		.byte	69
 1696 0055 55       		.byte	85
 1697 0056 65       		.byte	101
 1698 0057 75       		.byte	117
 1699 0058 85       		.byte	-123
 1700 0059 95       		.byte	-107
 1701 005a A5       		.byte	-91
 1702 005b B5       		.byte	-75
 1703 005c C5       		.byte	-59
 1704 005d D5       		.byte	-43
 1705 005e E5       		.byte	-27
 1706 005f F5       		.byte	-11
 1707 0060 06       		.byte	6
 1708 0061 16       		.byte	22
 1709 0062 26       		.byte	38
 1710 0063 36       		.byte	54
 1711 0064 46       		.byte	70
 1712 0065 56       		.byte	86
 1713 0066 66       		.byte	102
 1714 0067 76       		.byte	118
 1715 0068 86       		.byte	-122
 1716 0069 96       		.byte	-106
 1717 006a A6       		.byte	-90
 1718 006b B6       		.byte	-74
 1719 006c C6       		.byte	-58
 1720 006d D6       		.byte	-42
 1721 006e E6       		.byte	-26
 1722 006f F6       		.byte	-10
 1723 0070 07       		.byte	7
 1724 0071 17       		.byte	23
 1725 0072 27       		.byte	39
 1726 0073 37       		.byte	55
 1727 0074 47       		.byte	71
 1728 0075 57       		.byte	87
 1729 0076 67       		.byte	103
 1730 0077 77       		.byte	119
 1731 0078 87       		.byte	-121
 1732 0079 97       		.byte	-105
 1733 007a A7       		.byte	-89
 1734 007b B7       		.byte	-73
 1735 007c C7       		.byte	-57
 1736 007d D7       		.byte	-41
 1737 007e E7       		.byte	-25
 1738 007f F7       		.byte	-9
 1739 0080 08       		.byte	8
 1740 0081 18       		.byte	24
 1741 0082 28       		.byte	40
 1742 0083 38       		.byte	56
 1743 0084 48       		.byte	72
 1744 0085 58       		.byte	88
 1745 0086 68       		.byte	104
 1746 0087 78       		.byte	120
 1747 0088 88       		.byte	-120
 1748 0089 98       		.byte	-104
 1749 008a A8       		.byte	-88
 1750 008b B8       		.byte	-72
 1751 008c C8       		.byte	-56
 1752 008d D8       		.byte	-40
 1753 008e E8       		.byte	-24
 1754 008f F8       		.byte	-8
 1755 0090 09       		.byte	9
 1756 0091 19       		.byte	25
 1757 0092 29       		.byte	41
 1758 0093 39       		.byte	57
 1759 0094 49       		.byte	73
 1760 0095 59       		.byte	89
 1761 0096 69       		.byte	105
 1762 0097 79       		.byte	121
 1763 0098 89       		.byte	-119
 1764 0099 99       		.byte	-103
 1765 009a A9       		.byte	-87
 1766 009b B9       		.byte	-71
 1767 009c C9       		.byte	-55
 1768 009d D9       		.byte	-39
 1769 009e E9       		.byte	-23
 1770 009f F9       		.byte	-7
 1771 00a0 0A       		.byte	10
 1772 00a1 1A       		.byte	26
 1773 00a2 2A       		.byte	42
 1774 00a3 3A       		.byte	58
 1775 00a4 4A       		.byte	74
 1776 00a5 5A       		.byte	90
 1777 00a6 6A       		.byte	106
 1778 00a7 7A       		.byte	122
 1779 00a8 8A       		.byte	-118
 1780 00a9 9A       		.byte	-102
 1781 00aa AA       		.byte	-86
 1782 00ab BA       		.byte	-70
 1783 00ac CA       		.byte	-54
 1784 00ad DA       		.byte	-38
 1785 00ae EA       		.byte	-22
 1786 00af FA       		.byte	-6
 1787 00b0 0B       		.byte	11
 1788 00b1 1B       		.byte	27
 1789 00b2 2B       		.byte	43
 1790 00b3 3B       		.byte	59
 1791 00b4 4B       		.byte	75
 1792 00b5 5B       		.byte	91
 1793 00b6 6B       		.byte	107
 1794 00b7 7B       		.byte	123
 1795 00b8 8B       		.byte	-117
 1796 00b9 9B       		.byte	-101
 1797 00ba AB       		.byte	-85
 1798 00bb BB       		.byte	-69
 1799 00bc CB       		.byte	-53
 1800 00bd DB       		.byte	-37
 1801 00be EB       		.byte	-21
 1802 00bf FB       		.byte	-5
 1803 00c0 0C       		.byte	12
 1804 00c1 1C       		.byte	28
 1805 00c2 2C       		.byte	44
 1806 00c3 3C       		.byte	60
 1807 00c4 4C       		.byte	76
 1808 00c5 5C       		.byte	92
 1809 00c6 6C       		.byte	108
 1810 00c7 7C       		.byte	124
 1811 00c8 8C       		.byte	-116
 1812 00c9 9C       		.byte	-100
 1813 00ca AC       		.byte	-84
 1814 00cb BC       		.byte	-68
 1815 00cc CC       		.byte	-52
 1816 00cd DC       		.byte	-36
 1817 00ce EC       		.byte	-20
 1818 00cf FC       		.byte	-4
 1819 00d0 0D       		.byte	13
 1820 00d1 1D       		.byte	29
 1821 00d2 2D       		.byte	45
 1822 00d3 3D       		.byte	61
 1823 00d4 4D       		.byte	77
 1824 00d5 5D       		.byte	93
 1825 00d6 6D       		.byte	109
 1826 00d7 7D       		.byte	125
 1827 00d8 8D       		.byte	-115
 1828 00d9 9D       		.byte	-99
 1829 00da AD       		.byte	-83
 1830 00db BD       		.byte	-67
 1831 00dc CD       		.byte	-51
 1832 00dd DD       		.byte	-35
 1833 00de ED       		.byte	-19
 1834 00df FD       		.byte	-3
 1835 00e0 0E       		.byte	14
 1836 00e1 1E       		.byte	30
 1837 00e2 2E       		.byte	46
 1838 00e3 3E       		.byte	62
 1839 00e4 4E       		.byte	78
 1840 00e5 5E       		.byte	94
 1841 00e6 6E       		.byte	110
 1842 00e7 7E       		.byte	126
 1843 00e8 8E       		.byte	-114
 1844 00e9 9E       		.byte	-98
 1845 00ea AE       		.byte	-82
 1846 00eb BE       		.byte	-66
 1847 00ec CE       		.byte	-50
 1848 00ed DE       		.byte	-34
 1849 00ee EE       		.byte	-18
 1850 00ef FE       		.byte	-2
 1851 00f0 0F       		.byte	15
 1852 00f1 1F       		.byte	31
 1853 00f2 2F       		.byte	47
 1854 00f3 3F       		.byte	63
 1855 00f4 4F       		.byte	79
 1856 00f5 5F       		.byte	95
 1857 00f6 6F       		.byte	111
 1858 00f7 7F       		.byte	127
 1859 00f8 8F       		.byte	-113
 1860 00f9 9F       		.byte	-97
 1861 00fa AF       		.byte	-81
 1862 00fb BF       		.byte	-65
 1863 00fc CF       		.byte	-49
 1864 00fd DF       		.byte	-33
 1865 00fe EF       		.byte	-17
 1866 00ff FF       		.byte	-1
 1867              		.section	.rodata.twobppswaptable,"a",@progbits
 1868              		.align 32
 1871              	twobppswaptable:
 1872 0000 00       		.byte	0
 1873 0001 40       		.byte	64
 1874 0002 80       		.byte	-128
 1875 0003 C0       		.byte	-64
 1876 0004 10       		.byte	16
 1877 0005 50       		.byte	80
 1878 0006 90       		.byte	-112
 1879 0007 D0       		.byte	-48
 1880 0008 20       		.byte	32
 1881 0009 60       		.byte	96
 1882 000a A0       		.byte	-96
 1883 000b E0       		.byte	-32
 1884 000c 30       		.byte	48
 1885 000d 70       		.byte	112
 1886 000e B0       		.byte	-80
 1887 000f F0       		.byte	-16
 1888 0010 04       		.byte	4
 1889 0011 44       		.byte	68
 1890 0012 84       		.byte	-124
 1891 0013 C4       		.byte	-60
 1892 0014 14       		.byte	20
 1893 0015 54       		.byte	84
 1894 0016 94       		.byte	-108
 1895 0017 D4       		.byte	-44
 1896 0018 24       		.byte	36
 1897 0019 64       		.byte	100
 1898 001a A4       		.byte	-92
 1899 001b E4       		.byte	-28
 1900 001c 34       		.byte	52
 1901 001d 74       		.byte	116
 1902 001e B4       		.byte	-76
 1903 001f F4       		.byte	-12
 1904 0020 08       		.byte	8
 1905 0021 48       		.byte	72
 1906 0022 88       		.byte	-120
 1907 0023 C8       		.byte	-56
 1908 0024 18       		.byte	24
 1909 0025 58       		.byte	88
 1910 0026 98       		.byte	-104
 1911 0027 D8       		.byte	-40
 1912 0028 28       		.byte	40
 1913 0029 68       		.byte	104
 1914 002a A8       		.byte	-88
 1915 002b E8       		.byte	-24
 1916 002c 38       		.byte	56
 1917 002d 78       		.byte	120
 1918 002e B8       		.byte	-72
 1919 002f F8       		.byte	-8
 1920 0030 0C       		.byte	12
 1921 0031 4C       		.byte	76
 1922 0032 8C       		.byte	-116
 1923 0033 CC       		.byte	-52
 1924 0034 1C       		.byte	28
 1925 0035 5C       		.byte	92
 1926 0036 9C       		.byte	-100
 1927 0037 DC       		.byte	-36
 1928 0038 2C       		.byte	44
 1929 0039 6C       		.byte	108
 1930 003a AC       		.byte	-84
 1931 003b EC       		.byte	-20
 1932 003c 3C       		.byte	60
 1933 003d 7C       		.byte	124
 1934 003e BC       		.byte	-68
 1935 003f FC       		.byte	-4
 1936 0040 01       		.byte	1
 1937 0041 41       		.byte	65
 1938 0042 81       		.byte	-127
 1939 0043 C1       		.byte	-63
 1940 0044 11       		.byte	17
 1941 0045 51       		.byte	81
 1942 0046 91       		.byte	-111
 1943 0047 D1       		.byte	-47
 1944 0048 21       		.byte	33
 1945 0049 61       		.byte	97
 1946 004a A1       		.byte	-95
 1947 004b E1       		.byte	-31
 1948 004c 31       		.byte	49
 1949 004d 71       		.byte	113
 1950 004e B1       		.byte	-79
 1951 004f F1       		.byte	-15
 1952 0050 05       		.byte	5
 1953 0051 45       		.byte	69
 1954 0052 85       		.byte	-123
 1955 0053 C5       		.byte	-59
 1956 0054 15       		.byte	21
 1957 0055 55       		.byte	85
 1958 0056 95       		.byte	-107
 1959 0057 D5       		.byte	-43
 1960 0058 25       		.byte	37
 1961 0059 65       		.byte	101
 1962 005a A5       		.byte	-91
 1963 005b E5       		.byte	-27
 1964 005c 35       		.byte	53
 1965 005d 75       		.byte	117
 1966 005e B5       		.byte	-75
 1967 005f F5       		.byte	-11
 1968 0060 09       		.byte	9
 1969 0061 49       		.byte	73
 1970 0062 89       		.byte	-119
 1971 0063 C9       		.byte	-55
 1972 0064 19       		.byte	25
 1973 0065 59       		.byte	89
 1974 0066 99       		.byte	-103
 1975 0067 D9       		.byte	-39
 1976 0068 29       		.byte	41
 1977 0069 69       		.byte	105
 1978 006a A9       		.byte	-87
 1979 006b E9       		.byte	-23
 1980 006c 39       		.byte	57
 1981 006d 79       		.byte	121
 1982 006e B9       		.byte	-71
 1983 006f F9       		.byte	-7
 1984 0070 0D       		.byte	13
 1985 0071 4D       		.byte	77
 1986 0072 8D       		.byte	-115
 1987 0073 CD       		.byte	-51
 1988 0074 1D       		.byte	29
 1989 0075 5D       		.byte	93
 1990 0076 9D       		.byte	-99
 1991 0077 DD       		.byte	-35
 1992 0078 2D       		.byte	45
 1993 0079 6D       		.byte	109
 1994 007a AD       		.byte	-83
 1995 007b ED       		.byte	-19
 1996 007c 3D       		.byte	61
 1997 007d 7D       		.byte	125
 1998 007e BD       		.byte	-67
 1999 007f FD       		.byte	-3
 2000 0080 02       		.byte	2
 2001 0081 42       		.byte	66
 2002 0082 82       		.byte	-126
 2003 0083 C2       		.byte	-62
 2004 0084 12       		.byte	18
 2005 0085 52       		.byte	82
 2006 0086 92       		.byte	-110
 2007 0087 D2       		.byte	-46
 2008 0088 22       		.byte	34
 2009 0089 62       		.byte	98
 2010 008a A2       		.byte	-94
 2011 008b E2       		.byte	-30
 2012 008c 32       		.byte	50
 2013 008d 72       		.byte	114
 2014 008e B2       		.byte	-78
 2015 008f F2       		.byte	-14
 2016 0090 06       		.byte	6
 2017 0091 46       		.byte	70
 2018 0092 86       		.byte	-122
 2019 0093 C6       		.byte	-58
 2020 0094 16       		.byte	22
 2021 0095 56       		.byte	86
 2022 0096 96       		.byte	-106
 2023 0097 D6       		.byte	-42
 2024 0098 26       		.byte	38
 2025 0099 66       		.byte	102
 2026 009a A6       		.byte	-90
 2027 009b E6       		.byte	-26
 2028 009c 36       		.byte	54
 2029 009d 76       		.byte	118
 2030 009e B6       		.byte	-74
 2031 009f F6       		.byte	-10
 2032 00a0 0A       		.byte	10
 2033 00a1 4A       		.byte	74
 2034 00a2 8A       		.byte	-118
 2035 00a3 CA       		.byte	-54
 2036 00a4 1A       		.byte	26
 2037 00a5 5A       		.byte	90
 2038 00a6 9A       		.byte	-102
 2039 00a7 DA       		.byte	-38
 2040 00a8 2A       		.byte	42
 2041 00a9 6A       		.byte	106
 2042 00aa AA       		.byte	-86
 2043 00ab EA       		.byte	-22
 2044 00ac 3A       		.byte	58
 2045 00ad 7A       		.byte	122
 2046 00ae BA       		.byte	-70
 2047 00af FA       		.byte	-6
 2048 00b0 0E       		.byte	14
 2049 00b1 4E       		.byte	78
 2050 00b2 8E       		.byte	-114
 2051 00b3 CE       		.byte	-50
 2052 00b4 1E       		.byte	30
 2053 00b5 5E       		.byte	94
 2054 00b6 9E       		.byte	-98
 2055 00b7 DE       		.byte	-34
 2056 00b8 2E       		.byte	46
 2057 00b9 6E       		.byte	110
 2058 00ba AE       		.byte	-82
 2059 00bb EE       		.byte	-18
 2060 00bc 3E       		.byte	62
 2061 00bd 7E       		.byte	126
 2062 00be BE       		.byte	-66
 2063 00bf FE       		.byte	-2
 2064 00c0 03       		.byte	3
 2065 00c1 43       		.byte	67
 2066 00c2 83       		.byte	-125
 2067 00c3 C3       		.byte	-61
 2068 00c4 13       		.byte	19
 2069 00c5 53       		.byte	83
 2070 00c6 93       		.byte	-109
 2071 00c7 D3       		.byte	-45
 2072 00c8 23       		.byte	35
 2073 00c9 63       		.byte	99
 2074 00ca A3       		.byte	-93
 2075 00cb E3       		.byte	-29
 2076 00cc 33       		.byte	51
 2077 00cd 73       		.byte	115
 2078 00ce B3       		.byte	-77
 2079 00cf F3       		.byte	-13
 2080 00d0 07       		.byte	7
 2081 00d1 47       		.byte	71
 2082 00d2 87       		.byte	-121
 2083 00d3 C7       		.byte	-57
 2084 00d4 17       		.byte	23
 2085 00d5 57       		.byte	87
 2086 00d6 97       		.byte	-105
 2087 00d7 D7       		.byte	-41
 2088 00d8 27       		.byte	39
 2089 00d9 67       		.byte	103
 2090 00da A7       		.byte	-89
 2091 00db E7       		.byte	-25
 2092 00dc 37       		.byte	55
 2093 00dd 77       		.byte	119
 2094 00de B7       		.byte	-73
 2095 00df F7       		.byte	-9
 2096 00e0 0B       		.byte	11
 2097 00e1 4B       		.byte	75
 2098 00e2 8B       		.byte	-117
 2099 00e3 CB       		.byte	-53
 2100 00e4 1B       		.byte	27
 2101 00e5 5B       		.byte	91
 2102 00e6 9B       		.byte	-101
 2103 00e7 DB       		.byte	-37
 2104 00e8 2B       		.byte	43
 2105 00e9 6B       		.byte	107
 2106 00ea AB       		.byte	-85
 2107 00eb EB       		.byte	-21
 2108 00ec 3B       		.byte	59
 2109 00ed 7B       		.byte	123
 2110 00ee BB       		.byte	-69
 2111 00ef FB       		.byte	-5
 2112 00f0 0F       		.byte	15
 2113 00f1 4F       		.byte	79
 2114 00f2 8F       		.byte	-113
 2115 00f3 CF       		.byte	-49
 2116 00f4 1F       		.byte	31
 2117 00f5 5F       		.byte	95
 2118 00f6 9F       		.byte	-97
 2119 00f7 DF       		.byte	-33
 2120 00f8 2F       		.byte	47
 2121 00f9 6F       		.byte	111
 2122 00fa AF       		.byte	-81
 2123 00fb EF       		.byte	-17
 2124 00fc 3F       		.byte	63
 2125 00fd 7F       		.byte	127
 2126 00fe BF       		.byte	-65
 2127 00ff FF       		.byte	-1
 2128              		.section	.rodata.onebppswaptable,"a",@progbits
 2129              		.align 32
 2132              	onebppswaptable:
 2133 0000 00       		.byte	0
 2134 0001 80       		.byte	-128
 2135 0002 40       		.byte	64
 2136 0003 C0       		.byte	-64
 2137 0004 20       		.byte	32
 2138 0005 A0       		.byte	-96
 2139 0006 60       		.byte	96
 2140 0007 E0       		.byte	-32
 2141 0008 10       		.byte	16
 2142 0009 90       		.byte	-112
 2143 000a 50       		.byte	80
 2144 000b D0       		.byte	-48
 2145 000c 30       		.byte	48
 2146 000d B0       		.byte	-80
 2147 000e 70       		.byte	112
 2148 000f F0       		.byte	-16
 2149 0010 08       		.byte	8
 2150 0011 88       		.byte	-120
 2151 0012 48       		.byte	72
 2152 0013 C8       		.byte	-56
 2153 0014 28       		.byte	40
 2154 0015 A8       		.byte	-88
 2155 0016 68       		.byte	104
 2156 0017 E8       		.byte	-24
 2157 0018 18       		.byte	24
 2158 0019 98       		.byte	-104
 2159 001a 58       		.byte	88
 2160 001b D8       		.byte	-40
 2161 001c 38       		.byte	56
 2162 001d B8       		.byte	-72
 2163 001e 78       		.byte	120
 2164 001f F8       		.byte	-8
 2165 0020 04       		.byte	4
 2166 0021 84       		.byte	-124
 2167 0022 44       		.byte	68
 2168 0023 C4       		.byte	-60
 2169 0024 24       		.byte	36
 2170 0025 A4       		.byte	-92
 2171 0026 64       		.byte	100
 2172 0027 E4       		.byte	-28
 2173 0028 14       		.byte	20
 2174 0029 94       		.byte	-108
 2175 002a 54       		.byte	84
 2176 002b D4       		.byte	-44
 2177 002c 34       		.byte	52
 2178 002d B4       		.byte	-76
 2179 002e 74       		.byte	116
 2180 002f F4       		.byte	-12
 2181 0030 0C       		.byte	12
 2182 0031 8C       		.byte	-116
 2183 0032 4C       		.byte	76
 2184 0033 CC       		.byte	-52
 2185 0034 2C       		.byte	44
 2186 0035 AC       		.byte	-84
 2187 0036 6C       		.byte	108
 2188 0037 EC       		.byte	-20
 2189 0038 1C       		.byte	28
 2190 0039 9C       		.byte	-100
 2191 003a 5C       		.byte	92
 2192 003b DC       		.byte	-36
 2193 003c 3C       		.byte	60
 2194 003d BC       		.byte	-68
 2195 003e 7C       		.byte	124
 2196 003f FC       		.byte	-4
 2197 0040 02       		.byte	2
 2198 0041 82       		.byte	-126
 2199 0042 42       		.byte	66
 2200 0043 C2       		.byte	-62
 2201 0044 22       		.byte	34
 2202 0045 A2       		.byte	-94
 2203 0046 62       		.byte	98
 2204 0047 E2       		.byte	-30
 2205 0048 12       		.byte	18
 2206 0049 92       		.byte	-110
 2207 004a 52       		.byte	82
 2208 004b D2       		.byte	-46
 2209 004c 32       		.byte	50
 2210 004d B2       		.byte	-78
 2211 004e 72       		.byte	114
 2212 004f F2       		.byte	-14
 2213 0050 0A       		.byte	10
 2214 0051 8A       		.byte	-118
 2215 0052 4A       		.byte	74
 2216 0053 CA       		.byte	-54
 2217 0054 2A       		.byte	42
 2218 0055 AA       		.byte	-86
 2219 0056 6A       		.byte	106
 2220 0057 EA       		.byte	-22
 2221 0058 1A       		.byte	26
 2222 0059 9A       		.byte	-102
 2223 005a 5A       		.byte	90
 2224 005b DA       		.byte	-38
 2225 005c 3A       		.byte	58
 2226 005d BA       		.byte	-70
 2227 005e 7A       		.byte	122
 2228 005f FA       		.byte	-6
 2229 0060 06       		.byte	6
 2230 0061 86       		.byte	-122
 2231 0062 46       		.byte	70
 2232 0063 C6       		.byte	-58
 2233 0064 26       		.byte	38
 2234 0065 A6       		.byte	-90
 2235 0066 66       		.byte	102
 2236 0067 E6       		.byte	-26
 2237 0068 16       		.byte	22
 2238 0069 96       		.byte	-106
 2239 006a 56       		.byte	86
 2240 006b D6       		.byte	-42
 2241 006c 36       		.byte	54
 2242 006d B6       		.byte	-74
 2243 006e 76       		.byte	118
 2244 006f F6       		.byte	-10
 2245 0070 0E       		.byte	14
 2246 0071 8E       		.byte	-114
 2247 0072 4E       		.byte	78
 2248 0073 CE       		.byte	-50
 2249 0074 2E       		.byte	46
 2250 0075 AE       		.byte	-82
 2251 0076 6E       		.byte	110
 2252 0077 EE       		.byte	-18
 2253 0078 1E       		.byte	30
 2254 0079 9E       		.byte	-98
 2255 007a 5E       		.byte	94
 2256 007b DE       		.byte	-34
 2257 007c 3E       		.byte	62
 2258 007d BE       		.byte	-66
 2259 007e 7E       		.byte	126
 2260 007f FE       		.byte	-2
 2261 0080 01       		.byte	1
 2262 0081 81       		.byte	-127
 2263 0082 41       		.byte	65
 2264 0083 C1       		.byte	-63
 2265 0084 21       		.byte	33
 2266 0085 A1       		.byte	-95
 2267 0086 61       		.byte	97
 2268 0087 E1       		.byte	-31
 2269 0088 11       		.byte	17
 2270 0089 91       		.byte	-111
 2271 008a 51       		.byte	81
 2272 008b D1       		.byte	-47
 2273 008c 31       		.byte	49
 2274 008d B1       		.byte	-79
 2275 008e 71       		.byte	113
 2276 008f F1       		.byte	-15
 2277 0090 09       		.byte	9
 2278 0091 89       		.byte	-119
 2279 0092 49       		.byte	73
 2280 0093 C9       		.byte	-55
 2281 0094 29       		.byte	41
 2282 0095 A9       		.byte	-87
 2283 0096 69       		.byte	105
 2284 0097 E9       		.byte	-23
 2285 0098 19       		.byte	25
 2286 0099 99       		.byte	-103
 2287 009a 59       		.byte	89
 2288 009b D9       		.byte	-39
 2289 009c 39       		.byte	57
 2290 009d B9       		.byte	-71
 2291 009e 79       		.byte	121
 2292 009f F9       		.byte	-7
 2293 00a0 05       		.byte	5
 2294 00a1 85       		.byte	-123
 2295 00a2 45       		.byte	69
 2296 00a3 C5       		.byte	-59
 2297 00a4 25       		.byte	37
 2298 00a5 A5       		.byte	-91
 2299 00a6 65       		.byte	101
 2300 00a7 E5       		.byte	-27
 2301 00a8 15       		.byte	21
 2302 00a9 95       		.byte	-107
 2303 00aa 55       		.byte	85
 2304 00ab D5       		.byte	-43
 2305 00ac 35       		.byte	53
 2306 00ad B5       		.byte	-75
 2307 00ae 75       		.byte	117
 2308 00af F5       		.byte	-11
 2309 00b0 0D       		.byte	13
 2310 00b1 8D       		.byte	-115
 2311 00b2 4D       		.byte	77
 2312 00b3 CD       		.byte	-51
 2313 00b4 2D       		.byte	45
 2314 00b5 AD       		.byte	-83
 2315 00b6 6D       		.byte	109
 2316 00b7 ED       		.byte	-19
 2317 00b8 1D       		.byte	29
 2318 00b9 9D       		.byte	-99
 2319 00ba 5D       		.byte	93
 2320 00bb DD       		.byte	-35
 2321 00bc 3D       		.byte	61
 2322 00bd BD       		.byte	-67
 2323 00be 7D       		.byte	125
 2324 00bf FD       		.byte	-3
 2325 00c0 03       		.byte	3
 2326 00c1 83       		.byte	-125
 2327 00c2 43       		.byte	67
 2328 00c3 C3       		.byte	-61
 2329 00c4 23       		.byte	35
 2330 00c5 A3       		.byte	-93
 2331 00c6 63       		.byte	99
 2332 00c7 E3       		.byte	-29
 2333 00c8 13       		.byte	19
 2334 00c9 93       		.byte	-109
 2335 00ca 53       		.byte	83
 2336 00cb D3       		.byte	-45
 2337 00cc 33       		.byte	51
 2338 00cd B3       		.byte	-77
 2339 00ce 73       		.byte	115
 2340 00cf F3       		.byte	-13
 2341 00d0 0B       		.byte	11
 2342 00d1 8B       		.byte	-117
 2343 00d2 4B       		.byte	75
 2344 00d3 CB       		.byte	-53
 2345 00d4 2B       		.byte	43
 2346 00d5 AB       		.byte	-85
 2347 00d6 6B       		.byte	107
 2348 00d7 EB       		.byte	-21
 2349 00d8 1B       		.byte	27
 2350 00d9 9B       		.byte	-101
 2351 00da 5B       		.byte	91
 2352 00db DB       		.byte	-37
 2353 00dc 3B       		.byte	59
 2354 00dd BB       		.byte	-69
 2355 00de 7B       		.byte	123
 2356 00df FB       		.byte	-5
 2357 00e0 07       		.byte	7
 2358 00e1 87       		.byte	-121
 2359 00e2 47       		.byte	71
 2360 00e3 C7       		.byte	-57
 2361 00e4 27       		.byte	39
 2362 00e5 A7       		.byte	-89
 2363 00e6 67       		.byte	103
 2364 00e7 E7       		.byte	-25
 2365 00e8 17       		.byte	23
 2366 00e9 97       		.byte	-105
 2367 00ea 57       		.byte	87
 2368 00eb D7       		.byte	-41
 2369 00ec 37       		.byte	55
 2370 00ed B7       		.byte	-73
 2371 00ee 77       		.byte	119
 2372 00ef F7       		.byte	-9
 2373 00f0 0F       		.byte	15
 2374 00f1 8F       		.byte	-113
 2375 00f2 4F       		.byte	79
 2376 00f3 CF       		.byte	-49
 2377 00f4 2F       		.byte	47
 2378 00f5 AF       		.byte	-81
 2379 00f6 6F       		.byte	111
 2380 00f7 EF       		.byte	-17
 2381 00f8 1F       		.byte	31
 2382 00f9 9F       		.byte	-97
 2383 00fa 5F       		.byte	95
 2384 00fb DF       		.byte	-33
 2385 00fc 3F       		.byte	63
 2386 00fd BF       		.byte	-65
 2387 00fe 7F       		.byte	127
 2388 00ff FF       		.byte	-1
 2389              		.text
 2390              	.Letext0:
 2391              		.section	.text.unlikely.png_set_bgr
 2392              	.Letext_cold0:
 2393              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 2394              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 2395              		.file 4 "/usr/include/libio.h"
 2396              		.file 5 "/usr/include/x86_64-linux-gnu/bits/setjmp.h"
 2397              		.file 6 "/usr/include/x86_64-linux-gnu/bits/sigset.h"
 2398              		.file 7 "/usr/include/setjmp.h"
 2399              		.file 8 "fltk-1.3.4-1/png/pngconf.h"
 2400              		.file 9 "fltk-1.3.4-1/png/png.h"
 2401              		.file 10 "fltk-1.3.4-1/png/pngstruct.h"
 2402              		.file 11 "fltk-1.3.4-1/png/pnginfo.h"
 2403              		.file 12 "/usr/include/x86_64-linux-gnu/zconf.h"
 2404              		.file 13 "/usr/include/zlib.h"
 2405              		.file 14 "/usr/include/stdio.h"
 2406              		.file 15 "fltk-1.3.4-1/png/pngpriv.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 pngtrans.c
     /tmp/cce8tlof.s:14     .text.png_set_bgr:0000000000000000 png_set_bgr
     /tmp/cce8tlof.s:41     .text.png_set_swap:0000000000000000 png_set_swap
     /tmp/cce8tlof.s:74     .text.png_set_packing:0000000000000000 png_set_packing
     /tmp/cce8tlof.s:105    .text.png_set_packswap:0000000000000000 png_set_packswap
     /tmp/cce8tlof.s:134    .text.png_set_shift:0000000000000000 png_set_shift
     /tmp/cce8tlof.s:165    .text.png_set_interlace_handling:0000000000000000 png_set_interlace_handling
     /tmp/cce8tlof.s:210    .text.png_set_filler:0000000000000000 png_set_filler
     /tmp/cce8tlof.s:295    .text.png_set_add_alpha:0000000000000000 png_set_add_alpha
     /tmp/cce8tlof.s:340    .text.png_set_swap_alpha:0000000000000000 png_set_swap_alpha
     /tmp/cce8tlof.s:366    .text.png_set_invert_alpha:0000000000000000 png_set_invert_alpha
     /tmp/cce8tlof.s:392    .text.png_set_invert_mono:0000000000000000 png_set_invert_mono
     /tmp/cce8tlof.s:418    .text.png_do_invert:0000000000000000 png_do_invert
     /tmp/cce8tlof.s:535    .text.png_do_swap:0000000000000000 png_do_swap
     /tmp/cce8tlof.s:600    .text.png_do_packswap:0000000000000000 png_do_packswap
     /tmp/cce8tlof.s:1610   .rodata.fourbppswaptable:0000000000000000 fourbppswaptable
     /tmp/cce8tlof.s:1871   .rodata.twobppswaptable:0000000000000000 twobppswaptable
     /tmp/cce8tlof.s:2132   .rodata.onebppswaptable:0000000000000000 onebppswaptable
     /tmp/cce8tlof.s:679    .text.png_do_strip_channel:0000000000000000 png_do_strip_channel
     /tmp/cce8tlof.s:1006   .text.png_do_bgr:0000000000000000 png_do_bgr
     /tmp/cce8tlof.s:1224   .text.png_do_check_palette_indexes:0000000000000000 png_do_check_palette_indexes
     /tmp/cce8tlof.s:1476   .text.png_set_user_transform_info:0000000000000000 png_set_user_transform_info
     /tmp/cce8tlof.s:1521   .text.png_get_user_transform_ptr:0000000000000000 png_get_user_transform_ptr
     /tmp/cce8tlof.s:1553   .text.png_get_current_row_number:0000000000000000 png_get_current_row_number
     /tmp/cce8tlof.s:1583   .text.png_get_current_pass_number:0000000000000000 png_get_current_pass_number
                           .group:0000000000000000 wm4.0.cf9695abff4f49bdfe00dc4091904acd
                           .group:0000000000000000 wm4.stdcpredef.h.19.bf2bf6c5fb087dfb5ef2d2297c2795de
                           .group:0000000000000000 wm4.pngpriv.h.26.ca3d1719773cd86007410b516123e125
                           .group:0000000000000000 wm4.features.h.19.22780be97c2f806ec599b8b99aa89f7d
                           .group:0000000000000000 wm4.cdefs.h.19.56613e71f285ebad825b69b151170a81
                           .group:0000000000000000 wm4.wordsize.h.4.256e8fdbd37801980286acdbc40d0280
                           .group:0000000000000000 wm4.cdefs.h.432.619afd0aac7c4b439843706c1b28ddea
                           .group:0000000000000000 wm4.stubs64.h.10.918ceb5fa58268542bf143e4c1efbcf3
                           .group:0000000000000000 wm4.stdlib.h.27.59e2586c75bdbcb991b248ad7257b993
                           .group:0000000000000000 wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1
                           .group:0000000000000000 wm4.stdlib.h.37.e081b308f911db94d3185af615f2b2e2
                           .group:0000000000000000 wm4.string.h.23.8394011d5995a16f15d67d04e84a1d69
                           .group:0000000000000000 wm4.stddef.h.238.04cc7214bceba497b20d15c10fd97511
                           .group:0000000000000000 wm4.string.h.24.1b0dc67418e7128d207285861439c2f8
                           .group:0000000000000000 wm4.endian.h.19.ff00c9c0f5e9f9a9719c5de76ace57b4
                           .group:0000000000000000 wm4.endian.h.41.27d650ce666b76881e2a2a218ea61984
                           .group:0000000000000000 wm4.types.h.89.468e2451361e3b92f048f6cad51690ff
                           .group:0000000000000000 wm4.typesizes.h.24.40eb69a6270178f15d1bf3d7b6635a8b
                           .group:0000000000000000 wm4.string2.h.55.e4a4cfd7781cc64a4341475e67436ab1
                           .group:0000000000000000 wm4.string3.h.31.2b75bd65145c50aeedb61673ce0d3293
                           .group:0000000000000000 wm4.pnglibconf.h.15.30e2eea90e566ac06da4f4de487193d7
                           .group:0000000000000000 wm4.pngpriv.h.130.f65d93453b5b5837849611ffe82d627a
                           .group:0000000000000000 wm4.png.h.412.12a95b2193a7d0bc2282b72c70a28ce1
                           .group:0000000000000000 wm4.limits.h.23.f0fd92c175c1576df467c4d5fe2b091a
                           .group:0000000000000000 wm4.posix1_lim.h.25.28c8eb2d22697e7711efefdec5344a02
                           .group:0000000000000000 wm4.local_lim.h.25.97ee4129efb08ad296101237bcd3401b
                           .group:0000000000000000 wm4.limits.h.2.9ff59823e8adcf4502d980ef41362326
                           .group:0000000000000000 wm4.local_lim.h.42.9dc3935e0e3b94e23cda247e4e39bd8b
                           .group:0000000000000000 wm4.limits.h.60.eb7066f861c8b8edc7a0a399744b0335
                           .group:0000000000000000 wm4.stddef.h.39.d5a83c17f38162a5dd6f834eaf38f8ef
                           .group:0000000000000000 wm4.stdio.h.26.4719156f1aea2bb9662fd6c582dc9a4c
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:0000000000000000 wm4.stdio.h.36.2dd12c1fd035242ad5cfd0152a01be5a
                           .group:0000000000000000 wm4._G_config.h.5.b0f37d9e474454cf6e459063458db32f
                           .group:0000000000000000 wm4.wchar.h.80.eea3eba2d2a17aace9470a8e0d8218dc
                           .group:0000000000000000 wm4._G_config.h.46.5187c97b14fd664662cb32e6b94fc49e
                           .group:0000000000000000 wm4.libio.h.33.a775b9ecae273f33bc59931e9891e4ca
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.libio.h.51.dab170798ec1df48c625aea7c30e1b63
                           .group:0000000000000000 wm4.stdio.h.120.80cbf0ec1718a5b27e6428218e29c72d
                           .group:0000000000000000 wm4.stdio_lim.h.23.f8541119d1bcf759d7de9531671fd758
                           .group:0000000000000000 wm4.stdio.h.172.df21df34a7396d7da2e08f9b617d582f
                           .group:0000000000000000 wm4.stdio.h.26.e50fc3808d57d965ceefc6f6dd102eb7
                           .group:0000000000000000 wm4.sigset.h.20.f36413b6d2364ad847d3db53fb03e683
                           .group:0000000000000000 wm4.setjmp.h.67.51aa194c3c89a841663c00cb93fd90ff
                           .group:0000000000000000 wm4.time.h.26.6a3cabd4f228e226db6723a3b0c81ba6
                           .group:0000000000000000 wm4.time.h.40.99bfb90272c7e82357ef3c2f5c6fefc8
                           .group:0000000000000000 wm4.time.h.53.f8af6908497bac0ca16faea86fb8cd87
                           .group:0000000000000000 wm4.pngconf.h.86.6636b2584cb7be1618479e118d71e58c
                           .group:0000000000000000 wm4.png.h.506.fa53b6434c0b20c8e63094b04d7940c5
                           .group:0000000000000000 wm4.pngpriv.h.298.dc2c896ce0eddc5cfadee24e76e3c417
                           .group:0000000000000000 wm4.float.h.29.1cf88a0527b6b1225d49fbee2b32acb7
                           .group:0000000000000000 wm4.math.h.26.671af5ac9cd425a35e0730f7b6d7cde2
                           .group:0000000000000000 wm4.libmsimddeclstubs.h.34.75644856b74ba3d815155fe5fe7ecc56
                           .group:0000000000000000 wm4.mathdef.h.23.67c0aa4a204f1f427459dfc651aba565
                           .group:0000000000000000 wm4.math.h.55.cf380f99c57d42476a5252f30065036a
                           .group:0000000000000000 wm4.math.h.84.742292806c6be54f49dc607928a827f7
                           .group:0000000000000000 wm4.math.h.105.59ff0f83ebf6a04e70e145cef2d1185e
                           .group:0000000000000000 wm4.math.h.152.48a142bc1575e748473ff86330dee044
                           .group:0000000000000000 wm4.math.h.30.7cada3efe024725df2da4c705b6566be
                           .group:0000000000000000 wm4.pngpriv.h.481.f98e7c29eaaa759546a3f9808bc25c74
                           .group:0000000000000000 wm4.pngstruct.h.22.7b9573417641055ab8f42438aa8afadf
                           .group:0000000000000000 wm4.zconf.h.9.bbc7b5783b51507f7721a5620139b4ee
                           .group:0000000000000000 wm4.zconf.h.397.69c03305677a9a6792fe2a94f7c9f69b
                           .group:0000000000000000 wm4.types.h.23.92678977f3921b8dce508274ac68f78d
                           .group:0000000000000000 wm4.types.h.187.12f6c32afb936b45a5f241219964ce93
                           .group:0000000000000000 wm4.stdarg.h.31.48e922dd0aaedfb616aafd8a7b7a4949
                           .group:0000000000000000 wm4.unistd.h.23.c85a58a698f53edadcf64287ab24fecb
                           .group:0000000000000000 wm4.posix_opt.h.20.9a8aece77957db1725bd2b9521e5f9c5
                           .group:0000000000000000 wm4.unistd.h.213.4c582e35260d661b081322974b7c1e74
                           .group:0000000000000000 wm4.unistd.h.284.7e168706bc8bd978e02fd1da439d9bc3
                           .group:0000000000000000 wm4.confname.h.27.6b00117a32f457cc72e5ac810a9adade
                           .group:0000000000000000 wm4.zconf.h.457.505c3613686dd75e492569d7a56a6eb0
                           .group:0000000000000000 wm4.zlib.h.40.5a15529ab8e285cee4b0ddab32502c27
                           .group:0000000000000000 wm4.pngstruct.h.44.bc957704556ff8ddcb697678a008ffae
                           .group:0000000000000000 wm4.pngpriv.h.853.4585af3e74cfb155d8486c5333b94adf
                           .group:0000000000000000 wm4.pngdebug.h.36.e9c57d5f35e3128225fb629498ec6fc8

UNDEFINED SYMBOLS
png_app_error
