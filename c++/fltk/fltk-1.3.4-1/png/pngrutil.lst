   1              		.file	"pngrutil.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.unlikely.png_read_filter_row_sub,"ax",@progbits
   5              	.LCOLDB0:
   6              		.section	.text.png_read_filter_row_sub,"ax",@progbits
   7              	.LHOTB0:
   8              		.p2align 4,,15
   9              		.section	.text.unlikely.png_read_filter_row_sub
  10              	.Ltext_cold0:
  11              		.section	.text.png_read_filter_row_sub
  13              	png_read_filter_row_sub:
  14              	.LFB96:
  15              		.file 1 "fltk-1.3.4-1/png/pngrutil.c"
   1:fltk-1.3.4-1/png/pngrutil.c **** 
   2:fltk-1.3.4-1/png/pngrutil.c **** /* pngrutil.c - utilities to read a PNG file
   3:fltk-1.3.4-1/png/pngrutil.c ****  *
   4:fltk-1.3.4-1/png/pngrutil.c ****  * Last changed in libpng 1.6.15 [November 20, 2014]
   5:fltk-1.3.4-1/png/pngrutil.c ****  * Copyright (c) 1998-2014 Glenn Randers-Pehrson
   6:fltk-1.3.4-1/png/pngrutil.c ****  * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
   7:fltk-1.3.4-1/png/pngrutil.c ****  * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
   8:fltk-1.3.4-1/png/pngrutil.c ****  *
   9:fltk-1.3.4-1/png/pngrutil.c ****  * This code is released under the libpng license.
  10:fltk-1.3.4-1/png/pngrutil.c ****  * For conditions of distribution and use, see the disclaimer
  11:fltk-1.3.4-1/png/pngrutil.c ****  * and license in png.h
  12:fltk-1.3.4-1/png/pngrutil.c ****  *
  13:fltk-1.3.4-1/png/pngrutil.c ****  * This file contains routines that are only called from within
  14:fltk-1.3.4-1/png/pngrutil.c ****  * libpng itself during the course of reading an image.
  15:fltk-1.3.4-1/png/pngrutil.c ****  */
  16:fltk-1.3.4-1/png/pngrutil.c **** 
  17:fltk-1.3.4-1/png/pngrutil.c **** #include "pngpriv.h"
  18:fltk-1.3.4-1/png/pngrutil.c **** 
  19:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_SUPPORTED
  20:fltk-1.3.4-1/png/pngrutil.c **** 
  21:fltk-1.3.4-1/png/pngrutil.c **** png_uint_32 PNGAPI
  22:fltk-1.3.4-1/png/pngrutil.c **** png_get_uint_31(png_const_structrp png_ptr, png_const_bytep buf)
  23:fltk-1.3.4-1/png/pngrutil.c **** {
  24:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32 uval = png_get_uint_32(buf);
  25:fltk-1.3.4-1/png/pngrutil.c **** 
  26:fltk-1.3.4-1/png/pngrutil.c ****    if (uval > PNG_UINT_31_MAX)
  27:fltk-1.3.4-1/png/pngrutil.c ****       png_error(png_ptr, "PNG unsigned integer out of range");
  28:fltk-1.3.4-1/png/pngrutil.c **** 
  29:fltk-1.3.4-1/png/pngrutil.c ****    return (uval);
  30:fltk-1.3.4-1/png/pngrutil.c **** }
  31:fltk-1.3.4-1/png/pngrutil.c **** 
  32:fltk-1.3.4-1/png/pngrutil.c **** #if defined(PNG_READ_gAMA_SUPPORTED) || defined(PNG_READ_cHRM_SUPPORTED)
  33:fltk-1.3.4-1/png/pngrutil.c **** /* The following is a variation on the above for use with the fixed
  34:fltk-1.3.4-1/png/pngrutil.c ****  * point values used for gAMA and cHRM.  Instead of png_error it
  35:fltk-1.3.4-1/png/pngrutil.c ****  * issues a warning and returns (-1) - an invalid value because both
  36:fltk-1.3.4-1/png/pngrutil.c ****  * gAMA and cHRM use *unsigned* integers for fixed point values.
  37:fltk-1.3.4-1/png/pngrutil.c ****  */
  38:fltk-1.3.4-1/png/pngrutil.c **** #define PNG_FIXED_ERROR (-1)
  39:fltk-1.3.4-1/png/pngrutil.c **** 
  40:fltk-1.3.4-1/png/pngrutil.c **** static png_fixed_point /* PRIVATE */
  41:fltk-1.3.4-1/png/pngrutil.c **** png_get_fixed_point(png_structrp png_ptr, png_const_bytep buf)
  42:fltk-1.3.4-1/png/pngrutil.c **** {
  43:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32 uval = png_get_uint_32(buf);
  44:fltk-1.3.4-1/png/pngrutil.c **** 
  45:fltk-1.3.4-1/png/pngrutil.c ****    if (uval <= PNG_UINT_31_MAX)
  46:fltk-1.3.4-1/png/pngrutil.c ****       return (png_fixed_point)uval; /* known to be in range */
  47:fltk-1.3.4-1/png/pngrutil.c **** 
  48:fltk-1.3.4-1/png/pngrutil.c ****    /* The caller can turn off the warning by passing NULL. */
  49:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr != NULL)
  50:fltk-1.3.4-1/png/pngrutil.c ****       png_warning(png_ptr, "PNG fixed point integer out of range");
  51:fltk-1.3.4-1/png/pngrutil.c **** 
  52:fltk-1.3.4-1/png/pngrutil.c ****    return PNG_FIXED_ERROR;
  53:fltk-1.3.4-1/png/pngrutil.c **** }
  54:fltk-1.3.4-1/png/pngrutil.c **** #endif
  55:fltk-1.3.4-1/png/pngrutil.c **** 
  56:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_INT_FUNCTIONS_SUPPORTED
  57:fltk-1.3.4-1/png/pngrutil.c **** /* NOTE: the read macros will obscure these definitions, so that if
  58:fltk-1.3.4-1/png/pngrutil.c ****  * PNG_USE_READ_MACROS is set the library will not use them internally,
  59:fltk-1.3.4-1/png/pngrutil.c ****  * but the APIs will still be available externally.
  60:fltk-1.3.4-1/png/pngrutil.c ****  *
  61:fltk-1.3.4-1/png/pngrutil.c ****  * The parentheses around "PNGAPI function_name" in the following three
  62:fltk-1.3.4-1/png/pngrutil.c ****  * functions are necessary because they allow the macros to co-exist with
  63:fltk-1.3.4-1/png/pngrutil.c ****  * these (unused but exported) functions.
  64:fltk-1.3.4-1/png/pngrutil.c ****  */
  65:fltk-1.3.4-1/png/pngrutil.c **** 
  66:fltk-1.3.4-1/png/pngrutil.c **** /* Grab an unsigned 32-bit integer from a buffer in big-endian format. */
  67:fltk-1.3.4-1/png/pngrutil.c **** png_uint_32 (PNGAPI
  68:fltk-1.3.4-1/png/pngrutil.c **** png_get_uint_32)(png_const_bytep buf)
  69:fltk-1.3.4-1/png/pngrutil.c **** {
  70:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32 uval =
  71:fltk-1.3.4-1/png/pngrutil.c ****        ((png_uint_32)(*(buf    )) << 24) +
  72:fltk-1.3.4-1/png/pngrutil.c ****        ((png_uint_32)(*(buf + 1)) << 16) +
  73:fltk-1.3.4-1/png/pngrutil.c ****        ((png_uint_32)(*(buf + 2)) <<  8) +
  74:fltk-1.3.4-1/png/pngrutil.c ****        ((png_uint_32)(*(buf + 3))      ) ;
  75:fltk-1.3.4-1/png/pngrutil.c **** 
  76:fltk-1.3.4-1/png/pngrutil.c ****    return uval;
  77:fltk-1.3.4-1/png/pngrutil.c **** }
  78:fltk-1.3.4-1/png/pngrutil.c **** 
  79:fltk-1.3.4-1/png/pngrutil.c **** /* Grab a signed 32-bit integer from a buffer in big-endian format.  The
  80:fltk-1.3.4-1/png/pngrutil.c ****  * data is stored in the PNG file in two's complement format and there
  81:fltk-1.3.4-1/png/pngrutil.c ****  * is no guarantee that a 'png_int_32' is exactly 32 bits, therefore
  82:fltk-1.3.4-1/png/pngrutil.c ****  * the following code does a two's complement to native conversion.
  83:fltk-1.3.4-1/png/pngrutil.c ****  */
  84:fltk-1.3.4-1/png/pngrutil.c **** png_int_32 (PNGAPI
  85:fltk-1.3.4-1/png/pngrutil.c **** png_get_int_32)(png_const_bytep buf)
  86:fltk-1.3.4-1/png/pngrutil.c **** {
  87:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32 uval = png_get_uint_32(buf);
  88:fltk-1.3.4-1/png/pngrutil.c ****    if ((uval & 0x80000000) == 0) /* non-negative */
  89:fltk-1.3.4-1/png/pngrutil.c ****       return uval;
  90:fltk-1.3.4-1/png/pngrutil.c **** 
  91:fltk-1.3.4-1/png/pngrutil.c ****    uval = (uval ^ 0xffffffff) + 1;  /* 2's complement: -x = ~x+1 */
  92:fltk-1.3.4-1/png/pngrutil.c ****    return -(png_int_32)uval;
  93:fltk-1.3.4-1/png/pngrutil.c **** }
  94:fltk-1.3.4-1/png/pngrutil.c **** 
  95:fltk-1.3.4-1/png/pngrutil.c **** /* Grab an unsigned 16-bit integer from a buffer in big-endian format. */
  96:fltk-1.3.4-1/png/pngrutil.c **** png_uint_16 (PNGAPI
  97:fltk-1.3.4-1/png/pngrutil.c **** png_get_uint_16)(png_const_bytep buf)
  98:fltk-1.3.4-1/png/pngrutil.c **** {
  99:fltk-1.3.4-1/png/pngrutil.c ****    /* ANSI-C requires an int value to accomodate at least 16 bits so this
 100:fltk-1.3.4-1/png/pngrutil.c ****     * works and allows the compiler not to worry about possible narrowing
 101:fltk-1.3.4-1/png/pngrutil.c ****     * on 32 bit systems.  (Pre-ANSI systems did not make integers smaller
 102:fltk-1.3.4-1/png/pngrutil.c ****     * than 16 bits either.)
 103:fltk-1.3.4-1/png/pngrutil.c ****     */
 104:fltk-1.3.4-1/png/pngrutil.c ****    unsigned int val =
 105:fltk-1.3.4-1/png/pngrutil.c ****        ((unsigned int)(*buf) << 8) +
 106:fltk-1.3.4-1/png/pngrutil.c ****        ((unsigned int)(*(buf + 1)));
 107:fltk-1.3.4-1/png/pngrutil.c **** 
 108:fltk-1.3.4-1/png/pngrutil.c ****    return (png_uint_16)val;
 109:fltk-1.3.4-1/png/pngrutil.c **** }
 110:fltk-1.3.4-1/png/pngrutil.c **** 
 111:fltk-1.3.4-1/png/pngrutil.c **** #endif /* READ_INT_FUNCTIONS */
 112:fltk-1.3.4-1/png/pngrutil.c **** 
 113:fltk-1.3.4-1/png/pngrutil.c **** /* Read and check the PNG file signature */
 114:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
 115:fltk-1.3.4-1/png/pngrutil.c **** png_read_sig(png_structrp png_ptr, png_inforp info_ptr)
 116:fltk-1.3.4-1/png/pngrutil.c **** {
 117:fltk-1.3.4-1/png/pngrutil.c ****    png_size_t num_checked, num_to_check;
 118:fltk-1.3.4-1/png/pngrutil.c **** 
 119:fltk-1.3.4-1/png/pngrutil.c ****    /* Exit if the user application does not expect a signature. */
 120:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->sig_bytes >= 8)
 121:fltk-1.3.4-1/png/pngrutil.c ****       return;
 122:fltk-1.3.4-1/png/pngrutil.c **** 
 123:fltk-1.3.4-1/png/pngrutil.c ****    num_checked = png_ptr->sig_bytes;
 124:fltk-1.3.4-1/png/pngrutil.c ****    num_to_check = 8 - num_checked;
 125:fltk-1.3.4-1/png/pngrutil.c **** 
 126:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_IO_STATE_SUPPORTED
 127:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->io_state = PNG_IO_READING | PNG_IO_SIGNATURE;
 128:fltk-1.3.4-1/png/pngrutil.c **** #endif
 129:fltk-1.3.4-1/png/pngrutil.c **** 
 130:fltk-1.3.4-1/png/pngrutil.c ****    /* The signature must be serialized in a single I/O call. */
 131:fltk-1.3.4-1/png/pngrutil.c ****    png_read_data(png_ptr, &(info_ptr->signature[num_checked]), num_to_check);
 132:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->sig_bytes = 8;
 133:fltk-1.3.4-1/png/pngrutil.c **** 
 134:fltk-1.3.4-1/png/pngrutil.c ****    if (png_sig_cmp(info_ptr->signature, num_checked, num_to_check) != 0)
 135:fltk-1.3.4-1/png/pngrutil.c ****    {
 136:fltk-1.3.4-1/png/pngrutil.c ****       if (num_checked < 4 &&
 137:fltk-1.3.4-1/png/pngrutil.c ****           png_sig_cmp(info_ptr->signature, num_checked, num_to_check - 4))
 138:fltk-1.3.4-1/png/pngrutil.c ****          png_error(png_ptr, "Not a PNG file");
 139:fltk-1.3.4-1/png/pngrutil.c ****       else
 140:fltk-1.3.4-1/png/pngrutil.c ****          png_error(png_ptr, "PNG file corrupted by ASCII conversion");
 141:fltk-1.3.4-1/png/pngrutil.c ****    }
 142:fltk-1.3.4-1/png/pngrutil.c ****    if (num_checked < 3)
 143:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->mode |= PNG_HAVE_PNG_SIGNATURE;
 144:fltk-1.3.4-1/png/pngrutil.c **** }
 145:fltk-1.3.4-1/png/pngrutil.c **** 
 146:fltk-1.3.4-1/png/pngrutil.c **** /* Read the chunk header (length + type name).
 147:fltk-1.3.4-1/png/pngrutil.c ****  * Put the type name into png_ptr->chunk_name, and return the length.
 148:fltk-1.3.4-1/png/pngrutil.c ****  */
 149:fltk-1.3.4-1/png/pngrutil.c **** png_uint_32 /* PRIVATE */
 150:fltk-1.3.4-1/png/pngrutil.c **** png_read_chunk_header(png_structrp png_ptr)
 151:fltk-1.3.4-1/png/pngrutil.c **** {
 152:fltk-1.3.4-1/png/pngrutil.c ****    png_byte buf[8];
 153:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32 length;
 154:fltk-1.3.4-1/png/pngrutil.c **** 
 155:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_IO_STATE_SUPPORTED
 156:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->io_state = PNG_IO_READING | PNG_IO_CHUNK_HDR;
 157:fltk-1.3.4-1/png/pngrutil.c **** #endif
 158:fltk-1.3.4-1/png/pngrutil.c **** 
 159:fltk-1.3.4-1/png/pngrutil.c ****    /* Read the length and the chunk name.
 160:fltk-1.3.4-1/png/pngrutil.c ****     * This must be performed in a single I/O call.
 161:fltk-1.3.4-1/png/pngrutil.c ****     */
 162:fltk-1.3.4-1/png/pngrutil.c ****    png_read_data(png_ptr, buf, 8);
 163:fltk-1.3.4-1/png/pngrutil.c ****    length = png_get_uint_31(png_ptr, buf);
 164:fltk-1.3.4-1/png/pngrutil.c **** 
 165:fltk-1.3.4-1/png/pngrutil.c ****    /* Put the chunk name into png_ptr->chunk_name. */
 166:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->chunk_name = PNG_CHUNK_FROM_STRING(buf+4);
 167:fltk-1.3.4-1/png/pngrutil.c **** 
 168:fltk-1.3.4-1/png/pngrutil.c ****    png_debug2(0, "Reading %lx chunk, length = %lu",
 169:fltk-1.3.4-1/png/pngrutil.c ****        (unsigned long)png_ptr->chunk_name, (unsigned long)length);
 170:fltk-1.3.4-1/png/pngrutil.c **** 
 171:fltk-1.3.4-1/png/pngrutil.c ****    /* Reset the crc and run it over the chunk name. */
 172:fltk-1.3.4-1/png/pngrutil.c ****    png_reset_crc(png_ptr);
 173:fltk-1.3.4-1/png/pngrutil.c ****    png_calculate_crc(png_ptr, buf + 4, 4);
 174:fltk-1.3.4-1/png/pngrutil.c **** 
 175:fltk-1.3.4-1/png/pngrutil.c ****    /* Check to see if chunk name is valid. */
 176:fltk-1.3.4-1/png/pngrutil.c ****    png_check_chunk_name(png_ptr, png_ptr->chunk_name);
 177:fltk-1.3.4-1/png/pngrutil.c **** 
 178:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_IO_STATE_SUPPORTED
 179:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->io_state = PNG_IO_READING | PNG_IO_CHUNK_DATA;
 180:fltk-1.3.4-1/png/pngrutil.c **** #endif
 181:fltk-1.3.4-1/png/pngrutil.c **** 
 182:fltk-1.3.4-1/png/pngrutil.c ****    return length;
 183:fltk-1.3.4-1/png/pngrutil.c **** }
 184:fltk-1.3.4-1/png/pngrutil.c **** 
 185:fltk-1.3.4-1/png/pngrutil.c **** /* Read data, and (optionally) run it through the CRC. */
 186:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
 187:fltk-1.3.4-1/png/pngrutil.c **** png_crc_read(png_structrp png_ptr, png_bytep buf, png_uint_32 length)
 188:fltk-1.3.4-1/png/pngrutil.c **** {
 189:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr == NULL)
 190:fltk-1.3.4-1/png/pngrutil.c ****       return;
 191:fltk-1.3.4-1/png/pngrutil.c **** 
 192:fltk-1.3.4-1/png/pngrutil.c ****    png_read_data(png_ptr, buf, length);
 193:fltk-1.3.4-1/png/pngrutil.c ****    png_calculate_crc(png_ptr, buf, length);
 194:fltk-1.3.4-1/png/pngrutil.c **** }
 195:fltk-1.3.4-1/png/pngrutil.c **** 
 196:fltk-1.3.4-1/png/pngrutil.c **** /* Optionally skip data and then check the CRC.  Depending on whether we
 197:fltk-1.3.4-1/png/pngrutil.c ****  * are reading an ancillary or critical chunk, and how the program has set
 198:fltk-1.3.4-1/png/pngrutil.c ****  * things up, we may calculate the CRC on the data and print a message.
 199:fltk-1.3.4-1/png/pngrutil.c ****  * Returns '1' if there was a CRC error, '0' otherwise.
 200:fltk-1.3.4-1/png/pngrutil.c ****  */
 201:fltk-1.3.4-1/png/pngrutil.c **** int /* PRIVATE */
 202:fltk-1.3.4-1/png/pngrutil.c **** png_crc_finish(png_structrp png_ptr, png_uint_32 skip)
 203:fltk-1.3.4-1/png/pngrutil.c **** {
 204:fltk-1.3.4-1/png/pngrutil.c ****    /* The size of the local buffer for inflate is a good guess as to a
 205:fltk-1.3.4-1/png/pngrutil.c ****     * reasonable size to use for buffering reads from the application.
 206:fltk-1.3.4-1/png/pngrutil.c ****     */
 207:fltk-1.3.4-1/png/pngrutil.c ****    while (skip > 0)
 208:fltk-1.3.4-1/png/pngrutil.c ****    {
 209:fltk-1.3.4-1/png/pngrutil.c ****       png_uint_32 len;
 210:fltk-1.3.4-1/png/pngrutil.c ****       png_byte tmpbuf[PNG_INFLATE_BUF_SIZE];
 211:fltk-1.3.4-1/png/pngrutil.c **** 
 212:fltk-1.3.4-1/png/pngrutil.c ****       len = (sizeof tmpbuf);
 213:fltk-1.3.4-1/png/pngrutil.c ****       if (len > skip)
 214:fltk-1.3.4-1/png/pngrutil.c ****          len = skip;
 215:fltk-1.3.4-1/png/pngrutil.c ****       skip -= len;
 216:fltk-1.3.4-1/png/pngrutil.c **** 
 217:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_read(png_ptr, tmpbuf, len);
 218:fltk-1.3.4-1/png/pngrutil.c ****    }
 219:fltk-1.3.4-1/png/pngrutil.c **** 
 220:fltk-1.3.4-1/png/pngrutil.c ****    if (png_crc_error(png_ptr) != 0)
 221:fltk-1.3.4-1/png/pngrutil.c ****    {
 222:fltk-1.3.4-1/png/pngrutil.c ****       if (PNG_CHUNK_ANCILLARY(png_ptr->chunk_name) != 0 ?
 223:fltk-1.3.4-1/png/pngrutil.c ****           (png_ptr->flags & PNG_FLAG_CRC_ANCILLARY_NOWARN) == 0 :
 224:fltk-1.3.4-1/png/pngrutil.c ****           (png_ptr->flags & PNG_FLAG_CRC_CRITICAL_USE) != 0)
 225:fltk-1.3.4-1/png/pngrutil.c ****       {
 226:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_warning(png_ptr, "CRC error");
 227:fltk-1.3.4-1/png/pngrutil.c ****       }
 228:fltk-1.3.4-1/png/pngrutil.c **** 
 229:fltk-1.3.4-1/png/pngrutil.c ****       else
 230:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_error(png_ptr, "CRC error");
 231:fltk-1.3.4-1/png/pngrutil.c **** 
 232:fltk-1.3.4-1/png/pngrutil.c ****       return (1);
 233:fltk-1.3.4-1/png/pngrutil.c ****    }
 234:fltk-1.3.4-1/png/pngrutil.c **** 
 235:fltk-1.3.4-1/png/pngrutil.c ****    return (0);
 236:fltk-1.3.4-1/png/pngrutil.c **** }
 237:fltk-1.3.4-1/png/pngrutil.c **** 
 238:fltk-1.3.4-1/png/pngrutil.c **** /* Compare the CRC stored in the PNG file with that calculated by libpng from
 239:fltk-1.3.4-1/png/pngrutil.c ****  * the data it has read thus far.
 240:fltk-1.3.4-1/png/pngrutil.c ****  */
 241:fltk-1.3.4-1/png/pngrutil.c **** int /* PRIVATE */
 242:fltk-1.3.4-1/png/pngrutil.c **** png_crc_error(png_structrp png_ptr)
 243:fltk-1.3.4-1/png/pngrutil.c **** {
 244:fltk-1.3.4-1/png/pngrutil.c ****    png_byte crc_bytes[4];
 245:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32 crc;
 246:fltk-1.3.4-1/png/pngrutil.c ****    int need_crc = 1;
 247:fltk-1.3.4-1/png/pngrutil.c **** 
 248:fltk-1.3.4-1/png/pngrutil.c ****    if (PNG_CHUNK_ANCILLARY(png_ptr->chunk_name) != 0)
 249:fltk-1.3.4-1/png/pngrutil.c ****    {
 250:fltk-1.3.4-1/png/pngrutil.c ****       if ((png_ptr->flags & PNG_FLAG_CRC_ANCILLARY_MASK) ==
 251:fltk-1.3.4-1/png/pngrutil.c ****           (PNG_FLAG_CRC_ANCILLARY_USE | PNG_FLAG_CRC_ANCILLARY_NOWARN))
 252:fltk-1.3.4-1/png/pngrutil.c ****          need_crc = 0;
 253:fltk-1.3.4-1/png/pngrutil.c ****    }
 254:fltk-1.3.4-1/png/pngrutil.c **** 
 255:fltk-1.3.4-1/png/pngrutil.c ****    else /* critical */
 256:fltk-1.3.4-1/png/pngrutil.c ****    {
 257:fltk-1.3.4-1/png/pngrutil.c ****       if ((png_ptr->flags & PNG_FLAG_CRC_CRITICAL_IGNORE) != 0)
 258:fltk-1.3.4-1/png/pngrutil.c ****          need_crc = 0;
 259:fltk-1.3.4-1/png/pngrutil.c ****    }
 260:fltk-1.3.4-1/png/pngrutil.c **** 
 261:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_IO_STATE_SUPPORTED
 262:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->io_state = PNG_IO_READING | PNG_IO_CHUNK_CRC;
 263:fltk-1.3.4-1/png/pngrutil.c **** #endif
 264:fltk-1.3.4-1/png/pngrutil.c **** 
 265:fltk-1.3.4-1/png/pngrutil.c ****    /* The chunk CRC must be serialized in a single I/O call. */
 266:fltk-1.3.4-1/png/pngrutil.c ****    png_read_data(png_ptr, crc_bytes, 4);
 267:fltk-1.3.4-1/png/pngrutil.c **** 
 268:fltk-1.3.4-1/png/pngrutil.c ****    if (need_crc != 0)
 269:fltk-1.3.4-1/png/pngrutil.c ****    {
 270:fltk-1.3.4-1/png/pngrutil.c ****       crc = png_get_uint_32(crc_bytes);
 271:fltk-1.3.4-1/png/pngrutil.c ****       return ((int)(crc != png_ptr->crc));
 272:fltk-1.3.4-1/png/pngrutil.c ****    }
 273:fltk-1.3.4-1/png/pngrutil.c **** 
 274:fltk-1.3.4-1/png/pngrutil.c ****    else
 275:fltk-1.3.4-1/png/pngrutil.c ****       return (0);
 276:fltk-1.3.4-1/png/pngrutil.c **** }
 277:fltk-1.3.4-1/png/pngrutil.c **** 
 278:fltk-1.3.4-1/png/pngrutil.c **** #if defined(PNG_READ_iCCP_SUPPORTED) || defined(PNG_READ_iTXt_SUPPORTED) ||\
 279:fltk-1.3.4-1/png/pngrutil.c ****     defined(PNG_READ_pCAL_SUPPORTED) || defined(PNG_READ_sCAL_SUPPORTED) ||\
 280:fltk-1.3.4-1/png/pngrutil.c ****     defined(PNG_READ_sPLT_SUPPORTED) || defined(PNG_READ_tEXt_SUPPORTED) ||\
 281:fltk-1.3.4-1/png/pngrutil.c ****     defined(PNG_READ_zTXt_SUPPORTED) || defined(PNG_SEQUENTIAL_READ_SUPPORTED)
 282:fltk-1.3.4-1/png/pngrutil.c **** /* Manage the read buffer; this simply reallocates the buffer if it is not small
 283:fltk-1.3.4-1/png/pngrutil.c ****  * enough (or if it is not allocated).  The routine returns a pointer to the
 284:fltk-1.3.4-1/png/pngrutil.c ****  * buffer; if an error occurs and 'warn' is set the routine returns NULL, else
 285:fltk-1.3.4-1/png/pngrutil.c ****  * it will call png_error (via png_malloc) on failure.  (warn == 2 means
 286:fltk-1.3.4-1/png/pngrutil.c ****  * 'silent').
 287:fltk-1.3.4-1/png/pngrutil.c ****  */
 288:fltk-1.3.4-1/png/pngrutil.c **** static png_bytep
 289:fltk-1.3.4-1/png/pngrutil.c **** png_read_buffer(png_structrp png_ptr, png_alloc_size_t new_size, int warn)
 290:fltk-1.3.4-1/png/pngrutil.c **** {
 291:fltk-1.3.4-1/png/pngrutil.c ****    png_bytep buffer = png_ptr->read_buffer;
 292:fltk-1.3.4-1/png/pngrutil.c **** 
 293:fltk-1.3.4-1/png/pngrutil.c ****    if (buffer != NULL && new_size > png_ptr->read_buffer_size)
 294:fltk-1.3.4-1/png/pngrutil.c ****    {
 295:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->read_buffer = NULL;
 296:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->read_buffer = NULL;
 297:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->read_buffer_size = 0;
 298:fltk-1.3.4-1/png/pngrutil.c ****       png_free(png_ptr, buffer);
 299:fltk-1.3.4-1/png/pngrutil.c ****       buffer = NULL;
 300:fltk-1.3.4-1/png/pngrutil.c ****    }
 301:fltk-1.3.4-1/png/pngrutil.c **** 
 302:fltk-1.3.4-1/png/pngrutil.c ****    if (buffer == NULL)
 303:fltk-1.3.4-1/png/pngrutil.c ****    {
 304:fltk-1.3.4-1/png/pngrutil.c ****       buffer = png_voidcast(png_bytep, png_malloc_base(png_ptr, new_size));
 305:fltk-1.3.4-1/png/pngrutil.c **** 
 306:fltk-1.3.4-1/png/pngrutil.c ****       if (buffer != NULL)
 307:fltk-1.3.4-1/png/pngrutil.c ****       {
 308:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->read_buffer = buffer;
 309:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->read_buffer_size = new_size;
 310:fltk-1.3.4-1/png/pngrutil.c ****       }
 311:fltk-1.3.4-1/png/pngrutil.c **** 
 312:fltk-1.3.4-1/png/pngrutil.c ****       else if (warn < 2) /* else silent */
 313:fltk-1.3.4-1/png/pngrutil.c ****       {
 314:fltk-1.3.4-1/png/pngrutil.c ****          if (warn != 0)
 315:fltk-1.3.4-1/png/pngrutil.c ****              png_chunk_warning(png_ptr, "insufficient memory to read chunk");
 316:fltk-1.3.4-1/png/pngrutil.c **** 
 317:fltk-1.3.4-1/png/pngrutil.c ****          else
 318:fltk-1.3.4-1/png/pngrutil.c ****              png_chunk_error(png_ptr, "insufficient memory to read chunk");
 319:fltk-1.3.4-1/png/pngrutil.c ****       }
 320:fltk-1.3.4-1/png/pngrutil.c ****    }
 321:fltk-1.3.4-1/png/pngrutil.c **** 
 322:fltk-1.3.4-1/png/pngrutil.c ****    return buffer;
 323:fltk-1.3.4-1/png/pngrutil.c **** }
 324:fltk-1.3.4-1/png/pngrutil.c **** #endif /* READ_iCCP|iTXt|pCAL|sCAL|sPLT|tEXt|zTXt|SEQUENTIAL_READ */
 325:fltk-1.3.4-1/png/pngrutil.c **** 
 326:fltk-1.3.4-1/png/pngrutil.c **** /* png_inflate_claim: claim the zstream for some nefarious purpose that involves
 327:fltk-1.3.4-1/png/pngrutil.c ****  * decompression.  Returns Z_OK on success, else a zlib error code.  It checks
 328:fltk-1.3.4-1/png/pngrutil.c ****  * the owner but, in final release builds, just issues a warning if some other
 329:fltk-1.3.4-1/png/pngrutil.c ****  * chunk apparently owns the stream.  Prior to release it does a png_error.
 330:fltk-1.3.4-1/png/pngrutil.c ****  */
 331:fltk-1.3.4-1/png/pngrutil.c **** static int
 332:fltk-1.3.4-1/png/pngrutil.c **** png_inflate_claim(png_structrp png_ptr, png_uint_32 owner)
 333:fltk-1.3.4-1/png/pngrutil.c **** {
 334:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->zowner != 0)
 335:fltk-1.3.4-1/png/pngrutil.c ****    {
 336:fltk-1.3.4-1/png/pngrutil.c ****       char msg[64];
 337:fltk-1.3.4-1/png/pngrutil.c **** 
 338:fltk-1.3.4-1/png/pngrutil.c ****       PNG_STRING_FROM_CHUNK(msg, png_ptr->zowner);
 339:fltk-1.3.4-1/png/pngrutil.c ****       /* So the message that results is "<chunk> using zstream"; this is an
 340:fltk-1.3.4-1/png/pngrutil.c ****        * internal error, but is very useful for debugging.  i18n requirements
 341:fltk-1.3.4-1/png/pngrutil.c ****        * are minimal.
 342:fltk-1.3.4-1/png/pngrutil.c ****        */
 343:fltk-1.3.4-1/png/pngrutil.c ****       (void)png_safecat(msg, (sizeof msg), 4, " using zstream");
 344:fltk-1.3.4-1/png/pngrutil.c **** #if PNG_LIBPNG_BUILD_BASE_TYPE >= PNG_LIBPNG_BUILD_RC
 345:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_warning(png_ptr, msg);
 346:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zowner = 0;
 347:fltk-1.3.4-1/png/pngrutil.c **** #else
 348:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, msg);
 349:fltk-1.3.4-1/png/pngrutil.c **** #endif
 350:fltk-1.3.4-1/png/pngrutil.c ****    }
 351:fltk-1.3.4-1/png/pngrutil.c **** 
 352:fltk-1.3.4-1/png/pngrutil.c ****    /* Implementation note: unlike 'png_deflate_claim' this internal function
 353:fltk-1.3.4-1/png/pngrutil.c ****     * does not take the size of the data as an argument.  Some efficiency could
 354:fltk-1.3.4-1/png/pngrutil.c ****     * be gained by using this when it is known *if* the zlib stream itself does
 355:fltk-1.3.4-1/png/pngrutil.c ****     * not record the number; however, this is an illusion: the original writer
 356:fltk-1.3.4-1/png/pngrutil.c ****     * of the PNG may have selected a lower window size, and we really must
 357:fltk-1.3.4-1/png/pngrutil.c ****     * follow that because, for systems with with limited capabilities, we
 358:fltk-1.3.4-1/png/pngrutil.c ****     * would otherwise reject the application's attempts to use a smaller window
 359:fltk-1.3.4-1/png/pngrutil.c ****     * size (zlib doesn't have an interface to say "this or lower"!).
 360:fltk-1.3.4-1/png/pngrutil.c ****     *
 361:fltk-1.3.4-1/png/pngrutil.c ****     * inflateReset2 was added to zlib 1.2.4; before this the window could not be
 362:fltk-1.3.4-1/png/pngrutil.c ****     * reset, therefore it is necessary to always allocate the maximum window
 363:fltk-1.3.4-1/png/pngrutil.c ****     * size with earlier zlibs just in case later compressed chunks need it.
 364:fltk-1.3.4-1/png/pngrutil.c ****     */
 365:fltk-1.3.4-1/png/pngrutil.c ****    {
 366:fltk-1.3.4-1/png/pngrutil.c ****       int ret; /* zlib return code */
 367:fltk-1.3.4-1/png/pngrutil.c **** #if PNG_ZLIB_VERNUM >= 0x1240
 368:fltk-1.3.4-1/png/pngrutil.c **** 
 369:fltk-1.3.4-1/png/pngrutil.c **** # if defined(PNG_SET_OPTION_SUPPORTED) && defined(PNG_MAXIMUM_INFLATE_WINDOW)
 370:fltk-1.3.4-1/png/pngrutil.c ****       int window_bits;
 371:fltk-1.3.4-1/png/pngrutil.c **** 
 372:fltk-1.3.4-1/png/pngrutil.c ****       if (((png_ptr->options >> PNG_MAXIMUM_INFLATE_WINDOW) & 3) ==
 373:fltk-1.3.4-1/png/pngrutil.c ****           PNG_OPTION_ON)
 374:fltk-1.3.4-1/png/pngrutil.c ****          window_bits = 15;
 375:fltk-1.3.4-1/png/pngrutil.c **** 
 376:fltk-1.3.4-1/png/pngrutil.c ****       else
 377:fltk-1.3.4-1/png/pngrutil.c ****          window_bits = 0;
 378:fltk-1.3.4-1/png/pngrutil.c **** # else
 379:fltk-1.3.4-1/png/pngrutil.c **** #   define window_bits 0
 380:fltk-1.3.4-1/png/pngrutil.c **** # endif
 381:fltk-1.3.4-1/png/pngrutil.c **** #endif
 382:fltk-1.3.4-1/png/pngrutil.c **** 
 383:fltk-1.3.4-1/png/pngrutil.c ****       /* Set this for safety, just in case the previous owner left pointers to
 384:fltk-1.3.4-1/png/pngrutil.c ****        * memory allocations.
 385:fltk-1.3.4-1/png/pngrutil.c ****        */
 386:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.next_in = NULL;
 387:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.avail_in = 0;
 388:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.next_out = NULL;
 389:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.avail_out = 0;
 390:fltk-1.3.4-1/png/pngrutil.c **** 
 391:fltk-1.3.4-1/png/pngrutil.c ****       if ((png_ptr->flags & PNG_FLAG_ZSTREAM_INITIALIZED) != 0)
 392:fltk-1.3.4-1/png/pngrutil.c ****       {
 393:fltk-1.3.4-1/png/pngrutil.c **** #if PNG_ZLIB_VERNUM < 0x1240
 394:fltk-1.3.4-1/png/pngrutil.c ****          ret = inflateReset(&png_ptr->zstream);
 395:fltk-1.3.4-1/png/pngrutil.c **** #else
 396:fltk-1.3.4-1/png/pngrutil.c ****          ret = inflateReset2(&png_ptr->zstream, window_bits);
 397:fltk-1.3.4-1/png/pngrutil.c **** #endif
 398:fltk-1.3.4-1/png/pngrutil.c ****       }
 399:fltk-1.3.4-1/png/pngrutil.c **** 
 400:fltk-1.3.4-1/png/pngrutil.c ****       else
 401:fltk-1.3.4-1/png/pngrutil.c ****       {
 402:fltk-1.3.4-1/png/pngrutil.c **** #if PNG_ZLIB_VERNUM < 0x1240
 403:fltk-1.3.4-1/png/pngrutil.c ****          ret = inflateInit(&png_ptr->zstream);
 404:fltk-1.3.4-1/png/pngrutil.c **** #else
 405:fltk-1.3.4-1/png/pngrutil.c ****          ret = inflateInit2(&png_ptr->zstream, window_bits);
 406:fltk-1.3.4-1/png/pngrutil.c **** #endif
 407:fltk-1.3.4-1/png/pngrutil.c **** 
 408:fltk-1.3.4-1/png/pngrutil.c ****          if (ret == Z_OK)
 409:fltk-1.3.4-1/png/pngrutil.c ****             png_ptr->flags |= PNG_FLAG_ZSTREAM_INITIALIZED;
 410:fltk-1.3.4-1/png/pngrutil.c ****       }
 411:fltk-1.3.4-1/png/pngrutil.c **** 
 412:fltk-1.3.4-1/png/pngrutil.c ****       if (ret == Z_OK)
 413:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->zowner = owner;
 414:fltk-1.3.4-1/png/pngrutil.c **** 
 415:fltk-1.3.4-1/png/pngrutil.c ****       else
 416:fltk-1.3.4-1/png/pngrutil.c ****          png_zstream_error(png_ptr, ret);
 417:fltk-1.3.4-1/png/pngrutil.c **** 
 418:fltk-1.3.4-1/png/pngrutil.c ****       return ret;
 419:fltk-1.3.4-1/png/pngrutil.c ****    }
 420:fltk-1.3.4-1/png/pngrutil.c **** 
 421:fltk-1.3.4-1/png/pngrutil.c **** #ifdef window_bits
 422:fltk-1.3.4-1/png/pngrutil.c **** # undef window_bits
 423:fltk-1.3.4-1/png/pngrutil.c **** #endif
 424:fltk-1.3.4-1/png/pngrutil.c **** }
 425:fltk-1.3.4-1/png/pngrutil.c **** 
 426:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_COMPRESSED_TEXT_SUPPORTED
 427:fltk-1.3.4-1/png/pngrutil.c **** /* png_inflate now returns zlib error codes including Z_OK and Z_STREAM_END to
 428:fltk-1.3.4-1/png/pngrutil.c ****  * allow the caller to do multiple calls if required.  If the 'finish' flag is
 429:fltk-1.3.4-1/png/pngrutil.c ****  * set Z_FINISH will be passed to the final inflate() call and Z_STREAM_END must
 430:fltk-1.3.4-1/png/pngrutil.c ****  * be returned or there has been a problem, otherwise Z_SYNC_FLUSH is used and
 431:fltk-1.3.4-1/png/pngrutil.c ****  * Z_OK or Z_STREAM_END will be returned on success.
 432:fltk-1.3.4-1/png/pngrutil.c ****  *
 433:fltk-1.3.4-1/png/pngrutil.c ****  * The input and output sizes are updated to the actual amounts of data consumed
 434:fltk-1.3.4-1/png/pngrutil.c ****  * or written, not the amount available (as in a z_stream).  The data pointers
 435:fltk-1.3.4-1/png/pngrutil.c ****  * are not changed, so the next input is (data+input_size) and the next
 436:fltk-1.3.4-1/png/pngrutil.c ****  * available output is (output+output_size).
 437:fltk-1.3.4-1/png/pngrutil.c ****  */
 438:fltk-1.3.4-1/png/pngrutil.c **** static int
 439:fltk-1.3.4-1/png/pngrutil.c **** png_inflate(png_structrp png_ptr, png_uint_32 owner, int finish,
 440:fltk-1.3.4-1/png/pngrutil.c ****     /* INPUT: */ png_const_bytep input, png_uint_32p input_size_ptr,
 441:fltk-1.3.4-1/png/pngrutil.c ****     /* OUTPUT: */ png_bytep output, png_alloc_size_t *output_size_ptr)
 442:fltk-1.3.4-1/png/pngrutil.c **** {
 443:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->zowner == owner) /* Else not claimed */
 444:fltk-1.3.4-1/png/pngrutil.c ****    {
 445:fltk-1.3.4-1/png/pngrutil.c ****       int ret;
 446:fltk-1.3.4-1/png/pngrutil.c ****       png_alloc_size_t avail_out = *output_size_ptr;
 447:fltk-1.3.4-1/png/pngrutil.c ****       png_uint_32 avail_in = *input_size_ptr;
 448:fltk-1.3.4-1/png/pngrutil.c **** 
 449:fltk-1.3.4-1/png/pngrutil.c ****       /* zlib can't necessarily handle more than 65535 bytes at once (i.e. it
 450:fltk-1.3.4-1/png/pngrutil.c ****        * can't even necessarily handle 65536 bytes) because the type uInt is
 451:fltk-1.3.4-1/png/pngrutil.c ****        * "16 bits or more".  Consequently it is necessary to chunk the input to
 452:fltk-1.3.4-1/png/pngrutil.c ****        * zlib.  This code uses ZLIB_IO_MAX, from pngpriv.h, as the maximum (the
 453:fltk-1.3.4-1/png/pngrutil.c ****        * maximum value that can be stored in a uInt.)  It is possible to set
 454:fltk-1.3.4-1/png/pngrutil.c ****        * ZLIB_IO_MAX to a lower value in pngpriv.h and this may sometimes have
 455:fltk-1.3.4-1/png/pngrutil.c ****        * a performance advantage, because it reduces the amount of data accessed
 456:fltk-1.3.4-1/png/pngrutil.c ****        * at each step and that may give the OS more time to page it in.
 457:fltk-1.3.4-1/png/pngrutil.c ****        */
 458:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.next_in = PNGZ_INPUT_CAST(input);
 459:fltk-1.3.4-1/png/pngrutil.c ****       /* avail_in and avail_out are set below from 'size' */
 460:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.avail_in = 0;
 461:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.avail_out = 0;
 462:fltk-1.3.4-1/png/pngrutil.c **** 
 463:fltk-1.3.4-1/png/pngrutil.c ****       /* Read directly into the output if it is available (this is set to
 464:fltk-1.3.4-1/png/pngrutil.c ****        * a local buffer below if output is NULL).
 465:fltk-1.3.4-1/png/pngrutil.c ****        */
 466:fltk-1.3.4-1/png/pngrutil.c ****       if (output != NULL)
 467:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->zstream.next_out = output;
 468:fltk-1.3.4-1/png/pngrutil.c **** 
 469:fltk-1.3.4-1/png/pngrutil.c ****       do
 470:fltk-1.3.4-1/png/pngrutil.c ****       {
 471:fltk-1.3.4-1/png/pngrutil.c ****          uInt avail;
 472:fltk-1.3.4-1/png/pngrutil.c ****          Byte local_buffer[PNG_INFLATE_BUF_SIZE];
 473:fltk-1.3.4-1/png/pngrutil.c **** 
 474:fltk-1.3.4-1/png/pngrutil.c ****          /* zlib INPUT BUFFER */
 475:fltk-1.3.4-1/png/pngrutil.c ****          /* The setting of 'avail_in' used to be outside the loop; by setting it
 476:fltk-1.3.4-1/png/pngrutil.c ****           * inside it is possible to chunk the input to zlib and simply rely on
 477:fltk-1.3.4-1/png/pngrutil.c ****           * zlib to advance the 'next_in' pointer.  This allows arbitrary
 478:fltk-1.3.4-1/png/pngrutil.c ****           * amounts of data to be passed through zlib at the unavoidable cost of
 479:fltk-1.3.4-1/png/pngrutil.c ****           * requiring a window save (memcpy of up to 32768 output bytes)
 480:fltk-1.3.4-1/png/pngrutil.c ****           * every ZLIB_IO_MAX input bytes.
 481:fltk-1.3.4-1/png/pngrutil.c ****           */
 482:fltk-1.3.4-1/png/pngrutil.c ****          avail_in += png_ptr->zstream.avail_in; /* not consumed last time */
 483:fltk-1.3.4-1/png/pngrutil.c **** 
 484:fltk-1.3.4-1/png/pngrutil.c ****          avail = ZLIB_IO_MAX;
 485:fltk-1.3.4-1/png/pngrutil.c **** 
 486:fltk-1.3.4-1/png/pngrutil.c ****          if (avail_in < avail)
 487:fltk-1.3.4-1/png/pngrutil.c ****             avail = (uInt)avail_in; /* safe: < than ZLIB_IO_MAX */
 488:fltk-1.3.4-1/png/pngrutil.c **** 
 489:fltk-1.3.4-1/png/pngrutil.c ****          avail_in -= avail;
 490:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->zstream.avail_in = avail;
 491:fltk-1.3.4-1/png/pngrutil.c **** 
 492:fltk-1.3.4-1/png/pngrutil.c ****          /* zlib OUTPUT BUFFER */
 493:fltk-1.3.4-1/png/pngrutil.c ****          avail_out += png_ptr->zstream.avail_out; /* not written last time */
 494:fltk-1.3.4-1/png/pngrutil.c **** 
 495:fltk-1.3.4-1/png/pngrutil.c ****          avail = ZLIB_IO_MAX; /* maximum zlib can process */
 496:fltk-1.3.4-1/png/pngrutil.c **** 
 497:fltk-1.3.4-1/png/pngrutil.c ****          if (output == NULL)
 498:fltk-1.3.4-1/png/pngrutil.c ****          {
 499:fltk-1.3.4-1/png/pngrutil.c ****             /* Reset the output buffer each time round if output is NULL and
 500:fltk-1.3.4-1/png/pngrutil.c ****              * make available the full buffer, up to 'remaining_space'
 501:fltk-1.3.4-1/png/pngrutil.c ****              */
 502:fltk-1.3.4-1/png/pngrutil.c ****             png_ptr->zstream.next_out = local_buffer;
 503:fltk-1.3.4-1/png/pngrutil.c ****             if ((sizeof local_buffer) < avail)
 504:fltk-1.3.4-1/png/pngrutil.c ****                avail = (sizeof local_buffer);
 505:fltk-1.3.4-1/png/pngrutil.c ****          }
 506:fltk-1.3.4-1/png/pngrutil.c **** 
 507:fltk-1.3.4-1/png/pngrutil.c ****          if (avail_out < avail)
 508:fltk-1.3.4-1/png/pngrutil.c ****             avail = (uInt)avail_out; /* safe: < ZLIB_IO_MAX */
 509:fltk-1.3.4-1/png/pngrutil.c **** 
 510:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->zstream.avail_out = avail;
 511:fltk-1.3.4-1/png/pngrutil.c ****          avail_out -= avail;
 512:fltk-1.3.4-1/png/pngrutil.c **** 
 513:fltk-1.3.4-1/png/pngrutil.c ****          /* zlib inflate call */
 514:fltk-1.3.4-1/png/pngrutil.c ****          /* In fact 'avail_out' may be 0 at this point, that happens at the end
 515:fltk-1.3.4-1/png/pngrutil.c ****           * of the read when the final LZ end code was not passed at the end of
 516:fltk-1.3.4-1/png/pngrutil.c ****           * the previous chunk of input data.  Tell zlib if we have reached the
 517:fltk-1.3.4-1/png/pngrutil.c ****           * end of the output buffer.
 518:fltk-1.3.4-1/png/pngrutil.c ****           */
 519:fltk-1.3.4-1/png/pngrutil.c ****          ret = inflate(&png_ptr->zstream, avail_out > 0 ? Z_NO_FLUSH :
 520:fltk-1.3.4-1/png/pngrutil.c ****              (finish ? Z_FINISH : Z_SYNC_FLUSH));
 521:fltk-1.3.4-1/png/pngrutil.c ****       } while (ret == Z_OK);
 522:fltk-1.3.4-1/png/pngrutil.c **** 
 523:fltk-1.3.4-1/png/pngrutil.c ****       /* For safety kill the local buffer pointer now */
 524:fltk-1.3.4-1/png/pngrutil.c ****       if (output == NULL)
 525:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->zstream.next_out = NULL;
 526:fltk-1.3.4-1/png/pngrutil.c **** 
 527:fltk-1.3.4-1/png/pngrutil.c ****       /* Claw back the 'size' and 'remaining_space' byte counts. */
 528:fltk-1.3.4-1/png/pngrutil.c ****       avail_in += png_ptr->zstream.avail_in;
 529:fltk-1.3.4-1/png/pngrutil.c ****       avail_out += png_ptr->zstream.avail_out;
 530:fltk-1.3.4-1/png/pngrutil.c **** 
 531:fltk-1.3.4-1/png/pngrutil.c ****       /* Update the input and output sizes; the updated values are the amount
 532:fltk-1.3.4-1/png/pngrutil.c ****        * consumed or written, effectively the inverse of what zlib uses.
 533:fltk-1.3.4-1/png/pngrutil.c ****        */
 534:fltk-1.3.4-1/png/pngrutil.c ****       if (avail_out > 0)
 535:fltk-1.3.4-1/png/pngrutil.c ****          *output_size_ptr -= avail_out;
 536:fltk-1.3.4-1/png/pngrutil.c **** 
 537:fltk-1.3.4-1/png/pngrutil.c ****       if (avail_in > 0)
 538:fltk-1.3.4-1/png/pngrutil.c ****          *input_size_ptr -= avail_in;
 539:fltk-1.3.4-1/png/pngrutil.c **** 
 540:fltk-1.3.4-1/png/pngrutil.c ****       /* Ensure png_ptr->zstream.msg is set (even in the success case!) */
 541:fltk-1.3.4-1/png/pngrutil.c ****       png_zstream_error(png_ptr, ret);
 542:fltk-1.3.4-1/png/pngrutil.c ****       return ret;
 543:fltk-1.3.4-1/png/pngrutil.c ****    }
 544:fltk-1.3.4-1/png/pngrutil.c **** 
 545:fltk-1.3.4-1/png/pngrutil.c ****    else
 546:fltk-1.3.4-1/png/pngrutil.c ****    {
 547:fltk-1.3.4-1/png/pngrutil.c ****       /* This is a bad internal error.  The recovery assigns to the zstream msg
 548:fltk-1.3.4-1/png/pngrutil.c ****        * pointer, which is not owned by the caller, but this is safe; it's only
 549:fltk-1.3.4-1/png/pngrutil.c ****        * used on errors!
 550:fltk-1.3.4-1/png/pngrutil.c ****        */
 551:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.msg = PNGZ_MSG_CAST("zstream unclaimed");
 552:fltk-1.3.4-1/png/pngrutil.c ****       return Z_STREAM_ERROR;
 553:fltk-1.3.4-1/png/pngrutil.c ****    }
 554:fltk-1.3.4-1/png/pngrutil.c **** }
 555:fltk-1.3.4-1/png/pngrutil.c **** 
 556:fltk-1.3.4-1/png/pngrutil.c **** /*
 557:fltk-1.3.4-1/png/pngrutil.c ****  * Decompress trailing data in a chunk.  The assumption is that read_buffer
 558:fltk-1.3.4-1/png/pngrutil.c ****  * points at an allocated area holding the contents of a chunk with a
 559:fltk-1.3.4-1/png/pngrutil.c ****  * trailing compressed part.  What we get back is an allocated area
 560:fltk-1.3.4-1/png/pngrutil.c ****  * holding the original prefix part and an uncompressed version of the
 561:fltk-1.3.4-1/png/pngrutil.c ****  * trailing part (the malloc area passed in is freed).
 562:fltk-1.3.4-1/png/pngrutil.c ****  */
 563:fltk-1.3.4-1/png/pngrutil.c **** static int
 564:fltk-1.3.4-1/png/pngrutil.c **** png_decompress_chunk(png_structrp png_ptr,
 565:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32 chunklength, png_uint_32 prefix_size,
 566:fltk-1.3.4-1/png/pngrutil.c ****    png_alloc_size_t *newlength /* must be initialized to the maximum! */,
 567:fltk-1.3.4-1/png/pngrutil.c ****    int terminate /*add a '\0' to the end of the uncompressed data*/)
 568:fltk-1.3.4-1/png/pngrutil.c **** {
 569:fltk-1.3.4-1/png/pngrutil.c ****    /* TODO: implement different limits for different types of chunk.
 570:fltk-1.3.4-1/png/pngrutil.c ****     *
 571:fltk-1.3.4-1/png/pngrutil.c ****     * The caller supplies *newlength set to the maximum length of the
 572:fltk-1.3.4-1/png/pngrutil.c ****     * uncompressed data, but this routine allocates space for the prefix and
 573:fltk-1.3.4-1/png/pngrutil.c ****     * maybe a '\0' terminator too.  We have to assume that 'prefix_size' is
 574:fltk-1.3.4-1/png/pngrutil.c ****     * limited only by the maximum chunk size.
 575:fltk-1.3.4-1/png/pngrutil.c ****     */
 576:fltk-1.3.4-1/png/pngrutil.c ****    png_alloc_size_t limit = PNG_SIZE_MAX;
 577:fltk-1.3.4-1/png/pngrutil.c **** 
 578:fltk-1.3.4-1/png/pngrutil.c **** # ifdef PNG_SET_CHUNK_MALLOC_LIMIT_SUPPORTED
 579:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->user_chunk_malloc_max > 0 &&
 580:fltk-1.3.4-1/png/pngrutil.c ****        png_ptr->user_chunk_malloc_max < limit)
 581:fltk-1.3.4-1/png/pngrutil.c ****       limit = png_ptr->user_chunk_malloc_max;
 582:fltk-1.3.4-1/png/pngrutil.c **** # elif PNG_USER_CHUNK_MALLOC_MAX > 0
 583:fltk-1.3.4-1/png/pngrutil.c ****    if (PNG_USER_CHUNK_MALLOC_MAX < limit)
 584:fltk-1.3.4-1/png/pngrutil.c ****       limit = PNG_USER_CHUNK_MALLOC_MAX;
 585:fltk-1.3.4-1/png/pngrutil.c **** # endif
 586:fltk-1.3.4-1/png/pngrutil.c **** 
 587:fltk-1.3.4-1/png/pngrutil.c ****    if (limit >= prefix_size + (terminate != 0))
 588:fltk-1.3.4-1/png/pngrutil.c ****    {
 589:fltk-1.3.4-1/png/pngrutil.c ****       int ret;
 590:fltk-1.3.4-1/png/pngrutil.c **** 
 591:fltk-1.3.4-1/png/pngrutil.c ****       limit -= prefix_size + (terminate != 0);
 592:fltk-1.3.4-1/png/pngrutil.c **** 
 593:fltk-1.3.4-1/png/pngrutil.c ****       if (limit < *newlength)
 594:fltk-1.3.4-1/png/pngrutil.c ****          *newlength = limit;
 595:fltk-1.3.4-1/png/pngrutil.c **** 
 596:fltk-1.3.4-1/png/pngrutil.c ****       /* Now try to claim the stream. */
 597:fltk-1.3.4-1/png/pngrutil.c ****       ret = png_inflate_claim(png_ptr, png_ptr->chunk_name);
 598:fltk-1.3.4-1/png/pngrutil.c **** 
 599:fltk-1.3.4-1/png/pngrutil.c ****       if (ret == Z_OK)
 600:fltk-1.3.4-1/png/pngrutil.c ****       {
 601:fltk-1.3.4-1/png/pngrutil.c ****          png_uint_32 lzsize = chunklength - prefix_size;
 602:fltk-1.3.4-1/png/pngrutil.c **** 
 603:fltk-1.3.4-1/png/pngrutil.c ****          ret = png_inflate(png_ptr, png_ptr->chunk_name, 1/*finish*/,
 604:fltk-1.3.4-1/png/pngrutil.c ****             /* input: */ png_ptr->read_buffer + prefix_size, &lzsize,
 605:fltk-1.3.4-1/png/pngrutil.c ****             /* output: */ NULL, newlength);
 606:fltk-1.3.4-1/png/pngrutil.c **** 
 607:fltk-1.3.4-1/png/pngrutil.c ****          if (ret == Z_STREAM_END)
 608:fltk-1.3.4-1/png/pngrutil.c ****          {
 609:fltk-1.3.4-1/png/pngrutil.c ****             /* Use 'inflateReset' here, not 'inflateReset2' because this
 610:fltk-1.3.4-1/png/pngrutil.c ****              * preserves the previously decided window size (otherwise it would
 611:fltk-1.3.4-1/png/pngrutil.c ****              * be necessary to store the previous window size.)  In practice
 612:fltk-1.3.4-1/png/pngrutil.c ****              * this doesn't matter anyway, because png_inflate will call inflate
 613:fltk-1.3.4-1/png/pngrutil.c ****              * with Z_FINISH in almost all cases, so the window will not be
 614:fltk-1.3.4-1/png/pngrutil.c ****              * maintained.
 615:fltk-1.3.4-1/png/pngrutil.c ****              */
 616:fltk-1.3.4-1/png/pngrutil.c ****             if (inflateReset(&png_ptr->zstream) == Z_OK)
 617:fltk-1.3.4-1/png/pngrutil.c ****             {
 618:fltk-1.3.4-1/png/pngrutil.c ****                /* Because of the limit checks above we know that the new,
 619:fltk-1.3.4-1/png/pngrutil.c ****                 * expanded, size will fit in a size_t (let alone an
 620:fltk-1.3.4-1/png/pngrutil.c ****                 * png_alloc_size_t).  Use png_malloc_base here to avoid an
 621:fltk-1.3.4-1/png/pngrutil.c ****                 * extra OOM message.
 622:fltk-1.3.4-1/png/pngrutil.c ****                 */
 623:fltk-1.3.4-1/png/pngrutil.c ****                png_alloc_size_t new_size = *newlength;
 624:fltk-1.3.4-1/png/pngrutil.c ****                png_alloc_size_t buffer_size = prefix_size + new_size +
 625:fltk-1.3.4-1/png/pngrutil.c ****                   (terminate != 0);
 626:fltk-1.3.4-1/png/pngrutil.c ****                png_bytep text = png_voidcast(png_bytep, png_malloc_base(png_ptr,
 627:fltk-1.3.4-1/png/pngrutil.c ****                   buffer_size));
 628:fltk-1.3.4-1/png/pngrutil.c **** 
 629:fltk-1.3.4-1/png/pngrutil.c ****                if (text != NULL)
 630:fltk-1.3.4-1/png/pngrutil.c ****                {
 631:fltk-1.3.4-1/png/pngrutil.c ****                   ret = png_inflate(png_ptr, png_ptr->chunk_name, 1/*finish*/,
 632:fltk-1.3.4-1/png/pngrutil.c ****                      png_ptr->read_buffer + prefix_size, &lzsize,
 633:fltk-1.3.4-1/png/pngrutil.c ****                      text + prefix_size, newlength);
 634:fltk-1.3.4-1/png/pngrutil.c **** 
 635:fltk-1.3.4-1/png/pngrutil.c ****                   if (ret == Z_STREAM_END)
 636:fltk-1.3.4-1/png/pngrutil.c ****                   {
 637:fltk-1.3.4-1/png/pngrutil.c ****                      if (new_size == *newlength)
 638:fltk-1.3.4-1/png/pngrutil.c ****                      {
 639:fltk-1.3.4-1/png/pngrutil.c ****                         if (terminate != 0)
 640:fltk-1.3.4-1/png/pngrutil.c ****                            text[prefix_size + *newlength] = 0;
 641:fltk-1.3.4-1/png/pngrutil.c **** 
 642:fltk-1.3.4-1/png/pngrutil.c ****                         if (prefix_size > 0)
 643:fltk-1.3.4-1/png/pngrutil.c ****                            memcpy(text, png_ptr->read_buffer, prefix_size);
 644:fltk-1.3.4-1/png/pngrutil.c **** 
 645:fltk-1.3.4-1/png/pngrutil.c ****                         {
 646:fltk-1.3.4-1/png/pngrutil.c ****                            png_bytep old_ptr = png_ptr->read_buffer;
 647:fltk-1.3.4-1/png/pngrutil.c **** 
 648:fltk-1.3.4-1/png/pngrutil.c ****                            png_ptr->read_buffer = text;
 649:fltk-1.3.4-1/png/pngrutil.c ****                            png_ptr->read_buffer_size = buffer_size;
 650:fltk-1.3.4-1/png/pngrutil.c ****                            text = old_ptr; /* freed below */
 651:fltk-1.3.4-1/png/pngrutil.c ****                         }
 652:fltk-1.3.4-1/png/pngrutil.c ****                      }
 653:fltk-1.3.4-1/png/pngrutil.c **** 
 654:fltk-1.3.4-1/png/pngrutil.c ****                      else
 655:fltk-1.3.4-1/png/pngrutil.c ****                      {
 656:fltk-1.3.4-1/png/pngrutil.c ****                         /* The size changed on the second read, there can be no
 657:fltk-1.3.4-1/png/pngrutil.c ****                          * guarantee that anything is correct at this point.
 658:fltk-1.3.4-1/png/pngrutil.c ****                          * The 'msg' pointer has been set to "unexpected end of
 659:fltk-1.3.4-1/png/pngrutil.c ****                          * LZ stream", which is fine, but return an error code
 660:fltk-1.3.4-1/png/pngrutil.c ****                          * that the caller won't accept.
 661:fltk-1.3.4-1/png/pngrutil.c ****                          */
 662:fltk-1.3.4-1/png/pngrutil.c ****                         ret = PNG_UNEXPECTED_ZLIB_RETURN;
 663:fltk-1.3.4-1/png/pngrutil.c ****                      }
 664:fltk-1.3.4-1/png/pngrutil.c ****                   }
 665:fltk-1.3.4-1/png/pngrutil.c **** 
 666:fltk-1.3.4-1/png/pngrutil.c ****                   else if (ret == Z_OK)
 667:fltk-1.3.4-1/png/pngrutil.c ****                      ret = PNG_UNEXPECTED_ZLIB_RETURN; /* for safety */
 668:fltk-1.3.4-1/png/pngrutil.c **** 
 669:fltk-1.3.4-1/png/pngrutil.c ****                   /* Free the text pointer (this is the old read_buffer on
 670:fltk-1.3.4-1/png/pngrutil.c ****                    * success)
 671:fltk-1.3.4-1/png/pngrutil.c ****                    */
 672:fltk-1.3.4-1/png/pngrutil.c ****                   png_free(png_ptr, text);
 673:fltk-1.3.4-1/png/pngrutil.c ****                   text = NULL;
 674:fltk-1.3.4-1/png/pngrutil.c **** 
 675:fltk-1.3.4-1/png/pngrutil.c ****                   /* This really is very benign, but it's still an error because
 676:fltk-1.3.4-1/png/pngrutil.c ****                    * the extra space may otherwise be used as a Trojan Horse.
 677:fltk-1.3.4-1/png/pngrutil.c ****                    */
 678:fltk-1.3.4-1/png/pngrutil.c ****                   if (ret == Z_STREAM_END &&
 679:fltk-1.3.4-1/png/pngrutil.c ****                      chunklength - prefix_size != lzsize)
 680:fltk-1.3.4-1/png/pngrutil.c ****                      png_chunk_benign_error(png_ptr, "extra compressed data");
 681:fltk-1.3.4-1/png/pngrutil.c ****                }
 682:fltk-1.3.4-1/png/pngrutil.c **** 
 683:fltk-1.3.4-1/png/pngrutil.c ****                else
 684:fltk-1.3.4-1/png/pngrutil.c ****                {
 685:fltk-1.3.4-1/png/pngrutil.c ****                   /* Out of memory allocating the buffer */
 686:fltk-1.3.4-1/png/pngrutil.c ****                   ret = Z_MEM_ERROR;
 687:fltk-1.3.4-1/png/pngrutil.c ****                   png_zstream_error(png_ptr, Z_MEM_ERROR);
 688:fltk-1.3.4-1/png/pngrutil.c ****                }
 689:fltk-1.3.4-1/png/pngrutil.c ****             }
 690:fltk-1.3.4-1/png/pngrutil.c **** 
 691:fltk-1.3.4-1/png/pngrutil.c ****             else
 692:fltk-1.3.4-1/png/pngrutil.c ****             {
 693:fltk-1.3.4-1/png/pngrutil.c ****                /* inflateReset failed, store the error message */
 694:fltk-1.3.4-1/png/pngrutil.c ****                png_zstream_error(png_ptr, ret);
 695:fltk-1.3.4-1/png/pngrutil.c **** 
 696:fltk-1.3.4-1/png/pngrutil.c ****                if (ret == Z_STREAM_END)
 697:fltk-1.3.4-1/png/pngrutil.c ****                   ret = PNG_UNEXPECTED_ZLIB_RETURN;
 698:fltk-1.3.4-1/png/pngrutil.c ****             }
 699:fltk-1.3.4-1/png/pngrutil.c ****          }
 700:fltk-1.3.4-1/png/pngrutil.c **** 
 701:fltk-1.3.4-1/png/pngrutil.c ****          else if (ret == Z_OK)
 702:fltk-1.3.4-1/png/pngrutil.c ****             ret = PNG_UNEXPECTED_ZLIB_RETURN;
 703:fltk-1.3.4-1/png/pngrutil.c **** 
 704:fltk-1.3.4-1/png/pngrutil.c ****          /* Release the claimed stream */
 705:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->zowner = 0;
 706:fltk-1.3.4-1/png/pngrutil.c ****       }
 707:fltk-1.3.4-1/png/pngrutil.c **** 
 708:fltk-1.3.4-1/png/pngrutil.c ****       else /* the claim failed */ if (ret == Z_STREAM_END) /* impossible! */
 709:fltk-1.3.4-1/png/pngrutil.c ****          ret = PNG_UNEXPECTED_ZLIB_RETURN;
 710:fltk-1.3.4-1/png/pngrutil.c **** 
 711:fltk-1.3.4-1/png/pngrutil.c ****       return ret;
 712:fltk-1.3.4-1/png/pngrutil.c ****    }
 713:fltk-1.3.4-1/png/pngrutil.c **** 
 714:fltk-1.3.4-1/png/pngrutil.c ****    else
 715:fltk-1.3.4-1/png/pngrutil.c ****    {
 716:fltk-1.3.4-1/png/pngrutil.c ****       /* Application/configuration limits exceeded */
 717:fltk-1.3.4-1/png/pngrutil.c ****       png_zstream_error(png_ptr, Z_MEM_ERROR);
 718:fltk-1.3.4-1/png/pngrutil.c ****       return Z_MEM_ERROR;
 719:fltk-1.3.4-1/png/pngrutil.c ****    }
 720:fltk-1.3.4-1/png/pngrutil.c **** }
 721:fltk-1.3.4-1/png/pngrutil.c **** #endif /* READ_COMPRESSED_TEXT */
 722:fltk-1.3.4-1/png/pngrutil.c **** 
 723:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_iCCP_SUPPORTED
 724:fltk-1.3.4-1/png/pngrutil.c **** /* Perform a partial read and decompress, producing 'avail_out' bytes and
 725:fltk-1.3.4-1/png/pngrutil.c ****  * reading from the current chunk as required.
 726:fltk-1.3.4-1/png/pngrutil.c ****  */
 727:fltk-1.3.4-1/png/pngrutil.c **** static int
 728:fltk-1.3.4-1/png/pngrutil.c **** png_inflate_read(png_structrp png_ptr, png_bytep read_buffer, uInt read_size,
 729:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32p chunk_bytes, png_bytep next_out, png_alloc_size_t *out_size,
 730:fltk-1.3.4-1/png/pngrutil.c ****    int finish)
 731:fltk-1.3.4-1/png/pngrutil.c **** {
 732:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->zowner == png_ptr->chunk_name)
 733:fltk-1.3.4-1/png/pngrutil.c ****    {
 734:fltk-1.3.4-1/png/pngrutil.c ****       int ret;
 735:fltk-1.3.4-1/png/pngrutil.c **** 
 736:fltk-1.3.4-1/png/pngrutil.c ****       /* next_in and avail_in must have been initialized by the caller. */
 737:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.next_out = next_out;
 738:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.avail_out = 0; /* set in the loop */
 739:fltk-1.3.4-1/png/pngrutil.c **** 
 740:fltk-1.3.4-1/png/pngrutil.c ****       do
 741:fltk-1.3.4-1/png/pngrutil.c ****       {
 742:fltk-1.3.4-1/png/pngrutil.c ****          if (png_ptr->zstream.avail_in == 0)
 743:fltk-1.3.4-1/png/pngrutil.c ****          {
 744:fltk-1.3.4-1/png/pngrutil.c ****             if (read_size > *chunk_bytes)
 745:fltk-1.3.4-1/png/pngrutil.c ****                read_size = (uInt)*chunk_bytes;
 746:fltk-1.3.4-1/png/pngrutil.c ****             *chunk_bytes -= read_size;
 747:fltk-1.3.4-1/png/pngrutil.c **** 
 748:fltk-1.3.4-1/png/pngrutil.c ****             if (read_size > 0)
 749:fltk-1.3.4-1/png/pngrutil.c ****                png_crc_read(png_ptr, read_buffer, read_size);
 750:fltk-1.3.4-1/png/pngrutil.c **** 
 751:fltk-1.3.4-1/png/pngrutil.c ****             png_ptr->zstream.next_in = read_buffer;
 752:fltk-1.3.4-1/png/pngrutil.c ****             png_ptr->zstream.avail_in = read_size;
 753:fltk-1.3.4-1/png/pngrutil.c ****          }
 754:fltk-1.3.4-1/png/pngrutil.c **** 
 755:fltk-1.3.4-1/png/pngrutil.c ****          if (png_ptr->zstream.avail_out == 0)
 756:fltk-1.3.4-1/png/pngrutil.c ****          {
 757:fltk-1.3.4-1/png/pngrutil.c ****             uInt avail = ZLIB_IO_MAX;
 758:fltk-1.3.4-1/png/pngrutil.c ****             if (avail > *out_size)
 759:fltk-1.3.4-1/png/pngrutil.c ****                avail = (uInt)*out_size;
 760:fltk-1.3.4-1/png/pngrutil.c ****             *out_size -= avail;
 761:fltk-1.3.4-1/png/pngrutil.c **** 
 762:fltk-1.3.4-1/png/pngrutil.c ****             png_ptr->zstream.avail_out = avail;
 763:fltk-1.3.4-1/png/pngrutil.c ****          }
 764:fltk-1.3.4-1/png/pngrutil.c **** 
 765:fltk-1.3.4-1/png/pngrutil.c ****          /* Use Z_SYNC_FLUSH when there is no more chunk data to ensure that all
 766:fltk-1.3.4-1/png/pngrutil.c ****           * the available output is produced; this allows reading of truncated
 767:fltk-1.3.4-1/png/pngrutil.c ****           * streams.
 768:fltk-1.3.4-1/png/pngrutil.c ****           */
 769:fltk-1.3.4-1/png/pngrutil.c ****          ret = inflate(&png_ptr->zstream,
 770:fltk-1.3.4-1/png/pngrutil.c ****             *chunk_bytes > 0 ? Z_NO_FLUSH : (finish ? Z_FINISH : Z_SYNC_FLUSH));
 771:fltk-1.3.4-1/png/pngrutil.c ****       }
 772:fltk-1.3.4-1/png/pngrutil.c ****       while (ret == Z_OK && (*out_size > 0 || png_ptr->zstream.avail_out > 0));
 773:fltk-1.3.4-1/png/pngrutil.c **** 
 774:fltk-1.3.4-1/png/pngrutil.c ****       *out_size += png_ptr->zstream.avail_out;
 775:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.avail_out = 0; /* Should not be required, but is safe */
 776:fltk-1.3.4-1/png/pngrutil.c **** 
 777:fltk-1.3.4-1/png/pngrutil.c ****       /* Ensure the error message pointer is always set: */
 778:fltk-1.3.4-1/png/pngrutil.c ****       png_zstream_error(png_ptr, ret);
 779:fltk-1.3.4-1/png/pngrutil.c ****       return ret;
 780:fltk-1.3.4-1/png/pngrutil.c ****    }
 781:fltk-1.3.4-1/png/pngrutil.c **** 
 782:fltk-1.3.4-1/png/pngrutil.c ****    else
 783:fltk-1.3.4-1/png/pngrutil.c ****    {
 784:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.msg = PNGZ_MSG_CAST("zstream unclaimed");
 785:fltk-1.3.4-1/png/pngrutil.c ****       return Z_STREAM_ERROR;
 786:fltk-1.3.4-1/png/pngrutil.c ****    }
 787:fltk-1.3.4-1/png/pngrutil.c **** }
 788:fltk-1.3.4-1/png/pngrutil.c **** #endif
 789:fltk-1.3.4-1/png/pngrutil.c **** 
 790:fltk-1.3.4-1/png/pngrutil.c **** /* Read and check the IDHR chunk */
 791:fltk-1.3.4-1/png/pngrutil.c **** 
 792:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
 793:fltk-1.3.4-1/png/pngrutil.c **** png_handle_IHDR(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)
 794:fltk-1.3.4-1/png/pngrutil.c **** {
 795:fltk-1.3.4-1/png/pngrutil.c ****    png_byte buf[13];
 796:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32 width, height;
 797:fltk-1.3.4-1/png/pngrutil.c ****    int bit_depth, color_type, compression_type, filter_type;
 798:fltk-1.3.4-1/png/pngrutil.c ****    int interlace_type;
 799:fltk-1.3.4-1/png/pngrutil.c **** 
 800:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_handle_IHDR");
 801:fltk-1.3.4-1/png/pngrutil.c **** 
 802:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->mode & PNG_HAVE_IHDR) != 0)
 803:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "out of place");
 804:fltk-1.3.4-1/png/pngrutil.c **** 
 805:fltk-1.3.4-1/png/pngrutil.c ****    /* Check the length */
 806:fltk-1.3.4-1/png/pngrutil.c ****    if (length != 13)
 807:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "invalid");
 808:fltk-1.3.4-1/png/pngrutil.c **** 
 809:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->mode |= PNG_HAVE_IHDR;
 810:fltk-1.3.4-1/png/pngrutil.c **** 
 811:fltk-1.3.4-1/png/pngrutil.c ****    png_crc_read(png_ptr, buf, 13);
 812:fltk-1.3.4-1/png/pngrutil.c ****    png_crc_finish(png_ptr, 0);
 813:fltk-1.3.4-1/png/pngrutil.c **** 
 814:fltk-1.3.4-1/png/pngrutil.c ****    width = png_get_uint_31(png_ptr, buf);
 815:fltk-1.3.4-1/png/pngrutil.c ****    height = png_get_uint_31(png_ptr, buf + 4);
 816:fltk-1.3.4-1/png/pngrutil.c ****    bit_depth = buf[8];
 817:fltk-1.3.4-1/png/pngrutil.c ****    color_type = buf[9];
 818:fltk-1.3.4-1/png/pngrutil.c ****    compression_type = buf[10];
 819:fltk-1.3.4-1/png/pngrutil.c ****    filter_type = buf[11];
 820:fltk-1.3.4-1/png/pngrutil.c ****    interlace_type = buf[12];
 821:fltk-1.3.4-1/png/pngrutil.c **** 
 822:fltk-1.3.4-1/png/pngrutil.c ****    /* Set internal variables */
 823:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->width = width;
 824:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->height = height;
 825:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->bit_depth = (png_byte)bit_depth;
 826:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->interlaced = (png_byte)interlace_type;
 827:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->color_type = (png_byte)color_type;
 828:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_MNG_FEATURES_SUPPORTED
 829:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->filter_type = (png_byte)filter_type;
 830:fltk-1.3.4-1/png/pngrutil.c **** #endif
 831:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->compression_type = (png_byte)compression_type;
 832:fltk-1.3.4-1/png/pngrutil.c **** 
 833:fltk-1.3.4-1/png/pngrutil.c ****    /* Find number of channels */
 834:fltk-1.3.4-1/png/pngrutil.c ****    switch (png_ptr->color_type)
 835:fltk-1.3.4-1/png/pngrutil.c ****    {
 836:fltk-1.3.4-1/png/pngrutil.c ****       default: /* invalid, png_set_IHDR calls png_error */
 837:fltk-1.3.4-1/png/pngrutil.c ****       case PNG_COLOR_TYPE_GRAY:
 838:fltk-1.3.4-1/png/pngrutil.c ****       case PNG_COLOR_TYPE_PALETTE:
 839:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->channels = 1;
 840:fltk-1.3.4-1/png/pngrutil.c ****          break;
 841:fltk-1.3.4-1/png/pngrutil.c **** 
 842:fltk-1.3.4-1/png/pngrutil.c ****       case PNG_COLOR_TYPE_RGB:
 843:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->channels = 3;
 844:fltk-1.3.4-1/png/pngrutil.c ****          break;
 845:fltk-1.3.4-1/png/pngrutil.c **** 
 846:fltk-1.3.4-1/png/pngrutil.c ****       case PNG_COLOR_TYPE_GRAY_ALPHA:
 847:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->channels = 2;
 848:fltk-1.3.4-1/png/pngrutil.c ****          break;
 849:fltk-1.3.4-1/png/pngrutil.c **** 
 850:fltk-1.3.4-1/png/pngrutil.c ****       case PNG_COLOR_TYPE_RGB_ALPHA:
 851:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->channels = 4;
 852:fltk-1.3.4-1/png/pngrutil.c ****          break;
 853:fltk-1.3.4-1/png/pngrutil.c ****    }
 854:fltk-1.3.4-1/png/pngrutil.c **** 
 855:fltk-1.3.4-1/png/pngrutil.c ****    /* Set up other useful info */
 856:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->pixel_depth = (png_byte)(png_ptr->bit_depth * png_ptr->channels);
 857:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->rowbytes = PNG_ROWBYTES(png_ptr->pixel_depth, png_ptr->width);
 858:fltk-1.3.4-1/png/pngrutil.c ****    png_debug1(3, "bit_depth = %d", png_ptr->bit_depth);
 859:fltk-1.3.4-1/png/pngrutil.c ****    png_debug1(3, "channels = %d", png_ptr->channels);
 860:fltk-1.3.4-1/png/pngrutil.c ****    png_debug1(3, "rowbytes = %lu", (unsigned long)png_ptr->rowbytes);
 861:fltk-1.3.4-1/png/pngrutil.c ****    png_set_IHDR(png_ptr, info_ptr, width, height, bit_depth,
 862:fltk-1.3.4-1/png/pngrutil.c ****        color_type, interlace_type, compression_type, filter_type);
 863:fltk-1.3.4-1/png/pngrutil.c **** }
 864:fltk-1.3.4-1/png/pngrutil.c **** 
 865:fltk-1.3.4-1/png/pngrutil.c **** /* Read and check the palette */
 866:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
 867:fltk-1.3.4-1/png/pngrutil.c **** png_handle_PLTE(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)
 868:fltk-1.3.4-1/png/pngrutil.c **** {
 869:fltk-1.3.4-1/png/pngrutil.c ****    png_color palette[PNG_MAX_PALETTE_LENGTH];
 870:fltk-1.3.4-1/png/pngrutil.c ****    int num, i;
 871:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_POINTER_INDEXING_SUPPORTED
 872:fltk-1.3.4-1/png/pngrutil.c ****    png_colorp pal_ptr;
 873:fltk-1.3.4-1/png/pngrutil.c **** #endif
 874:fltk-1.3.4-1/png/pngrutil.c **** 
 875:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_handle_PLTE");
 876:fltk-1.3.4-1/png/pngrutil.c **** 
 877:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->mode & PNG_HAVE_IHDR) == 0)
 878:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
 879:fltk-1.3.4-1/png/pngrutil.c **** 
 880:fltk-1.3.4-1/png/pngrutil.c ****    /* Moved to before the 'after IDAT' check below because otherwise duplicate
 881:fltk-1.3.4-1/png/pngrutil.c ****     * PLTE chunks are potentially ignored (the spec says there shall not be more
 882:fltk-1.3.4-1/png/pngrutil.c ****     * than one PLTE, the error is not treated as benign, so this check trumps
 883:fltk-1.3.4-1/png/pngrutil.c ****     * the requirement that PLTE appears before IDAT.)
 884:fltk-1.3.4-1/png/pngrutil.c ****     */
 885:fltk-1.3.4-1/png/pngrutil.c ****    else if ((png_ptr->mode & PNG_HAVE_PLTE) != 0)
 886:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "duplicate");
 887:fltk-1.3.4-1/png/pngrutil.c **** 
 888:fltk-1.3.4-1/png/pngrutil.c ****    else if ((png_ptr->mode & PNG_HAVE_IDAT) != 0)
 889:fltk-1.3.4-1/png/pngrutil.c ****    {
 890:fltk-1.3.4-1/png/pngrutil.c ****       /* This is benign because the non-benign error happened before, when an
 891:fltk-1.3.4-1/png/pngrutil.c ****        * IDAT was encountered in a color-mapped image with no PLTE.
 892:fltk-1.3.4-1/png/pngrutil.c ****        */
 893:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
 894:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
 895:fltk-1.3.4-1/png/pngrutil.c ****       return;
 896:fltk-1.3.4-1/png/pngrutil.c ****    }
 897:fltk-1.3.4-1/png/pngrutil.c **** 
 898:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->mode |= PNG_HAVE_PLTE;
 899:fltk-1.3.4-1/png/pngrutil.c **** 
 900:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->color_type & PNG_COLOR_MASK_COLOR) == 0)
 901:fltk-1.3.4-1/png/pngrutil.c ****    {
 902:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
 903:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "ignored in grayscale PNG");
 904:fltk-1.3.4-1/png/pngrutil.c ****       return;
 905:fltk-1.3.4-1/png/pngrutil.c ****    }
 906:fltk-1.3.4-1/png/pngrutil.c **** 
 907:fltk-1.3.4-1/png/pngrutil.c **** #ifndef PNG_READ_OPT_PLTE_SUPPORTED
 908:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->color_type != PNG_COLOR_TYPE_PALETTE)
 909:fltk-1.3.4-1/png/pngrutil.c ****    {
 910:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
 911:fltk-1.3.4-1/png/pngrutil.c ****       return;
 912:fltk-1.3.4-1/png/pngrutil.c ****    }
 913:fltk-1.3.4-1/png/pngrutil.c **** #endif
 914:fltk-1.3.4-1/png/pngrutil.c **** 
 915:fltk-1.3.4-1/png/pngrutil.c ****    if (length > 3*PNG_MAX_PALETTE_LENGTH || length % 3)
 916:fltk-1.3.4-1/png/pngrutil.c ****    {
 917:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
 918:fltk-1.3.4-1/png/pngrutil.c **** 
 919:fltk-1.3.4-1/png/pngrutil.c ****       if (png_ptr->color_type != PNG_COLOR_TYPE_PALETTE)
 920:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_benign_error(png_ptr, "invalid");
 921:fltk-1.3.4-1/png/pngrutil.c **** 
 922:fltk-1.3.4-1/png/pngrutil.c ****       else
 923:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_error(png_ptr, "invalid");
 924:fltk-1.3.4-1/png/pngrutil.c **** 
 925:fltk-1.3.4-1/png/pngrutil.c ****       return;
 926:fltk-1.3.4-1/png/pngrutil.c ****    }
 927:fltk-1.3.4-1/png/pngrutil.c **** 
 928:fltk-1.3.4-1/png/pngrutil.c ****    /* The cast is safe because 'length' is less than 3*PNG_MAX_PALETTE_LENGTH */
 929:fltk-1.3.4-1/png/pngrutil.c ****    num = (int)length / 3;
 930:fltk-1.3.4-1/png/pngrutil.c **** 
 931:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_POINTER_INDEXING_SUPPORTED
 932:fltk-1.3.4-1/png/pngrutil.c ****    for (i = 0, pal_ptr = palette; i < num; i++, pal_ptr++)
 933:fltk-1.3.4-1/png/pngrutil.c ****    {
 934:fltk-1.3.4-1/png/pngrutil.c ****       png_byte buf[3];
 935:fltk-1.3.4-1/png/pngrutil.c **** 
 936:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_read(png_ptr, buf, 3);
 937:fltk-1.3.4-1/png/pngrutil.c ****       pal_ptr->red = buf[0];
 938:fltk-1.3.4-1/png/pngrutil.c ****       pal_ptr->green = buf[1];
 939:fltk-1.3.4-1/png/pngrutil.c ****       pal_ptr->blue = buf[2];
 940:fltk-1.3.4-1/png/pngrutil.c ****    }
 941:fltk-1.3.4-1/png/pngrutil.c **** #else
 942:fltk-1.3.4-1/png/pngrutil.c ****    for (i = 0; i < num; i++)
 943:fltk-1.3.4-1/png/pngrutil.c ****    {
 944:fltk-1.3.4-1/png/pngrutil.c ****       png_byte buf[3];
 945:fltk-1.3.4-1/png/pngrutil.c **** 
 946:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_read(png_ptr, buf, 3);
 947:fltk-1.3.4-1/png/pngrutil.c ****       /* Don't depend upon png_color being any order */
 948:fltk-1.3.4-1/png/pngrutil.c ****       palette[i].red = buf[0];
 949:fltk-1.3.4-1/png/pngrutil.c ****       palette[i].green = buf[1];
 950:fltk-1.3.4-1/png/pngrutil.c ****       palette[i].blue = buf[2];
 951:fltk-1.3.4-1/png/pngrutil.c ****    }
 952:fltk-1.3.4-1/png/pngrutil.c **** #endif
 953:fltk-1.3.4-1/png/pngrutil.c **** 
 954:fltk-1.3.4-1/png/pngrutil.c ****    /* If we actually need the PLTE chunk (ie for a paletted image), we do
 955:fltk-1.3.4-1/png/pngrutil.c ****     * whatever the normal CRC configuration tells us.  However, if we
 956:fltk-1.3.4-1/png/pngrutil.c ****     * have an RGB image, the PLTE can be considered ancillary, so
 957:fltk-1.3.4-1/png/pngrutil.c ****     * we will act as though it is.
 958:fltk-1.3.4-1/png/pngrutil.c ****     */
 959:fltk-1.3.4-1/png/pngrutil.c **** #ifndef PNG_READ_OPT_PLTE_SUPPORTED
 960:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
 961:fltk-1.3.4-1/png/pngrutil.c **** #endif
 962:fltk-1.3.4-1/png/pngrutil.c ****    {
 963:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, 0);
 964:fltk-1.3.4-1/png/pngrutil.c ****    }
 965:fltk-1.3.4-1/png/pngrutil.c **** 
 966:fltk-1.3.4-1/png/pngrutil.c **** #ifndef PNG_READ_OPT_PLTE_SUPPORTED
 967:fltk-1.3.4-1/png/pngrutil.c ****    else if (png_crc_error(png_ptr) != 0)  /* Only if we have a CRC error */
 968:fltk-1.3.4-1/png/pngrutil.c ****    {
 969:fltk-1.3.4-1/png/pngrutil.c ****       /* If we don't want to use the data from an ancillary chunk,
 970:fltk-1.3.4-1/png/pngrutil.c ****        * we have two options: an error abort, or a warning and we
 971:fltk-1.3.4-1/png/pngrutil.c ****        * ignore the data in this chunk (which should be OK, since
 972:fltk-1.3.4-1/png/pngrutil.c ****        * it's considered ancillary for a RGB or RGBA image).
 973:fltk-1.3.4-1/png/pngrutil.c ****        *
 974:fltk-1.3.4-1/png/pngrutil.c ****        * IMPLEMENTATION NOTE: this is only here because png_crc_finish uses the
 975:fltk-1.3.4-1/png/pngrutil.c ****        * chunk type to determine whether to check the ancillary or the critical
 976:fltk-1.3.4-1/png/pngrutil.c ****        * flags.
 977:fltk-1.3.4-1/png/pngrutil.c ****        */
 978:fltk-1.3.4-1/png/pngrutil.c ****       if ((png_ptr->flags & PNG_FLAG_CRC_ANCILLARY_USE) == 0)
 979:fltk-1.3.4-1/png/pngrutil.c ****       {
 980:fltk-1.3.4-1/png/pngrutil.c ****          if ((png_ptr->flags & PNG_FLAG_CRC_ANCILLARY_NOWARN) != 0)
 981:fltk-1.3.4-1/png/pngrutil.c ****             return;
 982:fltk-1.3.4-1/png/pngrutil.c **** 
 983:fltk-1.3.4-1/png/pngrutil.c ****          else
 984:fltk-1.3.4-1/png/pngrutil.c ****             png_chunk_error(png_ptr, "CRC error");
 985:fltk-1.3.4-1/png/pngrutil.c ****       }
 986:fltk-1.3.4-1/png/pngrutil.c **** 
 987:fltk-1.3.4-1/png/pngrutil.c ****       /* Otherwise, we (optionally) emit a warning and use the chunk. */
 988:fltk-1.3.4-1/png/pngrutil.c ****       else if ((png_ptr->flags & PNG_FLAG_CRC_ANCILLARY_NOWARN) == 0)
 989:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_warning(png_ptr, "CRC error");
 990:fltk-1.3.4-1/png/pngrutil.c ****    }
 991:fltk-1.3.4-1/png/pngrutil.c **** #endif
 992:fltk-1.3.4-1/png/pngrutil.c **** 
 993:fltk-1.3.4-1/png/pngrutil.c ****    /* TODO: png_set_PLTE has the side effect of setting png_ptr->palette to its
 994:fltk-1.3.4-1/png/pngrutil.c ****     * own copy of the palette.  This has the side effect that when png_start_row
 995:fltk-1.3.4-1/png/pngrutil.c ****     * is called (this happens after any call to png_read_update_info) the
 996:fltk-1.3.4-1/png/pngrutil.c ****     * info_ptr palette gets changed.  This is extremely unexpected and
 997:fltk-1.3.4-1/png/pngrutil.c ****     * confusing.
 998:fltk-1.3.4-1/png/pngrutil.c ****     *
 999:fltk-1.3.4-1/png/pngrutil.c ****     * Fix this by not sharing the palette in this way.
1000:fltk-1.3.4-1/png/pngrutil.c ****     */
1001:fltk-1.3.4-1/png/pngrutil.c ****    png_set_PLTE(png_ptr, info_ptr, palette, num);
1002:fltk-1.3.4-1/png/pngrutil.c **** 
1003:fltk-1.3.4-1/png/pngrutil.c ****    /* The three chunks, bKGD, hIST and tRNS *must* appear after PLTE and before
1004:fltk-1.3.4-1/png/pngrutil.c ****     * IDAT.  Prior to 1.6.0 this was not checked; instead the code merely
1005:fltk-1.3.4-1/png/pngrutil.c ****     * checked the apparent validity of a tRNS chunk inserted before PLTE on a
1006:fltk-1.3.4-1/png/pngrutil.c ****     * palette PNG.  1.6.0 attempts to rigorously follow the standard and
1007:fltk-1.3.4-1/png/pngrutil.c ****     * therefore does a benign error if the erroneous condition is detected *and*
1008:fltk-1.3.4-1/png/pngrutil.c ****     * cancels the tRNS if the benign error returns.  The alternative is to
1009:fltk-1.3.4-1/png/pngrutil.c ****     * amend the standard since it would be rather hypocritical of the standards
1010:fltk-1.3.4-1/png/pngrutil.c ****     * maintainers to ignore it.
1011:fltk-1.3.4-1/png/pngrutil.c ****     */
1012:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_tRNS_SUPPORTED
1013:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->num_trans > 0 ||
1014:fltk-1.3.4-1/png/pngrutil.c ****        (info_ptr != NULL && (info_ptr->valid & PNG_INFO_tRNS) != 0))
1015:fltk-1.3.4-1/png/pngrutil.c ****    {
1016:fltk-1.3.4-1/png/pngrutil.c ****       /* Cancel this because otherwise it would be used if the transforms
1017:fltk-1.3.4-1/png/pngrutil.c ****        * require it.  Don't cancel the 'valid' flag because this would prevent
1018:fltk-1.3.4-1/png/pngrutil.c ****        * detection of duplicate chunks.
1019:fltk-1.3.4-1/png/pngrutil.c ****        */
1020:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->num_trans = 0;
1021:fltk-1.3.4-1/png/pngrutil.c **** 
1022:fltk-1.3.4-1/png/pngrutil.c ****       if (info_ptr != NULL)
1023:fltk-1.3.4-1/png/pngrutil.c ****          info_ptr->num_trans = 0;
1024:fltk-1.3.4-1/png/pngrutil.c **** 
1025:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "tRNS must be after");
1026:fltk-1.3.4-1/png/pngrutil.c ****    }
1027:fltk-1.3.4-1/png/pngrutil.c **** #endif
1028:fltk-1.3.4-1/png/pngrutil.c **** 
1029:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_hIST_SUPPORTED
1030:fltk-1.3.4-1/png/pngrutil.c ****    if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_hIST) != 0)
1031:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "hIST must be after");
1032:fltk-1.3.4-1/png/pngrutil.c **** #endif
1033:fltk-1.3.4-1/png/pngrutil.c **** 
1034:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_bKGD_SUPPORTED
1035:fltk-1.3.4-1/png/pngrutil.c ****    if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_bKGD) != 0)
1036:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "bKGD must be after");
1037:fltk-1.3.4-1/png/pngrutil.c **** #endif
1038:fltk-1.3.4-1/png/pngrutil.c **** }
1039:fltk-1.3.4-1/png/pngrutil.c **** 
1040:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
1041:fltk-1.3.4-1/png/pngrutil.c **** png_handle_IEND(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)
1042:fltk-1.3.4-1/png/pngrutil.c **** {
1043:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_handle_IEND");
1044:fltk-1.3.4-1/png/pngrutil.c **** 
1045:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->mode & PNG_HAVE_IHDR) == 0 ||
1046:fltk-1.3.4-1/png/pngrutil.c ****        (png_ptr->mode & PNG_HAVE_IDAT) == 0)
1047:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "out of place");
1048:fltk-1.3.4-1/png/pngrutil.c **** 
1049:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->mode |= (PNG_AFTER_IDAT | PNG_HAVE_IEND);
1050:fltk-1.3.4-1/png/pngrutil.c **** 
1051:fltk-1.3.4-1/png/pngrutil.c ****    png_crc_finish(png_ptr, length);
1052:fltk-1.3.4-1/png/pngrutil.c **** 
1053:fltk-1.3.4-1/png/pngrutil.c ****    if (length != 0)
1054:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid");
1055:fltk-1.3.4-1/png/pngrutil.c **** 
1056:fltk-1.3.4-1/png/pngrutil.c ****    PNG_UNUSED(info_ptr)
1057:fltk-1.3.4-1/png/pngrutil.c **** }
1058:fltk-1.3.4-1/png/pngrutil.c **** 
1059:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_gAMA_SUPPORTED
1060:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
1061:fltk-1.3.4-1/png/pngrutil.c **** png_handle_gAMA(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)
1062:fltk-1.3.4-1/png/pngrutil.c **** {
1063:fltk-1.3.4-1/png/pngrutil.c ****    png_fixed_point igamma;
1064:fltk-1.3.4-1/png/pngrutil.c ****    png_byte buf[4];
1065:fltk-1.3.4-1/png/pngrutil.c **** 
1066:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_handle_gAMA");
1067:fltk-1.3.4-1/png/pngrutil.c **** 
1068:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->mode & PNG_HAVE_IHDR) == 0)
1069:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
1070:fltk-1.3.4-1/png/pngrutil.c **** 
1071:fltk-1.3.4-1/png/pngrutil.c ****    else if ((png_ptr->mode & (PNG_HAVE_IDAT|PNG_HAVE_PLTE)) != 0)
1072:fltk-1.3.4-1/png/pngrutil.c ****    {
1073:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
1074:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
1075:fltk-1.3.4-1/png/pngrutil.c ****       return;
1076:fltk-1.3.4-1/png/pngrutil.c ****    }
1077:fltk-1.3.4-1/png/pngrutil.c **** 
1078:fltk-1.3.4-1/png/pngrutil.c ****    if (length != 4)
1079:fltk-1.3.4-1/png/pngrutil.c ****    {
1080:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
1081:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid");
1082:fltk-1.3.4-1/png/pngrutil.c ****       return;
1083:fltk-1.3.4-1/png/pngrutil.c ****    }
1084:fltk-1.3.4-1/png/pngrutil.c **** 
1085:fltk-1.3.4-1/png/pngrutil.c ****    png_crc_read(png_ptr, buf, 4);
1086:fltk-1.3.4-1/png/pngrutil.c **** 
1087:fltk-1.3.4-1/png/pngrutil.c ****    if (png_crc_finish(png_ptr, 0) != 0)
1088:fltk-1.3.4-1/png/pngrutil.c ****       return;
1089:fltk-1.3.4-1/png/pngrutil.c **** 
1090:fltk-1.3.4-1/png/pngrutil.c ****    igamma = png_get_fixed_point(NULL, buf);
1091:fltk-1.3.4-1/png/pngrutil.c **** 
1092:fltk-1.3.4-1/png/pngrutil.c ****    png_colorspace_set_gamma(png_ptr, &png_ptr->colorspace, igamma);
1093:fltk-1.3.4-1/png/pngrutil.c ****    png_colorspace_sync(png_ptr, info_ptr);
1094:fltk-1.3.4-1/png/pngrutil.c **** }
1095:fltk-1.3.4-1/png/pngrutil.c **** #endif
1096:fltk-1.3.4-1/png/pngrutil.c **** 
1097:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_sBIT_SUPPORTED
1098:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
1099:fltk-1.3.4-1/png/pngrutil.c **** png_handle_sBIT(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)
1100:fltk-1.3.4-1/png/pngrutil.c **** {
1101:fltk-1.3.4-1/png/pngrutil.c ****    unsigned int truelen, i;
1102:fltk-1.3.4-1/png/pngrutil.c ****    png_byte sample_depth;
1103:fltk-1.3.4-1/png/pngrutil.c ****    png_byte buf[4];
1104:fltk-1.3.4-1/png/pngrutil.c **** 
1105:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_handle_sBIT");
1106:fltk-1.3.4-1/png/pngrutil.c **** 
1107:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->mode & PNG_HAVE_IHDR) == 0)
1108:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
1109:fltk-1.3.4-1/png/pngrutil.c **** 
1110:fltk-1.3.4-1/png/pngrutil.c ****    else if ((png_ptr->mode & (PNG_HAVE_IDAT|PNG_HAVE_PLTE)) != 0)
1111:fltk-1.3.4-1/png/pngrutil.c ****    {
1112:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
1113:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
1114:fltk-1.3.4-1/png/pngrutil.c ****       return;
1115:fltk-1.3.4-1/png/pngrutil.c ****    }
1116:fltk-1.3.4-1/png/pngrutil.c **** 
1117:fltk-1.3.4-1/png/pngrutil.c ****    if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_sBIT) != 0)
1118:fltk-1.3.4-1/png/pngrutil.c ****    {
1119:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
1120:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "duplicate");
1121:fltk-1.3.4-1/png/pngrutil.c ****       return;
1122:fltk-1.3.4-1/png/pngrutil.c ****    }
1123:fltk-1.3.4-1/png/pngrutil.c **** 
1124:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
1125:fltk-1.3.4-1/png/pngrutil.c ****    {
1126:fltk-1.3.4-1/png/pngrutil.c ****       truelen = 3;
1127:fltk-1.3.4-1/png/pngrutil.c ****       sample_depth = 8;
1128:fltk-1.3.4-1/png/pngrutil.c ****    }
1129:fltk-1.3.4-1/png/pngrutil.c **** 
1130:fltk-1.3.4-1/png/pngrutil.c ****    else
1131:fltk-1.3.4-1/png/pngrutil.c ****    {
1132:fltk-1.3.4-1/png/pngrutil.c ****       truelen = png_ptr->channels;
1133:fltk-1.3.4-1/png/pngrutil.c ****       sample_depth = png_ptr->bit_depth;
1134:fltk-1.3.4-1/png/pngrutil.c ****    }
1135:fltk-1.3.4-1/png/pngrutil.c **** 
1136:fltk-1.3.4-1/png/pngrutil.c ****    if (length != truelen || length > 4)
1137:fltk-1.3.4-1/png/pngrutil.c ****    {
1138:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid");
1139:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
1140:fltk-1.3.4-1/png/pngrutil.c ****       return;
1141:fltk-1.3.4-1/png/pngrutil.c ****    }
1142:fltk-1.3.4-1/png/pngrutil.c **** 
1143:fltk-1.3.4-1/png/pngrutil.c ****    buf[0] = buf[1] = buf[2] = buf[3] = sample_depth;
1144:fltk-1.3.4-1/png/pngrutil.c ****    png_crc_read(png_ptr, buf, truelen);
1145:fltk-1.3.4-1/png/pngrutil.c **** 
1146:fltk-1.3.4-1/png/pngrutil.c ****    if (png_crc_finish(png_ptr, 0) != 0)
1147:fltk-1.3.4-1/png/pngrutil.c ****       return;
1148:fltk-1.3.4-1/png/pngrutil.c **** 
1149:fltk-1.3.4-1/png/pngrutil.c ****    for (i=0; i<truelen; ++i)
1150:fltk-1.3.4-1/png/pngrutil.c ****       if (buf[i] == 0 || buf[i] > sample_depth)
1151:fltk-1.3.4-1/png/pngrutil.c ****       {
1152:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_benign_error(png_ptr, "invalid");
1153:fltk-1.3.4-1/png/pngrutil.c ****          return;
1154:fltk-1.3.4-1/png/pngrutil.c ****       }
1155:fltk-1.3.4-1/png/pngrutil.c **** 
1156:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->color_type & PNG_COLOR_MASK_COLOR) != 0)
1157:fltk-1.3.4-1/png/pngrutil.c ****    {
1158:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->sig_bit.red = buf[0];
1159:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->sig_bit.green = buf[1];
1160:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->sig_bit.blue = buf[2];
1161:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->sig_bit.alpha = buf[3];
1162:fltk-1.3.4-1/png/pngrutil.c ****    }
1163:fltk-1.3.4-1/png/pngrutil.c **** 
1164:fltk-1.3.4-1/png/pngrutil.c ****    else
1165:fltk-1.3.4-1/png/pngrutil.c ****    {
1166:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->sig_bit.gray = buf[0];
1167:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->sig_bit.red = buf[0];
1168:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->sig_bit.green = buf[0];
1169:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->sig_bit.blue = buf[0];
1170:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->sig_bit.alpha = buf[1];
1171:fltk-1.3.4-1/png/pngrutil.c ****    }
1172:fltk-1.3.4-1/png/pngrutil.c **** 
1173:fltk-1.3.4-1/png/pngrutil.c ****    png_set_sBIT(png_ptr, info_ptr, &(png_ptr->sig_bit));
1174:fltk-1.3.4-1/png/pngrutil.c **** }
1175:fltk-1.3.4-1/png/pngrutil.c **** #endif
1176:fltk-1.3.4-1/png/pngrutil.c **** 
1177:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_cHRM_SUPPORTED
1178:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
1179:fltk-1.3.4-1/png/pngrutil.c **** png_handle_cHRM(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)
1180:fltk-1.3.4-1/png/pngrutil.c **** {
1181:fltk-1.3.4-1/png/pngrutil.c ****    png_byte buf[32];
1182:fltk-1.3.4-1/png/pngrutil.c ****    png_xy xy;
1183:fltk-1.3.4-1/png/pngrutil.c **** 
1184:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_handle_cHRM");
1185:fltk-1.3.4-1/png/pngrutil.c **** 
1186:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->mode & PNG_HAVE_IHDR) == 0)
1187:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
1188:fltk-1.3.4-1/png/pngrutil.c **** 
1189:fltk-1.3.4-1/png/pngrutil.c ****    else if ((png_ptr->mode & (PNG_HAVE_IDAT|PNG_HAVE_PLTE)) != 0)
1190:fltk-1.3.4-1/png/pngrutil.c ****    {
1191:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
1192:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
1193:fltk-1.3.4-1/png/pngrutil.c ****       return;
1194:fltk-1.3.4-1/png/pngrutil.c ****    }
1195:fltk-1.3.4-1/png/pngrutil.c **** 
1196:fltk-1.3.4-1/png/pngrutil.c ****    if (length != 32)
1197:fltk-1.3.4-1/png/pngrutil.c ****    {
1198:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
1199:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid");
1200:fltk-1.3.4-1/png/pngrutil.c ****       return;
1201:fltk-1.3.4-1/png/pngrutil.c ****    }
1202:fltk-1.3.4-1/png/pngrutil.c **** 
1203:fltk-1.3.4-1/png/pngrutil.c ****    png_crc_read(png_ptr, buf, 32);
1204:fltk-1.3.4-1/png/pngrutil.c **** 
1205:fltk-1.3.4-1/png/pngrutil.c ****    if (png_crc_finish(png_ptr, 0) != 0)
1206:fltk-1.3.4-1/png/pngrutil.c ****       return;
1207:fltk-1.3.4-1/png/pngrutil.c **** 
1208:fltk-1.3.4-1/png/pngrutil.c ****    xy.whitex = png_get_fixed_point(NULL, buf);
1209:fltk-1.3.4-1/png/pngrutil.c ****    xy.whitey = png_get_fixed_point(NULL, buf + 4);
1210:fltk-1.3.4-1/png/pngrutil.c ****    xy.redx   = png_get_fixed_point(NULL, buf + 8);
1211:fltk-1.3.4-1/png/pngrutil.c ****    xy.redy   = png_get_fixed_point(NULL, buf + 12);
1212:fltk-1.3.4-1/png/pngrutil.c ****    xy.greenx = png_get_fixed_point(NULL, buf + 16);
1213:fltk-1.3.4-1/png/pngrutil.c ****    xy.greeny = png_get_fixed_point(NULL, buf + 20);
1214:fltk-1.3.4-1/png/pngrutil.c ****    xy.bluex  = png_get_fixed_point(NULL, buf + 24);
1215:fltk-1.3.4-1/png/pngrutil.c ****    xy.bluey  = png_get_fixed_point(NULL, buf + 28);
1216:fltk-1.3.4-1/png/pngrutil.c **** 
1217:fltk-1.3.4-1/png/pngrutil.c ****    if (xy.whitex == PNG_FIXED_ERROR ||
1218:fltk-1.3.4-1/png/pngrutil.c ****        xy.whitey == PNG_FIXED_ERROR ||
1219:fltk-1.3.4-1/png/pngrutil.c ****        xy.redx   == PNG_FIXED_ERROR ||
1220:fltk-1.3.4-1/png/pngrutil.c ****        xy.redy   == PNG_FIXED_ERROR ||
1221:fltk-1.3.4-1/png/pngrutil.c ****        xy.greenx == PNG_FIXED_ERROR ||
1222:fltk-1.3.4-1/png/pngrutil.c ****        xy.greeny == PNG_FIXED_ERROR ||
1223:fltk-1.3.4-1/png/pngrutil.c ****        xy.bluex  == PNG_FIXED_ERROR ||
1224:fltk-1.3.4-1/png/pngrutil.c ****        xy.bluey  == PNG_FIXED_ERROR)
1225:fltk-1.3.4-1/png/pngrutil.c ****    {
1226:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid values");
1227:fltk-1.3.4-1/png/pngrutil.c ****       return;
1228:fltk-1.3.4-1/png/pngrutil.c ****    }
1229:fltk-1.3.4-1/png/pngrutil.c **** 
1230:fltk-1.3.4-1/png/pngrutil.c ****    /* If a colorspace error has already been output skip this chunk */
1231:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->colorspace.flags & PNG_COLORSPACE_INVALID) != 0)
1232:fltk-1.3.4-1/png/pngrutil.c ****       return;
1233:fltk-1.3.4-1/png/pngrutil.c **** 
1234:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->colorspace.flags & PNG_COLORSPACE_FROM_cHRM) != 0)
1235:fltk-1.3.4-1/png/pngrutil.c ****    {
1236:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->colorspace.flags |= PNG_COLORSPACE_INVALID;
1237:fltk-1.3.4-1/png/pngrutil.c ****       png_colorspace_sync(png_ptr, info_ptr);
1238:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "duplicate");
1239:fltk-1.3.4-1/png/pngrutil.c ****       return;
1240:fltk-1.3.4-1/png/pngrutil.c ****    }
1241:fltk-1.3.4-1/png/pngrutil.c **** 
1242:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->colorspace.flags |= PNG_COLORSPACE_FROM_cHRM;
1243:fltk-1.3.4-1/png/pngrutil.c ****    (void)png_colorspace_set_chromaticities(png_ptr, &png_ptr->colorspace, &xy,
1244:fltk-1.3.4-1/png/pngrutil.c ****       1/*prefer cHRM values*/);
1245:fltk-1.3.4-1/png/pngrutil.c ****    png_colorspace_sync(png_ptr, info_ptr);
1246:fltk-1.3.4-1/png/pngrutil.c **** }
1247:fltk-1.3.4-1/png/pngrutil.c **** #endif
1248:fltk-1.3.4-1/png/pngrutil.c **** 
1249:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_sRGB_SUPPORTED
1250:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
1251:fltk-1.3.4-1/png/pngrutil.c **** png_handle_sRGB(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)
1252:fltk-1.3.4-1/png/pngrutil.c **** {
1253:fltk-1.3.4-1/png/pngrutil.c ****    png_byte intent;
1254:fltk-1.3.4-1/png/pngrutil.c **** 
1255:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_handle_sRGB");
1256:fltk-1.3.4-1/png/pngrutil.c **** 
1257:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->mode & PNG_HAVE_IHDR) == 0)
1258:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
1259:fltk-1.3.4-1/png/pngrutil.c **** 
1260:fltk-1.3.4-1/png/pngrutil.c ****    else if ((png_ptr->mode & (PNG_HAVE_IDAT|PNG_HAVE_PLTE)) != 0)
1261:fltk-1.3.4-1/png/pngrutil.c ****    {
1262:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
1263:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
1264:fltk-1.3.4-1/png/pngrutil.c ****       return;
1265:fltk-1.3.4-1/png/pngrutil.c ****    }
1266:fltk-1.3.4-1/png/pngrutil.c **** 
1267:fltk-1.3.4-1/png/pngrutil.c ****    if (length != 1)
1268:fltk-1.3.4-1/png/pngrutil.c ****    {
1269:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
1270:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid");
1271:fltk-1.3.4-1/png/pngrutil.c ****       return;
1272:fltk-1.3.4-1/png/pngrutil.c ****    }
1273:fltk-1.3.4-1/png/pngrutil.c **** 
1274:fltk-1.3.4-1/png/pngrutil.c ****    png_crc_read(png_ptr, &intent, 1);
1275:fltk-1.3.4-1/png/pngrutil.c **** 
1276:fltk-1.3.4-1/png/pngrutil.c ****    if (png_crc_finish(png_ptr, 0) != 0)
1277:fltk-1.3.4-1/png/pngrutil.c ****       return;
1278:fltk-1.3.4-1/png/pngrutil.c **** 
1279:fltk-1.3.4-1/png/pngrutil.c ****    /* If a colorspace error has already been output skip this chunk */
1280:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->colorspace.flags & PNG_COLORSPACE_INVALID) != 0)
1281:fltk-1.3.4-1/png/pngrutil.c ****       return;
1282:fltk-1.3.4-1/png/pngrutil.c **** 
1283:fltk-1.3.4-1/png/pngrutil.c ****    /* Only one sRGB or iCCP chunk is allowed, use the HAVE_INTENT flag to detect
1284:fltk-1.3.4-1/png/pngrutil.c ****     * this.
1285:fltk-1.3.4-1/png/pngrutil.c ****     */
1286:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->colorspace.flags & PNG_COLORSPACE_HAVE_INTENT) != 0)
1287:fltk-1.3.4-1/png/pngrutil.c ****    {
1288:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->colorspace.flags |= PNG_COLORSPACE_INVALID;
1289:fltk-1.3.4-1/png/pngrutil.c ****       png_colorspace_sync(png_ptr, info_ptr);
1290:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "too many profiles");
1291:fltk-1.3.4-1/png/pngrutil.c ****       return;
1292:fltk-1.3.4-1/png/pngrutil.c ****    }
1293:fltk-1.3.4-1/png/pngrutil.c **** 
1294:fltk-1.3.4-1/png/pngrutil.c ****    (void)png_colorspace_set_sRGB(png_ptr, &png_ptr->colorspace, intent);
1295:fltk-1.3.4-1/png/pngrutil.c ****    png_colorspace_sync(png_ptr, info_ptr);
1296:fltk-1.3.4-1/png/pngrutil.c **** }
1297:fltk-1.3.4-1/png/pngrutil.c **** #endif /* READ_sRGB */
1298:fltk-1.3.4-1/png/pngrutil.c **** 
1299:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_iCCP_SUPPORTED
1300:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
1301:fltk-1.3.4-1/png/pngrutil.c **** png_handle_iCCP(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)
1302:fltk-1.3.4-1/png/pngrutil.c **** /* Note: this does not properly handle profiles that are > 64K under DOS */
1303:fltk-1.3.4-1/png/pngrutil.c **** {
1304:fltk-1.3.4-1/png/pngrutil.c ****    png_const_charp errmsg = NULL; /* error message output, or no error */
1305:fltk-1.3.4-1/png/pngrutil.c ****    int finished = 0; /* crc checked */
1306:fltk-1.3.4-1/png/pngrutil.c **** 
1307:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_handle_iCCP");
1308:fltk-1.3.4-1/png/pngrutil.c **** 
1309:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->mode & PNG_HAVE_IHDR) == 0)
1310:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
1311:fltk-1.3.4-1/png/pngrutil.c **** 
1312:fltk-1.3.4-1/png/pngrutil.c ****    else if ((png_ptr->mode & (PNG_HAVE_IDAT|PNG_HAVE_PLTE)) != 0)
1313:fltk-1.3.4-1/png/pngrutil.c ****    {
1314:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
1315:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
1316:fltk-1.3.4-1/png/pngrutil.c ****       return;
1317:fltk-1.3.4-1/png/pngrutil.c ****    }
1318:fltk-1.3.4-1/png/pngrutil.c **** 
1319:fltk-1.3.4-1/png/pngrutil.c ****    /* Consistent with all the above colorspace handling an obviously *invalid*
1320:fltk-1.3.4-1/png/pngrutil.c ****     * chunk is just ignored, so does not invalidate the color space.  An
1321:fltk-1.3.4-1/png/pngrutil.c ****     * alternative is to set the 'invalid' flags at the start of this routine
1322:fltk-1.3.4-1/png/pngrutil.c ****     * and only clear them in they were not set before and all the tests pass.
1323:fltk-1.3.4-1/png/pngrutil.c ****     * The minimum 'deflate' stream is assumed to be just the 2 byte header and
1324:fltk-1.3.4-1/png/pngrutil.c ****     * 4 byte checksum.  The keyword must be at least one character and there is
1325:fltk-1.3.4-1/png/pngrutil.c ****     * a terminator (0) byte and the compression method.
1326:fltk-1.3.4-1/png/pngrutil.c ****     */
1327:fltk-1.3.4-1/png/pngrutil.c ****    if (length < 9)
1328:fltk-1.3.4-1/png/pngrutil.c ****    {
1329:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
1330:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "too short");
1331:fltk-1.3.4-1/png/pngrutil.c ****       return;
1332:fltk-1.3.4-1/png/pngrutil.c ****    }
1333:fltk-1.3.4-1/png/pngrutil.c **** 
1334:fltk-1.3.4-1/png/pngrutil.c ****    /* If a colorspace error has already been output skip this chunk */
1335:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->colorspace.flags & PNG_COLORSPACE_INVALID) != 0)
1336:fltk-1.3.4-1/png/pngrutil.c ****    {
1337:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
1338:fltk-1.3.4-1/png/pngrutil.c ****       return;
1339:fltk-1.3.4-1/png/pngrutil.c ****    }
1340:fltk-1.3.4-1/png/pngrutil.c **** 
1341:fltk-1.3.4-1/png/pngrutil.c ****    /* Only one sRGB or iCCP chunk is allowed, use the HAVE_INTENT flag to detect
1342:fltk-1.3.4-1/png/pngrutil.c ****     * this.
1343:fltk-1.3.4-1/png/pngrutil.c ****     */
1344:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->colorspace.flags & PNG_COLORSPACE_HAVE_INTENT) == 0)
1345:fltk-1.3.4-1/png/pngrutil.c ****    {
1346:fltk-1.3.4-1/png/pngrutil.c ****       uInt read_length, keyword_length;
1347:fltk-1.3.4-1/png/pngrutil.c ****       char keyword[81];
1348:fltk-1.3.4-1/png/pngrutil.c **** 
1349:fltk-1.3.4-1/png/pngrutil.c ****       /* Find the keyword; the keyword plus separator and compression method
1350:fltk-1.3.4-1/png/pngrutil.c ****        * bytes can be at most 81 characters long.
1351:fltk-1.3.4-1/png/pngrutil.c ****        */
1352:fltk-1.3.4-1/png/pngrutil.c ****       read_length = 81; /* maximum */
1353:fltk-1.3.4-1/png/pngrutil.c ****       if (read_length > length)
1354:fltk-1.3.4-1/png/pngrutil.c ****          read_length = (uInt)length;
1355:fltk-1.3.4-1/png/pngrutil.c **** 
1356:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_read(png_ptr, (png_bytep)keyword, read_length);
1357:fltk-1.3.4-1/png/pngrutil.c ****       length -= read_length;
1358:fltk-1.3.4-1/png/pngrutil.c **** 
1359:fltk-1.3.4-1/png/pngrutil.c ****       keyword_length = 0;
1360:fltk-1.3.4-1/png/pngrutil.c ****       while (keyword_length < 80 && keyword_length < read_length &&
1361:fltk-1.3.4-1/png/pngrutil.c ****          keyword[keyword_length] != 0)
1362:fltk-1.3.4-1/png/pngrutil.c ****          ++keyword_length;
1363:fltk-1.3.4-1/png/pngrutil.c **** 
1364:fltk-1.3.4-1/png/pngrutil.c ****       /* TODO: make the keyword checking common */
1365:fltk-1.3.4-1/png/pngrutil.c ****       if (keyword_length >= 1 && keyword_length <= 79)
1366:fltk-1.3.4-1/png/pngrutil.c ****       {
1367:fltk-1.3.4-1/png/pngrutil.c ****          /* We only understand '0' compression - deflate - so if we get a
1368:fltk-1.3.4-1/png/pngrutil.c ****           * different value we can't safely decode the chunk.
1369:fltk-1.3.4-1/png/pngrutil.c ****           */
1370:fltk-1.3.4-1/png/pngrutil.c ****          if (keyword_length+1 < read_length &&
1371:fltk-1.3.4-1/png/pngrutil.c ****             keyword[keyword_length+1] == PNG_COMPRESSION_TYPE_BASE)
1372:fltk-1.3.4-1/png/pngrutil.c ****          {
1373:fltk-1.3.4-1/png/pngrutil.c ****             read_length -= keyword_length+2;
1374:fltk-1.3.4-1/png/pngrutil.c **** 
1375:fltk-1.3.4-1/png/pngrutil.c ****             if (png_inflate_claim(png_ptr, png_iCCP) == Z_OK)
1376:fltk-1.3.4-1/png/pngrutil.c ****             {
1377:fltk-1.3.4-1/png/pngrutil.c ****                Byte profile_header[132];
1378:fltk-1.3.4-1/png/pngrutil.c ****                Byte local_buffer[PNG_INFLATE_BUF_SIZE];
1379:fltk-1.3.4-1/png/pngrutil.c ****                png_alloc_size_t size = (sizeof profile_header);
1380:fltk-1.3.4-1/png/pngrutil.c **** 
1381:fltk-1.3.4-1/png/pngrutil.c ****                png_ptr->zstream.next_in = (Bytef*)keyword + (keyword_length+2);
1382:fltk-1.3.4-1/png/pngrutil.c ****                png_ptr->zstream.avail_in = read_length;
1383:fltk-1.3.4-1/png/pngrutil.c ****                (void)png_inflate_read(png_ptr, local_buffer,
1384:fltk-1.3.4-1/png/pngrutil.c ****                   (sizeof local_buffer), &length, profile_header, &size,
1385:fltk-1.3.4-1/png/pngrutil.c ****                   0/*finish: don't, because the output is too small*/);
1386:fltk-1.3.4-1/png/pngrutil.c **** 
1387:fltk-1.3.4-1/png/pngrutil.c ****                if (size == 0)
1388:fltk-1.3.4-1/png/pngrutil.c ****                {
1389:fltk-1.3.4-1/png/pngrutil.c ****                   /* We have the ICC profile header; do the basic header checks.
1390:fltk-1.3.4-1/png/pngrutil.c ****                    */
1391:fltk-1.3.4-1/png/pngrutil.c ****                   const png_uint_32 profile_length =
1392:fltk-1.3.4-1/png/pngrutil.c ****                      png_get_uint_32(profile_header);
1393:fltk-1.3.4-1/png/pngrutil.c **** 
1394:fltk-1.3.4-1/png/pngrutil.c ****                   if (png_icc_check_length(png_ptr, &png_ptr->colorspace,
1395:fltk-1.3.4-1/png/pngrutil.c ****                      keyword, profile_length) != 0)
1396:fltk-1.3.4-1/png/pngrutil.c ****                   {
1397:fltk-1.3.4-1/png/pngrutil.c ****                      /* The length is apparently ok, so we can check the 132
1398:fltk-1.3.4-1/png/pngrutil.c ****                       * byte header.
1399:fltk-1.3.4-1/png/pngrutil.c ****                       */
1400:fltk-1.3.4-1/png/pngrutil.c ****                      if (png_icc_check_header(png_ptr, &png_ptr->colorspace,
1401:fltk-1.3.4-1/png/pngrutil.c ****                         keyword, profile_length, profile_header,
1402:fltk-1.3.4-1/png/pngrutil.c ****                         png_ptr->color_type) != 0)
1403:fltk-1.3.4-1/png/pngrutil.c ****                      {
1404:fltk-1.3.4-1/png/pngrutil.c ****                         /* Now read the tag table; a variable size buffer is
1405:fltk-1.3.4-1/png/pngrutil.c ****                          * needed at this point, allocate one for the whole
1406:fltk-1.3.4-1/png/pngrutil.c ****                          * profile.  The header check has already validated
1407:fltk-1.3.4-1/png/pngrutil.c ****                          * that none of these stuff will overflow.
1408:fltk-1.3.4-1/png/pngrutil.c ****                          */
1409:fltk-1.3.4-1/png/pngrutil.c ****                         const png_uint_32 tag_count = png_get_uint_32(
1410:fltk-1.3.4-1/png/pngrutil.c ****                            profile_header+128);
1411:fltk-1.3.4-1/png/pngrutil.c ****                         png_bytep profile = png_read_buffer(png_ptr,
1412:fltk-1.3.4-1/png/pngrutil.c ****                            profile_length, 2/*silent*/);
1413:fltk-1.3.4-1/png/pngrutil.c **** 
1414:fltk-1.3.4-1/png/pngrutil.c ****                         if (profile != NULL)
1415:fltk-1.3.4-1/png/pngrutil.c ****                         {
1416:fltk-1.3.4-1/png/pngrutil.c ****                            memcpy(profile, profile_header,
1417:fltk-1.3.4-1/png/pngrutil.c ****                               (sizeof profile_header));
1418:fltk-1.3.4-1/png/pngrutil.c **** 
1419:fltk-1.3.4-1/png/pngrutil.c ****                            size = 12 * tag_count;
1420:fltk-1.3.4-1/png/pngrutil.c **** 
1421:fltk-1.3.4-1/png/pngrutil.c ****                            (void)png_inflate_read(png_ptr, local_buffer,
1422:fltk-1.3.4-1/png/pngrutil.c ****                               (sizeof local_buffer), &length,
1423:fltk-1.3.4-1/png/pngrutil.c ****                               profile + (sizeof profile_header), &size, 0);
1424:fltk-1.3.4-1/png/pngrutil.c **** 
1425:fltk-1.3.4-1/png/pngrutil.c ****                            /* Still expect a buffer error because we expect
1426:fltk-1.3.4-1/png/pngrutil.c ****                             * there to be some tag data!
1427:fltk-1.3.4-1/png/pngrutil.c ****                             */
1428:fltk-1.3.4-1/png/pngrutil.c ****                            if (size == 0)
1429:fltk-1.3.4-1/png/pngrutil.c ****                            {
1430:fltk-1.3.4-1/png/pngrutil.c ****                               if (png_icc_check_tag_table(png_ptr,
1431:fltk-1.3.4-1/png/pngrutil.c ****                                  &png_ptr->colorspace, keyword, profile_length,
1432:fltk-1.3.4-1/png/pngrutil.c ****                                  profile) != 0)
1433:fltk-1.3.4-1/png/pngrutil.c ****                               {
1434:fltk-1.3.4-1/png/pngrutil.c ****                                  /* The profile has been validated for basic
1435:fltk-1.3.4-1/png/pngrutil.c ****                                   * security issues, so read the whole thing in.
1436:fltk-1.3.4-1/png/pngrutil.c ****                                   */
1437:fltk-1.3.4-1/png/pngrutil.c ****                                  size = profile_length - (sizeof profile_header)
1438:fltk-1.3.4-1/png/pngrutil.c ****                                     - 12 * tag_count;
1439:fltk-1.3.4-1/png/pngrutil.c **** 
1440:fltk-1.3.4-1/png/pngrutil.c ****                                  (void)png_inflate_read(png_ptr, local_buffer,
1441:fltk-1.3.4-1/png/pngrutil.c ****                                     (sizeof local_buffer), &length,
1442:fltk-1.3.4-1/png/pngrutil.c ****                                     profile + (sizeof profile_header) +
1443:fltk-1.3.4-1/png/pngrutil.c ****                                     12 * tag_count, &size, 1/*finish*/);
1444:fltk-1.3.4-1/png/pngrutil.c **** 
1445:fltk-1.3.4-1/png/pngrutil.c ****                                  if (length > 0 && !(png_ptr->flags &
1446:fltk-1.3.4-1/png/pngrutil.c ****                                        PNG_FLAG_BENIGN_ERRORS_WARN))
1447:fltk-1.3.4-1/png/pngrutil.c ****                                     errmsg = "extra compressed data";
1448:fltk-1.3.4-1/png/pngrutil.c **** 
1449:fltk-1.3.4-1/png/pngrutil.c ****                                  /* But otherwise allow extra data: */
1450:fltk-1.3.4-1/png/pngrutil.c ****                                  else if (size == 0)
1451:fltk-1.3.4-1/png/pngrutil.c ****                                  {
1452:fltk-1.3.4-1/png/pngrutil.c ****                                     if (length > 0)
1453:fltk-1.3.4-1/png/pngrutil.c ****                                     {
1454:fltk-1.3.4-1/png/pngrutil.c ****                                        /* This can be handled completely, so
1455:fltk-1.3.4-1/png/pngrutil.c ****                                         * keep going.
1456:fltk-1.3.4-1/png/pngrutil.c ****                                         */
1457:fltk-1.3.4-1/png/pngrutil.c ****                                        png_chunk_warning(png_ptr,
1458:fltk-1.3.4-1/png/pngrutil.c ****                                           "extra compressed data");
1459:fltk-1.3.4-1/png/pngrutil.c ****                                     }
1460:fltk-1.3.4-1/png/pngrutil.c **** 
1461:fltk-1.3.4-1/png/pngrutil.c ****                                     png_crc_finish(png_ptr, length);
1462:fltk-1.3.4-1/png/pngrutil.c ****                                     finished = 1;
1463:fltk-1.3.4-1/png/pngrutil.c **** 
1464:fltk-1.3.4-1/png/pngrutil.c **** #                                   ifdef PNG_sRGB_SUPPORTED
1465:fltk-1.3.4-1/png/pngrutil.c ****                                        /* Check for a match against sRGB */
1466:fltk-1.3.4-1/png/pngrutil.c ****                                        png_icc_set_sRGB(png_ptr,
1467:fltk-1.3.4-1/png/pngrutil.c ****                                           &png_ptr->colorspace, profile,
1468:fltk-1.3.4-1/png/pngrutil.c ****                                           png_ptr->zstream.adler);
1469:fltk-1.3.4-1/png/pngrutil.c **** #                                   endif
1470:fltk-1.3.4-1/png/pngrutil.c **** 
1471:fltk-1.3.4-1/png/pngrutil.c ****                                     /* Steal the profile for info_ptr. */
1472:fltk-1.3.4-1/png/pngrutil.c ****                                     if (info_ptr != NULL)
1473:fltk-1.3.4-1/png/pngrutil.c ****                                     {
1474:fltk-1.3.4-1/png/pngrutil.c ****                                        png_free_data(png_ptr, info_ptr,
1475:fltk-1.3.4-1/png/pngrutil.c ****                                           PNG_FREE_ICCP, 0);
1476:fltk-1.3.4-1/png/pngrutil.c **** 
1477:fltk-1.3.4-1/png/pngrutil.c ****                                        info_ptr->iccp_name = png_voidcast(char*,
1478:fltk-1.3.4-1/png/pngrutil.c ****                                           png_malloc_base(png_ptr,
1479:fltk-1.3.4-1/png/pngrutil.c ****                                           keyword_length+1));
1480:fltk-1.3.4-1/png/pngrutil.c ****                                        if (info_ptr->iccp_name != NULL)
1481:fltk-1.3.4-1/png/pngrutil.c ****                                        {
1482:fltk-1.3.4-1/png/pngrutil.c ****                                           memcpy(info_ptr->iccp_name, keyword,
1483:fltk-1.3.4-1/png/pngrutil.c ****                                              keyword_length+1);
1484:fltk-1.3.4-1/png/pngrutil.c ****                                           info_ptr->iccp_proflen =
1485:fltk-1.3.4-1/png/pngrutil.c ****                                              profile_length;
1486:fltk-1.3.4-1/png/pngrutil.c ****                                           info_ptr->iccp_profile = profile;
1487:fltk-1.3.4-1/png/pngrutil.c ****                                           png_ptr->read_buffer = NULL; /*steal*/
1488:fltk-1.3.4-1/png/pngrutil.c ****                                           info_ptr->free_me |= PNG_FREE_ICCP;
1489:fltk-1.3.4-1/png/pngrutil.c ****                                           info_ptr->valid |= PNG_INFO_iCCP;
1490:fltk-1.3.4-1/png/pngrutil.c ****                                        }
1491:fltk-1.3.4-1/png/pngrutil.c **** 
1492:fltk-1.3.4-1/png/pngrutil.c ****                                        else
1493:fltk-1.3.4-1/png/pngrutil.c ****                                        {
1494:fltk-1.3.4-1/png/pngrutil.c ****                                           png_ptr->colorspace.flags |=
1495:fltk-1.3.4-1/png/pngrutil.c ****                                              PNG_COLORSPACE_INVALID;
1496:fltk-1.3.4-1/png/pngrutil.c ****                                           errmsg = "out of memory";
1497:fltk-1.3.4-1/png/pngrutil.c ****                                        }
1498:fltk-1.3.4-1/png/pngrutil.c ****                                     }
1499:fltk-1.3.4-1/png/pngrutil.c **** 
1500:fltk-1.3.4-1/png/pngrutil.c ****                                     /* else the profile remains in the read
1501:fltk-1.3.4-1/png/pngrutil.c ****                                      * buffer which gets reused for subsequent
1502:fltk-1.3.4-1/png/pngrutil.c ****                                      * chunks.
1503:fltk-1.3.4-1/png/pngrutil.c ****                                      */
1504:fltk-1.3.4-1/png/pngrutil.c **** 
1505:fltk-1.3.4-1/png/pngrutil.c ****                                     if (info_ptr != NULL)
1506:fltk-1.3.4-1/png/pngrutil.c ****                                        png_colorspace_sync(png_ptr, info_ptr);
1507:fltk-1.3.4-1/png/pngrutil.c **** 
1508:fltk-1.3.4-1/png/pngrutil.c ****                                     if (errmsg == NULL)
1509:fltk-1.3.4-1/png/pngrutil.c ****                                     {
1510:fltk-1.3.4-1/png/pngrutil.c ****                                        png_ptr->zowner = 0;
1511:fltk-1.3.4-1/png/pngrutil.c ****                                        return;
1512:fltk-1.3.4-1/png/pngrutil.c ****                                     }
1513:fltk-1.3.4-1/png/pngrutil.c ****                                  }
1514:fltk-1.3.4-1/png/pngrutil.c **** 
1515:fltk-1.3.4-1/png/pngrutil.c ****                                  else if (size > 0)
1516:fltk-1.3.4-1/png/pngrutil.c ****                                     errmsg = "truncated";
1517:fltk-1.3.4-1/png/pngrutil.c **** 
1518:fltk-1.3.4-1/png/pngrutil.c ****                                  else
1519:fltk-1.3.4-1/png/pngrutil.c ****                                     errmsg = png_ptr->zstream.msg;
1520:fltk-1.3.4-1/png/pngrutil.c ****                               }
1521:fltk-1.3.4-1/png/pngrutil.c **** 
1522:fltk-1.3.4-1/png/pngrutil.c ****                               /* else png_icc_check_tag_table output an error */
1523:fltk-1.3.4-1/png/pngrutil.c ****                            }
1524:fltk-1.3.4-1/png/pngrutil.c **** 
1525:fltk-1.3.4-1/png/pngrutil.c ****                            else /* profile truncated */
1526:fltk-1.3.4-1/png/pngrutil.c ****                               errmsg = png_ptr->zstream.msg;
1527:fltk-1.3.4-1/png/pngrutil.c ****                         }
1528:fltk-1.3.4-1/png/pngrutil.c **** 
1529:fltk-1.3.4-1/png/pngrutil.c ****                         else
1530:fltk-1.3.4-1/png/pngrutil.c ****                            errmsg = "out of memory";
1531:fltk-1.3.4-1/png/pngrutil.c ****                      }
1532:fltk-1.3.4-1/png/pngrutil.c **** 
1533:fltk-1.3.4-1/png/pngrutil.c ****                      /* else png_icc_check_header output an error */
1534:fltk-1.3.4-1/png/pngrutil.c ****                   }
1535:fltk-1.3.4-1/png/pngrutil.c **** 
1536:fltk-1.3.4-1/png/pngrutil.c ****                   /* else png_icc_check_length output an error */
1537:fltk-1.3.4-1/png/pngrutil.c ****                }
1538:fltk-1.3.4-1/png/pngrutil.c **** 
1539:fltk-1.3.4-1/png/pngrutil.c ****                else /* profile truncated */
1540:fltk-1.3.4-1/png/pngrutil.c ****                   errmsg = png_ptr->zstream.msg;
1541:fltk-1.3.4-1/png/pngrutil.c **** 
1542:fltk-1.3.4-1/png/pngrutil.c ****                /* Release the stream */
1543:fltk-1.3.4-1/png/pngrutil.c ****                png_ptr->zowner = 0;
1544:fltk-1.3.4-1/png/pngrutil.c ****             }
1545:fltk-1.3.4-1/png/pngrutil.c **** 
1546:fltk-1.3.4-1/png/pngrutil.c ****             else /* png_inflate_claim failed */
1547:fltk-1.3.4-1/png/pngrutil.c ****                errmsg = png_ptr->zstream.msg;
1548:fltk-1.3.4-1/png/pngrutil.c ****          }
1549:fltk-1.3.4-1/png/pngrutil.c **** 
1550:fltk-1.3.4-1/png/pngrutil.c ****          else
1551:fltk-1.3.4-1/png/pngrutil.c ****             errmsg = "bad compression method"; /* or missing */
1552:fltk-1.3.4-1/png/pngrutil.c ****       }
1553:fltk-1.3.4-1/png/pngrutil.c **** 
1554:fltk-1.3.4-1/png/pngrutil.c ****       else
1555:fltk-1.3.4-1/png/pngrutil.c ****          errmsg = "bad keyword";
1556:fltk-1.3.4-1/png/pngrutil.c ****    }
1557:fltk-1.3.4-1/png/pngrutil.c **** 
1558:fltk-1.3.4-1/png/pngrutil.c ****    else
1559:fltk-1.3.4-1/png/pngrutil.c ****       errmsg = "too many profiles";
1560:fltk-1.3.4-1/png/pngrutil.c **** 
1561:fltk-1.3.4-1/png/pngrutil.c ****    /* Failure: the reason is in 'errmsg' */
1562:fltk-1.3.4-1/png/pngrutil.c ****    if (finished == 0)
1563:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
1564:fltk-1.3.4-1/png/pngrutil.c **** 
1565:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->colorspace.flags |= PNG_COLORSPACE_INVALID;
1566:fltk-1.3.4-1/png/pngrutil.c ****    png_colorspace_sync(png_ptr, info_ptr);
1567:fltk-1.3.4-1/png/pngrutil.c ****    if (errmsg != NULL) /* else already output */
1568:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, errmsg);
1569:fltk-1.3.4-1/png/pngrutil.c **** }
1570:fltk-1.3.4-1/png/pngrutil.c **** #endif /* READ_iCCP */
1571:fltk-1.3.4-1/png/pngrutil.c **** 
1572:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_sPLT_SUPPORTED
1573:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
1574:fltk-1.3.4-1/png/pngrutil.c **** png_handle_sPLT(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)
1575:fltk-1.3.4-1/png/pngrutil.c **** /* Note: this does not properly handle chunks that are > 64K under DOS */
1576:fltk-1.3.4-1/png/pngrutil.c **** {
1577:fltk-1.3.4-1/png/pngrutil.c ****    png_bytep entry_start, buffer;
1578:fltk-1.3.4-1/png/pngrutil.c ****    png_sPLT_t new_palette;
1579:fltk-1.3.4-1/png/pngrutil.c ****    png_sPLT_entryp pp;
1580:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32 data_length;
1581:fltk-1.3.4-1/png/pngrutil.c ****    int entry_size, i;
1582:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32 skip = 0;
1583:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32 dl;
1584:fltk-1.3.4-1/png/pngrutil.c ****    png_size_t max_dl;
1585:fltk-1.3.4-1/png/pngrutil.c **** 
1586:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_handle_sPLT");
1587:fltk-1.3.4-1/png/pngrutil.c **** 
1588:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_USER_LIMITS_SUPPORTED
1589:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->user_chunk_cache_max != 0)
1590:fltk-1.3.4-1/png/pngrutil.c ****    {
1591:fltk-1.3.4-1/png/pngrutil.c ****       if (png_ptr->user_chunk_cache_max == 1)
1592:fltk-1.3.4-1/png/pngrutil.c ****       {
1593:fltk-1.3.4-1/png/pngrutil.c ****          png_crc_finish(png_ptr, length);
1594:fltk-1.3.4-1/png/pngrutil.c ****          return;
1595:fltk-1.3.4-1/png/pngrutil.c ****       }
1596:fltk-1.3.4-1/png/pngrutil.c **** 
1597:fltk-1.3.4-1/png/pngrutil.c ****       if (--png_ptr->user_chunk_cache_max == 1)
1598:fltk-1.3.4-1/png/pngrutil.c ****       {
1599:fltk-1.3.4-1/png/pngrutil.c ****          png_warning(png_ptr, "No space in chunk cache for sPLT");
1600:fltk-1.3.4-1/png/pngrutil.c ****          png_crc_finish(png_ptr, length);
1601:fltk-1.3.4-1/png/pngrutil.c ****          return;
1602:fltk-1.3.4-1/png/pngrutil.c ****       }
1603:fltk-1.3.4-1/png/pngrutil.c ****    }
1604:fltk-1.3.4-1/png/pngrutil.c **** #endif
1605:fltk-1.3.4-1/png/pngrutil.c **** 
1606:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->mode & PNG_HAVE_IHDR) == 0)
1607:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
1608:fltk-1.3.4-1/png/pngrutil.c **** 
1609:fltk-1.3.4-1/png/pngrutil.c ****    else if ((png_ptr->mode & PNG_HAVE_IDAT) != 0)
1610:fltk-1.3.4-1/png/pngrutil.c ****    {
1611:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
1612:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
1613:fltk-1.3.4-1/png/pngrutil.c ****       return;
1614:fltk-1.3.4-1/png/pngrutil.c ****    }
1615:fltk-1.3.4-1/png/pngrutil.c **** 
1616:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_MAX_MALLOC_64K
1617:fltk-1.3.4-1/png/pngrutil.c ****    if (length > 65535U)
1618:fltk-1.3.4-1/png/pngrutil.c ****    {
1619:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
1620:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "too large to fit in memory");
1621:fltk-1.3.4-1/png/pngrutil.c ****       return;
1622:fltk-1.3.4-1/png/pngrutil.c ****    }
1623:fltk-1.3.4-1/png/pngrutil.c **** #endif
1624:fltk-1.3.4-1/png/pngrutil.c **** 
1625:fltk-1.3.4-1/png/pngrutil.c ****    buffer = png_read_buffer(png_ptr, length+1, 2/*silent*/);
1626:fltk-1.3.4-1/png/pngrutil.c ****    if (buffer == NULL)
1627:fltk-1.3.4-1/png/pngrutil.c ****    {
1628:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
1629:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of memory");
1630:fltk-1.3.4-1/png/pngrutil.c ****       return;
1631:fltk-1.3.4-1/png/pngrutil.c ****    }
1632:fltk-1.3.4-1/png/pngrutil.c **** 
1633:fltk-1.3.4-1/png/pngrutil.c **** 
1634:fltk-1.3.4-1/png/pngrutil.c ****    /* WARNING: this may break if size_t is less than 32 bits; it is assumed
1635:fltk-1.3.4-1/png/pngrutil.c ****     * that the PNG_MAX_MALLOC_64K test is enabled in this case, but this is a
1636:fltk-1.3.4-1/png/pngrutil.c ****     * potential breakage point if the types in pngconf.h aren't exactly right.
1637:fltk-1.3.4-1/png/pngrutil.c ****     */
1638:fltk-1.3.4-1/png/pngrutil.c ****    png_crc_read(png_ptr, buffer, length);
1639:fltk-1.3.4-1/png/pngrutil.c **** 
1640:fltk-1.3.4-1/png/pngrutil.c ****    if (png_crc_finish(png_ptr, skip) != 0)
1641:fltk-1.3.4-1/png/pngrutil.c ****       return;
1642:fltk-1.3.4-1/png/pngrutil.c **** 
1643:fltk-1.3.4-1/png/pngrutil.c ****    buffer[length] = 0;
1644:fltk-1.3.4-1/png/pngrutil.c **** 
1645:fltk-1.3.4-1/png/pngrutil.c ****    for (entry_start = buffer; *entry_start; entry_start++)
1646:fltk-1.3.4-1/png/pngrutil.c ****       /* Empty loop to find end of name */ ;
1647:fltk-1.3.4-1/png/pngrutil.c **** 
1648:fltk-1.3.4-1/png/pngrutil.c ****    ++entry_start;
1649:fltk-1.3.4-1/png/pngrutil.c **** 
1650:fltk-1.3.4-1/png/pngrutil.c ****    /* A sample depth should follow the separator, and we should be on it  */
1651:fltk-1.3.4-1/png/pngrutil.c ****    if (entry_start > buffer + length - 2)
1652:fltk-1.3.4-1/png/pngrutil.c ****    {
1653:fltk-1.3.4-1/png/pngrutil.c ****       png_warning(png_ptr, "malformed sPLT chunk");
1654:fltk-1.3.4-1/png/pngrutil.c ****       return;
1655:fltk-1.3.4-1/png/pngrutil.c ****    }
1656:fltk-1.3.4-1/png/pngrutil.c **** 
1657:fltk-1.3.4-1/png/pngrutil.c ****    new_palette.depth = *entry_start++;
1658:fltk-1.3.4-1/png/pngrutil.c ****    entry_size = (new_palette.depth == 8 ? 6 : 10);
1659:fltk-1.3.4-1/png/pngrutil.c ****    /* This must fit in a png_uint_32 because it is derived from the original
1660:fltk-1.3.4-1/png/pngrutil.c ****     * chunk data length.
1661:fltk-1.3.4-1/png/pngrutil.c ****     */
1662:fltk-1.3.4-1/png/pngrutil.c ****    data_length = length - (png_uint_32)(entry_start - buffer);
1663:fltk-1.3.4-1/png/pngrutil.c **** 
1664:fltk-1.3.4-1/png/pngrutil.c ****    /* Integrity-check the data length */
1665:fltk-1.3.4-1/png/pngrutil.c ****    if ((data_length % entry_size) != 0)
1666:fltk-1.3.4-1/png/pngrutil.c ****    {
1667:fltk-1.3.4-1/png/pngrutil.c ****       png_warning(png_ptr, "sPLT chunk has bad length");
1668:fltk-1.3.4-1/png/pngrutil.c ****       return;
1669:fltk-1.3.4-1/png/pngrutil.c ****    }
1670:fltk-1.3.4-1/png/pngrutil.c **** 
1671:fltk-1.3.4-1/png/pngrutil.c ****    dl = (png_int_32)(data_length / entry_size);
1672:fltk-1.3.4-1/png/pngrutil.c ****    max_dl = PNG_SIZE_MAX / (sizeof (png_sPLT_entry));
1673:fltk-1.3.4-1/png/pngrutil.c **** 
1674:fltk-1.3.4-1/png/pngrutil.c ****    if (dl > max_dl)
1675:fltk-1.3.4-1/png/pngrutil.c ****    {
1676:fltk-1.3.4-1/png/pngrutil.c ****        png_warning(png_ptr, "sPLT chunk too long");
1677:fltk-1.3.4-1/png/pngrutil.c ****        return;
1678:fltk-1.3.4-1/png/pngrutil.c ****    }
1679:fltk-1.3.4-1/png/pngrutil.c **** 
1680:fltk-1.3.4-1/png/pngrutil.c ****    new_palette.nentries = (png_int_32)(data_length / entry_size);
1681:fltk-1.3.4-1/png/pngrutil.c **** 
1682:fltk-1.3.4-1/png/pngrutil.c ****    new_palette.entries = (png_sPLT_entryp)png_malloc_warn(
1683:fltk-1.3.4-1/png/pngrutil.c ****        png_ptr, new_palette.nentries * (sizeof (png_sPLT_entry)));
1684:fltk-1.3.4-1/png/pngrutil.c **** 
1685:fltk-1.3.4-1/png/pngrutil.c ****    if (new_palette.entries == NULL)
1686:fltk-1.3.4-1/png/pngrutil.c ****    {
1687:fltk-1.3.4-1/png/pngrutil.c ****        png_warning(png_ptr, "sPLT chunk requires too much memory");
1688:fltk-1.3.4-1/png/pngrutil.c ****        return;
1689:fltk-1.3.4-1/png/pngrutil.c ****    }
1690:fltk-1.3.4-1/png/pngrutil.c **** 
1691:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_POINTER_INDEXING_SUPPORTED
1692:fltk-1.3.4-1/png/pngrutil.c ****    for (i = 0; i < new_palette.nentries; i++)
1693:fltk-1.3.4-1/png/pngrutil.c ****    {
1694:fltk-1.3.4-1/png/pngrutil.c ****       pp = new_palette.entries + i;
1695:fltk-1.3.4-1/png/pngrutil.c **** 
1696:fltk-1.3.4-1/png/pngrutil.c ****       if (new_palette.depth == 8)
1697:fltk-1.3.4-1/png/pngrutil.c ****       {
1698:fltk-1.3.4-1/png/pngrutil.c ****          pp->red = *entry_start++;
1699:fltk-1.3.4-1/png/pngrutil.c ****          pp->green = *entry_start++;
1700:fltk-1.3.4-1/png/pngrutil.c ****          pp->blue = *entry_start++;
1701:fltk-1.3.4-1/png/pngrutil.c ****          pp->alpha = *entry_start++;
1702:fltk-1.3.4-1/png/pngrutil.c ****       }
1703:fltk-1.3.4-1/png/pngrutil.c **** 
1704:fltk-1.3.4-1/png/pngrutil.c ****       else
1705:fltk-1.3.4-1/png/pngrutil.c ****       {
1706:fltk-1.3.4-1/png/pngrutil.c ****          pp->red   = png_get_uint_16(entry_start); entry_start += 2;
1707:fltk-1.3.4-1/png/pngrutil.c ****          pp->green = png_get_uint_16(entry_start); entry_start += 2;
1708:fltk-1.3.4-1/png/pngrutil.c ****          pp->blue  = png_get_uint_16(entry_start); entry_start += 2;
1709:fltk-1.3.4-1/png/pngrutil.c ****          pp->alpha = png_get_uint_16(entry_start); entry_start += 2;
1710:fltk-1.3.4-1/png/pngrutil.c ****       }
1711:fltk-1.3.4-1/png/pngrutil.c **** 
1712:fltk-1.3.4-1/png/pngrutil.c ****       pp->frequency = png_get_uint_16(entry_start); entry_start += 2;
1713:fltk-1.3.4-1/png/pngrutil.c ****    }
1714:fltk-1.3.4-1/png/pngrutil.c **** #else
1715:fltk-1.3.4-1/png/pngrutil.c ****    pp = new_palette.entries;
1716:fltk-1.3.4-1/png/pngrutil.c **** 
1717:fltk-1.3.4-1/png/pngrutil.c ****    for (i = 0; i < new_palette.nentries; i++)
1718:fltk-1.3.4-1/png/pngrutil.c ****    {
1719:fltk-1.3.4-1/png/pngrutil.c **** 
1720:fltk-1.3.4-1/png/pngrutil.c ****       if (new_palette.depth == 8)
1721:fltk-1.3.4-1/png/pngrutil.c ****       {
1722:fltk-1.3.4-1/png/pngrutil.c ****          pp[i].red   = *entry_start++;
1723:fltk-1.3.4-1/png/pngrutil.c ****          pp[i].green = *entry_start++;
1724:fltk-1.3.4-1/png/pngrutil.c ****          pp[i].blue  = *entry_start++;
1725:fltk-1.3.4-1/png/pngrutil.c ****          pp[i].alpha = *entry_start++;
1726:fltk-1.3.4-1/png/pngrutil.c ****       }
1727:fltk-1.3.4-1/png/pngrutil.c **** 
1728:fltk-1.3.4-1/png/pngrutil.c ****       else
1729:fltk-1.3.4-1/png/pngrutil.c ****       {
1730:fltk-1.3.4-1/png/pngrutil.c ****          pp[i].red   = png_get_uint_16(entry_start); entry_start += 2;
1731:fltk-1.3.4-1/png/pngrutil.c ****          pp[i].green = png_get_uint_16(entry_start); entry_start += 2;
1732:fltk-1.3.4-1/png/pngrutil.c ****          pp[i].blue  = png_get_uint_16(entry_start); entry_start += 2;
1733:fltk-1.3.4-1/png/pngrutil.c ****          pp[i].alpha = png_get_uint_16(entry_start); entry_start += 2;
1734:fltk-1.3.4-1/png/pngrutil.c ****       }
1735:fltk-1.3.4-1/png/pngrutil.c **** 
1736:fltk-1.3.4-1/png/pngrutil.c ****       pp[i].frequency = png_get_uint_16(entry_start); entry_start += 2;
1737:fltk-1.3.4-1/png/pngrutil.c ****    }
1738:fltk-1.3.4-1/png/pngrutil.c **** #endif
1739:fltk-1.3.4-1/png/pngrutil.c **** 
1740:fltk-1.3.4-1/png/pngrutil.c ****    /* Discard all chunk data except the name and stash that */
1741:fltk-1.3.4-1/png/pngrutil.c ****    new_palette.name = (png_charp)buffer;
1742:fltk-1.3.4-1/png/pngrutil.c **** 
1743:fltk-1.3.4-1/png/pngrutil.c ****    png_set_sPLT(png_ptr, info_ptr, &new_palette, 1);
1744:fltk-1.3.4-1/png/pngrutil.c **** 
1745:fltk-1.3.4-1/png/pngrutil.c ****    png_free(png_ptr, new_palette.entries);
1746:fltk-1.3.4-1/png/pngrutil.c **** }
1747:fltk-1.3.4-1/png/pngrutil.c **** #endif /* READ_sPLT */
1748:fltk-1.3.4-1/png/pngrutil.c **** 
1749:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_tRNS_SUPPORTED
1750:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
1751:fltk-1.3.4-1/png/pngrutil.c **** png_handle_tRNS(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)
1752:fltk-1.3.4-1/png/pngrutil.c **** {
1753:fltk-1.3.4-1/png/pngrutil.c ****    png_byte readbuf[PNG_MAX_PALETTE_LENGTH];
1754:fltk-1.3.4-1/png/pngrutil.c **** 
1755:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_handle_tRNS");
1756:fltk-1.3.4-1/png/pngrutil.c **** 
1757:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->mode & PNG_HAVE_IHDR) == 0)
1758:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
1759:fltk-1.3.4-1/png/pngrutil.c **** 
1760:fltk-1.3.4-1/png/pngrutil.c ****    else if ((png_ptr->mode & PNG_HAVE_IDAT) != 0)
1761:fltk-1.3.4-1/png/pngrutil.c ****    {
1762:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
1763:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
1764:fltk-1.3.4-1/png/pngrutil.c ****       return;
1765:fltk-1.3.4-1/png/pngrutil.c ****    }
1766:fltk-1.3.4-1/png/pngrutil.c **** 
1767:fltk-1.3.4-1/png/pngrutil.c ****    else if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_tRNS) != 0)
1768:fltk-1.3.4-1/png/pngrutil.c ****    {
1769:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
1770:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "duplicate");
1771:fltk-1.3.4-1/png/pngrutil.c ****       return;
1772:fltk-1.3.4-1/png/pngrutil.c ****    }
1773:fltk-1.3.4-1/png/pngrutil.c **** 
1774:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->color_type == PNG_COLOR_TYPE_GRAY)
1775:fltk-1.3.4-1/png/pngrutil.c ****    {
1776:fltk-1.3.4-1/png/pngrutil.c ****       png_byte buf[2];
1777:fltk-1.3.4-1/png/pngrutil.c **** 
1778:fltk-1.3.4-1/png/pngrutil.c ****       if (length != 2)
1779:fltk-1.3.4-1/png/pngrutil.c ****       {
1780:fltk-1.3.4-1/png/pngrutil.c ****          png_crc_finish(png_ptr, length);
1781:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_benign_error(png_ptr, "invalid");
1782:fltk-1.3.4-1/png/pngrutil.c ****          return;
1783:fltk-1.3.4-1/png/pngrutil.c ****       }
1784:fltk-1.3.4-1/png/pngrutil.c **** 
1785:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_read(png_ptr, buf, 2);
1786:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->num_trans = 1;
1787:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->trans_color.gray = png_get_uint_16(buf);
1788:fltk-1.3.4-1/png/pngrutil.c ****    }
1789:fltk-1.3.4-1/png/pngrutil.c **** 
1790:fltk-1.3.4-1/png/pngrutil.c ****    else if (png_ptr->color_type == PNG_COLOR_TYPE_RGB)
1791:fltk-1.3.4-1/png/pngrutil.c ****    {
1792:fltk-1.3.4-1/png/pngrutil.c ****       png_byte buf[6];
1793:fltk-1.3.4-1/png/pngrutil.c **** 
1794:fltk-1.3.4-1/png/pngrutil.c ****       if (length != 6)
1795:fltk-1.3.4-1/png/pngrutil.c ****       {
1796:fltk-1.3.4-1/png/pngrutil.c ****          png_crc_finish(png_ptr, length);
1797:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_benign_error(png_ptr, "invalid");
1798:fltk-1.3.4-1/png/pngrutil.c ****          return;
1799:fltk-1.3.4-1/png/pngrutil.c ****       }
1800:fltk-1.3.4-1/png/pngrutil.c **** 
1801:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_read(png_ptr, buf, length);
1802:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->num_trans = 1;
1803:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->trans_color.red = png_get_uint_16(buf);
1804:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->trans_color.green = png_get_uint_16(buf + 2);
1805:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->trans_color.blue = png_get_uint_16(buf + 4);
1806:fltk-1.3.4-1/png/pngrutil.c ****    }
1807:fltk-1.3.4-1/png/pngrutil.c **** 
1808:fltk-1.3.4-1/png/pngrutil.c ****    else if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
1809:fltk-1.3.4-1/png/pngrutil.c ****    {
1810:fltk-1.3.4-1/png/pngrutil.c ****       if ((png_ptr->mode & PNG_HAVE_PLTE) == 0)
1811:fltk-1.3.4-1/png/pngrutil.c ****       {
1812:fltk-1.3.4-1/png/pngrutil.c ****          /* TODO: is this actually an error in the ISO spec? */
1813:fltk-1.3.4-1/png/pngrutil.c ****          png_crc_finish(png_ptr, length);
1814:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_benign_error(png_ptr, "out of place");
1815:fltk-1.3.4-1/png/pngrutil.c ****          return;
1816:fltk-1.3.4-1/png/pngrutil.c ****       }
1817:fltk-1.3.4-1/png/pngrutil.c **** 
1818:fltk-1.3.4-1/png/pngrutil.c ****       if (length > png_ptr->num_palette || length > PNG_MAX_PALETTE_LENGTH ||
1819:fltk-1.3.4-1/png/pngrutil.c ****          length == 0)
1820:fltk-1.3.4-1/png/pngrutil.c ****       {
1821:fltk-1.3.4-1/png/pngrutil.c ****          png_crc_finish(png_ptr, length);
1822:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_benign_error(png_ptr, "invalid");
1823:fltk-1.3.4-1/png/pngrutil.c ****          return;
1824:fltk-1.3.4-1/png/pngrutil.c ****       }
1825:fltk-1.3.4-1/png/pngrutil.c **** 
1826:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_read(png_ptr, readbuf, length);
1827:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->num_trans = (png_uint_16)length;
1828:fltk-1.3.4-1/png/pngrutil.c ****    }
1829:fltk-1.3.4-1/png/pngrutil.c **** 
1830:fltk-1.3.4-1/png/pngrutil.c ****    else
1831:fltk-1.3.4-1/png/pngrutil.c ****    {
1832:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
1833:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid with alpha channel");
1834:fltk-1.3.4-1/png/pngrutil.c ****       return;
1835:fltk-1.3.4-1/png/pngrutil.c ****    }
1836:fltk-1.3.4-1/png/pngrutil.c **** 
1837:fltk-1.3.4-1/png/pngrutil.c ****    if (png_crc_finish(png_ptr, 0) != 0)
1838:fltk-1.3.4-1/png/pngrutil.c ****    {
1839:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->num_trans = 0;
1840:fltk-1.3.4-1/png/pngrutil.c ****       return;
1841:fltk-1.3.4-1/png/pngrutil.c ****    }
1842:fltk-1.3.4-1/png/pngrutil.c **** 
1843:fltk-1.3.4-1/png/pngrutil.c ****    /* TODO: this is a horrible side effect in the palette case because the
1844:fltk-1.3.4-1/png/pngrutil.c ****     * png_struct ends up with a pointer to the tRNS buffer owned by the
1845:fltk-1.3.4-1/png/pngrutil.c ****     * png_info.  Fix this.
1846:fltk-1.3.4-1/png/pngrutil.c ****     */
1847:fltk-1.3.4-1/png/pngrutil.c ****    png_set_tRNS(png_ptr, info_ptr, readbuf, png_ptr->num_trans,
1848:fltk-1.3.4-1/png/pngrutil.c ****        &(png_ptr->trans_color));
1849:fltk-1.3.4-1/png/pngrutil.c **** }
1850:fltk-1.3.4-1/png/pngrutil.c **** #endif
1851:fltk-1.3.4-1/png/pngrutil.c **** 
1852:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_bKGD_SUPPORTED
1853:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
1854:fltk-1.3.4-1/png/pngrutil.c **** png_handle_bKGD(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)
1855:fltk-1.3.4-1/png/pngrutil.c **** {
1856:fltk-1.3.4-1/png/pngrutil.c ****    unsigned int truelen;
1857:fltk-1.3.4-1/png/pngrutil.c ****    png_byte buf[6];
1858:fltk-1.3.4-1/png/pngrutil.c ****    png_color_16 background;
1859:fltk-1.3.4-1/png/pngrutil.c **** 
1860:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_handle_bKGD");
1861:fltk-1.3.4-1/png/pngrutil.c **** 
1862:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->mode & PNG_HAVE_IHDR) == 0)
1863:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
1864:fltk-1.3.4-1/png/pngrutil.c **** 
1865:fltk-1.3.4-1/png/pngrutil.c ****    else if ((png_ptr->mode & PNG_HAVE_IDAT) != 0 ||
1866:fltk-1.3.4-1/png/pngrutil.c ****        (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE &&
1867:fltk-1.3.4-1/png/pngrutil.c ****        (png_ptr->mode & PNG_HAVE_PLTE) == 0))
1868:fltk-1.3.4-1/png/pngrutil.c ****    {
1869:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
1870:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
1871:fltk-1.3.4-1/png/pngrutil.c ****       return;
1872:fltk-1.3.4-1/png/pngrutil.c ****    }
1873:fltk-1.3.4-1/png/pngrutil.c **** 
1874:fltk-1.3.4-1/png/pngrutil.c ****    else if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_bKGD) != 0)
1875:fltk-1.3.4-1/png/pngrutil.c ****    {
1876:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
1877:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "duplicate");
1878:fltk-1.3.4-1/png/pngrutil.c ****       return;
1879:fltk-1.3.4-1/png/pngrutil.c ****    }
1880:fltk-1.3.4-1/png/pngrutil.c **** 
1881:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
1882:fltk-1.3.4-1/png/pngrutil.c ****       truelen = 1;
1883:fltk-1.3.4-1/png/pngrutil.c **** 
1884:fltk-1.3.4-1/png/pngrutil.c ****    else if ((png_ptr->color_type & PNG_COLOR_MASK_COLOR) != 0)
1885:fltk-1.3.4-1/png/pngrutil.c ****       truelen = 6;
1886:fltk-1.3.4-1/png/pngrutil.c **** 
1887:fltk-1.3.4-1/png/pngrutil.c ****    else
1888:fltk-1.3.4-1/png/pngrutil.c ****       truelen = 2;
1889:fltk-1.3.4-1/png/pngrutil.c **** 
1890:fltk-1.3.4-1/png/pngrutil.c ****    if (length != truelen)
1891:fltk-1.3.4-1/png/pngrutil.c ****    {
1892:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
1893:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid");
1894:fltk-1.3.4-1/png/pngrutil.c ****       return;
1895:fltk-1.3.4-1/png/pngrutil.c ****    }
1896:fltk-1.3.4-1/png/pngrutil.c **** 
1897:fltk-1.3.4-1/png/pngrutil.c ****    png_crc_read(png_ptr, buf, truelen);
1898:fltk-1.3.4-1/png/pngrutil.c **** 
1899:fltk-1.3.4-1/png/pngrutil.c ****    if (png_crc_finish(png_ptr, 0) != 0)
1900:fltk-1.3.4-1/png/pngrutil.c ****       return;
1901:fltk-1.3.4-1/png/pngrutil.c **** 
1902:fltk-1.3.4-1/png/pngrutil.c ****    /* We convert the index value into RGB components so that we can allow
1903:fltk-1.3.4-1/png/pngrutil.c ****     * arbitrary RGB values for background when we have transparency, and
1904:fltk-1.3.4-1/png/pngrutil.c ****     * so it is easy to determine the RGB values of the background color
1905:fltk-1.3.4-1/png/pngrutil.c ****     * from the info_ptr struct.
1906:fltk-1.3.4-1/png/pngrutil.c ****     */
1907:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
1908:fltk-1.3.4-1/png/pngrutil.c ****    {
1909:fltk-1.3.4-1/png/pngrutil.c ****       background.index = buf[0];
1910:fltk-1.3.4-1/png/pngrutil.c **** 
1911:fltk-1.3.4-1/png/pngrutil.c ****       if (info_ptr != NULL && info_ptr->num_palette != 0)
1912:fltk-1.3.4-1/png/pngrutil.c ****       {
1913:fltk-1.3.4-1/png/pngrutil.c ****          if (buf[0] >= info_ptr->num_palette)
1914:fltk-1.3.4-1/png/pngrutil.c ****          {
1915:fltk-1.3.4-1/png/pngrutil.c ****             png_chunk_benign_error(png_ptr, "invalid index");
1916:fltk-1.3.4-1/png/pngrutil.c ****             return;
1917:fltk-1.3.4-1/png/pngrutil.c ****          }
1918:fltk-1.3.4-1/png/pngrutil.c **** 
1919:fltk-1.3.4-1/png/pngrutil.c ****          background.red = (png_uint_16)png_ptr->palette[buf[0]].red;
1920:fltk-1.3.4-1/png/pngrutil.c ****          background.green = (png_uint_16)png_ptr->palette[buf[0]].green;
1921:fltk-1.3.4-1/png/pngrutil.c ****          background.blue = (png_uint_16)png_ptr->palette[buf[0]].blue;
1922:fltk-1.3.4-1/png/pngrutil.c ****       }
1923:fltk-1.3.4-1/png/pngrutil.c **** 
1924:fltk-1.3.4-1/png/pngrutil.c ****       else
1925:fltk-1.3.4-1/png/pngrutil.c ****          background.red = background.green = background.blue = 0;
1926:fltk-1.3.4-1/png/pngrutil.c **** 
1927:fltk-1.3.4-1/png/pngrutil.c ****       background.gray = 0;
1928:fltk-1.3.4-1/png/pngrutil.c ****    }
1929:fltk-1.3.4-1/png/pngrutil.c **** 
1930:fltk-1.3.4-1/png/pngrutil.c ****    else if ((png_ptr->color_type & PNG_COLOR_MASK_COLOR) == 0) /* GRAY */
1931:fltk-1.3.4-1/png/pngrutil.c ****    {
1932:fltk-1.3.4-1/png/pngrutil.c ****       background.index = 0;
1933:fltk-1.3.4-1/png/pngrutil.c ****       background.red =
1934:fltk-1.3.4-1/png/pngrutil.c ****       background.green =
1935:fltk-1.3.4-1/png/pngrutil.c ****       background.blue =
1936:fltk-1.3.4-1/png/pngrutil.c ****       background.gray = png_get_uint_16(buf);
1937:fltk-1.3.4-1/png/pngrutil.c ****    }
1938:fltk-1.3.4-1/png/pngrutil.c **** 
1939:fltk-1.3.4-1/png/pngrutil.c ****    else
1940:fltk-1.3.4-1/png/pngrutil.c ****    {
1941:fltk-1.3.4-1/png/pngrutil.c ****       background.index = 0;
1942:fltk-1.3.4-1/png/pngrutil.c ****       background.red = png_get_uint_16(buf);
1943:fltk-1.3.4-1/png/pngrutil.c ****       background.green = png_get_uint_16(buf + 2);
1944:fltk-1.3.4-1/png/pngrutil.c ****       background.blue = png_get_uint_16(buf + 4);
1945:fltk-1.3.4-1/png/pngrutil.c ****       background.gray = 0;
1946:fltk-1.3.4-1/png/pngrutil.c ****    }
1947:fltk-1.3.4-1/png/pngrutil.c **** 
1948:fltk-1.3.4-1/png/pngrutil.c ****    png_set_bKGD(png_ptr, info_ptr, &background);
1949:fltk-1.3.4-1/png/pngrutil.c **** }
1950:fltk-1.3.4-1/png/pngrutil.c **** #endif
1951:fltk-1.3.4-1/png/pngrutil.c **** 
1952:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_hIST_SUPPORTED
1953:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
1954:fltk-1.3.4-1/png/pngrutil.c **** png_handle_hIST(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)
1955:fltk-1.3.4-1/png/pngrutil.c **** {
1956:fltk-1.3.4-1/png/pngrutil.c ****    unsigned int num, i;
1957:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_16 readbuf[PNG_MAX_PALETTE_LENGTH];
1958:fltk-1.3.4-1/png/pngrutil.c **** 
1959:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_handle_hIST");
1960:fltk-1.3.4-1/png/pngrutil.c **** 
1961:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->mode & PNG_HAVE_IHDR) == 0)
1962:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
1963:fltk-1.3.4-1/png/pngrutil.c **** 
1964:fltk-1.3.4-1/png/pngrutil.c ****    else if ((png_ptr->mode & PNG_HAVE_IDAT) != 0 ||
1965:fltk-1.3.4-1/png/pngrutil.c ****        (png_ptr->mode & PNG_HAVE_PLTE) == 0)
1966:fltk-1.3.4-1/png/pngrutil.c ****    {
1967:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
1968:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
1969:fltk-1.3.4-1/png/pngrutil.c ****       return;
1970:fltk-1.3.4-1/png/pngrutil.c ****    }
1971:fltk-1.3.4-1/png/pngrutil.c **** 
1972:fltk-1.3.4-1/png/pngrutil.c ****    else if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_hIST) != 0)
1973:fltk-1.3.4-1/png/pngrutil.c ****    {
1974:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
1975:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "duplicate");
1976:fltk-1.3.4-1/png/pngrutil.c ****       return;
1977:fltk-1.3.4-1/png/pngrutil.c ****    }
1978:fltk-1.3.4-1/png/pngrutil.c **** 
1979:fltk-1.3.4-1/png/pngrutil.c ****    num = length / 2 ;
1980:fltk-1.3.4-1/png/pngrutil.c **** 
1981:fltk-1.3.4-1/png/pngrutil.c ****    if (num != png_ptr->num_palette || num > PNG_MAX_PALETTE_LENGTH)
1982:fltk-1.3.4-1/png/pngrutil.c ****    {
1983:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
1984:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid");
1985:fltk-1.3.4-1/png/pngrutil.c ****       return;
1986:fltk-1.3.4-1/png/pngrutil.c ****    }
1987:fltk-1.3.4-1/png/pngrutil.c **** 
1988:fltk-1.3.4-1/png/pngrutil.c ****    for (i = 0; i < num; i++)
1989:fltk-1.3.4-1/png/pngrutil.c ****    {
1990:fltk-1.3.4-1/png/pngrutil.c ****       png_byte buf[2];
1991:fltk-1.3.4-1/png/pngrutil.c **** 
1992:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_read(png_ptr, buf, 2);
1993:fltk-1.3.4-1/png/pngrutil.c ****       readbuf[i] = png_get_uint_16(buf);
1994:fltk-1.3.4-1/png/pngrutil.c ****    }
1995:fltk-1.3.4-1/png/pngrutil.c **** 
1996:fltk-1.3.4-1/png/pngrutil.c ****    if (png_crc_finish(png_ptr, 0) != 0)
1997:fltk-1.3.4-1/png/pngrutil.c ****       return;
1998:fltk-1.3.4-1/png/pngrutil.c **** 
1999:fltk-1.3.4-1/png/pngrutil.c ****    png_set_hIST(png_ptr, info_ptr, readbuf);
2000:fltk-1.3.4-1/png/pngrutil.c **** }
2001:fltk-1.3.4-1/png/pngrutil.c **** #endif
2002:fltk-1.3.4-1/png/pngrutil.c **** 
2003:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_pHYs_SUPPORTED
2004:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
2005:fltk-1.3.4-1/png/pngrutil.c **** png_handle_pHYs(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)
2006:fltk-1.3.4-1/png/pngrutil.c **** {
2007:fltk-1.3.4-1/png/pngrutil.c ****    png_byte buf[9];
2008:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32 res_x, res_y;
2009:fltk-1.3.4-1/png/pngrutil.c ****    int unit_type;
2010:fltk-1.3.4-1/png/pngrutil.c **** 
2011:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_handle_pHYs");
2012:fltk-1.3.4-1/png/pngrutil.c **** 
2013:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->mode & PNG_HAVE_IHDR) == 0)
2014:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
2015:fltk-1.3.4-1/png/pngrutil.c **** 
2016:fltk-1.3.4-1/png/pngrutil.c ****    else if ((png_ptr->mode & PNG_HAVE_IDAT) != 0)
2017:fltk-1.3.4-1/png/pngrutil.c ****    {
2018:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
2019:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
2020:fltk-1.3.4-1/png/pngrutil.c ****       return;
2021:fltk-1.3.4-1/png/pngrutil.c ****    }
2022:fltk-1.3.4-1/png/pngrutil.c **** 
2023:fltk-1.3.4-1/png/pngrutil.c ****    else if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_pHYs) != 0)
2024:fltk-1.3.4-1/png/pngrutil.c ****    {
2025:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
2026:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "duplicate");
2027:fltk-1.3.4-1/png/pngrutil.c ****       return;
2028:fltk-1.3.4-1/png/pngrutil.c ****    }
2029:fltk-1.3.4-1/png/pngrutil.c **** 
2030:fltk-1.3.4-1/png/pngrutil.c ****    if (length != 9)
2031:fltk-1.3.4-1/png/pngrutil.c ****    {
2032:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
2033:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid");
2034:fltk-1.3.4-1/png/pngrutil.c ****       return;
2035:fltk-1.3.4-1/png/pngrutil.c ****    }
2036:fltk-1.3.4-1/png/pngrutil.c **** 
2037:fltk-1.3.4-1/png/pngrutil.c ****    png_crc_read(png_ptr, buf, 9);
2038:fltk-1.3.4-1/png/pngrutil.c **** 
2039:fltk-1.3.4-1/png/pngrutil.c ****    if (png_crc_finish(png_ptr, 0) != 0)
2040:fltk-1.3.4-1/png/pngrutil.c ****       return;
2041:fltk-1.3.4-1/png/pngrutil.c **** 
2042:fltk-1.3.4-1/png/pngrutil.c ****    res_x = png_get_uint_32(buf);
2043:fltk-1.3.4-1/png/pngrutil.c ****    res_y = png_get_uint_32(buf + 4);
2044:fltk-1.3.4-1/png/pngrutil.c ****    unit_type = buf[8];
2045:fltk-1.3.4-1/png/pngrutil.c ****    png_set_pHYs(png_ptr, info_ptr, res_x, res_y, unit_type);
2046:fltk-1.3.4-1/png/pngrutil.c **** }
2047:fltk-1.3.4-1/png/pngrutil.c **** #endif
2048:fltk-1.3.4-1/png/pngrutil.c **** 
2049:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_oFFs_SUPPORTED
2050:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
2051:fltk-1.3.4-1/png/pngrutil.c **** png_handle_oFFs(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)
2052:fltk-1.3.4-1/png/pngrutil.c **** {
2053:fltk-1.3.4-1/png/pngrutil.c ****    png_byte buf[9];
2054:fltk-1.3.4-1/png/pngrutil.c ****    png_int_32 offset_x, offset_y;
2055:fltk-1.3.4-1/png/pngrutil.c ****    int unit_type;
2056:fltk-1.3.4-1/png/pngrutil.c **** 
2057:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_handle_oFFs");
2058:fltk-1.3.4-1/png/pngrutil.c **** 
2059:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->mode & PNG_HAVE_IHDR) == 0)
2060:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
2061:fltk-1.3.4-1/png/pngrutil.c **** 
2062:fltk-1.3.4-1/png/pngrutil.c ****    else if ((png_ptr->mode & PNG_HAVE_IDAT) != 0)
2063:fltk-1.3.4-1/png/pngrutil.c ****    {
2064:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
2065:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
2066:fltk-1.3.4-1/png/pngrutil.c ****       return;
2067:fltk-1.3.4-1/png/pngrutil.c ****    }
2068:fltk-1.3.4-1/png/pngrutil.c **** 
2069:fltk-1.3.4-1/png/pngrutil.c ****    else if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_oFFs) != 0)
2070:fltk-1.3.4-1/png/pngrutil.c ****    {
2071:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
2072:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "duplicate");
2073:fltk-1.3.4-1/png/pngrutil.c ****       return;
2074:fltk-1.3.4-1/png/pngrutil.c ****    }
2075:fltk-1.3.4-1/png/pngrutil.c **** 
2076:fltk-1.3.4-1/png/pngrutil.c ****    if (length != 9)
2077:fltk-1.3.4-1/png/pngrutil.c ****    {
2078:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
2079:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid");
2080:fltk-1.3.4-1/png/pngrutil.c ****       return;
2081:fltk-1.3.4-1/png/pngrutil.c ****    }
2082:fltk-1.3.4-1/png/pngrutil.c **** 
2083:fltk-1.3.4-1/png/pngrutil.c ****    png_crc_read(png_ptr, buf, 9);
2084:fltk-1.3.4-1/png/pngrutil.c **** 
2085:fltk-1.3.4-1/png/pngrutil.c ****    if (png_crc_finish(png_ptr, 0) != 0)
2086:fltk-1.3.4-1/png/pngrutil.c ****       return;
2087:fltk-1.3.4-1/png/pngrutil.c **** 
2088:fltk-1.3.4-1/png/pngrutil.c ****    offset_x = png_get_int_32(buf);
2089:fltk-1.3.4-1/png/pngrutil.c ****    offset_y = png_get_int_32(buf + 4);
2090:fltk-1.3.4-1/png/pngrutil.c ****    unit_type = buf[8];
2091:fltk-1.3.4-1/png/pngrutil.c ****    png_set_oFFs(png_ptr, info_ptr, offset_x, offset_y, unit_type);
2092:fltk-1.3.4-1/png/pngrutil.c **** }
2093:fltk-1.3.4-1/png/pngrutil.c **** #endif
2094:fltk-1.3.4-1/png/pngrutil.c **** 
2095:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_pCAL_SUPPORTED
2096:fltk-1.3.4-1/png/pngrutil.c **** /* Read the pCAL chunk (described in the PNG Extensions document) */
2097:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
2098:fltk-1.3.4-1/png/pngrutil.c **** png_handle_pCAL(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)
2099:fltk-1.3.4-1/png/pngrutil.c **** {
2100:fltk-1.3.4-1/png/pngrutil.c ****    png_int_32 X0, X1;
2101:fltk-1.3.4-1/png/pngrutil.c ****    png_byte type, nparams;
2102:fltk-1.3.4-1/png/pngrutil.c ****    png_bytep buffer, buf, units, endptr;
2103:fltk-1.3.4-1/png/pngrutil.c ****    png_charpp params;
2104:fltk-1.3.4-1/png/pngrutil.c ****    int i;
2105:fltk-1.3.4-1/png/pngrutil.c **** 
2106:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_handle_pCAL");
2107:fltk-1.3.4-1/png/pngrutil.c **** 
2108:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->mode & PNG_HAVE_IHDR) == 0)
2109:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
2110:fltk-1.3.4-1/png/pngrutil.c **** 
2111:fltk-1.3.4-1/png/pngrutil.c ****    else if ((png_ptr->mode & PNG_HAVE_IDAT) != 0)
2112:fltk-1.3.4-1/png/pngrutil.c ****    {
2113:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
2114:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
2115:fltk-1.3.4-1/png/pngrutil.c ****       return;
2116:fltk-1.3.4-1/png/pngrutil.c ****    }
2117:fltk-1.3.4-1/png/pngrutil.c **** 
2118:fltk-1.3.4-1/png/pngrutil.c ****    else if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_pCAL) != 0)
2119:fltk-1.3.4-1/png/pngrutil.c ****    {
2120:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
2121:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "duplicate");
2122:fltk-1.3.4-1/png/pngrutil.c ****       return;
2123:fltk-1.3.4-1/png/pngrutil.c ****    }
2124:fltk-1.3.4-1/png/pngrutil.c **** 
2125:fltk-1.3.4-1/png/pngrutil.c ****    png_debug1(2, "Allocating and reading pCAL chunk data (%u bytes)",
2126:fltk-1.3.4-1/png/pngrutil.c ****        length + 1);
2127:fltk-1.3.4-1/png/pngrutil.c **** 
2128:fltk-1.3.4-1/png/pngrutil.c ****    buffer = png_read_buffer(png_ptr, length+1, 2/*silent*/);
2129:fltk-1.3.4-1/png/pngrutil.c **** 
2130:fltk-1.3.4-1/png/pngrutil.c ****    if (buffer == NULL)
2131:fltk-1.3.4-1/png/pngrutil.c ****    {
2132:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
2133:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of memory");
2134:fltk-1.3.4-1/png/pngrutil.c ****       return;
2135:fltk-1.3.4-1/png/pngrutil.c ****    }
2136:fltk-1.3.4-1/png/pngrutil.c **** 
2137:fltk-1.3.4-1/png/pngrutil.c ****    png_crc_read(png_ptr, buffer, length);
2138:fltk-1.3.4-1/png/pngrutil.c **** 
2139:fltk-1.3.4-1/png/pngrutil.c ****    if (png_crc_finish(png_ptr, 0) != 0)
2140:fltk-1.3.4-1/png/pngrutil.c ****       return;
2141:fltk-1.3.4-1/png/pngrutil.c **** 
2142:fltk-1.3.4-1/png/pngrutil.c ****    buffer[length] = 0; /* Null terminate the last string */
2143:fltk-1.3.4-1/png/pngrutil.c **** 
2144:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(3, "Finding end of pCAL purpose string");
2145:fltk-1.3.4-1/png/pngrutil.c ****    for (buf = buffer; *buf; buf++)
2146:fltk-1.3.4-1/png/pngrutil.c ****       /* Empty loop */ ;
2147:fltk-1.3.4-1/png/pngrutil.c **** 
2148:fltk-1.3.4-1/png/pngrutil.c ****    endptr = buffer + length;
2149:fltk-1.3.4-1/png/pngrutil.c **** 
2150:fltk-1.3.4-1/png/pngrutil.c ****    /* We need to have at least 12 bytes after the purpose string
2151:fltk-1.3.4-1/png/pngrutil.c ****     * in order to get the parameter information.
2152:fltk-1.3.4-1/png/pngrutil.c ****     */
2153:fltk-1.3.4-1/png/pngrutil.c ****    if (endptr <= buf + 12)
2154:fltk-1.3.4-1/png/pngrutil.c ****    {
2155:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid");
2156:fltk-1.3.4-1/png/pngrutil.c ****       return;
2157:fltk-1.3.4-1/png/pngrutil.c ****    }
2158:fltk-1.3.4-1/png/pngrutil.c **** 
2159:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(3, "Reading pCAL X0, X1, type, nparams, and units");
2160:fltk-1.3.4-1/png/pngrutil.c ****    X0 = png_get_int_32((png_bytep)buf+1);
2161:fltk-1.3.4-1/png/pngrutil.c ****    X1 = png_get_int_32((png_bytep)buf+5);
2162:fltk-1.3.4-1/png/pngrutil.c ****    type = buf[9];
2163:fltk-1.3.4-1/png/pngrutil.c ****    nparams = buf[10];
2164:fltk-1.3.4-1/png/pngrutil.c ****    units = buf + 11;
2165:fltk-1.3.4-1/png/pngrutil.c **** 
2166:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(3, "Checking pCAL equation type and number of parameters");
2167:fltk-1.3.4-1/png/pngrutil.c ****    /* Check that we have the right number of parameters for known
2168:fltk-1.3.4-1/png/pngrutil.c ****     * equation types.
2169:fltk-1.3.4-1/png/pngrutil.c ****     */
2170:fltk-1.3.4-1/png/pngrutil.c ****    if ((type == PNG_EQUATION_LINEAR && nparams != 2) ||
2171:fltk-1.3.4-1/png/pngrutil.c ****        (type == PNG_EQUATION_BASE_E && nparams != 3) ||
2172:fltk-1.3.4-1/png/pngrutil.c ****        (type == PNG_EQUATION_ARBITRARY && nparams != 3) ||
2173:fltk-1.3.4-1/png/pngrutil.c ****        (type == PNG_EQUATION_HYPERBOLIC && nparams != 4))
2174:fltk-1.3.4-1/png/pngrutil.c ****    {
2175:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid parameter count");
2176:fltk-1.3.4-1/png/pngrutil.c ****       return;
2177:fltk-1.3.4-1/png/pngrutil.c ****    }
2178:fltk-1.3.4-1/png/pngrutil.c **** 
2179:fltk-1.3.4-1/png/pngrutil.c ****    else if (type >= PNG_EQUATION_LAST)
2180:fltk-1.3.4-1/png/pngrutil.c ****    {
2181:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "unrecognized equation type");
2182:fltk-1.3.4-1/png/pngrutil.c ****    }
2183:fltk-1.3.4-1/png/pngrutil.c **** 
2184:fltk-1.3.4-1/png/pngrutil.c ****    for (buf = units; *buf; buf++)
2185:fltk-1.3.4-1/png/pngrutil.c ****       /* Empty loop to move past the units string. */ ;
2186:fltk-1.3.4-1/png/pngrutil.c **** 
2187:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(3, "Allocating pCAL parameters array");
2188:fltk-1.3.4-1/png/pngrutil.c **** 
2189:fltk-1.3.4-1/png/pngrutil.c ****    params = png_voidcast(png_charpp, png_malloc_warn(png_ptr,
2190:fltk-1.3.4-1/png/pngrutil.c ****        nparams * (sizeof (png_charp))));
2191:fltk-1.3.4-1/png/pngrutil.c **** 
2192:fltk-1.3.4-1/png/pngrutil.c ****    if (params == NULL)
2193:fltk-1.3.4-1/png/pngrutil.c ****    {
2194:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of memory");
2195:fltk-1.3.4-1/png/pngrutil.c ****       return;
2196:fltk-1.3.4-1/png/pngrutil.c ****    }
2197:fltk-1.3.4-1/png/pngrutil.c **** 
2198:fltk-1.3.4-1/png/pngrutil.c ****    /* Get pointers to the start of each parameter string. */
2199:fltk-1.3.4-1/png/pngrutil.c ****    for (i = 0; i < nparams; i++)
2200:fltk-1.3.4-1/png/pngrutil.c ****    {
2201:fltk-1.3.4-1/png/pngrutil.c ****       buf++; /* Skip the null string terminator from previous parameter. */
2202:fltk-1.3.4-1/png/pngrutil.c **** 
2203:fltk-1.3.4-1/png/pngrutil.c ****       png_debug1(3, "Reading pCAL parameter %d", i);
2204:fltk-1.3.4-1/png/pngrutil.c **** 
2205:fltk-1.3.4-1/png/pngrutil.c ****       for (params[i] = (png_charp)buf; buf <= endptr && *buf != 0; buf++)
2206:fltk-1.3.4-1/png/pngrutil.c ****          /* Empty loop to move past each parameter string */ ;
2207:fltk-1.3.4-1/png/pngrutil.c **** 
2208:fltk-1.3.4-1/png/pngrutil.c ****       /* Make sure we haven't run out of data yet */
2209:fltk-1.3.4-1/png/pngrutil.c ****       if (buf > endptr)
2210:fltk-1.3.4-1/png/pngrutil.c ****       {
2211:fltk-1.3.4-1/png/pngrutil.c ****          png_free(png_ptr, params);
2212:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_benign_error(png_ptr, "invalid data");
2213:fltk-1.3.4-1/png/pngrutil.c ****          return;
2214:fltk-1.3.4-1/png/pngrutil.c ****       }
2215:fltk-1.3.4-1/png/pngrutil.c ****    }
2216:fltk-1.3.4-1/png/pngrutil.c **** 
2217:fltk-1.3.4-1/png/pngrutil.c ****    png_set_pCAL(png_ptr, info_ptr, (png_charp)buffer, X0, X1, type, nparams,
2218:fltk-1.3.4-1/png/pngrutil.c ****       (png_charp)units, params);
2219:fltk-1.3.4-1/png/pngrutil.c **** 
2220:fltk-1.3.4-1/png/pngrutil.c ****    png_free(png_ptr, params);
2221:fltk-1.3.4-1/png/pngrutil.c **** }
2222:fltk-1.3.4-1/png/pngrutil.c **** #endif
2223:fltk-1.3.4-1/png/pngrutil.c **** 
2224:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_sCAL_SUPPORTED
2225:fltk-1.3.4-1/png/pngrutil.c **** /* Read the sCAL chunk */
2226:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
2227:fltk-1.3.4-1/png/pngrutil.c **** png_handle_sCAL(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)
2228:fltk-1.3.4-1/png/pngrutil.c **** {
2229:fltk-1.3.4-1/png/pngrutil.c ****    png_bytep buffer;
2230:fltk-1.3.4-1/png/pngrutil.c ****    png_size_t i;
2231:fltk-1.3.4-1/png/pngrutil.c ****    int state;
2232:fltk-1.3.4-1/png/pngrutil.c **** 
2233:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_handle_sCAL");
2234:fltk-1.3.4-1/png/pngrutil.c **** 
2235:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->mode & PNG_HAVE_IHDR) == 0)
2236:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
2237:fltk-1.3.4-1/png/pngrutil.c **** 
2238:fltk-1.3.4-1/png/pngrutil.c ****    else if ((png_ptr->mode & PNG_HAVE_IDAT) != 0)
2239:fltk-1.3.4-1/png/pngrutil.c ****    {
2240:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
2241:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
2242:fltk-1.3.4-1/png/pngrutil.c ****       return;
2243:fltk-1.3.4-1/png/pngrutil.c ****    }
2244:fltk-1.3.4-1/png/pngrutil.c **** 
2245:fltk-1.3.4-1/png/pngrutil.c ****    else if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_sCAL) != 0)
2246:fltk-1.3.4-1/png/pngrutil.c ****    {
2247:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
2248:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "duplicate");
2249:fltk-1.3.4-1/png/pngrutil.c ****       return;
2250:fltk-1.3.4-1/png/pngrutil.c ****    }
2251:fltk-1.3.4-1/png/pngrutil.c **** 
2252:fltk-1.3.4-1/png/pngrutil.c ****    /* Need unit type, width, \0, height: minimum 4 bytes */
2253:fltk-1.3.4-1/png/pngrutil.c ****    else if (length < 4)
2254:fltk-1.3.4-1/png/pngrutil.c ****    {
2255:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
2256:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid");
2257:fltk-1.3.4-1/png/pngrutil.c ****       return;
2258:fltk-1.3.4-1/png/pngrutil.c ****    }
2259:fltk-1.3.4-1/png/pngrutil.c **** 
2260:fltk-1.3.4-1/png/pngrutil.c ****    png_debug1(2, "Allocating and reading sCAL chunk data (%u bytes)",
2261:fltk-1.3.4-1/png/pngrutil.c ****       length + 1);
2262:fltk-1.3.4-1/png/pngrutil.c **** 
2263:fltk-1.3.4-1/png/pngrutil.c ****    buffer = png_read_buffer(png_ptr, length+1, 2/*silent*/);
2264:fltk-1.3.4-1/png/pngrutil.c **** 
2265:fltk-1.3.4-1/png/pngrutil.c ****    if (buffer == NULL)
2266:fltk-1.3.4-1/png/pngrutil.c ****    {
2267:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of memory");
2268:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
2269:fltk-1.3.4-1/png/pngrutil.c ****       return;
2270:fltk-1.3.4-1/png/pngrutil.c ****    }
2271:fltk-1.3.4-1/png/pngrutil.c **** 
2272:fltk-1.3.4-1/png/pngrutil.c ****    png_crc_read(png_ptr, buffer, length);
2273:fltk-1.3.4-1/png/pngrutil.c ****    buffer[length] = 0; /* Null terminate the last string */
2274:fltk-1.3.4-1/png/pngrutil.c **** 
2275:fltk-1.3.4-1/png/pngrutil.c ****    if (png_crc_finish(png_ptr, 0) != 0)
2276:fltk-1.3.4-1/png/pngrutil.c ****       return;
2277:fltk-1.3.4-1/png/pngrutil.c **** 
2278:fltk-1.3.4-1/png/pngrutil.c ****    /* Validate the unit. */
2279:fltk-1.3.4-1/png/pngrutil.c ****    if (buffer[0] != 1 && buffer[0] != 2)
2280:fltk-1.3.4-1/png/pngrutil.c ****    {
2281:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid unit");
2282:fltk-1.3.4-1/png/pngrutil.c ****       return;
2283:fltk-1.3.4-1/png/pngrutil.c ****    }
2284:fltk-1.3.4-1/png/pngrutil.c **** 
2285:fltk-1.3.4-1/png/pngrutil.c ****    /* Validate the ASCII numbers, need two ASCII numbers separated by
2286:fltk-1.3.4-1/png/pngrutil.c ****     * a '\0' and they need to fit exactly in the chunk data.
2287:fltk-1.3.4-1/png/pngrutil.c ****     */
2288:fltk-1.3.4-1/png/pngrutil.c ****    i = 1;
2289:fltk-1.3.4-1/png/pngrutil.c ****    state = 0;
2290:fltk-1.3.4-1/png/pngrutil.c **** 
2291:fltk-1.3.4-1/png/pngrutil.c ****    if (png_check_fp_number((png_const_charp)buffer, length, &state, &i) == 0 ||
2292:fltk-1.3.4-1/png/pngrutil.c ****        i >= length || buffer[i++] != 0)
2293:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "bad width format");
2294:fltk-1.3.4-1/png/pngrutil.c **** 
2295:fltk-1.3.4-1/png/pngrutil.c ****    else if (PNG_FP_IS_POSITIVE(state) == 0)
2296:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "non-positive width");
2297:fltk-1.3.4-1/png/pngrutil.c **** 
2298:fltk-1.3.4-1/png/pngrutil.c ****    else
2299:fltk-1.3.4-1/png/pngrutil.c ****    {
2300:fltk-1.3.4-1/png/pngrutil.c ****       png_size_t heighti = i;
2301:fltk-1.3.4-1/png/pngrutil.c **** 
2302:fltk-1.3.4-1/png/pngrutil.c ****       state = 0;
2303:fltk-1.3.4-1/png/pngrutil.c ****       if (png_check_fp_number((png_const_charp)buffer, length,
2304:fltk-1.3.4-1/png/pngrutil.c ****           &state, &i) == 0 || i != length)
2305:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_benign_error(png_ptr, "bad height format");
2306:fltk-1.3.4-1/png/pngrutil.c **** 
2307:fltk-1.3.4-1/png/pngrutil.c ****       else if (PNG_FP_IS_POSITIVE(state) == 0)
2308:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_benign_error(png_ptr, "non-positive height");
2309:fltk-1.3.4-1/png/pngrutil.c **** 
2310:fltk-1.3.4-1/png/pngrutil.c ****       else
2311:fltk-1.3.4-1/png/pngrutil.c ****          /* This is the (only) success case. */
2312:fltk-1.3.4-1/png/pngrutil.c ****          png_set_sCAL_s(png_ptr, info_ptr, buffer[0],
2313:fltk-1.3.4-1/png/pngrutil.c ****             (png_charp)buffer+1, (png_charp)buffer+heighti);
2314:fltk-1.3.4-1/png/pngrutil.c ****    }
2315:fltk-1.3.4-1/png/pngrutil.c **** }
2316:fltk-1.3.4-1/png/pngrutil.c **** #endif
2317:fltk-1.3.4-1/png/pngrutil.c **** 
2318:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_tIME_SUPPORTED
2319:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
2320:fltk-1.3.4-1/png/pngrutil.c **** png_handle_tIME(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)
2321:fltk-1.3.4-1/png/pngrutil.c **** {
2322:fltk-1.3.4-1/png/pngrutil.c ****    png_byte buf[7];
2323:fltk-1.3.4-1/png/pngrutil.c ****    png_time mod_time;
2324:fltk-1.3.4-1/png/pngrutil.c **** 
2325:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_handle_tIME");
2326:fltk-1.3.4-1/png/pngrutil.c **** 
2327:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->mode & PNG_HAVE_IHDR) == 0)
2328:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
2329:fltk-1.3.4-1/png/pngrutil.c **** 
2330:fltk-1.3.4-1/png/pngrutil.c ****    else if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_tIME) != 0)
2331:fltk-1.3.4-1/png/pngrutil.c ****    {
2332:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
2333:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "duplicate");
2334:fltk-1.3.4-1/png/pngrutil.c ****       return;
2335:fltk-1.3.4-1/png/pngrutil.c ****    }
2336:fltk-1.3.4-1/png/pngrutil.c **** 
2337:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->mode & PNG_HAVE_IDAT) != 0)
2338:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->mode |= PNG_AFTER_IDAT;
2339:fltk-1.3.4-1/png/pngrutil.c **** 
2340:fltk-1.3.4-1/png/pngrutil.c ****    if (length != 7)
2341:fltk-1.3.4-1/png/pngrutil.c ****    {
2342:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
2343:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid");
2344:fltk-1.3.4-1/png/pngrutil.c ****       return;
2345:fltk-1.3.4-1/png/pngrutil.c ****    }
2346:fltk-1.3.4-1/png/pngrutil.c **** 
2347:fltk-1.3.4-1/png/pngrutil.c ****    png_crc_read(png_ptr, buf, 7);
2348:fltk-1.3.4-1/png/pngrutil.c **** 
2349:fltk-1.3.4-1/png/pngrutil.c ****    if (png_crc_finish(png_ptr, 0) != 0)
2350:fltk-1.3.4-1/png/pngrutil.c ****       return;
2351:fltk-1.3.4-1/png/pngrutil.c **** 
2352:fltk-1.3.4-1/png/pngrutil.c ****    mod_time.second = buf[6];
2353:fltk-1.3.4-1/png/pngrutil.c ****    mod_time.minute = buf[5];
2354:fltk-1.3.4-1/png/pngrutil.c ****    mod_time.hour = buf[4];
2355:fltk-1.3.4-1/png/pngrutil.c ****    mod_time.day = buf[3];
2356:fltk-1.3.4-1/png/pngrutil.c ****    mod_time.month = buf[2];
2357:fltk-1.3.4-1/png/pngrutil.c ****    mod_time.year = png_get_uint_16(buf);
2358:fltk-1.3.4-1/png/pngrutil.c **** 
2359:fltk-1.3.4-1/png/pngrutil.c ****    png_set_tIME(png_ptr, info_ptr, &mod_time);
2360:fltk-1.3.4-1/png/pngrutil.c **** }
2361:fltk-1.3.4-1/png/pngrutil.c **** #endif
2362:fltk-1.3.4-1/png/pngrutil.c **** 
2363:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_tEXt_SUPPORTED
2364:fltk-1.3.4-1/png/pngrutil.c **** /* Note: this does not properly handle chunks that are > 64K under DOS */
2365:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
2366:fltk-1.3.4-1/png/pngrutil.c **** png_handle_tEXt(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)
2367:fltk-1.3.4-1/png/pngrutil.c **** {
2368:fltk-1.3.4-1/png/pngrutil.c ****    png_text  text_info;
2369:fltk-1.3.4-1/png/pngrutil.c ****    png_bytep buffer;
2370:fltk-1.3.4-1/png/pngrutil.c ****    png_charp key;
2371:fltk-1.3.4-1/png/pngrutil.c ****    png_charp text;
2372:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32 skip = 0;
2373:fltk-1.3.4-1/png/pngrutil.c **** 
2374:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_handle_tEXt");
2375:fltk-1.3.4-1/png/pngrutil.c **** 
2376:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_USER_LIMITS_SUPPORTED
2377:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->user_chunk_cache_max != 0)
2378:fltk-1.3.4-1/png/pngrutil.c ****    {
2379:fltk-1.3.4-1/png/pngrutil.c ****       if (png_ptr->user_chunk_cache_max == 1)
2380:fltk-1.3.4-1/png/pngrutil.c ****       {
2381:fltk-1.3.4-1/png/pngrutil.c ****          png_crc_finish(png_ptr, length);
2382:fltk-1.3.4-1/png/pngrutil.c ****          return;
2383:fltk-1.3.4-1/png/pngrutil.c ****       }
2384:fltk-1.3.4-1/png/pngrutil.c **** 
2385:fltk-1.3.4-1/png/pngrutil.c ****       if (--png_ptr->user_chunk_cache_max == 1)
2386:fltk-1.3.4-1/png/pngrutil.c ****       {
2387:fltk-1.3.4-1/png/pngrutil.c ****          png_crc_finish(png_ptr, length);
2388:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_benign_error(png_ptr, "no space in chunk cache");
2389:fltk-1.3.4-1/png/pngrutil.c ****          return;
2390:fltk-1.3.4-1/png/pngrutil.c ****       }
2391:fltk-1.3.4-1/png/pngrutil.c ****    }
2392:fltk-1.3.4-1/png/pngrutil.c **** #endif
2393:fltk-1.3.4-1/png/pngrutil.c **** 
2394:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->mode & PNG_HAVE_IHDR) == 0)
2395:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
2396:fltk-1.3.4-1/png/pngrutil.c **** 
2397:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->mode & PNG_HAVE_IDAT) != 0)
2398:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->mode |= PNG_AFTER_IDAT;
2399:fltk-1.3.4-1/png/pngrutil.c **** 
2400:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_MAX_MALLOC_64K
2401:fltk-1.3.4-1/png/pngrutil.c ****    if (length > 65535U)
2402:fltk-1.3.4-1/png/pngrutil.c ****    {
2403:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
2404:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "too large to fit in memory");
2405:fltk-1.3.4-1/png/pngrutil.c ****       return;
2406:fltk-1.3.4-1/png/pngrutil.c ****    }
2407:fltk-1.3.4-1/png/pngrutil.c **** #endif
2408:fltk-1.3.4-1/png/pngrutil.c **** 
2409:fltk-1.3.4-1/png/pngrutil.c ****    buffer = png_read_buffer(png_ptr, length+1, 1/*warn*/);
2410:fltk-1.3.4-1/png/pngrutil.c **** 
2411:fltk-1.3.4-1/png/pngrutil.c ****    if (buffer == NULL)
2412:fltk-1.3.4-1/png/pngrutil.c ****    {
2413:fltk-1.3.4-1/png/pngrutil.c ****      png_chunk_benign_error(png_ptr, "out of memory");
2414:fltk-1.3.4-1/png/pngrutil.c ****      return;
2415:fltk-1.3.4-1/png/pngrutil.c ****    }
2416:fltk-1.3.4-1/png/pngrutil.c **** 
2417:fltk-1.3.4-1/png/pngrutil.c ****    png_crc_read(png_ptr, buffer, length);
2418:fltk-1.3.4-1/png/pngrutil.c **** 
2419:fltk-1.3.4-1/png/pngrutil.c ****    if (png_crc_finish(png_ptr, skip) != 0)
2420:fltk-1.3.4-1/png/pngrutil.c ****       return;
2421:fltk-1.3.4-1/png/pngrutil.c **** 
2422:fltk-1.3.4-1/png/pngrutil.c ****    key = (png_charp)buffer;
2423:fltk-1.3.4-1/png/pngrutil.c ****    key[length] = 0;
2424:fltk-1.3.4-1/png/pngrutil.c **** 
2425:fltk-1.3.4-1/png/pngrutil.c ****    for (text = key; *text; text++)
2426:fltk-1.3.4-1/png/pngrutil.c ****       /* Empty loop to find end of key */ ;
2427:fltk-1.3.4-1/png/pngrutil.c **** 
2428:fltk-1.3.4-1/png/pngrutil.c ****    if (text != key + length)
2429:fltk-1.3.4-1/png/pngrutil.c ****       text++;
2430:fltk-1.3.4-1/png/pngrutil.c **** 
2431:fltk-1.3.4-1/png/pngrutil.c ****    text_info.compression = PNG_TEXT_COMPRESSION_NONE;
2432:fltk-1.3.4-1/png/pngrutil.c ****    text_info.key = key;
2433:fltk-1.3.4-1/png/pngrutil.c ****    text_info.lang = NULL;
2434:fltk-1.3.4-1/png/pngrutil.c ****    text_info.lang_key = NULL;
2435:fltk-1.3.4-1/png/pngrutil.c ****    text_info.itxt_length = 0;
2436:fltk-1.3.4-1/png/pngrutil.c ****    text_info.text = text;
2437:fltk-1.3.4-1/png/pngrutil.c ****    text_info.text_length = strlen(text);
2438:fltk-1.3.4-1/png/pngrutil.c **** 
2439:fltk-1.3.4-1/png/pngrutil.c ****    if (png_set_text_2(png_ptr, info_ptr, &text_info, 1) != 0)
2440:fltk-1.3.4-1/png/pngrutil.c ****       png_warning(png_ptr, "Insufficient memory to process text chunk");
2441:fltk-1.3.4-1/png/pngrutil.c **** }
2442:fltk-1.3.4-1/png/pngrutil.c **** #endif
2443:fltk-1.3.4-1/png/pngrutil.c **** 
2444:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_zTXt_SUPPORTED
2445:fltk-1.3.4-1/png/pngrutil.c **** /* Note: this does not correctly handle chunks that are > 64K under DOS */
2446:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
2447:fltk-1.3.4-1/png/pngrutil.c **** png_handle_zTXt(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)
2448:fltk-1.3.4-1/png/pngrutil.c **** {
2449:fltk-1.3.4-1/png/pngrutil.c ****    png_const_charp errmsg = NULL;
2450:fltk-1.3.4-1/png/pngrutil.c ****    png_bytep       buffer;
2451:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32     keyword_length;
2452:fltk-1.3.4-1/png/pngrutil.c **** 
2453:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_handle_zTXt");
2454:fltk-1.3.4-1/png/pngrutil.c **** 
2455:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_USER_LIMITS_SUPPORTED
2456:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->user_chunk_cache_max != 0)
2457:fltk-1.3.4-1/png/pngrutil.c ****    {
2458:fltk-1.3.4-1/png/pngrutil.c ****       if (png_ptr->user_chunk_cache_max == 1)
2459:fltk-1.3.4-1/png/pngrutil.c ****       {
2460:fltk-1.3.4-1/png/pngrutil.c ****          png_crc_finish(png_ptr, length);
2461:fltk-1.3.4-1/png/pngrutil.c ****          return;
2462:fltk-1.3.4-1/png/pngrutil.c ****       }
2463:fltk-1.3.4-1/png/pngrutil.c **** 
2464:fltk-1.3.4-1/png/pngrutil.c ****       if (--png_ptr->user_chunk_cache_max == 1)
2465:fltk-1.3.4-1/png/pngrutil.c ****       {
2466:fltk-1.3.4-1/png/pngrutil.c ****          png_crc_finish(png_ptr, length);
2467:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_benign_error(png_ptr, "no space in chunk cache");
2468:fltk-1.3.4-1/png/pngrutil.c ****          return;
2469:fltk-1.3.4-1/png/pngrutil.c ****       }
2470:fltk-1.3.4-1/png/pngrutil.c ****    }
2471:fltk-1.3.4-1/png/pngrutil.c **** #endif
2472:fltk-1.3.4-1/png/pngrutil.c **** 
2473:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->mode & PNG_HAVE_IHDR) == 0)
2474:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
2475:fltk-1.3.4-1/png/pngrutil.c **** 
2476:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->mode & PNG_HAVE_IDAT) != 0)
2477:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->mode |= PNG_AFTER_IDAT;
2478:fltk-1.3.4-1/png/pngrutil.c **** 
2479:fltk-1.3.4-1/png/pngrutil.c ****    buffer = png_read_buffer(png_ptr, length, 2/*silent*/);
2480:fltk-1.3.4-1/png/pngrutil.c **** 
2481:fltk-1.3.4-1/png/pngrutil.c ****    if (buffer == NULL)
2482:fltk-1.3.4-1/png/pngrutil.c ****    {
2483:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
2484:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of memory");
2485:fltk-1.3.4-1/png/pngrutil.c ****       return;
2486:fltk-1.3.4-1/png/pngrutil.c ****    }
2487:fltk-1.3.4-1/png/pngrutil.c **** 
2488:fltk-1.3.4-1/png/pngrutil.c ****    png_crc_read(png_ptr, buffer, length);
2489:fltk-1.3.4-1/png/pngrutil.c **** 
2490:fltk-1.3.4-1/png/pngrutil.c ****    if (png_crc_finish(png_ptr, 0) != 0)
2491:fltk-1.3.4-1/png/pngrutil.c ****       return;
2492:fltk-1.3.4-1/png/pngrutil.c **** 
2493:fltk-1.3.4-1/png/pngrutil.c ****    /* TODO: also check that the keyword contents match the spec! */
2494:fltk-1.3.4-1/png/pngrutil.c ****    for (keyword_length = 0;
2495:fltk-1.3.4-1/png/pngrutil.c ****       keyword_length < length && buffer[keyword_length] != 0;
2496:fltk-1.3.4-1/png/pngrutil.c ****       ++keyword_length)
2497:fltk-1.3.4-1/png/pngrutil.c ****       /* Empty loop to find end of name */ ;
2498:fltk-1.3.4-1/png/pngrutil.c **** 
2499:fltk-1.3.4-1/png/pngrutil.c ****    if (keyword_length > 79 || keyword_length < 1)
2500:fltk-1.3.4-1/png/pngrutil.c ****       errmsg = "bad keyword";
2501:fltk-1.3.4-1/png/pngrutil.c **** 
2502:fltk-1.3.4-1/png/pngrutil.c ****    /* zTXt must have some LZ data after the keyword, although it may expand to
2503:fltk-1.3.4-1/png/pngrutil.c ****     * zero bytes; we need a '\0' at the end of the keyword, the compression type
2504:fltk-1.3.4-1/png/pngrutil.c ****     * then the LZ data:
2505:fltk-1.3.4-1/png/pngrutil.c ****     */
2506:fltk-1.3.4-1/png/pngrutil.c ****    else if (keyword_length + 3 > length)
2507:fltk-1.3.4-1/png/pngrutil.c ****       errmsg = "truncated";
2508:fltk-1.3.4-1/png/pngrutil.c **** 
2509:fltk-1.3.4-1/png/pngrutil.c ****    else if (buffer[keyword_length+1] != PNG_COMPRESSION_TYPE_BASE)
2510:fltk-1.3.4-1/png/pngrutil.c ****       errmsg = "unknown compression type";
2511:fltk-1.3.4-1/png/pngrutil.c **** 
2512:fltk-1.3.4-1/png/pngrutil.c ****    else
2513:fltk-1.3.4-1/png/pngrutil.c ****    {
2514:fltk-1.3.4-1/png/pngrutil.c ****       png_alloc_size_t uncompressed_length = PNG_SIZE_MAX;
2515:fltk-1.3.4-1/png/pngrutil.c **** 
2516:fltk-1.3.4-1/png/pngrutil.c ****       /* TODO: at present png_decompress_chunk imposes a single application
2517:fltk-1.3.4-1/png/pngrutil.c ****        * level memory limit, this should be split to different values for iCCP
2518:fltk-1.3.4-1/png/pngrutil.c ****        * and text chunks.
2519:fltk-1.3.4-1/png/pngrutil.c ****        */
2520:fltk-1.3.4-1/png/pngrutil.c ****       if (png_decompress_chunk(png_ptr, length, keyword_length+2,
2521:fltk-1.3.4-1/png/pngrutil.c ****          &uncompressed_length, 1/*terminate*/) == Z_STREAM_END)
2522:fltk-1.3.4-1/png/pngrutil.c ****       {
2523:fltk-1.3.4-1/png/pngrutil.c ****          png_text text;
2524:fltk-1.3.4-1/png/pngrutil.c **** 
2525:fltk-1.3.4-1/png/pngrutil.c ****          /* It worked; png_ptr->read_buffer now looks like a tEXt chunk except
2526:fltk-1.3.4-1/png/pngrutil.c ****           * for the extra compression type byte and the fact that it isn't
2527:fltk-1.3.4-1/png/pngrutil.c ****           * necessarily '\0' terminated.
2528:fltk-1.3.4-1/png/pngrutil.c ****           */
2529:fltk-1.3.4-1/png/pngrutil.c ****          buffer = png_ptr->read_buffer;
2530:fltk-1.3.4-1/png/pngrutil.c ****          buffer[uncompressed_length+(keyword_length+2)] = 0;
2531:fltk-1.3.4-1/png/pngrutil.c **** 
2532:fltk-1.3.4-1/png/pngrutil.c ****          text.compression = PNG_TEXT_COMPRESSION_zTXt;
2533:fltk-1.3.4-1/png/pngrutil.c ****          text.key = (png_charp)buffer;
2534:fltk-1.3.4-1/png/pngrutil.c ****          text.text = (png_charp)(buffer + keyword_length+2);
2535:fltk-1.3.4-1/png/pngrutil.c ****          text.text_length = uncompressed_length;
2536:fltk-1.3.4-1/png/pngrutil.c ****          text.itxt_length = 0;
2537:fltk-1.3.4-1/png/pngrutil.c ****          text.lang = NULL;
2538:fltk-1.3.4-1/png/pngrutil.c ****          text.lang_key = NULL;
2539:fltk-1.3.4-1/png/pngrutil.c **** 
2540:fltk-1.3.4-1/png/pngrutil.c ****          if (png_set_text_2(png_ptr, info_ptr, &text, 1) != 0)
2541:fltk-1.3.4-1/png/pngrutil.c ****             errmsg = "insufficient memory";
2542:fltk-1.3.4-1/png/pngrutil.c ****       }
2543:fltk-1.3.4-1/png/pngrutil.c **** 
2544:fltk-1.3.4-1/png/pngrutil.c ****       else
2545:fltk-1.3.4-1/png/pngrutil.c ****          errmsg = png_ptr->zstream.msg;
2546:fltk-1.3.4-1/png/pngrutil.c ****    }
2547:fltk-1.3.4-1/png/pngrutil.c **** 
2548:fltk-1.3.4-1/png/pngrutil.c ****    if (errmsg != NULL)
2549:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, errmsg);
2550:fltk-1.3.4-1/png/pngrutil.c **** }
2551:fltk-1.3.4-1/png/pngrutil.c **** #endif
2552:fltk-1.3.4-1/png/pngrutil.c **** 
2553:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_iTXt_SUPPORTED
2554:fltk-1.3.4-1/png/pngrutil.c **** /* Note: this does not correctly handle chunks that are > 64K under DOS */
2555:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
2556:fltk-1.3.4-1/png/pngrutil.c **** png_handle_iTXt(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)
2557:fltk-1.3.4-1/png/pngrutil.c **** {
2558:fltk-1.3.4-1/png/pngrutil.c ****    png_const_charp errmsg = NULL;
2559:fltk-1.3.4-1/png/pngrutil.c ****    png_bytep buffer;
2560:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32 prefix_length;
2561:fltk-1.3.4-1/png/pngrutil.c **** 
2562:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_handle_iTXt");
2563:fltk-1.3.4-1/png/pngrutil.c **** 
2564:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_USER_LIMITS_SUPPORTED
2565:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->user_chunk_cache_max != 0)
2566:fltk-1.3.4-1/png/pngrutil.c ****    {
2567:fltk-1.3.4-1/png/pngrutil.c ****       if (png_ptr->user_chunk_cache_max == 1)
2568:fltk-1.3.4-1/png/pngrutil.c ****       {
2569:fltk-1.3.4-1/png/pngrutil.c ****          png_crc_finish(png_ptr, length);
2570:fltk-1.3.4-1/png/pngrutil.c ****          return;
2571:fltk-1.3.4-1/png/pngrutil.c ****       }
2572:fltk-1.3.4-1/png/pngrutil.c **** 
2573:fltk-1.3.4-1/png/pngrutil.c ****       if (--png_ptr->user_chunk_cache_max == 1)
2574:fltk-1.3.4-1/png/pngrutil.c ****       {
2575:fltk-1.3.4-1/png/pngrutil.c ****          png_crc_finish(png_ptr, length);
2576:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_benign_error(png_ptr, "no space in chunk cache");
2577:fltk-1.3.4-1/png/pngrutil.c ****          return;
2578:fltk-1.3.4-1/png/pngrutil.c ****       }
2579:fltk-1.3.4-1/png/pngrutil.c ****    }
2580:fltk-1.3.4-1/png/pngrutil.c **** #endif
2581:fltk-1.3.4-1/png/pngrutil.c **** 
2582:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->mode & PNG_HAVE_IHDR) == 0)
2583:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
2584:fltk-1.3.4-1/png/pngrutil.c **** 
2585:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->mode & PNG_HAVE_IDAT) != 0)
2586:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->mode |= PNG_AFTER_IDAT;
2587:fltk-1.3.4-1/png/pngrutil.c **** 
2588:fltk-1.3.4-1/png/pngrutil.c ****    buffer = png_read_buffer(png_ptr, length+1, 1/*warn*/);
2589:fltk-1.3.4-1/png/pngrutil.c **** 
2590:fltk-1.3.4-1/png/pngrutil.c ****    if (buffer == NULL)
2591:fltk-1.3.4-1/png/pngrutil.c ****    {
2592:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
2593:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of memory");
2594:fltk-1.3.4-1/png/pngrutil.c ****       return;
2595:fltk-1.3.4-1/png/pngrutil.c ****    }
2596:fltk-1.3.4-1/png/pngrutil.c **** 
2597:fltk-1.3.4-1/png/pngrutil.c ****    png_crc_read(png_ptr, buffer, length);
2598:fltk-1.3.4-1/png/pngrutil.c **** 
2599:fltk-1.3.4-1/png/pngrutil.c ****    if (png_crc_finish(png_ptr, 0) != 0)
2600:fltk-1.3.4-1/png/pngrutil.c ****       return;
2601:fltk-1.3.4-1/png/pngrutil.c **** 
2602:fltk-1.3.4-1/png/pngrutil.c ****    /* First the keyword. */
2603:fltk-1.3.4-1/png/pngrutil.c ****    for (prefix_length=0;
2604:fltk-1.3.4-1/png/pngrutil.c ****       prefix_length < length && buffer[prefix_length] != 0;
2605:fltk-1.3.4-1/png/pngrutil.c ****       ++prefix_length)
2606:fltk-1.3.4-1/png/pngrutil.c ****       /* Empty loop */ ;
2607:fltk-1.3.4-1/png/pngrutil.c **** 
2608:fltk-1.3.4-1/png/pngrutil.c ****    /* Perform a basic check on the keyword length here. */
2609:fltk-1.3.4-1/png/pngrutil.c ****    if (prefix_length > 79 || prefix_length < 1)
2610:fltk-1.3.4-1/png/pngrutil.c ****       errmsg = "bad keyword";
2611:fltk-1.3.4-1/png/pngrutil.c **** 
2612:fltk-1.3.4-1/png/pngrutil.c ****    /* Expect keyword, compression flag, compression type, language, translated
2613:fltk-1.3.4-1/png/pngrutil.c ****     * keyword (both may be empty but are 0 terminated) then the text, which may
2614:fltk-1.3.4-1/png/pngrutil.c ****     * be empty.
2615:fltk-1.3.4-1/png/pngrutil.c ****     */
2616:fltk-1.3.4-1/png/pngrutil.c ****    else if (prefix_length + 5 > length)
2617:fltk-1.3.4-1/png/pngrutil.c ****       errmsg = "truncated";
2618:fltk-1.3.4-1/png/pngrutil.c **** 
2619:fltk-1.3.4-1/png/pngrutil.c ****    else if (buffer[prefix_length+1] == 0 ||
2620:fltk-1.3.4-1/png/pngrutil.c ****       (buffer[prefix_length+1] == 1 &&
2621:fltk-1.3.4-1/png/pngrutil.c ****       buffer[prefix_length+2] == PNG_COMPRESSION_TYPE_BASE))
2622:fltk-1.3.4-1/png/pngrutil.c ****    {
2623:fltk-1.3.4-1/png/pngrutil.c ****       int compressed = buffer[prefix_length+1] != 0;
2624:fltk-1.3.4-1/png/pngrutil.c ****       png_uint_32 language_offset, translated_keyword_offset;
2625:fltk-1.3.4-1/png/pngrutil.c ****       png_alloc_size_t uncompressed_length = 0;
2626:fltk-1.3.4-1/png/pngrutil.c **** 
2627:fltk-1.3.4-1/png/pngrutil.c ****       /* Now the language tag */
2628:fltk-1.3.4-1/png/pngrutil.c ****       prefix_length += 3;
2629:fltk-1.3.4-1/png/pngrutil.c ****       language_offset = prefix_length;
2630:fltk-1.3.4-1/png/pngrutil.c **** 
2631:fltk-1.3.4-1/png/pngrutil.c ****       for (; prefix_length < length && buffer[prefix_length] != 0;
2632:fltk-1.3.4-1/png/pngrutil.c ****          ++prefix_length)
2633:fltk-1.3.4-1/png/pngrutil.c ****          /* Empty loop */ ;
2634:fltk-1.3.4-1/png/pngrutil.c **** 
2635:fltk-1.3.4-1/png/pngrutil.c ****       /* WARNING: the length may be invalid here, this is checked below. */
2636:fltk-1.3.4-1/png/pngrutil.c ****       translated_keyword_offset = ++prefix_length;
2637:fltk-1.3.4-1/png/pngrutil.c **** 
2638:fltk-1.3.4-1/png/pngrutil.c ****       for (; prefix_length < length && buffer[prefix_length] != 0;
2639:fltk-1.3.4-1/png/pngrutil.c ****          ++prefix_length)
2640:fltk-1.3.4-1/png/pngrutil.c ****          /* Empty loop */ ;
2641:fltk-1.3.4-1/png/pngrutil.c **** 
2642:fltk-1.3.4-1/png/pngrutil.c ****       /* prefix_length should now be at the trailing '\0' of the translated
2643:fltk-1.3.4-1/png/pngrutil.c ****        * keyword, but it may already be over the end.  None of this arithmetic
2644:fltk-1.3.4-1/png/pngrutil.c ****        * can overflow because chunks are at most 2^31 bytes long, but on 16-bit
2645:fltk-1.3.4-1/png/pngrutil.c ****        * systems the available allocation may overflow.
2646:fltk-1.3.4-1/png/pngrutil.c ****        */
2647:fltk-1.3.4-1/png/pngrutil.c ****       ++prefix_length;
2648:fltk-1.3.4-1/png/pngrutil.c **** 
2649:fltk-1.3.4-1/png/pngrutil.c ****       if (compressed == 0 && prefix_length <= length)
2650:fltk-1.3.4-1/png/pngrutil.c ****          uncompressed_length = length - prefix_length;
2651:fltk-1.3.4-1/png/pngrutil.c **** 
2652:fltk-1.3.4-1/png/pngrutil.c ****       else if (compressed != 0 && prefix_length < length)
2653:fltk-1.3.4-1/png/pngrutil.c ****       {
2654:fltk-1.3.4-1/png/pngrutil.c ****          uncompressed_length = PNG_SIZE_MAX;
2655:fltk-1.3.4-1/png/pngrutil.c **** 
2656:fltk-1.3.4-1/png/pngrutil.c ****          /* TODO: at present png_decompress_chunk imposes a single application
2657:fltk-1.3.4-1/png/pngrutil.c ****           * level memory limit, this should be split to different values for
2658:fltk-1.3.4-1/png/pngrutil.c ****           * iCCP and text chunks.
2659:fltk-1.3.4-1/png/pngrutil.c ****           */
2660:fltk-1.3.4-1/png/pngrutil.c ****          if (png_decompress_chunk(png_ptr, length, prefix_length,
2661:fltk-1.3.4-1/png/pngrutil.c ****             &uncompressed_length, 1/*terminate*/) == Z_STREAM_END)
2662:fltk-1.3.4-1/png/pngrutil.c ****             buffer = png_ptr->read_buffer;
2663:fltk-1.3.4-1/png/pngrutil.c **** 
2664:fltk-1.3.4-1/png/pngrutil.c ****          else
2665:fltk-1.3.4-1/png/pngrutil.c ****             errmsg = png_ptr->zstream.msg;
2666:fltk-1.3.4-1/png/pngrutil.c ****       }
2667:fltk-1.3.4-1/png/pngrutil.c **** 
2668:fltk-1.3.4-1/png/pngrutil.c ****       else
2669:fltk-1.3.4-1/png/pngrutil.c ****          errmsg = "truncated";
2670:fltk-1.3.4-1/png/pngrutil.c **** 
2671:fltk-1.3.4-1/png/pngrutil.c ****       if (errmsg == NULL)
2672:fltk-1.3.4-1/png/pngrutil.c ****       {
2673:fltk-1.3.4-1/png/pngrutil.c ****          png_text text;
2674:fltk-1.3.4-1/png/pngrutil.c **** 
2675:fltk-1.3.4-1/png/pngrutil.c ****          buffer[uncompressed_length+prefix_length] = 0;
2676:fltk-1.3.4-1/png/pngrutil.c **** 
2677:fltk-1.3.4-1/png/pngrutil.c ****          if (compressed == 0)
2678:fltk-1.3.4-1/png/pngrutil.c ****             text.compression = PNG_ITXT_COMPRESSION_NONE;
2679:fltk-1.3.4-1/png/pngrutil.c **** 
2680:fltk-1.3.4-1/png/pngrutil.c ****          else
2681:fltk-1.3.4-1/png/pngrutil.c ****             text.compression = PNG_ITXT_COMPRESSION_zTXt;
2682:fltk-1.3.4-1/png/pngrutil.c **** 
2683:fltk-1.3.4-1/png/pngrutil.c ****          text.key = (png_charp)buffer;
2684:fltk-1.3.4-1/png/pngrutil.c ****          text.lang = (png_charp)buffer + language_offset;
2685:fltk-1.3.4-1/png/pngrutil.c ****          text.lang_key = (png_charp)buffer + translated_keyword_offset;
2686:fltk-1.3.4-1/png/pngrutil.c ****          text.text = (png_charp)buffer + prefix_length;
2687:fltk-1.3.4-1/png/pngrutil.c ****          text.text_length = 0;
2688:fltk-1.3.4-1/png/pngrutil.c ****          text.itxt_length = uncompressed_length;
2689:fltk-1.3.4-1/png/pngrutil.c **** 
2690:fltk-1.3.4-1/png/pngrutil.c ****          if (png_set_text_2(png_ptr, info_ptr, &text, 1) != 0)
2691:fltk-1.3.4-1/png/pngrutil.c ****             errmsg = "insufficient memory";
2692:fltk-1.3.4-1/png/pngrutil.c ****       }
2693:fltk-1.3.4-1/png/pngrutil.c ****    }
2694:fltk-1.3.4-1/png/pngrutil.c **** 
2695:fltk-1.3.4-1/png/pngrutil.c ****    else
2696:fltk-1.3.4-1/png/pngrutil.c ****       errmsg = "bad compression info";
2697:fltk-1.3.4-1/png/pngrutil.c **** 
2698:fltk-1.3.4-1/png/pngrutil.c ****    if (errmsg != NULL)
2699:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, errmsg);
2700:fltk-1.3.4-1/png/pngrutil.c **** }
2701:fltk-1.3.4-1/png/pngrutil.c **** #endif
2702:fltk-1.3.4-1/png/pngrutil.c **** 
2703:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_UNKNOWN_CHUNKS_SUPPORTED
2704:fltk-1.3.4-1/png/pngrutil.c **** /* Utility function for png_handle_unknown; set up png_ptr::unknown_chunk */
2705:fltk-1.3.4-1/png/pngrutil.c **** static int
2706:fltk-1.3.4-1/png/pngrutil.c **** png_cache_unknown_chunk(png_structrp png_ptr, png_uint_32 length)
2707:fltk-1.3.4-1/png/pngrutil.c **** {
2708:fltk-1.3.4-1/png/pngrutil.c ****    png_alloc_size_t limit = PNG_SIZE_MAX;
2709:fltk-1.3.4-1/png/pngrutil.c **** 
2710:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->unknown_chunk.data != NULL)
2711:fltk-1.3.4-1/png/pngrutil.c ****    {
2712:fltk-1.3.4-1/png/pngrutil.c ****       png_free(png_ptr, png_ptr->unknown_chunk.data);
2713:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->unknown_chunk.data = NULL;
2714:fltk-1.3.4-1/png/pngrutil.c ****    }
2715:fltk-1.3.4-1/png/pngrutil.c **** 
2716:fltk-1.3.4-1/png/pngrutil.c **** #  ifdef PNG_SET_CHUNK_MALLOC_LIMIT_SUPPORTED
2717:fltk-1.3.4-1/png/pngrutil.c ****       if (png_ptr->user_chunk_malloc_max > 0 &&
2718:fltk-1.3.4-1/png/pngrutil.c ****           png_ptr->user_chunk_malloc_max < limit)
2719:fltk-1.3.4-1/png/pngrutil.c ****          limit = png_ptr->user_chunk_malloc_max;
2720:fltk-1.3.4-1/png/pngrutil.c **** 
2721:fltk-1.3.4-1/png/pngrutil.c **** #  elif PNG_USER_CHUNK_MALLOC_MAX > 0
2722:fltk-1.3.4-1/png/pngrutil.c ****       if (PNG_USER_CHUNK_MALLOC_MAX < limit)
2723:fltk-1.3.4-1/png/pngrutil.c ****          limit = PNG_USER_CHUNK_MALLOC_MAX;
2724:fltk-1.3.4-1/png/pngrutil.c **** #  endif
2725:fltk-1.3.4-1/png/pngrutil.c **** 
2726:fltk-1.3.4-1/png/pngrutil.c ****    if (length <= limit)
2727:fltk-1.3.4-1/png/pngrutil.c ****    {
2728:fltk-1.3.4-1/png/pngrutil.c ****       PNG_CSTRING_FROM_CHUNK(png_ptr->unknown_chunk.name, png_ptr->chunk_name);
2729:fltk-1.3.4-1/png/pngrutil.c ****       /* The following is safe because of the PNG_SIZE_MAX init above */
2730:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->unknown_chunk.size = (png_size_t)length/*SAFE*/;
2731:fltk-1.3.4-1/png/pngrutil.c ****       /* 'mode' is a flag array, only the bottom four bits matter here */
2732:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->unknown_chunk.location = (png_byte)png_ptr->mode/*SAFE*/;
2733:fltk-1.3.4-1/png/pngrutil.c **** 
2734:fltk-1.3.4-1/png/pngrutil.c ****       if (length == 0)
2735:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->unknown_chunk.data = NULL;
2736:fltk-1.3.4-1/png/pngrutil.c **** 
2737:fltk-1.3.4-1/png/pngrutil.c ****       else
2738:fltk-1.3.4-1/png/pngrutil.c ****       {
2739:fltk-1.3.4-1/png/pngrutil.c ****          /* Do a 'warn' here - it is handled below. */
2740:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->unknown_chunk.data = png_voidcast(png_bytep,
2741:fltk-1.3.4-1/png/pngrutil.c ****             png_malloc_warn(png_ptr, length));
2742:fltk-1.3.4-1/png/pngrutil.c ****       }
2743:fltk-1.3.4-1/png/pngrutil.c ****    }
2744:fltk-1.3.4-1/png/pngrutil.c **** 
2745:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->unknown_chunk.data == NULL && length > 0)
2746:fltk-1.3.4-1/png/pngrutil.c ****    {
2747:fltk-1.3.4-1/png/pngrutil.c ****       /* This is benign because we clean up correctly */
2748:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
2749:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "unknown chunk exceeds memory limits");
2750:fltk-1.3.4-1/png/pngrutil.c ****       return 0;
2751:fltk-1.3.4-1/png/pngrutil.c ****    }
2752:fltk-1.3.4-1/png/pngrutil.c **** 
2753:fltk-1.3.4-1/png/pngrutil.c ****    else
2754:fltk-1.3.4-1/png/pngrutil.c ****    {
2755:fltk-1.3.4-1/png/pngrutil.c ****       if (length > 0)
2756:fltk-1.3.4-1/png/pngrutil.c ****          png_crc_read(png_ptr, png_ptr->unknown_chunk.data, length);
2757:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, 0);
2758:fltk-1.3.4-1/png/pngrutil.c ****       return 1;
2759:fltk-1.3.4-1/png/pngrutil.c ****    }
2760:fltk-1.3.4-1/png/pngrutil.c **** }
2761:fltk-1.3.4-1/png/pngrutil.c **** #endif /* READ_UNKNOWN_CHUNKS */
2762:fltk-1.3.4-1/png/pngrutil.c **** 
2763:fltk-1.3.4-1/png/pngrutil.c **** /* Handle an unknown, or known but disabled, chunk */
2764:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
2765:fltk-1.3.4-1/png/pngrutil.c **** png_handle_unknown(png_structrp png_ptr, png_inforp info_ptr,
2766:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32 length, int keep)
2767:fltk-1.3.4-1/png/pngrutil.c **** {
2768:fltk-1.3.4-1/png/pngrutil.c ****    int handled = 0; /* the chunk was handled */
2769:fltk-1.3.4-1/png/pngrutil.c **** 
2770:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_handle_unknown");
2771:fltk-1.3.4-1/png/pngrutil.c **** 
2772:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_UNKNOWN_CHUNKS_SUPPORTED
2773:fltk-1.3.4-1/png/pngrutil.c ****    /* NOTE: this code is based on the code in libpng-1.4.12 except for fixing
2774:fltk-1.3.4-1/png/pngrutil.c ****     * the bug which meant that setting a non-default behavior for a specific
2775:fltk-1.3.4-1/png/pngrutil.c ****     * chunk would be ignored (the default was always used unless a user
2776:fltk-1.3.4-1/png/pngrutil.c ****     * callback was installed).
2777:fltk-1.3.4-1/png/pngrutil.c ****     *
2778:fltk-1.3.4-1/png/pngrutil.c ****     * 'keep' is the value from the png_chunk_unknown_handling, the setting for
2779:fltk-1.3.4-1/png/pngrutil.c ****     * this specific chunk_name, if PNG_HANDLE_AS_UNKNOWN_SUPPORTED, if not it
2780:fltk-1.3.4-1/png/pngrutil.c ****     * will always be PNG_HANDLE_CHUNK_AS_DEFAULT and it needs to be set here.
2781:fltk-1.3.4-1/png/pngrutil.c ****     * This is just an optimization to avoid multiple calls to the lookup
2782:fltk-1.3.4-1/png/pngrutil.c ****     * function.
2783:fltk-1.3.4-1/png/pngrutil.c ****     */
2784:fltk-1.3.4-1/png/pngrutil.c **** #  ifndef PNG_HANDLE_AS_UNKNOWN_SUPPORTED
2785:fltk-1.3.4-1/png/pngrutil.c **** #     ifdef PNG_SET_UNKNOWN_CHUNKS_SUPPORTED
2786:fltk-1.3.4-1/png/pngrutil.c ****          keep = png_chunk_unknown_handling(png_ptr, png_ptr->chunk_name);
2787:fltk-1.3.4-1/png/pngrutil.c **** #     endif
2788:fltk-1.3.4-1/png/pngrutil.c **** #  endif
2789:fltk-1.3.4-1/png/pngrutil.c **** 
2790:fltk-1.3.4-1/png/pngrutil.c ****    /* One of the following methods will read the chunk or skip it (at least one
2791:fltk-1.3.4-1/png/pngrutil.c ****     * of these is always defined because this is the only way to switch on
2792:fltk-1.3.4-1/png/pngrutil.c ****     * PNG_READ_UNKNOWN_CHUNKS_SUPPORTED)
2793:fltk-1.3.4-1/png/pngrutil.c ****     */
2794:fltk-1.3.4-1/png/pngrutil.c **** #  ifdef PNG_READ_USER_CHUNKS_SUPPORTED
2795:fltk-1.3.4-1/png/pngrutil.c ****       /* The user callback takes precedence over the chunk keep value, but the
2796:fltk-1.3.4-1/png/pngrutil.c ****        * keep value is still required to validate a save of a critical chunk.
2797:fltk-1.3.4-1/png/pngrutil.c ****        */
2798:fltk-1.3.4-1/png/pngrutil.c ****       if (png_ptr->read_user_chunk_fn != NULL)
2799:fltk-1.3.4-1/png/pngrutil.c ****       {
2800:fltk-1.3.4-1/png/pngrutil.c ****          if (png_cache_unknown_chunk(png_ptr, length) != 0)
2801:fltk-1.3.4-1/png/pngrutil.c ****          {
2802:fltk-1.3.4-1/png/pngrutil.c ****             /* Callback to user unknown chunk handler */
2803:fltk-1.3.4-1/png/pngrutil.c ****             int ret = (*(png_ptr->read_user_chunk_fn))(png_ptr,
2804:fltk-1.3.4-1/png/pngrutil.c ****                &png_ptr->unknown_chunk);
2805:fltk-1.3.4-1/png/pngrutil.c **** 
2806:fltk-1.3.4-1/png/pngrutil.c ****             /* ret is:
2807:fltk-1.3.4-1/png/pngrutil.c ****              * negative: An error occured, png_chunk_error will be called.
2808:fltk-1.3.4-1/png/pngrutil.c ****              *     zero: The chunk was not handled, the chunk will be discarded
2809:fltk-1.3.4-1/png/pngrutil.c ****              *           unless png_set_keep_unknown_chunks has been used to set
2810:fltk-1.3.4-1/png/pngrutil.c ****              *           a 'keep' behavior for this particular chunk, in which
2811:fltk-1.3.4-1/png/pngrutil.c ****              *           case that will be used.  A critical chunk will cause an
2812:fltk-1.3.4-1/png/pngrutil.c ****              *           error at this point unless it is to be saved.
2813:fltk-1.3.4-1/png/pngrutil.c ****              * positive: The chunk was handled, libpng will ignore/discard it.
2814:fltk-1.3.4-1/png/pngrutil.c ****              */
2815:fltk-1.3.4-1/png/pngrutil.c ****             if (ret < 0)
2816:fltk-1.3.4-1/png/pngrutil.c ****                png_chunk_error(png_ptr, "error in user chunk");
2817:fltk-1.3.4-1/png/pngrutil.c **** 
2818:fltk-1.3.4-1/png/pngrutil.c ****             else if (ret == 0)
2819:fltk-1.3.4-1/png/pngrutil.c ****             {
2820:fltk-1.3.4-1/png/pngrutil.c ****                /* If the keep value is 'default' or 'never' override it, but
2821:fltk-1.3.4-1/png/pngrutil.c ****                 * still error out on critical chunks unless the keep value is
2822:fltk-1.3.4-1/png/pngrutil.c ****                 * 'always'  While this is weird it is the behavior in 1.4.12.
2823:fltk-1.3.4-1/png/pngrutil.c ****                 * A possible improvement would be to obey the value set for the
2824:fltk-1.3.4-1/png/pngrutil.c ****                 * chunk, but this would be an API change that would probably
2825:fltk-1.3.4-1/png/pngrutil.c ****                 * damage some applications.
2826:fltk-1.3.4-1/png/pngrutil.c ****                 *
2827:fltk-1.3.4-1/png/pngrutil.c ****                 * The png_app_warning below catches the case that matters, where
2828:fltk-1.3.4-1/png/pngrutil.c ****                 * the application has not set specific save or ignore for this
2829:fltk-1.3.4-1/png/pngrutil.c ****                 * chunk or global save or ignore.
2830:fltk-1.3.4-1/png/pngrutil.c ****                 */
2831:fltk-1.3.4-1/png/pngrutil.c ****                if (keep < PNG_HANDLE_CHUNK_IF_SAFE)
2832:fltk-1.3.4-1/png/pngrutil.c ****                {
2833:fltk-1.3.4-1/png/pngrutil.c **** #                 ifdef PNG_SET_UNKNOWN_CHUNKS_SUPPORTED
2834:fltk-1.3.4-1/png/pngrutil.c ****                      if (png_ptr->unknown_default < PNG_HANDLE_CHUNK_IF_SAFE)
2835:fltk-1.3.4-1/png/pngrutil.c ****                      {
2836:fltk-1.3.4-1/png/pngrutil.c ****                         png_chunk_warning(png_ptr, "Saving unknown chunk:");
2837:fltk-1.3.4-1/png/pngrutil.c ****                         png_app_warning(png_ptr,
2838:fltk-1.3.4-1/png/pngrutil.c ****                            "forcing save of an unhandled chunk;"
2839:fltk-1.3.4-1/png/pngrutil.c ****                            " please call png_set_keep_unknown_chunks");
2840:fltk-1.3.4-1/png/pngrutil.c ****                            /* with keep = PNG_HANDLE_CHUNK_IF_SAFE */
2841:fltk-1.3.4-1/png/pngrutil.c ****                      }
2842:fltk-1.3.4-1/png/pngrutil.c **** #                 endif
2843:fltk-1.3.4-1/png/pngrutil.c ****                   keep = PNG_HANDLE_CHUNK_IF_SAFE;
2844:fltk-1.3.4-1/png/pngrutil.c ****                }
2845:fltk-1.3.4-1/png/pngrutil.c ****             }
2846:fltk-1.3.4-1/png/pngrutil.c **** 
2847:fltk-1.3.4-1/png/pngrutil.c ****             else /* chunk was handled */
2848:fltk-1.3.4-1/png/pngrutil.c ****             {
2849:fltk-1.3.4-1/png/pngrutil.c ****                handled = 1;
2850:fltk-1.3.4-1/png/pngrutil.c ****                /* Critical chunks can be safely discarded at this point. */
2851:fltk-1.3.4-1/png/pngrutil.c ****                keep = PNG_HANDLE_CHUNK_NEVER;
2852:fltk-1.3.4-1/png/pngrutil.c ****             }
2853:fltk-1.3.4-1/png/pngrutil.c ****          }
2854:fltk-1.3.4-1/png/pngrutil.c **** 
2855:fltk-1.3.4-1/png/pngrutil.c ****          else
2856:fltk-1.3.4-1/png/pngrutil.c ****             keep = PNG_HANDLE_CHUNK_NEVER; /* insufficient memory */
2857:fltk-1.3.4-1/png/pngrutil.c ****       }
2858:fltk-1.3.4-1/png/pngrutil.c **** 
2859:fltk-1.3.4-1/png/pngrutil.c ****       else
2860:fltk-1.3.4-1/png/pngrutil.c ****          /* Use the SAVE_UNKNOWN_CHUNKS code or skip the chunk */
2861:fltk-1.3.4-1/png/pngrutil.c **** #  endif /* READ_USER_CHUNKS */
2862:fltk-1.3.4-1/png/pngrutil.c **** 
2863:fltk-1.3.4-1/png/pngrutil.c **** #  ifdef PNG_SAVE_UNKNOWN_CHUNKS_SUPPORTED
2864:fltk-1.3.4-1/png/pngrutil.c ****       {
2865:fltk-1.3.4-1/png/pngrutil.c ****          /* keep is currently just the per-chunk setting, if there was no
2866:fltk-1.3.4-1/png/pngrutil.c ****           * setting change it to the global default now (not that this may
2867:fltk-1.3.4-1/png/pngrutil.c ****           * still be AS_DEFAULT) then obtain the cache of the chunk if required,
2868:fltk-1.3.4-1/png/pngrutil.c ****           * if not simply skip the chunk.
2869:fltk-1.3.4-1/png/pngrutil.c ****           */
2870:fltk-1.3.4-1/png/pngrutil.c ****          if (keep == PNG_HANDLE_CHUNK_AS_DEFAULT)
2871:fltk-1.3.4-1/png/pngrutil.c ****             keep = png_ptr->unknown_default;
2872:fltk-1.3.4-1/png/pngrutil.c **** 
2873:fltk-1.3.4-1/png/pngrutil.c ****          if (keep == PNG_HANDLE_CHUNK_ALWAYS ||
2874:fltk-1.3.4-1/png/pngrutil.c ****             (keep == PNG_HANDLE_CHUNK_IF_SAFE &&
2875:fltk-1.3.4-1/png/pngrutil.c ****              PNG_CHUNK_ANCILLARY(png_ptr->chunk_name)))
2876:fltk-1.3.4-1/png/pngrutil.c ****          {
2877:fltk-1.3.4-1/png/pngrutil.c ****             if (png_cache_unknown_chunk(png_ptr, length) == 0)
2878:fltk-1.3.4-1/png/pngrutil.c ****                keep = PNG_HANDLE_CHUNK_NEVER;
2879:fltk-1.3.4-1/png/pngrutil.c ****          }
2880:fltk-1.3.4-1/png/pngrutil.c **** 
2881:fltk-1.3.4-1/png/pngrutil.c ****          else
2882:fltk-1.3.4-1/png/pngrutil.c ****             png_crc_finish(png_ptr, length);
2883:fltk-1.3.4-1/png/pngrutil.c ****       }
2884:fltk-1.3.4-1/png/pngrutil.c **** #  else
2885:fltk-1.3.4-1/png/pngrutil.c **** #     ifndef PNG_READ_USER_CHUNKS_SUPPORTED
2886:fltk-1.3.4-1/png/pngrutil.c **** #        error no method to support READ_UNKNOWN_CHUNKS
2887:fltk-1.3.4-1/png/pngrutil.c **** #     endif
2888:fltk-1.3.4-1/png/pngrutil.c **** 
2889:fltk-1.3.4-1/png/pngrutil.c ****       {
2890:fltk-1.3.4-1/png/pngrutil.c ****          /* If here there is no read callback pointer set and no support is
2891:fltk-1.3.4-1/png/pngrutil.c ****           * compiled in to just save the unknown chunks, so simply skip this
2892:fltk-1.3.4-1/png/pngrutil.c ****           * chunk.  If 'keep' is something other than AS_DEFAULT or NEVER then
2893:fltk-1.3.4-1/png/pngrutil.c ****           * the app has erroneously asked for unknown chunk saving when there
2894:fltk-1.3.4-1/png/pngrutil.c ****           * is no support.
2895:fltk-1.3.4-1/png/pngrutil.c ****           */
2896:fltk-1.3.4-1/png/pngrutil.c ****          if (keep > PNG_HANDLE_CHUNK_NEVER)
2897:fltk-1.3.4-1/png/pngrutil.c ****             png_app_error(png_ptr, "no unknown chunk support available");
2898:fltk-1.3.4-1/png/pngrutil.c **** 
2899:fltk-1.3.4-1/png/pngrutil.c ****          png_crc_finish(png_ptr, length);
2900:fltk-1.3.4-1/png/pngrutil.c ****       }
2901:fltk-1.3.4-1/png/pngrutil.c **** #  endif
2902:fltk-1.3.4-1/png/pngrutil.c **** 
2903:fltk-1.3.4-1/png/pngrutil.c **** #  ifdef PNG_STORE_UNKNOWN_CHUNKS_SUPPORTED
2904:fltk-1.3.4-1/png/pngrutil.c ****       /* Now store the chunk in the chunk list if appropriate, and if the limits
2905:fltk-1.3.4-1/png/pngrutil.c ****        * permit it.
2906:fltk-1.3.4-1/png/pngrutil.c ****        */
2907:fltk-1.3.4-1/png/pngrutil.c ****       if (keep == PNG_HANDLE_CHUNK_ALWAYS ||
2908:fltk-1.3.4-1/png/pngrutil.c ****          (keep == PNG_HANDLE_CHUNK_IF_SAFE &&
2909:fltk-1.3.4-1/png/pngrutil.c ****           PNG_CHUNK_ANCILLARY(png_ptr->chunk_name)))
2910:fltk-1.3.4-1/png/pngrutil.c ****       {
2911:fltk-1.3.4-1/png/pngrutil.c **** #     ifdef PNG_USER_LIMITS_SUPPORTED
2912:fltk-1.3.4-1/png/pngrutil.c ****          switch (png_ptr->user_chunk_cache_max)
2913:fltk-1.3.4-1/png/pngrutil.c ****          {
2914:fltk-1.3.4-1/png/pngrutil.c ****             case 2:
2915:fltk-1.3.4-1/png/pngrutil.c ****                png_ptr->user_chunk_cache_max = 1;
2916:fltk-1.3.4-1/png/pngrutil.c ****                png_chunk_benign_error(png_ptr, "no space in chunk cache");
2917:fltk-1.3.4-1/png/pngrutil.c ****                /* FALL THROUGH */
2918:fltk-1.3.4-1/png/pngrutil.c ****             case 1:
2919:fltk-1.3.4-1/png/pngrutil.c ****                /* NOTE: prior to 1.6.0 this case resulted in an unknown critical
2920:fltk-1.3.4-1/png/pngrutil.c ****                 * chunk being skipped, now there will be a hard error below.
2921:fltk-1.3.4-1/png/pngrutil.c ****                 */
2922:fltk-1.3.4-1/png/pngrutil.c ****                break;
2923:fltk-1.3.4-1/png/pngrutil.c **** 
2924:fltk-1.3.4-1/png/pngrutil.c ****             default: /* not at limit */
2925:fltk-1.3.4-1/png/pngrutil.c ****                --(png_ptr->user_chunk_cache_max);
2926:fltk-1.3.4-1/png/pngrutil.c ****                /* FALL THROUGH */
2927:fltk-1.3.4-1/png/pngrutil.c ****             case 0: /* no limit */
2928:fltk-1.3.4-1/png/pngrutil.c **** #     endif /* USER_LIMITS */
2929:fltk-1.3.4-1/png/pngrutil.c ****                /* Here when the limit isn't reached or when limits are compiled
2930:fltk-1.3.4-1/png/pngrutil.c ****                 * out; store the chunk.
2931:fltk-1.3.4-1/png/pngrutil.c ****                 */
2932:fltk-1.3.4-1/png/pngrutil.c ****                png_set_unknown_chunks(png_ptr, info_ptr,
2933:fltk-1.3.4-1/png/pngrutil.c ****                   &png_ptr->unknown_chunk, 1);
2934:fltk-1.3.4-1/png/pngrutil.c ****                handled = 1;
2935:fltk-1.3.4-1/png/pngrutil.c **** #     ifdef PNG_USER_LIMITS_SUPPORTED
2936:fltk-1.3.4-1/png/pngrutil.c ****                break;
2937:fltk-1.3.4-1/png/pngrutil.c ****          }
2938:fltk-1.3.4-1/png/pngrutil.c **** #     endif
2939:fltk-1.3.4-1/png/pngrutil.c ****       }
2940:fltk-1.3.4-1/png/pngrutil.c **** #  else /* no store support: the chunk must be handled by the user callback */
2941:fltk-1.3.4-1/png/pngrutil.c ****       PNG_UNUSED(info_ptr)
2942:fltk-1.3.4-1/png/pngrutil.c **** #  endif
2943:fltk-1.3.4-1/png/pngrutil.c **** 
2944:fltk-1.3.4-1/png/pngrutil.c ****    /* Regardless of the error handling below the cached data (if any) can be
2945:fltk-1.3.4-1/png/pngrutil.c ****     * freed now.  Notice that the data is not freed if there is a png_error, but
2946:fltk-1.3.4-1/png/pngrutil.c ****     * it will be freed by destroy_read_struct.
2947:fltk-1.3.4-1/png/pngrutil.c ****     */
2948:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->unknown_chunk.data != NULL)
2949:fltk-1.3.4-1/png/pngrutil.c ****       png_free(png_ptr, png_ptr->unknown_chunk.data);
2950:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->unknown_chunk.data = NULL;
2951:fltk-1.3.4-1/png/pngrutil.c **** 
2952:fltk-1.3.4-1/png/pngrutil.c **** #else /* !PNG_READ_UNKNOWN_CHUNKS_SUPPORTED */
2953:fltk-1.3.4-1/png/pngrutil.c ****    /* There is no support to read an unknown chunk, so just skip it. */
2954:fltk-1.3.4-1/png/pngrutil.c ****    png_crc_finish(png_ptr, length);
2955:fltk-1.3.4-1/png/pngrutil.c ****    PNG_UNUSED(info_ptr)
2956:fltk-1.3.4-1/png/pngrutil.c ****    PNG_UNUSED(keep)
2957:fltk-1.3.4-1/png/pngrutil.c **** #endif /* !READ_UNKNOWN_CHUNKS */
2958:fltk-1.3.4-1/png/pngrutil.c **** 
2959:fltk-1.3.4-1/png/pngrutil.c ****    /* Check for unhandled critical chunks */
2960:fltk-1.3.4-1/png/pngrutil.c ****    if (handled == 0 && PNG_CHUNK_CRITICAL(png_ptr->chunk_name))
2961:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "unhandled critical chunk");
2962:fltk-1.3.4-1/png/pngrutil.c **** }
2963:fltk-1.3.4-1/png/pngrutil.c **** 
2964:fltk-1.3.4-1/png/pngrutil.c **** /* This function is called to verify that a chunk name is valid.
2965:fltk-1.3.4-1/png/pngrutil.c ****  * This function can't have the "critical chunk check" incorporated
2966:fltk-1.3.4-1/png/pngrutil.c ****  * into it, since in the future we will need to be able to call user
2967:fltk-1.3.4-1/png/pngrutil.c ****  * functions to handle unknown critical chunks after we check that
2968:fltk-1.3.4-1/png/pngrutil.c ****  * the chunk name itself is valid.
2969:fltk-1.3.4-1/png/pngrutil.c ****  */
2970:fltk-1.3.4-1/png/pngrutil.c **** 
2971:fltk-1.3.4-1/png/pngrutil.c **** /* Bit hacking: the test for an invalid byte in the 4 byte chunk name is:
2972:fltk-1.3.4-1/png/pngrutil.c ****  *
2973:fltk-1.3.4-1/png/pngrutil.c ****  * ((c) < 65 || (c) > 122 || ((c) > 90 && (c) < 97))
2974:fltk-1.3.4-1/png/pngrutil.c ****  */
2975:fltk-1.3.4-1/png/pngrutil.c **** 
2976:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
2977:fltk-1.3.4-1/png/pngrutil.c **** png_check_chunk_name(png_structrp png_ptr, png_uint_32 chunk_name)
2978:fltk-1.3.4-1/png/pngrutil.c **** {
2979:fltk-1.3.4-1/png/pngrutil.c ****    int i;
2980:fltk-1.3.4-1/png/pngrutil.c **** 
2981:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_check_chunk_name");
2982:fltk-1.3.4-1/png/pngrutil.c **** 
2983:fltk-1.3.4-1/png/pngrutil.c ****    for (i=1; i<=4; ++i)
2984:fltk-1.3.4-1/png/pngrutil.c ****    {
2985:fltk-1.3.4-1/png/pngrutil.c ****       int c = chunk_name & 0xff;
2986:fltk-1.3.4-1/png/pngrutil.c **** 
2987:fltk-1.3.4-1/png/pngrutil.c ****       if (c < 65 || c > 122 || (c > 90 && c < 97))
2988:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_error(png_ptr, "invalid chunk type");
2989:fltk-1.3.4-1/png/pngrutil.c **** 
2990:fltk-1.3.4-1/png/pngrutil.c ****       chunk_name >>= 8;
2991:fltk-1.3.4-1/png/pngrutil.c ****    }
2992:fltk-1.3.4-1/png/pngrutil.c **** }
2993:fltk-1.3.4-1/png/pngrutil.c **** 
2994:fltk-1.3.4-1/png/pngrutil.c **** /* Combines the row recently read in with the existing pixels in the row.  This
2995:fltk-1.3.4-1/png/pngrutil.c ****  * routine takes care of alpha and transparency if requested.  This routine also
2996:fltk-1.3.4-1/png/pngrutil.c ****  * handles the two methods of progressive display of interlaced images,
2997:fltk-1.3.4-1/png/pngrutil.c ****  * depending on the 'display' value; if 'display' is true then the whole row
2998:fltk-1.3.4-1/png/pngrutil.c ****  * (dp) is filled from the start by replicating the available pixels.  If
2999:fltk-1.3.4-1/png/pngrutil.c ****  * 'display' is false only those pixels present in the pass are filled in.
3000:fltk-1.3.4-1/png/pngrutil.c ****  */
3001:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
3002:fltk-1.3.4-1/png/pngrutil.c **** png_combine_row(png_const_structrp png_ptr, png_bytep dp, int display)
3003:fltk-1.3.4-1/png/pngrutil.c **** {
3004:fltk-1.3.4-1/png/pngrutil.c ****    unsigned int pixel_depth = png_ptr->transformed_pixel_depth;
3005:fltk-1.3.4-1/png/pngrutil.c ****    png_const_bytep sp = png_ptr->row_buf + 1;
3006:fltk-1.3.4-1/png/pngrutil.c ****    png_alloc_size_t row_width = png_ptr->width;
3007:fltk-1.3.4-1/png/pngrutil.c ****    unsigned int pass = png_ptr->pass;
3008:fltk-1.3.4-1/png/pngrutil.c ****    png_bytep end_ptr = 0;
3009:fltk-1.3.4-1/png/pngrutil.c ****    png_byte end_byte = 0;
3010:fltk-1.3.4-1/png/pngrutil.c ****    unsigned int end_mask;
3011:fltk-1.3.4-1/png/pngrutil.c **** 
3012:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_combine_row");
3013:fltk-1.3.4-1/png/pngrutil.c **** 
3014:fltk-1.3.4-1/png/pngrutil.c ****    /* Added in 1.5.6: it should not be possible to enter this routine until at
3015:fltk-1.3.4-1/png/pngrutil.c ****     * least one row has been read from the PNG data and transformed.
3016:fltk-1.3.4-1/png/pngrutil.c ****     */
3017:fltk-1.3.4-1/png/pngrutil.c ****    if (pixel_depth == 0)
3018:fltk-1.3.4-1/png/pngrutil.c ****       png_error(png_ptr, "internal row logic error");
3019:fltk-1.3.4-1/png/pngrutil.c **** 
3020:fltk-1.3.4-1/png/pngrutil.c ****    /* Added in 1.5.4: the pixel depth should match the information returned by
3021:fltk-1.3.4-1/png/pngrutil.c ****     * any call to png_read_update_info at this point.  Do not continue if we got
3022:fltk-1.3.4-1/png/pngrutil.c ****     * this wrong.
3023:fltk-1.3.4-1/png/pngrutil.c ****     */
3024:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->info_rowbytes != 0 && png_ptr->info_rowbytes !=
3025:fltk-1.3.4-1/png/pngrutil.c ****           PNG_ROWBYTES(pixel_depth, row_width))
3026:fltk-1.3.4-1/png/pngrutil.c ****       png_error(png_ptr, "internal row size calculation error");
3027:fltk-1.3.4-1/png/pngrutil.c **** 
3028:fltk-1.3.4-1/png/pngrutil.c ****    /* Don't expect this to ever happen: */
3029:fltk-1.3.4-1/png/pngrutil.c ****    if (row_width == 0)
3030:fltk-1.3.4-1/png/pngrutil.c ****       png_error(png_ptr, "internal row width error");
3031:fltk-1.3.4-1/png/pngrutil.c **** 
3032:fltk-1.3.4-1/png/pngrutil.c ****    /* Preserve the last byte in cases where only part of it will be overwritten,
3033:fltk-1.3.4-1/png/pngrutil.c ****     * the multiply below may overflow, we don't care because ANSI-C guarantees
3034:fltk-1.3.4-1/png/pngrutil.c ****     * we get the low bits.
3035:fltk-1.3.4-1/png/pngrutil.c ****     */
3036:fltk-1.3.4-1/png/pngrutil.c ****    end_mask = (pixel_depth * row_width) & 7;
3037:fltk-1.3.4-1/png/pngrutil.c ****    if (end_mask != 0)
3038:fltk-1.3.4-1/png/pngrutil.c ****    {
3039:fltk-1.3.4-1/png/pngrutil.c ****       /* end_ptr == NULL is a flag to say do nothing */
3040:fltk-1.3.4-1/png/pngrutil.c ****       end_ptr = dp + PNG_ROWBYTES(pixel_depth, row_width) - 1;
3041:fltk-1.3.4-1/png/pngrutil.c ****       end_byte = *end_ptr;
3042:fltk-1.3.4-1/png/pngrutil.c **** #     ifdef PNG_READ_PACKSWAP_SUPPORTED
3043:fltk-1.3.4-1/png/pngrutil.c ****          if ((png_ptr->transformations & PNG_PACKSWAP) != 0)
3044:fltk-1.3.4-1/png/pngrutil.c ****             /* little-endian byte */
3045:fltk-1.3.4-1/png/pngrutil.c ****             end_mask = 0xff << end_mask;
3046:fltk-1.3.4-1/png/pngrutil.c **** 
3047:fltk-1.3.4-1/png/pngrutil.c ****          else /* big-endian byte */
3048:fltk-1.3.4-1/png/pngrutil.c **** #     endif
3049:fltk-1.3.4-1/png/pngrutil.c ****          end_mask = 0xff >> end_mask;
3050:fltk-1.3.4-1/png/pngrutil.c ****       /* end_mask is now the bits to *keep* from the destination row */
3051:fltk-1.3.4-1/png/pngrutil.c ****    }
3052:fltk-1.3.4-1/png/pngrutil.c **** 
3053:fltk-1.3.4-1/png/pngrutil.c ****    /* For non-interlaced images this reduces to a memcpy(). A memcpy()
3054:fltk-1.3.4-1/png/pngrutil.c ****     * will also happen if interlacing isn't supported or if the application
3055:fltk-1.3.4-1/png/pngrutil.c ****     * does not call png_set_interlace_handling().  In the latter cases the
3056:fltk-1.3.4-1/png/pngrutil.c ****     * caller just gets a sequence of the unexpanded rows from each interlace
3057:fltk-1.3.4-1/png/pngrutil.c ****     * pass.
3058:fltk-1.3.4-1/png/pngrutil.c ****     */
3059:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_INTERLACING_SUPPORTED
3060:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->interlaced != 0 &&
3061:fltk-1.3.4-1/png/pngrutil.c ****        (png_ptr->transformations & PNG_INTERLACE) != 0 &&
3062:fltk-1.3.4-1/png/pngrutil.c ****        pass < 6 && (display == 0 ||
3063:fltk-1.3.4-1/png/pngrutil.c ****        /* The following copies everything for 'display' on passes 0, 2 and 4. */
3064:fltk-1.3.4-1/png/pngrutil.c ****        (display == 1 && (pass & 1) != 0)))
3065:fltk-1.3.4-1/png/pngrutil.c ****    {
3066:fltk-1.3.4-1/png/pngrutil.c ****       /* Narrow images may have no bits in a pass; the caller should handle
3067:fltk-1.3.4-1/png/pngrutil.c ****        * this, but this test is cheap:
3068:fltk-1.3.4-1/png/pngrutil.c ****        */
3069:fltk-1.3.4-1/png/pngrutil.c ****       if (row_width <= PNG_PASS_START_COL(pass))
3070:fltk-1.3.4-1/png/pngrutil.c ****          return;
3071:fltk-1.3.4-1/png/pngrutil.c **** 
3072:fltk-1.3.4-1/png/pngrutil.c ****       if (pixel_depth < 8)
3073:fltk-1.3.4-1/png/pngrutil.c ****       {
3074:fltk-1.3.4-1/png/pngrutil.c ****          /* For pixel depths up to 4 bpp the 8-pixel mask can be expanded to fit
3075:fltk-1.3.4-1/png/pngrutil.c ****           * into 32 bits, then a single loop over the bytes using the four byte
3076:fltk-1.3.4-1/png/pngrutil.c ****           * values in the 32-bit mask can be used.  For the 'display' option the
3077:fltk-1.3.4-1/png/pngrutil.c ****           * expanded mask may also not require any masking within a byte.  To
3078:fltk-1.3.4-1/png/pngrutil.c ****           * make this work the PACKSWAP option must be taken into account - it
3079:fltk-1.3.4-1/png/pngrutil.c ****           * simply requires the pixels to be reversed in each byte.
3080:fltk-1.3.4-1/png/pngrutil.c ****           *
3081:fltk-1.3.4-1/png/pngrutil.c ****           * The 'regular' case requires a mask for each of the first 6 passes,
3082:fltk-1.3.4-1/png/pngrutil.c ****           * the 'display' case does a copy for the even passes in the range
3083:fltk-1.3.4-1/png/pngrutil.c ****           * 0..6.  This has already been handled in the test above.
3084:fltk-1.3.4-1/png/pngrutil.c ****           *
3085:fltk-1.3.4-1/png/pngrutil.c ****           * The masks are arranged as four bytes with the first byte to use in
3086:fltk-1.3.4-1/png/pngrutil.c ****           * the lowest bits (little-endian) regardless of the order (PACKSWAP or
3087:fltk-1.3.4-1/png/pngrutil.c ****           * not) of the pixels in each byte.
3088:fltk-1.3.4-1/png/pngrutil.c ****           *
3089:fltk-1.3.4-1/png/pngrutil.c ****           * NOTE: the whole of this logic depends on the caller of this function
3090:fltk-1.3.4-1/png/pngrutil.c ****           * only calling it on rows appropriate to the pass.  This function only
3091:fltk-1.3.4-1/png/pngrutil.c ****           * understands the 'x' logic; the 'y' logic is handled by the caller.
3092:fltk-1.3.4-1/png/pngrutil.c ****           *
3093:fltk-1.3.4-1/png/pngrutil.c ****           * The following defines allow generation of compile time constant bit
3094:fltk-1.3.4-1/png/pngrutil.c ****           * masks for each pixel depth and each possibility of swapped or not
3095:fltk-1.3.4-1/png/pngrutil.c ****           * swapped bytes.  Pass 'p' is in the range 0..6; 'x', a pixel index,
3096:fltk-1.3.4-1/png/pngrutil.c ****           * is in the range 0..7; and the result is 1 if the pixel is to be
3097:fltk-1.3.4-1/png/pngrutil.c ****           * copied in the pass, 0 if not.  'S' is for the sparkle method, 'B'
3098:fltk-1.3.4-1/png/pngrutil.c ****           * for the block method.
3099:fltk-1.3.4-1/png/pngrutil.c ****           *
3100:fltk-1.3.4-1/png/pngrutil.c ****           * With some compilers a compile time expression of the general form:
3101:fltk-1.3.4-1/png/pngrutil.c ****           *
3102:fltk-1.3.4-1/png/pngrutil.c ****           *    (shift >= 32) ? (a >> (shift-32)) : (b >> shift)
3103:fltk-1.3.4-1/png/pngrutil.c ****           *
3104:fltk-1.3.4-1/png/pngrutil.c ****           * Produces warnings with values of 'shift' in the range 33 to 63
3105:fltk-1.3.4-1/png/pngrutil.c ****           * because the right hand side of the ?: expression is evaluated by
3106:fltk-1.3.4-1/png/pngrutil.c ****           * the compiler even though it isn't used.  Microsoft Visual C (various
3107:fltk-1.3.4-1/png/pngrutil.c ****           * versions) and the Intel C compiler are known to do this.  To avoid
3108:fltk-1.3.4-1/png/pngrutil.c ****           * this the following macros are used in 1.5.6.  This is a temporary
3109:fltk-1.3.4-1/png/pngrutil.c ****           * solution to avoid destabilizing the code during the release process.
3110:fltk-1.3.4-1/png/pngrutil.c ****           */
3111:fltk-1.3.4-1/png/pngrutil.c **** #        if PNG_USE_COMPILE_TIME_MASKS
3112:fltk-1.3.4-1/png/pngrutil.c **** #           define PNG_LSR(x,s) ((x)>>((s) & 0x1f))
3113:fltk-1.3.4-1/png/pngrutil.c **** #           define PNG_LSL(x,s) ((x)<<((s) & 0x1f))
3114:fltk-1.3.4-1/png/pngrutil.c **** #        else
3115:fltk-1.3.4-1/png/pngrutil.c **** #           define PNG_LSR(x,s) ((x)>>(s))
3116:fltk-1.3.4-1/png/pngrutil.c **** #           define PNG_LSL(x,s) ((x)<<(s))
3117:fltk-1.3.4-1/png/pngrutil.c **** #        endif
3118:fltk-1.3.4-1/png/pngrutil.c **** #        define S_COPY(p,x) (((p)<4 ? PNG_LSR(0x80088822,(3-(p))*8+(7-(x))) :\
3119:fltk-1.3.4-1/png/pngrutil.c ****            PNG_LSR(0xaa55ff00,(7-(p))*8+(7-(x)))) & 1)
3120:fltk-1.3.4-1/png/pngrutil.c **** #        define B_COPY(p,x) (((p)<4 ? PNG_LSR(0xff0fff33,(3-(p))*8+(7-(x))) :\
3121:fltk-1.3.4-1/png/pngrutil.c ****            PNG_LSR(0xff55ff00,(7-(p))*8+(7-(x)))) & 1)
3122:fltk-1.3.4-1/png/pngrutil.c **** 
3123:fltk-1.3.4-1/png/pngrutil.c ****          /* Return a mask for pass 'p' pixel 'x' at depth 'd'.  The mask is
3124:fltk-1.3.4-1/png/pngrutil.c ****           * little endian - the first pixel is at bit 0 - however the extra
3125:fltk-1.3.4-1/png/pngrutil.c ****           * parameter 's' can be set to cause the mask position to be swapped
3126:fltk-1.3.4-1/png/pngrutil.c ****           * within each byte, to match the PNG format.  This is done by XOR of
3127:fltk-1.3.4-1/png/pngrutil.c ****           * the shift with 7, 6 or 4 for bit depths 1, 2 and 4.
3128:fltk-1.3.4-1/png/pngrutil.c ****           */
3129:fltk-1.3.4-1/png/pngrutil.c **** #        define PIXEL_MASK(p,x,d,s) \
3130:fltk-1.3.4-1/png/pngrutil.c ****             (PNG_LSL(((PNG_LSL(1U,(d)))-1),(((x)*(d))^((s)?8-(d):0))))
3131:fltk-1.3.4-1/png/pngrutil.c **** 
3132:fltk-1.3.4-1/png/pngrutil.c ****          /* Hence generate the appropriate 'block' or 'sparkle' pixel copy mask.
3133:fltk-1.3.4-1/png/pngrutil.c ****           */
3134:fltk-1.3.4-1/png/pngrutil.c **** #        define S_MASKx(p,x,d,s) (S_COPY(p,x)?PIXEL_MASK(p,x,d,s):0)
3135:fltk-1.3.4-1/png/pngrutil.c **** #        define B_MASKx(p,x,d,s) (B_COPY(p,x)?PIXEL_MASK(p,x,d,s):0)
3136:fltk-1.3.4-1/png/pngrutil.c **** 
3137:fltk-1.3.4-1/png/pngrutil.c ****          /* Combine 8 of these to get the full mask.  For the 1-bpp and 2-bpp
3138:fltk-1.3.4-1/png/pngrutil.c ****           * cases the result needs replicating, for the 4-bpp case the above
3139:fltk-1.3.4-1/png/pngrutil.c ****           * generates a full 32 bits.
3140:fltk-1.3.4-1/png/pngrutil.c ****           */
3141:fltk-1.3.4-1/png/pngrutil.c **** #        define MASK_EXPAND(m,d) ((m)*((d)==1?0x01010101:((d)==2?0x00010001:1)))
3142:fltk-1.3.4-1/png/pngrutil.c **** 
3143:fltk-1.3.4-1/png/pngrutil.c **** #        define S_MASK(p,d,s) MASK_EXPAND(S_MASKx(p,0,d,s) + S_MASKx(p,1,d,s) +\
3144:fltk-1.3.4-1/png/pngrutil.c ****             S_MASKx(p,2,d,s) + S_MASKx(p,3,d,s) + S_MASKx(p,4,d,s) +\
3145:fltk-1.3.4-1/png/pngrutil.c ****             S_MASKx(p,5,d,s) + S_MASKx(p,6,d,s) + S_MASKx(p,7,d,s), d)
3146:fltk-1.3.4-1/png/pngrutil.c **** 
3147:fltk-1.3.4-1/png/pngrutil.c **** #        define B_MASK(p,d,s) MASK_EXPAND(B_MASKx(p,0,d,s) + B_MASKx(p,1,d,s) +\
3148:fltk-1.3.4-1/png/pngrutil.c ****             B_MASKx(p,2,d,s) + B_MASKx(p,3,d,s) + B_MASKx(p,4,d,s) +\
3149:fltk-1.3.4-1/png/pngrutil.c ****             B_MASKx(p,5,d,s) + B_MASKx(p,6,d,s) + B_MASKx(p,7,d,s), d)
3150:fltk-1.3.4-1/png/pngrutil.c **** 
3151:fltk-1.3.4-1/png/pngrutil.c **** #if PNG_USE_COMPILE_TIME_MASKS
3152:fltk-1.3.4-1/png/pngrutil.c ****          /* Utility macros to construct all the masks for a depth/swap
3153:fltk-1.3.4-1/png/pngrutil.c ****           * combination.  The 's' parameter says whether the format is PNG
3154:fltk-1.3.4-1/png/pngrutil.c ****           * (big endian bytes) or not.  Only the three odd-numbered passes are
3155:fltk-1.3.4-1/png/pngrutil.c ****           * required for the display/block algorithm.
3156:fltk-1.3.4-1/png/pngrutil.c ****           */
3157:fltk-1.3.4-1/png/pngrutil.c **** #        define S_MASKS(d,s) { S_MASK(0,d,s), S_MASK(1,d,s), S_MASK(2,d,s),\
3158:fltk-1.3.4-1/png/pngrutil.c ****             S_MASK(3,d,s), S_MASK(4,d,s), S_MASK(5,d,s) }
3159:fltk-1.3.4-1/png/pngrutil.c **** 
3160:fltk-1.3.4-1/png/pngrutil.c **** #        define B_MASKS(d,s) { B_MASK(1,d,s), B_MASK(3,d,s), B_MASK(5,d,s) }
3161:fltk-1.3.4-1/png/pngrutil.c **** 
3162:fltk-1.3.4-1/png/pngrutil.c **** #        define DEPTH_INDEX(d) ((d)==1?0:((d)==2?1:2))
3163:fltk-1.3.4-1/png/pngrutil.c **** 
3164:fltk-1.3.4-1/png/pngrutil.c ****          /* Hence the pre-compiled masks indexed by PACKSWAP (or not), depth and
3165:fltk-1.3.4-1/png/pngrutil.c ****           * then pass:
3166:fltk-1.3.4-1/png/pngrutil.c ****           */
3167:fltk-1.3.4-1/png/pngrutil.c ****          static PNG_CONST png_uint_32 row_mask[2/*PACKSWAP*/][3/*depth*/][6] =
3168:fltk-1.3.4-1/png/pngrutil.c ****          {
3169:fltk-1.3.4-1/png/pngrutil.c ****             /* Little-endian byte masks for PACKSWAP */
3170:fltk-1.3.4-1/png/pngrutil.c ****             { S_MASKS(1,0), S_MASKS(2,0), S_MASKS(4,0) },
3171:fltk-1.3.4-1/png/pngrutil.c ****             /* Normal (big-endian byte) masks - PNG format */
3172:fltk-1.3.4-1/png/pngrutil.c ****             { S_MASKS(1,1), S_MASKS(2,1), S_MASKS(4,1) }
3173:fltk-1.3.4-1/png/pngrutil.c ****          };
3174:fltk-1.3.4-1/png/pngrutil.c **** 
3175:fltk-1.3.4-1/png/pngrutil.c ****          /* display_mask has only three entries for the odd passes, so index by
3176:fltk-1.3.4-1/png/pngrutil.c ****           * pass>>1.
3177:fltk-1.3.4-1/png/pngrutil.c ****           */
3178:fltk-1.3.4-1/png/pngrutil.c ****          static PNG_CONST png_uint_32 display_mask[2][3][3] =
3179:fltk-1.3.4-1/png/pngrutil.c ****          {
3180:fltk-1.3.4-1/png/pngrutil.c ****             /* Little-endian byte masks for PACKSWAP */
3181:fltk-1.3.4-1/png/pngrutil.c ****             { B_MASKS(1,0), B_MASKS(2,0), B_MASKS(4,0) },
3182:fltk-1.3.4-1/png/pngrutil.c ****             /* Normal (big-endian byte) masks - PNG format */
3183:fltk-1.3.4-1/png/pngrutil.c ****             { B_MASKS(1,1), B_MASKS(2,1), B_MASKS(4,1) }
3184:fltk-1.3.4-1/png/pngrutil.c ****          };
3185:fltk-1.3.4-1/png/pngrutil.c **** 
3186:fltk-1.3.4-1/png/pngrutil.c **** #        define MASK(pass,depth,display,png)\
3187:fltk-1.3.4-1/png/pngrutil.c ****             ((display)?display_mask[png][DEPTH_INDEX(depth)][pass>>1]:\
3188:fltk-1.3.4-1/png/pngrutil.c ****                row_mask[png][DEPTH_INDEX(depth)][pass])
3189:fltk-1.3.4-1/png/pngrutil.c **** 
3190:fltk-1.3.4-1/png/pngrutil.c **** #else /* !PNG_USE_COMPILE_TIME_MASKS */
3191:fltk-1.3.4-1/png/pngrutil.c ****          /* This is the runtime alternative: it seems unlikely that this will
3192:fltk-1.3.4-1/png/pngrutil.c ****           * ever be either smaller or faster than the compile time approach.
3193:fltk-1.3.4-1/png/pngrutil.c ****           */
3194:fltk-1.3.4-1/png/pngrutil.c **** #        define MASK(pass,depth,display,png)\
3195:fltk-1.3.4-1/png/pngrutil.c ****             ((display)?B_MASK(pass,depth,png):S_MASK(pass,depth,png))
3196:fltk-1.3.4-1/png/pngrutil.c **** #endif /* !USE_COMPILE_TIME_MASKS */
3197:fltk-1.3.4-1/png/pngrutil.c **** 
3198:fltk-1.3.4-1/png/pngrutil.c ****          /* Use the appropriate mask to copy the required bits.  In some cases
3199:fltk-1.3.4-1/png/pngrutil.c ****           * the byte mask will be 0 or 0xff; optimize these cases.  row_width is
3200:fltk-1.3.4-1/png/pngrutil.c ****           * the number of pixels, but the code copies bytes, so it is necessary
3201:fltk-1.3.4-1/png/pngrutil.c ****           * to special case the end.
3202:fltk-1.3.4-1/png/pngrutil.c ****           */
3203:fltk-1.3.4-1/png/pngrutil.c ****          png_uint_32 pixels_per_byte = 8 / pixel_depth;
3204:fltk-1.3.4-1/png/pngrutil.c ****          png_uint_32 mask;
3205:fltk-1.3.4-1/png/pngrutil.c **** 
3206:fltk-1.3.4-1/png/pngrutil.c **** #        ifdef PNG_READ_PACKSWAP_SUPPORTED
3207:fltk-1.3.4-1/png/pngrutil.c ****             if ((png_ptr->transformations & PNG_PACKSWAP) != 0)
3208:fltk-1.3.4-1/png/pngrutil.c ****                mask = MASK(pass, pixel_depth, display, 0);
3209:fltk-1.3.4-1/png/pngrutil.c **** 
3210:fltk-1.3.4-1/png/pngrutil.c ****             else
3211:fltk-1.3.4-1/png/pngrutil.c **** #        endif
3212:fltk-1.3.4-1/png/pngrutil.c ****             mask = MASK(pass, pixel_depth, display, 1);
3213:fltk-1.3.4-1/png/pngrutil.c **** 
3214:fltk-1.3.4-1/png/pngrutil.c ****          for (;;)
3215:fltk-1.3.4-1/png/pngrutil.c ****          {
3216:fltk-1.3.4-1/png/pngrutil.c ****             png_uint_32 m;
3217:fltk-1.3.4-1/png/pngrutil.c **** 
3218:fltk-1.3.4-1/png/pngrutil.c ****             /* It doesn't matter in the following if png_uint_32 has more than
3219:fltk-1.3.4-1/png/pngrutil.c ****              * 32 bits because the high bits always match those in m<<24; it is,
3220:fltk-1.3.4-1/png/pngrutil.c ****              * however, essential to use OR here, not +, because of this.
3221:fltk-1.3.4-1/png/pngrutil.c ****              */
3222:fltk-1.3.4-1/png/pngrutil.c ****             m = mask;
3223:fltk-1.3.4-1/png/pngrutil.c ****             mask = (m >> 8) | (m << 24); /* rotate right to good compilers */
3224:fltk-1.3.4-1/png/pngrutil.c ****             m &= 0xff;
3225:fltk-1.3.4-1/png/pngrutil.c **** 
3226:fltk-1.3.4-1/png/pngrutil.c ****             if (m != 0) /* something to copy */
3227:fltk-1.3.4-1/png/pngrutil.c ****             {
3228:fltk-1.3.4-1/png/pngrutil.c ****                if (m != 0xff)
3229:fltk-1.3.4-1/png/pngrutil.c ****                   *dp = (png_byte)((*dp & ~m) | (*sp & m));
3230:fltk-1.3.4-1/png/pngrutil.c ****                else
3231:fltk-1.3.4-1/png/pngrutil.c ****                   *dp = *sp;
3232:fltk-1.3.4-1/png/pngrutil.c ****             }
3233:fltk-1.3.4-1/png/pngrutil.c **** 
3234:fltk-1.3.4-1/png/pngrutil.c ****             /* NOTE: this may overwrite the last byte with garbage if the image
3235:fltk-1.3.4-1/png/pngrutil.c ****              * is not an exact number of bytes wide; libpng has always done
3236:fltk-1.3.4-1/png/pngrutil.c ****              * this.
3237:fltk-1.3.4-1/png/pngrutil.c ****              */
3238:fltk-1.3.4-1/png/pngrutil.c ****             if (row_width <= pixels_per_byte)
3239:fltk-1.3.4-1/png/pngrutil.c ****                break; /* May need to restore part of the last byte */
3240:fltk-1.3.4-1/png/pngrutil.c **** 
3241:fltk-1.3.4-1/png/pngrutil.c ****             row_width -= pixels_per_byte;
3242:fltk-1.3.4-1/png/pngrutil.c ****             ++dp;
3243:fltk-1.3.4-1/png/pngrutil.c ****             ++sp;
3244:fltk-1.3.4-1/png/pngrutil.c ****          }
3245:fltk-1.3.4-1/png/pngrutil.c ****       }
3246:fltk-1.3.4-1/png/pngrutil.c **** 
3247:fltk-1.3.4-1/png/pngrutil.c ****       else /* pixel_depth >= 8 */
3248:fltk-1.3.4-1/png/pngrutil.c ****       {
3249:fltk-1.3.4-1/png/pngrutil.c ****          unsigned int bytes_to_copy, bytes_to_jump;
3250:fltk-1.3.4-1/png/pngrutil.c **** 
3251:fltk-1.3.4-1/png/pngrutil.c ****          /* Validate the depth - it must be a multiple of 8 */
3252:fltk-1.3.4-1/png/pngrutil.c ****          if (pixel_depth & 7)
3253:fltk-1.3.4-1/png/pngrutil.c ****             png_error(png_ptr, "invalid user transform pixel depth");
3254:fltk-1.3.4-1/png/pngrutil.c **** 
3255:fltk-1.3.4-1/png/pngrutil.c ****          pixel_depth >>= 3; /* now in bytes */
3256:fltk-1.3.4-1/png/pngrutil.c ****          row_width *= pixel_depth;
3257:fltk-1.3.4-1/png/pngrutil.c **** 
3258:fltk-1.3.4-1/png/pngrutil.c ****          /* Regardless of pass number the Adam 7 interlace always results in a
3259:fltk-1.3.4-1/png/pngrutil.c ****           * fixed number of pixels to copy then to skip.  There may be a
3260:fltk-1.3.4-1/png/pngrutil.c ****           * different number of pixels to skip at the start though.
3261:fltk-1.3.4-1/png/pngrutil.c ****           */
3262:fltk-1.3.4-1/png/pngrutil.c ****          {
3263:fltk-1.3.4-1/png/pngrutil.c ****             unsigned int offset = PNG_PASS_START_COL(pass) * pixel_depth;
3264:fltk-1.3.4-1/png/pngrutil.c **** 
3265:fltk-1.3.4-1/png/pngrutil.c ****             row_width -= offset;
3266:fltk-1.3.4-1/png/pngrutil.c ****             dp += offset;
3267:fltk-1.3.4-1/png/pngrutil.c ****             sp += offset;
3268:fltk-1.3.4-1/png/pngrutil.c ****          }
3269:fltk-1.3.4-1/png/pngrutil.c **** 
3270:fltk-1.3.4-1/png/pngrutil.c ****          /* Work out the bytes to copy. */
3271:fltk-1.3.4-1/png/pngrutil.c ****          if (display != 0)
3272:fltk-1.3.4-1/png/pngrutil.c ****          {
3273:fltk-1.3.4-1/png/pngrutil.c ****             /* When doing the 'block' algorithm the pixel in the pass gets
3274:fltk-1.3.4-1/png/pngrutil.c ****              * replicated to adjacent pixels.  This is why the even (0,2,4,6)
3275:fltk-1.3.4-1/png/pngrutil.c ****              * passes are skipped above - the entire expanded row is copied.
3276:fltk-1.3.4-1/png/pngrutil.c ****              */
3277:fltk-1.3.4-1/png/pngrutil.c ****             bytes_to_copy = (1<<((6-pass)>>1)) * pixel_depth;
3278:fltk-1.3.4-1/png/pngrutil.c **** 
3279:fltk-1.3.4-1/png/pngrutil.c ****             /* But don't allow this number to exceed the actual row width. */
3280:fltk-1.3.4-1/png/pngrutil.c ****             if (bytes_to_copy > row_width)
3281:fltk-1.3.4-1/png/pngrutil.c ****                bytes_to_copy = (unsigned int)/*SAFE*/row_width;
3282:fltk-1.3.4-1/png/pngrutil.c ****          }
3283:fltk-1.3.4-1/png/pngrutil.c **** 
3284:fltk-1.3.4-1/png/pngrutil.c ****          else /* normal row; Adam7 only ever gives us one pixel to copy. */
3285:fltk-1.3.4-1/png/pngrutil.c ****             bytes_to_copy = pixel_depth;
3286:fltk-1.3.4-1/png/pngrutil.c **** 
3287:fltk-1.3.4-1/png/pngrutil.c ****          /* In Adam7 there is a constant offset between where the pixels go. */
3288:fltk-1.3.4-1/png/pngrutil.c ****          bytes_to_jump = PNG_PASS_COL_OFFSET(pass) * pixel_depth;
3289:fltk-1.3.4-1/png/pngrutil.c **** 
3290:fltk-1.3.4-1/png/pngrutil.c ****          /* And simply copy these bytes.  Some optimization is possible here,
3291:fltk-1.3.4-1/png/pngrutil.c ****           * depending on the value of 'bytes_to_copy'.  Special case the low
3292:fltk-1.3.4-1/png/pngrutil.c ****           * byte counts, which we know to be frequent.
3293:fltk-1.3.4-1/png/pngrutil.c ****           *
3294:fltk-1.3.4-1/png/pngrutil.c ****           * Notice that these cases all 'return' rather than 'break' - this
3295:fltk-1.3.4-1/png/pngrutil.c ****           * avoids an unnecessary test on whether to restore the last byte
3296:fltk-1.3.4-1/png/pngrutil.c ****           * below.
3297:fltk-1.3.4-1/png/pngrutil.c ****           */
3298:fltk-1.3.4-1/png/pngrutil.c ****          switch (bytes_to_copy)
3299:fltk-1.3.4-1/png/pngrutil.c ****          {
3300:fltk-1.3.4-1/png/pngrutil.c ****             case 1:
3301:fltk-1.3.4-1/png/pngrutil.c ****                for (;;)
3302:fltk-1.3.4-1/png/pngrutil.c ****                {
3303:fltk-1.3.4-1/png/pngrutil.c ****                   *dp = *sp;
3304:fltk-1.3.4-1/png/pngrutil.c **** 
3305:fltk-1.3.4-1/png/pngrutil.c ****                   if (row_width <= bytes_to_jump)
3306:fltk-1.3.4-1/png/pngrutil.c ****                      return;
3307:fltk-1.3.4-1/png/pngrutil.c **** 
3308:fltk-1.3.4-1/png/pngrutil.c ****                   dp += bytes_to_jump;
3309:fltk-1.3.4-1/png/pngrutil.c ****                   sp += bytes_to_jump;
3310:fltk-1.3.4-1/png/pngrutil.c ****                   row_width -= bytes_to_jump;
3311:fltk-1.3.4-1/png/pngrutil.c ****                }
3312:fltk-1.3.4-1/png/pngrutil.c **** 
3313:fltk-1.3.4-1/png/pngrutil.c ****             case 2:
3314:fltk-1.3.4-1/png/pngrutil.c ****                /* There is a possibility of a partial copy at the end here; this
3315:fltk-1.3.4-1/png/pngrutil.c ****                 * slows the code down somewhat.
3316:fltk-1.3.4-1/png/pngrutil.c ****                 */
3317:fltk-1.3.4-1/png/pngrutil.c ****                do
3318:fltk-1.3.4-1/png/pngrutil.c ****                {
3319:fltk-1.3.4-1/png/pngrutil.c ****                   dp[0] = sp[0], dp[1] = sp[1];
3320:fltk-1.3.4-1/png/pngrutil.c **** 
3321:fltk-1.3.4-1/png/pngrutil.c ****                   if (row_width <= bytes_to_jump)
3322:fltk-1.3.4-1/png/pngrutil.c ****                      return;
3323:fltk-1.3.4-1/png/pngrutil.c **** 
3324:fltk-1.3.4-1/png/pngrutil.c ****                   sp += bytes_to_jump;
3325:fltk-1.3.4-1/png/pngrutil.c ****                   dp += bytes_to_jump;
3326:fltk-1.3.4-1/png/pngrutil.c ****                   row_width -= bytes_to_jump;
3327:fltk-1.3.4-1/png/pngrutil.c ****                }
3328:fltk-1.3.4-1/png/pngrutil.c ****                while (row_width > 1);
3329:fltk-1.3.4-1/png/pngrutil.c **** 
3330:fltk-1.3.4-1/png/pngrutil.c ****                /* And there can only be one byte left at this point: */
3331:fltk-1.3.4-1/png/pngrutil.c ****                *dp = *sp;
3332:fltk-1.3.4-1/png/pngrutil.c ****                return;
3333:fltk-1.3.4-1/png/pngrutil.c **** 
3334:fltk-1.3.4-1/png/pngrutil.c ****             case 3:
3335:fltk-1.3.4-1/png/pngrutil.c ****                /* This can only be the RGB case, so each copy is exactly one
3336:fltk-1.3.4-1/png/pngrutil.c ****                 * pixel and it is not necessary to check for a partial copy.
3337:fltk-1.3.4-1/png/pngrutil.c ****                 */
3338:fltk-1.3.4-1/png/pngrutil.c ****                for (;;)
3339:fltk-1.3.4-1/png/pngrutil.c ****                {
3340:fltk-1.3.4-1/png/pngrutil.c ****                   dp[0] = sp[0], dp[1] = sp[1], dp[2] = sp[2];
3341:fltk-1.3.4-1/png/pngrutil.c **** 
3342:fltk-1.3.4-1/png/pngrutil.c ****                   if (row_width <= bytes_to_jump)
3343:fltk-1.3.4-1/png/pngrutil.c ****                      return;
3344:fltk-1.3.4-1/png/pngrutil.c **** 
3345:fltk-1.3.4-1/png/pngrutil.c ****                   sp += bytes_to_jump;
3346:fltk-1.3.4-1/png/pngrutil.c ****                   dp += bytes_to_jump;
3347:fltk-1.3.4-1/png/pngrutil.c ****                   row_width -= bytes_to_jump;
3348:fltk-1.3.4-1/png/pngrutil.c ****                }
3349:fltk-1.3.4-1/png/pngrutil.c **** 
3350:fltk-1.3.4-1/png/pngrutil.c ****             default:
3351:fltk-1.3.4-1/png/pngrutil.c **** #if PNG_ALIGN_TYPE != PNG_ALIGN_NONE
3352:fltk-1.3.4-1/png/pngrutil.c ****                /* Check for double byte alignment and, if possible, use a
3353:fltk-1.3.4-1/png/pngrutil.c ****                 * 16-bit copy.  Don't attempt this for narrow images - ones that
3354:fltk-1.3.4-1/png/pngrutil.c ****                 * are less than an interlace panel wide.  Don't attempt it for
3355:fltk-1.3.4-1/png/pngrutil.c ****                 * wide bytes_to_copy either - use the memcpy there.
3356:fltk-1.3.4-1/png/pngrutil.c ****                 */
3357:fltk-1.3.4-1/png/pngrutil.c ****                if (bytes_to_copy < 16 /*else use memcpy*/ &&
3358:fltk-1.3.4-1/png/pngrutil.c ****                    png_isaligned(dp, png_uint_16) &&
3359:fltk-1.3.4-1/png/pngrutil.c ****                    png_isaligned(sp, png_uint_16) &&
3360:fltk-1.3.4-1/png/pngrutil.c ****                    bytes_to_copy % (sizeof (png_uint_16)) == 0 &&
3361:fltk-1.3.4-1/png/pngrutil.c ****                    bytes_to_jump % (sizeof (png_uint_16)) == 0)
3362:fltk-1.3.4-1/png/pngrutil.c ****                {
3363:fltk-1.3.4-1/png/pngrutil.c ****                   /* Everything is aligned for png_uint_16 copies, but try for
3364:fltk-1.3.4-1/png/pngrutil.c ****                    * png_uint_32 first.
3365:fltk-1.3.4-1/png/pngrutil.c ****                    */
3366:fltk-1.3.4-1/png/pngrutil.c ****                   if (png_isaligned(dp, png_uint_32) != 0 &&
3367:fltk-1.3.4-1/png/pngrutil.c ****                       png_isaligned(sp, png_uint_32) != 0 &&
3368:fltk-1.3.4-1/png/pngrutil.c ****                       bytes_to_copy % (sizeof (png_uint_32)) == 0 &&
3369:fltk-1.3.4-1/png/pngrutil.c ****                       bytes_to_jump % (sizeof (png_uint_32)) == 0)
3370:fltk-1.3.4-1/png/pngrutil.c ****                   {
3371:fltk-1.3.4-1/png/pngrutil.c ****                      png_uint_32p dp32 = png_aligncast(png_uint_32p,dp);
3372:fltk-1.3.4-1/png/pngrutil.c ****                      png_const_uint_32p sp32 = png_aligncastconst(
3373:fltk-1.3.4-1/png/pngrutil.c ****                          png_const_uint_32p, sp);
3374:fltk-1.3.4-1/png/pngrutil.c ****                      size_t skip = (bytes_to_jump-bytes_to_copy) /
3375:fltk-1.3.4-1/png/pngrutil.c ****                          (sizeof (png_uint_32));
3376:fltk-1.3.4-1/png/pngrutil.c **** 
3377:fltk-1.3.4-1/png/pngrutil.c ****                      do
3378:fltk-1.3.4-1/png/pngrutil.c ****                      {
3379:fltk-1.3.4-1/png/pngrutil.c ****                         size_t c = bytes_to_copy;
3380:fltk-1.3.4-1/png/pngrutil.c ****                         do
3381:fltk-1.3.4-1/png/pngrutil.c ****                         {
3382:fltk-1.3.4-1/png/pngrutil.c ****                            *dp32++ = *sp32++;
3383:fltk-1.3.4-1/png/pngrutil.c ****                            c -= (sizeof (png_uint_32));
3384:fltk-1.3.4-1/png/pngrutil.c ****                         }
3385:fltk-1.3.4-1/png/pngrutil.c ****                         while (c > 0);
3386:fltk-1.3.4-1/png/pngrutil.c **** 
3387:fltk-1.3.4-1/png/pngrutil.c ****                         if (row_width <= bytes_to_jump)
3388:fltk-1.3.4-1/png/pngrutil.c ****                            return;
3389:fltk-1.3.4-1/png/pngrutil.c **** 
3390:fltk-1.3.4-1/png/pngrutil.c ****                         dp32 += skip;
3391:fltk-1.3.4-1/png/pngrutil.c ****                         sp32 += skip;
3392:fltk-1.3.4-1/png/pngrutil.c ****                         row_width -= bytes_to_jump;
3393:fltk-1.3.4-1/png/pngrutil.c ****                      }
3394:fltk-1.3.4-1/png/pngrutil.c ****                      while (bytes_to_copy <= row_width);
3395:fltk-1.3.4-1/png/pngrutil.c **** 
3396:fltk-1.3.4-1/png/pngrutil.c ****                      /* Get to here when the row_width truncates the final copy.
3397:fltk-1.3.4-1/png/pngrutil.c ****                       * There will be 1-3 bytes left to copy, so don't try the
3398:fltk-1.3.4-1/png/pngrutil.c ****                       * 16-bit loop below.
3399:fltk-1.3.4-1/png/pngrutil.c ****                       */
3400:fltk-1.3.4-1/png/pngrutil.c ****                      dp = (png_bytep)dp32;
3401:fltk-1.3.4-1/png/pngrutil.c ****                      sp = (png_const_bytep)sp32;
3402:fltk-1.3.4-1/png/pngrutil.c ****                      do
3403:fltk-1.3.4-1/png/pngrutil.c ****                         *dp++ = *sp++;
3404:fltk-1.3.4-1/png/pngrutil.c ****                      while (--row_width > 0);
3405:fltk-1.3.4-1/png/pngrutil.c ****                      return;
3406:fltk-1.3.4-1/png/pngrutil.c ****                   }
3407:fltk-1.3.4-1/png/pngrutil.c **** 
3408:fltk-1.3.4-1/png/pngrutil.c ****                   /* Else do it in 16-bit quantities, but only if the size is
3409:fltk-1.3.4-1/png/pngrutil.c ****                    * not too large.
3410:fltk-1.3.4-1/png/pngrutil.c ****                    */
3411:fltk-1.3.4-1/png/pngrutil.c ****                   else
3412:fltk-1.3.4-1/png/pngrutil.c ****                   {
3413:fltk-1.3.4-1/png/pngrutil.c ****                      png_uint_16p dp16 = png_aligncast(png_uint_16p, dp);
3414:fltk-1.3.4-1/png/pngrutil.c ****                      png_const_uint_16p sp16 = png_aligncastconst(
3415:fltk-1.3.4-1/png/pngrutil.c ****                         png_const_uint_16p, sp);
3416:fltk-1.3.4-1/png/pngrutil.c ****                      size_t skip = (bytes_to_jump-bytes_to_copy) /
3417:fltk-1.3.4-1/png/pngrutil.c ****                         (sizeof (png_uint_16));
3418:fltk-1.3.4-1/png/pngrutil.c **** 
3419:fltk-1.3.4-1/png/pngrutil.c ****                      do
3420:fltk-1.3.4-1/png/pngrutil.c ****                      {
3421:fltk-1.3.4-1/png/pngrutil.c ****                         size_t c = bytes_to_copy;
3422:fltk-1.3.4-1/png/pngrutil.c ****                         do
3423:fltk-1.3.4-1/png/pngrutil.c ****                         {
3424:fltk-1.3.4-1/png/pngrutil.c ****                            *dp16++ = *sp16++;
3425:fltk-1.3.4-1/png/pngrutil.c ****                            c -= (sizeof (png_uint_16));
3426:fltk-1.3.4-1/png/pngrutil.c ****                         }
3427:fltk-1.3.4-1/png/pngrutil.c ****                         while (c > 0);
3428:fltk-1.3.4-1/png/pngrutil.c **** 
3429:fltk-1.3.4-1/png/pngrutil.c ****                         if (row_width <= bytes_to_jump)
3430:fltk-1.3.4-1/png/pngrutil.c ****                            return;
3431:fltk-1.3.4-1/png/pngrutil.c **** 
3432:fltk-1.3.4-1/png/pngrutil.c ****                         dp16 += skip;
3433:fltk-1.3.4-1/png/pngrutil.c ****                         sp16 += skip;
3434:fltk-1.3.4-1/png/pngrutil.c ****                         row_width -= bytes_to_jump;
3435:fltk-1.3.4-1/png/pngrutil.c ****                      }
3436:fltk-1.3.4-1/png/pngrutil.c ****                      while (bytes_to_copy <= row_width);
3437:fltk-1.3.4-1/png/pngrutil.c **** 
3438:fltk-1.3.4-1/png/pngrutil.c ****                      /* End of row - 1 byte left, bytes_to_copy > row_width: */
3439:fltk-1.3.4-1/png/pngrutil.c ****                      dp = (png_bytep)dp16;
3440:fltk-1.3.4-1/png/pngrutil.c ****                      sp = (png_const_bytep)sp16;
3441:fltk-1.3.4-1/png/pngrutil.c ****                      do
3442:fltk-1.3.4-1/png/pngrutil.c ****                         *dp++ = *sp++;
3443:fltk-1.3.4-1/png/pngrutil.c ****                      while (--row_width > 0);
3444:fltk-1.3.4-1/png/pngrutil.c ****                      return;
3445:fltk-1.3.4-1/png/pngrutil.c ****                   }
3446:fltk-1.3.4-1/png/pngrutil.c ****                }
3447:fltk-1.3.4-1/png/pngrutil.c **** #endif /* ALIGN_TYPE code */
3448:fltk-1.3.4-1/png/pngrutil.c **** 
3449:fltk-1.3.4-1/png/pngrutil.c ****                /* The true default - use a memcpy: */
3450:fltk-1.3.4-1/png/pngrutil.c ****                for (;;)
3451:fltk-1.3.4-1/png/pngrutil.c ****                {
3452:fltk-1.3.4-1/png/pngrutil.c ****                   memcpy(dp, sp, bytes_to_copy);
3453:fltk-1.3.4-1/png/pngrutil.c **** 
3454:fltk-1.3.4-1/png/pngrutil.c ****                   if (row_width <= bytes_to_jump)
3455:fltk-1.3.4-1/png/pngrutil.c ****                      return;
3456:fltk-1.3.4-1/png/pngrutil.c **** 
3457:fltk-1.3.4-1/png/pngrutil.c ****                   sp += bytes_to_jump;
3458:fltk-1.3.4-1/png/pngrutil.c ****                   dp += bytes_to_jump;
3459:fltk-1.3.4-1/png/pngrutil.c ****                   row_width -= bytes_to_jump;
3460:fltk-1.3.4-1/png/pngrutil.c ****                   if (bytes_to_copy > row_width)
3461:fltk-1.3.4-1/png/pngrutil.c ****                      bytes_to_copy = (unsigned int)/*SAFE*/row_width;
3462:fltk-1.3.4-1/png/pngrutil.c ****                }
3463:fltk-1.3.4-1/png/pngrutil.c ****          }
3464:fltk-1.3.4-1/png/pngrutil.c **** 
3465:fltk-1.3.4-1/png/pngrutil.c ****          /* NOT REACHED*/
3466:fltk-1.3.4-1/png/pngrutil.c ****       } /* pixel_depth >= 8 */
3467:fltk-1.3.4-1/png/pngrutil.c **** 
3468:fltk-1.3.4-1/png/pngrutil.c ****       /* Here if pixel_depth < 8 to check 'end_ptr' below. */
3469:fltk-1.3.4-1/png/pngrutil.c ****    }
3470:fltk-1.3.4-1/png/pngrutil.c ****    else
3471:fltk-1.3.4-1/png/pngrutil.c **** #endif /* READ_INTERLACING */
3472:fltk-1.3.4-1/png/pngrutil.c **** 
3473:fltk-1.3.4-1/png/pngrutil.c ****    /* If here then the switch above wasn't used so just memcpy the whole row
3474:fltk-1.3.4-1/png/pngrutil.c ****     * from the temporary row buffer (notice that this overwrites the end of the
3475:fltk-1.3.4-1/png/pngrutil.c ****     * destination row if it is a partial byte.)
3476:fltk-1.3.4-1/png/pngrutil.c ****     */
3477:fltk-1.3.4-1/png/pngrutil.c ****    memcpy(dp, sp, PNG_ROWBYTES(pixel_depth, row_width));
3478:fltk-1.3.4-1/png/pngrutil.c **** 
3479:fltk-1.3.4-1/png/pngrutil.c ****    /* Restore the overwritten bits from the last byte if necessary. */
3480:fltk-1.3.4-1/png/pngrutil.c ****    if (end_ptr != NULL)
3481:fltk-1.3.4-1/png/pngrutil.c ****       *end_ptr = (png_byte)((end_byte & end_mask) | (*end_ptr & ~end_mask));
3482:fltk-1.3.4-1/png/pngrutil.c **** }
3483:fltk-1.3.4-1/png/pngrutil.c **** 
3484:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_INTERLACING_SUPPORTED
3485:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
3486:fltk-1.3.4-1/png/pngrutil.c **** png_do_read_interlace(png_row_infop row_info, png_bytep row, int pass,
3487:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32 transformations /* Because these may affect the byte layout */)
3488:fltk-1.3.4-1/png/pngrutil.c **** {
3489:fltk-1.3.4-1/png/pngrutil.c ****    /* Arrays to facilitate easy interlacing - use pass (0 - 6) as index */
3490:fltk-1.3.4-1/png/pngrutil.c ****    /* Offset to next interlace block */
3491:fltk-1.3.4-1/png/pngrutil.c ****    static PNG_CONST int png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1};
3492:fltk-1.3.4-1/png/pngrutil.c **** 
3493:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_do_read_interlace");
3494:fltk-1.3.4-1/png/pngrutil.c ****    if (row != NULL && row_info != NULL)
3495:fltk-1.3.4-1/png/pngrutil.c ****    {
3496:fltk-1.3.4-1/png/pngrutil.c ****       png_uint_32 final_width;
3497:fltk-1.3.4-1/png/pngrutil.c **** 
3498:fltk-1.3.4-1/png/pngrutil.c ****       final_width = row_info->width * png_pass_inc[pass];
3499:fltk-1.3.4-1/png/pngrutil.c **** 
3500:fltk-1.3.4-1/png/pngrutil.c ****       switch (row_info->pixel_depth)
3501:fltk-1.3.4-1/png/pngrutil.c ****       {
3502:fltk-1.3.4-1/png/pngrutil.c ****          case 1:
3503:fltk-1.3.4-1/png/pngrutil.c ****          {
3504:fltk-1.3.4-1/png/pngrutil.c ****             png_bytep sp = row + (png_size_t)((row_info->width - 1) >> 3);
3505:fltk-1.3.4-1/png/pngrutil.c ****             png_bytep dp = row + (png_size_t)((final_width - 1) >> 3);
3506:fltk-1.3.4-1/png/pngrutil.c ****             int sshift, dshift;
3507:fltk-1.3.4-1/png/pngrutil.c ****             int s_start, s_end, s_inc;
3508:fltk-1.3.4-1/png/pngrutil.c ****             int jstop = png_pass_inc[pass];
3509:fltk-1.3.4-1/png/pngrutil.c ****             png_byte v;
3510:fltk-1.3.4-1/png/pngrutil.c ****             png_uint_32 i;
3511:fltk-1.3.4-1/png/pngrutil.c ****             int j;
3512:fltk-1.3.4-1/png/pngrutil.c **** 
3513:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_PACKSWAP_SUPPORTED
3514:fltk-1.3.4-1/png/pngrutil.c ****             if ((transformations & PNG_PACKSWAP) != 0)
3515:fltk-1.3.4-1/png/pngrutil.c ****             {
3516:fltk-1.3.4-1/png/pngrutil.c ****                 sshift = (int)((row_info->width + 7) & 0x07);
3517:fltk-1.3.4-1/png/pngrutil.c ****                 dshift = (int)((final_width + 7) & 0x07);
3518:fltk-1.3.4-1/png/pngrutil.c ****                 s_start = 7;
3519:fltk-1.3.4-1/png/pngrutil.c ****                 s_end = 0;
3520:fltk-1.3.4-1/png/pngrutil.c ****                 s_inc = -1;
3521:fltk-1.3.4-1/png/pngrutil.c ****             }
3522:fltk-1.3.4-1/png/pngrutil.c **** 
3523:fltk-1.3.4-1/png/pngrutil.c ****             else
3524:fltk-1.3.4-1/png/pngrutil.c **** #endif
3525:fltk-1.3.4-1/png/pngrutil.c ****             {
3526:fltk-1.3.4-1/png/pngrutil.c ****                 sshift = 7 - (int)((row_info->width + 7) & 0x07);
3527:fltk-1.3.4-1/png/pngrutil.c ****                 dshift = 7 - (int)((final_width + 7) & 0x07);
3528:fltk-1.3.4-1/png/pngrutil.c ****                 s_start = 0;
3529:fltk-1.3.4-1/png/pngrutil.c ****                 s_end = 7;
3530:fltk-1.3.4-1/png/pngrutil.c ****                 s_inc = 1;
3531:fltk-1.3.4-1/png/pngrutil.c ****             }
3532:fltk-1.3.4-1/png/pngrutil.c **** 
3533:fltk-1.3.4-1/png/pngrutil.c ****             for (i = 0; i < row_info->width; i++)
3534:fltk-1.3.4-1/png/pngrutil.c ****             {
3535:fltk-1.3.4-1/png/pngrutil.c ****                v = (png_byte)((*sp >> sshift) & 0x01);
3536:fltk-1.3.4-1/png/pngrutil.c ****                for (j = 0; j < jstop; j++)
3537:fltk-1.3.4-1/png/pngrutil.c ****                {
3538:fltk-1.3.4-1/png/pngrutil.c ****                   unsigned int tmp = *dp & (0x7f7f >> (7 - dshift));
3539:fltk-1.3.4-1/png/pngrutil.c ****                   tmp |= v << dshift;
3540:fltk-1.3.4-1/png/pngrutil.c ****                   *dp = (png_byte)(tmp & 0xff);
3541:fltk-1.3.4-1/png/pngrutil.c **** 
3542:fltk-1.3.4-1/png/pngrutil.c ****                   if (dshift == s_end)
3543:fltk-1.3.4-1/png/pngrutil.c ****                   {
3544:fltk-1.3.4-1/png/pngrutil.c ****                      dshift = s_start;
3545:fltk-1.3.4-1/png/pngrutil.c ****                      dp--;
3546:fltk-1.3.4-1/png/pngrutil.c ****                   }
3547:fltk-1.3.4-1/png/pngrutil.c **** 
3548:fltk-1.3.4-1/png/pngrutil.c ****                   else
3549:fltk-1.3.4-1/png/pngrutil.c ****                      dshift += s_inc;
3550:fltk-1.3.4-1/png/pngrutil.c ****                }
3551:fltk-1.3.4-1/png/pngrutil.c **** 
3552:fltk-1.3.4-1/png/pngrutil.c ****                if (sshift == s_end)
3553:fltk-1.3.4-1/png/pngrutil.c ****                {
3554:fltk-1.3.4-1/png/pngrutil.c ****                   sshift = s_start;
3555:fltk-1.3.4-1/png/pngrutil.c ****                   sp--;
3556:fltk-1.3.4-1/png/pngrutil.c ****                }
3557:fltk-1.3.4-1/png/pngrutil.c **** 
3558:fltk-1.3.4-1/png/pngrutil.c ****                else
3559:fltk-1.3.4-1/png/pngrutil.c ****                   sshift += s_inc;
3560:fltk-1.3.4-1/png/pngrutil.c ****             }
3561:fltk-1.3.4-1/png/pngrutil.c ****             break;
3562:fltk-1.3.4-1/png/pngrutil.c ****          }
3563:fltk-1.3.4-1/png/pngrutil.c **** 
3564:fltk-1.3.4-1/png/pngrutil.c ****          case 2:
3565:fltk-1.3.4-1/png/pngrutil.c ****          {
3566:fltk-1.3.4-1/png/pngrutil.c ****             png_bytep sp = row + (png_uint_32)((row_info->width - 1) >> 2);
3567:fltk-1.3.4-1/png/pngrutil.c ****             png_bytep dp = row + (png_uint_32)((final_width - 1) >> 2);
3568:fltk-1.3.4-1/png/pngrutil.c ****             int sshift, dshift;
3569:fltk-1.3.4-1/png/pngrutil.c ****             int s_start, s_end, s_inc;
3570:fltk-1.3.4-1/png/pngrutil.c ****             int jstop = png_pass_inc[pass];
3571:fltk-1.3.4-1/png/pngrutil.c ****             png_uint_32 i;
3572:fltk-1.3.4-1/png/pngrutil.c **** 
3573:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_PACKSWAP_SUPPORTED
3574:fltk-1.3.4-1/png/pngrutil.c ****             if ((transformations & PNG_PACKSWAP) != 0)
3575:fltk-1.3.4-1/png/pngrutil.c ****             {
3576:fltk-1.3.4-1/png/pngrutil.c ****                sshift = (int)(((row_info->width + 3) & 0x03) << 1);
3577:fltk-1.3.4-1/png/pngrutil.c ****                dshift = (int)(((final_width + 3) & 0x03) << 1);
3578:fltk-1.3.4-1/png/pngrutil.c ****                s_start = 6;
3579:fltk-1.3.4-1/png/pngrutil.c ****                s_end = 0;
3580:fltk-1.3.4-1/png/pngrutil.c ****                s_inc = -2;
3581:fltk-1.3.4-1/png/pngrutil.c ****             }
3582:fltk-1.3.4-1/png/pngrutil.c **** 
3583:fltk-1.3.4-1/png/pngrutil.c ****             else
3584:fltk-1.3.4-1/png/pngrutil.c **** #endif
3585:fltk-1.3.4-1/png/pngrutil.c ****             {
3586:fltk-1.3.4-1/png/pngrutil.c ****                sshift = (int)((3 - ((row_info->width + 3) & 0x03)) << 1);
3587:fltk-1.3.4-1/png/pngrutil.c ****                dshift = (int)((3 - ((final_width + 3) & 0x03)) << 1);
3588:fltk-1.3.4-1/png/pngrutil.c ****                s_start = 0;
3589:fltk-1.3.4-1/png/pngrutil.c ****                s_end = 6;
3590:fltk-1.3.4-1/png/pngrutil.c ****                s_inc = 2;
3591:fltk-1.3.4-1/png/pngrutil.c ****             }
3592:fltk-1.3.4-1/png/pngrutil.c **** 
3593:fltk-1.3.4-1/png/pngrutil.c ****             for (i = 0; i < row_info->width; i++)
3594:fltk-1.3.4-1/png/pngrutil.c ****             {
3595:fltk-1.3.4-1/png/pngrutil.c ****                png_byte v;
3596:fltk-1.3.4-1/png/pngrutil.c ****                int j;
3597:fltk-1.3.4-1/png/pngrutil.c **** 
3598:fltk-1.3.4-1/png/pngrutil.c ****                v = (png_byte)((*sp >> sshift) & 0x03);
3599:fltk-1.3.4-1/png/pngrutil.c ****                for (j = 0; j < jstop; j++)
3600:fltk-1.3.4-1/png/pngrutil.c ****                {
3601:fltk-1.3.4-1/png/pngrutil.c ****                   unsigned int tmp = *dp & (0x3f3f >> (6 - dshift));
3602:fltk-1.3.4-1/png/pngrutil.c ****                   tmp |= v << dshift;
3603:fltk-1.3.4-1/png/pngrutil.c ****                   *dp = (png_byte)(tmp & 0xff);
3604:fltk-1.3.4-1/png/pngrutil.c **** 
3605:fltk-1.3.4-1/png/pngrutil.c ****                   if (dshift == s_end)
3606:fltk-1.3.4-1/png/pngrutil.c ****                   {
3607:fltk-1.3.4-1/png/pngrutil.c ****                      dshift = s_start;
3608:fltk-1.3.4-1/png/pngrutil.c ****                      dp--;
3609:fltk-1.3.4-1/png/pngrutil.c ****                   }
3610:fltk-1.3.4-1/png/pngrutil.c **** 
3611:fltk-1.3.4-1/png/pngrutil.c ****                   else
3612:fltk-1.3.4-1/png/pngrutil.c ****                      dshift += s_inc;
3613:fltk-1.3.4-1/png/pngrutil.c ****                }
3614:fltk-1.3.4-1/png/pngrutil.c **** 
3615:fltk-1.3.4-1/png/pngrutil.c ****                if (sshift == s_end)
3616:fltk-1.3.4-1/png/pngrutil.c ****                {
3617:fltk-1.3.4-1/png/pngrutil.c ****                   sshift = s_start;
3618:fltk-1.3.4-1/png/pngrutil.c ****                   sp--;
3619:fltk-1.3.4-1/png/pngrutil.c ****                }
3620:fltk-1.3.4-1/png/pngrutil.c **** 
3621:fltk-1.3.4-1/png/pngrutil.c ****                else
3622:fltk-1.3.4-1/png/pngrutil.c ****                   sshift += s_inc;
3623:fltk-1.3.4-1/png/pngrutil.c ****             }
3624:fltk-1.3.4-1/png/pngrutil.c ****             break;
3625:fltk-1.3.4-1/png/pngrutil.c ****          }
3626:fltk-1.3.4-1/png/pngrutil.c **** 
3627:fltk-1.3.4-1/png/pngrutil.c ****          case 4:
3628:fltk-1.3.4-1/png/pngrutil.c ****          {
3629:fltk-1.3.4-1/png/pngrutil.c ****             png_bytep sp = row + (png_size_t)((row_info->width - 1) >> 1);
3630:fltk-1.3.4-1/png/pngrutil.c ****             png_bytep dp = row + (png_size_t)((final_width - 1) >> 1);
3631:fltk-1.3.4-1/png/pngrutil.c ****             int sshift, dshift;
3632:fltk-1.3.4-1/png/pngrutil.c ****             int s_start, s_end, s_inc;
3633:fltk-1.3.4-1/png/pngrutil.c ****             png_uint_32 i;
3634:fltk-1.3.4-1/png/pngrutil.c ****             int jstop = png_pass_inc[pass];
3635:fltk-1.3.4-1/png/pngrutil.c **** 
3636:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_PACKSWAP_SUPPORTED
3637:fltk-1.3.4-1/png/pngrutil.c ****             if ((transformations & PNG_PACKSWAP) != 0)
3638:fltk-1.3.4-1/png/pngrutil.c ****             {
3639:fltk-1.3.4-1/png/pngrutil.c ****                sshift = (int)(((row_info->width + 1) & 0x01) << 2);
3640:fltk-1.3.4-1/png/pngrutil.c ****                dshift = (int)(((final_width + 1) & 0x01) << 2);
3641:fltk-1.3.4-1/png/pngrutil.c ****                s_start = 4;
3642:fltk-1.3.4-1/png/pngrutil.c ****                s_end = 0;
3643:fltk-1.3.4-1/png/pngrutil.c ****                s_inc = -4;
3644:fltk-1.3.4-1/png/pngrutil.c ****             }
3645:fltk-1.3.4-1/png/pngrutil.c **** 
3646:fltk-1.3.4-1/png/pngrutil.c ****             else
3647:fltk-1.3.4-1/png/pngrutil.c **** #endif
3648:fltk-1.3.4-1/png/pngrutil.c ****             {
3649:fltk-1.3.4-1/png/pngrutil.c ****                sshift = (int)((1 - ((row_info->width + 1) & 0x01)) << 2);
3650:fltk-1.3.4-1/png/pngrutil.c ****                dshift = (int)((1 - ((final_width + 1) & 0x01)) << 2);
3651:fltk-1.3.4-1/png/pngrutil.c ****                s_start = 0;
3652:fltk-1.3.4-1/png/pngrutil.c ****                s_end = 4;
3653:fltk-1.3.4-1/png/pngrutil.c ****                s_inc = 4;
3654:fltk-1.3.4-1/png/pngrutil.c ****             }
3655:fltk-1.3.4-1/png/pngrutil.c **** 
3656:fltk-1.3.4-1/png/pngrutil.c ****             for (i = 0; i < row_info->width; i++)
3657:fltk-1.3.4-1/png/pngrutil.c ****             {
3658:fltk-1.3.4-1/png/pngrutil.c ****                png_byte v = (png_byte)((*sp >> sshift) & 0x0f);
3659:fltk-1.3.4-1/png/pngrutil.c ****                int j;
3660:fltk-1.3.4-1/png/pngrutil.c **** 
3661:fltk-1.3.4-1/png/pngrutil.c ****                for (j = 0; j < jstop; j++)
3662:fltk-1.3.4-1/png/pngrutil.c ****                {
3663:fltk-1.3.4-1/png/pngrutil.c ****                   unsigned int tmp = *dp & (0xf0f >> (4 - dshift));
3664:fltk-1.3.4-1/png/pngrutil.c ****                   tmp |= v << dshift;
3665:fltk-1.3.4-1/png/pngrutil.c ****                   *dp = (png_byte)(tmp & 0xff);
3666:fltk-1.3.4-1/png/pngrutil.c **** 
3667:fltk-1.3.4-1/png/pngrutil.c ****                   if (dshift == s_end)
3668:fltk-1.3.4-1/png/pngrutil.c ****                   {
3669:fltk-1.3.4-1/png/pngrutil.c ****                      dshift = s_start;
3670:fltk-1.3.4-1/png/pngrutil.c ****                      dp--;
3671:fltk-1.3.4-1/png/pngrutil.c ****                   }
3672:fltk-1.3.4-1/png/pngrutil.c **** 
3673:fltk-1.3.4-1/png/pngrutil.c ****                   else
3674:fltk-1.3.4-1/png/pngrutil.c ****                      dshift += s_inc;
3675:fltk-1.3.4-1/png/pngrutil.c ****                }
3676:fltk-1.3.4-1/png/pngrutil.c **** 
3677:fltk-1.3.4-1/png/pngrutil.c ****                if (sshift == s_end)
3678:fltk-1.3.4-1/png/pngrutil.c ****                {
3679:fltk-1.3.4-1/png/pngrutil.c ****                   sshift = s_start;
3680:fltk-1.3.4-1/png/pngrutil.c ****                   sp--;
3681:fltk-1.3.4-1/png/pngrutil.c ****                }
3682:fltk-1.3.4-1/png/pngrutil.c **** 
3683:fltk-1.3.4-1/png/pngrutil.c ****                else
3684:fltk-1.3.4-1/png/pngrutil.c ****                   sshift += s_inc;
3685:fltk-1.3.4-1/png/pngrutil.c ****             }
3686:fltk-1.3.4-1/png/pngrutil.c ****             break;
3687:fltk-1.3.4-1/png/pngrutil.c ****          }
3688:fltk-1.3.4-1/png/pngrutil.c **** 
3689:fltk-1.3.4-1/png/pngrutil.c ****          default:
3690:fltk-1.3.4-1/png/pngrutil.c ****          {
3691:fltk-1.3.4-1/png/pngrutil.c ****             png_size_t pixel_bytes = (row_info->pixel_depth >> 3);
3692:fltk-1.3.4-1/png/pngrutil.c **** 
3693:fltk-1.3.4-1/png/pngrutil.c ****             png_bytep sp = row + (png_size_t)(row_info->width - 1)
3694:fltk-1.3.4-1/png/pngrutil.c ****                 * pixel_bytes;
3695:fltk-1.3.4-1/png/pngrutil.c **** 
3696:fltk-1.3.4-1/png/pngrutil.c ****             png_bytep dp = row + (png_size_t)(final_width - 1) * pixel_bytes;
3697:fltk-1.3.4-1/png/pngrutil.c **** 
3698:fltk-1.3.4-1/png/pngrutil.c ****             int jstop = png_pass_inc[pass];
3699:fltk-1.3.4-1/png/pngrutil.c ****             png_uint_32 i;
3700:fltk-1.3.4-1/png/pngrutil.c **** 
3701:fltk-1.3.4-1/png/pngrutil.c ****             for (i = 0; i < row_info->width; i++)
3702:fltk-1.3.4-1/png/pngrutil.c ****             {
3703:fltk-1.3.4-1/png/pngrutil.c ****                png_byte v[8]; /* SAFE; pixel_depth does not exceed 64 */
3704:fltk-1.3.4-1/png/pngrutil.c ****                int j;
3705:fltk-1.3.4-1/png/pngrutil.c **** 
3706:fltk-1.3.4-1/png/pngrutil.c ****                memcpy(v, sp, pixel_bytes);
3707:fltk-1.3.4-1/png/pngrutil.c **** 
3708:fltk-1.3.4-1/png/pngrutil.c ****                for (j = 0; j < jstop; j++)
3709:fltk-1.3.4-1/png/pngrutil.c ****                {
3710:fltk-1.3.4-1/png/pngrutil.c ****                   memcpy(dp, v, pixel_bytes);
3711:fltk-1.3.4-1/png/pngrutil.c ****                   dp -= pixel_bytes;
3712:fltk-1.3.4-1/png/pngrutil.c ****                }
3713:fltk-1.3.4-1/png/pngrutil.c **** 
3714:fltk-1.3.4-1/png/pngrutil.c ****                sp -= pixel_bytes;
3715:fltk-1.3.4-1/png/pngrutil.c ****             }
3716:fltk-1.3.4-1/png/pngrutil.c ****             break;
3717:fltk-1.3.4-1/png/pngrutil.c ****          }
3718:fltk-1.3.4-1/png/pngrutil.c ****       }
3719:fltk-1.3.4-1/png/pngrutil.c **** 
3720:fltk-1.3.4-1/png/pngrutil.c ****       row_info->width = final_width;
3721:fltk-1.3.4-1/png/pngrutil.c ****       row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth, final_width);
3722:fltk-1.3.4-1/png/pngrutil.c ****    }
3723:fltk-1.3.4-1/png/pngrutil.c **** #ifndef PNG_READ_PACKSWAP_SUPPORTED
3724:fltk-1.3.4-1/png/pngrutil.c ****    PNG_UNUSED(transformations)  /* Silence compiler warning */
3725:fltk-1.3.4-1/png/pngrutil.c **** #endif
3726:fltk-1.3.4-1/png/pngrutil.c **** }
3727:fltk-1.3.4-1/png/pngrutil.c **** #endif /* READ_INTERLACING */
3728:fltk-1.3.4-1/png/pngrutil.c **** 
3729:fltk-1.3.4-1/png/pngrutil.c **** static void
3730:fltk-1.3.4-1/png/pngrutil.c **** png_read_filter_row_sub(png_row_infop row_info, png_bytep row,
3731:fltk-1.3.4-1/png/pngrutil.c ****    png_const_bytep prev_row)
3732:fltk-1.3.4-1/png/pngrutil.c **** {
  16              		.loc 1 3732 0
  17              		.cfi_startproc
  18              	.LVL0:
3733:fltk-1.3.4-1/png/pngrutil.c ****    png_size_t i;
3734:fltk-1.3.4-1/png/pngrutil.c ****    png_size_t istop = row_info->rowbytes;
3735:fltk-1.3.4-1/png/pngrutil.c ****    unsigned int bpp = (row_info->pixel_depth + 7) >> 3;
3736:fltk-1.3.4-1/png/pngrutil.c ****    png_bytep rp = row + bpp;
  19              		.loc 1 3736 0
  20 0000 0FB65713 		movzbl	19(%rdi), %edx
  21              	.LVL1:
3734:fltk-1.3.4-1/png/pngrutil.c ****    unsigned int bpp = (row_info->pixel_depth + 7) >> 3;
  22              		.loc 1 3734 0
  23 0004 4C8B4708 		movq	8(%rdi), %r8
  24              	.LVL2:
  25 0008 4A8D0C06 		leaq	(%rsi,%r8), %rcx
  26              		.loc 1 3736 0
  27 000c 83C207   		addl	$7, %edx
  28 000f C1FA03   		sarl	$3, %edx
  29 0012 4863D2   		movslq	%edx, %rdx
  30              	.LVL3:
  31 0015 4889D7   		movq	%rdx, %rdi
  32              	.LVL4:
  33 0018 488D0416 		leaq	(%rsi,%rdx), %rax
  34              	.LVL5:
  35 001c 48F7DF   		negq	%rdi
3737:fltk-1.3.4-1/png/pngrutil.c **** 
3738:fltk-1.3.4-1/png/pngrutil.c ****    PNG_UNUSED(prev_row)
3739:fltk-1.3.4-1/png/pngrutil.c **** 
3740:fltk-1.3.4-1/png/pngrutil.c ****    for (i = bpp; i < istop; i++)
  36              		.loc 1 3740 0
  37 001f 4939D0   		cmpq	%rdx, %r8
  38 0022 7613     		jbe	.L1
  39              	.LVL6:
  40              		.p2align 4,,10
  41 0024 0F1F4000 		.p2align 3
  42              	.L5:
3741:fltk-1.3.4-1/png/pngrutil.c ****    {
3742:fltk-1.3.4-1/png/pngrutil.c ****       *rp = (png_byte)(((int)(*rp) + (int)(*(rp-bpp))) & 0xff);
  43              		.loc 1 3742 0 discriminator 3
  44 0028 0FB61438 		movzbl	(%rax,%rdi), %edx
  45 002c 0010     		addb	%dl, (%rax)
3743:fltk-1.3.4-1/png/pngrutil.c ****       rp++;
  46              		.loc 1 3743 0 discriminator 3
  47 002e 4883C001 		addq	$1, %rax
  48              	.LVL7:
3740:fltk-1.3.4-1/png/pngrutil.c ****    {
  49              		.loc 1 3740 0 discriminator 3
  50 0032 4839C1   		cmpq	%rax, %rcx
  51 0035 75F1     		jne	.L5
  52              	.L1:
  53 0037 F3C3     		rep ret
  54              		.cfi_endproc
  55              	.LFE96:
  57              		.section	.text.unlikely.png_read_filter_row_sub
  58              	.LCOLDE0:
  59              		.section	.text.png_read_filter_row_sub
  60              	.LHOTE0:
  61              		.section	.text.unlikely.png_read_filter_row_up,"ax",@progbits
  62              	.LCOLDB1:
  63              		.section	.text.png_read_filter_row_up,"ax",@progbits
  64              	.LHOTB1:
  65              		.p2align 4,,15
  67              	png_read_filter_row_up:
  68              	.LFB97:
3744:fltk-1.3.4-1/png/pngrutil.c ****    }
3745:fltk-1.3.4-1/png/pngrutil.c **** }
3746:fltk-1.3.4-1/png/pngrutil.c **** 
3747:fltk-1.3.4-1/png/pngrutil.c **** static void
3748:fltk-1.3.4-1/png/pngrutil.c **** png_read_filter_row_up(png_row_infop row_info, png_bytep row,
3749:fltk-1.3.4-1/png/pngrutil.c ****    png_const_bytep prev_row)
3750:fltk-1.3.4-1/png/pngrutil.c **** {
  69              		.loc 1 3750 0
  70              		.cfi_startproc
  71              	.LVL8:
3751:fltk-1.3.4-1/png/pngrutil.c ****    png_size_t i;
3752:fltk-1.3.4-1/png/pngrutil.c ****    png_size_t istop = row_info->rowbytes;
  72              		.loc 1 3752 0
  73 0000 488B7F08 		movq	8(%rdi), %rdi
  74              	.LVL9:
3753:fltk-1.3.4-1/png/pngrutil.c ****    png_bytep rp = row;
3754:fltk-1.3.4-1/png/pngrutil.c ****    png_const_bytep pp = prev_row;
3755:fltk-1.3.4-1/png/pngrutil.c **** 
3756:fltk-1.3.4-1/png/pngrutil.c ****    for (i = 0; i < istop; i++)
  75              		.loc 1 3756 0
  76 0004 31C0     		xorl	%eax, %eax
  77 0006 4885FF   		testq	%rdi, %rdi
  78 0009 7415     		je	.L8
  79              	.LVL10:
  80 000b 0F1F4400 		.p2align 4,,10
  80      00
  81              		.p2align 3
  82              	.L12:
3757:fltk-1.3.4-1/png/pngrutil.c ****    {
3758:fltk-1.3.4-1/png/pngrutil.c ****       *rp = (png_byte)(((int)(*rp) + (int)(*pp++)) & 0xff);
  83              		.loc 1 3758 0 discriminator 3
  84 0010 0FB60C02 		movzbl	(%rdx,%rax), %ecx
  85 0014 000C06   		addb	%cl, (%rsi,%rax)
  86              	.LVL11:
3756:fltk-1.3.4-1/png/pngrutil.c ****    {
  87              		.loc 1 3756 0 discriminator 3
  88 0017 4883C001 		addq	$1, %rax
  89              	.LVL12:
  90 001b 4839C7   		cmpq	%rax, %rdi
  91 001e 75F0     		jne	.L12
  92              	.LVL13:
  93              	.L8:
  94 0020 F3C3     		rep ret
  95              		.cfi_endproc
  96              	.LFE97:
  98              		.section	.text.unlikely.png_read_filter_row_up
  99              	.LCOLDE1:
 100              		.section	.text.png_read_filter_row_up
 101              	.LHOTE1:
 102              		.section	.text.unlikely.png_read_filter_row_avg,"ax",@progbits
 103              	.LCOLDB2:
 104              		.section	.text.png_read_filter_row_avg,"ax",@progbits
 105              	.LHOTB2:
 106              		.p2align 4,,15
 108              	png_read_filter_row_avg:
 109              	.LFB98:
3759:fltk-1.3.4-1/png/pngrutil.c ****       rp++;
3760:fltk-1.3.4-1/png/pngrutil.c ****    }
3761:fltk-1.3.4-1/png/pngrutil.c **** }
3762:fltk-1.3.4-1/png/pngrutil.c **** 
3763:fltk-1.3.4-1/png/pngrutil.c **** static void
3764:fltk-1.3.4-1/png/pngrutil.c **** png_read_filter_row_avg(png_row_infop row_info, png_bytep row,
3765:fltk-1.3.4-1/png/pngrutil.c ****    png_const_bytep prev_row)
3766:fltk-1.3.4-1/png/pngrutil.c **** {
 110              		.loc 1 3766 0
 111              		.cfi_startproc
 112              	.LVL14:
3767:fltk-1.3.4-1/png/pngrutil.c ****    png_size_t i;
3768:fltk-1.3.4-1/png/pngrutil.c ****    png_bytep rp = row;
3769:fltk-1.3.4-1/png/pngrutil.c ****    png_const_bytep pp = prev_row;
3770:fltk-1.3.4-1/png/pngrutil.c ****    unsigned int bpp = (row_info->pixel_depth + 7) >> 3;
 113              		.loc 1 3770 0
 114 0000 0FB64713 		movzbl	19(%rdi), %eax
3771:fltk-1.3.4-1/png/pngrutil.c ****    png_size_t istop = row_info->rowbytes - bpp;
 115              		.loc 1 3771 0
 116 0004 4C8B4F08 		movq	8(%rdi), %r9
3770:fltk-1.3.4-1/png/pngrutil.c ****    png_size_t istop = row_info->rowbytes - bpp;
 117              		.loc 1 3770 0
 118 0008 83C007   		addl	$7, %eax
 119 000b C1F803   		sarl	$3, %eax
 120              	.LVL15:
 121              		.loc 1 3771 0
 122 000e 4C63C0   		movslq	%eax, %r8
 123 0011 4D29C1   		subq	%r8, %r9
 124              	.LVL16:
3772:fltk-1.3.4-1/png/pngrutil.c **** 
3773:fltk-1.3.4-1/png/pngrutil.c ****    for (i = 0; i < bpp; i++)
 125              		.loc 1 3773 0
 126 0014 85C0     		testl	%eax, %eax
 127 0016 7420     		je	.L15
 128 0018 31C0     		xorl	%eax, %eax
 129              	.LVL17:
 130 001a 660F1F44 		.p2align 4,,10
 130      0000
 131              		.p2align 3
 132              	.L16:
3774:fltk-1.3.4-1/png/pngrutil.c ****    {
3775:fltk-1.3.4-1/png/pngrutil.c ****       *rp = (png_byte)(((int)(*rp) +
 133              		.loc 1 3775 0 discriminator 3
 134 0020 0FB60C02 		movzbl	(%rdx,%rax), %ecx
 135 0024 D0E9     		shrb	%cl
 136 0026 000C06   		addb	%cl, (%rsi,%rax)
 137              	.LVL18:
3773:fltk-1.3.4-1/png/pngrutil.c ****    {
 138              		.loc 1 3773 0 discriminator 3
 139 0029 4883C001 		addq	$1, %rax
 140              	.LVL19:
 141 002d 4939C0   		cmpq	%rax, %r8
 142 0030 75EE     		jne	.L16
 143 0032 4C01C2   		addq	%r8, %rdx
 144              	.LVL20:
 145 0035 4C01C6   		addq	%r8, %rsi
 146              	.LVL21:
 147              	.L15:
 148 0038 4889F7   		movq	%rsi, %rdi
 149              	.LVL22:
3776:fltk-1.3.4-1/png/pngrutil.c ****          ((int)(*pp++) / 2 )) & 0xff);
3777:fltk-1.3.4-1/png/pngrutil.c **** 
3778:fltk-1.3.4-1/png/pngrutil.c ****       rp++;
3779:fltk-1.3.4-1/png/pngrutil.c ****    }
3780:fltk-1.3.4-1/png/pngrutil.c **** 
3781:fltk-1.3.4-1/png/pngrutil.c ****    for (i = 0; i < istop; i++)
 150              		.loc 1 3781 0 discriminator 1
 151 003b 31C0     		xorl	%eax, %eax
 152 003d 4C29C7   		subq	%r8, %rdi
 153 0040 4D85C9   		testq	%r9, %r9
 154 0043 4989F8   		movq	%rdi, %r8
 155              	.LVL23:
 156 0046 7421     		je	.L14
 157              	.LVL24:
 158 0048 0F1F8400 		.p2align 4,,10
 158      00000000 
 159              		.p2align 3
 160              	.L22:
3782:fltk-1.3.4-1/png/pngrutil.c ****    {
3783:fltk-1.3.4-1/png/pngrutil.c ****       *rp = (png_byte)(((int)(*rp) +
 161              		.loc 1 3783 0 discriminator 3
 162 0050 410FB63C 		movzbl	(%r8,%rax), %edi
 162      00
 163 0055 0FB60C02 		movzbl	(%rdx,%rax), %ecx
 164 0059 01F9     		addl	%edi, %ecx
 165 005b D1F9     		sarl	%ecx
 166 005d 000C06   		addb	%cl, (%rsi,%rax)
 167              	.LVL25:
3781:fltk-1.3.4-1/png/pngrutil.c ****    {
 168              		.loc 1 3781 0 discriminator 3
 169 0060 4883C001 		addq	$1, %rax
 170              	.LVL26:
 171 0064 4939C1   		cmpq	%rax, %r9
 172 0067 75E7     		jne	.L22
 173              	.LVL27:
 174              	.L14:
 175 0069 F3C3     		rep ret
 176              		.cfi_endproc
 177              	.LFE98:
 179              		.section	.text.unlikely.png_read_filter_row_avg
 180              	.LCOLDE2:
 181              		.section	.text.png_read_filter_row_avg
 182              	.LHOTE2:
 183              		.section	.text.unlikely.png_read_filter_row_paeth_1byte_pixel,"ax",@progbits
 184              	.LCOLDB3:
 185              		.section	.text.png_read_filter_row_paeth_1byte_pixel,"ax",@progbits
 186              	.LHOTB3:
 187              		.p2align 4,,15
 189              	png_read_filter_row_paeth_1byte_pixel:
 190              	.LFB99:
3784:fltk-1.3.4-1/png/pngrutil.c ****          (int)(*pp++ + *(rp-bpp)) / 2 ) & 0xff);
3785:fltk-1.3.4-1/png/pngrutil.c **** 
3786:fltk-1.3.4-1/png/pngrutil.c ****       rp++;
3787:fltk-1.3.4-1/png/pngrutil.c ****    }
3788:fltk-1.3.4-1/png/pngrutil.c **** }
3789:fltk-1.3.4-1/png/pngrutil.c **** 
3790:fltk-1.3.4-1/png/pngrutil.c **** static void
3791:fltk-1.3.4-1/png/pngrutil.c **** png_read_filter_row_paeth_1byte_pixel(png_row_infop row_info, png_bytep row,
3792:fltk-1.3.4-1/png/pngrutil.c ****    png_const_bytep prev_row)
3793:fltk-1.3.4-1/png/pngrutil.c **** {
 191              		.loc 1 3793 0
 192              		.cfi_startproc
 193              	.LVL28:
 194 0000 55       		pushq	%rbp
 195              		.cfi_def_cfa_offset 16
 196              		.cfi_offset 6, -16
3794:fltk-1.3.4-1/png/pngrutil.c ****    png_bytep rp_end = row + row_info->rowbytes;
3795:fltk-1.3.4-1/png/pngrutil.c ****    int a, c;
3796:fltk-1.3.4-1/png/pngrutil.c **** 
3797:fltk-1.3.4-1/png/pngrutil.c ****    /* First pixel/byte */
3798:fltk-1.3.4-1/png/pngrutil.c ****    c = *prev_row++;
 197              		.loc 1 3798 0
 198 0001 4C8D5A01 		leaq	1(%rdx), %r11
3793:fltk-1.3.4-1/png/pngrutil.c ****    png_bytep rp_end = row + row_info->rowbytes;
 199              		.loc 1 3793 0
 200 0005 53       		pushq	%rbx
 201              		.cfi_def_cfa_offset 24
 202              		.cfi_offset 3, -24
 203              		.loc 1 3798 0
 204 0006 440FB602 		movzbl	(%rdx), %r8d
3799:fltk-1.3.4-1/png/pngrutil.c ****    a = *row + c;
 205              		.loc 1 3799 0
 206 000a 0FB616   		movzbl	(%rsi), %edx
 207              	.LVL29:
3794:fltk-1.3.4-1/png/pngrutil.c ****    png_bytep rp_end = row + row_info->rowbytes;
 208              		.loc 1 3794 0
 209 000d 4889F3   		movq	%rsi, %rbx
 210 0010 48035F08 		addq	8(%rdi), %rbx
 211              	.LVL30:
3800:fltk-1.3.4-1/png/pngrutil.c ****    *row++ = (png_byte)a;
 212              		.loc 1 3800 0
 213 0014 488D7E01 		leaq	1(%rsi), %rdi
 214              	.LVL31:
3799:fltk-1.3.4-1/png/pngrutil.c ****    a = *row + c;
 215              		.loc 1 3799 0
 216 0018 89D0     		movl	%edx, %eax
 217 001a 4401C2   		addl	%r8d, %edx
 218              	.LVL32:
 219              		.loc 1 3800 0
 220 001d 4401C0   		addl	%r8d, %eax
3801:fltk-1.3.4-1/png/pngrutil.c **** 
3802:fltk-1.3.4-1/png/pngrutil.c ****    /* Remainder */
3803:fltk-1.3.4-1/png/pngrutil.c ****    while (row < rp_end)
 221              		.loc 1 3803 0
 222 0020 4839FB   		cmpq	%rdi, %rbx
3800:fltk-1.3.4-1/png/pngrutil.c ****    *row++ = (png_byte)a;
 223              		.loc 1 3800 0
 224 0023 8806     		movb	%al, (%rsi)
 225              		.loc 1 3803 0
 226 0025 766B     		jbe	.L26
 227 0027 660F1F84 		.p2align 4,,10
 227      00000000 
 227      00
 228              		.p2align 3
 229              	.L32:
 230              	.LBB82:
3804:fltk-1.3.4-1/png/pngrutil.c ****    {
3805:fltk-1.3.4-1/png/pngrutil.c ****       int b, pa, pb, pc, p;
3806:fltk-1.3.4-1/png/pngrutil.c **** 
3807:fltk-1.3.4-1/png/pngrutil.c ****       a &= 0xff; /* From previous iteration or start */
3808:fltk-1.3.4-1/png/pngrutil.c ****       b = *prev_row++;
 231              		.loc 1 3808 0
 232 0030 4983C301 		addq	$1, %r11
 233              	.LVL33:
 234 0034 450FB653 		movzbl	-1(%r11), %r10d
 234      FF
3807:fltk-1.3.4-1/png/pngrutil.c ****       b = *prev_row++;
 235              		.loc 1 3807 0
 236 0039 0FB6D2   		movzbl	%dl, %edx
 237              	.LVL34:
3809:fltk-1.3.4-1/png/pngrutil.c **** 
3810:fltk-1.3.4-1/png/pngrutil.c ****       p = b - c;
3811:fltk-1.3.4-1/png/pngrutil.c ****       pc = a - c;
 238              		.loc 1 3811 0
 239 003c 89D0     		movl	%edx, %eax
 240 003e 4429C0   		subl	%r8d, %eax
3812:fltk-1.3.4-1/png/pngrutil.c **** 
3813:fltk-1.3.4-1/png/pngrutil.c **** #     ifdef PNG_USE_ABS
3814:fltk-1.3.4-1/png/pngrutil.c ****          pa = abs(p);
3815:fltk-1.3.4-1/png/pngrutil.c ****          pb = abs(pc);
3816:fltk-1.3.4-1/png/pngrutil.c ****          pc = abs(p + pc);
3817:fltk-1.3.4-1/png/pngrutil.c **** #     else
3818:fltk-1.3.4-1/png/pngrutil.c ****          pa = p < 0 ? -p : p;
3819:fltk-1.3.4-1/png/pngrutil.c ****          pb = pc < 0 ? -pc : pc;
 241              		.loc 1 3819 0
 242 0041 89C5     		movl	%eax, %ebp
3810:fltk-1.3.4-1/png/pngrutil.c ****       pc = a - c;
 243              		.loc 1 3810 0
 244 0043 4589D1   		movl	%r10d, %r9d
 245              		.loc 1 3819 0
 246 0046 C1FD1F   		sarl	$31, %ebp
3810:fltk-1.3.4-1/png/pngrutil.c ****       pc = a - c;
 247              		.loc 1 3810 0
 248 0049 4529C1   		subl	%r8d, %r9d
 249              	.LVL35:
3818:fltk-1.3.4-1/png/pngrutil.c ****          pb = pc < 0 ? -pc : pc;
 250              		.loc 1 3818 0
 251 004c 4489CE   		movl	%r9d, %esi
 252 004f C1FE1F   		sarl	$31, %esi
 253 0052 89F1     		movl	%esi, %ecx
 254 0054 4431C9   		xorl	%r9d, %ecx
 255 0057 29F1     		subl	%esi, %ecx
 256              	.LVL36:
 257              		.loc 1 3819 0
 258 0059 89EE     		movl	%ebp, %esi
 259 005b 31C6     		xorl	%eax, %esi
3820:fltk-1.3.4-1/png/pngrutil.c ****          pc = (p + pc) < 0 ? -(p + pc) : p + pc;
 260              		.loc 1 3820 0
 261 005d 4401C8   		addl	%r9d, %eax
 262              	.LVL37:
 263 0060 4189C1   		movl	%eax, %r9d
 264              	.LVL38:
3819:fltk-1.3.4-1/png/pngrutil.c ****          pc = (p + pc) < 0 ? -(p + pc) : p + pc;
 265              		.loc 1 3819 0
 266 0063 29EE     		subl	%ebp, %esi
 267              	.LVL39:
 268              		.loc 1 3820 0
 269 0065 41C1F91F 		sarl	$31, %r9d
 270 0069 4431C8   		xorl	%r9d, %eax
 271 006c 4429C8   		subl	%r9d, %eax
 272              	.LVL40:
3821:fltk-1.3.4-1/png/pngrutil.c **** #     endif
3822:fltk-1.3.4-1/png/pngrutil.c **** 
3823:fltk-1.3.4-1/png/pngrutil.c ****       /* Find the best predictor, the least of pa, pb, pc favoring the earlier
3824:fltk-1.3.4-1/png/pngrutil.c ****        * ones in the case of a tie.
3825:fltk-1.3.4-1/png/pngrutil.c ****        */
3826:fltk-1.3.4-1/png/pngrutil.c ****       if (pb < pa) pa = pb, a = b;
 273              		.loc 1 3826 0
 274 006f 39F1     		cmpl	%esi, %ecx
 275 0071 7E05     		jle	.L28
 276 0073 89F1     		movl	%esi, %ecx
 277              	.LVL41:
 278 0075 4489D2   		movl	%r10d, %edx
 279              	.LVL42:
 280              	.L28:
3827:fltk-1.3.4-1/png/pngrutil.c ****       if (pc < pa) a = c;
 281              		.loc 1 3827 0
 282 0078 39C1     		cmpl	%eax, %ecx
3828:fltk-1.3.4-1/png/pngrutil.c **** 
3829:fltk-1.3.4-1/png/pngrutil.c ****       /* Calculate the current pixel in a, and move the previous row pixel to c
3830:fltk-1.3.4-1/png/pngrutil.c ****        * for the next time round the loop
3831:fltk-1.3.4-1/png/pngrutil.c ****        */
3832:fltk-1.3.4-1/png/pngrutil.c ****       c = b;
3833:fltk-1.3.4-1/png/pngrutil.c ****       a += *row;
 283              		.loc 1 3833 0
 284 007a 0FB607   		movzbl	(%rdi), %eax
 285              	.LVL43:
3827:fltk-1.3.4-1/png/pngrutil.c ****       if (pc < pa) a = c;
 286              		.loc 1 3827 0
 287 007d 410F4FD0 		cmovg	%r8d, %edx
 288              	.LVL44:
3834:fltk-1.3.4-1/png/pngrutil.c ****       *row++ = (png_byte)a;
 289              		.loc 1 3834 0
 290 0081 4883C701 		addq	$1, %rdi
 291              	.LVL45:
3832:fltk-1.3.4-1/png/pngrutil.c ****       a += *row;
 292              		.loc 1 3832 0
 293 0085 4589D0   		movl	%r10d, %r8d
 294              	.LVL46:
3833:fltk-1.3.4-1/png/pngrutil.c ****       *row++ = (png_byte)a;
 295              		.loc 1 3833 0
 296 0088 01C2     		addl	%eax, %edx
 297              	.LVL47:
 298              	.LBE82:
3803:fltk-1.3.4-1/png/pngrutil.c ****    {
 299              		.loc 1 3803 0
 300 008a 4839FB   		cmpq	%rdi, %rbx
 301              	.LBB83:
 302              		.loc 1 3834 0
 303 008d 8857FF   		movb	%dl, -1(%rdi)
 304              	.LBE83:
3803:fltk-1.3.4-1/png/pngrutil.c ****    {
 305              		.loc 1 3803 0
 306 0090 759E     		jne	.L32
 307              	.LVL48:
 308              	.L26:
3835:fltk-1.3.4-1/png/pngrutil.c ****    }
3836:fltk-1.3.4-1/png/pngrutil.c **** }
 309              		.loc 1 3836 0
 310 0092 5B       		popq	%rbx
 311              		.cfi_def_cfa_offset 16
 312              	.LVL49:
 313 0093 5D       		popq	%rbp
 314              		.cfi_def_cfa_offset 8
 315 0094 C3       		ret
 316              		.cfi_endproc
 317              	.LFE99:
 319              		.section	.text.unlikely.png_read_filter_row_paeth_1byte_pixel
 320              	.LCOLDE3:
 321              		.section	.text.png_read_filter_row_paeth_1byte_pixel
 322              	.LHOTE3:
 323              		.section	.text.unlikely.png_read_filter_row_paeth_multibyte_pixel,"ax",@progbits
 324              	.LCOLDB4:
 325              		.section	.text.png_read_filter_row_paeth_multibyte_pixel,"ax",@progbits
 326              	.LHOTB4:
 327              		.p2align 4,,15
 329              	png_read_filter_row_paeth_multibyte_pixel:
 330              	.LFB100:
3837:fltk-1.3.4-1/png/pngrutil.c **** 
3838:fltk-1.3.4-1/png/pngrutil.c **** static void
3839:fltk-1.3.4-1/png/pngrutil.c **** png_read_filter_row_paeth_multibyte_pixel(png_row_infop row_info, png_bytep row,
3840:fltk-1.3.4-1/png/pngrutil.c ****    png_const_bytep prev_row)
3841:fltk-1.3.4-1/png/pngrutil.c **** {
 331              		.loc 1 3841 0
 332              		.cfi_startproc
 333              	.LVL50:
 334 0000 4154     		pushq	%r12
 335              		.cfi_def_cfa_offset 16
 336              		.cfi_offset 12, -16
 337              	.LVL51:
 338 0002 55       		pushq	%rbp
 339              		.cfi_def_cfa_offset 24
 340              		.cfi_offset 6, -24
 341 0003 53       		pushq	%rbx
 342              		.cfi_def_cfa_offset 32
 343              		.cfi_offset 3, -32
3842:fltk-1.3.4-1/png/pngrutil.c ****    int bpp = (row_info->pixel_depth + 7) >> 3;
3843:fltk-1.3.4-1/png/pngrutil.c ****    png_bytep rp_end = row + bpp;
 344              		.loc 1 3843 0
 345 0004 440FB65F 		movzbl	19(%rdi), %r11d
 345      13
 346 0009 4183C307 		addl	$7, %r11d
 347 000d 41C1FB03 		sarl	$3, %r11d
 348 0011 4D63DB   		movslq	%r11d, %r11
 349 0014 4A8D2C1E 		leaq	(%rsi,%r11), %rbp
 350              	.LVL52:
3844:fltk-1.3.4-1/png/pngrutil.c **** 
3845:fltk-1.3.4-1/png/pngrutil.c ****    /* Process the first pixel in the row completely (this is the same as 'up'
3846:fltk-1.3.4-1/png/pngrutil.c ****     * because there is only one candidate predictor for the first row).
3847:fltk-1.3.4-1/png/pngrutil.c ****     */
3848:fltk-1.3.4-1/png/pngrutil.c ****    while (row < rp_end)
 351              		.loc 1 3848 0
 352 0018 4839EE   		cmpq	%rbp, %rsi
 353 001b 732E     		jnb	.L36
 354 001d 4989D0   		movq	%rdx, %r8
 355 0020 4889F0   		movq	%rsi, %rax
 356              	.LVL53:
 357              		.p2align 4,,10
 358 0023 0F1F4400 		.p2align 3
 358      00
 359              	.L37:
 360              	.LBB84:
3849:fltk-1.3.4-1/png/pngrutil.c ****    {
3850:fltk-1.3.4-1/png/pngrutil.c ****       int a = *row + *prev_row++;
 361              		.loc 1 3850 0
 362 0028 0FB608   		movzbl	(%rax), %ecx
 363 002b 4983C001 		addq	$1, %r8
 364              	.LVL54:
3851:fltk-1.3.4-1/png/pngrutil.c ****       *row++ = (png_byte)a;
 365              		.loc 1 3851 0
 366 002f 4883C001 		addq	$1, %rax
 367              	.LVL55:
 368 0033 410248FF 		addb	-1(%r8), %cl
 369              	.LVL56:
 370              	.LBE84:
3848:fltk-1.3.4-1/png/pngrutil.c ****    {
 371              		.loc 1 3848 0
 372 0037 4839C5   		cmpq	%rax, %rbp
 373              	.LBB85:
 374              		.loc 1 3851 0
 375 003a 8848FF   		movb	%cl, -1(%rax)
 376              	.LVL57:
 377              	.LBE85:
3848:fltk-1.3.4-1/png/pngrutil.c ****    {
 378              		.loc 1 3848 0
 379 003d 75E9     		jne	.L37
 380 003f 4889E8   		movq	%rbp, %rax
 381              	.LVL58:
 382 0042 4829F0   		subq	%rsi, %rax
 383 0045 4801C2   		addq	%rax, %rdx
 384 0048 4801C6   		addq	%rax, %rsi
 385              	.LVL59:
 386              	.L36:
3852:fltk-1.3.4-1/png/pngrutil.c ****    }
3853:fltk-1.3.4-1/png/pngrutil.c **** 
3854:fltk-1.3.4-1/png/pngrutil.c ****    /* Remainder */
3855:fltk-1.3.4-1/png/pngrutil.c ****    rp_end += row_info->rowbytes - bpp;
 387              		.loc 1 3855 0
 388 004b 4C29DD   		subq	%r11, %rbp
 389              	.LVL60:
 390 004e 48036F08 		addq	8(%rdi), %rbp
 391              	.LVL61:
 392 0052 49F7DB   		negq	%r11
3856:fltk-1.3.4-1/png/pngrutil.c **** 
3857:fltk-1.3.4-1/png/pngrutil.c ****    while (row < rp_end)
 393              		.loc 1 3857 0
 394 0055 4839F5   		cmpq	%rsi, %rbp
 395 0058 7670     		jbe	.L35
 396              	.LVL62:
 397 005a 660F1F44 		.p2align 4,,10
 397      0000
 398              		.p2align 3
 399              	.L43:
 400              	.LBB86:
3858:fltk-1.3.4-1/png/pngrutil.c ****    {
3859:fltk-1.3.4-1/png/pngrutil.c ****       int a, b, c, pa, pb, pc, p;
3860:fltk-1.3.4-1/png/pngrutil.c **** 
3861:fltk-1.3.4-1/png/pngrutil.c ****       c = *(prev_row - bpp);
 401              		.loc 1 3861 0
 402 0060 420FB60C 		movzbl	(%rdx,%r11), %ecx
 402      1A
 403              	.LVL63:
3862:fltk-1.3.4-1/png/pngrutil.c ****       a = *(row - bpp);
3863:fltk-1.3.4-1/png/pngrutil.c ****       b = *prev_row++;
 404              		.loc 1 3863 0
 405 0065 4883C201 		addq	$1, %rdx
 406              	.LVL64:
3862:fltk-1.3.4-1/png/pngrutil.c ****       a = *(row - bpp);
 407              		.loc 1 3862 0
 408 0069 460FB624 		movzbl	(%rsi,%r11), %r12d
 408      1E
 409              	.LVL65:
 410              		.loc 1 3863 0
 411 006e 440FB652 		movzbl	-1(%rdx), %r10d
 411      FF
 412              	.LVL66:
3864:fltk-1.3.4-1/png/pngrutil.c **** 
3865:fltk-1.3.4-1/png/pngrutil.c ****       p = b - c;
3866:fltk-1.3.4-1/png/pngrutil.c ****       pc = a - c;
 413              		.loc 1 3866 0
 414 0073 4489E0   		movl	%r12d, %eax
3865:fltk-1.3.4-1/png/pngrutil.c ****       pc = a - c;
 415              		.loc 1 3865 0
 416 0076 4589D1   		movl	%r10d, %r9d
 417              		.loc 1 3866 0
 418 0079 29C8     		subl	%ecx, %eax
3865:fltk-1.3.4-1/png/pngrutil.c ****       pc = a - c;
 419              		.loc 1 3865 0
 420 007b 4129C9   		subl	%ecx, %r9d
 421              	.LVL67:
3867:fltk-1.3.4-1/png/pngrutil.c **** 
3868:fltk-1.3.4-1/png/pngrutil.c **** #     ifdef PNG_USE_ABS
3869:fltk-1.3.4-1/png/pngrutil.c ****          pa = abs(p);
3870:fltk-1.3.4-1/png/pngrutil.c ****          pb = abs(pc);
3871:fltk-1.3.4-1/png/pngrutil.c ****          pc = abs(p + pc);
3872:fltk-1.3.4-1/png/pngrutil.c **** #     else
3873:fltk-1.3.4-1/png/pngrutil.c ****          pa = p < 0 ? -p : p;
3874:fltk-1.3.4-1/png/pngrutil.c ****          pb = pc < 0 ? -pc : pc;
 422              		.loc 1 3874 0
 423 007e 89C3     		movl	%eax, %ebx
3873:fltk-1.3.4-1/png/pngrutil.c ****          pb = pc < 0 ? -pc : pc;
 424              		.loc 1 3873 0
 425 0080 4489CF   		movl	%r9d, %edi
 426              		.loc 1 3874 0
 427 0083 C1FB1F   		sarl	$31, %ebx
3873:fltk-1.3.4-1/png/pngrutil.c ****          pb = pc < 0 ? -pc : pc;
 428              		.loc 1 3873 0
 429 0086 C1FF1F   		sarl	$31, %edi
 430 0089 4189F8   		movl	%edi, %r8d
 431 008c 4531C8   		xorl	%r9d, %r8d
 432 008f 4129F8   		subl	%edi, %r8d
 433              	.LVL68:
 434              		.loc 1 3874 0
 435 0092 89DF     		movl	%ebx, %edi
 436 0094 31C7     		xorl	%eax, %edi
3875:fltk-1.3.4-1/png/pngrutil.c ****          pc = (p + pc) < 0 ? -(p + pc) : p + pc;
 437              		.loc 1 3875 0
 438 0096 4401C8   		addl	%r9d, %eax
 439              	.LVL69:
 440 0099 4189C1   		movl	%eax, %r9d
 441              	.LVL70:
3874:fltk-1.3.4-1/png/pngrutil.c ****          pc = (p + pc) < 0 ? -(p + pc) : p + pc;
 442              		.loc 1 3874 0
 443 009c 29DF     		subl	%ebx, %edi
 444              	.LVL71:
 445              		.loc 1 3875 0
 446 009e 41C1F91F 		sarl	$31, %r9d
 447 00a2 4431C8   		xorl	%r9d, %eax
 448 00a5 4429C8   		subl	%r9d, %eax
 449              	.LVL72:
3876:fltk-1.3.4-1/png/pngrutil.c **** #     endif
3877:fltk-1.3.4-1/png/pngrutil.c **** 
3878:fltk-1.3.4-1/png/pngrutil.c ****       if (pb < pa) pa = pb, a = b;
 450              		.loc 1 3878 0
 451 00a8 4139F8   		cmpl	%edi, %r8d
 452 00ab 7F06     		jg	.L39
 453 00ad 4489C7   		movl	%r8d, %edi
 454              	.LVL73:
3862:fltk-1.3.4-1/png/pngrutil.c ****       b = *prev_row++;
 455              		.loc 1 3862 0
 456 00b0 4589E2   		movl	%r12d, %r10d
 457              	.LVL74:
 458              	.L39:
3879:fltk-1.3.4-1/png/pngrutil.c ****       if (pc < pa) a = c;
 459              		.loc 1 3879 0
 460 00b3 39C7     		cmpl	%eax, %edi
3880:fltk-1.3.4-1/png/pngrutil.c **** 
3881:fltk-1.3.4-1/png/pngrutil.c ****       a += *row;
 461              		.loc 1 3881 0
 462 00b5 0FB606   		movzbl	(%rsi), %eax
 463              	.LVL75:
3879:fltk-1.3.4-1/png/pngrutil.c ****       if (pc < pa) a = c;
 464              		.loc 1 3879 0
 465 00b8 410F4ECA 		cmovle	%r10d, %ecx
 466              	.LVL76:
3882:fltk-1.3.4-1/png/pngrutil.c ****       *row++ = (png_byte)a;
 467              		.loc 1 3882 0
 468 00bc 4883C601 		addq	$1, %rsi
 469              	.LVL77:
3881:fltk-1.3.4-1/png/pngrutil.c ****       *row++ = (png_byte)a;
 470              		.loc 1 3881 0
 471 00c0 01C1     		addl	%eax, %ecx
 472              	.LVL78:
 473              	.LBE86:
3857:fltk-1.3.4-1/png/pngrutil.c ****    {
 474              		.loc 1 3857 0
 475 00c2 4839F5   		cmpq	%rsi, %rbp
 476              	.LBB87:
 477              		.loc 1 3882 0
 478 00c5 884EFF   		movb	%cl, -1(%rsi)
 479              	.LVL79:
 480              	.LBE87:
3857:fltk-1.3.4-1/png/pngrutil.c ****    {
 481              		.loc 1 3857 0
 482 00c8 7596     		jne	.L43
 483              	.LVL80:
 484              	.L35:
3883:fltk-1.3.4-1/png/pngrutil.c ****    }
3884:fltk-1.3.4-1/png/pngrutil.c **** }
 485              		.loc 1 3884 0
 486 00ca 5B       		popq	%rbx
 487              		.cfi_def_cfa_offset 24
 488 00cb 5D       		popq	%rbp
 489              		.cfi_def_cfa_offset 16
 490              	.LVL81:
 491 00cc 415C     		popq	%r12
 492              		.cfi_def_cfa_offset 8
 493 00ce C3       		ret
 494              		.cfi_endproc
 495              	.LFE100:
 497              		.section	.text.unlikely.png_read_filter_row_paeth_multibyte_pixel
 498              	.LCOLDE4:
 499              		.section	.text.png_read_filter_row_paeth_multibyte_pixel
 500              	.LHOTE4:
 501              		.section	.rodata.str1.1,"aMS",@progbits,1
 502              	.LC5:
 503 0000 20757369 		.string	" using zstream"
 503      6E67207A 
 503      73747265 
 503      616D00
 504              	.LC6:
 505 000f 312E322E 		.string	"1.2.8"
 505      3800
 506              		.section	.text.unlikely.png_inflate_claim,"ax",@progbits
 507              	.LCOLDB7:
 508              		.section	.text.png_inflate_claim,"ax",@progbits
 509              	.LHOTB7:
 510              		.p2align 4,,15
 512              	png_inflate_claim:
 513              	.LFB67:
 333:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->zowner != 0)
 514              		.loc 1 333 0
 515              		.cfi_startproc
 516              	.LVL82:
 517 0000 55       		pushq	%rbp
 518              		.cfi_def_cfa_offset 16
 519              		.cfi_offset 6, -16
 520 0001 53       		pushq	%rbx
 521              		.cfi_def_cfa_offset 24
 522              		.cfi_offset 3, -24
 523 0002 89F5     		movl	%esi, %ebp
 524 0004 4889FB   		movq	%rdi, %rbx
 525 0007 4883EC68 		subq	$104, %rsp
 526              		.cfi_def_cfa_offset 128
 333:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->zowner != 0)
 527              		.loc 1 333 0
 528 000b 64488B04 		movq	%fs:40, %rax
 528      25280000 
 528      00
 529 0014 48894424 		movq	%rax, 88(%rsp)
 529      58
 530 0019 31C0     		xorl	%eax, %eax
 334:fltk-1.3.4-1/png/pngrutil.c ****    {
 531              		.loc 1 334 0
 532 001b 8B873801 		movl	312(%rdi), %eax
 532      0000
 533 0021 85C0     		testl	%eax, %eax
 534 0023 0F859F00 		jne	.L61
 534      0000
 535              	.LVL83:
 536              	.L48:
 537              	.LBB88:
 391:fltk-1.3.4-1/png/pngrutil.c ****       {
 538              		.loc 1 391 0
 539 0029 F6833001 		testb	$2, 304(%rbx)
 539      000002
 386:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.avail_in = 0;
 540              		.loc 1 386 0
 541 0030 48C78340 		movq	$0, 320(%rbx)
 541      01000000 
 541      000000
 394:fltk-1.3.4-1/png/pngrutil.c **** #else
 542              		.loc 1 394 0
 543 003b 488DBB40 		leaq	320(%rbx), %rdi
 543      010000
 387:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.next_out = NULL;
 544              		.loc 1 387 0
 545 0042 C7834801 		movl	$0, 328(%rbx)
 545      00000000 
 545      0000
 388:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.avail_out = 0;
 546              		.loc 1 388 0
 547 004c 48C78358 		movq	$0, 344(%rbx)
 547      01000000 
 547      000000
 389:fltk-1.3.4-1/png/pngrutil.c **** 
 548              		.loc 1 389 0
 549 0057 C7836001 		movl	$0, 352(%rbx)
 549      00000000 
 549      0000
 391:fltk-1.3.4-1/png/pngrutil.c ****       {
 550              		.loc 1 391 0
 551 0061 742D     		je	.L49
 394:fltk-1.3.4-1/png/pngrutil.c **** #else
 552              		.loc 1 394 0
 553 0063 E8000000 		call	inflateReset
 553      00
 554              	.LVL84:
 412:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->zowner = owner;
 555              		.loc 1 412 0
 556 0068 85C0     		testl	%eax, %eax
 557 006a 7544     		jne	.L51
 558              	.LVL85:
 559              	.L50:
 413:fltk-1.3.4-1/png/pngrutil.c **** 
 560              		.loc 1 413 0
 561 006c 89AB3801 		movl	%ebp, 312(%rbx)
 561      0000
 562 0072 31C0     		xorl	%eax, %eax
 563              	.LVL86:
 564              	.L52:
 565              	.LBE88:
 424:fltk-1.3.4-1/png/pngrutil.c **** 
 566              		.loc 1 424 0
 567 0074 488B4C24 		movq	88(%rsp), %rcx
 567      58
 568 0079 6448330C 		xorq	%fs:40, %rcx
 568      25280000 
 568      00
 569 0082 0F859400 		jne	.L62
 569      0000
 570 0088 4883C468 		addq	$104, %rsp
 571              		.cfi_remember_state
 572              		.cfi_def_cfa_offset 24
 573 008c 5B       		popq	%rbx
 574              		.cfi_def_cfa_offset 16
 575              	.LVL87:
 576 008d 5D       		popq	%rbp
 577              		.cfi_def_cfa_offset 8
 578              	.LVL88:
 579 008e C3       		ret
 580              	.LVL89:
 581 008f 90       		.p2align 4,,10
 582              		.p2align 3
 583              	.L49:
 584              		.cfi_restore_state
 585              	.LBB89:
 403:fltk-1.3.4-1/png/pngrutil.c **** #else
 586              		.loc 1 403 0
 587 0090 BA700000 		movl	$112, %edx
 587      00
 588 0095 BE000000 		movl	$.LC6, %esi
 588      00
 589 009a E8000000 		call	inflateInit_
 589      00
 590              	.LVL90:
 408:fltk-1.3.4-1/png/pngrutil.c ****             png_ptr->flags |= PNG_FLAG_ZSTREAM_INITIALIZED;
 591              		.loc 1 408 0
 592 009f 85C0     		testl	%eax, %eax
 593 00a1 750D     		jne	.L51
 409:fltk-1.3.4-1/png/pngrutil.c ****       }
 594              		.loc 1 409 0
 595 00a3 838B3001 		orl	$2, 304(%rbx)
 595      000002
 596              	.LVL91:
 597 00aa EBC0     		jmp	.L50
 598              	.LVL92:
 599 00ac 0F1F4000 		.p2align 4,,10
 600              		.p2align 3
 601              	.L51:
 416:fltk-1.3.4-1/png/pngrutil.c **** 
 602              		.loc 1 416 0
 603 00b0 89C6     		movl	%eax, %esi
 604 00b2 4889DF   		movq	%rbx, %rdi
 605 00b5 8944240C 		movl	%eax, 12(%rsp)
 606 00b9 E8000000 		call	png_zstream_error
 606      00
 607              	.LVL93:
 608 00be 8B44240C 		movl	12(%rsp), %eax
 609 00c2 EBB0     		jmp	.L52
 610              	.LVL94:
 611              		.p2align 4,,10
 612 00c4 0F1F4000 		.p2align 3
 613              	.L61:
 614              	.LBE89:
 615              	.LBB90:
 338:fltk-1.3.4-1/png/pngrutil.c ****       /* So the message that results is "<chunk> using zstream"; this is an
 616              		.loc 1 338 0
 617 00c8 89C2     		movl	%eax, %edx
 343:fltk-1.3.4-1/png/pngrutil.c **** #if PNG_LIBPNG_BUILD_BASE_TYPE >= PNG_LIBPNG_BUILD_RC
 618              		.loc 1 343 0
 619 00ca 488D7C24 		leaq	16(%rsp), %rdi
 619      10
 620 00cf B9000000 		movl	$.LC5, %ecx
 620      00
 338:fltk-1.3.4-1/png/pngrutil.c ****       /* So the message that results is "<chunk> using zstream"; this is an
 621              		.loc 1 338 0
 622 00d4 C1EA18   		shrl	$24, %edx
 343:fltk-1.3.4-1/png/pngrutil.c **** #if PNG_LIBPNG_BUILD_BASE_TYPE >= PNG_LIBPNG_BUILD_RC
 623              		.loc 1 343 0
 624 00d7 BE400000 		movl	$64, %esi
 624      00
 625              	.LVL95:
 338:fltk-1.3.4-1/png/pngrutil.c ****       /* So the message that results is "<chunk> using zstream"; this is an
 626              		.loc 1 338 0
 627 00dc 88442413 		movb	%al, 19(%rsp)
 628 00e0 88542410 		movb	%dl, 16(%rsp)
 629 00e4 89C2     		movl	%eax, %edx
 630 00e6 C1EA10   		shrl	$16, %edx
 631 00e9 88542411 		movb	%dl, 17(%rsp)
 632 00ed 89C2     		movl	%eax, %edx
 633 00ef C1EA08   		shrl	$8, %edx
 634 00f2 88542412 		movb	%dl, 18(%rsp)
 343:fltk-1.3.4-1/png/pngrutil.c **** #if PNG_LIBPNG_BUILD_BASE_TYPE >= PNG_LIBPNG_BUILD_RC
 635              		.loc 1 343 0
 636 00f6 BA040000 		movl	$4, %edx
 636      00
 637 00fb E8000000 		call	png_safecat
 637      00
 638              	.LVL96:
 345:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zowner = 0;
 639              		.loc 1 345 0
 640 0100 488D7424 		leaq	16(%rsp), %rsi
 640      10
 641 0105 4889DF   		movq	%rbx, %rdi
 642 0108 E8000000 		call	png_chunk_warning
 642      00
 643              	.LVL97:
 346:fltk-1.3.4-1/png/pngrutil.c **** #else
 644              		.loc 1 346 0
 645 010d C7833801 		movl	$0, 312(%rbx)
 645      00000000 
 645      0000
 646 0117 E90DFFFF 		jmp	.L48
 646      FF
 647              	.L62:
 648              	.LBE90:
 424:fltk-1.3.4-1/png/pngrutil.c **** 
 649              		.loc 1 424 0
 650 011c E8000000 		call	__stack_chk_fail
 650      00
 651              	.LVL98:
 652              		.cfi_endproc
 653              	.LFE67:
 655              		.section	.text.unlikely.png_inflate_claim
 656              	.LCOLDE7:
 657              		.section	.text.png_inflate_claim
 658              	.LHOTE7:
 659              		.section	.rodata.str1.8,"aMS",@progbits,1
 660              		.align 8
 661              	.LC8:
 662 0000 696E7375 		.string	"insufficient memory to read chunk"
 662      66666963 
 662      69656E74 
 662      206D656D 
 662      6F727920 
 663              		.section	.text.unlikely.png_read_buffer,"ax",@progbits
 664              	.LCOLDB9:
 665              		.section	.text.png_read_buffer,"ax",@progbits
 666              	.LHOTB9:
 667              		.p2align 4,,15
 669              	png_read_buffer:
 670              	.LFB66:
 290:fltk-1.3.4-1/png/pngrutil.c ****    png_bytep buffer = png_ptr->read_buffer;
 671              		.loc 1 290 0
 672              		.cfi_startproc
 673              	.LVL99:
 674 0000 4154     		pushq	%r12
 675              		.cfi_def_cfa_offset 16
 676              		.cfi_offset 12, -16
 677 0002 55       		pushq	%rbp
 678              		.cfi_def_cfa_offset 24
 679              		.cfi_offset 6, -24
 680 0003 4189D4   		movl	%edx, %r12d
 681 0006 53       		pushq	%rbx
 682              		.cfi_def_cfa_offset 32
 683              		.cfi_offset 3, -32
 684 0007 4889F5   		movq	%rsi, %rbp
 685 000a 4889FB   		movq	%rdi, %rbx
 686 000d 4883EC10 		subq	$16, %rsp
 687              		.cfi_def_cfa_offset 48
 291:fltk-1.3.4-1/png/pngrutil.c **** 
 688              		.loc 1 291 0
 689 0011 488B8798 		movq	1176(%rdi), %rax
 689      040000
 690              	.LVL100:
 293:fltk-1.3.4-1/png/pngrutil.c ****    {
 691              		.loc 1 293 0
 692 0018 4885C0   		testq	%rax, %rax
 693 001b 7431     		je	.L64
 293:fltk-1.3.4-1/png/pngrutil.c ****    {
 694              		.loc 1 293 0 is_stmt 0 discriminator 1
 695 001d 4839B7A0 		cmpq	%rsi, 1184(%rdi)
 695      040000
 696 0024 720A     		jb	.L76
 697              	.LVL101:
 698              	.L70:
 323:fltk-1.3.4-1/png/pngrutil.c **** #endif /* READ_iCCP|iTXt|pCAL|sCAL|sPLT|tEXt|zTXt|SEQUENTIAL_READ */
 699              		.loc 1 323 0 is_stmt 1
 700 0026 4883C410 		addq	$16, %rsp
 701              		.cfi_remember_state
 702              		.cfi_def_cfa_offset 32
 703 002a 5B       		popq	%rbx
 704              		.cfi_def_cfa_offset 24
 705              	.LVL102:
 706 002b 5D       		popq	%rbp
 707              		.cfi_def_cfa_offset 16
 708              	.LVL103:
 709 002c 415C     		popq	%r12
 710              		.cfi_def_cfa_offset 8
 711              	.LVL104:
 712 002e C3       		ret
 713              	.LVL105:
 714 002f 90       		.p2align 4,,10
 715              		.p2align 3
 716              	.L76:
 717              		.cfi_restore_state
 295:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->read_buffer = NULL;
 718              		.loc 1 295 0
 719 0030 48C78798 		movq	$0, 1176(%rdi)
 719      04000000 
 719      000000
 297:fltk-1.3.4-1/png/pngrutil.c ****       png_free(png_ptr, buffer);
 720              		.loc 1 297 0
 721 003b 48C787A0 		movq	$0, 1184(%rdi)
 721      04000000 
 721      000000
 298:fltk-1.3.4-1/png/pngrutil.c ****       buffer = NULL;
 722              		.loc 1 298 0
 723 0046 4889C6   		movq	%rax, %rsi
 724              	.LVL106:
 725 0049 E8000000 		call	png_free
 725      00
 726              	.LVL107:
 727              	.L64:
 728              	.LBB93:
 729              	.LBB94:
 304:fltk-1.3.4-1/png/pngrutil.c **** 
 730              		.loc 1 304 0
 731 004e 4889EE   		movq	%rbp, %rsi
 732 0051 4889DF   		movq	%rbx, %rdi
 733 0054 E8000000 		call	png_malloc_base
 733      00
 734              	.LVL108:
 306:fltk-1.3.4-1/png/pngrutil.c ****       {
 735              		.loc 1 306 0
 736 0059 4885C0   		testq	%rax, %rax
 737 005c 7412     		je	.L77
 308:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->read_buffer_size = new_size;
 738              		.loc 1 308 0
 739 005e 48898398 		movq	%rax, 1176(%rbx)
 739      040000
 309:fltk-1.3.4-1/png/pngrutil.c ****       }
 740              		.loc 1 309 0
 741 0065 4889ABA0 		movq	%rbp, 1184(%rbx)
 741      040000
 742 006c EBB8     		jmp	.L70
 743 006e 6690     		.p2align 4,,10
 744              		.p2align 3
 745              	.L77:
 312:fltk-1.3.4-1/png/pngrutil.c ****       {
 746              		.loc 1 312 0
 747 0070 4183FC01 		cmpl	$1, %r12d
 748 0074 7FB0     		jg	.L70
 314:fltk-1.3.4-1/png/pngrutil.c ****              png_chunk_warning(png_ptr, "insufficient memory to read chunk");
 749              		.loc 1 314 0
 750 0076 4585E4   		testl	%r12d, %r12d
 751 0079 48894424 		movq	%rax, 8(%rsp)
 751      08
 315:fltk-1.3.4-1/png/pngrutil.c **** 
 752              		.loc 1 315 0
 753 007e BE000000 		movl	$.LC8, %esi
 753      00
 754 0083 4889DF   		movq	%rbx, %rdi
 314:fltk-1.3.4-1/png/pngrutil.c ****              png_chunk_warning(png_ptr, "insufficient memory to read chunk");
 755              		.loc 1 314 0
 756 0086 740C     		je	.L66
 315:fltk-1.3.4-1/png/pngrutil.c **** 
 757              		.loc 1 315 0
 758 0088 E8000000 		call	png_chunk_warning
 758      00
 759              	.LVL109:
 760              	.LBE94:
 761              	.LBE93:
 322:fltk-1.3.4-1/png/pngrutil.c **** }
 762              		.loc 1 322 0
 763 008d 488B4424 		movq	8(%rsp), %rax
 763      08
 764 0092 EB92     		jmp	.L70
 765              	.LVL110:
 766              	.L66:
 767              	.LBB96:
 768              	.LBB95:
 318:fltk-1.3.4-1/png/pngrutil.c ****       }
 769              		.loc 1 318 0
 770 0094 E8000000 		call	png_chunk_error
 770      00
 771              	.LVL111:
 772              	.LBE95:
 773              	.LBE96:
 774              		.cfi_endproc
 775              	.LFE66:
 777              		.section	.text.unlikely.png_read_buffer
 778              	.LCOLDE9:
 779              		.section	.text.png_read_buffer
 780              	.LHOTE9:
 781              		.section	.rodata.str1.1
 782              	.LC10:
 783 0015 7A737472 		.string	"zstream unclaimed"
 783      65616D20 
 783      756E636C 
 783      61696D65 
 783      6400
 784              		.section	.text.unlikely.png_inflate.constprop.6,"ax",@progbits
 785              	.LCOLDB11:
 786              		.section	.text.png_inflate.constprop.6,"ax",@progbits
 787              	.LHOTB11:
 788              		.p2align 4,,15
 790              	png_inflate.constprop.6:
 791              	.LFB115:
 439:fltk-1.3.4-1/png/pngrutil.c ****     /* INPUT: */ png_const_bytep input, png_uint_32p input_size_ptr,
 792              		.loc 1 439 0
 793              		.cfi_startproc
 794              	.LVL112:
 795 0000 4157     		pushq	%r15
 796              		.cfi_def_cfa_offset 16
 797              		.cfi_offset 15, -16
 798 0002 4156     		pushq	%r14
 799              		.cfi_def_cfa_offset 24
 800              		.cfi_offset 14, -24
 801 0004 4989FE   		movq	%rdi, %r14
 802 0007 4155     		pushq	%r13
 803              		.cfi_def_cfa_offset 32
 804              		.cfi_offset 13, -32
 805 0009 4154     		pushq	%r12
 806              		.cfi_def_cfa_offset 40
 807              		.cfi_offset 12, -40
 808 000b 55       		pushq	%rbp
 809              		.cfi_def_cfa_offset 48
 810              		.cfi_offset 6, -48
 811 000c 53       		pushq	%rbx
 812              		.cfi_def_cfa_offset 56
 813              		.cfi_offset 3, -56
 814 000d 4881EC28 		subq	$1064, %rsp
 814      040000
 815              		.cfi_def_cfa_offset 1120
 439:fltk-1.3.4-1/png/pngrutil.c ****     /* INPUT: */ png_const_bytep input, png_uint_32p input_size_ptr,
 816              		.loc 1 439 0
 817 0014 64488B04 		movq	%fs:40, %rax
 817      25280000 
 817      00
 818 001d 48898424 		movq	%rax, 1048(%rsp)
 818      18040000 
 819 0025 31C0     		xorl	%eax, %eax
 820              	.LVL113:
 443:fltk-1.3.4-1/png/pngrutil.c ****    {
 821              		.loc 1 443 0
 822 0027 39B73801 		cmpl	%esi, 312(%rdi)
 822      0000
 823 002d 0F853A01 		jne	.L79
 823      0000
 824              	.LBB97:
 466:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->zstream.next_out = output;
 825              		.loc 1 466 0
 826 0033 4D85C0   		testq	%r8, %r8
 446:fltk-1.3.4-1/png/pngrutil.c ****       png_uint_32 avail_in = *input_size_ptr;
 827              		.loc 1 446 0
 828 0036 4D8B39   		movq	(%r9), %r15
 829              	.LVL114:
 830 0039 4989CC   		movq	%rcx, %r12
 831 003c 4C89C3   		movq	%r8, %rbx
 447:fltk-1.3.4-1/png/pngrutil.c **** 
 832              		.loc 1 447 0
 833 003f 8B09     		movl	(%rcx), %ecx
 834              	.LVL115:
 835 0041 4D89CD   		movq	%r9, %r13
 458:fltk-1.3.4-1/png/pngrutil.c ****       /* avail_in and avail_out are set below from 'size' */
 836              		.loc 1 458 0
 837 0044 48899740 		movq	%rdx, 320(%rdi)
 837      010000
 460:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.avail_out = 0;
 838              		.loc 1 460 0
 839 004b C7874801 		movl	$0, 328(%rdi)
 839      00000000 
 839      0000
 461:fltk-1.3.4-1/png/pngrutil.c **** 
 840              		.loc 1 461 0
 841 0055 C7876001 		movl	$0, 352(%rdi)
 841      00000000 
 841      0000
 466:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->zstream.next_out = output;
 842              		.loc 1 466 0
 843 005f 7407     		je	.L80
 467:fltk-1.3.4-1/png/pngrutil.c **** 
 844              		.loc 1 467 0
 845 0061 4D898658 		movq	%r8, 344(%r14)
 845      010000
 846              	.LVL116:
 847              	.L80:
 848 0068 498DAE40 		leaq	320(%r14), %rbp
 848      010000
 849              	.LBE97:
 439:fltk-1.3.4-1/png/pngrutil.c ****     /* INPUT: */ png_const_bytep input, png_uint_32p input_size_ptr,
 850              		.loc 1 439 0
 851 006f 31C0     		xorl	%eax, %eax
 852 0071 31D2     		xorl	%edx, %edx
 853              	.LVL117:
 854 0073 EB3F     		jmp	.L85
 855              	.LVL118:
 856              		.p2align 4,,10
 857 0075 0F1F00   		.p2align 3
 858              	.L81:
 859              	.LBB101:
 860              	.LBB98:
 507:fltk-1.3.4-1/png/pngrutil.c ****             avail = (uInt)avail_out; /* safe: < ZLIB_IO_MAX */
 861              		.loc 1 507 0
 862 0078 4839D0   		cmpq	%rdx, %rax
 863 007b 7305     		jnb	.L82
 508:fltk-1.3.4-1/png/pngrutil.c **** 
 864              		.loc 1 508 0
 865 007d 89C1     		movl	%eax, %ecx
 866              	.LVL119:
 867 007f 4889C2   		movq	%rax, %rdx
 868              	.LVL120:
 869              	.L82:
 511:fltk-1.3.4-1/png/pngrutil.c **** 
 870              		.loc 1 511 0
 871 0082 4829D0   		subq	%rdx, %rax
 872              	.LVL121:
 510:fltk-1.3.4-1/png/pngrutil.c ****          avail_out -= avail;
 873              		.loc 1 510 0
 874 0085 41898E60 		movl	%ecx, 352(%r14)
 874      010000
 519:fltk-1.3.4-1/png/pngrutil.c ****              (finish ? Z_FINISH : Z_SYNC_FLUSH));
 875              		.loc 1 519 0
 876 008c 4889EF   		movq	%rbp, %rdi
 877 008f 4883F801 		cmpq	$1, %rax
 511:fltk-1.3.4-1/png/pngrutil.c **** 
 878              		.loc 1 511 0
 879 0093 4989C7   		movq	%rax, %r15
 880              	.LVL122:
 519:fltk-1.3.4-1/png/pngrutil.c ****              (finish ? Z_FINISH : Z_SYNC_FLUSH));
 881              		.loc 1 519 0
 882 0096 19F6     		sbbl	%esi, %esi
 883 0098 83E604   		andl	$4, %esi
 884 009b E8000000 		call	inflate
 884      00
 885              	.LVL123:
 886              	.LBE98:
 521:fltk-1.3.4-1/png/pngrutil.c **** 
 887              		.loc 1 521 0
 888 00a0 85C0     		testl	%eax, %eax
 889 00a2 754C     		jne	.L84
 890 00a4 418B8660 		movl	352(%r14), %eax
 890      010000
 891              	.LVL124:
 892 00ab 418B9648 		movl	328(%r14), %edx
 892      010000
 893              	.LBB99:
 489:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->zstream.avail_in = avail;
 894              		.loc 1 489 0
 895 00b2 31C9     		xorl	%ecx, %ecx
 896              	.LVL125:
 897              	.L85:
 490:fltk-1.3.4-1/png/pngrutil.c **** 
 898              		.loc 1 490 0
 899 00b4 01CA     		addl	%ecx, %edx
 900              	.LVL126:
 493:fltk-1.3.4-1/png/pngrutil.c **** 
 901              		.loc 1 493 0
 902 00b6 4C01F8   		addq	%r15, %rax
 903              	.LVL127:
 497:fltk-1.3.4-1/png/pngrutil.c ****          {
 904              		.loc 1 497 0
 905 00b9 4885DB   		testq	%rbx, %rbx
 490:fltk-1.3.4-1/png/pngrutil.c **** 
 906              		.loc 1 490 0
 907 00bc 41899648 		movl	%edx, 328(%r14)
 907      010000
 495:fltk-1.3.4-1/png/pngrutil.c **** 
 908              		.loc 1 495 0
 909 00c3 B9FFFFFF 		movl	$-1, %ecx
 909      FF
 497:fltk-1.3.4-1/png/pngrutil.c ****          {
 910              		.loc 1 497 0
 911 00c8 BAFFFFFF 		movl	$4294967295, %edx
 911      FF
 912 00cd 75A9     		jne	.L81
 502:fltk-1.3.4-1/png/pngrutil.c ****             if ((sizeof local_buffer) < avail)
 913              		.loc 1 502 0
 914 00cf 488D7C24 		leaq	16(%rsp), %rdi
 914      10
 915 00d4 BA000400 		movl	$1024, %edx
 915      00
 504:fltk-1.3.4-1/png/pngrutil.c ****          }
 916              		.loc 1 504 0
 917 00d9 B9000400 		movl	$1024, %ecx
 917      00
 502:fltk-1.3.4-1/png/pngrutil.c ****             if ((sizeof local_buffer) < avail)
 918              		.loc 1 502 0
 919 00de 4989BE58 		movq	%rdi, 344(%r14)
 919      010000
 920              	.LVL128:
 921 00e5 EB91     		jmp	.L81
 922              	.LVL129:
 923 00e7 660F1F84 		.p2align 4,,10
 923      00000000 
 923      00
 924              		.p2align 3
 925              	.L84:
 926              	.LBE99:
 524:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->zstream.next_out = NULL;
 927              		.loc 1 524 0
 928 00f0 4885DB   		testq	%rbx, %rbx
 929 00f3 746B     		je	.L103
 930              	.L86:
 529:fltk-1.3.4-1/png/pngrutil.c **** 
 931              		.loc 1 529 0
 932 00f5 418B9660 		movl	352(%r14), %edx
 932      010000
 528:fltk-1.3.4-1/png/pngrutil.c ****       avail_out += png_ptr->zstream.avail_out;
 933              		.loc 1 528 0
 934 00fc 418B8E48 		movl	328(%r14), %ecx
 934      010000
 935              	.LVL130:
 534:fltk-1.3.4-1/png/pngrutil.c ****          *output_size_ptr -= avail_out;
 936              		.loc 1 534 0
 937 0103 4901D7   		addq	%rdx, %r15
 938              	.LVL131:
 939 0106 7548     		jne	.L104
 940              	.L87:
 537:fltk-1.3.4-1/png/pngrutil.c ****          *input_size_ptr -= avail_in;
 941              		.loc 1 537 0
 942 0108 85C9     		testl	%ecx, %ecx
 943 010a 7404     		je	.L88
 538:fltk-1.3.4-1/png/pngrutil.c **** 
 944              		.loc 1 538 0
 945 010c 41290C24 		subl	%ecx, (%r12)
 946              	.L88:
 541:fltk-1.3.4-1/png/pngrutil.c ****       return ret;
 947              		.loc 1 541 0
 948 0110 89C6     		movl	%eax, %esi
 949 0112 4C89F7   		movq	%r14, %rdi
 950 0115 8944240C 		movl	%eax, 12(%rsp)
 951 0119 E8000000 		call	png_zstream_error
 951      00
 952              	.LVL132:
 953              	.LBB100:
 519:fltk-1.3.4-1/png/pngrutil.c ****              (finish ? Z_FINISH : Z_SYNC_FLUSH));
 954              		.loc 1 519 0
 955 011e 8B44240C 		movl	12(%rsp), %eax
 956              	.LVL133:
 957              	.L89:
 958              	.LBE100:
 959              	.LBE101:
 554:fltk-1.3.4-1/png/pngrutil.c **** 
 960              		.loc 1 554 0
 961 0122 488BBC24 		movq	1048(%rsp), %rdi
 961      18040000 
 962 012a 6448333C 		xorq	%fs:40, %rdi
 962      25280000 
 962      00
 963 0133 754A     		jne	.L105
 964 0135 4881C428 		addq	$1064, %rsp
 964      040000
 965              		.cfi_remember_state
 966              		.cfi_def_cfa_offset 56
 967 013c 5B       		popq	%rbx
 968              		.cfi_def_cfa_offset 48
 969 013d 5D       		popq	%rbp
 970              		.cfi_def_cfa_offset 40
 971 013e 415C     		popq	%r12
 972              		.cfi_def_cfa_offset 32
 973 0140 415D     		popq	%r13
 974              		.cfi_def_cfa_offset 24
 975 0142 415E     		popq	%r14
 976              		.cfi_def_cfa_offset 16
 977              	.LVL134:
 978 0144 415F     		popq	%r15
 979              		.cfi_def_cfa_offset 8
 980 0146 C3       		ret
 981              	.LVL135:
 982 0147 660F1F84 		.p2align 4,,10
 982      00000000 
 982      00
 983              		.p2align 3
 984              	.L104:
 985              		.cfi_restore_state
 986              	.LBB102:
 535:fltk-1.3.4-1/png/pngrutil.c **** 
 987              		.loc 1 535 0
 988 0150 4D297D00 		subq	%r15, 0(%r13)
 989 0154 EBB2     		jmp	.L87
 990              	.LVL136:
 991 0156 662E0F1F 		.p2align 4,,10
 991      84000000 
 991      0000
 992              		.p2align 3
 993              	.L103:
 525:fltk-1.3.4-1/png/pngrutil.c **** 
 994              		.loc 1 525 0
 995 0160 49C78658 		movq	$0, 344(%r14)
 995      01000000 
 995      000000
 996 016b EB88     		jmp	.L86
 997              	.LVL137:
 998              	.L79:
 999              	.LBE102:
 551:fltk-1.3.4-1/png/pngrutil.c ****       return Z_STREAM_ERROR;
 1000              		.loc 1 551 0
 1001 016d 48C78770 		movq	$.LC10, 368(%rdi)
 1001      01000000 
 1001      000000
 552:fltk-1.3.4-1/png/pngrutil.c ****    }
 1002              		.loc 1 552 0
 1003 0178 B8FEFFFF 		movl	$-2, %eax
 1003      FF
 1004 017d EBA3     		jmp	.L89
 1005              	.LVL138:
 1006              	.L105:
 554:fltk-1.3.4-1/png/pngrutil.c **** 
 1007              		.loc 1 554 0
 1008 017f E8000000 		call	__stack_chk_fail
 1008      00
 1009              	.LVL139:
 1010              		.cfi_endproc
 1011              	.LFE115:
 1013              		.section	.text.unlikely.png_inflate.constprop.6
 1014              	.LCOLDE11:
 1015              		.section	.text.png_inflate.constprop.6
 1016              	.LHOTE11:
 1017              		.section	.rodata.str1.1
 1018              	.LC12:
 1019 0027 65787472 		.string	"extra compressed data"
 1019      6120636F 
 1019      6D707265 
 1019      73736564 
 1019      20646174 
 1020              		.section	.text.unlikely.png_decompress_chunk.constprop.5,"ax",@progbits
 1021              	.LCOLDB13:
 1022              		.section	.text.png_decompress_chunk.constprop.5,"ax",@progbits
 1023              	.LHOTB13:
 1024              		.p2align 4,,15
 1026              	png_decompress_chunk.constprop.5:
 1027              	.LFB116:
 564:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32 chunklength, png_uint_32 prefix_size,
 1028              		.loc 1 564 0
 1029              		.cfi_startproc
 1030              	.LVL140:
 1031 0000 4157     		pushq	%r15
 1032              		.cfi_def_cfa_offset 16
 1033              		.cfi_offset 15, -16
 1034 0002 4156     		pushq	%r14
 1035              		.cfi_def_cfa_offset 24
 1036              		.cfi_offset 14, -24
 1037 0004 4989FE   		movq	%rdi, %r14
 1038 0007 4155     		pushq	%r13
 1039              		.cfi_def_cfa_offset 32
 1040              		.cfi_offset 13, -32
 1041 0009 4154     		pushq	%r12
 1042              		.cfi_def_cfa_offset 40
 1043              		.cfi_offset 12, -40
 1044 000b 4989CC   		movq	%rcx, %r12
 1045 000e 55       		pushq	%rbp
 1046              		.cfi_def_cfa_offset 48
 1047              		.cfi_offset 6, -48
 1048 000f 53       		pushq	%rbx
 1049              		.cfi_def_cfa_offset 56
 1050              		.cfi_offset 3, -56
 1051 0010 89D3     		movl	%edx, %ebx
 1052 0012 89F5     		movl	%esi, %ebp
 1053 0014 4883EC38 		subq	$56, %rsp
 1054              		.cfi_def_cfa_offset 112
 564:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32 chunklength, png_uint_32 prefix_size,
 1055              		.loc 1 564 0
 1056 0018 64488B04 		movq	%fs:40, %rax
 1056      25280000 
 1056      00
 1057 0021 48894424 		movq	%rax, 40(%rsp)
 1057      28
 1058 0026 31C0     		xorl	%eax, %eax
 1059              	.LVL141:
 579:fltk-1.3.4-1/png/pngrutil.c ****        png_ptr->user_chunk_malloc_max < limit)
 1060              		.loc 1 579 0
 1061 0028 488B8768 		movq	1128(%rdi), %rax
 1061      040000
 1062 002f 488D50FF 		leaq	-1(%rax), %rdx
 1063              	.LVL142:
 1064 0033 4883FAFD 		cmpq	$-3, %rdx
 587:fltk-1.3.4-1/png/pngrutil.c ****    {
 1065              		.loc 1 587 0
 1066 0037 8D5301   		leal	1(%rbx), %edx
 579:fltk-1.3.4-1/png/pngrutil.c ****        png_ptr->user_chunk_malloc_max < limit)
 1067              		.loc 1 579 0
 1068 003a 775C     		ja	.L107
 1069              	.LVL143:
 587:fltk-1.3.4-1/png/pngrutil.c ****    {
 1070              		.loc 1 587 0
 1071 003c 4839D0   		cmpq	%rdx, %rax
 1072 003f 0F82C300 		jb	.L108
 1072      0000
 1073              	.LBB103:
 591:fltk-1.3.4-1/png/pngrutil.c **** 
 1074              		.loc 1 591 0
 1075 0045 4829D0   		subq	%rdx, %rax
 1076              	.LVL144:
 593:fltk-1.3.4-1/png/pngrutil.c ****          *newlength = limit;
 1077              		.loc 1 593 0
 1078 0048 4883F8FF 		cmpq	$-1, %rax
 1079 004c 755A     		jne	.L133
 1080 004e 6690     		.p2align 4,,10
 1081              		.p2align 3
 1082              	.L109:
 597:fltk-1.3.4-1/png/pngrutil.c **** 
 1083              		.loc 1 597 0
 1084 0050 418BB618 		movl	536(%r14), %esi
 1084      020000
 1085              	.LVL145:
 1086 0057 4C89F7   		movq	%r14, %rdi
 1087              	.LVL146:
 1088 005a E8000000 		call	png_inflate_claim
 1088      00
 1089              	.LVL147:
 599:fltk-1.3.4-1/png/pngrutil.c ****       {
 1090              		.loc 1 599 0
 1091 005f 85C0     		testl	%eax, %eax
 1092 0061 744D     		je	.L134
 709:fltk-1.3.4-1/png/pngrutil.c **** 
 1093              		.loc 1 709 0
 1094 0063 83F801   		cmpl	$1, %eax
 1095 0066 BAF9FFFF 		movl	$-7, %edx
 1095      FF
 1096 006b 0F44C2   		cmove	%edx, %eax
 1097              	.LVL148:
 1098              	.L119:
 1099              	.LBE103:
 720:fltk-1.3.4-1/png/pngrutil.c **** #endif /* READ_COMPRESSED_TEXT */
 1100              		.loc 1 720 0
 1101 006e 488B4C24 		movq	40(%rsp), %rcx
 1101      28
 1102 0073 6448330C 		xorq	%fs:40, %rcx
 1102      25280000 
 1102      00
 1103 007c 0F85BD01 		jne	.L135
 1103      0000
 1104 0082 4883C438 		addq	$56, %rsp
 1105              		.cfi_remember_state
 1106              		.cfi_def_cfa_offset 56
 1107 0086 5B       		popq	%rbx
 1108              		.cfi_def_cfa_offset 48
 1109              	.LVL149:
 1110 0087 5D       		popq	%rbp
 1111              		.cfi_def_cfa_offset 40
 1112 0088 415C     		popq	%r12
 1113              		.cfi_def_cfa_offset 32
 1114              	.LVL150:
 1115 008a 415D     		popq	%r13
 1116              		.cfi_def_cfa_offset 24
 1117 008c 415E     		popq	%r14
 1118              		.cfi_def_cfa_offset 16
 1119              	.LVL151:
 1120 008e 415F     		popq	%r15
 1121              		.cfi_def_cfa_offset 8
 1122 0090 C3       		ret
 1123              	.LVL152:
 1124              		.p2align 4,,10
 1125 0091 0F1F8000 		.p2align 3
 1125      000000
 1126              	.L107:
 1127              		.cfi_restore_state
 587:fltk-1.3.4-1/png/pngrutil.c ****    {
 1128              		.loc 1 587 0
 1129 0098 48C7C0FF 		movq	$-1, %rax
 1129      FFFFFF
 1130              	.LVL153:
 1131              	.LBB114:
 591:fltk-1.3.4-1/png/pngrutil.c **** 
 1132              		.loc 1 591 0
 1133 009f 4829D0   		subq	%rdx, %rax
 1134              	.LVL154:
 593:fltk-1.3.4-1/png/pngrutil.c ****          *newlength = limit;
 1135              		.loc 1 593 0
 1136 00a2 4883F8FF 		cmpq	$-1, %rax
 1137 00a6 74A8     		je	.L109
 1138              	.L133:
 594:fltk-1.3.4-1/png/pngrutil.c **** 
 1139              		.loc 1 594 0
 1140 00a8 49890424 		movq	%rax, (%r12)
 1141 00ac EBA2     		jmp	.L109
 1142              	.LVL155:
 1143 00ae 6690     		.p2align 4,,10
 1144              		.p2align 3
 1145              	.L134:
 1146              	.LBB104:
 603:fltk-1.3.4-1/png/pngrutil.c ****             /* input: */ png_ptr->read_buffer + prefix_size, &lzsize,
 1147              		.loc 1 603 0
 1148 00b0 4189DD   		movl	%ebx, %r13d
 1149 00b3 418BB618 		movl	536(%r14), %esi
 1149      020000
 1150 00ba 488D4C24 		leaq	36(%rsp), %rcx
 1150      24
 1151 00bf 4C89EA   		movq	%r13, %rdx
 1152 00c2 49039698 		addq	1176(%r14), %rdx
 1152      040000
 601:fltk-1.3.4-1/png/pngrutil.c **** 
 1153              		.loc 1 601 0
 1154 00c9 29DD     		subl	%ebx, %ebp
 1155              	.LVL156:
 603:fltk-1.3.4-1/png/pngrutil.c ****             /* input: */ png_ptr->read_buffer + prefix_size, &lzsize,
 1156              		.loc 1 603 0
 1157 00cb 4531C0   		xorl	%r8d, %r8d
 1158 00ce 4D89E1   		movq	%r12, %r9
 1159 00d1 4C89F7   		movq	%r14, %rdi
 601:fltk-1.3.4-1/png/pngrutil.c **** 
 1160              		.loc 1 601 0
 1161 00d4 896C2424 		movl	%ebp, 36(%rsp)
 603:fltk-1.3.4-1/png/pngrutil.c ****             /* input: */ png_ptr->read_buffer + prefix_size, &lzsize,
 1162              		.loc 1 603 0
 1163 00d8 E8000000 		call	png_inflate.constprop.6
 1163      00
 1164              	.LVL157:
 607:fltk-1.3.4-1/png/pngrutil.c ****          {
 1165              		.loc 1 607 0
 1166 00dd 83F801   		cmpl	$1, %eax
 603:fltk-1.3.4-1/png/pngrutil.c ****             /* input: */ png_ptr->read_buffer + prefix_size, &lzsize,
 1167              		.loc 1 603 0
 1168 00e0 4189C7   		movl	%eax, %r15d
 1169              	.LVL158:
 607:fltk-1.3.4-1/png/pngrutil.c ****          {
 1170              		.loc 1 607 0
 1171 00e3 743B     		je	.L136
 702:fltk-1.3.4-1/png/pngrutil.c **** 
 1172              		.loc 1 702 0
 1173 00e5 85C0     		testl	%eax, %eax
 1174 00e7 B8F9FFFF 		movl	$-7, %eax
 1174      FF
 1175              	.LVL159:
 1176 00ec 440F44F8 		cmove	%eax, %r15d
 1177              	.LVL160:
 1178              	.L118:
 705:fltk-1.3.4-1/png/pngrutil.c ****       }
 1179              		.loc 1 705 0
 1180 00f0 41C78638 		movl	$0, 312(%r14)
 1180      01000000 
 1180      000000
 1181 00fb 4489F8   		movl	%r15d, %eax
 1182 00fe E96BFFFF 		jmp	.L119
 1182      FF
 1183              	.LVL161:
 1184              		.p2align 4,,10
 1185 0103 0F1F4400 		.p2align 3
 1185      00
 1186              	.L108:
 1187              	.LBE104:
 1188              	.LBE114:
 717:fltk-1.3.4-1/png/pngrutil.c ****       return Z_MEM_ERROR;
 1189              		.loc 1 717 0
 1190 0108 BEFCFFFF 		movl	$-4, %esi
 1190      FF
 1191              	.LVL162:
 1192 010d E8000000 		call	png_zstream_error
 1192      00
 1193              	.LVL163:
 718:fltk-1.3.4-1/png/pngrutil.c ****    }
 1194              		.loc 1 718 0
 1195 0112 B8FCFFFF 		movl	$-4, %eax
 1195      FF
 1196 0117 E952FFFF 		jmp	.L119
 1196      FF
 1197              	.LVL164:
 1198 011c 0F1F4000 		.p2align 4,,10
 1199              		.p2align 3
 1200              	.L136:
 1201              	.LBB115:
 1202              	.LBB112:
 616:fltk-1.3.4-1/png/pngrutil.c ****             {
 1203              		.loc 1 616 0
 1204 0120 498DBE40 		leaq	320(%r14), %rdi
 1204      010000
 1205 0127 E8000000 		call	inflateReset
 1205      00
 1206              	.LVL165:
 1207 012c 85C0     		testl	%eax, %eax
 1208 012e 0F857C00 		jne	.L112
 1208      0000
 1209              	.LBB105:
 623:fltk-1.3.4-1/png/pngrutil.c ****                png_alloc_size_t buffer_size = prefix_size + new_size +
 1210              		.loc 1 623 0
 1211 0134 498B0424 		movq	(%r12), %rax
 626:fltk-1.3.4-1/png/pngrutil.c ****                   buffer_size));
 1212              		.loc 1 626 0
 1213 0138 4C89F7   		movq	%r14, %rdi
 623:fltk-1.3.4-1/png/pngrutil.c ****                png_alloc_size_t buffer_size = prefix_size + new_size +
 1214              		.loc 1 623 0
 1215 013b 48894424 		movq	%rax, 16(%rsp)
 1215      10
 1216              	.LVL166:
 624:fltk-1.3.4-1/png/pngrutil.c ****                   (terminate != 0);
 1217              		.loc 1 624 0
 1218 0140 4C01E8   		addq	%r13, %rax
 1219              	.LVL167:
 1220 0143 48894424 		movq	%rax, 24(%rsp)
 1220      18
 1221 0148 4883C001 		addq	$1, %rax
 626:fltk-1.3.4-1/png/pngrutil.c ****                   buffer_size));
 1222              		.loc 1 626 0
 1223 014c 4889C6   		movq	%rax, %rsi
 624:fltk-1.3.4-1/png/pngrutil.c ****                   (terminate != 0);
 1224              		.loc 1 624 0
 1225 014f 48894424 		movq	%rax, 8(%rsp)
 1225      08
 1226              	.LVL168:
 626:fltk-1.3.4-1/png/pngrutil.c ****                   buffer_size));
 1227              		.loc 1 626 0
 1228 0154 E8000000 		call	png_malloc_base
 1228      00
 1229              	.LVL169:
 629:fltk-1.3.4-1/png/pngrutil.c ****                {
 1230              		.loc 1 629 0
 1231 0159 4885C0   		testq	%rax, %rax
 1232 015c 747D     		je	.L113
 631:fltk-1.3.4-1/png/pngrutil.c ****                      png_ptr->read_buffer + prefix_size, &lzsize,
 1233              		.loc 1 631 0
 1234 015e 4C89EA   		movq	%r13, %rdx
 1235 0161 49039698 		addq	1176(%r14), %rdx
 1235      040000
 1236 0168 418BB618 		movl	536(%r14), %esi
 1236      020000
 1237 016f 4E8D0428 		leaq	(%rax,%r13), %r8
 1238 0173 488D4C24 		leaq	36(%rsp), %rcx
 1238      24
 1239 0178 4D89E1   		movq	%r12, %r9
 1240 017b 4C89F7   		movq	%r14, %rdi
 1241 017e 48890424 		movq	%rax, (%rsp)
 1242 0182 E8000000 		call	png_inflate.constprop.6
 1242      00
 1243              	.LVL170:
 635:fltk-1.3.4-1/png/pngrutil.c ****                   {
 1244              		.loc 1 635 0
 1245 0187 83F801   		cmpl	$1, %eax
 631:fltk-1.3.4-1/png/pngrutil.c ****                      png_ptr->read_buffer + prefix_size, &lzsize,
 1246              		.loc 1 631 0
 1247 018a 4189C7   		movl	%eax, %r15d
 1248              	.LVL171:
 635:fltk-1.3.4-1/png/pngrutil.c ****                   {
 1249              		.loc 1 635 0
 1250 018d 4C8B1C24 		movq	(%rsp), %r11
 1251 0191 7435     		je	.L137
 662:fltk-1.3.4-1/png/pngrutil.c ****                      }
 1252              		.loc 1 662 0
 1253 0193 85C0     		testl	%eax, %eax
 1254 0195 B8F9FFFF 		movl	$-7, %eax
 1254      FF
 1255              	.LVL172:
 1256 019a 440F44F8 		cmove	%eax, %r15d
 1257              	.LVL173:
 1258              	.L115:
 672:fltk-1.3.4-1/png/pngrutil.c ****                   text = NULL;
 1259              		.loc 1 672 0
 1260 019e 4C89DE   		movq	%r11, %rsi
 1261 01a1 4C89F7   		movq	%r14, %rdi
 1262 01a4 E8000000 		call	png_free
 1262      00
 1263              	.LVL174:
 1264 01a9 E942FFFF 		jmp	.L118
 1264      FF
 1265              	.LVL175:
 1266 01ae 6690     		.p2align 4,,10
 1267              		.p2align 3
 1268              	.L112:
 1269              	.LBE105:
 694:fltk-1.3.4-1/png/pngrutil.c **** 
 1270              		.loc 1 694 0
 1271 01b0 BE010000 		movl	$1, %esi
 1271      00
 1272 01b5 4C89F7   		movq	%r14, %rdi
 697:fltk-1.3.4-1/png/pngrutil.c ****             }
 1273              		.loc 1 697 0
 1274 01b8 41BFF9FF 		movl	$-7, %r15d
 1274      FFFF
 1275              	.LVL176:
 694:fltk-1.3.4-1/png/pngrutil.c **** 
 1276              		.loc 1 694 0
 1277 01be E8000000 		call	png_zstream_error
 1277      00
 1278              	.LVL177:
 1279 01c3 E928FFFF 		jmp	.L118
 1279      FF
 1280              	.LVL178:
 1281              	.L137:
 1282              	.LBB110:
 637:fltk-1.3.4-1/png/pngrutil.c ****                      {
 1283              		.loc 1 637 0
 1284 01c8 488B4424 		movq	16(%rsp), %rax
 1284      10
 1285              	.LVL179:
 1286 01cd 493B0424 		cmpq	(%r12), %rax
 1287 01d1 7420     		je	.L138
 662:fltk-1.3.4-1/png/pngrutil.c ****                      }
 1288              		.loc 1 662 0
 1289 01d3 41BFF9FF 		movl	$-7, %r15d
 1289      FFFF
 1290              	.LVL180:
 1291 01d9 EBC3     		jmp	.L115
 1292              	.LVL181:
 1293              	.L113:
 687:fltk-1.3.4-1/png/pngrutil.c ****                }
 1294              		.loc 1 687 0
 1295 01db BEFCFFFF 		movl	$-4, %esi
 1295      FF
 1296 01e0 4C89F7   		movq	%r14, %rdi
 686:fltk-1.3.4-1/png/pngrutil.c ****                   png_zstream_error(png_ptr, Z_MEM_ERROR);
 1297              		.loc 1 686 0
 1298 01e3 41BFFCFF 		movl	$-4, %r15d
 1298      FFFF
 687:fltk-1.3.4-1/png/pngrutil.c ****                }
 1299              		.loc 1 687 0
 1300 01e9 E8000000 		call	png_zstream_error
 1300      00
 1301              	.LVL182:
 1302 01ee E9FDFEFF 		jmp	.L118
 1302      FF
 1303              	.LVL183:
 1304              	.L138:
 640:fltk-1.3.4-1/png/pngrutil.c **** 
 1305              		.loc 1 640 0
 1306 01f3 488B4424 		movq	24(%rsp), %rax
 1306      18
 642:fltk-1.3.4-1/png/pngrutil.c ****                            memcpy(text, png_ptr->read_buffer, prefix_size);
 1307              		.loc 1 642 0
 1308 01f8 85DB     		testl	%ebx, %ebx
 640:fltk-1.3.4-1/png/pngrutil.c **** 
 1309              		.loc 1 640 0
 1310 01fa 41C60403 		movb	$0, (%r11,%rax)
 1310      00
 642:fltk-1.3.4-1/png/pngrutil.c ****                            memcpy(text, png_ptr->read_buffer, prefix_size);
 1311              		.loc 1 642 0
 1312 01ff 7543     		jne	.L139
 1313              	.L116:
 1314              	.LBB106:
 649:fltk-1.3.4-1/png/pngrutil.c ****                            text = old_ptr; /* freed below */
 1315              		.loc 1 649 0
 1316 0201 488B4424 		movq	8(%rsp), %rax
 1316      08
 646:fltk-1.3.4-1/png/pngrutil.c **** 
 1317              		.loc 1 646 0
 1318 0206 498BB698 		movq	1176(%r14), %rsi
 1318      040000
 1319              	.LVL184:
 1320              	.LBE106:
 672:fltk-1.3.4-1/png/pngrutil.c ****                   text = NULL;
 1321              		.loc 1 672 0
 1322 020d 4C89F7   		movq	%r14, %rdi
 1323              	.LBB107:
 648:fltk-1.3.4-1/png/pngrutil.c ****                            png_ptr->read_buffer_size = buffer_size;
 1324              		.loc 1 648 0
 1325 0210 4D899E98 		movq	%r11, 1176(%r14)
 1325      040000
 649:fltk-1.3.4-1/png/pngrutil.c ****                            text = old_ptr; /* freed below */
 1326              		.loc 1 649 0
 1327 0217 498986A0 		movq	%rax, 1184(%r14)
 1327      040000
 1328              	.LVL185:
 1329              	.LBE107:
 672:fltk-1.3.4-1/png/pngrutil.c ****                   text = NULL;
 1330              		.loc 1 672 0
 1331 021e E8000000 		call	png_free
 1331      00
 1332              	.LVL186:
 678:fltk-1.3.4-1/png/pngrutil.c ****                      chunklength - prefix_size != lzsize)
 1333              		.loc 1 678 0
 1334 0223 3B6C2424 		cmpl	36(%rsp), %ebp
 1335 0227 0F84C3FE 		je	.L118
 1335      FFFF
 680:fltk-1.3.4-1/png/pngrutil.c ****                }
 1336              		.loc 1 680 0
 1337 022d BE000000 		movl	$.LC12, %esi
 1337      00
 1338 0232 4C89F7   		movq	%r14, %rdi
 1339 0235 E8000000 		call	png_chunk_benign_error
 1339      00
 1340              	.LVL187:
 1341 023a E9B1FEFF 		jmp	.L118
 1341      FF
 1342              	.LVL188:
 1343              	.L135:
 1344              	.LBE110:
 1345              	.LBE112:
 1346              	.LBE115:
 720:fltk-1.3.4-1/png/pngrutil.c **** #endif /* READ_COMPRESSED_TEXT */
 1347              		.loc 1 720 0
 1348 023f E8000000 		call	__stack_chk_fail
 1348      00
 1349              	.LVL189:
 1350              	.L139:
 1351              	.LBB116:
 1352              	.LBB113:
 1353              	.LBB111:
 1354              	.LBB108:
 1355              	.LBB109:
 1356              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string3.h"
   1:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* Copyright (C) 2004-2016 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string3.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string3.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string3.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string3.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string3.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string3.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string3.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string3.h ****    <http://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef _STRING_H
  19:/usr/include/x86_64-linux-gnu/bits/string3.h **** # error "Never use <bits/string3.h> directly; include <string.h> instead."
  20:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  21:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  22:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  23:/usr/include/x86_64-linux-gnu/bits/string3.h **** __warndecl (__warn_memset_zero_len,
  24:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  25:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  26:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  27:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef __cplusplus
  28:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* XXX This is temporarily.  We should not redefine any of the symbols
  29:/usr/include/x86_64-linux-gnu/bits/string3.h ****    and instead integrate the error checking into the original
  30:/usr/include/x86_64-linux-gnu/bits/string3.h ****    definitions.  */
  31:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memcpy
  32:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memmove
  33:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memset
  34:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcat
  35:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcpy
  36:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncat
  37:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncpy
  38:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_GNU
  39:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef mempcpy
  40:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef stpcpy
  41:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  42:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_MISC
  43:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bcopy
  44:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bzero
  45:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  46:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  47:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  48:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  49:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  50:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  51:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	       size_t __len))
  52:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  53:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
 1357              		.loc 2 53 0
 1358 0244 498BB698 		movq	1176(%r14), %rsi
 1358      040000
 1359 024b 4C89DF   		movq	%r11, %rdi
 1360 024e 4C89EA   		movq	%r13, %rdx
 1361 0251 E8000000 		call	memcpy
 1361      00
 1362              	.LVL190:
 1363 0256 4989C3   		movq	%rax, %r11
 1364 0259 EBA6     		jmp	.L116
 1365              	.LBE109:
 1366              	.LBE108:
 1367              	.LBE111:
 1368              	.LBE113:
 1369              	.LBE116:
 1370              		.cfi_endproc
 1371              	.LFE116:
 1373              		.section	.text.unlikely.png_decompress_chunk.constprop.5
 1374              	.LCOLDE13:
 1375              		.section	.text.png_decompress_chunk.constprop.5
 1376              	.LHOTE13:
 1377              		.section	.text.unlikely.png_get_fixed_point.constprop.7,"ax",@progbits
 1378              	.LCOLDB14:
 1379              		.section	.text.png_get_fixed_point.constprop.7,"ax",@progbits
 1380              	.LHOTB14:
 1381              		.p2align 4,,15
 1383              	png_get_fixed_point.constprop.7:
 1384              	.LFB114:
  41:fltk-1.3.4-1/png/pngrutil.c **** {
 1385              		.loc 1 41 0
 1386              		.cfi_startproc
 1387              	.LVL191:
  45:fltk-1.3.4-1/png/pngrutil.c ****       return (png_fixed_point)uval; /* known to be in range */
 1388              		.loc 1 45 0
 1389 0000 0FB607   		movzbl	(%rdi), %eax
 1390              	.LVL192:
 1391 0003 C1E018   		sall	$24, %eax
 1392              	.LVL193:
 1393 0006 89C2     		movl	%eax, %edx
 1394 0008 0FB64701 		movzbl	1(%rdi), %eax
 1395 000c C1E010   		sall	$16, %eax
 1396 000f 01D0     		addl	%edx, %eax
 1397 0011 0FB65703 		movzbl	3(%rdi), %edx
 1398 0015 01C2     		addl	%eax, %edx
 1399 0017 0FB64702 		movzbl	2(%rdi), %eax
 1400              	.LVL194:
 1401 001b C1E008   		sall	$8, %eax
 1402              	.LVL195:
 1403 001e 01D0     		addl	%edx, %eax
 1404 0020 BAFFFFFF 		movl	$-1, %edx
 1404      FF
 1405 0025 0F48C2   		cmovs	%edx, %eax
  53:fltk-1.3.4-1/png/pngrutil.c **** #endif
 1406              		.loc 1 53 0
 1407 0028 C3       		ret
 1408              		.cfi_endproc
 1409              	.LFE114:
 1411              		.section	.text.unlikely.png_get_fixed_point.constprop.7
 1412              	.LCOLDE14:
 1413              		.section	.text.png_get_fixed_point.constprop.7
 1414              	.LHOTE14:
 1415              		.section	.rodata.str1.8
 1416 0022 00000000 		.align 8
 1416      0000
 1417              	.LC15:
 1418 0028 504E4720 		.string	"PNG unsigned integer out of range"
 1418      756E7369 
 1418      676E6564 
 1418      20696E74 
 1418      65676572 
 1419              		.section	.text.unlikely.png_get_uint_31,"ax",@progbits
 1420              	.LCOLDB16:
 1421              		.section	.text.png_get_uint_31,"ax",@progbits
 1422              	.LHOTB16:
 1423              		.p2align 4,,15
 1424              		.globl	png_get_uint_31
 1426              	png_get_uint_31:
 1427              	.LFB56:
  23:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32 uval = png_get_uint_32(buf);
 1428              		.loc 1 23 0
 1429              		.cfi_startproc
 1430              	.LVL196:
  24:fltk-1.3.4-1/png/pngrutil.c **** 
 1431              		.loc 1 24 0
 1432 0000 0FB606   		movzbl	(%rsi), %eax
 1433 0003 C1E018   		sall	$24, %eax
 1434 0006 89C2     		movl	%eax, %edx
 1435 0008 0FB64601 		movzbl	1(%rsi), %eax
 1436 000c C1E010   		sall	$16, %eax
 1437 000f 01D0     		addl	%edx, %eax
 1438 0011 0FB65603 		movzbl	3(%rsi), %edx
 1439 0015 01C2     		addl	%eax, %edx
 1440 0017 0FB64602 		movzbl	2(%rsi), %eax
 1441 001b C1E008   		sall	$8, %eax
 1442              	.LVL197:
  26:fltk-1.3.4-1/png/pngrutil.c ****       png_error(png_ptr, "PNG unsigned integer out of range");
 1443              		.loc 1 26 0
 1444 001e 01D0     		addl	%edx, %eax
 1445              	.LVL198:
 1446 0020 7802     		js	.L147
  30:fltk-1.3.4-1/png/pngrutil.c **** 
 1447              		.loc 1 30 0
 1448 0022 F3C3     		rep ret
 1449              	.L147:
 1450              	.LVL199:
  23:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32 uval = png_get_uint_32(buf);
 1451              		.loc 1 23 0
 1452 0024 50       		pushq	%rax
 1453              		.cfi_def_cfa_offset 16
 1454              	.LVL200:
  27:fltk-1.3.4-1/png/pngrutil.c **** 
 1455              		.loc 1 27 0
 1456 0025 BE000000 		movl	$.LC15, %esi
 1456      00
 1457              	.LVL201:
 1458 002a E8000000 		call	png_error
 1458      00
 1459              	.LVL202:
 1460              		.cfi_endproc
 1461              	.LFE56:
 1463              		.section	.text.unlikely.png_get_uint_31
 1464              	.LCOLDE16:
 1465              		.section	.text.png_get_uint_31
 1466              	.LHOTE16:
 1467              		.section	.text.unlikely.png_get_uint_32,"ax",@progbits
 1468              	.LCOLDB17:
 1469              		.section	.text.png_get_uint_32,"ax",@progbits
 1470              	.LHOTB17:
 1471              		.p2align 4,,15
 1472              		.globl	png_get_uint_32
 1474              	png_get_uint_32:
 1475              	.LFB58:
  69:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32 uval =
 1476              		.loc 1 69 0
 1477              		.cfi_startproc
 1478              	.LVL203:
  76:fltk-1.3.4-1/png/pngrutil.c **** }
 1479              		.loc 1 76 0
 1480 0000 0FB607   		movzbl	(%rdi), %eax
 1481              	.LVL204:
 1482 0003 C1E018   		sall	$24, %eax
 1483              	.LVL205:
 1484 0006 89C2     		movl	%eax, %edx
 1485 0008 0FB64701 		movzbl	1(%rdi), %eax
 1486 000c C1E010   		sall	$16, %eax
 1487 000f 01D0     		addl	%edx, %eax
 1488 0011 0FB65703 		movzbl	3(%rdi), %edx
 1489 0015 01C2     		addl	%eax, %edx
 1490 0017 0FB64702 		movzbl	2(%rdi), %eax
 1491              	.LVL206:
 1492 001b C1E008   		sall	$8, %eax
 1493              	.LVL207:
 1494 001e 01D0     		addl	%edx, %eax
  77:fltk-1.3.4-1/png/pngrutil.c **** 
 1495              		.loc 1 77 0
 1496 0020 C3       		ret
 1497              		.cfi_endproc
 1498              	.LFE58:
 1500              		.section	.text.unlikely.png_get_uint_32
 1501              	.LCOLDE17:
 1502              		.section	.text.png_get_uint_32
 1503              	.LHOTE17:
 1504              		.section	.text.unlikely.png_get_int_32,"ax",@progbits
 1505              	.LCOLDB18:
 1506              		.section	.text.png_get_int_32,"ax",@progbits
 1507              	.LHOTB18:
 1508              		.p2align 4,,15
 1509              		.globl	png_get_int_32
 1511              	png_get_int_32:
 1512              	.LFB59:
  86:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32 uval = png_get_uint_32(buf);
 1513              		.loc 1 86 0
 1514              		.cfi_startproc
 1515              	.LVL208:
 1516 0000 0FB607   		movzbl	(%rdi), %eax
 1517              	.LVL209:
 1518 0003 C1E018   		sall	$24, %eax
 1519              	.LVL210:
 1520 0006 89C2     		movl	%eax, %edx
 1521 0008 0FB64701 		movzbl	1(%rdi), %eax
 1522 000c C1E010   		sall	$16, %eax
 1523 000f 01D0     		addl	%edx, %eax
 1524 0011 0FB65703 		movzbl	3(%rdi), %edx
 1525 0015 01C2     		addl	%eax, %edx
 1526 0017 0FB64702 		movzbl	2(%rdi), %eax
 1527              	.LVL211:
 1528 001b C1E008   		sall	$8, %eax
 1529              	.LVL212:
 1530 001e 01D0     		addl	%edx, %eax
  93:fltk-1.3.4-1/png/pngrutil.c **** 
 1531              		.loc 1 93 0
 1532 0020 C3       		ret
 1533              		.cfi_endproc
 1534              	.LFE59:
 1536              		.section	.text.unlikely.png_get_int_32
 1537              	.LCOLDE18:
 1538              		.section	.text.png_get_int_32
 1539              	.LHOTE18:
 1540              		.section	.text.unlikely.png_get_uint_16,"ax",@progbits
 1541              	.LCOLDB19:
 1542              		.section	.text.png_get_uint_16,"ax",@progbits
 1543              	.LHOTB19:
 1544              		.p2align 4,,15
 1545              		.globl	png_get_uint_16
 1547              	png_get_uint_16:
 1548              	.LFB60:
  98:fltk-1.3.4-1/png/pngrutil.c ****    /* ANSI-C requires an int value to accomodate at least 16 bits so this
 1549              		.loc 1 98 0
 1550              		.cfi_startproc
 1551              	.LVL213:
 108:fltk-1.3.4-1/png/pngrutil.c **** }
 1552              		.loc 1 108 0
 1553 0000 0FB607   		movzbl	(%rdi), %eax
 1554 0003 0FB65701 		movzbl	1(%rdi), %edx
 1555 0007 C1E008   		sall	$8, %eax
 1556 000a 01D0     		addl	%edx, %eax
 1557              	.LVL214:
 109:fltk-1.3.4-1/png/pngrutil.c **** 
 1558              		.loc 1 109 0
 1559 000c C3       		ret
 1560              		.cfi_endproc
 1561              	.LFE60:
 1563              		.section	.text.unlikely.png_get_uint_16
 1564              	.LCOLDE19:
 1565              		.section	.text.png_get_uint_16
 1566              	.LHOTE19:
 1567              		.section	.rodata.str1.1
 1568              	.LC20:
 1569 003d 4E6F7420 		.string	"Not a PNG file"
 1569      6120504E 
 1569      47206669 
 1569      6C6500
 1570              		.section	.rodata.str1.8
 1571 004a 00000000 		.align 8
 1571      0000
 1572              	.LC21:
 1573 0050 504E4720 		.string	"PNG file corrupted by ASCII conversion"
 1573      66696C65 
 1573      20636F72 
 1573      72757074 
 1573      65642062 
 1574              		.section	.text.unlikely.png_read_sig,"ax",@progbits
 1575              	.LCOLDB22:
 1576              		.section	.text.png_read_sig,"ax",@progbits
 1577              	.LHOTB22:
 1578              		.p2align 4,,15
 1579              		.globl	png_read_sig
 1581              	png_read_sig:
 1582              	.LFB61:
 116:fltk-1.3.4-1/png/pngrutil.c ****    png_size_t num_checked, num_to_check;
 1583              		.loc 1 116 0
 1584              		.cfi_startproc
 1585              	.LVL215:
 1586 0000 4156     		pushq	%r14
 1587              		.cfi_def_cfa_offset 16
 1588              		.cfi_offset 14, -16
 1589 0002 4155     		pushq	%r13
 1590              		.cfi_def_cfa_offset 24
 1591              		.cfi_offset 13, -24
 1592 0004 4154     		pushq	%r12
 1593              		.cfi_def_cfa_offset 32
 1594              		.cfi_offset 12, -32
 1595 0006 55       		pushq	%rbp
 1596              		.cfi_def_cfa_offset 40
 1597              		.cfi_offset 6, -40
 1598 0007 53       		pushq	%rbx
 1599              		.cfi_def_cfa_offset 48
 1600              		.cfi_offset 3, -48
 120:fltk-1.3.4-1/png/pngrutil.c ****       return;
 1601              		.loc 1 120 0
 1602 0008 0FB69F7D 		movzbl	637(%rdi), %ebx
 1602      020000
 1603 000f 80FB07   		cmpb	$7, %bl
 1604 0012 760C     		jbe	.L161
 1605              	.LVL216:
 1606              	.L151:
 144:fltk-1.3.4-1/png/pngrutil.c **** 
 1607              		.loc 1 144 0
 1608 0014 5B       		popq	%rbx
 1609              		.cfi_remember_state
 1610              		.cfi_def_cfa_offset 40
 1611 0015 5D       		popq	%rbp
 1612              		.cfi_def_cfa_offset 32
 1613 0016 415C     		popq	%r12
 1614              		.cfi_def_cfa_offset 24
 1615 0018 415D     		popq	%r13
 1616              		.cfi_def_cfa_offset 16
 1617 001a 415E     		popq	%r14
 1618              		.cfi_def_cfa_offset 8
 1619 001c C3       		ret
 1620              	.LVL217:
 1621 001d 0F1F00   		.p2align 4,,10
 1622              		.p2align 3
 1623              	.L161:
 1624              		.cfi_restore_state
 123:fltk-1.3.4-1/png/pngrutil.c ****    num_to_check = 8 - num_checked;
 1625              		.loc 1 123 0
 1626 0020 440FB6F3 		movzbl	%bl, %r14d
 1627              	.LVL218:
 124:fltk-1.3.4-1/png/pngrutil.c **** 
 1628              		.loc 1 124 0
 1629 0024 41BD0800 		movl	$8, %r13d
 1629      0000
 1630 002a 4889F5   		movq	%rsi, %rbp
 1631 002d 4D29F5   		subq	%r14, %r13
 1632              	.LVL219:
 131:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->sig_bytes = 8;
 1633              		.loc 1 131 0
 1634 0030 4A8D7436 		leaq	44(%rsi,%r14), %rsi
 1634      2C
 1635              	.LVL220:
 1636 0035 4989FC   		movq	%rdi, %r12
 127:fltk-1.3.4-1/png/pngrutil.c **** #endif
 1637              		.loc 1 127 0
 1638 0038 C787AC04 		movl	$17, 1196(%rdi)
 1638      00001100 
 1638      0000
 131:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->sig_bytes = 8;
 1639              		.loc 1 131 0
 1640 0042 4C89EA   		movq	%r13, %rdx
 134:fltk-1.3.4-1/png/pngrutil.c ****    {
 1641              		.loc 1 134 0
 1642 0045 4883C52C 		addq	$44, %rbp
 1643              	.LVL221:
 131:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->sig_bytes = 8;
 1644              		.loc 1 131 0
 1645 0049 E8000000 		call	png_read_data
 1645      00
 1646              	.LVL222:
 132:fltk-1.3.4-1/png/pngrutil.c **** 
 1647              		.loc 1 132 0
 1648 004e 41C68424 		movb	$8, 637(%r12)
 1648      7D020000 
 1648      08
 134:fltk-1.3.4-1/png/pngrutil.c ****    {
 1649              		.loc 1 134 0
 1650 0057 4C89EA   		movq	%r13, %rdx
 1651 005a 4C89F6   		movq	%r14, %rsi
 1652 005d 4889EF   		movq	%rbp, %rdi
 1653 0060 E8000000 		call	png_sig_cmp
 1653      00
 1654              	.LVL223:
 1655 0065 85C0     		testl	%eax, %eax
 1656 0067 742F     		je	.L154
 136:fltk-1.3.4-1/png/pngrutil.c ****           png_sig_cmp(info_ptr->signature, num_checked, num_to_check - 4))
 1657              		.loc 1 136 0
 1658 0069 80FB03   		cmpb	$3, %bl
 1659 006c 7717     		ja	.L155
 137:fltk-1.3.4-1/png/pngrutil.c ****          png_error(png_ptr, "Not a PNG file");
 1660              		.loc 1 137 0 discriminator 1
 1661 006e BA040000 		movl	$4, %edx
 1661      00
 1662 0073 4C89F6   		movq	%r14, %rsi
 1663 0076 4889EF   		movq	%rbp, %rdi
 1664 0079 4C29F2   		subq	%r14, %rdx
 1665 007c E8000000 		call	png_sig_cmp
 1665      00
 1666              	.LVL224:
 136:fltk-1.3.4-1/png/pngrutil.c ****           png_sig_cmp(info_ptr->signature, num_checked, num_to_check - 4))
 1667              		.loc 1 136 0 discriminator 1
 1668 0081 85C0     		testl	%eax, %eax
 1669 0083 753B     		jne	.L162
 1670              	.L155:
 140:fltk-1.3.4-1/png/pngrutil.c ****    }
 1671              		.loc 1 140 0
 1672 0085 BE000000 		movl	$.LC21, %esi
 1672      00
 1673 008a 4C89E7   		movq	%r12, %rdi
 1674 008d E8000000 		call	png_error
 1674      00
 1675              	.LVL225:
 1676              		.p2align 4,,10
 1677 0092 660F1F44 		.p2align 3
 1677      0000
 1678              	.L154:
 142:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->mode |= PNG_HAVE_PNG_SIGNATURE;
 1679              		.loc 1 142 0
 1680 0098 80FB02   		cmpb	$2, %bl
 1681 009b 0F8773FF 		ja	.L151
 1681      FFFF
 143:fltk-1.3.4-1/png/pngrutil.c **** }
 1682              		.loc 1 143 0
 1683 00a1 41818C24 		orl	$4096, 300(%r12)
 1683      2C010000 
 1683      00100000 
 144:fltk-1.3.4-1/png/pngrutil.c **** 
 1684              		.loc 1 144 0
 1685 00ad 5B       		popq	%rbx
 1686              		.cfi_remember_state
 1687              		.cfi_def_cfa_offset 40
 1688 00ae 5D       		popq	%rbp
 1689              		.cfi_def_cfa_offset 32
 1690              	.LVL226:
 1691 00af 415C     		popq	%r12
 1692              		.cfi_def_cfa_offset 24
 1693              	.LVL227:
 1694 00b1 415D     		popq	%r13
 1695              		.cfi_def_cfa_offset 16
 1696              	.LVL228:
 1697 00b3 415E     		popq	%r14
 1698              		.cfi_def_cfa_offset 8
 1699              	.LVL229:
 1700 00b5 C3       		ret
 1701              	.LVL230:
 1702 00b6 662E0F1F 		.p2align 4,,10
 1702      84000000 
 1702      0000
 1703              		.p2align 3
 1704              	.L162:
 1705              		.cfi_restore_state
 138:fltk-1.3.4-1/png/pngrutil.c ****       else
 1706              		.loc 1 138 0
 1707 00c0 BE000000 		movl	$.LC20, %esi
 1707      00
 1708 00c5 4C89E7   		movq	%r12, %rdi
 1709 00c8 E8000000 		call	png_error
 1709      00
 1710              	.LVL231:
 1711              		.cfi_endproc
 1712              	.LFE61:
 1714              		.section	.text.unlikely.png_read_sig
 1715              	.LCOLDE22:
 1716              		.section	.text.png_read_sig
 1717              	.LHOTE22:
 1718              		.section	.text.unlikely.png_crc_read,"ax",@progbits
 1719              	.LCOLDB23:
 1720              		.section	.text.png_crc_read,"ax",@progbits
 1721              	.LHOTB23:
 1722              		.p2align 4,,15
 1723              		.globl	png_crc_read
 1725              	png_crc_read:
 1726              	.LFB63:
 188:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr == NULL)
 1727              		.loc 1 188 0
 1728              		.cfi_startproc
 1729              	.LVL232:
 189:fltk-1.3.4-1/png/pngrutil.c ****       return;
 1730              		.loc 1 189 0
 1731 0000 4885FF   		testq	%rdi, %rdi
 1732 0003 742B     		je	.L166
 188:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr == NULL)
 1733              		.loc 1 188 0
 1734 0005 4154     		pushq	%r12
 1735              		.cfi_def_cfa_offset 16
 1736              		.cfi_offset 12, -16
 1737 0007 55       		pushq	%rbp
 1738              		.cfi_def_cfa_offset 24
 1739              		.cfi_offset 6, -24
 1740 0008 4989F4   		movq	%rsi, %r12
 1741 000b 53       		pushq	%rbx
 1742              		.cfi_def_cfa_offset 32
 1743              		.cfi_offset 3, -32
 192:fltk-1.3.4-1/png/pngrutil.c ****    png_calculate_crc(png_ptr, buf, length);
 1744              		.loc 1 192 0
 1745 000c 89D3     		movl	%edx, %ebx
 1746 000e 4889FD   		movq	%rdi, %rbp
 1747 0011 4889DA   		movq	%rbx, %rdx
 1748 0014 E8000000 		call	png_read_data
 1748      00
 1749              	.LVL233:
 193:fltk-1.3.4-1/png/pngrutil.c **** }
 1750              		.loc 1 193 0
 1751 0019 4889DA   		movq	%rbx, %rdx
 1752 001c 4C89E6   		movq	%r12, %rsi
 1753 001f 4889EF   		movq	%rbp, %rdi
 194:fltk-1.3.4-1/png/pngrutil.c **** 
 1754              		.loc 1 194 0
 1755 0022 5B       		popq	%rbx
 1756              		.cfi_restore 3
 1757              		.cfi_def_cfa_offset 24
 1758              	.LVL234:
 1759 0023 5D       		popq	%rbp
 1760              		.cfi_restore 6
 1761              		.cfi_def_cfa_offset 16
 1762              	.LVL235:
 1763 0024 415C     		popq	%r12
 1764              		.cfi_restore 12
 1765              		.cfi_def_cfa_offset 8
 1766              	.LVL236:
 193:fltk-1.3.4-1/png/pngrutil.c **** }
 1767              		.loc 1 193 0
 1768 0026 E9000000 		jmp	png_calculate_crc
 1768      00
 1769              	.LVL237:
 1770 002b 0F1F4400 		.p2align 4,,10
 1770      00
 1771              		.p2align 3
 1772              	.L166:
 1773 0030 F3C3     		rep ret
 1774              		.cfi_endproc
 1775              	.LFE63:
 1777              		.section	.text.unlikely.png_crc_read
 1778              	.LCOLDE23:
 1779              		.section	.text.png_crc_read
 1780              	.LHOTE23:
 1781              		.section	.text.unlikely.png_inflate_read.part.2.constprop.8,"ax",@progbits
 1782              	.LCOLDB24:
 1783              		.section	.text.png_inflate_read.part.2.constprop.8,"ax",@progbits
 1784              	.LHOTB24:
 1785              		.p2align 4,,15
 1787              	png_inflate_read.part.2.constprop.8:
 1788              	.LFB113:
 728:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32p chunk_bytes, png_bytep next_out, png_alloc_size_t *out_size,
 1789              		.loc 1 728 0
 1790              		.cfi_startproc
 1791              	.LVL238:
 1792 0000 4157     		pushq	%r15
 1793              		.cfi_def_cfa_offset 16
 1794              		.cfi_offset 15, -16
 1795 0002 4156     		pushq	%r14
 1796              		.cfi_def_cfa_offset 24
 1797              		.cfi_offset 14, -24
 1798 0004 41BF0004 		movl	$1024, %r15d
 1798      0000
 1799 000a 4155     		pushq	%r13
 1800              		.cfi_def_cfa_offset 32
 1801              		.cfi_offset 13, -32
 1802 000c 4154     		pushq	%r12
 1803              		.cfi_def_cfa_offset 40
 1804              		.cfi_offset 12, -40
 1805 000e 4989FD   		movq	%rdi, %r13
 1806 0011 55       		pushq	%rbp
 1807              		.cfi_def_cfa_offset 48
 1808              		.cfi_offset 6, -48
 1809 0012 53       		pushq	%rbx
 1810              		.cfi_def_cfa_offset 56
 1811              		.cfi_offset 3, -56
 1812 0013 488DAF40 		leaq	320(%rdi), %rbp
 1812      010000
 1813 001a 4989D4   		movq	%rdx, %r12
 1814 001d 4989CE   		movq	%rcx, %r14
 1815              	.LBB119:
 1816              	.LBB120:
 758:fltk-1.3.4-1/png/pngrutil.c ****                avail = (uInt)*out_size;
 1817              		.loc 1 758 0
 1818 0020 BBFEFFFF 		movl	$4294967294, %ebx
 1818      FF
 1819              	.LBE120:
 1820              	.LBE119:
 728:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32p chunk_bytes, png_bytep next_out, png_alloc_size_t *out_size,
 1821              		.loc 1 728 0
 1822 0025 4883EC18 		subq	$24, %rsp
 1823              		.cfi_def_cfa_offset 80
 728:fltk-1.3.4-1/png/pngrutil.c ****    png_uint_32p chunk_bytes, png_bytep next_out, png_alloc_size_t *out_size,
 1824              		.loc 1 728 0
 1825 0029 48893424 		movq	%rsi, (%rsp)
 1826 002d 44894424 		movl	%r8d, 12(%rsp)
 1826      0C
 1827              	.LVL239:
 1828              		.p2align 4,,10
 1829 0032 660F1F44 		.p2align 3
 1829      0000
 1830              	.L168:
 1831              	.LBB122:
 742:fltk-1.3.4-1/png/pngrutil.c ****          {
 1832              		.loc 1 742 0
 1833 0038 418B8D48 		movl	328(%r13), %ecx
 1833      010000
 1834 003f 85C9     		testl	%ecx, %ecx
 1835 0041 752D     		jne	.L169
 744:fltk-1.3.4-1/png/pngrutil.c ****                read_size = (uInt)*chunk_bytes;
 1836              		.loc 1 744 0
 1837 0043 418B0424 		movl	(%r12), %eax
 1838 0047 4139C7   		cmpl	%eax, %r15d
 1839 004a 440F47F8 		cmova	%eax, %r15d
 1840              	.LVL240:
 746:fltk-1.3.4-1/png/pngrutil.c **** 
 1841              		.loc 1 746 0
 1842 004e 4429F8   		subl	%r15d, %eax
 748:fltk-1.3.4-1/png/pngrutil.c ****                png_crc_read(png_ptr, read_buffer, read_size);
 1843              		.loc 1 748 0
 1844 0051 4585FF   		testl	%r15d, %r15d
 746:fltk-1.3.4-1/png/pngrutil.c **** 
 1845              		.loc 1 746 0
 1846 0054 41890424 		movl	%eax, (%r12)
 748:fltk-1.3.4-1/png/pngrutil.c ****                png_crc_read(png_ptr, read_buffer, read_size);
 1847              		.loc 1 748 0
 1848 0058 0F85B200 		jne	.L184
 1848      0000
 1849              	.L170:
 751:fltk-1.3.4-1/png/pngrutil.c ****             png_ptr->zstream.avail_in = read_size;
 1850              		.loc 1 751 0
 1851 005e 488B0424 		movq	(%rsp), %rax
 752:fltk-1.3.4-1/png/pngrutil.c ****          }
 1852              		.loc 1 752 0
 1853 0062 4589BD48 		movl	%r15d, 328(%r13)
 1853      010000
 751:fltk-1.3.4-1/png/pngrutil.c ****             png_ptr->zstream.avail_in = read_size;
 1854              		.loc 1 751 0
 1855 0069 49898540 		movq	%rax, 320(%r13)
 1855      010000
 1856              	.L169:
 755:fltk-1.3.4-1/png/pngrutil.c ****          {
 1857              		.loc 1 755 0
 1858 0070 418B9560 		movl	352(%r13), %edx
 1858      010000
 1859 0077 85D2     		testl	%edx, %edx
 1860 0079 7524     		jne	.L171
 1861              	.LVL241:
 1862              	.LBB121:
 758:fltk-1.3.4-1/png/pngrutil.c ****                avail = (uInt)*out_size;
 1863              		.loc 1 758 0
 1864 007b 498B06   		movq	(%r14), %rax
 759:fltk-1.3.4-1/png/pngrutil.c ****             *out_size -= avail;
 1865              		.loc 1 759 0
 1866 007e BEFFFFFF 		movl	$4294967295, %esi
 1866      FF
 1867 0083 BAFFFFFF 		movl	$-1, %edx
 1867      FF
 1868 0088 4839D8   		cmpq	%rbx, %rax
 1869 008b 480F46F0 		cmovbe	%rax, %rsi
 1870 008f 0F46D0   		cmovbe	%eax, %edx
 1871              	.LVL242:
 760:fltk-1.3.4-1/png/pngrutil.c **** 
 1872              		.loc 1 760 0
 1873 0092 4829F0   		subq	%rsi, %rax
 1874 0095 498906   		movq	%rax, (%r14)
 762:fltk-1.3.4-1/png/pngrutil.c ****          }
 1875              		.loc 1 762 0
 1876 0098 41899560 		movl	%edx, 352(%r13)
 1876      010000
 1877              	.LVL243:
 1878              	.L171:
 1879              	.LBE121:
 769:fltk-1.3.4-1/png/pngrutil.c ****             *chunk_bytes > 0 ? Z_NO_FLUSH : (finish ? Z_FINISH : Z_SYNC_FLUSH));
 1880              		.loc 1 769 0
 1881 009f 418B0424 		movl	(%r12), %eax
 1882 00a3 31F6     		xorl	%esi, %esi
 1883 00a5 85C0     		testl	%eax, %eax
 1884 00a7 750D     		jne	.L173
 770:fltk-1.3.4-1/png/pngrutil.c ****       }
 1885              		.loc 1 770 0
 1886 00a9 837C240C 		cmpl	$1, 12(%rsp)
 1886      01
 1887 00ae 19F6     		sbbl	%esi, %esi
 1888 00b0 83E6FE   		andl	$-2, %esi
 1889 00b3 83C604   		addl	$4, %esi
 1890              	.L173:
 769:fltk-1.3.4-1/png/pngrutil.c ****             *chunk_bytes > 0 ? Z_NO_FLUSH : (finish ? Z_FINISH : Z_SYNC_FLUSH));
 1891              		.loc 1 769 0
 1892 00b6 4889EF   		movq	%rbp, %rdi
 1893 00b9 E8000000 		call	inflate
 1893      00
 1894              	.LVL244:
 772:fltk-1.3.4-1/png/pngrutil.c **** 
 1895              		.loc 1 772 0
 1896 00be 85C0     		testl	%eax, %eax
 1897 00c0 498B16   		movq	(%r14), %rdx
 1898 00c3 7563     		jne	.L185
 1899 00c5 4885D2   		testq	%rdx, %rdx
 1900 00c8 0F856AFF 		jne	.L168
 1900      FFFF
 1901 00ce 418BB560 		movl	352(%r13), %esi
 1901      010000
 1902 00d5 85F6     		testl	%esi, %esi
 1903 00d7 0F855BFF 		jne	.L168
 1903      FFFF
 1904              	.L175:
 774:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.avail_out = 0; /* Should not be required, but is safe */
 1905              		.loc 1 774 0
 1906 00dd 4801F2   		addq	%rsi, %rdx
 778:fltk-1.3.4-1/png/pngrutil.c ****       return ret;
 1907              		.loc 1 778 0
 1908 00e0 4C89EF   		movq	%r13, %rdi
 1909 00e3 89C6     		movl	%eax, %esi
 774:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.avail_out = 0; /* Should not be required, but is safe */
 1910              		.loc 1 774 0
 1911 00e5 498916   		movq	%rdx, (%r14)
 775:fltk-1.3.4-1/png/pngrutil.c **** 
 1912              		.loc 1 775 0
 1913 00e8 41C78560 		movl	$0, 352(%r13)
 1913      01000000 
 1913      000000
 778:fltk-1.3.4-1/png/pngrutil.c ****       return ret;
 1914              		.loc 1 778 0
 1915 00f3 890424   		movl	%eax, (%rsp)
 1916              	.LVL245:
 1917 00f6 E8000000 		call	png_zstream_error
 1917      00
 1918              	.LVL246:
 1919              	.LBE122:
 787:fltk-1.3.4-1/png/pngrutil.c **** #endif
 1920              		.loc 1 787 0
 1921 00fb 8B0424   		movl	(%rsp), %eax
 1922 00fe 4883C418 		addq	$24, %rsp
 1923              		.cfi_remember_state
 1924              		.cfi_def_cfa_offset 56
 1925              	.LVL247:
 1926 0102 5B       		popq	%rbx
 1927              		.cfi_def_cfa_offset 48
 1928 0103 5D       		popq	%rbp
 1929              		.cfi_def_cfa_offset 40
 1930 0104 415C     		popq	%r12
 1931              		.cfi_def_cfa_offset 32
 1932              	.LVL248:
 1933 0106 415D     		popq	%r13
 1934              		.cfi_def_cfa_offset 24
 1935              	.LVL249:
 1936 0108 415E     		popq	%r14
 1937              		.cfi_def_cfa_offset 16
 1938              	.LVL250:
 1939 010a 415F     		popq	%r15
 1940              		.cfi_def_cfa_offset 8
 1941              	.LVL251:
 1942 010c C3       		ret
 1943              	.LVL252:
 1944 010d 0F1F00   		.p2align 4,,10
 1945              		.p2align 3
 1946              	.L184:
 1947              		.cfi_restore_state
 1948              	.LBB123:
 749:fltk-1.3.4-1/png/pngrutil.c **** 
 1949              		.loc 1 749 0
 1950 0110 488B3424 		movq	(%rsp), %rsi
 1951 0114 4489FA   		movl	%r15d, %edx
 1952 0117 4C89EF   		movq	%r13, %rdi
 1953 011a E8000000 		call	png_crc_read
 1953      00
 1954              	.LVL253:
 1955 011f E93AFFFF 		jmp	.L170
 1955      FF
 1956              	.LVL254:
 1957              		.p2align 4,,10
 1958 0124 0F1F4000 		.p2align 3
 1959              	.L185:
 1960 0128 418BB560 		movl	352(%r13), %esi
 1960      010000
 1961 012f EBAC     		jmp	.L175
 1962              	.LBE123:
 1963              		.cfi_endproc
 1964              	.LFE113:
 1966              		.section	.text.unlikely.png_inflate_read.part.2.constprop.8
 1967              	.LCOLDE24:
 1968              		.section	.text.png_inflate_read.part.2.constprop.8
 1969              	.LHOTE24:
 1970              		.section	.text.unlikely.png_crc_error,"ax",@progbits
 1971              	.LCOLDB25:
 1972              		.section	.text.png_crc_error,"ax",@progbits
 1973              	.LHOTB25:
 1974              		.p2align 4,,15
 1975              		.globl	png_crc_error
 1977              	png_crc_error:
 1978              	.LFB65:
 243:fltk-1.3.4-1/png/pngrutil.c ****    png_byte crc_bytes[4];
 1979              		.loc 1 243 0
 1980              		.cfi_startproc
 1981              	.LVL255:
 1982 0000 53       		pushq	%rbx
 1983              		.cfi_def_cfa_offset 16
 1984              		.cfi_offset 3, -16
 1985 0001 4889FB   		movq	%rdi, %rbx
 1986 0004 4883EC10 		subq	$16, %rsp
 1987              		.cfi_def_cfa_offset 32
 243:fltk-1.3.4-1/png/pngrutil.c ****    png_byte crc_bytes[4];
 1988              		.loc 1 243 0
 1989 0008 64488B04 		movq	%fs:40, %rax
 1989      25280000 
 1989      00
 1990 0011 48894424 		movq	%rax, 8(%rsp)
 1990      08
 1991 0016 31C0     		xorl	%eax, %eax
 1992              	.LVL256:
 248:fltk-1.3.4-1/png/pngrutil.c ****    {
 1993              		.loc 1 248 0
 1994 0018 F6871B02 		testb	$32, 539(%rdi)
 1994      000020
 1995 001f 7477     		je	.L187
 250:fltk-1.3.4-1/png/pngrutil.c ****           (PNG_FLAG_CRC_ANCILLARY_USE | PNG_FLAG_CRC_ANCILLARY_NOWARN))
 1996              		.loc 1 250 0
 1997 0021 8B873001 		movl	304(%rdi), %eax
 1997      0000
 1998 0027 25000300 		andl	$768, %eax
 1998      00
 1999 002c 3D000300 		cmpl	$768, %eax
 1999      00
 2000 0031 746E     		je	.L188
 2001              	.L189:
 266:fltk-1.3.4-1/png/pngrutil.c **** 
 2002              		.loc 1 266 0
 2003 0033 BA040000 		movl	$4, %edx
 2003      00
 262:fltk-1.3.4-1/png/pngrutil.c **** #endif
 2004              		.loc 1 262 0
 2005 0038 C783AC04 		movl	$129, 1196(%rbx)
 2005      00008100 
 2005      0000
 266:fltk-1.3.4-1/png/pngrutil.c **** 
 2006              		.loc 1 266 0
 2007 0042 4889E6   		movq	%rsp, %rsi
 2008 0045 4889DF   		movq	%rbx, %rdi
 2009              	.LVL257:
 2010 0048 E8000000 		call	png_read_data
 2010      00
 2011              	.LVL258:
 271:fltk-1.3.4-1/png/pngrutil.c ****    }
 2012              		.loc 1 271 0
 2013 004d 0FB60424 		movzbl	(%rsp), %eax
 2014              	.LVL259:
 2015 0051 C1E018   		sall	$24, %eax
 2016              	.LVL260:
 2017 0054 89C2     		movl	%eax, %edx
 2018 0056 0FB64424 		movzbl	1(%rsp), %eax
 2018      01
 2019 005b C1E010   		sall	$16, %eax
 2020 005e 01D0     		addl	%edx, %eax
 2021 0060 0FB65424 		movzbl	3(%rsp), %edx
 2021      03
 2022 0065 01C2     		addl	%eax, %edx
 2023 0067 0FB64424 		movzbl	2(%rsp), %eax
 2023      02
 2024              	.LVL261:
 2025 006c C1E008   		sall	$8, %eax
 2026              	.LVL262:
 2027 006f 01D0     		addl	%edx, %eax
 2028 0071 3B835C02 		cmpl	604(%rbx), %eax
 2028      0000
 2029 0077 0F95C0   		setne	%al
 2030 007a 0FB6C0   		movzbl	%al, %eax
 2031              	.LVL263:
 2032              	.L190:
 276:fltk-1.3.4-1/png/pngrutil.c **** 
 2033              		.loc 1 276 0
 2034 007d 488B4C24 		movq	8(%rsp), %rcx
 2034      08
 2035 0082 6448330C 		xorq	%fs:40, %rcx
 2035      25280000 
 2035      00
 2036 008b 7532     		jne	.L198
 2037 008d 4883C410 		addq	$16, %rsp
 2038              		.cfi_remember_state
 2039              		.cfi_def_cfa_offset 16
 2040 0091 5B       		popq	%rbx
 2041              		.cfi_def_cfa_offset 8
 2042              	.LVL264:
 2043 0092 C3       		ret
 2044              	.LVL265:
 2045              		.p2align 4,,10
 2046 0093 0F1F4400 		.p2align 3
 2046      00
 2047              	.L187:
 2048              		.cfi_restore_state
 257:fltk-1.3.4-1/png/pngrutil.c ****          need_crc = 0;
 2049              		.loc 1 257 0
 2050 0098 F6873101 		testb	$8, 305(%rdi)
 2050      000008
 2051 009f 7492     		je	.L189
 2052              	.L188:
 2053              	.LVL266:
 262:fltk-1.3.4-1/png/pngrutil.c **** #endif
 2054              		.loc 1 262 0
 2055 00a1 C783AC04 		movl	$129, 1196(%rbx)
 2055      00008100 
 2055      0000
 266:fltk-1.3.4-1/png/pngrutil.c **** 
 2056              		.loc 1 266 0
 2057 00ab BA040000 		movl	$4, %edx
 2057      00
 2058 00b0 4889E6   		movq	%rsp, %rsi
 2059 00b3 4889DF   		movq	%rbx, %rdi
 2060 00b6 E8000000 		call	png_read_data
 2060      00
 2061              	.LVL267:
 275:fltk-1.3.4-1/png/pngrutil.c **** }
 2062              		.loc 1 275 0
 2063 00bb 31C0     		xorl	%eax, %eax
 2064 00bd EBBE     		jmp	.L190
 2065              	.LVL268:
 2066              	.L198:
 276:fltk-1.3.4-1/png/pngrutil.c **** 
 2067              		.loc 1 276 0
 2068 00bf E8000000 		call	__stack_chk_fail
 2068      00
 2069              	.LVL269:
 2070              		.cfi_endproc
 2071              	.LFE65:
 2073              		.section	.text.unlikely.png_crc_error
 2074              	.LCOLDE25:
 2075              		.section	.text.png_crc_error
 2076              	.LHOTE25:
 2077              		.section	.rodata.str1.1
 2078              	.LC26:
 2079 004c 43524320 		.string	"CRC error"
 2079      6572726F 
 2079      7200
 2080              		.section	.text.unlikely.png_crc_finish,"ax",@progbits
 2081              	.LCOLDB27:
 2082              		.section	.text.png_crc_finish,"ax",@progbits
 2083              	.LHOTB27:
 2084              		.p2align 4,,15
 2085              		.globl	png_crc_finish
 2087              	png_crc_finish:
 2088              	.LFB64:
 203:fltk-1.3.4-1/png/pngrutil.c ****    /* The size of the local buffer for inflate is a good guess as to a
 2089              		.loc 1 203 0
 2090              		.cfi_startproc
 2091              	.LVL270:
 2092 0000 55       		pushq	%rbp
 2093              		.cfi_def_cfa_offset 16
 2094              		.cfi_offset 6, -16
 2095 0001 53       		pushq	%rbx
 2096              		.cfi_def_cfa_offset 24
 2097              		.cfi_offset 3, -24
 2098 0002 4889FD   		movq	%rdi, %rbp
 2099 0005 4881EC18 		subq	$1048, %rsp
 2099      040000
 2100              		.cfi_def_cfa_offset 1072
 203:fltk-1.3.4-1/png/pngrutil.c ****    /* The size of the local buffer for inflate is a good guess as to a
 2101              		.loc 1 203 0
 2102 000c 64488B04 		movq	%fs:40, %rax
 2102      25280000 
 2102      00
 2103 0015 48898424 		movq	%rax, 1032(%rsp)
 2103      08040000 
 2104 001d 31C0     		xorl	%eax, %eax
 207:fltk-1.3.4-1/png/pngrutil.c ****    {
 2105              		.loc 1 207 0
 2106 001f 85F6     		testl	%esi, %esi
 2107 0021 743C     		je	.L201
 2108 0023 89F3     		movl	%esi, %ebx
 2109              	.LVL271:
 2110              	.LBB128:
 213:fltk-1.3.4-1/png/pngrutil.c ****          len = skip;
 2111              		.loc 1 213 0
 2112 0025 81FBFF03 		cmpl	$1023, %ebx
 2112      0000
 2113 002b 7625     		jbe	.L202
 2114              	.LVL272:
 2115 002d 0F1F00   		.p2align 4,,10
 2116              		.p2align 3
 2117              	.L219:
 215:fltk-1.3.4-1/png/pngrutil.c **** 
 2118              		.loc 1 215 0
 2119 0030 81EB0004 		subl	$1024, %ebx
 2119      0000
 2120              	.LVL273:
 217:fltk-1.3.4-1/png/pngrutil.c ****    }
 2121              		.loc 1 217 0
 2122 0036 BA000400 		movl	$1024, %edx
 2122      00
 2123 003b 4889E6   		movq	%rsp, %rsi
 2124 003e 4889EF   		movq	%rbp, %rdi
 2125 0041 E8000000 		call	png_crc_read
 2125      00
 2126              	.LVL274:
 2127              	.LBE128:
 207:fltk-1.3.4-1/png/pngrutil.c ****    {
 2128              		.loc 1 207 0
 2129 0046 85DB     		testl	%ebx, %ebx
 2130 0048 7415     		je	.L201
 2131              	.LBB129:
 213:fltk-1.3.4-1/png/pngrutil.c ****          len = skip;
 2132              		.loc 1 213 0
 2133 004a 81FBFF03 		cmpl	$1023, %ebx
 2133      0000
 2134 0050 77DE     		ja	.L219
 2135              	.L202:
 2136              	.LVL275:
 217:fltk-1.3.4-1/png/pngrutil.c ****    }
 2137              		.loc 1 217 0
 2138 0052 89DA     		movl	%ebx, %edx
 2139 0054 4889E6   		movq	%rsp, %rsi
 2140 0057 4889EF   		movq	%rbp, %rdi
 2141 005a E8000000 		call	png_crc_read
 2141      00
 2142              	.LVL276:
 2143              	.L201:
 2144              	.LBE129:
 220:fltk-1.3.4-1/png/pngrutil.c ****    {
 2145              		.loc 1 220 0
 2146 005f 4889EF   		movq	%rbp, %rdi
 2147 0062 E8000000 		call	png_crc_error
 2147      00
 2148              	.LVL277:
 2149 0067 85C0     		testl	%eax, %eax
 2150 0069 742B     		je	.L205
 2151              	.LVL278:
 2152              	.LBB130:
 2153              	.LBB131:
 222:fltk-1.3.4-1/png/pngrutil.c ****           (png_ptr->flags & PNG_FLAG_CRC_ANCILLARY_NOWARN) == 0 :
 2154              		.loc 1 222 0
 2155 006b F6851B02 		testb	$32, 539(%rbp)
 2155      000020
 2156 0072 8B853001 		movl	304(%rbp), %eax
 2156      0000
 2157 0078 753E     		jne	.L220
 2158 007a C1E80A   		shrl	$10, %eax
 2159 007d 83E001   		andl	$1, %eax
 2160              	.L207:
 2161 0080 84C0     		testb	%al, %al
 226:fltk-1.3.4-1/png/pngrutil.c ****       }
 2162              		.loc 1 226 0
 2163 0082 BE000000 		movl	$.LC26, %esi
 2163      00
 2164 0087 4889EF   		movq	%rbp, %rdi
 222:fltk-1.3.4-1/png/pngrutil.c ****           (png_ptr->flags & PNG_FLAG_CRC_ANCILLARY_NOWARN) == 0 :
 2165              		.loc 1 222 0
 2166 008a 7437     		je	.L208
 2167              	.LVL279:
 226:fltk-1.3.4-1/png/pngrutil.c ****       }
 2168              		.loc 1 226 0
 2169 008c E8000000 		call	png_chunk_warning
 2169      00
 2170              	.LVL280:
 2171 0091 B8010000 		movl	$1, %eax
 2171      00
 2172              	.L205:
 2173              	.LBE131:
 2174              	.LBE130:
 236:fltk-1.3.4-1/png/pngrutil.c **** 
 2175              		.loc 1 236 0
 2176 0096 488B8C24 		movq	1032(%rsp), %rcx
 2176      08040000 
 2177 009e 6448330C 		xorq	%fs:40, %rcx
 2177      25280000 
 2177      00
 2178 00a7 751F     		jne	.L221
 2179 00a9 4881C418 		addq	$1048, %rsp
 2179      040000
 2180              		.cfi_remember_state
 2181              		.cfi_def_cfa_offset 24
 2182 00b0 5B       		popq	%rbx
 2183              		.cfi_def_cfa_offset 16
 2184 00b1 5D       		popq	%rbp
 2185              		.cfi_def_cfa_offset 8
 2186              	.LVL281:
 2187 00b2 C3       		ret
 2188              	.LVL282:
 2189              		.p2align 4,,10
 2190 00b3 0F1F4400 		.p2align 3
 2190      00
 2191              	.L220:
 2192              		.cfi_restore_state
 2193              	.LBB133:
 2194              	.LBB132:
 222:fltk-1.3.4-1/png/pngrutil.c ****           (png_ptr->flags & PNG_FLAG_CRC_ANCILLARY_NOWARN) == 0 :
 2195              		.loc 1 222 0
 2196 00b8 C1E809   		shrl	$9, %eax
 2197 00bb 83F001   		xorl	$1, %eax
 2198 00be 83E001   		andl	$1, %eax
 2199 00c1 EBBD     		jmp	.L207
 2200              	.LVL283:
 2201              	.L208:
 230:fltk-1.3.4-1/png/pngrutil.c **** 
 2202              		.loc 1 230 0
 2203 00c3 E8000000 		call	png_chunk_error
 2203      00
 2204              	.LVL284:
 2205              	.L221:
 2206              	.LBE132:
 2207              	.LBE133:
 236:fltk-1.3.4-1/png/pngrutil.c **** 
 2208              		.loc 1 236 0
 2209 00c8 E8000000 		call	__stack_chk_fail
 2209      00
 2210              	.LVL285:
 2211              		.cfi_endproc
 2212              	.LFE64:
 2214              		.section	.text.unlikely.png_crc_finish
 2215              	.LCOLDE27:
 2216              		.section	.text.png_crc_finish
 2217              	.LHOTE27:
 2218              		.section	.rodata.str1.8
 2219 0077 00       		.align 8
 2220              	.LC28:
 2221 0078 756E6B6E 		.string	"unknown chunk exceeds memory limits"
 2221      6F776E20 
 2221      6368756E 
 2221      6B206578 
 2221      63656564 
 2222              		.section	.text.unlikely.png_cache_unknown_chunk,"ax",@progbits
 2223              	.LCOLDB29:
 2224              		.section	.text.png_cache_unknown_chunk,"ax",@progbits
 2225              	.LHOTB29:
 2226              		.p2align 4,,15
 2228              	png_cache_unknown_chunk:
 2229              	.LFB91:
2707:fltk-1.3.4-1/png/pngrutil.c ****    png_alloc_size_t limit = PNG_SIZE_MAX;
 2230              		.loc 1 2707 0
 2231              		.cfi_startproc
 2232              	.LVL286:
 2233 0000 55       		pushq	%rbp
 2234              		.cfi_def_cfa_offset 16
 2235              		.cfi_offset 6, -16
 2236 0001 53       		pushq	%rbx
 2237              		.cfi_def_cfa_offset 24
 2238              		.cfi_offset 3, -24
 2239 0002 89F5     		movl	%esi, %ebp
 2240 0004 4889FB   		movq	%rdi, %rbx
 2241 0007 4883EC08 		subq	$8, %rsp
 2242              		.cfi_def_cfa_offset 32
2710:fltk-1.3.4-1/png/pngrutil.c ****    {
 2243              		.loc 1 2710 0
 2244 000b 488BB778 		movq	1144(%rdi), %rsi
 2244      040000
 2245              	.LVL287:
 2246 0012 4885F6   		testq	%rsi, %rsi
 2247 0015 7410     		je	.L223
2712:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->unknown_chunk.data = NULL;
 2248              		.loc 1 2712 0
 2249 0017 E8000000 		call	png_free
 2249      00
 2250              	.LVL288:
2713:fltk-1.3.4-1/png/pngrutil.c ****    }
 2251              		.loc 1 2713 0
 2252 001c 48C78378 		movq	$0, 1144(%rbx)
 2252      04000000 
 2252      000000
 2253              	.L223:
2717:fltk-1.3.4-1/png/pngrutil.c ****           png_ptr->user_chunk_malloc_max < limit)
 2254              		.loc 1 2717 0
 2255 0027 488B8368 		movq	1128(%rbx), %rax
 2255      040000
2726:fltk-1.3.4-1/png/pngrutil.c ****    {
 2256              		.loc 1 2726 0
 2257 002e 89EE     		movl	%ebp, %esi
2717:fltk-1.3.4-1/png/pngrutil.c ****           png_ptr->user_chunk_malloc_max < limit)
 2258              		.loc 1 2717 0
 2259 0030 488D50FF 		leaq	-1(%rax), %rdx
 2260 0034 4883FAFD 		cmpq	$-3, %rdx
 2261 0038 7736     		ja	.L224
 2262              	.LVL289:
2726:fltk-1.3.4-1/png/pngrutil.c ****    {
 2263              		.loc 1 2726 0
 2264 003a 4839F0   		cmpq	%rsi, %rax
 2265 003d 7331     		jnb	.L224
2745:fltk-1.3.4-1/png/pngrutil.c ****    {
 2266              		.loc 1 2745 0
 2267 003f 488BB378 		movq	1144(%rbx), %rsi
 2267      040000
 2268 0046 4885F6   		testq	%rsi, %rsi
 2269 0049 0F84A700 		je	.L247
 2269      0000
2755:fltk-1.3.4-1/png/pngrutil.c ****          png_crc_read(png_ptr, png_ptr->unknown_chunk.data, length);
 2270              		.loc 1 2755 0
 2271 004f 85ED     		testl	%ebp, %ebp
 2272 0051 0F859000 		jne	.L227
 2272      0000
 2273              	.LVL290:
 2274              	.L226:
2757:fltk-1.3.4-1/png/pngrutil.c ****       return 1;
 2275              		.loc 1 2757 0
 2276 0057 31F6     		xorl	%esi, %esi
 2277 0059 4889DF   		movq	%rbx, %rdi
 2278 005c E8000000 		call	png_crc_finish
 2278      00
 2279              	.LVL291:
2758:fltk-1.3.4-1/png/pngrutil.c ****    }
 2280              		.loc 1 2758 0
 2281 0061 B8010000 		movl	$1, %eax
 2281      00
 2282              	.L243:
2760:fltk-1.3.4-1/png/pngrutil.c **** #endif /* READ_UNKNOWN_CHUNKS */
 2283              		.loc 1 2760 0
 2284 0066 4883C408 		addq	$8, %rsp
 2285              		.cfi_remember_state
 2286              		.cfi_def_cfa_offset 24
 2287 006a 5B       		popq	%rbx
 2288              		.cfi_def_cfa_offset 16
 2289              	.LVL292:
 2290 006b 5D       		popq	%rbp
 2291              		.cfi_def_cfa_offset 8
 2292              	.LVL293:
 2293 006c C3       		ret
 2294              	.LVL294:
 2295 006d 0F1F00   		.p2align 4,,10
 2296              		.p2align 3
 2297              	.L224:
 2298              		.cfi_restore_state
2728:fltk-1.3.4-1/png/pngrutil.c ****       /* The following is safe because of the PNG_SIZE_MAX init above */
 2299              		.loc 1 2728 0
 2300 0070 8B831802 		movl	536(%rbx), %eax
 2300      0000
 2301 0076 C6837404 		movb	$0, 1140(%rbx)
 2301      000000
2730:fltk-1.3.4-1/png/pngrutil.c ****       /* 'mode' is a flag array, only the bottom four bits matter here */
 2302              		.loc 1 2730 0
 2303 007d 4889B380 		movq	%rsi, 1152(%rbx)
 2303      040000
2728:fltk-1.3.4-1/png/pngrutil.c ****       /* The following is safe because of the PNG_SIZE_MAX init above */
 2304              		.loc 1 2728 0
 2305 0084 89C2     		movl	%eax, %edx
 2306 0086 88837304 		movb	%al, 1139(%rbx)
 2306      0000
 2307 008c C1EA18   		shrl	$24, %edx
 2308 008f 88937004 		movb	%dl, 1136(%rbx)
 2308      0000
 2309 0095 89C2     		movl	%eax, %edx
 2310 0097 C1EA10   		shrl	$16, %edx
 2311 009a 88937104 		movb	%dl, 1137(%rbx)
 2311      0000
 2312 00a0 89C2     		movl	%eax, %edx
2732:fltk-1.3.4-1/png/pngrutil.c **** 
 2313              		.loc 1 2732 0
 2314 00a2 8B832C01 		movl	300(%rbx), %eax
 2314      0000
2728:fltk-1.3.4-1/png/pngrutil.c ****       /* The following is safe because of the PNG_SIZE_MAX init above */
 2315              		.loc 1 2728 0
 2316 00a8 C1EA08   		shrl	$8, %edx
2734:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->unknown_chunk.data = NULL;
 2317              		.loc 1 2734 0
 2318 00ab 85ED     		testl	%ebp, %ebp
2728:fltk-1.3.4-1/png/pngrutil.c ****       /* The following is safe because of the PNG_SIZE_MAX init above */
 2319              		.loc 1 2728 0
 2320 00ad 88937204 		movb	%dl, 1138(%rbx)
 2320      0000
2732:fltk-1.3.4-1/png/pngrutil.c **** 
 2321              		.loc 1 2732 0
 2322 00b3 88838804 		movb	%al, 1160(%rbx)
 2322      0000
2734:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->unknown_chunk.data = NULL;
 2323              		.loc 1 2734 0
 2324 00b9 7515     		jne	.L248
2735:fltk-1.3.4-1/png/pngrutil.c **** 
 2325              		.loc 1 2735 0
 2326 00bb 48C78378 		movq	$0, 1144(%rbx)
 2326      04000000 
 2326      000000
 2327 00c6 EB8F     		jmp	.L226
 2328 00c8 0F1F8400 		.p2align 4,,10
 2328      00000000 
 2329              		.p2align 3
 2330              	.L248:
2740:fltk-1.3.4-1/png/pngrutil.c ****             png_malloc_warn(png_ptr, length));
 2331              		.loc 1 2740 0
 2332 00d0 4889DF   		movq	%rbx, %rdi
 2333 00d3 E8000000 		call	png_malloc_warn
 2333      00
 2334              	.LVL295:
2745:fltk-1.3.4-1/png/pngrutil.c ****    {
 2335              		.loc 1 2745 0
 2336 00d8 4885C0   		testq	%rax, %rax
2740:fltk-1.3.4-1/png/pngrutil.c ****             png_malloc_warn(png_ptr, length));
 2337              		.loc 1 2740 0
 2338 00db 48898378 		movq	%rax, 1144(%rbx)
 2338      040000
2745:fltk-1.3.4-1/png/pngrutil.c ****    {
 2339              		.loc 1 2745 0
 2340 00e2 741A     		je	.L230
 2341 00e4 4889C6   		movq	%rax, %rsi
 2342              	.L227:
2756:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, 0);
 2343              		.loc 1 2756 0
 2344 00e7 89EA     		movl	%ebp, %edx
 2345 00e9 4889DF   		movq	%rbx, %rdi
 2346 00ec E8000000 		call	png_crc_read
 2346      00
 2347              	.LVL296:
 2348 00f1 E961FFFF 		jmp	.L226
 2348      FF
 2349              	.LVL297:
 2350              	.L247:
2745:fltk-1.3.4-1/png/pngrutil.c ****    {
 2351              		.loc 1 2745 0 discriminator 1
 2352 00f6 85ED     		testl	%ebp, %ebp
 2353 00f8 0F8459FF 		je	.L226
 2353      FFFF
 2354              	.LVL298:
 2355              	.L230:
2748:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "unknown chunk exceeds memory limits");
 2356              		.loc 1 2748 0
 2357 00fe 89EE     		movl	%ebp, %esi
 2358 0100 4889DF   		movq	%rbx, %rdi
 2359 0103 E8000000 		call	png_crc_finish
 2359      00
 2360              	.LVL299:
2749:fltk-1.3.4-1/png/pngrutil.c ****       return 0;
 2361              		.loc 1 2749 0
 2362 0108 BE000000 		movl	$.LC28, %esi
 2362      00
 2363 010d 4889DF   		movq	%rbx, %rdi
 2364 0110 E8000000 		call	png_chunk_benign_error
 2364      00
 2365              	.LVL300:
2750:fltk-1.3.4-1/png/pngrutil.c ****    }
 2366              		.loc 1 2750 0
 2367 0115 31C0     		xorl	%eax, %eax
 2368 0117 E94AFFFF 		jmp	.L243
 2368      FF
 2369              		.cfi_endproc
 2370              	.LFE91:
 2372              		.section	.text.unlikely.png_cache_unknown_chunk
 2373              	.LCOLDE29:
 2374              		.section	.text.png_cache_unknown_chunk
 2375              	.LHOTE29:
 2376              		.section	.rodata.str1.1
 2377              	.LC30:
 2378 0056 6F757420 		.string	"out of place"
 2378      6F662070 
 2378      6C616365 
 2378      00
 2379              	.LC31:
 2380 0063 696E7661 		.string	"invalid"
 2380      6C696400 
 2381              		.section	.text.unlikely.png_handle_IHDR,"ax",@progbits
 2382              	.LCOLDB32:
 2383              		.section	.text.png_handle_IHDR,"ax",@progbits
 2384              	.LHOTB32:
 2385              		.p2align 4,,15
 2386              		.globl	png_handle_IHDR
 2388              	png_handle_IHDR:
 2389              	.LFB71:
 794:fltk-1.3.4-1/png/pngrutil.c ****    png_byte buf[13];
 2390              		.loc 1 794 0
 2391              		.cfi_startproc
 2392              	.LVL301:
 2393 0000 4156     		pushq	%r14
 2394              		.cfi_def_cfa_offset 16
 2395              		.cfi_offset 14, -16
 2396 0002 4155     		pushq	%r13
 2397              		.cfi_def_cfa_offset 24
 2398              		.cfi_offset 13, -24
 2399 0004 4154     		pushq	%r12
 2400              		.cfi_def_cfa_offset 32
 2401              		.cfi_offset 12, -32
 2402 0006 55       		pushq	%rbp
 2403              		.cfi_def_cfa_offset 40
 2404              		.cfi_offset 6, -40
 2405 0007 53       		pushq	%rbx
 2406              		.cfi_def_cfa_offset 48
 2407              		.cfi_offset 3, -48
 2408 0008 4889FB   		movq	%rdi, %rbx
 2409 000b 4883EC20 		subq	$32, %rsp
 2410              		.cfi_def_cfa_offset 80
 794:fltk-1.3.4-1/png/pngrutil.c ****    png_byte buf[13];
 2411              		.loc 1 794 0
 2412 000f 64488B04 		movq	%fs:40, %rax
 2412      25280000 
 2412      00
 2413 0018 48894424 		movq	%rax, 24(%rsp)
 2413      18
 2414 001d 31C0     		xorl	%eax, %eax
 802:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "out of place");
 2415              		.loc 1 802 0
 2416 001f 8B872C01 		movl	300(%rdi), %eax
 2416      0000
 2417 0025 A801     		testb	$1, %al
 2418 0027 0F858B01 		jne	.L261
 2418      0000
 806:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "invalid");
 2419              		.loc 1 806 0
 2420 002d 83FA0D   		cmpl	$13, %edx
 2421 0030 0F857801 		jne	.L262
 2421      0000
 809:fltk-1.3.4-1/png/pngrutil.c **** 
 2422              		.loc 1 809 0
 2423 0036 83C801   		orl	$1, %eax
 811:fltk-1.3.4-1/png/pngrutil.c ****    png_crc_finish(png_ptr, 0);
 2424              		.loc 1 811 0
 2425 0039 BA0D0000 		movl	$13, %edx
 2425      00
 2426              	.LVL302:
 2427 003e 4889F5   		movq	%rsi, %rbp
 809:fltk-1.3.4-1/png/pngrutil.c **** 
 2428              		.loc 1 809 0
 2429 0041 89872C01 		movl	%eax, 300(%rdi)
 2429      0000
 811:fltk-1.3.4-1/png/pngrutil.c ****    png_crc_finish(png_ptr, 0);
 2430              		.loc 1 811 0
 2431 0047 4889E6   		movq	%rsp, %rsi
 2432              	.LVL303:
 2433 004a E8000000 		call	png_crc_read
 2433      00
 2434              	.LVL304:
 812:fltk-1.3.4-1/png/pngrutil.c **** 
 2435              		.loc 1 812 0
 2436 004f 31F6     		xorl	%esi, %esi
 2437 0051 4889DF   		movq	%rbx, %rdi
 2438 0054 E8000000 		call	png_crc_finish
 2438      00
 2439              	.LVL305:
 814:fltk-1.3.4-1/png/pngrutil.c ****    height = png_get_uint_31(png_ptr, buf + 4);
 2440              		.loc 1 814 0
 2441 0059 4889E6   		movq	%rsp, %rsi
 2442 005c 4889DF   		movq	%rbx, %rdi
 2443 005f E8000000 		call	png_get_uint_31
 2443      00
 2444              	.LVL306:
 815:fltk-1.3.4-1/png/pngrutil.c ****    bit_depth = buf[8];
 2445              		.loc 1 815 0
 2446 0064 488D7424 		leaq	4(%rsp), %rsi
 2446      04
 2447 0069 4889DF   		movq	%rbx, %rdi
 814:fltk-1.3.4-1/png/pngrutil.c ****    height = png_get_uint_31(png_ptr, buf + 4);
 2448              		.loc 1 814 0
 2449 006c 4189C4   		movl	%eax, %r12d
 2450              	.LVL307:
 815:fltk-1.3.4-1/png/pngrutil.c ****    bit_depth = buf[8];
 2451              		.loc 1 815 0
 2452 006f E8000000 		call	png_get_uint_31
 2452      00
 2453              	.LVL308:
 817:fltk-1.3.4-1/png/pngrutil.c ****    compression_type = buf[10];
 2454              		.loc 1 817 0
 2455 0074 440FB64C 		movzbl	9(%rsp), %r9d
 2455      2409
 816:fltk-1.3.4-1/png/pngrutil.c ****    color_type = buf[9];
 2456              		.loc 1 816 0
 2457 007a 440FB644 		movzbl	8(%rsp), %r8d
 2457      2408
 815:fltk-1.3.4-1/png/pngrutil.c ****    bit_depth = buf[8];
 2458              		.loc 1 815 0
 2459 0080 89C1     		movl	%eax, %ecx
 2460              	.LVL309:
 818:fltk-1.3.4-1/png/pngrutil.c ****    filter_type = buf[11];
 2461              		.loc 1 818 0
 2462 0082 0FB67C24 		movzbl	10(%rsp), %edi
 2462      0A
 819:fltk-1.3.4-1/png/pngrutil.c ****    interlace_type = buf[12];
 2463              		.loc 1 819 0
 2464 0087 440FB654 		movzbl	11(%rsp), %r10d
 2464      240B
 820:fltk-1.3.4-1/png/pngrutil.c **** 
 2465              		.loc 1 820 0
 2466 008d 0FB65424 		movzbl	12(%rsp), %edx
 2466      0C
 823:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->height = height;
 2467              		.loc 1 823 0
 2468 0092 4489A3F8 		movl	%r12d, 504(%rbx)
 2468      010000
 824:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->bit_depth = (png_byte)bit_depth;
 2469              		.loc 1 824 0
 2470 0099 898BFC01 		movl	%ecx, 508(%rbx)
 2470      0000
 834:fltk-1.3.4-1/png/pngrutil.c ****    {
 2471              		.loc 1 834 0
 2472 009f 4180F904 		cmpb	$4, %r9b
 816:fltk-1.3.4-1/png/pngrutil.c ****    color_type = buf[9];
 2473              		.loc 1 816 0
 2474 00a3 4489C0   		movl	%r8d, %eax
 2475              	.LVL310:
 825:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->interlaced = (png_byte)interlace_type;
 2476              		.loc 1 825 0
 2477 00a6 44888378 		movb	%r8b, 632(%rbx)
 2477      020000
 827:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_MNG_FEATURES_SUPPORTED
 2478              		.loc 1 827 0
 2479 00ad 44888B77 		movb	%r9b, 631(%rbx)
 2479      020000
 829:fltk-1.3.4-1/png/pngrutil.c **** #endif
 2480              		.loc 1 829 0
 2481 00b4 4488931C 		movb	%r10b, 1052(%rbx)
 2481      040000
 826:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->color_type = (png_byte)color_type;
 2482              		.loc 1 826 0
 2483 00bb 88937402 		movb	%dl, 628(%rbx)
 2483      0000
 831:fltk-1.3.4-1/png/pngrutil.c **** 
 2484              		.loc 1 831 0
 2485 00c1 4088BB58 		movb	%dil, 1112(%rbx)
 2485      040000
 834:fltk-1.3.4-1/png/pngrutil.c ****    {
 2486              		.loc 1 834 0
 2487 00c8 0F84B200 		je	.L253
 2487      0000
 2488 00ce 4180F906 		cmpb	$6, %r9b
 2489 00d2 747C     		je	.L254
 2490 00d4 4180F902 		cmpb	$2, %r9b
 2491 00d8 0F84BA00 		je	.L255
 2491      0000
 839:fltk-1.3.4-1/png/pngrutil.c ****          break;
 2492              		.loc 1 839 0
 2493 00de C6837B02 		movb	$1, 635(%rbx)
 2493      000001
 840:fltk-1.3.4-1/png/pngrutil.c **** 
 2494              		.loc 1 840 0
 2495 00e5 BE010000 		movl	$1, %esi
 2495      00
 2496              	.L256:
 856:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->rowbytes = PNG_ROWBYTES(png_ptr->pixel_depth, png_ptr->width);
 2497              		.loc 1 856 0
 2498 00ea 0FAFC6   		imull	%esi, %eax
 2499              	.LVL311:
 857:fltk-1.3.4-1/png/pngrutil.c ****    png_debug1(3, "bit_depth = %d", png_ptr->bit_depth);
 2500              		.loc 1 857 0
 2501 00ed 3C07     		cmpb	$7, %al
 856:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->rowbytes = PNG_ROWBYTES(png_ptr->pixel_depth, png_ptr->width);
 2502              		.loc 1 856 0
 2503 00ef 88837A02 		movb	%al, 634(%rbx)
 2503      0000
 857:fltk-1.3.4-1/png/pngrutil.c ****    png_debug1(3, "bit_depth = %d", png_ptr->bit_depth);
 2504              		.loc 1 857 0
 2505 00f5 7772     		ja	.L263
 2506              	.L257:
 857:fltk-1.3.4-1/png/pngrutil.c ****    png_debug1(3, "bit_depth = %d", png_ptr->bit_depth);
 2507              		.loc 1 857 0 is_stmt 0 discriminator 2
 2508 00f7 4589E3   		movl	%r12d, %r11d
 2509 00fa 0FB6F0   		movzbl	%al, %esi
 2510 00fd 4C89D8   		movq	%r11, %rax
 2511 0100 480FAFC6 		imulq	%rsi, %rax
 2512 0104 4883C007 		addq	$7, %rax
 2513 0108 48C1E803 		shrq	$3, %rax
 2514              	.L258:
 861:fltk-1.3.4-1/png/pngrutil.c ****        color_type, interlace_type, compression_type, filter_type);
 2515              		.loc 1 861 0 is_stmt 1 discriminator 4
 2516 010c 4883EC08 		subq	$8, %rsp
 2517              		.cfi_def_cfa_offset 88
 857:fltk-1.3.4-1/png/pngrutil.c ****    png_debug1(3, "bit_depth = %d", png_ptr->bit_depth);
 2518              		.loc 1 857 0 discriminator 4
 2519 0110 48898308 		movq	%rax, 520(%rbx)
 2519      020000
 861:fltk-1.3.4-1/png/pngrutil.c ****        color_type, interlace_type, compression_type, filter_type);
 2520              		.loc 1 861 0 discriminator 4
 2521 0117 4889EE   		movq	%rbp, %rsi
 2522 011a 4152     		pushq	%r10
 2523              		.cfi_def_cfa_offset 96
 2524 011c 57       		pushq	%rdi
 2525              		.cfi_def_cfa_offset 104
 2526 011d 4889DF   		movq	%rbx, %rdi
 2527              	.LVL312:
 2528 0120 52       		pushq	%rdx
 2529              		.cfi_def_cfa_offset 112
 2530              	.LVL313:
 2531 0121 4489E2   		movl	%r12d, %edx
 2532              	.LVL314:
 2533 0124 E8000000 		call	png_set_IHDR
 2533      00
 2534              	.LVL315:
 863:fltk-1.3.4-1/png/pngrutil.c **** 
 2535              		.loc 1 863 0 discriminator 4
 2536 0129 4883C420 		addq	$32, %rsp
 2537              		.cfi_def_cfa_offset 80
 2538 012d 488B4424 		movq	24(%rsp), %rax
 2538      18
 2539 0132 64483304 		xorq	%fs:40, %rax
 2539      25280000 
 2539      00
 2540 013b 756C     		jne	.L264
 863:fltk-1.3.4-1/png/pngrutil.c **** 
 2541              		.loc 1 863 0 is_stmt 0
 2542 013d 4883C420 		addq	$32, %rsp
 2543              		.cfi_remember_state
 2544              		.cfi_def_cfa_offset 48
 2545 0141 5B       		popq	%rbx
 2546              		.cfi_def_cfa_offset 40
 2547              	.LVL316:
 2548 0142 5D       		popq	%rbp
 2549              		.cfi_def_cfa_offset 32
 2550              	.LVL317:
 2551 0143 415C     		popq	%r12
 2552              		.cfi_def_cfa_offset 24
 2553              	.LVL318:
 2554 0145 415D     		popq	%r13
 2555              		.cfi_def_cfa_offset 16
 2556 0147 415E     		popq	%r14
 2557              		.cfi_def_cfa_offset 8
 2558 0149 C3       		ret
 2559              	.LVL319:
 2560 014a 660F1F44 		.p2align 4,,10
 2560      0000
 2561              		.p2align 3
 2562              	.L254:
 2563              		.cfi_restore_state
 852:fltk-1.3.4-1/png/pngrutil.c ****    }
 2564              		.loc 1 852 0 is_stmt 1
 2565 0150 BE040000 		movl	$4, %esi
 2565      00
 851:fltk-1.3.4-1/png/pngrutil.c ****          break;
 2566              		.loc 1 851 0
 2567 0155 C6837B02 		movb	$4, 635(%rbx)
 2567      000004
 856:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->rowbytes = PNG_ROWBYTES(png_ptr->pixel_depth, png_ptr->width);
 2568              		.loc 1 856 0
 2569 015c 0FAFC6   		imull	%esi, %eax
 2570              	.LVL320:
 857:fltk-1.3.4-1/png/pngrutil.c ****    png_debug1(3, "bit_depth = %d", png_ptr->bit_depth);
 2571              		.loc 1 857 0
 2572 015f 3C07     		cmpb	$7, %al
 856:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->rowbytes = PNG_ROWBYTES(png_ptr->pixel_depth, png_ptr->width);
 2573              		.loc 1 856 0
 2574 0161 88837A02 		movb	%al, 634(%rbx)
 2574      0000
 857:fltk-1.3.4-1/png/pngrutil.c ****    png_debug1(3, "bit_depth = %d", png_ptr->bit_depth);
 2575              		.loc 1 857 0
 2576 0167 768E     		jbe	.L257
 2577              	.L263:
 857:fltk-1.3.4-1/png/pngrutil.c ****    png_debug1(3, "bit_depth = %d", png_ptr->bit_depth);
 2578              		.loc 1 857 0 is_stmt 0 discriminator 1
 2579 0169 C0E803   		shrb	$3, %al
 2580 016c 4489E6   		movl	%r12d, %esi
 2581 016f 0FB6C0   		movzbl	%al, %eax
 2582 0172 480FAFC6 		imulq	%rsi, %rax
 2583 0176 EB94     		jmp	.L258
 2584              	.LVL321:
 2585 0178 0F1F8400 		.p2align 4,,10
 2585      00000000 
 2586              		.p2align 3
 2587              	.L253:
 847:fltk-1.3.4-1/png/pngrutil.c ****          break;
 2588              		.loc 1 847 0 is_stmt 1
 2589 0180 C6837B02 		movb	$2, 635(%rbx)
 2589      000002
 848:fltk-1.3.4-1/png/pngrutil.c **** 
 2590              		.loc 1 848 0
 2591 0187 BE020000 		movl	$2, %esi
 2591      00
 2592 018c E959FFFF 		jmp	.L256
 2592      FF
 2593              		.p2align 4,,10
 2594 0191 0F1F8000 		.p2align 3
 2594      000000
 2595              	.L255:
 843:fltk-1.3.4-1/png/pngrutil.c ****          break;
 2596              		.loc 1 843 0
 2597 0198 C6837B02 		movb	$3, 635(%rbx)
 2597      000003
 844:fltk-1.3.4-1/png/pngrutil.c **** 
 2598              		.loc 1 844 0
 2599 019f BE030000 		movl	$3, %esi
 2599      00
 2600 01a4 E941FFFF 		jmp	.L256
 2600      FF
 2601              	.LVL322:
 2602              	.L264:
 863:fltk-1.3.4-1/png/pngrutil.c **** 
 2603              		.loc 1 863 0
 2604 01a9 E8000000 		call	__stack_chk_fail
 2604      00
 2605              	.LVL323:
 2606              	.L262:
 807:fltk-1.3.4-1/png/pngrutil.c **** 
 2607              		.loc 1 807 0
 2608 01ae BE000000 		movl	$.LC31, %esi
 2608      00
 2609              	.LVL324:
 2610 01b3 E8000000 		call	png_chunk_error
 2610      00
 2611              	.LVL325:
 2612              	.L261:
 803:fltk-1.3.4-1/png/pngrutil.c **** 
 2613              		.loc 1 803 0
 2614 01b8 BE000000 		movl	$.LC30, %esi
 2614      00
 2615              	.LVL326:
 2616 01bd E8000000 		call	png_chunk_error
 2616      00
 2617              	.LVL327:
 2618              		.cfi_endproc
 2619              	.LFE71:
 2621              		.section	.text.unlikely.png_handle_IHDR
 2622              	.LCOLDE32:
 2623              		.section	.text.png_handle_IHDR
 2624              	.LHOTE32:
 2625              		.section	.rodata.str1.1
 2626              	.LC33:
 2627 006b 6D697373 		.string	"missing IHDR"
 2627      696E6720 
 2627      49484452 
 2627      00
 2628              	.LC34:
 2629 0078 6475706C 		.string	"duplicate"
 2629      69636174 
 2629      6500
 2630              	.LC35:
 2631 0082 69676E6F 		.string	"ignored in grayscale PNG"
 2631      72656420 
 2631      696E2067 
 2631      72617973 
 2631      63616C65 
 2632              	.LC36:
 2633 009b 68495354 		.string	"hIST must be after"
 2633      206D7573 
 2633      74206265 
 2633      20616674 
 2633      657200
 2634              	.LC37:
 2635 00ae 624B4744 		.string	"bKGD must be after"
 2635      206D7573 
 2635      74206265 
 2635      20616674 
 2635      657200
 2636              	.LC38:
 2637 00c1 74524E53 		.string	"tRNS must be after"
 2637      206D7573 
 2637      74206265 
 2637      20616674 
 2637      657200
 2638              		.section	.text.unlikely.png_handle_PLTE,"ax",@progbits
 2639              	.LCOLDB39:
 2640              		.section	.text.png_handle_PLTE,"ax",@progbits
 2641              	.LHOTB39:
 2642              		.p2align 4,,15
 2643              		.globl	png_handle_PLTE
 2645              	png_handle_PLTE:
 2646              	.LFB72:
 868:fltk-1.3.4-1/png/pngrutil.c ****    png_color palette[PNG_MAX_PALETTE_LENGTH];
 2647              		.loc 1 868 0
 2648              		.cfi_startproc
 2649              	.LVL328:
 2650 0000 4157     		pushq	%r15
 2651              		.cfi_def_cfa_offset 16
 2652              		.cfi_offset 15, -16
 2653 0002 4156     		pushq	%r14
 2654              		.cfi_def_cfa_offset 24
 2655              		.cfi_offset 14, -24
 2656 0004 4155     		pushq	%r13
 2657              		.cfi_def_cfa_offset 32
 2658              		.cfi_offset 13, -32
 2659 0006 4154     		pushq	%r12
 2660              		.cfi_def_cfa_offset 40
 2661              		.cfi_offset 12, -40
 2662 0008 55       		pushq	%rbp
 2663              		.cfi_def_cfa_offset 48
 2664              		.cfi_offset 6, -48
 2665 0009 53       		pushq	%rbx
 2666              		.cfi_def_cfa_offset 56
 2667              		.cfi_offset 3, -56
 2668 000a 4889FD   		movq	%rdi, %rbp
 2669 000d 4881EC18 		subq	$792, %rsp
 2669      030000
 2670              		.cfi_def_cfa_offset 848
 868:fltk-1.3.4-1/png/pngrutil.c ****    png_color palette[PNG_MAX_PALETTE_LENGTH];
 2671              		.loc 1 868 0
 2672 0014 64488B04 		movq	%fs:40, %rax
 2672      25280000 
 2672      00
 2673 001d 48898424 		movq	%rax, 776(%rsp)
 2673      08030000 
 2674 0025 31C0     		xorl	%eax, %eax
 877:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
 2675              		.loc 1 877 0
 2676 0027 8B872C01 		movl	300(%rdi), %eax
 2676      0000
 2677 002d A801     		testb	$1, %al
 2678 002f 0F84EC01 		je	.L303
 2678      0000
 885:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "duplicate");
 2679              		.loc 1 885 0
 2680 0035 A802     		testb	$2, %al
 2681 0037 0F85DA01 		jne	.L304
 2681      0000
 888:fltk-1.3.4-1/png/pngrutil.c ****    {
 2682              		.loc 1 888 0
 2683 003d A804     		testb	$4, %al
 2684 003f 4989F4   		movq	%rsi, %r12
 2685 0042 89D6     		movl	%edx, %esi
 2686              	.LVL329:
 2687 0044 0F857E00 		jne	.L305
 2687      0000
 898:fltk-1.3.4-1/png/pngrutil.c **** 
 2688              		.loc 1 898 0
 2689 004a 83C802   		orl	$2, %eax
 900:fltk-1.3.4-1/png/pngrutil.c ****    {
 2690              		.loc 1 900 0
 2691 004d F6877702 		testb	$2, 631(%rdi)
 2691      000002
 898:fltk-1.3.4-1/png/pngrutil.c **** 
 2692              		.loc 1 898 0
 2693 0054 89872C01 		movl	%eax, 300(%rdi)
 2693      0000
 900:fltk-1.3.4-1/png/pngrutil.c ****    {
 2694              		.loc 1 900 0
 2695 005a 0F848000 		je	.L306
 2695      0000
 915:fltk-1.3.4-1/png/pngrutil.c ****    {
 2696              		.loc 1 915 0
 2697 0060 81FA0003 		cmpl	$768, %edx
 2697      0000
 2698 0066 7712     		ja	.L271
 915:fltk-1.3.4-1/png/pngrutil.c ****    {
 2699              		.loc 1 915 0 is_stmt 0 discriminator 1
 2700 0068 89F0     		movl	%esi, %eax
 2701 006a BAABAAAA 		movl	$-1431655765, %edx
 2701      AA
 2702              	.LVL330:
 2703 006f F7E2     		mull	%edx
 2704              	.LVL331:
 2705 0071 D1EA     		shrl	%edx
 2706 0073 8D0452   		leal	(%rdx,%rdx,2), %eax
 2707 0076 39C6     		cmpl	%eax, %esi
 2708 0078 747E     		je	.L272
 2709              	.L271:
 917:fltk-1.3.4-1/png/pngrutil.c **** 
 2710              		.loc 1 917 0 is_stmt 1
 2711 007a 4889EF   		movq	%rbp, %rdi
 2712              	.LVL332:
 2713 007d E8000000 		call	png_crc_finish
 2713      00
 2714              	.LVL333:
 919:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_benign_error(png_ptr, "invalid");
 2715              		.loc 1 919 0
 2716 0082 80BD7702 		cmpb	$3, 631(%rbp)
 2716      000003
 920:fltk-1.3.4-1/png/pngrutil.c **** 
 2717              		.loc 1 920 0
 2718 0089 BE000000 		movl	$.LC31, %esi
 2718      00
 2719 008e 4889EF   		movq	%rbp, %rdi
 919:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_benign_error(png_ptr, "invalid");
 2720              		.loc 1 919 0
 2721 0091 0F849401 		je	.L307
 2721      0000
 2722              	.LVL334:
 2723              	.L299:
1036:fltk-1.3.4-1/png/pngrutil.c **** #endif
 2724              		.loc 1 1036 0
 2725 0097 E8000000 		call	png_chunk_benign_error
 2725      00
 2726              	.LVL335:
 2727              	.L265:
1038:fltk-1.3.4-1/png/pngrutil.c **** 
 2728              		.loc 1 1038 0
 2729 009c 488B8424 		movq	776(%rsp), %rax
 2729      08030000 
 2730 00a4 64483304 		xorq	%fs:40, %rax
 2730      25280000 
 2730      00
 2731 00ad 0F855F01 		jne	.L308
 2731      0000
 2732 00b3 4881C418 		addq	$792, %rsp
 2732      030000
 2733              		.cfi_remember_state
 2734              		.cfi_def_cfa_offset 56
 2735 00ba 5B       		popq	%rbx
 2736              		.cfi_def_cfa_offset 48
 2737 00bb 5D       		popq	%rbp
 2738              		.cfi_def_cfa_offset 40
 2739              	.LVL336:
 2740 00bc 415C     		popq	%r12
 2741              		.cfi_def_cfa_offset 32
 2742              	.LVL337:
 2743 00be 415D     		popq	%r13
 2744              		.cfi_def_cfa_offset 24
 2745 00c0 415E     		popq	%r14
 2746              		.cfi_def_cfa_offset 16
 2747 00c2 415F     		popq	%r15
 2748              		.cfi_def_cfa_offset 8
 2749 00c4 C3       		ret
 2750              	.LVL338:
 2751              		.p2align 4,,10
 2752 00c5 0F1F00   		.p2align 3
 2753              	.L305:
 2754              		.cfi_restore_state
 893:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
 2755              		.loc 1 893 0
 2756 00c8 E8000000 		call	png_crc_finish
 2756      00
 2757              	.LVL339:
 894:fltk-1.3.4-1/png/pngrutil.c ****       return;
 2758              		.loc 1 894 0
 2759 00cd BE000000 		movl	$.LC30, %esi
 2759      00
 2760 00d2 4889EF   		movq	%rbp, %rdi
 2761 00d5 E8000000 		call	png_chunk_benign_error
 2761      00
 2762              	.LVL340:
 895:fltk-1.3.4-1/png/pngrutil.c ****    }
 2763              		.loc 1 895 0
 2764 00da EBC0     		jmp	.L265
 2765              	.LVL341:
 2766 00dc 0F1F4000 		.p2align 4,,10
 2767              		.p2align 3
 2768              	.L306:
 902:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "ignored in grayscale PNG");
 2769              		.loc 1 902 0
 2770 00e0 E8000000 		call	png_crc_finish
 2770      00
 2771              	.LVL342:
 903:fltk-1.3.4-1/png/pngrutil.c ****       return;
 2772              		.loc 1 903 0
 2773 00e5 BE000000 		movl	$.LC35, %esi
 2773      00
 2774 00ea 4889EF   		movq	%rbp, %rdi
 2775 00ed E8000000 		call	png_chunk_benign_error
 2775      00
 2776              	.LVL343:
 904:fltk-1.3.4-1/png/pngrutil.c ****    }
 2777              		.loc 1 904 0
 2778 00f2 EBA8     		jmp	.L265
 2779              	.LVL344:
 2780              		.p2align 4,,10
 2781 00f4 0F1F4000 		.p2align 3
 2782              	.L272:
 929:fltk-1.3.4-1/png/pngrutil.c **** 
 2783              		.loc 1 929 0
 2784 00f8 89F0     		movl	%esi, %eax
 2785 00fa BA565555 		movl	$1431655766, %edx
 2785      55
 2786 00ff C1FE1F   		sarl	$31, %esi
 2787              	.LVL345:
 2788 0102 F7EA     		imull	%edx
 2789              	.LVL346:
 2790 0104 4989E7   		movq	%rsp, %r15
 932:fltk-1.3.4-1/png/pngrutil.c ****    {
 2791              		.loc 1 932 0
 2792 0107 29F2     		subl	%esi, %edx
 2793              	.LVL347:
 2794 0109 4189D6   		movl	%edx, %r14d
 2795 010c 7451     		je	.L278
 2796 010e 8D42FF   		leal	-1(%rdx), %eax
 932:fltk-1.3.4-1/png/pngrutil.c ****    {
 2797              		.loc 1 932 0 is_stmt 0 discriminator 3
 2798 0111 4889E3   		movq	%rsp, %rbx
 2799 0114 4C8D6C40 		leaq	3(%rax,%rax,2), %r13
 2799      03
 2800 0119 4901E5   		addq	%rsp, %r13
 2801              	.LVL348:
 2802 011c 0F1F4000 		.p2align 4,,10
 2803              		.p2align 3
 2804              	.L277:
 2805              	.LBB134:
 936:fltk-1.3.4-1/png/pngrutil.c ****       pal_ptr->red = buf[0];
 2806              		.loc 1 936 0 is_stmt 1 discriminator 3
 2807 0120 488DB424 		leaq	768(%rsp), %rsi
 2807      00030000 
 2808 0128 BA030000 		movl	$3, %edx
 2808      00
 2809 012d 4889EF   		movq	%rbp, %rdi
 2810              	.LBE134:
 932:fltk-1.3.4-1/png/pngrutil.c ****    {
 2811              		.loc 1 932 0 discriminator 3
 2812 0130 4883C303 		addq	$3, %rbx
 2813              	.LVL349:
 2814              	.LBB135:
 936:fltk-1.3.4-1/png/pngrutil.c ****       pal_ptr->red = buf[0];
 2815              		.loc 1 936 0 discriminator 3
 2816 0134 E8000000 		call	png_crc_read
 2816      00
 2817              	.LVL350:
 937:fltk-1.3.4-1/png/pngrutil.c ****       pal_ptr->green = buf[1];
 2818              		.loc 1 937 0 discriminator 3
 2819 0139 0FB68424 		movzbl	768(%rsp), %eax
 2819      00030000 
 2820 0141 8843FD   		movb	%al, -3(%rbx)
 938:fltk-1.3.4-1/png/pngrutil.c ****       pal_ptr->blue = buf[2];
 2821              		.loc 1 938 0 discriminator 3
 2822 0144 0FB68424 		movzbl	769(%rsp), %eax
 2822      01030000 
 2823 014c 8843FE   		movb	%al, -2(%rbx)
 939:fltk-1.3.4-1/png/pngrutil.c ****    }
 2824              		.loc 1 939 0 discriminator 3
 2825 014f 0FB68424 		movzbl	770(%rsp), %eax
 2825      02030000 
 2826 0157 8843FF   		movb	%al, -1(%rbx)
 2827              	.LVL351:
 2828              	.LBE135:
 932:fltk-1.3.4-1/png/pngrutil.c ****    {
 2829              		.loc 1 932 0 discriminator 3
 2830 015a 4C39EB   		cmpq	%r13, %rbx
 2831 015d 75C1     		jne	.L277
 2832              	.LVL352:
 2833              	.L278:
 963:fltk-1.3.4-1/png/pngrutil.c ****    }
 2834              		.loc 1 963 0
 2835 015f 31F6     		xorl	%esi, %esi
 2836 0161 4889EF   		movq	%rbp, %rdi
 2837 0164 E8000000 		call	png_crc_finish
 2837      00
 2838              	.LVL353:
1001:fltk-1.3.4-1/png/pngrutil.c **** 
 2839              		.loc 1 1001 0
 2840 0169 4489F1   		movl	%r14d, %ecx
 2841 016c 4C89FA   		movq	%r15, %rdx
 2842 016f 4C89E6   		movq	%r12, %rsi
 2843 0172 4889EF   		movq	%rbp, %rdi
 2844 0175 E8000000 		call	png_set_PLTE
 2844      00
 2845              	.LVL354:
1013:fltk-1.3.4-1/png/pngrutil.c ****        (info_ptr != NULL && (info_ptr->valid & PNG_INFO_tRNS) != 0))
 2846              		.loc 1 1013 0
 2847 017a 6683BD70 		cmpw	$0, 624(%rbp)
 2847      02000000 
 2848 0182 7444     		je	.L309
1020:fltk-1.3.4-1/png/pngrutil.c **** 
 2849              		.loc 1 1020 0
 2850 0184 31C9     		xorl	%ecx, %ecx
1022:fltk-1.3.4-1/png/pngrutil.c ****          info_ptr->num_trans = 0;
 2851              		.loc 1 1022 0
 2852 0186 4D85E4   		testq	%r12, %r12
1020:fltk-1.3.4-1/png/pngrutil.c **** 
 2853              		.loc 1 1020 0
 2854 0189 66898D70 		movw	%cx, 624(%rbp)
 2854      020000
1022:fltk-1.3.4-1/png/pngrutil.c ****          info_ptr->num_trans = 0;
 2855              		.loc 1 1022 0
 2856 0190 746E     		je	.L310
 2857              	.L282:
1023:fltk-1.3.4-1/png/pngrutil.c **** 
 2858              		.loc 1 1023 0
 2859 0192 31C0     		xorl	%eax, %eax
1025:fltk-1.3.4-1/png/pngrutil.c ****    }
 2860              		.loc 1 1025 0
 2861 0194 BE000000 		movl	$.LC38, %esi
 2861      00
 2862 0199 4889EF   		movq	%rbp, %rdi
1023:fltk-1.3.4-1/png/pngrutil.c **** 
 2863              		.loc 1 1023 0
 2864 019c 66418944 		movw	%ax, 34(%r12)
 2864      2422
1025:fltk-1.3.4-1/png/pngrutil.c ****    }
 2865              		.loc 1 1025 0
 2866 01a2 E8000000 		call	png_chunk_benign_error
 2866      00
 2867              	.LVL355:
 2868 01a7 418B4424 		movl	8(%r12), %eax
 2868      08
 2869              	.L281:
1030:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "hIST must be after");
 2870              		.loc 1 1030 0 discriminator 1
 2871 01ac A840     		testb	$64, %al
 2872 01ae 7538     		jne	.L311
 2873              	.L284:
1035:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "bKGD must be after");
 2874              		.loc 1 1035 0
 2875 01b0 A820     		testb	$32, %al
 2876 01b2 0F84E4FE 		je	.L265
 2876      FFFF
1036:fltk-1.3.4-1/png/pngrutil.c **** #endif
 2877              		.loc 1 1036 0
 2878 01b8 BE000000 		movl	$.LC37, %esi
 2878      00
 2879 01bd 4889EF   		movq	%rbp, %rdi
 2880 01c0 E9D2FEFF 		jmp	.L299
 2880      FF
 2881              		.p2align 4,,10
 2882 01c5 0F1F00   		.p2align 3
 2883              	.L309:
1013:fltk-1.3.4-1/png/pngrutil.c ****        (info_ptr != NULL && (info_ptr->valid & PNG_INFO_tRNS) != 0))
 2884              		.loc 1 1013 0 discriminator 1
 2885 01c8 4D85E4   		testq	%r12, %r12
 2886 01cb 0F84CBFE 		je	.L265
 2886      FFFF
1014:fltk-1.3.4-1/png/pngrutil.c ****    {
 2887              		.loc 1 1014 0
 2888 01d1 418B4424 		movl	8(%r12), %eax
 2888      08
 2889 01d6 A810     		testb	$16, %al
 2890 01d8 74D2     		je	.L281
1020:fltk-1.3.4-1/png/pngrutil.c **** 
 2891              		.loc 1 1020 0
 2892 01da 31D2     		xorl	%edx, %edx
 2893 01dc 66899570 		movw	%dx, 624(%rbp)
 2893      020000
 2894 01e3 EBAD     		jmp	.L282
 2895              		.p2align 4,,10
 2896 01e5 0F1F00   		.p2align 3
 2897              	.L311:
1031:fltk-1.3.4-1/png/pngrutil.c **** #endif
 2898              		.loc 1 1031 0
 2899 01e8 BE000000 		movl	$.LC36, %esi
 2899      00
 2900 01ed 4889EF   		movq	%rbp, %rdi
 2901 01f0 E8000000 		call	png_chunk_benign_error
 2901      00
 2902              	.LVL356:
 2903 01f5 418B4424 		movl	8(%r12), %eax
 2903      08
 2904 01fa EBB4     		jmp	.L284
 2905 01fc 0F1F4000 		.p2align 4,,10
 2906              		.p2align 3
 2907              	.L310:
1025:fltk-1.3.4-1/png/pngrutil.c ****    }
 2908              		.loc 1 1025 0
 2909 0200 BE000000 		movl	$.LC38, %esi
 2909      00
 2910 0205 4889EF   		movq	%rbp, %rdi
 2911 0208 E8000000 		call	png_chunk_benign_error
 2911      00
 2912              	.LVL357:
 2913 020d E98AFEFF 		jmp	.L265
 2913      FF
 2914              	.LVL358:
 2915              	.L308:
1038:fltk-1.3.4-1/png/pngrutil.c **** 
 2916              		.loc 1 1038 0
 2917 0212 E8000000 		call	__stack_chk_fail
 2917      00
 2918              	.LVL359:
 2919              	.L304:
 886:fltk-1.3.4-1/png/pngrutil.c **** 
 2920              		.loc 1 886 0
 2921 0217 BE000000 		movl	$.LC34, %esi
 2921      00
 2922              	.LVL360:
 2923 021c E8000000 		call	png_chunk_error
 2923      00
 2924              	.LVL361:
 2925              	.L303:
 878:fltk-1.3.4-1/png/pngrutil.c **** 
 2926              		.loc 1 878 0
 2927 0221 BE000000 		movl	$.LC33, %esi
 2927      00
 2928              	.LVL362:
 2929 0226 E8000000 		call	png_chunk_error
 2929      00
 2930              	.LVL363:
 2931              	.L307:
 923:fltk-1.3.4-1/png/pngrutil.c **** 
 2932              		.loc 1 923 0
 2933 022b E8000000 		call	png_chunk_error
 2933      00
 2934              	.LVL364:
 2935              		.cfi_endproc
 2936              	.LFE72:
 2938              		.section	.text.unlikely.png_handle_PLTE
 2939              	.LCOLDE39:
 2940              		.section	.text.png_handle_PLTE
 2941              	.LHOTE39:
 2942              		.section	.text.unlikely.png_handle_IEND,"ax",@progbits
 2943              	.LCOLDB40:
 2944              		.section	.text.png_handle_IEND,"ax",@progbits
 2945              	.LHOTB40:
 2946              		.p2align 4,,15
 2947              		.globl	png_handle_IEND
 2949              	png_handle_IEND:
 2950              	.LFB73:
1042:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_handle_IEND");
 2951              		.loc 1 1042 0
 2952              		.cfi_startproc
 2953              	.LVL365:
 2954 0000 55       		pushq	%rbp
 2955              		.cfi_def_cfa_offset 16
 2956              		.cfi_offset 6, -16
 2957 0001 53       		pushq	%rbx
 2958              		.cfi_def_cfa_offset 24
 2959              		.cfi_offset 3, -24
 2960 0002 4889FB   		movq	%rdi, %rbx
 2961 0005 4883EC08 		subq	$8, %rsp
 2962              		.cfi_def_cfa_offset 32
1045:fltk-1.3.4-1/png/pngrutil.c ****        (png_ptr->mode & PNG_HAVE_IDAT) == 0)
 2963              		.loc 1 1045 0
 2964 0009 8B872C01 		movl	300(%rdi), %eax
 2964      0000
 2965 000f 83E005   		andl	$5, %eax
 2966 0012 83F805   		cmpl	$5, %eax
 2967 0015 7534     		jne	.L316
1049:fltk-1.3.4-1/png/pngrutil.c **** 
 2968              		.loc 1 1049 0
 2969 0017 838F2C01 		orl	$24, 300(%rdi)
 2969      000018
 2970 001e 89D5     		movl	%edx, %ebp
1051:fltk-1.3.4-1/png/pngrutil.c **** 
 2971              		.loc 1 1051 0
 2972 0020 89D6     		movl	%edx, %esi
 2973              	.LVL366:
 2974 0022 E8000000 		call	png_crc_finish
 2974      00
 2975              	.LVL367:
1053:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid");
 2976              		.loc 1 1053 0
 2977 0027 85ED     		testl	%ebp, %ebp
 2978 0029 750D     		jne	.L317
1057:fltk-1.3.4-1/png/pngrutil.c **** 
 2979              		.loc 1 1057 0
 2980 002b 4883C408 		addq	$8, %rsp
 2981              		.cfi_remember_state
 2982              		.cfi_def_cfa_offset 24
 2983 002f 5B       		popq	%rbx
 2984              		.cfi_def_cfa_offset 16
 2985              	.LVL368:
 2986 0030 5D       		popq	%rbp
 2987              		.cfi_def_cfa_offset 8
 2988              	.LVL369:
 2989 0031 C3       		ret
 2990              	.LVL370:
 2991              		.p2align 4,,10
 2992 0032 660F1F44 		.p2align 3
 2992      0000
 2993              	.L317:
 2994              		.cfi_restore_state
 2995 0038 4883C408 		addq	$8, %rsp
 2996              		.cfi_remember_state
 2997              		.cfi_def_cfa_offset 24
1054:fltk-1.3.4-1/png/pngrutil.c **** 
 2998              		.loc 1 1054 0
 2999 003c 4889DF   		movq	%rbx, %rdi
 3000 003f BE000000 		movl	$.LC31, %esi
 3000      00
1057:fltk-1.3.4-1/png/pngrutil.c **** 
 3001              		.loc 1 1057 0
 3002 0044 5B       		popq	%rbx
 3003              		.cfi_def_cfa_offset 16
 3004              	.LVL371:
 3005 0045 5D       		popq	%rbp
 3006              		.cfi_def_cfa_offset 8
 3007              	.LVL372:
1054:fltk-1.3.4-1/png/pngrutil.c **** 
 3008              		.loc 1 1054 0
 3009 0046 E9000000 		jmp	png_chunk_benign_error
 3009      00
 3010              	.LVL373:
 3011              	.L316:
 3012              		.cfi_restore_state
1047:fltk-1.3.4-1/png/pngrutil.c **** 
 3013              		.loc 1 1047 0
 3014 004b BE000000 		movl	$.LC30, %esi
 3014      00
 3015              	.LVL374:
 3016 0050 E8000000 		call	png_chunk_error
 3016      00
 3017              	.LVL375:
 3018              		.cfi_endproc
 3019              	.LFE73:
 3021              		.section	.text.unlikely.png_handle_IEND
 3022              	.LCOLDE40:
 3023              		.section	.text.png_handle_IEND
 3024              	.LHOTE40:
 3025              		.section	.text.unlikely.png_handle_gAMA,"ax",@progbits
 3026              	.LCOLDB41:
 3027              		.section	.text.png_handle_gAMA,"ax",@progbits
 3028              	.LHOTB41:
 3029              		.p2align 4,,15
 3030              		.globl	png_handle_gAMA
 3032              	png_handle_gAMA:
 3033              	.LFB74:
1062:fltk-1.3.4-1/png/pngrutil.c ****    png_fixed_point igamma;
 3034              		.loc 1 1062 0
 3035              		.cfi_startproc
 3036              	.LVL376:
 3037 0000 55       		pushq	%rbp
 3038              		.cfi_def_cfa_offset 16
 3039              		.cfi_offset 6, -16
 3040 0001 53       		pushq	%rbx
 3041              		.cfi_def_cfa_offset 24
 3042              		.cfi_offset 3, -24
 3043 0002 4889FB   		movq	%rdi, %rbx
 3044 0005 4883EC18 		subq	$24, %rsp
 3045              		.cfi_def_cfa_offset 48
1062:fltk-1.3.4-1/png/pngrutil.c ****    png_fixed_point igamma;
 3046              		.loc 1 1062 0
 3047 0009 64488B04 		movq	%fs:40, %rax
 3047      25280000 
 3047      00
 3048 0012 48894424 		movq	%rax, 8(%rsp)
 3048      08
 3049 0017 31C0     		xorl	%eax, %eax
1068:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
 3050              		.loc 1 1068 0
 3051 0019 8B872C01 		movl	300(%rdi), %eax
 3051      0000
 3052 001f A801     		testb	$1, %al
 3053 0021 0F849D00 		je	.L326
 3053      0000
1071:fltk-1.3.4-1/png/pngrutil.c ****    {
 3054              		.loc 1 1071 0
 3055 0027 A806     		testb	$6, %al
 3056 0029 7535     		jne	.L327
1078:fltk-1.3.4-1/png/pngrutil.c ****    {
 3057              		.loc 1 1078 0
 3058 002b 83FA04   		cmpl	$4, %edx
 3059 002e 7450     		je	.L322
1080:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid");
 3060              		.loc 1 1080 0
 3061 0030 89D6     		movl	%edx, %esi
 3062              	.LVL377:
 3063 0032 E8000000 		call	png_crc_finish
 3063      00
 3064              	.LVL378:
1081:fltk-1.3.4-1/png/pngrutil.c ****       return;
 3065              		.loc 1 1081 0
 3066 0037 BE000000 		movl	$.LC31, %esi
 3066      00
 3067 003c 4889DF   		movq	%rbx, %rdi
 3068 003f E8000000 		call	png_chunk_benign_error
 3068      00
 3069              	.LVL379:
 3070              	.L318:
1094:fltk-1.3.4-1/png/pngrutil.c **** #endif
 3071              		.loc 1 1094 0
 3072 0044 488B4424 		movq	8(%rsp), %rax
 3072      08
 3073 0049 64483304 		xorq	%fs:40, %rax
 3073      25280000 
 3073      00
 3074 0052 757A     		jne	.L328
 3075 0054 4883C418 		addq	$24, %rsp
 3076              		.cfi_remember_state
 3077              		.cfi_def_cfa_offset 24
 3078 0058 5B       		popq	%rbx
 3079              		.cfi_def_cfa_offset 16
 3080              	.LVL380:
 3081 0059 5D       		popq	%rbp
 3082              		.cfi_def_cfa_offset 8
 3083 005a C3       		ret
 3084              	.LVL381:
 3085 005b 0F1F4400 		.p2align 4,,10
 3085      00
 3086              		.p2align 3
 3087              	.L327:
 3088              		.cfi_restore_state
1073:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
 3089              		.loc 1 1073 0
 3090 0060 89D6     		movl	%edx, %esi
 3091              	.LVL382:
 3092 0062 E8000000 		call	png_crc_finish
 3092      00
 3093              	.LVL383:
1074:fltk-1.3.4-1/png/pngrutil.c ****       return;
 3094              		.loc 1 1074 0
 3095 0067 BE000000 		movl	$.LC30, %esi
 3095      00
 3096 006c 4889DF   		movq	%rbx, %rdi
 3097 006f E8000000 		call	png_chunk_benign_error
 3097      00
 3098              	.LVL384:
1075:fltk-1.3.4-1/png/pngrutil.c ****    }
 3099              		.loc 1 1075 0
 3100 0074 EBCE     		jmp	.L318
 3101              	.LVL385:
 3102 0076 662E0F1F 		.p2align 4,,10
 3102      84000000 
 3102      0000
 3103              		.p2align 3
 3104              	.L322:
1085:fltk-1.3.4-1/png/pngrutil.c **** 
 3105              		.loc 1 1085 0
 3106 0080 BA040000 		movl	$4, %edx
 3106      00
 3107              	.LVL386:
 3108 0085 4889F5   		movq	%rsi, %rbp
 3109 0088 4889E6   		movq	%rsp, %rsi
 3110              	.LVL387:
 3111 008b E8000000 		call	png_crc_read
 3111      00
 3112              	.LVL388:
1087:fltk-1.3.4-1/png/pngrutil.c ****       return;
 3113              		.loc 1 1087 0
 3114 0090 31F6     		xorl	%esi, %esi
 3115 0092 4889DF   		movq	%rbx, %rdi
 3116 0095 E8000000 		call	png_crc_finish
 3116      00
 3117              	.LVL389:
 3118 009a 85C0     		testl	%eax, %eax
 3119 009c 75A6     		jne	.L318
1090:fltk-1.3.4-1/png/pngrutil.c **** 
 3120              		.loc 1 1090 0
 3121 009e 4889E7   		movq	%rsp, %rdi
 3122 00a1 E8000000 		call	png_get_fixed_point.constprop.7
 3122      00
 3123              	.LVL390:
1092:fltk-1.3.4-1/png/pngrutil.c ****    png_colorspace_sync(png_ptr, info_ptr);
 3124              		.loc 1 1092 0
 3125 00a6 488DB3D8 		leaq	1240(%rbx), %rsi
 3125      040000
 3126 00ad 4889DF   		movq	%rbx, %rdi
 3127 00b0 89C2     		movl	%eax, %edx
 3128 00b2 E8000000 		call	png_colorspace_set_gamma
 3128      00
 3129              	.LVL391:
1093:fltk-1.3.4-1/png/pngrutil.c **** }
 3130              		.loc 1 1093 0
 3131 00b7 4889EE   		movq	%rbp, %rsi
 3132 00ba 4889DF   		movq	%rbx, %rdi
 3133 00bd E8000000 		call	png_colorspace_sync
 3133      00
 3134              	.LVL392:
 3135 00c2 EB80     		jmp	.L318
 3136              	.LVL393:
 3137              	.L326:
1069:fltk-1.3.4-1/png/pngrutil.c **** 
 3138              		.loc 1 1069 0
 3139 00c4 BE000000 		movl	$.LC33, %esi
 3139      00
 3140              	.LVL394:
 3141 00c9 E8000000 		call	png_chunk_error
 3141      00
 3142              	.LVL395:
 3143              	.L328:
1094:fltk-1.3.4-1/png/pngrutil.c **** #endif
 3144              		.loc 1 1094 0
 3145 00ce E8000000 		call	__stack_chk_fail
 3145      00
 3146              	.LVL396:
 3147              		.cfi_endproc
 3148              	.LFE74:
 3150              		.section	.text.unlikely.png_handle_gAMA
 3151              	.LCOLDE41:
 3152              		.section	.text.png_handle_gAMA
 3153              	.LHOTE41:
 3154              		.section	.text.unlikely.png_handle_sBIT,"ax",@progbits
 3155              	.LCOLDB42:
 3156              		.section	.text.png_handle_sBIT,"ax",@progbits
 3157              	.LHOTB42:
 3158              		.p2align 4,,15
 3159              		.globl	png_handle_sBIT
 3161              	png_handle_sBIT:
 3162              	.LFB75:
1100:fltk-1.3.4-1/png/pngrutil.c ****    unsigned int truelen, i;
 3163              		.loc 1 1100 0
 3164              		.cfi_startproc
 3165              	.LVL397:
 3166 0000 4155     		pushq	%r13
 3167              		.cfi_def_cfa_offset 16
 3168              		.cfi_offset 13, -16
 3169 0002 4154     		pushq	%r12
 3170              		.cfi_def_cfa_offset 24
 3171              		.cfi_offset 12, -24
 3172 0004 55       		pushq	%rbp
 3173              		.cfi_def_cfa_offset 32
 3174              		.cfi_offset 6, -32
 3175 0005 53       		pushq	%rbx
 3176              		.cfi_def_cfa_offset 40
 3177              		.cfi_offset 3, -40
 3178 0006 4889FB   		movq	%rdi, %rbx
 3179 0009 4883EC28 		subq	$40, %rsp
 3180              		.cfi_def_cfa_offset 80
1100:fltk-1.3.4-1/png/pngrutil.c ****    unsigned int truelen, i;
 3181              		.loc 1 1100 0
 3182 000d 64488B04 		movq	%fs:40, %rax
 3182      25280000 
 3182      00
 3183 0016 48894424 		movq	%rax, 24(%rsp)
 3183      18
 3184 001b 31C0     		xorl	%eax, %eax
1107:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
 3185              		.loc 1 1107 0
 3186 001d 8B872C01 		movl	300(%rdi), %eax
 3186      0000
 3187 0023 A801     		testb	$1, %al
 3188 0025 0F84F901 		je	.L360
 3188      0000
1110:fltk-1.3.4-1/png/pngrutil.c ****    {
 3189              		.loc 1 1110 0
 3190 002b A806     		testb	$6, %al
 3191 002d 0F852D01 		jne	.L361
 3191      0000
1117:fltk-1.3.4-1/png/pngrutil.c ****    {
 3192              		.loc 1 1117 0
 3193 0033 4885F6   		testq	%rsi, %rsi
 3194 0036 4989F4   		movq	%rsi, %r12
 3195 0039 740A     		je	.L333
1117:fltk-1.3.4-1/png/pngrutil.c ****    {
 3196              		.loc 1 1117 0 is_stmt 0 discriminator 1
 3197 003b F6460802 		testb	$2, 8(%rsi)
 3198 003f 0F856301 		jne	.L362
 3198      0000
 3199              	.L333:
1124:fltk-1.3.4-1/png/pngrutil.c ****    {
 3200              		.loc 1 1124 0 is_stmt 1
 3201 0045 80BB7702 		cmpb	$3, 631(%rbx)
 3201      000003
 3202 004c 0F847601 		je	.L348
 3202      0000
1132:fltk-1.3.4-1/png/pngrutil.c ****       sample_depth = png_ptr->bit_depth;
 3203              		.loc 1 1132 0
 3204 0052 440FB6AB 		movzbl	635(%rbx), %r13d
 3204      7B020000 
 3205              	.LVL398:
1133:fltk-1.3.4-1/png/pngrutil.c ****    }
 3206              		.loc 1 1133 0
 3207 005a 0FB6AB78 		movzbl	632(%rbx), %ebp
 3207      020000
 3208              	.LVL399:
 3209              	.L334:
1136:fltk-1.3.4-1/png/pngrutil.c ****    {
 3210              		.loc 1 1136 0
 3211 0061 4139D5   		cmpl	%edx, %r13d
 3212 0064 0F851601 		jne	.L349
 3212      0000
 3213 006a 83FA04   		cmpl	$4, %edx
 3214 006d 0F870D01 		ja	.L349
 3214      0000
1144:fltk-1.3.4-1/png/pngrutil.c **** 
 3215              		.loc 1 1144 0
 3216 0073 488D7424 		leaq	16(%rsp), %rsi
 3216      10
 3217              	.LVL400:
 3218 0078 4489EA   		movl	%r13d, %edx
 3219              	.LVL401:
 3220 007b 4889DF   		movq	%rbx, %rdi
 3221              	.LVL402:
1143:fltk-1.3.4-1/png/pngrutil.c ****    png_crc_read(png_ptr, buf, truelen);
 3222              		.loc 1 1143 0
 3223 007e 40886C24 		movb	%bpl, 19(%rsp)
 3223      13
 3224 0083 40886C24 		movb	%bpl, 18(%rsp)
 3224      12
 3225 0088 40886C24 		movb	%bpl, 17(%rsp)
 3225      11
 3226 008d 40886C24 		movb	%bpl, 16(%rsp)
 3226      10
1144:fltk-1.3.4-1/png/pngrutil.c **** 
 3227              		.loc 1 1144 0
 3228 0092 E8000000 		call	png_crc_read
 3228      00
 3229              	.LVL403:
1146:fltk-1.3.4-1/png/pngrutil.c ****       return;
 3230              		.loc 1 1146 0
 3231 0097 31F6     		xorl	%esi, %esi
 3232 0099 4889DF   		movq	%rbx, %rdi
 3233 009c E8000000 		call	png_crc_finish
 3233      00
 3234              	.LVL404:
 3235 00a1 85C0     		testl	%eax, %eax
 3236 00a3 0F859700 		jne	.L329
 3236      0000
 3237              	.LVL405:
1149:fltk-1.3.4-1/png/pngrutil.c ****       if (buf[i] == 0 || buf[i] > sample_depth)
 3238              		.loc 1 1149 0 discriminator 1
 3239 00a9 4585ED   		testl	%r13d, %r13d
1150:fltk-1.3.4-1/png/pngrutil.c ****       {
 3240              		.loc 1 1150 0 discriminator 1
 3241 00ac 0FB67424 		movzbl	16(%rsp), %esi
 3241      10
1149:fltk-1.3.4-1/png/pngrutil.c ****       if (buf[i] == 0 || buf[i] > sample_depth)
 3242              		.loc 1 1149 0 discriminator 1
 3243 00b1 7443     		je	.L338
1150:fltk-1.3.4-1/png/pngrutil.c ****       {
 3244              		.loc 1 1150 0
 3245 00b3 4084F6   		testb	%sil, %sil
 3246 00b6 0F842401 		je	.L339
 3246      0000
 3247 00bc 4038F5   		cmpb	%sil, %bpl
 3248 00bf 0F821B01 		jb	.L339
 3248      0000
 3249 00c5 488D4424 		leaq	16(%rsp), %rax
 3249      10
 3250 00ca 418D4DFF 		leal	-1(%r13), %ecx
 3251 00ce 4801C1   		addq	%rax, %rcx
 3252 00d1 EB1E     		jmp	.L341
 3253              	.LVL406:
 3254              		.p2align 4,,10
 3255 00d3 0F1F4400 		.p2align 3
 3255      00
 3256              	.L343:
 3257 00d8 0FB65001 		movzbl	1(%rax), %edx
 3258 00dc 4883C001 		addq	$1, %rax
 3259              	.LVL407:
 3260 00e0 4038D5   		cmpb	%dl, %bpl
 3261 00e3 0F82F700 		jb	.L339
 3261      0000
 3262 00e9 84D2     		testb	%dl, %dl
 3263 00eb 0F84EF00 		je	.L339
 3263      0000
 3264              	.L341:
 3265              	.LVL408:
1149:fltk-1.3.4-1/png/pngrutil.c ****       if (buf[i] == 0 || buf[i] > sample_depth)
 3266              		.loc 1 1149 0 discriminator 2
 3267 00f1 4839C8   		cmpq	%rcx, %rax
 3268 00f4 75E2     		jne	.L343
 3269              	.LVL409:
 3270              	.L338:
1156:fltk-1.3.4-1/png/pngrutil.c ****    {
 3271              		.loc 1 1156 0
 3272 00f6 F6837702 		testb	$2, 631(%rbx)
 3272      000002
 3273 00fd 0F84F500 		je	.L344
 3273      0000
1159:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->sig_bit.blue = buf[2];
 3274              		.loc 1 1159 0
 3275 0103 0FB64424 		movzbl	17(%rsp), %eax
 3275      11
1158:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->sig_bit.green = buf[1];
 3276              		.loc 1 1158 0
 3277 0108 4088B3E8 		movb	%sil, 744(%rbx)
 3277      020000
1159:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->sig_bit.blue = buf[2];
 3278              		.loc 1 1159 0
 3279 010f 8883E902 		movb	%al, 745(%rbx)
 3279      0000
1160:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->sig_bit.alpha = buf[3];
 3280              		.loc 1 1160 0
 3281 0115 0FB64424 		movzbl	18(%rsp), %eax
 3281      12
 3282 011a 8883EA02 		movb	%al, 746(%rbx)
 3282      0000
1161:fltk-1.3.4-1/png/pngrutil.c ****    }
 3283              		.loc 1 1161 0
 3284 0120 0FB64424 		movzbl	19(%rsp), %eax
 3284      13
 3285 0125 8883EC02 		movb	%al, 748(%rbx)
 3285      0000
 3286              	.L345:
1173:fltk-1.3.4-1/png/pngrutil.c **** }
 3287              		.loc 1 1173 0
 3288 012b 488D93E8 		leaq	744(%rbx), %rdx
 3288      020000
 3289 0132 4C89E6   		movq	%r12, %rsi
 3290 0135 4889DF   		movq	%rbx, %rdi
 3291 0138 E8000000 		call	png_set_sBIT
 3291      00
 3292              	.LVL410:
 3293 013d 0F1F00   		.p2align 4,,10
 3294              		.p2align 3
 3295              	.L329:
1174:fltk-1.3.4-1/png/pngrutil.c **** #endif
 3296              		.loc 1 1174 0
 3297 0140 488B4424 		movq	24(%rsp), %rax
 3297      18
 3298 0145 64483304 		xorq	%fs:40, %rax
 3298      25280000 
 3298      00
 3299 014e 0F85DA00 		jne	.L363
 3299      0000
 3300 0154 4883C428 		addq	$40, %rsp
 3301              		.cfi_remember_state
 3302              		.cfi_def_cfa_offset 40
 3303 0158 5B       		popq	%rbx
 3304              		.cfi_def_cfa_offset 32
 3305              	.LVL411:
 3306 0159 5D       		popq	%rbp
 3307              		.cfi_def_cfa_offset 24
 3308 015a 415C     		popq	%r12
 3309              		.cfi_def_cfa_offset 16
 3310 015c 415D     		popq	%r13
 3311              		.cfi_def_cfa_offset 8
 3312 015e C3       		ret
 3313              	.LVL412:
 3314 015f 90       		.p2align 4,,10
 3315              		.p2align 3
 3316              	.L361:
 3317              		.cfi_restore_state
1112:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
 3318              		.loc 1 1112 0
 3319 0160 89D6     		movl	%edx, %esi
 3320              	.LVL413:
 3321 0162 E8000000 		call	png_crc_finish
 3321      00
 3322              	.LVL414:
1113:fltk-1.3.4-1/png/pngrutil.c ****       return;
 3323              		.loc 1 1113 0
 3324 0167 BE000000 		movl	$.LC30, %esi
 3324      00
 3325 016c 4889DF   		movq	%rbx, %rdi
 3326 016f E8000000 		call	png_chunk_benign_error
 3326      00
 3327              	.LVL415:
1114:fltk-1.3.4-1/png/pngrutil.c ****    }
 3328              		.loc 1 1114 0
 3329 0174 EBCA     		jmp	.L329
 3330              	.LVL416:
 3331 0176 662E0F1F 		.p2align 4,,10
 3331      84000000 
 3331      0000
 3332              		.p2align 3
 3333              	.L349:
1138:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
 3334              		.loc 1 1138 0
 3335 0180 4889DF   		movq	%rbx, %rdi
 3336 0183 BE000000 		movl	$.LC31, %esi
 3336      00
 3337              	.LVL417:
 3338 0188 8954240C 		movl	%edx, 12(%rsp)
 3339 018c E8000000 		call	png_chunk_benign_error
 3339      00
 3340              	.LVL418:
1139:fltk-1.3.4-1/png/pngrutil.c ****       return;
 3341              		.loc 1 1139 0
 3342 0191 8B54240C 		movl	12(%rsp), %edx
 3343 0195 4889DF   		movq	%rbx, %rdi
 3344 0198 89D6     		movl	%edx, %esi
 3345 019a E8000000 		call	png_crc_finish
 3345      00
 3346              	.LVL419:
1140:fltk-1.3.4-1/png/pngrutil.c ****    }
 3347              		.loc 1 1140 0
 3348 019f EB9F     		jmp	.L329
 3349              	.LVL420:
 3350              		.p2align 4,,10
 3351 01a1 0F1F8000 		.p2align 3
 3351      000000
 3352              	.L362:
1119:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "duplicate");
 3353              		.loc 1 1119 0
 3354 01a8 89D6     		movl	%edx, %esi
 3355              	.LVL421:
 3356 01aa E8000000 		call	png_crc_finish
 3356      00
 3357              	.LVL422:
1120:fltk-1.3.4-1/png/pngrutil.c ****       return;
 3358              		.loc 1 1120 0
 3359 01af BE000000 		movl	$.LC34, %esi
 3359      00
 3360 01b4 4889DF   		movq	%rbx, %rdi
 3361 01b7 E8000000 		call	png_chunk_benign_error
 3361      00
 3362              	.LVL423:
1121:fltk-1.3.4-1/png/pngrutil.c ****    }
 3363              		.loc 1 1121 0
 3364 01bc E97FFFFF 		jmp	.L329
 3364      FF
 3365              	.LVL424:
 3366              		.p2align 4,,10
 3367 01c1 0F1F8000 		.p2align 3
 3367      000000
 3368              	.L348:
1127:fltk-1.3.4-1/png/pngrutil.c ****    }
 3369              		.loc 1 1127 0
 3370 01c8 BD080000 		movl	$8, %ebp
 3370      00
1126:fltk-1.3.4-1/png/pngrutil.c ****       sample_depth = 8;
 3371              		.loc 1 1126 0
 3372 01cd 41BD0300 		movl	$3, %r13d
 3372      0000
 3373 01d3 E989FEFF 		jmp	.L334
 3373      FF
 3374              	.LVL425:
 3375 01d8 0F1F8400 		.p2align 4,,10
 3375      00000000 
 3376              		.p2align 3
 3377              	.L339:
1152:fltk-1.3.4-1/png/pngrutil.c ****          return;
 3378              		.loc 1 1152 0
 3379 01e0 BE000000 		movl	$.LC31, %esi
 3379      00
 3380 01e5 4889DF   		movq	%rbx, %rdi
 3381 01e8 E8000000 		call	png_chunk_benign_error
 3381      00
 3382              	.LVL426:
1153:fltk-1.3.4-1/png/pngrutil.c ****       }
 3383              		.loc 1 1153 0
 3384 01ed E94EFFFF 		jmp	.L329
 3384      FF
 3385              		.p2align 4,,10
 3386 01f2 660F1F44 		.p2align 3
 3386      0000
 3387              	.L344:
1170:fltk-1.3.4-1/png/pngrutil.c ****    }
 3388              		.loc 1 1170 0
 3389 01f8 0FB64424 		movzbl	17(%rsp), %eax
 3389      11
1166:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->sig_bit.red = buf[0];
 3390              		.loc 1 1166 0
 3391 01fd 4088B3EB 		movb	%sil, 747(%rbx)
 3391      020000
1167:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->sig_bit.green = buf[0];
 3392              		.loc 1 1167 0
 3393 0204 4088B3E8 		movb	%sil, 744(%rbx)
 3393      020000
1168:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->sig_bit.blue = buf[0];
 3394              		.loc 1 1168 0
 3395 020b 4088B3E9 		movb	%sil, 745(%rbx)
 3395      020000
1169:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->sig_bit.alpha = buf[1];
 3396              		.loc 1 1169 0
 3397 0212 4088B3EA 		movb	%sil, 746(%rbx)
 3397      020000
1170:fltk-1.3.4-1/png/pngrutil.c ****    }
 3398              		.loc 1 1170 0
 3399 0219 8883EC02 		movb	%al, 748(%rbx)
 3399      0000
 3400 021f E907FFFF 		jmp	.L345
 3400      FF
 3401              	.LVL427:
 3402              	.L360:
1108:fltk-1.3.4-1/png/pngrutil.c **** 
 3403              		.loc 1 1108 0
 3404 0224 BE000000 		movl	$.LC33, %esi
 3404      00
 3405              	.LVL428:
 3406 0229 E8000000 		call	png_chunk_error
 3406      00
 3407              	.LVL429:
 3408              	.L363:
1174:fltk-1.3.4-1/png/pngrutil.c **** #endif
 3409              		.loc 1 1174 0
 3410 022e E8000000 		call	__stack_chk_fail
 3410      00
 3411              	.LVL430:
 3412              		.cfi_endproc
 3413              	.LFE75:
 3415              		.section	.text.unlikely.png_handle_sBIT
 3416              	.LCOLDE42:
 3417              		.section	.text.png_handle_sBIT
 3418              	.LHOTE42:
 3419              		.section	.rodata.str1.1
 3420              	.LC43:
 3421 00d4 696E7661 		.string	"invalid values"
 3421      6C696420 
 3421      76616C75 
 3421      657300
 3422              		.section	.text.unlikely.png_handle_cHRM,"ax",@progbits
 3423              	.LCOLDB44:
 3424              		.section	.text.png_handle_cHRM,"ax",@progbits
 3425              	.LHOTB44:
 3426              		.p2align 4,,15
 3427              		.globl	png_handle_cHRM
 3429              	png_handle_cHRM:
 3430              	.LFB76:
1180:fltk-1.3.4-1/png/pngrutil.c ****    png_byte buf[32];
 3431              		.loc 1 1180 0
 3432              		.cfi_startproc
 3433              	.LVL431:
 3434 0000 4154     		pushq	%r12
 3435              		.cfi_def_cfa_offset 16
 3436              		.cfi_offset 12, -16
 3437 0002 55       		pushq	%rbp
 3438              		.cfi_def_cfa_offset 24
 3439              		.cfi_offset 6, -24
 3440 0003 53       		pushq	%rbx
 3441              		.cfi_def_cfa_offset 32
 3442              		.cfi_offset 3, -32
 3443 0004 4889FB   		movq	%rdi, %rbx
 3444 0007 4883EC50 		subq	$80, %rsp
 3445              		.cfi_def_cfa_offset 112
1180:fltk-1.3.4-1/png/pngrutil.c ****    png_byte buf[32];
 3446              		.loc 1 1180 0
 3447 000b 64488B04 		movq	%fs:40, %rax
 3447      25280000 
 3447      00
 3448 0014 48894424 		movq	%rax, 72(%rsp)
 3448      48
 3449 0019 31C0     		xorl	%eax, %eax
1186:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
 3450              		.loc 1 1186 0
 3451 001b 8B872C01 		movl	300(%rdi), %eax
 3451      0000
 3452 0021 A801     		testb	$1, %al
 3453 0023 0F84C201 		je	.L377
 3453      0000
1189:fltk-1.3.4-1/png/pngrutil.c ****    {
 3454              		.loc 1 1189 0
 3455 0029 A806     		testb	$6, %al
 3456 002b 753B     		jne	.L378
1196:fltk-1.3.4-1/png/pngrutil.c ****    {
 3457              		.loc 1 1196 0
 3458 002d 83FA20   		cmpl	$32, %edx
 3459 0030 744E     		je	.L368
1198:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid");
 3460              		.loc 1 1198 0
 3461 0032 89D6     		movl	%edx, %esi
 3462              	.LVL432:
 3463 0034 E8000000 		call	png_crc_finish
 3463      00
 3464              	.LVL433:
1199:fltk-1.3.4-1/png/pngrutil.c ****       return;
 3465              		.loc 1 1199 0
 3466 0039 BE000000 		movl	$.LC31, %esi
 3466      00
 3467 003e 4889DF   		movq	%rbx, %rdi
 3468 0041 E8000000 		call	png_chunk_benign_error
 3468      00
 3469              	.LVL434:
 3470              	.L364:
1246:fltk-1.3.4-1/png/pngrutil.c **** #endif
 3471              		.loc 1 1246 0
 3472 0046 488B4424 		movq	72(%rsp), %rax
 3472      48
 3473 004b 64483304 		xorq	%fs:40, %rax
 3473      25280000 
 3473      00
 3474 0054 0F859B01 		jne	.L379
 3474      0000
 3475 005a 4883C450 		addq	$80, %rsp
 3476              		.cfi_remember_state
 3477              		.cfi_def_cfa_offset 32
 3478 005e 5B       		popq	%rbx
 3479              		.cfi_def_cfa_offset 24
 3480              	.LVL435:
 3481 005f 5D       		popq	%rbp
 3482              		.cfi_def_cfa_offset 16
 3483 0060 415C     		popq	%r12
 3484              		.cfi_def_cfa_offset 8
 3485 0062 C3       		ret
 3486              	.LVL436:
 3487              		.p2align 4,,10
 3488 0063 0F1F4400 		.p2align 3
 3488      00
 3489              	.L378:
 3490              		.cfi_restore_state
1191:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
 3491              		.loc 1 1191 0
 3492 0068 89D6     		movl	%edx, %esi
 3493              	.LVL437:
 3494 006a E8000000 		call	png_crc_finish
 3494      00
 3495              	.LVL438:
1192:fltk-1.3.4-1/png/pngrutil.c ****       return;
 3496              		.loc 1 1192 0
 3497 006f BE000000 		movl	$.LC30, %esi
 3497      00
 3498 0074 4889DF   		movq	%rbx, %rdi
 3499 0077 E8000000 		call	png_chunk_benign_error
 3499      00
 3500              	.LVL439:
1193:fltk-1.3.4-1/png/pngrutil.c ****    }
 3501              		.loc 1 1193 0
 3502 007c EBC8     		jmp	.L364
 3503              	.LVL440:
 3504 007e 6690     		.p2align 4,,10
 3505              		.p2align 3
 3506              	.L368:
 3507 0080 4889F5   		movq	%rsi, %rbp
1203:fltk-1.3.4-1/png/pngrutil.c **** 
 3508              		.loc 1 1203 0
 3509 0083 488D7424 		leaq	32(%rsp), %rsi
 3509      20
 3510              	.LVL441:
 3511 0088 BA200000 		movl	$32, %edx
 3511      00
 3512              	.LVL442:
 3513 008d E8000000 		call	png_crc_read
 3513      00
 3514              	.LVL443:
1205:fltk-1.3.4-1/png/pngrutil.c ****       return;
 3515              		.loc 1 1205 0
 3516 0092 31F6     		xorl	%esi, %esi
 3517 0094 4889DF   		movq	%rbx, %rdi
 3518 0097 E8000000 		call	png_crc_finish
 3518      00
 3519              	.LVL444:
 3520 009c 85C0     		testl	%eax, %eax
 3521 009e 75A6     		jne	.L364
1208:fltk-1.3.4-1/png/pngrutil.c ****    xy.whitey = png_get_fixed_point(NULL, buf + 4);
 3522              		.loc 1 1208 0
 3523 00a0 488D7C24 		leaq	32(%rsp), %rdi
 3523      20
 3524 00a5 E8000000 		call	png_get_fixed_point.constprop.7
 3524      00
 3525              	.LVL445:
1209:fltk-1.3.4-1/png/pngrutil.c ****    xy.redx   = png_get_fixed_point(NULL, buf + 8);
 3526              		.loc 1 1209 0
 3527 00aa 488D7C24 		leaq	36(%rsp), %rdi
 3527      24
1208:fltk-1.3.4-1/png/pngrutil.c ****    xy.whitey = png_get_fixed_point(NULL, buf + 4);
 3528              		.loc 1 1208 0
 3529 00af 4189C4   		movl	%eax, %r12d
 3530 00b2 89442418 		movl	%eax, 24(%rsp)
1209:fltk-1.3.4-1/png/pngrutil.c ****    xy.redx   = png_get_fixed_point(NULL, buf + 8);
 3531              		.loc 1 1209 0
 3532 00b6 E8000000 		call	png_get_fixed_point.constprop.7
 3532      00
 3533              	.LVL446:
1210:fltk-1.3.4-1/png/pngrutil.c ****    xy.redy   = png_get_fixed_point(NULL, buf + 12);
 3534              		.loc 1 1210 0
 3535 00bb 488D7C24 		leaq	40(%rsp), %rdi
 3535      28
1209:fltk-1.3.4-1/png/pngrutil.c ****    xy.redx   = png_get_fixed_point(NULL, buf + 8);
 3536              		.loc 1 1209 0
 3537 00c0 4189C3   		movl	%eax, %r11d
 3538 00c3 8944241C 		movl	%eax, 28(%rsp)
1210:fltk-1.3.4-1/png/pngrutil.c ****    xy.redy   = png_get_fixed_point(NULL, buf + 12);
 3539              		.loc 1 1210 0
 3540 00c7 E8000000 		call	png_get_fixed_point.constprop.7
 3540      00
 3541              	.LVL447:
1211:fltk-1.3.4-1/png/pngrutil.c ****    xy.greenx = png_get_fixed_point(NULL, buf + 16);
 3542              		.loc 1 1211 0
 3543 00cc 488D7C24 		leaq	44(%rsp), %rdi
 3543      2C
1210:fltk-1.3.4-1/png/pngrutil.c ****    xy.redy   = png_get_fixed_point(NULL, buf + 12);
 3544              		.loc 1 1210 0
 3545 00d1 89C1     		movl	%eax, %ecx
 3546 00d3 890424   		movl	%eax, (%rsp)
1211:fltk-1.3.4-1/png/pngrutil.c ****    xy.greenx = png_get_fixed_point(NULL, buf + 16);
 3547              		.loc 1 1211 0
 3548 00d6 E8000000 		call	png_get_fixed_point.constprop.7
 3548      00
 3549              	.LVL448:
1212:fltk-1.3.4-1/png/pngrutil.c ****    xy.greeny = png_get_fixed_point(NULL, buf + 20);
 3550              		.loc 1 1212 0
 3551 00db 488D7C24 		leaq	48(%rsp), %rdi
 3551      30
1211:fltk-1.3.4-1/png/pngrutil.c ****    xy.greenx = png_get_fixed_point(NULL, buf + 16);
 3552              		.loc 1 1211 0
 3553 00e0 4189C2   		movl	%eax, %r10d
 3554 00e3 89442404 		movl	%eax, 4(%rsp)
1212:fltk-1.3.4-1/png/pngrutil.c ****    xy.greeny = png_get_fixed_point(NULL, buf + 20);
 3555              		.loc 1 1212 0
 3556 00e7 E8000000 		call	png_get_fixed_point.constprop.7
 3556      00
 3557              	.LVL449:
1213:fltk-1.3.4-1/png/pngrutil.c ****    xy.bluex  = png_get_fixed_point(NULL, buf + 24);
 3558              		.loc 1 1213 0
 3559 00ec 488D7C24 		leaq	52(%rsp), %rdi
 3559      34
1212:fltk-1.3.4-1/png/pngrutil.c ****    xy.greeny = png_get_fixed_point(NULL, buf + 20);
 3560              		.loc 1 1212 0
 3561 00f1 4189C1   		movl	%eax, %r9d
 3562 00f4 89442408 		movl	%eax, 8(%rsp)
1213:fltk-1.3.4-1/png/pngrutil.c ****    xy.bluex  = png_get_fixed_point(NULL, buf + 24);
 3563              		.loc 1 1213 0
 3564 00f8 E8000000 		call	png_get_fixed_point.constprop.7
 3564      00
 3565              	.LVL450:
1214:fltk-1.3.4-1/png/pngrutil.c ****    xy.bluey  = png_get_fixed_point(NULL, buf + 28);
 3566              		.loc 1 1214 0
 3567 00fd 488D7C24 		leaq	56(%rsp), %rdi
 3567      38
1213:fltk-1.3.4-1/png/pngrutil.c ****    xy.bluex  = png_get_fixed_point(NULL, buf + 24);
 3568              		.loc 1 1213 0
 3569 0102 4189C0   		movl	%eax, %r8d
 3570 0105 8944240C 		movl	%eax, 12(%rsp)
1214:fltk-1.3.4-1/png/pngrutil.c ****    xy.bluey  = png_get_fixed_point(NULL, buf + 28);
 3571              		.loc 1 1214 0
 3572 0109 E8000000 		call	png_get_fixed_point.constprop.7
 3572      00
 3573              	.LVL451:
1215:fltk-1.3.4-1/png/pngrutil.c **** 
 3574              		.loc 1 1215 0
 3575 010e 488D7C24 		leaq	60(%rsp), %rdi
 3575      3C
1214:fltk-1.3.4-1/png/pngrutil.c ****    xy.bluey  = png_get_fixed_point(NULL, buf + 28);
 3576              		.loc 1 1214 0
 3577 0113 89C6     		movl	%eax, %esi
 3578 0115 89442410 		movl	%eax, 16(%rsp)
1215:fltk-1.3.4-1/png/pngrutil.c **** 
 3579              		.loc 1 1215 0
 3580 0119 E8000000 		call	png_get_fixed_point.constprop.7
 3580      00
 3581              	.LVL452:
1223:fltk-1.3.4-1/png/pngrutil.c ****        xy.bluey  == PNG_FIXED_ERROR)
 3582              		.loc 1 1223 0
 3583 011e 4183FCFF 		cmpl	$-1, %r12d
1215:fltk-1.3.4-1/png/pngrutil.c **** 
 3584              		.loc 1 1215 0
 3585 0122 89442414 		movl	%eax, 20(%rsp)
1223:fltk-1.3.4-1/png/pngrutil.c ****        xy.bluey  == PNG_FIXED_ERROR)
 3586              		.loc 1 1223 0
 3587 0126 400F94C7 		sete	%dil
 3588 012a 4183FBFF 		cmpl	$-1, %r11d
 3589 012e 0F94C2   		sete	%dl
 3590 0131 09FA     		orl	%edi, %edx
 3591 0133 83F9FF   		cmpl	$-1, %ecx
 3592 0136 0F94C1   		sete	%cl
 3593 0139 09CA     		orl	%ecx, %edx
 3594 013b 4183FAFF 		cmpl	$-1, %r10d
 3595 013f 0F94C1   		sete	%cl
 3596 0142 09CA     		orl	%ecx, %edx
 3597 0144 4183F9FF 		cmpl	$-1, %r9d
 3598 0148 0F94C1   		sete	%cl
 3599 014b 09CA     		orl	%ecx, %edx
 3600 014d 4183F8FF 		cmpl	$-1, %r8d
 3601 0151 0F94C1   		sete	%cl
 3602 0154 09CA     		orl	%ecx, %edx
 3603 0156 83FEFF   		cmpl	$-1, %esi
 3604 0159 0F94C1   		sete	%cl
 3605 015c 08CA     		orb	%cl, %dl
 3606 015e 7548     		jne	.L375
 3607 0160 83F8FF   		cmpl	$-1, %eax
 3608 0163 7443     		je	.L375
1231:fltk-1.3.4-1/png/pngrutil.c ****       return;
 3609              		.loc 1 1231 0
 3610 0165 0FB78322 		movzwl	1314(%rbx), %eax
 3610      050000
 3611 016c 6685C0   		testw	%ax, %ax
 3612 016f 0F88D1FE 		js	.L364
 3612      FFFF
1234:fltk-1.3.4-1/png/pngrutil.c ****    {
 3613              		.loc 1 1234 0
 3614 0175 A810     		testb	$16, %al
 3615 0177 7441     		je	.L372
1236:fltk-1.3.4-1/png/pngrutil.c ****       png_colorspace_sync(png_ptr, info_ptr);
 3616              		.loc 1 1236 0
 3617 0179 660D0080 		orw	$-32768, %ax
1237:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "duplicate");
 3618              		.loc 1 1237 0
 3619 017d 4889EE   		movq	%rbp, %rsi
 3620 0180 4889DF   		movq	%rbx, %rdi
1236:fltk-1.3.4-1/png/pngrutil.c ****       png_colorspace_sync(png_ptr, info_ptr);
 3621              		.loc 1 1236 0
 3622 0183 66898322 		movw	%ax, 1314(%rbx)
 3622      050000
1237:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "duplicate");
 3623              		.loc 1 1237 0
 3624 018a E8000000 		call	png_colorspace_sync
 3624      00
 3625              	.LVL453:
1238:fltk-1.3.4-1/png/pngrutil.c ****       return;
 3626              		.loc 1 1238 0
 3627 018f BE000000 		movl	$.LC34, %esi
 3627      00
 3628 0194 4889DF   		movq	%rbx, %rdi
 3629 0197 E8000000 		call	png_chunk_benign_error
 3629      00
 3630              	.LVL454:
1239:fltk-1.3.4-1/png/pngrutil.c ****    }
 3631              		.loc 1 1239 0
 3632 019c E9A5FEFF 		jmp	.L364
 3632      FF
 3633              		.p2align 4,,10
 3634 01a1 0F1F8000 		.p2align 3
 3634      000000
 3635              	.L375:
1226:fltk-1.3.4-1/png/pngrutil.c ****       return;
 3636              		.loc 1 1226 0
 3637 01a8 BE000000 		movl	$.LC43, %esi
 3637      00
 3638 01ad 4889DF   		movq	%rbx, %rdi
 3639 01b0 E8000000 		call	png_chunk_benign_error
 3639      00
 3640              	.LVL455:
1227:fltk-1.3.4-1/png/pngrutil.c ****    }
 3641              		.loc 1 1227 0
 3642 01b5 E98CFEFF 		jmp	.L364
 3642      FF
 3643              	.L372:
1242:fltk-1.3.4-1/png/pngrutil.c ****    (void)png_colorspace_set_chromaticities(png_ptr, &png_ptr->colorspace, &xy,
 3644              		.loc 1 1242 0
 3645 01ba 83C810   		orl	$16, %eax
1243:fltk-1.3.4-1/png/pngrutil.c ****       1/*prefer cHRM values*/);
 3646              		.loc 1 1243 0
 3647 01bd 488DB3D8 		leaq	1240(%rbx), %rsi
 3647      040000
 3648 01c4 4889DF   		movq	%rbx, %rdi
1242:fltk-1.3.4-1/png/pngrutil.c ****    (void)png_colorspace_set_chromaticities(png_ptr, &png_ptr->colorspace, &xy,
 3649              		.loc 1 1242 0
 3650 01c7 66898322 		movw	%ax, 1314(%rbx)
 3650      050000
1243:fltk-1.3.4-1/png/pngrutil.c ****       1/*prefer cHRM values*/);
 3651              		.loc 1 1243 0
 3652 01ce B9010000 		movl	$1, %ecx
 3652      00
 3653 01d3 4889E2   		movq	%rsp, %rdx
 3654 01d6 E8000000 		call	png_colorspace_set_chromaticities
 3654      00
 3655              	.LVL456:
1245:fltk-1.3.4-1/png/pngrutil.c **** }
 3656              		.loc 1 1245 0
 3657 01db 4889EE   		movq	%rbp, %rsi
 3658 01de 4889DF   		movq	%rbx, %rdi
 3659 01e1 E8000000 		call	png_colorspace_sync
 3659      00
 3660              	.LVL457:
 3661 01e6 E95BFEFF 		jmp	.L364
 3661      FF
 3662              	.LVL458:
 3663              	.L377:
1187:fltk-1.3.4-1/png/pngrutil.c **** 
 3664              		.loc 1 1187 0
 3665 01eb BE000000 		movl	$.LC33, %esi
 3665      00
 3666              	.LVL459:
 3667 01f0 E8000000 		call	png_chunk_error
 3667      00
 3668              	.LVL460:
 3669              	.L379:
1246:fltk-1.3.4-1/png/pngrutil.c **** #endif
 3670              		.loc 1 1246 0
 3671 01f5 E8000000 		call	__stack_chk_fail
 3671      00
 3672              	.LVL461:
 3673              		.cfi_endproc
 3674              	.LFE76:
 3676              		.section	.text.unlikely.png_handle_cHRM
 3677              	.LCOLDE44:
 3678              		.section	.text.png_handle_cHRM
 3679              	.LHOTE44:
 3680              		.section	.rodata.str1.1
 3681              	.LC45:
 3682 00e3 746F6F20 		.string	"too many profiles"
 3682      6D616E79 
 3682      2070726F 
 3682      66696C65 
 3682      7300
 3683              		.section	.text.unlikely.png_handle_sRGB,"ax",@progbits
 3684              	.LCOLDB46:
 3685              		.section	.text.png_handle_sRGB,"ax",@progbits
 3686              	.LHOTB46:
 3687              		.p2align 4,,15
 3688              		.globl	png_handle_sRGB
 3690              	png_handle_sRGB:
 3691              	.LFB77:
1252:fltk-1.3.4-1/png/pngrutil.c ****    png_byte intent;
 3692              		.loc 1 1252 0
 3693              		.cfi_startproc
 3694              	.LVL462:
 3695 0000 55       		pushq	%rbp
 3696              		.cfi_def_cfa_offset 16
 3697              		.cfi_offset 6, -16
 3698 0001 53       		pushq	%rbx
 3699              		.cfi_def_cfa_offset 24
 3700              		.cfi_offset 3, -24
 3701 0002 4889FB   		movq	%rdi, %rbx
 3702 0005 4883EC18 		subq	$24, %rsp
 3703              		.cfi_def_cfa_offset 48
1252:fltk-1.3.4-1/png/pngrutil.c ****    png_byte intent;
 3704              		.loc 1 1252 0
 3705 0009 64488B04 		movq	%fs:40, %rax
 3705      25280000 
 3705      00
 3706 0012 48894424 		movq	%rax, 8(%rsp)
 3706      08
 3707 0017 31C0     		xorl	%eax, %eax
1257:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
 3708              		.loc 1 1257 0
 3709 0019 8B872C01 		movl	300(%rdi), %eax
 3709      0000
 3710 001f A801     		testb	$1, %al
 3711 0021 0F84DD00 		je	.L389
 3711      0000
1260:fltk-1.3.4-1/png/pngrutil.c ****    {
 3712              		.loc 1 1260 0
 3713 0027 A806     		testb	$6, %al
 3714 0029 7535     		jne	.L390
1267:fltk-1.3.4-1/png/pngrutil.c ****    {
 3715              		.loc 1 1267 0
 3716 002b 83FA01   		cmpl	$1, %edx
 3717 002e 7450     		je	.L384
1269:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid");
 3718              		.loc 1 1269 0
 3719 0030 89D6     		movl	%edx, %esi
 3720              	.LVL463:
 3721 0032 E8000000 		call	png_crc_finish
 3721      00
 3722              	.LVL464:
1270:fltk-1.3.4-1/png/pngrutil.c ****       return;
 3723              		.loc 1 1270 0
 3724 0037 BE000000 		movl	$.LC31, %esi
 3724      00
 3725 003c 4889DF   		movq	%rbx, %rdi
 3726 003f E8000000 		call	png_chunk_benign_error
 3726      00
 3727              	.LVL465:
 3728              	.L380:
1296:fltk-1.3.4-1/png/pngrutil.c **** #endif /* READ_sRGB */
 3729              		.loc 1 1296 0
 3730 0044 488B4424 		movq	8(%rsp), %rax
 3730      08
 3731 0049 64483304 		xorq	%fs:40, %rax
 3731      25280000 
 3731      00
 3732 0052 0F85B600 		jne	.L391
 3732      0000
 3733 0058 4883C418 		addq	$24, %rsp
 3734              		.cfi_remember_state
 3735              		.cfi_def_cfa_offset 24
 3736 005c 5B       		popq	%rbx
 3737              		.cfi_def_cfa_offset 16
 3738              	.LVL466:
 3739 005d 5D       		popq	%rbp
 3740              		.cfi_def_cfa_offset 8
 3741 005e C3       		ret
 3742              	.LVL467:
 3743 005f 90       		.p2align 4,,10
 3744              		.p2align 3
 3745              	.L390:
 3746              		.cfi_restore_state
1262:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
 3747              		.loc 1 1262 0
 3748 0060 89D6     		movl	%edx, %esi
 3749              	.LVL468:
 3750 0062 E8000000 		call	png_crc_finish
 3750      00
 3751              	.LVL469:
1263:fltk-1.3.4-1/png/pngrutil.c ****       return;
 3752              		.loc 1 1263 0
 3753 0067 BE000000 		movl	$.LC30, %esi
 3753      00
 3754 006c 4889DF   		movq	%rbx, %rdi
 3755 006f E8000000 		call	png_chunk_benign_error
 3755      00
 3756              	.LVL470:
1264:fltk-1.3.4-1/png/pngrutil.c ****    }
 3757              		.loc 1 1264 0
 3758 0074 EBCE     		jmp	.L380
 3759              	.LVL471:
 3760 0076 662E0F1F 		.p2align 4,,10
 3760      84000000 
 3760      0000
 3761              		.p2align 3
 3762              	.L384:
 3763 0080 4889F5   		movq	%rsi, %rbp
1274:fltk-1.3.4-1/png/pngrutil.c **** 
 3764              		.loc 1 1274 0
 3765 0083 488D7424 		leaq	7(%rsp), %rsi
 3765      07
 3766              	.LVL472:
 3767 0088 BA010000 		movl	$1, %edx
 3767      00
 3768              	.LVL473:
 3769 008d E8000000 		call	png_crc_read
 3769      00
 3770              	.LVL474:
1276:fltk-1.3.4-1/png/pngrutil.c ****       return;
 3771              		.loc 1 1276 0
 3772 0092 31F6     		xorl	%esi, %esi
 3773 0094 4889DF   		movq	%rbx, %rdi
 3774 0097 E8000000 		call	png_crc_finish
 3774      00
 3775              	.LVL475:
 3776 009c 85C0     		testl	%eax, %eax
 3777 009e 75A4     		jne	.L380
1280:fltk-1.3.4-1/png/pngrutil.c ****       return;
 3778              		.loc 1 1280 0
 3779 00a0 0FB78322 		movzwl	1314(%rbx), %eax
 3779      050000
 3780 00a7 6685C0   		testw	%ax, %ax
 3781 00aa 7898     		js	.L380
1286:fltk-1.3.4-1/png/pngrutil.c ****    {
 3782              		.loc 1 1286 0
 3783 00ac A804     		testb	$4, %al
 3784 00ae 7430     		je	.L385
1288:fltk-1.3.4-1/png/pngrutil.c ****       png_colorspace_sync(png_ptr, info_ptr);
 3785              		.loc 1 1288 0
 3786 00b0 660D0080 		orw	$-32768, %ax
1289:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "too many profiles");
 3787              		.loc 1 1289 0
 3788 00b4 4889EE   		movq	%rbp, %rsi
 3789 00b7 4889DF   		movq	%rbx, %rdi
1288:fltk-1.3.4-1/png/pngrutil.c ****       png_colorspace_sync(png_ptr, info_ptr);
 3790              		.loc 1 1288 0
 3791 00ba 66898322 		movw	%ax, 1314(%rbx)
 3791      050000
1289:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "too many profiles");
 3792              		.loc 1 1289 0
 3793 00c1 E8000000 		call	png_colorspace_sync
 3793      00
 3794              	.LVL476:
1290:fltk-1.3.4-1/png/pngrutil.c ****       return;
 3795              		.loc 1 1290 0
 3796 00c6 BE000000 		movl	$.LC45, %esi
 3796      00
 3797 00cb 4889DF   		movq	%rbx, %rdi
 3798 00ce E8000000 		call	png_chunk_benign_error
 3798      00
 3799              	.LVL477:
1291:fltk-1.3.4-1/png/pngrutil.c ****    }
 3800              		.loc 1 1291 0
 3801 00d3 E96CFFFF 		jmp	.L380
 3801      FF
 3802 00d8 0F1F8400 		.p2align 4,,10
 3802      00000000 
 3803              		.p2align 3
 3804              	.L385:
1294:fltk-1.3.4-1/png/pngrutil.c ****    png_colorspace_sync(png_ptr, info_ptr);
 3805              		.loc 1 1294 0
 3806 00e0 0FB65424 		movzbl	7(%rsp), %edx
 3806      07
 3807 00e5 488DB3D8 		leaq	1240(%rbx), %rsi
 3807      040000
 3808 00ec 4889DF   		movq	%rbx, %rdi
 3809 00ef E8000000 		call	png_colorspace_set_sRGB
 3809      00
 3810              	.LVL478:
1295:fltk-1.3.4-1/png/pngrutil.c **** }
 3811              		.loc 1 1295 0
 3812 00f4 4889EE   		movq	%rbp, %rsi
 3813 00f7 4889DF   		movq	%rbx, %rdi
 3814 00fa E8000000 		call	png_colorspace_sync
 3814      00
 3815              	.LVL479:
 3816 00ff E940FFFF 		jmp	.L380
 3816      FF
 3817              	.LVL480:
 3818              	.L389:
1258:fltk-1.3.4-1/png/pngrutil.c **** 
 3819              		.loc 1 1258 0
 3820 0104 BE000000 		movl	$.LC33, %esi
 3820      00
 3821              	.LVL481:
 3822 0109 E8000000 		call	png_chunk_error
 3822      00
 3823              	.LVL482:
 3824              	.L391:
1296:fltk-1.3.4-1/png/pngrutil.c **** #endif /* READ_sRGB */
 3825              		.loc 1 1296 0
 3826 010e E8000000 		call	__stack_chk_fail
 3826      00
 3827              	.LVL483:
 3828              		.cfi_endproc
 3829              	.LFE77:
 3831              		.section	.text.unlikely.png_handle_sRGB
 3832              	.LCOLDE46:
 3833              		.section	.text.png_handle_sRGB
 3834              	.LHOTE46:
 3835              		.section	.rodata.str1.1
 3836              	.LC47:
 3837 00f5 7472756E 		.string	"truncated"
 3837      63617465 
 3837      6400
 3838              	.LC48:
 3839 00ff 6F757420 		.string	"out of memory"
 3839      6F66206D 
 3839      656D6F72 
 3839      7900
 3840              	.LC49:
 3841 010d 62616420 		.string	"bad keyword"
 3841      6B657977 
 3841      6F726400 
 3842              	.LC50:
 3843 0119 62616420 		.string	"bad compression method"
 3843      636F6D70 
 3843      72657373 
 3843      696F6E20 
 3843      6D657468 
 3844              	.LC51:
 3845 0130 746F6F20 		.string	"too short"
 3845      73686F72 
 3845      7400
 3846              		.section	.text.unlikely.png_handle_iCCP,"ax",@progbits
 3847              	.LCOLDB52:
 3848              		.section	.text.png_handle_iCCP,"ax",@progbits
 3849              	.LHOTB52:
 3850              		.p2align 4,,15
 3851              		.globl	png_handle_iCCP
 3853              	png_handle_iCCP:
 3854              	.LFB78:
1303:fltk-1.3.4-1/png/pngrutil.c ****    png_const_charp errmsg = NULL; /* error message output, or no error */
 3855              		.loc 1 1303 0
 3856              		.cfi_startproc
 3857              	.LVL484:
 3858 0000 4157     		pushq	%r15
 3859              		.cfi_def_cfa_offset 16
 3860              		.cfi_offset 15, -16
 3861 0002 4156     		pushq	%r14
 3862              		.cfi_def_cfa_offset 24
 3863              		.cfi_offset 14, -24
 3864 0004 4155     		pushq	%r13
 3865              		.cfi_def_cfa_offset 32
 3866              		.cfi_offset 13, -32
 3867 0006 4154     		pushq	%r12
 3868              		.cfi_def_cfa_offset 40
 3869              		.cfi_offset 12, -40
 3870 0008 55       		pushq	%rbp
 3871              		.cfi_def_cfa_offset 48
 3872              		.cfi_offset 6, -48
 3873 0009 53       		pushq	%rbx
 3874              		.cfi_def_cfa_offset 56
 3875              		.cfi_offset 3, -56
 3876 000a 4889FB   		movq	%rdi, %rbx
 3877 000d 4881EC48 		subq	$1352, %rsp
 3877      050000
 3878              		.cfi_def_cfa_offset 1408
1303:fltk-1.3.4-1/png/pngrutil.c ****    png_const_charp errmsg = NULL; /* error message output, or no error */
 3879              		.loc 1 1303 0
 3880 0014 64488B04 		movq	%fs:40, %rax
 3880      25280000 
 3880      00
 3881 001d 48898424 		movq	%rax, 1336(%rsp)
 3881      38050000 
 3882 0025 31C0     		xorl	%eax, %eax
 3883              	.LVL485:
1309:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
 3884              		.loc 1 1309 0
 3885 0027 8B872C01 		movl	300(%rdi), %eax
 3885      0000
1303:fltk-1.3.4-1/png/pngrutil.c ****    png_const_charp errmsg = NULL; /* error message output, or no error */
 3886              		.loc 1 1303 0
 3887 002d 8954242C 		movl	%edx, 44(%rsp)
1309:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
 3888              		.loc 1 1309 0
 3889 0031 A801     		testb	$1, %al
 3890 0033 0F84E803 		je	.L461
 3890      0000
1312:fltk-1.3.4-1/png/pngrutil.c ****    {
 3891              		.loc 1 1312 0
 3892 0039 A806     		testb	$6, %al
 3893 003b 0F851F01 		jne	.L462
 3893      0000
1327:fltk-1.3.4-1/png/pngrutil.c ****    {
 3894              		.loc 1 1327 0
 3895 0041 448B6C24 		movl	44(%rsp), %r13d
 3895      2C
 3896 0046 4183FD08 		cmpl	$8, %r13d
 3897 004a 0F865001 		jbe	.L463
 3897      0000
1335:fltk-1.3.4-1/png/pngrutil.c ****    {
 3898              		.loc 1 1335 0
 3899 0050 0FB78722 		movzwl	1314(%rdi), %eax
 3899      050000
 3900 0057 6685C0   		testw	%ax, %ax
 3901 005a 0F887801 		js	.L464
 3901      0000
1344:fltk-1.3.4-1/png/pngrutil.c ****    {
 3902              		.loc 1 1344 0
 3903 0060 A804     		testb	$4, %al
 3904 0062 4889F5   		movq	%rsi, %rbp
 3905 0065 7461     		je	.L465
 3906 0067 4489EE   		movl	%r13d, %esi
 3907              	.LVL486:
1559:fltk-1.3.4-1/png/pngrutil.c **** 
 3908              		.loc 1 1559 0
 3909 006a 41BF0000 		movl	$.LC45, %r15d
 3909      0000
 3910              	.LVL487:
 3911              	.L398:
1563:fltk-1.3.4-1/png/pngrutil.c **** 
 3912              		.loc 1 1563 0
 3913 0070 4889DF   		movq	%rbx, %rdi
 3914 0073 E8000000 		call	png_crc_finish
 3914      00
 3915              	.LVL488:
 3916              	.L423:
1565:fltk-1.3.4-1/png/pngrutil.c ****    png_colorspace_sync(png_ptr, info_ptr);
 3917              		.loc 1 1565 0
 3918 0078 66818B22 		orw	$-32768, 1314(%rbx)
 3918      05000000 
 3918      80
1566:fltk-1.3.4-1/png/pngrutil.c ****    if (errmsg != NULL) /* else already output */
 3919              		.loc 1 1566 0
 3920 0081 4889EE   		movq	%rbp, %rsi
 3921 0084 4889DF   		movq	%rbx, %rdi
 3922 0087 E8000000 		call	png_colorspace_sync
 3922      00
 3923              	.LVL489:
1567:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, errmsg);
 3924              		.loc 1 1567 0
 3925 008c 4D85FF   		testq	%r15, %r15
 3926 008f 740B     		je	.L392
1568:fltk-1.3.4-1/png/pngrutil.c **** }
 3927              		.loc 1 1568 0
 3928 0091 4C89FE   		movq	%r15, %rsi
 3929 0094 4889DF   		movq	%rbx, %rdi
 3930 0097 E8000000 		call	png_chunk_benign_error
 3930      00
 3931              	.LVL490:
 3932              	.L392:
1569:fltk-1.3.4-1/png/pngrutil.c **** #endif /* READ_iCCP */
 3933              		.loc 1 1569 0
 3934 009c 488B8424 		movq	1336(%rsp), %rax
 3934      38050000 
 3935 00a4 64483304 		xorq	%fs:40, %rax
 3935      25280000 
 3935      00
 3936 00ad 0F857803 		jne	.L466
 3936      0000
 3937 00b3 4881C448 		addq	$1352, %rsp
 3937      050000
 3938              		.cfi_remember_state
 3939              		.cfi_def_cfa_offset 56
 3940 00ba 5B       		popq	%rbx
 3941              		.cfi_def_cfa_offset 48
 3942              	.LVL491:
 3943 00bb 5D       		popq	%rbp
 3944              		.cfi_def_cfa_offset 40
 3945 00bc 415C     		popq	%r12
 3946              		.cfi_def_cfa_offset 32
 3947 00be 415D     		popq	%r13
 3948              		.cfi_def_cfa_offset 24
 3949 00c0 415E     		popq	%r14
 3950              		.cfi_def_cfa_offset 16
 3951 00c2 415F     		popq	%r15
 3952              		.cfi_def_cfa_offset 8
 3953 00c4 C3       		ret
 3954              	.LVL492:
 3955              		.p2align 4,,10
 3956 00c5 0F1F00   		.p2align 3
 3957              	.L465:
 3958              		.cfi_restore_state
 3959              	.LBB136:
1353:fltk-1.3.4-1/png/pngrutil.c ****          read_length = (uInt)length;
 3960              		.loc 1 1353 0
 3961 00c8 4183FD50 		cmpl	$80, %r13d
1356:fltk-1.3.4-1/png/pngrutil.c ****       length -= read_length;
 3962              		.loc 1 1356 0
 3963 00cc 4C8D5424 		leaq	64(%rsp), %r10
 3963      40
1353:fltk-1.3.4-1/png/pngrutil.c ****          read_length = (uInt)length;
 3964              		.loc 1 1353 0
 3965 00d1 0F86A900 		jbe	.L467
 3965      0000
1356:fltk-1.3.4-1/png/pngrutil.c ****       length -= read_length;
 3966              		.loc 1 1356 0
 3967 00d7 4C89D6   		movq	%r10, %rsi
 3968              	.LVL493:
 3969 00da BA510000 		movl	$81, %edx
 3969      00
 3970              	.LVL494:
 3971 00df 4C895424 		movq	%r10, 8(%rsp)
 3971      08
 3972 00e4 E8000000 		call	png_crc_read
 3972      00
 3973              	.LVL495:
1357:fltk-1.3.4-1/png/pngrutil.c **** 
 3974              		.loc 1 1357 0
 3975 00e9 836C242C 		subl	$81, 44(%rsp)
 3975      51
 3976              	.LVL496:
 3977 00ee 4C8B5424 		movq	8(%rsp), %r10
 3977      08
1352:fltk-1.3.4-1/png/pngrutil.c ****       if (read_length > length)
 3978              		.loc 1 1352 0
 3979 00f3 41BD5100 		movl	$81, %r13d
 3979      0000
 3980              	.LVL497:
 3981              	.L424:
1360:fltk-1.3.4-1/png/pngrutil.c ****          keyword[keyword_length] != 0)
 3982              		.loc 1 1360 0
 3983 00f9 807C2440 		cmpb	$0, 64(%rsp)
 3983      00
 3984 00fe 0F84E100 		je	.L400
 3984      0000
 3985 0104 498D4201 		leaq	1(%r10), %rax
 3986 0108 4531F6   		xorl	%r14d, %r14d
 3987 010b EB06     		jmp	.L402
 3988              	.LVL498:
 3989 010d 0F1F00   		.p2align 4,,10
 3990              		.p2align 3
 3991              	.L429:
 3992 0110 4589E6   		movl	%r12d, %r14d
 3993              	.LVL499:
 3994              	.L402:
1362:fltk-1.3.4-1/png/pngrutil.c **** 
 3995              		.loc 1 1362 0
 3996 0113 458D6601 		leal	1(%r14), %r12d
 3997              	.LVL500:
1360:fltk-1.3.4-1/png/pngrutil.c ****          keyword[keyword_length] != 0)
 3998              		.loc 1 1360 0
 3999 0117 4183FC4F 		cmpl	$79, %r12d
 4000 011b 0F879F00 		ja	.L401
 4000      0000
 4001 0121 4539EC   		cmpl	%r13d, %r12d
 4002 0124 0F839600 		jnb	.L401
 4002      0000
 4003 012a 4883C001 		addq	$1, %rax
1360:fltk-1.3.4-1/png/pngrutil.c ****          keyword[keyword_length] != 0)
 4004              		.loc 1 1360 0 is_stmt 0 discriminator 1
 4005 012e 8078FF00 		cmpb	$0, -1(%rax)
 4006 0132 75DC     		jne	.L429
 4007              	.L403:
1370:fltk-1.3.4-1/png/pngrutil.c ****             keyword[keyword_length+1] == PNG_COMPRESSION_TYPE_BASE)
 4008              		.loc 1 1370 0 is_stmt 1
 4009 0134 458D5E02 		leal	2(%r14), %r11d
1551:fltk-1.3.4-1/png/pngrutil.c ****       }
 4010              		.loc 1 1551 0
 4011 0138 41BF0000 		movl	$.LC50, %r15d
 4011      0000
1370:fltk-1.3.4-1/png/pngrutil.c ****             keyword[keyword_length+1] == PNG_COMPRESSION_TYPE_BASE)
 4012              		.loc 1 1370 0
 4013 013e 4539EB   		cmpl	%r13d, %r11d
 4014 0141 730D     		jnb	.L404
1370:fltk-1.3.4-1/png/pngrutil.c ****             keyword[keyword_length+1] == PNG_COMPRESSION_TYPE_BASE)
 4015              		.loc 1 1370 0 is_stmt 0 discriminator 1
 4016 0143 42807C1C 		cmpb	$0, 64(%rsp,%r11)
 4016      4000
 4017 0149 0F84A100 		je	.L468
 4017      0000
 4018              	.LVL501:
 4019 014f 90       		.p2align 4,,10
 4020              		.p2align 3
 4021              	.L404:
 4022 0150 8B74242C 		movl	44(%rsp), %esi
 4023 0154 E917FFFF 		jmp	.L398
 4023      FF
 4024              	.LVL502:
 4025 0159 0F1F8000 		.p2align 4,,10
 4025      000000
 4026              		.p2align 3
 4027              	.L462:
 4028              	.LBE136:
1314:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
 4029              		.loc 1 1314 0 is_stmt 1
 4030 0160 8B74242C 		movl	44(%rsp), %esi
 4031              	.LVL503:
 4032 0164 E8000000 		call	png_crc_finish
 4032      00
 4033              	.LVL504:
1315:fltk-1.3.4-1/png/pngrutil.c ****       return;
 4034              		.loc 1 1315 0
 4035 0169 BE000000 		movl	$.LC30, %esi
 4035      00
 4036 016e 4889DF   		movq	%rbx, %rdi
 4037 0171 E8000000 		call	png_chunk_benign_error
 4037      00
 4038              	.LVL505:
1316:fltk-1.3.4-1/png/pngrutil.c ****    }
 4039              		.loc 1 1316 0
 4040 0176 E921FFFF 		jmp	.L392
 4040      FF
 4041              	.LVL506:
 4042 017b 0F1F4400 		.p2align 4,,10
 4042      00
 4043              		.p2align 3
 4044              	.L467:
 4045              	.LBB188:
1356:fltk-1.3.4-1/png/pngrutil.c ****       length -= read_length;
 4046              		.loc 1 1356 0
 4047 0180 4C89D6   		movq	%r10, %rsi
 4048              	.LVL507:
 4049 0183 4489EA   		movl	%r13d, %edx
 4050              	.LVL508:
 4051 0186 4C895424 		movq	%r10, 8(%rsp)
 4051      08
 4052 018b E8000000 		call	png_crc_read
 4052      00
 4053              	.LVL509:
1357:fltk-1.3.4-1/png/pngrutil.c **** 
 4054              		.loc 1 1357 0
 4055 0190 44296C24 		subl	%r13d, 44(%rsp)
 4055      2C
 4056 0195 4C8B5424 		movq	8(%rsp), %r10
 4056      08
 4057              	.LVL510:
 4058 019a E95AFFFF 		jmp	.L424
 4058      FF
 4059              	.LVL511:
 4060 019f 90       		.p2align 4,,10
 4061              		.p2align 3
 4062              	.L463:
 4063              	.LBE188:
1329:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "too short");
 4064              		.loc 1 1329 0
 4065 01a0 4489EE   		movl	%r13d, %esi
 4066              	.LVL512:
 4067 01a3 E8000000 		call	png_crc_finish
 4067      00
 4068              	.LVL513:
1330:fltk-1.3.4-1/png/pngrutil.c ****       return;
 4069              		.loc 1 1330 0
 4070 01a8 BE000000 		movl	$.LC51, %esi
 4070      00
 4071 01ad 4889DF   		movq	%rbx, %rdi
 4072 01b0 E8000000 		call	png_chunk_benign_error
 4072      00
 4073              	.LVL514:
1331:fltk-1.3.4-1/png/pngrutil.c ****    }
 4074              		.loc 1 1331 0
 4075 01b5 E9E2FEFF 		jmp	.L392
 4075      FF
 4076              	.LVL515:
 4077 01ba 660F1F44 		.p2align 4,,10
 4077      0000
 4078              		.p2align 3
 4079              	.L401:
 4080              	.LBB189:
1365:fltk-1.3.4-1/png/pngrutil.c ****       {
 4081              		.loc 1 1365 0
 4082 01c0 4183FE4E 		cmpl	$78, %r14d
1555:fltk-1.3.4-1/png/pngrutil.c ****    }
 4083              		.loc 1 1555 0
 4084 01c4 41BF0000 		movl	$.LC49, %r15d
 4084      0000
1365:fltk-1.3.4-1/png/pngrutil.c ****       {
 4085              		.loc 1 1365 0
 4086 01ca 7784     		ja	.L404
 4087 01cc E963FFFF 		jmp	.L403
 4087      FF
 4088              	.LVL516:
 4089              		.p2align 4,,10
 4090 01d1 0F1F8000 		.p2align 3
 4090      000000
 4091              	.L464:
 4092              	.LBE189:
1337:fltk-1.3.4-1/png/pngrutil.c ****       return;
 4093              		.loc 1 1337 0
 4094 01d8 4489EE   		movl	%r13d, %esi
 4095              	.LVL517:
 4096 01db E8000000 		call	png_crc_finish
 4096      00
 4097              	.LVL518:
1338:fltk-1.3.4-1/png/pngrutil.c ****    }
 4098              		.loc 1 1338 0
 4099 01e0 E9B7FEFF 		jmp	.L392
 4099      FF
 4100              	.LVL519:
 4101              	.L400:
 4102              	.LBB190:
1555:fltk-1.3.4-1/png/pngrutil.c ****    }
 4103              		.loc 1 1555 0
 4104 01e5 41BF0000 		movl	$.LC49, %r15d
 4104      0000
 4105 01eb E960FFFF 		jmp	.L404
 4105      FF
 4106              	.LVL520:
 4107              	.L468:
1375:fltk-1.3.4-1/png/pngrutil.c ****             {
 4108              		.loc 1 1375 0
 4109 01f0 BE504343 		movl	$1766015824, %esi
 4109      69
 4110 01f5 4889DF   		movq	%rbx, %rdi
 4111 01f8 4C895C24 		movq	%r11, 16(%rsp)
 4111      10
 4112 01fd 4C895424 		movq	%r10, 8(%rsp)
 4112      08
 4113              	.LVL521:
 4114 0202 E8000000 		call	png_inflate_claim
 4114      00
 4115              	.LVL522:
 4116 0207 85C0     		testl	%eax, %eax
 4117 0209 7565     		jne	.L405
 4118              	.LBB137:
1381:fltk-1.3.4-1/png/pngrutil.c ****                png_ptr->zstream.avail_in = read_length;
 4119              		.loc 1 1381 0
 4120 020b 4C8B5424 		movq	8(%rsp), %r10
 4120      08
 4121 0210 418D4603 		leal	3(%r14), %eax
 4122 0214 4183ED02 		subl	$2, %r13d
 4123              	.LVL523:
1382:fltk-1.3.4-1/png/pngrutil.c ****                (void)png_inflate_read(png_ptr, local_buffer,
 4124              		.loc 1 1382 0
 4125 0218 4529E5   		subl	%r12d, %r13d
 4126              	.LVL524:
1379:fltk-1.3.4-1/png/pngrutil.c **** 
 4127              		.loc 1 1379 0
 4128 021b 48C74424 		movq	$132, 56(%rsp)
 4128      38840000 
 4128      00
1382:fltk-1.3.4-1/png/pngrutil.c ****                (void)png_inflate_read(png_ptr, local_buffer,
 4129              		.loc 1 1382 0
 4130 0224 4489AB48 		movl	%r13d, 328(%rbx)
 4130      010000
 4131              	.LVL525:
1381:fltk-1.3.4-1/png/pngrutil.c ****                png_ptr->zstream.avail_in = read_length;
 4132              		.loc 1 1381 0
 4133 022b 4C01D0   		addq	%r10, %rax
 4134 022e 48898340 		movq	%rax, 320(%rbx)
 4134      010000
 4135              	.LBB138:
 4136              	.LBB139:
 732:fltk-1.3.4-1/png/pngrutil.c ****    {
 4137              		.loc 1 732 0
 4138 0235 8B831802 		movl	536(%rbx), %eax
 4138      0000
 4139 023b 39833801 		cmpl	%eax, 312(%rbx)
 4139      0000
 4140 0241 7439     		je	.L469
 784:fltk-1.3.4-1/png/pngrutil.c ****       return Z_STREAM_ERROR;
 4141              		.loc 1 784 0
 4142 0243 48C78370 		movq	$.LC10, 368(%rbx)
 4142      01000000 
 4142      000000
 4143              	.LVL526:
 4144 024e 41BF0000 		movl	$.LC10, %r15d
 4144      0000
 4145              	.LVL527:
 4146              	.L409:
 4147              	.LBE139:
 4148              	.LBE138:
 4149              	.LBE137:
 4150              	.LBE190:
1305:fltk-1.3.4-1/png/pngrutil.c **** 
 4151              		.loc 1 1305 0
 4152 0254 31C0     		xorl	%eax, %eax
 4153              	.LVL528:
 4154              	.L411:
1562:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
 4155              		.loc 1 1562 0 discriminator 4
 4156 0256 85C0     		testl	%eax, %eax
 4157              	.LBB191:
 4158              	.LBB181:
1543:fltk-1.3.4-1/png/pngrutil.c ****             }
 4159              		.loc 1 1543 0 discriminator 4
 4160 0258 C7833801 		movl	$0, 312(%rbx)
 4160      00000000 
 4160      0000
 4161              	.LBE181:
 4162              	.LBE191:
1562:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
 4163              		.loc 1 1562 0 discriminator 4
 4164 0262 0F8510FE 		jne	.L423
 4164      FFFF
 4165 0268 E9E3FEFF 		jmp	.L404
 4165      FF
 4166              	.LVL529:
 4167 026d 0F1F00   		.p2align 4,,10
 4168              		.p2align 3
 4169              	.L405:
 4170              	.LBB192:
1547:fltk-1.3.4-1/png/pngrutil.c ****          }
 4171              		.loc 1 1547 0
 4172 0270 4C8BBB70 		movq	368(%rbx), %r15
 4172      010000
 4173              	.LVL530:
 4174 0277 E9D4FEFF 		jmp	.L404
 4174      FF
 4175              	.LVL531:
 4176              	.L469:
 4177              	.LBB182:
 4178              	.LBB143:
 4179              	.LBB142:
 4180              	.LBB140:
 737:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.avail_out = 0; /* set in the loop */
 4181              		.loc 1 737 0
 4182 027c 4C8DB424 		leaq	160(%rsp), %r14
 4182      A0000000 
 4183              	.LVL532:
 4184              	.LBE140:
 4185 0284 488D4C24 		leaq	56(%rsp), %rcx
 4185      38
 4186              	.LVL533:
 4187 0289 488D5424 		leaq	44(%rsp), %rdx
 4187      2C
 4188              	.LVL534:
 4189 028e 488DB424 		leaq	304(%rsp), %rsi
 4189      30010000 
 4190              	.LVL535:
 4191 0296 4531C0   		xorl	%r8d, %r8d
 4192              	.LBB141:
 738:fltk-1.3.4-1/png/pngrutil.c **** 
 4193              		.loc 1 738 0
 4194 0299 C7836001 		movl	$0, 352(%rbx)
 4194      00000000 
 4194      0000
 737:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.avail_out = 0; /* set in the loop */
 4195              		.loc 1 737 0
 4196 02a3 4C89B358 		movq	%r14, 344(%rbx)
 4196      010000
 4197              	.LBE141:
 4198 02aa 4889DF   		movq	%rbx, %rdi
 4199 02ad E8000000 		call	png_inflate_read.part.2.constprop.8
 4199      00
 4200              	.LVL536:
 4201              	.LBE142:
 4202              	.LBE143:
1387:fltk-1.3.4-1/png/pngrutil.c ****                {
 4203              		.loc 1 1387 0
 4204 02b2 48837C24 		cmpq	$0, 56(%rsp)
 4204      3800
 4205 02b8 4C8B5424 		movq	8(%rsp), %r10
 4205      08
 4206 02bd 4C8B5C24 		movq	16(%rsp), %r11
 4206      10
 4207 02c2 0F854D01 		jne	.L456
 4207      0000
 4208              	.LBB144:
1391:fltk-1.3.4-1/png/pngrutil.c ****                      png_get_uint_32(profile_header);
 4209              		.loc 1 1391 0
 4210 02c8 0FB68424 		movzbl	160(%rsp), %eax
 4210      A0000000 
 4211 02d0 440FB6A4 		movzbl	163(%rsp), %r12d
 4211      24A30000 
 4211      00
 4212              	.LVL537:
1394:fltk-1.3.4-1/png/pngrutil.c ****                      keyword, profile_length) != 0)
 4213              		.loc 1 1394 0
 4214 02d9 4C8DBBD8 		leaq	1240(%rbx), %r15
 4214      040000
 4215 02e0 4889DF   		movq	%rbx, %rdi
 4216 02e3 4C895C24 		movq	%r11, 16(%rsp)
 4216      10
 4217 02e8 4C895424 		movq	%r10, 8(%rsp)
 4217      08
 4218 02ed 4C89FE   		movq	%r15, %rsi
1391:fltk-1.3.4-1/png/pngrutil.c ****                      png_get_uint_32(profile_header);
 4219              		.loc 1 1391 0
 4220 02f0 C1E018   		sall	$24, %eax
 4221 02f3 89C2     		movl	%eax, %edx
 4222 02f5 0FB68424 		movzbl	161(%rsp), %eax
 4222      A1000000 
 4223 02fd C1E010   		sall	$16, %eax
 4224 0300 01D0     		addl	%edx, %eax
 4225 0302 0FB69424 		movzbl	162(%rsp), %edx
 4225      A2000000 
 4226 030a 4401E0   		addl	%r12d, %eax
 4227 030d C1E208   		sall	$8, %edx
 4228 0310 448D2410 		leal	(%rax,%rdx), %r12d
 4229              	.LVL538:
1394:fltk-1.3.4-1/png/pngrutil.c ****                      keyword, profile_length) != 0)
 4230              		.loc 1 1394 0
 4231 0314 4C89D2   		movq	%r10, %rdx
 4232 0317 4489E1   		movl	%r12d, %ecx
 4233 031a E8000000 		call	png_icc_check_length
 4233      00
 4234              	.LVL539:
 4235 031f 85C0     		testl	%eax, %eax
 4236 0321 4C8B5424 		movq	8(%rsp), %r10
 4236      08
 4237 0326 4C8B5C24 		movq	16(%rsp), %r11
 4237      10
 4238 032b 750A     		jne	.L410
 4239              	.L412:
 4240              	.LBE144:
 4241              	.LBE182:
 4242              	.LBE192:
1305:fltk-1.3.4-1/png/pngrutil.c **** 
 4243              		.loc 1 1305 0
 4244 032d 31C0     		xorl	%eax, %eax
1304:fltk-1.3.4-1/png/pngrutil.c ****    int finished = 0; /* crc checked */
 4245              		.loc 1 1304 0
 4246 032f 4531FF   		xorl	%r15d, %r15d
 4247 0332 E91FFFFF 		jmp	.L411
 4247      FF
 4248              	.L410:
 4249              	.LBB193:
 4250              	.LBB183:
 4251              	.LBB176:
1400:fltk-1.3.4-1/png/pngrutil.c ****                         keyword, profile_length, profile_header,
 4252              		.loc 1 1400 0
 4253 0337 440FB68B 		movzbl	631(%rbx), %r9d
 4253      77020000 
 4254 033f 4C89D2   		movq	%r10, %rdx
 4255 0342 4D89F0   		movq	%r14, %r8
 4256 0345 4489E1   		movl	%r12d, %ecx
 4257 0348 4C89FE   		movq	%r15, %rsi
 4258 034b 4889DF   		movq	%rbx, %rdi
 4259 034e 4C895C24 		movq	%r11, 16(%rsp)
 4259      10
 4260 0353 4C895424 		movq	%r10, 8(%rsp)
 4260      08
 4261 0358 E8000000 		call	png_icc_check_header
 4261      00
 4262              	.LVL540:
 4263 035d 85C0     		testl	%eax, %eax
 4264 035f 4C8B5424 		movq	8(%rsp), %r10
 4264      08
 4265 0364 4C8B5C24 		movq	16(%rsp), %r11
 4265      10
 4266 0369 74C2     		je	.L412
 4267              	.LVL541:
 4268              	.LBB145:
1409:fltk-1.3.4-1/png/pngrutil.c ****                            profile_header+128);
 4269              		.loc 1 1409 0
 4270 036b 0FB68424 		movzbl	288(%rsp), %eax
 4270      20010000 
1411:fltk-1.3.4-1/png/pngrutil.c ****                            profile_length, 2/*silent*/);
 4271              		.loc 1 1411 0
 4272 0373 4889DF   		movq	%rbx, %rdi
 4273 0376 4C895C24 		movq	%r11, 32(%rsp)
 4273      20
 4274 037b 4C895424 		movq	%r10, 24(%rsp)
 4274      18
1409:fltk-1.3.4-1/png/pngrutil.c ****                            profile_header+128);
 4275              		.loc 1 1409 0
 4276 0380 C1E018   		sall	$24, %eax
 4277 0383 89C2     		movl	%eax, %edx
 4278 0385 0FB68424 		movzbl	289(%rsp), %eax
 4278      21010000 
 4279 038d C1E010   		sall	$16, %eax
 4280 0390 01D0     		addl	%edx, %eax
 4281 0392 0FB69424 		movzbl	291(%rsp), %edx
 4281      23010000 
 4282 039a 01D0     		addl	%edx, %eax
 4283 039c 0FB69424 		movzbl	290(%rsp), %edx
 4283      22010000 
 4284 03a4 C1E208   		sall	$8, %edx
 4285 03a7 01D0     		addl	%edx, %eax
1411:fltk-1.3.4-1/png/pngrutil.c ****                            profile_length, 2/*silent*/);
 4286              		.loc 1 1411 0
 4287 03a9 BA020000 		movl	$2, %edx
 4287      00
1409:fltk-1.3.4-1/png/pngrutil.c ****                            profile_header+128);
 4288              		.loc 1 1409 0
 4289 03ae 89442408 		movl	%eax, 8(%rsp)
 4290              	.LVL542:
1411:fltk-1.3.4-1/png/pngrutil.c ****                            profile_length, 2/*silent*/);
 4291              		.loc 1 1411 0
 4292 03b2 4489E0   		movl	%r12d, %eax
 4293 03b5 4889C6   		movq	%rax, %rsi
 4294 03b8 48894424 		movq	%rax, 16(%rsp)
 4294      10
 4295 03bd E8000000 		call	png_read_buffer
 4295      00
 4296              	.LVL543:
1414:fltk-1.3.4-1/png/pngrutil.c ****                         {
 4297              		.loc 1 1414 0
 4298 03c2 4885C0   		testq	%rax, %rax
1411:fltk-1.3.4-1/png/pngrutil.c ****                            profile_length, 2/*silent*/);
 4299              		.loc 1 1411 0
 4300 03c5 4989C5   		movq	%rax, %r13
 4301              	.LVL544:
1414:fltk-1.3.4-1/png/pngrutil.c ****                         {
 4302              		.loc 1 1414 0
 4303 03c8 0F843901 		je	.L433
 4303      0000
 4304              	.LVL545:
 4305              	.LBB146:
 4306              	.LBB147:
 4307              		.loc 2 53 0
 4308 03ce 4889C7   		movq	%rax, %rdi
 4309 03d1 4C89F6   		movq	%r14, %rsi
 4310 03d4 B9210000 		movl	$33, %ecx
 4310      00
 4311 03d9 F3A5     		rep movsl
 4312              	.LVL546:
 4313              	.LBE147:
 4314              	.LBE146:
1419:fltk-1.3.4-1/png/pngrutil.c **** 
 4315              		.loc 1 1419 0
 4316 03db 446B7424 		imull	$12, 8(%rsp), %r14d
 4316      080C
 4317              	.LBB148:
 4318              	.LBB149:
 732:fltk-1.3.4-1/png/pngrutil.c ****    {
 4319              		.loc 1 732 0
 4320 03e1 4C8B5424 		movq	24(%rsp), %r10
 4320      18
 4321 03e6 4C8B5C24 		movq	32(%rsp), %r11
 4321      20
 4322 03eb 8B831802 		movl	536(%rbx), %eax
 4322      0000
 4323              	.LVL547:
 4324 03f1 39833801 		cmpl	%eax, 312(%rbx)
 4324      0000
 4325              	.LBE149:
 4326              	.LBE148:
1419:fltk-1.3.4-1/png/pngrutil.c **** 
 4327              		.loc 1 1419 0
 4328 03f7 4C897424 		movq	%r14, 56(%rsp)
 4328      38
 4329              	.LVL548:
 4330              	.LBB155:
 4331              	.LBB153:
 732:fltk-1.3.4-1/png/pngrutil.c ****    {
 4332              		.loc 1 732 0
 4333 03fc 0F84B700 		je	.L470
 4333      0000
 784:fltk-1.3.4-1/png/pngrutil.c ****       return Z_STREAM_ERROR;
 4334              		.loc 1 784 0
 4335 0402 48C78370 		movq	$.LC10, 368(%rbx)
 4335      01000000 
 4335      000000
 4336              	.L414:
 4337              	.LVL549:
 4338              	.LBE153:
 4339              	.LBE155:
1428:fltk-1.3.4-1/png/pngrutil.c ****                            {
 4340              		.loc 1 1428 0
 4341 040d 48837C24 		cmpq	$0, 56(%rsp)
 4341      3800
 4342 0413 741B     		je	.L471
 4343              	.LVL550:
 4344              	.L456:
 4345 0415 4C8BBB70 		movq	368(%rbx), %r15
 4345      010000
 4346 041c E933FEFF 		jmp	.L409
 4346      FF
 4347              	.LVL551:
 4348              	.L461:
 4349              	.LBE145:
 4350              	.LBE176:
 4351              	.LBE183:
 4352              	.LBE193:
1310:fltk-1.3.4-1/png/pngrutil.c **** 
 4353              		.loc 1 1310 0
 4354 0421 BE000000 		movl	$.LC33, %esi
 4354      00
 4355              	.LVL552:
 4356 0426 E8000000 		call	png_chunk_error
 4356      00
 4357              	.LVL553:
 4358              	.L466:
1569:fltk-1.3.4-1/png/pngrutil.c **** #endif /* READ_iCCP */
 4359              		.loc 1 1569 0
 4360 042b E8000000 		call	__stack_chk_fail
 4360      00
 4361              	.LVL554:
 4362              	.L471:
 4363              	.LBB194:
 4364              	.LBB184:
 4365              	.LBB177:
 4366              	.LBB172:
1430:fltk-1.3.4-1/png/pngrutil.c ****                                  &png_ptr->colorspace, keyword, profile_length,
 4367              		.loc 1 1430 0
 4368 0430 4D89E8   		movq	%r13, %r8
 4369 0433 4489E1   		movl	%r12d, %ecx
 4370 0436 4C89D2   		movq	%r10, %rdx
 4371 0439 4C89FE   		movq	%r15, %rsi
 4372 043c 4889DF   		movq	%rbx, %rdi
 4373 043f 4C895C24 		movq	%r11, 24(%rsp)
 4373      18
 4374 0444 4C895424 		movq	%r10, 8(%rsp)
 4374      08
 4375 0449 E8000000 		call	png_icc_check_tag_table
 4375      00
 4376              	.LVL555:
 4377 044e 85C0     		testl	%eax, %eax
 4378 0450 0F84D7FE 		je	.L412
 4378      FFFF
1437:fltk-1.3.4-1/png/pngrutil.c ****                                     - 12 * tag_count;
 4379              		.loc 1 1437 0
 4380 0456 488B4424 		movq	16(%rsp), %rax
 4380      10
 4381              	.LBB156:
 4382              	.LBB157:
 732:fltk-1.3.4-1/png/pngrutil.c ****    {
 4383              		.loc 1 732 0
 4384 045b 8B8B1802 		movl	536(%rbx), %ecx
 4384      0000
 4385 0461 4C8B5424 		movq	8(%rsp), %r10
 4385      08
 4386 0466 4C8B5C24 		movq	24(%rsp), %r11
 4386      18
 4387              	.LBE157:
 4388              	.LBE156:
1437:fltk-1.3.4-1/png/pngrutil.c ****                                     - 12 * tag_count;
 4389              		.loc 1 1437 0
 4390 046b 482D8400 		subq	$132, %rax
 4390      0000
 4391 0471 4C29F0   		subq	%r14, %rax
 4392              	.LBB162:
 4393              	.LBB159:
 732:fltk-1.3.4-1/png/pngrutil.c ****    {
 4394              		.loc 1 732 0
 4395 0474 398B3801 		cmpl	%ecx, 312(%rbx)
 4395      0000
 4396              	.LBE159:
 4397              	.LBE162:
1437:fltk-1.3.4-1/png/pngrutil.c ****                                     - 12 * tag_count;
 4398              		.loc 1 1437 0
 4399 047a 48894424 		movq	%rax, 56(%rsp)
 4399      38
1440:fltk-1.3.4-1/png/pngrutil.c ****                                     (sizeof local_buffer), &length,
 4400              		.loc 1 1440 0
 4401 047f 4B8D8435 		leaq	132(%r13,%r14), %rax
 4401      84000000 
 4402              	.LVL556:
 4403              	.LBB163:
 4404              	.LBB160:
 732:fltk-1.3.4-1/png/pngrutil.c ****    {
 4405              		.loc 1 732 0
 4406 0487 0F84A501 		je	.L472
 4406      0000
 784:fltk-1.3.4-1/png/pngrutil.c ****       return Z_STREAM_ERROR;
 4407              		.loc 1 784 0
 4408 048d 48C78370 		movq	$.LC10, 368(%rbx)
 4408      01000000 
 4408      000000
 4409              	.LVL557:
 4410              	.L417:
 4411              	.LBE160:
 4412              	.LBE163:
1445:fltk-1.3.4-1/png/pngrutil.c ****                                        PNG_FLAG_BENIGN_ERRORS_WARN))
 4413              		.loc 1 1445 0
 4414 0498 837C242C 		cmpl	$0, 44(%rsp)
 4414      00
 4415 049d 0F845201 		je	.L418
 4415      0000
1445:fltk-1.3.4-1/png/pngrutil.c ****                                        PNG_FLAG_BENIGN_ERRORS_WARN))
 4416              		.loc 1 1445 0 is_stmt 0 discriminator 1
 4417 04a3 F6833201 		testb	$16, 306(%rbx)
 4417      000010
 4418 04aa 7568     		jne	.L473
 4419              	.LBE172:
 4420              	.LBE177:
 4421              	.LBE184:
 4422              	.LBE194:
1305:fltk-1.3.4-1/png/pngrutil.c **** 
 4423              		.loc 1 1305 0 is_stmt 1
 4424 04ac 31C0     		xorl	%eax, %eax
 4425              	.LBB195:
 4426              	.LBB185:
 4427              	.LBB178:
 4428              	.LBB173:
1447:fltk-1.3.4-1/png/pngrutil.c **** 
 4429              		.loc 1 1447 0
 4430 04ae 41BF0000 		movl	$.LC12, %r15d
 4430      0000
 4431 04b4 E99DFDFF 		jmp	.L411
 4431      FF
 4432              	.LVL558:
 4433              	.L470:
 4434              	.LBB164:
 4435              	.LBB154:
 4436              	.LBB150:
 737:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.avail_out = 0; /* set in the loop */
 4437              		.loc 1 737 0
 4438 04b9 498D8584 		leaq	132(%r13), %rax
 4438      000000
 4439              	.LBE150:
 4440 04c0 488D4C24 		leaq	56(%rsp), %rcx
 4440      38
 4441              	.LVL559:
 4442 04c5 488D5424 		leaq	44(%rsp), %rdx
 4442      2C
 4443              	.LVL560:
 4444 04ca 488DB424 		leaq	304(%rsp), %rsi
 4444      30010000 
 4445              	.LVL561:
 4446              	.LBB151:
 738:fltk-1.3.4-1/png/pngrutil.c **** 
 4447              		.loc 1 738 0
 4448 04d2 C7836001 		movl	$0, 352(%rbx)
 4448      00000000 
 4448      0000
 4449              	.LBE151:
 4450 04dc 4531C0   		xorl	%r8d, %r8d
 4451              	.LBB152:
 737:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.avail_out = 0; /* set in the loop */
 4452              		.loc 1 737 0
 4453 04df 48898358 		movq	%rax, 344(%rbx)
 4453      010000
 4454              	.LBE152:
 4455 04e6 4889DF   		movq	%rbx, %rdi
 4456 04e9 4C895C24 		movq	%r11, 24(%rsp)
 4456      18
 4457 04ee 4C895424 		movq	%r10, 8(%rsp)
 4457      08
 4458 04f3 E8000000 		call	png_inflate_read.part.2.constprop.8
 4458      00
 4459              	.LVL562:
 4460 04f8 4C8B5424 		movq	8(%rsp), %r10
 4460      08
 4461 04fd 4C8B5C24 		movq	24(%rsp), %r11
 4461      18
 4462 0502 E906FFFF 		jmp	.L414
 4462      FF
 4463              	.LVL563:
 4464              	.L433:
 4465              	.LBE154:
 4466              	.LBE164:
 4467              	.LBE173:
 4468              	.LBE178:
 4469              	.LBE185:
 4470              	.LBE195:
1305:fltk-1.3.4-1/png/pngrutil.c **** 
 4471              		.loc 1 1305 0
 4472 0507 31C0     		xorl	%eax, %eax
 4473              	.LVL564:
 4474              	.LBB196:
 4475              	.LBB186:
 4476              	.LBB179:
 4477              	.LBB174:
1530:fltk-1.3.4-1/png/pngrutil.c ****                      }
 4478              		.loc 1 1530 0
 4479 0509 41BF0000 		movl	$.LC48, %r15d
 4479      0000
 4480 050f E942FDFF 		jmp	.L411
 4480      FF
 4481              	.L473:
1450:fltk-1.3.4-1/png/pngrutil.c ****                                  {
 4482              		.loc 1 1450 0
 4483 0514 48837C24 		cmpq	$0, 56(%rsp)
 4483      3800
 4484 051a 0F85E100 		jne	.L459
 4484      0000
1457:fltk-1.3.4-1/png/pngrutil.c ****                                           "extra compressed data");
 4485              		.loc 1 1457 0
 4486 0520 BE000000 		movl	$.LC12, %esi
 4486      00
 4487 0525 4889DF   		movq	%rbx, %rdi
 4488 0528 4C895C24 		movq	%r11, 16(%rsp)
 4488      10
 4489 052d 4C895424 		movq	%r10, 8(%rsp)
 4489      08
 4490 0532 E8000000 		call	png_chunk_warning
 4490      00
 4491              	.LVL565:
 4492 0537 4C8B5C24 		movq	16(%rsp), %r11
 4492      10
 4493 053c 4C8B5424 		movq	8(%rsp), %r10
 4493      08
 4494              	.L426:
1461:fltk-1.3.4-1/png/pngrutil.c ****                                     finished = 1;
 4495              		.loc 1 1461 0
 4496 0541 8B74242C 		movl	44(%rsp), %esi
 4497 0545 4889DF   		movq	%rbx, %rdi
 4498 0548 4C895C24 		movq	%r11, 8(%rsp)
 4498      08
 4499 054d 4C895424 		movq	%r10, 16(%rsp)
 4499      10
 4500 0552 E8000000 		call	png_crc_finish
 4500      00
 4501              	.LVL566:
1466:fltk-1.3.4-1/png/pngrutil.c ****                                           &png_ptr->colorspace, profile,
 4502              		.loc 1 1466 0
 4503 0557 488B8BA0 		movq	416(%rbx), %rcx
 4503      010000
 4504 055e 4C89EA   		movq	%r13, %rdx
 4505 0561 4C89FE   		movq	%r15, %rsi
 4506 0564 4889DF   		movq	%rbx, %rdi
 4507 0567 E8000000 		call	png_icc_set_sRGB
 4507      00
 4508              	.LVL567:
1472:fltk-1.3.4-1/png/pngrutil.c ****                                     {
 4509              		.loc 1 1472 0
 4510 056c 4885ED   		testq	%rbp, %rbp
 4511 056f 7475     		je	.L420
1474:fltk-1.3.4-1/png/pngrutil.c ****                                           PNG_FREE_ICCP, 0);
 4512              		.loc 1 1474 0
 4513 0571 31C9     		xorl	%ecx, %ecx
 4514 0573 BA100000 		movl	$16, %edx
 4514      00
 4515 0578 4889EE   		movq	%rbp, %rsi
 4516 057b 4889DF   		movq	%rbx, %rdi
 4517 057e E8000000 		call	png_free_data
 4517      00
 4518              	.LVL568:
1477:fltk-1.3.4-1/png/pngrutil.c ****                                           png_malloc_base(png_ptr,
 4519              		.loc 1 1477 0
 4520 0583 4C8B5C24 		movq	8(%rsp), %r11
 4520      08
 4521 0588 4889DF   		movq	%rbx, %rdi
 4522 058b 4C89DE   		movq	%r11, %rsi
 4523 058e E8000000 		call	png_malloc_base
 4523      00
 4524              	.LVL569:
1480:fltk-1.3.4-1/png/pngrutil.c ****                                        {
 4525              		.loc 1 1480 0
 4526 0593 4885C0   		testq	%rax, %rax
1477:fltk-1.3.4-1/png/pngrutil.c ****                                           png_malloc_base(png_ptr,
 4527              		.loc 1 1477 0
 4528 0596 48898580 		movq	%rax, 128(%rbp)
 4528      000000
1480:fltk-1.3.4-1/png/pngrutil.c ****                                        {
 4529              		.loc 1 1480 0
 4530 059d 746F     		je	.L421
 4531              	.LVL570:
 4532              	.LBB165:
 4533              	.LBB166:
 4534              		.loc 2 53 0
 4535 059f 4C8B5424 		movq	16(%rsp), %r10
 4535      10
 4536 05a4 4C8B5C24 		movq	8(%rsp), %r11
 4536      08
 4537 05a9 4889C7   		movq	%rax, %rdi
 4538              	.LBE166:
 4539              	.LBE165:
1488:fltk-1.3.4-1/png/pngrutil.c ****                                           info_ptr->valid |= PNG_INFO_iCCP;
 4540              		.loc 1 1488 0
 4541 05ac 838D1C01 		orl	$16, 284(%rbp)
 4541      000010
1489:fltk-1.3.4-1/png/pngrutil.c ****                                        }
 4542              		.loc 1 1489 0
 4543 05b3 814D0800 		orl	$4096, 8(%rbp)
 4543      100000
1484:fltk-1.3.4-1/png/pngrutil.c ****                                              profile_length;
 4544              		.loc 1 1484 0
 4545 05ba 4489A590 		movl	%r12d, 144(%rbp)
 4545      000000
1486:fltk-1.3.4-1/png/pngrutil.c ****                                           png_ptr->read_buffer = NULL; /*steal*/
 4546              		.loc 1 1486 0
 4547 05c1 4C89AD88 		movq	%r13, 136(%rbp)
 4547      000000
 4548              	.LBB169:
 4549              	.LBB167:
 4550              		.loc 2 53 0
 4551 05c8 4C89D6   		movq	%r10, %rsi
 4552 05cb 4C89D9   		movq	%r11, %rcx
 4553              	.LBE167:
 4554              	.LBE169:
1487:fltk-1.3.4-1/png/pngrutil.c ****                                           info_ptr->free_me |= PNG_FREE_ICCP;
 4555              		.loc 1 1487 0
 4556 05ce 48C78398 		movq	$0, 1176(%rbx)
 4556      04000000 
 4556      000000
 4557              	.LBB170:
 4558              	.LBB168:
 4559              		.loc 2 53 0
 4560 05d9 F3A4     		rep movsb
 4561              	.LVL571:
 4562              	.LBE168:
 4563              	.LBE170:
1506:fltk-1.3.4-1/png/pngrutil.c **** 
 4564              		.loc 1 1506 0
 4565 05db 4889EE   		movq	%rbp, %rsi
 4566 05de 4889DF   		movq	%rbx, %rdi
 4567 05e1 E8000000 		call	png_colorspace_sync
 4567      00
 4568              	.LVL572:
 4569              	.L420:
1510:fltk-1.3.4-1/png/pngrutil.c ****                                        return;
 4570              		.loc 1 1510 0
 4571 05e6 C7833801 		movl	$0, 312(%rbx)
 4571      00000000 
 4571      0000
 4572 05f0 E9A7FAFF 		jmp	.L392
 4572      FF
 4573              	.LVL573:
 4574              	.L418:
1450:fltk-1.3.4-1/png/pngrutil.c ****                                  {
 4575              		.loc 1 1450 0
 4576 05f5 48837C24 		cmpq	$0, 56(%rsp)
 4576      3800
 4577 05fb 0F8440FF 		je	.L426
 4577      FFFF
 4578              	.L459:
 4579              	.LBE174:
 4580              	.LBE179:
 4581              	.LBE186:
 4582              	.LBE196:
1305:fltk-1.3.4-1/png/pngrutil.c **** 
 4583              		.loc 1 1305 0
 4584 0601 31C0     		xorl	%eax, %eax
 4585              	.LBB197:
 4586              	.LBB187:
 4587              	.LBB180:
 4588              	.LBB175:
1516:fltk-1.3.4-1/png/pngrutil.c **** 
 4589              		.loc 1 1516 0
 4590 0603 41BF0000 		movl	$.LC47, %r15d
 4590      0000
 4591 0609 E948FCFF 		jmp	.L411
 4591      FF
 4592              	.LVL574:
 4593              	.L421:
1494:fltk-1.3.4-1/png/pngrutil.c ****                                              PNG_COLORSPACE_INVALID;
 4594              		.loc 1 1494 0
 4595 060e 66818B22 		orw	$-32768, 1314(%rbx)
 4595      05000000 
 4595      80
 4596              	.LVL575:
1506:fltk-1.3.4-1/png/pngrutil.c **** 
 4597              		.loc 1 1506 0
 4598 0617 4889EE   		movq	%rbp, %rsi
 4599 061a 4889DF   		movq	%rbx, %rdi
1496:fltk-1.3.4-1/png/pngrutil.c ****                                        }
 4600              		.loc 1 1496 0
 4601 061d 41BF0000 		movl	$.LC48, %r15d
 4601      0000
1506:fltk-1.3.4-1/png/pngrutil.c **** 
 4602              		.loc 1 1506 0
 4603 0623 E8000000 		call	png_colorspace_sync
 4603      00
 4604              	.LVL576:
1462:fltk-1.3.4-1/png/pngrutil.c **** 
 4605              		.loc 1 1462 0
 4606 0628 B8010000 		movl	$1, %eax
 4606      00
 4607 062d E924FCFF 		jmp	.L411
 4607      FF
 4608              	.LVL577:
 4609              	.L472:
 4610              	.LBB171:
 4611              	.LBB161:
 4612 0632 488D4C24 		leaq	56(%rsp), %rcx
 4612      38
 4613              	.LVL578:
 4614 0637 488D5424 		leaq	44(%rsp), %rdx
 4614      2C
 4615              	.LVL579:
 4616 063c 488DB424 		leaq	304(%rsp), %rsi
 4616      30010000 
 4617              	.LVL580:
 4618              	.LBB158:
 737:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.avail_out = 0; /* set in the loop */
 4619              		.loc 1 737 0
 4620 0644 48898358 		movq	%rax, 344(%rbx)
 4620      010000
 738:fltk-1.3.4-1/png/pngrutil.c **** 
 4621              		.loc 1 738 0
 4622 064b C7836001 		movl	$0, 352(%rbx)
 4622      00000000 
 4622      0000
 4623              	.LBE158:
 4624 0655 41B80100 		movl	$1, %r8d
 4624      0000
 4625 065b 4889DF   		movq	%rbx, %rdi
 4626 065e 4C895C24 		movq	%r11, 16(%rsp)
 4626      10
 4627 0663 E8000000 		call	png_inflate_read.part.2.constprop.8
 4627      00
 4628              	.LVL581:
 4629 0668 4C8B5424 		movq	8(%rsp), %r10
 4629      08
 4630 066d 4C8B5C24 		movq	16(%rsp), %r11
 4630      10
 4631 0672 E921FEFF 		jmp	.L417
 4631      FF
 4632              	.LBE161:
 4633              	.LBE171:
 4634              	.LBE175:
 4635              	.LBE180:
 4636              	.LBE187:
 4637              	.LBE197:
 4638              		.cfi_endproc
 4639              	.LFE78:
 4641              		.section	.text.unlikely.png_handle_iCCP
 4642              	.LCOLDE52:
 4643              		.section	.text.png_handle_iCCP
 4644              	.LHOTE52:
 4645              		.section	.rodata.str1.8
 4646 009c 00000000 		.align 8
 4647              	.LC53:
 4648 00a0 4E6F2073 		.string	"No space in chunk cache for sPLT"
 4648      70616365 
 4648      20696E20 
 4648      6368756E 
 4648      6B206361 
 4649              		.section	.rodata.str1.1
 4650              	.LC54:
 4651 013a 6D616C66 		.string	"malformed sPLT chunk"
 4651      6F726D65 
 4651      64207350 
 4651      4C542063 
 4651      68756E6B 
 4652              	.LC55:
 4653 014f 73504C54 		.string	"sPLT chunk has bad length"
 4653      20636875 
 4653      6E6B2068 
 4653      61732062 
 4653      6164206C 
 4654              		.section	.rodata.str1.8
 4655 00c1 00000000 		.align 8
 4655      000000
 4656              	.LC56:
 4657 00c8 73504C54 		.string	"sPLT chunk requires too much memory"
 4657      20636875 
 4657      6E6B2072 
 4657      65717569 
 4657      72657320 
 4658              		.section	.text.unlikely.png_handle_sPLT,"ax",@progbits
 4659              	.LCOLDB57:
 4660              		.section	.text.png_handle_sPLT,"ax",@progbits
 4661              	.LHOTB57:
 4662              		.p2align 4,,15
 4663              		.globl	png_handle_sPLT
 4665              	png_handle_sPLT:
 4666              	.LFB79:
1576:fltk-1.3.4-1/png/pngrutil.c ****    png_bytep entry_start, buffer;
 4667              		.loc 1 1576 0
 4668              		.cfi_startproc
 4669              	.LVL582:
 4670 0000 4156     		pushq	%r14
 4671              		.cfi_def_cfa_offset 16
 4672              		.cfi_offset 14, -16
 4673 0002 4155     		pushq	%r13
 4674              		.cfi_def_cfa_offset 24
 4675              		.cfi_offset 13, -24
 4676 0004 4189D5   		movl	%edx, %r13d
 4677 0007 4154     		pushq	%r12
 4678              		.cfi_def_cfa_offset 32
 4679              		.cfi_offset 12, -32
 4680 0009 55       		pushq	%rbp
 4681              		.cfi_def_cfa_offset 40
 4682              		.cfi_offset 6, -40
 4683 000a 4989F4   		movq	%rsi, %r12
 4684 000d 53       		pushq	%rbx
 4685              		.cfi_def_cfa_offset 48
 4686              		.cfi_offset 3, -48
 4687 000e 4889FB   		movq	%rdi, %rbx
 4688 0011 4883EC30 		subq	$48, %rsp
 4689              		.cfi_def_cfa_offset 96
1589:fltk-1.3.4-1/png/pngrutil.c ****    {
 4690              		.loc 1 1589 0
 4691 0015 8B976404 		movl	1124(%rdi), %edx
 4691      0000
 4692              	.LVL583:
1576:fltk-1.3.4-1/png/pngrutil.c ****    png_bytep entry_start, buffer;
 4693              		.loc 1 1576 0
 4694 001b 64488B04 		movq	%fs:40, %rax
 4694      25280000 
 4694      00
 4695 0024 48894424 		movq	%rax, 40(%rsp)
 4695      28
 4696 0029 31C0     		xorl	%eax, %eax
 4697              	.LVL584:
1589:fltk-1.3.4-1/png/pngrutil.c ****    {
 4698              		.loc 1 1589 0
 4699 002b 85D2     		testl	%edx, %edx
 4700 002d 741B     		je	.L475
1591:fltk-1.3.4-1/png/pngrutil.c ****       {
 4701              		.loc 1 1591 0
 4702 002f 83FA01   		cmpl	$1, %edx
 4703 0032 0F841A01 		je	.L503
 4703      0000
1597:fltk-1.3.4-1/png/pngrutil.c ****       {
 4704              		.loc 1 1597 0
 4705 0038 83EA01   		subl	$1, %edx
 4706 003b 83FA01   		cmpl	$1, %edx
 4707 003e 89976404 		movl	%edx, 1124(%rdi)
 4707      0000
 4708 0044 0F84FE00 		je	.L504
 4708      0000
 4709              	.L475:
1606:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
 4710              		.loc 1 1606 0
 4711 004a 8B832C01 		movl	300(%rbx), %eax
 4711      0000
 4712 0050 A801     		testb	$1, %al
 4713 0052 0F846302 		je	.L505
 4713      0000
1609:fltk-1.3.4-1/png/pngrutil.c ****    {
 4714              		.loc 1 1609 0
 4715 0058 A804     		testb	$4, %al
 4716 005a 743C     		je	.L479
1611:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
 4717              		.loc 1 1611 0
 4718 005c 4489EE   		movl	%r13d, %esi
 4719              	.LVL585:
 4720 005f 4889DF   		movq	%rbx, %rdi
 4721              	.LVL586:
 4722 0062 E8000000 		call	png_crc_finish
 4722      00
 4723              	.LVL587:
1612:fltk-1.3.4-1/png/pngrutil.c ****       return;
 4724              		.loc 1 1612 0
 4725 0067 BE000000 		movl	$.LC30, %esi
 4725      00
 4726 006c 4889DF   		movq	%rbx, %rdi
 4727 006f E8000000 		call	png_chunk_benign_error
 4727      00
 4728              	.LVL588:
 4729              	.L474:
1746:fltk-1.3.4-1/png/pngrutil.c **** #endif /* READ_sPLT */
 4730              		.loc 1 1746 0
 4731 0074 488B4424 		movq	40(%rsp), %rax
 4731      28
 4732 0079 64483304 		xorq	%fs:40, %rax
 4732      25280000 
 4732      00
 4733 0082 0F854002 		jne	.L506
 4733      0000
 4734 0088 4883C430 		addq	$48, %rsp
 4735              		.cfi_remember_state
 4736              		.cfi_def_cfa_offset 48
 4737 008c 5B       		popq	%rbx
 4738              		.cfi_def_cfa_offset 40
 4739              	.LVL589:
 4740 008d 5D       		popq	%rbp
 4741              		.cfi_def_cfa_offset 32
 4742 008e 415C     		popq	%r12
 4743              		.cfi_def_cfa_offset 24
 4744              	.LVL590:
 4745 0090 415D     		popq	%r13
 4746              		.cfi_def_cfa_offset 16
 4747 0092 415E     		popq	%r14
 4748              		.cfi_def_cfa_offset 8
 4749 0094 C3       		ret
 4750              	.LVL591:
 4751              		.p2align 4,,10
 4752 0095 0F1F00   		.p2align 3
 4753              	.L479:
 4754              		.cfi_restore_state
1625:fltk-1.3.4-1/png/pngrutil.c ****    if (buffer == NULL)
 4755              		.loc 1 1625 0
 4756 0098 418D7501 		leal	1(%r13), %esi
 4757              	.LVL592:
 4758 009c BA020000 		movl	$2, %edx
 4758      00
 4759 00a1 4889DF   		movq	%rbx, %rdi
 4760 00a4 E8000000 		call	png_read_buffer
 4760      00
 4761              	.LVL593:
1626:fltk-1.3.4-1/png/pngrutil.c ****    {
 4762              		.loc 1 1626 0
 4763 00a9 4885C0   		testq	%rax, %rax
1625:fltk-1.3.4-1/png/pngrutil.c ****    if (buffer == NULL)
 4764              		.loc 1 1625 0
 4765 00ac 4989C6   		movq	%rax, %r14
 4766              	.LVL594:
1626:fltk-1.3.4-1/png/pngrutil.c ****    {
 4767              		.loc 1 1626 0
 4768 00af 0F84B300 		je	.L507
 4768      0000
1638:fltk-1.3.4-1/png/pngrutil.c **** 
 4769              		.loc 1 1638 0
 4770 00b5 4889C6   		movq	%rax, %rsi
 4771 00b8 4489EA   		movl	%r13d, %edx
 4772 00bb 4889DF   		movq	%rbx, %rdi
 4773 00be E8000000 		call	png_crc_read
 4773      00
 4774              	.LVL595:
1640:fltk-1.3.4-1/png/pngrutil.c ****       return;
 4775              		.loc 1 1640 0
 4776 00c3 31F6     		xorl	%esi, %esi
 4777 00c5 4889DF   		movq	%rbx, %rdi
 4778 00c8 E8000000 		call	png_crc_finish
 4778      00
 4779              	.LVL596:
 4780 00cd 85C0     		testl	%eax, %eax
 4781 00cf 75A3     		jne	.L474
1643:fltk-1.3.4-1/png/pngrutil.c **** 
 4782              		.loc 1 1643 0
 4783 00d1 4489E8   		movl	%r13d, %eax
1645:fltk-1.3.4-1/png/pngrutil.c ****       /* Empty loop to find end of name */ ;
 4784              		.loc 1 1645 0
 4785 00d4 4C89F2   		movq	%r14, %rdx
1643:fltk-1.3.4-1/png/pngrutil.c **** 
 4786              		.loc 1 1643 0
 4787 00d7 41C60406 		movb	$0, (%r14,%rax)
 4787      00
 4788              	.LVL597:
1645:fltk-1.3.4-1/png/pngrutil.c ****       /* Empty loop to find end of name */ ;
 4789              		.loc 1 1645 0
 4790 00dc 41803E00 		cmpb	$0, (%r14)
 4791 00e0 740F     		je	.L481
 4792              	.LVL598:
 4793              		.p2align 4,,10
 4794 00e2 660F1F44 		.p2align 3
 4794      0000
 4795              	.L482:
1645:fltk-1.3.4-1/png/pngrutil.c ****       /* Empty loop to find end of name */ ;
 4796              		.loc 1 1645 0 is_stmt 0 discriminator 3
 4797 00e8 4883C201 		addq	$1, %rdx
 4798              	.LVL599:
 4799 00ec 803A00   		cmpb	$0, (%rdx)
 4800 00ef 75F7     		jne	.L482
 4801              	.L481:
 4802              	.LVL600:
1651:fltk-1.3.4-1/png/pngrutil.c ****    {
 4803              		.loc 1 1651 0 is_stmt 1
 4804 00f1 488D4A01 		leaq	1(%rdx), %rcx
 4805              	.LVL601:
 4806 00f5 498D4406 		leaq	-2(%r14,%rax), %rax
 4806      FE
 4807 00fa 4839C1   		cmpq	%rax, %rcx
 4808 00fd 0F878500 		ja	.L508
 4808      0000
1657:fltk-1.3.4-1/png/pngrutil.c ****    entry_size = (new_palette.depth == 8 ? 6 : 10);
 4809              		.loc 1 1657 0
 4810 0103 0FB64201 		movzbl	1(%rdx), %eax
 4811 0107 488D6A02 		leaq	2(%rdx), %rbp
 4812              	.LVL602:
 4813 010b 31C9     		xorl	%ecx, %ecx
 4814 010d 88442408 		movb	%al, 8(%rsp)
 4815 0111 3C08     		cmpb	$8, %al
1662:fltk-1.3.4-1/png/pngrutil.c **** 
 4816              		.loc 1 1662 0
 4817 0113 4889E8   		movq	%rbp, %rax
 4818 0116 0F95C1   		setne	%cl
 4819 0119 4C29F0   		subq	%r14, %rax
1665:fltk-1.3.4-1/png/pngrutil.c ****    {
 4820              		.loc 1 1665 0
 4821 011c 31D2     		xorl	%edx, %edx
1662:fltk-1.3.4-1/png/pngrutil.c **** 
 4822              		.loc 1 1662 0
 4823 011e 4129C5   		subl	%eax, %r13d
 4824              	.LVL603:
 4825 0121 8D0C8D06 		leal	6(,%rcx,4), %ecx
 4825      000000
 4826 0128 4489E8   		movl	%r13d, %eax
 4827              	.LVL604:
1665:fltk-1.3.4-1/png/pngrutil.c ****    {
 4828              		.loc 1 1665 0
 4829 012b F7F1     		divl	%ecx
 4830              	.LVL605:
 4831 012d 85D2     		testl	%edx, %edx
 4832 012f 746F     		je	.L501
1667:fltk-1.3.4-1/png/pngrutil.c ****       return;
 4833              		.loc 1 1667 0
 4834 0131 BE000000 		movl	$.LC55, %esi
 4834      00
 4835 0136 4889DF   		movq	%rbx, %rdi
 4836 0139 E8000000 		call	png_warning
 4836      00
 4837              	.LVL606:
1668:fltk-1.3.4-1/png/pngrutil.c ****    }
 4838              		.loc 1 1668 0
 4839 013e E931FFFF 		jmp	.L474
 4839      FF
 4840              	.LVL607:
 4841              		.p2align 4,,10
 4842 0143 0F1F4400 		.p2align 3
 4842      00
 4843              	.L504:
1599:fltk-1.3.4-1/png/pngrutil.c ****          png_crc_finish(png_ptr, length);
 4844              		.loc 1 1599 0
 4845 0148 BE000000 		movl	$.LC53, %esi
 4845      00
 4846              	.LVL608:
 4847 014d E8000000 		call	png_warning
 4847      00
 4848              	.LVL609:
 4849              	.L503:
1600:fltk-1.3.4-1/png/pngrutil.c ****          return;
 4850              		.loc 1 1600 0
 4851 0152 4489EE   		movl	%r13d, %esi
 4852 0155 4889DF   		movq	%rbx, %rdi
 4853 0158 E8000000 		call	png_crc_finish
 4853      00
 4854              	.LVL610:
1601:fltk-1.3.4-1/png/pngrutil.c ****       }
 4855              		.loc 1 1601 0
 4856 015d E912FFFF 		jmp	.L474
 4856      FF
 4857              	.LVL611:
 4858              		.p2align 4,,10
 4859 0162 660F1F44 		.p2align 3
 4859      0000
 4860              	.L507:
1628:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of memory");
 4861              		.loc 1 1628 0
 4862 0168 4489EE   		movl	%r13d, %esi
 4863 016b 4889DF   		movq	%rbx, %rdi
 4864 016e E8000000 		call	png_crc_finish
 4864      00
 4865              	.LVL612:
1629:fltk-1.3.4-1/png/pngrutil.c ****       return;
 4866              		.loc 1 1629 0
 4867 0173 BE000000 		movl	$.LC48, %esi
 4867      00
 4868 0178 4889DF   		movq	%rbx, %rdi
 4869 017b E8000000 		call	png_chunk_benign_error
 4869      00
 4870              	.LVL613:
1630:fltk-1.3.4-1/png/pngrutil.c ****    }
 4871              		.loc 1 1630 0
 4872 0180 E9EFFEFF 		jmp	.L474
 4872      FF
 4873              	.LVL614:
 4874              		.p2align 4,,10
 4875 0185 0F1F00   		.p2align 3
 4876              	.L508:
1653:fltk-1.3.4-1/png/pngrutil.c ****       return;
 4877              		.loc 1 1653 0
 4878 0188 BE000000 		movl	$.LC54, %esi
 4878      00
 4879 018d 4889DF   		movq	%rbx, %rdi
 4880 0190 E8000000 		call	png_warning
 4880      00
 4881              	.LVL615:
1654:fltk-1.3.4-1/png/pngrutil.c ****    }
 4882              		.loc 1 1654 0
 4883 0195 E9DAFEFF 		jmp	.L474
 4883      FF
 4884              	.LVL616:
 4885 019a 660F1F44 		.p2align 4,,10
 4885      0000
 4886              		.p2align 3
 4887              	.L501:
1680:fltk-1.3.4-1/png/pngrutil.c **** 
 4888              		.loc 1 1680 0
 4889 01a0 89442418 		movl	%eax, 24(%rsp)
1682:fltk-1.3.4-1/png/pngrutil.c ****        png_ptr, new_palette.nentries * (sizeof (png_sPLT_entry)));
 4890              		.loc 1 1682 0
 4891 01a4 89C0     		movl	%eax, %eax
 4892              	.LVL617:
 4893 01a6 4889DF   		movq	%rbx, %rdi
 4894 01a9 488D3480 		leaq	(%rax,%rax,4), %rsi
 4895 01ad 4801F6   		addq	%rsi, %rsi
 4896 01b0 E8000000 		call	png_malloc_warn
 4896      00
 4897              	.LVL618:
1685:fltk-1.3.4-1/png/pngrutil.c ****    {
 4898              		.loc 1 1685 0
 4899 01b5 4885C0   		testq	%rax, %rax
1682:fltk-1.3.4-1/png/pngrutil.c ****        png_ptr, new_palette.nentries * (sizeof (png_sPLT_entry)));
 4900              		.loc 1 1682 0
 4901 01b8 48894424 		movq	%rax, 16(%rsp)
 4901      10
1685:fltk-1.3.4-1/png/pngrutil.c ****    {
 4902              		.loc 1 1685 0
 4903 01bd 0F84E600 		je	.L490
 4903      0000
 4904              	.LVL619:
1692:fltk-1.3.4-1/png/pngrutil.c ****    {
 4905              		.loc 1 1692 0 discriminator 1
 4906 01c3 8B542418 		movl	24(%rsp), %edx
 4907 01c7 85D2     		testl	%edx, %edx
 4908 01c9 0F8EB100 		jle	.L491
 4908      0000
1692:fltk-1.3.4-1/png/pngrutil.c ****    {
 4909              		.loc 1 1692 0 is_stmt 0
 4910 01cf 4531C0   		xorl	%r8d, %r8d
 4911 01d2 31FF     		xorl	%edi, %edi
 4912 01d4 EB73     		jmp	.L492
 4913              	.LVL620:
 4914 01d6 662E0F1F 		.p2align 4,,10
 4914      84000000 
 4914      0000
 4915              		.p2align 3
 4916              	.L486:
1706:fltk-1.3.4-1/png/pngrutil.c ****          pp->green = png_get_uint_16(entry_start); entry_start += 2;
 4917              		.loc 1 1706 0 is_stmt 1
 4918 01e0 0FB64D01 		movzbl	1(%rbp), %ecx
 4919 01e4 C1E208   		sall	$8, %edx
1709:fltk-1.3.4-1/png/pngrutil.c ****       }
 4920              		.loc 1 1709 0
 4921 01e7 488D7508 		leaq	8(%rbp), %rsi
1706:fltk-1.3.4-1/png/pngrutil.c ****          pp->green = png_get_uint_16(entry_start); entry_start += 2;
 4922              		.loc 1 1706 0
 4923 01eb 01CA     		addl	%ecx, %edx
 4924 01ed 668910   		movw	%dx, (%rax)
 4925              	.LVL621:
1707:fltk-1.3.4-1/png/pngrutil.c ****          pp->blue  = png_get_uint_16(entry_start); entry_start += 2;
 4926              		.loc 1 1707 0
 4927 01f0 0FB65502 		movzbl	2(%rbp), %edx
 4928 01f4 0FB64D03 		movzbl	3(%rbp), %ecx
 4929 01f8 C1E208   		sall	$8, %edx
 4930 01fb 01CA     		addl	%ecx, %edx
 4931 01fd 66895002 		movw	%dx, 2(%rax)
 4932              	.LVL622:
1708:fltk-1.3.4-1/png/pngrutil.c ****          pp->alpha = png_get_uint_16(entry_start); entry_start += 2;
 4933              		.loc 1 1708 0
 4934 0201 0FB65504 		movzbl	4(%rbp), %edx
 4935 0205 0FB64D05 		movzbl	5(%rbp), %ecx
 4936 0209 C1E208   		sall	$8, %edx
 4937 020c 01CA     		addl	%ecx, %edx
 4938 020e 66895004 		movw	%dx, 4(%rax)
 4939              	.LVL623:
1709:fltk-1.3.4-1/png/pngrutil.c ****       }
 4940              		.loc 1 1709 0
 4941 0212 0FB65506 		movzbl	6(%rbp), %edx
 4942 0216 0FB64D07 		movzbl	7(%rbp), %ecx
 4943 021a C1E208   		sall	$8, %edx
 4944 021d 01CA     		addl	%ecx, %edx
 4945 021f 66895006 		movw	%dx, 6(%rax)
 4946              	.L487:
1712:fltk-1.3.4-1/png/pngrutil.c ****    }
 4947              		.loc 1 1712 0 discriminator 2
 4948 0223 0FB616   		movzbl	(%rsi), %edx
 4949 0226 0FB64E01 		movzbl	1(%rsi), %ecx
1692:fltk-1.3.4-1/png/pngrutil.c ****    {
 4950              		.loc 1 1692 0 discriminator 2
 4951 022a 83C701   		addl	$1, %edi
 4952              	.LVL624:
 4953 022d 4983C00A 		addq	$10, %r8
1712:fltk-1.3.4-1/png/pngrutil.c ****    }
 4954              		.loc 1 1712 0 discriminator 2
 4955 0231 488D6E02 		leaq	2(%rsi), %rbp
 4956              	.LVL625:
 4957 0235 C1E208   		sall	$8, %edx
 4958 0238 01CA     		addl	%ecx, %edx
 4959 023a 66895008 		movw	%dx, 8(%rax)
1692:fltk-1.3.4-1/png/pngrutil.c ****    {
 4960              		.loc 1 1692 0 discriminator 2
 4961 023e 397C2418 		cmpl	%edi, 24(%rsp)
 4962 0242 7E3C     		jle	.L491
 4963 0244 488B4424 		movq	16(%rsp), %rax
 4963      10
 4964              	.LVL626:
 4965              	.L492:
1694:fltk-1.3.4-1/png/pngrutil.c **** 
 4966              		.loc 1 1694 0
 4967 0249 4C01C0   		addq	%r8, %rax
 4968              	.LVL627:
1696:fltk-1.3.4-1/png/pngrutil.c ****       {
 4969              		.loc 1 1696 0
 4970 024c 807C2408 		cmpb	$8, 8(%rsp)
 4970      08
1698:fltk-1.3.4-1/png/pngrutil.c ****          pp->green = *entry_start++;
 4971              		.loc 1 1698 0
 4972 0251 0FB65500 		movzbl	0(%rbp), %edx
1696:fltk-1.3.4-1/png/pngrutil.c ****       {
 4973              		.loc 1 1696 0
 4974 0255 7589     		jne	.L486
 4975              	.LVL628:
1698:fltk-1.3.4-1/png/pngrutil.c ****          pp->green = *entry_start++;
 4976              		.loc 1 1698 0
 4977 0257 668910   		movw	%dx, (%rax)
 4978              	.LVL629:
1699:fltk-1.3.4-1/png/pngrutil.c ****          pp->blue = *entry_start++;
 4979              		.loc 1 1699 0
 4980 025a 0FB65501 		movzbl	1(%rbp), %edx
1701:fltk-1.3.4-1/png/pngrutil.c ****       }
 4981              		.loc 1 1701 0
 4982 025e 488D7504 		leaq	4(%rbp), %rsi
1699:fltk-1.3.4-1/png/pngrutil.c ****          pp->blue = *entry_start++;
 4983              		.loc 1 1699 0
 4984 0262 66895002 		movw	%dx, 2(%rax)
 4985              	.LVL630:
1700:fltk-1.3.4-1/png/pngrutil.c ****          pp->alpha = *entry_start++;
 4986              		.loc 1 1700 0
 4987 0266 0FB65502 		movzbl	2(%rbp), %edx
 4988 026a 66895004 		movw	%dx, 4(%rax)
1701:fltk-1.3.4-1/png/pngrutil.c ****       }
 4989              		.loc 1 1701 0
 4990 026e 0FB65503 		movzbl	3(%rbp), %edx
 4991 0272 66895006 		movw	%dx, 6(%rax)
 4992 0276 EBAB     		jmp	.L487
 4993              	.LVL631:
 4994 0278 0F1F8400 		.p2align 4,,10
 4994      00000000 
 4995              		.p2align 3
 4996              	.L491:
1743:fltk-1.3.4-1/png/pngrutil.c **** 
 4997              		.loc 1 1743 0
 4998 0280 4C89E6   		movq	%r12, %rsi
 4999 0283 4889DF   		movq	%rbx, %rdi
 5000 0286 B9010000 		movl	$1, %ecx
 5000      00
 5001 028b 4889E2   		movq	%rsp, %rdx
1741:fltk-1.3.4-1/png/pngrutil.c **** 
 5002              		.loc 1 1741 0
 5003 028e 4C893424 		movq	%r14, (%rsp)
1743:fltk-1.3.4-1/png/pngrutil.c **** 
 5004              		.loc 1 1743 0
 5005 0292 E8000000 		call	png_set_sPLT
 5005      00
 5006              	.LVL632:
1745:fltk-1.3.4-1/png/pngrutil.c **** }
 5007              		.loc 1 1745 0
 5008 0297 488B7424 		movq	16(%rsp), %rsi
 5008      10
 5009 029c 4889DF   		movq	%rbx, %rdi
 5010 029f E8000000 		call	png_free
 5010      00
 5011              	.LVL633:
 5012 02a4 E9CBFDFF 		jmp	.L474
 5012      FF
 5013              	.L490:
1687:fltk-1.3.4-1/png/pngrutil.c ****        return;
 5014              		.loc 1 1687 0
 5015 02a9 BE000000 		movl	$.LC56, %esi
 5015      00
 5016 02ae 4889DF   		movq	%rbx, %rdi
 5017 02b1 E8000000 		call	png_warning
 5017      00
 5018              	.LVL634:
1688:fltk-1.3.4-1/png/pngrutil.c ****    }
 5019              		.loc 1 1688 0
 5020 02b6 E9B9FDFF 		jmp	.L474
 5020      FF
 5021              	.LVL635:
 5022              	.L505:
1607:fltk-1.3.4-1/png/pngrutil.c **** 
 5023              		.loc 1 1607 0
 5024 02bb BE000000 		movl	$.LC33, %esi
 5024      00
 5025              	.LVL636:
 5026 02c0 4889DF   		movq	%rbx, %rdi
 5027 02c3 E8000000 		call	png_chunk_error
 5027      00
 5028              	.LVL637:
 5029              	.L506:
1746:fltk-1.3.4-1/png/pngrutil.c **** #endif /* READ_sPLT */
 5030              		.loc 1 1746 0
 5031 02c8 E8000000 		call	__stack_chk_fail
 5031      00
 5032              	.LVL638:
 5033              		.cfi_endproc
 5034              	.LFE79:
 5036              		.section	.text.unlikely.png_handle_sPLT
 5037              	.LCOLDE57:
 5038              		.section	.text.png_handle_sPLT
 5039              	.LHOTE57:
 5040              		.section	.rodata.str1.1
 5041              	.LC58:
 5042 0169 696E7661 		.string	"invalid with alpha channel"
 5042      6C696420 
 5042      77697468 
 5042      20616C70 
 5042      68612063 
 5043              		.section	.text.unlikely.png_handle_tRNS,"ax",@progbits
 5044              	.LCOLDB59:
 5045              		.section	.text.png_handle_tRNS,"ax",@progbits
 5046              	.LHOTB59:
 5047              		.p2align 4,,15
 5048              		.globl	png_handle_tRNS
 5050              	png_handle_tRNS:
 5051              	.LFB80:
1752:fltk-1.3.4-1/png/pngrutil.c ****    png_byte readbuf[PNG_MAX_PALETTE_LENGTH];
 5052              		.loc 1 1752 0
 5053              		.cfi_startproc
 5054              	.LVL639:
 5055 0000 4155     		pushq	%r13
 5056              		.cfi_def_cfa_offset 16
 5057              		.cfi_offset 13, -16
 5058 0002 4154     		pushq	%r12
 5059              		.cfi_def_cfa_offset 24
 5060              		.cfi_offset 12, -24
 5061 0004 55       		pushq	%rbp
 5062              		.cfi_def_cfa_offset 32
 5063              		.cfi_offset 6, -32
 5064 0005 53       		pushq	%rbx
 5065              		.cfi_def_cfa_offset 40
 5066              		.cfi_offset 3, -40
 5067 0006 4889FB   		movq	%rdi, %rbx
 5068 0009 4881EC18 		subq	$280, %rsp
 5068      010000
 5069              		.cfi_def_cfa_offset 320
1752:fltk-1.3.4-1/png/pngrutil.c ****    png_byte readbuf[PNG_MAX_PALETTE_LENGTH];
 5070              		.loc 1 1752 0
 5071 0010 64488B04 		movq	%fs:40, %rax
 5071      25280000 
 5071      00
 5072 0019 48898424 		movq	%rax, 264(%rsp)
 5072      08010000 
 5073 0021 31C0     		xorl	%eax, %eax
1757:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
 5074              		.loc 1 1757 0
 5075 0023 8B872C01 		movl	300(%rdi), %eax
 5075      0000
 5076 0029 A801     		testb	$1, %al
 5077 002b 0F840002 		je	.L537
 5077      0000
1760:fltk-1.3.4-1/png/pngrutil.c ****    {
 5078              		.loc 1 1760 0
 5079 0031 A804     		testb	$4, %al
 5080 0033 89D5     		movl	%edx, %ebp
 5081 0035 0F85B500 		jne	.L520
 5081      0000
1767:fltk-1.3.4-1/png/pngrutil.c ****    {
 5082              		.loc 1 1767 0
 5083 003b 4885F6   		testq	%rsi, %rsi
 5084 003e 4989F4   		movq	%rsi, %r12
 5085 0041 740A     		je	.L513
1767:fltk-1.3.4-1/png/pngrutil.c ****    {
 5086              		.loc 1 1767 0 is_stmt 0 discriminator 1
 5087 0043 F6460810 		testb	$16, 8(%rsi)
 5088 0047 0F85C300 		jne	.L538
 5088      0000
 5089              	.L513:
1774:fltk-1.3.4-1/png/pngrutil.c ****    {
 5090              		.loc 1 1774 0 is_stmt 1
 5091 004d 0FB69377 		movzbl	631(%rbx), %edx
 5091      020000
 5092              	.LVL640:
 5093 0054 84D2     		testb	%dl, %dl
 5094 0056 7548     		jne	.L514
 5095              	.LBB198:
1778:fltk-1.3.4-1/png/pngrutil.c ****       {
 5096              		.loc 1 1778 0
 5097 0058 83FD02   		cmpl	$2, %ebp
 5098 005b 0F843F01 		je	.L539
 5098      0000
 5099              	.L521:
 5100              	.LBE198:
1821:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_benign_error(png_ptr, "invalid");
 5101              		.loc 1 1821 0
 5102 0061 89EE     		movl	%ebp, %esi
 5103              	.LVL641:
 5104 0063 4889DF   		movq	%rbx, %rdi
 5105              	.LVL642:
 5106 0066 E8000000 		call	png_crc_finish
 5106      00
 5107              	.LVL643:
1822:fltk-1.3.4-1/png/pngrutil.c ****          return;
 5108              		.loc 1 1822 0
 5109 006b BE000000 		movl	$.LC31, %esi
 5109      00
 5110 0070 4889DF   		movq	%rbx, %rdi
 5111 0073 E8000000 		call	png_chunk_benign_error
 5111      00
 5112              	.LVL644:
 5113              	.L509:
1849:fltk-1.3.4-1/png/pngrutil.c **** #endif
 5114              		.loc 1 1849 0
 5115 0078 488B8424 		movq	264(%rsp), %rax
 5115      08010000 
 5116 0080 64483304 		xorq	%fs:40, %rax
 5116      25280000 
 5116      00
 5117 0089 0F85AC01 		jne	.L540
 5117      0000
 5118 008f 4881C418 		addq	$280, %rsp
 5118      010000
 5119              		.cfi_remember_state
 5120              		.cfi_def_cfa_offset 40
 5121 0096 5B       		popq	%rbx
 5122              		.cfi_def_cfa_offset 32
 5123              	.LVL645:
 5124 0097 5D       		popq	%rbp
 5125              		.cfi_def_cfa_offset 24
 5126              	.LVL646:
 5127 0098 415C     		popq	%r12
 5128              		.cfi_def_cfa_offset 16
 5129 009a 415D     		popq	%r13
 5130              		.cfi_def_cfa_offset 8
 5131 009c C3       		ret
 5132              	.LVL647:
 5133 009d 0F1F00   		.p2align 4,,10
 5134              		.p2align 3
 5135              	.L514:
 5136              		.cfi_restore_state
1790:fltk-1.3.4-1/png/pngrutil.c ****    {
 5137              		.loc 1 1790 0
 5138 00a0 80FA02   		cmpb	$2, %dl
 5139 00a3 0F848700 		je	.L541
 5139      0000
1808:fltk-1.3.4-1/png/pngrutil.c ****    {
 5140              		.loc 1 1808 0
 5141 00a9 80FA03   		cmpb	$3, %dl
 5142 00ac 0F853E01 		jne	.L519
 5142      0000
1810:fltk-1.3.4-1/png/pngrutil.c ****       {
 5143              		.loc 1 1810 0
 5144 00b2 A802     		testb	$2, %al
 5145 00b4 743A     		je	.L520
1818:fltk-1.3.4-1/png/pngrutil.c ****          length == 0)
 5146              		.loc 1 1818 0
 5147 00b6 0FB78368 		movzwl	616(%rbx), %eax
 5147      020000
 5148 00bd 39C5     		cmpl	%eax, %ebp
 5149 00bf 77A0     		ja	.L521
1818:fltk-1.3.4-1/png/pngrutil.c ****          length == 0)
 5150              		.loc 1 1818 0 is_stmt 0 discriminator 1
 5151 00c1 8D45FF   		leal	-1(%rbp), %eax
 5152 00c4 3DFF0000 		cmpl	$255, %eax
 5152      00
 5153 00c9 7796     		ja	.L521
1826:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->num_trans = (png_uint_16)length;
 5154              		.loc 1 1826 0 is_stmt 1
 5155 00cb 89EA     		movl	%ebp, %edx
 5156 00cd 4889E6   		movq	%rsp, %rsi
 5157              	.LVL648:
 5158 00d0 4889DF   		movq	%rbx, %rdi
 5159 00d3 E8000000 		call	png_crc_read
 5159      00
 5160              	.LVL649:
 5161 00d8 4989E5   		movq	%rsp, %r13
1827:fltk-1.3.4-1/png/pngrutil.c ****    }
 5162              		.loc 1 1827 0
 5163 00db 6689AB70 		movw	%bp, 624(%rbx)
 5163      020000
 5164 00e2 E9ED0000 		jmp	.L516
 5164      00
 5165              	.LVL650:
 5166 00e7 660F1F84 		.p2align 4,,10
 5166      00000000 
 5166      00
 5167              		.p2align 3
 5168              	.L520:
1762:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
 5169              		.loc 1 1762 0
 5170 00f0 89EE     		movl	%ebp, %esi
 5171              	.LVL651:
 5172 00f2 4889DF   		movq	%rbx, %rdi
 5173 00f5 E8000000 		call	png_crc_finish
 5173      00
 5174              	.LVL652:
1763:fltk-1.3.4-1/png/pngrutil.c ****       return;
 5175              		.loc 1 1763 0
 5176 00fa BE000000 		movl	$.LC30, %esi
 5176      00
 5177 00ff 4889DF   		movq	%rbx, %rdi
 5178 0102 E8000000 		call	png_chunk_benign_error
 5178      00
 5179              	.LVL653:
1764:fltk-1.3.4-1/png/pngrutil.c ****    }
 5180              		.loc 1 1764 0
 5181 0107 E96CFFFF 		jmp	.L509
 5181      FF
 5182              	.LVL654:
 5183 010c 0F1F4000 		.p2align 4,,10
 5184              		.p2align 3
 5185              	.L538:
1769:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "duplicate");
 5186              		.loc 1 1769 0
 5187 0110 89D6     		movl	%edx, %esi
 5188              	.LVL655:
 5189 0112 E8000000 		call	png_crc_finish
 5189      00
 5190              	.LVL656:
1770:fltk-1.3.4-1/png/pngrutil.c ****       return;
 5191              		.loc 1 1770 0
 5192 0117 BE000000 		movl	$.LC34, %esi
 5192      00
 5193 011c 4889DF   		movq	%rbx, %rdi
 5194 011f E8000000 		call	png_chunk_benign_error
 5194      00
 5195              	.LVL657:
1771:fltk-1.3.4-1/png/pngrutil.c ****    }
 5196              		.loc 1 1771 0
 5197 0124 E94FFFFF 		jmp	.L509
 5197      FF
 5198              	.LVL658:
 5199 0129 0F1F8000 		.p2align 4,,10
 5199      000000
 5200              		.p2align 3
 5201              	.L541:
 5202              	.LBB199:
1794:fltk-1.3.4-1/png/pngrutil.c ****       {
 5203              		.loc 1 1794 0
 5204 0130 83FD06   		cmpl	$6, %ebp
 5205 0133 0F8528FF 		jne	.L521
 5205      FFFF
1801:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->num_trans = 1;
 5206              		.loc 1 1801 0
 5207 0139 BA060000 		movl	$6, %edx
 5207      00
 5208 013e 4889E6   		movq	%rsp, %rsi
 5209              	.LVL659:
 5210 0141 4889DF   		movq	%rbx, %rdi
 5211 0144 E8000000 		call	png_crc_read
 5211      00
 5212              	.LVL660:
1802:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->trans_color.red = png_get_uint_16(buf);
 5213              		.loc 1 1802 0
 5214 0149 BA010000 		movl	$1, %edx
 5214      00
1803:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->trans_color.green = png_get_uint_16(buf + 2);
 5215              		.loc 1 1803 0
 5216 014e 0FB60424 		movzbl	(%rsp), %eax
1801:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->num_trans = 1;
 5217              		.loc 1 1801 0
 5218 0152 4989E5   		movq	%rsp, %r13
1802:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->trans_color.red = png_get_uint_16(buf);
 5219              		.loc 1 1802 0
 5220 0155 66899370 		movw	%dx, 624(%rbx)
 5220      020000
1803:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->trans_color.green = png_get_uint_16(buf + 2);
 5221              		.loc 1 1803 0
 5222 015c 0FB65424 		movzbl	1(%rsp), %edx
 5222      01
 5223 0161 C1E008   		sall	$8, %eax
 5224 0164 01D0     		addl	%edx, %eax
1804:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->trans_color.blue = png_get_uint_16(buf + 4);
 5225              		.loc 1 1804 0
 5226 0166 0FB65424 		movzbl	3(%rsp), %edx
 5226      03
1803:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->trans_color.green = png_get_uint_16(buf + 2);
 5227              		.loc 1 1803 0
 5228 016b 66898302 		movw	%ax, 770(%rbx)
 5228      030000
1804:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->trans_color.blue = png_get_uint_16(buf + 4);
 5229              		.loc 1 1804 0
 5230 0172 0FB64424 		movzbl	2(%rsp), %eax
 5230      02
 5231 0177 C1E008   		sall	$8, %eax
 5232 017a 01D0     		addl	%edx, %eax
1805:fltk-1.3.4-1/png/pngrutil.c ****    }
 5233              		.loc 1 1805 0
 5234 017c 0FB65424 		movzbl	5(%rsp), %edx
 5234      05
1804:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->trans_color.blue = png_get_uint_16(buf + 4);
 5235              		.loc 1 1804 0
 5236 0181 66898304 		movw	%ax, 772(%rbx)
 5236      030000
1805:fltk-1.3.4-1/png/pngrutil.c ****    }
 5237              		.loc 1 1805 0
 5238 0188 0FB64424 		movzbl	4(%rsp), %eax
 5238      04
 5239 018d C1E008   		sall	$8, %eax
 5240 0190 01D0     		addl	%edx, %eax
 5241 0192 66898306 		movw	%ax, 774(%rbx)
 5241      030000
 5242              	.LBE199:
 5243 0199 EB39     		jmp	.L516
 5244              	.LVL661:
 5245 019b 0F1F4400 		.p2align 4,,10
 5245      00
 5246              		.p2align 3
 5247              	.L539:
 5248              	.LBB200:
1785:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->num_trans = 1;
 5249              		.loc 1 1785 0
 5250 01a0 BA020000 		movl	$2, %edx
 5250      00
 5251 01a5 4889E6   		movq	%rsp, %rsi
 5252              	.LVL662:
 5253 01a8 4889DF   		movq	%rbx, %rdi
 5254 01ab E8000000 		call	png_crc_read
 5254      00
 5255              	.LVL663:
1787:fltk-1.3.4-1/png/pngrutil.c ****    }
 5256              		.loc 1 1787 0
 5257 01b0 0FB60424 		movzbl	(%rsp), %eax
 5258 01b4 0FB65424 		movzbl	1(%rsp), %edx
 5258      01
1786:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->trans_color.gray = png_get_uint_16(buf);
 5259              		.loc 1 1786 0
 5260 01b9 B9010000 		movl	$1, %ecx
 5260      00
1785:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->num_trans = 1;
 5261              		.loc 1 1785 0
 5262 01be 4989E5   		movq	%rsp, %r13
1786:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->trans_color.gray = png_get_uint_16(buf);
 5263              		.loc 1 1786 0
 5264 01c1 66898B70 		movw	%cx, 624(%rbx)
 5264      020000
1787:fltk-1.3.4-1/png/pngrutil.c ****    }
 5265              		.loc 1 1787 0
 5266 01c8 C1E008   		sall	$8, %eax
 5267 01cb 01D0     		addl	%edx, %eax
 5268 01cd 66898308 		movw	%ax, 776(%rbx)
 5268      030000
 5269              	.L516:
 5270              	.LBE200:
1837:fltk-1.3.4-1/png/pngrutil.c ****    {
 5271              		.loc 1 1837 0
 5272 01d4 31F6     		xorl	%esi, %esi
 5273 01d6 4889DF   		movq	%rbx, %rdi
 5274 01d9 E8000000 		call	png_crc_finish
 5274      00
 5275              	.LVL664:
 5276 01de 85C0     		testl	%eax, %eax
 5277 01e0 742E     		je	.L523
1839:fltk-1.3.4-1/png/pngrutil.c ****       return;
 5278              		.loc 1 1839 0
 5279 01e2 31C0     		xorl	%eax, %eax
 5280 01e4 66898370 		movw	%ax, 624(%rbx)
 5280      020000
1840:fltk-1.3.4-1/png/pngrutil.c ****    }
 5281              		.loc 1 1840 0
 5282 01eb E988FEFF 		jmp	.L509
 5282      FF
 5283              	.LVL665:
 5284              		.p2align 4,,10
 5285              		.p2align 3
 5286              	.L519:
1832:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid with alpha channel");
 5287              		.loc 1 1832 0
 5288 01f0 89EE     		movl	%ebp, %esi
 5289              	.LVL666:
 5290 01f2 4889DF   		movq	%rbx, %rdi
 5291 01f5 E8000000 		call	png_crc_finish
 5291      00
 5292              	.LVL667:
1833:fltk-1.3.4-1/png/pngrutil.c ****       return;
 5293              		.loc 1 1833 0
 5294 01fa BE000000 		movl	$.LC58, %esi
 5294      00
 5295 01ff 4889DF   		movq	%rbx, %rdi
 5296 0202 E8000000 		call	png_chunk_benign_error
 5296      00
 5297              	.LVL668:
1834:fltk-1.3.4-1/png/pngrutil.c ****    }
 5298              		.loc 1 1834 0
 5299 0207 E96CFEFF 		jmp	.L509
 5299      FF
 5300 020c 0F1F4000 		.p2align 4,,10
 5301              		.p2align 3
 5302              	.L523:
1847:fltk-1.3.4-1/png/pngrutil.c ****        &(png_ptr->trans_color));
 5303              		.loc 1 1847 0
 5304 0210 0FB78B70 		movzwl	624(%rbx), %ecx
 5304      020000
 5305 0217 4C8D8300 		leaq	768(%rbx), %r8
 5305      030000
 5306 021e 4C89EA   		movq	%r13, %rdx
 5307 0221 4C89E6   		movq	%r12, %rsi
 5308 0224 4889DF   		movq	%rbx, %rdi
 5309 0227 E8000000 		call	png_set_tRNS
 5309      00
 5310              	.LVL669:
 5311 022c E947FEFF 		jmp	.L509
 5311      FF
 5312              	.LVL670:
 5313              	.L537:
1758:fltk-1.3.4-1/png/pngrutil.c **** 
 5314              		.loc 1 1758 0
 5315 0231 BE000000 		movl	$.LC33, %esi
 5315      00
 5316              	.LVL671:
 5317 0236 E8000000 		call	png_chunk_error
 5317      00
 5318              	.LVL672:
 5319              	.L540:
1849:fltk-1.3.4-1/png/pngrutil.c **** #endif
 5320              		.loc 1 1849 0
 5321 023b E8000000 		call	__stack_chk_fail
 5321      00
 5322              	.LVL673:
 5323              		.cfi_endproc
 5324              	.LFE80:
 5326              		.section	.text.unlikely.png_handle_tRNS
 5327              	.LCOLDE59:
 5328              		.section	.text.png_handle_tRNS
 5329              	.LHOTE59:
 5330              		.section	.rodata.str1.1
 5331              	.LC60:
 5332 0184 696E7661 		.string	"invalid index"
 5332      6C696420 
 5332      696E6465 
 5332      7800
 5333              		.section	.text.unlikely.png_handle_bKGD,"ax",@progbits
 5334              	.LCOLDB61:
 5335              		.section	.text.png_handle_bKGD,"ax",@progbits
 5336              	.LHOTB61:
 5337              		.p2align 4,,15
 5338              		.globl	png_handle_bKGD
 5340              	png_handle_bKGD:
 5341              	.LFB81:
1855:fltk-1.3.4-1/png/pngrutil.c ****    unsigned int truelen;
 5342              		.loc 1 1855 0
 5343              		.cfi_startproc
 5344              	.LVL674:
 5345 0000 55       		pushq	%rbp
 5346              		.cfi_def_cfa_offset 16
 5347              		.cfi_offset 6, -16
 5348 0001 53       		pushq	%rbx
 5349              		.cfi_def_cfa_offset 24
 5350              		.cfi_offset 3, -24
 5351 0002 4889FB   		movq	%rdi, %rbx
 5352 0005 4883EC28 		subq	$40, %rsp
 5353              		.cfi_def_cfa_offset 64
1855:fltk-1.3.4-1/png/pngrutil.c ****    unsigned int truelen;
 5354              		.loc 1 1855 0
 5355 0009 64488B04 		movq	%fs:40, %rax
 5355      25280000 
 5355      00
 5356 0012 48894424 		movq	%rax, 24(%rsp)
 5356      18
 5357 0017 31C0     		xorl	%eax, %eax
1862:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
 5358              		.loc 1 1862 0
 5359 0019 8B872C01 		movl	300(%rdi), %eax
 5359      0000
 5360 001f A801     		testb	$1, %al
 5361 0021 0F840702 		je	.L574
 5361      0000
1865:fltk-1.3.4-1/png/pngrutil.c ****        (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE &&
 5362              		.loc 1 1865 0
 5363 0027 A804     		testb	$4, %al
 5364 0029 756D     		jne	.L544
1866:fltk-1.3.4-1/png/pngrutil.c ****        (png_ptr->mode & PNG_HAVE_PLTE) == 0))
 5365              		.loc 1 1866 0 discriminator 1
 5366 002b 0FB68F77 		movzbl	631(%rdi), %ecx
 5366      020000
 5367 0032 4889F5   		movq	%rsi, %rbp
1865:fltk-1.3.4-1/png/pngrutil.c ****        (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE &&
 5368              		.loc 1 1865 0 discriminator 1
 5369 0035 80F903   		cmpb	$3, %cl
 5370 0038 747E     		je	.L575
1874:fltk-1.3.4-1/png/pngrutil.c ****    {
 5371              		.loc 1 1874 0
 5372 003a 4885F6   		testq	%rsi, %rsi
 5373 003d 740A     		je	.L558
 5374 003f F6460820 		testb	$32, 8(%rsi)
 5375 0043 0F858700 		jne	.L559
 5375      0000
 5376              	.L558:
1884:fltk-1.3.4-1/png/pngrutil.c ****       truelen = 6;
 5377              		.loc 1 1884 0
 5378 0049 83E102   		andl	$2, %ecx
1888:fltk-1.3.4-1/png/pngrutil.c **** 
 5379              		.loc 1 1888 0
 5380 004c 80F901   		cmpb	$1, %cl
 5381 004f 19C0     		sbbl	%eax, %eax
 5382 0051 83E0FC   		andl	$-4, %eax
 5383 0054 83C006   		addl	$6, %eax
 5384              	.L548:
 5385              	.LVL675:
1890:fltk-1.3.4-1/png/pngrutil.c ****    {
 5386              		.loc 1 1890 0
 5387 0057 39D0     		cmpl	%edx, %eax
 5388 0059 0F849100 		je	.L549
 5388      0000
1892:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid");
 5389              		.loc 1 1892 0
 5390 005f 89D6     		movl	%edx, %esi
 5391              	.LVL676:
 5392 0061 4889DF   		movq	%rbx, %rdi
 5393              	.LVL677:
 5394 0064 E8000000 		call	png_crc_finish
 5394      00
 5395              	.LVL678:
1893:fltk-1.3.4-1/png/pngrutil.c ****       return;
 5396              		.loc 1 1893 0
 5397 0069 BE000000 		movl	$.LC31, %esi
 5397      00
 5398 006e 4889DF   		movq	%rbx, %rdi
 5399 0071 E8000000 		call	png_chunk_benign_error
 5399      00
 5400              	.LVL679:
 5401              	.L542:
1949:fltk-1.3.4-1/png/pngrutil.c **** #endif
 5402              		.loc 1 1949 0
 5403 0076 488B4424 		movq	24(%rsp), %rax
 5403      18
 5404 007b 64483304 		xorq	%fs:40, %rax
 5404      25280000 
 5404      00
 5405 0084 0F859F01 		jne	.L576
 5405      0000
 5406 008a 4883C428 		addq	$40, %rsp
 5407              		.cfi_remember_state
 5408              		.cfi_def_cfa_offset 24
 5409 008e 5B       		popq	%rbx
 5410              		.cfi_def_cfa_offset 16
 5411              	.LVL680:
 5412 008f 5D       		popq	%rbp
 5413              		.cfi_def_cfa_offset 8
 5414 0090 C3       		ret
 5415              	.LVL681:
 5416              		.p2align 4,,10
 5417 0091 0F1F8000 		.p2align 3
 5417      000000
 5418              	.L544:
 5419              		.cfi_restore_state
1869:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
 5420              		.loc 1 1869 0
 5421 0098 89D6     		movl	%edx, %esi
 5422              	.LVL682:
 5423 009a 4889DF   		movq	%rbx, %rdi
 5424 009d E8000000 		call	png_crc_finish
 5424      00
 5425              	.LVL683:
1870:fltk-1.3.4-1/png/pngrutil.c ****       return;
 5426              		.loc 1 1870 0
 5427 00a2 BE000000 		movl	$.LC30, %esi
 5427      00
 5428 00a7 4889DF   		movq	%rbx, %rdi
 5429 00aa E8000000 		call	png_chunk_benign_error
 5429      00
 5430              	.LVL684:
1871:fltk-1.3.4-1/png/pngrutil.c ****    }
 5431              		.loc 1 1871 0
 5432 00af EBC5     		jmp	.L542
 5433              	.LVL685:
 5434              		.p2align 4,,10
 5435 00b1 0F1F8000 		.p2align 3
 5435      000000
 5436              	.L575:
1866:fltk-1.3.4-1/png/pngrutil.c ****        (png_ptr->mode & PNG_HAVE_PLTE) == 0))
 5437              		.loc 1 1866 0
 5438 00b8 A802     		testb	$2, %al
 5439 00ba 74DC     		je	.L544
1874:fltk-1.3.4-1/png/pngrutil.c ****    {
 5440              		.loc 1 1874 0
 5441 00bc 4885F6   		testq	%rsi, %rsi
 5442 00bf 7406     		je	.L572
 5443 00c1 F6460820 		testb	$32, 8(%rsi)
 5444 00c5 7509     		jne	.L559
 5445              	.L572:
1882:fltk-1.3.4-1/png/pngrutil.c **** 
 5446              		.loc 1 1882 0
 5447 00c7 B8010000 		movl	$1, %eax
 5447      00
 5448 00cc EB89     		jmp	.L548
 5449 00ce 6690     		.p2align 4,,10
 5450              		.p2align 3
 5451              	.L559:
1876:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "duplicate");
 5452              		.loc 1 1876 0
 5453 00d0 89D6     		movl	%edx, %esi
 5454              	.LVL686:
 5455 00d2 4889DF   		movq	%rbx, %rdi
 5456 00d5 E8000000 		call	png_crc_finish
 5456      00
 5457              	.LVL687:
1877:fltk-1.3.4-1/png/pngrutil.c ****       return;
 5458              		.loc 1 1877 0
 5459 00da BE000000 		movl	$.LC34, %esi
 5459      00
 5460 00df 4889DF   		movq	%rbx, %rdi
 5461 00e2 E8000000 		call	png_chunk_benign_error
 5461      00
 5462              	.LVL688:
1878:fltk-1.3.4-1/png/pngrutil.c ****    }
 5463              		.loc 1 1878 0
 5464 00e7 EB8D     		jmp	.L542
 5465              	.LVL689:
 5466 00e9 0F1F8000 		.p2align 4,,10
 5466      000000
 5467              		.p2align 3
 5468              	.L549:
1897:fltk-1.3.4-1/png/pngrutil.c **** 
 5469              		.loc 1 1897 0
 5470 00f0 488D7424 		leaq	16(%rsp), %rsi
 5470      10
 5471              	.LVL690:
 5472 00f5 89C2     		movl	%eax, %edx
 5473              	.LVL691:
 5474 00f7 4889DF   		movq	%rbx, %rdi
 5475 00fa E8000000 		call	png_crc_read
 5475      00
 5476              	.LVL692:
1899:fltk-1.3.4-1/png/pngrutil.c ****       return;
 5477              		.loc 1 1899 0
 5478 00ff 31F6     		xorl	%esi, %esi
 5479 0101 4889DF   		movq	%rbx, %rdi
 5480 0104 E8000000 		call	png_crc_finish
 5480      00
 5481              	.LVL693:
 5482 0109 85C0     		testl	%eax, %eax
 5483 010b 0F8565FF 		jne	.L542
 5483      FFFF
1907:fltk-1.3.4-1/png/pngrutil.c ****    {
 5484              		.loc 1 1907 0
 5485 0111 0FB68377 		movzbl	631(%rbx), %eax
 5485      020000
 5486 0118 3C03     		cmpb	$3, %al
 5487 011a 7444     		je	.L577
1930:fltk-1.3.4-1/png/pngrutil.c ****    {
 5488              		.loc 1 1930 0
 5489 011c A802     		testb	$2, %al
1932:fltk-1.3.4-1/png/pngrutil.c ****       background.red =
 5490              		.loc 1 1932 0
 5491 011e C6042400 		movb	$0, (%rsp)
1936:fltk-1.3.4-1/png/pngrutil.c ****    }
 5492              		.loc 1 1936 0
 5493 0122 0FB64424 		movzbl	16(%rsp), %eax
 5493      10
1930:fltk-1.3.4-1/png/pngrutil.c ****    {
 5494              		.loc 1 1930 0
 5495 0127 0F859300 		jne	.L555
 5495      0000
1936:fltk-1.3.4-1/png/pngrutil.c ****    }
 5496              		.loc 1 1936 0
 5497 012d 0FB65424 		movzbl	17(%rsp), %edx
 5497      11
 5498 0132 C1E008   		sall	$8, %eax
 5499 0135 01D0     		addl	%edx, %eax
 5500 0137 66894424 		movw	%ax, 8(%rsp)
 5500      08
1935:fltk-1.3.4-1/png/pngrutil.c ****       background.gray = png_get_uint_16(buf);
 5501              		.loc 1 1935 0
 5502 013c 66894424 		movw	%ax, 6(%rsp)
 5502      06
1934:fltk-1.3.4-1/png/pngrutil.c ****       background.blue =
 5503              		.loc 1 1934 0
 5504 0141 66894424 		movw	%ax, 4(%rsp)
 5504      04
1933:fltk-1.3.4-1/png/pngrutil.c ****       background.green =
 5505              		.loc 1 1933 0
 5506 0146 66894424 		movw	%ax, 2(%rsp)
 5506      02
 5507              	.L554:
1948:fltk-1.3.4-1/png/pngrutil.c **** }
 5508              		.loc 1 1948 0
 5509 014b 4889E2   		movq	%rsp, %rdx
 5510 014e 4889EE   		movq	%rbp, %rsi
 5511 0151 4889DF   		movq	%rbx, %rdi
 5512 0154 E8000000 		call	png_set_bKGD
 5512      00
 5513              	.LVL694:
 5514 0159 E918FFFF 		jmp	.L542
 5514      FF
 5515 015e 6690     		.p2align 4,,10
 5516              		.p2align 3
 5517              	.L577:
1909:fltk-1.3.4-1/png/pngrutil.c **** 
 5518              		.loc 1 1909 0
 5519 0160 0FB64424 		movzbl	16(%rsp), %eax
 5519      10
1911:fltk-1.3.4-1/png/pngrutil.c ****       {
 5520              		.loc 1 1911 0
 5521 0165 4885ED   		testq	%rbp, %rbp
1909:fltk-1.3.4-1/png/pngrutil.c **** 
 5522              		.loc 1 1909 0
 5523 0168 880424   		movb	%al, (%rsp)
1911:fltk-1.3.4-1/png/pngrutil.c ****       {
 5524              		.loc 1 1911 0
 5525 016b 0F848F00 		je	.L551
 5525      0000
1911:fltk-1.3.4-1/png/pngrutil.c ****       {
 5526              		.loc 1 1911 0 is_stmt 0 discriminator 1
 5527 0171 0FB75520 		movzwl	32(%rbp), %edx
 5528 0175 6685D2   		testw	%dx, %dx
 5529 0178 0F848200 		je	.L551
 5529      0000
1913:fltk-1.3.4-1/png/pngrutil.c ****          {
 5530              		.loc 1 1913 0 is_stmt 1
 5531 017e 0FB6C8   		movzbl	%al, %ecx
 5532 0181 6639CA   		cmpw	%cx, %dx
 5533 0184 0F868D00 		jbe	.L578
 5533      0000
1919:fltk-1.3.4-1/png/pngrutil.c ****          background.green = (png_uint_16)png_ptr->palette[buf[0]].green;
 5534              		.loc 1 1919 0
 5535 018a 488D0440 		leaq	(%rax,%rax,2), %rax
 5536 018e 48038360 		addq	608(%rbx), %rax
 5536      020000
 5537 0195 0FB610   		movzbl	(%rax), %edx
 5538 0198 66895424 		movw	%dx, 2(%rsp)
 5538      02
1920:fltk-1.3.4-1/png/pngrutil.c ****          background.blue = (png_uint_16)png_ptr->palette[buf[0]].blue;
 5539              		.loc 1 1920 0
 5540 019d 0FB65001 		movzbl	1(%rax), %edx
 5541 01a1 66895424 		movw	%dx, 4(%rsp)
 5541      04
1921:fltk-1.3.4-1/png/pngrutil.c ****       }
 5542              		.loc 1 1921 0
 5543 01a6 0FB64002 		movzbl	2(%rax), %eax
 5544 01aa 66894424 		movw	%ax, 6(%rsp)
 5544      06
 5545 01af 90       		.p2align 4,,10
 5546              		.p2align 3
 5547              	.L573:
1945:fltk-1.3.4-1/png/pngrutil.c ****    }
 5548              		.loc 1 1945 0
 5549 01b0 31C0     		xorl	%eax, %eax
 5550 01b2 66894424 		movw	%ax, 8(%rsp)
 5550      08
 5551 01b7 EB92     		jmp	.L554
 5552 01b9 0F1F8000 		.p2align 4,,10
 5552      000000
 5553              		.p2align 3
 5554              	.L555:
1942:fltk-1.3.4-1/png/pngrutil.c ****       background.green = png_get_uint_16(buf + 2);
 5555              		.loc 1 1942 0
 5556 01c0 0FB65424 		movzbl	17(%rsp), %edx
 5556      11
 5557 01c5 C1E008   		sall	$8, %eax
 5558 01c8 01D0     		addl	%edx, %eax
1943:fltk-1.3.4-1/png/pngrutil.c ****       background.blue = png_get_uint_16(buf + 4);
 5559              		.loc 1 1943 0
 5560 01ca 0FB65424 		movzbl	19(%rsp), %edx
 5560      13
1942:fltk-1.3.4-1/png/pngrutil.c ****       background.green = png_get_uint_16(buf + 2);
 5561              		.loc 1 1942 0
 5562 01cf 66894424 		movw	%ax, 2(%rsp)
 5562      02
1943:fltk-1.3.4-1/png/pngrutil.c ****       background.blue = png_get_uint_16(buf + 4);
 5563              		.loc 1 1943 0
 5564 01d4 0FB64424 		movzbl	18(%rsp), %eax
 5564      12
 5565 01d9 C1E008   		sall	$8, %eax
 5566 01dc 01D0     		addl	%edx, %eax
1944:fltk-1.3.4-1/png/pngrutil.c ****       background.gray = 0;
 5567              		.loc 1 1944 0
 5568 01de 0FB65424 		movzbl	21(%rsp), %edx
 5568      15
1943:fltk-1.3.4-1/png/pngrutil.c ****       background.blue = png_get_uint_16(buf + 4);
 5569              		.loc 1 1943 0
 5570 01e3 66894424 		movw	%ax, 4(%rsp)
 5570      04
1944:fltk-1.3.4-1/png/pngrutil.c ****       background.gray = 0;
 5571              		.loc 1 1944 0
 5572 01e8 0FB64424 		movzbl	20(%rsp), %eax
 5572      14
 5573 01ed C1E008   		sall	$8, %eax
 5574 01f0 01D0     		addl	%edx, %eax
 5575 01f2 66894424 		movw	%ax, 6(%rsp)
 5575      06
 5576 01f7 EBB7     		jmp	.L573
 5577 01f9 0F1F8000 		.p2align 4,,10
 5577      000000
 5578              		.p2align 3
 5579              	.L551:
1925:fltk-1.3.4-1/png/pngrutil.c **** 
 5580              		.loc 1 1925 0
 5581 0200 31D2     		xorl	%edx, %edx
 5582 0202 31C9     		xorl	%ecx, %ecx
 5583 0204 31F6     		xorl	%esi, %esi
 5584 0206 66895424 		movw	%dx, 6(%rsp)
 5584      06
 5585 020b 66894C24 		movw	%cx, 4(%rsp)
 5585      04
 5586 0210 66897424 		movw	%si, 2(%rsp)
 5586      02
 5587 0215 EB99     		jmp	.L573
 5588              	.L578:
1915:fltk-1.3.4-1/png/pngrutil.c ****             return;
 5589              		.loc 1 1915 0
 5590 0217 BE000000 		movl	$.LC60, %esi
 5590      00
 5591 021c 4889DF   		movq	%rbx, %rdi
 5592 021f E8000000 		call	png_chunk_benign_error
 5592      00
 5593              	.LVL695:
1916:fltk-1.3.4-1/png/pngrutil.c ****          }
 5594              		.loc 1 1916 0
 5595 0224 E94DFEFF 		jmp	.L542
 5595      FF
 5596              	.LVL696:
 5597              	.L576:
1949:fltk-1.3.4-1/png/pngrutil.c **** #endif
 5598              		.loc 1 1949 0
 5599 0229 E8000000 		call	__stack_chk_fail
 5599      00
 5600              	.LVL697:
 5601              	.L574:
1863:fltk-1.3.4-1/png/pngrutil.c **** 
 5602              		.loc 1 1863 0
 5603 022e BE000000 		movl	$.LC33, %esi
 5603      00
 5604              	.LVL698:
 5605 0233 E8000000 		call	png_chunk_error
 5605      00
 5606              	.LVL699:
 5607              		.cfi_endproc
 5608              	.LFE81:
 5610              		.section	.text.unlikely.png_handle_bKGD
 5611              	.LCOLDE61:
 5612              		.section	.text.png_handle_bKGD
 5613              	.LHOTE61:
 5614              		.section	.text.unlikely.png_handle_hIST,"ax",@progbits
 5615              	.LCOLDB62:
 5616              		.section	.text.png_handle_hIST,"ax",@progbits
 5617              	.LHOTB62:
 5618              		.p2align 4,,15
 5619              		.globl	png_handle_hIST
 5621              	png_handle_hIST:
 5622              	.LFB82:
1955:fltk-1.3.4-1/png/pngrutil.c ****    unsigned int num, i;
 5623              		.loc 1 1955 0
 5624              		.cfi_startproc
 5625              	.LVL700:
 5626 0000 4155     		pushq	%r13
 5627              		.cfi_def_cfa_offset 16
 5628              		.cfi_offset 13, -16
 5629 0002 4154     		pushq	%r12
 5630              		.cfi_def_cfa_offset 24
 5631              		.cfi_offset 12, -24
 5632 0004 55       		pushq	%rbp
 5633              		.cfi_def_cfa_offset 32
 5634              		.cfi_offset 6, -32
 5635 0005 53       		pushq	%rbx
 5636              		.cfi_def_cfa_offset 40
 5637              		.cfi_offset 3, -40
 5638 0006 4889FD   		movq	%rdi, %rbp
 5639 0009 4881EC18 		subq	$536, %rsp
 5639      020000
 5640              		.cfi_def_cfa_offset 576
1955:fltk-1.3.4-1/png/pngrutil.c ****    unsigned int num, i;
 5641              		.loc 1 1955 0
 5642 0010 64488B04 		movq	%fs:40, %rax
 5642      25280000 
 5642      00
 5643 0019 48898424 		movq	%rax, 520(%rsp)
 5643      08020000 
 5644 0021 31C0     		xorl	%eax, %eax
1961:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
 5645              		.loc 1 1961 0
 5646 0023 8B872C01 		movl	300(%rdi), %eax
 5646      0000
 5647 0029 A801     		testb	$1, %al
 5648 002b 0F841801 		je	.L601
 5648      0000
1964:fltk-1.3.4-1/png/pngrutil.c ****        (png_ptr->mode & PNG_HAVE_PLTE) == 0)
 5649              		.loc 1 1964 0
 5650 0031 83E006   		andl	$6, %eax
 5651 0034 83F802   		cmpl	$2, %eax
 5652 0037 743F     		je	.L581
1967:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
 5653              		.loc 1 1967 0
 5654 0039 89D6     		movl	%edx, %esi
 5655              	.LVL701:
 5656 003b E8000000 		call	png_crc_finish
 5656      00
 5657              	.LVL702:
1968:fltk-1.3.4-1/png/pngrutil.c ****       return;
 5658              		.loc 1 1968 0
 5659 0040 BE000000 		movl	$.LC30, %esi
 5659      00
 5660 0045 4889EF   		movq	%rbp, %rdi
 5661 0048 E8000000 		call	png_chunk_benign_error
 5661      00
 5662              	.LVL703:
 5663              	.L579:
2000:fltk-1.3.4-1/png/pngrutil.c **** #endif
 5664              		.loc 1 2000 0
 5665 004d 488B8424 		movq	520(%rsp), %rax
 5665      08020000 
 5666 0055 64483304 		xorq	%fs:40, %rax
 5666      25280000 
 5666      00
 5667 005e 0F85EF00 		jne	.L602
 5667      0000
 5668 0064 4881C418 		addq	$536, %rsp
 5668      020000
 5669              		.cfi_remember_state
 5670              		.cfi_def_cfa_offset 40
 5671 006b 5B       		popq	%rbx
 5672              		.cfi_def_cfa_offset 32
 5673 006c 5D       		popq	%rbp
 5674              		.cfi_def_cfa_offset 24
 5675              	.LVL704:
 5676 006d 415C     		popq	%r12
 5677              		.cfi_def_cfa_offset 16
 5678 006f 415D     		popq	%r13
 5679              		.cfi_def_cfa_offset 8
 5680 0071 C3       		ret
 5681              	.LVL705:
 5682              		.p2align 4,,10
 5683 0072 660F1F44 		.p2align 3
 5683      0000
 5684              	.L581:
 5685              		.cfi_restore_state
1972:fltk-1.3.4-1/png/pngrutil.c ****    {
 5686              		.loc 1 1972 0
 5687 0078 4885F6   		testq	%rsi, %rsi
 5688 007b 4989F5   		movq	%rsi, %r13
 5689 007e 740A     		je	.L583
1972:fltk-1.3.4-1/png/pngrutil.c ****    {
 5690              		.loc 1 1972 0 is_stmt 0 discriminator 1
 5691 0080 F6460840 		testb	$64, 8(%rsi)
 5692 0084 0F85A600 		jne	.L603
 5692      0000
 5693              	.L583:
1981:fltk-1.3.4-1/png/pngrutil.c ****    {
 5694              		.loc 1 1981 0 is_stmt 1
 5695 008a 0FB78D68 		movzwl	616(%rbp), %ecx
 5695      020000
1979:fltk-1.3.4-1/png/pngrutil.c **** 
 5696              		.loc 1 1979 0
 5697 0091 89D0     		movl	%edx, %eax
 5698 0093 D1E8     		shrl	%eax
 5699              	.LVL706:
1981:fltk-1.3.4-1/png/pngrutil.c ****    {
 5700              		.loc 1 1981 0
 5701 0095 39C1     		cmpl	%eax, %ecx
 5702 0097 7577     		jne	.L584
 5703 0099 3D000100 		cmpl	$256, %eax
 5703      00
 5704 009e 7770     		ja	.L584
 5705              	.LVL707:
1988:fltk-1.3.4-1/png/pngrutil.c ****    {
 5706              		.loc 1 1988 0 discriminator 1
 5707 00a0 85C0     		testl	%eax, %eax
 5708 00a2 7443     		je	.L588
 5709 00a4 83E801   		subl	$1, %eax
 5710              	.LVL708:
 5711 00a7 4889E3   		movq	%rsp, %rbx
 5712 00aa 4C8D6444 		leaq	2(%rsp,%rax,2), %r12
 5712      02
 5713              	.LVL709:
 5714 00af 90       		.p2align 4,,10
 5715              		.p2align 3
 5716              	.L587:
 5717              	.LBB201:
1992:fltk-1.3.4-1/png/pngrutil.c ****       readbuf[i] = png_get_uint_16(buf);
 5718              		.loc 1 1992 0 discriminator 3
 5719 00b0 488DB424 		leaq	512(%rsp), %rsi
 5719      00020000 
 5720 00b8 BA020000 		movl	$2, %edx
 5720      00
 5721 00bd 4889EF   		movq	%rbp, %rdi
 5722 00c0 4883C302 		addq	$2, %rbx
 5723 00c4 E8000000 		call	png_crc_read
 5723      00
 5724              	.LVL710:
1993:fltk-1.3.4-1/png/pngrutil.c ****    }
 5725              		.loc 1 1993 0 discriminator 3
 5726 00c9 0FB68424 		movzbl	512(%rsp), %eax
 5726      00020000 
 5727 00d1 0FB69424 		movzbl	513(%rsp), %edx
 5727      01020000 
 5728 00d9 C1E008   		sall	$8, %eax
 5729 00dc 01D0     		addl	%edx, %eax
 5730 00de 668943FE 		movw	%ax, -2(%rbx)
 5731              	.LBE201:
1988:fltk-1.3.4-1/png/pngrutil.c ****    {
 5732              		.loc 1 1988 0 discriminator 3
 5733 00e2 4C39E3   		cmpq	%r12, %rbx
 5734 00e5 75C9     		jne	.L587
 5735              	.L588:
1996:fltk-1.3.4-1/png/pngrutil.c ****       return;
 5736              		.loc 1 1996 0
 5737 00e7 31F6     		xorl	%esi, %esi
 5738 00e9 4889EF   		movq	%rbp, %rdi
 5739 00ec E8000000 		call	png_crc_finish
 5739      00
 5740              	.LVL711:
 5741 00f1 85C0     		testl	%eax, %eax
 5742 00f3 0F8554FF 		jne	.L579
 5742      FFFF
1999:fltk-1.3.4-1/png/pngrutil.c **** }
 5743              		.loc 1 1999 0
 5744 00f9 4889E2   		movq	%rsp, %rdx
 5745 00fc 4C89EE   		movq	%r13, %rsi
 5746 00ff 4889EF   		movq	%rbp, %rdi
 5747 0102 E8000000 		call	png_set_hIST
 5747      00
 5748              	.LVL712:
 5749 0107 E941FFFF 		jmp	.L579
 5749      FF
 5750              	.LVL713:
 5751 010c 0F1F4000 		.p2align 4,,10
 5752              		.p2align 3
 5753              	.L584:
1983:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid");
 5754              		.loc 1 1983 0
 5755 0110 89D6     		movl	%edx, %esi
 5756              	.LVL714:
 5757 0112 4889EF   		movq	%rbp, %rdi
 5758              	.LVL715:
 5759 0115 E8000000 		call	png_crc_finish
 5759      00
 5760              	.LVL716:
1984:fltk-1.3.4-1/png/pngrutil.c ****       return;
 5761              		.loc 1 1984 0
 5762 011a BE000000 		movl	$.LC31, %esi
 5762      00
 5763 011f 4889EF   		movq	%rbp, %rdi
 5764 0122 E8000000 		call	png_chunk_benign_error
 5764      00
 5765              	.LVL717:
1985:fltk-1.3.4-1/png/pngrutil.c ****    }
 5766              		.loc 1 1985 0
 5767 0127 E921FFFF 		jmp	.L579
 5767      FF
 5768              	.LVL718:
 5769 012c 0F1F4000 		.p2align 4,,10
 5770              		.p2align 3
 5771              	.L603:
1974:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "duplicate");
 5772              		.loc 1 1974 0
 5773 0130 89D6     		movl	%edx, %esi
 5774              	.LVL719:
 5775 0132 E8000000 		call	png_crc_finish
 5775      00
 5776              	.LVL720:
1975:fltk-1.3.4-1/png/pngrutil.c ****       return;
 5777              		.loc 1 1975 0
 5778 0137 BE000000 		movl	$.LC34, %esi
 5778      00
 5779 013c 4889EF   		movq	%rbp, %rdi
 5780 013f E8000000 		call	png_chunk_benign_error
 5780      00
 5781              	.LVL721:
1976:fltk-1.3.4-1/png/pngrutil.c ****    }
 5782              		.loc 1 1976 0
 5783 0144 E904FFFF 		jmp	.L579
 5783      FF
 5784              	.LVL722:
 5785              	.L601:
1962:fltk-1.3.4-1/png/pngrutil.c **** 
 5786              		.loc 1 1962 0
 5787 0149 BE000000 		movl	$.LC33, %esi
 5787      00
 5788              	.LVL723:
 5789 014e E8000000 		call	png_chunk_error
 5789      00
 5790              	.LVL724:
 5791              	.L602:
2000:fltk-1.3.4-1/png/pngrutil.c **** #endif
 5792              		.loc 1 2000 0
 5793 0153 E8000000 		call	__stack_chk_fail
 5793      00
 5794              	.LVL725:
 5795              		.cfi_endproc
 5796              	.LFE82:
 5798              		.section	.text.unlikely.png_handle_hIST
 5799              	.LCOLDE62:
 5800              		.section	.text.png_handle_hIST
 5801              	.LHOTE62:
 5802              		.section	.text.unlikely.png_handle_pHYs,"ax",@progbits
 5803              	.LCOLDB63:
 5804              		.section	.text.png_handle_pHYs,"ax",@progbits
 5805              	.LHOTB63:
 5806              		.p2align 4,,15
 5807              		.globl	png_handle_pHYs
 5809              	png_handle_pHYs:
 5810              	.LFB83:
2006:fltk-1.3.4-1/png/pngrutil.c ****    png_byte buf[9];
 5811              		.loc 1 2006 0
 5812              		.cfi_startproc
 5813              	.LVL726:
 5814 0000 55       		pushq	%rbp
 5815              		.cfi_def_cfa_offset 16
 5816              		.cfi_offset 6, -16
 5817 0001 53       		pushq	%rbx
 5818              		.cfi_def_cfa_offset 24
 5819              		.cfi_offset 3, -24
 5820 0002 4889FB   		movq	%rdi, %rbx
 5821 0005 4883EC28 		subq	$40, %rsp
 5822              		.cfi_def_cfa_offset 64
2006:fltk-1.3.4-1/png/pngrutil.c ****    png_byte buf[9];
 5823              		.loc 1 2006 0
 5824 0009 64488B04 		movq	%fs:40, %rax
 5824      25280000 
 5824      00
 5825 0012 48894424 		movq	%rax, 24(%rsp)
 5825      18
 5826 0017 31C0     		xorl	%eax, %eax
2013:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
 5827              		.loc 1 2013 0
 5828 0019 8B872C01 		movl	300(%rdi), %eax
 5828      0000
 5829 001f A801     		testb	$1, %al
 5830 0021 0F840601 		je	.L619
 5830      0000
2016:fltk-1.3.4-1/png/pngrutil.c ****    {
 5831              		.loc 1 2016 0
 5832 0027 A804     		testb	$4, %al
 5833 0029 7545     		jne	.L620
2023:fltk-1.3.4-1/png/pngrutil.c ****    {
 5834              		.loc 1 2023 0
 5835 002b 4885F6   		testq	%rsi, %rsi
 5836 002e 4889F5   		movq	%rsi, %rbp
 5837 0031 7406     		je	.L608
2023:fltk-1.3.4-1/png/pngrutil.c ****    {
 5838              		.loc 1 2023 0 is_stmt 0 discriminator 1
 5839 0033 F6460880 		testb	$-128, 8(%rsi)
 5840 0037 7557     		jne	.L621
 5841              	.L608:
2030:fltk-1.3.4-1/png/pngrutil.c ****    {
 5842              		.loc 1 2030 0 is_stmt 1
 5843 0039 83FA09   		cmpl	$9, %edx
 5844 003c 7472     		je	.L609
2032:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid");
 5845              		.loc 1 2032 0
 5846 003e 89D6     		movl	%edx, %esi
 5847              	.LVL727:
 5848 0040 4889DF   		movq	%rbx, %rdi
 5849              	.LVL728:
 5850 0043 E8000000 		call	png_crc_finish
 5850      00
 5851              	.LVL729:
2033:fltk-1.3.4-1/png/pngrutil.c ****       return;
 5852              		.loc 1 2033 0
 5853 0048 BE000000 		movl	$.LC31, %esi
 5853      00
 5854 004d 4889DF   		movq	%rbx, %rdi
 5855 0050 E8000000 		call	png_chunk_benign_error
 5855      00
 5856              	.LVL730:
 5857              	.L604:
2046:fltk-1.3.4-1/png/pngrutil.c **** #endif
 5858              		.loc 1 2046 0
 5859 0055 488B4424 		movq	24(%rsp), %rax
 5859      18
 5860 005a 64483304 		xorq	%fs:40, %rax
 5860      25280000 
 5860      00
 5861 0063 0F85CE00 		jne	.L622
 5861      0000
 5862 0069 4883C428 		addq	$40, %rsp
 5863              		.cfi_remember_state
 5864              		.cfi_def_cfa_offset 24
 5865 006d 5B       		popq	%rbx
 5866              		.cfi_def_cfa_offset 16
 5867              	.LVL731:
 5868 006e 5D       		popq	%rbp
 5869              		.cfi_def_cfa_offset 8
 5870 006f C3       		ret
 5871              	.LVL732:
 5872              		.p2align 4,,10
 5873              		.p2align 3
 5874              	.L620:
 5875              		.cfi_restore_state
2018:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
 5876              		.loc 1 2018 0
 5877 0070 89D6     		movl	%edx, %esi
 5878              	.LVL733:
 5879 0072 E8000000 		call	png_crc_finish
 5879      00
 5880              	.LVL734:
2019:fltk-1.3.4-1/png/pngrutil.c ****       return;
 5881              		.loc 1 2019 0
 5882 0077 BE000000 		movl	$.LC30, %esi
 5882      00
 5883 007c 4889DF   		movq	%rbx, %rdi
 5884 007f E8000000 		call	png_chunk_benign_error
 5884      00
 5885              	.LVL735:
2020:fltk-1.3.4-1/png/pngrutil.c ****    }
 5886              		.loc 1 2020 0
 5887 0084 EBCF     		jmp	.L604
 5888              	.LVL736:
 5889 0086 662E0F1F 		.p2align 4,,10
 5889      84000000 
 5889      0000
 5890              		.p2align 3
 5891              	.L621:
2025:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "duplicate");
 5892              		.loc 1 2025 0
 5893 0090 89D6     		movl	%edx, %esi
 5894              	.LVL737:
 5895 0092 E8000000 		call	png_crc_finish
 5895      00
 5896              	.LVL738:
2026:fltk-1.3.4-1/png/pngrutil.c ****       return;
 5897              		.loc 1 2026 0
 5898 0097 BE000000 		movl	$.LC34, %esi
 5898      00
 5899 009c 4889DF   		movq	%rbx, %rdi
 5900 009f E8000000 		call	png_chunk_benign_error
 5900      00
 5901              	.LVL739:
2027:fltk-1.3.4-1/png/pngrutil.c ****    }
 5902              		.loc 1 2027 0
 5903 00a4 EBAF     		jmp	.L604
 5904              	.LVL740:
 5905 00a6 662E0F1F 		.p2align 4,,10
 5905      84000000 
 5905      0000
 5906              		.p2align 3
 5907              	.L609:
2037:fltk-1.3.4-1/png/pngrutil.c **** 
 5908              		.loc 1 2037 0
 5909 00b0 BA090000 		movl	$9, %edx
 5909      00
 5910              	.LVL741:
 5911 00b5 4889E6   		movq	%rsp, %rsi
 5912              	.LVL742:
 5913 00b8 4889DF   		movq	%rbx, %rdi
 5914 00bb E8000000 		call	png_crc_read
 5914      00
 5915              	.LVL743:
2039:fltk-1.3.4-1/png/pngrutil.c ****       return;
 5916              		.loc 1 2039 0
 5917 00c0 31F6     		xorl	%esi, %esi
 5918 00c2 4889DF   		movq	%rbx, %rdi
 5919 00c5 E8000000 		call	png_crc_finish
 5919      00
 5920              	.LVL744:
 5921 00ca 85C0     		testl	%eax, %eax
 5922 00cc 7587     		jne	.L604
 5923              	.LVL745:
2045:fltk-1.3.4-1/png/pngrutil.c **** }
 5924              		.loc 1 2045 0
 5925 00ce 0FB64424 		movzbl	4(%rsp), %eax
 5925      04
 5926              	.LVL746:
 5927 00d3 440FB644 		movzbl	8(%rsp), %r8d
 5927      2408
 5928              	.LVL747:
 5929 00d9 4889EE   		movq	%rbp, %rsi
 5930 00dc 4889DF   		movq	%rbx, %rdi
 5931 00df C1E018   		sall	$24, %eax
 5932              	.LVL748:
 5933 00e2 89C1     		movl	%eax, %ecx
 5934 00e4 0FB64424 		movzbl	5(%rsp), %eax
 5934      05
 5935 00e9 C1E010   		sall	$16, %eax
 5936 00ec 01C8     		addl	%ecx, %eax
 5937 00ee 0FB64C24 		movzbl	7(%rsp), %ecx
 5937      07
 5938 00f3 01C8     		addl	%ecx, %eax
 5939 00f5 0FB64C24 		movzbl	6(%rsp), %ecx
 5939      06
 5940              	.LVL749:
 5941 00fa C1E108   		sall	$8, %ecx
 5942              	.LVL750:
 5943 00fd 01C1     		addl	%eax, %ecx
 5944 00ff 0FB60424 		movzbl	(%rsp), %eax
 5945              	.LVL751:
 5946 0103 C1E018   		sall	$24, %eax
 5947              	.LVL752:
 5948 0106 89C2     		movl	%eax, %edx
 5949 0108 0FB64424 		movzbl	1(%rsp), %eax
 5949      01
 5950 010d C1E010   		sall	$16, %eax
 5951 0110 01D0     		addl	%edx, %eax
 5952 0112 0FB65424 		movzbl	3(%rsp), %edx
 5952      03
 5953 0117 01D0     		addl	%edx, %eax
 5954 0119 0FB65424 		movzbl	2(%rsp), %edx
 5954      02
 5955              	.LVL753:
 5956 011e C1E208   		sall	$8, %edx
 5957              	.LVL754:
 5958 0121 01C2     		addl	%eax, %edx
 5959 0123 E8000000 		call	png_set_pHYs
 5959      00
 5960              	.LVL755:
 5961 0128 E928FFFF 		jmp	.L604
 5961      FF
 5962              	.LVL756:
 5963              	.L619:
2014:fltk-1.3.4-1/png/pngrutil.c **** 
 5964              		.loc 1 2014 0
 5965 012d BE000000 		movl	$.LC33, %esi
 5965      00
 5966              	.LVL757:
 5967 0132 E8000000 		call	png_chunk_error
 5967      00
 5968              	.LVL758:
 5969              	.L622:
2046:fltk-1.3.4-1/png/pngrutil.c **** #endif
 5970              		.loc 1 2046 0
 5971 0137 E8000000 		call	__stack_chk_fail
 5971      00
 5972              	.LVL759:
 5973              		.cfi_endproc
 5974              	.LFE83:
 5976              		.section	.text.unlikely.png_handle_pHYs
 5977              	.LCOLDE63:
 5978              		.section	.text.png_handle_pHYs
 5979              	.LHOTE63:
 5980              		.section	.text.unlikely.png_handle_oFFs,"ax",@progbits
 5981              	.LCOLDB64:
 5982              		.section	.text.png_handle_oFFs,"ax",@progbits
 5983              	.LHOTB64:
 5984              		.p2align 4,,15
 5985              		.globl	png_handle_oFFs
 5987              	png_handle_oFFs:
 5988              	.LFB84:
2052:fltk-1.3.4-1/png/pngrutil.c ****    png_byte buf[9];
 5989              		.loc 1 2052 0
 5990              		.cfi_startproc
 5991              	.LVL760:
 5992 0000 55       		pushq	%rbp
 5993              		.cfi_def_cfa_offset 16
 5994              		.cfi_offset 6, -16
 5995 0001 53       		pushq	%rbx
 5996              		.cfi_def_cfa_offset 24
 5997              		.cfi_offset 3, -24
 5998 0002 4889FB   		movq	%rdi, %rbx
 5999 0005 4883EC28 		subq	$40, %rsp
 6000              		.cfi_def_cfa_offset 64
2052:fltk-1.3.4-1/png/pngrutil.c ****    png_byte buf[9];
 6001              		.loc 1 2052 0
 6002 0009 64488B04 		movq	%fs:40, %rax
 6002      25280000 
 6002      00
 6003 0012 48894424 		movq	%rax, 24(%rsp)
 6003      18
 6004 0017 31C0     		xorl	%eax, %eax
2059:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
 6005              		.loc 1 2059 0
 6006 0019 8B872C01 		movl	300(%rdi), %eax
 6006      0000
 6007 001f A801     		testb	$1, %al
 6008 0021 0F840601 		je	.L638
 6008      0000
2062:fltk-1.3.4-1/png/pngrutil.c ****    {
 6009              		.loc 1 2062 0
 6010 0027 A804     		testb	$4, %al
 6011 0029 7545     		jne	.L639
2069:fltk-1.3.4-1/png/pngrutil.c ****    {
 6012              		.loc 1 2069 0
 6013 002b 4885F6   		testq	%rsi, %rsi
 6014 002e 4889F5   		movq	%rsi, %rbp
 6015 0031 7406     		je	.L627
2069:fltk-1.3.4-1/png/pngrutil.c ****    {
 6016              		.loc 1 2069 0 is_stmt 0 discriminator 1
 6017 0033 F6460901 		testb	$1, 9(%rsi)
 6018 0037 7557     		jne	.L640
 6019              	.L627:
2076:fltk-1.3.4-1/png/pngrutil.c ****    {
 6020              		.loc 1 2076 0 is_stmt 1
 6021 0039 83FA09   		cmpl	$9, %edx
 6022 003c 7472     		je	.L628
2078:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid");
 6023              		.loc 1 2078 0
 6024 003e 89D6     		movl	%edx, %esi
 6025              	.LVL761:
 6026 0040 4889DF   		movq	%rbx, %rdi
 6027              	.LVL762:
 6028 0043 E8000000 		call	png_crc_finish
 6028      00
 6029              	.LVL763:
2079:fltk-1.3.4-1/png/pngrutil.c ****       return;
 6030              		.loc 1 2079 0
 6031 0048 BE000000 		movl	$.LC31, %esi
 6031      00
 6032 004d 4889DF   		movq	%rbx, %rdi
 6033 0050 E8000000 		call	png_chunk_benign_error
 6033      00
 6034              	.LVL764:
 6035              	.L623:
2092:fltk-1.3.4-1/png/pngrutil.c **** #endif
 6036              		.loc 1 2092 0
 6037 0055 488B4424 		movq	24(%rsp), %rax
 6037      18
 6038 005a 64483304 		xorq	%fs:40, %rax
 6038      25280000 
 6038      00
 6039 0063 0F85CE00 		jne	.L641
 6039      0000
 6040 0069 4883C428 		addq	$40, %rsp
 6041              		.cfi_remember_state
 6042              		.cfi_def_cfa_offset 24
 6043 006d 5B       		popq	%rbx
 6044              		.cfi_def_cfa_offset 16
 6045              	.LVL765:
 6046 006e 5D       		popq	%rbp
 6047              		.cfi_def_cfa_offset 8
 6048 006f C3       		ret
 6049              	.LVL766:
 6050              		.p2align 4,,10
 6051              		.p2align 3
 6052              	.L639:
 6053              		.cfi_restore_state
2064:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
 6054              		.loc 1 2064 0
 6055 0070 89D6     		movl	%edx, %esi
 6056              	.LVL767:
 6057 0072 E8000000 		call	png_crc_finish
 6057      00
 6058              	.LVL768:
2065:fltk-1.3.4-1/png/pngrutil.c ****       return;
 6059              		.loc 1 2065 0
 6060 0077 BE000000 		movl	$.LC30, %esi
 6060      00
 6061 007c 4889DF   		movq	%rbx, %rdi
 6062 007f E8000000 		call	png_chunk_benign_error
 6062      00
 6063              	.LVL769:
2066:fltk-1.3.4-1/png/pngrutil.c ****    }
 6064              		.loc 1 2066 0
 6065 0084 EBCF     		jmp	.L623
 6066              	.LVL770:
 6067 0086 662E0F1F 		.p2align 4,,10
 6067      84000000 
 6067      0000
 6068              		.p2align 3
 6069              	.L640:
2071:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "duplicate");
 6070              		.loc 1 2071 0
 6071 0090 89D6     		movl	%edx, %esi
 6072              	.LVL771:
 6073 0092 E8000000 		call	png_crc_finish
 6073      00
 6074              	.LVL772:
2072:fltk-1.3.4-1/png/pngrutil.c ****       return;
 6075              		.loc 1 2072 0
 6076 0097 BE000000 		movl	$.LC34, %esi
 6076      00
 6077 009c 4889DF   		movq	%rbx, %rdi
 6078 009f E8000000 		call	png_chunk_benign_error
 6078      00
 6079              	.LVL773:
2073:fltk-1.3.4-1/png/pngrutil.c ****    }
 6080              		.loc 1 2073 0
 6081 00a4 EBAF     		jmp	.L623
 6082              	.LVL774:
 6083 00a6 662E0F1F 		.p2align 4,,10
 6083      84000000 
 6083      0000
 6084              		.p2align 3
 6085              	.L628:
2083:fltk-1.3.4-1/png/pngrutil.c **** 
 6086              		.loc 1 2083 0
 6087 00b0 BA090000 		movl	$9, %edx
 6087      00
 6088              	.LVL775:
 6089 00b5 4889E6   		movq	%rsp, %rsi
 6090              	.LVL776:
 6091 00b8 4889DF   		movq	%rbx, %rdi
 6092 00bb E8000000 		call	png_crc_read
 6092      00
 6093              	.LVL777:
2085:fltk-1.3.4-1/png/pngrutil.c ****       return;
 6094              		.loc 1 2085 0
 6095 00c0 31F6     		xorl	%esi, %esi
 6096 00c2 4889DF   		movq	%rbx, %rdi
 6097 00c5 E8000000 		call	png_crc_finish
 6097      00
 6098              	.LVL778:
 6099 00ca 85C0     		testl	%eax, %eax
 6100 00cc 7587     		jne	.L623
 6101              	.LVL779:
2091:fltk-1.3.4-1/png/pngrutil.c **** }
 6102              		.loc 1 2091 0
 6103 00ce 0FB64424 		movzbl	4(%rsp), %eax
 6103      04
 6104              	.LVL780:
 6105 00d3 440FB644 		movzbl	8(%rsp), %r8d
 6105      2408
 6106              	.LVL781:
 6107 00d9 4889EE   		movq	%rbp, %rsi
 6108 00dc 4889DF   		movq	%rbx, %rdi
 6109 00df C1E018   		sall	$24, %eax
 6110              	.LVL782:
 6111 00e2 89C1     		movl	%eax, %ecx
 6112 00e4 0FB64424 		movzbl	5(%rsp), %eax
 6112      05
 6113 00e9 C1E010   		sall	$16, %eax
 6114 00ec 01C8     		addl	%ecx, %eax
 6115 00ee 0FB64C24 		movzbl	7(%rsp), %ecx
 6115      07
 6116 00f3 01C8     		addl	%ecx, %eax
 6117 00f5 0FB64C24 		movzbl	6(%rsp), %ecx
 6117      06
 6118              	.LVL783:
 6119 00fa C1E108   		sall	$8, %ecx
 6120              	.LVL784:
 6121 00fd 01C1     		addl	%eax, %ecx
 6122 00ff 0FB60424 		movzbl	(%rsp), %eax
 6123              	.LVL785:
 6124 0103 C1E018   		sall	$24, %eax
 6125              	.LVL786:
 6126 0106 89C2     		movl	%eax, %edx
 6127 0108 0FB64424 		movzbl	1(%rsp), %eax
 6127      01
 6128 010d C1E010   		sall	$16, %eax
 6129 0110 01D0     		addl	%edx, %eax
 6130 0112 0FB65424 		movzbl	3(%rsp), %edx
 6130      03
 6131 0117 01D0     		addl	%edx, %eax
 6132 0119 0FB65424 		movzbl	2(%rsp), %edx
 6132      02
 6133              	.LVL787:
 6134 011e C1E208   		sall	$8, %edx
 6135              	.LVL788:
 6136 0121 01C2     		addl	%eax, %edx
 6137 0123 E8000000 		call	png_set_oFFs
 6137      00
 6138              	.LVL789:
 6139 0128 E928FFFF 		jmp	.L623
 6139      FF
 6140              	.LVL790:
 6141              	.L638:
2060:fltk-1.3.4-1/png/pngrutil.c **** 
 6142              		.loc 1 2060 0
 6143 012d BE000000 		movl	$.LC33, %esi
 6143      00
 6144              	.LVL791:
 6145 0132 E8000000 		call	png_chunk_error
 6145      00
 6146              	.LVL792:
 6147              	.L641:
2092:fltk-1.3.4-1/png/pngrutil.c **** #endif
 6148              		.loc 1 2092 0
 6149 0137 E8000000 		call	__stack_chk_fail
 6149      00
 6150              	.LVL793:
 6151              		.cfi_endproc
 6152              	.LFE84:
 6154              		.section	.text.unlikely.png_handle_oFFs
 6155              	.LCOLDE64:
 6156              		.section	.text.png_handle_oFFs
 6157              	.LHOTE64:
 6158              		.section	.rodata.str1.1
 6159              	.LC65:
 6160 0192 696E7661 		.string	"invalid parameter count"
 6160      6C696420 
 6160      70617261 
 6160      6D657465 
 6160      7220636F 
 6161              	.LC66:
 6162 01aa 756E7265 		.string	"unrecognized equation type"
 6162      636F676E 
 6162      697A6564 
 6162      20657175 
 6162      6174696F 
 6163              	.LC67:
 6164 01c5 696E7661 		.string	"invalid data"
 6164      6C696420 
 6164      64617461 
 6164      00
 6165              		.section	.text.unlikely.png_handle_pCAL,"ax",@progbits
 6166              	.LCOLDB68:
 6167              		.section	.text.png_handle_pCAL,"ax",@progbits
 6168              	.LHOTB68:
 6169              		.p2align 4,,15
 6170              		.globl	png_handle_pCAL
 6172              	png_handle_pCAL:
 6173              	.LFB85:
2099:fltk-1.3.4-1/png/pngrutil.c ****    png_int_32 X0, X1;
 6174              		.loc 1 2099 0
 6175              		.cfi_startproc
 6176              	.LVL794:
 6177 0000 4157     		pushq	%r15
 6178              		.cfi_def_cfa_offset 16
 6179              		.cfi_offset 15, -16
 6180 0002 4156     		pushq	%r14
 6181              		.cfi_def_cfa_offset 24
 6182              		.cfi_offset 14, -24
 6183 0004 4155     		pushq	%r13
 6184              		.cfi_def_cfa_offset 32
 6185              		.cfi_offset 13, -32
 6186 0006 4154     		pushq	%r12
 6187              		.cfi_def_cfa_offset 40
 6188              		.cfi_offset 12, -40
 6189 0008 55       		pushq	%rbp
 6190              		.cfi_def_cfa_offset 48
 6191              		.cfi_offset 6, -48
 6192 0009 53       		pushq	%rbx
 6193              		.cfi_def_cfa_offset 56
 6194              		.cfi_offset 3, -56
 6195 000a 4889FB   		movq	%rdi, %rbx
 6196 000d 4883EC48 		subq	$72, %rsp
 6197              		.cfi_def_cfa_offset 128
2108:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
 6198              		.loc 1 2108 0
 6199 0011 8B872C01 		movl	300(%rdi), %eax
 6199      0000
 6200 0017 A801     		testb	$1, %al
 6201 0019 0F84E702 		je	.L693
 6201      0000
2111:fltk-1.3.4-1/png/pngrutil.c ****    {
 6202              		.loc 1 2111 0
 6203 001f A804     		testb	$4, %al
 6204 0021 89D5     		movl	%edx, %ebp
 6205 0023 0F85D700 		jne	.L694
 6205      0000
2118:fltk-1.3.4-1/png/pngrutil.c ****    {
 6206              		.loc 1 2118 0
 6207 0029 4885F6   		testq	%rsi, %rsi
 6208 002c 4989F4   		movq	%rsi, %r12
 6209 002f 740A     		je	.L645
2118:fltk-1.3.4-1/png/pngrutil.c ****    {
 6210              		.loc 1 2118 0 is_stmt 0 discriminator 1
 6211 0031 F6460904 		testb	$4, 9(%rsi)
 6212 0035 0F85C501 		jne	.L695
 6212      0000
 6213              	.L645:
2128:fltk-1.3.4-1/png/pngrutil.c **** 
 6214              		.loc 1 2128 0 is_stmt 1
 6215 003b 8D7501   		leal	1(%rbp), %esi
 6216              	.LVL795:
 6217 003e BA020000 		movl	$2, %edx
 6217      00
 6218              	.LVL796:
 6219 0043 4889DF   		movq	%rbx, %rdi
 6220              	.LVL797:
 6221 0046 E8000000 		call	png_read_buffer
 6221      00
 6222              	.LVL798:
2130:fltk-1.3.4-1/png/pngrutil.c ****    {
 6223              		.loc 1 2130 0
 6224 004b 4885C0   		testq	%rax, %rax
2128:fltk-1.3.4-1/png/pngrutil.c **** 
 6225              		.loc 1 2128 0
 6226 004e 4989C7   		movq	%rax, %r15
 6227              	.LVL799:
2130:fltk-1.3.4-1/png/pngrutil.c ****    {
 6228              		.loc 1 2130 0
 6229 0051 0F84C101 		je	.L696
 6229      0000
2137:fltk-1.3.4-1/png/pngrutil.c **** 
 6230              		.loc 1 2137 0
 6231 0057 4889C6   		movq	%rax, %rsi
 6232 005a 89EA     		movl	%ebp, %edx
 6233 005c 4889DF   		movq	%rbx, %rdi
 6234 005f E8000000 		call	png_crc_read
 6234      00
 6235              	.LVL800:
2139:fltk-1.3.4-1/png/pngrutil.c ****       return;
 6236              		.loc 1 2139 0
 6237 0064 31F6     		xorl	%esi, %esi
 6238 0066 4889DF   		movq	%rbx, %rdi
 6239 0069 E8000000 		call	png_crc_finish
 6239      00
 6240              	.LVL801:
 6241 006e 85C0     		testl	%eax, %eax
 6242 0070 0F85B601 		jne	.L642
 6242      0000
2142:fltk-1.3.4-1/png/pngrutil.c **** 
 6243              		.loc 1 2142 0
 6244 0076 4C01FD   		addq	%r15, %rbp
 6245              	.LVL802:
2145:fltk-1.3.4-1/png/pngrutil.c ****       /* Empty loop */ ;
 6246              		.loc 1 2145 0
 6247 0079 4C89F8   		movq	%r15, %rax
2142:fltk-1.3.4-1/png/pngrutil.c **** 
 6248              		.loc 1 2142 0
 6249 007c C6450000 		movb	$0, 0(%rbp)
 6250              	.LVL803:
2145:fltk-1.3.4-1/png/pngrutil.c ****       /* Empty loop */ ;
 6251              		.loc 1 2145 0
 6252 0080 41803F00 		cmpb	$0, (%r15)
 6253 0084 7413     		je	.L648
 6254              	.LVL804:
 6255 0086 662E0F1F 		.p2align 4,,10
 6255      84000000 
 6255      0000
 6256              		.p2align 3
 6257              	.L649:
2145:fltk-1.3.4-1/png/pngrutil.c ****       /* Empty loop */ ;
 6258              		.loc 1 2145 0 is_stmt 0 discriminator 3
 6259 0090 4883C001 		addq	$1, %rax
 6260              	.LVL805:
 6261 0094 803800   		cmpb	$0, (%rax)
 6262 0097 75F7     		jne	.L649
 6263              	.L648:
 6264              	.LVL806:
2153:fltk-1.3.4-1/png/pngrutil.c ****    {
 6265              		.loc 1 2153 0 is_stmt 1
 6266 0099 488D500C 		leaq	12(%rax), %rdx
2155:fltk-1.3.4-1/png/pngrutil.c ****       return;
 6267              		.loc 1 2155 0
 6268 009d BE000000 		movl	$.LC31, %esi
 6268      00
2153:fltk-1.3.4-1/png/pngrutil.c ****    {
 6269              		.loc 1 2153 0
 6270 00a2 4839D5   		cmpq	%rdx, %rbp
 6271 00a5 763E     		jbe	.L692
 6272              	.LVL807:
2162:fltk-1.3.4-1/png/pngrutil.c ****    nparams = buf[10];
 6273              		.loc 1 2162 0
 6274 00a7 440FB670 		movzbl	9(%rax), %r14d
 6274      09
 6275              	.LVL808:
2163:fltk-1.3.4-1/png/pngrutil.c ****    units = buf + 11;
 6276              		.loc 1 2163 0
 6277 00ac 440FB668 		movzbl	10(%rax), %r13d
 6277      0A
 6278              	.LVL809:
2170:fltk-1.3.4-1/png/pngrutil.c ****        (type == PNG_EQUATION_BASE_E && nparams != 3) ||
 6279              		.loc 1 2170 0
 6280 00b1 4584F6   		testb	%r14b, %r14b
 6281 00b4 7506     		jne	.L667
 6282 00b6 4180FD02 		cmpb	$2, %r13b
 6283 00ba 7524     		jne	.L651
 6284              	.L667:
2171:fltk-1.3.4-1/png/pngrutil.c ****        (type == PNG_EQUATION_ARBITRARY && nparams != 3) ||
 6285              		.loc 1 2171 0 discriminator 1
 6286 00bc 418D56FF 		leal	-1(%r14), %edx
 6287 00c0 80FA01   		cmpb	$1, %dl
 6288 00c3 400F96C6 		setbe	%sil
 6289 00c7 4180FD03 		cmpb	$3, %r13b
 6290 00cb 0F95C2   		setne	%dl
 6291 00ce 4084D6   		testb	%dl, %sil
 6292 00d1 750D     		jne	.L651
2172:fltk-1.3.4-1/png/pngrutil.c ****        (type == PNG_EQUATION_HYPERBOLIC && nparams != 4))
 6293              		.loc 1 2172 0
 6294 00d3 4180FE03 		cmpb	$3, %r14b
 6295 00d7 7535     		jne	.L653
 6296 00d9 4180FD04 		cmpb	$4, %r13b
 6297 00dd 742F     		je	.L653
 6298 00df 90       		.p2align 4,,10
 6299              		.p2align 3
 6300              	.L651:
2175:fltk-1.3.4-1/png/pngrutil.c ****       return;
 6301              		.loc 1 2175 0
 6302 00e0 BE000000 		movl	$.LC65, %esi
 6302      00
 6303              	.LVL810:
 6304              	.L692:
2221:fltk-1.3.4-1/png/pngrutil.c **** #endif
 6305              		.loc 1 2221 0
 6306 00e5 4883C448 		addq	$72, %rsp
 6307              		.cfi_remember_state
 6308              		.cfi_def_cfa_offset 56
2212:fltk-1.3.4-1/png/pngrutil.c ****          return;
 6309              		.loc 1 2212 0
 6310 00e9 4889DF   		movq	%rbx, %rdi
2221:fltk-1.3.4-1/png/pngrutil.c **** #endif
 6311              		.loc 1 2221 0
 6312 00ec 5B       		popq	%rbx
 6313              		.cfi_def_cfa_offset 48
 6314              	.LVL811:
 6315 00ed 5D       		popq	%rbp
 6316              		.cfi_def_cfa_offset 40
 6317 00ee 415C     		popq	%r12
 6318              		.cfi_def_cfa_offset 32
 6319 00f0 415D     		popq	%r13
 6320              		.cfi_def_cfa_offset 24
 6321 00f2 415E     		popq	%r14
 6322              		.cfi_def_cfa_offset 16
 6323 00f4 415F     		popq	%r15
 6324              		.cfi_def_cfa_offset 8
2212:fltk-1.3.4-1/png/pngrutil.c ****          return;
 6325              		.loc 1 2212 0
 6326 00f6 E9000000 		jmp	png_chunk_benign_error
 6326      00
 6327              	.LVL812:
 6328 00fb 0F1F4400 		.p2align 4,,10
 6328      00
 6329              		.p2align 3
 6330              	.L694:
 6331              		.cfi_restore_state
2113:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
 6332              		.loc 1 2113 0
 6333 0100 89EE     		movl	%ebp, %esi
 6334              	.LVL813:
 6335 0102 E8000000 		call	png_crc_finish
 6335      00
 6336              	.LVL814:
2114:fltk-1.3.4-1/png/pngrutil.c ****       return;
 6337              		.loc 1 2114 0
 6338 0107 BE000000 		movl	$.LC30, %esi
 6338      00
 6339 010c EBD7     		jmp	.L692
 6340              	.LVL815:
 6341              	.L653:
2160:fltk-1.3.4-1/png/pngrutil.c ****    X1 = png_get_int_32((png_bytep)buf+5);
 6342              		.loc 1 2160 0
 6343 010e 0FB65001 		movzbl	1(%rax), %edx
2179:fltk-1.3.4-1/png/pngrutil.c ****    {
 6344              		.loc 1 2179 0
 6345 0112 4180FE03 		cmpb	$3, %r14b
2160:fltk-1.3.4-1/png/pngrutil.c ****    X1 = png_get_int_32((png_bytep)buf+5);
 6346              		.loc 1 2160 0
 6347 0116 88542410 		movb	%dl, 16(%rsp)
 6348 011a 0FB65002 		movzbl	2(%rax), %edx
 6349 011e 8854243A 		movb	%dl, 58(%rsp)
 6350 0122 0FB65003 		movzbl	3(%rax), %edx
 6351 0126 8854243B 		movb	%dl, 59(%rsp)
 6352 012a 0FB65004 		movzbl	4(%rax), %edx
 6353 012e 8854243C 		movb	%dl, 60(%rsp)
2161:fltk-1.3.4-1/png/pngrutil.c ****    type = buf[9];
 6354              		.loc 1 2161 0
 6355 0132 0FB65005 		movzbl	5(%rax), %edx
 6356 0136 88542420 		movb	%dl, 32(%rsp)
 6357 013a 0FB65006 		movzbl	6(%rax), %edx
 6358 013e 8854243D 		movb	%dl, 61(%rsp)
 6359 0142 0FB65007 		movzbl	7(%rax), %edx
 6360 0146 8854243E 		movb	%dl, 62(%rsp)
 6361 014a 0FB65008 		movzbl	8(%rax), %edx
 6362 014e 8854243F 		movb	%dl, 63(%rsp)
2179:fltk-1.3.4-1/png/pngrutil.c ****    {
 6363              		.loc 1 2179 0
 6364 0152 0F87E800 		ja	.L697
 6364      0000
 6365              	.LVL816:
 6366              	.L654:
2184:fltk-1.3.4-1/png/pngrutil.c ****       /* Empty loop to move past the units string. */ ;
 6367              		.loc 1 2184 0
 6368 0158 80780B00 		cmpb	$0, 11(%rax)
2164:fltk-1.3.4-1/png/pngrutil.c **** 
 6369              		.loc 1 2164 0
 6370 015c 4C8D400B 		leaq	11(%rax), %r8
2184:fltk-1.3.4-1/png/pngrutil.c ****       /* Empty loop to move past the units string. */ ;
 6371              		.loc 1 2184 0
 6372 0160 4C89C2   		movq	%r8, %rdx
 6373 0163 740C     		je	.L655
 6374              		.p2align 4,,10
 6375 0165 0F1F00   		.p2align 3
 6376              	.L656:
 6377              	.LVL817:
2184:fltk-1.3.4-1/png/pngrutil.c ****       /* Empty loop to move past the units string. */ ;
 6378              		.loc 1 2184 0 is_stmt 0 discriminator 3
 6379 0168 4883C201 		addq	$1, %rdx
 6380              	.LVL818:
 6381 016c 803A00   		cmpb	$0, (%rdx)
 6382 016f 75F7     		jne	.L656
 6383              	.LVL819:
 6384              	.L655:
2189:fltk-1.3.4-1/png/pngrutil.c ****        nparams * (sizeof (png_charp))));
 6385              		.loc 1 2189 0 is_stmt 1
 6386 0171 410FB6F5 		movzbl	%r13b, %esi
 6387 0175 4889DF   		movq	%rbx, %rdi
 6388 0178 48895424 		movq	%rdx, 48(%rsp)
 6388      30
 6389 017d 48C1E603 		salq	$3, %rsi
 6390 0181 4C894424 		movq	%r8, 8(%rsp)
 6390      08
 6391 0186 E8000000 		call	png_malloc_warn
 6391      00
 6392              	.LVL820:
2192:fltk-1.3.4-1/png/pngrutil.c ****    {
 6393              		.loc 1 2192 0
 6394 018b 4885C0   		testq	%rax, %rax
 6395 018e 0F84C800 		je	.L657
 6395      0000
 6396              	.LVL821:
2199:fltk-1.3.4-1/png/pngrutil.c ****    {
 6397              		.loc 1 2199 0 discriminator 1
 6398 0194 450FB6DD 		movzbl	%r13b, %r11d
 6399 0198 31FF     		xorl	%edi, %edi
 6400 019a 488D7501 		leaq	1(%rbp), %rsi
 6401 019e 4585DB   		testl	%r11d, %r11d
 6402 01a1 4C8B4424 		movq	8(%rsp), %r8
 6402      08
 6403 01a6 488B5424 		movq	48(%rsp), %rdx
 6403      30
 6404 01ab 0F84CF00 		je	.L659
 6404      0000
 6405              	.LVL822:
 6406              		.p2align 4,,10
 6407 01b1 0F1F8000 		.p2align 3
 6407      000000
 6408              	.L678:
2201:fltk-1.3.4-1/png/pngrutil.c **** 
 6409              		.loc 1 2201 0
 6410 01b8 488D4A01 		leaq	1(%rdx), %rcx
 6411              	.LVL823:
2205:fltk-1.3.4-1/png/pngrutil.c ****          /* Empty loop to move past each parameter string */ ;
 6412              		.loc 1 2205 0
 6413 01bc 4839CD   		cmpq	%rcx, %rbp
 6414 01bf 48890CF8 		movq	%rcx, (%rax,%rdi,8)
 6415 01c3 721D     		jb	.L660
 6416 01c5 807A0100 		cmpb	$0, 1(%rdx)
 6417 01c9 750E     		jne	.L662
 6418 01cb E9A00000 		jmp	.L666
 6418      00
 6419              		.p2align 4,,10
 6420              		.p2align 3
 6421              	.L698:
2205:fltk-1.3.4-1/png/pngrutil.c ****          /* Empty loop to move past each parameter string */ ;
 6422              		.loc 1 2205 0 is_stmt 0 discriminator 3
 6423 01d0 803900   		cmpb	$0, (%rcx)
 6424 01d3 0F849700 		je	.L666
 6424      0000
 6425              	.L662:
 6426              	.LVL824:
2205:fltk-1.3.4-1/png/pngrutil.c ****          /* Empty loop to move past each parameter string */ ;
 6427              		.loc 1 2205 0 discriminator 4
 6428 01d9 4883C101 		addq	$1, %rcx
 6429              	.LVL825:
 6430 01dd 4839F1   		cmpq	%rsi, %rcx
 6431 01e0 75EE     		jne	.L698
 6432              	.L660:
2211:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_benign_error(png_ptr, "invalid data");
 6433              		.loc 1 2211 0 is_stmt 1
 6434 01e2 4889C6   		movq	%rax, %rsi
 6435 01e5 4889DF   		movq	%rbx, %rdi
 6436              	.LVL826:
 6437 01e8 E8000000 		call	png_free
 6437      00
 6438              	.LVL827:
2212:fltk-1.3.4-1/png/pngrutil.c ****          return;
 6439              		.loc 1 2212 0
 6440 01ed BE000000 		movl	$.LC67, %esi
 6440      00
 6441 01f2 E9EEFEFF 		jmp	.L692
 6441      FF
 6442              	.LVL828:
 6443 01f7 660F1F84 		.p2align 4,,10
 6443      00000000 
 6443      00
 6444              		.p2align 3
 6445              	.L695:
2120:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "duplicate");
 6446              		.loc 1 2120 0
 6447 0200 89EE     		movl	%ebp, %esi
 6448              	.LVL829:
 6449 0202 E8000000 		call	png_crc_finish
 6449      00
 6450              	.LVL830:
2121:fltk-1.3.4-1/png/pngrutil.c ****       return;
 6451              		.loc 1 2121 0
 6452 0207 BE000000 		movl	$.LC34, %esi
 6452      00
 6453 020c E9D4FEFF 		jmp	.L692
 6453      FF
 6454              	.LVL831:
 6455              		.p2align 4,,10
 6456 0211 0F1F8000 		.p2align 3
 6456      000000
 6457              	.L696:
2132:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of memory");
 6458              		.loc 1 2132 0
 6459 0218 89EE     		movl	%ebp, %esi
 6460 021a 4889DF   		movq	%rbx, %rdi
 6461 021d E8000000 		call	png_crc_finish
 6461      00
 6462              	.LVL832:
2133:fltk-1.3.4-1/png/pngrutil.c ****       return;
 6463              		.loc 1 2133 0
 6464 0222 BE000000 		movl	$.LC48, %esi
 6464      00
 6465 0227 E9B9FEFF 		jmp	.L692
 6465      FF
 6466              	.L642:
2221:fltk-1.3.4-1/png/pngrutil.c **** #endif
 6467              		.loc 1 2221 0
 6468 022c 4883C448 		addq	$72, %rsp
 6469              		.cfi_remember_state
 6470              		.cfi_def_cfa_offset 56
 6471 0230 5B       		popq	%rbx
 6472              		.cfi_def_cfa_offset 48
 6473              	.LVL833:
 6474 0231 5D       		popq	%rbp
 6475              		.cfi_def_cfa_offset 40
 6476              	.LVL834:
 6477 0232 415C     		popq	%r12
 6478              		.cfi_def_cfa_offset 32
 6479              	.LVL835:
 6480 0234 415D     		popq	%r13
 6481              		.cfi_def_cfa_offset 24
 6482 0236 415E     		popq	%r14
 6483              		.cfi_def_cfa_offset 16
 6484 0238 415F     		popq	%r15
 6485              		.cfi_def_cfa_offset 8
 6486              	.LVL836:
 6487 023a C3       		ret
 6488              	.LVL837:
 6489 023b 0F1F4400 		.p2align 4,,10
 6489      00
 6490              		.p2align 3
 6491              	.L697:
 6492              		.cfi_restore_state
2181:fltk-1.3.4-1/png/pngrutil.c ****    }
 6493              		.loc 1 2181 0
 6494 0240 BE000000 		movl	$.LC66, %esi
 6494      00
 6495 0245 4889DF   		movq	%rbx, %rdi
 6496 0248 48894424 		movq	%rax, 8(%rsp)
 6496      08
 6497 024d E8000000 		call	png_chunk_benign_error
 6497      00
 6498              	.LVL838:
 6499 0252 488B4424 		movq	8(%rsp), %rax
 6499      08
 6500 0257 E9FCFEFF 		jmp	.L654
 6500      FF
 6501              	.LVL839:
 6502              	.L657:
2194:fltk-1.3.4-1/png/pngrutil.c ****       return;
 6503              		.loc 1 2194 0
 6504 025c BE000000 		movl	$.LC48, %esi
 6504      00
 6505 0261 E97FFEFF 		jmp	.L692
 6505      FF
 6506              	.LVL840:
 6507 0266 662E0F1F 		.p2align 4,,10
 6507      84000000 
 6507      0000
 6508              		.p2align 3
 6509              	.L666:
 6510 0270 4883C701 		addq	$1, %rdi
 6511              	.LVL841:
2205:fltk-1.3.4-1/png/pngrutil.c ****          /* Empty loop to move past each parameter string */ ;
 6512              		.loc 1 2205 0
 6513 0274 4889CA   		movq	%rcx, %rdx
2199:fltk-1.3.4-1/png/pngrutil.c ****    {
 6514              		.loc 1 2199 0
 6515 0277 4139FB   		cmpl	%edi, %r11d
 6516 027a 0F8F38FF 		jg	.L678
 6516      FFFF
 6517              	.LVL842:
 6518              	.L659:
2217:fltk-1.3.4-1/png/pngrutil.c ****       (png_charp)units, params);
 6519              		.loc 1 2217 0
 6520 0280 0FB64C24 		movzbl	61(%rsp), %ecx
 6520      3D
 6521 0285 8B542420 		movl	32(%rsp), %edx
 6522 0289 4883EC08 		subq	$8, %rsp
 6523              		.cfi_def_cfa_offset 136
 6524 028d 8B742418 		movl	24(%rsp), %esi
 6525 0291 440FB66C 		movzbl	70(%rsp), %r13d
 6525      2446
 6526              	.LVL843:
 6527 0297 4889DF   		movq	%rbx, %rdi
 6528 029a 450FB6CE 		movzbl	%r14b, %r9d
 6529 029e C1E218   		sall	$24, %edx
 6530 02a1 C1E110   		sall	$16, %ecx
 6531 02a4 C1E618   		sall	$24, %esi
 6532 02a7 01CA     		addl	%ecx, %edx
 6533 02a9 0FB64C24 		movzbl	71(%rsp), %ecx
 6533      47
 6534 02ae 41C1E508 		sall	$8, %r13d
 6535 02b2 01CA     		addl	%ecx, %edx
 6536 02b4 0FB64C24 		movzbl	66(%rsp), %ecx
 6536      42
 6537 02b9 C1E110   		sall	$16, %ecx
 6538 02bc 01F1     		addl	%esi, %ecx
 6539 02be 0FB67424 		movzbl	68(%rsp), %esi
 6539      44
 6540 02c3 01CE     		addl	%ecx, %esi
 6541 02c5 0FB64C24 		movzbl	67(%rsp), %ecx
 6541      43
 6542 02ca 50       		pushq	%rax
 6543              		.cfi_def_cfa_offset 144
 6544 02cb 48894424 		movq	%rax, 24(%rsp)
 6544      18
 6545 02d0 4150     		pushq	%r8
 6546              		.cfi_def_cfa_offset 152
 6547 02d2 468D042A 		leal	(%rdx,%r13), %r8d
 6548 02d6 4153     		pushq	%r11
 6549              		.cfi_def_cfa_offset 160
 6550 02d8 4C89FA   		movq	%r15, %rdx
 6551 02db C1E108   		sall	$8, %ecx
 6552 02de 01F1     		addl	%esi, %ecx
 6553 02e0 4C89E6   		movq	%r12, %rsi
 6554 02e3 E8000000 		call	png_set_pCAL
 6554      00
 6555              	.LVL844:
2220:fltk-1.3.4-1/png/pngrutil.c **** }
 6556              		.loc 1 2220 0
 6557 02e8 488B4424 		movq	40(%rsp), %rax
 6557      28
2221:fltk-1.3.4-1/png/pngrutil.c **** #endif
 6558              		.loc 1 2221 0
 6559 02ed 4883C468 		addq	$104, %rsp
 6560              		.cfi_def_cfa_offset 56
2220:fltk-1.3.4-1/png/pngrutil.c **** }
 6561              		.loc 1 2220 0
 6562 02f1 4889DF   		movq	%rbx, %rdi
2221:fltk-1.3.4-1/png/pngrutil.c **** #endif
 6563              		.loc 1 2221 0
 6564 02f4 5B       		popq	%rbx
 6565              		.cfi_def_cfa_offset 48
 6566              	.LVL845:
 6567 02f5 5D       		popq	%rbp
 6568              		.cfi_def_cfa_offset 40
 6569              	.LVL846:
 6570 02f6 415C     		popq	%r12
 6571              		.cfi_def_cfa_offset 32
 6572              	.LVL847:
 6573 02f8 415D     		popq	%r13
 6574              		.cfi_def_cfa_offset 24
 6575 02fa 415E     		popq	%r14
 6576              		.cfi_def_cfa_offset 16
 6577              	.LVL848:
 6578 02fc 415F     		popq	%r15
 6579              		.cfi_def_cfa_offset 8
 6580              	.LVL849:
2220:fltk-1.3.4-1/png/pngrutil.c **** }
 6581              		.loc 1 2220 0
 6582 02fe 4889C6   		movq	%rax, %rsi
 6583 0301 E9000000 		jmp	png_free
 6583      00
 6584              	.LVL850:
 6585              	.L693:
 6586              		.cfi_def_cfa_offset 128
2109:fltk-1.3.4-1/png/pngrutil.c **** 
 6587              		.loc 1 2109 0
 6588 0306 BE000000 		movl	$.LC33, %esi
 6588      00
 6589              	.LVL851:
 6590 030b E8000000 		call	png_chunk_error
 6590      00
 6591              	.LVL852:
 6592              		.cfi_endproc
 6593              	.LFE85:
 6595              		.section	.text.unlikely.png_handle_pCAL
 6596              	.LCOLDE68:
 6597              		.section	.text.png_handle_pCAL
 6598              	.LHOTE68:
 6599              		.section	.rodata.str1.1
 6600              	.LC69:
 6601 01d2 696E7661 		.string	"invalid unit"
 6601      6C696420 
 6601      756E6974 
 6601      00
 6602              	.LC70:
 6603 01df 62616420 		.string	"bad width format"
 6603      77696474 
 6603      6820666F 
 6603      726D6174 
 6603      00
 6604              	.LC71:
 6605 01f0 6E6F6E2D 		.string	"non-positive width"
 6605      706F7369 
 6605      74697665 
 6605      20776964 
 6605      746800
 6606              	.LC72:
 6607 0203 62616420 		.string	"bad height format"
 6607      68656967 
 6607      68742066 
 6607      6F726D61 
 6607      7400
 6608              	.LC73:
 6609 0215 6E6F6E2D 		.string	"non-positive height"
 6609      706F7369 
 6609      74697665 
 6609      20686569 
 6609      67687400 
 6610              		.section	.text.unlikely.png_handle_sCAL,"ax",@progbits
 6611              	.LCOLDB74:
 6612              		.section	.text.png_handle_sCAL,"ax",@progbits
 6613              	.LHOTB74:
 6614              		.p2align 4,,15
 6615              		.globl	png_handle_sCAL
 6617              	png_handle_sCAL:
 6618              	.LFB86:
2228:fltk-1.3.4-1/png/pngrutil.c ****    png_bytep buffer;
 6619              		.loc 1 2228 0
 6620              		.cfi_startproc
 6621              	.LVL853:
 6622 0000 4156     		pushq	%r14
 6623              		.cfi_def_cfa_offset 16
 6624              		.cfi_offset 14, -16
 6625 0002 4155     		pushq	%r13
 6626              		.cfi_def_cfa_offset 24
 6627              		.cfi_offset 13, -24
 6628 0004 4154     		pushq	%r12
 6629              		.cfi_def_cfa_offset 32
 6630              		.cfi_offset 12, -32
 6631 0006 55       		pushq	%rbp
 6632              		.cfi_def_cfa_offset 40
 6633              		.cfi_offset 6, -40
 6634 0007 53       		pushq	%rbx
 6635              		.cfi_def_cfa_offset 48
 6636              		.cfi_offset 3, -48
 6637 0008 4889FB   		movq	%rdi, %rbx
 6638 000b 4883EC20 		subq	$32, %rsp
 6639              		.cfi_def_cfa_offset 80
2228:fltk-1.3.4-1/png/pngrutil.c ****    png_bytep buffer;
 6640              		.loc 1 2228 0
 6641 000f 64488B04 		movq	%fs:40, %rax
 6641      25280000 
 6641      00
 6642 0018 48894424 		movq	%rax, 24(%rsp)
 6642      18
 6643 001d 31C0     		xorl	%eax, %eax
2235:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
 6644              		.loc 1 2235 0
 6645 001f 8B872C01 		movl	300(%rdi), %eax
 6645      0000
 6646 0025 A801     		testb	$1, %al
 6647 0027 0F84DF01 		je	.L726
 6647      0000
2238:fltk-1.3.4-1/png/pngrutil.c ****    {
 6648              		.loc 1 2238 0
 6649 002d A804     		testb	$4, %al
 6650 002f 89D5     		movl	%edx, %ebp
 6651 0031 0F85B900 		jne	.L727
 6651      0000
2245:fltk-1.3.4-1/png/pngrutil.c ****    {
 6652              		.loc 1 2245 0
 6653 0037 4885F6   		testq	%rsi, %rsi
 6654 003a 4989F4   		movq	%rsi, %r12
 6655 003d 740A     		je	.L703
2245:fltk-1.3.4-1/png/pngrutil.c ****    {
 6656              		.loc 1 2245 0 is_stmt 0 discriminator 1
 6657 003f F6460940 		testb	$64, 9(%rsi)
 6658 0043 0F85C700 		jne	.L728
 6658      0000
 6659              	.L703:
2253:fltk-1.3.4-1/png/pngrutil.c ****    {
 6660              		.loc 1 2253 0 is_stmt 1
 6661 0049 83FD03   		cmpl	$3, %ebp
 6662 004c 7742     		ja	.L704
2255:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid");
 6663              		.loc 1 2255 0
 6664 004e 89EE     		movl	%ebp, %esi
 6665              	.LVL854:
 6666 0050 4889DF   		movq	%rbx, %rdi
 6667              	.LVL855:
 6668 0053 E8000000 		call	png_crc_finish
 6668      00
 6669              	.LVL856:
2256:fltk-1.3.4-1/png/pngrutil.c ****       return;
 6670              		.loc 1 2256 0
 6671 0058 BE000000 		movl	$.LC31, %esi
 6671      00
 6672 005d 4889DF   		movq	%rbx, %rdi
 6673 0060 E8000000 		call	png_chunk_benign_error
 6673      00
 6674              	.LVL857:
 6675              	.L699:
2315:fltk-1.3.4-1/png/pngrutil.c **** #endif
 6676              		.loc 1 2315 0
 6677 0065 488B4424 		movq	24(%rsp), %rax
 6677      18
 6678 006a 64483304 		xorq	%fs:40, %rax
 6678      25280000 
 6678      00
 6679 0073 0F859D01 		jne	.L729
 6679      0000
 6680 0079 4883C420 		addq	$32, %rsp
 6681              		.cfi_remember_state
 6682              		.cfi_def_cfa_offset 48
 6683 007d 5B       		popq	%rbx
 6684              		.cfi_def_cfa_offset 40
 6685              	.LVL858:
 6686 007e 5D       		popq	%rbp
 6687              		.cfi_def_cfa_offset 32
 6688              	.LVL859:
 6689 007f 415C     		popq	%r12
 6690              		.cfi_def_cfa_offset 24
 6691 0081 415D     		popq	%r13
 6692              		.cfi_def_cfa_offset 16
 6693 0083 415E     		popq	%r14
 6694              		.cfi_def_cfa_offset 8
 6695 0085 C3       		ret
 6696              	.LVL860:
 6697 0086 662E0F1F 		.p2align 4,,10
 6697      84000000 
 6697      0000
 6698              		.p2align 3
 6699              	.L704:
 6700              		.cfi_restore_state
2263:fltk-1.3.4-1/png/pngrutil.c **** 
 6701              		.loc 1 2263 0
 6702 0090 8D7501   		leal	1(%rbp), %esi
 6703              	.LVL861:
 6704 0093 BA020000 		movl	$2, %edx
 6704      00
 6705              	.LVL862:
 6706 0098 4889DF   		movq	%rbx, %rdi
 6707 009b E8000000 		call	png_read_buffer
 6707      00
 6708              	.LVL863:
2265:fltk-1.3.4-1/png/pngrutil.c ****    {
 6709              		.loc 1 2265 0
 6710 00a0 4885C0   		testq	%rax, %rax
2263:fltk-1.3.4-1/png/pngrutil.c **** 
 6711              		.loc 1 2263 0
 6712 00a3 4989C5   		movq	%rax, %r13
 6713              	.LVL864:
2265:fltk-1.3.4-1/png/pngrutil.c ****    {
 6714              		.loc 1 2265 0
 6715 00a6 0F848400 		je	.L730
 6715      0000
2272:fltk-1.3.4-1/png/pngrutil.c ****    buffer[length] = 0; /* Null terminate the last string */
 6716              		.loc 1 2272 0
 6717 00ac 4889C6   		movq	%rax, %rsi
 6718 00af 89EA     		movl	%ebp, %edx
 6719 00b1 4889DF   		movq	%rbx, %rdi
 6720 00b4 E8000000 		call	png_crc_read
 6720      00
 6721              	.LVL865:
2275:fltk-1.3.4-1/png/pngrutil.c ****       return;
 6722              		.loc 1 2275 0
 6723 00b9 31F6     		xorl	%esi, %esi
2273:fltk-1.3.4-1/png/pngrutil.c **** 
 6724              		.loc 1 2273 0
 6725 00bb 41C6442D 		movb	$0, 0(%r13,%rbp)
 6725      0000
2275:fltk-1.3.4-1/png/pngrutil.c ****       return;
 6726              		.loc 1 2275 0
 6727 00c1 4889DF   		movq	%rbx, %rdi
 6728 00c4 E8000000 		call	png_crc_finish
 6728      00
 6729              	.LVL866:
 6730 00c9 85C0     		testl	%eax, %eax
 6731 00cb 7598     		jne	.L699
2279:fltk-1.3.4-1/png/pngrutil.c ****    {
 6732              		.loc 1 2279 0
 6733 00cd 410FB645 		movzbl	0(%r13), %eax
 6733      00
 6734 00d2 83E801   		subl	$1, %eax
 6735 00d5 3C01     		cmpb	$1, %al
 6736 00d7 7677     		jbe	.L706
2281:fltk-1.3.4-1/png/pngrutil.c ****       return;
 6737              		.loc 1 2281 0
 6738 00d9 BE000000 		movl	$.LC69, %esi
 6738      00
 6739 00de 4889DF   		movq	%rbx, %rdi
 6740 00e1 E8000000 		call	png_chunk_benign_error
 6740      00
 6741              	.LVL867:
2282:fltk-1.3.4-1/png/pngrutil.c ****    }
 6742              		.loc 1 2282 0
 6743 00e6 E97AFFFF 		jmp	.L699
 6743      FF
 6744              	.LVL868:
 6745 00eb 0F1F4400 		.p2align 4,,10
 6745      00
 6746              		.p2align 3
 6747              	.L727:
2240:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of place");
 6748              		.loc 1 2240 0
 6749 00f0 89EE     		movl	%ebp, %esi
 6750              	.LVL869:
 6751 00f2 E8000000 		call	png_crc_finish
 6751      00
 6752              	.LVL870:
2241:fltk-1.3.4-1/png/pngrutil.c ****       return;
 6753              		.loc 1 2241 0
 6754 00f7 BE000000 		movl	$.LC30, %esi
 6754      00
 6755 00fc 4889DF   		movq	%rbx, %rdi
 6756 00ff E8000000 		call	png_chunk_benign_error
 6756      00
 6757              	.LVL871:
2242:fltk-1.3.4-1/png/pngrutil.c ****    }
 6758              		.loc 1 2242 0
 6759 0104 E95CFFFF 		jmp	.L699
 6759      FF
 6760              	.LVL872:
 6761 0109 0F1F8000 		.p2align 4,,10
 6761      000000
 6762              		.p2align 3
 6763              	.L728:
2247:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "duplicate");
 6764              		.loc 1 2247 0
 6765 0110 89EE     		movl	%ebp, %esi
 6766              	.LVL873:
 6767 0112 E8000000 		call	png_crc_finish
 6767      00
 6768              	.LVL874:
2248:fltk-1.3.4-1/png/pngrutil.c ****       return;
 6769              		.loc 1 2248 0
 6770 0117 BE000000 		movl	$.LC34, %esi
 6770      00
 6771 011c 4889DF   		movq	%rbx, %rdi
 6772 011f E8000000 		call	png_chunk_benign_error
 6772      00
 6773              	.LVL875:
2249:fltk-1.3.4-1/png/pngrutil.c ****    }
 6774              		.loc 1 2249 0
 6775 0124 E93CFFFF 		jmp	.L699
 6775      FF
 6776              	.LVL876:
 6777 0129 0F1F8000 		.p2align 4,,10
 6777      000000
 6778              		.p2align 3
 6779              	.L730:
2267:fltk-1.3.4-1/png/pngrutil.c ****       png_crc_finish(png_ptr, length);
 6780              		.loc 1 2267 0
 6781 0130 4889DF   		movq	%rbx, %rdi
 6782 0133 BE000000 		movl	$.LC48, %esi
 6782      00
 6783 0138 E8000000 		call	png_chunk_benign_error
 6783      00
 6784              	.LVL877:
2268:fltk-1.3.4-1/png/pngrutil.c ****       return;
 6785              		.loc 1 2268 0
 6786 013d 89EE     		movl	%ebp, %esi
 6787 013f 4889DF   		movq	%rbx, %rdi
 6788 0142 E8000000 		call	png_crc_finish
 6788      00
 6789              	.LVL878:
2269:fltk-1.3.4-1/png/pngrutil.c ****    }
 6790              		.loc 1 2269 0
 6791 0147 E919FFFF 		jmp	.L699
 6791      FF
 6792 014c 0F1F4000 		.p2align 4,,10
 6793              		.p2align 3
 6794              	.L706:
2291:fltk-1.3.4-1/png/pngrutil.c ****        i >= length || buffer[i++] != 0)
 6795              		.loc 1 2291 0
 6796 0150 488D4C24 		leaq	16(%rsp), %rcx
 6796      10
 6797 0155 488D5424 		leaq	12(%rsp), %rdx
 6797      0C
 6798 015a 4889EE   		movq	%rbp, %rsi
 6799 015d 4C89EF   		movq	%r13, %rdi
2288:fltk-1.3.4-1/png/pngrutil.c ****    state = 0;
 6800              		.loc 1 2288 0
 6801 0160 48C74424 		movq	$1, 16(%rsp)
 6801      10010000 
 6801      00
2289:fltk-1.3.4-1/png/pngrutil.c **** 
 6802              		.loc 1 2289 0
 6803 0169 C744240C 		movl	$0, 12(%rsp)
 6803      00000000 
2291:fltk-1.3.4-1/png/pngrutil.c ****        i >= length || buffer[i++] != 0)
 6804              		.loc 1 2291 0
 6805 0171 E8000000 		call	png_check_fp_number
 6805      00
 6806              	.LVL879:
 6807 0176 85C0     		testl	%eax, %eax
 6808 0178 7446     		je	.L709
2292:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "bad width format");
 6809              		.loc 1 2292 0 discriminator 1
 6810 017a 488B4424 		movq	16(%rsp), %rax
 6810      10
2291:fltk-1.3.4-1/png/pngrutil.c ****        i >= length || buffer[i++] != 0)
 6811              		.loc 1 2291 0 discriminator 1
 6812 017f 4839C5   		cmpq	%rax, %rbp
 6813 0182 763C     		jbe	.L709
2292:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "bad width format");
 6814              		.loc 1 2292 0
 6815 0184 4C8D7001 		leaq	1(%rax), %r14
 6816 0188 4C897424 		movq	%r14, 16(%rsp)
 6816      10
 6817 018d 41807C05 		cmpb	$0, 0(%r13,%rax)
 6817      0000
 6818 0193 752B     		jne	.L709
2295:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "non-positive width");
 6819              		.loc 1 2295 0
 6820 0195 8B44240C 		movl	12(%rsp), %eax
 6821 0199 25880100 		andl	$392, %eax
 6821      00
 6822 019e 3D080100 		cmpl	$264, %eax
 6822      00
 6823 01a3 742D     		je	.L710
2296:fltk-1.3.4-1/png/pngrutil.c **** 
 6824              		.loc 1 2296 0
 6825 01a5 BE000000 		movl	$.LC71, %esi
 6825      00
 6826 01aa 4889DF   		movq	%rbx, %rdi
 6827 01ad E8000000 		call	png_chunk_benign_error
 6827      00
 6828              	.LVL880:
 6829 01b2 E9AEFEFF 		jmp	.L699
 6829      FF
 6830 01b7 660F1F84 		.p2align 4,,10
 6830      00000000 
 6830      00
 6831              		.p2align 3
 6832              	.L709:
2293:fltk-1.3.4-1/png/pngrutil.c **** 
 6833              		.loc 1 2293 0
 6834 01c0 BE000000 		movl	$.LC70, %esi
 6834      00
 6835 01c5 4889DF   		movq	%rbx, %rdi
 6836 01c8 E8000000 		call	png_chunk_benign_error
 6836      00
 6837              	.LVL881:
 6838 01cd E993FEFF 		jmp	.L699
 6838      FF
 6839              	.L710:
 6840              	.LVL882:
 6841              	.LBB202:
2303:fltk-1.3.4-1/png/pngrutil.c ****           &state, &i) == 0 || i != length)
 6842              		.loc 1 2303 0
 6843 01d2 488D4C24 		leaq	16(%rsp), %rcx
 6843      10
 6844 01d7 488D5424 		leaq	12(%rsp), %rdx
 6844      0C
 6845 01dc 4889EE   		movq	%rbp, %rsi
 6846 01df 4C89EF   		movq	%r13, %rdi
2302:fltk-1.3.4-1/png/pngrutil.c ****       if (png_check_fp_number((png_const_charp)buffer, length,
 6847              		.loc 1 2302 0
 6848 01e2 C744240C 		movl	$0, 12(%rsp)
 6848      00000000 
2303:fltk-1.3.4-1/png/pngrutil.c ****           &state, &i) == 0 || i != length)
 6849              		.loc 1 2303 0
 6850 01ea E8000000 		call	png_check_fp_number
 6850      00
 6851              	.LVL883:
 6852 01ef 85C0     		testl	%eax, %eax
 6853 01f1 7407     		je	.L711
2304:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_benign_error(png_ptr, "bad height format");
 6854              		.loc 1 2304 0
 6855 01f3 483B6C24 		cmpq	16(%rsp), %rbp
 6855      10
 6856 01f8 7421     		je	.L712
 6857              	.L711:
2305:fltk-1.3.4-1/png/pngrutil.c **** 
 6858              		.loc 1 2305 0
 6859 01fa BE000000 		movl	$.LC72, %esi
 6859      00
 6860 01ff 4889DF   		movq	%rbx, %rdi
 6861 0202 E8000000 		call	png_chunk_benign_error
 6861      00
 6862              	.LVL884:
 6863 0207 E959FEFF 		jmp	.L699
 6863      FF
 6864              	.LVL885:
 6865              	.L726:
 6866              	.LBE202:
2236:fltk-1.3.4-1/png/pngrutil.c **** 
 6867              		.loc 1 2236 0
 6868 020c BE000000 		movl	$.LC33, %esi
 6868      00
 6869              	.LVL886:
 6870 0211 E8000000 		call	png_chunk_error
 6870      00
 6871              	.LVL887:
 6872              	.L729:
2315:fltk-1.3.4-1/png/pngrutil.c **** #endif
 6873              		.loc 1 2315 0
 6874 0216 E8000000 		call	__stack_chk_fail
 6874      00
 6875              	.LVL888:
 6876              	.L712:
 6877              	.LBB203:
2307:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_benign_error(png_ptr, "non-positive height");
 6878              		.loc 1 2307 0
 6879 021b 8B44240C 		movl	12(%rsp), %eax
 6880 021f 25880100 		andl	$392, %eax
 6880      00
 6881 0224 3D080100 		cmpl	$264, %eax
 6881      00
 6882 0229 7412     		je	.L713
2308:fltk-1.3.4-1/png/pngrutil.c **** 
 6883              		.loc 1 2308 0
 6884 022b BE000000 		movl	$.LC73, %esi
 6884      00
 6885 0230 4889DF   		movq	%rbx, %rdi
 6886 0233 E8000000 		call	png_chunk_benign_error
 6886      00
 6887              	.LVL889:
 6888 0238 E928FEFF 		jmp	.L699
 6888      FF
 6889              	.L713:
2312:fltk-1.3.4-1/png/pngrutil.c ****             (png_charp)buffer+1, (png_charp)buffer+heighti);
 6890              		.loc 1 2312 0
 6891 023d 410FB655 		movzbl	0(%r13), %edx
 6891      00
 6892 0242 498D4D01 		leaq	1(%r13), %rcx
 6893 0246 4F8D4435 		leaq	0(%r13,%r14), %r8
 6893      00
 6894 024b 4C89E6   		movq	%r12, %rsi
 6895 024e 4889DF   		movq	%rbx, %rdi
 6896 0251 E8000000 		call	png_set_sCAL_s
 6896      00
 6897              	.LVL890:
 6898 0256 E90AFEFF 		jmp	.L699
 6898      FF
 6899              	.LBE203:
 6900              		.cfi_endproc
 6901              	.LFE86:
 6903              		.section	.text.unlikely.png_handle_sCAL
 6904              	.LCOLDE74:
 6905              		.section	.text.png_handle_sCAL
 6906              	.LHOTE74:
 6907              		.section	.text.unlikely.png_handle_tIME,"ax",@progbits
 6908              	.LCOLDB75:
 6909              		.section	.text.png_handle_tIME,"ax",@progbits
 6910              	.LHOTB75:
 6911              		.p2align 4,,15
 6912              		.globl	png_handle_tIME
 6914              	png_handle_tIME:
 6915              	.LFB87:
2321:fltk-1.3.4-1/png/pngrutil.c ****    png_byte buf[7];
 6916              		.loc 1 2321 0
 6917              		.cfi_startproc
 6918              	.LVL891:
 6919 0000 55       		pushq	%rbp
 6920              		.cfi_def_cfa_offset 16
 6921              		.cfi_offset 6, -16
 6922 0001 53       		pushq	%rbx
 6923              		.cfi_def_cfa_offset 24
 6924              		.cfi_offset 3, -24
 6925 0002 4889FB   		movq	%rdi, %rbx
 6926 0005 4883EC28 		subq	$40, %rsp
 6927              		.cfi_def_cfa_offset 64
2321:fltk-1.3.4-1/png/pngrutil.c ****    png_byte buf[7];
 6928              		.loc 1 2321 0
 6929 0009 64488B04 		movq	%fs:40, %rax
 6929      25280000 
 6929      00
 6930 0012 48894424 		movq	%rax, 24(%rsp)
 6930      18
 6931 0017 31C0     		xorl	%eax, %eax
2327:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
 6932              		.loc 1 2327 0
 6933 0019 8B872C01 		movl	300(%rdi), %eax
 6933      0000
 6934 001f A801     		testb	$1, %al
 6935 0021 0F84F200 		je	.L749
 6935      0000
2330:fltk-1.3.4-1/png/pngrutil.c ****    {
 6936              		.loc 1 2330 0
 6937 0027 4885F6   		testq	%rsi, %rsi
 6938 002a 4889F5   		movq	%rsi, %rbp
 6939 002d 740A     		je	.L733
2330:fltk-1.3.4-1/png/pngrutil.c ****    {
 6940              		.loc 1 2330 0 is_stmt 0 discriminator 1
 6941 002f F6460902 		testb	$2, 9(%rsi)
 6942 0033 0F85C700 		jne	.L750
 6942      0000
 6943              	.L733:
2337:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->mode |= PNG_AFTER_IDAT;
 6944              		.loc 1 2337 0 is_stmt 1
 6945 0039 A804     		testb	$4, %al
 6946 003b 753B     		jne	.L751
2340:fltk-1.3.4-1/png/pngrutil.c ****    {
 6947              		.loc 1 2340 0
 6948 003d 83FA07   		cmpl	$7, %edx
 6949 0040 7444     		je	.L736
 6950              	.L753:
2342:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "invalid");
 6951              		.loc 1 2342 0
 6952 0042 89D6     		movl	%edx, %esi
 6953              	.LVL892:
 6954 0044 4889DF   		movq	%rbx, %rdi
 6955              	.LVL893:
 6956 0047 E8000000 		call	png_crc_finish
 6956      00
 6957              	.LVL894:
2343:fltk-1.3.4-1/png/pngrutil.c ****       return;
 6958              		.loc 1 2343 0
 6959 004c BE000000 		movl	$.LC31, %esi
 6959      00
 6960 0051 4889DF   		movq	%rbx, %rdi
 6961 0054 E8000000 		call	png_chunk_benign_error
 6961      00
 6962              	.LVL895:
 6963              	.L731:
2360:fltk-1.3.4-1/png/pngrutil.c **** #endif
 6964              		.loc 1 2360 0
 6965 0059 488B4424 		movq	24(%rsp), %rax
 6965      18
 6966 005e 64483304 		xorq	%fs:40, %rax
 6966      25280000 
 6966      00
 6967 0067 0F85B600 		jne	.L752
 6967      0000
 6968 006d 4883C428 		addq	$40, %rsp
 6969              		.cfi_remember_state
 6970              		.cfi_def_cfa_offset 24
 6971 0071 5B       		popq	%rbx
 6972              		.cfi_def_cfa_offset 16
 6973              	.LVL896:
 6974 0072 5D       		popq	%rbp
 6975              		.cfi_def_cfa_offset 8
 6976              	.LVL897:
 6977 0073 C3       		ret
 6978              	.LVL898:
 6979              		.p2align 4,,10
 6980 0074 0F1F4000 		.p2align 3
 6981              	.L751:
 6982              		.cfi_restore_state
2338:fltk-1.3.4-1/png/pngrutil.c **** 
 6983              		.loc 1 2338 0
 6984 0078 83C808   		orl	$8, %eax
2340:fltk-1.3.4-1/png/pngrutil.c ****    {
 6985              		.loc 1 2340 0
 6986 007b 83FA07   		cmpl	$7, %edx
2338:fltk-1.3.4-1/png/pngrutil.c **** 
 6987              		.loc 1 2338 0
 6988 007e 89832C01 		movl	%eax, 300(%rbx)
 6988      0000
2340:fltk-1.3.4-1/png/pngrutil.c ****    {
 6989              		.loc 1 2340 0
 6990 0084 75BC     		jne	.L753
 6991              	.L736:
2347:fltk-1.3.4-1/png/pngrutil.c **** 
 6992              		.loc 1 2347 0
 6993 0086 488D7424 		leaq	16(%rsp), %rsi
 6993      10
 6994              	.LVL899:
 6995 008b BA070000 		movl	$7, %edx
 6995      00
 6996              	.LVL900:
 6997 0090 4889DF   		movq	%rbx, %rdi
 6998 0093 E8000000 		call	png_crc_read
 6998      00
 6999              	.LVL901:
2349:fltk-1.3.4-1/png/pngrutil.c ****       return;
 7000              		.loc 1 2349 0
 7001 0098 31F6     		xorl	%esi, %esi
 7002 009a 4889DF   		movq	%rbx, %rdi
 7003 009d E8000000 		call	png_crc_finish
 7003      00
 7004              	.LVL902:
 7005 00a2 85C0     		testl	%eax, %eax
 7006 00a4 75B3     		jne	.L731
2352:fltk-1.3.4-1/png/pngrutil.c ****    mod_time.minute = buf[5];
 7007              		.loc 1 2352 0
 7008 00a6 0FB64424 		movzbl	22(%rsp), %eax
 7008      16
2357:fltk-1.3.4-1/png/pngrutil.c **** 
 7009              		.loc 1 2357 0
 7010 00ab 0FB65424 		movzbl	17(%rsp), %edx
 7010      11
2359:fltk-1.3.4-1/png/pngrutil.c **** }
 7011              		.loc 1 2359 0
 7012 00b0 4889EE   		movq	%rbp, %rsi
 7013 00b3 4889DF   		movq	%rbx, %rdi
2352:fltk-1.3.4-1/png/pngrutil.c ****    mod_time.minute = buf[5];
 7014              		.loc 1 2352 0
 7015 00b6 88442406 		movb	%al, 6(%rsp)
2353:fltk-1.3.4-1/png/pngrutil.c ****    mod_time.hour = buf[4];
 7016              		.loc 1 2353 0
 7017 00ba 0FB64424 		movzbl	21(%rsp), %eax
 7017      15
 7018 00bf 88442405 		movb	%al, 5(%rsp)
2354:fltk-1.3.4-1/png/pngrutil.c ****    mod_time.day = buf[3];
 7019              		.loc 1 2354 0
 7020 00c3 0FB64424 		movzbl	20(%rsp), %eax
 7020      14
 7021 00c8 88442404 		movb	%al, 4(%rsp)
2355:fltk-1.3.4-1/png/pngrutil.c ****    mod_time.month = buf[2];
 7022              		.loc 1 2355 0
 7023 00cc 0FB64424 		movzbl	19(%rsp), %eax
 7023      13
 7024 00d1 88442403 		movb	%al, 3(%rsp)
2356:fltk-1.3.4-1/png/pngrutil.c ****    mod_time.year = png_get_uint_16(buf);
 7025              		.loc 1 2356 0
 7026 00d5 0FB64424 		movzbl	18(%rsp), %eax
 7026      12
 7027 00da 88442402 		movb	%al, 2(%rsp)
2357:fltk-1.3.4-1/png/pngrutil.c **** 
 7028              		.loc 1 2357 0
 7029 00de 0FB64424 		movzbl	16(%rsp), %eax
 7029      10
 7030 00e3 C1E008   		sall	$8, %eax
 7031 00e6 01D0     		addl	%edx, %eax
2359:fltk-1.3.4-1/png/pngrutil.c **** }
 7032              		.loc 1 2359 0
 7033 00e8 4889E2   		movq	%rsp, %rdx
2357:fltk-1.3.4-1/png/pngrutil.c **** 
 7034              		.loc 1 2357 0
 7035 00eb 66890424 		movw	%ax, (%rsp)
2359:fltk-1.3.4-1/png/pngrutil.c **** }
 7036              		.loc 1 2359 0
 7037 00ef E8000000 		call	png_set_tIME
 7037      00
 7038              	.LVL903:
 7039 00f4 E960FFFF 		jmp	.L731
 7039      FF
 7040              	.LVL904:
 7041 00f9 0F1F8000 		.p2align 4,,10
 7041      000000
 7042              		.p2align 3
 7043              	.L750:
2332:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "duplicate");
 7044              		.loc 1 2332 0
 7045 0100 89D6     		movl	%edx, %esi
 7046              	.LVL905:
 7047 0102 E8000000 		call	png_crc_finish
 7047      00
 7048              	.LVL906:
2333:fltk-1.3.4-1/png/pngrutil.c ****       return;
 7049              		.loc 1 2333 0
 7050 0107 BE000000 		movl	$.LC34, %esi
 7050      00
 7051 010c 4889DF   		movq	%rbx, %rdi
 7052 010f E8000000 		call	png_chunk_benign_error
 7052      00
 7053              	.LVL907:
2334:fltk-1.3.4-1/png/pngrutil.c ****    }
 7054              		.loc 1 2334 0
 7055 0114 E940FFFF 		jmp	.L731
 7055      FF
 7056              	.LVL908:
 7057              	.L749:
2328:fltk-1.3.4-1/png/pngrutil.c **** 
 7058              		.loc 1 2328 0
 7059 0119 BE000000 		movl	$.LC33, %esi
 7059      00
 7060              	.LVL909:
 7061 011e E8000000 		call	png_chunk_error
 7061      00
 7062              	.LVL910:
 7063              	.L752:
2360:fltk-1.3.4-1/png/pngrutil.c **** #endif
 7064              		.loc 1 2360 0
 7065 0123 E8000000 		call	__stack_chk_fail
 7065      00
 7066              	.LVL911:
 7067              		.cfi_endproc
 7068              	.LFE87:
 7070              		.section	.text.unlikely.png_handle_tIME
 7071              	.LCOLDE75:
 7072              		.section	.text.png_handle_tIME
 7073              	.LHOTE75:
 7074              		.section	.rodata.str1.1
 7075              	.LC76:
 7076 0229 6E6F2073 		.string	"no space in chunk cache"
 7076      70616365 
 7076      20696E20 
 7076      6368756E 
 7076      6B206361 
 7077              		.section	.rodata.str1.8
 7078 00ec 00000000 		.align 8
 7079              	.LC77:
 7080 00f0 496E7375 		.string	"Insufficient memory to process text chunk"
 7080      66666963 
 7080      69656E74 
 7080      206D656D 
 7080      6F727920 
 7081              		.section	.text.unlikely.png_handle_tEXt,"ax",@progbits
 7082              	.LCOLDB78:
 7083              		.section	.text.png_handle_tEXt,"ax",@progbits
 7084              	.LHOTB78:
 7085              		.p2align 4,,15
 7086              		.globl	png_handle_tEXt
 7088              	png_handle_tEXt:
 7089              	.LFB88:
2367:fltk-1.3.4-1/png/pngrutil.c ****    png_text  text_info;
 7090              		.loc 1 2367 0
 7091              		.cfi_startproc
 7092              	.LVL912:
 7093 0000 4155     		pushq	%r13
 7094              		.cfi_def_cfa_offset 16
 7095              		.cfi_offset 13, -16
 7096 0002 4154     		pushq	%r12
 7097              		.cfi_def_cfa_offset 24
 7098              		.cfi_offset 12, -24
 7099 0004 4989F4   		movq	%rsi, %r12
 7100 0007 55       		pushq	%rbp
 7101              		.cfi_def_cfa_offset 32
 7102              		.cfi_offset 6, -32
 7103 0008 53       		pushq	%rbx
 7104              		.cfi_def_cfa_offset 40
 7105              		.cfi_offset 3, -40
 7106 0009 89D5     		movl	%edx, %ebp
 7107 000b 4889FB   		movq	%rdi, %rbx
 7108 000e 4883EC48 		subq	$72, %rsp
 7109              		.cfi_def_cfa_offset 112
2367:fltk-1.3.4-1/png/pngrutil.c ****    png_text  text_info;
 7110              		.loc 1 2367 0
 7111 0012 64488B04 		movq	%fs:40, %rax
 7111      25280000 
 7111      00
 7112 001b 48894424 		movq	%rax, 56(%rsp)
 7112      38
 7113 0020 31C0     		xorl	%eax, %eax
 7114              	.LVL913:
2377:fltk-1.3.4-1/png/pngrutil.c ****    {
 7115              		.loc 1 2377 0
 7116 0022 8B876404 		movl	1124(%rdi), %eax
 7116      0000
 7117 0028 85C0     		testl	%eax, %eax
 7118 002a 741B     		je	.L755
2379:fltk-1.3.4-1/png/pngrutil.c ****       {
 7119              		.loc 1 2379 0
 7120 002c 83F801   		cmpl	$1, %eax
 7121 002f 0F841B01 		je	.L779
 7121      0000
2385:fltk-1.3.4-1/png/pngrutil.c ****       {
 7122              		.loc 1 2385 0
 7123 0035 83E801   		subl	$1, %eax
 7124 0038 83F801   		cmpl	$1, %eax
 7125 003b 89876404 		movl	%eax, 1124(%rdi)
 7125      0000
 7126 0041 0F841901 		je	.L780
 7126      0000
 7127              	.L755:
2394:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
 7128              		.loc 1 2394 0
 7129 0047 8B832C01 		movl	300(%rbx), %eax
 7129      0000
 7130 004d A801     		testb	$1, %al
 7131 004f 0F843D01 		je	.L781
 7131      0000
2397:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->mode |= PNG_AFTER_IDAT;
 7132              		.loc 1 2397 0
 7133 0055 A804     		testb	$4, %al
 7134 0057 7557     		jne	.L782
 7135              	.L759:
2409:fltk-1.3.4-1/png/pngrutil.c **** 
 7136              		.loc 1 2409 0
 7137 0059 8D7501   		leal	1(%rbp), %esi
 7138              	.LVL914:
 7139 005c BA010000 		movl	$1, %edx
 7139      00
 7140              	.LVL915:
 7141 0061 4889DF   		movq	%rbx, %rdi
 7142              	.LVL916:
 7143 0064 E8000000 		call	png_read_buffer
 7143      00
 7144              	.LVL917:
2411:fltk-1.3.4-1/png/pngrutil.c ****    {
 7145              		.loc 1 2411 0
 7146 0069 4885C0   		testq	%rax, %rax
2409:fltk-1.3.4-1/png/pngrutil.c **** 
 7147              		.loc 1 2409 0
 7148 006c 4989C5   		movq	%rax, %r13
 7149              	.LVL918:
2411:fltk-1.3.4-1/png/pngrutil.c ****    {
 7150              		.loc 1 2411 0
 7151 006f 0F840B01 		je	.L783
 7151      0000
2417:fltk-1.3.4-1/png/pngrutil.c **** 
 7152              		.loc 1 2417 0
 7153 0075 4889C6   		movq	%rax, %rsi
 7154 0078 89EA     		movl	%ebp, %edx
 7155 007a 4889DF   		movq	%rbx, %rdi
 7156 007d E8000000 		call	png_crc_read
 7156      00
 7157              	.LVL919:
2419:fltk-1.3.4-1/png/pngrutil.c ****       return;
 7158              		.loc 1 2419 0
 7159 0082 31F6     		xorl	%esi, %esi
 7160 0084 4889DF   		movq	%rbx, %rdi
 7161 0087 E8000000 		call	png_crc_finish
 7161      00
 7162              	.LVL920:
 7163 008c 85C0     		testl	%eax, %eax
 7164 008e 7430     		je	.L784
 7165              	.LVL921:
 7166              	.L754:
2441:fltk-1.3.4-1/png/pngrutil.c **** #endif
 7167              		.loc 1 2441 0
 7168 0090 488B4424 		movq	56(%rsp), %rax
 7168      38
 7169 0095 64483304 		xorq	%fs:40, %rax
 7169      25280000 
 7169      00
 7170 009e 0F85FB00 		jne	.L785
 7170      0000
 7171 00a4 4883C448 		addq	$72, %rsp
 7172              		.cfi_remember_state
 7173              		.cfi_def_cfa_offset 40
 7174 00a8 5B       		popq	%rbx
 7175              		.cfi_def_cfa_offset 32
 7176              	.LVL922:
 7177 00a9 5D       		popq	%rbp
 7178              		.cfi_def_cfa_offset 24
 7179 00aa 415C     		popq	%r12
 7180              		.cfi_def_cfa_offset 16
 7181              	.LVL923:
 7182 00ac 415D     		popq	%r13
 7183              		.cfi_def_cfa_offset 8
 7184 00ae C3       		ret
 7185              	.LVL924:
 7186 00af 90       		.p2align 4,,10
 7187              		.p2align 3
 7188              	.L782:
 7189              		.cfi_restore_state
2398:fltk-1.3.4-1/png/pngrutil.c **** 
 7190              		.loc 1 2398 0
 7191 00b0 83C808   		orl	$8, %eax
 7192 00b3 89832C01 		movl	%eax, 300(%rbx)
 7192      0000
 7193 00b9 EB9E     		jmp	.L759
 7194              	.LVL925:
 7195 00bb 0F1F4400 		.p2align 4,,10
 7195      00
 7196              		.p2align 3
 7197              	.L784:
2423:fltk-1.3.4-1/png/pngrutil.c **** 
 7198              		.loc 1 2423 0
 7199 00c0 4C01ED   		addq	%r13, %rbp
 7200              	.LVL926:
2425:fltk-1.3.4-1/png/pngrutil.c ****       /* Empty loop to find end of key */ ;
 7201              		.loc 1 2425 0
 7202 00c3 4C89EF   		movq	%r13, %rdi
2423:fltk-1.3.4-1/png/pngrutil.c **** 
 7203              		.loc 1 2423 0
 7204 00c6 C6450000 		movb	$0, 0(%rbp)
 7205              	.LVL927:
2425:fltk-1.3.4-1/png/pngrutil.c ****       /* Empty loop to find end of key */ ;
 7206              		.loc 1 2425 0
 7207 00ca 41807D00 		cmpb	$0, 0(%r13)
 7207      00
 7208 00cf 7410     		je	.L761
 7209              	.LVL928:
 7210              		.p2align 4,,10
 7211 00d1 0F1F8000 		.p2align 3
 7211      000000
 7212              	.L762:
2425:fltk-1.3.4-1/png/pngrutil.c ****       /* Empty loop to find end of key */ ;
 7213              		.loc 1 2425 0 is_stmt 0 discriminator 3
 7214 00d8 4883C701 		addq	$1, %rdi
 7215              	.LVL929:
 7216 00dc 803F00   		cmpb	$0, (%rdi)
 7217 00df 75F7     		jne	.L762
 7218              	.L761:
2429:fltk-1.3.4-1/png/pngrutil.c **** 
 7219              		.loc 1 2429 0 is_stmt 1
 7220 00e1 31C0     		xorl	%eax, %eax
 7221 00e3 4839FD   		cmpq	%rdi, %rbp
2431:fltk-1.3.4-1/png/pngrutil.c ****    text_info.key = key;
 7222              		.loc 1 2431 0
 7223 00e6 C70424FF 		movl	$-1, (%rsp)
 7223      FFFFFF
2429:fltk-1.3.4-1/png/pngrutil.c **** 
 7224              		.loc 1 2429 0
 7225 00ed 0F95C0   		setne	%al
2432:fltk-1.3.4-1/png/pngrutil.c ****    text_info.lang = NULL;
 7226              		.loc 1 2432 0
 7227 00f0 4C896C24 		movq	%r13, 8(%rsp)
 7227      08
2433:fltk-1.3.4-1/png/pngrutil.c ****    text_info.lang_key = NULL;
 7228              		.loc 1 2433 0
 7229 00f5 48C74424 		movq	$0, 40(%rsp)
 7229      28000000 
 7229      00
2429:fltk-1.3.4-1/png/pngrutil.c **** 
 7230              		.loc 1 2429 0
 7231 00fe 4801C7   		addq	%rax, %rdi
 7232              	.LVL930:
2434:fltk-1.3.4-1/png/pngrutil.c ****    text_info.itxt_length = 0;
 7233              		.loc 1 2434 0
 7234 0101 48C74424 		movq	$0, 48(%rsp)
 7234      30000000 
 7234      00
2435:fltk-1.3.4-1/png/pngrutil.c ****    text_info.text = text;
 7235              		.loc 1 2435 0
 7236 010a 48C74424 		movq	$0, 32(%rsp)
 7236      20000000 
 7236      00
2436:fltk-1.3.4-1/png/pngrutil.c ****    text_info.text_length = strlen(text);
 7237              		.loc 1 2436 0
 7238 0113 48897C24 		movq	%rdi, 16(%rsp)
 7238      10
2437:fltk-1.3.4-1/png/pngrutil.c **** 
 7239              		.loc 1 2437 0
 7240 0118 E8000000 		call	strlen
 7240      00
 7241              	.LVL931:
2439:fltk-1.3.4-1/png/pngrutil.c ****       png_warning(png_ptr, "Insufficient memory to process text chunk");
 7242              		.loc 1 2439 0
 7243 011d B9010000 		movl	$1, %ecx
 7243      00
 7244 0122 4889E2   		movq	%rsp, %rdx
 7245 0125 4C89E6   		movq	%r12, %rsi
 7246 0128 4889DF   		movq	%rbx, %rdi
2437:fltk-1.3.4-1/png/pngrutil.c **** 
 7247              		.loc 1 2437 0
 7248 012b 48894424 		movq	%rax, 24(%rsp)
 7248      18
2439:fltk-1.3.4-1/png/pngrutil.c ****       png_warning(png_ptr, "Insufficient memory to process text chunk");
 7249              		.loc 1 2439 0
 7250 0130 E8000000 		call	png_set_text_2
 7250      00
 7251              	.LVL932:
 7252 0135 85C0     		testl	%eax, %eax
 7253 0137 0F8453FF 		je	.L754
 7253      FFFF
2440:fltk-1.3.4-1/png/pngrutil.c **** }
 7254              		.loc 1 2440 0
 7255 013d BE000000 		movl	$.LC77, %esi
 7255      00
 7256 0142 4889DF   		movq	%rbx, %rdi
 7257 0145 E8000000 		call	png_warning
 7257      00
 7258              	.LVL933:
 7259 014a E941FFFF 		jmp	.L754
 7259      FF
 7260              	.LVL934:
 7261 014f 90       		.p2align 4,,10
 7262              		.p2align 3
 7263              	.L779:
2381:fltk-1.3.4-1/png/pngrutil.c ****          return;
 7264              		.loc 1 2381 0
 7265 0150 89EE     		movl	%ebp, %esi
 7266              	.LVL935:
 7267 0152 E8000000 		call	png_crc_finish
 7267      00
 7268              	.LVL936:
2382:fltk-1.3.4-1/png/pngrutil.c ****       }
 7269              		.loc 1 2382 0
 7270 0157 E934FFFF 		jmp	.L754
 7270      FF
 7271              	.LVL937:
 7272 015c 0F1F4000 		.p2align 4,,10
 7273              		.p2align 3
 7274              	.L780:
2387:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_benign_error(png_ptr, "no space in chunk cache");
 7275              		.loc 1 2387 0
 7276 0160 89EE     		movl	%ebp, %esi
 7277              	.LVL938:
 7278 0162 E8000000 		call	png_crc_finish
 7278      00
 7279              	.LVL939:
2388:fltk-1.3.4-1/png/pngrutil.c ****          return;
 7280              		.loc 1 2388 0
 7281 0167 BE000000 		movl	$.LC76, %esi
 7281      00
 7282 016c 4889DF   		movq	%rbx, %rdi
 7283 016f E8000000 		call	png_chunk_benign_error
 7283      00
 7284              	.LVL940:
2389:fltk-1.3.4-1/png/pngrutil.c ****       }
 7285              		.loc 1 2389 0
 7286 0174 E917FFFF 		jmp	.L754
 7286      FF
 7287              	.LVL941:
 7288 0179 0F1F8000 		.p2align 4,,10
 7288      000000
 7289              		.p2align 3
 7290              	.L783:
2413:fltk-1.3.4-1/png/pngrutil.c ****      return;
 7291              		.loc 1 2413 0
 7292 0180 BE000000 		movl	$.LC48, %esi
 7292      00
 7293 0185 4889DF   		movq	%rbx, %rdi
 7294 0188 E8000000 		call	png_chunk_benign_error
 7294      00
 7295              	.LVL942:
2414:fltk-1.3.4-1/png/pngrutil.c ****    }
 7296              		.loc 1 2414 0
 7297 018d E9FEFEFF 		jmp	.L754
 7297      FF
 7298              	.LVL943:
 7299              	.L781:
2395:fltk-1.3.4-1/png/pngrutil.c **** 
 7300              		.loc 1 2395 0
 7301 0192 BE000000 		movl	$.LC33, %esi
 7301      00
 7302              	.LVL944:
 7303 0197 4889DF   		movq	%rbx, %rdi
 7304 019a E8000000 		call	png_chunk_error
 7304      00
 7305              	.LVL945:
 7306              	.L785:
2441:fltk-1.3.4-1/png/pngrutil.c **** #endif
 7307              		.loc 1 2441 0
 7308 019f E8000000 		call	__stack_chk_fail
 7308      00
 7309              	.LVL946:
 7310              		.cfi_endproc
 7311              	.LFE88:
 7313              		.section	.text.unlikely.png_handle_tEXt
 7314              	.LCOLDE78:
 7315              		.section	.text.png_handle_tEXt
 7316              	.LHOTE78:
 7317              		.section	.rodata.str1.1
 7318              	.LC79:
 7319 0241 696E7375 		.string	"insufficient memory"
 7319      66666963 
 7319      69656E74 
 7319      206D656D 
 7319      6F727900 
 7320              	.LC80:
 7321 0255 756E6B6E 		.string	"unknown compression type"
 7321      6F776E20 
 7321      636F6D70 
 7321      72657373 
 7321      696F6E20 
 7322              		.section	.text.unlikely.png_handle_zTXt,"ax",@progbits
 7323              	.LCOLDB81:
 7324              		.section	.text.png_handle_zTXt,"ax",@progbits
 7325              	.LHOTB81:
 7326              		.p2align 4,,15
 7327              		.globl	png_handle_zTXt
 7329              	png_handle_zTXt:
 7330              	.LFB89:
2448:fltk-1.3.4-1/png/pngrutil.c ****    png_const_charp errmsg = NULL;
 7331              		.loc 1 2448 0
 7332              		.cfi_startproc
 7333              	.LVL947:
 7334 0000 4156     		pushq	%r14
 7335              		.cfi_def_cfa_offset 16
 7336              		.cfi_offset 14, -16
 7337 0002 4155     		pushq	%r13
 7338              		.cfi_def_cfa_offset 24
 7339              		.cfi_offset 13, -24
 7340 0004 4989FE   		movq	%rdi, %r14
 7341 0007 4154     		pushq	%r12
 7342              		.cfi_def_cfa_offset 32
 7343              		.cfi_offset 12, -32
 7344 0009 55       		pushq	%rbp
 7345              		.cfi_def_cfa_offset 40
 7346              		.cfi_offset 6, -40
 7347 000a 4989F4   		movq	%rsi, %r12
 7348 000d 53       		pushq	%rbx
 7349              		.cfi_def_cfa_offset 48
 7350              		.cfi_offset 3, -48
 7351 000e 4189D5   		movl	%edx, %r13d
 7352 0011 4883EC50 		subq	$80, %rsp
 7353              		.cfi_def_cfa_offset 128
2448:fltk-1.3.4-1/png/pngrutil.c ****    png_const_charp errmsg = NULL;
 7354              		.loc 1 2448 0
 7355 0015 64488B04 		movq	%fs:40, %rax
 7355      25280000 
 7355      00
 7356 001e 48894424 		movq	%rax, 72(%rsp)
 7356      48
 7357 0023 31C0     		xorl	%eax, %eax
 7358              	.LVL948:
2456:fltk-1.3.4-1/png/pngrutil.c ****    {
 7359              		.loc 1 2456 0
 7360 0025 8B876404 		movl	1124(%rdi), %eax
 7360      0000
 7361 002b 85C0     		testl	%eax, %eax
 7362 002d 741B     		je	.L787
2458:fltk-1.3.4-1/png/pngrutil.c ****       {
 7363              		.loc 1 2458 0
 7364 002f 83F801   		cmpl	$1, %eax
 7365 0032 0F845D01 		je	.L824
 7365      0000
2464:fltk-1.3.4-1/png/pngrutil.c ****       {
 7366              		.loc 1 2464 0
 7367 0038 83E801   		subl	$1, %eax
 7368 003b 83F801   		cmpl	$1, %eax
 7369 003e 89876404 		movl	%eax, 1124(%rdi)
 7369      0000
 7370 0044 0F845701 		je	.L825
 7370      0000
 7371              	.L787:
2473:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
 7372              		.loc 1 2473 0
 7373 004a 418B862C 		movl	300(%r14), %eax
 7373      010000
 7374 0051 A801     		testb	$1, %al
 7375 0053 0F84D901 		je	.L826
 7375      0000
2476:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->mode |= PNG_AFTER_IDAT;
 7376              		.loc 1 2476 0
 7377 0059 A804     		testb	$4, %al
 7378 005b 0F85AF00 		jne	.L827
 7378      0000
 7379              	.L791:
2479:fltk-1.3.4-1/png/pngrutil.c **** 
 7380              		.loc 1 2479 0
 7381 0061 4489EE   		movl	%r13d, %esi
 7382              	.LVL949:
 7383 0064 BA020000 		movl	$2, %edx
 7383      00
 7384              	.LVL950:
 7385 0069 4C89F7   		movq	%r14, %rdi
 7386              	.LVL951:
 7387 006c E8000000 		call	png_read_buffer
 7387      00
 7388              	.LVL952:
2481:fltk-1.3.4-1/png/pngrutil.c ****    {
 7389              		.loc 1 2481 0
 7390 0071 4885C0   		testq	%rax, %rax
2479:fltk-1.3.4-1/png/pngrutil.c **** 
 7391              		.loc 1 2479 0
 7392 0074 4889C5   		movq	%rax, %rbp
 7393              	.LVL953:
2481:fltk-1.3.4-1/png/pngrutil.c ****    {
 7394              		.loc 1 2481 0
 7395 0077 0F84FB00 		je	.L828
 7395      0000
2488:fltk-1.3.4-1/png/pngrutil.c **** 
 7396              		.loc 1 2488 0
 7397 007d 4889C6   		movq	%rax, %rsi
 7398 0080 4489EA   		movl	%r13d, %edx
 7399 0083 4C89F7   		movq	%r14, %rdi
 7400 0086 E8000000 		call	png_crc_read
 7400      00
 7401              	.LVL954:
2490:fltk-1.3.4-1/png/pngrutil.c ****       return;
 7402              		.loc 1 2490 0
 7403 008b 31F6     		xorl	%esi, %esi
 7404 008d 4C89F7   		movq	%r14, %rdi
 7405 0090 E8000000 		call	png_crc_finish
 7405      00
 7406              	.LVL955:
 7407 0095 85C0     		testl	%eax, %eax
 7408 0097 754F     		jne	.L786
 7409              	.LVL956:
2494:fltk-1.3.4-1/png/pngrutil.c ****       keyword_length < length && buffer[keyword_length] != 0;
 7410              		.loc 1 2494 0 discriminator 1
 7411 0099 4585ED   		testl	%r13d, %r13d
 7412 009c 0F847E00 		je	.L807
 7412      0000
2495:fltk-1.3.4-1/png/pngrutil.c ****       ++keyword_length)
 7413              		.loc 1 2495 0
 7414 00a2 807D0000 		cmpb	$0, 0(%rbp)
 7415 00a6 7478     		je	.L807
 7416 00a8 488D4501 		leaq	1(%rbp), %rax
 7417 00ac 31D2     		xorl	%edx, %edx
 7418 00ae EB0C     		jmp	.L797
 7419              	.LVL957:
 7420              		.p2align 4,,10
 7421              		.p2align 3
 7422              	.L795:
 7423 00b0 4883C001 		addq	$1, %rax
 7424 00b4 8078FF00 		cmpb	$0, -1(%rax)
 7425 00b8 740D     		je	.L798
 7426 00ba 89DA     		movl	%ebx, %edx
 7427              	.LVL958:
 7428              	.L797:
2496:fltk-1.3.4-1/png/pngrutil.c ****       /* Empty loop to find end of name */ ;
 7429              		.loc 1 2496 0
 7430 00bc 8D5A01   		leal	1(%rdx), %ebx
 7431              	.LVL959:
2494:fltk-1.3.4-1/png/pngrutil.c ****       keyword_length < length && buffer[keyword_length] != 0;
 7432              		.loc 1 2494 0
 7433 00bf 4139DD   		cmpl	%ebx, %r13d
 7434 00c2 75EC     		jne	.L795
 7435 00c4 4489EB   		movl	%r13d, %ebx
 7436              	.LVL960:
 7437              	.L798:
2499:fltk-1.3.4-1/png/pngrutil.c ****       errmsg = "bad keyword";
 7438              		.loc 1 2499 0
 7439 00c7 83FA4E   		cmpl	$78, %edx
 7440 00ca 7754     		ja	.L807
2506:fltk-1.3.4-1/png/pngrutil.c ****       errmsg = "truncated";
 7441              		.loc 1 2506 0
 7442 00cc 8D4204   		leal	4(%rdx), %eax
 7443 00cf 4139C5   		cmpl	%eax, %r13d
 7444 00d2 735C     		jnb	.L829
2507:fltk-1.3.4-1/png/pngrutil.c **** 
 7445              		.loc 1 2507 0
 7446 00d4 BE000000 		movl	$.LC47, %esi
 7446      00
 7447              	.LVL961:
2549:fltk-1.3.4-1/png/pngrutil.c **** }
 7448              		.loc 1 2549 0
 7449 00d9 4C89F7   		movq	%r14, %rdi
 7450 00dc E8000000 		call	png_chunk_benign_error
 7450      00
 7451              	.LVL962:
 7452              		.p2align 4,,10
 7453 00e1 0F1F8000 		.p2align 3
 7453      000000
 7454              	.L786:
2550:fltk-1.3.4-1/png/pngrutil.c **** #endif
 7455              		.loc 1 2550 0
 7456 00e8 488B4424 		movq	72(%rsp), %rax
 7456      48
 7457 00ed 64483304 		xorq	%fs:40, %rax
 7457      25280000 
 7457      00
 7458 00f6 0F854301 		jne	.L830
 7458      0000
 7459 00fc 4883C450 		addq	$80, %rsp
 7460              		.cfi_remember_state
 7461              		.cfi_def_cfa_offset 48
 7462 0100 5B       		popq	%rbx
 7463              		.cfi_def_cfa_offset 40
 7464 0101 5D       		popq	%rbp
 7465              		.cfi_def_cfa_offset 32
 7466 0102 415C     		popq	%r12
 7467              		.cfi_def_cfa_offset 24
 7468              	.LVL963:
 7469 0104 415D     		popq	%r13
 7470              		.cfi_def_cfa_offset 16
 7471              	.LVL964:
 7472 0106 415E     		popq	%r14
 7473              		.cfi_def_cfa_offset 8
 7474              	.LVL965:
 7475 0108 C3       		ret
 7476              	.LVL966:
 7477 0109 0F1F8000 		.p2align 4,,10
 7477      000000
 7478              		.p2align 3
 7479              	.L827:
 7480              		.cfi_restore_state
2477:fltk-1.3.4-1/png/pngrutil.c **** 
 7481              		.loc 1 2477 0
 7482 0110 83C808   		orl	$8, %eax
 7483 0113 4189862C 		movl	%eax, 300(%r14)
 7483      010000
 7484 011a E942FFFF 		jmp	.L791
 7484      FF
 7485              	.LVL967:
 7486 011f 90       		.p2align 4,,10
 7487              		.p2align 3
 7488              	.L807:
2500:fltk-1.3.4-1/png/pngrutil.c **** 
 7489              		.loc 1 2500 0
 7490 0120 BE000000 		movl	$.LC49, %esi
 7490      00
 7491              	.LVL968:
 7492              	.L803:
2549:fltk-1.3.4-1/png/pngrutil.c **** }
 7493              		.loc 1 2549 0
 7494 0125 4C89F7   		movq	%r14, %rdi
 7495 0128 E8000000 		call	png_chunk_benign_error
 7495      00
 7496              	.LVL969:
 7497 012d EBB9     		jmp	.L786
 7498              	.LVL970:
 7499 012f 90       		.p2align 4,,10
 7500              		.p2align 3
 7501              	.L829:
2509:fltk-1.3.4-1/png/pngrutil.c ****       errmsg = "unknown compression type";
 7502              		.loc 1 2509 0
 7503 0130 8D4202   		leal	2(%rdx), %eax
2510:fltk-1.3.4-1/png/pngrutil.c **** 
 7504              		.loc 1 2510 0
 7505 0133 BE000000 		movl	$.LC80, %esi
 7505      00
2509:fltk-1.3.4-1/png/pngrutil.c ****       errmsg = "unknown compression type";
 7506              		.loc 1 2509 0
 7507 0138 807C0500 		cmpb	$0, 0(%rbp,%rax)
 7507      00
 7508 013d 75E6     		jne	.L803
 7509              	.LBB204:
2520:fltk-1.3.4-1/png/pngrutil.c ****          &uncompressed_length, 1/*terminate*/) == Z_STREAM_END)
 7510              		.loc 1 2520 0
 7511 013f 8D6A03   		leal	3(%rdx), %ebp
 7512              	.LVL971:
 7513 0142 488D4C24 		leaq	8(%rsp), %rcx
 7513      08
 7514 0147 4489EE   		movl	%r13d, %esi
 7515 014a 4C89F7   		movq	%r14, %rdi
2514:fltk-1.3.4-1/png/pngrutil.c **** 
 7516              		.loc 1 2514 0
 7517 014d 48C74424 		movq	$-1, 8(%rsp)
 7517      08FFFFFF 
 7517      FF
2520:fltk-1.3.4-1/png/pngrutil.c ****          &uncompressed_length, 1/*terminate*/) == Z_STREAM_END)
 7518              		.loc 1 2520 0
 7519 0156 89EA     		movl	%ebp, %edx
 7520              	.LVL972:
 7521 0158 E8000000 		call	png_decompress_chunk.constprop.5
 7521      00
 7522              	.LVL973:
 7523 015d 83F801   		cmpl	$1, %eax
 7524 0160 7458     		je	.L831
2545:fltk-1.3.4-1/png/pngrutil.c ****    }
 7525              		.loc 1 2545 0
 7526 0162 498BB670 		movq	368(%r14), %rsi
 7526      010000
 7527              	.LVL974:
 7528              	.LBE204:
2548:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, errmsg);
 7529              		.loc 1 2548 0
 7530 0169 4885F6   		testq	%rsi, %rsi
 7531 016c 0F8476FF 		je	.L786
 7531      FFFF
 7532 0172 EBB1     		jmp	.L803
 7533              	.LVL975:
 7534              		.p2align 4,,10
 7535 0174 0F1F4000 		.p2align 3
 7536              	.L828:
2483:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of memory");
 7537              		.loc 1 2483 0
 7538 0178 4489EE   		movl	%r13d, %esi
 7539 017b 4C89F7   		movq	%r14, %rdi
 7540 017e E8000000 		call	png_crc_finish
 7540      00
 7541              	.LVL976:
2484:fltk-1.3.4-1/png/pngrutil.c ****       return;
 7542              		.loc 1 2484 0
 7543 0183 BE000000 		movl	$.LC48, %esi
 7543      00
 7544 0188 4C89F7   		movq	%r14, %rdi
 7545 018b E8000000 		call	png_chunk_benign_error
 7545      00
 7546              	.LVL977:
2485:fltk-1.3.4-1/png/pngrutil.c ****    }
 7547              		.loc 1 2485 0
 7548 0190 E953FFFF 		jmp	.L786
 7548      FF
 7549              	.LVL978:
 7550              	.L824:
2460:fltk-1.3.4-1/png/pngrutil.c ****          return;
 7551              		.loc 1 2460 0
 7552 0195 89D6     		movl	%edx, %esi
 7553              	.LVL979:
 7554 0197 E8000000 		call	png_crc_finish
 7554      00
 7555              	.LVL980:
2461:fltk-1.3.4-1/png/pngrutil.c ****       }
 7556              		.loc 1 2461 0
 7557 019c E947FFFF 		jmp	.L786
 7557      FF
 7558              	.LVL981:
 7559              	.L825:
2466:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_benign_error(png_ptr, "no space in chunk cache");
 7560              		.loc 1 2466 0
 7561 01a1 89D6     		movl	%edx, %esi
 7562              	.LVL982:
 7563 01a3 E8000000 		call	png_crc_finish
 7563      00
 7564              	.LVL983:
2467:fltk-1.3.4-1/png/pngrutil.c ****          return;
 7565              		.loc 1 2467 0
 7566 01a8 BE000000 		movl	$.LC76, %esi
 7566      00
 7567 01ad 4C89F7   		movq	%r14, %rdi
 7568 01b0 E8000000 		call	png_chunk_benign_error
 7568      00
 7569              	.LVL984:
2468:fltk-1.3.4-1/png/pngrutil.c ****       }
 7570              		.loc 1 2468 0
 7571 01b5 E92EFFFF 		jmp	.L786
 7571      FF
 7572              	.LVL985:
 7573              	.L831:
 7574              	.LBB206:
 7575              	.LBB205:
2529:fltk-1.3.4-1/png/pngrutil.c ****          buffer[uncompressed_length+(keyword_length+2)] = 0;
 7576              		.loc 1 2529 0
 7577 01ba 498B8698 		movq	1176(%r14), %rax
 7577      040000
 7578              	.LVL986:
2530:fltk-1.3.4-1/png/pngrutil.c **** 
 7579              		.loc 1 2530 0
 7580 01c1 89EA     		movl	%ebp, %edx
2540:fltk-1.3.4-1/png/pngrutil.c ****             errmsg = "insufficient memory";
 7581              		.loc 1 2540 0
 7582 01c3 4C89E6   		movq	%r12, %rsi
 7583 01c6 4C89F7   		movq	%r14, %rdi
2530:fltk-1.3.4-1/png/pngrutil.c **** 
 7584              		.loc 1 2530 0
 7585 01c9 4889C1   		movq	%rax, %rcx
 7586 01cc 48034C24 		addq	8(%rsp), %rcx
 7586      08
 7587 01d1 C6041100 		movb	$0, (%rcx,%rdx)
2533:fltk-1.3.4-1/png/pngrutil.c ****          text.text = (png_charp)(buffer + keyword_length+2);
 7588              		.loc 1 2533 0
 7589 01d5 48894424 		movq	%rax, 24(%rsp)
 7589      18
2534:fltk-1.3.4-1/png/pngrutil.c ****          text.text_length = uncompressed_length;
 7590              		.loc 1 2534 0
 7591 01da 488D4418 		leaq	2(%rax,%rbx), %rax
 7591      02
 7592              	.LVL987:
2540:fltk-1.3.4-1/png/pngrutil.c ****             errmsg = "insufficient memory";
 7593              		.loc 1 2540 0
 7594 01df 488D5424 		leaq	16(%rsp), %rdx
 7594      10
 7595 01e4 B9010000 		movl	$1, %ecx
 7595      00
2532:fltk-1.3.4-1/png/pngrutil.c ****          text.key = (png_charp)buffer;
 7596              		.loc 1 2532 0
 7597 01e9 C7442410 		movl	$0, 16(%rsp)
 7597      00000000 
2534:fltk-1.3.4-1/png/pngrutil.c ****          text.text_length = uncompressed_length;
 7598              		.loc 1 2534 0
 7599 01f1 48894424 		movq	%rax, 32(%rsp)
 7599      20
2535:fltk-1.3.4-1/png/pngrutil.c ****          text.itxt_length = 0;
 7600              		.loc 1 2535 0
 7601 01f6 488B4424 		movq	8(%rsp), %rax
 7601      08
2536:fltk-1.3.4-1/png/pngrutil.c ****          text.lang = NULL;
 7602              		.loc 1 2536 0
 7603 01fb 48C74424 		movq	$0, 48(%rsp)
 7603      30000000 
 7603      00
2537:fltk-1.3.4-1/png/pngrutil.c ****          text.lang_key = NULL;
 7604              		.loc 1 2537 0
 7605 0204 48C74424 		movq	$0, 56(%rsp)
 7605      38000000 
 7605      00
2538:fltk-1.3.4-1/png/pngrutil.c **** 
 7606              		.loc 1 2538 0
 7607 020d 48C74424 		movq	$0, 64(%rsp)
 7607      40000000 
 7607      00
2535:fltk-1.3.4-1/png/pngrutil.c ****          text.itxt_length = 0;
 7608              		.loc 1 2535 0
 7609 0216 48894424 		movq	%rax, 40(%rsp)
 7609      28
2540:fltk-1.3.4-1/png/pngrutil.c ****             errmsg = "insufficient memory";
 7610              		.loc 1 2540 0
 7611 021b E8000000 		call	png_set_text_2
 7611      00
 7612              	.LVL988:
 7613 0220 85C0     		testl	%eax, %eax
2541:fltk-1.3.4-1/png/pngrutil.c ****       }
 7614              		.loc 1 2541 0
 7615 0222 BE000000 		movl	$.LC79, %esi
 7615      00
2540:fltk-1.3.4-1/png/pngrutil.c ****             errmsg = "insufficient memory";
 7616              		.loc 1 2540 0
 7617 0227 0F85F8FE 		jne	.L803
 7617      FFFF
 7618 022d E9B6FEFF 		jmp	.L786
 7618      FF
 7619              	.LVL989:
 7620              	.L826:
 7621              	.LBE205:
 7622              	.LBE206:
2474:fltk-1.3.4-1/png/pngrutil.c **** 
 7623              		.loc 1 2474 0
 7624 0232 BE000000 		movl	$.LC33, %esi
 7624      00
 7625              	.LVL990:
 7626 0237 4C89F7   		movq	%r14, %rdi
 7627              	.LVL991:
 7628 023a E8000000 		call	png_chunk_error
 7628      00
 7629              	.LVL992:
 7630              	.L830:
2550:fltk-1.3.4-1/png/pngrutil.c **** #endif
 7631              		.loc 1 2550 0
 7632 023f E8000000 		call	__stack_chk_fail
 7632      00
 7633              	.LVL993:
 7634              		.cfi_endproc
 7635              	.LFE89:
 7637              		.section	.text.unlikely.png_handle_zTXt
 7638              	.LCOLDE81:
 7639              		.section	.text.png_handle_zTXt
 7640              	.LHOTE81:
 7641              		.section	.rodata.str1.1
 7642              	.LC82:
 7643 026e 62616420 		.string	"bad compression info"
 7643      636F6D70 
 7643      72657373 
 7643      696F6E20 
 7643      696E666F 
 7644              		.section	.text.unlikely.png_handle_iTXt,"ax",@progbits
 7645              	.LCOLDB83:
 7646              		.section	.text.png_handle_iTXt,"ax",@progbits
 7647              	.LHOTB83:
 7648              		.p2align 4,,15
 7649              		.globl	png_handle_iTXt
 7651              	png_handle_iTXt:
 7652              	.LFB90:
2557:fltk-1.3.4-1/png/pngrutil.c ****    png_const_charp errmsg = NULL;
 7653              		.loc 1 2557 0
 7654              		.cfi_startproc
 7655              	.LVL994:
 7656 0000 4157     		pushq	%r15
 7657              		.cfi_def_cfa_offset 16
 7658              		.cfi_offset 15, -16
 7659 0002 4156     		pushq	%r14
 7660              		.cfi_def_cfa_offset 24
 7661              		.cfi_offset 14, -24
 7662 0004 4189D6   		movl	%edx, %r14d
 7663 0007 4155     		pushq	%r13
 7664              		.cfi_def_cfa_offset 32
 7665              		.cfi_offset 13, -32
 7666 0009 4154     		pushq	%r12
 7667              		.cfi_def_cfa_offset 40
 7668              		.cfi_offset 12, -40
 7669 000b 4989F5   		movq	%rsi, %r13
 7670 000e 55       		pushq	%rbp
 7671              		.cfi_def_cfa_offset 48
 7672              		.cfi_offset 6, -48
 7673 000f 53       		pushq	%rbx
 7674              		.cfi_def_cfa_offset 56
 7675              		.cfi_offset 3, -56
 7676 0010 4889FD   		movq	%rdi, %rbp
 7677 0013 4883EC68 		subq	$104, %rsp
 7678              		.cfi_def_cfa_offset 160
2557:fltk-1.3.4-1/png/pngrutil.c ****    png_const_charp errmsg = NULL;
 7679              		.loc 1 2557 0
 7680 0017 64488B04 		movq	%fs:40, %rax
 7680      25280000 
 7680      00
 7681 0020 48894424 		movq	%rax, 88(%rsp)
 7681      58
 7682 0025 31C0     		xorl	%eax, %eax
 7683              	.LVL995:
2565:fltk-1.3.4-1/png/pngrutil.c ****    {
 7684              		.loc 1 2565 0
 7685 0027 8B876404 		movl	1124(%rdi), %eax
 7685      0000
 7686 002d 85C0     		testl	%eax, %eax
 7687 002f 741B     		je	.L833
2567:fltk-1.3.4-1/png/pngrutil.c ****       {
 7688              		.loc 1 2567 0
 7689 0031 83F801   		cmpl	$1, %eax
 7690 0034 0F844002 		je	.L896
 7690      0000
2573:fltk-1.3.4-1/png/pngrutil.c ****       {
 7691              		.loc 1 2573 0
 7692 003a 83E801   		subl	$1, %eax
 7693 003d 83F801   		cmpl	$1, %eax
 7694 0040 89876404 		movl	%eax, 1124(%rdi)
 7694      0000
 7695 0046 0F843702 		je	.L897
 7695      0000
 7696              	.L833:
2582:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "missing IHDR");
 7697              		.loc 1 2582 0
 7698 004c 8B852C01 		movl	300(%rbp), %eax
 7698      0000
 7699 0052 A801     		testb	$1, %al
 7700 0054 0F84CC02 		je	.L898
 7700      0000
2585:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->mode |= PNG_AFTER_IDAT;
 7701              		.loc 1 2585 0
 7702 005a A804     		testb	$4, %al
 7703 005c 0F85DE01 		jne	.L899
 7703      0000
 7704              	.L837:
2588:fltk-1.3.4-1/png/pngrutil.c **** 
 7705              		.loc 1 2588 0
 7706 0062 418D7601 		leal	1(%r14), %esi
 7707              	.LVL996:
 7708 0066 BA010000 		movl	$1, %edx
 7708      00
 7709              	.LVL997:
 7710 006b 4889EF   		movq	%rbp, %rdi
 7711              	.LVL998:
 7712 006e E8000000 		call	png_read_buffer
 7712      00
 7713              	.LVL999:
2590:fltk-1.3.4-1/png/pngrutil.c ****    {
 7714              		.loc 1 2590 0
 7715 0073 4885C0   		testq	%rax, %rax
2588:fltk-1.3.4-1/png/pngrutil.c **** 
 7716              		.loc 1 2588 0
 7717 0076 4889C3   		movq	%rax, %rbx
 7718              	.LVL1000:
2590:fltk-1.3.4-1/png/pngrutil.c ****    {
 7719              		.loc 1 2590 0
 7720 0079 0F84E101 		je	.L900
 7720      0000
2597:fltk-1.3.4-1/png/pngrutil.c **** 
 7721              		.loc 1 2597 0
 7722 007f 4889C6   		movq	%rax, %rsi
 7723 0082 4489F2   		movl	%r14d, %edx
 7724 0085 4889EF   		movq	%rbp, %rdi
 7725 0088 E8000000 		call	png_crc_read
 7725      00
 7726              	.LVL1001:
2599:fltk-1.3.4-1/png/pngrutil.c ****       return;
 7727              		.loc 1 2599 0
 7728 008d 31F6     		xorl	%esi, %esi
 7729 008f 4889EF   		movq	%rbp, %rdi
 7730 0092 E8000000 		call	png_crc_finish
 7730      00
 7731              	.LVL1002:
 7732 0097 85C0     		testl	%eax, %eax
 7733 0099 0F857601 		jne	.L832
 7733      0000
 7734              	.LVL1003:
2603:fltk-1.3.4-1/png/pngrutil.c ****       prefix_length < length && buffer[prefix_length] != 0;
 7735              		.loc 1 2603 0 discriminator 1
 7736 009f 4585F6   		testl	%r14d, %r14d
 7737 00a2 0F846001 		je	.L862
 7737      0000
2604:fltk-1.3.4-1/png/pngrutil.c ****       ++prefix_length)
 7738              		.loc 1 2604 0
 7739 00a8 803B00   		cmpb	$0, (%rbx)
 7740 00ab 0F845701 		je	.L862
 7740      0000
 7741 00b1 418D4EFF 		leal	-1(%r14), %ecx
 7742 00b5 31C0     		xorl	%eax, %eax
 7743 00b7 EB11     		jmp	.L842
 7744              	.LVL1004:
 7745 00b9 0F1F8000 		.p2align 4,,10
 7745      000000
 7746              		.p2align 3
 7747              	.L901:
 7748 00c0 4883C001 		addq	$1, %rax
 7749              	.LVL1005:
 7750 00c4 803C0300 		cmpb	$0, (%rbx,%rax)
 7751 00c8 7407     		je	.L841
 7752              	.LVL1006:
 7753              	.L842:
2603:fltk-1.3.4-1/png/pngrutil.c ****       prefix_length < length && buffer[prefix_length] != 0;
 7754              		.loc 1 2603 0
 7755 00ca 4839C1   		cmpq	%rax, %rcx
 7756 00cd 89C2     		movl	%eax, %edx
 7757              	.LVL1007:
 7758 00cf 75EF     		jne	.L901
 7759              	.LVL1008:
 7760              	.L841:
2609:fltk-1.3.4-1/png/pngrutil.c ****       errmsg = "bad keyword";
 7761              		.loc 1 2609 0
 7762 00d1 83FA4E   		cmpl	$78, %edx
 7763 00d4 0F872E01 		ja	.L862
 7763      0000
2616:fltk-1.3.4-1/png/pngrutil.c ****       errmsg = "truncated";
 7764              		.loc 1 2616 0
 7765 00da 8D4206   		leal	6(%rdx), %eax
 7766 00dd 4139C6   		cmpl	%eax, %r14d
 7767 00e0 0F826A01 		jb	.L870
 7767      0000
2619:fltk-1.3.4-1/png/pngrutil.c ****       (buffer[prefix_length+1] == 1 &&
 7768              		.loc 1 2619 0
 7769 00e6 8D4202   		leal	2(%rdx), %eax
 7770 00e9 440FB604 		movzbl	(%rbx,%rax), %r8d
 7770      03
 7771 00ee 4584C0   		testb	%r8b, %r8b
 7772 00f1 741D     		je	.L843
2619:fltk-1.3.4-1/png/pngrutil.c ****       (buffer[prefix_length+1] == 1 &&
 7773              		.loc 1 2619 0 is_stmt 0 discriminator 1
 7774 00f3 4180F801 		cmpb	$1, %r8b
2696:fltk-1.3.4-1/png/pngrutil.c **** 
 7775              		.loc 1 2696 0 is_stmt 1 discriminator 1
 7776 00f7 BE000000 		movl	$.LC82, %esi
 7776      00
2619:fltk-1.3.4-1/png/pngrutil.c ****       (buffer[prefix_length+1] == 1 &&
 7777              		.loc 1 2619 0 discriminator 1
 7778 00fc 0F850B01 		jne	.L857
 7778      0000
2621:fltk-1.3.4-1/png/pngrutil.c ****    {
 7779              		.loc 1 2621 0
 7780 0102 8D4203   		leal	3(%rdx), %eax
2620:fltk-1.3.4-1/png/pngrutil.c ****       buffer[prefix_length+2] == PNG_COMPRESSION_TYPE_BASE))
 7781              		.loc 1 2620 0
 7782 0105 803C0300 		cmpb	$0, (%rbx,%rax)
 7783 0109 0F85FE00 		jne	.L857
 7783      0000
 7784 010f 90       		.p2align 4,,10
 7785              		.p2align 3
 7786              	.L843:
 7787              	.LVL1009:
 7788              	.LBB207:
2628:fltk-1.3.4-1/png/pngrutil.c ****       language_offset = prefix_length;
 7789              		.loc 1 2628 0
 7790 0110 448D6204 		leal	4(%rdx), %r12d
 7791              	.LVL1010:
2625:fltk-1.3.4-1/png/pngrutil.c **** 
 7792              		.loc 1 2625 0
 7793 0114 48C74424 		movq	$0, 24(%rsp)
 7793      18000000 
 7793      00
2631:fltk-1.3.4-1/png/pngrutil.c ****          ++prefix_length)
 7794              		.loc 1 2631 0
 7795 011d 4539E6   		cmpl	%r12d, %r14d
 7796 0120 0F86E201 		jbe	.L866
 7796      0000
 7797 0126 4489E0   		movl	%r12d, %eax
 7798 0129 803C0300 		cmpb	$0, (%rbx,%rax)
 7799 012d 4489E0   		movl	%r12d, %eax
 7800 0130 750E     		jne	.L845
 7801 0132 EB14     		jmp	.L844
 7802              	.LVL1011:
 7803              		.p2align 4,,10
 7804 0134 0F1F4000 		.p2align 3
 7805              	.L902:
2631:fltk-1.3.4-1/png/pngrutil.c ****          ++prefix_length)
 7806              		.loc 1 2631 0 is_stmt 0 discriminator 1
 7807 0138 89C2     		movl	%eax, %edx
 7808 013a 803C1300 		cmpb	$0, (%rbx,%rdx)
 7809 013e 7408     		je	.L844
 7810              	.L845:
2632:fltk-1.3.4-1/png/pngrutil.c ****          /* Empty loop */ ;
 7811              		.loc 1 2632 0 is_stmt 1
 7812 0140 83C001   		addl	$1, %eax
 7813              	.LVL1012:
2631:fltk-1.3.4-1/png/pngrutil.c ****          ++prefix_length)
 7814              		.loc 1 2631 0
 7815 0143 4139C6   		cmpl	%eax, %r14d
 7816 0146 77F0     		ja	.L902
 7817              	.L844:
2636:fltk-1.3.4-1/png/pngrutil.c **** 
 7818              		.loc 1 2636 0
 7819 0148 448D4801 		leal	1(%rax), %r9d
 7820              	.LVL1013:
2638:fltk-1.3.4-1/png/pngrutil.c ****          ++prefix_length)
 7821              		.loc 1 2638 0
 7822 014c 4539CE   		cmpl	%r9d, %r14d
 7823 014f 0F86AB01 		jbe	.L868
 7823      0000
 7824 0155 4489C8   		movl	%r9d, %eax
 7825 0158 803C0300 		cmpb	$0, (%rbx,%rax)
 7826 015c 4489C8   		movl	%r9d, %eax
 7827 015f 750F     		jne	.L847
 7828 0161 EB15     		jmp	.L846
 7829              	.LVL1014:
 7830              		.p2align 4,,10
 7831 0163 0F1F4400 		.p2align 3
 7831      00
 7832              	.L903:
2638:fltk-1.3.4-1/png/pngrutil.c ****          ++prefix_length)
 7833              		.loc 1 2638 0 is_stmt 0 discriminator 1
 7834 0168 89C2     		movl	%eax, %edx
 7835 016a 803C1300 		cmpb	$0, (%rbx,%rdx)
 7836 016e 7408     		je	.L846
 7837              	.L847:
2639:fltk-1.3.4-1/png/pngrutil.c ****          /* Empty loop */ ;
 7838              		.loc 1 2639 0 is_stmt 1
 7839 0170 83C001   		addl	$1, %eax
 7840              	.LVL1015:
2638:fltk-1.3.4-1/png/pngrutil.c ****          ++prefix_length)
 7841              		.loc 1 2638 0
 7842 0173 4139C6   		cmpl	%eax, %r14d
 7843 0176 77F0     		ja	.L903
 7844              	.L846:
2649:fltk-1.3.4-1/png/pngrutil.c ****          uncompressed_length = length - prefix_length;
 7845              		.loc 1 2649 0
 7846 0178 4584C0   		testb	%r8b, %r8b
2647:fltk-1.3.4-1/png/pngrutil.c **** 
 7847              		.loc 1 2647 0
 7848 017b 448D7801 		leal	1(%rax), %r15d
 7849              	.LVL1016:
2649:fltk-1.3.4-1/png/pngrutil.c ****          uncompressed_length = length - prefix_length;
 7850              		.loc 1 2649 0
 7851 017f 0F851701 		jne	.L848
 7851      0000
 7852 0185 4539FE   		cmpl	%r15d, %r14d
 7853 0188 0F820E01 		jb	.L848
 7853      0000
2650:fltk-1.3.4-1/png/pngrutil.c **** 
 7854              		.loc 1 2650 0
 7855 018e 4529FE   		subl	%r15d, %r14d
 7856              	.LVL1017:
 7857 0191 4C897424 		movq	%r14, 24(%rsp)
 7857      18
 7858              	.LVL1018:
 7859              	.L856:
 7860              	.LBB208:
2678:fltk-1.3.4-1/png/pngrutil.c **** 
 7861              		.loc 1 2678 0
 7862 0196 4180F801 		cmpb	$1, %r8b
2675:fltk-1.3.4-1/png/pngrutil.c **** 
 7863              		.loc 1 2675 0
 7864 019a 4489F8   		movl	%r15d, %eax
2690:fltk-1.3.4-1/png/pngrutil.c ****             errmsg = "insufficient memory";
 7865              		.loc 1 2690 0
 7866 019d B9010000 		movl	$1, %ecx
 7866      00
2675:fltk-1.3.4-1/png/pngrutil.c **** 
 7867              		.loc 1 2675 0
 7868 01a2 488D1403 		leaq	(%rbx,%rax), %rdx
2678:fltk-1.3.4-1/png/pngrutil.c **** 
 7869              		.loc 1 2678 0
 7870 01a6 19C0     		sbbl	%eax, %eax
2690:fltk-1.3.4-1/png/pngrutil.c ****             errmsg = "insufficient memory";
 7871              		.loc 1 2690 0
 7872 01a8 4C89EE   		movq	%r13, %rsi
2678:fltk-1.3.4-1/png/pngrutil.c **** 
 7873              		.loc 1 2678 0
 7874 01ab 83C002   		addl	$2, %eax
2690:fltk-1.3.4-1/png/pngrutil.c ****             errmsg = "insufficient memory";
 7875              		.loc 1 2690 0
 7876 01ae 4889EF   		movq	%rbp, %rdi
2675:fltk-1.3.4-1/png/pngrutil.c **** 
 7877              		.loc 1 2675 0
 7878 01b1 42C60432 		movb	$0, (%rdx,%r14)
 7878      00
2678:fltk-1.3.4-1/png/pngrutil.c **** 
 7879              		.loc 1 2678 0
 7880 01b6 89442420 		movl	%eax, 32(%rsp)
2684:fltk-1.3.4-1/png/pngrutil.c ****          text.lang_key = (png_charp)buffer + translated_keyword_offset;
 7881              		.loc 1 2684 0
 7882 01ba 4489E0   		movl	%r12d, %eax
 7883 01bd 4801D8   		addq	%rbx, %rax
2683:fltk-1.3.4-1/png/pngrutil.c ****          text.lang = (png_charp)buffer + language_offset;
 7884              		.loc 1 2683 0
 7885 01c0 48895C24 		movq	%rbx, 40(%rsp)
 7885      28
2686:fltk-1.3.4-1/png/pngrutil.c ****          text.text_length = 0;
 7886              		.loc 1 2686 0
 7887 01c5 48895424 		movq	%rdx, 48(%rsp)
 7887      30
2684:fltk-1.3.4-1/png/pngrutil.c ****          text.lang_key = (png_charp)buffer + translated_keyword_offset;
 7888              		.loc 1 2684 0
 7889 01ca 48894424 		movq	%rax, 72(%rsp)
 7889      48
2685:fltk-1.3.4-1/png/pngrutil.c ****          text.text = (png_charp)buffer + prefix_length;
 7890              		.loc 1 2685 0
 7891 01cf 4489C8   		movl	%r9d, %eax
2690:fltk-1.3.4-1/png/pngrutil.c ****             errmsg = "insufficient memory";
 7892              		.loc 1 2690 0
 7893 01d2 488D5424 		leaq	32(%rsp), %rdx
 7893      20
2685:fltk-1.3.4-1/png/pngrutil.c ****          text.text = (png_charp)buffer + prefix_length;
 7894              		.loc 1 2685 0
 7895 01d7 4801C3   		addq	%rax, %rbx
 7896              	.LVL1019:
2688:fltk-1.3.4-1/png/pngrutil.c **** 
 7897              		.loc 1 2688 0
 7898 01da 488B4424 		movq	24(%rsp), %rax
 7898      18
2687:fltk-1.3.4-1/png/pngrutil.c ****          text.itxt_length = uncompressed_length;
 7899              		.loc 1 2687 0
 7900 01df 48C74424 		movq	$0, 56(%rsp)
 7900      38000000 
 7900      00
2685:fltk-1.3.4-1/png/pngrutil.c ****          text.text = (png_charp)buffer + prefix_length;
 7901              		.loc 1 2685 0
 7902 01e8 48895C24 		movq	%rbx, 80(%rsp)
 7902      50
2688:fltk-1.3.4-1/png/pngrutil.c **** 
 7903              		.loc 1 2688 0
 7904 01ed 48894424 		movq	%rax, 64(%rsp)
 7904      40
2690:fltk-1.3.4-1/png/pngrutil.c ****             errmsg = "insufficient memory";
 7905              		.loc 1 2690 0
 7906 01f2 E8000000 		call	png_set_text_2
 7906      00
 7907              	.LVL1020:
 7908 01f7 85C0     		testl	%eax, %eax
 7909 01f9 741A     		je	.L832
 7910              	.LVL1021:
2691:fltk-1.3.4-1/png/pngrutil.c ****       }
 7911              		.loc 1 2691 0
 7912 01fb BE000000 		movl	$.LC79, %esi
 7912      00
 7913 0200 EB0B     		jmp	.L857
 7914              	.LVL1022:
 7915              		.p2align 4,,10
 7916 0202 660F1F44 		.p2align 3
 7916      0000
 7917              	.L862:
 7918              	.LBE208:
 7919              	.LBE207:
2610:fltk-1.3.4-1/png/pngrutil.c **** 
 7920              		.loc 1 2610 0
 7921 0208 BE000000 		movl	$.LC49, %esi
 7921      00
 7922              	.LVL1023:
 7923              	.L857:
2699:fltk-1.3.4-1/png/pngrutil.c **** }
 7924              		.loc 1 2699 0
 7925 020d 4889EF   		movq	%rbp, %rdi
 7926 0210 E8000000 		call	png_chunk_benign_error
 7926      00
 7927              	.LVL1024:
 7928              	.L832:
2700:fltk-1.3.4-1/png/pngrutil.c **** #endif
 7929              		.loc 1 2700 0
 7930 0215 488B4424 		movq	88(%rsp), %rax
 7930      58
 7931 021a 64483304 		xorq	%fs:40, %rax
 7931      25280000 
 7931      00
 7932 0223 0F85F800 		jne	.L904
 7932      0000
 7933 0229 4883C468 		addq	$104, %rsp
 7934              		.cfi_remember_state
 7935              		.cfi_def_cfa_offset 56
 7936 022d 5B       		popq	%rbx
 7937              		.cfi_def_cfa_offset 48
 7938 022e 5D       		popq	%rbp
 7939              		.cfi_def_cfa_offset 40
 7940              	.LVL1025:
 7941 022f 415C     		popq	%r12
 7942              		.cfi_def_cfa_offset 32
 7943 0231 415D     		popq	%r13
 7944              		.cfi_def_cfa_offset 24
 7945              	.LVL1026:
 7946 0233 415E     		popq	%r14
 7947              		.cfi_def_cfa_offset 16
 7948 0235 415F     		popq	%r15
 7949              		.cfi_def_cfa_offset 8
 7950 0237 C3       		ret
 7951              	.LVL1027:
 7952 0238 0F1F8400 		.p2align 4,,10
 7952      00000000 
 7953              		.p2align 3
 7954              	.L899:
 7955              		.cfi_restore_state
2586:fltk-1.3.4-1/png/pngrutil.c **** 
 7956              		.loc 1 2586 0
 7957 0240 83C808   		orl	$8, %eax
 7958 0243 89852C01 		movl	%eax, 300(%rbp)
 7958      0000
 7959 0249 E914FEFF 		jmp	.L837
 7959      FF
 7960              	.LVL1028:
 7961 024e 6690     		.p2align 4,,10
 7962              		.p2align 3
 7963              	.L870:
 7964              	.LBB209:
2669:fltk-1.3.4-1/png/pngrutil.c **** 
 7965              		.loc 1 2669 0
 7966 0250 BE000000 		movl	$.LC47, %esi
 7966      00
 7967              	.LVL1029:
 7968 0255 EBB6     		jmp	.L857
 7969              	.LVL1030:
 7970 0257 660F1F84 		.p2align 4,,10
 7970      00000000 
 7970      00
 7971              		.p2align 3
 7972              	.L900:
 7973              	.LBE209:
2592:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_benign_error(png_ptr, "out of memory");
 7974              		.loc 1 2592 0
 7975 0260 4489F6   		movl	%r14d, %esi
 7976 0263 4889EF   		movq	%rbp, %rdi
 7977 0266 E8000000 		call	png_crc_finish
 7977      00
 7978              	.LVL1031:
2593:fltk-1.3.4-1/png/pngrutil.c ****       return;
 7979              		.loc 1 2593 0
 7980 026b BE000000 		movl	$.LC48, %esi
 7980      00
 7981 0270 4889EF   		movq	%rbp, %rdi
 7982 0273 E8000000 		call	png_chunk_benign_error
 7982      00
 7983              	.LVL1032:
2594:fltk-1.3.4-1/png/pngrutil.c ****    }
 7984              		.loc 1 2594 0
 7985 0278 EB9B     		jmp	.L832
 7986              	.LVL1033:
 7987              	.L896:
2569:fltk-1.3.4-1/png/pngrutil.c ****          return;
 7988              		.loc 1 2569 0
 7989 027a 89D6     		movl	%edx, %esi
 7990              	.LVL1034:
 7991 027c E8000000 		call	png_crc_finish
 7991      00
 7992              	.LVL1035:
2570:fltk-1.3.4-1/png/pngrutil.c ****       }
 7993              		.loc 1 2570 0
 7994 0281 EB92     		jmp	.L832
 7995              	.LVL1036:
 7996              	.L897:
2575:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_benign_error(png_ptr, "no space in chunk cache");
 7997              		.loc 1 2575 0
 7998 0283 89D6     		movl	%edx, %esi
 7999              	.LVL1037:
 8000 0285 E8000000 		call	png_crc_finish
 8000      00
 8001              	.LVL1038:
2576:fltk-1.3.4-1/png/pngrutil.c ****          return;
 8002              		.loc 1 2576 0
 8003 028a BE000000 		movl	$.LC76, %esi
 8003      00
 8004 028f 4889EF   		movq	%rbp, %rdi
 8005 0292 E8000000 		call	png_chunk_benign_error
 8005      00
 8006              	.LVL1039:
2577:fltk-1.3.4-1/png/pngrutil.c ****       }
 8007              		.loc 1 2577 0
 8008 0297 E979FFFF 		jmp	.L832
 8008      FF
 8009              	.LVL1040:
 8010              	.L848:
 8011              	.LBB210:
2652:fltk-1.3.4-1/png/pngrutil.c ****       {
 8012              		.loc 1 2652 0
 8013 029c 4584C0   		testb	%r8b, %r8b
 8014 029f 44894C24 		movl	%r9d, 12(%rsp)
 8014      0C
 8015 02a4 44884424 		movb	%r8b, 11(%rsp)
 8015      0B
 8016 02a9 74A5     		je	.L870
 8017 02ab 4539FE   		cmpl	%r15d, %r14d
 8018 02ae 76A0     		jbe	.L870
2660:fltk-1.3.4-1/png/pngrutil.c ****             &uncompressed_length, 1/*terminate*/) == Z_STREAM_END)
 8019              		.loc 1 2660 0
 8020 02b0 488D4C24 		leaq	24(%rsp), %rcx
 8020      18
 8021 02b5 4489FA   		movl	%r15d, %edx
 8022 02b8 4489F6   		movl	%r14d, %esi
 8023 02bb 4889EF   		movq	%rbp, %rdi
2654:fltk-1.3.4-1/png/pngrutil.c **** 
 8024              		.loc 1 2654 0
 8025 02be 48C74424 		movq	$-1, 24(%rsp)
 8025      18FFFFFF 
 8025      FF
2660:fltk-1.3.4-1/png/pngrutil.c ****             &uncompressed_length, 1/*terminate*/) == Z_STREAM_END)
 8026              		.loc 1 2660 0
 8027 02c7 E8000000 		call	png_decompress_chunk.constprop.5
 8027      00
 8028              	.LVL1041:
 8029 02cc 83F801   		cmpl	$1, %eax
 8030 02cf 440FB644 		movzbl	11(%rsp), %r8d
 8030      240B
 8031 02d5 448B4C24 		movl	12(%rsp), %r9d
 8031      0C
 8032 02da 7434     		je	.L905
2665:fltk-1.3.4-1/png/pngrutil.c ****       }
 8033              		.loc 1 2665 0
 8034 02dc 488BB570 		movq	368(%rbp), %rsi
 8034      010000
 8035              	.LVL1042:
2671:fltk-1.3.4-1/png/pngrutil.c ****       {
 8036              		.loc 1 2671 0
 8037 02e3 4885F6   		testq	%rsi, %rsi
 8038 02e6 0F8521FF 		jne	.L857
 8038      FFFF
 8039 02ec 4C8B7424 		movq	24(%rsp), %r14
 8039      18
 8040              	.LVL1043:
 8041 02f1 E9A0FEFF 		jmp	.L856
 8041      FF
 8042              	.LVL1044:
 8043 02f6 662E0F1F 		.p2align 4,,10
 8043      84000000 
 8043      0000
 8044              		.p2align 3
 8045              	.L868:
2638:fltk-1.3.4-1/png/pngrutil.c ****          ++prefix_length)
 8046              		.loc 1 2638 0
 8047 0300 4489C8   		movl	%r9d, %eax
 8048 0303 E970FEFF 		jmp	.L846
 8048      FF
 8049              	.LVL1045:
 8050              	.L866:
2631:fltk-1.3.4-1/png/pngrutil.c ****          ++prefix_length)
 8051              		.loc 1 2631 0
 8052 0308 4489E0   		movl	%r12d, %eax
 8053 030b E938FEFF 		jmp	.L844
 8053      FF
 8054              	.LVL1046:
 8055              	.L905:
2662:fltk-1.3.4-1/png/pngrutil.c **** 
 8056              		.loc 1 2662 0
 8057 0310 488B9D98 		movq	1176(%rbp), %rbx
 8057      040000
 8058              	.LVL1047:
 8059 0317 4C8B7424 		movq	24(%rsp), %r14
 8059      18
 8060              	.LVL1048:
 8061 031c E975FEFF 		jmp	.L856
 8061      FF
 8062              	.LVL1049:
 8063              	.L904:
 8064              	.LBE210:
2700:fltk-1.3.4-1/png/pngrutil.c **** #endif
 8065              		.loc 1 2700 0
 8066 0321 E8000000 		call	__stack_chk_fail
 8066      00
 8067              	.LVL1050:
 8068              	.L898:
2583:fltk-1.3.4-1/png/pngrutil.c **** 
 8069              		.loc 1 2583 0
 8070 0326 BE000000 		movl	$.LC33, %esi
 8070      00
 8071              	.LVL1051:
 8072 032b 4889EF   		movq	%rbp, %rdi
 8073              	.LVL1052:
 8074 032e E8000000 		call	png_chunk_error
 8074      00
 8075              	.LVL1053:
 8076              		.cfi_endproc
 8077              	.LFE90:
 8079              		.section	.text.unlikely.png_handle_iTXt
 8080              	.LCOLDE83:
 8081              		.section	.text.png_handle_iTXt
 8082              	.LHOTE83:
 8083              		.section	.rodata.str1.1
 8084              	.LC84:
 8085 0283 6572726F 		.string	"error in user chunk"
 8085      7220696E 
 8085      20757365 
 8085      72206368 
 8085      756E6B00 
 8086              	.LC85:
 8087 0297 53617669 		.string	"Saving unknown chunk:"
 8087      6E672075 
 8087      6E6B6E6F 
 8087      776E2063 
 8087      68756E6B 
 8088              		.section	.rodata.str1.8
 8089 011a 00000000 		.align 8
 8089      0000
 8090              	.LC86:
 8091 0120 666F7263 		.string	"forcing save of an unhandled chunk; please call png_set_keep_unknown_chunks"
 8091      696E6720 
 8091      73617665 
 8091      206F6620 
 8091      616E2075 
 8092              		.section	.rodata.str1.1
 8093              	.LC87:
 8094 02ad 756E6861 		.string	"unhandled critical chunk"
 8094      6E646C65 
 8094      64206372 
 8094      69746963 
 8094      616C2063 
 8095              		.section	.text.unlikely.png_handle_unknown,"ax",@progbits
 8096              	.LCOLDB88:
 8097              		.section	.text.png_handle_unknown,"ax",@progbits
 8098              	.LHOTB88:
 8099              		.p2align 4,,15
 8100              		.globl	png_handle_unknown
 8102              	png_handle_unknown:
 8103              	.LFB92:
2767:fltk-1.3.4-1/png/pngrutil.c ****    int handled = 0; /* the chunk was handled */
 8104              		.loc 1 2767 0
 8105              		.cfi_startproc
 8106              	.LVL1054:
 8107 0000 4155     		pushq	%r13
 8108              		.cfi_def_cfa_offset 16
 8109              		.cfi_offset 13, -16
 8110 0002 4154     		pushq	%r12
 8111              		.cfi_def_cfa_offset 24
 8112              		.cfi_offset 12, -24
 8113 0004 4989F5   		movq	%rsi, %r13
 8114 0007 55       		pushq	%rbp
 8115              		.cfi_def_cfa_offset 32
 8116              		.cfi_offset 6, -32
 8117 0008 53       		pushq	%rbx
 8118              		.cfi_def_cfa_offset 40
 8119              		.cfi_offset 3, -40
 8120 0009 89CD     		movl	%ecx, %ebp
 8121 000b 4889FB   		movq	%rdi, %rbx
 8122 000e 4883EC08 		subq	$8, %rsp
 8123              		.cfi_def_cfa_offset 48
2798:fltk-1.3.4-1/png/pngrutil.c ****       {
 8124              		.loc 1 2798 0
 8125 0012 4883BFF8 		cmpq	$0, 1016(%rdi)
 8125      03000000 
 8126 001a 0F84B000 		je	.L907
 8126      0000
2800:fltk-1.3.4-1/png/pngrutil.c ****          {
 8127              		.loc 1 2800 0
 8128 0020 89D6     		movl	%edx, %esi
 8129              	.LVL1055:
2768:fltk-1.3.4-1/png/pngrutil.c **** 
 8130              		.loc 1 2768 0
 8131 0022 4531E4   		xorl	%r12d, %r12d
2800:fltk-1.3.4-1/png/pngrutil.c ****          {
 8132              		.loc 1 2800 0
 8133 0025 E8000000 		call	png_cache_unknown_chunk
 8133      00
 8134              	.LVL1056:
 8135 002a 85C0     		testl	%eax, %eax
 8136 002c 7542     		jne	.L952
 8137              	.LVL1057:
2948:fltk-1.3.4-1/png/pngrutil.c ****       png_free(png_ptr, png_ptr->unknown_chunk.data);
 8138              		.loc 1 2948 0
 8139 002e 488BB378 		movq	1144(%rbx), %rsi
 8139      040000
 8140 0035 4885F6   		testq	%rsi, %rsi
 8141 0038 7408     		je	.L927
 8142              	.LVL1058:
 8143              	.L923:
2949:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->unknown_chunk.data = NULL;
 8144              		.loc 1 2949 0
 8145 003a 4889DF   		movq	%rbx, %rdi
 8146 003d E8000000 		call	png_free
 8146      00
 8147              	.LVL1059:
 8148              	.L927:
2960:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "unhandled critical chunk");
 8149              		.loc 1 2960 0
 8150 0042 4585E4   		testl	%r12d, %r12d
2950:fltk-1.3.4-1/png/pngrutil.c **** 
 8151              		.loc 1 2950 0
 8152 0045 48C78378 		movq	$0, 1144(%rbx)
 8152      04000000 
 8152      000000
2960:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "unhandled critical chunk");
 8153              		.loc 1 2960 0
 8154 0050 750D     		jne	.L906
 8155              	.L928:
2960:fltk-1.3.4-1/png/pngrutil.c ****       png_chunk_error(png_ptr, "unhandled critical chunk");
 8156              		.loc 1 2960 0 is_stmt 0 discriminator 1
 8157 0052 F6831B02 		testb	$32, 539(%rbx)
 8157      000020
 8158 0059 0F848D01 		je	.L953
 8158      0000
 8159              	.L906:
2962:fltk-1.3.4-1/png/pngrutil.c **** 
 8160              		.loc 1 2962 0 is_stmt 1
 8161 005f 4883C408 		addq	$8, %rsp
 8162              		.cfi_remember_state
 8163              		.cfi_def_cfa_offset 40
 8164 0063 5B       		popq	%rbx
 8165              		.cfi_def_cfa_offset 32
 8166              	.LVL1060:
 8167 0064 5D       		popq	%rbp
 8168              		.cfi_def_cfa_offset 24
 8169 0065 415C     		popq	%r12
 8170              		.cfi_def_cfa_offset 16
 8171 0067 415D     		popq	%r13
 8172              		.cfi_def_cfa_offset 8
 8173              	.LVL1061:
 8174 0069 C3       		ret
 8175              	.LVL1062:
 8176 006a 660F1F44 		.p2align 4,,10
 8176      0000
 8177              		.p2align 3
 8178              	.L952:
 8179              		.cfi_restore_state
 8180              	.LBB211:
2803:fltk-1.3.4-1/png/pngrutil.c ****                &png_ptr->unknown_chunk);
 8181              		.loc 1 2803 0
 8182 0070 488DB370 		leaq	1136(%rbx), %rsi
 8182      040000
 8183 0077 4889DF   		movq	%rbx, %rdi
 8184 007a FF93F803 		call	*1016(%rbx)
 8184      0000
 8185              	.LVL1063:
2815:fltk-1.3.4-1/png/pngrutil.c ****                png_chunk_error(png_ptr, "error in user chunk");
 8186              		.loc 1 2815 0
 8187 0080 85C0     		testl	%eax, %eax
 8188 0082 0F887101 		js	.L954
 8188      0000
2818:fltk-1.3.4-1/png/pngrutil.c ****             {
 8189              		.loc 1 2818 0
 8190 0088 0F85BA00 		jne	.L932
 8190      0000
2831:fltk-1.3.4-1/png/pngrutil.c ****                {
 8191              		.loc 1 2831 0
 8192 008e 83FD01   		cmpl	$1, %ebp
 8193 0091 0F8E2901 		jle	.L955
 8193      0000
 8194              	.LBE211:
2907:fltk-1.3.4-1/png/pngrutil.c ****          (keep == PNG_HANDLE_CHUNK_IF_SAFE &&
 8195              		.loc 1 2907 0
 8196 0097 83FD03   		cmpl	$3, %ebp
 8197 009a 7550     		jne	.L916
 8198              	.LVL1064:
 8199              	.L926:
2912:fltk-1.3.4-1/png/pngrutil.c ****          {
 8200              		.loc 1 2912 0
 8201 009c 8B836404 		movl	1124(%rbx), %eax
 8201      0000
 8202 00a2 83F801   		cmpl	$1, %eax
 8203 00a5 7453     		je	.L922
 8204 00a7 0F82C400 		jb	.L919
 8204      0000
 8205 00ad 83F802   		cmpl	$2, %eax
 8206 00b0 0F85B200 		jne	.L956
 8206      0000
2915:fltk-1.3.4-1/png/pngrutil.c ****                png_chunk_benign_error(png_ptr, "no space in chunk cache");
 8207              		.loc 1 2915 0
 8208 00b6 C7836404 		movl	$1, 1124(%rbx)
 8208      00000100 
 8208      0000
2916:fltk-1.3.4-1/png/pngrutil.c ****                /* FALL THROUGH */
 8209              		.loc 1 2916 0
 8210 00c0 BE000000 		movl	$.LC76, %esi
 8210      00
 8211 00c5 4889DF   		movq	%rbx, %rdi
 8212 00c8 E8000000 		call	png_chunk_benign_error
 8212      00
 8213              	.LVL1065:
 8214 00cd EB2B     		jmp	.L922
 8215              	.LVL1066:
 8216 00cf 90       		.p2align 4,,10
 8217              		.p2align 3
 8218              	.L907:
2870:fltk-1.3.4-1/png/pngrutil.c ****             keep = png_ptr->unknown_default;
 8219              		.loc 1 2870 0
 8220 00d0 85C9     		testl	%ecx, %ecx
 8221 00d2 744C     		je	.L957
 8222              	.LVL1067:
 8223              	.L912:
2873:fltk-1.3.4-1/png/pngrutil.c ****             (keep == PNG_HANDLE_CHUNK_IF_SAFE &&
 8224              		.loc 1 2873 0
 8225 00d4 83FD03   		cmpl	$3, %ebp
2877:fltk-1.3.4-1/png/pngrutil.c ****                keep = PNG_HANDLE_CHUNK_NEVER;
 8226              		.loc 1 2877 0
 8227 00d7 89D6     		movl	%edx, %esi
 8228              	.LVL1068:
 8229 00d9 4889DF   		movq	%rbx, %rdi
2873:fltk-1.3.4-1/png/pngrutil.c ****             (keep == PNG_HANDLE_CHUNK_IF_SAFE &&
 8230              		.loc 1 2873 0
 8231 00dc 0F84C600 		je	.L913
 8231      0000
2873:fltk-1.3.4-1/png/pngrutil.c ****             (keep == PNG_HANDLE_CHUNK_IF_SAFE &&
 8232              		.loc 1 2873 0 is_stmt 0 discriminator 1
 8233 00e2 83FD02   		cmpl	$2, %ebp
 8234 00e5 7449     		je	.L958
 8235              	.L914:
2882:fltk-1.3.4-1/png/pngrutil.c ****       }
 8236              		.loc 1 2882 0 is_stmt 1
 8237 00e7 E8000000 		call	png_crc_finish
 8237      00
 8238              	.LVL1069:
 8239              	.L916:
2907:fltk-1.3.4-1/png/pngrutil.c ****          (keep == PNG_HANDLE_CHUNK_IF_SAFE &&
 8240              		.loc 1 2907 0 discriminator 1
 8241 00ec 83FD02   		cmpl	$2, %ebp
 8242 00ef 7509     		jne	.L922
 8243              	.L911:
 8244              	.LVL1070:
2908:fltk-1.3.4-1/png/pngrutil.c ****           PNG_CHUNK_ANCILLARY(png_ptr->chunk_name)))
 8245              		.loc 1 2908 0
 8246 00f1 F6831B02 		testb	$32, 539(%rbx)
 8246      000020
 8247 00f8 75A2     		jne	.L926
 8248              	.LVL1071:
 8249              	.L922:
2948:fltk-1.3.4-1/png/pngrutil.c ****       png_free(png_ptr, png_ptr->unknown_chunk.data);
 8250              		.loc 1 2948 0
 8251 00fa 488BB378 		movq	1144(%rbx), %rsi
 8251      040000
 8252 0101 4531E4   		xorl	%r12d, %r12d
 8253 0104 4885F6   		testq	%rsi, %rsi
 8254 0107 0F852DFF 		jne	.L923
 8254      FFFF
2950:fltk-1.3.4-1/png/pngrutil.c **** 
 8255              		.loc 1 2950 0
 8256 010d 48C78378 		movq	$0, 1144(%rbx)
 8256      04000000 
 8256      000000
 8257 0118 E935FFFF 		jmp	.L928
 8257      FF
 8258              	.LVL1072:
 8259 011d 0F1F00   		.p2align 4,,10
 8260              		.p2align 3
 8261              	.L957:
2871:fltk-1.3.4-1/png/pngrutil.c **** 
 8262              		.loc 1 2871 0
 8263 0120 8BAF0004 		movl	1024(%rdi), %ebp
 8263      0000
 8264              	.LVL1073:
 8265 0126 EBAC     		jmp	.L912
 8266              	.LVL1074:
 8267 0128 0F1F8400 		.p2align 4,,10
 8267      00000000 
 8268              		.p2align 3
 8269              	.L958:
2874:fltk-1.3.4-1/png/pngrutil.c ****              PNG_CHUNK_ANCILLARY(png_ptr->chunk_name)))
 8270              		.loc 1 2874 0
 8271 0130 F6831B02 		testb	$32, 539(%rbx)
 8271      000020
 8272 0137 74AE     		je	.L914
2877:fltk-1.3.4-1/png/pngrutil.c ****                keep = PNG_HANDLE_CHUNK_NEVER;
 8273              		.loc 1 2877 0
 8274 0139 E8000000 		call	png_cache_unknown_chunk
 8274      00
 8275              	.LVL1075:
 8276 013e 85C0     		testl	%eax, %eax
 8277 0140 74B8     		je	.L922
 8278 0142 EBAD     		jmp	.L911
 8279              	.LVL1076:
 8280              		.p2align 4,,10
 8281 0144 0F1F4000 		.p2align 3
 8282              	.L932:
2948:fltk-1.3.4-1/png/pngrutil.c ****       png_free(png_ptr, png_ptr->unknown_chunk.data);
 8283              		.loc 1 2948 0
 8284 0148 488BB378 		movq	1144(%rbx), %rsi
 8284      040000
 8285              	.LBB212:
2849:fltk-1.3.4-1/png/pngrutil.c ****                /* Critical chunks can be safely discarded at this point. */
 8286              		.loc 1 2849 0
 8287 014f 41BC0100 		movl	$1, %r12d
 8287      0000
 8288              	.LVL1077:
 8289              	.LBE212:
2948:fltk-1.3.4-1/png/pngrutil.c ****       png_free(png_ptr, png_ptr->unknown_chunk.data);
 8290              		.loc 1 2948 0
 8291 0155 4885F6   		testq	%rsi, %rsi
 8292 0158 0F85DCFE 		jne	.L923
 8292      FFFF
 8293 015e E9DFFEFF 		jmp	.L927
 8293      FF
 8294              	.LVL1078:
 8295              		.p2align 4,,10
 8296 0163 0F1F4400 		.p2align 3
 8296      00
 8297              	.L956:
2925:fltk-1.3.4-1/png/pngrutil.c ****                /* FALL THROUGH */
 8298              		.loc 1 2925 0
 8299 0168 83E801   		subl	$1, %eax
 8300 016b 89836404 		movl	%eax, 1124(%rbx)
 8300      0000
 8301              	.L919:
2933:fltk-1.3.4-1/png/pngrutil.c ****                handled = 1;
 8302              		.loc 1 2933 0
 8303 0171 488D9370 		leaq	1136(%rbx), %rdx
 8303      040000
2932:fltk-1.3.4-1/png/pngrutil.c ****                   &png_ptr->unknown_chunk, 1);
 8304              		.loc 1 2932 0
 8305 0178 4C89EE   		movq	%r13, %rsi
 8306 017b B9010000 		movl	$1, %ecx
 8306      00
 8307 0180 4889DF   		movq	%rbx, %rdi
2934:fltk-1.3.4-1/png/pngrutil.c **** #     ifdef PNG_USER_LIMITS_SUPPORTED
 8308              		.loc 1 2934 0
 8309 0183 41BC0100 		movl	$1, %r12d
 8309      0000
2932:fltk-1.3.4-1/png/pngrutil.c ****                   &png_ptr->unknown_chunk, 1);
 8310              		.loc 1 2932 0
 8311 0189 E8000000 		call	png_set_unknown_chunks
 8311      00
 8312              	.LVL1079:
2948:fltk-1.3.4-1/png/pngrutil.c ****       png_free(png_ptr, png_ptr->unknown_chunk.data);
 8313              		.loc 1 2948 0
 8314 018e 488BB378 		movq	1144(%rbx), %rsi
 8314      040000
 8315 0195 4885F6   		testq	%rsi, %rsi
 8316 0198 0F859CFE 		jne	.L923
 8316      FFFF
 8317 019e E9BCFEFF 		jmp	.L906
 8317      FF
 8318              	.LVL1080:
 8319              		.p2align 4,,10
 8320 01a3 0F1F4400 		.p2align 3
 8320      00
 8321              	.L913:
2877:fltk-1.3.4-1/png/pngrutil.c ****                keep = PNG_HANDLE_CHUNK_NEVER;
 8322              		.loc 1 2877 0
 8323 01a8 E8000000 		call	png_cache_unknown_chunk
 8323      00
 8324              	.LVL1081:
 8325 01ad 85C0     		testl	%eax, %eax
 8326 01af 0F85E7FE 		jne	.L926
 8326      FFFF
 8327 01b5 E940FFFF 		jmp	.L922
 8327      FF
 8328              	.LVL1082:
 8329 01ba 660F1F44 		.p2align 4,,10
 8329      0000
 8330              		.p2align 3
 8331              	.L955:
 8332              	.LBB213:
2834:fltk-1.3.4-1/png/pngrutil.c ****                      {
 8333              		.loc 1 2834 0
 8334 01c0 83BB0004 		cmpl	$1, 1024(%rbx)
 8334      000001
 8335 01c7 0F8F24FF 		jg	.L911
 8335      FFFF
2836:fltk-1.3.4-1/png/pngrutil.c ****                         png_app_warning(png_ptr,
 8336              		.loc 1 2836 0
 8337 01cd 4889DF   		movq	%rbx, %rdi
 8338 01d0 BE000000 		movl	$.LC85, %esi
 8338      00
 8339 01d5 E8000000 		call	png_chunk_warning
 8339      00
 8340              	.LVL1083:
2837:fltk-1.3.4-1/png/pngrutil.c ****                            "forcing save of an unhandled chunk;"
 8341              		.loc 1 2837 0
 8342 01da BE000000 		movl	$.LC86, %esi
 8342      00
 8343 01df 4889DF   		movq	%rbx, %rdi
 8344 01e2 E8000000 		call	png_app_warning
 8344      00
 8345              	.LVL1084:
 8346 01e7 E905FFFF 		jmp	.L911
 8346      FF
 8347              	.LVL1085:
 8348              	.L953:
 8349              	.LBE213:
2961:fltk-1.3.4-1/png/pngrutil.c **** }
 8350              		.loc 1 2961 0
 8351 01ec BE000000 		movl	$.LC87, %esi
 8351      00
 8352 01f1 4889DF   		movq	%rbx, %rdi
 8353 01f4 E8000000 		call	png_chunk_error
 8353      00
 8354              	.LVL1086:
 8355              	.L954:
 8356              	.LBB214:
2816:fltk-1.3.4-1/png/pngrutil.c **** 
 8357              		.loc 1 2816 0
 8358 01f9 BE000000 		movl	$.LC84, %esi
 8358      00
 8359 01fe 4889DF   		movq	%rbx, %rdi
 8360 0201 E8000000 		call	png_chunk_error
 8360      00
 8361              	.LVL1087:
 8362              	.LBE214:
 8363              		.cfi_endproc
 8364              	.LFE92:
 8366              		.section	.text.unlikely.png_handle_unknown
 8367              	.LCOLDE88:
 8368              		.section	.text.png_handle_unknown
 8369              	.LHOTE88:
 8370              		.section	.rodata.str1.1
 8371              	.LC89:
 8372 02c6 696E7661 		.string	"invalid chunk type"
 8372      6C696420 
 8372      6368756E 
 8372      6B207479 
 8372      706500
 8373              		.section	.text.unlikely.png_check_chunk_name,"ax",@progbits
 8374              	.LCOLDB90:
 8375              		.section	.text.png_check_chunk_name,"ax",@progbits
 8376              	.LHOTB90:
 8377              		.p2align 4,,15
 8378              		.globl	png_check_chunk_name
 8380              	png_check_chunk_name:
 8381              	.LFB93:
2978:fltk-1.3.4-1/png/pngrutil.c ****    int i;
 8382              		.loc 1 2978 0
 8383              		.cfi_startproc
 8384              	.LVL1088:
 8385 0000 4883EC08 		subq	$8, %rsp
 8386              		.cfi_def_cfa_offset 16
2978:fltk-1.3.4-1/png/pngrutil.c ****    int i;
 8387              		.loc 1 2978 0
 8388 0004 BA040000 		movl	$4, %edx
 8388      00
 8389              	.LVL1089:
 8390              	.L962:
 8391              	.LBB215:
2987:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_error(png_ptr, "invalid chunk type");
 8392              		.loc 1 2987 0
 8393 0009 400FB6C6 		movzbl	%sil, %eax
 8394 000d 8D48BF   		leal	-65(%rax), %ecx
 8395 0010 83F939   		cmpl	$57, %ecx
 8396 0013 7715     		ja	.L963
 8397 0015 83E85B   		subl	$91, %eax
 8398 0018 83F805   		cmpl	$5, %eax
 8399 001b 760D     		jbe	.L963
2990:fltk-1.3.4-1/png/pngrutil.c ****    }
 8400              		.loc 1 2990 0 discriminator 2
 8401 001d C1EE08   		shrl	$8, %esi
 8402              	.LVL1090:
 8403              	.LBE215:
2983:fltk-1.3.4-1/png/pngrutil.c ****    {
 8404              		.loc 1 2983 0 discriminator 2
 8405 0020 83EA01   		subl	$1, %edx
 8406              	.LVL1091:
 8407 0023 75E4     		jne	.L962
2992:fltk-1.3.4-1/png/pngrutil.c **** 
 8408              		.loc 1 2992 0
 8409 0025 4883C408 		addq	$8, %rsp
 8410              		.cfi_remember_state
 8411              		.cfi_def_cfa_offset 8
 8412 0029 C3       		ret
 8413              	.LVL1092:
 8414              	.L963:
 8415              		.cfi_restore_state
 8416              	.LBB216:
2988:fltk-1.3.4-1/png/pngrutil.c **** 
 8417              		.loc 1 2988 0
 8418 002a BE000000 		movl	$.LC89, %esi
 8418      00
 8419              	.LVL1093:
 8420 002f E8000000 		call	png_chunk_error
 8420      00
 8421              	.LVL1094:
 8422              	.LBE216:
 8423              		.cfi_endproc
 8424              	.LFE93:
 8426              		.section	.text.unlikely.png_check_chunk_name
 8427              	.LCOLDE90:
 8428              		.section	.text.png_check_chunk_name
 8429              	.LHOTE90:
 8430              		.section	.text.unlikely.png_read_chunk_header,"ax",@progbits
 8431              	.LCOLDB91:
 8432              		.section	.text.png_read_chunk_header,"ax",@progbits
 8433              	.LHOTB91:
 8434              		.p2align 4,,15
 8435              		.globl	png_read_chunk_header
 8437              	png_read_chunk_header:
 8438              	.LFB62:
 151:fltk-1.3.4-1/png/pngrutil.c ****    png_byte buf[8];
 8439              		.loc 1 151 0
 8440              		.cfi_startproc
 8441              	.LVL1095:
 8442 0000 55       		pushq	%rbp
 8443              		.cfi_def_cfa_offset 16
 8444              		.cfi_offset 6, -16
 8445 0001 53       		pushq	%rbx
 8446              		.cfi_def_cfa_offset 24
 8447              		.cfi_offset 3, -24
 162:fltk-1.3.4-1/png/pngrutil.c ****    length = png_get_uint_31(png_ptr, buf);
 8448              		.loc 1 162 0
 8449 0002 BA080000 		movl	$8, %edx
 8449      00
 151:fltk-1.3.4-1/png/pngrutil.c ****    png_byte buf[8];
 8450              		.loc 1 151 0
 8451 0007 4889FB   		movq	%rdi, %rbx
 8452 000a 4883EC18 		subq	$24, %rsp
 8453              		.cfi_def_cfa_offset 48
 156:fltk-1.3.4-1/png/pngrutil.c **** #endif
 8454              		.loc 1 156 0
 8455 000e C787AC04 		movl	$33, 1196(%rdi)
 8455      00002100 
 8455      0000
 162:fltk-1.3.4-1/png/pngrutil.c ****    length = png_get_uint_31(png_ptr, buf);
 8456              		.loc 1 162 0
 8457 0018 4889E6   		movq	%rsp, %rsi
 151:fltk-1.3.4-1/png/pngrutil.c ****    png_byte buf[8];
 8458              		.loc 1 151 0
 8459 001b 64488B04 		movq	%fs:40, %rax
 8459      25280000 
 8459      00
 8460 0024 48894424 		movq	%rax, 8(%rsp)
 8460      08
 8461 0029 31C0     		xorl	%eax, %eax
 162:fltk-1.3.4-1/png/pngrutil.c ****    length = png_get_uint_31(png_ptr, buf);
 8462              		.loc 1 162 0
 8463 002b E8000000 		call	png_read_data
 8463      00
 8464              	.LVL1096:
 163:fltk-1.3.4-1/png/pngrutil.c **** 
 8465              		.loc 1 163 0
 8466 0030 4889E6   		movq	%rsp, %rsi
 8467 0033 4889DF   		movq	%rbx, %rdi
 8468 0036 E8000000 		call	png_get_uint_31
 8468      00
 8469              	.LVL1097:
 8470 003b 8B542404 		movl	4(%rsp), %edx
 172:fltk-1.3.4-1/png/pngrutil.c ****    png_calculate_crc(png_ptr, buf + 4, 4);
 8471              		.loc 1 172 0
 8472 003f 4889DF   		movq	%rbx, %rdi
 163:fltk-1.3.4-1/png/pngrutil.c **** 
 8473              		.loc 1 163 0
 8474 0042 89C5     		movl	%eax, %ebp
 8475              	.LVL1098:
 8476 0044 0FCA     		bswap	%edx
 166:fltk-1.3.4-1/png/pngrutil.c **** 
 8477              		.loc 1 166 0
 8478 0046 89931802 		movl	%edx, 536(%rbx)
 8478      0000
 172:fltk-1.3.4-1/png/pngrutil.c ****    png_calculate_crc(png_ptr, buf + 4, 4);
 8479              		.loc 1 172 0
 8480 004c E8000000 		call	png_reset_crc
 8480      00
 8481              	.LVL1099:
 173:fltk-1.3.4-1/png/pngrutil.c **** 
 8482              		.loc 1 173 0
 8483 0051 488D7424 		leaq	4(%rsp), %rsi
 8483      04
 8484 0056 BA040000 		movl	$4, %edx
 8484      00
 8485 005b 4889DF   		movq	%rbx, %rdi
 8486 005e E8000000 		call	png_calculate_crc
 8486      00
 8487              	.LVL1100:
 176:fltk-1.3.4-1/png/pngrutil.c **** 
 8488              		.loc 1 176 0
 8489 0063 8BB31802 		movl	536(%rbx), %esi
 8489      0000
 8490 0069 4889DF   		movq	%rbx, %rdi
 8491 006c E8000000 		call	png_check_chunk_name
 8491      00
 8492              	.LVL1101:
 183:fltk-1.3.4-1/png/pngrutil.c **** 
 8493              		.loc 1 183 0
 8494 0071 488B4C24 		movq	8(%rsp), %rcx
 8494      08
 8495 0076 6448330C 		xorq	%fs:40, %rcx
 8495      25280000 
 8495      00
 179:fltk-1.3.4-1/png/pngrutil.c **** #endif
 8496              		.loc 1 179 0
 8497 007f C783AC04 		movl	$65, 1196(%rbx)
 8497      00004100 
 8497      0000
 183:fltk-1.3.4-1/png/pngrutil.c **** 
 8498              		.loc 1 183 0
 8499 0089 7509     		jne	.L969
 8500 008b 4883C418 		addq	$24, %rsp
 8501              		.cfi_remember_state
 8502              		.cfi_def_cfa_offset 24
 8503 008f 89E8     		movl	%ebp, %eax
 8504 0091 5B       		popq	%rbx
 8505              		.cfi_def_cfa_offset 16
 8506              	.LVL1102:
 8507 0092 5D       		popq	%rbp
 8508              		.cfi_def_cfa_offset 8
 8509              	.LVL1103:
 8510 0093 C3       		ret
 8511              	.LVL1104:
 8512              	.L969:
 8513              		.cfi_restore_state
 8514 0094 E8000000 		call	__stack_chk_fail
 8514      00
 8515              	.LVL1105:
 8516              		.cfi_endproc
 8517              	.LFE62:
 8519              		.section	.text.unlikely.png_read_chunk_header
 8520              	.LCOLDE91:
 8521              		.section	.text.png_read_chunk_header
 8522              	.LHOTE91:
 8523              		.section	.rodata.str1.1
 8524              	.LC92:
 8525 02d9 696E7465 		.string	"internal row logic error"
 8525      726E616C 
 8525      20726F77 
 8525      206C6F67 
 8525      69632065 
 8526              		.section	.rodata.str1.8
 8527 016c 00000000 		.align 8
 8528              	.LC93:
 8529 0170 696E7465 		.string	"internal row size calculation error"
 8529      726E616C 
 8529      20726F77 
 8529      2073697A 
 8529      65206361 
 8530              		.section	.rodata.str1.1
 8531              	.LC94:
 8532 02f2 696E7465 		.string	"internal row width error"
 8532      726E616C 
 8532      20726F77 
 8532      20776964 
 8532      74682065 
 8533              		.section	.rodata.str1.8
 8534 0194 00000000 		.align 8
 8535              	.LC95:
 8536 0198 696E7661 		.string	"invalid user transform pixel depth"
 8536      6C696420 
 8536      75736572 
 8536      20747261 
 8536      6E73666F 
 8537              		.section	.text.unlikely.png_combine_row,"ax",@progbits
 8538              	.LCOLDB96:
 8539              		.section	.text.png_combine_row,"ax",@progbits
 8540              	.LHOTB96:
 8541              		.p2align 4,,15
 8542              		.globl	png_combine_row
 8544              	png_combine_row:
 8545              	.LFB94:
3003:fltk-1.3.4-1/png/pngrutil.c ****    unsigned int pixel_depth = png_ptr->transformed_pixel_depth;
 8546              		.loc 1 3003 0
 8547              		.cfi_startproc
 8548              	.LVL1106:
 8549 0000 4157     		pushq	%r15
 8550              		.cfi_def_cfa_offset 16
 8551              		.cfi_offset 15, -16
 8552 0002 4156     		pushq	%r14
 8553              		.cfi_def_cfa_offset 24
 8554              		.cfi_offset 14, -24
 8555 0004 4155     		pushq	%r13
 8556              		.cfi_def_cfa_offset 32
 8557              		.cfi_offset 13, -32
 8558 0006 4154     		pushq	%r12
 8559              		.cfi_def_cfa_offset 40
 8560              		.cfi_offset 12, -40
 8561 0008 55       		pushq	%rbp
 8562              		.cfi_def_cfa_offset 48
 8563              		.cfi_offset 6, -48
 8564 0009 53       		pushq	%rbx
 8565              		.cfi_def_cfa_offset 56
 8566              		.cfi_offset 3, -56
 8567 000a 4883EC08 		subq	$8, %rsp
 8568              		.cfi_def_cfa_offset 64
3004:fltk-1.3.4-1/png/pngrutil.c ****    png_const_bytep sp = png_ptr->row_buf + 1;
 8569              		.loc 1 3004 0
 8570 000e 440FB687 		movzbl	639(%rdi), %r8d
 8570      7F020000 
 8571              	.LVL1107:
3005:fltk-1.3.4-1/png/pngrutil.c ****    png_alloc_size_t row_width = png_ptr->width;
 8572              		.loc 1 3005 0
 8573 0016 488B8728 		movq	552(%rdi), %rax
 8573      020000
 8574              	.LVL1108:
3006:fltk-1.3.4-1/png/pngrutil.c ****    unsigned int pass = png_ptr->pass;
 8575              		.loc 1 3006 0
 8576 001d 448B8FF8 		movl	504(%rdi), %r9d
 8576      010000
 8577              	.LVL1109:
3017:fltk-1.3.4-1/png/pngrutil.c ****       png_error(png_ptr, "internal row logic error");
 8578              		.loc 1 3017 0
 8579 0024 4585C0   		testl	%r8d, %r8d
 8580 0027 0F845C05 		je	.L1076
 8580      0000
3024:fltk-1.3.4-1/png/pngrutil.c ****           PNG_ROWBYTES(pixel_depth, row_width))
 8581              		.loc 1 3024 0
 8582 002d 488B8F50 		movq	592(%rdi), %rcx
 8582      020000
 8583 0034 4989F2   		movq	%rsi, %r10
 8584 0037 4189D3   		movl	%edx, %r11d
 8585 003a 488D7001 		leaq	1(%rax), %rsi
 8586              	.LVL1110:
 8587 003e 4C89C2   		movq	%r8, %rdx
 8588              	.LVL1111:
 8589 0041 4C89CB   		movq	%r9, %rbx
 8590 0044 4885C9   		testq	%rcx, %rcx
 8591 0047 741D     		je	.L972
3025:fltk-1.3.4-1/png/pngrutil.c ****       png_error(png_ptr, "internal row size calculation error");
 8592              		.loc 1 3025 0 discriminator 1
 8593 0049 4183F807 		cmpl	$7, %r8d
 8594 004d 0F86CD01 		jbe	.L973
 8594      0000
 8595 0053 4489C0   		movl	%r8d, %eax
 8596 0056 C1E803   		shrl	$3, %eax
 8597 0059 490FAFC1 		imulq	%r9, %rax
 8598              	.L974:
3024:fltk-1.3.4-1/png/pngrutil.c ****           PNG_ROWBYTES(pixel_depth, row_width))
 8599              		.loc 1 3024 0
 8600 005d 4839C8   		cmpq	%rcx, %rax
 8601 0060 0F851E02 		jne	.L1077
 8601      0000
 8602              	.L972:
3029:fltk-1.3.4-1/png/pngrutil.c ****       png_error(png_ptr, "internal row width error");
 8603              		.loc 1 3029 0
 8604 0066 4D85C9   		testq	%r9, %r9
 8605 0069 0F842405 		je	.L1078
 8605      0000
3036:fltk-1.3.4-1/png/pngrutil.c ****    if (end_mask != 0)
 8606              		.loc 1 3036 0
 8607 006f 410FAFD8 		imull	%r8d, %ebx
 8608              	.LVL1112:
3037:fltk-1.3.4-1/png/pngrutil.c ****    {
 8609              		.loc 1 3037 0
 8610 0073 83E307   		andl	$7, %ebx
 8611              	.LVL1113:
 8612 0076 0F850C01 		jne	.L1079
 8612      0000
3009:fltk-1.3.4-1/png/pngrutil.c ****    unsigned int end_mask;
 8613              		.loc 1 3009 0
 8614 007c 31ED     		xorl	%ebp, %ebp
3008:fltk-1.3.4-1/png/pngrutil.c ****    png_byte end_byte = 0;
 8615              		.loc 1 3008 0
 8616 007e 4531E4   		xorl	%r12d, %r12d
 8617              	.LVL1114:
 8618              	.L976:
3060:fltk-1.3.4-1/png/pngrutil.c ****        (png_ptr->transformations & PNG_INTERLACE) != 0 &&
 8619              		.loc 1 3060 0
 8620 0081 80BF7402 		cmpb	$0, 628(%rdi)
 8620      000000
 8621 0088 0F844201 		je	.L980
 8621      0000
 8622              	.L1081:
3007:fltk-1.3.4-1/png/pngrutil.c ****    png_bytep end_ptr = 0;
 8623              		.loc 1 3007 0 discriminator 1
 8624 008e 440FB6AF 		movzbl	629(%rdi), %r13d
 8624      75020000 
3061:fltk-1.3.4-1/png/pngrutil.c ****        pass < 6 && (display == 0 ||
 8625              		.loc 1 3061 0 discriminator 1
 8626 0096 448BB734 		movl	308(%rdi), %r14d
 8626      010000
 8627 009d 41F6C602 		testb	$2, %r14b
3007:fltk-1.3.4-1/png/pngrutil.c ****    png_bytep end_ptr = 0;
 8628              		.loc 1 3007 0 discriminator 1
 8629 00a1 4489E8   		movl	%r13d, %eax
3061:fltk-1.3.4-1/png/pngrutil.c ****        pass < 6 && (display == 0 ||
 8630              		.loc 1 3061 0 discriminator 1
 8631 00a4 0F842601 		je	.L980
 8631      0000
 8632 00aa 4183FD05 		cmpl	$5, %r13d
 8633 00ae 0F871C01 		ja	.L980
 8633      0000
3062:fltk-1.3.4-1/png/pngrutil.c ****        /* The following copies everything for 'display' on passes 0, 2 and 4. */
 8634              		.loc 1 3062 0
 8635 00b4 4585DB   		testl	%r11d, %r11d
 8636 00b7 0F85AB01 		jne	.L981
 8636      0000
 8637 00bd 83E001   		andl	$1, %eax
 8638              	.L982:
 8639 00c0 458D7D01 		leal	1(%r13), %r15d
 8640 00c4 B9030000 		movl	$3, %ecx
 8640      00
 8641 00c9 0FB6C0   		movzbl	%al, %eax
 8642 00cc 41D1EF   		shrl	%r15d
 8643 00cf 4429F9   		subl	%r15d, %ecx
 8644 00d2 D3E0     		sall	%cl, %eax
 8645 00d4 83E007   		andl	$7, %eax
3069:fltk-1.3.4-1/png/pngrutil.c ****          return;
 8646              		.loc 1 3069 0
 8647 00d7 89C1     		movl	%eax, %ecx
 8648 00d9 4939C9   		cmpq	%rcx, %r9
 8649 00dc 0F861B01 		jbe	.L970
 8649      0000
3072:fltk-1.3.4-1/png/pngrutil.c ****       {
 8650              		.loc 1 3072 0
 8651 00e2 4183F807 		cmpl	$7, %r8d
 8652 00e6 0F87A401 		ja	.L985
 8652      0000
 8653              	.LBB217:
3203:fltk-1.3.4-1/png/pngrutil.c ****          png_uint_32 mask;
 8654              		.loc 1 3203 0
 8655 00ec 31D2     		xorl	%edx, %edx
 8656 00ee B8080000 		movl	$8, %eax
 8656      00
 8657 00f3 41F7F0   		divl	%r8d
 8658              	.LVL1115:
3208:fltk-1.3.4-1/png/pngrutil.c **** 
 8659              		.loc 1 3208 0
 8660 00f6 31D2     		xorl	%edx, %edx
3207:fltk-1.3.4-1/png/pngrutil.c ****                mask = MASK(pass, pixel_depth, display, 0);
 8661              		.loc 1 3207 0
 8662 00f8 4181E600 		andl	$65536, %r14d
 8662      000100
 8663 00ff 0F848B02 		je	.L986
 8663      0000
3208:fltk-1.3.4-1/png/pngrutil.c **** 
 8664              		.loc 1 3208 0
 8665 0105 4585DB   		testl	%r11d, %r11d
 8666 0108 0F84E402 		je	.L987
 8666      0000
3208:fltk-1.3.4-1/png/pngrutil.c **** 
 8667              		.loc 1 3208 0 is_stmt 0 discriminator 1
 8668 010e 4183F801 		cmpl	$1, %r8d
 8669 0112 740C     		je	.L988
3208:fltk-1.3.4-1/png/pngrutil.c **** 
 8670              		.loc 1 3208 0 discriminator 3
 8671 0114 31D2     		xorl	%edx, %edx
 8672 0116 4183F802 		cmpl	$2, %r8d
 8673 011a 0F95C2   		setne	%dl
 8674 011d 83C201   		addl	$1, %edx
 8675              	.L988:
3208:fltk-1.3.4-1/png/pngrutil.c **** 
 8676              		.loc 1 3208 0 discriminator 10
 8677 0120 4863D2   		movslq	%edx, %rdx
 8678 0123 41D1ED   		shrl	%r13d
 8679 0126 488D1452 		leaq	(%rdx,%rdx,2), %rdx
 8680 012a 4489E9   		movl	%r13d, %ecx
 8681 012d 4801CA   		addq	%rcx, %rdx
 8682 0130 8B149500 		movl	display_mask.7119(,%rdx,4), %edx
 8682      000000
 8683              	.L991:
 8684 0137 89C0     		movl	%eax, %eax
 8685 0139 EB2D     		jmp	.L989
 8686              	.LVL1116:
 8687 013b 0F1F4400 		.p2align 4,,10
 8687      00
 8688              		.p2align 3
 8689              	.L1080:
 8690              	.LBB218:
3229:fltk-1.3.4-1/png/pngrutil.c ****                else
 8691              		.loc 1 3229 0 is_stmt 1
 8692 0140 410FB60A 		movzbl	(%r10), %ecx
 8693              	.LVL1117:
 8694 0144 4189C8   		movl	%ecx, %r8d
 8695 0147 443206   		xorb	(%rsi), %r8b
 8696 014a 4421C2   		andl	%r8d, %edx
 8697              	.LVL1118:
 8698 014d 31CA     		xorl	%ecx, %edx
 8699 014f 418812   		movb	%dl, (%r10)
 8700              	.L995:
3238:fltk-1.3.4-1/png/pngrutil.c ****                break; /* May need to restore part of the last byte */
 8701              		.loc 1 3238 0
 8702 0152 4939C1   		cmpq	%rax, %r9
 8703 0155 0F868E00 		jbe	.L997
 8703      0000
3241:fltk-1.3.4-1/png/pngrutil.c ****             ++dp;
 8704              		.loc 1 3241 0
 8705 015b 4929C1   		subq	%rax, %r9
 8706              	.LVL1119:
3242:fltk-1.3.4-1/png/pngrutil.c ****             ++sp;
 8707              		.loc 1 3242 0
 8708 015e 4983C201 		addq	$1, %r10
 8709              	.LVL1120:
3243:fltk-1.3.4-1/png/pngrutil.c ****          }
 8710              		.loc 1 3243 0
 8711 0162 4883C601 		addq	$1, %rsi
 8712              	.LVL1121:
3223:fltk-1.3.4-1/png/pngrutil.c ****             m &= 0xff;
 8713              		.loc 1 3223 0
 8714 0166 89FA     		movl	%edi, %edx
 8715              	.LVL1122:
 8716              	.L989:
 8717 0168 89D7     		movl	%edx, %edi
3224:fltk-1.3.4-1/png/pngrutil.c **** 
 8718              		.loc 1 3224 0
 8719 016a 0FB6CA   		movzbl	%dl, %ecx
3223:fltk-1.3.4-1/png/pngrutil.c ****             m &= 0xff;
 8720              		.loc 1 3223 0
 8721 016d C1CF08   		rorl	$8, %edi
 8722              	.LVL1123:
3226:fltk-1.3.4-1/png/pngrutil.c ****             {
 8723              		.loc 1 3226 0
 8724 0170 85C9     		testl	%ecx, %ecx
 8725 0172 74DE     		je	.L995
3228:fltk-1.3.4-1/png/pngrutil.c ****                   *dp = (png_byte)((*dp & ~m) | (*sp & m));
 8726              		.loc 1 3228 0
 8727 0174 81F9FF00 		cmpl	$255, %ecx
 8727      0000
 8728 017a 75C4     		jne	.L1080
3231:fltk-1.3.4-1/png/pngrutil.c ****             }
 8729              		.loc 1 3231 0
 8730 017c 0FB616   		movzbl	(%rsi), %edx
 8731 017f 418812   		movb	%dl, (%r10)
 8732 0182 EBCE     		jmp	.L995
 8733              	.LVL1124:
 8734              		.p2align 4,,10
 8735 0184 0F1F4000 		.p2align 3
 8736              	.L1079:
 8737              	.LBE218:
 8738              	.LBE217:
3040:fltk-1.3.4-1/png/pngrutil.c ****       end_byte = *end_ptr;
 8739              		.loc 1 3040 0
 8740 0188 4183F807 		cmpl	$7, %r8d
 8741 018c 0F86B600 		jbe	.L977
 8741      0000
3040:fltk-1.3.4-1/png/pngrutil.c ****       end_byte = *end_ptr;
 8742              		.loc 1 3040 0 is_stmt 0 discriminator 1
 8743 0192 4589C4   		movl	%r8d, %r12d
 8744 0195 41C1EC03 		shrl	$3, %r12d
 8745 0199 4D0FAFE1 		imulq	%r9, %r12
 8746 019d 4983EC01 		subq	$1, %r12
 8747              	.L978:
3040:fltk-1.3.4-1/png/pngrutil.c ****       end_byte = *end_ptr;
 8748              		.loc 1 3040 0 discriminator 4
 8749 01a1 4D01D4   		addq	%r10, %r12
 8750              	.LVL1125:
3043:fltk-1.3.4-1/png/pngrutil.c ****             /* little-endian byte */
 8751              		.loc 1 3043 0 is_stmt 1 discriminator 4
 8752 01a4 F6873601 		testb	$1, 310(%rdi)
 8752      000001
3045:fltk-1.3.4-1/png/pngrutil.c **** 
 8753              		.loc 1 3045 0 discriminator 4
 8754 01ab B8FF0000 		movl	$255, %eax
 8754      00
3041:fltk-1.3.4-1/png/pngrutil.c **** #     ifdef PNG_READ_PACKSWAP_SUPPORTED
 8755              		.loc 1 3041 0 discriminator 4
 8756 01b0 410FB62C 		movzbl	(%r12), %ebp
 8756      24
 8757              	.LVL1126:
3045:fltk-1.3.4-1/png/pngrutil.c **** 
 8758              		.loc 1 3045 0 discriminator 4
 8759 01b5 89D9     		movl	%ebx, %ecx
3043:fltk-1.3.4-1/png/pngrutil.c ****             /* little-endian byte */
 8760              		.loc 1 3043 0 discriminator 4
 8761 01b7 747F     		je	.L979
3045:fltk-1.3.4-1/png/pngrutil.c **** 
 8762              		.loc 1 3045 0
 8763 01b9 D3E0     		sall	%cl, %eax
3060:fltk-1.3.4-1/png/pngrutil.c ****        (png_ptr->transformations & PNG_INTERLACE) != 0 &&
 8764              		.loc 1 3060 0
 8765 01bb 80BF7402 		cmpb	$0, 628(%rdi)
 8765      000000
3045:fltk-1.3.4-1/png/pngrutil.c **** 
 8766              		.loc 1 3045 0
 8767 01c2 89C3     		movl	%eax, %ebx
 8768              	.LVL1127:
3060:fltk-1.3.4-1/png/pngrutil.c ****        (png_ptr->transformations & PNG_INTERLACE) != 0 &&
 8769              		.loc 1 3060 0
 8770 01c4 0F85C4FE 		jne	.L1081
 8770      FFFF
 8771              	.LVL1128:
 8772 01ca 660F1F44 		.p2align 4,,10
 8772      0000
 8773              		.p2align 3
 8774              	.L980:
3477:fltk-1.3.4-1/png/pngrutil.c **** 
 8775              		.loc 1 3477 0
 8776 01d0 4183F807 		cmpl	$7, %r8d
 8777 01d4 763A     		jbe	.L1024
3477:fltk-1.3.4-1/png/pngrutil.c **** 
 8778              		.loc 1 3477 0 is_stmt 0 discriminator 1
 8779 01d6 41C1E803 		shrl	$3, %r8d
 8780              	.LVL1129:
 8781 01da 4489C2   		movl	%r8d, %edx
 8782              	.LVL1130:
 8783 01dd 490FAFD1 		imulq	%r9, %rdx
 8784              	.L1025:
 8785              	.LVL1131:
 8786              	.LBB219:
 8787              	.LBB220:
 8788              		.loc 2 53 0 is_stmt 1 discriminator 4
 8789 01e1 4C89D7   		movq	%r10, %rdi
 8790              	.LVL1132:
 8791 01e4 E8000000 		call	memcpy
 8791      00
 8792              	.LVL1133:
 8793              	.L997:
 8794              	.LBE220:
 8795              	.LBE219:
3480:fltk-1.3.4-1/png/pngrutil.c ****       *end_ptr = (png_byte)((end_byte & end_mask) | (*end_ptr & ~end_mask));
 8796              		.loc 1 3480 0
 8797 01e9 4D85E4   		testq	%r12, %r12
 8798 01ec 740F     		je	.L970
3481:fltk-1.3.4-1/png/pngrutil.c **** }
 8799              		.loc 1 3481 0
 8800 01ee 410FB604 		movzbl	(%r12), %eax
 8800      24
 8801 01f3 31C5     		xorl	%eax, %ebp
 8802              	.LVL1134:
 8803 01f5 21EB     		andl	%ebp, %ebx
 8804              	.LVL1135:
 8805 01f7 31C3     		xorl	%eax, %ebx
 8806 01f9 41881C24 		movb	%bl, (%r12)
 8807              	.L970:
3482:fltk-1.3.4-1/png/pngrutil.c **** 
 8808              		.loc 1 3482 0
 8809 01fd 4883C408 		addq	$8, %rsp
 8810              		.cfi_remember_state
 8811              		.cfi_def_cfa_offset 56
 8812 0201 5B       		popq	%rbx
 8813              		.cfi_def_cfa_offset 48
 8814 0202 5D       		popq	%rbp
 8815              		.cfi_def_cfa_offset 40
 8816 0203 415C     		popq	%r12
 8817              		.cfi_def_cfa_offset 32
 8818              	.LVL1136:
 8819 0205 415D     		popq	%r13
 8820              		.cfi_def_cfa_offset 24
 8821 0207 415E     		popq	%r14
 8822              		.cfi_def_cfa_offset 16
 8823 0209 415F     		popq	%r15
 8824              		.cfi_def_cfa_offset 8
 8825 020b C3       		ret
 8826              	.LVL1137:
 8827 020c 0F1F4000 		.p2align 4,,10
 8828              		.p2align 3
 8829              	.L1024:
 8830              		.cfi_restore_state
3477:fltk-1.3.4-1/png/pngrutil.c **** 
 8831              		.loc 1 3477 0 discriminator 2
 8832 0210 490FAFD1 		imulq	%r9, %rdx
 8833 0214 4883C207 		addq	$7, %rdx
 8834 0218 48C1EA03 		shrq	$3, %rdx
 8835 021c EBC3     		jmp	.L1025
 8836              	.LVL1138:
 8837 021e 6690     		.p2align 4,,10
 8838              		.p2align 3
 8839              	.L973:
3025:fltk-1.3.4-1/png/pngrutil.c ****       png_error(png_ptr, "internal row size calculation error");
 8840              		.loc 1 3025 0 discriminator 2
 8841 0220 410FB6C0 		movzbl	%r8b, %eax
 8842 0224 490FAFC1 		imulq	%r9, %rax
 8843 0228 4883C007 		addq	$7, %rax
 8844 022c 48C1E803 		shrq	$3, %rax
 8845 0230 E928FEFF 		jmp	.L974
 8845      FF
 8846              	.LVL1139:
 8847              		.p2align 4,,10
 8848 0235 0F1F00   		.p2align 3
 8849              	.L979:
3049:fltk-1.3.4-1/png/pngrutil.c ****       /* end_mask is now the bits to *keep* from the destination row */
 8850              		.loc 1 3049 0
 8851 0238 D3F8     		sarl	%cl, %eax
 8852 023a 89C3     		movl	%eax, %ebx
 8853              	.LVL1140:
 8854 023c E940FEFF 		jmp	.L976
 8854      FF
 8855              	.LVL1141:
 8856              		.p2align 4,,10
 8857 0241 0F1F8000 		.p2align 3
 8857      000000
 8858              	.L977:
3040:fltk-1.3.4-1/png/pngrutil.c ****       end_byte = *end_ptr;
 8859              		.loc 1 3040 0 discriminator 2
 8860 0248 440FB6E2 		movzbl	%dl, %r12d
 8861 024c 4D0FAFE1 		imulq	%r9, %r12
 8862 0250 4983C407 		addq	$7, %r12
 8863 0254 49C1EC03 		shrq	$3, %r12
 8864 0258 4983EC01 		subq	$1, %r12
 8865 025c E940FFFF 		jmp	.L978
 8865      FF
 8866              	.LVL1142:
 8867              		.p2align 4,,10
 8868 0261 0F1F8000 		.p2align 3
 8868      000000
 8869              	.L981:
3062:fltk-1.3.4-1/png/pngrutil.c ****        /* The following copies everything for 'display' on passes 0, 2 and 4. */
 8870              		.loc 1 3062 0 discriminator 1
 8871 0268 4183FB01 		cmpl	$1, %r11d
 8872 026c 0F855EFF 		jne	.L980
 8872      FFFF
3064:fltk-1.3.4-1/png/pngrutil.c ****    {
 8873              		.loc 1 3064 0
 8874 0272 A801     		testb	$1, %al
 8875 0274 0F8456FF 		je	.L980
 8875      FFFF
 8876 027a B8010000 		movl	$1, %eax
 8876      00
 8877 027f E93CFEFF 		jmp	.L982
 8877      FF
 8878              	.LVL1143:
 8879              	.L1077:
3026:fltk-1.3.4-1/png/pngrutil.c **** 
 8880              		.loc 1 3026 0
 8881 0284 BE000000 		movl	$.LC93, %esi
 8881      00
 8882              	.LVL1144:
 8883 0289 E8000000 		call	png_error
 8883      00
 8884              	.LVL1145:
 8885 028e 6690     		.p2align 4,,10
 8886              		.p2align 3
 8887              	.L985:
 8888              	.LBB221:
3252:fltk-1.3.4-1/png/pngrutil.c ****             png_error(png_ptr, "invalid user transform pixel depth");
 8889              		.loc 1 3252 0
 8890 0290 83E207   		andl	$7, %edx
 8891 0293 0F856503 		jne	.L1082
 8891      0000
3255:fltk-1.3.4-1/png/pngrutil.c ****          row_width *= pixel_depth;
 8892              		.loc 1 3255 0
 8893 0299 41C1E803 		shrl	$3, %r8d
 8894              	.LVL1146:
3256:fltk-1.3.4-1/png/pngrutil.c **** 
 8895              		.loc 1 3256 0
 8896 029d 4489C2   		movl	%r8d, %edx
 8897 02a0 490FAFD1 		imulq	%r9, %rdx
 8898              	.LVL1147:
3285:fltk-1.3.4-1/png/pngrutil.c **** 
 8899              		.loc 1 3285 0
 8900 02a4 4589C1   		movl	%r8d, %r9d
 8901              	.LBB222:
3265:fltk-1.3.4-1/png/pngrutil.c ****             dp += offset;
 8902              		.loc 1 3265 0
 8903 02a7 410FAFC0 		imull	%r8d, %eax
 8904              	.LVL1148:
 8905 02ab 4829C2   		subq	%rax, %rdx
 8906              	.LVL1149:
3266:fltk-1.3.4-1/png/pngrutil.c ****             sp += offset;
 8907              		.loc 1 3266 0
 8908 02ae 4901C2   		addq	%rax, %r10
 8909              	.LVL1150:
3267:fltk-1.3.4-1/png/pngrutil.c ****          }
 8910              		.loc 1 3267 0
 8911 02b1 4801F0   		addq	%rsi, %rax
 8912              	.LVL1151:
 8913              	.LBE222:
3271:fltk-1.3.4-1/png/pngrutil.c ****          {
 8914              		.loc 1 3271 0
 8915 02b4 4585DB   		testl	%r11d, %r11d
 8916 02b7 7417     		je	.L999
3277:fltk-1.3.4-1/png/pngrutil.c **** 
 8917              		.loc 1 3277 0
 8918 02b9 B9060000 		movl	$6, %ecx
 8918      00
 8919              	.LVL1152:
 8920 02be 4429E9   		subl	%r13d, %ecx
 8921 02c1 D1E9     		shrl	%ecx
 8922 02c3 41D3E1   		sall	%cl, %r9d
 8923              	.LVL1153:
3280:fltk-1.3.4-1/png/pngrutil.c ****                bytes_to_copy = (unsigned int)/*SAFE*/row_width;
 8924              		.loc 1 3280 0
 8925 02c6 4589CB   		movl	%r9d, %r11d
 8926              	.LVL1154:
3281:fltk-1.3.4-1/png/pngrutil.c ****          }
 8927              		.loc 1 3281 0
 8928 02c9 4C39DA   		cmpq	%r11, %rdx
 8929 02cc 440F42CA 		cmovb	%edx, %r9d
 8930              	.LVL1155:
 8931              	.L999:
3288:fltk-1.3.4-1/png/pngrutil.c **** 
 8932              		.loc 1 3288 0
 8933 02d0 B9070000 		movl	$7, %ecx
 8933      00
 8934 02d5 4429E9   		subl	%r13d, %ecx
 8935 02d8 D1E9     		shrl	%ecx
 8936 02da 41D3E0   		sall	%cl, %r8d
 8937              	.LVL1156:
3298:fltk-1.3.4-1/png/pngrutil.c ****          {
 8938              		.loc 1 3298 0
 8939 02dd 4183F902 		cmpl	$2, %r9d
 8940 02e1 0F84CA01 		je	.L1001
 8940      0000
 8941 02e7 4183F903 		cmpl	$3, %r9d
 8942 02eb 0F846701 		je	.L1002
 8942      0000
 8943 02f1 4183F901 		cmpl	$1, %r9d
 8944 02f5 0F842401 		je	.L1083
 8944      0000
3357:fltk-1.3.4-1/png/pngrutil.c ****                    png_isaligned(dp, png_uint_16) &&
 8945              		.loc 1 3357 0
 8946 02fb 4183F90F 		cmpl	$15, %r9d
 8947 02ff 0F87E401 		ja	.L1011
 8947      0000
 8948 0305 4C89D1   		movq	%r10, %rcx
 8949 0308 4809C1   		orq	%rax, %rcx
3358:fltk-1.3.4-1/png/pngrutil.c ****                    png_isaligned(sp, png_uint_16) &&
 8950              		.loc 1 3358 0 discriminator 1
 8951 030b F6C101   		testb	$1, %cl
 8952 030e 0F85D501 		jne	.L1011
 8952      0000
 8953 0314 4489CE   		movl	%r9d, %esi
 8954 0317 4409C6   		orl	%r8d, %esi
3360:fltk-1.3.4-1/png/pngrutil.c ****                    bytes_to_jump % (sizeof (png_uint_16)) == 0)
 8955              		.loc 1 3360 0
 8956 031a 40F6C601 		testb	$1, %sil
 8957 031e 0F85C501 		jne	.L1011
 8957      0000
3366:fltk-1.3.4-1/png/pngrutil.c ****                       png_isaligned(sp, png_uint_32) != 0 &&
 8958              		.loc 1 3366 0
 8959 0324 80E103   		andb	$3, %cl
 8960 0327 0F857002 		jne	.L1012
 8960      0000
3368:fltk-1.3.4-1/png/pngrutil.c ****                       bytes_to_jump % (sizeof (png_uint_32)) == 0)
 8961              		.loc 1 3368 0
 8962 032d 4080E603 		andb	$3, %sil
 8963 0331 0F856602 		jne	.L1012
 8963      0000
 8964              	.LVL1157:
 8965              	.LBB223:
 8966              	.LBB224:
3390:fltk-1.3.4-1/png/pngrutil.c ****                         sp32 += skip;
 8967              		.loc 1 3390 0
 8968 0337 4C89C7   		movq	%r8, %rdi
 8969              	.LVL1158:
 8970 033a 4589CB   		movl	%r9d, %r11d
 8971 033d 4489C6   		movl	%r8d, %esi
 8972 0340 4C29CF   		subq	%r9, %rdi
 8973 0343 83E7FC   		andl	$4294967292, %edi
 8974              	.LVL1159:
 8975              	.L1014:
3379:fltk-1.3.4-1/png/pngrutil.c ****                         do
 8976              		.loc 1 3379 0
 8977 0346 4D89D9   		movq	%r11, %r9
 8978              	.LVL1160:
 8979              	.L1013:
3382:fltk-1.3.4-1/png/pngrutil.c ****                            c -= (sizeof (png_uint_32));
 8980              		.loc 1 3382 0 discriminator 1
 8981 0349 4883C004 		addq	$4, %rax
 8982 034d 8B48FC   		movl	-4(%rax), %ecx
 8983 0350 4983C204 		addq	$4, %r10
 8984              	.LVL1161:
3385:fltk-1.3.4-1/png/pngrutil.c **** 
 8985              		.loc 1 3385 0 discriminator 1
 8986 0354 4983E904 		subq	$4, %r9
 8987              	.LVL1162:
3382:fltk-1.3.4-1/png/pngrutil.c ****                            c -= (sizeof (png_uint_32));
 8988              		.loc 1 3382 0 discriminator 1
 8989 0358 41894AFC 		movl	%ecx, -4(%r10)
3385:fltk-1.3.4-1/png/pngrutil.c **** 
 8990              		.loc 1 3385 0 discriminator 1
 8991 035c 75EB     		jne	.L1013
3387:fltk-1.3.4-1/png/pngrutil.c ****                            return;
 8992              		.loc 1 3387 0
 8993 035e 4839F2   		cmpq	%rsi, %rdx
 8994 0361 0F8696FE 		jbe	.L970
 8994      FFFF
 8995              	.LVL1163:
 8996 0367 4829F2   		subq	%rsi, %rdx
 8997              	.LVL1164:
3390:fltk-1.3.4-1/png/pngrutil.c ****                         sp32 += skip;
 8998              		.loc 1 3390 0
 8999 036a 4901FA   		addq	%rdi, %r10
 9000              	.LVL1165:
3391:fltk-1.3.4-1/png/pngrutil.c ****                         row_width -= bytes_to_jump;
 9001              		.loc 1 3391 0
 9002 036d 4801F8   		addq	%rdi, %rax
 9003              	.LVL1166:
 9004              	.LBE224:
3394:fltk-1.3.4-1/png/pngrutil.c **** 
 9005              		.loc 1 3394 0
 9006 0370 4C39DA   		cmpq	%r11, %rdx
 9007 0373 73D1     		jnb	.L1014
 9008 0375 31C9     		xorl	%ecx, %ecx
 9009              	.LVL1167:
 9010              	.L1015:
3403:fltk-1.3.4-1/png/pngrutil.c ****                      while (--row_width > 0);
 9011              		.loc 1 3403 0 discriminator 1
 9012 0377 0FB63408 		movzbl	(%rax,%rcx), %esi
 9013 037b 4188340A 		movb	%sil, (%r10,%rcx)
 9014              	.LVL1168:
 9015 037f 4883C101 		addq	$1, %rcx
 9016              	.LVL1169:
3404:fltk-1.3.4-1/png/pngrutil.c ****                      return;
 9017              		.loc 1 3404 0 discriminator 1
 9018 0383 4839CA   		cmpq	%rcx, %rdx
 9019 0386 75EF     		jne	.L1015
 9020 0388 E970FEFF 		jmp	.L970
 9020      FF
 9021              	.LVL1170:
 9022 038d 0F1F00   		.p2align 4,,10
 9023              		.p2align 3
 9024              	.L986:
 9025              	.LBE223:
 9026              	.LBE221:
 9027              	.LBB231:
3212:fltk-1.3.4-1/png/pngrutil.c **** 
 9028              		.loc 1 3212 0
 9029 0390 4585DB   		testl	%r11d, %r11d
 9030 0393 7430     		je	.L992
3212:fltk-1.3.4-1/png/pngrutil.c **** 
 9031              		.loc 1 3212 0 is_stmt 0 discriminator 1
 9032 0395 4183F801 		cmpl	$1, %r8d
 9033 0399 740C     		je	.L993
3212:fltk-1.3.4-1/png/pngrutil.c **** 
 9034              		.loc 1 3212 0 discriminator 3
 9035 039b 31D2     		xorl	%edx, %edx
 9036 039d 4183F802 		cmpl	$2, %r8d
 9037 03a1 0F95C2   		setne	%dl
 9038 03a4 83C201   		addl	$1, %edx
 9039              	.L993:
3212:fltk-1.3.4-1/png/pngrutil.c **** 
 9040              		.loc 1 3212 0 discriminator 10
 9041 03a7 4863D2   		movslq	%edx, %rdx
 9042 03aa 41D1ED   		shrl	%r13d
 9043 03ad 488D1452 		leaq	(%rdx,%rdx,2), %rdx
 9044 03b1 4489E9   		movl	%r13d, %ecx
 9045 03b4 488D5411 		leaq	9(%rcx,%rdx), %rdx
 9045      09
 9046 03b9 8B149500 		movl	display_mask.7119(,%rdx,4), %edx
 9046      000000
 9047 03c0 E972FDFF 		jmp	.L991
 9047      FF
 9048              	.L992:
3212:fltk-1.3.4-1/png/pngrutil.c **** 
 9049              		.loc 1 3212 0 discriminator 2
 9050 03c5 4183F801 		cmpl	$1, %r8d
 9051 03c9 740C     		je	.L994
3212:fltk-1.3.4-1/png/pngrutil.c **** 
 9052              		.loc 1 3212 0 discriminator 12
 9053 03cb 31D2     		xorl	%edx, %edx
 9054 03cd 4183F802 		cmpl	$2, %r8d
 9055 03d1 0F95C2   		setne	%dl
 9056 03d4 83C201   		addl	$1, %edx
 9057              	.L994:
3212:fltk-1.3.4-1/png/pngrutil.c **** 
 9058              		.loc 1 3212 0 discriminator 19
 9059 03d7 4863D2   		movslq	%edx, %rdx
 9060 03da 4589ED   		movl	%r13d, %r13d
 9061 03dd 488D1452 		leaq	(%rdx,%rdx,2), %rdx
 9062 03e1 498D5455 		leaq	18(%r13,%rdx,2), %rdx
 9062      12
 9063 03e6 8B149500 		movl	row_mask.7118(,%rdx,4), %edx
 9063      000000
 9064 03ed E945FDFF 		jmp	.L991
 9064      FF
 9065              	.L987:
3208:fltk-1.3.4-1/png/pngrutil.c **** 
 9066              		.loc 1 3208 0 is_stmt 1 discriminator 2
 9067 03f2 4183F801 		cmpl	$1, %r8d
 9068 03f6 740C     		je	.L990
3208:fltk-1.3.4-1/png/pngrutil.c **** 
 9069              		.loc 1 3208 0 is_stmt 0 discriminator 12
 9070 03f8 31D2     		xorl	%edx, %edx
 9071 03fa 4183F802 		cmpl	$2, %r8d
 9072 03fe 0F95C2   		setne	%dl
 9073 0401 83C201   		addl	$1, %edx
 9074              	.L990:
3208:fltk-1.3.4-1/png/pngrutil.c **** 
 9075              		.loc 1 3208 0 discriminator 19
 9076 0404 4863D2   		movslq	%edx, %rdx
 9077 0407 4589ED   		movl	%r13d, %r13d
 9078 040a 488D1452 		leaq	(%rdx,%rdx,2), %rdx
 9079 040e 498D5455 		leaq	0(%r13,%rdx,2), %rdx
 9079      00
 9080 0413 8B149500 		movl	row_mask.7118(,%rdx,4), %edx
 9080      000000
 9081 041a E918FDFF 		jmp	.L991
 9081      FF
 9082              	.LVL1171:
 9083              	.L1083:
 9084              	.LBE231:
 9085              	.LBB232:
3303:fltk-1.3.4-1/png/pngrutil.c **** 
 9086              		.loc 1 3303 0 is_stmt 1
 9087 041f 0FB608   		movzbl	(%rax), %ecx
3305:fltk-1.3.4-1/png/pngrutil.c ****                      return;
 9088              		.loc 1 3305 0
 9089 0422 4489C6   		movl	%r8d, %esi
 9090 0425 4839F2   		cmpq	%rsi, %rdx
3303:fltk-1.3.4-1/png/pngrutil.c **** 
 9091              		.loc 1 3303 0
 9092 0428 41880A   		movb	%cl, (%r10)
 9093              	.LVL1172:
3305:fltk-1.3.4-1/png/pngrutil.c ****                      return;
 9094              		.loc 1 3305 0
 9095 042b 0F86CCFD 		jbe	.L970
 9095      FFFF
 9096 0431 4C8D0430 		leaq	(%rax,%rsi), %r8
 9097              	.LVL1173:
 9098 0435 498D3C32 		leaq	(%r10,%rsi), %rdi
 9099              	.LVL1174:
 9100 0439 31C9     		xorl	%ecx, %ecx
 9101              	.LVL1175:
 9102 043b 0F1F4400 		.p2align 4,,10
 9102      00
 9103              		.p2align 3
 9104              	.L1006:
3303:fltk-1.3.4-1/png/pngrutil.c **** 
 9105              		.loc 1 3303 0
 9106 0440 410FB604 		movzbl	(%r8,%rcx), %eax
 9106      08
3310:fltk-1.3.4-1/png/pngrutil.c ****                }
 9107              		.loc 1 3310 0
 9108 0445 4829F2   		subq	%rsi, %rdx
 9109              	.LVL1176:
3303:fltk-1.3.4-1/png/pngrutil.c **** 
 9110              		.loc 1 3303 0
 9111 0448 88040F   		movb	%al, (%rdi,%rcx)
 9112 044b 4801F1   		addq	%rsi, %rcx
 9113              	.LVL1177:
3305:fltk-1.3.4-1/png/pngrutil.c ****                      return;
 9114              		.loc 1 3305 0
 9115 044e 4839F2   		cmpq	%rsi, %rdx
 9116 0451 77ED     		ja	.L1006
 9117 0453 E9A5FDFF 		jmp	.L970
 9117      FF
 9118              	.LVL1178:
 9119              	.L1002:
3340:fltk-1.3.4-1/png/pngrutil.c **** 
 9120              		.loc 1 3340 0
 9121 0458 0FB608   		movzbl	(%rax), %ecx
3342:fltk-1.3.4-1/png/pngrutil.c ****                      return;
 9122              		.loc 1 3342 0
 9123 045b 4489C6   		movl	%r8d, %esi
3340:fltk-1.3.4-1/png/pngrutil.c **** 
 9124              		.loc 1 3340 0
 9125 045e 41880A   		movb	%cl, (%r10)
 9126              	.LVL1179:
 9127 0461 0FB64801 		movzbl	1(%rax), %ecx
 9128 0465 41884A01 		movb	%cl, 1(%r10)
 9129 0469 0FB64802 		movzbl	2(%rax), %ecx
 9130 046d 4801F0   		addq	%rsi, %rax
 9131              	.LVL1180:
3342:fltk-1.3.4-1/png/pngrutil.c ****                      return;
 9132              		.loc 1 3342 0
 9133 0470 4839F2   		cmpq	%rsi, %rdx
3340:fltk-1.3.4-1/png/pngrutil.c **** 
 9134              		.loc 1 3340 0
 9135 0473 41884A02 		movb	%cl, 2(%r10)
 9136 0477 498D0C32 		leaq	(%r10,%rsi), %rcx
3342:fltk-1.3.4-1/png/pngrutil.c ****                      return;
 9137              		.loc 1 3342 0
 9138 047b 0F867CFD 		jbe	.L970
 9138      FFFF
 9139              	.LVL1181:
 9140              		.p2align 4,,10
 9141 0481 0F1F8000 		.p2align 3
 9141      000000
 9142              	.L1008:
3340:fltk-1.3.4-1/png/pngrutil.c **** 
 9143              		.loc 1 3340 0
 9144 0488 0FB638   		movzbl	(%rax), %edi
3347:fltk-1.3.4-1/png/pngrutil.c ****                }
 9145              		.loc 1 3347 0
 9146 048b 4829F2   		subq	%rsi, %rdx
 9147              	.LVL1182:
3340:fltk-1.3.4-1/png/pngrutil.c **** 
 9148              		.loc 1 3340 0
 9149 048e 408839   		movb	%dil, (%rcx)
 9150 0491 0FB67801 		movzbl	1(%rax), %edi
 9151 0495 40887901 		movb	%dil, 1(%rcx)
 9152 0499 0FB67802 		movzbl	2(%rax), %edi
 9153 049d 4801F0   		addq	%rsi, %rax
 9154              	.LVL1183:
 9155 04a0 40887902 		movb	%dil, 2(%rcx)
 9156 04a4 4801F1   		addq	%rsi, %rcx
3342:fltk-1.3.4-1/png/pngrutil.c ****                      return;
 9157              		.loc 1 3342 0
 9158 04a7 4839F2   		cmpq	%rsi, %rdx
 9159 04aa 77DC     		ja	.L1008
 9160 04ac E94CFDFF 		jmp	.L970
 9160      FF
 9161              	.LVL1184:
 9162              	.L1001:
 9163 04b1 4489C1   		movl	%r8d, %ecx
 9164              	.LVL1185:
 9165              		.p2align 4,,10
 9166 04b4 0F1F4000 		.p2align 3
 9167              	.L1007:
3319:fltk-1.3.4-1/png/pngrutil.c **** 
 9168              		.loc 1 3319 0
 9169 04b8 0FB630   		movzbl	(%rax), %esi
3321:fltk-1.3.4-1/png/pngrutil.c ****                      return;
 9170              		.loc 1 3321 0
 9171 04bb 4839CA   		cmpq	%rcx, %rdx
3319:fltk-1.3.4-1/png/pngrutil.c **** 
 9172              		.loc 1 3319 0
 9173 04be 418832   		movb	%sil, (%r10)
 9174 04c1 0FB67001 		movzbl	1(%rax), %esi
 9175 04c5 41887201 		movb	%sil, 1(%r10)
3321:fltk-1.3.4-1/png/pngrutil.c ****                      return;
 9176              		.loc 1 3321 0
 9177 04c9 0F862EFD 		jbe	.L970
 9177      FFFF
 9178              	.LVL1186:
3326:fltk-1.3.4-1/png/pngrutil.c ****                }
 9179              		.loc 1 3326 0
 9180 04cf 4829CA   		subq	%rcx, %rdx
 9181              	.LVL1187:
3324:fltk-1.3.4-1/png/pngrutil.c ****                   dp += bytes_to_jump;
 9182              		.loc 1 3324 0
 9183 04d2 4801C8   		addq	%rcx, %rax
 9184              	.LVL1188:
3325:fltk-1.3.4-1/png/pngrutil.c ****                   row_width -= bytes_to_jump;
 9185              		.loc 1 3325 0
 9186 04d5 4901CA   		addq	%rcx, %r10
 9187              	.LVL1189:
3328:fltk-1.3.4-1/png/pngrutil.c **** 
 9188              		.loc 1 3328 0
 9189 04d8 4883FA01 		cmpq	$1, %rdx
 9190 04dc 77DA     		ja	.L1007
3331:fltk-1.3.4-1/png/pngrutil.c ****                return;
 9191              		.loc 1 3331 0
 9192 04de 0FB600   		movzbl	(%rax), %eax
 9193              	.LVL1190:
 9194 04e1 418802   		movb	%al, (%r10)
3332:fltk-1.3.4-1/png/pngrutil.c **** 
 9195              		.loc 1 3332 0
 9196 04e4 E914FDFF 		jmp	.L970
 9196      FF
 9197              	.LVL1191:
 9198              	.L1011:
 9199 04e9 4489C3   		movl	%r8d, %ebx
 9200              	.LVL1192:
 9201 04ec 4589CB   		movl	%r9d, %r11d
 9202 04ef 4129D8   		subl	%ebx, %r8d
 9203              	.LVL1193:
 9204              		.p2align 4,,10
 9205 04f2 660F1F44 		.p2align 3
 9205      0000
 9206              	.L1010:
 9207              	.LBB225:
 9208              	.LBB226:
 9209              		.loc 2 53 0
 9210 04f8 4183F908 		cmpl	$8, %r9d
 9211 04fc 733D     		jnb	.L1019
 9212              	.L1086:
 9213 04fe 41F6C104 		testb	$4, %r9b
 9214 0502 7566     		jne	.L1084
 9215 0504 4585C9   		testl	%r9d, %r9d
 9216 0507 740C     		je	.L1020
 9217 0509 0FB608   		movzbl	(%rax), %ecx
 9218 050c 41F6C102 		testb	$2, %r9b
 9219 0510 41880A   		movb	%cl, (%r10)
 9220 0513 7566     		jne	.L1085
 9221              	.L1020:
 9222              	.LVL1194:
 9223              	.LBE226:
 9224              	.LBE225:
3454:fltk-1.3.4-1/png/pngrutil.c ****                      return;
 9225              		.loc 1 3454 0
 9226 0515 4839DA   		cmpq	%rbx, %rdx
 9227 0518 0F86DFFC 		jbe	.L970
 9227      FFFF
 9228              	.LVL1195:
3459:fltk-1.3.4-1/png/pngrutil.c ****                   if (bytes_to_copy > row_width)
 9229              		.loc 1 3459 0
 9230 051e 4829DA   		subq	%rbx, %rdx
 9231              	.LVL1196:
3457:fltk-1.3.4-1/png/pngrutil.c ****                   dp += bytes_to_jump;
 9232              		.loc 1 3457 0
 9233 0521 4801D8   		addq	%rbx, %rax
 9234              	.LVL1197:
3458:fltk-1.3.4-1/png/pngrutil.c ****                   row_width -= bytes_to_jump;
 9235              		.loc 1 3458 0
 9236 0524 4901DA   		addq	%rbx, %r10
 9237              	.LVL1198:
3460:fltk-1.3.4-1/png/pngrutil.c ****                      bytes_to_copy = (unsigned int)/*SAFE*/row_width;
 9238              		.loc 1 3460 0
 9239 0527 4939D3   		cmpq	%rdx, %r11
 9240 052a 76CC     		jbe	.L1010
 9241              	.LVL1199:
 9242 052c 4189D1   		movl	%edx, %r9d
 9243 052f 4529C1   		subl	%r8d, %r9d
 9244              	.LBB228:
 9245              	.LBB227:
 9246              		.loc 2 53 0
 9247 0532 4183F908 		cmpl	$8, %r9d
 9248 0536 4589CB   		movl	%r9d, %r11d
 9249              	.LVL1200:
 9250 0539 72C3     		jb	.L1086
 9251              	.LVL1201:
 9252              	.L1019:
 9253 053b 488B08   		movq	(%rax), %rcx
 9254 053e 498D7A08 		leaq	8(%r10), %rdi
 9255 0542 4889C6   		movq	%rax, %rsi
 9256 0545 4883E7F8 		andq	$-8, %rdi
 9257 0549 49890A   		movq	%rcx, (%r10)
 9258 054c 4A8B4C18 		movq	-8(%rax,%r11), %rcx
 9258      F8
 9259 0551 4B894C1A 		movq	%rcx, -8(%r10,%r11)
 9259      F8
 9260 0556 4C89D1   		movq	%r10, %rcx
 9261 0559 4829F9   		subq	%rdi, %rcx
 9262 055c 4829CE   		subq	%rcx, %rsi
 9263 055f 4401C9   		addl	%r9d, %ecx
 9264 0562 C1E903   		shrl	$3, %ecx
 9265 0565 F348A5   		rep movsq
 9266 0568 EBAB     		jmp	.L1020
 9267              	.L1084:
 9268 056a 8B08     		movl	(%rax), %ecx
 9269 056c 41890A   		movl	%ecx, (%r10)
 9270 056f 428B4C18 		movl	-4(%rax,%r11), %ecx
 9270      FC
 9271 0574 43894C1A 		movl	%ecx, -4(%r10,%r11)
 9271      FC
 9272 0579 EB9A     		jmp	.L1020
 9273              	.L1085:
 9274 057b 420FB74C 		movzwl	-2(%rax,%r11), %ecx
 9274      18FE
 9275 0581 6643894C 		movw	%cx, -2(%r10,%r11)
 9275      1AFE
 9276 0587 EB8C     		jmp	.L1020
 9277              	.LVL1202:
 9278              	.L1076:
 9279              	.LBE227:
 9280              	.LBE228:
 9281              	.LBE232:
3018:fltk-1.3.4-1/png/pngrutil.c **** 
 9282              		.loc 1 3018 0
 9283 0589 BE000000 		movl	$.LC92, %esi
 9283      00
 9284              	.LVL1203:
 9285 058e E8000000 		call	png_error
 9285      00
 9286              	.LVL1204:
 9287              	.L1078:
3030:fltk-1.3.4-1/png/pngrutil.c **** 
 9288              		.loc 1 3030 0
 9289 0593 BE000000 		movl	$.LC94, %esi
 9289      00
 9290              	.LVL1205:
 9291 0598 E8000000 		call	png_error
 9291      00
 9292              	.LVL1206:
 9293              	.L1012:
 9294              	.LBB233:
 9295              	.LBB229:
 9296              	.LBB230:
3432:fltk-1.3.4-1/png/pngrutil.c ****                         sp16 += skip;
 9297              		.loc 1 3432 0
 9298 059d 4489C6   		movl	%r8d, %esi
 9299 05a0 4489CB   		movl	%r9d, %ebx
 9300              	.LVL1207:
 9301 05a3 4589C3   		movl	%r8d, %r11d
 9302 05a6 4429CE   		subl	%r9d, %esi
 9303 05a9 D1EE     		shrl	%esi
 9304 05ab 4801F6   		addq	%rsi, %rsi
 9305              	.LVL1208:
 9306              	.L1017:
3421:fltk-1.3.4-1/png/pngrutil.c ****                         do
 9307              		.loc 1 3421 0
 9308 05ae 4889D9   		movq	%rbx, %rcx
 9309              	.LVL1209:
 9310              		.p2align 4,,10
 9311 05b1 0F1F8000 		.p2align 3
 9311      000000
 9312              	.L1016:
3424:fltk-1.3.4-1/png/pngrutil.c ****                            c -= (sizeof (png_uint_16));
 9313              		.loc 1 3424 0 discriminator 1
 9314 05b8 4883C002 		addq	$2, %rax
 9315 05bc 0FB778FE 		movzwl	-2(%rax), %edi
 9316 05c0 4983C202 		addq	$2, %r10
 9317              	.LVL1210:
3427:fltk-1.3.4-1/png/pngrutil.c **** 
 9318              		.loc 1 3427 0 discriminator 1
 9319 05c4 4883E902 		subq	$2, %rcx
 9320              	.LVL1211:
3424:fltk-1.3.4-1/png/pngrutil.c ****                            c -= (sizeof (png_uint_16));
 9321              		.loc 1 3424 0 discriminator 1
 9322 05c8 6641897A 		movw	%di, -2(%r10)
 9322      FE
3427:fltk-1.3.4-1/png/pngrutil.c **** 
 9323              		.loc 1 3427 0 discriminator 1
 9324 05cd 75E9     		jne	.L1016
3429:fltk-1.3.4-1/png/pngrutil.c ****                            return;
 9325              		.loc 1 3429 0
 9326 05cf 4939D3   		cmpq	%rdx, %r11
 9327 05d2 0F8325FC 		jnb	.L970
 9327      FFFF
 9328              	.LVL1212:
3434:fltk-1.3.4-1/png/pngrutil.c ****                      }
 9329              		.loc 1 3434 0
 9330 05d8 4C29DA   		subq	%r11, %rdx
 9331              	.LVL1213:
3432:fltk-1.3.4-1/png/pngrutil.c ****                         sp16 += skip;
 9332              		.loc 1 3432 0
 9333 05db 4901F2   		addq	%rsi, %r10
 9334              	.LVL1214:
3433:fltk-1.3.4-1/png/pngrutil.c ****                         row_width -= bytes_to_jump;
 9335              		.loc 1 3433 0
 9336 05de 4801F0   		addq	%rsi, %rax
 9337              	.LVL1215:
 9338              	.LBE230:
3436:fltk-1.3.4-1/png/pngrutil.c **** 
 9339              		.loc 1 3436 0
 9340 05e1 4839D3   		cmpq	%rdx, %rbx
 9341 05e4 76C8     		jbe	.L1017
 9342 05e6 31C9     		xorl	%ecx, %ecx
 9343              	.LVL1216:
 9344              	.L1018:
3442:fltk-1.3.4-1/png/pngrutil.c ****                      while (--row_width > 0);
 9345              		.loc 1 3442 0 discriminator 1
 9346 05e8 0FB63408 		movzbl	(%rax,%rcx), %esi
 9347 05ec 4188340A 		movb	%sil, (%r10,%rcx)
 9348              	.LVL1217:
 9349 05f0 4883C101 		addq	$1, %rcx
 9350              	.LVL1218:
3443:fltk-1.3.4-1/png/pngrutil.c ****                      return;
 9351              		.loc 1 3443 0 discriminator 1
 9352 05f4 4839D1   		cmpq	%rdx, %rcx
 9353 05f7 75EF     		jne	.L1018
 9354 05f9 E9FFFBFF 		jmp	.L970
 9354      FF
 9355              	.LVL1219:
 9356              	.L1082:
 9357              	.LBE229:
3253:fltk-1.3.4-1/png/pngrutil.c **** 
 9358              		.loc 1 3253 0
 9359 05fe BE000000 		movl	$.LC95, %esi
 9359      00
 9360              	.LVL1220:
 9361 0603 E8000000 		call	png_error
 9361      00
 9362              	.LVL1221:
 9363              	.LBE233:
 9364              		.cfi_endproc
 9365              	.LFE94:
 9367              		.section	.text.unlikely.png_combine_row
 9368              	.LCOLDE96:
 9369              		.section	.text.png_combine_row
 9370              	.LHOTE96:
 9371              		.section	.text.unlikely.png_do_read_interlace,"ax",@progbits
 9372              	.LCOLDB97:
 9373              		.section	.text.png_do_read_interlace,"ax",@progbits
 9374              	.LHOTB97:
 9375              		.p2align 4,,15
 9376              		.globl	png_do_read_interlace
 9378              	png_do_read_interlace:
 9379              	.LFB95:
3488:fltk-1.3.4-1/png/pngrutil.c ****    /* Arrays to facilitate easy interlacing - use pass (0 - 6) as index */
 9380              		.loc 1 3488 0
 9381              		.cfi_startproc
 9382              	.LVL1222:
 9383 0000 4157     		pushq	%r15
 9384              		.cfi_def_cfa_offset 16
 9385              		.cfi_offset 15, -16
 9386 0002 4156     		pushq	%r14
 9387              		.cfi_def_cfa_offset 24
 9388              		.cfi_offset 14, -24
 9389 0004 4155     		pushq	%r13
 9390              		.cfi_def_cfa_offset 32
 9391              		.cfi_offset 13, -32
 9392 0006 4154     		pushq	%r12
 9393              		.cfi_def_cfa_offset 40
 9394              		.cfi_offset 12, -40
 9395 0008 55       		pushq	%rbp
 9396              		.cfi_def_cfa_offset 48
 9397              		.cfi_offset 6, -48
 9398 0009 53       		pushq	%rbx
 9399              		.cfi_def_cfa_offset 56
 9400              		.cfi_offset 3, -56
 9401 000a 4883EC48 		subq	$72, %rsp
 9402              		.cfi_def_cfa_offset 128
3488:fltk-1.3.4-1/png/pngrutil.c ****    /* Arrays to facilitate easy interlacing - use pass (0 - 6) as index */
 9403              		.loc 1 3488 0
 9404 000e 64488B1C 		movq	%fs:40, %rbx
 9404      25280000 
 9404      00
 9405 0017 48895C24 		movq	%rbx, 56(%rsp)
 9405      38
 9406 001c 31DB     		xorl	%ebx, %ebx
3494:fltk-1.3.4-1/png/pngrutil.c ****    {
 9407              		.loc 1 3494 0
 9408 001e 4885F6   		testq	%rsi, %rsi
3488:fltk-1.3.4-1/png/pngrutil.c ****    /* Arrays to facilitate easy interlacing - use pass (0 - 6) as index */
 9409              		.loc 1 3488 0
 9410 0021 48893C24 		movq	%rdi, (%rsp)
3494:fltk-1.3.4-1/png/pngrutil.c ****    {
 9411              		.loc 1 3494 0
 9412 0025 0F845901 		je	.L1087
 9412      0000
 9413 002b 4885FF   		testq	%rdi, %rdi
 9414 002e 4889F8   		movq	%rdi, %rax
 9415 0031 0F844D01 		je	.L1087
 9415      0000
 9416              	.LBB234:
3498:fltk-1.3.4-1/png/pngrutil.c **** 
 9417              		.loc 1 3498 0
 9418 0037 448B07   		movl	(%rdi), %r8d
 9419 003a 4863D2   		movslq	%edx, %rdx
3500:fltk-1.3.4-1/png/pngrutil.c ****       {
 9420              		.loc 1 3500 0
 9421 003d 0FB64013 		movzbl	19(%rax), %eax
3498:fltk-1.3.4-1/png/pngrutil.c **** 
 9422              		.loc 1 3498 0
 9423 0041 8B1C9500 		movl	png_pass_inc.7163(,%rdx,4), %ebx
 9423      000000
 9424 0048 4489C7   		movl	%r8d, %edi
 9425              	.LVL1223:
 9426 004b 0FAFFB   		imull	%ebx, %edi
3500:fltk-1.3.4-1/png/pngrutil.c ****       {
 9427              		.loc 1 3500 0
 9428 004e 3C02     		cmpb	$2, %al
3498:fltk-1.3.4-1/png/pngrutil.c **** 
 9429              		.loc 1 3498 0
 9430 0050 897C2424 		movl	%edi, 36(%rsp)
 9431              	.LVL1224:
3500:fltk-1.3.4-1/png/pngrutil.c ****       {
 9432              		.loc 1 3500 0
 9433 0054 0F847001 		je	.L1090
 9433      0000
 9434 005a 3C04     		cmpb	$4, %al
 9435 005c 0F84C703 		je	.L1091
 9435      0000
 9436 0062 3C01     		cmpb	$1, %al
 9437 0064 0F84DE02 		je	.L1170
 9437      0000
 9438              	.LBB235:
3691:fltk-1.3.4-1/png/pngrutil.c **** 
 9439              		.loc 1 3691 0
 9440 006a 89C5     		movl	%eax, %ebp
3693:fltk-1.3.4-1/png/pngrutil.c ****                 * pixel_bytes;
 9441              		.loc 1 3693 0
 9442 006c 418D50FF 		leal	-1(%r8), %edx
 9443              	.LVL1225:
3691:fltk-1.3.4-1/png/pngrutil.c **** 
 9444              		.loc 1 3691 0
 9445 0070 40C0ED03 		shrb	$3, %bpl
 9446 0074 400FB6ED 		movzbl	%bpl, %ebp
 9447              	.LVL1226:
3693:fltk-1.3.4-1/png/pngrutil.c ****                 * pixel_bytes;
 9448              		.loc 1 3693 0
 9449 0078 480FAFD5 		imulq	%rbp, %rdx
 9450 007c 488D3C16 		leaq	(%rsi,%rdx), %rdi
 9451              	.LVL1227:
 9452 0080 48897C24 		movq	%rdi, 16(%rsp)
 9452      10
 9453              	.LVL1228:
3696:fltk-1.3.4-1/png/pngrutil.c **** 
 9454              		.loc 1 3696 0
 9455 0085 8B7C2424 		movl	36(%rsp), %edi
 9456              	.LVL1229:
 9457 0089 8D57FF   		leal	-1(%rdi), %edx
 9458 008c 480FAFD5 		imulq	%rbp, %rdx
 9459 0090 4801D6   		addq	%rdx, %rsi
 9460              	.LVL1230:
3701:fltk-1.3.4-1/png/pngrutil.c ****             {
 9461              		.loc 1 3701 0
 9462 0093 4585C0   		testl	%r8d, %r8d
3696:fltk-1.3.4-1/png/pngrutil.c **** 
 9463              		.loc 1 3696 0
 9464 0096 48897424 		movq	%rsi, 24(%rsp)
 9464      18
 9465              	.LVL1231:
3701:fltk-1.3.4-1/png/pngrutil.c ****             {
 9466              		.loc 1 3701 0
 9467 009b 0F84C100 		je	.L1103
 9467      0000
 9468 00a1 8D43FF   		leal	-1(%rbx), %eax
 9469 00a4 4989EC   		movq	%rbp, %r12
 9470 00a7 4C8D4424 		leaq	48(%rsp), %r8
 9470      30
 9471 00ac 49F7DC   		negq	%r12
 9472              	.LBB236:
 9473              	.LBB237:
 9474              	.LBB238:
 9475              		.loc 2 53 0
 9476 00af 4189ED   		movl	%ebp, %r13d
 9477 00b2 4189EF   		movl	%ebp, %r15d
 9478 00b5 4883C001 		addq	$1, %rax
 9479 00b9 4F8D3428 		leaq	(%r8,%r13), %r14
 9480              	.LBE238:
 9481              	.LBE237:
 9482              	.LBE236:
3701:fltk-1.3.4-1/png/pngrutil.c ****             {
 9483              		.loc 1 3701 0
 9484 00bd 4531DB   		xorl	%r11d, %r11d
 9485 00c0 490FAFC4 		imulq	%r12, %rax
 9486              	.LBB251:
 9487              	.LBB243:
 9488              	.LBB239:
 9489              		.loc 2 53 0
 9490 00c4 4183E704 		andl	$4, %r15d
 9491 00c8 48894424 		movq	%rax, 40(%rsp)
 9491      28
 9492 00cd 89E8     		movl	%ebp, %eax
 9493 00cf 83E002   		andl	$2, %eax
 9494 00d2 89442420 		movl	%eax, 32(%rsp)
 9495              	.LVL1232:
 9496 00d6 662E0F1F 		.p2align 4,,10
 9496      84000000 
 9496      0000
 9497              		.p2align 3
 9498              	.L1131:
 9499              	.LBE239:
 9500              	.LBE243:
 9501              	.LBB244:
 9502              	.LBB245:
 9503 00e0 488B7424 		movq	16(%rsp), %rsi
 9503      10
 9504 00e5 4C89C7   		movq	%r8, %rdi
 9505 00e8 B9080000 		movl	$8, %ecx
 9505      00
 9506 00ed 4889EA   		movq	%rbp, %rdx
 9507 00f0 44895C24 		movl	%r11d, 8(%rsp)
 9507      08
 9508              	.LVL1233:
 9509 00f5 E8000000 		call	__memcpy_chk
 9509      00
 9510              	.LVL1234:
 9511              	.LBE245:
 9512              	.LBE244:
3708:fltk-1.3.4-1/png/pngrutil.c ****                {
 9513              		.loc 1 3708 0
 9514 00fa 85DB     		testl	%ebx, %ebx
 9515              	.LBB247:
 9516              	.LBB246:
 9517              		.loc 2 53 0
 9518 00fc 4989C0   		movq	%rax, %r8
 9519              	.LVL1235:
 9520              	.LBE246:
 9521              	.LBE247:
3708:fltk-1.3.4-1/png/pngrutil.c ****                {
 9522              		.loc 1 3708 0
 9523 00ff 448B5C24 		movl	8(%rsp), %r11d
 9523      08
 9524 0104 7E46     		jle	.L1123
 9525 0106 488B5424 		movq	24(%rsp), %rdx
 9525      18
 9526 010b 31F6     		xorl	%esi, %esi
 9527              	.LVL1236:
 9528 010d 0F1F00   		.p2align 4,,10
 9529              		.p2align 3
 9530              	.L1130:
 9531              	.LBB248:
 9532              	.LBB240:
 9533              		.loc 2 53 0
 9534 0110 83FD08   		cmpl	$8, %ebp
 9535 0113 0F839701 		jnb	.L1124
 9535      0000
 9536 0119 4585FF   		testl	%r15d, %r15d
 9537 011c 0F85EE01 		jne	.L1171
 9537      0000
 9538 0122 85ED     		testl	%ebp, %ebp
 9539 0124 7412     		je	.L1125
 9540 0126 410FB600 		movzbl	(%r8), %eax
 9541 012a 8802     		movb	%al, (%rdx)
 9542 012c 8B442420 		movl	32(%rsp), %eax
 9543 0130 85C0     		testl	%eax, %eax
 9544 0132 0F850002 		jne	.L1172
 9544      0000
 9545              	.LVL1237:
 9546              	.L1125:
 9547              	.LBE240:
 9548              	.LBE248:
3708:fltk-1.3.4-1/png/pngrutil.c ****                {
 9549              		.loc 1 3708 0
 9550 0138 83C601   		addl	$1, %esi
 9551              	.LVL1238:
3711:fltk-1.3.4-1/png/pngrutil.c ****                }
 9552              		.loc 1 3711 0
 9553 013b 4C01E2   		addq	%r12, %rdx
 9554              	.LVL1239:
3708:fltk-1.3.4-1/png/pngrutil.c ****                {
 9555              		.loc 1 3708 0
 9556 013e 39F3     		cmpl	%esi, %ebx
 9557 0140 75CE     		jne	.L1130
 9558 0142 488B7424 		movq	40(%rsp), %rsi
 9558      28
 9559              	.LVL1240:
 9560 0147 48017424 		addq	%rsi, 24(%rsp)
 9560      18
 9561              	.LVL1241:
 9562              	.L1123:
 9563              	.LBE251:
3701:fltk-1.3.4-1/png/pngrutil.c ****             {
 9564              		.loc 1 3701 0 discriminator 2
 9565 014c 488B0424 		movq	(%rsp), %rax
 9566              	.LBB252:
3714:fltk-1.3.4-1/png/pngrutil.c ****             }
 9567              		.loc 1 3714 0 discriminator 2
 9568 0150 4C016424 		addq	%r12, 16(%rsp)
 9568      10
 9569              	.LVL1242:
 9570              	.LBE252:
3701:fltk-1.3.4-1/png/pngrutil.c ****             {
 9571              		.loc 1 3701 0 discriminator 2
 9572 0155 4183C301 		addl	$1, %r11d
 9573              	.LVL1243:
 9574 0159 443918   		cmpl	%r11d, (%rax)
 9575 015c 7782     		ja	.L1131
 9576 015e 0FB64013 		movzbl	19(%rax), %eax
 9577              	.LVL1244:
 9578              	.L1103:
 9579              	.LBE235:
3720:fltk-1.3.4-1/png/pngrutil.c ****       row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth, final_width);
 9580              		.loc 1 3720 0
 9581 0162 488B3424 		movq	(%rsp), %rsi
 9582 0166 8B5C2424 		movl	36(%rsp), %ebx
3721:fltk-1.3.4-1/png/pngrutil.c ****    }
 9583              		.loc 1 3721 0
 9584 016a 3C07     		cmpb	$7, %al
3720:fltk-1.3.4-1/png/pngrutil.c ****       row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth, final_width);
 9585              		.loc 1 3720 0
 9586 016c 891E     		movl	%ebx, (%rsi)
3721:fltk-1.3.4-1/png/pngrutil.c ****    }
 9587              		.loc 1 3721 0
 9588 016e 7648     		jbe	.L1132
3721:fltk-1.3.4-1/png/pngrutil.c ****    }
 9589              		.loc 1 3721 0 is_stmt 0 discriminator 1
 9590 0170 C0E803   		shrb	$3, %al
 9591 0173 89DA     		movl	%ebx, %edx
 9592 0175 0FB6C0   		movzbl	%al, %eax
 9593 0178 480FAFC2 		imulq	%rdx, %rax
 9594              	.L1133:
3721:fltk-1.3.4-1/png/pngrutil.c ****    }
 9595              		.loc 1 3721 0 discriminator 4
 9596 017c 488B1C24 		movq	(%rsp), %rbx
 9597 0180 48894308 		movq	%rax, 8(%rbx)
 9598              	.L1087:
 9599              	.LBE234:
3726:fltk-1.3.4-1/png/pngrutil.c **** #endif /* READ_INTERLACING */
 9600              		.loc 1 3726 0 is_stmt 1
 9601 0184 488B4424 		movq	56(%rsp), %rax
 9601      38
 9602 0189 64483304 		xorq	%fs:40, %rax
 9602      25280000 
 9602      00
 9603 0192 0F850904 		jne	.L1173
 9603      0000
 9604 0198 4883C448 		addq	$72, %rsp
 9605              		.cfi_remember_state
 9606              		.cfi_def_cfa_offset 56
 9607 019c 5B       		popq	%rbx
 9608              		.cfi_def_cfa_offset 48
 9609 019d 5D       		popq	%rbp
 9610              		.cfi_def_cfa_offset 40
 9611 019e 415C     		popq	%r12
 9612              		.cfi_def_cfa_offset 32
 9613 01a0 415D     		popq	%r13
 9614              		.cfi_def_cfa_offset 24
 9615 01a2 415E     		popq	%r14
 9616              		.cfi_def_cfa_offset 16
 9617 01a4 415F     		popq	%r15
 9618              		.cfi_def_cfa_offset 8
 9619 01a6 C3       		ret
 9620              	.LVL1245:
 9621              	.L1095:
 9622              		.cfi_restore_state
 9623              	.LBB279:
3720:fltk-1.3.4-1/png/pngrutil.c ****       row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth, final_width);
 9624              		.loc 1 3720 0
 9625 01a7 488B1C24 		movq	(%rsp), %rbx
 9626 01ab 8B742424 		movl	36(%rsp), %esi
 9627 01af 8933     		movl	%esi, (%rbx)
 9628              	.LVL1246:
 9629              		.p2align 4,,10
 9630 01b1 0F1F8000 		.p2align 3
 9630      000000
 9631              	.L1132:
3721:fltk-1.3.4-1/png/pngrutil.c ****    }
 9632              		.loc 1 3721 0 discriminator 2
 9633 01b8 8B542424 		movl	36(%rsp), %edx
 9634 01bc 480FAFC2 		imulq	%rdx, %rax
 9635 01c0 4883C007 		addq	$7, %rax
 9636 01c4 48C1E803 		shrq	$3, %rax
 9637 01c8 EBB2     		jmp	.L1133
 9638              	.LVL1247:
 9639              	.L1090:
 9640              	.LBB255:
3567:fltk-1.3.4-1/png/pngrutil.c ****             int sshift, dshift;
 9641              		.loc 1 3567 0
 9642 01ca 8B542424 		movl	36(%rsp), %edx
3566:fltk-1.3.4-1/png/pngrutil.c ****             png_bytep dp = row + (png_uint_32)((final_width - 1) >> 2);
 9643              		.loc 1 3566 0
 9644 01ce 458D68FF 		leal	-1(%r8), %r13d
 9645 01d2 41C1ED02 		shrl	$2, %r13d
3567:fltk-1.3.4-1/png/pngrutil.c ****             int sshift, dshift;
 9646              		.loc 1 3567 0
 9647 01d6 89D7     		movl	%edx, %edi
 9648              	.LVL1248:
3566:fltk-1.3.4-1/png/pngrutil.c ****             png_bytep dp = row + (png_uint_32)((final_width - 1) >> 2);
 9649              		.loc 1 3566 0
 9650 01d8 4901F5   		addq	%rsi, %r13
 9651              	.LVL1249:
3567:fltk-1.3.4-1/png/pngrutil.c ****             int sshift, dshift;
 9652              		.loc 1 3567 0
 9653 01db 83EF01   		subl	$1, %edi
 9654 01de C1EF02   		shrl	$2, %edi
 9655 01e1 4801F7   		addq	%rsi, %rdi
 9656              	.LVL1250:
3574:fltk-1.3.4-1/png/pngrutil.c ****             {
 9657              		.loc 1 3574 0
 9658 01e4 81E10000 		andl	$65536, %ecx
 9658      0100
 9659              	.LVL1251:
 9660 01ea 0F848403 		je	.L1104
 9660      0000
3576:fltk-1.3.4-1/png/pngrutil.c ****                dshift = (int)(((final_width + 3) & 0x03) << 1);
 9661              		.loc 1 3576 0
 9662 01f0 438D6C00 		leal	6(%r8,%r8), %ebp
 9662      06
3577:fltk-1.3.4-1/png/pngrutil.c ****                s_start = 6;
 9663              		.loc 1 3577 0
 9664 01f5 8D541206 		leal	6(%rdx,%rdx), %edx
3580:fltk-1.3.4-1/png/pngrutil.c ****             }
 9665              		.loc 1 3580 0
 9666 01f9 41BBFEFF 		movl	$-2, %r11d
 9666      FFFF
3579:fltk-1.3.4-1/png/pngrutil.c ****                s_inc = -2;
 9667              		.loc 1 3579 0
 9668 01ff 4531C9   		xorl	%r9d, %r9d
3578:fltk-1.3.4-1/png/pngrutil.c ****                s_end = 0;
 9669              		.loc 1 3578 0
 9670 0202 41BC0600 		movl	$6, %r12d
 9670      0000
3576:fltk-1.3.4-1/png/pngrutil.c ****                dshift = (int)(((final_width + 3) & 0x03) << 1);
 9671              		.loc 1 3576 0
 9672 0208 83E506   		andl	$6, %ebp
 9673              	.LVL1252:
3577:fltk-1.3.4-1/png/pngrutil.c ****                s_start = 6;
 9674              		.loc 1 3577 0
 9675 020b 83E206   		andl	$6, %edx
 9676              	.LVL1253:
 9677              	.L1105:
3593:fltk-1.3.4-1/png/pngrutil.c ****             {
 9678              		.loc 1 3593 0
 9679 020e 4585C0   		testl	%r8d, %r8d
 9680 0211 7494     		je	.L1095
 9681 0213 4531FF   		xorl	%r15d, %r15d
 9682              	.LBB256:
 9683              	.LBB257:
3601:fltk-1.3.4-1/png/pngrutil.c ****                   tmp |= v << dshift;
 9684              		.loc 1 3601 0
 9685 0216 41BE0600 		movl	$6, %r14d
 9685      0000
 9686 021c 41BA3F3F 		movl	$16191, %r10d
 9686      0000
 9687              	.LVL1254:
 9688              		.p2align 4,,10
 9689 0222 660F1F44 		.p2align 3
 9689      0000
 9690              	.L1112:
 9691              	.LBE257:
3598:fltk-1.3.4-1/png/pngrutil.c ****                for (j = 0; j < jstop; j++)
 9692              		.loc 1 3598 0
 9693 0228 450FB645 		movzbl	0(%r13), %r8d
 9693      00
 9694 022d 89E9     		movl	%ebp, %ecx
 9695 022f 41D3F8   		sarl	%cl, %r8d
 9696 0232 4183E003 		andl	$3, %r8d
 9697              	.LVL1255:
3599:fltk-1.3.4-1/png/pngrutil.c ****                {
 9698              		.loc 1 3599 0
 9699 0236 85DB     		testl	%ebx, %ebx
 9700 0238 7E53     		jle	.L1106
 9701 023a 450FB6C0 		movzbl	%r8b, %r8d
 9702 023e 31F6     		xorl	%esi, %esi
 9703 0240 896C2408 		movl	%ebp, 8(%rsp)
 9704 0244 EB14     		jmp	.L1109
 9705              	.LVL1256:
 9706 0246 662E0F1F 		.p2align 4,,10
 9706      84000000 
 9706      0000
 9707              		.p2align 3
 9708              	.L1107:
 9709 0250 83C601   		addl	$1, %esi
 9710              	.LVL1257:
 9711              	.LBB258:
3612:fltk-1.3.4-1/png/pngrutil.c ****                }
 9712              		.loc 1 3612 0
 9713 0253 4401DA   		addl	%r11d, %edx
 9714              	.LVL1258:
 9715              	.LBE258:
3599:fltk-1.3.4-1/png/pngrutil.c ****                {
 9716              		.loc 1 3599 0
 9717 0256 39F3     		cmpl	%esi, %ebx
 9718 0258 742F     		je	.L1174
 9719              	.LVL1259:
 9720              	.L1109:
 9721              	.LBB259:
3601:fltk-1.3.4-1/png/pngrutil.c ****                   tmp |= v << dshift;
 9722              		.loc 1 3601 0
 9723 025a 4489F1   		movl	%r14d, %ecx
 9724 025d 4489D0   		movl	%r10d, %eax
3603:fltk-1.3.4-1/png/pngrutil.c **** 
 9725              		.loc 1 3603 0
 9726 0260 4489C5   		movl	%r8d, %ebp
3601:fltk-1.3.4-1/png/pngrutil.c ****                   tmp |= v << dshift;
 9727              		.loc 1 3601 0
 9728 0263 29D1     		subl	%edx, %ecx
 9729 0265 D3F8     		sarl	%cl, %eax
 9730 0267 89C1     		movl	%eax, %ecx
 9731 0269 0FB607   		movzbl	(%rdi), %eax
 9732 026c 21C8     		andl	%ecx, %eax
 9733              	.LVL1260:
3603:fltk-1.3.4-1/png/pngrutil.c **** 
 9734              		.loc 1 3603 0
 9735 026e 89D1     		movl	%edx, %ecx
 9736 0270 D3E5     		sall	%cl, %ebp
 9737              	.LVL1261:
 9738 0272 09E8     		orl	%ebp, %eax
 9739              	.LVL1262:
3605:fltk-1.3.4-1/png/pngrutil.c ****                   {
 9740              		.loc 1 3605 0
 9741 0274 4139D1   		cmpl	%edx, %r9d
3603:fltk-1.3.4-1/png/pngrutil.c **** 
 9742              		.loc 1 3603 0
 9743 0277 8807     		movb	%al, (%rdi)
 9744              	.LVL1263:
3605:fltk-1.3.4-1/png/pngrutil.c ****                   {
 9745              		.loc 1 3605 0
 9746 0279 75D5     		jne	.L1107
 9747              	.LVL1264:
 9748              	.LBE259:
3599:fltk-1.3.4-1/png/pngrutil.c ****                {
 9749              		.loc 1 3599 0
 9750 027b 83C601   		addl	$1, %esi
 9751              	.LVL1265:
 9752              	.LBB260:
3608:fltk-1.3.4-1/png/pngrutil.c ****                   }
 9753              		.loc 1 3608 0
 9754 027e 4883EF01 		subq	$1, %rdi
 9755              	.LVL1266:
3607:fltk-1.3.4-1/png/pngrutil.c ****                      dp--;
 9756              		.loc 1 3607 0
 9757 0282 4489E2   		movl	%r12d, %edx
 9758              	.LVL1267:
 9759              	.LBE260:
3599:fltk-1.3.4-1/png/pngrutil.c ****                {
 9760              		.loc 1 3599 0
 9761 0285 39F3     		cmpl	%esi, %ebx
 9762 0287 75D1     		jne	.L1109
 9763              	.LVL1268:
 9764              	.L1174:
 9765 0289 8B6C2408 		movl	8(%rsp), %ebp
 9766              	.LVL1269:
 9767              	.L1106:
3615:fltk-1.3.4-1/png/pngrutil.c ****                {
 9768              		.loc 1 3615 0
 9769 028d 4139E9   		cmpl	%ebp, %r9d
 9770 0290 0F849200 		je	.L1175
 9770      0000
3622:fltk-1.3.4-1/png/pngrutil.c ****             }
 9771              		.loc 1 3622 0
 9772 0296 4401DD   		addl	%r11d, %ebp
 9773              	.LVL1270:
 9774              	.L1111:
 9775              	.LBE256:
3593:fltk-1.3.4-1/png/pngrutil.c ****             {
 9776              		.loc 1 3593 0 discriminator 2
 9777 0299 488B0424 		movq	(%rsp), %rax
 9778 029d 4183C701 		addl	$1, %r15d
 9779              	.LVL1271:
 9780 02a1 443938   		cmpl	%r15d, (%rax)
 9781 02a4 7782     		ja	.L1112
 9782 02a6 0FB64013 		movzbl	19(%rax), %eax
 9783 02aa E9B3FEFF 		jmp	.L1103
 9783      FF
 9784              	.LVL1272:
 9785 02af 90       		.p2align 4,,10
 9786              		.p2align 3
 9787              	.L1124:
 9788              	.LBE255:
 9789              	.LBB262:
 9790              	.LBB253:
 9791              	.LBB249:
 9792              	.LBB241:
 9793              		.loc 2 53 0
 9794 02b0 498B00   		movq	(%r8), %rax
 9795 02b3 488D4A08 		leaq	8(%rdx), %rcx
 9796 02b7 4D89C2   		movq	%r8, %r10
 9797 02ba 4883E1F8 		andq	$-8, %rcx
 9798 02be 488902   		movq	%rax, (%rdx)
 9799 02c1 498B46F8 		movq	-8(%r14), %rax
 9800 02c5 4A89442A 		movq	%rax, -8(%rdx,%r13)
 9800      F8
 9801 02ca 4889D0   		movq	%rdx, %rax
 9802 02cd 4829C8   		subq	%rcx, %rax
 9803 02d0 4929C2   		subq	%rax, %r10
 9804 02d3 01E8     		addl	%ebp, %eax
 9805 02d5 83E0F8   		andl	$-8, %eax
 9806 02d8 83F808   		cmpl	$8, %eax
 9807 02db 0F8257FE 		jb	.L1125
 9807      FFFF
 9808 02e1 83E0F8   		andl	$-8, %eax
 9809 02e4 31FF     		xorl	%edi, %edi
 9810 02e6 48895424 		movq	%rdx, 8(%rsp)
 9810      08
 9811              	.LVL1273:
 9812              	.L1128:
 9813 02eb 4189F9   		movl	%edi, %r9d
 9814 02ee 83C708   		addl	$8, %edi
 9815 02f1 4B8B140A 		movq	(%r10,%r9), %rdx
 9816 02f5 39C7     		cmpl	%eax, %edi
 9817 02f7 4A891409 		movq	%rdx, (%rcx,%r9)
 9818 02fb 72EE     		jb	.L1128
 9819 02fd 488B5424 		movq	8(%rsp), %rdx
 9819      08
 9820 0302 E931FEFF 		jmp	.L1125
 9820      FF
 9821              	.LVL1274:
 9822 0307 660F1F84 		.p2align 4,,10
 9822      00000000 
 9822      00
 9823              		.p2align 3
 9824              	.L1171:
 9825 0310 418B00   		movl	(%r8), %eax
 9826 0313 8902     		movl	%eax, (%rdx)
 9827 0315 418B46FC 		movl	-4(%r14), %eax
 9828 0319 4289442A 		movl	%eax, -4(%rdx,%r13)
 9828      FC
 9829 031e E915FEFF 		jmp	.L1125
 9829      FF
 9830              	.LVL1275:
 9831              		.p2align 4,,10
 9832 0323 0F1F4400 		.p2align 3
 9832      00
 9833              	.L1175:
 9834              	.LBE241:
 9835              	.LBE249:
 9836              	.LBE253:
 9837              	.LBE262:
 9838              	.LBB263:
 9839              	.LBB261:
3618:fltk-1.3.4-1/png/pngrutil.c ****                }
 9840              		.loc 1 3618 0
 9841 0328 4983ED01 		subq	$1, %r13
 9842              	.LVL1276:
3617:fltk-1.3.4-1/png/pngrutil.c ****                   sp--;
 9843              		.loc 1 3617 0
 9844 032c 4489E5   		movl	%r12d, %ebp
 9845 032f E965FFFF 		jmp	.L1111
 9845      FF
 9846              	.LVL1277:
 9847              		.p2align 4,,10
 9848 0334 0F1F4000 		.p2align 3
 9849              	.L1172:
 9850              	.LBE261:
 9851              	.LBE263:
 9852              	.LBB264:
 9853              	.LBB254:
 9854              	.LBB250:
 9855              	.LBB242:
 9856              		.loc 2 53 0
 9857 0338 410FB746 		movzwl	-2(%r14), %eax
 9857      FE
 9858 033d 66428944 		movw	%ax, -2(%rdx,%r13)
 9858      2AFE
 9859 0343 E9F0FDFF 		jmp	.L1125
 9859      FF
 9860              	.LVL1278:
 9861              	.L1170:
 9862              	.LBE242:
 9863              	.LBE250:
 9864              	.LBE254:
 9865              	.LBE264:
 9866              	.LBB265:
3504:fltk-1.3.4-1/png/pngrutil.c ****             png_bytep dp = row + (png_size_t)((final_width - 1) >> 3);
 9867              		.loc 1 3504 0
 9868 0348 458D68FF 		leal	-1(%r8), %r13d
3505:fltk-1.3.4-1/png/pngrutil.c ****             int sshift, dshift;
 9869              		.loc 1 3505 0
 9870 034c 89FA     		movl	%edi, %edx
 9871 034e 83EF01   		subl	$1, %edi
 9872              	.LVL1279:
 9873 0351 C1EF03   		shrl	$3, %edi
3516:fltk-1.3.4-1/png/pngrutil.c ****                 dshift = (int)((final_width + 7) & 0x07);
 9874              		.loc 1 3516 0
 9875 0354 418D6807 		leal	7(%r8), %ebp
3504:fltk-1.3.4-1/png/pngrutil.c ****             png_bytep dp = row + (png_size_t)((final_width - 1) >> 3);
 9876              		.loc 1 3504 0
 9877 0358 41C1ED03 		shrl	$3, %r13d
3505:fltk-1.3.4-1/png/pngrutil.c ****             int sshift, dshift;
 9878              		.loc 1 3505 0
 9879 035c 4801F7   		addq	%rsi, %rdi
3504:fltk-1.3.4-1/png/pngrutil.c ****             png_bytep dp = row + (png_size_t)((final_width - 1) >> 3);
 9880              		.loc 1 3504 0
 9881 035f 4901F5   		addq	%rsi, %r13
 9882              	.LVL1280:
3514:fltk-1.3.4-1/png/pngrutil.c ****             {
 9883              		.loc 1 3514 0
 9884 0362 81E10000 		andl	$65536, %ecx
 9884      0100
 9885              	.LVL1281:
 9886 0368 0F84E101 		je	.L1093
 9886      0000
 9887              	.LVL1282:
3517:fltk-1.3.4-1/png/pngrutil.c ****                 s_start = 7;
 9888              		.loc 1 3517 0
 9889 036e 8D5207   		leal	7(%rdx), %edx
 9890              	.LVL1283:
3516:fltk-1.3.4-1/png/pngrutil.c ****                 dshift = (int)((final_width + 7) & 0x07);
 9891              		.loc 1 3516 0
 9892 0371 83E507   		andl	$7, %ebp
 9893              	.LVL1284:
3520:fltk-1.3.4-1/png/pngrutil.c ****             }
 9894              		.loc 1 3520 0
 9895 0374 41BBFFFF 		movl	$-1, %r11d
 9895      FFFF
3519:fltk-1.3.4-1/png/pngrutil.c ****                 s_inc = -1;
 9896              		.loc 1 3519 0
 9897 037a 4531C9   		xorl	%r9d, %r9d
3518:fltk-1.3.4-1/png/pngrutil.c ****                 s_end = 0;
 9898              		.loc 1 3518 0
 9899 037d 41BC0700 		movl	$7, %r12d
 9899      0000
3517:fltk-1.3.4-1/png/pngrutil.c ****                 s_start = 7;
 9900              		.loc 1 3517 0
 9901 0383 83E207   		andl	$7, %edx
 9902              	.LVL1285:
 9903              	.L1094:
3533:fltk-1.3.4-1/png/pngrutil.c ****             {
 9904              		.loc 1 3533 0
 9905 0386 4585C0   		testl	%r8d, %r8d
 9906 0389 0F8418FE 		je	.L1095
 9906      FFFF
 9907 038f 4531FF   		xorl	%r15d, %r15d
 9908              	.LBB266:
3538:fltk-1.3.4-1/png/pngrutil.c ****                   tmp |= v << dshift;
 9909              		.loc 1 3538 0
 9910 0392 41BE0700 		movl	$7, %r14d
 9910      0000
 9911 0398 41BA7F7F 		movl	$32639, %r10d
 9911      0000
 9912              	.LVL1286:
 9913 039e 6690     		.p2align 4,,10
 9914              		.p2align 3
 9915              	.L1102:
 9916              	.LBE266:
3535:fltk-1.3.4-1/png/pngrutil.c ****                for (j = 0; j < jstop; j++)
 9917              		.loc 1 3535 0
 9918 03a0 450FB645 		movzbl	0(%r13), %r8d
 9918      00
 9919 03a5 89E9     		movl	%ebp, %ecx
 9920 03a7 41D3F8   		sarl	%cl, %r8d
 9921 03aa 4183E001 		andl	$1, %r8d
 9922              	.LVL1287:
3536:fltk-1.3.4-1/png/pngrutil.c ****                {
 9923              		.loc 1 3536 0
 9924 03ae 85DB     		testl	%ebx, %ebx
 9925 03b0 7E4B     		jle	.L1096
 9926 03b2 450FB6C0 		movzbl	%r8b, %r8d
 9927 03b6 31F6     		xorl	%esi, %esi
 9928 03b8 896C2408 		movl	%ebp, 8(%rsp)
 9929 03bc EB0C     		jmp	.L1099
 9930              	.LVL1288:
 9931 03be 6690     		.p2align 4,,10
 9932              		.p2align 3
 9933              	.L1097:
 9934 03c0 83C601   		addl	$1, %esi
 9935              	.LVL1289:
 9936              	.LBB267:
3549:fltk-1.3.4-1/png/pngrutil.c ****                }
 9937              		.loc 1 3549 0
 9938 03c3 4401DA   		addl	%r11d, %edx
 9939              	.LVL1290:
 9940              	.LBE267:
3536:fltk-1.3.4-1/png/pngrutil.c ****                {
 9941              		.loc 1 3536 0
 9942 03c6 39F3     		cmpl	%esi, %ebx
 9943 03c8 742F     		je	.L1176
 9944              	.LVL1291:
 9945              	.L1099:
 9946              	.LBB268:
3538:fltk-1.3.4-1/png/pngrutil.c ****                   tmp |= v << dshift;
 9947              		.loc 1 3538 0
 9948 03ca 4489F1   		movl	%r14d, %ecx
 9949 03cd 4489D0   		movl	%r10d, %eax
3540:fltk-1.3.4-1/png/pngrutil.c **** 
 9950              		.loc 1 3540 0
 9951 03d0 4489C5   		movl	%r8d, %ebp
3538:fltk-1.3.4-1/png/pngrutil.c ****                   tmp |= v << dshift;
 9952              		.loc 1 3538 0
 9953 03d3 29D1     		subl	%edx, %ecx
 9954 03d5 D3F8     		sarl	%cl, %eax
 9955 03d7 89C1     		movl	%eax, %ecx
 9956 03d9 0FB607   		movzbl	(%rdi), %eax
 9957 03dc 21C8     		andl	%ecx, %eax
 9958              	.LVL1292:
3540:fltk-1.3.4-1/png/pngrutil.c **** 
 9959              		.loc 1 3540 0
 9960 03de 89D1     		movl	%edx, %ecx
 9961 03e0 D3E5     		sall	%cl, %ebp
 9962              	.LVL1293:
 9963 03e2 09E8     		orl	%ebp, %eax
 9964              	.LVL1294:
3542:fltk-1.3.4-1/png/pngrutil.c ****                   {
 9965              		.loc 1 3542 0
 9966 03e4 4139D1   		cmpl	%edx, %r9d
3540:fltk-1.3.4-1/png/pngrutil.c **** 
 9967              		.loc 1 3540 0
 9968 03e7 8807     		movb	%al, (%rdi)
 9969              	.LVL1295:
3542:fltk-1.3.4-1/png/pngrutil.c ****                   {
 9970              		.loc 1 3542 0
 9971 03e9 75D5     		jne	.L1097
 9972              	.LVL1296:
 9973              	.LBE268:
3536:fltk-1.3.4-1/png/pngrutil.c ****                {
 9974              		.loc 1 3536 0
 9975 03eb 83C601   		addl	$1, %esi
 9976              	.LVL1297:
 9977              	.LBB269:
3545:fltk-1.3.4-1/png/pngrutil.c ****                   }
 9978              		.loc 1 3545 0
 9979 03ee 4883EF01 		subq	$1, %rdi
 9980              	.LVL1298:
3544:fltk-1.3.4-1/png/pngrutil.c ****                      dp--;
 9981              		.loc 1 3544 0
 9982 03f2 4489E2   		movl	%r12d, %edx
 9983              	.LVL1299:
 9984              	.LBE269:
3536:fltk-1.3.4-1/png/pngrutil.c ****                {
 9985              		.loc 1 3536 0
 9986 03f5 39F3     		cmpl	%esi, %ebx
 9987 03f7 75D1     		jne	.L1099
 9988              	.LVL1300:
 9989              	.L1176:
 9990 03f9 8B6C2408 		movl	8(%rsp), %ebp
 9991              	.LVL1301:
 9992              	.L1096:
3552:fltk-1.3.4-1/png/pngrutil.c ****                {
 9993              		.loc 1 3552 0
 9994 03fd 4139E9   		cmpl	%ebp, %r9d
 9995 0400 741E     		je	.L1177
3559:fltk-1.3.4-1/png/pngrutil.c ****             }
 9996              		.loc 1 3559 0
 9997 0402 4401DD   		addl	%r11d, %ebp
 9998              	.LVL1302:
 9999              	.L1101:
3533:fltk-1.3.4-1/png/pngrutil.c ****             {
 10000              		.loc 1 3533 0 discriminator 2
 10001 0405 488B0424 		movq	(%rsp), %rax
 10002 0409 4183C701 		addl	$1, %r15d
 10003              	.LVL1303:
 10004 040d 443938   		cmpl	%r15d, (%rax)
 10005 0410 778E     		ja	.L1102
 10006 0412 0FB64013 		movzbl	19(%rax), %eax
 10007 0416 E947FDFF 		jmp	.L1103
 10007      FF
 10008              	.LVL1304:
 10009 041b 0F1F4400 		.p2align 4,,10
 10009      00
 10010              		.p2align 3
 10011              	.L1177:
3555:fltk-1.3.4-1/png/pngrutil.c ****                }
 10012              		.loc 1 3555 0
 10013 0420 4983ED01 		subq	$1, %r13
 10014              	.LVL1305:
3554:fltk-1.3.4-1/png/pngrutil.c ****                   sp--;
 10015              		.loc 1 3554 0
 10016 0424 4489E5   		movl	%r12d, %ebp
 10017 0427 EBDC     		jmp	.L1101
 10018              	.LVL1306:
 10019              	.L1091:
 10020              	.LBE265:
 10021              	.LBB270:
3630:fltk-1.3.4-1/png/pngrutil.c ****             int sshift, dshift;
 10022              		.loc 1 3630 0
 10023 0429 8B542424 		movl	36(%rsp), %edx
3629:fltk-1.3.4-1/png/pngrutil.c ****             png_bytep dp = row + (png_size_t)((final_width - 1) >> 1);
 10024              		.loc 1 3629 0
 10025 042d 458D78FF 		leal	-1(%r8), %r15d
 10026 0431 41D1EF   		shrl	%r15d
3630:fltk-1.3.4-1/png/pngrutil.c ****             int sshift, dshift;
 10027              		.loc 1 3630 0
 10028 0434 89D7     		movl	%edx, %edi
 10029              	.LVL1307:
3629:fltk-1.3.4-1/png/pngrutil.c ****             png_bytep dp = row + (png_size_t)((final_width - 1) >> 1);
 10030              		.loc 1 3629 0
 10031 0436 4901F7   		addq	%rsi, %r15
 10032              	.LVL1308:
3630:fltk-1.3.4-1/png/pngrutil.c ****             int sshift, dshift;
 10033              		.loc 1 3630 0
 10034 0439 83EF01   		subl	$1, %edi
 10035 043c D1EF     		shrl	%edi
 10036 043e 4801F7   		addq	%rsi, %rdi
 10037              	.LVL1309:
3637:fltk-1.3.4-1/png/pngrutil.c ****             {
 10038              		.loc 1 3637 0
 10039 0441 81E10000 		andl	$65536, %ecx
 10039      0100
 10040              	.LVL1310:
 10041 0447 0F84CC00 		je	.L1113
 10041      0000
3639:fltk-1.3.4-1/png/pngrutil.c ****                dshift = (int)(((final_width + 1) & 0x01) << 2);
 10042              		.loc 1 3639 0
 10043 044d 468D2485 		leal	4(,%r8,4), %r12d
 10043      04000000 
3640:fltk-1.3.4-1/png/pngrutil.c ****                s_start = 4;
 10044              		.loc 1 3640 0
 10045 0455 8D149504 		leal	4(,%rdx,4), %edx
 10045      000000
3643:fltk-1.3.4-1/png/pngrutil.c ****             }
 10046              		.loc 1 3643 0
 10047 045c BDFCFFFF 		movl	$-4, %ebp
 10047      FF
3642:fltk-1.3.4-1/png/pngrutil.c ****                s_inc = -4;
 10048              		.loc 1 3642 0
 10049 0461 4531C9   		xorl	%r9d, %r9d
3641:fltk-1.3.4-1/png/pngrutil.c ****                s_end = 0;
 10050              		.loc 1 3641 0
 10051 0464 41BD0400 		movl	$4, %r13d
 10051      0000
3639:fltk-1.3.4-1/png/pngrutil.c ****                dshift = (int)(((final_width + 1) & 0x01) << 2);
 10052              		.loc 1 3639 0
 10053 046a 4183E404 		andl	$4, %r12d
 10054              	.LVL1311:
3640:fltk-1.3.4-1/png/pngrutil.c ****                s_start = 4;
 10055              		.loc 1 3640 0
 10056 046e 83E204   		andl	$4, %edx
 10057              	.LVL1312:
 10058              	.L1114:
3656:fltk-1.3.4-1/png/pngrutil.c ****             {
 10059              		.loc 1 3656 0
 10060 0471 4585C0   		testl	%r8d, %r8d
 10061 0474 0F842DFD 		je	.L1095
 10061      FFFF
 10062 047a 4531F6   		xorl	%r14d, %r14d
 10063              	.LBB271:
 10064              	.LBB272:
3663:fltk-1.3.4-1/png/pngrutil.c ****                   tmp |= v << dshift;
 10065              		.loc 1 3663 0
 10066 047d 41BB0400 		movl	$4, %r11d
 10066      0000
 10067 0483 41BA0F0F 		movl	$3855, %r10d
 10067      0000
 10068              	.LVL1313:
 10069 0489 0F1F8000 		.p2align 4,,10
 10069      000000
 10070              		.p2align 3
 10071              	.L1122:
 10072              	.LBE272:
3658:fltk-1.3.4-1/png/pngrutil.c ****                int j;
 10073              		.loc 1 3658 0
 10074 0490 450FB607 		movzbl	(%r15), %r8d
 10075 0494 4489E1   		movl	%r12d, %ecx
 10076 0497 41D3F8   		sarl	%cl, %r8d
 10077 049a 4183E00F 		andl	$15, %r8d
 10078              	.LVL1314:
3661:fltk-1.3.4-1/png/pngrutil.c ****                {
 10079              		.loc 1 3661 0
 10080 049e 85DB     		testl	%ebx, %ebx
 10081 04a0 7E4D     		jle	.L1116
 10082 04a2 450FB6C0 		movzbl	%r8b, %r8d
 10083 04a6 31F6     		xorl	%esi, %esi
 10084 04a8 44896424 		movl	%r12d, 8(%rsp)
 10084      08
 10085 04ad EB0A     		jmp	.L1119
 10086              	.LVL1315:
 10087 04af 90       		.p2align 4,,10
 10088              		.p2align 3
 10089              	.L1117:
 10090 04b0 83C601   		addl	$1, %esi
 10091              	.LVL1316:
 10092              	.LBB273:
3674:fltk-1.3.4-1/png/pngrutil.c ****                }
 10093              		.loc 1 3674 0
 10094 04b3 01EA     		addl	%ebp, %edx
 10095              	.LVL1317:
 10096              	.LBE273:
3661:fltk-1.3.4-1/png/pngrutil.c ****                {
 10097              		.loc 1 3661 0
 10098 04b5 39F3     		cmpl	%esi, %ebx
 10099 04b7 7431     		je	.L1178
 10100              	.LVL1318:
 10101              	.L1119:
 10102              	.LBB274:
3663:fltk-1.3.4-1/png/pngrutil.c ****                   tmp |= v << dshift;
 10103              		.loc 1 3663 0
 10104 04b9 4489D9   		movl	%r11d, %ecx
 10105 04bc 4489D0   		movl	%r10d, %eax
3665:fltk-1.3.4-1/png/pngrutil.c **** 
 10106              		.loc 1 3665 0
 10107 04bf 4589C4   		movl	%r8d, %r12d
3663:fltk-1.3.4-1/png/pngrutil.c ****                   tmp |= v << dshift;
 10108              		.loc 1 3663 0
 10109 04c2 29D1     		subl	%edx, %ecx
 10110 04c4 D3F8     		sarl	%cl, %eax
 10111 04c6 89C1     		movl	%eax, %ecx
 10112 04c8 0FB607   		movzbl	(%rdi), %eax
 10113 04cb 21C8     		andl	%ecx, %eax
 10114              	.LVL1319:
3665:fltk-1.3.4-1/png/pngrutil.c **** 
 10115              		.loc 1 3665 0
 10116 04cd 89D1     		movl	%edx, %ecx
 10117 04cf 41D3E4   		sall	%cl, %r12d
 10118              	.LVL1320:
 10119 04d2 4409E0   		orl	%r12d, %eax
 10120              	.LVL1321:
3667:fltk-1.3.4-1/png/pngrutil.c ****                   {
 10121              		.loc 1 3667 0
 10122 04d5 4139D1   		cmpl	%edx, %r9d
3665:fltk-1.3.4-1/png/pngrutil.c **** 
 10123              		.loc 1 3665 0
 10124 04d8 8807     		movb	%al, (%rdi)
 10125              	.LVL1322:
3667:fltk-1.3.4-1/png/pngrutil.c ****                   {
 10126              		.loc 1 3667 0
 10127 04da 75D4     		jne	.L1117
 10128              	.LVL1323:
 10129              	.LBE274:
3661:fltk-1.3.4-1/png/pngrutil.c ****                {
 10130              		.loc 1 3661 0
 10131 04dc 83C601   		addl	$1, %esi
 10132              	.LVL1324:
 10133              	.LBB275:
3670:fltk-1.3.4-1/png/pngrutil.c ****                   }
 10134              		.loc 1 3670 0
 10135 04df 4883EF01 		subq	$1, %rdi
 10136              	.LVL1325:
3669:fltk-1.3.4-1/png/pngrutil.c ****                      dp--;
 10137              		.loc 1 3669 0
 10138 04e3 4489EA   		movl	%r13d, %edx
 10139              	.LVL1326:
 10140              	.LBE275:
3661:fltk-1.3.4-1/png/pngrutil.c ****                {
 10141              		.loc 1 3661 0
 10142 04e6 39F3     		cmpl	%esi, %ebx
 10143 04e8 75CF     		jne	.L1119
 10144              	.LVL1327:
 10145              	.L1178:
 10146 04ea 448B6424 		movl	8(%rsp), %r12d
 10146      08
 10147              	.LVL1328:
 10148              	.L1116:
3677:fltk-1.3.4-1/png/pngrutil.c ****                {
 10149              		.loc 1 3677 0
 10150 04ef 4539E1   		cmpl	%r12d, %r9d
 10151 04f2 741C     		je	.L1179
3684:fltk-1.3.4-1/png/pngrutil.c ****             }
 10152              		.loc 1 3684 0
 10153 04f4 4101EC   		addl	%ebp, %r12d
 10154              	.LVL1329:
 10155              	.L1121:
 10156              	.LBE271:
3656:fltk-1.3.4-1/png/pngrutil.c ****             {
 10157              		.loc 1 3656 0 discriminator 2
 10158 04f7 488B0424 		movq	(%rsp), %rax
 10159 04fb 4183C601 		addl	$1, %r14d
 10160              	.LVL1330:
 10161 04ff 443930   		cmpl	%r14d, (%rax)
 10162 0502 778C     		ja	.L1122
 10163 0504 0FB64013 		movzbl	19(%rax), %eax
 10164 0508 E955FCFF 		jmp	.L1103
 10164      FF
 10165              	.LVL1331:
 10166 050d 0F1F00   		.p2align 4,,10
 10167              		.p2align 3
 10168              	.L1179:
 10169              	.LBB276:
3680:fltk-1.3.4-1/png/pngrutil.c ****                }
 10170              		.loc 1 3680 0
 10171 0510 4983EF01 		subq	$1, %r15
 10172              	.LVL1332:
3679:fltk-1.3.4-1/png/pngrutil.c ****                   sp--;
 10173              		.loc 1 3679 0
 10174 0514 4589EC   		movl	%r13d, %r12d
 10175 0517 EBDE     		jmp	.L1121
 10176              	.LVL1333:
 10177              	.L1113:
 10178              	.LBE276:
3649:fltk-1.3.4-1/png/pngrutil.c ****                dshift = (int)((1 - ((final_width + 1) & 0x01)) << 2);
 10179              		.loc 1 3649 0
 10180 0519 418D5001 		leal	1(%r8), %edx
3650:fltk-1.3.4-1/png/pngrutil.c ****                s_start = 0;
 10181              		.loc 1 3650 0
 10182 051d 8B742424 		movl	36(%rsp), %esi
 10183              	.LVL1334:
3653:fltk-1.3.4-1/png/pngrutil.c ****             }
 10184              		.loc 1 3653 0
 10185 0521 BD040000 		movl	$4, %ebp
 10185      00
 10186 0526 41B90400 		movl	$4, %r9d
 10186      0000
3649:fltk-1.3.4-1/png/pngrutil.c ****                dshift = (int)((1 - ((final_width + 1) & 0x01)) << 2);
 10187              		.loc 1 3649 0
 10188 052c 83E201   		andl	$1, %edx
 10189 052f 83FA01   		cmpl	$1, %edx
3650:fltk-1.3.4-1/png/pngrutil.c ****                s_start = 0;
 10190              		.loc 1 3650 0
 10191 0532 8D5601   		leal	1(%rsi), %edx
3649:fltk-1.3.4-1/png/pngrutil.c ****                dshift = (int)((1 - ((final_width + 1) & 0x01)) << 2);
 10192              		.loc 1 3649 0
 10193 0535 4519E4   		sbbl	%r12d, %r12d
3653:fltk-1.3.4-1/png/pngrutil.c ****             }
 10194              		.loc 1 3653 0
 10195 0538 4531ED   		xorl	%r13d, %r13d
3650:fltk-1.3.4-1/png/pngrutil.c ****                s_start = 0;
 10196              		.loc 1 3650 0
 10197 053b 83E201   		andl	$1, %edx
3649:fltk-1.3.4-1/png/pngrutil.c ****                dshift = (int)((1 - ((final_width + 1) & 0x01)) << 2);
 10198              		.loc 1 3649 0
 10199 053e 4183E404 		andl	$4, %r12d
 10200              	.LVL1335:
3653:fltk-1.3.4-1/png/pngrutil.c ****             }
 10201              		.loc 1 3653 0
 10202 0542 83FA01   		cmpl	$1, %edx
 10203 0545 19D2     		sbbl	%edx, %edx
 10204 0547 83E204   		andl	$4, %edx
 10205 054a E922FFFF 		jmp	.L1114
 10205      FF
 10206              	.LVL1336:
 10207              	.L1093:
 10208              	.LBE270:
 10209              	.LBB277:
3527:fltk-1.3.4-1/png/pngrutil.c ****                 s_start = 0;
 10210              		.loc 1 3527 0
 10211 054f 8B742424 		movl	36(%rsp), %esi
 10212              	.LVL1337:
3526:fltk-1.3.4-1/png/pngrutil.c ****                 dshift = 7 - (int)((final_width + 7) & 0x07);
 10213              		.loc 1 3526 0
 10214 0553 F7D5     		notl	%ebp
3530:fltk-1.3.4-1/png/pngrutil.c ****             }
 10215              		.loc 1 3530 0
 10216 0555 41BB0100 		movl	$1, %r11d
 10216      0000
3526:fltk-1.3.4-1/png/pngrutil.c ****                 dshift = 7 - (int)((final_width + 7) & 0x07);
 10217              		.loc 1 3526 0
 10218 055b 83E507   		andl	$7, %ebp
 10219              	.LVL1338:
3529:fltk-1.3.4-1/png/pngrutil.c ****                 s_inc = 1;
 10220              		.loc 1 3529 0
 10221 055e 41B90700 		movl	$7, %r9d
 10221      0000
3528:fltk-1.3.4-1/png/pngrutil.c ****                 s_end = 7;
 10222              		.loc 1 3528 0
 10223 0564 4531E4   		xorl	%r12d, %r12d
3527:fltk-1.3.4-1/png/pngrutil.c ****                 s_start = 0;
 10224              		.loc 1 3527 0
 10225 0567 8D5607   		leal	7(%rsi), %edx
 10226              	.LVL1339:
 10227 056a F7D2     		notl	%edx
 10228 056c 83E207   		andl	$7, %edx
 10229              	.LVL1340:
 10230 056f E912FEFF 		jmp	.L1094
 10230      FF
 10231              	.LVL1341:
 10232              	.L1104:
 10233              	.LBE277:
 10234              	.LBB278:
3587:fltk-1.3.4-1/png/pngrutil.c ****                s_start = 0;
 10235              		.loc 1 3587 0
 10236 0574 8B742424 		movl	36(%rsp), %esi
 10237              	.LVL1342:
3586:fltk-1.3.4-1/png/pngrutil.c ****                dshift = (int)((3 - ((final_width + 3) & 0x03)) << 1);
 10238              		.loc 1 3586 0
 10239 0578 418D6803 		leal	3(%r8), %ebp
3590:fltk-1.3.4-1/png/pngrutil.c ****             }
 10240              		.loc 1 3590 0
 10241 057c 41BB0200 		movl	$2, %r11d
 10241      0000
3589:fltk-1.3.4-1/png/pngrutil.c ****                s_inc = 2;
 10242              		.loc 1 3589 0
 10243 0582 41B90600 		movl	$6, %r9d
 10243      0000
3588:fltk-1.3.4-1/png/pngrutil.c ****                s_end = 6;
 10244              		.loc 1 3588 0
 10245 0588 4531E4   		xorl	%r12d, %r12d
3586:fltk-1.3.4-1/png/pngrutil.c ****                dshift = (int)((3 - ((final_width + 3) & 0x03)) << 1);
 10246              		.loc 1 3586 0
 10247 058b F7D5     		notl	%ebp
3587:fltk-1.3.4-1/png/pngrutil.c ****                s_start = 0;
 10248              		.loc 1 3587 0
 10249 058d 8D5603   		leal	3(%rsi), %edx
3586:fltk-1.3.4-1/png/pngrutil.c ****                dshift = (int)((3 - ((final_width + 3) & 0x03)) << 1);
 10250              		.loc 1 3586 0
 10251 0590 83E503   		andl	$3, %ebp
 10252 0593 01ED     		addl	%ebp, %ebp
 10253              	.LVL1343:
3587:fltk-1.3.4-1/png/pngrutil.c ****                s_start = 0;
 10254              		.loc 1 3587 0
 10255 0595 F7D2     		notl	%edx
 10256 0597 83E203   		andl	$3, %edx
 10257 059a 01D2     		addl	%edx, %edx
 10258              	.LVL1344:
 10259 059c E96DFCFF 		jmp	.L1105
 10259      FF
 10260              	.LVL1345:
 10261              	.L1173:
 10262              	.LBE278:
 10263              	.LBE279:
3726:fltk-1.3.4-1/png/pngrutil.c **** #endif /* READ_INTERLACING */
 10264              		.loc 1 3726 0
 10265 05a1 E8000000 		call	__stack_chk_fail
 10265      00
 10266              	.LVL1346:
 10267              		.cfi_endproc
 10268              	.LFE95:
 10270              		.section	.text.unlikely.png_do_read_interlace
 10271              	.LCOLDE97:
 10272              		.section	.text.png_do_read_interlace
 10273              	.LHOTE97:
 10274              		.section	.text.unlikely.png_read_filter_row,"ax",@progbits
 10275              	.LCOLDB98:
 10276              		.section	.text.png_read_filter_row,"ax",@progbits
 10277              	.LHOTB98:
 10278              		.p2align 4,,15
 10279              		.globl	png_read_filter_row
 10281              	png_read_filter_row:
 10282              	.LFB102:
3885:fltk-1.3.4-1/png/pngrutil.c **** 
3886:fltk-1.3.4-1/png/pngrutil.c **** static void
3887:fltk-1.3.4-1/png/pngrutil.c **** png_init_filter_functions(png_structrp pp)
3888:fltk-1.3.4-1/png/pngrutil.c ****    /* This function is called once for every PNG image (except for PNG images
3889:fltk-1.3.4-1/png/pngrutil.c ****     * that only use PNG_FILTER_VALUE_NONE for all rows) to set the
3890:fltk-1.3.4-1/png/pngrutil.c ****     * implementations required to reverse the filtering of PNG rows.  Reversing
3891:fltk-1.3.4-1/png/pngrutil.c ****     * the filter is the first transformation performed on the row data.  It is
3892:fltk-1.3.4-1/png/pngrutil.c ****     * performed in place, therefore an implementation can be selected based on
3893:fltk-1.3.4-1/png/pngrutil.c ****     * the image pixel format.  If the implementation depends on image width then
3894:fltk-1.3.4-1/png/pngrutil.c ****     * take care to ensure that it works correctly if the image is interlaced -
3895:fltk-1.3.4-1/png/pngrutil.c ****     * interlacing causes the actual row width to vary.
3896:fltk-1.3.4-1/png/pngrutil.c ****     */
3897:fltk-1.3.4-1/png/pngrutil.c **** {
3898:fltk-1.3.4-1/png/pngrutil.c ****    unsigned int bpp = (pp->pixel_depth + 7) >> 3;
3899:fltk-1.3.4-1/png/pngrutil.c **** 
3900:fltk-1.3.4-1/png/pngrutil.c ****    pp->read_filter[PNG_FILTER_VALUE_SUB-1] = png_read_filter_row_sub;
3901:fltk-1.3.4-1/png/pngrutil.c ****    pp->read_filter[PNG_FILTER_VALUE_UP-1] = png_read_filter_row_up;
3902:fltk-1.3.4-1/png/pngrutil.c ****    pp->read_filter[PNG_FILTER_VALUE_AVG-1] = png_read_filter_row_avg;
3903:fltk-1.3.4-1/png/pngrutil.c ****    if (bpp == 1)
3904:fltk-1.3.4-1/png/pngrutil.c ****       pp->read_filter[PNG_FILTER_VALUE_PAETH-1] =
3905:fltk-1.3.4-1/png/pngrutil.c ****          png_read_filter_row_paeth_1byte_pixel;
3906:fltk-1.3.4-1/png/pngrutil.c ****    else
3907:fltk-1.3.4-1/png/pngrutil.c ****       pp->read_filter[PNG_FILTER_VALUE_PAETH-1] =
3908:fltk-1.3.4-1/png/pngrutil.c ****          png_read_filter_row_paeth_multibyte_pixel;
3909:fltk-1.3.4-1/png/pngrutil.c **** 
3910:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_FILTER_OPTIMIZATIONS
3911:fltk-1.3.4-1/png/pngrutil.c ****    /* To use this define PNG_FILTER_OPTIMIZATIONS as the name of a function to
3912:fltk-1.3.4-1/png/pngrutil.c ****     * call to install hardware optimizations for the above functions; simply
3913:fltk-1.3.4-1/png/pngrutil.c ****     * replace whatever elements of the pp->read_filter[] array with a hardware
3914:fltk-1.3.4-1/png/pngrutil.c ****     * specific (or, for that matter, generic) optimization.
3915:fltk-1.3.4-1/png/pngrutil.c ****     *
3916:fltk-1.3.4-1/png/pngrutil.c ****     * To see an example of this examine what configure.ac does when
3917:fltk-1.3.4-1/png/pngrutil.c ****     * --enable-arm-neon is specified on the command line.
3918:fltk-1.3.4-1/png/pngrutil.c ****     */
3919:fltk-1.3.4-1/png/pngrutil.c ****    PNG_FILTER_OPTIMIZATIONS(pp, bpp);
3920:fltk-1.3.4-1/png/pngrutil.c **** #endif
3921:fltk-1.3.4-1/png/pngrutil.c **** }
3922:fltk-1.3.4-1/png/pngrutil.c **** 
3923:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
3924:fltk-1.3.4-1/png/pngrutil.c **** png_read_filter_row(png_structrp pp, png_row_infop row_info, png_bytep row,
3925:fltk-1.3.4-1/png/pngrutil.c ****    png_const_bytep prev_row, int filter)
3926:fltk-1.3.4-1/png/pngrutil.c **** {
 10283              		.loc 1 3926 0
 10284              		.cfi_startproc
 10285              	.LVL1347:
3927:fltk-1.3.4-1/png/pngrutil.c ****    /* OPTIMIZATION: DO NOT MODIFY THIS FUNCTION, instead #define
3928:fltk-1.3.4-1/png/pngrutil.c ****     * PNG_FILTER_OPTIMIZATIONS to a function that overrides the generic
3929:fltk-1.3.4-1/png/pngrutil.c ****     * implementations.  See png_init_filter_functions above.
3930:fltk-1.3.4-1/png/pngrutil.c ****     */
3931:fltk-1.3.4-1/png/pngrutil.c ****    if (filter > PNG_FILTER_VALUE_NONE && filter < PNG_FILTER_VALUE_LAST)
 10286              		.loc 1 3931 0
 10287 0000 4183E801 		subl	$1, %r8d
 10288              	.LVL1348:
3926:fltk-1.3.4-1/png/pngrutil.c ****    /* OPTIMIZATION: DO NOT MODIFY THIS FUNCTION, instead #define
 10289              		.loc 1 3926 0
 10290 0004 4889F0   		movq	%rsi, %rax
 10291 0007 4889D6   		movq	%rdx, %rsi
 10292              	.LVL1349:
 10293              		.loc 1 3931 0
 10294 000a 4183F803 		cmpl	$3, %r8d
 10295 000e 7720     		ja	.L1180
3932:fltk-1.3.4-1/png/pngrutil.c ****    {
3933:fltk-1.3.4-1/png/pngrutil.c ****       if (pp->read_filter[0] == NULL)
 10296              		.loc 1 3933 0
 10297 0010 4883BFB8 		cmpq	$0, 1208(%rdi)
 10297      04000000 
 10298 0018 741E     		je	.L1184
 10299              	.LVL1350:
 10300              	.L1182:
3934:fltk-1.3.4-1/png/pngrutil.c ****          png_init_filter_functions(pp);
3935:fltk-1.3.4-1/png/pngrutil.c **** 
3936:fltk-1.3.4-1/png/pngrutil.c ****       pp->read_filter[filter-1](row_info, row, prev_row);
 10301              		.loc 1 3936 0
 10302 001a 4D63C0   		movslq	%r8d, %r8
 10303 001d 4889CA   		movq	%rcx, %rdx
 10304 0020 4E8B84C7 		movq	1208(%rdi,%r8,8), %r8
 10304      B8040000 
 10305              	.LVL1351:
 10306 0028 4889C7   		movq	%rax, %rdi
 10307              	.LVL1352:
 10308 002b 41FFE0   		jmp	*%r8
 10309              	.LVL1353:
 10310 002e 6690     		.p2align 4,,10
 10311              		.p2align 3
 10312              	.L1180:
 10313 0030 F3C3     		rep ret
 10314              		.p2align 4,,10
 10315 0032 660F1F44 		.p2align 3
 10315      0000
 10316              	.L1184:
 10317              	.LVL1354:
 10318              	.LBB280:
 10319              	.LBB281:
3898:fltk-1.3.4-1/png/pngrutil.c **** 
 10320              		.loc 1 3898 0
 10321 0038 0FB6977A 		movzbl	634(%rdi), %edx
 10321      020000
 10322              	.LVL1355:
3904:fltk-1.3.4-1/png/pngrutil.c ****          png_read_filter_row_paeth_1byte_pixel;
 10323              		.loc 1 3904 0
 10324 003f 41B90000 		movl	$png_read_filter_row_paeth_1byte_pixel, %r9d
 10324      0000
3900:fltk-1.3.4-1/png/pngrutil.c ****    pp->read_filter[PNG_FILTER_VALUE_UP-1] = png_read_filter_row_up;
 10325              		.loc 1 3900 0
 10326 0045 48C787B8 		movq	$png_read_filter_row_sub, 1208(%rdi)
 10326      04000000 
 10326      000000
3901:fltk-1.3.4-1/png/pngrutil.c ****    pp->read_filter[PNG_FILTER_VALUE_AVG-1] = png_read_filter_row_avg;
 10327              		.loc 1 3901 0
 10328 0050 48C787C0 		movq	$png_read_filter_row_up, 1216(%rdi)
 10328      04000000 
 10328      000000
3902:fltk-1.3.4-1/png/pngrutil.c ****    if (bpp == 1)
 10329              		.loc 1 3902 0
 10330 005b 48C787C8 		movq	$png_read_filter_row_avg, 1224(%rdi)
 10330      04000000 
 10330      000000
3898:fltk-1.3.4-1/png/pngrutil.c **** 
 10331              		.loc 1 3898 0
 10332 0066 83C207   		addl	$7, %edx
 10333 0069 C1FA03   		sarl	$3, %edx
 10334              	.LVL1356:
3904:fltk-1.3.4-1/png/pngrutil.c ****          png_read_filter_row_paeth_1byte_pixel;
 10335              		.loc 1 3904 0
 10336 006c 83FA01   		cmpl	$1, %edx
 10337 006f BA000000 		movl	$png_read_filter_row_paeth_multibyte_pixel, %edx
 10337      00
 10338              	.LVL1357:
 10339 0074 490F44D1 		cmove	%r9, %rdx
 10340 0078 488997D0 		movq	%rdx, 1232(%rdi)
 10340      040000
 10341 007f EB99     		jmp	.L1182
 10342              	.LBE281:
 10343              	.LBE280:
 10344              		.cfi_endproc
 10345              	.LFE102:
 10347              		.section	.text.unlikely.png_read_filter_row
 10348              	.LCOLDE98:
 10349              		.section	.text.png_read_filter_row
 10350              	.LHOTE98:
 10351              		.section	.rodata.str1.1
 10352              	.LC99:
 10353 030b 4E6F7420 		.string	"Not enough image data"
 10353      656E6F75 
 10353      67682069 
 10353      6D616765 
 10353      20646174 
 10354              	.LC100:
 10355 0321 45787472 		.string	"Extra compressed data"
 10355      6120636F 
 10355      6D707265 
 10355      73736564 
 10355      20646174 
 10356              	.LC101:
 10357 0337 546F6F20 		.string	"Too much image data"
 10357      6D756368 
 10357      20696D61 
 10357      67652064 
 10357      61746100 
 10358              		.section	.text.unlikely.png_read_IDAT_data,"ax",@progbits
 10359              	.LCOLDB102:
 10360              		.section	.text.png_read_IDAT_data,"ax",@progbits
 10361              	.LHOTB102:
 10362              		.p2align 4,,15
 10363              		.globl	png_read_IDAT_data
 10365              	png_read_IDAT_data:
 10366              	.LFB103:
3937:fltk-1.3.4-1/png/pngrutil.c ****    }
3938:fltk-1.3.4-1/png/pngrutil.c **** }
3939:fltk-1.3.4-1/png/pngrutil.c **** 
3940:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_SEQUENTIAL_READ_SUPPORTED
3941:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
3942:fltk-1.3.4-1/png/pngrutil.c **** png_read_IDAT_data(png_structrp png_ptr, png_bytep output,
3943:fltk-1.3.4-1/png/pngrutil.c ****    png_alloc_size_t avail_out)
3944:fltk-1.3.4-1/png/pngrutil.c **** {
 10367              		.loc 1 3944 0
 10368              		.cfi_startproc
 10369              	.LVL1358:
 10370 0000 4157     		pushq	%r15
 10371              		.cfi_def_cfa_offset 16
 10372              		.cfi_offset 15, -16
 10373 0002 4156     		pushq	%r14
 10374              		.cfi_def_cfa_offset 24
 10375              		.cfi_offset 14, -24
 10376              	.LBB282:
3945:fltk-1.3.4-1/png/pngrutil.c ****    /* Loop reading IDATs and decompressing the result into output[avail_out] */
3946:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->zstream.next_out = output;
3947:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->zstream.avail_out = 0; /* safety: set below */
3948:fltk-1.3.4-1/png/pngrutil.c **** 
3949:fltk-1.3.4-1/png/pngrutil.c ****    if (output == NULL)
3950:fltk-1.3.4-1/png/pngrutil.c ****       avail_out = 0;
3951:fltk-1.3.4-1/png/pngrutil.c **** 
3952:fltk-1.3.4-1/png/pngrutil.c ****    do
3953:fltk-1.3.4-1/png/pngrutil.c ****    {
3954:fltk-1.3.4-1/png/pngrutil.c ****       int ret;
3955:fltk-1.3.4-1/png/pngrutil.c ****       png_byte tmpbuf[PNG_INFLATE_BUF_SIZE];
3956:fltk-1.3.4-1/png/pngrutil.c **** 
3957:fltk-1.3.4-1/png/pngrutil.c ****       if (png_ptr->zstream.avail_in == 0)
3958:fltk-1.3.4-1/png/pngrutil.c ****       {
3959:fltk-1.3.4-1/png/pngrutil.c ****          uInt avail_in;
3960:fltk-1.3.4-1/png/pngrutil.c ****          png_bytep buffer;
3961:fltk-1.3.4-1/png/pngrutil.c **** 
3962:fltk-1.3.4-1/png/pngrutil.c ****          while (png_ptr->idat_size == 0)
3963:fltk-1.3.4-1/png/pngrutil.c ****          {
3964:fltk-1.3.4-1/png/pngrutil.c ****             png_crc_finish(png_ptr, 0);
3965:fltk-1.3.4-1/png/pngrutil.c **** 
3966:fltk-1.3.4-1/png/pngrutil.c ****             png_ptr->idat_size = png_read_chunk_header(png_ptr);
3967:fltk-1.3.4-1/png/pngrutil.c ****             /* This is an error even in the 'check' case because the code just
3968:fltk-1.3.4-1/png/pngrutil.c ****              * consumed a non-IDAT header.
3969:fltk-1.3.4-1/png/pngrutil.c ****              */
3970:fltk-1.3.4-1/png/pngrutil.c ****             if (png_ptr->chunk_name != png_IDAT)
3971:fltk-1.3.4-1/png/pngrutil.c ****                png_error(png_ptr, "Not enough image data");
3972:fltk-1.3.4-1/png/pngrutil.c ****          }
3973:fltk-1.3.4-1/png/pngrutil.c **** 
3974:fltk-1.3.4-1/png/pngrutil.c ****          avail_in = png_ptr->IDAT_read_size;
3975:fltk-1.3.4-1/png/pngrutil.c **** 
3976:fltk-1.3.4-1/png/pngrutil.c ****          if (avail_in > png_ptr->idat_size)
3977:fltk-1.3.4-1/png/pngrutil.c ****             avail_in = (uInt)png_ptr->idat_size;
3978:fltk-1.3.4-1/png/pngrutil.c **** 
3979:fltk-1.3.4-1/png/pngrutil.c ****          /* A PNG with a gradually increasing IDAT size will defeat this attempt
3980:fltk-1.3.4-1/png/pngrutil.c ****           * to minimize memory usage by causing lots of re-allocs, but
3981:fltk-1.3.4-1/png/pngrutil.c ****           * realistically doing IDAT_read_size re-allocs is not likely to be a
3982:fltk-1.3.4-1/png/pngrutil.c ****           * big problem.
3983:fltk-1.3.4-1/png/pngrutil.c ****           */
3984:fltk-1.3.4-1/png/pngrutil.c ****          buffer = png_read_buffer(png_ptr, avail_in, 0/*error*/);
3985:fltk-1.3.4-1/png/pngrutil.c **** 
3986:fltk-1.3.4-1/png/pngrutil.c ****          png_crc_read(png_ptr, buffer, avail_in);
3987:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->idat_size -= avail_in;
3988:fltk-1.3.4-1/png/pngrutil.c **** 
3989:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->zstream.next_in = buffer;
3990:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->zstream.avail_in = avail_in;
3991:fltk-1.3.4-1/png/pngrutil.c ****       }
3992:fltk-1.3.4-1/png/pngrutil.c **** 
3993:fltk-1.3.4-1/png/pngrutil.c ****       /* And set up the output side. */
3994:fltk-1.3.4-1/png/pngrutil.c ****       if (output != NULL) /* standard read */
3995:fltk-1.3.4-1/png/pngrutil.c ****       {
3996:fltk-1.3.4-1/png/pngrutil.c ****          uInt out = ZLIB_IO_MAX;
3997:fltk-1.3.4-1/png/pngrutil.c **** 
3998:fltk-1.3.4-1/png/pngrutil.c ****          if (out > avail_out)
3999:fltk-1.3.4-1/png/pngrutil.c ****             out = (uInt)avail_out;
4000:fltk-1.3.4-1/png/pngrutil.c **** 
4001:fltk-1.3.4-1/png/pngrutil.c ****          avail_out -= out;
4002:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->zstream.avail_out = out;
4003:fltk-1.3.4-1/png/pngrutil.c ****       }
4004:fltk-1.3.4-1/png/pngrutil.c **** 
4005:fltk-1.3.4-1/png/pngrutil.c ****       else /* after last row, checking for end */
4006:fltk-1.3.4-1/png/pngrutil.c ****       {
4007:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->zstream.next_out = tmpbuf;
4008:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->zstream.avail_out = (sizeof tmpbuf);
4009:fltk-1.3.4-1/png/pngrutil.c ****       }
4010:fltk-1.3.4-1/png/pngrutil.c **** 
4011:fltk-1.3.4-1/png/pngrutil.c ****       /* Use NO_FLUSH; this gives zlib the maximum opportunity to optimize the
4012:fltk-1.3.4-1/png/pngrutil.c ****        * process.  If the LZ stream is truncated the sequential reader will
4013:fltk-1.3.4-1/png/pngrutil.c ****        * terminally damage the stream, above, by reading the chunk header of the
4014:fltk-1.3.4-1/png/pngrutil.c ****        * following chunk (it then exits with png_error).
4015:fltk-1.3.4-1/png/pngrutil.c ****        *
4016:fltk-1.3.4-1/png/pngrutil.c ****        * TODO: deal more elegantly with truncated IDAT lists.
4017:fltk-1.3.4-1/png/pngrutil.c ****        */
4018:fltk-1.3.4-1/png/pngrutil.c ****       ret = inflate(&png_ptr->zstream, Z_NO_FLUSH);
 10377              		.loc 1 4018 0
 10378 0004 4C8DBF40 		leaq	320(%rdi), %r15
 10378      010000
 10379              	.LBE282:
3944:fltk-1.3.4-1/png/pngrutil.c ****    /* Loop reading IDATs and decompressing the result into output[avail_out] */
 10380              		.loc 1 3944 0
 10381 000b 4155     		pushq	%r13
 10382              		.cfi_def_cfa_offset 32
 10383              		.cfi_offset 13, -32
 10384 000d 4154     		pushq	%r12
 10385              		.cfi_def_cfa_offset 40
 10386              		.cfi_offset 12, -40
 10387 000f 4989F6   		movq	%rsi, %r14
 10388 0012 55       		pushq	%rbp
 10389              		.cfi_def_cfa_offset 48
 10390              		.cfi_offset 6, -48
 10391 0013 53       		pushq	%rbx
 10392              		.cfi_def_cfa_offset 56
 10393              		.cfi_offset 3, -56
 10394 0014 4889D5   		movq	%rdx, %rbp
 10395 0017 4889FB   		movq	%rdi, %rbx
 10396              	.LBB288:
 10397              	.LBB283:
3998:fltk-1.3.4-1/png/pngrutil.c ****             out = (uInt)avail_out;
 10398              		.loc 1 3998 0
 10399 001a 41BCFEFF 		movl	$4294967294, %r12d
 10399      FFFF
 10400              	.LBE283:
 10401              	.LBE288:
3944:fltk-1.3.4-1/png/pngrutil.c ****    /* Loop reading IDATs and decompressing the result into output[avail_out] */
 10402              		.loc 1 3944 0
 10403 0020 4881EC28 		subq	$1064, %rsp
 10403      040000
 10404              		.cfi_def_cfa_offset 1120
3946:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->zstream.avail_out = 0; /* safety: set below */
 10405              		.loc 1 3946 0
 10406 0027 4889B358 		movq	%rsi, 344(%rbx)
 10406      010000
3947:fltk-1.3.4-1/png/pngrutil.c **** 
 10407              		.loc 1 3947 0
 10408 002e C7876001 		movl	$0, 352(%rdi)
 10408      00000000 
 10408      0000
3944:fltk-1.3.4-1/png/pngrutil.c ****    /* Loop reading IDATs and decompressing the result into output[avail_out] */
 10409              		.loc 1 3944 0
 10410 0038 64488B04 		movq	%fs:40, %rax
 10410      25280000 
 10410      00
 10411 0041 48898424 		movq	%rax, 1048(%rsp)
 10411      18040000 
 10412 0049 31C0     		xorl	%eax, %eax
3950:fltk-1.3.4-1/png/pngrutil.c **** 
 10413              		.loc 1 3950 0
 10414 004b 4885F6   		testq	%rsi, %rsi
 10415 004e 480F44E8 		cmove	%rax, %rbp
 10416              	.LVL1359:
 10417              		.p2align 4,,10
 10418 0052 660F1F44 		.p2align 3
 10418      0000
 10419              	.L1200:
 10420              	.LBB289:
3957:fltk-1.3.4-1/png/pngrutil.c ****       {
 10421              		.loc 1 3957 0
 10422 0058 8B8B4801 		movl	328(%rbx), %ecx
 10422      0000
 10423 005e 85C9     		testl	%ecx, %ecx
 10424 0060 0F857E00 		jne	.L1188
 10424      0000
 10425 0066 8B835802 		movl	600(%rbx), %eax
 10425      0000
 10426 006c EB2A     		jmp	.L1189
 10427 006e 6690     		.p2align 4,,10
 10428              		.p2align 3
 10429              	.L1190:
 10430              	.LBB284:
3964:fltk-1.3.4-1/png/pngrutil.c **** 
 10431              		.loc 1 3964 0
 10432 0070 31F6     		xorl	%esi, %esi
 10433 0072 4889DF   		movq	%rbx, %rdi
 10434 0075 E8000000 		call	png_crc_finish
 10434      00
 10435              	.LVL1360:
3966:fltk-1.3.4-1/png/pngrutil.c ****             /* This is an error even in the 'check' case because the code just
 10436              		.loc 1 3966 0
 10437 007a 4889DF   		movq	%rbx, %rdi
 10438 007d E8000000 		call	png_read_chunk_header
 10438      00
 10439              	.LVL1361:
3970:fltk-1.3.4-1/png/pngrutil.c ****                png_error(png_ptr, "Not enough image data");
 10440              		.loc 1 3970 0
 10441 0082 81BB1802 		cmpl	$1229209940, 536(%rbx)
 10441      00005441 
 10441      4449
3966:fltk-1.3.4-1/png/pngrutil.c ****             /* This is an error even in the 'check' case because the code just
 10442              		.loc 1 3966 0
 10443 008c 89835802 		movl	%eax, 600(%rbx)
 10443      0000
3970:fltk-1.3.4-1/png/pngrutil.c ****                png_error(png_ptr, "Not enough image data");
 10444              		.loc 1 3970 0
 10445 0092 0F859001 		jne	.L1202
 10445      0000
 10446              	.L1189:
3962:fltk-1.3.4-1/png/pngrutil.c ****          {
 10447              		.loc 1 3962 0
 10448 0098 85C0     		testl	%eax, %eax
 10449 009a 74D4     		je	.L1190
3974:fltk-1.3.4-1/png/pngrutil.c **** 
 10450              		.loc 1 3974 0
 10451 009c 448BABA8 		movl	1192(%rbx), %r13d
 10451      040000
 10452              	.LVL1362:
3984:fltk-1.3.4-1/png/pngrutil.c **** 
 10453              		.loc 1 3984 0
 10454 00a3 4889DF   		movq	%rbx, %rdi
 10455 00a6 4139C5   		cmpl	%eax, %r13d
 10456 00a9 440F47E8 		cmova	%eax, %r13d
 10457              	.LVL1363:
 10458 00ad 31D2     		xorl	%edx, %edx
 10459 00af 4489EE   		movl	%r13d, %esi
 10460 00b2 E8000000 		call	png_read_buffer
 10460      00
 10461              	.LVL1364:
3986:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->idat_size -= avail_in;
 10462              		.loc 1 3986 0
 10463 00b7 4489EA   		movl	%r13d, %edx
 10464 00ba 4889C6   		movq	%rax, %rsi
 10465 00bd 4889DF   		movq	%rbx, %rdi
 10466 00c0 48894424 		movq	%rax, 8(%rsp)
 10466      08
 10467 00c5 E8000000 		call	png_crc_read
 10467      00
 10468              	.LVL1365:
3989:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->zstream.avail_in = avail_in;
 10469              		.loc 1 3989 0
 10470 00ca 488B4424 		movq	8(%rsp), %rax
 10470      08
3987:fltk-1.3.4-1/png/pngrutil.c **** 
 10471              		.loc 1 3987 0
 10472 00cf 4429AB58 		subl	%r13d, 600(%rbx)
 10472      020000
3990:fltk-1.3.4-1/png/pngrutil.c ****       }
 10473              		.loc 1 3990 0
 10474 00d6 4489AB48 		movl	%r13d, 328(%rbx)
 10474      010000
3989:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->zstream.avail_in = avail_in;
 10475              		.loc 1 3989 0
 10476 00dd 48898340 		movq	%rax, 320(%rbx)
 10476      010000
 10477              	.LVL1366:
 10478              	.L1188:
 10479              	.LBE284:
3994:fltk-1.3.4-1/png/pngrutil.c ****       {
 10480              		.loc 1 3994 0
 10481 00e4 4D85F6   		testq	%r14, %r14
 10482 00e7 747F     		je	.L1191
 10483              	.LVL1367:
 10484              	.LBB285:
3999:fltk-1.3.4-1/png/pngrutil.c **** 
 10485              		.loc 1 3999 0
 10486 00e9 4C39E5   		cmpq	%r12, %rbp
 10487 00ec B8FFFFFF 		movl	$-1, %eax
 10487      FF
 10488 00f1 41BDFFFF 		movl	$4294967295, %r13d
 10488      FFFF
 10489 00f7 0F46C5   		cmovbe	%ebp, %eax
 10490 00fa 4C0F46ED 		cmovbe	%rbp, %r13
 10491              	.LVL1368:
 10492              	.LBE285:
 10493              		.loc 1 4018 0
 10494 00fe 4C89FF   		movq	%r15, %rdi
 10495 0101 31F6     		xorl	%esi, %esi
 10496              	.LBB286:
4002:fltk-1.3.4-1/png/pngrutil.c ****       }
 10497              		.loc 1 4002 0
 10498 0103 89836001 		movl	%eax, 352(%rbx)
 10498      0000
 10499              	.LBE286:
 10500              		.loc 1 4018 0
 10501 0109 E8000000 		call	inflate
 10501      00
 10502              	.LVL1369:
 10503 010e 8B936001 		movl	352(%rbx), %edx
 10503      0000
4019:fltk-1.3.4-1/png/pngrutil.c **** 
4020:fltk-1.3.4-1/png/pngrutil.c ****       /* Take the unconsumed output back. */
4021:fltk-1.3.4-1/png/pngrutil.c ****       if (output != NULL)
4022:fltk-1.3.4-1/png/pngrutil.c ****          avail_out += png_ptr->zstream.avail_out;
4023:fltk-1.3.4-1/png/pngrutil.c **** 
4024:fltk-1.3.4-1/png/pngrutil.c ****       else /* avail_out counts the extra bytes */
4025:fltk-1.3.4-1/png/pngrutil.c ****          avail_out += (sizeof tmpbuf) - png_ptr->zstream.avail_out;
4026:fltk-1.3.4-1/png/pngrutil.c **** 
4027:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.avail_out = 0;
 10504              		.loc 1 4027 0
 10505 0114 C7836001 		movl	$0, 352(%rbx)
 10505      00000000 
 10505      0000
 10506 011e 4801D5   		addq	%rdx, %rbp
 10507              	.LVL1370:
4022:fltk-1.3.4-1/png/pngrutil.c **** 
 10508              		.loc 1 4022 0
 10509 0121 4C29ED   		subq	%r13, %rbp
 10510              	.LVL1371:
4028:fltk-1.3.4-1/png/pngrutil.c **** 
4029:fltk-1.3.4-1/png/pngrutil.c ****       if (ret == Z_STREAM_END)
 10511              		.loc 1 4029 0
 10512 0124 83F801   		cmpl	$1, %eax
 10513 0127 747E     		je	.L1213
 10514              	.L1194:
4030:fltk-1.3.4-1/png/pngrutil.c ****       {
4031:fltk-1.3.4-1/png/pngrutil.c ****          /* Do this for safety; we won't read any more into this row. */
4032:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->zstream.next_out = NULL;
4033:fltk-1.3.4-1/png/pngrutil.c **** 
4034:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->mode |= PNG_AFTER_IDAT;
4035:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->flags |= PNG_FLAG_ZSTREAM_ENDED;
4036:fltk-1.3.4-1/png/pngrutil.c **** 
4037:fltk-1.3.4-1/png/pngrutil.c ****          if (png_ptr->zstream.avail_in > 0 || png_ptr->idat_size > 0)
4038:fltk-1.3.4-1/png/pngrutil.c ****             png_chunk_benign_error(png_ptr, "Extra compressed data");
4039:fltk-1.3.4-1/png/pngrutil.c ****          break;
4040:fltk-1.3.4-1/png/pngrutil.c ****       }
4041:fltk-1.3.4-1/png/pngrutil.c **** 
4042:fltk-1.3.4-1/png/pngrutil.c ****       if (ret != Z_OK)
 10515              		.loc 1 4042 0
 10516 0129 85C0     		testl	%eax, %eax
 10517 012b 0F85D200 		jne	.L1214
 10517      0000
 10518              	.LBE289:
4043:fltk-1.3.4-1/png/pngrutil.c ****       {
4044:fltk-1.3.4-1/png/pngrutil.c ****          png_zstream_error(png_ptr, ret);
4045:fltk-1.3.4-1/png/pngrutil.c **** 
4046:fltk-1.3.4-1/png/pngrutil.c ****          if (output != NULL)
4047:fltk-1.3.4-1/png/pngrutil.c ****             png_chunk_error(png_ptr, png_ptr->zstream.msg);
4048:fltk-1.3.4-1/png/pngrutil.c **** 
4049:fltk-1.3.4-1/png/pngrutil.c ****          else /* checking */
4050:fltk-1.3.4-1/png/pngrutil.c ****          {
4051:fltk-1.3.4-1/png/pngrutil.c ****             png_chunk_benign_error(png_ptr, png_ptr->zstream.msg);
4052:fltk-1.3.4-1/png/pngrutil.c ****             return;
4053:fltk-1.3.4-1/png/pngrutil.c ****          }
4054:fltk-1.3.4-1/png/pngrutil.c ****       }
4055:fltk-1.3.4-1/png/pngrutil.c ****    } while (avail_out > 0);
 10519              		.loc 1 4055 0
 10520 0131 4885ED   		testq	%rbp, %rbp
 10521 0134 0F851EFF 		jne	.L1200
 10521      FFFF
 10522              	.LVL1372:
 10523              	.L1185:
4056:fltk-1.3.4-1/png/pngrutil.c **** 
4057:fltk-1.3.4-1/png/pngrutil.c ****    if (avail_out > 0)
4058:fltk-1.3.4-1/png/pngrutil.c ****    {
4059:fltk-1.3.4-1/png/pngrutil.c ****       /* The stream ended before the image; this is the same as too few IDATs so
4060:fltk-1.3.4-1/png/pngrutil.c ****        * should be handled the same way.
4061:fltk-1.3.4-1/png/pngrutil.c ****        */
4062:fltk-1.3.4-1/png/pngrutil.c ****       if (output != NULL)
4063:fltk-1.3.4-1/png/pngrutil.c ****          png_error(png_ptr, "Not enough image data");
4064:fltk-1.3.4-1/png/pngrutil.c **** 
4065:fltk-1.3.4-1/png/pngrutil.c ****       else /* the deflate stream contained extra data */
4066:fltk-1.3.4-1/png/pngrutil.c ****          png_chunk_benign_error(png_ptr, "Too much image data");
4067:fltk-1.3.4-1/png/pngrutil.c ****    }
4068:fltk-1.3.4-1/png/pngrutil.c **** }
 10524              		.loc 1 4068 0
 10525 013a 488B8424 		movq	1048(%rsp), %rax
 10525      18040000 
 10526 0142 64483304 		xorq	%fs:40, %rax
 10526      25280000 
 10526      00
 10527 014b 0F85E400 		jne	.L1215
 10527      0000
 10528 0151 4881C428 		addq	$1064, %rsp
 10528      040000
 10529              		.cfi_remember_state
 10530              		.cfi_def_cfa_offset 56
 10531 0158 5B       		popq	%rbx
 10532              		.cfi_def_cfa_offset 48
 10533              	.LVL1373:
 10534 0159 5D       		popq	%rbp
 10535              		.cfi_def_cfa_offset 40
 10536              	.LVL1374:
 10537 015a 415C     		popq	%r12
 10538              		.cfi_def_cfa_offset 32
 10539 015c 415D     		popq	%r13
 10540              		.cfi_def_cfa_offset 24
 10541 015e 415E     		popq	%r14
 10542              		.cfi_def_cfa_offset 16
 10543              	.LVL1375:
 10544 0160 415F     		popq	%r15
 10545              		.cfi_def_cfa_offset 8
 10546              	.LVL1376:
 10547 0162 C3       		ret
 10548              	.LVL1377:
 10549              		.p2align 4,,10
 10550 0163 0F1F4400 		.p2align 3
 10550      00
 10551              	.L1191:
 10552              		.cfi_restore_state
 10553              	.LBB290:
4007:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->zstream.avail_out = (sizeof tmpbuf);
 10554              		.loc 1 4007 0
 10555 0168 488D4424 		leaq	16(%rsp), %rax
 10555      10
4018:fltk-1.3.4-1/png/pngrutil.c **** 
 10556              		.loc 1 4018 0
 10557 016d 31F6     		xorl	%esi, %esi
4008:fltk-1.3.4-1/png/pngrutil.c ****       }
 10558              		.loc 1 4008 0
 10559 016f C7836001 		movl	$1024, 352(%rbx)
 10559      00000004 
 10559      0000
4018:fltk-1.3.4-1/png/pngrutil.c **** 
 10560              		.loc 1 4018 0
 10561 0179 4C89FF   		movq	%r15, %rdi
4007:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->zstream.avail_out = (sizeof tmpbuf);
 10562              		.loc 1 4007 0
 10563 017c 48898358 		movq	%rax, 344(%rbx)
 10563      010000
4018:fltk-1.3.4-1/png/pngrutil.c **** 
 10564              		.loc 1 4018 0
 10565 0183 E8000000 		call	inflate
 10565      00
 10566              	.LVL1378:
4025:fltk-1.3.4-1/png/pngrutil.c **** 
 10567              		.loc 1 4025 0
 10568 0188 8B936001 		movl	352(%rbx), %edx
 10568      0000
4027:fltk-1.3.4-1/png/pngrutil.c **** 
 10569              		.loc 1 4027 0
 10570 018e C7836001 		movl	$0, 352(%rbx)
 10570      00000000 
 10570      0000
4025:fltk-1.3.4-1/png/pngrutil.c **** 
 10571              		.loc 1 4025 0
 10572 0198 4829D5   		subq	%rdx, %rbp
 10573              	.LVL1379:
 10574 019b 4881C500 		addq	$1024, %rbp
 10574      040000
 10575              	.LVL1380:
4029:fltk-1.3.4-1/png/pngrutil.c ****       {
 10576              		.loc 1 4029 0
 10577 01a2 83F801   		cmpl	$1, %eax
 10578 01a5 7582     		jne	.L1194
 10579              	.L1213:
4037:fltk-1.3.4-1/png/pngrutil.c ****             png_chunk_benign_error(png_ptr, "Extra compressed data");
 10580              		.loc 1 4037 0
 10581 01a7 8B934801 		movl	328(%rbx), %edx
 10581      0000
4034:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->flags |= PNG_FLAG_ZSTREAM_ENDED;
 10582              		.loc 1 4034 0
 10583 01ad 838B2C01 		orl	$8, 300(%rbx)
 10583      000008
4035:fltk-1.3.4-1/png/pngrutil.c **** 
 10584              		.loc 1 4035 0
 10585 01b4 838B3001 		orl	$8, 304(%rbx)
 10585      000008
4032:fltk-1.3.4-1/png/pngrutil.c **** 
 10586              		.loc 1 4032 0
 10587 01bb 48C78358 		movq	$0, 344(%rbx)
 10587      01000000 
 10587      000000
4037:fltk-1.3.4-1/png/pngrutil.c ****             png_chunk_benign_error(png_ptr, "Extra compressed data");
 10588              		.loc 1 4037 0
 10589 01c6 85D2     		testl	%edx, %edx
 10590 01c8 752A     		jne	.L1195
4037:fltk-1.3.4-1/png/pngrutil.c ****             png_chunk_benign_error(png_ptr, "Extra compressed data");
 10591              		.loc 1 4037 0 is_stmt 0 discriminator 1
 10592 01ca 8B835802 		movl	600(%rbx), %eax
 10592      0000
 10593              	.LVL1381:
 10594 01d0 85C0     		testl	%eax, %eax
 10595 01d2 7520     		jne	.L1195
 10596              	.L1196:
 10597              	.LBE290:
4057:fltk-1.3.4-1/png/pngrutil.c ****    {
 10598              		.loc 1 4057 0 is_stmt 1
 10599 01d4 4885ED   		testq	%rbp, %rbp
 10600 01d7 0F845DFF 		je	.L1185
 10600      FFFF
4062:fltk-1.3.4-1/png/pngrutil.c ****          png_error(png_ptr, "Not enough image data");
 10601              		.loc 1 4062 0
 10602 01dd 4D85F6   		testq	%r14, %r14
 10603 01e0 7546     		jne	.L1202
4066:fltk-1.3.4-1/png/pngrutil.c ****    }
 10604              		.loc 1 4066 0
 10605 01e2 BE000000 		movl	$.LC101, %esi
 10605      00
 10606 01e7 4889DF   		movq	%rbx, %rdi
 10607              	.L1212:
 10608 01ea E8000000 		call	png_chunk_benign_error
 10608      00
 10609              	.LVL1382:
 10610 01ef E946FFFF 		jmp	.L1185
 10610      FF
 10611              	.L1195:
 10612              	.LBB291:
4038:fltk-1.3.4-1/png/pngrutil.c ****          break;
 10613              		.loc 1 4038 0
 10614 01f4 BE000000 		movl	$.LC100, %esi
 10614      00
 10615 01f9 4889DF   		movq	%rbx, %rdi
 10616 01fc E8000000 		call	png_chunk_benign_error
 10616      00
 10617              	.LVL1383:
 10618 0201 EBD1     		jmp	.L1196
 10619              	.LVL1384:
 10620              	.L1214:
4044:fltk-1.3.4-1/png/pngrutil.c **** 
 10621              		.loc 1 4044 0
 10622 0203 89C6     		movl	%eax, %esi
 10623 0205 4889DF   		movq	%rbx, %rdi
 10624 0208 E8000000 		call	png_zstream_error
 10624      00
 10625              	.LVL1385:
4046:fltk-1.3.4-1/png/pngrutil.c ****             png_chunk_error(png_ptr, png_ptr->zstream.msg);
 10626              		.loc 1 4046 0
 10627 020d 4D85F6   		testq	%r14, %r14
4047:fltk-1.3.4-1/png/pngrutil.c **** 
 10628              		.loc 1 4047 0
 10629 0210 488BB370 		movq	368(%rbx), %rsi
 10629      010000
 10630 0217 4889DF   		movq	%rbx, %rdi
4046:fltk-1.3.4-1/png/pngrutil.c ****             png_chunk_error(png_ptr, png_ptr->zstream.msg);
 10631              		.loc 1 4046 0
 10632 021a 74CE     		je	.L1212
4047:fltk-1.3.4-1/png/pngrutil.c **** 
 10633              		.loc 1 4047 0
 10634 021c E8000000 		call	png_chunk_error
 10634      00
 10635              	.LVL1386:
 10636              		.p2align 4,,10
 10637 0221 0F1F8000 		.p2align 3
 10637      000000
 10638              	.L1202:
 10639              	.LBB287:
3971:fltk-1.3.4-1/png/pngrutil.c ****          }
 10640              		.loc 1 3971 0
 10641 0228 BE000000 		movl	$.LC99, %esi
 10641      00
 10642 022d 4889DF   		movq	%rbx, %rdi
 10643 0230 E8000000 		call	png_error
 10643      00
 10644              	.LVL1387:
 10645              	.L1215:
 10646              	.LBE287:
 10647              	.LBE291:
 10648              		.loc 1 4068 0
 10649 0235 E8000000 		call	__stack_chk_fail
 10649      00
 10650              	.LVL1388:
 10651              		.cfi_endproc
 10652              	.LFE103:
 10654              		.section	.text.unlikely.png_read_IDAT_data
 10655              	.LCOLDE102:
 10656              		.section	.text.png_read_IDAT_data
 10657              	.LHOTE102:
 10658              		.section	.text.unlikely.png_read_finish_IDAT,"ax",@progbits
 10659              	.LCOLDB103:
 10660              		.section	.text.png_read_finish_IDAT,"ax",@progbits
 10661              	.LHOTB103:
 10662              		.p2align 4,,15
 10663              		.globl	png_read_finish_IDAT
 10665              	png_read_finish_IDAT:
 10666              	.LFB104:
4069:fltk-1.3.4-1/png/pngrutil.c **** 
4070:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
4071:fltk-1.3.4-1/png/pngrutil.c **** png_read_finish_IDAT(png_structrp png_ptr)
4072:fltk-1.3.4-1/png/pngrutil.c **** {
 10667              		.loc 1 4072 0
 10668              		.cfi_startproc
 10669              	.LVL1389:
 10670 0000 53       		pushq	%rbx
 10671              		.cfi_def_cfa_offset 16
 10672              		.cfi_offset 3, -16
4073:fltk-1.3.4-1/png/pngrutil.c ****    /* We don't need any more data and the stream should have ended, however the
4074:fltk-1.3.4-1/png/pngrutil.c ****     * LZ end code may actually not have been processed.  In this case we must
4075:fltk-1.3.4-1/png/pngrutil.c ****     * read it otherwise stray unread IDAT data or, more likely, an IDAT chunk
4076:fltk-1.3.4-1/png/pngrutil.c ****     * may still remain to be consumed.
4077:fltk-1.3.4-1/png/pngrutil.c ****     */
4078:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->flags & PNG_FLAG_ZSTREAM_ENDED) == 0)
 10673              		.loc 1 4078 0
 10674 0001 F6873001 		testb	$8, 304(%rdi)
 10674      000008
4072:fltk-1.3.4-1/png/pngrutil.c ****    /* We don't need any more data and the stream should have ended, however the
 10675              		.loc 1 4072 0
 10676 0008 4889FB   		movq	%rdi, %rbx
 10677              		.loc 1 4078 0
 10678 000b 7413     		je	.L1222
 10679              	.LVL1390:
 10680              	.L1218:
4079:fltk-1.3.4-1/png/pngrutil.c ****    {
4080:fltk-1.3.4-1/png/pngrutil.c ****       /* The NULL causes png_read_IDAT_data to swallow any remaining bytes in
4081:fltk-1.3.4-1/png/pngrutil.c ****        * the compressed stream, but the stream may be damaged too, so even after
4082:fltk-1.3.4-1/png/pngrutil.c ****        * this call we may need to terminate the zstream ownership.
4083:fltk-1.3.4-1/png/pngrutil.c ****        */
4084:fltk-1.3.4-1/png/pngrutil.c ****       png_read_IDAT_data(png_ptr, NULL, 0);
4085:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.next_out = NULL; /* safety */
4086:fltk-1.3.4-1/png/pngrutil.c **** 
4087:fltk-1.3.4-1/png/pngrutil.c ****       /* Now clear everything out for safety; the following may not have been
4088:fltk-1.3.4-1/png/pngrutil.c ****        * done.
4089:fltk-1.3.4-1/png/pngrutil.c ****        */
4090:fltk-1.3.4-1/png/pngrutil.c ****       if ((png_ptr->flags & PNG_FLAG_ZSTREAM_ENDED) == 0)
4091:fltk-1.3.4-1/png/pngrutil.c ****       {
4092:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->mode |= PNG_AFTER_IDAT;
4093:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->flags |= PNG_FLAG_ZSTREAM_ENDED;
4094:fltk-1.3.4-1/png/pngrutil.c ****       }
4095:fltk-1.3.4-1/png/pngrutil.c ****    }
4096:fltk-1.3.4-1/png/pngrutil.c **** 
4097:fltk-1.3.4-1/png/pngrutil.c ****    /* If the zstream has not been released do it now *and* terminate the reading
4098:fltk-1.3.4-1/png/pngrutil.c ****     * of the final IDAT chunk.
4099:fltk-1.3.4-1/png/pngrutil.c ****     */
4100:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->zowner == png_IDAT)
 10681              		.loc 1 4100 0
 10682 000d 81BB3801 		cmpl	$1229209940, 312(%rbx)
 10682      00005441 
 10682      4449
 10683 0017 7441     		je	.L1223
 10684              	.L1216:
4101:fltk-1.3.4-1/png/pngrutil.c ****    {
4102:fltk-1.3.4-1/png/pngrutil.c ****       /* Always do this; the pointers otherwise point into the read buffer. */
4103:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.next_in = NULL;
4104:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.avail_in = 0;
4105:fltk-1.3.4-1/png/pngrutil.c **** 
4106:fltk-1.3.4-1/png/pngrutil.c ****       /* Now we no longer own the zstream. */
4107:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zowner = 0;
4108:fltk-1.3.4-1/png/pngrutil.c **** 
4109:fltk-1.3.4-1/png/pngrutil.c ****       /* The slightly weird semantics of the sequential IDAT reading is that we
4110:fltk-1.3.4-1/png/pngrutil.c ****        * are always in or at the end of an IDAT chunk, so we always need to do a
4111:fltk-1.3.4-1/png/pngrutil.c ****        * crc_finish here.  If idat_size is non-zero we also need to read the
4112:fltk-1.3.4-1/png/pngrutil.c ****        * spurious bytes at the end of the chunk now.
4113:fltk-1.3.4-1/png/pngrutil.c ****        */
4114:fltk-1.3.4-1/png/pngrutil.c ****       (void)png_crc_finish(png_ptr, png_ptr->idat_size);
4115:fltk-1.3.4-1/png/pngrutil.c ****    }
4116:fltk-1.3.4-1/png/pngrutil.c **** }
 10685              		.loc 1 4116 0
 10686 0019 5B       		popq	%rbx
 10687              		.cfi_remember_state
 10688              		.cfi_def_cfa_offset 8
 10689              	.LVL1391:
 10690 001a C3       		ret
 10691              	.LVL1392:
 10692 001b 0F1F4400 		.p2align 4,,10
 10692      00
 10693              		.p2align 3
 10694              	.L1222:
 10695              		.cfi_restore_state
4084:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.next_out = NULL; /* safety */
 10696              		.loc 1 4084 0
 10697 0020 31D2     		xorl	%edx, %edx
 10698 0022 31F6     		xorl	%esi, %esi
 10699 0024 E8000000 		call	png_read_IDAT_data
 10699      00
 10700              	.LVL1393:
4090:fltk-1.3.4-1/png/pngrutil.c ****       {
 10701              		.loc 1 4090 0
 10702 0029 8B833001 		movl	304(%rbx), %eax
 10702      0000
4085:fltk-1.3.4-1/png/pngrutil.c **** 
 10703              		.loc 1 4085 0
 10704 002f 48C78358 		movq	$0, 344(%rbx)
 10704      01000000 
 10704      000000
4090:fltk-1.3.4-1/png/pngrutil.c ****       {
 10705              		.loc 1 4090 0
 10706 003a A808     		testb	$8, %al
 10707 003c 75CF     		jne	.L1218
4093:fltk-1.3.4-1/png/pngrutil.c ****       }
 10708              		.loc 1 4093 0
 10709 003e 83C808   		orl	$8, %eax
4092:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->flags |= PNG_FLAG_ZSTREAM_ENDED;
 10710              		.loc 1 4092 0
 10711 0041 838B2C01 		orl	$8, 300(%rbx)
 10711      000008
4100:fltk-1.3.4-1/png/pngrutil.c ****    {
 10712              		.loc 1 4100 0
 10713 0048 81BB3801 		cmpl	$1229209940, 312(%rbx)
 10713      00005441 
 10713      4449
4093:fltk-1.3.4-1/png/pngrutil.c ****       }
 10714              		.loc 1 4093 0
 10715 0052 89833001 		movl	%eax, 304(%rbx)
 10715      0000
4100:fltk-1.3.4-1/png/pngrutil.c ****    {
 10716              		.loc 1 4100 0
 10717 0058 75BF     		jne	.L1216
 10718              	.L1223:
 10719              	.LVL1394:
 10720              	.LBB294:
 10721              	.LBB295:
4103:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->zstream.avail_in = 0;
 10722              		.loc 1 4103 0
 10723 005a 48C78340 		movq	$0, 320(%rbx)
 10723      01000000 
 10723      000000
4104:fltk-1.3.4-1/png/pngrutil.c **** 
 10724              		.loc 1 4104 0
 10725 0065 C7834801 		movl	$0, 328(%rbx)
 10725      00000000 
 10725      0000
4114:fltk-1.3.4-1/png/pngrutil.c ****    }
 10726              		.loc 1 4114 0
 10727 006f 4889DF   		movq	%rbx, %rdi
4107:fltk-1.3.4-1/png/pngrutil.c **** 
 10728              		.loc 1 4107 0
 10729 0072 C7833801 		movl	$0, 312(%rbx)
 10729      00000000 
 10729      0000
4114:fltk-1.3.4-1/png/pngrutil.c ****    }
 10730              		.loc 1 4114 0
 10731 007c 8BB35802 		movl	600(%rbx), %esi
 10731      0000
 10732              	.LBE295:
 10733              	.LBE294:
 10734              		.loc 1 4116 0
 10735 0082 5B       		popq	%rbx
 10736              		.cfi_def_cfa_offset 8
 10737              	.LVL1395:
 10738              	.LBB297:
 10739              	.LBB296:
4114:fltk-1.3.4-1/png/pngrutil.c ****    }
 10740              		.loc 1 4114 0
 10741 0083 E9000000 		jmp	png_crc_finish
 10741      00
 10742              	.LVL1396:
 10743              	.LBE296:
 10744              	.LBE297:
 10745              		.cfi_endproc
 10746              	.LFE104:
 10748              		.section	.text.unlikely.png_read_finish_IDAT
 10749              	.LCOLDE103:
 10750              		.section	.text.png_read_finish_IDAT
 10751              	.LHOTE103:
 10752              		.section	.text.unlikely.png_read_finish_row,"ax",@progbits
 10753              	.LCOLDB104:
 10754              		.section	.text.png_read_finish_row,"ax",@progbits
 10755              	.LHOTB104:
 10756              		.p2align 4,,15
 10757              		.globl	png_read_finish_row
 10759              	png_read_finish_row:
 10760              	.LFB105:
4117:fltk-1.3.4-1/png/pngrutil.c **** 
4118:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
4119:fltk-1.3.4-1/png/pngrutil.c **** png_read_finish_row(png_structrp png_ptr)
4120:fltk-1.3.4-1/png/pngrutil.c **** {
 10761              		.loc 1 4120 0
 10762              		.cfi_startproc
 10763              	.LVL1397:
4121:fltk-1.3.4-1/png/pngrutil.c ****    /* Arrays to facilitate easy interlacing - use pass (0 - 6) as index */
4122:fltk-1.3.4-1/png/pngrutil.c **** 
4123:fltk-1.3.4-1/png/pngrutil.c ****    /* Start of interlace block */
4124:fltk-1.3.4-1/png/pngrutil.c ****    static PNG_CONST png_byte png_pass_start[7] = {0, 4, 0, 2, 0, 1, 0};
4125:fltk-1.3.4-1/png/pngrutil.c **** 
4126:fltk-1.3.4-1/png/pngrutil.c ****    /* Offset to next interlace block */
4127:fltk-1.3.4-1/png/pngrutil.c ****    static PNG_CONST png_byte png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1};
4128:fltk-1.3.4-1/png/pngrutil.c **** 
4129:fltk-1.3.4-1/png/pngrutil.c ****    /* Start of interlace block in the y direction */
4130:fltk-1.3.4-1/png/pngrutil.c ****    static PNG_CONST png_byte png_pass_ystart[7] = {0, 0, 4, 0, 2, 0, 1};
4131:fltk-1.3.4-1/png/pngrutil.c **** 
4132:fltk-1.3.4-1/png/pngrutil.c ****    /* Offset to next interlace block in the y direction */
4133:fltk-1.3.4-1/png/pngrutil.c ****    static PNG_CONST png_byte png_pass_yinc[7] = {8, 8, 8, 4, 4, 2, 2};
4134:fltk-1.3.4-1/png/pngrutil.c **** 
4135:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_read_finish_row");
4136:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->row_number++;
 10764              		.loc 1 4136 0
 10765 0000 8B871402 		movl	532(%rdi), %eax
 10765      0000
 10766 0006 83C001   		addl	$1, %eax
4137:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 10767              		.loc 1 4137 0
 10768 0009 3B870002 		cmpl	512(%rdi), %eax
 10768      0000
4136:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 10769              		.loc 1 4136 0
 10770 000f 89871402 		movl	%eax, 532(%rdi)
 10770      0000
 10771              		.loc 1 4137 0
 10772 0015 0F82CD00 		jb	.L1235
 10772      0000
4120:fltk-1.3.4-1/png/pngrutil.c ****    /* Arrays to facilitate easy interlacing - use pass (0 - 6) as index */
 10773              		.loc 1 4120 0
 10774 001b 53       		pushq	%rbx
 10775              		.cfi_def_cfa_offset 16
 10776              		.cfi_offset 3, -16
4138:fltk-1.3.4-1/png/pngrutil.c ****       return;
4139:fltk-1.3.4-1/png/pngrutil.c **** 
4140:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->interlaced != 0)
 10777              		.loc 1 4140 0
 10778 001c 80BF7402 		cmpb	$0, 628(%rdi)
 10778      000000
 10779 0023 4889FB   		movq	%rdi, %rbx
 10780 0026 0F84A800 		je	.L1226
 10780      0000
 10781              	.LBB298:
 10782              	.LBB299:
  54:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  55:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  56:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  57:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memmove (void *__dest, const void *__src, size_t __len))
  58:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  59:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  60:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  61:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  62:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifdef __USE_GNU
  63:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  64:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
  65:/usr/include/x86_64-linux-gnu/bits/string3.h **** 		size_t __len))
  66:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  67:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
  68:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  69:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  70:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  71:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  72:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* The first two tests here help to catch a somewhat common problem
  73:/usr/include/x86_64-linux-gnu/bits/string3.h ****    where the second and third parameter are transposed.  This is
  74:/usr/include/x86_64-linux-gnu/bits/string3.h ****    especially problematic if the intended fill value is zero.  In this
  75:/usr/include/x86_64-linux-gnu/bits/string3.h ****    case no work is done at all.  We detect these problems by referring
  76:/usr/include/x86_64-linux-gnu/bits/string3.h ****    non-existing functions.  */
  77:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  78:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memset (void *__dest, int __ch, size_t __len))
  79:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  80:/usr/include/x86_64-linux-gnu/bits/string3.h ****   /* GCC-5.0 and newer implements these checks in the compiler, so we don't
  81:/usr/include/x86_64-linux-gnu/bits/string3.h ****      need them here.  */
  82:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  83:/usr/include/x86_64-linux-gnu/bits/string3.h ****   if (__builtin_constant_p (__len) && __len == 0
  84:/usr/include/x86_64-linux-gnu/bits/string3.h ****       && (!__builtin_constant_p (__ch) || __ch != 0))
  85:/usr/include/x86_64-linux-gnu/bits/string3.h ****     {
  86:/usr/include/x86_64-linux-gnu/bits/string3.h ****       __warn_memset_zero_len ();
  87:/usr/include/x86_64-linux-gnu/bits/string3.h ****       return __dest;
  88:/usr/include/x86_64-linux-gnu/bits/string3.h ****     }
  89:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  90:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 10783              		.loc 2 90 0
 10784 002c 488B8708 		movq	520(%rdi), %rax
 10784      020000
 10785              	.LBE299:
 10786              	.LBE298:
4141:fltk-1.3.4-1/png/pngrutil.c ****    {
4142:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->row_number = 0;
 10787              		.loc 1 4142 0
 10788 0033 C7871402 		movl	$0, 532(%rdi)
 10788      00000000 
 10788      0000
 10789              	.LVL1398:
 10790              	.LBB301:
 10791              	.LBB300:
 10792              		.loc 2 90 0
 10793 003d 31F6     		xorl	%esi, %esi
 10794 003f 488BBF20 		movq	544(%rdi), %rdi
 10794      020000
 10795              	.LVL1399:
 10796 0046 488D5001 		leaq	1(%rax), %rdx
 10797              	.LVL1400:
 10798 004a E8000000 		call	memset
 10798      00
 10799              	.LVL1401:
 10800 004f 0FB68375 		movzbl	629(%rbx), %eax
 10800      020000
 10801 0056 8D7801   		leal	1(%rax), %edi
 10802              	.LBE300:
 10803              	.LBE301:
4143:fltk-1.3.4-1/png/pngrutil.c **** 
4144:fltk-1.3.4-1/png/pngrutil.c ****       /* TO DO: don't do this if prev_row isn't needed (requires
4145:fltk-1.3.4-1/png/pngrutil.c ****        * read-ahead of the next row's filter byte.
4146:fltk-1.3.4-1/png/pngrutil.c ****        */
4147:fltk-1.3.4-1/png/pngrutil.c ****       memset(png_ptr->prev_row, 0, png_ptr->rowbytes + 1);
4148:fltk-1.3.4-1/png/pngrutil.c **** 
4149:fltk-1.3.4-1/png/pngrutil.c ****       do
4150:fltk-1.3.4-1/png/pngrutil.c ****       {
4151:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->pass++;
4152:fltk-1.3.4-1/png/pngrutil.c **** 
4153:fltk-1.3.4-1/png/pngrutil.c ****          if (png_ptr->pass >= 7)
 10804              		.loc 1 4153 0
 10805 0059 4080FF06 		cmpb	$6, %dil
 10806 005d 776E     		ja	.L1236
 10807 005f 90       		.p2align 4,,10
 10808              		.p2align 3
 10809              	.L1227:
4154:fltk-1.3.4-1/png/pngrutil.c ****             break;
4155:fltk-1.3.4-1/png/pngrutil.c **** 
4156:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->iwidth = (png_ptr->width +
4157:fltk-1.3.4-1/png/pngrutil.c ****             png_pass_inc[png_ptr->pass] - 1 -
 10810              		.loc 1 4157 0
 10811 0060 400FB6F7 		movzbl	%dil, %esi
4158:fltk-1.3.4-1/png/pngrutil.c ****             png_pass_start[png_ptr->pass]) /
 10812              		.loc 1 4158 0
 10813 0064 8B83F801 		movl	504(%rbx), %eax
 10813      0000
4156:fltk-1.3.4-1/png/pngrutil.c ****             png_pass_inc[png_ptr->pass] - 1 -
 10814              		.loc 1 4156 0
 10815 006a 0FB68E00 		movzbl	png_pass_inc.7347(%rsi), %ecx
 10815      000000
 10816              		.loc 1 4158 0
 10817 0071 0FB69600 		movzbl	png_pass_start.7346(%rsi), %edx
 10817      000000
 10818 0078 8D4401FF 		leal	-1(%rcx,%rax), %eax
 10819 007c 29D0     		subl	%edx, %eax
 10820 007e 31D2     		xorl	%edx, %edx
 10821 0080 F7F1     		divl	%ecx
4159:fltk-1.3.4-1/png/pngrutil.c ****             png_pass_inc[png_ptr->pass];
4160:fltk-1.3.4-1/png/pngrutil.c **** 
4161:fltk-1.3.4-1/png/pngrutil.c ****          if ((png_ptr->transformations & PNG_INTERLACE) == 0)
 10822              		.loc 1 4161 0
 10823 0082 F6833401 		testb	$2, 308(%rbx)
 10823      000002
4158:fltk-1.3.4-1/png/pngrutil.c ****             png_pass_inc[png_ptr->pass];
 10824              		.loc 1 4158 0
 10825 0089 89C1     		movl	%eax, %ecx
4156:fltk-1.3.4-1/png/pngrutil.c ****             png_pass_inc[png_ptr->pass] - 1 -
 10826              		.loc 1 4156 0
 10827 008b 89831002 		movl	%eax, 528(%rbx)
 10827      0000
 10828              		.loc 1 4161 0
 10829 0091 754D     		jne	.L1228
4162:fltk-1.3.4-1/png/pngrutil.c ****          {
4163:fltk-1.3.4-1/png/pngrutil.c ****             png_ptr->num_rows = (png_ptr->height +
 10830              		.loc 1 4163 0
 10831 0093 440FB686 		movzbl	png_pass_yinc.7349(%rsi), %r8d
 10831      00000000 
4164:fltk-1.3.4-1/png/pngrutil.c ****                 png_pass_yinc[png_ptr->pass] - 1 -
4165:fltk-1.3.4-1/png/pngrutil.c ****                 png_pass_ystart[png_ptr->pass]) /
 10832              		.loc 1 4165 0
 10833 009b 8B83FC01 		movl	508(%rbx), %eax
 10833      0000
 10834 00a1 0FB69600 		movzbl	png_pass_ystart.7348(%rsi), %edx
 10834      000000
 10835 00a8 418D4400 		leal	-1(%r8,%rax), %eax
 10835      FF
 10836 00ad 29D0     		subl	%edx, %eax
 10837 00af 31D2     		xorl	%edx, %edx
 10838 00b1 41F7F0   		divl	%r8d
4166:fltk-1.3.4-1/png/pngrutil.c ****                 png_pass_yinc[png_ptr->pass];
4167:fltk-1.3.4-1/png/pngrutil.c ****          }
4168:fltk-1.3.4-1/png/pngrutil.c **** 
4169:fltk-1.3.4-1/png/pngrutil.c ****          else  /* if (png_ptr->transformations & PNG_INTERLACE) */
4170:fltk-1.3.4-1/png/pngrutil.c ****             break; /* libpng deinterlacing sees every row */
4171:fltk-1.3.4-1/png/pngrutil.c **** 
4172:fltk-1.3.4-1/png/pngrutil.c ****       } while (png_ptr->num_rows == 0 || png_ptr->iwidth == 0);
 10839              		.loc 1 4172 0
 10840 00b4 85C9     		testl	%ecx, %ecx
 10841 00b6 8D5701   		leal	1(%rdi), %edx
4163:fltk-1.3.4-1/png/pngrutil.c ****                 png_pass_yinc[png_ptr->pass] - 1 -
 10842              		.loc 1 4163 0
 10843 00b9 89830002 		movl	%eax, 512(%rbx)
 10843      0000
 10844              		.loc 1 4172 0
 10845 00bf 7404     		je	.L1232
 10846 00c1 85C0     		testl	%eax, %eax
 10847 00c3 751B     		jne	.L1228
 10848              	.L1232:
 10849 00c5 89D7     		movl	%edx, %edi
4153:fltk-1.3.4-1/png/pngrutil.c ****             break;
 10850              		.loc 1 4153 0
 10851 00c7 4080FF06 		cmpb	$6, %dil
 10852 00cb 7693     		jbe	.L1227
 10853              	.L1236:
 10854 00cd 4088BB75 		movb	%dil, 629(%rbx)
 10854      020000
 10855              	.LVL1402:
 10856              	.L1226:
4173:fltk-1.3.4-1/png/pngrutil.c **** 
4174:fltk-1.3.4-1/png/pngrutil.c ****       if (png_ptr->pass < 7)
4175:fltk-1.3.4-1/png/pngrutil.c ****          return;
4176:fltk-1.3.4-1/png/pngrutil.c ****    }
4177:fltk-1.3.4-1/png/pngrutil.c **** 
4178:fltk-1.3.4-1/png/pngrutil.c ****    /* Here after at the end of the last row of the last pass. */
4179:fltk-1.3.4-1/png/pngrutil.c ****    png_read_finish_IDAT(png_ptr);
 10857              		.loc 1 4179 0
 10858 00d4 4889DF   		movq	%rbx, %rdi
4180:fltk-1.3.4-1/png/pngrutil.c **** }
 10859              		.loc 1 4180 0
 10860 00d7 5B       		popq	%rbx
 10861              		.cfi_remember_state
 10862              		.cfi_restore 3
 10863              		.cfi_def_cfa_offset 8
 10864              	.LVL1403:
4179:fltk-1.3.4-1/png/pngrutil.c **** }
 10865              		.loc 1 4179 0
 10866 00d8 E9000000 		jmp	png_read_finish_IDAT
 10866      00
 10867              	.LVL1404:
 10868 00dd 0F1F00   		.p2align 4,,10
 10869              		.p2align 3
 10870              	.L1228:
 10871              		.cfi_restore_state
 10872 00e0 4088BB75 		movb	%dil, 629(%rbx)
 10872      020000
 10873              		.loc 1 4180 0
 10874 00e7 5B       		popq	%rbx
 10875              		.cfi_restore 3
 10876              		.cfi_def_cfa_offset 8
 10877              	.LVL1405:
 10878              	.L1235:
 10879 00e8 F3C3     		rep ret
 10880              		.cfi_endproc
 10881              	.LFE105:
 10883              		.section	.text.unlikely.png_read_finish_row
 10884              	.LCOLDE104:
 10885              		.section	.text.png_read_finish_row
 10886              	.LHOTE104:
 10887              		.section	.rodata.str1.8
 10888 01bb 00000000 		.align 8
 10888      00
 10889              	.LC105:
 10890 01c0 526F7720 		.string	"Row has too many bytes to allocate in memory"
 10890      68617320 
 10890      746F6F20 
 10890      6D616E79 
 10890      20627974 
 10891              		.section	.text.unlikely.png_read_start_row,"ax",@progbits
 10892              	.LCOLDB106:
 10893              		.section	.text.png_read_start_row,"ax",@progbits
 10894              	.LHOTB106:
 10895              		.p2align 4,,15
 10896              		.globl	png_read_start_row
 10898              	png_read_start_row:
 10899              	.LFB106:
4181:fltk-1.3.4-1/png/pngrutil.c **** #endif /* SEQUENTIAL_READ */
4182:fltk-1.3.4-1/png/pngrutil.c **** 
4183:fltk-1.3.4-1/png/pngrutil.c **** void /* PRIVATE */
4184:fltk-1.3.4-1/png/pngrutil.c **** png_read_start_row(png_structrp png_ptr)
4185:fltk-1.3.4-1/png/pngrutil.c **** {
 10900              		.loc 1 4185 0
 10901              		.cfi_startproc
 10902              	.LVL1406:
 10903 0000 55       		pushq	%rbp
 10904              		.cfi_def_cfa_offset 16
 10905              		.cfi_offset 6, -16
 10906 0001 53       		pushq	%rbx
 10907              		.cfi_def_cfa_offset 24
 10908              		.cfi_offset 3, -24
 10909 0002 4889FB   		movq	%rdi, %rbx
 10910 0005 4883EC08 		subq	$8, %rsp
 10911              		.cfi_def_cfa_offset 32
4186:fltk-1.3.4-1/png/pngrutil.c ****    /* Arrays to facilitate easy interlacing - use pass (0 - 6) as index */
4187:fltk-1.3.4-1/png/pngrutil.c **** 
4188:fltk-1.3.4-1/png/pngrutil.c ****    /* Start of interlace block */
4189:fltk-1.3.4-1/png/pngrutil.c ****    static PNG_CONST png_byte png_pass_start[7] = {0, 4, 0, 2, 0, 1, 0};
4190:fltk-1.3.4-1/png/pngrutil.c **** 
4191:fltk-1.3.4-1/png/pngrutil.c ****    /* Offset to next interlace block */
4192:fltk-1.3.4-1/png/pngrutil.c ****    static PNG_CONST png_byte png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1};
4193:fltk-1.3.4-1/png/pngrutil.c **** 
4194:fltk-1.3.4-1/png/pngrutil.c ****    /* Start of interlace block in the y direction */
4195:fltk-1.3.4-1/png/pngrutil.c ****    static PNG_CONST png_byte png_pass_ystart[7] = {0, 0, 4, 0, 2, 0, 1};
4196:fltk-1.3.4-1/png/pngrutil.c **** 
4197:fltk-1.3.4-1/png/pngrutil.c ****    /* Offset to next interlace block in the y direction */
4198:fltk-1.3.4-1/png/pngrutil.c ****    static PNG_CONST png_byte png_pass_yinc[7] = {8, 8, 8, 4, 4, 2, 2};
4199:fltk-1.3.4-1/png/pngrutil.c **** 
4200:fltk-1.3.4-1/png/pngrutil.c ****    int max_pixel_depth;
4201:fltk-1.3.4-1/png/pngrutil.c ****    png_size_t row_bytes;
4202:fltk-1.3.4-1/png/pngrutil.c **** 
4203:fltk-1.3.4-1/png/pngrutil.c ****    png_debug(1, "in png_read_start_row");
4204:fltk-1.3.4-1/png/pngrutil.c **** 
4205:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_TRANSFORMS_SUPPORTED
4206:fltk-1.3.4-1/png/pngrutil.c ****    png_init_read_transformations(png_ptr);
 10912              		.loc 1 4206 0
 10913 0009 E8000000 		call	png_init_read_transformations
 10913      00
 10914              	.LVL1407:
4207:fltk-1.3.4-1/png/pngrutil.c **** #endif
4208:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->interlaced != 0)
 10915              		.loc 1 4208 0
 10916 000e 80BB7402 		cmpb	$0, 628(%rbx)
 10916      000000
 10917 0015 7449     		je	.L1238
4209:fltk-1.3.4-1/png/pngrutil.c ****    {
4210:fltk-1.3.4-1/png/pngrutil.c ****       if ((png_ptr->transformations & PNG_INTERLACE) == 0)
 10918              		.loc 1 4210 0
 10919 0017 8BB33401 		movl	308(%rbx), %esi
 10919      0000
4211:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->num_rows = (png_ptr->height + png_pass_yinc[0] - 1 -
 10920              		.loc 1 4211 0
 10921 001d 8B83FC01 		movl	508(%rbx), %eax
 10921      0000
4210:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->num_rows = (png_ptr->height + png_pass_yinc[0] - 1 -
 10922              		.loc 1 4210 0
 10923 0023 40F6C602 		testb	$2, %sil
 10924 0027 0F845302 		je	.L1292
 10924      0000
4212:fltk-1.3.4-1/png/pngrutil.c ****              png_pass_ystart[0]) / png_pass_yinc[0];
4213:fltk-1.3.4-1/png/pngrutil.c **** 
4214:fltk-1.3.4-1/png/pngrutil.c ****       else
4215:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->num_rows = png_ptr->height;
 10925              		.loc 1 4215 0
 10926 002d 89830002 		movl	%eax, 512(%rbx)
 10926      0000
 10927              	.L1240:
4216:fltk-1.3.4-1/png/pngrutil.c **** 
4217:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->iwidth = (png_ptr->width +
4218:fltk-1.3.4-1/png/pngrutil.c ****           png_pass_inc[png_ptr->pass] - 1 -
 10928              		.loc 1 4218 0
 10929 0033 0FB69375 		movzbl	629(%rbx), %edx
 10929      020000
4217:fltk-1.3.4-1/png/pngrutil.c ****           png_pass_inc[png_ptr->pass] - 1 -
 10930              		.loc 1 4217 0
 10931 003a 8B8BF801 		movl	504(%rbx), %ecx
 10931      0000
 10932 0040 0FB6BA00 		movzbl	png_pass_inc.7356(%rdx), %edi
 10932      000000
 10933 0047 0FB69200 		movzbl	png_pass_start.7355(%rdx), %edx
 10933      000000
 10934 004e 8D4439FF 		leal	-1(%rcx,%rdi), %eax
 10935 0052 29D0     		subl	%edx, %eax
 10936 0054 31D2     		xorl	%edx, %edx
 10937 0056 F7F7     		divl	%edi
 10938 0058 89831002 		movl	%eax, 528(%rbx)
 10938      0000
 10939 005e EB1E     		jmp	.L1241
 10940              		.p2align 4,,10
 10941              		.p2align 3
 10942              	.L1238:
4219:fltk-1.3.4-1/png/pngrutil.c ****           png_pass_start[png_ptr->pass]) /
4220:fltk-1.3.4-1/png/pngrutil.c ****           png_pass_inc[png_ptr->pass];
4221:fltk-1.3.4-1/png/pngrutil.c ****    }
4222:fltk-1.3.4-1/png/pngrutil.c **** 
4223:fltk-1.3.4-1/png/pngrutil.c ****    else
4224:fltk-1.3.4-1/png/pngrutil.c ****    {
4225:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->num_rows = png_ptr->height;
 10943              		.loc 1 4225 0
 10944 0060 8B83FC01 		movl	508(%rbx), %eax
 10944      0000
4226:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->iwidth = png_ptr->width;
 10945              		.loc 1 4226 0
 10946 0066 8B8BF801 		movl	504(%rbx), %ecx
 10946      0000
 10947 006c 8BB33401 		movl	308(%rbx), %esi
 10947      0000
4225:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->iwidth = png_ptr->width;
 10948              		.loc 1 4225 0
 10949 0072 89830002 		movl	%eax, 512(%rbx)
 10949      0000
 10950              		.loc 1 4226 0
 10951 0078 898B1002 		movl	%ecx, 528(%rbx)
 10951      0000
 10952              	.L1241:
4227:fltk-1.3.4-1/png/pngrutil.c ****    }
4228:fltk-1.3.4-1/png/pngrutil.c **** 
4229:fltk-1.3.4-1/png/pngrutil.c ****    max_pixel_depth = png_ptr->pixel_depth;
4230:fltk-1.3.4-1/png/pngrutil.c **** 
4231:fltk-1.3.4-1/png/pngrutil.c ****    /* WARNING: * png_read_transform_info (pngrtran.c) performs a simpler set of
4232:fltk-1.3.4-1/png/pngrutil.c ****     * calculations to calculate the final pixel depth, then
4233:fltk-1.3.4-1/png/pngrutil.c ****     * png_do_read_transforms actually does the transforms.  This means that the
4234:fltk-1.3.4-1/png/pngrutil.c ****     * code which effectively calculates this value is actually repeated in three
4235:fltk-1.3.4-1/png/pngrutil.c ****     * separate places.  They must all match.  Innocent changes to the order of
4236:fltk-1.3.4-1/png/pngrutil.c ****     * transformations can and will break libpng in a way that causes memory
4237:fltk-1.3.4-1/png/pngrutil.c ****     * overwrites.
4238:fltk-1.3.4-1/png/pngrutil.c ****     *
4239:fltk-1.3.4-1/png/pngrutil.c ****     * TODO: fix this.
4240:fltk-1.3.4-1/png/pngrutil.c ****     */
4241:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_PACK_SUPPORTED
4242:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->transformations & PNG_PACK) != 0 && png_ptr->bit_depth < 8)
 10953              		.loc 1 4242 0
 10954 007e 40F6C604 		testb	$4, %sil
4229:fltk-1.3.4-1/png/pngrutil.c **** 
 10955              		.loc 1 4229 0
 10956 0082 0FB6937A 		movzbl	634(%rbx), %edx
 10956      020000
 10957              	.LVL1408:
 10958              		.loc 1 4242 0
 10959 0089 740F     		je	.L1242
4243:fltk-1.3.4-1/png/pngrutil.c ****       max_pixel_depth = 8;
 10960              		.loc 1 4243 0 discriminator 1
 10961 008b 80BB7802 		cmpb	$7, 632(%rbx)
 10961      000007
 10962 0092 B8080000 		movl	$8, %eax
 10962      00
 10963 0097 0F46D0   		cmovbe	%eax, %edx
 10964              	.LVL1409:
 10965              	.L1242:
4244:fltk-1.3.4-1/png/pngrutil.c **** #endif
4245:fltk-1.3.4-1/png/pngrutil.c **** 
4246:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_EXPAND_SUPPORTED
4247:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->transformations & PNG_EXPAND) != 0)
 10966              		.loc 1 4247 0
 10967 009a F7C60010 		testl	$4096, %esi
 10967      0000
 10968 00a0 0F846A01 		je	.L1243
 10968      0000
4248:fltk-1.3.4-1/png/pngrutil.c ****    {
4249:fltk-1.3.4-1/png/pngrutil.c ****       if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
 10969              		.loc 1 4249 0
 10970 00a6 0FB68377 		movzbl	631(%rbx), %eax
 10970      020000
 10971 00ad 3C03     		cmpb	$3, %al
 10972 00af 0F84E302 		je	.L1293
 10972      0000
4250:fltk-1.3.4-1/png/pngrutil.c ****       {
4251:fltk-1.3.4-1/png/pngrutil.c ****          if (png_ptr->num_trans != 0)
4252:fltk-1.3.4-1/png/pngrutil.c ****             max_pixel_depth = 32;
4253:fltk-1.3.4-1/png/pngrutil.c **** 
4254:fltk-1.3.4-1/png/pngrutil.c ****          else
4255:fltk-1.3.4-1/png/pngrutil.c ****             max_pixel_depth = 24;
4256:fltk-1.3.4-1/png/pngrutil.c ****       }
4257:fltk-1.3.4-1/png/pngrutil.c **** 
4258:fltk-1.3.4-1/png/pngrutil.c ****       else if (png_ptr->color_type == PNG_COLOR_TYPE_GRAY)
 10973              		.loc 1 4258 0
 10974 00b5 84C0     		testb	%al, %al
 10975 00b7 0F849B02 		je	.L1294
 10975      0000
4259:fltk-1.3.4-1/png/pngrutil.c ****       {
4260:fltk-1.3.4-1/png/pngrutil.c ****          if (max_pixel_depth < 8)
4261:fltk-1.3.4-1/png/pngrutil.c ****             max_pixel_depth = 8;
4262:fltk-1.3.4-1/png/pngrutil.c **** 
4263:fltk-1.3.4-1/png/pngrutil.c ****          if (png_ptr->num_trans != 0)
4264:fltk-1.3.4-1/png/pngrutil.c ****             max_pixel_depth *= 2;
4265:fltk-1.3.4-1/png/pngrutil.c ****       }
4266:fltk-1.3.4-1/png/pngrutil.c **** 
4267:fltk-1.3.4-1/png/pngrutil.c ****       else if (png_ptr->color_type == PNG_COLOR_TYPE_RGB)
 10976              		.loc 1 4267 0
 10977 00bd 3C02     		cmpb	$2, %al
 10978 00bf 0F840303 		je	.L1295
 10978      0000
 10979              	.LVL1410:
 10980              	.L1246:
4268:fltk-1.3.4-1/png/pngrutil.c ****       {
4269:fltk-1.3.4-1/png/pngrutil.c ****          if (png_ptr->num_trans != 0)
4270:fltk-1.3.4-1/png/pngrutil.c ****          {
4271:fltk-1.3.4-1/png/pngrutil.c ****             max_pixel_depth *= 4;
4272:fltk-1.3.4-1/png/pngrutil.c ****             max_pixel_depth /= 3;
4273:fltk-1.3.4-1/png/pngrutil.c ****          }
4274:fltk-1.3.4-1/png/pngrutil.c ****       }
4275:fltk-1.3.4-1/png/pngrutil.c ****    }
4276:fltk-1.3.4-1/png/pngrutil.c **** #endif
4277:fltk-1.3.4-1/png/pngrutil.c **** 
4278:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_EXPAND_16_SUPPORTED
4279:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->transformations & PNG_EXPAND_16) != 0)
 10981              		.loc 1 4279 0
 10982 00c5 F7C60002 		testl	$512, %esi
 10982      0000
 10983 00cb 740D     		je	.L1249
4280:fltk-1.3.4-1/png/pngrutil.c ****    {
4281:fltk-1.3.4-1/png/pngrutil.c **** #     ifdef PNG_READ_EXPAND_SUPPORTED
4282:fltk-1.3.4-1/png/pngrutil.c ****          /* In fact it is an error if it isn't supported, but checking is
4283:fltk-1.3.4-1/png/pngrutil.c ****           * the safe way.
4284:fltk-1.3.4-1/png/pngrutil.c ****           */
4285:fltk-1.3.4-1/png/pngrutil.c ****          if ((png_ptr->transformations & PNG_EXPAND) != 0)
4286:fltk-1.3.4-1/png/pngrutil.c ****          {
4287:fltk-1.3.4-1/png/pngrutil.c ****             if (png_ptr->bit_depth < 16)
4288:fltk-1.3.4-1/png/pngrutil.c ****                max_pixel_depth *= 2;
 10984              		.loc 1 4288 0
 10985 00cd 80BB7802 		cmpb	$15, 632(%rbx)
 10985      00000F
 10986 00d4 8D0412   		leal	(%rdx,%rdx), %eax
 10987 00d7 0F46D0   		cmovbe	%eax, %edx
 10988              	.LVL1411:
 10989              	.L1249:
4289:fltk-1.3.4-1/png/pngrutil.c ****          }
4290:fltk-1.3.4-1/png/pngrutil.c ****          else
4291:fltk-1.3.4-1/png/pngrutil.c **** #     endif
4292:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->transformations &= ~PNG_EXPAND_16;
4293:fltk-1.3.4-1/png/pngrutil.c ****    }
4294:fltk-1.3.4-1/png/pngrutil.c **** #endif
4295:fltk-1.3.4-1/png/pngrutil.c **** 
4296:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_FILLER_SUPPORTED
4297:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->transformations & (PNG_FILLER)) != 0)
 10990              		.loc 1 4297 0
 10991 00da 89F7     		movl	%esi, %edi
 10992 00dc 81E70080 		andl	$32768, %edi
 10992      0000
 10993 00e2 741F     		je	.L1250
4298:fltk-1.3.4-1/png/pngrutil.c ****    {
4299:fltk-1.3.4-1/png/pngrutil.c ****       if (png_ptr->color_type == PNG_COLOR_TYPE_GRAY)
 10994              		.loc 1 4299 0
 10995 00e4 0FB68377 		movzbl	631(%rbx), %eax
 10995      020000
 10996 00eb 84C0     		testb	%al, %al
 10997 00ed 0F85A501 		jne	.L1251
 10997      0000
4300:fltk-1.3.4-1/png/pngrutil.c ****       {
4301:fltk-1.3.4-1/png/pngrutil.c ****          if (max_pixel_depth <= 8)
4302:fltk-1.3.4-1/png/pngrutil.c ****             max_pixel_depth = 16;
4303:fltk-1.3.4-1/png/pngrutil.c **** 
4304:fltk-1.3.4-1/png/pngrutil.c ****          else
4305:fltk-1.3.4-1/png/pngrutil.c ****             max_pixel_depth = 32;
4306:fltk-1.3.4-1/png/pngrutil.c ****       }
4307:fltk-1.3.4-1/png/pngrutil.c **** 
4308:fltk-1.3.4-1/png/pngrutil.c ****       else if (png_ptr->color_type == PNG_COLOR_TYPE_RGB ||
4309:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
4310:fltk-1.3.4-1/png/pngrutil.c ****       {
4311:fltk-1.3.4-1/png/pngrutil.c ****          if (max_pixel_depth <= 32)
4312:fltk-1.3.4-1/png/pngrutil.c ****             max_pixel_depth = 32;
 10998              		.loc 1 4312 0
 10999 00f3 83FA09   		cmpl	$9, %edx
 11000 00f6 B8200000 		movl	$32, %eax
 11000      00
 11001 00fb BA100000 		movl	$16, %edx
 11001      00
 11002              	.LVL1412:
 11003 0100 0F4DD0   		cmovge	%eax, %edx
 11004              	.L1250:
 11005              	.LVL1413:
4313:fltk-1.3.4-1/png/pngrutil.c **** 
4314:fltk-1.3.4-1/png/pngrutil.c ****          else
4315:fltk-1.3.4-1/png/pngrutil.c ****             max_pixel_depth = 64;
4316:fltk-1.3.4-1/png/pngrutil.c ****       }
4317:fltk-1.3.4-1/png/pngrutil.c ****    }
4318:fltk-1.3.4-1/png/pngrutil.c **** #endif
4319:fltk-1.3.4-1/png/pngrutil.c **** 
4320:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_GRAY_TO_RGB_SUPPORTED
4321:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->transformations & PNG_GRAY_TO_RGB) != 0)
 11006              		.loc 1 4321 0
 11007 0103 F7C60040 		testl	$16384, %esi
 11007      0000
 11008 0109 742A     		je	.L1252
4322:fltk-1.3.4-1/png/pngrutil.c ****    {
4323:fltk-1.3.4-1/png/pngrutil.c ****       if (
 11009              		.loc 1 4323 0
 11010 010b 6683BB70 		cmpw	$0, 624(%rbx)
 11010      02000000 
 11011 0113 0F842F01 		je	.L1253
 11011      0000
4324:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_EXPAND_SUPPORTED
4325:fltk-1.3.4-1/png/pngrutil.c ****           (png_ptr->num_trans != 0 &&
 11012              		.loc 1 4325 0
 11013 0119 F7C60010 		testl	$4096, %esi
 11013      0000
 11014 011f 0F842301 		je	.L1253
 11014      0000
 11015              	.L1254:
4326:fltk-1.3.4-1/png/pngrutil.c ****           (png_ptr->transformations & PNG_EXPAND) != 0) ||
4327:fltk-1.3.4-1/png/pngrutil.c **** #endif
4328:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_READ_FILLER_SUPPORTED
4329:fltk-1.3.4-1/png/pngrutil.c ****           (png_ptr->transformations & (PNG_FILLER)) != 0 ||
4330:fltk-1.3.4-1/png/pngrutil.c **** #endif
4331:fltk-1.3.4-1/png/pngrutil.c ****           png_ptr->color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
4332:fltk-1.3.4-1/png/pngrutil.c ****       {
4333:fltk-1.3.4-1/png/pngrutil.c ****          if (max_pixel_depth <= 16)
4334:fltk-1.3.4-1/png/pngrutil.c ****             max_pixel_depth = 32;
4335:fltk-1.3.4-1/png/pngrutil.c **** 
4336:fltk-1.3.4-1/png/pngrutil.c ****          else
4337:fltk-1.3.4-1/png/pngrutil.c ****             max_pixel_depth = 64;
 11016              		.loc 1 4337 0
 11017 0125 83FA11   		cmpl	$17, %edx
 11018 0128 B8400000 		movl	$64, %eax
 11018      00
 11019 012d BA200000 		movl	$32, %edx
 11019      00
 11020              	.LVL1414:
 11021 0132 0F4DD0   		cmovge	%eax, %edx
 11022              	.L1252:
 11023              	.LVL1415:
4338:fltk-1.3.4-1/png/pngrutil.c ****       }
4339:fltk-1.3.4-1/png/pngrutil.c **** 
4340:fltk-1.3.4-1/png/pngrutil.c ****       else
4341:fltk-1.3.4-1/png/pngrutil.c ****       {
4342:fltk-1.3.4-1/png/pngrutil.c ****          if (max_pixel_depth <= 8)
4343:fltk-1.3.4-1/png/pngrutil.c ****          {
4344:fltk-1.3.4-1/png/pngrutil.c ****             if (png_ptr->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
4345:fltk-1.3.4-1/png/pngrutil.c ****                max_pixel_depth = 32;
4346:fltk-1.3.4-1/png/pngrutil.c **** 
4347:fltk-1.3.4-1/png/pngrutil.c ****             else
4348:fltk-1.3.4-1/png/pngrutil.c ****                max_pixel_depth = 24;
4349:fltk-1.3.4-1/png/pngrutil.c ****          }
4350:fltk-1.3.4-1/png/pngrutil.c **** 
4351:fltk-1.3.4-1/png/pngrutil.c ****          else if (png_ptr->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
4352:fltk-1.3.4-1/png/pngrutil.c ****             max_pixel_depth = 64;
4353:fltk-1.3.4-1/png/pngrutil.c **** 
4354:fltk-1.3.4-1/png/pngrutil.c ****          else
4355:fltk-1.3.4-1/png/pngrutil.c ****             max_pixel_depth = 48;
4356:fltk-1.3.4-1/png/pngrutil.c ****       }
4357:fltk-1.3.4-1/png/pngrutil.c ****    }
4358:fltk-1.3.4-1/png/pngrutil.c **** #endif
4359:fltk-1.3.4-1/png/pngrutil.c **** 
4360:fltk-1.3.4-1/png/pngrutil.c **** #if defined(PNG_READ_USER_TRANSFORM_SUPPORTED) && \
4361:fltk-1.3.4-1/png/pngrutil.c **** defined(PNG_USER_TRANSFORM_PTR_SUPPORTED)
4362:fltk-1.3.4-1/png/pngrutil.c ****    if ((png_ptr->transformations & PNG_USER_TRANSFORM) != 0)
 11024              		.loc 1 4362 0
 11025 0135 81E60000 		andl	$1048576, %esi
 11025      1000
 11026 013b 7416     		je	.L1257
 11027              	.LBB302:
4363:fltk-1.3.4-1/png/pngrutil.c ****    {
4364:fltk-1.3.4-1/png/pngrutil.c ****       int user_pixel_depth = png_ptr->user_transform_depth *
 11028              		.loc 1 4364 0
 11029 013d 0FB6B328 		movzbl	296(%rbx), %esi
 11029      010000
 11030 0144 0FB68329 		movzbl	297(%rbx), %eax
 11030      010000
 11031 014b 0FAFC6   		imull	%esi, %eax
 11032              	.LVL1416:
 11033 014e 39C2     		cmpl	%eax, %edx
 11034 0150 0F4CD0   		cmovl	%eax, %edx
 11035              	.LVL1417:
 11036              	.L1257:
 11037              	.LBE302:
4365:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->user_transform_channels;
4366:fltk-1.3.4-1/png/pngrutil.c **** 
4367:fltk-1.3.4-1/png/pngrutil.c ****       if (user_pixel_depth > max_pixel_depth)
4368:fltk-1.3.4-1/png/pngrutil.c ****          max_pixel_depth = user_pixel_depth;
4369:fltk-1.3.4-1/png/pngrutil.c ****    }
4370:fltk-1.3.4-1/png/pngrutil.c **** #endif
4371:fltk-1.3.4-1/png/pngrutil.c **** 
4372:fltk-1.3.4-1/png/pngrutil.c ****    /* This value is stored in png_struct and double checked in the row read
4373:fltk-1.3.4-1/png/pngrutil.c ****     * code.
4374:fltk-1.3.4-1/png/pngrutil.c ****     */
4375:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->maximum_pixel_depth = (png_byte)max_pixel_depth;
4376:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->transformed_pixel_depth = 0; /* calculated on demand */
4377:fltk-1.3.4-1/png/pngrutil.c **** 
4378:fltk-1.3.4-1/png/pngrutil.c ****    /* Align the width on the next larger 8 pixels.  Mainly used
4379:fltk-1.3.4-1/png/pngrutil.c ****     * for interlacing
4380:fltk-1.3.4-1/png/pngrutil.c ****     */
4381:fltk-1.3.4-1/png/pngrutil.c ****    row_bytes = ((png_ptr->width + 7) & ~((png_uint_32)7));
 11038              		.loc 1 4381 0
 11039 0153 83C107   		addl	$7, %ecx
4375:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->transformed_pixel_depth = 0; /* calculated on demand */
 11040              		.loc 1 4375 0
 11041 0156 88937E02 		movb	%dl, 638(%rbx)
 11041      0000
4376:fltk-1.3.4-1/png/pngrutil.c **** 
 11042              		.loc 1 4376 0
 11043 015c C6837F02 		movb	$0, 639(%rbx)
 11043      000000
 11044              		.loc 1 4381 0
 11045 0163 83E1F8   		andl	$-8, %ecx
 11046              	.LVL1418:
4382:fltk-1.3.4-1/png/pngrutil.c ****    /* Calculate the maximum bytes needed, adding a byte and a pixel
4383:fltk-1.3.4-1/png/pngrutil.c ****     * for safety's sake
4384:fltk-1.3.4-1/png/pngrutil.c ****     */
4385:fltk-1.3.4-1/png/pngrutil.c ****    row_bytes = PNG_ROWBYTES(max_pixel_depth, row_bytes) +
 11047              		.loc 1 4385 0
 11048 0166 83FA07   		cmpl	$7, %edx
 11049 0169 4863C2   		movslq	%edx, %rax
 11050 016c 0F8EBE00 		jle	.L1258
 11050      0000
 11051              		.loc 1 4385 0 is_stmt 0 discriminator 1
 11052 0172 48C1E803 		shrq	$3, %rax
 11053 0176 480FAFC8 		imulq	%rax, %rcx
 11054              	.LVL1419:
 11055 017a 4883C101 		addq	$1, %rcx
 11056              	.L1259:
 11057              	.LVL1420:
4386:fltk-1.3.4-1/png/pngrutil.c ****        1 + ((max_pixel_depth + 7) >> 3);
4387:fltk-1.3.4-1/png/pngrutil.c **** 
4388:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_MAX_MALLOC_64K
4389:fltk-1.3.4-1/png/pngrutil.c ****    if (row_bytes > (png_uint_32)65536L)
4390:fltk-1.3.4-1/png/pngrutil.c ****       png_error(png_ptr, "This image requires a row greater than 64KB");
4391:fltk-1.3.4-1/png/pngrutil.c **** #endif
4392:fltk-1.3.4-1/png/pngrutil.c **** 
4393:fltk-1.3.4-1/png/pngrutil.c ****    if (row_bytes + 48 > png_ptr->old_big_row_buf_size)
 11058              		.loc 1 4393 0 is_stmt 1
 11059 017e 83C207   		addl	$7, %edx
 11060              	.LVL1421:
 11061 0181 C1FA03   		sarl	$3, %edx
 11062              	.LVL1422:
 11063 0184 4863D2   		movslq	%edx, %rdx
 11064              	.LVL1423:
 11065 0187 488D6C11 		leaq	48(%rcx,%rdx), %rbp
 11065      30
 11066 018c 483BAB90 		cmpq	1168(%rbx), %rbp
 11066      040000
 11067 0193 0F872701 		ja	.L1296
 11067      0000
 11068              	.LVL1424:
 11069              	.L1260:
4394:fltk-1.3.4-1/png/pngrutil.c ****    {
4395:fltk-1.3.4-1/png/pngrutil.c ****      png_free(png_ptr, png_ptr->big_row_buf);
4396:fltk-1.3.4-1/png/pngrutil.c ****      png_free(png_ptr, png_ptr->big_prev_row);
4397:fltk-1.3.4-1/png/pngrutil.c **** 
4398:fltk-1.3.4-1/png/pngrutil.c ****      if (png_ptr->interlaced != 0)
4399:fltk-1.3.4-1/png/pngrutil.c ****         png_ptr->big_row_buf = (png_bytep)png_calloc(png_ptr,
4400:fltk-1.3.4-1/png/pngrutil.c ****             row_bytes + 48);
4401:fltk-1.3.4-1/png/pngrutil.c **** 
4402:fltk-1.3.4-1/png/pngrutil.c ****      else
4403:fltk-1.3.4-1/png/pngrutil.c ****         png_ptr->big_row_buf = (png_bytep)png_malloc(png_ptr, row_bytes + 48);
4404:fltk-1.3.4-1/png/pngrutil.c **** 
4405:fltk-1.3.4-1/png/pngrutil.c ****      png_ptr->big_prev_row = (png_bytep)png_malloc(png_ptr, row_bytes + 48);
4406:fltk-1.3.4-1/png/pngrutil.c **** 
4407:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_ALIGNED_MEMORY_SUPPORTED
4408:fltk-1.3.4-1/png/pngrutil.c ****      /* Use 16-byte aligned memory for row_buf with at least 16 bytes
4409:fltk-1.3.4-1/png/pngrutil.c ****       * of padding before and after row_buf; treat prev_row similarly.
4410:fltk-1.3.4-1/png/pngrutil.c ****       * NOTE: the alignment is to the start of the pixels, one beyond the start
4411:fltk-1.3.4-1/png/pngrutil.c ****       * of the buffer, because of the filter byte.  Prior to libpng 1.5.6 this
4412:fltk-1.3.4-1/png/pngrutil.c ****       * was incorrect; the filter byte was aligned, which had the exact
4413:fltk-1.3.4-1/png/pngrutil.c ****       * opposite effect of that intended.
4414:fltk-1.3.4-1/png/pngrutil.c ****       */
4415:fltk-1.3.4-1/png/pngrutil.c ****      {
4416:fltk-1.3.4-1/png/pngrutil.c ****         png_bytep temp = png_ptr->big_row_buf + 32;
4417:fltk-1.3.4-1/png/pngrutil.c ****         int extra = (int)((temp - (png_bytep)0) & 0x0f);
4418:fltk-1.3.4-1/png/pngrutil.c ****         png_ptr->row_buf = temp - extra - 1/*filter byte*/;
4419:fltk-1.3.4-1/png/pngrutil.c **** 
4420:fltk-1.3.4-1/png/pngrutil.c ****         temp = png_ptr->big_prev_row + 32;
4421:fltk-1.3.4-1/png/pngrutil.c ****         extra = (int)((temp - (png_bytep)0) & 0x0f);
4422:fltk-1.3.4-1/png/pngrutil.c ****         png_ptr->prev_row = temp - extra - 1/*filter byte*/;
4423:fltk-1.3.4-1/png/pngrutil.c ****      }
4424:fltk-1.3.4-1/png/pngrutil.c **** 
4425:fltk-1.3.4-1/png/pngrutil.c **** #else
4426:fltk-1.3.4-1/png/pngrutil.c ****      /* Use 31 bytes of padding before and 17 bytes after row_buf. */
4427:fltk-1.3.4-1/png/pngrutil.c ****      png_ptr->row_buf = png_ptr->big_row_buf + 31;
4428:fltk-1.3.4-1/png/pngrutil.c ****      png_ptr->prev_row = png_ptr->big_prev_row + 31;
4429:fltk-1.3.4-1/png/pngrutil.c **** #endif
4430:fltk-1.3.4-1/png/pngrutil.c ****      png_ptr->old_big_row_buf_size = row_bytes + 48;
4431:fltk-1.3.4-1/png/pngrutil.c ****    }
4432:fltk-1.3.4-1/png/pngrutil.c **** 
4433:fltk-1.3.4-1/png/pngrutil.c **** #ifdef PNG_MAX_MALLOC_64K
4434:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->rowbytes > 65535)
4435:fltk-1.3.4-1/png/pngrutil.c ****       png_error(png_ptr, "This image requires a row greater than 64KB");
4436:fltk-1.3.4-1/png/pngrutil.c **** 
4437:fltk-1.3.4-1/png/pngrutil.c **** #endif
4438:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->rowbytes > (PNG_SIZE_MAX - 1))
 11070              		.loc 1 4438 0
 11071 0199 488B9308 		movq	520(%rbx), %rdx
 11071      020000
 11072 01a0 4883FAFF 		cmpq	$-1, %rdx
 11073 01a4 0F845502 		je	.L1297
 11073      0000
 11074              	.LVL1425:
 11075              	.LBB303:
 11076              	.LBB304:
 11077              		.loc 2 90 0
 11078 01aa 488BBB20 		movq	544(%rbx), %rdi
 11078      020000
 11079 01b1 31F6     		xorl	%esi, %esi
 11080 01b3 4883C201 		addq	$1, %rdx
 11081              	.LVL1426:
 11082 01b7 E8000000 		call	memset
 11082      00
 11083              	.LVL1427:
 11084              	.LBE304:
 11085              	.LBE303:
4439:fltk-1.3.4-1/png/pngrutil.c ****       png_error(png_ptr, "Row has too many bytes to allocate in memory");
4440:fltk-1.3.4-1/png/pngrutil.c **** 
4441:fltk-1.3.4-1/png/pngrutil.c ****    memset(png_ptr->prev_row, 0, png_ptr->rowbytes + 1);
4442:fltk-1.3.4-1/png/pngrutil.c **** 
4443:fltk-1.3.4-1/png/pngrutil.c ****    png_debug1(3, "width = %u,", png_ptr->width);
4444:fltk-1.3.4-1/png/pngrutil.c ****    png_debug1(3, "height = %u,", png_ptr->height);
4445:fltk-1.3.4-1/png/pngrutil.c ****    png_debug1(3, "iwidth = %u,", png_ptr->iwidth);
4446:fltk-1.3.4-1/png/pngrutil.c ****    png_debug1(3, "num_rows = %u,", png_ptr->num_rows);
4447:fltk-1.3.4-1/png/pngrutil.c ****    png_debug1(3, "rowbytes = %lu,", (unsigned long)png_ptr->rowbytes);
4448:fltk-1.3.4-1/png/pngrutil.c ****    png_debug1(3, "irowbytes = %lu",
4449:fltk-1.3.4-1/png/pngrutil.c ****        (unsigned long)PNG_ROWBYTES(png_ptr->pixel_depth, png_ptr->iwidth) + 1);
4450:fltk-1.3.4-1/png/pngrutil.c **** 
4451:fltk-1.3.4-1/png/pngrutil.c ****    /* The sequential reader needs a buffer for IDAT, but the progressive reader
4452:fltk-1.3.4-1/png/pngrutil.c ****     * does not, so free the read buffer now regardless; the sequential reader
4453:fltk-1.3.4-1/png/pngrutil.c ****     * reallocates it on demand.
4454:fltk-1.3.4-1/png/pngrutil.c ****     */
4455:fltk-1.3.4-1/png/pngrutil.c ****    if (png_ptr->read_buffer != 0)
 11086              		.loc 1 4455 0
 11087 01bc 488BB398 		movq	1176(%rbx), %rsi
 11087      040000
 11088 01c3 4885F6   		testq	%rsi, %rsi
 11089 01c6 741E     		je	.L1264
 11090              	.LVL1428:
 11091              	.LBB305:
4456:fltk-1.3.4-1/png/pngrutil.c ****    {
4457:fltk-1.3.4-1/png/pngrutil.c ****       png_bytep buffer = png_ptr->read_buffer;
4458:fltk-1.3.4-1/png/pngrutil.c **** 
4459:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->read_buffer_size = 0;
 11092              		.loc 1 4459 0
 11093 01c8 48C783A0 		movq	$0, 1184(%rbx)
 11093      04000000 
 11093      000000
4460:fltk-1.3.4-1/png/pngrutil.c ****       png_ptr->read_buffer = NULL;
 11094              		.loc 1 4460 0
 11095 01d3 48C78398 		movq	$0, 1176(%rbx)
 11095      04000000 
 11095      000000
4461:fltk-1.3.4-1/png/pngrutil.c ****       png_free(png_ptr, buffer);
 11096              		.loc 1 4461 0
 11097 01de 4889DF   		movq	%rbx, %rdi
 11098 01e1 E8000000 		call	png_free
 11098      00
 11099              	.LVL1429:
 11100              	.L1264:
 11101              	.LBE305:
4462:fltk-1.3.4-1/png/pngrutil.c ****    }
4463:fltk-1.3.4-1/png/pngrutil.c **** 
4464:fltk-1.3.4-1/png/pngrutil.c ****    /* Finally claim the zstream for the inflate of the IDAT data, use the bits
4465:fltk-1.3.4-1/png/pngrutil.c ****     * value from the stream (note that this will result in a fatal error if the
4466:fltk-1.3.4-1/png/pngrutil.c ****     * IDAT stream has a bogus deflate header window_bits value, but this should
4467:fltk-1.3.4-1/png/pngrutil.c ****     * not be happening any longer!)
4468:fltk-1.3.4-1/png/pngrutil.c ****     */
4469:fltk-1.3.4-1/png/pngrutil.c ****    if (png_inflate_claim(png_ptr, png_IDAT) != Z_OK)
 11102              		.loc 1 4469 0
 11103 01e6 BE544144 		movl	$1229209940, %esi
 11103      49
 11104 01eb 4889DF   		movq	%rbx, %rdi
 11105 01ee E8000000 		call	png_inflate_claim
 11105      00
 11106              	.LVL1430:
 11107 01f3 85C0     		testl	%eax, %eax
 11108 01f5 0F85F501 		jne	.L1298
 11108      0000
4470:fltk-1.3.4-1/png/pngrutil.c ****       png_error(png_ptr, png_ptr->zstream.msg);
4471:fltk-1.3.4-1/png/pngrutil.c **** 
4472:fltk-1.3.4-1/png/pngrutil.c ****    png_ptr->flags |= PNG_FLAG_ROW_INIT;
 11109              		.loc 1 4472 0
 11110 01fb 838B3001 		orl	$64, 304(%rbx)
 11110      000040
4473:fltk-1.3.4-1/png/pngrutil.c **** }
 11111              		.loc 1 4473 0
 11112 0202 4883C408 		addq	$8, %rsp
 11113              		.cfi_remember_state
 11114              		.cfi_def_cfa_offset 24
 11115 0206 5B       		popq	%rbx
 11116              		.cfi_def_cfa_offset 16
 11117              	.LVL1431:
 11118 0207 5D       		popq	%rbp
 11119              		.cfi_def_cfa_offset 8
 11120 0208 C3       		ret
 11121              	.LVL1432:
 11122 0209 0F1F8000 		.p2align 4,,10
 11122      000000
 11123              		.p2align 3
 11124              	.L1243:
 11125              		.cfi_restore_state
4279:fltk-1.3.4-1/png/pngrutil.c ****    {
 11126              		.loc 1 4279 0
 11127 0210 F7C60002 		testl	$512, %esi
 11127      0000
 11128 0216 0F84BEFE 		je	.L1249
 11128      FFFF
4292:fltk-1.3.4-1/png/pngrutil.c ****    }
 11129              		.loc 1 4292 0
 11130 021c 81E6FFFD 		andl	$-513, %esi
 11130      FFFF
 11131 0222 89B33401 		movl	%esi, 308(%rbx)
 11131      0000
 11132 0228 E9ADFEFF 		jmp	.L1249
 11132      FF
 11133              	.LVL1433:
 11134 022d 0F1F00   		.p2align 4,,10
 11135              		.p2align 3
 11136              	.L1258:
4385:fltk-1.3.4-1/png/pngrutil.c ****        1 + ((max_pixel_depth + 7) >> 3);
 11137              		.loc 1 4385 0 discriminator 2
 11138 0230 480FAFC8 		imulq	%rax, %rcx
 11139              	.LVL1434:
 11140 0234 48C1E903 		shrq	$3, %rcx
 11141 0238 4883C101 		addq	$1, %rcx
 11142 023c E93DFFFF 		jmp	.L1259
 11142      FF
 11143              		.p2align 4,,10
 11144 0241 0F1F8000 		.p2align 3
 11144      000000
 11145              	.L1253:
4326:fltk-1.3.4-1/png/pngrutil.c **** #endif
 11146              		.loc 1 4326 0
 11147 0248 85FF     		testl	%edi, %edi
 11148 024a 0F85D5FE 		jne	.L1254
 11148      FFFF
4331:fltk-1.3.4-1/png/pngrutil.c ****       {
 11149              		.loc 1 4331 0
 11150 0250 0FB68377 		movzbl	631(%rbx), %eax
 11150      020000
4329:fltk-1.3.4-1/png/pngrutil.c **** #endif
 11151              		.loc 1 4329 0
 11152 0257 3C04     		cmpb	$4, %al
 11153 0259 0F84C6FE 		je	.L1254
 11153      FFFF
4342:fltk-1.3.4-1/png/pngrutil.c ****          {
 11154              		.loc 1 4342 0
 11155 025f 83FA08   		cmpl	$8, %edx
 11156 0262 0F8F4801 		jg	.L1256
 11156      0000
4348:fltk-1.3.4-1/png/pngrutil.c ****          }
 11157              		.loc 1 4348 0
 11158 0268 31D2     		xorl	%edx, %edx
 11159              	.LVL1435:
 11160 026a 3C06     		cmpb	$6, %al
 11161 026c 0F94C2   		sete	%dl
 11162 026f 8D14D518 		leal	24(,%rdx,8), %edx
 11162      000000
 11163 0276 E9BAFEFF 		jmp	.L1252
 11163      FF
 11164 027b 0F1F4400 		.p2align 4,,10
 11164      00
 11165              		.p2align 3
 11166              	.L1292:
4211:fltk-1.3.4-1/png/pngrutil.c ****              png_pass_ystart[0]) / png_pass_yinc[0];
 11167              		.loc 1 4211 0
 11168 0280 83C007   		addl	$7, %eax
 11169 0283 C1E803   		shrl	$3, %eax
 11170 0286 89830002 		movl	%eax, 512(%rbx)
 11170      0000
 11171 028c E9A2FDFF 		jmp	.L1240
 11171      FF
 11172              	.LVL1436:
 11173              		.p2align 4,,10
 11174 0291 0F1F8000 		.p2align 3
 11174      000000
 11175              	.L1251:
4308:fltk-1.3.4-1/png/pngrutil.c ****          png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
 11176              		.loc 1 4308 0
 11177 0298 83E802   		subl	$2, %eax
 11178 029b 3C01     		cmpb	$1, %al
 11179 029d 0F8760FE 		ja	.L1250
 11179      FFFF
4315:fltk-1.3.4-1/png/pngrutil.c ****       }
 11180              		.loc 1 4315 0
 11181 02a3 83FA21   		cmpl	$33, %edx
 11182 02a6 B8400000 		movl	$64, %eax
 11182      00
 11183 02ab BA200000 		movl	$32, %edx
 11183      00
 11184              	.LVL1437:
 11185 02b0 0F4DD0   		cmovge	%eax, %edx
 11186 02b3 E94BFEFF 		jmp	.L1250
 11186      FF
 11187              	.LVL1438:
 11188 02b8 0F1F8400 		.p2align 4,,10
 11188      00000000 
 11189              		.p2align 3
 11190              	.L1296:
4395:fltk-1.3.4-1/png/pngrutil.c ****      png_free(png_ptr, png_ptr->big_prev_row);
 11191              		.loc 1 4395 0
 11192 02c0 488BB338 		movq	1080(%rbx), %rsi
 11192      040000
 11193 02c7 4889DF   		movq	%rbx, %rdi
 11194 02ca E8000000 		call	png_free
 11194      00
 11195              	.LVL1439:
4396:fltk-1.3.4-1/png/pngrutil.c **** 
 11196              		.loc 1 4396 0
 11197 02cf 488BB3B0 		movq	1200(%rbx), %rsi
 11197      040000
 11198 02d6 4889DF   		movq	%rbx, %rdi
 11199 02d9 E8000000 		call	png_free
 11199      00
 11200              	.LVL1440:
4398:fltk-1.3.4-1/png/pngrutil.c ****         png_ptr->big_row_buf = (png_bytep)png_calloc(png_ptr,
 11201              		.loc 1 4398 0
 11202 02de 80BB7402 		cmpb	$0, 628(%rbx)
 11202      000000
4399:fltk-1.3.4-1/png/pngrutil.c ****             row_bytes + 48);
 11203              		.loc 1 4399 0
 11204 02e5 4889EE   		movq	%rbp, %rsi
 11205 02e8 4889DF   		movq	%rbx, %rdi
4398:fltk-1.3.4-1/png/pngrutil.c ****         png_ptr->big_row_buf = (png_bytep)png_calloc(png_ptr,
 11206              		.loc 1 4398 0
 11207 02eb 0F858F00 		jne	.L1299
 11207      0000
4403:fltk-1.3.4-1/png/pngrutil.c **** 
 11208              		.loc 1 4403 0
 11209 02f1 E8000000 		call	png_malloc
 11209      00
 11210              	.LVL1441:
 11211 02f6 48898338 		movq	%rax, 1080(%rbx)
 11211      040000
 11212              	.L1262:
4405:fltk-1.3.4-1/png/pngrutil.c **** 
 11213              		.loc 1 4405 0
 11214 02fd 4889EE   		movq	%rbp, %rsi
 11215 0300 4889DF   		movq	%rbx, %rdi
 11216 0303 E8000000 		call	png_malloc
 11216      00
 11217              	.LVL1442:
 11218              	.LBB306:
4416:fltk-1.3.4-1/png/pngrutil.c ****         int extra = (int)((temp - (png_bytep)0) & 0x0f);
 11219              		.loc 1 4416 0
 11220 0308 488B8B38 		movq	1080(%rbx), %rcx
 11220      040000
 11221              	.LBE306:
4405:fltk-1.3.4-1/png/pngrutil.c **** 
 11222              		.loc 1 4405 0
 11223 030f 488983B0 		movq	%rax, 1200(%rbx)
 11223      040000
4430:fltk-1.3.4-1/png/pngrutil.c ****    }
 11224              		.loc 1 4430 0
 11225 0316 4889AB90 		movq	%rbp, 1168(%rbx)
 11225      040000
 11226              	.LBB307:
4416:fltk-1.3.4-1/png/pngrutil.c ****         int extra = (int)((temp - (png_bytep)0) & 0x0f);
 11227              		.loc 1 4416 0
 11228 031d 4883C120 		addq	$32, %rcx
 11229              	.LVL1443:
4418:fltk-1.3.4-1/png/pngrutil.c **** 
 11230              		.loc 1 4418 0
 11231 0321 4889CA   		movq	%rcx, %rdx
 11232 0324 83E20F   		andl	$15, %edx
 11233 0327 48F7D2   		notq	%rdx
 11234 032a 4801CA   		addq	%rcx, %rdx
4420:fltk-1.3.4-1/png/pngrutil.c ****         extra = (int)((temp - (png_bytep)0) & 0x0f);
 11235              		.loc 1 4420 0
 11236 032d 488D4820 		leaq	32(%rax), %rcx
 11237              	.LVL1444:
4418:fltk-1.3.4-1/png/pngrutil.c **** 
 11238              		.loc 1 4418 0
 11239 0331 48899328 		movq	%rdx, 552(%rbx)
 11239      020000
4422:fltk-1.3.4-1/png/pngrutil.c ****      }
 11240              		.loc 1 4422 0
 11241 0338 4889C8   		movq	%rcx, %rax
 11242 033b 83E00F   		andl	$15, %eax
 11243 033e 48F7D0   		notq	%rax
 11244 0341 488D0401 		leaq	(%rcx,%rax), %rax
 11245 0345 48898320 		movq	%rax, 544(%rbx)
 11245      020000
 11246 034c E948FEFF 		jmp	.L1260
 11246      FF
 11247              	.LVL1445:
 11248              		.p2align 4,,10
 11249 0351 0F1F8000 		.p2align 3
 11249      000000
 11250              	.L1294:
 11251              	.LBE307:
4261:fltk-1.3.4-1/png/pngrutil.c **** 
 11252              		.loc 1 4261 0
 11253 0358 83FA07   		cmpl	$7, %edx
 11254 035b B8080000 		movl	$8, %eax
 11254      00
 11255 0360 0F4ED0   		cmovle	%eax, %edx
 11256              	.LVL1446:
4264:fltk-1.3.4-1/png/pngrutil.c ****       }
 11257              		.loc 1 4264 0
 11258 0363 6683BB70 		cmpw	$0, 624(%rbx)
 11258      02000000 
 11259 036b 8D0412   		leal	(%rdx,%rdx), %eax
 11260 036e 0F45D0   		cmovne	%eax, %edx
 11261              	.LVL1447:
 11262 0371 E94FFDFF 		jmp	.L1246
 11262      FF
 11263 0376 662E0F1F 		.p2align 4,,10
 11263      84000000 
 11263      0000
 11264              		.p2align 3
 11265              	.L1299:
4399:fltk-1.3.4-1/png/pngrutil.c ****             row_bytes + 48);
 11266              		.loc 1 4399 0
 11267 0380 E8000000 		call	png_calloc
 11267      00
 11268              	.LVL1448:
 11269 0385 48898338 		movq	%rax, 1080(%rbx)
 11269      040000
 11270 038c E96CFFFF 		jmp	.L1262
 11270      FF
 11271              	.LVL1449:
 11272              		.p2align 4,,10
 11273 0391 0F1F8000 		.p2align 3
 11273      000000
 11274              	.L1293:
4255:fltk-1.3.4-1/png/pngrutil.c ****       }
 11275              		.loc 1 4255 0
 11276 0398 6683BB70 		cmpw	$1, 624(%rbx)
 11276      02000001 
 11277 03a0 19D2     		sbbl	%edx, %edx
 11278              	.LVL1450:
 11279 03a2 83E2F8   		andl	$-8, %edx
 11280 03a5 83C220   		addl	$32, %edx
 11281 03a8 E918FDFF 		jmp	.L1246
 11281      FF
 11282              	.LVL1451:
 11283 03ad 0F1F00   		.p2align 4,,10
 11284              		.p2align 3
 11285              	.L1256:
4337:fltk-1.3.4-1/png/pngrutil.c ****       }
 11286              		.loc 1 4337 0
 11287 03b0 3C06     		cmpb	$6, %al
 11288 03b2 BA300000 		movl	$48, %edx
 11288      00
 11289              	.LVL1452:
 11290 03b7 B8400000 		movl	$64, %eax
 11290      00
 11291 03bc 0F44D0   		cmove	%eax, %edx
 11292 03bf E971FDFF 		jmp	.L1252
 11292      FF
 11293              	.LVL1453:
 11294              		.p2align 4,,10
 11295 03c4 0F1F4000 		.p2align 3
 11296              	.L1295:
4269:fltk-1.3.4-1/png/pngrutil.c ****          {
 11297              		.loc 1 4269 0
 11298 03c8 6683BB70 		cmpw	$0, 624(%rbx)
 11298      02000000 
 11299 03d0 0F84EFFC 		je	.L1246
 11299      FFFF
4271:fltk-1.3.4-1/png/pngrutil.c ****             max_pixel_depth /= 3;
 11300              		.loc 1 4271 0
 11301 03d6 8D3C9500 		leal	0(,%rdx,4), %edi
 11301      000000
 11302              	.LVL1454:
4272:fltk-1.3.4-1/png/pngrutil.c ****          }
 11303              		.loc 1 4272 0
 11304 03dd BA565555 		movl	$1431655766, %edx
 11304      55
 11305 03e2 89F8     		movl	%edi, %eax
 11306 03e4 C1FF1F   		sarl	$31, %edi
 11307              	.LVL1455:
 11308 03e7 F7EA     		imull	%edx
 11309              	.LVL1456:
 11310 03e9 29FA     		subl	%edi, %edx
 11311              	.LVL1457:
 11312 03eb E9D5FCFF 		jmp	.L1246
 11312      FF
 11313              	.LVL1458:
 11314              	.L1298:
4470:fltk-1.3.4-1/png/pngrutil.c **** 
 11315              		.loc 1 4470 0
 11316 03f0 488BB370 		movq	368(%rbx), %rsi
 11316      010000
 11317 03f7 4889DF   		movq	%rbx, %rdi
 11318 03fa E8000000 		call	png_error
 11318      00
 11319              	.LVL1459:
 11320              	.L1297:
4439:fltk-1.3.4-1/png/pngrutil.c **** 
 11321              		.loc 1 4439 0
 11322 03ff BE000000 		movl	$.LC105, %esi
 11322      00
 11323 0404 4889DF   		movq	%rbx, %rdi
 11324 0407 E8000000 		call	png_error
 11324      00
 11325              	.LVL1460:
 11326              		.cfi_endproc
 11327              	.LFE106:
 11329              		.section	.text.unlikely.png_read_start_row
 11330              	.LCOLDE106:
 11331              		.section	.text.png_read_start_row
 11332              	.LHOTE106:
 11333              		.section	.rodata.png_pass_start.7355,"a",@progbits
 11336              	png_pass_start.7355:
 11337 0000 00       		.byte	0
 11338 0001 04       		.byte	4
 11339 0002 00       		.byte	0
 11340 0003 02       		.byte	2
 11341 0004 00       		.byte	0
 11342 0005 01       		.byte	1
 11343 0006 00       		.byte	0
 11344              		.set	png_pass_start.7346,png_pass_start.7355
 11345              		.section	.rodata.png_pass_inc.7356,"a",@progbits
 11348              	png_pass_inc.7356:
 11349 0000 08       		.byte	8
 11350 0001 08       		.byte	8
 11351 0002 04       		.byte	4
 11352 0003 04       		.byte	4
 11353 0004 02       		.byte	2
 11354 0005 02       		.byte	2
 11355 0006 01       		.byte	1
 11356              		.set	png_pass_inc.7347,png_pass_inc.7356
 11357              		.section	.rodata.png_pass_ystart.7348,"a",@progbits
 11360              	png_pass_ystart.7348:
 11361 0000 00       		.byte	0
 11362 0001 00       		.byte	0
 11363 0002 04       		.byte	4
 11364 0003 00       		.byte	0
 11365 0004 02       		.byte	2
 11366 0005 00       		.byte	0
 11367 0006 01       		.byte	1
 11368              		.section	.rodata.png_pass_yinc.7349,"a",@progbits
 11371              	png_pass_yinc.7349:
 11372 0000 08       		.byte	8
 11373 0001 08       		.byte	8
 11374 0002 08       		.byte	8
 11375 0003 04       		.byte	4
 11376 0004 04       		.byte	4
 11377 0005 02       		.byte	2
 11378 0006 02       		.byte	2
 11379              		.section	.rodata.png_pass_inc.7163,"a",@progbits
 11380              		.align 16
 11383              	png_pass_inc.7163:
 11384 0000 08000000 		.long	8
 11385 0004 08000000 		.long	8
 11386 0008 04000000 		.long	4
 11387 000c 04000000 		.long	4
 11388 0010 02000000 		.long	2
 11389 0014 02000000 		.long	2
 11390 0018 01000000 		.long	1
 11391              		.section	.rodata.row_mask.7118,"a",@progbits
 11392              		.align 32
 11395              	row_mask.7118:
 11396 0000 01010101 		.long	16843009
 11397 0004 10101010 		.long	269488144
 11398 0008 11111111 		.long	286331153
 11399 000c 44444444 		.long	1145324612
 11400 0010 55555555 		.long	1431655765
 11401 0014 AAAAAAAA 		.long	-1431655766
 11402 0018 03000300 		.long	196611
 11403 001c 00030003 		.long	50332416
 11404 0020 03030303 		.long	50529027
 11405 0024 30303030 		.long	808464432
 11406 0028 33333333 		.long	858993459
 11407 002c CCCCCCCC 		.long	-858993460
 11408 0030 0F000000 		.long	15
 11409 0034 00000F00 		.long	983040
 11410 0038 0F000F00 		.long	983055
 11411 003c 000F000F 		.long	251662080
 11412 0040 0F0F0F0F 		.long	252645135
 11413 0044 F0F0F0F0 		.long	-252645136
 11414 0048 80808080 		.long	-2139062144
 11415 004c 08080808 		.long	134744072
 11416 0050 88888888 		.long	-2004318072
 11417 0054 22222222 		.long	572662306
 11418 0058 AAAAAAAA 		.long	-1431655766
 11419 005c 55555555 		.long	1431655765
 11420 0060 C000C000 		.long	12583104
 11421 0064 00C000C0 		.long	-1073692672
 11422 0068 C0C0C0C0 		.long	-1061109568
 11423 006c 0C0C0C0C 		.long	202116108
 11424 0070 CCCCCCCC 		.long	-858993460
 11425 0074 33333333 		.long	858993459
 11426 0078 F0000000 		.long	240
 11427 007c 0000F000 		.long	15728640
 11428 0080 F000F000 		.long	15728880
 11429 0084 00F000F0 		.long	-268374016
 11430 0088 F0F0F0F0 		.long	-252645136
 11431 008c 0F0F0F0F 		.long	252645135
 11432              		.section	.rodata.display_mask.7119,"a",@progbits
 11433              		.align 32
 11436              	display_mask.7119:
 11437 0000 F0F0F0F0 		.long	-252645136
 11438 0004 CCCCCCCC 		.long	-858993460
 11439 0008 AAAAAAAA 		.long	-1431655766
 11440 000c 00FF00FF 		.long	-16711936
 11441 0010 F0F0F0F0 		.long	-252645136
 11442 0014 CCCCCCCC 		.long	-858993460
 11443 0018 0000FFFF 		.long	-65536
 11444 001c 00FF00FF 		.long	-16711936
 11445 0020 F0F0F0F0 		.long	-252645136
 11446 0024 0F0F0F0F 		.long	252645135
 11447 0028 33333333 		.long	858993459
 11448 002c 55555555 		.long	1431655765
 11449 0030 00FF00FF 		.long	-16711936
 11450 0034 0F0F0F0F 		.long	252645135
 11451 0038 33333333 		.long	858993459
 11452 003c 0000FFFF 		.long	-65536
 11453 0040 00FF00FF 		.long	-16711936
 11454 0044 0F0F0F0F 		.long	252645135
 11455              		.text
 11456              	.Letext0:
 11457              		.section	.text.unlikely.png_read_filter_row_sub
 11458              	.Letext_cold0:
 11459              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 11460              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 11461              		.file 5 "/usr/include/libio.h"
 11462              		.file 6 "/usr/include/x86_64-linux-gnu/bits/setjmp.h"
 11463              		.file 7 "/usr/include/x86_64-linux-gnu/bits/sigset.h"
 11464              		.file 8 "/usr/include/setjmp.h"
 11465              		.file 9 "fltk-1.3.4-1/png/pngconf.h"
 11466              		.file 10 "fltk-1.3.4-1/png/png.h"
 11467              		.file 11 "fltk-1.3.4-1/png/pngstruct.h"
 11468              		.file 12 "fltk-1.3.4-1/png/pnginfo.h"
 11469              		.file 13 "/usr/include/x86_64-linux-gnu/zconf.h"
 11470              		.file 14 "/usr/include/zlib.h"
 11471              		.file 15 "/usr/include/stdio.h"
 11472              		.file 16 "fltk-1.3.4-1/png/pngpriv.h"
 11473              		.file 17 "/usr/include/string.h"
 11474              		.file 18 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 pngrutil.c
     /tmp/cc6h0Wlx.s:13     .text.png_read_filter_row_sub:0000000000000000 png_read_filter_row_sub
     /tmp/cc6h0Wlx.s:67     .text.png_read_filter_row_up:0000000000000000 png_read_filter_row_up
     /tmp/cc6h0Wlx.s:108    .text.png_read_filter_row_avg:0000000000000000 png_read_filter_row_avg
     /tmp/cc6h0Wlx.s:189    .text.png_read_filter_row_paeth_1byte_pixel:0000000000000000 png_read_filter_row_paeth_1byte_pixel
     /tmp/cc6h0Wlx.s:329    .text.png_read_filter_row_paeth_multibyte_pixel:0000000000000000 png_read_filter_row_paeth_multibyte_pixel
     /tmp/cc6h0Wlx.s:512    .text.png_inflate_claim:0000000000000000 png_inflate_claim
     /tmp/cc6h0Wlx.s:669    .text.png_read_buffer:0000000000000000 png_read_buffer
     /tmp/cc6h0Wlx.s:790    .text.png_inflate.constprop.6:0000000000000000 png_inflate.constprop.6
     /tmp/cc6h0Wlx.s:1026   .text.png_decompress_chunk.constprop.5:0000000000000000 png_decompress_chunk.constprop.5
     /tmp/cc6h0Wlx.s:1383   .text.png_get_fixed_point.constprop.7:0000000000000000 png_get_fixed_point.constprop.7
     /tmp/cc6h0Wlx.s:1426   .text.png_get_uint_31:0000000000000000 png_get_uint_31
     /tmp/cc6h0Wlx.s:1474   .text.png_get_uint_32:0000000000000000 png_get_uint_32
     /tmp/cc6h0Wlx.s:1511   .text.png_get_int_32:0000000000000000 png_get_int_32
     /tmp/cc6h0Wlx.s:1547   .text.png_get_uint_16:0000000000000000 png_get_uint_16
     /tmp/cc6h0Wlx.s:1581   .text.png_read_sig:0000000000000000 png_read_sig
     /tmp/cc6h0Wlx.s:1725   .text.png_crc_read:0000000000000000 png_crc_read
     /tmp/cc6h0Wlx.s:1787   .text.png_inflate_read.part.2.constprop.8:0000000000000000 png_inflate_read.part.2.constprop.8
     /tmp/cc6h0Wlx.s:1977   .text.png_crc_error:0000000000000000 png_crc_error
     /tmp/cc6h0Wlx.s:2087   .text.png_crc_finish:0000000000000000 png_crc_finish
     /tmp/cc6h0Wlx.s:2228   .text.png_cache_unknown_chunk:0000000000000000 png_cache_unknown_chunk
     /tmp/cc6h0Wlx.s:2388   .text.png_handle_IHDR:0000000000000000 png_handle_IHDR
     /tmp/cc6h0Wlx.s:2645   .text.png_handle_PLTE:0000000000000000 png_handle_PLTE
     /tmp/cc6h0Wlx.s:2949   .text.png_handle_IEND:0000000000000000 png_handle_IEND
     /tmp/cc6h0Wlx.s:3032   .text.png_handle_gAMA:0000000000000000 png_handle_gAMA
     /tmp/cc6h0Wlx.s:3161   .text.png_handle_sBIT:0000000000000000 png_handle_sBIT
     /tmp/cc6h0Wlx.s:3429   .text.png_handle_cHRM:0000000000000000 png_handle_cHRM
     /tmp/cc6h0Wlx.s:3690   .text.png_handle_sRGB:0000000000000000 png_handle_sRGB
     /tmp/cc6h0Wlx.s:3853   .text.png_handle_iCCP:0000000000000000 png_handle_iCCP
     /tmp/cc6h0Wlx.s:4665   .text.png_handle_sPLT:0000000000000000 png_handle_sPLT
     /tmp/cc6h0Wlx.s:5050   .text.png_handle_tRNS:0000000000000000 png_handle_tRNS
     /tmp/cc6h0Wlx.s:5340   .text.png_handle_bKGD:0000000000000000 png_handle_bKGD
     /tmp/cc6h0Wlx.s:5621   .text.png_handle_hIST:0000000000000000 png_handle_hIST
     /tmp/cc6h0Wlx.s:5809   .text.png_handle_pHYs:0000000000000000 png_handle_pHYs
     /tmp/cc6h0Wlx.s:5987   .text.png_handle_oFFs:0000000000000000 png_handle_oFFs
     /tmp/cc6h0Wlx.s:6172   .text.png_handle_pCAL:0000000000000000 png_handle_pCAL
     /tmp/cc6h0Wlx.s:6617   .text.png_handle_sCAL:0000000000000000 png_handle_sCAL
     /tmp/cc6h0Wlx.s:6914   .text.png_handle_tIME:0000000000000000 png_handle_tIME
     /tmp/cc6h0Wlx.s:7088   .text.png_handle_tEXt:0000000000000000 png_handle_tEXt
     /tmp/cc6h0Wlx.s:7329   .text.png_handle_zTXt:0000000000000000 png_handle_zTXt
     /tmp/cc6h0Wlx.s:7651   .text.png_handle_iTXt:0000000000000000 png_handle_iTXt
     /tmp/cc6h0Wlx.s:8102   .text.png_handle_unknown:0000000000000000 png_handle_unknown
     /tmp/cc6h0Wlx.s:8380   .text.png_check_chunk_name:0000000000000000 png_check_chunk_name
     /tmp/cc6h0Wlx.s:8437   .text.png_read_chunk_header:0000000000000000 png_read_chunk_header
     /tmp/cc6h0Wlx.s:8544   .text.png_combine_row:0000000000000000 png_combine_row
     /tmp/cc6h0Wlx.s:11436  .rodata.display_mask.7119:0000000000000000 display_mask.7119
     /tmp/cc6h0Wlx.s:11395  .rodata.row_mask.7118:0000000000000000 row_mask.7118
     /tmp/cc6h0Wlx.s:9378   .text.png_do_read_interlace:0000000000000000 png_do_read_interlace
     /tmp/cc6h0Wlx.s:11383  .rodata.png_pass_inc.7163:0000000000000000 png_pass_inc.7163
     /tmp/cc6h0Wlx.s:10281  .text.png_read_filter_row:0000000000000000 png_read_filter_row
     /tmp/cc6h0Wlx.s:10365  .text.png_read_IDAT_data:0000000000000000 png_read_IDAT_data
     /tmp/cc6h0Wlx.s:10665  .text.png_read_finish_IDAT:0000000000000000 png_read_finish_IDAT
     /tmp/cc6h0Wlx.s:10759  .text.png_read_finish_row:0000000000000000 png_read_finish_row
     /tmp/cc6h0Wlx.s:11348  .rodata.png_pass_inc.7356:0000000000000000 png_pass_inc.7347
     /tmp/cc6h0Wlx.s:11336  .rodata.png_pass_start.7355:0000000000000000 png_pass_start.7346
     /tmp/cc6h0Wlx.s:11371  .rodata.png_pass_yinc.7349:0000000000000000 png_pass_yinc.7349
     /tmp/cc6h0Wlx.s:11360  .rodata.png_pass_ystart.7348:0000000000000000 png_pass_ystart.7348
     /tmp/cc6h0Wlx.s:10898  .text.png_read_start_row:0000000000000000 png_read_start_row
     /tmp/cc6h0Wlx.s:11348  .rodata.png_pass_inc.7356:0000000000000000 png_pass_inc.7356
     /tmp/cc6h0Wlx.s:11336  .rodata.png_pass_start.7355:0000000000000000 png_pass_start.7355
                           .group:0000000000000000 wm4.0.cf9695abff4f49bdfe00dc4091904acd
                           .group:0000000000000000 wm4.stdcpredef.h.19.bf2bf6c5fb087dfb5ef2d2297c2795de
                           .group:0000000000000000 wm4.pngpriv.h.26.ca3d1719773cd86007410b516123e125
                           .group:0000000000000000 wm4.features.h.19.22780be97c2f806ec599b8b99aa89f7d
                           .group:0000000000000000 wm4.cdefs.h.19.56613e71f285ebad825b69b151170a81
                           .group:0000000000000000 wm4.wordsize.h.4.256e8fdbd37801980286acdbc40d0280
                           .group:0000000000000000 wm4.cdefs.h.432.619afd0aac7c4b439843706c1b28ddea
                           .group:0000000000000000 wm4.stubs64.h.10.918ceb5fa58268542bf143e4c1efbcf3
                           .group:0000000000000000 wm4.stdlib.h.27.59e2586c75bdbcb991b248ad7257b993
                           .group:0000000000000000 wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1
                           .group:0000000000000000 wm4.stdlib.h.37.e081b308f911db94d3185af615f2b2e2
                           .group:0000000000000000 wm4.string.h.23.8394011d5995a16f15d67d04e84a1d69
                           .group:0000000000000000 wm4.stddef.h.238.04cc7214bceba497b20d15c10fd97511
                           .group:0000000000000000 wm4.string.h.24.1b0dc67418e7128d207285861439c2f8
                           .group:0000000000000000 wm4.endian.h.19.ff00c9c0f5e9f9a9719c5de76ace57b4
                           .group:0000000000000000 wm4.endian.h.41.27d650ce666b76881e2a2a218ea61984
                           .group:0000000000000000 wm4.types.h.89.468e2451361e3b92f048f6cad51690ff
                           .group:0000000000000000 wm4.typesizes.h.24.40eb69a6270178f15d1bf3d7b6635a8b
                           .group:0000000000000000 wm4.string2.h.55.e4a4cfd7781cc64a4341475e67436ab1
                           .group:0000000000000000 wm4.string3.h.31.2b75bd65145c50aeedb61673ce0d3293
                           .group:0000000000000000 wm4.pnglibconf.h.15.30e2eea90e566ac06da4f4de487193d7
                           .group:0000000000000000 wm4.pngpriv.h.130.f65d93453b5b5837849611ffe82d627a
                           .group:0000000000000000 wm4.png.h.412.12a95b2193a7d0bc2282b72c70a28ce1
                           .group:0000000000000000 wm4.limits.h.23.f0fd92c175c1576df467c4d5fe2b091a
                           .group:0000000000000000 wm4.posix1_lim.h.25.28c8eb2d22697e7711efefdec5344a02
                           .group:0000000000000000 wm4.local_lim.h.25.97ee4129efb08ad296101237bcd3401b
                           .group:0000000000000000 wm4.limits.h.2.9ff59823e8adcf4502d980ef41362326
                           .group:0000000000000000 wm4.local_lim.h.42.9dc3935e0e3b94e23cda247e4e39bd8b
                           .group:0000000000000000 wm4.limits.h.60.eb7066f861c8b8edc7a0a399744b0335
                           .group:0000000000000000 wm4.stddef.h.39.d5a83c17f38162a5dd6f834eaf38f8ef
                           .group:0000000000000000 wm4.stdio.h.26.4719156f1aea2bb9662fd6c582dc9a4c
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:0000000000000000 wm4.stdio.h.36.2dd12c1fd035242ad5cfd0152a01be5a
                           .group:0000000000000000 wm4._G_config.h.5.b0f37d9e474454cf6e459063458db32f
                           .group:0000000000000000 wm4.wchar.h.80.eea3eba2d2a17aace9470a8e0d8218dc
                           .group:0000000000000000 wm4._G_config.h.46.5187c97b14fd664662cb32e6b94fc49e
                           .group:0000000000000000 wm4.libio.h.33.a775b9ecae273f33bc59931e9891e4ca
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.libio.h.51.dab170798ec1df48c625aea7c30e1b63
                           .group:0000000000000000 wm4.stdio.h.120.80cbf0ec1718a5b27e6428218e29c72d
                           .group:0000000000000000 wm4.stdio_lim.h.23.f8541119d1bcf759d7de9531671fd758
                           .group:0000000000000000 wm4.stdio.h.172.df21df34a7396d7da2e08f9b617d582f
                           .group:0000000000000000 wm4.stdio.h.26.e50fc3808d57d965ceefc6f6dd102eb7
                           .group:0000000000000000 wm4.sigset.h.20.f36413b6d2364ad847d3db53fb03e683
                           .group:0000000000000000 wm4.setjmp.h.67.51aa194c3c89a841663c00cb93fd90ff
                           .group:0000000000000000 wm4.time.h.26.6a3cabd4f228e226db6723a3b0c81ba6
                           .group:0000000000000000 wm4.time.h.40.99bfb90272c7e82357ef3c2f5c6fefc8
                           .group:0000000000000000 wm4.time.h.53.f8af6908497bac0ca16faea86fb8cd87
                           .group:0000000000000000 wm4.pngconf.h.86.6636b2584cb7be1618479e118d71e58c
                           .group:0000000000000000 wm4.png.h.506.fa53b6434c0b20c8e63094b04d7940c5
                           .group:0000000000000000 wm4.pngpriv.h.298.dc2c896ce0eddc5cfadee24e76e3c417
                           .group:0000000000000000 wm4.float.h.29.1cf88a0527b6b1225d49fbee2b32acb7
                           .group:0000000000000000 wm4.math.h.26.671af5ac9cd425a35e0730f7b6d7cde2
                           .group:0000000000000000 wm4.libmsimddeclstubs.h.34.75644856b74ba3d815155fe5fe7ecc56
                           .group:0000000000000000 wm4.mathdef.h.23.67c0aa4a204f1f427459dfc651aba565
                           .group:0000000000000000 wm4.math.h.55.cf380f99c57d42476a5252f30065036a
                           .group:0000000000000000 wm4.math.h.84.742292806c6be54f49dc607928a827f7
                           .group:0000000000000000 wm4.math.h.105.59ff0f83ebf6a04e70e145cef2d1185e
                           .group:0000000000000000 wm4.math.h.152.48a142bc1575e748473ff86330dee044
                           .group:0000000000000000 wm4.math.h.30.7cada3efe024725df2da4c705b6566be
                           .group:0000000000000000 wm4.pngpriv.h.481.f98e7c29eaaa759546a3f9808bc25c74
                           .group:0000000000000000 wm4.pngstruct.h.22.7b9573417641055ab8f42438aa8afadf
                           .group:0000000000000000 wm4.zconf.h.9.bbc7b5783b51507f7721a5620139b4ee
                           .group:0000000000000000 wm4.zconf.h.397.69c03305677a9a6792fe2a94f7c9f69b
                           .group:0000000000000000 wm4.types.h.23.92678977f3921b8dce508274ac68f78d
                           .group:0000000000000000 wm4.types.h.187.12f6c32afb936b45a5f241219964ce93
                           .group:0000000000000000 wm4.stdarg.h.31.48e922dd0aaedfb616aafd8a7b7a4949
                           .group:0000000000000000 wm4.unistd.h.23.c85a58a698f53edadcf64287ab24fecb
                           .group:0000000000000000 wm4.posix_opt.h.20.9a8aece77957db1725bd2b9521e5f9c5
                           .group:0000000000000000 wm4.unistd.h.213.4c582e35260d661b081322974b7c1e74
                           .group:0000000000000000 wm4.unistd.h.284.7e168706bc8bd978e02fd1da439d9bc3
                           .group:0000000000000000 wm4.confname.h.27.6b00117a32f457cc72e5ac810a9adade
                           .group:0000000000000000 wm4.zconf.h.457.505c3613686dd75e492569d7a56a6eb0
                           .group:0000000000000000 wm4.zlib.h.40.5a15529ab8e285cee4b0ddab32502c27
                           .group:0000000000000000 wm4.pngstruct.h.44.bc957704556ff8ddcb697678a008ffae
                           .group:0000000000000000 wm4.pngpriv.h.853.4585af3e74cfb155d8486c5333b94adf
                           .group:0000000000000000 wm4.pngdebug.h.36.e9c57d5f35e3128225fb629498ec6fc8

UNDEFINED SYMBOLS
inflateReset
inflateInit_
png_zstream_error
png_safecat
png_chunk_warning
__stack_chk_fail
png_free
png_malloc_base
png_chunk_error
inflate
png_chunk_benign_error
memcpy
png_error
png_read_data
png_sig_cmp
png_calculate_crc
png_malloc_warn
png_set_IHDR
png_set_PLTE
png_colorspace_set_gamma
png_colorspace_sync
png_set_sBIT
png_colorspace_set_chromaticities
png_colorspace_set_sRGB
png_icc_check_length
png_icc_check_header
png_icc_check_tag_table
png_icc_set_sRGB
png_free_data
png_warning
png_set_sPLT
png_set_tRNS
png_set_bKGD
png_set_hIST
png_set_pHYs
png_set_oFFs
png_set_pCAL
png_check_fp_number
png_set_sCAL_s
png_set_tIME
strlen
png_set_text_2
png_set_unknown_chunks
png_app_warning
png_reset_crc
__memcpy_chk
memset
png_init_read_transformations
png_malloc
png_calloc
