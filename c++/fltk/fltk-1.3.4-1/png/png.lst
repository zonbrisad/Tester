   1              		.file	"png.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.unlikely.png_pow10,"ax",@progbits
   5              	.LCOLDB3:
   6              		.section	.text.png_pow10,"ax",@progbits
   7              	.LHOTB3:
   8              		.p2align 4,,15
   9              		.section	.text.unlikely.png_pow10
  10              	.Ltext_cold0:
  11              		.section	.text.png_pow10
  13              	png_pow10:
  14              	.LFB114:
  15              		.file 1 "fltk-1.3.4-1/png/png.c"
   1:fltk-1.3.4-1/png/png.c **** 
   2:fltk-1.3.4-1/png/png.c **** /* png.c - location for general purpose libpng functions
   3:fltk-1.3.4-1/png/png.c ****  *
   4:fltk-1.3.4-1/png/png.c ****  * Last changed in libpng 1.6.16 [December 22, 2014]
   5:fltk-1.3.4-1/png/png.c ****  * Copyright (c) 1998-2014 Glenn Randers-Pehrson
   6:fltk-1.3.4-1/png/png.c ****  * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
   7:fltk-1.3.4-1/png/png.c ****  * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
   8:fltk-1.3.4-1/png/png.c ****  *
   9:fltk-1.3.4-1/png/png.c ****  * This code is released under the libpng license.
  10:fltk-1.3.4-1/png/png.c ****  * For conditions of distribution and use, see the disclaimer
  11:fltk-1.3.4-1/png/png.c ****  * and license in png.h
  12:fltk-1.3.4-1/png/png.c ****  */
  13:fltk-1.3.4-1/png/png.c **** 
  14:fltk-1.3.4-1/png/png.c **** #include "pngpriv.h"
  15:fltk-1.3.4-1/png/png.c **** 
  16:fltk-1.3.4-1/png/png.c **** /* Generate a compiler error if there is an old png.h in the search path. */
  17:fltk-1.3.4-1/png/png.c **** typedef png_libpng_version_1_6_16 Your_png_h_is_not_version_1_6_16;
  18:fltk-1.3.4-1/png/png.c **** 
  19:fltk-1.3.4-1/png/png.c **** /* Tells libpng that we have already handled the first "num_bytes" bytes
  20:fltk-1.3.4-1/png/png.c ****  * of the PNG file signature.  If the PNG data is embedded into another
  21:fltk-1.3.4-1/png/png.c ****  * stream we can set num_bytes = 8 so that libpng will not attempt to read
  22:fltk-1.3.4-1/png/png.c ****  * or write any of the magic bytes before it starts on the IHDR.
  23:fltk-1.3.4-1/png/png.c ****  */
  24:fltk-1.3.4-1/png/png.c **** 
  25:fltk-1.3.4-1/png/png.c **** #ifdef PNG_READ_SUPPORTED
  26:fltk-1.3.4-1/png/png.c **** void PNGAPI
  27:fltk-1.3.4-1/png/png.c **** png_set_sig_bytes(png_structrp png_ptr, int num_bytes)
  28:fltk-1.3.4-1/png/png.c **** {
  29:fltk-1.3.4-1/png/png.c ****    png_debug(1, "in png_set_sig_bytes");
  30:fltk-1.3.4-1/png/png.c **** 
  31:fltk-1.3.4-1/png/png.c ****    if (png_ptr == NULL)
  32:fltk-1.3.4-1/png/png.c ****       return;
  33:fltk-1.3.4-1/png/png.c **** 
  34:fltk-1.3.4-1/png/png.c ****    if (num_bytes > 8)
  35:fltk-1.3.4-1/png/png.c ****       png_error(png_ptr, "Too many bytes for PNG signature");
  36:fltk-1.3.4-1/png/png.c **** 
  37:fltk-1.3.4-1/png/png.c ****    png_ptr->sig_bytes = (png_byte)(num_bytes < 0 ? 0 : num_bytes);
  38:fltk-1.3.4-1/png/png.c **** }
  39:fltk-1.3.4-1/png/png.c **** 
  40:fltk-1.3.4-1/png/png.c **** /* Checks whether the supplied bytes match the PNG signature.  We allow
  41:fltk-1.3.4-1/png/png.c ****  * checking less than the full 8-byte signature so that those apps that
  42:fltk-1.3.4-1/png/png.c ****  * already read the first few bytes of a file to determine the file type
  43:fltk-1.3.4-1/png/png.c ****  * can simply check the remaining bytes for extra assurance.  Returns
  44:fltk-1.3.4-1/png/png.c ****  * an integer less than, equal to, or greater than zero if sig is found,
  45:fltk-1.3.4-1/png/png.c ****  * respectively, to be less than, to match, or be greater than the correct
  46:fltk-1.3.4-1/png/png.c ****  * PNG signature (this is the same behavior as strcmp, memcmp, etc).
  47:fltk-1.3.4-1/png/png.c ****  */
  48:fltk-1.3.4-1/png/png.c **** int PNGAPI
  49:fltk-1.3.4-1/png/png.c **** png_sig_cmp(png_const_bytep sig, png_size_t start, png_size_t num_to_check)
  50:fltk-1.3.4-1/png/png.c **** {
  51:fltk-1.3.4-1/png/png.c ****    png_byte png_signature[8] = {137, 80, 78, 71, 13, 10, 26, 10};
  52:fltk-1.3.4-1/png/png.c **** 
  53:fltk-1.3.4-1/png/png.c ****    if (num_to_check > 8)
  54:fltk-1.3.4-1/png/png.c ****       num_to_check = 8;
  55:fltk-1.3.4-1/png/png.c **** 
  56:fltk-1.3.4-1/png/png.c ****    else if (num_to_check < 1)
  57:fltk-1.3.4-1/png/png.c ****       return (-1);
  58:fltk-1.3.4-1/png/png.c **** 
  59:fltk-1.3.4-1/png/png.c ****    if (start > 7)
  60:fltk-1.3.4-1/png/png.c ****       return (-1);
  61:fltk-1.3.4-1/png/png.c **** 
  62:fltk-1.3.4-1/png/png.c ****    if (start + num_to_check > 8)
  63:fltk-1.3.4-1/png/png.c ****       num_to_check = 8 - start;
  64:fltk-1.3.4-1/png/png.c **** 
  65:fltk-1.3.4-1/png/png.c ****    return ((int)(memcmp(&sig[start], &png_signature[start], num_to_check)));
  66:fltk-1.3.4-1/png/png.c **** }
  67:fltk-1.3.4-1/png/png.c **** 
  68:fltk-1.3.4-1/png/png.c **** #endif /* READ */
  69:fltk-1.3.4-1/png/png.c **** 
  70:fltk-1.3.4-1/png/png.c **** #if defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED)
  71:fltk-1.3.4-1/png/png.c **** /* Function to allocate memory for zlib */
  72:fltk-1.3.4-1/png/png.c **** PNG_FUNCTION(voidpf /* PRIVATE */,
  73:fltk-1.3.4-1/png/png.c **** png_zalloc,(voidpf png_ptr, uInt items, uInt size),PNG_ALLOCATED)
  74:fltk-1.3.4-1/png/png.c **** {
  75:fltk-1.3.4-1/png/png.c ****    png_alloc_size_t num_bytes = size;
  76:fltk-1.3.4-1/png/png.c **** 
  77:fltk-1.3.4-1/png/png.c ****    if (png_ptr == NULL)
  78:fltk-1.3.4-1/png/png.c ****       return NULL;
  79:fltk-1.3.4-1/png/png.c **** 
  80:fltk-1.3.4-1/png/png.c ****    if (items >= (~(png_alloc_size_t)0)/size)
  81:fltk-1.3.4-1/png/png.c ****    {
  82:fltk-1.3.4-1/png/png.c ****       png_warning (png_voidcast(png_structrp, png_ptr),
  83:fltk-1.3.4-1/png/png.c ****          "Potential overflow in png_zalloc()");
  84:fltk-1.3.4-1/png/png.c ****       return NULL;
  85:fltk-1.3.4-1/png/png.c ****    }
  86:fltk-1.3.4-1/png/png.c **** 
  87:fltk-1.3.4-1/png/png.c ****    num_bytes *= items;
  88:fltk-1.3.4-1/png/png.c ****    return png_malloc_warn(png_voidcast(png_structrp, png_ptr), num_bytes);
  89:fltk-1.3.4-1/png/png.c **** }
  90:fltk-1.3.4-1/png/png.c **** 
  91:fltk-1.3.4-1/png/png.c **** /* Function to free memory for zlib */
  92:fltk-1.3.4-1/png/png.c **** void /* PRIVATE */
  93:fltk-1.3.4-1/png/png.c **** png_zfree(voidpf png_ptr, voidpf ptr)
  94:fltk-1.3.4-1/png/png.c **** {
  95:fltk-1.3.4-1/png/png.c ****    png_free(png_voidcast(png_const_structrp,png_ptr), ptr);
  96:fltk-1.3.4-1/png/png.c **** }
  97:fltk-1.3.4-1/png/png.c **** 
  98:fltk-1.3.4-1/png/png.c **** /* Reset the CRC variable to 32 bits of 1's.  Care must be taken
  99:fltk-1.3.4-1/png/png.c ****  * in case CRC is > 32 bits to leave the top bits 0.
 100:fltk-1.3.4-1/png/png.c ****  */
 101:fltk-1.3.4-1/png/png.c **** void /* PRIVATE */
 102:fltk-1.3.4-1/png/png.c **** png_reset_crc(png_structrp png_ptr)
 103:fltk-1.3.4-1/png/png.c **** {
 104:fltk-1.3.4-1/png/png.c ****    /* The cast is safe because the crc is a 32 bit value. */
 105:fltk-1.3.4-1/png/png.c ****    png_ptr->crc = (png_uint_32)crc32(0, Z_NULL, 0);
 106:fltk-1.3.4-1/png/png.c **** }
 107:fltk-1.3.4-1/png/png.c **** 
 108:fltk-1.3.4-1/png/png.c **** /* Calculate the CRC over a section of data.  We can only pass as
 109:fltk-1.3.4-1/png/png.c ****  * much data to this routine as the largest single buffer size.  We
 110:fltk-1.3.4-1/png/png.c ****  * also check that this data will actually be used before going to the
 111:fltk-1.3.4-1/png/png.c ****  * trouble of calculating it.
 112:fltk-1.3.4-1/png/png.c ****  */
 113:fltk-1.3.4-1/png/png.c **** void /* PRIVATE */
 114:fltk-1.3.4-1/png/png.c **** png_calculate_crc(png_structrp png_ptr, png_const_bytep ptr, png_size_t length)
 115:fltk-1.3.4-1/png/png.c **** {
 116:fltk-1.3.4-1/png/png.c ****    int need_crc = 1;
 117:fltk-1.3.4-1/png/png.c **** 
 118:fltk-1.3.4-1/png/png.c ****    if (PNG_CHUNK_ANCILLARY(png_ptr->chunk_name) != 0)
 119:fltk-1.3.4-1/png/png.c ****    {
 120:fltk-1.3.4-1/png/png.c ****       if ((png_ptr->flags & PNG_FLAG_CRC_ANCILLARY_MASK) ==
 121:fltk-1.3.4-1/png/png.c ****           (PNG_FLAG_CRC_ANCILLARY_USE | PNG_FLAG_CRC_ANCILLARY_NOWARN))
 122:fltk-1.3.4-1/png/png.c ****          need_crc = 0;
 123:fltk-1.3.4-1/png/png.c ****    }
 124:fltk-1.3.4-1/png/png.c **** 
 125:fltk-1.3.4-1/png/png.c ****    else /* critical */
 126:fltk-1.3.4-1/png/png.c ****    {
 127:fltk-1.3.4-1/png/png.c ****       if ((png_ptr->flags & PNG_FLAG_CRC_CRITICAL_IGNORE) != 0)
 128:fltk-1.3.4-1/png/png.c ****          need_crc = 0;
 129:fltk-1.3.4-1/png/png.c ****    }
 130:fltk-1.3.4-1/png/png.c **** 
 131:fltk-1.3.4-1/png/png.c ****    /* 'uLong' is defined in zlib.h as unsigned long; this means that on some
 132:fltk-1.3.4-1/png/png.c ****     * systems it is a 64 bit value.  crc32, however, returns 32 bits so the
 133:fltk-1.3.4-1/png/png.c ****     * following cast is safe.  'uInt' may be no more than 16 bits, so it is
 134:fltk-1.3.4-1/png/png.c ****     * necessary to perform a loop here.
 135:fltk-1.3.4-1/png/png.c ****     */
 136:fltk-1.3.4-1/png/png.c ****    if (need_crc != 0 && length > 0)
 137:fltk-1.3.4-1/png/png.c ****    {
 138:fltk-1.3.4-1/png/png.c ****       uLong crc = png_ptr->crc; /* Should never issue a warning */
 139:fltk-1.3.4-1/png/png.c **** 
 140:fltk-1.3.4-1/png/png.c ****       do
 141:fltk-1.3.4-1/png/png.c ****       {
 142:fltk-1.3.4-1/png/png.c ****          uInt safe_length = (uInt)length;
 143:fltk-1.3.4-1/png/png.c ****          if (safe_length == 0)
 144:fltk-1.3.4-1/png/png.c ****             safe_length = (uInt)-1; /* evil, but safe */
 145:fltk-1.3.4-1/png/png.c **** 
 146:fltk-1.3.4-1/png/png.c ****          crc = crc32(crc, ptr, safe_length);
 147:fltk-1.3.4-1/png/png.c **** 
 148:fltk-1.3.4-1/png/png.c ****          /* The following should never issue compiler warnings; if they do the
 149:fltk-1.3.4-1/png/png.c ****           * target system has characteristics that will probably violate other
 150:fltk-1.3.4-1/png/png.c ****           * assumptions within the libpng code.
 151:fltk-1.3.4-1/png/png.c ****           */
 152:fltk-1.3.4-1/png/png.c ****          ptr += safe_length;
 153:fltk-1.3.4-1/png/png.c ****          length -= safe_length;
 154:fltk-1.3.4-1/png/png.c ****       }
 155:fltk-1.3.4-1/png/png.c ****       while (length > 0);
 156:fltk-1.3.4-1/png/png.c **** 
 157:fltk-1.3.4-1/png/png.c ****       /* And the following is always safe because the crc is only 32 bits. */
 158:fltk-1.3.4-1/png/png.c ****       png_ptr->crc = (png_uint_32)crc;
 159:fltk-1.3.4-1/png/png.c ****    }
 160:fltk-1.3.4-1/png/png.c **** }
 161:fltk-1.3.4-1/png/png.c **** 
 162:fltk-1.3.4-1/png/png.c **** /* Check a user supplied version number, called from both read and write
 163:fltk-1.3.4-1/png/png.c ****  * functions that create a png_struct.
 164:fltk-1.3.4-1/png/png.c ****  */
 165:fltk-1.3.4-1/png/png.c **** int
 166:fltk-1.3.4-1/png/png.c **** png_user_version_check(png_structrp png_ptr, png_const_charp user_png_ver)
 167:fltk-1.3.4-1/png/png.c **** {
 168:fltk-1.3.4-1/png/png.c ****      /* Libpng versions 1.0.0 and later are binary compatible if the version
 169:fltk-1.3.4-1/png/png.c ****       * string matches through the second '.'; we must recompile any
 170:fltk-1.3.4-1/png/png.c ****       * applications that use any older library version.
 171:fltk-1.3.4-1/png/png.c ****       */
 172:fltk-1.3.4-1/png/png.c **** 
 173:fltk-1.3.4-1/png/png.c ****    if (user_png_ver != NULL)
 174:fltk-1.3.4-1/png/png.c ****    {
 175:fltk-1.3.4-1/png/png.c ****       int i = -1;
 176:fltk-1.3.4-1/png/png.c ****       int found_dots = 0;
 177:fltk-1.3.4-1/png/png.c **** 
 178:fltk-1.3.4-1/png/png.c ****       do
 179:fltk-1.3.4-1/png/png.c ****       {
 180:fltk-1.3.4-1/png/png.c ****          i++;
 181:fltk-1.3.4-1/png/png.c ****          if (user_png_ver[i] != PNG_LIBPNG_VER_STRING[i])
 182:fltk-1.3.4-1/png/png.c ****             png_ptr->flags |= PNG_FLAG_LIBRARY_MISMATCH;
 183:fltk-1.3.4-1/png/png.c ****          if (user_png_ver[i] == '.')
 184:fltk-1.3.4-1/png/png.c ****             found_dots++;
 185:fltk-1.3.4-1/png/png.c ****       } while (found_dots < 2 && user_png_ver[i] != 0 &&
 186:fltk-1.3.4-1/png/png.c ****             PNG_LIBPNG_VER_STRING[i] != 0);
 187:fltk-1.3.4-1/png/png.c ****    }
 188:fltk-1.3.4-1/png/png.c **** 
 189:fltk-1.3.4-1/png/png.c ****    else
 190:fltk-1.3.4-1/png/png.c ****       png_ptr->flags |= PNG_FLAG_LIBRARY_MISMATCH;
 191:fltk-1.3.4-1/png/png.c **** 
 192:fltk-1.3.4-1/png/png.c ****    if ((png_ptr->flags & PNG_FLAG_LIBRARY_MISMATCH) != 0)
 193:fltk-1.3.4-1/png/png.c ****    {
 194:fltk-1.3.4-1/png/png.c **** #ifdef PNG_WARNINGS_SUPPORTED
 195:fltk-1.3.4-1/png/png.c ****       size_t pos = 0;
 196:fltk-1.3.4-1/png/png.c ****       char m[128];
 197:fltk-1.3.4-1/png/png.c **** 
 198:fltk-1.3.4-1/png/png.c ****       pos = png_safecat(m, (sizeof m), pos,
 199:fltk-1.3.4-1/png/png.c ****           "Application built with libpng-");
 200:fltk-1.3.4-1/png/png.c ****       pos = png_safecat(m, (sizeof m), pos, user_png_ver);
 201:fltk-1.3.4-1/png/png.c ****       pos = png_safecat(m, (sizeof m), pos, " but running with ");
 202:fltk-1.3.4-1/png/png.c ****       pos = png_safecat(m, (sizeof m), pos, PNG_LIBPNG_VER_STRING);
 203:fltk-1.3.4-1/png/png.c ****       PNG_UNUSED(pos)
 204:fltk-1.3.4-1/png/png.c **** 
 205:fltk-1.3.4-1/png/png.c ****       png_warning(png_ptr, m);
 206:fltk-1.3.4-1/png/png.c **** #endif
 207:fltk-1.3.4-1/png/png.c **** 
 208:fltk-1.3.4-1/png/png.c **** #ifdef PNG_ERROR_NUMBERS_SUPPORTED
 209:fltk-1.3.4-1/png/png.c ****       png_ptr->flags = 0;
 210:fltk-1.3.4-1/png/png.c **** #endif
 211:fltk-1.3.4-1/png/png.c **** 
 212:fltk-1.3.4-1/png/png.c ****       return 0;
 213:fltk-1.3.4-1/png/png.c ****    }
 214:fltk-1.3.4-1/png/png.c **** 
 215:fltk-1.3.4-1/png/png.c ****    /* Success return. */
 216:fltk-1.3.4-1/png/png.c ****    return 1;
 217:fltk-1.3.4-1/png/png.c **** }
 218:fltk-1.3.4-1/png/png.c **** 
 219:fltk-1.3.4-1/png/png.c **** /* Generic function to create a png_struct for either read or write - this
 220:fltk-1.3.4-1/png/png.c ****  * contains the common initialization.
 221:fltk-1.3.4-1/png/png.c ****  */
 222:fltk-1.3.4-1/png/png.c **** PNG_FUNCTION(png_structp /* PRIVATE */,
 223:fltk-1.3.4-1/png/png.c **** png_create_png_struct,(png_const_charp user_png_ver, png_voidp error_ptr,
 224:fltk-1.3.4-1/png/png.c ****     png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,
 225:fltk-1.3.4-1/png/png.c ****     png_malloc_ptr malloc_fn, png_free_ptr free_fn),PNG_ALLOCATED)
 226:fltk-1.3.4-1/png/png.c **** {
 227:fltk-1.3.4-1/png/png.c ****    png_struct create_struct;
 228:fltk-1.3.4-1/png/png.c **** #  ifdef PNG_SETJMP_SUPPORTED
 229:fltk-1.3.4-1/png/png.c ****       jmp_buf create_jmp_buf;
 230:fltk-1.3.4-1/png/png.c **** #  endif
 231:fltk-1.3.4-1/png/png.c **** 
 232:fltk-1.3.4-1/png/png.c ****    /* This temporary stack-allocated structure is used to provide a place to
 233:fltk-1.3.4-1/png/png.c ****     * build enough context to allow the user provided memory allocator (if any)
 234:fltk-1.3.4-1/png/png.c ****     * to be called.
 235:fltk-1.3.4-1/png/png.c ****     */
 236:fltk-1.3.4-1/png/png.c ****    memset(&create_struct, 0, (sizeof create_struct));
 237:fltk-1.3.4-1/png/png.c **** 
 238:fltk-1.3.4-1/png/png.c ****    /* Added at libpng-1.2.6 */
 239:fltk-1.3.4-1/png/png.c **** #  ifdef PNG_USER_LIMITS_SUPPORTED
 240:fltk-1.3.4-1/png/png.c ****       create_struct.user_width_max = PNG_USER_WIDTH_MAX;
 241:fltk-1.3.4-1/png/png.c ****       create_struct.user_height_max = PNG_USER_HEIGHT_MAX;
 242:fltk-1.3.4-1/png/png.c **** 
 243:fltk-1.3.4-1/png/png.c **** #     ifdef PNG_USER_CHUNK_CACHE_MAX
 244:fltk-1.3.4-1/png/png.c ****          /* Added at libpng-1.2.43 and 1.4.0 */
 245:fltk-1.3.4-1/png/png.c ****          create_struct.user_chunk_cache_max = PNG_USER_CHUNK_CACHE_MAX;
 246:fltk-1.3.4-1/png/png.c **** #     endif
 247:fltk-1.3.4-1/png/png.c **** 
 248:fltk-1.3.4-1/png/png.c **** #     ifdef PNG_USER_CHUNK_MALLOC_MAX
 249:fltk-1.3.4-1/png/png.c ****          /* Added at libpng-1.2.43 and 1.4.1, required only for read but exists
 250:fltk-1.3.4-1/png/png.c ****           * in png_struct regardless.
 251:fltk-1.3.4-1/png/png.c ****           */
 252:fltk-1.3.4-1/png/png.c ****          create_struct.user_chunk_malloc_max = PNG_USER_CHUNK_MALLOC_MAX;
 253:fltk-1.3.4-1/png/png.c **** #     endif
 254:fltk-1.3.4-1/png/png.c **** #  endif
 255:fltk-1.3.4-1/png/png.c **** 
 256:fltk-1.3.4-1/png/png.c ****    /* The following two API calls simply set fields in png_struct, so it is safe
 257:fltk-1.3.4-1/png/png.c ****     * to do them now even though error handling is not yet set up.
 258:fltk-1.3.4-1/png/png.c ****     */
 259:fltk-1.3.4-1/png/png.c **** #  ifdef PNG_USER_MEM_SUPPORTED
 260:fltk-1.3.4-1/png/png.c ****       png_set_mem_fn(&create_struct, mem_ptr, malloc_fn, free_fn);
 261:fltk-1.3.4-1/png/png.c **** #  else
 262:fltk-1.3.4-1/png/png.c ****       PNG_UNUSED(mem_ptr)
 263:fltk-1.3.4-1/png/png.c ****       PNG_UNUSED(malloc_fn)
 264:fltk-1.3.4-1/png/png.c ****       PNG_UNUSED(free_fn)
 265:fltk-1.3.4-1/png/png.c **** #  endif
 266:fltk-1.3.4-1/png/png.c **** 
 267:fltk-1.3.4-1/png/png.c ****    /* (*error_fn) can return control to the caller after the error_ptr is set,
 268:fltk-1.3.4-1/png/png.c ****     * this will result in a memory leak unless the error_fn does something
 269:fltk-1.3.4-1/png/png.c ****     * extremely sophisticated.  The design lacks merit but is implicit in the
 270:fltk-1.3.4-1/png/png.c ****     * API.
 271:fltk-1.3.4-1/png/png.c ****     */
 272:fltk-1.3.4-1/png/png.c ****    png_set_error_fn(&create_struct, error_ptr, error_fn, warn_fn);
 273:fltk-1.3.4-1/png/png.c **** 
 274:fltk-1.3.4-1/png/png.c **** #  ifdef PNG_SETJMP_SUPPORTED
 275:fltk-1.3.4-1/png/png.c ****       if (!setjmp(create_jmp_buf))
 276:fltk-1.3.4-1/png/png.c ****       {
 277:fltk-1.3.4-1/png/png.c ****          /* Temporarily fake out the longjmp information until we have
 278:fltk-1.3.4-1/png/png.c ****           * successfully completed this function.  This only works if we have
 279:fltk-1.3.4-1/png/png.c ****           * setjmp() support compiled in, but it is safe - this stuff should
 280:fltk-1.3.4-1/png/png.c ****           * never happen.
 281:fltk-1.3.4-1/png/png.c ****           */
 282:fltk-1.3.4-1/png/png.c ****          create_struct.jmp_buf_ptr = &create_jmp_buf;
 283:fltk-1.3.4-1/png/png.c ****          create_struct.jmp_buf_size = 0; /*stack allocation*/
 284:fltk-1.3.4-1/png/png.c ****          create_struct.longjmp_fn = longjmp;
 285:fltk-1.3.4-1/png/png.c **** #  else
 286:fltk-1.3.4-1/png/png.c ****       {
 287:fltk-1.3.4-1/png/png.c **** #  endif
 288:fltk-1.3.4-1/png/png.c ****          /* Call the general version checker (shared with read and write code):
 289:fltk-1.3.4-1/png/png.c ****           */
 290:fltk-1.3.4-1/png/png.c ****          if (png_user_version_check(&create_struct, user_png_ver) != 0)
 291:fltk-1.3.4-1/png/png.c ****          {
 292:fltk-1.3.4-1/png/png.c ****             png_structrp png_ptr = png_voidcast(png_structrp,
 293:fltk-1.3.4-1/png/png.c ****                png_malloc_warn(&create_struct, (sizeof *png_ptr)));
 294:fltk-1.3.4-1/png/png.c **** 
 295:fltk-1.3.4-1/png/png.c ****             if (png_ptr != NULL)
 296:fltk-1.3.4-1/png/png.c ****             {
 297:fltk-1.3.4-1/png/png.c ****                /* png_ptr->zstream holds a back-pointer to the png_struct, so
 298:fltk-1.3.4-1/png/png.c ****                 * this can only be done now:
 299:fltk-1.3.4-1/png/png.c ****                 */
 300:fltk-1.3.4-1/png/png.c ****                create_struct.zstream.zalloc = png_zalloc;
 301:fltk-1.3.4-1/png/png.c ****                create_struct.zstream.zfree = png_zfree;
 302:fltk-1.3.4-1/png/png.c ****                create_struct.zstream.opaque = png_ptr;
 303:fltk-1.3.4-1/png/png.c **** 
 304:fltk-1.3.4-1/png/png.c **** #              ifdef PNG_SETJMP_SUPPORTED
 305:fltk-1.3.4-1/png/png.c ****                   /* Eliminate the local error handling: */
 306:fltk-1.3.4-1/png/png.c ****                   create_struct.jmp_buf_ptr = NULL;
 307:fltk-1.3.4-1/png/png.c ****                   create_struct.jmp_buf_size = 0;
 308:fltk-1.3.4-1/png/png.c ****                   create_struct.longjmp_fn = 0;
 309:fltk-1.3.4-1/png/png.c **** #              endif
 310:fltk-1.3.4-1/png/png.c **** 
 311:fltk-1.3.4-1/png/png.c ****                *png_ptr = create_struct;
 312:fltk-1.3.4-1/png/png.c **** 
 313:fltk-1.3.4-1/png/png.c ****                /* This is the successful return point */
 314:fltk-1.3.4-1/png/png.c ****                return png_ptr;
 315:fltk-1.3.4-1/png/png.c ****             }
 316:fltk-1.3.4-1/png/png.c ****          }
 317:fltk-1.3.4-1/png/png.c ****       }
 318:fltk-1.3.4-1/png/png.c **** 
 319:fltk-1.3.4-1/png/png.c ****    /* A longjmp because of a bug in the application storage allocator or a
 320:fltk-1.3.4-1/png/png.c ****     * simple failure to allocate the png_struct.
 321:fltk-1.3.4-1/png/png.c ****     */
 322:fltk-1.3.4-1/png/png.c ****    return NULL;
 323:fltk-1.3.4-1/png/png.c **** }
 324:fltk-1.3.4-1/png/png.c **** 
 325:fltk-1.3.4-1/png/png.c **** /* Allocate the memory for an info_struct for the application. */
 326:fltk-1.3.4-1/png/png.c **** PNG_FUNCTION(png_infop,PNGAPI
 327:fltk-1.3.4-1/png/png.c **** png_create_info_struct,(png_const_structrp png_ptr),PNG_ALLOCATED)
 328:fltk-1.3.4-1/png/png.c **** {
 329:fltk-1.3.4-1/png/png.c ****    png_inforp info_ptr;
 330:fltk-1.3.4-1/png/png.c **** 
 331:fltk-1.3.4-1/png/png.c ****    png_debug(1, "in png_create_info_struct");
 332:fltk-1.3.4-1/png/png.c **** 
 333:fltk-1.3.4-1/png/png.c ****    if (png_ptr == NULL)
 334:fltk-1.3.4-1/png/png.c ****       return NULL;
 335:fltk-1.3.4-1/png/png.c **** 
 336:fltk-1.3.4-1/png/png.c ****    /* Use the internal API that does not (or at least should not) error out, so
 337:fltk-1.3.4-1/png/png.c ****     * that this call always returns ok.  The application typically sets up the
 338:fltk-1.3.4-1/png/png.c ****     * error handling *after* creating the info_struct because this is the way it
 339:fltk-1.3.4-1/png/png.c ****     * has always been done in 'example.c'.
 340:fltk-1.3.4-1/png/png.c ****     */
 341:fltk-1.3.4-1/png/png.c ****    info_ptr = png_voidcast(png_inforp, png_malloc_base(png_ptr,
 342:fltk-1.3.4-1/png/png.c ****       (sizeof *info_ptr)));
 343:fltk-1.3.4-1/png/png.c **** 
 344:fltk-1.3.4-1/png/png.c ****    if (info_ptr != NULL)
 345:fltk-1.3.4-1/png/png.c ****       memset(info_ptr, 0, (sizeof *info_ptr));
 346:fltk-1.3.4-1/png/png.c **** 
 347:fltk-1.3.4-1/png/png.c ****    return info_ptr;
 348:fltk-1.3.4-1/png/png.c **** }
 349:fltk-1.3.4-1/png/png.c **** 
 350:fltk-1.3.4-1/png/png.c **** /* This function frees the memory associated with a single info struct.
 351:fltk-1.3.4-1/png/png.c ****  * Normally, one would use either png_destroy_read_struct() or
 352:fltk-1.3.4-1/png/png.c ****  * png_destroy_write_struct() to free an info struct, but this may be
 353:fltk-1.3.4-1/png/png.c ****  * useful for some applications.  From libpng 1.6.0 this function is also used
 354:fltk-1.3.4-1/png/png.c ****  * internally to implement the png_info release part of the 'struct' destroy
 355:fltk-1.3.4-1/png/png.c ****  * APIs.  This ensures that all possible approaches free the same data (all of
 356:fltk-1.3.4-1/png/png.c ****  * it).
 357:fltk-1.3.4-1/png/png.c ****  */
 358:fltk-1.3.4-1/png/png.c **** void PNGAPI
 359:fltk-1.3.4-1/png/png.c **** png_destroy_info_struct(png_const_structrp png_ptr, png_infopp info_ptr_ptr)
 360:fltk-1.3.4-1/png/png.c **** {
 361:fltk-1.3.4-1/png/png.c ****    png_inforp info_ptr = NULL;
 362:fltk-1.3.4-1/png/png.c **** 
 363:fltk-1.3.4-1/png/png.c ****    png_debug(1, "in png_destroy_info_struct");
 364:fltk-1.3.4-1/png/png.c **** 
 365:fltk-1.3.4-1/png/png.c ****    if (png_ptr == NULL)
 366:fltk-1.3.4-1/png/png.c ****       return;
 367:fltk-1.3.4-1/png/png.c **** 
 368:fltk-1.3.4-1/png/png.c ****    if (info_ptr_ptr != NULL)
 369:fltk-1.3.4-1/png/png.c ****       info_ptr = *info_ptr_ptr;
 370:fltk-1.3.4-1/png/png.c **** 
 371:fltk-1.3.4-1/png/png.c ****    if (info_ptr != NULL)
 372:fltk-1.3.4-1/png/png.c ****    {
 373:fltk-1.3.4-1/png/png.c ****       /* Do this first in case of an error below; if the app implements its own
 374:fltk-1.3.4-1/png/png.c ****        * memory management this can lead to png_free calling png_error, which
 375:fltk-1.3.4-1/png/png.c ****        * will abort this routine and return control to the app error handler.
 376:fltk-1.3.4-1/png/png.c ****        * An infinite loop may result if it then tries to free the same info
 377:fltk-1.3.4-1/png/png.c ****        * ptr.
 378:fltk-1.3.4-1/png/png.c ****        */
 379:fltk-1.3.4-1/png/png.c ****       *info_ptr_ptr = NULL;
 380:fltk-1.3.4-1/png/png.c **** 
 381:fltk-1.3.4-1/png/png.c ****       png_free_data(png_ptr, info_ptr, PNG_FREE_ALL, -1);
 382:fltk-1.3.4-1/png/png.c ****       memset(info_ptr, 0, (sizeof *info_ptr));
 383:fltk-1.3.4-1/png/png.c ****       png_free(png_ptr, info_ptr);
 384:fltk-1.3.4-1/png/png.c ****    }
 385:fltk-1.3.4-1/png/png.c **** }
 386:fltk-1.3.4-1/png/png.c **** 
 387:fltk-1.3.4-1/png/png.c **** /* Initialize the info structure.  This is now an internal function (0.89)
 388:fltk-1.3.4-1/png/png.c ****  * and applications using it are urged to use png_create_info_struct()
 389:fltk-1.3.4-1/png/png.c ****  * instead.  Use deprecated in 1.6.0, internal use removed (used internally it
 390:fltk-1.3.4-1/png/png.c ****  * is just a memset).
 391:fltk-1.3.4-1/png/png.c ****  *
 392:fltk-1.3.4-1/png/png.c ****  * NOTE: it is almost inconceivable that this API is used because it bypasses
 393:fltk-1.3.4-1/png/png.c ****  * the user-memory mechanism and the user error handling/warning mechanisms in
 394:fltk-1.3.4-1/png/png.c ****  * those cases where it does anything other than a memset.
 395:fltk-1.3.4-1/png/png.c ****  */
 396:fltk-1.3.4-1/png/png.c **** PNG_FUNCTION(void,PNGAPI
 397:fltk-1.3.4-1/png/png.c **** png_info_init_3,(png_infopp ptr_ptr, png_size_t png_info_struct_size),
 398:fltk-1.3.4-1/png/png.c ****    PNG_DEPRECATED)
 399:fltk-1.3.4-1/png/png.c **** {
 400:fltk-1.3.4-1/png/png.c ****    png_inforp info_ptr = *ptr_ptr;
 401:fltk-1.3.4-1/png/png.c **** 
 402:fltk-1.3.4-1/png/png.c ****    png_debug(1, "in png_info_init_3");
 403:fltk-1.3.4-1/png/png.c **** 
 404:fltk-1.3.4-1/png/png.c ****    if (info_ptr == NULL)
 405:fltk-1.3.4-1/png/png.c ****       return;
 406:fltk-1.3.4-1/png/png.c **** 
 407:fltk-1.3.4-1/png/png.c ****    if ((sizeof (png_info)) > png_info_struct_size)
 408:fltk-1.3.4-1/png/png.c ****    {
 409:fltk-1.3.4-1/png/png.c ****       *ptr_ptr = NULL;
 410:fltk-1.3.4-1/png/png.c ****       /* The following line is why this API should not be used: */
 411:fltk-1.3.4-1/png/png.c ****       free(info_ptr);
 412:fltk-1.3.4-1/png/png.c ****       info_ptr = png_voidcast(png_inforp, png_malloc_base(NULL,
 413:fltk-1.3.4-1/png/png.c ****          (sizeof *info_ptr)));
 414:fltk-1.3.4-1/png/png.c ****       *ptr_ptr = info_ptr;
 415:fltk-1.3.4-1/png/png.c ****    }
 416:fltk-1.3.4-1/png/png.c **** 
 417:fltk-1.3.4-1/png/png.c ****    /* Set everything to 0 */
 418:fltk-1.3.4-1/png/png.c ****    memset(info_ptr, 0, (sizeof *info_ptr));
 419:fltk-1.3.4-1/png/png.c **** }
 420:fltk-1.3.4-1/png/png.c **** 
 421:fltk-1.3.4-1/png/png.c **** /* The following API is not called internally */
 422:fltk-1.3.4-1/png/png.c **** void PNGAPI
 423:fltk-1.3.4-1/png/png.c **** png_data_freer(png_const_structrp png_ptr, png_inforp info_ptr,
 424:fltk-1.3.4-1/png/png.c ****    int freer, png_uint_32 mask)
 425:fltk-1.3.4-1/png/png.c **** {
 426:fltk-1.3.4-1/png/png.c ****    png_debug(1, "in png_data_freer");
 427:fltk-1.3.4-1/png/png.c **** 
 428:fltk-1.3.4-1/png/png.c ****    if (png_ptr == NULL || info_ptr == NULL)
 429:fltk-1.3.4-1/png/png.c ****       return;
 430:fltk-1.3.4-1/png/png.c **** 
 431:fltk-1.3.4-1/png/png.c ****    if (freer == PNG_DESTROY_WILL_FREE_DATA)
 432:fltk-1.3.4-1/png/png.c ****       info_ptr->free_me |= mask;
 433:fltk-1.3.4-1/png/png.c **** 
 434:fltk-1.3.4-1/png/png.c ****    else if (freer == PNG_USER_WILL_FREE_DATA)
 435:fltk-1.3.4-1/png/png.c ****       info_ptr->free_me &= ~mask;
 436:fltk-1.3.4-1/png/png.c **** 
 437:fltk-1.3.4-1/png/png.c ****    else
 438:fltk-1.3.4-1/png/png.c ****       png_error(png_ptr, "Unknown freer parameter in png_data_freer");
 439:fltk-1.3.4-1/png/png.c **** }
 440:fltk-1.3.4-1/png/png.c **** 
 441:fltk-1.3.4-1/png/png.c **** void PNGAPI
 442:fltk-1.3.4-1/png/png.c **** png_free_data(png_const_structrp png_ptr, png_inforp info_ptr, png_uint_32 mask,
 443:fltk-1.3.4-1/png/png.c ****    int num)
 444:fltk-1.3.4-1/png/png.c **** {
 445:fltk-1.3.4-1/png/png.c ****    png_debug(1, "in png_free_data");
 446:fltk-1.3.4-1/png/png.c **** 
 447:fltk-1.3.4-1/png/png.c ****    if (png_ptr == NULL || info_ptr == NULL)
 448:fltk-1.3.4-1/png/png.c ****       return;
 449:fltk-1.3.4-1/png/png.c **** 
 450:fltk-1.3.4-1/png/png.c **** #ifdef PNG_TEXT_SUPPORTED
 451:fltk-1.3.4-1/png/png.c ****    /* Free text item num or (if num == -1) all text items */
 452:fltk-1.3.4-1/png/png.c ****    if (info_ptr->text != 0 &&
 453:fltk-1.3.4-1/png/png.c ****        ((mask & PNG_FREE_TEXT) & info_ptr->free_me) != 0)
 454:fltk-1.3.4-1/png/png.c ****    {
 455:fltk-1.3.4-1/png/png.c ****       if (num != -1)
 456:fltk-1.3.4-1/png/png.c ****       {
 457:fltk-1.3.4-1/png/png.c ****          png_free(png_ptr, info_ptr->text[num].key);
 458:fltk-1.3.4-1/png/png.c ****          info_ptr->text[num].key = NULL;
 459:fltk-1.3.4-1/png/png.c ****       }
 460:fltk-1.3.4-1/png/png.c **** 
 461:fltk-1.3.4-1/png/png.c ****       else
 462:fltk-1.3.4-1/png/png.c ****       {
 463:fltk-1.3.4-1/png/png.c ****          int i;
 464:fltk-1.3.4-1/png/png.c **** 
 465:fltk-1.3.4-1/png/png.c ****          for (i = 0; i < info_ptr->num_text; i++)
 466:fltk-1.3.4-1/png/png.c ****             png_free(png_ptr, info_ptr->text[i].key);
 467:fltk-1.3.4-1/png/png.c **** 
 468:fltk-1.3.4-1/png/png.c ****          png_free(png_ptr, info_ptr->text);
 469:fltk-1.3.4-1/png/png.c ****          info_ptr->text = NULL;
 470:fltk-1.3.4-1/png/png.c ****          info_ptr->num_text = 0;
 471:fltk-1.3.4-1/png/png.c ****       }
 472:fltk-1.3.4-1/png/png.c ****    }
 473:fltk-1.3.4-1/png/png.c **** #endif
 474:fltk-1.3.4-1/png/png.c **** 
 475:fltk-1.3.4-1/png/png.c **** #ifdef PNG_tRNS_SUPPORTED
 476:fltk-1.3.4-1/png/png.c ****    /* Free any tRNS entry */
 477:fltk-1.3.4-1/png/png.c ****    if (((mask & PNG_FREE_TRNS) & info_ptr->free_me) != 0)
 478:fltk-1.3.4-1/png/png.c ****    {
 479:fltk-1.3.4-1/png/png.c ****       png_free(png_ptr, info_ptr->trans_alpha);
 480:fltk-1.3.4-1/png/png.c ****       info_ptr->trans_alpha = NULL;
 481:fltk-1.3.4-1/png/png.c ****       info_ptr->valid &= ~PNG_INFO_tRNS;
 482:fltk-1.3.4-1/png/png.c ****    }
 483:fltk-1.3.4-1/png/png.c **** #endif
 484:fltk-1.3.4-1/png/png.c **** 
 485:fltk-1.3.4-1/png/png.c **** #ifdef PNG_sCAL_SUPPORTED
 486:fltk-1.3.4-1/png/png.c ****    /* Free any sCAL entry */
 487:fltk-1.3.4-1/png/png.c ****    if (((mask & PNG_FREE_SCAL) & info_ptr->free_me) != 0)
 488:fltk-1.3.4-1/png/png.c ****    {
 489:fltk-1.3.4-1/png/png.c ****       png_free(png_ptr, info_ptr->scal_s_width);
 490:fltk-1.3.4-1/png/png.c ****       png_free(png_ptr, info_ptr->scal_s_height);
 491:fltk-1.3.4-1/png/png.c ****       info_ptr->scal_s_width = NULL;
 492:fltk-1.3.4-1/png/png.c ****       info_ptr->scal_s_height = NULL;
 493:fltk-1.3.4-1/png/png.c ****       info_ptr->valid &= ~PNG_INFO_sCAL;
 494:fltk-1.3.4-1/png/png.c ****    }
 495:fltk-1.3.4-1/png/png.c **** #endif
 496:fltk-1.3.4-1/png/png.c **** 
 497:fltk-1.3.4-1/png/png.c **** #ifdef PNG_pCAL_SUPPORTED
 498:fltk-1.3.4-1/png/png.c ****    /* Free any pCAL entry */
 499:fltk-1.3.4-1/png/png.c ****    if (((mask & PNG_FREE_PCAL) & info_ptr->free_me) != 0)
 500:fltk-1.3.4-1/png/png.c ****    {
 501:fltk-1.3.4-1/png/png.c ****       png_free(png_ptr, info_ptr->pcal_purpose);
 502:fltk-1.3.4-1/png/png.c ****       png_free(png_ptr, info_ptr->pcal_units);
 503:fltk-1.3.4-1/png/png.c ****       info_ptr->pcal_purpose = NULL;
 504:fltk-1.3.4-1/png/png.c ****       info_ptr->pcal_units = NULL;
 505:fltk-1.3.4-1/png/png.c **** 
 506:fltk-1.3.4-1/png/png.c ****       if (info_ptr->pcal_params != NULL)
 507:fltk-1.3.4-1/png/png.c ****          {
 508:fltk-1.3.4-1/png/png.c ****             int i;
 509:fltk-1.3.4-1/png/png.c **** 
 510:fltk-1.3.4-1/png/png.c ****             for (i = 0; i < info_ptr->pcal_nparams; i++)
 511:fltk-1.3.4-1/png/png.c ****                png_free(png_ptr, info_ptr->pcal_params[i]);
 512:fltk-1.3.4-1/png/png.c **** 
 513:fltk-1.3.4-1/png/png.c ****             png_free(png_ptr, info_ptr->pcal_params);
 514:fltk-1.3.4-1/png/png.c ****             info_ptr->pcal_params = NULL;
 515:fltk-1.3.4-1/png/png.c ****          }
 516:fltk-1.3.4-1/png/png.c ****       info_ptr->valid &= ~PNG_INFO_pCAL;
 517:fltk-1.3.4-1/png/png.c ****    }
 518:fltk-1.3.4-1/png/png.c **** #endif
 519:fltk-1.3.4-1/png/png.c **** 
 520:fltk-1.3.4-1/png/png.c **** #ifdef PNG_iCCP_SUPPORTED
 521:fltk-1.3.4-1/png/png.c ****    /* Free any profile entry */
 522:fltk-1.3.4-1/png/png.c ****    if (((mask & PNG_FREE_ICCP) & info_ptr->free_me) != 0)
 523:fltk-1.3.4-1/png/png.c ****    {
 524:fltk-1.3.4-1/png/png.c ****       png_free(png_ptr, info_ptr->iccp_name);
 525:fltk-1.3.4-1/png/png.c ****       png_free(png_ptr, info_ptr->iccp_profile);
 526:fltk-1.3.4-1/png/png.c ****       info_ptr->iccp_name = NULL;
 527:fltk-1.3.4-1/png/png.c ****       info_ptr->iccp_profile = NULL;
 528:fltk-1.3.4-1/png/png.c ****       info_ptr->valid &= ~PNG_INFO_iCCP;
 529:fltk-1.3.4-1/png/png.c ****    }
 530:fltk-1.3.4-1/png/png.c **** #endif
 531:fltk-1.3.4-1/png/png.c **** 
 532:fltk-1.3.4-1/png/png.c **** #ifdef PNG_sPLT_SUPPORTED
 533:fltk-1.3.4-1/png/png.c ****    /* Free a given sPLT entry, or (if num == -1) all sPLT entries */
 534:fltk-1.3.4-1/png/png.c ****    if (info_ptr->splt_palettes != 0 &&
 535:fltk-1.3.4-1/png/png.c ****        ((mask & PNG_FREE_SPLT) & info_ptr->free_me) != 0)
 536:fltk-1.3.4-1/png/png.c ****    {
 537:fltk-1.3.4-1/png/png.c ****       if (num != -1)
 538:fltk-1.3.4-1/png/png.c ****       {
 539:fltk-1.3.4-1/png/png.c ****          png_free(png_ptr, info_ptr->splt_palettes[num].name);
 540:fltk-1.3.4-1/png/png.c ****          png_free(png_ptr, info_ptr->splt_palettes[num].entries);
 541:fltk-1.3.4-1/png/png.c ****          info_ptr->splt_palettes[num].name = NULL;
 542:fltk-1.3.4-1/png/png.c ****          info_ptr->splt_palettes[num].entries = NULL;
 543:fltk-1.3.4-1/png/png.c ****       }
 544:fltk-1.3.4-1/png/png.c **** 
 545:fltk-1.3.4-1/png/png.c ****       else
 546:fltk-1.3.4-1/png/png.c ****       {
 547:fltk-1.3.4-1/png/png.c ****          if (info_ptr->splt_palettes_num != 0)
 548:fltk-1.3.4-1/png/png.c ****          {
 549:fltk-1.3.4-1/png/png.c ****             int i;
 550:fltk-1.3.4-1/png/png.c **** 
 551:fltk-1.3.4-1/png/png.c ****             for (i = 0; i < info_ptr->splt_palettes_num; i++)
 552:fltk-1.3.4-1/png/png.c ****             {
 553:fltk-1.3.4-1/png/png.c ****                png_free(png_ptr, info_ptr->splt_palettes[i].name);
 554:fltk-1.3.4-1/png/png.c ****                png_free(png_ptr, info_ptr->splt_palettes[i].entries);
 555:fltk-1.3.4-1/png/png.c ****             }
 556:fltk-1.3.4-1/png/png.c **** 
 557:fltk-1.3.4-1/png/png.c ****             png_free(png_ptr, info_ptr->splt_palettes);
 558:fltk-1.3.4-1/png/png.c ****             info_ptr->splt_palettes = NULL;
 559:fltk-1.3.4-1/png/png.c ****             info_ptr->splt_palettes_num = 0;
 560:fltk-1.3.4-1/png/png.c ****          }
 561:fltk-1.3.4-1/png/png.c ****          info_ptr->valid &= ~PNG_INFO_sPLT;
 562:fltk-1.3.4-1/png/png.c ****       }
 563:fltk-1.3.4-1/png/png.c ****    }
 564:fltk-1.3.4-1/png/png.c **** #endif
 565:fltk-1.3.4-1/png/png.c **** 
 566:fltk-1.3.4-1/png/png.c **** #ifdef PNG_STORE_UNKNOWN_CHUNKS_SUPPORTED
 567:fltk-1.3.4-1/png/png.c ****    if (info_ptr->unknown_chunks != 0 &&
 568:fltk-1.3.4-1/png/png.c ****        ((mask & PNG_FREE_UNKN) & info_ptr->free_me) != 0)
 569:fltk-1.3.4-1/png/png.c ****    {
 570:fltk-1.3.4-1/png/png.c ****       if (num != -1)
 571:fltk-1.3.4-1/png/png.c ****       {
 572:fltk-1.3.4-1/png/png.c ****           png_free(png_ptr, info_ptr->unknown_chunks[num].data);
 573:fltk-1.3.4-1/png/png.c ****           info_ptr->unknown_chunks[num].data = NULL;
 574:fltk-1.3.4-1/png/png.c ****       }
 575:fltk-1.3.4-1/png/png.c **** 
 576:fltk-1.3.4-1/png/png.c ****       else
 577:fltk-1.3.4-1/png/png.c ****       {
 578:fltk-1.3.4-1/png/png.c ****          int i;
 579:fltk-1.3.4-1/png/png.c **** 
 580:fltk-1.3.4-1/png/png.c ****          if (info_ptr->unknown_chunks_num != 0)
 581:fltk-1.3.4-1/png/png.c ****          {
 582:fltk-1.3.4-1/png/png.c ****             for (i = 0; i < info_ptr->unknown_chunks_num; i++)
 583:fltk-1.3.4-1/png/png.c ****                png_free(png_ptr, info_ptr->unknown_chunks[i].data);
 584:fltk-1.3.4-1/png/png.c **** 
 585:fltk-1.3.4-1/png/png.c ****             png_free(png_ptr, info_ptr->unknown_chunks);
 586:fltk-1.3.4-1/png/png.c ****             info_ptr->unknown_chunks = NULL;
 587:fltk-1.3.4-1/png/png.c ****             info_ptr->unknown_chunks_num = 0;
 588:fltk-1.3.4-1/png/png.c ****          }
 589:fltk-1.3.4-1/png/png.c ****       }
 590:fltk-1.3.4-1/png/png.c ****    }
 591:fltk-1.3.4-1/png/png.c **** #endif
 592:fltk-1.3.4-1/png/png.c **** 
 593:fltk-1.3.4-1/png/png.c **** #ifdef PNG_hIST_SUPPORTED
 594:fltk-1.3.4-1/png/png.c ****    /* Free any hIST entry */
 595:fltk-1.3.4-1/png/png.c ****    if (((mask & PNG_FREE_HIST) & info_ptr->free_me) != 0)
 596:fltk-1.3.4-1/png/png.c ****    {
 597:fltk-1.3.4-1/png/png.c ****       png_free(png_ptr, info_ptr->hist);
 598:fltk-1.3.4-1/png/png.c ****       info_ptr->hist = NULL;
 599:fltk-1.3.4-1/png/png.c ****       info_ptr->valid &= ~PNG_INFO_hIST;
 600:fltk-1.3.4-1/png/png.c ****    }
 601:fltk-1.3.4-1/png/png.c **** #endif
 602:fltk-1.3.4-1/png/png.c **** 
 603:fltk-1.3.4-1/png/png.c ****    /* Free any PLTE entry that was internally allocated */
 604:fltk-1.3.4-1/png/png.c ****    if (((mask & PNG_FREE_PLTE) & info_ptr->free_me) != 0)
 605:fltk-1.3.4-1/png/png.c ****    {
 606:fltk-1.3.4-1/png/png.c ****       png_free(png_ptr, info_ptr->palette);
 607:fltk-1.3.4-1/png/png.c ****       info_ptr->palette = NULL;
 608:fltk-1.3.4-1/png/png.c ****       info_ptr->valid &= ~PNG_INFO_PLTE;
 609:fltk-1.3.4-1/png/png.c ****       info_ptr->num_palette = 0;
 610:fltk-1.3.4-1/png/png.c ****    }
 611:fltk-1.3.4-1/png/png.c **** 
 612:fltk-1.3.4-1/png/png.c **** #ifdef PNG_INFO_IMAGE_SUPPORTED
 613:fltk-1.3.4-1/png/png.c ****    /* Free any image bits attached to the info structure */
 614:fltk-1.3.4-1/png/png.c ****    if (((mask & PNG_FREE_ROWS) & info_ptr->free_me) != 0)
 615:fltk-1.3.4-1/png/png.c ****    {
 616:fltk-1.3.4-1/png/png.c ****       if (info_ptr->row_pointers != 0)
 617:fltk-1.3.4-1/png/png.c ****       {
 618:fltk-1.3.4-1/png/png.c ****          png_uint_32 row;
 619:fltk-1.3.4-1/png/png.c ****          for (row = 0; row < info_ptr->height; row++)
 620:fltk-1.3.4-1/png/png.c ****             png_free(png_ptr, info_ptr->row_pointers[row]);
 621:fltk-1.3.4-1/png/png.c **** 
 622:fltk-1.3.4-1/png/png.c ****          png_free(png_ptr, info_ptr->row_pointers);
 623:fltk-1.3.4-1/png/png.c ****          info_ptr->row_pointers = NULL;
 624:fltk-1.3.4-1/png/png.c ****       }
 625:fltk-1.3.4-1/png/png.c ****       info_ptr->valid &= ~PNG_INFO_IDAT;
 626:fltk-1.3.4-1/png/png.c ****    }
 627:fltk-1.3.4-1/png/png.c **** #endif
 628:fltk-1.3.4-1/png/png.c **** 
 629:fltk-1.3.4-1/png/png.c ****    if (num != -1)
 630:fltk-1.3.4-1/png/png.c ****       mask &= ~PNG_FREE_MUL;
 631:fltk-1.3.4-1/png/png.c **** 
 632:fltk-1.3.4-1/png/png.c ****    info_ptr->free_me &= ~mask;
 633:fltk-1.3.4-1/png/png.c **** }
 634:fltk-1.3.4-1/png/png.c **** #endif /* READ || WRITE */
 635:fltk-1.3.4-1/png/png.c **** 
 636:fltk-1.3.4-1/png/png.c **** /* This function returns a pointer to the io_ptr associated with the user
 637:fltk-1.3.4-1/png/png.c ****  * functions.  The application should free any memory associated with this
 638:fltk-1.3.4-1/png/png.c ****  * pointer before png_write_destroy() or png_read_destroy() are called.
 639:fltk-1.3.4-1/png/png.c ****  */
 640:fltk-1.3.4-1/png/png.c **** png_voidp PNGAPI
 641:fltk-1.3.4-1/png/png.c **** png_get_io_ptr(png_const_structrp png_ptr)
 642:fltk-1.3.4-1/png/png.c **** {
 643:fltk-1.3.4-1/png/png.c ****    if (png_ptr == NULL)
 644:fltk-1.3.4-1/png/png.c ****       return (NULL);
 645:fltk-1.3.4-1/png/png.c **** 
 646:fltk-1.3.4-1/png/png.c ****    return (png_ptr->io_ptr);
 647:fltk-1.3.4-1/png/png.c **** }
 648:fltk-1.3.4-1/png/png.c **** 
 649:fltk-1.3.4-1/png/png.c **** #if defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED)
 650:fltk-1.3.4-1/png/png.c **** #  ifdef PNG_STDIO_SUPPORTED
 651:fltk-1.3.4-1/png/png.c **** /* Initialize the default input/output functions for the PNG file.  If you
 652:fltk-1.3.4-1/png/png.c ****  * use your own read or write routines, you can call either png_set_read_fn()
 653:fltk-1.3.4-1/png/png.c ****  * or png_set_write_fn() instead of png_init_io().  If you have defined
 654:fltk-1.3.4-1/png/png.c ****  * PNG_NO_STDIO or otherwise disabled PNG_STDIO_SUPPORTED, you must use a
 655:fltk-1.3.4-1/png/png.c ****  * function of your own because "FILE *" isn't necessarily available.
 656:fltk-1.3.4-1/png/png.c ****  */
 657:fltk-1.3.4-1/png/png.c **** void PNGAPI
 658:fltk-1.3.4-1/png/png.c **** png_init_io(png_structrp png_ptr, png_FILE_p fp)
 659:fltk-1.3.4-1/png/png.c **** {
 660:fltk-1.3.4-1/png/png.c ****    png_debug(1, "in png_init_io");
 661:fltk-1.3.4-1/png/png.c **** 
 662:fltk-1.3.4-1/png/png.c ****    if (png_ptr == NULL)
 663:fltk-1.3.4-1/png/png.c ****       return;
 664:fltk-1.3.4-1/png/png.c **** 
 665:fltk-1.3.4-1/png/png.c ****    png_ptr->io_ptr = (png_voidp)fp;
 666:fltk-1.3.4-1/png/png.c **** }
 667:fltk-1.3.4-1/png/png.c **** #  endif
 668:fltk-1.3.4-1/png/png.c **** 
 669:fltk-1.3.4-1/png/png.c **** #ifdef PNG_SAVE_INT_32_SUPPORTED
 670:fltk-1.3.4-1/png/png.c **** /* The png_save_int_32 function assumes integers are stored in two's
 671:fltk-1.3.4-1/png/png.c ****  * complement format.  If this isn't the case, then this routine needs to
 672:fltk-1.3.4-1/png/png.c ****  * be modified to write data in two's complement format.  Note that,
 673:fltk-1.3.4-1/png/png.c ****  * the following works correctly even if png_int_32 has more than 32 bits
 674:fltk-1.3.4-1/png/png.c ****  * (compare the more complex code required on read for sign extension.)
 675:fltk-1.3.4-1/png/png.c ****  */
 676:fltk-1.3.4-1/png/png.c **** void PNGAPI
 677:fltk-1.3.4-1/png/png.c **** png_save_int_32(png_bytep buf, png_int_32 i)
 678:fltk-1.3.4-1/png/png.c **** {
 679:fltk-1.3.4-1/png/png.c ****    buf[0] = (png_byte)((i >> 24) & 0xff);
 680:fltk-1.3.4-1/png/png.c ****    buf[1] = (png_byte)((i >> 16) & 0xff);
 681:fltk-1.3.4-1/png/png.c ****    buf[2] = (png_byte)((i >> 8) & 0xff);
 682:fltk-1.3.4-1/png/png.c ****    buf[3] = (png_byte)(i & 0xff);
 683:fltk-1.3.4-1/png/png.c **** }
 684:fltk-1.3.4-1/png/png.c **** #endif
 685:fltk-1.3.4-1/png/png.c **** 
 686:fltk-1.3.4-1/png/png.c **** #  ifdef PNG_TIME_RFC1123_SUPPORTED
 687:fltk-1.3.4-1/png/png.c **** /* Convert the supplied time into an RFC 1123 string suitable for use in
 688:fltk-1.3.4-1/png/png.c ****  * a "Creation Time" or other text-based time string.
 689:fltk-1.3.4-1/png/png.c ****  */
 690:fltk-1.3.4-1/png/png.c **** int PNGAPI
 691:fltk-1.3.4-1/png/png.c **** png_convert_to_rfc1123_buffer(char out[29], png_const_timep ptime)
 692:fltk-1.3.4-1/png/png.c **** {
 693:fltk-1.3.4-1/png/png.c ****    static PNG_CONST char short_months[12][4] =
 694:fltk-1.3.4-1/png/png.c ****         {"Jan", "Feb", "Mar", "Apr", "May", "Jun",
 695:fltk-1.3.4-1/png/png.c ****          "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
 696:fltk-1.3.4-1/png/png.c **** 
 697:fltk-1.3.4-1/png/png.c ****    if (out == NULL)
 698:fltk-1.3.4-1/png/png.c ****       return 0;
 699:fltk-1.3.4-1/png/png.c **** 
 700:fltk-1.3.4-1/png/png.c ****    if (ptime->year > 9999 /* RFC1123 limitation */ ||
 701:fltk-1.3.4-1/png/png.c ****        ptime->month == 0    ||  ptime->month > 12  ||
 702:fltk-1.3.4-1/png/png.c ****        ptime->day   == 0    ||  ptime->day   > 31  ||
 703:fltk-1.3.4-1/png/png.c ****        ptime->hour  > 23    ||  ptime->minute > 59 ||
 704:fltk-1.3.4-1/png/png.c ****        ptime->second > 60)
 705:fltk-1.3.4-1/png/png.c ****       return 0;
 706:fltk-1.3.4-1/png/png.c **** 
 707:fltk-1.3.4-1/png/png.c ****    {
 708:fltk-1.3.4-1/png/png.c ****       size_t pos = 0;
 709:fltk-1.3.4-1/png/png.c ****       char number_buf[5]; /* enough for a four-digit year */
 710:fltk-1.3.4-1/png/png.c **** 
 711:fltk-1.3.4-1/png/png.c **** #     define APPEND_STRING(string) pos = png_safecat(out, 29, pos, (string))
 712:fltk-1.3.4-1/png/png.c **** #     define APPEND_NUMBER(format, value)\
 713:fltk-1.3.4-1/png/png.c ****          APPEND_STRING(PNG_FORMAT_NUMBER(number_buf, format, (value)))
 714:fltk-1.3.4-1/png/png.c **** #     define APPEND(ch) if (pos < 28) out[pos++] = (ch)
 715:fltk-1.3.4-1/png/png.c **** 
 716:fltk-1.3.4-1/png/png.c ****       APPEND_NUMBER(PNG_NUMBER_FORMAT_u, (unsigned)ptime->day);
 717:fltk-1.3.4-1/png/png.c ****       APPEND(' ');
 718:fltk-1.3.4-1/png/png.c ****       APPEND_STRING(short_months[(ptime->month - 1)]);
 719:fltk-1.3.4-1/png/png.c ****       APPEND(' ');
 720:fltk-1.3.4-1/png/png.c ****       APPEND_NUMBER(PNG_NUMBER_FORMAT_u, ptime->year);
 721:fltk-1.3.4-1/png/png.c ****       APPEND(' ');
 722:fltk-1.3.4-1/png/png.c ****       APPEND_NUMBER(PNG_NUMBER_FORMAT_02u, (unsigned)ptime->hour);
 723:fltk-1.3.4-1/png/png.c ****       APPEND(':');
 724:fltk-1.3.4-1/png/png.c ****       APPEND_NUMBER(PNG_NUMBER_FORMAT_02u, (unsigned)ptime->minute);
 725:fltk-1.3.4-1/png/png.c ****       APPEND(':');
 726:fltk-1.3.4-1/png/png.c ****       APPEND_NUMBER(PNG_NUMBER_FORMAT_02u, (unsigned)ptime->second);
 727:fltk-1.3.4-1/png/png.c ****       APPEND_STRING(" +0000"); /* This reliably terminates the buffer */
 728:fltk-1.3.4-1/png/png.c **** 
 729:fltk-1.3.4-1/png/png.c **** #     undef APPEND
 730:fltk-1.3.4-1/png/png.c **** #     undef APPEND_NUMBER
 731:fltk-1.3.4-1/png/png.c **** #     undef APPEND_STRING
 732:fltk-1.3.4-1/png/png.c ****    }
 733:fltk-1.3.4-1/png/png.c **** 
 734:fltk-1.3.4-1/png/png.c ****    return 1;
 735:fltk-1.3.4-1/png/png.c **** }
 736:fltk-1.3.4-1/png/png.c **** 
 737:fltk-1.3.4-1/png/png.c **** #     if PNG_LIBPNG_VER < 10700
 738:fltk-1.3.4-1/png/png.c **** /* To do: remove the following from libpng-1.7 */
 739:fltk-1.3.4-1/png/png.c **** /* Original API that uses a private buffer in png_struct.
 740:fltk-1.3.4-1/png/png.c ****  * Deprecated because it causes png_struct to carry a spurious temporary
 741:fltk-1.3.4-1/png/png.c ****  * buffer (png_struct::time_buffer), better to have the caller pass this in.
 742:fltk-1.3.4-1/png/png.c ****  */
 743:fltk-1.3.4-1/png/png.c **** png_const_charp PNGAPI
 744:fltk-1.3.4-1/png/png.c **** png_convert_to_rfc1123(png_structrp png_ptr, png_const_timep ptime)
 745:fltk-1.3.4-1/png/png.c **** {
 746:fltk-1.3.4-1/png/png.c ****    if (png_ptr != NULL)
 747:fltk-1.3.4-1/png/png.c ****    {
 748:fltk-1.3.4-1/png/png.c ****       /* The only failure above if png_ptr != NULL is from an invalid ptime */
 749:fltk-1.3.4-1/png/png.c ****       if (png_convert_to_rfc1123_buffer(png_ptr->time_buffer, ptime) == 0)
 750:fltk-1.3.4-1/png/png.c ****          png_warning(png_ptr, "Ignoring invalid time value");
 751:fltk-1.3.4-1/png/png.c **** 
 752:fltk-1.3.4-1/png/png.c ****       else
 753:fltk-1.3.4-1/png/png.c ****          return png_ptr->time_buffer;
 754:fltk-1.3.4-1/png/png.c ****    }
 755:fltk-1.3.4-1/png/png.c **** 
 756:fltk-1.3.4-1/png/png.c ****    return NULL;
 757:fltk-1.3.4-1/png/png.c **** }
 758:fltk-1.3.4-1/png/png.c **** #     endif
 759:fltk-1.3.4-1/png/png.c **** #  endif /* TIME_RFC1123 */
 760:fltk-1.3.4-1/png/png.c **** 
 761:fltk-1.3.4-1/png/png.c **** #endif /* READ || WRITE */
 762:fltk-1.3.4-1/png/png.c **** 
 763:fltk-1.3.4-1/png/png.c **** png_const_charp PNGAPI
 764:fltk-1.3.4-1/png/png.c **** png_get_copyright(png_const_structrp png_ptr)
 765:fltk-1.3.4-1/png/png.c **** {
 766:fltk-1.3.4-1/png/png.c ****    PNG_UNUSED(png_ptr)  /* Silence compiler warning about unused png_ptr */
 767:fltk-1.3.4-1/png/png.c **** #ifdef PNG_STRING_COPYRIGHT
 768:fltk-1.3.4-1/png/png.c ****    return PNG_STRING_COPYRIGHT
 769:fltk-1.3.4-1/png/png.c **** #else
 770:fltk-1.3.4-1/png/png.c **** #  ifdef __STDC__
 771:fltk-1.3.4-1/png/png.c ****    return PNG_STRING_NEWLINE \
 772:fltk-1.3.4-1/png/png.c ****      "libpng version 1.6.16 - December 22, 2014" PNG_STRING_NEWLINE \
 773:fltk-1.3.4-1/png/png.c ****      "Copyright (c) 1998-2014 Glenn Randers-Pehrson" PNG_STRING_NEWLINE \
 774:fltk-1.3.4-1/png/png.c ****      "Copyright (c) 1996-1997 Andreas Dilger" PNG_STRING_NEWLINE \
 775:fltk-1.3.4-1/png/png.c ****      "Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc." \
 776:fltk-1.3.4-1/png/png.c ****      PNG_STRING_NEWLINE;
 777:fltk-1.3.4-1/png/png.c **** #  else
 778:fltk-1.3.4-1/png/png.c ****       return "libpng version 1.6.16 - December 22, 2014\
 779:fltk-1.3.4-1/png/png.c ****       Copyright (c) 1998-2014 Glenn Randers-Pehrson\
 780:fltk-1.3.4-1/png/png.c ****       Copyright (c) 1996-1997 Andreas Dilger\
 781:fltk-1.3.4-1/png/png.c ****       Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.";
 782:fltk-1.3.4-1/png/png.c **** #  endif
 783:fltk-1.3.4-1/png/png.c **** #endif
 784:fltk-1.3.4-1/png/png.c **** }
 785:fltk-1.3.4-1/png/png.c **** 
 786:fltk-1.3.4-1/png/png.c **** /* The following return the library version as a short string in the
 787:fltk-1.3.4-1/png/png.c ****  * format 1.0.0 through 99.99.99zz.  To get the version of *.h files
 788:fltk-1.3.4-1/png/png.c ****  * used with your application, print out PNG_LIBPNG_VER_STRING, which
 789:fltk-1.3.4-1/png/png.c ****  * is defined in png.h.
 790:fltk-1.3.4-1/png/png.c ****  * Note: now there is no difference between png_get_libpng_ver() and
 791:fltk-1.3.4-1/png/png.c ****  * png_get_header_ver().  Due to the version_nn_nn_nn typedef guard,
 792:fltk-1.3.4-1/png/png.c ****  * it is guaranteed that png.c uses the correct version of png.h.
 793:fltk-1.3.4-1/png/png.c ****  */
 794:fltk-1.3.4-1/png/png.c **** png_const_charp PNGAPI
 795:fltk-1.3.4-1/png/png.c **** png_get_libpng_ver(png_const_structrp png_ptr)
 796:fltk-1.3.4-1/png/png.c **** {
 797:fltk-1.3.4-1/png/png.c ****    /* Version of *.c files used when building libpng */
 798:fltk-1.3.4-1/png/png.c ****    return png_get_header_ver(png_ptr);
 799:fltk-1.3.4-1/png/png.c **** }
 800:fltk-1.3.4-1/png/png.c **** 
 801:fltk-1.3.4-1/png/png.c **** png_const_charp PNGAPI
 802:fltk-1.3.4-1/png/png.c **** png_get_header_ver(png_const_structrp png_ptr)
 803:fltk-1.3.4-1/png/png.c **** {
 804:fltk-1.3.4-1/png/png.c ****    /* Version of *.h files used when building libpng */
 805:fltk-1.3.4-1/png/png.c ****    PNG_UNUSED(png_ptr)  /* Silence compiler warning about unused png_ptr */
 806:fltk-1.3.4-1/png/png.c ****    return PNG_LIBPNG_VER_STRING;
 807:fltk-1.3.4-1/png/png.c **** }
 808:fltk-1.3.4-1/png/png.c **** 
 809:fltk-1.3.4-1/png/png.c **** png_const_charp PNGAPI
 810:fltk-1.3.4-1/png/png.c **** png_get_header_version(png_const_structrp png_ptr)
 811:fltk-1.3.4-1/png/png.c **** {
 812:fltk-1.3.4-1/png/png.c ****    /* Returns longer string containing both version and date */
 813:fltk-1.3.4-1/png/png.c ****    PNG_UNUSED(png_ptr)  /* Silence compiler warning about unused png_ptr */
 814:fltk-1.3.4-1/png/png.c **** #ifdef __STDC__
 815:fltk-1.3.4-1/png/png.c ****    return PNG_HEADER_VERSION_STRING
 816:fltk-1.3.4-1/png/png.c **** #  ifndef PNG_READ_SUPPORTED
 817:fltk-1.3.4-1/png/png.c ****    "     (NO READ SUPPORT)"
 818:fltk-1.3.4-1/png/png.c **** #  endif
 819:fltk-1.3.4-1/png/png.c ****    PNG_STRING_NEWLINE;
 820:fltk-1.3.4-1/png/png.c **** #else
 821:fltk-1.3.4-1/png/png.c ****    return PNG_HEADER_VERSION_STRING;
 822:fltk-1.3.4-1/png/png.c **** #endif
 823:fltk-1.3.4-1/png/png.c **** }
 824:fltk-1.3.4-1/png/png.c **** 
 825:fltk-1.3.4-1/png/png.c **** #ifdef PNG_BUILD_GRAYSCALE_PALETTE_SUPPORTED
 826:fltk-1.3.4-1/png/png.c **** /* NOTE: this routine is not used internally! */
 827:fltk-1.3.4-1/png/png.c **** /* Build a grayscale palette.  Palette is assumed to be 1 << bit_depth
 828:fltk-1.3.4-1/png/png.c ****  * large of png_color.  This lets grayscale images be treated as
 829:fltk-1.3.4-1/png/png.c ****  * paletted.  Most useful for gamma correction and simplification
 830:fltk-1.3.4-1/png/png.c ****  * of code.  This API is not used internally.
 831:fltk-1.3.4-1/png/png.c ****  */
 832:fltk-1.3.4-1/png/png.c **** void PNGAPI
 833:fltk-1.3.4-1/png/png.c **** png_build_grayscale_palette(int bit_depth, png_colorp palette)
 834:fltk-1.3.4-1/png/png.c **** {
 835:fltk-1.3.4-1/png/png.c ****    int num_palette;
 836:fltk-1.3.4-1/png/png.c ****    int color_inc;
 837:fltk-1.3.4-1/png/png.c ****    int i;
 838:fltk-1.3.4-1/png/png.c ****    int v;
 839:fltk-1.3.4-1/png/png.c **** 
 840:fltk-1.3.4-1/png/png.c ****    png_debug(1, "in png_do_build_grayscale_palette");
 841:fltk-1.3.4-1/png/png.c **** 
 842:fltk-1.3.4-1/png/png.c ****    if (palette == NULL)
 843:fltk-1.3.4-1/png/png.c ****       return;
 844:fltk-1.3.4-1/png/png.c **** 
 845:fltk-1.3.4-1/png/png.c ****    switch (bit_depth)
 846:fltk-1.3.4-1/png/png.c ****    {
 847:fltk-1.3.4-1/png/png.c ****       case 1:
 848:fltk-1.3.4-1/png/png.c ****          num_palette = 2;
 849:fltk-1.3.4-1/png/png.c ****          color_inc = 0xff;
 850:fltk-1.3.4-1/png/png.c ****          break;
 851:fltk-1.3.4-1/png/png.c **** 
 852:fltk-1.3.4-1/png/png.c ****       case 2:
 853:fltk-1.3.4-1/png/png.c ****          num_palette = 4;
 854:fltk-1.3.4-1/png/png.c ****          color_inc = 0x55;
 855:fltk-1.3.4-1/png/png.c ****          break;
 856:fltk-1.3.4-1/png/png.c **** 
 857:fltk-1.3.4-1/png/png.c ****       case 4:
 858:fltk-1.3.4-1/png/png.c ****          num_palette = 16;
 859:fltk-1.3.4-1/png/png.c ****          color_inc = 0x11;
 860:fltk-1.3.4-1/png/png.c ****          break;
 861:fltk-1.3.4-1/png/png.c **** 
 862:fltk-1.3.4-1/png/png.c ****       case 8:
 863:fltk-1.3.4-1/png/png.c ****          num_palette = 256;
 864:fltk-1.3.4-1/png/png.c ****          color_inc = 1;
 865:fltk-1.3.4-1/png/png.c ****          break;
 866:fltk-1.3.4-1/png/png.c **** 
 867:fltk-1.3.4-1/png/png.c ****       default:
 868:fltk-1.3.4-1/png/png.c ****          num_palette = 0;
 869:fltk-1.3.4-1/png/png.c ****          color_inc = 0;
 870:fltk-1.3.4-1/png/png.c ****          break;
 871:fltk-1.3.4-1/png/png.c ****    }
 872:fltk-1.3.4-1/png/png.c **** 
 873:fltk-1.3.4-1/png/png.c ****    for (i = 0, v = 0; i < num_palette; i++, v += color_inc)
 874:fltk-1.3.4-1/png/png.c ****    {
 875:fltk-1.3.4-1/png/png.c ****       palette[i].red = (png_byte)v;
 876:fltk-1.3.4-1/png/png.c ****       palette[i].green = (png_byte)v;
 877:fltk-1.3.4-1/png/png.c ****       palette[i].blue = (png_byte)v;
 878:fltk-1.3.4-1/png/png.c ****    }
 879:fltk-1.3.4-1/png/png.c **** }
 880:fltk-1.3.4-1/png/png.c **** #endif
 881:fltk-1.3.4-1/png/png.c **** 
 882:fltk-1.3.4-1/png/png.c **** #ifdef PNG_SET_UNKNOWN_CHUNKS_SUPPORTED
 883:fltk-1.3.4-1/png/png.c **** int PNGAPI
 884:fltk-1.3.4-1/png/png.c **** png_handle_as_unknown(png_const_structrp png_ptr, png_const_bytep chunk_name)
 885:fltk-1.3.4-1/png/png.c **** {
 886:fltk-1.3.4-1/png/png.c ****    /* Check chunk_name and return "keep" value if it's on the list, else 0 */
 887:fltk-1.3.4-1/png/png.c ****    png_const_bytep p, p_end;
 888:fltk-1.3.4-1/png/png.c **** 
 889:fltk-1.3.4-1/png/png.c ****    if (png_ptr == NULL || chunk_name == NULL || png_ptr->num_chunk_list == 0)
 890:fltk-1.3.4-1/png/png.c ****       return PNG_HANDLE_CHUNK_AS_DEFAULT;
 891:fltk-1.3.4-1/png/png.c **** 
 892:fltk-1.3.4-1/png/png.c ****    p_end = png_ptr->chunk_list;
 893:fltk-1.3.4-1/png/png.c ****    p = p_end + png_ptr->num_chunk_list*5; /* beyond end */
 894:fltk-1.3.4-1/png/png.c **** 
 895:fltk-1.3.4-1/png/png.c ****    /* The code is the fifth byte after each four byte string.  Historically this
 896:fltk-1.3.4-1/png/png.c ****     * code was always searched from the end of the list, this is no longer
 897:fltk-1.3.4-1/png/png.c ****     * necessary because the 'set' routine handles duplicate entries correcty.
 898:fltk-1.3.4-1/png/png.c ****     */
 899:fltk-1.3.4-1/png/png.c ****    do /* num_chunk_list > 0, so at least one */
 900:fltk-1.3.4-1/png/png.c ****    {
 901:fltk-1.3.4-1/png/png.c ****       p -= 5;
 902:fltk-1.3.4-1/png/png.c **** 
 903:fltk-1.3.4-1/png/png.c ****       if (memcmp(chunk_name, p, 4) == 0)
 904:fltk-1.3.4-1/png/png.c ****          return p[4];
 905:fltk-1.3.4-1/png/png.c ****    }
 906:fltk-1.3.4-1/png/png.c ****    while (p > p_end);
 907:fltk-1.3.4-1/png/png.c **** 
 908:fltk-1.3.4-1/png/png.c ****    /* This means that known chunks should be processed and unknown chunks should
 909:fltk-1.3.4-1/png/png.c ****     * be handled according to the value of png_ptr->unknown_default; this can be
 910:fltk-1.3.4-1/png/png.c ****     * confusing because, as a result, there are two levels of defaulting for
 911:fltk-1.3.4-1/png/png.c ****     * unknown chunks.
 912:fltk-1.3.4-1/png/png.c ****     */
 913:fltk-1.3.4-1/png/png.c ****    return PNG_HANDLE_CHUNK_AS_DEFAULT;
 914:fltk-1.3.4-1/png/png.c **** }
 915:fltk-1.3.4-1/png/png.c **** 
 916:fltk-1.3.4-1/png/png.c **** #if defined(PNG_READ_UNKNOWN_CHUNKS_SUPPORTED) ||\
 917:fltk-1.3.4-1/png/png.c ****    defined(PNG_HANDLE_AS_UNKNOWN_SUPPORTED)
 918:fltk-1.3.4-1/png/png.c **** int /* PRIVATE */
 919:fltk-1.3.4-1/png/png.c **** png_chunk_unknown_handling(png_const_structrp png_ptr, png_uint_32 chunk_name)
 920:fltk-1.3.4-1/png/png.c **** {
 921:fltk-1.3.4-1/png/png.c ****    png_byte chunk_string[5];
 922:fltk-1.3.4-1/png/png.c **** 
 923:fltk-1.3.4-1/png/png.c ****    PNG_CSTRING_FROM_CHUNK(chunk_string, chunk_name);
 924:fltk-1.3.4-1/png/png.c ****    return png_handle_as_unknown(png_ptr, chunk_string);
 925:fltk-1.3.4-1/png/png.c **** }
 926:fltk-1.3.4-1/png/png.c **** #endif /* READ_UNKNOWN_CHUNKS || HANDLE_AS_UNKNOWN */
 927:fltk-1.3.4-1/png/png.c **** #endif /* SET_UNKNOWN_CHUNKS */
 928:fltk-1.3.4-1/png/png.c **** 
 929:fltk-1.3.4-1/png/png.c **** #ifdef PNG_READ_SUPPORTED
 930:fltk-1.3.4-1/png/png.c **** /* This function, added to libpng-1.0.6g, is untested. */
 931:fltk-1.3.4-1/png/png.c **** int PNGAPI
 932:fltk-1.3.4-1/png/png.c **** png_reset_zstream(png_structrp png_ptr)
 933:fltk-1.3.4-1/png/png.c **** {
 934:fltk-1.3.4-1/png/png.c ****    if (png_ptr == NULL)
 935:fltk-1.3.4-1/png/png.c ****       return Z_STREAM_ERROR;
 936:fltk-1.3.4-1/png/png.c **** 
 937:fltk-1.3.4-1/png/png.c ****    /* WARNING: this resets the window bits to the maximum! */
 938:fltk-1.3.4-1/png/png.c ****    return (inflateReset(&png_ptr->zstream));
 939:fltk-1.3.4-1/png/png.c **** }
 940:fltk-1.3.4-1/png/png.c **** #endif /* READ */
 941:fltk-1.3.4-1/png/png.c **** 
 942:fltk-1.3.4-1/png/png.c **** /* This function was added to libpng-1.0.7 */
 943:fltk-1.3.4-1/png/png.c **** png_uint_32 PNGAPI
 944:fltk-1.3.4-1/png/png.c **** png_access_version_number(void)
 945:fltk-1.3.4-1/png/png.c **** {
 946:fltk-1.3.4-1/png/png.c ****    /* Version of *.c files used when building libpng */
 947:fltk-1.3.4-1/png/png.c ****    return((png_uint_32)PNG_LIBPNG_VER);
 948:fltk-1.3.4-1/png/png.c **** }
 949:fltk-1.3.4-1/png/png.c **** 
 950:fltk-1.3.4-1/png/png.c **** 
 951:fltk-1.3.4-1/png/png.c **** 
 952:fltk-1.3.4-1/png/png.c **** #if defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED)
 953:fltk-1.3.4-1/png/png.c **** /* Ensure that png_ptr->zstream.msg holds some appropriate error message string.
 954:fltk-1.3.4-1/png/png.c ****  * If it doesn't 'ret' is used to set it to something appropriate, even in cases
 955:fltk-1.3.4-1/png/png.c ****  * like Z_OK or Z_STREAM_END where the error code is apparently a success code.
 956:fltk-1.3.4-1/png/png.c ****  */
 957:fltk-1.3.4-1/png/png.c **** void /* PRIVATE */
 958:fltk-1.3.4-1/png/png.c **** png_zstream_error(png_structrp png_ptr, int ret)
 959:fltk-1.3.4-1/png/png.c **** {
 960:fltk-1.3.4-1/png/png.c ****    /* Translate 'ret' into an appropriate error string, priority is given to the
 961:fltk-1.3.4-1/png/png.c ****     * one in zstream if set.  This always returns a string, even in cases like
 962:fltk-1.3.4-1/png/png.c ****     * Z_OK or Z_STREAM_END where the error code is a success code.
 963:fltk-1.3.4-1/png/png.c ****     */
 964:fltk-1.3.4-1/png/png.c ****    if (png_ptr->zstream.msg == NULL) switch (ret)
 965:fltk-1.3.4-1/png/png.c ****    {
 966:fltk-1.3.4-1/png/png.c ****       default:
 967:fltk-1.3.4-1/png/png.c ****       case Z_OK:
 968:fltk-1.3.4-1/png/png.c ****          png_ptr->zstream.msg = PNGZ_MSG_CAST("unexpected zlib return code");
 969:fltk-1.3.4-1/png/png.c ****          break;
 970:fltk-1.3.4-1/png/png.c **** 
 971:fltk-1.3.4-1/png/png.c ****       case Z_STREAM_END:
 972:fltk-1.3.4-1/png/png.c ****          /* Normal exit */
 973:fltk-1.3.4-1/png/png.c ****          png_ptr->zstream.msg = PNGZ_MSG_CAST("unexpected end of LZ stream");
 974:fltk-1.3.4-1/png/png.c ****          break;
 975:fltk-1.3.4-1/png/png.c **** 
 976:fltk-1.3.4-1/png/png.c ****       case Z_NEED_DICT:
 977:fltk-1.3.4-1/png/png.c ****          /* This means the deflate stream did not have a dictionary; this
 978:fltk-1.3.4-1/png/png.c ****           * indicates a bogus PNG.
 979:fltk-1.3.4-1/png/png.c ****           */
 980:fltk-1.3.4-1/png/png.c ****          png_ptr->zstream.msg = PNGZ_MSG_CAST("missing LZ dictionary");
 981:fltk-1.3.4-1/png/png.c ****          break;
 982:fltk-1.3.4-1/png/png.c **** 
 983:fltk-1.3.4-1/png/png.c ****       case Z_ERRNO:
 984:fltk-1.3.4-1/png/png.c ****          /* gz APIs only: should not happen */
 985:fltk-1.3.4-1/png/png.c ****          png_ptr->zstream.msg = PNGZ_MSG_CAST("zlib IO error");
 986:fltk-1.3.4-1/png/png.c ****          break;
 987:fltk-1.3.4-1/png/png.c **** 
 988:fltk-1.3.4-1/png/png.c ****       case Z_STREAM_ERROR:
 989:fltk-1.3.4-1/png/png.c ****          /* internal libpng error */
 990:fltk-1.3.4-1/png/png.c ****          png_ptr->zstream.msg = PNGZ_MSG_CAST("bad parameters to zlib");
 991:fltk-1.3.4-1/png/png.c ****          break;
 992:fltk-1.3.4-1/png/png.c **** 
 993:fltk-1.3.4-1/png/png.c ****       case Z_DATA_ERROR:
 994:fltk-1.3.4-1/png/png.c ****          png_ptr->zstream.msg = PNGZ_MSG_CAST("damaged LZ stream");
 995:fltk-1.3.4-1/png/png.c ****          break;
 996:fltk-1.3.4-1/png/png.c **** 
 997:fltk-1.3.4-1/png/png.c ****       case Z_MEM_ERROR:
 998:fltk-1.3.4-1/png/png.c ****          png_ptr->zstream.msg = PNGZ_MSG_CAST("insufficient memory");
 999:fltk-1.3.4-1/png/png.c ****          break;
1000:fltk-1.3.4-1/png/png.c **** 
1001:fltk-1.3.4-1/png/png.c ****       case Z_BUF_ERROR:
1002:fltk-1.3.4-1/png/png.c ****          /* End of input or output; not a problem if the caller is doing
1003:fltk-1.3.4-1/png/png.c ****           * incremental read or write.
1004:fltk-1.3.4-1/png/png.c ****           */
1005:fltk-1.3.4-1/png/png.c ****          png_ptr->zstream.msg = PNGZ_MSG_CAST("truncated");
1006:fltk-1.3.4-1/png/png.c ****          break;
1007:fltk-1.3.4-1/png/png.c **** 
1008:fltk-1.3.4-1/png/png.c ****       case Z_VERSION_ERROR:
1009:fltk-1.3.4-1/png/png.c ****          png_ptr->zstream.msg = PNGZ_MSG_CAST("unsupported zlib version");
1010:fltk-1.3.4-1/png/png.c ****          break;
1011:fltk-1.3.4-1/png/png.c **** 
1012:fltk-1.3.4-1/png/png.c ****       case PNG_UNEXPECTED_ZLIB_RETURN:
1013:fltk-1.3.4-1/png/png.c ****          /* Compile errors here mean that zlib now uses the value co-opted in
1014:fltk-1.3.4-1/png/png.c ****           * pngpriv.h for PNG_UNEXPECTED_ZLIB_RETURN; update the switch above
1015:fltk-1.3.4-1/png/png.c ****           * and change pngpriv.h.  Note that this message is "... return",
1016:fltk-1.3.4-1/png/png.c ****           * whereas the default/Z_OK one is "... return code".
1017:fltk-1.3.4-1/png/png.c ****           */
1018:fltk-1.3.4-1/png/png.c ****          png_ptr->zstream.msg = PNGZ_MSG_CAST("unexpected zlib return");
1019:fltk-1.3.4-1/png/png.c ****          break;
1020:fltk-1.3.4-1/png/png.c ****    }
1021:fltk-1.3.4-1/png/png.c **** }
1022:fltk-1.3.4-1/png/png.c **** 
1023:fltk-1.3.4-1/png/png.c **** /* png_convert_size: a PNGAPI but no longer in png.h, so deleted
1024:fltk-1.3.4-1/png/png.c ****  * at libpng 1.5.5!
1025:fltk-1.3.4-1/png/png.c ****  */
1026:fltk-1.3.4-1/png/png.c **** 
1027:fltk-1.3.4-1/png/png.c **** /* Added at libpng version 1.2.34 and 1.4.0 (moved from pngset.c) */
1028:fltk-1.3.4-1/png/png.c **** #ifdef PNG_GAMMA_SUPPORTED /* always set if COLORSPACE */
1029:fltk-1.3.4-1/png/png.c **** static int
1030:fltk-1.3.4-1/png/png.c **** png_colorspace_check_gamma(png_const_structrp png_ptr,
1031:fltk-1.3.4-1/png/png.c ****    png_colorspacerp colorspace, png_fixed_point gAMA, int from)
1032:fltk-1.3.4-1/png/png.c ****    /* This is called to check a new gamma value against an existing one.  The
1033:fltk-1.3.4-1/png/png.c ****     * routine returns false if the new gamma value should not be written.
1034:fltk-1.3.4-1/png/png.c ****     *
1035:fltk-1.3.4-1/png/png.c ****     * 'from' says where the new gamma value comes from:
1036:fltk-1.3.4-1/png/png.c ****     *
1037:fltk-1.3.4-1/png/png.c ****     *    0: the new gamma value is the libpng estimate for an ICC profile
1038:fltk-1.3.4-1/png/png.c ****     *    1: the new gamma value comes from a gAMA chunk
1039:fltk-1.3.4-1/png/png.c ****     *    2: the new gamma value comes from an sRGB chunk
1040:fltk-1.3.4-1/png/png.c ****     */
1041:fltk-1.3.4-1/png/png.c **** {
1042:fltk-1.3.4-1/png/png.c ****    png_fixed_point gtest;
1043:fltk-1.3.4-1/png/png.c **** 
1044:fltk-1.3.4-1/png/png.c ****    if ((colorspace->flags & PNG_COLORSPACE_HAVE_GAMMA) != 0 &&
1045:fltk-1.3.4-1/png/png.c ****       (png_muldiv(&gtest, colorspace->gamma, PNG_FP_1, gAMA) == 0  ||
1046:fltk-1.3.4-1/png/png.c ****       png_gamma_significant(gtest) != 0))
1047:fltk-1.3.4-1/png/png.c ****    {
1048:fltk-1.3.4-1/png/png.c ****       /* Either this is an sRGB image, in which case the calculated gamma
1049:fltk-1.3.4-1/png/png.c ****        * approximation should match, or this is an image with a profile and the
1050:fltk-1.3.4-1/png/png.c ****        * value libpng calculates for the gamma of the profile does not match the
1051:fltk-1.3.4-1/png/png.c ****        * value recorded in the file.  The former, sRGB, case is an error, the
1052:fltk-1.3.4-1/png/png.c ****        * latter is just a warning.
1053:fltk-1.3.4-1/png/png.c ****        */
1054:fltk-1.3.4-1/png/png.c ****       if ((colorspace->flags & PNG_COLORSPACE_FROM_sRGB) != 0 || from == 2)
1055:fltk-1.3.4-1/png/png.c ****       {
1056:fltk-1.3.4-1/png/png.c ****          png_chunk_report(png_ptr, "gamma value does not match sRGB",
1057:fltk-1.3.4-1/png/png.c ****             PNG_CHUNK_ERROR);
1058:fltk-1.3.4-1/png/png.c ****          /* Do not overwrite an sRGB value */
1059:fltk-1.3.4-1/png/png.c ****          return from == 2;
1060:fltk-1.3.4-1/png/png.c ****       }
1061:fltk-1.3.4-1/png/png.c **** 
1062:fltk-1.3.4-1/png/png.c ****       else /* sRGB tag not involved */
1063:fltk-1.3.4-1/png/png.c ****       {
1064:fltk-1.3.4-1/png/png.c ****          png_chunk_report(png_ptr, "gamma value does not match libpng estimate",
1065:fltk-1.3.4-1/png/png.c ****             PNG_CHUNK_WARNING);
1066:fltk-1.3.4-1/png/png.c ****          return from == 1;
1067:fltk-1.3.4-1/png/png.c ****       }
1068:fltk-1.3.4-1/png/png.c ****    }
1069:fltk-1.3.4-1/png/png.c **** 
1070:fltk-1.3.4-1/png/png.c ****    return 1;
1071:fltk-1.3.4-1/png/png.c **** }
1072:fltk-1.3.4-1/png/png.c **** 
1073:fltk-1.3.4-1/png/png.c **** void /* PRIVATE */
1074:fltk-1.3.4-1/png/png.c **** png_colorspace_set_gamma(png_const_structrp png_ptr,
1075:fltk-1.3.4-1/png/png.c ****    png_colorspacerp colorspace, png_fixed_point gAMA)
1076:fltk-1.3.4-1/png/png.c **** {
1077:fltk-1.3.4-1/png/png.c ****    /* Changed in libpng-1.5.4 to limit the values to ensure overflow can't
1078:fltk-1.3.4-1/png/png.c ****     * occur.  Since the fixed point representation is asymetrical it is
1079:fltk-1.3.4-1/png/png.c ****     * possible for 1/gamma to overflow the limit of 21474 and this means the
1080:fltk-1.3.4-1/png/png.c ****     * gamma value must be at least 5/100000 and hence at most 20000.0.  For
1081:fltk-1.3.4-1/png/png.c ****     * safety the limits here are a little narrower.  The values are 0.00016 to
1082:fltk-1.3.4-1/png/png.c ****     * 6250.0, which are truly ridiculous gamma values (and will produce
1083:fltk-1.3.4-1/png/png.c ****     * displays that are all black or all white.)
1084:fltk-1.3.4-1/png/png.c ****     *
1085:fltk-1.3.4-1/png/png.c ****     * In 1.6.0 this test replaces the ones in pngrutil.c, in the gAMA chunk
1086:fltk-1.3.4-1/png/png.c ****     * handling code, which only required the value to be >0.
1087:fltk-1.3.4-1/png/png.c ****     */
1088:fltk-1.3.4-1/png/png.c ****    png_const_charp errmsg;
1089:fltk-1.3.4-1/png/png.c **** 
1090:fltk-1.3.4-1/png/png.c ****    if (gAMA < 16 || gAMA > 625000000)
1091:fltk-1.3.4-1/png/png.c ****       errmsg = "gamma value out of range";
1092:fltk-1.3.4-1/png/png.c **** 
1093:fltk-1.3.4-1/png/png.c **** #  ifdef PNG_READ_gAMA_SUPPORTED
1094:fltk-1.3.4-1/png/png.c ****       /* Allow the application to set the gamma value more than once */
1095:fltk-1.3.4-1/png/png.c ****       else if ((png_ptr->mode & PNG_IS_READ_STRUCT) != 0 &&
1096:fltk-1.3.4-1/png/png.c ****          (colorspace->flags & PNG_COLORSPACE_FROM_gAMA) != 0)
1097:fltk-1.3.4-1/png/png.c ****          errmsg = "duplicate";
1098:fltk-1.3.4-1/png/png.c **** #  endif
1099:fltk-1.3.4-1/png/png.c **** 
1100:fltk-1.3.4-1/png/png.c ****    /* Do nothing if the colorspace is already invalid */
1101:fltk-1.3.4-1/png/png.c ****    else if ((colorspace->flags & PNG_COLORSPACE_INVALID) != 0)
1102:fltk-1.3.4-1/png/png.c ****       return;
1103:fltk-1.3.4-1/png/png.c **** 
1104:fltk-1.3.4-1/png/png.c ****    else
1105:fltk-1.3.4-1/png/png.c ****    {
1106:fltk-1.3.4-1/png/png.c ****       if (png_colorspace_check_gamma(png_ptr, colorspace, gAMA,
1107:fltk-1.3.4-1/png/png.c ****           1/*from gAMA*/) != 0)
1108:fltk-1.3.4-1/png/png.c ****       {
1109:fltk-1.3.4-1/png/png.c ****          /* Store this gamma value. */
1110:fltk-1.3.4-1/png/png.c ****          colorspace->gamma = gAMA;
1111:fltk-1.3.4-1/png/png.c ****          colorspace->flags |=
1112:fltk-1.3.4-1/png/png.c ****             (PNG_COLORSPACE_HAVE_GAMMA | PNG_COLORSPACE_FROM_gAMA);
1113:fltk-1.3.4-1/png/png.c ****       }
1114:fltk-1.3.4-1/png/png.c **** 
1115:fltk-1.3.4-1/png/png.c ****       /* At present if the check_gamma test fails the gamma of the colorspace is
1116:fltk-1.3.4-1/png/png.c ****        * not updated however the colorspace is not invalidated.  This
1117:fltk-1.3.4-1/png/png.c ****        * corresponds to the case where the existing gamma comes from an sRGB
1118:fltk-1.3.4-1/png/png.c ****        * chunk or profile.  An error message has already been output.
1119:fltk-1.3.4-1/png/png.c ****        */
1120:fltk-1.3.4-1/png/png.c ****       return;
1121:fltk-1.3.4-1/png/png.c ****    }
1122:fltk-1.3.4-1/png/png.c **** 
1123:fltk-1.3.4-1/png/png.c ****    /* Error exit - errmsg has been set. */
1124:fltk-1.3.4-1/png/png.c ****    colorspace->flags |= PNG_COLORSPACE_INVALID;
1125:fltk-1.3.4-1/png/png.c ****    png_chunk_report(png_ptr, errmsg, PNG_CHUNK_WRITE_ERROR);
1126:fltk-1.3.4-1/png/png.c **** }
1127:fltk-1.3.4-1/png/png.c **** 
1128:fltk-1.3.4-1/png/png.c **** void /* PRIVATE */
1129:fltk-1.3.4-1/png/png.c **** png_colorspace_sync_info(png_const_structrp png_ptr, png_inforp info_ptr)
1130:fltk-1.3.4-1/png/png.c **** {
1131:fltk-1.3.4-1/png/png.c ****    if ((info_ptr->colorspace.flags & PNG_COLORSPACE_INVALID) != 0)
1132:fltk-1.3.4-1/png/png.c ****    {
1133:fltk-1.3.4-1/png/png.c ****       /* Everything is invalid */
1134:fltk-1.3.4-1/png/png.c ****       info_ptr->valid &= ~(PNG_INFO_gAMA|PNG_INFO_cHRM|PNG_INFO_sRGB|
1135:fltk-1.3.4-1/png/png.c ****          PNG_INFO_iCCP);
1136:fltk-1.3.4-1/png/png.c **** 
1137:fltk-1.3.4-1/png/png.c **** #     ifdef PNG_COLORSPACE_SUPPORTED
1138:fltk-1.3.4-1/png/png.c ****          /* Clean up the iCCP profile now if it won't be used. */
1139:fltk-1.3.4-1/png/png.c ****          png_free_data(png_ptr, info_ptr, PNG_FREE_ICCP, -1/*not used*/);
1140:fltk-1.3.4-1/png/png.c **** #     else
1141:fltk-1.3.4-1/png/png.c ****          PNG_UNUSED(png_ptr)
1142:fltk-1.3.4-1/png/png.c **** #     endif
1143:fltk-1.3.4-1/png/png.c ****    }
1144:fltk-1.3.4-1/png/png.c **** 
1145:fltk-1.3.4-1/png/png.c ****    else
1146:fltk-1.3.4-1/png/png.c ****    {
1147:fltk-1.3.4-1/png/png.c **** #     ifdef PNG_COLORSPACE_SUPPORTED
1148:fltk-1.3.4-1/png/png.c ****          /* Leave the INFO_iCCP flag set if the pngset.c code has already set
1149:fltk-1.3.4-1/png/png.c ****           * it; this allows a PNG to contain a profile which matches sRGB and
1150:fltk-1.3.4-1/png/png.c ****           * yet still have that profile retrievable by the application.
1151:fltk-1.3.4-1/png/png.c ****           */
1152:fltk-1.3.4-1/png/png.c ****          if ((info_ptr->colorspace.flags & PNG_COLORSPACE_MATCHES_sRGB) != 0)
1153:fltk-1.3.4-1/png/png.c ****             info_ptr->valid |= PNG_INFO_sRGB;
1154:fltk-1.3.4-1/png/png.c **** 
1155:fltk-1.3.4-1/png/png.c ****          else
1156:fltk-1.3.4-1/png/png.c ****             info_ptr->valid &= ~PNG_INFO_sRGB;
1157:fltk-1.3.4-1/png/png.c **** 
1158:fltk-1.3.4-1/png/png.c ****          if ((info_ptr->colorspace.flags & PNG_COLORSPACE_HAVE_ENDPOINTS) != 0)
1159:fltk-1.3.4-1/png/png.c ****             info_ptr->valid |= PNG_INFO_cHRM;
1160:fltk-1.3.4-1/png/png.c **** 
1161:fltk-1.3.4-1/png/png.c ****          else
1162:fltk-1.3.4-1/png/png.c ****             info_ptr->valid &= ~PNG_INFO_cHRM;
1163:fltk-1.3.4-1/png/png.c **** #     endif
1164:fltk-1.3.4-1/png/png.c **** 
1165:fltk-1.3.4-1/png/png.c ****       if ((info_ptr->colorspace.flags & PNG_COLORSPACE_HAVE_GAMMA) != 0)
1166:fltk-1.3.4-1/png/png.c ****          info_ptr->valid |= PNG_INFO_gAMA;
1167:fltk-1.3.4-1/png/png.c **** 
1168:fltk-1.3.4-1/png/png.c ****       else
1169:fltk-1.3.4-1/png/png.c ****          info_ptr->valid &= ~PNG_INFO_gAMA;
1170:fltk-1.3.4-1/png/png.c ****    }
1171:fltk-1.3.4-1/png/png.c **** }
1172:fltk-1.3.4-1/png/png.c **** 
1173:fltk-1.3.4-1/png/png.c **** #ifdef PNG_READ_SUPPORTED
1174:fltk-1.3.4-1/png/png.c **** void /* PRIVATE */
1175:fltk-1.3.4-1/png/png.c **** png_colorspace_sync(png_const_structrp png_ptr, png_inforp info_ptr)
1176:fltk-1.3.4-1/png/png.c **** {
1177:fltk-1.3.4-1/png/png.c ****    if (info_ptr == NULL) /* reduce code size; check here not in the caller */
1178:fltk-1.3.4-1/png/png.c ****       return;
1179:fltk-1.3.4-1/png/png.c **** 
1180:fltk-1.3.4-1/png/png.c ****    info_ptr->colorspace = png_ptr->colorspace;
1181:fltk-1.3.4-1/png/png.c ****    png_colorspace_sync_info(png_ptr, info_ptr);
1182:fltk-1.3.4-1/png/png.c **** }
1183:fltk-1.3.4-1/png/png.c **** #endif
1184:fltk-1.3.4-1/png/png.c **** #endif
1185:fltk-1.3.4-1/png/png.c **** 
1186:fltk-1.3.4-1/png/png.c **** #ifdef PNG_COLORSPACE_SUPPORTED
1187:fltk-1.3.4-1/png/png.c **** /* Added at libpng-1.5.5 to support read and write of true CIEXYZ values for
1188:fltk-1.3.4-1/png/png.c ****  * cHRM, as opposed to using chromaticities.  These internal APIs return
1189:fltk-1.3.4-1/png/png.c ****  * non-zero on a parameter error.  The X, Y and Z values are required to be
1190:fltk-1.3.4-1/png/png.c ****  * positive and less than 1.0.
1191:fltk-1.3.4-1/png/png.c ****  */
1192:fltk-1.3.4-1/png/png.c **** static int
1193:fltk-1.3.4-1/png/png.c **** png_xy_from_XYZ(png_xy *xy, const png_XYZ *XYZ)
1194:fltk-1.3.4-1/png/png.c **** {
1195:fltk-1.3.4-1/png/png.c ****    png_int_32 d, dwhite, whiteX, whiteY;
1196:fltk-1.3.4-1/png/png.c **** 
1197:fltk-1.3.4-1/png/png.c ****    d = XYZ->red_X + XYZ->red_Y + XYZ->red_Z;
1198:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&xy->redx, XYZ->red_X, PNG_FP_1, d) == 0)
1199:fltk-1.3.4-1/png/png.c ****       return 1;
1200:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&xy->redy, XYZ->red_Y, PNG_FP_1, d) == 0)
1201:fltk-1.3.4-1/png/png.c ****       return 1;
1202:fltk-1.3.4-1/png/png.c ****    dwhite = d;
1203:fltk-1.3.4-1/png/png.c ****    whiteX = XYZ->red_X;
1204:fltk-1.3.4-1/png/png.c ****    whiteY = XYZ->red_Y;
1205:fltk-1.3.4-1/png/png.c **** 
1206:fltk-1.3.4-1/png/png.c ****    d = XYZ->green_X + XYZ->green_Y + XYZ->green_Z;
1207:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&xy->greenx, XYZ->green_X, PNG_FP_1, d) == 0)
1208:fltk-1.3.4-1/png/png.c ****       return 1;
1209:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&xy->greeny, XYZ->green_Y, PNG_FP_1, d) == 0)
1210:fltk-1.3.4-1/png/png.c ****       return 1;
1211:fltk-1.3.4-1/png/png.c ****    dwhite += d;
1212:fltk-1.3.4-1/png/png.c ****    whiteX += XYZ->green_X;
1213:fltk-1.3.4-1/png/png.c ****    whiteY += XYZ->green_Y;
1214:fltk-1.3.4-1/png/png.c **** 
1215:fltk-1.3.4-1/png/png.c ****    d = XYZ->blue_X + XYZ->blue_Y + XYZ->blue_Z;
1216:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&xy->bluex, XYZ->blue_X, PNG_FP_1, d) == 0)
1217:fltk-1.3.4-1/png/png.c ****       return 1;
1218:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&xy->bluey, XYZ->blue_Y, PNG_FP_1, d) == 0)
1219:fltk-1.3.4-1/png/png.c ****       return 1;
1220:fltk-1.3.4-1/png/png.c ****    dwhite += d;
1221:fltk-1.3.4-1/png/png.c ****    whiteX += XYZ->blue_X;
1222:fltk-1.3.4-1/png/png.c ****    whiteY += XYZ->blue_Y;
1223:fltk-1.3.4-1/png/png.c **** 
1224:fltk-1.3.4-1/png/png.c ****    /* The reference white is simply the sum of the end-point (X,Y,Z) vectors,
1225:fltk-1.3.4-1/png/png.c ****     * thus:
1226:fltk-1.3.4-1/png/png.c ****     */
1227:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&xy->whitex, whiteX, PNG_FP_1, dwhite) == 0)
1228:fltk-1.3.4-1/png/png.c ****       return 1;
1229:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&xy->whitey, whiteY, PNG_FP_1, dwhite) == 0)
1230:fltk-1.3.4-1/png/png.c ****       return 1;
1231:fltk-1.3.4-1/png/png.c **** 
1232:fltk-1.3.4-1/png/png.c ****    return 0;
1233:fltk-1.3.4-1/png/png.c **** }
1234:fltk-1.3.4-1/png/png.c **** 
1235:fltk-1.3.4-1/png/png.c **** static int
1236:fltk-1.3.4-1/png/png.c **** png_XYZ_from_xy(png_XYZ *XYZ, const png_xy *xy)
1237:fltk-1.3.4-1/png/png.c **** {
1238:fltk-1.3.4-1/png/png.c ****    png_fixed_point red_inverse, green_inverse, blue_scale;
1239:fltk-1.3.4-1/png/png.c ****    png_fixed_point left, right, denominator;
1240:fltk-1.3.4-1/png/png.c **** 
1241:fltk-1.3.4-1/png/png.c ****    /* Check xy and, implicitly, z.  Note that wide gamut color spaces typically
1242:fltk-1.3.4-1/png/png.c ****     * have end points with 0 tristimulus values (these are impossible end
1243:fltk-1.3.4-1/png/png.c ****     * points, but they are used to cover the possible colors.)
1244:fltk-1.3.4-1/png/png.c ****     */
1245:fltk-1.3.4-1/png/png.c ****    if (xy->redx < 0 || xy->redx > PNG_FP_1) return 1;
1246:fltk-1.3.4-1/png/png.c ****    if (xy->redy < 0 || xy->redy > PNG_FP_1-xy->redx) return 1;
1247:fltk-1.3.4-1/png/png.c ****    if (xy->greenx < 0 || xy->greenx > PNG_FP_1) return 1;
1248:fltk-1.3.4-1/png/png.c ****    if (xy->greeny < 0 || xy->greeny > PNG_FP_1-xy->greenx) return 1;
1249:fltk-1.3.4-1/png/png.c ****    if (xy->bluex < 0 || xy->bluex > PNG_FP_1) return 1;
1250:fltk-1.3.4-1/png/png.c ****    if (xy->bluey < 0 || xy->bluey > PNG_FP_1-xy->bluex) return 1;
1251:fltk-1.3.4-1/png/png.c ****    if (xy->whitex < 0 || xy->whitex > PNG_FP_1) return 1;
1252:fltk-1.3.4-1/png/png.c ****    if (xy->whitey < 0 || xy->whitey > PNG_FP_1-xy->whitex) return 1;
1253:fltk-1.3.4-1/png/png.c **** 
1254:fltk-1.3.4-1/png/png.c ****    /* The reverse calculation is more difficult because the original tristimulus
1255:fltk-1.3.4-1/png/png.c ****     * value had 9 independent values (red,green,blue)x(X,Y,Z) however only 8
1256:fltk-1.3.4-1/png/png.c ****     * derived values were recorded in the cHRM chunk;
1257:fltk-1.3.4-1/png/png.c ****     * (red,green,blue,white)x(x,y).  This loses one degree of freedom and
1258:fltk-1.3.4-1/png/png.c ****     * therefore an arbitrary ninth value has to be introduced to undo the
1259:fltk-1.3.4-1/png/png.c ****     * original transformations.
1260:fltk-1.3.4-1/png/png.c ****     *
1261:fltk-1.3.4-1/png/png.c ****     * Think of the original end-points as points in (X,Y,Z) space.  The
1262:fltk-1.3.4-1/png/png.c ****     * chromaticity values (c) have the property:
1263:fltk-1.3.4-1/png/png.c ****     *
1264:fltk-1.3.4-1/png/png.c ****     *           C
1265:fltk-1.3.4-1/png/png.c ****     *   c = ---------
1266:fltk-1.3.4-1/png/png.c ****     *       X + Y + Z
1267:fltk-1.3.4-1/png/png.c ****     *
1268:fltk-1.3.4-1/png/png.c ****     * For each c (x,y,z) from the corresponding original C (X,Y,Z).  Thus the
1269:fltk-1.3.4-1/png/png.c ****     * three chromaticity values (x,y,z) for each end-point obey the
1270:fltk-1.3.4-1/png/png.c ****     * relationship:
1271:fltk-1.3.4-1/png/png.c ****     *
1272:fltk-1.3.4-1/png/png.c ****     *   x + y + z = 1
1273:fltk-1.3.4-1/png/png.c ****     *
1274:fltk-1.3.4-1/png/png.c ****     * This describes the plane in (X,Y,Z) space that intersects each axis at the
1275:fltk-1.3.4-1/png/png.c ****     * value 1.0; call this the chromaticity plane.  Thus the chromaticity
1276:fltk-1.3.4-1/png/png.c ****     * calculation has scaled each end-point so that it is on the x+y+z=1 plane
1277:fltk-1.3.4-1/png/png.c ****     * and chromaticity is the intersection of the vector from the origin to the
1278:fltk-1.3.4-1/png/png.c ****     * (X,Y,Z) value with the chromaticity plane.
1279:fltk-1.3.4-1/png/png.c ****     *
1280:fltk-1.3.4-1/png/png.c ****     * To fully invert the chromaticity calculation we would need the three
1281:fltk-1.3.4-1/png/png.c ****     * end-point scale factors, (red-scale, green-scale, blue-scale), but these
1282:fltk-1.3.4-1/png/png.c ****     * were not recorded.  Instead we calculated the reference white (X,Y,Z) and
1283:fltk-1.3.4-1/png/png.c ****     * recorded the chromaticity of this.  The reference white (X,Y,Z) would have
1284:fltk-1.3.4-1/png/png.c ****     * given all three of the scale factors since:
1285:fltk-1.3.4-1/png/png.c ****     *
1286:fltk-1.3.4-1/png/png.c ****     *    color-C = color-c * color-scale
1287:fltk-1.3.4-1/png/png.c ****     *    white-C = red-C + green-C + blue-C
1288:fltk-1.3.4-1/png/png.c ****     *            = red-c*red-scale + green-c*green-scale + blue-c*blue-scale
1289:fltk-1.3.4-1/png/png.c ****     *
1290:fltk-1.3.4-1/png/png.c ****     * But cHRM records only white-x and white-y, so we have lost the white scale
1291:fltk-1.3.4-1/png/png.c ****     * factor:
1292:fltk-1.3.4-1/png/png.c ****     *
1293:fltk-1.3.4-1/png/png.c ****     *    white-C = white-c*white-scale
1294:fltk-1.3.4-1/png/png.c ****     *
1295:fltk-1.3.4-1/png/png.c ****     * To handle this the inverse transformation makes an arbitrary assumption
1296:fltk-1.3.4-1/png/png.c ****     * about white-scale:
1297:fltk-1.3.4-1/png/png.c ****     *
1298:fltk-1.3.4-1/png/png.c ****     *    Assume: white-Y = 1.0
1299:fltk-1.3.4-1/png/png.c ****     *    Hence:  white-scale = 1/white-y
1300:fltk-1.3.4-1/png/png.c ****     *    Or:     red-Y + green-Y + blue-Y = 1.0
1301:fltk-1.3.4-1/png/png.c ****     *
1302:fltk-1.3.4-1/png/png.c ****     * Notice the last statement of the assumption gives an equation in three of
1303:fltk-1.3.4-1/png/png.c ****     * the nine values we want to calculate.  8 more equations come from the
1304:fltk-1.3.4-1/png/png.c ****     * above routine as summarised at the top above (the chromaticity
1305:fltk-1.3.4-1/png/png.c ****     * calculation):
1306:fltk-1.3.4-1/png/png.c ****     *
1307:fltk-1.3.4-1/png/png.c ****     *    Given: color-x = color-X / (color-X + color-Y + color-Z)
1308:fltk-1.3.4-1/png/png.c ****     *    Hence: (color-x - 1)*color-X + color.x*color-Y + color.x*color-Z = 0
1309:fltk-1.3.4-1/png/png.c ****     *
1310:fltk-1.3.4-1/png/png.c ****     * This is 9 simultaneous equations in the 9 variables "color-C" and can be
1311:fltk-1.3.4-1/png/png.c ****     * solved by Cramer's rule.  Cramer's rule requires calculating 10 9x9 matrix
1312:fltk-1.3.4-1/png/png.c ****     * determinants, however this is not as bad as it seems because only 28 of
1313:fltk-1.3.4-1/png/png.c ****     * the total of 90 terms in the various matrices are non-zero.  Nevertheless
1314:fltk-1.3.4-1/png/png.c ****     * Cramer's rule is notoriously numerically unstable because the determinant
1315:fltk-1.3.4-1/png/png.c ****     * calculation involves the difference of large, but similar, numbers.  It is
1316:fltk-1.3.4-1/png/png.c ****     * difficult to be sure that the calculation is stable for real world values
1317:fltk-1.3.4-1/png/png.c ****     * and it is certain that it becomes unstable where the end points are close
1318:fltk-1.3.4-1/png/png.c ****     * together.
1319:fltk-1.3.4-1/png/png.c ****     *
1320:fltk-1.3.4-1/png/png.c ****     * So this code uses the perhaps slightly less optimal but more
1321:fltk-1.3.4-1/png/png.c ****     * understandable and totally obvious approach of calculating color-scale.
1322:fltk-1.3.4-1/png/png.c ****     *
1323:fltk-1.3.4-1/png/png.c ****     * This algorithm depends on the precision in white-scale and that is
1324:fltk-1.3.4-1/png/png.c ****     * (1/white-y), so we can immediately see that as white-y approaches 0 the
1325:fltk-1.3.4-1/png/png.c ****     * accuracy inherent in the cHRM chunk drops off substantially.
1326:fltk-1.3.4-1/png/png.c ****     *
1327:fltk-1.3.4-1/png/png.c ****     * libpng arithmetic: a simple inversion of the above equations
1328:fltk-1.3.4-1/png/png.c ****     * ------------------------------------------------------------
1329:fltk-1.3.4-1/png/png.c ****     *
1330:fltk-1.3.4-1/png/png.c ****     *    white_scale = 1/white-y
1331:fltk-1.3.4-1/png/png.c ****     *    white-X = white-x * white-scale
1332:fltk-1.3.4-1/png/png.c ****     *    white-Y = 1.0
1333:fltk-1.3.4-1/png/png.c ****     *    white-Z = (1 - white-x - white-y) * white_scale
1334:fltk-1.3.4-1/png/png.c ****     *
1335:fltk-1.3.4-1/png/png.c ****     *    white-C = red-C + green-C + blue-C
1336:fltk-1.3.4-1/png/png.c ****     *            = red-c*red-scale + green-c*green-scale + blue-c*blue-scale
1337:fltk-1.3.4-1/png/png.c ****     *
1338:fltk-1.3.4-1/png/png.c ****     * This gives us three equations in (red-scale,green-scale,blue-scale) where
1339:fltk-1.3.4-1/png/png.c ****     * all the coefficients are now known:
1340:fltk-1.3.4-1/png/png.c ****     *
1341:fltk-1.3.4-1/png/png.c ****     *    red-x*red-scale + green-x*green-scale + blue-x*blue-scale
1342:fltk-1.3.4-1/png/png.c ****     *       = white-x/white-y
1343:fltk-1.3.4-1/png/png.c ****     *    red-y*red-scale + green-y*green-scale + blue-y*blue-scale = 1
1344:fltk-1.3.4-1/png/png.c ****     *    red-z*red-scale + green-z*green-scale + blue-z*blue-scale
1345:fltk-1.3.4-1/png/png.c ****     *       = (1 - white-x - white-y)/white-y
1346:fltk-1.3.4-1/png/png.c ****     *
1347:fltk-1.3.4-1/png/png.c ****     * In the last equation color-z is (1 - color-x - color-y) so we can add all
1348:fltk-1.3.4-1/png/png.c ****     * three equations together to get an alternative third:
1349:fltk-1.3.4-1/png/png.c ****     *
1350:fltk-1.3.4-1/png/png.c ****     *    red-scale + green-scale + blue-scale = 1/white-y = white-scale
1351:fltk-1.3.4-1/png/png.c ****     *
1352:fltk-1.3.4-1/png/png.c ****     * So now we have a Cramer's rule solution where the determinants are just
1353:fltk-1.3.4-1/png/png.c ****     * 3x3 - far more tractible.  Unfortunately 3x3 determinants still involve
1354:fltk-1.3.4-1/png/png.c ****     * multiplication of three coefficients so we can't guarantee to avoid
1355:fltk-1.3.4-1/png/png.c ****     * overflow in the libpng fixed point representation.  Using Cramer's rule in
1356:fltk-1.3.4-1/png/png.c ****     * floating point is probably a good choice here, but it's not an option for
1357:fltk-1.3.4-1/png/png.c ****     * fixed point.  Instead proceed to simplify the first two equations by
1358:fltk-1.3.4-1/png/png.c ****     * eliminating what is likely to be the largest value, blue-scale:
1359:fltk-1.3.4-1/png/png.c ****     *
1360:fltk-1.3.4-1/png/png.c ****     *    blue-scale = white-scale - red-scale - green-scale
1361:fltk-1.3.4-1/png/png.c ****     *
1362:fltk-1.3.4-1/png/png.c ****     * Hence:
1363:fltk-1.3.4-1/png/png.c ****     *
1364:fltk-1.3.4-1/png/png.c ****     *    (red-x - blue-x)*red-scale + (green-x - blue-x)*green-scale =
1365:fltk-1.3.4-1/png/png.c ****     *                (white-x - blue-x)*white-scale
1366:fltk-1.3.4-1/png/png.c ****     *
1367:fltk-1.3.4-1/png/png.c ****     *    (red-y - blue-y)*red-scale + (green-y - blue-y)*green-scale =
1368:fltk-1.3.4-1/png/png.c ****     *                1 - blue-y*white-scale
1369:fltk-1.3.4-1/png/png.c ****     *
1370:fltk-1.3.4-1/png/png.c ****     * And now we can trivially solve for (red-scale,green-scale):
1371:fltk-1.3.4-1/png/png.c ****     *
1372:fltk-1.3.4-1/png/png.c ****     *    green-scale =
1373:fltk-1.3.4-1/png/png.c ****     *                (white-x - blue-x)*white-scale - (red-x - blue-x)*red-scale
1374:fltk-1.3.4-1/png/png.c ****     *                -----------------------------------------------------------
1375:fltk-1.3.4-1/png/png.c ****     *                                  green-x - blue-x
1376:fltk-1.3.4-1/png/png.c ****     *
1377:fltk-1.3.4-1/png/png.c ****     *    red-scale =
1378:fltk-1.3.4-1/png/png.c ****     *                1 - blue-y*white-scale - (green-y - blue-y) * green-scale
1379:fltk-1.3.4-1/png/png.c ****     *                ---------------------------------------------------------
1380:fltk-1.3.4-1/png/png.c ****     *                                  red-y - blue-y
1381:fltk-1.3.4-1/png/png.c ****     *
1382:fltk-1.3.4-1/png/png.c ****     * Hence:
1383:fltk-1.3.4-1/png/png.c ****     *
1384:fltk-1.3.4-1/png/png.c ****     *    red-scale =
1385:fltk-1.3.4-1/png/png.c ****     *          ( (green-x - blue-x) * (white-y - blue-y) -
1386:fltk-1.3.4-1/png/png.c ****     *            (green-y - blue-y) * (white-x - blue-x) ) / white-y
1387:fltk-1.3.4-1/png/png.c ****     * -------------------------------------------------------------------------
1388:fltk-1.3.4-1/png/png.c ****     *  (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x)
1389:fltk-1.3.4-1/png/png.c ****     *
1390:fltk-1.3.4-1/png/png.c ****     *    green-scale =
1391:fltk-1.3.4-1/png/png.c ****     *          ( (red-y - blue-y) * (white-x - blue-x) -
1392:fltk-1.3.4-1/png/png.c ****     *            (red-x - blue-x) * (white-y - blue-y) ) / white-y
1393:fltk-1.3.4-1/png/png.c ****     * -------------------------------------------------------------------------
1394:fltk-1.3.4-1/png/png.c ****     *  (green-x - blue-x)*(red-y - blue-y)-(green-y - blue-y)*(red-x - blue-x)
1395:fltk-1.3.4-1/png/png.c ****     *
1396:fltk-1.3.4-1/png/png.c ****     * Accuracy:
1397:fltk-1.3.4-1/png/png.c ****     * The input values have 5 decimal digits of accuracy.  The values are all in
1398:fltk-1.3.4-1/png/png.c ****     * the range 0 < value < 1, so simple products are in the same range but may
1399:fltk-1.3.4-1/png/png.c ****     * need up to 10 decimal digits to preserve the original precision and avoid
1400:fltk-1.3.4-1/png/png.c ****     * underflow.  Because we are using a 32-bit signed representation we cannot
1401:fltk-1.3.4-1/png/png.c ****     * match this; the best is a little over 9 decimal digits, less than 10.
1402:fltk-1.3.4-1/png/png.c ****     *
1403:fltk-1.3.4-1/png/png.c ****     * The approach used here is to preserve the maximum precision within the
1404:fltk-1.3.4-1/png/png.c ****     * signed representation.  Because the red-scale calculation above uses the
1405:fltk-1.3.4-1/png/png.c ****     * difference between two products of values that must be in the range -1..+1
1406:fltk-1.3.4-1/png/png.c ****     * it is sufficient to divide the product by 7; ceil(100,000/32767*2).  The
1407:fltk-1.3.4-1/png/png.c ****     * factor is irrelevant in the calculation because it is applied to both
1408:fltk-1.3.4-1/png/png.c ****     * numerator and denominator.
1409:fltk-1.3.4-1/png/png.c ****     *
1410:fltk-1.3.4-1/png/png.c ****     * Note that the values of the differences of the products of the
1411:fltk-1.3.4-1/png/png.c ****     * chromaticities in the above equations tend to be small, for example for
1412:fltk-1.3.4-1/png/png.c ****     * the sRGB chromaticities they are:
1413:fltk-1.3.4-1/png/png.c ****     *
1414:fltk-1.3.4-1/png/png.c ****     * red numerator:    -0.04751
1415:fltk-1.3.4-1/png/png.c ****     * green numerator:  -0.08788
1416:fltk-1.3.4-1/png/png.c ****     * denominator:      -0.2241 (without white-y multiplication)
1417:fltk-1.3.4-1/png/png.c ****     *
1418:fltk-1.3.4-1/png/png.c ****     *  The resultant Y coefficients from the chromaticities of some widely used
1419:fltk-1.3.4-1/png/png.c ****     *  color space definitions are (to 15 decimal places):
1420:fltk-1.3.4-1/png/png.c ****     *
1421:fltk-1.3.4-1/png/png.c ****     *  sRGB
1422:fltk-1.3.4-1/png/png.c ****     *    0.212639005871510 0.715168678767756 0.072192315360734
1423:fltk-1.3.4-1/png/png.c ****     *  Kodak ProPhoto
1424:fltk-1.3.4-1/png/png.c ****     *    0.288071128229293 0.711843217810102 0.000085653960605
1425:fltk-1.3.4-1/png/png.c ****     *  Adobe RGB
1426:fltk-1.3.4-1/png/png.c ****     *    0.297344975250536 0.627363566255466 0.075291458493998
1427:fltk-1.3.4-1/png/png.c ****     *  Adobe Wide Gamut RGB
1428:fltk-1.3.4-1/png/png.c ****     *    0.258728243040113 0.724682314948566 0.016589442011321
1429:fltk-1.3.4-1/png/png.c ****     */
1430:fltk-1.3.4-1/png/png.c ****    /* By the argument, above overflow should be impossible here. The return
1431:fltk-1.3.4-1/png/png.c ****     * value of 2 indicates an internal error to the caller.
1432:fltk-1.3.4-1/png/png.c ****     */
1433:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&left, xy->greenx-xy->bluex, xy->redy - xy->bluey, 7) == 0)
1434:fltk-1.3.4-1/png/png.c ****       return 2;
1435:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&right, xy->greeny-xy->bluey, xy->redx - xy->bluex, 7) == 0)
1436:fltk-1.3.4-1/png/png.c ****       return 2;
1437:fltk-1.3.4-1/png/png.c ****    denominator = left - right;
1438:fltk-1.3.4-1/png/png.c **** 
1439:fltk-1.3.4-1/png/png.c ****    /* Now find the red numerator. */
1440:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&left, xy->greenx-xy->bluex, xy->whitey-xy->bluey, 7) == 0)
1441:fltk-1.3.4-1/png/png.c ****       return 2;
1442:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&right, xy->greeny-xy->bluey, xy->whitex-xy->bluex, 7) == 0)
1443:fltk-1.3.4-1/png/png.c ****       return 2;
1444:fltk-1.3.4-1/png/png.c **** 
1445:fltk-1.3.4-1/png/png.c ****    /* Overflow is possible here and it indicates an extreme set of PNG cHRM
1446:fltk-1.3.4-1/png/png.c ****     * chunk values.  This calculation actually returns the reciprocal of the
1447:fltk-1.3.4-1/png/png.c ****     * scale value because this allows us to delay the multiplication of white-y
1448:fltk-1.3.4-1/png/png.c ****     * into the denominator, which tends to produce a small number.
1449:fltk-1.3.4-1/png/png.c ****     */
1450:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&red_inverse, xy->whitey, denominator, left-right) == 0 ||
1451:fltk-1.3.4-1/png/png.c ****        red_inverse <= xy->whitey /* r+g+b scales = white scale */)
1452:fltk-1.3.4-1/png/png.c ****       return 1;
1453:fltk-1.3.4-1/png/png.c **** 
1454:fltk-1.3.4-1/png/png.c ****    /* Similarly for green_inverse: */
1455:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&left, xy->redy-xy->bluey, xy->whitex-xy->bluex, 7) == 0)
1456:fltk-1.3.4-1/png/png.c ****       return 2;
1457:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&right, xy->redx-xy->bluex, xy->whitey-xy->bluey, 7) == 0)
1458:fltk-1.3.4-1/png/png.c ****       return 2;
1459:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&green_inverse, xy->whitey, denominator, left-right) == 0 ||
1460:fltk-1.3.4-1/png/png.c ****        green_inverse <= xy->whitey)
1461:fltk-1.3.4-1/png/png.c ****       return 1;
1462:fltk-1.3.4-1/png/png.c **** 
1463:fltk-1.3.4-1/png/png.c ****    /* And the blue scale, the checks above guarantee this can't overflow but it
1464:fltk-1.3.4-1/png/png.c ****     * can still produce 0 for extreme cHRM values.
1465:fltk-1.3.4-1/png/png.c ****     */
1466:fltk-1.3.4-1/png/png.c ****    blue_scale = png_reciprocal(xy->whitey) - png_reciprocal(red_inverse) -
1467:fltk-1.3.4-1/png/png.c ****        png_reciprocal(green_inverse);
1468:fltk-1.3.4-1/png/png.c ****    if (blue_scale <= 0)
1469:fltk-1.3.4-1/png/png.c ****       return 1;
1470:fltk-1.3.4-1/png/png.c **** 
1471:fltk-1.3.4-1/png/png.c **** 
1472:fltk-1.3.4-1/png/png.c ****    /* And fill in the png_XYZ: */
1473:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&XYZ->red_X, xy->redx, PNG_FP_1, red_inverse) == 0)
1474:fltk-1.3.4-1/png/png.c ****       return 1;
1475:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&XYZ->red_Y, xy->redy, PNG_FP_1, red_inverse) == 0)
1476:fltk-1.3.4-1/png/png.c ****       return 1;
1477:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&XYZ->red_Z, PNG_FP_1 - xy->redx - xy->redy, PNG_FP_1,
1478:fltk-1.3.4-1/png/png.c ****        red_inverse) == 0)
1479:fltk-1.3.4-1/png/png.c ****       return 1;
1480:fltk-1.3.4-1/png/png.c **** 
1481:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&XYZ->green_X, xy->greenx, PNG_FP_1, green_inverse) == 0)
1482:fltk-1.3.4-1/png/png.c ****       return 1;
1483:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&XYZ->green_Y, xy->greeny, PNG_FP_1, green_inverse) == 0)
1484:fltk-1.3.4-1/png/png.c ****       return 1;
1485:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&XYZ->green_Z, PNG_FP_1 - xy->greenx - xy->greeny, PNG_FP_1,
1486:fltk-1.3.4-1/png/png.c ****        green_inverse) == 0)
1487:fltk-1.3.4-1/png/png.c ****       return 1;
1488:fltk-1.3.4-1/png/png.c **** 
1489:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&XYZ->blue_X, xy->bluex, blue_scale, PNG_FP_1) == 0)
1490:fltk-1.3.4-1/png/png.c ****       return 1;
1491:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&XYZ->blue_Y, xy->bluey, blue_scale, PNG_FP_1) == 0)
1492:fltk-1.3.4-1/png/png.c ****       return 1;
1493:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&XYZ->blue_Z, PNG_FP_1 - xy->bluex - xy->bluey, blue_scale,
1494:fltk-1.3.4-1/png/png.c ****        PNG_FP_1) == 0)
1495:fltk-1.3.4-1/png/png.c ****       return 1;
1496:fltk-1.3.4-1/png/png.c **** 
1497:fltk-1.3.4-1/png/png.c ****    return 0; /*success*/
1498:fltk-1.3.4-1/png/png.c **** }
1499:fltk-1.3.4-1/png/png.c **** 
1500:fltk-1.3.4-1/png/png.c **** static int
1501:fltk-1.3.4-1/png/png.c **** png_XYZ_normalize(png_XYZ *XYZ)
1502:fltk-1.3.4-1/png/png.c **** {
1503:fltk-1.3.4-1/png/png.c ****    png_int_32 Y;
1504:fltk-1.3.4-1/png/png.c **** 
1505:fltk-1.3.4-1/png/png.c ****    if (XYZ->red_Y < 0 || XYZ->green_Y < 0 || XYZ->blue_Y < 0 ||
1506:fltk-1.3.4-1/png/png.c ****       XYZ->red_X < 0 || XYZ->green_X < 0 || XYZ->blue_X < 0 ||
1507:fltk-1.3.4-1/png/png.c ****       XYZ->red_Z < 0 || XYZ->green_Z < 0 || XYZ->blue_Z < 0)
1508:fltk-1.3.4-1/png/png.c ****       return 1;
1509:fltk-1.3.4-1/png/png.c **** 
1510:fltk-1.3.4-1/png/png.c ****    /* Normalize by scaling so the sum of the end-point Y values is PNG_FP_1.
1511:fltk-1.3.4-1/png/png.c ****     * IMPLEMENTATION NOTE: ANSI requires signed overflow not to occur, therefore
1512:fltk-1.3.4-1/png/png.c ****     * relying on addition of two positive values producing a negative one is not
1513:fltk-1.3.4-1/png/png.c ****     * safe.
1514:fltk-1.3.4-1/png/png.c ****     */
1515:fltk-1.3.4-1/png/png.c ****    Y = XYZ->red_Y;
1516:fltk-1.3.4-1/png/png.c ****    if (0x7fffffff - Y < XYZ->green_X)
1517:fltk-1.3.4-1/png/png.c ****       return 1;
1518:fltk-1.3.4-1/png/png.c ****    Y += XYZ->green_Y;
1519:fltk-1.3.4-1/png/png.c ****    if (0x7fffffff - Y < XYZ->blue_X)
1520:fltk-1.3.4-1/png/png.c ****       return 1;
1521:fltk-1.3.4-1/png/png.c ****    Y += XYZ->blue_Y;
1522:fltk-1.3.4-1/png/png.c **** 
1523:fltk-1.3.4-1/png/png.c ****    if (Y != PNG_FP_1)
1524:fltk-1.3.4-1/png/png.c ****    {
1525:fltk-1.3.4-1/png/png.c ****       if (png_muldiv(&XYZ->red_X, XYZ->red_X, PNG_FP_1, Y) == 0)
1526:fltk-1.3.4-1/png/png.c ****          return 1;
1527:fltk-1.3.4-1/png/png.c ****       if (png_muldiv(&XYZ->red_Y, XYZ->red_Y, PNG_FP_1, Y) == 0)
1528:fltk-1.3.4-1/png/png.c ****          return 1;
1529:fltk-1.3.4-1/png/png.c ****       if (png_muldiv(&XYZ->red_Z, XYZ->red_Z, PNG_FP_1, Y) == 0)
1530:fltk-1.3.4-1/png/png.c ****          return 1;
1531:fltk-1.3.4-1/png/png.c **** 
1532:fltk-1.3.4-1/png/png.c ****       if (png_muldiv(&XYZ->green_X, XYZ->green_X, PNG_FP_1, Y) == 0)
1533:fltk-1.3.4-1/png/png.c ****          return 1;
1534:fltk-1.3.4-1/png/png.c ****       if (png_muldiv(&XYZ->green_Y, XYZ->green_Y, PNG_FP_1, Y) == 0)
1535:fltk-1.3.4-1/png/png.c ****          return 1;
1536:fltk-1.3.4-1/png/png.c ****       if (png_muldiv(&XYZ->green_Z, XYZ->green_Z, PNG_FP_1, Y) == 0)
1537:fltk-1.3.4-1/png/png.c ****          return 1;
1538:fltk-1.3.4-1/png/png.c **** 
1539:fltk-1.3.4-1/png/png.c ****       if (png_muldiv(&XYZ->blue_X, XYZ->blue_X, PNG_FP_1, Y) == 0)
1540:fltk-1.3.4-1/png/png.c ****          return 1;
1541:fltk-1.3.4-1/png/png.c ****       if (png_muldiv(&XYZ->blue_Y, XYZ->blue_Y, PNG_FP_1, Y) == 0)
1542:fltk-1.3.4-1/png/png.c ****          return 1;
1543:fltk-1.3.4-1/png/png.c ****       if (png_muldiv(&XYZ->blue_Z, XYZ->blue_Z, PNG_FP_1, Y) == 0)
1544:fltk-1.3.4-1/png/png.c ****          return 1;
1545:fltk-1.3.4-1/png/png.c ****    }
1546:fltk-1.3.4-1/png/png.c **** 
1547:fltk-1.3.4-1/png/png.c ****    return 0;
1548:fltk-1.3.4-1/png/png.c **** }
1549:fltk-1.3.4-1/png/png.c **** 
1550:fltk-1.3.4-1/png/png.c **** static int
1551:fltk-1.3.4-1/png/png.c **** png_colorspace_endpoints_match(const png_xy *xy1, const png_xy *xy2, int delta)
1552:fltk-1.3.4-1/png/png.c **** {
1553:fltk-1.3.4-1/png/png.c ****    /* Allow an error of +/-0.01 (absolute value) on each chromaticity */
1554:fltk-1.3.4-1/png/png.c ****    if (PNG_OUT_OF_RANGE(xy1->whitex, xy2->whitex,delta) ||
1555:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->whitey, xy2->whitey,delta) ||
1556:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->redx,   xy2->redx,  delta) ||
1557:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->redy,   xy2->redy,  delta) ||
1558:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->greenx, xy2->greenx,delta) ||
1559:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->greeny, xy2->greeny,delta) ||
1560:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->bluex,  xy2->bluex, delta) ||
1561:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->bluey,  xy2->bluey, delta))
1562:fltk-1.3.4-1/png/png.c ****       return 0;
1563:fltk-1.3.4-1/png/png.c ****    return 1;
1564:fltk-1.3.4-1/png/png.c **** }
1565:fltk-1.3.4-1/png/png.c **** 
1566:fltk-1.3.4-1/png/png.c **** /* Added in libpng-1.6.0, a different check for the validity of a set of cHRM
1567:fltk-1.3.4-1/png/png.c ****  * chunk chromaticities.  Earlier checks used to simply look for the overflow
1568:fltk-1.3.4-1/png/png.c ****  * condition (where the determinant of the matrix to solve for XYZ ends up zero
1569:fltk-1.3.4-1/png/png.c ****  * because the chromaticity values are not all distinct.)  Despite this it is
1570:fltk-1.3.4-1/png/png.c ****  * theoretically possible to produce chromaticities that are apparently valid
1571:fltk-1.3.4-1/png/png.c ****  * but that rapidly degrade to invalid, potentially crashing, sets because of
1572:fltk-1.3.4-1/png/png.c ****  * arithmetic inaccuracies when calculations are performed on them.  The new
1573:fltk-1.3.4-1/png/png.c ****  * check is to round-trip xy -> XYZ -> xy and then check that the result is
1574:fltk-1.3.4-1/png/png.c ****  * within a small percentage of the original.
1575:fltk-1.3.4-1/png/png.c ****  */
1576:fltk-1.3.4-1/png/png.c **** static int
1577:fltk-1.3.4-1/png/png.c **** png_colorspace_check_xy(png_XYZ *XYZ, const png_xy *xy)
1578:fltk-1.3.4-1/png/png.c **** {
1579:fltk-1.3.4-1/png/png.c ****    int result;
1580:fltk-1.3.4-1/png/png.c ****    png_xy xy_test;
1581:fltk-1.3.4-1/png/png.c **** 
1582:fltk-1.3.4-1/png/png.c ****    /* As a side-effect this routine also returns the XYZ endpoints. */
1583:fltk-1.3.4-1/png/png.c ****    result = png_XYZ_from_xy(XYZ, xy);
1584:fltk-1.3.4-1/png/png.c ****    if (result != 0)
1585:fltk-1.3.4-1/png/png.c ****       return result;
1586:fltk-1.3.4-1/png/png.c **** 
1587:fltk-1.3.4-1/png/png.c ****    result = png_xy_from_XYZ(&xy_test, XYZ);
1588:fltk-1.3.4-1/png/png.c ****    if (result != 0)
1589:fltk-1.3.4-1/png/png.c ****       return result;
1590:fltk-1.3.4-1/png/png.c **** 
1591:fltk-1.3.4-1/png/png.c ****    if (png_colorspace_endpoints_match(xy, &xy_test,
1592:fltk-1.3.4-1/png/png.c ****        5/*actually, the math is pretty accurate*/) != 0)
1593:fltk-1.3.4-1/png/png.c ****       return 0;
1594:fltk-1.3.4-1/png/png.c **** 
1595:fltk-1.3.4-1/png/png.c ****    /* Too much slip */
1596:fltk-1.3.4-1/png/png.c ****    return 1;
1597:fltk-1.3.4-1/png/png.c **** }
1598:fltk-1.3.4-1/png/png.c **** 
1599:fltk-1.3.4-1/png/png.c **** /* This is the check going the other way.  The XYZ is modified to normalize it
1600:fltk-1.3.4-1/png/png.c ****  * (another side-effect) and the xy chromaticities are returned.
1601:fltk-1.3.4-1/png/png.c ****  */
1602:fltk-1.3.4-1/png/png.c **** static int
1603:fltk-1.3.4-1/png/png.c **** png_colorspace_check_XYZ(png_xy *xy, png_XYZ *XYZ)
1604:fltk-1.3.4-1/png/png.c **** {
1605:fltk-1.3.4-1/png/png.c ****    int result;
1606:fltk-1.3.4-1/png/png.c ****    png_XYZ XYZtemp;
1607:fltk-1.3.4-1/png/png.c **** 
1608:fltk-1.3.4-1/png/png.c ****    result = png_XYZ_normalize(XYZ);
1609:fltk-1.3.4-1/png/png.c ****    if (result != 0)
1610:fltk-1.3.4-1/png/png.c ****       return result;
1611:fltk-1.3.4-1/png/png.c **** 
1612:fltk-1.3.4-1/png/png.c ****    result = png_xy_from_XYZ(xy, XYZ);
1613:fltk-1.3.4-1/png/png.c ****    if (result != 0)
1614:fltk-1.3.4-1/png/png.c ****       return result;
1615:fltk-1.3.4-1/png/png.c **** 
1616:fltk-1.3.4-1/png/png.c ****    XYZtemp = *XYZ;
1617:fltk-1.3.4-1/png/png.c ****    return png_colorspace_check_xy(&XYZtemp, xy);
1618:fltk-1.3.4-1/png/png.c **** }
1619:fltk-1.3.4-1/png/png.c **** 
1620:fltk-1.3.4-1/png/png.c **** /* Used to check for an endpoint match against sRGB */
1621:fltk-1.3.4-1/png/png.c **** static const png_xy sRGB_xy = /* From ITU-R BT.709-3 */
1622:fltk-1.3.4-1/png/png.c **** {
1623:fltk-1.3.4-1/png/png.c ****    /* color      x       y */
1624:fltk-1.3.4-1/png/png.c ****    /* red   */ 64000, 33000,
1625:fltk-1.3.4-1/png/png.c ****    /* green */ 30000, 60000,
1626:fltk-1.3.4-1/png/png.c ****    /* blue  */ 15000,  6000,
1627:fltk-1.3.4-1/png/png.c ****    /* white */ 31270, 32900
1628:fltk-1.3.4-1/png/png.c **** };
1629:fltk-1.3.4-1/png/png.c **** 
1630:fltk-1.3.4-1/png/png.c **** static int
1631:fltk-1.3.4-1/png/png.c **** png_colorspace_set_xy_and_XYZ(png_const_structrp png_ptr,
1632:fltk-1.3.4-1/png/png.c ****    png_colorspacerp colorspace, const png_xy *xy, const png_XYZ *XYZ,
1633:fltk-1.3.4-1/png/png.c ****    int preferred)
1634:fltk-1.3.4-1/png/png.c **** {
1635:fltk-1.3.4-1/png/png.c ****    if ((colorspace->flags & PNG_COLORSPACE_INVALID) != 0)
1636:fltk-1.3.4-1/png/png.c ****       return 0;
1637:fltk-1.3.4-1/png/png.c **** 
1638:fltk-1.3.4-1/png/png.c ****    /* The consistency check is performed on the chromaticities; this factors out
1639:fltk-1.3.4-1/png/png.c ****     * variations because of the normalization (or not) of the end point Y
1640:fltk-1.3.4-1/png/png.c ****     * values.
1641:fltk-1.3.4-1/png/png.c ****     */
1642:fltk-1.3.4-1/png/png.c ****    if (preferred < 2 &&
1643:fltk-1.3.4-1/png/png.c ****        (colorspace->flags & PNG_COLORSPACE_HAVE_ENDPOINTS) != 0)
1644:fltk-1.3.4-1/png/png.c ****    {
1645:fltk-1.3.4-1/png/png.c ****       /* The end points must be reasonably close to any we already have.  The
1646:fltk-1.3.4-1/png/png.c ****        * following allows an error of up to +/-.001
1647:fltk-1.3.4-1/png/png.c ****        */
1648:fltk-1.3.4-1/png/png.c ****       if (png_colorspace_endpoints_match(xy, &colorspace->end_points_xy,
1649:fltk-1.3.4-1/png/png.c ****           100) == 0)
1650:fltk-1.3.4-1/png/png.c ****       {
1651:fltk-1.3.4-1/png/png.c ****          colorspace->flags |= PNG_COLORSPACE_INVALID;
1652:fltk-1.3.4-1/png/png.c ****          png_benign_error(png_ptr, "inconsistent chromaticities");
1653:fltk-1.3.4-1/png/png.c ****          return 0; /* failed */
1654:fltk-1.3.4-1/png/png.c ****       }
1655:fltk-1.3.4-1/png/png.c **** 
1656:fltk-1.3.4-1/png/png.c ****       /* Only overwrite with preferred values */
1657:fltk-1.3.4-1/png/png.c ****       if (preferred == 0)
1658:fltk-1.3.4-1/png/png.c ****          return 1; /* ok, but no change */
1659:fltk-1.3.4-1/png/png.c ****    }
1660:fltk-1.3.4-1/png/png.c **** 
1661:fltk-1.3.4-1/png/png.c ****    colorspace->end_points_xy = *xy;
1662:fltk-1.3.4-1/png/png.c ****    colorspace->end_points_XYZ = *XYZ;
1663:fltk-1.3.4-1/png/png.c ****    colorspace->flags |= PNG_COLORSPACE_HAVE_ENDPOINTS;
1664:fltk-1.3.4-1/png/png.c **** 
1665:fltk-1.3.4-1/png/png.c ****    /* The end points are normally quoted to two decimal digits, so allow +/-0.01
1666:fltk-1.3.4-1/png/png.c ****     * on this test.
1667:fltk-1.3.4-1/png/png.c ****     */
1668:fltk-1.3.4-1/png/png.c ****    if (png_colorspace_endpoints_match(xy, &sRGB_xy, 1000) != 0)
1669:fltk-1.3.4-1/png/png.c ****       colorspace->flags |= PNG_COLORSPACE_ENDPOINTS_MATCH_sRGB;
1670:fltk-1.3.4-1/png/png.c **** 
1671:fltk-1.3.4-1/png/png.c ****    else
1672:fltk-1.3.4-1/png/png.c ****       colorspace->flags &= PNG_COLORSPACE_CANCEL(
1673:fltk-1.3.4-1/png/png.c ****          PNG_COLORSPACE_ENDPOINTS_MATCH_sRGB);
1674:fltk-1.3.4-1/png/png.c **** 
1675:fltk-1.3.4-1/png/png.c ****    return 2; /* ok and changed */
1676:fltk-1.3.4-1/png/png.c **** }
1677:fltk-1.3.4-1/png/png.c **** 
1678:fltk-1.3.4-1/png/png.c **** int /* PRIVATE */
1679:fltk-1.3.4-1/png/png.c **** png_colorspace_set_chromaticities(png_const_structrp png_ptr,
1680:fltk-1.3.4-1/png/png.c ****    png_colorspacerp colorspace, const png_xy *xy, int preferred)
1681:fltk-1.3.4-1/png/png.c **** {
1682:fltk-1.3.4-1/png/png.c ****    /* We must check the end points to ensure they are reasonable - in the past
1683:fltk-1.3.4-1/png/png.c ****     * color management systems have crashed as a result of getting bogus
1684:fltk-1.3.4-1/png/png.c ****     * colorant values, while this isn't the fault of libpng it is the
1685:fltk-1.3.4-1/png/png.c ****     * responsibility of libpng because PNG carries the bomb and libpng is in a
1686:fltk-1.3.4-1/png/png.c ****     * position to protect against it.
1687:fltk-1.3.4-1/png/png.c ****     */
1688:fltk-1.3.4-1/png/png.c ****    png_XYZ XYZ;
1689:fltk-1.3.4-1/png/png.c **** 
1690:fltk-1.3.4-1/png/png.c ****    switch (png_colorspace_check_xy(&XYZ, xy))
1691:fltk-1.3.4-1/png/png.c ****    {
1692:fltk-1.3.4-1/png/png.c ****       case 0: /* success */
1693:fltk-1.3.4-1/png/png.c ****          return png_colorspace_set_xy_and_XYZ(png_ptr, colorspace, xy, &XYZ,
1694:fltk-1.3.4-1/png/png.c ****             preferred);
1695:fltk-1.3.4-1/png/png.c **** 
1696:fltk-1.3.4-1/png/png.c ****       case 1:
1697:fltk-1.3.4-1/png/png.c ****          /* We can't invert the chromaticities so we can't produce value XYZ
1698:fltk-1.3.4-1/png/png.c ****           * values.  Likely as not a color management system will fail too.
1699:fltk-1.3.4-1/png/png.c ****           */
1700:fltk-1.3.4-1/png/png.c ****          colorspace->flags |= PNG_COLORSPACE_INVALID;
1701:fltk-1.3.4-1/png/png.c ****          png_benign_error(png_ptr, "invalid chromaticities");
1702:fltk-1.3.4-1/png/png.c ****          break;
1703:fltk-1.3.4-1/png/png.c **** 
1704:fltk-1.3.4-1/png/png.c ****       default:
1705:fltk-1.3.4-1/png/png.c ****          /* libpng is broken; this should be a warning but if it happens we
1706:fltk-1.3.4-1/png/png.c ****           * want error reports so for the moment it is an error.
1707:fltk-1.3.4-1/png/png.c ****           */
1708:fltk-1.3.4-1/png/png.c ****          colorspace->flags |= PNG_COLORSPACE_INVALID;
1709:fltk-1.3.4-1/png/png.c ****          png_error(png_ptr, "internal error checking chromaticities");
1710:fltk-1.3.4-1/png/png.c ****          break;
1711:fltk-1.3.4-1/png/png.c ****    }
1712:fltk-1.3.4-1/png/png.c **** 
1713:fltk-1.3.4-1/png/png.c ****    return 0; /* failed */
1714:fltk-1.3.4-1/png/png.c **** }
1715:fltk-1.3.4-1/png/png.c **** 
1716:fltk-1.3.4-1/png/png.c **** int /* PRIVATE */
1717:fltk-1.3.4-1/png/png.c **** png_colorspace_set_endpoints(png_const_structrp png_ptr,
1718:fltk-1.3.4-1/png/png.c ****    png_colorspacerp colorspace, const png_XYZ *XYZ_in, int preferred)
1719:fltk-1.3.4-1/png/png.c **** {
1720:fltk-1.3.4-1/png/png.c ****    png_XYZ XYZ = *XYZ_in;
1721:fltk-1.3.4-1/png/png.c ****    png_xy xy;
1722:fltk-1.3.4-1/png/png.c **** 
1723:fltk-1.3.4-1/png/png.c ****    switch (png_colorspace_check_XYZ(&xy, &XYZ))
1724:fltk-1.3.4-1/png/png.c ****    {
1725:fltk-1.3.4-1/png/png.c ****       case 0:
1726:fltk-1.3.4-1/png/png.c ****          return png_colorspace_set_xy_and_XYZ(png_ptr, colorspace, &xy, &XYZ,
1727:fltk-1.3.4-1/png/png.c ****             preferred);
1728:fltk-1.3.4-1/png/png.c **** 
1729:fltk-1.3.4-1/png/png.c ****       case 1:
1730:fltk-1.3.4-1/png/png.c ****          /* End points are invalid. */
1731:fltk-1.3.4-1/png/png.c ****          colorspace->flags |= PNG_COLORSPACE_INVALID;
1732:fltk-1.3.4-1/png/png.c ****          png_benign_error(png_ptr, "invalid end points");
1733:fltk-1.3.4-1/png/png.c ****          break;
1734:fltk-1.3.4-1/png/png.c **** 
1735:fltk-1.3.4-1/png/png.c ****       default:
1736:fltk-1.3.4-1/png/png.c ****          colorspace->flags |= PNG_COLORSPACE_INVALID;
1737:fltk-1.3.4-1/png/png.c ****          png_error(png_ptr, "internal error checking chromaticities");
1738:fltk-1.3.4-1/png/png.c ****          break;
1739:fltk-1.3.4-1/png/png.c ****    }
1740:fltk-1.3.4-1/png/png.c **** 
1741:fltk-1.3.4-1/png/png.c ****    return 0; /* failed */
1742:fltk-1.3.4-1/png/png.c **** }
1743:fltk-1.3.4-1/png/png.c **** 
1744:fltk-1.3.4-1/png/png.c **** #if defined(PNG_sRGB_SUPPORTED) || defined(PNG_iCCP_SUPPORTED)
1745:fltk-1.3.4-1/png/png.c **** /* Error message generation */
1746:fltk-1.3.4-1/png/png.c **** static char
1747:fltk-1.3.4-1/png/png.c **** png_icc_tag_char(png_uint_32 byte)
1748:fltk-1.3.4-1/png/png.c **** {
1749:fltk-1.3.4-1/png/png.c ****    byte &= 0xff;
1750:fltk-1.3.4-1/png/png.c ****    if (byte >= 32 && byte <= 126)
1751:fltk-1.3.4-1/png/png.c ****       return (char)byte;
1752:fltk-1.3.4-1/png/png.c ****    else
1753:fltk-1.3.4-1/png/png.c ****       return '?';
1754:fltk-1.3.4-1/png/png.c **** }
1755:fltk-1.3.4-1/png/png.c **** 
1756:fltk-1.3.4-1/png/png.c **** static void
1757:fltk-1.3.4-1/png/png.c **** png_icc_tag_name(char *name, png_uint_32 tag)
1758:fltk-1.3.4-1/png/png.c **** {
1759:fltk-1.3.4-1/png/png.c ****    name[0] = '\'';
1760:fltk-1.3.4-1/png/png.c ****    name[1] = png_icc_tag_char(tag >> 24);
1761:fltk-1.3.4-1/png/png.c ****    name[2] = png_icc_tag_char(tag >> 16);
1762:fltk-1.3.4-1/png/png.c ****    name[3] = png_icc_tag_char(tag >>  8);
1763:fltk-1.3.4-1/png/png.c ****    name[4] = png_icc_tag_char(tag      );
1764:fltk-1.3.4-1/png/png.c ****    name[5] = '\'';
1765:fltk-1.3.4-1/png/png.c **** }
1766:fltk-1.3.4-1/png/png.c **** 
1767:fltk-1.3.4-1/png/png.c **** static int
1768:fltk-1.3.4-1/png/png.c **** is_ICC_signature_char(png_alloc_size_t it)
1769:fltk-1.3.4-1/png/png.c **** {
1770:fltk-1.3.4-1/png/png.c ****    return it == 32 || (it >= 48 && it <= 57) || (it >= 65 && it <= 90) ||
1771:fltk-1.3.4-1/png/png.c ****       (it >= 97 && it <= 122);
1772:fltk-1.3.4-1/png/png.c **** }
1773:fltk-1.3.4-1/png/png.c **** 
1774:fltk-1.3.4-1/png/png.c **** static int
1775:fltk-1.3.4-1/png/png.c **** is_ICC_signature(png_alloc_size_t it)
1776:fltk-1.3.4-1/png/png.c **** {
1777:fltk-1.3.4-1/png/png.c ****    return is_ICC_signature_char(it >> 24) /* checks all the top bits */ &&
1778:fltk-1.3.4-1/png/png.c ****       is_ICC_signature_char((it >> 16) & 0xff) &&
1779:fltk-1.3.4-1/png/png.c ****       is_ICC_signature_char((it >> 8) & 0xff) &&
1780:fltk-1.3.4-1/png/png.c ****       is_ICC_signature_char(it & 0xff);
1781:fltk-1.3.4-1/png/png.c **** }
1782:fltk-1.3.4-1/png/png.c **** 
1783:fltk-1.3.4-1/png/png.c **** static int
1784:fltk-1.3.4-1/png/png.c **** png_icc_profile_error(png_const_structrp png_ptr, png_colorspacerp colorspace,
1785:fltk-1.3.4-1/png/png.c ****    png_const_charp name, png_alloc_size_t value, png_const_charp reason)
1786:fltk-1.3.4-1/png/png.c **** {
1787:fltk-1.3.4-1/png/png.c ****    size_t pos;
1788:fltk-1.3.4-1/png/png.c ****    char message[196]; /* see below for calculation */
1789:fltk-1.3.4-1/png/png.c **** 
1790:fltk-1.3.4-1/png/png.c ****    if (colorspace != NULL)
1791:fltk-1.3.4-1/png/png.c ****       colorspace->flags |= PNG_COLORSPACE_INVALID;
1792:fltk-1.3.4-1/png/png.c **** 
1793:fltk-1.3.4-1/png/png.c ****    pos = png_safecat(message, (sizeof message), 0, "profile '"); /* 9 chars */
1794:fltk-1.3.4-1/png/png.c ****    pos = png_safecat(message, pos+79, pos, name); /* Truncate to 79 chars */
1795:fltk-1.3.4-1/png/png.c ****    pos = png_safecat(message, (sizeof message), pos, "': "); /* +2 = 90 */
1796:fltk-1.3.4-1/png/png.c ****    if (is_ICC_signature(value) != 0)
1797:fltk-1.3.4-1/png/png.c ****    {
1798:fltk-1.3.4-1/png/png.c ****       /* So 'value' is at most 4 bytes and the following cast is safe */
1799:fltk-1.3.4-1/png/png.c ****       png_icc_tag_name(message+pos, (png_uint_32)value);
1800:fltk-1.3.4-1/png/png.c ****       pos += 6; /* total +8; less than the else clause */
1801:fltk-1.3.4-1/png/png.c ****       message[pos++] = ':';
1802:fltk-1.3.4-1/png/png.c ****       message[pos++] = ' ';
1803:fltk-1.3.4-1/png/png.c ****    }
1804:fltk-1.3.4-1/png/png.c **** #  ifdef PNG_WARNINGS_SUPPORTED
1805:fltk-1.3.4-1/png/png.c ****    else
1806:fltk-1.3.4-1/png/png.c ****       {
1807:fltk-1.3.4-1/png/png.c ****          char number[PNG_NUMBER_BUFFER_SIZE]; /* +24 = 114*/
1808:fltk-1.3.4-1/png/png.c **** 
1809:fltk-1.3.4-1/png/png.c ****          pos = png_safecat(message, (sizeof message), pos,
1810:fltk-1.3.4-1/png/png.c ****             png_format_number(number, number+(sizeof number),
1811:fltk-1.3.4-1/png/png.c ****                PNG_NUMBER_FORMAT_x, value));
1812:fltk-1.3.4-1/png/png.c ****          pos = png_safecat(message, (sizeof message), pos, "h: "); /*+2 = 116*/
1813:fltk-1.3.4-1/png/png.c ****       }
1814:fltk-1.3.4-1/png/png.c **** #  endif
1815:fltk-1.3.4-1/png/png.c ****    /* The 'reason' is an arbitrary message, allow +79 maximum 195 */
1816:fltk-1.3.4-1/png/png.c ****    pos = png_safecat(message, (sizeof message), pos, reason);
1817:fltk-1.3.4-1/png/png.c ****    PNG_UNUSED(pos)
1818:fltk-1.3.4-1/png/png.c **** 
1819:fltk-1.3.4-1/png/png.c ****    /* This is recoverable, but make it unconditionally an app_error on write to
1820:fltk-1.3.4-1/png/png.c ****     * avoid writing invalid ICC profiles into PNG files (i.e., we handle them
1821:fltk-1.3.4-1/png/png.c ****     * on read, with a warning, but on write unless the app turns off
1822:fltk-1.3.4-1/png/png.c ****     * application errors the PNG won't be written.)
1823:fltk-1.3.4-1/png/png.c ****     */
1824:fltk-1.3.4-1/png/png.c ****    png_chunk_report(png_ptr, message,
1825:fltk-1.3.4-1/png/png.c ****       (colorspace != NULL) ? PNG_CHUNK_ERROR : PNG_CHUNK_WRITE_ERROR);
1826:fltk-1.3.4-1/png/png.c **** 
1827:fltk-1.3.4-1/png/png.c ****    return 0;
1828:fltk-1.3.4-1/png/png.c **** }
1829:fltk-1.3.4-1/png/png.c **** #endif /* sRGB || iCCP */
1830:fltk-1.3.4-1/png/png.c **** 
1831:fltk-1.3.4-1/png/png.c **** #ifdef PNG_sRGB_SUPPORTED
1832:fltk-1.3.4-1/png/png.c **** int /* PRIVATE */
1833:fltk-1.3.4-1/png/png.c **** png_colorspace_set_sRGB(png_const_structrp png_ptr, png_colorspacerp colorspace,
1834:fltk-1.3.4-1/png/png.c ****    int intent)
1835:fltk-1.3.4-1/png/png.c **** {
1836:fltk-1.3.4-1/png/png.c ****    /* sRGB sets known gamma, end points and (from the chunk) intent. */
1837:fltk-1.3.4-1/png/png.c ****    /* IMPORTANT: these are not necessarily the values found in an ICC profile
1838:fltk-1.3.4-1/png/png.c ****     * because ICC profiles store values adapted to a D50 environment; it is
1839:fltk-1.3.4-1/png/png.c ****     * expected that the ICC profile mediaWhitePointTag will be D50; see the
1840:fltk-1.3.4-1/png/png.c ****     * checks and code elsewhere to understand this better.
1841:fltk-1.3.4-1/png/png.c ****     *
1842:fltk-1.3.4-1/png/png.c ****     * These XYZ values, which are accurate to 5dp, produce rgb to gray
1843:fltk-1.3.4-1/png/png.c ****     * coefficients of (6968,23435,2366), which are reduced (because they add up
1844:fltk-1.3.4-1/png/png.c ****     * to 32769 not 32768) to (6968,23434,2366).  These are the values that
1845:fltk-1.3.4-1/png/png.c ****     * libpng has traditionally used (and are the best values given the 15bit
1846:fltk-1.3.4-1/png/png.c ****     * algorithm used by the rgb to gray code.)
1847:fltk-1.3.4-1/png/png.c ****     */
1848:fltk-1.3.4-1/png/png.c ****    static const png_XYZ sRGB_XYZ = /* D65 XYZ (*not* the D50 adapted values!) */
1849:fltk-1.3.4-1/png/png.c ****    {
1850:fltk-1.3.4-1/png/png.c ****       /* color      X      Y      Z */
1851:fltk-1.3.4-1/png/png.c ****       /* red   */ 41239, 21264,  1933,
1852:fltk-1.3.4-1/png/png.c ****       /* green */ 35758, 71517, 11919,
1853:fltk-1.3.4-1/png/png.c ****       /* blue  */ 18048,  7219, 95053
1854:fltk-1.3.4-1/png/png.c ****    };
1855:fltk-1.3.4-1/png/png.c **** 
1856:fltk-1.3.4-1/png/png.c ****    /* Do nothing if the colorspace is already invalidated. */
1857:fltk-1.3.4-1/png/png.c ****    if ((colorspace->flags & PNG_COLORSPACE_INVALID) != 0)
1858:fltk-1.3.4-1/png/png.c ****       return 0;
1859:fltk-1.3.4-1/png/png.c **** 
1860:fltk-1.3.4-1/png/png.c ****    /* Check the intent, then check for existing settings.  It is valid for the
1861:fltk-1.3.4-1/png/png.c ****     * PNG file to have cHRM or gAMA chunks along with sRGB, but the values must
1862:fltk-1.3.4-1/png/png.c ****     * be consistent with the correct values.  If, however, this function is
1863:fltk-1.3.4-1/png/png.c ****     * called below because an iCCP chunk matches sRGB then it is quite
1864:fltk-1.3.4-1/png/png.c ****     * conceivable that an older app recorded incorrect gAMA and cHRM because of
1865:fltk-1.3.4-1/png/png.c ****     * an incorrect calculation based on the values in the profile - this does
1866:fltk-1.3.4-1/png/png.c ****     * *not* invalidate the profile (though it still produces an error, which can
1867:fltk-1.3.4-1/png/png.c ****     * be ignored.)
1868:fltk-1.3.4-1/png/png.c ****     */
1869:fltk-1.3.4-1/png/png.c ****    if (intent < 0 || intent >= PNG_sRGB_INTENT_LAST)
1870:fltk-1.3.4-1/png/png.c ****       return png_icc_profile_error(png_ptr, colorspace, "sRGB",
1871:fltk-1.3.4-1/png/png.c ****          (unsigned)intent, "invalid sRGB rendering intent");
1872:fltk-1.3.4-1/png/png.c **** 
1873:fltk-1.3.4-1/png/png.c ****    if ((colorspace->flags & PNG_COLORSPACE_HAVE_INTENT) != 0 &&
1874:fltk-1.3.4-1/png/png.c ****       colorspace->rendering_intent != intent)
1875:fltk-1.3.4-1/png/png.c ****       return png_icc_profile_error(png_ptr, colorspace, "sRGB",
1876:fltk-1.3.4-1/png/png.c ****          (unsigned)intent, "inconsistent rendering intents");
1877:fltk-1.3.4-1/png/png.c **** 
1878:fltk-1.3.4-1/png/png.c ****    if ((colorspace->flags & PNG_COLORSPACE_FROM_sRGB) != 0)
1879:fltk-1.3.4-1/png/png.c ****    {
1880:fltk-1.3.4-1/png/png.c ****       png_benign_error(png_ptr, "duplicate sRGB information ignored");
1881:fltk-1.3.4-1/png/png.c ****       return 0;
1882:fltk-1.3.4-1/png/png.c ****    }
1883:fltk-1.3.4-1/png/png.c **** 
1884:fltk-1.3.4-1/png/png.c ****    /* If the standard sRGB cHRM chunk does not match the one from the PNG file
1885:fltk-1.3.4-1/png/png.c ****     * warn but overwrite the value with the correct one.
1886:fltk-1.3.4-1/png/png.c ****     */
1887:fltk-1.3.4-1/png/png.c ****    if ((colorspace->flags & PNG_COLORSPACE_HAVE_ENDPOINTS) != 0 &&
1888:fltk-1.3.4-1/png/png.c ****       !png_colorspace_endpoints_match(&sRGB_xy, &colorspace->end_points_xy,
1889:fltk-1.3.4-1/png/png.c ****          100))
1890:fltk-1.3.4-1/png/png.c ****       png_chunk_report(png_ptr, "cHRM chunk does not match sRGB",
1891:fltk-1.3.4-1/png/png.c ****          PNG_CHUNK_ERROR);
1892:fltk-1.3.4-1/png/png.c **** 
1893:fltk-1.3.4-1/png/png.c ****    /* This check is just done for the error reporting - the routine always
1894:fltk-1.3.4-1/png/png.c ****     * returns true when the 'from' argument corresponds to sRGB (2).
1895:fltk-1.3.4-1/png/png.c ****     */
1896:fltk-1.3.4-1/png/png.c ****    (void)png_colorspace_check_gamma(png_ptr, colorspace, PNG_GAMMA_sRGB_INVERSE,
1897:fltk-1.3.4-1/png/png.c ****       2/*from sRGB*/);
1898:fltk-1.3.4-1/png/png.c **** 
1899:fltk-1.3.4-1/png/png.c ****    /* intent: bugs in GCC force 'int' to be used as the parameter type. */
1900:fltk-1.3.4-1/png/png.c ****    colorspace->rendering_intent = (png_uint_16)intent;
1901:fltk-1.3.4-1/png/png.c ****    colorspace->flags |= PNG_COLORSPACE_HAVE_INTENT;
1902:fltk-1.3.4-1/png/png.c **** 
1903:fltk-1.3.4-1/png/png.c ****    /* endpoints */
1904:fltk-1.3.4-1/png/png.c ****    colorspace->end_points_xy = sRGB_xy;
1905:fltk-1.3.4-1/png/png.c ****    colorspace->end_points_XYZ = sRGB_XYZ;
1906:fltk-1.3.4-1/png/png.c ****    colorspace->flags |=
1907:fltk-1.3.4-1/png/png.c ****       (PNG_COLORSPACE_HAVE_ENDPOINTS|PNG_COLORSPACE_ENDPOINTS_MATCH_sRGB);
1908:fltk-1.3.4-1/png/png.c **** 
1909:fltk-1.3.4-1/png/png.c ****    /* gamma */
1910:fltk-1.3.4-1/png/png.c ****    colorspace->gamma = PNG_GAMMA_sRGB_INVERSE;
1911:fltk-1.3.4-1/png/png.c ****    colorspace->flags |= PNG_COLORSPACE_HAVE_GAMMA;
1912:fltk-1.3.4-1/png/png.c **** 
1913:fltk-1.3.4-1/png/png.c ****    /* Finally record that we have an sRGB profile */
1914:fltk-1.3.4-1/png/png.c ****    colorspace->flags |=
1915:fltk-1.3.4-1/png/png.c ****       (PNG_COLORSPACE_MATCHES_sRGB|PNG_COLORSPACE_FROM_sRGB);
1916:fltk-1.3.4-1/png/png.c **** 
1917:fltk-1.3.4-1/png/png.c ****    return 1; /* set */
1918:fltk-1.3.4-1/png/png.c **** }
1919:fltk-1.3.4-1/png/png.c **** #endif /* sRGB */
1920:fltk-1.3.4-1/png/png.c **** 
1921:fltk-1.3.4-1/png/png.c **** #ifdef PNG_iCCP_SUPPORTED
1922:fltk-1.3.4-1/png/png.c **** /* Encoded value of D50 as an ICC XYZNumber.  From the ICC 2010 spec the value
1923:fltk-1.3.4-1/png/png.c ****  * is XYZ(0.9642,1.0,0.8249), which scales to:
1924:fltk-1.3.4-1/png/png.c ****  *
1925:fltk-1.3.4-1/png/png.c ****  *    (63189.8112, 65536, 54060.6464)
1926:fltk-1.3.4-1/png/png.c ****  */
1927:fltk-1.3.4-1/png/png.c **** static const png_byte D50_nCIEXYZ[12] =
1928:fltk-1.3.4-1/png/png.c ****    { 0x00, 0x00, 0xf6, 0xd6, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xd3, 0x2d };
1929:fltk-1.3.4-1/png/png.c **** 
1930:fltk-1.3.4-1/png/png.c **** int /* PRIVATE */
1931:fltk-1.3.4-1/png/png.c **** png_icc_check_length(png_const_structrp png_ptr, png_colorspacerp colorspace,
1932:fltk-1.3.4-1/png/png.c ****    png_const_charp name, png_uint_32 profile_length)
1933:fltk-1.3.4-1/png/png.c **** {
1934:fltk-1.3.4-1/png/png.c ****    if (profile_length < 132)
1935:fltk-1.3.4-1/png/png.c ****       return png_icc_profile_error(png_ptr, colorspace, name, profile_length,
1936:fltk-1.3.4-1/png/png.c ****          "too short");
1937:fltk-1.3.4-1/png/png.c **** 
1938:fltk-1.3.4-1/png/png.c ****    return 1;
1939:fltk-1.3.4-1/png/png.c **** }
1940:fltk-1.3.4-1/png/png.c **** 
1941:fltk-1.3.4-1/png/png.c **** int /* PRIVATE */
1942:fltk-1.3.4-1/png/png.c **** png_icc_check_header(png_const_structrp png_ptr, png_colorspacerp colorspace,
1943:fltk-1.3.4-1/png/png.c ****    png_const_charp name, png_uint_32 profile_length,
1944:fltk-1.3.4-1/png/png.c ****    png_const_bytep profile/* first 132 bytes only */, int color_type)
1945:fltk-1.3.4-1/png/png.c **** {
1946:fltk-1.3.4-1/png/png.c ****    png_uint_32 temp;
1947:fltk-1.3.4-1/png/png.c **** 
1948:fltk-1.3.4-1/png/png.c ****    /* Length check; this cannot be ignored in this code because profile_length
1949:fltk-1.3.4-1/png/png.c ****     * is used later to check the tag table, so even if the profile seems over
1950:fltk-1.3.4-1/png/png.c ****     * long profile_length from the caller must be correct.  The caller can fix
1951:fltk-1.3.4-1/png/png.c ****     * this up on read or write by just passing in the profile header length.
1952:fltk-1.3.4-1/png/png.c ****     */
1953:fltk-1.3.4-1/png/png.c ****    temp = png_get_uint_32(profile);
1954:fltk-1.3.4-1/png/png.c ****    if (temp != profile_length)
1955:fltk-1.3.4-1/png/png.c ****       return png_icc_profile_error(png_ptr, colorspace, name, temp,
1956:fltk-1.3.4-1/png/png.c ****          "length does not match profile");
1957:fltk-1.3.4-1/png/png.c **** 
1958:fltk-1.3.4-1/png/png.c ****    temp = (png_uint_32) (*(profile+8));
1959:fltk-1.3.4-1/png/png.c ****    if (temp > 3 && (profile_length & 3))
1960:fltk-1.3.4-1/png/png.c ****       return png_icc_profile_error(png_ptr, colorspace, name, profile_length,
1961:fltk-1.3.4-1/png/png.c ****          "invalid length");
1962:fltk-1.3.4-1/png/png.c **** 
1963:fltk-1.3.4-1/png/png.c ****    temp = png_get_uint_32(profile+128); /* tag count: 12 bytes/tag */
1964:fltk-1.3.4-1/png/png.c ****    if (temp > 357913930 || /* (2^32-4-132)/12: maximum possible tag count */
1965:fltk-1.3.4-1/png/png.c ****       profile_length < 132+12*temp) /* truncated tag table */
1966:fltk-1.3.4-1/png/png.c ****       return png_icc_profile_error(png_ptr, colorspace, name, temp,
1967:fltk-1.3.4-1/png/png.c ****          "tag count too large");
1968:fltk-1.3.4-1/png/png.c **** 
1969:fltk-1.3.4-1/png/png.c ****    /* The 'intent' must be valid or we can't store it, ICC limits the intent to
1970:fltk-1.3.4-1/png/png.c ****     * 16 bits.
1971:fltk-1.3.4-1/png/png.c ****     */
1972:fltk-1.3.4-1/png/png.c ****    temp = png_get_uint_32(profile+64);
1973:fltk-1.3.4-1/png/png.c ****    if (temp >= 0xffff) /* The ICC limit */
1974:fltk-1.3.4-1/png/png.c ****       return png_icc_profile_error(png_ptr, colorspace, name, temp,
1975:fltk-1.3.4-1/png/png.c ****          "invalid rendering intent");
1976:fltk-1.3.4-1/png/png.c **** 
1977:fltk-1.3.4-1/png/png.c ****    /* This is just a warning because the profile may be valid in future
1978:fltk-1.3.4-1/png/png.c ****     * versions.
1979:fltk-1.3.4-1/png/png.c ****     */
1980:fltk-1.3.4-1/png/png.c ****    if (temp >= PNG_sRGB_INTENT_LAST)
1981:fltk-1.3.4-1/png/png.c ****       (void)png_icc_profile_error(png_ptr, NULL, name, temp,
1982:fltk-1.3.4-1/png/png.c ****          "intent outside defined range");
1983:fltk-1.3.4-1/png/png.c **** 
1984:fltk-1.3.4-1/png/png.c ****    /* At this point the tag table can't be checked because it hasn't necessarily
1985:fltk-1.3.4-1/png/png.c ****     * been loaded; however, various header fields can be checked.  These checks
1986:fltk-1.3.4-1/png/png.c ****     * are for values permitted by the PNG spec in an ICC profile; the PNG spec
1987:fltk-1.3.4-1/png/png.c ****     * restricts the profiles that can be passed in an iCCP chunk (they must be
1988:fltk-1.3.4-1/png/png.c ****     * appropriate to processing PNG data!)
1989:fltk-1.3.4-1/png/png.c ****     */
1990:fltk-1.3.4-1/png/png.c **** 
1991:fltk-1.3.4-1/png/png.c ****    /* Data checks (could be skipped).  These checks must be independent of the
1992:fltk-1.3.4-1/png/png.c ****     * version number; however, the version number doesn't accomodate changes in
1993:fltk-1.3.4-1/png/png.c ****     * the header fields (just the known tags and the interpretation of the
1994:fltk-1.3.4-1/png/png.c ****     * data.)
1995:fltk-1.3.4-1/png/png.c ****     */
1996:fltk-1.3.4-1/png/png.c ****    temp = png_get_uint_32(profile+36); /* signature 'ascp' */
1997:fltk-1.3.4-1/png/png.c ****    if (temp != 0x61637370)
1998:fltk-1.3.4-1/png/png.c ****       return png_icc_profile_error(png_ptr, colorspace, name, temp,
1999:fltk-1.3.4-1/png/png.c ****          "invalid signature");
2000:fltk-1.3.4-1/png/png.c **** 
2001:fltk-1.3.4-1/png/png.c ****    /* Currently the PCS illuminant/adopted white point (the computational
2002:fltk-1.3.4-1/png/png.c ****     * white point) are required to be D50,
2003:fltk-1.3.4-1/png/png.c ****     * however the profile contains a record of the illuminant so perhaps ICC
2004:fltk-1.3.4-1/png/png.c ****     * expects to be able to change this in the future (despite the rationale in
2005:fltk-1.3.4-1/png/png.c ****     * the introduction for using a fixed PCS adopted white.)  Consequently the
2006:fltk-1.3.4-1/png/png.c ****     * following is just a warning.
2007:fltk-1.3.4-1/png/png.c ****     */
2008:fltk-1.3.4-1/png/png.c ****    if (memcmp(profile+68, D50_nCIEXYZ, 12) != 0)
2009:fltk-1.3.4-1/png/png.c ****       (void)png_icc_profile_error(png_ptr, NULL, name, 0/*no tag value*/,
2010:fltk-1.3.4-1/png/png.c ****          "PCS illuminant is not D50");
2011:fltk-1.3.4-1/png/png.c **** 
2012:fltk-1.3.4-1/png/png.c ****    /* The PNG spec requires this:
2013:fltk-1.3.4-1/png/png.c ****     * "If the iCCP chunk is present, the image samples conform to the colour
2014:fltk-1.3.4-1/png/png.c ****     * space represented by the embedded ICC profile as defined by the
2015:fltk-1.3.4-1/png/png.c ****     * International Color Consortium [ICC]. The colour space of the ICC profile
2016:fltk-1.3.4-1/png/png.c ****     * shall be an RGB colour space for colour images (PNG colour types 2, 3, and
2017:fltk-1.3.4-1/png/png.c ****     * 6), or a greyscale colour space for greyscale images (PNG colour types 0
2018:fltk-1.3.4-1/png/png.c ****     * and 4)."
2019:fltk-1.3.4-1/png/png.c ****     *
2020:fltk-1.3.4-1/png/png.c ****     * This checking code ensures the embedded profile (on either read or write)
2021:fltk-1.3.4-1/png/png.c ****     * conforms to the specification requirements.  Notice that an ICC 'gray'
2022:fltk-1.3.4-1/png/png.c ****     * color-space profile contains the information to transform the monochrome
2023:fltk-1.3.4-1/png/png.c ****     * data to XYZ or L*a*b (according to which PCS the profile uses) and this
2024:fltk-1.3.4-1/png/png.c ****     * should be used in preference to the standard libpng K channel replication
2025:fltk-1.3.4-1/png/png.c ****     * into R, G and B channels.
2026:fltk-1.3.4-1/png/png.c ****     *
2027:fltk-1.3.4-1/png/png.c ****     * Previously it was suggested that an RGB profile on grayscale data could be
2028:fltk-1.3.4-1/png/png.c ****     * handled.  However it it is clear that using an RGB profile in this context
2029:fltk-1.3.4-1/png/png.c ****     * must be an error - there is no specification of what it means.  Thus it is
2030:fltk-1.3.4-1/png/png.c ****     * almost certainly more correct to ignore the profile.
2031:fltk-1.3.4-1/png/png.c ****     */
2032:fltk-1.3.4-1/png/png.c ****    temp = png_get_uint_32(profile+16); /* data colour space field */
2033:fltk-1.3.4-1/png/png.c ****    switch (temp)
2034:fltk-1.3.4-1/png/png.c ****    {
2035:fltk-1.3.4-1/png/png.c ****       case 0x52474220: /* 'RGB ' */
2036:fltk-1.3.4-1/png/png.c ****          if ((color_type & PNG_COLOR_MASK_COLOR) == 0)
2037:fltk-1.3.4-1/png/png.c ****             return png_icc_profile_error(png_ptr, colorspace, name, temp,
2038:fltk-1.3.4-1/png/png.c ****                "RGB color space not permitted on grayscale PNG");
2039:fltk-1.3.4-1/png/png.c ****          break;
2040:fltk-1.3.4-1/png/png.c **** 
2041:fltk-1.3.4-1/png/png.c ****       case 0x47524159: /* 'GRAY' */
2042:fltk-1.3.4-1/png/png.c ****          if ((color_type & PNG_COLOR_MASK_COLOR) != 0)
2043:fltk-1.3.4-1/png/png.c ****             return png_icc_profile_error(png_ptr, colorspace, name, temp,
2044:fltk-1.3.4-1/png/png.c ****                "Gray color space not permitted on RGB PNG");
2045:fltk-1.3.4-1/png/png.c ****          break;
2046:fltk-1.3.4-1/png/png.c **** 
2047:fltk-1.3.4-1/png/png.c ****       default:
2048:fltk-1.3.4-1/png/png.c ****          return png_icc_profile_error(png_ptr, colorspace, name, temp,
2049:fltk-1.3.4-1/png/png.c ****             "invalid ICC profile color space");
2050:fltk-1.3.4-1/png/png.c ****    }
2051:fltk-1.3.4-1/png/png.c **** 
2052:fltk-1.3.4-1/png/png.c ****    /* It is up to the application to check that the profile class matches the
2053:fltk-1.3.4-1/png/png.c ****     * application requirements; the spec provides no guidance, but it's pretty
2054:fltk-1.3.4-1/png/png.c ****     * weird if the profile is not scanner ('scnr'), monitor ('mntr'), printer
2055:fltk-1.3.4-1/png/png.c ****     * ('prtr') or 'spac' (for generic color spaces).  Issue a warning in these
2056:fltk-1.3.4-1/png/png.c ****     * cases.  Issue an error for device link or abstract profiles - these don't
2057:fltk-1.3.4-1/png/png.c ****     * contain the records necessary to transform the color-space to anything
2058:fltk-1.3.4-1/png/png.c ****     * other than the target device (and not even that for an abstract profile).
2059:fltk-1.3.4-1/png/png.c ****     * Profiles of these classes may not be embedded in images.
2060:fltk-1.3.4-1/png/png.c ****     */
2061:fltk-1.3.4-1/png/png.c ****    temp = png_get_uint_32(profile+12); /* profile/device class */
2062:fltk-1.3.4-1/png/png.c ****    switch (temp)
2063:fltk-1.3.4-1/png/png.c ****    {
2064:fltk-1.3.4-1/png/png.c ****       case 0x73636E72: /* 'scnr' */
2065:fltk-1.3.4-1/png/png.c ****       case 0x6D6E7472: /* 'mntr' */
2066:fltk-1.3.4-1/png/png.c ****       case 0x70727472: /* 'prtr' */
2067:fltk-1.3.4-1/png/png.c ****       case 0x73706163: /* 'spac' */
2068:fltk-1.3.4-1/png/png.c ****          /* All supported */
2069:fltk-1.3.4-1/png/png.c ****          break;
2070:fltk-1.3.4-1/png/png.c **** 
2071:fltk-1.3.4-1/png/png.c ****       case 0x61627374: /* 'abst' */
2072:fltk-1.3.4-1/png/png.c ****          /* May not be embedded in an image */
2073:fltk-1.3.4-1/png/png.c ****          return png_icc_profile_error(png_ptr, colorspace, name, temp,
2074:fltk-1.3.4-1/png/png.c ****             "invalid embedded Abstract ICC profile");
2075:fltk-1.3.4-1/png/png.c **** 
2076:fltk-1.3.4-1/png/png.c ****       case 0x6C696E6B: /* 'link' */
2077:fltk-1.3.4-1/png/png.c ****          /* DeviceLink profiles cannot be interpreted in a non-device specific
2078:fltk-1.3.4-1/png/png.c ****           * fashion, if an app uses the AToB0Tag in the profile the results are
2079:fltk-1.3.4-1/png/png.c ****           * undefined unless the result is sent to the intended device,
2080:fltk-1.3.4-1/png/png.c ****           * therefore a DeviceLink profile should not be found embedded in a
2081:fltk-1.3.4-1/png/png.c ****           * PNG.
2082:fltk-1.3.4-1/png/png.c ****           */
2083:fltk-1.3.4-1/png/png.c ****          return png_icc_profile_error(png_ptr, colorspace, name, temp,
2084:fltk-1.3.4-1/png/png.c ****             "unexpected DeviceLink ICC profile class");
2085:fltk-1.3.4-1/png/png.c **** 
2086:fltk-1.3.4-1/png/png.c ****       case 0x6E6D636C: /* 'nmcl' */
2087:fltk-1.3.4-1/png/png.c ****          /* A NamedColor profile is also device specific, however it doesn't
2088:fltk-1.3.4-1/png/png.c ****           * contain an AToB0 tag that is open to misinterpretation.  Almost
2089:fltk-1.3.4-1/png/png.c ****           * certainly it will fail the tests below.
2090:fltk-1.3.4-1/png/png.c ****           */
2091:fltk-1.3.4-1/png/png.c ****          (void)png_icc_profile_error(png_ptr, NULL, name, temp,
2092:fltk-1.3.4-1/png/png.c ****             "unexpected NamedColor ICC profile class");
2093:fltk-1.3.4-1/png/png.c ****          break;
2094:fltk-1.3.4-1/png/png.c **** 
2095:fltk-1.3.4-1/png/png.c ****       default:
2096:fltk-1.3.4-1/png/png.c ****          /* To allow for future enhancements to the profile accept unrecognized
2097:fltk-1.3.4-1/png/png.c ****           * profile classes with a warning, these then hit the test below on the
2098:fltk-1.3.4-1/png/png.c ****           * tag content to ensure they are backward compatible with one of the
2099:fltk-1.3.4-1/png/png.c ****           * understood profiles.
2100:fltk-1.3.4-1/png/png.c ****           */
2101:fltk-1.3.4-1/png/png.c ****          (void)png_icc_profile_error(png_ptr, NULL, name, temp,
2102:fltk-1.3.4-1/png/png.c ****             "unrecognized ICC profile class");
2103:fltk-1.3.4-1/png/png.c ****          break;
2104:fltk-1.3.4-1/png/png.c ****    }
2105:fltk-1.3.4-1/png/png.c **** 
2106:fltk-1.3.4-1/png/png.c ****    /* For any profile other than a device link one the PCS must be encoded
2107:fltk-1.3.4-1/png/png.c ****     * either in XYZ or Lab.
2108:fltk-1.3.4-1/png/png.c ****     */
2109:fltk-1.3.4-1/png/png.c ****    temp = png_get_uint_32(profile+20);
2110:fltk-1.3.4-1/png/png.c ****    switch (temp)
2111:fltk-1.3.4-1/png/png.c ****    {
2112:fltk-1.3.4-1/png/png.c ****       case 0x58595A20: /* 'XYZ ' */
2113:fltk-1.3.4-1/png/png.c ****       case 0x4C616220: /* 'Lab ' */
2114:fltk-1.3.4-1/png/png.c ****          break;
2115:fltk-1.3.4-1/png/png.c **** 
2116:fltk-1.3.4-1/png/png.c ****       default:
2117:fltk-1.3.4-1/png/png.c ****          return png_icc_profile_error(png_ptr, colorspace, name, temp,
2118:fltk-1.3.4-1/png/png.c ****             "unexpected ICC PCS encoding");
2119:fltk-1.3.4-1/png/png.c ****    }
2120:fltk-1.3.4-1/png/png.c **** 
2121:fltk-1.3.4-1/png/png.c ****    return 1;
2122:fltk-1.3.4-1/png/png.c **** }
2123:fltk-1.3.4-1/png/png.c **** 
2124:fltk-1.3.4-1/png/png.c **** int /* PRIVATE */
2125:fltk-1.3.4-1/png/png.c **** png_icc_check_tag_table(png_const_structrp png_ptr, png_colorspacerp colorspace,
2126:fltk-1.3.4-1/png/png.c ****    png_const_charp name, png_uint_32 profile_length,
2127:fltk-1.3.4-1/png/png.c ****    png_const_bytep profile /* header plus whole tag table */)
2128:fltk-1.3.4-1/png/png.c **** {
2129:fltk-1.3.4-1/png/png.c ****    png_uint_32 tag_count = png_get_uint_32(profile+128);
2130:fltk-1.3.4-1/png/png.c ****    png_uint_32 itag;
2131:fltk-1.3.4-1/png/png.c ****    png_const_bytep tag = profile+132; /* The first tag */
2132:fltk-1.3.4-1/png/png.c **** 
2133:fltk-1.3.4-1/png/png.c ****    /* First scan all the tags in the table and add bits to the icc_info value
2134:fltk-1.3.4-1/png/png.c ****     * (temporarily in 'tags').
2135:fltk-1.3.4-1/png/png.c ****     */
2136:fltk-1.3.4-1/png/png.c ****    for (itag=0; itag < tag_count; ++itag, tag += 12)
2137:fltk-1.3.4-1/png/png.c ****    {
2138:fltk-1.3.4-1/png/png.c ****       png_uint_32 tag_id = png_get_uint_32(tag+0);
2139:fltk-1.3.4-1/png/png.c ****       png_uint_32 tag_start = png_get_uint_32(tag+4); /* must be aligned */
2140:fltk-1.3.4-1/png/png.c ****       png_uint_32 tag_length = png_get_uint_32(tag+8);/* not padded */
2141:fltk-1.3.4-1/png/png.c **** 
2142:fltk-1.3.4-1/png/png.c ****       /* The ICC specification does not exclude zero length tags, therefore the
2143:fltk-1.3.4-1/png/png.c ****        * start might actually be anywhere if there is no data, but this would be
2144:fltk-1.3.4-1/png/png.c ****        * a clear abuse of the intent of the standard so the start is checked for
2145:fltk-1.3.4-1/png/png.c ****        * being in range.  All defined tag types have an 8 byte header - a 4 byte
2146:fltk-1.3.4-1/png/png.c ****        * type signature then 0.
2147:fltk-1.3.4-1/png/png.c ****        */
2148:fltk-1.3.4-1/png/png.c ****       if ((tag_start & 3) != 0)
2149:fltk-1.3.4-1/png/png.c ****       {
2150:fltk-1.3.4-1/png/png.c ****          /* CNHP730S.icc shipped with Microsoft Windows 64 violates this, it is
2151:fltk-1.3.4-1/png/png.c ****           * only a warning here because libpng does not care about the
2152:fltk-1.3.4-1/png/png.c ****           * alignment.
2153:fltk-1.3.4-1/png/png.c ****           */
2154:fltk-1.3.4-1/png/png.c ****          (void)png_icc_profile_error(png_ptr, NULL, name, tag_id,
2155:fltk-1.3.4-1/png/png.c ****             "ICC profile tag start not a multiple of 4");
2156:fltk-1.3.4-1/png/png.c ****       }
2157:fltk-1.3.4-1/png/png.c **** 
2158:fltk-1.3.4-1/png/png.c ****       /* This is a hard error; potentially it can cause read outside the
2159:fltk-1.3.4-1/png/png.c ****        * profile.
2160:fltk-1.3.4-1/png/png.c ****        */
2161:fltk-1.3.4-1/png/png.c ****       if (tag_start > profile_length || tag_length > profile_length - tag_start)
2162:fltk-1.3.4-1/png/png.c ****          return png_icc_profile_error(png_ptr, colorspace, name, tag_id,
2163:fltk-1.3.4-1/png/png.c ****             "ICC profile tag outside profile");
2164:fltk-1.3.4-1/png/png.c ****    }
2165:fltk-1.3.4-1/png/png.c **** 
2166:fltk-1.3.4-1/png/png.c ****    return 1; /* success, maybe with warnings */
2167:fltk-1.3.4-1/png/png.c **** }
2168:fltk-1.3.4-1/png/png.c **** 
2169:fltk-1.3.4-1/png/png.c **** #if defined(PNG_sRGB_SUPPORTED) && PNG_sRGB_PROFILE_CHECKS >= 0
2170:fltk-1.3.4-1/png/png.c **** /* Information about the known ICC sRGB profiles */
2171:fltk-1.3.4-1/png/png.c **** static const struct
2172:fltk-1.3.4-1/png/png.c **** {
2173:fltk-1.3.4-1/png/png.c ****    png_uint_32 adler, crc, length;
2174:fltk-1.3.4-1/png/png.c ****    png_uint_32 md5[4];
2175:fltk-1.3.4-1/png/png.c ****    png_byte    have_md5;
2176:fltk-1.3.4-1/png/png.c ****    png_byte    is_broken;
2177:fltk-1.3.4-1/png/png.c ****    png_uint_16 intent;
2178:fltk-1.3.4-1/png/png.c **** 
2179:fltk-1.3.4-1/png/png.c **** #  define PNG_MD5(a,b,c,d) { a, b, c, d }, (a!=0)||(b!=0)||(c!=0)||(d!=0)
2180:fltk-1.3.4-1/png/png.c **** #  define PNG_ICC_CHECKSUM(adler, crc, md5, intent, broke, date, length, fname)\
2181:fltk-1.3.4-1/png/png.c ****       { adler, crc, length, md5, broke, intent },
2182:fltk-1.3.4-1/png/png.c **** 
2183:fltk-1.3.4-1/png/png.c **** } png_sRGB_checks[] =
2184:fltk-1.3.4-1/png/png.c **** {
2185:fltk-1.3.4-1/png/png.c ****    /* This data comes from contrib/tools/checksum-icc run on downloads of
2186:fltk-1.3.4-1/png/png.c ****     * all four ICC sRGB profiles from www.color.org.
2187:fltk-1.3.4-1/png/png.c ****     */
2188:fltk-1.3.4-1/png/png.c ****    /* adler32, crc32, MD5[4], intent, date, length, file-name */
2189:fltk-1.3.4-1/png/png.c ****    PNG_ICC_CHECKSUM(0x0a3fd9f6, 0x3b8772b9,
2190:fltk-1.3.4-1/png/png.c ****       PNG_MD5(0x29f83dde, 0xaff255ae, 0x7842fae4, 0xca83390d), 0, 0,
2191:fltk-1.3.4-1/png/png.c ****       "2009/03/27 21:36:31", 3048, "sRGB_IEC61966-2-1_black_scaled.icc")
2192:fltk-1.3.4-1/png/png.c **** 
2193:fltk-1.3.4-1/png/png.c ****    /* ICC sRGB v2 perceptual no black-compensation: */
2194:fltk-1.3.4-1/png/png.c ****    PNG_ICC_CHECKSUM(0x4909e5e1, 0x427ebb21,
2195:fltk-1.3.4-1/png/png.c ****       PNG_MD5(0xc95bd637, 0xe95d8a3b, 0x0df38f99, 0xc1320389), 1, 0,
2196:fltk-1.3.4-1/png/png.c ****       "2009/03/27 21:37:45", 3052, "sRGB_IEC61966-2-1_no_black_scaling.icc")
2197:fltk-1.3.4-1/png/png.c **** 
2198:fltk-1.3.4-1/png/png.c ****    PNG_ICC_CHECKSUM(0xfd2144a1, 0x306fd8ae,
2199:fltk-1.3.4-1/png/png.c ****       PNG_MD5(0xfc663378, 0x37e2886b, 0xfd72e983, 0x8228f1b8), 0, 0,
2200:fltk-1.3.4-1/png/png.c ****       "2009/08/10 17:28:01", 60988, "sRGB_v4_ICC_preference_displayclass.icc")
2201:fltk-1.3.4-1/png/png.c **** 
2202:fltk-1.3.4-1/png/png.c ****    /* ICC sRGB v4 perceptual */
2203:fltk-1.3.4-1/png/png.c ****    PNG_ICC_CHECKSUM(0x209c35d2, 0xbbef7812,
2204:fltk-1.3.4-1/png/png.c ****       PNG_MD5(0x34562abf, 0x994ccd06, 0x6d2c5721, 0xd0d68c5d), 0, 0,
2205:fltk-1.3.4-1/png/png.c ****       "2007/07/25 00:05:37", 60960, "sRGB_v4_ICC_preference.icc")
2206:fltk-1.3.4-1/png/png.c **** 
2207:fltk-1.3.4-1/png/png.c ****    /* The following profiles have no known MD5 checksum. If there is a match
2208:fltk-1.3.4-1/png/png.c ****     * on the (empty) MD5 the other fields are used to attempt a match and
2209:fltk-1.3.4-1/png/png.c ****     * a warning is produced.  The first two of these profiles have a 'cprt' tag
2210:fltk-1.3.4-1/png/png.c ****     * which suggests that they were also made by Hewlett Packard.
2211:fltk-1.3.4-1/png/png.c ****     */
2212:fltk-1.3.4-1/png/png.c ****    PNG_ICC_CHECKSUM(0xa054d762, 0x5d5129ce,
2213:fltk-1.3.4-1/png/png.c ****       PNG_MD5(0x00000000, 0x00000000, 0x00000000, 0x00000000), 1, 0,
2214:fltk-1.3.4-1/png/png.c ****       "2004/07/21 18:57:42", 3024, "sRGB_IEC61966-2-1_noBPC.icc")
2215:fltk-1.3.4-1/png/png.c **** 
2216:fltk-1.3.4-1/png/png.c ****    /* This is a 'mntr' (display) profile with a mediaWhitePointTag that does not
2217:fltk-1.3.4-1/png/png.c ****     * match the D50 PCS illuminant in the header (it is in fact the D65 values,
2218:fltk-1.3.4-1/png/png.c ****     * so the white point is recorded as the un-adapted value.)  The profiles
2219:fltk-1.3.4-1/png/png.c ****     * below only differ in one byte - the intent - and are basically the same as
2220:fltk-1.3.4-1/png/png.c ****     * the previous profile except for the mediaWhitePointTag error and a missing
2221:fltk-1.3.4-1/png/png.c ****     * chromaticAdaptationTag.
2222:fltk-1.3.4-1/png/png.c ****     */
2223:fltk-1.3.4-1/png/png.c ****    PNG_ICC_CHECKSUM(0xf784f3fb, 0x182ea552,
2224:fltk-1.3.4-1/png/png.c ****       PNG_MD5(0x00000000, 0x00000000, 0x00000000, 0x00000000), 0, 1/*broken*/,
2225:fltk-1.3.4-1/png/png.c ****       "1998/02/09 06:49:00", 3144, "HP-Microsoft sRGB v2 perceptual")
2226:fltk-1.3.4-1/png/png.c **** 
2227:fltk-1.3.4-1/png/png.c ****    PNG_ICC_CHECKSUM(0x0398f3fc, 0xf29e526d,
2228:fltk-1.3.4-1/png/png.c ****       PNG_MD5(0x00000000, 0x00000000, 0x00000000, 0x00000000), 1, 1/*broken*/,
2229:fltk-1.3.4-1/png/png.c ****       "1998/02/09 06:49:00", 3144, "HP-Microsoft sRGB v2 media-relative")
2230:fltk-1.3.4-1/png/png.c **** };
2231:fltk-1.3.4-1/png/png.c **** 
2232:fltk-1.3.4-1/png/png.c **** static int
2233:fltk-1.3.4-1/png/png.c **** png_compare_ICC_profile_with_sRGB(png_const_structrp png_ptr,
2234:fltk-1.3.4-1/png/png.c ****    png_const_bytep profile, uLong adler)
2235:fltk-1.3.4-1/png/png.c **** {
2236:fltk-1.3.4-1/png/png.c ****    /* The quick check is to verify just the MD5 signature and trust the
2237:fltk-1.3.4-1/png/png.c ****     * rest of the data.  Because the profile has already been verified for
2238:fltk-1.3.4-1/png/png.c ****     * correctness this is safe.  png_colorspace_set_sRGB will check the 'intent'
2239:fltk-1.3.4-1/png/png.c ****     * field too, so if the profile has been edited with an intent not defined
2240:fltk-1.3.4-1/png/png.c ****     * by sRGB (but maybe defined by a later ICC specification) the read of
2241:fltk-1.3.4-1/png/png.c ****     * the profile will fail at that point.
2242:fltk-1.3.4-1/png/png.c ****     */
2243:fltk-1.3.4-1/png/png.c **** 
2244:fltk-1.3.4-1/png/png.c ****    png_uint_32 length = 0;
2245:fltk-1.3.4-1/png/png.c ****    png_uint_32 intent = 0x10000; /* invalid */
2246:fltk-1.3.4-1/png/png.c **** #if PNG_sRGB_PROFILE_CHECKS > 1
2247:fltk-1.3.4-1/png/png.c ****    uLong crc = 0; /* the value for 0 length data */
2248:fltk-1.3.4-1/png/png.c **** #endif
2249:fltk-1.3.4-1/png/png.c ****    unsigned int i;
2250:fltk-1.3.4-1/png/png.c **** 
2251:fltk-1.3.4-1/png/png.c **** #ifdef PNG_SET_OPTION_SUPPORTED
2252:fltk-1.3.4-1/png/png.c ****    /* First see if PNG_SKIP_sRGB_CHECK_PROFILE has been set to "on" */
2253:fltk-1.3.4-1/png/png.c ****    if (((png_ptr->options >> PNG_SKIP_sRGB_CHECK_PROFILE) & 3) ==
2254:fltk-1.3.4-1/png/png.c ****                PNG_OPTION_ON)
2255:fltk-1.3.4-1/png/png.c ****       return 0;
2256:fltk-1.3.4-1/png/png.c **** #endif
2257:fltk-1.3.4-1/png/png.c **** 
2258:fltk-1.3.4-1/png/png.c ****    for (i=0; i < (sizeof png_sRGB_checks) / (sizeof png_sRGB_checks[0]); ++i)
2259:fltk-1.3.4-1/png/png.c ****    {
2260:fltk-1.3.4-1/png/png.c ****       if (png_get_uint_32(profile+84) == png_sRGB_checks[i].md5[0] &&
2261:fltk-1.3.4-1/png/png.c ****          png_get_uint_32(profile+88) == png_sRGB_checks[i].md5[1] &&
2262:fltk-1.3.4-1/png/png.c ****          png_get_uint_32(profile+92) == png_sRGB_checks[i].md5[2] &&
2263:fltk-1.3.4-1/png/png.c ****          png_get_uint_32(profile+96) == png_sRGB_checks[i].md5[3])
2264:fltk-1.3.4-1/png/png.c ****       {
2265:fltk-1.3.4-1/png/png.c ****          /* This may be one of the old HP profiles without an MD5, in that
2266:fltk-1.3.4-1/png/png.c ****           * case we can only use the length and Adler32 (note that these
2267:fltk-1.3.4-1/png/png.c ****           * are not used by default if there is an MD5!)
2268:fltk-1.3.4-1/png/png.c ****           */
2269:fltk-1.3.4-1/png/png.c **** #        if PNG_sRGB_PROFILE_CHECKS == 0
2270:fltk-1.3.4-1/png/png.c ****             if (png_sRGB_checks[i].have_md5 != 0)
2271:fltk-1.3.4-1/png/png.c ****                return 1+png_sRGB_checks[i].is_broken;
2272:fltk-1.3.4-1/png/png.c **** #        endif
2273:fltk-1.3.4-1/png/png.c **** 
2274:fltk-1.3.4-1/png/png.c ****          /* Profile is unsigned or more checks have been configured in. */
2275:fltk-1.3.4-1/png/png.c ****          if (length == 0)
2276:fltk-1.3.4-1/png/png.c ****          {
2277:fltk-1.3.4-1/png/png.c ****             length = png_get_uint_32(profile);
2278:fltk-1.3.4-1/png/png.c ****             intent = png_get_uint_32(profile+64);
2279:fltk-1.3.4-1/png/png.c ****          }
2280:fltk-1.3.4-1/png/png.c **** 
2281:fltk-1.3.4-1/png/png.c ****          /* Length *and* intent must match */
2282:fltk-1.3.4-1/png/png.c ****          if (length == png_sRGB_checks[i].length &&
2283:fltk-1.3.4-1/png/png.c ****             intent == png_sRGB_checks[i].intent)
2284:fltk-1.3.4-1/png/png.c ****          {
2285:fltk-1.3.4-1/png/png.c ****             /* Now calculate the adler32 if not done already. */
2286:fltk-1.3.4-1/png/png.c ****             if (adler == 0)
2287:fltk-1.3.4-1/png/png.c ****             {
2288:fltk-1.3.4-1/png/png.c ****                adler = adler32(0, NULL, 0);
2289:fltk-1.3.4-1/png/png.c ****                adler = adler32(adler, profile, length);
2290:fltk-1.3.4-1/png/png.c ****             }
2291:fltk-1.3.4-1/png/png.c **** 
2292:fltk-1.3.4-1/png/png.c ****             if (adler == png_sRGB_checks[i].adler)
2293:fltk-1.3.4-1/png/png.c ****             {
2294:fltk-1.3.4-1/png/png.c ****                /* These basic checks suggest that the data has not been
2295:fltk-1.3.4-1/png/png.c ****                 * modified, but if the check level is more than 1 perform
2296:fltk-1.3.4-1/png/png.c ****                 * our own crc32 checksum on the data.
2297:fltk-1.3.4-1/png/png.c ****                 */
2298:fltk-1.3.4-1/png/png.c **** #              if PNG_sRGB_PROFILE_CHECKS > 1
2299:fltk-1.3.4-1/png/png.c ****                   if (crc == 0)
2300:fltk-1.3.4-1/png/png.c ****                   {
2301:fltk-1.3.4-1/png/png.c ****                      crc = crc32(0, NULL, 0);
2302:fltk-1.3.4-1/png/png.c ****                      crc = crc32(crc, profile, length);
2303:fltk-1.3.4-1/png/png.c ****                   }
2304:fltk-1.3.4-1/png/png.c **** 
2305:fltk-1.3.4-1/png/png.c ****                   /* So this check must pass for the 'return' below to happen.
2306:fltk-1.3.4-1/png/png.c ****                    */
2307:fltk-1.3.4-1/png/png.c ****                   if (crc == png_sRGB_checks[i].crc)
2308:fltk-1.3.4-1/png/png.c **** #              endif
2309:fltk-1.3.4-1/png/png.c ****                {
2310:fltk-1.3.4-1/png/png.c ****                   if (png_sRGB_checks[i].is_broken != 0)
2311:fltk-1.3.4-1/png/png.c ****                   {
2312:fltk-1.3.4-1/png/png.c ****                      /* These profiles are known to have bad data that may cause
2313:fltk-1.3.4-1/png/png.c ****                       * problems if they are used, therefore attempt to
2314:fltk-1.3.4-1/png/png.c ****                       * discourage their use, skip the 'have_md5' warning below,
2315:fltk-1.3.4-1/png/png.c ****                       * which is made irrelevant by this error.
2316:fltk-1.3.4-1/png/png.c ****                       */
2317:fltk-1.3.4-1/png/png.c ****                      png_chunk_report(png_ptr, "known incorrect sRGB profile",
2318:fltk-1.3.4-1/png/png.c ****                         PNG_CHUNK_ERROR);
2319:fltk-1.3.4-1/png/png.c ****                   }
2320:fltk-1.3.4-1/png/png.c **** 
2321:fltk-1.3.4-1/png/png.c ****                   /* Warn that this being done; this isn't even an error since
2322:fltk-1.3.4-1/png/png.c ****                    * the profile is perfectly valid, but it would be nice if
2323:fltk-1.3.4-1/png/png.c ****                    * people used the up-to-date ones.
2324:fltk-1.3.4-1/png/png.c ****                    */
2325:fltk-1.3.4-1/png/png.c ****                   else if (png_sRGB_checks[i].have_md5 == 0)
2326:fltk-1.3.4-1/png/png.c ****                   {
2327:fltk-1.3.4-1/png/png.c ****                      png_chunk_report(png_ptr, "out-of-date sRGB profile with"
2328:fltk-1.3.4-1/png/png.c ****                         " no signature",
2329:fltk-1.3.4-1/png/png.c ****                         PNG_CHUNK_WARNING);
2330:fltk-1.3.4-1/png/png.c ****                   }
2331:fltk-1.3.4-1/png/png.c **** 
2332:fltk-1.3.4-1/png/png.c ****                   return 1+png_sRGB_checks[i].is_broken;
2333:fltk-1.3.4-1/png/png.c ****                }
2334:fltk-1.3.4-1/png/png.c ****             }
2335:fltk-1.3.4-1/png/png.c **** 
2336:fltk-1.3.4-1/png/png.c **** # if PNG_sRGB_PROFILE_CHECKS > 0
2337:fltk-1.3.4-1/png/png.c ****          /* The signature matched, but the profile had been changed in some
2338:fltk-1.3.4-1/png/png.c ****           * way.  This probably indicates a data error or uninformed hacking.
2339:fltk-1.3.4-1/png/png.c ****           * Fall through to "no match".
2340:fltk-1.3.4-1/png/png.c ****           */
2341:fltk-1.3.4-1/png/png.c ****          png_chunk_report(png_ptr, "Not recognizing known sRGB profile that"
2342:fltk-1.3.4-1/png/png.c ****              " has been edited", 
2343:fltk-1.3.4-1/png/png.c ****              PNG_CHUNK_WARNING);
2344:fltk-1.3.4-1/png/png.c ****          break;
2345:fltk-1.3.4-1/png/png.c **** # endif
2346:fltk-1.3.4-1/png/png.c ****          }
2347:fltk-1.3.4-1/png/png.c ****       }
2348:fltk-1.3.4-1/png/png.c ****    }
2349:fltk-1.3.4-1/png/png.c **** 
2350:fltk-1.3.4-1/png/png.c ****    return 0; /* no match */
2351:fltk-1.3.4-1/png/png.c **** }
2352:fltk-1.3.4-1/png/png.c **** #endif
2353:fltk-1.3.4-1/png/png.c **** 
2354:fltk-1.3.4-1/png/png.c **** #ifdef PNG_sRGB_SUPPORTED
2355:fltk-1.3.4-1/png/png.c **** void /* PRIVATE */
2356:fltk-1.3.4-1/png/png.c **** png_icc_set_sRGB(png_const_structrp png_ptr,
2357:fltk-1.3.4-1/png/png.c ****    png_colorspacerp colorspace, png_const_bytep profile, uLong adler)
2358:fltk-1.3.4-1/png/png.c **** {
2359:fltk-1.3.4-1/png/png.c ****    /* Is this profile one of the known ICC sRGB profiles?  If it is, just set
2360:fltk-1.3.4-1/png/png.c ****     * the sRGB information.
2361:fltk-1.3.4-1/png/png.c ****     */
2362:fltk-1.3.4-1/png/png.c **** #if PNG_sRGB_PROFILE_CHECKS >= 0
2363:fltk-1.3.4-1/png/png.c ****    if (png_compare_ICC_profile_with_sRGB(png_ptr, profile, adler) != 0)
2364:fltk-1.3.4-1/png/png.c **** #endif
2365:fltk-1.3.4-1/png/png.c ****       (void)png_colorspace_set_sRGB(png_ptr, colorspace,
2366:fltk-1.3.4-1/png/png.c ****          (int)/*already checked*/png_get_uint_32(profile+64));
2367:fltk-1.3.4-1/png/png.c **** }
2368:fltk-1.3.4-1/png/png.c **** #endif /* READ_sRGB */
2369:fltk-1.3.4-1/png/png.c **** 
2370:fltk-1.3.4-1/png/png.c **** int /* PRIVATE */
2371:fltk-1.3.4-1/png/png.c **** png_colorspace_set_ICC(png_const_structrp png_ptr, png_colorspacerp colorspace,
2372:fltk-1.3.4-1/png/png.c ****    png_const_charp name, png_uint_32 profile_length, png_const_bytep profile,
2373:fltk-1.3.4-1/png/png.c ****    int color_type)
2374:fltk-1.3.4-1/png/png.c **** {
2375:fltk-1.3.4-1/png/png.c ****    if ((colorspace->flags & PNG_COLORSPACE_INVALID) != 0)
2376:fltk-1.3.4-1/png/png.c ****       return 0;
2377:fltk-1.3.4-1/png/png.c **** 
2378:fltk-1.3.4-1/png/png.c ****    if (png_icc_check_length(png_ptr, colorspace, name, profile_length) != 0 &&
2379:fltk-1.3.4-1/png/png.c ****        png_icc_check_header(png_ptr, colorspace, name, profile_length, profile,
2380:fltk-1.3.4-1/png/png.c ****           color_type) != 0 &&
2381:fltk-1.3.4-1/png/png.c ****        png_icc_check_tag_table(png_ptr, colorspace, name, profile_length,
2382:fltk-1.3.4-1/png/png.c ****           profile) != 0)
2383:fltk-1.3.4-1/png/png.c ****    {
2384:fltk-1.3.4-1/png/png.c **** #     ifdef PNG_sRGB_SUPPORTED
2385:fltk-1.3.4-1/png/png.c ****          /* If no sRGB support, don't try storing sRGB information */
2386:fltk-1.3.4-1/png/png.c ****          png_icc_set_sRGB(png_ptr, colorspace, profile, 0);
2387:fltk-1.3.4-1/png/png.c **** #     endif
2388:fltk-1.3.4-1/png/png.c ****       return 1;
2389:fltk-1.3.4-1/png/png.c ****    }
2390:fltk-1.3.4-1/png/png.c **** 
2391:fltk-1.3.4-1/png/png.c ****    /* Failure case */
2392:fltk-1.3.4-1/png/png.c ****    return 0;
2393:fltk-1.3.4-1/png/png.c **** }
2394:fltk-1.3.4-1/png/png.c **** #endif /* iCCP */
2395:fltk-1.3.4-1/png/png.c **** 
2396:fltk-1.3.4-1/png/png.c **** #ifdef PNG_READ_RGB_TO_GRAY_SUPPORTED
2397:fltk-1.3.4-1/png/png.c **** void /* PRIVATE */
2398:fltk-1.3.4-1/png/png.c **** png_colorspace_set_rgb_coefficients(png_structrp png_ptr)
2399:fltk-1.3.4-1/png/png.c **** {
2400:fltk-1.3.4-1/png/png.c ****    /* Set the rgb_to_gray coefficients from the colorspace. */
2401:fltk-1.3.4-1/png/png.c ****    if (png_ptr->rgb_to_gray_coefficients_set == 0 &&
2402:fltk-1.3.4-1/png/png.c ****       (png_ptr->colorspace.flags & PNG_COLORSPACE_HAVE_ENDPOINTS) != 0)
2403:fltk-1.3.4-1/png/png.c ****    {
2404:fltk-1.3.4-1/png/png.c ****       /* png_set_background has not been called, get the coefficients from the Y
2405:fltk-1.3.4-1/png/png.c ****        * values of the colorspace colorants.
2406:fltk-1.3.4-1/png/png.c ****        */
2407:fltk-1.3.4-1/png/png.c ****       png_fixed_point r = png_ptr->colorspace.end_points_XYZ.red_Y;
2408:fltk-1.3.4-1/png/png.c ****       png_fixed_point g = png_ptr->colorspace.end_points_XYZ.green_Y;
2409:fltk-1.3.4-1/png/png.c ****       png_fixed_point b = png_ptr->colorspace.end_points_XYZ.blue_Y;
2410:fltk-1.3.4-1/png/png.c ****       png_fixed_point total = r+g+b;
2411:fltk-1.3.4-1/png/png.c **** 
2412:fltk-1.3.4-1/png/png.c ****       if (total > 0 &&
2413:fltk-1.3.4-1/png/png.c ****          r >= 0 && png_muldiv(&r, r, 32768, total) && r >= 0 && r <= 32768 &&
2414:fltk-1.3.4-1/png/png.c ****          g >= 0 && png_muldiv(&g, g, 32768, total) && g >= 0 && g <= 32768 &&
2415:fltk-1.3.4-1/png/png.c ****          b >= 0 && png_muldiv(&b, b, 32768, total) && b >= 0 && b <= 32768 &&
2416:fltk-1.3.4-1/png/png.c ****          r+g+b <= 32769)
2417:fltk-1.3.4-1/png/png.c ****       {
2418:fltk-1.3.4-1/png/png.c ****          /* We allow 0 coefficients here.  r+g+b may be 32769 if two or
2419:fltk-1.3.4-1/png/png.c ****           * all of the coefficients were rounded up.  Handle this by
2420:fltk-1.3.4-1/png/png.c ****           * reducing the *largest* coefficient by 1; this matches the
2421:fltk-1.3.4-1/png/png.c ****           * approach used for the default coefficients in pngrtran.c
2422:fltk-1.3.4-1/png/png.c ****           */
2423:fltk-1.3.4-1/png/png.c ****          int add = 0;
2424:fltk-1.3.4-1/png/png.c **** 
2425:fltk-1.3.4-1/png/png.c ****          if (r+g+b > 32768)
2426:fltk-1.3.4-1/png/png.c ****             add = -1;
2427:fltk-1.3.4-1/png/png.c ****          else if (r+g+b < 32768)
2428:fltk-1.3.4-1/png/png.c ****             add = 1;
2429:fltk-1.3.4-1/png/png.c **** 
2430:fltk-1.3.4-1/png/png.c ****          if (add != 0)
2431:fltk-1.3.4-1/png/png.c ****          {
2432:fltk-1.3.4-1/png/png.c ****             if (g >= r && g >= b)
2433:fltk-1.3.4-1/png/png.c ****                g += add;
2434:fltk-1.3.4-1/png/png.c ****             else if (r >= g && r >= b)
2435:fltk-1.3.4-1/png/png.c ****                r += add;
2436:fltk-1.3.4-1/png/png.c ****             else
2437:fltk-1.3.4-1/png/png.c ****                b += add;
2438:fltk-1.3.4-1/png/png.c ****          }
2439:fltk-1.3.4-1/png/png.c **** 
2440:fltk-1.3.4-1/png/png.c ****          /* Check for an internal error. */
2441:fltk-1.3.4-1/png/png.c ****          if (r+g+b != 32768)
2442:fltk-1.3.4-1/png/png.c ****             png_error(png_ptr,
2443:fltk-1.3.4-1/png/png.c ****                "internal error handling cHRM coefficients");
2444:fltk-1.3.4-1/png/png.c **** 
2445:fltk-1.3.4-1/png/png.c ****          else
2446:fltk-1.3.4-1/png/png.c ****          {
2447:fltk-1.3.4-1/png/png.c ****             png_ptr->rgb_to_gray_red_coeff   = (png_uint_16)r;
2448:fltk-1.3.4-1/png/png.c ****             png_ptr->rgb_to_gray_green_coeff = (png_uint_16)g;
2449:fltk-1.3.4-1/png/png.c ****          }
2450:fltk-1.3.4-1/png/png.c ****       }
2451:fltk-1.3.4-1/png/png.c **** 
2452:fltk-1.3.4-1/png/png.c ****       /* This is a png_error at present even though it could be ignored -
2453:fltk-1.3.4-1/png/png.c ****        * it should never happen, but it is important that if it does, the
2454:fltk-1.3.4-1/png/png.c ****        * bug is fixed.
2455:fltk-1.3.4-1/png/png.c ****        */
2456:fltk-1.3.4-1/png/png.c ****       else
2457:fltk-1.3.4-1/png/png.c ****          png_error(png_ptr, "internal error handling cHRM->XYZ");
2458:fltk-1.3.4-1/png/png.c ****    }
2459:fltk-1.3.4-1/png/png.c **** }
2460:fltk-1.3.4-1/png/png.c **** #endif
2461:fltk-1.3.4-1/png/png.c **** 
2462:fltk-1.3.4-1/png/png.c **** #endif /* COLORSPACE */
2463:fltk-1.3.4-1/png/png.c **** 
2464:fltk-1.3.4-1/png/png.c **** #ifdef __GNUC__
2465:fltk-1.3.4-1/png/png.c **** /* This exists solely to work round a warning from GNU C. */
2466:fltk-1.3.4-1/png/png.c **** static int /* PRIVATE */
2467:fltk-1.3.4-1/png/png.c **** png_gt(size_t a, size_t b)
2468:fltk-1.3.4-1/png/png.c **** {
2469:fltk-1.3.4-1/png/png.c ****     return a > b;
2470:fltk-1.3.4-1/png/png.c **** }
2471:fltk-1.3.4-1/png/png.c **** #else
2472:fltk-1.3.4-1/png/png.c **** #   define png_gt(a,b) ((a) > (b))
2473:fltk-1.3.4-1/png/png.c **** #endif
2474:fltk-1.3.4-1/png/png.c **** 
2475:fltk-1.3.4-1/png/png.c **** void /* PRIVATE */
2476:fltk-1.3.4-1/png/png.c **** png_check_IHDR(png_const_structrp png_ptr,
2477:fltk-1.3.4-1/png/png.c ****    png_uint_32 width, png_uint_32 height, int bit_depth,
2478:fltk-1.3.4-1/png/png.c ****    int color_type, int interlace_type, int compression_type,
2479:fltk-1.3.4-1/png/png.c ****    int filter_type)
2480:fltk-1.3.4-1/png/png.c **** {
2481:fltk-1.3.4-1/png/png.c ****    int error = 0;
2482:fltk-1.3.4-1/png/png.c **** 
2483:fltk-1.3.4-1/png/png.c ****    /* Check for width and height valid values */
2484:fltk-1.3.4-1/png/png.c ****    if (width == 0)
2485:fltk-1.3.4-1/png/png.c ****    {
2486:fltk-1.3.4-1/png/png.c ****       png_warning(png_ptr, "Image width is zero in IHDR");
2487:fltk-1.3.4-1/png/png.c ****       error = 1;
2488:fltk-1.3.4-1/png/png.c ****    }
2489:fltk-1.3.4-1/png/png.c ****    else if (width > PNG_UINT_31_MAX)
2490:fltk-1.3.4-1/png/png.c ****    {
2491:fltk-1.3.4-1/png/png.c ****       png_warning(png_ptr, "Invalid image width in IHDR");
2492:fltk-1.3.4-1/png/png.c ****       error = 1;
2493:fltk-1.3.4-1/png/png.c ****    }
2494:fltk-1.3.4-1/png/png.c **** 
2495:fltk-1.3.4-1/png/png.c ****    else if (png_gt(width,
2496:fltk-1.3.4-1/png/png.c ****                    (PNG_SIZE_MAX >> 3) /* 8-byte RGBA pixels */
2497:fltk-1.3.4-1/png/png.c ****                    - 48                /* big_row_buf hack */
2498:fltk-1.3.4-1/png/png.c ****                    - 1                 /* filter byte */
2499:fltk-1.3.4-1/png/png.c ****                    - 7*8               /* rounding width to multiple of 8 pix */
2500:fltk-1.3.4-1/png/png.c ****                    - 8))               /* extra max_pixel_depth pad */
2501:fltk-1.3.4-1/png/png.c ****    {
2502:fltk-1.3.4-1/png/png.c ****       /* The size of the row must be within the limits of this architecture.
2503:fltk-1.3.4-1/png/png.c ****        * Because the read code can perform arbitrary transformations the
2504:fltk-1.3.4-1/png/png.c ****        * maximum size is checked here.  Because the code in png_read_start_row
2505:fltk-1.3.4-1/png/png.c ****        * adds extra space "for safety's sake" in several places a conservative
2506:fltk-1.3.4-1/png/png.c ****        * limit is used here.
2507:fltk-1.3.4-1/png/png.c ****        *
2508:fltk-1.3.4-1/png/png.c ****        * NOTE: it would be far better to check the size that is actually used,
2509:fltk-1.3.4-1/png/png.c ****        * but the effect in the real world is minor and the changes are more
2510:fltk-1.3.4-1/png/png.c ****        * extensive, therefore much more dangerous and much more difficult to
2511:fltk-1.3.4-1/png/png.c ****        * write in a way that avoids compiler warnings.
2512:fltk-1.3.4-1/png/png.c ****        */
2513:fltk-1.3.4-1/png/png.c ****       png_warning(png_ptr, "Image width is too large for this architecture");
2514:fltk-1.3.4-1/png/png.c ****       error = 1;
2515:fltk-1.3.4-1/png/png.c ****    }
2516:fltk-1.3.4-1/png/png.c ****    else
2517:fltk-1.3.4-1/png/png.c ****    {
2518:fltk-1.3.4-1/png/png.c **** #     ifdef PNG_SET_USER_LIMITS_SUPPORTED
2519:fltk-1.3.4-1/png/png.c ****       if (width > png_ptr->user_width_max)
2520:fltk-1.3.4-1/png/png.c **** #     else
2521:fltk-1.3.4-1/png/png.c ****       if (width > PNG_USER_WIDTH_MAX)
2522:fltk-1.3.4-1/png/png.c **** #     endif
2523:fltk-1.3.4-1/png/png.c ****       {
2524:fltk-1.3.4-1/png/png.c ****          png_warning(png_ptr, "Image width exceeds user limit in IHDR");
2525:fltk-1.3.4-1/png/png.c ****          error = 1;
2526:fltk-1.3.4-1/png/png.c ****       }
2527:fltk-1.3.4-1/png/png.c ****    }
2528:fltk-1.3.4-1/png/png.c **** 
2529:fltk-1.3.4-1/png/png.c ****    if (height == 0)
2530:fltk-1.3.4-1/png/png.c ****    {
2531:fltk-1.3.4-1/png/png.c ****       png_warning(png_ptr, "Image height is zero in IHDR");
2532:fltk-1.3.4-1/png/png.c ****       error = 1;
2533:fltk-1.3.4-1/png/png.c ****    }
2534:fltk-1.3.4-1/png/png.c ****    else if (height > PNG_UINT_31_MAX)
2535:fltk-1.3.4-1/png/png.c ****    {
2536:fltk-1.3.4-1/png/png.c ****       png_warning(png_ptr, "Invalid image height in IHDR");
2537:fltk-1.3.4-1/png/png.c ****       error = 1;
2538:fltk-1.3.4-1/png/png.c ****    }
2539:fltk-1.3.4-1/png/png.c ****    else
2540:fltk-1.3.4-1/png/png.c ****    {
2541:fltk-1.3.4-1/png/png.c **** #     ifdef PNG_SET_USER_LIMITS_SUPPORTED
2542:fltk-1.3.4-1/png/png.c ****       if (height > png_ptr->user_height_max)
2543:fltk-1.3.4-1/png/png.c **** #     else
2544:fltk-1.3.4-1/png/png.c ****       if (height > PNG_USER_HEIGHT_MAX)
2545:fltk-1.3.4-1/png/png.c **** #     endif
2546:fltk-1.3.4-1/png/png.c ****       {
2547:fltk-1.3.4-1/png/png.c ****          png_warning(png_ptr, "Image height exceeds user limit in IHDR");
2548:fltk-1.3.4-1/png/png.c ****          error = 1;
2549:fltk-1.3.4-1/png/png.c ****       }
2550:fltk-1.3.4-1/png/png.c ****    }
2551:fltk-1.3.4-1/png/png.c **** 
2552:fltk-1.3.4-1/png/png.c ****    /* Check other values */
2553:fltk-1.3.4-1/png/png.c ****    if (bit_depth != 1 && bit_depth != 2 && bit_depth != 4 &&
2554:fltk-1.3.4-1/png/png.c ****        bit_depth != 8 && bit_depth != 16)
2555:fltk-1.3.4-1/png/png.c ****    {
2556:fltk-1.3.4-1/png/png.c ****       png_warning(png_ptr, "Invalid bit depth in IHDR");
2557:fltk-1.3.4-1/png/png.c ****       error = 1;
2558:fltk-1.3.4-1/png/png.c ****    }
2559:fltk-1.3.4-1/png/png.c **** 
2560:fltk-1.3.4-1/png/png.c ****    if (color_type < 0 || color_type == 1 ||
2561:fltk-1.3.4-1/png/png.c ****        color_type == 5 || color_type > 6)
2562:fltk-1.3.4-1/png/png.c ****    {
2563:fltk-1.3.4-1/png/png.c ****       png_warning(png_ptr, "Invalid color type in IHDR");
2564:fltk-1.3.4-1/png/png.c ****       error = 1;
2565:fltk-1.3.4-1/png/png.c ****    }
2566:fltk-1.3.4-1/png/png.c **** 
2567:fltk-1.3.4-1/png/png.c ****    if (((color_type == PNG_COLOR_TYPE_PALETTE) && bit_depth > 8) ||
2568:fltk-1.3.4-1/png/png.c ****        ((color_type == PNG_COLOR_TYPE_RGB ||
2569:fltk-1.3.4-1/png/png.c ****          color_type == PNG_COLOR_TYPE_GRAY_ALPHA ||
2570:fltk-1.3.4-1/png/png.c ****          color_type == PNG_COLOR_TYPE_RGB_ALPHA) && bit_depth < 8))
2571:fltk-1.3.4-1/png/png.c ****    {
2572:fltk-1.3.4-1/png/png.c ****       png_warning(png_ptr, "Invalid color type/bit depth combination in IHDR");
2573:fltk-1.3.4-1/png/png.c ****       error = 1;
2574:fltk-1.3.4-1/png/png.c ****    }
2575:fltk-1.3.4-1/png/png.c **** 
2576:fltk-1.3.4-1/png/png.c ****    if (interlace_type >= PNG_INTERLACE_LAST)
2577:fltk-1.3.4-1/png/png.c ****    {
2578:fltk-1.3.4-1/png/png.c ****       png_warning(png_ptr, "Unknown interlace method in IHDR");
2579:fltk-1.3.4-1/png/png.c ****       error = 1;
2580:fltk-1.3.4-1/png/png.c ****    }
2581:fltk-1.3.4-1/png/png.c **** 
2582:fltk-1.3.4-1/png/png.c ****    if (compression_type != PNG_COMPRESSION_TYPE_BASE)
2583:fltk-1.3.4-1/png/png.c ****    {
2584:fltk-1.3.4-1/png/png.c ****       png_warning(png_ptr, "Unknown compression method in IHDR");
2585:fltk-1.3.4-1/png/png.c ****       error = 1;
2586:fltk-1.3.4-1/png/png.c ****    }
2587:fltk-1.3.4-1/png/png.c **** 
2588:fltk-1.3.4-1/png/png.c **** #  ifdef PNG_MNG_FEATURES_SUPPORTED
2589:fltk-1.3.4-1/png/png.c ****    /* Accept filter_method 64 (intrapixel differencing) only if
2590:fltk-1.3.4-1/png/png.c ****     * 1. Libpng was compiled with PNG_MNG_FEATURES_SUPPORTED and
2591:fltk-1.3.4-1/png/png.c ****     * 2. Libpng did not read a PNG signature (this filter_method is only
2592:fltk-1.3.4-1/png/png.c ****     *    used in PNG datastreams that are embedded in MNG datastreams) and
2593:fltk-1.3.4-1/png/png.c ****     * 3. The application called png_permit_mng_features with a mask that
2594:fltk-1.3.4-1/png/png.c ****     *    included PNG_FLAG_MNG_FILTER_64 and
2595:fltk-1.3.4-1/png/png.c ****     * 4. The filter_method is 64 and
2596:fltk-1.3.4-1/png/png.c ****     * 5. The color_type is RGB or RGBA
2597:fltk-1.3.4-1/png/png.c ****     */
2598:fltk-1.3.4-1/png/png.c ****    if ((png_ptr->mode & PNG_HAVE_PNG_SIGNATURE) != 0 &&
2599:fltk-1.3.4-1/png/png.c ****        png_ptr->mng_features_permitted != 0)
2600:fltk-1.3.4-1/png/png.c ****       png_warning(png_ptr, "MNG features are not allowed in a PNG datastream");
2601:fltk-1.3.4-1/png/png.c **** 
2602:fltk-1.3.4-1/png/png.c ****    if (filter_type != PNG_FILTER_TYPE_BASE)
2603:fltk-1.3.4-1/png/png.c ****    {
2604:fltk-1.3.4-1/png/png.c ****       if (!((png_ptr->mng_features_permitted & PNG_FLAG_MNG_FILTER_64) != 0 &&
2605:fltk-1.3.4-1/png/png.c ****           (filter_type == PNG_INTRAPIXEL_DIFFERENCING) &&
2606:fltk-1.3.4-1/png/png.c ****           ((png_ptr->mode & PNG_HAVE_PNG_SIGNATURE) == 0) &&
2607:fltk-1.3.4-1/png/png.c ****           (color_type == PNG_COLOR_TYPE_RGB ||
2608:fltk-1.3.4-1/png/png.c ****           color_type == PNG_COLOR_TYPE_RGB_ALPHA)))
2609:fltk-1.3.4-1/png/png.c ****       {
2610:fltk-1.3.4-1/png/png.c ****          png_warning(png_ptr, "Unknown filter method in IHDR");
2611:fltk-1.3.4-1/png/png.c ****          error = 1;
2612:fltk-1.3.4-1/png/png.c ****       }
2613:fltk-1.3.4-1/png/png.c **** 
2614:fltk-1.3.4-1/png/png.c ****       if ((png_ptr->mode & PNG_HAVE_PNG_SIGNATURE) != 0)
2615:fltk-1.3.4-1/png/png.c ****       {
2616:fltk-1.3.4-1/png/png.c ****          png_warning(png_ptr, "Invalid filter method in IHDR");
2617:fltk-1.3.4-1/png/png.c ****          error = 1;
2618:fltk-1.3.4-1/png/png.c ****       }
2619:fltk-1.3.4-1/png/png.c ****    }
2620:fltk-1.3.4-1/png/png.c **** 
2621:fltk-1.3.4-1/png/png.c **** #  else
2622:fltk-1.3.4-1/png/png.c ****    if (filter_type != PNG_FILTER_TYPE_BASE)
2623:fltk-1.3.4-1/png/png.c ****    {
2624:fltk-1.3.4-1/png/png.c ****       png_warning(png_ptr, "Unknown filter method in IHDR");
2625:fltk-1.3.4-1/png/png.c ****       error = 1;
2626:fltk-1.3.4-1/png/png.c ****    }
2627:fltk-1.3.4-1/png/png.c **** #  endif
2628:fltk-1.3.4-1/png/png.c **** 
2629:fltk-1.3.4-1/png/png.c ****    if (error == 1)
2630:fltk-1.3.4-1/png/png.c ****       png_error(png_ptr, "Invalid IHDR data");
2631:fltk-1.3.4-1/png/png.c **** }
2632:fltk-1.3.4-1/png/png.c **** 
2633:fltk-1.3.4-1/png/png.c **** #if defined(PNG_sCAL_SUPPORTED) || defined(PNG_pCAL_SUPPORTED)
2634:fltk-1.3.4-1/png/png.c **** /* ASCII to fp functions */
2635:fltk-1.3.4-1/png/png.c **** /* Check an ASCII formated floating point value, see the more detailed
2636:fltk-1.3.4-1/png/png.c ****  * comments in pngpriv.h
2637:fltk-1.3.4-1/png/png.c ****  */
2638:fltk-1.3.4-1/png/png.c **** /* The following is used internally to preserve the sticky flags */
2639:fltk-1.3.4-1/png/png.c **** #define png_fp_add(state, flags) ((state) |= (flags))
2640:fltk-1.3.4-1/png/png.c **** #define png_fp_set(state, value) ((state) = (value) | ((state) & PNG_FP_STICKY))
2641:fltk-1.3.4-1/png/png.c **** 
2642:fltk-1.3.4-1/png/png.c **** int /* PRIVATE */
2643:fltk-1.3.4-1/png/png.c **** png_check_fp_number(png_const_charp string, png_size_t size, int *statep,
2644:fltk-1.3.4-1/png/png.c ****    png_size_tp whereami)
2645:fltk-1.3.4-1/png/png.c **** {
2646:fltk-1.3.4-1/png/png.c ****    int state = *statep;
2647:fltk-1.3.4-1/png/png.c ****    png_size_t i = *whereami;
2648:fltk-1.3.4-1/png/png.c **** 
2649:fltk-1.3.4-1/png/png.c ****    while (i < size)
2650:fltk-1.3.4-1/png/png.c ****    {
2651:fltk-1.3.4-1/png/png.c ****       int type;
2652:fltk-1.3.4-1/png/png.c ****       /* First find the type of the next character */
2653:fltk-1.3.4-1/png/png.c ****       switch (string[i])
2654:fltk-1.3.4-1/png/png.c ****       {
2655:fltk-1.3.4-1/png/png.c ****       case 43:  type = PNG_FP_SAW_SIGN;                   break;
2656:fltk-1.3.4-1/png/png.c ****       case 45:  type = PNG_FP_SAW_SIGN + PNG_FP_NEGATIVE; break;
2657:fltk-1.3.4-1/png/png.c ****       case 46:  type = PNG_FP_SAW_DOT;                    break;
2658:fltk-1.3.4-1/png/png.c ****       case 48:  type = PNG_FP_SAW_DIGIT;                  break;
2659:fltk-1.3.4-1/png/png.c ****       case 49: case 50: case 51: case 52:
2660:fltk-1.3.4-1/png/png.c ****       case 53: case 54: case 55: case 56:
2661:fltk-1.3.4-1/png/png.c ****       case 57:  type = PNG_FP_SAW_DIGIT + PNG_FP_NONZERO; break;
2662:fltk-1.3.4-1/png/png.c ****       case 69:
2663:fltk-1.3.4-1/png/png.c ****       case 101: type = PNG_FP_SAW_E;                      break;
2664:fltk-1.3.4-1/png/png.c ****       default:  goto PNG_FP_End;
2665:fltk-1.3.4-1/png/png.c ****       }
2666:fltk-1.3.4-1/png/png.c **** 
2667:fltk-1.3.4-1/png/png.c ****       /* Now deal with this type according to the current
2668:fltk-1.3.4-1/png/png.c ****        * state, the type is arranged to not overlap the
2669:fltk-1.3.4-1/png/png.c ****        * bits of the PNG_FP_STATE.
2670:fltk-1.3.4-1/png/png.c ****        */
2671:fltk-1.3.4-1/png/png.c ****       switch ((state & PNG_FP_STATE) + (type & PNG_FP_SAW_ANY))
2672:fltk-1.3.4-1/png/png.c ****       {
2673:fltk-1.3.4-1/png/png.c ****       case PNG_FP_INTEGER + PNG_FP_SAW_SIGN:
2674:fltk-1.3.4-1/png/png.c ****          if ((state & PNG_FP_SAW_ANY) != 0)
2675:fltk-1.3.4-1/png/png.c ****             goto PNG_FP_End; /* not a part of the number */
2676:fltk-1.3.4-1/png/png.c **** 
2677:fltk-1.3.4-1/png/png.c ****          png_fp_add(state, type);
2678:fltk-1.3.4-1/png/png.c ****          break;
2679:fltk-1.3.4-1/png/png.c **** 
2680:fltk-1.3.4-1/png/png.c ****       case PNG_FP_INTEGER + PNG_FP_SAW_DOT:
2681:fltk-1.3.4-1/png/png.c ****          /* Ok as trailer, ok as lead of fraction. */
2682:fltk-1.3.4-1/png/png.c ****          if ((state & PNG_FP_SAW_DOT) != 0) /* two dots */
2683:fltk-1.3.4-1/png/png.c ****             goto PNG_FP_End;
2684:fltk-1.3.4-1/png/png.c **** 
2685:fltk-1.3.4-1/png/png.c ****          else if ((state & PNG_FP_SAW_DIGIT) != 0) /* trailing dot? */
2686:fltk-1.3.4-1/png/png.c ****             png_fp_add(state, type);
2687:fltk-1.3.4-1/png/png.c **** 
2688:fltk-1.3.4-1/png/png.c ****          else
2689:fltk-1.3.4-1/png/png.c ****             png_fp_set(state, PNG_FP_FRACTION | type);
2690:fltk-1.3.4-1/png/png.c **** 
2691:fltk-1.3.4-1/png/png.c ****          break;
2692:fltk-1.3.4-1/png/png.c **** 
2693:fltk-1.3.4-1/png/png.c ****       case PNG_FP_INTEGER + PNG_FP_SAW_DIGIT:
2694:fltk-1.3.4-1/png/png.c ****          if ((state & PNG_FP_SAW_DOT) != 0) /* delayed fraction */
2695:fltk-1.3.4-1/png/png.c ****             png_fp_set(state, PNG_FP_FRACTION | PNG_FP_SAW_DOT);
2696:fltk-1.3.4-1/png/png.c **** 
2697:fltk-1.3.4-1/png/png.c ****          png_fp_add(state, type | PNG_FP_WAS_VALID);
2698:fltk-1.3.4-1/png/png.c **** 
2699:fltk-1.3.4-1/png/png.c ****          break;
2700:fltk-1.3.4-1/png/png.c **** 
2701:fltk-1.3.4-1/png/png.c ****       case PNG_FP_INTEGER + PNG_FP_SAW_E:
2702:fltk-1.3.4-1/png/png.c ****          if ((state & PNG_FP_SAW_DIGIT) == 0)
2703:fltk-1.3.4-1/png/png.c ****             goto PNG_FP_End;
2704:fltk-1.3.4-1/png/png.c **** 
2705:fltk-1.3.4-1/png/png.c ****          png_fp_set(state, PNG_FP_EXPONENT);
2706:fltk-1.3.4-1/png/png.c **** 
2707:fltk-1.3.4-1/png/png.c ****          break;
2708:fltk-1.3.4-1/png/png.c **** 
2709:fltk-1.3.4-1/png/png.c ****    /* case PNG_FP_FRACTION + PNG_FP_SAW_SIGN:
2710:fltk-1.3.4-1/png/png.c ****          goto PNG_FP_End; ** no sign in fraction */
2711:fltk-1.3.4-1/png/png.c **** 
2712:fltk-1.3.4-1/png/png.c ****    /* case PNG_FP_FRACTION + PNG_FP_SAW_DOT:
2713:fltk-1.3.4-1/png/png.c ****          goto PNG_FP_End; ** Because SAW_DOT is always set */
2714:fltk-1.3.4-1/png/png.c **** 
2715:fltk-1.3.4-1/png/png.c ****       case PNG_FP_FRACTION + PNG_FP_SAW_DIGIT:
2716:fltk-1.3.4-1/png/png.c ****          png_fp_add(state, type | PNG_FP_WAS_VALID);
2717:fltk-1.3.4-1/png/png.c ****          break;
2718:fltk-1.3.4-1/png/png.c **** 
2719:fltk-1.3.4-1/png/png.c ****       case PNG_FP_FRACTION + PNG_FP_SAW_E:
2720:fltk-1.3.4-1/png/png.c ****          /* This is correct because the trailing '.' on an
2721:fltk-1.3.4-1/png/png.c ****           * integer is handled above - so we can only get here
2722:fltk-1.3.4-1/png/png.c ****           * with the sequence ".E" (with no preceding digits).
2723:fltk-1.3.4-1/png/png.c ****           */
2724:fltk-1.3.4-1/png/png.c ****          if ((state & PNG_FP_SAW_DIGIT) == 0)
2725:fltk-1.3.4-1/png/png.c ****             goto PNG_FP_End;
2726:fltk-1.3.4-1/png/png.c **** 
2727:fltk-1.3.4-1/png/png.c ****          png_fp_set(state, PNG_FP_EXPONENT);
2728:fltk-1.3.4-1/png/png.c **** 
2729:fltk-1.3.4-1/png/png.c ****          break;
2730:fltk-1.3.4-1/png/png.c **** 
2731:fltk-1.3.4-1/png/png.c ****       case PNG_FP_EXPONENT + PNG_FP_SAW_SIGN:
2732:fltk-1.3.4-1/png/png.c ****          if ((state & PNG_FP_SAW_ANY) != 0)
2733:fltk-1.3.4-1/png/png.c ****             goto PNG_FP_End; /* not a part of the number */
2734:fltk-1.3.4-1/png/png.c **** 
2735:fltk-1.3.4-1/png/png.c ****          png_fp_add(state, PNG_FP_SAW_SIGN);
2736:fltk-1.3.4-1/png/png.c **** 
2737:fltk-1.3.4-1/png/png.c ****          break;
2738:fltk-1.3.4-1/png/png.c **** 
2739:fltk-1.3.4-1/png/png.c ****    /* case PNG_FP_EXPONENT + PNG_FP_SAW_DOT:
2740:fltk-1.3.4-1/png/png.c ****          goto PNG_FP_End; */
2741:fltk-1.3.4-1/png/png.c **** 
2742:fltk-1.3.4-1/png/png.c ****       case PNG_FP_EXPONENT + PNG_FP_SAW_DIGIT:
2743:fltk-1.3.4-1/png/png.c ****          png_fp_add(state, PNG_FP_SAW_DIGIT | PNG_FP_WAS_VALID);
2744:fltk-1.3.4-1/png/png.c **** 
2745:fltk-1.3.4-1/png/png.c ****          break;
2746:fltk-1.3.4-1/png/png.c **** 
2747:fltk-1.3.4-1/png/png.c ****    /* case PNG_FP_EXPONEXT + PNG_FP_SAW_E:
2748:fltk-1.3.4-1/png/png.c ****          goto PNG_FP_End; */
2749:fltk-1.3.4-1/png/png.c **** 
2750:fltk-1.3.4-1/png/png.c ****       default: goto PNG_FP_End; /* I.e. break 2 */
2751:fltk-1.3.4-1/png/png.c ****       }
2752:fltk-1.3.4-1/png/png.c **** 
2753:fltk-1.3.4-1/png/png.c ****       /* The character seems ok, continue. */
2754:fltk-1.3.4-1/png/png.c ****       ++i;
2755:fltk-1.3.4-1/png/png.c ****    }
2756:fltk-1.3.4-1/png/png.c **** 
2757:fltk-1.3.4-1/png/png.c **** PNG_FP_End:
2758:fltk-1.3.4-1/png/png.c ****    /* Here at the end, update the state and return the correct
2759:fltk-1.3.4-1/png/png.c ****     * return code.
2760:fltk-1.3.4-1/png/png.c ****     */
2761:fltk-1.3.4-1/png/png.c ****    *statep = state;
2762:fltk-1.3.4-1/png/png.c ****    *whereami = i;
2763:fltk-1.3.4-1/png/png.c **** 
2764:fltk-1.3.4-1/png/png.c ****    return (state & PNG_FP_SAW_DIGIT) != 0;
2765:fltk-1.3.4-1/png/png.c **** }
2766:fltk-1.3.4-1/png/png.c **** 
2767:fltk-1.3.4-1/png/png.c **** 
2768:fltk-1.3.4-1/png/png.c **** /* The same but for a complete string. */
2769:fltk-1.3.4-1/png/png.c **** int
2770:fltk-1.3.4-1/png/png.c **** png_check_fp_string(png_const_charp string, png_size_t size)
2771:fltk-1.3.4-1/png/png.c **** {
2772:fltk-1.3.4-1/png/png.c ****    int        state=0;
2773:fltk-1.3.4-1/png/png.c ****    png_size_t char_index=0;
2774:fltk-1.3.4-1/png/png.c **** 
2775:fltk-1.3.4-1/png/png.c ****    if (png_check_fp_number(string, size, &state, &char_index) != 0 &&
2776:fltk-1.3.4-1/png/png.c ****       (char_index == size || string[char_index] == 0))
2777:fltk-1.3.4-1/png/png.c ****       return state /* must be non-zero - see above */;
2778:fltk-1.3.4-1/png/png.c **** 
2779:fltk-1.3.4-1/png/png.c ****    return 0; /* i.e. fail */
2780:fltk-1.3.4-1/png/png.c **** }
2781:fltk-1.3.4-1/png/png.c **** #endif /* pCAL || sCAL */
2782:fltk-1.3.4-1/png/png.c **** 
2783:fltk-1.3.4-1/png/png.c **** #ifdef PNG_sCAL_SUPPORTED
2784:fltk-1.3.4-1/png/png.c **** #  ifdef PNG_FLOATING_POINT_SUPPORTED
2785:fltk-1.3.4-1/png/png.c **** /* Utility used below - a simple accurate power of ten from an integral
2786:fltk-1.3.4-1/png/png.c ****  * exponent.
2787:fltk-1.3.4-1/png/png.c ****  */
2788:fltk-1.3.4-1/png/png.c **** static double
2789:fltk-1.3.4-1/png/png.c **** png_pow10(int power)
2790:fltk-1.3.4-1/png/png.c **** {
  16              		.loc 1 2790 0
  17              		.cfi_startproc
  18              	.LVL0:
2791:fltk-1.3.4-1/png/png.c ****    int recip = 0;
2792:fltk-1.3.4-1/png/png.c ****    double d = 1;
2793:fltk-1.3.4-1/png/png.c **** 
2794:fltk-1.3.4-1/png/png.c ****    /* Handle negative exponent with a reciprocal at the end because
2795:fltk-1.3.4-1/png/png.c ****     * 10 is exact whereas .1 is inexact in base 2
2796:fltk-1.3.4-1/png/png.c ****     */
2797:fltk-1.3.4-1/png/png.c ****    if (power < 0)
  19              		.loc 1 2797 0
  20 0000 85FF     		testl	%edi, %edi
  21 0002 784C     		js	.L17
2792:fltk-1.3.4-1/png/png.c **** 
  22              		.loc 1 2792 0
  23 0004 F20F1005 		movsd	.LC1(%rip), %xmm0
  23      00000000 
2798:fltk-1.3.4-1/png/png.c ****    {
2799:fltk-1.3.4-1/png/png.c ****       if (power < DBL_MIN_10_EXP) return 0;
2800:fltk-1.3.4-1/png/png.c ****       recip = 1, power = -power;
2801:fltk-1.3.4-1/png/png.c ****    }
2802:fltk-1.3.4-1/png/png.c **** 
2803:fltk-1.3.4-1/png/png.c ****    if (power > 0)
  24              		.loc 1 2803 0
  25 000c 7438     		je	.L3
2791:fltk-1.3.4-1/png/png.c ****    double d = 1;
  26              		.loc 1 2791 0
  27 000e 31C0     		xorl	%eax, %eax
  28              	.LVL1:
  29              	.L4:
  30 0010 F20F1015 		movsd	.LC1(%rip), %xmm2
  30      00000000 
  31 0018 F20F100D 		movsd	.LC0(%rip), %xmm1
  31      00000000 
  32 0020 660F28C2 		movapd	%xmm2, %xmm0
  33              	.LVL2:
  34              		.p2align 4,,10
  35 0024 0F1F4000 		.p2align 3
  36              	.L6:
  37              	.LBB192:
2804:fltk-1.3.4-1/png/png.c ****    {
2805:fltk-1.3.4-1/png/png.c ****       /* Decompose power bitwise. */
2806:fltk-1.3.4-1/png/png.c ****       double mult = 10;
2807:fltk-1.3.4-1/png/png.c ****       do
2808:fltk-1.3.4-1/png/png.c ****       {
2809:fltk-1.3.4-1/png/png.c ****          if (power & 1) d *= mult;
  38              		.loc 1 2809 0
  39 0028 40F6C701 		testb	$1, %dil
  40 002c 7404     		je	.L5
  41              		.loc 1 2809 0 is_stmt 0 discriminator 1
  42 002e F20F59C1 		mulsd	%xmm1, %xmm0
  43              	.LVL3:
  44              	.L5:
2810:fltk-1.3.4-1/png/png.c ****          mult *= mult;
2811:fltk-1.3.4-1/png/png.c ****          power >>= 1;
2812:fltk-1.3.4-1/png/png.c ****       }
2813:fltk-1.3.4-1/png/png.c ****       while (power > 0);
  45              		.loc 1 2813 0 is_stmt 1
  46 0032 D1FF     		sarl	%edi
  47              	.LVL4:
2810:fltk-1.3.4-1/png/png.c ****          mult *= mult;
  48              		.loc 1 2810 0
  49 0034 F20F59C9 		mulsd	%xmm1, %xmm1
  50              	.LVL5:
  51              		.loc 1 2813 0
  52 0038 75EE     		jne	.L6
2814:fltk-1.3.4-1/png/png.c **** 
2815:fltk-1.3.4-1/png/png.c ****       if (recip != 0) d = 1/d;
  53              		.loc 1 2815 0
  54 003a 85C0     		testl	%eax, %eax
  55 003c 7408     		je	.L3
  56              		.loc 1 2815 0 is_stmt 0 discriminator 1
  57 003e F20F5ED0 		divsd	%xmm0, %xmm2
  58 0042 660F28C2 		movapd	%xmm2, %xmm0
  59              	.LVL6:
  60              	.L3:
  61              	.LBE192:
2816:fltk-1.3.4-1/png/png.c ****    }
2817:fltk-1.3.4-1/png/png.c ****    /* else power is 0 and d is 1 */
2818:fltk-1.3.4-1/png/png.c **** 
2819:fltk-1.3.4-1/png/png.c ****    return d;
2820:fltk-1.3.4-1/png/png.c **** }
  62              		.loc 1 2820 0 is_stmt 1
  63 0046 F3C3     		rep ret
  64              	.LVL7:
  65 0048 0F1F8400 		.p2align 4,,10
  65      00000000 
  66              		.p2align 3
  67              	.L17:
2799:fltk-1.3.4-1/png/png.c ****       recip = 1, power = -power;
  68              		.loc 1 2799 0
  69 0050 81FFCDFE 		cmpl	$-307, %edi
  69      FFFF
  70 0056 660FEFC0 		pxor	%xmm0, %xmm0
  71 005a 7CEA     		jl	.L3
  72              	.LVL8:
2800:fltk-1.3.4-1/png/png.c ****    }
  73              		.loc 1 2800 0
  74 005c F7DF     		negl	%edi
  75              	.LVL9:
  76 005e B8010000 		movl	$1, %eax
  76      00
  77 0063 EBAB     		jmp	.L4
  78              		.cfi_endproc
  79              	.LFE114:
  81              		.section	.text.unlikely.png_pow10
  82              	.LCOLDE3:
  83              		.section	.text.png_pow10
  84              	.LHOTE3:
  85              		.section	.rodata.str1.8,"aMS",@progbits,1
  86              		.align 8
  87              	.LC4:
  88 0000 506F7465 		.string	"Potential overflow in png_zalloc()"
  88      6E746961 
  88      6C206F76 
  88      6572666C 
  88      6F772069 
  89              		.section	.text.unlikely.png_zalloc,"ax",@progbits
  90              	.LCOLDB5:
  91              		.section	.text.png_zalloc,"ax",@progbits
  92              	.LHOTB5:
  93              		.p2align 4,,15
  94              		.globl	png_zalloc
  96              	png_zalloc:
  97              	.LFB58:
  74:fltk-1.3.4-1/png/png.c ****    png_alloc_size_t num_bytes = size;
  98              		.loc 1 74 0
  99              		.cfi_startproc
 100              	.LVL10:
  77:fltk-1.3.4-1/png/png.c ****       return NULL;
 101              		.loc 1 77 0
 102 0000 4885FF   		testq	%rdi, %rdi
 103 0003 743B     		je	.L24
 104 0005 89D1     		movl	%edx, %ecx
 105              	.LVL11:
  80:fltk-1.3.4-1/png/png.c ****    {
 106              		.loc 1 80 0
 107 0007 48C7C0FF 		movq	$-1, %rax
 107      FFFFFF
 108 000e 31D2     		xorl	%edx, %edx
 109              	.LVL12:
 110 0010 48F7F1   		divq	%rcx
 111 0013 89F6     		movl	%esi, %esi
 112 0015 4839C6   		cmpq	%rax, %rsi
 113 0018 730E     		jnb	.L25
 114              	.LVL13:
  88:fltk-1.3.4-1/png/png.c **** }
 115              		.loc 1 88 0
 116 001a 480FAFF1 		imulq	%rcx, %rsi
 117              	.LVL14:
 118 001e E9000000 		jmp	png_malloc_warn
 118      00
 119              	.LVL15:
 120              		.p2align 4,,10
 121 0023 0F1F4400 		.p2align 3
 121      00
 122              	.L25:
  74:fltk-1.3.4-1/png/png.c ****    png_alloc_size_t num_bytes = size;
 123              		.loc 1 74 0
 124 0028 4883EC08 		subq	$8, %rsp
 125              		.cfi_def_cfa_offset 16
  82:fltk-1.3.4-1/png/png.c ****          "Potential overflow in png_zalloc()");
 126              		.loc 1 82 0
 127 002c BE000000 		movl	$.LC4, %esi
 127      00
 128 0031 E8000000 		call	png_warning
 128      00
 129              	.LVL16:
  89:fltk-1.3.4-1/png/png.c **** 
 130              		.loc 1 89 0
 131 0036 31C0     		xorl	%eax, %eax
 132 0038 4883C408 		addq	$8, %rsp
 133              		.cfi_def_cfa_offset 8
 134 003c C3       		ret
 135              	.LVL17:
 136 003d 0F1F00   		.p2align 4,,10
 137              		.p2align 3
 138              	.L24:
 139 0040 31C0     		xorl	%eax, %eax
 140 0042 C3       		ret
 141              		.cfi_endproc
 142              	.LFE58:
 144              		.section	.text.unlikely.png_zalloc
 145              	.LCOLDE5:
 146              		.section	.text.png_zalloc
 147              	.LHOTE5:
 148              		.section	.text.unlikely.png_zfree,"ax",@progbits
 149              	.LCOLDB6:
 150              		.section	.text.png_zfree,"ax",@progbits
 151              	.LHOTB6:
 152              		.p2align 4,,15
 153              		.globl	png_zfree
 155              	png_zfree:
 156              	.LFB59:
  94:fltk-1.3.4-1/png/png.c ****    png_free(png_voidcast(png_const_structrp,png_ptr), ptr);
 157              		.loc 1 94 0
 158              		.cfi_startproc
 159              	.LVL18:
  95:fltk-1.3.4-1/png/png.c **** }
 160              		.loc 1 95 0
 161 0000 E9000000 		jmp	png_free
 161      00
 162              	.LVL19:
 163              		.cfi_endproc
 164              	.LFE59:
 166              		.section	.text.unlikely.png_zfree
 167              	.LCOLDE6:
 168              		.section	.text.png_zfree
 169              	.LHOTE6:
 170              		.section	.text.unlikely.png_build_16bit_table,"ax",@progbits
 171              	.LCOLDB10:
 172              		.section	.text.png_build_16bit_table,"ax",@progbits
 173              	.LHOTB10:
 174              		.p2align 4,,15
 176              	png_build_16bit_table:
 177              	.LFB127:
2821:fltk-1.3.4-1/png/png.c **** 
2822:fltk-1.3.4-1/png/png.c **** /* Function to format a floating point value in ASCII with a given
2823:fltk-1.3.4-1/png/png.c ****  * precision.
2824:fltk-1.3.4-1/png/png.c ****  */
2825:fltk-1.3.4-1/png/png.c **** void /* PRIVATE */
2826:fltk-1.3.4-1/png/png.c **** png_ascii_from_fp(png_const_structrp png_ptr, png_charp ascii, png_size_t size,
2827:fltk-1.3.4-1/png/png.c ****     double fp, unsigned int precision)
2828:fltk-1.3.4-1/png/png.c **** {
2829:fltk-1.3.4-1/png/png.c ****    /* We use standard functions from math.h, but not printf because
2830:fltk-1.3.4-1/png/png.c ****     * that would require stdio.  The caller must supply a buffer of
2831:fltk-1.3.4-1/png/png.c ****     * sufficient size or we will png_error.  The tests on size and
2832:fltk-1.3.4-1/png/png.c ****     * the space in ascii[] consumed are indicated below.
2833:fltk-1.3.4-1/png/png.c ****     */
2834:fltk-1.3.4-1/png/png.c ****    if (precision < 1)
2835:fltk-1.3.4-1/png/png.c ****       precision = DBL_DIG;
2836:fltk-1.3.4-1/png/png.c **** 
2837:fltk-1.3.4-1/png/png.c ****    /* Enforce the limit of the implementation precision too. */
2838:fltk-1.3.4-1/png/png.c ****    if (precision > DBL_DIG+1)
2839:fltk-1.3.4-1/png/png.c ****       precision = DBL_DIG+1;
2840:fltk-1.3.4-1/png/png.c **** 
2841:fltk-1.3.4-1/png/png.c ****    /* Basic sanity checks */
2842:fltk-1.3.4-1/png/png.c ****    if (size >= precision+5) /* See the requirements below. */
2843:fltk-1.3.4-1/png/png.c ****    {
2844:fltk-1.3.4-1/png/png.c ****       if (fp < 0)
2845:fltk-1.3.4-1/png/png.c ****       {
2846:fltk-1.3.4-1/png/png.c ****          fp = -fp;
2847:fltk-1.3.4-1/png/png.c ****          *ascii++ = 45; /* '-'  PLUS 1 TOTAL 1 */
2848:fltk-1.3.4-1/png/png.c ****          --size;
2849:fltk-1.3.4-1/png/png.c ****       }
2850:fltk-1.3.4-1/png/png.c **** 
2851:fltk-1.3.4-1/png/png.c ****       if (fp >= DBL_MIN && fp <= DBL_MAX)
2852:fltk-1.3.4-1/png/png.c ****       {
2853:fltk-1.3.4-1/png/png.c ****          int exp_b10;       /* A base 10 exponent */
2854:fltk-1.3.4-1/png/png.c ****          double base;   /* 10^exp_b10 */
2855:fltk-1.3.4-1/png/png.c **** 
2856:fltk-1.3.4-1/png/png.c ****          /* First extract a base 10 exponent of the number,
2857:fltk-1.3.4-1/png/png.c ****           * the calculation below rounds down when converting
2858:fltk-1.3.4-1/png/png.c ****           * from base 2 to base 10 (multiply by log10(2) -
2859:fltk-1.3.4-1/png/png.c ****           * 0.3010, but 77/256 is 0.3008, so exp_b10 needs to
2860:fltk-1.3.4-1/png/png.c ****           * be increased.  Note that the arithmetic shift
2861:fltk-1.3.4-1/png/png.c ****           * performs a floor() unlike C arithmetic - using a
2862:fltk-1.3.4-1/png/png.c ****           * C multiply would break the following for negative
2863:fltk-1.3.4-1/png/png.c ****           * exponents.
2864:fltk-1.3.4-1/png/png.c ****           */
2865:fltk-1.3.4-1/png/png.c ****          (void)frexp(fp, &exp_b10); /* exponent to base 2 */
2866:fltk-1.3.4-1/png/png.c **** 
2867:fltk-1.3.4-1/png/png.c ****          exp_b10 = (exp_b10 * 77) >> 8; /* <= exponent to base 10 */
2868:fltk-1.3.4-1/png/png.c **** 
2869:fltk-1.3.4-1/png/png.c ****          /* Avoid underflow here. */
2870:fltk-1.3.4-1/png/png.c ****          base = png_pow10(exp_b10); /* May underflow */
2871:fltk-1.3.4-1/png/png.c **** 
2872:fltk-1.3.4-1/png/png.c ****          while (base < DBL_MIN || base < fp)
2873:fltk-1.3.4-1/png/png.c ****          {
2874:fltk-1.3.4-1/png/png.c ****             /* And this may overflow. */
2875:fltk-1.3.4-1/png/png.c ****             double test = png_pow10(exp_b10+1);
2876:fltk-1.3.4-1/png/png.c **** 
2877:fltk-1.3.4-1/png/png.c ****             if (test <= DBL_MAX)
2878:fltk-1.3.4-1/png/png.c ****                ++exp_b10, base = test;
2879:fltk-1.3.4-1/png/png.c **** 
2880:fltk-1.3.4-1/png/png.c ****             else
2881:fltk-1.3.4-1/png/png.c ****                break;
2882:fltk-1.3.4-1/png/png.c ****          }
2883:fltk-1.3.4-1/png/png.c **** 
2884:fltk-1.3.4-1/png/png.c ****          /* Normalize fp and correct exp_b10, after this fp is in the
2885:fltk-1.3.4-1/png/png.c ****           * range [.1,1) and exp_b10 is both the exponent and the digit
2886:fltk-1.3.4-1/png/png.c ****           * *before* which the decimal point should be inserted
2887:fltk-1.3.4-1/png/png.c ****           * (starting with 0 for the first digit).  Note that this
2888:fltk-1.3.4-1/png/png.c ****           * works even if 10^exp_b10 is out of range because of the
2889:fltk-1.3.4-1/png/png.c ****           * test on DBL_MAX above.
2890:fltk-1.3.4-1/png/png.c ****           */
2891:fltk-1.3.4-1/png/png.c ****          fp /= base;
2892:fltk-1.3.4-1/png/png.c ****          while (fp >= 1) fp /= 10, ++exp_b10;
2893:fltk-1.3.4-1/png/png.c **** 
2894:fltk-1.3.4-1/png/png.c ****          /* Because of the code above fp may, at this point, be
2895:fltk-1.3.4-1/png/png.c ****           * less than .1, this is ok because the code below can
2896:fltk-1.3.4-1/png/png.c ****           * handle the leading zeros this generates, so no attempt
2897:fltk-1.3.4-1/png/png.c ****           * is made to correct that here.
2898:fltk-1.3.4-1/png/png.c ****           */
2899:fltk-1.3.4-1/png/png.c **** 
2900:fltk-1.3.4-1/png/png.c ****          {
2901:fltk-1.3.4-1/png/png.c ****             int czero, clead, cdigits;
2902:fltk-1.3.4-1/png/png.c ****             char exponent[10];
2903:fltk-1.3.4-1/png/png.c **** 
2904:fltk-1.3.4-1/png/png.c ****             /* Allow up to two leading zeros - this will not lengthen
2905:fltk-1.3.4-1/png/png.c ****              * the number compared to using E-n.
2906:fltk-1.3.4-1/png/png.c ****              */
2907:fltk-1.3.4-1/png/png.c ****             if (exp_b10 < 0 && exp_b10 > -3) /* PLUS 3 TOTAL 4 */
2908:fltk-1.3.4-1/png/png.c ****             {
2909:fltk-1.3.4-1/png/png.c ****                czero = -exp_b10; /* PLUS 2 digits: TOTAL 3 */
2910:fltk-1.3.4-1/png/png.c ****                exp_b10 = 0;      /* Dot added below before first output. */
2911:fltk-1.3.4-1/png/png.c ****             }
2912:fltk-1.3.4-1/png/png.c ****             else
2913:fltk-1.3.4-1/png/png.c ****                czero = 0;    /* No zeros to add */
2914:fltk-1.3.4-1/png/png.c **** 
2915:fltk-1.3.4-1/png/png.c ****             /* Generate the digit list, stripping trailing zeros and
2916:fltk-1.3.4-1/png/png.c ****              * inserting a '.' before a digit if the exponent is 0.
2917:fltk-1.3.4-1/png/png.c ****              */
2918:fltk-1.3.4-1/png/png.c ****             clead = czero; /* Count of leading zeros */
2919:fltk-1.3.4-1/png/png.c ****             cdigits = 0;   /* Count of digits in list. */
2920:fltk-1.3.4-1/png/png.c **** 
2921:fltk-1.3.4-1/png/png.c ****             do
2922:fltk-1.3.4-1/png/png.c ****             {
2923:fltk-1.3.4-1/png/png.c ****                double d;
2924:fltk-1.3.4-1/png/png.c **** 
2925:fltk-1.3.4-1/png/png.c ****                fp *= 10;
2926:fltk-1.3.4-1/png/png.c ****                /* Use modf here, not floor and subtract, so that
2927:fltk-1.3.4-1/png/png.c ****                 * the separation is done in one step.  At the end
2928:fltk-1.3.4-1/png/png.c ****                 * of the loop don't break the number into parts so
2929:fltk-1.3.4-1/png/png.c ****                 * that the final digit is rounded.
2930:fltk-1.3.4-1/png/png.c ****                 */
2931:fltk-1.3.4-1/png/png.c ****                if (cdigits+czero-clead+1 < (int)precision)
2932:fltk-1.3.4-1/png/png.c ****                   fp = modf(fp, &d);
2933:fltk-1.3.4-1/png/png.c **** 
2934:fltk-1.3.4-1/png/png.c ****                else
2935:fltk-1.3.4-1/png/png.c ****                {
2936:fltk-1.3.4-1/png/png.c ****                   d = floor(fp + .5);
2937:fltk-1.3.4-1/png/png.c **** 
2938:fltk-1.3.4-1/png/png.c ****                   if (d > 9)
2939:fltk-1.3.4-1/png/png.c ****                   {
2940:fltk-1.3.4-1/png/png.c ****                      /* Rounding up to 10, handle that here. */
2941:fltk-1.3.4-1/png/png.c ****                      if (czero > 0)
2942:fltk-1.3.4-1/png/png.c ****                      {
2943:fltk-1.3.4-1/png/png.c ****                         --czero, d = 1;
2944:fltk-1.3.4-1/png/png.c ****                         if (cdigits == 0) --clead;
2945:fltk-1.3.4-1/png/png.c ****                      }
2946:fltk-1.3.4-1/png/png.c ****                      else
2947:fltk-1.3.4-1/png/png.c ****                      {
2948:fltk-1.3.4-1/png/png.c ****                         while (cdigits > 0 && d > 9)
2949:fltk-1.3.4-1/png/png.c ****                         {
2950:fltk-1.3.4-1/png/png.c ****                            int ch = *--ascii;
2951:fltk-1.3.4-1/png/png.c **** 
2952:fltk-1.3.4-1/png/png.c ****                            if (exp_b10 != (-1))
2953:fltk-1.3.4-1/png/png.c ****                               ++exp_b10;
2954:fltk-1.3.4-1/png/png.c **** 
2955:fltk-1.3.4-1/png/png.c ****                            else if (ch == 46)
2956:fltk-1.3.4-1/png/png.c ****                            {
2957:fltk-1.3.4-1/png/png.c ****                               ch = *--ascii, ++size;
2958:fltk-1.3.4-1/png/png.c ****                               /* Advance exp_b10 to '1', so that the
2959:fltk-1.3.4-1/png/png.c ****                                * decimal point happens after the
2960:fltk-1.3.4-1/png/png.c ****                                * previous digit.
2961:fltk-1.3.4-1/png/png.c ****                                */
2962:fltk-1.3.4-1/png/png.c ****                               exp_b10 = 1;
2963:fltk-1.3.4-1/png/png.c ****                            }
2964:fltk-1.3.4-1/png/png.c **** 
2965:fltk-1.3.4-1/png/png.c ****                            --cdigits;
2966:fltk-1.3.4-1/png/png.c ****                            d = ch - 47;  /* I.e. 1+(ch-48) */
2967:fltk-1.3.4-1/png/png.c ****                         }
2968:fltk-1.3.4-1/png/png.c **** 
2969:fltk-1.3.4-1/png/png.c ****                         /* Did we reach the beginning? If so adjust the
2970:fltk-1.3.4-1/png/png.c ****                          * exponent but take into account the leading
2971:fltk-1.3.4-1/png/png.c ****                          * decimal point.
2972:fltk-1.3.4-1/png/png.c ****                          */
2973:fltk-1.3.4-1/png/png.c ****                         if (d > 9)  /* cdigits == 0 */
2974:fltk-1.3.4-1/png/png.c ****                         {
2975:fltk-1.3.4-1/png/png.c ****                            if (exp_b10 == (-1))
2976:fltk-1.3.4-1/png/png.c ****                            {
2977:fltk-1.3.4-1/png/png.c ****                               /* Leading decimal point (plus zeros?), if
2978:fltk-1.3.4-1/png/png.c ****                                * we lose the decimal point here it must
2979:fltk-1.3.4-1/png/png.c ****                                * be reentered below.
2980:fltk-1.3.4-1/png/png.c ****                                */
2981:fltk-1.3.4-1/png/png.c ****                               int ch = *--ascii;
2982:fltk-1.3.4-1/png/png.c **** 
2983:fltk-1.3.4-1/png/png.c ****                               if (ch == 46)
2984:fltk-1.3.4-1/png/png.c ****                                  ++size, exp_b10 = 1;
2985:fltk-1.3.4-1/png/png.c **** 
2986:fltk-1.3.4-1/png/png.c ****                               /* Else lost a leading zero, so 'exp_b10' is
2987:fltk-1.3.4-1/png/png.c ****                                * still ok at (-1)
2988:fltk-1.3.4-1/png/png.c ****                                */
2989:fltk-1.3.4-1/png/png.c ****                            }
2990:fltk-1.3.4-1/png/png.c ****                            else
2991:fltk-1.3.4-1/png/png.c ****                               ++exp_b10;
2992:fltk-1.3.4-1/png/png.c **** 
2993:fltk-1.3.4-1/png/png.c ****                            /* In all cases we output a '1' */
2994:fltk-1.3.4-1/png/png.c ****                            d = 1;
2995:fltk-1.3.4-1/png/png.c ****                         }
2996:fltk-1.3.4-1/png/png.c ****                      }
2997:fltk-1.3.4-1/png/png.c ****                   }
2998:fltk-1.3.4-1/png/png.c ****                   fp = 0; /* Guarantees termination below. */
2999:fltk-1.3.4-1/png/png.c ****                }
3000:fltk-1.3.4-1/png/png.c **** 
3001:fltk-1.3.4-1/png/png.c ****                if (d == 0)
3002:fltk-1.3.4-1/png/png.c ****                {
3003:fltk-1.3.4-1/png/png.c ****                   ++czero;
3004:fltk-1.3.4-1/png/png.c ****                   if (cdigits == 0) ++clead;
3005:fltk-1.3.4-1/png/png.c ****                }
3006:fltk-1.3.4-1/png/png.c ****                else
3007:fltk-1.3.4-1/png/png.c ****                {
3008:fltk-1.3.4-1/png/png.c ****                   /* Included embedded zeros in the digit count. */
3009:fltk-1.3.4-1/png/png.c ****                   cdigits += czero - clead;
3010:fltk-1.3.4-1/png/png.c ****                   clead = 0;
3011:fltk-1.3.4-1/png/png.c **** 
3012:fltk-1.3.4-1/png/png.c ****                   while (czero > 0)
3013:fltk-1.3.4-1/png/png.c ****                   {
3014:fltk-1.3.4-1/png/png.c ****                      /* exp_b10 == (-1) means we just output the decimal
3015:fltk-1.3.4-1/png/png.c ****                       * place - after the DP don't adjust 'exp_b10' any
3016:fltk-1.3.4-1/png/png.c ****                       * more!
3017:fltk-1.3.4-1/png/png.c ****                       */
3018:fltk-1.3.4-1/png/png.c ****                      if (exp_b10 != (-1))
3019:fltk-1.3.4-1/png/png.c ****                      {
3020:fltk-1.3.4-1/png/png.c ****                         if (exp_b10 == 0) *ascii++ = 46, --size;
3021:fltk-1.3.4-1/png/png.c ****                         /* PLUS 1: TOTAL 4 */
3022:fltk-1.3.4-1/png/png.c ****                         --exp_b10;
3023:fltk-1.3.4-1/png/png.c ****                      }
3024:fltk-1.3.4-1/png/png.c ****                      *ascii++ = 48, --czero;
3025:fltk-1.3.4-1/png/png.c ****                   }
3026:fltk-1.3.4-1/png/png.c **** 
3027:fltk-1.3.4-1/png/png.c ****                   if (exp_b10 != (-1))
3028:fltk-1.3.4-1/png/png.c ****                   {
3029:fltk-1.3.4-1/png/png.c ****                      if (exp_b10 == 0)
3030:fltk-1.3.4-1/png/png.c ****                         *ascii++ = 46, --size; /* counted above */
3031:fltk-1.3.4-1/png/png.c **** 
3032:fltk-1.3.4-1/png/png.c ****                      --exp_b10;
3033:fltk-1.3.4-1/png/png.c ****                   }
3034:fltk-1.3.4-1/png/png.c ****                   *ascii++ = (char)(48 + (int)d), ++cdigits;
3035:fltk-1.3.4-1/png/png.c ****                }
3036:fltk-1.3.4-1/png/png.c ****             }
3037:fltk-1.3.4-1/png/png.c ****             while (cdigits+czero-clead < (int)precision && fp > DBL_MIN);
3038:fltk-1.3.4-1/png/png.c **** 
3039:fltk-1.3.4-1/png/png.c ****             /* The total output count (max) is now 4+precision */
3040:fltk-1.3.4-1/png/png.c **** 
3041:fltk-1.3.4-1/png/png.c ****             /* Check for an exponent, if we don't need one we are
3042:fltk-1.3.4-1/png/png.c ****              * done and just need to terminate the string.  At
3043:fltk-1.3.4-1/png/png.c ****              * this point exp_b10==(-1) is effectively if flag - it got
3044:fltk-1.3.4-1/png/png.c ****              * to '-1' because of the decrement after outputing
3045:fltk-1.3.4-1/png/png.c ****              * the decimal point above (the exponent required is
3046:fltk-1.3.4-1/png/png.c ****              * *not* -1!)
3047:fltk-1.3.4-1/png/png.c ****              */
3048:fltk-1.3.4-1/png/png.c ****             if (exp_b10 >= (-1) && exp_b10 <= 2)
3049:fltk-1.3.4-1/png/png.c ****             {
3050:fltk-1.3.4-1/png/png.c ****                /* The following only happens if we didn't output the
3051:fltk-1.3.4-1/png/png.c ****                 * leading zeros above for negative exponent, so this
3052:fltk-1.3.4-1/png/png.c ****                 * doest add to the digit requirement.  Note that the
3053:fltk-1.3.4-1/png/png.c ****                 * two zeros here can only be output if the two leading
3054:fltk-1.3.4-1/png/png.c ****                 * zeros were *not* output, so this doesn't increase
3055:fltk-1.3.4-1/png/png.c ****                 * the output count.
3056:fltk-1.3.4-1/png/png.c ****                 */
3057:fltk-1.3.4-1/png/png.c ****                while (--exp_b10 >= 0) *ascii++ = 48;
3058:fltk-1.3.4-1/png/png.c **** 
3059:fltk-1.3.4-1/png/png.c ****                *ascii = 0;
3060:fltk-1.3.4-1/png/png.c **** 
3061:fltk-1.3.4-1/png/png.c ****                /* Total buffer requirement (including the '\0') is
3062:fltk-1.3.4-1/png/png.c ****                 * 5+precision - see check at the start.
3063:fltk-1.3.4-1/png/png.c ****                 */
3064:fltk-1.3.4-1/png/png.c ****                return;
3065:fltk-1.3.4-1/png/png.c ****             }
3066:fltk-1.3.4-1/png/png.c **** 
3067:fltk-1.3.4-1/png/png.c ****             /* Here if an exponent is required, adjust size for
3068:fltk-1.3.4-1/png/png.c ****              * the digits we output but did not count.  The total
3069:fltk-1.3.4-1/png/png.c ****              * digit output here so far is at most 1+precision - no
3070:fltk-1.3.4-1/png/png.c ****              * decimal point and no leading or trailing zeros have
3071:fltk-1.3.4-1/png/png.c ****              * been output.
3072:fltk-1.3.4-1/png/png.c ****              */
3073:fltk-1.3.4-1/png/png.c ****             size -= cdigits;
3074:fltk-1.3.4-1/png/png.c **** 
3075:fltk-1.3.4-1/png/png.c ****             *ascii++ = 69, --size;    /* 'E': PLUS 1 TOTAL 2+precision */
3076:fltk-1.3.4-1/png/png.c **** 
3077:fltk-1.3.4-1/png/png.c ****             /* The following use of an unsigned temporary avoids ambiguities in
3078:fltk-1.3.4-1/png/png.c ****              * the signed arithmetic on exp_b10 and permits GCC at least to do
3079:fltk-1.3.4-1/png/png.c ****              * better optimization.
3080:fltk-1.3.4-1/png/png.c ****              */
3081:fltk-1.3.4-1/png/png.c ****             {
3082:fltk-1.3.4-1/png/png.c ****                unsigned int uexp_b10;
3083:fltk-1.3.4-1/png/png.c **** 
3084:fltk-1.3.4-1/png/png.c ****                if (exp_b10 < 0)
3085:fltk-1.3.4-1/png/png.c ****                {
3086:fltk-1.3.4-1/png/png.c ****                   *ascii++ = 45, --size; /* '-': PLUS 1 TOTAL 3+precision */
3087:fltk-1.3.4-1/png/png.c ****                   uexp_b10 = -exp_b10;
3088:fltk-1.3.4-1/png/png.c ****                }
3089:fltk-1.3.4-1/png/png.c **** 
3090:fltk-1.3.4-1/png/png.c ****                else
3091:fltk-1.3.4-1/png/png.c ****                   uexp_b10 = exp_b10;
3092:fltk-1.3.4-1/png/png.c **** 
3093:fltk-1.3.4-1/png/png.c ****                cdigits = 0;
3094:fltk-1.3.4-1/png/png.c **** 
3095:fltk-1.3.4-1/png/png.c ****                while (uexp_b10 > 0)
3096:fltk-1.3.4-1/png/png.c ****                {
3097:fltk-1.3.4-1/png/png.c ****                   exponent[cdigits++] = (char)(48 + uexp_b10 % 10);
3098:fltk-1.3.4-1/png/png.c ****                   uexp_b10 /= 10;
3099:fltk-1.3.4-1/png/png.c ****                }
3100:fltk-1.3.4-1/png/png.c ****             }
3101:fltk-1.3.4-1/png/png.c **** 
3102:fltk-1.3.4-1/png/png.c ****             /* Need another size check here for the exponent digits, so
3103:fltk-1.3.4-1/png/png.c ****              * this need not be considered above.
3104:fltk-1.3.4-1/png/png.c ****              */
3105:fltk-1.3.4-1/png/png.c ****             if ((int)size > cdigits)
3106:fltk-1.3.4-1/png/png.c ****             {
3107:fltk-1.3.4-1/png/png.c ****                while (cdigits > 0) *ascii++ = exponent[--cdigits];
3108:fltk-1.3.4-1/png/png.c **** 
3109:fltk-1.3.4-1/png/png.c ****                *ascii = 0;
3110:fltk-1.3.4-1/png/png.c **** 
3111:fltk-1.3.4-1/png/png.c ****                return;
3112:fltk-1.3.4-1/png/png.c ****             }
3113:fltk-1.3.4-1/png/png.c ****          }
3114:fltk-1.3.4-1/png/png.c ****       }
3115:fltk-1.3.4-1/png/png.c ****       else if (!(fp >= DBL_MIN))
3116:fltk-1.3.4-1/png/png.c ****       {
3117:fltk-1.3.4-1/png/png.c ****          *ascii++ = 48; /* '0' */
3118:fltk-1.3.4-1/png/png.c ****          *ascii = 0;
3119:fltk-1.3.4-1/png/png.c ****          return;
3120:fltk-1.3.4-1/png/png.c ****       }
3121:fltk-1.3.4-1/png/png.c ****       else
3122:fltk-1.3.4-1/png/png.c ****       {
3123:fltk-1.3.4-1/png/png.c ****          *ascii++ = 105; /* 'i' */
3124:fltk-1.3.4-1/png/png.c ****          *ascii++ = 110; /* 'n' */
3125:fltk-1.3.4-1/png/png.c ****          *ascii++ = 102; /* 'f' */
3126:fltk-1.3.4-1/png/png.c ****          *ascii = 0;
3127:fltk-1.3.4-1/png/png.c ****          return;
3128:fltk-1.3.4-1/png/png.c ****       }
3129:fltk-1.3.4-1/png/png.c ****    }
3130:fltk-1.3.4-1/png/png.c **** 
3131:fltk-1.3.4-1/png/png.c ****    /* Here on buffer too small. */
3132:fltk-1.3.4-1/png/png.c ****    png_error(png_ptr, "ASCII conversion buffer too small");
3133:fltk-1.3.4-1/png/png.c **** }
3134:fltk-1.3.4-1/png/png.c **** 
3135:fltk-1.3.4-1/png/png.c **** #  endif /* FLOATING_POINT */
3136:fltk-1.3.4-1/png/png.c **** 
3137:fltk-1.3.4-1/png/png.c **** #  ifdef PNG_FIXED_POINT_SUPPORTED
3138:fltk-1.3.4-1/png/png.c **** /* Function to format a fixed point value in ASCII.
3139:fltk-1.3.4-1/png/png.c ****  */
3140:fltk-1.3.4-1/png/png.c **** void /* PRIVATE */
3141:fltk-1.3.4-1/png/png.c **** png_ascii_from_fixed(png_const_structrp png_ptr, png_charp ascii,
3142:fltk-1.3.4-1/png/png.c ****     png_size_t size, png_fixed_point fp)
3143:fltk-1.3.4-1/png/png.c **** {
3144:fltk-1.3.4-1/png/png.c ****    /* Require space for 10 decimal digits, a decimal point, a minus sign and a
3145:fltk-1.3.4-1/png/png.c ****     * trailing \0, 13 characters:
3146:fltk-1.3.4-1/png/png.c ****     */
3147:fltk-1.3.4-1/png/png.c ****    if (size > 12)
3148:fltk-1.3.4-1/png/png.c ****    {
3149:fltk-1.3.4-1/png/png.c ****       png_uint_32 num;
3150:fltk-1.3.4-1/png/png.c **** 
3151:fltk-1.3.4-1/png/png.c ****       /* Avoid overflow here on the minimum integer. */
3152:fltk-1.3.4-1/png/png.c ****       if (fp < 0)
3153:fltk-1.3.4-1/png/png.c ****          *ascii++ = 45, --size, num = -fp;
3154:fltk-1.3.4-1/png/png.c ****       else
3155:fltk-1.3.4-1/png/png.c ****          num = fp;
3156:fltk-1.3.4-1/png/png.c **** 
3157:fltk-1.3.4-1/png/png.c ****       if (num <= 0x80000000) /* else overflowed */
3158:fltk-1.3.4-1/png/png.c ****       {
3159:fltk-1.3.4-1/png/png.c ****          unsigned int ndigits = 0, first = 16 /* flag value */;
3160:fltk-1.3.4-1/png/png.c ****          char digits[10];
3161:fltk-1.3.4-1/png/png.c **** 
3162:fltk-1.3.4-1/png/png.c ****          while (num)
3163:fltk-1.3.4-1/png/png.c ****          {
3164:fltk-1.3.4-1/png/png.c ****             /* Split the low digit off num: */
3165:fltk-1.3.4-1/png/png.c ****             unsigned int tmp = num/10;
3166:fltk-1.3.4-1/png/png.c ****             num -= tmp*10;
3167:fltk-1.3.4-1/png/png.c ****             digits[ndigits++] = (char)(48 + num);
3168:fltk-1.3.4-1/png/png.c ****             /* Record the first non-zero digit, note that this is a number
3169:fltk-1.3.4-1/png/png.c ****              * starting at 1, it's not actually the array index.
3170:fltk-1.3.4-1/png/png.c ****              */
3171:fltk-1.3.4-1/png/png.c ****             if (first == 16 && num > 0)
3172:fltk-1.3.4-1/png/png.c ****                first = ndigits;
3173:fltk-1.3.4-1/png/png.c ****             num = tmp;
3174:fltk-1.3.4-1/png/png.c ****          }
3175:fltk-1.3.4-1/png/png.c **** 
3176:fltk-1.3.4-1/png/png.c ****          if (ndigits > 0)
3177:fltk-1.3.4-1/png/png.c ****          {
3178:fltk-1.3.4-1/png/png.c ****             while (ndigits > 5) *ascii++ = digits[--ndigits];
3179:fltk-1.3.4-1/png/png.c ****             /* The remaining digits are fractional digits, ndigits is '5' or
3180:fltk-1.3.4-1/png/png.c ****              * smaller at this point.  It is certainly not zero.  Check for a
3181:fltk-1.3.4-1/png/png.c ****              * non-zero fractional digit:
3182:fltk-1.3.4-1/png/png.c ****              */
3183:fltk-1.3.4-1/png/png.c ****             if (first <= 5)
3184:fltk-1.3.4-1/png/png.c ****             {
3185:fltk-1.3.4-1/png/png.c ****                unsigned int i;
3186:fltk-1.3.4-1/png/png.c ****                *ascii++ = 46; /* decimal point */
3187:fltk-1.3.4-1/png/png.c ****                /* ndigits may be <5 for small numbers, output leading zeros
3188:fltk-1.3.4-1/png/png.c ****                 * then ndigits digits to first:
3189:fltk-1.3.4-1/png/png.c ****                 */
3190:fltk-1.3.4-1/png/png.c ****                i = 5;
3191:fltk-1.3.4-1/png/png.c ****                while (ndigits < i) *ascii++ = 48, --i;
3192:fltk-1.3.4-1/png/png.c ****                while (ndigits >= first) *ascii++ = digits[--ndigits];
3193:fltk-1.3.4-1/png/png.c ****                /* Don't output the trailing zeros! */
3194:fltk-1.3.4-1/png/png.c ****             }
3195:fltk-1.3.4-1/png/png.c ****          }
3196:fltk-1.3.4-1/png/png.c ****          else
3197:fltk-1.3.4-1/png/png.c ****             *ascii++ = 48;
3198:fltk-1.3.4-1/png/png.c **** 
3199:fltk-1.3.4-1/png/png.c ****          /* And null terminate the string: */
3200:fltk-1.3.4-1/png/png.c ****          *ascii = 0;
3201:fltk-1.3.4-1/png/png.c ****          return;
3202:fltk-1.3.4-1/png/png.c ****       }
3203:fltk-1.3.4-1/png/png.c ****    }
3204:fltk-1.3.4-1/png/png.c **** 
3205:fltk-1.3.4-1/png/png.c ****    /* Here on buffer too small. */
3206:fltk-1.3.4-1/png/png.c ****    png_error(png_ptr, "ASCII conversion buffer too small");
3207:fltk-1.3.4-1/png/png.c **** }
3208:fltk-1.3.4-1/png/png.c **** #   endif /* FIXED_POINT */
3209:fltk-1.3.4-1/png/png.c **** #endif /* READ_SCAL */
3210:fltk-1.3.4-1/png/png.c **** 
3211:fltk-1.3.4-1/png/png.c **** #if defined(PNG_FLOATING_POINT_SUPPORTED) && \
3212:fltk-1.3.4-1/png/png.c ****    !defined(PNG_FIXED_POINT_MACRO_SUPPORTED) && \
3213:fltk-1.3.4-1/png/png.c ****    (defined(PNG_gAMA_SUPPORTED) || defined(PNG_cHRM_SUPPORTED) || \
3214:fltk-1.3.4-1/png/png.c ****    defined(PNG_sCAL_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED) || \
3215:fltk-1.3.4-1/png/png.c ****    defined(PNG_READ_RGB_TO_GRAY_SUPPORTED)) || \
3216:fltk-1.3.4-1/png/png.c ****    (defined(PNG_sCAL_SUPPORTED) && \
3217:fltk-1.3.4-1/png/png.c ****    defined(PNG_FLOATING_ARITHMETIC_SUPPORTED))
3218:fltk-1.3.4-1/png/png.c **** png_fixed_point
3219:fltk-1.3.4-1/png/png.c **** png_fixed(png_const_structrp png_ptr, double fp, png_const_charp text)
3220:fltk-1.3.4-1/png/png.c **** {
3221:fltk-1.3.4-1/png/png.c ****    double r = floor(100000 * fp + .5);
3222:fltk-1.3.4-1/png/png.c **** 
3223:fltk-1.3.4-1/png/png.c ****    if (r > 2147483647. || r < -2147483648.)
3224:fltk-1.3.4-1/png/png.c ****       png_fixed_error(png_ptr, text);
3225:fltk-1.3.4-1/png/png.c **** 
3226:fltk-1.3.4-1/png/png.c **** #  ifndef PNG_ERROR_TEXT_SUPPORTED
3227:fltk-1.3.4-1/png/png.c ****       PNG_UNUSED(text)
3228:fltk-1.3.4-1/png/png.c **** #  endif
3229:fltk-1.3.4-1/png/png.c **** 
3230:fltk-1.3.4-1/png/png.c ****    return (png_fixed_point)r;
3231:fltk-1.3.4-1/png/png.c **** }
3232:fltk-1.3.4-1/png/png.c **** #endif
3233:fltk-1.3.4-1/png/png.c **** 
3234:fltk-1.3.4-1/png/png.c **** #if defined(PNG_GAMMA_SUPPORTED) || defined(PNG_COLORSPACE_SUPPORTED) ||\
3235:fltk-1.3.4-1/png/png.c ****     defined(PNG_INCH_CONVERSIONS_SUPPORTED) || defined(PNG_READ_pHYs_SUPPORTED)
3236:fltk-1.3.4-1/png/png.c **** /* muldiv functions */
3237:fltk-1.3.4-1/png/png.c **** /* This API takes signed arguments and rounds the result to the nearest
3238:fltk-1.3.4-1/png/png.c ****  * integer (or, for a fixed point number - the standard argument - to
3239:fltk-1.3.4-1/png/png.c ****  * the nearest .00001).  Overflow and divide by zero are signalled in
3240:fltk-1.3.4-1/png/png.c ****  * the result, a boolean - true on success, false on overflow.
3241:fltk-1.3.4-1/png/png.c ****  */
3242:fltk-1.3.4-1/png/png.c **** int
3243:fltk-1.3.4-1/png/png.c **** png_muldiv(png_fixed_point_p res, png_fixed_point a, png_int_32 times,
3244:fltk-1.3.4-1/png/png.c ****     png_int_32 divisor)
3245:fltk-1.3.4-1/png/png.c **** {
3246:fltk-1.3.4-1/png/png.c ****    /* Return a * times / divisor, rounded. */
3247:fltk-1.3.4-1/png/png.c ****    if (divisor != 0)
3248:fltk-1.3.4-1/png/png.c ****    {
3249:fltk-1.3.4-1/png/png.c ****       if (a == 0 || times == 0)
3250:fltk-1.3.4-1/png/png.c ****       {
3251:fltk-1.3.4-1/png/png.c ****          *res = 0;
3252:fltk-1.3.4-1/png/png.c ****          return 1;
3253:fltk-1.3.4-1/png/png.c ****       }
3254:fltk-1.3.4-1/png/png.c ****       else
3255:fltk-1.3.4-1/png/png.c ****       {
3256:fltk-1.3.4-1/png/png.c **** #ifdef PNG_FLOATING_ARITHMETIC_SUPPORTED
3257:fltk-1.3.4-1/png/png.c ****          double r = a;
3258:fltk-1.3.4-1/png/png.c ****          r *= times;
3259:fltk-1.3.4-1/png/png.c ****          r /= divisor;
3260:fltk-1.3.4-1/png/png.c ****          r = floor(r+.5);
3261:fltk-1.3.4-1/png/png.c **** 
3262:fltk-1.3.4-1/png/png.c ****          /* A png_fixed_point is a 32-bit integer. */
3263:fltk-1.3.4-1/png/png.c ****          if (r <= 2147483647. && r >= -2147483648.)
3264:fltk-1.3.4-1/png/png.c ****          {
3265:fltk-1.3.4-1/png/png.c ****             *res = (png_fixed_point)r;
3266:fltk-1.3.4-1/png/png.c ****             return 1;
3267:fltk-1.3.4-1/png/png.c ****          }
3268:fltk-1.3.4-1/png/png.c **** #else
3269:fltk-1.3.4-1/png/png.c ****          int negative = 0;
3270:fltk-1.3.4-1/png/png.c ****          png_uint_32 A, T, D;
3271:fltk-1.3.4-1/png/png.c ****          png_uint_32 s16, s32, s00;
3272:fltk-1.3.4-1/png/png.c **** 
3273:fltk-1.3.4-1/png/png.c ****          if (a < 0)
3274:fltk-1.3.4-1/png/png.c ****             negative = 1, A = -a;
3275:fltk-1.3.4-1/png/png.c ****          else
3276:fltk-1.3.4-1/png/png.c ****             A = a;
3277:fltk-1.3.4-1/png/png.c **** 
3278:fltk-1.3.4-1/png/png.c ****          if (times < 0)
3279:fltk-1.3.4-1/png/png.c ****             negative = !negative, T = -times;
3280:fltk-1.3.4-1/png/png.c ****          else
3281:fltk-1.3.4-1/png/png.c ****             T = times;
3282:fltk-1.3.4-1/png/png.c **** 
3283:fltk-1.3.4-1/png/png.c ****          if (divisor < 0)
3284:fltk-1.3.4-1/png/png.c ****             negative = !negative, D = -divisor;
3285:fltk-1.3.4-1/png/png.c ****          else
3286:fltk-1.3.4-1/png/png.c ****             D = divisor;
3287:fltk-1.3.4-1/png/png.c **** 
3288:fltk-1.3.4-1/png/png.c ****          /* Following can't overflow because the arguments only
3289:fltk-1.3.4-1/png/png.c ****           * have 31 bits each, however the result may be 32 bits.
3290:fltk-1.3.4-1/png/png.c ****           */
3291:fltk-1.3.4-1/png/png.c ****          s16 = (A >> 16) * (T & 0xffff) +
3292:fltk-1.3.4-1/png/png.c ****                            (A & 0xffff) * (T >> 16);
3293:fltk-1.3.4-1/png/png.c ****          /* Can't overflow because the a*times bit is only 30
3294:fltk-1.3.4-1/png/png.c ****           * bits at most.
3295:fltk-1.3.4-1/png/png.c ****           */
3296:fltk-1.3.4-1/png/png.c ****          s32 = (A >> 16) * (T >> 16) + (s16 >> 16);
3297:fltk-1.3.4-1/png/png.c ****          s00 = (A & 0xffff) * (T & 0xffff);
3298:fltk-1.3.4-1/png/png.c **** 
3299:fltk-1.3.4-1/png/png.c ****          s16 = (s16 & 0xffff) << 16;
3300:fltk-1.3.4-1/png/png.c ****          s00 += s16;
3301:fltk-1.3.4-1/png/png.c **** 
3302:fltk-1.3.4-1/png/png.c ****          if (s00 < s16)
3303:fltk-1.3.4-1/png/png.c ****             ++s32; /* carry */
3304:fltk-1.3.4-1/png/png.c **** 
3305:fltk-1.3.4-1/png/png.c ****          if (s32 < D) /* else overflow */
3306:fltk-1.3.4-1/png/png.c ****          {
3307:fltk-1.3.4-1/png/png.c ****             /* s32.s00 is now the 64-bit product, do a standard
3308:fltk-1.3.4-1/png/png.c ****              * division, we know that s32 < D, so the maximum
3309:fltk-1.3.4-1/png/png.c ****              * required shift is 31.
3310:fltk-1.3.4-1/png/png.c ****              */
3311:fltk-1.3.4-1/png/png.c ****             int bitshift = 32;
3312:fltk-1.3.4-1/png/png.c ****             png_fixed_point result = 0; /* NOTE: signed */
3313:fltk-1.3.4-1/png/png.c **** 
3314:fltk-1.3.4-1/png/png.c ****             while (--bitshift >= 0)
3315:fltk-1.3.4-1/png/png.c ****             {
3316:fltk-1.3.4-1/png/png.c ****                png_uint_32 d32, d00;
3317:fltk-1.3.4-1/png/png.c **** 
3318:fltk-1.3.4-1/png/png.c ****                if (bitshift > 0)
3319:fltk-1.3.4-1/png/png.c ****                   d32 = D >> (32-bitshift), d00 = D << bitshift;
3320:fltk-1.3.4-1/png/png.c **** 
3321:fltk-1.3.4-1/png/png.c ****                else
3322:fltk-1.3.4-1/png/png.c ****                   d32 = 0, d00 = D;
3323:fltk-1.3.4-1/png/png.c **** 
3324:fltk-1.3.4-1/png/png.c ****                if (s32 > d32)
3325:fltk-1.3.4-1/png/png.c ****                {
3326:fltk-1.3.4-1/png/png.c ****                   if (s00 < d00) --s32; /* carry */
3327:fltk-1.3.4-1/png/png.c ****                   s32 -= d32, s00 -= d00, result += 1<<bitshift;
3328:fltk-1.3.4-1/png/png.c ****                }
3329:fltk-1.3.4-1/png/png.c **** 
3330:fltk-1.3.4-1/png/png.c ****                else
3331:fltk-1.3.4-1/png/png.c ****                   if (s32 == d32 && s00 >= d00)
3332:fltk-1.3.4-1/png/png.c ****                      s32 = 0, s00 -= d00, result += 1<<bitshift;
3333:fltk-1.3.4-1/png/png.c ****             }
3334:fltk-1.3.4-1/png/png.c **** 
3335:fltk-1.3.4-1/png/png.c ****             /* Handle the rounding. */
3336:fltk-1.3.4-1/png/png.c ****             if (s00 >= (D >> 1))
3337:fltk-1.3.4-1/png/png.c ****                ++result;
3338:fltk-1.3.4-1/png/png.c **** 
3339:fltk-1.3.4-1/png/png.c ****             if (negative != 0)
3340:fltk-1.3.4-1/png/png.c ****                result = -result;
3341:fltk-1.3.4-1/png/png.c **** 
3342:fltk-1.3.4-1/png/png.c ****             /* Check for overflow. */
3343:fltk-1.3.4-1/png/png.c ****             if ((negative != 0 && result <= 0) ||
3344:fltk-1.3.4-1/png/png.c ****                 (negative == 0 && result >= 0))
3345:fltk-1.3.4-1/png/png.c ****             {
3346:fltk-1.3.4-1/png/png.c ****                *res = result;
3347:fltk-1.3.4-1/png/png.c ****                return 1;
3348:fltk-1.3.4-1/png/png.c ****             }
3349:fltk-1.3.4-1/png/png.c ****          }
3350:fltk-1.3.4-1/png/png.c **** #endif
3351:fltk-1.3.4-1/png/png.c ****       }
3352:fltk-1.3.4-1/png/png.c ****    }
3353:fltk-1.3.4-1/png/png.c **** 
3354:fltk-1.3.4-1/png/png.c ****    return 0;
3355:fltk-1.3.4-1/png/png.c **** }
3356:fltk-1.3.4-1/png/png.c **** #endif /* READ_GAMMA || INCH_CONVERSIONS */
3357:fltk-1.3.4-1/png/png.c **** 
3358:fltk-1.3.4-1/png/png.c **** #if defined(PNG_READ_GAMMA_SUPPORTED) || defined(PNG_INCH_CONVERSIONS_SUPPORTED)
3359:fltk-1.3.4-1/png/png.c **** /* The following is for when the caller doesn't much care about the
3360:fltk-1.3.4-1/png/png.c ****  * result.
3361:fltk-1.3.4-1/png/png.c ****  */
3362:fltk-1.3.4-1/png/png.c **** png_fixed_point
3363:fltk-1.3.4-1/png/png.c **** png_muldiv_warn(png_const_structrp png_ptr, png_fixed_point a, png_int_32 times,
3364:fltk-1.3.4-1/png/png.c ****     png_int_32 divisor)
3365:fltk-1.3.4-1/png/png.c **** {
3366:fltk-1.3.4-1/png/png.c ****    png_fixed_point result;
3367:fltk-1.3.4-1/png/png.c **** 
3368:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&result, a, times, divisor) != 0)
3369:fltk-1.3.4-1/png/png.c ****       return result;
3370:fltk-1.3.4-1/png/png.c **** 
3371:fltk-1.3.4-1/png/png.c ****    png_warning(png_ptr, "fixed point overflow ignored");
3372:fltk-1.3.4-1/png/png.c ****    return 0;
3373:fltk-1.3.4-1/png/png.c **** }
3374:fltk-1.3.4-1/png/png.c **** #endif
3375:fltk-1.3.4-1/png/png.c **** 
3376:fltk-1.3.4-1/png/png.c **** #ifdef PNG_GAMMA_SUPPORTED /* more fixed point functions for gamma */
3377:fltk-1.3.4-1/png/png.c **** /* Calculate a reciprocal, return 0 on div-by-zero or overflow. */
3378:fltk-1.3.4-1/png/png.c **** png_fixed_point
3379:fltk-1.3.4-1/png/png.c **** png_reciprocal(png_fixed_point a)
3380:fltk-1.3.4-1/png/png.c **** {
3381:fltk-1.3.4-1/png/png.c **** #ifdef PNG_FLOATING_ARITHMETIC_SUPPORTED
3382:fltk-1.3.4-1/png/png.c ****    double r = floor(1E10/a+.5);
3383:fltk-1.3.4-1/png/png.c **** 
3384:fltk-1.3.4-1/png/png.c ****    if (r <= 2147483647. && r >= -2147483648.)
3385:fltk-1.3.4-1/png/png.c ****       return (png_fixed_point)r;
3386:fltk-1.3.4-1/png/png.c **** #else
3387:fltk-1.3.4-1/png/png.c ****    png_fixed_point res;
3388:fltk-1.3.4-1/png/png.c **** 
3389:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&res, 100000, 100000, a) != 0)
3390:fltk-1.3.4-1/png/png.c ****       return res;
3391:fltk-1.3.4-1/png/png.c **** #endif
3392:fltk-1.3.4-1/png/png.c **** 
3393:fltk-1.3.4-1/png/png.c ****    return 0; /* error/overflow */
3394:fltk-1.3.4-1/png/png.c **** }
3395:fltk-1.3.4-1/png/png.c **** 
3396:fltk-1.3.4-1/png/png.c **** /* This is the shared test on whether a gamma value is 'significant' - whether
3397:fltk-1.3.4-1/png/png.c ****  * it is worth doing gamma correction.
3398:fltk-1.3.4-1/png/png.c ****  */
3399:fltk-1.3.4-1/png/png.c **** int /* PRIVATE */
3400:fltk-1.3.4-1/png/png.c **** png_gamma_significant(png_fixed_point gamma_val)
3401:fltk-1.3.4-1/png/png.c **** {
3402:fltk-1.3.4-1/png/png.c ****    return gamma_val < PNG_FP_1 - PNG_GAMMA_THRESHOLD_FIXED ||
3403:fltk-1.3.4-1/png/png.c ****        gamma_val > PNG_FP_1 + PNG_GAMMA_THRESHOLD_FIXED;
3404:fltk-1.3.4-1/png/png.c **** }
3405:fltk-1.3.4-1/png/png.c **** #endif
3406:fltk-1.3.4-1/png/png.c **** 
3407:fltk-1.3.4-1/png/png.c **** #ifdef PNG_READ_GAMMA_SUPPORTED
3408:fltk-1.3.4-1/png/png.c **** #if defined(PNG_16BIT_SUPPORTED) || !defined(PNG_FLOATING_ARITHMETIC_SUPPORTED)
3409:fltk-1.3.4-1/png/png.c **** /* A local convenience routine. */
3410:fltk-1.3.4-1/png/png.c **** static png_fixed_point
3411:fltk-1.3.4-1/png/png.c **** png_product2(png_fixed_point a, png_fixed_point b)
3412:fltk-1.3.4-1/png/png.c **** {
3413:fltk-1.3.4-1/png/png.c ****    /* The required result is 1/a * 1/b; the following preserves accuracy. */
3414:fltk-1.3.4-1/png/png.c **** #    ifdef PNG_FLOATING_ARITHMETIC_SUPPORTED
3415:fltk-1.3.4-1/png/png.c ****    double r = a * 1E-5;
3416:fltk-1.3.4-1/png/png.c ****    r *= b;
3417:fltk-1.3.4-1/png/png.c ****    r = floor(r+.5);
3418:fltk-1.3.4-1/png/png.c **** 
3419:fltk-1.3.4-1/png/png.c ****    if (r <= 2147483647. && r >= -2147483648.)
3420:fltk-1.3.4-1/png/png.c ****       return (png_fixed_point)r;
3421:fltk-1.3.4-1/png/png.c **** #    else
3422:fltk-1.3.4-1/png/png.c ****    png_fixed_point res;
3423:fltk-1.3.4-1/png/png.c **** 
3424:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&res, a, b, 100000) != 0)
3425:fltk-1.3.4-1/png/png.c ****       return res;
3426:fltk-1.3.4-1/png/png.c **** #    endif
3427:fltk-1.3.4-1/png/png.c **** 
3428:fltk-1.3.4-1/png/png.c ****    return 0; /* overflow */
3429:fltk-1.3.4-1/png/png.c **** }
3430:fltk-1.3.4-1/png/png.c **** #endif /* 16BIT || !FLOATING_ARITHMETIC */
3431:fltk-1.3.4-1/png/png.c **** 
3432:fltk-1.3.4-1/png/png.c **** /* The inverse of the above. */
3433:fltk-1.3.4-1/png/png.c **** png_fixed_point
3434:fltk-1.3.4-1/png/png.c **** png_reciprocal2(png_fixed_point a, png_fixed_point b)
3435:fltk-1.3.4-1/png/png.c **** {
3436:fltk-1.3.4-1/png/png.c ****    /* The required result is 1/a * 1/b; the following preserves accuracy. */
3437:fltk-1.3.4-1/png/png.c **** #ifdef PNG_FLOATING_ARITHMETIC_SUPPORTED
3438:fltk-1.3.4-1/png/png.c ****    double r = 1E15/a;
3439:fltk-1.3.4-1/png/png.c ****    r /= b;
3440:fltk-1.3.4-1/png/png.c ****    r = floor(r+.5);
3441:fltk-1.3.4-1/png/png.c **** 
3442:fltk-1.3.4-1/png/png.c ****    if (r <= 2147483647. && r >= -2147483648.)
3443:fltk-1.3.4-1/png/png.c ****       return (png_fixed_point)r;
3444:fltk-1.3.4-1/png/png.c **** #else
3445:fltk-1.3.4-1/png/png.c ****    /* This may overflow because the range of png_fixed_point isn't symmetric,
3446:fltk-1.3.4-1/png/png.c ****     * but this API is only used for the product of file and screen gamma so it
3447:fltk-1.3.4-1/png/png.c ****     * doesn't matter that the smallest number it can produce is 1/21474, not
3448:fltk-1.3.4-1/png/png.c ****     * 1/100000
3449:fltk-1.3.4-1/png/png.c ****     */
3450:fltk-1.3.4-1/png/png.c ****    png_fixed_point res = png_product2(a, b);
3451:fltk-1.3.4-1/png/png.c **** 
3452:fltk-1.3.4-1/png/png.c ****    if (res != 0)
3453:fltk-1.3.4-1/png/png.c ****       return png_reciprocal(res);
3454:fltk-1.3.4-1/png/png.c **** #endif
3455:fltk-1.3.4-1/png/png.c **** 
3456:fltk-1.3.4-1/png/png.c ****    return 0; /* overflow */
3457:fltk-1.3.4-1/png/png.c **** }
3458:fltk-1.3.4-1/png/png.c **** #endif /* READ_GAMMA */
3459:fltk-1.3.4-1/png/png.c **** 
3460:fltk-1.3.4-1/png/png.c **** #ifdef PNG_READ_GAMMA_SUPPORTED /* gamma table code */
3461:fltk-1.3.4-1/png/png.c **** #ifndef PNG_FLOATING_ARITHMETIC_SUPPORTED
3462:fltk-1.3.4-1/png/png.c **** /* Fixed point gamma.
3463:fltk-1.3.4-1/png/png.c ****  *
3464:fltk-1.3.4-1/png/png.c ****  * The code to calculate the tables used below can be found in the shell script
3465:fltk-1.3.4-1/png/png.c ****  * contrib/tools/intgamma.sh
3466:fltk-1.3.4-1/png/png.c ****  *
3467:fltk-1.3.4-1/png/png.c ****  * To calculate gamma this code implements fast log() and exp() calls using only
3468:fltk-1.3.4-1/png/png.c ****  * fixed point arithmetic.  This code has sufficient precision for either 8-bit
3469:fltk-1.3.4-1/png/png.c ****  * or 16-bit sample values.
3470:fltk-1.3.4-1/png/png.c ****  *
3471:fltk-1.3.4-1/png/png.c ****  * The tables used here were calculated using simple 'bc' programs, but C double
3472:fltk-1.3.4-1/png/png.c ****  * precision floating point arithmetic would work fine.
3473:fltk-1.3.4-1/png/png.c ****  *
3474:fltk-1.3.4-1/png/png.c ****  * 8-bit log table
3475:fltk-1.3.4-1/png/png.c ****  *   This is a table of -log(value/255)/log(2) for 'value' in the range 128 to
3476:fltk-1.3.4-1/png/png.c ****  *   255, so it's the base 2 logarithm of a normalized 8-bit floating point
3477:fltk-1.3.4-1/png/png.c ****  *   mantissa.  The numbers are 32-bit fractions.
3478:fltk-1.3.4-1/png/png.c ****  */
3479:fltk-1.3.4-1/png/png.c **** static const png_uint_32
3480:fltk-1.3.4-1/png/png.c **** png_8bit_l2[128] =
3481:fltk-1.3.4-1/png/png.c **** {
3482:fltk-1.3.4-1/png/png.c ****    4270715492U, 4222494797U, 4174646467U, 4127164793U, 4080044201U, 4033279239U,
3483:fltk-1.3.4-1/png/png.c ****    3986864580U, 3940795015U, 3895065449U, 3849670902U, 3804606499U, 3759867474U,
3484:fltk-1.3.4-1/png/png.c ****    3715449162U, 3671346997U, 3627556511U, 3584073329U, 3540893168U, 3498011834U,
3485:fltk-1.3.4-1/png/png.c ****    3455425220U, 3413129301U, 3371120137U, 3329393864U, 3287946700U, 3246774933U,
3486:fltk-1.3.4-1/png/png.c ****    3205874930U, 3165243125U, 3124876025U, 3084770202U, 3044922296U, 3005329011U,
3487:fltk-1.3.4-1/png/png.c ****    2965987113U, 2926893432U, 2888044853U, 2849438323U, 2811070844U, 2772939474U,
3488:fltk-1.3.4-1/png/png.c ****    2735041326U, 2697373562U, 2659933400U, 2622718104U, 2585724991U, 2548951424U,
3489:fltk-1.3.4-1/png/png.c ****    2512394810U, 2476052606U, 2439922311U, 2404001468U, 2368287663U, 2332778523U,
3490:fltk-1.3.4-1/png/png.c ****    2297471715U, 2262364947U, 2227455964U, 2192742551U, 2158222529U, 2123893754U,
3491:fltk-1.3.4-1/png/png.c ****    2089754119U, 2055801552U, 2022034013U, 1988449497U, 1955046031U, 1921821672U,
3492:fltk-1.3.4-1/png/png.c ****    1888774511U, 1855902668U, 1823204291U, 1790677560U, 1758320682U, 1726131893U,
3493:fltk-1.3.4-1/png/png.c ****    1694109454U, 1662251657U, 1630556815U, 1599023271U, 1567649391U, 1536433567U,
3494:fltk-1.3.4-1/png/png.c ****    1505374214U, 1474469770U, 1443718700U, 1413119487U, 1382670639U, 1352370686U,
3495:fltk-1.3.4-1/png/png.c ****    1322218179U, 1292211689U, 1262349810U, 1232631153U, 1203054352U, 1173618059U,
3496:fltk-1.3.4-1/png/png.c ****    1144320946U, 1115161701U, 1086139034U, 1057251672U, 1028498358U, 999877854U,
3497:fltk-1.3.4-1/png/png.c ****    971388940U, 943030410U, 914801076U, 886699767U, 858725327U, 830876614U,
3498:fltk-1.3.4-1/png/png.c ****    803152505U, 775551890U, 748073672U, 720716771U, 693480120U, 666362667U,
3499:fltk-1.3.4-1/png/png.c ****    639363374U, 612481215U, 585715177U, 559064263U, 532527486U, 506103872U,
3500:fltk-1.3.4-1/png/png.c ****    479792461U, 453592303U, 427502463U, 401522014U, 375650043U, 349885648U,
3501:fltk-1.3.4-1/png/png.c ****    324227938U, 298676034U, 273229066U, 247886176U, 222646516U, 197509248U,
3502:fltk-1.3.4-1/png/png.c ****    172473545U, 147538590U, 122703574U, 97967701U, 73330182U, 48790236U,
3503:fltk-1.3.4-1/png/png.c ****    24347096U, 0U
3504:fltk-1.3.4-1/png/png.c **** 
3505:fltk-1.3.4-1/png/png.c **** #if 0
3506:fltk-1.3.4-1/png/png.c ****    /* The following are the values for 16-bit tables - these work fine for the
3507:fltk-1.3.4-1/png/png.c ****     * 8-bit conversions but produce very slightly larger errors in the 16-bit
3508:fltk-1.3.4-1/png/png.c ****     * log (about 1.2 as opposed to 0.7 absolute error in the final value).  To
3509:fltk-1.3.4-1/png/png.c ****     * use these all the shifts below must be adjusted appropriately.
3510:fltk-1.3.4-1/png/png.c ****     */
3511:fltk-1.3.4-1/png/png.c ****    65166, 64430, 63700, 62976, 62257, 61543, 60835, 60132, 59434, 58741, 58054,
3512:fltk-1.3.4-1/png/png.c ****    57371, 56693, 56020, 55352, 54689, 54030, 53375, 52726, 52080, 51439, 50803,
3513:fltk-1.3.4-1/png/png.c ****    50170, 49542, 48918, 48298, 47682, 47070, 46462, 45858, 45257, 44661, 44068,
3514:fltk-1.3.4-1/png/png.c ****    43479, 42894, 42312, 41733, 41159, 40587, 40020, 39455, 38894, 38336, 37782,
3515:fltk-1.3.4-1/png/png.c ****    37230, 36682, 36137, 35595, 35057, 34521, 33988, 33459, 32932, 32408, 31887,
3516:fltk-1.3.4-1/png/png.c ****    31369, 30854, 30341, 29832, 29325, 28820, 28319, 27820, 27324, 26830, 26339,
3517:fltk-1.3.4-1/png/png.c ****    25850, 25364, 24880, 24399, 23920, 23444, 22970, 22499, 22029, 21562, 21098,
3518:fltk-1.3.4-1/png/png.c ****    20636, 20175, 19718, 19262, 18808, 18357, 17908, 17461, 17016, 16573, 16132,
3519:fltk-1.3.4-1/png/png.c ****    15694, 15257, 14822, 14390, 13959, 13530, 13103, 12678, 12255, 11834, 11415,
3520:fltk-1.3.4-1/png/png.c ****    10997, 10582, 10168, 9756, 9346, 8937, 8531, 8126, 7723, 7321, 6921, 6523,
3521:fltk-1.3.4-1/png/png.c ****    6127, 5732, 5339, 4947, 4557, 4169, 3782, 3397, 3014, 2632, 2251, 1872, 1495,
3522:fltk-1.3.4-1/png/png.c ****    1119, 744, 372
3523:fltk-1.3.4-1/png/png.c **** #endif
3524:fltk-1.3.4-1/png/png.c **** };
3525:fltk-1.3.4-1/png/png.c **** 
3526:fltk-1.3.4-1/png/png.c **** static png_int_32
3527:fltk-1.3.4-1/png/png.c **** png_log8bit(unsigned int x)
3528:fltk-1.3.4-1/png/png.c **** {
3529:fltk-1.3.4-1/png/png.c ****    unsigned int lg2 = 0;
3530:fltk-1.3.4-1/png/png.c ****    /* Each time 'x' is multiplied by 2, 1 must be subtracted off the final log,
3531:fltk-1.3.4-1/png/png.c ****     * because the log is actually negate that means adding 1.  The final
3532:fltk-1.3.4-1/png/png.c ****     * returned value thus has the range 0 (for 255 input) to 7.994 (for 1
3533:fltk-1.3.4-1/png/png.c ****     * input), return -1 for the overflow (log 0) case, - so the result is
3534:fltk-1.3.4-1/png/png.c ****     * always at most 19 bits.
3535:fltk-1.3.4-1/png/png.c ****     */
3536:fltk-1.3.4-1/png/png.c ****    if ((x &= 0xff) == 0)
3537:fltk-1.3.4-1/png/png.c ****       return -1;
3538:fltk-1.3.4-1/png/png.c **** 
3539:fltk-1.3.4-1/png/png.c ****    if ((x & 0xf0) == 0)
3540:fltk-1.3.4-1/png/png.c ****       lg2  = 4, x <<= 4;
3541:fltk-1.3.4-1/png/png.c **** 
3542:fltk-1.3.4-1/png/png.c ****    if ((x & 0xc0) == 0)
3543:fltk-1.3.4-1/png/png.c ****       lg2 += 2, x <<= 2;
3544:fltk-1.3.4-1/png/png.c **** 
3545:fltk-1.3.4-1/png/png.c ****    if ((x & 0x80) == 0)
3546:fltk-1.3.4-1/png/png.c ****       lg2 += 1, x <<= 1;
3547:fltk-1.3.4-1/png/png.c **** 
3548:fltk-1.3.4-1/png/png.c ****    /* result is at most 19 bits, so this cast is safe: */
3549:fltk-1.3.4-1/png/png.c ****    return (png_int_32)((lg2 << 16) + ((png_8bit_l2[x-128]+32768)>>16));
3550:fltk-1.3.4-1/png/png.c **** }
3551:fltk-1.3.4-1/png/png.c **** 
3552:fltk-1.3.4-1/png/png.c **** /* The above gives exact (to 16 binary places) log2 values for 8-bit images,
3553:fltk-1.3.4-1/png/png.c ****  * for 16-bit images we use the most significant 8 bits of the 16-bit value to
3554:fltk-1.3.4-1/png/png.c ****  * get an approximation then multiply the approximation by a correction factor
3555:fltk-1.3.4-1/png/png.c ****  * determined by the remaining up to 8 bits.  This requires an additional step
3556:fltk-1.3.4-1/png/png.c ****  * in the 16-bit case.
3557:fltk-1.3.4-1/png/png.c ****  *
3558:fltk-1.3.4-1/png/png.c ****  * We want log2(value/65535), we have log2(v'/255), where:
3559:fltk-1.3.4-1/png/png.c ****  *
3560:fltk-1.3.4-1/png/png.c ****  *    value = v' * 256 + v''
3561:fltk-1.3.4-1/png/png.c ****  *          = v' * f
3562:fltk-1.3.4-1/png/png.c ****  *
3563:fltk-1.3.4-1/png/png.c ****  * So f is value/v', which is equal to (256+v''/v') since v' is in the range 128
3564:fltk-1.3.4-1/png/png.c ****  * to 255 and v'' is in the range 0 to 255 f will be in the range 256 to less
3565:fltk-1.3.4-1/png/png.c ****  * than 258.  The final factor also needs to correct for the fact that our 8-bit
3566:fltk-1.3.4-1/png/png.c ****  * value is scaled by 255, whereas the 16-bit values must be scaled by 65535.
3567:fltk-1.3.4-1/png/png.c ****  *
3568:fltk-1.3.4-1/png/png.c ****  * This gives a final formula using a calculated value 'x' which is value/v' and
3569:fltk-1.3.4-1/png/png.c ****  * scaling by 65536 to match the above table:
3570:fltk-1.3.4-1/png/png.c ****  *
3571:fltk-1.3.4-1/png/png.c ****  *   log2(x/257) * 65536
3572:fltk-1.3.4-1/png/png.c ****  *
3573:fltk-1.3.4-1/png/png.c ****  * Since these numbers are so close to '1' we can use simple linear
3574:fltk-1.3.4-1/png/png.c ****  * interpolation between the two end values 256/257 (result -368.61) and 258/257
3575:fltk-1.3.4-1/png/png.c ****  * (result 367.179).  The values used below are scaled by a further 64 to give
3576:fltk-1.3.4-1/png/png.c ****  * 16-bit precision in the interpolation:
3577:fltk-1.3.4-1/png/png.c ****  *
3578:fltk-1.3.4-1/png/png.c ****  * Start (256): -23591
3579:fltk-1.3.4-1/png/png.c ****  * Zero  (257):      0
3580:fltk-1.3.4-1/png/png.c ****  * End   (258):  23499
3581:fltk-1.3.4-1/png/png.c ****  */
3582:fltk-1.3.4-1/png/png.c **** #ifdef PNG_16BIT_SUPPORTED
3583:fltk-1.3.4-1/png/png.c **** static png_int_32
3584:fltk-1.3.4-1/png/png.c **** png_log16bit(png_uint_32 x)
3585:fltk-1.3.4-1/png/png.c **** {
3586:fltk-1.3.4-1/png/png.c ****    unsigned int lg2 = 0;
3587:fltk-1.3.4-1/png/png.c **** 
3588:fltk-1.3.4-1/png/png.c ****    /* As above, but now the input has 16 bits. */
3589:fltk-1.3.4-1/png/png.c ****    if ((x &= 0xffff) == 0)
3590:fltk-1.3.4-1/png/png.c ****       return -1;
3591:fltk-1.3.4-1/png/png.c **** 
3592:fltk-1.3.4-1/png/png.c ****    if ((x & 0xff00) == 0)
3593:fltk-1.3.4-1/png/png.c ****       lg2  = 8, x <<= 8;
3594:fltk-1.3.4-1/png/png.c **** 
3595:fltk-1.3.4-1/png/png.c ****    if ((x & 0xf000) == 0)
3596:fltk-1.3.4-1/png/png.c ****       lg2 += 4, x <<= 4;
3597:fltk-1.3.4-1/png/png.c **** 
3598:fltk-1.3.4-1/png/png.c ****    if ((x & 0xc000) == 0)
3599:fltk-1.3.4-1/png/png.c ****       lg2 += 2, x <<= 2;
3600:fltk-1.3.4-1/png/png.c **** 
3601:fltk-1.3.4-1/png/png.c ****    if ((x & 0x8000) == 0)
3602:fltk-1.3.4-1/png/png.c ****       lg2 += 1, x <<= 1;
3603:fltk-1.3.4-1/png/png.c **** 
3604:fltk-1.3.4-1/png/png.c ****    /* Calculate the base logarithm from the top 8 bits as a 28-bit fractional
3605:fltk-1.3.4-1/png/png.c ****     * value.
3606:fltk-1.3.4-1/png/png.c ****     */
3607:fltk-1.3.4-1/png/png.c ****    lg2 <<= 28;
3608:fltk-1.3.4-1/png/png.c ****    lg2 += (png_8bit_l2[(x>>8)-128]+8) >> 4;
3609:fltk-1.3.4-1/png/png.c **** 
3610:fltk-1.3.4-1/png/png.c ****    /* Now we need to interpolate the factor, this requires a division by the top
3611:fltk-1.3.4-1/png/png.c ****     * 8 bits.  Do this with maximum precision.
3612:fltk-1.3.4-1/png/png.c ****     */
3613:fltk-1.3.4-1/png/png.c ****    x = ((x << 16) + (x >> 9)) / (x >> 8);
3614:fltk-1.3.4-1/png/png.c **** 
3615:fltk-1.3.4-1/png/png.c ****    /* Since we divided by the top 8 bits of 'x' there will be a '1' at 1<<24,
3616:fltk-1.3.4-1/png/png.c ****     * the value at 1<<16 (ignoring this) will be 0 or 1; this gives us exactly
3617:fltk-1.3.4-1/png/png.c ****     * 16 bits to interpolate to get the low bits of the result.  Round the
3618:fltk-1.3.4-1/png/png.c ****     * answer.  Note that the end point values are scaled by 64 to retain overall
3619:fltk-1.3.4-1/png/png.c ****     * precision and that 'lg2' is current scaled by an extra 12 bits, so adjust
3620:fltk-1.3.4-1/png/png.c ****     * the overall scaling by 6-12.  Round at every step.
3621:fltk-1.3.4-1/png/png.c ****     */
3622:fltk-1.3.4-1/png/png.c ****    x -= 1U << 24;
3623:fltk-1.3.4-1/png/png.c **** 
3624:fltk-1.3.4-1/png/png.c ****    if (x <= 65536U) /* <= '257' */
3625:fltk-1.3.4-1/png/png.c ****       lg2 += ((23591U * (65536U-x)) + (1U << (16+6-12-1))) >> (16+6-12);
3626:fltk-1.3.4-1/png/png.c **** 
3627:fltk-1.3.4-1/png/png.c ****    else
3628:fltk-1.3.4-1/png/png.c ****       lg2 -= ((23499U * (x-65536U)) + (1U << (16+6-12-1))) >> (16+6-12);
3629:fltk-1.3.4-1/png/png.c **** 
3630:fltk-1.3.4-1/png/png.c ****    /* Safe, because the result can't have more than 20 bits: */
3631:fltk-1.3.4-1/png/png.c ****    return (png_int_32)((lg2 + 2048) >> 12);
3632:fltk-1.3.4-1/png/png.c **** }
3633:fltk-1.3.4-1/png/png.c **** #endif /* 16BIT */
3634:fltk-1.3.4-1/png/png.c **** 
3635:fltk-1.3.4-1/png/png.c **** /* The 'exp()' case must invert the above, taking a 20-bit fixed point
3636:fltk-1.3.4-1/png/png.c ****  * logarithmic value and returning a 16 or 8-bit number as appropriate.  In
3637:fltk-1.3.4-1/png/png.c ****  * each case only the low 16 bits are relevant - the fraction - since the
3638:fltk-1.3.4-1/png/png.c ****  * integer bits (the top 4) simply determine a shift.
3639:fltk-1.3.4-1/png/png.c ****  *
3640:fltk-1.3.4-1/png/png.c ****  * The worst case is the 16-bit distinction between 65535 and 65534. This
3641:fltk-1.3.4-1/png/png.c ****  * requires perhaps spurious accuracy in the decoding of the logarithm to
3642:fltk-1.3.4-1/png/png.c ****  * distinguish log2(65535/65534.5) - 10^-5 or 17 bits.  There is little chance
3643:fltk-1.3.4-1/png/png.c ****  * of getting this accuracy in practice.
3644:fltk-1.3.4-1/png/png.c ****  *
3645:fltk-1.3.4-1/png/png.c ****  * To deal with this the following exp() function works out the exponent of the
3646:fltk-1.3.4-1/png/png.c ****  * frational part of the logarithm by using an accurate 32-bit value from the
3647:fltk-1.3.4-1/png/png.c ****  * top four fractional bits then multiplying in the remaining bits.
3648:fltk-1.3.4-1/png/png.c ****  */
3649:fltk-1.3.4-1/png/png.c **** static const png_uint_32
3650:fltk-1.3.4-1/png/png.c **** png_32bit_exp[16] =
3651:fltk-1.3.4-1/png/png.c **** {
3652:fltk-1.3.4-1/png/png.c ****    /* NOTE: the first entry is deliberately set to the maximum 32-bit value. */
3653:fltk-1.3.4-1/png/png.c ****    4294967295U, 4112874773U, 3938502376U, 3771522796U, 3611622603U, 3458501653U,
3654:fltk-1.3.4-1/png/png.c ****    3311872529U, 3171459999U, 3037000500U, 2908241642U, 2784941738U, 2666869345U,
3655:fltk-1.3.4-1/png/png.c ****    2553802834U, 2445529972U, 2341847524U, 2242560872U
3656:fltk-1.3.4-1/png/png.c **** };
3657:fltk-1.3.4-1/png/png.c **** 
3658:fltk-1.3.4-1/png/png.c **** /* Adjustment table; provided to explain the numbers in the code below. */
3659:fltk-1.3.4-1/png/png.c **** #if 0
3660:fltk-1.3.4-1/png/png.c **** for (i=11;i>=0;--i){ print i, " ", (1 - e(-(2^i)/65536*l(2))) * 2^(32-i), "\n"}
3661:fltk-1.3.4-1/png/png.c ****    11 44937.64284865548751208448
3662:fltk-1.3.4-1/png/png.c ****    10 45180.98734845585101160448
3663:fltk-1.3.4-1/png/png.c ****     9 45303.31936980687359311872
3664:fltk-1.3.4-1/png/png.c ****     8 45364.65110595323018870784
3665:fltk-1.3.4-1/png/png.c ****     7 45395.35850361789624614912
3666:fltk-1.3.4-1/png/png.c ****     6 45410.72259715102037508096
3667:fltk-1.3.4-1/png/png.c ****     5 45418.40724413220722311168
3668:fltk-1.3.4-1/png/png.c ****     4 45422.25021786898173001728
3669:fltk-1.3.4-1/png/png.c ****     3 45424.17186732298419044352
3670:fltk-1.3.4-1/png/png.c ****     2 45425.13273269940811464704
3671:fltk-1.3.4-1/png/png.c ****     1 45425.61317555035558641664
3672:fltk-1.3.4-1/png/png.c ****     0 45425.85339951654943850496
3673:fltk-1.3.4-1/png/png.c **** #endif
3674:fltk-1.3.4-1/png/png.c **** 
3675:fltk-1.3.4-1/png/png.c **** static png_uint_32
3676:fltk-1.3.4-1/png/png.c **** png_exp(png_fixed_point x)
3677:fltk-1.3.4-1/png/png.c **** {
3678:fltk-1.3.4-1/png/png.c ****    if (x > 0 && x <= 0xfffff) /* Else overflow or zero (underflow) */
3679:fltk-1.3.4-1/png/png.c ****    {
3680:fltk-1.3.4-1/png/png.c ****       /* Obtain a 4-bit approximation */
3681:fltk-1.3.4-1/png/png.c ****       png_uint_32 e = png_32bit_exp[(x >> 12) & 0xf];
3682:fltk-1.3.4-1/png/png.c **** 
3683:fltk-1.3.4-1/png/png.c ****       /* Incorporate the low 12 bits - these decrease the returned value by
3684:fltk-1.3.4-1/png/png.c ****        * multiplying by a number less than 1 if the bit is set.  The multiplier
3685:fltk-1.3.4-1/png/png.c ****        * is determined by the above table and the shift. Notice that the values
3686:fltk-1.3.4-1/png/png.c ****        * converge on 45426 and this is used to allow linear interpolation of the
3687:fltk-1.3.4-1/png/png.c ****        * low bits.
3688:fltk-1.3.4-1/png/png.c ****        */
3689:fltk-1.3.4-1/png/png.c ****       if (x & 0x800)
3690:fltk-1.3.4-1/png/png.c ****          e -= (((e >> 16) * 44938U) +  16U) >> 5;
3691:fltk-1.3.4-1/png/png.c **** 
3692:fltk-1.3.4-1/png/png.c ****       if (x & 0x400)
3693:fltk-1.3.4-1/png/png.c ****          e -= (((e >> 16) * 45181U) +  32U) >> 6;
3694:fltk-1.3.4-1/png/png.c **** 
3695:fltk-1.3.4-1/png/png.c ****       if (x & 0x200)
3696:fltk-1.3.4-1/png/png.c ****          e -= (((e >> 16) * 45303U) +  64U) >> 7;
3697:fltk-1.3.4-1/png/png.c **** 
3698:fltk-1.3.4-1/png/png.c ****       if (x & 0x100)
3699:fltk-1.3.4-1/png/png.c ****          e -= (((e >> 16) * 45365U) + 128U) >> 8;
3700:fltk-1.3.4-1/png/png.c **** 
3701:fltk-1.3.4-1/png/png.c ****       if (x & 0x080)
3702:fltk-1.3.4-1/png/png.c ****          e -= (((e >> 16) * 45395U) + 256U) >> 9;
3703:fltk-1.3.4-1/png/png.c **** 
3704:fltk-1.3.4-1/png/png.c ****       if (x & 0x040)
3705:fltk-1.3.4-1/png/png.c ****          e -= (((e >> 16) * 45410U) + 512U) >> 10;
3706:fltk-1.3.4-1/png/png.c **** 
3707:fltk-1.3.4-1/png/png.c ****       /* And handle the low 6 bits in a single block. */
3708:fltk-1.3.4-1/png/png.c ****       e -= (((e >> 16) * 355U * (x & 0x3fU)) + 256U) >> 9;
3709:fltk-1.3.4-1/png/png.c **** 
3710:fltk-1.3.4-1/png/png.c ****       /* Handle the upper bits of x. */
3711:fltk-1.3.4-1/png/png.c ****       e >>= x >> 16;
3712:fltk-1.3.4-1/png/png.c ****       return e;
3713:fltk-1.3.4-1/png/png.c ****    }
3714:fltk-1.3.4-1/png/png.c **** 
3715:fltk-1.3.4-1/png/png.c ****    /* Check for overflow */
3716:fltk-1.3.4-1/png/png.c ****    if (x <= 0)
3717:fltk-1.3.4-1/png/png.c ****       return png_32bit_exp[0];
3718:fltk-1.3.4-1/png/png.c **** 
3719:fltk-1.3.4-1/png/png.c ****    /* Else underflow */
3720:fltk-1.3.4-1/png/png.c ****    return 0;
3721:fltk-1.3.4-1/png/png.c **** }
3722:fltk-1.3.4-1/png/png.c **** 
3723:fltk-1.3.4-1/png/png.c **** static png_byte
3724:fltk-1.3.4-1/png/png.c **** png_exp8bit(png_fixed_point lg2)
3725:fltk-1.3.4-1/png/png.c **** {
3726:fltk-1.3.4-1/png/png.c ****    /* Get a 32-bit value: */
3727:fltk-1.3.4-1/png/png.c ****    png_uint_32 x = png_exp(lg2);
3728:fltk-1.3.4-1/png/png.c **** 
3729:fltk-1.3.4-1/png/png.c ****    /* Convert the 32-bit value to 0..255 by multiplying by 256-1. Note that the
3730:fltk-1.3.4-1/png/png.c ****     * second, rounding, step can't overflow because of the first, subtraction,
3731:fltk-1.3.4-1/png/png.c ****     * step.
3732:fltk-1.3.4-1/png/png.c ****     */
3733:fltk-1.3.4-1/png/png.c ****    x -= x >> 8;
3734:fltk-1.3.4-1/png/png.c ****    return (png_byte)((x + 0x7fffffU) >> 24);
3735:fltk-1.3.4-1/png/png.c **** }
3736:fltk-1.3.4-1/png/png.c **** 
3737:fltk-1.3.4-1/png/png.c **** #ifdef PNG_16BIT_SUPPORTED
3738:fltk-1.3.4-1/png/png.c **** static png_uint_16
3739:fltk-1.3.4-1/png/png.c **** png_exp16bit(png_fixed_point lg2)
3740:fltk-1.3.4-1/png/png.c **** {
3741:fltk-1.3.4-1/png/png.c ****    /* Get a 32-bit value: */
3742:fltk-1.3.4-1/png/png.c ****    png_uint_32 x = png_exp(lg2);
3743:fltk-1.3.4-1/png/png.c **** 
3744:fltk-1.3.4-1/png/png.c ****    /* Convert the 32-bit value to 0..65535 by multiplying by 65536-1: */
3745:fltk-1.3.4-1/png/png.c ****    x -= x >> 16;
3746:fltk-1.3.4-1/png/png.c ****    return (png_uint_16)((x + 32767U) >> 16);
3747:fltk-1.3.4-1/png/png.c **** }
3748:fltk-1.3.4-1/png/png.c **** #endif /* 16BIT */
3749:fltk-1.3.4-1/png/png.c **** #endif /* FLOATING_ARITHMETIC */
3750:fltk-1.3.4-1/png/png.c **** 
3751:fltk-1.3.4-1/png/png.c **** png_byte
3752:fltk-1.3.4-1/png/png.c **** png_gamma_8bit_correct(unsigned int value, png_fixed_point gamma_val)
3753:fltk-1.3.4-1/png/png.c **** {
3754:fltk-1.3.4-1/png/png.c ****    if (value > 0 && value < 255)
3755:fltk-1.3.4-1/png/png.c ****    {
3756:fltk-1.3.4-1/png/png.c **** #     ifdef PNG_FLOATING_ARITHMETIC_SUPPORTED
3757:fltk-1.3.4-1/png/png.c ****          /* 'value' is unsigned, ANSI-C90 requires the compiler to correctly
3758:fltk-1.3.4-1/png/png.c ****           * convert this to a floating point value.  This includes values that
3759:fltk-1.3.4-1/png/png.c ****           * would overflow if 'value' were to be converted to 'int'.
3760:fltk-1.3.4-1/png/png.c ****           *
3761:fltk-1.3.4-1/png/png.c ****           * Apparently GCC, however, does an intermediate conversion to (int)
3762:fltk-1.3.4-1/png/png.c ****           * on some (ARM) but not all (x86) platforms, possibly because of
3763:fltk-1.3.4-1/png/png.c ****           * hardware FP limitations.  (E.g. if the hardware conversion always
3764:fltk-1.3.4-1/png/png.c ****           * assumes the integer register contains a signed value.)  This results
3765:fltk-1.3.4-1/png/png.c ****           * in ANSI-C undefined behavior for large values.
3766:fltk-1.3.4-1/png/png.c ****           *
3767:fltk-1.3.4-1/png/png.c ****           * Other implementations on the same machine might actually be ANSI-C90
3768:fltk-1.3.4-1/png/png.c ****           * conformant and therefore compile spurious extra code for the large
3769:fltk-1.3.4-1/png/png.c ****           * values.
3770:fltk-1.3.4-1/png/png.c ****           *
3771:fltk-1.3.4-1/png/png.c ****           * We can be reasonably sure that an unsigned to float conversion
3772:fltk-1.3.4-1/png/png.c ****           * won't be faster than an int to float one.  Therefore this code
3773:fltk-1.3.4-1/png/png.c ****           * assumes responsibility for the undefined behavior, which it knows
3774:fltk-1.3.4-1/png/png.c ****           * can't happen because of the check above.
3775:fltk-1.3.4-1/png/png.c ****           *
3776:fltk-1.3.4-1/png/png.c ****           * Note the argument to this routine is an (unsigned int) because, on
3777:fltk-1.3.4-1/png/png.c ****           * 16-bit platforms, it is assigned a value which might be out of
3778:fltk-1.3.4-1/png/png.c ****           * range for an (int); that would result in undefined behavior in the
3779:fltk-1.3.4-1/png/png.c ****           * caller if the *argument* ('value') were to be declared (int).
3780:fltk-1.3.4-1/png/png.c ****           */
3781:fltk-1.3.4-1/png/png.c ****          double r = floor(255*pow((int)/*SAFE*/value/255.,gamma_val*.00001)+.5);
3782:fltk-1.3.4-1/png/png.c ****          return (png_byte)r;
3783:fltk-1.3.4-1/png/png.c **** #     else
3784:fltk-1.3.4-1/png/png.c ****          png_int_32 lg2 = png_log8bit(value);
3785:fltk-1.3.4-1/png/png.c ****          png_fixed_point res;
3786:fltk-1.3.4-1/png/png.c **** 
3787:fltk-1.3.4-1/png/png.c ****          if (png_muldiv(&res, gamma_val, lg2, PNG_FP_1) != 0)
3788:fltk-1.3.4-1/png/png.c ****             return png_exp8bit(res);
3789:fltk-1.3.4-1/png/png.c **** 
3790:fltk-1.3.4-1/png/png.c ****          /* Overflow. */
3791:fltk-1.3.4-1/png/png.c ****          value = 0;
3792:fltk-1.3.4-1/png/png.c **** #     endif
3793:fltk-1.3.4-1/png/png.c ****    }
3794:fltk-1.3.4-1/png/png.c **** 
3795:fltk-1.3.4-1/png/png.c ****    return (png_byte)value;
3796:fltk-1.3.4-1/png/png.c **** }
3797:fltk-1.3.4-1/png/png.c **** 
3798:fltk-1.3.4-1/png/png.c **** #ifdef PNG_16BIT_SUPPORTED
3799:fltk-1.3.4-1/png/png.c **** png_uint_16
3800:fltk-1.3.4-1/png/png.c **** png_gamma_16bit_correct(unsigned int value, png_fixed_point gamma_val)
3801:fltk-1.3.4-1/png/png.c **** {
3802:fltk-1.3.4-1/png/png.c ****    if (value > 0 && value < 65535)
3803:fltk-1.3.4-1/png/png.c ****    {
3804:fltk-1.3.4-1/png/png.c **** #     ifdef PNG_FLOATING_ARITHMETIC_SUPPORTED
3805:fltk-1.3.4-1/png/png.c ****          /* The same (unsigned int)->(double) constraints apply here as above,
3806:fltk-1.3.4-1/png/png.c ****           * however in this case the (unsigned int) to (int) conversion can
3807:fltk-1.3.4-1/png/png.c ****           * overflow on an ANSI-C90 compliant system so the cast needs to ensure
3808:fltk-1.3.4-1/png/png.c ****           * that this is not possible.
3809:fltk-1.3.4-1/png/png.c ****           */
3810:fltk-1.3.4-1/png/png.c ****          double r = floor(65535*pow((png_int_32)value/65535.,
3811:fltk-1.3.4-1/png/png.c ****                      gamma_val*.00001)+.5);
3812:fltk-1.3.4-1/png/png.c ****          return (png_uint_16)r;
3813:fltk-1.3.4-1/png/png.c **** #     else
3814:fltk-1.3.4-1/png/png.c ****          png_int_32 lg2 = png_log16bit(value);
3815:fltk-1.3.4-1/png/png.c ****          png_fixed_point res;
3816:fltk-1.3.4-1/png/png.c **** 
3817:fltk-1.3.4-1/png/png.c ****          if (png_muldiv(&res, gamma_val, lg2, PNG_FP_1) != 0)
3818:fltk-1.3.4-1/png/png.c ****             return png_exp16bit(res);
3819:fltk-1.3.4-1/png/png.c **** 
3820:fltk-1.3.4-1/png/png.c ****          /* Overflow. */
3821:fltk-1.3.4-1/png/png.c ****          value = 0;
3822:fltk-1.3.4-1/png/png.c **** #     endif
3823:fltk-1.3.4-1/png/png.c ****    }
3824:fltk-1.3.4-1/png/png.c **** 
3825:fltk-1.3.4-1/png/png.c ****    return (png_uint_16)value;
3826:fltk-1.3.4-1/png/png.c **** }
3827:fltk-1.3.4-1/png/png.c **** #endif /* 16BIT */
3828:fltk-1.3.4-1/png/png.c **** 
3829:fltk-1.3.4-1/png/png.c **** /* This does the right thing based on the bit_depth field of the
3830:fltk-1.3.4-1/png/png.c ****  * png_struct, interpreting values as 8-bit or 16-bit.  While the result
3831:fltk-1.3.4-1/png/png.c ****  * is nominally a 16-bit value if bit depth is 8 then the result is
3832:fltk-1.3.4-1/png/png.c ****  * 8-bit (as are the arguments.)
3833:fltk-1.3.4-1/png/png.c ****  */
3834:fltk-1.3.4-1/png/png.c **** png_uint_16 /* PRIVATE */
3835:fltk-1.3.4-1/png/png.c **** png_gamma_correct(png_structrp png_ptr, unsigned int value,
3836:fltk-1.3.4-1/png/png.c ****     png_fixed_point gamma_val)
3837:fltk-1.3.4-1/png/png.c **** {
3838:fltk-1.3.4-1/png/png.c ****    if (png_ptr->bit_depth == 8)
3839:fltk-1.3.4-1/png/png.c ****       return png_gamma_8bit_correct(value, gamma_val);
3840:fltk-1.3.4-1/png/png.c **** 
3841:fltk-1.3.4-1/png/png.c **** #ifdef PNG_16BIT_SUPPORTED
3842:fltk-1.3.4-1/png/png.c ****    else
3843:fltk-1.3.4-1/png/png.c ****       return png_gamma_16bit_correct(value, gamma_val);
3844:fltk-1.3.4-1/png/png.c **** #else
3845:fltk-1.3.4-1/png/png.c ****       /* should not reach this */
3846:fltk-1.3.4-1/png/png.c ****       return 0;
3847:fltk-1.3.4-1/png/png.c **** #endif /* 16BIT */
3848:fltk-1.3.4-1/png/png.c **** }
3849:fltk-1.3.4-1/png/png.c **** 
3850:fltk-1.3.4-1/png/png.c **** #ifdef PNG_16BIT_SUPPORTED
3851:fltk-1.3.4-1/png/png.c **** /* Internal function to build a single 16-bit table - the table consists of
3852:fltk-1.3.4-1/png/png.c ****  * 'num' 256 entry subtables, where 'num' is determined by 'shift' - the amount
3853:fltk-1.3.4-1/png/png.c ****  * to shift the input values right (or 16-number_of_signifiant_bits).
3854:fltk-1.3.4-1/png/png.c ****  *
3855:fltk-1.3.4-1/png/png.c ****  * The caller is responsible for ensuring that the table gets cleaned up on
3856:fltk-1.3.4-1/png/png.c ****  * png_error (i.e. if one of the mallocs below fails) - i.e. the *table argument
3857:fltk-1.3.4-1/png/png.c ****  * should be somewhere that will be cleaned.
3858:fltk-1.3.4-1/png/png.c ****  */
3859:fltk-1.3.4-1/png/png.c **** static void
3860:fltk-1.3.4-1/png/png.c **** png_build_16bit_table(png_structrp png_ptr, png_uint_16pp *ptable,
3861:fltk-1.3.4-1/png/png.c ****    PNG_CONST unsigned int shift, PNG_CONST png_fixed_point gamma_val)
3862:fltk-1.3.4-1/png/png.c **** {
 178              		.loc 1 3862 0
 179              		.cfi_startproc
 180              	.LVL20:
 181 0000 4157     		pushq	%r15
 182              		.cfi_def_cfa_offset 16
 183              		.cfi_offset 15, -16
 184 0002 4156     		pushq	%r14
 185              		.cfi_def_cfa_offset 24
 186              		.cfi_offset 14, -24
3863:fltk-1.3.4-1/png/png.c ****    /* Various values derived from 'shift': */
3864:fltk-1.3.4-1/png/png.c ****    PNG_CONST unsigned int num = 1U << (8U - shift);
 187              		.loc 1 3864 0
 188 0004 41BE0100 		movl	$1, %r14d
 188      0000
3862:fltk-1.3.4-1/png/png.c ****    /* Various values derived from 'shift': */
 189              		.loc 1 3862 0
 190 000a 4155     		pushq	%r13
 191              		.cfi_def_cfa_offset 32
 192              		.cfi_offset 13, -32
 193 000c 4154     		pushq	%r12
 194              		.cfi_def_cfa_offset 40
 195              		.cfi_offset 12, -40
 196              		.loc 1 3864 0
 197 000e 4489F0   		movl	%r14d, %eax
3862:fltk-1.3.4-1/png/png.c ****    /* Various values derived from 'shift': */
 198              		.loc 1 3862 0
 199 0011 55       		pushq	%rbp
 200              		.cfi_def_cfa_offset 48
 201              		.cfi_offset 6, -48
 202 0012 53       		pushq	%rbx
 203              		.cfi_def_cfa_offset 56
 204              		.cfi_offset 3, -56
 205              		.loc 1 3864 0
 206 0013 BD080000 		movl	$8, %ebp
 206      00
 207 0018 29D5     		subl	%edx, %ebp
3865:fltk-1.3.4-1/png/png.c **** #ifdef PNG_FLOATING_ARITHMETIC_SUPPORTED
3866:fltk-1.3.4-1/png/png.c ****    /* CSE the division and work round wacky GCC warnings (see the comments
3867:fltk-1.3.4-1/png/png.c ****     * in png_gamma_8bit_correct for where these come from.)
3868:fltk-1.3.4-1/png/png.c ****     */
3869:fltk-1.3.4-1/png/png.c ****    PNG_CONST double fmax = 1./(((png_int_32)1 << (16U - shift))-1);
 208              		.loc 1 3869 0
 209 001a 4589F5   		movl	%r14d, %r13d
3862:fltk-1.3.4-1/png/png.c ****    /* Various values derived from 'shift': */
 210              		.loc 1 3862 0
 211 001d 4889F3   		movq	%rsi, %rbx
 212 0020 4883EC48 		subq	$72, %rsp
 213              		.cfi_def_cfa_offset 128
 214              		.loc 1 3869 0
 215 0024 660FEFC0 		pxor	%xmm0, %xmm0
3862:fltk-1.3.4-1/png/png.c ****    /* Various values derived from 'shift': */
 216              		.loc 1 3862 0
 217 0028 894C243C 		movl	%ecx, 60(%rsp)
3864:fltk-1.3.4-1/png/png.c **** #ifdef PNG_FLOATING_ARITHMETIC_SUPPORTED
 218              		.loc 1 3864 0
 219 002c 89E9     		movl	%ebp, %ecx
 220              	.LVL21:
3862:fltk-1.3.4-1/png/png.c ****    /* Various values derived from 'shift': */
 221              		.loc 1 3862 0
 222 002e 48897C24 		movq	%rdi, 48(%rsp)
 222      30
3864:fltk-1.3.4-1/png/png.c **** #ifdef PNG_FLOATING_ARITHMETIC_SUPPORTED
 223              		.loc 1 3864 0
 224 0033 D3E0     		sall	%cl, %eax
 225              		.loc 1 3869 0
 226 0035 B9100000 		movl	$16, %ecx
 226      00
3862:fltk-1.3.4-1/png/png.c ****    /* Various values derived from 'shift': */
 227              		.loc 1 3862 0
 228 003a 4189D4   		movl	%edx, %r12d
 229              		.loc 1 3869 0
 230 003d 29D1     		subl	%edx, %ecx
 231 003f F20F100D 		movsd	.LC1(%rip), %xmm1
 231      00000000 
 232 0047 41D3E5   		sall	%cl, %r13d
3870:fltk-1.3.4-1/png/png.c **** #endif
3871:fltk-1.3.4-1/png/png.c ****    PNG_CONST unsigned int max = (1U << (16U - shift))-1U;
3872:fltk-1.3.4-1/png/png.c ****    PNG_CONST unsigned int max_by_2 = 1U << (15U-shift);
 233              		.loc 1 3872 0
 234 004a B90F0000 		movl	$15, %ecx
 234      00
3873:fltk-1.3.4-1/png/png.c ****    unsigned int i;
3874:fltk-1.3.4-1/png/png.c **** 
3875:fltk-1.3.4-1/png/png.c ****    png_uint_16pp table = *ptable =
3876:fltk-1.3.4-1/png/png.c ****        (png_uint_16pp)png_calloc(png_ptr, num * (sizeof (png_uint_16p)));
 235              		.loc 1 3876 0
 236 004f 89C6     		movl	%eax, %esi
 237              	.LVL22:
3869:fltk-1.3.4-1/png/png.c **** #endif
 238              		.loc 1 3869 0
 239 0051 4183ED01 		subl	$1, %r13d
3872:fltk-1.3.4-1/png/png.c ****    unsigned int i;
 240              		.loc 1 3872 0
 241 0055 29D1     		subl	%edx, %ecx
 242              		.loc 1 3876 0
 243 0057 48C1E603 		salq	$3, %rsi
3869:fltk-1.3.4-1/png/png.c **** #endif
 244              		.loc 1 3869 0
 245 005b F2410F2A 		cvtsi2sd	%r13d, %xmm0
 245      C5
3872:fltk-1.3.4-1/png/png.c ****    unsigned int i;
 246              		.loc 1 3872 0
 247 0060 41D3E6   		sall	%cl, %r14d
3864:fltk-1.3.4-1/png/png.c **** #ifdef PNG_FLOATING_ARITHMETIC_SUPPORTED
 248              		.loc 1 3864 0
 249 0063 4189C7   		movl	%eax, %r15d
 250 0066 89442424 		movl	%eax, 36(%rsp)
 251              	.LVL23:
3872:fltk-1.3.4-1/png/png.c ****    unsigned int i;
 252              		.loc 1 3872 0
 253 006a 44897424 		movl	%r14d, 32(%rsp)
 253      20
3869:fltk-1.3.4-1/png/png.c **** #endif
 254              		.loc 1 3869 0
 255 006f F20F5EC8 		divsd	%xmm0, %xmm1
 256 0073 F20F114C 		movsd	%xmm1, 16(%rsp)
 256      2410
 257              	.LVL24:
 258              		.loc 1 3876 0
 259 0079 E8000000 		call	png_calloc
 259      00
 260              	.LVL25:
 261 007e 48894424 		movq	%rax, 40(%rsp)
 261      28
3875:fltk-1.3.4-1/png/png.c ****        (png_uint_16pp)png_calloc(png_ptr, num * (sizeof (png_uint_16p)));
 262              		.loc 1 3875 0
 263 0083 488903   		movq	%rax, (%rbx)
 264              	.LVL26:
 265 0086 8B44243C 		movl	60(%rsp), %eax
 266              	.LVL27:
3877:fltk-1.3.4-1/png/png.c **** 
3878:fltk-1.3.4-1/png/png.c ****    for (i = 0; i < num; i++)
 267              		.loc 1 3878 0
 268 008a 48C74424 		movq	$0, 24(%rsp)
 268      18000000 
 268      00
 269 0093 2D187301 		subl	$95000, %eax
 269      00
 270 0098 4585FF   		testl	%r15d, %r15d
 271 009b 89442438 		movl	%eax, 56(%rsp)
 272 009f 0F84B600 		je	.L27
 272      0000
 273              	.LVL28:
 274              		.p2align 4,,10
 275 00a5 0F1F00   		.p2align 3
 276              	.L40:
 277              	.LBB193:
3879:fltk-1.3.4-1/png/png.c ****    {
3880:fltk-1.3.4-1/png/png.c ****       png_uint_16p sub_table = table[i] =
3881:fltk-1.3.4-1/png/png.c ****           (png_uint_16p)png_malloc(png_ptr, 256 * (sizeof (png_uint_16)));
 278              		.loc 1 3881 0
 279 00a8 488B7C24 		movq	48(%rsp), %rdi
 279      30
 280 00ad BE000200 		movl	$512, %esi
 280      00
 281 00b2 4C8B7424 		movq	24(%rsp), %r14
 281      18
 282 00b7 E8000000 		call	png_malloc
 282      00
 283              	.LVL29:
3882:fltk-1.3.4-1/png/png.c **** 
3883:fltk-1.3.4-1/png/png.c ****       /* The 'threshold' test is repeated here because it can arise for one of
3884:fltk-1.3.4-1/png/png.c ****        * the 16-bit tables even if the others don't hit it.
3885:fltk-1.3.4-1/png/png.c ****        */
3886:fltk-1.3.4-1/png/png.c ****       if (png_gamma_significant(gamma_val) != 0)
 284              		.loc 1 3886 0
 285 00bc 817C2438 		cmpl	$10000, 56(%rsp)
 285      10270000 
3880:fltk-1.3.4-1/png/png.c ****           (png_uint_16p)png_malloc(png_ptr, 256 * (sizeof (png_uint_16)));
 286              		.loc 1 3880 0
 287 00c4 488B7C24 		movq	40(%rsp), %rdi
 287      28
3881:fltk-1.3.4-1/png/png.c **** 
 288              		.loc 1 3881 0
 289 00c9 4989C7   		movq	%rax, %r15
 290 00cc 4489F3   		movl	%r14d, %ebx
 291              	.LVL30:
3880:fltk-1.3.4-1/png/png.c ****           (png_uint_16p)png_malloc(png_ptr, 256 * (sizeof (png_uint_16)));
 292              		.loc 1 3880 0
 293 00cf 4E893CF7 		movq	%r15, (%rdi,%r14,8)
 294              	.LVL31:
 295              		.loc 1 3886 0
 296 00d3 0F869700 		jbe	.L29
 296      0000
 297 00d9 660FEFC0 		pxor	%xmm0, %xmm0
 298 00dd 4531F6   		xorl	%r14d, %r14d
 299 00e0 F20F2A44 		cvtsi2sd	60(%rsp), %xmm0
 299      243C
 300 00e6 F20F5905 		mulsd	.LC7(%rip), %xmm0
 300      00000000 
 301 00ee F20F1144 		movsd	%xmm0, 8(%rsp)
 301      2408
 302              	.LVL32:
 303              		.p2align 4,,10
 304 00f4 0F1F4000 		.p2align 3
 305              	.L32:
 306              	.LBB194:
 307              	.LBB195:
3887:fltk-1.3.4-1/png/png.c ****       {
3888:fltk-1.3.4-1/png/png.c ****          /* The old code would overflow at the end and this would cause the
3889:fltk-1.3.4-1/png/png.c ****           * 'pow' function to return a result >1, resulting in an
3890:fltk-1.3.4-1/png/png.c ****           * arithmetic error.  This code follows the spec exactly; ig is
3891:fltk-1.3.4-1/png/png.c ****           * the recovered input sample, it always has 8-16 bits.
3892:fltk-1.3.4-1/png/png.c ****           *
3893:fltk-1.3.4-1/png/png.c ****           * We want input * 65535/max, rounded, the arithmetic fits in 32
3894:fltk-1.3.4-1/png/png.c ****           * bits (unsigned) so long as max <= 32767.
3895:fltk-1.3.4-1/png/png.c ****           */
3896:fltk-1.3.4-1/png/png.c ****          unsigned int j;
3897:fltk-1.3.4-1/png/png.c ****          for (j = 0; j < 256; j++)
3898:fltk-1.3.4-1/png/png.c ****          {
3899:fltk-1.3.4-1/png/png.c ****             png_uint_32 ig = (j << (8-shift)) + i;
3900:fltk-1.3.4-1/png/png.c **** #           ifdef PNG_FLOATING_ARITHMETIC_SUPPORTED
3901:fltk-1.3.4-1/png/png.c ****                /* Inline the 'max' scaling operation: */
3902:fltk-1.3.4-1/png/png.c ****                /* See png_gamma_8bit_correct for why the cast to (int) is
3903:fltk-1.3.4-1/png/png.c ****                 * required here.
3904:fltk-1.3.4-1/png/png.c ****                 */
3905:fltk-1.3.4-1/png/png.c ****                double d = floor(65535.*pow(ig*fmax, gamma_val*.00001)+.5);
 308              		.loc 1 3905 0 discriminator 3
 309 00f8 89E9     		movl	%ebp, %ecx
 310 00fa 4489F0   		movl	%r14d, %eax
 311 00fd 660FEFC0 		pxor	%xmm0, %xmm0
 312 0101 D3E0     		sall	%cl, %eax
 313 0103 01D8     		addl	%ebx, %eax
 314 0105 F20F104C 		movsd	8(%rsp), %xmm1
 314      2408
 315 010b F2480F2A 		cvtsi2sdq	%rax, %xmm0
 315      C0
 316 0110 F20F5944 		mulsd	16(%rsp), %xmm0
 316      2410
 317 0116 E8000000 		call	pow
 317      00
 318              	.LVL33:
 319 011b F20F5905 		mulsd	.LC8(%rip), %xmm0
 319      00000000 
 320 0123 F20F5805 		addsd	.LC9(%rip), %xmm0
 320      00000000 
 321 012b E8000000 		call	floor
 321      00
 322              	.LVL34:
3906:fltk-1.3.4-1/png/png.c ****                sub_table[j] = (png_uint_16)d;
 323              		.loc 1 3906 0 discriminator 3
 324 0130 F20F2CC0 		cvttsd2si	%xmm0, %eax
 325 0134 66438904 		movw	%ax, (%r15,%r14,2)
 325      77
 326              	.LVL35:
 327 0139 4983C601 		addq	$1, %r14
 328              	.LVL36:
 329              	.LBE195:
3897:fltk-1.3.4-1/png/png.c ****          {
 330              		.loc 1 3897 0 discriminator 3
 331 013d 4981FE00 		cmpq	$256, %r14
 331      010000
 332 0144 75B2     		jne	.L32
 333              	.LVL37:
 334              	.L37:
 335 0146 48834424 		addq	$1, 24(%rsp)
 335      1801
 336              	.LVL38:
 337 014c 488B4424 		movq	24(%rsp), %rax
 337      18
 338              	.LBE194:
 339              	.LBE193:
3878:fltk-1.3.4-1/png/png.c ****    {
 340              		.loc 1 3878 0
 341 0151 39442424 		cmpl	%eax, 36(%rsp)
 342 0155 0F874DFF 		ja	.L40
 342      FFFF
 343              	.LVL39:
 344              	.L27:
3907:fltk-1.3.4-1/png/png.c **** #           else
3908:fltk-1.3.4-1/png/png.c ****                if (shift != 0)
3909:fltk-1.3.4-1/png/png.c ****                   ig = (ig * 65535U + max_by_2)/max;
3910:fltk-1.3.4-1/png/png.c **** 
3911:fltk-1.3.4-1/png/png.c ****                sub_table[j] = png_gamma_16bit_correct(ig, gamma_val);
3912:fltk-1.3.4-1/png/png.c **** #           endif
3913:fltk-1.3.4-1/png/png.c ****          }
3914:fltk-1.3.4-1/png/png.c ****       }
3915:fltk-1.3.4-1/png/png.c ****       else
3916:fltk-1.3.4-1/png/png.c ****       {
3917:fltk-1.3.4-1/png/png.c ****          /* We must still build a table, but do it the fast way. */
3918:fltk-1.3.4-1/png/png.c ****          unsigned int j;
3919:fltk-1.3.4-1/png/png.c **** 
3920:fltk-1.3.4-1/png/png.c ****          for (j = 0; j < 256; j++)
3921:fltk-1.3.4-1/png/png.c ****          {
3922:fltk-1.3.4-1/png/png.c ****             png_uint_32 ig = (j << (8-shift)) + i;
3923:fltk-1.3.4-1/png/png.c **** 
3924:fltk-1.3.4-1/png/png.c ****             if (shift != 0)
3925:fltk-1.3.4-1/png/png.c ****                ig = (ig * 65535U + max_by_2)/max;
3926:fltk-1.3.4-1/png/png.c **** 
3927:fltk-1.3.4-1/png/png.c ****             sub_table[j] = (png_uint_16)ig;
3928:fltk-1.3.4-1/png/png.c ****          }
3929:fltk-1.3.4-1/png/png.c ****       }
3930:fltk-1.3.4-1/png/png.c ****    }
3931:fltk-1.3.4-1/png/png.c **** }
 345              		.loc 1 3931 0
 346 015b 4883C448 		addq	$72, %rsp
 347              		.cfi_remember_state
 348              		.cfi_def_cfa_offset 56
 349 015f 5B       		popq	%rbx
 350              		.cfi_def_cfa_offset 48
 351 0160 5D       		popq	%rbp
 352              		.cfi_def_cfa_offset 40
 353 0161 415C     		popq	%r12
 354              		.cfi_def_cfa_offset 32
 355              	.LVL40:
 356 0163 415D     		popq	%r13
 357              		.cfi_def_cfa_offset 24
 358              	.LVL41:
 359 0165 415E     		popq	%r14
 360              		.cfi_def_cfa_offset 16
 361 0167 415F     		popq	%r15
 362              		.cfi_def_cfa_offset 8
 363 0169 C3       		ret
 364              	.LVL42:
 365 016a 660F1F44 		.p2align 4,,10
 365      0000
 366              		.p2align 3
 367              	.L29:
 368              		.cfi_restore_state
 369              	.LBB198:
 370 0170 31F6     		xorl	%esi, %esi
 371              	.LVL43:
 372              		.p2align 4,,10
 373 0172 660F1F44 		.p2align 3
 373      0000
 374              	.L36:
 375              	.LBB196:
 376              	.LBB197:
3922:fltk-1.3.4-1/png/png.c **** 
 377              		.loc 1 3922 0
 378 0178 89F0     		movl	%esi, %eax
 379 017a 89E9     		movl	%ebp, %ecx
 380 017c D3E0     		sall	%cl, %eax
 381 017e 01D8     		addl	%ebx, %eax
 382              	.LVL44:
3924:fltk-1.3.4-1/png/png.c ****                ig = (ig * 65535U + max_by_2)/max;
 383              		.loc 1 3924 0
 384 0180 4585E4   		testl	%r12d, %r12d
 385 0183 7412     		je	.L35
3925:fltk-1.3.4-1/png/png.c **** 
 386              		.loc 1 3925 0
 387 0185 89C2     		movl	%eax, %edx
 388 0187 C1E210   		sall	$16, %edx
 389 018a 29C2     		subl	%eax, %edx
 390 018c 8B442420 		movl	32(%rsp), %eax
 391              	.LVL45:
 392 0190 01D0     		addl	%edx, %eax
 393 0192 31D2     		xorl	%edx, %edx
 394 0194 41F7F5   		divl	%r13d
 395              	.LVL46:
 396              	.L35:
3927:fltk-1.3.4-1/png/png.c ****          }
 397              		.loc 1 3927 0 discriminator 2
 398 0197 66418904 		movw	%ax, (%r15,%rsi,2)
 398      77
 399              	.LVL47:
 400 019c 4883C601 		addq	$1, %rsi
 401              	.LVL48:
 402              	.LBE197:
3920:fltk-1.3.4-1/png/png.c ****          {
 403              		.loc 1 3920 0 discriminator 2
 404 01a0 4881FE00 		cmpq	$256, %rsi
 404      010000
 405 01a7 75CF     		jne	.L36
 406 01a9 EB9B     		jmp	.L37
 407              	.LBE196:
 408              	.LBE198:
 409              		.cfi_endproc
 410              	.LFE127:
 412              		.section	.text.unlikely.png_build_16bit_table
 413              	.LCOLDE10:
 414              		.section	.text.png_build_16bit_table
 415              	.LHOTE10:
 416              		.section	.text.unlikely.png_image_free_function,"ax",@progbits
 417              	.LCOLDB11:
 418              		.section	.text.png_image_free_function,"ax",@progbits
 419              	.LHOTB11:
 420              		.p2align 4,,15
 422              	png_image_free_function:
 423              	.LFB133:
3932:fltk-1.3.4-1/png/png.c **** 
3933:fltk-1.3.4-1/png/png.c **** /* NOTE: this function expects the *inverse* of the overall gamma transformation
3934:fltk-1.3.4-1/png/png.c ****  * required.
3935:fltk-1.3.4-1/png/png.c ****  */
3936:fltk-1.3.4-1/png/png.c **** static void
3937:fltk-1.3.4-1/png/png.c **** png_build_16to8_table(png_structrp png_ptr, png_uint_16pp *ptable,
3938:fltk-1.3.4-1/png/png.c ****    PNG_CONST unsigned int shift, PNG_CONST png_fixed_point gamma_val)
3939:fltk-1.3.4-1/png/png.c **** {
3940:fltk-1.3.4-1/png/png.c ****    PNG_CONST unsigned int num = 1U << (8U - shift);
3941:fltk-1.3.4-1/png/png.c ****    PNG_CONST unsigned int max = (1U << (16U - shift))-1U;
3942:fltk-1.3.4-1/png/png.c ****    unsigned int i;
3943:fltk-1.3.4-1/png/png.c ****    png_uint_32 last;
3944:fltk-1.3.4-1/png/png.c **** 
3945:fltk-1.3.4-1/png/png.c ****    png_uint_16pp table = *ptable =
3946:fltk-1.3.4-1/png/png.c ****        (png_uint_16pp)png_calloc(png_ptr, num * (sizeof (png_uint_16p)));
3947:fltk-1.3.4-1/png/png.c **** 
3948:fltk-1.3.4-1/png/png.c ****    /* 'num' is the number of tables and also the number of low bits of low
3949:fltk-1.3.4-1/png/png.c ****     * bits of the input 16-bit value used to select a table.  Each table is
3950:fltk-1.3.4-1/png/png.c ****     * itself indexed by the high 8 bits of the value.
3951:fltk-1.3.4-1/png/png.c ****     */
3952:fltk-1.3.4-1/png/png.c ****    for (i = 0; i < num; i++)
3953:fltk-1.3.4-1/png/png.c ****       table[i] = (png_uint_16p)png_malloc(png_ptr,
3954:fltk-1.3.4-1/png/png.c ****           256 * (sizeof (png_uint_16)));
3955:fltk-1.3.4-1/png/png.c **** 
3956:fltk-1.3.4-1/png/png.c ****    /* 'gamma_val' is set to the reciprocal of the value calculated above, so
3957:fltk-1.3.4-1/png/png.c ****     * pow(out,g) is an *input* value.  'last' is the last input value set.
3958:fltk-1.3.4-1/png/png.c ****     *
3959:fltk-1.3.4-1/png/png.c ****     * In the loop 'i' is used to find output values.  Since the output is
3960:fltk-1.3.4-1/png/png.c ****     * 8-bit there are only 256 possible values.  The tables are set up to
3961:fltk-1.3.4-1/png/png.c ****     * select the closest possible output value for each input by finding
3962:fltk-1.3.4-1/png/png.c ****     * the input value at the boundary between each pair of output values
3963:fltk-1.3.4-1/png/png.c ****     * and filling the table up to that boundary with the lower output
3964:fltk-1.3.4-1/png/png.c ****     * value.
3965:fltk-1.3.4-1/png/png.c ****     *
3966:fltk-1.3.4-1/png/png.c ****     * The boundary values are 0.5,1.5..253.5,254.5.  Since these are 9-bit
3967:fltk-1.3.4-1/png/png.c ****     * values the code below uses a 16-bit value in i; the values start at
3968:fltk-1.3.4-1/png/png.c ****     * 128.5 (for 0.5) and step by 257, for a total of 254 values (the last
3969:fltk-1.3.4-1/png/png.c ****     * entries are filled with 255).  Start i at 128 and fill all 'last'
3970:fltk-1.3.4-1/png/png.c ****     * table entries <= 'max'
3971:fltk-1.3.4-1/png/png.c ****     */
3972:fltk-1.3.4-1/png/png.c ****    last = 0;
3973:fltk-1.3.4-1/png/png.c ****    for (i = 0; i < 255; ++i) /* 8-bit output value */
3974:fltk-1.3.4-1/png/png.c ****    {
3975:fltk-1.3.4-1/png/png.c ****       /* Find the corresponding maximum input value */
3976:fltk-1.3.4-1/png/png.c ****       png_uint_16 out = (png_uint_16)(i * 257U); /* 16-bit output value */
3977:fltk-1.3.4-1/png/png.c **** 
3978:fltk-1.3.4-1/png/png.c ****       /* Find the boundary value in 16 bits: */
3979:fltk-1.3.4-1/png/png.c ****       png_uint_32 bound = png_gamma_16bit_correct(out+128U, gamma_val);
3980:fltk-1.3.4-1/png/png.c **** 
3981:fltk-1.3.4-1/png/png.c ****       /* Adjust (round) to (16-shift) bits: */
3982:fltk-1.3.4-1/png/png.c ****       bound = (bound * max + 32768U)/65535U + 1U;
3983:fltk-1.3.4-1/png/png.c **** 
3984:fltk-1.3.4-1/png/png.c ****       while (last < bound)
3985:fltk-1.3.4-1/png/png.c ****       {
3986:fltk-1.3.4-1/png/png.c ****          table[last & (0xffU >> shift)][last >> (8U - shift)] = out;
3987:fltk-1.3.4-1/png/png.c ****          last++;
3988:fltk-1.3.4-1/png/png.c ****       }
3989:fltk-1.3.4-1/png/png.c ****    }
3990:fltk-1.3.4-1/png/png.c **** 
3991:fltk-1.3.4-1/png/png.c ****    /* And fill in the final entries. */
3992:fltk-1.3.4-1/png/png.c ****    while (last < (num << 8))
3993:fltk-1.3.4-1/png/png.c ****    {
3994:fltk-1.3.4-1/png/png.c ****       table[last & (0xff >> shift)][last >> (8U - shift)] = 65535U;
3995:fltk-1.3.4-1/png/png.c ****       last++;
3996:fltk-1.3.4-1/png/png.c ****    }
3997:fltk-1.3.4-1/png/png.c **** }
3998:fltk-1.3.4-1/png/png.c **** #endif /* 16BIT */
3999:fltk-1.3.4-1/png/png.c **** 
4000:fltk-1.3.4-1/png/png.c **** /* Build a single 8-bit table: same as the 16-bit case but much simpler (and
4001:fltk-1.3.4-1/png/png.c ****  * typically much faster).  Note that libpng currently does no sBIT processing
4002:fltk-1.3.4-1/png/png.c ****  * (apparently contrary to the spec) so a 256-entry table is always generated.
4003:fltk-1.3.4-1/png/png.c ****  */
4004:fltk-1.3.4-1/png/png.c **** static void
4005:fltk-1.3.4-1/png/png.c **** png_build_8bit_table(png_structrp png_ptr, png_bytepp ptable,
4006:fltk-1.3.4-1/png/png.c ****    PNG_CONST png_fixed_point gamma_val)
4007:fltk-1.3.4-1/png/png.c **** {
4008:fltk-1.3.4-1/png/png.c ****    unsigned int i;
4009:fltk-1.3.4-1/png/png.c ****    png_bytep table = *ptable = (png_bytep)png_malloc(png_ptr, 256);
4010:fltk-1.3.4-1/png/png.c **** 
4011:fltk-1.3.4-1/png/png.c ****    if (png_gamma_significant(gamma_val) != 0)
4012:fltk-1.3.4-1/png/png.c ****       for (i=0; i<256; i++)
4013:fltk-1.3.4-1/png/png.c ****          table[i] = png_gamma_8bit_correct(i, gamma_val);
4014:fltk-1.3.4-1/png/png.c **** 
4015:fltk-1.3.4-1/png/png.c ****    else
4016:fltk-1.3.4-1/png/png.c ****       for (i=0; i<256; ++i)
4017:fltk-1.3.4-1/png/png.c ****          table[i] = (png_byte)i;
4018:fltk-1.3.4-1/png/png.c **** }
4019:fltk-1.3.4-1/png/png.c **** 
4020:fltk-1.3.4-1/png/png.c **** /* Used from png_read_destroy and below to release the memory used by the gamma
4021:fltk-1.3.4-1/png/png.c ****  * tables.
4022:fltk-1.3.4-1/png/png.c ****  */
4023:fltk-1.3.4-1/png/png.c **** void /* PRIVATE */
4024:fltk-1.3.4-1/png/png.c **** png_destroy_gamma_table(png_structrp png_ptr)
4025:fltk-1.3.4-1/png/png.c **** {
4026:fltk-1.3.4-1/png/png.c ****    png_free(png_ptr, png_ptr->gamma_table);
4027:fltk-1.3.4-1/png/png.c ****    png_ptr->gamma_table = NULL;
4028:fltk-1.3.4-1/png/png.c **** 
4029:fltk-1.3.4-1/png/png.c **** #ifdef PNG_16BIT_SUPPORTED
4030:fltk-1.3.4-1/png/png.c ****    if (png_ptr->gamma_16_table != NULL)
4031:fltk-1.3.4-1/png/png.c ****    {
4032:fltk-1.3.4-1/png/png.c ****       int i;
4033:fltk-1.3.4-1/png/png.c ****       int istop = (1 << (8 - png_ptr->gamma_shift));
4034:fltk-1.3.4-1/png/png.c ****       for (i = 0; i < istop; i++)
4035:fltk-1.3.4-1/png/png.c ****       {
4036:fltk-1.3.4-1/png/png.c ****          png_free(png_ptr, png_ptr->gamma_16_table[i]);
4037:fltk-1.3.4-1/png/png.c ****       }
4038:fltk-1.3.4-1/png/png.c ****    png_free(png_ptr, png_ptr->gamma_16_table);
4039:fltk-1.3.4-1/png/png.c ****    png_ptr->gamma_16_table = NULL;
4040:fltk-1.3.4-1/png/png.c ****    }
4041:fltk-1.3.4-1/png/png.c **** #endif /* 16BIT */
4042:fltk-1.3.4-1/png/png.c **** 
4043:fltk-1.3.4-1/png/png.c **** #if defined(PNG_READ_BACKGROUND_SUPPORTED) || \
4044:fltk-1.3.4-1/png/png.c ****    defined(PNG_READ_ALPHA_MODE_SUPPORTED) || \
4045:fltk-1.3.4-1/png/png.c ****    defined(PNG_READ_RGB_TO_GRAY_SUPPORTED)
4046:fltk-1.3.4-1/png/png.c ****    png_free(png_ptr, png_ptr->gamma_from_1);
4047:fltk-1.3.4-1/png/png.c ****    png_ptr->gamma_from_1 = NULL;
4048:fltk-1.3.4-1/png/png.c ****    png_free(png_ptr, png_ptr->gamma_to_1);
4049:fltk-1.3.4-1/png/png.c ****    png_ptr->gamma_to_1 = NULL;
4050:fltk-1.3.4-1/png/png.c **** 
4051:fltk-1.3.4-1/png/png.c **** #ifdef PNG_16BIT_SUPPORTED
4052:fltk-1.3.4-1/png/png.c ****    if (png_ptr->gamma_16_from_1 != NULL)
4053:fltk-1.3.4-1/png/png.c ****    {
4054:fltk-1.3.4-1/png/png.c ****       int i;
4055:fltk-1.3.4-1/png/png.c ****       int istop = (1 << (8 - png_ptr->gamma_shift));
4056:fltk-1.3.4-1/png/png.c ****       for (i = 0; i < istop; i++)
4057:fltk-1.3.4-1/png/png.c ****       {
4058:fltk-1.3.4-1/png/png.c ****          png_free(png_ptr, png_ptr->gamma_16_from_1[i]);
4059:fltk-1.3.4-1/png/png.c ****       }
4060:fltk-1.3.4-1/png/png.c ****    png_free(png_ptr, png_ptr->gamma_16_from_1);
4061:fltk-1.3.4-1/png/png.c ****    png_ptr->gamma_16_from_1 = NULL;
4062:fltk-1.3.4-1/png/png.c ****    }
4063:fltk-1.3.4-1/png/png.c ****    if (png_ptr->gamma_16_to_1 != NULL)
4064:fltk-1.3.4-1/png/png.c ****    {
4065:fltk-1.3.4-1/png/png.c ****       int i;
4066:fltk-1.3.4-1/png/png.c ****       int istop = (1 << (8 - png_ptr->gamma_shift));
4067:fltk-1.3.4-1/png/png.c ****       for (i = 0; i < istop; i++)
4068:fltk-1.3.4-1/png/png.c ****       {
4069:fltk-1.3.4-1/png/png.c ****          png_free(png_ptr, png_ptr->gamma_16_to_1[i]);
4070:fltk-1.3.4-1/png/png.c ****       }
4071:fltk-1.3.4-1/png/png.c ****    png_free(png_ptr, png_ptr->gamma_16_to_1);
4072:fltk-1.3.4-1/png/png.c ****    png_ptr->gamma_16_to_1 = NULL;
4073:fltk-1.3.4-1/png/png.c ****    }
4074:fltk-1.3.4-1/png/png.c **** #endif /* 16BIT */
4075:fltk-1.3.4-1/png/png.c **** #endif /* READ_BACKGROUND || READ_ALPHA_MODE || RGB_TO_GRAY */
4076:fltk-1.3.4-1/png/png.c **** }
4077:fltk-1.3.4-1/png/png.c **** 
4078:fltk-1.3.4-1/png/png.c **** /* We build the 8- or 16-bit gamma tables here.  Note that for 16-bit
4079:fltk-1.3.4-1/png/png.c ****  * tables, we don't make a full table if we are reducing to 8-bit in
4080:fltk-1.3.4-1/png/png.c ****  * the future.  Note also how the gamma_16 tables are segmented so that
4081:fltk-1.3.4-1/png/png.c ****  * we don't need to allocate > 64K chunks for a full 16-bit table.
4082:fltk-1.3.4-1/png/png.c ****  */
4083:fltk-1.3.4-1/png/png.c **** void /* PRIVATE */
4084:fltk-1.3.4-1/png/png.c **** png_build_gamma_table(png_structrp png_ptr, int bit_depth)
4085:fltk-1.3.4-1/png/png.c **** {
4086:fltk-1.3.4-1/png/png.c ****   png_debug(1, "in png_build_gamma_table");
4087:fltk-1.3.4-1/png/png.c **** 
4088:fltk-1.3.4-1/png/png.c ****   /* Remove any existing table; this copes with multiple calls to
4089:fltk-1.3.4-1/png/png.c ****    * png_read_update_info.  The warning is because building the gamma tables
4090:fltk-1.3.4-1/png/png.c ****    * multiple times is a performance hit - it's harmless but the ability to call
4091:fltk-1.3.4-1/png/png.c ****    * png_read_update_info() multiple times is new in 1.5.6 so it seems sensible
4092:fltk-1.3.4-1/png/png.c ****    * to warn if the app introduces such a hit.
4093:fltk-1.3.4-1/png/png.c ****    */
4094:fltk-1.3.4-1/png/png.c ****   if (png_ptr->gamma_table != NULL || png_ptr->gamma_16_table != NULL)
4095:fltk-1.3.4-1/png/png.c ****   {
4096:fltk-1.3.4-1/png/png.c ****     png_warning(png_ptr, "gamma table being rebuilt");
4097:fltk-1.3.4-1/png/png.c ****     png_destroy_gamma_table(png_ptr);
4098:fltk-1.3.4-1/png/png.c ****   }
4099:fltk-1.3.4-1/png/png.c **** 
4100:fltk-1.3.4-1/png/png.c ****   if (bit_depth <= 8)
4101:fltk-1.3.4-1/png/png.c ****   {
4102:fltk-1.3.4-1/png/png.c ****      png_build_8bit_table(png_ptr, &png_ptr->gamma_table,
4103:fltk-1.3.4-1/png/png.c ****          png_ptr->screen_gamma > 0 ?  png_reciprocal2(png_ptr->colorspace.gamma,
4104:fltk-1.3.4-1/png/png.c ****          png_ptr->screen_gamma) : PNG_FP_1);
4105:fltk-1.3.4-1/png/png.c **** 
4106:fltk-1.3.4-1/png/png.c **** #if defined(PNG_READ_BACKGROUND_SUPPORTED) || \
4107:fltk-1.3.4-1/png/png.c ****    defined(PNG_READ_ALPHA_MODE_SUPPORTED) || \
4108:fltk-1.3.4-1/png/png.c ****    defined(PNG_READ_RGB_TO_GRAY_SUPPORTED)
4109:fltk-1.3.4-1/png/png.c ****      if ((png_ptr->transformations & (PNG_COMPOSE | PNG_RGB_TO_GRAY)) != 0)
4110:fltk-1.3.4-1/png/png.c ****      {
4111:fltk-1.3.4-1/png/png.c ****         png_build_8bit_table(png_ptr, &png_ptr->gamma_to_1,
4112:fltk-1.3.4-1/png/png.c ****             png_reciprocal(png_ptr->colorspace.gamma));
4113:fltk-1.3.4-1/png/png.c **** 
4114:fltk-1.3.4-1/png/png.c ****         png_build_8bit_table(png_ptr, &png_ptr->gamma_from_1,
4115:fltk-1.3.4-1/png/png.c ****             png_ptr->screen_gamma > 0 ?  png_reciprocal(png_ptr->screen_gamma) :
4116:fltk-1.3.4-1/png/png.c ****             png_ptr->colorspace.gamma/* Probably doing rgb_to_gray */);
4117:fltk-1.3.4-1/png/png.c ****      }
4118:fltk-1.3.4-1/png/png.c **** #endif /* READ_BACKGROUND || READ_ALPHA_MODE || RGB_TO_GRAY */
4119:fltk-1.3.4-1/png/png.c ****   }
4120:fltk-1.3.4-1/png/png.c **** #ifdef PNG_16BIT_SUPPORTED
4121:fltk-1.3.4-1/png/png.c ****   else
4122:fltk-1.3.4-1/png/png.c ****   {
4123:fltk-1.3.4-1/png/png.c ****      png_byte shift, sig_bit;
4124:fltk-1.3.4-1/png/png.c **** 
4125:fltk-1.3.4-1/png/png.c ****      if ((png_ptr->color_type & PNG_COLOR_MASK_COLOR) != 0)
4126:fltk-1.3.4-1/png/png.c ****      {
4127:fltk-1.3.4-1/png/png.c ****         sig_bit = png_ptr->sig_bit.red;
4128:fltk-1.3.4-1/png/png.c **** 
4129:fltk-1.3.4-1/png/png.c ****         if (png_ptr->sig_bit.green > sig_bit)
4130:fltk-1.3.4-1/png/png.c ****            sig_bit = png_ptr->sig_bit.green;
4131:fltk-1.3.4-1/png/png.c **** 
4132:fltk-1.3.4-1/png/png.c ****         if (png_ptr->sig_bit.blue > sig_bit)
4133:fltk-1.3.4-1/png/png.c ****            sig_bit = png_ptr->sig_bit.blue;
4134:fltk-1.3.4-1/png/png.c ****      }
4135:fltk-1.3.4-1/png/png.c ****      else
4136:fltk-1.3.4-1/png/png.c ****         sig_bit = png_ptr->sig_bit.gray;
4137:fltk-1.3.4-1/png/png.c **** 
4138:fltk-1.3.4-1/png/png.c ****      /* 16-bit gamma code uses this equation:
4139:fltk-1.3.4-1/png/png.c ****       *
4140:fltk-1.3.4-1/png/png.c ****       *   ov = table[(iv & 0xff) >> gamma_shift][iv >> 8]
4141:fltk-1.3.4-1/png/png.c ****       *
4142:fltk-1.3.4-1/png/png.c ****       * Where 'iv' is the input color value and 'ov' is the output value -
4143:fltk-1.3.4-1/png/png.c ****       * pow(iv, gamma).
4144:fltk-1.3.4-1/png/png.c ****       *
4145:fltk-1.3.4-1/png/png.c ****       * Thus the gamma table consists of up to 256 256-entry tables.  The table
4146:fltk-1.3.4-1/png/png.c ****       * is selected by the (8-gamma_shift) most significant of the low 8 bits of
4147:fltk-1.3.4-1/png/png.c ****       * the color value then indexed by the upper 8 bits:
4148:fltk-1.3.4-1/png/png.c ****       *
4149:fltk-1.3.4-1/png/png.c ****       *   table[low bits][high 8 bits]
4150:fltk-1.3.4-1/png/png.c ****       *
4151:fltk-1.3.4-1/png/png.c ****       * So the table 'n' corresponds to all those 'iv' of:
4152:fltk-1.3.4-1/png/png.c ****       *
4153:fltk-1.3.4-1/png/png.c ****       *   <all high 8-bit values><n << gamma_shift>..<(n+1 << gamma_shift)-1>
4154:fltk-1.3.4-1/png/png.c ****       *
4155:fltk-1.3.4-1/png/png.c ****       */
4156:fltk-1.3.4-1/png/png.c ****      if (sig_bit > 0 && sig_bit < 16U)
4157:fltk-1.3.4-1/png/png.c ****         shift = (png_byte)(16U - sig_bit); /* shift == insignificant bits */
4158:fltk-1.3.4-1/png/png.c **** 
4159:fltk-1.3.4-1/png/png.c ****      else
4160:fltk-1.3.4-1/png/png.c ****         shift = 0; /* keep all 16 bits */
4161:fltk-1.3.4-1/png/png.c **** 
4162:fltk-1.3.4-1/png/png.c ****      if ((png_ptr->transformations & (PNG_16_TO_8 | PNG_SCALE_16_TO_8)) != 0)
4163:fltk-1.3.4-1/png/png.c ****      {
4164:fltk-1.3.4-1/png/png.c ****         /* PNG_MAX_GAMMA_8 is the number of bits to keep - effectively
4165:fltk-1.3.4-1/png/png.c ****          * the significant bits in the *input* when the output will
4166:fltk-1.3.4-1/png/png.c ****          * eventually be 8 bits.  By default it is 11.
4167:fltk-1.3.4-1/png/png.c ****          */
4168:fltk-1.3.4-1/png/png.c ****         if (shift < (16U - PNG_MAX_GAMMA_8))
4169:fltk-1.3.4-1/png/png.c ****            shift = (16U - PNG_MAX_GAMMA_8);
4170:fltk-1.3.4-1/png/png.c ****      }
4171:fltk-1.3.4-1/png/png.c **** 
4172:fltk-1.3.4-1/png/png.c ****      if (shift > 8U)
4173:fltk-1.3.4-1/png/png.c ****         shift = 8U; /* Guarantees at least one table! */
4174:fltk-1.3.4-1/png/png.c **** 
4175:fltk-1.3.4-1/png/png.c ****      png_ptr->gamma_shift = shift;
4176:fltk-1.3.4-1/png/png.c **** 
4177:fltk-1.3.4-1/png/png.c ****      /* NOTE: prior to 1.5.4 this test used to include PNG_BACKGROUND (now
4178:fltk-1.3.4-1/png/png.c ****       * PNG_COMPOSE).  This effectively smashed the background calculation for
4179:fltk-1.3.4-1/png/png.c ****       * 16-bit output because the 8-bit table assumes the result will be reduced
4180:fltk-1.3.4-1/png/png.c ****       * to 8 bits.
4181:fltk-1.3.4-1/png/png.c ****       */
4182:fltk-1.3.4-1/png/png.c ****      if ((png_ptr->transformations & (PNG_16_TO_8 | PNG_SCALE_16_TO_8)) != 0)
4183:fltk-1.3.4-1/png/png.c ****          png_build_16to8_table(png_ptr, &png_ptr->gamma_16_table, shift,
4184:fltk-1.3.4-1/png/png.c ****          png_ptr->screen_gamma > 0 ? png_product2(png_ptr->colorspace.gamma,
4185:fltk-1.3.4-1/png/png.c ****          png_ptr->screen_gamma) : PNG_FP_1);
4186:fltk-1.3.4-1/png/png.c **** 
4187:fltk-1.3.4-1/png/png.c ****      else
4188:fltk-1.3.4-1/png/png.c ****          png_build_16bit_table(png_ptr, &png_ptr->gamma_16_table, shift,
4189:fltk-1.3.4-1/png/png.c ****          png_ptr->screen_gamma > 0 ? png_reciprocal2(png_ptr->colorspace.gamma,
4190:fltk-1.3.4-1/png/png.c ****          png_ptr->screen_gamma) : PNG_FP_1);
4191:fltk-1.3.4-1/png/png.c **** 
4192:fltk-1.3.4-1/png/png.c **** #if defined(PNG_READ_BACKGROUND_SUPPORTED) || \
4193:fltk-1.3.4-1/png/png.c ****    defined(PNG_READ_ALPHA_MODE_SUPPORTED) || \
4194:fltk-1.3.4-1/png/png.c ****    defined(PNG_READ_RGB_TO_GRAY_SUPPORTED)
4195:fltk-1.3.4-1/png/png.c ****      if ((png_ptr->transformations & (PNG_COMPOSE | PNG_RGB_TO_GRAY)) != 0)
4196:fltk-1.3.4-1/png/png.c ****      {
4197:fltk-1.3.4-1/png/png.c ****         png_build_16bit_table(png_ptr, &png_ptr->gamma_16_to_1, shift,
4198:fltk-1.3.4-1/png/png.c ****             png_reciprocal(png_ptr->colorspace.gamma));
4199:fltk-1.3.4-1/png/png.c **** 
4200:fltk-1.3.4-1/png/png.c ****         /* Notice that the '16 from 1' table should be full precision, however
4201:fltk-1.3.4-1/png/png.c ****          * the lookup on this table still uses gamma_shift, so it can't be.
4202:fltk-1.3.4-1/png/png.c ****          * TODO: fix this.
4203:fltk-1.3.4-1/png/png.c ****          */
4204:fltk-1.3.4-1/png/png.c ****         png_build_16bit_table(png_ptr, &png_ptr->gamma_16_from_1, shift,
4205:fltk-1.3.4-1/png/png.c ****             png_ptr->screen_gamma > 0 ? png_reciprocal(png_ptr->screen_gamma) :
4206:fltk-1.3.4-1/png/png.c ****             png_ptr->colorspace.gamma/* Probably doing rgb_to_gray */);
4207:fltk-1.3.4-1/png/png.c ****      }
4208:fltk-1.3.4-1/png/png.c **** #endif /* READ_BACKGROUND || READ_ALPHA_MODE || RGB_TO_GRAY */
4209:fltk-1.3.4-1/png/png.c ****   }
4210:fltk-1.3.4-1/png/png.c **** #endif /* 16BIT */
4211:fltk-1.3.4-1/png/png.c **** }
4212:fltk-1.3.4-1/png/png.c **** #endif /* READ_GAMMA */
4213:fltk-1.3.4-1/png/png.c **** 
4214:fltk-1.3.4-1/png/png.c **** /* HARDWARE OR SOFTWARE OPTION SUPPORT */
4215:fltk-1.3.4-1/png/png.c **** #ifdef PNG_SET_OPTION_SUPPORTED
4216:fltk-1.3.4-1/png/png.c **** int PNGAPI
4217:fltk-1.3.4-1/png/png.c **** png_set_option(png_structrp png_ptr, int option, int onoff)
4218:fltk-1.3.4-1/png/png.c **** {
4219:fltk-1.3.4-1/png/png.c ****    if (png_ptr != NULL && option >= 0 && option < PNG_OPTION_NEXT &&
4220:fltk-1.3.4-1/png/png.c ****       (option & 1) == 0)
4221:fltk-1.3.4-1/png/png.c ****    {
4222:fltk-1.3.4-1/png/png.c ****       int mask = 3 << option;
4223:fltk-1.3.4-1/png/png.c ****       int setting = (2 + (onoff != 0)) << option;
4224:fltk-1.3.4-1/png/png.c ****       int current = png_ptr->options;
4225:fltk-1.3.4-1/png/png.c **** 
4226:fltk-1.3.4-1/png/png.c ****       png_ptr->options = (png_byte)((current & ~mask) | setting);
4227:fltk-1.3.4-1/png/png.c **** 
4228:fltk-1.3.4-1/png/png.c ****       return (current & mask) >> option;
4229:fltk-1.3.4-1/png/png.c ****    }
4230:fltk-1.3.4-1/png/png.c **** 
4231:fltk-1.3.4-1/png/png.c ****    return PNG_OPTION_INVALID;
4232:fltk-1.3.4-1/png/png.c **** }
4233:fltk-1.3.4-1/png/png.c **** #endif
4234:fltk-1.3.4-1/png/png.c **** 
4235:fltk-1.3.4-1/png/png.c **** /* sRGB support */
4236:fltk-1.3.4-1/png/png.c **** #if defined(PNG_SIMPLIFIED_READ_SUPPORTED) ||\
4237:fltk-1.3.4-1/png/png.c ****    defined(PNG_SIMPLIFIED_WRITE_SUPPORTED)
4238:fltk-1.3.4-1/png/png.c **** /* sRGB conversion tables; these are machine generated with the code in
4239:fltk-1.3.4-1/png/png.c ****  * contrib/tools/makesRGB.c.  The actual sRGB transfer curve defined in the
4240:fltk-1.3.4-1/png/png.c ****  * specification (see the article at http://en.wikipedia.org/wiki/SRGB)
4241:fltk-1.3.4-1/png/png.c ****  * is used, not the gamma=1/2.2 approximation use elsewhere in libpng.
4242:fltk-1.3.4-1/png/png.c ****  * The sRGB to linear table is exact (to the nearest 16 bit linear fraction).
4243:fltk-1.3.4-1/png/png.c ****  * The inverse (linear to sRGB) table has accuracies as follows:
4244:fltk-1.3.4-1/png/png.c ****  *
4245:fltk-1.3.4-1/png/png.c ****  * For all possible (255*65535+1) input values:
4246:fltk-1.3.4-1/png/png.c ****  *
4247:fltk-1.3.4-1/png/png.c ****  *    error: -0.515566 - 0.625971, 79441 (0.475369%) of readings inexact
4248:fltk-1.3.4-1/png/png.c ****  *
4249:fltk-1.3.4-1/png/png.c ****  * For the input values corresponding to the 65536 16-bit values:
4250:fltk-1.3.4-1/png/png.c ****  *
4251:fltk-1.3.4-1/png/png.c ****  *    error: -0.513727 - 0.607759, 308 (0.469978%) of readings inexact
4252:fltk-1.3.4-1/png/png.c ****  *
4253:fltk-1.3.4-1/png/png.c ****  * In all cases the inexact readings are only off by one.
4254:fltk-1.3.4-1/png/png.c ****  */
4255:fltk-1.3.4-1/png/png.c **** 
4256:fltk-1.3.4-1/png/png.c **** #ifdef PNG_SIMPLIFIED_READ_SUPPORTED
4257:fltk-1.3.4-1/png/png.c **** /* The convert-to-sRGB table is only currently required for read. */
4258:fltk-1.3.4-1/png/png.c **** const png_uint_16 png_sRGB_table[256] =
4259:fltk-1.3.4-1/png/png.c **** {
4260:fltk-1.3.4-1/png/png.c ****    0,20,40,60,80,99,119,139,
4261:fltk-1.3.4-1/png/png.c ****    159,179,199,219,241,264,288,313,
4262:fltk-1.3.4-1/png/png.c ****    340,367,396,427,458,491,526,562,
4263:fltk-1.3.4-1/png/png.c ****    599,637,677,718,761,805,851,898,
4264:fltk-1.3.4-1/png/png.c ****    947,997,1048,1101,1156,1212,1270,1330,
4265:fltk-1.3.4-1/png/png.c ****    1391,1453,1517,1583,1651,1720,1790,1863,
4266:fltk-1.3.4-1/png/png.c ****    1937,2013,2090,2170,2250,2333,2418,2504,
4267:fltk-1.3.4-1/png/png.c ****    2592,2681,2773,2866,2961,3058,3157,3258,
4268:fltk-1.3.4-1/png/png.c ****    3360,3464,3570,3678,3788,3900,4014,4129,
4269:fltk-1.3.4-1/png/png.c ****    4247,4366,4488,4611,4736,4864,4993,5124,
4270:fltk-1.3.4-1/png/png.c ****    5257,5392,5530,5669,5810,5953,6099,6246,
4271:fltk-1.3.4-1/png/png.c ****    6395,6547,6700,6856,7014,7174,7335,7500,
4272:fltk-1.3.4-1/png/png.c ****    7666,7834,8004,8177,8352,8528,8708,8889,
4273:fltk-1.3.4-1/png/png.c ****    9072,9258,9445,9635,9828,10022,10219,10417,
4274:fltk-1.3.4-1/png/png.c ****    10619,10822,11028,11235,11446,11658,11873,12090,
4275:fltk-1.3.4-1/png/png.c ****    12309,12530,12754,12980,13209,13440,13673,13909,
4276:fltk-1.3.4-1/png/png.c ****    14146,14387,14629,14874,15122,15371,15623,15878,
4277:fltk-1.3.4-1/png/png.c ****    16135,16394,16656,16920,17187,17456,17727,18001,
4278:fltk-1.3.4-1/png/png.c ****    18277,18556,18837,19121,19407,19696,19987,20281,
4279:fltk-1.3.4-1/png/png.c ****    20577,20876,21177,21481,21787,22096,22407,22721,
4280:fltk-1.3.4-1/png/png.c ****    23038,23357,23678,24002,24329,24658,24990,25325,
4281:fltk-1.3.4-1/png/png.c ****    25662,26001,26344,26688,27036,27386,27739,28094,
4282:fltk-1.3.4-1/png/png.c ****    28452,28813,29176,29542,29911,30282,30656,31033,
4283:fltk-1.3.4-1/png/png.c ****    31412,31794,32179,32567,32957,33350,33745,34143,
4284:fltk-1.3.4-1/png/png.c ****    34544,34948,35355,35764,36176,36591,37008,37429,
4285:fltk-1.3.4-1/png/png.c ****    37852,38278,38706,39138,39572,40009,40449,40891,
4286:fltk-1.3.4-1/png/png.c ****    41337,41785,42236,42690,43147,43606,44069,44534,
4287:fltk-1.3.4-1/png/png.c ****    45002,45473,45947,46423,46903,47385,47871,48359,
4288:fltk-1.3.4-1/png/png.c ****    48850,49344,49841,50341,50844,51349,51858,52369,
4289:fltk-1.3.4-1/png/png.c ****    52884,53401,53921,54445,54971,55500,56032,56567,
4290:fltk-1.3.4-1/png/png.c ****    57105,57646,58190,58737,59287,59840,60396,60955,
4291:fltk-1.3.4-1/png/png.c ****    61517,62082,62650,63221,63795,64372,64952,65535
4292:fltk-1.3.4-1/png/png.c **** };
4293:fltk-1.3.4-1/png/png.c **** #endif /* SIMPLIFIED_READ */
4294:fltk-1.3.4-1/png/png.c **** 
4295:fltk-1.3.4-1/png/png.c **** /* The base/delta tables are required for both read and write (but currently
4296:fltk-1.3.4-1/png/png.c ****  * only the simplified versions.)
4297:fltk-1.3.4-1/png/png.c ****  */
4298:fltk-1.3.4-1/png/png.c **** const png_uint_16 png_sRGB_base[512] =
4299:fltk-1.3.4-1/png/png.c **** {
4300:fltk-1.3.4-1/png/png.c ****    128,1782,3383,4644,5675,6564,7357,8074,
4301:fltk-1.3.4-1/png/png.c ****    8732,9346,9921,10463,10977,11466,11935,12384,
4302:fltk-1.3.4-1/png/png.c ****    12816,13233,13634,14024,14402,14769,15125,15473,
4303:fltk-1.3.4-1/png/png.c ****    15812,16142,16466,16781,17090,17393,17690,17981,
4304:fltk-1.3.4-1/png/png.c ****    18266,18546,18822,19093,19359,19621,19879,20133,
4305:fltk-1.3.4-1/png/png.c ****    20383,20630,20873,21113,21349,21583,21813,22041,
4306:fltk-1.3.4-1/png/png.c ****    22265,22487,22707,22923,23138,23350,23559,23767,
4307:fltk-1.3.4-1/png/png.c ****    23972,24175,24376,24575,24772,24967,25160,25352,
4308:fltk-1.3.4-1/png/png.c ****    25542,25730,25916,26101,26284,26465,26645,26823,
4309:fltk-1.3.4-1/png/png.c ****    27000,27176,27350,27523,27695,27865,28034,28201,
4310:fltk-1.3.4-1/png/png.c ****    28368,28533,28697,28860,29021,29182,29341,29500,
4311:fltk-1.3.4-1/png/png.c ****    29657,29813,29969,30123,30276,30429,30580,30730,
4312:fltk-1.3.4-1/png/png.c ****    30880,31028,31176,31323,31469,31614,31758,31902,
4313:fltk-1.3.4-1/png/png.c ****    32045,32186,32327,32468,32607,32746,32884,33021,
4314:fltk-1.3.4-1/png/png.c ****    33158,33294,33429,33564,33697,33831,33963,34095,
4315:fltk-1.3.4-1/png/png.c ****    34226,34357,34486,34616,34744,34873,35000,35127,
4316:fltk-1.3.4-1/png/png.c ****    35253,35379,35504,35629,35753,35876,35999,36122,
4317:fltk-1.3.4-1/png/png.c ****    36244,36365,36486,36606,36726,36845,36964,37083,
4318:fltk-1.3.4-1/png/png.c ****    37201,37318,37435,37551,37668,37783,37898,38013,
4319:fltk-1.3.4-1/png/png.c ****    38127,38241,38354,38467,38580,38692,38803,38915,
4320:fltk-1.3.4-1/png/png.c ****    39026,39136,39246,39356,39465,39574,39682,39790,
4321:fltk-1.3.4-1/png/png.c ****    39898,40005,40112,40219,40325,40431,40537,40642,
4322:fltk-1.3.4-1/png/png.c ****    40747,40851,40955,41059,41163,41266,41369,41471,
4323:fltk-1.3.4-1/png/png.c ****    41573,41675,41777,41878,41979,42079,42179,42279,
4324:fltk-1.3.4-1/png/png.c ****    42379,42478,42577,42676,42775,42873,42971,43068,
4325:fltk-1.3.4-1/png/png.c ****    43165,43262,43359,43456,43552,43648,43743,43839,
4326:fltk-1.3.4-1/png/png.c ****    43934,44028,44123,44217,44311,44405,44499,44592,
4327:fltk-1.3.4-1/png/png.c ****    44685,44778,44870,44962,45054,45146,45238,45329,
4328:fltk-1.3.4-1/png/png.c ****    45420,45511,45601,45692,45782,45872,45961,46051,
4329:fltk-1.3.4-1/png/png.c ****    46140,46229,46318,46406,46494,46583,46670,46758,
4330:fltk-1.3.4-1/png/png.c ****    46846,46933,47020,47107,47193,47280,47366,47452,
4331:fltk-1.3.4-1/png/png.c ****    47538,47623,47709,47794,47879,47964,48048,48133,
4332:fltk-1.3.4-1/png/png.c ****    48217,48301,48385,48468,48552,48635,48718,48801,
4333:fltk-1.3.4-1/png/png.c ****    48884,48966,49048,49131,49213,49294,49376,49458,
4334:fltk-1.3.4-1/png/png.c ****    49539,49620,49701,49782,49862,49943,50023,50103,
4335:fltk-1.3.4-1/png/png.c ****    50183,50263,50342,50422,50501,50580,50659,50738,
4336:fltk-1.3.4-1/png/png.c ****    50816,50895,50973,51051,51129,51207,51285,51362,
4337:fltk-1.3.4-1/png/png.c ****    51439,51517,51594,51671,51747,51824,51900,51977,
4338:fltk-1.3.4-1/png/png.c ****    52053,52129,52205,52280,52356,52432,52507,52582,
4339:fltk-1.3.4-1/png/png.c ****    52657,52732,52807,52881,52956,53030,53104,53178,
4340:fltk-1.3.4-1/png/png.c ****    53252,53326,53400,53473,53546,53620,53693,53766,
4341:fltk-1.3.4-1/png/png.c ****    53839,53911,53984,54056,54129,54201,54273,54345,
4342:fltk-1.3.4-1/png/png.c ****    54417,54489,54560,54632,54703,54774,54845,54916,
4343:fltk-1.3.4-1/png/png.c ****    54987,55058,55129,55199,55269,55340,55410,55480,
4344:fltk-1.3.4-1/png/png.c ****    55550,55620,55689,55759,55828,55898,55967,56036,
4345:fltk-1.3.4-1/png/png.c ****    56105,56174,56243,56311,56380,56448,56517,56585,
4346:fltk-1.3.4-1/png/png.c ****    56653,56721,56789,56857,56924,56992,57059,57127,
4347:fltk-1.3.4-1/png/png.c ****    57194,57261,57328,57395,57462,57529,57595,57662,
4348:fltk-1.3.4-1/png/png.c ****    57728,57795,57861,57927,57993,58059,58125,58191,
4349:fltk-1.3.4-1/png/png.c ****    58256,58322,58387,58453,58518,58583,58648,58713,
4350:fltk-1.3.4-1/png/png.c ****    58778,58843,58908,58972,59037,59101,59165,59230,
4351:fltk-1.3.4-1/png/png.c ****    59294,59358,59422,59486,59549,59613,59677,59740,
4352:fltk-1.3.4-1/png/png.c ****    59804,59867,59930,59993,60056,60119,60182,60245,
4353:fltk-1.3.4-1/png/png.c ****    60308,60370,60433,60495,60558,60620,60682,60744,
4354:fltk-1.3.4-1/png/png.c ****    60806,60868,60930,60992,61054,61115,61177,61238,
4355:fltk-1.3.4-1/png/png.c ****    61300,61361,61422,61483,61544,61605,61666,61727,
4356:fltk-1.3.4-1/png/png.c ****    61788,61848,61909,61969,62030,62090,62150,62211,
4357:fltk-1.3.4-1/png/png.c ****    62271,62331,62391,62450,62510,62570,62630,62689,
4358:fltk-1.3.4-1/png/png.c ****    62749,62808,62867,62927,62986,63045,63104,63163,
4359:fltk-1.3.4-1/png/png.c ****    63222,63281,63340,63398,63457,63515,63574,63632,
4360:fltk-1.3.4-1/png/png.c ****    63691,63749,63807,63865,63923,63981,64039,64097,
4361:fltk-1.3.4-1/png/png.c ****    64155,64212,64270,64328,64385,64443,64500,64557,
4362:fltk-1.3.4-1/png/png.c ****    64614,64672,64729,64786,64843,64900,64956,65013,
4363:fltk-1.3.4-1/png/png.c ****    65070,65126,65183,65239,65296,65352,65409,65465
4364:fltk-1.3.4-1/png/png.c **** };
4365:fltk-1.3.4-1/png/png.c **** 
4366:fltk-1.3.4-1/png/png.c **** const png_byte png_sRGB_delta[512] =
4367:fltk-1.3.4-1/png/png.c **** {
4368:fltk-1.3.4-1/png/png.c ****    207,201,158,129,113,100,90,82,77,72,68,64,61,59,56,54,
4369:fltk-1.3.4-1/png/png.c ****    52,50,49,47,46,45,43,42,41,40,39,39,38,37,36,36,
4370:fltk-1.3.4-1/png/png.c ****    35,34,34,33,33,32,32,31,31,30,30,30,29,29,28,28,
4371:fltk-1.3.4-1/png/png.c ****    28,27,27,27,27,26,26,26,25,25,25,25,24,24,24,24,
4372:fltk-1.3.4-1/png/png.c ****    23,23,23,23,23,22,22,22,22,22,22,21,21,21,21,21,
4373:fltk-1.3.4-1/png/png.c ****    21,20,20,20,20,20,20,20,20,19,19,19,19,19,19,19,
4374:fltk-1.3.4-1/png/png.c ****    19,18,18,18,18,18,18,18,18,18,18,17,17,17,17,17,
4375:fltk-1.3.4-1/png/png.c ****    17,17,17,17,17,17,16,16,16,16,16,16,16,16,16,16,
4376:fltk-1.3.4-1/png/png.c ****    16,16,16,16,15,15,15,15,15,15,15,15,15,15,15,15,
4377:fltk-1.3.4-1/png/png.c ****    15,15,15,15,14,14,14,14,14,14,14,14,14,14,14,14,
4378:fltk-1.3.4-1/png/png.c ****    14,14,14,14,14,14,14,13,13,13,13,13,13,13,13,13,
4379:fltk-1.3.4-1/png/png.c ****    13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,
4380:fltk-1.3.4-1/png/png.c ****    12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
4381:fltk-1.3.4-1/png/png.c ****    12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,
4382:fltk-1.3.4-1/png/png.c ****    11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
4383:fltk-1.3.4-1/png/png.c ****    11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
4384:fltk-1.3.4-1/png/png.c ****    11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
4385:fltk-1.3.4-1/png/png.c ****    10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
4386:fltk-1.3.4-1/png/png.c ****    10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
4387:fltk-1.3.4-1/png/png.c ****    10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
4388:fltk-1.3.4-1/png/png.c ****    9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
4389:fltk-1.3.4-1/png/png.c ****    9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
4390:fltk-1.3.4-1/png/png.c ****    9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
4391:fltk-1.3.4-1/png/png.c ****    9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
4392:fltk-1.3.4-1/png/png.c ****    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
4393:fltk-1.3.4-1/png/png.c ****    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
4394:fltk-1.3.4-1/png/png.c ****    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
4395:fltk-1.3.4-1/png/png.c ****    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
4396:fltk-1.3.4-1/png/png.c ****    8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,
4397:fltk-1.3.4-1/png/png.c ****    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
4398:fltk-1.3.4-1/png/png.c ****    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
4399:fltk-1.3.4-1/png/png.c ****    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7
4400:fltk-1.3.4-1/png/png.c **** };
4401:fltk-1.3.4-1/png/png.c **** #endif /* SIMPLIFIED READ/WRITE sRGB support */
4402:fltk-1.3.4-1/png/png.c **** 
4403:fltk-1.3.4-1/png/png.c **** /* SIMPLIFIED READ/WRITE SUPPORT */
4404:fltk-1.3.4-1/png/png.c **** #if defined(PNG_SIMPLIFIED_READ_SUPPORTED) ||\
4405:fltk-1.3.4-1/png/png.c ****    defined(PNG_SIMPLIFIED_WRITE_SUPPORTED)
4406:fltk-1.3.4-1/png/png.c **** static int
4407:fltk-1.3.4-1/png/png.c **** png_image_free_function(png_voidp argument)
4408:fltk-1.3.4-1/png/png.c **** {
 424              		.loc 1 4408 0
 425              		.cfi_startproc
 426              	.LVL49:
 427 0000 53       		pushq	%rbx
 428              		.cfi_def_cfa_offset 16
 429              		.cfi_offset 3, -16
 430 0001 4883EC50 		subq	$80, %rsp
 431              		.cfi_def_cfa_offset 96
4409:fltk-1.3.4-1/png/png.c ****    png_imagep image = png_voidcast(png_imagep, argument);
4410:fltk-1.3.4-1/png/png.c ****    png_controlp cp = image->opaque;
 432              		.loc 1 4410 0
 433 0005 488B37   		movq	(%rdi), %rsi
4408:fltk-1.3.4-1/png/png.c ****    png_imagep image = png_voidcast(png_imagep, argument);
 434              		.loc 1 4408 0
 435 0008 64488B04 		movq	%fs:40, %rax
 435      25280000 
 435      00
 436 0011 48894424 		movq	%rax, 72(%rsp)
 436      48
 437 0016 31C0     		xorl	%eax, %eax
 438              	.LVL50:
4411:fltk-1.3.4-1/png/png.c ****    png_control c;
4412:fltk-1.3.4-1/png/png.c **** 
4413:fltk-1.3.4-1/png/png.c ****    /* Double check that we have a png_ptr - it should be impossible to get here
4414:fltk-1.3.4-1/png/png.c ****     * without one.
4415:fltk-1.3.4-1/png/png.c ****     */
4416:fltk-1.3.4-1/png/png.c ****    if (cp->png_ptr == NULL)
 439              		.loc 1 4416 0
 440 0018 488B16   		movq	(%rsi), %rdx
 441 001b 4885D2   		testq	%rdx, %rdx
 442 001e 0F84D400 		je	.L53
 442      0000
4417:fltk-1.3.4-1/png/png.c ****       return 0;
4418:fltk-1.3.4-1/png/png.c **** 
4419:fltk-1.3.4-1/png/png.c ****    /* First free any data held in the control structure. */
4420:fltk-1.3.4-1/png/png.c **** #  ifdef PNG_STDIO_SUPPORTED
4421:fltk-1.3.4-1/png/png.c ****       if (cp->owned_file != 0)
 443              		.loc 1 4421 0
 444 0024 0FB64628 		movzbl	40(%rsi), %eax
 445 0028 4889FB   		movq	%rdi, %rbx
 446 002b A802     		testb	$2, %al
 447 002d 7579     		jne	.L58
 448              	.LVL51:
 449              	.L49:
4422:fltk-1.3.4-1/png/png.c ****       {
4423:fltk-1.3.4-1/png/png.c ****          FILE *fp = png_voidcast(FILE*, cp->png_ptr->io_ptr);
4424:fltk-1.3.4-1/png/png.c ****          cp->owned_file = 0;
4425:fltk-1.3.4-1/png/png.c **** 
4426:fltk-1.3.4-1/png/png.c ****          /* Ignore errors here. */
4427:fltk-1.3.4-1/png/png.c ****          if (fp != NULL)
4428:fltk-1.3.4-1/png/png.c ****          {
4429:fltk-1.3.4-1/png/png.c ****             cp->png_ptr->io_ptr = NULL;
4430:fltk-1.3.4-1/png/png.c ****             (void)fclose(fp);
4431:fltk-1.3.4-1/png/png.c ****          }
4432:fltk-1.3.4-1/png/png.c ****       }
4433:fltk-1.3.4-1/png/png.c **** #  endif
4434:fltk-1.3.4-1/png/png.c **** 
4435:fltk-1.3.4-1/png/png.c ****    /* Copy the control structure so that the original, allocated, version can be
4436:fltk-1.3.4-1/png/png.c ****     * safely freed.  Notice that a png_error here stops the remainder of the
4437:fltk-1.3.4-1/png/png.c ****     * cleanup, but this is probably fine because that would indicate bad memory
4438:fltk-1.3.4-1/png/png.c ****     * problems anyway.
4439:fltk-1.3.4-1/png/png.c ****     */
4440:fltk-1.3.4-1/png/png.c ****    c = *cp;
 450              		.loc 1 4440 0
 451 002f 488B3E   		movq	(%rsi), %rdi
 452 0032 48897C24 		movq	%rdi, 16(%rsp)
 452      10
 453 0037 488B4608 		movq	8(%rsi), %rax
 454 003b 48894424 		movq	%rax, 24(%rsp)
 454      18
 455 0040 488B4610 		movq	16(%rsi), %rax
 456 0044 48894424 		movq	%rax, 32(%rsp)
 456      20
 457 0049 488B4618 		movq	24(%rsi), %rax
 458 004d 48894424 		movq	%rax, 40(%rsp)
 458      28
 459 0052 488B4620 		movq	32(%rsi), %rax
 460 0056 48894424 		movq	%rax, 48(%rsp)
 460      30
 461 005b 488B4628 		movq	40(%rsi), %rax
 462 005f 48894424 		movq	%rax, 56(%rsp)
 462      38
4441:fltk-1.3.4-1/png/png.c ****    image->opaque = &c;
 463              		.loc 1 4441 0
 464 0064 488D4424 		leaq	16(%rsp), %rax
 464      10
 465 0069 488903   		movq	%rax, (%rbx)
4442:fltk-1.3.4-1/png/png.c ****    png_free(c.png_ptr, cp);
 466              		.loc 1 4442 0
 467 006c E8000000 		call	png_free
 467      00
 468              	.LVL52:
4443:fltk-1.3.4-1/png/png.c **** 
4444:fltk-1.3.4-1/png/png.c ****    /* Then the structures, calling the correct API. */
4445:fltk-1.3.4-1/png/png.c ****    if (c.for_write != 0)
 469              		.loc 1 4445 0
 470 0071 F6442438 		testb	$1, 56(%rsp)
 470      01
4446:fltk-1.3.4-1/png/png.c ****    {
4447:fltk-1.3.4-1/png/png.c **** #     ifdef PNG_SIMPLIFIED_WRITE_SUPPORTED
4448:fltk-1.3.4-1/png/png.c ****          png_destroy_write_struct(&c.png_ptr, &c.info_ptr);
 471              		.loc 1 4448 0
 472 0076 488D7424 		leaq	24(%rsp), %rsi
 472      18
4445:fltk-1.3.4-1/png/png.c ****    {
 473              		.loc 1 4445 0
 474 007b 7563     		jne	.L59
4449:fltk-1.3.4-1/png/png.c **** #     else
4450:fltk-1.3.4-1/png/png.c ****          png_error(c.png_ptr, "simplified write not supported");
4451:fltk-1.3.4-1/png/png.c **** #     endif
4452:fltk-1.3.4-1/png/png.c ****    }
4453:fltk-1.3.4-1/png/png.c ****    else
4454:fltk-1.3.4-1/png/png.c ****    {
4455:fltk-1.3.4-1/png/png.c **** #     ifdef PNG_SIMPLIFIED_READ_SUPPORTED
4456:fltk-1.3.4-1/png/png.c ****          png_destroy_read_struct(&c.png_ptr, &c.info_ptr, NULL);
 475              		.loc 1 4456 0
 476 007d 488D7C24 		leaq	16(%rsp), %rdi
 476      10
 477 0082 31D2     		xorl	%edx, %edx
 478 0084 E8000000 		call	png_destroy_read_struct
 478      00
 479              	.LVL53:
4457:fltk-1.3.4-1/png/png.c **** #     else
4458:fltk-1.3.4-1/png/png.c ****          png_error(c.png_ptr, "simplified read not supported");
4459:fltk-1.3.4-1/png/png.c **** #     endif
4460:fltk-1.3.4-1/png/png.c ****    }
4461:fltk-1.3.4-1/png/png.c **** 
4462:fltk-1.3.4-1/png/png.c ****    /* Success. */
4463:fltk-1.3.4-1/png/png.c ****    return 1;
 480              		.loc 1 4463 0
 481 0089 B8010000 		movl	$1, %eax
 481      00
 482              	.LVL54:
 483              	.L47:
4464:fltk-1.3.4-1/png/png.c **** }
 484              		.loc 1 4464 0
 485 008e 488B4C24 		movq	72(%rsp), %rcx
 485      48
 486 0093 6448330C 		xorq	%fs:40, %rcx
 486      25280000 
 486      00
 487 009c 755E     		jne	.L60
 488 009e 4883C450 		addq	$80, %rsp
 489              		.cfi_remember_state
 490              		.cfi_def_cfa_offset 16
 491 00a2 5B       		popq	%rbx
 492              		.cfi_def_cfa_offset 8
 493 00a3 C3       		ret
 494              	.LVL55:
 495              		.p2align 4,,10
 496 00a4 0F1F4000 		.p2align 3
 497              	.L58:
 498              		.cfi_restore_state
 499              	.LBB199:
4423:fltk-1.3.4-1/png/png.c ****          cp->owned_file = 0;
 500              		.loc 1 4423 0
 501 00a8 488BBA08 		movq	264(%rdx), %rdi
 501      010000
 502              	.LVL56:
4424:fltk-1.3.4-1/png/png.c **** 
 503              		.loc 1 4424 0
 504 00af 83E0FD   		andl	$-3, %eax
 505 00b2 884628   		movb	%al, 40(%rsi)
4427:fltk-1.3.4-1/png/png.c ****          {
 506              		.loc 1 4427 0
 507 00b5 4885FF   		testq	%rdi, %rdi
 508 00b8 0F8471FF 		je	.L49
 508      FFFF
4429:fltk-1.3.4-1/png/png.c ****             (void)fclose(fp);
 509              		.loc 1 4429 0
 510 00be 48C78208 		movq	$0, 264(%rdx)
 510      01000000 
 510      000000
 511 00c9 48897424 		movq	%rsi, 8(%rsp)
 511      08
4430:fltk-1.3.4-1/png/png.c ****          }
 512              		.loc 1 4430 0
 513 00ce E8000000 		call	fclose
 513      00
 514              	.LVL57:
 515 00d3 488B7424 		movq	8(%rsp), %rsi
 515      08
 516 00d8 E952FFFF 		jmp	.L49
 516      FF
 517              	.LVL58:
 518 00dd 0F1F00   		.p2align 4,,10
 519              		.p2align 3
 520              	.L59:
 521              	.LBE199:
4448:fltk-1.3.4-1/png/png.c **** #     else
 522              		.loc 1 4448 0
 523 00e0 488D7C24 		leaq	16(%rsp), %rdi
 523      10
 524 00e5 E8000000 		call	png_destroy_write_struct
 524      00
 525              	.LVL59:
4463:fltk-1.3.4-1/png/png.c **** }
 526              		.loc 1 4463 0
 527 00ea B8010000 		movl	$1, %eax
 527      00
 528 00ef EB9D     		jmp	.L47
 529              	.LVL60:
 530              		.p2align 4,,10
 531 00f1 0F1F8000 		.p2align 3
 531      000000
 532              	.L53:
4417:fltk-1.3.4-1/png/png.c **** 
 533              		.loc 1 4417 0
 534 00f8 31C0     		xorl	%eax, %eax
 535 00fa EB92     		jmp	.L47
 536              	.LVL61:
 537              	.L60:
 538              		.loc 1 4464 0
 539 00fc E8000000 		call	__stack_chk_fail
 539      00
 540              	.LVL62:
 541              		.cfi_endproc
 542              	.LFE133:
 544              		.section	.text.unlikely.png_image_free_function
 545              	.LCOLDE11:
 546              		.section	.text.png_image_free_function
 547              	.LHOTE11:
 548              		.section	.text.unlikely.png_colorspace_endpoints_match,"ax",@progbits
 549              	.LCOLDB12:
 550              		.section	.text.png_colorspace_endpoints_match,"ax",@progbits
 551              	.LHOTB12:
 552              		.p2align 4,,15
 554              	png_colorspace_endpoints_match:
 555              	.LFB91:
1552:fltk-1.3.4-1/png/png.c ****    /* Allow an error of +/-0.01 (absolute value) on each chromaticity */
 556              		.loc 1 1552 0
 557              		.cfi_startproc
 558              	.LVL63:
1554:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->whitey, xy2->whitey,delta) ||
 559              		.loc 1 1554 0
 560 0000 8B4E18   		movl	24(%rsi), %ecx
 561 0003 448B4718 		movl	24(%rdi), %r8d
1562:fltk-1.3.4-1/png/png.c ****    return 1;
 562              		.loc 1 1562 0
 563 0007 31C0     		xorl	%eax, %eax
1554:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->whitey, xy2->whitey,delta) ||
 564              		.loc 1 1554 0
 565 0009 4189C9   		movl	%ecx, %r9d
 566 000c 4129D1   		subl	%edx, %r9d
 567 000f 4539C8   		cmpl	%r9d, %r8d
 568 0012 0F8CC200 		jl	.L62
 568      0000
1554:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->whitey, xy2->whitey,delta) ||
 569              		.loc 1 1554 0 is_stmt 0 discriminator 1
 570 0018 01D1     		addl	%edx, %ecx
 571 001a 4139C8   		cmpl	%ecx, %r8d
 572 001d 0F8FB700 		jg	.L62
 572      0000
1555:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->redx,   xy2->redx,  delta) ||
 573              		.loc 1 1555 0 is_stmt 1 discriminator 2
 574 0023 8B4E1C   		movl	28(%rsi), %ecx
 575 0026 448B471C 		movl	28(%rdi), %r8d
1554:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->whitey, xy2->whitey,delta) ||
 576              		.loc 1 1554 0 discriminator 2
 577 002a 4189C9   		movl	%ecx, %r9d
 578 002d 4129D1   		subl	%edx, %r9d
 579 0030 4539C8   		cmpl	%r9d, %r8d
 580 0033 0F8CA100 		jl	.L62
 580      0000
1555:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->redx,   xy2->redx,  delta) ||
 581              		.loc 1 1555 0
 582 0039 01D1     		addl	%edx, %ecx
 583 003b 4139C8   		cmpl	%ecx, %r8d
 584 003e 0F8F9600 		jg	.L62
 584      0000
1556:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->redy,   xy2->redy,  delta) ||
 585              		.loc 1 1556 0 discriminator 1
 586 0044 8B0E     		movl	(%rsi), %ecx
 587 0046 448B07   		movl	(%rdi), %r8d
1555:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->redx,   xy2->redx,  delta) ||
 588              		.loc 1 1555 0 discriminator 1
 589 0049 4189C9   		movl	%ecx, %r9d
 590 004c 4129D1   		subl	%edx, %r9d
 591 004f 4539C8   		cmpl	%r9d, %r8d
 592 0052 0F8C8200 		jl	.L62
 592      0000
1556:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->redy,   xy2->redy,  delta) ||
 593              		.loc 1 1556 0
 594 0058 01D1     		addl	%edx, %ecx
 595 005a 4139C8   		cmpl	%ecx, %r8d
 596 005d 7F7B     		jg	.L62
1557:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->greenx, xy2->greenx,delta) ||
 597              		.loc 1 1557 0 discriminator 1
 598 005f 8B4E04   		movl	4(%rsi), %ecx
 599 0062 448B4704 		movl	4(%rdi), %r8d
1556:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->redy,   xy2->redy,  delta) ||
 600              		.loc 1 1556 0 discriminator 1
 601 0066 4189C9   		movl	%ecx, %r9d
 602 0069 4129D1   		subl	%edx, %r9d
 603 006c 4539C8   		cmpl	%r9d, %r8d
 604 006f 7C69     		jl	.L62
1557:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->greenx, xy2->greenx,delta) ||
 605              		.loc 1 1557 0
 606 0071 01D1     		addl	%edx, %ecx
 607 0073 4139C8   		cmpl	%ecx, %r8d
 608 0076 7F62     		jg	.L62
 609              	.LVL64:
 610              	.LBB202:
 611              	.LBB203:
1558:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->greeny, xy2->greeny,delta) ||
 612              		.loc 1 1558 0
 613 0078 8B4E08   		movl	8(%rsi), %ecx
 614 007b 448B4708 		movl	8(%rdi), %r8d
1557:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->greenx, xy2->greenx,delta) ||
 615              		.loc 1 1557 0
 616 007f 4189C9   		movl	%ecx, %r9d
 617 0082 4129D1   		subl	%edx, %r9d
 618 0085 4539C8   		cmpl	%r9d, %r8d
 619 0088 7C50     		jl	.L62
1558:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->greeny, xy2->greeny,delta) ||
 620              		.loc 1 1558 0
 621 008a 01D1     		addl	%edx, %ecx
 622 008c 4139C8   		cmpl	%ecx, %r8d
 623 008f 7F49     		jg	.L62
1559:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->bluex,  xy2->bluex, delta) ||
 624              		.loc 1 1559 0
 625 0091 8B4E0C   		movl	12(%rsi), %ecx
 626 0094 448B470C 		movl	12(%rdi), %r8d
1558:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->greeny, xy2->greeny,delta) ||
 627              		.loc 1 1558 0
 628 0098 4189C9   		movl	%ecx, %r9d
 629 009b 4129D1   		subl	%edx, %r9d
 630 009e 4539C8   		cmpl	%r9d, %r8d
 631 00a1 7C37     		jl	.L62
1559:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->bluex,  xy2->bluex, delta) ||
 632              		.loc 1 1559 0
 633 00a3 01D1     		addl	%edx, %ecx
 634 00a5 4139C8   		cmpl	%ecx, %r8d
 635 00a8 7F30     		jg	.L62
1560:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->bluey,  xy2->bluey, delta))
 636              		.loc 1 1560 0
 637 00aa 8B4E10   		movl	16(%rsi), %ecx
 638 00ad 448B4710 		movl	16(%rdi), %r8d
1559:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->bluex,  xy2->bluex, delta) ||
 639              		.loc 1 1559 0
 640 00b1 4189C9   		movl	%ecx, %r9d
 641 00b4 4129D1   		subl	%edx, %r9d
 642 00b7 4539C8   		cmpl	%r9d, %r8d
 643 00ba 7C1E     		jl	.L62
1560:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->bluey,  xy2->bluey, delta))
 644              		.loc 1 1560 0
 645 00bc 01D1     		addl	%edx, %ecx
 646 00be 4139C8   		cmpl	%ecx, %r8d
 647 00c1 7F17     		jg	.L62
1561:fltk-1.3.4-1/png/png.c ****       return 0;
 648              		.loc 1 1561 0
 649 00c3 8B4E14   		movl	20(%rsi), %ecx
 650 00c6 8B7F14   		movl	20(%rdi), %edi
 651              	.LVL65:
1560:fltk-1.3.4-1/png/png.c ****        PNG_OUT_OF_RANGE(xy1->bluey,  xy2->bluey, delta))
 652              		.loc 1 1560 0
 653 00c9 89CE     		movl	%ecx, %esi
 654              	.LVL66:
 655 00cb 29D6     		subl	%edx, %esi
 656 00cd 39F7     		cmpl	%esi, %edi
 657 00cf 7C09     		jl	.L62
 658              	.LBE203:
 659              	.LBE202:
1562:fltk-1.3.4-1/png/png.c ****    return 1;
 660              		.loc 1 1562 0
 661 00d1 01CA     		addl	%ecx, %edx
 662              	.LVL67:
 663 00d3 31C0     		xorl	%eax, %eax
 664 00d5 39D7     		cmpl	%edx, %edi
 665 00d7 0F9EC0   		setle	%al
 666              	.LVL68:
 667              	.L62:
1564:fltk-1.3.4-1/png/png.c **** 
 668              		.loc 1 1564 0
 669 00da F3C3     		rep ret
 670              		.cfi_endproc
 671              	.LFE91:
 673              		.section	.text.unlikely.png_colorspace_endpoints_match
 674              	.LCOLDE12:
 675              		.section	.text.png_colorspace_endpoints_match
 676              	.LHOTE12:
 677              		.section	.rodata.str1.1,"aMS",@progbits,1
 678              	.LC13:
 679 0000 696E636F 		.string	"inconsistent chromaticities"
 679      6E736973 
 679      74656E74 
 679      20636872 
 679      6F6D6174 
 680              		.section	.text.unlikely.png_colorspace_set_xy_and_XYZ,"ax",@progbits
 681              	.LCOLDB14:
 682              		.section	.text.png_colorspace_set_xy_and_XYZ,"ax",@progbits
 683              	.LHOTB14:
 684              		.p2align 4,,15
 686              	png_colorspace_set_xy_and_XYZ:
 687              	.LFB94:
1634:fltk-1.3.4-1/png/png.c ****    if ((colorspace->flags & PNG_COLORSPACE_INVALID) != 0)
 688              		.loc 1 1634 0
 689              		.cfi_startproc
 690              	.LVL69:
 691 0000 4155     		pushq	%r13
 692              		.cfi_def_cfa_offset 16
 693              		.cfi_offset 13, -16
 694 0002 4154     		pushq	%r12
 695              		.cfi_def_cfa_offset 24
 696              		.cfi_offset 12, -24
 697 0004 55       		pushq	%rbp
 698              		.cfi_def_cfa_offset 32
 699              		.cfi_offset 6, -32
 700 0005 53       		pushq	%rbx
 701              		.cfi_def_cfa_offset 40
 702              		.cfi_offset 3, -40
 703 0006 4883EC18 		subq	$24, %rsp
 704              		.cfi_def_cfa_offset 64
1635:fltk-1.3.4-1/png/png.c ****       return 0;
 705              		.loc 1 1635 0
 706 000a 0FB76E4A 		movzwl	74(%rsi), %ebp
 707 000e 6685ED   		testw	%bp, %bp
 708 0011 0F88F900 		js	.L83
 708      0000
1642:fltk-1.3.4-1/png/png.c ****        (colorspace->flags & PNG_COLORSPACE_HAVE_ENDPOINTS) != 0)
 709              		.loc 1 1642 0
 710 0017 4183F801 		cmpl	$1, %r8d
 711 001b 4589C5   		movl	%r8d, %r13d
 712 001e 4989CC   		movq	%rcx, %r12
 713 0021 4989D3   		movq	%rdx, %r11
 714 0024 4989F2   		movq	%rsi, %r10
 715 0027 4889FB   		movq	%rdi, %rbx
 716 002a 0F8EB000 		jle	.L90
 716      0000
 717              	.LVL70:
 718              	.L80:
1661:fltk-1.3.4-1/png/png.c ****    colorspace->end_points_XYZ = *XYZ;
 719              		.loc 1 1661 0
 720 0030 498B03   		movq	(%r11), %rax
1668:fltk-1.3.4-1/png/png.c ****       colorspace->flags |= PNG_COLORSPACE_ENDPOINTS_MATCH_sRGB;
 721              		.loc 1 1668 0
 722 0033 BAE80300 		movl	$1000, %edx
 722      00
 723 0038 BE000000 		movl	$sRGB_xy, %esi
 723      00
 724 003d 4C89DF   		movq	%r11, %rdi
1661:fltk-1.3.4-1/png/png.c ****    colorspace->end_points_XYZ = *XYZ;
 725              		.loc 1 1661 0
 726 0040 49894204 		movq	%rax, 4(%r10)
 727 0044 498B4308 		movq	8(%r11), %rax
 728 0048 4989420C 		movq	%rax, 12(%r10)
 729 004c 498B4310 		movq	16(%r11), %rax
 730 0050 49894214 		movq	%rax, 20(%r10)
 731 0054 498B4318 		movq	24(%r11), %rax
 732 0058 4989421C 		movq	%rax, 28(%r10)
1662:fltk-1.3.4-1/png/png.c ****    colorspace->flags |= PNG_COLORSPACE_HAVE_ENDPOINTS;
 733              		.loc 1 1662 0
 734 005c 498B0424 		movq	(%r12), %rax
 735 0060 49894224 		movq	%rax, 36(%r10)
 736 0064 498B4424 		movq	8(%r12), %rax
 736      08
 737 0069 4989422C 		movq	%rax, 44(%r10)
 738 006d 498B4424 		movq	16(%r12), %rax
 738      10
 739 0072 49894234 		movq	%rax, 52(%r10)
 740 0076 498B4424 		movq	24(%r12), %rax
 740      18
 741 007b 4989423C 		movq	%rax, 60(%r10)
 742 007f 418B4424 		movl	32(%r12), %eax
 742      20
 743 0084 41894244 		movl	%eax, 68(%r10)
1663:fltk-1.3.4-1/png/png.c **** 
 744              		.loc 1 1663 0
 745 0088 89E8     		movl	%ebp, %eax
 746 008a 83C802   		orl	$2, %eax
 747 008d 66418942 		movw	%ax, 74(%r10)
 747      4A
1668:fltk-1.3.4-1/png/png.c ****       colorspace->flags |= PNG_COLORSPACE_ENDPOINTS_MATCH_sRGB;
 748              		.loc 1 1668 0
 749 0092 E8000000 		call	png_colorspace_endpoints_match
 749      00
 750              	.LVL71:
 751 0097 85C0     		testl	%eax, %eax
1669:fltk-1.3.4-1/png/png.c **** 
 752              		.loc 1 1669 0
 753 0099 89E8     		movl	%ebp, %eax
1668:fltk-1.3.4-1/png/png.c ****       colorspace->flags |= PNG_COLORSPACE_ENDPOINTS_MATCH_sRGB;
 754              		.loc 1 1668 0
 755 009b 7523     		jne	.L91
1672:fltk-1.3.4-1/png/png.c ****          PNG_COLORSPACE_ENDPOINTS_MATCH_sRGB);
 756              		.loc 1 1672 0
 757 009d 83E0BF   		andl	$-65, %eax
 758 00a0 83C802   		orl	$2, %eax
 759 00a3 66418942 		movw	%ax, 74(%r10)
 759      4A
1675:fltk-1.3.4-1/png/png.c **** }
 760              		.loc 1 1675 0
 761 00a8 B8020000 		movl	$2, %eax
 761      00
 762              	.L79:
1676:fltk-1.3.4-1/png/png.c **** 
 763              		.loc 1 1676 0
 764 00ad 4883C418 		addq	$24, %rsp
 765              		.cfi_remember_state
 766              		.cfi_def_cfa_offset 40
 767 00b1 5B       		popq	%rbx
 768              		.cfi_def_cfa_offset 32
 769              	.LVL72:
 770 00b2 5D       		popq	%rbp
 771              		.cfi_def_cfa_offset 24
 772 00b3 415C     		popq	%r12
 773              		.cfi_def_cfa_offset 16
 774              	.LVL73:
 775 00b5 415D     		popq	%r13
 776              		.cfi_def_cfa_offset 8
 777              	.LVL74:
 778 00b7 C3       		ret
 779              	.LVL75:
 780 00b8 0F1F8400 		.p2align 4,,10
 780      00000000 
 781              		.p2align 3
 782              	.L91:
 783              		.cfi_restore_state
1669:fltk-1.3.4-1/png/png.c **** 
 784              		.loc 1 1669 0
 785 00c0 83C842   		orl	$66, %eax
 786 00c3 66418942 		movw	%ax, 74(%r10)
 786      4A
1676:fltk-1.3.4-1/png/png.c **** 
 787              		.loc 1 1676 0
 788 00c8 4883C418 		addq	$24, %rsp
 789              		.cfi_remember_state
 790              		.cfi_def_cfa_offset 40
1675:fltk-1.3.4-1/png/png.c **** }
 791              		.loc 1 1675 0
 792 00cc B8020000 		movl	$2, %eax
 792      00
1676:fltk-1.3.4-1/png/png.c **** 
 793              		.loc 1 1676 0
 794 00d1 5B       		popq	%rbx
 795              		.cfi_def_cfa_offset 32
 796              	.LVL76:
 797 00d2 5D       		popq	%rbp
 798              		.cfi_def_cfa_offset 24
 799 00d3 415C     		popq	%r12
 800              		.cfi_def_cfa_offset 16
 801              	.LVL77:
 802 00d5 415D     		popq	%r13
 803              		.cfi_def_cfa_offset 8
 804              	.LVL78:
 805 00d7 C3       		ret
 806              	.LVL79:
 807 00d8 0F1F8400 		.p2align 4,,10
 807      00000000 
 808              		.p2align 3
 809              	.L90:
 810              		.cfi_restore_state
1642:fltk-1.3.4-1/png/png.c ****        (colorspace->flags & PNG_COLORSPACE_HAVE_ENDPOINTS) != 0)
 811              		.loc 1 1642 0 discriminator 1
 812 00e0 40F6C502 		testb	$2, %bpl
 813 00e4 0F8446FF 		je	.L80
 813      FFFF
1648:fltk-1.3.4-1/png/png.c ****           100) == 0)
 814              		.loc 1 1648 0
 815 00ea 488D7604 		leaq	4(%rsi), %rsi
 816              	.LVL80:
 817 00ee BA640000 		movl	$100, %edx
 817      00
 818              	.LVL81:
 819 00f3 4C89DF   		movq	%r11, %rdi
 820 00f6 E8000000 		call	png_colorspace_endpoints_match
 820      00
 821              	.LVL82:
 822 00fb 85C0     		testl	%eax, %eax
 823 00fd 7421     		je	.L92
1657:fltk-1.3.4-1/png/png.c ****          return 1; /* ok, but no change */
 824              		.loc 1 1657 0
 825 00ff 4585ED   		testl	%r13d, %r13d
1658:fltk-1.3.4-1/png/png.c ****    }
 826              		.loc 1 1658 0
 827 0102 B8010000 		movl	$1, %eax
 827      00
1657:fltk-1.3.4-1/png/png.c ****          return 1; /* ok, but no change */
 828              		.loc 1 1657 0
 829 0107 0F8523FF 		jne	.L80
 829      FFFF
 830 010d EB9E     		jmp	.L79
 831              	.LVL83:
 832 010f 90       		.p2align 4,,10
 833              		.p2align 3
 834              	.L83:
1676:fltk-1.3.4-1/png/png.c **** 
 835              		.loc 1 1676 0
 836 0110 4883C418 		addq	$24, %rsp
 837              		.cfi_remember_state
 838              		.cfi_def_cfa_offset 40
1636:fltk-1.3.4-1/png/png.c **** 
 839              		.loc 1 1636 0
 840 0114 31C0     		xorl	%eax, %eax
1676:fltk-1.3.4-1/png/png.c **** 
 841              		.loc 1 1676 0
 842 0116 5B       		popq	%rbx
 843              		.cfi_def_cfa_offset 32
 844 0117 5D       		popq	%rbp
 845              		.cfi_def_cfa_offset 24
 846 0118 415C     		popq	%r12
 847              		.cfi_def_cfa_offset 16
 848 011a 415D     		popq	%r13
 849              		.cfi_def_cfa_offset 8
 850 011c C3       		ret
 851              	.LVL84:
 852 011d 0F1F00   		.p2align 4,,10
 853              		.p2align 3
 854              	.L92:
 855              		.cfi_restore_state
1651:fltk-1.3.4-1/png/png.c ****          png_benign_error(png_ptr, "inconsistent chromaticities");
 856              		.loc 1 1651 0
 857 0120 6681CD00 		orw	$-32768, %bp
 857      80
1652:fltk-1.3.4-1/png/png.c ****          return 0; /* failed */
 858              		.loc 1 1652 0
 859 0125 BE000000 		movl	$.LC13, %esi
 859      00
 860 012a 4889DF   		movq	%rbx, %rdi
1651:fltk-1.3.4-1/png/png.c ****          png_benign_error(png_ptr, "inconsistent chromaticities");
 861              		.loc 1 1651 0
 862 012d 6641896A 		movw	%bp, 74(%r10)
 862      4A
 863 0132 8944240C 		movl	%eax, 12(%rsp)
1652:fltk-1.3.4-1/png/png.c ****          return 0; /* failed */
 864              		.loc 1 1652 0
 865 0136 E8000000 		call	png_benign_error
 865      00
 866              	.LVL85:
1653:fltk-1.3.4-1/png/png.c ****       }
 867              		.loc 1 1653 0
 868 013b 8B44240C 		movl	12(%rsp), %eax
 869 013f E969FFFF 		jmp	.L79
 869      FF
 870              		.cfi_endproc
 871              	.LFE94:
 873              		.section	.text.unlikely.png_colorspace_set_xy_and_XYZ
 874              	.LCOLDE14:
 875              		.section	.text.png_colorspace_set_xy_and_XYZ
 876              	.LHOTE14:
 877              		.section	.text.unlikely.is_ICC_signature_char.part.1,"ax",@progbits
 878              	.LCOLDB15:
 879              		.section	.text.is_ICC_signature_char.part.1,"ax",@progbits
 880              	.LHOTB15:
 881              		.p2align 4,,15
 883              	is_ICC_signature_char.part.1:
 884              	.LFB137:
1768:fltk-1.3.4-1/png/png.c **** {
 885              		.loc 1 1768 0
 886              		.cfi_startproc
 887              	.LVL86:
1770:fltk-1.3.4-1/png/png.c ****       (it >= 97 && it <= 122);
 888              		.loc 1 1770 0
 889 0000 4883E7DF 		andq	$-33, %rdi
 890              	.LVL87:
 891 0004 31C0     		xorl	%eax, %eax
 892 0006 4883EF41 		subq	$65, %rdi
 893 000a 4883FF19 		cmpq	$25, %rdi
 894 000e 0F96C0   		setbe	%al
1772:fltk-1.3.4-1/png/png.c **** 
 895              		.loc 1 1772 0
 896 0011 C3       		ret
 897              		.cfi_endproc
 898              	.LFE137:
 900              		.section	.text.unlikely.is_ICC_signature_char.part.1
 901              	.LCOLDE15:
 902              		.section	.text.is_ICC_signature_char.part.1
 903              	.LHOTE15:
 904              		.section	.rodata.str1.1
 905              	.LC16:
 906 001c 70726F66 		.string	"profile '"
 906      696C6520 
 906      2700
 907              	.LC17:
 908 0026 273A2000 		.string	"': "
 909              	.LC18:
 910 002a 683A2000 		.string	"h: "
 911              		.section	.text.unlikely.png_icc_profile_error,"ax",@progbits
 912              	.LCOLDB19:
 913              		.section	.text.png_icc_profile_error,"ax",@progbits
 914              	.LHOTB19:
 915              		.p2align 4,,15
 917              	png_icc_profile_error:
 918              	.LFB101:
1786:fltk-1.3.4-1/png/png.c ****    size_t pos;
 919              		.loc 1 1786 0
 920              		.cfi_startproc
 921              	.LVL88:
 922 0000 4156     		pushq	%r14
 923              		.cfi_def_cfa_offset 16
 924              		.cfi_offset 14, -16
 925 0002 4155     		pushq	%r13
 926              		.cfi_def_cfa_offset 24
 927              		.cfi_offset 13, -24
 928 0004 4D89C6   		movq	%r8, %r14
 929 0007 4154     		pushq	%r12
 930              		.cfi_def_cfa_offset 32
 931              		.cfi_offset 12, -32
 932 0009 55       		pushq	%rbp
 933              		.cfi_def_cfa_offset 40
 934              		.cfi_offset 6, -40
 935 000a 4989FD   		movq	%rdi, %r13
 936 000d 53       		pushq	%rbx
 937              		.cfi_def_cfa_offset 48
 938              		.cfi_offset 3, -48
 939 000e 4889F5   		movq	%rsi, %rbp
 940 0011 4989D4   		movq	%rdx, %r12
 941 0014 4889CB   		movq	%rcx, %rbx
 942 0017 4881ECF0 		subq	$240, %rsp
 942      000000
 943              		.cfi_def_cfa_offset 288
1786:fltk-1.3.4-1/png/png.c ****    size_t pos;
 944              		.loc 1 1786 0
 945 001e 64488B04 		movq	%fs:40, %rax
 945      25280000 
 945      00
 946 0027 48898424 		movq	%rax, 232(%rsp)
 946      E8000000 
 947 002f 31C0     		xorl	%eax, %eax
1790:fltk-1.3.4-1/png/png.c ****       colorspace->flags |= PNG_COLORSPACE_INVALID;
 948              		.loc 1 1790 0
 949 0031 4885F6   		testq	%rsi, %rsi
 950 0034 7406     		je	.L95
1791:fltk-1.3.4-1/png/png.c **** 
 951              		.loc 1 1791 0
 952 0036 66814E4A 		orw	$-32768, 74(%rsi)
 952      0080
 953              	.L95:
1793:fltk-1.3.4-1/png/png.c ****    pos = png_safecat(message, pos+79, pos, name); /* Truncate to 79 chars */
 954              		.loc 1 1793 0
 955 003c 488D7C24 		leaq	32(%rsp), %rdi
 955      20
 956              	.LVL89:
 957 0041 31D2     		xorl	%edx, %edx
 958              	.LVL90:
 959 0043 B9000000 		movl	$.LC16, %ecx
 959      00
 960              	.LVL91:
 961 0048 BEC40000 		movl	$196, %esi
 961      00
 962              	.LVL92:
 963 004d E8000000 		call	png_safecat
 963      00
 964              	.LVL93:
1794:fltk-1.3.4-1/png/png.c ****    pos = png_safecat(message, (sizeof message), pos, "': "); /* +2 = 90 */
 965              		.loc 1 1794 0
 966 0052 488D7C24 		leaq	32(%rsp), %rdi
 966      20
 967 0057 488D704F 		leaq	79(%rax), %rsi
 968 005b 4C89E1   		movq	%r12, %rcx
 969 005e 4889C2   		movq	%rax, %rdx
 970 0061 E8000000 		call	png_safecat
 970      00
 971              	.LVL94:
1795:fltk-1.3.4-1/png/png.c ****    if (is_ICC_signature(value) != 0)
 972              		.loc 1 1795 0
 973 0066 488D7C24 		leaq	32(%rsp), %rdi
 973      20
 974 006b B9000000 		movl	$.LC17, %ecx
 974      00
 975 0070 4889C2   		movq	%rax, %rdx
 976 0073 BEC40000 		movl	$196, %esi
 976      00
 977 0078 E8000000 		call	png_safecat
 977      00
 978              	.LVL95:
 979              	.LBB225:
 980              	.LBB226:
1777:fltk-1.3.4-1/png/png.c ****       is_ICC_signature_char((it >> 16) & 0xff) &&
 981              		.loc 1 1777 0
 982 007d 4889DF   		movq	%rbx, %rdi
 983              	.LBE226:
 984              	.LBE225:
1795:fltk-1.3.4-1/png/png.c ****    if (is_ICC_signature(value) != 0)
 985              		.loc 1 1795 0
 986 0080 4989C4   		movq	%rax, %r12
 987              	.LVL96:
 988              	.LBB237:
 989              	.LBB235:
1777:fltk-1.3.4-1/png/png.c ****       is_ICC_signature_char((it >> 16) & 0xff) &&
 990              		.loc 1 1777 0
 991 0083 48C1EF18 		shrq	$24, %rdi
 992              	.LVL97:
 993              	.LBB227:
 994              	.LBB228:
1770:fltk-1.3.4-1/png/png.c ****       (it >= 97 && it <= 122);
 995              		.loc 1 1770 0
 996 0087 488D47D0 		leaq	-48(%rdi), %rax
 997              	.LVL98:
 998 008b 4883F809 		cmpq	$9, %rax
 999 008f 0F86B300 		jbe	.L96
 999      0000
 1000 0095 4883FF20 		cmpq	$32, %rdi
 1001 0099 0F84A900 		je	.L96
 1001      0000
 1002 009f E8000000 		call	is_ICC_signature_char.part.1
 1002      00
 1003              	.LVL99:
 1004              	.LBE228:
 1005              	.LBE227:
1779:fltk-1.3.4-1/png/png.c ****       is_ICC_signature_char(it & 0xff);
 1006              		.loc 1 1779 0
 1007 00a4 85C0     		testl	%eax, %eax
 1008 00a6 0F859C00 		jne	.L96
 1008      0000
 1009              	.L97:
 1010              	.LVL100:
 1011              	.LBE235:
 1012              	.LBE237:
 1013              	.LBB238:
1810:fltk-1.3.4-1/png/png.c ****                PNG_NUMBER_FORMAT_x, value));
 1014              		.loc 1 1810 0
 1015 00ac 488D7424 		leaq	24(%rsp), %rsi
 1015      18
 1016 00b1 4889D9   		movq	%rbx, %rcx
 1017 00b4 BA030000 		movl	$3, %edx
 1017      00
 1018 00b9 4889E7   		movq	%rsp, %rdi
 1019 00bc E8000000 		call	png_format_number
 1019      00
 1020              	.LVL101:
1809:fltk-1.3.4-1/png/png.c ****             png_format_number(number, number+(sizeof number),
 1021              		.loc 1 1809 0
 1022 00c1 488D7C24 		leaq	32(%rsp), %rdi
 1022      20
 1023 00c6 4889C1   		movq	%rax, %rcx
 1024 00c9 4C89E2   		movq	%r12, %rdx
 1025 00cc BEC40000 		movl	$196, %esi
 1025      00
 1026 00d1 E8000000 		call	png_safecat
 1026      00
 1027              	.LVL102:
1812:fltk-1.3.4-1/png/png.c ****       }
 1028              		.loc 1 1812 0
 1029 00d6 488D7C24 		leaq	32(%rsp), %rdi
 1029      20
 1030 00db 4889C2   		movq	%rax, %rdx
 1031 00de B9000000 		movl	$.LC18, %ecx
 1031      00
 1032 00e3 BEC40000 		movl	$196, %esi
 1032      00
 1033 00e8 E8000000 		call	png_safecat
 1033      00
 1034              	.LVL103:
 1035 00ed 4889C2   		movq	%rax, %rdx
 1036              	.LVL104:
 1037              	.L105:
 1038              	.LBE238:
1816:fltk-1.3.4-1/png/png.c ****    PNG_UNUSED(pos)
 1039              		.loc 1 1816 0
 1040 00f0 488D7C24 		leaq	32(%rsp), %rdi
 1040      20
 1041 00f5 4C89F1   		movq	%r14, %rcx
 1042 00f8 BEC40000 		movl	$196, %esi
 1042      00
 1043 00fd E8000000 		call	png_safecat
 1043      00
 1044              	.LVL105:
1824:fltk-1.3.4-1/png/png.c ****       (colorspace != NULL) ? PNG_CHUNK_ERROR : PNG_CHUNK_WRITE_ERROR);
 1045              		.loc 1 1824 0
 1046 0102 4883FD01 		cmpq	$1, %rbp
 1047 0106 488D7424 		leaq	32(%rsp), %rsi
 1047      20
 1048 010b 4C89EF   		movq	%r13, %rdi
 1049 010e 19D2     		sbbl	%edx, %edx
 1050 0110 83C202   		addl	$2, %edx
 1051 0113 E8000000 		call	png_chunk_report
 1051      00
 1052              	.LVL106:
1828:fltk-1.3.4-1/png/png.c **** #endif /* sRGB || iCCP */
 1053              		.loc 1 1828 0
 1054 0118 31C0     		xorl	%eax, %eax
 1055 011a 488B9C24 		movq	232(%rsp), %rbx
 1055      E8000000 
 1056 0122 6448331C 		xorq	%fs:40, %rbx
 1056      25280000 
 1056      00
 1057 012b 0F85F100 		jne	.L129
 1057      0000
 1058 0131 4881C4F0 		addq	$240, %rsp
 1058      000000
 1059              		.cfi_remember_state
 1060              		.cfi_def_cfa_offset 48
 1061 0138 5B       		popq	%rbx
 1062              		.cfi_def_cfa_offset 40
 1063 0139 5D       		popq	%rbp
 1064              		.cfi_def_cfa_offset 32
 1065              	.LVL107:
 1066 013a 415C     		popq	%r12
 1067              		.cfi_def_cfa_offset 24
 1068 013c 415D     		popq	%r13
 1069              		.cfi_def_cfa_offset 16
 1070              	.LVL108:
 1071 013e 415E     		popq	%r14
 1072              		.cfi_def_cfa_offset 8
 1073              	.LVL109:
 1074 0140 C3       		ret
 1075              	.LVL110:
 1076              		.p2align 4,,10
 1077 0141 0F1F8000 		.p2align 3
 1077      000000
 1078              	.L96:
 1079              		.cfi_restore_state
 1080              	.LBB239:
 1081              	.LBB236:
1778:fltk-1.3.4-1/png/png.c ****       is_ICC_signature_char((it >> 8) & 0xff) &&
 1082              		.loc 1 1778 0
 1083 0148 4889DF   		movq	%rbx, %rdi
 1084 014b 48C1EF10 		shrq	$16, %rdi
 1085 014f 400FB6FF 		movzbl	%dil, %edi
 1086              	.LVL111:
 1087              	.LBB229:
 1088              	.LBB230:
1770:fltk-1.3.4-1/png/png.c ****       (it >= 97 && it <= 122);
 1089              		.loc 1 1770 0
 1090 0153 488D47D0 		leaq	-48(%rdi), %rax
 1091 0157 4883F809 		cmpq	$9, %rax
 1092 015b 7613     		jbe	.L98
 1093 015d 4883FF20 		cmpq	$32, %rdi
 1094 0161 740D     		je	.L98
 1095 0163 E8000000 		call	is_ICC_signature_char.part.1
 1095      00
 1096              	.LVL112:
 1097              	.LBE230:
 1098              	.LBE229:
1777:fltk-1.3.4-1/png/png.c ****       is_ICC_signature_char((it >> 16) & 0xff) &&
 1099              		.loc 1 1777 0
 1100 0168 85C0     		testl	%eax, %eax
 1101 016a 0F843CFF 		je	.L97
 1101      FFFF
 1102              		.p2align 4,,10
 1103              		.p2align 3
 1104              	.L98:
1779:fltk-1.3.4-1/png/png.c ****       is_ICC_signature_char(it & 0xff);
 1105              		.loc 1 1779 0
 1106 0170 0FB6FF   		movzbl	%bh, %edi
 1107              	.LVL113:
 1108              	.LBB231:
 1109              	.LBB232:
1770:fltk-1.3.4-1/png/png.c ****       (it >= 97 && it <= 122);
 1110              		.loc 1 1770 0
 1111 0173 488D47D0 		leaq	-48(%rdi), %rax
 1112 0177 4883F809 		cmpq	$9, %rax
 1113 017b 7613     		jbe	.L99
 1114 017d 4883FF20 		cmpq	$32, %rdi
 1115 0181 740D     		je	.L99
 1116 0183 E8000000 		call	is_ICC_signature_char.part.1
 1116      00
 1117              	.LVL114:
 1118              	.LBE232:
 1119              	.LBE231:
1778:fltk-1.3.4-1/png/png.c ****       is_ICC_signature_char((it >> 8) & 0xff) &&
 1120              		.loc 1 1778 0
 1121 0188 85C0     		testl	%eax, %eax
 1122 018a 0F841CFF 		je	.L97
 1122      FFFF
 1123              		.p2align 4,,10
 1124              		.p2align 3
 1125              	.L99:
1780:fltk-1.3.4-1/png/png.c **** }
 1126              		.loc 1 1780 0
 1127 0190 0FB6FB   		movzbl	%bl, %edi
 1128              	.LVL115:
 1129              	.LBB233:
 1130              	.LBB234:
1770:fltk-1.3.4-1/png/png.c ****       (it >= 97 && it <= 122);
 1131              		.loc 1 1770 0
 1132 0193 488D47D0 		leaq	-48(%rdi), %rax
 1133 0197 4883F809 		cmpq	$9, %rax
 1134 019b 7613     		jbe	.L100
 1135 019d 4883FF20 		cmpq	$32, %rdi
 1136 01a1 740D     		je	.L100
 1137 01a3 E8000000 		call	is_ICC_signature_char.part.1
 1137      00
 1138              	.LVL116:
 1139              	.LBE234:
 1140              	.LBE233:
1779:fltk-1.3.4-1/png/png.c ****       is_ICC_signature_char(it & 0xff);
 1141              		.loc 1 1779 0
 1142 01a8 85C0     		testl	%eax, %eax
 1143 01aa 0F84FCFE 		je	.L97
 1143      FFFF
 1144              		.p2align 4,,10
 1145              		.p2align 3
 1146              	.L100:
 1147              	.LVL117:
 1148              	.LBE236:
 1149              	.LBE239:
 1150              	.LBB240:
 1151              	.LBB241:
1760:fltk-1.3.4-1/png/png.c ****    name[2] = png_icc_tag_char(tag >> 16);
 1152              		.loc 1 1760 0
 1153 01b0 89D9     		movl	%ebx, %ecx
 1154              	.LBE241:
 1155              	.LBE240:
1799:fltk-1.3.4-1/png/png.c ****       pos += 6; /* total +8; less than the else clause */
 1156              		.loc 1 1799 0
 1157 01b2 488D4424 		leaq	32(%rsp), %rax
 1157      20
 1158              	.LBB257:
 1159              	.LBB254:
 1160              	.LBB242:
 1161              	.LBB243:
1751:fltk-1.3.4-1/png/png.c ****    else
 1162              		.loc 1 1751 0
 1163 01b7 BA3F0000 		movl	$63, %edx
 1163      00
 1164              	.LBE243:
 1165              	.LBE242:
1760:fltk-1.3.4-1/png/png.c ****    name[2] = png_icc_tag_char(tag >> 16);
 1166              		.loc 1 1760 0
 1167 01bc C1E918   		shrl	$24, %ecx
 1168              	.LBB246:
 1169              	.LBB244:
1750:fltk-1.3.4-1/png/png.c ****       return (char)byte;
 1170              		.loc 1 1750 0
 1171 01bf 8D71E0   		leal	-32(%rcx), %esi
 1172              	.LBE244:
 1173              	.LBE246:
 1174              	.LBE254:
 1175              	.LBE257:
1799:fltk-1.3.4-1/png/png.c ****       pos += 6; /* total +8; less than the else clause */
 1176              		.loc 1 1799 0
 1177 01c2 4C01E0   		addq	%r12, %rax
 1178              	.LVL118:
 1179              	.LBB258:
 1180              	.LBB255:
1759:fltk-1.3.4-1/png/png.c ****    name[1] = png_icc_tag_char(tag >> 24);
 1181              		.loc 1 1759 0
 1182 01c5 C60027   		movb	$39, (%rax)
1764:fltk-1.3.4-1/png/png.c **** }
 1183              		.loc 1 1764 0
 1184 01c8 C6400527 		movb	$39, 5(%rax)
 1185              	.LBB247:
 1186              	.LBB245:
1751:fltk-1.3.4-1/png/png.c ****    else
 1187              		.loc 1 1751 0
 1188 01cc 83FE5E   		cmpl	$94, %esi
 1189 01cf 0F47CA   		cmova	%edx, %ecx
 1190              	.LVL119:
 1191              	.LBE245:
 1192              	.LBE247:
1760:fltk-1.3.4-1/png/png.c ****    name[2] = png_icc_tag_char(tag >> 16);
 1193              		.loc 1 1760 0
 1194 01d2 884801   		movb	%cl, 1(%rax)
1761:fltk-1.3.4-1/png/png.c ****    name[3] = png_icc_tag_char(tag >>  8);
 1195              		.loc 1 1761 0
 1196 01d5 89D9     		movl	%ebx, %ecx
 1197 01d7 C1E910   		shrl	$16, %ecx
 1198              	.LVL120:
 1199              	.LBB248:
 1200              	.LBB249:
1750:fltk-1.3.4-1/png/png.c ****       return (char)byte;
 1201              		.loc 1 1750 0
 1202 01da 0FB6F1   		movzbl	%cl, %esi
 1203 01dd 83EE20   		subl	$32, %esi
1751:fltk-1.3.4-1/png/png.c ****    else
 1204              		.loc 1 1751 0
 1205 01e0 83FE5E   		cmpl	$94, %esi
 1206 01e3 0F47CA   		cmova	%edx, %ecx
 1207              	.LVL121:
 1208              	.LBE249:
 1209              	.LBE248:
1761:fltk-1.3.4-1/png/png.c ****    name[3] = png_icc_tag_char(tag >>  8);
 1210              		.loc 1 1761 0
 1211 01e6 884802   		movb	%cl, 2(%rax)
1762:fltk-1.3.4-1/png/png.c ****    name[4] = png_icc_tag_char(tag      );
 1212              		.loc 1 1762 0
 1213 01e9 89D9     		movl	%ebx, %ecx
 1214 01eb C1E908   		shrl	$8, %ecx
 1215              	.LVL122:
 1216              	.LBB250:
 1217              	.LBB251:
1750:fltk-1.3.4-1/png/png.c ****       return (char)byte;
 1218              		.loc 1 1750 0
 1219 01ee 0FB6F1   		movzbl	%cl, %esi
 1220 01f1 83EE20   		subl	$32, %esi
1751:fltk-1.3.4-1/png/png.c ****    else
 1221              		.loc 1 1751 0
 1222 01f4 83FE5E   		cmpl	$94, %esi
 1223 01f7 0F47CA   		cmova	%edx, %ecx
 1224              	.LVL123:
 1225              	.LBE251:
 1226              	.LBE250:
1762:fltk-1.3.4-1/png/png.c ****    name[4] = png_icc_tag_char(tag      );
 1227              		.loc 1 1762 0
 1228 01fa 884803   		movb	%cl, 3(%rax)
 1229              	.LVL124:
 1230              	.LBB252:
 1231              	.LBB253:
1750:fltk-1.3.4-1/png/png.c ****       return (char)byte;
 1232              		.loc 1 1750 0
 1233 01fd 0FB6CB   		movzbl	%bl, %ecx
 1234 0200 83E920   		subl	$32, %ecx
1751:fltk-1.3.4-1/png/png.c ****    else
 1235              		.loc 1 1751 0
 1236 0203 83F95E   		cmpl	$94, %ecx
 1237 0206 0F47DA   		cmova	%edx, %ebx
 1238              	.LVL125:
 1239              	.LBE253:
 1240              	.LBE252:
 1241              	.LBE255:
 1242              	.LBE258:
1802:fltk-1.3.4-1/png/png.c ****    }
 1243              		.loc 1 1802 0
 1244 0209 498D5424 		leaq	8(%r12), %rdx
 1244      08
 1245              	.LVL126:
 1246              	.LBB259:
 1247              	.LBB256:
1763:fltk-1.3.4-1/png/png.c ****    name[5] = '\'';
 1248              		.loc 1 1763 0
 1249 020e 885804   		movb	%bl, 4(%rax)
 1250              	.LBE256:
 1251              	.LBE259:
1801:fltk-1.3.4-1/png/png.c ****       message[pos++] = ' ';
 1252              		.loc 1 1801 0
 1253 0211 42C64424 		movb	$58, 38(%rsp,%r12)
 1253      263A
1802:fltk-1.3.4-1/png/png.c ****    }
 1254              		.loc 1 1802 0
 1255 0217 42C64424 		movb	$32, 39(%rsp,%r12)
 1255      2720
 1256 021d E9CEFEFF 		jmp	.L105
 1256      FF
 1257              	.LVL127:
 1258              	.L129:
1828:fltk-1.3.4-1/png/png.c **** #endif /* sRGB || iCCP */
 1259              		.loc 1 1828 0
 1260 0222 E8000000 		call	__stack_chk_fail
 1260      00
 1261              	.LVL128:
 1262              		.cfi_endproc
 1263              	.LFE101:
 1265              		.section	.text.unlikely.png_icc_profile_error
 1266              	.LCOLDE19:
 1267              		.section	.text.png_icc_profile_error
 1268              	.LHOTE19:
 1269              		.section	.text.unlikely.png_free_data.part.3,"ax",@progbits
 1270              	.LCOLDB20:
 1271              		.section	.text.png_free_data.part.3,"ax",@progbits
 1272              	.LHOTB20:
 1273              		.p2align 4,,15
 1275              	png_free_data.part.3:
 1276              	.LFB139:
 442:fltk-1.3.4-1/png/png.c ****    int num)
 1277              		.loc 1 442 0
 1278              		.cfi_startproc
 1279              	.LVL129:
 1280 0000 4157     		pushq	%r15
 1281              		.cfi_def_cfa_offset 16
 1282              		.cfi_offset 15, -16
 1283 0002 4156     		pushq	%r14
 1284              		.cfi_def_cfa_offset 24
 1285              		.cfi_offset 14, -24
 1286 0004 4189CE   		movl	%ecx, %r14d
 1287 0007 4155     		pushq	%r13
 1288              		.cfi_def_cfa_offset 32
 1289              		.cfi_offset 13, -32
 1290 0009 4154     		pushq	%r12
 1291              		.cfi_def_cfa_offset 40
 1292              		.cfi_offset 12, -40
 1293 000b 4189D5   		movl	%edx, %r13d
 1294 000e 55       		pushq	%rbp
 1295              		.cfi_def_cfa_offset 48
 1296              		.cfi_offset 6, -48
 1297 000f 53       		pushq	%rbx
 1298              		.cfi_def_cfa_offset 56
 1299              		.cfi_offset 3, -56
 1300 0010 4889F3   		movq	%rsi, %rbx
 1301 0013 4989FC   		movq	%rdi, %r12
 1302 0016 4883EC08 		subq	$8, %rsp
 1303              		.cfi_def_cfa_offset 64
 452:fltk-1.3.4-1/png/png.c ****        ((mask & PNG_FREE_TEXT) & info_ptr->free_me) != 0)
 1304              		.loc 1 452 0
 1305 001a 488BB6A0 		movq	160(%rsi), %rsi
 1305      000000
 1306              	.LVL130:
 453:fltk-1.3.4-1/png/png.c ****    {
 1307              		.loc 1 453 0
 1308 0021 8B831C01 		movl	284(%rbx), %eax
 1308      0000
 452:fltk-1.3.4-1/png/png.c ****        ((mask & PNG_FREE_TEXT) & info_ptr->free_me) != 0)
 1309              		.loc 1 452 0
 1310 0027 4885F6   		testq	%rsi, %rsi
 1311 002a 7411     		je	.L132
 1312 002c 89C2     		movl	%eax, %edx
 1313              	.LVL131:
 1314 002e 81E20040 		andl	$16384, %edx
 1314      0000
 1315 0034 4485EA   		testl	%r13d, %edx
 1316 0037 0F852302 		jne	.L215
 1316      0000
 1317              	.LVL132:
 1318              	.L132:
 477:fltk-1.3.4-1/png/png.c ****    {
 1319              		.loc 1 477 0
 1320 003d 4489EA   		movl	%r13d, %edx
 1321 0040 81E20020 		andl	$8192, %edx
 1321      0000
 1322 0046 85C2     		testl	%eax, %edx
 1323 0048 0F858902 		jne	.L216
 1323      0000
 1324              	.L137:
 487:fltk-1.3.4-1/png/png.c ****    {
 1325              		.loc 1 487 0
 1326 004e 4489EA   		movl	%r13d, %edx
 1327 0051 81E20001 		andl	$256, %edx
 1327      0000
 1328 0057 85C2     		testl	%eax, %edx
 1329 0059 0F85AD02 		jne	.L217
 1329      0000
 1330              	.L138:
 499:fltk-1.3.4-1/png/png.c ****    {
 1331              		.loc 1 499 0
 1332 005f 4489EA   		movl	%r13d, %edx
 1333 0062 81E28000 		andl	$128, %edx
 1333      0000
 1334 0068 85C2     		testl	%eax, %edx
 1335 006a 0F85EE02 		jne	.L218
 1335      0000
 1336              	.L139:
 522:fltk-1.3.4-1/png/png.c ****    {
 1337              		.loc 1 522 0
 1338 0070 4489EA   		movl	%r13d, %edx
 1339 0073 83E210   		andl	$16, %edx
 1340 0076 85C2     		testl	%eax, %edx
 1341 0078 0F858503 		jne	.L219
 1341      0000
 1342              	.L144:
 534:fltk-1.3.4-1/png/png.c ****        ((mask & PNG_FREE_SPLT) & info_ptr->free_me) != 0)
 1343              		.loc 1 534 0
 1344 007e 488BB330 		movq	304(%rbx), %rsi
 1344      010000
 1345 0085 4885F6   		testq	%rsi, %rsi
 1346 0088 7460     		je	.L145
 1347 008a 4489EA   		movl	%r13d, %edx
 1348 008d 83E220   		andl	$32, %edx
 1349 0090 85C2     		testl	%eax, %edx
 1350 0092 7456     		je	.L145
 537:fltk-1.3.4-1/png/png.c ****       {
 1351              		.loc 1 537 0
 1352 0094 4183FEFF 		cmpl	$-1, %r14d
 1353 0098 0F845A04 		je	.L146
 1353      0000
 539:fltk-1.3.4-1/png/png.c ****          png_free(png_ptr, info_ptr->splt_palettes[num].entries);
 1354              		.loc 1 539 0
 1355 009e 4963EE   		movslq	%r14d, %rbp
 1356 00a1 4C89E7   		movq	%r12, %rdi
 1357 00a4 48C1E505 		salq	$5, %rbp
 1358 00a8 488B342E 		movq	(%rsi,%rbp), %rsi
 1359 00ac E8000000 		call	png_free
 1359      00
 1360              	.LVL133:
 540:fltk-1.3.4-1/png/png.c ****          info_ptr->splt_palettes[num].name = NULL;
 1361              		.loc 1 540 0
 1362 00b1 488B8330 		movq	304(%rbx), %rax
 1362      010000
 1363 00b8 4C89E7   		movq	%r12, %rdi
 1364 00bb 488B7428 		movq	16(%rax,%rbp), %rsi
 1364      10
 1365 00c0 E8000000 		call	png_free
 1365      00
 1366              	.LVL134:
 541:fltk-1.3.4-1/png/png.c ****          info_ptr->splt_palettes[num].entries = NULL;
 1367              		.loc 1 541 0
 1368 00c5 488B8330 		movq	304(%rbx), %rax
 1368      010000
 1369 00cc 48C70428 		movq	$0, (%rax,%rbp)
 1369      00000000 
 542:fltk-1.3.4-1/png/png.c ****       }
 1370              		.loc 1 542 0
 1371 00d4 488B8330 		movq	304(%rbx), %rax
 1371      010000
 1372 00db 48C74428 		movq	$0, 16(%rax,%rbp)
 1372      10000000 
 1372      00
 1373 00e4 8B831C01 		movl	284(%rbx), %eax
 1373      0000
 1374              	.L145:
 567:fltk-1.3.4-1/png/png.c ****        ((mask & PNG_FREE_UNKN) & info_ptr->free_me) != 0)
 1375              		.loc 1 567 0
 1376 00ea 488BB320 		movq	288(%rbx), %rsi
 1376      010000
 1377 00f1 4885F6   		testq	%rsi, %rsi
 1378 00f4 7411     		je	.L151
 1379 00f6 4489EA   		movl	%r13d, %edx
 1380 00f9 81E20002 		andl	$512, %edx
 1380      0000
 1381 00ff 85C2     		testl	%eax, %edx
 1382 0101 0F85B100 		jne	.L220
 1382      0000
 1383              	.L151:
 595:fltk-1.3.4-1/png/png.c ****    {
 1384              		.loc 1 595 0
 1385 0107 4489EA   		movl	%r13d, %edx
 1386 010a 83E208   		andl	$8, %edx
 1387 010d 85C2     		testl	%eax, %edx
 1388 010f 0F85E500 		jne	.L221
 1388      0000
 1389              	.L156:
 604:fltk-1.3.4-1/png/png.c ****    {
 1390              		.loc 1 604 0
 1391 0115 4489EA   		movl	%r13d, %edx
 1392 0118 81E20010 		andl	$4096, %edx
 1392      0000
 1393 011e 85C2     		testl	%eax, %edx
 1394 0120 0F850901 		jne	.L222
 1394      0000
 1395              	.L157:
 614:fltk-1.3.4-1/png/png.c ****    {
 1396              		.loc 1 614 0
 1397 0126 4489EA   		movl	%r13d, %edx
 1398 0129 83E240   		andl	$64, %edx
 1399 012c 85C2     		testl	%eax, %edx
 1400 012e 7455     		je	.L158
 616:fltk-1.3.4-1/png/png.c ****       {
 1401              		.loc 1 616 0
 1402 0130 488BB350 		movq	336(%rbx), %rsi
 1402      010000
 1403 0137 4885F6   		testq	%rsi, %rsi
 1404 013a 7442     		je	.L159
 1405              	.LVL135:
 1406              	.LBB260:
 619:fltk-1.3.4-1/png/png.c ****             png_free(png_ptr, info_ptr->row_pointers[row]);
 1407              		.loc 1 619 0
 1408 013c 8B4304   		movl	4(%rbx), %eax
 1409 013f 85C0     		testl	%eax, %eax
 1410 0141 7422     		je	.L160
 1411 0143 31ED     		xorl	%ebp, %ebp
 1412              	.LVL136:
 1413              		.p2align 4,,10
 1414 0145 0F1F00   		.p2align 3
 1415              	.L162:
 620:fltk-1.3.4-1/png/png.c **** 
 1416              		.loc 1 620 0
 1417 0148 89E8     		movl	%ebp, %eax
 1418 014a 4C89E7   		movq	%r12, %rdi
 619:fltk-1.3.4-1/png/png.c ****             png_free(png_ptr, info_ptr->row_pointers[row]);
 1419              		.loc 1 619 0
 1420 014d 83C501   		addl	$1, %ebp
 1421              	.LVL137:
 620:fltk-1.3.4-1/png/png.c **** 
 1422              		.loc 1 620 0
 1423 0150 488B34C6 		movq	(%rsi,%rax,8), %rsi
 1424 0154 E8000000 		call	png_free
 1424      00
 1425              	.LVL138:
 619:fltk-1.3.4-1/png/png.c ****             png_free(png_ptr, info_ptr->row_pointers[row]);
 1426              		.loc 1 619 0
 1427 0159 3B6B04   		cmpl	4(%rbx), %ebp
 1428 015c 488BB350 		movq	336(%rbx), %rsi
 1428      010000
 1429 0163 72E3     		jb	.L162
 1430              	.LVL139:
 1431              	.L160:
 622:fltk-1.3.4-1/png/png.c ****          info_ptr->row_pointers = NULL;
 1432              		.loc 1 622 0
 1433 0165 4C89E7   		movq	%r12, %rdi
 1434 0168 E8000000 		call	png_free
 1434      00
 1435              	.LVL140:
 1436 016d 8B831C01 		movl	284(%rbx), %eax
 1436      0000
 623:fltk-1.3.4-1/png/png.c ****       }
 1437              		.loc 1 623 0
 1438 0173 48C78350 		movq	$0, 336(%rbx)
 1438      01000000 
 1438      000000
 1439              	.L159:
 1440              	.LBE260:
 625:fltk-1.3.4-1/png/png.c ****    }
 1441              		.loc 1 625 0
 1442 017e 816308FF 		andl	$-32769, 8(%rbx)
 1442      7FFFFF
 1443              	.L158:
 630:fltk-1.3.4-1/png/png.c **** 
 1444              		.loc 1 630 0
 1445 0185 4489EA   		movl	%r13d, %edx
 1446 0188 81E2DFBD 		andl	$-16929, %edx
 1446      FFFF
 1447 018e 4183FEFF 		cmpl	$-1, %r14d
 1448 0192 440F45EA 		cmovne	%edx, %r13d
 1449              	.LVL141:
 632:fltk-1.3.4-1/png/png.c **** }
 1450              		.loc 1 632 0
 1451 0196 41F7D5   		notl	%r13d
 1452              	.LVL142:
 1453 0199 4421E8   		andl	%r13d, %eax
 1454 019c 89831C01 		movl	%eax, 284(%rbx)
 1454      0000
 633:fltk-1.3.4-1/png/png.c **** #endif /* READ || WRITE */
 1455              		.loc 1 633 0
 1456 01a2 4883C408 		addq	$8, %rsp
 1457              		.cfi_remember_state
 1458              		.cfi_def_cfa_offset 56
 1459 01a6 5B       		popq	%rbx
 1460              		.cfi_def_cfa_offset 48
 1461              	.LVL143:
 1462 01a7 5D       		popq	%rbp
 1463              		.cfi_def_cfa_offset 40
 1464 01a8 415C     		popq	%r12
 1465              		.cfi_def_cfa_offset 32
 1466              	.LVL144:
 1467 01aa 415D     		popq	%r13
 1468              		.cfi_def_cfa_offset 24
 1469              	.LVL145:
 1470 01ac 415E     		popq	%r14
 1471              		.cfi_def_cfa_offset 16
 1472              	.LVL146:
 1473 01ae 415F     		popq	%r15
 1474              		.cfi_def_cfa_offset 8
 1475 01b0 C3       		ret
 1476              	.LVL147:
 1477              		.p2align 4,,10
 1478 01b1 0F1F8000 		.p2align 3
 1478      000000
 1479              	.L220:
 1480              		.cfi_restore_state
 570:fltk-1.3.4-1/png/png.c ****       {
 1481              		.loc 1 570 0
 1482 01b8 4183FEFF 		cmpl	$-1, %r14d
 1483 01bc 0F84CE02 		je	.L152
 1483      0000
 572:fltk-1.3.4-1/png/png.c ****           info_ptr->unknown_chunks[num].data = NULL;
 1484              		.loc 1 572 0
 1485 01c2 4963EE   		movslq	%r14d, %rbp
 1486 01c5 4C89E7   		movq	%r12, %rdi
 1487 01c8 48C1E505 		salq	$5, %rbp
 1488 01cc 488B742E 		movq	8(%rsi,%rbp), %rsi
 1488      08
 1489 01d1 E8000000 		call	png_free
 1489      00
 1490              	.LVL148:
 573:fltk-1.3.4-1/png/png.c ****       }
 1491              		.loc 1 573 0
 1492 01d6 488B8320 		movq	288(%rbx), %rax
 1492      010000
 595:fltk-1.3.4-1/png/png.c ****    {
 1493              		.loc 1 595 0
 1494 01dd 4489EA   		movl	%r13d, %edx
 1495 01e0 83E208   		andl	$8, %edx
 573:fltk-1.3.4-1/png/png.c ****       }
 1496              		.loc 1 573 0
 1497 01e3 48C74428 		movq	$0, 8(%rax,%rbp)
 1497      08000000 
 1497      00
 1498 01ec 8B831C01 		movl	284(%rbx), %eax
 1498      0000
 595:fltk-1.3.4-1/png/png.c ****    {
 1499              		.loc 1 595 0
 1500 01f2 85C2     		testl	%eax, %edx
 1501 01f4 0F841BFF 		je	.L156
 1501      FFFF
 1502              	.L221:
 597:fltk-1.3.4-1/png/png.c ****       info_ptr->hist = NULL;
 1503              		.loc 1 597 0
 1504 01fa 488BB3F0 		movq	240(%rbx), %rsi
 1504      000000
 1505 0201 4C89E7   		movq	%r12, %rdi
 1506 0204 E8000000 		call	png_free
 1506      00
 1507              	.LVL149:
 1508 0209 8B831C01 		movl	284(%rbx), %eax
 1508      0000
 604:fltk-1.3.4-1/png/png.c ****    {
 1509              		.loc 1 604 0
 1510 020f 4489EA   		movl	%r13d, %edx
 599:fltk-1.3.4-1/png/png.c ****    }
 1511              		.loc 1 599 0
 1512 0212 836308BF 		andl	$-65, 8(%rbx)
 604:fltk-1.3.4-1/png/png.c ****    {
 1513              		.loc 1 604 0
 1514 0216 81E20010 		andl	$4096, %edx
 1514      0000
 598:fltk-1.3.4-1/png/png.c ****       info_ptr->valid &= ~PNG_INFO_hIST;
 1515              		.loc 1 598 0
 1516 021c 48C783F0 		movq	$0, 240(%rbx)
 1516      00000000 
 1516      000000
 604:fltk-1.3.4-1/png/png.c ****    {
 1517              		.loc 1 604 0
 1518 0227 85C2     		testl	%eax, %edx
 1519 0229 0F84F7FE 		je	.L157
 1519      FFFF
 1520              	.L222:
 606:fltk-1.3.4-1/png/png.c ****       info_ptr->palette = NULL;
 1521              		.loc 1 606 0
 1522 022f 488B7318 		movq	24(%rbx), %rsi
 1523 0233 4C89E7   		movq	%r12, %rdi
 1524 0236 E8000000 		call	png_free
 1524      00
 1525              	.LVL150:
 609:fltk-1.3.4-1/png/png.c ****    }
 1526              		.loc 1 609 0
 1527 023b 31D2     		xorl	%edx, %edx
 607:fltk-1.3.4-1/png/png.c ****       info_ptr->valid &= ~PNG_INFO_PLTE;
 1528              		.loc 1 607 0
 1529 023d 48C74318 		movq	$0, 24(%rbx)
 1529      00000000 
 608:fltk-1.3.4-1/png/png.c ****       info_ptr->num_palette = 0;
 1530              		.loc 1 608 0
 1531 0245 836308F7 		andl	$-9, 8(%rbx)
 609:fltk-1.3.4-1/png/png.c ****    }
 1532              		.loc 1 609 0
 1533 0249 66895320 		movw	%dx, 32(%rbx)
 1534 024d 8B831C01 		movl	284(%rbx), %eax
 1534      0000
 1535 0253 E9CEFEFF 		jmp	.L157
 1535      FF
 1536              	.LVL151:
 1537 0258 0F1F8400 		.p2align 4,,10
 1537      00000000 
 1538              		.p2align 3
 1539              	.L215:
 455:fltk-1.3.4-1/png/png.c ****       {
 1540              		.loc 1 455 0
 1541 0260 83F9FF   		cmpl	$-1, %ecx
 1542 0263 0F85E701 		jne	.L133
 1542      0000
 1543              	.LVL152:
 1544              	.LBB261:
 465:fltk-1.3.4-1/png/png.c ****             png_free(png_ptr, info_ptr->text[i].key);
 1545              		.loc 1 465 0
 1546 0269 8B8B9400 		movl	148(%rbx), %ecx
 1546      0000
 1547              	.LVL153:
 1548 026f 85C9     		testl	%ecx, %ecx
 1549 0271 7E30     		jle	.L134
 1550 0273 4531FF   		xorl	%r15d, %r15d
 1551 0276 31ED     		xorl	%ebp, %ebp
 1552              	.LVL154:
 1553 0278 0F1F8400 		.p2align 4,,10
 1553      00000000 
 1554              		.p2align 3
 1555              	.L135:
 466:fltk-1.3.4-1/png/png.c **** 
 1556              		.loc 1 466 0
 1557 0280 4A8B743E 		movq	8(%rsi,%r15), %rsi
 1557      08
 1558 0285 4C89E7   		movq	%r12, %rdi
 465:fltk-1.3.4-1/png/png.c ****             png_free(png_ptr, info_ptr->text[i].key);
 1559              		.loc 1 465 0
 1560 0288 83C501   		addl	$1, %ebp
 1561              	.LVL155:
 1562 028b 4983C738 		addq	$56, %r15
 466:fltk-1.3.4-1/png/png.c **** 
 1563              		.loc 1 466 0
 1564 028f E8000000 		call	png_free
 1564      00
 1565              	.LVL156:
 465:fltk-1.3.4-1/png/png.c ****             png_free(png_ptr, info_ptr->text[i].key);
 1566              		.loc 1 465 0
 1567 0294 3BAB9400 		cmpl	148(%rbx), %ebp
 1567      0000
 1568 029a 488BB3A0 		movq	160(%rbx), %rsi
 1568      000000
 1569 02a1 7CDD     		jl	.L135
 1570              	.LVL157:
 1571              	.L134:
 468:fltk-1.3.4-1/png/png.c ****          info_ptr->text = NULL;
 1572              		.loc 1 468 0
 1573 02a3 4C89E7   		movq	%r12, %rdi
 1574 02a6 E8000000 		call	png_free
 1574      00
 1575              	.LVL158:
 1576 02ab 8B831C01 		movl	284(%rbx), %eax
 1576      0000
 1577              	.LBE261:
 477:fltk-1.3.4-1/png/png.c ****    {
 1578              		.loc 1 477 0
 1579 02b1 4489EA   		movl	%r13d, %edx
 1580              	.LBB262:
 469:fltk-1.3.4-1/png/png.c ****          info_ptr->num_text = 0;
 1581              		.loc 1 469 0
 1582 02b4 48C783A0 		movq	$0, 160(%rbx)
 1582      00000000 
 1582      000000
 1583              	.LBE262:
 477:fltk-1.3.4-1/png/png.c ****    {
 1584              		.loc 1 477 0
 1585 02bf 81E20020 		andl	$8192, %edx
 1585      0000
 1586              	.LBB263:
 470:fltk-1.3.4-1/png/png.c ****       }
 1587              		.loc 1 470 0
 1588 02c5 C7839400 		movl	$0, 148(%rbx)
 1588      00000000 
 1588      0000
 1589              	.LBE263:
 477:fltk-1.3.4-1/png/png.c ****    {
 1590              		.loc 1 477 0
 1591 02cf 85C2     		testl	%eax, %edx
 1592 02d1 0F8477FD 		je	.L137
 1592      FFFF
 1593              	.L216:
 479:fltk-1.3.4-1/png/png.c ****       info_ptr->trans_alpha = NULL;
 1594              		.loc 1 479 0
 1595 02d7 488BB3B8 		movq	184(%rbx), %rsi
 1595      000000
 1596 02de 4C89E7   		movq	%r12, %rdi
 1597 02e1 E8000000 		call	png_free
 1597      00
 1598              	.LVL159:
 1599 02e6 8B831C01 		movl	284(%rbx), %eax
 1599      0000
 487:fltk-1.3.4-1/png/png.c ****    {
 1600              		.loc 1 487 0
 1601 02ec 4489EA   		movl	%r13d, %edx
 481:fltk-1.3.4-1/png/png.c ****    }
 1602              		.loc 1 481 0
 1603 02ef 836308EF 		andl	$-17, 8(%rbx)
 487:fltk-1.3.4-1/png/png.c ****    {
 1604              		.loc 1 487 0
 1605 02f3 81E20001 		andl	$256, %edx
 1605      0000
 480:fltk-1.3.4-1/png/png.c ****       info_ptr->valid &= ~PNG_INFO_tRNS;
 1606              		.loc 1 480 0
 1607 02f9 48C783B8 		movq	$0, 184(%rbx)
 1607      00000000 
 1607      000000
 487:fltk-1.3.4-1/png/png.c ****    {
 1608              		.loc 1 487 0
 1609 0304 85C2     		testl	%eax, %edx
 1610 0306 0F8453FD 		je	.L138
 1610      FFFF
 1611              	.L217:
 489:fltk-1.3.4-1/png/png.c ****       png_free(png_ptr, info_ptr->scal_s_height);
 1612              		.loc 1 489 0
 1613 030c 488BB340 		movq	320(%rbx), %rsi
 1613      010000
 1614 0313 4C89E7   		movq	%r12, %rdi
 1615 0316 E8000000 		call	png_free
 1615      00
 1616              	.LVL160:
 490:fltk-1.3.4-1/png/png.c ****       info_ptr->scal_s_width = NULL;
 1617              		.loc 1 490 0
 1618 031b 488BB348 		movq	328(%rbx), %rsi
 1618      010000
 1619 0322 4C89E7   		movq	%r12, %rdi
 1620 0325 E8000000 		call	png_free
 1620      00
 1621              	.LVL161:
 1622 032a 8B831C01 		movl	284(%rbx), %eax
 1622      0000
 499:fltk-1.3.4-1/png/png.c ****    {
 1623              		.loc 1 499 0
 1624 0330 4489EA   		movl	%r13d, %edx
 493:fltk-1.3.4-1/png/png.c ****    }
 1625              		.loc 1 493 0
 1626 0333 816308FF 		andl	$-16385, 8(%rbx)
 1626      BFFFFF
 499:fltk-1.3.4-1/png/png.c ****    {
 1627              		.loc 1 499 0
 1628 033a 81E28000 		andl	$128, %edx
 1628      0000
 491:fltk-1.3.4-1/png/png.c ****       info_ptr->scal_s_height = NULL;
 1629              		.loc 1 491 0
 1630 0340 48C78340 		movq	$0, 320(%rbx)
 1630      01000000 
 1630      000000
 492:fltk-1.3.4-1/png/png.c ****       info_ptr->valid &= ~PNG_INFO_sCAL;
 1631              		.loc 1 492 0
 1632 034b 48C78348 		movq	$0, 328(%rbx)
 1632      01000000 
 1632      000000
 499:fltk-1.3.4-1/png/png.c ****    {
 1633              		.loc 1 499 0
 1634 0356 85C2     		testl	%eax, %edx
 1635 0358 0F8412FD 		je	.L139
 1635      FFFF
 1636              	.L218:
 501:fltk-1.3.4-1/png/png.c ****       png_free(png_ptr, info_ptr->pcal_units);
 1637              		.loc 1 501 0
 1638 035e 488BB3F8 		movq	248(%rbx), %rsi
 1638      000000
 1639 0365 4C89E7   		movq	%r12, %rdi
 1640 0368 E8000000 		call	png_free
 1640      00
 1641              	.LVL162:
 502:fltk-1.3.4-1/png/png.c ****       info_ptr->pcal_purpose = NULL;
 1642              		.loc 1 502 0
 1643 036d 488BB308 		movq	264(%rbx), %rsi
 1643      010000
 1644 0374 4C89E7   		movq	%r12, %rdi
 1645 0377 E8000000 		call	png_free
 1645      00
 1646              	.LVL163:
 506:fltk-1.3.4-1/png/png.c ****          {
 1647              		.loc 1 506 0
 1648 037c 488BB310 		movq	272(%rbx), %rsi
 1648      010000
 503:fltk-1.3.4-1/png/png.c ****       info_ptr->pcal_units = NULL;
 1649              		.loc 1 503 0
 1650 0383 48C783F8 		movq	$0, 248(%rbx)
 1650      00000000 
 1650      000000
 504:fltk-1.3.4-1/png/png.c **** 
 1651              		.loc 1 504 0
 1652 038e 48C78308 		movq	$0, 264(%rbx)
 1652      01000000 
 1652      000000
 506:fltk-1.3.4-1/png/png.c ****          {
 1653              		.loc 1 506 0
 1654 0399 4885F6   		testq	%rsi, %rsi
 1655 039c 744A     		je	.L140
 1656              	.LVL164:
 1657              	.LBB264:
 510:fltk-1.3.4-1/png/png.c ****                png_free(png_ptr, info_ptr->pcal_params[i]);
 1658              		.loc 1 510 0
 1659 039e 80BB1901 		cmpb	$0, 281(%rbx)
 1659      000000
 1660 03a5 742E     		je	.L141
 1661 03a7 4531FF   		xorl	%r15d, %r15d
 1662 03aa 31ED     		xorl	%ebp, %ebp
 1663              	.LVL165:
 1664 03ac 0F1F4000 		.p2align 4,,10
 1665              		.p2align 3
 1666              	.L143:
 511:fltk-1.3.4-1/png/png.c **** 
 1667              		.loc 1 511 0
 1668 03b0 4A8B343E 		movq	(%rsi,%r15), %rsi
 1669 03b4 4C89E7   		movq	%r12, %rdi
 510:fltk-1.3.4-1/png/png.c ****                png_free(png_ptr, info_ptr->pcal_params[i]);
 1670              		.loc 1 510 0
 1671 03b7 83C501   		addl	$1, %ebp
 1672              	.LVL166:
 1673 03ba 4983C708 		addq	$8, %r15
 511:fltk-1.3.4-1/png/png.c **** 
 1674              		.loc 1 511 0
 1675 03be E8000000 		call	png_free
 1675      00
 1676              	.LVL167:
 510:fltk-1.3.4-1/png/png.c ****                png_free(png_ptr, info_ptr->pcal_params[i]);
 1677              		.loc 1 510 0
 1678 03c3 0FB68319 		movzbl	281(%rbx), %eax
 1678      010000
 1679 03ca 488BB310 		movq	272(%rbx), %rsi
 1679      010000
 1680 03d1 39C5     		cmpl	%eax, %ebp
 1681 03d3 7CDB     		jl	.L143
 1682              	.LVL168:
 1683              	.L141:
 513:fltk-1.3.4-1/png/png.c ****             info_ptr->pcal_params = NULL;
 1684              		.loc 1 513 0
 1685 03d5 4C89E7   		movq	%r12, %rdi
 1686 03d8 E8000000 		call	png_free
 1686      00
 1687              	.LVL169:
 514:fltk-1.3.4-1/png/png.c ****          }
 1688              		.loc 1 514 0
 1689 03dd 48C78310 		movq	$0, 272(%rbx)
 1689      01000000 
 1689      000000
 1690              	.L140:
 1691 03e8 8B831C01 		movl	284(%rbx), %eax
 1691      0000
 1692              	.LBE264:
 522:fltk-1.3.4-1/png/png.c ****    {
 1693              		.loc 1 522 0
 1694 03ee 4489EA   		movl	%r13d, %edx
 516:fltk-1.3.4-1/png/png.c ****    }
 1695              		.loc 1 516 0
 1696 03f1 816308FF 		andl	$-1025, 8(%rbx)
 1696      FBFFFF
 522:fltk-1.3.4-1/png/png.c ****    {
 1697              		.loc 1 522 0
 1698 03f8 83E210   		andl	$16, %edx
 1699 03fb 85C2     		testl	%eax, %edx
 1700 03fd 0F847BFC 		je	.L144
 1700      FFFF
 1701              	.L219:
 524:fltk-1.3.4-1/png/png.c ****       png_free(png_ptr, info_ptr->iccp_profile);
 1702              		.loc 1 524 0
 1703 0403 488BB380 		movq	128(%rbx), %rsi
 1703      000000
 1704 040a 4C89E7   		movq	%r12, %rdi
 1705 040d E8000000 		call	png_free
 1705      00
 1706              	.LVL170:
 525:fltk-1.3.4-1/png/png.c ****       info_ptr->iccp_name = NULL;
 1707              		.loc 1 525 0
 1708 0412 488BB388 		movq	136(%rbx), %rsi
 1708      000000
 1709 0419 4C89E7   		movq	%r12, %rdi
 1710 041c E8000000 		call	png_free
 1710      00
 1711              	.LVL171:
 526:fltk-1.3.4-1/png/png.c ****       info_ptr->iccp_profile = NULL;
 1712              		.loc 1 526 0
 1713 0421 48C78380 		movq	$0, 128(%rbx)
 1713      00000000 
 1713      000000
 527:fltk-1.3.4-1/png/png.c ****       info_ptr->valid &= ~PNG_INFO_iCCP;
 1714              		.loc 1 527 0
 1715 042c 48C78388 		movq	$0, 136(%rbx)
 1715      00000000 
 1715      000000
 528:fltk-1.3.4-1/png/png.c ****    }
 1716              		.loc 1 528 0
 1717 0437 816308FF 		andl	$-4097, 8(%rbx)
 1717      EFFFFF
 1718 043e 8B831C01 		movl	284(%rbx), %eax
 1718      0000
 1719 0444 E935FCFF 		jmp	.L144
 1719      FF
 1720              	.LVL172:
 1721 0449 0F1F8000 		.p2align 4,,10
 1721      000000
 1722              		.p2align 3
 1723              	.L133:
 457:fltk-1.3.4-1/png/png.c ****          info_ptr->text[num].key = NULL;
 1724              		.loc 1 457 0
 1725 0450 4863E9   		movslq	%ecx, %rbp
 1726 0453 488D04ED 		leaq	0(,%rbp,8), %rax
 1726      00000000 
 1727 045b 48C1E506 		salq	$6, %rbp
 1728 045f 4829C5   		subq	%rax, %rbp
 1729 0462 488B742E 		movq	8(%rsi,%rbp), %rsi
 1729      08
 1730 0467 E8000000 		call	png_free
 1730      00
 1731              	.LVL173:
 458:fltk-1.3.4-1/png/png.c ****       }
 1732              		.loc 1 458 0
 1733 046c 488B83A0 		movq	160(%rbx), %rax
 1733      000000
 1734 0473 48C74428 		movq	$0, 8(%rax,%rbp)
 1734      08000000 
 1734      00
 1735 047c 8B831C01 		movl	284(%rbx), %eax
 1735      0000
 1736 0482 E9B6FBFF 		jmp	.L132
 1736      FF
 1737 0487 660F1F84 		.p2align 4,,10
 1737      00000000 
 1737      00
 1738              		.p2align 3
 1739              	.L152:
 1740              	.LBB265:
 580:fltk-1.3.4-1/png/png.c ****          {
 1741              		.loc 1 580 0
 1742 0490 83BB2801 		cmpl	$0, 296(%rbx)
 1742      000000
 1743 0497 0F846AFC 		je	.L151
 1743      FFFF
 1744              	.LVL174:
 582:fltk-1.3.4-1/png/png.c ****                png_free(png_ptr, info_ptr->unknown_chunks[i].data);
 1745              		.loc 1 582 0
 1746 049d 7E2C     		jle	.L153
 1747 049f 4531FF   		xorl	%r15d, %r15d
 1748 04a2 31ED     		xorl	%ebp, %ebp
 1749              	.LVL175:
 1750              		.p2align 4,,10
 1751 04a4 0F1F4000 		.p2align 3
 1752              	.L155:
 583:fltk-1.3.4-1/png/png.c **** 
 1753              		.loc 1 583 0
 1754 04a8 4A8B743E 		movq	8(%rsi,%r15), %rsi
 1754      08
 1755 04ad 4C89E7   		movq	%r12, %rdi
 582:fltk-1.3.4-1/png/png.c ****                png_free(png_ptr, info_ptr->unknown_chunks[i].data);
 1756              		.loc 1 582 0
 1757 04b0 83C501   		addl	$1, %ebp
 1758              	.LVL176:
 1759 04b3 4983C720 		addq	$32, %r15
 583:fltk-1.3.4-1/png/png.c **** 
 1760              		.loc 1 583 0
 1761 04b7 E8000000 		call	png_free
 1761      00
 1762              	.LVL177:
 582:fltk-1.3.4-1/png/png.c ****                png_free(png_ptr, info_ptr->unknown_chunks[i].data);
 1763              		.loc 1 582 0
 1764 04bc 3BAB2801 		cmpl	296(%rbx), %ebp
 1764      0000
 1765 04c2 488BB320 		movq	288(%rbx), %rsi
 1765      010000
 1766 04c9 7CDD     		jl	.L155
 1767              	.LVL178:
 1768              	.L153:
 585:fltk-1.3.4-1/png/png.c ****             info_ptr->unknown_chunks = NULL;
 1769              		.loc 1 585 0
 1770 04cb 4C89E7   		movq	%r12, %rdi
 1771 04ce E8000000 		call	png_free
 1771      00
 1772              	.LVL179:
 586:fltk-1.3.4-1/png/png.c ****             info_ptr->unknown_chunks_num = 0;
 1773              		.loc 1 586 0
 1774 04d3 48C78320 		movq	$0, 288(%rbx)
 1774      01000000 
 1774      000000
 587:fltk-1.3.4-1/png/png.c ****          }
 1775              		.loc 1 587 0
 1776 04de C7832801 		movl	$0, 296(%rbx)
 1776      00000000 
 1776      0000
 1777 04e8 8B831C01 		movl	284(%rbx), %eax
 1777      0000
 1778 04ee E914FCFF 		jmp	.L151
 1778      FF
 1779              		.p2align 4,,10
 1780 04f3 0F1F4400 		.p2align 3
 1780      00
 1781              	.L146:
 1782              	.LBE265:
 547:fltk-1.3.4-1/png/png.c ****          {
 1783              		.loc 1 547 0
 1784 04f8 83BB3801 		cmpl	$0, 312(%rbx)
 1784      000000
 1785 04ff 746A     		je	.L147
 1786              	.LVL180:
 1787              	.LBB266:
 551:fltk-1.3.4-1/png/png.c ****             {
 1788              		.loc 1 551 0
 1789 0501 7E45     		jle	.L148
 1790 0503 31ED     		xorl	%ebp, %ebp
 1791 0505 4531FF   		xorl	%r15d, %r15d
 1792              	.LVL181:
 1793 0508 0F1F8400 		.p2align 4,,10
 1793      00000000 
 1794              		.p2align 3
 1795              	.L150:
 553:fltk-1.3.4-1/png/png.c ****                png_free(png_ptr, info_ptr->splt_palettes[i].entries);
 1796              		.loc 1 553 0
 1797 0510 488B342E 		movq	(%rsi,%rbp), %rsi
 1798 0514 4C89E7   		movq	%r12, %rdi
 551:fltk-1.3.4-1/png/png.c ****             {
 1799              		.loc 1 551 0
 1800 0517 4183C701 		addl	$1, %r15d
 1801              	.LVL182:
 553:fltk-1.3.4-1/png/png.c ****                png_free(png_ptr, info_ptr->splt_palettes[i].entries);
 1802              		.loc 1 553 0
 1803 051b E8000000 		call	png_free
 1803      00
 1804              	.LVL183:
 554:fltk-1.3.4-1/png/png.c ****             }
 1805              		.loc 1 554 0
 1806 0520 488B8330 		movq	304(%rbx), %rax
 1806      010000
 1807 0527 4C89E7   		movq	%r12, %rdi
 1808 052a 488B7428 		movq	16(%rax,%rbp), %rsi
 1808      10
 1809 052f 4883C520 		addq	$32, %rbp
 1810 0533 E8000000 		call	png_free
 1810      00
 1811              	.LVL184:
 551:fltk-1.3.4-1/png/png.c ****             {
 1812              		.loc 1 551 0
 1813 0538 443BBB38 		cmpl	312(%rbx), %r15d
 1813      010000
 1814 053f 488BB330 		movq	304(%rbx), %rsi
 1814      010000
 1815 0546 7CC8     		jl	.L150
 1816              	.LVL185:
 1817              	.L148:
 557:fltk-1.3.4-1/png/png.c ****             info_ptr->splt_palettes = NULL;
 1818              		.loc 1 557 0
 1819 0548 4C89E7   		movq	%r12, %rdi
 1820 054b E8000000 		call	png_free
 1820      00
 1821              	.LVL186:
 1822 0550 8B831C01 		movl	284(%rbx), %eax
 1822      0000
 558:fltk-1.3.4-1/png/png.c ****             info_ptr->splt_palettes_num = 0;
 1823              		.loc 1 558 0
 1824 0556 48C78330 		movq	$0, 304(%rbx)
 1824      01000000 
 1824      000000
 559:fltk-1.3.4-1/png/png.c ****          }
 1825              		.loc 1 559 0
 1826 0561 C7833801 		movl	$0, 312(%rbx)
 1826      00000000 
 1826      0000
 1827              	.L147:
 1828              	.LBE266:
 561:fltk-1.3.4-1/png/png.c ****       }
 1829              		.loc 1 561 0
 1830 056b 816308FF 		andl	$-8193, 8(%rbx)
 1830      DFFFFF
 1831 0572 E973FBFF 		jmp	.L145
 1831      FF
 1832              		.cfi_endproc
 1833              	.LFE139:
 1835              		.section	.text.unlikely.png_free_data.part.3
 1836              	.LCOLDE20:
 1837              		.section	.text.png_free_data.part.3
 1838              	.LHOTE20:
 1839              		.section	.text.unlikely.png_handle_as_unknown.part.5,"ax",@progbits
 1840              	.LCOLDB21:
 1841              		.section	.text.png_handle_as_unknown.part.5,"ax",@progbits
 1842              	.LHOTB21:
 1843              		.p2align 4,,15
 1845              	png_handle_as_unknown.part.5:
 1846              	.LFB141:
 884:fltk-1.3.4-1/png/png.c **** {
 1847              		.loc 1 884 0
 1848              		.cfi_startproc
 1849              	.LVL187:
 889:fltk-1.3.4-1/png/png.c ****       return PNG_HANDLE_CHUNK_AS_DEFAULT;
 1850              		.loc 1 889 0
 1851 0000 8B970404 		movl	1028(%rdi), %edx
 1851      0000
 890:fltk-1.3.4-1/png/png.c **** 
 1852              		.loc 1 890 0
 1853 0006 31C0     		xorl	%eax, %eax
 889:fltk-1.3.4-1/png/png.c ****       return PNG_HANDLE_CHUNK_AS_DEFAULT;
 1854              		.loc 1 889 0
 1855 0008 85D2     		testl	%edx, %edx
 1856 000a 7441     		je	.L232
 884:fltk-1.3.4-1/png/png.c **** {
 1857              		.loc 1 884 0
 1858 000c 4154     		pushq	%r12
 1859              		.cfi_def_cfa_offset 16
 1860              		.cfi_offset 12, -16
 1861 000e 55       		pushq	%rbp
 1862              		.cfi_def_cfa_offset 24
 1863              		.cfi_offset 6, -24
 1864 000f 4889F5   		movq	%rsi, %rbp
 1865 0012 53       		pushq	%rbx
 1866              		.cfi_def_cfa_offset 32
 1867              		.cfi_offset 3, -32
 892:fltk-1.3.4-1/png/png.c ****    p = p_end + png_ptr->num_chunk_list*5; /* beyond end */
 1868              		.loc 1 892 0
 1869 0013 4C8BA708 		movq	1032(%rdi), %r12
 1869      040000
 1870              	.LVL188:
 893:fltk-1.3.4-1/png/png.c **** 
 1871              		.loc 1 893 0
 1872 001a 8D1C92   		leal	(%rdx,%rdx,4), %ebx
 1873 001d 4C01E3   		addq	%r12, %rbx
 1874              	.LVL189:
 1875 0020 EB0B     		jmp	.L226
 1876              	.LVL190:
 1877              		.p2align 4,,10
 1878 0022 660F1F44 		.p2align 3
 1878      0000
 1879              	.L225:
 906:fltk-1.3.4-1/png/png.c **** 
 1880              		.loc 1 906 0
 1881 0028 4939DC   		cmpq	%rbx, %r12
 1882 002b 7323     		jnb	.L233
 1883              	.L226:
 901:fltk-1.3.4-1/png/png.c **** 
 1884              		.loc 1 901 0
 1885 002d 4883EB05 		subq	$5, %rbx
 1886              	.LVL191:
 903:fltk-1.3.4-1/png/png.c ****          return p[4];
 1887              		.loc 1 903 0
 1888 0031 BA040000 		movl	$4, %edx
 1888      00
 1889 0036 4889EF   		movq	%rbp, %rdi
 1890 0039 4889DE   		movq	%rbx, %rsi
 1891 003c E8000000 		call	memcmp
 1891      00
 1892              	.LVL192:
 1893 0041 85C0     		testl	%eax, %eax
 1894 0043 75E3     		jne	.L225
 904:fltk-1.3.4-1/png/png.c ****    }
 1895              		.loc 1 904 0
 1896 0045 0FB64304 		movzbl	4(%rbx), %eax
 1897              	.L224:
 914:fltk-1.3.4-1/png/png.c **** 
 1898              		.loc 1 914 0
 1899 0049 5B       		popq	%rbx
 1900              		.cfi_restore 3
 1901              		.cfi_def_cfa_offset 24
 1902              	.LVL193:
 1903 004a 5D       		popq	%rbp
 1904              		.cfi_restore 6
 1905              		.cfi_def_cfa_offset 16
 1906              	.LVL194:
 1907 004b 415C     		popq	%r12
 1908              		.cfi_restore 12
 1909              		.cfi_def_cfa_offset 8
 1910              	.LVL195:
 1911              	.L232:
 1912 004d F3C3     		rep ret
 1913              	.LVL196:
 1914 004f 90       		.p2align 4,,10
 1915              		.p2align 3
 1916              	.L233:
 1917              		.cfi_def_cfa_offset 32
 1918              		.cfi_offset 3, -32
 1919              		.cfi_offset 6, -24
 1920              		.cfi_offset 12, -16
 890:fltk-1.3.4-1/png/png.c **** 
 1921              		.loc 1 890 0
 1922 0050 31C0     		xorl	%eax, %eax
 1923 0052 EBF5     		jmp	.L224
 1924              		.cfi_endproc
 1925              	.LFE141:
 1927              		.section	.text.unlikely.png_handle_as_unknown.part.5
 1928              	.LCOLDE21:
 1929              		.section	.text.png_handle_as_unknown.part.5
 1930              	.LHOTE21:
 1931              		.section	.text.unlikely.png_muldiv.part.9,"ax",@progbits
 1932              	.LCOLDB24:
 1933              		.section	.text.png_muldiv.part.9,"ax",@progbits
 1934              	.LHOTB24:
 1935              		.p2align 4,,15
 1937              	png_muldiv.part.9:
 1938              	.LFB145:
3243:fltk-1.3.4-1/png/png.c ****     png_int_32 divisor)
 1939              		.loc 1 3243 0
 1940              		.cfi_startproc
 1941              	.LVL197:
 1942              	.LBB267:
3257:fltk-1.3.4-1/png/png.c ****          r *= times;
 1943              		.loc 1 3257 0
 1944 0000 660FEFC0 		pxor	%xmm0, %xmm0
 1945              	.LBE267:
3243:fltk-1.3.4-1/png/png.c ****     png_int_32 divisor)
 1946              		.loc 1 3243 0
 1947 0004 53       		pushq	%rbx
 1948              		.cfi_def_cfa_offset 16
 1949              		.cfi_offset 3, -16
 1950              	.LBB268:
3258:fltk-1.3.4-1/png/png.c ****          r /= divisor;
 1951              		.loc 1 3258 0
 1952 0005 660FEFC9 		pxor	%xmm1, %xmm1
 1953              	.LBE268:
3243:fltk-1.3.4-1/png/png.c ****     png_int_32 divisor)
 1954              		.loc 1 3243 0
 1955 0009 4889FB   		movq	%rdi, %rbx
 1956              	.LBB269:
3257:fltk-1.3.4-1/png/png.c ****          r *= times;
 1957              		.loc 1 3257 0
 1958 000c F20F2AC6 		cvtsi2sd	%esi, %xmm0
 1959              	.LVL198:
3258:fltk-1.3.4-1/png/png.c ****          r /= divisor;
 1960              		.loc 1 3258 0
 1961 0010 F20F2ACA 		cvtsi2sd	%edx, %xmm1
 1962 0014 F20F59C1 		mulsd	%xmm1, %xmm0
 1963              	.LVL199:
3260:fltk-1.3.4-1/png/png.c **** 
 1964              		.loc 1 3260 0
 1965 0018 660FEFC9 		pxor	%xmm1, %xmm1
 1966 001c F20F2AC9 		cvtsi2sd	%ecx, %xmm1
 1967 0020 F20F5EC1 		divsd	%xmm1, %xmm0
 1968              	.LVL200:
 1969 0024 F20F5805 		addsd	.LC9(%rip), %xmm0
 1969      00000000 
 1970 002c E8000000 		call	floor
 1970      00
 1971              	.LVL201:
3263:fltk-1.3.4-1/png/png.c ****          {
 1972              		.loc 1 3263 0
 1973 0031 F20F100D 		movsd	.LC22(%rip), %xmm1
 1973      00000000 
 1974 0039 660F2EC8 		ucomisd	%xmm0, %xmm1
 1975 003d 7221     		jb	.L243
 1976 003f 660F2E05 		ucomisd	.LC23(%rip), %xmm0
 1976      00000000 
 1977 0047 7217     		jb	.L243
3265:fltk-1.3.4-1/png/png.c ****             return 1;
 1978              		.loc 1 3265 0
 1979 0049 F20F2CC0 		cvttsd2si	%xmm0, %eax
 1980 004d 8903     		movl	%eax, (%rbx)
3266:fltk-1.3.4-1/png/png.c ****          }
 1981              		.loc 1 3266 0
 1982 004f B8010000 		movl	$1, %eax
 1982      00
 1983              	.LBE269:
3355:fltk-1.3.4-1/png/png.c **** #endif /* READ_GAMMA || INCH_CONVERSIONS */
 1984              		.loc 1 3355 0
 1985 0054 5B       		popq	%rbx
 1986              		.cfi_remember_state
 1987              		.cfi_def_cfa_offset 8
 1988              	.LVL202:
 1989 0055 C3       		ret
 1990              	.LVL203:
 1991 0056 662E0F1F 		.p2align 4,,10
 1991      84000000 
 1991      0000
 1992              		.p2align 3
 1993              	.L243:
 1994              		.cfi_restore_state
3354:fltk-1.3.4-1/png/png.c **** }
 1995              		.loc 1 3354 0
 1996 0060 31C0     		xorl	%eax, %eax
3355:fltk-1.3.4-1/png/png.c **** #endif /* READ_GAMMA || INCH_CONVERSIONS */
 1997              		.loc 1 3355 0
 1998 0062 5B       		popq	%rbx
 1999              		.cfi_def_cfa_offset 8
 2000              	.LVL204:
 2001 0063 C3       		ret
 2002              		.cfi_endproc
 2003              	.LFE145:
 2005              		.section	.text.unlikely.png_muldiv.part.9
 2006              	.LCOLDE24:
 2007              		.section	.text.png_muldiv.part.9
 2008              	.LHOTE24:
 2009              		.section	.text.unlikely.png_xy_from_XYZ,"ax",@progbits
 2010              	.LCOLDB25:
 2011              		.section	.text.png_xy_from_XYZ,"ax",@progbits
 2012              	.LHOTB25:
 2013              		.p2align 4,,15
 2015              	png_xy_from_XYZ:
 2016              	.LFB88:
1194:fltk-1.3.4-1/png/png.c ****    png_int_32 d, dwhite, whiteX, whiteY;
 2017              		.loc 1 1194 0
 2018              		.cfi_startproc
 2019              	.LVL205:
1197:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&xy->redx, XYZ->red_X, PNG_FP_1, d) == 0)
 2020              		.loc 1 1197 0
 2021 0000 8B06     		movl	(%rsi), %eax
 2022 0002 8B4E04   		movl	4(%rsi), %ecx
 2023 0005 01C1     		addl	%eax, %ecx
 2024              	.LVL206:
 2025              	.LBB270:
 2026              	.LBB271:
3247:fltk-1.3.4-1/png/png.c ****    {
 2027              		.loc 1 3247 0
 2028 0007 034E08   		addl	8(%rsi), %ecx
 2029              	.LVL207:
 2030 000a 0F84F000 		je	.L311
 2030      0000
 2031              	.LBE271:
 2032              	.LBE270:
1194:fltk-1.3.4-1/png/png.c ****    png_int_32 d, dwhite, whiteX, whiteY;
 2033              		.loc 1 1194 0
 2034 0010 4157     		pushq	%r15
 2035              		.cfi_def_cfa_offset 16
 2036              		.cfi_offset 15, -16
 2037 0012 4156     		pushq	%r14
 2038              		.cfi_def_cfa_offset 24
 2039              		.cfi_offset 14, -24
 2040 0014 4155     		pushq	%r13
 2041              		.cfi_def_cfa_offset 32
 2042              		.cfi_offset 13, -32
 2043 0016 4154     		pushq	%r12
 2044              		.cfi_def_cfa_offset 40
 2045              		.cfi_offset 12, -40
 2046 0018 4189CC   		movl	%ecx, %r12d
 2047 001b 55       		pushq	%rbp
 2048              		.cfi_def_cfa_offset 48
 2049              		.cfi_offset 6, -48
 2050 001c 53       		pushq	%rbx
 2051              		.cfi_def_cfa_offset 56
 2052              		.cfi_offset 3, -56
 2053 001d 4889FD   		movq	%rdi, %rbp
 2054 0020 4889F3   		movq	%rsi, %rbx
 2055 0023 4883EC18 		subq	$24, %rsp
 2056              		.cfi_def_cfa_offset 80
 2057              	.LBB274:
 2058              	.LBB272:
3249:fltk-1.3.4-1/png/png.c ****       {
 2059              		.loc 1 3249 0
 2060 0027 85C0     		testl	%eax, %eax
 2061 0029 0F853101 		jne	.L248
 2061      0000
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 2062              		.loc 1 3251 0
 2063 002f C7070000 		movl	$0, (%rdi)
 2063      0000
 2064              	.LVL208:
 2065              	.LBE272:
 2066              	.LBE274:
1200:fltk-1.3.4-1/png/png.c ****       return 1;
 2067              		.loc 1 1200 0
 2068 0035 8B7304   		movl	4(%rbx), %esi
 2069              	.LVL209:
 2070              	.LBB275:
 2071              	.LBB276:
3249:fltk-1.3.4-1/png/png.c ****       {
 2072              		.loc 1 3249 0
 2073 0038 85F6     		testl	%esi, %esi
 2074 003a 0F853B01 		jne	.L312
 2074      0000
 2075              	.LVL210:
 2076              	.L260:
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 2077              		.loc 1 3251 0
 2078 0040 C7450400 		movl	$0, 4(%rbp)
 2078      000000
 2079              	.LVL211:
 2080              	.L251:
 2081              	.LBE276:
 2082              	.LBE275:
1206:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&xy->greenx, XYZ->green_X, PNG_FP_1, d) == 0)
 2083              		.loc 1 1206 0
 2084 0047 8B730C   		movl	12(%rbx), %esi
 2085 004a 8B4B10   		movl	16(%rbx), %ecx
 2086 004d 01F1     		addl	%esi, %ecx
 2087              	.LVL212:
 2088              	.LBB279:
 2089              	.LBB280:
3247:fltk-1.3.4-1/png/png.c ****    {
 2090              		.loc 1 3247 0
 2091 004f 034B14   		addl	20(%rbx), %ecx
 2092              	.LVL213:
 2093 0052 4189CD   		movl	%ecx, %r13d
 2094 0055 0F84ED00 		je	.L250
 2094      0000
3249:fltk-1.3.4-1/png/png.c ****       {
 2095              		.loc 1 3249 0
 2096 005b 85F6     		testl	%esi, %esi
 2097              	.LBE280:
 2098              	.LBE279:
1203:fltk-1.3.4-1/png/png.c ****    whiteY = XYZ->red_Y;
 2099              		.loc 1 1203 0
 2100 005d 448B3B   		movl	(%rbx), %r15d
1204:fltk-1.3.4-1/png/png.c **** 
 2101              		.loc 1 1204 0
 2102 0060 448B7304 		movl	4(%rbx), %r14d
 2103              	.LBB283:
 2104              	.LBB281:
3249:fltk-1.3.4-1/png/png.c ****       {
 2105              		.loc 1 3249 0
 2106 0064 0F853601 		jne	.L252
 2106      0000
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 2107              		.loc 1 3251 0
 2108 006a C7450800 		movl	$0, 8(%rbp)
 2108      000000
 2109              	.LVL214:
 2110              	.L253:
 2111              	.LBE281:
 2112              	.LBE283:
1209:fltk-1.3.4-1/png/png.c ****       return 1;
 2113              		.loc 1 1209 0
 2114 0071 8B7310   		movl	16(%rbx), %esi
 2115              	.LVL215:
 2116              	.LBB284:
 2117              	.LBB285:
3249:fltk-1.3.4-1/png/png.c ****       {
 2118              		.loc 1 3249 0
 2119 0074 85F6     		testl	%esi, %esi
 2120 0076 0F854401 		jne	.L313
 2120      0000
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 2121              		.loc 1 3251 0
 2122 007c C7450C00 		movl	$0, 12(%rbp)
 2122      000000
 2123              	.LVL216:
 2124              	.L254:
 2125              	.LBE285:
 2126              	.LBE284:
1215:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&xy->bluex, XYZ->blue_X, PNG_FP_1, d) == 0)
 2127              		.loc 1 1215 0
 2128 0083 8B7318   		movl	24(%rbx), %esi
 2129 0086 8B4B1C   		movl	28(%rbx), %ecx
 2130 0089 01F1     		addl	%esi, %ecx
 2131              	.LVL217:
 2132              	.LBB287:
 2133              	.LBB288:
3247:fltk-1.3.4-1/png/png.c ****    {
 2134              		.loc 1 3247 0
 2135 008b 034B20   		addl	32(%rbx), %ecx
 2136              	.LVL218:
 2137 008e 4189C8   		movl	%ecx, %r8d
 2138 0091 0F84B100 		je	.L250
 2138      0000
3249:fltk-1.3.4-1/png/png.c ****       {
 2139              		.loc 1 3249 0
 2140 0097 85F6     		testl	%esi, %esi
 2141              	.LBE288:
 2142              	.LBE287:
1212:fltk-1.3.4-1/png/png.c ****    whiteY += XYZ->green_Y;
 2143              		.loc 1 1212 0
 2144 0099 448B4B0C 		movl	12(%rbx), %r9d
1213:fltk-1.3.4-1/png/png.c **** 
 2145              		.loc 1 1213 0
 2146 009d 448B5310 		movl	16(%rbx), %r10d
 2147              	.LBB291:
 2148              	.LBB289:
3249:fltk-1.3.4-1/png/png.c ****       {
 2149              		.loc 1 3249 0
 2150 00a1 756D     		jne	.L255
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 2151              		.loc 1 3251 0
 2152 00a3 C7451000 		movl	$0, 16(%rbp)
 2152      000000
 2153              	.LVL219:
 2154              	.L256:
 2155              	.LBE289:
 2156              	.LBE291:
1218:fltk-1.3.4-1/png/png.c ****       return 1;
 2157              		.loc 1 1218 0
 2158 00aa 8B731C   		movl	28(%rbx), %esi
 2159              	.LVL220:
 2160              	.LBB292:
 2161              	.LBB293:
3249:fltk-1.3.4-1/png/png.c ****       {
 2162              		.loc 1 3249 0
 2163 00ad 85F6     		testl	%esi, %esi
 2164 00af 0F852B01 		jne	.L314
 2164      0000
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 2165              		.loc 1 3251 0
 2166 00b5 C7451400 		movl	$0, 20(%rbp)
 2166      000000
 2167              	.LVL221:
 2168              	.L257:
 2169              	.LBE293:
 2170              	.LBE292:
1211:fltk-1.3.4-1/png/png.c ****    whiteX += XYZ->green_X;
 2171              		.loc 1 1211 0
 2172 00bc 438D0C2C 		leal	(%r12,%r13), %ecx
 2173              	.LVL222:
 2174              	.LBB295:
 2175              	.LBB296:
3247:fltk-1.3.4-1/png/png.c ****    {
 2176              		.loc 1 3247 0
 2177 00c0 4401C1   		addl	%r8d, %ecx
 2178              	.LVL223:
 2179 00c3 4189CC   		movl	%ecx, %r12d
 2180 00c6 0F847C00 		je	.L250
 2180      0000
 2181              	.LBE296:
 2182              	.LBE295:
1212:fltk-1.3.4-1/png/png.c ****    whiteY += XYZ->green_Y;
 2183              		.loc 1 1212 0
 2184 00cc 4501CF   		addl	%r9d, %r15d
1222:fltk-1.3.4-1/png/png.c **** 
 2185              		.loc 1 1222 0
 2186 00cf 448B6B1C 		movl	28(%rbx), %r13d
 2187              	.LBB299:
 2188              	.LBB297:
3249:fltk-1.3.4-1/png/png.c ****       {
 2189              		.loc 1 3249 0
 2190 00d3 4489FE   		movl	%r15d, %esi
 2191 00d6 037318   		addl	24(%rbx), %esi
 2192 00d9 0F854101 		jne	.L258
 2192      0000
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 2193              		.loc 1 3251 0
 2194 00df C7451800 		movl	$0, 24(%rbp)
 2194      000000
 2195              	.LVL224:
 2196              	.L259:
 2197              	.LBE297:
 2198              	.LBE299:
1213:fltk-1.3.4-1/png/png.c **** 
 2199              		.loc 1 1213 0
 2200 00e6 4501D6   		addl	%r10d, %r14d
 2201              	.LBB300:
 2202              	.LBB301:
3249:fltk-1.3.4-1/png/png.c ****       {
 2203              		.loc 1 3249 0
 2204 00e9 4489F6   		movl	%r14d, %esi
 2205 00ec 4401EE   		addl	%r13d, %esi
 2206 00ef 0F855301 		jne	.L315
 2206      0000
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 2207              		.loc 1 3251 0
 2208 00f5 C7451C00 		movl	$0, 28(%rbp)
 2208      000000
 2209              	.LVL225:
 2210              	.LBE301:
 2211              	.LBE300:
1232:fltk-1.3.4-1/png/png.c **** }
 2212              		.loc 1 1232 0
 2213 00fc 31C0     		xorl	%eax, %eax
 2214 00fe EB4D     		jmp	.L298
 2215              	.LVL226:
 2216              		.p2align 4,,10
 2217              		.p2align 3
 2218              	.L311:
 2219              		.cfi_def_cfa_offset 8
 2220              		.cfi_restore 3
 2221              		.cfi_restore 6
 2222              		.cfi_restore 12
 2223              		.cfi_restore 13
 2224              		.cfi_restore 14
 2225              		.cfi_restore 15
1199:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&xy->redy, XYZ->red_Y, PNG_FP_1, d) == 0)
 2226              		.loc 1 1199 0
 2227 0100 B8010000 		movl	$1, %eax
 2227      00
 2228              	.LVL227:
1233:fltk-1.3.4-1/png/png.c **** 
 2229              		.loc 1 1233 0
 2230 0105 C3       		ret
 2231              	.LVL228:
 2232 0106 662E0F1F 		.p2align 4,,10
 2232      84000000 
 2232      0000
 2233              		.p2align 3
 2234              	.L255:
 2235              		.cfi_def_cfa_offset 80
 2236              		.cfi_offset 3, -56
 2237              		.cfi_offset 6, -48
 2238              		.cfi_offset 12, -40
 2239              		.cfi_offset 13, -32
 2240              		.cfi_offset 14, -24
 2241              		.cfi_offset 15, -16
1216:fltk-1.3.4-1/png/png.c ****       return 1;
 2242              		.loc 1 1216 0
 2243 0110 488D7D10 		leaq	16(%rbp), %rdi
 2244              	.LBB303:
 2245              	.LBB290:
 2246 0114 BAA08601 		movl	$100000, %edx
 2246      00
 2247 0119 44895424 		movl	%r10d, 12(%rsp)
 2247      0C
 2248 011e 44894C24 		movl	%r9d, 8(%rsp)
 2248      08
 2249 0123 894C2404 		movl	%ecx, 4(%rsp)
 2250 0127 E8000000 		call	png_muldiv.part.9
 2250      00
 2251              	.LVL229:
 2252              	.LBE290:
 2253              	.LBE303:
 2254 012c 85C0     		testl	%eax, %eax
 2255 012e 448B4424 		movl	4(%rsp), %r8d
 2255      04
 2256 0133 448B4C24 		movl	8(%rsp), %r9d
 2256      08
 2257 0138 448B5424 		movl	12(%rsp), %r10d
 2257      0C
 2258 013d 0F8567FF 		jne	.L256
 2258      FFFF
 2259              	.LVL230:
 2260              		.p2align 4,,10
 2261 0143 0F1F4400 		.p2align 3
 2261      00
 2262              	.L250:
1199:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&xy->redy, XYZ->red_Y, PNG_FP_1, d) == 0)
 2263              		.loc 1 1199 0
 2264 0148 B8010000 		movl	$1, %eax
 2264      00
 2265              	.L298:
1233:fltk-1.3.4-1/png/png.c **** 
 2266              		.loc 1 1233 0
 2267 014d 4883C418 		addq	$24, %rsp
 2268              		.cfi_remember_state
 2269              		.cfi_def_cfa_offset 56
 2270 0151 5B       		popq	%rbx
 2271              		.cfi_restore 3
 2272              		.cfi_def_cfa_offset 48
 2273              	.LVL231:
 2274 0152 5D       		popq	%rbp
 2275              		.cfi_restore 6
 2276              		.cfi_def_cfa_offset 40
 2277              	.LVL232:
 2278 0153 415C     		popq	%r12
 2279              		.cfi_restore 12
 2280              		.cfi_def_cfa_offset 32
 2281 0155 415D     		popq	%r13
 2282              		.cfi_restore 13
 2283              		.cfi_def_cfa_offset 24
 2284 0157 415E     		popq	%r14
 2285              		.cfi_restore 14
 2286              		.cfi_def_cfa_offset 16
 2287 0159 415F     		popq	%r15
 2288              		.cfi_restore 15
 2289              		.cfi_def_cfa_offset 8
 2290 015b C3       		ret
 2291              	.LVL233:
 2292 015c 0F1F4000 		.p2align 4,,10
 2293              		.p2align 3
 2294              	.L248:
 2295              		.cfi_restore_state
 2296              	.LBB304:
 2297              	.LBB273:
 2298 0160 BAA08601 		movl	$100000, %edx
 2298      00
 2299 0165 89C6     		movl	%eax, %esi
 2300 0167 E8000000 		call	png_muldiv.part.9
 2300      00
 2301              	.LVL234:
 2302              	.LBE273:
 2303              	.LBE304:
1198:fltk-1.3.4-1/png/png.c ****       return 1;
 2304              		.loc 1 1198 0
 2305 016c 85C0     		testl	%eax, %eax
 2306 016e 74D8     		je	.L250
1200:fltk-1.3.4-1/png/png.c ****       return 1;
 2307              		.loc 1 1200 0
 2308 0170 8B7304   		movl	4(%rbx), %esi
 2309              	.LVL235:
 2310              	.LBB305:
 2311              	.LBB277:
3249:fltk-1.3.4-1/png/png.c ****       {
 2312              		.loc 1 3249 0
 2313 0173 85F6     		testl	%esi, %esi
 2314 0175 0F84C5FE 		je	.L260
 2314      FFFF
 2315              	.LVL236:
 2316              	.L312:
 2317              	.LBE277:
 2318              	.LBE305:
1200:fltk-1.3.4-1/png/png.c ****       return 1;
 2319              		.loc 1 1200 0
 2320 017b 488D7D04 		leaq	4(%rbp), %rdi
 2321              	.LBB306:
 2322              	.LBB278:
 2323 017f 4489E1   		movl	%r12d, %ecx
 2324 0182 BAA08601 		movl	$100000, %edx
 2324      00
 2325 0187 E8000000 		call	png_muldiv.part.9
 2325      00
 2326              	.LVL237:
 2327              	.LBE278:
 2328              	.LBE306:
 2329 018c 85C0     		testl	%eax, %eax
 2330 018e 0F85B3FE 		jne	.L251
 2330      FFFF
 2331 0194 EBB2     		jmp	.L250
 2332              	.LVL238:
 2333 0196 662E0F1F 		.p2align 4,,10
 2333      84000000 
 2333      0000
 2334              		.p2align 3
 2335              	.L252:
1207:fltk-1.3.4-1/png/png.c ****       return 1;
 2336              		.loc 1 1207 0
 2337 01a0 488D7D08 		leaq	8(%rbp), %rdi
 2338              	.LBB307:
 2339              	.LBB282:
 2340 01a4 BAA08601 		movl	$100000, %edx
 2340      00
 2341 01a9 E8000000 		call	png_muldiv.part.9
 2341      00
 2342              	.LVL239:
 2343              	.LBE282:
 2344              	.LBE307:
 2345 01ae 85C0     		testl	%eax, %eax
 2346 01b0 0F85BBFE 		jne	.L253
 2346      FFFF
 2347 01b6 EB90     		jmp	.L250
 2348              	.LVL240:
 2349 01b8 0F1F8400 		.p2align 4,,10
 2349      00000000 
 2350              		.p2align 3
 2351              	.L313:
1209:fltk-1.3.4-1/png/png.c ****       return 1;
 2352              		.loc 1 1209 0
 2353 01c0 488D7D0C 		leaq	12(%rbp), %rdi
 2354              	.LBB308:
 2355              	.LBB286:
 2356 01c4 4489E9   		movl	%r13d, %ecx
 2357 01c7 BAA08601 		movl	$100000, %edx
 2357      00
 2358 01cc E8000000 		call	png_muldiv.part.9
 2358      00
 2359              	.LVL241:
 2360              	.LBE286:
 2361              	.LBE308:
 2362 01d1 85C0     		testl	%eax, %eax
 2363 01d3 0F85AAFE 		jne	.L254
 2363      FFFF
 2364 01d9 E96AFFFF 		jmp	.L250
 2364      FF
 2365              	.LVL242:
 2366 01de 6690     		.p2align 4,,10
 2367              		.p2align 3
 2368              	.L314:
1218:fltk-1.3.4-1/png/png.c ****       return 1;
 2369              		.loc 1 1218 0
 2370 01e0 488D7D14 		leaq	20(%rbp), %rdi
 2371              	.LBB309:
 2372              	.LBB294:
 2373 01e4 4489C1   		movl	%r8d, %ecx
 2374 01e7 BAA08601 		movl	$100000, %edx
 2374      00
 2375 01ec 44895424 		movl	%r10d, 12(%rsp)
 2375      0C
 2376 01f1 44894C24 		movl	%r9d, 8(%rsp)
 2376      08
 2377 01f6 44894424 		movl	%r8d, 4(%rsp)
 2377      04
 2378 01fb E8000000 		call	png_muldiv.part.9
 2378      00
 2379              	.LVL243:
 2380              	.LBE294:
 2381              	.LBE309:
 2382 0200 85C0     		testl	%eax, %eax
 2383 0202 448B4424 		movl	4(%rsp), %r8d
 2383      04
 2384 0207 448B4C24 		movl	8(%rsp), %r9d
 2384      08
 2385 020c 448B5424 		movl	12(%rsp), %r10d
 2385      0C
 2386 0211 0F85A5FE 		jne	.L257
 2386      FFFF
 2387 0217 E92CFFFF 		jmp	.L250
 2387      FF
 2388              	.LVL244:
 2389 021c 0F1F4000 		.p2align 4,,10
 2390              		.p2align 3
 2391              	.L258:
1227:fltk-1.3.4-1/png/png.c ****       return 1;
 2392              		.loc 1 1227 0
 2393 0220 488D7D18 		leaq	24(%rbp), %rdi
 2394              	.LBB310:
 2395              	.LBB298:
 2396 0224 BAA08601 		movl	$100000, %edx
 2396      00
 2397 0229 44895424 		movl	%r10d, 4(%rsp)
 2397      04
 2398 022e E8000000 		call	png_muldiv.part.9
 2398      00
 2399              	.LVL245:
 2400              	.LBE298:
 2401              	.LBE310:
 2402 0233 85C0     		testl	%eax, %eax
 2403 0235 448B5424 		movl	4(%rsp), %r10d
 2403      04
 2404 023a 0F85A6FE 		jne	.L259
 2404      FFFF
 2405 0240 E903FFFF 		jmp	.L250
 2405      FF
 2406              	.LVL246:
 2407              		.p2align 4,,10
 2408 0245 0F1F00   		.p2align 3
 2409              	.L315:
1229:fltk-1.3.4-1/png/png.c ****       return 1;
 2410              		.loc 1 1229 0
 2411 0248 488D7D1C 		leaq	28(%rbp), %rdi
 2412              	.LBB311:
 2413              	.LBB302:
 2414 024c 4489E1   		movl	%r12d, %ecx
 2415 024f BAA08601 		movl	$100000, %edx
 2415      00
 2416 0254 E8000000 		call	png_muldiv.part.9
 2416      00
 2417              	.LVL247:
 2418              	.LBE302:
 2419              	.LBE311:
1199:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&xy->redy, XYZ->red_Y, PNG_FP_1, d) == 0)
 2420              		.loc 1 1199 0
 2421 0259 85C0     		testl	%eax, %eax
 2422 025b 0F94C0   		sete	%al
 2423 025e 0FB6C0   		movzbl	%al, %eax
 2424 0261 E9E7FEFF 		jmp	.L298
 2424      FF
 2425              		.cfi_endproc
 2426              	.LFE88:
 2428              		.section	.text.unlikely.png_xy_from_XYZ
 2429              	.LCOLDE25:
 2430              		.section	.text.png_xy_from_XYZ
 2431              	.LHOTE25:
 2432              		.section	.text.unlikely.png_colorspace_check_xy.part.10,"ax",@progbits
 2433              	.LCOLDB26:
 2434              		.section	.text.png_colorspace_check_xy.part.10,"ax",@progbits
 2435              	.LHOTB26:
 2436              		.p2align 4,,15
 2438              	png_colorspace_check_xy.part.10:
 2439              	.LFB146:
1577:fltk-1.3.4-1/png/png.c **** {
 2440              		.loc 1 1577 0
 2441              		.cfi_startproc
 2442              	.LVL248:
 2443 0000 53       		pushq	%rbx
 2444              		.cfi_def_cfa_offset 16
 2445              		.cfi_offset 3, -16
 2446 0001 4889F3   		movq	%rsi, %rbx
1587:fltk-1.3.4-1/png/png.c ****    if (result != 0)
 2447              		.loc 1 1587 0
 2448 0004 4889FE   		movq	%rdi, %rsi
 2449              	.LVL249:
1577:fltk-1.3.4-1/png/png.c **** {
 2450              		.loc 1 1577 0
 2451 0007 4883EC30 		subq	$48, %rsp
 2452              		.cfi_def_cfa_offset 64
1587:fltk-1.3.4-1/png/png.c ****    if (result != 0)
 2453              		.loc 1 1587 0
 2454 000b 4889E7   		movq	%rsp, %rdi
 2455              	.LVL250:
1577:fltk-1.3.4-1/png/png.c **** {
 2456              		.loc 1 1577 0
 2457 000e 64488B04 		movq	%fs:40, %rax
 2457      25280000 
 2457      00
 2458 0017 48894424 		movq	%rax, 40(%rsp)
 2458      28
 2459 001c 31C0     		xorl	%eax, %eax
1587:fltk-1.3.4-1/png/png.c ****    if (result != 0)
 2460              		.loc 1 1587 0
 2461 001e E8000000 		call	png_xy_from_XYZ
 2461      00
 2462              	.LVL251:
1588:fltk-1.3.4-1/png/png.c ****       return result;
 2463              		.loc 1 1588 0
 2464 0023 85C0     		testl	%eax, %eax
 2465 0025 7518     		jne	.L317
1591:fltk-1.3.4-1/png/png.c ****        5/*actually, the math is pretty accurate*/) != 0)
 2466              		.loc 1 1591 0
 2467 0027 BA050000 		movl	$5, %edx
 2467      00
 2468 002c 4889E6   		movq	%rsp, %rsi
 2469 002f 4889DF   		movq	%rbx, %rdi
 2470 0032 E8000000 		call	png_colorspace_endpoints_match
 2470      00
 2471              	.LVL252:
1593:fltk-1.3.4-1/png/png.c **** 
 2472              		.loc 1 1593 0
 2473 0037 85C0     		testl	%eax, %eax
 2474 0039 0F94C0   		sete	%al
 2475 003c 0FB6C0   		movzbl	%al, %eax
 2476              	.L317:
1597:fltk-1.3.4-1/png/png.c **** 
 2477              		.loc 1 1597 0
 2478 003f 488B4C24 		movq	40(%rsp), %rcx
 2478      28
 2479 0044 6448330C 		xorq	%fs:40, %rcx
 2479      25280000 
 2479      00
 2480 004d 7506     		jne	.L321
 2481 004f 4883C430 		addq	$48, %rsp
 2482              		.cfi_remember_state
 2483              		.cfi_def_cfa_offset 16
 2484 0053 5B       		popq	%rbx
 2485              		.cfi_def_cfa_offset 8
 2486              	.LVL253:
 2487 0054 C3       		ret
 2488              	.LVL254:
 2489              	.L321:
 2490              		.cfi_restore_state
 2491 0055 E8000000 		call	__stack_chk_fail
 2491      00
 2492              	.LVL255:
 2493              		.cfi_endproc
 2494              	.LFE146:
 2496              		.section	.text.unlikely.png_colorspace_check_xy.part.10
 2497              	.LCOLDE26:
 2498              		.section	.text.png_colorspace_check_xy.part.10
 2499              	.LHOTE26:
 2500              		.section	.rodata.str1.8
 2501 0023 00000000 		.align 8
 2501      00
 2502              	.LC27:
 2503 0028 67616D6D 		.string	"gamma value does not match sRGB"
 2503      61207661 
 2503      6C756520 
 2503      646F6573 
 2503      206E6F74 
 2504              		.align 8
 2505              	.LC28:
 2506 0048 67616D6D 		.string	"gamma value does not match libpng estimate"
 2506      61207661 
 2506      6C756520 
 2506      646F6573 
 2506      206E6F74 
 2507              		.section	.text.unlikely.png_colorspace_check_gamma.isra.11,"ax",@progbits
 2508              	.LCOLDB29:
 2509              		.section	.text.png_colorspace_check_gamma.isra.11,"ax",@progbits
 2510              	.LHOTB29:
 2511              		.p2align 4,,15
 2513              	png_colorspace_check_gamma.isra.11:
 2514              	.LFB147:
1030:fltk-1.3.4-1/png/png.c ****    png_colorspacerp colorspace, png_fixed_point gAMA, int from)
 2515              		.loc 1 1030 0
 2516              		.cfi_startproc
 2517              	.LVL256:
 2518 0000 55       		pushq	%rbp
 2519              		.cfi_def_cfa_offset 16
 2520              		.cfi_offset 6, -16
 2521 0001 53       		pushq	%rbx
 2522              		.cfi_def_cfa_offset 24
 2523              		.cfi_offset 3, -24
 2524 0002 4883EC28 		subq	$40, %rsp
 2525              		.cfi_def_cfa_offset 64
1030:fltk-1.3.4-1/png/png.c ****    png_colorspacerp colorspace, png_fixed_point gAMA, int from)
 2526              		.loc 1 1030 0
 2527 0006 64488B04 		movq	%fs:40, %rax
 2527      25280000 
 2527      00
 2528 000f 48894424 		movq	%rax, 24(%rsp)
 2528      18
 2529 0014 31C0     		xorl	%eax, %eax
 2530              	.LVL257:
1044:fltk-1.3.4-1/png/png.c ****       (png_muldiv(&gtest, colorspace->gamma, PNG_FP_1, gAMA) == 0  ||
 2531              		.loc 1 1044 0
 2532 0016 0FB702   		movzwl	(%rdx), %eax
 2533 0019 A801     		testb	$1, %al
 2534 001b 0F849F00 		je	.L329
 2534      0000
 2535              	.LBB322:
 2536              	.LBB323:
3247:fltk-1.3.4-1/png/png.c ****    {
 2537              		.loc 1 3247 0
 2538 0021 85C9     		testl	%ecx, %ecx
 2539 0023 4889FD   		movq	%rdi, %rbp
 2540              	.LVL258:
 2541 0026 7558     		jne	.L338
 2542              	.LVL259:
 2543              	.L325:
 2544              	.LBE323:
 2545              	.LBE322:
1054:fltk-1.3.4-1/png/png.c ****       {
 2546              		.loc 1 1054 0
 2547 0028 4183F802 		cmpl	$2, %r8d
 2548 002c 0F94C3   		sete	%bl
 2549 002f A820     		testb	$32, %al
 2550 0031 0F859900 		jne	.L333
 2550      0000
 2551 0037 84DB     		testb	%bl, %bl
 2552 0039 0F859100 		jne	.L333
 2552      0000
 2553              	.LBB325:
 2554              	.LBB326:
1064:fltk-1.3.4-1/png/png.c ****             PNG_CHUNK_WARNING);
 2555              		.loc 1 1064 0
 2556 003f 31D2     		xorl	%edx, %edx
 2557 0041 BE000000 		movl	$.LC28, %esi
 2557      00
 2558 0046 4889EF   		movq	%rbp, %rdi
 2559 0049 44894424 		movl	%r8d, 12(%rsp)
 2559      0C
 2560              	.LVL260:
 2561 004e E8000000 		call	png_chunk_report
 2561      00
 2562              	.LVL261:
1066:fltk-1.3.4-1/png/png.c ****       }
 2563              		.loc 1 1066 0
 2564 0053 448B4424 		movl	12(%rsp), %r8d
 2564      0C
 2565 0058 31C0     		xorl	%eax, %eax
 2566 005a 4183F801 		cmpl	$1, %r8d
 2567 005e 0F94C0   		sete	%al
 2568              	.LVL262:
 2569              	.L324:
 2570              	.LBE326:
 2571              	.LBE325:
1071:fltk-1.3.4-1/png/png.c **** 
 2572              		.loc 1 1071 0
 2573 0061 488B5424 		movq	24(%rsp), %rdx
 2573      18
 2574 0066 64483314 		xorq	%fs:40, %rdx
 2574      25280000 
 2574      00
 2575 006f 7579     		jne	.L339
 2576 0071 4883C428 		addq	$40, %rsp
 2577              		.cfi_remember_state
 2578              		.cfi_def_cfa_offset 24
 2579 0075 5B       		popq	%rbx
 2580              		.cfi_def_cfa_offset 16
 2581 0076 5D       		popq	%rbp
 2582              		.cfi_def_cfa_offset 8
 2583 0077 C3       		ret
 2584              	.LVL263:
 2585 0078 0F1F8400 		.p2align 4,,10
 2585      00000000 
 2586              		.p2align 3
 2587              	.L338:
 2588              		.cfi_restore_state
 2589              	.LBB327:
 2590              	.LBB324:
3249:fltk-1.3.4-1/png/png.c ****       {
 2591              		.loc 1 3249 0
 2592 0080 85F6     		testl	%esi, %esi
 2593 0082 750C     		jne	.L326
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 2594              		.loc 1 3251 0
 2595 0084 C7442414 		movl	$0, 20(%rsp)
 2595      00000000 
 2596              	.LVL264:
 2597 008c EB9A     		jmp	.L325
 2598              	.LVL265:
 2599 008e 6690     		.p2align 4,,10
 2600              		.p2align 3
 2601              	.L326:
 2602 0090 488D7C24 		leaq	20(%rsp), %rdi
 2602      14
 2603              	.LVL266:
 2604 0095 4889D3   		movq	%rdx, %rbx
 2605 0098 BAA08601 		movl	$100000, %edx
 2605      00
 2606 009d 44894424 		movl	%r8d, 12(%rsp)
 2606      0C
 2607 00a2 E8000000 		call	png_muldiv.part.9
 2607      00
 2608              	.LVL267:
 2609              	.LBE324:
 2610              	.LBE327:
1044:fltk-1.3.4-1/png/png.c ****       (png_muldiv(&gtest, colorspace->gamma, PNG_FP_1, gAMA) == 0  ||
 2611              		.loc 1 1044 0
 2612 00a7 85C0     		testl	%eax, %eax
 2613 00a9 448B4424 		movl	12(%rsp), %r8d
 2613      0C
 2614 00ae 743F     		je	.L328
1045:fltk-1.3.4-1/png/png.c ****       png_gamma_significant(gtest) != 0))
 2615              		.loc 1 1045 0
 2616 00b0 8B442414 		movl	20(%rsp), %eax
 2617 00b4 2D187301 		subl	$95000, %eax
 2617      00
 2618 00b9 3D102700 		cmpl	$10000, %eax
 2618      00
 2619 00be 772F     		ja	.L328
 2620              	.LVL268:
 2621              		.p2align 4,,10
 2622              		.p2align 3
 2623              	.L329:
1070:fltk-1.3.4-1/png/png.c **** }
 2624              		.loc 1 1070 0
 2625 00c0 B8010000 		movl	$1, %eax
 2625      00
 2626 00c5 EB9A     		jmp	.L324
 2627              	.LVL269:
 2628 00c7 660F1F84 		.p2align 4,,10
 2628      00000000 
 2628      00
 2629              		.p2align 3
 2630              	.L333:
1056:fltk-1.3.4-1/png/png.c ****             PNG_CHUNK_ERROR);
 2631              		.loc 1 1056 0
 2632 00d0 BA020000 		movl	$2, %edx
 2632      00
 2633 00d5 BE000000 		movl	$.LC27, %esi
 2633      00
 2634 00da 4889EF   		movq	%rbp, %rdi
 2635 00dd E8000000 		call	png_chunk_report
 2635      00
 2636              	.LVL270:
1059:fltk-1.3.4-1/png/png.c ****       }
 2637              		.loc 1 1059 0
 2638 00e2 0FB6C3   		movzbl	%bl, %eax
 2639 00e5 E977FFFF 		jmp	.L324
 2639      FF
 2640              	.LVL271:
 2641              	.L339:
1071:fltk-1.3.4-1/png/png.c **** 
 2642              		.loc 1 1071 0
 2643 00ea E8000000 		call	__stack_chk_fail
 2643      00
 2644              	.LVL272:
 2645              	.L328:
 2646 00ef 0FB703   		movzwl	(%rbx), %eax
 2647 00f2 E931FFFF 		jmp	.L325
 2647      FF
 2648              		.cfi_endproc
 2649              	.LFE147:
 2651              		.section	.text.unlikely.png_colorspace_check_gamma.isra.11
 2652              	.LCOLDE29:
 2653              		.section	.text.png_colorspace_check_gamma.isra.11
 2654              	.LHOTE29:
 2655              		.section	.text.unlikely.png_gamma_8bit_correct.part.14,"ax",@progbits
 2656              	.LCOLDB31:
 2657              		.section	.text.png_gamma_8bit_correct.part.14,"ax",@progbits
 2658              	.LHOTB31:
 2659              		.p2align 4,,15
 2661              	png_gamma_8bit_correct.part.14:
 2662              	.LFB150:
3752:fltk-1.3.4-1/png/png.c **** {
 2663              		.loc 1 3752 0
 2664              		.cfi_startproc
 2665              	.LVL273:
 2666              	.LBB328:
3781:fltk-1.3.4-1/png/png.c ****          return (png_byte)r;
 2667              		.loc 1 3781 0
 2668 0000 660FEFC0 		pxor	%xmm0, %xmm0
 2669              	.LBE328:
3752:fltk-1.3.4-1/png/png.c **** {
 2670              		.loc 1 3752 0
 2671 0004 4883EC08 		subq	$8, %rsp
 2672              		.cfi_def_cfa_offset 16
 2673              	.LBB329:
3781:fltk-1.3.4-1/png/png.c ****          return (png_byte)r;
 2674              		.loc 1 3781 0
 2675 0008 660FEFC9 		pxor	%xmm1, %xmm1
 2676 000c F20F2AC7 		cvtsi2sd	%edi, %xmm0
 2677 0010 F20F2ACE 		cvtsi2sd	%esi, %xmm1
 2678 0014 F20F5E05 		divsd	.LC30(%rip), %xmm0
 2678      00000000 
 2679 001c F20F590D 		mulsd	.LC7(%rip), %xmm1
 2679      00000000 
 2680 0024 E8000000 		call	pow
 2680      00
 2681              	.LVL274:
 2682 0029 F20F5905 		mulsd	.LC30(%rip), %xmm0
 2682      00000000 
 2683 0031 F20F5805 		addsd	.LC9(%rip), %xmm0
 2683      00000000 
 2684 0039 E8000000 		call	floor
 2684      00
 2685              	.LVL275:
 2686              	.LBE329:
3796:fltk-1.3.4-1/png/png.c **** 
 2687              		.loc 1 3796 0
 2688 003e 4883C408 		addq	$8, %rsp
 2689              		.cfi_def_cfa_offset 8
 2690 0042 F20F2CC0 		cvttsd2si	%xmm0, %eax
 2691 0046 C3       		ret
 2692              		.cfi_endproc
 2693              	.LFE150:
 2695              		.section	.text.unlikely.png_gamma_8bit_correct.part.14
 2696              	.LCOLDE31:
 2697              		.section	.text.png_gamma_8bit_correct.part.14
 2698              	.LHOTE31:
 2699              		.section	.text.unlikely.png_build_8bit_table,"ax",@progbits
 2700              	.LCOLDB32:
 2701              		.section	.text.png_build_8bit_table,"ax",@progbits
 2702              	.LHOTB32:
 2703              		.p2align 4,,15
 2705              	png_build_8bit_table:
 2706              	.LFB129:
4007:fltk-1.3.4-1/png/png.c ****    unsigned int i;
 2707              		.loc 1 4007 0
 2708              		.cfi_startproc
 2709              	.LVL276:
 2710 0000 4154     		pushq	%r12
 2711              		.cfi_def_cfa_offset 16
 2712              		.cfi_offset 12, -16
 2713 0002 55       		pushq	%rbp
 2714              		.cfi_def_cfa_offset 24
 2715              		.cfi_offset 6, -24
 2716 0003 4189D4   		movl	%edx, %r12d
 2717 0006 53       		pushq	%rbx
 2718              		.cfi_def_cfa_offset 32
 2719              		.cfi_offset 3, -32
4007:fltk-1.3.4-1/png/png.c ****    unsigned int i;
 2720              		.loc 1 4007 0
 2721 0007 4889F3   		movq	%rsi, %rbx
4009:fltk-1.3.4-1/png/png.c **** 
 2722              		.loc 1 4009 0
 2723 000a BE000100 		movl	$256, %esi
 2723      00
 2724              	.LVL277:
 2725 000f E8000000 		call	png_malloc
 2725      00
 2726              	.LVL278:
4011:fltk-1.3.4-1/png/png.c ****       for (i=0; i<256; i++)
 2727              		.loc 1 4011 0
 2728 0014 418D9424 		leal	-95000(%r12), %edx
 2728      E88CFEFF 
4009:fltk-1.3.4-1/png/png.c **** 
 2729              		.loc 1 4009 0
 2730 001c 488903   		movq	%rax, (%rbx)
 2731              	.LVL279:
4011:fltk-1.3.4-1/png/png.c ****       for (i=0; i<256; i++)
 2732              		.loc 1 4011 0
 2733 001f 81FA1027 		cmpl	$10000, %edx
 2733      0000
 2734 0025 7631     		jbe	.L343
 2735 0027 4889C5   		movq	%rax, %rbp
 2736 002a 31DB     		xorl	%ebx, %ebx
 2737              	.LVL280:
 2738 002c 0F1F4000 		.p2align 4,,10
 2739              		.p2align 3
 2740              	.L346:
 2741              	.LBB330:
 2742              	.LBB331:
3754:fltk-1.3.4-1/png/png.c ****    {
 2743              		.loc 1 3754 0 discriminator 3
 2744 0030 8D43FF   		leal	-1(%rbx), %eax
 2745 0033 3DFD0000 		cmpl	$253, %eax
 2745      00
 2746 0038 763B     		jbe	.L352
3795:fltk-1.3.4-1/png/png.c **** }
 2747              		.loc 1 3795 0
 2748 003a 89D8     		movl	%ebx, %eax
 2749              	.L345:
 2750              	.LVL281:
 2751              	.LBE331:
 2752              	.LBE330:
4012:fltk-1.3.4-1/png/png.c ****          table[i] = png_gamma_8bit_correct(i, gamma_val);
 2753              		.loc 1 4012 0
 2754 003c 83C301   		addl	$1, %ebx
 2755              	.LVL282:
4013:fltk-1.3.4-1/png/png.c **** 
 2756              		.loc 1 4013 0
 2757 003f 884500   		movb	%al, 0(%rbp)
 2758 0042 4883C501 		addq	$1, %rbp
4012:fltk-1.3.4-1/png/png.c ****          table[i] = png_gamma_8bit_correct(i, gamma_val);
 2759              		.loc 1 4012 0
 2760 0046 81FB0001 		cmpl	$256, %ebx
 2760      0000
 2761 004c 75E2     		jne	.L346
4018:fltk-1.3.4-1/png/png.c **** 
 2762              		.loc 1 4018 0
 2763 004e 5B       		popq	%rbx
 2764              		.cfi_remember_state
 2765              		.cfi_def_cfa_offset 24
 2766              	.LVL283:
 2767 004f 5D       		popq	%rbp
 2768              		.cfi_def_cfa_offset 16
 2769 0050 415C     		popq	%r12
 2770              		.cfi_def_cfa_offset 8
 2771              	.LVL284:
 2772 0052 C3       		ret
 2773              	.LVL285:
 2774              		.p2align 4,,10
 2775 0053 0F1F4400 		.p2align 3
 2775      00
 2776              	.L343:
 2777              		.cfi_restore_state
 2778 0058 31D2     		xorl	%edx, %edx
 2779 005a 660F1F44 		.p2align 4,,10
 2779      0000
 2780              		.p2align 3
 2781              	.L347:
 2782              	.LVL286:
4017:fltk-1.3.4-1/png/png.c **** }
 2783              		.loc 1 4017 0 discriminator 3
 2784 0060 881410   		movb	%dl, (%rax,%rdx)
 2785              	.LVL287:
 2786 0063 4883C201 		addq	$1, %rdx
 2787              	.LVL288:
4016:fltk-1.3.4-1/png/png.c ****          table[i] = (png_byte)i;
 2788              		.loc 1 4016 0 discriminator 3
 2789 0067 4881FA00 		cmpq	$256, %rdx
 2789      010000
 2790 006e 75F0     		jne	.L347
4018:fltk-1.3.4-1/png/png.c **** 
 2791              		.loc 1 4018 0
 2792 0070 5B       		popq	%rbx
 2793              		.cfi_remember_state
 2794              		.cfi_def_cfa_offset 24
 2795              	.LVL289:
 2796 0071 5D       		popq	%rbp
 2797              		.cfi_def_cfa_offset 16
 2798 0072 415C     		popq	%r12
 2799              		.cfi_def_cfa_offset 8
 2800              	.LVL290:
 2801 0074 C3       		ret
 2802              	.LVL291:
 2803              	.L352:
 2804              		.cfi_restore_state
 2805              	.LBB333:
 2806              	.LBB332:
 2807 0075 4489E6   		movl	%r12d, %esi
 2808 0078 89DF     		movl	%ebx, %edi
 2809 007a E8000000 		call	png_gamma_8bit_correct.part.14
 2809      00
 2810              	.LVL292:
 2811 007f EBBB     		jmp	.L345
 2812              	.LBE332:
 2813              	.LBE333:
 2814              		.cfi_endproc
 2815              	.LFE129:
 2817              		.section	.text.unlikely.png_build_8bit_table
 2818              	.LCOLDE32:
 2819              		.section	.text.png_build_8bit_table
 2820              	.LHOTE32:
 2821              		.section	.text.unlikely.png_gamma_16bit_correct.part.15,"ax",@progbits
 2822              	.LCOLDB33:
 2823              		.section	.text.png_gamma_16bit_correct.part.15,"ax",@progbits
 2824              	.LHOTB33:
 2825              		.p2align 4,,15
 2827              	png_gamma_16bit_correct.part.15:
 2828              	.LFB151:
3800:fltk-1.3.4-1/png/png.c **** {
 2829              		.loc 1 3800 0
 2830              		.cfi_startproc
 2831              	.LVL293:
 2832              	.LBB334:
3810:fltk-1.3.4-1/png/png.c ****                      gamma_val*.00001)+.5);
 2833              		.loc 1 3810 0
 2834 0000 660FEFC0 		pxor	%xmm0, %xmm0
 2835              	.LBE334:
3800:fltk-1.3.4-1/png/png.c **** {
 2836              		.loc 1 3800 0
 2837 0004 4883EC08 		subq	$8, %rsp
 2838              		.cfi_def_cfa_offset 16
 2839              	.LBB335:
3810:fltk-1.3.4-1/png/png.c ****                      gamma_val*.00001)+.5);
 2840              		.loc 1 3810 0
 2841 0008 660FEFC9 		pxor	%xmm1, %xmm1
 2842 000c F20F2AC7 		cvtsi2sd	%edi, %xmm0
 2843 0010 F20F2ACE 		cvtsi2sd	%esi, %xmm1
 2844 0014 F20F5E05 		divsd	.LC8(%rip), %xmm0
 2844      00000000 
 2845 001c F20F590D 		mulsd	.LC7(%rip), %xmm1
 2845      00000000 
 2846 0024 E8000000 		call	pow
 2846      00
 2847              	.LVL294:
 2848 0029 F20F5905 		mulsd	.LC8(%rip), %xmm0
 2848      00000000 
 2849 0031 F20F5805 		addsd	.LC9(%rip), %xmm0
 2849      00000000 
 2850 0039 E8000000 		call	floor
 2850      00
 2851              	.LVL295:
 2852              	.LBE335:
3826:fltk-1.3.4-1/png/png.c **** #endif /* 16BIT */
 2853              		.loc 1 3826 0
 2854 003e 4883C408 		addq	$8, %rsp
 2855              		.cfi_def_cfa_offset 8
 2856 0042 F20F2CC0 		cvttsd2si	%xmm0, %eax
 2857 0046 C3       		ret
 2858              		.cfi_endproc
 2859              	.LFE151:
 2861              		.section	.text.unlikely.png_gamma_16bit_correct.part.15
 2862              	.LCOLDE33:
 2863              		.section	.text.png_gamma_16bit_correct.part.15
 2864              	.LHOTE33:
 2865              		.section	.rodata.str1.8
 2866 0073 00000000 		.align 8
 2866      00
 2867              	.LC34:
 2868 0078 546F6F20 		.string	"Too many bytes for PNG signature"
 2868      6D616E79 
 2868      20627974 
 2868      65732066 
 2868      6F722050 
 2869              		.section	.text.unlikely.png_set_sig_bytes,"ax",@progbits
 2870              	.LCOLDB35:
 2871              		.section	.text.png_set_sig_bytes,"ax",@progbits
 2872              	.LHOTB35:
 2873              		.p2align 4,,15
 2874              		.globl	png_set_sig_bytes
 2876              	png_set_sig_bytes:
 2877              	.LFB56:
  28:fltk-1.3.4-1/png/png.c ****    png_debug(1, "in png_set_sig_bytes");
 2878              		.loc 1 28 0
 2879              		.cfi_startproc
 2880              	.LVL296:
  31:fltk-1.3.4-1/png/png.c ****       return;
 2881              		.loc 1 31 0
 2882 0000 4885FF   		testq	%rdi, %rdi
 2883 0003 7416     		je	.L364
  34:fltk-1.3.4-1/png/png.c ****       png_error(png_ptr, "Too many bytes for PNG signature");
 2884              		.loc 1 34 0
 2885 0005 83FE08   		cmpl	$8, %esi
 2886 0008 7F13     		jg	.L365
  37:fltk-1.3.4-1/png/png.c **** }
 2887              		.loc 1 37 0
 2888 000a 85F6     		testl	%esi, %esi
 2889 000c B8000000 		movl	$0, %eax
 2889      00
 2890 0011 0F48F0   		cmovs	%eax, %esi
 2891              	.LVL297:
 2892 0014 4088B77D 		movb	%sil, 637(%rdi)
 2892      020000
 2893              	.L364:
 2894 001b F3C3     		rep ret
 2895              	.LVL298:
 2896              	.L365:
  28:fltk-1.3.4-1/png/png.c ****    png_debug(1, "in png_set_sig_bytes");
 2897              		.loc 1 28 0
 2898 001d 50       		pushq	%rax
 2899              		.cfi_def_cfa_offset 16
  35:fltk-1.3.4-1/png/png.c **** 
 2900              		.loc 1 35 0
 2901 001e BE000000 		movl	$.LC34, %esi
 2901      00
 2902              	.LVL299:
 2903 0023 E8000000 		call	png_error
 2903      00
 2904              	.LVL300:
 2905              		.cfi_endproc
 2906              	.LFE56:
 2908              		.section	.text.unlikely.png_set_sig_bytes
 2909              	.LCOLDE35:
 2910              		.section	.text.png_set_sig_bytes
 2911              	.LHOTE35:
 2912              		.section	.text.unlikely.png_sig_cmp,"ax",@progbits
 2913              	.LCOLDB36:
 2914              		.section	.text.png_sig_cmp,"ax",@progbits
 2915              	.LHOTB36:
 2916              		.p2align 4,,15
 2917              		.globl	png_sig_cmp
 2919              	png_sig_cmp:
 2920              	.LFB57:
  50:fltk-1.3.4-1/png/png.c ****    png_byte png_signature[8] = {137, 80, 78, 71, 13, 10, 26, 10};
 2921              		.loc 1 50 0
 2922              		.cfi_startproc
 2923              	.LVL301:
 2924 0000 4883EC18 		subq	$24, %rsp
 2925              		.cfi_def_cfa_offset 32
  50:fltk-1.3.4-1/png/png.c ****    png_byte png_signature[8] = {137, 80, 78, 71, 13, 10, 26, 10};
 2926              		.loc 1 50 0
 2927 0004 4889F0   		movq	%rsi, %rax
 2928 0007 64488B0C 		movq	%fs:40, %rcx
 2928      25280000 
 2928      00
 2929 0010 48894C24 		movq	%rcx, 8(%rsp)
 2929      08
 2930 0015 31C9     		xorl	%ecx, %ecx
  53:fltk-1.3.4-1/png/png.c ****       num_to_check = 8;
 2931              		.loc 1 53 0
 2932 0017 4883FA08 		cmpq	$8, %rdx
  51:fltk-1.3.4-1/png/png.c **** 
 2933              		.loc 1 51 0
 2934 001b C6042489 		movb	$-119, (%rsp)
 2935 001f C6442401 		movb	$80, 1(%rsp)
 2935      50
 2936 0024 C6442402 		movb	$78, 2(%rsp)
 2936      4E
 2937 0029 C6442403 		movb	$71, 3(%rsp)
 2937      47
 2938 002e C6442404 		movb	$13, 4(%rsp)
 2938      0D
 2939 0033 C6442405 		movb	$10, 5(%rsp)
 2939      0A
 2940 0038 C6442406 		movb	$26, 6(%rsp)
 2940      1A
 2941 003d C6442407 		movb	$10, 7(%rsp)
 2941      0A
  53:fltk-1.3.4-1/png/png.c ****       num_to_check = 8;
 2942              		.loc 1 53 0
 2943 0042 773C     		ja	.L371
  56:fltk-1.3.4-1/png/png.c ****       return (-1);
 2944              		.loc 1 56 0
 2945 0044 4885D2   		testq	%rdx, %rdx
 2946 0047 7457     		je	.L373
 2947              	.LVL302:
 2948              	.L367:
  59:fltk-1.3.4-1/png/png.c ****       return (-1);
 2949              		.loc 1 59 0
 2950 0049 4883F807 		cmpq	$7, %rax
 2951 004d 7751     		ja	.L373
  62:fltk-1.3.4-1/png/png.c ****       num_to_check = 8 - start;
 2952              		.loc 1 62 0
 2953 004f 488D0C02 		leaq	(%rdx,%rax), %rcx
 2954 0053 4883F908 		cmpq	$8, %rcx
 2955 0057 7737     		ja	.L375
 2956              	.L369:
  65:fltk-1.3.4-1/png/png.c **** }
 2957              		.loc 1 65 0
 2958 0059 488D3404 		leaq	(%rsp,%rax), %rsi
 2959              	.LVL303:
 2960 005d 4801C7   		addq	%rax, %rdi
 2961              	.LVL304:
 2962 0060 E8000000 		call	memcmp
 2962      00
 2963              	.LVL305:
 2964              	.L368:
  66:fltk-1.3.4-1/png/png.c **** 
 2965              		.loc 1 66 0
 2966 0065 488B4C24 		movq	8(%rsp), %rcx
 2966      08
 2967 006a 6448330C 		xorq	%fs:40, %rcx
 2967      25280000 
 2967      00
 2968 0073 7532     		jne	.L376
 2969 0075 4883C418 		addq	$24, %rsp
 2970              		.cfi_remember_state
 2971              		.cfi_def_cfa_offset 8
 2972 0079 C3       		ret
 2973              	.LVL306:
 2974 007a 660F1F44 		.p2align 4,,10
 2974      0000
 2975              		.p2align 3
 2976              	.L371:
 2977              		.cfi_restore_state
  54:fltk-1.3.4-1/png/png.c **** 
 2978              		.loc 1 54 0
 2979 0080 BA080000 		movl	$8, %edx
 2979      00
 2980              	.LVL307:
 2981 0085 EBC2     		jmp	.L367
 2982              	.LVL308:
 2983 0087 660F1F84 		.p2align 4,,10
 2983      00000000 
 2983      00
 2984              		.p2align 3
 2985              	.L375:
  63:fltk-1.3.4-1/png/png.c **** 
 2986              		.loc 1 63 0
 2987 0090 BA080000 		movl	$8, %edx
 2987      00
 2988              	.LVL309:
 2989 0095 4829C2   		subq	%rax, %rdx
 2990              	.LVL310:
 2991 0098 EBBF     		jmp	.L369
 2992 009a 660F1F44 		.p2align 4,,10
 2992      0000
 2993              		.p2align 3
 2994              	.L373:
  57:fltk-1.3.4-1/png/png.c **** 
 2995              		.loc 1 57 0
 2996 00a0 B8FFFFFF 		movl	$-1, %eax
 2996      FF
 2997              	.LVL311:
 2998 00a5 EBBE     		jmp	.L368
 2999              	.LVL312:
 3000              	.L376:
  66:fltk-1.3.4-1/png/png.c **** 
 3001              		.loc 1 66 0
 3002 00a7 E8000000 		call	__stack_chk_fail
 3002      00
 3003              	.LVL313:
 3004              		.cfi_endproc
 3005              	.LFE57:
 3007              		.section	.text.unlikely.png_sig_cmp
 3008              	.LCOLDE36:
 3009              		.section	.text.png_sig_cmp
 3010              	.LHOTE36:
 3011              		.section	.text.unlikely.png_reset_crc,"ax",@progbits
 3012              	.LCOLDB37:
 3013              		.section	.text.png_reset_crc,"ax",@progbits
 3014              	.LHOTB37:
 3015              		.p2align 4,,15
 3016              		.globl	png_reset_crc
 3018              	png_reset_crc:
 3019              	.LFB60:
 103:fltk-1.3.4-1/png/png.c ****    /* The cast is safe because the crc is a 32 bit value. */
 3020              		.loc 1 103 0
 3021              		.cfi_startproc
 3022              	.LVL314:
 3023 0000 53       		pushq	%rbx
 3024              		.cfi_def_cfa_offset 16
 3025              		.cfi_offset 3, -16
 105:fltk-1.3.4-1/png/png.c **** }
 3026              		.loc 1 105 0
 3027 0001 31D2     		xorl	%edx, %edx
 103:fltk-1.3.4-1/png/png.c ****    /* The cast is safe because the crc is a 32 bit value. */
 3028              		.loc 1 103 0
 3029 0003 4889FB   		movq	%rdi, %rbx
 105:fltk-1.3.4-1/png/png.c **** }
 3030              		.loc 1 105 0
 3031 0006 31F6     		xorl	%esi, %esi
 3032 0008 31FF     		xorl	%edi, %edi
 3033              	.LVL315:
 3034 000a E8000000 		call	crc32
 3034      00
 3035              	.LVL316:
 3036 000f 89835C02 		movl	%eax, 604(%rbx)
 3036      0000
 106:fltk-1.3.4-1/png/png.c **** 
 3037              		.loc 1 106 0
 3038 0015 5B       		popq	%rbx
 3039              		.cfi_def_cfa_offset 8
 3040              	.LVL317:
 3041 0016 C3       		ret
 3042              		.cfi_endproc
 3043              	.LFE60:
 3045              		.section	.text.unlikely.png_reset_crc
 3046              	.LCOLDE37:
 3047              		.section	.text.png_reset_crc
 3048              	.LHOTE37:
 3049              		.section	.text.unlikely.png_calculate_crc,"ax",@progbits
 3050              	.LCOLDB38:
 3051              		.section	.text.png_calculate_crc,"ax",@progbits
 3052              	.LHOTB38:
 3053              		.p2align 4,,15
 3054              		.globl	png_calculate_crc
 3056              	png_calculate_crc:
 3057              	.LFB61:
 115:fltk-1.3.4-1/png/png.c ****    int need_crc = 1;
 3058              		.loc 1 115 0
 3059              		.cfi_startproc
 3060              	.LVL318:
 3061 0000 4155     		pushq	%r13
 3062              		.cfi_def_cfa_offset 16
 3063              		.cfi_offset 13, -16
 3064 0002 4154     		pushq	%r12
 3065              		.cfi_def_cfa_offset 24
 3066              		.cfi_offset 12, -24
 3067 0004 4989FD   		movq	%rdi, %r13
 3068 0007 55       		pushq	%rbp
 3069              		.cfi_def_cfa_offset 32
 3070              		.cfi_offset 6, -32
 3071 0008 53       		pushq	%rbx
 3072              		.cfi_def_cfa_offset 40
 3073              		.cfi_offset 3, -40
 3074 0009 4989F4   		movq	%rsi, %r12
 3075 000c 4889D3   		movq	%rdx, %rbx
 3076 000f 4883EC08 		subq	$8, %rsp
 3077              		.cfi_def_cfa_offset 48
 118:fltk-1.3.4-1/png/png.c ****    {
 3078              		.loc 1 118 0
 3079 0013 F6871B02 		testb	$32, 539(%rdi)
 3079      000020
 3080 001a 7464     		je	.L380
 120:fltk-1.3.4-1/png/png.c ****           (PNG_FLAG_CRC_ANCILLARY_USE | PNG_FLAG_CRC_ANCILLARY_NOWARN))
 3081              		.loc 1 120 0
 3082 001c 8B873001 		movl	304(%rdi), %eax
 3082      0000
 3083 0022 25000300 		andl	$768, %eax
 3083      00
 3084 0027 3D000300 		cmpl	$768, %eax
 3084      00
 3085 002c 743E     		je	.L379
 3086              	.L382:
 136:fltk-1.3.4-1/png/png.c ****    {
 3087              		.loc 1 136 0
 3088 002e 4885DB   		testq	%rbx, %rbx
 3089 0031 7439     		je	.L379
 3090              	.LBB336:
 138:fltk-1.3.4-1/png/png.c **** 
 3091              		.loc 1 138 0
 3092 0033 418B855C 		movl	604(%r13), %eax
 3092      020000
 3093              	.LVL319:
 3094 003a 660F1F44 		.p2align 4,,10
 3094      0000
 3095              		.p2align 3
 3096              	.L384:
 3097              	.LBB337:
 143:fltk-1.3.4-1/png/png.c ****             safe_length = (uInt)-1; /* evil, but safe */
 3098              		.loc 1 143 0
 3099 0040 85DB     		testl	%ebx, %ebx
 142:fltk-1.3.4-1/png/png.c ****          if (safe_length == 0)
 3100              		.loc 1 142 0
 3101 0042 89DA     		movl	%ebx, %edx
 3102              	.LVL320:
 3103 0044 89DD     		movl	%ebx, %ebp
 143:fltk-1.3.4-1/png/png.c ****             safe_length = (uInt)-1; /* evil, but safe */
 3104              		.loc 1 143 0
 3105 0046 750A     		jne	.L383
 3106 0048 BDFFFFFF 		movl	$4294967295, %ebp
 3106      FF
 144:fltk-1.3.4-1/png/png.c **** 
 3107              		.loc 1 144 0
 3108 004d BAFFFFFF 		movl	$-1, %edx
 3108      FF
 3109              	.LVL321:
 3110              	.L383:
 146:fltk-1.3.4-1/png/png.c **** 
 3111              		.loc 1 146 0
 3112 0052 4C89E6   		movq	%r12, %rsi
 3113 0055 4889C7   		movq	%rax, %rdi
 152:fltk-1.3.4-1/png/png.c ****          length -= safe_length;
 3114              		.loc 1 152 0
 3115 0058 4901EC   		addq	%rbp, %r12
 3116              	.LVL322:
 146:fltk-1.3.4-1/png/png.c **** 
 3117              		.loc 1 146 0
 3118 005b E8000000 		call	crc32
 3118      00
 3119              	.LVL323:
 3120              	.LBE337:
 155:fltk-1.3.4-1/png/png.c **** 
 3121              		.loc 1 155 0
 3122 0060 4829EB   		subq	%rbp, %rbx
 3123              	.LVL324:
 3124 0063 75DB     		jne	.L384
 158:fltk-1.3.4-1/png/png.c ****    }
 3125              		.loc 1 158 0
 3126 0065 4189855C 		movl	%eax, 604(%r13)
 3126      020000
 3127              	.LVL325:
 3128              	.L379:
 3129              	.LBE336:
 160:fltk-1.3.4-1/png/png.c **** 
 3130              		.loc 1 160 0
 3131 006c 4883C408 		addq	$8, %rsp
 3132              		.cfi_remember_state
 3133              		.cfi_def_cfa_offset 40
 3134 0070 5B       		popq	%rbx
 3135              		.cfi_def_cfa_offset 32
 3136              	.LVL326:
 3137 0071 5D       		popq	%rbp
 3138              		.cfi_def_cfa_offset 24
 3139 0072 415C     		popq	%r12
 3140              		.cfi_def_cfa_offset 16
 3141              	.LVL327:
 3142 0074 415D     		popq	%r13
 3143              		.cfi_def_cfa_offset 8
 3144              	.LVL328:
 3145 0076 C3       		ret
 3146              	.LVL329:
 3147 0077 660F1F84 		.p2align 4,,10
 3147      00000000 
 3147      00
 3148              		.p2align 3
 3149              	.L380:
 3150              		.cfi_restore_state
 127:fltk-1.3.4-1/png/png.c ****          need_crc = 0;
 3151              		.loc 1 127 0
 3152 0080 F6873101 		testb	$8, 305(%rdi)
 3152      000008
 3153 0087 74A5     		je	.L382
 160:fltk-1.3.4-1/png/png.c **** 
 3154              		.loc 1 160 0
 3155 0089 4883C408 		addq	$8, %rsp
 3156              		.cfi_def_cfa_offset 40
 3157 008d 5B       		popq	%rbx
 3158              		.cfi_def_cfa_offset 32
 3159 008e 5D       		popq	%rbp
 3160              		.cfi_def_cfa_offset 24
 3161 008f 415C     		popq	%r12
 3162              		.cfi_def_cfa_offset 16
 3163 0091 415D     		popq	%r13
 3164              		.cfi_def_cfa_offset 8
 3165 0093 C3       		ret
 3166              		.cfi_endproc
 3167              	.LFE61:
 3169              		.section	.text.unlikely.png_calculate_crc
 3170              	.LCOLDE38:
 3171              		.section	.text.png_calculate_crc
 3172              	.LHOTE38:
 3173              		.section	.rodata.str1.8
 3174 0099 00000000 		.align 8
 3174      000000
 3175              	.LC40:
 3176 00a0 4170706C 		.string	"Application built with libpng-"
 3176      69636174 
 3176      696F6E20 
 3176      6275696C 
 3176      74207769 
 3177              		.section	.rodata.str1.1
 3178              	.LC41:
 3179 002e 20627574 		.string	" but running with "
 3179      2072756E 
 3179      6E696E67 
 3179      20776974 
 3179      682000
 3180              	.LC39:
 3181 0041 312E362E 		.string	"1.6.16"
 3181      313600
 3182              		.section	.text.unlikely.png_user_version_check,"ax",@progbits
 3183              	.LCOLDB42:
 3184              		.section	.text.png_user_version_check,"ax",@progbits
 3185              	.LHOTB42:
 3186              		.p2align 4,,15
 3187              		.globl	png_user_version_check
 3189              	png_user_version_check:
 3190              	.LFB62:
 167:fltk-1.3.4-1/png/png.c ****      /* Libpng versions 1.0.0 and later are binary compatible if the version
 3191              		.loc 1 167 0
 3192              		.cfi_startproc
 3193              	.LVL330:
 3194 0000 55       		pushq	%rbp
 3195              		.cfi_def_cfa_offset 16
 3196              		.cfi_offset 6, -16
 3197 0001 53       		pushq	%rbx
 3198              		.cfi_def_cfa_offset 24
 3199              		.cfi_offset 3, -24
 3200 0002 4889FD   		movq	%rdi, %rbp
 3201 0005 4889F3   		movq	%rsi, %rbx
 3202 0008 4881EC98 		subq	$152, %rsp
 3202      000000
 3203              		.cfi_def_cfa_offset 176
 167:fltk-1.3.4-1/png/png.c ****      /* Libpng versions 1.0.0 and later are binary compatible if the version
 3204              		.loc 1 167 0
 3205 000f 64488B04 		movq	%fs:40, %rax
 3205      25280000 
 3205      00
 3206 0018 48898424 		movq	%rax, 136(%rsp)
 3206      88000000 
 3207 0020 31C0     		xorl	%eax, %eax
 173:fltk-1.3.4-1/png/png.c ****    {
 3208              		.loc 1 173 0
 3209 0022 4885F6   		testq	%rsi, %rsi
 3210 0025 8BBF3001 		movl	304(%rdi), %edi
 3210      0000
 3211              	.LVL331:
 3212 002b 0F84D700 		je	.L396
 3212      0000
 3213 0031 31F6     		xorl	%esi, %esi
 3214              	.LVL332:
 3215 0033 EB08     		jmp	.L399
 3216              	.LVL333:
 3217              		.p2align 4,,10
 3218 0035 0F1F00   		.p2align 3
 3219              	.L412:
 3220              	.LBB343:
 185:fltk-1.3.4-1/png/png.c ****             PNG_LIBPNG_VER_STRING[i] != 0);
 3221              		.loc 1 185 0
 3222 0038 83FE01   		cmpl	$1, %esi
 3223 003b 7F40     		jg	.L401
 3224              	.LVL334:
 3225              	.L399:
 181:fltk-1.3.4-1/png/png.c ****             png_ptr->flags |= PNG_FLAG_LIBRARY_MISMATCH;
 3226              		.loc 1 181 0
 3227 003d 4863D0   		movslq	%eax, %rdx
 3228 0040 0FB69200 		movzbl	.LC39(%rdx), %edx
 3228      000000
 3229 0047 381403   		cmpb	%dl, (%rbx,%rax)
 3230 004a 89D1     		movl	%edx, %ecx
 3231 004c 7410     		je	.L397
 182:fltk-1.3.4-1/png/png.c ****          if (user_png_ver[i] == '.')
 3232              		.loc 1 182 0
 3233 004e 81CF0000 		orl	$131072, %edi
 3233      0200
 3234 0054 89BD3001 		movl	%edi, 304(%rbp)
 3234      0000
 3235 005a 0FB60C03 		movzbl	(%rbx,%rax), %ecx
 3236              	.L397:
 184:fltk-1.3.4-1/png/png.c ****       } while (found_dots < 2 && user_png_ver[i] != 0 &&
 3237              		.loc 1 184 0
 3238 005e 4531C0   		xorl	%r8d, %r8d
 3239 0061 80F92E   		cmpb	$46, %cl
 3240 0064 410F94C0 		sete	%r8b
 3241 0068 4883C001 		addq	$1, %rax
 3242              	.LVL335:
 3243 006c 4401C6   		addl	%r8d, %esi
 3244              	.LVL336:
 185:fltk-1.3.4-1/png/png.c ****             PNG_LIBPNG_VER_STRING[i] != 0);
 3245              		.loc 1 185 0
 3246 006f 84C9     		testb	%cl, %cl
 3247 0071 0F95C1   		setne	%cl
 3248 0074 84D2     		testb	%dl, %dl
 3249 0076 0F95C2   		setne	%dl
 3250 0079 84D1     		testb	%dl, %cl
 3251 007b 75BB     		jne	.L412
 3252              	.LVL337:
 3253              	.L401:
 3254              	.LBE343:
 192:fltk-1.3.4-1/png/png.c ****    {
 3255              		.loc 1 192 0
 3256 007d 81E70000 		andl	$131072, %edi
 3256      0200
 216:fltk-1.3.4-1/png/png.c **** }
 3257              		.loc 1 216 0
 3258 0083 B8010000 		movl	$1, %eax
 3258      00
 192:fltk-1.3.4-1/png/png.c ****    {
 3259              		.loc 1 192 0
 3260 0088 745E     		je	.L402
 3261              	.LVL338:
 3262              	.LBB344:
 3263              	.LBB345:
 198:fltk-1.3.4-1/png/png.c ****           "Application built with libpng-");
 3264              		.loc 1 198 0
 3265 008a B9000000 		movl	$.LC40, %ecx
 3265      00
 3266 008f 31D2     		xorl	%edx, %edx
 3267 0091 BE800000 		movl	$128, %esi
 3267      00
 3268 0096 4889E7   		movq	%rsp, %rdi
 3269 0099 E8000000 		call	png_safecat
 3269      00
 3270              	.LVL339:
 200:fltk-1.3.4-1/png/png.c ****       pos = png_safecat(m, (sizeof m), pos, " but running with ");
 3271              		.loc 1 200 0
 3272 009e 4889D9   		movq	%rbx, %rcx
 3273 00a1 4889C2   		movq	%rax, %rdx
 3274 00a4 BE800000 		movl	$128, %esi
 3274      00
 3275 00a9 4889E7   		movq	%rsp, %rdi
 3276 00ac E8000000 		call	png_safecat
 3276      00
 3277              	.LVL340:
 201:fltk-1.3.4-1/png/png.c ****       pos = png_safecat(m, (sizeof m), pos, PNG_LIBPNG_VER_STRING);
 3278              		.loc 1 201 0
 3279 00b1 B9000000 		movl	$.LC41, %ecx
 3279      00
 3280 00b6 4889C2   		movq	%rax, %rdx
 3281 00b9 BE800000 		movl	$128, %esi
 3281      00
 3282 00be 4889E7   		movq	%rsp, %rdi
 3283 00c1 E8000000 		call	png_safecat
 3283      00
 3284              	.LVL341:
 202:fltk-1.3.4-1/png/png.c ****       PNG_UNUSED(pos)
 3285              		.loc 1 202 0
 3286 00c6 B9000000 		movl	$.LC39, %ecx
 3286      00
 3287 00cb 4889C2   		movq	%rax, %rdx
 3288 00ce BE800000 		movl	$128, %esi
 3288      00
 3289 00d3 4889E7   		movq	%rsp, %rdi
 3290 00d6 E8000000 		call	png_safecat
 3290      00
 3291              	.LVL342:
 205:fltk-1.3.4-1/png/png.c **** #endif
 3292              		.loc 1 205 0
 3293 00db 4889E6   		movq	%rsp, %rsi
 3294 00de 4889EF   		movq	%rbp, %rdi
 3295 00e1 E8000000 		call	png_warning
 3295      00
 3296              	.LVL343:
 3297 00e6 31C0     		xorl	%eax, %eax
 3298              	.L402:
 3299              	.LBE345:
 3300              	.LBE344:
 217:fltk-1.3.4-1/png/png.c **** 
 3301              		.loc 1 217 0 discriminator 1
 3302 00e8 488BBC24 		movq	136(%rsp), %rdi
 3302      88000000 
 3303 00f0 6448333C 		xorq	%fs:40, %rdi
 3303      25280000 
 3303      00
 3304 00f9 751E     		jne	.L413
 217:fltk-1.3.4-1/png/png.c **** 
 3305              		.loc 1 217 0 is_stmt 0
 3306 00fb 4881C498 		addq	$152, %rsp
 3306      000000
 3307              		.cfi_remember_state
 3308              		.cfi_def_cfa_offset 24
 3309 0102 5B       		popq	%rbx
 3310              		.cfi_def_cfa_offset 16
 3311              	.LVL344:
 3312 0103 5D       		popq	%rbp
 3313              		.cfi_def_cfa_offset 8
 3314              	.LVL345:
 3315 0104 C3       		ret
 3316              	.LVL346:
 3317              		.p2align 4,,10
 3318 0105 0F1F00   		.p2align 3
 3319              	.L396:
 3320              		.cfi_restore_state
 190:fltk-1.3.4-1/png/png.c **** 
 3321              		.loc 1 190 0 is_stmt 1
 3322 0108 81CF0000 		orl	$131072, %edi
 3322      0200
 3323 010e 89BD3001 		movl	%edi, 304(%rbp)
 3323      0000
 3324 0114 E964FFFF 		jmp	.L401
 3324      FF
 3325              	.L413:
 217:fltk-1.3.4-1/png/png.c **** 
 3326              		.loc 1 217 0
 3327 0119 E8000000 		call	__stack_chk_fail
 3327      00
 3328              	.LVL347:
 3329              		.cfi_endproc
 3330              	.LFE62:
 3332              		.section	.text.unlikely.png_user_version_check
 3333              	.LCOLDE42:
 3334              		.section	.text.png_user_version_check
 3335              	.LHOTE42:
 3336              		.section	.text.unlikely.png_create_png_struct,"ax",@progbits
 3337              	.LCOLDB43:
 3338              		.section	.text.png_create_png_struct,"ax",@progbits
 3339              	.LHOTB43:
 3340              		.p2align 4,,15
 3341              		.globl	png_create_png_struct
 3343              	png_create_png_struct:
 3344              	.LFB63:
 226:fltk-1.3.4-1/png/png.c ****    png_struct create_struct;
 3345              		.loc 1 226 0
 3346              		.cfi_startproc
 3347              	.LVL348:
 3348 0000 4155     		pushq	%r13
 3349              		.cfi_def_cfa_offset 16
 3350              		.cfi_offset 13, -16
 3351 0002 4154     		pushq	%r12
 3352              		.cfi_def_cfa_offset 24
 3353              		.cfi_offset 12, -24
 3354 0004 4989CD   		movq	%rcx, %r13
 3355 0007 55       		pushq	%rbp
 3356              		.cfi_def_cfa_offset 32
 3357              		.cfi_offset 6, -32
 3358 0008 53       		pushq	%rbx
 3359              		.cfi_def_cfa_offset 40
 3360              		.cfi_offset 3, -40
 3361              	.LBB346:
 3362              	.LBB347:
 3363              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string3.h"
   1:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* Copyright (C) 2004-2016 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string3.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string3.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string3.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string3.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string3.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string3.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string3.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string3.h ****    <http://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef _STRING_H
  19:/usr/include/x86_64-linux-gnu/bits/string3.h **** # error "Never use <bits/string3.h> directly; include <string.h> instead."
  20:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  21:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  22:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  23:/usr/include/x86_64-linux-gnu/bits/string3.h **** __warndecl (__warn_memset_zero_len,
  24:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  25:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  26:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  27:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef __cplusplus
  28:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* XXX This is temporarily.  We should not redefine any of the symbols
  29:/usr/include/x86_64-linux-gnu/bits/string3.h ****    and instead integrate the error checking into the original
  30:/usr/include/x86_64-linux-gnu/bits/string3.h ****    definitions.  */
  31:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memcpy
  32:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memmove
  33:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memset
  34:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcat
  35:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcpy
  36:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncat
  37:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncpy
  38:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_GNU
  39:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef mempcpy
  40:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef stpcpy
  41:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  42:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_MISC
  43:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bcopy
  44:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bzero
  45:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  46:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  47:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  48:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  49:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  50:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  51:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	       size_t __len))
  52:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  53:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  54:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  55:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  56:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  57:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memmove (void *__dest, const void *__src, size_t __len))
  58:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  59:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  60:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  61:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  62:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifdef __USE_GNU
  63:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  64:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
  65:/usr/include/x86_64-linux-gnu/bits/string3.h **** 		size_t __len))
  66:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  67:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
  68:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  69:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  70:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  71:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  72:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* The first two tests here help to catch a somewhat common problem
  73:/usr/include/x86_64-linux-gnu/bits/string3.h ****    where the second and third parameter are transposed.  This is
  74:/usr/include/x86_64-linux-gnu/bits/string3.h ****    especially problematic if the intended fill value is zero.  In this
  75:/usr/include/x86_64-linux-gnu/bits/string3.h ****    case no work is done at all.  We detect these problems by referring
  76:/usr/include/x86_64-linux-gnu/bits/string3.h ****    non-existing functions.  */
  77:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  78:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memset (void *__dest, int __ch, size_t __len))
  79:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  80:/usr/include/x86_64-linux-gnu/bits/string3.h ****   /* GCC-5.0 and newer implements these checks in the compiler, so we don't
  81:/usr/include/x86_64-linux-gnu/bits/string3.h ****      need them here.  */
  82:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  83:/usr/include/x86_64-linux-gnu/bits/string3.h ****   if (__builtin_constant_p (__len) && __len == 0
  84:/usr/include/x86_64-linux-gnu/bits/string3.h ****       && (!__builtin_constant_p (__ch) || __ch != 0))
  85:/usr/include/x86_64-linux-gnu/bits/string3.h ****     {
  86:/usr/include/x86_64-linux-gnu/bits/string3.h ****       __warn_memset_zero_len ();
  87:/usr/include/x86_64-linux-gnu/bits/string3.h ****       return __dest;
  88:/usr/include/x86_64-linux-gnu/bits/string3.h ****     }
  89:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  90:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 3364              		.loc 2 90 0
 3365 0009 B9A50000 		movl	$165, %ecx
 3365      00
 3366              	.LVL349:
 3367              	.LBE347:
 3368              	.LBE346:
 226:fltk-1.3.4-1/png/png.c ****    png_struct create_struct;
 3369              		.loc 1 226 0
 3370 000e 4889F5   		movq	%rsi, %rbp
 3371 0011 4989D4   		movq	%rdx, %r12
 260:fltk-1.3.4-1/png/png.c **** #  else
 3372              		.loc 1 260 0
 3373 0014 4C89C6   		movq	%r8, %rsi
 3374              	.LVL350:
 226:fltk-1.3.4-1/png/png.c ****    png_struct create_struct;
 3375              		.loc 1 226 0
 3376 0017 4881EC18 		subq	$1560, %rsp
 3376      060000
 3377              		.cfi_def_cfa_offset 1600
 260:fltk-1.3.4-1/png/png.c **** #  else
 3378              		.loc 1 260 0
 3379 001e 4C89CA   		movq	%r9, %rdx
 3380              	.LVL351:
 3381              	.LBB350:
 3382              	.LBB348:
 3383              		.loc 2 90 0
 3384 0021 488D9C24 		leaq	224(%rsp), %rbx
 3384      E0000000 
 3385              	.LBE348:
 3386              	.LBE350:
 226:fltk-1.3.4-1/png/png.c ****    png_struct create_struct;
 3387              		.loc 1 226 0
 3388 0029 48897C24 		movq	%rdi, 8(%rsp)
 3388      08
 3389 002e 64488B04 		movq	%fs:40, %rax
 3389      25280000 
 3389      00
 3390 0037 48898424 		movq	%rax, 1544(%rsp)
 3390      08060000 
 3391 003f 31C0     		xorl	%eax, %eax
 3392              	.LVL352:
 3393              	.LBB351:
 3394              	.LBB349:
 3395              		.loc 2 90 0
 3396 0041 4889DF   		movq	%rbx, %rdi
 3397              	.LVL353:
 3398 0044 F348AB   		rep stosq
 3399              	.LVL354:
 3400              	.LBE349:
 3401              	.LBE351:
 260:fltk-1.3.4-1/png/png.c **** #  else
 3402              		.loc 1 260 0
 3403 0047 488B8C24 		movq	1600(%rsp), %rcx
 3403      40060000 
 3404 004f 4889DF   		movq	%rbx, %rdi
 240:fltk-1.3.4-1/png/png.c ****       create_struct.user_height_max = PNG_USER_HEIGHT_MAX;
 3405              		.loc 1 240 0
 3406 0052 C784243C 		movl	$2147483647, 1340(%rsp)
 3406      050000FF 
 3406      FFFF7F
 241:fltk-1.3.4-1/png/png.c **** 
 3407              		.loc 1 241 0
 3408 005d C7842440 		movl	$2147483647, 1344(%rsp)
 3408      050000FF 
 3408      FFFF7F
 260:fltk-1.3.4-1/png/png.c **** #  else
 3409              		.loc 1 260 0
 3410 0068 E8000000 		call	png_set_mem_fn
 3410      00
 3411              	.LVL355:
 272:fltk-1.3.4-1/png/png.c **** 
 3412              		.loc 1 272 0
 3413 006d 4889DF   		movq	%rbx, %rdi
 3414 0070 4C89E9   		movq	%r13, %rcx
 3415 0073 4C89E2   		movq	%r12, %rdx
 3416 0076 4889EE   		movq	%rbp, %rsi
 3417 0079 E8000000 		call	png_set_error_fn
 3417      00
 3418              	.LVL356:
 275:fltk-1.3.4-1/png/png.c ****       {
 3419              		.loc 1 275 0
 3420 007e 488D7C24 		leaq	16(%rsp), %rdi
 3420      10
 3421 0083 E8000000 		call	_setjmp
 3421      00
 3422              	.LVL357:
 3423 0088 85C0     		testl	%eax, %eax
 3424 008a 0F85D000 		jne	.L419
 3424      0000
 290:fltk-1.3.4-1/png/png.c ****          {
 3425              		.loc 1 290 0
 3426 0090 488D9C24 		leaq	224(%rsp), %rbx
 3426      E0000000 
 3427 0098 488B7424 		movq	8(%rsp), %rsi
 3427      08
 282:fltk-1.3.4-1/png/png.c ****          create_struct.jmp_buf_size = 0; /*stack allocation*/
 3428              		.loc 1 282 0
 3429 009d 488D4424 		leaq	16(%rsp), %rax
 3429      10
 283:fltk-1.3.4-1/png/png.c ****          create_struct.longjmp_fn = longjmp;
 3430              		.loc 1 283 0
 3431 00a2 48C78424 		movq	$0, 440(%rsp)
 3431      B8010000 
 3431      00000000 
 284:fltk-1.3.4-1/png/png.c **** #  else
 3432              		.loc 1 284 0
 3433 00ae 48C78424 		movq	$__longjmp_chk, 424(%rsp)
 3433      A8010000 
 3433      00000000 
 290:fltk-1.3.4-1/png/png.c ****          {
 3434              		.loc 1 290 0
 3435 00ba 4889DF   		movq	%rbx, %rdi
 282:fltk-1.3.4-1/png/png.c ****          create_struct.jmp_buf_size = 0; /*stack allocation*/
 3436              		.loc 1 282 0
 3437 00bd 48898424 		movq	%rax, 432(%rsp)
 3437      B0010000 
 290:fltk-1.3.4-1/png/png.c ****          {
 3438              		.loc 1 290 0
 3439 00c5 E8000000 		call	png_user_version_check
 3439      00
 3440              	.LVL358:
 3441 00ca 85C0     		testl	%eax, %eax
 3442 00cc 0F848E00 		je	.L419
 3442      0000
 3443              	.LBB352:
 292:fltk-1.3.4-1/png/png.c ****                png_malloc_warn(&create_struct, (sizeof *png_ptr)));
 3444              		.loc 1 292 0
 3445 00d2 BE280500 		movl	$1320, %esi
 3445      00
 3446 00d7 4889DF   		movq	%rbx, %rdi
 3447 00da E8000000 		call	png_malloc_warn
 3447      00
 3448              	.LVL359:
 295:fltk-1.3.4-1/png/png.c ****             {
 3449              		.loc 1 295 0
 3450 00df 4885C0   		testq	%rax, %rax
 3451 00e2 747C     		je	.L419
 300:fltk-1.3.4-1/png/png.c ****                create_struct.zstream.zfree = png_zfree;
 3452              		.loc 1 300 0
 3453 00e4 48C78424 		movq	$png_zalloc, 608(%rsp)
 3453      60020000 
 3453      00000000 
 301:fltk-1.3.4-1/png/png.c ****                create_struct.zstream.opaque = png_ptr;
 3454              		.loc 1 301 0
 3455 00f0 48C78424 		movq	$png_zfree, 616(%rsp)
 3455      68020000 
 3455      00000000 
 311:fltk-1.3.4-1/png/png.c **** 
 3456              		.loc 1 311 0
 3457 00fc B9A50000 		movl	$165, %ecx
 3457      00
 302:fltk-1.3.4-1/png/png.c **** 
 3458              		.loc 1 302 0
 3459 0101 48898424 		movq	%rax, 624(%rsp)
 3459      70020000 
 306:fltk-1.3.4-1/png/png.c ****                   create_struct.jmp_buf_size = 0;
 3460              		.loc 1 306 0
 3461 0109 48C78424 		movq	$0, 432(%rsp)
 3461      B0010000 
 3461      00000000 
 311:fltk-1.3.4-1/png/png.c **** 
 3462              		.loc 1 311 0
 3463 0115 4889C7   		movq	%rax, %rdi
 307:fltk-1.3.4-1/png/png.c ****                   create_struct.longjmp_fn = 0;
 3464              		.loc 1 307 0
 3465 0118 48C78424 		movq	$0, 440(%rsp)
 3465      B8010000 
 3465      00000000 
 308:fltk-1.3.4-1/png/png.c **** #              endif
 3466              		.loc 1 308 0
 3467 0124 48C78424 		movq	$0, 424(%rsp)
 3467      A8010000 
 3467      00000000 
 311:fltk-1.3.4-1/png/png.c **** 
 3468              		.loc 1 311 0
 3469 0130 4889DE   		movq	%rbx, %rsi
 3470 0133 F348A5   		rep movsq
 3471              	.LVL360:
 3472              	.L416:
 3473              	.LBE352:
 323:fltk-1.3.4-1/png/png.c **** 
 3474              		.loc 1 323 0
 3475 0136 488B9424 		movq	1544(%rsp), %rdx
 3475      08060000 
 3476 013e 64483314 		xorq	%fs:40, %rdx
 3476      25280000 
 3476      00
 3477 0147 751B     		jne	.L421
 3478 0149 4881C418 		addq	$1560, %rsp
 3478      060000
 3479              		.cfi_remember_state
 3480              		.cfi_def_cfa_offset 40
 3481 0150 5B       		popq	%rbx
 3482              		.cfi_def_cfa_offset 32
 3483 0151 5D       		popq	%rbp
 3484              		.cfi_def_cfa_offset 24
 3485              	.LVL361:
 3486 0152 415C     		popq	%r12
 3487              		.cfi_def_cfa_offset 16
 3488              	.LVL362:
 3489 0154 415D     		popq	%r13
 3490              		.cfi_def_cfa_offset 8
 3491              	.LVL363:
 3492 0156 C3       		ret
 3493              	.LVL364:
 3494 0157 660F1F84 		.p2align 4,,10
 3494      00000000 
 3494      00
 3495              		.p2align 3
 3496              	.L419:
 3497              		.cfi_restore_state
 322:fltk-1.3.4-1/png/png.c **** }
 3498              		.loc 1 322 0
 3499 0160 31C0     		xorl	%eax, %eax
 3500 0162 EBD2     		jmp	.L416
 3501              	.L421:
 323:fltk-1.3.4-1/png/png.c **** 
 3502              		.loc 1 323 0
 3503 0164 E8000000 		call	__stack_chk_fail
 3503      00
 3504              	.LVL365:
 3505              		.cfi_endproc
 3506              	.LFE63:
 3508              		.section	.text.unlikely.png_create_png_struct
 3509              	.LCOLDE43:
 3510              		.section	.text.png_create_png_struct
 3511              	.LHOTE43:
 3512              		.section	.text.unlikely.png_create_info_struct,"ax",@progbits
 3513              	.LCOLDB44:
 3514              		.section	.text.png_create_info_struct,"ax",@progbits
 3515              	.LHOTB44:
 3516              		.p2align 4,,15
 3517              		.globl	png_create_info_struct
 3519              	png_create_info_struct:
 3520              	.LFB64:
 328:fltk-1.3.4-1/png/png.c ****    png_inforp info_ptr;
 3521              		.loc 1 328 0
 3522              		.cfi_startproc
 3523              	.LVL366:
 333:fltk-1.3.4-1/png/png.c ****       return NULL;
 3524              		.loc 1 333 0
 3525 0000 4885FF   		testq	%rdi, %rdi
 3526 0003 7453     		je	.L424
 328:fltk-1.3.4-1/png/png.c ****    png_inforp info_ptr;
 3527              		.loc 1 328 0
 3528 0005 4883EC08 		subq	$8, %rsp
 3529              		.cfi_def_cfa_offset 16
 341:fltk-1.3.4-1/png/png.c ****       (sizeof *info_ptr)));
 3530              		.loc 1 341 0
 3531 0009 BE580100 		movl	$344, %esi
 3531      00
 3532 000e E8000000 		call	png_malloc_base
 3532      00
 3533              	.LVL367:
 3534 0013 4889C2   		movq	%rax, %rdx
 3535              	.LVL368:
 3536 0016 31C0     		xorl	%eax, %eax
 3537              	.LVL369:
 344:fltk-1.3.4-1/png/png.c ****       memset(info_ptr, 0, (sizeof *info_ptr));
 3538              		.loc 1 344 0
 3539 0018 4885D2   		testq	%rdx, %rdx
 3540 001b 742F     		je	.L423
 3541              	.LVL370:
 3542              	.LBB353:
 3543              	.LBB354:
 3544              		.loc 2 90 0
 3545 001d 488D7A08 		leaq	8(%rdx), %rdi
 3546 0021 4889D1   		movq	%rdx, %rcx
 3547 0024 48C70200 		movq	$0, (%rdx)
 3547      000000
 3548 002b 48C78250 		movq	$0, 336(%rdx)
 3548      01000000 
 3548      000000
 3549 0036 4883E7F8 		andq	$-8, %rdi
 3550 003a 4829F9   		subq	%rdi, %rcx
 3551 003d 81C15801 		addl	$344, %ecx
 3551      0000
 3552 0043 C1E903   		shrl	$3, %ecx
 3553 0046 F348AB   		rep stosq
 3554 0049 4889D0   		movq	%rdx, %rax
 3555              	.LVL371:
 3556              	.L423:
 3557              	.LBE354:
 3558              	.LBE353:
 348:fltk-1.3.4-1/png/png.c **** 
 3559              		.loc 1 348 0
 3560 004c 4883C408 		addq	$8, %rsp
 3561              		.cfi_def_cfa_offset 8
 3562 0050 C3       		ret
 3563              	.LVL372:
 3564              		.p2align 4,,10
 3565 0051 0F1F8000 		.p2align 3
 3565      000000
 3566              	.L424:
 334:fltk-1.3.4-1/png/png.c **** 
 3567              		.loc 1 334 0
 3568 0058 31C0     		xorl	%eax, %eax
 3569 005a C3       		ret
 3570              		.cfi_endproc
 3571              	.LFE64:
 3573              		.section	.text.unlikely.png_create_info_struct
 3574              	.LCOLDE44:
 3575              		.section	.text.png_create_info_struct
 3576              	.LHOTE44:
 3577              		.section	.text.unlikely.png_destroy_info_struct,"ax",@progbits
 3578              	.LCOLDB45:
 3579              		.section	.text.png_destroy_info_struct,"ax",@progbits
 3580              	.LHOTB45:
 3581              		.p2align 4,,15
 3582              		.globl	png_destroy_info_struct
 3584              	png_destroy_info_struct:
 3585              	.LFB65:
 360:fltk-1.3.4-1/png/png.c ****    png_inforp info_ptr = NULL;
 3586              		.loc 1 360 0
 3587              		.cfi_startproc
 3588              	.LVL373:
 368:fltk-1.3.4-1/png/png.c ****       info_ptr = *info_ptr_ptr;
 3589              		.loc 1 368 0
 3590 0000 4885FF   		testq	%rdi, %rdi
 3591 0003 7419     		je	.L440
 3592 0005 4885F6   		testq	%rsi, %rsi
 3593 0008 7414     		je	.L440
 360:fltk-1.3.4-1/png/png.c ****    png_inforp info_ptr = NULL;
 3594              		.loc 1 360 0
 3595 000a 55       		pushq	%rbp
 3596              		.cfi_def_cfa_offset 16
 3597              		.cfi_offset 6, -16
 3598 000b 53       		pushq	%rbx
 3599              		.cfi_def_cfa_offset 24
 3600              		.cfi_offset 3, -24
 3601 000c 4883EC08 		subq	$8, %rsp
 3602              		.cfi_def_cfa_offset 32
 369:fltk-1.3.4-1/png/png.c **** 
 3603              		.loc 1 369 0
 3604 0010 488B1E   		movq	(%rsi), %rbx
 3605              	.LVL374:
 371:fltk-1.3.4-1/png/png.c ****    {
 3606              		.loc 1 371 0
 3607 0013 4885DB   		testq	%rbx, %rbx
 3608 0016 7508     		jne	.L441
 385:fltk-1.3.4-1/png/png.c **** 
 3609              		.loc 1 385 0
 3610 0018 4883C408 		addq	$8, %rsp
 3611              		.cfi_def_cfa_offset 24
 3612 001c 5B       		popq	%rbx
 3613              		.cfi_restore 3
 3614              		.cfi_def_cfa_offset 16
 3615              	.LVL375:
 3616 001d 5D       		popq	%rbp
 3617              		.cfi_restore 6
 3618              		.cfi_def_cfa_offset 8
 3619              	.LVL376:
 3620              	.L440:
 3621 001e F3C3     		rep ret
 3622              	.LVL377:
 3623              		.p2align 4,,10
 3624              		.p2align 3
 3625              	.L441:
 3626              		.cfi_def_cfa_offset 32
 3627              		.cfi_offset 3, -24
 3628              		.cfi_offset 6, -16
 379:fltk-1.3.4-1/png/png.c **** 
 3629              		.loc 1 379 0
 3630 0020 48C70600 		movq	$0, (%rsi)
 3630      000000
 3631              	.LVL378:
 3632              	.LBB355:
 3633              	.LBB356:
 3634 0027 B9FFFFFF 		movl	$-1, %ecx
 3634      FF
 3635 002c 4889DE   		movq	%rbx, %rsi
 3636              	.LVL379:
 3637 002f BAFF7F00 		movl	$32767, %edx
 3637      00
 3638 0034 4889FD   		movq	%rdi, %rbp
 3639 0037 E8000000 		call	png_free_data.part.3
 3639      00
 3640              	.LVL380:
 3641              	.LBE356:
 3642              	.LBE355:
 3643              	.LBB357:
 3644              	.LBB358:
 3645              		.loc 2 90 0
 3646 003c 488D7B08 		leaq	8(%rbx), %rdi
 3647 0040 4889D9   		movq	%rbx, %rcx
 3648 0043 31C0     		xorl	%eax, %eax
 3649 0045 48C70300 		movq	$0, (%rbx)
 3649      000000
 3650 004c 48C78350 		movq	$0, 336(%rbx)
 3650      01000000 
 3650      000000
 3651              	.LBE358:
 3652              	.LBE357:
 383:fltk-1.3.4-1/png/png.c ****    }
 3653              		.loc 1 383 0
 3654 0057 4889DE   		movq	%rbx, %rsi
 3655              	.LBB360:
 3656              	.LBB359:
 3657              		.loc 2 90 0
 3658 005a 4883E7F8 		andq	$-8, %rdi
 3659 005e 4829F9   		subq	%rdi, %rcx
 3660 0061 81C15801 		addl	$344, %ecx
 3660      0000
 3661 0067 C1E903   		shrl	$3, %ecx
 3662 006a F348AB   		rep stosq
 3663              	.LVL381:
 3664              	.LBE359:
 3665              	.LBE360:
 385:fltk-1.3.4-1/png/png.c **** 
 3666              		.loc 1 385 0
 3667 006d 4883C408 		addq	$8, %rsp
 3668              		.cfi_def_cfa_offset 24
 383:fltk-1.3.4-1/png/png.c ****    }
 3669              		.loc 1 383 0
 3670 0071 4889EF   		movq	%rbp, %rdi
 385:fltk-1.3.4-1/png/png.c **** 
 3671              		.loc 1 385 0
 3672 0074 5B       		popq	%rbx
 3673              		.cfi_restore 3
 3674              		.cfi_def_cfa_offset 16
 3675              	.LVL382:
 3676 0075 5D       		popq	%rbp
 3677              		.cfi_restore 6
 3678              		.cfi_def_cfa_offset 8
 3679              	.LVL383:
 383:fltk-1.3.4-1/png/png.c ****    }
 3680              		.loc 1 383 0
 3681 0076 E9000000 		jmp	png_free
 3681      00
 3682              	.LVL384:
 3683              		.cfi_endproc
 3684              	.LFE65:
 3686              		.section	.text.unlikely.png_destroy_info_struct
 3687              	.LCOLDE45:
 3688              		.section	.text.png_destroy_info_struct
 3689              	.LHOTE45:
 3690              		.section	.text.unlikely.png_info_init_3,"ax",@progbits
 3691              	.LCOLDB46:
 3692              		.section	.text.png_info_init_3,"ax",@progbits
 3693              	.LHOTB46:
 3694              		.p2align 4,,15
 3695              		.globl	png_info_init_3
 3697              	png_info_init_3:
 3698              	.LFB66:
 399:fltk-1.3.4-1/png/png.c ****    png_inforp info_ptr = *ptr_ptr;
 3699              		.loc 1 399 0
 3700              		.cfi_startproc
 3701              	.LVL385:
 400:fltk-1.3.4-1/png/png.c **** 
 3702              		.loc 1 400 0
 3703 0000 488B07   		movq	(%rdi), %rax
 3704              	.LVL386:
 404:fltk-1.3.4-1/png/png.c ****       return;
 3705              		.loc 1 404 0
 3706 0003 4885C0   		testq	%rax, %rax
 3707 0006 7436     		je	.L450
 407:fltk-1.3.4-1/png/png.c ****    {
 3708              		.loc 1 407 0
 3709 0008 4881FE57 		cmpq	$343, %rsi
 3709      010000
 399:fltk-1.3.4-1/png/png.c ****    png_inforp info_ptr = *ptr_ptr;
 3710              		.loc 1 399 0
 3711 000f 53       		pushq	%rbx
 3712              		.cfi_def_cfa_offset 16
 3713              		.cfi_offset 3, -16
 407:fltk-1.3.4-1/png/png.c ****    {
 3714              		.loc 1 407 0
 3715 0010 762E     		jbe	.L451
 3716              	.LVL387:
 3717              	.L444:
 3718              	.LBB361:
 3719              	.LBB362:
 3720              		.loc 2 90 0
 3721 0012 488D7808 		leaq	8(%rax), %rdi
 3722 0016 48C70000 		movq	$0, (%rax)
 3722      000000
 3723 001d 48C78050 		movq	$0, 336(%rax)
 3723      01000000 
 3723      000000
 3724 0028 4883E7F8 		andq	$-8, %rdi
 3725 002c 4829F8   		subq	%rdi, %rax
 3726              	.LVL388:
 3727 002f 8D885801 		leal	344(%rax), %ecx
 3727      0000
 3728 0035 31C0     		xorl	%eax, %eax
 3729 0037 C1E903   		shrl	$3, %ecx
 3730 003a F348AB   		rep stosq
 3731              	.LBE362:
 3732              	.LBE361:
 419:fltk-1.3.4-1/png/png.c **** 
 3733              		.loc 1 419 0
 3734 003d 5B       		popq	%rbx
 3735              		.cfi_restore 3
 3736              		.cfi_def_cfa_offset 8
 3737              	.LVL389:
 3738              	.L450:
 3739 003e F3C3     		rep ret
 3740              	.LVL390:
 3741              		.p2align 4,,10
 3742              		.p2align 3
 3743              	.L451:
 3744              		.cfi_def_cfa_offset 16
 3745              		.cfi_offset 3, -16
 3746 0040 4889FB   		movq	%rdi, %rbx
 409:fltk-1.3.4-1/png/png.c ****       /* The following line is why this API should not be used: */
 3747              		.loc 1 409 0
 3748 0043 48C70700 		movq	$0, (%rdi)
 3748      000000
 411:fltk-1.3.4-1/png/png.c ****       info_ptr = png_voidcast(png_inforp, png_malloc_base(NULL,
 3749              		.loc 1 411 0
 3750 004a 4889C7   		movq	%rax, %rdi
 3751              	.LVL391:
 3752 004d E8000000 		call	free
 3752      00
 3753              	.LVL392:
 412:fltk-1.3.4-1/png/png.c ****          (sizeof *info_ptr)));
 3754              		.loc 1 412 0
 3755 0052 BE580100 		movl	$344, %esi
 3755      00
 3756 0057 31FF     		xorl	%edi, %edi
 3757 0059 E8000000 		call	png_malloc_base
 3757      00
 3758              	.LVL393:
 414:fltk-1.3.4-1/png/png.c ****    }
 3759              		.loc 1 414 0
 3760 005e 488903   		movq	%rax, (%rbx)
 3761 0061 EBAF     		jmp	.L444
 3762              		.cfi_endproc
 3763              	.LFE66:
 3765              		.section	.text.unlikely.png_info_init_3
 3766              	.LCOLDE46:
 3767              		.section	.text.png_info_init_3
 3768              	.LHOTE46:
 3769              		.section	.rodata.str1.8
 3770 00bf 00       		.align 8
 3771              	.LC47:
 3772 00c0 556E6B6E 		.string	"Unknown freer parameter in png_data_freer"
 3772      6F776E20 
 3772      66726565 
 3772      72207061 
 3772      72616D65 
 3773              		.section	.text.unlikely.png_data_freer,"ax",@progbits
 3774              	.LCOLDB48:
 3775              		.section	.text.png_data_freer,"ax",@progbits
 3776              	.LHOTB48:
 3777              		.p2align 4,,15
 3778              		.globl	png_data_freer
 3780              	png_data_freer:
 3781              	.LFB67:
 425:fltk-1.3.4-1/png/png.c ****    png_debug(1, "in png_data_freer");
 3782              		.loc 1 425 0
 3783              		.cfi_startproc
 3784              	.LVL394:
 428:fltk-1.3.4-1/png/png.c ****       return;
 3785              		.loc 1 428 0
 3786 0000 4885FF   		testq	%rdi, %rdi
 3787 0003 741B     		je	.L457
 3788 0005 4885F6   		testq	%rsi, %rsi
 3789 0008 7416     		je	.L457
 431:fltk-1.3.4-1/png/png.c ****       info_ptr->free_me |= mask;
 3790              		.loc 1 431 0
 3791 000a 83FA01   		cmpl	$1, %edx
 3792 000d 7419     		je	.L458
 434:fltk-1.3.4-1/png/png.c ****       info_ptr->free_me &= ~mask;
 3793              		.loc 1 434 0
 3794 000f 83FA02   		cmpl	$2, %edx
 3795 0012 751B     		jne	.L455
 435:fltk-1.3.4-1/png/png.c **** 
 3796              		.loc 1 435 0
 3797 0014 F7D1     		notl	%ecx
 3798              	.LVL395:
 3799 0016 218E1C01 		andl	%ecx, 284(%rsi)
 3799      0000
 3800 001c C3       		ret
 3801              	.LVL396:
 3802 001d 0F1F00   		.p2align 4,,10
 3803              		.p2align 3
 3804              	.L457:
 3805 0020 F3C3     		rep ret
 3806              		.p2align 4,,10
 3807 0022 660F1F44 		.p2align 3
 3807      0000
 3808              	.L458:
 432:fltk-1.3.4-1/png/png.c **** 
 3809              		.loc 1 432 0
 3810 0028 098E1C01 		orl	%ecx, 284(%rsi)
 3810      0000
 3811 002e C3       		ret
 3812              	.L455:
 425:fltk-1.3.4-1/png/png.c ****    png_debug(1, "in png_data_freer");
 3813              		.loc 1 425 0
 3814 002f 50       		pushq	%rax
 3815              		.cfi_def_cfa_offset 16
 438:fltk-1.3.4-1/png/png.c **** }
 3816              		.loc 1 438 0
 3817 0030 BE000000 		movl	$.LC47, %esi
 3817      00
 3818              	.LVL397:
 3819 0035 E8000000 		call	png_error
 3819      00
 3820              	.LVL398:
 3821              		.cfi_endproc
 3822              	.LFE67:
 3824              		.section	.text.unlikely.png_data_freer
 3825              	.LCOLDE48:
 3826              		.section	.text.png_data_freer
 3827              	.LHOTE48:
 3828              		.section	.text.unlikely.png_free_data,"ax",@progbits
 3829              	.LCOLDB49:
 3830              		.section	.text.png_free_data,"ax",@progbits
 3831              	.LHOTB49:
 3832              		.p2align 4,,15
 3833              		.globl	png_free_data
 3835              	png_free_data:
 3836              	.LFB68:
 444:fltk-1.3.4-1/png/png.c ****    png_debug(1, "in png_free_data");
 3837              		.loc 1 444 0
 3838              		.cfi_startproc
 3839              	.LVL399:
 447:fltk-1.3.4-1/png/png.c ****       return;
 3840              		.loc 1 447 0
 3841 0000 4885FF   		testq	%rdi, %rdi
 3842 0003 740B     		je	.L459
 3843 0005 4885F6   		testq	%rsi, %rsi
 3844 0008 7406     		je	.L459
 3845 000a E9000000 		jmp	png_free_data.part.3
 3845      00
 3846              	.LVL400:
 3847 000f 90       		.p2align 4,,10
 3848              		.p2align 3
 3849              	.L459:
 3850 0010 F3C3     		rep ret
 3851              		.cfi_endproc
 3852              	.LFE68:
 3854              		.section	.text.unlikely.png_free_data
 3855              	.LCOLDE49:
 3856              		.section	.text.png_free_data
 3857              	.LHOTE49:
 3858              		.section	.text.unlikely.png_get_io_ptr,"ax",@progbits
 3859              	.LCOLDB50:
 3860              		.section	.text.png_get_io_ptr,"ax",@progbits
 3861              	.LHOTB50:
 3862              		.p2align 4,,15
 3863              		.globl	png_get_io_ptr
 3865              	png_get_io_ptr:
 3866              	.LFB69:
 642:fltk-1.3.4-1/png/png.c ****    if (png_ptr == NULL)
 3867              		.loc 1 642 0
 3868              		.cfi_startproc
 3869              	.LVL401:
 643:fltk-1.3.4-1/png/png.c ****       return (NULL);
 3870              		.loc 1 643 0
 3871 0000 4885FF   		testq	%rdi, %rdi
 3872 0003 740B     		je	.L463
 646:fltk-1.3.4-1/png/png.c **** }
 3873              		.loc 1 646 0
 3874 0005 488B8708 		movq	264(%rdi), %rax
 3874      010000
 3875 000c C3       		ret
 3876 000d 0F1F00   		.p2align 4,,10
 3877              		.p2align 3
 3878              	.L463:
 644:fltk-1.3.4-1/png/png.c **** 
 3879              		.loc 1 644 0
 3880 0010 31C0     		xorl	%eax, %eax
 647:fltk-1.3.4-1/png/png.c **** 
 3881              		.loc 1 647 0
 3882 0012 C3       		ret
 3883              		.cfi_endproc
 3884              	.LFE69:
 3886              		.section	.text.unlikely.png_get_io_ptr
 3887              	.LCOLDE50:
 3888              		.section	.text.png_get_io_ptr
 3889              	.LHOTE50:
 3890              		.section	.text.unlikely.png_init_io,"ax",@progbits
 3891              	.LCOLDB51:
 3892              		.section	.text.png_init_io,"ax",@progbits
 3893              	.LHOTB51:
 3894              		.p2align 4,,15
 3895              		.globl	png_init_io
 3897              	png_init_io:
 3898              	.LFB70:
 659:fltk-1.3.4-1/png/png.c ****    png_debug(1, "in png_init_io");
 3899              		.loc 1 659 0
 3900              		.cfi_startproc
 3901              	.LVL402:
 662:fltk-1.3.4-1/png/png.c ****       return;
 3902              		.loc 1 662 0
 3903 0000 4885FF   		testq	%rdi, %rdi
 3904 0003 7407     		je	.L464
 665:fltk-1.3.4-1/png/png.c **** }
 3905              		.loc 1 665 0
 3906 0005 4889B708 		movq	%rsi, 264(%rdi)
 3906      010000
 3907              	.L464:
 3908 000c F3C3     		rep ret
 3909              		.cfi_endproc
 3910              	.LFE70:
 3912              		.section	.text.unlikely.png_init_io
 3913              	.LCOLDE51:
 3914              		.section	.text.png_init_io
 3915              	.LHOTE51:
 3916              		.section	.text.unlikely.png_save_int_32,"ax",@progbits
 3917              	.LCOLDB52:
 3918              		.section	.text.png_save_int_32,"ax",@progbits
 3919              	.LHOTB52:
 3920              		.p2align 4,,15
 3921              		.globl	png_save_int_32
 3923              	png_save_int_32:
 3924              	.LFB71:
 678:fltk-1.3.4-1/png/png.c ****    buf[0] = (png_byte)((i >> 24) & 0xff);
 3925              		.loc 1 678 0
 3926              		.cfi_startproc
 3927              	.LVL403:
 679:fltk-1.3.4-1/png/png.c ****    buf[1] = (png_byte)((i >> 16) & 0xff);
 3928              		.loc 1 679 0
 3929 0000 89F0     		movl	%esi, %eax
 682:fltk-1.3.4-1/png/png.c **** }
 3930              		.loc 1 682 0
 3931 0002 40887703 		movb	%sil, 3(%rdi)
 679:fltk-1.3.4-1/png/png.c ****    buf[1] = (png_byte)((i >> 16) & 0xff);
 3932              		.loc 1 679 0
 3933 0006 C1F818   		sarl	$24, %eax
 3934 0009 8807     		movb	%al, (%rdi)
 680:fltk-1.3.4-1/png/png.c ****    buf[2] = (png_byte)((i >> 8) & 0xff);
 3935              		.loc 1 680 0
 3936 000b 89F0     		movl	%esi, %eax
 3937 000d C1F810   		sarl	$16, %eax
 3938 0010 884701   		movb	%al, 1(%rdi)
 681:fltk-1.3.4-1/png/png.c ****    buf[3] = (png_byte)(i & 0xff);
 3939              		.loc 1 681 0
 3940 0013 89F0     		movl	%esi, %eax
 3941 0015 C1F808   		sarl	$8, %eax
 3942 0018 884702   		movb	%al, 2(%rdi)
 682:fltk-1.3.4-1/png/png.c **** }
 3943              		.loc 1 682 0
 3944 001b C3       		ret
 3945              		.cfi_endproc
 3946              	.LFE71:
 3948              		.section	.text.unlikely.png_save_int_32
 3949              	.LCOLDE52:
 3950              		.section	.text.png_save_int_32
 3951              	.LHOTE52:
 3952              		.section	.rodata.str1.1
 3953              	.LC53:
 3954 0048 202B3030 		.string	" +0000"
 3954      303000
 3955              		.section	.text.unlikely.png_convert_to_rfc1123_buffer,"ax",@progbits
 3956              	.LCOLDB54:
 3957              		.section	.text.png_convert_to_rfc1123_buffer,"ax",@progbits
 3958              	.LHOTB54:
 3959              		.p2align 4,,15
 3960              		.globl	png_convert_to_rfc1123_buffer
 3962              	png_convert_to_rfc1123_buffer:
 3963              	.LFB72:
 692:fltk-1.3.4-1/png/png.c ****    static PNG_CONST char short_months[12][4] =
 3964              		.loc 1 692 0
 3965              		.cfi_startproc
 3966              	.LVL404:
 3967 0000 4154     		pushq	%r12
 3968              		.cfi_def_cfa_offset 16
 3969              		.cfi_offset 12, -16
 3970 0002 55       		pushq	%rbp
 3971              		.cfi_def_cfa_offset 24
 3972              		.cfi_offset 6, -24
 3973 0003 53       		pushq	%rbx
 3974              		.cfi_def_cfa_offset 32
 3975              		.cfi_offset 3, -32
 3976 0004 4883EC10 		subq	$16, %rsp
 3977              		.cfi_def_cfa_offset 48
 692:fltk-1.3.4-1/png/png.c ****    static PNG_CONST char short_months[12][4] =
 3978              		.loc 1 692 0
 3979 0008 64488B04 		movq	%fs:40, %rax
 3979      25280000 
 3979      00
 3980 0011 48894424 		movq	%rax, 8(%rsp)
 3980      08
 3981 0016 31C0     		xorl	%eax, %eax
 697:fltk-1.3.4-1/png/png.c ****       return 0;
 3982              		.loc 1 697 0
 3983 0018 4885FF   		testq	%rdi, %rdi
 3984 001b 0F84CF01 		je	.L478
 3984      0000
 700:fltk-1.3.4-1/png/png.c ****        ptime->month == 0    ||  ptime->month > 12  ||
 3985              		.loc 1 700 0
 3986 0021 66813E0F 		cmpw	$9999, (%rsi)
 3986      27
 3987 0026 4889F3   		movq	%rsi, %rbx
 3988 0029 0F87A101 		ja	.L471
 3988      0000
 701:fltk-1.3.4-1/png/png.c ****        ptime->day   == 0    ||  ptime->day   > 31  ||
 3989              		.loc 1 701 0 discriminator 1
 3990 002f 0FB64E02 		movzbl	2(%rsi), %ecx
 3991 0033 8D51FF   		leal	-1(%rcx), %edx
 3992 0036 80FA0B   		cmpb	$11, %dl
 3993 0039 0F879101 		ja	.L471
 3993      0000
 3994              	.LVL405:
 3995              	.LBB366:
 3996              	.LBB367:
 702:fltk-1.3.4-1/png/png.c ****        ptime->hour  > 23    ||  ptime->minute > 59 ||
 3997              		.loc 1 702 0
 3998 003f 0FB65603 		movzbl	3(%rsi), %edx
 3999 0043 8D4AFF   		leal	-1(%rdx), %ecx
 4000 0046 80F91E   		cmpb	$30, %cl
 4001 0049 0F878101 		ja	.L471
 4001      0000
 4002 004f 807E0417 		cmpb	$23, 4(%rsi)
 4003 0053 0F877701 		ja	.L471
 4003      0000
 703:fltk-1.3.4-1/png/png.c ****        ptime->second > 60)
 4004              		.loc 1 703 0
 4005 0059 807E053B 		cmpb	$59, 5(%rsi)
 4006 005d 0F876D01 		ja	.L471
 4006      0000
 4007 0063 807E063C 		cmpb	$60, 6(%rsi)
 4008 0067 0F876301 		ja	.L471
 4008      0000
 4009              	.LBB368:
 716:fltk-1.3.4-1/png/png.c ****       APPEND(' ');
 4010              		.loc 1 716 0
 4011 006d 488D7424 		leaq	5(%rsp), %rsi
 4011      05
 4012              	.LVL406:
 4013 0072 0FB6CA   		movzbl	%dl, %ecx
 4014 0075 4889FD   		movq	%rdi, %rbp
 4015              	.LVL407:
 4016 0078 BA010000 		movl	$1, %edx
 4016      00
 4017 007d 4889E7   		movq	%rsp, %rdi
 4018              	.LVL408:
 4019 0080 E8000000 		call	png_format_number
 4019      00
 4020              	.LVL409:
 4021 0085 31D2     		xorl	%edx, %edx
 4022 0087 4889C1   		movq	%rax, %rcx
 4023 008a BE1D0000 		movl	$29, %esi
 4023      00
 4024 008f 4889EF   		movq	%rbp, %rdi
 4025 0092 E8000000 		call	png_safecat
 4025      00
 4026              	.LVL410:
 717:fltk-1.3.4-1/png/png.c ****       APPEND_STRING(short_months[(ptime->month - 1)]);
 4027              		.loc 1 717 0
 4028 0097 4883F81B 		cmpq	$27, %rax
 4029 009b 7709     		ja	.L472
 4030              	.LVL411:
 4031 009d C6440500 		movb	$32, 0(%rbp,%rax)
 4031      20
 4032 00a2 4883C001 		addq	$1, %rax
 4033              	.LVL412:
 4034              	.L472:
 718:fltk-1.3.4-1/png/png.c ****       APPEND(' ');
 4035              		.loc 1 718 0
 4036 00a6 0FB64B02 		movzbl	2(%rbx), %ecx
 4037 00aa 4889C2   		movq	%rax, %rdx
 4038 00ad BE1D0000 		movl	$29, %esi
 4038      00
 4039 00b2 4889EF   		movq	%rbp, %rdi
 4040 00b5 83E901   		subl	$1, %ecx
 4041 00b8 4863C9   		movslq	%ecx, %rcx
 4042 00bb 488D0C8D 		leaq	short_months.6841(,%rcx,4), %rcx
 4042      00000000 
 4043 00c3 E8000000 		call	png_safecat
 4043      00
 4044              	.LVL413:
 719:fltk-1.3.4-1/png/png.c ****       APPEND_NUMBER(PNG_NUMBER_FORMAT_u, ptime->year);
 4045              		.loc 1 719 0
 4046 00c8 4883F81B 		cmpq	$27, %rax
 718:fltk-1.3.4-1/png/png.c ****       APPEND(' ');
 4047              		.loc 1 718 0
 4048 00cc 4989C4   		movq	%rax, %r12
 4049              	.LVL414:
 719:fltk-1.3.4-1/png/png.c ****       APPEND_NUMBER(PNG_NUMBER_FORMAT_u, ptime->year);
 4050              		.loc 1 719 0
 4051 00cf 7709     		ja	.L473
 4052              	.LVL415:
 4053 00d1 C6440500 		movb	$32, 0(%rbp,%rax)
 4053      20
 4054 00d6 4983C401 		addq	$1, %r12
 4055              	.LVL416:
 4056              	.L473:
 720:fltk-1.3.4-1/png/png.c ****       APPEND(' ');
 4057              		.loc 1 720 0
 4058 00da 0FB70B   		movzwl	(%rbx), %ecx
 4059 00dd 488D7424 		leaq	5(%rsp), %rsi
 4059      05
 4060 00e2 BA010000 		movl	$1, %edx
 4060      00
 4061 00e7 4889E7   		movq	%rsp, %rdi
 4062 00ea E8000000 		call	png_format_number
 4062      00
 4063              	.LVL417:
 4064 00ef 4C89E2   		movq	%r12, %rdx
 4065 00f2 4889C1   		movq	%rax, %rcx
 4066 00f5 BE1D0000 		movl	$29, %esi
 4066      00
 4067 00fa 4889EF   		movq	%rbp, %rdi
 4068 00fd E8000000 		call	png_safecat
 4068      00
 4069              	.LVL418:
 721:fltk-1.3.4-1/png/png.c ****       APPEND_NUMBER(PNG_NUMBER_FORMAT_02u, (unsigned)ptime->hour);
 4070              		.loc 1 721 0
 4071 0102 4883F81B 		cmpq	$27, %rax
 720:fltk-1.3.4-1/png/png.c ****       APPEND(' ');
 4072              		.loc 1 720 0
 4073 0106 4989C4   		movq	%rax, %r12
 4074              	.LVL419:
 721:fltk-1.3.4-1/png/png.c ****       APPEND_NUMBER(PNG_NUMBER_FORMAT_02u, (unsigned)ptime->hour);
 4075              		.loc 1 721 0
 4076 0109 7709     		ja	.L474
 4077              	.LVL420:
 4078 010b C6440500 		movb	$32, 0(%rbp,%rax)
 4078      20
 4079 0110 4983C401 		addq	$1, %r12
 4080              	.LVL421:
 4081              	.L474:
 722:fltk-1.3.4-1/png/png.c ****       APPEND(':');
 4082              		.loc 1 722 0
 4083 0114 0FB64B04 		movzbl	4(%rbx), %ecx
 4084 0118 488D7424 		leaq	5(%rsp), %rsi
 4084      05
 4085 011d BA020000 		movl	$2, %edx
 4085      00
 4086 0122 4889E7   		movq	%rsp, %rdi
 4087 0125 E8000000 		call	png_format_number
 4087      00
 4088              	.LVL422:
 4089 012a 4C89E2   		movq	%r12, %rdx
 4090 012d 4889C1   		movq	%rax, %rcx
 4091 0130 BE1D0000 		movl	$29, %esi
 4091      00
 4092 0135 4889EF   		movq	%rbp, %rdi
 4093 0138 E8000000 		call	png_safecat
 4093      00
 4094              	.LVL423:
 723:fltk-1.3.4-1/png/png.c ****       APPEND_NUMBER(PNG_NUMBER_FORMAT_02u, (unsigned)ptime->minute);
 4095              		.loc 1 723 0
 4096 013d 4883F81B 		cmpq	$27, %rax
 722:fltk-1.3.4-1/png/png.c ****       APPEND(':');
 4097              		.loc 1 722 0
 4098 0141 4989C4   		movq	%rax, %r12
 4099              	.LVL424:
 723:fltk-1.3.4-1/png/png.c ****       APPEND_NUMBER(PNG_NUMBER_FORMAT_02u, (unsigned)ptime->minute);
 4100              		.loc 1 723 0
 4101 0144 7709     		ja	.L475
 4102              	.LVL425:
 4103 0146 C6440500 		movb	$58, 0(%rbp,%rax)
 4103      3A
 4104 014b 4983C401 		addq	$1, %r12
 4105              	.LVL426:
 4106              	.L475:
 724:fltk-1.3.4-1/png/png.c ****       APPEND(':');
 4107              		.loc 1 724 0
 4108 014f 0FB64B05 		movzbl	5(%rbx), %ecx
 4109 0153 488D7424 		leaq	5(%rsp), %rsi
 4109      05
 4110 0158 BA020000 		movl	$2, %edx
 4110      00
 4111 015d 4889E7   		movq	%rsp, %rdi
 4112 0160 E8000000 		call	png_format_number
 4112      00
 4113              	.LVL427:
 4114 0165 4C89E2   		movq	%r12, %rdx
 4115 0168 4889C1   		movq	%rax, %rcx
 4116 016b BE1D0000 		movl	$29, %esi
 4116      00
 4117 0170 4889EF   		movq	%rbp, %rdi
 4118 0173 E8000000 		call	png_safecat
 4118      00
 4119              	.LVL428:
 725:fltk-1.3.4-1/png/png.c ****       APPEND_NUMBER(PNG_NUMBER_FORMAT_02u, (unsigned)ptime->second);
 4120              		.loc 1 725 0
 4121 0178 4883F81B 		cmpq	$27, %rax
 724:fltk-1.3.4-1/png/png.c ****       APPEND(':');
 4122              		.loc 1 724 0
 4123 017c 4989C4   		movq	%rax, %r12
 4124              	.LVL429:
 725:fltk-1.3.4-1/png/png.c ****       APPEND_NUMBER(PNG_NUMBER_FORMAT_02u, (unsigned)ptime->second);
 4125              		.loc 1 725 0
 4126 017f 7709     		ja	.L476
 4127              	.LVL430:
 4128 0181 C6440500 		movb	$58, 0(%rbp,%rax)
 4128      3A
 4129 0186 4983C401 		addq	$1, %r12
 4130              	.LVL431:
 4131              	.L476:
 726:fltk-1.3.4-1/png/png.c ****       APPEND_STRING(" +0000"); /* This reliably terminates the buffer */
 4132              		.loc 1 726 0
 4133 018a 0FB64B06 		movzbl	6(%rbx), %ecx
 4134 018e 488D7424 		leaq	5(%rsp), %rsi
 4134      05
 4135 0193 BA020000 		movl	$2, %edx
 4135      00
 4136 0198 4889E7   		movq	%rsp, %rdi
 4137 019b E8000000 		call	png_format_number
 4137      00
 4138              	.LVL432:
 4139 01a0 4C89E2   		movq	%r12, %rdx
 4140 01a3 4889C1   		movq	%rax, %rcx
 4141 01a6 BE1D0000 		movl	$29, %esi
 4141      00
 4142 01ab 4889EF   		movq	%rbp, %rdi
 4143 01ae E8000000 		call	png_safecat
 4143      00
 4144              	.LVL433:
 727:fltk-1.3.4-1/png/png.c **** 
 4145              		.loc 1 727 0
 4146 01b3 B9000000 		movl	$.LC53, %ecx
 4146      00
 4147 01b8 4889C2   		movq	%rax, %rdx
 4148 01bb BE1D0000 		movl	$29, %esi
 4148      00
 4149 01c0 4889EF   		movq	%rbp, %rdi
 4150 01c3 E8000000 		call	png_safecat
 4150      00
 4151              	.LVL434:
 4152              	.LBE368:
 734:fltk-1.3.4-1/png/png.c **** }
 4153              		.loc 1 734 0
 4154 01c8 B8010000 		movl	$1, %eax
 4154      00
 4155              	.LVL435:
 4156 01cd 0F1F00   		.p2align 4,,10
 4157              		.p2align 3
 4158              	.L471:
 4159              	.LBE367:
 4160              	.LBE366:
 735:fltk-1.3.4-1/png/png.c **** 
 4161              		.loc 1 735 0
 4162 01d0 488B7C24 		movq	8(%rsp), %rdi
 4162      08
 4163 01d5 6448333C 		xorq	%fs:40, %rdi
 4163      25280000 
 4163      00
 4164 01de 7514     		jne	.L486
 4165 01e0 4883C410 		addq	$16, %rsp
 4166              		.cfi_remember_state
 4167              		.cfi_def_cfa_offset 32
 4168 01e4 5B       		popq	%rbx
 4169              		.cfi_def_cfa_offset 24
 4170 01e5 5D       		popq	%rbp
 4171              		.cfi_def_cfa_offset 16
 4172 01e6 415C     		popq	%r12
 4173              		.cfi_def_cfa_offset 8
 4174 01e8 C3       		ret
 4175              	.LVL436:
 4176 01e9 0F1F8000 		.p2align 4,,10
 4176      000000
 4177              		.p2align 3
 4178              	.L478:
 4179              		.cfi_restore_state
 698:fltk-1.3.4-1/png/png.c **** 
 4180              		.loc 1 698 0
 4181 01f0 31C0     		xorl	%eax, %eax
 4182 01f2 EBDC     		jmp	.L471
 4183              	.LVL437:
 4184              	.L486:
 735:fltk-1.3.4-1/png/png.c **** 
 4185              		.loc 1 735 0
 4186 01f4 E8000000 		call	__stack_chk_fail
 4186      00
 4187              	.LVL438:
 4188              		.cfi_endproc
 4189              	.LFE72:
 4191              		.section	.text.unlikely.png_convert_to_rfc1123_buffer
 4192              	.LCOLDE54:
 4193              		.section	.text.png_convert_to_rfc1123_buffer
 4194              	.LHOTE54:
 4195              		.section	.rodata.str1.1
 4196              	.LC55:
 4197 004f 49676E6F 		.string	"Ignoring invalid time value"
 4197      72696E67 
 4197      20696E76 
 4197      616C6964 
 4197      2074696D 
 4198              		.section	.text.unlikely.png_convert_to_rfc1123,"ax",@progbits
 4199              	.LCOLDB56:
 4200              		.section	.text.png_convert_to_rfc1123,"ax",@progbits
 4201              	.LHOTB56:
 4202              		.p2align 4,,15
 4203              		.globl	png_convert_to_rfc1123
 4205              	png_convert_to_rfc1123:
 4206              	.LFB73:
 745:fltk-1.3.4-1/png/png.c ****    if (png_ptr != NULL)
 4207              		.loc 1 745 0
 4208              		.cfi_startproc
 4209              	.LVL439:
 4210 0000 55       		pushq	%rbp
 4211              		.cfi_def_cfa_offset 16
 4212              		.cfi_offset 6, -16
 4213 0001 53       		pushq	%rbx
 4214              		.cfi_def_cfa_offset 24
 4215              		.cfi_offset 3, -24
 4216 0002 4883EC08 		subq	$8, %rsp
 4217              		.cfi_def_cfa_offset 32
 746:fltk-1.3.4-1/png/png.c ****    {
 4218              		.loc 1 746 0
 4219 0006 4885FF   		testq	%rdi, %rdi
 4220 0009 7425     		je	.L489
 749:fltk-1.3.4-1/png/png.c ****          png_warning(png_ptr, "Ignoring invalid time value");
 4221              		.loc 1 749 0
 4222 000b 488DAFC9 		leaq	969(%rdi), %rbp
 4222      030000
 4223 0012 4889FB   		movq	%rdi, %rbx
 4224 0015 4889EF   		movq	%rbp, %rdi
 4225              	.LVL440:
 4226 0018 E8000000 		call	png_convert_to_rfc1123_buffer
 4226      00
 4227              	.LVL441:
 4228 001d 85C0     		testl	%eax, %eax
 4229 001f 7417     		je	.L492
 4230              	.LVL442:
 4231              	.L488:
 757:fltk-1.3.4-1/png/png.c **** #     endif
 4232              		.loc 1 757 0
 4233 0021 4883C408 		addq	$8, %rsp
 4234              		.cfi_remember_state
 4235              		.cfi_def_cfa_offset 24
 4236 0025 4889E8   		movq	%rbp, %rax
 4237 0028 5B       		popq	%rbx
 4238              		.cfi_def_cfa_offset 16
 4239 0029 5D       		popq	%rbp
 4240              		.cfi_def_cfa_offset 8
 4241 002a C3       		ret
 4242              	.LVL443:
 4243 002b 0F1F4400 		.p2align 4,,10
 4243      00
 4244              		.p2align 3
 4245              	.L489:
 4246              		.cfi_restore_state
 756:fltk-1.3.4-1/png/png.c **** }
 4247              		.loc 1 756 0
 4248 0030 31ED     		xorl	%ebp, %ebp
 4249 0032 EBED     		jmp	.L488
 4250              	.LVL444:
 4251              		.p2align 4,,10
 4252 0034 0F1F4000 		.p2align 3
 4253              	.L492:
 750:fltk-1.3.4-1/png/png.c **** 
 4254              		.loc 1 750 0
 4255 0038 BE000000 		movl	$.LC55, %esi
 4255      00
 4256 003d 4889DF   		movq	%rbx, %rdi
 756:fltk-1.3.4-1/png/png.c **** }
 4257              		.loc 1 756 0
 4258 0040 31ED     		xorl	%ebp, %ebp
 750:fltk-1.3.4-1/png/png.c **** 
 4259              		.loc 1 750 0
 4260 0042 E8000000 		call	png_warning
 4260      00
 4261              	.LVL445:
 4262 0047 EBD8     		jmp	.L488
 4263              		.cfi_endproc
 4264              	.LFE73:
 4266              		.section	.text.unlikely.png_convert_to_rfc1123
 4267              	.LCOLDE56:
 4268              		.section	.text.png_convert_to_rfc1123
 4269              	.LHOTE56:
 4270              		.section	.rodata.str1.8
 4271 00ea 00000000 		.align 8
 4271      0000
 4272              	.LC57:
 4273 00f0 0A6C6962 		.string	"\nlibpng version 1.6.16 - December 22, 2014\nCopyright (c) 1998-2014 Glenn Randers-Pehrso
 4273      706E6720 
 4273      76657273 
 4273      696F6E20 
 4273      312E362E 
 4274              		.section	.text.unlikely.png_get_copyright,"ax",@progbits
 4275              	.LCOLDB58:
 4276              		.section	.text.png_get_copyright,"ax",@progbits
 4277              	.LHOTB58:
 4278              		.p2align 4,,15
 4279              		.globl	png_get_copyright
 4281              	png_get_copyright:
 4282              	.LFB74:
 765:fltk-1.3.4-1/png/png.c ****    PNG_UNUSED(png_ptr)  /* Silence compiler warning about unused png_ptr */
 4283              		.loc 1 765 0
 4284              		.cfi_startproc
 4285              	.LVL446:
 784:fltk-1.3.4-1/png/png.c **** 
 4286              		.loc 1 784 0
 4287 0000 B8000000 		movl	$.LC57, %eax
 4287      00
 4288 0005 C3       		ret
 4289              		.cfi_endproc
 4290              	.LFE74:
 4292              		.section	.text.unlikely.png_get_copyright
 4293              	.LCOLDE58:
 4294              		.section	.text.png_get_copyright
 4295              	.LHOTE58:
 4296              		.section	.text.unlikely.png_get_libpng_ver,"ax",@progbits
 4297              	.LCOLDB59:
 4298              		.section	.text.png_get_libpng_ver,"ax",@progbits
 4299              	.LHOTB59:
 4300              		.p2align 4,,15
 4301              		.globl	png_get_libpng_ver
 4303              	png_get_libpng_ver:
 4304              	.LFB154:
 4305              		.cfi_startproc
 4306 0000 B8000000 		movl	$.LC39, %eax
 4306      00
 4307 0005 C3       		ret
 4308              		.cfi_endproc
 4309              	.LFE154:
 4311              		.section	.text.unlikely.png_get_libpng_ver
 4312              	.LCOLDE59:
 4313              		.section	.text.png_get_libpng_ver
 4314              	.LHOTE59:
 4315              		.section	.text.unlikely.png_get_header_ver,"ax",@progbits
 4316              	.LCOLDB60:
 4317              		.section	.text.png_get_header_ver,"ax",@progbits
 4318              	.LHOTB60:
 4319              		.p2align 4,,15
 4320              		.globl	png_get_header_ver
 4322              	png_get_header_ver:
 4323              	.LFB76:
 803:fltk-1.3.4-1/png/png.c ****    /* Version of *.h files used when building libpng */
 4324              		.loc 1 803 0
 4325              		.cfi_startproc
 4326              	.LVL447:
 807:fltk-1.3.4-1/png/png.c **** 
 4327              		.loc 1 807 0
 4328 0000 B8000000 		movl	$.LC39, %eax
 4328      00
 4329 0005 C3       		ret
 4330              		.cfi_endproc
 4331              	.LFE76:
 4333              		.section	.text.unlikely.png_get_header_ver
 4334              	.LCOLDE60:
 4335              		.section	.text.png_get_header_ver
 4336              	.LHOTE60:
 4337              		.section	.rodata.str1.8
 4338 01ab 00000000 		.align 8
 4338      00
 4339              	.LC61:
 4340 01b0 206C6962 		.string	" libpng version 1.6.16 - December 22, 2014\n\n"
 4340      706E6720 
 4340      76657273 
 4340      696F6E20 
 4340      312E362E 
 4341              		.section	.text.unlikely.png_get_header_version,"ax",@progbits
 4342              	.LCOLDB62:
 4343              		.section	.text.png_get_header_version,"ax",@progbits
 4344              	.LHOTB62:
 4345              		.p2align 4,,15
 4346              		.globl	png_get_header_version
 4348              	png_get_header_version:
 4349              	.LFB77:
 811:fltk-1.3.4-1/png/png.c ****    /* Returns longer string containing both version and date */
 4350              		.loc 1 811 0
 4351              		.cfi_startproc
 4352              	.LVL448:
 823:fltk-1.3.4-1/png/png.c **** 
 4353              		.loc 1 823 0
 4354 0000 B8000000 		movl	$.LC61, %eax
 4354      00
 4355 0005 C3       		ret
 4356              		.cfi_endproc
 4357              	.LFE77:
 4359              		.section	.text.unlikely.png_get_header_version
 4360              	.LCOLDE62:
 4361              		.section	.text.png_get_header_version
 4362              	.LHOTE62:
 4363              		.section	.text.unlikely.png_build_grayscale_palette,"ax",@progbits
 4364              	.LCOLDB63:
 4365              		.section	.text.png_build_grayscale_palette,"ax",@progbits
 4366              	.LHOTB63:
 4367              		.p2align 4,,15
 4368              		.globl	png_build_grayscale_palette
 4370              	png_build_grayscale_palette:
 4371              	.LFB78:
 834:fltk-1.3.4-1/png/png.c ****    int num_palette;
 4372              		.loc 1 834 0
 4373              		.cfi_startproc
 4374              	.LVL449:
 842:fltk-1.3.4-1/png/png.c ****       return;
 4375              		.loc 1 842 0
 4376 0000 4885F6   		testq	%rsi, %rsi
 4377 0003 743E     		je	.L497
 4378 0005 83EF01   		subl	$1, %edi
 4379              	.LVL450:
 4380 0008 83FF07   		cmpl	$7, %edi
 4381 000b 7736     		ja	.L497
 4382 000d 8B04BD00 		movl	CSWTCH.108(,%rdi,4), %eax
 4382      000000
 4383 0014 8B0CBD00 		movl	CSWTCH.109(,%rdi,4), %ecx
 4383      000000
 4384              	.LVL451:
 873:fltk-1.3.4-1/png/png.c ****    {
 4385              		.loc 1 873 0
 4386 001b 85C0     		testl	%eax, %eax
 4387 001d 7E24     		jle	.L497
 4388 001f 83E801   		subl	$1, %eax
 4389              	.LVL452:
 4390 0022 488D5440 		leaq	3(%rax,%rax,2), %rdx
 4390      03
 4391 0027 31C0     		xorl	%eax, %eax
 4392 0029 4801F2   		addq	%rsi, %rdx
 4393              	.LVL453:
 4394 002c 0F1F4000 		.p2align 4,,10
 4395              		.p2align 3
 4396              	.L500:
 875:fltk-1.3.4-1/png/png.c ****       palette[i].green = (png_byte)v;
 4397              		.loc 1 875 0 discriminator 3
 4398 0030 8806     		movb	%al, (%rsi)
 876:fltk-1.3.4-1/png/png.c ****       palette[i].blue = (png_byte)v;
 4399              		.loc 1 876 0 discriminator 3
 4400 0032 884601   		movb	%al, 1(%rsi)
 4401 0035 4883C603 		addq	$3, %rsi
 877:fltk-1.3.4-1/png/png.c ****    }
 4402              		.loc 1 877 0 discriminator 3
 4403 0039 8846FF   		movb	%al, -1(%rsi)
 873:fltk-1.3.4-1/png/png.c ****    {
 4404              		.loc 1 873 0 discriminator 3
 4405 003c 01C8     		addl	%ecx, %eax
 4406              	.LVL454:
 4407 003e 4839D6   		cmpq	%rdx, %rsi
 4408 0041 75ED     		jne	.L500
 4409              	.LVL455:
 4410              	.L497:
 4411 0043 F3C3     		rep ret
 4412              		.cfi_endproc
 4413              	.LFE78:
 4415              		.section	.text.unlikely.png_build_grayscale_palette
 4416              	.LCOLDE63:
 4417              		.section	.text.png_build_grayscale_palette
 4418              	.LHOTE63:
 4419              		.section	.text.unlikely.png_handle_as_unknown,"ax",@progbits
 4420              	.LCOLDB64:
 4421              		.section	.text.png_handle_as_unknown,"ax",@progbits
 4422              	.LHOTB64:
 4423              		.p2align 4,,15
 4424              		.globl	png_handle_as_unknown
 4426              	png_handle_as_unknown:
 4427              	.LFB79:
 885:fltk-1.3.4-1/png/png.c ****    /* Check chunk_name and return "keep" value if it's on the list, else 0 */
 4428              		.loc 1 885 0
 4429              		.cfi_startproc
 4430              	.LVL456:
 889:fltk-1.3.4-1/png/png.c ****       return PNG_HANDLE_CHUNK_AS_DEFAULT;
 4431              		.loc 1 889 0
 4432 0000 4885FF   		testq	%rdi, %rdi
 4433 0003 740B     		je	.L503
 4434 0005 4885F6   		testq	%rsi, %rsi
 4435 0008 7406     		je	.L503
 4436 000a E9000000 		jmp	png_handle_as_unknown.part.5
 4436      00
 4437              	.LVL457:
 4438 000f 90       		.p2align 4,,10
 4439              		.p2align 3
 4440              	.L503:
 914:fltk-1.3.4-1/png/png.c **** 
 4441              		.loc 1 914 0
 4442 0010 31C0     		xorl	%eax, %eax
 4443 0012 C3       		ret
 4444              		.cfi_endproc
 4445              	.LFE79:
 4447              		.section	.text.unlikely.png_handle_as_unknown
 4448              	.LCOLDE64:
 4449              		.section	.text.png_handle_as_unknown
 4450              	.LHOTE64:
 4451              		.section	.text.unlikely.png_chunk_unknown_handling,"ax",@progbits
 4452              	.LCOLDB65:
 4453              		.section	.text.png_chunk_unknown_handling,"ax",@progbits
 4454              	.LHOTB65:
 4455              		.p2align 4,,15
 4456              		.globl	png_chunk_unknown_handling
 4458              	png_chunk_unknown_handling:
 4459              	.LFB80:
 920:fltk-1.3.4-1/png/png.c ****    png_byte chunk_string[5];
 4460              		.loc 1 920 0
 4461              		.cfi_startproc
 4462              	.LVL458:
 4463 0000 4883EC18 		subq	$24, %rsp
 4464              		.cfi_def_cfa_offset 32
 920:fltk-1.3.4-1/png/png.c ****    png_byte chunk_string[5];
 4465              		.loc 1 920 0
 4466 0004 64488B04 		movq	%fs:40, %rax
 4466      25280000 
 4466      00
 4467 000d 48894424 		movq	%rax, 8(%rsp)
 4467      08
 4468 0012 31C0     		xorl	%eax, %eax
 923:fltk-1.3.4-1/png/png.c ****    return png_handle_as_unknown(png_ptr, chunk_string);
 4469              		.loc 1 923 0
 4470 0014 89F0     		movl	%esi, %eax
 4471 0016 40887424 		movb	%sil, 3(%rsp)
 4471      03
 4472 001b C6442404 		movb	$0, 4(%rsp)
 4472      00
 4473              	.LVL459:
 4474 0020 C1E818   		shrl	$24, %eax
 4475 0023 880424   		movb	%al, (%rsp)
 4476 0026 89F0     		movl	%esi, %eax
 4477 0028 C1E810   		shrl	$16, %eax
 4478 002b 88442401 		movb	%al, 1(%rsp)
 4479 002f 89F0     		movl	%esi, %eax
 4480 0031 C1E808   		shrl	$8, %eax
 4481              	.LBB369:
 4482              	.LBB370:
 889:fltk-1.3.4-1/png/png.c ****       return PNG_HANDLE_CHUNK_AS_DEFAULT;
 4483              		.loc 1 889 0
 4484 0034 4885FF   		testq	%rdi, %rdi
 4485              	.LBE370:
 4486              	.LBE369:
 923:fltk-1.3.4-1/png/png.c ****    return png_handle_as_unknown(png_ptr, chunk_string);
 4487              		.loc 1 923 0
 4488 0037 88442402 		movb	%al, 2(%rsp)
 4489              	.LBB373:
 4490              	.LBB371:
 889:fltk-1.3.4-1/png/png.c ****       return PNG_HANDLE_CHUNK_AS_DEFAULT;
 4491              		.loc 1 889 0
 4492 003b 7423     		je	.L507
 4493 003d 4889E6   		movq	%rsp, %rsi
 4494              	.LVL460:
 4495 0040 E8000000 		call	png_handle_as_unknown.part.5
 4495      00
 4496              	.LVL461:
 4497              	.L505:
 4498              	.LBE371:
 4499              	.LBE373:
 925:fltk-1.3.4-1/png/png.c **** #endif /* READ_UNKNOWN_CHUNKS || HANDLE_AS_UNKNOWN */
 4500              		.loc 1 925 0
 4501 0045 488B5424 		movq	8(%rsp), %rdx
 4501      08
 4502 004a 64483314 		xorq	%fs:40, %rdx
 4502      25280000 
 4502      00
 4503 0053 750F     		jne	.L509
 4504 0055 4883C418 		addq	$24, %rsp
 4505              		.cfi_remember_state
 4506              		.cfi_def_cfa_offset 8
 4507 0059 C3       		ret
 4508              	.LVL462:
 4509 005a 660F1F44 		.p2align 4,,10
 4509      0000
 4510              		.p2align 3
 4511              	.L507:
 4512              		.cfi_restore_state
 4513              	.LBB374:
 4514              	.LBB372:
 890:fltk-1.3.4-1/png/png.c **** 
 4515              		.loc 1 890 0
 4516 0060 31C0     		xorl	%eax, %eax
 4517 0062 EBE1     		jmp	.L505
 4518              	.LVL463:
 4519              	.L509:
 4520              	.LBE372:
 4521              	.LBE374:
 925:fltk-1.3.4-1/png/png.c **** #endif /* READ_UNKNOWN_CHUNKS || HANDLE_AS_UNKNOWN */
 4522              		.loc 1 925 0
 4523 0064 E8000000 		call	__stack_chk_fail
 4523      00
 4524              	.LVL464:
 4525              		.cfi_endproc
 4526              	.LFE80:
 4528              		.section	.text.unlikely.png_chunk_unknown_handling
 4529              	.LCOLDE65:
 4530              		.section	.text.png_chunk_unknown_handling
 4531              	.LHOTE65:
 4532              		.section	.text.unlikely.png_reset_zstream,"ax",@progbits
 4533              	.LCOLDB66:
 4534              		.section	.text.png_reset_zstream,"ax",@progbits
 4535              	.LHOTB66:
 4536              		.p2align 4,,15
 4537              		.globl	png_reset_zstream
 4539              	png_reset_zstream:
 4540              	.LFB81:
 933:fltk-1.3.4-1/png/png.c ****    if (png_ptr == NULL)
 4541              		.loc 1 933 0
 4542              		.cfi_startproc
 4543              	.LVL465:
 934:fltk-1.3.4-1/png/png.c ****       return Z_STREAM_ERROR;
 4544              		.loc 1 934 0
 4545 0000 4885FF   		testq	%rdi, %rdi
 4546 0003 7413     		je	.L511
 938:fltk-1.3.4-1/png/png.c **** }
 4547              		.loc 1 938 0
 4548 0005 4881C740 		addq	$320, %rdi
 4548      010000
 4549              	.LVL466:
 4550 000c E9000000 		jmp	inflateReset
 4550      00
 4551              	.LVL467:
 4552              		.p2align 4,,10
 4553 0011 0F1F8000 		.p2align 3
 4553      000000
 4554              	.L511:
 939:fltk-1.3.4-1/png/png.c **** #endif /* READ */
 4555              		.loc 1 939 0
 4556 0018 B8FEFFFF 		movl	$-2, %eax
 4556      FF
 4557 001d C3       		ret
 4558              		.cfi_endproc
 4559              	.LFE81:
 4561              		.section	.text.unlikely.png_reset_zstream
 4562              	.LCOLDE66:
 4563              		.section	.text.png_reset_zstream
 4564              	.LHOTE66:
 4565              		.section	.text.unlikely.png_access_version_number,"ax",@progbits
 4566              	.LCOLDB67:
 4567              		.section	.text.png_access_version_number,"ax",@progbits
 4568              	.LHOTB67:
 4569              		.p2align 4,,15
 4570              		.globl	png_access_version_number
 4572              	png_access_version_number:
 4573              	.LFB82:
 945:fltk-1.3.4-1/png/png.c ****    /* Version of *.c files used when building libpng */
 4574              		.loc 1 945 0
 4575              		.cfi_startproc
 948:fltk-1.3.4-1/png/png.c **** 
 4576              		.loc 1 948 0
 4577 0000 B8782900 		movl	$10616, %eax
 4577      00
 4578 0005 C3       		ret
 4579              		.cfi_endproc
 4580              	.LFE82:
 4582              		.section	.text.unlikely.png_access_version_number
 4583              	.LCOLDE67:
 4584              		.section	.text.png_access_version_number
 4585              	.LHOTE67:
 4586              		.section	.rodata.str1.1
 4587              	.LC68:
 4588 006b 756E6578 		.string	"unexpected zlib return code"
 4588      70656374 
 4588      6564207A 
 4588      6C696220 
 4588      72657475 
 4589              	.LC69:
 4590 0087 756E6578 		.string	"unexpected end of LZ stream"
 4590      70656374 
 4590      65642065 
 4590      6E64206F 
 4590      66204C5A 
 4591              	.LC70:
 4592 00a3 6D697373 		.string	"missing LZ dictionary"
 4592      696E6720 
 4592      4C5A2064 
 4592      69637469 
 4592      6F6E6172 
 4593              	.LC71:
 4594 00b9 7A6C6962 		.string	"zlib IO error"
 4594      20494F20 
 4594      6572726F 
 4594      7200
 4595              	.LC72:
 4596 00c7 62616420 		.string	"bad parameters to zlib"
 4596      70617261 
 4596      6D657465 
 4596      72732074 
 4596      6F207A6C 
 4597              	.LC73:
 4598 00de 64616D61 		.string	"damaged LZ stream"
 4598      67656420 
 4598      4C5A2073 
 4598      74726561 
 4598      6D00
 4599              	.LC74:
 4600 00f0 696E7375 		.string	"insufficient memory"
 4600      66666963 
 4600      69656E74 
 4600      206D656D 
 4600      6F727900 
 4601              	.LC75:
 4602 0104 7472756E 		.string	"truncated"
 4602      63617465 
 4602      6400
 4603              	.LC76:
 4604 010e 756E7375 		.string	"unsupported zlib version"
 4604      70706F72 
 4604      74656420 
 4604      7A6C6962 
 4604      20766572 
 4605              	.LC77:
 4606 0127 756E6578 		.string	"unexpected zlib return"
 4606      70656374 
 4606      6564207A 
 4606      6C696220 
 4606      72657475 
 4607              		.section	.text.unlikely.png_zstream_error,"ax",@progbits
 4608              	.LCOLDB78:
 4609              		.section	.text.png_zstream_error,"ax",@progbits
 4610              	.LHOTB78:
 4611              		.p2align 4,,15
 4612              		.globl	png_zstream_error
 4614              	png_zstream_error:
 4615              	.LFB83:
 959:fltk-1.3.4-1/png/png.c ****    /* Translate 'ret' into an appropriate error string, priority is given to the
 4616              		.loc 1 959 0
 4617              		.cfi_startproc
 4618              	.LVL468:
 964:fltk-1.3.4-1/png/png.c ****    {
 4619              		.loc 1 964 0
 4620 0000 4883BF70 		cmpq	$0, 368(%rdi)
 4620      01000000 
 4621 0008 7406     		je	.L526
 4622 000a F3C3     		rep ret
 4623 000c 0F1F4000 		.p2align 4,,10
 4624              		.p2align 3
 4625              	.L526:
 964:fltk-1.3.4-1/png/png.c ****    {
 4626              		.loc 1 964 0 is_stmt 0 discriminator 1
 4627 0010 83C607   		addl	$7, %esi
 4628              	.LVL469:
 4629 0013 83FE09   		cmpl	$9, %esi
 4630 0016 0F879C00 		ja	.L515
 4630      0000
 4631 001c FF24F500 		jmp	*.L517(,%rsi,8)
 4631      000000
 4632              		.section	.rodata.png_zstream_error,"a",@progbits
 4633              		.align 8
 4634              		.align 4
 4635              	.L517:
 4636 0000 00000000 		.quad	.L516
 4636      00000000 
 4637 0008 00000000 		.quad	.L518
 4637      00000000 
 4638 0010 00000000 		.quad	.L519
 4638      00000000 
 4639 0018 00000000 		.quad	.L520
 4639      00000000 
 4640 0020 00000000 		.quad	.L521
 4640      00000000 
 4641 0028 00000000 		.quad	.L522
 4641      00000000 
 4642 0030 00000000 		.quad	.L523
 4642      00000000 
 4643 0038 00000000 		.quad	.L515
 4643      00000000 
 4644 0040 00000000 		.quad	.L524
 4644      00000000 
 4645 0048 00000000 		.quad	.L525
 4645      00000000 
 4646              		.section	.text.png_zstream_error
 4647              		.p2align 4,,10
 4648 0023 0F1F4400 		.p2align 3
 4648      00
 4649              	.L525:
 980:fltk-1.3.4-1/png/png.c ****          break;
 4650              		.loc 1 980 0 is_stmt 1
 4651 0028 48C78770 		movq	$.LC70, 368(%rdi)
 4651      01000000 
 4651      000000
 981:fltk-1.3.4-1/png/png.c **** 
 4652              		.loc 1 981 0
 4653 0033 C3       		ret
 4654              		.p2align 4,,10
 4655 0034 0F1F4000 		.p2align 3
 4656              	.L516:
1018:fltk-1.3.4-1/png/png.c ****          break;
 4657              		.loc 1 1018 0
 4658 0038 48C78770 		movq	$.LC77, 368(%rdi)
 4658      01000000 
 4658      000000
 4659 0043 C3       		ret
 4660              		.p2align 4,,10
 4661 0044 0F1F4000 		.p2align 3
 4662              	.L518:
1009:fltk-1.3.4-1/png/png.c ****          break;
 4663              		.loc 1 1009 0
 4664 0048 48C78770 		movq	$.LC76, 368(%rdi)
 4664      01000000 
 4664      000000
1010:fltk-1.3.4-1/png/png.c **** 
 4665              		.loc 1 1010 0
 4666 0053 C3       		ret
 4667              		.p2align 4,,10
 4668 0054 0F1F4000 		.p2align 3
 4669              	.L519:
1005:fltk-1.3.4-1/png/png.c ****          break;
 4670              		.loc 1 1005 0
 4671 0058 48C78770 		movq	$.LC75, 368(%rdi)
 4671      01000000 
 4671      000000
1006:fltk-1.3.4-1/png/png.c **** 
 4672              		.loc 1 1006 0
 4673 0063 C3       		ret
 4674              		.p2align 4,,10
 4675 0064 0F1F4000 		.p2align 3
 4676              	.L520:
 998:fltk-1.3.4-1/png/png.c ****          break;
 4677              		.loc 1 998 0
 4678 0068 48C78770 		movq	$.LC74, 368(%rdi)
 4678      01000000 
 4678      000000
 999:fltk-1.3.4-1/png/png.c **** 
 4679              		.loc 1 999 0
 4680 0073 C3       		ret
 4681              		.p2align 4,,10
 4682 0074 0F1F4000 		.p2align 3
 4683              	.L521:
 994:fltk-1.3.4-1/png/png.c ****          break;
 4684              		.loc 1 994 0
 4685 0078 48C78770 		movq	$.LC73, 368(%rdi)
 4685      01000000 
 4685      000000
 995:fltk-1.3.4-1/png/png.c **** 
 4686              		.loc 1 995 0
 4687 0083 C3       		ret
 4688              		.p2align 4,,10
 4689 0084 0F1F4000 		.p2align 3
 4690              	.L522:
 990:fltk-1.3.4-1/png/png.c ****          break;
 4691              		.loc 1 990 0
 4692 0088 48C78770 		movq	$.LC72, 368(%rdi)
 4692      01000000 
 4692      000000
 991:fltk-1.3.4-1/png/png.c **** 
 4693              		.loc 1 991 0
 4694 0093 C3       		ret
 4695              		.p2align 4,,10
 4696 0094 0F1F4000 		.p2align 3
 4697              	.L523:
 985:fltk-1.3.4-1/png/png.c ****          break;
 4698              		.loc 1 985 0
 4699 0098 48C78770 		movq	$.LC71, 368(%rdi)
 4699      01000000 
 4699      000000
 986:fltk-1.3.4-1/png/png.c **** 
 4700              		.loc 1 986 0
 4701 00a3 C3       		ret
 4702              		.p2align 4,,10
 4703 00a4 0F1F4000 		.p2align 3
 4704              	.L524:
 973:fltk-1.3.4-1/png/png.c ****          break;
 4705              		.loc 1 973 0
 4706 00a8 48C78770 		movq	$.LC69, 368(%rdi)
 4706      01000000 
 4706      000000
 974:fltk-1.3.4-1/png/png.c **** 
 4707              		.loc 1 974 0
 4708 00b3 C3       		ret
 4709              		.p2align 4,,10
 4710 00b4 0F1F4000 		.p2align 3
 4711              	.L515:
 968:fltk-1.3.4-1/png/png.c ****          break;
 4712              		.loc 1 968 0
 4713 00b8 48C78770 		movq	$.LC68, 368(%rdi)
 4713      01000000 
 4713      000000
 969:fltk-1.3.4-1/png/png.c **** 
 4714              		.loc 1 969 0
 4715 00c3 C3       		ret
 4716              		.cfi_endproc
 4717              	.LFE83:
 4719              		.section	.text.unlikely.png_zstream_error
 4720              	.LCOLDE78:
 4721              		.section	.text.png_zstream_error
 4722              	.LHOTE78:
 4723              		.section	.rodata.str1.1
 4724              	.LC79:
 4725 013e 67616D6D 		.string	"gamma value out of range"
 4725      61207661 
 4725      6C756520 
 4725      6F757420 
 4725      6F662072 
 4726              	.LC80:
 4727 0157 6475706C 		.string	"duplicate"
 4727      69636174 
 4727      6500
 4728              		.section	.text.unlikely.png_colorspace_set_gamma,"ax",@progbits
 4729              	.LCOLDB81:
 4730              		.section	.text.png_colorspace_set_gamma,"ax",@progbits
 4731              	.LHOTB81:
 4732              		.p2align 4,,15
 4733              		.globl	png_colorspace_set_gamma
 4735              	png_colorspace_set_gamma:
 4736              	.LFB85:
1076:fltk-1.3.4-1/png/png.c ****    /* Changed in libpng-1.5.4 to limit the values to ensure overflow can't
 4737              		.loc 1 1076 0
 4738              		.cfi_startproc
 4739              	.LVL470:
1090:fltk-1.3.4-1/png/png.c ****       errmsg = "gamma value out of range";
 4740              		.loc 1 1090 0
 4741 0000 8D42F0   		leal	-16(%rdx), %eax
 4742 0003 3D30BE40 		cmpl	$624999984, %eax
 4742      25
 4743 0008 7756     		ja	.L528
1095:fltk-1.3.4-1/png/png.c ****          (colorspace->flags & PNG_COLORSPACE_FROM_gAMA) != 0)
 4744              		.loc 1 1095 0
 4745 000a F6872D01 		testb	$-128, 301(%rdi)
 4745      000080
1096:fltk-1.3.4-1/png/png.c ****          errmsg = "duplicate";
 4746              		.loc 1 1096 0
 4747 0011 0FB7464A 		movzwl	74(%rsi), %eax
1095:fltk-1.3.4-1/png/png.c ****          (colorspace->flags & PNG_COLORSPACE_FROM_gAMA) != 0)
 4748              		.loc 1 1095 0
 4749 0015 7411     		je	.L530
1095:fltk-1.3.4-1/png/png.c ****          (colorspace->flags & PNG_COLORSPACE_FROM_gAMA) != 0)
 4750              		.loc 1 1095 0 is_stmt 0 discriminator 1
 4751 0017 A808     		testb	$8, %al
 4752 0019 740D     		je	.L530
1097:fltk-1.3.4-1/png/png.c **** #  endif
 4753              		.loc 1 1097 0 is_stmt 1
 4754 001b B9000000 		movl	$.LC80, %ecx
 4754      00
 4755 0020 EB47     		jmp	.L531
 4756              		.p2align 4,,10
 4757 0022 660F1F44 		.p2align 3
 4757      0000
 4758              	.L530:
1101:fltk-1.3.4-1/png/png.c ****       return;
 4759              		.loc 1 1101 0
 4760 0028 6685C0   		testw	%ax, %ax
 4761 002b 782F     		js	.L541
1076:fltk-1.3.4-1/png/png.c ****    /* Changed in libpng-1.5.4 to limit the values to ensure overflow can't
 4762              		.loc 1 1076 0
 4763 002d 55       		pushq	%rbp
 4764              		.cfi_def_cfa_offset 16
 4765              		.cfi_offset 6, -16
 4766 002e 53       		pushq	%rbx
 4767              		.cfi_def_cfa_offset 24
 4768              		.cfi_offset 3, -24
 4769 002f 89D5     		movl	%edx, %ebp
 4770 0031 4889F3   		movq	%rsi, %rbx
 4771 0034 488D564A 		leaq	74(%rsi), %rdx
 4772              	.LVL471:
1106:fltk-1.3.4-1/png/png.c ****           1/*from gAMA*/) != 0)
 4773              		.loc 1 1106 0
 4774 0038 41B80100 		movl	$1, %r8d
 4774      0000
1076:fltk-1.3.4-1/png/png.c ****    /* Changed in libpng-1.5.4 to limit the values to ensure overflow can't
 4775              		.loc 1 1076 0
 4776 003e 4883EC08 		subq	$8, %rsp
 4777              		.cfi_def_cfa_offset 32
1106:fltk-1.3.4-1/png/png.c ****           1/*from gAMA*/) != 0)
 4778              		.loc 1 1106 0
 4779 0042 8B36     		movl	(%rsi), %esi
 4780              	.LVL472:
 4781 0044 89E9     		movl	%ebp, %ecx
 4782 0046 E8000000 		call	png_colorspace_check_gamma.isra.11
 4782      00
 4783              	.LVL473:
 4784 004b 85C0     		testl	%eax, %eax
 4785 004d 7407     		je	.L527
1111:fltk-1.3.4-1/png/png.c ****             (PNG_COLORSPACE_HAVE_GAMMA | PNG_COLORSPACE_FROM_gAMA);
 4786              		.loc 1 1111 0
 4787 004f 66834B4A 		orw	$9, 74(%rbx)
 4787      09
1110:fltk-1.3.4-1/png/png.c ****          colorspace->flags |=
 4788              		.loc 1 1110 0
 4789 0054 892B     		movl	%ebp, (%rbx)
 4790              	.L527:
1126:fltk-1.3.4-1/png/png.c **** 
 4791              		.loc 1 1126 0
 4792 0056 4883C408 		addq	$8, %rsp
 4793              		.cfi_def_cfa_offset 24
 4794 005a 5B       		popq	%rbx
 4795              		.cfi_restore 3
 4796              		.cfi_def_cfa_offset 16
 4797              	.LVL474:
 4798 005b 5D       		popq	%rbp
 4799              		.cfi_restore 6
 4800              		.cfi_def_cfa_offset 8
 4801              	.LVL475:
 4802              	.L541:
 4803 005c F3C3     		rep ret
 4804              	.LVL476:
 4805 005e 6690     		.p2align 4,,10
 4806              		.p2align 3
 4807              	.L528:
 4808 0060 0FB7464A 		movzwl	74(%rsi), %eax
1091:fltk-1.3.4-1/png/png.c **** 
 4809              		.loc 1 1091 0
 4810 0064 B9000000 		movl	$.LC79, %ecx
 4810      00
 4811              	.L531:
 4812              	.LVL477:
1124:fltk-1.3.4-1/png/png.c ****    png_chunk_report(png_ptr, errmsg, PNG_CHUNK_WRITE_ERROR);
 4813              		.loc 1 1124 0
 4814 0069 660D0080 		orw	$-32768, %ax
1125:fltk-1.3.4-1/png/png.c **** }
 4815              		.loc 1 1125 0
 4816 006d BA010000 		movl	$1, %edx
 4816      00
 4817              	.LVL478:
1124:fltk-1.3.4-1/png/png.c ****    png_chunk_report(png_ptr, errmsg, PNG_CHUNK_WRITE_ERROR);
 4818              		.loc 1 1124 0
 4819 0072 6689464A 		movw	%ax, 74(%rsi)
1125:fltk-1.3.4-1/png/png.c **** }
 4820              		.loc 1 1125 0
 4821 0076 4889CE   		movq	%rcx, %rsi
 4822              	.LVL479:
 4823 0079 E9000000 		jmp	png_chunk_report
 4823      00
 4824              	.LVL480:
 4825              		.cfi_endproc
 4826              	.LFE85:
 4828              		.section	.text.unlikely.png_colorspace_set_gamma
 4829              	.LCOLDE81:
 4830              		.section	.text.png_colorspace_set_gamma
 4831              	.LHOTE81:
 4832              		.section	.text.unlikely.png_colorspace_sync_info,"ax",@progbits
 4833              	.LCOLDB82:
 4834              		.section	.text.png_colorspace_sync_info,"ax",@progbits
 4835              	.LHOTB82:
 4836              		.p2align 4,,15
 4837              		.globl	png_colorspace_sync_info
 4839              	png_colorspace_sync_info:
 4840              	.LFB86:
1130:fltk-1.3.4-1/png/png.c ****    if ((info_ptr->colorspace.flags & PNG_COLORSPACE_INVALID) != 0)
 4841              		.loc 1 1130 0
 4842              		.cfi_startproc
 4843              	.LVL481:
1131:fltk-1.3.4-1/png/png.c ****    {
 4844              		.loc 1 1131 0
 4845 0000 0FB7567E 		movzwl	126(%rsi), %edx
 4846 0004 6685D2   		testw	%dx, %dx
 4847 0007 7847     		js	.L553
1152:fltk-1.3.4-1/png/png.c ****             info_ptr->valid |= PNG_INFO_sRGB;
 4848              		.loc 1 1152 0
 4849 0009 F6C280   		testb	$-128, %dl
1153:fltk-1.3.4-1/png/png.c **** 
 4850              		.loc 1 1153 0
 4851 000c 8B4608   		movl	8(%rsi), %eax
1152:fltk-1.3.4-1/png/png.c ****             info_ptr->valid |= PNG_INFO_sRGB;
 4852              		.loc 1 1152 0
 4853 000f 751F     		jne	.L554
1156:fltk-1.3.4-1/png/png.c **** 
 4854              		.loc 1 1156 0
 4855 0011 80E4F7   		andb	$247, %ah
1158:fltk-1.3.4-1/png/png.c ****             info_ptr->valid |= PNG_INFO_cHRM;
 4856              		.loc 1 1158 0
 4857 0014 F6C202   		testb	$2, %dl
1156:fltk-1.3.4-1/png/png.c **** 
 4858              		.loc 1 1156 0
 4859 0017 894608   		movl	%eax, 8(%rsi)
1158:fltk-1.3.4-1/png/png.c ****             info_ptr->valid |= PNG_INFO_cHRM;
 4860              		.loc 1 1158 0
 4861 001a 741F     		je	.L547
 4862              	.L556:
1159:fltk-1.3.4-1/png/png.c **** 
 4863              		.loc 1 1159 0
 4864 001c 83C804   		orl	$4, %eax
1165:fltk-1.3.4-1/png/png.c ****          info_ptr->valid |= PNG_INFO_gAMA;
 4865              		.loc 1 1165 0
 4866 001f 83E201   		andl	$1, %edx
1159:fltk-1.3.4-1/png/png.c **** 
 4867              		.loc 1 1159 0
 4868 0022 894608   		movl	%eax, 8(%rsi)
1165:fltk-1.3.4-1/png/png.c ****          info_ptr->valid |= PNG_INFO_gAMA;
 4869              		.loc 1 1165 0
 4870 0025 751F     		jne	.L555
 4871              	.L549:
1169:fltk-1.3.4-1/png/png.c ****    }
 4872              		.loc 1 1169 0
 4873 0027 83E0FE   		andl	$-2, %eax
 4874 002a 894608   		movl	%eax, 8(%rsi)
 4875              	.L542:
 4876 002d F3C3     		rep ret
 4877 002f 90       		.p2align 4,,10
 4878              		.p2align 3
 4879              	.L554:
1153:fltk-1.3.4-1/png/png.c **** 
 4880              		.loc 1 1153 0
 4881 0030 80CC08   		orb	$8, %ah
1158:fltk-1.3.4-1/png/png.c ****             info_ptr->valid |= PNG_INFO_cHRM;
 4882              		.loc 1 1158 0
 4883 0033 F6C202   		testb	$2, %dl
1153:fltk-1.3.4-1/png/png.c **** 
 4884              		.loc 1 1153 0
 4885 0036 894608   		movl	%eax, 8(%rsi)
1158:fltk-1.3.4-1/png/png.c ****             info_ptr->valid |= PNG_INFO_cHRM;
 4886              		.loc 1 1158 0
 4887 0039 75E1     		jne	.L556
 4888              	.L547:
1162:fltk-1.3.4-1/png/png.c **** #     endif
 4889              		.loc 1 1162 0
 4890 003b 83E0FB   		andl	$-5, %eax
1165:fltk-1.3.4-1/png/png.c ****          info_ptr->valid |= PNG_INFO_gAMA;
 4891              		.loc 1 1165 0
 4892 003e 83E201   		andl	$1, %edx
1162:fltk-1.3.4-1/png/png.c **** #     endif
 4893              		.loc 1 1162 0
 4894 0041 894608   		movl	%eax, 8(%rsi)
1165:fltk-1.3.4-1/png/png.c ****          info_ptr->valid |= PNG_INFO_gAMA;
 4895              		.loc 1 1165 0
 4896 0044 74E1     		je	.L549
 4897              	.L555:
1166:fltk-1.3.4-1/png/png.c **** 
 4898              		.loc 1 1166 0
 4899 0046 83C801   		orl	$1, %eax
 4900 0049 894608   		movl	%eax, 8(%rsi)
 4901 004c C3       		ret
 4902 004d 0F1F00   		.p2align 4,,10
 4903              		.p2align 3
 4904              	.L553:
 4905              	.LVL482:
 4906              	.LBB379:
 4907              	.LBB380:
1134:fltk-1.3.4-1/png/png.c ****          PNG_INFO_iCCP);
 4908              		.loc 1 1134 0
 4909 0050 816608FA 		andl	$-6150, 8(%rsi)
 4909      E7FFFF
 4910              	.LVL483:
 4911              	.LBB381:
 4912              	.LBB382:
 447:fltk-1.3.4-1/png/png.c ****       return;
 4913              		.loc 1 447 0
 4914 0057 4885FF   		testq	%rdi, %rdi
 4915 005a 74D1     		je	.L542
 4916 005c B9FFFFFF 		movl	$-1, %ecx
 4916      FF
 4917 0061 BA100000 		movl	$16, %edx
 4917      00
 4918 0066 E9000000 		jmp	png_free_data.part.3
 4918      00
 4919              	.LVL484:
 4920              	.LBE382:
 4921              	.LBE381:
 4922              	.LBE380:
 4923              	.LBE379:
 4924              		.cfi_endproc
 4925              	.LFE86:
 4927              		.section	.text.unlikely.png_colorspace_sync_info
 4928              	.LCOLDE82:
 4929              		.section	.text.png_colorspace_sync_info
 4930              	.LHOTE82:
 4931              		.section	.text.unlikely.png_colorspace_sync,"ax",@progbits
 4932              	.LCOLDB83:
 4933              		.section	.text.png_colorspace_sync,"ax",@progbits
 4934              	.LHOTB83:
 4935              		.p2align 4,,15
 4936              		.globl	png_colorspace_sync
 4938              	png_colorspace_sync:
 4939              	.LFB87:
1176:fltk-1.3.4-1/png/png.c ****    if (info_ptr == NULL) /* reduce code size; check here not in the caller */
 4940              		.loc 1 1176 0
 4941              		.cfi_startproc
 4942              	.LVL485:
1177:fltk-1.3.4-1/png/png.c ****       return;
 4943              		.loc 1 1177 0
 4944 0000 4885F6   		testq	%rsi, %rsi
 4945 0003 747B     		je	.L557
1180:fltk-1.3.4-1/png/png.c ****    png_colorspace_sync_info(png_ptr, info_ptr);
 4946              		.loc 1 1180 0
 4947 0005 488B87D8 		movq	1240(%rdi), %rax
 4947      040000
 4948 000c 48894634 		movq	%rax, 52(%rsi)
 4949 0010 488B87E0 		movq	1248(%rdi), %rax
 4949      040000
 4950 0017 4889463C 		movq	%rax, 60(%rsi)
 4951 001b 488B87E8 		movq	1256(%rdi), %rax
 4951      040000
 4952 0022 48894644 		movq	%rax, 68(%rsi)
 4953 0026 488B87F0 		movq	1264(%rdi), %rax
 4953      040000
 4954 002d 4889464C 		movq	%rax, 76(%rsi)
 4955 0031 488B87F8 		movq	1272(%rdi), %rax
 4955      040000
 4956 0038 48894654 		movq	%rax, 84(%rsi)
 4957 003c 488B8700 		movq	1280(%rdi), %rax
 4957      050000
 4958 0043 4889465C 		movq	%rax, 92(%rsi)
 4959 0047 488B8708 		movq	1288(%rdi), %rax
 4959      050000
 4960 004e 48894664 		movq	%rax, 100(%rsi)
 4961 0052 488B8710 		movq	1296(%rdi), %rax
 4961      050000
 4962 0059 4889466C 		movq	%rax, 108(%rsi)
 4963 005d 488B8718 		movq	1304(%rdi), %rax
 4963      050000
 4964 0064 48894674 		movq	%rax, 116(%rsi)
 4965 0068 8B872005 		movl	1312(%rdi), %eax
 4965      0000
 4966 006e 89467C   		movl	%eax, 124(%rsi)
1181:fltk-1.3.4-1/png/png.c **** }
 4967              		.loc 1 1181 0
 4968 0071 E9000000 		jmp	png_colorspace_sync_info
 4968      00
 4969              	.LVL486:
 4970 0076 662E0F1F 		.p2align 4,,10
 4970      84000000 
 4970      0000
 4971              		.p2align 3
 4972              	.L557:
 4973 0080 F3C3     		rep ret
 4974              		.cfi_endproc
 4975              	.LFE87:
 4977              		.section	.text.unlikely.png_colorspace_sync
 4978              	.LCOLDE83:
 4979              		.section	.text.png_colorspace_sync
 4980              	.LHOTE83:
 4981              		.section	.rodata.str1.1
 4982              	.LC84:
 4983 0161 696E7661 		.string	"invalid sRGB rendering intent"
 4983      6C696420 
 4983      73524742 
 4983      2072656E 
 4983      64657269 
 4984              	.LC85:
 4985 017f 73524742 		.string	"sRGB"
 4985      00
 4986              		.section	.rodata.str1.8
 4987 01dd 000000   		.align 8
 4988              	.LC86:
 4989 01e0 696E636F 		.string	"inconsistent rendering intents"
 4989      6E736973 
 4989      74656E74 
 4989      2072656E 
 4989      64657269 
 4990 01ff 00       		.align 8
 4991              	.LC87:
 4992 0200 6475706C 		.string	"duplicate sRGB information ignored"
 4992      69636174 
 4992      65207352 
 4992      47422069 
 4992      6E666F72 
 4993 0223 00000000 		.align 8
 4993      00
 4994              	.LC88:
 4995 0228 6348524D 		.string	"cHRM chunk does not match sRGB"
 4995      20636875 
 4995      6E6B2064 
 4995      6F657320 
 4995      6E6F7420 
 4996              		.section	.text.unlikely.png_colorspace_set_sRGB,"ax",@progbits
 4997              	.LCOLDB89:
 4998              		.section	.text.png_colorspace_set_sRGB,"ax",@progbits
 4999              	.LHOTB89:
 5000              		.p2align 4,,15
 5001              		.globl	png_colorspace_set_sRGB
 5003              	png_colorspace_set_sRGB:
 5004              	.LFB102:
1835:fltk-1.3.4-1/png/png.c ****    /* sRGB sets known gamma, end points and (from the chunk) intent. */
 5005              		.loc 1 1835 0
 5006              		.cfi_startproc
 5007              	.LVL487:
 5008 0000 4154     		pushq	%r12
 5009              		.cfi_def_cfa_offset 16
 5010              		.cfi_offset 12, -16
 5011 0002 55       		pushq	%rbp
 5012              		.cfi_def_cfa_offset 24
 5013              		.cfi_offset 6, -24
 5014 0003 53       		pushq	%rbx
 5015              		.cfi_def_cfa_offset 32
 5016              		.cfi_offset 3, -32
1857:fltk-1.3.4-1/png/png.c ****       return 0;
 5017              		.loc 1 1857 0
 5018 0004 0FB7464A 		movzwl	74(%rsi), %eax
 5019 0008 6685C0   		testw	%ax, %ax
 5020 000b 0F884F01 		js	.L565
 5020      0000
1869:fltk-1.3.4-1/png/png.c ****       return png_icc_profile_error(png_ptr, colorspace, "sRGB",
 5021              		.loc 1 1869 0
 5022 0011 83FA03   		cmpl	$3, %edx
1870:fltk-1.3.4-1/png/png.c ****          (unsigned)intent, "invalid sRGB rendering intent");
 5023              		.loc 1 1870 0
 5024 0014 89D1     		movl	%edx, %ecx
 5025 0016 41B80000 		movl	$.LC84, %r8d
 5025      0000
1869:fltk-1.3.4-1/png/png.c ****       return png_icc_profile_error(png_ptr, colorspace, "sRGB",
 5026              		.loc 1 1869 0
 5027 001c 0F87F600 		ja	.L573
 5027      0000
1873:fltk-1.3.4-1/png/png.c ****       colorspace->rendering_intent != intent)
 5028              		.loc 1 1873 0
 5029 0022 A804     		testb	$4, %al
 5030 0024 740C     		je	.L562
1873:fltk-1.3.4-1/png/png.c ****       colorspace->rendering_intent != intent)
 5031              		.loc 1 1873 0 is_stmt 0 discriminator 1
 5032 0026 0FB74E48 		movzwl	72(%rsi), %ecx
 5033 002a 39CA     		cmpl	%ecx, %edx
 5034 002c 0F85DE00 		jne	.L574
 5034      0000
 5035              	.L562:
1878:fltk-1.3.4-1/png/png.c ****    {
 5036              		.loc 1 1878 0 is_stmt 1
 5037 0032 A820     		testb	$32, %al
 5038 0034 89D5     		movl	%edx, %ebp
 5039 0036 4889F3   		movq	%rsi, %rbx
 5040 0039 4989FC   		movq	%rdi, %r12
 5041 003c 0F85EE00 		jne	.L575
 5041      0000
 5042              	.LVL488:
1887:fltk-1.3.4-1/png/png.c ****       !png_colorspace_endpoints_match(&sRGB_xy, &colorspace->end_points_xy,
 5043              		.loc 1 1887 0
 5044 0042 A802     		testb	$2, %al
 5045 0044 741B     		je	.L564
1888:fltk-1.3.4-1/png/png.c ****          100))
 5046              		.loc 1 1888 0 discriminator 1
 5047 0046 488D7604 		leaq	4(%rsi), %rsi
 5048 004a BA640000 		movl	$100, %edx
 5048      00
 5049              	.LVL489:
 5050 004f BF000000 		movl	$sRGB_xy, %edi
 5050      00
 5051              	.LVL490:
 5052 0054 E8000000 		call	png_colorspace_endpoints_match
 5052      00
 5053              	.LVL491:
1887:fltk-1.3.4-1/png/png.c ****       !png_colorspace_endpoints_match(&sRGB_xy, &colorspace->end_points_xy,
 5054              		.loc 1 1887 0 discriminator 1
 5055 0059 85C0     		testl	%eax, %eax
 5056 005b 0F84E700 		je	.L576
 5056      0000
 5057              	.L564:
1896:fltk-1.3.4-1/png/png.c ****       2/*from sRGB*/);
 5058              		.loc 1 1896 0
 5059 0061 8B33     		movl	(%rbx), %esi
 5060 0063 488D534A 		leaq	74(%rbx), %rdx
 5061 0067 4C89E7   		movq	%r12, %rdi
 5062 006a 41B80200 		movl	$2, %r8d
 5062      0000
 5063 0070 B98FB100 		movl	$45455, %ecx
 5063      00
 5064 0075 E8000000 		call	png_colorspace_check_gamma.isra.11
 5064      00
 5065              	.LVL492:
1914:fltk-1.3.4-1/png/png.c ****       (PNG_COLORSPACE_MATCHES_sRGB|PNG_COLORSPACE_FROM_sRGB);
 5066              		.loc 1 1914 0
 5067 007a 0FB7434A 		movzwl	74(%rbx), %eax
1900:fltk-1.3.4-1/png/png.c ****    colorspace->flags |= PNG_COLORSPACE_HAVE_INTENT;
 5068              		.loc 1 1900 0
 5069 007e 66896B48 		movw	%bp, 72(%rbx)
1904:fltk-1.3.4-1/png/png.c ****    colorspace->end_points_XYZ = sRGB_XYZ;
 5070              		.loc 1 1904 0
 5071 0082 C7430400 		movl	$64000, 4(%rbx)
 5071      FA0000
 5072 0089 C74308E8 		movl	$33000, 8(%rbx)
 5072      800000
 5073 0090 C7430C30 		movl	$30000, 12(%rbx)
 5073      750000
 5074 0097 C7431060 		movl	$60000, 16(%rbx)
 5074      EA0000
 5075 009e C7431498 		movl	$15000, 20(%rbx)
 5075      3A0000
 5076 00a5 C7431870 		movl	$6000, 24(%rbx)
 5076      170000
1914:fltk-1.3.4-1/png/png.c ****       (PNG_COLORSPACE_MATCHES_sRGB|PNG_COLORSPACE_FROM_sRGB);
 5077              		.loc 1 1914 0
 5078 00ac 0CE7     		orb	$-25, %al
1904:fltk-1.3.4-1/png/png.c ****    colorspace->end_points_XYZ = sRGB_XYZ;
 5079              		.loc 1 1904 0
 5080 00ae C7431C26 		movl	$31270, 28(%rbx)
 5080      7A0000
 5081 00b5 C7432084 		movl	$32900, 32(%rbx)
 5081      800000
1914:fltk-1.3.4-1/png/png.c ****       (PNG_COLORSPACE_MATCHES_sRGB|PNG_COLORSPACE_FROM_sRGB);
 5082              		.loc 1 1914 0
 5083 00bc 6689434A 		movw	%ax, 74(%rbx)
1905:fltk-1.3.4-1/png/png.c ****    colorspace->flags |=
 5084              		.loc 1 1905 0
 5085 00c0 C7432417 		movl	$41239, 36(%rbx)
 5085      A10000
1917:fltk-1.3.4-1/png/png.c **** }
 5086              		.loc 1 1917 0
 5087 00c7 B8010000 		movl	$1, %eax
 5087      00
1905:fltk-1.3.4-1/png/png.c ****    colorspace->flags |=
 5088              		.loc 1 1905 0
 5089 00cc C7432810 		movl	$21264, 40(%rbx)
 5089      530000
 5090 00d3 C7432C8D 		movl	$1933, 44(%rbx)
 5090      070000
 5091 00da C74330AE 		movl	$35758, 48(%rbx)
 5091      8B0000
 5092 00e1 C743345D 		movl	$71517, 52(%rbx)
 5092      170100
 5093 00e8 C743388F 		movl	$11919, 56(%rbx)
 5093      2E0000
 5094 00ef C7433C80 		movl	$18048, 60(%rbx)
 5094      460000
 5095 00f6 C7434033 		movl	$7219, 64(%rbx)
 5095      1C0000
 5096 00fd C743444D 		movl	$95053, 68(%rbx)
 5096      730100
1910:fltk-1.3.4-1/png/png.c ****    colorspace->flags |= PNG_COLORSPACE_HAVE_GAMMA;
 5097              		.loc 1 1910 0
 5098 0104 C7038FB1 		movl	$45455, (%rbx)
 5098      0000
1918:fltk-1.3.4-1/png/png.c **** #endif /* sRGB */
 5099              		.loc 1 1918 0
 5100 010a 5B       		popq	%rbx
 5101              		.cfi_remember_state
 5102              		.cfi_def_cfa_offset 24
 5103              	.LVL493:
 5104 010b 5D       		popq	%rbp
 5105              		.cfi_def_cfa_offset 16
 5106              	.LVL494:
 5107 010c 415C     		popq	%r12
 5108              		.cfi_def_cfa_offset 8
 5109              	.LVL495:
 5110 010e C3       		ret
 5111              	.LVL496:
 5112 010f 90       		.p2align 4,,10
 5113              		.p2align 3
 5114              	.L574:
 5115              		.cfi_restore_state
1875:fltk-1.3.4-1/png/png.c ****          (unsigned)intent, "inconsistent rendering intents");
 5116              		.loc 1 1875 0
 5117 0110 89D1     		movl	%edx, %ecx
 5118 0112 41B80000 		movl	$.LC86, %r8d
 5118      0000
 5119              	.L573:
1918:fltk-1.3.4-1/png/png.c **** #endif /* sRGB */
 5120              		.loc 1 1918 0
 5121 0118 5B       		popq	%rbx
 5122              		.cfi_remember_state
 5123              		.cfi_def_cfa_offset 24
 5124 0119 5D       		popq	%rbp
 5125              		.cfi_def_cfa_offset 16
 5126 011a 415C     		popq	%r12
 5127              		.cfi_def_cfa_offset 8
1875:fltk-1.3.4-1/png/png.c ****          (unsigned)intent, "inconsistent rendering intents");
 5128              		.loc 1 1875 0
 5129 011c BA000000 		movl	$.LC85, %edx
 5129      00
 5130              	.LVL497:
 5131 0121 E9000000 		jmp	png_icc_profile_error
 5131      00
 5132              	.LVL498:
 5133 0126 662E0F1F 		.p2align 4,,10
 5133      84000000 
 5133      0000
 5134              		.p2align 3
 5135              	.L575:
 5136              		.cfi_restore_state
1880:fltk-1.3.4-1/png/png.c ****       return 0;
 5137              		.loc 1 1880 0
 5138 0130 BE000000 		movl	$.LC87, %esi
 5138      00
 5139 0135 E8000000 		call	png_benign_error
 5139      00
 5140              	.LVL499:
1918:fltk-1.3.4-1/png/png.c **** #endif /* sRGB */
 5141              		.loc 1 1918 0
 5142 013a 5B       		popq	%rbx
 5143              		.cfi_remember_state
 5144              		.cfi_def_cfa_offset 24
 5145              	.LVL500:
1881:fltk-1.3.4-1/png/png.c ****    }
 5146              		.loc 1 1881 0
 5147 013b 31C0     		xorl	%eax, %eax
1918:fltk-1.3.4-1/png/png.c **** #endif /* sRGB */
 5148              		.loc 1 1918 0
 5149 013d 5D       		popq	%rbp
 5150              		.cfi_def_cfa_offset 16
 5151              	.LVL501:
 5152 013e 415C     		popq	%r12
 5153              		.cfi_def_cfa_offset 8
 5154              	.LVL502:
 5155 0140 C3       		ret
 5156              	.LVL503:
 5157              		.p2align 4,,10
 5158 0141 0F1F8000 		.p2align 3
 5158      000000
 5159              	.L576:
 5160              		.cfi_restore_state
1890:fltk-1.3.4-1/png/png.c ****          PNG_CHUNK_ERROR);
 5161              		.loc 1 1890 0
 5162 0148 BA020000 		movl	$2, %edx
 5162      00
 5163 014d BE000000 		movl	$.LC88, %esi
 5163      00
 5164 0152 4C89E7   		movq	%r12, %rdi
 5165 0155 E8000000 		call	png_chunk_report
 5165      00
 5166              	.LVL504:
 5167 015a E902FFFF 		jmp	.L564
 5167      FF
 5168              	.LVL505:
 5169 015f 90       		.p2align 4,,10
 5170              		.p2align 3
 5171              	.L565:
1918:fltk-1.3.4-1/png/png.c **** #endif /* sRGB */
 5172              		.loc 1 1918 0
 5173 0160 5B       		popq	%rbx
 5174              		.cfi_def_cfa_offset 24
1858:fltk-1.3.4-1/png/png.c **** 
 5175              		.loc 1 1858 0
 5176 0161 31C0     		xorl	%eax, %eax
1918:fltk-1.3.4-1/png/png.c **** #endif /* sRGB */
 5177              		.loc 1 1918 0
 5178 0163 5D       		popq	%rbp
 5179              		.cfi_def_cfa_offset 16
 5180 0164 415C     		popq	%r12
 5181              		.cfi_def_cfa_offset 8
 5182 0166 C3       		ret
 5183              		.cfi_endproc
 5184              	.LFE102:
 5186              		.section	.text.unlikely.png_colorspace_set_sRGB
 5187              	.LCOLDE89:
 5188              		.section	.text.png_colorspace_set_sRGB
 5189              	.LHOTE89:
 5190              		.section	.rodata.str1.1
 5191              	.LC90:
 5192 0184 746F6F20 		.string	"too short"
 5192      73686F72 
 5192      7400
 5193              		.section	.text.unlikely.png_icc_check_length,"ax",@progbits
 5194              	.LCOLDB91:
 5195              		.section	.text.png_icc_check_length,"ax",@progbits
 5196              	.LHOTB91:
 5197              		.p2align 4,,15
 5198              		.globl	png_icc_check_length
 5200              	png_icc_check_length:
 5201              	.LFB103:
1933:fltk-1.3.4-1/png/png.c ****    if (profile_length < 132)
 5202              		.loc 1 1933 0
 5203              		.cfi_startproc
 5204              	.LVL506:
1934:fltk-1.3.4-1/png/png.c ****       return png_icc_profile_error(png_ptr, colorspace, name, profile_length,
 5205              		.loc 1 1934 0
 5206 0000 81F98300 		cmpl	$131, %ecx
 5206      0000
 5207 0006 7608     		jbe	.L579
1939:fltk-1.3.4-1/png/png.c **** 
 5208              		.loc 1 1939 0
 5209 0008 B8010000 		movl	$1, %eax
 5209      00
 5210 000d C3       		ret
 5211 000e 6690     		.p2align 4,,10
 5212              		.p2align 3
 5213              	.L579:
 5214              	.LVL507:
 5215              	.LBB385:
 5216              	.LBB386:
1935:fltk-1.3.4-1/png/png.c ****          "too short");
 5217              		.loc 1 1935 0
 5218 0010 89C9     		movl	%ecx, %ecx
 5219              	.LVL508:
 5220 0012 41B80000 		movl	$.LC90, %r8d
 5220      0000
 5221 0018 E9000000 		jmp	png_icc_profile_error
 5221      00
 5222              	.LVL509:
 5223              	.LBE386:
 5224              	.LBE385:
 5225              		.cfi_endproc
 5226              	.LFE103:
 5228              		.section	.text.unlikely.png_icc_check_length
 5229              	.LCOLDE91:
 5230              		.section	.text.png_icc_check_length
 5231              	.LHOTE91:
 5232              		.section	.rodata.str1.1
 5233              	.LC92:
 5234 018e 6C656E67 		.string	"length does not match profile"
 5234      74682064 
 5234      6F657320 
 5234      6E6F7420 
 5234      6D617463 
 5235              	.LC93:
 5236 01ac 696E7661 		.string	"invalid length"
 5236      6C696420 
 5236      6C656E67 
 5236      746800
 5237              	.LC94:
 5238 01bb 74616720 		.string	"tag count too large"
 5238      636F756E 
 5238      7420746F 
 5238      6F206C61 
 5238      72676500 
 5239              	.LC95:
 5240 01cf 696E7661 		.string	"invalid rendering intent"
 5240      6C696420 
 5240      72656E64 
 5240      6572696E 
 5240      6720696E 
 5241              	.LC96:
 5242 01e8 696E7465 		.string	"intent outside defined range"
 5242      6E74206F 
 5242      75747369 
 5242      64652064 
 5242      6566696E 
 5243              	.LC97:
 5244 0205 696E7661 		.string	"invalid signature"
 5244      6C696420 
 5244      7369676E 
 5244      61747572 
 5244      6500
 5245              	.LC98:
 5246 0217 50435320 		.string	"PCS illuminant is not D50"
 5246      696C6C75 
 5246      6D696E61 
 5246      6E742069 
 5246      73206E6F 
 5247              		.section	.rodata.str1.8
 5248 0247 00       		.align 8
 5249              	.LC99:
 5250 0248 52474220 		.string	"RGB color space not permitted on grayscale PNG"
 5250      636F6C6F 
 5250      72207370 
 5250      61636520 
 5250      6E6F7420 
 5251 0277 00       		.align 8
 5252              	.LC100:
 5253 0278 47726179 		.string	"Gray color space not permitted on RGB PNG"
 5253      20636F6C 
 5253      6F722073 
 5253      70616365 
 5253      206E6F74 
 5254 02a2 00000000 		.align 8
 5254      0000
 5255              	.LC101:
 5256 02a8 696E7661 		.string	"invalid ICC profile color space"
 5256      6C696420 
 5256      49434320 
 5256      70726F66 
 5256      696C6520 
 5257              		.align 8
 5258              	.LC102:
 5259 02c8 696E7661 		.string	"invalid embedded Abstract ICC profile"
 5259      6C696420 
 5259      656D6265 
 5259      64646564 
 5259      20416273 
 5260 02ee 0000     		.align 8
 5261              	.LC103:
 5262 02f0 756E6578 		.string	"unexpected DeviceLink ICC profile class"
 5262      70656374 
 5262      65642044 
 5262      65766963 
 5262      654C696E 
 5263              		.align 8
 5264              	.LC104:
 5265 0318 756E6578 		.string	"unexpected NamedColor ICC profile class"
 5265      70656374 
 5265      6564204E 
 5265      616D6564 
 5265      436F6C6F 
 5266              		.align 8
 5267              	.LC105:
 5268 0340 756E7265 		.string	"unrecognized ICC profile class"
 5268      636F676E 
 5268      697A6564 
 5268      20494343 
 5268      2070726F 
 5269              		.section	.rodata.str1.1
 5270              	.LC106:
 5271 0231 756E6578 		.string	"unexpected ICC PCS encoding"
 5271      70656374 
 5271      65642049 
 5271      43432050 
 5271      43532065 
 5272              		.section	.text.unlikely.png_icc_check_header,"ax",@progbits
 5273              	.LCOLDB107:
 5274              		.section	.text.png_icc_check_header,"ax",@progbits
 5275              	.LHOTB107:
 5276              		.p2align 4,,15
 5277              		.globl	png_icc_check_header
 5279              	png_icc_check_header:
 5280              	.LFB104:
1945:fltk-1.3.4-1/png/png.c ****    png_uint_32 temp;
 5281              		.loc 1 1945 0
 5282              		.cfi_startproc
 5283              	.LVL510:
1953:fltk-1.3.4-1/png/png.c ****    if (temp != profile_length)
 5284              		.loc 1 1953 0
 5285 0000 410FB600 		movzbl	(%r8), %eax
 5286 0004 C1E018   		sall	$24, %eax
 5287 0007 4189C2   		movl	%eax, %r10d
 5288 000a 410FB640 		movzbl	1(%r8), %eax
 5288      01
 5289 000f C1E010   		sall	$16, %eax
 5290 0012 4401D0   		addl	%r10d, %eax
 5291 0015 450FB650 		movzbl	3(%r8), %r10d
 5291      03
 5292 001a 4401D0   		addl	%r10d, %eax
 5293 001d 450FB650 		movzbl	2(%r8), %r10d
 5293      02
 5294 0022 41C1E208 		sall	$8, %r10d
 5295 0026 4401D0   		addl	%r10d, %eax
 5296              	.LVL511:
1954:fltk-1.3.4-1/png/png.c ****       return png_icc_profile_error(png_ptr, colorspace, name, temp,
 5297              		.loc 1 1954 0
 5298 0029 39C8     		cmpl	%ecx, %eax
 5299 002b 0F852702 		jne	.L631
 5299      0000
 5300              	.LVL512:
 5301              	.LBB389:
 5302              	.LBB390:
1959:fltk-1.3.4-1/png/png.c ****       return png_icc_profile_error(png_ptr, colorspace, name, profile_length,
 5303              		.loc 1 1959 0
 5304 0031 41807808 		cmpb	$3, 8(%r8)
 5304      03
 5305 0036 7608     		jbe	.L582
 5306 0038 A803     		testb	$3, %al
 5307 003a 0F852802 		jne	.L632
 5307      0000
 5308              	.L582:
1963:fltk-1.3.4-1/png/png.c ****    if (temp > 357913930 || /* (2^32-4-132)/12: maximum possible tag count */
 5309              		.loc 1 1963 0
 5310 0040 410FB688 		movzbl	128(%r8), %ecx
 5310      80000000 
 5311              	.LVL513:
 5312 0048 C1E118   		sall	$24, %ecx
 5313 004b 4189CA   		movl	%ecx, %r10d
 5314 004e 410FB688 		movzbl	129(%r8), %ecx
 5314      81000000 
 5315 0056 C1E110   		sall	$16, %ecx
 5316 0059 4401D1   		addl	%r10d, %ecx
 5317 005c 450FB690 		movzbl	131(%r8), %r10d
 5317      83000000 
 5318 0064 4101CA   		addl	%ecx, %r10d
 5319 0067 410FB688 		movzbl	130(%r8), %ecx
 5319      82000000 
 5320 006f C1E108   		sall	$8, %ecx
 5321 0072 4401D1   		addl	%r10d, %ecx
 5322              	.LVL514:
1964:fltk-1.3.4-1/png/png.c ****       profile_length < 132+12*temp) /* truncated tag table */
 5323              		.loc 1 1964 0
 5324 0075 81F94A55 		cmpl	$357913930, %ecx
 5324      5515
 5325 007b 0F87C701 		ja	.L583
 5325      0000
 5326 0081 448D1449 		leal	(%rcx,%rcx,2), %r10d
 5327 0085 468D1495 		leal	132(,%r10,4), %r10d
 5327      84000000 
 5328 008d 4439D0   		cmpl	%r10d, %eax
 5329 0090 0F82B201 		jb	.L583
 5329      0000
1972:fltk-1.3.4-1/png/png.c ****    if (temp >= 0xffff) /* The ICC limit */
 5330              		.loc 1 1972 0
 5331 0096 410FB640 		movzbl	64(%r8), %eax
 5331      40
 5332              	.LVL515:
 5333 009b C1E018   		sall	$24, %eax
 5334 009e 89C1     		movl	%eax, %ecx
 5335              	.LVL516:
 5336 00a0 410FB640 		movzbl	65(%r8), %eax
 5336      41
 5337 00a5 C1E010   		sall	$16, %eax
 5338 00a8 01C8     		addl	%ecx, %eax
 5339 00aa 410FB648 		movzbl	67(%r8), %ecx
 5339      43
 5340 00af 01C8     		addl	%ecx, %eax
 5341 00b1 410FB648 		movzbl	66(%r8), %ecx
 5341      42
 5342 00b6 C1E108   		sall	$8, %ecx
 5343 00b9 01C1     		addl	%eax, %ecx
 5344              	.LVL517:
1973:fltk-1.3.4-1/png/png.c ****       return png_icc_profile_error(png_ptr, colorspace, name, temp,
 5345              		.loc 1 1973 0
 5346 00bb 81F9FEFF 		cmpl	$65534, %ecx
 5346      0000
 5347 00c1 0F87C901 		ja	.L633
 5347      0000
1980:fltk-1.3.4-1/png/png.c ****       (void)png_icc_profile_error(png_ptr, NULL, name, temp,
 5348              		.loc 1 1980 0
 5349 00c7 83F903   		cmpl	$3, %ecx
 5350              	.LBE390:
 5351              	.LBE389:
1945:fltk-1.3.4-1/png/png.c ****    png_uint_32 temp;
 5352              		.loc 1 1945 0
 5353 00ca 4156     		pushq	%r14
 5354              		.cfi_def_cfa_offset 16
 5355              		.cfi_offset 14, -16
 5356              	.LVL518:
 5357 00cc 4989FE   		movq	%rdi, %r14
 5358 00cf 4155     		pushq	%r13
 5359              		.cfi_def_cfa_offset 24
 5360              		.cfi_offset 13, -24
 5361 00d1 4989F5   		movq	%rsi, %r13
 5362 00d4 4154     		pushq	%r12
 5363              		.cfi_def_cfa_offset 32
 5364              		.cfi_offset 12, -32
 5365 00d6 4989D4   		movq	%rdx, %r12
 5366 00d9 55       		pushq	%rbp
 5367              		.cfi_def_cfa_offset 40
 5368              		.cfi_offset 6, -40
 5369 00da 4C89C5   		movq	%r8, %rbp
 5370 00dd 53       		pushq	%rbx
 5371              		.cfi_def_cfa_offset 48
 5372              		.cfi_offset 3, -48
 5373 00de 4489CB   		movl	%r9d, %ebx
 5374              	.LBB396:
 5375              	.LBB391:
1980:fltk-1.3.4-1/png/png.c ****       (void)png_icc_profile_error(png_ptr, NULL, name, temp,
 5376              		.loc 1 1980 0
 5377 00e1 0F879101 		ja	.L634
 5377      0000
 5378              	.LVL519:
 5379              	.L586:
1996:fltk-1.3.4-1/png/png.c ****    if (temp != 0x61637370)
 5380              		.loc 1 1996 0
 5381 00e7 0FB64524 		movzbl	36(%rbp), %eax
1998:fltk-1.3.4-1/png/png.c ****          "invalid signature");
 5382              		.loc 1 1998 0
 5383 00eb 41B80000 		movl	$.LC97, %r8d
 5383      0000
1996:fltk-1.3.4-1/png/png.c ****    if (temp != 0x61637370)
 5384              		.loc 1 1996 0
 5385 00f1 C1E018   		sall	$24, %eax
 5386 00f4 89C1     		movl	%eax, %ecx
 5387 00f6 0FB64525 		movzbl	37(%rbp), %eax
 5388 00fa C1E010   		sall	$16, %eax
 5389 00fd 01C8     		addl	%ecx, %eax
 5390 00ff 0FB64D27 		movzbl	39(%rbp), %ecx
 5391 0103 01C8     		addl	%ecx, %eax
 5392 0105 0FB64D26 		movzbl	38(%rbp), %ecx
 5393 0109 C1E108   		sall	$8, %ecx
 5394 010c 01C1     		addl	%eax, %ecx
 5395              	.LVL520:
1997:fltk-1.3.4-1/png/png.c ****       return png_icc_profile_error(png_ptr, colorspace, name, temp,
 5396              		.loc 1 1997 0
 5397 010e 81F97073 		cmpl	$1633907568, %ecx
 5397      6361
 5398 0114 0F851201 		jne	.L630
 5398      0000
2008:fltk-1.3.4-1/png/png.c ****       (void)png_icc_profile_error(png_ptr, NULL, name, 0/*no tag value*/,
 5399              		.loc 1 2008 0
 5400 011a 488D7D44 		leaq	68(%rbp), %rdi
 5401 011e BA0C0000 		movl	$12, %edx
 5401      00
 5402 0123 BE000000 		movl	$D50_nCIEXYZ, %esi
 5402      00
 5403 0128 E8000000 		call	memcmp
 5403      00
 5404              	.LVL521:
 5405 012d 85C0     		testl	%eax, %eax
 5406 012f 0F859B01 		jne	.L635
 5406      0000
 5407              	.L588:
2032:fltk-1.3.4-1/png/png.c ****    switch (temp)
 5408              		.loc 1 2032 0
 5409 0135 0FB64510 		movzbl	16(%rbp), %eax
 5410 0139 C1E018   		sall	$24, %eax
 5411 013c 89C1     		movl	%eax, %ecx
 5412 013e 0FB64511 		movzbl	17(%rbp), %eax
 5413 0142 C1E010   		sall	$16, %eax
 5414 0145 01C8     		addl	%ecx, %eax
 5415 0147 0FB64D13 		movzbl	19(%rbp), %ecx
 5416 014b 01C8     		addl	%ecx, %eax
 5417 014d 0FB64D12 		movzbl	18(%rbp), %ecx
 5418 0151 C1E108   		sall	$8, %ecx
 5419 0154 01C1     		addl	%eax, %ecx
 5420              	.LVL522:
2033:fltk-1.3.4-1/png/png.c ****    {
 5421              		.loc 1 2033 0
 5422 0156 81F95941 		cmpl	$1196573017, %ecx
 5422      5247
 5423 015c 0F844E01 		je	.L590
 5423      0000
 5424 0162 81F92042 		cmpl	$1380401696, %ecx
 5424      4752
 5425 0168 0F853201 		jne	.L628
 5425      0000
2036:fltk-1.3.4-1/png/png.c ****             return png_icc_profile_error(png_ptr, colorspace, name, temp,
 5426              		.loc 1 2036 0
 5427 016e 83E302   		andl	$2, %ebx
 5428              	.LVL523:
2037:fltk-1.3.4-1/png/png.c ****                "RGB color space not permitted on grayscale PNG");
 5429              		.loc 1 2037 0
 5430 0171 41B80000 		movl	$.LC99, %r8d
 5430      0000
 5431 0177 B9204247 		movl	$1380401696, %ecx
 5431      52
 5432              	.LVL524:
2036:fltk-1.3.4-1/png/png.c ****             return png_icc_profile_error(png_ptr, colorspace, name, temp,
 5433              		.loc 1 2036 0
 5434 017c 0F84AA00 		je	.L630
 5434      0000
 5435              	.L592:
2061:fltk-1.3.4-1/png/png.c ****    switch (temp)
 5436              		.loc 1 2061 0
 5437 0182 0FB6450C 		movzbl	12(%rbp), %eax
 5438              	.LVL525:
 5439 0186 C1E018   		sall	$24, %eax
 5440 0189 89C2     		movl	%eax, %edx
 5441 018b 0FB6450D 		movzbl	13(%rbp), %eax
 5442 018f C1E010   		sall	$16, %eax
 5443 0192 01D0     		addl	%edx, %eax
 5444 0194 0FB6550F 		movzbl	15(%rbp), %edx
 5445 0198 01C2     		addl	%eax, %edx
 5446 019a 0FB6450E 		movzbl	14(%rbp), %eax
 5447 019e C1E008   		sall	$8, %eax
 5448 01a1 01D0     		addl	%edx, %eax
 5449              	.LVL526:
2062:fltk-1.3.4-1/png/png.c ****    {
 5450              		.loc 1 2062 0
 5451 01a3 3D6C636D 		cmpl	$1852662636, %eax
 5451      6E
 5452 01a8 0F849201 		je	.L594
 5452      0000
 5453 01ae 0F874C01 		ja	.L595
 5453      0000
 5454 01b4 3D6B6E69 		cmpl	$1818848875, %eax
 5454      6C
 5455 01b9 0F847101 		je	.L596
 5455      0000
 5456 01bf 3D72746E 		cmpl	$1835955314, %eax
 5456      6D
 5457 01c4 7427     		je	.L597
 5458 01c6 3D747362 		cmpl	$1633842036, %eax
 5458      61
2073:fltk-1.3.4-1/png/png.c ****             "invalid embedded Abstract ICC profile");
 5459              		.loc 1 2073 0
 5460 01cb 41B80000 		movl	$.LC102, %r8d
 5460      0000
 5461 01d1 B9747362 		movl	$1633842036, %ecx
 5461      61
2062:fltk-1.3.4-1/png/png.c ****    {
 5462              		.loc 1 2062 0
 5463 01d6 7454     		je	.L630
 5464              	.L593:
2101:fltk-1.3.4-1/png/png.c ****             "unrecognized ICC profile class");
 5465              		.loc 1 2101 0
 5466 01d8 89C1     		movl	%eax, %ecx
 5467 01da 41B80000 		movl	$.LC105, %r8d
 5467      0000
 5468 01e0 4C89E2   		movq	%r12, %rdx
 5469 01e3 31F6     		xorl	%esi, %esi
 5470 01e5 4C89F7   		movq	%r14, %rdi
 5471 01e8 E8000000 		call	png_icc_profile_error
 5471      00
 5472              	.LVL527:
 5473              	.L597:
2109:fltk-1.3.4-1/png/png.c ****    switch (temp)
 5474              		.loc 1 2109 0
 5475 01ed 0FB64514 		movzbl	20(%rbp), %eax
 5476 01f1 C1E018   		sall	$24, %eax
 5477 01f4 89C2     		movl	%eax, %edx
 5478 01f6 0FB64515 		movzbl	21(%rbp), %eax
 5479 01fa C1E010   		sall	$16, %eax
 5480 01fd 01D0     		addl	%edx, %eax
 5481 01ff 0FB65517 		movzbl	23(%rbp), %edx
 5482 0203 01C2     		addl	%eax, %edx
 5483 0205 0FB64516 		movzbl	22(%rbp), %eax
 5484 0209 C1E008   		sall	$8, %eax
 5485 020c 01D0     		addl	%edx, %eax
 5486              	.LVL528:
2110:fltk-1.3.4-1/png/png.c ****    {
 5487              		.loc 1 2110 0
 5488 020e 3D206261 		cmpl	$1281450528, %eax
 5488      4C
 5489 0213 0F84D700 		je	.L600
 5489      0000
 5490 0219 3D205A59 		cmpl	$1482250784, %eax
 5490      58
 5491 021e 0F84CC00 		je	.L600
 5491      0000
2117:fltk-1.3.4-1/png/png.c ****             "unexpected ICC PCS encoding");
 5492              		.loc 1 2117 0
 5493 0224 89C1     		movl	%eax, %ecx
 5494 0226 41B80000 		movl	$.LC106, %r8d
 5494      0000
 5495              	.LVL529:
 5496              	.L630:
 5497              	.LBE391:
 5498              	.LBE396:
2122:fltk-1.3.4-1/png/png.c **** 
 5499              		.loc 1 2122 0
 5500 022c 5B       		popq	%rbx
 5501              		.cfi_restore 3
 5502              		.cfi_def_cfa_offset 40
 5503              	.LBB397:
 5504              	.LBB392:
2117:fltk-1.3.4-1/png/png.c ****             "unexpected ICC PCS encoding");
 5505              		.loc 1 2117 0
 5506 022d 4C89E2   		movq	%r12, %rdx
 5507 0230 4C89EE   		movq	%r13, %rsi
 5508 0233 4C89F7   		movq	%r14, %rdi
 5509              	.LBE392:
 5510              	.LBE397:
2122:fltk-1.3.4-1/png/png.c **** 
 5511              		.loc 1 2122 0
 5512 0236 5D       		popq	%rbp
 5513              		.cfi_restore 6
 5514              		.cfi_def_cfa_offset 32
 5515              	.LVL530:
 5516 0237 415C     		popq	%r12
 5517              		.cfi_restore 12
 5518              		.cfi_def_cfa_offset 24
 5519              	.LVL531:
 5520 0239 415D     		popq	%r13
 5521              		.cfi_restore 13
 5522              		.cfi_def_cfa_offset 16
 5523              	.LVL532:
 5524 023b 415E     		popq	%r14
 5525              		.cfi_restore 14
 5526              		.cfi_def_cfa_offset 8
 5527              	.LVL533:
 5528              	.LBB398:
 5529              	.LBB393:
2117:fltk-1.3.4-1/png/png.c ****             "unexpected ICC PCS encoding");
 5530              		.loc 1 2117 0
 5531 023d E9000000 		jmp	png_icc_profile_error
 5531      00
 5532              	.LVL534:
 5533              		.p2align 4,,10
 5534 0242 660F1F44 		.p2align 3
 5534      0000
 5535              	.L583:
1966:fltk-1.3.4-1/png/png.c ****          "tag count too large");
 5536              		.loc 1 1966 0
 5537 0248 41B80000 		movl	$.LC94, %r8d
 5537      0000
 5538              	.LVL535:
 5539 024e E9000000 		jmp	png_icc_profile_error
 5539      00
 5540              	.LVL536:
 5541              		.p2align 4,,10
 5542 0253 0F1F4400 		.p2align 3
 5542      00
 5543              	.L631:
 5544              	.LBE393:
 5545              	.LBE398:
1955:fltk-1.3.4-1/png/png.c ****          "length does not match profile");
 5546              		.loc 1 1955 0
 5547 0258 89C1     		movl	%eax, %ecx
 5548              	.LVL537:
 5549 025a 41B80000 		movl	$.LC92, %r8d
 5549      0000
 5550              	.LVL538:
 5551 0260 E9000000 		jmp	png_icc_profile_error
 5551      00
 5552              	.LVL539:
 5553              		.p2align 4,,10
 5554 0265 0F1F00   		.p2align 3
 5555              	.L632:
 5556              	.LBB399:
 5557              	.LBB394:
1960:fltk-1.3.4-1/png/png.c ****          "invalid length");
 5558              		.loc 1 1960 0
 5559 0268 89C1     		movl	%eax, %ecx
 5560              	.LVL540:
 5561 026a 41B80000 		movl	$.LC93, %r8d
 5561      0000
 5562              	.LVL541:
 5563 0270 E9000000 		jmp	png_icc_profile_error
 5563      00
 5564              	.LVL542:
 5565              		.p2align 4,,10
 5566 0275 0F1F00   		.p2align 3
 5567              	.L634:
 5568              		.cfi_def_cfa_offset 48
 5569              		.cfi_offset 3, -48
 5570              		.cfi_offset 6, -40
 5571              		.cfi_offset 12, -32
 5572              		.cfi_offset 13, -24
 5573              		.cfi_offset 14, -16
1981:fltk-1.3.4-1/png/png.c ****          "intent outside defined range");
 5574              		.loc 1 1981 0
 5575 0278 41B80000 		movl	$.LC96, %r8d
 5575      0000
 5576 027e 31F6     		xorl	%esi, %esi
 5577              	.LVL543:
 5578 0280 E8000000 		call	png_icc_profile_error
 5578      00
 5579              	.LVL544:
 5580 0285 E95DFEFF 		jmp	.L586
 5580      FF
 5581              	.LVL545:
 5582 028a 660F1F44 		.p2align 4,,10
 5582      0000
 5583              		.p2align 3
 5584              	.L633:
 5585              		.cfi_def_cfa_offset 8
 5586              		.cfi_restore 3
 5587              		.cfi_restore 6
 5588              		.cfi_restore 12
 5589              		.cfi_restore 13
 5590              		.cfi_restore 14
1974:fltk-1.3.4-1/png/png.c ****          "invalid rendering intent");
 5591              		.loc 1 1974 0
 5592 0290 41B80000 		movl	$.LC95, %r8d
 5592      0000
 5593              	.LVL546:
 5594 0296 E9000000 		jmp	png_icc_profile_error
 5594      00
 5595              	.LVL547:
 5596 029b 0F1F4400 		.p2align 4,,10
 5596      00
 5597              		.p2align 3
 5598              	.L628:
 5599              		.cfi_def_cfa_offset 48
 5600              		.cfi_offset 3, -48
 5601              		.cfi_offset 6, -40
 5602              		.cfi_offset 12, -32
 5603              		.cfi_offset 13, -24
 5604              		.cfi_offset 14, -16
2048:fltk-1.3.4-1/png/png.c ****             "invalid ICC profile color space");
 5605              		.loc 1 2048 0
 5606 02a0 41B80000 		movl	$.LC101, %r8d
 5606      0000
 5607 02a6 EB84     		jmp	.L630
 5608 02a8 0F1F8400 		.p2align 4,,10
 5608      00000000 
 5609              		.p2align 3
 5610              	.L590:
2042:fltk-1.3.4-1/png/png.c ****             return png_icc_profile_error(png_ptr, colorspace, name, temp,
 5611              		.loc 1 2042 0
 5612 02b0 83E302   		andl	$2, %ebx
 5613              	.LVL548:
2043:fltk-1.3.4-1/png/png.c ****                "Gray color space not permitted on RGB PNG");
 5614              		.loc 1 2043 0
 5615 02b3 41B80000 		movl	$.LC100, %r8d
 5615      0000
 5616 02b9 B9594152 		movl	$1196573017, %ecx
 5616      47
 5617              	.LVL549:
2042:fltk-1.3.4-1/png/png.c ****             return png_icc_profile_error(png_ptr, colorspace, name, temp,
 5618              		.loc 1 2042 0
 5619 02be 0F84BEFE 		je	.L592
 5619      FFFF
 5620 02c4 E963FFFF 		jmp	.L630
 5620      FF
 5621              	.LVL550:
 5622 02c9 0F1F8000 		.p2align 4,,10
 5622      000000
 5623              		.p2align 3
 5624              	.L635:
2009:fltk-1.3.4-1/png/png.c ****          "PCS illuminant is not D50");
 5625              		.loc 1 2009 0
 5626 02d0 41B80000 		movl	$.LC98, %r8d
 5626      0000
 5627 02d6 31C9     		xorl	%ecx, %ecx
 5628 02d8 4C89E2   		movq	%r12, %rdx
 5629 02db 31F6     		xorl	%esi, %esi
 5630 02dd 4C89F7   		movq	%r14, %rdi
 5631 02e0 E8000000 		call	png_icc_profile_error
 5631      00
 5632              	.LVL551:
 5633 02e5 E94BFEFF 		jmp	.L588
 5633      FF
 5634              	.LVL552:
 5635 02ea 660F1F44 		.p2align 4,,10
 5635      0000
 5636              		.p2align 3
 5637              	.L600:
 5638              	.LBE394:
 5639              	.LBE399:
2122:fltk-1.3.4-1/png/png.c **** 
 5640              		.loc 1 2122 0
 5641 02f0 5B       		popq	%rbx
 5642              		.cfi_remember_state
 5643              		.cfi_restore 3
 5644              		.cfi_def_cfa_offset 40
 5645 02f1 B8010000 		movl	$1, %eax
 5645      00
 5646              	.LVL553:
 5647 02f6 5D       		popq	%rbp
 5648              		.cfi_restore 6
 5649              		.cfi_def_cfa_offset 32
 5650              	.LVL554:
 5651 02f7 415C     		popq	%r12
 5652              		.cfi_restore 12
 5653              		.cfi_def_cfa_offset 24
 5654              	.LVL555:
 5655 02f9 415D     		popq	%r13
 5656              		.cfi_restore 13
 5657              		.cfi_def_cfa_offset 16
 5658              	.LVL556:
 5659 02fb 415E     		popq	%r14
 5660              		.cfi_restore 14
 5661              		.cfi_def_cfa_offset 8
 5662              	.LVL557:
 5663 02fd C3       		ret
 5664              	.LVL558:
 5665 02fe 6690     		.p2align 4,,10
 5666              		.p2align 3
 5667              	.L595:
 5668              		.cfi_restore_state
 5669              	.LBB400:
 5670              	.LBB395:
2062:fltk-1.3.4-1/png/png.c ****    {
 5671              		.loc 1 2062 0
 5672 0300 3D726E63 		cmpl	$1935896178, %eax
 5672      73
 5673 0305 0F84E2FE 		je	.L597
 5673      FFFF
 5674 030b 3D636170 		cmpl	$1936744803, %eax
 5674      73
 5675 0310 0F84D7FE 		je	.L597
 5675      FFFF
 5676 0316 3D727472 		cmpl	$1886549106, %eax
 5676      70
 5677 031b 0F85B7FE 		jne	.L593
 5677      FFFF
 5678 0321 E9C7FEFF 		jmp	.L597
 5678      FF
 5679 0326 662E0F1F 		.p2align 4,,10
 5679      84000000 
 5679      0000
 5680              		.p2align 3
 5681              	.L596:
2083:fltk-1.3.4-1/png/png.c ****             "unexpected DeviceLink ICC profile class");
 5682              		.loc 1 2083 0
 5683 0330 41B80000 		movl	$.LC103, %r8d
 5683      0000
 5684 0336 B96B6E69 		movl	$1818848875, %ecx
 5684      6C
 5685 033b E9ECFEFF 		jmp	.L630
 5685      FF
 5686              		.p2align 4,,10
 5687              		.p2align 3
 5688              	.L594:
2091:fltk-1.3.4-1/png/png.c ****             "unexpected NamedColor ICC profile class");
 5689              		.loc 1 2091 0
 5690 0340 41B80000 		movl	$.LC104, %r8d
 5690      0000
 5691 0346 B96C636D 		movl	$1852662636, %ecx
 5691      6E
 5692 034b 4C89E2   		movq	%r12, %rdx
 5693 034e 31F6     		xorl	%esi, %esi
 5694 0350 4C89F7   		movq	%r14, %rdi
 5695 0353 E8000000 		call	png_icc_profile_error
 5695      00
 5696              	.LVL559:
 5697 0358 E990FEFF 		jmp	.L597
 5697      FF
 5698              	.LBE395:
 5699              	.LBE400:
 5700              		.cfi_endproc
 5701              	.LFE104:
 5703              		.section	.text.unlikely.png_icc_check_header
 5704              	.LCOLDE107:
 5705              		.section	.text.png_icc_check_header
 5706              	.LHOTE107:
 5707              		.section	.rodata.str1.8
 5708 035f 00       		.align 8
 5709              	.LC108:
 5710 0360 49434320 		.string	"ICC profile tag start not a multiple of 4"
 5710      70726F66 
 5710      696C6520 
 5710      74616720 
 5710      73746172 
 5711 038a 00000000 		.align 8
 5711      0000
 5712              	.LC109:
 5713 0390 49434320 		.string	"ICC profile tag outside profile"
 5713      70726F66 
 5713      696C6520 
 5713      74616720 
 5713      6F757473 
 5714              		.section	.text.unlikely.png_icc_check_tag_table,"ax",@progbits
 5715              	.LCOLDB110:
 5716              		.section	.text.png_icc_check_tag_table,"ax",@progbits
 5717              	.LHOTB110:
 5718              		.p2align 4,,15
 5719              		.globl	png_icc_check_tag_table
 5721              	png_icc_check_tag_table:
 5722              	.LFB105:
2128:fltk-1.3.4-1/png/png.c ****    png_uint_32 tag_count = png_get_uint_32(profile+128);
 5723              		.loc 1 2128 0
 5724              		.cfi_startproc
 5725              	.LVL560:
2129:fltk-1.3.4-1/png/png.c ****    png_uint_32 itag;
 5726              		.loc 1 2129 0
 5727 0000 410FB680 		movzbl	128(%r8), %eax
 5727      80000000 
 5728 0008 450FB690 		movzbl	131(%r8), %r10d
 5728      83000000 
 5729 0010 C1E018   		sall	$24, %eax
 5730 0013 4189C1   		movl	%eax, %r9d
 5731 0016 410FB680 		movzbl	129(%r8), %eax
 5731      81000000 
 5732 001e C1E010   		sall	$16, %eax
 5733 0021 4401C8   		addl	%r9d, %eax
 5734 0024 4101C2   		addl	%eax, %r10d
 5735 0027 410FB680 		movzbl	130(%r8), %eax
 5735      82000000 
 5736 002f C1E008   		sall	$8, %eax
 5737              	.LVL561:
2136:fltk-1.3.4-1/png/png.c ****    {
 5738              		.loc 1 2136 0
 5739 0032 4401D0   		addl	%r10d, %eax
 5740              	.LVL562:
 5741 0035 0F844101 		je	.L649
 5741      0000
2128:fltk-1.3.4-1/png/png.c ****    png_uint_32 tag_count = png_get_uint_32(profile+128);
 5742              		.loc 1 2128 0
 5743 003b 4157     		pushq	%r15
 5744              		.cfi_def_cfa_offset 16
 5745              		.cfi_offset 15, -16
 5746 003d 83E801   		subl	$1, %eax
 5747              	.LVL563:
 5748 0040 4156     		pushq	%r14
 5749              		.cfi_def_cfa_offset 24
 5750              		.cfi_offset 14, -24
 5751 0042 4155     		pushq	%r13
 5752              		.cfi_def_cfa_offset 32
 5753              		.cfi_offset 13, -32
 5754 0044 4154     		pushq	%r12
 5755              		.cfi_def_cfa_offset 40
 5756              		.cfi_offset 12, -40
 5757 0046 488D0440 		leaq	(%rax,%rax,2), %rax
 5758 004a 55       		pushq	%rbp
 5759              		.cfi_def_cfa_offset 48
 5760              		.cfi_offset 6, -48
 5761 004b 53       		pushq	%rbx
 5762              		.cfi_def_cfa_offset 56
 5763              		.cfi_offset 3, -56
 5764 004c 4189CC   		movl	%ecx, %r12d
 5765 004f 498D9884 		leaq	132(%r8), %rbx
 5765      000000
 5766              	.LVL564:
 5767 0056 4D8DB480 		leaq	144(%r8,%rax,4), %r14
 5767      90000000 
 5768 005e 4883EC28 		subq	$40, %rsp
 5769              		.cfi_def_cfa_offset 96
 5770 0062 48895424 		movq	%rdx, 16(%rsp)
 5770      10
 5771 0067 48897424 		movq	%rsi, 24(%rsp)
 5771      18
 5772 006c 48897C24 		movq	%rdi, 8(%rsp)
 5772      08
 5773 0071 EB29     		jmp	.L642
 5774              	.LVL565:
 5775              		.p2align 4,,10
 5776 0073 0F1F4400 		.p2align 3
 5776      00
 5777              	.L639:
 5778              	.LBB401:
2161:fltk-1.3.4-1/png/png.c ****          return png_icc_profile_error(png_ptr, colorspace, name, tag_id,
 5779              		.loc 1 2161 0
 5780 0078 4439E5   		cmpl	%r12d, %ebp
 5781 007b 0F87B600 		ja	.L641
 5781      0000
 5782              	.L640:
2161:fltk-1.3.4-1/png/png.c ****          return png_icc_profile_error(png_ptr, colorspace, name, tag_id,
 5783              		.loc 1 2161 0 is_stmt 0 discriminator 1
 5784 0081 4489E0   		movl	%r12d, %eax
 5785 0084 29E8     		subl	%ebp, %eax
 5786 0086 4139C5   		cmpl	%eax, %r13d
 5787 0089 0F87A800 		ja	.L641
 5787      0000
 5788              	.LBE401:
2136:fltk-1.3.4-1/png/png.c ****    {
 5789              		.loc 1 2136 0 is_stmt 1 discriminator 2
 5790 008f 4883C30C 		addq	$12, %rbx
 5791              	.LVL566:
 5792 0093 4C39F3   		cmpq	%r14, %rbx
 5793 0096 0F84CC00 		je	.L650
 5793      0000
 5794              	.LVL567:
 5795              	.L642:
 5796              	.LBB402:
2138:fltk-1.3.4-1/png/png.c ****       png_uint_32 tag_start = png_get_uint_32(tag+4); /* must be aligned */
 5797              		.loc 1 2138 0
 5798 009c 0FB603   		movzbl	(%rbx), %eax
 5799 009f 0FB64B02 		movzbl	2(%rbx), %ecx
2140:fltk-1.3.4-1/png/png.c **** 
 5800              		.loc 1 2140 0
 5801 00a3 440FB65B 		movzbl	11(%rbx), %r11d
 5801      0B
2138:fltk-1.3.4-1/png/png.c ****       png_uint_32 tag_start = png_get_uint_32(tag+4); /* must be aligned */
 5802              		.loc 1 2138 0
 5803 00a8 C1E018   		sall	$24, %eax
 5804 00ab C1E108   		sall	$8, %ecx
 5805 00ae 4189C7   		movl	%eax, %r15d
 5806 00b1 0FB64301 		movzbl	1(%rbx), %eax
 5807 00b5 C1E010   		sall	$16, %eax
 5808 00b8 4401F8   		addl	%r15d, %eax
 5809 00bb 440FB67B 		movzbl	3(%rbx), %r15d
 5809      03
 5810 00c0 4101C7   		addl	%eax, %r15d
2139:fltk-1.3.4-1/png/png.c ****       png_uint_32 tag_length = png_get_uint_32(tag+8);/* not padded */
 5811              		.loc 1 2139 0
 5812 00c3 0FB64304 		movzbl	4(%rbx), %eax
2138:fltk-1.3.4-1/png/png.c ****       png_uint_32 tag_start = png_get_uint_32(tag+4); /* must be aligned */
 5813              		.loc 1 2138 0
 5814 00c7 4101CF   		addl	%ecx, %r15d
 5815              	.LVL568:
2139:fltk-1.3.4-1/png/png.c ****       png_uint_32 tag_length = png_get_uint_32(tag+8);/* not padded */
 5816              		.loc 1 2139 0
 5817 00ca C1E018   		sall	$24, %eax
 5818 00cd 89C5     		movl	%eax, %ebp
 5819 00cf 0FB64305 		movzbl	5(%rbx), %eax
 5820 00d3 C1E010   		sall	$16, %eax
 5821 00d6 01E8     		addl	%ebp, %eax
 5822 00d8 0FB66B07 		movzbl	7(%rbx), %ebp
 5823 00dc 01E8     		addl	%ebp, %eax
 5824 00de 0FB66B06 		movzbl	6(%rbx), %ebp
 5825 00e2 89EA     		movl	%ebp, %edx
 5826 00e4 C1E208   		sall	$8, %edx
 5827 00e7 8D2C10   		leal	(%rax,%rdx), %ebp
 5828              	.LVL569:
2140:fltk-1.3.4-1/png/png.c **** 
 5829              		.loc 1 2140 0
 5830 00ea 0FB64308 		movzbl	8(%rbx), %eax
 5831 00ee C1E018   		sall	$24, %eax
 5832 00f1 89C2     		movl	%eax, %edx
 5833 00f3 0FB64309 		movzbl	9(%rbx), %eax
 5834 00f7 C1E010   		sall	$16, %eax
 5835 00fa 01D0     		addl	%edx, %eax
 5836 00fc 0FB6530A 		movzbl	10(%rbx), %edx
 5837 0100 4401D8   		addl	%r11d, %eax
 5838 0103 C1E208   		sall	$8, %edx
2148:fltk-1.3.4-1/png/png.c ****       {
 5839              		.loc 1 2148 0
 5840 0106 40F6C503 		testb	$3, %bpl
2140:fltk-1.3.4-1/png/png.c **** 
 5841              		.loc 1 2140 0
 5842 010a 448D2C10 		leal	(%rax,%rdx), %r13d
 5843              	.LVL570:
2148:fltk-1.3.4-1/png/png.c ****       {
 5844              		.loc 1 2148 0
 5845 010e 0F8464FF 		je	.L639
 5845      FFFF
2154:fltk-1.3.4-1/png/png.c ****             "ICC profile tag start not a multiple of 4");
 5846              		.loc 1 2154 0
 5847 0114 488B5424 		movq	16(%rsp), %rdx
 5847      10
 5848 0119 488B7C24 		movq	8(%rsp), %rdi
 5848      08
 5849 011e 31F6     		xorl	%esi, %esi
 5850 0120 4489F9   		movl	%r15d, %ecx
 5851 0123 41B80000 		movl	$.LC108, %r8d
 5851      0000
 5852 0129 E8000000 		call	png_icc_profile_error
 5852      00
 5853              	.LVL571:
2161:fltk-1.3.4-1/png/png.c ****          return png_icc_profile_error(png_ptr, colorspace, name, tag_id,
 5854              		.loc 1 2161 0
 5855 012e 4439E5   		cmpl	%r12d, %ebp
 5856 0131 0F864AFF 		jbe	.L640
 5856      FFFF
 5857              	.L641:
2162:fltk-1.3.4-1/png/png.c ****             "ICC profile tag outside profile");
 5858              		.loc 1 2162 0
 5859 0137 488B5424 		movq	16(%rsp), %rdx
 5859      10
 5860 013c 488B7424 		movq	24(%rsp), %rsi
 5860      18
 5861 0141 4489F9   		movl	%r15d, %ecx
 5862 0144 488B7C24 		movq	8(%rsp), %rdi
 5862      08
 5863              	.LBE402:
2167:fltk-1.3.4-1/png/png.c **** 
 5864              		.loc 1 2167 0
 5865 0149 4883C428 		addq	$40, %rsp
 5866              		.cfi_remember_state
 5867              		.cfi_def_cfa_offset 56
 5868              	.LBB403:
2162:fltk-1.3.4-1/png/png.c ****             "ICC profile tag outside profile");
 5869              		.loc 1 2162 0
 5870 014d 41B80000 		movl	$.LC109, %r8d
 5870      0000
 5871              	.LBE403:
2167:fltk-1.3.4-1/png/png.c **** 
 5872              		.loc 1 2167 0
 5873 0153 5B       		popq	%rbx
 5874              		.cfi_restore 3
 5875              		.cfi_def_cfa_offset 48
 5876              	.LVL572:
 5877 0154 5D       		popq	%rbp
 5878              		.cfi_restore 6
 5879              		.cfi_def_cfa_offset 40
 5880              	.LVL573:
 5881 0155 415C     		popq	%r12
 5882              		.cfi_restore 12
 5883              		.cfi_def_cfa_offset 32
 5884              	.LVL574:
 5885 0157 415D     		popq	%r13
 5886              		.cfi_restore 13
 5887              		.cfi_def_cfa_offset 24
 5888              	.LVL575:
 5889 0159 415E     		popq	%r14
 5890              		.cfi_restore 14
 5891              		.cfi_def_cfa_offset 16
 5892 015b 415F     		popq	%r15
 5893              		.cfi_restore 15
 5894              		.cfi_def_cfa_offset 8
 5895              	.LVL576:
 5896              	.LBB404:
2162:fltk-1.3.4-1/png/png.c ****             "ICC profile tag outside profile");
 5897              		.loc 1 2162 0
 5898 015d E9000000 		jmp	png_icc_profile_error
 5898      00
 5899              	.LVL577:
 5900              		.p2align 4,,10
 5901 0162 660F1F44 		.p2align 3
 5901      0000
 5902              	.L650:
 5903              		.cfi_restore_state
 5904              	.LBE404:
2167:fltk-1.3.4-1/png/png.c **** 
 5905              		.loc 1 2167 0
 5906 0168 4883C428 		addq	$40, %rsp
 5907              		.cfi_def_cfa_offset 56
 5908 016c B8010000 		movl	$1, %eax
 5908      00
 5909 0171 5B       		popq	%rbx
 5910              		.cfi_restore 3
 5911              		.cfi_def_cfa_offset 48
 5912              	.LVL578:
 5913 0172 5D       		popq	%rbp
 5914              		.cfi_restore 6
 5915              		.cfi_def_cfa_offset 40
 5916              	.LVL579:
 5917 0173 415C     		popq	%r12
 5918              		.cfi_restore 12
 5919              		.cfi_def_cfa_offset 32
 5920              	.LVL580:
 5921 0175 415D     		popq	%r13
 5922              		.cfi_restore 13
 5923              		.cfi_def_cfa_offset 24
 5924              	.LVL581:
 5925 0177 415E     		popq	%r14
 5926              		.cfi_restore 14
 5927              		.cfi_def_cfa_offset 16
 5928 0179 415F     		popq	%r15
 5929              		.cfi_restore 15
 5930              		.cfi_def_cfa_offset 8
 5931              	.LVL582:
 5932 017b C3       		ret
 5933              	.LVL583:
 5934              	.L649:
 5935 017c B8010000 		movl	$1, %eax
 5935      00
 5936              	.LVL584:
 5937 0181 C3       		ret
 5938              		.cfi_endproc
 5939              	.LFE105:
 5941              		.section	.text.unlikely.png_icc_check_tag_table
 5942              	.LCOLDE110:
 5943              		.section	.text.png_icc_check_tag_table
 5944              	.LHOTE110:
 5945              		.section	.rodata.str1.1
 5946              	.LC111:
 5947 024d 6B6E6F77 		.string	"known incorrect sRGB profile"
 5947      6E20696E 
 5947      636F7272 
 5947      65637420 
 5947      73524742 
 5948              		.section	.rodata.str1.8
 5949              		.align 8
 5950              	.LC112:
 5951 03b0 6F75742D 		.string	"out-of-date sRGB profile with no signature"
 5951      6F662D64 
 5951      61746520 
 5951      73524742 
 5951      2070726F 
 5952 03db 00000000 		.align 8
 5952      00
 5953              	.LC113:
 5954 03e0 4E6F7420 		.string	"Not recognizing known sRGB profile that has been edited"
 5954      7265636F 
 5954      676E697A 
 5954      696E6720 
 5954      6B6E6F77 
 5955              		.section	.text.unlikely.png_icc_set_sRGB,"ax",@progbits
 5956              	.LCOLDB114:
 5957              		.section	.text.png_icc_set_sRGB,"ax",@progbits
 5958              	.LHOTB114:
 5959              		.p2align 4,,15
 5960              		.globl	png_icc_set_sRGB
 5962              	png_icc_set_sRGB:
 5963              	.LFB107:
2358:fltk-1.3.4-1/png/png.c ****    /* Is this profile one of the known ICC sRGB profiles?  If it is, just set
 5964              		.loc 1 2358 0
 5965              		.cfi_startproc
 5966              	.LVL585:
 5967              	.LBB409:
 5968              	.LBB410:
2253:fltk-1.3.4-1/png/png.c ****                PNG_OPTION_ON)
 5969              		.loc 1 2253 0
 5970 0000 0FB687C8 		movzbl	968(%rdi), %eax
 5970      030000
 5971 0007 C0E804   		shrb	$4, %al
 5972 000a 83E003   		andl	$3, %eax
 5973 000d 3C03     		cmpb	$3, %al
 5974 000f 0F84A101 		je	.L670
 5974      0000
 5975              	.LBE410:
 5976              	.LBE409:
2358:fltk-1.3.4-1/png/png.c ****    /* Is this profile one of the known ICC sRGB profiles?  If it is, just set
 5977              		.loc 1 2358 0
 5978 0015 4157     		pushq	%r15
 5979              		.cfi_def_cfa_offset 16
 5980              		.cfi_offset 15, -16
 5981 0017 4156     		pushq	%r14
 5982              		.cfi_def_cfa_offset 24
 5983              		.cfi_offset 14, -24
 5984              	.LBB418:
 5985              	.LBB411:
2253:fltk-1.3.4-1/png/png.c ****                PNG_OPTION_ON)
 5986              		.loc 1 2253 0
 5987 0019 4531F6   		xorl	%r14d, %r14d
 5988              	.LBE411:
 5989              	.LBE418:
2358:fltk-1.3.4-1/png/png.c ****    /* Is this profile one of the known ICC sRGB profiles?  If it is, just set
 5990              		.loc 1 2358 0
 5991 001c 4155     		pushq	%r13
 5992              		.cfi_def_cfa_offset 32
 5993              		.cfi_offset 13, -32
 5994 001e 4154     		pushq	%r12
 5995              		.cfi_def_cfa_offset 40
 5996              		.cfi_offset 12, -40
 5997 0020 4989FC   		movq	%rdi, %r12
 5998 0023 55       		pushq	%rbp
 5999              		.cfi_def_cfa_offset 48
 6000              		.cfi_offset 6, -48
 6001 0024 53       		pushq	%rbx
 6002              		.cfi_def_cfa_offset 56
 6003              		.cfi_offset 3, -56
 6004 0025 4989F5   		movq	%rsi, %r13
 6005 0028 4889D5   		movq	%rdx, %rbp
 6006              	.LBB419:
 6007              	.LBB412:
2253:fltk-1.3.4-1/png/png.c ****                PNG_OPTION_ON)
 6008              		.loc 1 2253 0
 6009 002b BEDE3DF8 		movl	$704134622, %esi
 6009      29
 6010              	.LVL586:
 6011 0030 31DB     		xorl	%ebx, %ebx
 6012              	.LBE412:
 6013              	.LBE419:
2358:fltk-1.3.4-1/png/png.c ****    /* Is this profile one of the known ICC sRGB profiles?  If it is, just set
 6014              		.loc 1 2358 0
 6015 0032 4883EC08 		subq	$8, %rsp
 6016              		.cfi_def_cfa_offset 64
 6017 0036 0FB64254 		movzbl	84(%rdx), %eax
 6018 003a C1E018   		sall	$24, %eax
 6019 003d 89C7     		movl	%eax, %edi
 6020              	.LVL587:
 6021 003f 0FB64255 		movzbl	85(%rdx), %eax
 6022 0043 C1E010   		sall	$16, %eax
 6023 0046 01F8     		addl	%edi, %eax
 6024 0048 0FB67A57 		movzbl	87(%rdx), %edi
 6025 004c 01F8     		addl	%edi, %eax
 6026 004e 0FB67A56 		movzbl	86(%rdx), %edi
 6027 0052 BA000000 		movl	$png_sRGB_checks+44, %edx
 6027      00
 6028              	.LVL588:
 6029 0057 C1E708   		sall	$8, %edi
 6030 005a 8D3C38   		leal	(%rax,%rdi), %edi
 6031              	.LBB420:
 6032              	.LBB413:
2253:fltk-1.3.4-1/png/png.c ****                PNG_OPTION_ON)
 6033              		.loc 1 2253 0
 6034 005d B8000001 		movl	$65536, %eax
 6034      00
 6035 0062 EB16     		jmp	.L659
 6036              	.LVL589:
 6037              		.p2align 4,,10
 6038 0064 0F1F4000 		.p2align 3
 6039              	.L653:
2258:fltk-1.3.4-1/png/png.c ****    {
 6040              		.loc 1 2258 0
 6041 0068 83C301   		addl	$1, %ebx
 6042              	.LVL590:
 6043 006b 83FB07   		cmpl	$7, %ebx
 6044 006e 0F843401 		je	.L651
 6044      0000
 6045 0074 8B32     		movl	(%rdx), %esi
 6046 0076 4883C220 		addq	$32, %rdx
 6047              	.LVL591:
 6048              	.L659:
2260:fltk-1.3.4-1/png/png.c ****          png_get_uint_32(profile+88) == png_sRGB_checks[i].md5[1] &&
 6049              		.loc 1 2260 0
 6050 007a 39F7     		cmpl	%esi, %edi
 6051 007c 75EA     		jne	.L653
 6052 007e 0FB67558 		movzbl	88(%rbp), %esi
 6053 0082 C1E618   		sall	$24, %esi
 6054 0085 4189F0   		movl	%esi, %r8d
 6055 0088 0FB67559 		movzbl	89(%rbp), %esi
 6056 008c C1E610   		sall	$16, %esi
 6057 008f 4401C6   		addl	%r8d, %esi
 6058 0092 440FB645 		movzbl	91(%rbp), %r8d
 6058      5B
 6059 0097 4101F0   		addl	%esi, %r8d
 6060 009a 0FB6755A 		movzbl	90(%rbp), %esi
 6061 009e C1E608   		sall	$8, %esi
 6062 00a1 4401C6   		addl	%r8d, %esi
 6063 00a4 3B72E4   		cmpl	-28(%rdx), %esi
 6064 00a7 75BF     		jne	.L653
2261:fltk-1.3.4-1/png/png.c ****          png_get_uint_32(profile+92) == png_sRGB_checks[i].md5[2] &&
 6065              		.loc 1 2261 0
 6066 00a9 0FB6755C 		movzbl	92(%rbp), %esi
 6067 00ad C1E618   		sall	$24, %esi
 6068 00b0 4189F0   		movl	%esi, %r8d
 6069 00b3 0FB6755D 		movzbl	93(%rbp), %esi
 6070 00b7 C1E610   		sall	$16, %esi
 6071 00ba 4401C6   		addl	%r8d, %esi
 6072 00bd 440FB645 		movzbl	95(%rbp), %r8d
 6072      5F
 6073 00c2 4101F0   		addl	%esi, %r8d
 6074 00c5 0FB6755E 		movzbl	94(%rbp), %esi
 6075 00c9 C1E608   		sall	$8, %esi
 6076 00cc 4401C6   		addl	%r8d, %esi
 6077 00cf 3B72E8   		cmpl	-24(%rdx), %esi
 6078 00d2 7594     		jne	.L653
2262:fltk-1.3.4-1/png/png.c ****          png_get_uint_32(profile+96) == png_sRGB_checks[i].md5[3])
 6079              		.loc 1 2262 0
 6080 00d4 0FB67560 		movzbl	96(%rbp), %esi
 6081 00d8 C1E618   		sall	$24, %esi
 6082 00db 4189F0   		movl	%esi, %r8d
 6083 00de 0FB67561 		movzbl	97(%rbp), %esi
 6084 00e2 C1E610   		sall	$16, %esi
 6085 00e5 4401C6   		addl	%r8d, %esi
 6086 00e8 440FB645 		movzbl	99(%rbp), %r8d
 6086      63
 6087 00ed 4101F0   		addl	%esi, %r8d
 6088 00f0 0FB67562 		movzbl	98(%rbp), %esi
 6089 00f4 C1E608   		sall	$8, %esi
 6090 00f7 4401C6   		addl	%r8d, %esi
 6091 00fa 3B72EC   		cmpl	-20(%rdx), %esi
 6092 00fd 0F8565FF 		jne	.L653
 6092      FFFF
2275:fltk-1.3.4-1/png/png.c ****          {
 6093              		.loc 1 2275 0
 6094 0103 4585F6   		testl	%r14d, %r14d
 6095 0106 7546     		jne	.L654
2277:fltk-1.3.4-1/png/png.c ****             intent = png_get_uint_32(profile+64);
 6096              		.loc 1 2277 0
 6097 0108 0FB64500 		movzbl	0(%rbp), %eax
 6098              	.LVL592:
 6099 010c 440FB675 		movzbl	3(%rbp), %r14d
 6099      03
 6100              	.LVL593:
 6101 0111 C1E018   		sall	$24, %eax
 6102 0114 89C6     		movl	%eax, %esi
 6103 0116 0FB64501 		movzbl	1(%rbp), %eax
 6104 011a C1E010   		sall	$16, %eax
 6105 011d 01F0     		addl	%esi, %eax
 6106 011f 0FB67502 		movzbl	2(%rbp), %esi
 6107 0123 4401F0   		addl	%r14d, %eax
 6108 0126 C1E608   		sall	$8, %esi
 6109 0129 448D3430 		leal	(%rax,%rsi), %r14d
 6110              	.LVL594:
2278:fltk-1.3.4-1/png/png.c ****          }
 6111              		.loc 1 2278 0
 6112 012d 0FB64540 		movzbl	64(%rbp), %eax
 6113 0131 C1E018   		sall	$24, %eax
 6114 0134 89C6     		movl	%eax, %esi
 6115 0136 0FB64541 		movzbl	65(%rbp), %eax
 6116 013a C1E010   		sall	$16, %eax
 6117 013d 01F0     		addl	%esi, %eax
 6118 013f 0FB67543 		movzbl	67(%rbp), %esi
 6119 0143 01F0     		addl	%esi, %eax
 6120 0145 0FB67542 		movzbl	66(%rbp), %esi
 6121 0149 C1E608   		sall	$8, %esi
 6122 014c 01F0     		addl	%esi, %eax
 6123              	.LVL595:
 6124              	.L654:
2282:fltk-1.3.4-1/png/png.c ****             intent == png_sRGB_checks[i].intent)
 6125              		.loc 1 2282 0
 6126 014e 448B7ADC 		movl	-36(%rdx), %r15d
 6127 0152 4539F7   		cmpl	%r14d, %r15d
 6128 0155 0F850DFF 		jne	.L653
 6128      FFFF
 6129 015b 0FB772F2 		movzwl	-14(%rdx), %esi
 6130 015f 39C6     		cmpl	%eax, %esi
 6131 0161 0F8501FF 		jne	.L653
 6131      FFFF
2286:fltk-1.3.4-1/png/png.c ****             {
 6132              		.loc 1 2286 0
 6133 0167 4885C9   		testq	%rcx, %rcx
 6134 016a 744C     		je	.L671
 6135              	.LVL596:
 6136              	.L655:
2292:fltk-1.3.4-1/png/png.c ****             {
 6137              		.loc 1 2292 0
 6138 016c 89DA     		movl	%ebx, %edx
 6139 016e 48C1E205 		salq	$5, %rdx
 6140 0172 8B820000 		movl	png_sRGB_checks(%rdx), %eax
 6140      0000
 6141 0178 488D9A00 		leaq	png_sRGB_checks(%rdx), %rbx
 6141      000000
 6142              	.LVL597:
 6143 017f 4839C8   		cmpq	%rcx, %rax
 6144 0182 7452     		je	.L672
 6145              	.LVL598:
 6146              	.L656:
 6147              	.LBE413:
 6148              	.LBE420:
2367:fltk-1.3.4-1/png/png.c **** #endif /* READ_sRGB */
 6149              		.loc 1 2367 0
 6150 0184 4883C408 		addq	$8, %rsp
 6151              		.cfi_remember_state
 6152              		.cfi_def_cfa_offset 56
 6153              	.LBB421:
 6154              	.LBB414:
2341:fltk-1.3.4-1/png/png.c ****              " has been edited", 
 6155              		.loc 1 2341 0
 6156 0188 4C89E7   		movq	%r12, %rdi
 6157 018b 31D2     		xorl	%edx, %edx
 6158              	.LBE414:
 6159              	.LBE421:
2367:fltk-1.3.4-1/png/png.c **** #endif /* READ_sRGB */
 6160              		.loc 1 2367 0
 6161 018d 5B       		popq	%rbx
 6162              		.cfi_restore 3
 6163              		.cfi_def_cfa_offset 48
 6164 018e 5D       		popq	%rbp
 6165              		.cfi_restore 6
 6166              		.cfi_def_cfa_offset 40
 6167              	.LVL599:
 6168 018f 415C     		popq	%r12
 6169              		.cfi_restore 12
 6170              		.cfi_def_cfa_offset 32
 6171              	.LVL600:
 6172 0191 415D     		popq	%r13
 6173              		.cfi_restore 13
 6174              		.cfi_def_cfa_offset 24
 6175              	.LVL601:
 6176 0193 415E     		popq	%r14
 6177              		.cfi_restore 14
 6178              		.cfi_def_cfa_offset 16
 6179              	.LVL602:
 6180 0195 415F     		popq	%r15
 6181              		.cfi_restore 15
 6182              		.cfi_def_cfa_offset 8
 6183              	.LBB422:
 6184              	.LBB415:
2341:fltk-1.3.4-1/png/png.c ****              " has been edited", 
 6185              		.loc 1 2341 0
 6186 0197 BE000000 		movl	$.LC113, %esi
 6186      00
 6187 019c E9000000 		jmp	png_chunk_report
 6187      00
 6188              	.LVL603:
 6189              		.p2align 4,,10
 6190 01a1 0F1F8000 		.p2align 3
 6190      000000
 6191              	.L651:
 6192              		.cfi_restore_state
 6193              	.LBE415:
 6194              	.LBE422:
2367:fltk-1.3.4-1/png/png.c **** #endif /* READ_sRGB */
 6195              		.loc 1 2367 0
 6196 01a8 4883C408 		addq	$8, %rsp
 6197              		.cfi_def_cfa_offset 56
 6198 01ac 5B       		popq	%rbx
 6199              		.cfi_restore 3
 6200              		.cfi_def_cfa_offset 48
 6201              	.LVL604:
 6202 01ad 5D       		popq	%rbp
 6203              		.cfi_restore 6
 6204              		.cfi_def_cfa_offset 40
 6205              	.LVL605:
 6206 01ae 415C     		popq	%r12
 6207              		.cfi_restore 12
 6208              		.cfi_def_cfa_offset 32
 6209              	.LVL606:
 6210 01b0 415D     		popq	%r13
 6211              		.cfi_restore 13
 6212              		.cfi_def_cfa_offset 24
 6213              	.LVL607:
 6214 01b2 415E     		popq	%r14
 6215              		.cfi_restore 14
 6216              		.cfi_def_cfa_offset 16
 6217              	.LVL608:
 6218 01b4 415F     		popq	%r15
 6219              		.cfi_restore 15
 6220              		.cfi_def_cfa_offset 8
 6221              	.LVL609:
 6222              	.L670:
 6223 01b6 F3C3     		rep ret
 6224              	.LVL610:
 6225              	.L671:
 6226              		.cfi_def_cfa_offset 64
 6227              		.cfi_offset 3, -56
 6228              		.cfi_offset 6, -48
 6229              		.cfi_offset 12, -40
 6230              		.cfi_offset 13, -32
 6231              		.cfi_offset 14, -24
 6232              		.cfi_offset 15, -16
 6233              	.LBB423:
 6234              	.LBB416:
2288:fltk-1.3.4-1/png/png.c ****                adler = adler32(adler, profile, length);
 6235              		.loc 1 2288 0
 6236 01b8 31D2     		xorl	%edx, %edx
 6237 01ba 31F6     		xorl	%esi, %esi
 6238 01bc 31FF     		xorl	%edi, %edi
 6239 01be E8000000 		call	adler32
 6239      00
 6240              	.LVL611:
2289:fltk-1.3.4-1/png/png.c ****             }
 6241              		.loc 1 2289 0
 6242 01c3 4489F2   		movl	%r14d, %edx
 6243 01c6 4889EE   		movq	%rbp, %rsi
 6244 01c9 4889C7   		movq	%rax, %rdi
 6245 01cc E8000000 		call	adler32
 6245      00
 6246              	.LVL612:
 6247 01d1 4889C1   		movq	%rax, %rcx
 6248              	.LVL613:
 6249 01d4 EB96     		jmp	.L655
 6250              	.LVL614:
 6251              	.L672:
2301:fltk-1.3.4-1/png/png.c ****                      crc = crc32(crc, profile, length);
 6252              		.loc 1 2301 0
 6253 01d6 31D2     		xorl	%edx, %edx
 6254 01d8 31F6     		xorl	%esi, %esi
 6255 01da 31FF     		xorl	%edi, %edi
 6256 01dc E8000000 		call	crc32
 6256      00
 6257              	.LVL615:
2302:fltk-1.3.4-1/png/png.c ****                   }
 6258              		.loc 1 2302 0
 6259 01e1 4489FA   		movl	%r15d, %edx
 6260 01e4 4889EE   		movq	%rbp, %rsi
 6261 01e7 4889C7   		movq	%rax, %rdi
 6262 01ea E8000000 		call	crc32
 6262      00
 6263              	.LVL616:
2307:fltk-1.3.4-1/png/png.c **** #              endif
 6264              		.loc 1 2307 0
 6265 01ef 8B5304   		movl	4(%rbx), %edx
 6266 01f2 4839D0   		cmpq	%rdx, %rax
 6267 01f5 758D     		jne	.L656
2310:fltk-1.3.4-1/png/png.c ****                   {
 6268              		.loc 1 2310 0
 6269 01f7 807B1D00 		cmpb	$0, 29(%rbx)
 6270 01fb 754F     		jne	.L673
2325:fltk-1.3.4-1/png/png.c ****                   {
 6271              		.loc 1 2325 0
 6272 01fd 807B1C00 		cmpb	$0, 28(%rbx)
 6273 0201 750F     		jne	.L658
2327:fltk-1.3.4-1/png/png.c ****                         " no signature",
 6274              		.loc 1 2327 0
 6275 0203 31D2     		xorl	%edx, %edx
 6276 0205 BE000000 		movl	$.LC112, %esi
 6276      00
 6277 020a 4C89E7   		movq	%r12, %rdi
 6278 020d E8000000 		call	png_chunk_report
 6278      00
 6279              	.LVL617:
 6280              	.L658:
 6281              	.LBE416:
 6282              	.LBE423:
 6283              	.LBB424:
 6284              	.LBB425:
2365:fltk-1.3.4-1/png/png.c ****          (int)/*already checked*/png_get_uint_32(profile+64));
 6285              		.loc 1 2365 0
 6286 0212 0FB64540 		movzbl	64(%rbp), %eax
 6287 0216 4C89EE   		movq	%r13, %rsi
 6288 0219 4C89E7   		movq	%r12, %rdi
 6289 021c C1E018   		sall	$24, %eax
 6290 021f 89C2     		movl	%eax, %edx
 6291 0221 0FB64541 		movzbl	65(%rbp), %eax
 6292 0225 C1E010   		sall	$16, %eax
 6293 0228 01D0     		addl	%edx, %eax
 6294 022a 0FB65543 		movzbl	67(%rbp), %edx
 6295 022e 01D0     		addl	%edx, %eax
 6296 0230 0FB65542 		movzbl	66(%rbp), %edx
 6297              	.LBE425:
 6298              	.LBE424:
2367:fltk-1.3.4-1/png/png.c **** #endif /* READ_sRGB */
 6299              		.loc 1 2367 0
 6300 0234 4883C408 		addq	$8, %rsp
 6301              		.cfi_remember_state
 6302              		.cfi_def_cfa_offset 56
 6303 0238 5B       		popq	%rbx
 6304              		.cfi_restore 3
 6305              		.cfi_def_cfa_offset 48
 6306 0239 5D       		popq	%rbp
 6307              		.cfi_restore 6
 6308              		.cfi_def_cfa_offset 40
 6309              	.LVL618:
 6310 023a 415C     		popq	%r12
 6311              		.cfi_restore 12
 6312              		.cfi_def_cfa_offset 32
 6313              	.LVL619:
 6314 023c 415D     		popq	%r13
 6315              		.cfi_restore 13
 6316              		.cfi_def_cfa_offset 24
 6317              	.LVL620:
 6318 023e 415E     		popq	%r14
 6319              		.cfi_restore 14
 6320              		.cfi_def_cfa_offset 16
 6321 0240 415F     		popq	%r15
 6322              		.cfi_restore 15
 6323              		.cfi_def_cfa_offset 8
 6324              	.LBB427:
 6325              	.LBB426:
2365:fltk-1.3.4-1/png/png.c ****          (int)/*already checked*/png_get_uint_32(profile+64));
 6326              		.loc 1 2365 0
 6327 0242 C1E208   		sall	$8, %edx
 6328 0245 01C2     		addl	%eax, %edx
 6329 0247 E9000000 		jmp	png_colorspace_set_sRGB
 6329      00
 6330              	.LVL621:
 6331              	.L673:
 6332              		.cfi_restore_state
 6333              	.LBE426:
 6334              	.LBE427:
 6335              	.LBB428:
 6336              	.LBB417:
2317:fltk-1.3.4-1/png/png.c ****                         PNG_CHUNK_ERROR);
 6337              		.loc 1 2317 0
 6338 024c BA020000 		movl	$2, %edx
 6338      00
 6339 0251 BE000000 		movl	$.LC111, %esi
 6339      00
 6340 0256 4C89E7   		movq	%r12, %rdi
 6341 0259 E8000000 		call	png_chunk_report
 6341      00
 6342              	.LVL622:
 6343 025e EBB2     		jmp	.L658
 6344              	.LBE417:
 6345              	.LBE428:
 6346              		.cfi_endproc
 6347              	.LFE107:
 6349              		.section	.text.unlikely.png_icc_set_sRGB
 6350              	.LCOLDE114:
 6351              		.section	.text.png_icc_set_sRGB
 6352              	.LHOTE114:
 6353              		.section	.text.unlikely.png_colorspace_set_ICC,"ax",@progbits
 6354              	.LCOLDB115:
 6355              		.section	.text.png_colorspace_set_ICC,"ax",@progbits
 6356              	.LHOTB115:
 6357              		.p2align 4,,15
 6358              		.globl	png_colorspace_set_ICC
 6360              	png_colorspace_set_ICC:
 6361              	.LFB108:
2374:fltk-1.3.4-1/png/png.c ****    if ((colorspace->flags & PNG_COLORSPACE_INVALID) != 0)
 6362              		.loc 1 2374 0
 6363              		.cfi_startproc
 6364              	.LVL623:
2375:fltk-1.3.4-1/png/png.c ****       return 0;
 6365              		.loc 1 2375 0
 6366 0000 66837E4A 		cmpw	$0, 74(%rsi)
 6366      00
 6367 0005 0F88A500 		js	.L688
 6367      0000
2374:fltk-1.3.4-1/png/png.c ****    if ((colorspace->flags & PNG_COLORSPACE_INVALID) != 0)
 6368              		.loc 1 2374 0
 6369 000b 4156     		pushq	%r14
 6370              		.cfi_def_cfa_offset 16
 6371              		.cfi_offset 14, -16
 6372 000d 4155     		pushq	%r13
 6373              		.cfi_def_cfa_offset 24
 6374              		.cfi_offset 13, -24
 6375 000f 4989FE   		movq	%rdi, %r14
 6376              	.LVL624:
 6377 0012 4154     		pushq	%r12
 6378              		.cfi_def_cfa_offset 32
 6379              		.cfi_offset 12, -32
 6380 0014 55       		pushq	%rbp
 6381              		.cfi_def_cfa_offset 40
 6382              		.cfi_offset 6, -40
 6383 0015 4D89C4   		movq	%r8, %r12
 6384 0018 53       		pushq	%rbx
 6385              		.cfi_def_cfa_offset 48
 6386              		.cfi_offset 3, -48
 6387 0019 89CD     		movl	%ecx, %ebp
 6388 001b 4989D5   		movq	%rdx, %r13
 6389 001e 4889F3   		movq	%rsi, %rbx
 6390 0021 4883EC10 		subq	$16, %rsp
 6391              		.cfi_def_cfa_offset 64
 6392              	.LBB433:
 6393              	.LBB434:
1934:fltk-1.3.4-1/png/png.c ****       return png_icc_profile_error(png_ptr, colorspace, name, profile_length,
 6394              		.loc 1 1934 0
 6395 0025 81F98300 		cmpl	$131, %ecx
 6395      0000
 6396 002b 762B     		jbe	.L677
 6397              	.LVL625:
 6398              	.L680:
 6399              	.LBE434:
 6400              	.LBE433:
2379:fltk-1.3.4-1/png/png.c ****           color_type) != 0 &&
 6401              		.loc 1 2379 0
 6402 002d 4D89E0   		movq	%r12, %r8
 6403 0030 89E9     		movl	%ebp, %ecx
 6404 0032 4C89EA   		movq	%r13, %rdx
 6405 0035 4889DE   		movq	%rbx, %rsi
 6406 0038 4C89F7   		movq	%r14, %rdi
 6407 003b E8000000 		call	png_icc_check_header
 6407      00
 6408              	.LVL626:
2378:fltk-1.3.4-1/png/png.c ****        png_icc_check_header(png_ptr, colorspace, name, profile_length, profile,
 6409              		.loc 1 2378 0
 6410 0040 85C0     		testl	%eax, %eax
 6411 0042 7534     		jne	.L689
 6412              	.L679:
2376:fltk-1.3.4-1/png/png.c **** 
 6413              		.loc 1 2376 0
 6414 0044 31C0     		xorl	%eax, %eax
 6415              	.L676:
2393:fltk-1.3.4-1/png/png.c **** #endif /* iCCP */
 6416              		.loc 1 2393 0
 6417 0046 4883C410 		addq	$16, %rsp
 6418              		.cfi_remember_state
 6419              		.cfi_def_cfa_offset 48
 6420 004a 5B       		popq	%rbx
 6421              		.cfi_restore 3
 6422              		.cfi_def_cfa_offset 40
 6423              	.LVL627:
 6424 004b 5D       		popq	%rbp
 6425              		.cfi_restore 6
 6426              		.cfi_def_cfa_offset 32
 6427              	.LVL628:
 6428 004c 415C     		popq	%r12
 6429              		.cfi_restore 12
 6430              		.cfi_def_cfa_offset 24
 6431              	.LVL629:
 6432 004e 415D     		popq	%r13
 6433              		.cfi_restore 13
 6434              		.cfi_def_cfa_offset 16
 6435              	.LVL630:
 6436 0050 415E     		popq	%r14
 6437              		.cfi_restore 14
 6438              		.cfi_def_cfa_offset 8
 6439              	.LVL631:
 6440 0052 C3       		ret
 6441              	.LVL632:
 6442              		.p2align 4,,10
 6443 0053 0F1F4400 		.p2align 3
 6443      00
 6444              	.L677:
 6445              		.cfi_restore_state
 6446              	.LBB438:
 6447              	.LBB437:
 6448              	.LBB435:
 6449              	.LBB436:
1935:fltk-1.3.4-1/png/png.c ****          "too short");
 6450              		.loc 1 1935 0
 6451 0058 89C9     		movl	%ecx, %ecx
 6452              	.LVL633:
 6453 005a 41B80000 		movl	$.LC90, %r8d
 6453      0000
 6454              	.LVL634:
 6455 0060 44894C24 		movl	%r9d, 12(%rsp)
 6455      0C
 6456              	.LVL635:
 6457 0065 E8000000 		call	png_icc_profile_error
 6457      00
 6458              	.LVL636:
 6459              	.LBE436:
 6460              	.LBE435:
 6461              	.LBE437:
 6462              	.LBE438:
2378:fltk-1.3.4-1/png/png.c ****        png_icc_check_header(png_ptr, colorspace, name, profile_length, profile,
 6463              		.loc 1 2378 0
 6464 006a 85C0     		testl	%eax, %eax
 6465 006c 448B4C24 		movl	12(%rsp), %r9d
 6465      0C
 6466 0071 74D1     		je	.L679
 6467 0073 EBB8     		jmp	.L680
 6468              	.LVL637:
 6469              		.p2align 4,,10
 6470 0075 0F1F00   		.p2align 3
 6471              	.L689:
2381:fltk-1.3.4-1/png/png.c ****           profile) != 0)
 6472              		.loc 1 2381 0
 6473 0078 4D89E0   		movq	%r12, %r8
 6474 007b 89E9     		movl	%ebp, %ecx
 6475 007d 4C89EA   		movq	%r13, %rdx
 6476 0080 4889DE   		movq	%rbx, %rsi
 6477 0083 4C89F7   		movq	%r14, %rdi
 6478 0086 E8000000 		call	png_icc_check_tag_table
 6478      00
 6479              	.LVL638:
2380:fltk-1.3.4-1/png/png.c ****        png_icc_check_tag_table(png_ptr, colorspace, name, profile_length,
 6480              		.loc 1 2380 0
 6481 008b 85C0     		testl	%eax, %eax
 6482 008d 74B5     		je	.L679
2386:fltk-1.3.4-1/png/png.c **** #     endif
 6483              		.loc 1 2386 0
 6484 008f 31C9     		xorl	%ecx, %ecx
 6485 0091 4C89E2   		movq	%r12, %rdx
 6486 0094 4889DE   		movq	%rbx, %rsi
 6487 0097 4C89F7   		movq	%r14, %rdi
 6488 009a E8000000 		call	png_icc_set_sRGB
 6488      00
 6489              	.LVL639:
2388:fltk-1.3.4-1/png/png.c ****    }
 6490              		.loc 1 2388 0
 6491 009f B8010000 		movl	$1, %eax
 6491      00
 6492 00a4 EBA0     		jmp	.L676
 6493              	.LVL640:
 6494 00a6 662E0F1F 		.p2align 4,,10
 6494      84000000 
 6494      0000
 6495              		.p2align 3
 6496              	.L688:
 6497              		.cfi_def_cfa_offset 8
 6498              		.cfi_restore 3
 6499              		.cfi_restore 6
 6500              		.cfi_restore 12
 6501              		.cfi_restore 13
 6502              		.cfi_restore 14
2376:fltk-1.3.4-1/png/png.c **** 
 6503              		.loc 1 2376 0
 6504 00b0 31C0     		xorl	%eax, %eax
2393:fltk-1.3.4-1/png/png.c **** #endif /* iCCP */
 6505              		.loc 1 2393 0
 6506 00b2 C3       		ret
 6507              		.cfi_endproc
 6508              	.LFE108:
 6510              		.section	.text.unlikely.png_colorspace_set_ICC
 6511              	.LCOLDE115:
 6512              		.section	.text.png_colorspace_set_ICC
 6513              	.LHOTE115:
 6514              		.section	.rodata.str1.8
 6515              		.align 8
 6516              	.LC116:
 6517 0418 696E7465 		.string	"internal error handling cHRM coefficients"
 6517      726E616C 
 6517      20657272 
 6517      6F722068 
 6517      616E646C 
 6518 0442 00000000 		.align 8
 6518      0000
 6519              	.LC117:
 6520 0448 696E7465 		.string	"internal error handling cHRM->XYZ"
 6520      726E616C 
 6520      20657272 
 6520      6F722068 
 6520      616E646C 
 6521              		.section	.text.unlikely.png_colorspace_set_rgb_coefficients,"ax",@progbits
 6522              	.LCOLDB118:
 6523              		.section	.text.png_colorspace_set_rgb_coefficients,"ax",@progbits
 6524              	.LHOTB118:
 6525              		.p2align 4,,15
 6526              		.globl	png_colorspace_set_rgb_coefficients
 6528              	png_colorspace_set_rgb_coefficients:
 6529              	.LFB109:
2399:fltk-1.3.4-1/png/png.c ****    /* Set the rgb_to_gray coefficients from the colorspace. */
 6530              		.loc 1 2399 0
 6531              		.cfi_startproc
 6532              	.LVL641:
 6533 0000 55       		pushq	%rbp
 6534              		.cfi_def_cfa_offset 16
 6535              		.cfi_offset 6, -16
 6536 0001 53       		pushq	%rbx
 6537              		.cfi_def_cfa_offset 24
 6538              		.cfi_offset 3, -24
 6539 0002 4883EC28 		subq	$40, %rsp
 6540              		.cfi_def_cfa_offset 64
2399:fltk-1.3.4-1/png/png.c ****    /* Set the rgb_to_gray coefficients from the colorspace. */
 6541              		.loc 1 2399 0
 6542 0006 64488B04 		movq	%fs:40, %rax
 6542      25280000 
 6542      00
 6543 000f 48894424 		movq	%rax, 24(%rsp)
 6543      18
 6544 0014 31C0     		xorl	%eax, %eax
2401:fltk-1.3.4-1/png/png.c ****       (png_ptr->colorspace.flags & PNG_COLORSPACE_HAVE_ENDPOINTS) != 0)
 6545              		.loc 1 2401 0
 6546 0016 80BF1104 		cmpb	$0, 1041(%rdi)
 6546      000000
 6547 001d 0F85D200 		jne	.L690
 6547      0000
2401:fltk-1.3.4-1/png/png.c ****       (png_ptr->colorspace.flags & PNG_COLORSPACE_HAVE_ENDPOINTS) != 0)
 6548              		.loc 1 2401 0 is_stmt 0 discriminator 1
 6549 0023 F6872205 		testb	$2, 1314(%rdi)
 6549      000002
 6550 002a 4889FB   		movq	%rdi, %rbx
 6551 002d 0F84C200 		je	.L690
 6551      0000
 6552              	.LBB439:
2407:fltk-1.3.4-1/png/png.c ****       png_fixed_point g = png_ptr->colorspace.end_points_XYZ.green_Y;
 6553              		.loc 1 2407 0 is_stmt 1
 6554 0033 8BB70005 		movl	1280(%rdi), %esi
 6554      0000
2408:fltk-1.3.4-1/png/png.c ****       png_fixed_point b = png_ptr->colorspace.end_points_XYZ.blue_Y;
 6555              		.loc 1 2408 0
 6556 0039 8BBF0C05 		movl	1292(%rdi), %edi
 6556      0000
 6557              	.LVL642:
2409:fltk-1.3.4-1/png/png.c ****       png_fixed_point total = r+g+b;
 6558              		.loc 1 2409 0
 6559 003f 8B831805 		movl	1304(%rbx), %eax
 6559      0000
2410:fltk-1.3.4-1/png/png.c **** 
 6560              		.loc 1 2410 0
 6561 0045 8D2C3E   		leal	(%rsi,%rdi), %ebp
2407:fltk-1.3.4-1/png/png.c ****       png_fixed_point g = png_ptr->colorspace.end_points_XYZ.green_Y;
 6562              		.loc 1 2407 0
 6563 0048 8974240C 		movl	%esi, 12(%rsp)
2408:fltk-1.3.4-1/png/png.c ****       png_fixed_point b = png_ptr->colorspace.end_points_XYZ.blue_Y;
 6564              		.loc 1 2408 0
 6565 004c 897C2410 		movl	%edi, 16(%rsp)
2409:fltk-1.3.4-1/png/png.c ****       png_fixed_point total = r+g+b;
 6566              		.loc 1 2409 0
 6567 0050 89442414 		movl	%eax, 20(%rsp)
2410:fltk-1.3.4-1/png/png.c **** 
 6568              		.loc 1 2410 0
 6569 0054 01C5     		addl	%eax, %ebp
 6570              	.LVL643:
2412:fltk-1.3.4-1/png/png.c ****          r >= 0 && png_muldiv(&r, r, 32768, total) && r >= 0 && r <= 32768 &&
 6571              		.loc 1 2412 0
 6572 0056 85ED     		testl	%ebp, %ebp
 6573 0058 0F8E2701 		jle	.L692
 6573      0000
 6574 005e 85F6     		testl	%esi, %esi
 6575 0060 0F881F01 		js	.L692
 6575      0000
 6576              	.LVL644:
 6577              	.LBB440:
 6578              	.LBB441:
3249:fltk-1.3.4-1/png/png.c ****       {
 6579              		.loc 1 3249 0
 6580 0066 85F6     		testl	%esi, %esi
 6581 0068 0F85A200 		jne	.L693
 6581      0000
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 6582              		.loc 1 3251 0
 6583 006e C744240C 		movl	$0, 12(%rsp)
 6583      00000000 
 6584              	.LVL645:
 6585              	.L694:
 6586              	.LBE441:
 6587              	.LBE440:
2413:fltk-1.3.4-1/png/png.c ****          g >= 0 && png_muldiv(&g, g, 32768, total) && g >= 0 && g <= 32768 &&
 6588              		.loc 1 2413 0 discriminator 3
 6589 0076 85FF     		testl	%edi, %edi
 6590 0078 0F880701 		js	.L692
 6590      0000
 6591              	.LVL646:
 6592              	.LBB443:
 6593              	.LBB444:
3249:fltk-1.3.4-1/png/png.c ****       {
 6594              		.loc 1 3249 0
 6595 007e 0F85DC00 		jne	.L695
 6595      0000
 6596              	.LVL647:
 6597              	.L697:
 6598              	.LBE444:
 6599              	.LBE443:
2415:fltk-1.3.4-1/png/png.c ****          r+g+b <= 32769)
 6600              		.loc 1 2415 0
 6601 0084 8B742414 		movl	20(%rsp), %esi
2414:fltk-1.3.4-1/png/png.c ****          b >= 0 && png_muldiv(&b, b, 32768, total) && b >= 0 && b <= 32768 &&
 6602              		.loc 1 2414 0
 6603 0088 85F6     		testl	%esi, %esi
 6604 008a 0F88F500 		js	.L692
 6604      0000
 6605              	.LVL648:
 6606              	.LBB446:
 6607              	.LBB447:
3249:fltk-1.3.4-1/png/png.c ****       {
 6608              		.loc 1 3249 0
 6609 0090 0F850201 		jne	.L731
 6609      0000
 6610              	.LVL649:
 6611              	.L698:
 6612              	.LBE447:
 6613              	.LBE446:
2416:fltk-1.3.4-1/png/png.c ****       {
 6614              		.loc 1 2416 0 discriminator 3
 6615 0096 8B54240C 		movl	12(%rsp), %edx
 6616 009a 8B442410 		movl	16(%rsp), %eax
 6617 009e 8D0C02   		leal	(%rdx,%rax), %ecx
 6618 00a1 8D3C31   		leal	(%rcx,%rsi), %edi
2415:fltk-1.3.4-1/png/png.c ****          r+g+b <= 32769)
 6619              		.loc 1 2415 0 discriminator 3
 6620 00a4 81FF0180 		cmpl	$32769, %edi
 6620      0000
 6621 00aa 0F8FD500 		jg	.L692
 6621      0000
 6622              	.LVL650:
 6623              	.LBB449:
2425:fltk-1.3.4-1/png/png.c ****             add = -1;
 6624              		.loc 1 2425 0
 6625 00b0 0F848A00 		je	.L707
 6625      0000
2427:fltk-1.3.4-1/png/png.c ****             add = 1;
 6626              		.loc 1 2427 0
 6627 00b6 81FF0080 		cmpl	$32768, %edi
 6627      0000
 6628 00bc 7429     		je	.L700
2432:fltk-1.3.4-1/png/png.c ****                g += add;
 6629              		.loc 1 2432 0
 6630 00be 39C2     		cmpl	%eax, %edx
2428:fltk-1.3.4-1/png/png.c **** 
 6631              		.loc 1 2428 0
 6632 00c0 BF010000 		movl	$1, %edi
 6632      00
 6633              	.LVL651:
2432:fltk-1.3.4-1/png/png.c ****                g += add;
 6634              		.loc 1 2432 0
 6635 00c5 0F8E8200 		jle	.L704
 6635      0000
 6636              	.L705:
2434:fltk-1.3.4-1/png/png.c ****                r += add;
 6637              		.loc 1 2434 0 discriminator 1
 6638 00cb 39F2     		cmpl	%esi, %edx
 6639 00cd 0F8DFD00 		jge	.L732
 6639      0000
 6640              	.L703:
2437:fltk-1.3.4-1/png/png.c ****          }
 6641              		.loc 1 2437 0
 6642 00d3 01FE     		addl	%edi, %esi
 6643 00d5 89742414 		movl	%esi, 20(%rsp)
 6644              	.L702:
2441:fltk-1.3.4-1/png/png.c ****             png_error(png_ptr,
 6645              		.loc 1 2441 0
 6646 00d9 01CE     		addl	%ecx, %esi
 6647 00db 81FE0080 		cmpl	$32768, %esi
 6647      0000
 6648 00e1 0F85FC00 		jne	.L733
 6648      0000
 6649              	.LVL652:
 6650              	.L700:
2447:fltk-1.3.4-1/png/png.c ****             png_ptr->rgb_to_gray_green_coeff = (png_uint_16)g;
 6651              		.loc 1 2447 0
 6652 00e7 66899312 		movw	%dx, 1042(%rbx)
 6652      040000
2448:fltk-1.3.4-1/png/png.c ****          }
 6653              		.loc 1 2448 0
 6654 00ee 66898314 		movw	%ax, 1044(%rbx)
 6654      040000
 6655              	.LVL653:
 6656              	.L690:
 6657              	.LBE449:
 6658              	.LBE439:
2459:fltk-1.3.4-1/png/png.c **** #endif
 6659              		.loc 1 2459 0
 6660 00f5 488B4424 		movq	24(%rsp), %rax
 6660      18
 6661 00fa 64483304 		xorq	%fs:40, %rax
 6661      25280000 
 6661      00
 6662 0103 0F85D500 		jne	.L734
 6662      0000
 6663 0109 4883C428 		addq	$40, %rsp
 6664              		.cfi_remember_state
 6665              		.cfi_def_cfa_offset 24
 6666 010d 5B       		popq	%rbx
 6667              		.cfi_def_cfa_offset 16
 6668 010e 5D       		popq	%rbp
 6669              		.cfi_def_cfa_offset 8
 6670 010f C3       		ret
 6671              	.LVL654:
 6672              		.p2align 4,,10
 6673              		.p2align 3
 6674              	.L693:
 6675              		.cfi_restore_state
 6676              	.LBB456:
 6677              	.LBB450:
 6678              	.LBB442:
 6679 0110 488D7C24 		leaq	12(%rsp), %rdi
 6679      0C
 6680              	.LVL655:
 6681 0115 89E9     		movl	%ebp, %ecx
 6682 0117 BA008000 		movl	$32768, %edx
 6682      00
 6683 011c E8000000 		call	png_muldiv.part.9
 6683      00
 6684              	.LVL656:
 6685              	.LBE442:
 6686              	.LBE450:
2413:fltk-1.3.4-1/png/png.c ****          g >= 0 && png_muldiv(&g, g, 32768, total) && g >= 0 && g <= 32768 &&
 6687              		.loc 1 2413 0
 6688 0121 85C0     		testl	%eax, %eax
 6689 0123 7460     		je	.L692
2413:fltk-1.3.4-1/png/png.c ****          g >= 0 && png_muldiv(&g, g, 32768, total) && g >= 0 && g <= 32768 &&
 6690              		.loc 1 2413 0 is_stmt 0 discriminator 1
 6691 0125 817C240C 		cmpl	$32768, 12(%rsp)
 6691      00800000 
 6692 012d 7756     		ja	.L692
 6693 012f 8B7C2410 		movl	16(%rsp), %edi
 6694 0133 E93EFFFF 		jmp	.L694
 6694      FF
 6695              	.LVL657:
 6696 0138 0F1F8400 		.p2align 4,,10
 6696      00000000 
 6697              		.p2align 3
 6698              	.L707:
 6699              	.LBB451:
2432:fltk-1.3.4-1/png/png.c ****                g += add;
 6700              		.loc 1 2432 0 is_stmt 1
 6701 0140 39C2     		cmpl	%eax, %edx
2426:fltk-1.3.4-1/png/png.c ****          else if (r+g+b < 32768)
 6702              		.loc 1 2426 0
 6703 0142 BFFFFFFF 		movl	$-1, %edi
 6703      FF
 6704              	.LVL658:
2432:fltk-1.3.4-1/png/png.c ****                g += add;
 6705              		.loc 1 2432 0
 6706 0147 0F8F7EFF 		jg	.L705
 6706      FFFF
 6707              	.L704:
2432:fltk-1.3.4-1/png/png.c ****                g += add;
 6708              		.loc 1 2432 0 is_stmt 0 discriminator 1
 6709 014d 39F0     		cmpl	%esi, %eax
 6710 014f 7C6F     		jl	.L701
2433:fltk-1.3.4-1/png/png.c ****             else if (r >= g && r >= b)
 6711              		.loc 1 2433 0 is_stmt 1
 6712 0151 01F8     		addl	%edi, %eax
 6713 0153 89442410 		movl	%eax, 16(%rsp)
 6714 0157 8D0C02   		leal	(%rdx,%rax), %ecx
 6715 015a E97AFFFF 		jmp	.L702
 6715      FF
 6716              	.LVL659:
 6717 015f 90       		.p2align 4,,10
 6718              		.p2align 3
 6719              	.L695:
 6720              	.LBE451:
 6721              	.LBB452:
 6722              	.LBB445:
 6723 0160 89FE     		movl	%edi, %esi
 6724 0162 488D7C24 		leaq	16(%rsp), %rdi
 6724      10
 6725              	.LVL660:
 6726 0167 89E9     		movl	%ebp, %ecx
 6727 0169 BA008000 		movl	$32768, %edx
 6727      00
 6728 016e E8000000 		call	png_muldiv.part.9
 6728      00
 6729              	.LVL661:
 6730              	.LBE445:
 6731              	.LBE452:
2414:fltk-1.3.4-1/png/png.c ****          b >= 0 && png_muldiv(&b, b, 32768, total) && b >= 0 && b <= 32768 &&
 6732              		.loc 1 2414 0
 6733 0173 85C0     		testl	%eax, %eax
 6734 0175 740E     		je	.L692
2414:fltk-1.3.4-1/png/png.c ****          b >= 0 && png_muldiv(&b, b, 32768, total) && b >= 0 && b <= 32768 &&
 6735              		.loc 1 2414 0 is_stmt 0 discriminator 1
 6736 0177 817C2410 		cmpl	$32768, 16(%rsp)
 6736      00800000 
 6737 017f 0F86FFFE 		jbe	.L697
 6737      FFFF
 6738              	.L692:
2457:fltk-1.3.4-1/png/png.c ****    }
 6739              		.loc 1 2457 0 is_stmt 1
 6740 0185 BE000000 		movl	$.LC117, %esi
 6740      00
 6741 018a 4889DF   		movq	%rbx, %rdi
 6742 018d E8000000 		call	png_error
 6742      00
 6743              	.LVL662:
 6744              		.p2align 4,,10
 6745 0192 660F1F44 		.p2align 3
 6745      0000
 6746              	.L731:
 6747              	.LBB453:
 6748              	.LBB448:
 6749 0198 488D7C24 		leaq	20(%rsp), %rdi
 6749      14
 6750              	.LVL663:
 6751 019d 89E9     		movl	%ebp, %ecx
 6752 019f BA008000 		movl	$32768, %edx
 6752      00
 6753 01a4 E8000000 		call	png_muldiv.part.9
 6753      00
 6754              	.LVL664:
 6755              	.LBE448:
 6756              	.LBE453:
2415:fltk-1.3.4-1/png/png.c ****          r+g+b <= 32769)
 6757              		.loc 1 2415 0
 6758 01a9 85C0     		testl	%eax, %eax
 6759 01ab 74D8     		je	.L692
2415:fltk-1.3.4-1/png/png.c ****          r+g+b <= 32769)
 6760              		.loc 1 2415 0 is_stmt 0 discriminator 1
 6761 01ad 8B742414 		movl	20(%rsp), %esi
 6762 01b1 81FE0080 		cmpl	$32768, %esi
 6762      0000
 6763 01b7 0F86D9FE 		jbe	.L698
 6763      FFFF
 6764 01bd EBC6     		jmp	.L692
 6765              	.LVL665:
 6766 01bf 90       		.p2align 4,,10
 6767              		.p2align 3
 6768              	.L701:
 6769              	.LBB454:
2434:fltk-1.3.4-1/png/png.c ****                r += add;
 6770              		.loc 1 2434 0 is_stmt 1
 6771 01c0 39C2     		cmpl	%eax, %edx
 6772 01c2 0F8C0BFF 		jl	.L703
 6772      FFFF
 6773 01c8 E9FEFEFF 		jmp	.L705
 6773      FF
 6774 01cd 0F1F00   		.p2align 4,,10
 6775              		.p2align 3
 6776              	.L732:
2435:fltk-1.3.4-1/png/png.c ****             else
 6777              		.loc 1 2435 0
 6778 01d0 01FA     		addl	%edi, %edx
 6779 01d2 8954240C 		movl	%edx, 12(%rsp)
 6780 01d6 8D0C10   		leal	(%rax,%rdx), %ecx
 6781 01d9 E9FBFEFF 		jmp	.L702
 6781      FF
 6782              	.LVL666:
 6783              	.L734:
 6784              	.LBE454:
 6785              	.LBE456:
2459:fltk-1.3.4-1/png/png.c **** #endif
 6786              		.loc 1 2459 0
 6787 01de E8000000 		call	__stack_chk_fail
 6787      00
 6788              	.LVL667:
 6789              	.L733:
 6790              	.LBB457:
 6791              	.LBB455:
2442:fltk-1.3.4-1/png/png.c ****                "internal error handling cHRM coefficients");
 6792              		.loc 1 2442 0
 6793 01e3 BE000000 		movl	$.LC116, %esi
 6793      00
 6794 01e8 4889DF   		movq	%rbx, %rdi
 6795              	.LVL668:
 6796 01eb E8000000 		call	png_error
 6796      00
 6797              	.LVL669:
 6798              	.LBE455:
 6799              	.LBE457:
 6800              		.cfi_endproc
 6801              	.LFE109:
 6803              		.section	.text.unlikely.png_colorspace_set_rgb_coefficients
 6804              	.LCOLDE118:
 6805              		.section	.text.png_colorspace_set_rgb_coefficients
 6806              	.LHOTE118:
 6807              		.section	.rodata.str1.1
 6808              	.LC119:
 6809 026a 496D6167 		.string	"Image width is zero in IHDR"
 6809      65207769 
 6809      64746820 
 6809      6973207A 
 6809      65726F20 
 6810              	.LC120:
 6811 0286 496E7661 		.string	"Invalid image width in IHDR"
 6811      6C696420 
 6811      696D6167 
 6811      65207769 
 6811      64746820 
 6812              		.section	.rodata.str1.8
 6813 046a 00000000 		.align 8
 6813      0000
 6814              	.LC121:
 6815 0470 496D6167 		.string	"Image width exceeds user limit in IHDR"
 6815      65207769 
 6815      64746820 
 6815      65786365 
 6815      65647320 
 6816              		.section	.rodata.str1.1
 6817              	.LC122:
 6818 02a2 496D6167 		.string	"Image height is zero in IHDR"
 6818      65206865 
 6818      69676874 
 6818      20697320 
 6818      7A65726F 
 6819              	.LC123:
 6820 02bf 496E7661 		.string	"Invalid image height in IHDR"
 6820      6C696420 
 6820      696D6167 
 6820      65206865 
 6820      69676874 
 6821              		.section	.rodata.str1.8
 6822 0497 00       		.align 8
 6823              	.LC124:
 6824 0498 496D6167 		.string	"Image height exceeds user limit in IHDR"
 6824      65206865 
 6824      69676874 
 6824      20657863 
 6824      65656473 
 6825              		.section	.rodata.str1.1
 6826              	.LC125:
 6827 02dc 496E7661 		.string	"Invalid bit depth in IHDR"
 6827      6C696420 
 6827      62697420 
 6827      64657074 
 6827      6820696E 
 6828              	.LC126:
 6829 02f6 496E7661 		.string	"Invalid color type in IHDR"
 6829      6C696420 
 6829      636F6C6F 
 6829      72207479 
 6829      70652069 
 6830              		.section	.rodata.str1.8
 6831              		.align 8
 6832              	.LC127:
 6833 04c0 496E7661 		.string	"Invalid color type/bit depth combination in IHDR"
 6833      6C696420 
 6833      636F6C6F 
 6833      72207479 
 6833      70652F62 
 6834 04f1 00000000 		.align 8
 6834      000000
 6835              	.LC128:
 6836 04f8 556E6B6E 		.string	"Unknown interlace method in IHDR"
 6836      6F776E20 
 6836      696E7465 
 6836      726C6163 
 6836      65206D65 
 6837 0519 00000000 		.align 8
 6837      000000
 6838              	.LC129:
 6839 0520 556E6B6E 		.string	"Unknown compression method in IHDR"
 6839      6F776E20 
 6839      636F6D70 
 6839      72657373 
 6839      696F6E20 
 6840 0543 00000000 		.align 8
 6840      00
 6841              	.LC130:
 6842 0548 4D4E4720 		.string	"MNG features are not allowed in a PNG datastream"
 6842      66656174 
 6842      75726573 
 6842      20617265 
 6842      206E6F74 
 6843              		.section	.rodata.str1.1
 6844              	.LC131:
 6845 0311 556E6B6E 		.string	"Unknown filter method in IHDR"
 6845      6F776E20 
 6845      66696C74 
 6845      6572206D 
 6845      6574686F 
 6846              	.LC132:
 6847 032f 496E7661 		.string	"Invalid filter method in IHDR"
 6847      6C696420 
 6847      66696C74 
 6847      6572206D 
 6847      6574686F 
 6848              	.LC133:
 6849 034d 496E7661 		.string	"Invalid IHDR data"
 6849      6C696420 
 6849      49484452 
 6849      20646174 
 6849      6100
 6850              		.section	.text.unlikely.png_check_IHDR,"ax",@progbits
 6851              	.LCOLDB134:
 6852              		.section	.text.png_check_IHDR,"ax",@progbits
 6853              	.LHOTB134:
 6854              		.p2align 4,,15
 6855              		.globl	png_check_IHDR
 6857              	png_check_IHDR:
 6858              	.LFB111:
2480:fltk-1.3.4-1/png/png.c ****    int error = 0;
 6859              		.loc 1 2480 0
 6860              		.cfi_startproc
 6861              	.LVL670:
 6862 0000 4157     		pushq	%r15
 6863              		.cfi_def_cfa_offset 16
 6864              		.cfi_offset 15, -16
 6865 0002 4156     		pushq	%r14
 6866              		.cfi_def_cfa_offset 24
 6867              		.cfi_offset 14, -24
 6868 0004 4589CF   		movl	%r9d, %r15d
 6869 0007 4155     		pushq	%r13
 6870              		.cfi_def_cfa_offset 32
 6871              		.cfi_offset 13, -32
 6872 0009 4154     		pushq	%r12
 6873              		.cfi_def_cfa_offset 40
 6874              		.cfi_offset 12, -40
 6875 000b 4189D5   		movl	%edx, %r13d
 6876 000e 55       		pushq	%rbp
 6877              		.cfi_def_cfa_offset 48
 6878              		.cfi_offset 6, -48
 6879 000f 53       		pushq	%rbx
 6880              		.cfi_def_cfa_offset 56
 6881              		.cfi_offset 3, -56
 6882 0010 4189CC   		movl	%ecx, %r12d
 6883 0013 4889FB   		movq	%rdi, %rbx
 6884 0016 4589C6   		movl	%r8d, %r14d
 6885 0019 4883EC08 		subq	$8, %rsp
 6886              		.cfi_def_cfa_offset 64
2484:fltk-1.3.4-1/png/png.c ****    {
 6887              		.loc 1 2484 0
 6888 001d 85F6     		testl	%esi, %esi
 6889 001f 0F840B02 		je	.L791
 6889      0000
2489:fltk-1.3.4-1/png/png.c ****    {
 6890              		.loc 1 2489 0
 6891 0025 0F884D02 		js	.L792
 6891      0000
2481:fltk-1.3.4-1/png/png.c **** 
 6892              		.loc 1 2481 0
 6893 002b 31ED     		xorl	%ebp, %ebp
2519:fltk-1.3.4-1/png/png.c **** #     else
 6894              		.loc 1 2519 0
 6895 002d 3BB75C04 		cmpl	1116(%rdi), %esi
 6895      0000
 6896 0033 0F872702 		ja	.L793
 6896      0000
 6897              	.LVL671:
 6898              	.L737:
2529:fltk-1.3.4-1/png/png.c ****    {
 6899              		.loc 1 2529 0
 6900 0039 4585ED   		testl	%r13d, %r13d
 6901 003c 0F84CE01 		je	.L794
 6901      0000
2534:fltk-1.3.4-1/png/png.c ****    {
 6902              		.loc 1 2534 0
 6903 0042 0F884802 		js	.L795
 6903      0000
2542:fltk-1.3.4-1/png/png.c **** #     else
 6904              		.loc 1 2542 0
 6905 0048 443BAB60 		cmpl	1120(%rbx), %r13d
 6905      040000
 6906 004f 0F87F301 		ja	.L796
 6906      0000
 6907              	.LVL672:
 6908              	.L740:
2553:fltk-1.3.4-1/png/png.c ****        bit_depth != 8 && bit_depth != 16)
 6909              		.loc 1 2553 0
 6910 0055 4183FC10 		cmpl	$16, %r12d
 6911 0059 0F861901 		jbe	.L797
 6911      0000
 6912              	.L742:
2556:fltk-1.3.4-1/png/png.c ****       error = 1;
 6913              		.loc 1 2556 0
 6914 005f BE000000 		movl	$.LC125, %esi
 6914      00
 6915 0064 4889DF   		movq	%rbx, %rdi
2557:fltk-1.3.4-1/png/png.c ****    }
 6916              		.loc 1 2557 0
 6917 0067 BD010000 		movl	$1, %ebp
 6917      00
 6918              	.LVL673:
2556:fltk-1.3.4-1/png/png.c ****       error = 1;
 6919              		.loc 1 2556 0
 6920 006c E8000000 		call	png_warning
 6920      00
 6921              	.LVL674:
 6922              	.L743:
2560:fltk-1.3.4-1/png/png.c ****        color_type == 5 || color_type > 6)
 6923              		.loc 1 2560 0
 6924 0071 4589F5   		movl	%r14d, %r13d
 6925              	.LVL675:
 6926 0074 4183E5FB 		andl	$-5, %r13d
 6927 0078 4183FD01 		cmpl	$1, %r13d
 6928 007c 0F84AE00 		je	.L744
 6928      0000
2561:fltk-1.3.4-1/png/png.c ****    {
 6929              		.loc 1 2561 0
 6930 0082 4183FE06 		cmpl	$6, %r14d
 6931 0086 0F87A400 		ja	.L744
 6931      0000
 6932              	.LVL676:
 6933              	.L745:
2567:fltk-1.3.4-1/png/png.c ****        ((color_type == PNG_COLOR_TYPE_RGB ||
 6934              		.loc 1 2567 0
 6935 008c 4183FE03 		cmpl	$3, %r14d
 6936 0090 750A     		jne	.L763
 6937 0092 4183FC08 		cmpl	$8, %r12d
 6938 0096 0F8FBE00 		jg	.L746
 6938      0000
 6939              	.L763:
2569:fltk-1.3.4-1/png/png.c ****          color_type == PNG_COLOR_TYPE_RGB_ALPHA) && bit_depth < 8))
 6940              		.loc 1 2569 0 discriminator 1
 6941 009c 4183FE04 		cmpl	$4, %r14d
 6942 00a0 0F84AA00 		je	.L764
 6942      0000
 6943 00a6 4183FD02 		cmpl	$2, %r13d
 6944 00aa 0F84A000 		je	.L764
 6944      0000
 6945              	.LVL677:
 6946              	.L748:
2576:fltk-1.3.4-1/png/png.c ****    {
 6947              		.loc 1 2576 0
 6948 00b0 4183FF01 		cmpl	$1, %r15d
 6949 00b4 7E12     		jle	.L750
2578:fltk-1.3.4-1/png/png.c ****       error = 1;
 6950              		.loc 1 2578 0
 6951 00b6 BE000000 		movl	$.LC128, %esi
 6951      00
 6952 00bb 4889DF   		movq	%rbx, %rdi
2579:fltk-1.3.4-1/png/png.c ****    }
 6953              		.loc 1 2579 0
 6954 00be BD010000 		movl	$1, %ebp
 6954      00
 6955              	.LVL678:
2578:fltk-1.3.4-1/png/png.c ****       error = 1;
 6956              		.loc 1 2578 0
 6957 00c3 E8000000 		call	png_warning
 6957      00
 6958              	.LVL679:
 6959              	.L750:
2582:fltk-1.3.4-1/png/png.c ****    {
 6960              		.loc 1 2582 0
 6961 00c8 8B742440 		movl	64(%rsp), %esi
 6962 00cc 85F6     		testl	%esi, %esi
 6963 00ce 0F851C01 		jne	.L798
 6963      0000
 6964              	.LVL680:
 6965              	.L751:
2598:fltk-1.3.4-1/png/png.c ****        png_ptr->mng_features_permitted != 0)
 6966              		.loc 1 2598 0
 6967 00d4 F6832D01 		testb	$16, 301(%rbx)
 6967      000010
 6968 00db 0F84BC00 		je	.L752
 6968      0000
2598:fltk-1.3.4-1/png/png.c ****        png_ptr->mng_features_permitted != 0)
 6969              		.loc 1 2598 0 is_stmt 0 discriminator 1
 6970 00e1 8B8B1804 		movl	1048(%rbx), %ecx
 6970      0000
 6971 00e7 85C9     		testl	%ecx, %ecx
 6972 00e9 0F85A100 		jne	.L799
 6972      0000
2602:fltk-1.3.4-1/png/png.c ****    {
 6973              		.loc 1 2602 0 is_stmt 1
 6974 00ef 8B442448 		movl	72(%rsp), %eax
 6975 00f3 85C0     		testl	%eax, %eax
 6976 00f5 0F84DD00 		je	.L754
 6976      0000
 6977              	.L759:
2610:fltk-1.3.4-1/png/png.c ****          error = 1;
 6978              		.loc 1 2610 0
 6979 00fb BE000000 		movl	$.LC131, %esi
 6979      00
 6980 0100 4889DF   		movq	%rbx, %rdi
 6981 0103 E8000000 		call	png_warning
 6981      00
 6982              	.LVL681:
2614:fltk-1.3.4-1/png/png.c ****       {
 6983              		.loc 1 2614 0
 6984 0108 F6832D01 		testb	$16, 301(%rbx)
 6984      000010
 6985 010f 740D     		je	.L760
2616:fltk-1.3.4-1/png/png.c ****          error = 1;
 6986              		.loc 1 2616 0
 6987 0111 BE000000 		movl	$.LC132, %esi
 6987      00
 6988 0116 4889DF   		movq	%rbx, %rdi
 6989 0119 E8000000 		call	png_warning
 6989      00
 6990              	.LVL682:
 6991              	.L760:
2630:fltk-1.3.4-1/png/png.c **** }
 6992              		.loc 1 2630 0
 6993 011e BE000000 		movl	$.LC133, %esi
 6993      00
 6994 0123 4889DF   		movq	%rbx, %rdi
 6995 0126 E8000000 		call	png_error
 6995      00
 6996              	.LVL683:
 6997 012b 0F1F4400 		.p2align 4,,10
 6997      00
 6998              		.p2align 3
 6999              	.L744:
2563:fltk-1.3.4-1/png/png.c ****       error = 1;
 7000              		.loc 1 2563 0
 7001 0130 BE000000 		movl	$.LC126, %esi
 7001      00
 7002 0135 4889DF   		movq	%rbx, %rdi
2564:fltk-1.3.4-1/png/png.c ****    }
 7003              		.loc 1 2564 0
 7004 0138 BD010000 		movl	$1, %ebp
 7004      00
 7005              	.LVL684:
2563:fltk-1.3.4-1/png/png.c ****       error = 1;
 7006              		.loc 1 2563 0
 7007 013d E8000000 		call	png_warning
 7007      00
 7008              	.LVL685:
 7009 0142 E945FFFF 		jmp	.L745
 7009      FF
 7010              	.LVL686:
 7011 0147 660F1F84 		.p2align 4,,10
 7011      00000000 
 7011      00
 7012              		.p2align 3
 7013              	.L764:
2570:fltk-1.3.4-1/png/png.c ****    {
 7014              		.loc 1 2570 0
 7015 0150 4183FC07 		cmpl	$7, %r12d
 7016 0154 0F8F56FF 		jg	.L748
 7016      FFFF
 7017              	.L746:
2572:fltk-1.3.4-1/png/png.c ****       error = 1;
 7018              		.loc 1 2572 0
 7019 015a BE000000 		movl	$.LC127, %esi
 7019      00
 7020 015f 4889DF   		movq	%rbx, %rdi
2573:fltk-1.3.4-1/png/png.c ****    }
 7021              		.loc 1 2573 0
 7022 0162 BD010000 		movl	$1, %ebp
 7022      00
 7023              	.LVL687:
2572:fltk-1.3.4-1/png/png.c ****       error = 1;
 7024              		.loc 1 2572 0
 7025 0167 E8000000 		call	png_warning
 7025      00
 7026              	.LVL688:
 7027 016c E93FFFFF 		jmp	.L748
 7027      FF
 7028              	.LVL689:
 7029              		.p2align 4,,10
 7030 0171 0F1F8000 		.p2align 3
 7030      000000
 7031              	.L797:
2553:fltk-1.3.4-1/png/png.c ****        bit_depth != 8 && bit_depth != 16)
 7032              		.loc 1 2553 0
 7033 0178 B8160101 		movl	$65814, %eax
 7033      00
 7034 017d 4C0FA3E0 		btq	%r12, %rax
 7035 0181 0F82EAFE 		jc	.L743
 7035      FFFF
 7036 0187 E9D3FEFF 		jmp	.L742
 7036      FF
 7037              	.LVL690:
 7038 018c 0F1F4000 		.p2align 4,,10
 7039              		.p2align 3
 7040              	.L799:
2600:fltk-1.3.4-1/png/png.c **** 
 7041              		.loc 1 2600 0
 7042 0190 BE000000 		movl	$.LC130, %esi
 7042      00
 7043 0195 4889DF   		movq	%rbx, %rdi
 7044 0198 E8000000 		call	png_warning
 7044      00
 7045              	.LVL691:
 7046              	.L752:
2602:fltk-1.3.4-1/png/png.c ****    {
 7047              		.loc 1 2602 0
 7048 019d 8B542448 		movl	72(%rsp), %edx
 7049 01a1 85D2     		testl	%edx, %edx
 7050 01a3 7433     		je	.L754
2604:fltk-1.3.4-1/png/png.c ****           (filter_type == PNG_INTRAPIXEL_DIFFERENCING) &&
 7051              		.loc 1 2604 0
 7052 01a5 F6831804 		testb	$4, 1048(%rbx)
 7052      000004
 7053 01ac 0F8449FF 		je	.L759
 7053      FFFF
 7054 01b2 837C2448 		cmpl	$64, 72(%rsp)
 7054      40
 7055 01b7 0F853EFF 		jne	.L759
 7055      FFFF
2605:fltk-1.3.4-1/png/png.c ****           ((png_ptr->mode & PNG_HAVE_PNG_SIGNATURE) == 0) &&
 7056              		.loc 1 2605 0
 7057 01bd F6832D01 		testb	$16, 301(%rbx)
 7057      000010
 7058 01c4 0F8531FF 		jne	.L759
 7058      FFFF
2604:fltk-1.3.4-1/png/png.c ****           (filter_type == PNG_INTRAPIXEL_DIFFERENCING) &&
 7059              		.loc 1 2604 0
 7060 01ca 4183FD02 		cmpl	$2, %r13d
 7061 01ce 0F8527FF 		jne	.L759
 7061      FFFF
 7062              		.p2align 4,,10
 7063 01d4 0F1F4000 		.p2align 3
 7064              	.L754:
2629:fltk-1.3.4-1/png/png.c ****       png_error(png_ptr, "Invalid IHDR data");
 7065              		.loc 1 2629 0
 7066 01d8 83FD01   		cmpl	$1, %ebp
 7067 01db 0F843DFF 		je	.L760
 7067      FFFF
2631:fltk-1.3.4-1/png/png.c **** 
 7068              		.loc 1 2631 0
 7069 01e1 4883C408 		addq	$8, %rsp
 7070              		.cfi_remember_state
 7071              		.cfi_def_cfa_offset 56
 7072 01e5 5B       		popq	%rbx
 7073              		.cfi_def_cfa_offset 48
 7074              	.LVL692:
 7075 01e6 5D       		popq	%rbp
 7076              		.cfi_def_cfa_offset 40
 7077              	.LVL693:
 7078 01e7 415C     		popq	%r12
 7079              		.cfi_def_cfa_offset 32
 7080              	.LVL694:
 7081 01e9 415D     		popq	%r13
 7082              		.cfi_def_cfa_offset 24
 7083 01eb 415E     		popq	%r14
 7084              		.cfi_def_cfa_offset 16
 7085              	.LVL695:
 7086 01ed 415F     		popq	%r15
 7087              		.cfi_def_cfa_offset 8
 7088              	.LVL696:
 7089 01ef C3       		ret
 7090              	.LVL697:
 7091              		.p2align 4,,10
 7092              		.p2align 3
 7093              	.L798:
 7094              		.cfi_restore_state
2584:fltk-1.3.4-1/png/png.c ****       error = 1;
 7095              		.loc 1 2584 0
 7096 01f0 BE000000 		movl	$.LC129, %esi
 7096      00
 7097 01f5 4889DF   		movq	%rbx, %rdi
2585:fltk-1.3.4-1/png/png.c ****    }
 7098              		.loc 1 2585 0
 7099 01f8 BD010000 		movl	$1, %ebp
 7099      00
 7100              	.LVL698:
2584:fltk-1.3.4-1/png/png.c ****       error = 1;
 7101              		.loc 1 2584 0
 7102 01fd E8000000 		call	png_warning
 7102      00
 7103              	.LVL699:
 7104 0202 E9CDFEFF 		jmp	.L751
 7104      FF
 7105              	.LVL700:
 7106 0207 660F1F84 		.p2align 4,,10
 7106      00000000 
 7106      00
 7107              		.p2align 3
 7108              	.L794:
2531:fltk-1.3.4-1/png/png.c ****       error = 1;
 7109              		.loc 1 2531 0
 7110 0210 BE000000 		movl	$.LC122, %esi
 7110      00
 7111 0215 4889DF   		movq	%rbx, %rdi
2532:fltk-1.3.4-1/png/png.c ****    }
 7112              		.loc 1 2532 0
 7113 0218 BD010000 		movl	$1, %ebp
 7113      00
 7114              	.LVL701:
2531:fltk-1.3.4-1/png/png.c ****       error = 1;
 7115              		.loc 1 2531 0
 7116 021d E8000000 		call	png_warning
 7116      00
 7117              	.LVL702:
 7118 0222 E92EFEFF 		jmp	.L740
 7118      FF
 7119              	.LVL703:
 7120 0227 660F1F84 		.p2align 4,,10
 7120      00000000 
 7120      00
 7121              		.p2align 3
 7122              	.L791:
2486:fltk-1.3.4-1/png/png.c ****       error = 1;
 7123              		.loc 1 2486 0
 7124 0230 BE000000 		movl	$.LC119, %esi
 7124      00
 7125              	.LVL704:
2487:fltk-1.3.4-1/png/png.c ****    }
 7126              		.loc 1 2487 0
 7127 0235 BD010000 		movl	$1, %ebp
 7127      00
2486:fltk-1.3.4-1/png/png.c ****       error = 1;
 7128              		.loc 1 2486 0
 7129 023a E8000000 		call	png_warning
 7129      00
 7130              	.LVL705:
 7131 023f E9F5FDFF 		jmp	.L737
 7131      FF
 7132              	.LVL706:
 7133              		.p2align 4,,10
 7134 0244 0F1F4000 		.p2align 3
 7135              	.L796:
2547:fltk-1.3.4-1/png/png.c ****          error = 1;
 7136              		.loc 1 2547 0
 7137 0248 BE000000 		movl	$.LC124, %esi
 7137      00
 7138 024d 4889DF   		movq	%rbx, %rdi
2548:fltk-1.3.4-1/png/png.c ****       }
 7139              		.loc 1 2548 0
 7140 0250 BD010000 		movl	$1, %ebp
 7140      00
 7141              	.LVL707:
2547:fltk-1.3.4-1/png/png.c ****          error = 1;
 7142              		.loc 1 2547 0
 7143 0255 E8000000 		call	png_warning
 7143      00
 7144              	.LVL708:
 7145 025a E9F6FDFF 		jmp	.L740
 7145      FF
 7146              	.LVL709:
 7147 025f 90       		.p2align 4,,10
 7148              		.p2align 3
 7149              	.L793:
2524:fltk-1.3.4-1/png/png.c ****          error = 1;
 7150              		.loc 1 2524 0
 7151 0260 BE000000 		movl	$.LC121, %esi
 7151      00
 7152              	.LVL710:
2525:fltk-1.3.4-1/png/png.c ****       }
 7153              		.loc 1 2525 0
 7154 0265 BD010000 		movl	$1, %ebp
 7154      00
2524:fltk-1.3.4-1/png/png.c ****          error = 1;
 7155              		.loc 1 2524 0
 7156 026a E8000000 		call	png_warning
 7156      00
 7157              	.LVL711:
 7158 026f E9C5FDFF 		jmp	.L737
 7158      FF
 7159              	.LVL712:
 7160              		.p2align 4,,10
 7161 0274 0F1F4000 		.p2align 3
 7162              	.L792:
2491:fltk-1.3.4-1/png/png.c ****       error = 1;
 7163              		.loc 1 2491 0
 7164 0278 BE000000 		movl	$.LC120, %esi
 7164      00
 7165              	.LVL713:
2492:fltk-1.3.4-1/png/png.c ****    }
 7166              		.loc 1 2492 0
 7167 027d BD010000 		movl	$1, %ebp
 7167      00
2491:fltk-1.3.4-1/png/png.c ****       error = 1;
 7168              		.loc 1 2491 0
 7169 0282 E8000000 		call	png_warning
 7169      00
 7170              	.LVL714:
 7171 0287 E9ADFDFF 		jmp	.L737
 7171      FF
 7172              	.LVL715:
 7173 028c 0F1F4000 		.p2align 4,,10
 7174              		.p2align 3
 7175              	.L795:
2536:fltk-1.3.4-1/png/png.c ****       error = 1;
 7176              		.loc 1 2536 0
 7177 0290 BE000000 		movl	$.LC123, %esi
 7177      00
 7178 0295 4889DF   		movq	%rbx, %rdi
2537:fltk-1.3.4-1/png/png.c ****    }
 7179              		.loc 1 2537 0
 7180 0298 BD010000 		movl	$1, %ebp
 7180      00
 7181              	.LVL716:
2536:fltk-1.3.4-1/png/png.c ****       error = 1;
 7182              		.loc 1 2536 0
 7183 029d E8000000 		call	png_warning
 7183      00
 7184              	.LVL717:
 7185 02a2 E9AEFDFF 		jmp	.L740
 7185      FF
 7186              		.cfi_endproc
 7187              	.LFE111:
 7189              		.section	.text.unlikely.png_check_IHDR
 7190              	.LCOLDE134:
 7191              		.section	.text.png_check_IHDR
 7192              	.LHOTE134:
 7193              		.section	.text.unlikely.png_check_fp_number,"ax",@progbits
 7194              	.LCOLDB135:
 7195              		.section	.text.png_check_fp_number,"ax",@progbits
 7196              	.LHOTB135:
 7197              		.p2align 4,,15
 7198              		.globl	png_check_fp_number
 7200              	png_check_fp_number:
 7201              	.LFB112:
2645:fltk-1.3.4-1/png/png.c ****    int state = *statep;
 7202              		.loc 1 2645 0
 7203              		.cfi_startproc
 7204              	.LVL718:
2647:fltk-1.3.4-1/png/png.c **** 
 7205              		.loc 1 2647 0
 7206 0000 4C8B09   		movq	(%rcx), %r9
2646:fltk-1.3.4-1/png/png.c ****    png_size_t i = *whereami;
 7207              		.loc 1 2646 0
 7208 0003 448B02   		movl	(%rdx), %r8d
 7209              	.LVL719:
2649:fltk-1.3.4-1/png/png.c ****    {
 7210              		.loc 1 2649 0
 7211 0006 4939F1   		cmpq	%rsi, %r9
 7212 0009 7365     		jnb	.L843
 7213              	.L835:
 7214              	.LBB458:
2653:fltk-1.3.4-1/png/png.c ****       {
 7215              		.loc 1 2653 0
 7216 000b 420FB604 		movzbl	(%rdi,%r9), %eax
 7216      0F
 7217 0010 83E82B   		subl	$43, %eax
 7218 0013 3C3A     		cmpb	$58, %al
 7219 0015 7759     		ja	.L843
 7220 0017 0FB6C0   		movzbl	%al, %eax
 7221 001a FF24C500 		jmp	*.L805(,%rax,8)
 7221      000000
 7222              		.section	.rodata.png_check_fp_number,"a",@progbits
 7223              		.align 8
 7224              		.align 4
 7225              	.L805:
 7226 0000 00000000 		.quad	.L804
 7226      00000000 
 7227 0008 00000000 		.quad	.L843
 7227      00000000 
 7228 0010 00000000 		.quad	.L828
 7228      00000000 
 7229 0018 00000000 		.quad	.L807
 7229      00000000 
 7230 0020 00000000 		.quad	.L843
 7230      00000000 
 7231 0028 00000000 		.quad	.L808
 7231      00000000 
 7232 0030 00000000 		.quad	.L809
 7232      00000000 
 7233 0038 00000000 		.quad	.L809
 7233      00000000 
 7234 0040 00000000 		.quad	.L809
 7234      00000000 
 7235 0048 00000000 		.quad	.L809
 7235      00000000 
 7236 0050 00000000 		.quad	.L809
 7236      00000000 
 7237 0058 00000000 		.quad	.L809
 7237      00000000 
 7238 0060 00000000 		.quad	.L809
 7238      00000000 
 7239 0068 00000000 		.quad	.L809
 7239      00000000 
 7240 0070 00000000 		.quad	.L809
 7240      00000000 
 7241 0078 00000000 		.quad	.L843
 7241      00000000 
 7242 0080 00000000 		.quad	.L843
 7242      00000000 
 7243 0088 00000000 		.quad	.L843
 7243      00000000 
 7244 0090 00000000 		.quad	.L843
 7244      00000000 
 7245 0098 00000000 		.quad	.L843
 7245      00000000 
 7246 00a0 00000000 		.quad	.L843
 7246      00000000 
 7247 00a8 00000000 		.quad	.L843
 7247      00000000 
 7248 00b0 00000000 		.quad	.L843
 7248      00000000 
 7249 00b8 00000000 		.quad	.L843
 7249      00000000 
 7250 00c0 00000000 		.quad	.L843
 7250      00000000 
 7251 00c8 00000000 		.quad	.L843
 7251      00000000 
 7252 00d0 00000000 		.quad	.L810
 7252      00000000 
 7253 00d8 00000000 		.quad	.L843
 7253      00000000 
 7254 00e0 00000000 		.quad	.L843
 7254      00000000 
 7255 00e8 00000000 		.quad	.L843
 7255      00000000 
 7256 00f0 00000000 		.quad	.L843
 7256      00000000 
 7257 00f8 00000000 		.quad	.L843
 7257      00000000 
 7258 0100 00000000 		.quad	.L843
 7258      00000000 
 7259 0108 00000000 		.quad	.L843
 7259      00000000 
 7260 0110 00000000 		.quad	.L843
 7260      00000000 
 7261 0118 00000000 		.quad	.L843
 7261      00000000 
 7262 0120 00000000 		.quad	.L843
 7262      00000000 
 7263 0128 00000000 		.quad	.L843
 7263      00000000 
 7264 0130 00000000 		.quad	.L843
 7264      00000000 
 7265 0138 00000000 		.quad	.L843
 7265      00000000 
 7266 0140 00000000 		.quad	.L843
 7266      00000000 
 7267 0148 00000000 		.quad	.L843
 7267      00000000 
 7268 0150 00000000 		.quad	.L843
 7268      00000000 
 7269 0158 00000000 		.quad	.L843
 7269      00000000 
 7270 0160 00000000 		.quad	.L843
 7270      00000000 
 7271 0168 00000000 		.quad	.L843
 7271      00000000 
 7272 0170 00000000 		.quad	.L843
 7272      00000000 
 7273 0178 00000000 		.quad	.L843
 7273      00000000 
 7274 0180 00000000 		.quad	.L843
 7274      00000000 
 7275 0188 00000000 		.quad	.L843
 7275      00000000 
 7276 0190 00000000 		.quad	.L843
 7276      00000000 
 7277 0198 00000000 		.quad	.L843
 7277      00000000 
 7278 01a0 00000000 		.quad	.L843
 7278      00000000 
 7279 01a8 00000000 		.quad	.L843
 7279      00000000 
 7280 01b0 00000000 		.quad	.L843
 7280      00000000 
 7281 01b8 00000000 		.quad	.L843
 7281      00000000 
 7282 01c0 00000000 		.quad	.L843
 7282      00000000 
 7283 01c8 00000000 		.quad	.L843
 7283      00000000 
 7284 01d0 00000000 		.quad	.L810
 7284      00000000 
 7285              		.section	.text.png_check_fp_number
 7286              		.p2align 4,,10
 7287 0021 0F1F8000 		.p2align 3
 7287      000000
 7288              	.L828:
 7289 0028 B8040000 		movl	$4, %eax
 7289      00
2656:fltk-1.3.4-1/png/png.c ****       case 46:  type = PNG_FP_SAW_DOT;                    break;
 7290              		.loc 1 2656 0
 7291 002d 41BB8400 		movl	$132, %r11d
 7291      0000
 7292              		.p2align 4,,10
 7293 0033 0F1F4400 		.p2align 3
 7293      00
 7294              	.L806:
 7295              	.LVL720:
2671:fltk-1.3.4-1/png/png.c ****       {
 7296              		.loc 1 2671 0
 7297 0038 4589C2   		movl	%r8d, %r10d
 7298 003b 4183E203 		andl	$3, %r10d
 7299 003f 428D4410 		leal	-4(%rax,%r10), %eax
 7299      FC
 7300 0044 83F81D   		cmpl	$29, %eax
 7301 0047 7727     		ja	.L843
 7302 0049 FF24C500 		jmp	*.L813(,%rax,8)
 7302      000000
 7303              		.section	.rodata.png_check_fp_number
 7304              		.align 8
 7305              		.align 4
 7306              	.L813:
 7307 01d8 00000000 		.quad	.L812
 7307      00000000 
 7308 01e0 00000000 		.quad	.L843
 7308      00000000 
 7309 01e8 00000000 		.quad	.L814
 7309      00000000 
 7310 01f0 00000000 		.quad	.L843
 7310      00000000 
 7311 01f8 00000000 		.quad	.L815
 7311      00000000 
 7312 0200 00000000 		.quad	.L816
 7312      00000000 
 7313 0208 00000000 		.quad	.L817
 7313      00000000 
 7314 0210 00000000 		.quad	.L843
 7314      00000000 
 7315 0218 00000000 		.quad	.L843
 7315      00000000 
 7316 0220 00000000 		.quad	.L843
 7316      00000000 
 7317 0228 00000000 		.quad	.L843
 7317      00000000 
 7318 0230 00000000 		.quad	.L843
 7318      00000000 
 7319 0238 00000000 		.quad	.L818
 7319      00000000 
 7320 0240 00000000 		.quad	.L843
 7320      00000000 
 7321 0248 00000000 		.quad	.L843
 7321      00000000 
 7322 0250 00000000 		.quad	.L843
 7322      00000000 
 7323 0258 00000000 		.quad	.L843
 7323      00000000 
 7324 0260 00000000 		.quad	.L843
 7324      00000000 
 7325 0268 00000000 		.quad	.L843
 7325      00000000 
 7326 0270 00000000 		.quad	.L843
 7326      00000000 
 7327 0278 00000000 		.quad	.L843
 7327      00000000 
 7328 0280 00000000 		.quad	.L843
 7328      00000000 
 7329 0288 00000000 		.quad	.L843
 7329      00000000 
 7330 0290 00000000 		.quad	.L843
 7330      00000000 
 7331 0298 00000000 		.quad	.L843
 7331      00000000 
 7332 02a0 00000000 		.quad	.L843
 7332      00000000 
 7333 02a8 00000000 		.quad	.L843
 7333      00000000 
 7334 02b0 00000000 		.quad	.L843
 7334      00000000 
 7335 02b8 00000000 		.quad	.L820
 7335      00000000 
 7336 02c0 00000000 		.quad	.L820
 7336      00000000 
 7337              		.section	.text.png_check_fp_number
 7338              		.p2align 4,,10
 7339              		.p2align 3
 7340              	.L820:
2724:fltk-1.3.4-1/png/png.c ****             goto PNG_FP_End;
 7341              		.loc 1 2724 0
 7342 0050 4489C0   		movl	%r8d, %eax
 7343 0053 83E008   		andl	$8, %eax
 7344 0056 741E     		je	.L802
2727:fltk-1.3.4-1/png/png.c **** 
 7345              		.loc 1 2727 0
 7346 0058 4181E0C0 		andl	$448, %r8d
 7346      010000
 7347              	.LVL721:
 7348 005f 4183C802 		orl	$2, %r8d
 7349              	.LVL722:
 7350              	.L822:
2754:fltk-1.3.4-1/png/png.c ****    }
 7351              		.loc 1 2754 0
 7352 0063 4983C101 		addq	$1, %r9
 7353              	.LVL723:
 7354              	.LBE458:
2649:fltk-1.3.4-1/png/png.c ****    {
 7355              		.loc 1 2649 0
 7356 0067 4C39CE   		cmpq	%r9, %rsi
 7357 006a 779F     		ja	.L835
 7358 006c 0F1F4000 		.p2align 4,,10
 7359              		.p2align 3
 7360              	.L843:
 7361 0070 4489C0   		movl	%r8d, %eax
 7362 0073 83E008   		andl	$8, %eax
 7363              	.L802:
2764:fltk-1.3.4-1/png/png.c **** }
 7364              		.loc 1 2764 0
 7365 0076 85C0     		testl	%eax, %eax
2761:fltk-1.3.4-1/png/png.c ****    *whereami = i;
 7366              		.loc 1 2761 0
 7367 0078 448902   		movl	%r8d, (%rdx)
2762:fltk-1.3.4-1/png/png.c **** 
 7368              		.loc 1 2762 0
 7369 007b 4C8909   		movq	%r9, (%rcx)
2764:fltk-1.3.4-1/png/png.c **** }
 7370              		.loc 1 2764 0
 7371 007e 0F95C0   		setne	%al
 7372 0081 0FB6C0   		movzbl	%al, %eax
2765:fltk-1.3.4-1/png/png.c **** 
 7373              		.loc 1 2765 0
 7374 0084 C3       		ret
 7375              		.p2align 4,,10
 7376 0085 0F1F00   		.p2align 3
 7377              	.L804:
 7378              	.LBB459:
2653:fltk-1.3.4-1/png/png.c ****       {
 7379              		.loc 1 2653 0
 7380 0088 B8040000 		movl	$4, %eax
 7380      00
2655:fltk-1.3.4-1/png/png.c ****       case 45:  type = PNG_FP_SAW_SIGN + PNG_FP_NEGATIVE; break;
 7381              		.loc 1 2655 0
 7382 008d 41BB0400 		movl	$4, %r11d
 7382      0000
 7383 0093 EBA3     		jmp	.L806
 7384              		.p2align 4,,10
 7385 0095 0F1F00   		.p2align 3
 7386              	.L810:
 7387              	.LVL724:
2663:fltk-1.3.4-1/png/png.c ****       default:  goto PNG_FP_End;
 7388              		.loc 1 2663 0
 7389 0098 B8200000 		movl	$32, %eax
 7389      00
 7390 009d 41BB2000 		movl	$32, %r11d
 7390      0000
 7391 00a3 EB93     		jmp	.L806
 7392              	.LVL725:
 7393              		.p2align 4,,10
 7394 00a5 0F1F00   		.p2align 3
 7395              	.L809:
2661:fltk-1.3.4-1/png/png.c ****       case 69:
 7396              		.loc 1 2661 0
 7397 00a8 B8080000 		movl	$8, %eax
 7397      00
 7398 00ad 41BB0801 		movl	$264, %r11d
 7398      0000
 7399 00b3 EB83     		jmp	.L806
 7400              	.LVL726:
 7401              		.p2align 4,,10
 7402 00b5 0F1F00   		.p2align 3
 7403              	.L808:
2658:fltk-1.3.4-1/png/png.c ****       case 49: case 50: case 51: case 52:
 7404              		.loc 1 2658 0
 7405 00b8 B8080000 		movl	$8, %eax
 7405      00
 7406 00bd 41BB0800 		movl	$8, %r11d
 7406      0000
 7407 00c3 E970FFFF 		jmp	.L806
 7407      FF
 7408              	.LVL727:
 7409 00c8 0F1F8400 		.p2align 4,,10
 7409      00000000 
 7410              		.p2align 3
 7411              	.L807:
2657:fltk-1.3.4-1/png/png.c ****       case 48:  type = PNG_FP_SAW_DIGIT;                  break;
 7412              		.loc 1 2657 0
 7413 00d0 B8100000 		movl	$16, %eax
 7413      00
 7414 00d5 41BB1000 		movl	$16, %r11d
 7414      0000
 7415 00db E958FFFF 		jmp	.L806
 7415      FF
 7416              	.LVL728:
 7417              		.p2align 4,,10
 7418              		.p2align 3
 7419              	.L818:
2682:fltk-1.3.4-1/png/png.c ****             goto PNG_FP_End;
 7420              		.loc 1 2682 0
 7421 00e0 41F6C010 		testb	$16, %r8b
 7422 00e4 758A     		jne	.L843
2685:fltk-1.3.4-1/png/png.c ****             png_fp_add(state, type);
 7423              		.loc 1 2685 0
 7424 00e6 41F6C008 		testb	$8, %r8b
 7425 00ea 7576     		jne	.L841
 7426 00ec 4181E0C0 		andl	$448, %r8d
 7426      010000
 7427              	.LVL729:
 7428 00f3 4183C801 		orl	$1, %r8d
 7429 00f7 EB69     		jmp	.L841
 7430              	.LVL730:
 7431 00f9 0F1F8000 		.p2align 4,,10
 7431      000000
 7432              		.p2align 3
 7433              	.L817:
2743:fltk-1.3.4-1/png/png.c **** 
 7434              		.loc 1 2743 0
 7435 0100 4183C848 		orl	$72, %r8d
 7436              	.LVL731:
2745:fltk-1.3.4-1/png/png.c **** 
 7437              		.loc 1 2745 0
 7438 0104 E95AFFFF 		jmp	.L822
 7438      FF
 7439 0109 0F1F8000 		.p2align 4,,10
 7439      000000
 7440              		.p2align 3
 7441              	.L816:
 7442 0110 4183C840 		orl	$64, %r8d
 7443              	.LVL732:
2716:fltk-1.3.4-1/png/png.c ****          break;
 7444              		.loc 1 2716 0
 7445 0114 4509D8   		orl	%r11d, %r8d
 7446              	.LVL733:
2717:fltk-1.3.4-1/png/png.c **** 
 7447              		.loc 1 2717 0
 7448 0117 E947FFFF 		jmp	.L822
 7448      FF
 7449 011c 0F1F4000 		.p2align 4,,10
 7450              		.p2align 3
 7451              	.L815:
2694:fltk-1.3.4-1/png/png.c ****             png_fp_set(state, PNG_FP_FRACTION | PNG_FP_SAW_DOT);
 7452              		.loc 1 2694 0
 7453 0120 41F6C010 		testb	$16, %r8b
 7454 0124 740B     		je	.L825
2695:fltk-1.3.4-1/png/png.c **** 
 7455              		.loc 1 2695 0
 7456 0126 4181E0C0 		andl	$448, %r8d
 7456      010000
 7457              	.LVL734:
 7458 012d 4183C811 		orl	$17, %r8d
 7459              	.LVL735:
 7460              	.L825:
2697:fltk-1.3.4-1/png/png.c **** 
 7461              		.loc 1 2697 0
 7462 0131 4183CB40 		orl	$64, %r11d
 7463              	.LVL736:
 7464 0135 4509D8   		orl	%r11d, %r8d
 7465              	.LVL737:
2699:fltk-1.3.4-1/png/png.c **** 
 7466              		.loc 1 2699 0
 7467 0138 E926FFFF 		jmp	.L822
 7467      FF
 7468              	.LVL738:
 7469 013d 0F1F00   		.p2align 4,,10
 7470              		.p2align 3
 7471              	.L814:
2732:fltk-1.3.4-1/png/png.c ****             goto PNG_FP_End; /* not a part of the number */
 7472              		.loc 1 2732 0
 7473 0140 41F6C03C 		testb	$60, %r8b
 7474 0144 0F8526FF 		jne	.L843
 7474      FFFF
2735:fltk-1.3.4-1/png/png.c **** 
 7475              		.loc 1 2735 0
 7476 014a 4183C804 		orl	$4, %r8d
 7477              	.LVL739:
2737:fltk-1.3.4-1/png/png.c **** 
 7478              		.loc 1 2737 0
 7479 014e E910FFFF 		jmp	.L822
 7479      FF
 7480              		.p2align 4,,10
 7481 0153 0F1F4400 		.p2align 3
 7481      00
 7482              	.L812:
2674:fltk-1.3.4-1/png/png.c ****             goto PNG_FP_End; /* not a part of the number */
 7483              		.loc 1 2674 0
 7484 0158 41F6C03C 		testb	$60, %r8b
 7485 015c 0F850EFF 		jne	.L843
 7485      FFFF
 7486              	.LVL740:
 7487              	.L841:
2689:fltk-1.3.4-1/png/png.c **** 
 7488              		.loc 1 2689 0
 7489 0162 4509D8   		orl	%r11d, %r8d
 7490              	.LVL741:
 7491 0165 E9F9FEFF 		jmp	.L822
 7491      FF
 7492              	.LBE459:
 7493              		.cfi_endproc
 7494              	.LFE112:
 7496              		.section	.text.unlikely.png_check_fp_number
 7497              	.LCOLDE135:
 7498              		.section	.text.png_check_fp_number
 7499              	.LHOTE135:
 7500              		.section	.text.unlikely.png_check_fp_string,"ax",@progbits
 7501              	.LCOLDB136:
 7502              		.section	.text.png_check_fp_string,"ax",@progbits
 7503              	.LHOTB136:
 7504              		.p2align 4,,15
 7505              		.globl	png_check_fp_string
 7507              	png_check_fp_string:
 7508              	.LFB113:
2771:fltk-1.3.4-1/png/png.c ****    int        state=0;
 7509              		.loc 1 2771 0
 7510              		.cfi_startproc
 7511              	.LVL742:
 7512 0000 55       		pushq	%rbp
 7513              		.cfi_def_cfa_offset 16
 7514              		.cfi_offset 6, -16
 7515 0001 53       		pushq	%rbx
 7516              		.cfi_def_cfa_offset 24
 7517              		.cfi_offset 3, -24
 7518 0002 4883EC28 		subq	$40, %rsp
 7519              		.cfi_def_cfa_offset 64
2775:fltk-1.3.4-1/png/png.c ****       (char_index == size || string[char_index] == 0))
 7520              		.loc 1 2775 0
 7521 0006 488D4C24 		leaq	16(%rsp), %rcx
 7521      10
 7522 000b 488D5424 		leaq	12(%rsp), %rdx
 7522      0C
2772:fltk-1.3.4-1/png/png.c ****    png_size_t char_index=0;
 7523              		.loc 1 2772 0
 7524 0010 C744240C 		movl	$0, 12(%rsp)
 7524      00000000 
2771:fltk-1.3.4-1/png/png.c ****    int        state=0;
 7525              		.loc 1 2771 0
 7526 0018 64488B04 		movq	%fs:40, %rax
 7526      25280000 
 7526      00
 7527 0021 48894424 		movq	%rax, 24(%rsp)
 7527      18
 7528 0026 31C0     		xorl	%eax, %eax
2773:fltk-1.3.4-1/png/png.c **** 
 7529              		.loc 1 2773 0
 7530 0028 48C74424 		movq	$0, 16(%rsp)
 7530      10000000 
 7530      00
2775:fltk-1.3.4-1/png/png.c ****       (char_index == size || string[char_index] == 0))
 7531              		.loc 1 2775 0
 7532 0031 E8000000 		call	png_check_fp_number
 7532      00
 7533              	.LVL743:
 7534 0036 85C0     		testl	%eax, %eax
 7535 0038 7416     		je	.L845
2776:fltk-1.3.4-1/png/png.c ****       return state /* must be non-zero - see above */;
 7536              		.loc 1 2776 0 discriminator 1
 7537 003a 488B5424 		movq	16(%rsp), %rdx
 7537      10
2775:fltk-1.3.4-1/png/png.c ****       (char_index == size || string[char_index] == 0))
 7538              		.loc 1 2775 0 discriminator 1
 7539 003f 4839D6   		cmpq	%rdx, %rsi
 7540 0042 7408     		je	.L846
2779:fltk-1.3.4-1/png/png.c **** }
 7541              		.loc 1 2779 0
 7542 0044 31C0     		xorl	%eax, %eax
2776:fltk-1.3.4-1/png/png.c ****       return state /* must be non-zero - see above */;
 7543              		.loc 1 2776 0
 7544 0046 803C1700 		cmpb	$0, (%rdi,%rdx)
 7545 004a 7504     		jne	.L845
 7546              	.L846:
2777:fltk-1.3.4-1/png/png.c **** 
 7547              		.loc 1 2777 0
 7548 004c 8B44240C 		movl	12(%rsp), %eax
 7549              	.L845:
2780:fltk-1.3.4-1/png/png.c **** #endif /* pCAL || sCAL */
 7550              		.loc 1 2780 0
 7551 0050 488B7424 		movq	24(%rsp), %rsi
 7551      18
 7552 0055 64483334 		xorq	%fs:40, %rsi
 7552      25280000 
 7552      00
 7553 005e 7507     		jne	.L853
 7554 0060 4883C428 		addq	$40, %rsp
 7555              		.cfi_remember_state
 7556              		.cfi_def_cfa_offset 24
 7557 0064 5B       		popq	%rbx
 7558              		.cfi_def_cfa_offset 16
 7559 0065 5D       		popq	%rbp
 7560              		.cfi_def_cfa_offset 8
 7561 0066 C3       		ret
 7562              	.L853:
 7563              		.cfi_restore_state
 7564 0067 E8000000 		call	__stack_chk_fail
 7564      00
 7565              	.LVL744:
 7566              		.cfi_endproc
 7567              	.LFE113:
 7569              		.section	.text.unlikely.png_check_fp_string
 7570              	.LCOLDE136:
 7571              		.section	.text.png_check_fp_string
 7572              	.LHOTE136:
 7573              		.section	.rodata.str1.8
 7574 0579 00000000 		.align 8
 7574      000000
 7575              	.LC141:
 7576 0580 41534349 		.string	"ASCII conversion buffer too small"
 7576      4920636F 
 7576      6E766572 
 7576      73696F6E 
 7576      20627566 
 7577              		.section	.text.unlikely.png_ascii_from_fp,"ax",@progbits
 7578              	.LCOLDB142:
 7579              		.section	.text.png_ascii_from_fp,"ax",@progbits
 7580              	.LHOTB142:
 7581              		.p2align 4,,15
 7582              		.globl	png_ascii_from_fp
 7584              	png_ascii_from_fp:
 7585              	.LFB115:
2828:fltk-1.3.4-1/png/png.c ****    /* We use standard functions from math.h, but not printf because
 7586              		.loc 1 2828 0
 7587              		.cfi_startproc
 7588              	.LVL745:
 7589 0000 4157     		pushq	%r15
 7590              		.cfi_def_cfa_offset 16
 7591              		.cfi_offset 15, -16
 7592 0002 4156     		pushq	%r14
 7593              		.cfi_def_cfa_offset 24
 7594              		.cfi_offset 14, -24
 7595 0004 4989D6   		movq	%rdx, %r14
 7596 0007 4155     		pushq	%r13
 7597              		.cfi_def_cfa_offset 32
 7598              		.cfi_offset 13, -32
 7599 0009 4154     		pushq	%r12
 7600              		.cfi_def_cfa_offset 40
 7601              		.cfi_offset 12, -40
 7602 000b 4989F5   		movq	%rsi, %r13
 7603 000e 55       		pushq	%rbp
 7604              		.cfi_def_cfa_offset 48
 7605              		.cfi_offset 6, -48
 7606 000f 53       		pushq	%rbx
 7607              		.cfi_def_cfa_offset 56
 7608              		.cfi_offset 3, -56
 7609 0010 660F28C8 		movapd	%xmm0, %xmm1
 7610 0014 4883EC48 		subq	$72, %rsp
 7611              		.cfi_def_cfa_offset 128
2828:fltk-1.3.4-1/png/png.c ****    /* We use standard functions from math.h, but not printf because
 7612              		.loc 1 2828 0
 7613 0018 64488B04 		movq	%fs:40, %rax
 7613      25280000 
 7613      00
 7614 0021 48894424 		movq	%rax, 56(%rsp)
 7614      38
 7615 0026 31C0     		xorl	%eax, %eax
2834:fltk-1.3.4-1/png/png.c ****       precision = DBL_DIG;
 7616              		.loc 1 2834 0
 7617 0028 85C9     		testl	%ecx, %ecx
2828:fltk-1.3.4-1/png/png.c ****    /* We use standard functions from math.h, but not printf because
 7618              		.loc 1 2828 0
 7619 002a 48897C24 		movq	%rdi, 8(%rsp)
 7619      08
2834:fltk-1.3.4-1/png/png.c ****       precision = DBL_DIG;
 7620              		.loc 1 2834 0
 7621 002f 745F     		je	.L921
2838:fltk-1.3.4-1/png/png.c ****       precision = DBL_DIG+1;
 7622              		.loc 1 2838 0
 7623 0031 83F910   		cmpl	$16, %ecx
 7624 0034 89CD     		movl	%ecx, %ebp
 7625 0036 0F861D05 		jbe	.L974
 7625      0000
 7626 003c B8150000 		movl	$21, %eax
 7626      00
2839:fltk-1.3.4-1/png/png.c **** 
 7627              		.loc 1 2839 0
 7628 0041 BD100000 		movl	$16, %ebp
 7628      00
 7629              	.LVL746:
 7630              	.L856:
2842:fltk-1.3.4-1/png/png.c ****    {
 7631              		.loc 1 2842 0
 7632 0046 4939C6   		cmpq	%rax, %r14
 7633 0049 0F82E504 		jb	.L857
 7633      0000
2844:fltk-1.3.4-1/png/png.c ****       {
 7634              		.loc 1 2844 0
 7635 004f 660FEFFF 		pxor	%xmm7, %xmm7
 7636 0053 660F2EF9 		ucomisd	%xmm1, %xmm7
 7637 0057 7777     		ja	.L975
 7638              	.LVL747:
 7639              	.L858:
2851:fltk-1.3.4-1/png/png.c ****       {
 7640              		.loc 1 2851 0
 7641 0059 660F2E0D 		ucomisd	.LC138(%rip), %xmm1
 7641      00000000 
 7642 0061 723D     		jb	.L967
2851:fltk-1.3.4-1/png/png.c ****       {
 7643              		.loc 1 2851 0 is_stmt 0 discriminator 1
 7644 0063 F20F103D 		movsd	.LC139(%rip), %xmm7
 7644      00000000 
 7645 006b 660F2EF9 		ucomisd	%xmm1, %xmm7
 7646 006f 737F     		jnb	.L976
 7647              	.L862:
 7648              	.LVL748:
3123:fltk-1.3.4-1/png/png.c ****          *ascii++ = 110; /* 'n' */
 7649              		.loc 1 3123 0 is_stmt 1
 7650 0071 41C64500 		movb	$105, 0(%r13)
 7650      69
 7651              	.LVL749:
3124:fltk-1.3.4-1/png/png.c ****          *ascii++ = 102; /* 'f' */
 7652              		.loc 1 3124 0
 7653 0076 41C64501 		movb	$110, 1(%r13)
 7653      6E
 7654              	.LVL750:
3125:fltk-1.3.4-1/png/png.c ****          *ascii = 0;
 7655              		.loc 1 3125 0
 7656 007b 41C64502 		movb	$102, 2(%r13)
 7656      66
3126:fltk-1.3.4-1/png/png.c ****          return;
 7657              		.loc 1 3126 0
 7658 0080 41C64503 		movb	$0, 3(%r13)
 7658      00
3127:fltk-1.3.4-1/png/png.c ****       }
 7659              		.loc 1 3127 0
 7660 0085 EB25     		jmp	.L854
 7661              	.LVL751:
 7662 0087 660F1F84 		.p2align 4,,10
 7662      00000000 
 7662      00
 7663              		.p2align 3
 7664              	.L921:
 7665 0090 B8140000 		movl	$20, %eax
 7665      00
2835:fltk-1.3.4-1/png/png.c **** 
 7666              		.loc 1 2835 0
 7667 0095 BD0F0000 		movl	$15, %ebp
 7667      00
 7668              	.LVL752:
 7669 009a EBAA     		jmp	.L856
 7670              	.LVL753:
 7671 009c 0F1F4000 		.p2align 4,,10
 7672              		.p2align 3
 7673              	.L967:
3115:fltk-1.3.4-1/png/png.c ****       {
 7674              		.loc 1 3115 0
 7675 00a0 73CF     		jnb	.L862
 7676              	.LVL754:
3117:fltk-1.3.4-1/png/png.c ****          *ascii = 0;
 7677              		.loc 1 3117 0
 7678 00a2 41C64500 		movb	$48, 0(%r13)
 7678      30
3118:fltk-1.3.4-1/png/png.c ****          return;
 7679              		.loc 1 3118 0
 7680 00a7 41C64501 		movb	$0, 1(%r13)
 7680      00
 7681              	.LVL755:
 7682              	.L854:
3133:fltk-1.3.4-1/png/png.c **** 
 7683              		.loc 1 3133 0
 7684 00ac 488B4424 		movq	56(%rsp), %rax
 7684      38
 7685 00b1 64483304 		xorq	%fs:40, %rax
 7685      25280000 
 7685      00
 7686 00ba 0F85A104 		jne	.L977
 7686      0000
 7687 00c0 4883C448 		addq	$72, %rsp
 7688              		.cfi_remember_state
 7689              		.cfi_def_cfa_offset 56
 7690 00c4 5B       		popq	%rbx
 7691              		.cfi_def_cfa_offset 48
 7692 00c5 5D       		popq	%rbp
 7693              		.cfi_def_cfa_offset 40
 7694              	.LVL756:
 7695 00c6 415C     		popq	%r12
 7696              		.cfi_def_cfa_offset 32
 7697 00c8 415D     		popq	%r13
 7698              		.cfi_def_cfa_offset 24
 7699 00ca 415E     		popq	%r14
 7700              		.cfi_def_cfa_offset 16
 7701              	.LVL757:
 7702 00cc 415F     		popq	%r15
 7703              		.cfi_def_cfa_offset 8
 7704 00ce C3       		ret
 7705              	.LVL758:
 7706 00cf 90       		.p2align 4,,10
 7707              		.p2align 3
 7708              	.L975:
 7709              		.cfi_restore_state
2846:fltk-1.3.4-1/png/png.c ****          *ascii++ = 45; /* '-'  PLUS 1 TOTAL 1 */
 7710              		.loc 1 2846 0
 7711 00d0 F20F1005 		movsd	.LC137(%rip), %xmm0
 7711      00000000 
 7712              	.LVL759:
2847:fltk-1.3.4-1/png/png.c ****          --size;
 7713              		.loc 1 2847 0
 7714 00d8 41C64500 		movb	$45, 0(%r13)
 7714      2D
2848:fltk-1.3.4-1/png/png.c ****       }
 7715              		.loc 1 2848 0
 7716 00dd 4983EE01 		subq	$1, %r14
2847:fltk-1.3.4-1/png/png.c ****          --size;
 7717              		.loc 1 2847 0
 7718 00e1 4983C501 		addq	$1, %r13
2846:fltk-1.3.4-1/png/png.c ****          *ascii++ = 45; /* '-'  PLUS 1 TOTAL 1 */
 7719              		.loc 1 2846 0
 7720 00e5 660F57C8 		xorpd	%xmm0, %xmm1
 7721              	.LVL760:
 7722 00e9 E96BFFFF 		jmp	.L858
 7722      FF
 7723              	.LVL761:
 7724 00ee 6690     		.p2align 4,,10
 7725              		.p2align 3
 7726              	.L976:
 7727              	.LBB460:
2865:fltk-1.3.4-1/png/png.c **** 
 7728              		.loc 1 2865 0
 7729 00f0 660F28C1 		movapd	%xmm1, %xmm0
 7730 00f4 488D7C24 		leaq	20(%rsp), %rdi
 7730      14
 7731              	.LVL762:
 7732 00f9 F20F110C 		movsd	%xmm1, (%rsp)
 7732      24
 7733 00fe E8000000 		call	frexp
 7733      00
 7734              	.LVL763:
2867:fltk-1.3.4-1/png/png.c **** 
 7735              		.loc 1 2867 0
 7736 0103 6B542414 		imull	$77, 20(%rsp), %edx
 7736      4D
 7737 0108 C1FA08   		sarl	$8, %edx
2870:fltk-1.3.4-1/png/png.c **** 
 7738              		.loc 1 2870 0
 7739 010b 89D7     		movl	%edx, %edi
2867:fltk-1.3.4-1/png/png.c **** 
 7740              		.loc 1 2867 0
 7741 010d 89542414 		movl	%edx, 20(%rsp)
2870:fltk-1.3.4-1/png/png.c **** 
 7742              		.loc 1 2870 0
 7743 0111 E8000000 		call	png_pow10
 7743      00
 7744              	.LVL764:
2872:fltk-1.3.4-1/png/png.c ****          {
 7745              		.loc 1 2872 0
 7746 0116 31F6     		xorl	%esi, %esi
2870:fltk-1.3.4-1/png/png.c **** 
 7747              		.loc 1 2870 0
 7748 0118 660F28D8 		movapd	%xmm0, %xmm3
 7749              	.LVL765:
2872:fltk-1.3.4-1/png/png.c ****          {
 7750              		.loc 1 2872 0
 7751 011c F20F100C 		movsd	(%rsp), %xmm1
 7751      24
 7752 0121 EB10     		jmp	.L864
 7753              	.LVL766:
 7754              		.p2align 4,,10
 7755 0123 0F1F4400 		.p2align 3
 7755      00
 7756              	.L978:
 7757              	.LBB461:
2878:fltk-1.3.4-1/png/png.c **** 
 7758              		.loc 1 2878 0
 7759 0128 660F28D8 		movapd	%xmm0, %xmm3
 7760 012c BE010000 		movl	$1, %esi
 7760      00
 7761 0131 89CA     		movl	%ecx, %edx
 7762              	.LVL767:
 7763              	.L864:
 7764              	.LBE461:
2872:fltk-1.3.4-1/png/png.c ****          {
 7765              		.loc 1 2872 0
 7766 0133 F20F1015 		movsd	.LC138(%rip), %xmm2
 7766      00000000 
 7767 013b 660F2ED3 		ucomisd	%xmm3, %xmm2
 7768 013f 7706     		ja	.L867
2872:fltk-1.3.4-1/png/png.c ****          {
 7769              		.loc 1 2872 0 is_stmt 0 discriminator 1
 7770 0141 660F2ECB 		ucomisd	%xmm3, %xmm1
 7771 0145 7622     		jbe	.L972
 7772              	.L867:
 7773              	.LBB462:
2875:fltk-1.3.4-1/png/png.c **** 
 7774              		.loc 1 2875 0 is_stmt 1
 7775 0147 8D4A01   		leal	1(%rdx), %ecx
 7776 014a F20F110C 		movsd	%xmm1, (%rsp)
 7776      24
 7777 014f 89CF     		movl	%ecx, %edi
 7778 0151 E8000000 		call	png_pow10
 7778      00
 7779              	.LVL768:
2877:fltk-1.3.4-1/png/png.c ****                ++exp_b10, base = test;
 7780              		.loc 1 2877 0
 7781 0156 F20F1025 		movsd	.LC139(%rip), %xmm4
 7781      00000000 
 7782 015e F20F100C 		movsd	(%rsp), %xmm1
 7782      24
 7783 0163 660F2EE0 		ucomisd	%xmm0, %xmm4
 7784 0167 73BF     		jnb	.L978
 7785              	.LVL769:
 7786              	.L972:
 7787 0169 4084F6   		testb	%sil, %sil
 7788 016c 0F85F403 		jne	.L979
 7788      0000
 7789              	.L866:
 7790              	.LBE462:
2891:fltk-1.3.4-1/png/png.c ****          while (fp >= 1) fp /= 10, ++exp_b10;
 7791              		.loc 1 2891 0
 7792 0172 F20F5ECB 		divsd	%xmm3, %xmm1
 7793              	.LVL770:
 7794 0176 8D4201   		leal	1(%rdx), %eax
2892:fltk-1.3.4-1/png/png.c **** 
 7795              		.loc 1 2892 0
 7796 0179 F20F1005 		movsd	.LC1(%rip), %xmm0
 7796      00000000 
 7797 0181 660F2EC8 		ucomisd	%xmm0, %xmm1
 7798 0185 7220     		jb	.L869
 7799 0187 660F1F84 		.p2align 4,,10
 7799      00000000 
 7799      00
 7800              		.p2align 3
 7801              	.L952:
2892:fltk-1.3.4-1/png/png.c **** 
 7802              		.loc 1 2892 0 is_stmt 0 discriminator 2
 7803 0190 F20F5E0D 		divsd	.LC0(%rip), %xmm1
 7803      00000000 
 7804              	.LVL771:
 7805 0198 89C2     		movl	%eax, %edx
 7806 019a 8D4001   		leal	1(%rax), %eax
 7807 019d 660F2EC8 		ucomisd	%xmm0, %xmm1
 7808 01a1 73ED     		jnb	.L952
 7809 01a3 89542414 		movl	%edx, 20(%rsp)
 7810              	.L869:
 7811              	.LBB463:
2907:fltk-1.3.4-1/png/png.c ****             {
 7812              		.loc 1 2907 0 is_stmt 1
 7813 01a7 8D4202   		leal	2(%rdx), %eax
2913:fltk-1.3.4-1/png/png.c **** 
 7814              		.loc 1 2913 0
 7815 01aa 31DB     		xorl	%ebx, %ebx
2907:fltk-1.3.4-1/png/png.c ****             {
 7816              		.loc 1 2907 0
 7817 01ac 83F801   		cmpl	$1, %eax
 7818 01af 0F862F03 		jbe	.L980
 7818      0000
 7819              	.L872:
 7820              	.LVL772:
2918:fltk-1.3.4-1/png/png.c ****             cdigits = 0;   /* Count of digits in list. */
 7821              		.loc 1 2918 0
 7822 01b5 4189DC   		movl	%ebx, %r12d
2919:fltk-1.3.4-1/png/png.c **** 
 7823              		.loc 1 2919 0
 7824 01b8 4531FF   		xorl	%r15d, %r15d
 7825 01bb 89D8     		movl	%ebx, %eax
 7826              	.LVL773:
 7827 01bd 0F1F00   		.p2align 4,,10
 7828              		.p2align 3
 7829              	.L903:
 7830              	.LBB464:
2931:fltk-1.3.4-1/png/png.c ****                   fp = modf(fp, &d);
 7831              		.loc 1 2931 0
 7832 01c0 4429E0   		subl	%r12d, %eax
2925:fltk-1.3.4-1/png/png.c ****                /* Use modf here, not floor and subtract, so that
 7833              		.loc 1 2925 0
 7834 01c3 F20F1005 		movsd	.LC0(%rip), %xmm0
 7834      00000000 
2931:fltk-1.3.4-1/png/png.c ****                   fp = modf(fp, &d);
 7835              		.loc 1 2931 0
 7836 01cb 83C001   		addl	$1, %eax
 7837 01ce 39E8     		cmpl	%ebp, %eax
2925:fltk-1.3.4-1/png/png.c ****                /* Use modf here, not floor and subtract, so that
 7838              		.loc 1 2925 0
 7839 01d0 F20F59C1 		mulsd	%xmm1, %xmm0
 7840              	.LVL774:
2931:fltk-1.3.4-1/png/png.c ****                   fp = modf(fp, &d);
 7841              		.loc 1 2931 0
 7842 01d4 0F8C4601 		jl	.L981
 7842      0000
2936:fltk-1.3.4-1/png/png.c **** 
 7843              		.loc 1 2936 0
 7844 01da F20F5805 		addsd	.LC9(%rip), %xmm0
 7844      00000000 
 7845              	.LVL775:
 7846 01e2 E8000000 		call	floor
 7846      00
 7847              	.LVL776:
2938:fltk-1.3.4-1/png/png.c ****                   {
 7848              		.loc 1 2938 0
 7849 01e7 660F2E05 		ucomisd	.LC140(%rip), %xmm0
 7849      00000000 
2936:fltk-1.3.4-1/png/png.c **** 
 7850              		.loc 1 2936 0
 7851 01ef F20F1144 		movsd	%xmm0, 24(%rsp)
 7851      2418
2938:fltk-1.3.4-1/png/png.c ****                   {
 7852              		.loc 1 2938 0
 7853 01f5 0F860501 		jbe	.L968
 7853      0000
2941:fltk-1.3.4-1/png/png.c ****                      {
 7854              		.loc 1 2941 0
 7855 01fb 85DB     		testl	%ebx, %ebx
 7856 01fd 0F846501 		je	.L982
 7856      0000
2943:fltk-1.3.4-1/png/png.c ****                         if (cdigits == 0) --clead;
 7857              		.loc 1 2943 0
 7858 0203 F20F1035 		movsd	.LC1(%rip), %xmm6
 7858      00000000 
 7859 020b 83EB01   		subl	$1, %ebx
 7860              	.LVL777:
2944:fltk-1.3.4-1/png/png.c ****                      }
 7861              		.loc 1 2944 0
 7862 020e 4585FF   		testl	%r15d, %r15d
2943:fltk-1.3.4-1/png/png.c ****                         if (cdigits == 0) --clead;
 7863              		.loc 1 2943 0
 7864 0211 F20F1174 		movsd	%xmm6, 24(%rsp)
 7864      2418
2944:fltk-1.3.4-1/png/png.c ****                      }
 7865              		.loc 1 2944 0
 7866 0217 0F853B01 		jne	.L879
 7866      0000
 7867 021d 8B4C2414 		movl	20(%rsp), %ecx
2944:fltk-1.3.4-1/png/png.c ****                      }
 7868              		.loc 1 2944 0 is_stmt 0 discriminator 1
 7869 0221 4183EC01 		subl	$1, %r12d
 7870              	.LVL778:
 7871 0225 4C89EF   		movq	%r13, %rdi
 7872              	.LVL779:
 7873              	.L880:
3001:fltk-1.3.4-1/png/png.c ****                {
 7874              		.loc 1 3001 0 is_stmt 1
 7875 0228 660FEFC9 		pxor	%xmm1, %xmm1
 7876 022c BA310000 		movl	$49, %edx
 7876      00
 7877              	.LVL780:
 7878              	.L915:
3009:fltk-1.3.4-1/png/png.c ****                   clead = 0;
 7879              		.loc 1 3009 0
 7880 0231 89D8     		movl	%ebx, %eax
 7881 0233 4429E0   		subl	%r12d, %eax
 7882 0236 4101C7   		addl	%eax, %r15d
 7883              	.LVL781:
3012:fltk-1.3.4-1/png/png.c ****                   {
 7884              		.loc 1 3012 0
 7885 0239 85DB     		testl	%ebx, %ebx
 7886 023b 7442     		je	.L895
 7887 023d 8B742414 		movl	20(%rsp), %esi
 7888 0241 4531C0   		xorl	%r8d, %r8d
 7889              	.LVL782:
 7890              		.p2align 4,,10
 7891 0244 0F1F4000 		.p2align 3
 7892              	.L898:
3018:fltk-1.3.4-1/png/png.c ****                      {
 7893              		.loc 1 3018 0
 7894 0248 83F9FF   		cmpl	$-1, %ecx
 7895 024b 4889F8   		movq	%rdi, %rax
 7896 024e 741A     		je	.L896
 7897              	.LVL783:
3020:fltk-1.3.4-1/png/png.c ****                         /* PLUS 1: TOTAL 4 */
 7898              		.loc 1 3020 0
 7899 0250 85C9     		testl	%ecx, %ecx
 7900 0252 750B     		jne	.L897
3020:fltk-1.3.4-1/png/png.c ****                         /* PLUS 1: TOTAL 4 */
 7901              		.loc 1 3020 0 is_stmt 0 discriminator 1
 7902 0254 4883C001 		addq	$1, %rax
 7903              	.LVL784:
 7904 0258 C6072E   		movb	$46, (%rdi)
 7905 025b 4983EE01 		subq	$1, %r14
 7906              	.LVL785:
 7907              	.L897:
3022:fltk-1.3.4-1/png/png.c ****                      }
 7908              		.loc 1 3022 0 is_stmt 1
 7909 025f 8D71FF   		leal	-1(%rcx), %esi
 7910 0262 41B80100 		movl	$1, %r8d
 7910      0000
 7911 0268 89F1     		movl	%esi, %ecx
 7912              	.L896:
3012:fltk-1.3.4-1/png/png.c ****                   {
 7913              		.loc 1 3012 0
 7914 026a 83EB01   		subl	$1, %ebx
 7915              	.LVL786:
3024:fltk-1.3.4-1/png/png.c ****                   }
 7916              		.loc 1 3024 0
 7917 026d 488D7801 		leaq	1(%rax), %rdi
 7918              	.LVL787:
 7919 0271 C60030   		movb	$48, (%rax)
3012:fltk-1.3.4-1/png/png.c ****                   {
 7920              		.loc 1 3012 0
 7921 0274 75D2     		jne	.L898
 7922 0276 4584C0   		testb	%r8b, %r8b
 7923 0279 0F85D102 		jne	.L983
 7923      0000
 7924              	.LVL788:
 7925              	.L895:
3027:fltk-1.3.4-1/png/png.c ****                   {
 7926              		.loc 1 3027 0
 7927 027f 83F9FF   		cmpl	$-1, %ecx
 7928 0282 7416     		je	.L900
3029:fltk-1.3.4-1/png/png.c ****                         *ascii++ = 46, --size; /* counted above */
 7929              		.loc 1 3029 0
 7930 0284 85C9     		testl	%ecx, %ecx
 7931 0286 750B     		jne	.L901
 7932              	.LVL789:
3030:fltk-1.3.4-1/png/png.c **** 
 7933              		.loc 1 3030 0
 7934 0288 C6072E   		movb	$46, (%rdi)
 7935 028b 4983EE01 		subq	$1, %r14
 7936              	.LVL790:
 7937 028f 4883C701 		addq	$1, %rdi
 7938              	.LVL791:
 7939              	.L901:
3032:fltk-1.3.4-1/png/png.c ****                   }
 7940              		.loc 1 3032 0
 7941 0293 83E901   		subl	$1, %ecx
 7942 0296 894C2414 		movl	%ecx, 20(%rsp)
 7943              	.L900:
3034:fltk-1.3.4-1/png/png.c ****                }
 7944              		.loc 1 3034 0
 7945 029a 4C8D6F01 		leaq	1(%rdi), %r13
 7946              	.LVL792:
 7947 029e 8817     		movb	%dl, (%rdi)
 7948 02a0 4183C701 		addl	$1, %r15d
 7949              	.LVL793:
3010:fltk-1.3.4-1/png/png.c **** 
 7950              		.loc 1 3010 0
 7951 02a4 4531E4   		xorl	%r12d, %r12d
3034:fltk-1.3.4-1/png/png.c ****                }
 7952              		.loc 1 3034 0
 7953 02a7 31DB     		xorl	%ebx, %ebx
 7954              	.LVL794:
 7955              	.L894:
 7956              	.LBE464:
3037:fltk-1.3.4-1/png/png.c **** 
 7957              		.loc 1 3037 0 discriminator 1
 7958 02a9 428D043B 		leal	(%rbx,%r15), %eax
 7959 02ad 89C2     		movl	%eax, %edx
 7960 02af 4429E2   		subl	%r12d, %edx
 7961 02b2 39EA     		cmpl	%ebp, %edx
 7962 02b4 7D0E     		jge	.L902
 7963 02b6 660F2E0D 		ucomisd	.LC138(%rip), %xmm1
 7963      00000000 
 7964 02be 0F87FCFE 		ja	.L903
 7964      FFFF
 7965              	.L902:
3048:fltk-1.3.4-1/png/png.c ****             {
 7966              		.loc 1 3048 0
 7967 02c4 8B4C2414 		movl	20(%rsp), %ecx
 7968 02c8 8D4101   		leal	1(%rcx), %eax
 7969 02cb 83F803   		cmpl	$3, %eax
 7970 02ce 0F878201 		ja	.L904
 7970      0000
 7971              	.LVL795:
3057:fltk-1.3.4-1/png/png.c **** 
 7972              		.loc 1 3057 0 discriminator 1
 7973 02d4 85C9     		testl	%ecx, %ecx
 7974 02d6 0F8E6C02 		jle	.L929
 7974      0000
 7975 02dc 8D41FF   		leal	-1(%rcx), %eax
 7976 02df 498D4405 		leaq	1(%r13,%rax), %rax
 7976      01
 7977              		.p2align 4,,10
 7978 02e4 0F1F4000 		.p2align 3
 7979              	.L906:
3057:fltk-1.3.4-1/png/png.c **** 
 7980              		.loc 1 3057 0 is_stmt 0 discriminator 2
 7981 02e8 4983C501 		addq	$1, %r13
 7982              	.LVL796:
 7983 02ec 41C645FF 		movb	$48, -1(%r13)
 7983      30
 7984 02f1 4939C5   		cmpq	%rax, %r13
 7985 02f4 75F2     		jne	.L906
 7986              	.L905:
3059:fltk-1.3.4-1/png/png.c **** 
 7987              		.loc 1 3059 0 is_stmt 1
 7988 02f6 C60000   		movb	$0, (%rax)
3064:fltk-1.3.4-1/png/png.c ****             }
 7989              		.loc 1 3064 0
 7990 02f9 E9AEFDFF 		jmp	.L854
 7990      FF
 7991              	.LVL797:
 7992 02fe 6690     		.p2align 4,,10
 7993              		.p2align 3
 7994              	.L968:
 7995              	.LBB470:
2998:fltk-1.3.4-1/png/png.c ****                }
 7996              		.loc 1 2998 0
 7997 0300 660FEFC9 		pxor	%xmm1, %xmm1
 7998              	.L874:
 7999              	.LVL798:
3001:fltk-1.3.4-1/png/png.c ****                {
 8000              		.loc 1 3001 0
 8001 0304 660FEFED 		pxor	%xmm5, %xmm5
 8002 0308 660F2EC5 		ucomisd	%xmm5, %xmm0
 8003 030c 7A32     		jp	.L892
 8004 030e 7530     		jne	.L892
 8005 0310 83C301   		addl	$1, %ebx
 8006              	.LVL799:
 8007              	.L916:
3004:fltk-1.3.4-1/png/png.c ****                }
 8008              		.loc 1 3004 0
 8009 0313 4183FF01 		cmpl	$1, %r15d
 8010 0317 4183D400 		adcl	$0, %r12d
 8011              	.LVL800:
 8012 031b EB8C     		jmp	.L894
 8013              	.LVL801:
 8014 031d 0F1F00   		.p2align 4,,10
 8015              		.p2align 3
 8016              	.L981:
2932:fltk-1.3.4-1/png/png.c **** 
 8017              		.loc 1 2932 0
 8018 0320 488D7C24 		leaq	24(%rsp), %rdi
 8018      18
 8019 0325 E8000000 		call	modf
 8019      00
 8020              	.LVL802:
 8021 032a 660F28C8 		movapd	%xmm0, %xmm1
 8022              	.LVL803:
 8023 032e F20F1044 		movsd	24(%rsp), %xmm0
 8023      2418
 8024              	.LVL804:
 8025 0334 EBCE     		jmp	.L874
 8026 0336 662E0F1F 		.p2align 4,,10
 8026      84000000 
 8026      0000
 8027              		.p2align 3
 8028              	.L892:
 8029 0340 F20F2CD0 		cvttsd2si	%xmm0, %edx
 8030 0344 8B4C2414 		movl	20(%rsp), %ecx
3001:fltk-1.3.4-1/png/png.c ****                {
 8031              		.loc 1 3001 0
 8032 0348 4C89EF   		movq	%r13, %rdi
 8033 034b 83C230   		addl	$48, %edx
 8034 034e E9DEFEFF 		jmp	.L915
 8034      FF
 8035              	.LVL805:
 8036              		.p2align 4,,10
 8037 0353 0F1F4400 		.p2align 3
 8037      00
 8038              	.L879:
 8039 0358 8B4C2414 		movl	20(%rsp), %ecx
2944:fltk-1.3.4-1/png/png.c ****                      }
 8040              		.loc 1 2944 0
 8041 035c 4C89EF   		movq	%r13, %rdi
 8042 035f E9C4FEFF 		jmp	.L880
 8042      FF
 8043              		.p2align 4,,10
 8044 0364 0F1F4000 		.p2align 3
 8045              	.L982:
2948:fltk-1.3.4-1/png/png.c ****                         {
 8046              		.loc 1 2948 0
 8047 0368 31FF     		xorl	%edi, %edi
 8048 036a 4585FF   		testl	%r15d, %r15d
 8049 036d 8B442414 		movl	20(%rsp), %eax
 8050 0371 7F33     		jg	.L884
 8051 0373 E9B40000 		jmp	.L878
 8051      00
 8052              	.LVL806:
 8053 0378 0F1F8400 		.p2align 4,,10
 8053      00000000 
 8054              		.p2align 3
 8055              	.L984:
 8056              	.LBB465:
2953:fltk-1.3.4-1/png/png.c **** 
 8057              		.loc 1 2953 0
 8058 0380 83C001   		addl	$1, %eax
2950:fltk-1.3.4-1/png/png.c **** 
 8059              		.loc 1 2950 0
 8060 0383 4989CD   		movq	%rcx, %r13
 8061 0386 BF010000 		movl	$1, %edi
 8061      00
 8062              	.LVL807:
 8063              	.L882:
2966:fltk-1.3.4-1/png/png.c ****                         }
 8064              		.loc 1 2966 0
 8065 038b 660FEFC0 		pxor	%xmm0, %xmm0
 8066 038f 83EA2F   		subl	$47, %edx
 8067              	.LVL808:
 8068              	.LBE465:
2948:fltk-1.3.4-1/png/png.c ****                         {
 8069              		.loc 1 2948 0
 8070 0392 4183EF01 		subl	$1, %r15d
 8071              	.LVL809:
 8072              	.LBB466:
2966:fltk-1.3.4-1/png/png.c ****                         }
 8073              		.loc 1 2966 0
 8074 0396 F20F2AC2 		cvtsi2sd	%edx, %xmm0
 8075              	.LVL810:
 8076              	.LBE466:
2948:fltk-1.3.4-1/png/png.c ****                         {
 8077              		.loc 1 2948 0
 8078 039a 7424     		je	.L883
2948:fltk-1.3.4-1/png/png.c ****                         {
 8079              		.loc 1 2948 0 is_stmt 0 discriminator 1
 8080 039c 660F2E05 		ucomisd	.LC140(%rip), %xmm0
 8080      00000000 
 8081 03a4 761A     		jbe	.L883
 8082              	.LVL811:
 8083              	.L884:
 8084              	.LBB467:
2952:fltk-1.3.4-1/png/png.c ****                               ++exp_b10;
 8085              		.loc 1 2952 0 is_stmt 1
 8086 03a6 83F8FF   		cmpl	$-1, %eax
2950:fltk-1.3.4-1/png/png.c **** 
 8087              		.loc 1 2950 0
 8088 03a9 498D4DFF 		leaq	-1(%r13), %rcx
 8089              	.LVL812:
 8090 03ad 410FB655 		movzbl	-1(%r13), %edx
 8090      FF
 8091              	.LVL813:
2952:fltk-1.3.4-1/png/png.c ****                               ++exp_b10;
 8092              		.loc 1 2952 0
 8093 03b2 75CC     		jne	.L984
2955:fltk-1.3.4-1/png/png.c ****                            {
 8094              		.loc 1 2955 0
 8095 03b4 83FA2E   		cmpl	$46, %edx
 8096 03b7 7457     		je	.L985
2950:fltk-1.3.4-1/png/png.c **** 
 8097              		.loc 1 2950 0
 8098 03b9 4989CD   		movq	%rcx, %r13
 8099 03bc EBCD     		jmp	.L882
 8100              	.LVL814:
 8101 03be 6690     		.p2align 4,,10
 8102              		.p2align 3
 8103              	.L883:
 8104 03c0 4084FF   		testb	%dil, %dil
 8105 03c3 0F85A601 		jne	.L986
 8105      0000
 8106              	.L887:
 8107              	.LBE467:
2973:fltk-1.3.4-1/png/png.c ****                         {
 8108              		.loc 1 2973 0
 8109 03c9 660F2E05 		ucomisd	.LC140(%rip), %xmm0
 8109      00000000 
 8110 03d1 F20F1144 		movsd	%xmm0, 24(%rsp)
 8110      2418
 8111 03d7 7753     		ja	.L878
 8112              	.LVL815:
3001:fltk-1.3.4-1/png/png.c ****                {
 8113              		.loc 1 3001 0
 8114 03d9 660FEFED 		pxor	%xmm5, %xmm5
 8115 03dd 660F2EC5 		ucomisd	%xmm5, %xmm0
 8116 03e1 7A0F     		jp	.L918
 8117 03e3 BB010000 		movl	$1, %ebx
 8117      00
2998:fltk-1.3.4-1/png/png.c ****                }
 8118              		.loc 1 2998 0
 8119 03e8 660FEFC9 		pxor	%xmm1, %xmm1
3001:fltk-1.3.4-1/png/png.c ****                {
 8120              		.loc 1 3001 0
 8121 03ec 0F8421FF 		je	.L916
 8121      FFFF
 8122              	.L918:
3009:fltk-1.3.4-1/png/png.c ****                   clead = 0;
 8123              		.loc 1 3009 0
 8124 03f2 4529E7   		subl	%r12d, %r15d
 8125              	.LVL816:
 8126 03f5 8B4C2414 		movl	20(%rsp), %ecx
 8127 03f9 83C230   		addl	$48, %edx
 8128              	.LVL817:
 8129 03fc 4C89EF   		movq	%r13, %rdi
2998:fltk-1.3.4-1/png/png.c ****                }
 8130              		.loc 1 2998 0
 8131 03ff 660FEFC9 		pxor	%xmm1, %xmm1
 8132 0403 E977FEFF 		jmp	.L895
 8132      FF
 8133              	.LVL818:
 8134 0408 0F1F8400 		.p2align 4,,10
 8134      00000000 
 8135              		.p2align 3
 8136              	.L985:
 8137              	.LBB468:
2957:fltk-1.3.4-1/png/png.c ****                               /* Advance exp_b10 to '1', so that the
 8138              		.loc 1 2957 0
 8139 0410 410FB655 		movzbl	-2(%r13), %edx
 8139      FE
 8140              	.LVL819:
 8141 0415 4983C601 		addq	$1, %r14
 8142              	.LVL820:
 8143 0419 4983ED02 		subq	$2, %r13
 8144              	.LVL821:
 8145 041d BF010000 		movl	$1, %edi
 8145      00
2962:fltk-1.3.4-1/png/png.c ****                            }
 8146              		.loc 1 2962 0
 8147 0422 B8010000 		movl	$1, %eax
 8147      00
 8148 0427 E95FFFFF 		jmp	.L882
 8148      FF
 8149              	.LVL822:
 8150              	.L878:
 8151              	.LBE468:
2975:fltk-1.3.4-1/png/png.c ****                            {
 8152              		.loc 1 2975 0
 8153 042c 8B4C2414 		movl	20(%rsp), %ecx
 8154 0430 83F9FF   		cmpl	$-1, %ecx
 8155 0433 0F84BC00 		je	.L987
 8155      0000
2991:fltk-1.3.4-1/png/png.c **** 
 8156              		.loc 1 2991 0
 8157 0439 83C101   		addl	$1, %ecx
 8158 043c 4C89EF   		movq	%r13, %rdi
 8159 043f 894C2414 		movl	%ecx, 20(%rsp)
 8160              	.LVL823:
 8161              	.L891:
2994:fltk-1.3.4-1/png/png.c ****                         }
 8162              		.loc 1 2994 0
 8163 0443 F20F102D 		movsd	.LC1(%rip), %xmm5
 8163      00000000 
 8164 044b F20F116C 		movsd	%xmm5, 24(%rsp)
 8164      2418
 8165 0451 E9D2FDFF 		jmp	.L880
 8165      FF
 8166              	.LVL824:
 8167              	.L904:
 8168              	.LBE470:
3073:fltk-1.3.4-1/png/png.c **** 
 8169              		.loc 1 3073 0
 8170 0456 4963C7   		movslq	%r15d, %rax
3075:fltk-1.3.4-1/png/png.c **** 
 8171              		.loc 1 3075 0
 8172 0459 41C64500 		movb	$69, 0(%r13)
 8172      45
3073:fltk-1.3.4-1/png/png.c **** 
 8173              		.loc 1 3073 0
 8174 045e 4929C6   		subq	%rax, %r14
 8175              	.LVL825:
 8176              	.LBB471:
3084:fltk-1.3.4-1/png/png.c ****                {
 8177              		.loc 1 3084 0
 8178 0461 85C9     		testl	%ecx, %ecx
 8179 0463 0F88B100 		js	.L908
 8179      0000
 8180              	.LBE471:
3075:fltk-1.3.4-1/png/png.c **** 
 8181              		.loc 1 3075 0
 8182 0469 4D8D4501 		leaq	1(%r13), %r8
 8183              	.LVL826:
 8184 046d 4983EE01 		subq	$1, %r14
 8185              	.LVL827:
 8186              	.L909:
 8187 0471 488D7C24 		leaq	32(%rsp), %rdi
 8187      20
3057:fltk-1.3.4-1/png/png.c **** 
 8188              		.loc 1 3057 0
 8189 0476 4531C9   		xorl	%r9d, %r9d
 8190              	.LBB472:
3097:fltk-1.3.4-1/png/png.c ****                   uexp_b10 /= 10;
 8191              		.loc 1 3097 0
 8192 0479 41BACDCC 		movl	$-858993459, %r10d
 8192      CCCC
 8193 047f EB0A     		jmp	.L911
 8194              	.LVL828:
 8195              		.p2align 4,,10
 8196 0481 0F1F8000 		.p2align 3
 8196      000000
 8197              	.L930:
 8198 0488 4C63CE   		movslq	%esi, %r9
 8199              	.LVL829:
 8200              	.L911:
 8201 048b 89C8     		movl	%ecx, %eax
 8202 048d 4883C701 		addq	$1, %rdi
 8203 0491 418D7101 		leal	1(%r9), %esi
 8204              	.LVL830:
 8205 0495 41F7E2   		mull	%r10d
 8206 0498 C1EA03   		shrl	$3, %edx
 8207 049b 8D0492   		leal	(%rdx,%rdx,4), %eax
 8208 049e 01C0     		addl	%eax, %eax
 8209 04a0 29C1     		subl	%eax, %ecx
 8210              	.LVL831:
 8211 04a2 83C130   		addl	$48, %ecx
 8212 04a5 884FFF   		movb	%cl, -1(%rdi)
3095:fltk-1.3.4-1/png/png.c ****                {
 8213              		.loc 1 3095 0
 8214 04a8 85D2     		testl	%edx, %edx
3098:fltk-1.3.4-1/png/png.c ****                }
 8215              		.loc 1 3098 0
 8216 04aa 89D1     		movl	%edx, %ecx
 8217              	.LVL832:
3095:fltk-1.3.4-1/png/png.c ****                {
 8218              		.loc 1 3095 0
 8219 04ac 75DA     		jne	.L930
 8220              	.LBE472:
3105:fltk-1.3.4-1/png/png.c ****             {
 8221              		.loc 1 3105 0
 8222 04ae 4439F6   		cmpl	%r14d, %esi
 8223 04b1 0F8D7D00 		jge	.L857
 8223      0000
 8224 04b7 4C89C0   		movq	%r8, %rax
 8225              	.LVL833:
 8226 04ba 660F1F44 		.p2align 4,,10
 8226      0000
 8227              		.p2align 3
 8228              	.L913:
3107:fltk-1.3.4-1/png/png.c **** 
 8229              		.loc 1 3107 0 discriminator 2
 8230 04c0 83EE01   		subl	$1, %esi
 8231              	.LVL834:
 8232 04c3 4883C001 		addq	$1, %rax
 8233              	.LVL835:
 8234 04c7 4863D6   		movslq	%esi, %rdx
 8235 04ca 0FB65414 		movzbl	32(%rsp,%rdx), %edx
 8235      20
 8236 04cf 8850FF   		movb	%dl, -1(%rax)
 8237 04d2 85F6     		testl	%esi, %esi
 8238 04d4 75EA     		jne	.L913
 8239 04d6 4F8D4408 		leaq	1(%r8,%r9), %r8
 8239      01
 8240              	.LVL836:
 8241              	.L919:
3109:fltk-1.3.4-1/png/png.c **** 
 8242              		.loc 1 3109 0
 8243 04db 41C60000 		movb	$0, (%r8)
3111:fltk-1.3.4-1/png/png.c ****             }
 8244              		.loc 1 3111 0
 8245 04df E9C8FBFF 		jmp	.L854
 8245      FF
 8246              	.LVL837:
 8247              	.L980:
2909:fltk-1.3.4-1/png/png.c ****                exp_b10 = 0;      /* Dot added below before first output. */
 8248              		.loc 1 2909 0
 8249 04e4 89D3     		movl	%edx, %ebx
2910:fltk-1.3.4-1/png/png.c ****             }
 8250              		.loc 1 2910 0
 8251 04e6 C7442414 		movl	$0, 20(%rsp)
 8251      00000000 
2909:fltk-1.3.4-1/png/png.c ****                exp_b10 = 0;      /* Dot added below before first output. */
 8252              		.loc 1 2909 0
 8253 04ee F7DB     		negl	%ebx
 8254              	.LVL838:
 8255 04f0 E9C0FCFF 		jmp	.L872
 8255      FF
 8256              	.LVL839:
 8257              	.L987:
 8258              	.LBB473:
 8259              	.LBB469:
2983:fltk-1.3.4-1/png/png.c ****                                  ++size, exp_b10 = 1;
 8260              		.loc 1 2983 0
 8261 04f5 41807DFF 		cmpb	$46, -1(%r13)
 8261      2E
2981:fltk-1.3.4-1/png/png.c **** 
 8262              		.loc 1 2981 0
 8263 04fa 498D7DFF 		leaq	-1(%r13), %rdi
 8264              	.LVL840:
2983:fltk-1.3.4-1/png/png.c ****                                  ++size, exp_b10 = 1;
 8265              		.loc 1 2983 0
 8266 04fe 0F853FFF 		jne	.L891
 8266      FFFF
2984:fltk-1.3.4-1/png/png.c **** 
 8267              		.loc 1 2984 0
 8268 0504 4983C601 		addq	$1, %r14
 8269              	.LVL841:
 8270 0508 C7442414 		movl	$1, 20(%rsp)
 8270      01000000 
 8271 0510 B9010000 		movl	$1, %ecx
 8271      00
 8272 0515 E929FFFF 		jmp	.L891
 8272      FF
 8273              	.LVL842:
 8274              	.L908:
 8275              	.LBE469:
 8276              	.LBE473:
 8277              	.LBB474:
3086:fltk-1.3.4-1/png/png.c ****                   uexp_b10 = -exp_b10;
 8278              		.loc 1 3086 0
 8279 051a 4983EE02 		subq	$2, %r14
 8280              	.LVL843:
3095:fltk-1.3.4-1/png/png.c ****                {
 8281              		.loc 1 3095 0
 8282 051e F7D9     		negl	%ecx
3086:fltk-1.3.4-1/png/png.c ****                   uexp_b10 = -exp_b10;
 8283              		.loc 1 3086 0
 8284 0520 4D8D4502 		leaq	2(%r13), %r8
 8285              	.LVL844:
 8286 0524 41C64501 		movb	$45, 1(%r13)
 8286      2D
3095:fltk-1.3.4-1/png/png.c ****                {
 8287              		.loc 1 3095 0
 8288 0529 0F8542FF 		jne	.L909
 8288      FFFF
 8289              	.LBE474:
3105:fltk-1.3.4-1/png/png.c ****             {
 8290              		.loc 1 3105 0
 8291 052f 4585F6   		testl	%r14d, %r14d
 8292 0532 7FA7     		jg	.L919
 8293              	.LVL845:
 8294              	.L857:
 8295              	.LBE463:
 8296              	.LBE460:
3132:fltk-1.3.4-1/png/png.c **** }
 8297              		.loc 1 3132 0
 8298 0534 488B7C24 		movq	8(%rsp), %rdi
 8298      08
 8299 0539 BE000000 		movl	$.LC141, %esi
 8299      00
 8300 053e E8000000 		call	png_error
 8300      00
 8301              	.LVL846:
 8302              		.p2align 4,,10
 8303 0543 0F1F4400 		.p2align 3
 8303      00
 8304              	.L929:
 8305              	.LBB476:
 8306              	.LBB475:
3057:fltk-1.3.4-1/png/png.c **** 
 8307              		.loc 1 3057 0
 8308 0548 4C89E8   		movq	%r13, %rax
 8309 054b E9A6FDFF 		jmp	.L905
 8309      FF
 8310              	.LVL847:
 8311              	.L983:
 8312 0550 89742414 		movl	%esi, 20(%rsp)
 8313 0554 E926FDFF 		jmp	.L895
 8313      FF
 8314              	.LVL848:
 8315              	.L974:
 8316 0559 8D4105   		leal	5(%rcx), %eax
 8317 055c E9E5FAFF 		jmp	.L856
 8317      FF
 8318              	.LVL849:
 8319              	.L977:
 8320              	.LBE475:
 8321              	.LBE476:
3133:fltk-1.3.4-1/png/png.c **** 
 8322              		.loc 1 3133 0
 8323 0561 E8000000 		call	__stack_chk_fail
 8323      00
 8324              	.LVL850:
 8325              	.L979:
 8326 0566 89542414 		movl	%edx, 20(%rsp)
 8327 056a E903FCFF 		jmp	.L866
 8327      FF
 8328              	.LVL851:
 8329              	.L986:
 8330 056f 89442414 		movl	%eax, 20(%rsp)
 8331 0573 E951FEFF 		jmp	.L887
 8331      FF
 8332              		.cfi_endproc
 8333              	.LFE115:
 8335              		.section	.text.unlikely.png_ascii_from_fp
 8336              	.LCOLDE142:
 8337              		.section	.text.png_ascii_from_fp
 8338              	.LHOTE142:
 8339              		.section	.text.unlikely.png_ascii_from_fixed,"ax",@progbits
 8340              	.LCOLDB143:
 8341              		.section	.text.png_ascii_from_fixed,"ax",@progbits
 8342              	.LHOTB143:
 8343              		.p2align 4,,15
 8344              		.globl	png_ascii_from_fixed
 8346              	png_ascii_from_fixed:
 8347              	.LFB116:
3143:fltk-1.3.4-1/png/png.c ****    /* Require space for 10 decimal digits, a decimal point, a minus sign and a
 8348              		.loc 1 3143 0
 8349              		.cfi_startproc
 8350              	.LVL852:
 8351 0000 4883EC28 		subq	$40, %rsp
 8352              		.cfi_def_cfa_offset 48
3143:fltk-1.3.4-1/png/png.c ****    /* Require space for 10 decimal digits, a decimal point, a minus sign and a
 8353              		.loc 1 3143 0
 8354 0004 64488B04 		movq	%fs:40, %rax
 8354      25280000 
 8354      00
 8355 000d 48894424 		movq	%rax, 24(%rsp)
 8355      18
 8356 0012 31C0     		xorl	%eax, %eax
3147:fltk-1.3.4-1/png/png.c ****    {
 8357              		.loc 1 3147 0
 8358 0014 4883FA0C 		cmpq	$12, %rdx
 8359 0018 0F862F01 		jbe	.L989
 8359      0000
 8360              	.LBB477:
3152:fltk-1.3.4-1/png/png.c ****          *ascii++ = 45, --size, num = -fp;
 8361              		.loc 1 3152 0
 8362 001e 85C9     		testl	%ecx, %ecx
 8363 0020 0F88DA00 		js	.L1021
 8363      0000
 8364              	.LVL853:
 8365              	.L991:
 8366              	.LBB478:
3162:fltk-1.3.4-1/png/png.c ****          {
 8367              		.loc 1 3162 0
 8368 0026 85C9     		testl	%ecx, %ecx
 8369 0028 0F84B200 		je	.L992
 8369      0000
 8370 002e 4889E7   		movq	%rsp, %rdi
 8371              	.LVL854:
 8372 0031 41B81000 		movl	$16, %r8d
 8372      0000
 8373 0037 4531C9   		xorl	%r9d, %r9d
 8374              	.LBB479:
3165:fltk-1.3.4-1/png/png.c ****             num -= tmp*10;
 8375              		.loc 1 3165 0
 8376 003a 41BBCDCC 		movl	$-858993459, %r11d
 8376      CCCC
 8377 0040 EB09     		jmp	.L995
 8378              	.LVL855:
 8379              		.p2align 4,,10
 8380 0042 660F1F44 		.p2align 3
 8380      0000
 8381              	.L1006:
3167:fltk-1.3.4-1/png/png.c ****             /* Record the first non-zero digit, note that this is a number
 8382              		.loc 1 3167 0
 8383 0048 4189C1   		movl	%eax, %r9d
 8384              	.LVL856:
 8385              	.L995:
3165:fltk-1.3.4-1/png/png.c ****             num -= tmp*10;
 8386              		.loc 1 3165 0
 8387 004b 89C8     		movl	%ecx, %eax
 8388 004d 41F7E3   		mull	%r11d
 8389 0050 C1EA03   		shrl	$3, %edx
 8390              	.LVL857:
3166:fltk-1.3.4-1/png/png.c ****             digits[ndigits++] = (char)(48 + num);
 8391              		.loc 1 3166 0
 8392 0053 8D0492   		leal	(%rdx,%rdx,4), %eax
 8393 0056 01C0     		addl	%eax, %eax
 8394 0058 29C1     		subl	%eax, %ecx
 8395              	.LVL858:
3171:fltk-1.3.4-1/png/png.c ****                first = ndigits;
 8396              		.loc 1 3171 0
 8397 005a 4183F810 		cmpl	$16, %r8d
3167:fltk-1.3.4-1/png/png.c ****             /* Record the first non-zero digit, note that this is a number
 8398              		.loc 1 3167 0
 8399 005e 418D4101 		leal	1(%r9), %eax
 8400              	.LVL859:
 8401 0062 448D5130 		leal	48(%rcx), %r10d
 8402 0066 448817   		movb	%r10b, (%rdi)
3171:fltk-1.3.4-1/png/png.c ****                first = ndigits;
 8403              		.loc 1 3171 0
 8404 0069 7506     		jne	.L993
3167:fltk-1.3.4-1/png/png.c ****             /* Record the first non-zero digit, note that this is a number
 8405              		.loc 1 3167 0
 8406 006b 85C9     		testl	%ecx, %ecx
 8407 006d 440F45C0 		cmovne	%eax, %r8d
 8408              	.LVL860:
 8409              	.L993:
 8410 0071 4883C701 		addq	$1, %rdi
 8411              	.LBE479:
3162:fltk-1.3.4-1/png/png.c ****          {
 8412              		.loc 1 3162 0
 8413 0075 85D2     		testl	%edx, %edx
 8414 0077 89D1     		movl	%edx, %ecx
 8415 0079 75CD     		jne	.L1006
3178:fltk-1.3.4-1/png/png.c ****             /* The remaining digits are fractional digits, ndigits is '5' or
 8416              		.loc 1 3178 0
 8417 007b 83F805   		cmpl	$5, %eax
 8418 007e 0F868A00 		jbe	.L996
 8418      0000
 8419 0084 4889F2   		movq	%rsi, %rdx
 8420              	.LVL861:
 8421 0087 660F1F84 		.p2align 4,,10
 8421      00000000 
 8421      00
 8422              		.p2align 3
 8423              	.L997:
3178:fltk-1.3.4-1/png/png.c ****             /* The remaining digits are fractional digits, ndigits is '5' or
 8424              		.loc 1 3178 0 is_stmt 0 discriminator 2
 8425 0090 8D48FF   		leal	-1(%rax), %ecx
 8426 0093 4883C201 		addq	$1, %rdx
 8427              	.LVL862:
 8428 0097 4889C8   		movq	%rcx, %rax
 8429              	.LVL863:
 8430 009a 0FB60C0C 		movzbl	(%rsp,%rcx), %ecx
 8431              	.LVL864:
 8432 009e 884AFF   		movb	%cl, -1(%rdx)
 8433 00a1 83F805   		cmpl	$5, %eax
 8434 00a4 75EA     		jne	.L997
 8435 00a6 418D41FB 		leal	-5(%r9), %eax
 8436              	.LVL865:
3183:fltk-1.3.4-1/png/png.c ****             {
 8437              		.loc 1 3183 0 is_stmt 1
 8438 00aa 4183F805 		cmpl	$5, %r8d
 8439 00ae 488D5406 		leaq	1(%rsi,%rax), %rdx
 8439      01
 8440              	.LVL866:
 8441 00b3 7732     		ja	.L999
 8442              	.LBB480:
3186:fltk-1.3.4-1/png/png.c ****                /* ndigits may be <5 for small numbers, output leading zeros
 8443              		.loc 1 3186 0
 8444 00b5 4C8D4A01 		leaq	1(%rdx), %r9
 8445              	.LVL867:
 8446 00b9 C6022E   		movb	$46, (%rdx)
 8447              	.LVL868:
 8448              	.L1000:
 8449 00bc 4C89CA   		movq	%r9, %rdx
 8450 00bf B8050000 		movl	$5, %eax
 8450      00
 8451              	.LVL869:
 8452              		.p2align 4,,10
 8453 00c4 0F1F4000 		.p2align 3
 8454              	.L1002:
3192:fltk-1.3.4-1/png/png.c ****                /* Don't output the trailing zeros! */
 8455              		.loc 1 3192 0 discriminator 2
 8456 00c8 8D48FF   		leal	-1(%rax), %ecx
 8457 00cb 4883C201 		addq	$1, %rdx
 8458              	.LVL870:
 8459 00cf 4889C8   		movq	%rcx, %rax
 8460              	.LVL871:
 8461 00d2 0FB60C0C 		movzbl	(%rsp,%rcx), %ecx
 8462              	.LVL872:
 8463 00d6 4139C0   		cmpl	%eax, %r8d
 8464 00d9 884AFF   		movb	%cl, -1(%rdx)
 8465 00dc 76EA     		jbe	.L1002
 8466 00de EB07     		jmp	.L999
 8467              	.LVL873:
 8468              	.L992:
 8469              	.LBE480:
3197:fltk-1.3.4-1/png/png.c **** 
 8470              		.loc 1 3197 0
 8471 00e0 488D5601 		leaq	1(%rsi), %rdx
 8472              	.LVL874:
 8473 00e4 C60630   		movb	$48, (%rsi)
 8474              	.LVL875:
 8475              	.L999:
 8476              	.LBE478:
 8477              	.LBE477:
3207:fltk-1.3.4-1/png/png.c **** #   endif /* FIXED_POINT */
 8478              		.loc 1 3207 0
 8479 00e7 488B4424 		movq	24(%rsp), %rax
 8479      18
 8480 00ec 64483304 		xorq	%fs:40, %rax
 8480      25280000 
 8480      00
 8481              	.LBB486:
 8482              	.LBB483:
3200:fltk-1.3.4-1/png/png.c ****          return;
 8483              		.loc 1 3200 0
 8484 00f5 C60200   		movb	$0, (%rdx)
 8485              	.LBE483:
 8486              	.LBE486:
3207:fltk-1.3.4-1/png/png.c **** #   endif /* FIXED_POINT */
 8487              		.loc 1 3207 0
 8488 00f8 7562     		jne	.L1022
 8489 00fa 4883C428 		addq	$40, %rsp
 8490              		.cfi_remember_state
 8491              		.cfi_def_cfa_offset 8
 8492 00fe C3       		ret
 8493              	.LVL876:
 8494 00ff 90       		.p2align 4,,10
 8495              		.p2align 3
 8496              	.L1021:
 8497              		.cfi_restore_state
 8498              	.LBB487:
3153:fltk-1.3.4-1/png/png.c ****       else
 8499              		.loc 1 3153 0
 8500 0100 C6062D   		movb	$45, (%rsi)
 8501              	.LVL877:
 8502 0103 F7D9     		negl	%ecx
 8503              	.LVL878:
 8504 0105 4883C601 		addq	$1, %rsi
 8505              	.LVL879:
 8506 0109 E918FFFF 		jmp	.L991
 8506      FF
 8507              	.LVL880:
 8508              	.L996:
 8509              	.LBB484:
3183:fltk-1.3.4-1/png/png.c ****             {
 8510              		.loc 1 3183 0
 8511 010e 4183F805 		cmpl	$5, %r8d
 8512 0112 7743     		ja	.L1007
 8513              	.LBB481:
3191:fltk-1.3.4-1/png/png.c ****                while (ndigits >= first) *ascii++ = digits[--ndigits];
 8514              		.loc 1 3191 0
 8515 0114 83F805   		cmpl	$5, %eax
3186:fltk-1.3.4-1/png/png.c ****                /* ndigits may be <5 for small numbers, output leading zeros
 8516              		.loc 1 3186 0
 8517 0117 4C8D4E01 		leaq	1(%rsi), %r9
 8518              	.LVL881:
 8519 011b C6062E   		movb	$46, (%rsi)
 8520              	.LVL882:
3191:fltk-1.3.4-1/png/png.c ****                while (ndigits >= first) *ascii++ = digits[--ndigits];
 8521              		.loc 1 3191 0
 8522 011e 749C     		je	.L1000
 8523 0120 BF040000 		movl	$4, %edi
 8523      00
3186:fltk-1.3.4-1/png/png.c ****                /* ndigits may be <5 for small numbers, output leading zeros
 8524              		.loc 1 3186 0
 8525 0125 4C89CA   		movq	%r9, %rdx
 8526              	.LVL883:
 8527 0128 29C7     		subl	%eax, %edi
 8528 012a 488D4C3E 		leaq	2(%rsi,%rdi), %rcx
 8528      02
 8529              	.LVL884:
 8530 012f 90       		.p2align 4,,10
 8531              		.p2align 3
 8532              	.L1001:
3191:fltk-1.3.4-1/png/png.c ****                while (ndigits >= first) *ascii++ = digits[--ndigits];
 8533              		.loc 1 3191 0 discriminator 2
 8534 0130 4883C201 		addq	$1, %rdx
 8535              	.LVL885:
 8536 0134 C642FF30 		movb	$48, -1(%rdx)
 8537              	.LVL886:
 8538 0138 4839D1   		cmpq	%rdx, %rcx
 8539 013b 75F3     		jne	.L1001
3192:fltk-1.3.4-1/png/png.c ****                /* Don't output the trailing zeros! */
 8540              		.loc 1 3192 0
 8541 013d 4439C0   		cmpl	%r8d, %eax
 8542 0140 498D5439 		leaq	1(%r9,%rdi), %rdx
 8542      01
 8543              	.LVL887:
 8544 0145 0F837DFF 		jnb	.L1002
 8544      FFFF
 8545 014b EB9A     		jmp	.L999
 8546              	.LVL888:
 8547              	.L989:
 8548              	.LBE481:
 8549              	.LBE484:
 8550              	.LBE487:
3206:fltk-1.3.4-1/png/png.c **** }
 8551              		.loc 1 3206 0
 8552 014d BE000000 		movl	$.LC141, %esi
 8552      00
 8553              	.LVL889:
 8554 0152 E8000000 		call	png_error
 8554      00
 8555              	.LVL890:
 8556              	.L1007:
 8557              	.LBB488:
 8558              	.LBB485:
 8559              	.LBB482:
 8560 0157 4889F2   		movq	%rsi, %rdx
 8561              	.LVL891:
 8562 015a EB8B     		jmp	.L999
 8563              	.LVL892:
 8564              	.L1022:
 8565              	.LBE482:
 8566              	.LBE485:
 8567              	.LBE488:
3207:fltk-1.3.4-1/png/png.c **** #   endif /* FIXED_POINT */
 8568              		.loc 1 3207 0
 8569 015c E8000000 		call	__stack_chk_fail
 8569      00
 8570              	.LVL893:
 8571              		.cfi_endproc
 8572              	.LFE116:
 8574              		.section	.text.unlikely.png_ascii_from_fixed
 8575              	.LCOLDE143:
 8576              		.section	.text.png_ascii_from_fixed
 8577              	.LHOTE143:
 8578              		.section	.text.unlikely.png_fixed,"ax",@progbits
 8579              	.LCOLDB145:
 8580              		.section	.text.png_fixed,"ax",@progbits
 8581              	.LHOTB145:
 8582              		.p2align 4,,15
 8583              		.globl	png_fixed
 8585              	png_fixed:
 8586              	.LFB117:
3220:fltk-1.3.4-1/png/png.c ****    double r = floor(100000 * fp + .5);
 8587              		.loc 1 3220 0
 8588              		.cfi_startproc
 8589              	.LVL894:
 8590 0000 55       		pushq	%rbp
 8591              		.cfi_def_cfa_offset 16
 8592              		.cfi_offset 6, -16
 8593 0001 53       		pushq	%rbx
 8594              		.cfi_def_cfa_offset 24
 8595              		.cfi_offset 3, -24
 8596 0002 4889F5   		movq	%rsi, %rbp
 8597 0005 4889FB   		movq	%rdi, %rbx
 8598 0008 4883EC08 		subq	$8, %rsp
 8599              		.cfi_def_cfa_offset 32
3221:fltk-1.3.4-1/png/png.c **** 
 8600              		.loc 1 3221 0
 8601 000c F20F5905 		mulsd	.LC144(%rip), %xmm0
 8601      00000000 
 8602              	.LVL895:
 8603 0014 F20F5805 		addsd	.LC9(%rip), %xmm0
 8603      00000000 
 8604 001c E8000000 		call	floor
 8604      00
 8605              	.LVL896:
3223:fltk-1.3.4-1/png/png.c ****       png_fixed_error(png_ptr, text);
 8606              		.loc 1 3223 0
 8607 0021 660F2E05 		ucomisd	.LC22(%rip), %xmm0
 8607      00000000 
 8608 0029 7719     		ja	.L1024
3223:fltk-1.3.4-1/png/png.c ****       png_fixed_error(png_ptr, text);
 8609              		.loc 1 3223 0 is_stmt 0 discriminator 1
 8610 002b F20F100D 		movsd	.LC23(%rip), %xmm1
 8610      00000000 
 8611 0033 660F2EC8 		ucomisd	%xmm0, %xmm1
 8612 0037 770B     		ja	.L1024
3231:fltk-1.3.4-1/png/png.c **** #endif
 8613              		.loc 1 3231 0 is_stmt 1
 8614 0039 4883C408 		addq	$8, %rsp
 8615              		.cfi_remember_state
 8616              		.cfi_def_cfa_offset 24
3230:fltk-1.3.4-1/png/png.c **** }
 8617              		.loc 1 3230 0
 8618 003d F20F2CC0 		cvttsd2si	%xmm0, %eax
3231:fltk-1.3.4-1/png/png.c **** #endif
 8619              		.loc 1 3231 0
 8620 0041 5B       		popq	%rbx
 8621              		.cfi_def_cfa_offset 16
 8622              	.LVL897:
 8623 0042 5D       		popq	%rbp
 8624              		.cfi_def_cfa_offset 8
 8625              	.LVL898:
 8626 0043 C3       		ret
 8627              	.LVL899:
 8628              	.L1024:
 8629              		.cfi_restore_state
3224:fltk-1.3.4-1/png/png.c **** 
 8630              		.loc 1 3224 0
 8631 0044 4889EE   		movq	%rbp, %rsi
 8632 0047 4889DF   		movq	%rbx, %rdi
 8633 004a E8000000 		call	png_fixed_error
 8633      00
 8634              	.LVL900:
 8635              		.cfi_endproc
 8636              	.LFE117:
 8638              		.section	.text.unlikely.png_fixed
 8639              	.LCOLDE145:
 8640              		.section	.text.png_fixed
 8641              	.LHOTE145:
 8642              		.section	.text.unlikely.png_muldiv,"ax",@progbits
 8643              	.LCOLDB146:
 8644              		.section	.text.png_muldiv,"ax",@progbits
 8645              	.LHOTB146:
 8646              		.p2align 4,,15
 8647              		.globl	png_muldiv
 8649              	png_muldiv:
 8650              	.LFB118:
3245:fltk-1.3.4-1/png/png.c ****    /* Return a * times / divisor, rounded. */
 8651              		.loc 1 3245 0
 8652              		.cfi_startproc
 8653              	.LVL901:
3247:fltk-1.3.4-1/png/png.c ****    {
 8654              		.loc 1 3247 0
 8655 0000 85C9     		testl	%ecx, %ecx
 8656 0002 7424     		je	.L1033
3249:fltk-1.3.4-1/png/png.c ****       {
 8657              		.loc 1 3249 0
 8658 0004 85F6     		testl	%esi, %esi
 8659 0006 7410     		je	.L1034
 8660 0008 85D2     		testl	%edx, %edx
 8661 000a 740C     		je	.L1034
 8662 000c E9000000 		jmp	png_muldiv.part.9
 8662      00
 8663              	.LVL902:
 8664              		.p2align 4,,10
 8665 0011 0F1F8000 		.p2align 3
 8665      000000
 8666              	.L1034:
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 8667              		.loc 1 3251 0
 8668 0018 C7070000 		movl	$0, (%rdi)
 8668      0000
3252:fltk-1.3.4-1/png/png.c ****       }
 8669              		.loc 1 3252 0
 8670 001e B8010000 		movl	$1, %eax
 8670      00
 8671 0023 C3       		ret
 8672              		.p2align 4,,10
 8673 0024 0F1F4000 		.p2align 3
 8674              	.L1033:
3354:fltk-1.3.4-1/png/png.c **** }
 8675              		.loc 1 3354 0
 8676 0028 31C0     		xorl	%eax, %eax
3355:fltk-1.3.4-1/png/png.c **** #endif /* READ_GAMMA || INCH_CONVERSIONS */
 8677              		.loc 1 3355 0
 8678 002a C3       		ret
 8679              		.cfi_endproc
 8680              	.LFE118:
 8682              		.section	.text.unlikely.png_muldiv
 8683              	.LCOLDE146:
 8684              		.section	.text.png_muldiv
 8685              	.LHOTE146:
 8686              		.section	.rodata.str1.1
 8687              	.LC147:
 8688 035f 66697865 		.string	"fixed point overflow ignored"
 8688      6420706F 
 8688      696E7420 
 8688      6F766572 
 8688      666C6F77 
 8689              		.section	.text.unlikely.png_muldiv_warn,"ax",@progbits
 8690              	.LCOLDB148:
 8691              		.section	.text.png_muldiv_warn,"ax",@progbits
 8692              	.LHOTB148:
 8693              		.p2align 4,,15
 8694              		.globl	png_muldiv_warn
 8696              	png_muldiv_warn:
 8697              	.LFB119:
3365:fltk-1.3.4-1/png/png.c ****    png_fixed_point result;
 8698              		.loc 1 3365 0
 8699              		.cfi_startproc
 8700              	.LVL903:
 8701 0000 53       		pushq	%rbx
 8702              		.cfi_def_cfa_offset 16
 8703              		.cfi_offset 3, -16
 8704 0001 4889FB   		movq	%rdi, %rbx
 8705 0004 4883EC20 		subq	$32, %rsp
 8706              		.cfi_def_cfa_offset 48
3368:fltk-1.3.4-1/png/png.c ****       return result;
 8707              		.loc 1 3368 0
 8708 0008 488D7C24 		leaq	20(%rsp), %rdi
 8708      14
 8709              	.LVL904:
3365:fltk-1.3.4-1/png/png.c ****    png_fixed_point result;
 8710              		.loc 1 3365 0
 8711 000d 64488B04 		movq	%fs:40, %rax
 8711      25280000 
 8711      00
 8712 0016 48894424 		movq	%rax, 24(%rsp)
 8712      18
 8713 001b 31C0     		xorl	%eax, %eax
3368:fltk-1.3.4-1/png/png.c ****       return result;
 8714              		.loc 1 3368 0
 8715 001d E8000000 		call	png_muldiv
 8715      00
 8716              	.LVL905:
 8717 0022 85C0     		testl	%eax, %eax
 8718 0024 741A     		je	.L1036
3369:fltk-1.3.4-1/png/png.c **** 
 8719              		.loc 1 3369 0
 8720 0026 8B442414 		movl	20(%rsp), %eax
 8721              	.L1037:
3373:fltk-1.3.4-1/png/png.c **** #endif
 8722              		.loc 1 3373 0
 8723 002a 488B5C24 		movq	24(%rsp), %rbx
 8723      18
 8724 002f 6448331C 		xorq	%fs:40, %rbx
 8724      25280000 
 8724      00
 8725              	.LVL906:
 8726 0038 751D     		jne	.L1040
 8727 003a 4883C420 		addq	$32, %rsp
 8728              		.cfi_remember_state
 8729              		.cfi_def_cfa_offset 16
 8730 003e 5B       		popq	%rbx
 8731              		.cfi_def_cfa_offset 8
 8732 003f C3       		ret
 8733              	.LVL907:
 8734              		.p2align 4,,10
 8735              		.p2align 3
 8736              	.L1036:
 8737              		.cfi_restore_state
3371:fltk-1.3.4-1/png/png.c ****    return 0;
 8738              		.loc 1 3371 0
 8739 0040 BE000000 		movl	$.LC147, %esi
 8739      00
 8740 0045 4889DF   		movq	%rbx, %rdi
 8741 0048 8944240C 		movl	%eax, 12(%rsp)
 8742 004c E8000000 		call	png_warning
 8742      00
 8743              	.LVL908:
 8744 0051 8B44240C 		movl	12(%rsp), %eax
3372:fltk-1.3.4-1/png/png.c **** }
 8745              		.loc 1 3372 0
 8746 0055 EBD3     		jmp	.L1037
 8747              	.LVL909:
 8748              	.L1040:
3373:fltk-1.3.4-1/png/png.c **** #endif
 8749              		.loc 1 3373 0
 8750 0057 E8000000 		call	__stack_chk_fail
 8750      00
 8751              	.LVL910:
 8752              		.cfi_endproc
 8753              	.LFE119:
 8755              		.section	.text.unlikely.png_muldiv_warn
 8756              	.LCOLDE148:
 8757              		.section	.text.png_muldiv_warn
 8758              	.LHOTE148:
 8759              		.section	.text.unlikely.png_reciprocal,"ax",@progbits
 8760              	.LCOLDB150:
 8761              		.section	.text.png_reciprocal,"ax",@progbits
 8762              	.LHOTB150:
 8763              		.p2align 4,,15
 8764              		.globl	png_reciprocal
 8766              	png_reciprocal:
 8767              	.LFB120:
3380:fltk-1.3.4-1/png/png.c **** #ifdef PNG_FLOATING_ARITHMETIC_SUPPORTED
 8768              		.loc 1 3380 0
 8769              		.cfi_startproc
 8770              	.LVL911:
3382:fltk-1.3.4-1/png/png.c **** 
 8771              		.loc 1 3382 0
 8772 0000 660FEFC9 		pxor	%xmm1, %xmm1
3380:fltk-1.3.4-1/png/png.c **** #ifdef PNG_FLOATING_ARITHMETIC_SUPPORTED
 8773              		.loc 1 3380 0
 8774 0004 4883EC08 		subq	$8, %rsp
 8775              		.cfi_def_cfa_offset 16
3382:fltk-1.3.4-1/png/png.c **** 
 8776              		.loc 1 3382 0
 8777 0008 F20F1005 		movsd	.LC149(%rip), %xmm0
 8777      00000000 
 8778 0010 F20F2ACF 		cvtsi2sd	%edi, %xmm1
 8779 0014 F20F5EC1 		divsd	%xmm1, %xmm0
 8780 0018 F20F5805 		addsd	.LC9(%rip), %xmm0
 8780      00000000 
 8781 0020 E8000000 		call	floor
 8781      00
 8782              	.LVL912:
3384:fltk-1.3.4-1/png/png.c ****       return (png_fixed_point)r;
 8783              		.loc 1 3384 0
 8784 0025 F20F100D 		movsd	.LC22(%rip), %xmm1
 8784      00000000 
 8785 002d 660F2EC8 		ucomisd	%xmm0, %xmm1
 8786 0031 721D     		jb	.L1050
3384:fltk-1.3.4-1/png/png.c ****       return (png_fixed_point)r;
 8787              		.loc 1 3384 0 is_stmt 0 discriminator 1
 8788 0033 660F2E05 		ucomisd	.LC23(%rip), %xmm0
 8788      00000000 
 8789 003b 7213     		jb	.L1050
3385:fltk-1.3.4-1/png/png.c **** #else
 8790              		.loc 1 3385 0 is_stmt 1
 8791 003d F20F2CC0 		cvttsd2si	%xmm0, %eax
3394:fltk-1.3.4-1/png/png.c **** 
 8792              		.loc 1 3394 0
 8793 0041 4883C408 		addq	$8, %rsp
 8794              		.cfi_remember_state
 8795              		.cfi_def_cfa_offset 8
 8796 0045 C3       		ret
 8797 0046 662E0F1F 		.p2align 4,,10
 8797      84000000 
 8797      0000
 8798              		.p2align 3
 8799              	.L1050:
 8800              		.cfi_restore_state
3393:fltk-1.3.4-1/png/png.c **** }
 8801              		.loc 1 3393 0
 8802 0050 31C0     		xorl	%eax, %eax
3394:fltk-1.3.4-1/png/png.c **** 
 8803              		.loc 1 3394 0
 8804 0052 4883C408 		addq	$8, %rsp
 8805              		.cfi_def_cfa_offset 8
 8806 0056 C3       		ret
 8807              		.cfi_endproc
 8808              	.LFE120:
 8810              		.section	.text.unlikely.png_reciprocal
 8811              	.LCOLDE150:
 8812              		.section	.text.png_reciprocal
 8813              	.LHOTE150:
 8814              		.section	.text.unlikely.png_XYZ_from_xy,"ax",@progbits
 8815              	.LCOLDB151:
 8816              		.section	.text.png_XYZ_from_xy,"ax",@progbits
 8817              	.LHOTB151:
 8818              		.p2align 4,,15
 8820              	png_XYZ_from_xy:
 8821              	.LFB89:
1237:fltk-1.3.4-1/png/png.c ****    png_fixed_point red_inverse, green_inverse, blue_scale;
 8822              		.loc 1 1237 0
 8823              		.cfi_startproc
 8824              	.LVL913:
 8825 0000 4156     		pushq	%r14
 8826              		.cfi_def_cfa_offset 16
 8827              		.cfi_offset 14, -16
 8828 0002 4155     		pushq	%r13
 8829              		.cfi_def_cfa_offset 24
 8830              		.cfi_offset 13, -24
 8831 0004 4154     		pushq	%r12
 8832              		.cfi_def_cfa_offset 32
 8833              		.cfi_offset 12, -32
 8834 0006 55       		pushq	%rbp
 8835              		.cfi_def_cfa_offset 40
 8836              		.cfi_offset 6, -40
 8837 0007 53       		pushq	%rbx
 8838              		.cfi_def_cfa_offset 48
 8839              		.cfi_offset 3, -48
 8840 0008 4883EC20 		subq	$32, %rsp
 8841              		.cfi_def_cfa_offset 80
1237:fltk-1.3.4-1/png/png.c ****    png_fixed_point red_inverse, green_inverse, blue_scale;
 8842              		.loc 1 1237 0
 8843 000c 64488B04 		movq	%fs:40, %rax
 8843      25280000 
 8843      00
 8844 0015 48894424 		movq	%rax, 24(%rsp)
 8844      18
 8845 001a 31C0     		xorl	%eax, %eax
1245:fltk-1.3.4-1/png/png.c ****    if (xy->redy < 0 || xy->redy > PNG_FP_1-xy->redx) return 1;
 8846              		.loc 1 1245 0
 8847 001c 8B06     		movl	(%rsi), %eax
 8848 001e 3DA08601 		cmpl	$100000, %eax
 8848      00
 8849 0023 0F870703 		ja	.L1055
 8849      0000
1246:fltk-1.3.4-1/png/png.c ****    if (xy->greenx < 0 || xy->greenx > PNG_FP_1) return 1;
 8850              		.loc 1 1246 0
 8851 0029 8B5604   		movl	4(%rsi), %edx
 8852 002c 4889F3   		movq	%rsi, %rbx
 8853 002f 85D2     		testl	%edx, %edx
 8854 0031 0F88F902 		js	.L1055
 8854      0000
1246:fltk-1.3.4-1/png/png.c ****    if (xy->greenx < 0 || xy->greenx > PNG_FP_1) return 1;
 8855              		.loc 1 1246 0 is_stmt 0 discriminator 2
 8856 0037 B9A08601 		movl	$100000, %ecx
 8856      00
 8857 003c 89CE     		movl	%ecx, %esi
 8858              	.LVL914:
 8859 003e 29C6     		subl	%eax, %esi
 8860 0040 39F2     		cmpl	%esi, %edx
 8861 0042 0F8FE802 		jg	.L1055
 8861      0000
1247:fltk-1.3.4-1/png/png.c ****    if (xy->greeny < 0 || xy->greeny > PNG_FP_1-xy->greenx) return 1;
 8862              		.loc 1 1247 0 is_stmt 1
 8863 0048 8B7308   		movl	8(%rbx), %esi
 8864 004b 81FEA086 		cmpl	$100000, %esi
 8864      0100
 8865 0051 0F87D902 		ja	.L1055
 8865      0000
 8866 0057 4889FD   		movq	%rdi, %rbp
1248:fltk-1.3.4-1/png/png.c ****    if (xy->bluex < 0 || xy->bluex > PNG_FP_1) return 1;
 8867              		.loc 1 1248 0
 8868 005a 8B7B0C   		movl	12(%rbx), %edi
 8869              	.LVL915:
 8870 005d 85FF     		testl	%edi, %edi
 8871 005f 0F88CB02 		js	.L1055
 8871      0000
1248:fltk-1.3.4-1/png/png.c ****    if (xy->bluex < 0 || xy->bluex > PNG_FP_1) return 1;
 8872              		.loc 1 1248 0 is_stmt 0 discriminator 2
 8873 0065 4189C8   		movl	%ecx, %r8d
 8874 0068 4129F0   		subl	%esi, %r8d
 8875 006b 4439C7   		cmpl	%r8d, %edi
 8876 006e 0F8FBC02 		jg	.L1055
 8876      0000
1249:fltk-1.3.4-1/png/png.c ****    if (xy->bluey < 0 || xy->bluey > PNG_FP_1-xy->bluex) return 1;
 8877              		.loc 1 1249 0 is_stmt 1
 8878 0074 448B4310 		movl	16(%rbx), %r8d
 8879 0078 4181F8A0 		cmpl	$100000, %r8d
 8879      860100
 8880 007f 0F87AB02 		ja	.L1055
 8880      0000
1250:fltk-1.3.4-1/png/png.c ****    if (xy->whitex < 0 || xy->whitex > PNG_FP_1) return 1;
 8881              		.loc 1 1250 0
 8882 0085 448B4B14 		movl	20(%rbx), %r9d
 8883 0089 4585C9   		testl	%r9d, %r9d
 8884 008c 0F889E02 		js	.L1055
 8884      0000
1250:fltk-1.3.4-1/png/png.c ****    if (xy->whitex < 0 || xy->whitex > PNG_FP_1) return 1;
 8885              		.loc 1 1250 0 is_stmt 0 discriminator 2
 8886 0092 4429C1   		subl	%r8d, %ecx
 8887 0095 4139C9   		cmpl	%ecx, %r9d
 8888 0098 0F8F9202 		jg	.L1055
 8888      0000
1251:fltk-1.3.4-1/png/png.c ****    if (xy->whitey < 0 || xy->whitey > PNG_FP_1-xy->whitex) return 1;
 8889              		.loc 1 1251 0 is_stmt 1
 8890 009e 8B4B18   		movl	24(%rbx), %ecx
 8891 00a1 81F9A086 		cmpl	$100000, %ecx
 8891      0100
 8892 00a7 0F878302 		ja	.L1055
 8892      0000
1252:fltk-1.3.4-1/png/png.c **** 
 8893              		.loc 1 1252 0
 8894 00ad 448B5B1C 		movl	28(%rbx), %r11d
 8895 00b1 4585DB   		testl	%r11d, %r11d
 8896 00b4 0F887602 		js	.L1055
 8896      0000
1252:fltk-1.3.4-1/png/png.c **** 
 8897              		.loc 1 1252 0 is_stmt 0 discriminator 2
 8898 00ba 41BAA086 		movl	$100000, %r10d
 8898      0100
 8899 00c0 4129CA   		subl	%ecx, %r10d
 8900 00c3 4539D3   		cmpl	%r10d, %r11d
 8901 00c6 0F8F6402 		jg	.L1055
 8901      0000
1433:fltk-1.3.4-1/png/png.c ****       return 2;
 8902              		.loc 1 1433 0 is_stmt 1
 8903 00cc 4429C6   		subl	%r8d, %esi
 8904              	.LVL916:
 8905              	.LBB489:
 8906              	.LBB490:
3249:fltk-1.3.4-1/png/png.c ****       {
 8907              		.loc 1 3249 0
 8908 00cf 4429CA   		subl	%r9d, %edx
 8909              	.LVL917:
 8910 00d2 7408     		je	.L1094
 8911 00d4 85F6     		testl	%esi, %esi
 8912 00d6 0F857602 		jne	.L1056
 8912      0000
 8913              	.L1094:
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 8914              		.loc 1 3251 0
 8915 00dc C7442410 		movl	$0, 16(%rsp)
 8915      00000000 
 8916              	.LVL918:
 8917              	.L1058:
 8918              	.LBE490:
 8919              	.LBE489:
1435:fltk-1.3.4-1/png/png.c ****       return 2;
 8920              		.loc 1 1435 0
 8921 00e4 4429C0   		subl	%r8d, %eax
 8922              	.LVL919:
 8923              	.LBB492:
 8924              	.LBB493:
3249:fltk-1.3.4-1/png/png.c ****       {
 8925              		.loc 1 3249 0
 8926 00e7 4429CF   		subl	%r9d, %edi
 8927              	.LVL920:
 8928              	.LBE493:
 8929              	.LBE492:
1435:fltk-1.3.4-1/png/png.c ****       return 2;
 8930              		.loc 1 1435 0
 8931 00ea 89C2     		movl	%eax, %edx
 8932              	.LBB496:
 8933              	.LBB494:
3249:fltk-1.3.4-1/png/png.c ****       {
 8934              		.loc 1 3249 0
 8935 00ec 89FE     		movl	%edi, %esi
 8936 00ee 7408     		je	.L1095
 8937 00f0 85C0     		testl	%eax, %eax
 8938 00f2 0F857402 		jne	.L1060
 8938      0000
 8939              	.L1095:
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 8940              		.loc 1 3251 0
 8941 00f8 C7442414 		movl	$0, 20(%rsp)
 8941      00000000 
 8942              	.LVL921:
 8943 0100 4531E4   		xorl	%r12d, %r12d
 8944              	.L1062:
 8945              	.LBE494:
 8946              	.LBE496:
1440:fltk-1.3.4-1/png/png.c ****       return 2;
 8947              		.loc 1 1440 0
 8948 0103 8B531C   		movl	28(%rbx), %edx
 8949              	.LBB497:
 8950              	.LBB498:
3249:fltk-1.3.4-1/png/png.c ****       {
 8951              		.loc 1 3249 0
 8952 0106 8B7308   		movl	8(%rbx), %esi
 8953              	.LBE498:
 8954              	.LBE497:
1437:fltk-1.3.4-1/png/png.c **** 
 8955              		.loc 1 1437 0
 8956 0109 448B6C24 		movl	16(%rsp), %r13d
 8956      10
 8957              	.LVL922:
1440:fltk-1.3.4-1/png/png.c ****       return 2;
 8958              		.loc 1 1440 0
 8959 010e 4429CA   		subl	%r9d, %edx
 8960              	.LVL923:
 8961              	.LBB501:
 8962              	.LBB499:
3249:fltk-1.3.4-1/png/png.c ****       {
 8963              		.loc 1 3249 0
 8964 0111 4429C6   		subl	%r8d, %esi
 8965              	.LVL924:
 8966 0114 7408     		je	.L1096
 8967 0116 85D2     		testl	%edx, %edx
 8968 0118 0F857802 		jne	.L1064
 8968      0000
 8969              	.L1096:
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 8970              		.loc 1 3251 0
 8971 011e C7442410 		movl	$0, 16(%rsp)
 8971      00000000 
 8972              	.LVL925:
 8973              	.L1066:
 8974              	.LBE499:
 8975              	.LBE501:
1442:fltk-1.3.4-1/png/png.c ****       return 2;
 8976              		.loc 1 1442 0
 8977 0126 8B5318   		movl	24(%rbx), %edx
 8978 0129 8B430C   		movl	12(%rbx), %eax
 8979              	.LVL926:
 8980 012c 2B5310   		subl	16(%rbx), %edx
 8981              	.LVL927:
 8982              	.LBB502:
 8983              	.LBB503:
3249:fltk-1.3.4-1/png/png.c ****       {
 8984              		.loc 1 3249 0
 8985 012f 2B4314   		subl	20(%rbx), %eax
 8986              	.LVL928:
 8987 0132 89C6     		movl	%eax, %esi
 8988 0134 7408     		je	.L1097
 8989 0136 85D2     		testl	%edx, %edx
 8990 0138 0F857002 		jne	.L1067
 8990      0000
 8991              	.L1097:
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 8992              		.loc 1 3251 0
 8993 013e C7442414 		movl	$0, 20(%rsp)
 8993      00000000 
 8994              	.LVL929:
 8995              	.L1069:
 8996              	.LBE503:
 8997              	.LBE502:
1450:fltk-1.3.4-1/png/png.c ****        red_inverse <= xy->whitey /* r+g+b scales = white scale */)
 8998              		.loc 1 1450 0
 8999 0146 8B4C2410 		movl	16(%rsp), %ecx
 9000 014a 2B4C2414 		subl	20(%rsp), %ecx
1437:fltk-1.3.4-1/png/png.c **** 
 9001              		.loc 1 1437 0
 9002 014e 4529E5   		subl	%r12d, %r13d
 9003              	.LVL930:
1450:fltk-1.3.4-1/png/png.c ****        red_inverse <= xy->whitey /* r+g+b scales = white scale */)
 9004              		.loc 1 1450 0
 9005 0151 8B731C   		movl	28(%rbx), %esi
 9006 0154 488D7C24 		leaq	8(%rsp), %rdi
 9006      08
 9007 0159 4489EA   		movl	%r13d, %edx
1437:fltk-1.3.4-1/png/png.c **** 
 9008              		.loc 1 1437 0
 9009 015c 4589EC   		movl	%r13d, %r12d
1450:fltk-1.3.4-1/png/png.c ****        red_inverse <= xy->whitey /* r+g+b scales = white scale */)
 9010              		.loc 1 1450 0
 9011 015f E8000000 		call	png_muldiv
 9011      00
 9012              	.LVL931:
 9013 0164 85C0     		testl	%eax, %eax
 9014 0166 0F84C401 		je	.L1055
 9014      0000
1450:fltk-1.3.4-1/png/png.c ****        red_inverse <= xy->whitey /* r+g+b scales = white scale */)
 9015              		.loc 1 1450 0 is_stmt 0 discriminator 1
 9016 016c 8B431C   		movl	28(%rbx), %eax
 9017 016f 3B442408 		cmpl	8(%rsp), %eax
 9018 0173 0F8DB701 		jge	.L1055
 9018      0000
 9019              	.LVL932:
1455:fltk-1.3.4-1/png/png.c ****       return 2;
 9020              		.loc 1 1455 0 is_stmt 1
 9021 0179 8B5318   		movl	24(%rbx), %edx
 9022 017c 8B4B04   		movl	4(%rbx), %ecx
 9023              	.LVL933:
 9024 017f 2B5310   		subl	16(%rbx), %edx
 9025              	.LVL934:
 9026              	.LBB505:
 9027              	.LBB506:
3249:fltk-1.3.4-1/png/png.c ****       {
 9028              		.loc 1 3249 0
 9029 0182 2B4B14   		subl	20(%rbx), %ecx
 9030              	.LVL935:
 9031 0185 89CE     		movl	%ecx, %esi
 9032 0187 7408     		je	.L1098
 9033 0189 85D2     		testl	%edx, %edx
 9034 018b 0F854702 		jne	.L1070
 9034      0000
 9035              	.L1098:
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 9036              		.loc 1 3251 0
 9037 0191 C7442410 		movl	$0, 16(%rsp)
 9037      00000000 
 9038              	.LVL936:
 9039              	.L1072:
 9040              	.LBE506:
 9041              	.LBE505:
1457:fltk-1.3.4-1/png/png.c ****       return 2;
 9042              		.loc 1 1457 0
 9043 0199 89C2     		movl	%eax, %edx
 9044 019b 8B0B     		movl	(%rbx), %ecx
 9045              	.LVL937:
 9046 019d 2B5314   		subl	20(%rbx), %edx
 9047              	.LVL938:
 9048              	.LBB508:
 9049              	.LBB509:
3249:fltk-1.3.4-1/png/png.c ****       {
 9050              		.loc 1 3249 0
 9051 01a0 2B4B10   		subl	16(%rbx), %ecx
 9052              	.LVL939:
 9053 01a3 89CE     		movl	%ecx, %esi
 9054 01a5 7408     		je	.L1099
 9055 01a7 85D2     		testl	%edx, %edx
 9056 01a9 0F854802 		jne	.L1073
 9056      0000
 9057              	.L1099:
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 9058              		.loc 1 3251 0
 9059 01af C7442414 		movl	$0, 20(%rsp)
 9059      00000000 
 9060              	.LVL940:
 9061              	.L1075:
 9062              	.LBE509:
 9063              	.LBE508:
1459:fltk-1.3.4-1/png/png.c ****        green_inverse <= xy->whitey)
 9064              		.loc 1 1459 0
 9065 01b7 8B4C2410 		movl	16(%rsp), %ecx
 9066 01bb 2B4C2414 		subl	20(%rsp), %ecx
 9067 01bf 488D7C24 		leaq	12(%rsp), %rdi
 9067      0C
 9068 01c4 4489E2   		movl	%r12d, %edx
 9069 01c7 89C6     		movl	%eax, %esi
 9070 01c9 E8000000 		call	png_muldiv
 9070      00
 9071              	.LVL941:
 9072 01ce 85C0     		testl	%eax, %eax
 9073 01d0 0F845A01 		je	.L1055
 9073      0000
1460:fltk-1.3.4-1/png/png.c ****       return 1;
 9074              		.loc 1 1460 0 discriminator 1
 9075 01d6 8B7B1C   		movl	28(%rbx), %edi
 9076 01d9 448B6C24 		movl	12(%rsp), %r13d
 9076      0C
1459:fltk-1.3.4-1/png/png.c ****        green_inverse <= xy->whitey)
 9077              		.loc 1 1459 0 discriminator 1
 9078 01de 4439EF   		cmpl	%r13d, %edi
 9079 01e1 0F8D4901 		jge	.L1055
 9079      0000
1466:fltk-1.3.4-1/png/png.c ****        png_reciprocal(green_inverse);
 9080              		.loc 1 1466 0
 9081 01e7 E8000000 		call	png_reciprocal
 9081      00
 9082              	.LVL942:
 9083 01ec 448B7424 		movl	8(%rsp), %r14d
 9083      08
 9084 01f1 4189C4   		movl	%eax, %r12d
 9085 01f4 4489F7   		movl	%r14d, %edi
 9086 01f7 E8000000 		call	png_reciprocal
 9086      00
 9087              	.LVL943:
1467:fltk-1.3.4-1/png/png.c ****    if (blue_scale <= 0)
 9088              		.loc 1 1467 0
 9089 01fc 4489EF   		movl	%r13d, %edi
1466:fltk-1.3.4-1/png/png.c ****        png_reciprocal(green_inverse);
 9090              		.loc 1 1466 0
 9091 01ff 4129C4   		subl	%eax, %r12d
1467:fltk-1.3.4-1/png/png.c ****    if (blue_scale <= 0)
 9092              		.loc 1 1467 0
 9093 0202 E8000000 		call	png_reciprocal
 9093      00
 9094              	.LVL944:
1466:fltk-1.3.4-1/png/png.c ****        png_reciprocal(green_inverse);
 9095              		.loc 1 1466 0
 9096 0207 4129C4   		subl	%eax, %r12d
 9097              	.LVL945:
1468:fltk-1.3.4-1/png/png.c ****       return 1;
 9098              		.loc 1 1468 0
 9099 020a 4585E4   		testl	%r12d, %r12d
 9100 020d 0F8E1D01 		jle	.L1055
 9100      0000
 9101              	.LBB511:
 9102              	.LBB512:
3247:fltk-1.3.4-1/png/png.c ****    {
 9103              		.loc 1 3247 0
 9104 0213 4585F6   		testl	%r14d, %r14d
 9105              	.LBE512:
 9106              	.LBE511:
1473:fltk-1.3.4-1/png/png.c ****       return 1;
 9107              		.loc 1 1473 0
 9108 0216 8B33     		movl	(%rbx), %esi
 9109              	.LVL946:
 9110              	.LBB515:
 9111              	.LBB513:
3247:fltk-1.3.4-1/png/png.c ****    {
 9112              		.loc 1 3247 0
 9113 0218 0F841201 		je	.L1055
 9113      0000
3249:fltk-1.3.4-1/png/png.c ****       {
 9114              		.loc 1 3249 0
 9115 021e 85F6     		testl	%esi, %esi
 9116 0220 0F85DD00 		jne	.L1076
 9116      0000
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 9117              		.loc 1 3251 0
 9118 0226 C7450000 		movl	$0, 0(%rbp)
 9118      000000
 9119              	.LVL947:
 9120              	.LBE513:
 9121              	.LBE515:
1475:fltk-1.3.4-1/png/png.c ****       return 1;
 9122              		.loc 1 1475 0
 9123 022d 8B7304   		movl	4(%rbx), %esi
 9124 0230 488D7D04 		leaq	4(%rbp), %rdi
 9125              	.LVL948:
 9126              	.L1077:
 9127              	.LBB516:
 9128              	.LBB517:
3249:fltk-1.3.4-1/png/png.c ****       {
 9129              		.loc 1 3249 0
 9130 0234 85F6     		testl	%esi, %esi
 9131 0236 0F85B402 		jne	.L1078
 9131      0000
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 9132              		.loc 1 3251 0
 9133 023c C7450400 		movl	$0, 4(%rbp)
 9133      000000
 9134              	.LVL949:
 9135              	.LBE517:
 9136              	.LBE516:
1477:fltk-1.3.4-1/png/png.c ****        red_inverse) == 0)
 9137              		.loc 1 1477 0
 9138 0243 BEA08601 		movl	$100000, %esi
 9138      00
 9139 0248 2B33     		subl	(%rbx), %esi
 9140 024a 2B7304   		subl	4(%rbx), %esi
 9141 024d 488D7D08 		leaq	8(%rbp), %rdi
 9142              	.LVL950:
 9143 0251 4489F1   		movl	%r14d, %ecx
 9144              	.LVL951:
 9145              	.L1079:
 9146              	.LBB520:
 9147              	.LBB521:
3249:fltk-1.3.4-1/png/png.c ****       {
 9148              		.loc 1 3249 0
 9149 0254 85F6     		testl	%esi, %esi
 9150 0256 0F857D02 		jne	.L1080
 9150      0000
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 9151              		.loc 1 3251 0
 9152 025c C7450800 		movl	$0, 8(%rbp)
 9152      000000
 9153              	.LVL952:
 9154              	.L1081:
 9155              	.LBE521:
 9156              	.LBE520:
1481:fltk-1.3.4-1/png/png.c ****       return 1;
 9157              		.loc 1 1481 0
 9158 0263 8B4C240C 		movl	12(%rsp), %ecx
 9159 0267 8B7308   		movl	8(%rbx), %esi
 9160 026a 488D7D0C 		leaq	12(%rbp), %rdi
 9161              	.LVL953:
 9162              	.LBB524:
 9163              	.LBB525:
3247:fltk-1.3.4-1/png/png.c ****    {
 9164              		.loc 1 3247 0
 9165 026e 85C9     		testl	%ecx, %ecx
 9166 0270 0F84BA00 		je	.L1055
 9166      0000
3249:fltk-1.3.4-1/png/png.c ****       {
 9167              		.loc 1 3249 0
 9168 0276 85F6     		testl	%esi, %esi
 9169 0278 0F853102 		jne	.L1082
 9169      0000
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 9170              		.loc 1 3251 0
 9171 027e C7450C00 		movl	$0, 12(%rbp)
 9171      000000
 9172              	.LVL954:
 9173              	.LBE525:
 9174              	.LBE524:
1483:fltk-1.3.4-1/png/png.c ****       return 1;
 9175              		.loc 1 1483 0
 9176 0285 8B730C   		movl	12(%rbx), %esi
 9177 0288 488D7D10 		leaq	16(%rbp), %rdi
 9178              	.LVL955:
 9179              	.L1083:
 9180              	.LBB527:
 9181              	.LBB528:
3249:fltk-1.3.4-1/png/png.c ****       {
 9182              		.loc 1 3249 0
 9183 028c 85F6     		testl	%esi, %esi
 9184 028e 0F85E901 		jne	.L1084
 9184      0000
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 9185              		.loc 1 3251 0
 9186 0294 C7451000 		movl	$0, 16(%rbp)
 9186      000000
 9187              	.LVL956:
 9188              	.LBE528:
 9189              	.LBE527:
1485:fltk-1.3.4-1/png/png.c ****        green_inverse) == 0)
 9190              		.loc 1 1485 0
 9191 029b BEA08601 		movl	$100000, %esi
 9191      00
 9192 02a0 2B7308   		subl	8(%rbx), %esi
 9193 02a3 2B730C   		subl	12(%rbx), %esi
 9194 02a6 488D7D14 		leaq	20(%rbp), %rdi
 9195              	.LVL957:
 9196              	.L1085:
 9197              	.LBB531:
 9198              	.LBB532:
3249:fltk-1.3.4-1/png/png.c ****       {
 9199              		.loc 1 3249 0
 9200 02aa 85F6     		testl	%esi, %esi
 9201 02ac 0F85B401 		jne	.L1086
 9201      0000
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 9202              		.loc 1 3251 0
 9203 02b2 C7451400 		movl	$0, 20(%rbp)
 9203      000000
 9204              	.LVL958:
 9205              	.L1087:
 9206              	.LBE532:
 9207              	.LBE531:
1489:fltk-1.3.4-1/png/png.c ****       return 1;
 9208              		.loc 1 1489 0
 9209 02b9 8B7310   		movl	16(%rbx), %esi
 9210 02bc 488D7D18 		leaq	24(%rbp), %rdi
 9211              	.LVL959:
 9212              	.LBB535:
 9213              	.LBB536:
3249:fltk-1.3.4-1/png/png.c ****       {
 9214              		.loc 1 3249 0
 9215 02c0 85F6     		testl	%esi, %esi
 9216 02c2 0F858401 		jne	.L1088
 9216      0000
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 9217              		.loc 1 3251 0
 9218 02c8 C7451800 		movl	$0, 24(%rbp)
 9218      000000
 9219              	.LVL960:
 9220              	.L1089:
 9221              	.LBE536:
 9222              	.LBE535:
1491:fltk-1.3.4-1/png/png.c ****       return 1;
 9223              		.loc 1 1491 0
 9224 02cf 8B7314   		movl	20(%rbx), %esi
 9225 02d2 488D7D1C 		leaq	28(%rbp), %rdi
 9226              	.LVL961:
 9227              	.LBB538:
 9228              	.LBB539:
3249:fltk-1.3.4-1/png/png.c ****       {
 9229              		.loc 1 3249 0
 9230 02d6 85F6     		testl	%esi, %esi
 9231 02d8 0F855401 		jne	.L1090
 9231      0000
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 9232              		.loc 1 3251 0
 9233 02de C7451C00 		movl	$0, 28(%rbp)
 9233      000000
 9234              	.LVL962:
 9235              	.L1091:
 9236              	.LBE539:
 9237              	.LBE538:
1493:fltk-1.3.4-1/png/png.c ****        PNG_FP_1) == 0)
 9238              		.loc 1 1493 0
 9239 02e5 B8A08601 		movl	$100000, %eax
 9239      00
 9240 02ea 2B4310   		subl	16(%rbx), %eax
 9241 02ed 488D7D20 		leaq	32(%rbp), %rdi
 9242              	.LVL963:
 9243              	.LBB541:
 9244              	.LBB542:
3249:fltk-1.3.4-1/png/png.c ****       {
 9245              		.loc 1 3249 0
 9246 02f1 2B4314   		subl	20(%rbx), %eax
 9247              	.LVL964:
 9248 02f4 0F851C01 		jne	.L1092
 9248      0000
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 9249              		.loc 1 3251 0
 9250 02fa C7452000 		movl	$0, 32(%rbp)
 9250      000000
 9251              	.LVL965:
 9252 0301 EB32     		jmp	.L1054
 9253              	.LVL966:
 9254              	.L1076:
 9255              	.LBE542:
 9256              	.LBE541:
 9257              	.LBB544:
 9258              	.LBB514:
 9259 0303 4489F1   		movl	%r14d, %ecx
 9260 0306 BAA08601 		movl	$100000, %edx
 9260      00
 9261 030b 4889EF   		movq	%rbp, %rdi
 9262 030e E8000000 		call	png_muldiv.part.9
 9262      00
 9263              	.LVL967:
 9264              	.LBE514:
 9265              	.LBE544:
1473:fltk-1.3.4-1/png/png.c ****       return 1;
 9266              		.loc 1 1473 0
 9267 0313 85C0     		testl	%eax, %eax
 9268 0315 7419     		je	.L1055
1475:fltk-1.3.4-1/png/png.c ****       return 1;
 9269              		.loc 1 1475 0
 9270 0317 448B7424 		movl	8(%rsp), %r14d
 9270      08
 9271 031c 8B7304   		movl	4(%rbx), %esi
 9272 031f 488D7D04 		leaq	4(%rbp), %rdi
 9273              	.LVL968:
 9274              	.LBB545:
 9275              	.LBB518:
3247:fltk-1.3.4-1/png/png.c ****    {
 9276              		.loc 1 3247 0
 9277 0323 4585F6   		testl	%r14d, %r14d
 9278 0326 0F8508FF 		jne	.L1077
 9278      FFFF
 9279              	.LVL969:
 9280 032c 0F1F4000 		.p2align 4,,10
 9281              		.p2align 3
 9282              	.L1055:
 9283              	.LBE518:
 9284              	.LBE545:
1245:fltk-1.3.4-1/png/png.c ****    if (xy->redy < 0 || xy->redy > PNG_FP_1-xy->redx) return 1;
 9285              		.loc 1 1245 0
 9286 0330 B8010000 		movl	$1, %eax
 9286      00
 9287              	.L1054:
1498:fltk-1.3.4-1/png/png.c **** 
 9288              		.loc 1 1498 0
 9289 0335 488B4C24 		movq	24(%rsp), %rcx
 9289      18
 9290 033a 6448330C 		xorq	%fs:40, %rcx
 9290      25280000 
 9290      00
 9291 0343 754C     		jne	.L1164
 9292 0345 4883C420 		addq	$32, %rsp
 9293              		.cfi_remember_state
 9294              		.cfi_def_cfa_offset 48
 9295 0349 5B       		popq	%rbx
 9296              		.cfi_def_cfa_offset 40
 9297 034a 5D       		popq	%rbp
 9298              		.cfi_def_cfa_offset 32
 9299 034b 415C     		popq	%r12
 9300              		.cfi_def_cfa_offset 24
 9301 034d 415D     		popq	%r13
 9302              		.cfi_def_cfa_offset 16
 9303 034f 415E     		popq	%r14
 9304              		.cfi_def_cfa_offset 8
 9305 0351 C3       		ret
 9306              	.LVL970:
 9307              	.L1056:
 9308              		.cfi_restore_state
 9309              	.LBB546:
 9310              	.LBB491:
 9311 0352 488D7C24 		leaq	16(%rsp), %rdi
 9311      10
 9312              	.LVL971:
 9313 0357 B9070000 		movl	$7, %ecx
 9313      00
 9314 035c E8000000 		call	png_muldiv.part.9
 9314      00
 9315              	.LVL972:
 9316              	.LBE491:
 9317              	.LBE546:
1433:fltk-1.3.4-1/png/png.c ****       return 2;
 9318              		.loc 1 1433 0
 9319 0361 85C0     		testl	%eax, %eax
 9320 0363 7561     		jne	.L1059
 9321              	.L1063:
1434:fltk-1.3.4-1/png/png.c ****    if (png_muldiv(&right, xy->greeny-xy->bluey, xy->redx - xy->bluex, 7) == 0)
 9322              		.loc 1 1434 0
 9323 0365 B8020000 		movl	$2, %eax
 9323      00
 9324 036a EBC9     		jmp	.L1054
 9325              	.LVL973:
 9326              	.L1060:
 9327              	.LBB547:
 9328              	.LBB495:
 9329 036c 488D7C24 		leaq	20(%rsp), %rdi
 9329      14
 9330              	.LVL974:
 9331 0371 B9070000 		movl	$7, %ecx
 9331      00
 9332 0376 E8000000 		call	png_muldiv.part.9
 9332      00
 9333              	.LVL975:
 9334              	.LBE495:
 9335              	.LBE547:
1435:fltk-1.3.4-1/png/png.c ****       return 2;
 9336              		.loc 1 1435 0
 9337 037b 85C0     		testl	%eax, %eax
 9338 037d 74E6     		je	.L1063
 9339 037f 448B6424 		movl	20(%rsp), %r12d
 9339      14
 9340 0384 448B4B14 		movl	20(%rbx), %r9d
 9341 0388 448B4310 		movl	16(%rbx), %r8d
 9342 038c E972FDFF 		jmp	.L1062
 9342      FF
 9343              	.LVL976:
 9344              	.L1164:
1498:fltk-1.3.4-1/png/png.c **** 
 9345              		.loc 1 1498 0
 9346 0391 E8000000 		call	__stack_chk_fail
 9346      00
 9347              	.LVL977:
 9348              	.L1064:
 9349              	.LBB548:
 9350              	.LBB500:
 9351 0396 488D7C24 		leaq	16(%rsp), %rdi
 9351      10
 9352              	.LVL978:
 9353 039b B9070000 		movl	$7, %ecx
 9353      00
 9354 03a0 E8000000 		call	png_muldiv.part.9
 9354      00
 9355              	.LVL979:
 9356              	.LBE500:
 9357              	.LBE548:
1440:fltk-1.3.4-1/png/png.c ****       return 2;
 9358              		.loc 1 1440 0
 9359 03a5 85C0     		testl	%eax, %eax
 9360 03a7 74BC     		je	.L1063
 9361 03a9 E978FDFF 		jmp	.L1066
 9361      FF
 9362              	.LVL980:
 9363              	.L1067:
 9364              	.LBB549:
 9365              	.LBB504:
 9366 03ae 488D7C24 		leaq	20(%rsp), %rdi
 9366      14
 9367              	.LVL981:
 9368 03b3 B9070000 		movl	$7, %ecx
 9368      00
 9369 03b8 E8000000 		call	png_muldiv.part.9
 9369      00
 9370              	.LVL982:
 9371              	.LBE504:
 9372              	.LBE549:
1442:fltk-1.3.4-1/png/png.c ****       return 2;
 9373              		.loc 1 1442 0
 9374 03bd 85C0     		testl	%eax, %eax
 9375 03bf 74A4     		je	.L1063
 9376 03c1 E980FDFF 		jmp	.L1069
 9376      FF
 9377              	.LVL983:
 9378              	.L1059:
 9379 03c6 8B03     		movl	(%rbx), %eax
 9380 03c8 448B4310 		movl	16(%rbx), %r8d
 9381 03cc 8B7B0C   		movl	12(%rbx), %edi
 9382 03cf 448B4B14 		movl	20(%rbx), %r9d
 9383 03d3 E90CFDFF 		jmp	.L1058
 9383      FF
 9384              	.LVL984:
 9385              	.L1070:
 9386              	.LBB550:
 9387              	.LBB507:
 9388 03d8 488D7C24 		leaq	16(%rsp), %rdi
 9388      10
 9389              	.LVL985:
 9390 03dd B9070000 		movl	$7, %ecx
 9390      00
 9391              	.LVL986:
 9392 03e2 E8000000 		call	png_muldiv.part.9
 9392      00
 9393              	.LVL987:
 9394              	.LBE507:
 9395              	.LBE550:
1455:fltk-1.3.4-1/png/png.c ****       return 2;
 9396              		.loc 1 1455 0
 9397 03e7 85C0     		testl	%eax, %eax
 9398 03e9 0F8476FF 		je	.L1063
 9398      FFFF
 9399 03ef 8B431C   		movl	28(%rbx), %eax
 9400 03f2 E9A2FDFF 		jmp	.L1072
 9400      FF
 9401              	.LVL988:
 9402              	.L1073:
 9403              	.LBB551:
 9404              	.LBB510:
 9405 03f7 488D7C24 		leaq	20(%rsp), %rdi
 9405      14
 9406              	.LVL989:
 9407 03fc B9070000 		movl	$7, %ecx
 9407      00
 9408              	.LVL990:
 9409 0401 E8000000 		call	png_muldiv.part.9
 9409      00
 9410              	.LVL991:
 9411              	.LBE510:
 9412              	.LBE551:
1457:fltk-1.3.4-1/png/png.c ****       return 2;
 9413              		.loc 1 1457 0
 9414 0406 85C0     		testl	%eax, %eax
 9415 0408 0F8457FF 		je	.L1063
 9415      FFFF
 9416 040e 8B431C   		movl	28(%rbx), %eax
 9417 0411 E9A1FDFF 		jmp	.L1075
 9417      FF
 9418              	.LVL992:
 9419              	.L1092:
 9420              	.LBB552:
 9421              	.LBB543:
 9422 0416 B9A08601 		movl	$100000, %ecx
 9422      00
 9423 041b 4489E2   		movl	%r12d, %edx
 9424 041e 89C6     		movl	%eax, %esi
 9425 0420 E8000000 		call	png_muldiv.part.9
 9425      00
 9426              	.LVL993:
 9427              	.LBE543:
 9428              	.LBE552:
1245:fltk-1.3.4-1/png/png.c ****    if (xy->redy < 0 || xy->redy > PNG_FP_1-xy->redx) return 1;
 9429              		.loc 1 1245 0
 9430 0425 85C0     		testl	%eax, %eax
 9431 0427 0F94C0   		sete	%al
 9432 042a 0FB6C0   		movzbl	%al, %eax
 9433 042d E903FFFF 		jmp	.L1054
 9433      FF
 9434              	.LVL994:
 9435              	.L1090:
 9436              	.LBB553:
 9437              	.LBB540:
 9438 0432 B9A08601 		movl	$100000, %ecx
 9438      00
 9439 0437 4489E2   		movl	%r12d, %edx
 9440 043a E8000000 		call	png_muldiv.part.9
 9440      00
 9441              	.LVL995:
 9442              	.LBE540:
 9443              	.LBE553:
1491:fltk-1.3.4-1/png/png.c ****       return 1;
 9444              		.loc 1 1491 0
 9445 043f 85C0     		testl	%eax, %eax
 9446 0441 0F859EFE 		jne	.L1091
 9446      FFFF
 9447 0447 E9E4FEFF 		jmp	.L1055
 9447      FF
 9448              	.LVL996:
 9449              	.L1088:
 9450              	.LBB554:
 9451              	.LBB537:
 9452 044c B9A08601 		movl	$100000, %ecx
 9452      00
 9453 0451 4489E2   		movl	%r12d, %edx
 9454 0454 E8000000 		call	png_muldiv.part.9
 9454      00
 9455              	.LVL997:
 9456              	.LBE537:
 9457              	.LBE554:
1489:fltk-1.3.4-1/png/png.c ****       return 1;
 9458              		.loc 1 1489 0
 9459 0459 85C0     		testl	%eax, %eax
 9460 045b 0F856EFE 		jne	.L1089
 9460      FFFF
 9461 0461 E9CAFEFF 		jmp	.L1055
 9461      FF
 9462              	.LVL998:
 9463              	.L1086:
 9464              	.LBB555:
 9465              	.LBB533:
 9466 0466 BAA08601 		movl	$100000, %edx
 9466      00
 9467 046b E8000000 		call	png_muldiv.part.9
 9467      00
 9468              	.LVL999:
 9469              	.LBE533:
 9470              	.LBE555:
1485:fltk-1.3.4-1/png/png.c ****        green_inverse) == 0)
 9471              		.loc 1 1485 0
 9472 0470 85C0     		testl	%eax, %eax
 9473 0472 0F8541FE 		jne	.L1087
 9473      FFFF
 9474 0478 E9B3FEFF 		jmp	.L1055
 9474      FF
 9475              	.LVL1000:
 9476              	.L1084:
 9477              	.LBB556:
 9478              	.LBB529:
 9479 047d BAA08601 		movl	$100000, %edx
 9479      00
 9480 0482 E8000000 		call	png_muldiv.part.9
 9480      00
 9481              	.LVL1001:
 9482              	.LBE529:
 9483              	.LBE556:
1483:fltk-1.3.4-1/png/png.c ****       return 1;
 9484              		.loc 1 1483 0
 9485 0487 85C0     		testl	%eax, %eax
 9486 0489 0F84A1FE 		je	.L1055
 9486      FFFF
1485:fltk-1.3.4-1/png/png.c ****        green_inverse) == 0)
 9487              		.loc 1 1485 0
 9488 048f 8B4C240C 		movl	12(%rsp), %ecx
 9489 0493 BEA08601 		movl	$100000, %esi
 9489      00
 9490 0498 2B7308   		subl	8(%rbx), %esi
 9491 049b 2B730C   		subl	12(%rbx), %esi
 9492 049e 488D7D14 		leaq	20(%rbp), %rdi
 9493              	.LVL1002:
 9494              	.LBB557:
 9495              	.LBB534:
3247:fltk-1.3.4-1/png/png.c ****    {
 9496              		.loc 1 3247 0
 9497 04a2 85C9     		testl	%ecx, %ecx
 9498 04a4 0F8486FE 		je	.L1055
 9498      FFFF
 9499 04aa E9FBFDFF 		jmp	.L1085
 9499      FF
 9500              	.LVL1003:
 9501              	.L1082:
 9502              	.LBE534:
 9503              	.LBE557:
 9504              	.LBB558:
 9505              	.LBB526:
 9506 04af BAA08601 		movl	$100000, %edx
 9506      00
 9507 04b4 E8000000 		call	png_muldiv.part.9
 9507      00
 9508              	.LVL1004:
 9509              	.LBE526:
 9510              	.LBE558:
1481:fltk-1.3.4-1/png/png.c ****       return 1;
 9511              		.loc 1 1481 0
 9512 04b9 85C0     		testl	%eax, %eax
 9513 04bb 0F846FFE 		je	.L1055
 9513      FFFF
1483:fltk-1.3.4-1/png/png.c ****       return 1;
 9514              		.loc 1 1483 0
 9515 04c1 8B4C240C 		movl	12(%rsp), %ecx
 9516 04c5 8B730C   		movl	12(%rbx), %esi
 9517 04c8 488D7D10 		leaq	16(%rbp), %rdi
 9518              	.LVL1005:
 9519              	.LBB559:
 9520              	.LBB530:
3247:fltk-1.3.4-1/png/png.c ****    {
 9521              		.loc 1 3247 0
 9522 04cc 85C9     		testl	%ecx, %ecx
 9523 04ce 0F845CFE 		je	.L1055
 9523      FFFF
 9524 04d4 E9B3FDFF 		jmp	.L1083
 9524      FF
 9525              	.LVL1006:
 9526              	.L1080:
 9527              	.LBE530:
 9528              	.LBE559:
 9529              	.LBB560:
 9530              	.LBB522:
 9531 04d9 BAA08601 		movl	$100000, %edx
 9531      00
 9532 04de E8000000 		call	png_muldiv.part.9
 9532      00
 9533              	.LVL1007:
 9534              	.LBE522:
 9535              	.LBE560:
1477:fltk-1.3.4-1/png/png.c ****        red_inverse) == 0)
 9536              		.loc 1 1477 0
 9537 04e3 85C0     		testl	%eax, %eax
 9538 04e5 0F8578FD 		jne	.L1081
 9538      FFFF
 9539 04eb E940FEFF 		jmp	.L1055
 9539      FF
 9540              	.LVL1008:
 9541              	.L1078:
 9542              	.LBB561:
 9543              	.LBB519:
 9544 04f0 4489F1   		movl	%r14d, %ecx
 9545 04f3 BAA08601 		movl	$100000, %edx
 9545      00
 9546 04f8 E8000000 		call	png_muldiv.part.9
 9546      00
 9547              	.LVL1009:
 9548              	.LBE519:
 9549              	.LBE561:
1475:fltk-1.3.4-1/png/png.c ****       return 1;
 9550              		.loc 1 1475 0
 9551 04fd 85C0     		testl	%eax, %eax
 9552 04ff 0F842BFE 		je	.L1055
 9552      FFFF
1477:fltk-1.3.4-1/png/png.c ****        red_inverse) == 0)
 9553              		.loc 1 1477 0
 9554 0505 8B4C2408 		movl	8(%rsp), %ecx
 9555 0509 BEA08601 		movl	$100000, %esi
 9555      00
 9556 050e 2B33     		subl	(%rbx), %esi
 9557 0510 2B7304   		subl	4(%rbx), %esi
 9558 0513 488D7D08 		leaq	8(%rbp), %rdi
 9559              	.LVL1010:
 9560              	.LBB562:
 9561              	.LBB523:
3247:fltk-1.3.4-1/png/png.c ****    {
 9562              		.loc 1 3247 0
 9563 0517 85C9     		testl	%ecx, %ecx
 9564 0519 0F8411FE 		je	.L1055
 9564      FFFF
 9565 051f E930FDFF 		jmp	.L1079
 9565      FF
 9566              	.LBE523:
 9567              	.LBE562:
 9568              		.cfi_endproc
 9569              	.LFE89:
 9571              		.section	.text.unlikely.png_XYZ_from_xy
 9572              	.LCOLDE151:
 9573              		.section	.text.png_XYZ_from_xy
 9574              	.LHOTE151:
 9575              		.section	.rodata.str1.1
 9576              	.LC152:
 9577 037c 696E7661 		.string	"invalid end points"
 9577      6C696420 
 9577      656E6420 
 9577      706F696E 
 9577      747300
 9578              		.section	.rodata.str1.8
 9579 05a2 00000000 		.align 8
 9579      0000
 9580              	.LC153:
 9581 05a8 696E7465 		.string	"internal error checking chromaticities"
 9581      726E616C 
 9581      20657272 
 9581      6F722063 
 9581      6865636B 
 9582              		.section	.text.unlikely.png_colorspace_set_endpoints,"ax",@progbits
 9583              	.LCOLDB154:
 9584              		.section	.text.png_colorspace_set_endpoints,"ax",@progbits
 9585              	.LHOTB154:
 9586              		.p2align 4,,15
 9587              		.globl	png_colorspace_set_endpoints
 9589              	png_colorspace_set_endpoints:
 9590              	.LFB96:
1719:fltk-1.3.4-1/png/png.c ****    png_XYZ XYZ = *XYZ_in;
 9591              		.loc 1 1719 0
 9592              		.cfi_startproc
 9593              	.LVL1011:
 9594 0000 4156     		pushq	%r14
 9595              		.cfi_def_cfa_offset 16
 9596              		.cfi_offset 14, -16
 9597 0002 4155     		pushq	%r13
 9598              		.cfi_def_cfa_offset 24
 9599              		.cfi_offset 13, -24
 9600 0004 4154     		pushq	%r12
 9601              		.cfi_def_cfa_offset 32
 9602              		.cfi_offset 12, -32
 9603 0006 55       		pushq	%rbp
 9604              		.cfi_def_cfa_offset 40
 9605              		.cfi_offset 6, -40
 9606 0007 4889FD   		movq	%rdi, %rbp
 9607 000a 53       		pushq	%rbx
 9608              		.cfi_def_cfa_offset 48
 9609              		.cfi_offset 3, -48
 9610 000b 4889F3   		movq	%rsi, %rbx
 9611 000e 4883C480 		addq	$-128, %rsp
 9612              		.cfi_def_cfa_offset 176
1720:fltk-1.3.4-1/png/png.c ****    png_xy xy;
 9613              		.loc 1 1720 0
 9614 0012 488B32   		movq	(%rdx), %rsi
 9615              	.LVL1012:
1719:fltk-1.3.4-1/png/png.c ****    png_XYZ XYZ = *XYZ_in;
 9616              		.loc 1 1719 0
 9617 0015 64488B04 		movq	%fs:40, %rax
 9617      25280000 
 9617      00
 9618 001e 48894424 		movq	%rax, 120(%rsp)
 9618      78
 9619 0023 31C0     		xorl	%eax, %eax
1720:fltk-1.3.4-1/png/png.c ****    png_xy xy;
 9620              		.loc 1 1720 0
 9621 0025 488B4208 		movq	8(%rdx), %rax
 9622 0029 48897424 		movq	%rsi, 32(%rsp)
 9622      20
 9623              	.LBB587:
 9624              	.LBB588:
 9625              	.LBB589:
 9626              	.LBB590:
1505:fltk-1.3.4-1/png/png.c ****       XYZ->red_X < 0 || XYZ->green_X < 0 || XYZ->blue_X < 0 ||
 9627              		.loc 1 1505 0
 9628 002e 48C1EE20 		shrq	$32, %rsi
 9629 0032 85F6     		testl	%esi, %esi
 9630              	.LBE590:
 9631              	.LBE589:
 9632              	.LBE588:
 9633              	.LBE587:
1720:fltk-1.3.4-1/png/png.c ****    png_xy xy;
 9634              		.loc 1 1720 0
 9635 0034 48894424 		movq	%rax, 40(%rsp)
 9635      28
 9636 0039 488B4210 		movq	16(%rdx), %rax
 9637 003d 48894424 		movq	%rax, 48(%rsp)
 9637      30
 9638 0042 488B4218 		movq	24(%rdx), %rax
 9639 0046 48894424 		movq	%rax, 56(%rsp)
 9639      38
 9640 004b 8B4220   		movl	32(%rdx), %eax
 9641 004e 89442440 		movl	%eax, 64(%rsp)
 9642              	.LVL1013:
 9643              	.LBB643:
 9644              	.LBB639:
 9645              	.LBB631:
 9646              	.LBB627:
1505:fltk-1.3.4-1/png/png.c ****       XYZ->red_X < 0 || XYZ->green_X < 0 || XYZ->blue_X < 0 ||
 9647              		.loc 1 1505 0
 9648 0052 0F88A801 		js	.L1183
 9648      0000
 9649 0058 8B442430 		movl	48(%rsp), %eax
 9650 005c 85C0     		testl	%eax, %eax
 9651 005e 0F889C01 		js	.L1183
 9651      0000
 9652 0064 448B6C24 		movl	60(%rsp), %r13d
 9652      3C
 9653 0069 4585ED   		testl	%r13d, %r13d
 9654 006c 0F888E01 		js	.L1183
 9654      0000
1506:fltk-1.3.4-1/png/png.c ****       XYZ->red_Z < 0 || XYZ->green_Z < 0 || XYZ->blue_Z < 0)
 9655              		.loc 1 1506 0
 9656 0072 8B7C2420 		movl	32(%rsp), %edi
 9657              	.LVL1014:
1505:fltk-1.3.4-1/png/png.c ****       XYZ->red_X < 0 || XYZ->green_X < 0 || XYZ->blue_X < 0 ||
 9658              		.loc 1 1505 0
 9659 0076 85FF     		testl	%edi, %edi
 9660 0078 0F888201 		js	.L1183
 9660      0000
1506:fltk-1.3.4-1/png/png.c ****       XYZ->red_Z < 0 || XYZ->green_Z < 0 || XYZ->blue_Z < 0)
 9661              		.loc 1 1506 0
 9662 007e 8B54242C 		movl	44(%rsp), %edx
 9663              	.LVL1015:
 9664 0082 85D2     		testl	%edx, %edx
 9665 0084 0F887601 		js	.L1183
 9665      0000
 9666 008a 4189CC   		movl	%ecx, %r12d
 9667 008d 8B4C2438 		movl	56(%rsp), %ecx
 9668              	.LVL1016:
 9669 0091 85C9     		testl	%ecx, %ecx
 9670 0093 0F886701 		js	.L1183
 9670      0000
 9671 0099 448B5424 		movl	40(%rsp), %r10d
 9671      28
 9672 009e 4585D2   		testl	%r10d, %r10d
 9673 00a1 0F885901 		js	.L1183
 9673      0000
1507:fltk-1.3.4-1/png/png.c ****       return 1;
 9674              		.loc 1 1507 0
 9675 00a7 448B4C24 		movl	52(%rsp), %r9d
 9675      34
 9676 00ac 4585C9   		testl	%r9d, %r9d
 9677 00af 0F884B01 		js	.L1183
 9677      0000
 9678 00b5 448B4424 		movl	64(%rsp), %r8d
 9678      40
 9679 00ba 4585C0   		testl	%r8d, %r8d
 9680 00bd 0F883D01 		js	.L1183
 9680      0000
 9681              	.LVL1017:
1516:fltk-1.3.4-1/png/png.c ****       return 1;
 9682              		.loc 1 1516 0
 9683 00c3 41B8FFFF 		movl	$2147483647, %r8d
 9683      FF7F
 9684 00c9 4129F0   		subl	%esi, %r8d
 9685 00cc 4439C2   		cmpl	%r8d, %edx
 9686 00cf 0F8F2B01 		jg	.L1183
 9686      0000
1518:fltk-1.3.4-1/png/png.c ****    if (0x7fffffff - Y < XYZ->blue_X)
 9687              		.loc 1 1518 0
 9688 00d5 01F0     		addl	%esi, %eax
 9689              	.LVL1018:
1519:fltk-1.3.4-1/png/png.c ****       return 1;
 9690              		.loc 1 1519 0
 9691 00d7 BAFFFFFF 		movl	$2147483647, %edx
 9691      7F
 9692 00dc 29C2     		subl	%eax, %edx
 9693 00de 39D1     		cmpl	%edx, %ecx
 9694 00e0 0F8F1A01 		jg	.L1183
 9694      0000
1521:fltk-1.3.4-1/png/png.c **** 
 9695              		.loc 1 1521 0
 9696 00e6 4101C5   		addl	%eax, %r13d
 9697              	.LVL1019:
 9698 00e9 4C8D7424 		leaq	32(%rsp), %r14
 9698      20
 9699              	.LVL1020:
1523:fltk-1.3.4-1/png/png.c ****    {
 9700              		.loc 1 1523 0
 9701 00ee 4181FDA0 		cmpl	$100000, %r13d
 9701      860100
 9702 00f5 0F84BD00 		je	.L1179
 9702      0000
 9703              	.LVL1021:
 9704              	.LBB591:
 9705              	.LBB592:
3247:fltk-1.3.4-1/png/png.c ****    {
 9706              		.loc 1 3247 0
 9707 00fb 4585ED   		testl	%r13d, %r13d
 9708 00fe 0F84FC00 		je	.L1183
 9708      0000
3249:fltk-1.3.4-1/png/png.c ****       {
 9709              		.loc 1 3249 0
 9710 0104 85FF     		testl	%edi, %edi
 9711 0106 0F85AB01 		jne	.L1169
 9711      0000
 9712 010c 4C8D7424 		leaq	32(%rsp), %r14
 9712      20
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 9713              		.loc 1 3251 0
 9714 0111 C7442420 		movl	$0, 32(%rsp)
 9714      00000000 
 9715              	.LVL1022:
 9716              	.L1170:
 9717              	.LBE592:
 9718              	.LBE591:
 9719              	.LBB594:
 9720              	.LBB595:
3249:fltk-1.3.4-1/png/png.c ****       {
 9721              		.loc 1 3249 0
 9722 0119 85F6     		testl	%esi, %esi
 9723 011b 0F85BE01 		jne	.L1261
 9723      0000
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 9724              		.loc 1 3251 0
 9725 0121 C7442424 		movl	$0, 36(%rsp)
 9725      00000000 
 9726              	.LVL1023:
 9727              	.L1172:
 9728              	.LBE595:
 9729              	.LBE594:
1529:fltk-1.3.4-1/png/png.c ****          return 1;
 9730              		.loc 1 1529 0
 9731 0129 8B742428 		movl	40(%rsp), %esi
 9732              	.LVL1024:
 9733              	.LBB597:
 9734              	.LBB598:
3249:fltk-1.3.4-1/png/png.c ****       {
 9735              		.loc 1 3249 0
 9736 012d 85F6     		testl	%esi, %esi
 9737 012f 0F85CB01 		jne	.L1262
 9737      0000
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 9738              		.loc 1 3251 0
 9739 0135 C7442428 		movl	$0, 40(%rsp)
 9739      00000000 
 9740              	.LVL1025:
 9741              	.L1173:
 9742              	.LBE598:
 9743              	.LBE597:
1532:fltk-1.3.4-1/png/png.c ****          return 1;
 9744              		.loc 1 1532 0
 9745 013d 8B74242C 		movl	44(%rsp), %esi
 9746              	.LVL1026:
 9747              	.LBB600:
 9748              	.LBB601:
3249:fltk-1.3.4-1/png/png.c ****       {
 9749              		.loc 1 3249 0
 9750 0141 85F6     		testl	%esi, %esi
 9751 0143 0F85D701 		jne	.L1263
 9751      0000
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 9752              		.loc 1 3251 0
 9753 0149 C744242C 		movl	$0, 44(%rsp)
 9753      00000000 
 9754              	.LVL1027:
 9755              	.L1174:
 9756              	.LBE601:
 9757              	.LBE600:
1534:fltk-1.3.4-1/png/png.c ****          return 1;
 9758              		.loc 1 1534 0
 9759 0151 8B742430 		movl	48(%rsp), %esi
 9760              	.LVL1028:
 9761              	.LBB603:
 9762              	.LBB604:
3249:fltk-1.3.4-1/png/png.c ****       {
 9763              		.loc 1 3249 0
 9764 0155 85F6     		testl	%esi, %esi
 9765 0157 0F85E101 		jne	.L1264
 9765      0000
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 9766              		.loc 1 3251 0
 9767 015d C7442430 		movl	$0, 48(%rsp)
 9767      00000000 
 9768              	.LVL1029:
 9769              	.L1175:
 9770              	.LBE604:
 9771              	.LBE603:
1536:fltk-1.3.4-1/png/png.c ****          return 1;
 9772              		.loc 1 1536 0
 9773 0165 8B742434 		movl	52(%rsp), %esi
 9774              	.LVL1030:
 9775              	.LBB606:
 9776              	.LBB607:
3249:fltk-1.3.4-1/png/png.c ****       {
 9777              		.loc 1 3249 0
 9778 0169 85F6     		testl	%esi, %esi
 9779 016b 0F85EB01 		jne	.L1265
 9779      0000
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 9780              		.loc 1 3251 0
 9781 0171 C7442434 		movl	$0, 52(%rsp)
 9781      00000000 
 9782              	.LVL1031:
 9783              	.L1176:
 9784              	.LBE607:
 9785              	.LBE606:
1539:fltk-1.3.4-1/png/png.c ****          return 1;
 9786              		.loc 1 1539 0
 9787 0179 8B742438 		movl	56(%rsp), %esi
 9788              	.LVL1032:
 9789              	.LBB609:
 9790              	.LBB610:
3249:fltk-1.3.4-1/png/png.c ****       {
 9791              		.loc 1 3249 0
 9792 017d 85F6     		testl	%esi, %esi
 9793 017f 0F85FA01 		jne	.L1266
 9793      0000
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 9794              		.loc 1 3251 0
 9795 0185 C7442438 		movl	$0, 56(%rsp)
 9795      00000000 
 9796              	.LVL1033:
 9797              	.L1177:
 9798              	.LBE610:
 9799              	.LBE609:
1541:fltk-1.3.4-1/png/png.c ****          return 1;
 9800              		.loc 1 1541 0
 9801 018d 8B74243C 		movl	60(%rsp), %esi
 9802              	.LVL1034:
 9803              	.LBB612:
 9804              	.LBB613:
3249:fltk-1.3.4-1/png/png.c ****       {
 9805              		.loc 1 3249 0
 9806 0191 85F6     		testl	%esi, %esi
 9807 0193 0F850402 		jne	.L1267
 9807      0000
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 9808              		.loc 1 3251 0
 9809 0199 C744243C 		movl	$0, 60(%rsp)
 9809      00000000 
 9810              	.LVL1035:
 9811              	.L1178:
 9812              	.LBE613:
 9813              	.LBE612:
1543:fltk-1.3.4-1/png/png.c ****          return 1;
 9814              		.loc 1 1543 0
 9815 01a1 8B742440 		movl	64(%rsp), %esi
 9816              	.LVL1036:
 9817              	.LBB615:
 9818              	.LBB616:
3249:fltk-1.3.4-1/png/png.c ****       {
 9819              		.loc 1 3249 0
 9820 01a5 85F6     		testl	%esi, %esi
 9821 01a7 753E     		jne	.L1268
3251:fltk-1.3.4-1/png/png.c ****          return 1;
 9822              		.loc 1 3251 0
 9823 01a9 C7442440 		movl	$0, 64(%rsp)
 9823      00000000 
 9824              	.LVL1037:
 9825              		.p2align 4,,10
 9826 01b1 0F1F8000 		.p2align 3
 9826      000000
 9827              	.L1179:
 9828              	.LBE616:
 9829              	.LBE615:
 9830              	.LBE627:
 9831              	.LBE631:
1612:fltk-1.3.4-1/png/png.c ****    if (result != 0)
 9832              		.loc 1 1612 0
 9833 01b8 4C89F6   		movq	%r14, %rsi
 9834 01bb 4889E7   		movq	%rsp, %rdi
 9835 01be E8000000 		call	png_xy_from_XYZ
 9835      00
 9836              	.LVL1038:
1613:fltk-1.3.4-1/png/png.c ****       return result;
 9837              		.loc 1 1613 0
 9838 01c3 85C0     		testl	%eax, %eax
 9839 01c5 0F849500 		je	.L1269
 9839      0000
 9840              	.LVL1039:
 9841              	.L1180:
 9842              	.LBE639:
 9843              	.LBE643:
1723:fltk-1.3.4-1/png/png.c ****    {
 9844              		.loc 1 1723 0
 9845 01cb 85C0     		testl	%eax, %eax
 9846 01cd 7471     		je	.L1182
 9847 01cf 83F801   		cmpl	$1, %eax
 9848 01d2 742C     		je	.L1183
1736:fltk-1.3.4-1/png/png.c ****          png_error(png_ptr, "internal error checking chromaticities");
 9849              		.loc 1 1736 0
 9850 01d4 66814B4A 		orw	$-32768, 74(%rbx)
 9850      0080
1737:fltk-1.3.4-1/png/png.c ****          break;
 9851              		.loc 1 1737 0
 9852 01da BE000000 		movl	$.LC153, %esi
 9852      00
 9853 01df 4889EF   		movq	%rbp, %rdi
 9854 01e2 E8000000 		call	png_error
 9854      00
 9855              	.LVL1040:
 9856              	.L1268:
 9857              	.LBB644:
 9858              	.LBB640:
 9859              	.LBB632:
 9860              	.LBB628:
 9861              	.LBB618:
 9862              	.LBB617:
 9863 01e7 498D7E20 		leaq	32(%r14), %rdi
 9864 01eb 4489E9   		movl	%r13d, %ecx
 9865 01ee BAA08601 		movl	$100000, %edx
 9865      00
 9866 01f3 E8000000 		call	png_muldiv.part.9
 9866      00
 9867              	.LVL1041:
 9868              	.LBE617:
 9869              	.LBE618:
1543:fltk-1.3.4-1/png/png.c ****          return 1;
 9870              		.loc 1 1543 0
 9871 01f8 85C0     		testl	%eax, %eax
 9872 01fa 75BC     		jne	.L1179
 9873              	.LVL1042:
 9874 01fc 0F1F4000 		.p2align 4,,10
 9875              		.p2align 3
 9876              	.L1183:
 9877              	.LBE628:
 9878              	.LBE632:
 9879              	.LBE640:
 9880              	.LBE644:
1731:fltk-1.3.4-1/png/png.c ****          png_benign_error(png_ptr, "invalid end points");
 9881              		.loc 1 1731 0
 9882 0200 66814B4A 		orw	$-32768, 74(%rbx)
 9882      0080
1732:fltk-1.3.4-1/png/png.c ****          break;
 9883              		.loc 1 1732 0
 9884 0206 BE000000 		movl	$.LC152, %esi
 9884      00
 9885 020b 4889EF   		movq	%rbp, %rdi
 9886 020e E8000000 		call	png_benign_error
 9886      00
 9887              	.LVL1043:
1741:fltk-1.3.4-1/png/png.c **** }
 9888              		.loc 1 1741 0
 9889 0213 31C0     		xorl	%eax, %eax
 9890              	.L1184:
1742:fltk-1.3.4-1/png/png.c **** 
 9891              		.loc 1 1742 0
 9892 0215 488B5C24 		movq	120(%rsp), %rbx
 9892      78
 9893 021a 6448331C 		xorq	%fs:40, %rbx
 9893      25280000 
 9893      00
 9894              	.LVL1044:
 9895 0223 0F855101 		jne	.L1270
 9895      0000
 9896 0229 4883EC80 		subq	$-128, %rsp
 9897              		.cfi_remember_state
 9898              		.cfi_def_cfa_offset 48
 9899 022d 5B       		popq	%rbx
 9900              		.cfi_def_cfa_offset 40
 9901 022e 5D       		popq	%rbp
 9902              		.cfi_def_cfa_offset 32
 9903              	.LVL1045:
 9904 022f 415C     		popq	%r12
 9905              		.cfi_def_cfa_offset 24
 9906 0231 415D     		popq	%r13
 9907              		.cfi_def_cfa_offset 16
 9908 0233 415E     		popq	%r14
 9909              		.cfi_def_cfa_offset 8
 9910 0235 C3       		ret
 9911              	.LVL1046:
 9912 0236 662E0F1F 		.p2align 4,,10
 9912      84000000 
 9912      0000
 9913              		.p2align 3
 9914              	.L1182:
 9915              		.cfi_restore_state
1726:fltk-1.3.4-1/png/png.c ****             preferred);
 9916              		.loc 1 1726 0
 9917 0240 4589E0   		movl	%r12d, %r8d
 9918 0243 4C89F1   		movq	%r14, %rcx
 9919 0246 4889E2   		movq	%rsp, %rdx
 9920 0249 4889DE   		movq	%rbx, %rsi
 9921 024c 4889EF   		movq	%rbp, %rdi
 9922 024f E8000000 		call	png_colorspace_set_xy_and_XYZ
 9922      00
 9923              	.LVL1047:
 9924 0254 EBBF     		jmp	.L1184
 9925              	.LVL1048:
 9926 0256 662E0F1F 		.p2align 4,,10
 9926      84000000 
 9926      0000
 9927              		.p2align 3
 9928              	.L1269:
 9929              	.LBB645:
 9930              	.LBB641:
1616:fltk-1.3.4-1/png/png.c ****    return png_colorspace_check_xy(&XYZtemp, xy);
 9931              		.loc 1 1616 0
 9932 0260 488B4424 		movq	32(%rsp), %rax
 9932      20
 9933              	.LVL1049:
 9934              	.LBB633:
 9935              	.LBB634:
1583:fltk-1.3.4-1/png/png.c ****    if (result != 0)
 9936              		.loc 1 1583 0
 9937 0265 488D7C24 		leaq	80(%rsp), %rdi
 9937      50
 9938 026a 4889E6   		movq	%rsp, %rsi
 9939              	.LBE634:
 9940              	.LBE633:
1616:fltk-1.3.4-1/png/png.c ****    return png_colorspace_check_xy(&XYZtemp, xy);
 9941              		.loc 1 1616 0
 9942 026d 48894424 		movq	%rax, 80(%rsp)
 9942      50
 9943 0272 488B4424 		movq	40(%rsp), %rax
 9943      28
 9944 0277 48894424 		movq	%rax, 88(%rsp)
 9944      58
 9945 027c 488B4424 		movq	48(%rsp), %rax
 9945      30
 9946 0281 48894424 		movq	%rax, 96(%rsp)
 9946      60
 9947 0286 488B4424 		movq	56(%rsp), %rax
 9947      38
 9948 028b 48894424 		movq	%rax, 104(%rsp)
 9948      68
 9949 0290 8B442440 		movl	64(%rsp), %eax
 9950 0294 89442470 		movl	%eax, 112(%rsp)
 9951              	.LVL1050:
 9952              	.LBB636:
 9953              	.LBB635:
1583:fltk-1.3.4-1/png/png.c ****    if (result != 0)
 9954              		.loc 1 1583 0
 9955 0298 E8000000 		call	png_XYZ_from_xy
 9955      00
 9956              	.LVL1051:
1584:fltk-1.3.4-1/png/png.c ****       return result;
 9957              		.loc 1 1584 0
 9958 029d 85C0     		testl	%eax, %eax
 9959 029f 0F8526FF 		jne	.L1180
 9959      FFFF
 9960 02a5 488D7C24 		leaq	80(%rsp), %rdi
 9960      50
 9961              	.LVL1052:
 9962 02aa 4889E6   		movq	%rsp, %rsi
 9963 02ad E8000000 		call	png_colorspace_check_xy.part.10
 9963      00
 9964              	.LVL1053:
 9965 02b2 E914FFFF 		jmp	.L1180
 9965      FF
 9966              	.LVL1054:
 9967              	.L1169:
 9968              	.LBE635:
 9969              	.LBE636:
 9970              	.LBB637:
 9971              	.LBB629:
 9972              	.LBB619:
 9973              	.LBB593:
 9974 02b7 4C8D7424 		leaq	32(%rsp), %r14
 9974      20
 9975 02bc 89FE     		movl	%edi, %esi
 9976 02be 4489E9   		movl	%r13d, %ecx
 9977 02c1 BAA08601 		movl	$100000, %edx
 9977      00
 9978 02c6 4C89F7   		movq	%r14, %rdi
 9979              	.LVL1055:
 9980 02c9 E8000000 		call	png_muldiv.part.9
 9980      00
 9981              	.LVL1056:
 9982              	.LBE593:
 9983              	.LBE619:
1525:fltk-1.3.4-1/png/png.c ****          return 1;
 9984              		.loc 1 1525 0
 9985 02ce 85C0     		testl	%eax, %eax
 9986 02d0 0F842AFF 		je	.L1183
 9986      FFFF
 9987 02d6 8B742424 		movl	36(%rsp), %esi
 9988 02da E93AFEFF 		jmp	.L1170
 9988      FF
 9989              	.LVL1057:
 9990              	.L1261:
 9991              	.LBB620:
 9992              	.LBB596:
 9993 02df 498D7E04 		leaq	4(%r14), %rdi
 9994 02e3 4489E9   		movl	%r13d, %ecx
 9995 02e6 BAA08601 		movl	$100000, %edx
 9995      00
 9996 02eb E8000000 		call	png_muldiv.part.9
 9996      00
 9997              	.LVL1058:
 9998              	.LBE596:
 9999              	.LBE620:
1527:fltk-1.3.4-1/png/png.c ****          return 1;
 10000              		.loc 1 1527 0
 10001 02f0 85C0     		testl	%eax, %eax
 10002 02f2 0F8531FE 		jne	.L1172
 10002      FFFF
 10003 02f8 E903FFFF 		jmp	.L1183
 10003      FF
 10004              	.LVL1059:
 10005 02fd 0F1F00   		.p2align 4,,10
 10006              		.p2align 3
 10007              	.L1262:
 10008              	.LBB621:
 10009              	.LBB599:
 10010 0300 498D7E08 		leaq	8(%r14), %rdi
 10011 0304 4489E9   		movl	%r13d, %ecx
 10012 0307 BAA08601 		movl	$100000, %edx
 10012      00
 10013 030c E8000000 		call	png_muldiv.part.9
 10013      00
 10014              	.LVL1060:
 10015              	.LBE599:
 10016              	.LBE621:
1529:fltk-1.3.4-1/png/png.c ****          return 1;
 10017              		.loc 1 1529 0
 10018 0311 85C0     		testl	%eax, %eax
 10019 0313 0F8524FE 		jne	.L1173
 10019      FFFF
 10020 0319 E9E2FEFF 		jmp	.L1183
 10020      FF
 10021              	.LVL1061:
 10022 031e 6690     		.p2align 4,,10
 10023              		.p2align 3
 10024              	.L1263:
 10025              	.LBB622:
 10026              	.LBB602:
 10027 0320 498D7E0C 		leaq	12(%r14), %rdi
 10028 0324 4489E9   		movl	%r13d, %ecx
 10029 0327 BAA08601 		movl	$100000, %edx
 10029      00
 10030 032c E8000000 		call	png_muldiv.part.9
 10030      00
 10031              	.LVL1062:
 10032              	.LBE602:
 10033              	.LBE622:
1532:fltk-1.3.4-1/png/png.c ****          return 1;
 10034              		.loc 1 1532 0
 10035 0331 85C0     		testl	%eax, %eax
 10036 0333 0F8518FE 		jne	.L1174
 10036      FFFF
 10037 0339 E9C2FEFF 		jmp	.L1183
 10037      FF
 10038              	.LVL1063:
 10039              	.L1264:
 10040              	.LBB623:
 10041              	.LBB605:
 10042 033e 498D7E10 		leaq	16(%r14), %rdi
 10043 0342 4489E9   		movl	%r13d, %ecx
 10044 0345 BAA08601 		movl	$100000, %edx
 10044      00
 10045 034a E8000000 		call	png_muldiv.part.9
 10045      00
 10046              	.LVL1064:
 10047              	.LBE605:
 10048              	.LBE623:
1534:fltk-1.3.4-1/png/png.c ****          return 1;
 10049              		.loc 1 1534 0
 10050 034f 85C0     		testl	%eax, %eax
 10051 0351 0F850EFE 		jne	.L1175
 10051      FFFF
 10052 0357 E9A4FEFF 		jmp	.L1183
 10052      FF
 10053              	.LVL1065:
 10054              	.L1265:
 10055              	.LBB624:
 10056              	.LBB608:
 10057 035c 498D7E14 		leaq	20(%r14), %rdi
 10058 0360 4489E9   		movl	%r13d, %ecx
 10059 0363 BAA08601 		movl	$100000, %edx
 10059      00
 10060 0368 E8000000 		call	png_muldiv.part.9
 10060      00
 10061              	.LVL1066:
 10062              	.LBE608:
 10063              	.LBE624:
1536:fltk-1.3.4-1/png/png.c ****          return 1;
 10064              		.loc 1 1536 0
 10065 036d 85C0     		testl	%eax, %eax
 10066 036f 0F8504FE 		jne	.L1176
 10066      FFFF
 10067 0375 E986FEFF 		jmp	.L1183
 10067      FF
 10068              	.LVL1067:
 10069              	.L1270:
 10070              	.LBE629:
 10071              	.LBE637:
 10072              	.LBE641:
 10073              	.LBE645:
1742:fltk-1.3.4-1/png/png.c **** 
 10074              		.loc 1 1742 0
 10075 037a E8000000 		call	__stack_chk_fail
 10075      00
 10076              	.LVL1068:
 10077              	.L1266:
 10078              	.LBB646:
 10079              	.LBB642:
 10080              	.LBB638:
 10081              	.LBB630:
 10082              	.LBB625:
 10083              	.LBB611:
 10084 037f 498D7E18 		leaq	24(%r14), %rdi
 10085 0383 4489E9   		movl	%r13d, %ecx
 10086 0386 BAA08601 		movl	$100000, %edx
 10086      00
 10087 038b E8000000 		call	png_muldiv.part.9
 10087      00
 10088              	.LVL1069:
 10089              	.LBE611:
 10090              	.LBE625:
1539:fltk-1.3.4-1/png/png.c ****          return 1;
 10091              		.loc 1 1539 0
 10092 0390 85C0     		testl	%eax, %eax
 10093 0392 0F85F5FD 		jne	.L1177
 10093      FFFF
 10094 0398 E963FEFF 		jmp	.L1183
 10094      FF
 10095              	.LVL1070:
 10096              	.L1267:
 10097              	.LBB626:
 10098              	.LBB614:
 10099 039d 498D7E1C 		leaq	28(%r14), %rdi
 10100 03a1 4489E9   		movl	%r13d, %ecx
 10101 03a4 BAA08601 		movl	$100000, %edx
 10101      00
 10102 03a9 E8000000 		call	png_muldiv.part.9
 10102      00
 10103              	.LVL1071:
 10104              	.LBE614:
 10105              	.LBE626:
1541:fltk-1.3.4-1/png/png.c ****          return 1;
 10106              		.loc 1 1541 0
 10107 03ae 85C0     		testl	%eax, %eax
 10108 03b0 0F85EBFD 		jne	.L1178
 10108      FFFF
 10109 03b6 E945FEFF 		jmp	.L1183
 10109      FF
 10110              	.LBE630:
 10111              	.LBE638:
 10112              	.LBE642:
 10113              	.LBE646:
 10114              		.cfi_endproc
 10115              	.LFE96:
 10117              		.section	.text.unlikely.png_colorspace_set_endpoints
 10118              	.LCOLDE154:
 10119              		.section	.text.png_colorspace_set_endpoints
 10120              	.LHOTE154:
 10121              		.section	.rodata.str1.1
 10122              	.LC155:
 10123 038f 696E7661 		.string	"invalid chromaticities"
 10123      6C696420 
 10123      6368726F 
 10123      6D617469 
 10123      63697469 
 10124              		.section	.text.unlikely.png_colorspace_set_chromaticities,"ax",@progbits
 10125              	.LCOLDB156:
 10126              		.section	.text.png_colorspace_set_chromaticities,"ax",@progbits
 10127              	.LHOTB156:
 10128              		.p2align 4,,15
 10129              		.globl	png_colorspace_set_chromaticities
 10131              	png_colorspace_set_chromaticities:
 10132              	.LFB95:
1681:fltk-1.3.4-1/png/png.c ****    /* We must check the end points to ensure they are reasonable - in the past
 10133              		.loc 1 1681 0
 10134              		.cfi_startproc
 10135              	.LVL1072:
 10136 0000 4155     		pushq	%r13
 10137              		.cfi_def_cfa_offset 16
 10138              		.cfi_offset 13, -16
 10139 0002 4154     		pushq	%r12
 10140              		.cfi_def_cfa_offset 24
 10141              		.cfi_offset 12, -24
 10142 0004 4989FC   		movq	%rdi, %r12
 10143 0007 55       		pushq	%rbp
 10144              		.cfi_def_cfa_offset 32
 10145              		.cfi_offset 6, -32
 10146 0008 53       		pushq	%rbx
 10147              		.cfi_def_cfa_offset 40
 10148              		.cfi_offset 3, -40
 10149 0009 4889F5   		movq	%rsi, %rbp
 10150              	.LBB649:
 10151              	.LBB650:
1583:fltk-1.3.4-1/png/png.c ****    if (result != 0)
 10152              		.loc 1 1583 0
 10153 000c 4889D6   		movq	%rdx, %rsi
 10154              	.LVL1073:
 10155              	.LBE650:
 10156              	.LBE649:
1681:fltk-1.3.4-1/png/png.c ****    /* We must check the end points to ensure they are reasonable - in the past
 10157              		.loc 1 1681 0
 10158 000f 4889D3   		movq	%rdx, %rbx
 10159 0012 4189CD   		movl	%ecx, %r13d
 10160 0015 4883EC38 		subq	$56, %rsp
 10161              		.cfi_def_cfa_offset 96
 10162              	.LBB653:
 10163              	.LBB651:
1583:fltk-1.3.4-1/png/png.c ****    if (result != 0)
 10164              		.loc 1 1583 0
 10165 0019 4889E7   		movq	%rsp, %rdi
 10166              	.LVL1074:
 10167              	.LBE651:
 10168              	.LBE653:
1681:fltk-1.3.4-1/png/png.c ****    /* We must check the end points to ensure they are reasonable - in the past
 10169              		.loc 1 1681 0
 10170 001c 64488B04 		movq	%fs:40, %rax
 10170      25280000 
 10170      00
 10171 0025 48894424 		movq	%rax, 40(%rsp)
 10171      28
 10172 002a 31C0     		xorl	%eax, %eax
 10173              	.LVL1075:
 10174              	.LBB654:
 10175              	.LBB652:
1583:fltk-1.3.4-1/png/png.c ****    if (result != 0)
 10176              		.loc 1 1583 0
 10177 002c E8000000 		call	png_XYZ_from_xy
 10177      00
 10178              	.LVL1076:
1584:fltk-1.3.4-1/png/png.c ****       return result;
 10179              		.loc 1 1584 0
 10180 0031 85C0     		testl	%eax, %eax
 10181 0033 750B     		jne	.L1272
 10182 0035 4889DE   		movq	%rbx, %rsi
 10183 0038 4889E7   		movq	%rsp, %rdi
 10184 003b E8000000 		call	png_colorspace_check_xy.part.10
 10184      00
 10185              	.LVL1077:
 10186              	.L1272:
 10187              	.LBE652:
 10188              	.LBE654:
1690:fltk-1.3.4-1/png/png.c ****    {
 10189              		.loc 1 1690 0
 10190 0040 85C0     		testl	%eax, %eax
 10191 0042 7454     		je	.L1274
 10192 0044 83F801   		cmpl	$1, %eax
 10193 0047 7537     		jne	.L1282
1700:fltk-1.3.4-1/png/png.c ****          png_benign_error(png_ptr, "invalid chromaticities");
 10194              		.loc 1 1700 0
 10195 0049 66814D4A 		orw	$-32768, 74(%rbp)
 10195      0080
1701:fltk-1.3.4-1/png/png.c ****          break;
 10196              		.loc 1 1701 0
 10197 004f BE000000 		movl	$.LC155, %esi
 10197      00
 10198 0054 4C89E7   		movq	%r12, %rdi
 10199 0057 E8000000 		call	png_benign_error
 10199      00
 10200              	.LVL1078:
1713:fltk-1.3.4-1/png/png.c **** }
 10201              		.loc 1 1713 0
 10202 005c 31C0     		xorl	%eax, %eax
 10203              	.L1276:
1714:fltk-1.3.4-1/png/png.c **** 
 10204              		.loc 1 1714 0
 10205 005e 488B5424 		movq	40(%rsp), %rdx
 10205      28
 10206 0063 64483314 		xorq	%fs:40, %rdx
 10206      25280000 
 10206      00
 10207 006c 7540     		jne	.L1283
 10208 006e 4883C438 		addq	$56, %rsp
 10209              		.cfi_remember_state
 10210              		.cfi_def_cfa_offset 40
 10211 0072 5B       		popq	%rbx
 10212              		.cfi_def_cfa_offset 32
 10213              	.LVL1079:
 10214 0073 5D       		popq	%rbp
 10215              		.cfi_def_cfa_offset 24
 10216              	.LVL1080:
 10217 0074 415C     		popq	%r12
 10218              		.cfi_def_cfa_offset 16
 10219              	.LVL1081:
 10220 0076 415D     		popq	%r13
 10221              		.cfi_def_cfa_offset 8
 10222              	.LVL1082:
 10223 0078 C3       		ret
 10224              	.LVL1083:
 10225 0079 0F1F8000 		.p2align 4,,10
 10225      000000
 10226              		.p2align 3
 10227              	.L1282:
 10228              		.cfi_restore_state
1708:fltk-1.3.4-1/png/png.c ****          png_error(png_ptr, "internal error checking chromaticities");
 10229              		.loc 1 1708 0
 10230 0080 66814D4A 		orw	$-32768, 74(%rbp)
 10230      0080
1709:fltk-1.3.4-1/png/png.c ****          break;
 10231              		.loc 1 1709 0
 10232 0086 BE000000 		movl	$.LC153, %esi
 10232      00
 10233 008b 4C89E7   		movq	%r12, %rdi
 10234 008e E8000000 		call	png_error
 10234      00
 10235              	.LVL1084:
 10236              		.p2align 4,,10
 10237 0093 0F1F4400 		.p2align 3
 10237      00
 10238              	.L1274:
1693:fltk-1.3.4-1/png/png.c ****             preferred);
 10239              		.loc 1 1693 0
 10240 0098 4589E8   		movl	%r13d, %r8d
 10241 009b 4889E1   		movq	%rsp, %rcx
 10242 009e 4889DA   		movq	%rbx, %rdx
 10243 00a1 4889EE   		movq	%rbp, %rsi
 10244 00a4 4C89E7   		movq	%r12, %rdi
 10245 00a7 E8000000 		call	png_colorspace_set_xy_and_XYZ
 10245      00
 10246              	.LVL1085:
 10247 00ac EBB0     		jmp	.L1276
 10248              	.L1283:
1714:fltk-1.3.4-1/png/png.c **** 
 10249              		.loc 1 1714 0
 10250 00ae E8000000 		call	__stack_chk_fail
 10250      00
 10251              	.LVL1086:
 10252              		.cfi_endproc
 10253              	.LFE95:
 10255              		.section	.text.unlikely.png_colorspace_set_chromaticities
 10256              	.LCOLDE156:
 10257              		.section	.text.png_colorspace_set_chromaticities
 10258              	.LHOTE156:
 10259              		.section	.text.unlikely.png_gamma_significant,"ax",@progbits
 10260              	.LCOLDB157:
 10261              		.section	.text.png_gamma_significant,"ax",@progbits
 10262              	.LHOTB157:
 10263              		.p2align 4,,15
 10264              		.globl	png_gamma_significant
 10266              	png_gamma_significant:
 10267              	.LFB121:
3401:fltk-1.3.4-1/png/png.c ****    return gamma_val < PNG_FP_1 - PNG_GAMMA_THRESHOLD_FIXED ||
 10268              		.loc 1 3401 0
 10269              		.cfi_startproc
 10270              	.LVL1087:
3402:fltk-1.3.4-1/png/png.c ****        gamma_val > PNG_FP_1 + PNG_GAMMA_THRESHOLD_FIXED;
 10271              		.loc 1 3402 0
 10272 0000 81EF1873 		subl	$95000, %edi
 10272      0100
 10273              	.LVL1088:
 10274 0006 31C0     		xorl	%eax, %eax
 10275 0008 81FF1027 		cmpl	$10000, %edi
 10275      0000
 10276 000e 0F97C0   		seta	%al
3404:fltk-1.3.4-1/png/png.c **** #endif
 10277              		.loc 1 3404 0
 10278 0011 C3       		ret
 10279              		.cfi_endproc
 10280              	.LFE121:
 10282              		.section	.text.unlikely.png_gamma_significant
 10283              	.LCOLDE157:
 10284              		.section	.text.png_gamma_significant
 10285              	.LHOTE157:
 10286              		.section	.text.unlikely.png_reciprocal2,"ax",@progbits
 10287              	.LCOLDB159:
 10288              		.section	.text.png_reciprocal2,"ax",@progbits
 10289              	.LHOTB159:
 10290              		.p2align 4,,15
 10291              		.globl	png_reciprocal2
 10293              	png_reciprocal2:
 10294              	.LFB123:
3435:fltk-1.3.4-1/png/png.c ****    /* The required result is 1/a * 1/b; the following preserves accuracy. */
 10295              		.loc 1 3435 0
 10296              		.cfi_startproc
 10297              	.LVL1089:
3438:fltk-1.3.4-1/png/png.c ****    r /= b;
 10298              		.loc 1 3438 0
 10299 0000 660FEFC9 		pxor	%xmm1, %xmm1
3435:fltk-1.3.4-1/png/png.c ****    /* The required result is 1/a * 1/b; the following preserves accuracy. */
 10300              		.loc 1 3435 0
 10301 0004 4883EC08 		subq	$8, %rsp
 10302              		.cfi_def_cfa_offset 16
3438:fltk-1.3.4-1/png/png.c ****    r /= b;
 10303              		.loc 1 3438 0
 10304 0008 F20F1005 		movsd	.LC158(%rip), %xmm0
 10304      00000000 
 10305 0010 F20F2ACF 		cvtsi2sd	%edi, %xmm1
 10306 0014 F20F5EC1 		divsd	%xmm1, %xmm0
 10307              	.LVL1090:
3440:fltk-1.3.4-1/png/png.c **** 
 10308              		.loc 1 3440 0
 10309 0018 660FEFC9 		pxor	%xmm1, %xmm1
 10310 001c F20F2ACE 		cvtsi2sd	%esi, %xmm1
 10311 0020 F20F5EC1 		divsd	%xmm1, %xmm0
 10312              	.LVL1091:
 10313 0024 F20F5805 		addsd	.LC9(%rip), %xmm0
 10313      00000000 
 10314 002c E8000000 		call	floor
 10314      00
 10315              	.LVL1092:
3442:fltk-1.3.4-1/png/png.c ****       return (png_fixed_point)r;
 10316              		.loc 1 3442 0
 10317 0031 F20F100D 		movsd	.LC22(%rip), %xmm1
 10317      00000000 
 10318 0039 660F2EC8 		ucomisd	%xmm0, %xmm1
 10319 003d 7219     		jb	.L1294
3442:fltk-1.3.4-1/png/png.c ****       return (png_fixed_point)r;
 10320              		.loc 1 3442 0 is_stmt 0 discriminator 1
 10321 003f 660F2E05 		ucomisd	.LC23(%rip), %xmm0
 10321      00000000 
 10322 0047 720F     		jb	.L1294
3443:fltk-1.3.4-1/png/png.c **** #else
 10323              		.loc 1 3443 0 is_stmt 1
 10324 0049 F20F2CC0 		cvttsd2si	%xmm0, %eax
3457:fltk-1.3.4-1/png/png.c **** #endif /* READ_GAMMA */
 10325              		.loc 1 3457 0
 10326 004d 4883C408 		addq	$8, %rsp
 10327              		.cfi_remember_state
 10328              		.cfi_def_cfa_offset 8
 10329 0051 C3       		ret
 10330              		.p2align 4,,10
 10331 0052 660F1F44 		.p2align 3
 10331      0000
 10332              	.L1294:
 10333              		.cfi_restore_state
3456:fltk-1.3.4-1/png/png.c **** }
 10334              		.loc 1 3456 0
 10335 0058 31C0     		xorl	%eax, %eax
3457:fltk-1.3.4-1/png/png.c **** #endif /* READ_GAMMA */
 10336              		.loc 1 3457 0
 10337 005a 4883C408 		addq	$8, %rsp
 10338              		.cfi_def_cfa_offset 8
 10339 005e C3       		ret
 10340              		.cfi_endproc
 10341              	.LFE123:
 10343              		.section	.text.unlikely.png_reciprocal2
 10344              	.LCOLDE159:
 10345              		.section	.text.png_reciprocal2
 10346              	.LHOTE159:
 10347              		.section	.text.unlikely.png_gamma_8bit_correct,"ax",@progbits
 10348              	.LCOLDB160:
 10349              		.section	.text.png_gamma_8bit_correct,"ax",@progbits
 10350              	.LHOTB160:
 10351              		.p2align 4,,15
 10352              		.globl	png_gamma_8bit_correct
 10354              	png_gamma_8bit_correct:
 10355              	.LFB124:
3753:fltk-1.3.4-1/png/png.c ****    if (value > 0 && value < 255)
 10356              		.loc 1 3753 0
 10357              		.cfi_startproc
 10358              	.LVL1093:
3754:fltk-1.3.4-1/png/png.c ****    {
 10359              		.loc 1 3754 0
 10360 0000 8D47FF   		leal	-1(%rdi), %eax
 10361 0003 3DFD0000 		cmpl	$253, %eax
 10361      00
 10362 0008 7606     		jbe	.L1298
3796:fltk-1.3.4-1/png/png.c **** 
 10363              		.loc 1 3796 0
 10364 000a 89F8     		movl	%edi, %eax
 10365 000c C3       		ret
 10366 000d 0F1F00   		.p2align 4,,10
 10367              		.p2align 3
 10368              	.L1298:
 10369 0010 E9000000 		jmp	png_gamma_8bit_correct.part.14
 10369      00
 10370              	.LVL1094:
 10371              		.cfi_endproc
 10372              	.LFE124:
 10374              		.section	.text.unlikely.png_gamma_8bit_correct
 10375              	.LCOLDE160:
 10376              		.section	.text.png_gamma_8bit_correct
 10377              	.LHOTE160:
 10378              		.section	.text.unlikely.png_gamma_16bit_correct,"ax",@progbits
 10379              	.LCOLDB161:
 10380              		.section	.text.png_gamma_16bit_correct,"ax",@progbits
 10381              	.LHOTB161:
 10382              		.p2align 4,,15
 10383              		.globl	png_gamma_16bit_correct
 10385              	png_gamma_16bit_correct:
 10386              	.LFB125:
3801:fltk-1.3.4-1/png/png.c ****    if (value > 0 && value < 65535)
 10387              		.loc 1 3801 0
 10388              		.cfi_startproc
 10389              	.LVL1095:
3802:fltk-1.3.4-1/png/png.c ****    {
 10390              		.loc 1 3802 0
 10391 0000 8D47FF   		leal	-1(%rdi), %eax
 10392 0003 3DFDFF00 		cmpl	$65533, %eax
 10392      00
 10393 0008 7606     		jbe	.L1301
3826:fltk-1.3.4-1/png/png.c **** #endif /* 16BIT */
 10394              		.loc 1 3826 0
 10395 000a 89F8     		movl	%edi, %eax
 10396 000c C3       		ret
 10397 000d 0F1F00   		.p2align 4,,10
 10398              		.p2align 3
 10399              	.L1301:
 10400 0010 E9000000 		jmp	png_gamma_16bit_correct.part.15
 10400      00
 10401              	.LVL1096:
 10402              		.cfi_endproc
 10403              	.LFE125:
 10405              		.section	.text.unlikely.png_gamma_16bit_correct
 10406              	.LCOLDE161:
 10407              		.section	.text.png_gamma_16bit_correct
 10408              	.LHOTE161:
 10409              		.section	.text.unlikely.png_gamma_correct,"ax",@progbits
 10410              	.LCOLDB162:
 10411              		.section	.text.png_gamma_correct,"ax",@progbits
 10412              	.LHOTB162:
 10413              		.p2align 4,,15
 10414              		.globl	png_gamma_correct
 10416              	png_gamma_correct:
 10417              	.LFB126:
3837:fltk-1.3.4-1/png/png.c ****    if (png_ptr->bit_depth == 8)
 10418              		.loc 1 3837 0
 10419              		.cfi_startproc
 10420              	.LVL1097:
3838:fltk-1.3.4-1/png/png.c ****       return png_gamma_8bit_correct(value, gamma_val);
 10421              		.loc 1 3838 0
 10422 0000 80BF7802 		cmpb	$8, 632(%rdi)
 10422      000008
3837:fltk-1.3.4-1/png/png.c ****    if (png_ptr->bit_depth == 8)
 10423              		.loc 1 3837 0
 10424 0007 89F1     		movl	%esi, %ecx
 10425              	.LBB655:
 10426              	.LBB656:
3754:fltk-1.3.4-1/png/png.c ****    {
 10427              		.loc 1 3754 0
 10428 0009 8D76FF   		leal	-1(%rsi), %esi
 10429              	.LVL1098:
 10430              	.LBE656:
 10431              	.LBE655:
3838:fltk-1.3.4-1/png/png.c ****       return png_gamma_8bit_correct(value, gamma_val);
 10432              		.loc 1 3838 0
 10433 000c 7422     		je	.L1312
 10434              	.LVL1099:
 10435              	.LBB659:
 10436              	.LBB660:
3802:fltk-1.3.4-1/png/png.c ****    {
 10437              		.loc 1 3802 0
 10438 000e 81FEFDFF 		cmpl	$65533, %esi
 10438      0000
3825:fltk-1.3.4-1/png/png.c **** }
 10439              		.loc 1 3825 0
 10440 0014 89C8     		movl	%ecx, %eax
3802:fltk-1.3.4-1/png/png.c ****    {
 10441              		.loc 1 3802 0
 10442 0016 7608     		jbe	.L1313
 10443              	.LBE660:
 10444              	.LBE659:
3848:fltk-1.3.4-1/png/png.c **** 
 10445              		.loc 1 3848 0
 10446 0018 F3C3     		rep ret
 10447 001a 660F1F44 		.p2align 4,,10
 10447      0000
 10448              		.p2align 3
 10449              	.L1313:
 10450              	.LBB662:
 10451              	.LBB661:
 10452 0020 89D6     		movl	%edx, %esi
 10453 0022 89CF     		movl	%ecx, %edi
 10454              	.LVL1100:
 10455 0024 E9000000 		jmp	png_gamma_16bit_correct.part.15
 10455      00
 10456              	.LVL1101:
 10457 0029 0F1F8000 		.p2align 4,,10
 10457      000000
 10458              		.p2align 3
 10459              	.L1312:
 10460              	.LBE661:
 10461              	.LBE662:
 10462              	.LBB663:
 10463              	.LBB657:
3754:fltk-1.3.4-1/png/png.c ****    {
 10464              		.loc 1 3754 0
 10465 0030 81FEFD00 		cmpl	$253, %esi
 10465      0000
 10466 0036 7608     		jbe	.L1314
 10467              	.LVL1102:
 10468              	.LBE657:
 10469              	.LBE663:
3839:fltk-1.3.4-1/png/png.c **** 
 10470              		.loc 1 3839 0
 10471 0038 0FB6C1   		movzbl	%cl, %eax
3848:fltk-1.3.4-1/png/png.c **** 
 10472              		.loc 1 3848 0
 10473 003b C3       		ret
 10474              	.LVL1103:
 10475 003c 0F1F4000 		.p2align 4,,10
 10476              		.p2align 3
 10477              	.L1314:
3837:fltk-1.3.4-1/png/png.c ****    if (png_ptr->bit_depth == 8)
 10478              		.loc 1 3837 0
 10479 0040 4883EC08 		subq	$8, %rsp
 10480              		.cfi_def_cfa_offset 16
 10481 0044 89D6     		movl	%edx, %esi
 10482 0046 89CF     		movl	%ecx, %edi
 10483              	.LVL1104:
 10484              	.LBB664:
 10485              	.LBB658:
 10486 0048 E8000000 		call	png_gamma_8bit_correct.part.14
 10486      00
 10487              	.LVL1105:
 10488              	.LBE658:
 10489              	.LBE664:
3848:fltk-1.3.4-1/png/png.c **** 
 10490              		.loc 1 3848 0
 10491 004d 4883C408 		addq	$8, %rsp
 10492              		.cfi_def_cfa_offset 8
3839:fltk-1.3.4-1/png/png.c **** 
 10493              		.loc 1 3839 0
 10494 0051 0FB6C0   		movzbl	%al, %eax
3848:fltk-1.3.4-1/png/png.c **** 
 10495              		.loc 1 3848 0
 10496 0054 C3       		ret
 10497              		.cfi_endproc
 10498              	.LFE126:
 10500              		.section	.text.unlikely.png_gamma_correct
 10501              	.LCOLDE162:
 10502              		.section	.text.png_gamma_correct
 10503              	.LHOTE162:
 10504              		.section	.text.unlikely.png_destroy_gamma_table,"ax",@progbits
 10505              	.LCOLDB163:
 10506              		.section	.text.png_destroy_gamma_table,"ax",@progbits
 10507              	.LHOTB163:
 10508              		.p2align 4,,15
 10509              		.globl	png_destroy_gamma_table
 10511              	png_destroy_gamma_table:
 10512              	.LFB130:
4025:fltk-1.3.4-1/png/png.c ****    png_free(png_ptr, png_ptr->gamma_table);
 10513              		.loc 1 4025 0
 10514              		.cfi_startproc
 10515              	.LVL1106:
 10516 0000 4154     		pushq	%r12
 10517              		.cfi_def_cfa_offset 16
 10518              		.cfi_offset 12, -16
 10519 0002 55       		pushq	%rbp
 10520              		.cfi_def_cfa_offset 24
 10521              		.cfi_offset 6, -24
 10522 0003 53       		pushq	%rbx
 10523              		.cfi_def_cfa_offset 32
 10524              		.cfi_offset 3, -32
4026:fltk-1.3.4-1/png/png.c ****    png_ptr->gamma_table = NULL;
 10525              		.loc 1 4026 0
 10526 0004 488BB7B8 		movq	696(%rdi), %rsi
 10526      020000
4025:fltk-1.3.4-1/png/png.c ****    png_free(png_ptr, png_ptr->gamma_table);
 10527              		.loc 1 4025 0
 10528 000b 4889FB   		movq	%rdi, %rbx
4026:fltk-1.3.4-1/png/png.c ****    png_ptr->gamma_table = NULL;
 10529              		.loc 1 4026 0
 10530 000e E8000000 		call	png_free
 10530      00
 10531              	.LVL1107:
4030:fltk-1.3.4-1/png/png.c ****    {
 10532              		.loc 1 4030 0
 10533 0013 488BB3C0 		movq	704(%rbx), %rsi
 10533      020000
4027:fltk-1.3.4-1/png/png.c **** 
 10534              		.loc 1 4027 0
 10535 001a 48C783B8 		movq	$0, 696(%rbx)
 10535      02000000 
 10535      000000
4030:fltk-1.3.4-1/png/png.c ****    {
 10536              		.loc 1 4030 0
 10537 0025 4885F6   		testq	%rsi, %rsi
 10538 0028 7455     		je	.L1316
 10539              	.LBB665:
4033:fltk-1.3.4-1/png/png.c ****       for (i = 0; i < istop; i++)
 10540              		.loc 1 4033 0
 10541 002a B9080000 		movl	$8, %ecx
 10541      00
 10542 002f 2B8BB002 		subl	688(%rbx), %ecx
 10542      0000
 10543 0035 B8010000 		movl	$1, %eax
 10543      00
 10544 003a D3E0     		sall	%cl, %eax
 10545              	.LVL1108:
4034:fltk-1.3.4-1/png/png.c ****       {
 10546              		.loc 1 4034 0
 10547 003c 85C0     		testl	%eax, %eax
 10548 003e 7E2C     		jle	.L1317
 10549 0040 448D60FF 		leal	-1(%rax), %r12d
4034:fltk-1.3.4-1/png/png.c ****       {
 10550              		.loc 1 4034 0 is_stmt 0 discriminator 3
 10551 0044 31ED     		xorl	%ebp, %ebp
 10552 0046 49C1E403 		salq	$3, %r12
 10553 004a EB08     		jmp	.L1319
 10554              	.LVL1109:
 10555 004c 0F1F4000 		.p2align 4,,10
 10556              		.p2align 3
 10557              	.L1338:
 10558 0050 4883C508 		addq	$8, %rbp
 10559              	.L1319:
4036:fltk-1.3.4-1/png/png.c ****       }
 10560              		.loc 1 4036 0 is_stmt 1 discriminator 3
 10561 0054 488B342E 		movq	(%rsi,%rbp), %rsi
 10562 0058 4889DF   		movq	%rbx, %rdi
 10563 005b E8000000 		call	png_free
 10563      00
 10564              	.LVL1110:
4034:fltk-1.3.4-1/png/png.c ****       {
 10565              		.loc 1 4034 0 discriminator 3
 10566 0060 4939EC   		cmpq	%rbp, %r12
 10567 0063 488BB3C0 		movq	704(%rbx), %rsi
 10567      020000
 10568 006a 75E4     		jne	.L1338
 10569              	.L1317:
4038:fltk-1.3.4-1/png/png.c ****    png_ptr->gamma_16_table = NULL;
 10570              		.loc 1 4038 0
 10571 006c 4889DF   		movq	%rbx, %rdi
 10572 006f E8000000 		call	png_free
 10572      00
 10573              	.LVL1111:
4039:fltk-1.3.4-1/png/png.c ****    }
 10574              		.loc 1 4039 0
 10575 0074 48C783C0 		movq	$0, 704(%rbx)
 10575      02000000 
 10575      000000
 10576              	.L1316:
 10577              	.LBE665:
4046:fltk-1.3.4-1/png/png.c ****    png_ptr->gamma_from_1 = NULL;
 10578              		.loc 1 4046 0
 10579 007f 488BB3C8 		movq	712(%rbx), %rsi
 10579      020000
 10580 0086 4889DF   		movq	%rbx, %rdi
 10581 0089 E8000000 		call	png_free
 10581      00
 10582              	.LVL1112:
4048:fltk-1.3.4-1/png/png.c ****    png_ptr->gamma_to_1 = NULL;
 10583              		.loc 1 4048 0
 10584 008e 488BB3D0 		movq	720(%rbx), %rsi
 10584      020000
4047:fltk-1.3.4-1/png/png.c ****    png_free(png_ptr, png_ptr->gamma_to_1);
 10585              		.loc 1 4047 0
 10586 0095 48C783C8 		movq	$0, 712(%rbx)
 10586      02000000 
 10586      000000
4048:fltk-1.3.4-1/png/png.c ****    png_ptr->gamma_to_1 = NULL;
 10587              		.loc 1 4048 0
 10588 00a0 4889DF   		movq	%rbx, %rdi
 10589 00a3 E8000000 		call	png_free
 10589      00
 10590              	.LVL1113:
4052:fltk-1.3.4-1/png/png.c ****    {
 10591              		.loc 1 4052 0
 10592 00a8 488BB3D8 		movq	728(%rbx), %rsi
 10592      020000
4049:fltk-1.3.4-1/png/png.c **** 
 10593              		.loc 1 4049 0
 10594 00af 48C783D0 		movq	$0, 720(%rbx)
 10594      02000000 
 10594      000000
4052:fltk-1.3.4-1/png/png.c ****    {
 10595              		.loc 1 4052 0
 10596 00ba 4885F6   		testq	%rsi, %rsi
 10597 00bd 7458     		je	.L1320
 10598              	.LBB666:
4055:fltk-1.3.4-1/png/png.c ****       for (i = 0; i < istop; i++)
 10599              		.loc 1 4055 0
 10600 00bf B9080000 		movl	$8, %ecx
 10600      00
 10601 00c4 2B8BB002 		subl	688(%rbx), %ecx
 10601      0000
 10602 00ca B8010000 		movl	$1, %eax
 10602      00
 10603 00cf D3E0     		sall	%cl, %eax
 10604              	.LVL1114:
4056:fltk-1.3.4-1/png/png.c ****       {
 10605              		.loc 1 4056 0
 10606 00d1 85C0     		testl	%eax, %eax
 10607 00d3 7E2F     		jle	.L1321
 10608 00d5 448D60FF 		leal	-1(%rax), %r12d
4056:fltk-1.3.4-1/png/png.c ****       {
 10609              		.loc 1 4056 0 is_stmt 0 discriminator 3
 10610 00d9 31ED     		xorl	%ebp, %ebp
 10611 00db 49C1E403 		salq	$3, %r12
 10612 00df EB0B     		jmp	.L1323
 10613              	.LVL1115:
 10614              		.p2align 4,,10
 10615 00e1 0F1F8000 		.p2align 3
 10615      000000
 10616              	.L1339:
 10617 00e8 4883C508 		addq	$8, %rbp
 10618              	.L1323:
4058:fltk-1.3.4-1/png/png.c ****       }
 10619              		.loc 1 4058 0 is_stmt 1 discriminator 3
 10620 00ec 488B342E 		movq	(%rsi,%rbp), %rsi
 10621 00f0 4889DF   		movq	%rbx, %rdi
 10622 00f3 E8000000 		call	png_free
 10622      00
 10623              	.LVL1116:
4056:fltk-1.3.4-1/png/png.c ****       {
 10624              		.loc 1 4056 0 discriminator 3
 10625 00f8 4C39E5   		cmpq	%r12, %rbp
 10626 00fb 488BB3D8 		movq	728(%rbx), %rsi
 10626      020000
 10627 0102 75E4     		jne	.L1339
 10628              	.L1321:
4060:fltk-1.3.4-1/png/png.c ****    png_ptr->gamma_16_from_1 = NULL;
 10629              		.loc 1 4060 0
 10630 0104 4889DF   		movq	%rbx, %rdi
 10631 0107 E8000000 		call	png_free
 10631      00
 10632              	.LVL1117:
4061:fltk-1.3.4-1/png/png.c ****    }
 10633              		.loc 1 4061 0
 10634 010c 48C783D8 		movq	$0, 728(%rbx)
 10634      02000000 
 10634      000000
 10635              	.L1320:
 10636              	.LBE666:
4063:fltk-1.3.4-1/png/png.c ****    {
 10637              		.loc 1 4063 0
 10638 0117 488BB3E0 		movq	736(%rbx), %rsi
 10638      020000
 10639 011e 4885F6   		testq	%rsi, %rsi
 10640 0121 7454     		je	.L1315
 10641              	.LBB667:
4066:fltk-1.3.4-1/png/png.c ****       for (i = 0; i < istop; i++)
 10642              		.loc 1 4066 0
 10643 0123 B9080000 		movl	$8, %ecx
 10643      00
 10644 0128 2B8BB002 		subl	688(%rbx), %ecx
 10644      0000
 10645 012e B8010000 		movl	$1, %eax
 10645      00
 10646 0133 D3E0     		sall	%cl, %eax
 10647              	.LVL1118:
4067:fltk-1.3.4-1/png/png.c ****       {
 10648              		.loc 1 4067 0
 10649 0135 85C0     		testl	%eax, %eax
 10650 0137 7E2B     		jle	.L1325
 10651 0139 448D60FF 		leal	-1(%rax), %r12d
4067:fltk-1.3.4-1/png/png.c ****       {
 10652              		.loc 1 4067 0 is_stmt 0 discriminator 3
 10653 013d 31ED     		xorl	%ebp, %ebp
 10654 013f 49C1E403 		salq	$3, %r12
 10655 0143 EB07     		jmp	.L1327
 10656              	.LVL1119:
 10657              		.p2align 4,,10
 10658 0145 0F1F00   		.p2align 3
 10659              	.L1340:
 10660 0148 4883C508 		addq	$8, %rbp
 10661              	.L1327:
4069:fltk-1.3.4-1/png/png.c ****       }
 10662              		.loc 1 4069 0 is_stmt 1 discriminator 3
 10663 014c 488B342E 		movq	(%rsi,%rbp), %rsi
 10664 0150 4889DF   		movq	%rbx, %rdi
 10665 0153 E8000000 		call	png_free
 10665      00
 10666              	.LVL1120:
4067:fltk-1.3.4-1/png/png.c ****       {
 10667              		.loc 1 4067 0 discriminator 3
 10668 0158 4939EC   		cmpq	%rbp, %r12
 10669 015b 488BB3E0 		movq	736(%rbx), %rsi
 10669      020000
 10670 0162 75E4     		jne	.L1340
 10671              	.L1325:
4071:fltk-1.3.4-1/png/png.c ****    png_ptr->gamma_16_to_1 = NULL;
 10672              		.loc 1 4071 0
 10673 0164 4889DF   		movq	%rbx, %rdi
 10674 0167 E8000000 		call	png_free
 10674      00
 10675              	.LVL1121:
4072:fltk-1.3.4-1/png/png.c ****    }
 10676              		.loc 1 4072 0
 10677 016c 48C783E0 		movq	$0, 736(%rbx)
 10677      02000000 
 10677      000000
 10678              	.L1315:
 10679              	.LBE667:
4076:fltk-1.3.4-1/png/png.c **** 
 10680              		.loc 1 4076 0
 10681 0177 5B       		popq	%rbx
 10682              		.cfi_def_cfa_offset 24
 10683              	.LVL1122:
 10684 0178 5D       		popq	%rbp
 10685              		.cfi_def_cfa_offset 16
 10686 0179 415C     		popq	%r12
 10687              		.cfi_def_cfa_offset 8
 10688 017b C3       		ret
 10689              		.cfi_endproc
 10690              	.LFE130:
 10692              		.section	.text.unlikely.png_destroy_gamma_table
 10693              	.LCOLDE163:
 10694              		.section	.text.png_destroy_gamma_table
 10695              	.LHOTE163:
 10696              		.section	.rodata.str1.1
 10697              	.LC164:
 10698 03a6 67616D6D 		.string	"gamma table being rebuilt"
 10698      61207461 
 10698      626C6520 
 10698      6265696E 
 10698      67207265 
 10699              		.section	.text.unlikely.png_build_gamma_table,"ax",@progbits
 10700              	.LCOLDB165:
 10701              		.section	.text.png_build_gamma_table,"ax",@progbits
 10702              	.LHOTB165:
 10703              		.p2align 4,,15
 10704              		.globl	png_build_gamma_table
 10706              	png_build_gamma_table:
 10707              	.LFB131:
4085:fltk-1.3.4-1/png/png.c ****   png_debug(1, "in png_build_gamma_table");
 10708              		.loc 1 4085 0
 10709              		.cfi_startproc
 10710              	.LVL1123:
 10711 0000 4157     		pushq	%r15
 10712              		.cfi_def_cfa_offset 16
 10713              		.cfi_offset 15, -16
 10714 0002 4156     		pushq	%r14
 10715              		.cfi_def_cfa_offset 24
 10716              		.cfi_offset 14, -24
 10717 0004 4155     		pushq	%r13
 10718              		.cfi_def_cfa_offset 32
 10719              		.cfi_offset 13, -32
 10720 0006 4154     		pushq	%r12
 10721              		.cfi_def_cfa_offset 40
 10722              		.cfi_offset 12, -40
 10723 0008 55       		pushq	%rbp
 10724              		.cfi_def_cfa_offset 48
 10725              		.cfi_offset 6, -48
 10726 0009 53       		pushq	%rbx
 10727              		.cfi_def_cfa_offset 56
 10728              		.cfi_offset 3, -56
 10729 000a 89F3     		movl	%esi, %ebx
 10730 000c 4883EC28 		subq	$40, %rsp
 10731              		.cfi_def_cfa_offset 96
4094:fltk-1.3.4-1/png/png.c ****   {
 10732              		.loc 1 4094 0
 10733 0010 4883BFB8 		cmpq	$0, 696(%rdi)
 10733      02000000 
4085:fltk-1.3.4-1/png/png.c ****   png_debug(1, "in png_build_gamma_table");
 10734              		.loc 1 4085 0
 10735 0018 48897C24 		movq	%rdi, 16(%rsp)
 10735      10
4094:fltk-1.3.4-1/png/png.c ****   {
 10736              		.loc 1 4094 0
 10737 001d 0F840704 		je	.L1401
 10737      0000
 10738              	.L1342:
4096:fltk-1.3.4-1/png/png.c ****     png_destroy_gamma_table(png_ptr);
 10739              		.loc 1 4096 0
 10740 0023 4C8B7C24 		movq	16(%rsp), %r15
 10740      10
 10741 0028 BE000000 		movl	$.LC164, %esi
 10741      00
 10742              	.LVL1124:
 10743 002d 4C89FF   		movq	%r15, %rdi
 10744              	.LVL1125:
 10745 0030 E8000000 		call	png_warning
 10745      00
 10746              	.LVL1126:
4097:fltk-1.3.4-1/png/png.c ****   }
 10747              		.loc 1 4097 0
 10748 0035 4C89FF   		movq	%r15, %rdi
 10749 0038 E8000000 		call	png_destroy_gamma_table
 10749      00
 10750              	.LVL1127:
 10751              	.L1343:
4100:fltk-1.3.4-1/png/png.c ****   {
 10752              		.loc 1 4100 0
 10753 003d 83FB08   		cmpl	$8, %ebx
 10754 0040 7F54     		jg	.L1344
4103:fltk-1.3.4-1/png/png.c ****          png_ptr->screen_gamma) : PNG_FP_1);
 10755              		.loc 1 4103 0
 10756 0042 488B5424 		movq	16(%rsp), %rdx
 10756      10
4102:fltk-1.3.4-1/png/png.c ****          png_ptr->screen_gamma > 0 ?  png_reciprocal2(png_ptr->colorspace.gamma,
 10757              		.loc 1 4102 0
 10758 0047 B8A08601 		movl	$100000, %eax
 10758      00
4103:fltk-1.3.4-1/png/png.c ****          png_ptr->screen_gamma) : PNG_FP_1);
 10759              		.loc 1 4103 0
 10760 004c 8BB2B402 		movl	692(%rdx), %esi
 10760      0000
4102:fltk-1.3.4-1/png/png.c ****          png_ptr->screen_gamma > 0 ?  png_reciprocal2(png_ptr->colorspace.gamma,
 10761              		.loc 1 4102 0
 10762 0052 85F6     		testl	%esi, %esi
 10763 0054 7E0B     		jle	.L1345
4102:fltk-1.3.4-1/png/png.c ****          png_ptr->screen_gamma > 0 ?  png_reciprocal2(png_ptr->colorspace.gamma,
 10764              		.loc 1 4102 0 is_stmt 0 discriminator 1
 10765 0056 8BBAD804 		movl	1240(%rdx), %edi
 10765      0000
 10766 005c E8000000 		call	png_reciprocal2
 10766      00
 10767              	.LVL1128:
 10768              	.L1345:
4102:fltk-1.3.4-1/png/png.c ****          png_ptr->screen_gamma > 0 ?  png_reciprocal2(png_ptr->colorspace.gamma,
 10769              		.loc 1 4102 0 discriminator 4
 10770 0061 488B5C24 		movq	16(%rsp), %rbx
 10770      10
 10771              	.LVL1129:
 10772 0066 89C2     		movl	%eax, %edx
 10773 0068 488DB3B8 		leaq	696(%rbx), %rsi
 10773      020000
 10774 006f 4889DF   		movq	%rbx, %rdi
 10775 0072 E8000000 		call	png_build_8bit_table
 10775      00
 10776              	.LVL1130:
4109:fltk-1.3.4-1/png/png.c ****      {
 10777              		.loc 1 4109 0 is_stmt 1 discriminator 4
 10778 0077 F7833401 		testl	$6291584, 308(%rbx)
 10778      00008000 
 10778      6000
 10779 0081 0F859D02 		jne	.L1402
 10779      0000
 10780              	.L1341:
4211:fltk-1.3.4-1/png/png.c **** #endif /* READ_GAMMA */
 10781              		.loc 1 4211 0
 10782 0087 4883C428 		addq	$40, %rsp
 10783              		.cfi_remember_state
 10784              		.cfi_def_cfa_offset 56
 10785 008b 5B       		popq	%rbx
 10786              		.cfi_def_cfa_offset 48
 10787 008c 5D       		popq	%rbp
 10788              		.cfi_def_cfa_offset 40
 10789 008d 415C     		popq	%r12
 10790              		.cfi_def_cfa_offset 32
 10791 008f 415D     		popq	%r13
 10792              		.cfi_def_cfa_offset 24
 10793 0091 415E     		popq	%r14
 10794              		.cfi_def_cfa_offset 16
 10795 0093 415F     		popq	%r15
 10796              		.cfi_def_cfa_offset 8
 10797 0095 C3       		ret
 10798              	.LVL1131:
 10799              	.L1344:
 10800              		.cfi_restore_state
 10801              	.LBB676:
4125:fltk-1.3.4-1/png/png.c ****      {
 10802              		.loc 1 4125 0
 10803 0096 488B7C24 		movq	16(%rsp), %rdi
 10803      10
 10804 009b F6877702 		testb	$2, 631(%rdi)
 10804      000002
 10805 00a2 0F851C02 		jne	.L1403
 10805      0000
4136:fltk-1.3.4-1/png/png.c **** 
 10806              		.loc 1 4136 0
 10807 00a8 488B4424 		movq	16(%rsp), %rax
 10807      10
 10808 00ad 0FB690EB 		movzbl	747(%rax), %edx
 10808      020000
 10809              	.LVL1132:
4156:fltk-1.3.4-1/png/png.c ****         shift = (png_byte)(16U - sig_bit); /* shift == insignificant bits */
 10810              		.loc 1 4156 0
 10811 00b4 8D42FF   		leal	-1(%rdx), %eax
 10812 00b7 3C0E     		cmpb	$14, %al
 10813 00b9 0F872F02 		ja	.L1352
 10813      0000
 10814              	.L1406:
4157:fltk-1.3.4-1/png/png.c **** 
 10815              		.loc 1 4157 0
 10816 00bf B8100000 		movl	$16, %eax
 10816      00
 10817 00c4 29D0     		subl	%edx, %eax
 10818              	.LVL1133:
4162:fltk-1.3.4-1/png/png.c ****      {
 10819              		.loc 1 4162 0
 10820 00c6 488B5424 		movq	16(%rsp), %rdx
 10820      10
 10821              	.LVL1134:
 10822 00cb 8B923401 		movl	308(%rdx), %edx
 10822      0000
 10823 00d1 89542408 		movl	%edx, 8(%rsp)
 10824 00d5 81E20004 		andl	$67109888, %edx
 10824      0004
4168:fltk-1.3.4-1/png/png.c ****            shift = (16U - PNG_MAX_GAMMA_8);
 10825              		.loc 1 4168 0
 10826 00db 3C04     		cmpb	$4, %al
 10827 00dd 0F865A03 		jbe	.L1404
 10827      0000
 10828              	.L1380:
4172:fltk-1.3.4-1/png/png.c ****         shift = 8U; /* Guarantees at least one table! */
 10829              		.loc 1 4172 0
 10830 00e3 3C08     		cmpb	$8, %al
 10831 00e5 0F868F03 		jbe	.L1405
 10831      0000
 10832 00eb C7442418 		movl	$8, 24(%rsp)
 10832      08000000 
 10833 00f3 B8080000 		movl	$8, %eax
 10833      00
 10834              	.LVL1135:
 10835              	.L1355:
4175:fltk-1.3.4-1/png/png.c **** 
 10836              		.loc 1 4175 0
 10837 00f8 488B7C24 		movq	16(%rsp), %rdi
 10837      10
4182:fltk-1.3.4-1/png/png.c ****          png_build_16to8_table(png_ptr, &png_ptr->gamma_16_table, shift,
 10838              		.loc 1 4182 0
 10839 00fd 85D2     		testl	%edx, %edx
4175:fltk-1.3.4-1/png/png.c **** 
 10840              		.loc 1 4175 0
 10841 00ff 8987B002 		movl	%eax, 688(%rdi)
 10841      0000
4182:fltk-1.3.4-1/png/png.c ****          png_build_16to8_table(png_ptr, &png_ptr->gamma_16_table, shift,
 10842              		.loc 1 4182 0
 10843 0105 0F847D02 		je	.L1356
 10843      0000
 10844              	.L1373:
4184:fltk-1.3.4-1/png/png.c ****          png_ptr->screen_gamma) : PNG_FP_1);
 10845              		.loc 1 4184 0
 10846 010b 488B5424 		movq	16(%rsp), %rdx
 10846      10
4183:fltk-1.3.4-1/png/png.c ****          png_ptr->screen_gamma > 0 ? png_product2(png_ptr->colorspace.gamma,
 10847              		.loc 1 4183 0
 10848 0110 C7442408 		movl	$100000, 8(%rsp)
 10848      A0860100 
4184:fltk-1.3.4-1/png/png.c ****          png_ptr->screen_gamma) : PNG_FP_1);
 10849              		.loc 1 4184 0
 10850 0118 8B82B402 		movl	692(%rdx), %eax
 10850      0000
4183:fltk-1.3.4-1/png/png.c ****          png_ptr->screen_gamma > 0 ? png_product2(png_ptr->colorspace.gamma,
 10851              		.loc 1 4183 0
 10852 011e 85C0     		testl	%eax, %eax
 10853 0120 7E55     		jle	.L1357
 10854              	.LVL1136:
 10855              	.LBB677:
 10856              	.LBB678:
3417:fltk-1.3.4-1/png/png.c **** 
 10857              		.loc 1 3417 0 discriminator 1
 10858 0122 660FEFC9 		pxor	%xmm1, %xmm1
3415:fltk-1.3.4-1/png/png.c ****    r *= b;
 10859              		.loc 1 3415 0 discriminator 1
 10860 0126 660FEFC0 		pxor	%xmm0, %xmm0
3417:fltk-1.3.4-1/png/png.c **** 
 10861              		.loc 1 3417 0 discriminator 1
 10862 012a F20F2AC8 		cvtsi2sd	%eax, %xmm1
3415:fltk-1.3.4-1/png/png.c ****    r *= b;
 10863              		.loc 1 3415 0 discriminator 1
 10864 012e F20F2A82 		cvtsi2sd	1240(%rdx), %xmm0
 10864      D8040000 
 10865 0136 F20F5905 		mulsd	.LC7(%rip), %xmm0
 10865      00000000 
 10866              	.LVL1137:
3417:fltk-1.3.4-1/png/png.c **** 
 10867              		.loc 1 3417 0 discriminator 1
 10868 013e F20F59C1 		mulsd	%xmm1, %xmm0
 10869              	.LVL1138:
 10870 0142 F20F5805 		addsd	.LC9(%rip), %xmm0
 10870      00000000 
 10871 014a E8000000 		call	floor
 10871      00
 10872              	.LVL1139:
3419:fltk-1.3.4-1/png/png.c ****       return (png_fixed_point)r;
 10873              		.loc 1 3419 0 discriminator 1
 10874 014f F20F100D 		movsd	.LC22(%rip), %xmm1
 10874      00000000 
 10875 0157 660F2EC8 		ucomisd	%xmm0, %xmm1
 10876 015b 0F82EF02 		jb	.L1399
 10876      0000
3419:fltk-1.3.4-1/png/png.c ****       return (png_fixed_point)r;
 10877              		.loc 1 3419 0 is_stmt 0
 10878 0161 660F2E05 		ucomisd	.LC23(%rip), %xmm0
 10878      00000000 
 10879 0169 0F82E102 		jb	.L1399
 10879      0000
3420:fltk-1.3.4-1/png/png.c **** #    else
 10880              		.loc 1 3420 0 is_stmt 1
 10881 016f F20F2CC0 		cvttsd2si	%xmm0, %eax
 10882 0173 89442408 		movl	%eax, 8(%rsp)
 10883              	.LVL1140:
 10884              	.L1357:
 10885              	.LBE678:
 10886              	.LBE677:
 10887              	.LBB680:
 10888              	.LBB681:
3940:fltk-1.3.4-1/png/png.c ****    PNG_CONST unsigned int max = (1U << (16U - shift))-1U;
 10889              		.loc 1 3940 0 discriminator 4
 10890 0177 8B7C2418 		movl	24(%rsp), %edi
 10891 017b 41B80800 		movl	$8, %r8d
 10891      0000
 10892 0181 B8010000 		movl	$1, %eax
 10892      00
 10893 0186 89C2     		movl	%eax, %edx
3946:fltk-1.3.4-1/png/png.c **** 
 10894              		.loc 1 3946 0 discriminator 4
 10895 0188 488B6C24 		movq	16(%rsp), %rbp
 10895      10
3940:fltk-1.3.4-1/png/png.c ****    PNG_CONST unsigned int max = (1U << (16U - shift))-1U;
 10896              		.loc 1 3940 0 discriminator 4
 10897 018d 4129F8   		subl	%edi, %r8d
 10898 0190 4489C1   		movl	%r8d, %ecx
 10899 0193 4589C7   		movl	%r8d, %r15d
 10900 0196 D3E2     		sall	%cl, %edx
3941:fltk-1.3.4-1/png/png.c ****    unsigned int i;
 10901              		.loc 1 3941 0 discriminator 4
 10902 0198 B9100000 		movl	$16, %ecx
 10902      00
 10903 019d 29F9     		subl	%edi, %ecx
3946:fltk-1.3.4-1/png/png.c **** 
 10904              		.loc 1 3946 0 discriminator 4
 10905 019f 89D6     		movl	%edx, %esi
3940:fltk-1.3.4-1/png/png.c ****    PNG_CONST unsigned int max = (1U << (16U - shift))-1U;
 10906              		.loc 1 3940 0 discriminator 4
 10907 01a1 89D3     		movl	%edx, %ebx
 10908              	.LVL1141:
3941:fltk-1.3.4-1/png/png.c ****    unsigned int i;
 10909              		.loc 1 3941 0 discriminator 4
 10910 01a3 D3E0     		sall	%cl, %eax
3946:fltk-1.3.4-1/png/png.c **** 
 10911              		.loc 1 3946 0 discriminator 4
 10912 01a5 48C1E603 		salq	$3, %rsi
 10913 01a9 4889EF   		movq	%rbp, %rdi
3941:fltk-1.3.4-1/png/png.c ****    unsigned int i;
 10914              		.loc 1 3941 0 discriminator 4
 10915 01ac 83E801   		subl	$1, %eax
3940:fltk-1.3.4-1/png/png.c ****    PNG_CONST unsigned int max = (1U << (16U - shift))-1U;
 10916              		.loc 1 3940 0 discriminator 4
 10917 01af 8954241C 		movl	%edx, 28(%rsp)
 10918              	.LVL1142:
3941:fltk-1.3.4-1/png/png.c ****    unsigned int i;
 10919              		.loc 1 3941 0 discriminator 4
 10920 01b3 8944240C 		movl	%eax, 12(%rsp)
 10921              	.LVL1143:
3946:fltk-1.3.4-1/png/png.c **** 
 10922              		.loc 1 3946 0 discriminator 4
 10923 01b7 E8000000 		call	png_calloc
 10923      00
 10924              	.LVL1144:
 10925 01bc 4989C6   		movq	%rax, %r14
 10926 01bf 8D43FF   		leal	-1(%rbx), %eax
3945:fltk-1.3.4-1/png/png.c ****        (png_uint_16pp)png_calloc(png_ptr, num * (sizeof (png_uint_16p)));
 10927              		.loc 1 3945 0 discriminator 4
 10928 01c2 4C89B5C0 		movq	%r14, 704(%rbp)
 10928      020000
 10929              	.LVL1145:
 10930 01c9 4D89F4   		movq	%r14, %r12
 10931 01cc 498D5CC6 		leaq	8(%r14,%rax,8), %rbx
 10931      08
 10932              	.LVL1146:
 10933              		.p2align 4,,10
 10934 01d1 0F1F8000 		.p2align 3
 10934      000000
 10935              	.L1360:
3953:fltk-1.3.4-1/png/png.c ****           256 * (sizeof (png_uint_16)));
 10936              		.loc 1 3953 0
 10937 01d8 488B7C24 		movq	16(%rsp), %rdi
 10937      10
 10938 01dd BE000200 		movl	$512, %esi
 10938      00
 10939 01e2 4983C408 		addq	$8, %r12
 10940 01e6 E8000000 		call	png_malloc
 10940      00
 10941              	.LVL1147:
 10942 01eb 49894424 		movq	%rax, -8(%r12)
 10942      F8
3952:fltk-1.3.4-1/png/png.c ****       table[i] = (png_uint_16p)png_malloc(png_ptr,
 10943              		.loc 1 3952 0
 10944 01f0 4C39E3   		cmpq	%r12, %rbx
 10945 01f3 75E3     		jne	.L1360
 10946 01f5 0FB64C24 		movzbl	24(%rsp), %ecx
 10946      18
 10947 01fa 41BAFF00 		movl	$255, %r10d
 10947      0000
 10948 0200 4531ED   		xorl	%r13d, %r13d
 10949 0203 31DB     		xorl	%ebx, %ebx
 10950 0205 41D3EA   		shrl	%cl, %r10d
 10951 0208 4589D4   		movl	%r10d, %r12d
 10952 020b 0F1F4400 		.p2align 4,,10
 10952      00
 10953              		.p2align 3
 10954              	.L1363:
 10955              	.LVL1148:
 10956              	.LBB682:
 10957              	.LBB683:
 10958              	.LBB684:
 10959 0210 8B742408 		movl	8(%rsp), %esi
 10960 0214 418DBD80 		leal	128(%r13), %edi
 10960      000000
 10961              	.LBE684:
 10962              	.LBE683:
3976:fltk-1.3.4-1/png/png.c **** 
 10963              		.loc 1 3976 0
 10964 021b 4489ED   		movl	%r13d, %ebp
 10965              	.LVL1149:
 10966              	.LBB686:
 10967              	.LBB685:
 10968 021e E8000000 		call	png_gamma_16bit_correct.part.15
 10968      00
 10969              	.LVL1150:
 10970              	.LBE685:
 10971              	.LBE686:
3982:fltk-1.3.4-1/png/png.c **** 
 10972              		.loc 1 3982 0
 10973 0223 0FB7C0   		movzwl	%ax, %eax
 10974              	.LVL1151:
 10975 0226 0FAF4424 		imull	12(%rsp), %eax
 10975      0C
 10976              	.LVL1152:
 10977 022b 05008000 		addl	$32768, %eax
 10977      00
 10978 0230 4889C6   		movq	%rax, %rsi
 10979 0233 4889C1   		movq	%rax, %rcx
 10980 0236 48C1E60F 		salq	$15, %rsi
 10981 023a 48C1E11F 		salq	$31, %rcx
 10982 023e 4801F1   		addq	%rsi, %rcx
 10983 0241 488D3C01 		leaq	(%rcx,%rax), %rdi
 10984 0245 48C1EF2F 		shrq	$47, %rdi
 10985 0249 83C701   		addl	$1, %edi
 10986              	.LVL1153:
3984:fltk-1.3.4-1/png/png.c ****       {
 10987              		.loc 1 3984 0
 10988 024c 39FB     		cmpl	%edi, %ebx
 10989 024e 731B     		jnb	.L1361
 10990              		.p2align 4,,10
 10991              		.p2align 3
 10992              	.L1390:
3986:fltk-1.3.4-1/png/png.c ****          last++;
 10993              		.loc 1 3986 0
 10994 0250 89DE     		movl	%ebx, %esi
 10995 0252 89D8     		movl	%ebx, %eax
 10996 0254 4489F9   		movl	%r15d, %ecx
 10997 0257 4421E6   		andl	%r12d, %esi
 10998 025a D3E8     		shrl	%cl, %eax
3987:fltk-1.3.4-1/png/png.c ****       }
 10999              		.loc 1 3987 0
 11000 025c 83C301   		addl	$1, %ebx
 11001              	.LVL1154:
3986:fltk-1.3.4-1/png/png.c ****          last++;
 11002              		.loc 1 3986 0
 11003 025f 498B0CF6 		movq	(%r14,%rsi,8), %rcx
3984:fltk-1.3.4-1/png/png.c ****       {
 11004              		.loc 1 3984 0
 11005 0263 39DF     		cmpl	%ebx, %edi
3986:fltk-1.3.4-1/png/png.c ****          last++;
 11006              		.loc 1 3986 0
 11007 0265 66892C41 		movw	%bp, (%rcx,%rax,2)
3984:fltk-1.3.4-1/png/png.c ****       {
 11008              		.loc 1 3984 0
 11009 0269 75E5     		jne	.L1390
 11010              	.L1361:
 11011 026b 4181C501 		addl	$257, %r13d
 11011      010000
 11012              	.LBE682:
3973:fltk-1.3.4-1/png/png.c ****    {
 11013              		.loc 1 3973 0
 11014 0272 4181FDFF 		cmpl	$65535, %r13d
 11014      FF0000
 11015 0279 7595     		jne	.L1363
3992:fltk-1.3.4-1/png/png.c ****    {
 11016              		.loc 1 3992 0
 11017 027b 8B7C241C 		movl	28(%rsp), %edi
 11018              	.LVL1155:
 11019 027f 0FB64C24 		movzbl	24(%rsp), %ecx
 11019      18
 11020 0284 BEFF0000 		movl	$255, %esi
 11020      00
 11021 0289 C1E708   		sall	$8, %edi
 11022 028c D3FE     		sarl	%cl, %esi
 11023 028e 39FB     		cmpl	%edi, %ebx
 11024 0290 0F832801 		jnb	.L1365
 11024      0000
 11025 0296 662E0F1F 		.p2align 4,,10
 11025      84000000 
 11025      0000
 11026              		.p2align 3
 11027              	.L1389:
3994:fltk-1.3.4-1/png/png.c ****       last++;
 11028              		.loc 1 3994 0
 11029 02a0 89DA     		movl	%ebx, %edx
 11030 02a2 89D8     		movl	%ebx, %eax
 11031 02a4 4489F9   		movl	%r15d, %ecx
 11032 02a7 21F2     		andl	%esi, %edx
3995:fltk-1.3.4-1/png/png.c ****    }
 11033              		.loc 1 3995 0
 11034 02a9 83C301   		addl	$1, %ebx
 11035              	.LVL1156:
3994:fltk-1.3.4-1/png/png.c ****       last++;
 11036              		.loc 1 3994 0
 11037 02ac D3E8     		shrl	%cl, %eax
 11038 02ae 498B14D6 		movq	(%r14,%rdx,8), %rdx
 11039 02b2 B9FFFFFF 		movl	$-1, %ecx
 11039      FF
3992:fltk-1.3.4-1/png/png.c ****    {
 11040              		.loc 1 3992 0
 11041 02b7 39FB     		cmpl	%edi, %ebx
3994:fltk-1.3.4-1/png/png.c ****       last++;
 11042              		.loc 1 3994 0
 11043 02b9 66890C42 		movw	%cx, (%rdx,%rax,2)
3992:fltk-1.3.4-1/png/png.c ****    {
 11044              		.loc 1 3992 0
 11045 02bd 75E1     		jne	.L1389
 11046 02bf E9FA0000 		jmp	.L1365
 11046      00
 11047              	.LVL1157:
 11048              	.L1403:
 11049              	.LBE681:
 11050              	.LBE680:
4127:fltk-1.3.4-1/png/png.c **** 
 11051              		.loc 1 4127 0
 11052 02c4 0FB687E8 		movzbl	744(%rdi), %eax
 11052      020000
 11053              	.LVL1158:
4129:fltk-1.3.4-1/png/png.c ****            sig_bit = png_ptr->sig_bit.green;
 11054              		.loc 1 4129 0
 11055 02cb 0FB697E9 		movzbl	745(%rdi), %edx
 11055      020000
 11056 02d2 38D0     		cmpb	%dl, %al
 11057 02d4 0F43D0   		cmovnb	%eax, %edx
 11058              	.LVL1159:
4132:fltk-1.3.4-1/png/png.c ****            sig_bit = png_ptr->sig_bit.blue;
 11059              		.loc 1 4132 0
 11060 02d7 0FB687EA 		movzbl	746(%rdi), %eax
 11060      020000
 11061 02de 38D0     		cmpb	%dl, %al
 11062 02e0 0F43D0   		cmovnb	%eax, %edx
 11063              	.LVL1160:
4156:fltk-1.3.4-1/png/png.c ****         shift = (png_byte)(16U - sig_bit); /* shift == insignificant bits */
 11064              		.loc 1 4156 0
 11065 02e3 8D42FF   		leal	-1(%rdx), %eax
 11066 02e6 3C0E     		cmpb	$14, %al
 11067 02e8 0F86D1FD 		jbe	.L1406
 11067      FFFF
 11068              	.L1352:
 11069              	.LVL1161:
4162:fltk-1.3.4-1/png/png.c ****      {
 11070              		.loc 1 4162 0
 11071 02ee 488B4424 		movq	16(%rsp), %rax
 11071      10
 11072 02f3 8B803401 		movl	308(%rax), %eax
 11072      0000
 11073 02f9 89442408 		movl	%eax, 8(%rsp)
 11074 02fd 25000400 		andl	$67109888, %eax
 11074      04
 11075 0302 89442418 		movl	%eax, 24(%rsp)
 11076 0306 7471     		je	.L1372
 11077              	.LVL1162:
 11078              	.L1353:
4175:fltk-1.3.4-1/png/png.c **** 
 11079              		.loc 1 4175 0
 11080 0308 488B4424 		movq	16(%rsp), %rax
 11080      10
 11081 030d C7442418 		movl	$5, 24(%rsp)
 11081      05000000 
 11082 0315 C780B002 		movl	$5, 688(%rax)
 11082      00000500 
 11082      0000
 11083 031f E9E7FDFF 		jmp	.L1373
 11083      FF
 11084              	.LVL1163:
 11085              	.L1402:
 11086              	.LBE676:
4111:fltk-1.3.4-1/png/png.c ****             png_reciprocal(png_ptr->colorspace.gamma));
 11087              		.loc 1 4111 0
 11088 0324 488B5C24 		movq	16(%rsp), %rbx
 11088      10
 11089 0329 8BBBD804 		movl	1240(%rbx), %edi
 11089      0000
 11090 032f E8000000 		call	png_reciprocal
 11090      00
 11091              	.LVL1164:
 11092 0334 488DB3D0 		leaq	720(%rbx), %rsi
 11092      020000
 11093 033b 4889DF   		movq	%rbx, %rdi
 11094 033e 89C2     		movl	%eax, %edx
 11095 0340 E8000000 		call	png_build_8bit_table
 11095      00
 11096              	.LVL1165:
4115:fltk-1.3.4-1/png/png.c ****             png_ptr->colorspace.gamma/* Probably doing rgb_to_gray */);
 11097              		.loc 1 4115 0
 11098 0345 8BBBB402 		movl	692(%rbx), %edi
 11098      0000
4114:fltk-1.3.4-1/png/png.c ****             png_ptr->screen_gamma > 0 ?  png_reciprocal(png_ptr->screen_gamma) :
 11099              		.loc 1 4114 0
 11100 034b 85FF     		testl	%edi, %edi
 11101 034d 0F8E1701 		jle	.L1348
 11101      0000
4114:fltk-1.3.4-1/png/png.c ****             png_ptr->screen_gamma > 0 ?  png_reciprocal(png_ptr->screen_gamma) :
 11102              		.loc 1 4114 0 is_stmt 0 discriminator 1
 11103 0353 E8000000 		call	png_reciprocal
 11103      00
 11104              	.LVL1166:
 11105              	.L1349:
4114:fltk-1.3.4-1/png/png.c ****             png_ptr->screen_gamma > 0 ?  png_reciprocal(png_ptr->screen_gamma) :
 11106              		.loc 1 4114 0 discriminator 4
 11107 0358 488B7C24 		movq	16(%rsp), %rdi
 11107      10
4211:fltk-1.3.4-1/png/png.c **** #endif /* READ_GAMMA */
 11108              		.loc 1 4211 0 is_stmt 1 discriminator 4
 11109 035d 4883C428 		addq	$40, %rsp
 11110              		.cfi_remember_state
 11111              		.cfi_def_cfa_offset 56
4114:fltk-1.3.4-1/png/png.c ****             png_ptr->screen_gamma > 0 ?  png_reciprocal(png_ptr->screen_gamma) :
 11112              		.loc 1 4114 0 discriminator 4
 11113 0361 89C2     		movl	%eax, %edx
4211:fltk-1.3.4-1/png/png.c **** #endif /* READ_GAMMA */
 11114              		.loc 1 4211 0 discriminator 4
 11115 0363 5B       		popq	%rbx
 11116              		.cfi_def_cfa_offset 48
 11117 0364 5D       		popq	%rbp
 11118              		.cfi_def_cfa_offset 40
 11119 0365 415C     		popq	%r12
 11120              		.cfi_def_cfa_offset 32
 11121 0367 415D     		popq	%r13
 11122              		.cfi_def_cfa_offset 24
 11123 0369 415E     		popq	%r14
 11124              		.cfi_def_cfa_offset 16
 11125 036b 415F     		popq	%r15
 11126              		.cfi_def_cfa_offset 8
4114:fltk-1.3.4-1/png/png.c ****             png_ptr->screen_gamma > 0 ?  png_reciprocal(png_ptr->screen_gamma) :
 11127              		.loc 1 4114 0 discriminator 4
 11128 036d 488DB7C8 		leaq	712(%rdi), %rsi
 11128      020000
 11129 0374 E9000000 		jmp	png_build_8bit_table
 11129      00
 11130              	.LVL1167:
 11131              	.L1372:
 11132              		.cfi_restore_state
 11133              	.LBB688:
4175:fltk-1.3.4-1/png/png.c **** 
 11134              		.loc 1 4175 0
 11135 0379 488B4424 		movq	16(%rsp), %rax
 11135      10
 11136 037e C780B002 		movl	$0, 688(%rax)
 11136      00000000 
 11136      0000
 11137              	.LVL1168:
 11138              	.L1356:
4189:fltk-1.3.4-1/png/png.c ****          png_ptr->screen_gamma) : PNG_FP_1);
 11139              		.loc 1 4189 0
 11140 0388 488B5424 		movq	16(%rsp), %rdx
 11140      10
4188:fltk-1.3.4-1/png/png.c ****          png_ptr->screen_gamma > 0 ? png_reciprocal2(png_ptr->colorspace.gamma,
 11141              		.loc 1 4188 0
 11142 038d B8A08601 		movl	$100000, %eax
 11142      00
4189:fltk-1.3.4-1/png/png.c ****          png_ptr->screen_gamma) : PNG_FP_1);
 11143              		.loc 1 4189 0
 11144 0392 8BB2B402 		movl	692(%rdx), %esi
 11144      0000
4188:fltk-1.3.4-1/png/png.c ****          png_ptr->screen_gamma > 0 ? png_reciprocal2(png_ptr->colorspace.gamma,
 11145              		.loc 1 4188 0
 11146 0398 85F6     		testl	%esi, %esi
 11147 039a 7E0B     		jle	.L1368
4188:fltk-1.3.4-1/png/png.c ****          png_ptr->screen_gamma > 0 ? png_reciprocal2(png_ptr->colorspace.gamma,
 11148              		.loc 1 4188 0 is_stmt 0 discriminator 1
 11149 039c 8BBAD804 		movl	1240(%rdx), %edi
 11149      0000
 11150 03a2 E8000000 		call	png_reciprocal2
 11150      00
 11151              	.LVL1169:
 11152              	.L1368:
4188:fltk-1.3.4-1/png/png.c ****          png_ptr->screen_gamma > 0 ? png_reciprocal2(png_ptr->colorspace.gamma,
 11153              		.loc 1 4188 0 discriminator 4
 11154 03a7 488B7C24 		movq	16(%rsp), %rdi
 11154      10
 11155 03ac 8B542418 		movl	24(%rsp), %edx
 11156 03b0 89C1     		movl	%eax, %ecx
 11157 03b2 488DB7C0 		leaq	704(%rdi), %rsi
 11157      020000
 11158 03b9 E8000000 		call	png_build_16bit_table
 11158      00
 11159              	.LVL1170:
 11160              	.L1365:
4195:fltk-1.3.4-1/png/png.c ****      {
 11161              		.loc 1 4195 0 is_stmt 1
 11162 03be 488B4424 		movq	16(%rsp), %rax
 11162      10
 11163 03c3 F7803401 		testl	$6291584, 308(%rax)
 11163      00008000 
 11163      6000
 11164 03cd 0F84B4FC 		je	.L1341
 11164      FFFF
4197:fltk-1.3.4-1/png/png.c ****             png_reciprocal(png_ptr->colorspace.gamma));
 11165              		.loc 1 4197 0
 11166 03d3 8BB8D804 		movl	1240(%rax), %edi
 11166      0000
 11167 03d9 4889C3   		movq	%rax, %rbx
 11168 03dc E8000000 		call	png_reciprocal
 11168      00
 11169              	.LVL1171:
 11170 03e1 8B542418 		movl	24(%rsp), %edx
 11171 03e5 488DB3E0 		leaq	736(%rbx), %rsi
 11171      020000
 11172 03ec 4889DF   		movq	%rbx, %rdi
 11173 03ef 89C1     		movl	%eax, %ecx
 11174 03f1 E8000000 		call	png_build_16bit_table
 11174      00
 11175              	.LVL1172:
4205:fltk-1.3.4-1/png/png.c ****             png_ptr->colorspace.gamma/* Probably doing rgb_to_gray */);
 11176              		.loc 1 4205 0
 11177 03f6 8BBBB402 		movl	692(%rbx), %edi
 11177      0000
4204:fltk-1.3.4-1/png/png.c ****             png_ptr->screen_gamma > 0 ? png_reciprocal(png_ptr->screen_gamma) :
 11178              		.loc 1 4204 0
 11179 03fc 85FF     		testl	%edi, %edi
 11180 03fe 7E5D     		jle	.L1370
4204:fltk-1.3.4-1/png/png.c ****             png_ptr->screen_gamma > 0 ? png_reciprocal(png_ptr->screen_gamma) :
 11181              		.loc 1 4204 0 is_stmt 0 discriminator 1
 11182 0400 E8000000 		call	png_reciprocal
 11182      00
 11183              	.LVL1173:
 11184              	.L1371:
4204:fltk-1.3.4-1/png/png.c ****             png_ptr->screen_gamma > 0 ? png_reciprocal(png_ptr->screen_gamma) :
 11185              		.loc 1 4204 0 discriminator 4
 11186 0405 488B7C24 		movq	16(%rsp), %rdi
 11186      10
 11187 040a 8B542418 		movl	24(%rsp), %edx
 11188              	.LBE688:
4211:fltk-1.3.4-1/png/png.c **** #endif /* READ_GAMMA */
 11189              		.loc 1 4211 0 is_stmt 1 discriminator 4
 11190 040e 4883C428 		addq	$40, %rsp
 11191              		.cfi_remember_state
 11192              		.cfi_def_cfa_offset 56
 11193 0412 5B       		popq	%rbx
 11194              		.cfi_def_cfa_offset 48
 11195 0413 5D       		popq	%rbp
 11196              		.cfi_def_cfa_offset 40
 11197 0414 415C     		popq	%r12
 11198              		.cfi_def_cfa_offset 32
 11199 0416 415D     		popq	%r13
 11200              		.cfi_def_cfa_offset 24
 11201 0418 415E     		popq	%r14
 11202              		.cfi_def_cfa_offset 16
 11203 041a 415F     		popq	%r15
 11204              		.cfi_def_cfa_offset 8
 11205              	.LBB689:
4204:fltk-1.3.4-1/png/png.c ****             png_ptr->screen_gamma > 0 ? png_reciprocal(png_ptr->screen_gamma) :
 11206              		.loc 1 4204 0 discriminator 4
 11207 041c 488DB7D8 		leaq	728(%rdi), %rsi
 11207      020000
 11208 0423 89C1     		movl	%eax, %ecx
 11209 0425 E9000000 		jmp	png_build_16bit_table
 11209      00
 11210              	.LVL1174:
 11211              	.L1401:
 11212              		.cfi_restore_state
 11213              	.LBE689:
4094:fltk-1.3.4-1/png/png.c ****   {
 11214              		.loc 1 4094 0 discriminator 1
 11215 042a 4883BFC0 		cmpq	$0, 704(%rdi)
 11215      02000000 
 11216 0432 0F85EBFB 		jne	.L1342
 11216      FFFF
 11217 0438 E900FCFF 		jmp	.L1343
 11217      FF
 11218              	.LVL1175:
 11219              	.L1404:
 11220              	.LBB690:
4168:fltk-1.3.4-1/png/png.c ****            shift = (16U - PNG_MAX_GAMMA_8);
 11221              		.loc 1 4168 0
 11222 043d 85D2     		testl	%edx, %edx
 11223 043f 0F849EFC 		je	.L1380
 11223      FFFF
 11224 0445 E9BEFEFF 		jmp	.L1353
 11224      FF
 11225              	.LVL1176:
 11226 044a 660F1F44 		.p2align 4,,10
 11226      0000
 11227              		.p2align 3
 11228              	.L1399:
 11229              	.LBB687:
 11230              	.LBB679:
3428:fltk-1.3.4-1/png/png.c **** }
 11231              		.loc 1 3428 0
 11232 0450 C7442408 		movl	$0, 8(%rsp)
 11232      00000000 
 11233 0458 E91AFDFF 		jmp	.L1357
 11233      FF
 11234              	.LVL1177:
 11235              	.L1370:
 11236              	.LBE679:
 11237              	.LBE687:
4204:fltk-1.3.4-1/png/png.c ****             png_ptr->screen_gamma > 0 ? png_reciprocal(png_ptr->screen_gamma) :
 11238              		.loc 1 4204 0 discriminator 2
 11239 045d 488B4424 		movq	16(%rsp), %rax
 11239      10
 11240 0462 8B80D804 		movl	1240(%rax), %eax
 11240      0000
 11241 0468 EB9B     		jmp	.L1371
 11242              	.L1348:
 11243              	.LBE690:
4114:fltk-1.3.4-1/png/png.c ****             png_ptr->screen_gamma > 0 ?  png_reciprocal(png_ptr->screen_gamma) :
 11244              		.loc 1 4114 0 discriminator 2
 11245 046a 488B4424 		movq	16(%rsp), %rax
 11245      10
 11246 046f 8B80D804 		movl	1240(%rax), %eax
 11246      0000
 11247 0475 E9DEFEFF 		jmp	.L1349
 11247      FF
 11248              	.LVL1178:
 11249              	.L1405:
 11250 047a 0FB6C0   		movzbl	%al, %eax
 11251 047d 89442418 		movl	%eax, 24(%rsp)
 11252              	.LVL1179:
 11253 0481 E972FCFF 		jmp	.L1355
 11253      FF
 11254              		.cfi_endproc
 11255              	.LFE131:
 11257              		.section	.text.unlikely.png_build_gamma_table
 11258              	.LCOLDE165:
 11259              		.section	.text.png_build_gamma_table
 11260              	.LHOTE165:
 11261              		.section	.text.unlikely.png_set_option,"ax",@progbits
 11262              	.LCOLDB166:
 11263              		.section	.text.png_set_option,"ax",@progbits
 11264              	.LHOTB166:
 11265              		.p2align 4,,15
 11266              		.globl	png_set_option
 11268              	png_set_option:
 11269              	.LFB132:
4218:fltk-1.3.4-1/png/png.c ****    if (png_ptr != NULL && option >= 0 && option < PNG_OPTION_NEXT &&
 11270              		.loc 1 4218 0
 11271              		.cfi_startproc
 11272              	.LVL1180:
4219:fltk-1.3.4-1/png/png.c ****       (option & 1) == 0)
 11273              		.loc 1 4219 0
 11274 0000 4885FF   		testq	%rdi, %rdi
4231:fltk-1.3.4-1/png/png.c **** }
 11275              		.loc 1 4231 0
 11276 0003 B8010000 		movl	$1, %eax
 11276      00
4219:fltk-1.3.4-1/png/png.c ****       (option & 1) == 0)
 11277              		.loc 1 4219 0
 11278 0008 743E     		je	.L1408
 11279 000a 83FE05   		cmpl	$5, %esi
 11280 000d 7739     		ja	.L1408
4219:fltk-1.3.4-1/png/png.c ****       (option & 1) == 0)
 11281              		.loc 1 4219 0 is_stmt 0 discriminator 2
 11282 000f 40F6C601 		testb	$1, %sil
 11283 0013 7533     		jne	.L1408
 11284              	.LBB691:
4222:fltk-1.3.4-1/png/png.c ****       int setting = (2 + (onoff != 0)) << option;
 11285              		.loc 1 4222 0 is_stmt 1
 11286 0015 89F1     		movl	%esi, %ecx
 11287 0017 B8030000 		movl	$3, %eax
 11287      00
 11288 001c D3E0     		sall	%cl, %eax
 11289              	.LVL1181:
4223:fltk-1.3.4-1/png/png.c ****       int current = png_ptr->options;
 11290              		.loc 1 4223 0
 11291 001e 85D2     		testl	%edx, %edx
 11292 0020 89C1     		movl	%eax, %ecx
 11293 0022 742C     		je	.L1419
 11294              	.LVL1182:
 11295              	.L1409:
4224:fltk-1.3.4-1/png/png.c **** 
 11296              		.loc 1 4224 0 discriminator 4
 11297 0024 0FB697C8 		movzbl	968(%rdi), %edx
 11297      030000
 11298              	.LVL1183:
4226:fltk-1.3.4-1/png/png.c **** 
 11299              		.loc 1 4226 0 discriminator 4
 11300 002b 4189C0   		movl	%eax, %r8d
 11301 002e 41F7D0   		notl	%r8d
 11302 0031 4121D0   		andl	%edx, %r8d
4228:fltk-1.3.4-1/png/png.c ****    }
 11303              		.loc 1 4228 0 discriminator 4
 11304 0034 21D0     		andl	%edx, %eax
 11305              	.LVL1184:
4226:fltk-1.3.4-1/png/png.c **** 
 11306              		.loc 1 4226 0 discriminator 4
 11307 0036 4409C1   		orl	%r8d, %ecx
 11308 0039 888FC803 		movb	%cl, 968(%rdi)
 11308      0000
4228:fltk-1.3.4-1/png/png.c ****    }
 11309              		.loc 1 4228 0 discriminator 4
 11310 003f 89F1     		movl	%esi, %ecx
 11311 0041 D3F8     		sarl	%cl, %eax
 11312 0043 C3       		ret
 11313              	.LVL1185:
 11314              		.p2align 4,,10
 11315 0044 0F1F4000 		.p2align 3
 11316              	.L1408:
 11317              	.LBE691:
4232:fltk-1.3.4-1/png/png.c **** #endif
 11318              		.loc 1 4232 0
 11319 0048 F3C3     		rep ret
 11320              	.LVL1186:
 11321 004a 660F1F44 		.p2align 4,,10
 11321      0000
 11322              		.p2align 3
 11323              	.L1419:
 11324 0050 89F1     		movl	%esi, %ecx
 11325 0052 BA020000 		movl	$2, %edx
 11325      00
 11326              	.LVL1187:
 11327 0057 D3E2     		sall	%cl, %edx
 11328 0059 89D1     		movl	%edx, %ecx
 11329 005b EBC7     		jmp	.L1409
 11330              		.cfi_endproc
 11331              	.LFE132:
 11333              		.section	.text.unlikely.png_set_option
 11334              	.LCOLDE166:
 11335              		.section	.text.png_set_option
 11336              	.LHOTE166:
 11337              		.section	.text.unlikely.png_image_free,"ax",@progbits
 11338              	.LCOLDB167:
 11339              		.section	.text.png_image_free,"ax",@progbits
 11340              	.LHOTB167:
 11341              		.p2align 4,,15
 11342              		.globl	png_image_free
 11344              	png_image_free:
 11345              	.LFB134:
4465:fltk-1.3.4-1/png/png.c **** 
4466:fltk-1.3.4-1/png/png.c **** void PNGAPI
4467:fltk-1.3.4-1/png/png.c **** png_image_free(png_imagep image)
4468:fltk-1.3.4-1/png/png.c **** {
 11346              		.loc 1 4468 0
 11347              		.cfi_startproc
 11348              	.LVL1188:
4469:fltk-1.3.4-1/png/png.c ****    /* Safely call the real function, but only if doing so is safe at this point
4470:fltk-1.3.4-1/png/png.c ****     * (if not inside an error handling context).  Otherwise assume
4471:fltk-1.3.4-1/png/png.c ****     * png_safe_execute will call this API after the return.
4472:fltk-1.3.4-1/png/png.c ****     */
4473:fltk-1.3.4-1/png/png.c ****    if (image != NULL && image->opaque != NULL &&
 11349              		.loc 1 4473 0
 11350 0000 4885FF   		testq	%rdi, %rdi
 11351 0003 740F     		je	.L1430
 11352              		.loc 1 4473 0 is_stmt 0 discriminator 1
 11353 0005 488B07   		movq	(%rdi), %rax
 11354 0008 4885C0   		testq	%rax, %rax
 11355 000b 7407     		je	.L1430
 11356              		.loc 1 4473 0 discriminator 2
 11357 000d 48837810 		cmpq	$0, 16(%rax)
 11357      00
 11358 0012 7404     		je	.L1431
 11359              	.L1430:
4474:fltk-1.3.4-1/png/png.c ****       image->opaque->error_buf == NULL)
4475:fltk-1.3.4-1/png/png.c ****    {
4476:fltk-1.3.4-1/png/png.c ****       /* Ignore errors here: */
4477:fltk-1.3.4-1/png/png.c ****       (void)png_safe_execute(image, png_image_free_function, image);
4478:fltk-1.3.4-1/png/png.c ****       image->opaque = NULL;
4479:fltk-1.3.4-1/png/png.c ****    }
4480:fltk-1.3.4-1/png/png.c **** }
 11360              		.loc 1 4480 0 is_stmt 1
 11361 0014 C3       		ret
 11362              		.p2align 4,,10
 11363 0015 0F1F00   		.p2align 3
 11364              	.L1431:
4468:fltk-1.3.4-1/png/png.c ****    /* Safely call the real function, but only if doing so is safe at this point
 11365              		.loc 1 4468 0
 11366 0018 53       		pushq	%rbx
 11367              		.cfi_def_cfa_offset 16
 11368              		.cfi_offset 3, -16
 11369              	.LBB694:
 11370              	.LBB695:
4477:fltk-1.3.4-1/png/png.c ****       image->opaque = NULL;
 11371              		.loc 1 4477 0
 11372 0019 4889FA   		movq	%rdi, %rdx
 11373 001c 4889FB   		movq	%rdi, %rbx
 11374              	.LVL1189:
 11375 001f BE000000 		movl	$png_image_free_function, %esi
 11375      00
 11376 0024 E8000000 		call	png_safe_execute
 11376      00
 11377              	.LVL1190:
4478:fltk-1.3.4-1/png/png.c ****    }
 11378              		.loc 1 4478 0
 11379 0029 48C70300 		movq	$0, (%rbx)
 11379      000000
 11380              	.LBE695:
 11381              	.LBE694:
 11382              		.loc 1 4480 0
 11383 0030 5B       		popq	%rbx
 11384              		.cfi_restore 3
 11385              		.cfi_def_cfa_offset 8
 11386              	.LVL1191:
 11387 0031 C3       		ret
 11388              		.cfi_endproc
 11389              	.LFE134:
 11391              		.section	.text.unlikely.png_image_free
 11392              	.LCOLDE167:
 11393              		.section	.text.png_image_free
 11394              	.LHOTE167:
 11395              		.section	.text.unlikely.png_image_error,"ax",@progbits
 11396              	.LCOLDB168:
 11397              		.section	.text.png_image_error,"ax",@progbits
 11398              	.LHOTB168:
 11399              		.p2align 4,,15
 11400              		.globl	png_image_error
 11402              	png_image_error:
 11403              	.LFB135:
4481:fltk-1.3.4-1/png/png.c **** 
4482:fltk-1.3.4-1/png/png.c **** int /* PRIVATE */
4483:fltk-1.3.4-1/png/png.c **** png_image_error(png_imagep image, png_const_charp error_message)
4484:fltk-1.3.4-1/png/png.c **** {
 11404              		.loc 1 4484 0
 11405              		.cfi_startproc
 11406              	.LVL1192:
 11407 0000 53       		pushq	%rbx
 11408              		.cfi_def_cfa_offset 16
 11409              		.cfi_offset 3, -16
 11410              		.loc 1 4484 0
 11411 0001 4889FB   		movq	%rdi, %rbx
4485:fltk-1.3.4-1/png/png.c ****    /* Utility to log an error. */
4486:fltk-1.3.4-1/png/png.c ****    png_safecat(image->message, (sizeof image->message), 0, error_message);
 11412              		.loc 1 4486 0
 11413 0004 488D7F24 		leaq	36(%rdi), %rdi
 11414              	.LVL1193:
4484:fltk-1.3.4-1/png/png.c ****    /* Utility to log an error. */
 11415              		.loc 1 4484 0
 11416 0008 4889F1   		movq	%rsi, %rcx
 11417              		.loc 1 4486 0
 11418 000b 31D2     		xorl	%edx, %edx
 11419 000d BE400000 		movl	$64, %esi
 11419      00
 11420              	.LVL1194:
 11421 0012 E8000000 		call	png_safecat
 11421      00
 11422              	.LVL1195:
4487:fltk-1.3.4-1/png/png.c ****    image->warning_or_error |= PNG_IMAGE_ERROR;
 11423              		.loc 1 4487 0
 11424 0017 834B2002 		orl	$2, 32(%rbx)
4488:fltk-1.3.4-1/png/png.c ****    png_image_free(image);
 11425              		.loc 1 4488 0
 11426 001b 4889DF   		movq	%rbx, %rdi
 11427 001e E8000000 		call	png_image_free
 11427      00
 11428              	.LVL1196:
4489:fltk-1.3.4-1/png/png.c ****    return 0;
4490:fltk-1.3.4-1/png/png.c **** }
 11429              		.loc 1 4490 0
 11430 0023 31C0     		xorl	%eax, %eax
 11431 0025 5B       		popq	%rbx
 11432              		.cfi_def_cfa_offset 8
 11433              	.LVL1197:
 11434 0026 C3       		ret
 11435              		.cfi_endproc
 11436              	.LFE135:
 11438              		.section	.text.unlikely.png_image_error
 11439              	.LCOLDE168:
 11440              		.section	.text.png_image_error
 11441              	.LHOTE168:
 11442              		.section	.rodata.CSWTCH.109,"a",@progbits
 11443              		.align 32
 11446              	CSWTCH.109:
 11447 0000 FF000000 		.long	255
 11448 0004 55000000 		.long	85
 11449 0008 00000000 		.long	0
 11450 000c 11000000 		.long	17
 11451 0010 00000000 		.long	0
 11452 0014 00000000 		.long	0
 11453 0018 00000000 		.long	0
 11454 001c 01000000 		.long	1
 11455              		.section	.rodata.CSWTCH.108,"a",@progbits
 11456              		.align 32
 11459              	CSWTCH.108:
 11460 0000 02000000 		.long	2
 11461 0004 04000000 		.long	4
 11462 0008 00000000 		.long	0
 11463 000c 10000000 		.long	16
 11464 0010 00000000 		.long	0
 11465 0014 00000000 		.long	0
 11466 0018 00000000 		.long	0
 11467 001c 00010000 		.long	256
 11468              		.section	.rodata.short_months.6841,"a",@progbits
 11469              		.align 32
 11472              	short_months.6841:
 11473 0000 4A616E00 		.string	"Jan"
 11474 0004 46656200 		.string	"Feb"
 11475 0008 4D617200 		.string	"Mar"
 11476 000c 41707200 		.string	"Apr"
 11477 0010 4D617900 		.string	"May"
 11478 0014 4A756E00 		.string	"Jun"
 11479 0018 4A756C00 		.string	"Jul"
 11480 001c 41756700 		.string	"Aug"
 11481 0020 53657000 		.string	"Sep"
 11482 0024 4F637400 		.string	"Oct"
 11483 0028 4E6F7600 		.string	"Nov"
 11484 002c 44656300 		.string	"Dec"
 11485              		.globl	png_sRGB_delta
 11486              		.section	.rodata.png_sRGB_delta,"a",@progbits
 11487              		.align 32
 11490              	png_sRGB_delta:
 11491 0000 CF       		.byte	-49
 11492 0001 C9       		.byte	-55
 11493 0002 9E       		.byte	-98
 11494 0003 81       		.byte	-127
 11495 0004 71       		.byte	113
 11496 0005 64       		.byte	100
 11497 0006 5A       		.byte	90
 11498 0007 52       		.byte	82
 11499 0008 4D       		.byte	77
 11500 0009 48       		.byte	72
 11501 000a 44       		.byte	68
 11502 000b 40       		.byte	64
 11503 000c 3D       		.byte	61
 11504 000d 3B       		.byte	59
 11505 000e 38       		.byte	56
 11506 000f 36       		.byte	54
 11507 0010 34       		.byte	52
 11508 0011 32       		.byte	50
 11509 0012 31       		.byte	49
 11510 0013 2F       		.byte	47
 11511 0014 2E       		.byte	46
 11512 0015 2D       		.byte	45
 11513 0016 2B       		.byte	43
 11514 0017 2A       		.byte	42
 11515 0018 29       		.byte	41
 11516 0019 28       		.byte	40
 11517 001a 27       		.byte	39
 11518 001b 27       		.byte	39
 11519 001c 26       		.byte	38
 11520 001d 25       		.byte	37
 11521 001e 24       		.byte	36
 11522 001f 24       		.byte	36
 11523 0020 23       		.byte	35
 11524 0021 22       		.byte	34
 11525 0022 22       		.byte	34
 11526 0023 21       		.byte	33
 11527 0024 21       		.byte	33
 11528 0025 20       		.byte	32
 11529 0026 20       		.byte	32
 11530 0027 1F       		.byte	31
 11531 0028 1F       		.byte	31
 11532 0029 1E       		.byte	30
 11533 002a 1E       		.byte	30
 11534 002b 1E       		.byte	30
 11535 002c 1D       		.byte	29
 11536 002d 1D       		.byte	29
 11537 002e 1C       		.byte	28
 11538 002f 1C       		.byte	28
 11539 0030 1C       		.byte	28
 11540 0031 1B       		.byte	27
 11541 0032 1B       		.byte	27
 11542 0033 1B       		.byte	27
 11543 0034 1B       		.byte	27
 11544 0035 1A       		.byte	26
 11545 0036 1A       		.byte	26
 11546 0037 1A       		.byte	26
 11547 0038 19       		.byte	25
 11548 0039 19       		.byte	25
 11549 003a 19       		.byte	25
 11550 003b 19       		.byte	25
 11551 003c 18       		.byte	24
 11552 003d 18       		.byte	24
 11553 003e 18       		.byte	24
 11554 003f 18       		.byte	24
 11555 0040 17       		.byte	23
 11556 0041 17       		.byte	23
 11557 0042 17       		.byte	23
 11558 0043 17       		.byte	23
 11559 0044 17       		.byte	23
 11560 0045 16       		.byte	22
 11561 0046 16       		.byte	22
 11562 0047 16       		.byte	22
 11563 0048 16       		.byte	22
 11564 0049 16       		.byte	22
 11565 004a 16       		.byte	22
 11566 004b 15       		.byte	21
 11567 004c 15       		.byte	21
 11568 004d 15       		.byte	21
 11569 004e 15       		.byte	21
 11570 004f 15       		.byte	21
 11571 0050 15       		.byte	21
 11572 0051 14       		.byte	20
 11573 0052 14       		.byte	20
 11574 0053 14       		.byte	20
 11575 0054 14       		.byte	20
 11576 0055 14       		.byte	20
 11577 0056 14       		.byte	20
 11578 0057 14       		.byte	20
 11579 0058 14       		.byte	20
 11580 0059 13       		.byte	19
 11581 005a 13       		.byte	19
 11582 005b 13       		.byte	19
 11583 005c 13       		.byte	19
 11584 005d 13       		.byte	19
 11585 005e 13       		.byte	19
 11586 005f 13       		.byte	19
 11587 0060 13       		.byte	19
 11588 0061 12       		.byte	18
 11589 0062 12       		.byte	18
 11590 0063 12       		.byte	18
 11591 0064 12       		.byte	18
 11592 0065 12       		.byte	18
 11593 0066 12       		.byte	18
 11594 0067 12       		.byte	18
 11595 0068 12       		.byte	18
 11596 0069 12       		.byte	18
 11597 006a 12       		.byte	18
 11598 006b 11       		.byte	17
 11599 006c 11       		.byte	17
 11600 006d 11       		.byte	17
 11601 006e 11       		.byte	17
 11602 006f 11       		.byte	17
 11603 0070 11       		.byte	17
 11604 0071 11       		.byte	17
 11605 0072 11       		.byte	17
 11606 0073 11       		.byte	17
 11607 0074 11       		.byte	17
 11608 0075 11       		.byte	17
 11609 0076 10       		.byte	16
 11610 0077 10       		.byte	16
 11611 0078 10       		.byte	16
 11612 0079 10       		.byte	16
 11613 007a 10       		.byte	16
 11614 007b 10       		.byte	16
 11615 007c 10       		.byte	16
 11616 007d 10       		.byte	16
 11617 007e 10       		.byte	16
 11618 007f 10       		.byte	16
 11619 0080 10       		.byte	16
 11620 0081 10       		.byte	16
 11621 0082 10       		.byte	16
 11622 0083 10       		.byte	16
 11623 0084 0F       		.byte	15
 11624 0085 0F       		.byte	15
 11625 0086 0F       		.byte	15
 11626 0087 0F       		.byte	15
 11627 0088 0F       		.byte	15
 11628 0089 0F       		.byte	15
 11629 008a 0F       		.byte	15
 11630 008b 0F       		.byte	15
 11631 008c 0F       		.byte	15
 11632 008d 0F       		.byte	15
 11633 008e 0F       		.byte	15
 11634 008f 0F       		.byte	15
 11635 0090 0F       		.byte	15
 11636 0091 0F       		.byte	15
 11637 0092 0F       		.byte	15
 11638 0093 0F       		.byte	15
 11639 0094 0E       		.byte	14
 11640 0095 0E       		.byte	14
 11641 0096 0E       		.byte	14
 11642 0097 0E       		.byte	14
 11643 0098 0E       		.byte	14
 11644 0099 0E       		.byte	14
 11645 009a 0E       		.byte	14
 11646 009b 0E       		.byte	14
 11647 009c 0E       		.byte	14
 11648 009d 0E       		.byte	14
 11649 009e 0E       		.byte	14
 11650 009f 0E       		.byte	14
 11651 00a0 0E       		.byte	14
 11652 00a1 0E       		.byte	14
 11653 00a2 0E       		.byte	14
 11654 00a3 0E       		.byte	14
 11655 00a4 0E       		.byte	14
 11656 00a5 0E       		.byte	14
 11657 00a6 0E       		.byte	14
 11658 00a7 0D       		.byte	13
 11659 00a8 0D       		.byte	13
 11660 00a9 0D       		.byte	13
 11661 00aa 0D       		.byte	13
 11662 00ab 0D       		.byte	13
 11663 00ac 0D       		.byte	13
 11664 00ad 0D       		.byte	13
 11665 00ae 0D       		.byte	13
 11666 00af 0D       		.byte	13
 11667 00b0 0D       		.byte	13
 11668 00b1 0D       		.byte	13
 11669 00b2 0D       		.byte	13
 11670 00b3 0D       		.byte	13
 11671 00b4 0D       		.byte	13
 11672 00b5 0D       		.byte	13
 11673 00b6 0D       		.byte	13
 11674 00b7 0D       		.byte	13
 11675 00b8 0D       		.byte	13
 11676 00b9 0D       		.byte	13
 11677 00ba 0D       		.byte	13
 11678 00bb 0D       		.byte	13
 11679 00bc 0D       		.byte	13
 11680 00bd 0D       		.byte	13
 11681 00be 0C       		.byte	12
 11682 00bf 0C       		.byte	12
 11683 00c0 0C       		.byte	12
 11684 00c1 0C       		.byte	12
 11685 00c2 0C       		.byte	12
 11686 00c3 0C       		.byte	12
 11687 00c4 0C       		.byte	12
 11688 00c5 0C       		.byte	12
 11689 00c6 0C       		.byte	12
 11690 00c7 0C       		.byte	12
 11691 00c8 0C       		.byte	12
 11692 00c9 0C       		.byte	12
 11693 00ca 0C       		.byte	12
 11694 00cb 0C       		.byte	12
 11695 00cc 0C       		.byte	12
 11696 00cd 0C       		.byte	12
 11697 00ce 0C       		.byte	12
 11698 00cf 0C       		.byte	12
 11699 00d0 0C       		.byte	12
 11700 00d1 0C       		.byte	12
 11701 00d2 0C       		.byte	12
 11702 00d3 0C       		.byte	12
 11703 00d4 0C       		.byte	12
 11704 00d5 0C       		.byte	12
 11705 00d6 0C       		.byte	12
 11706 00d7 0C       		.byte	12
 11707 00d8 0C       		.byte	12
 11708 00d9 0C       		.byte	12
 11709 00da 0C       		.byte	12
 11710 00db 0C       		.byte	12
 11711 00dc 0B       		.byte	11
 11712 00dd 0B       		.byte	11
 11713 00de 0B       		.byte	11
 11714 00df 0B       		.byte	11
 11715 00e0 0B       		.byte	11
 11716 00e1 0B       		.byte	11
 11717 00e2 0B       		.byte	11
 11718 00e3 0B       		.byte	11
 11719 00e4 0B       		.byte	11
 11720 00e5 0B       		.byte	11
 11721 00e6 0B       		.byte	11
 11722 00e7 0B       		.byte	11
 11723 00e8 0B       		.byte	11
 11724 00e9 0B       		.byte	11
 11725 00ea 0B       		.byte	11
 11726 00eb 0B       		.byte	11
 11727 00ec 0B       		.byte	11
 11728 00ed 0B       		.byte	11
 11729 00ee 0B       		.byte	11
 11730 00ef 0B       		.byte	11
 11731 00f0 0B       		.byte	11
 11732 00f1 0B       		.byte	11
 11733 00f2 0B       		.byte	11
 11734 00f3 0B       		.byte	11
 11735 00f4 0B       		.byte	11
 11736 00f5 0B       		.byte	11
 11737 00f6 0B       		.byte	11
 11738 00f7 0B       		.byte	11
 11739 00f8 0B       		.byte	11
 11740 00f9 0B       		.byte	11
 11741 00fa 0B       		.byte	11
 11742 00fb 0B       		.byte	11
 11743 00fc 0B       		.byte	11
 11744 00fd 0B       		.byte	11
 11745 00fe 0B       		.byte	11
 11746 00ff 0B       		.byte	11
 11747 0100 0B       		.byte	11
 11748 0101 0A       		.byte	10
 11749 0102 0A       		.byte	10
 11750 0103 0A       		.byte	10
 11751 0104 0A       		.byte	10
 11752 0105 0A       		.byte	10
 11753 0106 0A       		.byte	10
 11754 0107 0A       		.byte	10
 11755 0108 0A       		.byte	10
 11756 0109 0A       		.byte	10
 11757 010a 0A       		.byte	10
 11758 010b 0A       		.byte	10
 11759 010c 0A       		.byte	10
 11760 010d 0A       		.byte	10
 11761 010e 0A       		.byte	10
 11762 010f 0A       		.byte	10
 11763 0110 0A       		.byte	10
 11764 0111 0A       		.byte	10
 11765 0112 0A       		.byte	10
 11766 0113 0A       		.byte	10
 11767 0114 0A       		.byte	10
 11768 0115 0A       		.byte	10
 11769 0116 0A       		.byte	10
 11770 0117 0A       		.byte	10
 11771 0118 0A       		.byte	10
 11772 0119 0A       		.byte	10
 11773 011a 0A       		.byte	10
 11774 011b 0A       		.byte	10
 11775 011c 0A       		.byte	10
 11776 011d 0A       		.byte	10
 11777 011e 0A       		.byte	10
 11778 011f 0A       		.byte	10
 11779 0120 0A       		.byte	10
 11780 0121 0A       		.byte	10
 11781 0122 0A       		.byte	10
 11782 0123 0A       		.byte	10
 11783 0124 0A       		.byte	10
 11784 0125 0A       		.byte	10
 11785 0126 0A       		.byte	10
 11786 0127 0A       		.byte	10
 11787 0128 0A       		.byte	10
 11788 0129 0A       		.byte	10
 11789 012a 0A       		.byte	10
 11790 012b 0A       		.byte	10
 11791 012c 0A       		.byte	10
 11792 012d 0A       		.byte	10
 11793 012e 0A       		.byte	10
 11794 012f 0A       		.byte	10
 11795 0130 0A       		.byte	10
 11796 0131 09       		.byte	9
 11797 0132 09       		.byte	9
 11798 0133 09       		.byte	9
 11799 0134 09       		.byte	9
 11800 0135 09       		.byte	9
 11801 0136 09       		.byte	9
 11802 0137 09       		.byte	9
 11803 0138 09       		.byte	9
 11804 0139 09       		.byte	9
 11805 013a 09       		.byte	9
 11806 013b 09       		.byte	9
 11807 013c 09       		.byte	9
 11808 013d 09       		.byte	9
 11809 013e 09       		.byte	9
 11810 013f 09       		.byte	9
 11811 0140 09       		.byte	9
 11812 0141 09       		.byte	9
 11813 0142 09       		.byte	9
 11814 0143 09       		.byte	9
 11815 0144 09       		.byte	9
 11816 0145 09       		.byte	9
 11817 0146 09       		.byte	9
 11818 0147 09       		.byte	9
 11819 0148 09       		.byte	9
 11820 0149 09       		.byte	9
 11821 014a 09       		.byte	9
 11822 014b 09       		.byte	9
 11823 014c 09       		.byte	9
 11824 014d 09       		.byte	9
 11825 014e 09       		.byte	9
 11826 014f 09       		.byte	9
 11827 0150 09       		.byte	9
 11828 0151 09       		.byte	9
 11829 0152 09       		.byte	9
 11830 0153 09       		.byte	9
 11831 0154 09       		.byte	9
 11832 0155 09       		.byte	9
 11833 0156 09       		.byte	9
 11834 0157 09       		.byte	9
 11835 0158 09       		.byte	9
 11836 0159 09       		.byte	9
 11837 015a 09       		.byte	9
 11838 015b 09       		.byte	9
 11839 015c 09       		.byte	9
 11840 015d 09       		.byte	9
 11841 015e 09       		.byte	9
 11842 015f 09       		.byte	9
 11843 0160 09       		.byte	9
 11844 0161 09       		.byte	9
 11845 0162 09       		.byte	9
 11846 0163 09       		.byte	9
 11847 0164 09       		.byte	9
 11848 0165 09       		.byte	9
 11849 0166 09       		.byte	9
 11850 0167 09       		.byte	9
 11851 0168 09       		.byte	9
 11852 0169 09       		.byte	9
 11853 016a 09       		.byte	9
 11854 016b 09       		.byte	9
 11855 016c 09       		.byte	9
 11856 016d 09       		.byte	9
 11857 016e 09       		.byte	9
 11858 016f 09       		.byte	9
 11859 0170 09       		.byte	9
 11860 0171 08       		.byte	8
 11861 0172 08       		.byte	8
 11862 0173 08       		.byte	8
 11863 0174 08       		.byte	8
 11864 0175 08       		.byte	8
 11865 0176 08       		.byte	8
 11866 0177 08       		.byte	8
 11867 0178 08       		.byte	8
 11868 0179 08       		.byte	8
 11869 017a 08       		.byte	8
 11870 017b 08       		.byte	8
 11871 017c 08       		.byte	8
 11872 017d 08       		.byte	8
 11873 017e 08       		.byte	8
 11874 017f 08       		.byte	8
 11875 0180 08       		.byte	8
 11876 0181 08       		.byte	8
 11877 0182 08       		.byte	8
 11878 0183 08       		.byte	8
 11879 0184 08       		.byte	8
 11880 0185 08       		.byte	8
 11881 0186 08       		.byte	8
 11882 0187 08       		.byte	8
 11883 0188 08       		.byte	8
 11884 0189 08       		.byte	8
 11885 018a 08       		.byte	8
 11886 018b 08       		.byte	8
 11887 018c 08       		.byte	8
 11888 018d 08       		.byte	8
 11889 018e 08       		.byte	8
 11890 018f 08       		.byte	8
 11891 0190 08       		.byte	8
 11892 0191 08       		.byte	8
 11893 0192 08       		.byte	8
 11894 0193 08       		.byte	8
 11895 0194 08       		.byte	8
 11896 0195 08       		.byte	8
 11897 0196 08       		.byte	8
 11898 0197 08       		.byte	8
 11899 0198 08       		.byte	8
 11900 0199 08       		.byte	8
 11901 019a 08       		.byte	8
 11902 019b 08       		.byte	8
 11903 019c 08       		.byte	8
 11904 019d 08       		.byte	8
 11905 019e 08       		.byte	8
 11906 019f 08       		.byte	8
 11907 01a0 08       		.byte	8
 11908 01a1 08       		.byte	8
 11909 01a2 08       		.byte	8
 11910 01a3 08       		.byte	8
 11911 01a4 08       		.byte	8
 11912 01a5 08       		.byte	8
 11913 01a6 08       		.byte	8
 11914 01a7 08       		.byte	8
 11915 01a8 08       		.byte	8
 11916 01a9 08       		.byte	8
 11917 01aa 08       		.byte	8
 11918 01ab 08       		.byte	8
 11919 01ac 08       		.byte	8
 11920 01ad 08       		.byte	8
 11921 01ae 08       		.byte	8
 11922 01af 08       		.byte	8
 11923 01b0 08       		.byte	8
 11924 01b1 08       		.byte	8
 11925 01b2 08       		.byte	8
 11926 01b3 08       		.byte	8
 11927 01b4 08       		.byte	8
 11928 01b5 08       		.byte	8
 11929 01b6 08       		.byte	8
 11930 01b7 08       		.byte	8
 11931 01b8 08       		.byte	8
 11932 01b9 08       		.byte	8
 11933 01ba 08       		.byte	8
 11934 01bb 08       		.byte	8
 11935 01bc 08       		.byte	8
 11936 01bd 08       		.byte	8
 11937 01be 08       		.byte	8
 11938 01bf 08       		.byte	8
 11939 01c0 08       		.byte	8
 11940 01c1 08       		.byte	8
 11941 01c2 08       		.byte	8
 11942 01c3 08       		.byte	8
 11943 01c4 08       		.byte	8
 11944 01c5 08       		.byte	8
 11945 01c6 08       		.byte	8
 11946 01c7 08       		.byte	8
 11947 01c8 08       		.byte	8
 11948 01c9 07       		.byte	7
 11949 01ca 07       		.byte	7
 11950 01cb 07       		.byte	7
 11951 01cc 07       		.byte	7
 11952 01cd 07       		.byte	7
 11953 01ce 07       		.byte	7
 11954 01cf 07       		.byte	7
 11955 01d0 07       		.byte	7
 11956 01d1 07       		.byte	7
 11957 01d2 07       		.byte	7
 11958 01d3 07       		.byte	7
 11959 01d4 07       		.byte	7
 11960 01d5 07       		.byte	7
 11961 01d6 07       		.byte	7
 11962 01d7 07       		.byte	7
 11963 01d8 07       		.byte	7
 11964 01d9 07       		.byte	7
 11965 01da 07       		.byte	7
 11966 01db 07       		.byte	7
 11967 01dc 07       		.byte	7
 11968 01dd 07       		.byte	7
 11969 01de 07       		.byte	7
 11970 01df 07       		.byte	7
 11971 01e0 07       		.byte	7
 11972 01e1 07       		.byte	7
 11973 01e2 07       		.byte	7
 11974 01e3 07       		.byte	7
 11975 01e4 07       		.byte	7
 11976 01e5 07       		.byte	7
 11977 01e6 07       		.byte	7
 11978 01e7 07       		.byte	7
 11979 01e8 07       		.byte	7
 11980 01e9 07       		.byte	7
 11981 01ea 07       		.byte	7
 11982 01eb 07       		.byte	7
 11983 01ec 07       		.byte	7
 11984 01ed 07       		.byte	7
 11985 01ee 07       		.byte	7
 11986 01ef 07       		.byte	7
 11987 01f0 07       		.byte	7
 11988 01f1 07       		.byte	7
 11989 01f2 07       		.byte	7
 11990 01f3 07       		.byte	7
 11991 01f4 07       		.byte	7
 11992 01f5 07       		.byte	7
 11993 01f6 07       		.byte	7
 11994 01f7 07       		.byte	7
 11995 01f8 07       		.byte	7
 11996 01f9 07       		.byte	7
 11997 01fa 07       		.byte	7
 11998 01fb 07       		.byte	7
 11999 01fc 07       		.byte	7
 12000 01fd 07       		.byte	7
 12001 01fe 07       		.byte	7
 12002 01ff 07       		.byte	7
 12003              		.globl	png_sRGB_base
 12004              		.section	.rodata.png_sRGB_base,"a",@progbits
 12005              		.align 32
 12008              	png_sRGB_base:
 12521              		.globl	png_sRGB_table
 12522              		.section	.rodata.png_sRGB_table,"a",@progbits
 12523              		.align 32
 12526              	png_sRGB_table:
 12783              		.section	.rodata.png_sRGB_checks,"a",@progbits
 12784              		.align 32
 12787              	png_sRGB_checks:
 12788 0000 F6D93F0A 		.long	171956726
 12789 0004 B972873B 		.long	998732473
 12790 0008 E80B0000 		.long	3048
 12791 000c DE3DF829 		.long	704134622
 12792 0010 AE55F2AF 		.long	-1343072850
 12793 0014 E4FA4278 		.long	2017655524
 12794 0018 0D3983CA 		.long	-897369843
 12795 001c 01       		.byte	1
 12796 001d 00       		.byte	0
 12798 0020 E1E50949 		.long	1225385441
 12799 0024 21BB7E42 		.long	1115601697
 12800 0028 EC0B0000 		.long	3052
 12801 002c 37D65BC9 		.long	-916728265
 12802 0030 3B8A5DE9 		.long	-379745733
 12803 0034 998FF30D 		.long	234065817
 12804 0038 890332C1 		.long	-1053686903
 12805 003c 01       		.byte	1
 12806 003d 00       		.byte	0
 12808 0040 A14421FD 		.long	-48151391
 12809 0044 AED86F30 		.long	812636334
 12810 0048 3CEE0000 		.long	60988
 12811 004c 783366FC 		.long	-60411016
 12812 0050 6B88E237 		.long	937592939
 12813 0054 83E972FD 		.long	-42800765
 12814 0058 B8F12882 		.long	-2111245896
 12815 005c 01       		.byte	1
 12816 005d 00       		.byte	0
 12818 0060 D2359C20 		.long	547108306
 12819 0064 1278EFBB 		.long	-1141934062
 12820 0068 20EE0000 		.long	60960
 12821 006c BF2A5634 		.long	878062271
 12822 0070 06CD4C99 		.long	-1723020026
 12823 0074 21572C6D 		.long	1831622433
 12824 0078 5D8CD6D0 		.long	-791245731
 12825 007c 01       		.byte	1
 12826 007d 00       		.byte	0
 12828 0080 62D754A0 		.long	-1605052574
 12829 0084 CE29515D 		.long	1565600206
 12830 0088 D00B0000 		.long	3024
 12831 008c 00000000 		.long	0
 12832 0090 00000000 		.long	0
 12833 0094 00000000 		.long	0
 12834 0098 00000000 		.long	0
 12835 009c 00       		.byte	0
 12836 009d 00       		.byte	0
 12838 00a0 FBF384F7 		.long	-142281733
 12839 00a4 52A52E18 		.long	405710162
 12840 00a8 480C0000 		.long	3144
 12841 00ac 00000000 		.long	0
 12842 00b0 00000000 		.long	0
 12843 00b4 00000000 		.long	0
 12844 00b8 00000000 		.long	0
 12845 00bc 00       		.byte	0
 12846 00bd 01       		.byte	1
 12848 00c0 FCF39803 		.long	60355580
 12849 00c4 6D529EF2 		.long	-224505235
 12850 00c8 480C0000 		.long	3144
 12851 00cc 00000000 		.long	0
 12852 00d0 00000000 		.long	0
 12853 00d4 00000000 		.long	0
 12854 00d8 00000000 		.long	0
 12855 00dc 00       		.byte	0
 12856 00dd 01       		.byte	1
 12858              		.section	.rodata.D50_nCIEXYZ,"a",@progbits
 12859              		.align 8
 12862              	D50_nCIEXYZ:
 12863 0000 00       		.byte	0
 12864 0001 00       		.byte	0
 12865 0002 F6       		.byte	-10
 12866 0003 D6       		.byte	-42
 12867 0004 00       		.byte	0
 12868 0005 01       		.byte	1
 12869 0006 00       		.byte	0
 12870 0007 00       		.byte	0
 12871 0008 00       		.byte	0
 12872 0009 00       		.byte	0
 12873 000a D3       		.byte	-45
 12874 000b 2D       		.byte	45
 12875              		.section	.rodata.sRGB_xy,"a",@progbits
 12876              		.align 32
 12879              	sRGB_xy:
 12880 0000 00FA0000 		.long	64000
 12881 0004 E8800000 		.long	33000
 12882 0008 30750000 		.long	30000
 12883 000c 60EA0000 		.long	60000
 12884 0010 983A0000 		.long	15000
 12885 0014 70170000 		.long	6000
 12886 0018 267A0000 		.long	31270
 12887 001c 84800000 		.long	32900
 12888              		.section	.rodata.cst8,"aM",@progbits,8
 12889              		.align 8
 12890              	.LC0:
 12891 0000 00000000 		.long	0
 12892 0004 00002440 		.long	1076101120
 12893              		.align 8
 12894              	.LC1:
 12895 0008 00000000 		.long	0
 12896 000c 0000F03F 		.long	1072693248
 12897              		.align 8
 12898              	.LC7:
 12899 0010 F168E388 		.long	2296604913
 12900 0014 B5F8E43E 		.long	1055193269
 12901              		.align 8
 12902              	.LC8:
 12903 0018 00000000 		.long	0
 12904 001c E0FFEF40 		.long	1089470432
 12905              		.align 8
 12906              	.LC9:
 12907 0020 00000000 		.long	0
 12908 0024 0000E03F 		.long	1071644672
 12909              		.align 8
 12910              	.LC22:
 12911 0028 0000C0FF 		.long	4290772992
 12912 002c FFFFDF41 		.long	1105199103
 12913              		.align 8
 12914              	.LC23:
 12915 0030 00000000 		.long	0
 12916 0034 0000E0C1 		.long	-1042284544
 12917              		.align 8
 12918              	.LC30:
 12919 0038 00000000 		.long	0
 12920 003c 00E06F40 		.long	1081073664
 12921              		.section	.rodata.cst16,"aM",@progbits,16
 12922              		.align 16
 12923              	.LC137:
 12924 0000 00000000 		.long	0
 12925 0004 00000080 		.long	-2147483648
 12926 0008 00000000 		.long	0
 12927 000c 00000000 		.long	0
 12928              		.section	.rodata.cst8
 12929              		.align 8
 12930              	.LC138:
 12931 0040 00000000 		.long	0
 12932 0044 00001000 		.long	1048576
 12933              		.align 8
 12934              	.LC139:
 12935 0048 FFFFFFFF 		.long	4294967295
 12936 004c FFFFEF7F 		.long	2146435071
 12937              		.align 8
 12938              	.LC140:
 12939 0050 00000000 		.long	0
 12940 0054 00002240 		.long	1075970048
 12941              		.align 8
 12942              	.LC144:
 12943 0058 00000000 		.long	0
 12944 005c 006AF840 		.long	1090021888
 12945              		.align 8
 12946              	.LC149:
 12947 0060 00000020 		.long	536870912
 12948 0064 5FA00242 		.long	1107468383
 12949              		.align 8
 12950              	.LC158:
 12951 0068 00003426 		.long	640942080
 12952 006c F56B0C43 		.long	1124887541
 12953              		.text
 12954              	.Letext0:
 12955              		.section	.text.unlikely.png_pow10
 12956              	.Letext_cold0:
 12957              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 12958              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 12959              		.file 5 "/usr/include/stdio.h"
 12960              		.file 6 "/usr/include/libio.h"
 12961              		.file 7 "/usr/include/x86_64-linux-gnu/bits/setjmp.h"
 12962              		.file 8 "/usr/include/x86_64-linux-gnu/bits/sigset.h"
 12963              		.file 9 "/usr/include/setjmp.h"
 12964              		.file 10 "fltk-1.3.4-1/png/pngconf.h"
 12965              		.file 11 "fltk-1.3.4-1/png/png.h"
 12966              		.file 12 "fltk-1.3.4-1/png/pngstruct.h"
 12967              		.file 13 "fltk-1.3.4-1/png/pnginfo.h"
 12968              		.file 14 "fltk-1.3.4-1/png/pngpriv.h"
 12969              		.file 15 "/usr/include/x86_64-linux-gnu/zconf.h"
 12970              		.file 16 "/usr/include/zlib.h"
 12971              		.file 17 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h"
 12972              		.file 18 "/usr/include/string.h"
 12973              		.file 19 "/usr/include/stdlib.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 png.c
     /tmp/ccyrsK0A.s:13     .text.png_pow10:0000000000000000 png_pow10
     /tmp/ccyrsK0A.s:96     .text.png_zalloc:0000000000000000 png_zalloc
     /tmp/ccyrsK0A.s:155    .text.png_zfree:0000000000000000 png_zfree
     /tmp/ccyrsK0A.s:176    .text.png_build_16bit_table:0000000000000000 png_build_16bit_table
     /tmp/ccyrsK0A.s:422    .text.png_image_free_function:0000000000000000 png_image_free_function
     /tmp/ccyrsK0A.s:554    .text.png_colorspace_endpoints_match:0000000000000000 png_colorspace_endpoints_match
     /tmp/ccyrsK0A.s:686    .text.png_colorspace_set_xy_and_XYZ:0000000000000000 png_colorspace_set_xy_and_XYZ
     /tmp/ccyrsK0A.s:12879  .rodata.sRGB_xy:0000000000000000 sRGB_xy
     /tmp/ccyrsK0A.s:883    .text.is_ICC_signature_char.part.1:0000000000000000 is_ICC_signature_char.part.1
     /tmp/ccyrsK0A.s:917    .text.png_icc_profile_error:0000000000000000 png_icc_profile_error
     /tmp/ccyrsK0A.s:1275   .text.png_free_data.part.3:0000000000000000 png_free_data.part.3
     /tmp/ccyrsK0A.s:1845   .text.png_handle_as_unknown.part.5:0000000000000000 png_handle_as_unknown.part.5
     /tmp/ccyrsK0A.s:1937   .text.png_muldiv.part.9:0000000000000000 png_muldiv.part.9
     /tmp/ccyrsK0A.s:2015   .text.png_xy_from_XYZ:0000000000000000 png_xy_from_XYZ
     /tmp/ccyrsK0A.s:2438   .text.png_colorspace_check_xy.part.10:0000000000000000 png_colorspace_check_xy.part.10
     /tmp/ccyrsK0A.s:2513   .text.png_colorspace_check_gamma.isra.11:0000000000000000 png_colorspace_check_gamma.isra.11
     /tmp/ccyrsK0A.s:2661   .text.png_gamma_8bit_correct.part.14:0000000000000000 png_gamma_8bit_correct.part.14
     /tmp/ccyrsK0A.s:2705   .text.png_build_8bit_table:0000000000000000 png_build_8bit_table
     /tmp/ccyrsK0A.s:2827   .text.png_gamma_16bit_correct.part.15:0000000000000000 png_gamma_16bit_correct.part.15
     /tmp/ccyrsK0A.s:2876   .text.png_set_sig_bytes:0000000000000000 png_set_sig_bytes
     /tmp/ccyrsK0A.s:2919   .text.png_sig_cmp:0000000000000000 png_sig_cmp
     /tmp/ccyrsK0A.s:3018   .text.png_reset_crc:0000000000000000 png_reset_crc
     /tmp/ccyrsK0A.s:3056   .text.png_calculate_crc:0000000000000000 png_calculate_crc
     /tmp/ccyrsK0A.s:3189   .text.png_user_version_check:0000000000000000 png_user_version_check
     /tmp/ccyrsK0A.s:3343   .text.png_create_png_struct:0000000000000000 png_create_png_struct
     /tmp/ccyrsK0A.s:3519   .text.png_create_info_struct:0000000000000000 png_create_info_struct
     /tmp/ccyrsK0A.s:3584   .text.png_destroy_info_struct:0000000000000000 png_destroy_info_struct
     /tmp/ccyrsK0A.s:3697   .text.png_info_init_3:0000000000000000 png_info_init_3
     /tmp/ccyrsK0A.s:3780   .text.png_data_freer:0000000000000000 png_data_freer
     /tmp/ccyrsK0A.s:3835   .text.png_free_data:0000000000000000 png_free_data
     /tmp/ccyrsK0A.s:3865   .text.png_get_io_ptr:0000000000000000 png_get_io_ptr
     /tmp/ccyrsK0A.s:3897   .text.png_init_io:0000000000000000 png_init_io
     /tmp/ccyrsK0A.s:3923   .text.png_save_int_32:0000000000000000 png_save_int_32
     /tmp/ccyrsK0A.s:3962   .text.png_convert_to_rfc1123_buffer:0000000000000000 png_convert_to_rfc1123_buffer
     /tmp/ccyrsK0A.s:11472  .rodata.short_months.6841:0000000000000000 short_months.6841
     /tmp/ccyrsK0A.s:4205   .text.png_convert_to_rfc1123:0000000000000000 png_convert_to_rfc1123
     /tmp/ccyrsK0A.s:4281   .text.png_get_copyright:0000000000000000 png_get_copyright
     /tmp/ccyrsK0A.s:4303   .text.png_get_libpng_ver:0000000000000000 png_get_libpng_ver
     /tmp/ccyrsK0A.s:4322   .text.png_get_header_ver:0000000000000000 png_get_header_ver
     /tmp/ccyrsK0A.s:4348   .text.png_get_header_version:0000000000000000 png_get_header_version
     /tmp/ccyrsK0A.s:4370   .text.png_build_grayscale_palette:0000000000000000 png_build_grayscale_palette
     /tmp/ccyrsK0A.s:11459  .rodata.CSWTCH.108:0000000000000000 CSWTCH.108
     /tmp/ccyrsK0A.s:11446  .rodata.CSWTCH.109:0000000000000000 CSWTCH.109
     /tmp/ccyrsK0A.s:4426   .text.png_handle_as_unknown:0000000000000000 png_handle_as_unknown
     /tmp/ccyrsK0A.s:4458   .text.png_chunk_unknown_handling:0000000000000000 png_chunk_unknown_handling
     /tmp/ccyrsK0A.s:4539   .text.png_reset_zstream:0000000000000000 png_reset_zstream
     /tmp/ccyrsK0A.s:4572   .text.png_access_version_number:0000000000000000 png_access_version_number
     /tmp/ccyrsK0A.s:4614   .text.png_zstream_error:0000000000000000 png_zstream_error
     /tmp/ccyrsK0A.s:4735   .text.png_colorspace_set_gamma:0000000000000000 png_colorspace_set_gamma
     /tmp/ccyrsK0A.s:4839   .text.png_colorspace_sync_info:0000000000000000 png_colorspace_sync_info
     /tmp/ccyrsK0A.s:4938   .text.png_colorspace_sync:0000000000000000 png_colorspace_sync
     /tmp/ccyrsK0A.s:5003   .text.png_colorspace_set_sRGB:0000000000000000 png_colorspace_set_sRGB
     /tmp/ccyrsK0A.s:5200   .text.png_icc_check_length:0000000000000000 png_icc_check_length
     /tmp/ccyrsK0A.s:5279   .text.png_icc_check_header:0000000000000000 png_icc_check_header
     /tmp/ccyrsK0A.s:12862  .rodata.D50_nCIEXYZ:0000000000000000 D50_nCIEXYZ
     /tmp/ccyrsK0A.s:5721   .text.png_icc_check_tag_table:0000000000000000 png_icc_check_tag_table
     /tmp/ccyrsK0A.s:5962   .text.png_icc_set_sRGB:0000000000000000 png_icc_set_sRGB
     /tmp/ccyrsK0A.s:12787  .rodata.png_sRGB_checks:0000000000000000 png_sRGB_checks
     /tmp/ccyrsK0A.s:6360   .text.png_colorspace_set_ICC:0000000000000000 png_colorspace_set_ICC
     /tmp/ccyrsK0A.s:6528   .text.png_colorspace_set_rgb_coefficients:0000000000000000 png_colorspace_set_rgb_coefficients
     /tmp/ccyrsK0A.s:6857   .text.png_check_IHDR:0000000000000000 png_check_IHDR
     /tmp/ccyrsK0A.s:7200   .text.png_check_fp_number:0000000000000000 png_check_fp_number
     /tmp/ccyrsK0A.s:7507   .text.png_check_fp_string:0000000000000000 png_check_fp_string
     /tmp/ccyrsK0A.s:7584   .text.png_ascii_from_fp:0000000000000000 png_ascii_from_fp
     /tmp/ccyrsK0A.s:8346   .text.png_ascii_from_fixed:0000000000000000 png_ascii_from_fixed
     /tmp/ccyrsK0A.s:8585   .text.png_fixed:0000000000000000 png_fixed
     /tmp/ccyrsK0A.s:8649   .text.png_muldiv:0000000000000000 png_muldiv
     /tmp/ccyrsK0A.s:8696   .text.png_muldiv_warn:0000000000000000 png_muldiv_warn
     /tmp/ccyrsK0A.s:8766   .text.png_reciprocal:0000000000000000 png_reciprocal
     /tmp/ccyrsK0A.s:8820   .text.png_XYZ_from_xy:0000000000000000 png_XYZ_from_xy
     /tmp/ccyrsK0A.s:9589   .text.png_colorspace_set_endpoints:0000000000000000 png_colorspace_set_endpoints
     /tmp/ccyrsK0A.s:10131  .text.png_colorspace_set_chromaticities:0000000000000000 png_colorspace_set_chromaticities
     /tmp/ccyrsK0A.s:10266  .text.png_gamma_significant:0000000000000000 png_gamma_significant
     /tmp/ccyrsK0A.s:10293  .text.png_reciprocal2:0000000000000000 png_reciprocal2
     /tmp/ccyrsK0A.s:10354  .text.png_gamma_8bit_correct:0000000000000000 png_gamma_8bit_correct
     /tmp/ccyrsK0A.s:10385  .text.png_gamma_16bit_correct:0000000000000000 png_gamma_16bit_correct
     /tmp/ccyrsK0A.s:10416  .text.png_gamma_correct:0000000000000000 png_gamma_correct
     /tmp/ccyrsK0A.s:10511  .text.png_destroy_gamma_table:0000000000000000 png_destroy_gamma_table
     /tmp/ccyrsK0A.s:10706  .text.png_build_gamma_table:0000000000000000 png_build_gamma_table
     /tmp/ccyrsK0A.s:11268  .text.png_set_option:0000000000000000 png_set_option
     /tmp/ccyrsK0A.s:11344  .text.png_image_free:0000000000000000 png_image_free
     /tmp/ccyrsK0A.s:11402  .text.png_image_error:0000000000000000 png_image_error
     /tmp/ccyrsK0A.s:11490  .rodata.png_sRGB_delta:0000000000000000 png_sRGB_delta
     /tmp/ccyrsK0A.s:12008  .rodata.png_sRGB_base:0000000000000000 png_sRGB_base
     /tmp/ccyrsK0A.s:12526  .rodata.png_sRGB_table:0000000000000000 png_sRGB_table
     /tmp/ccyrsK0A.s:12894  .rodata.cst8:0000000000000008 .LC1
     /tmp/ccyrsK0A.s:12890  .rodata.cst8:0000000000000000 .LC0
     /tmp/ccyrsK0A.s:12898  .rodata.cst8:0000000000000010 .LC7
     /tmp/ccyrsK0A.s:12902  .rodata.cst8:0000000000000018 .LC8
     /tmp/ccyrsK0A.s:12906  .rodata.cst8:0000000000000020 .LC9
     /tmp/ccyrsK0A.s:12910  .rodata.cst8:0000000000000028 .LC22
     /tmp/ccyrsK0A.s:12914  .rodata.cst8:0000000000000030 .LC23
     /tmp/ccyrsK0A.s:12918  .rodata.cst8:0000000000000038 .LC30
     /tmp/ccyrsK0A.s:12930  .rodata.cst8:0000000000000040 .LC138
     /tmp/ccyrsK0A.s:12934  .rodata.cst8:0000000000000048 .LC139
     /tmp/ccyrsK0A.s:12923  .rodata.cst16:0000000000000000 .LC137
     /tmp/ccyrsK0A.s:12938  .rodata.cst8:0000000000000050 .LC140
     /tmp/ccyrsK0A.s:12942  .rodata.cst8:0000000000000058 .LC144
     /tmp/ccyrsK0A.s:12946  .rodata.cst8:0000000000000060 .LC149
     /tmp/ccyrsK0A.s:12950  .rodata.cst8:0000000000000068 .LC158
                           .group:0000000000000000 wm4.0.cf9695abff4f49bdfe00dc4091904acd
                           .group:0000000000000000 wm4.stdcpredef.h.19.bf2bf6c5fb087dfb5ef2d2297c2795de
                           .group:0000000000000000 wm4.pngpriv.h.26.ca3d1719773cd86007410b516123e125
                           .group:0000000000000000 wm4.features.h.19.22780be97c2f806ec599b8b99aa89f7d
                           .group:0000000000000000 wm4.cdefs.h.19.56613e71f285ebad825b69b151170a81
                           .group:0000000000000000 wm4.wordsize.h.4.256e8fdbd37801980286acdbc40d0280
                           .group:0000000000000000 wm4.cdefs.h.432.619afd0aac7c4b439843706c1b28ddea
                           .group:0000000000000000 wm4.stubs64.h.10.918ceb5fa58268542bf143e4c1efbcf3
                           .group:0000000000000000 wm4.stdlib.h.27.59e2586c75bdbcb991b248ad7257b993
                           .group:0000000000000000 wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1
                           .group:0000000000000000 wm4.stdlib.h.37.e081b308f911db94d3185af615f2b2e2
                           .group:0000000000000000 wm4.string.h.23.8394011d5995a16f15d67d04e84a1d69
                           .group:0000000000000000 wm4.stddef.h.238.04cc7214bceba497b20d15c10fd97511
                           .group:0000000000000000 wm4.string.h.24.1b0dc67418e7128d207285861439c2f8
                           .group:0000000000000000 wm4.endian.h.19.ff00c9c0f5e9f9a9719c5de76ace57b4
                           .group:0000000000000000 wm4.endian.h.41.27d650ce666b76881e2a2a218ea61984
                           .group:0000000000000000 wm4.types.h.89.468e2451361e3b92f048f6cad51690ff
                           .group:0000000000000000 wm4.typesizes.h.24.40eb69a6270178f15d1bf3d7b6635a8b
                           .group:0000000000000000 wm4.string2.h.55.e4a4cfd7781cc64a4341475e67436ab1
                           .group:0000000000000000 wm4.string3.h.31.2b75bd65145c50aeedb61673ce0d3293
                           .group:0000000000000000 wm4.pnglibconf.h.15.30e2eea90e566ac06da4f4de487193d7
                           .group:0000000000000000 wm4.pngpriv.h.130.f65d93453b5b5837849611ffe82d627a
                           .group:0000000000000000 wm4.png.h.412.12a95b2193a7d0bc2282b72c70a28ce1
                           .group:0000000000000000 wm4.limits.h.23.f0fd92c175c1576df467c4d5fe2b091a
                           .group:0000000000000000 wm4.posix1_lim.h.25.28c8eb2d22697e7711efefdec5344a02
                           .group:0000000000000000 wm4.local_lim.h.25.97ee4129efb08ad296101237bcd3401b
                           .group:0000000000000000 wm4.limits.h.2.9ff59823e8adcf4502d980ef41362326
                           .group:0000000000000000 wm4.local_lim.h.42.9dc3935e0e3b94e23cda247e4e39bd8b
                           .group:0000000000000000 wm4.limits.h.60.eb7066f861c8b8edc7a0a399744b0335
                           .group:0000000000000000 wm4.stddef.h.39.d5a83c17f38162a5dd6f834eaf38f8ef
                           .group:0000000000000000 wm4.stdio.h.26.4719156f1aea2bb9662fd6c582dc9a4c
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:0000000000000000 wm4.stdio.h.36.2dd12c1fd035242ad5cfd0152a01be5a
                           .group:0000000000000000 wm4._G_config.h.5.b0f37d9e474454cf6e459063458db32f
                           .group:0000000000000000 wm4.wchar.h.80.eea3eba2d2a17aace9470a8e0d8218dc
                           .group:0000000000000000 wm4._G_config.h.46.5187c97b14fd664662cb32e6b94fc49e
                           .group:0000000000000000 wm4.libio.h.33.a775b9ecae273f33bc59931e9891e4ca
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.libio.h.51.dab170798ec1df48c625aea7c30e1b63
                           .group:0000000000000000 wm4.stdio.h.120.80cbf0ec1718a5b27e6428218e29c72d
                           .group:0000000000000000 wm4.stdio_lim.h.23.f8541119d1bcf759d7de9531671fd758
                           .group:0000000000000000 wm4.stdio.h.172.df21df34a7396d7da2e08f9b617d582f
                           .group:0000000000000000 wm4.stdio.h.26.e50fc3808d57d965ceefc6f6dd102eb7
                           .group:0000000000000000 wm4.sigset.h.20.f36413b6d2364ad847d3db53fb03e683
                           .group:0000000000000000 wm4.setjmp.h.67.51aa194c3c89a841663c00cb93fd90ff
                           .group:0000000000000000 wm4.time.h.26.6a3cabd4f228e226db6723a3b0c81ba6
                           .group:0000000000000000 wm4.time.h.40.99bfb90272c7e82357ef3c2f5c6fefc8
                           .group:0000000000000000 wm4.time.h.53.f8af6908497bac0ca16faea86fb8cd87
                           .group:0000000000000000 wm4.pngconf.h.86.6636b2584cb7be1618479e118d71e58c
                           .group:0000000000000000 wm4.png.h.506.fa53b6434c0b20c8e63094b04d7940c5
                           .group:0000000000000000 wm4.pngpriv.h.298.dc2c896ce0eddc5cfadee24e76e3c417
                           .group:0000000000000000 wm4.float.h.29.1cf88a0527b6b1225d49fbee2b32acb7
                           .group:0000000000000000 wm4.math.h.26.671af5ac9cd425a35e0730f7b6d7cde2
                           .group:0000000000000000 wm4.libmsimddeclstubs.h.34.75644856b74ba3d815155fe5fe7ecc56
                           .group:0000000000000000 wm4.mathdef.h.23.67c0aa4a204f1f427459dfc651aba565
                           .group:0000000000000000 wm4.math.h.55.cf380f99c57d42476a5252f30065036a
                           .group:0000000000000000 wm4.math.h.84.742292806c6be54f49dc607928a827f7
                           .group:0000000000000000 wm4.math.h.105.59ff0f83ebf6a04e70e145cef2d1185e
                           .group:0000000000000000 wm4.math.h.152.48a142bc1575e748473ff86330dee044
                           .group:0000000000000000 wm4.math.h.30.7cada3efe024725df2da4c705b6566be
                           .group:0000000000000000 wm4.pngpriv.h.481.f98e7c29eaaa759546a3f9808bc25c74
                           .group:0000000000000000 wm4.pngstruct.h.22.7b9573417641055ab8f42438aa8afadf
                           .group:0000000000000000 wm4.zconf.h.9.bbc7b5783b51507f7721a5620139b4ee
                           .group:0000000000000000 wm4.zconf.h.397.69c03305677a9a6792fe2a94f7c9f69b
                           .group:0000000000000000 wm4.types.h.23.92678977f3921b8dce508274ac68f78d
                           .group:0000000000000000 wm4.types.h.187.12f6c32afb936b45a5f241219964ce93
                           .group:0000000000000000 wm4.stdarg.h.31.48e922dd0aaedfb616aafd8a7b7a4949
                           .group:0000000000000000 wm4.unistd.h.23.c85a58a698f53edadcf64287ab24fecb
                           .group:0000000000000000 wm4.posix_opt.h.20.9a8aece77957db1725bd2b9521e5f9c5
                           .group:0000000000000000 wm4.unistd.h.213.4c582e35260d661b081322974b7c1e74
                           .group:0000000000000000 wm4.unistd.h.284.7e168706bc8bd978e02fd1da439d9bc3
                           .group:0000000000000000 wm4.confname.h.27.6b00117a32f457cc72e5ac810a9adade
                           .group:0000000000000000 wm4.zconf.h.457.505c3613686dd75e492569d7a56a6eb0
                           .group:0000000000000000 wm4.zlib.h.40.5a15529ab8e285cee4b0ddab32502c27
                           .group:0000000000000000 wm4.pngstruct.h.44.bc957704556ff8ddcb697678a008ffae
                           .group:0000000000000000 wm4.pngpriv.h.853.4585af3e74cfb155d8486c5333b94adf
                           .group:0000000000000000 wm4.pngdebug.h.36.e9c57d5f35e3128225fb629498ec6fc8

UNDEFINED SYMBOLS
png_malloc_warn
png_warning
png_free
png_calloc
png_malloc
pow
floor
png_destroy_read_struct
fclose
png_destroy_write_struct
__stack_chk_fail
png_benign_error
png_safecat
png_format_number
png_chunk_report
memcmp
png_error
crc32
png_set_mem_fn
png_set_error_fn
_setjmp
__longjmp_chk
png_malloc_base
free
inflateReset
adler32
frexp
modf
png_fixed_error
png_safe_execute
