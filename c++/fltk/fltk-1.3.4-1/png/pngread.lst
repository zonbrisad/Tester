   1              		.file	"pngread.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.rodata.str1.1,"aMS",@progbits,1
   5              	.LC0:
   6 0000 72656164 		.string	"read beyond end of data"
   6      20626579 
   6      6F6E6420 
   6      656E6420 
   6      6F662064 
   7              	.LC1:
   8 0018 696E7661 		.string	"invalid memory read"
   8      6C696420 
   8      6D656D6F 
   8      72792072 
   8      65616400 
   9              		.section	.text.unlikely.png_image_memory_read,"ax",@progbits
  10              	.LCOLDB2:
  11              		.section	.text.png_image_memory_read,"ax",@progbits
  12              	.LHOTB2:
  13              		.p2align 4,,15
  14              		.section	.text.unlikely.png_image_memory_read
  15              	.Ltext_cold0:
  16              		.section	.text.png_image_memory_read
  18              	png_image_memory_read:
  19              	.LFB76:
  20              		.file 1 "fltk-1.3.4-1/png/pngread.c"
   1:fltk-1.3.4-1/png/pngread.c **** 
   2:fltk-1.3.4-1/png/pngread.c **** /* pngread.c - read a PNG file
   3:fltk-1.3.4-1/png/pngread.c ****  *
   4:fltk-1.3.4-1/png/pngread.c ****  * Last changed in libpng 1.6.15 [November 20, 2014]
   5:fltk-1.3.4-1/png/pngread.c ****  * Copyright (c) 1998-2014 Glenn Randers-Pehrson
   6:fltk-1.3.4-1/png/pngread.c ****  * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
   7:fltk-1.3.4-1/png/pngread.c ****  * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
   8:fltk-1.3.4-1/png/pngread.c ****  *
   9:fltk-1.3.4-1/png/pngread.c ****  * This code is released under the libpng license.
  10:fltk-1.3.4-1/png/pngread.c ****  * For conditions of distribution and use, see the disclaimer
  11:fltk-1.3.4-1/png/pngread.c ****  * and license in png.h
  12:fltk-1.3.4-1/png/pngread.c ****  *
  13:fltk-1.3.4-1/png/pngread.c ****  * This file contains routines that an application calls directly to
  14:fltk-1.3.4-1/png/pngread.c ****  * read a PNG file or stream.
  15:fltk-1.3.4-1/png/pngread.c ****  */
  16:fltk-1.3.4-1/png/pngread.c **** 
  17:fltk-1.3.4-1/png/pngread.c **** #include "pngpriv.h"
  18:fltk-1.3.4-1/png/pngread.c **** #if defined(PNG_SIMPLIFIED_READ_SUPPORTED) && defined(PNG_STDIO_SUPPORTED)
  19:fltk-1.3.4-1/png/pngread.c **** #  include <errno.h>
  20:fltk-1.3.4-1/png/pngread.c **** #endif
  21:fltk-1.3.4-1/png/pngread.c **** 
  22:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_SUPPORTED
  23:fltk-1.3.4-1/png/pngread.c **** 
  24:fltk-1.3.4-1/png/pngread.c **** /* Create a PNG structure for reading, and allocate any memory needed. */
  25:fltk-1.3.4-1/png/pngread.c **** PNG_FUNCTION(png_structp,PNGAPI
  26:fltk-1.3.4-1/png/pngread.c **** png_create_read_struct,(png_const_charp user_png_ver, png_voidp error_ptr,
  27:fltk-1.3.4-1/png/pngread.c ****     png_error_ptr error_fn, png_error_ptr warn_fn),PNG_ALLOCATED)
  28:fltk-1.3.4-1/png/pngread.c **** {
  29:fltk-1.3.4-1/png/pngread.c **** #ifndef PNG_USER_MEM_SUPPORTED
  30:fltk-1.3.4-1/png/pngread.c ****    png_structp png_ptr = png_create_png_struct(user_png_ver, error_ptr,
  31:fltk-1.3.4-1/png/pngread.c ****       error_fn, warn_fn, NULL, NULL, NULL);
  32:fltk-1.3.4-1/png/pngread.c **** #else
  33:fltk-1.3.4-1/png/pngread.c ****    return png_create_read_struct_2(user_png_ver, error_ptr, error_fn,
  34:fltk-1.3.4-1/png/pngread.c ****        warn_fn, NULL, NULL, NULL);
  35:fltk-1.3.4-1/png/pngread.c **** }
  36:fltk-1.3.4-1/png/pngread.c **** 
  37:fltk-1.3.4-1/png/pngread.c **** /* Alternate create PNG structure for reading, and allocate any memory
  38:fltk-1.3.4-1/png/pngread.c ****  * needed.
  39:fltk-1.3.4-1/png/pngread.c ****  */
  40:fltk-1.3.4-1/png/pngread.c **** PNG_FUNCTION(png_structp,PNGAPI
  41:fltk-1.3.4-1/png/pngread.c **** png_create_read_struct_2,(png_const_charp user_png_ver, png_voidp error_ptr,
  42:fltk-1.3.4-1/png/pngread.c ****     png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,
  43:fltk-1.3.4-1/png/pngread.c ****     png_malloc_ptr malloc_fn, png_free_ptr free_fn),PNG_ALLOCATED)
  44:fltk-1.3.4-1/png/pngread.c **** {
  45:fltk-1.3.4-1/png/pngread.c ****    png_structp png_ptr = png_create_png_struct(user_png_ver, error_ptr,
  46:fltk-1.3.4-1/png/pngread.c ****       error_fn, warn_fn, mem_ptr, malloc_fn, free_fn);
  47:fltk-1.3.4-1/png/pngread.c **** #endif /* USER_MEM */
  48:fltk-1.3.4-1/png/pngread.c **** 
  49:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr != NULL)
  50:fltk-1.3.4-1/png/pngread.c ****    {
  51:fltk-1.3.4-1/png/pngread.c ****       png_ptr->mode = PNG_IS_READ_STRUCT;
  52:fltk-1.3.4-1/png/pngread.c **** 
  53:fltk-1.3.4-1/png/pngread.c ****       /* Added in libpng-1.6.0; this can be used to detect a read structure if
  54:fltk-1.3.4-1/png/pngread.c ****        * required (it will be zero in a write structure.)
  55:fltk-1.3.4-1/png/pngread.c ****        */
  56:fltk-1.3.4-1/png/pngread.c **** #     ifdef PNG_SEQUENTIAL_READ_SUPPORTED
  57:fltk-1.3.4-1/png/pngread.c ****          png_ptr->IDAT_read_size = PNG_IDAT_READ_SIZE;
  58:fltk-1.3.4-1/png/pngread.c **** #     endif
  59:fltk-1.3.4-1/png/pngread.c **** 
  60:fltk-1.3.4-1/png/pngread.c **** #     ifdef PNG_BENIGN_READ_ERRORS_SUPPORTED
  61:fltk-1.3.4-1/png/pngread.c ****          png_ptr->flags |= PNG_FLAG_BENIGN_ERRORS_WARN;
  62:fltk-1.3.4-1/png/pngread.c **** 
  63:fltk-1.3.4-1/png/pngread.c ****          /* In stable builds only warn if an application error can be completely
  64:fltk-1.3.4-1/png/pngread.c ****           * handled.
  65:fltk-1.3.4-1/png/pngread.c ****           */
  66:fltk-1.3.4-1/png/pngread.c **** #        if PNG_LIBPNG_BUILD_BASE_TYPE >= PNG_LIBPNG_BUILD_RC
  67:fltk-1.3.4-1/png/pngread.c ****             png_ptr->flags |= PNG_FLAG_APP_WARNINGS_WARN;
  68:fltk-1.3.4-1/png/pngread.c **** #        endif
  69:fltk-1.3.4-1/png/pngread.c **** #     endif
  70:fltk-1.3.4-1/png/pngread.c **** 
  71:fltk-1.3.4-1/png/pngread.c ****       /* TODO: delay this, it can be done in png_init_io (if the app doesn't
  72:fltk-1.3.4-1/png/pngread.c ****        * do it itself) avoiding setting the default function if it is not
  73:fltk-1.3.4-1/png/pngread.c ****        * required.
  74:fltk-1.3.4-1/png/pngread.c ****        */
  75:fltk-1.3.4-1/png/pngread.c ****       png_set_read_fn(png_ptr, NULL, NULL);
  76:fltk-1.3.4-1/png/pngread.c ****    }
  77:fltk-1.3.4-1/png/pngread.c **** 
  78:fltk-1.3.4-1/png/pngread.c ****    return png_ptr;
  79:fltk-1.3.4-1/png/pngread.c **** }
  80:fltk-1.3.4-1/png/pngread.c **** 
  81:fltk-1.3.4-1/png/pngread.c **** 
  82:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_SEQUENTIAL_READ_SUPPORTED
  83:fltk-1.3.4-1/png/pngread.c **** /* Read the information before the actual image data.  This has been
  84:fltk-1.3.4-1/png/pngread.c ****  * changed in v0.90 to allow reading a file that already has the magic
  85:fltk-1.3.4-1/png/pngread.c ****  * bytes read from the stream.  You can tell libpng how many bytes have
  86:fltk-1.3.4-1/png/pngread.c ****  * been read from the beginning of the stream (up to the maximum of 8)
  87:fltk-1.3.4-1/png/pngread.c ****  * via png_set_sig_bytes(), and we will only check the remaining bytes
  88:fltk-1.3.4-1/png/pngread.c ****  * here.  The application can then have access to the signature bytes we
  89:fltk-1.3.4-1/png/pngread.c ****  * read if it is determined that this isn't a valid PNG file.
  90:fltk-1.3.4-1/png/pngread.c ****  */
  91:fltk-1.3.4-1/png/pngread.c **** void PNGAPI
  92:fltk-1.3.4-1/png/pngread.c **** png_read_info(png_structrp png_ptr, png_inforp info_ptr)
  93:fltk-1.3.4-1/png/pngread.c **** {
  94:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED
  95:fltk-1.3.4-1/png/pngread.c ****    int keep;
  96:fltk-1.3.4-1/png/pngread.c **** #endif
  97:fltk-1.3.4-1/png/pngread.c **** 
  98:fltk-1.3.4-1/png/pngread.c ****    png_debug(1, "in png_read_info");
  99:fltk-1.3.4-1/png/pngread.c **** 
 100:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr == NULL || info_ptr == NULL)
 101:fltk-1.3.4-1/png/pngread.c ****       return;
 102:fltk-1.3.4-1/png/pngread.c **** 
 103:fltk-1.3.4-1/png/pngread.c ****    /* Read and check the PNG file signature. */
 104:fltk-1.3.4-1/png/pngread.c ****    png_read_sig(png_ptr, info_ptr);
 105:fltk-1.3.4-1/png/pngread.c **** 
 106:fltk-1.3.4-1/png/pngread.c ****    for (;;)
 107:fltk-1.3.4-1/png/pngread.c ****    {
 108:fltk-1.3.4-1/png/pngread.c ****       png_uint_32 length = png_read_chunk_header(png_ptr);
 109:fltk-1.3.4-1/png/pngread.c ****       png_uint_32 chunk_name = png_ptr->chunk_name;
 110:fltk-1.3.4-1/png/pngread.c **** 
 111:fltk-1.3.4-1/png/pngread.c ****       /* IDAT logic needs to happen here to simplify getting the two flags
 112:fltk-1.3.4-1/png/pngread.c ****        * right.
 113:fltk-1.3.4-1/png/pngread.c ****        */
 114:fltk-1.3.4-1/png/pngread.c ****       if (chunk_name == png_IDAT)
 115:fltk-1.3.4-1/png/pngread.c ****       {
 116:fltk-1.3.4-1/png/pngread.c ****          if ((png_ptr->mode & PNG_HAVE_IHDR) == 0)
 117:fltk-1.3.4-1/png/pngread.c ****             png_chunk_error(png_ptr, "Missing IHDR before IDAT");
 118:fltk-1.3.4-1/png/pngread.c **** 
 119:fltk-1.3.4-1/png/pngread.c ****          else if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE &&
 120:fltk-1.3.4-1/png/pngread.c ****              (png_ptr->mode & PNG_HAVE_PLTE) == 0)
 121:fltk-1.3.4-1/png/pngread.c ****             png_chunk_error(png_ptr, "Missing PLTE before IDAT");
 122:fltk-1.3.4-1/png/pngread.c **** 
 123:fltk-1.3.4-1/png/pngread.c ****          else if ((png_ptr->mode & PNG_AFTER_IDAT) != 0)
 124:fltk-1.3.4-1/png/pngread.c ****             png_chunk_benign_error(png_ptr, "Too many IDATs found");
 125:fltk-1.3.4-1/png/pngread.c **** 
 126:fltk-1.3.4-1/png/pngread.c ****          png_ptr->mode |= PNG_HAVE_IDAT;
 127:fltk-1.3.4-1/png/pngread.c ****       }
 128:fltk-1.3.4-1/png/pngread.c **** 
 129:fltk-1.3.4-1/png/pngread.c ****       else if ((png_ptr->mode & PNG_HAVE_IDAT) != 0)
 130:fltk-1.3.4-1/png/pngread.c ****          png_ptr->mode |= PNG_AFTER_IDAT;
 131:fltk-1.3.4-1/png/pngread.c **** 
 132:fltk-1.3.4-1/png/pngread.c ****       /* This should be a binary subdivision search or a hash for
 133:fltk-1.3.4-1/png/pngread.c ****        * matching the chunk name rather than a linear search.
 134:fltk-1.3.4-1/png/pngread.c ****        */
 135:fltk-1.3.4-1/png/pngread.c ****       if (chunk_name == png_IHDR)
 136:fltk-1.3.4-1/png/pngread.c ****          png_handle_IHDR(png_ptr, info_ptr, length);
 137:fltk-1.3.4-1/png/pngread.c **** 
 138:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_IEND)
 139:fltk-1.3.4-1/png/pngread.c ****          png_handle_IEND(png_ptr, info_ptr, length);
 140:fltk-1.3.4-1/png/pngread.c **** 
 141:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED
 142:fltk-1.3.4-1/png/pngread.c ****       else if ((keep = png_chunk_unknown_handling(png_ptr, chunk_name)) != 0)
 143:fltk-1.3.4-1/png/pngread.c ****       {
 144:fltk-1.3.4-1/png/pngread.c ****          png_handle_unknown(png_ptr, info_ptr, length, keep);
 145:fltk-1.3.4-1/png/pngread.c **** 
 146:fltk-1.3.4-1/png/pngread.c ****          if (chunk_name == png_PLTE)
 147:fltk-1.3.4-1/png/pngread.c ****             png_ptr->mode |= PNG_HAVE_PLTE;
 148:fltk-1.3.4-1/png/pngread.c **** 
 149:fltk-1.3.4-1/png/pngread.c ****          else if (chunk_name == png_IDAT)
 150:fltk-1.3.4-1/png/pngread.c ****          {
 151:fltk-1.3.4-1/png/pngread.c ****             png_ptr->idat_size = 0; /* It has been consumed */
 152:fltk-1.3.4-1/png/pngread.c ****             break;
 153:fltk-1.3.4-1/png/pngread.c ****          }
 154:fltk-1.3.4-1/png/pngread.c ****       }
 155:fltk-1.3.4-1/png/pngread.c **** #endif
 156:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_PLTE)
 157:fltk-1.3.4-1/png/pngread.c ****          png_handle_PLTE(png_ptr, info_ptr, length);
 158:fltk-1.3.4-1/png/pngread.c **** 
 159:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_IDAT)
 160:fltk-1.3.4-1/png/pngread.c ****       {
 161:fltk-1.3.4-1/png/pngread.c ****          png_ptr->idat_size = length;
 162:fltk-1.3.4-1/png/pngread.c ****          break;
 163:fltk-1.3.4-1/png/pngread.c ****       }
 164:fltk-1.3.4-1/png/pngread.c **** 
 165:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_bKGD_SUPPORTED
 166:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_bKGD)
 167:fltk-1.3.4-1/png/pngread.c ****          png_handle_bKGD(png_ptr, info_ptr, length);
 168:fltk-1.3.4-1/png/pngread.c **** #endif
 169:fltk-1.3.4-1/png/pngread.c **** 
 170:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_cHRM_SUPPORTED
 171:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_cHRM)
 172:fltk-1.3.4-1/png/pngread.c ****          png_handle_cHRM(png_ptr, info_ptr, length);
 173:fltk-1.3.4-1/png/pngread.c **** #endif
 174:fltk-1.3.4-1/png/pngread.c **** 
 175:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_gAMA_SUPPORTED
 176:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_gAMA)
 177:fltk-1.3.4-1/png/pngread.c ****          png_handle_gAMA(png_ptr, info_ptr, length);
 178:fltk-1.3.4-1/png/pngread.c **** #endif
 179:fltk-1.3.4-1/png/pngread.c **** 
 180:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_hIST_SUPPORTED
 181:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_hIST)
 182:fltk-1.3.4-1/png/pngread.c ****          png_handle_hIST(png_ptr, info_ptr, length);
 183:fltk-1.3.4-1/png/pngread.c **** #endif
 184:fltk-1.3.4-1/png/pngread.c **** 
 185:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_oFFs_SUPPORTED
 186:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_oFFs)
 187:fltk-1.3.4-1/png/pngread.c ****          png_handle_oFFs(png_ptr, info_ptr, length);
 188:fltk-1.3.4-1/png/pngread.c **** #endif
 189:fltk-1.3.4-1/png/pngread.c **** 
 190:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_pCAL_SUPPORTED
 191:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_pCAL)
 192:fltk-1.3.4-1/png/pngread.c ****          png_handle_pCAL(png_ptr, info_ptr, length);
 193:fltk-1.3.4-1/png/pngread.c **** #endif
 194:fltk-1.3.4-1/png/pngread.c **** 
 195:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_sCAL_SUPPORTED
 196:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_sCAL)
 197:fltk-1.3.4-1/png/pngread.c ****          png_handle_sCAL(png_ptr, info_ptr, length);
 198:fltk-1.3.4-1/png/pngread.c **** #endif
 199:fltk-1.3.4-1/png/pngread.c **** 
 200:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_pHYs_SUPPORTED
 201:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_pHYs)
 202:fltk-1.3.4-1/png/pngread.c ****          png_handle_pHYs(png_ptr, info_ptr, length);
 203:fltk-1.3.4-1/png/pngread.c **** #endif
 204:fltk-1.3.4-1/png/pngread.c **** 
 205:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_sBIT_SUPPORTED
 206:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_sBIT)
 207:fltk-1.3.4-1/png/pngread.c ****          png_handle_sBIT(png_ptr, info_ptr, length);
 208:fltk-1.3.4-1/png/pngread.c **** #endif
 209:fltk-1.3.4-1/png/pngread.c **** 
 210:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_sRGB_SUPPORTED
 211:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_sRGB)
 212:fltk-1.3.4-1/png/pngread.c ****          png_handle_sRGB(png_ptr, info_ptr, length);
 213:fltk-1.3.4-1/png/pngread.c **** #endif
 214:fltk-1.3.4-1/png/pngread.c **** 
 215:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_iCCP_SUPPORTED
 216:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_iCCP)
 217:fltk-1.3.4-1/png/pngread.c ****          png_handle_iCCP(png_ptr, info_ptr, length);
 218:fltk-1.3.4-1/png/pngread.c **** #endif
 219:fltk-1.3.4-1/png/pngread.c **** 
 220:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_sPLT_SUPPORTED
 221:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_sPLT)
 222:fltk-1.3.4-1/png/pngread.c ****          png_handle_sPLT(png_ptr, info_ptr, length);
 223:fltk-1.3.4-1/png/pngread.c **** #endif
 224:fltk-1.3.4-1/png/pngread.c **** 
 225:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_tEXt_SUPPORTED
 226:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_tEXt)
 227:fltk-1.3.4-1/png/pngread.c ****          png_handle_tEXt(png_ptr, info_ptr, length);
 228:fltk-1.3.4-1/png/pngread.c **** #endif
 229:fltk-1.3.4-1/png/pngread.c **** 
 230:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_tIME_SUPPORTED
 231:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_tIME)
 232:fltk-1.3.4-1/png/pngread.c ****          png_handle_tIME(png_ptr, info_ptr, length);
 233:fltk-1.3.4-1/png/pngread.c **** #endif
 234:fltk-1.3.4-1/png/pngread.c **** 
 235:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_tRNS_SUPPORTED
 236:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_tRNS)
 237:fltk-1.3.4-1/png/pngread.c ****          png_handle_tRNS(png_ptr, info_ptr, length);
 238:fltk-1.3.4-1/png/pngread.c **** #endif
 239:fltk-1.3.4-1/png/pngread.c **** 
 240:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_zTXt_SUPPORTED
 241:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_zTXt)
 242:fltk-1.3.4-1/png/pngread.c ****          png_handle_zTXt(png_ptr, info_ptr, length);
 243:fltk-1.3.4-1/png/pngread.c **** #endif
 244:fltk-1.3.4-1/png/pngread.c **** 
 245:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_iTXt_SUPPORTED
 246:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_iTXt)
 247:fltk-1.3.4-1/png/pngread.c ****          png_handle_iTXt(png_ptr, info_ptr, length);
 248:fltk-1.3.4-1/png/pngread.c **** #endif
 249:fltk-1.3.4-1/png/pngread.c **** 
 250:fltk-1.3.4-1/png/pngread.c ****       else
 251:fltk-1.3.4-1/png/pngread.c ****          png_handle_unknown(png_ptr, info_ptr, length,
 252:fltk-1.3.4-1/png/pngread.c ****             PNG_HANDLE_CHUNK_AS_DEFAULT);
 253:fltk-1.3.4-1/png/pngread.c ****    }
 254:fltk-1.3.4-1/png/pngread.c **** }
 255:fltk-1.3.4-1/png/pngread.c **** #endif /* SEQUENTIAL_READ */
 256:fltk-1.3.4-1/png/pngread.c **** 
 257:fltk-1.3.4-1/png/pngread.c **** /* Optional call to update the users info_ptr structure */
 258:fltk-1.3.4-1/png/pngread.c **** void PNGAPI
 259:fltk-1.3.4-1/png/pngread.c **** png_read_update_info(png_structrp png_ptr, png_inforp info_ptr)
 260:fltk-1.3.4-1/png/pngread.c **** {
 261:fltk-1.3.4-1/png/pngread.c ****    png_debug(1, "in png_read_update_info");
 262:fltk-1.3.4-1/png/pngread.c **** 
 263:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr != NULL)
 264:fltk-1.3.4-1/png/pngread.c ****    {
 265:fltk-1.3.4-1/png/pngread.c ****       if ((png_ptr->flags & PNG_FLAG_ROW_INIT) == 0)
 266:fltk-1.3.4-1/png/pngread.c ****       {
 267:fltk-1.3.4-1/png/pngread.c ****          png_read_start_row(png_ptr);
 268:fltk-1.3.4-1/png/pngread.c **** 
 269:fltk-1.3.4-1/png/pngread.c **** #        ifdef PNG_READ_TRANSFORMS_SUPPORTED
 270:fltk-1.3.4-1/png/pngread.c ****             png_read_transform_info(png_ptr, info_ptr);
 271:fltk-1.3.4-1/png/pngread.c **** #        else
 272:fltk-1.3.4-1/png/pngread.c ****             PNG_UNUSED(info_ptr)
 273:fltk-1.3.4-1/png/pngread.c **** #        endif
 274:fltk-1.3.4-1/png/pngread.c ****       }
 275:fltk-1.3.4-1/png/pngread.c **** 
 276:fltk-1.3.4-1/png/pngread.c ****       /* New in 1.6.0 this avoids the bug of doing the initializations twice */
 277:fltk-1.3.4-1/png/pngread.c ****       else
 278:fltk-1.3.4-1/png/pngread.c ****          png_app_error(png_ptr,
 279:fltk-1.3.4-1/png/pngread.c ****             "png_read_update_info/png_start_read_image: duplicate call");
 280:fltk-1.3.4-1/png/pngread.c ****    }
 281:fltk-1.3.4-1/png/pngread.c **** }
 282:fltk-1.3.4-1/png/pngread.c **** 
 283:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_SEQUENTIAL_READ_SUPPORTED
 284:fltk-1.3.4-1/png/pngread.c **** /* Initialize palette, background, etc, after transformations
 285:fltk-1.3.4-1/png/pngread.c ****  * are set, but before any reading takes place.  This allows
 286:fltk-1.3.4-1/png/pngread.c ****  * the user to obtain a gamma-corrected palette, for example.
 287:fltk-1.3.4-1/png/pngread.c ****  * If the user doesn't call this, we will do it ourselves.
 288:fltk-1.3.4-1/png/pngread.c ****  */
 289:fltk-1.3.4-1/png/pngread.c **** void PNGAPI
 290:fltk-1.3.4-1/png/pngread.c **** png_start_read_image(png_structrp png_ptr)
 291:fltk-1.3.4-1/png/pngread.c **** {
 292:fltk-1.3.4-1/png/pngread.c ****    png_debug(1, "in png_start_read_image");
 293:fltk-1.3.4-1/png/pngread.c **** 
 294:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr != NULL)
 295:fltk-1.3.4-1/png/pngread.c ****    {
 296:fltk-1.3.4-1/png/pngread.c ****       if ((png_ptr->flags & PNG_FLAG_ROW_INIT) == 0)
 297:fltk-1.3.4-1/png/pngread.c ****          png_read_start_row(png_ptr);
 298:fltk-1.3.4-1/png/pngread.c **** 
 299:fltk-1.3.4-1/png/pngread.c ****       /* New in 1.6.0 this avoids the bug of doing the initializations twice */
 300:fltk-1.3.4-1/png/pngread.c ****       else
 301:fltk-1.3.4-1/png/pngread.c ****          png_app_error(png_ptr,
 302:fltk-1.3.4-1/png/pngread.c ****             "png_start_read_image/png_read_update_info: duplicate call");
 303:fltk-1.3.4-1/png/pngread.c ****    }
 304:fltk-1.3.4-1/png/pngread.c **** }
 305:fltk-1.3.4-1/png/pngread.c **** #endif /* SEQUENTIAL_READ */
 306:fltk-1.3.4-1/png/pngread.c **** 
 307:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_SEQUENTIAL_READ_SUPPORTED
 308:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_MNG_FEATURES_SUPPORTED
 309:fltk-1.3.4-1/png/pngread.c **** /* Undoes intrapixel differencing,
 310:fltk-1.3.4-1/png/pngread.c ****  * NOTE: this is apparently only supported in the 'sequential' reader.
 311:fltk-1.3.4-1/png/pngread.c ****  */
 312:fltk-1.3.4-1/png/pngread.c **** static void
 313:fltk-1.3.4-1/png/pngread.c **** png_do_read_intrapixel(png_row_infop row_info, png_bytep row)
 314:fltk-1.3.4-1/png/pngread.c **** {
 315:fltk-1.3.4-1/png/pngread.c ****    png_debug(1, "in png_do_read_intrapixel");
 316:fltk-1.3.4-1/png/pngread.c **** 
 317:fltk-1.3.4-1/png/pngread.c ****    if (
 318:fltk-1.3.4-1/png/pngread.c ****        (row_info->color_type & PNG_COLOR_MASK_COLOR) != 0)
 319:fltk-1.3.4-1/png/pngread.c ****    {
 320:fltk-1.3.4-1/png/pngread.c ****       int bytes_per_pixel;
 321:fltk-1.3.4-1/png/pngread.c ****       png_uint_32 row_width = row_info->width;
 322:fltk-1.3.4-1/png/pngread.c **** 
 323:fltk-1.3.4-1/png/pngread.c ****       if (row_info->bit_depth == 8)
 324:fltk-1.3.4-1/png/pngread.c ****       {
 325:fltk-1.3.4-1/png/pngread.c ****          png_bytep rp;
 326:fltk-1.3.4-1/png/pngread.c ****          png_uint_32 i;
 327:fltk-1.3.4-1/png/pngread.c **** 
 328:fltk-1.3.4-1/png/pngread.c ****          if (row_info->color_type == PNG_COLOR_TYPE_RGB)
 329:fltk-1.3.4-1/png/pngread.c ****             bytes_per_pixel = 3;
 330:fltk-1.3.4-1/png/pngread.c **** 
 331:fltk-1.3.4-1/png/pngread.c ****          else if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
 332:fltk-1.3.4-1/png/pngread.c ****             bytes_per_pixel = 4;
 333:fltk-1.3.4-1/png/pngread.c **** 
 334:fltk-1.3.4-1/png/pngread.c ****          else
 335:fltk-1.3.4-1/png/pngread.c ****             return;
 336:fltk-1.3.4-1/png/pngread.c **** 
 337:fltk-1.3.4-1/png/pngread.c ****          for (i = 0, rp = row; i < row_width; i++, rp += bytes_per_pixel)
 338:fltk-1.3.4-1/png/pngread.c ****          {
 339:fltk-1.3.4-1/png/pngread.c ****             *(rp) = (png_byte)((256 + *rp + *(rp + 1)) & 0xff);
 340:fltk-1.3.4-1/png/pngread.c ****             *(rp+2) = (png_byte)((256 + *(rp + 2) + *(rp + 1)) & 0xff);
 341:fltk-1.3.4-1/png/pngread.c ****          }
 342:fltk-1.3.4-1/png/pngread.c ****       }
 343:fltk-1.3.4-1/png/pngread.c ****       else if (row_info->bit_depth == 16)
 344:fltk-1.3.4-1/png/pngread.c ****       {
 345:fltk-1.3.4-1/png/pngread.c ****          png_bytep rp;
 346:fltk-1.3.4-1/png/pngread.c ****          png_uint_32 i;
 347:fltk-1.3.4-1/png/pngread.c **** 
 348:fltk-1.3.4-1/png/pngread.c ****          if (row_info->color_type == PNG_COLOR_TYPE_RGB)
 349:fltk-1.3.4-1/png/pngread.c ****             bytes_per_pixel = 6;
 350:fltk-1.3.4-1/png/pngread.c **** 
 351:fltk-1.3.4-1/png/pngread.c ****          else if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
 352:fltk-1.3.4-1/png/pngread.c ****             bytes_per_pixel = 8;
 353:fltk-1.3.4-1/png/pngread.c **** 
 354:fltk-1.3.4-1/png/pngread.c ****          else
 355:fltk-1.3.4-1/png/pngread.c ****             return;
 356:fltk-1.3.4-1/png/pngread.c **** 
 357:fltk-1.3.4-1/png/pngread.c ****          for (i = 0, rp = row; i < row_width; i++, rp += bytes_per_pixel)
 358:fltk-1.3.4-1/png/pngread.c ****          {
 359:fltk-1.3.4-1/png/pngread.c ****             png_uint_32 s0   = (*(rp    ) << 8) | *(rp + 1);
 360:fltk-1.3.4-1/png/pngread.c ****             png_uint_32 s1   = (*(rp + 2) << 8) | *(rp + 3);
 361:fltk-1.3.4-1/png/pngread.c ****             png_uint_32 s2   = (*(rp + 4) << 8) | *(rp + 5);
 362:fltk-1.3.4-1/png/pngread.c ****             png_uint_32 red  = (s0 + s1 + 65536) & 0xffff;
 363:fltk-1.3.4-1/png/pngread.c ****             png_uint_32 blue = (s2 + s1 + 65536) & 0xffff;
 364:fltk-1.3.4-1/png/pngread.c ****             *(rp    ) = (png_byte)((red >> 8) & 0xff);
 365:fltk-1.3.4-1/png/pngread.c ****             *(rp + 1) = (png_byte)(red & 0xff);
 366:fltk-1.3.4-1/png/pngread.c ****             *(rp + 4) = (png_byte)((blue >> 8) & 0xff);
 367:fltk-1.3.4-1/png/pngread.c ****             *(rp + 5) = (png_byte)(blue & 0xff);
 368:fltk-1.3.4-1/png/pngread.c ****          }
 369:fltk-1.3.4-1/png/pngread.c ****       }
 370:fltk-1.3.4-1/png/pngread.c ****    }
 371:fltk-1.3.4-1/png/pngread.c **** }
 372:fltk-1.3.4-1/png/pngread.c **** #endif /* MNG_FEATURES */
 373:fltk-1.3.4-1/png/pngread.c **** 
 374:fltk-1.3.4-1/png/pngread.c **** void PNGAPI
 375:fltk-1.3.4-1/png/pngread.c **** png_read_row(png_structrp png_ptr, png_bytep row, png_bytep dsp_row)
 376:fltk-1.3.4-1/png/pngread.c **** {
 377:fltk-1.3.4-1/png/pngread.c ****    png_row_info row_info;
 378:fltk-1.3.4-1/png/pngread.c **** 
 379:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr == NULL)
 380:fltk-1.3.4-1/png/pngread.c ****       return;
 381:fltk-1.3.4-1/png/pngread.c **** 
 382:fltk-1.3.4-1/png/pngread.c ****    png_debug2(1, "in png_read_row (row %lu, pass %d)",
 383:fltk-1.3.4-1/png/pngread.c ****        (unsigned long)png_ptr->row_number, png_ptr->pass);
 384:fltk-1.3.4-1/png/pngread.c **** 
 385:fltk-1.3.4-1/png/pngread.c ****    /* png_read_start_row sets the information (in particular iwidth) for this
 386:fltk-1.3.4-1/png/pngread.c ****     * interlace pass.
 387:fltk-1.3.4-1/png/pngread.c ****     */
 388:fltk-1.3.4-1/png/pngread.c ****    if ((png_ptr->flags & PNG_FLAG_ROW_INIT) == 0)
 389:fltk-1.3.4-1/png/pngread.c ****       png_read_start_row(png_ptr);
 390:fltk-1.3.4-1/png/pngread.c **** 
 391:fltk-1.3.4-1/png/pngread.c ****    /* 1.5.6: row_info moved out of png_struct to a local here. */
 392:fltk-1.3.4-1/png/pngread.c ****    row_info.width = png_ptr->iwidth; /* NOTE: width of current interlaced row */
 393:fltk-1.3.4-1/png/pngread.c ****    row_info.color_type = png_ptr->color_type;
 394:fltk-1.3.4-1/png/pngread.c ****    row_info.bit_depth = png_ptr->bit_depth;
 395:fltk-1.3.4-1/png/pngread.c ****    row_info.channels = png_ptr->channels;
 396:fltk-1.3.4-1/png/pngread.c ****    row_info.pixel_depth = png_ptr->pixel_depth;
 397:fltk-1.3.4-1/png/pngread.c ****    row_info.rowbytes = PNG_ROWBYTES(row_info.pixel_depth, row_info.width);
 398:fltk-1.3.4-1/png/pngread.c **** 
 399:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_WARNINGS_SUPPORTED
 400:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr->row_number == 0 && png_ptr->pass == 0)
 401:fltk-1.3.4-1/png/pngread.c ****    {
 402:fltk-1.3.4-1/png/pngread.c ****    /* Check for transforms that have been set but were defined out */
 403:fltk-1.3.4-1/png/pngread.c **** #if defined(PNG_WRITE_INVERT_SUPPORTED) && !defined(PNG_READ_INVERT_SUPPORTED)
 404:fltk-1.3.4-1/png/pngread.c ****    if ((png_ptr->transformations & PNG_INVERT_MONO) != 0)
 405:fltk-1.3.4-1/png/pngread.c ****       png_warning(png_ptr, "PNG_READ_INVERT_SUPPORTED is not defined");
 406:fltk-1.3.4-1/png/pngread.c **** #endif
 407:fltk-1.3.4-1/png/pngread.c **** 
 408:fltk-1.3.4-1/png/pngread.c **** #if defined(PNG_WRITE_FILLER_SUPPORTED) && !defined(PNG_READ_FILLER_SUPPORTED)
 409:fltk-1.3.4-1/png/pngread.c ****    if ((png_ptr->transformations & PNG_FILLER) != 0)
 410:fltk-1.3.4-1/png/pngread.c ****       png_warning(png_ptr, "PNG_READ_FILLER_SUPPORTED is not defined");
 411:fltk-1.3.4-1/png/pngread.c **** #endif
 412:fltk-1.3.4-1/png/pngread.c **** 
 413:fltk-1.3.4-1/png/pngread.c **** #if defined(PNG_WRITE_PACKSWAP_SUPPORTED) && \
 414:fltk-1.3.4-1/png/pngread.c ****     !defined(PNG_READ_PACKSWAP_SUPPORTED)
 415:fltk-1.3.4-1/png/pngread.c ****    if ((png_ptr->transformations & PNG_PACKSWAP) != 0)
 416:fltk-1.3.4-1/png/pngread.c ****       png_warning(png_ptr, "PNG_READ_PACKSWAP_SUPPORTED is not defined");
 417:fltk-1.3.4-1/png/pngread.c **** #endif
 418:fltk-1.3.4-1/png/pngread.c **** 
 419:fltk-1.3.4-1/png/pngread.c **** #if defined(PNG_WRITE_PACK_SUPPORTED) && !defined(PNG_READ_PACK_SUPPORTED)
 420:fltk-1.3.4-1/png/pngread.c ****    if ((png_ptr->transformations & PNG_PACK) != 0)
 421:fltk-1.3.4-1/png/pngread.c ****       png_warning(png_ptr, "PNG_READ_PACK_SUPPORTED is not defined");
 422:fltk-1.3.4-1/png/pngread.c **** #endif
 423:fltk-1.3.4-1/png/pngread.c **** 
 424:fltk-1.3.4-1/png/pngread.c **** #if defined(PNG_WRITE_SHIFT_SUPPORTED) && !defined(PNG_READ_SHIFT_SUPPORTED)
 425:fltk-1.3.4-1/png/pngread.c ****    if ((png_ptr->transformations & PNG_SHIFT) != 0)
 426:fltk-1.3.4-1/png/pngread.c ****       png_warning(png_ptr, "PNG_READ_SHIFT_SUPPORTED is not defined");
 427:fltk-1.3.4-1/png/pngread.c **** #endif
 428:fltk-1.3.4-1/png/pngread.c **** 
 429:fltk-1.3.4-1/png/pngread.c **** #if defined(PNG_WRITE_BGR_SUPPORTED) && !defined(PNG_READ_BGR_SUPPORTED)
 430:fltk-1.3.4-1/png/pngread.c ****    if ((png_ptr->transformations & PNG_BGR) != 0)
 431:fltk-1.3.4-1/png/pngread.c ****       png_warning(png_ptr, "PNG_READ_BGR_SUPPORTED is not defined");
 432:fltk-1.3.4-1/png/pngread.c **** #endif
 433:fltk-1.3.4-1/png/pngread.c **** 
 434:fltk-1.3.4-1/png/pngread.c **** #if defined(PNG_WRITE_SWAP_SUPPORTED) && !defined(PNG_READ_SWAP_SUPPORTED)
 435:fltk-1.3.4-1/png/pngread.c ****    if ((png_ptr->transformations & PNG_SWAP_BYTES) != 0)
 436:fltk-1.3.4-1/png/pngread.c ****       png_warning(png_ptr, "PNG_READ_SWAP_SUPPORTED is not defined");
 437:fltk-1.3.4-1/png/pngread.c **** #endif
 438:fltk-1.3.4-1/png/pngread.c ****    }
 439:fltk-1.3.4-1/png/pngread.c **** #endif /* WARNINGS */
 440:fltk-1.3.4-1/png/pngread.c **** 
 441:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_INTERLACING_SUPPORTED
 442:fltk-1.3.4-1/png/pngread.c ****    /* If interlaced and we do not need a new row, combine row and return.
 443:fltk-1.3.4-1/png/pngread.c ****     * Notice that the pixels we have from previous rows have been transformed
 444:fltk-1.3.4-1/png/pngread.c ****     * already; we can only combine like with like (transformed or
 445:fltk-1.3.4-1/png/pngread.c ****     * untransformed) and, because of the libpng API for interlaced images, this
 446:fltk-1.3.4-1/png/pngread.c ****     * means we must transform before de-interlacing.
 447:fltk-1.3.4-1/png/pngread.c ****     */
 448:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr->interlaced != 0 &&
 449:fltk-1.3.4-1/png/pngread.c ****        (png_ptr->transformations & PNG_INTERLACE) != 0)
 450:fltk-1.3.4-1/png/pngread.c ****    {
 451:fltk-1.3.4-1/png/pngread.c ****       switch (png_ptr->pass)
 452:fltk-1.3.4-1/png/pngread.c ****       {
 453:fltk-1.3.4-1/png/pngread.c ****          case 0:
 454:fltk-1.3.4-1/png/pngread.c ****             if (png_ptr->row_number & 0x07)
 455:fltk-1.3.4-1/png/pngread.c ****             {
 456:fltk-1.3.4-1/png/pngread.c ****                if (dsp_row != NULL)
 457:fltk-1.3.4-1/png/pngread.c ****                   png_combine_row(png_ptr, dsp_row, 1/*display*/);
 458:fltk-1.3.4-1/png/pngread.c ****                png_read_finish_row(png_ptr);
 459:fltk-1.3.4-1/png/pngread.c ****                return;
 460:fltk-1.3.4-1/png/pngread.c ****             }
 461:fltk-1.3.4-1/png/pngread.c ****             break;
 462:fltk-1.3.4-1/png/pngread.c **** 
 463:fltk-1.3.4-1/png/pngread.c ****          case 1:
 464:fltk-1.3.4-1/png/pngread.c ****             if ((png_ptr->row_number & 0x07) || png_ptr->width < 5)
 465:fltk-1.3.4-1/png/pngread.c ****             {
 466:fltk-1.3.4-1/png/pngread.c ****                if (dsp_row != NULL)
 467:fltk-1.3.4-1/png/pngread.c ****                   png_combine_row(png_ptr, dsp_row, 1/*display*/);
 468:fltk-1.3.4-1/png/pngread.c **** 
 469:fltk-1.3.4-1/png/pngread.c ****                png_read_finish_row(png_ptr);
 470:fltk-1.3.4-1/png/pngread.c ****                return;
 471:fltk-1.3.4-1/png/pngread.c ****             }
 472:fltk-1.3.4-1/png/pngread.c ****             break;
 473:fltk-1.3.4-1/png/pngread.c **** 
 474:fltk-1.3.4-1/png/pngread.c ****          case 2:
 475:fltk-1.3.4-1/png/pngread.c ****             if ((png_ptr->row_number & 0x07) != 4)
 476:fltk-1.3.4-1/png/pngread.c ****             {
 477:fltk-1.3.4-1/png/pngread.c ****                if (dsp_row != NULL && (png_ptr->row_number & 4))
 478:fltk-1.3.4-1/png/pngread.c ****                   png_combine_row(png_ptr, dsp_row, 1/*display*/);
 479:fltk-1.3.4-1/png/pngread.c **** 
 480:fltk-1.3.4-1/png/pngread.c ****                png_read_finish_row(png_ptr);
 481:fltk-1.3.4-1/png/pngread.c ****                return;
 482:fltk-1.3.4-1/png/pngread.c ****             }
 483:fltk-1.3.4-1/png/pngread.c ****             break;
 484:fltk-1.3.4-1/png/pngread.c **** 
 485:fltk-1.3.4-1/png/pngread.c ****          case 3:
 486:fltk-1.3.4-1/png/pngread.c ****             if ((png_ptr->row_number & 3) || png_ptr->width < 3)
 487:fltk-1.3.4-1/png/pngread.c ****             {
 488:fltk-1.3.4-1/png/pngread.c ****                if (dsp_row != NULL)
 489:fltk-1.3.4-1/png/pngread.c ****                   png_combine_row(png_ptr, dsp_row, 1/*display*/);
 490:fltk-1.3.4-1/png/pngread.c **** 
 491:fltk-1.3.4-1/png/pngread.c ****                png_read_finish_row(png_ptr);
 492:fltk-1.3.4-1/png/pngread.c ****                return;
 493:fltk-1.3.4-1/png/pngread.c ****             }
 494:fltk-1.3.4-1/png/pngread.c ****             break;
 495:fltk-1.3.4-1/png/pngread.c **** 
 496:fltk-1.3.4-1/png/pngread.c ****          case 4:
 497:fltk-1.3.4-1/png/pngread.c ****             if ((png_ptr->row_number & 3) != 2)
 498:fltk-1.3.4-1/png/pngread.c ****             {
 499:fltk-1.3.4-1/png/pngread.c ****                if (dsp_row != NULL && (png_ptr->row_number & 2))
 500:fltk-1.3.4-1/png/pngread.c ****                   png_combine_row(png_ptr, dsp_row, 1/*display*/);
 501:fltk-1.3.4-1/png/pngread.c **** 
 502:fltk-1.3.4-1/png/pngread.c ****                png_read_finish_row(png_ptr);
 503:fltk-1.3.4-1/png/pngread.c ****                return;
 504:fltk-1.3.4-1/png/pngread.c ****             }
 505:fltk-1.3.4-1/png/pngread.c ****             break;
 506:fltk-1.3.4-1/png/pngread.c **** 
 507:fltk-1.3.4-1/png/pngread.c ****          case 5:
 508:fltk-1.3.4-1/png/pngread.c ****             if ((png_ptr->row_number & 1) || png_ptr->width < 2)
 509:fltk-1.3.4-1/png/pngread.c ****             {
 510:fltk-1.3.4-1/png/pngread.c ****                if (dsp_row != NULL)
 511:fltk-1.3.4-1/png/pngread.c ****                   png_combine_row(png_ptr, dsp_row, 1/*display*/);
 512:fltk-1.3.4-1/png/pngread.c **** 
 513:fltk-1.3.4-1/png/pngread.c ****                png_read_finish_row(png_ptr);
 514:fltk-1.3.4-1/png/pngread.c ****                return;
 515:fltk-1.3.4-1/png/pngread.c ****             }
 516:fltk-1.3.4-1/png/pngread.c ****             break;
 517:fltk-1.3.4-1/png/pngread.c **** 
 518:fltk-1.3.4-1/png/pngread.c ****          default:
 519:fltk-1.3.4-1/png/pngread.c ****          case 6:
 520:fltk-1.3.4-1/png/pngread.c ****             if ((png_ptr->row_number & 1) == 0)
 521:fltk-1.3.4-1/png/pngread.c ****             {
 522:fltk-1.3.4-1/png/pngread.c ****                png_read_finish_row(png_ptr);
 523:fltk-1.3.4-1/png/pngread.c ****                return;
 524:fltk-1.3.4-1/png/pngread.c ****             }
 525:fltk-1.3.4-1/png/pngread.c ****             break;
 526:fltk-1.3.4-1/png/pngread.c ****       }
 527:fltk-1.3.4-1/png/pngread.c ****    }
 528:fltk-1.3.4-1/png/pngread.c **** #endif
 529:fltk-1.3.4-1/png/pngread.c **** 
 530:fltk-1.3.4-1/png/pngread.c ****    if ((png_ptr->mode & PNG_HAVE_IDAT) == 0)
 531:fltk-1.3.4-1/png/pngread.c ****       png_error(png_ptr, "Invalid attempt to read row data");
 532:fltk-1.3.4-1/png/pngread.c **** 
 533:fltk-1.3.4-1/png/pngread.c ****    /* Fill the row with IDAT data: */
 534:fltk-1.3.4-1/png/pngread.c ****    png_read_IDAT_data(png_ptr, png_ptr->row_buf, row_info.rowbytes + 1);
 535:fltk-1.3.4-1/png/pngread.c **** 
 536:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr->row_buf[0] > PNG_FILTER_VALUE_NONE)
 537:fltk-1.3.4-1/png/pngread.c ****    {
 538:fltk-1.3.4-1/png/pngread.c ****       if (png_ptr->row_buf[0] < PNG_FILTER_VALUE_LAST)
 539:fltk-1.3.4-1/png/pngread.c ****          png_read_filter_row(png_ptr, &row_info, png_ptr->row_buf + 1,
 540:fltk-1.3.4-1/png/pngread.c ****             png_ptr->prev_row + 1, png_ptr->row_buf[0]);
 541:fltk-1.3.4-1/png/pngread.c ****       else
 542:fltk-1.3.4-1/png/pngread.c ****          png_error(png_ptr, "bad adaptive filter value");
 543:fltk-1.3.4-1/png/pngread.c ****    }
 544:fltk-1.3.4-1/png/pngread.c **** 
 545:fltk-1.3.4-1/png/pngread.c ****    /* libpng 1.5.6: the following line was copying png_ptr->rowbytes before
 546:fltk-1.3.4-1/png/pngread.c ****     * 1.5.6, while the buffer really is this big in current versions of libpng
 547:fltk-1.3.4-1/png/pngread.c ****     * it may not be in the future, so this was changed just to copy the
 548:fltk-1.3.4-1/png/pngread.c ****     * interlaced count:
 549:fltk-1.3.4-1/png/pngread.c ****     */
 550:fltk-1.3.4-1/png/pngread.c ****    memcpy(png_ptr->prev_row, png_ptr->row_buf, row_info.rowbytes + 1);
 551:fltk-1.3.4-1/png/pngread.c **** 
 552:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_MNG_FEATURES_SUPPORTED
 553:fltk-1.3.4-1/png/pngread.c ****    if ((png_ptr->mng_features_permitted & PNG_FLAG_MNG_FILTER_64) != 0 &&
 554:fltk-1.3.4-1/png/pngread.c ****        (png_ptr->filter_type == PNG_INTRAPIXEL_DIFFERENCING))
 555:fltk-1.3.4-1/png/pngread.c ****    {
 556:fltk-1.3.4-1/png/pngread.c ****       /* Intrapixel differencing */
 557:fltk-1.3.4-1/png/pngread.c ****       png_do_read_intrapixel(&row_info, png_ptr->row_buf + 1);
 558:fltk-1.3.4-1/png/pngread.c ****    }
 559:fltk-1.3.4-1/png/pngread.c **** #endif
 560:fltk-1.3.4-1/png/pngread.c **** 
 561:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_TRANSFORMS_SUPPORTED
 562:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr->transformations)
 563:fltk-1.3.4-1/png/pngread.c ****       png_do_read_transformations(png_ptr, &row_info);
 564:fltk-1.3.4-1/png/pngread.c **** #endif
 565:fltk-1.3.4-1/png/pngread.c **** 
 566:fltk-1.3.4-1/png/pngread.c ****    /* The transformed pixel depth should match the depth now in row_info. */
 567:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr->transformed_pixel_depth == 0)
 568:fltk-1.3.4-1/png/pngread.c ****    {
 569:fltk-1.3.4-1/png/pngread.c ****       png_ptr->transformed_pixel_depth = row_info.pixel_depth;
 570:fltk-1.3.4-1/png/pngread.c ****       if (row_info.pixel_depth > png_ptr->maximum_pixel_depth)
 571:fltk-1.3.4-1/png/pngread.c ****          png_error(png_ptr, "sequential row overflow");
 572:fltk-1.3.4-1/png/pngread.c ****    }
 573:fltk-1.3.4-1/png/pngread.c **** 
 574:fltk-1.3.4-1/png/pngread.c ****    else if (png_ptr->transformed_pixel_depth != row_info.pixel_depth)
 575:fltk-1.3.4-1/png/pngread.c ****       png_error(png_ptr, "internal sequential row size calculation error");
 576:fltk-1.3.4-1/png/pngread.c **** 
 577:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_INTERLACING_SUPPORTED
 578:fltk-1.3.4-1/png/pngread.c ****    /* Expand interlaced rows to full size */
 579:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr->interlaced != 0 &&
 580:fltk-1.3.4-1/png/pngread.c ****       (png_ptr->transformations & PNG_INTERLACE) != 0)
 581:fltk-1.3.4-1/png/pngread.c ****    {
 582:fltk-1.3.4-1/png/pngread.c ****       if (png_ptr->pass < 6)
 583:fltk-1.3.4-1/png/pngread.c ****          png_do_read_interlace(&row_info, png_ptr->row_buf + 1, png_ptr->pass,
 584:fltk-1.3.4-1/png/pngread.c ****             png_ptr->transformations);
 585:fltk-1.3.4-1/png/pngread.c **** 
 586:fltk-1.3.4-1/png/pngread.c ****       if (dsp_row != NULL)
 587:fltk-1.3.4-1/png/pngread.c ****          png_combine_row(png_ptr, dsp_row, 1/*display*/);
 588:fltk-1.3.4-1/png/pngread.c **** 
 589:fltk-1.3.4-1/png/pngread.c ****       if (row != NULL)
 590:fltk-1.3.4-1/png/pngread.c ****          png_combine_row(png_ptr, row, 0/*row*/);
 591:fltk-1.3.4-1/png/pngread.c ****    }
 592:fltk-1.3.4-1/png/pngread.c **** 
 593:fltk-1.3.4-1/png/pngread.c ****    else
 594:fltk-1.3.4-1/png/pngread.c **** #endif
 595:fltk-1.3.4-1/png/pngread.c ****    {
 596:fltk-1.3.4-1/png/pngread.c ****       if (row != NULL)
 597:fltk-1.3.4-1/png/pngread.c ****          png_combine_row(png_ptr, row, -1/*ignored*/);
 598:fltk-1.3.4-1/png/pngread.c **** 
 599:fltk-1.3.4-1/png/pngread.c ****       if (dsp_row != NULL)
 600:fltk-1.3.4-1/png/pngread.c ****          png_combine_row(png_ptr, dsp_row, -1/*ignored*/);
 601:fltk-1.3.4-1/png/pngread.c ****    }
 602:fltk-1.3.4-1/png/pngread.c ****    png_read_finish_row(png_ptr);
 603:fltk-1.3.4-1/png/pngread.c **** 
 604:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr->read_row_fn != NULL)
 605:fltk-1.3.4-1/png/pngread.c ****       (*(png_ptr->read_row_fn))(png_ptr, png_ptr->row_number, png_ptr->pass);
 606:fltk-1.3.4-1/png/pngread.c **** 
 607:fltk-1.3.4-1/png/pngread.c **** }
 608:fltk-1.3.4-1/png/pngread.c **** #endif /* SEQUENTIAL_READ */
 609:fltk-1.3.4-1/png/pngread.c **** 
 610:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_SEQUENTIAL_READ_SUPPORTED
 611:fltk-1.3.4-1/png/pngread.c **** /* Read one or more rows of image data.  If the image is interlaced,
 612:fltk-1.3.4-1/png/pngread.c ****  * and png_set_interlace_handling() has been called, the rows need to
 613:fltk-1.3.4-1/png/pngread.c ****  * contain the contents of the rows from the previous pass.  If the
 614:fltk-1.3.4-1/png/pngread.c ****  * image has alpha or transparency, and png_handle_alpha()[*] has been
 615:fltk-1.3.4-1/png/pngread.c ****  * called, the rows contents must be initialized to the contents of the
 616:fltk-1.3.4-1/png/pngread.c ****  * screen.
 617:fltk-1.3.4-1/png/pngread.c ****  *
 618:fltk-1.3.4-1/png/pngread.c ****  * "row" holds the actual image, and pixels are placed in it
 619:fltk-1.3.4-1/png/pngread.c ****  * as they arrive.  If the image is displayed after each pass, it will
 620:fltk-1.3.4-1/png/pngread.c ****  * appear to "sparkle" in.  "display_row" can be used to display a
 621:fltk-1.3.4-1/png/pngread.c ****  * "chunky" progressive image, with finer detail added as it becomes
 622:fltk-1.3.4-1/png/pngread.c ****  * available.  If you do not want this "chunky" display, you may pass
 623:fltk-1.3.4-1/png/pngread.c ****  * NULL for display_row.  If you do not want the sparkle display, and
 624:fltk-1.3.4-1/png/pngread.c ****  * you have not called png_handle_alpha(), you may pass NULL for rows.
 625:fltk-1.3.4-1/png/pngread.c ****  * If you have called png_handle_alpha(), and the image has either an
 626:fltk-1.3.4-1/png/pngread.c ****  * alpha channel or a transparency chunk, you must provide a buffer for
 627:fltk-1.3.4-1/png/pngread.c ****  * rows.  In this case, you do not have to provide a display_row buffer
 628:fltk-1.3.4-1/png/pngread.c ****  * also, but you may.  If the image is not interlaced, or if you have
 629:fltk-1.3.4-1/png/pngread.c ****  * not called png_set_interlace_handling(), the display_row buffer will
 630:fltk-1.3.4-1/png/pngread.c ****  * be ignored, so pass NULL to it.
 631:fltk-1.3.4-1/png/pngread.c ****  *
 632:fltk-1.3.4-1/png/pngread.c ****  * [*] png_handle_alpha() does not exist yet, as of this version of libpng
 633:fltk-1.3.4-1/png/pngread.c ****  */
 634:fltk-1.3.4-1/png/pngread.c **** 
 635:fltk-1.3.4-1/png/pngread.c **** void PNGAPI
 636:fltk-1.3.4-1/png/pngread.c **** png_read_rows(png_structrp png_ptr, png_bytepp row,
 637:fltk-1.3.4-1/png/pngread.c ****     png_bytepp display_row, png_uint_32 num_rows)
 638:fltk-1.3.4-1/png/pngread.c **** {
 639:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 i;
 640:fltk-1.3.4-1/png/pngread.c ****    png_bytepp rp;
 641:fltk-1.3.4-1/png/pngread.c ****    png_bytepp dp;
 642:fltk-1.3.4-1/png/pngread.c **** 
 643:fltk-1.3.4-1/png/pngread.c ****    png_debug(1, "in png_read_rows");
 644:fltk-1.3.4-1/png/pngread.c **** 
 645:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr == NULL)
 646:fltk-1.3.4-1/png/pngread.c ****       return;
 647:fltk-1.3.4-1/png/pngread.c **** 
 648:fltk-1.3.4-1/png/pngread.c ****    rp = row;
 649:fltk-1.3.4-1/png/pngread.c ****    dp = display_row;
 650:fltk-1.3.4-1/png/pngread.c ****    if (rp != NULL && dp != NULL)
 651:fltk-1.3.4-1/png/pngread.c ****       for (i = 0; i < num_rows; i++)
 652:fltk-1.3.4-1/png/pngread.c ****       {
 653:fltk-1.3.4-1/png/pngread.c ****          png_bytep rptr = *rp++;
 654:fltk-1.3.4-1/png/pngread.c ****          png_bytep dptr = *dp++;
 655:fltk-1.3.4-1/png/pngread.c **** 
 656:fltk-1.3.4-1/png/pngread.c ****          png_read_row(png_ptr, rptr, dptr);
 657:fltk-1.3.4-1/png/pngread.c ****       }
 658:fltk-1.3.4-1/png/pngread.c **** 
 659:fltk-1.3.4-1/png/pngread.c ****    else if (rp != NULL)
 660:fltk-1.3.4-1/png/pngread.c ****       for (i = 0; i < num_rows; i++)
 661:fltk-1.3.4-1/png/pngread.c ****       {
 662:fltk-1.3.4-1/png/pngread.c ****          png_bytep rptr = *rp;
 663:fltk-1.3.4-1/png/pngread.c ****          png_read_row(png_ptr, rptr, NULL);
 664:fltk-1.3.4-1/png/pngread.c ****          rp++;
 665:fltk-1.3.4-1/png/pngread.c ****       }
 666:fltk-1.3.4-1/png/pngread.c **** 
 667:fltk-1.3.4-1/png/pngread.c ****    else if (dp != NULL)
 668:fltk-1.3.4-1/png/pngread.c ****       for (i = 0; i < num_rows; i++)
 669:fltk-1.3.4-1/png/pngread.c ****       {
 670:fltk-1.3.4-1/png/pngread.c ****          png_bytep dptr = *dp;
 671:fltk-1.3.4-1/png/pngread.c ****          png_read_row(png_ptr, NULL, dptr);
 672:fltk-1.3.4-1/png/pngread.c ****          dp++;
 673:fltk-1.3.4-1/png/pngread.c ****       }
 674:fltk-1.3.4-1/png/pngread.c **** }
 675:fltk-1.3.4-1/png/pngread.c **** #endif /* SEQUENTIAL_READ */
 676:fltk-1.3.4-1/png/pngread.c **** 
 677:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_SEQUENTIAL_READ_SUPPORTED
 678:fltk-1.3.4-1/png/pngread.c **** /* Read the entire image.  If the image has an alpha channel or a tRNS
 679:fltk-1.3.4-1/png/pngread.c ****  * chunk, and you have called png_handle_alpha()[*], you will need to
 680:fltk-1.3.4-1/png/pngread.c ****  * initialize the image to the current image that PNG will be overlaying.
 681:fltk-1.3.4-1/png/pngread.c ****  * We set the num_rows again here, in case it was incorrectly set in
 682:fltk-1.3.4-1/png/pngread.c ****  * png_read_start_row() by a call to png_read_update_info() or
 683:fltk-1.3.4-1/png/pngread.c ****  * png_start_read_image() if png_set_interlace_handling() wasn't called
 684:fltk-1.3.4-1/png/pngread.c ****  * prior to either of these functions like it should have been.  You can
 685:fltk-1.3.4-1/png/pngread.c ****  * only call this function once.  If you desire to have an image for
 686:fltk-1.3.4-1/png/pngread.c ****  * each pass of a interlaced image, use png_read_rows() instead.
 687:fltk-1.3.4-1/png/pngread.c ****  *
 688:fltk-1.3.4-1/png/pngread.c ****  * [*] png_handle_alpha() does not exist yet, as of this version of libpng
 689:fltk-1.3.4-1/png/pngread.c ****  */
 690:fltk-1.3.4-1/png/pngread.c **** void PNGAPI
 691:fltk-1.3.4-1/png/pngread.c **** png_read_image(png_structrp png_ptr, png_bytepp image)
 692:fltk-1.3.4-1/png/pngread.c **** {
 693:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 i, image_height;
 694:fltk-1.3.4-1/png/pngread.c ****    int pass, j;
 695:fltk-1.3.4-1/png/pngread.c ****    png_bytepp rp;
 696:fltk-1.3.4-1/png/pngread.c **** 
 697:fltk-1.3.4-1/png/pngread.c ****    png_debug(1, "in png_read_image");
 698:fltk-1.3.4-1/png/pngread.c **** 
 699:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr == NULL)
 700:fltk-1.3.4-1/png/pngread.c ****       return;
 701:fltk-1.3.4-1/png/pngread.c **** 
 702:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_INTERLACING_SUPPORTED
 703:fltk-1.3.4-1/png/pngread.c ****    if ((png_ptr->flags & PNG_FLAG_ROW_INIT) == 0)
 704:fltk-1.3.4-1/png/pngread.c ****    {
 705:fltk-1.3.4-1/png/pngread.c ****       pass = png_set_interlace_handling(png_ptr);
 706:fltk-1.3.4-1/png/pngread.c ****       /* And make sure transforms are initialized. */
 707:fltk-1.3.4-1/png/pngread.c ****       png_start_read_image(png_ptr);
 708:fltk-1.3.4-1/png/pngread.c ****    }
 709:fltk-1.3.4-1/png/pngread.c ****    else
 710:fltk-1.3.4-1/png/pngread.c ****    {
 711:fltk-1.3.4-1/png/pngread.c ****       if (png_ptr->interlaced != 0 &&
 712:fltk-1.3.4-1/png/pngread.c ****           (png_ptr->transformations & PNG_INTERLACE) == 0)
 713:fltk-1.3.4-1/png/pngread.c ****       {
 714:fltk-1.3.4-1/png/pngread.c ****          /* Caller called png_start_read_image or png_read_update_info without
 715:fltk-1.3.4-1/png/pngread.c ****           * first turning on the PNG_INTERLACE transform.  We can fix this here,
 716:fltk-1.3.4-1/png/pngread.c ****           * but the caller should do it!
 717:fltk-1.3.4-1/png/pngread.c ****           */
 718:fltk-1.3.4-1/png/pngread.c ****          png_warning(png_ptr, "Interlace handling should be turned on when "
 719:fltk-1.3.4-1/png/pngread.c ****             "using png_read_image");
 720:fltk-1.3.4-1/png/pngread.c ****          /* Make sure this is set correctly */
 721:fltk-1.3.4-1/png/pngread.c ****          png_ptr->num_rows = png_ptr->height;
 722:fltk-1.3.4-1/png/pngread.c ****       }
 723:fltk-1.3.4-1/png/pngread.c **** 
 724:fltk-1.3.4-1/png/pngread.c ****       /* Obtain the pass number, which also turns on the PNG_INTERLACE flag in
 725:fltk-1.3.4-1/png/pngread.c ****        * the above error case.
 726:fltk-1.3.4-1/png/pngread.c ****        */
 727:fltk-1.3.4-1/png/pngread.c ****       pass = png_set_interlace_handling(png_ptr);
 728:fltk-1.3.4-1/png/pngread.c ****    }
 729:fltk-1.3.4-1/png/pngread.c **** #else
 730:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr->interlaced)
 731:fltk-1.3.4-1/png/pngread.c ****       png_error(png_ptr,
 732:fltk-1.3.4-1/png/pngread.c ****           "Cannot read interlaced image -- interlace handler disabled");
 733:fltk-1.3.4-1/png/pngread.c **** 
 734:fltk-1.3.4-1/png/pngread.c ****    pass = 1;
 735:fltk-1.3.4-1/png/pngread.c **** #endif
 736:fltk-1.3.4-1/png/pngread.c **** 
 737:fltk-1.3.4-1/png/pngread.c ****    image_height=png_ptr->height;
 738:fltk-1.3.4-1/png/pngread.c **** 
 739:fltk-1.3.4-1/png/pngread.c ****    for (j = 0; j < pass; j++)
 740:fltk-1.3.4-1/png/pngread.c ****    {
 741:fltk-1.3.4-1/png/pngread.c ****       rp = image;
 742:fltk-1.3.4-1/png/pngread.c ****       for (i = 0; i < image_height; i++)
 743:fltk-1.3.4-1/png/pngread.c ****       {
 744:fltk-1.3.4-1/png/pngread.c ****          png_read_row(png_ptr, *rp, NULL);
 745:fltk-1.3.4-1/png/pngread.c ****          rp++;
 746:fltk-1.3.4-1/png/pngread.c ****       }
 747:fltk-1.3.4-1/png/pngread.c ****    }
 748:fltk-1.3.4-1/png/pngread.c **** }
 749:fltk-1.3.4-1/png/pngread.c **** #endif /* SEQUENTIAL_READ */
 750:fltk-1.3.4-1/png/pngread.c **** 
 751:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_SEQUENTIAL_READ_SUPPORTED
 752:fltk-1.3.4-1/png/pngread.c **** /* Read the end of the PNG file.  Will not read past the end of the
 753:fltk-1.3.4-1/png/pngread.c ****  * file, will verify the end is accurate, and will read any comments
 754:fltk-1.3.4-1/png/pngread.c ****  * or time information at the end of the file, if info is not NULL.
 755:fltk-1.3.4-1/png/pngread.c ****  */
 756:fltk-1.3.4-1/png/pngread.c **** void PNGAPI
 757:fltk-1.3.4-1/png/pngread.c **** png_read_end(png_structrp png_ptr, png_inforp info_ptr)
 758:fltk-1.3.4-1/png/pngread.c **** {
 759:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED
 760:fltk-1.3.4-1/png/pngread.c ****    int keep;
 761:fltk-1.3.4-1/png/pngread.c **** #endif
 762:fltk-1.3.4-1/png/pngread.c **** 
 763:fltk-1.3.4-1/png/pngread.c ****    png_debug(1, "in png_read_end");
 764:fltk-1.3.4-1/png/pngread.c **** 
 765:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr == NULL)
 766:fltk-1.3.4-1/png/pngread.c ****       return;
 767:fltk-1.3.4-1/png/pngread.c **** 
 768:fltk-1.3.4-1/png/pngread.c ****    /* If png_read_end is called in the middle of reading the rows there may
 769:fltk-1.3.4-1/png/pngread.c ****     * still be pending IDAT data and an owned zstream.  Deal with this here.
 770:fltk-1.3.4-1/png/pngread.c ****     */
 771:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED
 772:fltk-1.3.4-1/png/pngread.c ****    if (png_chunk_unknown_handling(png_ptr, png_IDAT) == 0)
 773:fltk-1.3.4-1/png/pngread.c **** #endif
 774:fltk-1.3.4-1/png/pngread.c ****       png_read_finish_IDAT(png_ptr);
 775:fltk-1.3.4-1/png/pngread.c **** 
 776:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_CHECK_FOR_INVALID_INDEX_SUPPORTED
 777:fltk-1.3.4-1/png/pngread.c ****    /* Report invalid palette index; added at libng-1.5.10 */
 778:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE &&
 779:fltk-1.3.4-1/png/pngread.c ****       png_ptr->num_palette_max > png_ptr->num_palette)
 780:fltk-1.3.4-1/png/pngread.c ****      png_benign_error(png_ptr, "Read palette index exceeding num_palette");
 781:fltk-1.3.4-1/png/pngread.c **** #endif
 782:fltk-1.3.4-1/png/pngread.c **** 
 783:fltk-1.3.4-1/png/pngread.c ****    do
 784:fltk-1.3.4-1/png/pngread.c ****    {
 785:fltk-1.3.4-1/png/pngread.c ****       png_uint_32 length = png_read_chunk_header(png_ptr);
 786:fltk-1.3.4-1/png/pngread.c ****       png_uint_32 chunk_name = png_ptr->chunk_name;
 787:fltk-1.3.4-1/png/pngread.c **** 
 788:fltk-1.3.4-1/png/pngread.c ****       if (chunk_name == png_IEND)
 789:fltk-1.3.4-1/png/pngread.c ****          png_handle_IEND(png_ptr, info_ptr, length);
 790:fltk-1.3.4-1/png/pngread.c **** 
 791:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_IHDR)
 792:fltk-1.3.4-1/png/pngread.c ****          png_handle_IHDR(png_ptr, info_ptr, length);
 793:fltk-1.3.4-1/png/pngread.c **** 
 794:fltk-1.3.4-1/png/pngread.c ****       else if (info_ptr == NULL)
 795:fltk-1.3.4-1/png/pngread.c ****          png_crc_finish(png_ptr, length);
 796:fltk-1.3.4-1/png/pngread.c **** 
 797:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED
 798:fltk-1.3.4-1/png/pngread.c ****       else if ((keep = png_chunk_unknown_handling(png_ptr, chunk_name)) != 0)
 799:fltk-1.3.4-1/png/pngread.c ****       {
 800:fltk-1.3.4-1/png/pngread.c ****          if (chunk_name == png_IDAT)
 801:fltk-1.3.4-1/png/pngread.c ****          {
 802:fltk-1.3.4-1/png/pngread.c ****             if ((length > 0) ||
 803:fltk-1.3.4-1/png/pngread.c ****                 (png_ptr->mode & PNG_HAVE_CHUNK_AFTER_IDAT) != 0)
 804:fltk-1.3.4-1/png/pngread.c ****                png_benign_error(png_ptr, "Too many IDATs found");
 805:fltk-1.3.4-1/png/pngread.c ****          }
 806:fltk-1.3.4-1/png/pngread.c ****          png_handle_unknown(png_ptr, info_ptr, length, keep);
 807:fltk-1.3.4-1/png/pngread.c ****          if (chunk_name == png_PLTE)
 808:fltk-1.3.4-1/png/pngread.c ****             png_ptr->mode |= PNG_HAVE_PLTE;
 809:fltk-1.3.4-1/png/pngread.c ****       }
 810:fltk-1.3.4-1/png/pngread.c **** #endif
 811:fltk-1.3.4-1/png/pngread.c **** 
 812:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_IDAT)
 813:fltk-1.3.4-1/png/pngread.c ****       {
 814:fltk-1.3.4-1/png/pngread.c ****          /* Zero length IDATs are legal after the last IDAT has been
 815:fltk-1.3.4-1/png/pngread.c ****           * read, but not after other chunks have been read.
 816:fltk-1.3.4-1/png/pngread.c ****           */
 817:fltk-1.3.4-1/png/pngread.c ****          if ((length > 0) ||
 818:fltk-1.3.4-1/png/pngread.c ****              (png_ptr->mode & PNG_HAVE_CHUNK_AFTER_IDAT) != 0)
 819:fltk-1.3.4-1/png/pngread.c ****             png_benign_error(png_ptr, "Too many IDATs found");
 820:fltk-1.3.4-1/png/pngread.c **** 
 821:fltk-1.3.4-1/png/pngread.c ****          png_crc_finish(png_ptr, length);
 822:fltk-1.3.4-1/png/pngread.c ****       }
 823:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_PLTE)
 824:fltk-1.3.4-1/png/pngread.c ****          png_handle_PLTE(png_ptr, info_ptr, length);
 825:fltk-1.3.4-1/png/pngread.c **** 
 826:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_bKGD_SUPPORTED
 827:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_bKGD)
 828:fltk-1.3.4-1/png/pngread.c ****          png_handle_bKGD(png_ptr, info_ptr, length);
 829:fltk-1.3.4-1/png/pngread.c **** #endif
 830:fltk-1.3.4-1/png/pngread.c **** 
 831:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_cHRM_SUPPORTED
 832:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_cHRM)
 833:fltk-1.3.4-1/png/pngread.c ****          png_handle_cHRM(png_ptr, info_ptr, length);
 834:fltk-1.3.4-1/png/pngread.c **** #endif
 835:fltk-1.3.4-1/png/pngread.c **** 
 836:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_gAMA_SUPPORTED
 837:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_gAMA)
 838:fltk-1.3.4-1/png/pngread.c ****          png_handle_gAMA(png_ptr, info_ptr, length);
 839:fltk-1.3.4-1/png/pngread.c **** #endif
 840:fltk-1.3.4-1/png/pngread.c **** 
 841:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_hIST_SUPPORTED
 842:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_hIST)
 843:fltk-1.3.4-1/png/pngread.c ****          png_handle_hIST(png_ptr, info_ptr, length);
 844:fltk-1.3.4-1/png/pngread.c **** #endif
 845:fltk-1.3.4-1/png/pngread.c **** 
 846:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_oFFs_SUPPORTED
 847:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_oFFs)
 848:fltk-1.3.4-1/png/pngread.c ****          png_handle_oFFs(png_ptr, info_ptr, length);
 849:fltk-1.3.4-1/png/pngread.c **** #endif
 850:fltk-1.3.4-1/png/pngread.c **** 
 851:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_pCAL_SUPPORTED
 852:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_pCAL)
 853:fltk-1.3.4-1/png/pngread.c ****          png_handle_pCAL(png_ptr, info_ptr, length);
 854:fltk-1.3.4-1/png/pngread.c **** #endif
 855:fltk-1.3.4-1/png/pngread.c **** 
 856:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_sCAL_SUPPORTED
 857:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_sCAL)
 858:fltk-1.3.4-1/png/pngread.c ****          png_handle_sCAL(png_ptr, info_ptr, length);
 859:fltk-1.3.4-1/png/pngread.c **** #endif
 860:fltk-1.3.4-1/png/pngread.c **** 
 861:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_pHYs_SUPPORTED
 862:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_pHYs)
 863:fltk-1.3.4-1/png/pngread.c ****          png_handle_pHYs(png_ptr, info_ptr, length);
 864:fltk-1.3.4-1/png/pngread.c **** #endif
 865:fltk-1.3.4-1/png/pngread.c **** 
 866:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_sBIT_SUPPORTED
 867:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_sBIT)
 868:fltk-1.3.4-1/png/pngread.c ****          png_handle_sBIT(png_ptr, info_ptr, length);
 869:fltk-1.3.4-1/png/pngread.c **** #endif
 870:fltk-1.3.4-1/png/pngread.c **** 
 871:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_sRGB_SUPPORTED
 872:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_sRGB)
 873:fltk-1.3.4-1/png/pngread.c ****          png_handle_sRGB(png_ptr, info_ptr, length);
 874:fltk-1.3.4-1/png/pngread.c **** #endif
 875:fltk-1.3.4-1/png/pngread.c **** 
 876:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_iCCP_SUPPORTED
 877:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_iCCP)
 878:fltk-1.3.4-1/png/pngread.c ****          png_handle_iCCP(png_ptr, info_ptr, length);
 879:fltk-1.3.4-1/png/pngread.c **** #endif
 880:fltk-1.3.4-1/png/pngread.c **** 
 881:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_sPLT_SUPPORTED
 882:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_sPLT)
 883:fltk-1.3.4-1/png/pngread.c ****          png_handle_sPLT(png_ptr, info_ptr, length);
 884:fltk-1.3.4-1/png/pngread.c **** #endif
 885:fltk-1.3.4-1/png/pngread.c **** 
 886:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_tEXt_SUPPORTED
 887:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_tEXt)
 888:fltk-1.3.4-1/png/pngread.c ****          png_handle_tEXt(png_ptr, info_ptr, length);
 889:fltk-1.3.4-1/png/pngread.c **** #endif
 890:fltk-1.3.4-1/png/pngread.c **** 
 891:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_tIME_SUPPORTED
 892:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_tIME)
 893:fltk-1.3.4-1/png/pngread.c ****          png_handle_tIME(png_ptr, info_ptr, length);
 894:fltk-1.3.4-1/png/pngread.c **** #endif
 895:fltk-1.3.4-1/png/pngread.c **** 
 896:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_tRNS_SUPPORTED
 897:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_tRNS)
 898:fltk-1.3.4-1/png/pngread.c ****          png_handle_tRNS(png_ptr, info_ptr, length);
 899:fltk-1.3.4-1/png/pngread.c **** #endif
 900:fltk-1.3.4-1/png/pngread.c **** 
 901:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_zTXt_SUPPORTED
 902:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_zTXt)
 903:fltk-1.3.4-1/png/pngread.c ****          png_handle_zTXt(png_ptr, info_ptr, length);
 904:fltk-1.3.4-1/png/pngread.c **** #endif
 905:fltk-1.3.4-1/png/pngread.c **** 
 906:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_iTXt_SUPPORTED
 907:fltk-1.3.4-1/png/pngread.c ****       else if (chunk_name == png_iTXt)
 908:fltk-1.3.4-1/png/pngread.c ****          png_handle_iTXt(png_ptr, info_ptr, length);
 909:fltk-1.3.4-1/png/pngread.c **** #endif
 910:fltk-1.3.4-1/png/pngread.c **** 
 911:fltk-1.3.4-1/png/pngread.c ****       else
 912:fltk-1.3.4-1/png/pngread.c ****          png_handle_unknown(png_ptr, info_ptr, length,
 913:fltk-1.3.4-1/png/pngread.c ****             PNG_HANDLE_CHUNK_AS_DEFAULT);
 914:fltk-1.3.4-1/png/pngread.c ****    } while ((png_ptr->mode & PNG_HAVE_IEND) == 0);
 915:fltk-1.3.4-1/png/pngread.c **** }
 916:fltk-1.3.4-1/png/pngread.c **** #endif /* SEQUENTIAL_READ */
 917:fltk-1.3.4-1/png/pngread.c **** 
 918:fltk-1.3.4-1/png/pngread.c **** /* Free all memory used in the read struct */
 919:fltk-1.3.4-1/png/pngread.c **** static void
 920:fltk-1.3.4-1/png/pngread.c **** png_read_destroy(png_structrp png_ptr)
 921:fltk-1.3.4-1/png/pngread.c **** {
 922:fltk-1.3.4-1/png/pngread.c ****    png_debug(1, "in png_read_destroy");
 923:fltk-1.3.4-1/png/pngread.c **** 
 924:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_GAMMA_SUPPORTED
 925:fltk-1.3.4-1/png/pngread.c ****    png_destroy_gamma_table(png_ptr);
 926:fltk-1.3.4-1/png/pngread.c **** #endif
 927:fltk-1.3.4-1/png/pngread.c **** 
 928:fltk-1.3.4-1/png/pngread.c ****    png_free(png_ptr, png_ptr->big_row_buf);
 929:fltk-1.3.4-1/png/pngread.c ****    png_ptr->big_row_buf = NULL;
 930:fltk-1.3.4-1/png/pngread.c ****    png_free(png_ptr, png_ptr->big_prev_row);
 931:fltk-1.3.4-1/png/pngread.c ****    png_ptr->big_prev_row = NULL;
 932:fltk-1.3.4-1/png/pngread.c ****    png_free(png_ptr, png_ptr->read_buffer);
 933:fltk-1.3.4-1/png/pngread.c ****    png_ptr->read_buffer = NULL;
 934:fltk-1.3.4-1/png/pngread.c **** 
 935:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_QUANTIZE_SUPPORTED
 936:fltk-1.3.4-1/png/pngread.c ****    png_free(png_ptr, png_ptr->palette_lookup);
 937:fltk-1.3.4-1/png/pngread.c ****    png_ptr->palette_lookup = NULL;
 938:fltk-1.3.4-1/png/pngread.c ****    png_free(png_ptr, png_ptr->quantize_index);
 939:fltk-1.3.4-1/png/pngread.c ****    png_ptr->quantize_index = NULL;
 940:fltk-1.3.4-1/png/pngread.c **** #endif
 941:fltk-1.3.4-1/png/pngread.c **** 
 942:fltk-1.3.4-1/png/pngread.c ****    if ((png_ptr->free_me & PNG_FREE_PLTE) != 0)
 943:fltk-1.3.4-1/png/pngread.c ****    {
 944:fltk-1.3.4-1/png/pngread.c ****       png_zfree(png_ptr, png_ptr->palette);
 945:fltk-1.3.4-1/png/pngread.c ****       png_ptr->palette = NULL;
 946:fltk-1.3.4-1/png/pngread.c ****    }
 947:fltk-1.3.4-1/png/pngread.c ****    png_ptr->free_me &= ~PNG_FREE_PLTE;
 948:fltk-1.3.4-1/png/pngread.c **** 
 949:fltk-1.3.4-1/png/pngread.c **** #if defined(PNG_tRNS_SUPPORTED) || \
 950:fltk-1.3.4-1/png/pngread.c ****     defined(PNG_READ_EXPAND_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)
 951:fltk-1.3.4-1/png/pngread.c ****    if ((png_ptr->free_me & PNG_FREE_TRNS) != 0)
 952:fltk-1.3.4-1/png/pngread.c ****    {
 953:fltk-1.3.4-1/png/pngread.c ****       png_free(png_ptr, png_ptr->trans_alpha);
 954:fltk-1.3.4-1/png/pngread.c ****       png_ptr->trans_alpha = NULL;
 955:fltk-1.3.4-1/png/pngread.c ****    }
 956:fltk-1.3.4-1/png/pngread.c ****    png_ptr->free_me &= ~PNG_FREE_TRNS;
 957:fltk-1.3.4-1/png/pngread.c **** #endif
 958:fltk-1.3.4-1/png/pngread.c **** 
 959:fltk-1.3.4-1/png/pngread.c ****    inflateEnd(&png_ptr->zstream);
 960:fltk-1.3.4-1/png/pngread.c **** 
 961:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_PROGRESSIVE_READ_SUPPORTED
 962:fltk-1.3.4-1/png/pngread.c ****    png_free(png_ptr, png_ptr->save_buffer);
 963:fltk-1.3.4-1/png/pngread.c ****    png_ptr->save_buffer = NULL;
 964:fltk-1.3.4-1/png/pngread.c **** #endif
 965:fltk-1.3.4-1/png/pngread.c **** 
 966:fltk-1.3.4-1/png/pngread.c **** #if defined(PNG_STORE_UNKNOWN_CHUNKS_SUPPORTED) && \
 967:fltk-1.3.4-1/png/pngread.c ****    defined(PNG_READ_UNKNOWN_CHUNKS_SUPPORTED)
 968:fltk-1.3.4-1/png/pngread.c ****    png_free(png_ptr, png_ptr->unknown_chunk.data);
 969:fltk-1.3.4-1/png/pngread.c ****    png_ptr->unknown_chunk.data = NULL;
 970:fltk-1.3.4-1/png/pngread.c **** #endif
 971:fltk-1.3.4-1/png/pngread.c **** 
 972:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_SET_UNKNOWN_CHUNKS_SUPPORTED
 973:fltk-1.3.4-1/png/pngread.c ****    png_free(png_ptr, png_ptr->chunk_list);
 974:fltk-1.3.4-1/png/pngread.c ****    png_ptr->chunk_list = NULL;
 975:fltk-1.3.4-1/png/pngread.c **** #endif
 976:fltk-1.3.4-1/png/pngread.c **** 
 977:fltk-1.3.4-1/png/pngread.c ****    /* NOTE: the 'setjmp' buffer may still be allocated and the memory and error
 978:fltk-1.3.4-1/png/pngread.c ****     * callbacks are still set at this point.  They are required to complete the
 979:fltk-1.3.4-1/png/pngread.c ****     * destruction of the png_struct itself.
 980:fltk-1.3.4-1/png/pngread.c ****     */
 981:fltk-1.3.4-1/png/pngread.c **** }
 982:fltk-1.3.4-1/png/pngread.c **** 
 983:fltk-1.3.4-1/png/pngread.c **** /* Free all memory used by the read */
 984:fltk-1.3.4-1/png/pngread.c **** void PNGAPI
 985:fltk-1.3.4-1/png/pngread.c **** png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr,
 986:fltk-1.3.4-1/png/pngread.c ****     png_infopp end_info_ptr_ptr)
 987:fltk-1.3.4-1/png/pngread.c **** {
 988:fltk-1.3.4-1/png/pngread.c ****    png_structrp png_ptr = NULL;
 989:fltk-1.3.4-1/png/pngread.c **** 
 990:fltk-1.3.4-1/png/pngread.c ****    png_debug(1, "in png_destroy_read_struct");
 991:fltk-1.3.4-1/png/pngread.c **** 
 992:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr_ptr != NULL)
 993:fltk-1.3.4-1/png/pngread.c ****       png_ptr = *png_ptr_ptr;
 994:fltk-1.3.4-1/png/pngread.c **** 
 995:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr == NULL)
 996:fltk-1.3.4-1/png/pngread.c ****       return;
 997:fltk-1.3.4-1/png/pngread.c **** 
 998:fltk-1.3.4-1/png/pngread.c ****    /* libpng 1.6.0: use the API to destroy info structs to ensure consistent
 999:fltk-1.3.4-1/png/pngread.c ****     * behavior.  Prior to 1.6.0 libpng did extra 'info' destruction in this API.
1000:fltk-1.3.4-1/png/pngread.c ****     * The extra was, apparently, unnecessary yet this hides memory leak bugs.
1001:fltk-1.3.4-1/png/pngread.c ****     */
1002:fltk-1.3.4-1/png/pngread.c ****    png_destroy_info_struct(png_ptr, end_info_ptr_ptr);
1003:fltk-1.3.4-1/png/pngread.c ****    png_destroy_info_struct(png_ptr, info_ptr_ptr);
1004:fltk-1.3.4-1/png/pngread.c **** 
1005:fltk-1.3.4-1/png/pngread.c ****    *png_ptr_ptr = NULL;
1006:fltk-1.3.4-1/png/pngread.c ****    png_read_destroy(png_ptr);
1007:fltk-1.3.4-1/png/pngread.c ****    png_destroy_png_struct(png_ptr);
1008:fltk-1.3.4-1/png/pngread.c **** }
1009:fltk-1.3.4-1/png/pngread.c **** 
1010:fltk-1.3.4-1/png/pngread.c **** void PNGAPI
1011:fltk-1.3.4-1/png/pngread.c **** png_set_read_status_fn(png_structrp png_ptr, png_read_status_ptr read_row_fn)
1012:fltk-1.3.4-1/png/pngread.c **** {
1013:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr == NULL)
1014:fltk-1.3.4-1/png/pngread.c ****       return;
1015:fltk-1.3.4-1/png/pngread.c **** 
1016:fltk-1.3.4-1/png/pngread.c ****    png_ptr->read_row_fn = read_row_fn;
1017:fltk-1.3.4-1/png/pngread.c **** }
1018:fltk-1.3.4-1/png/pngread.c **** 
1019:fltk-1.3.4-1/png/pngread.c **** 
1020:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_SEQUENTIAL_READ_SUPPORTED
1021:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_INFO_IMAGE_SUPPORTED
1022:fltk-1.3.4-1/png/pngread.c **** void PNGAPI
1023:fltk-1.3.4-1/png/pngread.c **** png_read_png(png_structrp png_ptr, png_inforp info_ptr,
1024:fltk-1.3.4-1/png/pngread.c ****                            int transforms,
1025:fltk-1.3.4-1/png/pngread.c ****                            voidp params)
1026:fltk-1.3.4-1/png/pngread.c **** {
1027:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr == NULL || info_ptr == NULL)
1028:fltk-1.3.4-1/png/pngread.c ****       return;
1029:fltk-1.3.4-1/png/pngread.c **** 
1030:fltk-1.3.4-1/png/pngread.c ****    /* png_read_info() gives us all of the information from the
1031:fltk-1.3.4-1/png/pngread.c ****     * PNG file before the first IDAT (image data chunk).
1032:fltk-1.3.4-1/png/pngread.c ****     */
1033:fltk-1.3.4-1/png/pngread.c ****    png_read_info(png_ptr, info_ptr);
1034:fltk-1.3.4-1/png/pngread.c ****    if (info_ptr->height > PNG_UINT_32_MAX/(sizeof (png_bytep)))
1035:fltk-1.3.4-1/png/pngread.c ****       png_error(png_ptr, "Image is too high to process with png_read_png()");
1036:fltk-1.3.4-1/png/pngread.c **** 
1037:fltk-1.3.4-1/png/pngread.c ****    /* -------------- image transformations start here ------------------- */
1038:fltk-1.3.4-1/png/pngread.c ****    /* libpng 1.6.10: add code to cause a png_app_error if a selected TRANSFORM
1039:fltk-1.3.4-1/png/pngread.c ****     * is not implemented.  This will only happen in de-configured (non-default)
1040:fltk-1.3.4-1/png/pngread.c ****     * libpng builds.  The results can be unexpected - png_read_png may return
1041:fltk-1.3.4-1/png/pngread.c ****     * short or mal-formed rows because the transform is skipped.
1042:fltk-1.3.4-1/png/pngread.c ****     */
1043:fltk-1.3.4-1/png/pngread.c **** 
1044:fltk-1.3.4-1/png/pngread.c ****    /* Tell libpng to strip 16-bit/color files down to 8 bits per color.
1045:fltk-1.3.4-1/png/pngread.c ****     */
1046:fltk-1.3.4-1/png/pngread.c ****    if ((transforms & PNG_TRANSFORM_SCALE_16) != 0)
1047:fltk-1.3.4-1/png/pngread.c ****      /* Added at libpng-1.5.4. "strip_16" produces the same result that it
1048:fltk-1.3.4-1/png/pngread.c ****       * did in earlier versions, while "scale_16" is now more accurate.
1049:fltk-1.3.4-1/png/pngread.c ****       */
1050:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_SCALE_16_TO_8_SUPPORTED
1051:fltk-1.3.4-1/png/pngread.c ****       png_set_scale_16(png_ptr);
1052:fltk-1.3.4-1/png/pngread.c **** #else
1053:fltk-1.3.4-1/png/pngread.c ****       png_app_error(png_ptr, "PNG_TRANSFORM_SCALE_16 not supported");
1054:fltk-1.3.4-1/png/pngread.c **** #endif
1055:fltk-1.3.4-1/png/pngread.c **** 
1056:fltk-1.3.4-1/png/pngread.c ****    /* If both SCALE and STRIP are required pngrtran will effectively cancel the
1057:fltk-1.3.4-1/png/pngread.c ****     * latter by doing SCALE first.  This is ok and allows apps not to check for
1058:fltk-1.3.4-1/png/pngread.c ****     * which is supported to get the right answer.
1059:fltk-1.3.4-1/png/pngread.c ****     */
1060:fltk-1.3.4-1/png/pngread.c ****    if ((transforms & PNG_TRANSFORM_STRIP_16) != 0)
1061:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_STRIP_16_TO_8_SUPPORTED
1062:fltk-1.3.4-1/png/pngread.c ****       png_set_strip_16(png_ptr);
1063:fltk-1.3.4-1/png/pngread.c **** #else
1064:fltk-1.3.4-1/png/pngread.c ****       png_app_error(png_ptr, "PNG_TRANSFORM_STRIP_16 not supported");
1065:fltk-1.3.4-1/png/pngread.c **** #endif
1066:fltk-1.3.4-1/png/pngread.c **** 
1067:fltk-1.3.4-1/png/pngread.c ****    /* Strip alpha bytes from the input data without combining with
1068:fltk-1.3.4-1/png/pngread.c ****     * the background (not recommended).
1069:fltk-1.3.4-1/png/pngread.c ****     */
1070:fltk-1.3.4-1/png/pngread.c ****    if ((transforms & PNG_TRANSFORM_STRIP_ALPHA) != 0)
1071:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_STRIP_ALPHA_SUPPORTED
1072:fltk-1.3.4-1/png/pngread.c ****       png_set_strip_alpha(png_ptr);
1073:fltk-1.3.4-1/png/pngread.c **** #else
1074:fltk-1.3.4-1/png/pngread.c ****       png_app_error(png_ptr, "PNG_TRANSFORM_STRIP_ALPHA not supported");
1075:fltk-1.3.4-1/png/pngread.c **** #endif
1076:fltk-1.3.4-1/png/pngread.c **** 
1077:fltk-1.3.4-1/png/pngread.c ****    /* Extract multiple pixels with bit depths of 1, 2, or 4 from a single
1078:fltk-1.3.4-1/png/pngread.c ****     * byte into separate bytes (useful for paletted and grayscale images).
1079:fltk-1.3.4-1/png/pngread.c ****     */
1080:fltk-1.3.4-1/png/pngread.c ****    if ((transforms & PNG_TRANSFORM_PACKING) != 0)
1081:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_PACK_SUPPORTED
1082:fltk-1.3.4-1/png/pngread.c ****       png_set_packing(png_ptr);
1083:fltk-1.3.4-1/png/pngread.c **** #else
1084:fltk-1.3.4-1/png/pngread.c ****       png_app_error(png_ptr, "PNG_TRANSFORM_PACKING not supported");
1085:fltk-1.3.4-1/png/pngread.c **** #endif
1086:fltk-1.3.4-1/png/pngread.c **** 
1087:fltk-1.3.4-1/png/pngread.c ****    /* Change the order of packed pixels to least significant bit first
1088:fltk-1.3.4-1/png/pngread.c ****     * (not useful if you are using png_set_packing).
1089:fltk-1.3.4-1/png/pngread.c ****     */
1090:fltk-1.3.4-1/png/pngread.c ****    if ((transforms & PNG_TRANSFORM_PACKSWAP) != 0)
1091:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_PACKSWAP_SUPPORTED
1092:fltk-1.3.4-1/png/pngread.c ****       png_set_packswap(png_ptr);
1093:fltk-1.3.4-1/png/pngread.c **** #else
1094:fltk-1.3.4-1/png/pngread.c ****       png_app_error(png_ptr, "PNG_TRANSFORM_PACKSWAP not supported");
1095:fltk-1.3.4-1/png/pngread.c **** #endif
1096:fltk-1.3.4-1/png/pngread.c **** 
1097:fltk-1.3.4-1/png/pngread.c ****    /* Expand paletted colors into true RGB triplets
1098:fltk-1.3.4-1/png/pngread.c ****     * Expand grayscale images to full 8 bits from 1, 2, or 4 bits/pixel
1099:fltk-1.3.4-1/png/pngread.c ****     * Expand paletted or RGB images with transparency to full alpha
1100:fltk-1.3.4-1/png/pngread.c ****     * channels so the data will be available as RGBA quartets.
1101:fltk-1.3.4-1/png/pngread.c ****     */
1102:fltk-1.3.4-1/png/pngread.c ****    if ((transforms & PNG_TRANSFORM_EXPAND) != 0)
1103:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_EXPAND_SUPPORTED
1104:fltk-1.3.4-1/png/pngread.c ****       png_set_expand(png_ptr);
1105:fltk-1.3.4-1/png/pngread.c **** #else
1106:fltk-1.3.4-1/png/pngread.c ****       png_app_error(png_ptr, "PNG_TRANSFORM_EXPAND not supported");
1107:fltk-1.3.4-1/png/pngread.c **** #endif
1108:fltk-1.3.4-1/png/pngread.c **** 
1109:fltk-1.3.4-1/png/pngread.c ****    /* We don't handle background color or gamma transformation or quantizing.
1110:fltk-1.3.4-1/png/pngread.c ****     */
1111:fltk-1.3.4-1/png/pngread.c **** 
1112:fltk-1.3.4-1/png/pngread.c ****    /* Invert monochrome files to have 0 as white and 1 as black
1113:fltk-1.3.4-1/png/pngread.c ****     */
1114:fltk-1.3.4-1/png/pngread.c ****    if ((transforms & PNG_TRANSFORM_INVERT_MONO) != 0)
1115:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_INVERT_SUPPORTED
1116:fltk-1.3.4-1/png/pngread.c ****       png_set_invert_mono(png_ptr);
1117:fltk-1.3.4-1/png/pngread.c **** #else
1118:fltk-1.3.4-1/png/pngread.c ****       png_app_error(png_ptr, "PNG_TRANSFORM_INVERT_MONO not supported");
1119:fltk-1.3.4-1/png/pngread.c **** #endif
1120:fltk-1.3.4-1/png/pngread.c **** 
1121:fltk-1.3.4-1/png/pngread.c ****    /* If you want to shift the pixel values from the range [0,255] or
1122:fltk-1.3.4-1/png/pngread.c ****     * [0,65535] to the original [0,7] or [0,31], or whatever range the
1123:fltk-1.3.4-1/png/pngread.c ****     * colors were originally in:
1124:fltk-1.3.4-1/png/pngread.c ****     */
1125:fltk-1.3.4-1/png/pngread.c ****    if ((transforms & PNG_TRANSFORM_SHIFT) != 0)
1126:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_SHIFT_SUPPORTED
1127:fltk-1.3.4-1/png/pngread.c ****       if ((info_ptr->valid & PNG_INFO_sBIT) != 0)
1128:fltk-1.3.4-1/png/pngread.c ****          png_set_shift(png_ptr, &info_ptr->sig_bit);
1129:fltk-1.3.4-1/png/pngread.c **** #else
1130:fltk-1.3.4-1/png/pngread.c ****       png_app_error(png_ptr, "PNG_TRANSFORM_SHIFT not supported");
1131:fltk-1.3.4-1/png/pngread.c **** #endif
1132:fltk-1.3.4-1/png/pngread.c **** 
1133:fltk-1.3.4-1/png/pngread.c ****    /* Flip the RGB pixels to BGR (or RGBA to BGRA) */
1134:fltk-1.3.4-1/png/pngread.c ****    if ((transforms & PNG_TRANSFORM_BGR) != 0)
1135:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_BGR_SUPPORTED
1136:fltk-1.3.4-1/png/pngread.c ****       png_set_bgr(png_ptr);
1137:fltk-1.3.4-1/png/pngread.c **** #else
1138:fltk-1.3.4-1/png/pngread.c ****       png_app_error(png_ptr, "PNG_TRANSFORM_BGR not supported");
1139:fltk-1.3.4-1/png/pngread.c **** #endif
1140:fltk-1.3.4-1/png/pngread.c **** 
1141:fltk-1.3.4-1/png/pngread.c ****    /* Swap the RGBA or GA data to ARGB or AG (or BGRA to ABGR) */
1142:fltk-1.3.4-1/png/pngread.c ****    if ((transforms & PNG_TRANSFORM_SWAP_ALPHA) != 0)
1143:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_SWAP_ALPHA_SUPPORTED
1144:fltk-1.3.4-1/png/pngread.c ****       png_set_swap_alpha(png_ptr);
1145:fltk-1.3.4-1/png/pngread.c **** #else
1146:fltk-1.3.4-1/png/pngread.c ****       png_app_error(png_ptr, "PNG_TRANSFORM_SWAP_ALPHA not supported");
1147:fltk-1.3.4-1/png/pngread.c **** #endif
1148:fltk-1.3.4-1/png/pngread.c **** 
1149:fltk-1.3.4-1/png/pngread.c ****    /* Swap bytes of 16-bit files to least significant byte first */
1150:fltk-1.3.4-1/png/pngread.c ****    if ((transforms & PNG_TRANSFORM_SWAP_ENDIAN) != 0)
1151:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_SWAP_SUPPORTED
1152:fltk-1.3.4-1/png/pngread.c ****       png_set_swap(png_ptr);
1153:fltk-1.3.4-1/png/pngread.c **** #else
1154:fltk-1.3.4-1/png/pngread.c ****       png_app_error(png_ptr, "PNG_TRANSFORM_SWAP_ENDIAN not supported");
1155:fltk-1.3.4-1/png/pngread.c **** #endif
1156:fltk-1.3.4-1/png/pngread.c **** 
1157:fltk-1.3.4-1/png/pngread.c **** /* Added at libpng-1.2.41 */
1158:fltk-1.3.4-1/png/pngread.c ****    /* Invert the alpha channel from opacity to transparency */
1159:fltk-1.3.4-1/png/pngread.c ****    if ((transforms & PNG_TRANSFORM_INVERT_ALPHA) != 0)
1160:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_INVERT_ALPHA_SUPPORTED
1161:fltk-1.3.4-1/png/pngread.c ****       png_set_invert_alpha(png_ptr);
1162:fltk-1.3.4-1/png/pngread.c **** #else
1163:fltk-1.3.4-1/png/pngread.c ****       png_app_error(png_ptr, "PNG_TRANSFORM_INVERT_ALPHA not supported");
1164:fltk-1.3.4-1/png/pngread.c **** #endif
1165:fltk-1.3.4-1/png/pngread.c **** 
1166:fltk-1.3.4-1/png/pngread.c **** /* Added at libpng-1.2.41 */
1167:fltk-1.3.4-1/png/pngread.c ****    /* Expand grayscale image to RGB */
1168:fltk-1.3.4-1/png/pngread.c ****    if ((transforms & PNG_TRANSFORM_GRAY_TO_RGB) != 0)
1169:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_GRAY_TO_RGB_SUPPORTED
1170:fltk-1.3.4-1/png/pngread.c ****       png_set_gray_to_rgb(png_ptr);
1171:fltk-1.3.4-1/png/pngread.c **** #else
1172:fltk-1.3.4-1/png/pngread.c ****       png_app_error(png_ptr, "PNG_TRANSFORM_GRAY_TO_RGB not supported");
1173:fltk-1.3.4-1/png/pngread.c **** #endif
1174:fltk-1.3.4-1/png/pngread.c **** 
1175:fltk-1.3.4-1/png/pngread.c **** /* Added at libpng-1.5.4 */
1176:fltk-1.3.4-1/png/pngread.c ****    if ((transforms & PNG_TRANSFORM_EXPAND_16) != 0)
1177:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_EXPAND_16_SUPPORTED
1178:fltk-1.3.4-1/png/pngread.c ****       png_set_expand_16(png_ptr);
1179:fltk-1.3.4-1/png/pngread.c **** #else
1180:fltk-1.3.4-1/png/pngread.c ****       png_app_error(png_ptr, "PNG_TRANSFORM_EXPAND_16 not supported");
1181:fltk-1.3.4-1/png/pngread.c **** #endif
1182:fltk-1.3.4-1/png/pngread.c **** 
1183:fltk-1.3.4-1/png/pngread.c ****    /* We don't handle adding filler bytes */
1184:fltk-1.3.4-1/png/pngread.c **** 
1185:fltk-1.3.4-1/png/pngread.c ****    /* We use png_read_image and rely on that for interlace handling, but we also
1186:fltk-1.3.4-1/png/pngread.c ****     * call png_read_update_info therefore must turn on interlace handling now:
1187:fltk-1.3.4-1/png/pngread.c ****     */
1188:fltk-1.3.4-1/png/pngread.c ****    (void)png_set_interlace_handling(png_ptr);
1189:fltk-1.3.4-1/png/pngread.c **** 
1190:fltk-1.3.4-1/png/pngread.c ****    /* Optional call to gamma correct and add the background to the palette
1191:fltk-1.3.4-1/png/pngread.c ****     * and update info structure.  REQUIRED if you are expecting libpng to
1192:fltk-1.3.4-1/png/pngread.c ****     * update the palette for you (i.e., you selected such a transform above).
1193:fltk-1.3.4-1/png/pngread.c ****     */
1194:fltk-1.3.4-1/png/pngread.c ****    png_read_update_info(png_ptr, info_ptr);
1195:fltk-1.3.4-1/png/pngread.c **** 
1196:fltk-1.3.4-1/png/pngread.c ****    /* -------------- image transformations end here ------------------- */
1197:fltk-1.3.4-1/png/pngread.c **** 
1198:fltk-1.3.4-1/png/pngread.c ****    png_free_data(png_ptr, info_ptr, PNG_FREE_ROWS, 0);
1199:fltk-1.3.4-1/png/pngread.c ****    if (info_ptr->row_pointers == NULL)
1200:fltk-1.3.4-1/png/pngread.c ****    {
1201:fltk-1.3.4-1/png/pngread.c ****       png_uint_32 iptr;
1202:fltk-1.3.4-1/png/pngread.c **** 
1203:fltk-1.3.4-1/png/pngread.c ****       info_ptr->row_pointers = png_voidcast(png_bytepp, png_malloc(png_ptr,
1204:fltk-1.3.4-1/png/pngread.c ****           info_ptr->height * (sizeof (png_bytep))));
1205:fltk-1.3.4-1/png/pngread.c **** 
1206:fltk-1.3.4-1/png/pngread.c ****       for (iptr=0; iptr<info_ptr->height; iptr++)
1207:fltk-1.3.4-1/png/pngread.c ****          info_ptr->row_pointers[iptr] = NULL;
1208:fltk-1.3.4-1/png/pngread.c **** 
1209:fltk-1.3.4-1/png/pngread.c ****       info_ptr->free_me |= PNG_FREE_ROWS;
1210:fltk-1.3.4-1/png/pngread.c **** 
1211:fltk-1.3.4-1/png/pngread.c ****       for (iptr = 0; iptr < info_ptr->height; iptr++)
1212:fltk-1.3.4-1/png/pngread.c ****          info_ptr->row_pointers[iptr] = png_voidcast(png_bytep,
1213:fltk-1.3.4-1/png/pngread.c ****             png_malloc(png_ptr, info_ptr->rowbytes));
1214:fltk-1.3.4-1/png/pngread.c ****    }
1215:fltk-1.3.4-1/png/pngread.c **** 
1216:fltk-1.3.4-1/png/pngread.c ****    png_read_image(png_ptr, info_ptr->row_pointers);
1217:fltk-1.3.4-1/png/pngread.c ****    info_ptr->valid |= PNG_INFO_IDAT;
1218:fltk-1.3.4-1/png/pngread.c **** 
1219:fltk-1.3.4-1/png/pngread.c ****    /* Read rest of file, and get additional chunks in info_ptr - REQUIRED */
1220:fltk-1.3.4-1/png/pngread.c ****    png_read_end(png_ptr, info_ptr);
1221:fltk-1.3.4-1/png/pngread.c **** 
1222:fltk-1.3.4-1/png/pngread.c ****    PNG_UNUSED(params)
1223:fltk-1.3.4-1/png/pngread.c **** }
1224:fltk-1.3.4-1/png/pngread.c **** #endif /* INFO_IMAGE */
1225:fltk-1.3.4-1/png/pngread.c **** #endif /* SEQUENTIAL_READ */
1226:fltk-1.3.4-1/png/pngread.c **** 
1227:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_SIMPLIFIED_READ_SUPPORTED
1228:fltk-1.3.4-1/png/pngread.c **** /* SIMPLIFIED READ
1229:fltk-1.3.4-1/png/pngread.c ****  *
1230:fltk-1.3.4-1/png/pngread.c ****  * This code currently relies on the sequential reader, though it could easily
1231:fltk-1.3.4-1/png/pngread.c ****  * be made to work with the progressive one.
1232:fltk-1.3.4-1/png/pngread.c ****  */
1233:fltk-1.3.4-1/png/pngread.c **** /* Arguments to png_image_finish_read: */
1234:fltk-1.3.4-1/png/pngread.c **** 
1235:fltk-1.3.4-1/png/pngread.c **** /* Encoding of PNG data (used by the color-map code) */
1236:fltk-1.3.4-1/png/pngread.c **** #  define P_NOTSET  0 /* File encoding not yet known */
1237:fltk-1.3.4-1/png/pngread.c **** #  define P_sRGB    1 /* 8-bit encoded to sRGB gamma */
1238:fltk-1.3.4-1/png/pngread.c **** #  define P_LINEAR  2 /* 16-bit linear: not encoded, NOT pre-multiplied! */
1239:fltk-1.3.4-1/png/pngread.c **** #  define P_FILE    3 /* 8-bit encoded to file gamma, not sRGB or linear */
1240:fltk-1.3.4-1/png/pngread.c **** #  define P_LINEAR8 4 /* 8-bit linear: only from a file value */
1241:fltk-1.3.4-1/png/pngread.c **** 
1242:fltk-1.3.4-1/png/pngread.c **** /* Color-map processing: after libpng has run on the PNG image further
1243:fltk-1.3.4-1/png/pngread.c ****  * processing may be needed to convert the data to color-map indices.
1244:fltk-1.3.4-1/png/pngread.c ****  */
1245:fltk-1.3.4-1/png/pngread.c **** #define PNG_CMAP_NONE      0
1246:fltk-1.3.4-1/png/pngread.c **** #define PNG_CMAP_GA        1 /* Process GA data to a color-map with alpha */
1247:fltk-1.3.4-1/png/pngread.c **** #define PNG_CMAP_TRANS     2 /* Process GA data to a background index */
1248:fltk-1.3.4-1/png/pngread.c **** #define PNG_CMAP_RGB       3 /* Process RGB data */
1249:fltk-1.3.4-1/png/pngread.c **** #define PNG_CMAP_RGB_ALPHA 4 /* Process RGBA data */
1250:fltk-1.3.4-1/png/pngread.c **** 
1251:fltk-1.3.4-1/png/pngread.c **** /* The following document where the background is for each processing case. */
1252:fltk-1.3.4-1/png/pngread.c **** #define PNG_CMAP_NONE_BACKGROUND      256
1253:fltk-1.3.4-1/png/pngread.c **** #define PNG_CMAP_GA_BACKGROUND        231
1254:fltk-1.3.4-1/png/pngread.c **** #define PNG_CMAP_TRANS_BACKGROUND     254
1255:fltk-1.3.4-1/png/pngread.c **** #define PNG_CMAP_RGB_BACKGROUND       256
1256:fltk-1.3.4-1/png/pngread.c **** #define PNG_CMAP_RGB_ALPHA_BACKGROUND 216
1257:fltk-1.3.4-1/png/pngread.c **** 
1258:fltk-1.3.4-1/png/pngread.c **** typedef struct
1259:fltk-1.3.4-1/png/pngread.c **** {
1260:fltk-1.3.4-1/png/pngread.c ****    /* Arguments: */
1261:fltk-1.3.4-1/png/pngread.c ****    png_imagep image;
1262:fltk-1.3.4-1/png/pngread.c ****    png_voidp  buffer;
1263:fltk-1.3.4-1/png/pngread.c ****    png_int_32 row_stride;
1264:fltk-1.3.4-1/png/pngread.c ****    png_voidp  colormap;
1265:fltk-1.3.4-1/png/pngread.c ****    png_const_colorp background;
1266:fltk-1.3.4-1/png/pngread.c ****    /* Local variables: */
1267:fltk-1.3.4-1/png/pngread.c ****    png_voidp       local_row;
1268:fltk-1.3.4-1/png/pngread.c ****    png_voidp       first_row;
1269:fltk-1.3.4-1/png/pngread.c ****    ptrdiff_t       row_bytes;           /* step between rows */
1270:fltk-1.3.4-1/png/pngread.c ****    int             file_encoding;       /* E_ values above */
1271:fltk-1.3.4-1/png/pngread.c ****    png_fixed_point gamma_to_linear;     /* For P_FILE, reciprocal of gamma */
1272:fltk-1.3.4-1/png/pngread.c ****    int             colormap_processing; /* PNG_CMAP_ values above */
1273:fltk-1.3.4-1/png/pngread.c **** } png_image_read_control;
1274:fltk-1.3.4-1/png/pngread.c **** 
1275:fltk-1.3.4-1/png/pngread.c **** /* Do all the *safe* initialization - 'safe' means that png_error won't be
1276:fltk-1.3.4-1/png/pngread.c ****  * called, so setting up the jmp_buf is not required.  This means that anything
1277:fltk-1.3.4-1/png/pngread.c ****  * called from here must *not* call png_malloc - it has to call png_malloc_warn
1278:fltk-1.3.4-1/png/pngread.c ****  * instead so that control is returned safely back to this routine.
1279:fltk-1.3.4-1/png/pngread.c ****  */
1280:fltk-1.3.4-1/png/pngread.c **** static int
1281:fltk-1.3.4-1/png/pngread.c **** png_image_read_init(png_imagep image)
1282:fltk-1.3.4-1/png/pngread.c **** {
1283:fltk-1.3.4-1/png/pngread.c ****    if (image->opaque == NULL)
1284:fltk-1.3.4-1/png/pngread.c ****    {
1285:fltk-1.3.4-1/png/pngread.c ****       png_structp png_ptr = png_create_read_struct(PNG_LIBPNG_VER_STRING, image,
1286:fltk-1.3.4-1/png/pngread.c ****           png_safe_error, png_safe_warning);
1287:fltk-1.3.4-1/png/pngread.c **** 
1288:fltk-1.3.4-1/png/pngread.c ****       /* And set the rest of the structure to NULL to ensure that the various
1289:fltk-1.3.4-1/png/pngread.c ****        * fields are consistent.
1290:fltk-1.3.4-1/png/pngread.c ****        */
1291:fltk-1.3.4-1/png/pngread.c ****       memset(image, 0, (sizeof *image));
1292:fltk-1.3.4-1/png/pngread.c ****       image->version = PNG_IMAGE_VERSION;
1293:fltk-1.3.4-1/png/pngread.c **** 
1294:fltk-1.3.4-1/png/pngread.c ****       if (png_ptr != NULL)
1295:fltk-1.3.4-1/png/pngread.c ****       {
1296:fltk-1.3.4-1/png/pngread.c ****          png_infop info_ptr = png_create_info_struct(png_ptr);
1297:fltk-1.3.4-1/png/pngread.c **** 
1298:fltk-1.3.4-1/png/pngread.c ****          if (info_ptr != NULL)
1299:fltk-1.3.4-1/png/pngread.c ****          {
1300:fltk-1.3.4-1/png/pngread.c ****             png_controlp control = png_voidcast(png_controlp,
1301:fltk-1.3.4-1/png/pngread.c ****                png_malloc_warn(png_ptr, (sizeof *control)));
1302:fltk-1.3.4-1/png/pngread.c **** 
1303:fltk-1.3.4-1/png/pngread.c ****             if (control != NULL)
1304:fltk-1.3.4-1/png/pngread.c ****             {
1305:fltk-1.3.4-1/png/pngread.c ****                memset(control, 0, (sizeof *control));
1306:fltk-1.3.4-1/png/pngread.c **** 
1307:fltk-1.3.4-1/png/pngread.c ****                control->png_ptr = png_ptr;
1308:fltk-1.3.4-1/png/pngread.c ****                control->info_ptr = info_ptr;
1309:fltk-1.3.4-1/png/pngread.c ****                control->for_write = 0;
1310:fltk-1.3.4-1/png/pngread.c **** 
1311:fltk-1.3.4-1/png/pngread.c ****                image->opaque = control;
1312:fltk-1.3.4-1/png/pngread.c ****                return 1;
1313:fltk-1.3.4-1/png/pngread.c ****             }
1314:fltk-1.3.4-1/png/pngread.c **** 
1315:fltk-1.3.4-1/png/pngread.c ****             /* Error clean up */
1316:fltk-1.3.4-1/png/pngread.c ****             png_destroy_info_struct(png_ptr, &info_ptr);
1317:fltk-1.3.4-1/png/pngread.c ****          }
1318:fltk-1.3.4-1/png/pngread.c **** 
1319:fltk-1.3.4-1/png/pngread.c ****          png_destroy_read_struct(&png_ptr, NULL, NULL);
1320:fltk-1.3.4-1/png/pngread.c ****       }
1321:fltk-1.3.4-1/png/pngread.c **** 
1322:fltk-1.3.4-1/png/pngread.c ****       return png_image_error(image, "png_image_read: out of memory");
1323:fltk-1.3.4-1/png/pngread.c ****    }
1324:fltk-1.3.4-1/png/pngread.c **** 
1325:fltk-1.3.4-1/png/pngread.c ****    return png_image_error(image, "png_image_read: opaque pointer not NULL");
1326:fltk-1.3.4-1/png/pngread.c **** }
1327:fltk-1.3.4-1/png/pngread.c **** 
1328:fltk-1.3.4-1/png/pngread.c **** /* Utility to find the base format of a PNG file from a png_struct. */
1329:fltk-1.3.4-1/png/pngread.c **** static png_uint_32
1330:fltk-1.3.4-1/png/pngread.c **** png_image_format(png_structrp png_ptr)
1331:fltk-1.3.4-1/png/pngread.c **** {
1332:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 format = 0;
1333:fltk-1.3.4-1/png/pngread.c **** 
1334:fltk-1.3.4-1/png/pngread.c ****    if ((png_ptr->color_type & PNG_COLOR_MASK_COLOR) != 0)
1335:fltk-1.3.4-1/png/pngread.c ****       format |= PNG_FORMAT_FLAG_COLOR;
1336:fltk-1.3.4-1/png/pngread.c **** 
1337:fltk-1.3.4-1/png/pngread.c ****    if ((png_ptr->color_type & PNG_COLOR_MASK_ALPHA) != 0)
1338:fltk-1.3.4-1/png/pngread.c ****       format |= PNG_FORMAT_FLAG_ALPHA;
1339:fltk-1.3.4-1/png/pngread.c **** 
1340:fltk-1.3.4-1/png/pngread.c ****    /* Use png_ptr here, not info_ptr, because by examination png_handle_tRNS
1341:fltk-1.3.4-1/png/pngread.c ****     * sets the png_struct fields; that's all we are interested in here.  The
1342:fltk-1.3.4-1/png/pngread.c ****     * precise interaction with an app call to png_set_tRNS and PNG file reading
1343:fltk-1.3.4-1/png/pngread.c ****     * is unclear.
1344:fltk-1.3.4-1/png/pngread.c ****     */
1345:fltk-1.3.4-1/png/pngread.c ****    else if (png_ptr->num_trans > 0)
1346:fltk-1.3.4-1/png/pngread.c ****       format |= PNG_FORMAT_FLAG_ALPHA;
1347:fltk-1.3.4-1/png/pngread.c **** 
1348:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr->bit_depth == 16)
1349:fltk-1.3.4-1/png/pngread.c ****       format |= PNG_FORMAT_FLAG_LINEAR;
1350:fltk-1.3.4-1/png/pngread.c **** 
1351:fltk-1.3.4-1/png/pngread.c ****    if ((png_ptr->color_type & PNG_COLOR_MASK_PALETTE) != 0)
1352:fltk-1.3.4-1/png/pngread.c ****       format |= PNG_FORMAT_FLAG_COLORMAP;
1353:fltk-1.3.4-1/png/pngread.c **** 
1354:fltk-1.3.4-1/png/pngread.c ****    return format;
1355:fltk-1.3.4-1/png/pngread.c **** }
1356:fltk-1.3.4-1/png/pngread.c **** 
1357:fltk-1.3.4-1/png/pngread.c **** /* Is the given gamma significantly different from sRGB?  The test is the same
1358:fltk-1.3.4-1/png/pngread.c ****  * one used in pngrtran.c when deciding whether to do gamma correction.  The
1359:fltk-1.3.4-1/png/pngread.c ****  * arithmetic optimizes the division by using the fact that the inverse of the
1360:fltk-1.3.4-1/png/pngread.c ****  * file sRGB gamma is 2.2
1361:fltk-1.3.4-1/png/pngread.c ****  */
1362:fltk-1.3.4-1/png/pngread.c **** static int
1363:fltk-1.3.4-1/png/pngread.c **** png_gamma_not_sRGB(png_fixed_point g)
1364:fltk-1.3.4-1/png/pngread.c **** {
1365:fltk-1.3.4-1/png/pngread.c ****    if (g < PNG_FP_1)
1366:fltk-1.3.4-1/png/pngread.c ****    {
1367:fltk-1.3.4-1/png/pngread.c ****       /* An uninitialized gamma is assumed to be sRGB for the simplified API. */
1368:fltk-1.3.4-1/png/pngread.c ****       if (g == 0)
1369:fltk-1.3.4-1/png/pngread.c ****          return 0;
1370:fltk-1.3.4-1/png/pngread.c **** 
1371:fltk-1.3.4-1/png/pngread.c ****       return png_gamma_significant((g * 11 + 2)/5 /* i.e. *2.2, rounded */);
1372:fltk-1.3.4-1/png/pngread.c ****    }
1373:fltk-1.3.4-1/png/pngread.c **** 
1374:fltk-1.3.4-1/png/pngread.c ****    return 1;
1375:fltk-1.3.4-1/png/pngread.c **** }
1376:fltk-1.3.4-1/png/pngread.c **** 
1377:fltk-1.3.4-1/png/pngread.c **** /* Do the main body of a 'png_image_begin_read' function; read the PNG file
1378:fltk-1.3.4-1/png/pngread.c ****  * header and fill in all the information.  This is executed in a safe context,
1379:fltk-1.3.4-1/png/pngread.c ****  * unlike the init routine above.
1380:fltk-1.3.4-1/png/pngread.c ****  */
1381:fltk-1.3.4-1/png/pngread.c **** static int
1382:fltk-1.3.4-1/png/pngread.c **** png_image_read_header(png_voidp argument)
1383:fltk-1.3.4-1/png/pngread.c **** {
1384:fltk-1.3.4-1/png/pngread.c ****    png_imagep image = png_voidcast(png_imagep, argument);
1385:fltk-1.3.4-1/png/pngread.c ****    png_structrp png_ptr = image->opaque->png_ptr;
1386:fltk-1.3.4-1/png/pngread.c ****    png_inforp info_ptr = image->opaque->info_ptr;
1387:fltk-1.3.4-1/png/pngread.c **** 
1388:fltk-1.3.4-1/png/pngread.c ****    png_set_benign_errors(png_ptr, 1/*warn*/);
1389:fltk-1.3.4-1/png/pngread.c ****    png_read_info(png_ptr, info_ptr);
1390:fltk-1.3.4-1/png/pngread.c **** 
1391:fltk-1.3.4-1/png/pngread.c ****    /* Do this the fast way; just read directly out of png_struct. */
1392:fltk-1.3.4-1/png/pngread.c ****    image->width = png_ptr->width;
1393:fltk-1.3.4-1/png/pngread.c ****    image->height = png_ptr->height;
1394:fltk-1.3.4-1/png/pngread.c **** 
1395:fltk-1.3.4-1/png/pngread.c ****    {
1396:fltk-1.3.4-1/png/pngread.c ****       png_uint_32 format = png_image_format(png_ptr);
1397:fltk-1.3.4-1/png/pngread.c **** 
1398:fltk-1.3.4-1/png/pngread.c ****       image->format = format;
1399:fltk-1.3.4-1/png/pngread.c **** 
1400:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_COLORSPACE_SUPPORTED
1401:fltk-1.3.4-1/png/pngread.c ****       /* Does the colorspace match sRGB?  If there is no color endpoint
1402:fltk-1.3.4-1/png/pngread.c ****        * (colorant) information assume yes, otherwise require the
1403:fltk-1.3.4-1/png/pngread.c ****        * 'ENDPOINTS_MATCHP_sRGB' colorspace flag to have been set.  If the
1404:fltk-1.3.4-1/png/pngread.c ****        * colorspace has been determined to be invalid ignore it.
1405:fltk-1.3.4-1/png/pngread.c ****        */
1406:fltk-1.3.4-1/png/pngread.c ****       if ((format & PNG_FORMAT_FLAG_COLOR) != 0 && ((png_ptr->colorspace.flags
1407:fltk-1.3.4-1/png/pngread.c ****          & (PNG_COLORSPACE_HAVE_ENDPOINTS|PNG_COLORSPACE_ENDPOINTS_MATCH_sRGB|
1408:fltk-1.3.4-1/png/pngread.c ****             PNG_COLORSPACE_INVALID)) == PNG_COLORSPACE_HAVE_ENDPOINTS))
1409:fltk-1.3.4-1/png/pngread.c ****          image->flags |= PNG_IMAGE_FLAG_COLORSPACE_NOT_sRGB;
1410:fltk-1.3.4-1/png/pngread.c **** #endif
1411:fltk-1.3.4-1/png/pngread.c ****    }
1412:fltk-1.3.4-1/png/pngread.c **** 
1413:fltk-1.3.4-1/png/pngread.c ****    /* We need the maximum number of entries regardless of the format the
1414:fltk-1.3.4-1/png/pngread.c ****     * application sets here.
1415:fltk-1.3.4-1/png/pngread.c ****     */
1416:fltk-1.3.4-1/png/pngread.c ****    {
1417:fltk-1.3.4-1/png/pngread.c ****       png_uint_32 cmap_entries;
1418:fltk-1.3.4-1/png/pngread.c **** 
1419:fltk-1.3.4-1/png/pngread.c ****       switch (png_ptr->color_type)
1420:fltk-1.3.4-1/png/pngread.c ****       {
1421:fltk-1.3.4-1/png/pngread.c ****          case PNG_COLOR_TYPE_GRAY:
1422:fltk-1.3.4-1/png/pngread.c ****             cmap_entries = 1U << png_ptr->bit_depth;
1423:fltk-1.3.4-1/png/pngread.c ****             break;
1424:fltk-1.3.4-1/png/pngread.c **** 
1425:fltk-1.3.4-1/png/pngread.c ****          case PNG_COLOR_TYPE_PALETTE:
1426:fltk-1.3.4-1/png/pngread.c ****             cmap_entries = png_ptr->num_palette;
1427:fltk-1.3.4-1/png/pngread.c ****             break;
1428:fltk-1.3.4-1/png/pngread.c **** 
1429:fltk-1.3.4-1/png/pngread.c ****          default:
1430:fltk-1.3.4-1/png/pngread.c ****             cmap_entries = 256;
1431:fltk-1.3.4-1/png/pngread.c ****             break;
1432:fltk-1.3.4-1/png/pngread.c ****       }
1433:fltk-1.3.4-1/png/pngread.c **** 
1434:fltk-1.3.4-1/png/pngread.c ****       if (cmap_entries > 256)
1435:fltk-1.3.4-1/png/pngread.c ****          cmap_entries = 256;
1436:fltk-1.3.4-1/png/pngread.c **** 
1437:fltk-1.3.4-1/png/pngread.c ****       image->colormap_entries = cmap_entries;
1438:fltk-1.3.4-1/png/pngread.c ****    }
1439:fltk-1.3.4-1/png/pngread.c **** 
1440:fltk-1.3.4-1/png/pngread.c ****    return 1;
1441:fltk-1.3.4-1/png/pngread.c **** }
1442:fltk-1.3.4-1/png/pngread.c **** 
1443:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_STDIO_SUPPORTED
1444:fltk-1.3.4-1/png/pngread.c **** int PNGAPI
1445:fltk-1.3.4-1/png/pngread.c **** png_image_begin_read_from_stdio(png_imagep image, FILE* file)
1446:fltk-1.3.4-1/png/pngread.c **** {
1447:fltk-1.3.4-1/png/pngread.c ****    if (image != NULL && image->version == PNG_IMAGE_VERSION)
1448:fltk-1.3.4-1/png/pngread.c ****    {
1449:fltk-1.3.4-1/png/pngread.c ****       if (file != NULL)
1450:fltk-1.3.4-1/png/pngread.c ****       {
1451:fltk-1.3.4-1/png/pngread.c ****          if (png_image_read_init(image) != 0)
1452:fltk-1.3.4-1/png/pngread.c ****          {
1453:fltk-1.3.4-1/png/pngread.c ****             /* This is slightly evil, but png_init_io doesn't do anything other
1454:fltk-1.3.4-1/png/pngread.c ****              * than this and we haven't changed the standard IO functions so
1455:fltk-1.3.4-1/png/pngread.c ****              * this saves a 'safe' function.
1456:fltk-1.3.4-1/png/pngread.c ****              */
1457:fltk-1.3.4-1/png/pngread.c ****             image->opaque->png_ptr->io_ptr = file;
1458:fltk-1.3.4-1/png/pngread.c ****             return png_safe_execute(image, png_image_read_header, image);
1459:fltk-1.3.4-1/png/pngread.c ****          }
1460:fltk-1.3.4-1/png/pngread.c ****       }
1461:fltk-1.3.4-1/png/pngread.c **** 
1462:fltk-1.3.4-1/png/pngread.c ****       else
1463:fltk-1.3.4-1/png/pngread.c ****          return png_image_error(image,
1464:fltk-1.3.4-1/png/pngread.c ****             "png_image_begin_read_from_stdio: invalid argument");
1465:fltk-1.3.4-1/png/pngread.c ****    }
1466:fltk-1.3.4-1/png/pngread.c **** 
1467:fltk-1.3.4-1/png/pngread.c ****    else if (image != NULL)
1468:fltk-1.3.4-1/png/pngread.c ****       return png_image_error(image,
1469:fltk-1.3.4-1/png/pngread.c ****          "png_image_begin_read_from_stdio: incorrect PNG_IMAGE_VERSION");
1470:fltk-1.3.4-1/png/pngread.c **** 
1471:fltk-1.3.4-1/png/pngread.c ****    return 0;
1472:fltk-1.3.4-1/png/pngread.c **** }
1473:fltk-1.3.4-1/png/pngread.c **** 
1474:fltk-1.3.4-1/png/pngread.c **** int PNGAPI
1475:fltk-1.3.4-1/png/pngread.c **** png_image_begin_read_from_file(png_imagep image, const char *file_name)
1476:fltk-1.3.4-1/png/pngread.c **** {
1477:fltk-1.3.4-1/png/pngread.c ****    if (image != NULL && image->version == PNG_IMAGE_VERSION)
1478:fltk-1.3.4-1/png/pngread.c ****    {
1479:fltk-1.3.4-1/png/pngread.c ****       if (file_name != NULL)
1480:fltk-1.3.4-1/png/pngread.c ****       {
1481:fltk-1.3.4-1/png/pngread.c ****          FILE *fp = fopen(file_name, "rb");
1482:fltk-1.3.4-1/png/pngread.c **** 
1483:fltk-1.3.4-1/png/pngread.c ****          if (fp != NULL)
1484:fltk-1.3.4-1/png/pngread.c ****          {
1485:fltk-1.3.4-1/png/pngread.c ****             if (png_image_read_init(image) != 0)
1486:fltk-1.3.4-1/png/pngread.c ****             {
1487:fltk-1.3.4-1/png/pngread.c ****                image->opaque->png_ptr->io_ptr = fp;
1488:fltk-1.3.4-1/png/pngread.c ****                image->opaque->owned_file = 1;
1489:fltk-1.3.4-1/png/pngread.c ****                return png_safe_execute(image, png_image_read_header, image);
1490:fltk-1.3.4-1/png/pngread.c ****             }
1491:fltk-1.3.4-1/png/pngread.c **** 
1492:fltk-1.3.4-1/png/pngread.c ****             /* Clean up: just the opened file. */
1493:fltk-1.3.4-1/png/pngread.c ****             (void)fclose(fp);
1494:fltk-1.3.4-1/png/pngread.c ****          }
1495:fltk-1.3.4-1/png/pngread.c **** 
1496:fltk-1.3.4-1/png/pngread.c ****          else
1497:fltk-1.3.4-1/png/pngread.c ****             return png_image_error(image, strerror(errno));
1498:fltk-1.3.4-1/png/pngread.c ****       }
1499:fltk-1.3.4-1/png/pngread.c **** 
1500:fltk-1.3.4-1/png/pngread.c ****       else
1501:fltk-1.3.4-1/png/pngread.c ****          return png_image_error(image,
1502:fltk-1.3.4-1/png/pngread.c ****             "png_image_begin_read_from_file: invalid argument");
1503:fltk-1.3.4-1/png/pngread.c ****    }
1504:fltk-1.3.4-1/png/pngread.c **** 
1505:fltk-1.3.4-1/png/pngread.c ****    else if (image != NULL)
1506:fltk-1.3.4-1/png/pngread.c ****       return png_image_error(image,
1507:fltk-1.3.4-1/png/pngread.c ****          "png_image_begin_read_from_file: incorrect PNG_IMAGE_VERSION");
1508:fltk-1.3.4-1/png/pngread.c **** 
1509:fltk-1.3.4-1/png/pngread.c ****    return 0;
1510:fltk-1.3.4-1/png/pngread.c **** }
1511:fltk-1.3.4-1/png/pngread.c **** #endif /* STDIO */
1512:fltk-1.3.4-1/png/pngread.c **** 
1513:fltk-1.3.4-1/png/pngread.c **** static void PNGCBAPI
1514:fltk-1.3.4-1/png/pngread.c **** png_image_memory_read(png_structp png_ptr, png_bytep out, png_size_t need)
1515:fltk-1.3.4-1/png/pngread.c **** {
  21              		.loc 1 1515 0
  22              		.cfi_startproc
  23              	.LVL0:
1516:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr != NULL)
  24              		.loc 1 1516 0
  25 0000 4885FF   		testq	%rdi, %rdi
  26 0003 745C     		je	.L22
1515:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr != NULL)
  27              		.loc 1 1515 0
  28 0005 4155     		pushq	%r13
  29              		.cfi_def_cfa_offset 16
  30              		.cfi_offset 13, -16
  31 0007 4154     		pushq	%r12
  32              		.cfi_def_cfa_offset 24
  33              		.cfi_offset 12, -24
  34 0009 4889F8   		movq	%rdi, %rax
  35 000c 55       		pushq	%rbp
  36              		.cfi_def_cfa_offset 32
  37              		.cfi_offset 6, -32
  38 000d 53       		pushq	%rbx
  39              		.cfi_def_cfa_offset 40
  40              		.cfi_offset 3, -40
  41 000e 4889D3   		movq	%rdx, %rbx
  42 0011 4889F7   		movq	%rsi, %rdi
  43              	.LVL1:
  44 0014 4883EC08 		subq	$8, %rsp
  45              		.cfi_def_cfa_offset 48
  46              	.LBB87:
1517:fltk-1.3.4-1/png/pngread.c ****    {
1518:fltk-1.3.4-1/png/pngread.c ****       png_imagep image = png_voidcast(png_imagep, png_ptr->io_ptr);
  47              		.loc 1 1518 0
  48 0018 488B9008 		movq	264(%rax), %rdx
  48      010000
  49              	.LVL2:
1519:fltk-1.3.4-1/png/pngread.c ****       if (image != NULL)
  50              		.loc 1 1519 0
  51 001f 4885D2   		testq	%rdx, %rdx
  52 0022 743F     		je	.L3
  53              	.LBB88:
1520:fltk-1.3.4-1/png/pngread.c ****       {
1521:fltk-1.3.4-1/png/pngread.c ****          png_controlp cp = image->opaque;
  54              		.loc 1 1521 0
  55 0024 488B2A   		movq	(%rdx), %rbp
  56              	.LVL3:
1522:fltk-1.3.4-1/png/pngread.c ****          if (cp != NULL)
  57              		.loc 1 1522 0
  58 0027 4885ED   		testq	%rbp, %rbp
  59 002a 7437     		je	.L3
  60              	.LBB89:
1523:fltk-1.3.4-1/png/pngread.c ****          {
1524:fltk-1.3.4-1/png/pngread.c ****             png_const_bytep memory = cp->memory;
  61              		.loc 1 1524 0
  62 002c 4C8B6518 		movq	24(%rbp), %r12
  63              	.LVL4:
1525:fltk-1.3.4-1/png/pngread.c ****             png_size_t size = cp->size;
  64              		.loc 1 1525 0
  65 0030 4C8B6D20 		movq	32(%rbp), %r13
  66              	.LVL5:
1526:fltk-1.3.4-1/png/pngread.c **** 
1527:fltk-1.3.4-1/png/pngread.c ****             if (memory != NULL && size >= need)
  67              		.loc 1 1527 0
  68 0034 4D85E4   		testq	%r12, %r12
  69 0037 7437     		je	.L4
  70 0039 4939DD   		cmpq	%rbx, %r13
  71 003c 7232     		jb	.L4
  72              	.LVL6:
1528:fltk-1.3.4-1/png/pngread.c ****             {
1529:fltk-1.3.4-1/png/pngread.c ****                memcpy(out, memory, need);
1530:fltk-1.3.4-1/png/pngread.c ****                cp->memory = memory + need;
1531:fltk-1.3.4-1/png/pngread.c ****                cp->size = size - need;
  73              		.loc 1 1531 0
  74 003e 4929DD   		subq	%rbx, %r13
  75              	.LVL7:
  76              	.LBB90:
  77              	.LBB91:
  78              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string3.h"
   1:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* Copyright (C) 2004-2016 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string3.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string3.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string3.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string3.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string3.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string3.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string3.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string3.h ****    <http://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef _STRING_H
  19:/usr/include/x86_64-linux-gnu/bits/string3.h **** # error "Never use <bits/string3.h> directly; include <string.h> instead."
  20:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  21:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  22:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  23:/usr/include/x86_64-linux-gnu/bits/string3.h **** __warndecl (__warn_memset_zero_len,
  24:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  25:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  26:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  27:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef __cplusplus
  28:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* XXX This is temporarily.  We should not redefine any of the symbols
  29:/usr/include/x86_64-linux-gnu/bits/string3.h ****    and instead integrate the error checking into the original
  30:/usr/include/x86_64-linux-gnu/bits/string3.h ****    definitions.  */
  31:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memcpy
  32:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memmove
  33:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memset
  34:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcat
  35:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcpy
  36:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncat
  37:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncpy
  38:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_GNU
  39:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef mempcpy
  40:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef stpcpy
  41:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  42:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_MISC
  43:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bcopy
  44:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bzero
  45:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  46:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  47:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  48:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  49:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  50:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  51:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	       size_t __len))
  52:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  53:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  79              		.loc 2 53 0
  80 0041 4889DA   		movq	%rbx, %rdx
  81              	.LVL8:
  82 0044 4C89E6   		movq	%r12, %rsi
  83              	.LVL9:
  84              	.LBE91:
  85              	.LBE90:
1530:fltk-1.3.4-1/png/pngread.c ****                cp->size = size - need;
  86              		.loc 1 1530 0
  87 0047 4901DC   		addq	%rbx, %r12
  88              	.LVL10:
  89              	.LBB93:
  90              	.LBB92:
  91              		.loc 2 53 0
  92 004a E8000000 		call	memcpy
  92      00
  93              	.LVL11:
  94              	.LBE92:
  95              	.LBE93:
1530:fltk-1.3.4-1/png/pngread.c ****                cp->size = size - need;
  96              		.loc 1 1530 0
  97 004f 4C896518 		movq	%r12, 24(%rbp)
  98              		.loc 1 1531 0
  99 0053 4C896D20 		movq	%r13, 32(%rbp)
 100              	.LBE89:
 101              	.LBE88:
 102              	.LBE87:
1532:fltk-1.3.4-1/png/pngread.c ****                return;
1533:fltk-1.3.4-1/png/pngread.c ****             }
1534:fltk-1.3.4-1/png/pngread.c **** 
1535:fltk-1.3.4-1/png/pngread.c ****             png_error(png_ptr, "read beyond end of data");
1536:fltk-1.3.4-1/png/pngread.c ****          }
1537:fltk-1.3.4-1/png/pngread.c ****       }
1538:fltk-1.3.4-1/png/pngread.c **** 
1539:fltk-1.3.4-1/png/pngread.c ****       png_error(png_ptr, "invalid memory read");
1540:fltk-1.3.4-1/png/pngread.c ****    }
1541:fltk-1.3.4-1/png/pngread.c **** }
 103              		.loc 1 1541 0
 104 0057 4883C408 		addq	$8, %rsp
 105              		.cfi_def_cfa_offset 40
 106 005b 5B       		popq	%rbx
 107              		.cfi_restore 3
 108              		.cfi_def_cfa_offset 32
 109              	.LVL12:
 110 005c 5D       		popq	%rbp
 111              		.cfi_restore 6
 112              		.cfi_def_cfa_offset 24
 113              	.LVL13:
 114 005d 415C     		popq	%r12
 115              		.cfi_restore 12
 116              		.cfi_def_cfa_offset 16
 117 005f 415D     		popq	%r13
 118              		.cfi_restore 13
 119              		.cfi_def_cfa_offset 8
 120              	.L22:
 121 0061 F3C3     		rep ret
 122              	.LVL14:
 123              	.L3:
 124              		.cfi_def_cfa_offset 48
 125              		.cfi_offset 3, -40
 126              		.cfi_offset 6, -32
 127              		.cfi_offset 12, -24
 128              		.cfi_offset 13, -16
 129              	.LBB96:
1539:fltk-1.3.4-1/png/pngread.c ****    }
 130              		.loc 1 1539 0
 131 0063 BE000000 		movl	$.LC1, %esi
 131      00
 132              	.LVL15:
 133 0068 4889C7   		movq	%rax, %rdi
 134              	.LVL16:
 135 006b E8000000 		call	png_error
 135      00
 136              	.LVL17:
 137              	.L4:
 138              	.LBB95:
 139              	.LBB94:
1535:fltk-1.3.4-1/png/pngread.c ****          }
 140              		.loc 1 1535 0
 141 0070 BE000000 		movl	$.LC0, %esi
 141      00
 142              	.LVL18:
 143 0075 4889C7   		movq	%rax, %rdi
 144              	.LVL19:
 145 0078 E8000000 		call	png_error
 145      00
 146              	.LVL20:
 147              	.LBE94:
 148              	.LBE95:
 149              	.LBE96:
 150              		.cfi_endproc
 151              	.LFE76:
 153              		.section	.text.unlikely.png_image_memory_read
 154              	.LCOLDE2:
 155              		.section	.text.png_image_memory_read
 156              	.LHOTE2:
 157              		.section	.text.unlikely.png_image_skip_unused_chunks,"ax",@progbits
 158              	.LCOLDB3:
 159              		.section	.text.png_image_skip_unused_chunks,"ax",@progbits
 160              	.LHOTB3:
 161              		.p2align 4,,15
 163              	png_image_skip_unused_chunks:
 164              	.LFB78:
1542:fltk-1.3.4-1/png/pngread.c **** 
1543:fltk-1.3.4-1/png/pngread.c **** int PNGAPI png_image_begin_read_from_memory(png_imagep image,
1544:fltk-1.3.4-1/png/pngread.c ****    png_const_voidp memory, png_size_t size)
1545:fltk-1.3.4-1/png/pngread.c **** {
1546:fltk-1.3.4-1/png/pngread.c ****    if (image != NULL && image->version == PNG_IMAGE_VERSION)
1547:fltk-1.3.4-1/png/pngread.c ****    {
1548:fltk-1.3.4-1/png/pngread.c ****       if (memory != NULL && size > 0)
1549:fltk-1.3.4-1/png/pngread.c ****       {
1550:fltk-1.3.4-1/png/pngread.c ****          if (png_image_read_init(image) != 0)
1551:fltk-1.3.4-1/png/pngread.c ****          {
1552:fltk-1.3.4-1/png/pngread.c ****             /* Now set the IO functions to read from the memory buffer and
1553:fltk-1.3.4-1/png/pngread.c ****              * store it into io_ptr.  Again do this in-place to avoid calling a
1554:fltk-1.3.4-1/png/pngread.c ****              * libpng function that requires error handling.
1555:fltk-1.3.4-1/png/pngread.c ****              */
1556:fltk-1.3.4-1/png/pngread.c ****             image->opaque->memory = png_voidcast(png_const_bytep, memory);
1557:fltk-1.3.4-1/png/pngread.c ****             image->opaque->size = size;
1558:fltk-1.3.4-1/png/pngread.c ****             image->opaque->png_ptr->io_ptr = image;
1559:fltk-1.3.4-1/png/pngread.c ****             image->opaque->png_ptr->read_data_fn = png_image_memory_read;
1560:fltk-1.3.4-1/png/pngread.c **** 
1561:fltk-1.3.4-1/png/pngread.c ****             return png_safe_execute(image, png_image_read_header, image);
1562:fltk-1.3.4-1/png/pngread.c ****          }
1563:fltk-1.3.4-1/png/pngread.c ****       }
1564:fltk-1.3.4-1/png/pngread.c **** 
1565:fltk-1.3.4-1/png/pngread.c ****       else
1566:fltk-1.3.4-1/png/pngread.c ****          return png_image_error(image,
1567:fltk-1.3.4-1/png/pngread.c ****             "png_image_begin_read_from_memory: invalid argument");
1568:fltk-1.3.4-1/png/pngread.c ****    }
1569:fltk-1.3.4-1/png/pngread.c **** 
1570:fltk-1.3.4-1/png/pngread.c ****    else if (image != NULL)
1571:fltk-1.3.4-1/png/pngread.c ****       return png_image_error(image,
1572:fltk-1.3.4-1/png/pngread.c ****          "png_image_begin_read_from_memory: incorrect PNG_IMAGE_VERSION");
1573:fltk-1.3.4-1/png/pngread.c **** 
1574:fltk-1.3.4-1/png/pngread.c ****    return 0;
1575:fltk-1.3.4-1/png/pngread.c **** }
1576:fltk-1.3.4-1/png/pngread.c **** 
1577:fltk-1.3.4-1/png/pngread.c **** /* Utility function to skip chunks that are not used by the simplified image
1578:fltk-1.3.4-1/png/pngread.c ****  * read functions and an appropriate macro to call it.
1579:fltk-1.3.4-1/png/pngread.c ****  */
1580:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED
1581:fltk-1.3.4-1/png/pngread.c **** static void
1582:fltk-1.3.4-1/png/pngread.c **** png_image_skip_unused_chunks(png_structrp png_ptr)
1583:fltk-1.3.4-1/png/pngread.c **** {
 165              		.loc 1 1583 0
 166              		.cfi_startproc
 167              	.LVL21:
 168 0000 53       		pushq	%rbx
 169              		.cfi_def_cfa_offset 16
 170              		.cfi_offset 3, -16
 171              	.LBB97:
1584:fltk-1.3.4-1/png/pngread.c ****    /* Prepare the reader to ignore all recognized chunks whose data will not
1585:fltk-1.3.4-1/png/pngread.c ****     * be used, i.e., all chunks recognized by libpng except for those
1586:fltk-1.3.4-1/png/pngread.c ****     * involved in basic image reading:
1587:fltk-1.3.4-1/png/pngread.c ****     *
1588:fltk-1.3.4-1/png/pngread.c ****     *    IHDR, PLTE, IDAT, IEND
1589:fltk-1.3.4-1/png/pngread.c ****     *
1590:fltk-1.3.4-1/png/pngread.c ****     * Or image data handling:
1591:fltk-1.3.4-1/png/pngread.c ****     *
1592:fltk-1.3.4-1/png/pngread.c ****     *    tRNS, bKGD, gAMA, cHRM, sRGB, [iCCP] and sBIT.
1593:fltk-1.3.4-1/png/pngread.c ****     *
1594:fltk-1.3.4-1/png/pngread.c ****     * This provides a small performance improvement and eliminates any
1595:fltk-1.3.4-1/png/pngread.c ****     * potential vulnerability to security problems in the unused chunks.
1596:fltk-1.3.4-1/png/pngread.c ****     *
1597:fltk-1.3.4-1/png/pngread.c ****     * At present the iCCP chunk data isn't used, so iCCP chunk can be ignored
1598:fltk-1.3.4-1/png/pngread.c ****     * too.  This allows the simplified API to be compiled without iCCP support,
1599:fltk-1.3.4-1/png/pngread.c ****     * however if the support is there the chunk is still checked to detect
1600:fltk-1.3.4-1/png/pngread.c ****     * errors (which are unfortunately quite common.)
1601:fltk-1.3.4-1/png/pngread.c ****     */
1602:fltk-1.3.4-1/png/pngread.c ****    {
1603:fltk-1.3.4-1/png/pngread.c ****          static PNG_CONST png_byte chunks_to_process[] = {
1604:fltk-1.3.4-1/png/pngread.c ****             98,  75,  71,  68, '\0',  /* bKGD */
1605:fltk-1.3.4-1/png/pngread.c ****             99,  72,  82,  77, '\0',  /* cHRM */
1606:fltk-1.3.4-1/png/pngread.c ****            103,  65,  77,  65, '\0',  /* gAMA */
1607:fltk-1.3.4-1/png/pngread.c **** #        ifdef PNG_READ_iCCP_SUPPORTED
1608:fltk-1.3.4-1/png/pngread.c ****            105,  67,  67,  80, '\0',  /* iCCP */
1609:fltk-1.3.4-1/png/pngread.c **** #        endif
1610:fltk-1.3.4-1/png/pngread.c ****            115,  66,  73,  84, '\0',  /* sBIT */
1611:fltk-1.3.4-1/png/pngread.c ****            115,  82,  71,  66, '\0',  /* sRGB */
1612:fltk-1.3.4-1/png/pngread.c ****            };
1613:fltk-1.3.4-1/png/pngread.c **** 
1614:fltk-1.3.4-1/png/pngread.c ****        /* Ignore unknown chunks and all other chunks except for the
1615:fltk-1.3.4-1/png/pngread.c ****         * IHDR, PLTE, tRNS, IDAT, and IEND chunks.
1616:fltk-1.3.4-1/png/pngread.c ****         */
1617:fltk-1.3.4-1/png/pngread.c ****        png_set_keep_unknown_chunks(png_ptr, PNG_HANDLE_CHUNK_NEVER,
 172              		.loc 1 1617 0
 173 0001 B9FFFFFF 		movl	$-1, %ecx
 173      FF
 174              	.LBE97:
1583:fltk-1.3.4-1/png/pngread.c ****    /* Prepare the reader to ignore all recognized chunks whose data will not
 175              		.loc 1 1583 0
 176 0006 4889FB   		movq	%rdi, %rbx
 177              	.LBB98:
 178              		.loc 1 1617 0
 179 0009 31D2     		xorl	%edx, %edx
 180 000b BE010000 		movl	$1, %esi
 180      00
 181 0010 E8000000 		call	png_set_keep_unknown_chunks
 181      00
 182              	.LVL22:
1618:fltk-1.3.4-1/png/pngread.c ****          NULL, -1);
1619:fltk-1.3.4-1/png/pngread.c **** 
1620:fltk-1.3.4-1/png/pngread.c ****        /* But do not ignore image data handling chunks */
1621:fltk-1.3.4-1/png/pngread.c ****        png_set_keep_unknown_chunks(png_ptr, PNG_HANDLE_CHUNK_AS_DEFAULT,
 183              		.loc 1 1621 0
 184 0015 4889DF   		movq	%rbx, %rdi
 185 0018 B9060000 		movl	$6, %ecx
 185      00
 186 001d BA000000 		movl	$chunks_to_process.6930, %edx
 186      00
 187              	.LBE98:
1622:fltk-1.3.4-1/png/pngread.c ****          chunks_to_process, (int)/*SAFE*/(sizeof chunks_to_process)/5);
1623:fltk-1.3.4-1/png/pngread.c ****     }
1624:fltk-1.3.4-1/png/pngread.c **** }
 188              		.loc 1 1624 0
 189 0022 5B       		popq	%rbx
 190              		.cfi_def_cfa_offset 8
 191              	.LVL23:
 192              	.LBB99:
1621:fltk-1.3.4-1/png/pngread.c ****          chunks_to_process, (int)/*SAFE*/(sizeof chunks_to_process)/5);
 193              		.loc 1 1621 0
 194 0023 31F6     		xorl	%esi, %esi
 195 0025 E9000000 		jmp	png_set_keep_unknown_chunks
 195      00
 196              	.LVL24:
 197              	.LBE99:
 198              		.cfi_endproc
 199              	.LFE78:
 201              		.section	.text.unlikely.png_image_skip_unused_chunks
 202              	.LCOLDE3:
 203              		.section	.text.png_image_skip_unused_chunks
 204              	.LHOTE3:
 205              		.section	.rodata.str1.1
 206              	.LC4:
 207 002c 4D697373 		.string	"Missing IHDR before IDAT"
 207      696E6720 
 207      49484452 
 207      20626566 
 207      6F726520 
 208              	.LC5:
 209 0045 4D697373 		.string	"Missing PLTE before IDAT"
 209      696E6720 
 209      504C5445 
 209      20626566 
 209      6F726520 
 210              	.LC6:
 211 005e 546F6F20 		.string	"Too many IDATs found"
 211      6D616E79 
 211      20494441 
 211      54732066 
 211      6F756E64 
 212              		.section	.text.unlikely.png_read_info.part.4,"ax",@progbits
 213              	.LCOLDB7:
 214              		.section	.text.png_read_info.part.4,"ax",@progbits
 215              	.LHOTB7:
 216              		.p2align 4,,15
 218              	png_read_info.part.4:
 219              	.LFB98:
  92:fltk-1.3.4-1/png/pngread.c **** {
 220              		.loc 1 92 0
 221              		.cfi_startproc
 222              	.LVL25:
 223 0000 4155     		pushq	%r13
 224              		.cfi_def_cfa_offset 16
 225              		.cfi_offset 13, -16
 226 0002 4154     		pushq	%r12
 227              		.cfi_def_cfa_offset 24
 228              		.cfi_offset 12, -24
 229 0004 4989F5   		movq	%rsi, %r13
 230 0007 55       		pushq	%rbp
 231              		.cfi_def_cfa_offset 32
 232              		.cfi_offset 6, -32
 233 0008 53       		pushq	%rbx
 234              		.cfi_def_cfa_offset 40
 235              		.cfi_offset 3, -40
 236 0009 4889FD   		movq	%rdi, %rbp
 237 000c 4883EC08 		subq	$8, %rsp
 238              		.cfi_def_cfa_offset 48
 104:fltk-1.3.4-1/png/pngread.c **** 
 239              		.loc 1 104 0
 240 0010 E8000000 		call	png_read_sig
 240      00
 241              	.LVL26:
 242              		.p2align 4,,10
 243 0015 0F1F00   		.p2align 3
 244              	.L27:
 245              	.LBB100:
 108:fltk-1.3.4-1/png/pngread.c ****       png_uint_32 chunk_name = png_ptr->chunk_name;
 246              		.loc 1 108 0
 247 0018 4889EF   		movq	%rbp, %rdi
 248 001b E8000000 		call	png_read_chunk_header
 248      00
 249              	.LVL27:
 109:fltk-1.3.4-1/png/pngread.c **** 
 250              		.loc 1 109 0
 251 0020 8B9D1802 		movl	536(%rbp), %ebx
 251      0000
 108:fltk-1.3.4-1/png/pngread.c ****       png_uint_32 chunk_name = png_ptr->chunk_name;
 252              		.loc 1 108 0
 253 0026 4189C4   		movl	%eax, %r12d
 254              	.LVL28:
 116:fltk-1.3.4-1/png/pngread.c ****             png_chunk_error(png_ptr, "Missing IHDR before IDAT");
 255              		.loc 1 116 0
 256 0029 8B852C01 		movl	300(%rbp), %eax
 256      0000
 257              	.LVL29:
 114:fltk-1.3.4-1/png/pngread.c ****       {
 258              		.loc 1 114 0
 259 002f 81FB5441 		cmpl	$1229209940, %ebx
 259      4449
 260 0035 7459     		je	.L67
 129:fltk-1.3.4-1/png/pngread.c ****          png_ptr->mode |= PNG_AFTER_IDAT;
 261              		.loc 1 129 0
 262 0037 A804     		testb	$4, %al
 263 0039 7409     		je	.L34
 130:fltk-1.3.4-1/png/pngread.c **** 
 264              		.loc 1 130 0
 265 003b 83C808   		orl	$8, %eax
 266 003e 89852C01 		movl	%eax, 300(%rbp)
 266      0000
 267              	.L34:
 135:fltk-1.3.4-1/png/pngread.c ****          png_handle_IHDR(png_ptr, info_ptr, length);
 268              		.loc 1 135 0
 269 0044 81FB5244 		cmpl	$1229472850, %ebx
 269      4849
 270 004a 0F84A001 		je	.L68
 270      0000
 138:fltk-1.3.4-1/png/pngread.c ****          png_handle_IEND(png_ptr, info_ptr, length);
 271              		.loc 1 138 0
 272 0050 81FB444E 		cmpl	$1229278788, %ebx
 272      4549
 273 0056 0F848400 		je	.L69
 273      0000
 142:fltk-1.3.4-1/png/pngread.c ****       {
 274              		.loc 1 142 0
 275 005c 89DE     		movl	%ebx, %esi
 276 005e 4889EF   		movq	%rbp, %rdi
 277 0061 E8000000 		call	png_chunk_unknown_handling
 277      00
 278              	.LVL30:
 279 0066 85C0     		testl	%eax, %eax
 280 0068 0F848A00 		je	.L38
 280      0000
 144:fltk-1.3.4-1/png/pngread.c **** 
 281              		.loc 1 144 0
 282 006e 89C1     		movl	%eax, %ecx
 283 0070 4489E2   		movl	%r12d, %edx
 284 0073 4C89EE   		movq	%r13, %rsi
 285 0076 4889EF   		movq	%rbp, %rdi
 286 0079 E8000000 		call	png_handle_unknown
 286      00
 287              	.LVL31:
 146:fltk-1.3.4-1/png/pngread.c ****             png_ptr->mode |= PNG_HAVE_PLTE;
 288              		.loc 1 146 0
 289 007e 81FB4554 		cmpl	$1347179589, %ebx
 289      4C50
 290 0084 7592     		jne	.L27
 147:fltk-1.3.4-1/png/pngread.c **** 
 291              		.loc 1 147 0
 292 0086 838D2C01 		orl	$2, 300(%rbp)
 292      000002
 293 008d EB89     		jmp	.L27
 294 008f 90       		.p2align 4,,10
 295              		.p2align 3
 296              	.L67:
 116:fltk-1.3.4-1/png/pngread.c ****             png_chunk_error(png_ptr, "Missing IHDR before IDAT");
 297              		.loc 1 116 0
 298 0090 A801     		testb	$1, %al
 299 0092 0F845703 		je	.L70
 299      0000
 119:fltk-1.3.4-1/png/pngread.c ****              (png_ptr->mode & PNG_HAVE_PLTE) == 0)
 300              		.loc 1 119 0
 301 0098 80BD7702 		cmpb	$3, 631(%rbp)
 301      000003
 302 009f 0F847B01 		je	.L71
 302      0000
 303              	.L30:
 123:fltk-1.3.4-1/png/pngread.c ****             png_chunk_benign_error(png_ptr, "Too many IDATs found");
 304              		.loc 1 123 0
 305 00a5 A808     		testb	$8, %al
 306 00a7 0F855B01 		jne	.L72
 306      0000
 307              	.L31:
 126:fltk-1.3.4-1/png/pngread.c ****       }
 308              		.loc 1 126 0
 309 00ad 83C804   		orl	$4, %eax
 142:fltk-1.3.4-1/png/pngread.c ****       {
 310              		.loc 1 142 0
 311 00b0 BE544144 		movl	$1229209940, %esi
 311      49
 312 00b5 4889EF   		movq	%rbp, %rdi
 126:fltk-1.3.4-1/png/pngread.c ****       }
 313              		.loc 1 126 0
 314 00b8 89852C01 		movl	%eax, 300(%rbp)
 314      0000
 142:fltk-1.3.4-1/png/pngread.c ****       {
 315              		.loc 1 142 0
 316 00be E8000000 		call	png_chunk_unknown_handling
 316      00
 317              	.LVL32:
 318 00c3 85C0     		testl	%eax, %eax
 319 00c5 0F85FF02 		jne	.L73
 319      0000
 320              	.L64:
 161:fltk-1.3.4-1/png/pngread.c ****          break;
 321              		.loc 1 161 0
 322 00cb 4489A558 		movl	%r12d, 600(%rbp)
 322      020000
 323              	.LBE100:
 254:fltk-1.3.4-1/png/pngread.c **** #endif /* SEQUENTIAL_READ */
 324              		.loc 1 254 0
 325 00d2 4883C408 		addq	$8, %rsp
 326              		.cfi_remember_state
 327              		.cfi_def_cfa_offset 40
 328 00d6 5B       		popq	%rbx
 329              		.cfi_def_cfa_offset 32
 330              	.LVL33:
 331 00d7 5D       		popq	%rbp
 332              		.cfi_def_cfa_offset 24
 333              	.LVL34:
 334 00d8 415C     		popq	%r12
 335              		.cfi_def_cfa_offset 16
 336              	.LVL35:
 337 00da 415D     		popq	%r13
 338              		.cfi_def_cfa_offset 8
 339              	.LVL36:
 340 00dc C3       		ret
 341              	.LVL37:
 342 00dd 0F1F00   		.p2align 4,,10
 343              		.p2align 3
 344              	.L69:
 345              		.cfi_restore_state
 346              	.LBB101:
 139:fltk-1.3.4-1/png/pngread.c **** 
 347              		.loc 1 139 0
 348 00e0 4489E2   		movl	%r12d, %edx
 349 00e3 4C89EE   		movq	%r13, %rsi
 350 00e6 4889EF   		movq	%rbp, %rdi
 351 00e9 E8000000 		call	png_handle_IEND
 351      00
 352              	.LVL38:
 353 00ee E925FFFF 		jmp	.L27
 353      FF
 354              	.LVL39:
 355              		.p2align 4,,10
 356 00f3 0F1F4400 		.p2align 3
 356      00
 357              	.L38:
 156:fltk-1.3.4-1/png/pngread.c ****          png_handle_PLTE(png_ptr, info_ptr, length);
 358              		.loc 1 156 0
 359 00f8 81FB4554 		cmpl	$1347179589, %ebx
 359      4C50
 360 00fe 0F843401 		je	.L74
 360      0000
 159:fltk-1.3.4-1/png/pngread.c ****       {
 361              		.loc 1 159 0
 362 0104 81FB5441 		cmpl	$1229209940, %ebx
 362      4449
 363 010a 74BF     		je	.L64
 166:fltk-1.3.4-1/png/pngread.c ****          png_handle_bKGD(png_ptr, info_ptr, length);
 364              		.loc 1 166 0
 365 010c 81FB4447 		cmpl	$1649100612, %ebx
 365      4B62
 366 0112 0F843801 		je	.L75
 366      0000
 171:fltk-1.3.4-1/png/pngread.c ****          png_handle_cHRM(png_ptr, info_ptr, length);
 367              		.loc 1 171 0
 368 0118 81FB4D52 		cmpl	$1665684045, %ebx
 368      4863
 369 011e 0F844401 		je	.L76
 369      0000
 176:fltk-1.3.4-1/png/pngread.c ****          png_handle_gAMA(png_ptr, info_ptr, length);
 370              		.loc 1 176 0
 371 0124 81FB414D 		cmpl	$1732332865, %ebx
 371      4167
 372 012a 0F845001 		je	.L77
 372      0000
 181:fltk-1.3.4-1/png/pngread.c ****          png_handle_hIST(png_ptr, info_ptr, length);
 373              		.loc 1 181 0
 374 0130 81FB5453 		cmpl	$1749635924, %ebx
 374      4968
 375 0136 0F845C01 		je	.L78
 375      0000
 186:fltk-1.3.4-1/png/pngread.c ****          png_handle_oFFs(png_ptr, info_ptr, length);
 376              		.loc 1 186 0
 377 013c 81FB7346 		cmpl	$1866876531, %ebx
 377      466F
 378 0142 0F846801 		je	.L79
 378      0000
 191:fltk-1.3.4-1/png/pngread.c ****          png_handle_pCAL(png_ptr, info_ptr, length);
 379              		.loc 1 191 0
 380 0148 81FB4C41 		cmpl	$1883455820, %ebx
 380      4370
 381 014e 0F847401 		je	.L80
 381      0000
 196:fltk-1.3.4-1/png/pngread.c ****          png_handle_sCAL(png_ptr, info_ptr, length);
 382              		.loc 1 196 0
 383 0154 81FB4C41 		cmpl	$1933787468, %ebx
 383      4373
 384 015a 0F848001 		je	.L81
 384      0000
 201:fltk-1.3.4-1/png/pngread.c ****          png_handle_pHYs(png_ptr, info_ptr, length);
 385              		.loc 1 201 0
 386 0160 81FB7359 		cmpl	$1883789683, %ebx
 386      4870
 387 0166 0F848C01 		je	.L82
 387      0000
 206:fltk-1.3.4-1/png/pngread.c ****          png_handle_sBIT(png_ptr, info_ptr, length);
 388              		.loc 1 206 0
 389 016c 81FB5449 		cmpl	$1933723988, %ebx
 389      4273
 390 0172 0F849801 		je	.L83
 390      0000
 211:fltk-1.3.4-1/png/pngread.c ****          png_handle_sRGB(png_ptr, info_ptr, length);
 391              		.loc 1 211 0
 392 0178 81FB4247 		cmpl	$1934772034, %ebx
 392      5273
 393 017e 0F84A401 		je	.L84
 393      0000
 216:fltk-1.3.4-1/png/pngread.c ****          png_handle_iCCP(png_ptr, info_ptr, length);
 394              		.loc 1 216 0
 395 0184 81FB5043 		cmpl	$1766015824, %ebx
 395      4369
 396 018a 0F84B001 		je	.L85
 396      0000
 221:fltk-1.3.4-1/png/pngread.c ****          png_handle_sPLT(png_ptr, info_ptr, length);
 397              		.loc 1 221 0
 398 0190 81FB544C 		cmpl	$1934642260, %ebx
 398      5073
 399 0196 0F84BC01 		je	.L86
 399      0000
 226:fltk-1.3.4-1/png/pngread.c ****          png_handle_tEXt(png_ptr, info_ptr, length);
 400              		.loc 1 226 0
 401 019c 81FB7458 		cmpl	$1950701684, %ebx
 401      4574
 402 01a2 0F84D601 		je	.L87
 402      0000
 231:fltk-1.3.4-1/png/pngread.c ****          png_handle_tIME(png_ptr, info_ptr, length);
 403              		.loc 1 231 0
 404 01a8 81FB454D 		cmpl	$1950960965, %ebx
 404      4974
 405 01ae 0F84DD01 		je	.L88
 405      0000
 236:fltk-1.3.4-1/png/pngread.c ****          png_handle_tRNS(png_ptr, info_ptr, length);
 406              		.loc 1 236 0
 407 01b4 81FB534E 		cmpl	$1951551059, %ebx
 407      5274
 408 01ba 0F84E401 		je	.L89
 408      0000
 241:fltk-1.3.4-1/png/pngread.c ****          png_handle_zTXt(png_ptr, info_ptr, length);
 409              		.loc 1 241 0
 410 01c0 81FB7458 		cmpl	$2052348020, %ebx
 410      547A
 411 01c6 0F84EB01 		je	.L90
 411      0000
 246:fltk-1.3.4-1/png/pngread.c ****          png_handle_iTXt(png_ptr, info_ptr, length);
 412              		.loc 1 246 0
 413 01cc 81FB7458 		cmpl	$1767135348, %ebx
 413      5469
 414 01d2 0F849301 		je	.L91
 414      0000
 251:fltk-1.3.4-1/png/pngread.c ****             PNG_HANDLE_CHUNK_AS_DEFAULT);
 415              		.loc 1 251 0
 416 01d8 31C9     		xorl	%ecx, %ecx
 417 01da 4489E2   		movl	%r12d, %edx
 418 01dd 4C89EE   		movq	%r13, %rsi
 419 01e0 4889EF   		movq	%rbp, %rdi
 420 01e3 E8000000 		call	png_handle_unknown
 420      00
 421              	.LVL40:
 422 01e8 E92BFEFF 		jmp	.L27
 422      FF
 423 01ed 0F1F00   		.p2align 4,,10
 424              		.p2align 3
 425              	.L68:
 136:fltk-1.3.4-1/png/pngread.c **** 
 426              		.loc 1 136 0
 427 01f0 4489E2   		movl	%r12d, %edx
 428 01f3 4C89EE   		movq	%r13, %rsi
 429 01f6 4889EF   		movq	%rbp, %rdi
 430 01f9 E8000000 		call	png_handle_IHDR
 430      00
 431              	.LVL41:
 432 01fe E915FEFF 		jmp	.L27
 432      FF
 433              		.p2align 4,,10
 434 0203 0F1F4400 		.p2align 3
 434      00
 435              	.L72:
 124:fltk-1.3.4-1/png/pngread.c **** 
 436              		.loc 1 124 0
 437 0208 BE000000 		movl	$.LC6, %esi
 437      00
 438 020d 4889EF   		movq	%rbp, %rdi
 439 0210 E8000000 		call	png_chunk_benign_error
 439      00
 440              	.LVL42:
 441 0215 8B852C01 		movl	300(%rbp), %eax
 441      0000
 442 021b E98DFEFF 		jmp	.L31
 442      FF
 443              		.p2align 4,,10
 444              		.p2align 3
 445              	.L71:
 119:fltk-1.3.4-1/png/pngread.c ****              (png_ptr->mode & PNG_HAVE_PLTE) == 0)
 446              		.loc 1 119 0
 447 0220 A802     		testb	$2, %al
 448 0222 0F857DFE 		jne	.L30
 448      FFFF
 121:fltk-1.3.4-1/png/pngread.c **** 
 449              		.loc 1 121 0
 450 0228 BE000000 		movl	$.LC5, %esi
 450      00
 451 022d 4889EF   		movq	%rbp, %rdi
 452 0230 E8000000 		call	png_chunk_error
 452      00
 453              	.LVL43:
 454              		.p2align 4,,10
 455 0235 0F1F00   		.p2align 3
 456              	.L74:
 157:fltk-1.3.4-1/png/pngread.c **** 
 457              		.loc 1 157 0
 458 0238 4489E2   		movl	%r12d, %edx
 459 023b 4C89EE   		movq	%r13, %rsi
 460 023e 4889EF   		movq	%rbp, %rdi
 461 0241 E8000000 		call	png_handle_PLTE
 461      00
 462              	.LVL44:
 463 0246 E9CDFDFF 		jmp	.L27
 463      FF
 464              	.LVL45:
 465 024b 0F1F4400 		.p2align 4,,10
 465      00
 466              		.p2align 3
 467              	.L75:
 167:fltk-1.3.4-1/png/pngread.c **** #endif
 468              		.loc 1 167 0
 469 0250 4489E2   		movl	%r12d, %edx
 470 0253 4C89EE   		movq	%r13, %rsi
 471 0256 4889EF   		movq	%rbp, %rdi
 472 0259 E8000000 		call	png_handle_bKGD
 472      00
 473              	.LVL46:
 474 025e E9B5FDFF 		jmp	.L27
 474      FF
 475              	.LVL47:
 476              		.p2align 4,,10
 477 0263 0F1F4400 		.p2align 3
 477      00
 478              	.L76:
 172:fltk-1.3.4-1/png/pngread.c **** #endif
 479              		.loc 1 172 0
 480 0268 4489E2   		movl	%r12d, %edx
 481 026b 4C89EE   		movq	%r13, %rsi
 482 026e 4889EF   		movq	%rbp, %rdi
 483 0271 E8000000 		call	png_handle_cHRM
 483      00
 484              	.LVL48:
 485 0276 E99DFDFF 		jmp	.L27
 485      FF
 486              	.LVL49:
 487 027b 0F1F4400 		.p2align 4,,10
 487      00
 488              		.p2align 3
 489              	.L77:
 177:fltk-1.3.4-1/png/pngread.c **** #endif
 490              		.loc 1 177 0
 491 0280 4489E2   		movl	%r12d, %edx
 492 0283 4C89EE   		movq	%r13, %rsi
 493 0286 4889EF   		movq	%rbp, %rdi
 494 0289 E8000000 		call	png_handle_gAMA
 494      00
 495              	.LVL50:
 496 028e E985FDFF 		jmp	.L27
 496      FF
 497              	.LVL51:
 498              		.p2align 4,,10
 499 0293 0F1F4400 		.p2align 3
 499      00
 500              	.L78:
 182:fltk-1.3.4-1/png/pngread.c **** #endif
 501              		.loc 1 182 0
 502 0298 4489E2   		movl	%r12d, %edx
 503 029b 4C89EE   		movq	%r13, %rsi
 504 029e 4889EF   		movq	%rbp, %rdi
 505 02a1 E8000000 		call	png_handle_hIST
 505      00
 506              	.LVL52:
 507 02a6 E96DFDFF 		jmp	.L27
 507      FF
 508              	.LVL53:
 509 02ab 0F1F4400 		.p2align 4,,10
 509      00
 510              		.p2align 3
 511              	.L79:
 187:fltk-1.3.4-1/png/pngread.c **** #endif
 512              		.loc 1 187 0
 513 02b0 4489E2   		movl	%r12d, %edx
 514 02b3 4C89EE   		movq	%r13, %rsi
 515 02b6 4889EF   		movq	%rbp, %rdi
 516 02b9 E8000000 		call	png_handle_oFFs
 516      00
 517              	.LVL54:
 518 02be E955FDFF 		jmp	.L27
 518      FF
 519              	.LVL55:
 520              		.p2align 4,,10
 521 02c3 0F1F4400 		.p2align 3
 521      00
 522              	.L80:
 192:fltk-1.3.4-1/png/pngread.c **** #endif
 523              		.loc 1 192 0
 524 02c8 4489E2   		movl	%r12d, %edx
 525 02cb 4C89EE   		movq	%r13, %rsi
 526 02ce 4889EF   		movq	%rbp, %rdi
 527 02d1 E8000000 		call	png_handle_pCAL
 527      00
 528              	.LVL56:
 529 02d6 E93DFDFF 		jmp	.L27
 529      FF
 530              	.LVL57:
 531 02db 0F1F4400 		.p2align 4,,10
 531      00
 532              		.p2align 3
 533              	.L81:
 197:fltk-1.3.4-1/png/pngread.c **** #endif
 534              		.loc 1 197 0
 535 02e0 4489E2   		movl	%r12d, %edx
 536 02e3 4C89EE   		movq	%r13, %rsi
 537 02e6 4889EF   		movq	%rbp, %rdi
 538 02e9 E8000000 		call	png_handle_sCAL
 538      00
 539              	.LVL58:
 540 02ee E925FDFF 		jmp	.L27
 540      FF
 541              	.LVL59:
 542              		.p2align 4,,10
 543 02f3 0F1F4400 		.p2align 3
 543      00
 544              	.L82:
 202:fltk-1.3.4-1/png/pngread.c **** #endif
 545              		.loc 1 202 0
 546 02f8 4489E2   		movl	%r12d, %edx
 547 02fb 4C89EE   		movq	%r13, %rsi
 548 02fe 4889EF   		movq	%rbp, %rdi
 549 0301 E8000000 		call	png_handle_pHYs
 549      00
 550              	.LVL60:
 551 0306 E90DFDFF 		jmp	.L27
 551      FF
 552              	.LVL61:
 553 030b 0F1F4400 		.p2align 4,,10
 553      00
 554              		.p2align 3
 555              	.L83:
 207:fltk-1.3.4-1/png/pngread.c **** #endif
 556              		.loc 1 207 0
 557 0310 4489E2   		movl	%r12d, %edx
 558 0313 4C89EE   		movq	%r13, %rsi
 559 0316 4889EF   		movq	%rbp, %rdi
 560 0319 E8000000 		call	png_handle_sBIT
 560      00
 561              	.LVL62:
 562 031e E9F5FCFF 		jmp	.L27
 562      FF
 563              	.LVL63:
 564              		.p2align 4,,10
 565 0323 0F1F4400 		.p2align 3
 565      00
 566              	.L84:
 212:fltk-1.3.4-1/png/pngread.c **** #endif
 567              		.loc 1 212 0
 568 0328 4489E2   		movl	%r12d, %edx
 569 032b 4C89EE   		movq	%r13, %rsi
 570 032e 4889EF   		movq	%rbp, %rdi
 571 0331 E8000000 		call	png_handle_sRGB
 571      00
 572              	.LVL64:
 573 0336 E9DDFCFF 		jmp	.L27
 573      FF
 574              	.LVL65:
 575 033b 0F1F4400 		.p2align 4,,10
 575      00
 576              		.p2align 3
 577              	.L85:
 217:fltk-1.3.4-1/png/pngread.c **** #endif
 578              		.loc 1 217 0
 579 0340 4489E2   		movl	%r12d, %edx
 580 0343 4C89EE   		movq	%r13, %rsi
 581 0346 4889EF   		movq	%rbp, %rdi
 582 0349 E8000000 		call	png_handle_iCCP
 582      00
 583              	.LVL66:
 584 034e E9C5FCFF 		jmp	.L27
 584      FF
 585              	.LVL67:
 586              		.p2align 4,,10
 587 0353 0F1F4400 		.p2align 3
 587      00
 588              	.L86:
 222:fltk-1.3.4-1/png/pngread.c **** #endif
 589              		.loc 1 222 0
 590 0358 4489E2   		movl	%r12d, %edx
 591 035b 4C89EE   		movq	%r13, %rsi
 592 035e 4889EF   		movq	%rbp, %rdi
 593 0361 E8000000 		call	png_handle_sPLT
 593      00
 594              	.LVL68:
 595 0366 E9ADFCFF 		jmp	.L27
 595      FF
 596              	.LVL69:
 597              	.L91:
 247:fltk-1.3.4-1/png/pngread.c **** #endif
 598              		.loc 1 247 0
 599 036b 4489E2   		movl	%r12d, %edx
 600 036e 4C89EE   		movq	%r13, %rsi
 601 0371 4889EF   		movq	%rbp, %rdi
 602 0374 E8000000 		call	png_handle_iTXt
 602      00
 603              	.LVL70:
 604 0379 E99AFCFF 		jmp	.L27
 604      FF
 605              	.LVL71:
 606              	.L87:
 227:fltk-1.3.4-1/png/pngread.c **** #endif
 607              		.loc 1 227 0
 608 037e 4489E2   		movl	%r12d, %edx
 609 0381 4C89EE   		movq	%r13, %rsi
 610 0384 4889EF   		movq	%rbp, %rdi
 611 0387 E8000000 		call	png_handle_tEXt
 611      00
 612              	.LVL72:
 613 038c E987FCFF 		jmp	.L27
 613      FF
 614              	.LVL73:
 615              	.L88:
 232:fltk-1.3.4-1/png/pngread.c **** #endif
 616              		.loc 1 232 0
 617 0391 4489E2   		movl	%r12d, %edx
 618 0394 4C89EE   		movq	%r13, %rsi
 619 0397 4889EF   		movq	%rbp, %rdi
 620 039a E8000000 		call	png_handle_tIME
 620      00
 621              	.LVL74:
 622 039f E974FCFF 		jmp	.L27
 622      FF
 623              	.LVL75:
 624              	.L89:
 237:fltk-1.3.4-1/png/pngread.c **** #endif
 625              		.loc 1 237 0
 626 03a4 4489E2   		movl	%r12d, %edx
 627 03a7 4C89EE   		movq	%r13, %rsi
 628 03aa 4889EF   		movq	%rbp, %rdi
 629 03ad E8000000 		call	png_handle_tRNS
 629      00
 630              	.LVL76:
 631 03b2 E961FCFF 		jmp	.L27
 631      FF
 632              	.LVL77:
 633              	.L90:
 242:fltk-1.3.4-1/png/pngread.c **** #endif
 634              		.loc 1 242 0
 635 03b7 4489E2   		movl	%r12d, %edx
 636 03ba 4C89EE   		movq	%r13, %rsi
 637 03bd 4889EF   		movq	%rbp, %rdi
 638 03c0 E8000000 		call	png_handle_zTXt
 638      00
 639              	.LVL78:
 640 03c5 E94EFCFF 		jmp	.L27
 640      FF
 641              	.LVL79:
 642              	.L73:
 144:fltk-1.3.4-1/png/pngread.c **** 
 643              		.loc 1 144 0
 644 03ca 4489E2   		movl	%r12d, %edx
 645 03cd 4C89EE   		movq	%r13, %rsi
 646 03d0 4889EF   		movq	%rbp, %rdi
 647 03d3 89C1     		movl	%eax, %ecx
 648 03d5 E8000000 		call	png_handle_unknown
 648      00
 649              	.LVL80:
 151:fltk-1.3.4-1/png/pngread.c ****             break;
 650              		.loc 1 151 0
 651 03da C7855802 		movl	$0, 600(%rbp)
 651      00000000 
 651      0000
 652              	.LBE101:
 254:fltk-1.3.4-1/png/pngread.c **** #endif /* SEQUENTIAL_READ */
 653              		.loc 1 254 0
 654 03e4 4883C408 		addq	$8, %rsp
 655              		.cfi_remember_state
 656              		.cfi_def_cfa_offset 40
 657 03e8 5B       		popq	%rbx
 658              		.cfi_def_cfa_offset 32
 659              	.LVL81:
 660 03e9 5D       		popq	%rbp
 661              		.cfi_def_cfa_offset 24
 662              	.LVL82:
 663 03ea 415C     		popq	%r12
 664              		.cfi_def_cfa_offset 16
 665              	.LVL83:
 666 03ec 415D     		popq	%r13
 667              		.cfi_def_cfa_offset 8
 668              	.LVL84:
 669 03ee C3       		ret
 670              	.LVL85:
 671              	.L70:
 672              		.cfi_restore_state
 673              	.LBB102:
 117:fltk-1.3.4-1/png/pngread.c **** 
 674              		.loc 1 117 0
 675 03ef BE000000 		movl	$.LC4, %esi
 675      00
 676 03f4 4889EF   		movq	%rbp, %rdi
 677 03f7 E8000000 		call	png_chunk_error
 677      00
 678              	.LVL86:
 679              	.LBE102:
 680              		.cfi_endproc
 681              	.LFE98:
 683              		.section	.text.unlikely.png_read_info.part.4
 684              	.LCOLDE7:
 685              		.section	.text.png_read_info.part.4
 686              	.LHOTE7:
 687              		.section	.text.unlikely.png_image_read_header,"ax",@progbits
 688              	.LCOLDB8:
 689              		.section	.text.png_image_read_header,"ax",@progbits
 690              	.LHOTB8:
 691              		.p2align 4,,15
 693              	png_image_read_header:
 694              	.LFB73:
1383:fltk-1.3.4-1/png/pngread.c ****    png_imagep image = png_voidcast(png_imagep, argument);
 695              		.loc 1 1383 0
 696              		.cfi_startproc
 697              	.LVL87:
 698 0000 4154     		pushq	%r12
 699              		.cfi_def_cfa_offset 16
 700              		.cfi_offset 12, -16
 701 0002 55       		pushq	%rbp
 702              		.cfi_def_cfa_offset 24
 703              		.cfi_offset 6, -24
1388:fltk-1.3.4-1/png/pngread.c ****    png_read_info(png_ptr, info_ptr);
 704              		.loc 1 1388 0
 705 0003 BE010000 		movl	$1, %esi
 705      00
1383:fltk-1.3.4-1/png/pngread.c ****    png_imagep image = png_voidcast(png_imagep, argument);
 706              		.loc 1 1383 0
 707 0008 53       		pushq	%rbx
 708              		.cfi_def_cfa_offset 32
 709              		.cfi_offset 3, -32
1385:fltk-1.3.4-1/png/pngread.c ****    png_inforp info_ptr = image->opaque->info_ptr;
 710              		.loc 1 1385 0
 711 0009 488B07   		movq	(%rdi), %rax
1383:fltk-1.3.4-1/png/pngread.c ****    png_imagep image = png_voidcast(png_imagep, argument);
 712              		.loc 1 1383 0
 713 000c 4889FD   		movq	%rdi, %rbp
1385:fltk-1.3.4-1/png/pngread.c ****    png_inforp info_ptr = image->opaque->info_ptr;
 714              		.loc 1 1385 0
 715 000f 488B18   		movq	(%rax), %rbx
 716              	.LVL88:
1386:fltk-1.3.4-1/png/pngread.c **** 
 717              		.loc 1 1386 0
 718 0012 4C8B6008 		movq	8(%rax), %r12
 719              	.LVL89:
1388:fltk-1.3.4-1/png/pngread.c ****    png_read_info(png_ptr, info_ptr);
 720              		.loc 1 1388 0
 721 0016 4889DF   		movq	%rbx, %rdi
 722              	.LVL90:
 723 0019 E8000000 		call	png_set_benign_errors
 723      00
 724              	.LVL91:
 725              	.LBB103:
 726              	.LBB104:
 100:fltk-1.3.4-1/png/pngread.c ****       return;
 727              		.loc 1 100 0
 728 001e 4885DB   		testq	%rbx, %rbx
 729 0021 7409     		je	.L93
 730 0023 4D85E4   		testq	%r12, %r12
 731 0026 0F85C400 		jne	.L118
 731      0000
 732              	.L93:
 733              	.LVL92:
 734              	.LBE104:
 735              	.LBE103:
1392:fltk-1.3.4-1/png/pngread.c ****    image->height = png_ptr->height;
 736              		.loc 1 1392 0
 737 002c 8B83F801 		movl	504(%rbx), %eax
 737      0000
 738 0032 89450C   		movl	%eax, 12(%rbp)
1393:fltk-1.3.4-1/png/pngread.c **** 
 739              		.loc 1 1393 0
 740 0035 8B83FC01 		movl	508(%rbx), %eax
 740      0000
 741 003b 894510   		movl	%eax, 16(%rbp)
 742 003e 0FB69377 		movzbl	631(%rbx), %edx
 742      020000
 743 0045 0FB78B70 		movzwl	624(%rbx), %ecx
 743      020000
 744 004c 0FB6B378 		movzbl	632(%rbx), %esi
 744      020000
 745              	.LVL93:
 746              	.LBB106:
 747              	.LBB107:
 748              	.LBB108:
1335:fltk-1.3.4-1/png/pngread.c **** 
 749              		.loc 1 1335 0
 750 0053 89D0     		movl	%edx, %eax
 751 0055 83E002   		andl	$2, %eax
 752              	.LVL94:
1337:fltk-1.3.4-1/png/pngread.c ****       format |= PNG_FORMAT_FLAG_ALPHA;
 753              		.loc 1 1337 0
 754 0058 F6C204   		testb	$4, %dl
 755 005b 746B     		je	.L95
1338:fltk-1.3.4-1/png/pngread.c **** 
 756              		.loc 1 1338 0
 757 005d 83C801   		orl	$1, %eax
 758              	.LVL95:
 759              	.L96:
1349:fltk-1.3.4-1/png/pngread.c **** 
 760              		.loc 1 1349 0
 761 0060 89C1     		movl	%eax, %ecx
 762 0062 83C904   		orl	$4, %ecx
 763 0065 4080FE10 		cmpb	$16, %sil
 764 0069 0F44C1   		cmove	%ecx, %eax
 765              	.LVL96:
1352:fltk-1.3.4-1/png/pngread.c **** 
 766              		.loc 1 1352 0
 767 006c 89C1     		movl	%eax, %ecx
 768 006e 83C908   		orl	$8, %ecx
 769 0071 83E201   		andl	$1, %edx
 770 0074 0F45C1   		cmovne	%ecx, %eax
 771              	.LVL97:
 772              	.LBE108:
 773              	.LBE107:
1406:fltk-1.3.4-1/png/pngread.c ****          & (PNG_COLORSPACE_HAVE_ENDPOINTS|PNG_COLORSPACE_ENDPOINTS_MATCH_sRGB|
 774              		.loc 1 1406 0
 775 0077 A802     		testb	$2, %al
1398:fltk-1.3.4-1/png/pngread.c **** 
 776              		.loc 1 1398 0
 777 0079 894514   		movl	%eax, 20(%rbp)
1406:fltk-1.3.4-1/png/pngread.c ****          & (PNG_COLORSPACE_HAVE_ENDPOINTS|PNG_COLORSPACE_ENDPOINTS_MATCH_sRGB|
 778              		.loc 1 1406 0
 779 007c 7415     		je	.L99
1406:fltk-1.3.4-1/png/pngread.c ****          & (PNG_COLORSPACE_HAVE_ENDPOINTS|PNG_COLORSPACE_ENDPOINTS_MATCH_sRGB|
 780              		.loc 1 1406 0 is_stmt 0 discriminator 1
 781 007e 0FB78322 		movzwl	1314(%rbx), %eax
 781      050000
 782 0085 66254280 		andw	$-32702, %ax
 783 0089 6683F802 		cmpw	$2, %ax
 784 008d 0F847D00 		je	.L119
 784      0000
 785              	.L99:
 786              	.LBE106:
 787              	.LBB111:
1419:fltk-1.3.4-1/png/pngread.c ****       {
 788              		.loc 1 1419 0 is_stmt 1
 789 0093 0FB68377 		movzbl	631(%rbx), %eax
 789      020000
 790 009a 84C0     		testb	%al, %al
 791 009c 7462     		je	.L101
 792 009e 3C03     		cmpb	$3, %al
 793 00a0 7536     		jne	.L120
1426:fltk-1.3.4-1/png/pngread.c ****             break;
 794              		.loc 1 1426 0
 795 00a2 0FB78368 		movzwl	616(%rbx), %eax
 795      020000
 796              	.LVL98:
 797              	.L103:
1435:fltk-1.3.4-1/png/pngread.c **** 
 798              		.loc 1 1435 0
 799 00a9 3D010100 		cmpl	$257, %eax
 799      00
 800 00ae BA000100 		movl	$256, %edx
 800      00
 801 00b3 0F43C2   		cmovnb	%edx, %eax
 802              	.LVL99:
1437:fltk-1.3.4-1/png/pngread.c ****    }
 803              		.loc 1 1437 0
 804 00b6 89451C   		movl	%eax, 28(%rbp)
 805              	.LBE111:
1441:fltk-1.3.4-1/png/pngread.c **** 
 806              		.loc 1 1441 0
 807 00b9 B8010000 		movl	$1, %eax
 807      00
 808              	.LVL100:
 809 00be 5B       		popq	%rbx
 810              		.cfi_remember_state
 811              		.cfi_def_cfa_offset 24
 812              	.LVL101:
 813 00bf 5D       		popq	%rbp
 814              		.cfi_def_cfa_offset 16
 815              	.LVL102:
 816 00c0 415C     		popq	%r12
 817              		.cfi_def_cfa_offset 8
 818              	.LVL103:
 819 00c2 C3       		ret
 820              	.LVL104:
 821              		.p2align 4,,10
 822 00c3 0F1F4400 		.p2align 3
 822      00
 823              	.L95:
 824              		.cfi_restore_state
 825              	.LBB112:
 826              	.LBB110:
 827              	.LBB109:
1346:fltk-1.3.4-1/png/pngread.c **** 
 828              		.loc 1 1346 0
 829 00c8 89C7     		movl	%eax, %edi
 830 00ca 83CF01   		orl	$1, %edi
 831 00cd 6685C9   		testw	%cx, %cx
 832 00d0 0F45C7   		cmovne	%edi, %eax
 833              	.LVL105:
 834 00d3 EB8B     		jmp	.L96
 835              	.LVL106:
 836              		.p2align 4,,10
 837 00d5 0F1F00   		.p2align 3
 838              	.L120:
 839              	.LBE109:
 840              	.LBE110:
 841              	.LBE112:
 842              	.LBB113:
1430:fltk-1.3.4-1/png/pngread.c ****             break;
 843              		.loc 1 1430 0
 844 00d8 B8000100 		movl	$256, %eax
 844      00
 845              	.LVL107:
1437:fltk-1.3.4-1/png/pngread.c ****    }
 846              		.loc 1 1437 0
 847 00dd 89451C   		movl	%eax, 28(%rbp)
 848              	.LBE113:
1441:fltk-1.3.4-1/png/pngread.c **** 
 849              		.loc 1 1441 0
 850 00e0 B8010000 		movl	$1, %eax
 850      00
 851              	.LVL108:
 852 00e5 5B       		popq	%rbx
 853              		.cfi_remember_state
 854              		.cfi_def_cfa_offset 24
 855              	.LVL109:
 856 00e6 5D       		popq	%rbp
 857              		.cfi_def_cfa_offset 16
 858              	.LVL110:
 859 00e7 415C     		popq	%r12
 860              		.cfi_def_cfa_offset 8
 861              	.LVL111:
 862 00e9 C3       		ret
 863              	.LVL112:
 864 00ea 660F1F44 		.p2align 4,,10
 864      0000
 865              		.p2align 3
 866              	.L118:
 867              		.cfi_restore_state
 868              	.LBB114:
 869              	.LBB105:
 870 00f0 4C89E6   		movq	%r12, %rsi
 871 00f3 4889DF   		movq	%rbx, %rdi
 872 00f6 E8000000 		call	png_read_info.part.4
 872      00
 873              	.LVL113:
 874 00fb E92CFFFF 		jmp	.L93
 874      FF
 875              	.LVL114:
 876              		.p2align 4,,10
 877              		.p2align 3
 878              	.L101:
 879              	.LBE105:
 880              	.LBE114:
 881              	.LBB115:
1422:fltk-1.3.4-1/png/pngread.c ****             break;
 882              		.loc 1 1422 0
 883 0100 0FB68B78 		movzbl	632(%rbx), %ecx
 883      020000
 884 0107 B8010000 		movl	$1, %eax
 884      00
 885 010c D3E0     		sall	%cl, %eax
 886              	.LVL115:
1423:fltk-1.3.4-1/png/pngread.c **** 
 887              		.loc 1 1423 0
 888 010e EB99     		jmp	.L103
 889              	.LVL116:
 890              		.p2align 4,,10
 891              		.p2align 3
 892              	.L119:
 893              	.LBE115:
 894              	.LBB116:
1409:fltk-1.3.4-1/png/pngread.c **** #endif
 895              		.loc 1 1409 0
 896 0110 834D1801 		orl	$1, 24(%rbp)
 897 0114 E97AFFFF 		jmp	.L99
 897      FF
 898              	.LBE116:
 899              		.cfi_endproc
 900              	.LFE73:
 902              		.section	.text.unlikely.png_image_read_header
 903              	.LCOLDE8:
 904              		.section	.text.png_image_read_header
 905              	.LHOTE8:
 906              		.section	.text.unlikely.set_file_encoding,"ax",@progbits
 907              	.LCOLDB9:
 908              		.section	.text.set_file_encoding,"ax",@progbits
 909              	.LHOTB9:
 910              		.p2align 4,,15
 912              	set_file_encoding:
 913              	.LFB79:
1625:fltk-1.3.4-1/png/pngread.c **** 
1626:fltk-1.3.4-1/png/pngread.c **** #  define PNG_SKIP_CHUNKS(p) png_image_skip_unused_chunks(p)
1627:fltk-1.3.4-1/png/pngread.c **** #else
1628:fltk-1.3.4-1/png/pngread.c **** #  define PNG_SKIP_CHUNKS(p) ((void)0)
1629:fltk-1.3.4-1/png/pngread.c **** #endif /* HANDLE_AS_UNKNOWN */
1630:fltk-1.3.4-1/png/pngread.c **** 
1631:fltk-1.3.4-1/png/pngread.c **** /* The following macro gives the exact rounded answer for all values in the
1632:fltk-1.3.4-1/png/pngread.c ****  * range 0..255 (it actually divides by 51.2, but the rounding still generates
1633:fltk-1.3.4-1/png/pngread.c ****  * the correct numbers 0..5
1634:fltk-1.3.4-1/png/pngread.c ****  */
1635:fltk-1.3.4-1/png/pngread.c **** #define PNG_DIV51(v8) (((v8) * 5 + 130) >> 8)
1636:fltk-1.3.4-1/png/pngread.c **** 
1637:fltk-1.3.4-1/png/pngread.c **** /* Utility functions to make particular color-maps */
1638:fltk-1.3.4-1/png/pngread.c **** static void
1639:fltk-1.3.4-1/png/pngread.c **** set_file_encoding(png_image_read_control *display)
1640:fltk-1.3.4-1/png/pngread.c **** {
 914              		.loc 1 1640 0
 915              		.cfi_startproc
 916              	.LVL117:
 917 0000 55       		pushq	%rbp
 918              		.cfi_def_cfa_offset 16
 919              		.cfi_offset 6, -16
 920 0001 53       		pushq	%rbx
 921              		.cfi_def_cfa_offset 24
 922              		.cfi_offset 3, -24
 923 0002 4889FB   		movq	%rdi, %rbx
 924 0005 4883EC08 		subq	$8, %rsp
 925              		.cfi_def_cfa_offset 32
1641:fltk-1.3.4-1/png/pngread.c ****    png_fixed_point g = display->image->opaque->png_ptr->colorspace.gamma;
 926              		.loc 1 1641 0
 927 0009 488B07   		movq	(%rdi), %rax
 928 000c 488B00   		movq	(%rax), %rax
 929 000f 488B00   		movq	(%rax), %rax
 930 0012 8BA8D804 		movl	1240(%rax), %ebp
 930      0000
 931              	.LVL118:
1642:fltk-1.3.4-1/png/pngread.c ****    if (png_gamma_significant(g) != 0)
 932              		.loc 1 1642 0
 933 0018 89EF     		movl	%ebp, %edi
 934              	.LVL119:
 935 001a E8000000 		call	png_gamma_significant
 935      00
 936              	.LVL120:
 937 001f 85C0     		testl	%eax, %eax
 938 0021 741D     		je	.L122
 939              	.LVL121:
 940              	.LBB121:
 941              	.LBB122:
1365:fltk-1.3.4-1/png/pngread.c ****    {
 942              		.loc 1 1365 0
 943 0023 81FD9F86 		cmpl	$99999, %ebp
 943      0100
 944 0029 7F48     		jg	.L126
1368:fltk-1.3.4-1/png/pngread.c ****          return 0;
 945              		.loc 1 1368 0
 946 002b 85ED     		testl	%ebp, %ebp
 947 002d 7521     		jne	.L131
 948              	.LVL122:
 949              	.L125:
 950              	.LBE122:
 951              	.LBE121:
1643:fltk-1.3.4-1/png/pngread.c ****    {
1644:fltk-1.3.4-1/png/pngread.c ****       if (png_gamma_not_sRGB(g) != 0)
1645:fltk-1.3.4-1/png/pngread.c ****       {
1646:fltk-1.3.4-1/png/pngread.c ****          display->file_encoding = P_FILE;
1647:fltk-1.3.4-1/png/pngread.c ****          display->gamma_to_linear = png_reciprocal(g);
1648:fltk-1.3.4-1/png/pngread.c ****       }
1649:fltk-1.3.4-1/png/pngread.c **** 
1650:fltk-1.3.4-1/png/pngread.c ****       else
1651:fltk-1.3.4-1/png/pngread.c ****          display->file_encoding = P_sRGB;
 952              		.loc 1 1651 0
 953 002f C7434001 		movl	$1, 64(%rbx)
 953      000000
1652:fltk-1.3.4-1/png/pngread.c ****    }
1653:fltk-1.3.4-1/png/pngread.c **** 
1654:fltk-1.3.4-1/png/pngread.c ****    else
1655:fltk-1.3.4-1/png/pngread.c ****       display->file_encoding = P_LINEAR8;
1656:fltk-1.3.4-1/png/pngread.c **** }
 954              		.loc 1 1656 0
 955 0036 4883C408 		addq	$8, %rsp
 956              		.cfi_remember_state
 957              		.cfi_def_cfa_offset 24
 958 003a 5B       		popq	%rbx
 959              		.cfi_def_cfa_offset 16
 960              	.LVL123:
 961 003b 5D       		popq	%rbp
 962              		.cfi_def_cfa_offset 8
 963              	.LVL124:
 964 003c C3       		ret
 965              	.LVL125:
 966 003d 0F1F00   		.p2align 4,,10
 967              		.p2align 3
 968              	.L122:
 969              		.cfi_restore_state
1655:fltk-1.3.4-1/png/pngread.c **** }
 970              		.loc 1 1655 0
 971 0040 C7434004 		movl	$4, 64(%rbx)
 971      000000
 972              		.loc 1 1656 0
 973 0047 4883C408 		addq	$8, %rsp
 974              		.cfi_remember_state
 975              		.cfi_def_cfa_offset 24
 976 004b 5B       		popq	%rbx
 977              		.cfi_def_cfa_offset 16
 978              	.LVL126:
 979 004c 5D       		popq	%rbp
 980              		.cfi_def_cfa_offset 8
 981              	.LVL127:
 982 004d C3       		ret
 983              	.LVL128:
 984 004e 6690     		.p2align 4,,10
 985              		.p2align 3
 986              	.L131:
 987              		.cfi_restore_state
 988              	.LBB126:
 989              	.LBB125:
 990              	.LBB123:
 991              	.LBB124:
1371:fltk-1.3.4-1/png/pngread.c ****    }
 992              		.loc 1 1371 0
 993 0050 8D44AD00 		leal	0(%rbp,%rbp,4), %eax
 994 0054 BA676666 		movl	$1717986919, %edx
 994      66
 995 0059 8D4C4502 		leal	2(%rbp,%rax,2), %ecx
 996 005d 89C8     		movl	%ecx, %eax
 997 005f C1F91F   		sarl	$31, %ecx
 998 0062 F7EA     		imull	%edx
 999 0064 D1FA     		sarl	%edx
 1000 0066 29CA     		subl	%ecx, %edx
 1001 0068 89D7     		movl	%edx, %edi
 1002 006a E8000000 		call	png_gamma_significant
 1002      00
 1003              	.LVL129:
 1004              	.LBE124:
 1005              	.LBE123:
 1006              	.LBE125:
 1007              	.LBE126:
1644:fltk-1.3.4-1/png/pngread.c ****       {
 1008              		.loc 1 1644 0
 1009 006f 85C0     		testl	%eax, %eax
 1010 0071 74BC     		je	.L125
 1011              	.L126:
1646:fltk-1.3.4-1/png/pngread.c ****          display->gamma_to_linear = png_reciprocal(g);
 1012              		.loc 1 1646 0
 1013 0073 C7434003 		movl	$3, 64(%rbx)
 1013      000000
1647:fltk-1.3.4-1/png/pngread.c ****       }
 1014              		.loc 1 1647 0
 1015 007a 89EF     		movl	%ebp, %edi
 1016 007c E8000000 		call	png_reciprocal
 1016      00
 1017              	.LVL130:
 1018 0081 894344   		movl	%eax, 68(%rbx)
 1019              		.loc 1 1656 0
 1020 0084 4883C408 		addq	$8, %rsp
 1021              		.cfi_def_cfa_offset 24
 1022 0088 5B       		popq	%rbx
 1023              		.cfi_def_cfa_offset 16
 1024              	.LVL131:
 1025 0089 5D       		popq	%rbp
 1026              		.cfi_def_cfa_offset 8
 1027              	.LVL132:
 1028 008a C3       		ret
 1029              		.cfi_endproc
 1030              	.LFE79:
 1032              		.section	.text.unlikely.set_file_encoding
 1033              	.LCOLDE9:
 1034              		.section	.text.set_file_encoding
 1035              	.LHOTE9:
 1036              		.section	.rodata.str1.8,"aMS",@progbits,1
 1037              		.align 8
 1038              	.LC10:
 1039 0000 756E6578 		.string	"unexpected encoding (internal error)"
 1039      70656374 
 1039      65642065 
 1039      6E636F64 
 1039      696E6720 
 1040              		.section	.text.unlikely.decode_gamma,"ax",@progbits
 1041              	.LCOLDB11:
 1042              		.section	.text.decode_gamma,"ax",@progbits
 1043              	.LHOTB11:
 1044              		.p2align 4,,15
 1046              	decode_gamma:
 1047              	.LFB80:
1657:fltk-1.3.4-1/png/pngread.c **** 
1658:fltk-1.3.4-1/png/pngread.c **** static unsigned int
1659:fltk-1.3.4-1/png/pngread.c **** decode_gamma(png_image_read_control *display, png_uint_32 value, int encoding)
1660:fltk-1.3.4-1/png/pngread.c **** {
 1048              		.loc 1 1660 0
 1049              		.cfi_startproc
 1050              	.LVL133:
 1051 0000 53       		pushq	%rbx
 1052              		.cfi_def_cfa_offset 16
 1053              		.cfi_offset 3, -16
 1054 0001 89F0     		movl	%esi, %eax
 1055 0003 4889FB   		movq	%rdi, %rbx
 1056 0006 4883EC10 		subq	$16, %rsp
 1057              		.cfi_def_cfa_offset 32
1661:fltk-1.3.4-1/png/pngread.c ****    if (encoding == P_FILE) /* double check */
 1058              		.loc 1 1661 0
 1059 000a 83FA03   		cmpl	$3, %edx
 1060 000d 0F848500 		je	.L145
 1060      0000
 1061              	.LVL134:
 1062              	.L133:
1662:fltk-1.3.4-1/png/pngread.c ****       encoding = display->file_encoding;
1663:fltk-1.3.4-1/png/pngread.c **** 
1664:fltk-1.3.4-1/png/pngread.c ****    if (encoding == P_NOTSET) /* must be the file encoding */
 1063              		.loc 1 1664 0
 1064 0013 85D2     		testl	%edx, %edx
 1065 0015 7469     		je	.L146
 1066              	.LVL135:
 1067              	.L134:
1665:fltk-1.3.4-1/png/pngread.c ****    {
1666:fltk-1.3.4-1/png/pngread.c ****       set_file_encoding(display);
1667:fltk-1.3.4-1/png/pngread.c ****       encoding = display->file_encoding;
1668:fltk-1.3.4-1/png/pngread.c ****    }
1669:fltk-1.3.4-1/png/pngread.c **** 
1670:fltk-1.3.4-1/png/pngread.c ****    switch (encoding)
 1068              		.loc 1 1670 0
 1069 0017 83FA02   		cmpl	$2, %edx
 1070 001a 7413     		je	.L136
 1071 001c 7E4A     		jle	.L147
 1072 001e 83FA03   		cmpl	$3, %edx
 1073 0021 7415     		je	.L139
1671:fltk-1.3.4-1/png/pngread.c ****    {
1672:fltk-1.3.4-1/png/pngread.c ****       case P_FILE:
1673:fltk-1.3.4-1/png/pngread.c ****          value = png_gamma_16bit_correct(value*257, display->gamma_to_linear);
1674:fltk-1.3.4-1/png/pngread.c ****          break;
1675:fltk-1.3.4-1/png/pngread.c **** 
1676:fltk-1.3.4-1/png/pngread.c ****       case P_sRGB:
1677:fltk-1.3.4-1/png/pngread.c ****          value = png_sRGB_table[value];
1678:fltk-1.3.4-1/png/pngread.c ****          break;
1679:fltk-1.3.4-1/png/pngread.c **** 
1680:fltk-1.3.4-1/png/pngread.c ****       case P_LINEAR:
1681:fltk-1.3.4-1/png/pngread.c ****          break;
1682:fltk-1.3.4-1/png/pngread.c **** 
1683:fltk-1.3.4-1/png/pngread.c ****       case P_LINEAR8:
1684:fltk-1.3.4-1/png/pngread.c ****          value *= 257;
 1074              		.loc 1 1684 0
 1075 0023 89C1     		movl	%eax, %ecx
 1076 0025 C1E108   		sall	$8, %ecx
 1077 0028 01C8     		addl	%ecx, %eax
1670:fltk-1.3.4-1/png/pngread.c ****    {
 1078              		.loc 1 1670 0
 1079 002a 83FA04   		cmpl	$4, %edx
 1080 002d 7521     		jne	.L135
 1081              	.L136:
 1082              	.LVL136:
1685:fltk-1.3.4-1/png/pngread.c ****          break;
1686:fltk-1.3.4-1/png/pngread.c **** 
1687:fltk-1.3.4-1/png/pngread.c ****       default:
1688:fltk-1.3.4-1/png/pngread.c ****          png_error(display->image->opaque->png_ptr,
1689:fltk-1.3.4-1/png/pngread.c ****             "unexpected encoding (internal error)");
1690:fltk-1.3.4-1/png/pngread.c ****          break;
1691:fltk-1.3.4-1/png/pngread.c ****    }
1692:fltk-1.3.4-1/png/pngread.c **** 
1693:fltk-1.3.4-1/png/pngread.c ****    return value;
1694:fltk-1.3.4-1/png/pngread.c **** }
 1083              		.loc 1 1694 0
 1084 002f 4883C410 		addq	$16, %rsp
 1085              		.cfi_remember_state
 1086              		.cfi_def_cfa_offset 16
 1087 0033 5B       		popq	%rbx
 1088              		.cfi_def_cfa_offset 8
 1089              	.LVL137:
 1090 0034 C3       		ret
 1091              	.LVL138:
 1092              		.p2align 4,,10
 1093 0035 0F1F00   		.p2align 3
 1094              	.L139:
 1095              		.cfi_restore_state
1673:fltk-1.3.4-1/png/pngread.c ****          break;
 1096              		.loc 1 1673 0
 1097 0038 8B7344   		movl	68(%rbx), %esi
 1098 003b 89C7     		movl	%eax, %edi
 1099 003d C1E708   		sall	$8, %edi
 1100 0040 01C7     		addl	%eax, %edi
 1101 0042 E8000000 		call	png_gamma_16bit_correct
 1101      00
 1102              	.LVL139:
 1103              		.loc 1 1694 0
 1104 0047 4883C410 		addq	$16, %rsp
 1105              		.cfi_remember_state
 1106              		.cfi_def_cfa_offset 16
1673:fltk-1.3.4-1/png/pngread.c ****          break;
 1107              		.loc 1 1673 0
 1108 004b 0FB7C0   		movzwl	%ax, %eax
 1109              	.LVL140:
 1110              		.loc 1 1694 0
 1111 004e 5B       		popq	%rbx
 1112              		.cfi_def_cfa_offset 8
 1113              	.LVL141:
 1114 004f C3       		ret
 1115              	.LVL142:
 1116              		.p2align 4,,10
 1117              		.p2align 3
 1118              	.L135:
 1119              		.cfi_restore_state
 1120              	.LBB129:
 1121              	.LBB130:
1688:fltk-1.3.4-1/png/pngread.c ****             "unexpected encoding (internal error)");
 1122              		.loc 1 1688 0
 1123 0050 488B03   		movq	(%rbx), %rax
 1124 0053 BE000000 		movl	$.LC10, %esi
 1124      00
 1125 0058 488B00   		movq	(%rax), %rax
 1126 005b 488B38   		movq	(%rax), %rdi
 1127 005e E8000000 		call	png_error
 1127      00
 1128              	.LVL143:
 1129              		.p2align 4,,10
 1130 0063 0F1F4400 		.p2align 3
 1130      00
 1131              	.L147:
 1132              	.LBE130:
 1133              	.LBE129:
1670:fltk-1.3.4-1/png/pngread.c ****    {
 1134              		.loc 1 1670 0
 1135 0068 83FA01   		cmpl	$1, %edx
 1136 006b 75E3     		jne	.L135
1677:fltk-1.3.4-1/png/pngread.c ****          break;
 1137              		.loc 1 1677 0
 1138 006d 0FB78400 		movzwl	png_sRGB_table(%rax,%rax), %eax
 1138      00000000 
 1139              	.LVL144:
 1140              		.loc 1 1694 0
 1141 0075 4883C410 		addq	$16, %rsp
 1142              		.cfi_remember_state
 1143              		.cfi_def_cfa_offset 16
 1144 0079 5B       		popq	%rbx
 1145              		.cfi_def_cfa_offset 8
 1146              	.LVL145:
 1147 007a C3       		ret
 1148              	.LVL146:
 1149 007b 0F1F4400 		.p2align 4,,10
 1149      00
 1150              		.p2align 3
 1151              	.L146:
 1152              		.cfi_restore_state
1666:fltk-1.3.4-1/png/pngread.c ****       encoding = display->file_encoding;
 1153              		.loc 1 1666 0
 1154 0080 4889DF   		movq	%rbx, %rdi
 1155 0083 8944240C 		movl	%eax, 12(%rsp)
 1156 0087 E8000000 		call	set_file_encoding
 1156      00
 1157              	.LVL147:
1667:fltk-1.3.4-1/png/pngread.c ****    }
 1158              		.loc 1 1667 0
 1159 008c 8B5340   		movl	64(%rbx), %edx
 1160 008f 8B44240C 		movl	12(%rsp), %eax
 1161 0093 EB82     		jmp	.L134
 1162              	.LVL148:
 1163              		.p2align 4,,10
 1164 0095 0F1F00   		.p2align 3
 1165              	.L145:
1662:fltk-1.3.4-1/png/pngread.c **** 
 1166              		.loc 1 1662 0
 1167 0098 8B5740   		movl	64(%rdi), %edx
 1168              	.LVL149:
 1169 009b E973FFFF 		jmp	.L133
 1169      FF
 1170              		.cfi_endproc
 1171              	.LFE80:
 1173              		.section	.text.unlikely.decode_gamma
 1174              	.LCOLDE11:
 1175              		.section	.text.decode_gamma
 1176              	.LHOTE11:
 1177              		.section	.text.unlikely.png_colormap_compose,"ax",@progbits
 1178              	.LCOLDB12:
 1179              		.section	.text.png_colormap_compose,"ax",@progbits
 1180              	.LHOTB12:
 1181              		.p2align 4,,15
 1183              	png_colormap_compose:
 1184              	.LFB81:
1695:fltk-1.3.4-1/png/pngread.c **** 
1696:fltk-1.3.4-1/png/pngread.c **** static png_uint_32
1697:fltk-1.3.4-1/png/pngread.c **** png_colormap_compose(png_image_read_control *display,
1698:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 foreground, int foreground_encoding, png_uint_32 alpha,
1699:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 background, int encoding)
1700:fltk-1.3.4-1/png/pngread.c **** {
 1185              		.loc 1 1700 0
 1186              		.cfi_startproc
 1187              	.LVL150:
 1188 0000 4156     		pushq	%r14
 1189              		.cfi_def_cfa_offset 16
 1190              		.cfi_offset 14, -16
 1191 0002 4155     		pushq	%r13
 1192              		.cfi_def_cfa_offset 24
 1193              		.cfi_offset 13, -24
 1194 0004 4589C6   		movl	%r8d, %r14d
 1195 0007 4154     		pushq	%r12
 1196              		.cfi_def_cfa_offset 32
 1197              		.cfi_offset 12, -32
 1198 0009 55       		pushq	%rbp
 1199              		.cfi_def_cfa_offset 40
 1200              		.cfi_offset 6, -40
 1201 000a 4989FD   		movq	%rdi, %r13
 1202 000d 53       		pushq	%rbx
 1203              		.cfi_def_cfa_offset 48
 1204              		.cfi_offset 3, -48
 1205              		.loc 1 1700 0
 1206 000e 4489CD   		movl	%r9d, %ebp
 1207 0011 4189CC   		movl	%ecx, %r12d
1701:fltk-1.3.4-1/png/pngread.c ****    /* The file value is composed on the background, the background has the given
1702:fltk-1.3.4-1/png/pngread.c ****     * encoding and so does the result, the file is encoded with P_FILE and the
1703:fltk-1.3.4-1/png/pngread.c ****     * file and alpha are 8-bit values.  The (output) encoding will always be
1704:fltk-1.3.4-1/png/pngread.c ****     * P_LINEAR or P_sRGB.
1705:fltk-1.3.4-1/png/pngread.c ****     */
1706:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 f = decode_gamma(display, foreground, foreground_encoding);
 1208              		.loc 1 1706 0
 1209 0014 E8000000 		call	decode_gamma
 1209      00
 1210              	.LVL151:
1707:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 b = decode_gamma(display, background, encoding);
 1211              		.loc 1 1707 0
 1212 0019 89EA     		movl	%ebp, %edx
 1213 001b 4489F6   		movl	%r14d, %esi
 1214 001e 4C89EF   		movq	%r13, %rdi
1706:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 b = decode_gamma(display, background, encoding);
 1215              		.loc 1 1706 0
 1216 0021 89C3     		movl	%eax, %ebx
 1217              	.LVL152:
 1218              		.loc 1 1707 0
 1219 0023 E8000000 		call	decode_gamma
 1219      00
 1220              	.LVL153:
1708:fltk-1.3.4-1/png/pngread.c **** 
1709:fltk-1.3.4-1/png/pngread.c ****    /* The alpha is always an 8-bit value (it comes from the palette), the value
1710:fltk-1.3.4-1/png/pngread.c ****     * scaled by 255 is what PNG_sRGB_FROM_LINEAR requires.
1711:fltk-1.3.4-1/png/pngread.c ****     */
1712:fltk-1.3.4-1/png/pngread.c ****    f = f * alpha + b * (255-alpha);
 1221              		.loc 1 1712 0
 1222 0028 BAFF0000 		movl	$255, %edx
 1222      00
 1223 002d 4429E2   		subl	%r12d, %edx
 1224 0030 410FAFDC 		imull	%r12d, %ebx
 1225              	.LVL154:
 1226 0034 0FAFC2   		imull	%edx, %eax
 1227              	.LVL155:
 1228 0037 01D8     		addl	%ebx, %eax
 1229              	.LVL156:
1713:fltk-1.3.4-1/png/pngread.c **** 
1714:fltk-1.3.4-1/png/pngread.c ****    if (encoding == P_LINEAR)
 1230              		.loc 1 1714 0
 1231 0039 83FD02   		cmpl	$2, %ebp
 1232 003c 7432     		je	.L152
1715:fltk-1.3.4-1/png/pngread.c ****    {
1716:fltk-1.3.4-1/png/pngread.c ****       /* Scale to 65535; divide by 255, approximately (in fact this is extremely
1717:fltk-1.3.4-1/png/pngread.c ****        * accurate, it divides by 255.00000005937181414556, with no overflow.)
1718:fltk-1.3.4-1/png/pngread.c ****        */
1719:fltk-1.3.4-1/png/pngread.c ****       f *= 257; /* Now scaled by 65535 */
1720:fltk-1.3.4-1/png/pngread.c ****       f += f >> 16;
1721:fltk-1.3.4-1/png/pngread.c ****       f = (f+32768) >> 16;
1722:fltk-1.3.4-1/png/pngread.c ****    }
1723:fltk-1.3.4-1/png/pngread.c **** 
1724:fltk-1.3.4-1/png/pngread.c ****    else /* P_sRGB */
1725:fltk-1.3.4-1/png/pngread.c ****       f = PNG_sRGB_FROM_LINEAR(f);
 1233              		.loc 1 1725 0
 1234 003e 89C1     		movl	%eax, %ecx
 1235 0040 25FF7F00 		andl	$32767, %eax
 1235      00
 1236              	.LVL157:
 1237 0045 C1E90F   		shrl	$15, %ecx
 1238              	.LVL158:
 1239 0048 0FB69100 		movzbl	png_sRGB_delta(%rcx), %edx
 1239      000000
1726:fltk-1.3.4-1/png/pngread.c **** 
1727:fltk-1.3.4-1/png/pngread.c ****    return f;
1728:fltk-1.3.4-1/png/pngread.c **** }
 1240              		.loc 1 1728 0
 1241 004f 5B       		popq	%rbx
 1242              		.cfi_remember_state
 1243              		.cfi_def_cfa_offset 40
 1244 0050 5D       		popq	%rbp
 1245              		.cfi_def_cfa_offset 32
 1246              	.LVL159:
 1247 0051 415C     		popq	%r12
 1248              		.cfi_def_cfa_offset 24
 1249              	.LVL160:
1725:fltk-1.3.4-1/png/pngread.c **** 
 1250              		.loc 1 1725 0
 1251 0053 0FAFC2   		imull	%edx, %eax
 1252 0056 0FB79409 		movzwl	png_sRGB_base(%rcx,%rcx), %edx
 1252      00000000 
 1253              		.loc 1 1728 0
 1254 005e 415D     		popq	%r13
 1255              		.cfi_def_cfa_offset 16
 1256              	.LVL161:
 1257 0060 415E     		popq	%r14
 1258              		.cfi_def_cfa_offset 8
 1259              	.LVL162:
1725:fltk-1.3.4-1/png/pngread.c **** 
 1260              		.loc 1 1725 0
 1261 0062 C1E80C   		shrl	$12, %eax
 1262 0065 01D0     		addl	%edx, %eax
 1263 0067 0FB6C4   		movzbl	%ah, %eax
 1264              	.LVL163:
 1265              		.loc 1 1728 0
 1266 006a C3       		ret
 1267              	.LVL164:
 1268 006b 0F1F4400 		.p2align 4,,10
 1268      00
 1269              		.p2align 3
 1270              	.L152:
 1271              		.cfi_restore_state
1719:fltk-1.3.4-1/png/pngread.c ****       f += f >> 16;
 1272              		.loc 1 1719 0
 1273 0070 89C2     		movl	%eax, %edx
 1274 0072 C1E208   		sall	$8, %edx
 1275 0075 01D0     		addl	%edx, %eax
 1276              	.LVL165:
1721:fltk-1.3.4-1/png/pngread.c ****    }
 1277              		.loc 1 1721 0
 1278 0077 89C2     		movl	%eax, %edx
 1279 0079 C1EA10   		shrl	$16, %edx
 1280 007c 8D841000 		leal	32768(%rax,%rdx), %eax
 1280      800000
 1281              	.LVL166:
 1282              		.loc 1 1728 0
 1283 0083 5B       		popq	%rbx
 1284              		.cfi_def_cfa_offset 40
1721:fltk-1.3.4-1/png/pngread.c ****    }
 1285              		.loc 1 1721 0
 1286 0084 C1E810   		shrl	$16, %eax
 1287              	.LVL167:
 1288              		.loc 1 1728 0
 1289 0087 5D       		popq	%rbp
 1290              		.cfi_def_cfa_offset 32
 1291              	.LVL168:
 1292 0088 415C     		popq	%r12
 1293              		.cfi_def_cfa_offset 24
 1294              	.LVL169:
 1295 008a 415D     		popq	%r13
 1296              		.cfi_def_cfa_offset 16
 1297              	.LVL170:
 1298 008c 415E     		popq	%r14
 1299              		.cfi_def_cfa_offset 8
 1300              	.LVL171:
 1301 008e C3       		ret
 1302              		.cfi_endproc
 1303              	.LFE81:
 1305              		.section	.text.unlikely.png_colormap_compose
 1306              	.LCOLDE12:
 1307              		.section	.text.png_colormap_compose
 1308              	.LHOTE12:
 1309              		.section	.rodata.str1.1
 1310              	.LC13:
 1311 0073 636F6C6F 		.string	"color-map index out of range"
 1311      722D6D61 
 1311      7020696E 
 1311      64657820 
 1311      6F757420 
 1312              	.LC14:
 1313 0090 62616420 		.string	"bad encoding (internal error)"
 1313      656E636F 
 1313      64696E67 
 1313      2028696E 
 1313      7465726E 
 1314              		.section	.text.unlikely.png_create_colormap_entry,"ax",@progbits
 1315              	.LCOLDB15:
 1316              		.section	.text.png_create_colormap_entry,"ax",@progbits
 1317              	.LHOTB15:
 1318              		.p2align 4,,15
 1320              	png_create_colormap_entry:
 1321              	.LFB82:
1729:fltk-1.3.4-1/png/pngread.c **** 
1730:fltk-1.3.4-1/png/pngread.c **** /* NOTE: P_LINEAR values to this routine must be 16-bit, but P_FILE values must
1731:fltk-1.3.4-1/png/pngread.c ****  * be 8-bit.
1732:fltk-1.3.4-1/png/pngread.c ****  */
1733:fltk-1.3.4-1/png/pngread.c **** static void
1734:fltk-1.3.4-1/png/pngread.c **** png_create_colormap_entry(png_image_read_control *display,
1735:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 ip, png_uint_32 red, png_uint_32 green, png_uint_32 blue,
1736:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 alpha, int encoding)
1737:fltk-1.3.4-1/png/pngread.c **** {
 1322              		.loc 1 1737 0
 1323              		.cfi_startproc
 1324              	.LVL172:
 1325 0000 4157     		pushq	%r15
 1326              		.cfi_def_cfa_offset 16
 1327              		.cfi_offset 15, -16
 1328 0002 4156     		pushq	%r14
 1329              		.cfi_def_cfa_offset 24
 1330              		.cfi_offset 14, -24
 1331 0004 4155     		pushq	%r13
 1332              		.cfi_def_cfa_offset 32
 1333              		.cfi_offset 13, -32
 1334 0006 4154     		pushq	%r12
 1335              		.cfi_def_cfa_offset 40
 1336              		.cfi_offset 12, -40
 1337 0008 55       		pushq	%rbp
 1338              		.cfi_def_cfa_offset 48
 1339              		.cfi_offset 6, -48
 1340 0009 53       		pushq	%rbx
 1341              		.cfi_def_cfa_offset 56
 1342              		.cfi_offset 3, -56
 1343 000a 89F3     		movl	%esi, %ebx
 1344 000c 4889FD   		movq	%rdi, %rbp
 1345 000f 4883EC18 		subq	$24, %rsp
 1346              		.cfi_def_cfa_offset 80
1738:fltk-1.3.4-1/png/pngread.c ****    png_imagep image = display->image;
 1347              		.loc 1 1738 0
 1348 0013 4C8B3F   		movq	(%rdi), %r15
 1349              	.LVL173:
1737:fltk-1.3.4-1/png/pngread.c ****    png_imagep image = display->image;
 1350              		.loc 1 1737 0
 1351 0016 8B442450 		movl	80(%rsp), %eax
1739:fltk-1.3.4-1/png/pngread.c ****    const int output_encoding = (image->format & PNG_FORMAT_FLAG_LINEAR) != 0 ?
 1352              		.loc 1 1739 0
 1353 001a 418B7714 		movl	20(%r15), %esi
 1354              	.LVL174:
1740:fltk-1.3.4-1/png/pngread.c ****       P_LINEAR : P_sRGB;
 1355              		.loc 1 1740 0
 1356 001e 89F7     		movl	%esi, %edi
 1357              	.LVL175:
 1358 0020 83E704   		andl	$4, %edi
 1359 0023 83FF01   		cmpl	$1, %edi
 1360 0026 4519ED   		sbbl	%r13d, %r13d
 1361 0029 4183C502 		addl	$2, %r13d
 1362              	.LVL176:
1741:fltk-1.3.4-1/png/pngread.c ****    const int convert_to_Y = (image->format & PNG_FORMAT_FLAG_COLOR) == 0 &&
 1363              		.loc 1 1741 0
 1364 002d 83E602   		andl	$2, %esi
 1365 0030 7556     		jne	.L209
 1366              		.loc 1 1741 0 is_stmt 0 discriminator 1
 1367 0032 39CA     		cmpl	%ecx, %edx
 1368 0034 410F95C6 		setne	%r14b
 1369 0038 4439C1   		cmpl	%r8d, %ecx
 1370 003b 400F95C6 		setne	%sil
 1371 003f 4109F6   		orl	%esi, %r14d
 1372 0042 450FB6F6 		movzbl	%r14b, %r14d
 1373              	.L155:
 1374              	.LVL177:
1742:fltk-1.3.4-1/png/pngread.c ****       (red != green || green != blue);
1743:fltk-1.3.4-1/png/pngread.c **** 
1744:fltk-1.3.4-1/png/pngread.c ****    if (ip > 255)
 1375              		.loc 1 1744 0 is_stmt 1 discriminator 6
 1376 0046 81FBFF00 		cmpl	$255, %ebx
 1376      0000
 1377 004c 0F876105 		ja	.L214
 1377      0000
1745:fltk-1.3.4-1/png/pngread.c ****       png_error(image->opaque->png_ptr, "color-map index out of range");
1746:fltk-1.3.4-1/png/pngread.c **** 
1747:fltk-1.3.4-1/png/pngread.c ****    /* Update the cache with whether the file gamma is significantly different
1748:fltk-1.3.4-1/png/pngread.c ****     * from sRGB.
1749:fltk-1.3.4-1/png/pngread.c ****     */
1750:fltk-1.3.4-1/png/pngread.c ****    if (encoding == P_FILE)
 1378              		.loc 1 1750 0
 1379 0052 83F803   		cmpl	$3, %eax
 1380 0055 7439     		je	.L215
 1381              	.LVL178:
 1382              	.L157:
1751:fltk-1.3.4-1/png/pngread.c ****    {
1752:fltk-1.3.4-1/png/pngread.c ****       if (display->file_encoding == P_NOTSET)
1753:fltk-1.3.4-1/png/pngread.c ****          set_file_encoding(display);
1754:fltk-1.3.4-1/png/pngread.c **** 
1755:fltk-1.3.4-1/png/pngread.c ****       /* Note that the cached value may be P_FILE too, but if it is then the
1756:fltk-1.3.4-1/png/pngread.c ****        * gamma_to_linear member has been set.
1757:fltk-1.3.4-1/png/pngread.c ****        */
1758:fltk-1.3.4-1/png/pngread.c ****       encoding = display->file_encoding;
1759:fltk-1.3.4-1/png/pngread.c ****    }
1760:fltk-1.3.4-1/png/pngread.c **** 
1761:fltk-1.3.4-1/png/pngread.c ****    if (encoding == P_FILE)
1762:fltk-1.3.4-1/png/pngread.c ****    {
1763:fltk-1.3.4-1/png/pngread.c ****       png_fixed_point g = display->gamma_to_linear;
1764:fltk-1.3.4-1/png/pngread.c **** 
1765:fltk-1.3.4-1/png/pngread.c ****       red = png_gamma_16bit_correct(red*257, g);
1766:fltk-1.3.4-1/png/pngread.c ****       green = png_gamma_16bit_correct(green*257, g);
1767:fltk-1.3.4-1/png/pngread.c ****       blue = png_gamma_16bit_correct(blue*257, g);
1768:fltk-1.3.4-1/png/pngread.c **** 
1769:fltk-1.3.4-1/png/pngread.c ****       if (convert_to_Y != 0 || output_encoding == P_LINEAR)
1770:fltk-1.3.4-1/png/pngread.c ****       {
1771:fltk-1.3.4-1/png/pngread.c ****          alpha *= 257;
1772:fltk-1.3.4-1/png/pngread.c ****          encoding = P_LINEAR;
1773:fltk-1.3.4-1/png/pngread.c ****       }
1774:fltk-1.3.4-1/png/pngread.c **** 
1775:fltk-1.3.4-1/png/pngread.c ****       else
1776:fltk-1.3.4-1/png/pngread.c ****       {
1777:fltk-1.3.4-1/png/pngread.c ****          red = PNG_sRGB_FROM_LINEAR(red * 255);
1778:fltk-1.3.4-1/png/pngread.c ****          green = PNG_sRGB_FROM_LINEAR(green * 255);
1779:fltk-1.3.4-1/png/pngread.c ****          blue = PNG_sRGB_FROM_LINEAR(blue * 255);
1780:fltk-1.3.4-1/png/pngread.c ****          encoding = P_sRGB;
1781:fltk-1.3.4-1/png/pngread.c ****       }
1782:fltk-1.3.4-1/png/pngread.c ****    }
1783:fltk-1.3.4-1/png/pngread.c **** 
1784:fltk-1.3.4-1/png/pngread.c ****    else if (encoding == P_LINEAR8)
 1383              		.loc 1 1784 0
 1384 0057 83F804   		cmpl	$4, %eax
 1385 005a 0F845001 		je	.L216
 1385      0000
1785:fltk-1.3.4-1/png/pngread.c ****    {
1786:fltk-1.3.4-1/png/pngread.c ****       /* This encoding occurs quite frequently in test cases because PngSuite
1787:fltk-1.3.4-1/png/pngread.c ****        * includes a gAMA 1.0 chunk with most images.
1788:fltk-1.3.4-1/png/pngread.c ****        */
1789:fltk-1.3.4-1/png/pngread.c ****       red *= 257;
1790:fltk-1.3.4-1/png/pngread.c ****       green *= 257;
1791:fltk-1.3.4-1/png/pngread.c ****       blue *= 257;
1792:fltk-1.3.4-1/png/pngread.c ****       alpha *= 257;
1793:fltk-1.3.4-1/png/pngread.c ****       encoding = P_LINEAR;
1794:fltk-1.3.4-1/png/pngread.c ****    }
1795:fltk-1.3.4-1/png/pngread.c **** 
1796:fltk-1.3.4-1/png/pngread.c ****    else if (encoding == P_sRGB &&
 1386              		.loc 1 1796 0
 1387 0060 83F801   		cmpl	$1, %eax
 1388 0063 0F84D701 		je	.L217
 1388      0000
 1389              	.LVL179:
1797:fltk-1.3.4-1/png/pngread.c ****        (convert_to_Y  != 0 || output_encoding == P_LINEAR))
1798:fltk-1.3.4-1/png/pngread.c ****    {
1799:fltk-1.3.4-1/png/pngread.c ****       /* The values are 8-bit sRGB values, but must be converted to 16-bit
1800:fltk-1.3.4-1/png/pngread.c ****        * linear.
1801:fltk-1.3.4-1/png/pngread.c ****        */
1802:fltk-1.3.4-1/png/pngread.c ****       red = png_sRGB_table[red];
1803:fltk-1.3.4-1/png/pngread.c ****       green = png_sRGB_table[green];
1804:fltk-1.3.4-1/png/pngread.c ****       blue = png_sRGB_table[blue];
1805:fltk-1.3.4-1/png/pngread.c ****       alpha *= 257;
1806:fltk-1.3.4-1/png/pngread.c ****       encoding = P_LINEAR;
1807:fltk-1.3.4-1/png/pngread.c ****    }
1808:fltk-1.3.4-1/png/pngread.c **** 
1809:fltk-1.3.4-1/png/pngread.c ****    /* This is set if the color isn't gray but the output is. */
1810:fltk-1.3.4-1/png/pngread.c ****    if (encoding == P_LINEAR)
 1390              		.loc 1 1810 0
 1391 0069 83F802   		cmpl	$2, %eax
 1392 006c 0F845E01 		je	.L187
 1392      0000
 1393              	.LVL180:
 1394              	.L166:
1811:fltk-1.3.4-1/png/pngread.c ****    {
1812:fltk-1.3.4-1/png/pngread.c ****       if (convert_to_Y != 0)
1813:fltk-1.3.4-1/png/pngread.c ****       {
1814:fltk-1.3.4-1/png/pngread.c ****          /* NOTE: these values are copied from png_do_rgb_to_gray */
1815:fltk-1.3.4-1/png/pngread.c ****          png_uint_32 y = (png_uint_32)6968 * red  + (png_uint_32)23434 * green +
1816:fltk-1.3.4-1/png/pngread.c ****             (png_uint_32)2366 * blue;
1817:fltk-1.3.4-1/png/pngread.c **** 
1818:fltk-1.3.4-1/png/pngread.c ****          if (output_encoding == P_LINEAR)
1819:fltk-1.3.4-1/png/pngread.c ****             y = (y + 16384) >> 15;
1820:fltk-1.3.4-1/png/pngread.c **** 
1821:fltk-1.3.4-1/png/pngread.c ****          else
1822:fltk-1.3.4-1/png/pngread.c ****          {
1823:fltk-1.3.4-1/png/pngread.c ****             /* y is scaled by 32768, we need it scaled by 255: */
1824:fltk-1.3.4-1/png/pngread.c ****             y = (y + 128) >> 8;
1825:fltk-1.3.4-1/png/pngread.c ****             y *= 255;
1826:fltk-1.3.4-1/png/pngread.c ****             y = PNG_sRGB_FROM_LINEAR((y + 64) >> 7);
1827:fltk-1.3.4-1/png/pngread.c ****             encoding = P_sRGB;
1828:fltk-1.3.4-1/png/pngread.c ****          }
1829:fltk-1.3.4-1/png/pngread.c **** 
1830:fltk-1.3.4-1/png/pngread.c ****          blue = red = green = y;
1831:fltk-1.3.4-1/png/pngread.c ****       }
1832:fltk-1.3.4-1/png/pngread.c **** 
1833:fltk-1.3.4-1/png/pngread.c ****       else if (output_encoding == P_sRGB)
1834:fltk-1.3.4-1/png/pngread.c ****       {
1835:fltk-1.3.4-1/png/pngread.c ****          red = PNG_sRGB_FROM_LINEAR(red * 255);
1836:fltk-1.3.4-1/png/pngread.c ****          green = PNG_sRGB_FROM_LINEAR(green * 255);
1837:fltk-1.3.4-1/png/pngread.c ****          blue = PNG_sRGB_FROM_LINEAR(blue * 255);
1838:fltk-1.3.4-1/png/pngread.c ****          alpha = PNG_DIV257(alpha);
1839:fltk-1.3.4-1/png/pngread.c ****          encoding = P_sRGB;
1840:fltk-1.3.4-1/png/pngread.c ****       }
1841:fltk-1.3.4-1/png/pngread.c ****    }
1842:fltk-1.3.4-1/png/pngread.c **** 
1843:fltk-1.3.4-1/png/pngread.c ****    if (encoding != output_encoding)
1844:fltk-1.3.4-1/png/pngread.c ****       png_error(image->opaque->png_ptr, "bad encoding (internal error)");
 1395              		.loc 1 1844 0
 1396 0072 498B07   		movq	(%r15), %rax
 1397 0075 BE000000 		movl	$.LC14, %esi
 1397      00
 1398 007a 488B38   		movq	(%rax), %rdi
 1399 007d E8000000 		call	png_error
 1399      00
 1400              	.LVL181:
 1401              		.p2align 4,,10
 1402 0082 660F1F44 		.p2align 3
 1402      0000
 1403              	.L209:
 1404 0088 4531F6   		xorl	%r14d, %r14d
 1405 008b EBB9     		jmp	.L155
 1406              	.LVL182:
 1407 008d 0F1F00   		.p2align 4,,10
 1408              		.p2align 3
 1409              	.L215:
1752:fltk-1.3.4-1/png/pngread.c ****          set_file_encoding(display);
 1410              		.loc 1 1752 0
 1411 0090 8B4540   		movl	64(%rbp), %eax
 1412 0093 85C0     		testl	%eax, %eax
 1413 0095 0F84F502 		je	.L218
 1413      0000
 1414              	.LVL183:
 1415              	.L158:
1761:fltk-1.3.4-1/png/pngread.c ****    {
 1416              		.loc 1 1761 0
 1417 009b 83F803   		cmpl	$3, %eax
 1418 009e 75B7     		jne	.L157
 1419              	.LBB131:
1763:fltk-1.3.4-1/png/pngread.c **** 
 1420              		.loc 1 1763 0
 1421 00a0 448B6544 		movl	68(%rbp), %r12d
 1422              	.LVL184:
1765:fltk-1.3.4-1/png/pngread.c ****       green = png_gamma_16bit_correct(green*257, g);
 1423              		.loc 1 1765 0
 1424 00a4 89D7     		movl	%edx, %edi
 1425 00a6 44894C24 		movl	%r9d, 12(%rsp)
 1425      0C
 1426 00ab C1E708   		sall	$8, %edi
 1427 00ae 44894424 		movl	%r8d, 8(%rsp)
 1427      08
 1428 00b3 890C24   		movl	%ecx, (%rsp)
 1429 00b6 01D7     		addl	%edx, %edi
 1430 00b8 4489E6   		movl	%r12d, %esi
 1431 00bb E8000000 		call	png_gamma_16bit_correct
 1431      00
 1432              	.LVL185:
1766:fltk-1.3.4-1/png/pngread.c ****       blue = png_gamma_16bit_correct(blue*257, g);
 1433              		.loc 1 1766 0
 1434 00c0 8B0C24   		movl	(%rsp), %ecx
1765:fltk-1.3.4-1/png/pngread.c ****       green = png_gamma_16bit_correct(green*257, g);
 1435              		.loc 1 1765 0
 1436 00c3 0FB7D0   		movzwl	%ax, %edx
1766:fltk-1.3.4-1/png/pngread.c ****       blue = png_gamma_16bit_correct(blue*257, g);
 1437              		.loc 1 1766 0
 1438 00c6 4489E6   		movl	%r12d, %esi
1765:fltk-1.3.4-1/png/pngread.c ****       green = png_gamma_16bit_correct(green*257, g);
 1439              		.loc 1 1765 0
 1440 00c9 89542404 		movl	%edx, 4(%rsp)
 1441              	.LVL186:
1766:fltk-1.3.4-1/png/pngread.c ****       blue = png_gamma_16bit_correct(blue*257, g);
 1442              		.loc 1 1766 0
 1443 00cd 89CF     		movl	%ecx, %edi
 1444 00cf C1E708   		sall	$8, %edi
 1445 00d2 01CF     		addl	%ecx, %edi
 1446 00d4 E8000000 		call	png_gamma_16bit_correct
 1446      00
 1447              	.LVL187:
1767:fltk-1.3.4-1/png/pngread.c **** 
 1448              		.loc 1 1767 0
 1449 00d9 448B4424 		movl	8(%rsp), %r8d
 1449      08
1766:fltk-1.3.4-1/png/pngread.c ****       blue = png_gamma_16bit_correct(blue*257, g);
 1450              		.loc 1 1766 0
 1451 00de 0FB7C8   		movzwl	%ax, %ecx
1767:fltk-1.3.4-1/png/pngread.c **** 
 1452              		.loc 1 1767 0
 1453 00e1 4489E6   		movl	%r12d, %esi
1766:fltk-1.3.4-1/png/pngread.c ****       blue = png_gamma_16bit_correct(blue*257, g);
 1454              		.loc 1 1766 0
 1455 00e4 890C24   		movl	%ecx, (%rsp)
 1456              	.LVL188:
1767:fltk-1.3.4-1/png/pngread.c **** 
 1457              		.loc 1 1767 0
 1458 00e7 4489C7   		movl	%r8d, %edi
 1459 00ea C1E708   		sall	$8, %edi
 1460 00ed 4401C7   		addl	%r8d, %edi
 1461 00f0 E8000000 		call	png_gamma_16bit_correct
 1461      00
 1462              	.LVL189:
1769:fltk-1.3.4-1/png/pngread.c ****       {
 1463              		.loc 1 1769 0
 1464 00f5 4183FD02 		cmpl	$2, %r13d
1767:fltk-1.3.4-1/png/pngread.c **** 
 1465              		.loc 1 1767 0
 1466 00f9 440FB7C0 		movzwl	%ax, %r8d
 1467              	.LVL190:
1769:fltk-1.3.4-1/png/pngread.c ****       {
 1468              		.loc 1 1769 0
 1469 00fd 8B0C24   		movl	(%rsp), %ecx
 1470 0100 8B542404 		movl	4(%rsp), %edx
 1471 0104 448B4C24 		movl	12(%rsp), %r9d
 1471      0C
 1472 0109 0F84B800 		je	.L211
 1472      0000
 1473 010f 4585F6   		testl	%r14d, %r14d
 1474 0112 0F85AF00 		jne	.L211
 1474      0000
1777:fltk-1.3.4-1/png/pngread.c ****          green = PNG_sRGB_FROM_LINEAR(green * 255);
 1475              		.loc 1 1777 0
 1476 0118 89D0     		movl	%edx, %eax
 1477 011a C1E008   		sall	$8, %eax
 1478 011d 29D0     		subl	%edx, %eax
 1479 011f 89C6     		movl	%eax, %esi
 1480 0121 25FF7F00 		andl	$32767, %eax
 1480      00
 1481 0126 C1EE0F   		shrl	$15, %esi
 1482 0129 0FB69600 		movzbl	png_sRGB_delta(%rsi), %edx
 1482      000000
 1483 0130 0FAFC2   		imull	%edx, %eax
 1484 0133 0FB79436 		movzwl	png_sRGB_base(%rsi,%rsi), %edx
 1484      00000000 
 1485 013b C1E80C   		shrl	$12, %eax
 1486 013e 01D0     		addl	%edx, %eax
 1487 0140 0FB6D4   		movzbl	%ah, %edx
 1488              	.LVL191:
1778:fltk-1.3.4-1/png/pngread.c ****          blue = PNG_sRGB_FROM_LINEAR(blue * 255);
 1489              		.loc 1 1778 0
 1490 0143 89C8     		movl	%ecx, %eax
 1491 0145 C1E008   		sall	$8, %eax
 1492 0148 29C8     		subl	%ecx, %eax
 1493 014a 89C6     		movl	%eax, %esi
 1494 014c 25FF7F00 		andl	$32767, %eax
 1494      00
 1495 0151 C1EE0F   		shrl	$15, %esi
 1496 0154 0FB68E00 		movzbl	png_sRGB_delta(%rsi), %ecx
 1496      000000
 1497 015b 0FAFC1   		imull	%ecx, %eax
 1498 015e 0FB78C36 		movzwl	png_sRGB_base(%rsi,%rsi), %ecx
 1498      00000000 
 1499 0166 C1E80C   		shrl	$12, %eax
 1500 0169 01C8     		addl	%ecx, %eax
 1501 016b 0FB6CC   		movzbl	%ah, %ecx
 1502              	.LVL192:
1779:fltk-1.3.4-1/png/pngread.c ****          encoding = P_sRGB;
 1503              		.loc 1 1779 0
 1504 016e 4489C0   		movl	%r8d, %eax
 1505 0171 C1E008   		sall	$8, %eax
 1506 0174 4429C0   		subl	%r8d, %eax
 1507 0177 89C6     		movl	%eax, %esi
 1508 0179 25FF7F00 		andl	$32767, %eax
 1508      00
 1509 017e C1EE0F   		shrl	$15, %esi
 1510 0181 440FB686 		movzbl	png_sRGB_delta(%rsi), %r8d
 1510      00000000 
 1511              	.LVL193:
 1512 0189 410FAFC0 		imull	%r8d, %eax
 1513 018d 440FB784 		movzwl	png_sRGB_base(%rsi,%rsi), %r8d
 1513      36000000 
 1513      00
 1514 0196 C1E80C   		shrl	$12, %eax
 1515 0199 4401C0   		addl	%r8d, %eax
 1516 019c 0FB6C4   		movzbl	%ah, %eax
 1517 019f 4189C0   		movl	%eax, %r8d
 1518              	.LVL194:
 1519 01a2 E9AC0000 		jmp	.L162
 1519      00
 1520              	.LVL195:
 1521 01a7 660F1F84 		.p2align 4,,10
 1521      00000000 
 1521      00
 1522              		.p2align 3
 1523              	.L216:
 1524              	.LBE131:
1789:fltk-1.3.4-1/png/pngread.c ****       green *= 257;
 1525              		.loc 1 1789 0
 1526 01b0 89D0     		movl	%edx, %eax
 1527              	.LVL196:
 1528 01b2 C1E008   		sall	$8, %eax
 1529 01b5 01C2     		addl	%eax, %edx
 1530              	.LVL197:
1790:fltk-1.3.4-1/png/pngread.c ****       blue *= 257;
 1531              		.loc 1 1790 0
 1532 01b7 89C8     		movl	%ecx, %eax
 1533 01b9 C1E008   		sall	$8, %eax
 1534 01bc 01C1     		addl	%eax, %ecx
 1535              	.LVL198:
1791:fltk-1.3.4-1/png/pngread.c ****       alpha *= 257;
 1536              		.loc 1 1791 0
 1537 01be 4489C0   		movl	%r8d, %eax
 1538 01c1 C1E008   		sall	$8, %eax
 1539 01c4 4101C0   		addl	%eax, %r8d
 1540              	.LVL199:
 1541              	.L211:
1792:fltk-1.3.4-1/png/pngread.c ****       encoding = P_LINEAR;
 1542              		.loc 1 1792 0
 1543 01c7 4489C8   		movl	%r9d, %eax
 1544 01ca C1E008   		sall	$8, %eax
 1545 01cd 4101C1   		addl	%eax, %r9d
 1546              	.LVL200:
 1547              	.L187:
1812:fltk-1.3.4-1/png/pngread.c ****       {
 1548              		.loc 1 1812 0
 1549 01d0 4585F6   		testl	%r14d, %r14d
 1550 01d3 0F84FF00 		je	.L167
 1550      0000
 1551              	.LBB132:
1815:fltk-1.3.4-1/png/pngread.c ****             (png_uint_32)2366 * blue;
 1552              		.loc 1 1815 0
 1553 01d9 69D2381B 		imull	$6968, %edx, %edx
 1553      0000
 1554              	.LVL201:
 1555 01df 69C98A5B 		imull	$23434, %ecx, %ecx
 1555      0000
 1556              	.LVL202:
 1557 01e5 4569C03E 		imull	$2366, %r8d, %r8d
 1557      090000
 1558              	.LVL203:
 1559 01ec 01D1     		addl	%edx, %ecx
 1560 01ee 4401C1   		addl	%r8d, %ecx
 1561              	.LVL204:
1818:fltk-1.3.4-1/png/pngread.c ****             y = (y + 16384) >> 15;
 1562              		.loc 1 1818 0
 1563 01f1 4183FD02 		cmpl	$2, %r13d
 1564 01f5 0F84A503 		je	.L219
 1564      0000
1824:fltk-1.3.4-1/png/pngread.c ****             y *= 255;
 1565              		.loc 1 1824 0
 1566 01fb 83E980   		subl	$-128, %ecx
 1567              	.LVL205:
 1568 01fe C1E908   		shrl	$8, %ecx
 1569              	.LVL206:
1826:fltk-1.3.4-1/png/pngread.c ****             encoding = P_sRGB;
 1570              		.loc 1 1826 0
 1571 0201 89C8     		movl	%ecx, %eax
 1572 0203 C1E008   		sall	$8, %eax
 1573 0206 29C8     		subl	%ecx, %eax
 1574 0208 83C040   		addl	$64, %eax
 1575 020b 89C2     		movl	%eax, %edx
 1576 020d C1E807   		shrl	$7, %eax
 1577 0210 C1EA16   		shrl	$22, %edx
 1578 0213 25FF7F00 		andl	$32767, %eax
 1578      00
 1579 0218 0FB68A00 		movzbl	png_sRGB_delta(%rdx), %ecx
 1579      000000
 1580              	.LVL207:
 1581 021f 0FAFC1   		imull	%ecx, %eax
 1582 0222 0FB78C12 		movzwl	png_sRGB_base(%rdx,%rdx), %ecx
 1582      00000000 
 1583 022a C1E80C   		shrl	$12, %eax
 1584 022d 01C8     		addl	%ecx, %eax
 1585 022f 0FB6CC   		movzbl	%ah, %ecx
 1586              	.LVL208:
 1587 0232 4189C8   		movl	%ecx, %r8d
 1588 0235 89CA     		movl	%ecx, %edx
 1589 0237 EB24     		jmp	.L188
 1590              	.LVL209:
 1591 0239 0F1F8000 		.p2align 4,,10
 1591      000000
 1592              		.p2align 3
 1593              	.L217:
 1594              	.LBE132:
1796:fltk-1.3.4-1/png/pngread.c ****        (convert_to_Y  != 0 || output_encoding == P_LINEAR))
 1595              		.loc 1 1796 0 discriminator 1
 1596 0240 4183FD02 		cmpl	$2, %r13d
 1597 0244 0F841603 		je	.L198
 1597      0000
 1598 024a 4585F6   		testl	%r14d, %r14d
 1599 024d 0F850D03 		jne	.L198
 1599      0000
 1600              	.LVL210:
 1601              	.L162:
1843:fltk-1.3.4-1/png/pngread.c ****       png_error(image->opaque->png_ptr, "bad encoding (internal error)");
 1602              		.loc 1 1843 0
 1603 0253 4183FD01 		cmpl	$1, %r13d
 1604 0257 0F8515FE 		jne	.L166
 1604      FFFF
 1605              	.LVL211:
 1606              	.L188:
 1607              	.LBB133:
1845:fltk-1.3.4-1/png/pngread.c **** 
1846:fltk-1.3.4-1/png/pngread.c ****    /* Store the value. */
1847:fltk-1.3.4-1/png/pngread.c ****    {
1848:fltk-1.3.4-1/png/pngread.c **** #     ifdef PNG_FORMAT_AFIRST_SUPPORTED
1849:fltk-1.3.4-1/png/pngread.c ****          const int afirst = (image->format & PNG_FORMAT_FLAG_AFIRST) != 0 &&
 1608              		.loc 1 1849 0
 1609 025d 418B7714 		movl	20(%r15), %esi
 1610 0261 89F0     		movl	%esi, %eax
1850:fltk-1.3.4-1/png/pngread.c ****             (image->format & PNG_FORMAT_FLAG_ALPHA) != 0;
1851:fltk-1.3.4-1/png/pngread.c **** #     else
1852:fltk-1.3.4-1/png/pngread.c **** #        define afirst 0
1853:fltk-1.3.4-1/png/pngread.c **** #     endif
1854:fltk-1.3.4-1/png/pngread.c **** #     ifdef PNG_FORMAT_BGR_SUPPORTED
1855:fltk-1.3.4-1/png/pngread.c ****          const int bgr = (image->format & PNG_FORMAT_FLAG_BGR) != 0 ? 2 : 0;
 1611              		.loc 1 1855 0
 1612 0263 4189F4   		movl	%esi, %r12d
1849:fltk-1.3.4-1/png/pngread.c ****             (image->format & PNG_FORMAT_FLAG_ALPHA) != 0;
 1613              		.loc 1 1849 0
 1614 0266 83E021   		andl	$33, %eax
 1615 0269 83F821   		cmpl	$33, %eax
 1616 026c 410F94C3 		sete	%r11b
 1617              	.LBB134:
1856:fltk-1.3.4-1/png/pngread.c **** #     else
1857:fltk-1.3.4-1/png/pngread.c **** #        define bgr 0
1858:fltk-1.3.4-1/png/pngread.c **** #     endif
1859:fltk-1.3.4-1/png/pngread.c **** 
1860:fltk-1.3.4-1/png/pngread.c ****       if (output_encoding == P_LINEAR)
1861:fltk-1.3.4-1/png/pngread.c ****       {
1862:fltk-1.3.4-1/png/pngread.c ****          png_uint_16p entry = png_voidcast(png_uint_16p, display->colormap);
1863:fltk-1.3.4-1/png/pngread.c **** 
1864:fltk-1.3.4-1/png/pngread.c ****          entry += ip * PNG_IMAGE_SAMPLE_CHANNELS(image->format);
 1618              		.loc 1 1864 0
 1619 0270 83E603   		andl	$3, %esi
 1620              	.LBE134:
1855:fltk-1.3.4-1/png/pngread.c **** #     else
 1621              		.loc 1 1855 0
 1622 0273 41C1EC03 		shrl	$3, %r12d
 1623              	.LBB135:
 1624              		.loc 1 1864 0
 1625 0277 448D5601 		leal	1(%rsi), %r10d
 1626              	.LBE135:
1855:fltk-1.3.4-1/png/pngread.c **** #     else
 1627              		.loc 1 1855 0
 1628 027b 4183E402 		andl	$2, %r12d
1849:fltk-1.3.4-1/png/pngread.c ****             (image->format & PNG_FORMAT_FLAG_ALPHA) != 0;
 1629              		.loc 1 1849 0
 1630 027f 450FB6F3 		movzbl	%r11b, %r14d
 1631              	.LVL212:
 1632              	.LBB136:
 1633              		.loc 1 1864 0
 1634 0283 410FAFDA 		imull	%r10d, %ebx
 1635              	.LVL213:
 1636              	.LBE136:
1860:fltk-1.3.4-1/png/pngread.c ****       {
 1637              		.loc 1 1860 0
 1638 0287 4183FD02 		cmpl	$2, %r13d
 1639 028b 0F847F01 		je	.L220
 1639      0000
 1640              	.LVL214:
 1641              	.LBB137:
1865:fltk-1.3.4-1/png/pngread.c **** 
1866:fltk-1.3.4-1/png/pngread.c ****          /* The linear 16-bit values must be pre-multiplied by the alpha channel
1867:fltk-1.3.4-1/png/pngread.c ****           * value, if less than 65535 (this is, effectively, composite on black
1868:fltk-1.3.4-1/png/pngread.c ****           * if the alpha channel is removed.)
1869:fltk-1.3.4-1/png/pngread.c ****           */
1870:fltk-1.3.4-1/png/pngread.c ****          switch (PNG_IMAGE_SAMPLE_CHANNELS(image->format))
1871:fltk-1.3.4-1/png/pngread.c ****          {
1872:fltk-1.3.4-1/png/pngread.c ****             case 4:
1873:fltk-1.3.4-1/png/pngread.c ****                entry[afirst ? 0 : 3] = (png_uint_16)alpha;
1874:fltk-1.3.4-1/png/pngread.c ****                /* FALL THROUGH */
1875:fltk-1.3.4-1/png/pngread.c **** 
1876:fltk-1.3.4-1/png/pngread.c ****             case 3:
1877:fltk-1.3.4-1/png/pngread.c ****                if (alpha < 65535)
1878:fltk-1.3.4-1/png/pngread.c ****                {
1879:fltk-1.3.4-1/png/pngread.c ****                   if (alpha > 0)
1880:fltk-1.3.4-1/png/pngread.c ****                   {
1881:fltk-1.3.4-1/png/pngread.c ****                      blue = (blue * alpha + 32767U)/65535U;
1882:fltk-1.3.4-1/png/pngread.c ****                      green = (green * alpha + 32767U)/65535U;
1883:fltk-1.3.4-1/png/pngread.c ****                      red = (red * alpha + 32767U)/65535U;
1884:fltk-1.3.4-1/png/pngread.c ****                   }
1885:fltk-1.3.4-1/png/pngread.c **** 
1886:fltk-1.3.4-1/png/pngread.c ****                   else
1887:fltk-1.3.4-1/png/pngread.c ****                      red = green = blue = 0;
1888:fltk-1.3.4-1/png/pngread.c ****                }
1889:fltk-1.3.4-1/png/pngread.c ****                entry[afirst + (2 ^ bgr)] = (png_uint_16)blue;
1890:fltk-1.3.4-1/png/pngread.c ****                entry[afirst + 1] = (png_uint_16)green;
1891:fltk-1.3.4-1/png/pngread.c ****                entry[afirst + bgr] = (png_uint_16)red;
1892:fltk-1.3.4-1/png/pngread.c ****                break;
1893:fltk-1.3.4-1/png/pngread.c **** 
1894:fltk-1.3.4-1/png/pngread.c ****             case 2:
1895:fltk-1.3.4-1/png/pngread.c ****                entry[1 ^ afirst] = (png_uint_16)alpha;
1896:fltk-1.3.4-1/png/pngread.c ****                /* FALL THROUGH */
1897:fltk-1.3.4-1/png/pngread.c **** 
1898:fltk-1.3.4-1/png/pngread.c ****             case 1:
1899:fltk-1.3.4-1/png/pngread.c ****                if (alpha < 65535)
1900:fltk-1.3.4-1/png/pngread.c ****                {
1901:fltk-1.3.4-1/png/pngread.c ****                   if (alpha > 0)
1902:fltk-1.3.4-1/png/pngread.c ****                      green = (green * alpha + 32767U)/65535U;
1903:fltk-1.3.4-1/png/pngread.c **** 
1904:fltk-1.3.4-1/png/pngread.c ****                   else
1905:fltk-1.3.4-1/png/pngread.c ****                      green = 0;
1906:fltk-1.3.4-1/png/pngread.c ****                }
1907:fltk-1.3.4-1/png/pngread.c ****                entry[afirst] = (png_uint_16)green;
1908:fltk-1.3.4-1/png/pngread.c ****                break;
1909:fltk-1.3.4-1/png/pngread.c **** 
1910:fltk-1.3.4-1/png/pngread.c ****             default:
1911:fltk-1.3.4-1/png/pngread.c ****                break;
1912:fltk-1.3.4-1/png/pngread.c ****          }
1913:fltk-1.3.4-1/png/pngread.c ****       }
1914:fltk-1.3.4-1/png/pngread.c **** 
1915:fltk-1.3.4-1/png/pngread.c ****       else /* output encoding is P_sRGB */
1916:fltk-1.3.4-1/png/pngread.c ****       {
1917:fltk-1.3.4-1/png/pngread.c ****          png_bytep entry = png_voidcast(png_bytep, display->colormap);
1918:fltk-1.3.4-1/png/pngread.c **** 
1919:fltk-1.3.4-1/png/pngread.c ****          entry += ip * PNG_IMAGE_SAMPLE_CHANNELS(image->format);
 1642              		.loc 1 1919 0
 1643 0291 48035D18 		addq	24(%rbp), %rbx
 1644              	.LVL215:
1920:fltk-1.3.4-1/png/pngread.c **** 
1921:fltk-1.3.4-1/png/pngread.c ****          switch (PNG_IMAGE_SAMPLE_CHANNELS(image->format))
 1645              		.loc 1 1921 0
 1646 0295 4183FA03 		cmpl	$3, %r10d
 1647 0299 0F843A01 		je	.L183
 1647      0000
 1648 029f 4183FA04 		cmpl	$4, %r10d
 1649 02a3 0F841F01 		je	.L184
 1649      0000
 1650 02a9 4183FA02 		cmpl	$2, %r10d
 1651 02ad 750D     		jne	.L182
1922:fltk-1.3.4-1/png/pngread.c ****          {
1923:fltk-1.3.4-1/png/pngread.c ****             case 4:
1924:fltk-1.3.4-1/png/pngread.c ****                entry[afirst ? 0 : 3] = (png_byte)alpha;
1925:fltk-1.3.4-1/png/pngread.c ****             case 3:
1926:fltk-1.3.4-1/png/pngread.c ****                entry[afirst + (2 ^ bgr)] = (png_byte)blue;
1927:fltk-1.3.4-1/png/pngread.c ****                entry[afirst + 1] = (png_byte)green;
1928:fltk-1.3.4-1/png/pngread.c ****                entry[afirst + bgr] = (png_byte)red;
1929:fltk-1.3.4-1/png/pngread.c ****                break;
1930:fltk-1.3.4-1/png/pngread.c **** 
1931:fltk-1.3.4-1/png/pngread.c ****             case 2:
1932:fltk-1.3.4-1/png/pngread.c ****                entry[1 ^ afirst] = (png_byte)alpha;
 1652              		.loc 1 1932 0
 1653 02af 83F821   		cmpl	$33, %eax
 1654 02b2 0F95C0   		setne	%al
 1655 02b5 0FB6C0   		movzbl	%al, %eax
 1656 02b8 44880C03 		movb	%r9b, (%rbx,%rax)
 1657              	.L182:
1933:fltk-1.3.4-1/png/pngread.c ****             case 1:
1934:fltk-1.3.4-1/png/pngread.c ****                entry[afirst] = (png_byte)green;
 1658              		.loc 1 1934 0
 1659 02bc 450FB6DB 		movzbl	%r11b, %r11d
 1660 02c0 42880C1B 		movb	%cl, (%rbx,%r11)
 1661              	.LBE137:
 1662              	.LBE133:
1935:fltk-1.3.4-1/png/pngread.c ****                break;
1936:fltk-1.3.4-1/png/pngread.c **** 
1937:fltk-1.3.4-1/png/pngread.c ****             default:
1938:fltk-1.3.4-1/png/pngread.c ****                break;
1939:fltk-1.3.4-1/png/pngread.c ****          }
1940:fltk-1.3.4-1/png/pngread.c ****       }
1941:fltk-1.3.4-1/png/pngread.c **** 
1942:fltk-1.3.4-1/png/pngread.c **** #     ifdef afirst
1943:fltk-1.3.4-1/png/pngread.c **** #        undef afirst
1944:fltk-1.3.4-1/png/pngread.c **** #     endif
1945:fltk-1.3.4-1/png/pngread.c **** #     ifdef bgr
1946:fltk-1.3.4-1/png/pngread.c **** #        undef bgr
1947:fltk-1.3.4-1/png/pngread.c **** #     endif
1948:fltk-1.3.4-1/png/pngread.c ****    }
1949:fltk-1.3.4-1/png/pngread.c **** }
 1663              		.loc 1 1949 0
 1664 02c4 4883C418 		addq	$24, %rsp
 1665              		.cfi_remember_state
 1666              		.cfi_def_cfa_offset 56
 1667 02c8 5B       		popq	%rbx
 1668              		.cfi_def_cfa_offset 48
 1669              	.LVL216:
 1670 02c9 5D       		popq	%rbp
 1671              		.cfi_def_cfa_offset 40
 1672              	.LVL217:
 1673 02ca 415C     		popq	%r12
 1674              		.cfi_def_cfa_offset 32
 1675              	.LVL218:
 1676 02cc 415D     		popq	%r13
 1677              		.cfi_def_cfa_offset 24
 1678              	.LVL219:
 1679 02ce 415E     		popq	%r14
 1680              		.cfi_def_cfa_offset 16
 1681              	.LVL220:
 1682 02d0 415F     		popq	%r15
 1683              		.cfi_def_cfa_offset 8
 1684              	.LVL221:
 1685 02d2 C3       		ret
 1686              	.LVL222:
 1687              		.p2align 4,,10
 1688 02d3 0F1F4400 		.p2align 3
 1688      00
 1689              	.L167:
 1690              		.cfi_restore_state
1833:fltk-1.3.4-1/png/pngread.c ****       {
 1691              		.loc 1 1833 0
 1692 02d8 4183FD01 		cmpl	$1, %r13d
 1693 02dc 0F857BFF 		jne	.L188
 1693      FFFF
1835:fltk-1.3.4-1/png/pngread.c ****          green = PNG_sRGB_FROM_LINEAR(green * 255);
 1694              		.loc 1 1835 0
 1695 02e2 89D0     		movl	%edx, %eax
 1696 02e4 C1E008   		sall	$8, %eax
 1697 02e7 29D0     		subl	%edx, %eax
 1698 02e9 89C6     		movl	%eax, %esi
 1699 02eb 25FF7F00 		andl	$32767, %eax
 1699      00
 1700 02f0 C1EE0F   		shrl	$15, %esi
 1701 02f3 0FB69600 		movzbl	png_sRGB_delta(%rsi), %edx
 1701      000000
 1702              	.LVL223:
 1703 02fa 0FAFC2   		imull	%edx, %eax
 1704 02fd 0FB79436 		movzwl	png_sRGB_base(%rsi,%rsi), %edx
 1704      00000000 
 1705 0305 C1E80C   		shrl	$12, %eax
 1706 0308 01D0     		addl	%edx, %eax
 1707 030a 0FB6D4   		movzbl	%ah, %edx
 1708              	.LVL224:
1836:fltk-1.3.4-1/png/pngread.c ****          blue = PNG_sRGB_FROM_LINEAR(blue * 255);
 1709              		.loc 1 1836 0
 1710 030d 89C8     		movl	%ecx, %eax
 1711 030f C1E008   		sall	$8, %eax
 1712 0312 29C8     		subl	%ecx, %eax
 1713 0314 89C6     		movl	%eax, %esi
 1714 0316 25FF7F00 		andl	$32767, %eax
 1714      00
 1715 031b C1EE0F   		shrl	$15, %esi
 1716 031e 0FB68E00 		movzbl	png_sRGB_delta(%rsi), %ecx
 1716      000000
 1717              	.LVL225:
 1718 0325 0FAFC1   		imull	%ecx, %eax
 1719 0328 0FB78C36 		movzwl	png_sRGB_base(%rsi,%rsi), %ecx
 1719      00000000 
 1720 0330 C1E80C   		shrl	$12, %eax
 1721 0333 01C8     		addl	%ecx, %eax
 1722 0335 0FB6CC   		movzbl	%ah, %ecx
 1723              	.LVL226:
1837:fltk-1.3.4-1/png/pngread.c ****          alpha = PNG_DIV257(alpha);
 1724              		.loc 1 1837 0
 1725 0338 4489C0   		movl	%r8d, %eax
 1726 033b C1E008   		sall	$8, %eax
 1727 033e 4429C0   		subl	%r8d, %eax
 1728 0341 89C6     		movl	%eax, %esi
 1729 0343 25FF7F00 		andl	$32767, %eax
 1729      00
 1730 0348 C1EE0F   		shrl	$15, %esi
 1731 034b 440FB686 		movzbl	png_sRGB_delta(%rsi), %r8d
 1731      00000000 
 1732              	.LVL227:
 1733 0353 410FAFC0 		imull	%r8d, %eax
 1734 0357 440FB784 		movzwl	png_sRGB_base(%rsi,%rsi), %r8d
 1734      36000000 
 1734      00
 1735 0360 C1E80C   		shrl	$12, %eax
 1736 0363 4401C0   		addl	%r8d, %eax
 1737 0366 0FB6C4   		movzbl	%ah, %eax
 1738 0369 4189C0   		movl	%eax, %r8d
 1739              	.LVL228:
1838:fltk-1.3.4-1/png/pngread.c ****          encoding = P_sRGB;
 1740              		.loc 1 1838 0
 1741 036c 4489C8   		movl	%r9d, %eax
 1742              	.LVL229:
 1743 036f C1E008   		sall	$8, %eax
 1744 0372 4429C8   		subl	%r9d, %eax
 1745 0375 4189C1   		movl	%eax, %r9d
 1746 0378 4181C17F 		addl	$32895, %r9d
 1746      800000
 1747              	.LVL230:
 1748 037f 41C1E910 		shrl	$16, %r9d
 1749              	.LVL231:
 1750 0383 E9D5FEFF 		jmp	.L188
 1750      FF
 1751              	.LVL232:
 1752 0388 0F1F8400 		.p2align 4,,10
 1752      00000000 
 1753              		.p2align 3
 1754              	.L218:
1753:fltk-1.3.4-1/png/pngread.c **** 
 1755              		.loc 1 1753 0
 1756 0390 4889EF   		movq	%rbp, %rdi
 1757 0393 44894C24 		movl	%r9d, 12(%rsp)
 1757      0C
 1758 0398 44894424 		movl	%r8d, 8(%rsp)
 1758      08
 1759 039d 894C2404 		movl	%ecx, 4(%rsp)
 1760 03a1 891424   		movl	%edx, (%rsp)
 1761 03a4 E8000000 		call	set_file_encoding
 1761      00
 1762              	.LVL233:
 1763 03a9 8B4540   		movl	64(%rbp), %eax
 1764 03ac 448B4C24 		movl	12(%rsp), %r9d
 1764      0C
 1765 03b1 448B4424 		movl	8(%rsp), %r8d
 1765      08
 1766 03b6 8B4C2404 		movl	4(%rsp), %ecx
 1767 03ba 8B1424   		movl	(%rsp), %edx
 1768 03bd E9D9FCFF 		jmp	.L158
 1768      FF
 1769              	.LVL234:
 1770              		.p2align 4,,10
 1771 03c2 660F1F44 		.p2align 3
 1771      0000
 1772              	.L184:
 1773              	.LBB142:
 1774              	.LBB138:
1924:fltk-1.3.4-1/png/pngread.c ****             case 3:
 1775              		.loc 1 1924 0
 1776 03c8 83F821   		cmpl	$33, %eax
 1777 03cb 0F95C0   		setne	%al
 1778 03ce 0FB6C0   		movzbl	%al, %eax
 1779 03d1 488D0440 		leaq	(%rax,%rax,2), %rax
 1780 03d5 44880C03 		movb	%r9b, (%rbx,%rax)
 1781              	.L183:
1926:fltk-1.3.4-1/png/pngread.c ****                entry[afirst + 1] = (png_byte)green;
 1782              		.loc 1 1926 0
 1783 03d9 4489E0   		movl	%r12d, %eax
1928:fltk-1.3.4-1/png/pngread.c ****                break;
 1784              		.loc 1 1928 0
 1785 03dc 4501F4   		addl	%r14d, %r12d
 1786              	.LVL235:
1927:fltk-1.3.4-1/png/pngread.c ****                entry[afirst + bgr] = (png_byte)red;
 1787              		.loc 1 1927 0
 1788 03df 450FB6DB 		movzbl	%r11b, %r11d
1926:fltk-1.3.4-1/png/pngread.c ****                entry[afirst + 1] = (png_byte)green;
 1789              		.loc 1 1926 0
 1790 03e3 83F002   		xorl	$2, %eax
 1791              	.LVL236:
1928:fltk-1.3.4-1/png/pngread.c ****                break;
 1792              		.loc 1 1928 0
 1793 03e6 4D63E4   		movslq	%r12d, %r12
1926:fltk-1.3.4-1/png/pngread.c ****                entry[afirst + 1] = (png_byte)green;
 1794              		.loc 1 1926 0
 1795 03e9 4401F0   		addl	%r14d, %eax
 1796              	.LVL237:
 1797 03ec 4898     		cltq
 1798 03ee 44880403 		movb	%r8b, (%rbx,%rax)
1927:fltk-1.3.4-1/png/pngread.c ****                entry[afirst + bgr] = (png_byte)red;
 1799              		.loc 1 1927 0
 1800 03f2 42884C1B 		movb	%cl, 1(%rbx,%r11)
 1800      01
1928:fltk-1.3.4-1/png/pngread.c ****                break;
 1801              		.loc 1 1928 0
 1802 03f7 42881423 		movb	%dl, (%rbx,%r12)
 1803              	.LBE138:
 1804              	.LBE142:
 1805              		.loc 1 1949 0
 1806 03fb 4883C418 		addq	$24, %rsp
 1807              		.cfi_remember_state
 1808              		.cfi_def_cfa_offset 56
 1809 03ff 5B       		popq	%rbx
 1810              		.cfi_def_cfa_offset 48
 1811              	.LVL238:
 1812 0400 5D       		popq	%rbp
 1813              		.cfi_def_cfa_offset 40
 1814              	.LVL239:
 1815 0401 415C     		popq	%r12
 1816              		.cfi_def_cfa_offset 32
 1817 0403 415D     		popq	%r13
 1818              		.cfi_def_cfa_offset 24
 1819              	.LVL240:
 1820 0405 415E     		popq	%r14
 1821              		.cfi_def_cfa_offset 16
 1822              	.LVL241:
 1823 0407 415F     		popq	%r15
 1824              		.cfi_def_cfa_offset 8
 1825              	.LVL242:
 1826 0409 C3       		ret
 1827              	.LVL243:
 1828 040a 660F1F44 		.p2align 4,,10
 1828      0000
 1829              		.p2align 3
 1830              	.L220:
 1831              		.cfi_restore_state
 1832              	.LBB143:
 1833              	.LBB139:
1864:fltk-1.3.4-1/png/pngread.c **** 
 1834              		.loc 1 1864 0
 1835 0410 488B7518 		movq	24(%rbp), %rsi
1870:fltk-1.3.4-1/png/pngread.c ****          {
 1836              		.loc 1 1870 0
 1837 0414 4183FA03 		cmpl	$3, %r10d
1864:fltk-1.3.4-1/png/pngread.c **** 
 1838              		.loc 1 1864 0
 1839 0418 488D1C5E 		leaq	(%rsi,%rbx,2), %rbx
 1840              	.LVL244:
1870:fltk-1.3.4-1/png/pngread.c ****          {
 1841              		.loc 1 1870 0
 1842 041c 0F848400 		je	.L173
 1842      0000
 1843 0422 4183FA04 		cmpl	$4, %r10d
 1844 0426 7468     		je	.L174
 1845 0428 4183FA02 		cmpl	$2, %r10d
 1846 042c 750E     		jne	.L172
1895:fltk-1.3.4-1/png/pngread.c ****                /* FALL THROUGH */
 1847              		.loc 1 1895 0
 1848 042e 83F821   		cmpl	$33, %eax
 1849 0431 0F95C0   		setne	%al
 1850 0434 0FB6C0   		movzbl	%al, %eax
 1851 0437 6644890C 		movw	%r9w, (%rbx,%rax,2)
 1851      43
 1852              	.L172:
1899:fltk-1.3.4-1/png/pngread.c ****                {
 1853              		.loc 1 1899 0
 1854 043c 4181F9FE 		cmpl	$65534, %r9d
 1854      FF0000
 1855 0443 89C8     		movl	%ecx, %eax
 1856 0445 7729     		ja	.L181
 1857 0447 31C0     		xorl	%eax, %eax
1901:fltk-1.3.4-1/png/pngread.c ****                      green = (green * alpha + 32767U)/65535U;
 1858              		.loc 1 1901 0
 1859 0449 4585C9   		testl	%r9d, %r9d
 1860 044c 7422     		je	.L181
1902:fltk-1.3.4-1/png/pngread.c **** 
 1861              		.loc 1 1902 0
 1862 044e 410FAFC9 		imull	%r9d, %ecx
 1863              	.LVL245:
 1864 0452 8D81FF7F 		leal	32767(%rcx), %eax
 1864      0000
 1865 0458 4889C1   		movq	%rax, %rcx
 1866              	.LVL246:
 1867 045b 4889C2   		movq	%rax, %rdx
 1868              	.LVL247:
 1869 045e 48C1E10F 		salq	$15, %rcx
 1870 0462 48C1E21F 		salq	$31, %rdx
 1871 0466 4801CA   		addq	%rcx, %rdx
 1872 0469 4801D0   		addq	%rdx, %rax
 1873 046c 48C1E82F 		shrq	$47, %rax
 1874              	.L181:
1907:fltk-1.3.4-1/png/pngread.c ****                break;
 1875              		.loc 1 1907 0
 1876 0470 450FB6DB 		movzbl	%r11b, %r11d
 1877 0474 66428904 		movw	%ax, (%rbx,%r11,2)
 1877      5B
 1878              	.LBE139:
 1879              	.LBE143:
 1880              		.loc 1 1949 0
 1881 0479 4883C418 		addq	$24, %rsp
 1882              		.cfi_remember_state
 1883              		.cfi_def_cfa_offset 56
 1884 047d 5B       		popq	%rbx
 1885              		.cfi_def_cfa_offset 48
 1886              	.LVL248:
 1887 047e 5D       		popq	%rbp
 1888              		.cfi_def_cfa_offset 40
 1889              	.LVL249:
 1890 047f 415C     		popq	%r12
 1891              		.cfi_def_cfa_offset 32
 1892              	.LVL250:
 1893 0481 415D     		popq	%r13
 1894              		.cfi_def_cfa_offset 24
 1895              	.LVL251:
 1896 0483 415E     		popq	%r14
 1897              		.cfi_def_cfa_offset 16
 1898              	.LVL252:
 1899 0485 415F     		popq	%r15
 1900              		.cfi_def_cfa_offset 8
 1901              	.LVL253:
 1902 0487 C3       		ret
 1903              	.LVL254:
 1904 0488 0F1F8400 		.p2align 4,,10
 1904      00000000 
 1905              		.p2align 3
 1906              	.L174:
 1907              		.cfi_restore_state
 1908              	.LBB144:
 1909              	.LBB140:
1873:fltk-1.3.4-1/png/pngread.c ****                /* FALL THROUGH */
 1910              		.loc 1 1873 0
 1911 0490 83F821   		cmpl	$33, %eax
 1912 0493 BE060000 		movl	$6, %esi
 1912      00
 1913 0498 B8000000 		movl	$0, %eax
 1913      00
 1914 049d 480F45C6 		cmovne	%rsi, %rax
 1915 04a1 6644890C 		movw	%r9w, (%rbx,%rax)
 1915      03
 1916              	.L173:
1877:fltk-1.3.4-1/png/pngread.c ****                {
 1917              		.loc 1 1877 0
 1918 04a6 4181F9FE 		cmpl	$65534, %r9d
 1918      FF0000
 1919 04ad 7771     		ja	.L178
1879:fltk-1.3.4-1/png/pngread.c ****                   {
 1920              		.loc 1 1879 0
 1921 04af 4585C9   		testl	%r9d, %r9d
 1922 04b2 0F84D800 		je	.L194
 1922      0000
1881:fltk-1.3.4-1/png/pngread.c ****                      green = (green * alpha + 32767U)/65535U;
 1923              		.loc 1 1881 0
 1924 04b8 450FAFC1 		imull	%r9d, %r8d
 1925              	.LVL255:
1882:fltk-1.3.4-1/png/pngread.c ****                      red = (red * alpha + 32767U)/65535U;
 1926              		.loc 1 1882 0
 1927 04bc 410FAFC9 		imull	%r9d, %ecx
 1928              	.LVL256:
 1929 04c0 418DB0FF 		leal	32767(%r8), %esi
 1929      7F0000
1883:fltk-1.3.4-1/png/pngread.c ****                   }
 1930              		.loc 1 1883 0
 1931 04c7 410FAFD1 		imull	%r9d, %edx
 1932              	.LVL257:
 1933 04cb 4889F0   		movq	%rsi, %rax
 1934 04ce 4989F0   		movq	%rsi, %r8
 1935              	.LVL258:
 1936 04d1 48C1E00F 		salq	$15, %rax
 1937 04d5 49C1E01F 		salq	$31, %r8
 1938 04d9 4901C0   		addq	%rax, %r8
 1939 04dc 4901F0   		addq	%rsi, %r8
 1940 04df 8DB1FF7F 		leal	32767(%rcx), %esi
 1940      0000
 1941 04e5 49C1E82F 		shrq	$47, %r8
 1942 04e9 4889F0   		movq	%rsi, %rax
 1943 04ec 4989F2   		movq	%rsi, %r10
 1944 04ef 48C1E00F 		salq	$15, %rax
 1945 04f3 49C1E21F 		salq	$31, %r10
 1946 04f7 4901C2   		addq	%rax, %r10
 1947 04fa 8D82FF7F 		leal	32767(%rdx), %eax
 1947      0000
 1948 0500 498D0C32 		leaq	(%r10,%rsi), %rcx
 1949              	.LVL259:
 1950 0504 4889C2   		movq	%rax, %rdx
 1951              	.LVL260:
 1952 0507 4889C6   		movq	%rax, %rsi
 1953 050a 48C1E60F 		salq	$15, %rsi
 1954 050e 48C1E21F 		salq	$31, %rdx
 1955 0512 48C1E92F 		shrq	$47, %rcx
 1956 0516 4801F2   		addq	%rsi, %rdx
 1957 0519 4801C2   		addq	%rax, %rdx
 1958 051c 48C1EA2F 		shrq	$47, %rdx
 1959              	.L178:
1889:fltk-1.3.4-1/png/pngread.c ****                entry[afirst + 1] = (png_uint_16)green;
 1960              		.loc 1 1889 0
 1961 0520 4489E6   		movl	%r12d, %esi
1890:fltk-1.3.4-1/png/pngread.c ****                entry[afirst + bgr] = (png_uint_16)red;
 1962              		.loc 1 1890 0
 1963 0523 450FB6DB 		movzbl	%r11b, %r11d
1891:fltk-1.3.4-1/png/pngread.c ****                break;
 1964              		.loc 1 1891 0
 1965 0527 4501F4   		addl	%r14d, %r12d
 1966              	.LVL261:
1889:fltk-1.3.4-1/png/pngread.c ****                entry[afirst + 1] = (png_uint_16)green;
 1967              		.loc 1 1889 0
 1968 052a 83F602   		xorl	$2, %esi
 1969              	.LVL262:
1891:fltk-1.3.4-1/png/pngread.c ****                break;
 1970              		.loc 1 1891 0
 1971 052d 4D63E4   		movslq	%r12d, %r12
1890:fltk-1.3.4-1/png/pngread.c ****                entry[afirst + bgr] = (png_uint_16)red;
 1972              		.loc 1 1890 0
 1973 0530 4983C301 		addq	$1, %r11
1889:fltk-1.3.4-1/png/pngread.c ****                entry[afirst + 1] = (png_uint_16)green;
 1974              		.loc 1 1889 0
 1975 0534 4401F6   		addl	%r14d, %esi
 1976              	.LVL263:
 1977 0537 4863F6   		movslq	%esi, %rsi
 1978 053a 66448904 		movw	%r8w, (%rbx,%rsi,2)
 1978      73
1890:fltk-1.3.4-1/png/pngread.c ****                entry[afirst + bgr] = (png_uint_16)red;
 1979              		.loc 1 1890 0
 1980 053f 6642890C 		movw	%cx, (%rbx,%r11,2)
 1980      5B
1891:fltk-1.3.4-1/png/pngread.c ****                break;
 1981              		.loc 1 1891 0
 1982 0544 66428914 		movw	%dx, (%rbx,%r12,2)
 1982      63
 1983              	.LBE140:
 1984              	.LBE144:
 1985              		.loc 1 1949 0
 1986 0549 4883C418 		addq	$24, %rsp
 1987              		.cfi_remember_state
 1988              		.cfi_def_cfa_offset 56
 1989 054d 5B       		popq	%rbx
 1990              		.cfi_def_cfa_offset 48
 1991              	.LVL264:
 1992 054e 5D       		popq	%rbp
 1993              		.cfi_def_cfa_offset 40
 1994              	.LVL265:
 1995 054f 415C     		popq	%r12
 1996              		.cfi_def_cfa_offset 32
 1997 0551 415D     		popq	%r13
 1998              		.cfi_def_cfa_offset 24
 1999              	.LVL266:
 2000 0553 415E     		popq	%r14
 2001              		.cfi_def_cfa_offset 16
 2002              	.LVL267:
 2003 0555 415F     		popq	%r15
 2004              		.cfi_def_cfa_offset 8
 2005              	.LVL268:
 2006 0557 C3       		ret
 2007              	.LVL269:
 2008 0558 0F1F8400 		.p2align 4,,10
 2008      00000000 
 2009              		.p2align 3
 2010              	.L198:
 2011              		.cfi_restore_state
1805:fltk-1.3.4-1/png/pngread.c ****       encoding = P_LINEAR;
 2012              		.loc 1 1805 0
 2013 0560 4489C8   		movl	%r9d, %eax
 2014              	.LVL270:
1802:fltk-1.3.4-1/png/pngread.c ****       green = png_sRGB_table[green];
 2015              		.loc 1 1802 0
 2016 0563 89D2     		movl	%edx, %edx
1803:fltk-1.3.4-1/png/pngread.c ****       blue = png_sRGB_table[blue];
 2017              		.loc 1 1803 0
 2018 0565 89C9     		movl	%ecx, %ecx
1804:fltk-1.3.4-1/png/pngread.c ****       alpha *= 257;
 2019              		.loc 1 1804 0
 2020 0567 4589C0   		movl	%r8d, %r8d
1805:fltk-1.3.4-1/png/pngread.c ****       encoding = P_LINEAR;
 2021              		.loc 1 1805 0
 2022 056a C1E008   		sall	$8, %eax
1802:fltk-1.3.4-1/png/pngread.c ****       green = png_sRGB_table[green];
 2023              		.loc 1 1802 0
 2024 056d 0FB79412 		movzwl	png_sRGB_table(%rdx,%rdx), %edx
 2024      00000000 
 2025              	.LVL271:
1803:fltk-1.3.4-1/png/pngread.c ****       blue = png_sRGB_table[blue];
 2026              		.loc 1 1803 0
 2027 0575 0FB78C09 		movzwl	png_sRGB_table(%rcx,%rcx), %ecx
 2027      00000000 
 2028              	.LVL272:
1804:fltk-1.3.4-1/png/pngread.c ****       alpha *= 257;
 2029              		.loc 1 1804 0
 2030 057d 470FB784 		movzwl	png_sRGB_table(%r8,%r8), %r8d
 2030      00000000 
 2030      00
 2031              	.LVL273:
1805:fltk-1.3.4-1/png/pngread.c ****       encoding = P_LINEAR;
 2032              		.loc 1 1805 0
 2033 0586 4101C1   		addl	%eax, %r9d
 2034              	.LVL274:
 2035 0589 E942FCFF 		jmp	.L187
 2035      FF
 2036              	.LVL275:
 2037 058e 6690     		.p2align 4,,10
 2038              		.p2align 3
 2039              	.L194:
 2040              	.LBB145:
 2041              	.LBB141:
 2042 0590 31D2     		xorl	%edx, %edx
 2043              	.LVL276:
 2044 0592 31C9     		xorl	%ecx, %ecx
 2045              	.LVL277:
 2046 0594 4531C0   		xorl	%r8d, %r8d
 2047              	.LVL278:
 2048 0597 EB87     		jmp	.L178
 2049              	.LVL279:
 2050 0599 0F1F8000 		.p2align 4,,10
 2050      000000
 2051              		.p2align 3
 2052              	.L219:
 2053              	.LBE141:
 2054              	.LBE145:
 2055              	.LBB146:
1819:fltk-1.3.4-1/png/pngread.c **** 
 2056              		.loc 1 1819 0
 2057 05a0 81C10040 		addl	$16384, %ecx
 2057      0000
 2058              	.LVL280:
 2059 05a6 C1E90F   		shrl	$15, %ecx
 2060              	.LVL281:
 2061 05a9 4189C8   		movl	%ecx, %r8d
 2062 05ac 89CA     		movl	%ecx, %edx
 2063 05ae E9AAFCFF 		jmp	.L188
 2063      FF
 2064              	.LVL282:
 2065              	.L214:
 2066              	.LBE146:
1745:fltk-1.3.4-1/png/pngread.c **** 
 2067              		.loc 1 1745 0
 2068 05b3 498B07   		movq	(%r15), %rax
 2069 05b6 BE000000 		movl	$.LC13, %esi
 2069      00
 2070 05bb 488B38   		movq	(%rax), %rdi
 2071 05be E8000000 		call	png_error
 2071      00
 2072              	.LVL283:
 2073              		.cfi_endproc
 2074              	.LFE82:
 2076              		.section	.text.unlikely.png_create_colormap_entry
 2077              	.LCOLDE15:
 2078              		.section	.text.png_create_colormap_entry
 2079              	.LHOTE15:
 2080              		.section	.text.unlikely.make_ga_colormap,"ax",@progbits
 2081              	.LCOLDB16:
 2082              		.section	.text.make_ga_colormap,"ax",@progbits
 2083              	.LHOTB16:
 2084              		.p2align 4,,15
 2086              	make_ga_colormap:
 2087              	.LFB85:
1950:fltk-1.3.4-1/png/pngread.c **** 
1951:fltk-1.3.4-1/png/pngread.c **** static int
1952:fltk-1.3.4-1/png/pngread.c **** make_gray_file_colormap(png_image_read_control *display)
1953:fltk-1.3.4-1/png/pngread.c **** {
1954:fltk-1.3.4-1/png/pngread.c ****    unsigned int i;
1955:fltk-1.3.4-1/png/pngread.c **** 
1956:fltk-1.3.4-1/png/pngread.c ****    for (i=0; i<256; ++i)
1957:fltk-1.3.4-1/png/pngread.c ****       png_create_colormap_entry(display, i, i, i, i, 255, P_FILE);
1958:fltk-1.3.4-1/png/pngread.c **** 
1959:fltk-1.3.4-1/png/pngread.c ****    return i;
1960:fltk-1.3.4-1/png/pngread.c **** }
1961:fltk-1.3.4-1/png/pngread.c **** 
1962:fltk-1.3.4-1/png/pngread.c **** static int
1963:fltk-1.3.4-1/png/pngread.c **** make_gray_colormap(png_image_read_control *display)
1964:fltk-1.3.4-1/png/pngread.c **** {
1965:fltk-1.3.4-1/png/pngread.c ****    unsigned int i;
1966:fltk-1.3.4-1/png/pngread.c **** 
1967:fltk-1.3.4-1/png/pngread.c ****    for (i=0; i<256; ++i)
1968:fltk-1.3.4-1/png/pngread.c ****       png_create_colormap_entry(display, i, i, i, i, 255, P_sRGB);
1969:fltk-1.3.4-1/png/pngread.c **** 
1970:fltk-1.3.4-1/png/pngread.c ****    return i;
1971:fltk-1.3.4-1/png/pngread.c **** }
1972:fltk-1.3.4-1/png/pngread.c **** #define PNG_GRAY_COLORMAP_ENTRIES 256
1973:fltk-1.3.4-1/png/pngread.c **** 
1974:fltk-1.3.4-1/png/pngread.c **** static int
1975:fltk-1.3.4-1/png/pngread.c **** make_ga_colormap(png_image_read_control *display)
1976:fltk-1.3.4-1/png/pngread.c **** {
 2088              		.loc 1 1976 0
 2089              		.cfi_startproc
 2090              	.LVL284:
 2091 0000 4156     		pushq	%r14
 2092              		.cfi_def_cfa_offset 16
 2093              		.cfi_offset 14, -16
1977:fltk-1.3.4-1/png/pngread.c ****    unsigned int i, a;
1978:fltk-1.3.4-1/png/pngread.c **** 
1979:fltk-1.3.4-1/png/pngread.c ****    /* Alpha is retained, the output will be a color-map with entries
1980:fltk-1.3.4-1/png/pngread.c ****     * selected by six levels of alpha.  One transparent entry, 6 gray
1981:fltk-1.3.4-1/png/pngread.c ****     * levels for all the intermediate alpha values, leaving 230 entries
1982:fltk-1.3.4-1/png/pngread.c ****     * for the opaque grays.  The color-map entries are the six values
1983:fltk-1.3.4-1/png/pngread.c ****     * [0..5]*51, the GA processing uses PNG_DIV51(value) to find the
1984:fltk-1.3.4-1/png/pngread.c ****     * relevant entry.
1985:fltk-1.3.4-1/png/pngread.c ****     *
1986:fltk-1.3.4-1/png/pngread.c ****     * if (alpha > 229) // opaque
1987:fltk-1.3.4-1/png/pngread.c ****     * {
1988:fltk-1.3.4-1/png/pngread.c ****     *    // The 231 entries are selected to make the math below work:
1989:fltk-1.3.4-1/png/pngread.c ****     *    base = 0;
1990:fltk-1.3.4-1/png/pngread.c ****     *    entry = (231 * gray + 128) >> 8;
1991:fltk-1.3.4-1/png/pngread.c ****     * }
1992:fltk-1.3.4-1/png/pngread.c ****     * else if (alpha < 26) // transparent
1993:fltk-1.3.4-1/png/pngread.c ****     * {
1994:fltk-1.3.4-1/png/pngread.c ****     *    base = 231;
1995:fltk-1.3.4-1/png/pngread.c ****     *    entry = 0;
1996:fltk-1.3.4-1/png/pngread.c ****     * }
1997:fltk-1.3.4-1/png/pngread.c ****     * else // partially opaque
1998:fltk-1.3.4-1/png/pngread.c ****     * {
1999:fltk-1.3.4-1/png/pngread.c ****     *    base = 226 + 6 * PNG_DIV51(alpha);
2000:fltk-1.3.4-1/png/pngread.c ****     *    entry = PNG_DIV51(gray);
2001:fltk-1.3.4-1/png/pngread.c ****     * }
2002:fltk-1.3.4-1/png/pngread.c ****     */
2003:fltk-1.3.4-1/png/pngread.c ****    i = 0;
 2094              		.loc 1 2003 0
 2095 0002 31F6     		xorl	%esi, %esi
1976:fltk-1.3.4-1/png/pngread.c ****    unsigned int i, a;
 2096              		.loc 1 1976 0
 2097 0004 4155     		pushq	%r13
 2098              		.cfi_def_cfa_offset 24
 2099              		.cfi_offset 13, -24
 2100 0006 4154     		pushq	%r12
 2101              		.cfi_def_cfa_offset 32
 2102              		.cfi_offset 12, -32
 2103 0008 41BC7300 		movl	$115, %r12d
 2103      0000
 2104 000e 55       		pushq	%rbp
 2105              		.cfi_def_cfa_offset 40
 2106              		.cfi_offset 6, -40
 2107              	.LBB147:
2004:fltk-1.3.4-1/png/pngread.c ****    while (i < 231)
2005:fltk-1.3.4-1/png/pngread.c ****    {
2006:fltk-1.3.4-1/png/pngread.c ****       unsigned int gray = (i * 256 + 115) / 231;
 2108              		.loc 1 2006 0
 2109 000f BD05A4B4 		movl	$464823301, %ebp
 2109      1B
 2110              	.LBE147:
1976:fltk-1.3.4-1/png/pngread.c ****    unsigned int i, a;
 2111              		.loc 1 1976 0
 2112 0014 53       		pushq	%rbx
 2113              		.cfi_def_cfa_offset 48
 2114              		.cfi_offset 3, -48
1976:fltk-1.3.4-1/png/pngread.c ****    unsigned int i, a;
 2115              		.loc 1 1976 0
 2116 0015 4889FB   		movq	%rdi, %rbx
 2117              	.LVL285:
 2118 0018 0F1F8400 		.p2align 4,,10
 2118      00000000 
 2119              		.p2align 3
 2120              	.L222:
 2121              	.LBB148:
 2122              		.loc 1 2006 0
 2123 0020 4489E0   		movl	%r12d, %eax
2007:fltk-1.3.4-1/png/pngread.c ****       png_create_colormap_entry(display, i++, gray, gray, gray, 255, P_sRGB);
 2124              		.loc 1 2007 0
 2125 0023 4883EC08 		subq	$8, %rsp
 2126              		.cfi_def_cfa_offset 56
 2127 0027 448D6E01 		leal	1(%rsi), %r13d
2006:fltk-1.3.4-1/png/pngread.c ****       png_create_colormap_entry(display, i++, gray, gray, gray, 255, P_sRGB);
 2128              		.loc 1 2006 0
 2129 002b F7E5     		mull	%ebp
 2130 002d 4489E0   		movl	%r12d, %eax
 2131              		.loc 1 2007 0
 2132 0030 6A01     		pushq	$1
 2133              		.cfi_def_cfa_offset 64
 2134 0032 4889DF   		movq	%rbx, %rdi
 2135 0035 41B9FF00 		movl	$255, %r9d
 2135      0000
 2136 003b 4181C400 		addl	$256, %r12d
 2136      010000
2006:fltk-1.3.4-1/png/pngread.c ****       png_create_colormap_entry(display, i++, gray, gray, gray, 255, P_sRGB);
 2137              		.loc 1 2006 0
 2138 0042 29D0     		subl	%edx, %eax
 2139 0044 D1E8     		shrl	%eax
 2140 0046 01C2     		addl	%eax, %edx
 2141 0048 C1EA07   		shrl	$7, %edx
 2142              	.LVL286:
 2143              		.loc 1 2007 0
 2144 004b 4189D0   		movl	%edx, %r8d
 2145 004e 89D1     		movl	%edx, %ecx
 2146 0050 E8000000 		call	png_create_colormap_entry
 2146      00
 2147              	.LVL287:
 2148              	.LBE148:
2004:fltk-1.3.4-1/png/pngread.c ****    while (i < 231)
 2149              		.loc 1 2004 0
 2150 0055 4181FDE7 		cmpl	$231, %r13d
 2150      000000
 2151 005c 4489EE   		movl	%r13d, %esi
 2152 005f 5F       		popq	%rdi
 2153              		.cfi_def_cfa_offset 56
 2154 0060 4158     		popq	%r8
 2155              		.cfi_def_cfa_offset 48
 2156 0062 75BC     		jne	.L222
 2157              	.LVL288:
2008:fltk-1.3.4-1/png/pngread.c ****    }
2009:fltk-1.3.4-1/png/pngread.c **** 
2010:fltk-1.3.4-1/png/pngread.c ****    /* 255 is used here for the component values for consistency with the code
2011:fltk-1.3.4-1/png/pngread.c ****     * that undoes premultiplication in pngwrite.c.
2012:fltk-1.3.4-1/png/pngread.c ****     */
2013:fltk-1.3.4-1/png/pngread.c ****    png_create_colormap_entry(display, i++, 255, 255, 255, 0, P_sRGB);
 2158              		.loc 1 2013 0
 2159 0064 4883EC08 		subq	$8, %rsp
 2160              		.cfi_def_cfa_offset 56
 2161 0068 B9FF0000 		movl	$255, %ecx
 2161      00
 2162 006d 4531C9   		xorl	%r9d, %r9d
 2163 0070 6A01     		pushq	$1
 2164              		.cfi_def_cfa_offset 64
 2165 0072 41B8FF00 		movl	$255, %r8d
 2165      0000
 2166 0078 BAFF0000 		movl	$255, %edx
 2166      00
 2167 007d 4889DF   		movq	%rbx, %rdi
 2168 0080 41BD3300 		movl	$51, %r13d
 2168      0000
 2169 0086 41BEE800 		movl	$232, %r14d
 2169      0000
 2170 008c E8000000 		call	png_create_colormap_entry
 2170      00
 2171              	.LVL289:
 2172 0091 59       		popq	%rcx
 2173              		.cfi_def_cfa_offset 56
 2174 0092 5E       		popq	%rsi
 2175              		.cfi_def_cfa_offset 48
 2176              	.LVL290:
 2177              	.L223:
2003:fltk-1.3.4-1/png/pngread.c ****    while (i < 231)
 2178              		.loc 1 2003 0
 2179 0093 4489F6   		movl	%r14d, %esi
 2180 0096 31ED     		xorl	%ebp, %ebp
 2181              	.LVL291:
 2182 0098 0F1F8400 		.p2align 4,,10
 2182      00000000 
 2183              		.p2align 3
 2184              	.L224:
 2185              	.LBB149:
2014:fltk-1.3.4-1/png/pngread.c **** 
2015:fltk-1.3.4-1/png/pngread.c ****    for (a=1; a<5; ++a)
2016:fltk-1.3.4-1/png/pngread.c ****    {
2017:fltk-1.3.4-1/png/pngread.c ****       unsigned int g;
2018:fltk-1.3.4-1/png/pngread.c **** 
2019:fltk-1.3.4-1/png/pngread.c ****       for (g=0; g<6; ++g)
2020:fltk-1.3.4-1/png/pngread.c ****          png_create_colormap_entry(display, i++, g*51, g*51, g*51, a*51,
 2186              		.loc 1 2020 0 discriminator 3
 2187 00a0 4883EC08 		subq	$8, %rsp
 2188              		.cfi_def_cfa_offset 56
 2189 00a4 89EA     		movl	%ebp, %edx
 2190 00a6 448D6601 		leal	1(%rsi), %r12d
 2191              	.LVL292:
 2192 00aa 6A01     		pushq	$1
 2193              		.cfi_def_cfa_offset 64
 2194 00ac 4189E8   		movl	%ebp, %r8d
 2195 00af 89E9     		movl	%ebp, %ecx
 2196 00b1 4589E9   		movl	%r13d, %r9d
 2197 00b4 4889DF   		movq	%rbx, %rdi
 2198 00b7 83C533   		addl	$51, %ebp
 2199 00ba E8000000 		call	png_create_colormap_entry
 2199      00
 2200              	.LVL293:
2019:fltk-1.3.4-1/png/pngread.c ****          png_create_colormap_entry(display, i++, g*51, g*51, g*51, a*51,
 2201              		.loc 1 2019 0 discriminator 3
 2202 00bf 81FD3201 		cmpl	$306, %ebp
 2202      0000
 2203              		.loc 1 2020 0 discriminator 3
 2204 00c5 4489E6   		movl	%r12d, %esi
2019:fltk-1.3.4-1/png/pngread.c ****          png_create_colormap_entry(display, i++, g*51, g*51, g*51, a*51,
 2205              		.loc 1 2019 0 discriminator 3
 2206 00c8 58       		popq	%rax
 2207              		.cfi_def_cfa_offset 56
 2208 00c9 5A       		popq	%rdx
 2209              		.cfi_def_cfa_offset 48
 2210 00ca 75D4     		jne	.L224
 2211 00cc 4183C606 		addl	$6, %r14d
 2212              	.LVL294:
 2213 00d0 4183C533 		addl	$51, %r13d
 2214              	.LBE149:
2015:fltk-1.3.4-1/png/pngread.c ****    {
 2215              		.loc 1 2015 0 discriminator 2
 2216 00d4 4181FE00 		cmpl	$256, %r14d
 2216      010000
 2217 00db 75B6     		jne	.L223
2021:fltk-1.3.4-1/png/pngread.c ****             P_sRGB);
2022:fltk-1.3.4-1/png/pngread.c ****    }
2023:fltk-1.3.4-1/png/pngread.c **** 
2024:fltk-1.3.4-1/png/pngread.c ****    return i;
2025:fltk-1.3.4-1/png/pngread.c **** }
 2218              		.loc 1 2025 0
 2219 00dd 5B       		popq	%rbx
 2220              		.cfi_def_cfa_offset 40
 2221              	.LVL295:
 2222 00de B8000100 		movl	$256, %eax
 2222      00
 2223 00e3 5D       		popq	%rbp
 2224              		.cfi_def_cfa_offset 32
 2225 00e4 415C     		popq	%r12
 2226              		.cfi_def_cfa_offset 24
 2227              	.LVL296:
 2228 00e6 415D     		popq	%r13
 2229              		.cfi_def_cfa_offset 16
 2230 00e8 415E     		popq	%r14
 2231              		.cfi_def_cfa_offset 8
 2232              	.LVL297:
 2233 00ea C3       		ret
 2234              		.cfi_endproc
 2235              	.LFE85:
 2237              		.section	.text.unlikely.make_ga_colormap
 2238              	.LCOLDE16:
 2239              		.section	.text.make_ga_colormap
 2240              	.LHOTE16:
 2241              		.section	.text.unlikely.make_gray_colormap,"ax",@progbits
 2242              	.LCOLDB17:
 2243              		.section	.text.make_gray_colormap,"ax",@progbits
 2244              	.LHOTB17:
 2245              		.p2align 4,,15
 2247              	make_gray_colormap:
 2248              	.LFB84:
1964:fltk-1.3.4-1/png/pngread.c ****    unsigned int i;
 2249              		.loc 1 1964 0
 2250              		.cfi_startproc
 2251              	.LVL298:
 2252 0000 55       		pushq	%rbp
 2253              		.cfi_def_cfa_offset 16
 2254              		.cfi_offset 6, -16
 2255 0001 53       		pushq	%rbx
 2256              		.cfi_def_cfa_offset 24
 2257              		.cfi_offset 3, -24
 2258 0002 4889FD   		movq	%rdi, %rbp
1967:fltk-1.3.4-1/png/pngread.c ****       png_create_colormap_entry(display, i, i, i, i, 255, P_sRGB);
 2259              		.loc 1 1967 0
 2260 0005 31DB     		xorl	%ebx, %ebx
1964:fltk-1.3.4-1/png/pngread.c ****    unsigned int i;
 2261              		.loc 1 1964 0
 2262 0007 4883EC08 		subq	$8, %rsp
 2263              		.cfi_def_cfa_offset 32
 2264              	.LVL299:
 2265 000b 0F1F4400 		.p2align 4,,10
 2265      00
 2266              		.p2align 3
 2267              	.L230:
1968:fltk-1.3.4-1/png/pngread.c **** 
 2268              		.loc 1 1968 0 discriminator 3
 2269 0010 4883EC08 		subq	$8, %rsp
 2270              		.cfi_def_cfa_offset 40
 2271 0014 89DA     		movl	%ebx, %edx
 2272 0016 4189D8   		movl	%ebx, %r8d
 2273 0019 6A01     		pushq	$1
 2274              		.cfi_def_cfa_offset 48
 2275 001b 89D9     		movl	%ebx, %ecx
 2276 001d 89DE     		movl	%ebx, %esi
 2277 001f 41B9FF00 		movl	$255, %r9d
 2277      0000
 2278 0025 4889EF   		movq	%rbp, %rdi
1967:fltk-1.3.4-1/png/pngread.c ****       png_create_colormap_entry(display, i, i, i, i, 255, P_sRGB);
 2279              		.loc 1 1967 0 discriminator 3
 2280 0028 83C301   		addl	$1, %ebx
 2281              	.LVL300:
1968:fltk-1.3.4-1/png/pngread.c **** 
 2282              		.loc 1 1968 0 discriminator 3
 2283 002b E8000000 		call	png_create_colormap_entry
 2283      00
 2284              	.LVL301:
1967:fltk-1.3.4-1/png/pngread.c ****       png_create_colormap_entry(display, i, i, i, i, 255, P_sRGB);
 2285              		.loc 1 1967 0 discriminator 3
 2286 0030 81FB0001 		cmpl	$256, %ebx
 2286      0000
 2287 0036 58       		popq	%rax
 2288              		.cfi_def_cfa_offset 40
 2289 0037 5A       		popq	%rdx
 2290              		.cfi_def_cfa_offset 32
 2291 0038 75D6     		jne	.L230
1971:fltk-1.3.4-1/png/pngread.c **** #define PNG_GRAY_COLORMAP_ENTRIES 256
 2292              		.loc 1 1971 0
 2293 003a 4883C408 		addq	$8, %rsp
 2294              		.cfi_def_cfa_offset 24
 2295 003e B8000100 		movl	$256, %eax
 2295      00
 2296 0043 5B       		popq	%rbx
 2297              		.cfi_def_cfa_offset 16
 2298              	.LVL302:
 2299 0044 5D       		popq	%rbp
 2300              		.cfi_def_cfa_offset 8
 2301              	.LVL303:
 2302 0045 C3       		ret
 2303              		.cfi_endproc
 2304              	.LFE84:
 2306              		.section	.text.unlikely.make_gray_colormap
 2307              	.LCOLDE17:
 2308              		.section	.text.make_gray_colormap
 2309              	.LHOTE17:
 2310              		.section	.text.unlikely.make_rgb_colormap,"ax",@progbits
 2311              	.LCOLDB18:
 2312              		.section	.text.make_rgb_colormap,"ax",@progbits
 2313              	.LHOTB18:
 2314              		.p2align 4,,15
 2316              	make_rgb_colormap:
 2317              	.LFB86:
2026:fltk-1.3.4-1/png/pngread.c **** 
2027:fltk-1.3.4-1/png/pngread.c **** #define PNG_GA_COLORMAP_ENTRIES 256
2028:fltk-1.3.4-1/png/pngread.c **** 
2029:fltk-1.3.4-1/png/pngread.c **** static int
2030:fltk-1.3.4-1/png/pngread.c **** make_rgb_colormap(png_image_read_control *display)
2031:fltk-1.3.4-1/png/pngread.c **** {
 2318              		.loc 1 2031 0
 2319              		.cfi_startproc
 2320              	.LVL304:
 2321 0000 4157     		pushq	%r15
 2322              		.cfi_def_cfa_offset 16
 2323              		.cfi_offset 15, -16
 2324 0002 4156     		pushq	%r14
 2325              		.cfi_def_cfa_offset 24
 2326              		.cfi_offset 14, -24
 2327 0004 4155     		pushq	%r13
 2328              		.cfi_def_cfa_offset 32
 2329              		.cfi_offset 13, -32
 2330 0006 4154     		pushq	%r12
 2331              		.cfi_def_cfa_offset 40
 2332              		.cfi_offset 12, -40
 2333 0008 4989FD   		movq	%rdi, %r13
 2334 000b 55       		pushq	%rbp
 2335              		.cfi_def_cfa_offset 48
 2336              		.cfi_offset 6, -48
 2337 000c 53       		pushq	%rbx
 2338              		.cfi_def_cfa_offset 56
 2339              		.cfi_offset 3, -56
 2340 000d 4531E4   		xorl	%r12d, %r12d
 2341 0010 4883EC18 		subq	$24, %rsp
 2342              		.cfi_def_cfa_offset 80
2032:fltk-1.3.4-1/png/pngread.c ****    unsigned int i, r;
2033:fltk-1.3.4-1/png/pngread.c **** 
2034:fltk-1.3.4-1/png/pngread.c ****    /* Build a 6x6x6 opaque RGB cube */
2035:fltk-1.3.4-1/png/pngread.c ****    for (i=r=0; r<6; ++r)
 2343              		.loc 1 2035 0
 2344 0014 C744240C 		movl	$0, 12(%rsp)
 2344      00000000 
 2345              	.LVL305:
 2346 001c 0F1F4000 		.p2align 4,,10
 2347              		.p2align 3
 2348              	.L234:
2031:fltk-1.3.4-1/png/pngread.c ****    unsigned int i, r;
 2349              		.loc 1 2031 0
 2350 0020 448B7424 		movl	12(%rsp), %r14d
 2350      0C
 2351 0025 31ED     		xorl	%ebp, %ebp
 2352              	.LVL306:
 2353 0027 660F1F84 		.p2align 4,,10
 2353      00000000 
 2353      00
 2354              		.p2align 3
 2355              	.L238:
 2356 0030 4489F6   		movl	%r14d, %esi
 2357 0033 4531FF   		xorl	%r15d, %r15d
 2358              	.LVL307:
 2359 0036 662E0F1F 		.p2align 4,,10
 2359      84000000 
 2359      0000
 2360              		.p2align 3
 2361              	.L235:
 2362              	.LBB150:
 2363              	.LBB151:
2036:fltk-1.3.4-1/png/pngread.c ****    {
2037:fltk-1.3.4-1/png/pngread.c ****       unsigned int g;
2038:fltk-1.3.4-1/png/pngread.c **** 
2039:fltk-1.3.4-1/png/pngread.c ****       for (g=0; g<6; ++g)
2040:fltk-1.3.4-1/png/pngread.c ****       {
2041:fltk-1.3.4-1/png/pngread.c ****          unsigned int b;
2042:fltk-1.3.4-1/png/pngread.c **** 
2043:fltk-1.3.4-1/png/pngread.c ****          for (b=0; b<6; ++b)
2044:fltk-1.3.4-1/png/pngread.c ****             png_create_colormap_entry(display, i++, r*51, g*51, b*51, 255,
 2364              		.loc 1 2044 0 discriminator 3
 2365 0040 4883EC08 		subq	$8, %rsp
 2366              		.cfi_def_cfa_offset 88
 2367 0044 8D5E01   		leal	1(%rsi), %ebx
 2368              	.LVL308:
 2369 0047 4589F8   		movl	%r15d, %r8d
 2370 004a 6A01     		pushq	$1
 2371              		.cfi_def_cfa_offset 96
 2372 004c 4489E2   		movl	%r12d, %edx
 2373 004f 41B9FF00 		movl	$255, %r9d
 2373      0000
 2374 0055 89E9     		movl	%ebp, %ecx
 2375 0057 4C89EF   		movq	%r13, %rdi
 2376 005a 4183C733 		addl	$51, %r15d
 2377 005e E8000000 		call	png_create_colormap_entry
 2377      00
 2378              	.LVL309:
2043:fltk-1.3.4-1/png/pngread.c ****             png_create_colormap_entry(display, i++, r*51, g*51, b*51, 255,
 2379              		.loc 1 2043 0 discriminator 3
 2380 0063 4181FF32 		cmpl	$306, %r15d
 2380      010000
 2381              		.loc 1 2044 0 discriminator 3
 2382 006a 89DE     		movl	%ebx, %esi
2043:fltk-1.3.4-1/png/pngread.c ****             png_create_colormap_entry(display, i++, r*51, g*51, b*51, 255,
 2383              		.loc 1 2043 0 discriminator 3
 2384 006c 58       		popq	%rax
 2385              		.cfi_def_cfa_offset 88
 2386 006d 5A       		popq	%rdx
 2387              		.cfi_def_cfa_offset 80
 2388 006e 75D0     		jne	.L235
 2389 0070 83C533   		addl	$51, %ebp
 2390 0073 4183C606 		addl	$6, %r14d
 2391              	.LVL310:
 2392              	.LBE151:
2039:fltk-1.3.4-1/png/pngread.c ****       {
 2393              		.loc 1 2039 0 discriminator 2
 2394 0077 81FD3201 		cmpl	$306, %ebp
 2394      0000
 2395 007d 75B1     		jne	.L238
 2396 007f 8344240C 		addl	$36, 12(%rsp)
 2396      24
 2397 0084 4183C433 		addl	$51, %r12d
 2398 0088 8B44240C 		movl	12(%rsp), %eax
 2399              	.LVL311:
 2400              	.LBE150:
2035:fltk-1.3.4-1/png/pngread.c ****    {
 2401              		.loc 1 2035 0 discriminator 2
 2402 008c 3DD80000 		cmpl	$216, %eax
 2402      00
 2403 0091 758D     		jne	.L234
2045:fltk-1.3.4-1/png/pngread.c ****                P_sRGB);
2046:fltk-1.3.4-1/png/pngread.c ****       }
2047:fltk-1.3.4-1/png/pngread.c ****    }
2048:fltk-1.3.4-1/png/pngread.c **** 
2049:fltk-1.3.4-1/png/pngread.c ****    return i;
2050:fltk-1.3.4-1/png/pngread.c **** }
 2404              		.loc 1 2050 0
 2405 0093 4883C418 		addq	$24, %rsp
 2406              		.cfi_def_cfa_offset 56
 2407 0097 B8D80000 		movl	$216, %eax
 2407      00
 2408              	.LVL312:
 2409 009c 5B       		popq	%rbx
 2410              		.cfi_def_cfa_offset 48
 2411              	.LVL313:
 2412 009d 5D       		popq	%rbp
 2413              		.cfi_def_cfa_offset 40
 2414 009e 415C     		popq	%r12
 2415              		.cfi_def_cfa_offset 32
 2416 00a0 415D     		popq	%r13
 2417              		.cfi_def_cfa_offset 24
 2418              	.LVL314:
 2419 00a2 415E     		popq	%r14
 2420              		.cfi_def_cfa_offset 16
 2421              	.LVL315:
 2422 00a4 415F     		popq	%r15
 2423              		.cfi_def_cfa_offset 8
 2424 00a6 C3       		ret
 2425              		.cfi_endproc
 2426              	.LFE86:
 2428              		.section	.text.unlikely.make_rgb_colormap
 2429              	.LCOLDE18:
 2430              		.section	.text.make_rgb_colormap
 2431              	.LHOTE18:
 2432              		.section	.rodata.str1.8
 2433 0025 000000   		.align 8
 2434              	.LC19:
 2435 0028 61206261 		.string	"a background color must be supplied to remove alpha/transparency"
 2435      636B6772 
 2435      6F756E64 
 2435      20636F6C 
 2435      6F72206D 
 2436 0069 00000000 		.align 8
 2436      000000
 2437              	.LC20:
 2438 0070 67726179 		.string	"gray[8] color-map: too few entries"
 2438      5B385D20 
 2438      636F6C6F 
 2438      722D6D61 
 2438      703A2074 
 2439 0093 00000000 		.align 8
 2439      00
 2440              	.LC21:
 2441 0098 67726179 		.string	"gray[16] color-map: too few entries"
 2441      5B31365D 
 2441      20636F6C 
 2441      6F722D6D 
 2441      61703A20 
 2442 00bc 00000000 		.align 8
 2443              	.LC22:
 2444 00c0 67726179 		.string	"gray+alpha color-map: too few entries"
 2444      2B616C70 
 2444      68612063 
 2444      6F6C6F72 
 2444      2D6D6170 
 2445 00e6 0000     		.align 8
 2446              	.LC23:
 2447 00e8 67726179 		.string	"gray-alpha color-map: too few entries"
 2447      2D616C70 
 2447      68612063 
 2447      6F6C6F72 
 2447      2D6D6170 
 2448 010e 0000     		.align 8
 2449              	.LC24:
 2450 0110 67612D61 		.string	"ga-alpha color-map: too few entries"
 2450      6C706861 
 2450      20636F6C 
 2450      6F722D6D 
 2450      61703A20 
 2451 0134 00000000 		.align 8
 2452              	.LC25:
 2453 0138 7267625B 		.string	"rgb[ga] color-map: too few entries"
 2453      67615D20 
 2453      636F6C6F 
 2453      722D6D61 
 2453      703A2074 
 2454 015b 00000000 		.align 8
 2454      00
 2455              	.LC26:
 2456 0160 7267625B 		.string	"rgb[gray] color-map: too few entries"
 2456      67726179 
 2456      5D20636F 
 2456      6C6F722D 
 2456      6D61703A 
 2457 0185 000000   		.align 8
 2458              	.LC27:
 2459 0188 7267622B 		.string	"rgb+alpha color-map: too few entries"
 2459      616C7068 
 2459      6120636F 
 2459      6C6F722D 
 2459      6D61703A 
 2460 01ad 000000   		.align 8
 2461              	.LC28:
 2462 01b0 7267622D 		.string	"rgb-alpha color-map: too few entries"
 2462      616C7068 
 2462      6120636F 
 2462      6C6F722D 
 2462      6D61703A 
 2463 01d5 000000   		.align 8
 2464              	.LC29:
 2465 01d8 72676220 		.string	"rgb color-map: too few entries"
 2465      636F6C6F 
 2465      722D6D61 
 2465      703A2074 
 2465      6F6F2066 
 2466 01f7 00       		.align 8
 2467              	.LC30:
 2468 01f8 70616C65 		.string	"palette color-map: too few entries"
 2468      74746520 
 2468      636F6C6F 
 2468      722D6D61 
 2468      703A2074 
 2469              		.section	.rodata.str1.1
 2470              	.LC31:
 2471 00ae 696E7661 		.string	"invalid PNG color type"
 2471      6C696420 
 2471      504E4720 
 2471      636F6C6F 
 2471      72207479 
 2472              		.section	.rodata.str1.8
 2473 021b 00000000 		.align 8
 2473      00
 2474              	.LC32:
 2475 0220 62616420 		.string	"bad data option (internal error)"
 2475      64617461 
 2475      206F7074 
 2475      696F6E20 
 2475      28696E74 
 2476 0241 00000000 		.align 8
 2476      000000
 2477              	.LC33:
 2478 0248 636F6C6F 		.string	"color map overflow (BAD internal error)"
 2478      72206D61 
 2478      70206F76 
 2478      6572666C 
 2478      6F772028 
 2479              		.align 8
 2480              	.LC34:
 2481 0270 62616420 		.string	"bad background index (internal error)"
 2481      6261636B 
 2481      67726F75 
 2481      6E642069 
 2481      6E646578 
 2482              		.section	.text.unlikely.png_image_read_colormap,"ax",@progbits
 2483              	.LCOLDB35:
 2484              		.section	.text.png_image_read_colormap,"ax",@progbits
 2485              	.LHOTB35:
 2486              		.p2align 4,,15
 2488              	png_image_read_colormap:
 2489              	.LFB87:
2051:fltk-1.3.4-1/png/pngread.c **** 
2052:fltk-1.3.4-1/png/pngread.c **** #define PNG_RGB_COLORMAP_ENTRIES 216
2053:fltk-1.3.4-1/png/pngread.c **** 
2054:fltk-1.3.4-1/png/pngread.c **** /* Return a palette index to the above palette given three 8-bit sRGB values. */
2055:fltk-1.3.4-1/png/pngread.c **** #define PNG_RGB_INDEX(r,g,b) \
2056:fltk-1.3.4-1/png/pngread.c ****    ((png_byte)(6 * (6 * PNG_DIV51(r) + PNG_DIV51(g)) + PNG_DIV51(b)))
2057:fltk-1.3.4-1/png/pngread.c **** 
2058:fltk-1.3.4-1/png/pngread.c **** static int
2059:fltk-1.3.4-1/png/pngread.c **** png_image_read_colormap(png_voidp argument)
2060:fltk-1.3.4-1/png/pngread.c **** {
 2490              		.loc 1 2060 0
 2491              		.cfi_startproc
 2492              	.LVL316:
 2493 0000 4157     		pushq	%r15
 2494              		.cfi_def_cfa_offset 16
 2495              		.cfi_offset 15, -16
 2496 0002 4156     		pushq	%r14
 2497              		.cfi_def_cfa_offset 24
 2498              		.cfi_offset 14, -24
 2499 0004 4155     		pushq	%r13
 2500              		.cfi_def_cfa_offset 32
 2501              		.cfi_offset 13, -32
 2502 0006 4154     		pushq	%r12
 2503              		.cfi_def_cfa_offset 40
 2504              		.cfi_offset 12, -40
 2505 0008 55       		pushq	%rbp
 2506              		.cfi_def_cfa_offset 48
 2507              		.cfi_offset 6, -48
 2508 0009 53       		pushq	%rbx
 2509              		.cfi_def_cfa_offset 56
 2510              		.cfi_offset 3, -56
 2511 000a 4889FB   		movq	%rdi, %rbx
 2512 000d 4883EC68 		subq	$104, %rsp
 2513              		.cfi_def_cfa_offset 160
 2514              		.loc 1 2060 0
 2515 0011 64488B04 		movq	%fs:40, %rax
 2515      25280000 
 2515      00
 2516 001a 48894424 		movq	%rax, 88(%rsp)
 2516      58
 2517 001f 31C0     		xorl	%eax, %eax
 2518              	.LVL317:
2061:fltk-1.3.4-1/png/pngread.c ****    png_image_read_control *display =
2062:fltk-1.3.4-1/png/pngread.c ****       png_voidcast(png_image_read_control*, argument);
2063:fltk-1.3.4-1/png/pngread.c ****    const png_imagep image = display->image;
 2519              		.loc 1 2063 0
 2520 0021 488B07   		movq	(%rdi), %rax
 2521 0024 4889C7   		movq	%rax, %rdi
 2522              	.LVL318:
 2523 0027 48894424 		movq	%rax, 40(%rsp)
 2523      28
 2524              	.LVL319:
2064:fltk-1.3.4-1/png/pngread.c **** 
2065:fltk-1.3.4-1/png/pngread.c ****    const png_structrp png_ptr = image->opaque->png_ptr;
 2525              		.loc 1 2065 0
 2526 002c 488B00   		movq	(%rax), %rax
 2527              	.LVL320:
2066:fltk-1.3.4-1/png/pngread.c ****    const png_uint_32 output_format = image->format;
 2528              		.loc 1 2066 0
 2529 002f 448B7F14 		movl	20(%rdi), %r15d
2065:fltk-1.3.4-1/png/pngread.c ****    const png_uint_32 output_format = image->format;
 2530              		.loc 1 2065 0
 2531 0033 488B00   		movq	(%rax), %rax
2067:fltk-1.3.4-1/png/pngread.c ****    const int output_encoding = (output_format & PNG_FORMAT_FLAG_LINEAR) != 0 ?
 2532              		.loc 1 2067 0
 2533 0036 4489FE   		movl	%r15d, %esi
 2534 0039 83E604   		andl	$4, %esi
2065:fltk-1.3.4-1/png/pngread.c ****    const png_uint_32 output_format = image->format;
 2535              		.loc 1 2065 0
 2536 003c 4889C1   		movq	%rax, %rcx
 2537 003f 48894424 		movq	%rax, 32(%rsp)
 2537      20
 2538              	.LVL321:
2068:fltk-1.3.4-1/png/pngread.c ****       P_LINEAR : P_sRGB;
2069:fltk-1.3.4-1/png/pngread.c **** 
2070:fltk-1.3.4-1/png/pngread.c ****    unsigned int cmap_entries;
2071:fltk-1.3.4-1/png/pngread.c ****    unsigned int output_processing;        /* Output processing option */
2072:fltk-1.3.4-1/png/pngread.c ****    unsigned int data_encoding = P_NOTSET; /* Encoding libpng must produce */
2073:fltk-1.3.4-1/png/pngread.c **** 
2074:fltk-1.3.4-1/png/pngread.c ****    /* Background information; the background color and the index of this color
2075:fltk-1.3.4-1/png/pngread.c ****     * in the color-map if it exists (else 256).
2076:fltk-1.3.4-1/png/pngread.c ****     */
2077:fltk-1.3.4-1/png/pngread.c ****    unsigned int background_index = 256;
2078:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 back_r, back_g, back_b;
2079:fltk-1.3.4-1/png/pngread.c **** 
2080:fltk-1.3.4-1/png/pngread.c ****    /* Flags to accumulate things that need to be done to the input. */
2081:fltk-1.3.4-1/png/pngread.c ****    int expand_tRNS = 0;
2082:fltk-1.3.4-1/png/pngread.c **** 
2083:fltk-1.3.4-1/png/pngread.c ****    /* Exclude the NYI feature of compositing onto a color-mapped buffer; it is
2084:fltk-1.3.4-1/png/pngread.c ****     * very difficult to do, the results look awful, and it is difficult to see
2085:fltk-1.3.4-1/png/pngread.c ****     * what possible use it is because the application can't control the
2086:fltk-1.3.4-1/png/pngread.c ****     * color-map.
2087:fltk-1.3.4-1/png/pngread.c ****     */
2088:fltk-1.3.4-1/png/pngread.c ****    if (((png_ptr->color_type & PNG_COLOR_MASK_ALPHA) != 0 ||
 2539              		.loc 1 2088 0
 2540 0044 0FB68077 		movzbl	631(%rax), %eax
 2540      020000
 2541              	.LVL322:
2068:fltk-1.3.4-1/png/pngread.c ****       P_LINEAR : P_sRGB;
 2542              		.loc 1 2068 0
 2543 004b 83FE01   		cmpl	$1, %esi
 2544 004e 19ED     		sbbl	%ebp, %ebp
 2545 0050 83C502   		addl	$2, %ebp
 2546              	.LVL323:
 2547              		.loc 1 2088 0
 2548 0053 A804     		testb	$4, %al
 2549 0055 0F858500 		jne	.L243
 2549      0000
 2550              		.loc 1 2088 0 is_stmt 0 discriminator 1
 2551 005b 6683B970 		cmpw	$0, 624(%rcx)
 2551      02000000 
 2552 0063 757B     		jne	.L243
 2553              	.L244:
2089:fltk-1.3.4-1/png/pngread.c ****          png_ptr->num_trans > 0) /* alpha in input */ &&
2090:fltk-1.3.4-1/png/pngread.c ****       ((output_format & PNG_FORMAT_FLAG_ALPHA) == 0) /* no alpha in output */)
2091:fltk-1.3.4-1/png/pngread.c ****    {
2092:fltk-1.3.4-1/png/pngread.c ****       if (output_encoding == P_LINEAR) /* compose on black */
2093:fltk-1.3.4-1/png/pngread.c ****          back_b = back_g = back_r = 0;
2094:fltk-1.3.4-1/png/pngread.c **** 
2095:fltk-1.3.4-1/png/pngread.c ****       else if (display->background == NULL /* no way to remove it */)
2096:fltk-1.3.4-1/png/pngread.c ****          png_error(png_ptr,
2097:fltk-1.3.4-1/png/pngread.c ****             "a background color must be supplied to remove alpha/transparency");
2098:fltk-1.3.4-1/png/pngread.c **** 
2099:fltk-1.3.4-1/png/pngread.c ****       /* Get a copy of the background color (this avoids repeating the checks
2100:fltk-1.3.4-1/png/pngread.c ****        * below.)  The encoding is 8-bit sRGB or 16-bit linear, depending on the
2101:fltk-1.3.4-1/png/pngread.c ****        * output format.
2102:fltk-1.3.4-1/png/pngread.c ****        */
2103:fltk-1.3.4-1/png/pngread.c ****       else
2104:fltk-1.3.4-1/png/pngread.c ****       {
2105:fltk-1.3.4-1/png/pngread.c ****          back_g = display->background->green;
2106:fltk-1.3.4-1/png/pngread.c ****          if ((output_format & PNG_FORMAT_FLAG_COLOR) != 0)
2107:fltk-1.3.4-1/png/pngread.c ****          {
2108:fltk-1.3.4-1/png/pngread.c ****             back_r = display->background->red;
2109:fltk-1.3.4-1/png/pngread.c ****             back_b = display->background->blue;
2110:fltk-1.3.4-1/png/pngread.c ****          }
2111:fltk-1.3.4-1/png/pngread.c ****          else
2112:fltk-1.3.4-1/png/pngread.c ****             back_b = back_r = back_g;
2113:fltk-1.3.4-1/png/pngread.c ****       }
2114:fltk-1.3.4-1/png/pngread.c ****    }
2115:fltk-1.3.4-1/png/pngread.c **** 
2116:fltk-1.3.4-1/png/pngread.c ****    else if (output_encoding == P_LINEAR)
2117:fltk-1.3.4-1/png/pngread.c ****       back_b = back_r = back_g = 65535;
 2554              		.loc 1 2117 0 is_stmt 1
 2555 0065 BAFFFF00 		movl	$65535, %edx
 2555      00
 2556 006a B9FF0000 		movl	$255, %ecx
 2556      00
 2557              	.LVL324:
 2558 006f 83FD02   		cmpl	$2, %ebp
 2559 0072 89D7     		movl	%edx, %edi
 2560              	.LVL325:
 2561 0074 0F45F9   		cmovne	%ecx, %edi
 2562 0077 897C241C 		movl	%edi, 28(%rsp)
 2563 007b 89D7     		movl	%edx, %edi
 2564 007d 0F45F9   		cmovne	%ecx, %edi
 2565 0080 897C240C 		movl	%edi, 12(%rsp)
 2566 0084 897C2418 		movl	%edi, 24(%rsp)
 2567              	.L245:
 2568              	.LVL326:
2118:fltk-1.3.4-1/png/pngread.c **** 
2119:fltk-1.3.4-1/png/pngread.c ****    else
2120:fltk-1.3.4-1/png/pngread.c ****       back_b = back_r = back_g = 255;
2121:fltk-1.3.4-1/png/pngread.c **** 
2122:fltk-1.3.4-1/png/pngread.c ****    /* Default the input file gamma if required - this is necessary because
2123:fltk-1.3.4-1/png/pngread.c ****     * libpng assumes that if no gamma information is present the data is in the
2124:fltk-1.3.4-1/png/pngread.c ****     * output format, but the simplified API deduces the gamma from the input
2125:fltk-1.3.4-1/png/pngread.c ****     * format.
2126:fltk-1.3.4-1/png/pngread.c ****     */
2127:fltk-1.3.4-1/png/pngread.c ****    if ((png_ptr->colorspace.flags & PNG_COLORSPACE_HAVE_GAMMA) == 0)
 2569              		.loc 1 2127 0
 2570 0088 488B7C24 		movq	32(%rsp), %rdi
 2570      20
 2571 008d 0FB79722 		movzwl	1314(%rdi), %edx
 2571      050000
 2572 0094 F6C201   		testb	$1, %dl
 2573 0097 752B     		jne	.L247
2128:fltk-1.3.4-1/png/pngread.c ****    {
2129:fltk-1.3.4-1/png/pngread.c ****       /* Do this directly, not using the png_colorspace functions, to ensure
2130:fltk-1.3.4-1/png/pngread.c ****        * that it happens even if the colorspace is invalid (though probably if
2131:fltk-1.3.4-1/png/pngread.c ****        * it is the setting will be ignored)  Note that the same thing can be
2132:fltk-1.3.4-1/png/pngread.c ****        * achieved at the application interface with png_set_gAMA.
2133:fltk-1.3.4-1/png/pngread.c ****        */
2134:fltk-1.3.4-1/png/pngread.c ****       if (png_ptr->bit_depth == 16 &&
 2574              		.loc 1 2134 0
 2575 0099 80BF7802 		cmpb	$16, 632(%rdi)
 2575      000010
 2576 00a0 0F846A04 		je	.L445
 2576      0000
 2577              	.L248:
2135:fltk-1.3.4-1/png/pngread.c ****          (image->flags & PNG_IMAGE_FLAG_16BIT_sRGB) == 0)
2136:fltk-1.3.4-1/png/pngread.c ****          png_ptr->colorspace.gamma = PNG_GAMMA_LINEAR;
2137:fltk-1.3.4-1/png/pngread.c **** 
2138:fltk-1.3.4-1/png/pngread.c ****       else
2139:fltk-1.3.4-1/png/pngread.c ****          png_ptr->colorspace.gamma = PNG_GAMMA_sRGB_INVERSE;
 2578              		.loc 1 2139 0
 2579 00a6 488B4C24 		movq	32(%rsp), %rcx
 2579      20
 2580 00ab C781D804 		movl	$45455, 1240(%rcx)
 2580      00008FB1 
 2580      0000
 2581              	.LVL327:
 2582              	.L249:
2140:fltk-1.3.4-1/png/pngread.c **** 
2141:fltk-1.3.4-1/png/pngread.c ****       png_ptr->colorspace.flags |= PNG_COLORSPACE_HAVE_GAMMA;
 2583              		.loc 1 2141 0
 2584 00b5 488B4C24 		movq	32(%rsp), %rcx
 2584      20
 2585 00ba 83CA01   		orl	$1, %edx
 2586 00bd 66899122 		movw	%dx, 1314(%rcx)
 2586      050000
 2587              	.L247:
2142:fltk-1.3.4-1/png/pngread.c ****    }
2143:fltk-1.3.4-1/png/pngread.c **** 
2144:fltk-1.3.4-1/png/pngread.c ****    /* Decide what to do based on the PNG color type of the input data.  The
2145:fltk-1.3.4-1/png/pngread.c ****     * utility function png_create_colormap_entry deals with most aspects of the
2146:fltk-1.3.4-1/png/pngread.c ****     * output transformations; this code works out how to produce bytes of
2147:fltk-1.3.4-1/png/pngread.c ****     * color-map entries from the original format.
2148:fltk-1.3.4-1/png/pngread.c ****     */
2149:fltk-1.3.4-1/png/pngread.c ****    switch (png_ptr->color_type)
 2588              		.loc 1 2149 0
 2589 00c4 3C06     		cmpb	$6, %al
 2590 00c6 0F873404 		ja	.L250
 2590      0000
 2591 00cc 0FB6D0   		movzbl	%al, %edx
 2592 00cf FF24D500 		jmp	*.L252(,%rdx,8)
 2592      000000
 2593              		.section	.rodata.png_image_read_colormap,"a",@progbits
 2594              		.align 8
 2595              		.align 4
 2596              	.L252:
 2597 0000 00000000 		.quad	.L251
 2597      00000000 
 2598 0008 00000000 		.quad	.L250
 2598      00000000 
 2599 0010 00000000 		.quad	.L253
 2599      00000000 
 2600 0018 00000000 		.quad	.L254
 2600      00000000 
 2601 0020 00000000 		.quad	.L255
 2601      00000000 
 2602 0028 00000000 		.quad	.L250
 2602      00000000 
 2603 0030 00000000 		.quad	.L253
 2603      00000000 
 2604              		.section	.text.png_image_read_colormap
 2605              	.LVL328:
 2606 00d6 662E0F1F 		.p2align 4,,10
 2606      84000000 
 2606      0000
 2607              		.p2align 3
 2608              	.L243:
2089:fltk-1.3.4-1/png/pngread.c ****       ((output_format & PNG_FORMAT_FLAG_ALPHA) == 0) /* no alpha in output */)
 2609              		.loc 1 2089 0
 2610 00e0 41F6C701 		testb	$1, %r15b
 2611 00e4 0F857BFF 		jne	.L244
 2611      FFFF
2092:fltk-1.3.4-1/png/pngread.c ****          back_b = back_g = back_r = 0;
 2612              		.loc 1 2092 0
 2613 00ea 83FD02   		cmpl	$2, %ebp
 2614 00ed 0F841309 		je	.L353
 2614      0000
2095:fltk-1.3.4-1/png/pngread.c ****          png_error(png_ptr,
 2615              		.loc 1 2095 0
 2616 00f3 488B5320 		movq	32(%rbx), %rdx
 2617 00f7 4885D2   		testq	%rdx, %rdx
 2618 00fa 0F848911 		je	.L446
 2618      0000
2105:fltk-1.3.4-1/png/pngread.c ****          if ((output_format & PNG_FORMAT_FLAG_COLOR) != 0)
 2619              		.loc 1 2105 0
 2620 0100 0FB67A01 		movzbl	1(%rdx), %edi
 2621              	.LVL329:
2106:fltk-1.3.4-1/png/pngread.c ****          {
 2622              		.loc 1 2106 0
 2623 0104 41F6C702 		testb	$2, %r15b
2105:fltk-1.3.4-1/png/pngread.c ****          if ((output_format & PNG_FORMAT_FLAG_COLOR) != 0)
 2624              		.loc 1 2105 0
 2625 0108 897C240C 		movl	%edi, 12(%rsp)
 2626              	.LVL330:
2106:fltk-1.3.4-1/png/pngread.c ****          {
 2627              		.loc 1 2106 0
 2628 010c 0F841C04 		je	.L354
 2628      0000
2108:fltk-1.3.4-1/png/pngread.c ****             back_b = display->background->blue;
 2629              		.loc 1 2108 0
 2630 0112 0FB63A   		movzbl	(%rdx), %edi
 2631              	.LVL331:
 2632 0115 897C2418 		movl	%edi, 24(%rsp)
 2633              	.LVL332:
2109:fltk-1.3.4-1/png/pngread.c ****          }
 2634              		.loc 1 2109 0
 2635 0119 0FB67A02 		movzbl	2(%rdx), %edi
 2636              	.LVL333:
 2637 011d 897C241C 		movl	%edi, 28(%rsp)
 2638              	.LVL334:
 2639 0121 E962FFFF 		jmp	.L245
 2639      FF
 2640              	.LVL335:
 2641 0126 662E0F1F 		.p2align 4,,10
 2641      84000000 
 2641      0000
 2642              		.p2align 3
 2643              	.L254:
 2644              	.LBB173:
2150:fltk-1.3.4-1/png/pngread.c ****    {
2151:fltk-1.3.4-1/png/pngread.c ****       case PNG_COLOR_TYPE_GRAY:
2152:fltk-1.3.4-1/png/pngread.c ****          if (png_ptr->bit_depth <= 8)
2153:fltk-1.3.4-1/png/pngread.c ****          {
2154:fltk-1.3.4-1/png/pngread.c ****             /* There at most 256 colors in the output, regardless of
2155:fltk-1.3.4-1/png/pngread.c ****              * transparency.
2156:fltk-1.3.4-1/png/pngread.c ****              */
2157:fltk-1.3.4-1/png/pngread.c ****             unsigned int step, i, val, trans = 256/*ignore*/, back_alpha = 0;
2158:fltk-1.3.4-1/png/pngread.c **** 
2159:fltk-1.3.4-1/png/pngread.c ****             cmap_entries = 1U << png_ptr->bit_depth;
2160:fltk-1.3.4-1/png/pngread.c ****             if (cmap_entries > image->colormap_entries)
2161:fltk-1.3.4-1/png/pngread.c ****                png_error(png_ptr, "gray[8] color-map: too few entries");
2162:fltk-1.3.4-1/png/pngread.c **** 
2163:fltk-1.3.4-1/png/pngread.c ****             step = 255 / (cmap_entries - 1);
2164:fltk-1.3.4-1/png/pngread.c ****             output_processing = PNG_CMAP_NONE;
2165:fltk-1.3.4-1/png/pngread.c **** 
2166:fltk-1.3.4-1/png/pngread.c ****             /* If there is a tRNS chunk then this either selects a transparent
2167:fltk-1.3.4-1/png/pngread.c ****              * value or, if the output has no alpha, the background color.
2168:fltk-1.3.4-1/png/pngread.c ****              */
2169:fltk-1.3.4-1/png/pngread.c ****             if (png_ptr->num_trans > 0)
2170:fltk-1.3.4-1/png/pngread.c ****             {
2171:fltk-1.3.4-1/png/pngread.c ****                trans = png_ptr->trans_color.gray;
2172:fltk-1.3.4-1/png/pngread.c **** 
2173:fltk-1.3.4-1/png/pngread.c ****                if ((output_format & PNG_FORMAT_FLAG_ALPHA) == 0)
2174:fltk-1.3.4-1/png/pngread.c ****                   back_alpha = output_encoding == P_LINEAR ? 65535 : 255;
2175:fltk-1.3.4-1/png/pngread.c ****             }
2176:fltk-1.3.4-1/png/pngread.c **** 
2177:fltk-1.3.4-1/png/pngread.c ****             /* png_create_colormap_entry just takes an RGBA and writes the
2178:fltk-1.3.4-1/png/pngread.c ****              * corresponding color-map entry using the format from 'image',
2179:fltk-1.3.4-1/png/pngread.c ****              * including the required conversion to sRGB or linear as
2180:fltk-1.3.4-1/png/pngread.c ****              * appropriate.  The input values are always either sRGB (if the
2181:fltk-1.3.4-1/png/pngread.c ****              * gamma correction flag is 0) or 0..255 scaled file encoded values
2182:fltk-1.3.4-1/png/pngread.c ****              * (if the function must gamma correct them).
2183:fltk-1.3.4-1/png/pngread.c ****              */
2184:fltk-1.3.4-1/png/pngread.c ****             for (i=val=0; i<cmap_entries; ++i, val += step)
2185:fltk-1.3.4-1/png/pngread.c ****             {
2186:fltk-1.3.4-1/png/pngread.c ****                /* 'i' is a file value.  While this will result in duplicated
2187:fltk-1.3.4-1/png/pngread.c ****                 * entries for 8-bit non-sRGB encoded files it is necessary to
2188:fltk-1.3.4-1/png/pngread.c ****                 * have non-gamma corrected values to do tRNS handling.
2189:fltk-1.3.4-1/png/pngread.c ****                 */
2190:fltk-1.3.4-1/png/pngread.c ****                if (i != trans)
2191:fltk-1.3.4-1/png/pngread.c ****                   png_create_colormap_entry(display, i, val, val, val, 255,
2192:fltk-1.3.4-1/png/pngread.c ****                      P_FILE/*8-bit with file gamma*/);
2193:fltk-1.3.4-1/png/pngread.c **** 
2194:fltk-1.3.4-1/png/pngread.c ****                /* Else this entry is transparent.  The colors don't matter if
2195:fltk-1.3.4-1/png/pngread.c ****                 * there is an alpha channel (back_alpha == 0), but it does no
2196:fltk-1.3.4-1/png/pngread.c ****                 * harm to pass them in; the values are not set above so this
2197:fltk-1.3.4-1/png/pngread.c ****                 * passes in white.
2198:fltk-1.3.4-1/png/pngread.c ****                 *
2199:fltk-1.3.4-1/png/pngread.c ****                 * NOTE: this preserves the full precision of the application
2200:fltk-1.3.4-1/png/pngread.c ****                 * supplied background color when it is used.
2201:fltk-1.3.4-1/png/pngread.c ****                 */
2202:fltk-1.3.4-1/png/pngread.c ****                else
2203:fltk-1.3.4-1/png/pngread.c ****                   png_create_colormap_entry(display, i, back_r, back_g, back_b,
2204:fltk-1.3.4-1/png/pngread.c ****                      back_alpha, output_encoding);
2205:fltk-1.3.4-1/png/pngread.c ****             }
2206:fltk-1.3.4-1/png/pngread.c **** 
2207:fltk-1.3.4-1/png/pngread.c ****             /* We need libpng to preserve the original encoding. */
2208:fltk-1.3.4-1/png/pngread.c ****             data_encoding = P_FILE;
2209:fltk-1.3.4-1/png/pngread.c **** 
2210:fltk-1.3.4-1/png/pngread.c ****             /* The rows from libpng, while technically gray values, are now also
2211:fltk-1.3.4-1/png/pngread.c ****              * color-map indices; however, they may need to be expanded to 1
2212:fltk-1.3.4-1/png/pngread.c ****              * byte per pixel.  This is what png_set_packing does (i.e., it
2213:fltk-1.3.4-1/png/pngread.c ****              * unpacks the bit values into bytes.)
2214:fltk-1.3.4-1/png/pngread.c ****              */
2215:fltk-1.3.4-1/png/pngread.c ****             if (png_ptr->bit_depth < 8)
2216:fltk-1.3.4-1/png/pngread.c ****                png_set_packing(png_ptr);
2217:fltk-1.3.4-1/png/pngread.c ****          }
2218:fltk-1.3.4-1/png/pngread.c **** 
2219:fltk-1.3.4-1/png/pngread.c ****          else /* bit depth is 16 */
2220:fltk-1.3.4-1/png/pngread.c ****          {
2221:fltk-1.3.4-1/png/pngread.c ****             /* The 16-bit input values can be converted directly to 8-bit gamma
2222:fltk-1.3.4-1/png/pngread.c ****              * encoded values; however, if a tRNS chunk is present 257 color-map
2223:fltk-1.3.4-1/png/pngread.c ****              * entries are required.  This means that the extra entry requires
2224:fltk-1.3.4-1/png/pngread.c ****              * special processing; add an alpha channel, sacrifice gray level
2225:fltk-1.3.4-1/png/pngread.c ****              * 254 and convert transparent (alpha==0) entries to that.
2226:fltk-1.3.4-1/png/pngread.c ****              *
2227:fltk-1.3.4-1/png/pngread.c ****              * Use libpng to chop the data to 8 bits.  Convert it to sRGB at the
2228:fltk-1.3.4-1/png/pngread.c ****              * same time to minimize quality loss.  If a tRNS chunk is present
2229:fltk-1.3.4-1/png/pngread.c ****              * this means libpng must handle it too; otherwise it is impossible
2230:fltk-1.3.4-1/png/pngread.c ****              * to do the exact match on the 16-bit value.
2231:fltk-1.3.4-1/png/pngread.c ****              *
2232:fltk-1.3.4-1/png/pngread.c ****              * If the output has no alpha channel *and* the background color is
2233:fltk-1.3.4-1/png/pngread.c ****              * gray then it is possible to let libpng handle the substitution by
2234:fltk-1.3.4-1/png/pngread.c ****              * ensuring that the corresponding gray level matches the background
2235:fltk-1.3.4-1/png/pngread.c ****              * color exactly.
2236:fltk-1.3.4-1/png/pngread.c ****              */
2237:fltk-1.3.4-1/png/pngread.c ****             data_encoding = P_sRGB;
2238:fltk-1.3.4-1/png/pngread.c **** 
2239:fltk-1.3.4-1/png/pngread.c ****             if (PNG_GRAY_COLORMAP_ENTRIES > image->colormap_entries)
2240:fltk-1.3.4-1/png/pngread.c ****                png_error(png_ptr, "gray[16] color-map: too few entries");
2241:fltk-1.3.4-1/png/pngread.c **** 
2242:fltk-1.3.4-1/png/pngread.c ****             cmap_entries = make_gray_colormap(display);
2243:fltk-1.3.4-1/png/pngread.c **** 
2244:fltk-1.3.4-1/png/pngread.c ****             if (png_ptr->num_trans > 0)
2245:fltk-1.3.4-1/png/pngread.c ****             {
2246:fltk-1.3.4-1/png/pngread.c ****                unsigned int back_alpha;
2247:fltk-1.3.4-1/png/pngread.c **** 
2248:fltk-1.3.4-1/png/pngread.c ****                if ((output_format & PNG_FORMAT_FLAG_ALPHA) != 0)
2249:fltk-1.3.4-1/png/pngread.c ****                   back_alpha = 0;
2250:fltk-1.3.4-1/png/pngread.c **** 
2251:fltk-1.3.4-1/png/pngread.c ****                else
2252:fltk-1.3.4-1/png/pngread.c ****                {
2253:fltk-1.3.4-1/png/pngread.c ****                   if (back_r == back_g && back_g == back_b)
2254:fltk-1.3.4-1/png/pngread.c ****                   {
2255:fltk-1.3.4-1/png/pngread.c ****                      /* Background is gray; no special processing will be
2256:fltk-1.3.4-1/png/pngread.c ****                       * required.
2257:fltk-1.3.4-1/png/pngread.c ****                       */
2258:fltk-1.3.4-1/png/pngread.c ****                      png_color_16 c;
2259:fltk-1.3.4-1/png/pngread.c ****                      png_uint_32 gray = back_g;
2260:fltk-1.3.4-1/png/pngread.c **** 
2261:fltk-1.3.4-1/png/pngread.c ****                      if (output_encoding == P_LINEAR)
2262:fltk-1.3.4-1/png/pngread.c ****                      {
2263:fltk-1.3.4-1/png/pngread.c ****                         gray = PNG_sRGB_FROM_LINEAR(gray * 255);
2264:fltk-1.3.4-1/png/pngread.c **** 
2265:fltk-1.3.4-1/png/pngread.c ****                         /* And make sure the corresponding palette entry
2266:fltk-1.3.4-1/png/pngread.c ****                          * matches.
2267:fltk-1.3.4-1/png/pngread.c ****                          */
2268:fltk-1.3.4-1/png/pngread.c ****                         png_create_colormap_entry(display, gray, back_g, back_g,
2269:fltk-1.3.4-1/png/pngread.c ****                            back_g, 65535, P_LINEAR);
2270:fltk-1.3.4-1/png/pngread.c ****                      }
2271:fltk-1.3.4-1/png/pngread.c **** 
2272:fltk-1.3.4-1/png/pngread.c ****                      /* The background passed to libpng, however, must be the
2273:fltk-1.3.4-1/png/pngread.c ****                       * sRGB value.
2274:fltk-1.3.4-1/png/pngread.c ****                       */
2275:fltk-1.3.4-1/png/pngread.c ****                      c.index = 0; /*unused*/
2276:fltk-1.3.4-1/png/pngread.c ****                      c.gray = c.red = c.green = c.blue = (png_uint_16)gray;
2277:fltk-1.3.4-1/png/pngread.c **** 
2278:fltk-1.3.4-1/png/pngread.c ****                      /* NOTE: does this work without expanding tRNS to alpha?
2279:fltk-1.3.4-1/png/pngread.c ****                       * It should be the color->gray case below apparently
2280:fltk-1.3.4-1/png/pngread.c ****                       * doesn't.
2281:fltk-1.3.4-1/png/pngread.c ****                       */
2282:fltk-1.3.4-1/png/pngread.c ****                      png_set_background_fixed(png_ptr, &c,
2283:fltk-1.3.4-1/png/pngread.c ****                         PNG_BACKGROUND_GAMMA_SCREEN, 0/*need_expand*/,
2284:fltk-1.3.4-1/png/pngread.c ****                         0/*gamma: not used*/);
2285:fltk-1.3.4-1/png/pngread.c **** 
2286:fltk-1.3.4-1/png/pngread.c ****                      output_processing = PNG_CMAP_NONE;
2287:fltk-1.3.4-1/png/pngread.c ****                      break;
2288:fltk-1.3.4-1/png/pngread.c ****                   }
2289:fltk-1.3.4-1/png/pngread.c **** 
2290:fltk-1.3.4-1/png/pngread.c ****                   back_alpha = output_encoding == P_LINEAR ? 65535 : 255;
2291:fltk-1.3.4-1/png/pngread.c ****                }
2292:fltk-1.3.4-1/png/pngread.c **** 
2293:fltk-1.3.4-1/png/pngread.c ****                /* output_processing means that the libpng-processed row will be
2294:fltk-1.3.4-1/png/pngread.c ****                 * 8-bit GA and it has to be processing to single byte color-map
2295:fltk-1.3.4-1/png/pngread.c ****                 * values.  Entry 254 is replaced by either a completely
2296:fltk-1.3.4-1/png/pngread.c ****                 * transparent entry or by the background color at full
2297:fltk-1.3.4-1/png/pngread.c ****                 * precision (and the background color is not a simple gray
2298:fltk-1.3.4-1/png/pngread.c ****                 * level in this case.)
2299:fltk-1.3.4-1/png/pngread.c ****                 */
2300:fltk-1.3.4-1/png/pngread.c ****                expand_tRNS = 1;
2301:fltk-1.3.4-1/png/pngread.c ****                output_processing = PNG_CMAP_TRANS;
2302:fltk-1.3.4-1/png/pngread.c ****                background_index = 254;
2303:fltk-1.3.4-1/png/pngread.c **** 
2304:fltk-1.3.4-1/png/pngread.c ****                /* And set (overwrite) color-map entry 254 to the actual
2305:fltk-1.3.4-1/png/pngread.c ****                 * background color at full precision.
2306:fltk-1.3.4-1/png/pngread.c ****                 */
2307:fltk-1.3.4-1/png/pngread.c ****                png_create_colormap_entry(display, 254, back_r, back_g, back_b,
2308:fltk-1.3.4-1/png/pngread.c ****                   back_alpha, output_encoding);
2309:fltk-1.3.4-1/png/pngread.c ****             }
2310:fltk-1.3.4-1/png/pngread.c **** 
2311:fltk-1.3.4-1/png/pngread.c ****             else
2312:fltk-1.3.4-1/png/pngread.c ****                output_processing = PNG_CMAP_NONE;
2313:fltk-1.3.4-1/png/pngread.c ****          }
2314:fltk-1.3.4-1/png/pngread.c ****          break;
2315:fltk-1.3.4-1/png/pngread.c **** 
2316:fltk-1.3.4-1/png/pngread.c ****       case PNG_COLOR_TYPE_GRAY_ALPHA:
2317:fltk-1.3.4-1/png/pngread.c ****          /* 8-bit or 16-bit PNG with two channels - gray and alpha.  A minimum
2318:fltk-1.3.4-1/png/pngread.c ****           * of 65536 combinations.  If, however, the alpha channel is to be
2319:fltk-1.3.4-1/png/pngread.c ****           * removed there are only 256 possibilities if the background is gray.
2320:fltk-1.3.4-1/png/pngread.c ****           * (Otherwise there is a subset of the 65536 possibilities defined by
2321:fltk-1.3.4-1/png/pngread.c ****           * the triangle between black, white and the background color.)
2322:fltk-1.3.4-1/png/pngread.c ****           *
2323:fltk-1.3.4-1/png/pngread.c ****           * Reduce 16-bit files to 8-bit and sRGB encode the result.  No need to
2324:fltk-1.3.4-1/png/pngread.c ****           * worry about tRNS matching - tRNS is ignored if there is an alpha
2325:fltk-1.3.4-1/png/pngread.c ****           * channel.
2326:fltk-1.3.4-1/png/pngread.c ****           */
2327:fltk-1.3.4-1/png/pngread.c ****          data_encoding = P_sRGB;
2328:fltk-1.3.4-1/png/pngread.c **** 
2329:fltk-1.3.4-1/png/pngread.c ****          if ((output_format & PNG_FORMAT_FLAG_ALPHA) != 0)
2330:fltk-1.3.4-1/png/pngread.c ****          {
2331:fltk-1.3.4-1/png/pngread.c ****             if (PNG_GA_COLORMAP_ENTRIES > image->colormap_entries)
2332:fltk-1.3.4-1/png/pngread.c ****                png_error(png_ptr, "gray+alpha color-map: too few entries");
2333:fltk-1.3.4-1/png/pngread.c **** 
2334:fltk-1.3.4-1/png/pngread.c ****             cmap_entries = make_ga_colormap(display);
2335:fltk-1.3.4-1/png/pngread.c **** 
2336:fltk-1.3.4-1/png/pngread.c ****             background_index = PNG_CMAP_GA_BACKGROUND;
2337:fltk-1.3.4-1/png/pngread.c ****             output_processing = PNG_CMAP_GA;
2338:fltk-1.3.4-1/png/pngread.c ****          }
2339:fltk-1.3.4-1/png/pngread.c **** 
2340:fltk-1.3.4-1/png/pngread.c ****          else /* alpha is removed */
2341:fltk-1.3.4-1/png/pngread.c ****          {
2342:fltk-1.3.4-1/png/pngread.c ****             /* Alpha must be removed as the PNG data is processed when the
2343:fltk-1.3.4-1/png/pngread.c ****              * background is a color because the G and A channels are
2344:fltk-1.3.4-1/png/pngread.c ****              * independent and the vector addition (non-parallel vectors) is a
2345:fltk-1.3.4-1/png/pngread.c ****              * 2-D problem.
2346:fltk-1.3.4-1/png/pngread.c ****              *
2347:fltk-1.3.4-1/png/pngread.c ****              * This can be reduced to the same algorithm as above by making a
2348:fltk-1.3.4-1/png/pngread.c ****              * colormap containing gray levels (for the opaque grays), a
2349:fltk-1.3.4-1/png/pngread.c ****              * background entry (for a transparent pixel) and a set of four six
2350:fltk-1.3.4-1/png/pngread.c ****              * level color values, one set for each intermediate alpha value.
2351:fltk-1.3.4-1/png/pngread.c ****              * See the comments in make_ga_colormap for how this works in the
2352:fltk-1.3.4-1/png/pngread.c ****              * per-pixel processing.
2353:fltk-1.3.4-1/png/pngread.c ****              *
2354:fltk-1.3.4-1/png/pngread.c ****              * If the background is gray, however, we only need a 256 entry gray
2355:fltk-1.3.4-1/png/pngread.c ****              * level color map.  It is sufficient to make the entry generated
2356:fltk-1.3.4-1/png/pngread.c ****              * for the background color be exactly the color specified.
2357:fltk-1.3.4-1/png/pngread.c ****              */
2358:fltk-1.3.4-1/png/pngread.c ****             if ((output_format & PNG_FORMAT_FLAG_COLOR) == 0 ||
2359:fltk-1.3.4-1/png/pngread.c ****                (back_r == back_g && back_g == back_b))
2360:fltk-1.3.4-1/png/pngread.c ****             {
2361:fltk-1.3.4-1/png/pngread.c ****                /* Background is gray; no special processing will be required. */
2362:fltk-1.3.4-1/png/pngread.c ****                png_color_16 c;
2363:fltk-1.3.4-1/png/pngread.c ****                png_uint_32 gray = back_g;
2364:fltk-1.3.4-1/png/pngread.c **** 
2365:fltk-1.3.4-1/png/pngread.c ****                if (PNG_GRAY_COLORMAP_ENTRIES > image->colormap_entries)
2366:fltk-1.3.4-1/png/pngread.c ****                   png_error(png_ptr, "gray-alpha color-map: too few entries");
2367:fltk-1.3.4-1/png/pngread.c **** 
2368:fltk-1.3.4-1/png/pngread.c ****                cmap_entries = make_gray_colormap(display);
2369:fltk-1.3.4-1/png/pngread.c **** 
2370:fltk-1.3.4-1/png/pngread.c ****                if (output_encoding == P_LINEAR)
2371:fltk-1.3.4-1/png/pngread.c ****                {
2372:fltk-1.3.4-1/png/pngread.c ****                   gray = PNG_sRGB_FROM_LINEAR(gray * 255);
2373:fltk-1.3.4-1/png/pngread.c **** 
2374:fltk-1.3.4-1/png/pngread.c ****                   /* And make sure the corresponding palette entry matches. */
2375:fltk-1.3.4-1/png/pngread.c ****                   png_create_colormap_entry(display, gray, back_g, back_g,
2376:fltk-1.3.4-1/png/pngread.c ****                      back_g, 65535, P_LINEAR);
2377:fltk-1.3.4-1/png/pngread.c ****                }
2378:fltk-1.3.4-1/png/pngread.c **** 
2379:fltk-1.3.4-1/png/pngread.c ****                /* The background passed to libpng, however, must be the sRGB
2380:fltk-1.3.4-1/png/pngread.c ****                 * value.
2381:fltk-1.3.4-1/png/pngread.c ****                 */
2382:fltk-1.3.4-1/png/pngread.c ****                c.index = 0; /*unused*/
2383:fltk-1.3.4-1/png/pngread.c ****                c.gray = c.red = c.green = c.blue = (png_uint_16)gray;
2384:fltk-1.3.4-1/png/pngread.c **** 
2385:fltk-1.3.4-1/png/pngread.c ****                png_set_background_fixed(png_ptr, &c,
2386:fltk-1.3.4-1/png/pngread.c ****                   PNG_BACKGROUND_GAMMA_SCREEN, 0/*need_expand*/,
2387:fltk-1.3.4-1/png/pngread.c ****                   0/*gamma: not used*/);
2388:fltk-1.3.4-1/png/pngread.c **** 
2389:fltk-1.3.4-1/png/pngread.c ****                output_processing = PNG_CMAP_NONE;
2390:fltk-1.3.4-1/png/pngread.c ****             }
2391:fltk-1.3.4-1/png/pngread.c **** 
2392:fltk-1.3.4-1/png/pngread.c ****             else
2393:fltk-1.3.4-1/png/pngread.c ****             {
2394:fltk-1.3.4-1/png/pngread.c ****                png_uint_32 i, a;
2395:fltk-1.3.4-1/png/pngread.c **** 
2396:fltk-1.3.4-1/png/pngread.c ****                /* This is the same as png_make_ga_colormap, above, except that
2397:fltk-1.3.4-1/png/pngread.c ****                 * the entries are all opaque.
2398:fltk-1.3.4-1/png/pngread.c ****                 */
2399:fltk-1.3.4-1/png/pngread.c ****                if (PNG_GA_COLORMAP_ENTRIES > image->colormap_entries)
2400:fltk-1.3.4-1/png/pngread.c ****                   png_error(png_ptr, "ga-alpha color-map: too few entries");
2401:fltk-1.3.4-1/png/pngread.c **** 
2402:fltk-1.3.4-1/png/pngread.c ****                i = 0;
2403:fltk-1.3.4-1/png/pngread.c ****                while (i < 231)
2404:fltk-1.3.4-1/png/pngread.c ****                {
2405:fltk-1.3.4-1/png/pngread.c ****                   png_uint_32 gray = (i * 256 + 115) / 231;
2406:fltk-1.3.4-1/png/pngread.c ****                   png_create_colormap_entry(display, i++, gray, gray, gray,
2407:fltk-1.3.4-1/png/pngread.c ****                      255, P_sRGB);
2408:fltk-1.3.4-1/png/pngread.c ****                }
2409:fltk-1.3.4-1/png/pngread.c **** 
2410:fltk-1.3.4-1/png/pngread.c ****                /* NOTE: this preserves the full precision of the application
2411:fltk-1.3.4-1/png/pngread.c ****                 * background color.
2412:fltk-1.3.4-1/png/pngread.c ****                 */
2413:fltk-1.3.4-1/png/pngread.c ****                background_index = i;
2414:fltk-1.3.4-1/png/pngread.c ****                png_create_colormap_entry(display, i++, back_r, back_g, back_b,
2415:fltk-1.3.4-1/png/pngread.c ****                   output_encoding == P_LINEAR ? 65535U : 255U, output_encoding);
2416:fltk-1.3.4-1/png/pngread.c **** 
2417:fltk-1.3.4-1/png/pngread.c ****                /* For non-opaque input composite on the sRGB background - this
2418:fltk-1.3.4-1/png/pngread.c ****                 * requires inverting the encoding for each component.  The input
2419:fltk-1.3.4-1/png/pngread.c ****                 * is still converted to the sRGB encoding because this is a
2420:fltk-1.3.4-1/png/pngread.c ****                 * reasonable approximate to the logarithmic curve of human
2421:fltk-1.3.4-1/png/pngread.c ****                 * visual sensitivity, at least over the narrow range which PNG
2422:fltk-1.3.4-1/png/pngread.c ****                 * represents.  Consequently 'G' is always sRGB encoded, while
2423:fltk-1.3.4-1/png/pngread.c ****                 * 'A' is linear.  We need the linear background colors.
2424:fltk-1.3.4-1/png/pngread.c ****                 */
2425:fltk-1.3.4-1/png/pngread.c ****                if (output_encoding == P_sRGB) /* else already linear */
2426:fltk-1.3.4-1/png/pngread.c ****                {
2427:fltk-1.3.4-1/png/pngread.c ****                   /* This may produce a value not exactly matching the
2428:fltk-1.3.4-1/png/pngread.c ****                    * background, but that's ok because these numbers are only
2429:fltk-1.3.4-1/png/pngread.c ****                    * used when alpha != 0
2430:fltk-1.3.4-1/png/pngread.c ****                    */
2431:fltk-1.3.4-1/png/pngread.c ****                   back_r = png_sRGB_table[back_r];
2432:fltk-1.3.4-1/png/pngread.c ****                   back_g = png_sRGB_table[back_g];
2433:fltk-1.3.4-1/png/pngread.c ****                   back_b = png_sRGB_table[back_b];
2434:fltk-1.3.4-1/png/pngread.c ****                }
2435:fltk-1.3.4-1/png/pngread.c **** 
2436:fltk-1.3.4-1/png/pngread.c ****                for (a=1; a<5; ++a)
2437:fltk-1.3.4-1/png/pngread.c ****                {
2438:fltk-1.3.4-1/png/pngread.c ****                   unsigned int g;
2439:fltk-1.3.4-1/png/pngread.c **** 
2440:fltk-1.3.4-1/png/pngread.c ****                   /* PNG_sRGB_FROM_LINEAR expects a 16-bit linear value scaled
2441:fltk-1.3.4-1/png/pngread.c ****                    * by an 8-bit alpha value (0..255).
2442:fltk-1.3.4-1/png/pngread.c ****                    */
2443:fltk-1.3.4-1/png/pngread.c ****                   png_uint_32 alpha = 51 * a;
2444:fltk-1.3.4-1/png/pngread.c ****                   png_uint_32 back_rx = (255-alpha) * back_r;
2445:fltk-1.3.4-1/png/pngread.c ****                   png_uint_32 back_gx = (255-alpha) * back_g;
2446:fltk-1.3.4-1/png/pngread.c ****                   png_uint_32 back_bx = (255-alpha) * back_b;
2447:fltk-1.3.4-1/png/pngread.c **** 
2448:fltk-1.3.4-1/png/pngread.c ****                   for (g=0; g<6; ++g)
2449:fltk-1.3.4-1/png/pngread.c ****                   {
2450:fltk-1.3.4-1/png/pngread.c ****                      png_uint_32 gray = png_sRGB_table[g*51] * alpha;
2451:fltk-1.3.4-1/png/pngread.c **** 
2452:fltk-1.3.4-1/png/pngread.c ****                      png_create_colormap_entry(display, i++,
2453:fltk-1.3.4-1/png/pngread.c ****                         PNG_sRGB_FROM_LINEAR(gray + back_rx),
2454:fltk-1.3.4-1/png/pngread.c ****                         PNG_sRGB_FROM_LINEAR(gray + back_gx),
2455:fltk-1.3.4-1/png/pngread.c ****                         PNG_sRGB_FROM_LINEAR(gray + back_bx), 255, P_sRGB);
2456:fltk-1.3.4-1/png/pngread.c ****                   }
2457:fltk-1.3.4-1/png/pngread.c ****                }
2458:fltk-1.3.4-1/png/pngread.c **** 
2459:fltk-1.3.4-1/png/pngread.c ****                cmap_entries = i;
2460:fltk-1.3.4-1/png/pngread.c ****                output_processing = PNG_CMAP_GA;
2461:fltk-1.3.4-1/png/pngread.c ****             }
2462:fltk-1.3.4-1/png/pngread.c ****          }
2463:fltk-1.3.4-1/png/pngread.c ****          break;
2464:fltk-1.3.4-1/png/pngread.c **** 
2465:fltk-1.3.4-1/png/pngread.c ****       case PNG_COLOR_TYPE_RGB:
2466:fltk-1.3.4-1/png/pngread.c ****       case PNG_COLOR_TYPE_RGB_ALPHA:
2467:fltk-1.3.4-1/png/pngread.c ****          /* Exclude the case where the output is gray; we can always handle this
2468:fltk-1.3.4-1/png/pngread.c ****           * with the cases above.
2469:fltk-1.3.4-1/png/pngread.c ****           */
2470:fltk-1.3.4-1/png/pngread.c ****          if ((output_format & PNG_FORMAT_FLAG_COLOR) == 0)
2471:fltk-1.3.4-1/png/pngread.c ****          {
2472:fltk-1.3.4-1/png/pngread.c ****             /* The color-map will be grayscale, so we may as well convert the
2473:fltk-1.3.4-1/png/pngread.c ****              * input RGB values to a simple grayscale and use the grayscale
2474:fltk-1.3.4-1/png/pngread.c ****              * code above.
2475:fltk-1.3.4-1/png/pngread.c ****              *
2476:fltk-1.3.4-1/png/pngread.c ****              * NOTE: calling this apparently damages the recognition of the
2477:fltk-1.3.4-1/png/pngread.c ****              * transparent color in background color handling; call
2478:fltk-1.3.4-1/png/pngread.c ****              * png_set_tRNS_to_alpha before png_set_background_fixed.
2479:fltk-1.3.4-1/png/pngread.c ****              */
2480:fltk-1.3.4-1/png/pngread.c ****             png_set_rgb_to_gray_fixed(png_ptr, PNG_ERROR_ACTION_NONE, -1,
2481:fltk-1.3.4-1/png/pngread.c ****                -1);
2482:fltk-1.3.4-1/png/pngread.c ****             data_encoding = P_sRGB;
2483:fltk-1.3.4-1/png/pngread.c **** 
2484:fltk-1.3.4-1/png/pngread.c ****             /* The output will now be one or two 8-bit gray or gray+alpha
2485:fltk-1.3.4-1/png/pngread.c ****              * channels.  The more complex case arises when the input has alpha.
2486:fltk-1.3.4-1/png/pngread.c ****              */
2487:fltk-1.3.4-1/png/pngread.c ****             if ((png_ptr->color_type == PNG_COLOR_TYPE_RGB_ALPHA ||
2488:fltk-1.3.4-1/png/pngread.c ****                png_ptr->num_trans > 0) &&
2489:fltk-1.3.4-1/png/pngread.c ****                (output_format & PNG_FORMAT_FLAG_ALPHA) != 0)
2490:fltk-1.3.4-1/png/pngread.c ****             {
2491:fltk-1.3.4-1/png/pngread.c ****                /* Both input and output have an alpha channel, so no background
2492:fltk-1.3.4-1/png/pngread.c ****                 * processing is required; just map the GA bytes to the right
2493:fltk-1.3.4-1/png/pngread.c ****                 * color-map entry.
2494:fltk-1.3.4-1/png/pngread.c ****                 */
2495:fltk-1.3.4-1/png/pngread.c ****                expand_tRNS = 1;
2496:fltk-1.3.4-1/png/pngread.c **** 
2497:fltk-1.3.4-1/png/pngread.c ****                if (PNG_GA_COLORMAP_ENTRIES > image->colormap_entries)
2498:fltk-1.3.4-1/png/pngread.c ****                   png_error(png_ptr, "rgb[ga] color-map: too few entries");
2499:fltk-1.3.4-1/png/pngread.c **** 
2500:fltk-1.3.4-1/png/pngread.c ****                cmap_entries = make_ga_colormap(display);
2501:fltk-1.3.4-1/png/pngread.c ****                background_index = PNG_CMAP_GA_BACKGROUND;
2502:fltk-1.3.4-1/png/pngread.c ****                output_processing = PNG_CMAP_GA;
2503:fltk-1.3.4-1/png/pngread.c ****             }
2504:fltk-1.3.4-1/png/pngread.c **** 
2505:fltk-1.3.4-1/png/pngread.c ****             else
2506:fltk-1.3.4-1/png/pngread.c ****             {
2507:fltk-1.3.4-1/png/pngread.c ****                /* Either the input or the output has no alpha channel, so there
2508:fltk-1.3.4-1/png/pngread.c ****                 * will be no non-opaque pixels in the color-map; it will just be
2509:fltk-1.3.4-1/png/pngread.c ****                 * grayscale.
2510:fltk-1.3.4-1/png/pngread.c ****                 */
2511:fltk-1.3.4-1/png/pngread.c ****                if (PNG_GRAY_COLORMAP_ENTRIES > image->colormap_entries)
2512:fltk-1.3.4-1/png/pngread.c ****                   png_error(png_ptr, "rgb[gray] color-map: too few entries");
2513:fltk-1.3.4-1/png/pngread.c **** 
2514:fltk-1.3.4-1/png/pngread.c ****                /* Ideally this code would use libpng to do the gamma correction,
2515:fltk-1.3.4-1/png/pngread.c ****                 * but if an input alpha channel is to be removed we will hit the
2516:fltk-1.3.4-1/png/pngread.c ****                 * libpng bug in gamma+compose+rgb-to-gray (the double gamma
2517:fltk-1.3.4-1/png/pngread.c ****                 * correction bug).  Fix this by dropping the gamma correction in
2518:fltk-1.3.4-1/png/pngread.c ****                 * this case and doing it in the palette; this will result in
2519:fltk-1.3.4-1/png/pngread.c ****                 * duplicate palette entries, but that's better than the
2520:fltk-1.3.4-1/png/pngread.c ****                 * alternative of double gamma correction.
2521:fltk-1.3.4-1/png/pngread.c ****                 */
2522:fltk-1.3.4-1/png/pngread.c ****                if ((png_ptr->color_type == PNG_COLOR_TYPE_RGB_ALPHA ||
2523:fltk-1.3.4-1/png/pngread.c ****                   png_ptr->num_trans > 0) &&
2524:fltk-1.3.4-1/png/pngread.c ****                   png_gamma_not_sRGB(png_ptr->colorspace.gamma) != 0)
2525:fltk-1.3.4-1/png/pngread.c ****                {
2526:fltk-1.3.4-1/png/pngread.c ****                   cmap_entries = make_gray_file_colormap(display);
2527:fltk-1.3.4-1/png/pngread.c ****                   data_encoding = P_FILE;
2528:fltk-1.3.4-1/png/pngread.c ****                }
2529:fltk-1.3.4-1/png/pngread.c **** 
2530:fltk-1.3.4-1/png/pngread.c ****                else
2531:fltk-1.3.4-1/png/pngread.c ****                   cmap_entries = make_gray_colormap(display);
2532:fltk-1.3.4-1/png/pngread.c **** 
2533:fltk-1.3.4-1/png/pngread.c ****                /* But if the input has alpha or transparency it must be removed
2534:fltk-1.3.4-1/png/pngread.c ****                 */
2535:fltk-1.3.4-1/png/pngread.c ****                if (png_ptr->color_type == PNG_COLOR_TYPE_RGB_ALPHA ||
2536:fltk-1.3.4-1/png/pngread.c ****                   png_ptr->num_trans > 0)
2537:fltk-1.3.4-1/png/pngread.c ****                {
2538:fltk-1.3.4-1/png/pngread.c ****                   png_color_16 c;
2539:fltk-1.3.4-1/png/pngread.c ****                   png_uint_32 gray = back_g;
2540:fltk-1.3.4-1/png/pngread.c **** 
2541:fltk-1.3.4-1/png/pngread.c ****                   /* We need to ensure that the application background exists in
2542:fltk-1.3.4-1/png/pngread.c ****                    * the colormap and that completely transparent pixels map to
2543:fltk-1.3.4-1/png/pngread.c ****                    * it.  Achieve this simply by ensuring that the entry
2544:fltk-1.3.4-1/png/pngread.c ****                    * selected for the background really is the background color.
2545:fltk-1.3.4-1/png/pngread.c ****                    */
2546:fltk-1.3.4-1/png/pngread.c ****                   if (data_encoding == P_FILE) /* from the fixup above */
2547:fltk-1.3.4-1/png/pngread.c ****                   {
2548:fltk-1.3.4-1/png/pngread.c ****                      /* The app supplied a gray which is in output_encoding, we
2549:fltk-1.3.4-1/png/pngread.c ****                       * need to convert it to a value of the input (P_FILE)
2550:fltk-1.3.4-1/png/pngread.c ****                       * encoding then set this palette entry to the required
2551:fltk-1.3.4-1/png/pngread.c ****                       * output encoding.
2552:fltk-1.3.4-1/png/pngread.c ****                       */
2553:fltk-1.3.4-1/png/pngread.c ****                      if (output_encoding == P_sRGB)
2554:fltk-1.3.4-1/png/pngread.c ****                         gray = png_sRGB_table[gray]; /* now P_LINEAR */
2555:fltk-1.3.4-1/png/pngread.c **** 
2556:fltk-1.3.4-1/png/pngread.c ****                      gray = PNG_DIV257(png_gamma_16bit_correct(gray,
2557:fltk-1.3.4-1/png/pngread.c ****                         png_ptr->colorspace.gamma)); /* now P_FILE */
2558:fltk-1.3.4-1/png/pngread.c **** 
2559:fltk-1.3.4-1/png/pngread.c ****                      /* And make sure the corresponding palette entry contains
2560:fltk-1.3.4-1/png/pngread.c ****                       * exactly the required sRGB value.
2561:fltk-1.3.4-1/png/pngread.c ****                       */
2562:fltk-1.3.4-1/png/pngread.c ****                      png_create_colormap_entry(display, gray, back_g, back_g,
2563:fltk-1.3.4-1/png/pngread.c ****                         back_g, 0/*unused*/, output_encoding);
2564:fltk-1.3.4-1/png/pngread.c ****                   }
2565:fltk-1.3.4-1/png/pngread.c **** 
2566:fltk-1.3.4-1/png/pngread.c ****                   else if (output_encoding == P_LINEAR)
2567:fltk-1.3.4-1/png/pngread.c ****                   {
2568:fltk-1.3.4-1/png/pngread.c ****                      gray = PNG_sRGB_FROM_LINEAR(gray * 255);
2569:fltk-1.3.4-1/png/pngread.c **** 
2570:fltk-1.3.4-1/png/pngread.c ****                      /* And make sure the corresponding palette entry matches.
2571:fltk-1.3.4-1/png/pngread.c ****                       */
2572:fltk-1.3.4-1/png/pngread.c ****                      png_create_colormap_entry(display, gray, back_g, back_g,
2573:fltk-1.3.4-1/png/pngread.c ****                         back_g, 0/*unused*/, P_LINEAR);
2574:fltk-1.3.4-1/png/pngread.c ****                   }
2575:fltk-1.3.4-1/png/pngread.c **** 
2576:fltk-1.3.4-1/png/pngread.c ****                   /* The background passed to libpng, however, must be the
2577:fltk-1.3.4-1/png/pngread.c ****                    * output (normally sRGB) value.
2578:fltk-1.3.4-1/png/pngread.c ****                    */
2579:fltk-1.3.4-1/png/pngread.c ****                   c.index = 0; /*unused*/
2580:fltk-1.3.4-1/png/pngread.c ****                   c.gray = c.red = c.green = c.blue = (png_uint_16)gray;
2581:fltk-1.3.4-1/png/pngread.c **** 
2582:fltk-1.3.4-1/png/pngread.c ****                   /* NOTE: the following is apparently a bug in libpng. Without
2583:fltk-1.3.4-1/png/pngread.c ****                    * it the transparent color recognition in
2584:fltk-1.3.4-1/png/pngread.c ****                    * png_set_background_fixed seems to go wrong.
2585:fltk-1.3.4-1/png/pngread.c ****                    */
2586:fltk-1.3.4-1/png/pngread.c ****                   expand_tRNS = 1;
2587:fltk-1.3.4-1/png/pngread.c ****                   png_set_background_fixed(png_ptr, &c,
2588:fltk-1.3.4-1/png/pngread.c ****                      PNG_BACKGROUND_GAMMA_SCREEN, 0/*need_expand*/,
2589:fltk-1.3.4-1/png/pngread.c ****                      0/*gamma: not used*/);
2590:fltk-1.3.4-1/png/pngread.c ****                }
2591:fltk-1.3.4-1/png/pngread.c **** 
2592:fltk-1.3.4-1/png/pngread.c ****                output_processing = PNG_CMAP_NONE;
2593:fltk-1.3.4-1/png/pngread.c ****             }
2594:fltk-1.3.4-1/png/pngread.c ****          }
2595:fltk-1.3.4-1/png/pngread.c **** 
2596:fltk-1.3.4-1/png/pngread.c ****          else /* output is color */
2597:fltk-1.3.4-1/png/pngread.c ****          {
2598:fltk-1.3.4-1/png/pngread.c ****             /* We could use png_quantize here so long as there is no transparent
2599:fltk-1.3.4-1/png/pngread.c ****              * color or alpha; png_quantize ignores alpha.  Easier overall just
2600:fltk-1.3.4-1/png/pngread.c ****              * to do it once and using PNG_DIV51 on the 6x6x6 reduced RGB cube.
2601:fltk-1.3.4-1/png/pngread.c ****              * Consequently we always want libpng to produce sRGB data.
2602:fltk-1.3.4-1/png/pngread.c ****              */
2603:fltk-1.3.4-1/png/pngread.c ****             data_encoding = P_sRGB;
2604:fltk-1.3.4-1/png/pngread.c **** 
2605:fltk-1.3.4-1/png/pngread.c ****             /* Is there any transparency or alpha? */
2606:fltk-1.3.4-1/png/pngread.c ****             if (png_ptr->color_type == PNG_COLOR_TYPE_RGB_ALPHA ||
2607:fltk-1.3.4-1/png/pngread.c ****                png_ptr->num_trans > 0)
2608:fltk-1.3.4-1/png/pngread.c ****             {
2609:fltk-1.3.4-1/png/pngread.c ****                /* Is there alpha in the output too?  If so all four channels are
2610:fltk-1.3.4-1/png/pngread.c ****                 * processed into a special RGB cube with alpha support.
2611:fltk-1.3.4-1/png/pngread.c ****                 */
2612:fltk-1.3.4-1/png/pngread.c ****                if ((output_format & PNG_FORMAT_FLAG_ALPHA) != 0)
2613:fltk-1.3.4-1/png/pngread.c ****                {
2614:fltk-1.3.4-1/png/pngread.c ****                   png_uint_32 r;
2615:fltk-1.3.4-1/png/pngread.c **** 
2616:fltk-1.3.4-1/png/pngread.c ****                   if (PNG_RGB_COLORMAP_ENTRIES+1+27 > image->colormap_entries)
2617:fltk-1.3.4-1/png/pngread.c ****                      png_error(png_ptr, "rgb+alpha color-map: too few entries");
2618:fltk-1.3.4-1/png/pngread.c **** 
2619:fltk-1.3.4-1/png/pngread.c ****                   cmap_entries = make_rgb_colormap(display);
2620:fltk-1.3.4-1/png/pngread.c **** 
2621:fltk-1.3.4-1/png/pngread.c ****                   /* Add a transparent entry. */
2622:fltk-1.3.4-1/png/pngread.c ****                   png_create_colormap_entry(display, cmap_entries, 255, 255,
2623:fltk-1.3.4-1/png/pngread.c ****                      255, 0, P_sRGB);
2624:fltk-1.3.4-1/png/pngread.c **** 
2625:fltk-1.3.4-1/png/pngread.c ****                   /* This is stored as the background index for the processing
2626:fltk-1.3.4-1/png/pngread.c ****                    * algorithm.
2627:fltk-1.3.4-1/png/pngread.c ****                    */
2628:fltk-1.3.4-1/png/pngread.c ****                   background_index = cmap_entries++;
2629:fltk-1.3.4-1/png/pngread.c **** 
2630:fltk-1.3.4-1/png/pngread.c ****                   /* Add 27 r,g,b entries each with alpha 0.5. */
2631:fltk-1.3.4-1/png/pngread.c ****                   for (r=0; r<256; r = (r << 1) | 0x7f)
2632:fltk-1.3.4-1/png/pngread.c ****                   {
2633:fltk-1.3.4-1/png/pngread.c ****                      png_uint_32 g;
2634:fltk-1.3.4-1/png/pngread.c **** 
2635:fltk-1.3.4-1/png/pngread.c ****                      for (g=0; g<256; g = (g << 1) | 0x7f)
2636:fltk-1.3.4-1/png/pngread.c ****                      {
2637:fltk-1.3.4-1/png/pngread.c ****                         png_uint_32 b;
2638:fltk-1.3.4-1/png/pngread.c **** 
2639:fltk-1.3.4-1/png/pngread.c ****                         /* This generates components with the values 0, 127 and
2640:fltk-1.3.4-1/png/pngread.c ****                          * 255
2641:fltk-1.3.4-1/png/pngread.c ****                          */
2642:fltk-1.3.4-1/png/pngread.c ****                         for (b=0; b<256; b = (b << 1) | 0x7f)
2643:fltk-1.3.4-1/png/pngread.c ****                            png_create_colormap_entry(display, cmap_entries++,
2644:fltk-1.3.4-1/png/pngread.c ****                               r, g, b, 128, P_sRGB);
2645:fltk-1.3.4-1/png/pngread.c ****                      }
2646:fltk-1.3.4-1/png/pngread.c ****                   }
2647:fltk-1.3.4-1/png/pngread.c **** 
2648:fltk-1.3.4-1/png/pngread.c ****                   expand_tRNS = 1;
2649:fltk-1.3.4-1/png/pngread.c ****                   output_processing = PNG_CMAP_RGB_ALPHA;
2650:fltk-1.3.4-1/png/pngread.c ****                }
2651:fltk-1.3.4-1/png/pngread.c **** 
2652:fltk-1.3.4-1/png/pngread.c ****                else
2653:fltk-1.3.4-1/png/pngread.c ****                {
2654:fltk-1.3.4-1/png/pngread.c ****                   /* Alpha/transparency must be removed.  The background must
2655:fltk-1.3.4-1/png/pngread.c ****                    * exist in the color map (achieved by setting adding it after
2656:fltk-1.3.4-1/png/pngread.c ****                    * the 666 color-map).  If the standard processing code will
2657:fltk-1.3.4-1/png/pngread.c ****                    * pick up this entry automatically that's all that is
2658:fltk-1.3.4-1/png/pngread.c ****                    * required; libpng can be called to do the background
2659:fltk-1.3.4-1/png/pngread.c ****                    * processing.
2660:fltk-1.3.4-1/png/pngread.c ****                    */
2661:fltk-1.3.4-1/png/pngread.c ****                   unsigned int sample_size =
2662:fltk-1.3.4-1/png/pngread.c ****                      PNG_IMAGE_SAMPLE_SIZE(output_format);
2663:fltk-1.3.4-1/png/pngread.c ****                   png_uint_32 r, g, b; /* sRGB background */
2664:fltk-1.3.4-1/png/pngread.c **** 
2665:fltk-1.3.4-1/png/pngread.c ****                   if (PNG_RGB_COLORMAP_ENTRIES+1+27 > image->colormap_entries)
2666:fltk-1.3.4-1/png/pngread.c ****                      png_error(png_ptr, "rgb-alpha color-map: too few entries");
2667:fltk-1.3.4-1/png/pngread.c **** 
2668:fltk-1.3.4-1/png/pngread.c ****                   cmap_entries = make_rgb_colormap(display);
2669:fltk-1.3.4-1/png/pngread.c **** 
2670:fltk-1.3.4-1/png/pngread.c ****                   png_create_colormap_entry(display, cmap_entries, back_r,
2671:fltk-1.3.4-1/png/pngread.c ****                         back_g, back_b, 0/*unused*/, output_encoding);
2672:fltk-1.3.4-1/png/pngread.c **** 
2673:fltk-1.3.4-1/png/pngread.c ****                   if (output_encoding == P_LINEAR)
2674:fltk-1.3.4-1/png/pngread.c ****                   {
2675:fltk-1.3.4-1/png/pngread.c ****                      r = PNG_sRGB_FROM_LINEAR(back_r * 255);
2676:fltk-1.3.4-1/png/pngread.c ****                      g = PNG_sRGB_FROM_LINEAR(back_g * 255);
2677:fltk-1.3.4-1/png/pngread.c ****                      b = PNG_sRGB_FROM_LINEAR(back_b * 255);
2678:fltk-1.3.4-1/png/pngread.c ****                   }
2679:fltk-1.3.4-1/png/pngread.c **** 
2680:fltk-1.3.4-1/png/pngread.c ****                   else
2681:fltk-1.3.4-1/png/pngread.c ****                   {
2682:fltk-1.3.4-1/png/pngread.c ****                      r = back_r;
2683:fltk-1.3.4-1/png/pngread.c ****                      g = back_g;
2684:fltk-1.3.4-1/png/pngread.c ****                      b = back_g;
2685:fltk-1.3.4-1/png/pngread.c ****                   }
2686:fltk-1.3.4-1/png/pngread.c **** 
2687:fltk-1.3.4-1/png/pngread.c ****                   /* Compare the newly-created color-map entry with the one the
2688:fltk-1.3.4-1/png/pngread.c ****                    * PNG_CMAP_RGB algorithm will use.  If the two entries don't
2689:fltk-1.3.4-1/png/pngread.c ****                    * match, add the new one and set this as the background
2690:fltk-1.3.4-1/png/pngread.c ****                    * index.
2691:fltk-1.3.4-1/png/pngread.c ****                    */
2692:fltk-1.3.4-1/png/pngread.c ****                   if (memcmp((png_const_bytep)display->colormap +
2693:fltk-1.3.4-1/png/pngread.c ****                         sample_size * cmap_entries,
2694:fltk-1.3.4-1/png/pngread.c ****                      (png_const_bytep)display->colormap +
2695:fltk-1.3.4-1/png/pngread.c ****                         sample_size * PNG_RGB_INDEX(r,g,b),
2696:fltk-1.3.4-1/png/pngread.c ****                      sample_size) != 0)
2697:fltk-1.3.4-1/png/pngread.c ****                   {
2698:fltk-1.3.4-1/png/pngread.c ****                      /* The background color must be added. */
2699:fltk-1.3.4-1/png/pngread.c ****                      background_index = cmap_entries++;
2700:fltk-1.3.4-1/png/pngread.c **** 
2701:fltk-1.3.4-1/png/pngread.c ****                      /* Add 27 r,g,b entries each with created by composing with
2702:fltk-1.3.4-1/png/pngread.c ****                       * the background at alpha 0.5.
2703:fltk-1.3.4-1/png/pngread.c ****                       */
2704:fltk-1.3.4-1/png/pngread.c ****                      for (r=0; r<256; r = (r << 1) | 0x7f)
2705:fltk-1.3.4-1/png/pngread.c ****                      {
2706:fltk-1.3.4-1/png/pngread.c ****                         for (g=0; g<256; g = (g << 1) | 0x7f)
2707:fltk-1.3.4-1/png/pngread.c ****                         {
2708:fltk-1.3.4-1/png/pngread.c ****                            /* This generates components with the values 0, 127
2709:fltk-1.3.4-1/png/pngread.c ****                             * and 255
2710:fltk-1.3.4-1/png/pngread.c ****                             */
2711:fltk-1.3.4-1/png/pngread.c ****                            for (b=0; b<256; b = (b << 1) | 0x7f)
2712:fltk-1.3.4-1/png/pngread.c ****                               png_create_colormap_entry(display, cmap_entries++,
2713:fltk-1.3.4-1/png/pngread.c ****                                  png_colormap_compose(display, r, P_sRGB, 128,
2714:fltk-1.3.4-1/png/pngread.c ****                                     back_r, output_encoding),
2715:fltk-1.3.4-1/png/pngread.c ****                                  png_colormap_compose(display, g, P_sRGB, 128,
2716:fltk-1.3.4-1/png/pngread.c ****                                     back_g, output_encoding),
2717:fltk-1.3.4-1/png/pngread.c ****                                  png_colormap_compose(display, b, P_sRGB, 128,
2718:fltk-1.3.4-1/png/pngread.c ****                                     back_b, output_encoding),
2719:fltk-1.3.4-1/png/pngread.c ****                                  0/*unused*/, output_encoding);
2720:fltk-1.3.4-1/png/pngread.c ****                         }
2721:fltk-1.3.4-1/png/pngread.c ****                      }
2722:fltk-1.3.4-1/png/pngread.c **** 
2723:fltk-1.3.4-1/png/pngread.c ****                      expand_tRNS = 1;
2724:fltk-1.3.4-1/png/pngread.c ****                      output_processing = PNG_CMAP_RGB_ALPHA;
2725:fltk-1.3.4-1/png/pngread.c ****                   }
2726:fltk-1.3.4-1/png/pngread.c **** 
2727:fltk-1.3.4-1/png/pngread.c ****                   else /* background color is in the standard color-map */
2728:fltk-1.3.4-1/png/pngread.c ****                   {
2729:fltk-1.3.4-1/png/pngread.c ****                      png_color_16 c;
2730:fltk-1.3.4-1/png/pngread.c **** 
2731:fltk-1.3.4-1/png/pngread.c ****                      c.index = 0; /*unused*/
2732:fltk-1.3.4-1/png/pngread.c ****                      c.red = (png_uint_16)back_r;
2733:fltk-1.3.4-1/png/pngread.c ****                      c.gray = c.green = (png_uint_16)back_g;
2734:fltk-1.3.4-1/png/pngread.c ****                      c.blue = (png_uint_16)back_b;
2735:fltk-1.3.4-1/png/pngread.c **** 
2736:fltk-1.3.4-1/png/pngread.c ****                      png_set_background_fixed(png_ptr, &c,
2737:fltk-1.3.4-1/png/pngread.c ****                         PNG_BACKGROUND_GAMMA_SCREEN, 0/*need_expand*/,
2738:fltk-1.3.4-1/png/pngread.c ****                         0/*gamma: not used*/);
2739:fltk-1.3.4-1/png/pngread.c **** 
2740:fltk-1.3.4-1/png/pngread.c ****                      output_processing = PNG_CMAP_RGB;
2741:fltk-1.3.4-1/png/pngread.c ****                   }
2742:fltk-1.3.4-1/png/pngread.c ****                }
2743:fltk-1.3.4-1/png/pngread.c ****             }
2744:fltk-1.3.4-1/png/pngread.c **** 
2745:fltk-1.3.4-1/png/pngread.c ****             else /* no alpha or transparency in the input */
2746:fltk-1.3.4-1/png/pngread.c ****             {
2747:fltk-1.3.4-1/png/pngread.c ****                /* Alpha in the output is irrelevant, simply map the opaque input
2748:fltk-1.3.4-1/png/pngread.c ****                 * pixels to the 6x6x6 color-map.
2749:fltk-1.3.4-1/png/pngread.c ****                 */
2750:fltk-1.3.4-1/png/pngread.c ****                if (PNG_RGB_COLORMAP_ENTRIES > image->colormap_entries)
2751:fltk-1.3.4-1/png/pngread.c ****                   png_error(png_ptr, "rgb color-map: too few entries");
2752:fltk-1.3.4-1/png/pngread.c **** 
2753:fltk-1.3.4-1/png/pngread.c ****                cmap_entries = make_rgb_colormap(display);
2754:fltk-1.3.4-1/png/pngread.c ****                output_processing = PNG_CMAP_RGB;
2755:fltk-1.3.4-1/png/pngread.c ****             }
2756:fltk-1.3.4-1/png/pngread.c ****          }
2757:fltk-1.3.4-1/png/pngread.c ****          break;
2758:fltk-1.3.4-1/png/pngread.c **** 
2759:fltk-1.3.4-1/png/pngread.c ****       case PNG_COLOR_TYPE_PALETTE:
2760:fltk-1.3.4-1/png/pngread.c ****          /* It's already got a color-map.  It may be necessary to eliminate the
2761:fltk-1.3.4-1/png/pngread.c ****           * tRNS entries though.
2762:fltk-1.3.4-1/png/pngread.c ****           */
2763:fltk-1.3.4-1/png/pngread.c ****          {
2764:fltk-1.3.4-1/png/pngread.c ****             unsigned int num_trans = png_ptr->num_trans;
 2645              		.loc 1 2764 0
 2646 0130 488B7C24 		movq	32(%rsp), %rdi
 2646      20
 2647 0135 0FB78770 		movzwl	624(%rdi), %eax
 2647      020000
2765:fltk-1.3.4-1/png/pngread.c ****             png_const_bytep trans = num_trans > 0 ? png_ptr->trans_alpha : NULL;
 2648              		.loc 1 2765 0
 2649 013c 85C0     		testl	%eax, %eax
2764:fltk-1.3.4-1/png/pngread.c ****             png_const_bytep trans = num_trans > 0 ? png_ptr->trans_alpha : NULL;
 2650              		.loc 1 2764 0
 2651 013e 89C6     		movl	%eax, %esi
 2652              	.LVL336:
 2653              		.loc 1 2765 0
 2654 0140 0F85F903 		jne	.L447
 2654      0000
 2655              	.LVL337:
2766:fltk-1.3.4-1/png/pngread.c ****             png_const_colorp colormap = png_ptr->palette;
 2656              		.loc 1 2766 0
 2657 0146 488B4424 		movq	32(%rsp), %rax
 2657      20
 2658              	.LVL338:
 2659 014b 4C8B9860 		movq	608(%rax), %r11
 2659      020000
 2660              	.LVL339:
 2661              	.L316:
 2662              	.LBE173:
 2663              	.LBB174:
2704:fltk-1.3.4-1/png/pngread.c ****                      {
 2664              		.loc 1 2704 0
 2665 0152 4531FF   		xorl	%r15d, %r15d
 2666              	.LVL340:
 2667 0155 31C9     		xorl	%ecx, %ecx
 2668              	.LBE174:
 2669              	.LBB176:
2767:fltk-1.3.4-1/png/pngread.c ****             const int do_background = trans != NULL &&
2768:fltk-1.3.4-1/png/pngread.c ****                (output_format & PNG_FORMAT_FLAG_ALPHA) == 0;
2769:fltk-1.3.4-1/png/pngread.c ****             unsigned int i;
2770:fltk-1.3.4-1/png/pngread.c **** 
2771:fltk-1.3.4-1/png/pngread.c ****             /* Just in case: */
2772:fltk-1.3.4-1/png/pngread.c ****             if (trans == NULL)
2773:fltk-1.3.4-1/png/pngread.c ****                num_trans = 0;
 2670              		.loc 1 2773 0
 2671 0157 31F6     		xorl	%esi, %esi
 2672              	.LVL341:
 2673              	.L348:
2774:fltk-1.3.4-1/png/pngread.c **** 
2775:fltk-1.3.4-1/png/pngread.c ****             output_processing = PNG_CMAP_NONE;
2776:fltk-1.3.4-1/png/pngread.c ****             data_encoding = P_FILE; /* Don't change from color-map indices */
2777:fltk-1.3.4-1/png/pngread.c ****             cmap_entries = png_ptr->num_palette;
 2674              		.loc 1 2777 0
 2675 0159 488B4424 		movq	32(%rsp), %rax
 2675      20
 2676 015e BA000100 		movl	$256, %edx
 2676      00
 2677 0163 0FB78068 		movzwl	616(%rax), %eax
 2677      020000
 2678              	.LVL342:
 2679 016a 3D000100 		cmpl	$256, %eax
 2679      00
 2680 016f 0F46D0   		cmovbe	%eax, %edx
2778:fltk-1.3.4-1/png/pngread.c ****             if (cmap_entries > 256)
2779:fltk-1.3.4-1/png/pngread.c ****                cmap_entries = 256;
2780:fltk-1.3.4-1/png/pngread.c **** 
2781:fltk-1.3.4-1/png/pngread.c ****             if (cmap_entries > image->colormap_entries)
 2681              		.loc 1 2781 0
 2682 0172 488B4424 		movq	40(%rsp), %rax
 2682      28
 2683              	.LVL343:
 2684 0177 4189D6   		movl	%edx, %r14d
 2685              	.LVL344:
 2686 017a 39501C   		cmpl	%edx, 28(%rax)
 2687 017d 0F821511 		jb	.L317
 2687      0000
 2688              	.LVL345:
 2689 0183 4489F8   		movl	%r15d, %eax
2782:fltk-1.3.4-1/png/pngread.c ****                png_error(png_ptr, "palette color-map: too few entries");
2783:fltk-1.3.4-1/png/pngread.c **** 
2784:fltk-1.3.4-1/png/pngread.c ****             for (i=0; i < cmap_entries; ++i)
 2690              		.loc 1 2784 0 discriminator 1
 2691 0186 4531E4   		xorl	%r12d, %r12d
 2692 0189 4D8D6B02 		leaq	2(%r11), %r13
 2693 018d 83E001   		andl	$1, %eax
 2694 0190 85D2     		testl	%edx, %edx
 2695 0192 88442410 		movb	%al, 16(%rsp)
 2696 0196 0F843701 		je	.L328
 2696      0000
 2697 019c 891424   		movl	%edx, (%rsp)
 2698 019f 4189F7   		movl	%esi, %r15d
 2699 01a2 4989CE   		movq	%rcx, %r14
 2700 01a5 E9D90000 		jmp	.L402
 2700      00
 2701              	.LVL346:
 2702 01aa 660F1F44 		.p2align 4,,10
 2702      0000
 2703              		.p2align 3
 2704              	.L451:
2785:fltk-1.3.4-1/png/pngread.c ****             {
2786:fltk-1.3.4-1/png/pngread.c ****                if (do_background != 0 && i < num_trans && trans[i] < 255)
 2705              		.loc 1 2786 0
 2706 01b0 807C2410 		cmpb	$0, 16(%rsp)
 2706      00
 2707 01b5 0F84D400 		je	.L320
 2707      0000
 2708              		.loc 1 2786 0 is_stmt 0 discriminator 1
 2709 01bb 470FB614 		movzbl	(%r14,%r12), %r10d
 2709      26
 2710 01c0 4180FAFF 		cmpb	$-1, %r10b
 2711 01c4 0F844607 		je	.L321
 2711      0000
2787:fltk-1.3.4-1/png/pngread.c ****                {
2788:fltk-1.3.4-1/png/pngread.c ****                   if (trans[i] == 0)
 2712              		.loc 1 2788 0 is_stmt 1
 2713 01ca 4584D2   		testb	%r10b, %r10b
 2714 01cd 0F844D07 		je	.L448
 2714      0000
2789:fltk-1.3.4-1/png/pngread.c ****                      png_create_colormap_entry(display, i, back_r, back_g,
2790:fltk-1.3.4-1/png/pngread.c ****                         back_b, 0, output_encoding);
2791:fltk-1.3.4-1/png/pngread.c **** 
2792:fltk-1.3.4-1/png/pngread.c ****                   else
2793:fltk-1.3.4-1/png/pngread.c ****                   {
2794:fltk-1.3.4-1/png/pngread.c ****                      /* Must compose the PNG file color in the color-map entry
2795:fltk-1.3.4-1/png/pngread.c ****                       * on the sRGB color in 'back'.
2796:fltk-1.3.4-1/png/pngread.c ****                       */
2797:fltk-1.3.4-1/png/pngread.c ****                      png_create_colormap_entry(display, i,
 2715              		.loc 1 2797 0
 2716 01d3 83FD02   		cmpl	$2, %ebp
 2717 01d6 4489D1   		movl	%r10d, %ecx
 2718 01d9 0F841908 		je	.L449
 2718      0000
 2719              	.L325:
 2720              		.loc 1 2797 0 is_stmt 0 discriminator 4
 2721 01df 410FB675 		movzbl	0(%r13), %esi
 2721      00
 2722 01e4 448B4424 		movl	28(%rsp), %r8d
 2722      1C
 2723 01e9 4189E9   		movl	%ebp, %r9d
 2724 01ec BA030000 		movl	$3, %edx
 2724      00
 2725 01f1 4889DF   		movq	%rbx, %rdi
 2726 01f4 44895C24 		movl	%r11d, 56(%rsp)
 2726      38
 2727 01f9 44895424 		movl	%r10d, 52(%rsp)
 2727      34
 2728 01fe E8000000 		call	png_colormap_compose
 2728      00
 2729              	.LVL347:
 2730 0203 430FB60C 		movzbl	(%r14,%r12), %ecx
 2730      26
 2731 0208 410FB675 		movzbl	-1(%r13), %esi
 2731      FF
 2732 020d 4189E9   		movl	%ebp, %r9d
 2733 0210 448B4424 		movl	12(%rsp), %r8d
 2733      0C
 2734 0215 BA030000 		movl	$3, %edx
 2734      00
 2735 021a 4889DF   		movq	%rbx, %rdi
 2736 021d 89442414 		movl	%eax, 20(%rsp)
 2737 0221 E8000000 		call	png_colormap_compose
 2737      00
 2738              	.LVL348:
 2739 0226 430FB60C 		movzbl	(%r14,%r12), %ecx
 2739      26
 2740 022b 410FB675 		movzbl	-2(%r13), %esi
 2740      FE
 2741 0230 4189E9   		movl	%ebp, %r9d
 2742 0233 448B4424 		movl	24(%rsp), %r8d
 2742      18
 2743 0238 BA030000 		movl	$3, %edx
 2743      00
 2744 023d 4889DF   		movq	%rbx, %rdi
 2745 0240 89442430 		movl	%eax, 48(%rsp)
 2746 0244 E8000000 		call	png_colormap_compose
 2746      00
 2747              	.LVL349:
 2748 0249 4883EC08 		subq	$8, %rsp
 2749              		.cfi_def_cfa_offset 168
 2750              	.LVL350:
 2751 024d 89C2     		movl	%eax, %edx
 2752 024f 4889DF   		movq	%rbx, %rdi
 2753 0252 55       		pushq	%rbp
 2754              		.cfi_def_cfa_offset 176
 2755 0253 448B5424 		movl	68(%rsp), %r10d
 2755      44
 2756 0258 448B5C24 		movl	72(%rsp), %r11d
 2756      48
 2757 025d 448B4424 		movl	36(%rsp), %r8d
 2757      24
 2758 0262 8B4C2440 		movl	64(%rsp), %ecx
 2759 0266 4589D1   		movl	%r10d, %r9d
 2760 0269 4489DE   		movl	%r11d, %esi
 2761 026c E8000000 		call	png_create_colormap_entry
 2761      00
 2762              	.LVL351:
 2763 0271 4159     		popq	%r9
 2764              		.cfi_def_cfa_offset 168
 2765 0273 415A     		popq	%r10
 2766              		.cfi_def_cfa_offset 160
 2767              	.LVL352:
 2768              	.L323:
 2769 0275 4983C401 		addq	$1, %r12
 2770              	.LVL353:
 2771 0279 4983C503 		addq	$3, %r13
2784:fltk-1.3.4-1/png/pngread.c ****             {
 2772              		.loc 1 2784 0 is_stmt 1 discriminator 2
 2773 027d 44392424 		cmpl	%r12d, (%rsp)
 2774 0281 764C     		jbe	.L450
 2775              	.L402:
2786:fltk-1.3.4-1/png/pngread.c ****                {
 2776              		.loc 1 2786 0
 2777 0283 4539E7   		cmpl	%r12d, %r15d
 2778 0286 4589E3   		movl	%r12d, %r11d
 2779              	.LVL354:
 2780 0289 0F8721FF 		ja	.L451
 2780      FFFF
 2781              	.L320:
2798:fltk-1.3.4-1/png/pngread.c ****                         png_colormap_compose(display, colormap[i].red, P_FILE,
2799:fltk-1.3.4-1/png/pngread.c ****                            trans[i], back_r, output_encoding),
2800:fltk-1.3.4-1/png/pngread.c ****                         png_colormap_compose(display, colormap[i].green, P_FILE,
2801:fltk-1.3.4-1/png/pngread.c ****                            trans[i], back_g, output_encoding),
2802:fltk-1.3.4-1/png/pngread.c ****                         png_colormap_compose(display, colormap[i].blue, P_FILE,
2803:fltk-1.3.4-1/png/pngread.c ****                            trans[i], back_b, output_encoding),
2804:fltk-1.3.4-1/png/pngread.c ****                         output_encoding == P_LINEAR ? trans[i] * 257U :
2805:fltk-1.3.4-1/png/pngread.c ****                            trans[i],
2806:fltk-1.3.4-1/png/pngread.c ****                         output_encoding);
2807:fltk-1.3.4-1/png/pngread.c ****                   }
2808:fltk-1.3.4-1/png/pngread.c ****                }
2809:fltk-1.3.4-1/png/pngread.c **** 
2810:fltk-1.3.4-1/png/pngread.c ****                else
2811:fltk-1.3.4-1/png/pngread.c ****                   png_create_colormap_entry(display, i, colormap[i].red,
 2782              		.loc 1 2811 0
 2783 028f 4539DF   		cmpl	%r11d, %r15d
 2784 0292 41B9FF00 		movl	$255, %r9d
 2784      0000
 2785 0298 0F877206 		ja	.L321
 2785      0000
 2786              	.L326:
 2787              		.loc 1 2811 0 is_stmt 0 discriminator 4
 2788 029e 4883EC08 		subq	$8, %rsp
 2789              		.cfi_def_cfa_offset 168
 2790              	.LVL355:
 2791 02a2 410FB64D 		movzbl	-1(%r13), %ecx
 2791      FF
 2792 02a7 410FB655 		movzbl	-2(%r13), %edx
 2792      FE
 2793 02ac 6A03     		pushq	$3
 2794              		.cfi_def_cfa_offset 176
 2795 02ae 450FB645 		movzbl	0(%r13), %r8d
 2795      00
 2796 02b3 4889DF   		movq	%rbx, %rdi
 2797 02b6 4489DE   		movl	%r11d, %esi
 2798 02b9 4983C401 		addq	$1, %r12
 2799 02bd 4983C503 		addq	$3, %r13
 2800 02c1 E8000000 		call	png_create_colormap_entry
 2800      00
 2801              	.LVL356:
 2802 02c6 5F       		popq	%rdi
 2803              		.cfi_def_cfa_offset 168
 2804 02c7 4158     		popq	%r8
 2805              		.cfi_def_cfa_offset 160
 2806              	.LVL357:
2784:fltk-1.3.4-1/png/pngread.c ****             {
 2807              		.loc 1 2784 0 is_stmt 1 discriminator 4
 2808 02c9 44392424 		cmpl	%r12d, (%rsp)
 2809 02cd 77B4     		ja	.L402
 2810              	.L450:
 2811 02cf 448B3424 		movl	(%rsp), %r14d
 2812              	.LVL358:
 2813              	.L328:
2812:fltk-1.3.4-1/png/pngread.c ****                      colormap[i].green, colormap[i].blue,
2813:fltk-1.3.4-1/png/pngread.c ****                      i < num_trans ? trans[i] : 255U, P_FILE/*8-bit*/);
2814:fltk-1.3.4-1/png/pngread.c ****             }
2815:fltk-1.3.4-1/png/pngread.c **** 
2816:fltk-1.3.4-1/png/pngread.c ****             /* The PNG data may have indices packed in fewer than 8 bits, it
2817:fltk-1.3.4-1/png/pngread.c ****              * must be expanded if so.
2818:fltk-1.3.4-1/png/pngread.c ****              */
2819:fltk-1.3.4-1/png/pngread.c ****             if (png_ptr->bit_depth < 8)
 2814              		.loc 1 2819 0
 2815 02d3 488B4424 		movq	32(%rsp), %rax
 2815      20
 2816 02d8 0FB68078 		movzbl	632(%rax), %eax
 2816      020000
 2817 02df 3C07     		cmpb	$7, %al
 2818 02e1 0F86A909 		jbe	.L452
 2818      0000
 2819              	.L262:
 2820              	.LVL359:
 2821              	.LBE176:
2535:fltk-1.3.4-1/png/pngread.c ****                   png_ptr->num_trans > 0)
 2822              		.loc 1 2535 0
 2823 02e7 31ED     		xorl	%ebp, %ebp
2820:fltk-1.3.4-1/png/pngread.c ****                png_set_packing(png_ptr);
2821:fltk-1.3.4-1/png/pngread.c ****          }
2822:fltk-1.3.4-1/png/pngread.c ****          break;
2823:fltk-1.3.4-1/png/pngread.c **** 
2824:fltk-1.3.4-1/png/pngread.c ****       default:
2825:fltk-1.3.4-1/png/pngread.c ****          png_error(png_ptr, "invalid PNG color type");
2826:fltk-1.3.4-1/png/pngread.c ****          /*NOT REACHED*/
2827:fltk-1.3.4-1/png/pngread.c ****          break;
2828:fltk-1.3.4-1/png/pngread.c ****    }
2829:fltk-1.3.4-1/png/pngread.c **** 
2830:fltk-1.3.4-1/png/pngread.c ****    /* Now deal with the output processing */
2831:fltk-1.3.4-1/png/pngread.c ****    if (expand_tRNS != 0 && png_ptr->num_trans > 0 &&
2832:fltk-1.3.4-1/png/pngread.c ****        (png_ptr->color_type & PNG_COLOR_MASK_ALPHA) == 0)
2833:fltk-1.3.4-1/png/pngread.c ****       png_set_tRNS_to_alpha(png_ptr);
2834:fltk-1.3.4-1/png/pngread.c **** 
2835:fltk-1.3.4-1/png/pngread.c ****    switch (data_encoding)
2836:fltk-1.3.4-1/png/pngread.c ****    {
2837:fltk-1.3.4-1/png/pngread.c ****       default:
2838:fltk-1.3.4-1/png/pngread.c ****          png_error(png_ptr, "bad data option (internal error)");
2839:fltk-1.3.4-1/png/pngread.c ****          break;
2840:fltk-1.3.4-1/png/pngread.c **** 
2841:fltk-1.3.4-1/png/pngread.c ****       case P_sRGB:
2842:fltk-1.3.4-1/png/pngread.c ****          /* Change to 8-bit sRGB */
2843:fltk-1.3.4-1/png/pngread.c ****          png_set_alpha_mode_fixed(png_ptr, PNG_ALPHA_PNG, PNG_GAMMA_sRGB);
2844:fltk-1.3.4-1/png/pngread.c ****          /* FALL THROUGH */
2845:fltk-1.3.4-1/png/pngread.c **** 
2846:fltk-1.3.4-1/png/pngread.c ****       case P_FILE:
2847:fltk-1.3.4-1/png/pngread.c ****          if (png_ptr->bit_depth > 8)
 2824              		.loc 1 2847 0
 2825 02e9 3C08     		cmpb	$8, %al
2535:fltk-1.3.4-1/png/pngread.c ****                   png_ptr->num_trans > 0)
 2826              		.loc 1 2535 0
 2827 02eb C7442434 		movl	$256, 52(%rsp)
 2827      00010000 
 2828              		.loc 1 2847 0
 2829 02f3 0F868B00 		jbe	.L333
 2829      0000
 2830              	.LVL360:
 2831              	.L455:
2848:fltk-1.3.4-1/png/pngread.c ****             png_set_scale_16(png_ptr);
 2832              		.loc 1 2848 0
 2833 02f9 488B7C24 		movq	32(%rsp), %rdi
 2833      20
 2834 02fe E8000000 		call	png_set_scale_16
 2834      00
 2835              	.LVL361:
 2836 0303 EB7F     		jmp	.L333
 2837              	.LVL362:
 2838              		.p2align 4,,10
 2839 0305 0F1F00   		.p2align 3
 2840              	.L253:
2470:fltk-1.3.4-1/png/pngread.c ****          {
 2841              		.loc 1 2470 0
 2842 0308 41F6C702 		testb	$2, %r15b
 2843 030c 0F841105 		je	.L453
 2843      0000
 2844              	.LVL363:
2606:fltk-1.3.4-1/png/pngread.c ****                png_ptr->num_trans > 0)
 2845              		.loc 1 2606 0
 2846 0312 3C06     		cmpb	$6, %al
 2847 0314 0F840907 		je	.L299
 2847      0000
2606:fltk-1.3.4-1/png/pngread.c ****                png_ptr->num_trans > 0)
 2848              		.loc 1 2606 0 is_stmt 0 discriminator 1
 2849 031a 488B4424 		movq	32(%rsp), %rax
 2849      20
 2850 031f 6683B870 		cmpw	$0, 624(%rax)
 2850      02000000 
 2851 0327 0F85F606 		jne	.L299
 2851      0000
2750:fltk-1.3.4-1/png/pngread.c ****                   png_error(png_ptr, "rgb color-map: too few entries");
 2852              		.loc 1 2750 0 is_stmt 1
 2853 032d 488B4424 		movq	40(%rsp), %rax
 2853      28
 2854 0332 81781CD7 		cmpl	$215, 28(%rax)
 2854      000000
 2855 0339 0F863B0F 		jbe	.L454
 2855      0000
2753:fltk-1.3.4-1/png/pngread.c ****                output_processing = PNG_CMAP_RGB;
 2856              		.loc 1 2753 0
 2857 033f 4889DF   		movq	%rbx, %rdi
2754:fltk-1.3.4-1/png/pngread.c ****             }
 2858              		.loc 1 2754 0
 2859 0342 BD030000 		movl	$3, %ebp
 2859      00
 2860              	.LVL364:
2753:fltk-1.3.4-1/png/pngread.c ****                output_processing = PNG_CMAP_RGB;
 2861              		.loc 1 2753 0
 2862 0347 E8000000 		call	make_rgb_colormap
 2862      00
 2863              	.LVL365:
2077:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 back_r, back_g, back_b;
 2864              		.loc 1 2077 0
 2865 034c C7442434 		movl	$256, 52(%rsp)
 2865      00010000 
2753:fltk-1.3.4-1/png/pngread.c ****                output_processing = PNG_CMAP_RGB;
 2866              		.loc 1 2753 0
 2867 0354 4189C6   		movl	%eax, %r14d
 2868              	.LVL366:
 2869 0357 660F1F84 		.p2align 4,,10
 2869      00000000 
 2869      00
 2870              		.p2align 3
 2871              	.L330:
2843:fltk-1.3.4-1/png/pngread.c ****          /* FALL THROUGH */
 2872              		.loc 1 2843 0
 2873 0360 4C8B7C24 		movq	32(%rsp), %r15
 2873      20
 2874 0365 BA605B03 		movl	$220000, %edx
 2874      00
 2875 036a 31F6     		xorl	%esi, %esi
 2876 036c 4C89FF   		movq	%r15, %rdi
 2877 036f E8000000 		call	png_set_alpha_mode_fixed
 2877      00
 2878              	.LVL367:
 2879 0374 410FB687 		movzbl	632(%r15), %eax
 2879      78020000 
 2880              	.L332:
2847:fltk-1.3.4-1/png/pngread.c ****             png_set_scale_16(png_ptr);
 2881              		.loc 1 2847 0
 2882 037c 3C08     		cmpb	$8, %al
 2883 037e 0F8775FF 		ja	.L455
 2883      FFFF
 2884              	.L333:
2849:fltk-1.3.4-1/png/pngread.c ****          break;
2850:fltk-1.3.4-1/png/pngread.c ****    }
2851:fltk-1.3.4-1/png/pngread.c **** 
2852:fltk-1.3.4-1/png/pngread.c ****    if (cmap_entries > 256 || cmap_entries > image->colormap_entries)
 2885              		.loc 1 2852 0
 2886 0384 4181FE00 		cmpl	$256, %r14d
 2886      010000
 2887 038b 0F871B0F 		ja	.L334
 2887      0000
 2888              		.loc 1 2852 0 is_stmt 0 discriminator 1
 2889 0391 488B4424 		movq	40(%rsp), %rax
 2889      28
 2890 0396 4439701C 		cmpl	%r14d, 28(%rax)
 2891 039a 0F820C0F 		jb	.L334
 2891      0000
2853:fltk-1.3.4-1/png/pngread.c ****       png_error(png_ptr, "color map overflow (BAD internal error)");
2854:fltk-1.3.4-1/png/pngread.c **** 
2855:fltk-1.3.4-1/png/pngread.c ****    image->colormap_entries = cmap_entries;
 2892              		.loc 1 2855 0 is_stmt 1
 2893 03a0 488B4424 		movq	40(%rsp), %rax
 2893      28
2856:fltk-1.3.4-1/png/pngread.c **** 
2857:fltk-1.3.4-1/png/pngread.c ****    /* Double check using the recorded background index */
2858:fltk-1.3.4-1/png/pngread.c ****    switch (output_processing)
 2894              		.loc 1 2858 0
 2895 03a5 83FD02   		cmpl	$2, %ebp
2855:fltk-1.3.4-1/png/pngread.c **** 
 2896              		.loc 1 2855 0
 2897 03a8 4489701C 		movl	%r14d, 28(%rax)
 2898              		.loc 1 2858 0
 2899 03ac 0F84C108 		je	.L337
 2899      0000
 2900 03b2 0F86B805 		jbe	.L456
 2900      0000
 2901 03b8 83FD03   		cmpl	$3, %ebp
 2902 03bb 0F848F05 		je	.L340
 2902      0000
 2903 03c1 83FD04   		cmpl	$4, %ebp
 2904 03c4 0F858605 		jne	.L340
 2904      0000
2859:fltk-1.3.4-1/png/pngread.c ****    {
2860:fltk-1.3.4-1/png/pngread.c ****       case PNG_CMAP_NONE:
2861:fltk-1.3.4-1/png/pngread.c ****          if (background_index != PNG_CMAP_NONE_BACKGROUND)
2862:fltk-1.3.4-1/png/pngread.c ****             goto bad_background;
2863:fltk-1.3.4-1/png/pngread.c ****          break;
2864:fltk-1.3.4-1/png/pngread.c **** 
2865:fltk-1.3.4-1/png/pngread.c ****       case PNG_CMAP_GA:
2866:fltk-1.3.4-1/png/pngread.c ****          if (background_index != PNG_CMAP_GA_BACKGROUND)
2867:fltk-1.3.4-1/png/pngread.c ****             goto bad_background;
2868:fltk-1.3.4-1/png/pngread.c ****          break;
2869:fltk-1.3.4-1/png/pngread.c **** 
2870:fltk-1.3.4-1/png/pngread.c ****       case PNG_CMAP_TRANS:
2871:fltk-1.3.4-1/png/pngread.c ****          if (background_index >= cmap_entries ||
2872:fltk-1.3.4-1/png/pngread.c ****             background_index != PNG_CMAP_TRANS_BACKGROUND)
2873:fltk-1.3.4-1/png/pngread.c ****             goto bad_background;
2874:fltk-1.3.4-1/png/pngread.c ****          break;
2875:fltk-1.3.4-1/png/pngread.c **** 
2876:fltk-1.3.4-1/png/pngread.c ****       case PNG_CMAP_RGB:
2877:fltk-1.3.4-1/png/pngread.c ****          if (background_index != PNG_CMAP_RGB_BACKGROUND)
2878:fltk-1.3.4-1/png/pngread.c ****             goto bad_background;
2879:fltk-1.3.4-1/png/pngread.c ****          break;
2880:fltk-1.3.4-1/png/pngread.c **** 
2881:fltk-1.3.4-1/png/pngread.c ****       case PNG_CMAP_RGB_ALPHA:
2882:fltk-1.3.4-1/png/pngread.c ****          if (background_index != PNG_CMAP_RGB_ALPHA_BACKGROUND)
 2905              		.loc 1 2882 0
 2906 03ca 817C2434 		cmpl	$216, 52(%rsp)
 2906      D8000000 
 2907 03d2 0F858605 		jne	.L342
 2907      0000
 2908              	.L343:
2883:fltk-1.3.4-1/png/pngread.c ****             goto bad_background;
2884:fltk-1.3.4-1/png/pngread.c ****          break;
2885:fltk-1.3.4-1/png/pngread.c **** 
2886:fltk-1.3.4-1/png/pngread.c ****       default:
2887:fltk-1.3.4-1/png/pngread.c ****          png_error(png_ptr, "bad processing option (internal error)");
2888:fltk-1.3.4-1/png/pngread.c **** 
2889:fltk-1.3.4-1/png/pngread.c ****       bad_background:
2890:fltk-1.3.4-1/png/pngread.c ****          png_error(png_ptr, "bad background index (internal error)");
2891:fltk-1.3.4-1/png/pngread.c ****    }
2892:fltk-1.3.4-1/png/pngread.c **** 
2893:fltk-1.3.4-1/png/pngread.c ****    display->colormap_processing = output_processing;
 2909              		.loc 1 2893 0
 2910 03d8 896B48   		movl	%ebp, 72(%rbx)
2894:fltk-1.3.4-1/png/pngread.c **** 
2895:fltk-1.3.4-1/png/pngread.c ****    return 1/*ok*/;
2896:fltk-1.3.4-1/png/pngread.c **** }
 2911              		.loc 1 2896 0
 2912 03db B8010000 		movl	$1, %eax
 2912      00
 2913 03e0 488B5C24 		movq	88(%rsp), %rbx
 2913      58
 2914 03e5 6448331C 		xorq	%fs:40, %rbx
 2914      25280000 
 2914      00
 2915 03ee 0F85B30E 		jne	.L457
 2915      0000
 2916 03f4 4883C468 		addq	$104, %rsp
 2917              		.cfi_remember_state
 2918              		.cfi_def_cfa_offset 56
 2919 03f8 5B       		popq	%rbx
 2920              		.cfi_def_cfa_offset 48
 2921 03f9 5D       		popq	%rbp
 2922              		.cfi_def_cfa_offset 40
 2923 03fa 415C     		popq	%r12
 2924              		.cfi_def_cfa_offset 32
 2925 03fc 415D     		popq	%r13
 2926              		.cfi_def_cfa_offset 24
 2927 03fe 415E     		popq	%r14
 2928              		.cfi_def_cfa_offset 16
 2929 0400 415F     		popq	%r15
 2930              		.cfi_def_cfa_offset 8
 2931 0402 C3       		ret
 2932              	.LVL368:
 2933              		.p2align 4,,10
 2934 0403 0F1F4400 		.p2align 3
 2934      00
 2935              	.L255:
 2936              		.cfi_restore_state
2329:fltk-1.3.4-1/png/pngread.c ****          {
 2937              		.loc 1 2329 0
 2938 0408 41F6C701 		testb	$1, %r15b
 2939 040c 0F84CB01 		je	.L269
 2939      0000
2331:fltk-1.3.4-1/png/pngread.c ****                png_error(png_ptr, "gray+alpha color-map: too few entries");
 2940              		.loc 1 2331 0
 2941 0412 488B4424 		movq	40(%rsp), %rax
 2941      28
 2942 0417 81781CFF 		cmpl	$255, 28(%rax)
 2942      000000
 2943 041e 0F86930D 		jbe	.L458
 2943      0000
2334:fltk-1.3.4-1/png/pngread.c **** 
 2944              		.loc 1 2334 0
 2945 0424 4889DF   		movq	%rbx, %rdi
2337:fltk-1.3.4-1/png/pngread.c ****          }
 2946              		.loc 1 2337 0
 2947 0427 BD010000 		movl	$1, %ebp
 2947      00
 2948              	.LVL369:
2334:fltk-1.3.4-1/png/pngread.c **** 
 2949              		.loc 1 2334 0
 2950 042c E8000000 		call	make_ga_colormap
 2950      00
 2951              	.LVL370:
2336:fltk-1.3.4-1/png/pngread.c ****             output_processing = PNG_CMAP_GA;
 2952              		.loc 1 2336 0
 2953 0431 C7442434 		movl	$231, 52(%rsp)
 2953      E7000000 
2334:fltk-1.3.4-1/png/pngread.c **** 
 2954              		.loc 1 2334 0
 2955 0439 4189C6   		movl	%eax, %r14d
 2956              	.LVL371:
 2957 043c E91FFFFF 		jmp	.L330
 2957      FF
 2958              	.LVL372:
 2959              		.p2align 4,,10
 2960 0441 0F1F8000 		.p2align 3
 2960      000000
 2961              	.L251:
2152:fltk-1.3.4-1/png/pngread.c ****          {
 2962              		.loc 1 2152 0
 2963 0448 488B4424 		movq	32(%rsp), %rax
 2963      20
 2964 044d 0FB68878 		movzbl	632(%rax), %ecx
 2964      020000
 2965 0454 80F908   		cmpb	$8, %cl
 2966 0457 0F870601 		ja	.L256
 2966      0000
 2967              	.LVL373:
 2968              	.LBB177:
2159:fltk-1.3.4-1/png/pngread.c ****             if (cmap_entries > image->colormap_entries)
 2969              		.loc 1 2159 0
 2970 045d B8010000 		movl	$1, %eax
 2970      00
 2971 0462 D3E0     		sall	%cl, %eax
 2972 0464 4189C6   		movl	%eax, %r14d
 2973              	.LVL374:
2160:fltk-1.3.4-1/png/pngread.c ****                png_error(png_ptr, "gray[8] color-map: too few entries");
 2974              		.loc 1 2160 0
 2975 0467 488B4424 		movq	40(%rsp), %rax
 2975      28
 2976              	.LVL375:
 2977 046c 443B701C 		cmpl	28(%rax), %r14d
 2978 0470 0F87500D 		ja	.L459
 2978      0000
2163:fltk-1.3.4-1/png/pngread.c ****             output_processing = PNG_CMAP_NONE;
 2979              		.loc 1 2163 0
 2980 0476 418D76FF 		leal	-1(%r14), %esi
 2981 047a B9FF0000 		movl	$255, %ecx
 2981      00
 2982 047f 31D2     		xorl	%edx, %edx
 2983 0481 89C8     		movl	%ecx, %eax
 2984 0483 F7F6     		divl	%esi
 2985 0485 89C7     		movl	%eax, %edi
 2986              	.LVL376:
2169:fltk-1.3.4-1/png/pngread.c ****             {
 2987              		.loc 1 2169 0
 2988 0487 488B4424 		movq	32(%rsp), %rax
 2988      20
 2989              	.LVL377:
 2990 048c 6683B870 		cmpw	$0, 624(%rax)
 2990      02000000 
 2991 0494 0F841008 		je	.L356
 2991      0000
2173:fltk-1.3.4-1/png/pngread.c ****                   back_alpha = output_encoding == P_LINEAR ? 65535 : 255;
 2992              		.loc 1 2173 0
 2993 049a 4183E701 		andl	$1, %r15d
 2994              	.LVL378:
2171:fltk-1.3.4-1/png/pngread.c **** 
 2995              		.loc 1 2171 0
 2996 049e 440FB7A0 		movzwl	776(%rax), %r12d
 2996      08030000 
 2997              	.LVL379:
2157:fltk-1.3.4-1/png/pngread.c **** 
 2998              		.loc 1 2157 0
 2999 04a6 C7042400 		movl	$0, (%rsp)
 2999      000000
2173:fltk-1.3.4-1/png/pngread.c ****                   back_alpha = output_encoding == P_LINEAR ? 65535 : 255;
 3000              		.loc 1 2173 0
 3001 04ad 0F84D708 		je	.L460
 3001      0000
 3002              	.LVL380:
 3003              	.L258:
2184:fltk-1.3.4-1/png/pngread.c ****             {
 3004              		.loc 1 2184 0
 3005 04b3 896C2410 		movl	%ebp, 16(%rsp)
 3006 04b7 4531ED   		xorl	%r13d, %r13d
 3007 04ba 4531FF   		xorl	%r15d, %r15d
 3008 04bd 89FD     		movl	%edi, %ebp
 3009              	.LVL381:
 3010 04bf 90       		.p2align 4,,10
 3011              		.p2align 3
 3012              	.L261:
2190:fltk-1.3.4-1/png/pngread.c ****                   png_create_colormap_entry(display, i, val, val, val, 255,
 3013              		.loc 1 2190 0
 3014 04c0 4539FC   		cmpl	%r15d, %r12d
 3015 04c3 0F841B0D 		je	.L259
 3015      0000
2191:fltk-1.3.4-1/png/pngread.c ****                      P_FILE/*8-bit with file gamma*/);
 3016              		.loc 1 2191 0
 3017 04c9 4883EC08 		subq	$8, %rsp
 3018              		.cfi_def_cfa_offset 168
 3019              	.LVL382:
 3020 04cd 4489E9   		movl	%r13d, %ecx
 3021 04d0 4489FE   		movl	%r15d, %esi
 3022 04d3 6A03     		pushq	$3
 3023              		.cfi_def_cfa_offset 176
 3024 04d5 41B9FF00 		movl	$255, %r9d
 3024      0000
 3025 04db 4589E8   		movl	%r13d, %r8d
 3026 04de 4489EA   		movl	%r13d, %edx
 3027 04e1 4889DF   		movq	%rbx, %rdi
 3028 04e4 E8000000 		call	png_create_colormap_entry
 3028      00
 3029              	.LVL383:
 3030 04e9 59       		popq	%rcx
 3031              		.cfi_def_cfa_offset 168
 3032 04ea 5E       		popq	%rsi
 3033              		.cfi_def_cfa_offset 160
 3034              	.LVL384:
 3035              	.L260:
2184:fltk-1.3.4-1/png/pngread.c ****             {
 3036              		.loc 1 2184 0 discriminator 2
 3037 04eb 4183C701 		addl	$1, %r15d
 3038              	.LVL385:
 3039 04ef 4101ED   		addl	%ebp, %r13d
 3040              	.LVL386:
 3041 04f2 4539FE   		cmpl	%r15d, %r14d
 3042 04f5 75C9     		jne	.L261
 3043 04f7 E9D7FDFF 		jmp	.L328
 3043      FF
 3044              	.LVL387:
 3045 04fc 0F1F4000 		.p2align 4,,10
 3046              		.p2align 3
 3047              	.L250:
 3048              	.LBE177:
2825:fltk-1.3.4-1/png/pngread.c ****          /*NOT REACHED*/
 3049              		.loc 1 2825 0
 3050 0500 488B7C24 		movq	32(%rsp), %rdi
 3050      20
 3051 0505 BE000000 		movl	$.LC31, %esi
 3051      00
 3052 050a E8000000 		call	png_error
 3052      00
 3053              	.LVL388:
 3054 050f 90       		.p2align 4,,10
 3055              		.p2align 3
 3056              	.L445:
2134:fltk-1.3.4-1/png/pngread.c ****          (image->flags & PNG_IMAGE_FLAG_16BIT_sRGB) == 0)
 3057              		.loc 1 2134 0 discriminator 1
 3058 0510 488B4C24 		movq	40(%rsp), %rcx
 3058      28
 3059 0515 F6411804 		testb	$4, 24(%rcx)
 3060 0519 0F8587FB 		jne	.L248
 3060      FFFF
2136:fltk-1.3.4-1/png/pngread.c **** 
 3061              		.loc 1 2136 0
 3062 051f C787D804 		movl	$100000, 1240(%rdi)
 3062      0000A086 
 3062      0100
 3063              	.LVL389:
 3064 0529 E987FBFF 		jmp	.L249
 3064      FF
 3065              	.LVL390:
 3066              	.L354:
2112:fltk-1.3.4-1/png/pngread.c ****       }
 3067              		.loc 1 2112 0
 3068 052e 8B7C240C 		movl	12(%rsp), %edi
 3069              	.LVL391:
 3070 0532 897C241C 		movl	%edi, 28(%rsp)
 3071 0536 897C2418 		movl	%edi, 24(%rsp)
 3072 053a E949FBFF 		jmp	.L245
 3072      FF
 3073              	.LVL392:
 3074              	.L447:
 3075              	.LBB178:
2765:fltk-1.3.4-1/png/pngread.c ****             png_const_colorp colormap = png_ptr->palette;
 3076              		.loc 1 2765 0 discriminator 1
 3077 053f 488B8FF8 		movq	760(%rdi), %rcx
 3077      020000
 3078              	.LVL393:
2766:fltk-1.3.4-1/png/pngread.c ****             const int do_background = trans != NULL &&
 3079              		.loc 1 2766 0 discriminator 1
 3080 0546 4C8B9F60 		movq	608(%rdi), %r11
 3080      020000
 3081              	.LVL394:
2767:fltk-1.3.4-1/png/pngread.c ****                (output_format & PNG_FORMAT_FLAG_ALPHA) == 0;
 3082              		.loc 1 2767 0 discriminator 1
 3083 054d 4885C9   		testq	%rcx, %rcx
 3084 0550 0F84FCFB 		je	.L316
 3084      FFFF
 3085 0556 4183E701 		andl	$1, %r15d
 3086              	.LVL395:
 3087 055a 4183F701 		xorl	$1, %r15d
 3088              	.LVL396:
 3089 055e E9F6FBFF 		jmp	.L348
 3089      FF
 3090              	.LVL397:
 3091              	.L256:
 3092              	.LBE178:
2239:fltk-1.3.4-1/png/pngread.c ****                png_error(png_ptr, "gray[16] color-map: too few entries");
 3093              		.loc 1 2239 0
 3094 0563 488B4424 		movq	40(%rsp), %rax
 3094      28
 3095 0568 81781CFF 		cmpl	$255, 28(%rax)
 3095      000000
 3096 056f 0F86D80C 		jbe	.L461
 3096      0000
2242:fltk-1.3.4-1/png/pngread.c **** 
 3097              		.loc 1 2242 0
 3098 0575 4889DF   		movq	%rbx, %rdi
 3099 0578 E8000000 		call	make_gray_colormap
 3099      00
 3100              	.LVL398:
 3101 057d 4189C6   		movl	%eax, %r14d
 3102              	.LVL399:
2244:fltk-1.3.4-1/png/pngread.c ****             {
 3103              		.loc 1 2244 0
 3104 0580 488B4424 		movq	32(%rsp), %rax
 3104      20
 3105              	.LVL400:
 3106 0585 6683B870 		cmpw	$0, 624(%rax)
 3106      02000000 
 3107 058d 0F845104 		je	.L436
 3107      0000
 3108              	.LBB179:
2248:fltk-1.3.4-1/png/pngread.c ****                   back_alpha = 0;
 3109              		.loc 1 2248 0
 3110 0593 4183E701 		andl	$1, %r15d
 3111              	.LVL401:
 3112 0597 0F853508 		jne	.L360
 3112      0000
2253:fltk-1.3.4-1/png/pngread.c ****                   {
 3113              		.loc 1 2253 0
 3114 059d 8B44240C 		movl	12(%rsp), %eax
 3115 05a1 39442418 		cmpl	%eax, 24(%rsp)
 3116 05a5 0F855E08 		jne	.L266
 3116      0000
 3117 05ab 8B4C241C 		movl	28(%rsp), %ecx
 3118 05af 39C8     		cmpl	%ecx, %eax
 3119 05b1 0F855208 		jne	.L266
 3119      0000
 3120              	.LVL402:
 3121              	.LBB180:
2261:fltk-1.3.4-1/png/pngread.c ****                      {
 3122              		.loc 1 2261 0
 3123 05b7 83FD02   		cmpl	$2, %ebp
 3124 05ba 0F84050B 		je	.L462
 3124      0000
 3125              	.LVL403:
 3126              	.L267:
2276:fltk-1.3.4-1/png/pngread.c **** 
 3127              		.loc 1 2276 0
 3128 05c0 8B44240C 		movl	12(%rsp), %eax
2275:fltk-1.3.4-1/png/pngread.c ****                      c.gray = c.red = c.green = c.blue = (png_uint_16)gray;
 3129              		.loc 1 2275 0
 3130 05c4 C6442440 		movb	$0, 64(%rsp)
 3130      00
2276:fltk-1.3.4-1/png/pngread.c **** 
 3131              		.loc 1 2276 0
 3132 05c9 66894424 		movw	%ax, 70(%rsp)
 3132      46
 3133 05ce 66894424 		movw	%ax, 68(%rsp)
 3133      44
 3134 05d3 66894424 		movw	%ax, 66(%rsp)
 3134      42
 3135 05d8 E9E90300 		jmp	.L435
 3135      00
 3136              	.LVL404:
 3137              	.L269:
 3138              	.LBE180:
 3139              	.LBE179:
2358:fltk-1.3.4-1/png/pngread.c ****                (back_r == back_g && back_g == back_b))
 3140              		.loc 1 2358 0
 3141 05dd 4183E702 		andl	$2, %r15d
 3142              	.LVL405:
 3143 05e1 0F84A103 		je	.L271
 3143      0000
2358:fltk-1.3.4-1/png/pngread.c ****                (back_r == back_g && back_g == back_b))
 3144              		.loc 1 2358 0 is_stmt 0 discriminator 1
 3145 05e7 8B44240C 		movl	12(%rsp), %eax
 3146 05eb 39442418 		cmpl	%eax, 24(%rsp)
 3147 05ef 750C     		jne	.L272
 3148 05f1 8B4C241C 		movl	28(%rsp), %ecx
 3149 05f5 39C8     		cmpl	%ecx, %eax
 3150 05f7 0F848B03 		je	.L271
 3150      0000
 3151              	.L272:
 3152              	.LBB182:
2399:fltk-1.3.4-1/png/pngread.c ****                   png_error(png_ptr, "ga-alpha color-map: too few entries");
 3153              		.loc 1 2399 0 is_stmt 1
 3154 05fd 488B4424 		movq	40(%rsp), %rax
 3154      28
 3155 0602 81781CFF 		cmpl	$255, 28(%rax)
 3155      000000
 3156 0609 0F86020C 		jbe	.L463
 3156      0000
 3157 060f 41BD7300 		movl	$115, %r13d
 3157      0000
 3158 0615 31F6     		xorl	%esi, %esi
 3159              	.LBB183:
2405:fltk-1.3.4-1/png/pngread.c ****                   png_create_colormap_entry(display, i++, gray, gray, gray,
 3160              		.loc 1 2405 0
 3161 0617 41BC05A4 		movl	$464823301, %r12d
 3161      B41B
 3162 061d 0F1F00   		.p2align 4,,10
 3163              		.p2align 3
 3164              	.L276:
 3165              	.LVL406:
 3166 0620 4489E8   		movl	%r13d, %eax
2406:fltk-1.3.4-1/png/pngread.c ****                      255, P_sRGB);
 3167              		.loc 1 2406 0
 3168 0623 4883EC08 		subq	$8, %rsp
 3169              		.cfi_def_cfa_offset 168
 3170 0627 448D7601 		leal	1(%rsi), %r14d
2405:fltk-1.3.4-1/png/pngread.c ****                   png_create_colormap_entry(display, i++, gray, gray, gray,
 3171              		.loc 1 2405 0
 3172 062b 41F7E4   		mull	%r12d
 3173 062e 4489E8   		movl	%r13d, %eax
2406:fltk-1.3.4-1/png/pngread.c ****                      255, P_sRGB);
 3174              		.loc 1 2406 0
 3175 0631 6A01     		pushq	$1
 3176              		.cfi_def_cfa_offset 176
 3177 0633 41B9FF00 		movl	$255, %r9d
 3177      0000
 3178 0639 4889DF   		movq	%rbx, %rdi
 3179 063c 4181C500 		addl	$256, %r13d
 3179      010000
2405:fltk-1.3.4-1/png/pngread.c ****                   png_create_colormap_entry(display, i++, gray, gray, gray,
 3180              		.loc 1 2405 0
 3181 0643 29D0     		subl	%edx, %eax
 3182 0645 D1E8     		shrl	%eax
 3183 0647 01C2     		addl	%eax, %edx
 3184 0649 C1EA07   		shrl	$7, %edx
 3185              	.LVL407:
2406:fltk-1.3.4-1/png/pngread.c ****                      255, P_sRGB);
 3186              		.loc 1 2406 0
 3187 064c 4189D0   		movl	%edx, %r8d
 3188 064f 89D1     		movl	%edx, %ecx
 3189 0651 E8000000 		call	png_create_colormap_entry
 3189      00
 3190              	.LVL408:
 3191              	.LBE183:
2403:fltk-1.3.4-1/png/pngread.c ****                {
 3192              		.loc 1 2403 0
 3193 0656 4181FEE7 		cmpl	$231, %r14d
 3193      000000
 3194 065d 4489F6   		movl	%r14d, %esi
 3195 0660 4158     		popq	%r8
 3196              		.cfi_def_cfa_offset 168
 3197 0662 4159     		popq	%r9
 3198              		.cfi_def_cfa_offset 160
 3199 0664 75BA     		jne	.L276
2414:fltk-1.3.4-1/png/pngread.c ****                   output_encoding == P_LINEAR ? 65535U : 255U, output_encoding);
 3200              		.loc 1 2414 0
 3201 0666 83FD02   		cmpl	$2, %ebp
 3202 0669 44897424 		movl	%r14d, 52(%rsp)
 3202      34
 3203              	.LVL409:
 3204 066e 0F84240A 		je	.L464
 3204      0000
 3205              	.LVL410:
 3206 0674 4883EC08 		subq	$8, %rsp
 3207              		.cfi_def_cfa_offset 168
 3208 0678 BEE70000 		movl	$231, %esi
 3208      00
 3209 067d 41B9FF00 		movl	$255, %r9d
 3209      0000
 3210 0683 6A01     		pushq	$1
 3211              		.cfi_def_cfa_offset 176
 3212 0685 8B6C242C 		movl	44(%rsp), %ebp
 3213              	.LVL411:
 3214 0689 4889DF   		movq	%rbx, %rdi
 3215 068c 448B7C24 		movl	28(%rsp), %r15d
 3215      1C
 3216 0691 448B7424 		movl	40(%rsp), %r14d
 3216      28
 3217 0696 4189E8   		movl	%ebp, %r8d
 3218 0699 4489F9   		movl	%r15d, %ecx
 3219 069c 4489F2   		movl	%r14d, %edx
 3220 069f E8000000 		call	png_create_colormap_entry
 3220      00
 3221              	.LVL412:
2431:fltk-1.3.4-1/png/pngread.c ****                   back_g = png_sRGB_table[back_g];
 3222              		.loc 1 2431 0
 3223 06a4 4489F0   		movl	%r14d, %eax
 3224 06a7 0FB78400 		movzwl	png_sRGB_table(%rax,%rax), %eax
 3224      00000000 
 3225 06af 89442428 		movl	%eax, 40(%rsp)
 3226              	.LVL413:
2432:fltk-1.3.4-1/png/pngread.c ****                   back_b = png_sRGB_table[back_b];
 3227              		.loc 1 2432 0
 3228 06b3 4489F8   		movl	%r15d, %eax
 3229              	.LVL414:
 3230 06b6 0FB78400 		movzwl	png_sRGB_table(%rax,%rax), %eax
 3230      00000000 
 3231 06be 8944241C 		movl	%eax, 28(%rsp)
 3232              	.LVL415:
2433:fltk-1.3.4-1/png/pngread.c ****                }
 3233              		.loc 1 2433 0
 3234 06c2 89E8     		movl	%ebp, %eax
 3235              	.LVL416:
 3236 06c4 0FB78400 		movzwl	png_sRGB_table(%rax,%rax), %eax
 3236      00000000 
 3237 06cc 8944242C 		movl	%eax, 44(%rsp)
 3238              	.LVL417:
 3239 06d0 59       		popq	%rcx
 3240              		.cfi_def_cfa_offset 168
 3241 06d1 5E       		popq	%rsi
 3242              		.cfi_def_cfa_offset 160
 3243              	.LVL418:
 3244              	.L344:
 3245 06d2 8B44241C 		movl	28(%rsp), %eax
2414:fltk-1.3.4-1/png/pngread.c ****                   output_encoding == P_LINEAR ? 65535U : 255U, output_encoding);
 3246              		.loc 1 2414 0
 3247 06d6 41BEE800 		movl	$232, %r14d
 3247      0000
 3248 06dc 41BF3300 		movl	$51, %r15d
 3248      0000
 3249 06e2 48891C24 		movq	%rbx, (%rsp)
 3250 06e6 6BC8CD   		imull	$-51, %eax, %ecx
 3251 06e9 4469E0CC 		imull	$204, %eax, %r12d
 3251      000000
 3252              	.LVL419:
 3253 06f0 8B44240C 		movl	12(%rsp), %eax
 3254 06f4 44897424 		movl	%r14d, 12(%rsp)
 3254      0C
 3255              	.LVL420:
 3256 06f9 894C2410 		movl	%ecx, 16(%rsp)
 3257 06fd 6BF8CD   		imull	$-51, %eax, %edi
 3258 0700 4469E8CC 		imull	$204, %eax, %r13d
 3258      000000
 3259              	.LVL421:
 3260 0707 8B442418 		movl	24(%rsp), %eax
 3261              	.LVL422:
 3262 070b 897C241C 		movl	%edi, 28(%rsp)
 3263              	.LVL423:
 3264 070f 6BC8CD   		imull	$-51, %eax, %ecx
 3265 0712 69C0CC00 		imull	$204, %eax, %eax
 3265      0000
 3266 0718 894C2414 		movl	%ecx, 20(%rsp)
 3267 071c 4189C6   		movl	%eax, %r14d
 3268              	.LVL424:
 3269              	.L280:
 3270 071f 8B74240C 		movl	12(%rsp), %esi
 3271 0723 BB000000 		movl	$png_sRGB_table, %ebx
 3271      00
 3272              	.LVL425:
 3273 0728 0F1F8400 		.p2align 4,,10
 3273      00000000 
 3274              		.p2align 3
 3275              	.L279:
 3276              	.LBB184:
 3277              	.LBB185:
2450:fltk-1.3.4-1/png/pngread.c **** 
 3278              		.loc 1 2450 0 discriminator 3
 3279 0730 0FB703   		movzwl	(%rbx), %eax
2452:fltk-1.3.4-1/png/pngread.c ****                         PNG_sRGB_FROM_LINEAR(gray + back_rx),
 3280              		.loc 1 2452 0 discriminator 3
 3281 0733 4883EC08 		subq	$8, %rsp
 3282              		.cfi_def_cfa_offset 168
 3283              	.LVL426:
 3284 0737 8D6E01   		leal	1(%rsi), %ebp
 3285 073a 6A01     		pushq	$1
 3286              		.cfi_def_cfa_offset 176
 3287 073c 4883C366 		addq	$102, %rbx
2450:fltk-1.3.4-1/png/pngread.c **** 
 3288              		.loc 1 2450 0 discriminator 3
 3289 0740 410FAFC7 		imull	%r15d, %eax
 3290              	.LVL427:
2455:fltk-1.3.4-1/png/pngread.c ****                   }
 3291              		.loc 1 2455 0 discriminator 3
 3292 0744 468D0420 		leal	(%rax,%r12), %r8d
2454:fltk-1.3.4-1/png/pngread.c ****                         PNG_sRGB_FROM_LINEAR(gray + back_bx), 255, P_sRGB);
 3293              		.loc 1 2454 0 discriminator 3
 3294 0748 428D1428 		leal	(%rax,%r13), %edx
2453:fltk-1.3.4-1/png/pngread.c ****                         PNG_sRGB_FROM_LINEAR(gray + back_gx),
 3295              		.loc 1 2453 0 discriminator 3
 3296 074c 4401F0   		addl	%r14d, %eax
 3297              	.LVL428:
 3298 074f 89C7     		movl	%eax, %edi
2452:fltk-1.3.4-1/png/pngread.c ****                         PNG_sRGB_FROM_LINEAR(gray + back_rx),
 3299              		.loc 1 2452 0 discriminator 3
 3300 0751 25FF7F00 		andl	$32767, %eax
 3300      00
2455:fltk-1.3.4-1/png/pngread.c ****                   }
 3301              		.loc 1 2455 0 discriminator 3
 3302 0756 4489C1   		movl	%r8d, %ecx
2452:fltk-1.3.4-1/png/pngread.c ****                         PNG_sRGB_FROM_LINEAR(gray + back_rx),
 3303              		.loc 1 2452 0 discriminator 3
 3304 0759 4181E0FF 		andl	$32767, %r8d
 3304      7F0000
2454:fltk-1.3.4-1/png/pngread.c ****                         PNG_sRGB_FROM_LINEAR(gray + back_bx), 255, P_sRGB);
 3305              		.loc 1 2454 0 discriminator 3
 3306 0760 4189D1   		movl	%edx, %r9d
2455:fltk-1.3.4-1/png/pngread.c ****                   }
 3307              		.loc 1 2455 0 discriminator 3
 3308 0763 C1E90F   		shrl	$15, %ecx
2454:fltk-1.3.4-1/png/pngread.c ****                         PNG_sRGB_FROM_LINEAR(gray + back_bx), 255, P_sRGB);
 3309              		.loc 1 2454 0 discriminator 3
 3310 0766 41C1E90F 		shrl	$15, %r9d
2452:fltk-1.3.4-1/png/pngread.c ****                         PNG_sRGB_FROM_LINEAR(gray + back_rx),
 3311              		.loc 1 2452 0 discriminator 3
 3312 076a 81E2FF7F 		andl	$32767, %edx
 3312      0000
 3313 0770 440FB699 		movzbl	png_sRGB_delta(%rcx), %r11d
 3313      00000000 
 3314 0778 0FB78C09 		movzwl	png_sRGB_base(%rcx,%rcx), %ecx
 3314      00000000 
2453:fltk-1.3.4-1/png/pngread.c ****                         PNG_sRGB_FROM_LINEAR(gray + back_gx),
 3315              		.loc 1 2453 0 discriminator 3
 3316 0780 C1EF0F   		shrl	$15, %edi
2452:fltk-1.3.4-1/png/pngread.c ****                         PNG_sRGB_FROM_LINEAR(gray + back_rx),
 3317              		.loc 1 2452 0 discriminator 3
 3318 0783 450FAFC3 		imull	%r11d, %r8d
 3319 0787 41C1E80C 		shrl	$12, %r8d
 3320 078b 4401C1   		addl	%r8d, %ecx
 3321 078e 0FB6CD   		movzbl	%ch, %ecx
 3322 0791 4189C8   		movl	%ecx, %r8d
 3323 0794 410FB689 		movzbl	png_sRGB_delta(%r9), %ecx
 3323      00000000 
 3324 079c 0FAFD1   		imull	%ecx, %edx
 3325 079f 430FB78C 		movzwl	png_sRGB_base(%r9,%r9), %ecx
 3325      09000000 
 3325      00
 3326 07a8 41B9FF00 		movl	$255, %r9d
 3326      0000
 3327 07ae C1EA0C   		shrl	$12, %edx
 3328 07b1 01D1     		addl	%edx, %ecx
 3329 07b3 0FB69700 		movzbl	png_sRGB_delta(%rdi), %edx
 3329      000000
 3330 07ba 0FB7BC3F 		movzwl	png_sRGB_base(%rdi,%rdi), %edi
 3330      00000000 
 3331 07c2 0FB6CD   		movzbl	%ch, %ecx
 3332 07c5 0FAFD0   		imull	%eax, %edx
 3333 07c8 C1EA0C   		shrl	$12, %edx
 3334 07cb 01FA     		addl	%edi, %edx
 3335 07cd 488B7C24 		movq	16(%rsp), %rdi
 3335      10
 3336 07d2 0FB6D6   		movzbl	%dh, %edx
 3337 07d5 E8000000 		call	png_create_colormap_entry
 3337      00
 3338              	.LVL429:
 3339              	.LBE185:
2448:fltk-1.3.4-1/png/pngread.c ****                   {
 3340              		.loc 1 2448 0 discriminator 3
 3341 07da 4881FB00 		cmpq	$png_sRGB_table+612, %rbx
 3341      000000
 3342              	.LBB186:
2452:fltk-1.3.4-1/png/pngread.c ****                         PNG_sRGB_FROM_LINEAR(gray + back_rx),
 3343              		.loc 1 2452 0 discriminator 3
 3344 07e1 89EE     		movl	%ebp, %esi
 3345              	.LBE186:
2448:fltk-1.3.4-1/png/pngread.c ****                   {
 3346              		.loc 1 2448 0 discriminator 3
 3347 07e3 59       		popq	%rcx
 3348              		.cfi_def_cfa_offset 168
 3349 07e4 5F       		popq	%rdi
 3350              		.cfi_def_cfa_offset 160
 3351              	.LVL430:
 3352 07e5 0F8545FF 		jne	.L279
 3352      FFFF
 3353 07eb 8344240C 		addl	$6, 12(%rsp)
 3353      06
 3354              	.LVL431:
 3355 07f0 4183C733 		addl	$51, %r15d
 3356              	.LVL432:
 3357 07f4 44036424 		addl	16(%rsp), %r12d
 3357      10
 3358              	.LVL433:
 3359 07f9 8B44240C 		movl	12(%rsp), %eax
 3360              	.LVL434:
 3361 07fd 44036C24 		addl	28(%rsp), %r13d
 3361      1C
 3362              	.LVL435:
 3363 0802 44037424 		addl	20(%rsp), %r14d
 3363      14
 3364              	.LVL436:
 3365              	.LBE184:
2436:fltk-1.3.4-1/png/pngread.c ****                {
 3366              		.loc 1 2436 0 discriminator 2
 3367 0807 3D000100 		cmpl	$256, %eax
 3367      00
 3368 080c 0F850DFF 		jne	.L280
 3368      FFFF
 3369 0812 4189C6   		movl	%eax, %r14d
 3370 0815 488B1C24 		movq	(%rsp), %rbx
2460:fltk-1.3.4-1/png/pngread.c ****             }
 3371              		.loc 1 2460 0
 3372 0819 BD010000 		movl	$1, %ebp
 3372      00
 3373 081e E93DFBFF 		jmp	.L330
 3373      FF
 3374              	.LVL437:
 3375              	.L453:
 3376              	.LBE182:
2480:fltk-1.3.4-1/png/pngread.c ****                -1);
 3377              		.loc 1 2480 0
 3378 0823 4C8B7424 		movq	32(%rsp), %r14
 3378      20
 3379 0828 B9FFFFFF 		movl	$-1, %ecx
 3379      FF
 3380 082d BE010000 		movl	$1, %esi
 3380      00
 3381 0832 89CA     		movl	%ecx, %edx
 3382 0834 4C89F7   		movq	%r14, %rdi
 3383 0837 E8000000 		call	png_set_rgb_to_gray_fixed
 3383      00
 3384              	.LVL438:
2487:fltk-1.3.4-1/png/pngread.c ****                png_ptr->num_trans > 0) &&
 3385              		.loc 1 2487 0
 3386 083c 410FB686 		movzbl	631(%r14), %eax
 3386      77020000 
 3387 0844 3C06     		cmpb	$6, %al
 3388 0846 0F845105 		je	.L282
 3388      0000
2487:fltk-1.3.4-1/png/pngread.c ****                png_ptr->num_trans > 0) &&
 3389              		.loc 1 2487 0 is_stmt 0 discriminator 1
 3390 084c 664183BE 		cmpw	$0, 624(%r14)
 3390      70020000 
 3390      00
 3391 0855 0F854205 		jne	.L282
 3391      0000
2511:fltk-1.3.4-1/png/pngread.c ****                   png_error(png_ptr, "rgb[gray] color-map: too few entries");
 3392              		.loc 1 2511 0 is_stmt 1
 3393 085b 488B4424 		movq	40(%rsp), %rax
 3393      28
 3394 0860 81781CFF 		cmpl	$255, 28(%rax)
 3394      000000
 3395 0867 0F86D109 		jbe	.L347
 3395      0000
 3396              	.LVL439:
 3397              	.L288:
2531:fltk-1.3.4-1/png/pngread.c **** 
 3398              		.loc 1 2531 0
 3399 086d 4889DF   		movq	%rbx, %rdi
 3400 0870 E8000000 		call	make_gray_colormap
 3400      00
 3401              	.LVL440:
 3402 0875 4189C6   		movl	%eax, %r14d
 3403              	.LVL441:
2535:fltk-1.3.4-1/png/pngread.c ****                   png_ptr->num_trans > 0)
 3404              		.loc 1 2535 0
 3405 0878 488B4424 		movq	32(%rsp), %rax
 3405      20
 3406              	.LVL442:
 3407 087d 80B87702 		cmpb	$6, 631(%rax)
 3407      000006
 3408 0884 7413     		je	.L293
 3409 0886 488B4424 		movq	32(%rsp), %rax
 3409      20
 3410 088b 6683B870 		cmpw	$0, 624(%rax)
 3410      02000000 
 3411 0893 0F844B01 		je	.L436
 3411      0000
 3412              	.L293:
 3413              	.LVL443:
 3414              	.LBB187:
2566:fltk-1.3.4-1/png/pngread.c ****                   {
 3415              		.loc 1 2566 0
 3416 0899 83FD02   		cmpl	$2, %ebp
 3417 089c 41BC0100 		movl	$1, %r12d
 3417      0000
 3418 08a2 0F847408 		je	.L465
 3418      0000
 3419              	.LVL444:
 3420              	.L296:
2587:fltk-1.3.4-1/png/pngread.c ****                      PNG_BACKGROUND_GAMMA_SCREEN, 0/*need_expand*/,
 3421              		.loc 1 2587 0
 3422 08a8 4C8B7C24 		movq	32(%rsp), %r15
 3422      20
2580:fltk-1.3.4-1/png/pngread.c **** 
 3423              		.loc 1 2580 0
 3424 08ad 8B44240C 		movl	12(%rsp), %eax
2587:fltk-1.3.4-1/png/pngread.c ****                      PNG_BACKGROUND_GAMMA_SCREEN, 0/*need_expand*/,
 3425              		.loc 1 2587 0
 3426 08b1 488D7424 		leaq	64(%rsp), %rsi
 3426      40
 3427 08b6 4531C0   		xorl	%r8d, %r8d
 3428 08b9 31C9     		xorl	%ecx, %ecx
 3429 08bb BA010000 		movl	$1, %edx
 3429      00
2579:fltk-1.3.4-1/png/pngread.c ****                   c.gray = c.red = c.green = c.blue = (png_uint_16)gray;
 3430              		.loc 1 2579 0
 3431 08c0 C6442440 		movb	$0, 64(%rsp)
 3431      00
2587:fltk-1.3.4-1/png/pngread.c ****                      PNG_BACKGROUND_GAMMA_SCREEN, 0/*need_expand*/,
 3432              		.loc 1 2587 0
 3433 08c5 4C89FF   		movq	%r15, %rdi
2580:fltk-1.3.4-1/png/pngread.c **** 
 3434              		.loc 1 2580 0
 3435 08c8 66894424 		movw	%ax, 70(%rsp)
 3435      46
 3436 08cd 66894424 		movw	%ax, 68(%rsp)
 3436      44
 3437 08d2 66894424 		movw	%ax, 66(%rsp)
 3437      42
 3438 08d7 66894424 		movw	%ax, 72(%rsp)
 3438      48
 3439              	.LVL445:
2587:fltk-1.3.4-1/png/pngread.c ****                      PNG_BACKGROUND_GAMMA_SCREEN, 0/*need_expand*/,
 3440              		.loc 1 2587 0
 3441 08dc E8000000 		call	png_set_background_fixed
 3441      00
 3442              	.LVL446:
 3443              	.LBE187:
2831:fltk-1.3.4-1/png/pngread.c ****        (png_ptr->color_type & PNG_COLOR_MASK_ALPHA) == 0)
 3444              		.loc 1 2831 0
 3445 08e1 664183BF 		cmpw	$0, 624(%r15)
 3445      70020000 
 3445      00
 3446 08ea 7412     		je	.L368
2831:fltk-1.3.4-1/png/pngread.c ****        (png_ptr->color_type & PNG_COLOR_MASK_ALPHA) == 0)
 3447              		.loc 1 2831 0 is_stmt 0 discriminator 2
 3448 08ec 488B4424 		movq	32(%rsp), %rax
 3448      20
 3449 08f1 F6807702 		testb	$4, 631(%rax)
 3449      000004
 3450 08f8 0F843109 		je	.L466
 3450      0000
 3451              	.L368:
2077:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 back_r, back_g, back_b;
 3452              		.loc 1 2077 0 is_stmt 1
 3453 08fe C7442434 		movl	$256, 52(%rsp)
 3453      00010000 
2592:fltk-1.3.4-1/png/pngread.c ****             }
 3454              		.loc 1 2592 0
 3455 0906 31ED     		xorl	%ebp, %ebp
 3456 0908 E9430300 		jmp	.L298
 3456      00
 3457              	.LVL447:
 3458 090d 0F1F00   		.p2align 4,,10
 3459              		.p2align 3
 3460              	.L321:
 3461              	.LBB188:
2811:fltk-1.3.4-1/png/pngread.c ****                      colormap[i].green, colormap[i].blue,
 3462              		.loc 1 2811 0 discriminator 1
 3463 0910 470FB60C 		movzbl	(%r14,%r12), %r9d
 3463      26
 3464 0915 E984F9FF 		jmp	.L326
 3464      FF
 3465 091a 660F1F44 		.p2align 4,,10
 3465      0000
 3466              		.p2align 3
 3467              	.L448:
2789:fltk-1.3.4-1/png/pngread.c ****                         back_b, 0, output_encoding);
 3468              		.loc 1 2789 0
 3469 0920 4883EC08 		subq	$8, %rsp
 3470              		.cfi_def_cfa_offset 168
 3471              	.LVL448:
 3472 0924 4531C9   		xorl	%r9d, %r9d
 3473 0927 4489E6   		movl	%r12d, %esi
 3474 092a 55       		pushq	%rbp
 3475              		.cfi_def_cfa_offset 176
 3476 092b 448B4424 		movl	44(%rsp), %r8d
 3476      2C
 3477 0930 4889DF   		movq	%rbx, %rdi
 3478 0933 8B4C241C 		movl	28(%rsp), %ecx
 3479 0937 8B542428 		movl	40(%rsp), %edx
 3480 093b E8000000 		call	png_create_colormap_entry
 3480      00
 3481              	.LVL449:
 3482 0940 415B     		popq	%r11
 3483              		.cfi_def_cfa_offset 168
 3484 0942 58       		popq	%rax
 3485              		.cfi_def_cfa_offset 160
 3486              	.LVL450:
 3487 0943 E92DF9FF 		jmp	.L323
 3487      FF
 3488              	.LVL451:
 3489 0948 0F1F8400 		.p2align 4,,10
 3489      00000000 
 3490              		.p2align 3
 3491              	.L340:
 3492              	.LBE188:
2877:fltk-1.3.4-1/png/pngread.c ****             goto bad_background;
 3493              		.loc 1 2877 0
 3494 0950 817C2434 		cmpl	$256, 52(%rsp)
 3494      00010000 
 3495 0958 0F847AFA 		je	.L343
 3495      FFFF
 3496              	.L342:
2890:fltk-1.3.4-1/png/pngread.c ****    }
 3497              		.loc 1 2890 0
 3498 095e 488B7C24 		movq	32(%rsp), %rdi
 3498      20
 3499 0963 BE000000 		movl	$.LC34, %esi
 3499      00
 3500 0968 E8000000 		call	png_error
 3500      00
 3501              	.LVL452:
 3502 096d 0F1F00   		.p2align 4,,10
 3503              		.p2align 3
 3504              	.L456:
2858:fltk-1.3.4-1/png/pngread.c ****    {
 3505              		.loc 1 2858 0
 3506 0970 83FD01   		cmpl	$1, %ebp
 3507 0973 75DB     		jne	.L340
2866:fltk-1.3.4-1/png/pngread.c ****             goto bad_background;
 3508              		.loc 1 2866 0
 3509 0975 817C2434 		cmpl	$231, 52(%rsp)
 3509      E7000000 
 3510 097d 0F8455FA 		je	.L343
 3510      FFFF
 3511 0983 EBD9     		jmp	.L342
 3512              	.LVL453:
 3513              		.p2align 4,,10
 3514 0985 0F1F00   		.p2align 3
 3515              	.L271:
 3516              	.LBB189:
2365:fltk-1.3.4-1/png/pngread.c ****                   png_error(png_ptr, "gray-alpha color-map: too few entries");
 3517              		.loc 1 2365 0
 3518 0988 488B4424 		movq	40(%rsp), %rax
 3518      28
 3519 098d 81781CFF 		cmpl	$255, 28(%rax)
 3519      000000
 3520 0994 0F86D108 		jbe	.L467
 3520      0000
2368:fltk-1.3.4-1/png/pngread.c **** 
 3521              		.loc 1 2368 0
 3522 099a 4889DF   		movq	%rbx, %rdi
 3523 099d E8000000 		call	make_gray_colormap
 3523      00
 3524              	.LVL454:
2370:fltk-1.3.4-1/png/pngread.c ****                {
 3525              		.loc 1 2370 0
 3526 09a2 83FD02   		cmpl	$2, %ebp
2368:fltk-1.3.4-1/png/pngread.c **** 
 3527              		.loc 1 2368 0
 3528 09a5 4189C6   		movl	%eax, %r14d
 3529              	.LVL455:
2370:fltk-1.3.4-1/png/pngread.c ****                {
 3530              		.loc 1 2370 0
 3531 09a8 0F847606 		je	.L468
 3531      0000
 3532              	.LVL456:
 3533              	.L274:
2383:fltk-1.3.4-1/png/pngread.c **** 
 3534              		.loc 1 2383 0
 3535 09ae 8B44240C 		movl	12(%rsp), %eax
2382:fltk-1.3.4-1/png/pngread.c ****                c.gray = c.red = c.green = c.blue = (png_uint_16)gray;
 3536              		.loc 1 2382 0
 3537 09b2 C6442440 		movb	$0, 64(%rsp)
 3537      00
2383:fltk-1.3.4-1/png/pngread.c **** 
 3538              		.loc 1 2383 0
 3539 09b7 66894424 		movw	%ax, 70(%rsp)
 3539      46
 3540 09bc 66894424 		movw	%ax, 68(%rsp)
 3540      44
 3541 09c1 66894424 		movw	%ax, 66(%rsp)
 3541      42
 3542              	.LVL457:
 3543              	.L435:
2385:fltk-1.3.4-1/png/pngread.c ****                   PNG_BACKGROUND_GAMMA_SCREEN, 0/*need_expand*/,
 3544              		.loc 1 2385 0
 3545 09c6 488B7C24 		movq	32(%rsp), %rdi
 3545      20
 3546 09cb 488D7424 		leaq	64(%rsp), %rsi
 3546      40
 3547 09d0 4531C0   		xorl	%r8d, %r8d
 3548 09d3 31C9     		xorl	%ecx, %ecx
 3549 09d5 BA010000 		movl	$1, %edx
 3549      00
2383:fltk-1.3.4-1/png/pngread.c **** 
 3550              		.loc 1 2383 0
 3551 09da 66894424 		movw	%ax, 72(%rsp)
 3551      48
2385:fltk-1.3.4-1/png/pngread.c ****                   PNG_BACKGROUND_GAMMA_SCREEN, 0/*need_expand*/,
 3552              		.loc 1 2385 0
 3553 09df E8000000 		call	png_set_background_fixed
 3553      00
 3554              	.LVL458:
 3555              	.L436:
 3556              	.LBE189:
2077:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 back_r, back_g, back_b;
 3557              		.loc 1 2077 0
 3558 09e4 C7442434 		movl	$256, 52(%rsp)
 3558      00010000 
 3559              	.LBB190:
2389:fltk-1.3.4-1/png/pngread.c ****             }
 3560              		.loc 1 2389 0
 3561 09ec 31ED     		xorl	%ebp, %ebp
 3562              	.LBE190:
2360:fltk-1.3.4-1/png/pngread.c ****                /* Background is gray; no special processing will be required. */
 3563              		.loc 1 2360 0
 3564 09ee E96DF9FF 		jmp	.L330
 3564      FF
 3565              	.LVL459:
 3566              		.p2align 4,,10
 3567 09f3 0F1F4400 		.p2align 3
 3567      00
 3568              	.L449:
 3569              	.LBB191:
2797:fltk-1.3.4-1/png/pngread.c ****                         png_colormap_compose(display, colormap[i].red, P_FILE,
 3570              		.loc 1 2797 0 discriminator 1
 3571 09f8 4489D0   		movl	%r10d, %eax
 3572 09fb C1E008   		sall	$8, %eax
 3573 09fe 4101C2   		addl	%eax, %r10d
 3574 0a01 E9D9F7FF 		jmp	.L325
 3574      FF
 3575              	.LVL460:
 3576              	.L353:
 3577              	.LBE191:
2093:fltk-1.3.4-1/png/pngread.c **** 
 3578              		.loc 1 2093 0
 3579 0a06 C744241C 		movl	$0, 28(%rsp)
 3579      00000000 
 3580 0a0e C744240C 		movl	$0, 12(%rsp)
 3580      00000000 
 3581 0a16 C7442418 		movl	$0, 24(%rsp)
 3581      00000000 
 3582 0a1e E965F6FF 		jmp	.L245
 3582      FF
 3583              	.LVL461:
 3584              	.L299:
2612:fltk-1.3.4-1/png/pngread.c ****                {
 3585              		.loc 1 2612 0
 3586 0a23 41F6C701 		testb	$1, %r15b
 3587 0a27 0F858F02 		jne	.L469
 3587      0000
 3588              	.LBB192:
2661:fltk-1.3.4-1/png/pngread.c ****                      PNG_IMAGE_SAMPLE_SIZE(output_format);
 3589              		.loc 1 2661 0
 3590 0a2d 4183E703 		andl	$3, %r15d
 3591              	.LVL462:
 3592 0a31 C1EE02   		shrl	$2, %esi
 3593 0a34 8D4601   		leal	1(%rsi), %eax
 3594 0a37 458D6701 		leal	1(%r15), %r12d
 3595 0a3b 440FAFE0 		imull	%eax, %r12d
 3596              	.LVL463:
2665:fltk-1.3.4-1/png/pngread.c ****                      png_error(png_ptr, "rgb-alpha color-map: too few entries");
 3597              		.loc 1 2665 0
 3598 0a3f 488B4424 		movq	40(%rsp), %rax
 3598      28
 3599 0a44 81781CF3 		cmpl	$243, 28(%rax)
 3599      000000
 3600 0a4b 0F860B08 		jbe	.L470
 3600      0000
2668:fltk-1.3.4-1/png/pngread.c **** 
 3601              		.loc 1 2668 0
 3602 0a51 4889DF   		movq	%rbx, %rdi
 3603 0a54 E8000000 		call	make_rgb_colormap
 3603      00
 3604              	.LVL464:
2670:fltk-1.3.4-1/png/pngread.c ****                         back_g, back_b, 0/*unused*/, output_encoding);
 3605              		.loc 1 2670 0
 3606 0a59 4883EC08 		subq	$8, %rsp
 3607              		.cfi_def_cfa_offset 168
2668:fltk-1.3.4-1/png/pngread.c **** 
 3608              		.loc 1 2668 0
 3609 0a5d 8944243C 		movl	%eax, 60(%rsp)
 3610              	.LVL465:
2670:fltk-1.3.4-1/png/pngread.c ****                         back_g, back_b, 0/*unused*/, output_encoding);
 3611              		.loc 1 2670 0
 3612 0a61 4531C9   		xorl	%r9d, %r9d
 3613 0a64 55       		pushq	%rbp
 3614              		.cfi_def_cfa_offset 176
 3615 0a65 448B4424 		movl	44(%rsp), %r8d
 3615      2C
 3616 0a6a 89C6     		movl	%eax, %esi
 3617 0a6c 8B4C241C 		movl	28(%rsp), %ecx
 3618 0a70 8B542428 		movl	40(%rsp), %edx
 3619 0a74 4889DF   		movq	%rbx, %rdi
 3620 0a77 E8000000 		call	png_create_colormap_entry
 3620      00
 3621              	.LVL466:
2673:fltk-1.3.4-1/png/pngread.c ****                   {
 3622              		.loc 1 2673 0
 3623 0a7c 83FD02   		cmpl	$2, %ebp
 3624 0a7f 59       		popq	%rcx
 3625              		.cfi_def_cfa_offset 168
 3626 0a80 5E       		popq	%rsi
 3627              		.cfi_def_cfa_offset 160
 3628 0a81 0F840905 		je	.L471
 3628      0000
 3629 0a87 8B7C240C 		movl	12(%rsp), %edi
2682:fltk-1.3.4-1/png/pngread.c ****                      g = back_g;
 3630              		.loc 1 2682 0
 3631 0a8b 8B442418 		movl	24(%rsp), %eax
 3632 0a8f 89FE     		movl	%edi, %esi
 3633              	.L308:
 3634              	.LVL467:
2692:fltk-1.3.4-1/png/pngread.c ****                         sample_size * cmap_entries,
 3635              		.loc 1 2692 0
 3636 0a91 8D848082 		leal	130(%rax,%rax,4), %eax
 3636      000000
 3637              	.LVL468:
 3638 0a98 8DB4B682 		leal	130(%rsi,%rsi,4), %esi
 3638      000000
 3639              	.LVL469:
 3640 0a9f 448B7424 		movl	52(%rsp), %r14d
 3640      34
2694:fltk-1.3.4-1/png/pngread.c ****                         sample_size * PNG_RGB_INDEX(r,g,b),
 3641              		.loc 1 2694 0
 3642 0aa4 488B4B18 		movq	24(%rbx), %rcx
2692:fltk-1.3.4-1/png/pngread.c ****                         sample_size * cmap_entries,
 3643              		.loc 1 2692 0
 3644 0aa8 4489E2   		movl	%r12d, %edx
 3645 0aab C1E808   		shrl	$8, %eax
 3646 0aae C1EE08   		shrl	$8, %esi
 3647 0ab1 448D0440 		leal	(%rax,%rax,2), %r8d
 3648 0ab5 8D84BF82 		leal	130(%rdi,%rdi,4), %eax
 3648      000000
 3649 0abc C1E808   		shrl	$8, %eax
 3650 0abf 428D0440 		leal	(%rax,%r8,2), %eax
 3651 0ac3 8D0440   		leal	(%rax,%rax,2), %eax
 3652 0ac6 8D3446   		leal	(%rsi,%rax,2), %esi
 3653 0ac9 400FB6F6 		movzbl	%sil, %esi
 3654 0acd 410FAFF4 		imull	%r12d, %esi
 3655 0ad1 450FAFE6 		imull	%r14d, %r12d
 3656              	.LVL470:
 3657 0ad5 4801CE   		addq	%rcx, %rsi
 3658 0ad8 4A8D3C21 		leaq	(%rcx,%r12), %rdi
 3659              	.LVL471:
 3660 0adc E8000000 		call	memcmp
 3660      00
 3661              	.LVL472:
 3662 0ae1 85C0     		testl	%eax, %eax
 3663 0ae3 0F841304 		je	.L309
 3663      0000
 3664              	.LVL473:
 3665 0ae9 4489F0   		movl	%r14d, %eax
 3666 0aec 418D7E0A 		leal	10(%r14), %edi
2704:fltk-1.3.4-1/png/pngread.c ****                      {
 3667              		.loc 1 2704 0
 3668 0af0 C7442430 		movl	$0, 48(%rsp)
 3668      00000000 
 3669 0af8 83C025   		addl	$37, %eax
 3670 0afb 897C2438 		movl	%edi, 56(%rsp)
 3671 0aff 8944243C 		movl	%eax, 60(%rsp)
 3672              	.LVL474:
 3673              	.L310:
 3674 0b03 8B442438 		movl	56(%rsp), %eax
2682:fltk-1.3.4-1/png/pngread.c ****                      g = back_g;
 3675              		.loc 1 2682 0
 3676 0b07 C7442414 		movl	$0, 20(%rsp)
 3676      00000000 
 3677 0b0f 448D70F7 		leal	-9(%rax), %r14d
 3678              	.LVL475:
 3679              		.p2align 4,,10
 3680 0b13 0F1F4400 		.p2align 3
 3680      00
 3681              	.L313:
 3682 0b18 418D4603 		leal	3(%r14), %eax
 3683 0b1c 4531E4   		xorl	%r12d, %r12d
 3684 0b1f 89442410 		movl	%eax, 16(%rsp)
 3685 0b23 4489F0   		movl	%r14d, %eax
 3686 0b26 4589E6   		movl	%r12d, %r14d
 3687              	.LVL476:
 3688 0b29 4189C4   		movl	%eax, %r12d
 3689              	.LVL477:
 3690 0b2c 0F1F4000 		.p2align 4,,10
 3691              		.p2align 3
 3692              	.L311:
2712:fltk-1.3.4-1/png/pngread.c ****                                  png_colormap_compose(display, r, P_sRGB, 128,
 3693              		.loc 1 2712 0 discriminator 3
 3694 0b30 448B4424 		movl	28(%rsp), %r8d
 3694      1C
 3695 0b35 4489F6   		movl	%r14d, %esi
 3696 0b38 4189E9   		movl	%ebp, %r9d
 3697 0b3b B9800000 		movl	$128, %ecx
 3697      00
 3698 0b40 BA010000 		movl	$1, %edx
 3698      00
 3699 0b45 4889DF   		movq	%rbx, %rdi
 3700 0b48 458D6C24 		leal	1(%r12), %r13d
 3700      01
 3701 0b4d E8000000 		call	png_colormap_compose
 3701      00
 3702              	.LVL478:
 3703 0b52 448B4424 		movl	12(%rsp), %r8d
 3703      0C
 3704 0b57 8B742414 		movl	20(%rsp), %esi
 3705 0b5b 4189E9   		movl	%ebp, %r9d
 3706 0b5e B9800000 		movl	$128, %ecx
 3706      00
 3707 0b63 BA010000 		movl	$1, %edx
 3707      00
 3708 0b68 4889DF   		movq	%rbx, %rdi
 3709 0b6b 890424   		movl	%eax, (%rsp)
 3710 0b6e E8000000 		call	png_colormap_compose
 3710      00
 3711              	.LVL479:
 3712 0b73 8B742430 		movl	48(%rsp), %esi
 3713 0b77 448B4424 		movl	24(%rsp), %r8d
 3713      18
 3714 0b7c 4189E9   		movl	%ebp, %r9d
 3715 0b7f B9800000 		movl	$128, %ecx
 3715      00
 3716 0b84 BA010000 		movl	$1, %edx
 3716      00
 3717 0b89 4889DF   		movq	%rbx, %rdi
 3718 0b8c 4189C7   		movl	%eax, %r15d
 3719 0b8f E8000000 		call	png_colormap_compose
 3719      00
 3720              	.LVL480:
 3721 0b94 4883EC08 		subq	$8, %rsp
 3722              		.cfi_def_cfa_offset 168
 3723 0b98 89C2     		movl	%eax, %edx
 3724 0b9a 4531C9   		xorl	%r9d, %r9d
 3725 0b9d 55       		pushq	%rbp
 3726              		.cfi_def_cfa_offset 176
 3727 0b9e 448B4424 		movl	16(%rsp), %r8d
 3727      10
 3728 0ba3 4489E6   		movl	%r12d, %esi
 3729 0ba6 4489F9   		movl	%r15d, %ecx
 3730 0ba9 4889DF   		movq	%rbx, %rdi
 3731 0bac 4589EC   		movl	%r13d, %r12d
 3732 0baf E8000000 		call	png_create_colormap_entry
 3732      00
 3733              	.LVL481:
2711:fltk-1.3.4-1/png/pngread.c ****                               png_create_colormap_entry(display, cmap_entries++,
 3734              		.loc 1 2711 0 discriminator 3
 3735 0bb4 478D1436 		leal	(%r14,%r14), %r10d
 3736 0bb8 58       		popq	%rax
 3737              		.cfi_def_cfa_offset 168
 3738 0bb9 5A       		popq	%rdx
 3739              		.cfi_def_cfa_offset 160
 3740 0bba 4183CA7F 		orl	$127, %r10d
 3741 0bbe 443B6C24 		cmpl	16(%rsp), %r13d
 3741      10
 3742 0bc3 4589D6   		movl	%r10d, %r14d
 3743              	.LVL482:
 3744 0bc6 0F8564FF 		jne	.L311
 3744      FFFF
2706:fltk-1.3.4-1/png/pngread.c ****                         {
 3745              		.loc 1 2706 0 discriminator 2
 3746 0bcc 8B442414 		movl	20(%rsp), %eax
 3747 0bd0 01C0     		addl	%eax, %eax
 3748 0bd2 83C87F   		orl	$127, %eax
 3749 0bd5 89442414 		movl	%eax, 20(%rsp)
 3750              	.LVL483:
 3751 0bd9 8B442410 		movl	16(%rsp), %eax
 3752              	.LVL484:
 3753 0bdd 39442438 		cmpl	%eax, 56(%rsp)
 3754 0be1 4189C6   		movl	%eax, %r14d
 3755 0be4 0F852EFF 		jne	.L313
 3755      FFFF
2704:fltk-1.3.4-1/png/pngread.c ****                      {
 3756              		.loc 1 2704 0 discriminator 2
 3757 0bea 8B442430 		movl	48(%rsp), %eax
 3758 0bee 01C0     		addl	%eax, %eax
 3759 0bf0 83C87F   		orl	$127, %eax
 3760 0bf3 89442430 		movl	%eax, 48(%rsp)
 3761              	.LVL485:
 3762 0bf7 8B442410 		movl	16(%rsp), %eax
 3763              	.LVL486:
 3764 0bfb 83C009   		addl	$9, %eax
 3765 0bfe 3944243C 		cmpl	%eax, 60(%rsp)
 3766 0c02 89442438 		movl	%eax, 56(%rsp)
 3767 0c06 0F85F7FE 		jne	.L310
 3767      FFFF
 3768 0c0c 448B7424 		movl	16(%rsp), %r14d
 3768      10
 3769              	.LVL487:
 3770              	.L438:
2724:fltk-1.3.4-1/png/pngread.c ****                   }
 3771              		.loc 1 2724 0
 3772 0c11 BD040000 		movl	$4, %ebp
 3772      00
 3773              	.LVL488:
 3774              	.L268:
 3775              	.LBE192:
2831:fltk-1.3.4-1/png/pngread.c ****        (png_ptr->color_type & PNG_COLOR_MASK_ALPHA) == 0)
 3776              		.loc 1 2831 0
 3777 0c16 488B4424 		movq	32(%rsp), %rax
 3777      20
 3778 0c1b 6683B870 		cmpw	$0, 624(%rax)
 3778      02000000 
 3779 0c23 0F8437F7 		je	.L330
 3779      FFFF
 3780 0c29 488B4424 		movq	32(%rsp), %rax
 3780      20
 3781 0c2e F6807702 		testb	$4, 631(%rax)
 3781      000004
 3782 0c35 0F8525F7 		jne	.L330
 3782      FFFF
 3783 0c3b 41BC0100 		movl	$1, %r12d
 3783      0000
 3784              	.LVL489:
 3785              	.L350:
2833:fltk-1.3.4-1/png/pngread.c **** 
 3786              		.loc 1 2833 0
 3787 0c41 488B7C24 		movq	32(%rsp), %rdi
 3787      20
 3788 0c46 E8000000 		call	png_set_tRNS_to_alpha
 3788      00
 3789              	.LVL490:
 3790 0c4b 0F1F4400 		.p2align 4,,10
 3790      00
 3791              		.p2align 3
 3792              	.L298:
2835:fltk-1.3.4-1/png/pngread.c ****    {
 3793              		.loc 1 2835 0
 3794 0c50 4183FC01 		cmpl	$1, %r12d
 3795 0c54 0F8406F7 		je	.L330
 3795      FFFF
 3796 0c5a 4183FC03 		cmpl	$3, %r12d
 3797 0c5e 0F844205 		je	.L331
 3797      0000
2838:fltk-1.3.4-1/png/pngread.c ****          break;
 3798              		.loc 1 2838 0
 3799 0c64 488B7C24 		movq	32(%rsp), %rdi
 3799      20
 3800 0c69 BE000000 		movl	$.LC32, %esi
 3800      00
 3801 0c6e E8000000 		call	png_error
 3801      00
 3802              	.LVL491:
 3803              	.L337:
2871:fltk-1.3.4-1/png/pngread.c ****             background_index != PNG_CMAP_TRANS_BACKGROUND)
 3804              		.loc 1 2871 0
 3805 0c73 8B442434 		movl	52(%rsp), %eax
 3806 0c77 4139C6   		cmpl	%eax, %r14d
 3807 0c7a 0F86DEFC 		jbe	.L342
 3807      FFFF
 3808 0c80 3DFE0000 		cmpl	$254, %eax
 3808      00
 3809 0c85 0F844DF7 		je	.L343
 3809      FFFF
 3810 0c8b E9CEFCFF 		jmp	.L342
 3810      FF
 3811              	.LVL492:
 3812              		.p2align 4,,10
 3813              		.p2align 3
 3814              	.L452:
 3815              	.LBB193:
2820:fltk-1.3.4-1/png/pngread.c ****          }
 3816              		.loc 1 2820 0
 3817 0c90 4C8B7C24 		movq	32(%rsp), %r15
 3817      20
 3818 0c95 4C89FF   		movq	%r15, %rdi
 3819 0c98 E8000000 		call	png_set_packing
 3819      00
 3820              	.LVL493:
 3821 0c9d 410FB687 		movzbl	632(%r15), %eax
 3821      78020000 
 3822 0ca5 E93DF6FF 		jmp	.L262
 3822      FF
 3823              	.LVL494:
 3824              	.L356:
 3825              	.LBE193:
 3826              	.LBB194:
2157:fltk-1.3.4-1/png/pngread.c **** 
 3827              		.loc 1 2157 0
 3828 0caa C7042400 		movl	$0, (%rsp)
 3828      000000
 3829 0cb1 41BC0001 		movl	$256, %r12d
 3829      0000
 3830 0cb7 E9F7F7FF 		jmp	.L258
 3830      FF
 3831              	.LVL495:
 3832              	.L469:
 3833              	.LBE194:
 3834              	.LBB195:
2616:fltk-1.3.4-1/png/pngread.c ****                      png_error(png_ptr, "rgb+alpha color-map: too few entries");
 3835              		.loc 1 2616 0
 3836 0cbc 488B4424 		movq	40(%rsp), %rax
 3836      28
 3837 0cc1 81781CF3 		cmpl	$243, 28(%rax)
 3837      000000
 3838 0cc8 0F860705 		jbe	.L472
 3838      0000
2619:fltk-1.3.4-1/png/pngread.c **** 
 3839              		.loc 1 2619 0
 3840 0cce 4889DF   		movq	%rbx, %rdi
2631:fltk-1.3.4-1/png/pngread.c ****                   {
 3841              		.loc 1 2631 0
 3842 0cd1 4531ED   		xorl	%r13d, %r13d
2619:fltk-1.3.4-1/png/pngread.c **** 
 3843              		.loc 1 2619 0
 3844 0cd4 E8000000 		call	make_rgb_colormap
 3844      00
 3845              	.LVL496:
2622:fltk-1.3.4-1/png/pngread.c ****                      255, 0, P_sRGB);
 3846              		.loc 1 2622 0
 3847 0cd9 4883EC08 		subq	$8, %rsp
 3848              		.cfi_def_cfa_offset 168
2619:fltk-1.3.4-1/png/pngread.c **** 
 3849              		.loc 1 2619 0
 3850 0cdd 8944243C 		movl	%eax, 60(%rsp)
 3851              	.LVL497:
 3852 0ce1 4189C6   		movl	%eax, %r14d
2622:fltk-1.3.4-1/png/pngread.c ****                      255, 0, P_sRGB);
 3853              		.loc 1 2622 0
 3854 0ce4 6A01     		pushq	$1
 3855              		.cfi_def_cfa_offset 176
 3856 0ce6 4531C9   		xorl	%r9d, %r9d
 3857 0ce9 89C6     		movl	%eax, %esi
 3858 0ceb 4889DF   		movq	%rbx, %rdi
 3859 0cee 41B8FF00 		movl	$255, %r8d
 3859      0000
 3860 0cf4 B9FF0000 		movl	$255, %ecx
 3860      00
 3861 0cf9 BAFF0000 		movl	$255, %edx
 3861      00
 3862 0cfe E8000000 		call	png_create_colormap_entry
 3862      00
 3863              	.LVL498:
 3864 0d03 4489F0   		movl	%r14d, %eax
 3865 0d06 418D7E0A 		leal	10(%r14), %edi
 3866 0d0a 83C025   		addl	$37, %eax
 3867 0d0d 897C2410 		movl	%edi, 16(%rsp)
 3868 0d11 8944241C 		movl	%eax, 28(%rsp)
 3869              	.LVL499:
 3870 0d15 4159     		popq	%r9
 3871              		.cfi_def_cfa_offset 168
 3872 0d17 415A     		popq	%r10
 3873              		.cfi_def_cfa_offset 160
 3874              	.LVL500:
 3875              	.L303:
 3876 0d19 8B0424   		movl	(%rsp), %eax
 3877              	.LBE195:
 3878              	.LBB198:
2572:fltk-1.3.4-1/png/pngread.c ****                         back_g, 0/*unused*/, P_LINEAR);
 3879              		.loc 1 2572 0
 3880 0d1c 4531E4   		xorl	%r12d, %r12d
 3881 0d1f 8D70F7   		leal	-9(%rax), %esi
 3882              	.LVL501:
 3883              		.p2align 4,,10
 3884 0d22 660F1F44 		.p2align 3
 3884      0000
 3885              	.L306:
 3886 0d28 448D7603 		leal	3(%rsi), %r14d
 3887 0d2c 4531FF   		xorl	%r15d, %r15d
 3888              	.LVL502:
 3889 0d2f 90       		.p2align 4,,10
 3890              		.p2align 3
 3891              	.L304:
 3892              	.LBE198:
 3893              	.LBB199:
 3894              	.LBB196:
 3895              	.LBB197:
2643:fltk-1.3.4-1/png/pngread.c ****                               r, g, b, 128, P_sRGB);
 3896              		.loc 1 2643 0 discriminator 3
 3897 0d30 4883EC08 		subq	$8, %rsp
 3898              		.cfi_def_cfa_offset 168
 3899 0d34 8D6E01   		leal	1(%rsi), %ebp
 3900              	.LVL503:
 3901 0d37 4589F8   		movl	%r15d, %r8d
 3902 0d3a 6A01     		pushq	$1
 3903              		.cfi_def_cfa_offset 176
 3904 0d3c 4889DF   		movq	%rbx, %rdi
2642:fltk-1.3.4-1/png/pngread.c ****                            png_create_colormap_entry(display, cmap_entries++,
 3905              		.loc 1 2642 0 discriminator 3
 3906 0d3f 4501FF   		addl	%r15d, %r15d
 3907              	.LVL504:
2643:fltk-1.3.4-1/png/pngread.c ****                               r, g, b, 128, P_sRGB);
 3908              		.loc 1 2643 0 discriminator 3
 3909 0d42 41B98000 		movl	$128, %r9d
 3909      0000
 3910 0d48 4489E1   		movl	%r12d, %ecx
 3911 0d4b 4489EA   		movl	%r13d, %edx
 3912 0d4e E8000000 		call	png_create_colormap_entry
 3912      00
 3913              	.LVL505:
2642:fltk-1.3.4-1/png/pngread.c ****                            png_create_colormap_entry(display, cmap_entries++,
 3914              		.loc 1 2642 0 discriminator 3
 3915 0d53 4183CF7F 		orl	$127, %r15d
 3916              	.LVL506:
 3917 0d57 4139EE   		cmpl	%ebp, %r14d
 3918 0d5a 89EE     		movl	%ebp, %esi
 3919 0d5c 5F       		popq	%rdi
 3920              		.cfi_def_cfa_offset 168
 3921 0d5d 4158     		popq	%r8
 3922              		.cfi_def_cfa_offset 160
 3923 0d5f 75CF     		jne	.L304
 3924              	.LBE197:
2635:fltk-1.3.4-1/png/pngread.c ****                      {
 3925              		.loc 1 2635 0 discriminator 2
 3926 0d61 4501E4   		addl	%r12d, %r12d
 3927              	.LVL507:
 3928 0d64 4489F6   		movl	%r14d, %esi
 3929 0d67 4183CC7F 		orl	$127, %r12d
 3930              	.LVL508:
 3931 0d6b 443B3424 		cmpl	(%rsp), %r14d
 3932 0d6f 75B7     		jne	.L306
 3933              	.LBE196:
2631:fltk-1.3.4-1/png/pngread.c ****                   {
 3934              		.loc 1 2631 0 discriminator 2
 3935 0d71 4501ED   		addl	%r13d, %r13d
 3936              	.LVL509:
 3937 0d74 418D4609 		leal	9(%r14), %eax
 3938 0d78 4183CD7F 		orl	$127, %r13d
 3939              	.LVL510:
 3940 0d7c 3944240C 		cmpl	%eax, 12(%rsp)
 3941 0d80 890424   		movl	%eax, (%rsp)
 3942 0d83 7594     		jne	.L303
 3943 0d85 E987FEFF 		jmp	.L438
 3943      FF
 3944              	.LVL511:
 3945              	.L460:
 3946              	.LBE199:
 3947              	.LBB200:
2174:fltk-1.3.4-1/png/pngread.c ****             }
 3948              		.loc 1 2174 0
 3949 0d8a 83FD02   		cmpl	$2, %ebp
 3950 0d8d B8FFFF00 		movl	$65535, %eax
 3950      00
 3951 0d92 0F45C1   		cmovne	%ecx, %eax
 3952 0d95 890424   		movl	%eax, (%rsp)
 3953 0d98 E916F7FF 		jmp	.L258
 3953      FF
 3954              	.LVL512:
 3955              	.L282:
 3956              	.LBE200:
2488:fltk-1.3.4-1/png/pngread.c ****                (output_format & PNG_FORMAT_FLAG_ALPHA) != 0)
 3957              		.loc 1 2488 0
 3958 0d9d 4183E701 		andl	$1, %r15d
 3959              	.LVL513:
 3960 0da1 747A     		je	.L284
 3961              	.LVL514:
2497:fltk-1.3.4-1/png/pngread.c ****                   png_error(png_ptr, "rgb[ga] color-map: too few entries");
 3962              		.loc 1 2497 0
 3963 0da3 488B4424 		movq	40(%rsp), %rax
 3963      28
 3964 0da8 81781CFF 		cmpl	$255, 28(%rax)
 3964      000000
 3965 0daf 0F866B04 		jbe	.L473
 3965      0000
2500:fltk-1.3.4-1/png/pngread.c ****                background_index = PNG_CMAP_GA_BACKGROUND;
 3966              		.loc 1 2500 0
 3967 0db5 4889DF   		movq	%rbx, %rdi
2502:fltk-1.3.4-1/png/pngread.c ****             }
 3968              		.loc 1 2502 0
 3969 0db8 BD010000 		movl	$1, %ebp
 3969      00
 3970              	.LVL515:
2500:fltk-1.3.4-1/png/pngread.c ****                background_index = PNG_CMAP_GA_BACKGROUND;
 3971              		.loc 1 2500 0
 3972 0dbd E8000000 		call	make_ga_colormap
 3972      00
 3973              	.LVL516:
2501:fltk-1.3.4-1/png/pngread.c ****                output_processing = PNG_CMAP_GA;
 3974              		.loc 1 2501 0
 3975 0dc2 C7442434 		movl	$231, 52(%rsp)
 3975      E7000000 
2500:fltk-1.3.4-1/png/pngread.c ****                background_index = PNG_CMAP_GA_BACKGROUND;
 3976              		.loc 1 2500 0
 3977 0dca 4189C6   		movl	%eax, %r14d
 3978              	.LVL517:
2502:fltk-1.3.4-1/png/pngread.c ****             }
 3979              		.loc 1 2502 0
 3980 0dcd E944FEFF 		jmp	.L268
 3980      FF
 3981              	.LVL518:
 3982              	.L360:
 3983              	.LBB201:
2249:fltk-1.3.4-1/png/pngread.c **** 
 3984              		.loc 1 2249 0
 3985 0dd2 4531C9   		xorl	%r9d, %r9d
 3986              	.L265:
 3987              	.LVL519:
2307:fltk-1.3.4-1/png/pngread.c ****                   back_alpha, output_encoding);
 3988              		.loc 1 2307 0
 3989 0dd5 4883EC08 		subq	$8, %rsp
 3990              		.cfi_def_cfa_offset 168
 3991 0dd9 BEFE0000 		movl	$254, %esi
 3991      00
 3992 0dde 4889DF   		movq	%rbx, %rdi
 3993 0de1 55       		pushq	%rbp
 3994              		.cfi_def_cfa_offset 176
 3995 0de2 448B4424 		movl	44(%rsp), %r8d
 3995      2C
 3996 0de7 8B4C241C 		movl	28(%rsp), %ecx
 3997 0deb 8B542428 		movl	40(%rsp), %edx
 3998 0def E8000000 		call	png_create_colormap_entry
 3998      00
 3999              	.LVL520:
 4000              	.LBE201:
 4001 0df4 5D       		popq	%rbp
 4002              		.cfi_def_cfa_offset 168
 4003              	.LVL521:
 4004 0df5 415C     		popq	%r12
 4005              		.cfi_def_cfa_offset 160
 4006              	.LBB202:
2301:fltk-1.3.4-1/png/pngread.c ****                background_index = 254;
 4007              		.loc 1 2301 0
 4008 0df7 BD020000 		movl	$2, %ebp
 4008      00
2302:fltk-1.3.4-1/png/pngread.c **** 
 4009              		.loc 1 2302 0
 4010 0dfc C7442434 		movl	$254, 52(%rsp)
 4010      FE000000 
 4011              	.LBE202:
 4012 0e04 E90DFEFF 		jmp	.L268
 4012      FF
 4013              	.LVL522:
 4014              	.L266:
 4015              	.LBB203:
2290:fltk-1.3.4-1/png/pngread.c ****                }
 4016              		.loc 1 2290 0
 4017 0e09 83FD02   		cmpl	$2, %ebp
 4018 0e0c 41B9FFFF 		movl	$65535, %r9d
 4018      0000
 4019 0e12 B8FF0000 		movl	$255, %eax
 4019      00
 4020 0e17 440F45C8 		cmovne	%eax, %r9d
 4021 0e1b EBB8     		jmp	.L265
 4022              	.LVL523:
 4023              	.L284:
 4024              	.LBE203:
2511:fltk-1.3.4-1/png/pngread.c ****                   png_error(png_ptr, "rgb[gray] color-map: too few entries");
 4025              		.loc 1 2511 0
 4026 0e1d 488B7C24 		movq	40(%rsp), %rdi
 4026      28
 4027 0e22 817F1CFF 		cmpl	$255, 28(%rdi)
 4027      000000
 4028 0e29 0F860F04 		jbe	.L347
 4028      0000
2522:fltk-1.3.4-1/png/pngread.c ****                   png_ptr->num_trans > 0) &&
 4029              		.loc 1 2522 0
 4030 0e2f 3C06     		cmpb	$6, %al
 4031 0e31 0F854602 		jne	.L474
 4031      0000
 4032              	.L287:
2524:fltk-1.3.4-1/png/pngread.c ****                {
 4033              		.loc 1 2524 0
 4034 0e37 488B4424 		movq	32(%rsp), %rax
 4034      20
 4035 0e3c 8B80D804 		movl	1240(%rax), %eax
 4035      0000
 4036              	.LVL524:
 4037              	.LBB204:
 4038              	.LBB205:
1365:fltk-1.3.4-1/png/pngread.c ****    {
 4039              		.loc 1 1365 0
 4040 0e42 3D9F8601 		cmpl	$99999, %eax
 4040      00
 4041 0e47 0F8E0601 		jle	.L289
 4041      0000
 4042              	.LVL525:
 4043              	.L291:
 4044              	.LBE205:
 4045              	.LBE204:
 4046              	.LBB209:
2414:fltk-1.3.4-1/png/pngread.c ****                   output_encoding == P_LINEAR ? 65535U : 255U, output_encoding);
 4047              		.loc 1 2414 0
 4048 0e4d 4531E4   		xorl	%r12d, %r12d
 4049              	.LVL526:
 4050              		.p2align 4,,10
 4051              		.p2align 3
 4052              	.L290:
 4053              	.LBE209:
 4054              	.LBB210:
 4055              	.LBB211:
1957:fltk-1.3.4-1/png/pngread.c **** 
 4056              		.loc 1 1957 0
 4057 0e50 4883EC08 		subq	$8, %rsp
 4058              		.cfi_def_cfa_offset 168
 4059 0e54 4489E2   		movl	%r12d, %edx
 4060 0e57 4589E0   		movl	%r12d, %r8d
 4061 0e5a 6A03     		pushq	$3
 4062              		.cfi_def_cfa_offset 176
 4063 0e5c 4489E1   		movl	%r12d, %ecx
 4064 0e5f 4489E6   		movl	%r12d, %esi
 4065 0e62 41B9FF00 		movl	$255, %r9d
 4065      0000
 4066 0e68 4889DF   		movq	%rbx, %rdi
1956:fltk-1.3.4-1/png/pngread.c ****       png_create_colormap_entry(display, i, i, i, i, 255, P_FILE);
 4067              		.loc 1 1956 0
 4068 0e6b 4183C401 		addl	$1, %r12d
 4069              	.LVL527:
1957:fltk-1.3.4-1/png/pngread.c **** 
 4070              		.loc 1 1957 0
 4071 0e6f E8000000 		call	png_create_colormap_entry
 4071      00
 4072              	.LVL528:
1956:fltk-1.3.4-1/png/pngread.c ****       png_create_colormap_entry(display, i, i, i, i, 255, P_FILE);
 4073              		.loc 1 1956 0
 4074 0e74 4181FC00 		cmpl	$256, %r12d
 4074      010000
 4075 0e7b 58       		popq	%rax
 4076              		.cfi_def_cfa_offset 168
 4077 0e7c 5A       		popq	%rdx
 4078              		.cfi_def_cfa_offset 160
 4079 0e7d 75D1     		jne	.L290
 4080              	.LVL529:
 4081              	.LBE211:
 4082              	.LBE210:
2535:fltk-1.3.4-1/png/pngread.c ****                   png_ptr->num_trans > 0)
 4083              		.loc 1 2535 0
 4084 0e7f 488B4424 		movq	32(%rsp), %rax
 4084      20
 4085 0e84 80B87702 		cmpb	$6, 631(%rax)
 4085      000006
 4086 0e8b 0F85F202 		jne	.L475
 4086      0000
 4087              	.L345:
 4088              	.LVL530:
 4089              	.LBB212:
2553:fltk-1.3.4-1/png/pngread.c ****                         gray = png_sRGB_table[gray]; /* now P_LINEAR */
 4090              		.loc 1 2553 0
 4091 0e91 83FD01   		cmpl	$1, %ebp
 4092 0e94 8B7C240C 		movl	12(%rsp), %edi
 4093 0e98 0F84D602 		je	.L476
 4093      0000
 4094              	.LVL531:
 4095              	.L295:
2556:fltk-1.3.4-1/png/pngread.c ****                         png_ptr->colorspace.gamma)); /* now P_FILE */
 4096              		.loc 1 2556 0
 4097 0e9e 488B4424 		movq	32(%rsp), %rax
 4097      20
 4098 0ea3 8BB0D804 		movl	1240(%rax), %esi
 4098      0000
 4099 0ea9 E8000000 		call	png_gamma_16bit_correct
 4099      00
 4100              	.LVL532:
 4101 0eae 0FB7C0   		movzwl	%ax, %eax
2562:fltk-1.3.4-1/png/pngread.c ****                         back_g, 0/*unused*/, output_encoding);
 4102              		.loc 1 2562 0
 4103 0eb1 4883EC08 		subq	$8, %rsp
 4104              		.cfi_def_cfa_offset 168
 4105 0eb5 4531C9   		xorl	%r9d, %r9d
2556:fltk-1.3.4-1/png/pngread.c ****                         png_ptr->colorspace.gamma)); /* now P_FILE */
 4106              		.loc 1 2556 0
 4107 0eb8 4189C4   		movl	%eax, %r12d
2562:fltk-1.3.4-1/png/pngread.c ****                         back_g, 0/*unused*/, output_encoding);
 4108              		.loc 1 2562 0
 4109 0ebb 55       		pushq	%rbp
 4110              		.cfi_def_cfa_offset 176
 4111 0ebc 8B54241C 		movl	28(%rsp), %edx
2556:fltk-1.3.4-1/png/pngread.c ****                         png_ptr->colorspace.gamma)); /* now P_FILE */
 4112              		.loc 1 2556 0
 4113 0ec0 41C1E408 		sall	$8, %r12d
2562:fltk-1.3.4-1/png/pngread.c ****                         back_g, 0/*unused*/, output_encoding);
 4114              		.loc 1 2562 0
 4115 0ec4 4889DF   		movq	%rbx, %rdi
2556:fltk-1.3.4-1/png/pngread.c ****                         png_ptr->colorspace.gamma)); /* now P_FILE */
 4116              		.loc 1 2556 0
 4117 0ec7 4129C4   		subl	%eax, %r12d
 4118 0eca 4181C47F 		addl	$32895, %r12d
 4118      800000
2562:fltk-1.3.4-1/png/pngread.c ****                         back_g, 0/*unused*/, output_encoding);
 4119              		.loc 1 2562 0
 4120 0ed1 4189D0   		movl	%edx, %r8d
 4121 0ed4 89D1     		movl	%edx, %ecx
2556:fltk-1.3.4-1/png/pngread.c ****                         png_ptr->colorspace.gamma)); /* now P_FILE */
 4122              		.loc 1 2556 0
 4123 0ed6 41C1EC10 		shrl	$16, %r12d
 4124              	.LVL533:
2562:fltk-1.3.4-1/png/pngread.c ****                         back_g, 0/*unused*/, output_encoding);
 4125              		.loc 1 2562 0
 4126 0eda 4489E6   		movl	%r12d, %esi
 4127 0edd E8000000 		call	png_create_colormap_entry
 4127      00
 4128              	.LVL534:
 4129 0ee2 415E     		popq	%r14
 4130              		.cfi_def_cfa_offset 168
 4131 0ee4 415F     		popq	%r15
 4132              		.cfi_def_cfa_offset 160
 4133 0ee6 41BE0001 		movl	$256, %r14d
 4133      0000
2556:fltk-1.3.4-1/png/pngread.c ****                         png_ptr->colorspace.gamma)); /* now P_FILE */
 4134              		.loc 1 2556 0
 4135 0eec 44896424 		movl	%r12d, 12(%rsp)
 4135      0C
 4136              	.LVL535:
 4137 0ef1 41BC0300 		movl	$3, %r12d
 4137      0000
 4138              	.LVL536:
 4139 0ef7 E9ACF9FF 		jmp	.L296
 4139      FF
 4140              	.LVL537:
 4141              	.L309:
 4142              	.LBE212:
 4143              	.LBB213:
 4144              	.LBB175:
2732:fltk-1.3.4-1/png/pngread.c ****                      c.gray = c.green = (png_uint_16)back_g;
 4145              		.loc 1 2732 0
 4146 0efc 0FB74424 		movzwl	24(%rsp), %eax
 4146      18
2736:fltk-1.3.4-1/png/pngread.c ****                         PNG_BACKGROUND_GAMMA_SCREEN, 0/*need_expand*/,
 4147              		.loc 1 2736 0
 4148 0f01 488B7C24 		movq	32(%rsp), %rdi
 4148      20
 4149 0f06 488D7424 		leaq	64(%rsp), %rsi
 4149      40
 4150 0f0b 4531C0   		xorl	%r8d, %r8d
 4151 0f0e 31C9     		xorl	%ecx, %ecx
 4152 0f10 BA010000 		movl	$1, %edx
 4152      00
2731:fltk-1.3.4-1/png/pngread.c ****                      c.red = (png_uint_16)back_r;
 4153              		.loc 1 2731 0
 4154 0f15 C6442440 		movb	$0, 64(%rsp)
 4154      00
2740:fltk-1.3.4-1/png/pngread.c ****                   }
 4155              		.loc 1 2740 0
 4156 0f1a BD030000 		movl	$3, %ebp
 4156      00
 4157              	.LVL538:
2732:fltk-1.3.4-1/png/pngread.c ****                      c.gray = c.green = (png_uint_16)back_g;
 4158              		.loc 1 2732 0
 4159 0f1f 66894424 		movw	%ax, 66(%rsp)
 4159      42
2733:fltk-1.3.4-1/png/pngread.c ****                      c.blue = (png_uint_16)back_b;
 4160              		.loc 1 2733 0
 4161 0f24 8B44240C 		movl	12(%rsp), %eax
 4162 0f28 66894424 		movw	%ax, 68(%rsp)
 4162      44
 4163 0f2d 66894424 		movw	%ax, 72(%rsp)
 4163      48
2734:fltk-1.3.4-1/png/pngread.c **** 
 4164              		.loc 1 2734 0
 4165 0f32 0FB74424 		movzwl	28(%rsp), %eax
 4165      1C
 4166 0f37 66894424 		movw	%ax, 70(%rsp)
 4166      46
2736:fltk-1.3.4-1/png/pngread.c ****                         PNG_BACKGROUND_GAMMA_SCREEN, 0/*need_expand*/,
 4167              		.loc 1 2736 0
 4168 0f3c E8000000 		call	png_set_background_fixed
 4168      00
 4169              	.LVL539:
 4170              	.LBE175:
2668:fltk-1.3.4-1/png/pngread.c **** 
 4171              		.loc 1 2668 0
 4172 0f41 448B7424 		movl	52(%rsp), %r14d
 4172      34
 4173              	.LBE213:
2077:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 back_r, back_g, back_b;
 4174              		.loc 1 2077 0
 4175 0f46 C7442434 		movl	$256, 52(%rsp)
 4175      00010000 
 4176              	.LVL540:
 4177 0f4e E90DF4FF 		jmp	.L330
 4177      FF
 4178              	.LVL541:
 4179              	.L289:
 4180              	.LBB214:
 4181              	.LBB208:
1368:fltk-1.3.4-1/png/pngread.c ****          return 0;
 4182              		.loc 1 1368 0
 4183 0f53 85C0     		testl	%eax, %eax
 4184 0f55 0F8412F9 		je	.L288
 4184      FFFF
 4185              	.LVL542:
 4186              	.LBB206:
 4187              	.LBB207:
1371:fltk-1.3.4-1/png/pngread.c ****    }
 4188              		.loc 1 1371 0
 4189 0f5b 8D1480   		leal	(%rax,%rax,4), %edx
 4190 0f5e 8D4C5002 		leal	2(%rax,%rdx,2), %ecx
 4191 0f62 BA676666 		movl	$1717986919, %edx
 4191      66
 4192 0f67 89C8     		movl	%ecx, %eax
 4193              	.LVL543:
 4194 0f69 C1F91F   		sarl	$31, %ecx
 4195 0f6c F7EA     		imull	%edx
 4196 0f6e D1FA     		sarl	%edx
 4197 0f70 89D7     		movl	%edx, %edi
 4198 0f72 29CF     		subl	%ecx, %edi
 4199 0f74 E8000000 		call	png_gamma_significant
 4199      00
 4200              	.LVL544:
 4201              	.LBE207:
 4202              	.LBE206:
 4203              	.LBE208:
 4204              	.LBE214:
2523:fltk-1.3.4-1/png/pngread.c ****                   png_gamma_not_sRGB(png_ptr->colorspace.gamma) != 0)
 4205              		.loc 1 2523 0
 4206 0f79 85C0     		testl	%eax, %eax
 4207 0f7b 0F84ECF8 		je	.L288
 4207      FFFF
 4208 0f81 E9C7FEFF 		jmp	.L291
 4208      FF
 4209              	.LVL545:
 4210 0f86 662E0F1F 		.p2align 4,,10
 4210      84000000 
 4210      0000
 4211              		.p2align 3
 4212              	.L471:
 4213              	.LBB215:
2675:fltk-1.3.4-1/png/pngread.c ****                      g = PNG_sRGB_FROM_LINEAR(back_g * 255);
 4214              		.loc 1 2675 0
 4215 0f90 8B4C2418 		movl	24(%rsp), %ecx
2676:fltk-1.3.4-1/png/pngread.c ****                      b = PNG_sRGB_FROM_LINEAR(back_b * 255);
 4216              		.loc 1 2676 0
 4217 0f94 8B7C240C 		movl	12(%rsp), %edi
2675:fltk-1.3.4-1/png/pngread.c ****                      g = PNG_sRGB_FROM_LINEAR(back_g * 255);
 4218              		.loc 1 2675 0
 4219 0f98 89C8     		movl	%ecx, %eax
 4220 0f9a C1E008   		sall	$8, %eax
 4221 0f9d 29C8     		subl	%ecx, %eax
 4222 0f9f 89C1     		movl	%eax, %ecx
 4223 0fa1 25FF7F00 		andl	$32767, %eax
 4223      00
 4224 0fa6 C1E90F   		shrl	$15, %ecx
 4225 0fa9 0FB69100 		movzbl	png_sRGB_delta(%rcx), %edx
 4225      000000
 4226 0fb0 0FAFC2   		imull	%edx, %eax
 4227 0fb3 0FB79409 		movzwl	png_sRGB_base(%rcx,%rcx), %edx
 4227      00000000 
 4228 0fbb C1E80C   		shrl	$12, %eax
 4229 0fbe 01D0     		addl	%edx, %eax
2676:fltk-1.3.4-1/png/pngread.c ****                      b = PNG_sRGB_FROM_LINEAR(back_b * 255);
 4230              		.loc 1 2676 0
 4231 0fc0 89FA     		movl	%edi, %edx
 4232 0fc2 C1E208   		sall	$8, %edx
2675:fltk-1.3.4-1/png/pngread.c ****                      g = PNG_sRGB_FROM_LINEAR(back_g * 255);
 4233              		.loc 1 2675 0
 4234 0fc5 0FB6C4   		movzbl	%ah, %eax
 4235              	.LVL546:
2676:fltk-1.3.4-1/png/pngread.c ****                      b = PNG_sRGB_FROM_LINEAR(back_b * 255);
 4236              		.loc 1 2676 0
 4237 0fc8 29FA     		subl	%edi, %edx
 4238 0fca 89D6     		movl	%edx, %esi
 4239 0fcc 81E2FF7F 		andl	$32767, %edx
 4239      0000
 4240 0fd2 C1EE0F   		shrl	$15, %esi
 4241 0fd5 0FB68E00 		movzbl	png_sRGB_delta(%rsi), %ecx
 4241      000000
 4242 0fdc 0FB7BC36 		movzwl	png_sRGB_base(%rsi,%rsi), %edi
 4242      00000000 
 4243 0fe4 0FAFD1   		imull	%ecx, %edx
2677:fltk-1.3.4-1/png/pngread.c ****                   }
 4244              		.loc 1 2677 0
 4245 0fe7 8B4C241C 		movl	28(%rsp), %ecx
2676:fltk-1.3.4-1/png/pngread.c ****                      b = PNG_sRGB_FROM_LINEAR(back_b * 255);
 4246              		.loc 1 2676 0
 4247 0feb C1EA0C   		shrl	$12, %edx
 4248 0fee 01FA     		addl	%edi, %edx
 4249 0ff0 0FB6FE   		movzbl	%dh, %edi
 4250              	.LVL547:
2677:fltk-1.3.4-1/png/pngread.c ****                   }
 4251              		.loc 1 2677 0
 4252 0ff3 89CA     		movl	%ecx, %edx
 4253 0ff5 C1E208   		sall	$8, %edx
 4254 0ff8 29CA     		subl	%ecx, %edx
 4255 0ffa 89D6     		movl	%edx, %esi
 4256 0ffc 81E2FF7F 		andl	$32767, %edx
 4256      0000
 4257 1002 C1EE0F   		shrl	$15, %esi
 4258 1005 0FB68E00 		movzbl	png_sRGB_delta(%rsi), %ecx
 4258      000000
 4259 100c 0FB7B436 		movzwl	png_sRGB_base(%rsi,%rsi), %esi
 4259      00000000 
 4260 1014 0FAFD1   		imull	%ecx, %edx
 4261 1017 C1EA0C   		shrl	$12, %edx
 4262 101a 01F2     		addl	%esi, %edx
 4263 101c 0FB6F6   		movzbl	%dh, %esi
 4264              	.LVL548:
 4265 101f E96DFAFF 		jmp	.L308
 4265      FF
 4266              	.LVL549:
 4267              	.L468:
 4268              	.LBE215:
 4269              	.LBB216:
2372:fltk-1.3.4-1/png/pngread.c **** 
 4270              		.loc 1 2372 0
 4271 1024 8B4C240C 		movl	12(%rsp), %ecx
2375:fltk-1.3.4-1/png/pngread.c ****                      back_g, 65535, P_LINEAR);
 4272              		.loc 1 2375 0
 4273 1028 4883EC08 		subq	$8, %rsp
 4274              		.cfi_def_cfa_offset 168
 4275 102c 41B9FFFF 		movl	$65535, %r9d
 4275      0000
 4276 1032 6A02     		pushq	$2
 4277              		.cfi_def_cfa_offset 176
 4278 1034 4889DF   		movq	%rbx, %rdi
2372:fltk-1.3.4-1/png/pngread.c **** 
 4279              		.loc 1 2372 0
 4280 1037 89C8     		movl	%ecx, %eax
 4281              	.LVL550:
2375:fltk-1.3.4-1/png/pngread.c ****                      back_g, 65535, P_LINEAR);
 4282              		.loc 1 2375 0
 4283 1039 4189C8   		movl	%ecx, %r8d
2372:fltk-1.3.4-1/png/pngread.c **** 
 4284              		.loc 1 2372 0
 4285 103c C1E008   		sall	$8, %eax
 4286 103f 29C8     		subl	%ecx, %eax
 4287 1041 89C2     		movl	%eax, %edx
 4288 1043 25FF7F00 		andl	$32767, %eax
 4288      00
 4289 1048 C1EA0F   		shrl	$15, %edx
 4290 104b 0FB6AA00 		movzbl	png_sRGB_delta(%rdx), %ebp
 4290      000000
 4291              	.LVL551:
 4292 1052 0FAFC5   		imull	%ebp, %eax
 4293 1055 C1E80C   		shrl	$12, %eax
 4294 1058 89C5     		movl	%eax, %ebp
 4295 105a 0FB78412 		movzwl	png_sRGB_base(%rdx,%rdx), %eax
 4295      00000000 
2375:fltk-1.3.4-1/png/pngread.c ****                      back_g, 65535, P_LINEAR);
 4296              		.loc 1 2375 0
 4297 1062 89CA     		movl	%ecx, %edx
2372:fltk-1.3.4-1/png/pngread.c **** 
 4298              		.loc 1 2372 0
 4299 1064 01E8     		addl	%ebp, %eax
 4300 1066 0FB6EC   		movzbl	%ah, %ebp
 4301              	.LVL552:
2375:fltk-1.3.4-1/png/pngread.c ****                      back_g, 65535, P_LINEAR);
 4302              		.loc 1 2375 0
 4303 1069 89EE     		movl	%ebp, %esi
 4304 106b E8000000 		call	png_create_colormap_entry
 4304      00
 4305              	.LVL553:
 4306 1070 415A     		popq	%r10
 4307              		.cfi_def_cfa_offset 168
 4308 1072 415B     		popq	%r11
 4309              		.cfi_def_cfa_offset 160
2372:fltk-1.3.4-1/png/pngread.c **** 
 4310              		.loc 1 2372 0
 4311 1074 896C240C 		movl	%ebp, 12(%rsp)
 4312              	.LVL554:
 4313 1078 E931F9FF 		jmp	.L274
 4313      FF
 4314              	.LVL555:
 4315              	.L474:
 4316              	.LBE216:
2522:fltk-1.3.4-1/png/pngread.c ****                   png_ptr->num_trans > 0) &&
 4317              		.loc 1 2522 0
 4318 107d 488B4424 		movq	32(%rsp), %rax
 4318      20
 4319 1082 6683B870 		cmpw	$0, 624(%rax)
 4319      02000000 
 4320 108a 0F85A7FD 		jne	.L287
 4320      FFFF
 4321 1090 E9D8F7FF 		jmp	.L288
 4321      FF
 4322              	.LVL556:
 4323              		.p2align 4,,10
 4324 1095 0F1F00   		.p2align 3
 4325              	.L464:
 4326              	.LBB217:
2414:fltk-1.3.4-1/png/pngread.c ****                   output_encoding == P_LINEAR ? 65535U : 255U, output_encoding);
 4327              		.loc 1 2414 0
 4328 1098 4883EC08 		subq	$8, %rsp
 4329              		.cfi_def_cfa_offset 168
 4330 109c 41B9FFFF 		movl	$65535, %r9d
 4330      0000
 4331 10a2 BEE70000 		movl	$231, %esi
 4331      00
 4332 10a7 6A02     		pushq	$2
 4333              		.cfi_def_cfa_offset 176
 4334 10a9 448B4424 		movl	44(%rsp), %r8d
 4334      2C
 4335 10ae 4889DF   		movq	%rbx, %rdi
 4336 10b1 8B4C241C 		movl	28(%rsp), %ecx
 4337 10b5 8B542428 		movl	40(%rsp), %edx
 4338 10b9 E8000000 		call	png_create_colormap_entry
 4338      00
 4339              	.LVL557:
 4340 10be 58       		popq	%rax
 4341              		.cfi_def_cfa_offset 168
 4342 10bf 5A       		popq	%rdx
 4343              		.cfi_def_cfa_offset 160
 4344 10c0 E90DF6FF 		jmp	.L344
 4344      FF
 4345              	.LVL558:
 4346              	.L462:
 4347              	.LBE217:
 4348              	.LBB218:
 4349              	.LBB181:
2263:fltk-1.3.4-1/png/pngread.c **** 
 4350              		.loc 1 2263 0
 4351 10c5 89C7     		movl	%eax, %edi
 4352 10c7 C1E008   		sall	$8, %eax
 4353              	.LVL559:
2268:fltk-1.3.4-1/png/pngread.c ****                            back_g, 65535, P_LINEAR);
 4354              		.loc 1 2268 0
 4355 10ca 4883EC08 		subq	$8, %rsp
 4356              		.cfi_def_cfa_offset 168
2263:fltk-1.3.4-1/png/pngread.c **** 
 4357              		.loc 1 2263 0
 4358 10ce 29F8     		subl	%edi, %eax
2268:fltk-1.3.4-1/png/pngread.c ****                            back_g, 65535, P_LINEAR);
 4359              		.loc 1 2268 0
 4360 10d0 6A02     		pushq	$2
 4361              		.cfi_def_cfa_offset 176
 4362 10d2 4189F8   		movl	%edi, %r8d
2263:fltk-1.3.4-1/png/pngread.c **** 
 4363              		.loc 1 2263 0
 4364 10d5 89C2     		movl	%eax, %edx
 4365 10d7 25FF7F00 		andl	$32767, %eax
 4365      00
2268:fltk-1.3.4-1/png/pngread.c ****                            back_g, 65535, P_LINEAR);
 4366              		.loc 1 2268 0
 4367 10dc 89F9     		movl	%edi, %ecx
2263:fltk-1.3.4-1/png/pngread.c **** 
 4368              		.loc 1 2263 0
 4369 10de C1EA0F   		shrl	$15, %edx
2268:fltk-1.3.4-1/png/pngread.c ****                            back_g, 65535, P_LINEAR);
 4370              		.loc 1 2268 0
 4371 10e1 41B9FFFF 		movl	$65535, %r9d
 4371      0000
2263:fltk-1.3.4-1/png/pngread.c **** 
 4372              		.loc 1 2263 0
 4373 10e7 0FB6AA00 		movzbl	png_sRGB_delta(%rdx), %ebp
 4373      000000
 4374              	.LVL560:
 4375 10ee 0FAFC5   		imull	%ebp, %eax
 4376 10f1 C1E80C   		shrl	$12, %eax
 4377 10f4 89C5     		movl	%eax, %ebp
 4378 10f6 0FB78412 		movzwl	png_sRGB_base(%rdx,%rdx), %eax
 4378      00000000 
2268:fltk-1.3.4-1/png/pngread.c ****                            back_g, 65535, P_LINEAR);
 4379              		.loc 1 2268 0
 4380 10fe 89FA     		movl	%edi, %edx
 4381 1100 4889DF   		movq	%rbx, %rdi
2263:fltk-1.3.4-1/png/pngread.c **** 
 4382              		.loc 1 2263 0
 4383 1103 01E8     		addl	%ebp, %eax
 4384 1105 0FB6EC   		movzbl	%ah, %ebp
 4385              	.LVL561:
2268:fltk-1.3.4-1/png/pngread.c ****                            back_g, 65535, P_LINEAR);
 4386              		.loc 1 2268 0
 4387 1108 89EE     		movl	%ebp, %esi
 4388 110a E8000000 		call	png_create_colormap_entry
 4388      00
 4389              	.LVL562:
 4390 110f 415D     		popq	%r13
 4391              		.cfi_def_cfa_offset 168
 4392 1111 415F     		popq	%r15
 4393              		.cfi_def_cfa_offset 160
2263:fltk-1.3.4-1/png/pngread.c **** 
 4394              		.loc 1 2263 0
 4395 1113 896C240C 		movl	%ebp, 12(%rsp)
 4396              	.LVL563:
 4397 1117 E9A4F4FF 		jmp	.L267
 4397      FF
 4398              	.LVL564:
 4399              	.L465:
 4400              	.LBE181:
 4401              	.LBE218:
 4402              	.LBB219:
2568:fltk-1.3.4-1/png/pngread.c **** 
 4403              		.loc 1 2568 0
 4404 111c 8B7C240C 		movl	12(%rsp), %edi
2572:fltk-1.3.4-1/png/pngread.c ****                         back_g, 0/*unused*/, P_LINEAR);
 4405              		.loc 1 2572 0
 4406 1120 4883EC08 		subq	$8, %rsp
 4407              		.cfi_def_cfa_offset 168
 4408 1124 4531C9   		xorl	%r9d, %r9d
 4409 1127 6A02     		pushq	$2
 4410              		.cfi_def_cfa_offset 176
2568:fltk-1.3.4-1/png/pngread.c **** 
 4411              		.loc 1 2568 0
 4412 1129 89F8     		movl	%edi, %eax
2572:fltk-1.3.4-1/png/pngread.c ****                         back_g, 0/*unused*/, P_LINEAR);
 4413              		.loc 1 2572 0
 4414 112b 4189F8   		movl	%edi, %r8d
 4415 112e 89F9     		movl	%edi, %ecx
2568:fltk-1.3.4-1/png/pngread.c **** 
 4416              		.loc 1 2568 0
 4417 1130 C1E008   		sall	$8, %eax
 4418 1133 29F8     		subl	%edi, %eax
 4419 1135 89C2     		movl	%eax, %edx
 4420 1137 25FF7F00 		andl	$32767, %eax
 4420      00
 4421 113c C1EA0F   		shrl	$15, %edx
 4422 113f 0FB6AA00 		movzbl	png_sRGB_delta(%rdx), %ebp
 4422      000000
 4423              	.LVL565:
 4424 1146 0FAFC5   		imull	%ebp, %eax
 4425 1149 C1E80C   		shrl	$12, %eax
 4426 114c 89C5     		movl	%eax, %ebp
 4427 114e 0FB78412 		movzwl	png_sRGB_base(%rdx,%rdx), %eax
 4427      00000000 
2572:fltk-1.3.4-1/png/pngread.c ****                         back_g, 0/*unused*/, P_LINEAR);
 4428              		.loc 1 2572 0
 4429 1156 89FA     		movl	%edi, %edx
 4430 1158 4889DF   		movq	%rbx, %rdi
2568:fltk-1.3.4-1/png/pngread.c **** 
 4431              		.loc 1 2568 0
 4432 115b 01E8     		addl	%ebp, %eax
 4433 115d 0FB6EC   		movzbl	%ah, %ebp
 4434              	.LVL566:
2572:fltk-1.3.4-1/png/pngread.c ****                         back_g, 0/*unused*/, P_LINEAR);
 4435              		.loc 1 2572 0
 4436 1160 89EE     		movl	%ebp, %esi
 4437 1162 E8000000 		call	png_create_colormap_entry
 4437      00
 4438              	.LVL567:
 4439 1167 415B     		popq	%r11
 4440              		.cfi_def_cfa_offset 168
 4441 1169 415D     		popq	%r13
 4442              		.cfi_def_cfa_offset 160
2568:fltk-1.3.4-1/png/pngread.c **** 
 4443              		.loc 1 2568 0
 4444 116b 896C240C 		movl	%ebp, 12(%rsp)
 4445              	.LVL568:
 4446 116f E934F7FF 		jmp	.L296
 4446      FF
 4447              	.LVL569:
 4448              	.L476:
2554:fltk-1.3.4-1/png/pngread.c **** 
 4449              		.loc 1 2554 0
 4450 1174 89F8     		movl	%edi, %eax
 4451 1176 0FB7BC00 		movzwl	png_sRGB_table(%rax,%rax), %edi
 4451      00000000 
 4452              	.LVL570:
 4453 117e E91BFDFF 		jmp	.L295
 4453      FF
 4454              	.LVL571:
 4455              	.L475:
 4456              	.LBE219:
2535:fltk-1.3.4-1/png/pngread.c ****                   png_ptr->num_trans > 0)
 4457              		.loc 1 2535 0
 4458 1183 488B4424 		movq	32(%rsp), %rax
 4458      20
 4459 1188 6683B870 		cmpw	$0, 624(%rax)
 4459      02000000 
 4460 1190 0F85FBFC 		jne	.L345
 4460      FFFF
 4461 1196 C7442434 		movl	$256, 52(%rsp)
 4461      00010000 
 4462 119e 41BE0001 		movl	$256, %r14d
 4462      0000
 4463 11a4 31ED     		xorl	%ebp, %ebp
 4464              	.LVL572:
 4465              	.L331:
 4466 11a6 488B4424 		movq	32(%rsp), %rax
 4466      20
 4467 11ab 0FB68078 		movzbl	632(%rax), %eax
 4467      020000
 4468 11b2 E9C5F1FF 		jmp	.L332
 4468      FF
 4469              	.LVL573:
 4470              	.L458:
2332:fltk-1.3.4-1/png/pngread.c **** 
 4471              		.loc 1 2332 0
 4472 11b7 488B7C24 		movq	32(%rsp), %rdi
 4472      20
 4473 11bc BE000000 		movl	$.LC22, %esi
 4473      00
 4474 11c1 E8000000 		call	png_error
 4474      00
 4475              	.LVL574:
 4476              	.L459:
 4477              	.LBB220:
2161:fltk-1.3.4-1/png/pngread.c **** 
 4478              		.loc 1 2161 0
 4479 11c6 488B7C24 		movq	32(%rsp), %rdi
 4479      20
 4480 11cb BE000000 		movl	$.LC20, %esi
 4480      00
 4481 11d0 E8000000 		call	png_error
 4481      00
 4482              	.LVL575:
 4483              	.L472:
 4484              	.LBE220:
 4485              	.LBB221:
2617:fltk-1.3.4-1/png/pngread.c **** 
 4486              		.loc 1 2617 0
 4487 11d5 488B7C24 		movq	32(%rsp), %rdi
 4487      20
 4488 11da BE000000 		movl	$.LC27, %esi
 4488      00
 4489 11df E8000000 		call	png_error
 4489      00
 4490              	.LVL576:
 4491              	.L259:
 4492              	.LBE221:
 4493              	.LBB222:
2203:fltk-1.3.4-1/png/pngread.c ****                      back_alpha, output_encoding);
 4494              		.loc 1 2203 0
 4495 11e4 4883EC08 		subq	$8, %rsp
 4496              		.cfi_def_cfa_offset 168
 4497              	.LVL577:
 4498 11e8 4489E6   		movl	%r12d, %esi
 4499 11eb 4889DF   		movq	%rbx, %rdi
 4500 11ee 8B442418 		movl	24(%rsp), %eax
 4501 11f2 50       		pushq	%rax
 4502              		.cfi_def_cfa_offset 176
 4503 11f3 448B4C24 		movl	16(%rsp), %r9d
 4503      10
 4504 11f8 448B4424 		movl	44(%rsp), %r8d
 4504      2C
 4505 11fd 8B4C241C 		movl	28(%rsp), %ecx
 4506 1201 8B542428 		movl	40(%rsp), %edx
 4507 1205 E8000000 		call	png_create_colormap_entry
 4507      00
 4508              	.LVL578:
 4509 120a 58       		popq	%rax
 4510              		.cfi_def_cfa_offset 168
 4511 120b 5A       		popq	%rdx
 4512              		.cfi_def_cfa_offset 160
 4513              	.LVL579:
 4514 120c E9DAF2FF 		jmp	.L260
 4514      FF
 4515              	.LVL580:
 4516              	.L463:
 4517              	.LBE222:
 4518              	.LBB223:
2400:fltk-1.3.4-1/png/pngread.c **** 
 4519              		.loc 1 2400 0
 4520 1211 488B7C24 		movq	32(%rsp), %rdi
 4520      20
 4521 1216 BE000000 		movl	$.LC24, %esi
 4521      00
 4522 121b E8000000 		call	png_error
 4522      00
 4523              	.LVL581:
 4524              	.L473:
 4525              	.LBE223:
2498:fltk-1.3.4-1/png/pngread.c **** 
 4526              		.loc 1 2498 0
 4527 1220 488B7C24 		movq	32(%rsp), %rdi
 4527      20
 4528 1225 BE000000 		movl	$.LC25, %esi
 4528      00
 4529 122a E8000000 		call	png_error
 4529      00
 4530              	.LVL582:
 4531              	.L466:
2592:fltk-1.3.4-1/png/pngread.c ****             }
 4532              		.loc 1 2592 0
 4533 122f 31ED     		xorl	%ebp, %ebp
2077:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 back_r, back_g, back_b;
 4534              		.loc 1 2077 0
 4535 1231 C7442434 		movl	$256, 52(%rsp)
 4535      00010000 
 4536 1239 E903FAFF 		jmp	.L350
 4536      FF
 4537              	.LVL583:
 4538              	.L347:
2512:fltk-1.3.4-1/png/pngread.c **** 
 4539              		.loc 1 2512 0
 4540 123e 488B7C24 		movq	32(%rsp), %rdi
 4540      20
 4541 1243 BE000000 		movl	$.LC26, %esi
 4541      00
 4542 1248 E8000000 		call	png_error
 4542      00
 4543              	.LVL584:
 4544              	.L461:
2240:fltk-1.3.4-1/png/pngread.c **** 
 4545              		.loc 1 2240 0
 4546 124d 488B7C24 		movq	32(%rsp), %rdi
 4546      20
 4547 1252 BE000000 		movl	$.LC21, %esi
 4547      00
 4548 1257 E8000000 		call	png_error
 4548      00
 4549              	.LVL585:
 4550              	.L470:
 4551              	.LBB224:
2666:fltk-1.3.4-1/png/pngread.c **** 
 4552              		.loc 1 2666 0
 4553 125c 488B7C24 		movq	32(%rsp), %rdi
 4553      20
 4554 1261 BE000000 		movl	$.LC28, %esi
 4554      00
 4555 1266 E8000000 		call	png_error
 4555      00
 4556              	.LVL586:
 4557              	.L467:
 4558              	.LBE224:
 4559              	.LBB225:
2366:fltk-1.3.4-1/png/pngread.c **** 
 4560              		.loc 1 2366 0
 4561 126b 488B7C24 		movq	32(%rsp), %rdi
 4561      20
 4562 1270 BE000000 		movl	$.LC23, %esi
 4562      00
 4563 1275 E8000000 		call	png_error
 4563      00
 4564              	.LVL587:
 4565              	.L454:
 4566              	.LBE225:
2751:fltk-1.3.4-1/png/pngread.c **** 
 4567              		.loc 1 2751 0
 4568 127a 488B7C24 		movq	32(%rsp), %rdi
 4568      20
 4569 127f BE000000 		movl	$.LC29, %esi
 4569      00
 4570 1284 E8000000 		call	png_error
 4570      00
 4571              	.LVL588:
 4572              	.L446:
2096:fltk-1.3.4-1/png/pngread.c ****             "a background color must be supplied to remove alpha/transparency");
 4573              		.loc 1 2096 0
 4574 1289 488B7C24 		movq	32(%rsp), %rdi
 4574      20
 4575              	.LVL589:
 4576 128e BE000000 		movl	$.LC19, %esi
 4576      00
 4577 1293 E8000000 		call	png_error
 4577      00
 4578              	.LVL590:
 4579              	.L317:
 4580              	.LBB226:
2782:fltk-1.3.4-1/png/pngread.c **** 
 4581              		.loc 1 2782 0
 4582 1298 488B7C24 		movq	32(%rsp), %rdi
 4582      20
 4583 129d BE000000 		movl	$.LC30, %esi
 4583      00
 4584              	.LVL591:
 4585 12a2 E8000000 		call	png_error
 4585      00
 4586              	.LVL592:
 4587              	.L457:
 4588              	.LBE226:
 4589              		.loc 1 2896 0
 4590 12a7 E8000000 		call	__stack_chk_fail
 4590      00
 4591              	.LVL593:
 4592              	.L334:
2853:fltk-1.3.4-1/png/pngread.c **** 
 4593              		.loc 1 2853 0
 4594 12ac 488B7C24 		movq	32(%rsp), %rdi
 4594      20
 4595 12b1 BE000000 		movl	$.LC33, %esi
 4595      00
 4596 12b6 E8000000 		call	png_error
 4596      00
 4597              	.LVL594:
 4598              		.cfi_endproc
 4599              	.LFE87:
 4601              		.section	.text.unlikely.png_image_read_colormap
 4602              	.LCOLDE35:
 4603              		.section	.text.png_image_read_colormap
 4604              	.LHOTE35:
 4605              		.section	.text.unlikely.png_create_read_struct_2,"ax",@progbits
 4606              	.LCOLDB36:
 4607              		.section	.text.png_create_read_struct_2,"ax",@progbits
 4608              	.LHOTB36:
 4609              		.p2align 4,,15
 4610              		.globl	png_create_read_struct_2
 4612              	png_create_read_struct_2:
 4613              	.LFB57:
  44:fltk-1.3.4-1/png/pngread.c ****    png_structp png_ptr = png_create_png_struct(user_png_ver, error_ptr,
 4614              		.loc 1 44 0
 4615              		.cfi_startproc
 4616              	.LVL595:
 4617 0000 53       		pushq	%rbx
 4618              		.cfi_def_cfa_offset 16
 4619              		.cfi_offset 3, -16
  45:fltk-1.3.4-1/png/pngread.c ****       error_fn, warn_fn, mem_ptr, malloc_fn, free_fn);
 4620              		.loc 1 45 0
 4621 0001 4883EC08 		subq	$8, %rsp
 4622              		.cfi_def_cfa_offset 24
 4623 0005 FF742418 		pushq	24(%rsp)
 4624              		.cfi_def_cfa_offset 32
 4625 0009 E8000000 		call	png_create_png_struct
 4625      00
 4626              	.LVL596:
  49:fltk-1.3.4-1/png/pngread.c ****    {
 4627              		.loc 1 49 0
 4628 000e 4885C0   		testq	%rax, %rax
  45:fltk-1.3.4-1/png/pngread.c ****       error_fn, warn_fn, mem_ptr, malloc_fn, free_fn);
 4629              		.loc 1 45 0
 4630 0011 4889C3   		movq	%rax, %rbx
 4631              	.LVL597:
  49:fltk-1.3.4-1/png/pngread.c ****    {
 4632              		.loc 1 49 0
 4633 0014 5A       		popq	%rdx
 4634              		.cfi_def_cfa_offset 24
 4635 0015 59       		popq	%rcx
 4636              		.cfi_def_cfa_offset 16
 4637 0016 742A     		je	.L478
  67:fltk-1.3.4-1/png/pngread.c **** #        endif
 4638              		.loc 1 67 0
 4639 0018 81883001 		orl	$3145728, 304(%rax)
 4639      00000000 
 4639      3000
  51:fltk-1.3.4-1/png/pngread.c **** 
 4640              		.loc 1 51 0
 4641 0022 C7802C01 		movl	$32768, 300(%rax)
 4641      00000080 
 4641      0000
  75:fltk-1.3.4-1/png/pngread.c ****    }
 4642              		.loc 1 75 0
 4643 002c 31D2     		xorl	%edx, %edx
  57:fltk-1.3.4-1/png/pngread.c **** #     endif
 4644              		.loc 1 57 0
 4645 002e C780A804 		movl	$8192, 1192(%rax)
 4645      00000020 
 4645      0000
  75:fltk-1.3.4-1/png/pngread.c ****    }
 4646              		.loc 1 75 0
 4647 0038 31F6     		xorl	%esi, %esi
 4648 003a 4889C7   		movq	%rax, %rdi
 4649 003d E8000000 		call	png_set_read_fn
 4649      00
 4650              	.LVL598:
 4651              	.L478:
  79:fltk-1.3.4-1/png/pngread.c **** 
 4652              		.loc 1 79 0
 4653 0042 4889D8   		movq	%rbx, %rax
 4654 0045 5B       		popq	%rbx
 4655              		.cfi_def_cfa_offset 8
 4656              	.LVL599:
 4657 0046 C3       		ret
 4658              		.cfi_endproc
 4659              	.LFE57:
 4661              		.section	.text.unlikely.png_create_read_struct_2
 4662              	.LCOLDE36:
 4663              		.section	.text.png_create_read_struct_2
 4664              	.LHOTE36:
 4665              		.section	.text.unlikely.png_create_read_struct,"ax",@progbits
 4666              	.LCOLDB37:
 4667              		.section	.text.png_create_read_struct,"ax",@progbits
 4668              	.LHOTB37:
 4669              		.p2align 4,,15
 4670              		.globl	png_create_read_struct
 4672              	png_create_read_struct:
 4673              	.LFB56:
  28:fltk-1.3.4-1/png/pngread.c **** #ifndef PNG_USER_MEM_SUPPORTED
 4674              		.loc 1 28 0
 4675              		.cfi_startproc
 4676              	.LVL600:
 4677 0000 4883EC10 		subq	$16, %rsp
 4678              		.cfi_def_cfa_offset 24
  33:fltk-1.3.4-1/png/pngread.c ****        warn_fn, NULL, NULL, NULL);
 4679              		.loc 1 33 0
 4680 0004 4531C9   		xorl	%r9d, %r9d
 4681 0007 4531C0   		xorl	%r8d, %r8d
 4682 000a 6A00     		pushq	$0
 4683              		.cfi_def_cfa_offset 32
 4684 000c E8000000 		call	png_create_read_struct_2
 4684      00
 4685              	.LVL601:
  35:fltk-1.3.4-1/png/pngread.c **** 
 4686              		.loc 1 35 0
 4687 0011 4883C418 		addq	$24, %rsp
 4688              		.cfi_def_cfa_offset 8
 4689 0015 C3       		ret
 4690              		.cfi_endproc
 4691              	.LFE56:
 4693              		.section	.text.unlikely.png_create_read_struct
 4694              	.LCOLDE37:
 4695              		.section	.text.png_create_read_struct
 4696              	.LHOTE37:
 4697              		.section	.text.unlikely.png_read_info,"ax",@progbits
 4698              	.LCOLDB38:
 4699              		.section	.text.png_read_info,"ax",@progbits
 4700              	.LHOTB38:
 4701              		.p2align 4,,15
 4702              		.globl	png_read_info
 4704              	png_read_info:
 4705              	.LFB58:
  93:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED
 4706              		.loc 1 93 0
 4707              		.cfi_startproc
 4708              	.LVL602:
 100:fltk-1.3.4-1/png/pngread.c ****       return;
 4709              		.loc 1 100 0
 4710 0000 4885FF   		testq	%rdi, %rdi
 4711 0003 740B     		je	.L485
 4712 0005 4885F6   		testq	%rsi, %rsi
 4713 0008 7406     		je	.L485
 4714 000a E9000000 		jmp	png_read_info.part.4
 4714      00
 4715              	.LVL603:
 4716 000f 90       		.p2align 4,,10
 4717              		.p2align 3
 4718              	.L485:
 4719 0010 F3C3     		rep ret
 4720              		.cfi_endproc
 4721              	.LFE58:
 4723              		.section	.text.unlikely.png_read_info
 4724              	.LCOLDE38:
 4725              		.section	.text.png_read_info
 4726              	.LHOTE38:
 4727              		.section	.rodata.str1.8
 4728 0296 0000     		.align 8
 4729              	.LC39:
 4730 0298 706E675F 		.string	"png_read_update_info/png_start_read_image: duplicate call"
 4730      72656164 
 4730      5F757064 
 4730      6174655F 
 4730      696E666F 
 4731              		.section	.text.unlikely.png_read_update_info,"ax",@progbits
 4732              	.LCOLDB40:
 4733              		.section	.text.png_read_update_info,"ax",@progbits
 4734              	.LHOTB40:
 4735              		.p2align 4,,15
 4736              		.globl	png_read_update_info
 4738              	png_read_update_info:
 4739              	.LFB59:
 260:fltk-1.3.4-1/png/pngread.c ****    png_debug(1, "in png_read_update_info");
 4740              		.loc 1 260 0
 4741              		.cfi_startproc
 4742              	.LVL604:
 263:fltk-1.3.4-1/png/pngread.c ****    {
 4743              		.loc 1 263 0
 4744 0000 4885FF   		testq	%rdi, %rdi
 4745 0003 7443     		je	.L491
 265:fltk-1.3.4-1/png/pngread.c ****       {
 4746              		.loc 1 265 0
 4747 0005 F6873001 		testb	$64, 304(%rdi)
 4747      000040
 4748 000c 7412     		je	.L492
 278:fltk-1.3.4-1/png/pngread.c ****             "png_read_update_info/png_start_read_image: duplicate call");
 4749              		.loc 1 278 0
 4750 000e BE000000 		movl	$.LC39, %esi
 4750      00
 4751              	.LVL605:
 4752 0013 E9000000 		jmp	png_app_error
 4752      00
 4753              	.LVL606:
 4754 0018 0F1F8400 		.p2align 4,,10
 4754      00000000 
 4755              		.p2align 3
 4756              	.L492:
 260:fltk-1.3.4-1/png/pngread.c ****    png_debug(1, "in png_read_update_info");
 4757              		.loc 1 260 0
 4758 0020 55       		pushq	%rbp
 4759              		.cfi_def_cfa_offset 16
 4760              		.cfi_offset 6, -16
 4761 0021 53       		pushq	%rbx
 4762              		.cfi_def_cfa_offset 24
 4763              		.cfi_offset 3, -24
 4764 0022 4889F5   		movq	%rsi, %rbp
 4765 0025 4889FB   		movq	%rdi, %rbx
 4766              	.LVL607:
 4767 0028 4883EC08 		subq	$8, %rsp
 4768              		.cfi_def_cfa_offset 32
 4769              	.LBB229:
 4770              	.LBB230:
 267:fltk-1.3.4-1/png/pngread.c **** 
 4771              		.loc 1 267 0
 4772 002c E8000000 		call	png_read_start_row
 4772      00
 4773              	.LVL608:
 4774              	.LBE230:
 4775              	.LBE229:
 281:fltk-1.3.4-1/png/pngread.c **** 
 4776              		.loc 1 281 0
 4777 0031 4883C408 		addq	$8, %rsp
 4778              		.cfi_def_cfa_offset 24
 4779              	.LBB233:
 4780              	.LBB231:
 270:fltk-1.3.4-1/png/pngread.c **** #        else
 4781              		.loc 1 270 0
 4782 0035 4889EE   		movq	%rbp, %rsi
 4783 0038 4889DF   		movq	%rbx, %rdi
 4784              	.LBE231:
 4785              	.LBE233:
 281:fltk-1.3.4-1/png/pngread.c **** 
 4786              		.loc 1 281 0
 4787 003b 5B       		popq	%rbx
 4788              		.cfi_restore 3
 4789              		.cfi_def_cfa_offset 16
 4790              	.LVL609:
 4791 003c 5D       		popq	%rbp
 4792              		.cfi_restore 6
 4793              		.cfi_def_cfa_offset 8
 4794              	.LVL610:
 4795              	.LBB234:
 4796              	.LBB232:
 270:fltk-1.3.4-1/png/pngread.c **** #        else
 4797              		.loc 1 270 0
 4798 003d E9000000 		jmp	png_read_transform_info
 4798      00
 4799              	.LVL611:
 4800              		.p2align 4,,10
 4801 0042 660F1F44 		.p2align 3
 4801      0000
 4802              	.L491:
 4803 0048 F3C3     		rep ret
 4804              	.LBE232:
 4805              	.LBE234:
 4806              		.cfi_endproc
 4807              	.LFE59:
 4809              		.section	.text.unlikely.png_read_update_info
 4810              	.LCOLDE40:
 4811              		.section	.text.png_read_update_info
 4812              	.LHOTE40:
 4813              		.section	.rodata.str1.8
 4814 02d2 00000000 		.align 8
 4814      0000
 4815              	.LC41:
 4816 02d8 706E675F 		.string	"png_start_read_image/png_read_update_info: duplicate call"
 4816      73746172 
 4816      745F7265 
 4816      61645F69 
 4816      6D616765 
 4817              		.section	.text.unlikely.png_start_read_image,"ax",@progbits
 4818              	.LCOLDB42:
 4819              		.section	.text.png_start_read_image,"ax",@progbits
 4820              	.LHOTB42:
 4821              		.p2align 4,,15
 4822              		.globl	png_start_read_image
 4824              	png_start_read_image:
 4825              	.LFB60:
 291:fltk-1.3.4-1/png/pngread.c ****    png_debug(1, "in png_start_read_image");
 4826              		.loc 1 291 0
 4827              		.cfi_startproc
 4828              	.LVL612:
 294:fltk-1.3.4-1/png/pngread.c ****    {
 4829              		.loc 1 294 0
 4830 0000 4885FF   		testq	%rdi, %rdi
 4831 0003 7423     		je	.L493
 296:fltk-1.3.4-1/png/pngread.c ****          png_read_start_row(png_ptr);
 4832              		.loc 1 296 0
 4833 0005 F6873001 		testb	$64, 304(%rdi)
 4833      000040
 4834 000c 7412     		je	.L496
 301:fltk-1.3.4-1/png/pngread.c ****             "png_start_read_image/png_read_update_info: duplicate call");
 4835              		.loc 1 301 0
 4836 000e BE000000 		movl	$.LC41, %esi
 4836      00
 4837 0013 E9000000 		jmp	png_app_error
 4837      00
 4838              	.LVL613:
 4839 0018 0F1F8400 		.p2align 4,,10
 4839      00000000 
 4840              		.p2align 3
 4841              	.L496:
 297:fltk-1.3.4-1/png/pngread.c **** 
 4842              		.loc 1 297 0
 4843 0020 E9000000 		jmp	png_read_start_row
 4843      00
 4844              	.LVL614:
 4845              		.p2align 4,,10
 4846 0025 0F1F00   		.p2align 3
 4847              	.L493:
 4848 0028 F3C3     		rep ret
 4849              		.cfi_endproc
 4850              	.LFE60:
 4852              		.section	.text.unlikely.png_start_read_image
 4853              	.LCOLDE42:
 4854              		.section	.text.png_start_read_image
 4855              	.LHOTE42:
 4856              		.section	.rodata.str1.8
 4857 0312 00000000 		.align 8
 4857      0000
 4858              	.LC43:
 4859 0318 496E7661 		.string	"Invalid attempt to read row data"
 4859      6C696420 
 4859      61747465 
 4859      6D707420 
 4859      746F2072 
 4860              		.section	.rodata.str1.1
 4861              	.LC44:
 4862 00c5 62616420 		.string	"bad adaptive filter value"
 4862      61646170 
 4862      74697665 
 4862      2066696C 
 4862      74657220 
 4863              	.LC45:
 4864 00df 73657175 		.string	"sequential row overflow"
 4864      656E7469 
 4864      616C2072 
 4864      6F77206F 
 4864      76657266 
 4865              		.section	.rodata.str1.8
 4866 0339 00000000 		.align 8
 4866      000000
 4867              	.LC46:
 4868 0340 696E7465 		.string	"internal sequential row size calculation error"
 4868      726E616C 
 4868      20736571 
 4868      75656E74 
 4868      69616C20 
 4869              		.section	.text.unlikely.png_read_row,"ax",@progbits
 4870              	.LCOLDB47:
 4871              		.section	.text.png_read_row,"ax",@progbits
 4872              	.LHOTB47:
 4873              		.p2align 4,,15
 4874              		.globl	png_read_row
 4876              	png_read_row:
 4877              	.LFB62:
 376:fltk-1.3.4-1/png/pngread.c ****    png_row_info row_info;
 4878              		.loc 1 376 0
 4879              		.cfi_startproc
 4880              	.LVL615:
 4881 0000 4154     		pushq	%r12
 4882              		.cfi_def_cfa_offset 16
 4883              		.cfi_offset 12, -16
 4884 0002 55       		pushq	%rbp
 4885              		.cfi_def_cfa_offset 24
 4886              		.cfi_offset 6, -24
 4887 0003 53       		pushq	%rbx
 4888              		.cfi_def_cfa_offset 32
 4889              		.cfi_offset 3, -32
 4890 0004 4883EC20 		subq	$32, %rsp
 4891              		.cfi_def_cfa_offset 64
 376:fltk-1.3.4-1/png/pngread.c ****    png_row_info row_info;
 4892              		.loc 1 376 0
 4893 0008 64488B04 		movq	%fs:40, %rax
 4893      25280000 
 4893      00
 4894 0011 48894424 		movq	%rax, 24(%rsp)
 4894      18
 4895 0016 31C0     		xorl	%eax, %eax
 379:fltk-1.3.4-1/png/pngread.c ****       return;
 4896              		.loc 1 379 0
 4897 0018 4885FF   		testq	%rdi, %rdi
 4898 001b 0F84E701 		je	.L497
 4898      0000
 388:fltk-1.3.4-1/png/pngread.c ****       png_read_start_row(png_ptr);
 4899              		.loc 1 388 0
 4900 0021 F6873001 		testb	$64, 304(%rdi)
 4900      000040
 4901 0028 4889FB   		movq	%rdi, %rbx
 4902 002b 4989F4   		movq	%rsi, %r12
 4903 002e 4889D5   		movq	%rdx, %rbp
 4904 0031 0F842902 		je	.L601
 4904      0000
 4905              	.LVL616:
 4906              	.L499:
 393:fltk-1.3.4-1/png/pngread.c ****    row_info.bit_depth = png_ptr->bit_depth;
 4907              		.loc 1 393 0
 4908 0037 0FB68377 		movzbl	631(%rbx), %eax
 4908      020000
 392:fltk-1.3.4-1/png/pngread.c ****    row_info.color_type = png_ptr->color_type;
 4909              		.loc 1 392 0
 4910 003e 8B8B1002 		movl	528(%rbx), %ecx
 4910      0000
 4911 0044 890C24   		movl	%ecx, (%rsp)
 393:fltk-1.3.4-1/png/pngread.c ****    row_info.bit_depth = png_ptr->bit_depth;
 4912              		.loc 1 393 0
 4913 0047 88442410 		movb	%al, 16(%rsp)
 394:fltk-1.3.4-1/png/pngread.c ****    row_info.channels = png_ptr->channels;
 4914              		.loc 1 394 0
 4915 004b 0FB68378 		movzbl	632(%rbx), %eax
 4915      020000
 4916 0052 88442411 		movb	%al, 17(%rsp)
 395:fltk-1.3.4-1/png/pngread.c ****    row_info.pixel_depth = png_ptr->pixel_depth;
 4917              		.loc 1 395 0
 4918 0056 0FB6837B 		movzbl	635(%rbx), %eax
 4918      020000
 4919 005d 88442412 		movb	%al, 18(%rsp)
 396:fltk-1.3.4-1/png/pngread.c ****    row_info.rowbytes = PNG_ROWBYTES(row_info.pixel_depth, row_info.width);
 4920              		.loc 1 396 0
 4921 0061 0FB6837A 		movzbl	634(%rbx), %eax
 4921      020000
 397:fltk-1.3.4-1/png/pngread.c **** 
 4922              		.loc 1 397 0
 4923 0068 3C07     		cmpb	$7, %al
 396:fltk-1.3.4-1/png/pngread.c ****    row_info.rowbytes = PNG_ROWBYTES(row_info.pixel_depth, row_info.width);
 4924              		.loc 1 396 0
 4925 006a 88442413 		movb	%al, 19(%rsp)
 397:fltk-1.3.4-1/png/pngread.c **** 
 4926              		.loc 1 397 0
 4927 006e 0F87B401 		ja	.L602
 4927      0000
 397:fltk-1.3.4-1/png/pngread.c **** 
 4928              		.loc 1 397 0 is_stmt 0 discriminator 2
 4929 0074 89CA     		movl	%ecx, %edx
 4930 0076 480FAFD0 		imulq	%rax, %rdx
 4931 007a 4883C207 		addq	$7, %rdx
 4932 007e 48C1EA03 		shrq	$3, %rdx
 4933              	.L501:
 448:fltk-1.3.4-1/png/pngread.c ****        (png_ptr->transformations & PNG_INTERLACE) != 0)
 4934              		.loc 1 448 0 is_stmt 1 discriminator 4
 4935 0082 80BB7402 		cmpb	$0, 628(%rbx)
 4935      000000
 397:fltk-1.3.4-1/png/pngread.c **** 
 4936              		.loc 1 397 0 discriminator 4
 4937 0089 48895424 		movq	%rdx, 8(%rsp)
 4937      08
 448:fltk-1.3.4-1/png/pngread.c ****        (png_ptr->transformations & PNG_INTERLACE) != 0)
 4938              		.loc 1 448 0 discriminator 4
 4939 008e 7448     		je	.L502
 448:fltk-1.3.4-1/png/pngread.c ****        (png_ptr->transformations & PNG_INTERLACE) != 0)
 4940              		.loc 1 448 0 is_stmt 0 discriminator 1
 4941 0090 F6833401 		testb	$2, 308(%rbx)
 4941      000002
 4942 0097 743F     		je	.L502
 451:fltk-1.3.4-1/png/pngread.c ****       {
 4943              		.loc 1 451 0 is_stmt 1
 4944 0099 80BB7502 		cmpb	$5, 629(%rbx)
 4944      000005
 400:fltk-1.3.4-1/png/pngread.c ****    {
 4945              		.loc 1 400 0
 4946 00a0 8B831402 		movl	532(%rbx), %eax
 4946      0000
 451:fltk-1.3.4-1/png/pngread.c ****       {
 4947              		.loc 1 451 0
 4948 00a6 0F87E402 		ja	.L503
 4948      0000
 4949 00ac 0FB68B75 		movzbl	629(%rbx), %ecx
 4949      020000
 4950 00b3 FF24CD00 		jmp	*.L505(,%rcx,8)
 4950      000000
 4951              		.section	.rodata.png_read_row,"a",@progbits
 4952              		.align 8
 4953              		.align 4
 4954              	.L505:
 4955 0000 00000000 		.quad	.L504
 4955      00000000 
 4956 0008 00000000 		.quad	.L506
 4956      00000000 
 4957 0010 00000000 		.quad	.L507
 4957      00000000 
 4958 0018 00000000 		.quad	.L508
 4958      00000000 
 4959 0020 00000000 		.quad	.L509
 4959      00000000 
 4960 0028 00000000 		.quad	.L510
 4960      00000000 
 4961              		.section	.text.png_read_row
 4962 00ba 660F1F44 		.p2align 4,,10
 4962      0000
 4963              		.p2align 3
 4964              	.L510:
 508:fltk-1.3.4-1/png/pngread.c ****             {
 4965              		.loc 1 508 0
 4966 00c0 A801     		testb	$1, %al
 4967 00c2 0F853803 		jne	.L599
 4967      0000
 508:fltk-1.3.4-1/png/pngread.c ****             {
 4968              		.loc 1 508 0 is_stmt 0 discriminator 1
 4969 00c8 83BBF801 		cmpl	$1, 504(%rbx)
 4969      000001
 4970 00cf 0F862B03 		jbe	.L599
 4970      0000
 4971              		.p2align 4,,10
 4972 00d5 0F1F00   		.p2align 3
 4973              	.L502:
 530:fltk-1.3.4-1/png/pngread.c ****       png_error(png_ptr, "Invalid attempt to read row data");
 4974              		.loc 1 530 0 is_stmt 1
 4975 00d8 F6832C01 		testb	$4, 300(%rbx)
 4975      000004
 4976 00df 0F84CB03 		je	.L603
 4976      0000
 534:fltk-1.3.4-1/png/pngread.c **** 
 4977              		.loc 1 534 0
 4978 00e5 488BB328 		movq	552(%rbx), %rsi
 4978      020000
 4979 00ec 4883C201 		addq	$1, %rdx
 4980 00f0 4889DF   		movq	%rbx, %rdi
 4981 00f3 E8000000 		call	png_read_IDAT_data
 4981      00
 4982              	.LVL617:
 536:fltk-1.3.4-1/png/pngread.c ****    {
 4983              		.loc 1 536 0
 4984 00f8 488BB328 		movq	552(%rbx), %rsi
 4984      020000
 4985 00ff 440FB606 		movzbl	(%rsi), %r8d
 4986 0103 4584C0   		testb	%r8b, %r8b
 4987 0106 742B     		je	.L517
 538:fltk-1.3.4-1/png/pngread.c ****          png_read_filter_row(png_ptr, &row_info, png_ptr->row_buf + 1,
 4988              		.loc 1 538 0
 4989 0108 4180F804 		cmpb	$4, %r8b
 4990 010c 0F87AB03 		ja	.L518
 4990      0000
 539:fltk-1.3.4-1/png/pngread.c ****             png_ptr->prev_row + 1, png_ptr->row_buf[0]);
 4991              		.loc 1 539 0
 4992 0112 488B8320 		movq	544(%rbx), %rax
 4992      020000
 4993 0119 488D5601 		leaq	1(%rsi), %rdx
 4994 011d 4889DF   		movq	%rbx, %rdi
 4995 0120 4889E6   		movq	%rsp, %rsi
 4996 0123 488D4801 		leaq	1(%rax), %rcx
 4997 0127 E8000000 		call	png_read_filter_row
 4997      00
 4998              	.LVL618:
 4999 012c 488BB328 		movq	552(%rbx), %rsi
 4999      020000
 5000              	.L517:
 5001              	.LVL619:
 5002              	.LBB243:
 5003              	.LBB244:
 5004              		.loc 2 53 0
 5005 0133 488B4424 		movq	8(%rsp), %rax
 5005      08
 5006 0138 488BBB20 		movq	544(%rbx), %rdi
 5006      020000
 5007 013f 488D5001 		leaq	1(%rax), %rdx
 5008              	.LVL620:
 5009 0143 E8000000 		call	memcpy
 5009      00
 5010              	.LVL621:
 5011              	.LBE244:
 5012              	.LBE243:
 553:fltk-1.3.4-1/png/pngread.c ****        (png_ptr->filter_type == PNG_INTRAPIXEL_DIFFERENCING))
 5013              		.loc 1 553 0
 5014 0148 48B80400 		movabsq	$1095216660484, %rax
 5014      0000FF00 
 5014      0000
 5015 0152 48238318 		andq	1048(%rbx), %rax
 5015      040000
 5016 0159 48BA0400 		movabsq	$274877906948, %rdx
 5016      00004000 
 5016      0000
 5017 0163 4839D0   		cmpq	%rdx, %rax
 5018 0166 0F845401 		je	.L519
 5018      0000
 5019              	.L522:
 562:fltk-1.3.4-1/png/pngread.c ****       png_do_read_transformations(png_ptr, &row_info);
 5020              		.loc 1 562 0
 5021 016c 8B833401 		movl	308(%rbx), %eax
 5021      0000
 5022 0172 85C0     		testl	%eax, %eax
 5023 0174 0F85F600 		jne	.L604
 5023      0000
 5024              	.L521:
 567:fltk-1.3.4-1/png/pngread.c ****    {
 5025              		.loc 1 567 0
 5026 017a 0FB6837F 		movzbl	639(%rbx), %eax
 5026      020000
 5027 0181 84C0     		testb	%al, %al
 5028 0183 0F85B700 		jne	.L528
 5028      0000
 569:fltk-1.3.4-1/png/pngread.c ****       if (row_info.pixel_depth > png_ptr->maximum_pixel_depth)
 5029              		.loc 1 569 0
 5030 0189 0FB64424 		movzbl	19(%rsp), %eax
 5030      13
 570:fltk-1.3.4-1/png/pngread.c ****          png_error(png_ptr, "sequential row overflow");
 5031              		.loc 1 570 0
 5032 018e 3A837E02 		cmpb	638(%rbx), %al
 5032      0000
 569:fltk-1.3.4-1/png/pngread.c ****       if (row_info.pixel_depth > png_ptr->maximum_pixel_depth)
 5033              		.loc 1 569 0
 5034 0194 88837F02 		movb	%al, 639(%rbx)
 5034      0000
 570:fltk-1.3.4-1/png/pngread.c ****          png_error(png_ptr, "sequential row overflow");
 5035              		.loc 1 570 0
 5036 019a 0F872A03 		ja	.L605
 5036      0000
 5037              	.L529:
 579:fltk-1.3.4-1/png/pngread.c ****       (png_ptr->transformations & PNG_INTERLACE) != 0)
 5038              		.loc 1 579 0
 5039 01a0 80BB7402 		cmpb	$0, 628(%rbx)
 5039      000000
 5040 01a7 740F     		je	.L530
 580:fltk-1.3.4-1/png/pngread.c ****    {
 5041              		.loc 1 580 0 discriminator 1
 5042 01a9 8B8B3401 		movl	308(%rbx), %ecx
 5042      0000
 579:fltk-1.3.4-1/png/pngread.c ****       (png_ptr->transformations & PNG_INTERLACE) != 0)
 5043              		.loc 1 579 0 discriminator 1
 5044 01af F6C102   		testb	$2, %cl
 5045 01b2 0F85C800 		jne	.L606
 5045      0000
 5046              	.L530:
 596:fltk-1.3.4-1/png/pngread.c ****          png_combine_row(png_ptr, row, -1/*ignored*/);
 5047              		.loc 1 596 0
 5048 01b8 4D85E4   		testq	%r12, %r12
 5049 01bb 7410     		je	.L535
 597:fltk-1.3.4-1/png/pngread.c **** 
 5050              		.loc 1 597 0
 5051 01bd BAFFFFFF 		movl	$-1, %edx
 5051      FF
 5052 01c2 4C89E6   		movq	%r12, %rsi
 5053 01c5 4889DF   		movq	%rbx, %rdi
 5054 01c8 E8000000 		call	png_combine_row
 5054      00
 5055              	.LVL622:
 5056              	.L535:
 599:fltk-1.3.4-1/png/pngread.c ****          png_combine_row(png_ptr, dsp_row, -1/*ignored*/);
 5057              		.loc 1 599 0
 5058 01cd 4885ED   		testq	%rbp, %rbp
 5059 01d0 7410     		je	.L534
 600:fltk-1.3.4-1/png/pngread.c ****    }
 5060              		.loc 1 600 0
 5061 01d2 BAFFFFFF 		movl	$-1, %edx
 5061      FF
 5062 01d7 4889EE   		movq	%rbp, %rsi
 5063 01da 4889DF   		movq	%rbx, %rdi
 5064 01dd E8000000 		call	png_combine_row
 5064      00
 5065              	.LVL623:
 5066              	.L534:
 602:fltk-1.3.4-1/png/pngread.c **** 
 5067              		.loc 1 602 0
 5068 01e2 4889DF   		movq	%rbx, %rdi
 5069 01e5 E8000000 		call	png_read_finish_row
 5069      00
 5070              	.LVL624:
 604:fltk-1.3.4-1/png/pngread.c ****       (*(png_ptr->read_row_fn))(png_ptr, png_ptr->row_number, png_ptr->pass);
 5071              		.loc 1 604 0
 5072 01ea 488B8310 		movq	784(%rbx), %rax
 5072      030000
 5073 01f1 4885C0   		testq	%rax, %rax
 5074 01f4 7412     		je	.L497
 605:fltk-1.3.4-1/png/pngread.c **** 
 5075              		.loc 1 605 0
 5076 01f6 0FB69375 		movzbl	629(%rbx), %edx
 5076      020000
 5077 01fd 8BB31402 		movl	532(%rbx), %esi
 5077      0000
 5078 0203 4889DF   		movq	%rbx, %rdi
 5079 0206 FFD0     		call	*%rax
 5080              	.LVL625:
 5081              	.L497:
 607:fltk-1.3.4-1/png/pngread.c **** #endif /* SEQUENTIAL_READ */
 5082              		.loc 1 607 0
 5083 0208 488B4424 		movq	24(%rsp), %rax
 5083      18
 5084 020d 64483304 		xorq	%fs:40, %rax
 5084      25280000 
 5084      00
 5085 0216 0F858F02 		jne	.L607
 5085      0000
 5086 021c 4883C420 		addq	$32, %rsp
 5087              		.cfi_remember_state
 5088              		.cfi_def_cfa_offset 32
 5089 0220 5B       		popq	%rbx
 5090              		.cfi_def_cfa_offset 24
 5091 0221 5D       		popq	%rbp
 5092              		.cfi_def_cfa_offset 16
 5093 0222 415C     		popq	%r12
 5094              		.cfi_def_cfa_offset 8
 5095 0224 C3       		ret
 5096              	.LVL626:
 5097              		.p2align 4,,10
 5098 0225 0F1F00   		.p2align 3
 5099              	.L602:
 5100              		.cfi_restore_state
 397:fltk-1.3.4-1/png/pngread.c **** 
 5101              		.loc 1 397 0 discriminator 1
 5102 0228 C0E803   		shrb	$3, %al
 5103 022b 89CA     		movl	%ecx, %edx
 5104 022d 0FB6C0   		movzbl	%al, %eax
 5105 0230 480FAFD0 		imulq	%rax, %rdx
 5106 0234 E949FEFF 		jmp	.L501
 5106      FF
 5107 0239 0F1F8000 		.p2align 4,,10
 5107      000000
 5108              		.p2align 3
 5109              	.L528:
 574:fltk-1.3.4-1/png/pngread.c ****       png_error(png_ptr, "internal sequential row size calculation error");
 5110              		.loc 1 574 0
 5111 0240 3A442413 		cmpb	19(%rsp), %al
 5112 0244 0F8456FF 		je	.L529
 5112      FFFF
 575:fltk-1.3.4-1/png/pngread.c **** 
 5113              		.loc 1 575 0
 5114 024a BE000000 		movl	$.LC46, %esi
 5114      00
 5115 024f 4889DF   		movq	%rbx, %rdi
 5116 0252 E8000000 		call	png_error
 5116      00
 5117              	.LVL627:
 5118 0257 660F1F84 		.p2align 4,,10
 5118      00000000 
 5118      00
 5119              		.p2align 3
 5120              	.L601:
 389:fltk-1.3.4-1/png/pngread.c **** 
 5121              		.loc 1 389 0
 5122 0260 E8000000 		call	png_read_start_row
 5122      00
 5123              	.LVL628:
 5124 0265 E9CDFDFF 		jmp	.L499
 5124      FF
 5125 026a 660F1F44 		.p2align 4,,10
 5125      0000
 5126              		.p2align 3
 5127              	.L604:
 563:fltk-1.3.4-1/png/pngread.c **** #endif
 5128              		.loc 1 563 0
 5129 0270 4889E6   		movq	%rsp, %rsi
 5130 0273 4889DF   		movq	%rbx, %rdi
 5131 0276 E8000000 		call	png_do_read_transformations
 5131      00
 5132              	.LVL629:
 5133 027b E9FAFEFF 		jmp	.L521
 5133      FF
 5134              		.p2align 4,,10
 5135              		.p2align 3
 5136              	.L606:
 582:fltk-1.3.4-1/png/pngread.c ****          png_do_read_interlace(&row_info, png_ptr->row_buf + 1, png_ptr->pass,
 5137              		.loc 1 582 0
 5138 0280 0FB69375 		movzbl	629(%rbx), %edx
 5138      020000
 5139 0287 80FA05   		cmpb	$5, %dl
 5140 028a 0F86E000 		jbe	.L608
 5140      0000
 5141              	.L531:
 586:fltk-1.3.4-1/png/pngread.c ****          png_combine_row(png_ptr, dsp_row, 1/*display*/);
 5142              		.loc 1 586 0
 5143 0290 4885ED   		testq	%rbp, %rbp
 5144 0293 7410     		je	.L532
 587:fltk-1.3.4-1/png/pngread.c **** 
 5145              		.loc 1 587 0
 5146 0295 BA010000 		movl	$1, %edx
 5146      00
 5147 029a 4889EE   		movq	%rbp, %rsi
 5148 029d 4889DF   		movq	%rbx, %rdi
 5149 02a0 E8000000 		call	png_combine_row
 5149      00
 5150              	.LVL630:
 5151              	.L532:
 589:fltk-1.3.4-1/png/pngread.c ****          png_combine_row(png_ptr, row, 0/*row*/);
 5152              		.loc 1 589 0
 5153 02a5 4D85E4   		testq	%r12, %r12
 5154 02a8 0F8434FF 		je	.L534
 5154      FFFF
 590:fltk-1.3.4-1/png/pngread.c ****    }
 5155              		.loc 1 590 0
 5156 02ae 31D2     		xorl	%edx, %edx
 5157 02b0 4C89E6   		movq	%r12, %rsi
 5158 02b3 4889DF   		movq	%rbx, %rdi
 5159 02b6 E8000000 		call	png_combine_row
 5159      00
 5160              	.LVL631:
 5161 02bb E922FFFF 		jmp	.L534
 5161      FF
 5162              		.p2align 4,,10
 5163              		.p2align 3
 5164              	.L519:
 5165 02c0 0FB65424 		movzbl	16(%rsp), %edx
 5165      10
 5166              	.LVL632:
 5167              	.LBB245:
 5168              	.LBB246:
 317:fltk-1.3.4-1/png/pngread.c ****        (row_info->color_type & PNG_COLOR_MASK_COLOR) != 0)
 5169              		.loc 1 317 0
 5170 02c5 F6C202   		testb	$2, %dl
 5171 02c8 0F849EFE 		je	.L522
 5171      FFFF
 5172              	.LBB247:
 323:fltk-1.3.4-1/png/pngread.c ****       {
 5173              		.loc 1 323 0
 5174 02ce 0FB64C24 		movzbl	17(%rsp), %ecx
 5174      11
 5175              	.LBE247:
 5176              	.LBE246:
 5177              	.LBE245:
 557:fltk-1.3.4-1/png/pngread.c ****    }
 5178              		.loc 1 557 0
 5179 02d3 488B8328 		movq	552(%rbx), %rax
 5179      020000
 5180 02da 448B0424 		movl	(%rsp), %r8d
 5181              	.LVL633:
 5182 02de 4883C001 		addq	$1, %rax
 5183              	.LBB257:
 5184              	.LBB255:
 5185              	.LBB253:
 323:fltk-1.3.4-1/png/pngread.c ****       {
 5186              		.loc 1 323 0
 5187 02e2 80F908   		cmpb	$8, %cl
 5188 02e5 0F847501 		je	.L609
 5188      0000
 343:fltk-1.3.4-1/png/pngread.c ****       {
 5189              		.loc 1 343 0
 5190 02eb 80F910   		cmpb	$16, %cl
 5191 02ee 0F8578FE 		jne	.L522
 5191      FFFF
 5192              	.LBB248:
 348:fltk-1.3.4-1/png/pngread.c ****             bytes_per_pixel = 6;
 5193              		.loc 1 348 0
 5194 02f4 80FA02   		cmpb	$2, %dl
 5195 02f7 0F84A301 		je	.L541
 5195      0000
 351:fltk-1.3.4-1/png/pngread.c ****             bytes_per_pixel = 8;
 5196              		.loc 1 351 0
 5197 02fd 80FA06   		cmpb	$6, %dl
 352:fltk-1.3.4-1/png/pngread.c **** 
 5198              		.loc 1 352 0
 5199 0300 41B90800 		movl	$8, %r9d
 5199      0000
 351:fltk-1.3.4-1/png/pngread.c ****             bytes_per_pixel = 8;
 5200              		.loc 1 351 0
 5201 0306 0F8560FE 		jne	.L522
 5201      FFFF
 5202              	.L526:
 5203              	.LVL634:
 357:fltk-1.3.4-1/png/pngread.c ****          {
 5204              		.loc 1 357 0
 5205 030c 4585C0   		testl	%r8d, %r8d
 5206 030f 0F8457FE 		je	.L522
 5206      FFFF
 5207 0315 31FF     		xorl	%edi, %edi
 5208              	.LVL635:
 5209 0317 660F1F84 		.p2align 4,,10
 5209      00000000 
 5209      00
 5210              		.p2align 3
 5211              	.L527:
 5212              	.LBB249:
 360:fltk-1.3.4-1/png/pngread.c ****             png_uint_32 s2   = (*(rp + 4) << 8) | *(rp + 5);
 5213              		.loc 1 360 0
 5214 0320 0FB75002 		movzwl	2(%rax), %edx
 362:fltk-1.3.4-1/png/pngread.c ****             png_uint_32 blue = (s2 + s1 + 65536) & 0xffff;
 5215              		.loc 1 362 0
 5216 0324 0FB708   		movzwl	(%rax), %ecx
 5217              	.LBE249:
 357:fltk-1.3.4-1/png/pngread.c ****          {
 5218              		.loc 1 357 0
 5219 0327 83C701   		addl	$1, %edi
 5220              	.LVL636:
 5221              	.LBB250:
 363:fltk-1.3.4-1/png/pngread.c ****             *(rp    ) = (png_byte)((red >> 8) & 0xff);
 5222              		.loc 1 363 0
 5223 032a 0FB77004 		movzwl	4(%rax), %esi
 360:fltk-1.3.4-1/png/pngread.c ****             png_uint_32 s2   = (*(rp + 4) << 8) | *(rp + 5);
 5224              		.loc 1 360 0
 5225 032e 66C1C208 		rolw	$8, %dx
 362:fltk-1.3.4-1/png/pngread.c ****             png_uint_32 blue = (s2 + s1 + 65536) & 0xffff;
 5226              		.loc 1 362 0
 5227 0332 66C1C108 		rolw	$8, %cx
 363:fltk-1.3.4-1/png/pngread.c ****             *(rp    ) = (png_byte)((red >> 8) & 0xff);
 5228              		.loc 1 363 0
 5229 0336 66C1C608 		rolw	$8, %si
 360:fltk-1.3.4-1/png/pngread.c ****             png_uint_32 s2   = (*(rp + 4) << 8) | *(rp + 5);
 5230              		.loc 1 360 0
 5231 033a 0FB7D2   		movzwl	%dx, %edx
 5232              	.LVL637:
 362:fltk-1.3.4-1/png/pngread.c ****             png_uint_32 blue = (s2 + s1 + 65536) & 0xffff;
 5233              		.loc 1 362 0
 5234 033d 01D1     		addl	%edx, %ecx
 363:fltk-1.3.4-1/png/pngread.c ****             *(rp    ) = (png_byte)((red >> 8) & 0xff);
 5235              		.loc 1 363 0
 5236 033f 01F2     		addl	%esi, %edx
 5237              	.LVL638:
 362:fltk-1.3.4-1/png/pngread.c ****             png_uint_32 blue = (s2 + s1 + 65536) & 0xffff;
 5238              		.loc 1 362 0
 5239 0341 0FB7C9   		movzwl	%cx, %ecx
 5240              	.LVL639:
 363:fltk-1.3.4-1/png/pngread.c ****             *(rp    ) = (png_byte)((red >> 8) & 0xff);
 5241              		.loc 1 363 0
 5242 0344 0FB7D2   		movzwl	%dx, %edx
 5243              	.LVL640:
 364:fltk-1.3.4-1/png/pngread.c ****             *(rp + 1) = (png_byte)(red & 0xff);
 5244              		.loc 1 364 0
 5245 0347 89CE     		movl	%ecx, %esi
 365:fltk-1.3.4-1/png/pngread.c ****             *(rp + 4) = (png_byte)((blue >> 8) & 0xff);
 5246              		.loc 1 365 0
 5247 0349 884801   		movb	%cl, 1(%rax)
 5248              	.LVL641:
 366:fltk-1.3.4-1/png/pngread.c ****             *(rp + 5) = (png_byte)(blue & 0xff);
 5249              		.loc 1 366 0
 5250 034c 89D1     		movl	%edx, %ecx
 5251              	.LVL642:
 364:fltk-1.3.4-1/png/pngread.c ****             *(rp + 1) = (png_byte)(red & 0xff);
 5252              		.loc 1 364 0
 5253 034e C1EE08   		shrl	$8, %esi
 5254              	.LVL643:
 366:fltk-1.3.4-1/png/pngread.c ****             *(rp + 5) = (png_byte)(blue & 0xff);
 5255              		.loc 1 366 0
 5256 0351 C1E908   		shrl	$8, %ecx
 367:fltk-1.3.4-1/png/pngread.c ****          }
 5257              		.loc 1 367 0
 5258 0354 885005   		movb	%dl, 5(%rax)
 5259              	.LVL644:
 364:fltk-1.3.4-1/png/pngread.c ****             *(rp + 1) = (png_byte)(red & 0xff);
 5260              		.loc 1 364 0
 5261 0357 408830   		movb	%sil, (%rax)
 366:fltk-1.3.4-1/png/pngread.c ****             *(rp + 5) = (png_byte)(blue & 0xff);
 5262              		.loc 1 366 0
 5263 035a 884804   		movb	%cl, 4(%rax)
 5264              	.LBE250:
 357:fltk-1.3.4-1/png/pngread.c ****          {
 5265              		.loc 1 357 0
 5266 035d 4C01C8   		addq	%r9, %rax
 5267              	.LVL645:
 5268 0360 4139F8   		cmpl	%edi, %r8d
 5269 0363 75BB     		jne	.L527
 5270 0365 E902FEFF 		jmp	.L522
 5270      FF
 5271              	.LVL646:
 5272 036a 660F1F44 		.p2align 4,,10
 5272      0000
 5273              		.p2align 3
 5274              	.L608:
 5275              	.LBE248:
 5276              	.LBE253:
 5277              	.LBE255:
 5278              	.LBE257:
 583:fltk-1.3.4-1/png/pngread.c ****             png_ptr->transformations);
 5279              		.loc 1 583 0
 5280 0370 488B8328 		movq	552(%rbx), %rax
 5280      020000
 5281 0377 4889E7   		movq	%rsp, %rdi
 5282 037a 488D7001 		leaq	1(%rax), %rsi
 5283 037e E8000000 		call	png_do_read_interlace
 5283      00
 5284              	.LVL647:
 5285 0383 E908FFFF 		jmp	.L531
 5285      FF
 5286 0388 0F1F8400 		.p2align 4,,10
 5286      00000000 
 5287              		.p2align 3
 5288              	.L503:
 520:fltk-1.3.4-1/png/pngread.c ****             {
 5289              		.loc 1 520 0
 5290 0390 A801     		testb	$1, %al
 5291 0392 0F8540FD 		jne	.L502
 5291      FFFF
 5292 0398 0F1F8400 		.p2align 4,,10
 5292      00000000 
 5293              		.p2align 3
 5294              	.L511:
 458:fltk-1.3.4-1/png/pngread.c ****                return;
 5295              		.loc 1 458 0
 5296 03a0 4889DF   		movq	%rbx, %rdi
 5297 03a3 E8000000 		call	png_read_finish_row
 5297      00
 5298              	.LVL648:
 459:fltk-1.3.4-1/png/pngread.c ****             }
 5299              		.loc 1 459 0
 5300 03a8 E95BFEFF 		jmp	.L497
 5300      FF
 5301 03ad 0F1F00   		.p2align 4,,10
 5302              		.p2align 3
 5303              	.L509:
 497:fltk-1.3.4-1/png/pngread.c ****             {
 5304              		.loc 1 497 0
 5305 03b0 89C1     		movl	%eax, %ecx
 5306 03b2 83E103   		andl	$3, %ecx
 5307 03b5 83F902   		cmpl	$2, %ecx
 5308 03b8 0F841AFD 		je	.L502
 5308      FFFF
 499:fltk-1.3.4-1/png/pngread.c ****                   png_combine_row(png_ptr, dsp_row, 1/*display*/);
 5309              		.loc 1 499 0
 5310 03be 4885ED   		testq	%rbp, %rbp
 5311 03c1 74DD     		je	.L511
 499:fltk-1.3.4-1/png/pngread.c ****                   png_combine_row(png_ptr, dsp_row, 1/*display*/);
 5312              		.loc 1 499 0 is_stmt 0 discriminator 1
 5313 03c3 A802     		testb	$2, %al
 5314 03c5 74D9     		je	.L511
 5315 03c7 660F1F84 		.p2align 4,,10
 5315      00000000 
 5315      00
 5316              		.p2align 3
 5317              	.L513:
 457:fltk-1.3.4-1/png/pngread.c ****                png_read_finish_row(png_ptr);
 5318              		.loc 1 457 0 is_stmt 1
 5319 03d0 BA010000 		movl	$1, %edx
 5319      00
 5320 03d5 4889EE   		movq	%rbp, %rsi
 5321 03d8 4889DF   		movq	%rbx, %rdi
 5322 03db E8000000 		call	png_combine_row
 5322      00
 5323              	.LVL649:
 5324 03e0 EBBE     		jmp	.L511
 5325              		.p2align 4,,10
 5326 03e2 660F1F44 		.p2align 3
 5326      0000
 5327              	.L508:
 486:fltk-1.3.4-1/png/pngread.c ****             {
 5328              		.loc 1 486 0
 5329 03e8 A803     		testb	$3, %al
 5330 03ea 7514     		jne	.L599
 486:fltk-1.3.4-1/png/pngread.c ****             {
 5331              		.loc 1 486 0 is_stmt 0 discriminator 1
 5332 03ec 83BBF801 		cmpl	$2, 504(%rbx)
 5332      000002
 5333 03f3 0F87DFFC 		ja	.L502
 5333      FFFF
 5334 03f9 0F1F8000 		.p2align 4,,10
 5334      000000
 5335              		.p2align 3
 5336              	.L599:
 456:fltk-1.3.4-1/png/pngread.c ****                   png_combine_row(png_ptr, dsp_row, 1/*display*/);
 5337              		.loc 1 456 0 is_stmt 1
 5338 0400 4885ED   		testq	%rbp, %rbp
 5339 0403 75CB     		jne	.L513
 5340 0405 EB99     		jmp	.L511
 5341 0407 660F1F84 		.p2align 4,,10
 5341      00000000 
 5341      00
 5342              		.p2align 3
 5343              	.L507:
 475:fltk-1.3.4-1/png/pngread.c ****             {
 5344              		.loc 1 475 0
 5345 0410 89C1     		movl	%eax, %ecx
 5346 0412 83E107   		andl	$7, %ecx
 5347 0415 83F904   		cmpl	$4, %ecx
 5348 0418 0F84BAFC 		je	.L502
 5348      FFFF
 477:fltk-1.3.4-1/png/pngread.c ****                   png_combine_row(png_ptr, dsp_row, 1/*display*/);
 5349              		.loc 1 477 0
 5350 041e 4885ED   		testq	%rbp, %rbp
 5351 0421 0F8479FF 		je	.L511
 5351      FFFF
 477:fltk-1.3.4-1/png/pngread.c ****                   png_combine_row(png_ptr, dsp_row, 1/*display*/);
 5352              		.loc 1 477 0 is_stmt 0 discriminator 1
 5353 0427 A804     		testb	$4, %al
 5354 0429 0F8471FF 		je	.L511
 5354      FFFF
 5355 042f EB9F     		jmp	.L513
 5356              		.p2align 4,,10
 5357 0431 0F1F8000 		.p2align 3
 5357      000000
 5358              	.L506:
 464:fltk-1.3.4-1/png/pngread.c ****             {
 5359              		.loc 1 464 0 is_stmt 1
 5360 0438 A807     		testb	$7, %al
 5361 043a 75C4     		jne	.L599
 464:fltk-1.3.4-1/png/pngread.c ****             {
 5362              		.loc 1 464 0 is_stmt 0 discriminator 1
 5363 043c 83BBF801 		cmpl	$4, 504(%rbx)
 5363      000004
 5364 0443 0F878FFC 		ja	.L502
 5364      FFFF
 5365 0449 EBB5     		jmp	.L599
 5366 044b 0F1F4400 		.p2align 4,,10
 5366      00
 5367              		.p2align 3
 5368              	.L504:
 454:fltk-1.3.4-1/png/pngread.c ****             {
 5369              		.loc 1 454 0 is_stmt 1
 5370 0450 A807     		testb	$7, %al
 5371 0452 0F8480FC 		je	.L502
 5371      FFFF
 5372 0458 EBA6     		jmp	.L599
 5373              	.LVL650:
 5374 045a 660F1F44 		.p2align 4,,10
 5374      0000
 5375              		.p2align 3
 5376              	.L609:
 5377              	.LBB258:
 5378              	.LBB256:
 5379              	.LBB254:
 5380              	.LBB251:
 328:fltk-1.3.4-1/png/pngread.c ****             bytes_per_pixel = 3;
 5381              		.loc 1 328 0
 5382 0460 80FA02   		cmpb	$2, %dl
 5383 0463 7434     		je	.L540
 331:fltk-1.3.4-1/png/pngread.c ****             bytes_per_pixel = 4;
 5384              		.loc 1 331 0
 5385 0465 80FA06   		cmpb	$6, %dl
 332:fltk-1.3.4-1/png/pngread.c **** 
 5386              		.loc 1 332 0
 5387 0468 BE040000 		movl	$4, %esi
 5387      00
 331:fltk-1.3.4-1/png/pngread.c ****             bytes_per_pixel = 4;
 5388              		.loc 1 331 0
 5389 046d 0F85F9FC 		jne	.L522
 5389      FFFF
 5390              	.L524:
 5391              	.LVL651:
 337:fltk-1.3.4-1/png/pngread.c ****          {
 5392              		.loc 1 337 0
 5393 0473 4585C0   		testl	%r8d, %r8d
 5394 0476 0F84F0FC 		je	.L522
 5394      FFFF
 5395 047c 31D2     		xorl	%edx, %edx
 5396              	.LVL652:
 5397 047e 6690     		.p2align 4,,10
 5398              		.p2align 3
 5399              	.L525:
 339:fltk-1.3.4-1/png/pngread.c ****             *(rp+2) = (png_byte)((256 + *(rp + 2) + *(rp + 1)) & 0xff);
 5400              		.loc 1 339 0
 5401 0480 0FB64801 		movzbl	1(%rax), %ecx
 337:fltk-1.3.4-1/png/pngread.c ****          {
 5402              		.loc 1 337 0
 5403 0484 83C201   		addl	$1, %edx
 5404              	.LVL653:
 339:fltk-1.3.4-1/png/pngread.c ****             *(rp+2) = (png_byte)((256 + *(rp + 2) + *(rp + 1)) & 0xff);
 5405              		.loc 1 339 0
 5406 0487 0008     		addb	%cl, (%rax)
 340:fltk-1.3.4-1/png/pngread.c ****          }
 5407              		.loc 1 340 0
 5408 0489 004802   		addb	%cl, 2(%rax)
 337:fltk-1.3.4-1/png/pngread.c ****          {
 5409              		.loc 1 337 0
 5410 048c 4801F0   		addq	%rsi, %rax
 5411              	.LVL654:
 5412 048f 4139D0   		cmpl	%edx, %r8d
 5413 0492 75EC     		jne	.L525
 5414 0494 E9D3FCFF 		jmp	.L522
 5414      FF
 5415              	.LVL655:
 5416              	.L540:
 329:fltk-1.3.4-1/png/pngread.c **** 
 5417              		.loc 1 329 0
 5418 0499 BE030000 		movl	$3, %esi
 5418      00
 5419 049e EBD3     		jmp	.L524
 5420              	.L541:
 5421              	.LBE251:
 5422              	.LBB252:
 349:fltk-1.3.4-1/png/pngread.c **** 
 5423              		.loc 1 349 0
 5424 04a0 41B90600 		movl	$6, %r9d
 5424      0000
 5425 04a6 E961FEFF 		jmp	.L526
 5425      FF
 5426              	.LVL656:
 5427              	.L607:
 5428              	.LBE252:
 5429              	.LBE254:
 5430              	.LBE256:
 5431              	.LBE258:
 607:fltk-1.3.4-1/png/pngread.c **** #endif /* SEQUENTIAL_READ */
 5432              		.loc 1 607 0
 5433 04ab E8000000 		call	__stack_chk_fail
 5433      00
 5434              	.LVL657:
 5435              	.L603:
 531:fltk-1.3.4-1/png/pngread.c **** 
 5436              		.loc 1 531 0
 5437 04b0 BE000000 		movl	$.LC43, %esi
 5437      00
 5438 04b5 4889DF   		movq	%rbx, %rdi
 5439 04b8 E8000000 		call	png_error
 5439      00
 5440              	.LVL658:
 5441              	.L518:
 542:fltk-1.3.4-1/png/pngread.c ****    }
 5442              		.loc 1 542 0
 5443 04bd BE000000 		movl	$.LC44, %esi
 5443      00
 5444 04c2 4889DF   		movq	%rbx, %rdi
 5445 04c5 E8000000 		call	png_error
 5445      00
 5446              	.LVL659:
 5447              	.L605:
 571:fltk-1.3.4-1/png/pngread.c ****    }
 5448              		.loc 1 571 0
 5449 04ca BE000000 		movl	$.LC45, %esi
 5449      00
 5450 04cf 4889DF   		movq	%rbx, %rdi
 5451 04d2 E8000000 		call	png_error
 5451      00
 5452              	.LVL660:
 5453              		.cfi_endproc
 5454              	.LFE62:
 5456              		.section	.text.unlikely.png_read_row
 5457              	.LCOLDE47:
 5458              		.section	.text.png_read_row
 5459              	.LHOTE47:
 5460              		.section	.rodata.str1.8
 5461 036f 00       		.align 8
 5462              	.LC48:
 5463 0370 706E675F 		.string	"png_read_image: unsupported transformation"
 5463      72656164 
 5463      5F696D61 
 5463      67653A20 
 5463      756E7375 
 5464 039b 00000000 		.align 8
 5464      00
 5465              	.LC49:
 5466 03a0 706E675F 		.string	"png_image_read: alpha channel lost"
 5466      696D6167 
 5466      655F7265 
 5466      61643A20 
 5466      616C7068 
 5467 03c3 00000000 		.align 8
 5467      00
 5468              	.LC50:
 5469 03c8 756E6578 		.string	"unexpected alpha swap transformation"
 5469      70656374 
 5469      65642061 
 5469      6C706861 
 5469      20737761 
 5470 03ed 000000   		.align 8
 5471              	.LC51:
 5472 03f0 706E675F 		.string	"png_read_image: invalid transformations"
 5472      72656164 
 5472      5F696D61 
 5472      67653A20 
 5472      696E7661 
 5473              		.section	.text.unlikely.png_image_read_direct,"ax",@progbits
 5474              	.LCOLDB52:
 5475              		.section	.text.png_image_read_direct,"ax",@progbits
 5476              	.LHOTB52:
 5477              		.p2align 4,,15
 5479              	png_image_read_direct:
 5480              	.LFB92:
2897:fltk-1.3.4-1/png/pngread.c **** 
2898:fltk-1.3.4-1/png/pngread.c **** /* The final part of the color-map read called from png_image_finish_read. */
2899:fltk-1.3.4-1/png/pngread.c **** static int
2900:fltk-1.3.4-1/png/pngread.c **** png_image_read_and_map(png_voidp argument)
2901:fltk-1.3.4-1/png/pngread.c **** {
2902:fltk-1.3.4-1/png/pngread.c ****    png_image_read_control *display = png_voidcast(png_image_read_control*,
2903:fltk-1.3.4-1/png/pngread.c ****       argument);
2904:fltk-1.3.4-1/png/pngread.c ****    png_imagep image = display->image;
2905:fltk-1.3.4-1/png/pngread.c ****    png_structrp png_ptr = image->opaque->png_ptr;
2906:fltk-1.3.4-1/png/pngread.c ****    int passes;
2907:fltk-1.3.4-1/png/pngread.c **** 
2908:fltk-1.3.4-1/png/pngread.c ****    /* Called when the libpng data must be transformed into the color-mapped
2909:fltk-1.3.4-1/png/pngread.c ****     * form.  There is a local row buffer in display->local and this routine must
2910:fltk-1.3.4-1/png/pngread.c ****     * do the interlace handling.
2911:fltk-1.3.4-1/png/pngread.c ****     */
2912:fltk-1.3.4-1/png/pngread.c ****    switch (png_ptr->interlaced)
2913:fltk-1.3.4-1/png/pngread.c ****    {
2914:fltk-1.3.4-1/png/pngread.c ****       case PNG_INTERLACE_NONE:
2915:fltk-1.3.4-1/png/pngread.c ****          passes = 1;
2916:fltk-1.3.4-1/png/pngread.c ****          break;
2917:fltk-1.3.4-1/png/pngread.c **** 
2918:fltk-1.3.4-1/png/pngread.c ****       case PNG_INTERLACE_ADAM7:
2919:fltk-1.3.4-1/png/pngread.c ****          passes = PNG_INTERLACE_ADAM7_PASSES;
2920:fltk-1.3.4-1/png/pngread.c ****          break;
2921:fltk-1.3.4-1/png/pngread.c **** 
2922:fltk-1.3.4-1/png/pngread.c ****       default:
2923:fltk-1.3.4-1/png/pngread.c ****          png_error(png_ptr, "unknown interlace type");
2924:fltk-1.3.4-1/png/pngread.c ****    }
2925:fltk-1.3.4-1/png/pngread.c **** 
2926:fltk-1.3.4-1/png/pngread.c ****    {
2927:fltk-1.3.4-1/png/pngread.c ****       png_uint_32  height = image->height;
2928:fltk-1.3.4-1/png/pngread.c ****       png_uint_32  width = image->width;
2929:fltk-1.3.4-1/png/pngread.c ****       int          proc = display->colormap_processing;
2930:fltk-1.3.4-1/png/pngread.c ****       png_bytep    first_row = png_voidcast(png_bytep, display->first_row);
2931:fltk-1.3.4-1/png/pngread.c ****       ptrdiff_t    step_row = display->row_bytes;
2932:fltk-1.3.4-1/png/pngread.c ****       int pass;
2933:fltk-1.3.4-1/png/pngread.c **** 
2934:fltk-1.3.4-1/png/pngread.c ****       for (pass = 0; pass < passes; ++pass)
2935:fltk-1.3.4-1/png/pngread.c ****       {
2936:fltk-1.3.4-1/png/pngread.c ****          unsigned int     startx, stepx, stepy;
2937:fltk-1.3.4-1/png/pngread.c ****          png_uint_32      y;
2938:fltk-1.3.4-1/png/pngread.c **** 
2939:fltk-1.3.4-1/png/pngread.c ****          if (png_ptr->interlaced == PNG_INTERLACE_ADAM7)
2940:fltk-1.3.4-1/png/pngread.c ****          {
2941:fltk-1.3.4-1/png/pngread.c ****             /* The row may be empty for a short image: */
2942:fltk-1.3.4-1/png/pngread.c ****             if (PNG_PASS_COLS(width, pass) == 0)
2943:fltk-1.3.4-1/png/pngread.c ****                continue;
2944:fltk-1.3.4-1/png/pngread.c **** 
2945:fltk-1.3.4-1/png/pngread.c ****             startx = PNG_PASS_START_COL(pass);
2946:fltk-1.3.4-1/png/pngread.c ****             stepx = PNG_PASS_COL_OFFSET(pass);
2947:fltk-1.3.4-1/png/pngread.c ****             y = PNG_PASS_START_ROW(pass);
2948:fltk-1.3.4-1/png/pngread.c ****             stepy = PNG_PASS_ROW_OFFSET(pass);
2949:fltk-1.3.4-1/png/pngread.c ****          }
2950:fltk-1.3.4-1/png/pngread.c **** 
2951:fltk-1.3.4-1/png/pngread.c ****          else
2952:fltk-1.3.4-1/png/pngread.c ****          {
2953:fltk-1.3.4-1/png/pngread.c ****             y = 0;
2954:fltk-1.3.4-1/png/pngread.c ****             startx = 0;
2955:fltk-1.3.4-1/png/pngread.c ****             stepx = stepy = 1;
2956:fltk-1.3.4-1/png/pngread.c ****          }
2957:fltk-1.3.4-1/png/pngread.c **** 
2958:fltk-1.3.4-1/png/pngread.c ****          for (; y<height; y += stepy)
2959:fltk-1.3.4-1/png/pngread.c ****          {
2960:fltk-1.3.4-1/png/pngread.c ****             png_bytep inrow = png_voidcast(png_bytep, display->local_row);
2961:fltk-1.3.4-1/png/pngread.c ****             png_bytep outrow = first_row + y * step_row;
2962:fltk-1.3.4-1/png/pngread.c ****             png_const_bytep end_row = outrow + width;
2963:fltk-1.3.4-1/png/pngread.c **** 
2964:fltk-1.3.4-1/png/pngread.c ****             /* Read read the libpng data into the temporary buffer. */
2965:fltk-1.3.4-1/png/pngread.c ****             png_read_row(png_ptr, inrow, NULL);
2966:fltk-1.3.4-1/png/pngread.c **** 
2967:fltk-1.3.4-1/png/pngread.c ****             /* Now process the row according to the processing option, note
2968:fltk-1.3.4-1/png/pngread.c ****              * that the caller verifies that the format of the libpng output
2969:fltk-1.3.4-1/png/pngread.c ****              * data is as required.
2970:fltk-1.3.4-1/png/pngread.c ****              */
2971:fltk-1.3.4-1/png/pngread.c ****             outrow += startx;
2972:fltk-1.3.4-1/png/pngread.c ****             switch (proc)
2973:fltk-1.3.4-1/png/pngread.c ****             {
2974:fltk-1.3.4-1/png/pngread.c ****                case PNG_CMAP_GA:
2975:fltk-1.3.4-1/png/pngread.c ****                   for (; outrow < end_row; outrow += stepx)
2976:fltk-1.3.4-1/png/pngread.c ****                   {
2977:fltk-1.3.4-1/png/pngread.c ****                      /* The data is always in the PNG order */
2978:fltk-1.3.4-1/png/pngread.c ****                      unsigned int gray = *inrow++;
2979:fltk-1.3.4-1/png/pngread.c ****                      unsigned int alpha = *inrow++;
2980:fltk-1.3.4-1/png/pngread.c ****                      unsigned int entry;
2981:fltk-1.3.4-1/png/pngread.c **** 
2982:fltk-1.3.4-1/png/pngread.c ****                      /* NOTE: this code is copied as a comment in
2983:fltk-1.3.4-1/png/pngread.c ****                       * make_ga_colormap above.  Please update the
2984:fltk-1.3.4-1/png/pngread.c ****                       * comment if you change this code!
2985:fltk-1.3.4-1/png/pngread.c ****                       */
2986:fltk-1.3.4-1/png/pngread.c ****                      if (alpha > 229) /* opaque */
2987:fltk-1.3.4-1/png/pngread.c ****                      {
2988:fltk-1.3.4-1/png/pngread.c ****                         entry = (231 * gray + 128) >> 8;
2989:fltk-1.3.4-1/png/pngread.c ****                      }
2990:fltk-1.3.4-1/png/pngread.c ****                      else if (alpha < 26) /* transparent */
2991:fltk-1.3.4-1/png/pngread.c ****                      {
2992:fltk-1.3.4-1/png/pngread.c ****                         entry = 231;
2993:fltk-1.3.4-1/png/pngread.c ****                      }
2994:fltk-1.3.4-1/png/pngread.c ****                      else /* partially opaque */
2995:fltk-1.3.4-1/png/pngread.c ****                      {
2996:fltk-1.3.4-1/png/pngread.c ****                         entry = 226 + 6 * PNG_DIV51(alpha) + PNG_DIV51(gray);
2997:fltk-1.3.4-1/png/pngread.c ****                      }
2998:fltk-1.3.4-1/png/pngread.c **** 
2999:fltk-1.3.4-1/png/pngread.c ****                      *outrow = (png_byte)entry;
3000:fltk-1.3.4-1/png/pngread.c ****                   }
3001:fltk-1.3.4-1/png/pngread.c ****                   break;
3002:fltk-1.3.4-1/png/pngread.c **** 
3003:fltk-1.3.4-1/png/pngread.c ****                case PNG_CMAP_TRANS:
3004:fltk-1.3.4-1/png/pngread.c ****                   for (; outrow < end_row; outrow += stepx)
3005:fltk-1.3.4-1/png/pngread.c ****                   {
3006:fltk-1.3.4-1/png/pngread.c ****                      png_byte gray = *inrow++;
3007:fltk-1.3.4-1/png/pngread.c ****                      png_byte alpha = *inrow++;
3008:fltk-1.3.4-1/png/pngread.c **** 
3009:fltk-1.3.4-1/png/pngread.c ****                      if (alpha == 0)
3010:fltk-1.3.4-1/png/pngread.c ****                         *outrow = PNG_CMAP_TRANS_BACKGROUND;
3011:fltk-1.3.4-1/png/pngread.c **** 
3012:fltk-1.3.4-1/png/pngread.c ****                      else if (gray != PNG_CMAP_TRANS_BACKGROUND)
3013:fltk-1.3.4-1/png/pngread.c ****                         *outrow = gray;
3014:fltk-1.3.4-1/png/pngread.c **** 
3015:fltk-1.3.4-1/png/pngread.c ****                      else
3016:fltk-1.3.4-1/png/pngread.c ****                         *outrow = (png_byte)(PNG_CMAP_TRANS_BACKGROUND+1);
3017:fltk-1.3.4-1/png/pngread.c ****                   }
3018:fltk-1.3.4-1/png/pngread.c ****                   break;
3019:fltk-1.3.4-1/png/pngread.c **** 
3020:fltk-1.3.4-1/png/pngread.c ****                case PNG_CMAP_RGB:
3021:fltk-1.3.4-1/png/pngread.c ****                   for (; outrow < end_row; outrow += stepx)
3022:fltk-1.3.4-1/png/pngread.c ****                   {
3023:fltk-1.3.4-1/png/pngread.c ****                      *outrow = PNG_RGB_INDEX(inrow[0], inrow[1], inrow[2]);
3024:fltk-1.3.4-1/png/pngread.c ****                      inrow += 3;
3025:fltk-1.3.4-1/png/pngread.c ****                   }
3026:fltk-1.3.4-1/png/pngread.c ****                   break;
3027:fltk-1.3.4-1/png/pngread.c **** 
3028:fltk-1.3.4-1/png/pngread.c ****                case PNG_CMAP_RGB_ALPHA:
3029:fltk-1.3.4-1/png/pngread.c ****                   for (; outrow < end_row; outrow += stepx)
3030:fltk-1.3.4-1/png/pngread.c ****                   {
3031:fltk-1.3.4-1/png/pngread.c ****                      unsigned int alpha = inrow[3];
3032:fltk-1.3.4-1/png/pngread.c **** 
3033:fltk-1.3.4-1/png/pngread.c ****                      /* Because the alpha entries only hold alpha==0.5 values
3034:fltk-1.3.4-1/png/pngread.c ****                       * split the processing at alpha==0.25 (64) and 0.75
3035:fltk-1.3.4-1/png/pngread.c ****                       * (196).
3036:fltk-1.3.4-1/png/pngread.c ****                       */
3037:fltk-1.3.4-1/png/pngread.c **** 
3038:fltk-1.3.4-1/png/pngread.c ****                      if (alpha >= 196)
3039:fltk-1.3.4-1/png/pngread.c ****                         *outrow = PNG_RGB_INDEX(inrow[0], inrow[1],
3040:fltk-1.3.4-1/png/pngread.c ****                            inrow[2]);
3041:fltk-1.3.4-1/png/pngread.c **** 
3042:fltk-1.3.4-1/png/pngread.c ****                      else if (alpha < 64)
3043:fltk-1.3.4-1/png/pngread.c ****                         *outrow = PNG_CMAP_RGB_ALPHA_BACKGROUND;
3044:fltk-1.3.4-1/png/pngread.c **** 
3045:fltk-1.3.4-1/png/pngread.c ****                      else
3046:fltk-1.3.4-1/png/pngread.c ****                      {
3047:fltk-1.3.4-1/png/pngread.c ****                         /* Likewise there are three entries for each of r, g
3048:fltk-1.3.4-1/png/pngread.c ****                          * and b.  We could select the entry by popcount on
3049:fltk-1.3.4-1/png/pngread.c ****                          * the top two bits on those architectures that
3050:fltk-1.3.4-1/png/pngread.c ****                          * support it, this is what the code below does,
3051:fltk-1.3.4-1/png/pngread.c ****                          * crudely.
3052:fltk-1.3.4-1/png/pngread.c ****                          */
3053:fltk-1.3.4-1/png/pngread.c ****                         unsigned int back_i = PNG_CMAP_RGB_ALPHA_BACKGROUND+1;
3054:fltk-1.3.4-1/png/pngread.c **** 
3055:fltk-1.3.4-1/png/pngread.c ****                         /* Here are how the values map:
3056:fltk-1.3.4-1/png/pngread.c ****                          *
3057:fltk-1.3.4-1/png/pngread.c ****                          * 0x00 .. 0x3f -> 0
3058:fltk-1.3.4-1/png/pngread.c ****                          * 0x40 .. 0xbf -> 1
3059:fltk-1.3.4-1/png/pngread.c ****                          * 0xc0 .. 0xff -> 2
3060:fltk-1.3.4-1/png/pngread.c ****                          *
3061:fltk-1.3.4-1/png/pngread.c ****                          * So, as above with the explicit alpha checks, the
3062:fltk-1.3.4-1/png/pngread.c ****                          * breakpoints are at 64 and 196.
3063:fltk-1.3.4-1/png/pngread.c ****                          */
3064:fltk-1.3.4-1/png/pngread.c ****                         if (inrow[0] & 0x80) back_i += 9; /* red */
3065:fltk-1.3.4-1/png/pngread.c ****                         if (inrow[0] & 0x40) back_i += 9;
3066:fltk-1.3.4-1/png/pngread.c ****                         if (inrow[0] & 0x80) back_i += 3; /* green */
3067:fltk-1.3.4-1/png/pngread.c ****                         if (inrow[0] & 0x40) back_i += 3;
3068:fltk-1.3.4-1/png/pngread.c ****                         if (inrow[0] & 0x80) back_i += 1; /* blue */
3069:fltk-1.3.4-1/png/pngread.c ****                         if (inrow[0] & 0x40) back_i += 1;
3070:fltk-1.3.4-1/png/pngread.c **** 
3071:fltk-1.3.4-1/png/pngread.c ****                         *outrow = (png_byte)back_i;
3072:fltk-1.3.4-1/png/pngread.c ****                      }
3073:fltk-1.3.4-1/png/pngread.c **** 
3074:fltk-1.3.4-1/png/pngread.c ****                      inrow += 4;
3075:fltk-1.3.4-1/png/pngread.c ****                   }
3076:fltk-1.3.4-1/png/pngread.c ****                   break;
3077:fltk-1.3.4-1/png/pngread.c **** 
3078:fltk-1.3.4-1/png/pngread.c ****                default:
3079:fltk-1.3.4-1/png/pngread.c ****                   break;
3080:fltk-1.3.4-1/png/pngread.c ****             }
3081:fltk-1.3.4-1/png/pngread.c ****          }
3082:fltk-1.3.4-1/png/pngread.c ****       }
3083:fltk-1.3.4-1/png/pngread.c ****    }
3084:fltk-1.3.4-1/png/pngread.c **** 
3085:fltk-1.3.4-1/png/pngread.c ****    return 1;
3086:fltk-1.3.4-1/png/pngread.c **** }
3087:fltk-1.3.4-1/png/pngread.c **** 
3088:fltk-1.3.4-1/png/pngread.c **** static int
3089:fltk-1.3.4-1/png/pngread.c **** png_image_read_colormapped(png_voidp argument)
3090:fltk-1.3.4-1/png/pngread.c **** {
3091:fltk-1.3.4-1/png/pngread.c ****    png_image_read_control *display = png_voidcast(png_image_read_control*,
3092:fltk-1.3.4-1/png/pngread.c ****       argument);
3093:fltk-1.3.4-1/png/pngread.c ****    png_imagep image = display->image;
3094:fltk-1.3.4-1/png/pngread.c ****    png_controlp control = image->opaque;
3095:fltk-1.3.4-1/png/pngread.c ****    png_structrp png_ptr = control->png_ptr;
3096:fltk-1.3.4-1/png/pngread.c ****    png_inforp info_ptr = control->info_ptr;
3097:fltk-1.3.4-1/png/pngread.c **** 
3098:fltk-1.3.4-1/png/pngread.c ****    int passes = 0; /* As a flag */
3099:fltk-1.3.4-1/png/pngread.c **** 
3100:fltk-1.3.4-1/png/pngread.c ****    PNG_SKIP_CHUNKS(png_ptr);
3101:fltk-1.3.4-1/png/pngread.c **** 
3102:fltk-1.3.4-1/png/pngread.c ****    /* Update the 'info' structure and make sure the result is as required; first
3103:fltk-1.3.4-1/png/pngread.c ****     * make sure to turn on the interlace handling if it will be required
3104:fltk-1.3.4-1/png/pngread.c ****     * (because it can't be turned on *after* the call to png_read_update_info!)
3105:fltk-1.3.4-1/png/pngread.c ****     */
3106:fltk-1.3.4-1/png/pngread.c ****    if (display->colormap_processing == PNG_CMAP_NONE)
3107:fltk-1.3.4-1/png/pngread.c ****       passes = png_set_interlace_handling(png_ptr);
3108:fltk-1.3.4-1/png/pngread.c **** 
3109:fltk-1.3.4-1/png/pngread.c ****    png_read_update_info(png_ptr, info_ptr);
3110:fltk-1.3.4-1/png/pngread.c **** 
3111:fltk-1.3.4-1/png/pngread.c ****    /* The expected output can be deduced from the colormap_processing option. */
3112:fltk-1.3.4-1/png/pngread.c ****    switch (display->colormap_processing)
3113:fltk-1.3.4-1/png/pngread.c ****    {
3114:fltk-1.3.4-1/png/pngread.c ****       case PNG_CMAP_NONE:
3115:fltk-1.3.4-1/png/pngread.c ****          /* Output must be one channel and one byte per pixel, the output
3116:fltk-1.3.4-1/png/pngread.c ****           * encoding can be anything.
3117:fltk-1.3.4-1/png/pngread.c ****           */
3118:fltk-1.3.4-1/png/pngread.c ****          if ((info_ptr->color_type == PNG_COLOR_TYPE_PALETTE ||
3119:fltk-1.3.4-1/png/pngread.c ****             info_ptr->color_type == PNG_COLOR_TYPE_GRAY) &&
3120:fltk-1.3.4-1/png/pngread.c ****             info_ptr->bit_depth == 8)
3121:fltk-1.3.4-1/png/pngread.c ****             break;
3122:fltk-1.3.4-1/png/pngread.c **** 
3123:fltk-1.3.4-1/png/pngread.c ****          goto bad_output;
3124:fltk-1.3.4-1/png/pngread.c **** 
3125:fltk-1.3.4-1/png/pngread.c ****       case PNG_CMAP_TRANS:
3126:fltk-1.3.4-1/png/pngread.c ****       case PNG_CMAP_GA:
3127:fltk-1.3.4-1/png/pngread.c ****          /* Output must be two channels and the 'G' one must be sRGB, the latter
3128:fltk-1.3.4-1/png/pngread.c ****           * can be checked with an exact number because it should have been set
3129:fltk-1.3.4-1/png/pngread.c ****           * to this number above!
3130:fltk-1.3.4-1/png/pngread.c ****           */
3131:fltk-1.3.4-1/png/pngread.c ****          if (info_ptr->color_type == PNG_COLOR_TYPE_GRAY_ALPHA &&
3132:fltk-1.3.4-1/png/pngread.c ****             info_ptr->bit_depth == 8 &&
3133:fltk-1.3.4-1/png/pngread.c ****             png_ptr->screen_gamma == PNG_GAMMA_sRGB &&
3134:fltk-1.3.4-1/png/pngread.c ****             image->colormap_entries == 256)
3135:fltk-1.3.4-1/png/pngread.c ****             break;
3136:fltk-1.3.4-1/png/pngread.c **** 
3137:fltk-1.3.4-1/png/pngread.c ****          goto bad_output;
3138:fltk-1.3.4-1/png/pngread.c **** 
3139:fltk-1.3.4-1/png/pngread.c ****       case PNG_CMAP_RGB:
3140:fltk-1.3.4-1/png/pngread.c ****          /* Output must be 8-bit sRGB encoded RGB */
3141:fltk-1.3.4-1/png/pngread.c ****          if (info_ptr->color_type == PNG_COLOR_TYPE_RGB &&
3142:fltk-1.3.4-1/png/pngread.c ****             info_ptr->bit_depth == 8 &&
3143:fltk-1.3.4-1/png/pngread.c ****             png_ptr->screen_gamma == PNG_GAMMA_sRGB &&
3144:fltk-1.3.4-1/png/pngread.c ****             image->colormap_entries == 216)
3145:fltk-1.3.4-1/png/pngread.c ****             break;
3146:fltk-1.3.4-1/png/pngread.c **** 
3147:fltk-1.3.4-1/png/pngread.c ****          goto bad_output;
3148:fltk-1.3.4-1/png/pngread.c **** 
3149:fltk-1.3.4-1/png/pngread.c ****       case PNG_CMAP_RGB_ALPHA:
3150:fltk-1.3.4-1/png/pngread.c ****          /* Output must be 8-bit sRGB encoded RGBA */
3151:fltk-1.3.4-1/png/pngread.c ****          if (info_ptr->color_type == PNG_COLOR_TYPE_RGB_ALPHA &&
3152:fltk-1.3.4-1/png/pngread.c ****             info_ptr->bit_depth == 8 &&
3153:fltk-1.3.4-1/png/pngread.c ****             png_ptr->screen_gamma == PNG_GAMMA_sRGB &&
3154:fltk-1.3.4-1/png/pngread.c ****             image->colormap_entries == 244 /* 216 + 1 + 27 */)
3155:fltk-1.3.4-1/png/pngread.c ****             break;
3156:fltk-1.3.4-1/png/pngread.c **** 
3157:fltk-1.3.4-1/png/pngread.c ****          /* goto bad_output; */
3158:fltk-1.3.4-1/png/pngread.c ****          /* FALL THROUGH */
3159:fltk-1.3.4-1/png/pngread.c **** 
3160:fltk-1.3.4-1/png/pngread.c ****       default:
3161:fltk-1.3.4-1/png/pngread.c ****       bad_output:
3162:fltk-1.3.4-1/png/pngread.c ****          png_error(png_ptr, "bad color-map processing (internal error)");
3163:fltk-1.3.4-1/png/pngread.c ****    }
3164:fltk-1.3.4-1/png/pngread.c **** 
3165:fltk-1.3.4-1/png/pngread.c ****    /* Now read the rows.  Do this here if it is possible to read directly into
3166:fltk-1.3.4-1/png/pngread.c ****     * the output buffer, otherwise allocate a local row buffer of the maximum
3167:fltk-1.3.4-1/png/pngread.c ****     * size libpng requires and call the relevant processing routine safely.
3168:fltk-1.3.4-1/png/pngread.c ****     */
3169:fltk-1.3.4-1/png/pngread.c ****    {
3170:fltk-1.3.4-1/png/pngread.c ****       png_voidp first_row = display->buffer;
3171:fltk-1.3.4-1/png/pngread.c ****       ptrdiff_t row_bytes = display->row_stride;
3172:fltk-1.3.4-1/png/pngread.c **** 
3173:fltk-1.3.4-1/png/pngread.c ****       /* The following expression is designed to work correctly whether it gives
3174:fltk-1.3.4-1/png/pngread.c ****        * a signed or an unsigned result.
3175:fltk-1.3.4-1/png/pngread.c ****        */
3176:fltk-1.3.4-1/png/pngread.c ****       if (row_bytes < 0)
3177:fltk-1.3.4-1/png/pngread.c ****       {
3178:fltk-1.3.4-1/png/pngread.c ****          char *ptr = png_voidcast(char*, first_row);
3179:fltk-1.3.4-1/png/pngread.c ****          ptr += (image->height-1) * (-row_bytes);
3180:fltk-1.3.4-1/png/pngread.c ****          first_row = png_voidcast(png_voidp, ptr);
3181:fltk-1.3.4-1/png/pngread.c ****       }
3182:fltk-1.3.4-1/png/pngread.c **** 
3183:fltk-1.3.4-1/png/pngread.c ****       display->first_row = first_row;
3184:fltk-1.3.4-1/png/pngread.c ****       display->row_bytes = row_bytes;
3185:fltk-1.3.4-1/png/pngread.c ****    }
3186:fltk-1.3.4-1/png/pngread.c **** 
3187:fltk-1.3.4-1/png/pngread.c ****    if (passes == 0)
3188:fltk-1.3.4-1/png/pngread.c ****    {
3189:fltk-1.3.4-1/png/pngread.c ****       int result;
3190:fltk-1.3.4-1/png/pngread.c ****       png_voidp row = png_malloc(png_ptr, png_get_rowbytes(png_ptr, info_ptr));
3191:fltk-1.3.4-1/png/pngread.c **** 
3192:fltk-1.3.4-1/png/pngread.c ****       display->local_row = row;
3193:fltk-1.3.4-1/png/pngread.c ****       result = png_safe_execute(image, png_image_read_and_map, display);
3194:fltk-1.3.4-1/png/pngread.c ****       display->local_row = NULL;
3195:fltk-1.3.4-1/png/pngread.c ****       png_free(png_ptr, row);
3196:fltk-1.3.4-1/png/pngread.c **** 
3197:fltk-1.3.4-1/png/pngread.c ****       return result;
3198:fltk-1.3.4-1/png/pngread.c ****    }
3199:fltk-1.3.4-1/png/pngread.c **** 
3200:fltk-1.3.4-1/png/pngread.c ****    else
3201:fltk-1.3.4-1/png/pngread.c ****    {
3202:fltk-1.3.4-1/png/pngread.c ****       png_alloc_size_t row_bytes = display->row_bytes;
3203:fltk-1.3.4-1/png/pngread.c **** 
3204:fltk-1.3.4-1/png/pngread.c ****       while (--passes >= 0)
3205:fltk-1.3.4-1/png/pngread.c ****       {
3206:fltk-1.3.4-1/png/pngread.c ****          png_uint_32      y = image->height;
3207:fltk-1.3.4-1/png/pngread.c ****          png_bytep        row = png_voidcast(png_bytep, display->first_row);
3208:fltk-1.3.4-1/png/pngread.c **** 
3209:fltk-1.3.4-1/png/pngread.c ****          while (y-- > 0)
3210:fltk-1.3.4-1/png/pngread.c ****          {
3211:fltk-1.3.4-1/png/pngread.c ****             png_read_row(png_ptr, row, NULL);
3212:fltk-1.3.4-1/png/pngread.c ****             row += row_bytes;
3213:fltk-1.3.4-1/png/pngread.c ****          }
3214:fltk-1.3.4-1/png/pngread.c ****       }
3215:fltk-1.3.4-1/png/pngread.c **** 
3216:fltk-1.3.4-1/png/pngread.c ****       return 1;
3217:fltk-1.3.4-1/png/pngread.c ****    }
3218:fltk-1.3.4-1/png/pngread.c **** }
3219:fltk-1.3.4-1/png/pngread.c **** 
3220:fltk-1.3.4-1/png/pngread.c **** /* Just the row reading part of png_image_read. */
3221:fltk-1.3.4-1/png/pngread.c **** static int
3222:fltk-1.3.4-1/png/pngread.c **** png_image_read_composite(png_voidp argument)
3223:fltk-1.3.4-1/png/pngread.c **** {
3224:fltk-1.3.4-1/png/pngread.c ****    png_image_read_control *display = png_voidcast(png_image_read_control*,
3225:fltk-1.3.4-1/png/pngread.c ****       argument);
3226:fltk-1.3.4-1/png/pngread.c ****    png_imagep image = display->image;
3227:fltk-1.3.4-1/png/pngread.c ****    png_structrp png_ptr = image->opaque->png_ptr;
3228:fltk-1.3.4-1/png/pngread.c ****    int passes;
3229:fltk-1.3.4-1/png/pngread.c **** 
3230:fltk-1.3.4-1/png/pngread.c ****    switch (png_ptr->interlaced)
3231:fltk-1.3.4-1/png/pngread.c ****    {
3232:fltk-1.3.4-1/png/pngread.c ****       case PNG_INTERLACE_NONE:
3233:fltk-1.3.4-1/png/pngread.c ****          passes = 1;
3234:fltk-1.3.4-1/png/pngread.c ****          break;
3235:fltk-1.3.4-1/png/pngread.c **** 
3236:fltk-1.3.4-1/png/pngread.c ****       case PNG_INTERLACE_ADAM7:
3237:fltk-1.3.4-1/png/pngread.c ****          passes = PNG_INTERLACE_ADAM7_PASSES;
3238:fltk-1.3.4-1/png/pngread.c ****          break;
3239:fltk-1.3.4-1/png/pngread.c **** 
3240:fltk-1.3.4-1/png/pngread.c ****       default:
3241:fltk-1.3.4-1/png/pngread.c ****          png_error(png_ptr, "unknown interlace type");
3242:fltk-1.3.4-1/png/pngread.c ****    }
3243:fltk-1.3.4-1/png/pngread.c **** 
3244:fltk-1.3.4-1/png/pngread.c ****    {
3245:fltk-1.3.4-1/png/pngread.c ****       png_uint_32  height = image->height;
3246:fltk-1.3.4-1/png/pngread.c ****       png_uint_32  width = image->width;
3247:fltk-1.3.4-1/png/pngread.c ****       ptrdiff_t    step_row = display->row_bytes;
3248:fltk-1.3.4-1/png/pngread.c ****       unsigned int channels =
3249:fltk-1.3.4-1/png/pngread.c ****          (image->format & PNG_FORMAT_FLAG_COLOR) != 0 ? 3 : 1;
3250:fltk-1.3.4-1/png/pngread.c ****       int pass;
3251:fltk-1.3.4-1/png/pngread.c **** 
3252:fltk-1.3.4-1/png/pngread.c ****       for (pass = 0; pass < passes; ++pass)
3253:fltk-1.3.4-1/png/pngread.c ****       {
3254:fltk-1.3.4-1/png/pngread.c ****          unsigned int     startx, stepx, stepy;
3255:fltk-1.3.4-1/png/pngread.c ****          png_uint_32      y;
3256:fltk-1.3.4-1/png/pngread.c **** 
3257:fltk-1.3.4-1/png/pngread.c ****          if (png_ptr->interlaced == PNG_INTERLACE_ADAM7)
3258:fltk-1.3.4-1/png/pngread.c ****          {
3259:fltk-1.3.4-1/png/pngread.c ****             /* The row may be empty for a short image: */
3260:fltk-1.3.4-1/png/pngread.c ****             if (PNG_PASS_COLS(width, pass) == 0)
3261:fltk-1.3.4-1/png/pngread.c ****                continue;
3262:fltk-1.3.4-1/png/pngread.c **** 
3263:fltk-1.3.4-1/png/pngread.c ****             startx = PNG_PASS_START_COL(pass) * channels;
3264:fltk-1.3.4-1/png/pngread.c ****             stepx = PNG_PASS_COL_OFFSET(pass) * channels;
3265:fltk-1.3.4-1/png/pngread.c ****             y = PNG_PASS_START_ROW(pass);
3266:fltk-1.3.4-1/png/pngread.c ****             stepy = PNG_PASS_ROW_OFFSET(pass);
3267:fltk-1.3.4-1/png/pngread.c ****          }
3268:fltk-1.3.4-1/png/pngread.c **** 
3269:fltk-1.3.4-1/png/pngread.c ****          else
3270:fltk-1.3.4-1/png/pngread.c ****          {
3271:fltk-1.3.4-1/png/pngread.c ****             y = 0;
3272:fltk-1.3.4-1/png/pngread.c ****             startx = 0;
3273:fltk-1.3.4-1/png/pngread.c ****             stepx = channels;
3274:fltk-1.3.4-1/png/pngread.c ****             stepy = 1;
3275:fltk-1.3.4-1/png/pngread.c ****          }
3276:fltk-1.3.4-1/png/pngread.c **** 
3277:fltk-1.3.4-1/png/pngread.c ****          for (; y<height; y += stepy)
3278:fltk-1.3.4-1/png/pngread.c ****          {
3279:fltk-1.3.4-1/png/pngread.c ****             png_bytep inrow = png_voidcast(png_bytep, display->local_row);
3280:fltk-1.3.4-1/png/pngread.c ****             png_bytep outrow;
3281:fltk-1.3.4-1/png/pngread.c ****             png_const_bytep end_row;
3282:fltk-1.3.4-1/png/pngread.c **** 
3283:fltk-1.3.4-1/png/pngread.c ****             /* Read the row, which is packed: */
3284:fltk-1.3.4-1/png/pngread.c ****             png_read_row(png_ptr, inrow, NULL);
3285:fltk-1.3.4-1/png/pngread.c **** 
3286:fltk-1.3.4-1/png/pngread.c ****             outrow = png_voidcast(png_bytep, display->first_row);
3287:fltk-1.3.4-1/png/pngread.c ****             outrow += y * step_row;
3288:fltk-1.3.4-1/png/pngread.c ****             end_row = outrow + width * channels;
3289:fltk-1.3.4-1/png/pngread.c **** 
3290:fltk-1.3.4-1/png/pngread.c ****             /* Now do the composition on each pixel in this row. */
3291:fltk-1.3.4-1/png/pngread.c ****             outrow += startx;
3292:fltk-1.3.4-1/png/pngread.c ****             for (; outrow < end_row; outrow += stepx)
3293:fltk-1.3.4-1/png/pngread.c ****             {
3294:fltk-1.3.4-1/png/pngread.c ****                png_byte alpha = inrow[channels];
3295:fltk-1.3.4-1/png/pngread.c **** 
3296:fltk-1.3.4-1/png/pngread.c ****                if (alpha > 0) /* else no change to the output */
3297:fltk-1.3.4-1/png/pngread.c ****                {
3298:fltk-1.3.4-1/png/pngread.c ****                   unsigned int c;
3299:fltk-1.3.4-1/png/pngread.c **** 
3300:fltk-1.3.4-1/png/pngread.c ****                   for (c=0; c<channels; ++c)
3301:fltk-1.3.4-1/png/pngread.c ****                   {
3302:fltk-1.3.4-1/png/pngread.c ****                      png_uint_32 component = inrow[c];
3303:fltk-1.3.4-1/png/pngread.c **** 
3304:fltk-1.3.4-1/png/pngread.c ****                      if (alpha < 255) /* else just use component */
3305:fltk-1.3.4-1/png/pngread.c ****                      {
3306:fltk-1.3.4-1/png/pngread.c ****                         /* This is PNG_OPTIMIZED_ALPHA, the component value
3307:fltk-1.3.4-1/png/pngread.c ****                          * is a linear 8-bit value.  Combine this with the
3308:fltk-1.3.4-1/png/pngread.c ****                          * current outrow[c] value which is sRGB encoded.
3309:fltk-1.3.4-1/png/pngread.c ****                          * Arithmetic here is 16-bits to preserve the output
3310:fltk-1.3.4-1/png/pngread.c ****                          * values correctly.
3311:fltk-1.3.4-1/png/pngread.c ****                          */
3312:fltk-1.3.4-1/png/pngread.c ****                         component *= 257*255; /* =65535 */
3313:fltk-1.3.4-1/png/pngread.c ****                         component += (255-alpha)*png_sRGB_table[outrow[c]];
3314:fltk-1.3.4-1/png/pngread.c **** 
3315:fltk-1.3.4-1/png/pngread.c ****                         /* So 'component' is scaled by 255*65535 and is
3316:fltk-1.3.4-1/png/pngread.c ****                          * therefore appropriate for the sRGB to linear
3317:fltk-1.3.4-1/png/pngread.c ****                          * conversion table.
3318:fltk-1.3.4-1/png/pngread.c ****                          */
3319:fltk-1.3.4-1/png/pngread.c ****                         component = PNG_sRGB_FROM_LINEAR(component);
3320:fltk-1.3.4-1/png/pngread.c ****                      }
3321:fltk-1.3.4-1/png/pngread.c **** 
3322:fltk-1.3.4-1/png/pngread.c ****                      outrow[c] = (png_byte)component;
3323:fltk-1.3.4-1/png/pngread.c ****                   }
3324:fltk-1.3.4-1/png/pngread.c ****                }
3325:fltk-1.3.4-1/png/pngread.c **** 
3326:fltk-1.3.4-1/png/pngread.c ****                inrow += channels+1; /* components and alpha channel */
3327:fltk-1.3.4-1/png/pngread.c ****             }
3328:fltk-1.3.4-1/png/pngread.c ****          }
3329:fltk-1.3.4-1/png/pngread.c ****       }
3330:fltk-1.3.4-1/png/pngread.c ****    }
3331:fltk-1.3.4-1/png/pngread.c **** 
3332:fltk-1.3.4-1/png/pngread.c ****    return 1;
3333:fltk-1.3.4-1/png/pngread.c **** }
3334:fltk-1.3.4-1/png/pngread.c **** 
3335:fltk-1.3.4-1/png/pngread.c **** /* The do_local_background case; called when all the following transforms are to
3336:fltk-1.3.4-1/png/pngread.c ****  * be done:
3337:fltk-1.3.4-1/png/pngread.c ****  *
3338:fltk-1.3.4-1/png/pngread.c ****  * PNG_RGB_TO_GRAY
3339:fltk-1.3.4-1/png/pngread.c ****  * PNG_COMPOSITE
3340:fltk-1.3.4-1/png/pngread.c ****  * PNG_GAMMA
3341:fltk-1.3.4-1/png/pngread.c ****  *
3342:fltk-1.3.4-1/png/pngread.c ****  * This is a work-around for the fact that both the PNG_RGB_TO_GRAY and
3343:fltk-1.3.4-1/png/pngread.c ****  * PNG_COMPOSITE code performs gamma correction, so we get double gamma
3344:fltk-1.3.4-1/png/pngread.c ****  * correction.  The fix-up is to prevent the PNG_COMPOSITE operation from
3345:fltk-1.3.4-1/png/pngread.c ****  * happening inside libpng, so this routine sees an 8 or 16-bit gray+alpha
3346:fltk-1.3.4-1/png/pngread.c ****  * row and handles the removal or pre-multiplication of the alpha channel.
3347:fltk-1.3.4-1/png/pngread.c ****  */
3348:fltk-1.3.4-1/png/pngread.c **** static int
3349:fltk-1.3.4-1/png/pngread.c **** png_image_read_background(png_voidp argument)
3350:fltk-1.3.4-1/png/pngread.c **** {
3351:fltk-1.3.4-1/png/pngread.c ****    png_image_read_control *display = png_voidcast(png_image_read_control*,
3352:fltk-1.3.4-1/png/pngread.c ****       argument);
3353:fltk-1.3.4-1/png/pngread.c ****    png_imagep image = display->image;
3354:fltk-1.3.4-1/png/pngread.c ****    png_structrp png_ptr = image->opaque->png_ptr;
3355:fltk-1.3.4-1/png/pngread.c ****    png_inforp info_ptr = image->opaque->info_ptr;
3356:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 height = image->height;
3357:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 width = image->width;
3358:fltk-1.3.4-1/png/pngread.c ****    int pass, passes;
3359:fltk-1.3.4-1/png/pngread.c **** 
3360:fltk-1.3.4-1/png/pngread.c ****    /* Double check the convoluted logic below.  We expect to get here with
3361:fltk-1.3.4-1/png/pngread.c ****     * libpng doing rgb to gray and gamma correction but background processing
3362:fltk-1.3.4-1/png/pngread.c ****     * left to the png_image_read_background function.  The rows libpng produce
3363:fltk-1.3.4-1/png/pngread.c ****     * might be 8 or 16-bit but should always have two channels; gray plus alpha.
3364:fltk-1.3.4-1/png/pngread.c ****     */
3365:fltk-1.3.4-1/png/pngread.c ****    if ((png_ptr->transformations & PNG_RGB_TO_GRAY) == 0)
3366:fltk-1.3.4-1/png/pngread.c ****       png_error(png_ptr, "lost rgb to gray");
3367:fltk-1.3.4-1/png/pngread.c **** 
3368:fltk-1.3.4-1/png/pngread.c ****    if ((png_ptr->transformations & PNG_COMPOSE) != 0)
3369:fltk-1.3.4-1/png/pngread.c ****       png_error(png_ptr, "unexpected compose");
3370:fltk-1.3.4-1/png/pngread.c **** 
3371:fltk-1.3.4-1/png/pngread.c ****    if (png_get_channels(png_ptr, info_ptr) != 2)
3372:fltk-1.3.4-1/png/pngread.c ****       png_error(png_ptr, "lost/gained channels");
3373:fltk-1.3.4-1/png/pngread.c **** 
3374:fltk-1.3.4-1/png/pngread.c ****    /* Expect the 8-bit case to always remove the alpha channel */
3375:fltk-1.3.4-1/png/pngread.c ****    if ((image->format & PNG_FORMAT_FLAG_LINEAR) == 0 &&
3376:fltk-1.3.4-1/png/pngread.c ****       (image->format & PNG_FORMAT_FLAG_ALPHA) != 0)
3377:fltk-1.3.4-1/png/pngread.c ****       png_error(png_ptr, "unexpected 8-bit transformation");
3378:fltk-1.3.4-1/png/pngread.c **** 
3379:fltk-1.3.4-1/png/pngread.c ****    switch (png_ptr->interlaced)
3380:fltk-1.3.4-1/png/pngread.c ****    {
3381:fltk-1.3.4-1/png/pngread.c ****       case PNG_INTERLACE_NONE:
3382:fltk-1.3.4-1/png/pngread.c ****          passes = 1;
3383:fltk-1.3.4-1/png/pngread.c ****          break;
3384:fltk-1.3.4-1/png/pngread.c **** 
3385:fltk-1.3.4-1/png/pngread.c ****       case PNG_INTERLACE_ADAM7:
3386:fltk-1.3.4-1/png/pngread.c ****          passes = PNG_INTERLACE_ADAM7_PASSES;
3387:fltk-1.3.4-1/png/pngread.c ****          break;
3388:fltk-1.3.4-1/png/pngread.c **** 
3389:fltk-1.3.4-1/png/pngread.c ****       default:
3390:fltk-1.3.4-1/png/pngread.c ****          png_error(png_ptr, "unknown interlace type");
3391:fltk-1.3.4-1/png/pngread.c ****    }
3392:fltk-1.3.4-1/png/pngread.c **** 
3393:fltk-1.3.4-1/png/pngread.c ****    /* Use direct access to info_ptr here because otherwise the simplified API
3394:fltk-1.3.4-1/png/pngread.c ****     * would require PNG_EASY_ACCESS_SUPPORTED (just for this.)  Note this is
3395:fltk-1.3.4-1/png/pngread.c ****     * checking the value after libpng expansions, not the original value in the
3396:fltk-1.3.4-1/png/pngread.c ****     * PNG.
3397:fltk-1.3.4-1/png/pngread.c ****     */
3398:fltk-1.3.4-1/png/pngread.c ****    switch (info_ptr->bit_depth)
3399:fltk-1.3.4-1/png/pngread.c ****    {
3400:fltk-1.3.4-1/png/pngread.c ****       default:
3401:fltk-1.3.4-1/png/pngread.c ****          png_error(png_ptr, "unexpected bit depth");
3402:fltk-1.3.4-1/png/pngread.c ****          break;
3403:fltk-1.3.4-1/png/pngread.c **** 
3404:fltk-1.3.4-1/png/pngread.c ****       case 8:
3405:fltk-1.3.4-1/png/pngread.c ****          /* 8-bit sRGB gray values with an alpha channel; the alpha channel is
3406:fltk-1.3.4-1/png/pngread.c ****           * to be removed by composing on a background: either the row if
3407:fltk-1.3.4-1/png/pngread.c ****           * display->background is NULL or display->background->green if not.
3408:fltk-1.3.4-1/png/pngread.c ****           * Unlike the code above ALPHA_OPTIMIZED has *not* been done.
3409:fltk-1.3.4-1/png/pngread.c ****           */
3410:fltk-1.3.4-1/png/pngread.c ****          {
3411:fltk-1.3.4-1/png/pngread.c ****             png_bytep first_row = png_voidcast(png_bytep, display->first_row);
3412:fltk-1.3.4-1/png/pngread.c ****             ptrdiff_t step_row = display->row_bytes;
3413:fltk-1.3.4-1/png/pngread.c **** 
3414:fltk-1.3.4-1/png/pngread.c ****             for (pass = 0; pass < passes; ++pass)
3415:fltk-1.3.4-1/png/pngread.c ****             {
3416:fltk-1.3.4-1/png/pngread.c ****                png_bytep        row = png_voidcast(png_bytep,
3417:fltk-1.3.4-1/png/pngread.c ****                                                    display->first_row);
3418:fltk-1.3.4-1/png/pngread.c ****                unsigned int     startx, stepx, stepy;
3419:fltk-1.3.4-1/png/pngread.c ****                png_uint_32      y;
3420:fltk-1.3.4-1/png/pngread.c **** 
3421:fltk-1.3.4-1/png/pngread.c ****                if (png_ptr->interlaced == PNG_INTERLACE_ADAM7)
3422:fltk-1.3.4-1/png/pngread.c ****                {
3423:fltk-1.3.4-1/png/pngread.c ****                   /* The row may be empty for a short image: */
3424:fltk-1.3.4-1/png/pngread.c ****                   if (PNG_PASS_COLS(width, pass) == 0)
3425:fltk-1.3.4-1/png/pngread.c ****                      continue;
3426:fltk-1.3.4-1/png/pngread.c **** 
3427:fltk-1.3.4-1/png/pngread.c ****                   startx = PNG_PASS_START_COL(pass);
3428:fltk-1.3.4-1/png/pngread.c ****                   stepx = PNG_PASS_COL_OFFSET(pass);
3429:fltk-1.3.4-1/png/pngread.c ****                   y = PNG_PASS_START_ROW(pass);
3430:fltk-1.3.4-1/png/pngread.c ****                   stepy = PNG_PASS_ROW_OFFSET(pass);
3431:fltk-1.3.4-1/png/pngread.c ****                }
3432:fltk-1.3.4-1/png/pngread.c **** 
3433:fltk-1.3.4-1/png/pngread.c ****                else
3434:fltk-1.3.4-1/png/pngread.c ****                {
3435:fltk-1.3.4-1/png/pngread.c ****                   y = 0;
3436:fltk-1.3.4-1/png/pngread.c ****                   startx = 0;
3437:fltk-1.3.4-1/png/pngread.c ****                   stepx = stepy = 1;
3438:fltk-1.3.4-1/png/pngread.c ****                }
3439:fltk-1.3.4-1/png/pngread.c **** 
3440:fltk-1.3.4-1/png/pngread.c ****                if (display->background == NULL)
3441:fltk-1.3.4-1/png/pngread.c ****                {
3442:fltk-1.3.4-1/png/pngread.c ****                   for (; y<height; y += stepy)
3443:fltk-1.3.4-1/png/pngread.c ****                   {
3444:fltk-1.3.4-1/png/pngread.c ****                      png_bytep inrow = png_voidcast(png_bytep,
3445:fltk-1.3.4-1/png/pngread.c ****                         display->local_row);
3446:fltk-1.3.4-1/png/pngread.c ****                      png_bytep outrow = first_row + y * step_row;
3447:fltk-1.3.4-1/png/pngread.c ****                      png_const_bytep end_row = outrow + width;
3448:fltk-1.3.4-1/png/pngread.c **** 
3449:fltk-1.3.4-1/png/pngread.c ****                      /* Read the row, which is packed: */
3450:fltk-1.3.4-1/png/pngread.c ****                      png_read_row(png_ptr, inrow, NULL);
3451:fltk-1.3.4-1/png/pngread.c **** 
3452:fltk-1.3.4-1/png/pngread.c ****                      /* Now do the composition on each pixel in this row. */
3453:fltk-1.3.4-1/png/pngread.c ****                      outrow += startx;
3454:fltk-1.3.4-1/png/pngread.c ****                      for (; outrow < end_row; outrow += stepx)
3455:fltk-1.3.4-1/png/pngread.c ****                      {
3456:fltk-1.3.4-1/png/pngread.c ****                         png_byte alpha = inrow[1];
3457:fltk-1.3.4-1/png/pngread.c **** 
3458:fltk-1.3.4-1/png/pngread.c ****                         if (alpha > 0) /* else no change to the output */
3459:fltk-1.3.4-1/png/pngread.c ****                         {
3460:fltk-1.3.4-1/png/pngread.c ****                            png_uint_32 component = inrow[0];
3461:fltk-1.3.4-1/png/pngread.c **** 
3462:fltk-1.3.4-1/png/pngread.c ****                            if (alpha < 255) /* else just use component */
3463:fltk-1.3.4-1/png/pngread.c ****                            {
3464:fltk-1.3.4-1/png/pngread.c ****                               /* Since PNG_OPTIMIZED_ALPHA was not set it is
3465:fltk-1.3.4-1/png/pngread.c ****                                * necessary to invert the sRGB transfer
3466:fltk-1.3.4-1/png/pngread.c ****                                * function and multiply the alpha out.
3467:fltk-1.3.4-1/png/pngread.c ****                                */
3468:fltk-1.3.4-1/png/pngread.c ****                               component = png_sRGB_table[component] * alpha;
3469:fltk-1.3.4-1/png/pngread.c ****                               component += png_sRGB_table[outrow[0]] *
3470:fltk-1.3.4-1/png/pngread.c ****                                  (255-alpha);
3471:fltk-1.3.4-1/png/pngread.c ****                               component = PNG_sRGB_FROM_LINEAR(component);
3472:fltk-1.3.4-1/png/pngread.c ****                            }
3473:fltk-1.3.4-1/png/pngread.c **** 
3474:fltk-1.3.4-1/png/pngread.c ****                            outrow[0] = (png_byte)component;
3475:fltk-1.3.4-1/png/pngread.c ****                         }
3476:fltk-1.3.4-1/png/pngread.c **** 
3477:fltk-1.3.4-1/png/pngread.c ****                         inrow += 2; /* gray and alpha channel */
3478:fltk-1.3.4-1/png/pngread.c ****                      }
3479:fltk-1.3.4-1/png/pngread.c ****                   }
3480:fltk-1.3.4-1/png/pngread.c ****                }
3481:fltk-1.3.4-1/png/pngread.c **** 
3482:fltk-1.3.4-1/png/pngread.c ****                else /* constant background value */
3483:fltk-1.3.4-1/png/pngread.c ****                {
3484:fltk-1.3.4-1/png/pngread.c ****                   png_byte background8 = display->background->green;
3485:fltk-1.3.4-1/png/pngread.c ****                   png_uint_16 background = png_sRGB_table[background8];
3486:fltk-1.3.4-1/png/pngread.c **** 
3487:fltk-1.3.4-1/png/pngread.c ****                   for (; y<height; y += stepy)
3488:fltk-1.3.4-1/png/pngread.c ****                   {
3489:fltk-1.3.4-1/png/pngread.c ****                      png_bytep inrow = png_voidcast(png_bytep,
3490:fltk-1.3.4-1/png/pngread.c ****                         display->local_row);
3491:fltk-1.3.4-1/png/pngread.c ****                      png_bytep outrow = first_row + y * step_row;
3492:fltk-1.3.4-1/png/pngread.c ****                      png_const_bytep end_row = outrow + width;
3493:fltk-1.3.4-1/png/pngread.c **** 
3494:fltk-1.3.4-1/png/pngread.c ****                      /* Read the row, which is packed: */
3495:fltk-1.3.4-1/png/pngread.c ****                      png_read_row(png_ptr, inrow, NULL);
3496:fltk-1.3.4-1/png/pngread.c **** 
3497:fltk-1.3.4-1/png/pngread.c ****                      /* Now do the composition on each pixel in this row. */
3498:fltk-1.3.4-1/png/pngread.c ****                      outrow += startx;
3499:fltk-1.3.4-1/png/pngread.c ****                      for (; outrow < end_row; outrow += stepx)
3500:fltk-1.3.4-1/png/pngread.c ****                      {
3501:fltk-1.3.4-1/png/pngread.c ****                         png_byte alpha = inrow[1];
3502:fltk-1.3.4-1/png/pngread.c **** 
3503:fltk-1.3.4-1/png/pngread.c ****                         if (alpha > 0) /* else use background */
3504:fltk-1.3.4-1/png/pngread.c ****                         {
3505:fltk-1.3.4-1/png/pngread.c ****                            png_uint_32 component = inrow[0];
3506:fltk-1.3.4-1/png/pngread.c **** 
3507:fltk-1.3.4-1/png/pngread.c ****                            if (alpha < 255) /* else just use component */
3508:fltk-1.3.4-1/png/pngread.c ****                            {
3509:fltk-1.3.4-1/png/pngread.c ****                               component = png_sRGB_table[component] * alpha;
3510:fltk-1.3.4-1/png/pngread.c ****                               component += background * (255-alpha);
3511:fltk-1.3.4-1/png/pngread.c ****                               component = PNG_sRGB_FROM_LINEAR(component);
3512:fltk-1.3.4-1/png/pngread.c ****                            }
3513:fltk-1.3.4-1/png/pngread.c **** 
3514:fltk-1.3.4-1/png/pngread.c ****                            outrow[0] = (png_byte)component;
3515:fltk-1.3.4-1/png/pngread.c ****                         }
3516:fltk-1.3.4-1/png/pngread.c **** 
3517:fltk-1.3.4-1/png/pngread.c ****                         else
3518:fltk-1.3.4-1/png/pngread.c ****                            outrow[0] = background8;
3519:fltk-1.3.4-1/png/pngread.c **** 
3520:fltk-1.3.4-1/png/pngread.c ****                         inrow += 2; /* gray and alpha channel */
3521:fltk-1.3.4-1/png/pngread.c ****                      }
3522:fltk-1.3.4-1/png/pngread.c **** 
3523:fltk-1.3.4-1/png/pngread.c ****                      row += display->row_bytes;
3524:fltk-1.3.4-1/png/pngread.c ****                   }
3525:fltk-1.3.4-1/png/pngread.c ****                }
3526:fltk-1.3.4-1/png/pngread.c ****             }
3527:fltk-1.3.4-1/png/pngread.c ****          }
3528:fltk-1.3.4-1/png/pngread.c ****          break;
3529:fltk-1.3.4-1/png/pngread.c **** 
3530:fltk-1.3.4-1/png/pngread.c ****       case 16:
3531:fltk-1.3.4-1/png/pngread.c ****          /* 16-bit linear with pre-multiplied alpha; the pre-multiplication must
3532:fltk-1.3.4-1/png/pngread.c ****           * still be done and, maybe, the alpha channel removed.  This code also
3533:fltk-1.3.4-1/png/pngread.c ****           * handles the alpha-first option.
3534:fltk-1.3.4-1/png/pngread.c ****           */
3535:fltk-1.3.4-1/png/pngread.c ****          {
3536:fltk-1.3.4-1/png/pngread.c ****             png_uint_16p first_row = png_voidcast(png_uint_16p,
3537:fltk-1.3.4-1/png/pngread.c ****                display->first_row);
3538:fltk-1.3.4-1/png/pngread.c ****             /* The division by two is safe because the caller passed in a
3539:fltk-1.3.4-1/png/pngread.c ****              * stride which was multiplied by 2 (below) to get row_bytes.
3540:fltk-1.3.4-1/png/pngread.c ****              */
3541:fltk-1.3.4-1/png/pngread.c ****             ptrdiff_t    step_row = display->row_bytes / 2;
3542:fltk-1.3.4-1/png/pngread.c ****             int preserve_alpha = (image->format & PNG_FORMAT_FLAG_ALPHA) != 0;
3543:fltk-1.3.4-1/png/pngread.c ****             unsigned int outchannels = 1+preserve_alpha;
3544:fltk-1.3.4-1/png/pngread.c ****             int swap_alpha = 0;
3545:fltk-1.3.4-1/png/pngread.c **** 
3546:fltk-1.3.4-1/png/pngread.c **** #           ifdef PNG_SIMPLIFIED_READ_AFIRST_SUPPORTED
3547:fltk-1.3.4-1/png/pngread.c ****                if (preserve_alpha != 0 &&
3548:fltk-1.3.4-1/png/pngread.c ****                    (image->format & PNG_FORMAT_FLAG_AFIRST) != 0)
3549:fltk-1.3.4-1/png/pngread.c ****                   swap_alpha = 1;
3550:fltk-1.3.4-1/png/pngread.c **** #           endif
3551:fltk-1.3.4-1/png/pngread.c **** 
3552:fltk-1.3.4-1/png/pngread.c ****             for (pass = 0; pass < passes; ++pass)
3553:fltk-1.3.4-1/png/pngread.c ****             {
3554:fltk-1.3.4-1/png/pngread.c ****                unsigned int     startx, stepx, stepy;
3555:fltk-1.3.4-1/png/pngread.c ****                png_uint_32      y;
3556:fltk-1.3.4-1/png/pngread.c **** 
3557:fltk-1.3.4-1/png/pngread.c ****                /* The 'x' start and step are adjusted to output components here.
3558:fltk-1.3.4-1/png/pngread.c ****                 */
3559:fltk-1.3.4-1/png/pngread.c ****                if (png_ptr->interlaced == PNG_INTERLACE_ADAM7)
3560:fltk-1.3.4-1/png/pngread.c ****                {
3561:fltk-1.3.4-1/png/pngread.c ****                   /* The row may be empty for a short image: */
3562:fltk-1.3.4-1/png/pngread.c ****                   if (PNG_PASS_COLS(width, pass) == 0)
3563:fltk-1.3.4-1/png/pngread.c ****                      continue;
3564:fltk-1.3.4-1/png/pngread.c **** 
3565:fltk-1.3.4-1/png/pngread.c ****                   startx = PNG_PASS_START_COL(pass) * outchannels;
3566:fltk-1.3.4-1/png/pngread.c ****                   stepx = PNG_PASS_COL_OFFSET(pass) * outchannels;
3567:fltk-1.3.4-1/png/pngread.c ****                   y = PNG_PASS_START_ROW(pass);
3568:fltk-1.3.4-1/png/pngread.c ****                   stepy = PNG_PASS_ROW_OFFSET(pass);
3569:fltk-1.3.4-1/png/pngread.c ****                }
3570:fltk-1.3.4-1/png/pngread.c **** 
3571:fltk-1.3.4-1/png/pngread.c ****                else
3572:fltk-1.3.4-1/png/pngread.c ****                {
3573:fltk-1.3.4-1/png/pngread.c ****                   y = 0;
3574:fltk-1.3.4-1/png/pngread.c ****                   startx = 0;
3575:fltk-1.3.4-1/png/pngread.c ****                   stepx = outchannels;
3576:fltk-1.3.4-1/png/pngread.c ****                   stepy = 1;
3577:fltk-1.3.4-1/png/pngread.c ****                }
3578:fltk-1.3.4-1/png/pngread.c **** 
3579:fltk-1.3.4-1/png/pngread.c ****                for (; y<height; y += stepy)
3580:fltk-1.3.4-1/png/pngread.c ****                {
3581:fltk-1.3.4-1/png/pngread.c ****                   png_const_uint_16p inrow;
3582:fltk-1.3.4-1/png/pngread.c ****                   png_uint_16p outrow = first_row + y*step_row;
3583:fltk-1.3.4-1/png/pngread.c ****                   png_uint_16p end_row = outrow + width * outchannels;
3584:fltk-1.3.4-1/png/pngread.c **** 
3585:fltk-1.3.4-1/png/pngread.c ****                   /* Read the row, which is packed: */
3586:fltk-1.3.4-1/png/pngread.c ****                   png_read_row(png_ptr, png_voidcast(png_bytep,
3587:fltk-1.3.4-1/png/pngread.c ****                      display->local_row), NULL);
3588:fltk-1.3.4-1/png/pngread.c ****                   inrow = png_voidcast(png_const_uint_16p, display->local_row);
3589:fltk-1.3.4-1/png/pngread.c **** 
3590:fltk-1.3.4-1/png/pngread.c ****                   /* Now do the pre-multiplication on each pixel in this row.
3591:fltk-1.3.4-1/png/pngread.c ****                    */
3592:fltk-1.3.4-1/png/pngread.c ****                   outrow += startx;
3593:fltk-1.3.4-1/png/pngread.c ****                   for (; outrow < end_row; outrow += stepx)
3594:fltk-1.3.4-1/png/pngread.c ****                   {
3595:fltk-1.3.4-1/png/pngread.c ****                      png_uint_32 component = inrow[0];
3596:fltk-1.3.4-1/png/pngread.c ****                      png_uint_16 alpha = inrow[1];
3597:fltk-1.3.4-1/png/pngread.c **** 
3598:fltk-1.3.4-1/png/pngread.c ****                      if (alpha > 0) /* else 0 */
3599:fltk-1.3.4-1/png/pngread.c ****                      {
3600:fltk-1.3.4-1/png/pngread.c ****                         if (alpha < 65535) /* else just use component */
3601:fltk-1.3.4-1/png/pngread.c ****                         {
3602:fltk-1.3.4-1/png/pngread.c ****                            component *= alpha;
3603:fltk-1.3.4-1/png/pngread.c ****                            component += 32767;
3604:fltk-1.3.4-1/png/pngread.c ****                            component /= 65535;
3605:fltk-1.3.4-1/png/pngread.c ****                         }
3606:fltk-1.3.4-1/png/pngread.c ****                      }
3607:fltk-1.3.4-1/png/pngread.c **** 
3608:fltk-1.3.4-1/png/pngread.c ****                      else
3609:fltk-1.3.4-1/png/pngread.c ****                         component = 0;
3610:fltk-1.3.4-1/png/pngread.c **** 
3611:fltk-1.3.4-1/png/pngread.c ****                      outrow[swap_alpha] = (png_uint_16)component;
3612:fltk-1.3.4-1/png/pngread.c ****                      if (preserve_alpha != 0)
3613:fltk-1.3.4-1/png/pngread.c ****                         outrow[1 ^ swap_alpha] = alpha;
3614:fltk-1.3.4-1/png/pngread.c **** 
3615:fltk-1.3.4-1/png/pngread.c ****                      inrow += 2; /* components and alpha channel */
3616:fltk-1.3.4-1/png/pngread.c ****                   }
3617:fltk-1.3.4-1/png/pngread.c ****                }
3618:fltk-1.3.4-1/png/pngread.c ****             }
3619:fltk-1.3.4-1/png/pngread.c ****          }
3620:fltk-1.3.4-1/png/pngread.c ****          break;
3621:fltk-1.3.4-1/png/pngread.c ****    }
3622:fltk-1.3.4-1/png/pngread.c **** 
3623:fltk-1.3.4-1/png/pngread.c ****    return 1;
3624:fltk-1.3.4-1/png/pngread.c **** }
3625:fltk-1.3.4-1/png/pngread.c **** 
3626:fltk-1.3.4-1/png/pngread.c **** /* The guts of png_image_finish_read as a png_safe_execute callback. */
3627:fltk-1.3.4-1/png/pngread.c **** static int
3628:fltk-1.3.4-1/png/pngread.c **** png_image_read_direct(png_voidp argument)
3629:fltk-1.3.4-1/png/pngread.c **** {
 5481              		.loc 1 3629 0
 5482              		.cfi_startproc
 5483              	.LVL661:
 5484 0000 4157     		pushq	%r15
 5485              		.cfi_def_cfa_offset 16
 5486              		.cfi_offset 15, -16
 5487 0002 4156     		pushq	%r14
 5488              		.cfi_def_cfa_offset 24
 5489              		.cfi_offset 14, -24
 5490 0004 4155     		pushq	%r13
 5491              		.cfi_def_cfa_offset 32
 5492              		.cfi_offset 13, -32
 5493 0006 4154     		pushq	%r12
 5494              		.cfi_def_cfa_offset 40
 5495              		.cfi_offset 12, -40
 5496 0008 4989FD   		movq	%rdi, %r13
 5497 000b 55       		pushq	%rbp
 5498              		.cfi_def_cfa_offset 48
 5499              		.cfi_offset 6, -48
 5500 000c 53       		pushq	%rbx
 5501              		.cfi_def_cfa_offset 56
 5502              		.cfi_offset 3, -56
 5503 000d 4883EC48 		subq	$72, %rsp
 5504              		.cfi_def_cfa_offset 128
3630:fltk-1.3.4-1/png/pngread.c ****    png_image_read_control *display = png_voidcast(png_image_read_control*,
3631:fltk-1.3.4-1/png/pngread.c ****       argument);
3632:fltk-1.3.4-1/png/pngread.c ****    png_imagep image = display->image;
 5505              		.loc 1 3632 0
 5506 0011 4C8B37   		movq	(%rdi), %r14
3629:fltk-1.3.4-1/png/pngread.c ****    png_image_read_control *display = png_voidcast(png_image_read_control*,
 5507              		.loc 1 3629 0
 5508 0014 64488B04 		movq	%fs:40, %rax
 5508      25280000 
 5508      00
 5509 001d 48894424 		movq	%rax, 56(%rsp)
 5509      38
 5510 0022 31C0     		xorl	%eax, %eax
 5511              	.LVL662:
3633:fltk-1.3.4-1/png/pngread.c ****    png_structrp png_ptr = image->opaque->png_ptr;
 5512              		.loc 1 3633 0
 5513 0024 498B06   		movq	(%r14), %rax
3634:fltk-1.3.4-1/png/pngread.c ****    png_inforp info_ptr = image->opaque->info_ptr;
3635:fltk-1.3.4-1/png/pngread.c **** 
3636:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 format = image->format;
 5514              		.loc 1 3636 0
 5515 0027 418B6E14 		movl	20(%r14), %ebp
3633:fltk-1.3.4-1/png/pngread.c ****    png_structrp png_ptr = image->opaque->png_ptr;
 5516              		.loc 1 3633 0
 5517 002b 488B18   		movq	(%rax), %rbx
 5518              	.LVL663:
3634:fltk-1.3.4-1/png/pngread.c ****    png_inforp info_ptr = image->opaque->info_ptr;
 5519              		.loc 1 3634 0
 5520 002e 488B4008 		movq	8(%rax), %rax
 5521 0032 48894424 		movq	%rax, 16(%rsp)
 5521      10
 5522              	.LVL664:
3637:fltk-1.3.4-1/png/pngread.c ****    int linear = (format & PNG_FORMAT_FLAG_LINEAR) != 0;
 5523              		.loc 1 3637 0
 5524 0037 89E8     		movl	%ebp, %eax
 5525              	.LVL665:
3638:fltk-1.3.4-1/png/pngread.c ****    int do_local_compose = 0;
3639:fltk-1.3.4-1/png/pngread.c ****    int do_local_background = 0; /* to avoid double gamma correction bug */
3640:fltk-1.3.4-1/png/pngread.c ****    int passes = 0;
3641:fltk-1.3.4-1/png/pngread.c **** 
3642:fltk-1.3.4-1/png/pngread.c ****    /* Add transforms to ensure the correct output format is produced then check
3643:fltk-1.3.4-1/png/pngread.c ****     * that the required implementation support is there.  Always expand; always
3644:fltk-1.3.4-1/png/pngread.c ****     * need 8 bits minimum, no palette and expanded tRNS.
3645:fltk-1.3.4-1/png/pngread.c ****     */
3646:fltk-1.3.4-1/png/pngread.c ****    png_set_expand(png_ptr);
 5526              		.loc 1 3646 0
 5527 0039 4889DF   		movq	%rbx, %rdi
 5528              	.LVL666:
3637:fltk-1.3.4-1/png/pngread.c ****    int linear = (format & PNG_FORMAT_FLAG_LINEAR) != 0;
 5529              		.loc 1 3637 0
 5530 003c 83E004   		andl	$4, %eax
 5531 003f 8944240C 		movl	%eax, 12(%rsp)
 5532              	.LVL667:
 5533              		.loc 1 3646 0
 5534 0043 E8000000 		call	png_set_expand
 5534      00
 5535              	.LVL668:
 5536 0048 0FB68377 		movzbl	631(%rbx), %eax
 5536      020000
 5537 004f 0FB79370 		movzwl	624(%rbx), %edx
 5537      020000
 5538 0056 0FB68B78 		movzbl	632(%rbx), %ecx
 5538      020000
 5539              	.LVL669:
 5540              	.LBB259:
 5541              	.LBB260:
 5542              	.LBB261:
1335:fltk-1.3.4-1/png/pngread.c **** 
 5543              		.loc 1 1335 0
 5544 005d 4189C0   		movl	%eax, %r8d
 5545 0060 4183E002 		andl	$2, %r8d
 5546              	.LVL670:
1337:fltk-1.3.4-1/png/pngread.c ****       format |= PNG_FORMAT_FLAG_ALPHA;
 5547              		.loc 1 1337 0
 5548 0064 A804     		testb	$4, %al
 5549 0066 0F847403 		je	.L612
 5549      0000
1338:fltk-1.3.4-1/png/pngread.c **** 
 5550              		.loc 1 1338 0
 5551 006c 4183C801 		orl	$1, %r8d
 5552              	.LVL671:
 5553              	.L613:
1349:fltk-1.3.4-1/png/pngread.c **** 
 5554              		.loc 1 1349 0
 5555 0070 4489C2   		movl	%r8d, %edx
 5556 0073 83CA04   		orl	$4, %edx
 5557 0076 80F910   		cmpb	$16, %cl
 5558 0079 440F44C2 		cmove	%edx, %r8d
 5559              	.LVL672:
1352:fltk-1.3.4-1/png/pngread.c **** 
 5560              		.loc 1 1352 0
 5561 007d 4489C2   		movl	%r8d, %edx
 5562 0080 83CA08   		orl	$8, %edx
 5563 0083 A801     		testb	$1, %al
 5564 0085 440F45C2 		cmovne	%edx, %r8d
 5565              	.LVL673:
 5566              	.LBE261:
 5567              	.LBE260:
 5568              	.LBE259:
3639:fltk-1.3.4-1/png/pngread.c ****    int passes = 0;
 5569              		.loc 1 3639 0
 5570 0089 4531FF   		xorl	%r15d, %r15d
 5571              	.LBB270:
3647:fltk-1.3.4-1/png/pngread.c **** 
3648:fltk-1.3.4-1/png/pngread.c ****    /* Now check the format to see if it was modified. */
3649:fltk-1.3.4-1/png/pngread.c ****    {
3650:fltk-1.3.4-1/png/pngread.c ****       png_uint_32 base_format = png_image_format(png_ptr) &
3651:fltk-1.3.4-1/png/pngread.c ****          ~PNG_FORMAT_FLAG_COLORMAP /* removed by png_set_expand */;
3652:fltk-1.3.4-1/png/pngread.c ****       png_uint_32 change = format ^ base_format;
 5572              		.loc 1 3652 0
 5573 008c 4589C1   		movl	%r8d, %r9d
 5574 008f 4183E1F7 		andl	$-9, %r9d
 5575              	.LVL674:
 5576 0093 4131E9   		xorl	%ebp, %r9d
 5577              	.LVL675:
3653:fltk-1.3.4-1/png/pngread.c ****       png_fixed_point output_gamma;
3654:fltk-1.3.4-1/png/pngread.c ****       int mode; /* alpha mode */
3655:fltk-1.3.4-1/png/pngread.c **** 
3656:fltk-1.3.4-1/png/pngread.c ****       /* Do this first so that we have a record if rgb to gray is happening. */
3657:fltk-1.3.4-1/png/pngread.c ****       if ((change & PNG_FORMAT_FLAG_COLOR) != 0)
 5578              		.loc 1 3657 0
 5579 0096 41F6C102 		testb	$2, %r9b
3652:fltk-1.3.4-1/png/pngread.c ****       png_fixed_point output_gamma;
 5580              		.loc 1 3652 0
 5581 009a 4589CC   		movl	%r9d, %r12d
 5582              	.LVL676:
 5583              		.loc 1 3657 0
 5584 009d 7433     		je	.L616
3658:fltk-1.3.4-1/png/pngread.c ****       {
3659:fltk-1.3.4-1/png/pngread.c ****          /* gray<->color transformation required. */
3660:fltk-1.3.4-1/png/pngread.c ****          if ((format & PNG_FORMAT_FLAG_COLOR) != 0)
 5585              		.loc 1 3660 0
 5586 009f 40F6C502 		testb	$2, %bpl
 5587 00a3 0F85DD04 		jne	.L736
 5587      0000
3661:fltk-1.3.4-1/png/pngread.c ****             png_set_gray_to_rgb(png_ptr);
3662:fltk-1.3.4-1/png/pngread.c **** 
3663:fltk-1.3.4-1/png/pngread.c ****          else
3664:fltk-1.3.4-1/png/pngread.c ****          {
3665:fltk-1.3.4-1/png/pngread.c ****             /* libpng can't do both rgb to gray and
3666:fltk-1.3.4-1/png/pngread.c ****              * background/pre-multiplication if there is also significant gamma
3667:fltk-1.3.4-1/png/pngread.c ****              * correction, because both operations require linear colors and
3668:fltk-1.3.4-1/png/pngread.c ****              * the code only supports one transform doing the gamma correction.
3669:fltk-1.3.4-1/png/pngread.c ****              * Handle this by doing the pre-multiplication or background
3670:fltk-1.3.4-1/png/pngread.c ****              * operation in this code, if necessary.
3671:fltk-1.3.4-1/png/pngread.c ****              *
3672:fltk-1.3.4-1/png/pngread.c ****              * TODO: fix this by rewriting pngrtran.c (!)
3673:fltk-1.3.4-1/png/pngread.c ****              *
3674:fltk-1.3.4-1/png/pngread.c ****              * For the moment (given that fixing this in pngrtran.c is an
3675:fltk-1.3.4-1/png/pngread.c ****              * enormous change) 'do_local_background' is used to indicate that
3676:fltk-1.3.4-1/png/pngread.c ****              * the problem exists.
3677:fltk-1.3.4-1/png/pngread.c ****              */
3678:fltk-1.3.4-1/png/pngread.c ****             if ((base_format & PNG_FORMAT_FLAG_ALPHA) != 0)
3679:fltk-1.3.4-1/png/pngread.c ****                do_local_background = 1/*maybe*/;
3680:fltk-1.3.4-1/png/pngread.c **** 
3681:fltk-1.3.4-1/png/pngread.c ****             png_set_rgb_to_gray_fixed(png_ptr, PNG_ERROR_ACTION_NONE,
 5588              		.loc 1 3681 0
 5589 00a9 B9FFFFFF 		movl	$-1, %ecx
 5589      FF
 5590 00ae BE010000 		movl	$1, %esi
 5590      00
 5591 00b3 4889DF   		movq	%rbx, %rdi
 5592 00b6 89CA     		movl	%ecx, %edx
 5593              	.LBE270:
3639:fltk-1.3.4-1/png/pngread.c ****    int passes = 0;
 5594              		.loc 1 3639 0
 5595 00b8 4589C7   		movl	%r8d, %r15d
 5596 00bb 44894424 		movl	%r8d, 8(%rsp)
 5596      08
 5597              	.LBB271:
 5598              		.loc 1 3681 0
 5599 00c0 E8000000 		call	png_set_rgb_to_gray_fixed
 5599      00
 5600              	.LVL677:
 5601 00c5 448B4424 		movl	8(%rsp), %r8d
 5601      08
 5602              	.LBE271:
3639:fltk-1.3.4-1/png/pngread.c ****    int passes = 0;
 5603              		.loc 1 3639 0
 5604 00ca 4183E701 		andl	$1, %r15d
 5605              	.LVL678:
 5606              	.L618:
 5607              	.LBB272:
3682:fltk-1.3.4-1/png/pngread.c ****                PNG_RGB_TO_GRAY_DEFAULT, PNG_RGB_TO_GRAY_DEFAULT);
3683:fltk-1.3.4-1/png/pngread.c ****          }
3684:fltk-1.3.4-1/png/pngread.c **** 
3685:fltk-1.3.4-1/png/pngread.c ****          change &= ~PNG_FORMAT_FLAG_COLOR;
 5608              		.loc 1 3685 0
 5609 00ce 4183E4FD 		andl	$-3, %r12d
 5610              	.LVL679:
 5611              	.L616:
 5612              	.LBB263:
3686:fltk-1.3.4-1/png/pngread.c ****       }
3687:fltk-1.3.4-1/png/pngread.c **** 
3688:fltk-1.3.4-1/png/pngread.c ****       /* Set the gamma appropriately, linear for 16-bit input, sRGB otherwise.
3689:fltk-1.3.4-1/png/pngread.c ****        */
3690:fltk-1.3.4-1/png/pngread.c ****       {
3691:fltk-1.3.4-1/png/pngread.c ****          png_fixed_point input_gamma_default;
3692:fltk-1.3.4-1/png/pngread.c **** 
3693:fltk-1.3.4-1/png/pngread.c ****          if ((base_format & PNG_FORMAT_FLAG_LINEAR) != 0 &&
 5613              		.loc 1 3693 0
 5614 00d2 41F6C004 		testb	$4, %r8b
3694:fltk-1.3.4-1/png/pngread.c ****              (image->flags & PNG_IMAGE_FLAG_16BIT_sRGB) == 0)
3695:fltk-1.3.4-1/png/pngread.c ****             input_gamma_default = PNG_GAMMA_LINEAR;
3696:fltk-1.3.4-1/png/pngread.c ****          else
3697:fltk-1.3.4-1/png/pngread.c ****             input_gamma_default = PNG_DEFAULT_sRGB;
 5615              		.loc 1 3697 0
 5616 00d6 BAFFFFFF 		movl	$-1, %edx
 5616      FF
3693:fltk-1.3.4-1/png/pngread.c ****              (image->flags & PNG_IMAGE_FLAG_16BIT_sRGB) == 0)
 5617              		.loc 1 3693 0
 5618 00db 7415     		je	.L619
3693:fltk-1.3.4-1/png/pngread.c ****              (image->flags & PNG_IMAGE_FLAG_16BIT_sRGB) == 0)
 5619              		.loc 1 3693 0 is_stmt 0 discriminator 1
 5620 00dd 418B4618 		movl	24(%r14), %eax
 5621 00e1 83E004   		andl	$4, %eax
3695:fltk-1.3.4-1/png/pngread.c ****          else
 5622              		.loc 1 3695 0 is_stmt 1 discriminator 1
 5623 00e4 83F801   		cmpl	$1, %eax
 5624 00e7 19D2     		sbbl	%edx, %edx
 5625 00e9 81E2A186 		andl	$100001, %edx
 5625      0100
 5626 00ef 83EA01   		subl	$1, %edx
 5627              	.L619:
3698:fltk-1.3.4-1/png/pngread.c **** 
3699:fltk-1.3.4-1/png/pngread.c ****          /* Call png_set_alpha_mode to set the default for the input gamma; the
3700:fltk-1.3.4-1/png/pngread.c ****           * output gamma is set by a second call below.
3701:fltk-1.3.4-1/png/pngread.c ****           */
3702:fltk-1.3.4-1/png/pngread.c ****          png_set_alpha_mode_fixed(png_ptr, PNG_ALPHA_PNG, input_gamma_default);
 5628              		.loc 1 3702 0
 5629 00f2 31F6     		xorl	%esi, %esi
 5630 00f4 4889DF   		movq	%rbx, %rdi
 5631 00f7 44894424 		movl	%r8d, 24(%rsp)
 5631      18
 5632              	.LVL680:
 5633 00fc E8000000 		call	png_set_alpha_mode_fixed
 5633      00
 5634              	.LVL681:
 5635              	.LBE263:
3703:fltk-1.3.4-1/png/pngread.c ****       }
3704:fltk-1.3.4-1/png/pngread.c **** 
3705:fltk-1.3.4-1/png/pngread.c ****       if (linear != 0)
 5636              		.loc 1 3705 0
 5637 0101 8B44240C 		movl	12(%rsp), %eax
3706:fltk-1.3.4-1/png/pngread.c ****       {
3707:fltk-1.3.4-1/png/pngread.c ****          /* If there *is* an alpha channel in the input it must be multiplied
3708:fltk-1.3.4-1/png/pngread.c ****           * out; use PNG_ALPHA_STANDARD, otherwise just use PNG_ALPHA_PNG.
3709:fltk-1.3.4-1/png/pngread.c ****           */
3710:fltk-1.3.4-1/png/pngread.c ****          if ((base_format & PNG_FORMAT_FLAG_ALPHA) != 0)
3711:fltk-1.3.4-1/png/pngread.c ****             mode = PNG_ALPHA_STANDARD; /* associated alpha */
3712:fltk-1.3.4-1/png/pngread.c **** 
3713:fltk-1.3.4-1/png/pngread.c ****          else
3714:fltk-1.3.4-1/png/pngread.c ****             mode = PNG_ALPHA_PNG;
3715:fltk-1.3.4-1/png/pngread.c **** 
3716:fltk-1.3.4-1/png/pngread.c ****          output_gamma = PNG_GAMMA_LINEAR;
3717:fltk-1.3.4-1/png/pngread.c ****       }
3718:fltk-1.3.4-1/png/pngread.c **** 
3719:fltk-1.3.4-1/png/pngread.c ****       else
3720:fltk-1.3.4-1/png/pngread.c ****       {
3721:fltk-1.3.4-1/png/pngread.c ****          mode = PNG_ALPHA_PNG;
 5638              		.loc 1 3721 0
 5639 0105 4531D2   		xorl	%r10d, %r10d
3722:fltk-1.3.4-1/png/pngread.c ****          output_gamma = PNG_DEFAULT_sRGB;
 5640              		.loc 1 3722 0
 5641 0108 C7442408 		movl	$-1, 8(%rsp)
 5641      FFFFFFFF 
3705:fltk-1.3.4-1/png/pngread.c ****       {
 5642              		.loc 1 3705 0
 5643 0110 448B4424 		movl	24(%rsp), %r8d
 5643      18
 5644 0115 85C0     		testl	%eax, %eax
 5645 0117 740F     		je	.L620
3714:fltk-1.3.4-1/png/pngread.c **** 
 5646              		.loc 1 3714 0
 5647 0119 4589C2   		movl	%r8d, %r10d
3716:fltk-1.3.4-1/png/pngread.c ****       }
 5648              		.loc 1 3716 0
 5649 011c C7442408 		movl	$100000, 8(%rsp)
 5649      A0860100 
3714:fltk-1.3.4-1/png/pngread.c **** 
 5650              		.loc 1 3714 0
 5651 0124 4183E201 		andl	$1, %r10d
 5652              	.L620:
 5653              	.LVL682:
3723:fltk-1.3.4-1/png/pngread.c ****       }
3724:fltk-1.3.4-1/png/pngread.c **** 
3725:fltk-1.3.4-1/png/pngread.c ****       /* If 'do_local_background' is set check for the presence of gamma
3726:fltk-1.3.4-1/png/pngread.c ****        * correction; this is part of the work-round for the libpng bug
3727:fltk-1.3.4-1/png/pngread.c ****        * described above.
3728:fltk-1.3.4-1/png/pngread.c ****        *
3729:fltk-1.3.4-1/png/pngread.c ****        * TODO: fix libpng and remove this.
3730:fltk-1.3.4-1/png/pngread.c ****        */
3731:fltk-1.3.4-1/png/pngread.c ****       if (do_local_background != 0)
 5654              		.loc 1 3731 0
 5655 0128 4585FF   		testl	%r15d, %r15d
 5656 012b 0F850F03 		jne	.L737
 5656      0000
 5657              	.LVL683:
 5658              	.L621:
3732:fltk-1.3.4-1/png/pngread.c ****       {
3733:fltk-1.3.4-1/png/pngread.c ****          png_fixed_point gtest;
3734:fltk-1.3.4-1/png/pngread.c **** 
3735:fltk-1.3.4-1/png/pngread.c ****          /* This is 'png_gamma_threshold' from pngrtran.c; the test used for
3736:fltk-1.3.4-1/png/pngread.c ****           * gamma correction, the screen gamma hasn't been set on png_struct
3737:fltk-1.3.4-1/png/pngread.c ****           * yet; it's set below.  png_struct::gamma, however, is set to the
3738:fltk-1.3.4-1/png/pngread.c ****           * final value.
3739:fltk-1.3.4-1/png/pngread.c ****           */
3740:fltk-1.3.4-1/png/pngread.c ****          if (png_muldiv(&gtest, output_gamma, png_ptr->colorspace.gamma,
3741:fltk-1.3.4-1/png/pngread.c ****                PNG_FP_1) != 0 && png_gamma_significant(gtest) == 0)
3742:fltk-1.3.4-1/png/pngread.c ****             do_local_background = 0;
3743:fltk-1.3.4-1/png/pngread.c **** 
3744:fltk-1.3.4-1/png/pngread.c ****          else if (mode == PNG_ALPHA_STANDARD)
3745:fltk-1.3.4-1/png/pngread.c ****          {
3746:fltk-1.3.4-1/png/pngread.c ****             do_local_background = 2/*required*/;
3747:fltk-1.3.4-1/png/pngread.c ****             mode = PNG_ALPHA_PNG; /* prevent libpng doing it */
3748:fltk-1.3.4-1/png/pngread.c ****          }
3749:fltk-1.3.4-1/png/pngread.c **** 
3750:fltk-1.3.4-1/png/pngread.c ****          /* else leave as 1 for the checks below */
3751:fltk-1.3.4-1/png/pngread.c ****       }
3752:fltk-1.3.4-1/png/pngread.c **** 
3753:fltk-1.3.4-1/png/pngread.c ****       /* If the bit-depth changes then handle that here. */
3754:fltk-1.3.4-1/png/pngread.c ****       if ((change & PNG_FORMAT_FLAG_LINEAR) != 0)
 5659              		.loc 1 3754 0
 5660 0131 41F6C404 		testb	$4, %r12b
 5661 0135 742C     		je	.L625
3755:fltk-1.3.4-1/png/pngread.c ****       {
3756:fltk-1.3.4-1/png/pngread.c ****          if (linear != 0 /*16-bit output*/)
 5662              		.loc 1 3756 0
 5663 0137 8B44240C 		movl	12(%rsp), %eax
 5664 013b 44894424 		movl	%r8d, 28(%rsp)
 5664      1C
3757:fltk-1.3.4-1/png/pngread.c ****             png_set_expand_16(png_ptr);
 5665              		.loc 1 3757 0
 5666 0140 4889DF   		movq	%rbx, %rdi
 5667 0143 44895424 		movl	%r10d, 24(%rsp)
 5667      18
3756:fltk-1.3.4-1/png/pngread.c ****             png_set_expand_16(png_ptr);
 5668              		.loc 1 3756 0
 5669 0148 85C0     		testl	%eax, %eax
 5670 014a 0F85B302 		jne	.L738
 5670      0000
3758:fltk-1.3.4-1/png/pngread.c **** 
3759:fltk-1.3.4-1/png/pngread.c ****          else /* 8-bit output */
3760:fltk-1.3.4-1/png/pngread.c ****             png_set_scale_16(png_ptr);
 5671              		.loc 1 3760 0
 5672 0150 E8000000 		call	png_set_scale_16
 5672      00
 5673              	.LVL684:
 5674 0155 448B4424 		movl	28(%rsp), %r8d
 5674      1C
 5675 015a 448B5424 		movl	24(%rsp), %r10d
 5675      18
 5676              	.L627:
3761:fltk-1.3.4-1/png/pngread.c **** 
3762:fltk-1.3.4-1/png/pngread.c ****          change &= ~PNG_FORMAT_FLAG_LINEAR;
 5677              		.loc 1 3762 0
 5678 015f 4183E4FB 		andl	$-5, %r12d
 5679              	.LVL685:
 5680              	.L625:
3763:fltk-1.3.4-1/png/pngread.c ****       }
3764:fltk-1.3.4-1/png/pngread.c **** 
3765:fltk-1.3.4-1/png/pngread.c ****       /* Now the background/alpha channel changes. */
3766:fltk-1.3.4-1/png/pngread.c ****       if ((change & PNG_FORMAT_FLAG_ALPHA) != 0)
 5681              		.loc 1 3766 0
 5682 0163 41F6C401 		testb	$1, %r12b
 5683              	.LBE272:
3638:fltk-1.3.4-1/png/pngread.c ****    int do_local_background = 0; /* to avoid double gamma correction bug */
 5684              		.loc 1 3638 0
 5685 0167 C7442418 		movl	$0, 24(%rsp)
 5685      00000000 
 5686              	.LBB273:
 5687              		.loc 1 3766 0
 5688 016f 0F84BF00 		je	.L628
 5688      0000
3767:fltk-1.3.4-1/png/pngread.c ****       {
3768:fltk-1.3.4-1/png/pngread.c ****          /* Removing an alpha channel requires composition for the 8-bit
3769:fltk-1.3.4-1/png/pngread.c ****           * formats; for the 16-bit it is already done, above, by the
3770:fltk-1.3.4-1/png/pngread.c ****           * pre-multiplication and the channel just needs to be stripped.
3771:fltk-1.3.4-1/png/pngread.c ****           */
3772:fltk-1.3.4-1/png/pngread.c ****          if ((base_format & PNG_FORMAT_FLAG_ALPHA) != 0)
 5689              		.loc 1 3772 0
 5690 0175 4183E001 		andl	$1, %r8d
 5691 0179 7477     		je	.L629
3773:fltk-1.3.4-1/png/pngread.c ****          {
3774:fltk-1.3.4-1/png/pngread.c ****             /* If RGB->gray is happening the alpha channel must be left and the
3775:fltk-1.3.4-1/png/pngread.c ****              * operation completed locally.
3776:fltk-1.3.4-1/png/pngread.c ****              *
3777:fltk-1.3.4-1/png/pngread.c ****              * TODO: fix libpng and remove this.
3778:fltk-1.3.4-1/png/pngread.c ****              */
3779:fltk-1.3.4-1/png/pngread.c ****             if (do_local_background != 0)
 5692              		.loc 1 3779 0
 5693 017b 4585FF   		testl	%r15d, %r15d
 5694 017e 0F852604 		jne	.L675
 5694      0000
3780:fltk-1.3.4-1/png/pngread.c ****                do_local_background = 2/*required*/;
3781:fltk-1.3.4-1/png/pngread.c **** 
3782:fltk-1.3.4-1/png/pngread.c ****             /* 16-bit output: just remove the channel */
3783:fltk-1.3.4-1/png/pngread.c ****             else if (linear != 0) /* compose on black (well, pre-multiply) */
 5695              		.loc 1 3783 0
 5696 0184 448B5C24 		movl	12(%rsp), %r11d
 5696      0C
 5697 0189 44895424 		movl	%r10d, 28(%rsp)
 5697      1C
 5698 018e 4585DB   		testl	%r11d, %r11d
 5699 0191 0F858604 		jne	.L739
 5699      0000
3784:fltk-1.3.4-1/png/pngread.c ****                png_set_strip_alpha(png_ptr);
3785:fltk-1.3.4-1/png/pngread.c **** 
3786:fltk-1.3.4-1/png/pngread.c ****             /* 8-bit output: do an appropriate compose */
3787:fltk-1.3.4-1/png/pngread.c ****             else if (display->background != NULL)
 5700              		.loc 1 3787 0
 5701 0197 498B4520 		movq	32(%r13), %rax
 5702 019b 4885C0   		testq	%rax, %rax
 5703 019e 0F849004 		je	.L676
 5703      0000
 5704              	.LBB264:
3788:fltk-1.3.4-1/png/pngread.c ****             {
3789:fltk-1.3.4-1/png/pngread.c ****                png_color_16 c;
3790:fltk-1.3.4-1/png/pngread.c **** 
3791:fltk-1.3.4-1/png/pngread.c ****                c.index = 0; /*unused*/
 5705              		.loc 1 3791 0
 5706 01a4 C6442420 		movb	$0, 32(%rsp)
 5706      00
3792:fltk-1.3.4-1/png/pngread.c ****                c.red = display->background->red;
 5707              		.loc 1 3792 0
 5708 01a9 0FB610   		movzbl	(%rax), %edx
3793:fltk-1.3.4-1/png/pngread.c ****                c.green = display->background->green;
3794:fltk-1.3.4-1/png/pngread.c ****                c.blue = display->background->blue;
3795:fltk-1.3.4-1/png/pngread.c ****                c.gray = display->background->green;
3796:fltk-1.3.4-1/png/pngread.c **** 
3797:fltk-1.3.4-1/png/pngread.c ****                /* This is always an 8-bit sRGB value, using the 'green' channel
3798:fltk-1.3.4-1/png/pngread.c ****                 * for gray is much better than calculating the luminance here;
3799:fltk-1.3.4-1/png/pngread.c ****                 * we can get off-by-one errors in that calculation relative to
3800:fltk-1.3.4-1/png/pngread.c ****                 * the app expectations and that will show up in transparent
3801:fltk-1.3.4-1/png/pngread.c ****                 * pixels.
3802:fltk-1.3.4-1/png/pngread.c ****                 */
3803:fltk-1.3.4-1/png/pngread.c ****                png_set_background_fixed(png_ptr, &c,
 5709              		.loc 1 3803 0
 5710 01ac 488D7424 		leaq	32(%rsp), %rsi
 5710      20
 5711 01b1 4531C0   		xorl	%r8d, %r8d
 5712 01b4 31C9     		xorl	%ecx, %ecx
 5713 01b6 4889DF   		movq	%rbx, %rdi
3792:fltk-1.3.4-1/png/pngread.c ****                c.red = display->background->red;
 5714              		.loc 1 3792 0
 5715 01b9 66895424 		movw	%dx, 34(%rsp)
 5715      22
3793:fltk-1.3.4-1/png/pngread.c ****                c.green = display->background->green;
 5716              		.loc 1 3793 0
 5717 01be 0FB65001 		movzbl	1(%rax), %edx
 5718 01c2 66895424 		movw	%dx, 36(%rsp)
 5718      24
3794:fltk-1.3.4-1/png/pngread.c ****                c.gray = display->background->green;
 5719              		.loc 1 3794 0
 5720 01c7 0FB65002 		movzbl	2(%rax), %edx
 5721 01cb 66895424 		movw	%dx, 38(%rsp)
 5721      26
3795:fltk-1.3.4-1/png/pngread.c **** 
 5722              		.loc 1 3795 0
 5723 01d0 0FB64001 		movzbl	1(%rax), %eax
 5724              		.loc 1 3803 0
 5725 01d4 BA010000 		movl	$1, %edx
 5725      00
3795:fltk-1.3.4-1/png/pngread.c **** 
 5726              		.loc 1 3795 0
 5727 01d9 66894424 		movw	%ax, 40(%rsp)
 5727      28
 5728              		.loc 1 3803 0
 5729 01de E8000000 		call	png_set_background_fixed
 5729      00
 5730              	.LVL686:
 5731              	.LBE264:
 5732              	.LBE273:
3638:fltk-1.3.4-1/png/pngread.c ****    int do_local_background = 0; /* to avoid double gamma correction bug */
 5733              		.loc 1 3638 0
 5734 01e3 8B44240C 		movl	12(%rsp), %eax
 5735              	.LBB274:
 5736 01e7 448B5424 		movl	28(%rsp), %r10d
 5736      1C
 5737              	.LBE274:
 5738 01ec 89442418 		movl	%eax, 24(%rsp)
 5739              	.LBB275:
 5740 01f0 EB3E     		jmp	.L630
 5741              	.L629:
 5742              	.LBB265:
3804:fltk-1.3.4-1/png/pngread.c ****                   PNG_BACKGROUND_GAMMA_SCREEN, 0/*need_expand*/,
3805:fltk-1.3.4-1/png/pngread.c ****                   0/*gamma: not used*/);
3806:fltk-1.3.4-1/png/pngread.c ****             }
3807:fltk-1.3.4-1/png/pngread.c **** 
3808:fltk-1.3.4-1/png/pngread.c ****             else /* compose on row: implemented below. */
3809:fltk-1.3.4-1/png/pngread.c ****             {
3810:fltk-1.3.4-1/png/pngread.c ****                do_local_compose = 1;
3811:fltk-1.3.4-1/png/pngread.c ****                /* This leaves the alpha channel in the output, so it has to be
3812:fltk-1.3.4-1/png/pngread.c ****                 * removed by the code below.  Set the encoding to the 'OPTIMIZE'
3813:fltk-1.3.4-1/png/pngread.c ****                 * one so the code only has to hack on the pixels that require
3814:fltk-1.3.4-1/png/pngread.c ****                 * composition.
3815:fltk-1.3.4-1/png/pngread.c ****                 */
3816:fltk-1.3.4-1/png/pngread.c ****                mode = PNG_ALPHA_OPTIMIZED;
3817:fltk-1.3.4-1/png/pngread.c ****             }
3818:fltk-1.3.4-1/png/pngread.c ****          }
3819:fltk-1.3.4-1/png/pngread.c **** 
3820:fltk-1.3.4-1/png/pngread.c ****          else /* output needs an alpha channel */
3821:fltk-1.3.4-1/png/pngread.c ****          {
3822:fltk-1.3.4-1/png/pngread.c ****             /* This is tricky because it happens before the swap operation has
3823:fltk-1.3.4-1/png/pngread.c ****              * been accomplished; however, the swap does *not* swap the added
3824:fltk-1.3.4-1/png/pngread.c ****              * alpha channel (weird API), so it must be added in the correct
3825:fltk-1.3.4-1/png/pngread.c ****              * place.
3826:fltk-1.3.4-1/png/pngread.c ****              */
3827:fltk-1.3.4-1/png/pngread.c ****             png_uint_32 filler; /* opaque filler */
3828:fltk-1.3.4-1/png/pngread.c ****             int where;
3829:fltk-1.3.4-1/png/pngread.c **** 
3830:fltk-1.3.4-1/png/pngread.c ****             if (linear != 0)
3831:fltk-1.3.4-1/png/pngread.c ****                filler = 65535;
3832:fltk-1.3.4-1/png/pngread.c **** 
3833:fltk-1.3.4-1/png/pngread.c ****             else
3834:fltk-1.3.4-1/png/pngread.c ****                filler = 255;
 5743              		.loc 1 3834 0
 5744 01f2 837C240C 		cmpl	$1, 12(%rsp)
 5744      01
3835:fltk-1.3.4-1/png/pngread.c **** 
3836:fltk-1.3.4-1/png/pngread.c **** #           ifdef PNG_FORMAT_AFIRST_SUPPORTED
3837:fltk-1.3.4-1/png/pngread.c ****                if ((format & PNG_FORMAT_FLAG_AFIRST) != 0)
3838:fltk-1.3.4-1/png/pngread.c ****                {
3839:fltk-1.3.4-1/png/pngread.c ****                   where = PNG_FILLER_BEFORE;
3840:fltk-1.3.4-1/png/pngread.c ****                   change &= ~PNG_FORMAT_FLAG_AFIRST;
3841:fltk-1.3.4-1/png/pngread.c ****                }
3842:fltk-1.3.4-1/png/pngread.c **** 
3843:fltk-1.3.4-1/png/pngread.c ****                else
3844:fltk-1.3.4-1/png/pngread.c **** #           endif
3845:fltk-1.3.4-1/png/pngread.c ****                where = PNG_FILLER_AFTER;
 5745              		.loc 1 3845 0
 5746 01f7 BA010000 		movl	$1, %edx
 5746      00
3834:fltk-1.3.4-1/png/pngread.c **** 
 5747              		.loc 1 3834 0
 5748 01fc 19F6     		sbbl	%esi, %esi
 5749 01fe 81E60001 		andl	$-65280, %esi
 5749      FFFF
 5750 0204 81C6FFFF 		addl	$65535, %esi
 5750      0000
 5751              	.LVL687:
3837:fltk-1.3.4-1/png/pngread.c ****                {
 5752              		.loc 1 3837 0
 5753 020a 40F6C520 		testb	$32, %bpl
 5754 020e 7406     		je	.L633
 5755              	.LVL688:
3840:fltk-1.3.4-1/png/pngread.c ****                }
 5756              		.loc 1 3840 0
 5757 0210 4183E4DF 		andl	$-33, %r12d
 5758              	.LVL689:
3839:fltk-1.3.4-1/png/pngread.c ****                   change &= ~PNG_FORMAT_FLAG_AFIRST;
 5759              		.loc 1 3839 0
 5760 0214 31D2     		xorl	%edx, %edx
 5761              	.LVL690:
 5762              	.L633:
3846:fltk-1.3.4-1/png/pngread.c **** 
3847:fltk-1.3.4-1/png/pngread.c ****             png_set_add_alpha(png_ptr, filler, where);
 5763              		.loc 1 3847 0
 5764 0216 4889DF   		movq	%rbx, %rdi
 5765 0219 44895424 		movl	%r10d, 28(%rsp)
 5765      1C
 5766              	.LVL691:
 5767 021e E8000000 		call	png_set_add_alpha
 5767      00
 5768              	.LVL692:
 5769 0223 448B5424 		movl	28(%rsp), %r10d
 5769      1C
 5770              	.LBE265:
 5771              	.LBE275:
3638:fltk-1.3.4-1/png/pngread.c ****    int do_local_background = 0; /* to avoid double gamma correction bug */
 5772              		.loc 1 3638 0
 5773 0228 C7442418 		movl	$0, 24(%rsp)
 5773      00000000 
 5774              	.LVL693:
 5775              	.L630:
 5776              	.LBB276:
3848:fltk-1.3.4-1/png/pngread.c ****          }
3849:fltk-1.3.4-1/png/pngread.c **** 
3850:fltk-1.3.4-1/png/pngread.c ****          /* This stops the (irrelevant) call to swap_alpha below. */
3851:fltk-1.3.4-1/png/pngread.c ****          change &= ~PNG_FORMAT_FLAG_ALPHA;
 5777              		.loc 1 3851 0
 5778 0230 4183E4FE 		andl	$-2, %r12d
 5779              	.LVL694:
 5780              	.L628:
3852:fltk-1.3.4-1/png/pngread.c ****       }
3853:fltk-1.3.4-1/png/pngread.c **** 
3854:fltk-1.3.4-1/png/pngread.c ****       /* Now set the alpha mode correctly; this is always done, even if there is
3855:fltk-1.3.4-1/png/pngread.c ****        * no alpha channel in either the input or the output because it correctly
3856:fltk-1.3.4-1/png/pngread.c ****        * sets the output gamma.
3857:fltk-1.3.4-1/png/pngread.c ****        */
3858:fltk-1.3.4-1/png/pngread.c ****       png_set_alpha_mode_fixed(png_ptr, mode, output_gamma);
 5781              		.loc 1 3858 0
 5782 0234 8B542408 		movl	8(%rsp), %edx
 5783 0238 4489D6   		movl	%r10d, %esi
 5784 023b 4889DF   		movq	%rbx, %rdi
 5785 023e E8000000 		call	png_set_alpha_mode_fixed
 5785      00
 5786              	.LVL695:
3859:fltk-1.3.4-1/png/pngread.c **** 
3860:fltk-1.3.4-1/png/pngread.c **** #     ifdef PNG_FORMAT_BGR_SUPPORTED
3861:fltk-1.3.4-1/png/pngread.c ****          if ((change & PNG_FORMAT_FLAG_BGR) != 0)
 5787              		.loc 1 3861 0
 5788 0243 41F6C410 		testb	$16, %r12b
 5789 0247 7411     		je	.L634
3862:fltk-1.3.4-1/png/pngread.c ****          {
3863:fltk-1.3.4-1/png/pngread.c ****             /* Check only the output format; PNG is never BGR; don't do this if
3864:fltk-1.3.4-1/png/pngread.c ****              * the output is gray, but fix up the 'format' value in that case.
3865:fltk-1.3.4-1/png/pngread.c ****              */
3866:fltk-1.3.4-1/png/pngread.c ****             if ((format & PNG_FORMAT_FLAG_COLOR) != 0)
 5790              		.loc 1 3866 0
 5791 0249 40F6C502 		testb	$2, %bpl
 5792 024d 0F854A03 		jne	.L740
 5792      0000
3867:fltk-1.3.4-1/png/pngread.c ****                png_set_bgr(png_ptr);
3868:fltk-1.3.4-1/png/pngread.c **** 
3869:fltk-1.3.4-1/png/pngread.c ****             else
3870:fltk-1.3.4-1/png/pngread.c ****                format &= ~PNG_FORMAT_FLAG_BGR;
 5793              		.loc 1 3870 0
 5794 0253 83E5EF   		andl	$-17, %ebp
 5795              	.LVL696:
 5796              	.L636:
3871:fltk-1.3.4-1/png/pngread.c **** 
3872:fltk-1.3.4-1/png/pngread.c ****             change &= ~PNG_FORMAT_FLAG_BGR;
 5797              		.loc 1 3872 0
 5798 0256 4183E4EF 		andl	$-17, %r12d
 5799              	.LVL697:
 5800              	.L634:
3873:fltk-1.3.4-1/png/pngread.c ****          }
3874:fltk-1.3.4-1/png/pngread.c **** #     endif
3875:fltk-1.3.4-1/png/pngread.c **** 
3876:fltk-1.3.4-1/png/pngread.c **** #     ifdef PNG_FORMAT_AFIRST_SUPPORTED
3877:fltk-1.3.4-1/png/pngread.c ****          if ((change & PNG_FORMAT_FLAG_AFIRST) != 0)
 5801              		.loc 1 3877 0
 5802 025a 41F6C420 		testb	$32, %r12b
 5803 025e 7411     		je	.L637
3878:fltk-1.3.4-1/png/pngread.c ****          {
3879:fltk-1.3.4-1/png/pngread.c ****             /* Only relevant if there is an alpha channel - it's particularly
3880:fltk-1.3.4-1/png/pngread.c ****              * important to handle this correctly because do_local_compose may
3881:fltk-1.3.4-1/png/pngread.c ****              * be set above and then libpng will keep the alpha channel for this
3882:fltk-1.3.4-1/png/pngread.c ****              * code to remove.
3883:fltk-1.3.4-1/png/pngread.c ****              */
3884:fltk-1.3.4-1/png/pngread.c ****             if ((format & PNG_FORMAT_FLAG_ALPHA) != 0)
 5804              		.loc 1 3884 0
 5805 0260 40F6C501 		testb	$1, %bpl
 5806 0264 0F85BF01 		jne	.L741
 5806      0000
3885:fltk-1.3.4-1/png/pngread.c ****             {
3886:fltk-1.3.4-1/png/pngread.c ****                /* Disable this if doing a local background,
3887:fltk-1.3.4-1/png/pngread.c ****                 * TODO: remove this when local background is no longer required.
3888:fltk-1.3.4-1/png/pngread.c ****                 */
3889:fltk-1.3.4-1/png/pngread.c ****                if (do_local_background != 2)
3890:fltk-1.3.4-1/png/pngread.c ****                   png_set_swap_alpha(png_ptr);
3891:fltk-1.3.4-1/png/pngread.c ****             }
3892:fltk-1.3.4-1/png/pngread.c **** 
3893:fltk-1.3.4-1/png/pngread.c ****             else
3894:fltk-1.3.4-1/png/pngread.c ****                format &= ~PNG_FORMAT_FLAG_AFIRST;
 5807              		.loc 1 3894 0
 5808 026a 83E5DF   		andl	$-33, %ebp
 5809              	.LVL698:
 5810              	.L639:
3895:fltk-1.3.4-1/png/pngread.c **** 
3896:fltk-1.3.4-1/png/pngread.c ****             change &= ~PNG_FORMAT_FLAG_AFIRST;
 5811              		.loc 1 3896 0
 5812 026d 4183E4DF 		andl	$-33, %r12d
 5813              	.LVL699:
 5814              	.L637:
3897:fltk-1.3.4-1/png/pngread.c ****          }
3898:fltk-1.3.4-1/png/pngread.c **** #     endif
3899:fltk-1.3.4-1/png/pngread.c **** 
3900:fltk-1.3.4-1/png/pngread.c ****       /* If the *output* is 16-bit then we need to check for a byte-swap on this
3901:fltk-1.3.4-1/png/pngread.c ****        * architecture.
3902:fltk-1.3.4-1/png/pngread.c ****        */
3903:fltk-1.3.4-1/png/pngread.c ****       if (linear != 0)
 5815              		.loc 1 3903 0
 5816 0271 448B4C24 		movl	12(%rsp), %r9d
 5816      0C
 5817 0276 4585C9   		testl	%r9d, %r9d
 5818 0279 0F851702 		jne	.L742
 5818      0000
 5819              	.L640:
3904:fltk-1.3.4-1/png/pngread.c ****       {
3905:fltk-1.3.4-1/png/pngread.c ****          PNG_CONST png_uint_16 le = 0x0001;
3906:fltk-1.3.4-1/png/pngread.c **** 
3907:fltk-1.3.4-1/png/pngread.c ****          if ((*(png_const_bytep) & le) != 0)
3908:fltk-1.3.4-1/png/pngread.c ****             png_set_swap(png_ptr);
3909:fltk-1.3.4-1/png/pngread.c ****       }
3910:fltk-1.3.4-1/png/pngread.c **** 
3911:fltk-1.3.4-1/png/pngread.c ****       /* If change is not now 0 some transformation is missing - error out. */
3912:fltk-1.3.4-1/png/pngread.c ****       if (change != 0)
 5820              		.loc 1 3912 0
 5821 027f 4585E4   		testl	%r12d, %r12d
 5822 0282 0F85CC03 		jne	.L743
 5822      0000
 5823              	.LBE276:
3913:fltk-1.3.4-1/png/pngread.c ****          png_error(png_ptr, "png_read_image: unsupported transformation");
3914:fltk-1.3.4-1/png/pngread.c ****    }
3915:fltk-1.3.4-1/png/pngread.c **** 
3916:fltk-1.3.4-1/png/pngread.c ****    PNG_SKIP_CHUNKS(png_ptr);
 5824              		.loc 1 3916 0
 5825 0288 4889DF   		movq	%rbx, %rdi
 5826 028b E8000000 		call	png_image_skip_unused_chunks
 5826      00
 5827              	.LVL700:
3917:fltk-1.3.4-1/png/pngread.c **** 
3918:fltk-1.3.4-1/png/pngread.c ****    /* Update the 'info' structure and make sure the result is as required; first
3919:fltk-1.3.4-1/png/pngread.c ****     * make sure to turn on the interlace handling if it will be required
3920:fltk-1.3.4-1/png/pngread.c ****     * (because it can't be turned on *after* the call to png_read_update_info!)
3921:fltk-1.3.4-1/png/pngread.c ****     *
3922:fltk-1.3.4-1/png/pngread.c ****     * TODO: remove the do_local_background fixup below.
3923:fltk-1.3.4-1/png/pngread.c ****     */
3924:fltk-1.3.4-1/png/pngread.c ****    if (do_local_compose == 0 && do_local_background != 2)
 5828              		.loc 1 3924 0
 5829 0290 448B4424 		movl	24(%rsp), %r8d
 5829      18
 5830 0295 4585C0   		testl	%r8d, %r8d
 5831 0298 750A     		jne	.L679
 5832 029a 4183FF02 		cmpl	$2, %r15d
 5833 029e 0F854E01 		jne	.L744
 5833      0000
 5834              	.L679:
3640:fltk-1.3.4-1/png/pngread.c **** 
 5835              		.loc 1 3640 0
 5836 02a4 C7442408 		movl	$0, 8(%rsp)
 5836      00000000 
 5837              	.LVL701:
 5838              	.L642:
3925:fltk-1.3.4-1/png/pngread.c ****       passes = png_set_interlace_handling(png_ptr);
3926:fltk-1.3.4-1/png/pngread.c **** 
3927:fltk-1.3.4-1/png/pngread.c ****    png_read_update_info(png_ptr, info_ptr);
 5839              		.loc 1 3927 0
 5840 02ac 4C8B6424 		movq	16(%rsp), %r12
 5840      10
 5841              	.LVL702:
 5842 02b1 4889DF   		movq	%rbx, %rdi
 5843 02b4 4C89E6   		movq	%r12, %rsi
 5844 02b7 E8000000 		call	png_read_update_info
 5844      00
 5845              	.LVL703:
 5846              	.LBB277:
3928:fltk-1.3.4-1/png/pngread.c **** 
3929:fltk-1.3.4-1/png/pngread.c ****    {
3930:fltk-1.3.4-1/png/pngread.c ****       png_uint_32 info_format = 0;
3931:fltk-1.3.4-1/png/pngread.c **** 
3932:fltk-1.3.4-1/png/pngread.c ****       if ((info_ptr->color_type & PNG_COLOR_MASK_COLOR) != 0)
 5847              		.loc 1 3932 0
 5848 02bc 410FB654 		movzbl	37(%r12), %edx
 5848      2425
3933:fltk-1.3.4-1/png/pngread.c ****          info_format |= PNG_FORMAT_FLAG_COLOR;
 5849              		.loc 1 3933 0
 5850 02c2 89D0     		movl	%edx, %eax
 5851 02c4 83E002   		andl	$2, %eax
 5852              	.LVL704:
3934:fltk-1.3.4-1/png/pngread.c **** 
3935:fltk-1.3.4-1/png/pngread.c ****       if ((info_ptr->color_type & PNG_COLOR_MASK_ALPHA) != 0)
 5853              		.loc 1 3935 0
 5854 02c7 83E204   		andl	$4, %edx
 5855 02ca 0F84ED00 		je	.L644
 5855      0000
3936:fltk-1.3.4-1/png/pngread.c ****       {
3937:fltk-1.3.4-1/png/pngread.c ****          /* do_local_compose removes this channel below. */
3938:fltk-1.3.4-1/png/pngread.c ****          if (do_local_compose == 0)
 5856              		.loc 1 3938 0
 5857 02d0 8B7C2418 		movl	24(%rsp), %edi
 5858 02d4 85FF     		testl	%edi, %edi
 5859 02d6 0F843B01 		je	.L745
 5859      0000
 5860              	.L645:
3939:fltk-1.3.4-1/png/pngread.c ****          {
3940:fltk-1.3.4-1/png/pngread.c ****             /* do_local_background does the same if required. */
3941:fltk-1.3.4-1/png/pngread.c ****             if (do_local_background != 2 ||
3942:fltk-1.3.4-1/png/pngread.c ****                (format & PNG_FORMAT_FLAG_ALPHA) != 0)
3943:fltk-1.3.4-1/png/pngread.c ****                info_format |= PNG_FORMAT_FLAG_ALPHA;
3944:fltk-1.3.4-1/png/pngread.c ****          }
3945:fltk-1.3.4-1/png/pngread.c ****       }
3946:fltk-1.3.4-1/png/pngread.c **** 
3947:fltk-1.3.4-1/png/pngread.c ****       else if (do_local_compose != 0) /* internal error */
3948:fltk-1.3.4-1/png/pngread.c ****          png_error(png_ptr, "png_image_read: alpha channel lost");
3949:fltk-1.3.4-1/png/pngread.c **** 
3950:fltk-1.3.4-1/png/pngread.c ****       if (info_ptr->bit_depth == 16)
3951:fltk-1.3.4-1/png/pngread.c ****          info_format |= PNG_FORMAT_FLAG_LINEAR;
 5861              		.loc 1 3951 0
 5862 02dc 488B4C24 		movq	16(%rsp), %rcx
 5862      10
 5863 02e1 89C2     		movl	%eax, %edx
 5864 02e3 83CA04   		orl	$4, %edx
 5865 02e6 80792410 		cmpb	$16, 36(%rcx)
 5866 02ea 0F44C2   		cmove	%edx, %eax
 5867              	.LVL705:
3952:fltk-1.3.4-1/png/pngread.c **** 
3953:fltk-1.3.4-1/png/pngread.c **** #     ifdef PNG_FORMAT_BGR_SUPPORTED
3954:fltk-1.3.4-1/png/pngread.c ****          if ((png_ptr->transformations & PNG_BGR) != 0)
 5868              		.loc 1 3954 0
 5869 02ed 8B933401 		movl	308(%rbx), %edx
 5869      0000
3955:fltk-1.3.4-1/png/pngread.c ****             info_format |= PNG_FORMAT_FLAG_BGR;
 5870              		.loc 1 3955 0
 5871 02f3 89C1     		movl	%eax, %ecx
 5872 02f5 83C910   		orl	$16, %ecx
 5873 02f8 F6C201   		testb	$1, %dl
 5874 02fb 0F45C1   		cmovne	%ecx, %eax
 5875              	.LVL706:
3956:fltk-1.3.4-1/png/pngread.c **** #     endif
3957:fltk-1.3.4-1/png/pngread.c **** 
3958:fltk-1.3.4-1/png/pngread.c **** #     ifdef PNG_FORMAT_AFIRST_SUPPORTED
3959:fltk-1.3.4-1/png/pngread.c ****          if (do_local_background == 2)
 5876              		.loc 1 3959 0
 5877 02fe 4183FF02 		cmpl	$2, %r15d
 5878 0302 0F849B01 		je	.L746
 5878      0000
3960:fltk-1.3.4-1/png/pngread.c ****          {
3961:fltk-1.3.4-1/png/pngread.c ****             if ((format & PNG_FORMAT_FLAG_AFIRST) != 0)
3962:fltk-1.3.4-1/png/pngread.c ****                info_format |= PNG_FORMAT_FLAG_AFIRST;
3963:fltk-1.3.4-1/png/pngread.c ****          }
3964:fltk-1.3.4-1/png/pngread.c **** 
3965:fltk-1.3.4-1/png/pngread.c ****          if ((png_ptr->transformations & PNG_SWAP_ALPHA) != 0 ||
 5879              		.loc 1 3965 0
 5880 0308 81E20000 		andl	$131072, %edx
 5880      0200
 5881 030e 0F844902 		je	.L747
 5881      0000
 5882              	.L664:
3966:fltk-1.3.4-1/png/pngread.c ****             ((png_ptr->transformations & PNG_ADD_ALPHA) != 0 &&
3967:fltk-1.3.4-1/png/pngread.c ****             (png_ptr->flags & PNG_FLAG_FILLER_AFTER) == 0))
3968:fltk-1.3.4-1/png/pngread.c ****          {
3969:fltk-1.3.4-1/png/pngread.c ****             if (do_local_background == 2)
3970:fltk-1.3.4-1/png/pngread.c ****                png_error(png_ptr, "unexpected alpha swap transformation");
3971:fltk-1.3.4-1/png/pngread.c **** 
3972:fltk-1.3.4-1/png/pngread.c ****             info_format |= PNG_FORMAT_FLAG_AFIRST;
 5883              		.loc 1 3972 0
 5884 0314 83C820   		orl	$32, %eax
 5885              	.LVL707:
 5886              	.L666:
3973:fltk-1.3.4-1/png/pngread.c ****          }
3974:fltk-1.3.4-1/png/pngread.c **** #     endif
3975:fltk-1.3.4-1/png/pngread.c **** 
3976:fltk-1.3.4-1/png/pngread.c ****       /* This is actually an internal error. */
3977:fltk-1.3.4-1/png/pngread.c ****       if (info_format != format)
 5887              		.loc 1 3977 0
 5888 0317 39C5     		cmpl	%eax, %ebp
 5889 0319 0F852803 		jne	.L748
 5889      0000
 5890              	.LBE277:
 5891              	.LBB278:
3978:fltk-1.3.4-1/png/pngread.c ****          png_error(png_ptr, "png_read_image: invalid transformations");
3979:fltk-1.3.4-1/png/pngread.c ****    }
3980:fltk-1.3.4-1/png/pngread.c **** 
3981:fltk-1.3.4-1/png/pngread.c ****    /* Now read the rows.  If do_local_compose is set then it is necessary to use
3982:fltk-1.3.4-1/png/pngread.c ****     * a local row buffer.  The output will be GA, RGBA or BGRA and must be
3983:fltk-1.3.4-1/png/pngread.c ****     * converted to G, RGB or BGR as appropriate.  The 'local_row' member of the
3984:fltk-1.3.4-1/png/pngread.c ****     * display acts as a flag.
3985:fltk-1.3.4-1/png/pngread.c ****     */
3986:fltk-1.3.4-1/png/pngread.c ****    {
3987:fltk-1.3.4-1/png/pngread.c ****       png_voidp first_row = display->buffer;
3988:fltk-1.3.4-1/png/pngread.c ****       ptrdiff_t row_bytes = display->row_stride;
 5892              		.loc 1 3988 0
 5893 031f 49636D10 		movslq	16(%r13), %rbp
 5894              	.LVL708:
3989:fltk-1.3.4-1/png/pngread.c **** 
3990:fltk-1.3.4-1/png/pngread.c ****       if (linear != 0)
3991:fltk-1.3.4-1/png/pngread.c ****          row_bytes *= 2;
 5895              		.loc 1 3991 0
 5896 0323 8B4C240C 		movl	12(%rsp), %ecx
3987:fltk-1.3.4-1/png/pngread.c ****       ptrdiff_t row_bytes = display->row_stride;
 5897              		.loc 1 3987 0
 5898 0327 498B4508 		movq	8(%r13), %rax
 5899              	.LVL709:
 5900              		.loc 1 3991 0
 5901 032b 85C9     		testl	%ecx, %ecx
 5902 032d 488D542D 		leaq	(%rbp,%rbp), %rdx
 5902      00
 5903 0332 480F45EA 		cmovne	%rdx, %rbp
 5904              	.LVL710:
3992:fltk-1.3.4-1/png/pngread.c **** 
3993:fltk-1.3.4-1/png/pngread.c ****       /* The following expression is designed to work correctly whether it gives
3994:fltk-1.3.4-1/png/pngread.c ****        * a signed or an unsigned result.
3995:fltk-1.3.4-1/png/pngread.c ****        */
3996:fltk-1.3.4-1/png/pngread.c ****       if (row_bytes < 0)
 5905              		.loc 1 3996 0
 5906 0336 4885ED   		testq	%rbp, %rbp
 5907 0339 0F88B101 		js	.L749
 5907      0000
3997:fltk-1.3.4-1/png/pngread.c ****       {
3998:fltk-1.3.4-1/png/pngread.c ****          char *ptr = png_voidcast(char*, first_row);
3999:fltk-1.3.4-1/png/pngread.c ****          ptr += (image->height-1) * (-row_bytes);
4000:fltk-1.3.4-1/png/pngread.c ****          first_row = png_voidcast(png_voidp, ptr);
4001:fltk-1.3.4-1/png/pngread.c ****       }
4002:fltk-1.3.4-1/png/pngread.c **** 
4003:fltk-1.3.4-1/png/pngread.c ****       display->first_row = first_row;
 5908              		.loc 1 4003 0
 5909 033f 49894530 		movq	%rax, 48(%r13)
 5910              	.LBE278:
4004:fltk-1.3.4-1/png/pngread.c ****       display->row_bytes = row_bytes;
4005:fltk-1.3.4-1/png/pngread.c ****    }
4006:fltk-1.3.4-1/png/pngread.c **** 
4007:fltk-1.3.4-1/png/pngread.c ****    if (do_local_compose != 0)
 5911              		.loc 1 4007 0
 5912 0343 8B442418 		movl	24(%rsp), %eax
 5913              	.LVL711:
 5914              	.LBB281:
4004:fltk-1.3.4-1/png/pngread.c ****       display->row_bytes = row_bytes;
 5915              		.loc 1 4004 0
 5916 0347 49896D38 		movq	%rbp, 56(%r13)
 5917              	.LBE281:
 5918              		.loc 1 4007 0
 5919 034b 85C0     		testl	%eax, %eax
 5920 034d 0F85BF01 		jne	.L750
 5920      0000
 5921              	.LVL712:
 5922              	.L654:
4008:fltk-1.3.4-1/png/pngread.c ****    {
4009:fltk-1.3.4-1/png/pngread.c ****       int result;
4010:fltk-1.3.4-1/png/pngread.c ****       png_voidp row = png_malloc(png_ptr, png_get_rowbytes(png_ptr, info_ptr));
4011:fltk-1.3.4-1/png/pngread.c **** 
4012:fltk-1.3.4-1/png/pngread.c ****       display->local_row = row;
4013:fltk-1.3.4-1/png/pngread.c ****       result = png_safe_execute(image, png_image_read_composite, display);
4014:fltk-1.3.4-1/png/pngread.c ****       display->local_row = NULL;
4015:fltk-1.3.4-1/png/pngread.c ****       png_free(png_ptr, row);
4016:fltk-1.3.4-1/png/pngread.c **** 
4017:fltk-1.3.4-1/png/pngread.c ****       return result;
4018:fltk-1.3.4-1/png/pngread.c ****    }
4019:fltk-1.3.4-1/png/pngread.c **** 
4020:fltk-1.3.4-1/png/pngread.c ****    else if (do_local_background == 2)
 5923              		.loc 1 4020 0
 5924 0353 4183FF02 		cmpl	$2, %r15d
 5925 0357 0F849402 		je	.L751
 5925      0000
 5926              	.LVL713:
 5927              	.L713:
 5928              	.LBB282:
4021:fltk-1.3.4-1/png/pngread.c ****    {
4022:fltk-1.3.4-1/png/pngread.c ****       int result;
4023:fltk-1.3.4-1/png/pngread.c ****       png_voidp row = png_malloc(png_ptr, png_get_rowbytes(png_ptr, info_ptr));
4024:fltk-1.3.4-1/png/pngread.c **** 
4025:fltk-1.3.4-1/png/pngread.c ****       display->local_row = row;
4026:fltk-1.3.4-1/png/pngread.c ****       result = png_safe_execute(image, png_image_read_background, display);
4027:fltk-1.3.4-1/png/pngread.c ****       display->local_row = NULL;
4028:fltk-1.3.4-1/png/pngread.c ****       png_free(png_ptr, row);
4029:fltk-1.3.4-1/png/pngread.c **** 
4030:fltk-1.3.4-1/png/pngread.c ****       return result;
4031:fltk-1.3.4-1/png/pngread.c ****    }
4032:fltk-1.3.4-1/png/pngread.c **** 
4033:fltk-1.3.4-1/png/pngread.c ****    else
4034:fltk-1.3.4-1/png/pngread.c ****    {
4035:fltk-1.3.4-1/png/pngread.c ****       png_alloc_size_t row_bytes = display->row_bytes;
4036:fltk-1.3.4-1/png/pngread.c **** 
4037:fltk-1.3.4-1/png/pngread.c ****       while (--passes >= 0)
 5929              		.loc 1 4037 0
 5930 035d 836C2408 		subl	$1, 8(%rsp)
 5930      01
 5931              	.LVL714:
 5932 0362 7831     		js	.L752
 5933              		.p2align 4,,10
 5934 0364 0F1F4000 		.p2align 3
 5935              	.L661:
 5936              	.LVL715:
 5937              	.LBB283:
4038:fltk-1.3.4-1/png/pngread.c ****       {
4039:fltk-1.3.4-1/png/pngread.c ****          png_uint_32      y = image->height;
4040:fltk-1.3.4-1/png/pngread.c ****          png_bytep        row = png_voidcast(png_bytep, display->first_row);
4041:fltk-1.3.4-1/png/pngread.c **** 
4042:fltk-1.3.4-1/png/pngread.c ****          while (y-- > 0)
 5938              		.loc 1 4042 0
 5939 0368 458B7E10 		movl	16(%r14), %r15d
4040:fltk-1.3.4-1/png/pngread.c **** 
 5940              		.loc 1 4040 0
 5941 036c 4D8B6530 		movq	48(%r13), %r12
 5942              	.LVL716:
 5943              		.loc 1 4042 0
 5944 0370 4585FF   		testl	%r15d, %r15d
 5945 0373 74E8     		je	.L713
 5946              	.LVL717:
 5947              		.p2align 4,,10
 5948 0375 0F1F00   		.p2align 3
 5949              	.L711:
4043:fltk-1.3.4-1/png/pngread.c ****          {
4044:fltk-1.3.4-1/png/pngread.c ****             png_read_row(png_ptr, row, NULL);
 5950              		.loc 1 4044 0
 5951 0378 31D2     		xorl	%edx, %edx
 5952 037a 4C89E6   		movq	%r12, %rsi
 5953 037d 4889DF   		movq	%rbx, %rdi
 5954 0380 E8000000 		call	png_read_row
 5954      00
 5955              	.LVL718:
4045:fltk-1.3.4-1/png/pngread.c ****             row += row_bytes;
 5956              		.loc 1 4045 0
 5957 0385 4901EC   		addq	%rbp, %r12
 5958              	.LVL719:
4042:fltk-1.3.4-1/png/pngread.c ****          {
 5959              		.loc 1 4042 0
 5960 0388 4183EF01 		subl	$1, %r15d
 5961              	.LVL720:
 5962 038c 75EA     		jne	.L711
 5963              	.LVL721:
 5964              	.LBE283:
4037:fltk-1.3.4-1/png/pngread.c ****       {
 5965              		.loc 1 4037 0
 5966 038e 836C2408 		subl	$1, 8(%rsp)
 5966      01
 5967              	.LVL722:
 5968 0393 79D3     		jns	.L661
 5969              	.LVL723:
 5970              	.L752:
4046:fltk-1.3.4-1/png/pngread.c ****          }
4047:fltk-1.3.4-1/png/pngread.c ****       }
4048:fltk-1.3.4-1/png/pngread.c **** 
4049:fltk-1.3.4-1/png/pngread.c ****       return 1;
 5971              		.loc 1 4049 0
 5972 0395 B8010000 		movl	$1, %eax
 5972      00
 5973              	.L655:
 5974              	.LBE282:
4050:fltk-1.3.4-1/png/pngread.c ****    }
4051:fltk-1.3.4-1/png/pngread.c **** }
 5975              		.loc 1 4051 0
 5976 039a 488B4C24 		movq	56(%rsp), %rcx
 5976      38
 5977 039f 6448330C 		xorq	%fs:40, %rcx
 5977      25280000 
 5977      00
 5978 03a8 0F85B302 		jne	.L753
 5978      0000
 5979 03ae 4883C448 		addq	$72, %rsp
 5980              		.cfi_remember_state
 5981              		.cfi_def_cfa_offset 56
 5982 03b2 5B       		popq	%rbx
 5983              		.cfi_def_cfa_offset 48
 5984              	.LVL724:
 5985 03b3 5D       		popq	%rbp
 5986              		.cfi_def_cfa_offset 40
 5987 03b4 415C     		popq	%r12
 5988              		.cfi_def_cfa_offset 32
 5989 03b6 415D     		popq	%r13
 5990              		.cfi_def_cfa_offset 24
 5991              	.LVL725:
 5992 03b8 415E     		popq	%r14
 5993              		.cfi_def_cfa_offset 16
 5994              	.LVL726:
 5995 03ba 415F     		popq	%r15
 5996              		.cfi_def_cfa_offset 8
 5997 03bc C3       		ret
 5998              	.LVL727:
 5999              	.L644:
 6000              		.cfi_restore_state
 6001              	.LBB284:
3947:fltk-1.3.4-1/png/pngread.c ****          png_error(png_ptr, "png_image_read: alpha channel lost");
 6002              		.loc 1 3947 0
 6003 03bd 8B742418 		movl	24(%rsp), %esi
 6004 03c1 85F6     		testl	%esi, %esi
 6005 03c3 0F8413FF 		je	.L645
 6005      FFFF
3948:fltk-1.3.4-1/png/pngread.c **** 
 6006              		.loc 1 3948 0
 6007 03c9 BE000000 		movl	$.LC49, %esi
 6007      00
 6008 03ce 4889DF   		movq	%rbx, %rdi
 6009 03d1 E8000000 		call	png_error
 6009      00
 6010              	.LVL728:
 6011 03d6 662E0F1F 		.p2align 4,,10
 6011      84000000 
 6011      0000
 6012              		.p2align 3
 6013              	.L612:
 6014              	.LBE284:
 6015              	.LBB285:
 6016              	.LBB266:
 6017              	.LBB262:
1346:fltk-1.3.4-1/png/pngread.c **** 
 6018              		.loc 1 1346 0
 6019 03e0 4489C6   		movl	%r8d, %esi
 6020 03e3 83CE01   		orl	$1, %esi
 6021 03e6 6685D2   		testw	%dx, %dx
 6022 03e9 440F45C6 		cmovne	%esi, %r8d
 6023              	.LVL729:
 6024 03ed E97EFCFF 		jmp	.L613
 6024      FF
 6025              	.LVL730:
 6026              	.L744:
 6027              	.LBE262:
 6028              	.LBE266:
 6029              	.LBE285:
3925:fltk-1.3.4-1/png/pngread.c **** 
 6030              		.loc 1 3925 0
 6031 03f2 4889DF   		movq	%rbx, %rdi
 6032 03f5 E8000000 		call	png_set_interlace_handling
 6032      00
 6033              	.LVL731:
 6034 03fa 89442408 		movl	%eax, 8(%rsp)
 6035              	.LVL732:
 6036 03fe E9A9FEFF 		jmp	.L642
 6036      FF
 6037              	.LVL733:
 6038              	.L738:
 6039              	.LBB286:
3757:fltk-1.3.4-1/png/pngread.c **** 
 6040              		.loc 1 3757 0
 6041 0403 E8000000 		call	png_set_expand_16
 6041      00
 6042              	.LVL734:
 6043 0408 448B5424 		movl	24(%rsp), %r10d
 6043      18
 6044 040d 448B4424 		movl	28(%rsp), %r8d
 6044      1C
 6045 0412 E948FDFF 		jmp	.L627
 6045      FF
 6046              	.LVL735:
 6047              	.L745:
 6048              	.LBE286:
 6049              	.LBB287:
3941:fltk-1.3.4-1/png/pngread.c ****                (format & PNG_FORMAT_FLAG_ALPHA) != 0)
 6050              		.loc 1 3941 0
 6051 0417 4183FF02 		cmpl	$2, %r15d
 6052 041b 0F849401 		je	.L754
 6052      0000
 6053              	.L646:
3943:fltk-1.3.4-1/png/pngread.c ****          }
 6054              		.loc 1 3943 0
 6055 0421 83C801   		orl	$1, %eax
 6056              	.LVL736:
 6057 0424 E9B3FEFF 		jmp	.L645
 6057      FF
 6058              	.LVL737:
 6059              	.L741:
 6060              	.LBE287:
 6061              	.LBB288:
3889:fltk-1.3.4-1/png/pngread.c ****                   png_set_swap_alpha(png_ptr);
 6062              		.loc 1 3889 0
 6063 0429 4183FF02 		cmpl	$2, %r15d
 6064 042d 0F843AFE 		je	.L639
 6064      FFFF
3890:fltk-1.3.4-1/png/pngread.c ****             }
 6065              		.loc 1 3890 0
 6066 0433 4889DF   		movq	%rbx, %rdi
 6067 0436 E8000000 		call	png_set_swap_alpha
 6067      00
 6068              	.LVL738:
 6069 043b E92DFEFF 		jmp	.L639
 6069      FF
 6070              	.LVL739:
 6071              	.L737:
 6072              	.LBB267:
3740:fltk-1.3.4-1/png/pngread.c ****                PNG_FP_1) != 0 && png_gamma_significant(gtest) == 0)
 6073              		.loc 1 3740 0
 6074 0440 8B93D804 		movl	1240(%rbx), %edx
 6074      0000
 6075 0446 8B742408 		movl	8(%rsp), %esi
 6076 044a 488D7C24 		leaq	32(%rsp), %rdi
 6076      20
 6077 044f B9A08601 		movl	$100000, %ecx
 6077      00
 6078 0454 44894424 		movl	%r8d, 28(%rsp)
 6078      1C
 6079 0459 44895424 		movl	%r10d, 24(%rsp)
 6079      18
 6080 045e E8000000 		call	png_muldiv
 6080      00
 6081              	.LVL740:
 6082 0463 85C0     		testl	%eax, %eax
 6083 0465 448B5424 		movl	24(%rsp), %r10d
 6083      18
 6084 046a 448B4424 		movl	28(%rsp), %r8d
 6084      1C
 6085 046f 0F854F01 		jne	.L622
 6085      0000
 6086              	.LVL741:
 6087              	.L624:
3744:fltk-1.3.4-1/png/pngread.c ****          {
 6088              		.loc 1 3744 0
 6089 0475 4183FA01 		cmpl	$1, %r10d
3746:fltk-1.3.4-1/png/pngread.c ****             mode = PNG_ALPHA_PNG; /* prevent libpng doing it */
 6090              		.loc 1 3746 0
 6091 0479 41BF0200 		movl	$2, %r15d
 6091      0000
3747:fltk-1.3.4-1/png/pngread.c ****          }
 6092              		.loc 1 3747 0
 6093 047f 41BA0000 		movl	$0, %r10d
 6093      0000
3744:fltk-1.3.4-1/png/pngread.c ****          {
 6094              		.loc 1 3744 0
 6095 0485 0F84A6FC 		je	.L621
 6095      FFFF
 6096 048b 41BF0100 		movl	$1, %r15d
 6096      0000
 6097              	.LVL742:
 6098 0491 E99BFCFF 		jmp	.L621
 6098      FF
 6099              	.LVL743:
 6100              	.L742:
 6101              	.LBE267:
 6102              	.LBB268:
3908:fltk-1.3.4-1/png/pngread.c ****       }
 6103              		.loc 1 3908 0
 6104 0496 4889DF   		movq	%rbx, %rdi
 6105 0499 E8000000 		call	png_set_swap
 6105      00
 6106              	.LVL744:
 6107 049e E9DCFDFF 		jmp	.L640
 6107      FF
 6108              	.LVL745:
 6109              	.L746:
 6110              	.LBE268:
 6111              	.LBE288:
 6112              	.LBB289:
3962:fltk-1.3.4-1/png/pngread.c ****          }
 6113              		.loc 1 3962 0
 6114 04a3 89C1     		movl	%eax, %ecx
 6115 04a5 83C920   		orl	$32, %ecx
 6116 04a8 40F6C520 		testb	$32, %bpl
 6117 04ac 0F45C1   		cmovne	%ecx, %eax
 6118              	.LVL746:
3965:fltk-1.3.4-1/png/pngread.c ****             ((png_ptr->transformations & PNG_ADD_ALPHA) != 0 &&
 6119              		.loc 1 3965 0
 6120 04af 81E20000 		andl	$131072, %edx
 6120      0200
 6121 04b5 7524     		jne	.L662
 6122 04b7 48BA8000 		movabsq	$72057594037928064, %rdx
 6122      00000000 
 6122      0001
 6123 04c1 48239330 		andq	304(%rbx), %rdx
 6123      010000
 6124 04c8 48B90000 		movabsq	$72057594037927936, %rcx
 6124      00000000 
 6124      0001
 6125 04d2 4839CA   		cmpq	%rcx, %rdx
 6126 04d5 0F853CFE 		jne	.L666
 6126      FFFF
 6127              	.L662:
3970:fltk-1.3.4-1/png/pngread.c **** 
 6128              		.loc 1 3970 0
 6129 04db BE000000 		movl	$.LC50, %esi
 6129      00
 6130 04e0 4889DF   		movq	%rbx, %rdi
 6131 04e3 E8000000 		call	png_error
 6131      00
 6132              	.LVL747:
 6133 04e8 0F1F8400 		.p2align 4,,10
 6133      00000000 
 6134              		.p2align 3
 6135              	.L749:
 6136              	.LBE289:
 6137              	.LBB290:
 6138              	.LBB279:
3999:fltk-1.3.4-1/png/pngread.c ****          first_row = png_voidcast(png_voidp, ptr);
 6139              		.loc 1 3999 0
 6140 04f0 418B5610 		movl	16(%r14), %edx
 6141              	.LBE279:
4004:fltk-1.3.4-1/png/pngread.c ****    }
 6142              		.loc 1 4004 0
 6143 04f4 49896D38 		movq	%rbp, 56(%r13)
 6144              	.LBB280:
3999:fltk-1.3.4-1/png/pngread.c ****          first_row = png_voidcast(png_voidp, ptr);
 6145              		.loc 1 3999 0
 6146 04f8 83EA01   		subl	$1, %edx
 6147 04fb 480FAFD5 		imulq	%rbp, %rdx
 6148 04ff 4829D0   		subq	%rdx, %rax
 6149              	.LVL748:
 6150              	.LBE280:
4003:fltk-1.3.4-1/png/pngread.c ****       display->row_bytes = row_bytes;
 6151              		.loc 1 4003 0
 6152 0502 49894530 		movq	%rax, 48(%r13)
 6153              	.LBE290:
4007:fltk-1.3.4-1/png/pngread.c ****    {
 6154              		.loc 1 4007 0
 6155 0506 8B442418 		movl	24(%rsp), %eax
 6156              	.LVL749:
 6157 050a 85C0     		testl	%eax, %eax
 6158 050c 0F8441FE 		je	.L654
 6158      FFFF
 6159              	.LVL750:
 6160              	.L750:
 6161              	.LBB291:
4010:fltk-1.3.4-1/png/pngread.c **** 
 6162              		.loc 1 4010 0
 6163 0512 488B7424 		movq	16(%rsp), %rsi
 6163      10
 6164 0517 4889DF   		movq	%rbx, %rdi
 6165 051a E8000000 		call	png_get_rowbytes
 6165      00
 6166              	.LVL751:
 6167 051f 4889DF   		movq	%rbx, %rdi
 6168 0522 4889C6   		movq	%rax, %rsi
 6169 0525 E8000000 		call	png_malloc
 6169      00
 6170              	.LVL752:
4013:fltk-1.3.4-1/png/pngread.c ****       display->local_row = NULL;
 6171              		.loc 1 4013 0
 6172 052a 4C89EA   		movq	%r13, %rdx
4010:fltk-1.3.4-1/png/pngread.c **** 
 6173              		.loc 1 4010 0
 6174 052d 4989C4   		movq	%rax, %r12
 6175              	.LVL753:
4012:fltk-1.3.4-1/png/pngread.c ****       result = png_safe_execute(image, png_image_read_composite, display);
 6176              		.loc 1 4012 0
 6177 0530 49894528 		movq	%rax, 40(%r13)
4013:fltk-1.3.4-1/png/pngread.c ****       display->local_row = NULL;
 6178              		.loc 1 4013 0
 6179 0534 BE000000 		movl	$png_image_read_composite, %esi
 6179      00
 6180              	.LVL754:
 6181              	.L733:
 6182              	.LBE291:
 6183              	.LBB292:
4026:fltk-1.3.4-1/png/pngread.c ****       display->local_row = NULL;
 6184              		.loc 1 4026 0
 6185 0539 4C89F7   		movq	%r14, %rdi
 6186 053c E8000000 		call	png_safe_execute
 6186      00
 6187              	.LVL755:
4027:fltk-1.3.4-1/png/pngread.c ****       png_free(png_ptr, row);
 6188              		.loc 1 4027 0
 6189 0541 49C74528 		movq	$0, 40(%r13)
 6189      00000000 
4026:fltk-1.3.4-1/png/pngread.c ****       display->local_row = NULL;
 6190              		.loc 1 4026 0
 6191 0549 89C5     		movl	%eax, %ebp
 6192              	.LVL756:
4028:fltk-1.3.4-1/png/pngread.c **** 
 6193              		.loc 1 4028 0
 6194 054b 4C89E6   		movq	%r12, %rsi
 6195 054e 4889DF   		movq	%rbx, %rdi
 6196 0551 E8000000 		call	png_free
 6196      00
 6197              	.LVL757:
4030:fltk-1.3.4-1/png/pngread.c ****    }
 6198              		.loc 1 4030 0
 6199 0556 89E8     		movl	%ebp, %eax
 6200 0558 E93DFEFF 		jmp	.L655
 6200      FF
 6201              	.LVL758:
 6202              	.L747:
 6203              	.LBE292:
 6204              	.LBB293:
3965:fltk-1.3.4-1/png/pngread.c ****             ((png_ptr->transformations & PNG_ADD_ALPHA) != 0 &&
 6205              		.loc 1 3965 0
 6206 055d 48BA8000 		movabsq	$72057594037928064, %rdx
 6206      00000000 
 6206      0001
 6207 0567 48239330 		andq	304(%rbx), %rdx
 6207      010000
 6208 056e 48B90000 		movabsq	$72057594037927936, %rcx
 6208      00000000 
 6208      0001
 6209 0578 4839CA   		cmpq	%rcx, %rdx
 6210 057b 0F8493FD 		je	.L664
 6210      FFFF
 6211 0581 E991FDFF 		jmp	.L666
 6211      FF
 6212              	.LVL759:
 6213              	.L736:
 6214              	.LBE293:
 6215              	.LBB294:
3661:fltk-1.3.4-1/png/pngread.c **** 
 6216              		.loc 1 3661 0
 6217 0586 4889DF   		movq	%rbx, %rdi
 6218 0589 44894424 		movl	%r8d, 8(%rsp)
 6218      08
 6219 058e E8000000 		call	png_set_gray_to_rgb
 6219      00
 6220              	.LVL760:
 6221 0593 448B4424 		movl	8(%rsp), %r8d
 6221      08
 6222 0598 E931FBFF 		jmp	.L618
 6222      FF
 6223              	.LVL761:
 6224              	.L740:
3867:fltk-1.3.4-1/png/pngread.c **** 
 6225              		.loc 1 3867 0
 6226 059d 4889DF   		movq	%rbx, %rdi
 6227 05a0 E8000000 		call	png_set_bgr
 6227      00
 6228              	.LVL762:
 6229 05a5 E9ACFCFF 		jmp	.L636
 6229      FF
 6230              	.LVL763:
 6231              	.L675:
3780:fltk-1.3.4-1/png/pngread.c **** 
 6232              		.loc 1 3780 0
 6233 05aa 41BF0200 		movl	$2, %r15d
 6233      0000
 6234              	.LVL764:
 6235 05b0 E97BFCFF 		jmp	.L630
 6235      FF
 6236              	.LVL765:
 6237              	.L754:
 6238              	.LBE294:
 6239              	.LBB295:
3941:fltk-1.3.4-1/png/pngread.c ****                (format & PNG_FORMAT_FLAG_ALPHA) != 0)
 6240              		.loc 1 3941 0 discriminator 1
 6241 05b5 40F6C501 		testb	$1, %bpl
 6242 05b9 0F841DFD 		je	.L645
 6242      FFFF
 6243 05bf E95DFEFF 		jmp	.L646
 6243      FF
 6244              	.LVL766:
 6245              	.L622:
 6246              	.LBE295:
 6247              	.LBB296:
 6248              	.LBB269:
3741:fltk-1.3.4-1/png/pngread.c ****             do_local_background = 0;
 6249              		.loc 1 3741 0
 6250 05c4 8B7C2420 		movl	32(%rsp), %edi
 6251 05c8 44894424 		movl	%r8d, 28(%rsp)
 6251      1C
3742:fltk-1.3.4-1/png/pngread.c **** 
 6252              		.loc 1 3742 0
 6253 05cd 4531FF   		xorl	%r15d, %r15d
 6254              	.LVL767:
 6255 05d0 44895424 		movl	%r10d, 24(%rsp)
 6255      18
 6256              	.LVL768:
3741:fltk-1.3.4-1/png/pngread.c ****             do_local_background = 0;
 6257              		.loc 1 3741 0
 6258 05d5 E8000000 		call	png_gamma_significant
 6258      00
 6259              	.LVL769:
 6260 05da 85C0     		testl	%eax, %eax
 6261 05dc 448B5424 		movl	24(%rsp), %r10d
 6261      18
 6262 05e1 448B4424 		movl	28(%rsp), %r8d
 6262      1C
 6263 05e6 0F8445FB 		je	.L621
 6263      FFFF
 6264 05ec E984FEFF 		jmp	.L624
 6264      FF
 6265              	.LVL770:
 6266              	.L751:
 6267              	.LBE269:
 6268              	.LBE296:
 6269              	.LBB297:
4023:fltk-1.3.4-1/png/pngread.c **** 
 6270              		.loc 1 4023 0
 6271 05f1 488B7424 		movq	16(%rsp), %rsi
 6271      10
 6272 05f6 4889DF   		movq	%rbx, %rdi
 6273 05f9 E8000000 		call	png_get_rowbytes
 6273      00
 6274              	.LVL771:
 6275 05fe 4889DF   		movq	%rbx, %rdi
 6276 0601 4889C6   		movq	%rax, %rsi
 6277 0604 E8000000 		call	png_malloc
 6277      00
 6278              	.LVL772:
4026:fltk-1.3.4-1/png/pngread.c ****       display->local_row = NULL;
 6279              		.loc 1 4026 0
 6280 0609 4C89EA   		movq	%r13, %rdx
4023:fltk-1.3.4-1/png/pngread.c **** 
 6281              		.loc 1 4023 0
 6282 060c 4989C4   		movq	%rax, %r12
 6283              	.LVL773:
4025:fltk-1.3.4-1/png/pngread.c ****       result = png_safe_execute(image, png_image_read_background, display);
 6284              		.loc 1 4025 0
 6285 060f 49894528 		movq	%rax, 40(%r13)
4026:fltk-1.3.4-1/png/pngread.c ****       display->local_row = NULL;
 6286              		.loc 1 4026 0
 6287 0613 BE000000 		movl	$png_image_read_background, %esi
 6287      00
 6288 0618 E91CFFFF 		jmp	.L733
 6288      FF
 6289              	.LVL774:
 6290              	.L739:
 6291              	.LBE297:
 6292              	.LBB298:
3784:fltk-1.3.4-1/png/pngread.c **** 
 6293              		.loc 1 3784 0
 6294 061d 4889DF   		movq	%rbx, %rdi
 6295 0620 E8000000 		call	png_set_strip_alpha
 6295      00
 6296              	.LVL775:
 6297              	.LBE298:
3638:fltk-1.3.4-1/png/pngread.c ****    int do_local_background = 0; /* to avoid double gamma correction bug */
 6298              		.loc 1 3638 0
 6299 0625 44897C24 		movl	%r15d, 24(%rsp)
 6299      18
 6300              	.LBB299:
 6301 062a 448B5424 		movl	28(%rsp), %r10d
 6301      1C
 6302 062f E9FCFBFF 		jmp	.L630
 6302      FF
 6303              	.L676:
3816:fltk-1.3.4-1/png/pngread.c ****             }
 6304              		.loc 1 3816 0
 6305 0634 41BA0200 		movl	$2, %r10d
 6305      0000
3810:fltk-1.3.4-1/png/pngread.c ****                /* This leaves the alpha channel in the output, so it has to be
 6306              		.loc 1 3810 0
 6307 063a C7442418 		movl	$1, 24(%rsp)
 6307      01000000 
 6308 0642 E9E9FBFF 		jmp	.L630
 6308      FF
 6309              	.LVL776:
 6310              	.L748:
 6311              	.LBE299:
 6312              	.LBB300:
3978:fltk-1.3.4-1/png/pngread.c ****    }
 6313              		.loc 1 3978 0
 6314 0647 BE000000 		movl	$.LC51, %esi
 6314      00
 6315 064c 4889DF   		movq	%rbx, %rdi
 6316 064f E8000000 		call	png_error
 6316      00
 6317              	.LVL777:
 6318              	.L743:
 6319              	.LBE300:
 6320              	.LBB301:
3913:fltk-1.3.4-1/png/pngread.c ****    }
 6321              		.loc 1 3913 0
 6322 0654 BE000000 		movl	$.LC48, %esi
 6322      00
 6323 0659 4889DF   		movq	%rbx, %rdi
 6324 065c E8000000 		call	png_error
 6324      00
 6325              	.LVL778:
 6326              	.L753:
 6327              	.LBE301:
 6328              		.loc 1 4051 0
 6329 0661 E8000000 		call	__stack_chk_fail
 6329      00
 6330              	.LVL779:
 6331              		.cfi_endproc
 6332              	.LFE92:
 6334              		.section	.text.unlikely.png_image_read_direct
 6335              	.LCOLDE52:
 6336              		.section	.text.png_image_read_direct
 6337              	.LHOTE52:
 6338              		.section	.rodata.str1.1
 6339              	.LC53:
 6340 00f7 6C6F7374 		.string	"lost rgb to gray"
 6340      20726762 
 6340      20746F20 
 6340      67726179 
 6340      00
 6341              	.LC54:
 6342 0108 756E6578 		.string	"unexpected compose"
 6342      70656374 
 6342      65642063 
 6342      6F6D706F 
 6342      736500
 6343              	.LC55:
 6344 011b 6C6F7374 		.string	"lost/gained channels"
 6344      2F676169 
 6344      6E656420 
 6344      6368616E 
 6344      6E656C73 
 6345              		.section	.rodata.str1.8
 6346              		.align 8
 6347              	.LC56:
 6348 0418 756E6578 		.string	"unexpected 8-bit transformation"
 6348      70656374 
 6348      65642038 
 6348      2D626974 
 6348      20747261 
 6349              		.section	.rodata.str1.1
 6350              	.LC57:
 6351 0130 756E6B6E 		.string	"unknown interlace type"
 6351      6F776E20 
 6351      696E7465 
 6351      726C6163 
 6351      65207479 
 6352              	.LC58:
 6353 0147 756E6578 		.string	"unexpected bit depth"
 6353      70656374 
 6353      65642062 
 6353      69742064 
 6353      65707468 
 6354              		.section	.text.unlikely.png_image_read_background,"ax",@progbits
 6355              	.LCOLDB59:
 6356              		.section	.text.png_image_read_background,"ax",@progbits
 6357              	.LHOTB59:
 6358              		.p2align 4,,15
 6360              	png_image_read_background:
 6361              	.LFB91:
3350:fltk-1.3.4-1/png/pngread.c ****    png_image_read_control *display = png_voidcast(png_image_read_control*,
 6362              		.loc 1 3350 0
 6363              		.cfi_startproc
 6364              	.LVL780:
 6365 0000 4157     		pushq	%r15
 6366              		.cfi_def_cfa_offset 16
 6367              		.cfi_offset 15, -16
 6368 0002 4156     		pushq	%r14
 6369              		.cfi_def_cfa_offset 24
 6370              		.cfi_offset 14, -24
 6371 0004 4155     		pushq	%r13
 6372              		.cfi_def_cfa_offset 32
 6373              		.cfi_offset 13, -32
 6374 0006 4154     		pushq	%r12
 6375              		.cfi_def_cfa_offset 40
 6376              		.cfi_offset 12, -40
 6377 0008 55       		pushq	%rbp
 6378              		.cfi_def_cfa_offset 48
 6379              		.cfi_offset 6, -48
 6380 0009 53       		pushq	%rbx
 6381              		.cfi_def_cfa_offset 56
 6382              		.cfi_offset 3, -56
 6383 000a 4883EC68 		subq	$104, %rsp
 6384              		.cfi_def_cfa_offset 160
3353:fltk-1.3.4-1/png/pngread.c ****    png_structrp png_ptr = image->opaque->png_ptr;
 6385              		.loc 1 3353 0
 6386 000e 488B1F   		movq	(%rdi), %rbx
 6387              	.LVL781:
3350:fltk-1.3.4-1/png/pngread.c ****    png_image_read_control *display = png_voidcast(png_image_read_control*,
 6388              		.loc 1 3350 0
 6389 0011 48897C24 		movq	%rdi, 32(%rsp)
 6389      20
3354:fltk-1.3.4-1/png/pngread.c ****    png_inforp info_ptr = image->opaque->info_ptr;
 6390              		.loc 1 3354 0
 6391 0016 488B03   		movq	(%rbx), %rax
 6392 0019 488B30   		movq	(%rax), %rsi
3355:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 height = image->height;
 6393              		.loc 1 3355 0
 6394 001c 488B6808 		movq	8(%rax), %rbp
3356:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 width = image->width;
 6395              		.loc 1 3356 0
 6396 0020 8B4310   		movl	16(%rbx), %eax
3354:fltk-1.3.4-1/png/pngread.c ****    png_inforp info_ptr = image->opaque->info_ptr;
 6397              		.loc 1 3354 0
 6398 0023 48897424 		movq	%rsi, 8(%rsp)
 6398      08
 6399              	.LVL782:
3356:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 width = image->width;
 6400              		.loc 1 3356 0
 6401 0028 89442450 		movl	%eax, 80(%rsp)
 6402              	.LVL783:
3357:fltk-1.3.4-1/png/pngread.c ****    int pass, passes;
 6403              		.loc 1 3357 0
 6404 002c 8B430C   		movl	12(%rbx), %eax
 6405              	.LVL784:
 6406 002f 8944245C 		movl	%eax, 92(%rsp)
 6407              	.LVL785:
3365:fltk-1.3.4-1/png/pngread.c ****       png_error(png_ptr, "lost rgb to gray");
 6408              		.loc 1 3365 0
 6409 0033 8B863401 		movl	308(%rsi), %eax
 6409      0000
 6410              	.LVL786:
 6411 0039 A9000060 		testl	$6291456, %eax
 6411      00
 6412 003e 0F848406 		je	.L838
 6412      0000
3368:fltk-1.3.4-1/png/pngread.c ****       png_error(png_ptr, "unexpected compose");
 6413              		.loc 1 3368 0
 6414 0044 A880     		testb	$-128, %al
 6415 0046 0F856D06 		jne	.L839
 6415      0000
3371:fltk-1.3.4-1/png/pngread.c ****       png_error(png_ptr, "lost/gained channels");
 6416              		.loc 1 3371 0
 6417 004c 488B7C24 		movq	8(%rsp), %rdi
 6417      08
 6418              	.LVL787:
 6419 0051 4889EE   		movq	%rbp, %rsi
 6420              	.LVL788:
 6421 0054 E8000000 		call	png_get_channels
 6421      00
 6422              	.LVL789:
 6423 0059 3C02     		cmpb	$2, %al
 6424 005b 0F854906 		jne	.L840
 6424      0000
3375:fltk-1.3.4-1/png/pngread.c ****       (image->format & PNG_FORMAT_FLAG_ALPHA) != 0)
 6425              		.loc 1 3375 0
 6426 0061 8B4314   		movl	20(%rbx), %eax
 6427 0064 83E005   		andl	$5, %eax
 6428 0067 83F801   		cmpl	$1, %eax
 6429 006a 0F842B06 		je	.L841
 6429      0000
3379:fltk-1.3.4-1/png/pngread.c ****    {
 6430              		.loc 1 3379 0
 6431 0070 488B4424 		movq	8(%rsp), %rax
 6431      08
 6432 0075 0FB68074 		movzbl	628(%rax), %eax
 6432      020000
 6433 007c 84C0     		testb	%al, %al
 6434 007e 743C     		je	.L801
 6435 0080 3C01     		cmpb	$1, %al
 6436 0082 7529     		jne	.L833
3398:fltk-1.3.4-1/png/pngread.c ****    {
 6437              		.loc 1 3398 0
 6438 0084 0FB65524 		movzbl	36(%rbp), %edx
3386:fltk-1.3.4-1/png/pngread.c ****          break;
 6439              		.loc 1 3386 0
 6440 0088 C7442454 		movl	$7, 84(%rsp)
 6440      07000000 
 6441              	.LVL790:
3398:fltk-1.3.4-1/png/pngread.c ****    {
 6442              		.loc 1 3398 0
 6443 0090 80FA08   		cmpb	$8, %dl
 6444 0093 7438     		je	.L764
 6445              	.L842:
 6446 0095 80FA10   		cmpb	$16, %dl
 6447 0098 0F844B03 		je	.L765
 6447      0000
3401:fltk-1.3.4-1/png/pngread.c ****          break;
 6448              		.loc 1 3401 0
 6449 009e 488B7C24 		movq	8(%rsp), %rdi
 6449      08
 6450 00a3 BE000000 		movl	$.LC58, %esi
 6450      00
 6451 00a8 E8000000 		call	png_error
 6451      00
 6452              	.LVL791:
 6453              	.L833:
3390:fltk-1.3.4-1/png/pngread.c ****    }
 6454              		.loc 1 3390 0
 6455 00ad 488B7C24 		movq	8(%rsp), %rdi
 6455      08
 6456 00b2 BE000000 		movl	$.LC57, %esi
 6456      00
 6457 00b7 E8000000 		call	png_error
 6457      00
 6458              	.LVL792:
 6459              	.L801:
3398:fltk-1.3.4-1/png/pngread.c ****    {
 6460              		.loc 1 3398 0
 6461 00bc 0FB65524 		movzbl	36(%rbp), %edx
3382:fltk-1.3.4-1/png/pngread.c ****          break;
 6462              		.loc 1 3382 0
 6463 00c0 C7442454 		movl	$1, 84(%rsp)
 6463      01000000 
 6464              	.LVL793:
3398:fltk-1.3.4-1/png/pngread.c ****    {
 6465              		.loc 1 3398 0
 6466 00c8 80FA08   		cmpb	$8, %dl
 6467 00cb 75C8     		jne	.L842
 6468              	.L764:
 6469              	.LBB302:
3411:fltk-1.3.4-1/png/pngread.c ****             ptrdiff_t step_row = display->row_bytes;
 6470              		.loc 1 3411 0
 6471 00cd 488B5C24 		movq	32(%rsp), %rbx
 6471      20
 6472              	.LVL794:
3412:fltk-1.3.4-1/png/pngread.c **** 
 6473              		.loc 1 3412 0
 6474 00d2 31D2     		xorl	%edx, %edx
 6475              	.LBB303:
3421:fltk-1.3.4-1/png/pngread.c ****                {
 6476              		.loc 1 3421 0
 6477 00d4 3C01     		cmpb	$1, %al
 6478              	.LBE303:
3411:fltk-1.3.4-1/png/pngread.c ****             ptrdiff_t step_row = display->row_bytes;
 6479              		.loc 1 3411 0
 6480 00d6 488B7330 		movq	48(%rbx), %rsi
3412:fltk-1.3.4-1/png/pngread.c **** 
 6481              		.loc 1 3412 0
 6482 00da 488B5B38 		movq	56(%rbx), %rbx
 6483 00de 48895C24 		movq	%rbx, 56(%rsp)
 6483      38
 6484 00e3 8B5C245C 		movl	92(%rsp), %ebx
3411:fltk-1.3.4-1/png/pngread.c ****             ptrdiff_t step_row = display->row_bytes;
 6485              		.loc 1 3411 0
 6486 00e7 48897424 		movq	%rsi, 48(%rsp)
 6486      30
 6487              	.LVL795:
 6488 00ec 48895C24 		movq	%rbx, 64(%rsp)
 6488      40
 6489              	.LVL796:
 6490              	.LBB320:
3421:fltk-1.3.4-1/png/pngread.c ****                {
 6491              		.loc 1 3421 0
 6492 00f1 0F845101 		je	.L766
 6492      0000
 6493              	.LVL797:
 6494              	.L844:
 6495 00f7 8D4201   		leal	1(%rdx), %eax
3435:fltk-1.3.4-1/png/pngread.c ****                   startx = 0;
 6496              		.loc 1 3435 0
 6497 00fa 4531ED   		xorl	%r13d, %r13d
3437:fltk-1.3.4-1/png/pngread.c ****                }
 6498              		.loc 1 3437 0
 6499 00fd C7442428 		movl	$1, 40(%rsp)
 6499      01000000 
 6500 0105 41BF0100 		movl	$1, %r15d
 6500      0000
3436:fltk-1.3.4-1/png/pngread.c ****                   stepx = stepy = 1;
 6501              		.loc 1 3436 0
 6502 010b 31F6     		xorl	%esi, %esi
 6503 010d 89442458 		movl	%eax, 88(%rsp)
 6504              	.L767:
 6505              	.LVL798:
3440:fltk-1.3.4-1/png/pngread.c ****                {
 6506              		.loc 1 3440 0
 6507 0111 488B4424 		movq	32(%rsp), %rax
 6507      20
 6508 0116 488B4020 		movq	32(%rax), %rax
 6509 011a 4885C0   		testq	%rax, %rax
 6510 011d 0F84CA01 		je	.L843
 6510      0000
 6511              	.LVL799:
 6512              	.L770:
 6513              	.LBB304:
3484:fltk-1.3.4-1/png/pngread.c ****                   png_uint_16 background = png_sRGB_table[background8];
 6514              		.loc 1 3484 0
 6515 0123 0FB64001 		movzbl	1(%rax), %eax
3487:fltk-1.3.4-1/png/pngread.c ****                   {
 6516              		.loc 1 3487 0
 6517 0127 443B6C24 		cmpl	80(%rsp), %r13d
 6517      50
3484:fltk-1.3.4-1/png/pngread.c ****                   png_uint_16 background = png_sRGB_table[background8];
 6518              		.loc 1 3484 0
 6519 012c 4989C6   		movq	%rax, %r14
 6520              	.LVL800:
3485:fltk-1.3.4-1/png/pngread.c **** 
 6521              		.loc 1 3485 0
 6522 012f 440FB794 		movzwl	png_sRGB_table(%rax,%rax), %r10d
 6522      00000000 
 6522      00
 6523              	.LVL801:
3487:fltk-1.3.4-1/png/pngread.c ****                   {
 6524              		.loc 1 3487 0
 6525 0138 0F83E800 		jnb	.L769
 6525      0000
 6526              	.LBB305:
 6527              	.LBB306:
 6528              	.LBB307:
3510:fltk-1.3.4-1/png/pngread.c ****                               component = PNG_sRGB_FROM_LINEAR(component);
 6529              		.loc 1 3510 0
 6530 013e 410FB7EA 		movzwl	%r10w, %ebp
 6531 0142 89F0     		movl	%esi, %eax
 6532              	.LVL802:
 6533 0144 4489F3   		movl	%r14d, %ebx
 6534 0147 48894424 		movq	%rax, 72(%rsp)
 6534      48
 6535 014c 4189EE   		movl	%ebp, %r14d
 6536              	.LVL803:
 6537 014f 41BCFF00 		movl	$255, %r12d
 6537      0000
 6538 0155 4489ED   		movl	%r13d, %ebp
 6539 0158 4D89FD   		movq	%r15, %r13
 6540              	.LVL804:
 6541 015b 0F1F4400 		.p2align 4,,10
 6541      00
 6542              		.p2align 3
 6543              	.L778:
 6544              	.LBE307:
 6545              	.LBE306:
3491:fltk-1.3.4-1/png/pngread.c ****                      png_const_bytep end_row = outrow + width;
 6546              		.loc 1 3491 0
 6547 0160 89EE     		movl	%ebp, %esi
3489:fltk-1.3.4-1/png/pngread.c ****                         display->local_row);
 6548              		.loc 1 3489 0
 6549 0162 488B4424 		movq	32(%rsp), %rax
 6549      20
3495:fltk-1.3.4-1/png/pngread.c **** 
 6550              		.loc 1 3495 0
 6551 0167 488B7C24 		movq	8(%rsp), %rdi
 6551      08
3491:fltk-1.3.4-1/png/pngread.c ****                      png_const_bytep end_row = outrow + width;
 6552              		.loc 1 3491 0
 6553 016c 480FAF74 		imulq	56(%rsp), %rsi
 6553      2438
3495:fltk-1.3.4-1/png/pngread.c **** 
 6554              		.loc 1 3495 0
 6555 0172 31D2     		xorl	%edx, %edx
3489:fltk-1.3.4-1/png/pngread.c ****                         display->local_row);
 6556              		.loc 1 3489 0
 6557 0174 4C8B7828 		movq	40(%rax), %r15
 6558              	.LVL805:
3491:fltk-1.3.4-1/png/pngread.c ****                      png_const_bytep end_row = outrow + width;
 6559              		.loc 1 3491 0
 6560 0178 488B4424 		movq	48(%rsp), %rax
 6560      30
 6561 017d 4801F0   		addq	%rsi, %rax
 6562              	.LVL806:
3492:fltk-1.3.4-1/png/pngread.c **** 
 6563              		.loc 1 3492 0
 6564 0180 488B7424 		movq	64(%rsp), %rsi
 6564      40
 6565 0185 48894424 		movq	%rax, 24(%rsp)
 6565      18
 6566 018a 488D0C30 		leaq	(%rax,%rsi), %rcx
3495:fltk-1.3.4-1/png/pngread.c **** 
 6567              		.loc 1 3495 0
 6568 018e 4C89FE   		movq	%r15, %rsi
3492:fltk-1.3.4-1/png/pngread.c **** 
 6569              		.loc 1 3492 0
 6570 0191 48894C24 		movq	%rcx, 16(%rsp)
 6570      10
 6571              	.LVL807:
3495:fltk-1.3.4-1/png/pngread.c **** 
 6572              		.loc 1 3495 0
 6573 0196 E8000000 		call	png_read_row
 6573      00
 6574              	.LVL808:
3498:fltk-1.3.4-1/png/pngread.c ****                      for (; outrow < end_row; outrow += stepx)
 6575              		.loc 1 3498 0
 6576 019b 488B7424 		movq	72(%rsp), %rsi
 6576      48
 6577 01a0 488B4424 		movq	24(%rsp), %rax
 6577      18
3499:fltk-1.3.4-1/png/pngread.c ****                      {
 6578              		.loc 1 3499 0
 6579 01a5 488B4C24 		movq	16(%rsp), %rcx
 6579      10
3498:fltk-1.3.4-1/png/pngread.c ****                      for (; outrow < end_row; outrow += stepx)
 6580              		.loc 1 3498 0
 6581 01aa 4801C6   		addq	%rax, %rsi
 6582              	.LVL809:
3499:fltk-1.3.4-1/png/pngread.c ****                      {
 6583              		.loc 1 3499 0
 6584 01ad 4839F1   		cmpq	%rsi, %rcx
 6585 01b0 7666     		jbe	.L783
 6586              		.p2align 4,,10
 6587 01b2 660F1F44 		.p2align 3
 6587      0000
 6588              	.L819:
 6589              	.LBB309:
3501:fltk-1.3.4-1/png/pngread.c **** 
 6590              		.loc 1 3501 0
 6591 01b8 410FB647 		movzbl	1(%r15), %eax
 6591      01
 6592              	.LVL810:
3503:fltk-1.3.4-1/png/pngread.c ****                         {
 6593              		.loc 1 3503 0
 6594 01bd 84C0     		testb	%al, %al
 6595 01bf 0F845B04 		je	.L779
 6595      0000
 6596              	.LBB308:
3507:fltk-1.3.4-1/png/pngread.c ****                            {
 6597              		.loc 1 3507 0
 6598 01c5 3CFF     		cmpb	$-1, %al
3505:fltk-1.3.4-1/png/pngread.c **** 
 6599              		.loc 1 3505 0
 6600 01c7 410FB617 		movzbl	(%r15), %edx
 6601              	.LVL811:
3507:fltk-1.3.4-1/png/pngread.c ****                            {
 6602              		.loc 1 3507 0
 6603 01cb 743D     		je	.L780
3509:fltk-1.3.4-1/png/pngread.c ****                               component += background * (255-alpha);
 6604              		.loc 1 3509 0
 6605 01cd 0FB79412 		movzwl	png_sRGB_table(%rdx,%rdx), %edx
 6605      00000000 
 6606              	.LVL812:
 6607 01d5 89D7     		movl	%edx, %edi
3510:fltk-1.3.4-1/png/pngread.c ****                               component = PNG_sRGB_FROM_LINEAR(component);
 6608              		.loc 1 3510 0
 6609 01d7 4489E2   		movl	%r12d, %edx
 6610 01da 29C2     		subl	%eax, %edx
3509:fltk-1.3.4-1/png/pngread.c ****                               component += background * (255-alpha);
 6611              		.loc 1 3509 0
 6612 01dc 0FAFF8   		imull	%eax, %edi
 6613              	.LVL813:
3510:fltk-1.3.4-1/png/pngread.c ****                               component = PNG_sRGB_FROM_LINEAR(component);
 6614              		.loc 1 3510 0
 6615 01df 410FAFD6 		imull	%r14d, %edx
 6616 01e3 01FA     		addl	%edi, %edx
 6617              	.LVL814:
3511:fltk-1.3.4-1/png/pngread.c ****                            }
 6618              		.loc 1 3511 0
 6619 01e5 89D7     		movl	%edx, %edi
 6620 01e7 81E2FF7F 		andl	$32767, %edx
 6620      0000
 6621              	.LVL815:
 6622 01ed C1EF0F   		shrl	$15, %edi
 6623              	.LVL816:
 6624 01f0 0FB68700 		movzbl	png_sRGB_delta(%rdi), %eax
 6624      000000
 6625              	.LVL817:
 6626 01f7 0FAFD0   		imull	%eax, %edx
 6627 01fa 0FB7843F 		movzwl	png_sRGB_base(%rdi,%rdi), %eax
 6627      00000000 
 6628 0202 C1EA0C   		shrl	$12, %edx
 6629 0205 01C2     		addl	%eax, %edx
 6630 0207 0FB6D6   		movzbl	%dh, %edx
 6631              	.LVL818:
 6632              	.L780:
3514:fltk-1.3.4-1/png/pngread.c ****                         }
 6633              		.loc 1 3514 0
 6634 020a 8816     		movb	%dl, (%rsi)
 6635              	.LVL819:
 6636              	.L781:
 6637              	.LBE308:
 6638              	.LBE309:
3499:fltk-1.3.4-1/png/pngread.c ****                      {
 6639              		.loc 1 3499 0
 6640 020c 4C01EE   		addq	%r13, %rsi
 6641              	.LVL820:
 6642              	.LBB310:
3520:fltk-1.3.4-1/png/pngread.c ****                      }
 6643              		.loc 1 3520 0
 6644 020f 4983C702 		addq	$2, %r15
 6645              	.LVL821:
 6646              	.LBE310:
3499:fltk-1.3.4-1/png/pngread.c ****                      {
 6647              		.loc 1 3499 0
 6648 0213 4839F1   		cmpq	%rsi, %rcx
 6649 0216 77A0     		ja	.L819
 6650              	.L783:
 6651              	.LBE305:
3487:fltk-1.3.4-1/png/pngread.c ****                   {
 6652              		.loc 1 3487 0
 6653 0218 036C2428 		addl	40(%rsp), %ebp
 6654              	.LVL822:
 6655 021c 396C2450 		cmpl	%ebp, 80(%rsp)
 6656 0220 0F873AFF 		ja	.L778
 6656      FFFF
 6657              	.LVL823:
 6658              	.L769:
 6659 0226 8B542458 		movl	88(%rsp), %edx
 6660              	.LBE304:
 6661              	.LBE320:
3414:fltk-1.3.4-1/png/pngread.c ****             {
 6662              		.loc 1 3414 0 discriminator 2
 6663 022a 39542454 		cmpl	%edx, 84(%rsp)
 6664 022e 0F8EA101 		jle	.L811
 6664      0000
 6665              	.L845:
 6666 0234 488B4424 		movq	8(%rsp), %rax
 6666      08
 6667 0239 0FB68074 		movzbl	628(%rax), %eax
 6667      020000
 6668              	.LVL824:
 6669              	.LBB321:
3421:fltk-1.3.4-1/png/pngread.c ****                {
 6670              		.loc 1 3421 0
 6671 0240 3C01     		cmpb	$1, %al
 6672 0242 0F85AFFE 		jne	.L844
 6672      FFFF
 6673              	.LVL825:
 6674              	.L766:
3424:fltk-1.3.4-1/png/pngread.c ****                      continue;
 6675              		.loc 1 3424 0
 6676 0248 83FA01   		cmpl	$1, %edx
 6677 024b 0F861104 		jbe	.L768
 6677      0000
 6678 0251 8D4201   		leal	1(%rdx), %eax
3424:fltk-1.3.4-1/png/pngread.c ****                      continue;
 6679              		.loc 1 3424 0 is_stmt 0 discriminator 1
 6680 0254 41B80700 		movl	$7, %r8d
 6680      0000
 6681 025a 89D7     		movl	%edx, %edi
 6682 025c 4129D0   		subl	%edx, %r8d
 6683 025f 83E701   		andl	$1, %edi
 6684 0262 B9030000 		movl	$3, %ecx
 6684      00
 6685 0267 89442458 		movl	%eax, 88(%rsp)
 6686 026b D1F8     		sarl	%eax
 6687 026d 41D1F8   		sarl	%r8d
 6688 0270 29C1     		subl	%eax, %ecx
 6689 0272 89FE     		movl	%edi, %esi
 6690 0274 B8010000 		movl	$1, %eax
 6690      00
 6691 0279 D3E6     		sall	%cl, %esi
 6692 027b 4489C1   		movl	%r8d, %ecx
 6693 027e D3E0     		sall	%cl, %eax
 6694 0280 83E801   		subl	$1, %eax
 6695 0283 29F0     		subl	%esi, %eax
 6696 0285 0344245C 		addl	92(%rsp), %eax
 6697              	.L799:
3424:fltk-1.3.4-1/png/pngread.c ****                      continue;
 6698              		.loc 1 3424 0 discriminator 8
 6699 0289 4489C1   		movl	%r8d, %ecx
 6700 028c D3E8     		shrl	%cl, %eax
 6701 028e 85C0     		testl	%eax, %eax
 6702 0290 7494     		je	.L769
3428:fltk-1.3.4-1/png/pngread.c ****                   y = PNG_PASS_START_ROW(pass);
 6703              		.loc 1 3428 0 is_stmt 1
 6704 0292 B9070000 		movl	$7, %ecx
 6704      00
 6705 0297 41BF0100 		movl	$1, %r15d
 6705      0000
3429:fltk-1.3.4-1/png/pngread.c ****                   stepy = PNG_PASS_ROW_OFFSET(pass);
 6706              		.loc 1 3429 0
 6707 029d 89D0     		movl	%edx, %eax
3428:fltk-1.3.4-1/png/pngread.c ****                   y = PNG_PASS_START_ROW(pass);
 6708              		.loc 1 3428 0
 6709 029f 29D1     		subl	%edx, %ecx
3429:fltk-1.3.4-1/png/pngread.c ****                   stepy = PNG_PASS_ROW_OFFSET(pass);
 6710              		.loc 1 3429 0
 6711 02a1 D1F8     		sarl	%eax
 6712 02a3 83F701   		xorl	$1, %edi
3428:fltk-1.3.4-1/png/pngread.c ****                   y = PNG_PASS_START_ROW(pass);
 6713              		.loc 1 3428 0
 6714 02a6 D1F9     		sarl	%ecx
3427:fltk-1.3.4-1/png/pngread.c ****                   stepx = PNG_PASS_COL_OFFSET(pass);
 6715              		.loc 1 3427 0
 6716 02a8 83E607   		andl	$7, %esi
 6717              	.LVL826:
3428:fltk-1.3.4-1/png/pngread.c ****                   y = PNG_PASS_START_ROW(pass);
 6718              		.loc 1 3428 0
 6719 02ab 41D3E7   		sall	%cl, %r15d
 6720              	.LVL827:
3429:fltk-1.3.4-1/png/pngread.c ****                   stepy = PNG_PASS_ROW_OFFSET(pass);
 6721              		.loc 1 3429 0
 6722 02ae B9030000 		movl	$3, %ecx
 6722      00
 6723 02b3 29C1     		subl	%eax, %ecx
 6724 02b5 D3E7     		sall	%cl, %edi
 6725 02b7 83E707   		andl	$7, %edi
3430:fltk-1.3.4-1/png/pngread.c ****                }
 6726              		.loc 1 3430 0
 6727 02ba 83FA02   		cmpl	$2, %edx
3429:fltk-1.3.4-1/png/pngread.c ****                   stepy = PNG_PASS_ROW_OFFSET(pass);
 6728              		.loc 1 3429 0
 6729 02bd 4189FD   		movl	%edi, %r13d
 6730              	.LVL828:
3430:fltk-1.3.4-1/png/pngread.c ****                }
 6731              		.loc 1 3430 0
 6732 02c0 0F86C803 		jbe	.L802
 6732      0000
3440:fltk-1.3.4-1/png/pngread.c ****                {
 6733              		.loc 1 3440 0 discriminator 1
 6734 02c6 488B4424 		movq	32(%rsp), %rax
 6734      20
3430:fltk-1.3.4-1/png/pngread.c ****                }
 6735              		.loc 1 3430 0 discriminator 1
 6736 02cb 83EA01   		subl	$1, %edx
 6737              	.LVL829:
 6738 02ce 41BC0800 		movl	$8, %r12d
 6738      0000
 6739 02d4 89D1     		movl	%edx, %ecx
 6740 02d6 D1F9     		sarl	%ecx
3440:fltk-1.3.4-1/png/pngread.c ****                {
 6741              		.loc 1 3440 0 discriminator 1
 6742 02d8 488B4020 		movq	32(%rax), %rax
3430:fltk-1.3.4-1/png/pngread.c ****                }
 6743              		.loc 1 3430 0 discriminator 1
 6744 02dc 41D3FC   		sarl	%cl, %r12d
 6745 02df 44896424 		movl	%r12d, 40(%rsp)
 6745      28
 6746              	.LVL830:
3440:fltk-1.3.4-1/png/pngread.c ****                {
 6747              		.loc 1 3440 0 discriminator 1
 6748 02e4 4885C0   		testq	%rax, %rax
 6749 02e7 0F8536FE 		jne	.L770
 6749      FFFF
 6750              	.LVL831:
 6751              	.L843:
3442:fltk-1.3.4-1/png/pngread.c ****                   {
 6752              		.loc 1 3442 0 discriminator 1
 6753 02ed 443B6C24 		cmpl	80(%rsp), %r13d
 6753      50
 6754 02f2 0F832EFF 		jnb	.L769
 6754      FFFF
 6755 02f8 4589FC   		movl	%r15d, %r12d
 6756 02fb 89F3     		movl	%esi, %ebx
 6757 02fd 4489ED   		movl	%r13d, %ebp
 6758 0300 4D89E6   		movq	%r12, %r14
 6759              	.LVL832:
 6760              		.p2align 4,,10
 6761 0303 0F1F4400 		.p2align 3
 6761      00
 6762              	.L772:
 6763              	.LBB313:
3444:fltk-1.3.4-1/png/pngread.c ****                         display->local_row);
 6764              		.loc 1 3444 0
 6765 0308 488B4424 		movq	32(%rsp), %rax
 6765      20
3446:fltk-1.3.4-1/png/pngread.c ****                      png_const_bytep end_row = outrow + width;
 6766              		.loc 1 3446 0
 6767 030d 488B7424 		movq	48(%rsp), %rsi
 6767      30
3450:fltk-1.3.4-1/png/pngread.c **** 
 6768              		.loc 1 3450 0
 6769 0312 31D2     		xorl	%edx, %edx
 6770 0314 488B7C24 		movq	8(%rsp), %rdi
 6770      08
3444:fltk-1.3.4-1/png/pngread.c ****                         display->local_row);
 6771              		.loc 1 3444 0
 6772 0319 4C8B6828 		movq	40(%rax), %r13
 6773              	.LVL833:
3446:fltk-1.3.4-1/png/pngread.c ****                      png_const_bytep end_row = outrow + width;
 6774              		.loc 1 3446 0
 6775 031d 89E8     		movl	%ebp, %eax
 6776 031f 480FAF44 		imulq	56(%rsp), %rax
 6776      2438
 6777 0325 4C8D2406 		leaq	(%rsi,%rax), %r12
 6778              	.LVL834:
3447:fltk-1.3.4-1/png/pngread.c **** 
 6779              		.loc 1 3447 0
 6780 0329 488B4424 		movq	64(%rsp), %rax
 6780      40
3450:fltk-1.3.4-1/png/pngread.c **** 
 6781              		.loc 1 3450 0
 6782 032e 4C89EE   		movq	%r13, %rsi
3447:fltk-1.3.4-1/png/pngread.c **** 
 6783              		.loc 1 3447 0
 6784 0331 4D8D3C04 		leaq	(%r12,%rax), %r15
 6785              	.LVL835:
3450:fltk-1.3.4-1/png/pngread.c **** 
 6786              		.loc 1 3450 0
 6787 0335 E8000000 		call	png_read_row
 6787      00
 6788              	.LVL836:
3453:fltk-1.3.4-1/png/pngread.c ****                      for (; outrow < end_row; outrow += stepx)
 6789              		.loc 1 3453 0
 6790 033a 498D341C 		leaq	(%r12,%rbx), %rsi
 6791              	.LVL837:
 6792              	.LBB314:
 6793              	.LBB315:
3469:fltk-1.3.4-1/png/pngread.c ****                                  (255-alpha);
 6794              		.loc 1 3469 0
 6795 033e BFFF0000 		movl	$255, %edi
 6795      00
 6796              	.LBE315:
 6797              	.LBE314:
3454:fltk-1.3.4-1/png/pngread.c ****                      {
 6798              		.loc 1 3454 0
 6799 0343 4939F7   		cmpq	%rsi, %r15
 6800 0346 7671     		jbe	.L776
 6801 0348 0F1F8400 		.p2align 4,,10
 6801      00000000 
 6802              		.p2align 3
 6803              	.L818:
 6804              	.LBB317:
3456:fltk-1.3.4-1/png/pngread.c **** 
 6805              		.loc 1 3456 0
 6806 0350 410FB645 		movzbl	1(%r13), %eax
 6806      01
 6807              	.LVL838:
3458:fltk-1.3.4-1/png/pngread.c ****                         {
 6808              		.loc 1 3458 0
 6809 0355 84C0     		testb	%al, %al
 6810 0357 7454     		je	.L773
 6811              	.LBB316:
3462:fltk-1.3.4-1/png/pngread.c ****                            {
 6812              		.loc 1 3462 0
 6813 0359 3CFF     		cmpb	$-1, %al
3460:fltk-1.3.4-1/png/pngread.c **** 
 6814              		.loc 1 3460 0
 6815 035b 410FB655 		movzbl	0(%r13), %edx
 6815      00
 6816              	.LVL839:
3462:fltk-1.3.4-1/png/pngread.c ****                            {
 6817              		.loc 1 3462 0
 6818 0360 7449     		je	.L774
3468:fltk-1.3.4-1/png/pngread.c ****                               component += png_sRGB_table[outrow[0]] *
 6819              		.loc 1 3468 0
 6820 0362 0FB79412 		movzwl	png_sRGB_table(%rdx,%rdx), %edx
 6820      00000000 
 6821              	.LVL840:
3469:fltk-1.3.4-1/png/pngread.c ****                                  (255-alpha);
 6822              		.loc 1 3469 0
 6823 036a 4189F9   		movl	%edi, %r9d
 6824 036d 4129C1   		subl	%eax, %r9d
3468:fltk-1.3.4-1/png/pngread.c ****                               component += png_sRGB_table[outrow[0]] *
 6825              		.loc 1 3468 0
 6826 0370 89D1     		movl	%edx, %ecx
3469:fltk-1.3.4-1/png/pngread.c ****                                  (255-alpha);
 6827              		.loc 1 3469 0
 6828 0372 0FB616   		movzbl	(%rsi), %edx
3468:fltk-1.3.4-1/png/pngread.c ****                               component += png_sRGB_table[outrow[0]] *
 6829              		.loc 1 3468 0
 6830 0375 0FAFC8   		imull	%eax, %ecx
 6831              	.LVL841:
3469:fltk-1.3.4-1/png/pngread.c ****                                  (255-alpha);
 6832              		.loc 1 3469 0
 6833 0378 0FB79412 		movzwl	png_sRGB_table(%rdx,%rdx), %edx
 6833      00000000 
 6834 0380 410FAFD1 		imull	%r9d, %edx
 6835 0384 01CA     		addl	%ecx, %edx
 6836              	.LVL842:
3471:fltk-1.3.4-1/png/pngread.c ****                            }
 6837              		.loc 1 3471 0
 6838 0386 89D1     		movl	%edx, %ecx
 6839 0388 81E2FF7F 		andl	$32767, %edx
 6839      0000
 6840              	.LVL843:
 6841 038e C1E90F   		shrl	$15, %ecx
 6842              	.LVL844:
 6843 0391 0FB68100 		movzbl	png_sRGB_delta(%rcx), %eax
 6843      000000
 6844              	.LVL845:
 6845 0398 0FAFD0   		imull	%eax, %edx
 6846 039b 0FB78409 		movzwl	png_sRGB_base(%rcx,%rcx), %eax
 6846      00000000 
 6847 03a3 C1EA0C   		shrl	$12, %edx
 6848 03a6 01C2     		addl	%eax, %edx
 6849 03a8 0FB6D6   		movzbl	%dh, %edx
 6850              	.LVL846:
 6851              	.L774:
3474:fltk-1.3.4-1/png/pngread.c ****                         }
 6852              		.loc 1 3474 0
 6853 03ab 8816     		movb	%dl, (%rsi)
 6854              	.LVL847:
 6855              	.L773:
 6856              	.LBE316:
 6857              	.LBE317:
3454:fltk-1.3.4-1/png/pngread.c ****                      {
 6858              		.loc 1 3454 0
 6859 03ad 4C01F6   		addq	%r14, %rsi
 6860              	.LVL848:
 6861              	.LBB318:
3477:fltk-1.3.4-1/png/pngread.c ****                      }
 6862              		.loc 1 3477 0
 6863 03b0 4983C502 		addq	$2, %r13
 6864              	.LVL849:
 6865              	.LBE318:
3454:fltk-1.3.4-1/png/pngread.c ****                      {
 6866              		.loc 1 3454 0
 6867 03b4 4939F7   		cmpq	%rsi, %r15
 6868 03b7 7797     		ja	.L818
 6869              	.L776:
 6870              	.LBE313:
3442:fltk-1.3.4-1/png/pngread.c ****                   {
 6871              		.loc 1 3442 0
 6872 03b9 036C2428 		addl	40(%rsp), %ebp
 6873              	.LVL850:
 6874 03bd 396C2450 		cmpl	%ebp, 80(%rsp)
 6875 03c1 0F8741FF 		ja	.L772
 6875      FFFF
 6876 03c7 8B542458 		movl	88(%rsp), %edx
 6877              	.LBE321:
3414:fltk-1.3.4-1/png/pngread.c ****             {
 6878              		.loc 1 3414 0
 6879 03cb 39542454 		cmpl	%edx, 84(%rsp)
 6880 03cf 0F8F5FFE 		jg	.L845
 6880      FFFF
 6881              	.LVL851:
 6882              	.L811:
 6883              	.LBE302:
3624:fltk-1.3.4-1/png/pngread.c **** 
 6884              		.loc 1 3624 0
 6885 03d5 4883C468 		addq	$104, %rsp
 6886              		.cfi_remember_state
 6887              		.cfi_def_cfa_offset 56
 6888 03d9 B8010000 		movl	$1, %eax
 6888      00
 6889 03de 5B       		popq	%rbx
 6890              		.cfi_def_cfa_offset 48
 6891 03df 5D       		popq	%rbp
 6892              		.cfi_def_cfa_offset 40
 6893 03e0 415C     		popq	%r12
 6894              		.cfi_def_cfa_offset 32
 6895 03e2 415D     		popq	%r13
 6896              		.cfi_def_cfa_offset 24
 6897 03e4 415E     		popq	%r14
 6898              		.cfi_def_cfa_offset 16
 6899 03e6 415F     		popq	%r15
 6900              		.cfi_def_cfa_offset 8
 6901 03e8 C3       		ret
 6902              	.LVL852:
 6903              	.L765:
 6904              		.cfi_restore_state
 6905              	.LBB324:
3536:fltk-1.3.4-1/png/pngread.c ****                display->first_row);
 6906              		.loc 1 3536 0
 6907 03e9 488B7424 		movq	32(%rsp), %rsi
 6907      20
 6908 03ee 4531F6   		xorl	%r14d, %r14d
 6909 03f1 488B4E30 		movq	48(%rsi), %rcx
3541:fltk-1.3.4-1/png/pngread.c ****             int preserve_alpha = (image->format & PNG_FORMAT_FLAG_ALPHA) != 0;
 6910              		.loc 1 3541 0
 6911 03f5 488B5638 		movq	56(%rsi), %rdx
 6912              	.LBB325:
3562:fltk-1.3.4-1/png/pngread.c ****                      continue;
 6913              		.loc 1 3562 0
 6914 03f9 4889F5   		movq	%rsi, %rbp
 6915              	.LVL853:
 6916              	.LBE325:
3536:fltk-1.3.4-1/png/pngread.c ****                display->first_row);
 6917              		.loc 1 3536 0
 6918 03fc 48894C24 		movq	%rcx, 56(%rsp)
 6918      38
 6919              	.LVL854:
3541:fltk-1.3.4-1/png/pngread.c ****             int preserve_alpha = (image->format & PNG_FORMAT_FLAG_ALPHA) != 0;
 6920              		.loc 1 3541 0
 6921 0401 4889D1   		movq	%rdx, %rcx
 6922              	.LVL855:
 6923 0404 48C1E93F 		shrq	$63, %rcx
 6924 0408 4801CA   		addq	%rcx, %rdx
 6925 040b 8B4C245C 		movl	92(%rsp), %ecx
 6926 040f 48D1FA   		sarq	%rdx
 6927 0412 48895424 		movq	%rdx, 64(%rsp)
 6927      40
 6928              	.LVL856:
3542:fltk-1.3.4-1/png/pngread.c ****             unsigned int outchannels = 1+preserve_alpha;
 6929              		.loc 1 3542 0
 6930 0417 8B5314   		movl	20(%rbx), %edx
 6931              	.LVL857:
 6932 041a 4189D7   		movl	%edx, %r15d
 6933 041d 83E221   		andl	$33, %edx
 6934 0420 4183E701 		andl	$1, %r15d
 6935              	.LVL858:
3543:fltk-1.3.4-1/png/pngread.c ****             int swap_alpha = 0;
 6936              		.loc 1 3543 0
 6937 0424 418D5F01 		leal	1(%r15), %ebx
 6938              	.LVL859:
 6939 0428 0FAFCB   		imull	%ebx, %ecx
 6940 042b 83FA21   		cmpl	$33, %edx
 6941 042e 895C2458 		movl	%ebx, 88(%rsp)
 6942              	.LVL860:
 6943 0432 410F94C6 		sete	%r14b
 6944              	.LBB334:
 6945              	.LBB326:
 6946              	.LBB327:
3613:fltk-1.3.4-1/png/pngread.c **** 
 6947              		.loc 1 3613 0
 6948 0436 4531C0   		xorl	%r8d, %r8d
 6949 0439 4D01F6   		addq	%r14, %r14
 6950 043c 83FA21   		cmpl	$33, %edx
 6951 043f 488D1C09 		leaq	(%rcx,%rcx), %rbx
 6952              	.LVL861:
 6953 0443 410F95C0 		setne	%r8b
 6954 0447 4531D2   		xorl	%r10d, %r10d
 6955              	.LVL862:
 6956              	.LBE327:
 6957              	.LBE326:
3559:fltk-1.3.4-1/png/pngread.c ****                {
 6958              		.loc 1 3559 0
 6959 044a 3C01     		cmpb	$1, %al
 6960              	.LBB332:
 6961              	.LBB328:
3613:fltk-1.3.4-1/png/pngread.c **** 
 6962              		.loc 1 3613 0
 6963 044c 4F8D2400 		leaq	(%r8,%r8), %r12
 6964 0450 48895C24 		movq	%rbx, 48(%rsp)
 6964      30
 6965              	.LBE328:
 6966              	.LBE332:
3559:fltk-1.3.4-1/png/pngread.c ****                {
 6967              		.loc 1 3559 0
 6968 0455 0F842D01 		je	.L786
 6968      0000
 6969              	.LVL863:
 6970              	.L847:
3575:fltk-1.3.4-1/png/pngread.c ****                   stepy = 1;
 6971              		.loc 1 3575 0
 6972 045b 8B542458 		movl	88(%rsp), %edx
 6973 045f 418D4201 		leal	1(%r10), %eax
3573:fltk-1.3.4-1/png/pngread.c ****                   startx = 0;
 6974              		.loc 1 3573 0
 6975 0463 4531C0   		xorl	%r8d, %r8d
3576:fltk-1.3.4-1/png/pngread.c ****                }
 6976              		.loc 1 3576 0
 6977 0466 C7442420 		movl	$1, 32(%rsp)
 6977      01000000 
 6978 046e 89442448 		movl	%eax, 72(%rsp)
3574:fltk-1.3.4-1/png/pngread.c ****                   stepx = outchannels;
 6979              		.loc 1 3574 0
 6980 0472 31C0     		xorl	%eax, %eax
 6981              	.L787:
 6982              	.LVL864:
3579:fltk-1.3.4-1/png/pngread.c ****                {
 6983              		.loc 1 3579 0 discriminator 1
 6984 0474 44394424 		cmpl	%r8d, 80(%rsp)
 6984      50
 6985 0479 0F86E500 		jbe	.L789
 6985      0000
 6986 047f 4801C0   		addq	%rax, %rax
 6987 0482 4C8D2C12 		leaq	(%rdx,%rdx), %r13
 6988 0486 4989EA   		movq	%rbp, %r10
 6989              	.LVL865:
 6990 0489 48894424 		movq	%rax, 40(%rsp)
 6990      28
 6991 048e 4C89E0   		movq	%r12, %rax
 6992 0491 4489C5   		movl	%r8d, %ebp
 6993 0494 4D89EC   		movq	%r13, %r12
 6994 0497 4989C5   		movq	%rax, %r13
 6995              	.LVL866:
 6996 049a 660F1F44 		.p2align 4,,10
 6996      0000
 6997              		.p2align 3
 6998              	.L791:
 6999              	.LBB333:
3582:fltk-1.3.4-1/png/pngread.c ****                   png_uint_16p end_row = outrow + width * outchannels;
 7000              		.loc 1 3582 0
 7001 04a0 89E8     		movl	%ebp, %eax
 7002 04a2 488B5C24 		movq	56(%rsp), %rbx
 7002      38
3586:fltk-1.3.4-1/png/pngread.c ****                      display->local_row), NULL);
 7003              		.loc 1 3586 0
 7004 04a7 498B7228 		movq	40(%r10), %rsi
3582:fltk-1.3.4-1/png/pngread.c ****                   png_uint_16p end_row = outrow + width * outchannels;
 7005              		.loc 1 3582 0
 7006 04ab 480FAF44 		imulq	64(%rsp), %rax
 7006      2440
3586:fltk-1.3.4-1/png/pngread.c ****                      display->local_row), NULL);
 7007              		.loc 1 3586 0
 7008 04b1 488B7C24 		movq	8(%rsp), %rdi
 7008      08
 7009 04b6 31D2     		xorl	%edx, %edx
 7010 04b8 4C895424 		movq	%r10, 16(%rsp)
 7010      10
3582:fltk-1.3.4-1/png/pngread.c ****                   png_uint_16p end_row = outrow + width * outchannels;
 7011              		.loc 1 3582 0
 7012 04bd 488D0443 		leaq	(%rbx,%rax,2), %rax
 7013              	.LVL867:
3583:fltk-1.3.4-1/png/pngread.c **** 
 7014              		.loc 1 3583 0
 7015 04c1 488B5C24 		movq	48(%rsp), %rbx
 7015      30
 7016 04c6 48894424 		movq	%rax, 24(%rsp)
 7016      18
 7017 04cb 4801C3   		addq	%rax, %rbx
 7018              	.LVL868:
3586:fltk-1.3.4-1/png/pngread.c ****                      display->local_row), NULL);
 7019              		.loc 1 3586 0
 7020 04ce E8000000 		call	png_read_row
 7020      00
 7021              	.LVL869:
3592:fltk-1.3.4-1/png/pngread.c ****                   for (; outrow < end_row; outrow += stepx)
 7022              		.loc 1 3592 0
 7023 04d3 488B4424 		movq	24(%rsp), %rax
 7023      18
 7024 04d8 48034424 		addq	40(%rsp), %rax
 7024      28
3588:fltk-1.3.4-1/png/pngread.c **** 
 7025              		.loc 1 3588 0
 7026 04dd 4C8B5424 		movq	16(%rsp), %r10
 7026      10
3593:fltk-1.3.4-1/png/pngread.c ****                   {
 7027              		.loc 1 3593 0
 7028 04e2 4839C3   		cmpq	%rax, %rbx
3588:fltk-1.3.4-1/png/pngread.c **** 
 7029              		.loc 1 3588 0
 7030 04e5 498B5228 		movq	40(%r10), %rdx
 7031              	.LVL870:
3593:fltk-1.3.4-1/png/pngread.c ****                   {
 7032              		.loc 1 3593 0
 7033 04e9 774D     		ja	.L820
 7034 04eb EB63     		jmp	.L796
 7035              	.LVL871:
 7036 04ed 0F1F00   		.p2align 4,,10
 7037              		.p2align 3
 7038              	.L846:
 7039              	.LBB329:
3600:fltk-1.3.4-1/png/pngread.c ****                         {
 7040              		.loc 1 3600 0
 7041 04f0 6683FEFF 		cmpw	$-1, %si
3595:fltk-1.3.4-1/png/pngread.c ****                      png_uint_16 alpha = inrow[1];
 7042              		.loc 1 3595 0
 7043 04f4 0FB7F9   		movzwl	%cx, %edi
3600:fltk-1.3.4-1/png/pngread.c ****                         {
 7044              		.loc 1 3600 0
 7045 04f7 7424     		je	.L792
3602:fltk-1.3.4-1/png/pngread.c ****                            component += 32767;
 7046              		.loc 1 3602 0
 7047 04f9 0FB7CE   		movzwl	%si, %ecx
 7048              	.LVL872:
 7049 04fc 0FAFF9   		imull	%ecx, %edi
 7050              	.LVL873:
 7051 04ff 8D8FFF7F 		leal	32767(%rdi), %ecx
 7051      0000
 7052 0505 4989C8   		movq	%rcx, %r8
 7053 0508 4889CF   		movq	%rcx, %rdi
 7054              	.LVL874:
 7055 050b 49C1E00F 		salq	$15, %r8
 7056 050f 48C1E71F 		salq	$31, %rdi
 7057 0513 4C01C7   		addq	%r8, %rdi
 7058 0516 4801F9   		addq	%rdi, %rcx
 7059 0519 48C1E92F 		shrq	$47, %rcx
 7060              	.LVL875:
 7061              	.L792:
3612:fltk-1.3.4-1/png/pngread.c ****                         outrow[1 ^ swap_alpha] = alpha;
 7062              		.loc 1 3612 0
 7063 051d 4585FF   		testl	%r15d, %r15d
3611:fltk-1.3.4-1/png/pngread.c ****                      if (preserve_alpha != 0)
 7064              		.loc 1 3611 0
 7065 0520 6642890C 		movw	%cx, (%rax,%r14)
 7065      30
3612:fltk-1.3.4-1/png/pngread.c ****                         outrow[1 ^ swap_alpha] = alpha;
 7066              		.loc 1 3612 0
 7067 0525 7405     		je	.L794
3613:fltk-1.3.4-1/png/pngread.c **** 
 7068              		.loc 1 3613 0
 7069 0527 66428934 		movw	%si, (%rax,%r13)
 7069      28
 7070              	.L794:
 7071              	.LBE329:
3593:fltk-1.3.4-1/png/pngread.c ****                   {
 7072              		.loc 1 3593 0
 7073 052c 4C01E0   		addq	%r12, %rax
 7074              	.LVL876:
 7075              	.LBB330:
3615:fltk-1.3.4-1/png/pngread.c ****                   }
 7076              		.loc 1 3615 0
 7077 052f 4883C204 		addq	$4, %rdx
 7078              	.LVL877:
 7079              	.LBE330:
3593:fltk-1.3.4-1/png/pngread.c ****                   {
 7080              		.loc 1 3593 0
 7081 0533 4839C3   		cmpq	%rax, %rbx
 7082 0536 7618     		jbe	.L796
 7083              	.LVL878:
 7084              	.L820:
 7085              	.LBB331:
3596:fltk-1.3.4-1/png/pngread.c **** 
 7086              		.loc 1 3596 0
 7087 0538 0FB77202 		movzwl	2(%rdx), %esi
3595:fltk-1.3.4-1/png/pngread.c ****                      png_uint_16 alpha = inrow[1];
 7088              		.loc 1 3595 0
 7089 053c 0FB70A   		movzwl	(%rdx), %ecx
 7090              	.LVL879:
3598:fltk-1.3.4-1/png/pngread.c ****                      {
 7091              		.loc 1 3598 0
 7092 053f 6685F6   		testw	%si, %si
 7093 0542 75AC     		jne	.L846
 7094 0544 31C9     		xorl	%ecx, %ecx
 7095              	.LVL880:
 7096 0546 EBD5     		jmp	.L792
 7097              	.LVL881:
 7098 0548 0F1F8400 		.p2align 4,,10
 7098      00000000 
 7099              		.p2align 3
 7100              	.L796:
 7101              	.LBE331:
 7102              	.LBE333:
3579:fltk-1.3.4-1/png/pngread.c ****                {
 7103              		.loc 1 3579 0
 7104 0550 036C2420 		addl	32(%rsp), %ebp
 7105              	.LVL882:
 7106 0554 396C2450 		cmpl	%ebp, 80(%rsp)
 7107 0558 0F8742FF 		ja	.L791
 7107      FFFF
 7108 055e 4D89EC   		movq	%r13, %r12
 7109 0561 4C89D5   		movq	%r10, %rbp
 7110              	.LVL883:
 7111              	.L789:
 7112 0564 448B5424 		movl	72(%rsp), %r10d
 7112      48
 7113              	.LBE334:
3552:fltk-1.3.4-1/png/pngread.c ****             {
 7114              		.loc 1 3552 0 discriminator 2
 7115 0569 44395424 		cmpl	%r10d, 84(%rsp)
 7115      54
 7116 056e 0F8E61FE 		jle	.L811
 7116      FFFF
 7117 0574 488B4424 		movq	8(%rsp), %rax
 7117      08
 7118 0579 0FB68074 		movzbl	628(%rax), %eax
 7118      020000
 7119              	.LVL884:
 7120              	.LBB335:
3559:fltk-1.3.4-1/png/pngread.c ****                {
 7121              		.loc 1 3559 0
 7122 0580 3C01     		cmpb	$1, %al
 7123 0582 0F85D3FE 		jne	.L847
 7123      FFFF
 7124              	.L786:
3562:fltk-1.3.4-1/png/pngread.c ****                      continue;
 7125              		.loc 1 3562 0
 7126 0588 4183FA01 		cmpl	$1, %r10d
 7127 058c 0F869500 		jbe	.L788
 7127      0000
 7128 0592 418D4201 		leal	1(%r10), %eax
3562:fltk-1.3.4-1/png/pngread.c ****                      continue;
 7129              		.loc 1 3562 0 is_stmt 0 discriminator 1
 7130 0596 BE070000 		movl	$7, %esi
 7130      00
 7131 059b 4489D7   		movl	%r10d, %edi
 7132 059e 4429D6   		subl	%r10d, %esi
 7133 05a1 83E701   		andl	$1, %edi
 7134 05a4 B9030000 		movl	$3, %ecx
 7134      00
 7135 05a9 89442448 		movl	%eax, 72(%rsp)
 7136 05ad D1F8     		sarl	%eax
 7137 05af D1FE     		sarl	%esi
 7138 05b1 29C1     		subl	%eax, %ecx
 7139 05b3 89F8     		movl	%edi, %eax
 7140 05b5 BA010000 		movl	$1, %edx
 7140      00
 7141 05ba D3E0     		sall	%cl, %eax
 7142 05bc 89F1     		movl	%esi, %ecx
 7143 05be D3E2     		sall	%cl, %edx
 7144 05c0 83EA01   		subl	$1, %edx
 7145 05c3 29C2     		subl	%eax, %edx
 7146 05c5 0354245C 		addl	92(%rsp), %edx
 7147              	.L800:
3562:fltk-1.3.4-1/png/pngread.c ****                      continue;
 7148              		.loc 1 3562 0 discriminator 8
 7149 05c9 89F1     		movl	%esi, %ecx
 7150 05cb D3EA     		shrl	%cl, %edx
 7151 05cd 85D2     		testl	%edx, %edx
 7152 05cf 7493     		je	.L789
3565:fltk-1.3.4-1/png/pngread.c ****                   stepx = PNG_PASS_COL_OFFSET(pass) * outchannels;
 7153              		.loc 1 3565 0 is_stmt 1
 7154 05d1 8B5C2458 		movl	88(%rsp), %ebx
3566:fltk-1.3.4-1/png/pngread.c ****                   y = PNG_PASS_START_ROW(pass);
 7155              		.loc 1 3566 0
 7156 05d5 B9070000 		movl	$7, %ecx
 7156      00
3565:fltk-1.3.4-1/png/pngread.c ****                   stepx = PNG_PASS_COL_OFFSET(pass) * outchannels;
 7157              		.loc 1 3565 0
 7158 05da 83E007   		andl	$7, %eax
3566:fltk-1.3.4-1/png/pngread.c ****                   y = PNG_PASS_START_ROW(pass);
 7159              		.loc 1 3566 0
 7160 05dd 4429D1   		subl	%r10d, %ecx
 7161 05e0 83F701   		xorl	$1, %edi
 7162 05e3 D1F9     		sarl	%ecx
3565:fltk-1.3.4-1/png/pngread.c ****                   stepx = PNG_PASS_COL_OFFSET(pass) * outchannels;
 7163              		.loc 1 3565 0
 7164 05e5 0FAFC3   		imull	%ebx, %eax
3566:fltk-1.3.4-1/png/pngread.c ****                   y = PNG_PASS_START_ROW(pass);
 7165              		.loc 1 3566 0
 7166 05e8 D3E3     		sall	%cl, %ebx
3567:fltk-1.3.4-1/png/pngread.c ****                   stepy = PNG_PASS_ROW_OFFSET(pass);
 7167              		.loc 1 3567 0
 7168 05ea 4489D1   		movl	%r10d, %ecx
 7169 05ed D1F9     		sarl	%ecx
3566:fltk-1.3.4-1/png/pngread.c ****                   y = PNG_PASS_START_ROW(pass);
 7170              		.loc 1 3566 0
 7171 05ef 89DA     		movl	%ebx, %edx
 7172              	.LVL885:
3567:fltk-1.3.4-1/png/pngread.c ****                   stepy = PNG_PASS_ROW_OFFSET(pass);
 7173              		.loc 1 3567 0
 7174 05f1 BB030000 		movl	$3, %ebx
 7174      00
 7175              	.LVL886:
 7176 05f6 29CB     		subl	%ecx, %ebx
 7177 05f8 89D9     		movl	%ebx, %ecx
 7178 05fa D3E7     		sall	%cl, %edi
 7179 05fc 83E707   		andl	$7, %edi
3568:fltk-1.3.4-1/png/pngread.c ****                }
 7180              		.loc 1 3568 0
 7181 05ff 4183FA02 		cmpl	$2, %r10d
3567:fltk-1.3.4-1/png/pngread.c ****                   stepy = PNG_PASS_ROW_OFFSET(pass);
 7182              		.loc 1 3567 0
 7183 0603 4189F8   		movl	%edi, %r8d
 7184              	.LVL887:
3568:fltk-1.3.4-1/png/pngread.c ****                }
 7185              		.loc 1 3568 0
 7186 0606 764D     		jbe	.L803
3568:fltk-1.3.4-1/png/pngread.c ****                }
 7187              		.loc 1 3568 0 is_stmt 0 discriminator 1
 7188 0608 418D4AFF 		leal	-1(%r10), %ecx
 7189 060c BE080000 		movl	$8, %esi
 7189      00
 7190 0611 D1F9     		sarl	%ecx
 7191 0613 D3FE     		sarl	%cl, %esi
 7192 0615 89742420 		movl	%esi, 32(%rsp)
 7193 0619 E956FEFF 		jmp	.L787
 7193      FF
 7194              	.LVL888:
 7195 061e 6690     		.p2align 4,,10
 7196              		.p2align 3
 7197              	.L779:
 7198              	.LBE335:
 7199              	.LBE324:
 7200              	.LBB337:
 7201              	.LBB322:
 7202              	.LBB319:
 7203              	.LBB312:
 7204              	.LBB311:
3518:fltk-1.3.4-1/png/pngread.c **** 
 7205              		.loc 1 3518 0 is_stmt 1
 7206 0620 881E     		movb	%bl, (%rsi)
 7207 0622 E9E5FBFF 		jmp	.L781
 7207      FF
 7208              	.LVL889:
 7209              	.L788:
 7210 0627 418D4201 		leal	1(%r10), %eax
 7211              	.LBE311:
 7212              	.LBE312:
 7213              	.LBE319:
 7214              	.LBE322:
 7215              	.LBE337:
 7216              	.LBB338:
 7217              	.LBB336:
3562:fltk-1.3.4-1/png/pngread.c ****                      continue;
 7218              		.loc 1 3562 0
 7219 062b B9030000 		movl	$3, %ecx
 7219      00
 7220 0630 4489D7   		movl	%r10d, %edi
 7221 0633 BE030000 		movl	$3, %esi
 7221      00
 7222 0638 89442448 		movl	%eax, 72(%rsp)
 7223 063c D1F8     		sarl	%eax
 7224 063e 29C1     		subl	%eax, %ecx
 7225 0640 4489D0   		movl	%r10d, %eax
 7226 0643 D3E0     		sall	%cl, %eax
 7227 0645 89C2     		movl	%eax, %edx
 7228 0647 F7D2     		notl	%edx
 7229 0649 83E207   		andl	$7, %edx
 7230 064c 0354245C 		addl	92(%rsp), %edx
 7231 0650 E974FFFF 		jmp	.L800
 7231      FF
 7232              	.LVL890:
 7233              	.L803:
3568:fltk-1.3.4-1/png/pngread.c ****                }
 7234              		.loc 1 3568 0
 7235 0655 C7442420 		movl	$8, 32(%rsp)
 7235      08000000 
 7236 065d E912FEFF 		jmp	.L787
 7236      FF
 7237              	.LVL891:
 7238              	.L768:
 7239 0662 8D4201   		leal	1(%rdx), %eax
 7240              	.LBE336:
 7241              	.LBE338:
 7242              	.LBB339:
 7243              	.LBB323:
3424:fltk-1.3.4-1/png/pngread.c ****                      continue;
 7244              		.loc 1 3424 0
 7245 0665 B9030000 		movl	$3, %ecx
 7245      00
 7246 066a 89D6     		movl	%edx, %esi
 7247 066c 89D7     		movl	%edx, %edi
 7248 066e 41B80300 		movl	$3, %r8d
 7248      0000
 7249 0674 89442458 		movl	%eax, 88(%rsp)
 7250 0678 D1F8     		sarl	%eax
 7251 067a 29C1     		subl	%eax, %ecx
 7252 067c D3E6     		sall	%cl, %esi
 7253 067e 89F0     		movl	%esi, %eax
 7254 0680 F7D0     		notl	%eax
 7255 0682 83E007   		andl	$7, %eax
 7256 0685 0344245C 		addl	92(%rsp), %eax
 7257 0689 E9FBFBFF 		jmp	.L799
 7257      FF
 7258              	.LVL892:
 7259              	.L802:
3430:fltk-1.3.4-1/png/pngread.c ****                }
 7260              		.loc 1 3430 0
 7261 068e C7442428 		movl	$8, 40(%rsp)
 7261      08000000 
 7262 0696 E976FAFF 		jmp	.L767
 7262      FF
 7263              	.LVL893:
 7264              	.L841:
 7265              	.LBE323:
 7266              	.LBE339:
3377:fltk-1.3.4-1/png/pngread.c **** 
 7267              		.loc 1 3377 0
 7268 069b 488B7C24 		movq	8(%rsp), %rdi
 7268      08
 7269 06a0 BE000000 		movl	$.LC56, %esi
 7269      00
 7270 06a5 E8000000 		call	png_error
 7270      00
 7271              	.LVL894:
 7272              	.L840:
3372:fltk-1.3.4-1/png/pngread.c **** 
 7273              		.loc 1 3372 0
 7274 06aa 488B7C24 		movq	8(%rsp), %rdi
 7274      08
 7275 06af BE000000 		movl	$.LC55, %esi
 7275      00
 7276 06b4 E8000000 		call	png_error
 7276      00
 7277              	.LVL895:
 7278              	.L839:
3369:fltk-1.3.4-1/png/pngread.c **** 
 7279              		.loc 1 3369 0
 7280 06b9 488B7C24 		movq	8(%rsp), %rdi
 7280      08
 7281              	.LVL896:
 7282 06be BE000000 		movl	$.LC54, %esi
 7282      00
 7283              	.LVL897:
 7284 06c3 E8000000 		call	png_error
 7284      00
 7285              	.LVL898:
 7286              	.L838:
3366:fltk-1.3.4-1/png/pngread.c **** 
 7287              		.loc 1 3366 0
 7288 06c8 488B7C24 		movq	8(%rsp), %rdi
 7288      08
 7289              	.LVL899:
 7290 06cd BE000000 		movl	$.LC53, %esi
 7290      00
 7291              	.LVL900:
 7292 06d2 E8000000 		call	png_error
 7292      00
 7293              	.LVL901:
 7294              		.cfi_endproc
 7295              	.LFE91:
 7297              		.section	.text.unlikely.png_image_read_background
 7298              	.LCOLDE59:
 7299              		.section	.text.png_image_read_background
 7300              	.LHOTE59:
 7301              		.section	.text.unlikely.png_image_read_composite,"ax",@progbits
 7302              	.LCOLDB60:
 7303              		.section	.text.png_image_read_composite,"ax",@progbits
 7304              	.LHOTB60:
 7305              		.p2align 4,,15
 7307              	png_image_read_composite:
 7308              	.LFB90:
3223:fltk-1.3.4-1/png/pngread.c ****    png_image_read_control *display = png_voidcast(png_image_read_control*,
 7309              		.loc 1 3223 0
 7310              		.cfi_startproc
 7311              	.LVL902:
 7312 0000 4157     		pushq	%r15
 7313              		.cfi_def_cfa_offset 16
 7314              		.cfi_offset 15, -16
 7315 0002 4156     		pushq	%r14
 7316              		.cfi_def_cfa_offset 24
 7317              		.cfi_offset 14, -24
 7318 0004 4155     		pushq	%r13
 7319              		.cfi_def_cfa_offset 32
 7320              		.cfi_offset 13, -32
 7321 0006 4154     		pushq	%r12
 7322              		.cfi_def_cfa_offset 40
 7323              		.cfi_offset 12, -40
 7324 0008 55       		pushq	%rbp
 7325              		.cfi_def_cfa_offset 48
 7326              		.cfi_offset 6, -48
 7327 0009 53       		pushq	%rbx
 7328              		.cfi_def_cfa_offset 56
 7329              		.cfi_offset 3, -56
 7330 000a 4883EC58 		subq	$88, %rsp
 7331              		.cfi_def_cfa_offset 144
3226:fltk-1.3.4-1/png/pngread.c ****    png_structrp png_ptr = image->opaque->png_ptr;
 7332              		.loc 1 3226 0
 7333 000e 488B07   		movq	(%rdi), %rax
 7334              	.LVL903:
3223:fltk-1.3.4-1/png/pngread.c ****    png_image_read_control *display = png_voidcast(png_image_read_control*,
 7335              		.loc 1 3223 0
 7336 0011 48897C24 		movq	%rdi, 32(%rsp)
 7336      20
3227:fltk-1.3.4-1/png/pngread.c ****    int passes;
 7337              		.loc 1 3227 0
 7338 0016 488B10   		movq	(%rax), %rdx
 7339 0019 488B1A   		movq	(%rdx), %rbx
3230:fltk-1.3.4-1/png/pngread.c ****    {
 7340              		.loc 1 3230 0
 7341 001c 0FB69374 		movzbl	628(%rbx), %edx
 7341      020000
3227:fltk-1.3.4-1/png/pngread.c ****    int passes;
 7342              		.loc 1 3227 0
 7343 0023 48895C24 		movq	%rbx, 8(%rsp)
 7343      08
 7344              	.LVL904:
3230:fltk-1.3.4-1/png/pngread.c ****    {
 7345              		.loc 1 3230 0
 7346 0028 84D2     		testb	%dl, %dl
 7347 002a 0F847102 		je	.L869
 7347      0000
 7348 0030 80FA01   		cmpb	$1, %dl
 7349 0033 0F855902 		jne	.L880
 7349      0000
3237:fltk-1.3.4-1/png/pngread.c ****          break;
 7350              		.loc 1 3237 0
 7351 0039 C7442444 		movl	$7, 68(%rsp)
 7351      07000000 
 7352              	.L850:
 7353              	.LVL905:
 7354              	.LBB340:
3245:fltk-1.3.4-1/png/pngread.c ****       png_uint_32  width = image->width;
 7355              		.loc 1 3245 0
 7356 0041 8B5810   		movl	16(%rax), %ebx
 7357              	.LVL906:
 7358 0044 895C241C 		movl	%ebx, 28(%rsp)
 7359              	.LVL907:
3246:fltk-1.3.4-1/png/pngread.c ****       ptrdiff_t    step_row = display->row_bytes;
 7360              		.loc 1 3246 0
 7361 0048 8B580C   		movl	12(%rax), %ebx
 7362              	.LVL908:
3248:fltk-1.3.4-1/png/pngread.c ****          (image->format & PNG_FORMAT_FLAG_COLOR) != 0 ? 3 : 1;
 7363              		.loc 1 3248 0
 7364 004b 8B4014   		movl	20(%rax), %eax
 7365              	.LVL909:
3246:fltk-1.3.4-1/png/pngread.c ****       ptrdiff_t    step_row = display->row_bytes;
 7366              		.loc 1 3246 0
 7367 004e 89DF     		movl	%ebx, %edi
 7368              	.LVL910:
 7369 0050 895C2448 		movl	%ebx, 72(%rsp)
 7370              	.LVL911:
3247:fltk-1.3.4-1/png/pngread.c ****       unsigned int channels =
 7371              		.loc 1 3247 0
 7372 0054 488B5C24 		movq	32(%rsp), %rbx
 7372      20
 7373              	.LVL912:
3248:fltk-1.3.4-1/png/pngread.c ****          (image->format & PNG_FORMAT_FLAG_COLOR) != 0 ? 3 : 1;
 7374              		.loc 1 3248 0
 7375 0059 83E002   		andl	$2, %eax
 7376 005c 83F801   		cmpl	$1, %eax
 7377 005f 19C0     		sbbl	%eax, %eax
3247:fltk-1.3.4-1/png/pngread.c ****       unsigned int channels =
 7378              		.loc 1 3247 0
 7379 0061 488B5B38 		movq	56(%rbx), %rbx
3248:fltk-1.3.4-1/png/pngread.c ****          (image->format & PNG_FORMAT_FLAG_COLOR) != 0 ? 3 : 1;
 7380              		.loc 1 3248 0
 7381 0065 83E0FE   		andl	$-2, %eax
 7382 0068 83C003   		addl	$3, %eax
3247:fltk-1.3.4-1/png/pngread.c ****       unsigned int channels =
 7383              		.loc 1 3247 0
 7384 006b 48895C24 		movq	%rbx, 40(%rsp)
 7384      28
 7385              	.LVL913:
3248:fltk-1.3.4-1/png/pngread.c ****          (image->format & PNG_FORMAT_FLAG_COLOR) != 0 ? 3 : 1;
 7386              		.loc 1 3248 0
 7387 0070 89442410 		movl	%eax, 16(%rsp)
 7388              	.LVL914:
 7389 0074 89C3     		movl	%eax, %ebx
 7390              	.LVL915:
 7391 0076 0FAFC7   		imull	%edi, %eax
 7392              	.LVL916:
 7393 0079 8D4BFF   		leal	-1(%rbx), %ecx
 7394 007c 8D7B01   		leal	1(%rbx), %edi
 7395              	.LVL917:
 7396 007f 4C8D7901 		leaq	1(%rcx), %r15
 7397 0083 897C244C 		movl	%edi, 76(%rsp)
 7398 0087 48894424 		movq	%rax, 56(%rsp)
 7398      38
 7399 008c 31C0     		xorl	%eax, %eax
 7400              	.LVL918:
 7401              	.LBB341:
3257:fltk-1.3.4-1/png/pngread.c ****          {
 7402              		.loc 1 3257 0
 7403 008e 80FA01   		cmpb	$1, %dl
 7404 0091 0F844F01 		je	.L853
 7404      0000
 7405              	.LVL919:
 7406              	.L883:
 7407 0097 83C001   		addl	$1, %eax
 7408              	.LVL920:
3271:fltk-1.3.4-1/png/pngread.c ****             startx = 0;
 7409              		.loc 1 3271 0
 7410 009a C7442404 		movl	$0, 4(%rsp)
 7410      00000000 
3274:fltk-1.3.4-1/png/pngread.c ****          }
 7411              		.loc 1 3274 0
 7412 00a2 C7442414 		movl	$1, 20(%rsp)
 7412      01000000 
 7413 00aa 89442440 		movl	%eax, 64(%rsp)
3257:fltk-1.3.4-1/png/pngread.c ****          {
 7414              		.loc 1 3257 0
 7415 00ae 8B442410 		movl	16(%rsp), %eax
 7416              	.LVL921:
3272:fltk-1.3.4-1/png/pngread.c ****             stepx = channels;
 7417              		.loc 1 3272 0
 7418 00b2 31D2     		xorl	%edx, %edx
3257:fltk-1.3.4-1/png/pngread.c ****          {
 7419              		.loc 1 3257 0
 7420 00b4 89442418 		movl	%eax, 24(%rsp)
 7421              	.LVL922:
 7422              	.L854:
3277:fltk-1.3.4-1/png/pngread.c ****          {
 7423              		.loc 1 3277 0 discriminator 1
 7424 00b8 8B5C2404 		movl	4(%rsp), %ebx
 7425 00bc 395C241C 		cmpl	%ebx, 28(%rsp)
 7426 00c0 0F86FD00 		jbe	.L856
 7426      0000
 7427 00c6 448B6424 		movl	76(%rsp), %r12d
 7427      4C
 7428 00cb 89D0     		movl	%edx, %eax
 7429 00cd 48894424 		movq	%rax, 48(%rsp)
 7429      30
 7430              		.p2align 4,,10
 7431 00d2 660F1F44 		.p2align 3
 7431      0000
 7432              	.L858:
 7433              	.LBB342:
3279:fltk-1.3.4-1/png/pngread.c ****             png_bytep outrow;
 7434              		.loc 1 3279 0
 7435 00d8 4C8B7424 		movq	32(%rsp), %r14
 7435      20
3284:fltk-1.3.4-1/png/pngread.c **** 
 7436              		.loc 1 3284 0
 7437 00dd 488B7C24 		movq	8(%rsp), %rdi
 7437      08
 7438 00e2 31D2     		xorl	%edx, %edx
3279:fltk-1.3.4-1/png/pngread.c ****             png_bytep outrow;
 7439              		.loc 1 3279 0
 7440 00e4 498B5E28 		movq	40(%r14), %rbx
 7441              	.LVL923:
3284:fltk-1.3.4-1/png/pngread.c **** 
 7442              		.loc 1 3284 0
 7443 00e8 4889DE   		movq	%rbx, %rsi
 7444 00eb E8000000 		call	png_read_row
 7444      00
 7445              	.LVL924:
3287:fltk-1.3.4-1/png/pngread.c ****             end_row = outrow + width * channels;
 7446              		.loc 1 3287 0
 7447 00f0 448B5424 		movl	4(%rsp), %r10d
 7447      04
3288:fltk-1.3.4-1/png/pngread.c **** 
 7448              		.loc 1 3288 0
 7449 00f5 488B4424 		movq	56(%rsp), %rax
 7449      38
3287:fltk-1.3.4-1/png/pngread.c ****             end_row = outrow + width * channels;
 7450              		.loc 1 3287 0
 7451 00fa 4C0FAF54 		imulq	40(%rsp), %r10
 7451      2428
 7452 0100 448B6C24 		movl	24(%rsp), %r13d
 7452      18
 7453 0105 4D035630 		addq	48(%r14), %r10
 7454              	.LVL925:
 7455 0109 448B7424 		movl	16(%rsp), %r14d
 7455      10
3288:fltk-1.3.4-1/png/pngread.c **** 
 7456              		.loc 1 3288 0
 7457 010e 498D2C02 		leaq	(%r10,%rax), %rbp
 7458              	.LVL926:
3291:fltk-1.3.4-1/png/pngread.c ****             for (; outrow < end_row; outrow += stepx)
 7459              		.loc 1 3291 0
 7460 0112 4C035424 		addq	48(%rsp), %r10
 7460      30
 7461              	.LVL927:
3292:fltk-1.3.4-1/png/pngread.c ****             {
 7462              		.loc 1 3292 0
 7463 0117 4C39D5   		cmpq	%r10, %rbp
 7464 011a 0F868D00 		jbe	.L861
 7464      0000
 7465              		.p2align 4,,10
 7466              		.p2align 3
 7467              	.L875:
 7468              	.LBB343:
3294:fltk-1.3.4-1/png/pngread.c **** 
 7469              		.loc 1 3294 0
 7470 0120 420FB63C 		movzbl	(%rbx,%r14), %edi
 7470      33
 7471              	.LVL928:
3296:fltk-1.3.4-1/png/pngread.c ****                {
 7472              		.loc 1 3296 0
 7473 0125 4084FF   		testb	%dil, %dil
 7474 0128 7474     		je	.L865
 7475              	.LBB344:
 7476              	.LBB345:
3313:fltk-1.3.4-1/png/pngread.c **** 
 7477              		.loc 1 3313 0
 7478 012a 400FB6C7 		movzbl	%dil, %eax
 7479 012e 41B9FF00 		movl	$255, %r9d
 7479      0000
 7480 0134 4F8D043A 		leaq	(%r10,%r15), %r8
 7481 0138 4889DE   		movq	%rbx, %rsi
 7482 013b 4C89D1   		movq	%r10, %rcx
 7483 013e 4129C1   		subl	%eax, %r9d
 7484              		.p2align 4,,10
 7485 0141 0F1F8000 		.p2align 3
 7485      000000
 7486              	.L864:
 7487              	.LVL929:
3304:fltk-1.3.4-1/png/pngread.c ****                      {
 7488              		.loc 1 3304 0
 7489 0148 4080FFFF 		cmpb	$-1, %dil
3302:fltk-1.3.4-1/png/pngread.c **** 
 7490              		.loc 1 3302 0
 7491 014c 0FB606   		movzbl	(%rsi), %eax
 7492              	.LVL930:
3304:fltk-1.3.4-1/png/pngread.c ****                      {
 7493              		.loc 1 3304 0
 7494 014f 743E     		je	.L863
3312:fltk-1.3.4-1/png/pngread.c ****                         component += (255-alpha)*png_sRGB_table[outrow[c]];
 7495              		.loc 1 3312 0
 7496 0151 89C2     		movl	%eax, %edx
 7497 0153 C1E210   		sall	$16, %edx
 7498 0156 29C2     		subl	%eax, %edx
 7499              	.LVL931:
3313:fltk-1.3.4-1/png/pngread.c **** 
 7500              		.loc 1 3313 0
 7501 0158 0FB601   		movzbl	(%rcx), %eax
 7502 015b 0FB78400 		movzwl	png_sRGB_table(%rax,%rax), %eax
 7502      00000000 
 7503 0163 410FAFC1 		imull	%r9d, %eax
 7504 0167 01D0     		addl	%edx, %eax
 7505              	.LVL932:
3319:fltk-1.3.4-1/png/pngread.c ****                      }
 7506              		.loc 1 3319 0
 7507 0169 89C2     		movl	%eax, %edx
 7508 016b 25FF7F00 		andl	$32767, %eax
 7508      00
 7509              	.LVL933:
 7510 0170 C1EA0F   		shrl	$15, %edx
 7511              	.LVL934:
 7512 0173 440FB69A 		movzbl	png_sRGB_delta(%rdx), %r11d
 7512      00000000 
 7513 017b 0FB79412 		movzwl	png_sRGB_base(%rdx,%rdx), %edx
 7513      00000000 
 7514 0183 410FAFC3 		imull	%r11d, %eax
 7515 0187 C1E80C   		shrl	$12, %eax
 7516 018a 01D0     		addl	%edx, %eax
 7517 018c 0FB6C4   		movzbl	%ah, %eax
 7518              	.LVL935:
 7519              	.L863:
3322:fltk-1.3.4-1/png/pngread.c ****                   }
 7520              		.loc 1 3322 0 discriminator 2
 7521 018f 8801     		movb	%al, (%rcx)
 7522              	.LVL936:
 7523 0191 4883C101 		addq	$1, %rcx
 7524 0195 4883C601 		addq	$1, %rsi
 7525              	.LVL937:
 7526              	.LBE345:
3300:fltk-1.3.4-1/png/pngread.c ****                   {
 7527              		.loc 1 3300 0 discriminator 2
 7528 0199 4939C8   		cmpq	%rcx, %r8
 7529 019c 75AA     		jne	.L864
 7530              	.LVL938:
 7531              	.L865:
 7532              	.LBE344:
 7533              	.LBE343:
3292:fltk-1.3.4-1/png/pngread.c ****             {
 7534              		.loc 1 3292 0
 7535 019e 4D01EA   		addq	%r13, %r10
 7536              	.LVL939:
 7537              	.LBB346:
3326:fltk-1.3.4-1/png/pngread.c ****             }
 7538              		.loc 1 3326 0
 7539 01a1 4C01E3   		addq	%r12, %rbx
 7540              	.LVL940:
 7541              	.LBE346:
3292:fltk-1.3.4-1/png/pngread.c ****             {
 7542              		.loc 1 3292 0
 7543 01a4 4C39D5   		cmpq	%r10, %rbp
 7544 01a7 0F8773FF 		ja	.L875
 7544      FFFF
 7545              	.LVL941:
 7546              	.L861:
 7547              	.LBE342:
3277:fltk-1.3.4-1/png/pngread.c ****          {
 7548              		.loc 1 3277 0
 7549 01ad 8B5C2414 		movl	20(%rsp), %ebx
 7550              	.LVL942:
 7551 01b1 015C2404 		addl	%ebx, 4(%rsp)
 7552              	.LVL943:
 7553 01b5 8B442404 		movl	4(%rsp), %eax
 7554              	.LVL944:
 7555 01b9 3944241C 		cmpl	%eax, 28(%rsp)
 7556 01bd 0F8715FF 		ja	.L858
 7556      FFFF
 7557              	.LVL945:
 7558              	.L856:
 7559 01c3 8B442440 		movl	64(%rsp), %eax
 7560              	.LBE341:
3252:fltk-1.3.4-1/png/pngread.c ****       {
 7561              		.loc 1 3252 0 discriminator 2
 7562 01c7 39442444 		cmpl	%eax, 68(%rsp)
 7563 01cb 0F8EAD00 		jle	.L873
 7563      0000
 7564 01d1 488B5C24 		movq	8(%rsp), %rbx
 7564      08
 7565 01d6 0FB69374 		movzbl	628(%rbx), %edx
 7565      020000
 7566              	.LVL946:
 7567              	.LBB347:
3257:fltk-1.3.4-1/png/pngread.c ****          {
 7568              		.loc 1 3257 0
 7569 01dd 80FA01   		cmpb	$1, %dl
 7570 01e0 0F85B1FE 		jne	.L883
 7570      FFFF
 7571              	.L853:
3260:fltk-1.3.4-1/png/pngread.c ****                continue;
 7572              		.loc 1 3260 0
 7573 01e6 83F801   		cmpl	$1, %eax
 7574 01e9 0F86BF00 		jbe	.L855
 7574      0000
 7575 01ef 8D5801   		leal	1(%rax), %ebx
3260:fltk-1.3.4-1/png/pngread.c ****                continue;
 7576              		.loc 1 3260 0 is_stmt 0 discriminator 1
 7577 01f2 41B80700 		movl	$7, %r8d
 7577      0000
 7578 01f8 89C7     		movl	%eax, %edi
 7579 01fa 4129C0   		subl	%eax, %r8d
 7580 01fd 83E701   		andl	$1, %edi
 7581 0200 B9030000 		movl	$3, %ecx
 7581      00
 7582 0205 895C2440 		movl	%ebx, 64(%rsp)
 7583 0209 D1FB     		sarl	%ebx
 7584 020b 41D1F8   		sarl	%r8d
 7585 020e 29D9     		subl	%ebx, %ecx
 7586 0210 89FE     		movl	%edi, %esi
 7587 0212 BA010000 		movl	$1, %edx
 7587      00
 7588 0217 D3E6     		sall	%cl, %esi
 7589 0219 4489C1   		movl	%r8d, %ecx
 7590 021c D3E2     		sall	%cl, %edx
 7591 021e 83EA01   		subl	$1, %edx
 7592 0221 29F2     		subl	%esi, %edx
 7593 0223 03542448 		addl	72(%rsp), %edx
 7594              	.L868:
3260:fltk-1.3.4-1/png/pngread.c ****                continue;
 7595              		.loc 1 3260 0 discriminator 8
 7596 0227 4489C1   		movl	%r8d, %ecx
 7597 022a D3EA     		shrl	%cl, %edx
 7598 022c 85D2     		testl	%edx, %edx
 7599 022e 7493     		je	.L856
3263:fltk-1.3.4-1/png/pngread.c ****             stepx = PNG_PASS_COL_OFFSET(pass) * channels;
 7600              		.loc 1 3263 0 is_stmt 1
 7601 0230 8B5C2410 		movl	16(%rsp), %ebx
3264:fltk-1.3.4-1/png/pngread.c ****             y = PNG_PASS_START_ROW(pass);
 7602              		.loc 1 3264 0
 7603 0234 B9070000 		movl	$7, %ecx
 7603      00
3263:fltk-1.3.4-1/png/pngread.c ****             stepx = PNG_PASS_COL_OFFSET(pass) * channels;
 7604              		.loc 1 3263 0
 7605 0239 83E607   		andl	$7, %esi
3264:fltk-1.3.4-1/png/pngread.c ****             y = PNG_PASS_START_ROW(pass);
 7606              		.loc 1 3264 0
 7607 023c 29C1     		subl	%eax, %ecx
3263:fltk-1.3.4-1/png/pngread.c ****             stepx = PNG_PASS_COL_OFFSET(pass) * channels;
 7608              		.loc 1 3263 0
 7609 023e 89F2     		movl	%esi, %edx
3265:fltk-1.3.4-1/png/pngread.c ****             stepy = PNG_PASS_ROW_OFFSET(pass);
 7610              		.loc 1 3265 0
 7611 0240 89C6     		movl	%eax, %esi
3264:fltk-1.3.4-1/png/pngread.c ****             y = PNG_PASS_START_ROW(pass);
 7612              		.loc 1 3264 0
 7613 0242 D1F9     		sarl	%ecx
3265:fltk-1.3.4-1/png/pngread.c ****             stepy = PNG_PASS_ROW_OFFSET(pass);
 7614              		.loc 1 3265 0
 7615 0244 D1FE     		sarl	%esi
 7616 0246 83F701   		xorl	$1, %edi
3263:fltk-1.3.4-1/png/pngread.c ****             stepx = PNG_PASS_COL_OFFSET(pass) * channels;
 7617              		.loc 1 3263 0
 7618 0249 0FAFD3   		imull	%ebx, %edx
 7619              	.LVL947:
3264:fltk-1.3.4-1/png/pngread.c ****             y = PNG_PASS_START_ROW(pass);
 7620              		.loc 1 3264 0
 7621 024c D3E3     		sall	%cl, %ebx
3265:fltk-1.3.4-1/png/pngread.c ****             stepy = PNG_PASS_ROW_OFFSET(pass);
 7622              		.loc 1 3265 0
 7623 024e B9030000 		movl	$3, %ecx
 7623      00
 7624 0253 29F1     		subl	%esi, %ecx
3264:fltk-1.3.4-1/png/pngread.c ****             y = PNG_PASS_START_ROW(pass);
 7625              		.loc 1 3264 0
 7626 0255 895C2418 		movl	%ebx, 24(%rsp)
 7627              	.LVL948:
3265:fltk-1.3.4-1/png/pngread.c ****             stepy = PNG_PASS_ROW_OFFSET(pass);
 7628              		.loc 1 3265 0
 7629 0259 D3E7     		sall	%cl, %edi
 7630 025b 83E707   		andl	$7, %edi
3266:fltk-1.3.4-1/png/pngread.c ****          }
 7631              		.loc 1 3266 0
 7632 025e 83F802   		cmpl	$2, %eax
3265:fltk-1.3.4-1/png/pngread.c ****             stepy = PNG_PASS_ROW_OFFSET(pass);
 7633              		.loc 1 3265 0
 7634 0261 897C2404 		movl	%edi, 4(%rsp)
 7635              	.LVL949:
3266:fltk-1.3.4-1/png/pngread.c ****          }
 7636              		.loc 1 3266 0
 7637 0265 7673     		jbe	.L871
3266:fltk-1.3.4-1/png/pngread.c ****          }
 7638              		.loc 1 3266 0 is_stmt 0 discriminator 1
 7639 0267 83E801   		subl	$1, %eax
 7640              	.LVL950:
 7641 026a D1F8     		sarl	%eax
 7642              	.LVL951:
 7643 026c 89C1     		movl	%eax, %ecx
 7644 026e B8080000 		movl	$8, %eax
 7644      00
 7645 0273 D3F8     		sarl	%cl, %eax
 7646 0275 89442414 		movl	%eax, 20(%rsp)
 7647 0279 E93AFEFF 		jmp	.L854
 7647      FF
 7648              	.LVL952:
 7649              	.L873:
 7650              	.LBE347:
 7651              	.LBE340:
3333:fltk-1.3.4-1/png/pngread.c **** 
 7652              		.loc 1 3333 0 is_stmt 1
 7653 027e 4883C458 		addq	$88, %rsp
 7654              		.cfi_remember_state
 7655              		.cfi_def_cfa_offset 56
 7656 0282 B8010000 		movl	$1, %eax
 7656      00
 7657 0287 5B       		popq	%rbx
 7658              		.cfi_def_cfa_offset 48
 7659 0288 5D       		popq	%rbp
 7660              		.cfi_def_cfa_offset 40
 7661 0289 415C     		popq	%r12
 7662              		.cfi_def_cfa_offset 32
 7663 028b 415D     		popq	%r13
 7664              		.cfi_def_cfa_offset 24
 7665 028d 415E     		popq	%r14
 7666              		.cfi_def_cfa_offset 16
 7667 028f 415F     		popq	%r15
 7668              		.cfi_def_cfa_offset 8
 7669 0291 C3       		ret
 7670              	.LVL953:
 7671              	.L880:
 7672              		.cfi_restore_state
3241:fltk-1.3.4-1/png/pngread.c ****    }
 7673              		.loc 1 3241 0
 7674 0292 488B7C24 		movq	8(%rsp), %rdi
 7674      08
 7675              	.LVL954:
 7676 0297 BE000000 		movl	$.LC57, %esi
 7676      00
 7677 029c E8000000 		call	png_error
 7677      00
 7678              	.LVL955:
 7679              	.L869:
3233:fltk-1.3.4-1/png/pngread.c ****          break;
 7680              		.loc 1 3233 0
 7681 02a1 C7442444 		movl	$1, 68(%rsp)
 7681      01000000 
 7682 02a9 E993FDFF 		jmp	.L850
 7682      FF
 7683              	.LVL956:
 7684              	.L855:
 7685 02ae 8D5801   		leal	1(%rax), %ebx
 7686              	.LBB349:
 7687              	.LBB348:
3260:fltk-1.3.4-1/png/pngread.c ****                continue;
 7688              		.loc 1 3260 0
 7689 02b1 B9030000 		movl	$3, %ecx
 7689      00
 7690 02b6 89C6     		movl	%eax, %esi
 7691 02b8 89C7     		movl	%eax, %edi
 7692 02ba 41B80300 		movl	$3, %r8d
 7692      0000
 7693 02c0 895C2440 		movl	%ebx, 64(%rsp)
 7694 02c4 D1FB     		sarl	%ebx
 7695 02c6 29D9     		subl	%ebx, %ecx
 7696 02c8 D3E6     		sall	%cl, %esi
 7697 02ca 89F2     		movl	%esi, %edx
 7698 02cc F7D2     		notl	%edx
 7699 02ce 83E207   		andl	$7, %edx
 7700 02d1 03542448 		addl	72(%rsp), %edx
 7701 02d5 E94DFFFF 		jmp	.L868
 7701      FF
 7702              	.LVL957:
 7703              	.L871:
3266:fltk-1.3.4-1/png/pngread.c ****          }
 7704              		.loc 1 3266 0
 7705 02da C7442414 		movl	$8, 20(%rsp)
 7705      08000000 
 7706 02e2 E9D1FDFF 		jmp	.L854
 7706      FF
 7707              	.LBE348:
 7708              	.LBE349:
 7709              		.cfi_endproc
 7710              	.LFE90:
 7712              		.section	.text.unlikely.png_image_read_composite
 7713              	.LCOLDE60:
 7714              		.section	.text.png_image_read_composite
 7715              	.LHOTE60:
 7716              		.section	.rodata.str1.8
 7717              		.align 8
 7718              	.LC61:
 7719 0438 62616420 		.string	"bad color-map processing (internal error)"
 7719      636F6C6F 
 7719      722D6D61 
 7719      70207072 
 7719      6F636573 
 7720              		.section	.text.unlikely.png_image_read_colormapped,"ax",@progbits
 7721              	.LCOLDB62:
 7722              		.section	.text.png_image_read_colormapped,"ax",@progbits
 7723              	.LHOTB62:
 7724              		.p2align 4,,15
 7726              	png_image_read_colormapped:
 7727              	.LFB89:
3090:fltk-1.3.4-1/png/pngread.c ****    png_image_read_control *display = png_voidcast(png_image_read_control*,
 7728              		.loc 1 3090 0
 7729              		.cfi_startproc
 7730              	.LVL958:
 7731 0000 4157     		pushq	%r15
 7732              		.cfi_def_cfa_offset 16
 7733              		.cfi_offset 15, -16
 7734 0002 4156     		pushq	%r14
 7735              		.cfi_def_cfa_offset 24
 7736              		.cfi_offset 14, -24
 7737 0004 4989FE   		movq	%rdi, %r14
 7738 0007 4155     		pushq	%r13
 7739              		.cfi_def_cfa_offset 32
 7740              		.cfi_offset 13, -32
 7741 0009 4154     		pushq	%r12
 7742              		.cfi_def_cfa_offset 40
 7743              		.cfi_offset 12, -40
 7744 000b 4531ED   		xorl	%r13d, %r13d
 7745 000e 55       		pushq	%rbp
 7746              		.cfi_def_cfa_offset 48
 7747              		.cfi_offset 6, -48
 7748 000f 53       		pushq	%rbx
 7749              		.cfi_def_cfa_offset 56
 7750              		.cfi_offset 3, -56
 7751 0010 4883EC18 		subq	$24, %rsp
 7752              		.cfi_def_cfa_offset 80
3093:fltk-1.3.4-1/png/pngread.c ****    png_controlp control = image->opaque;
 7753              		.loc 1 3093 0
 7754 0014 488B07   		movq	(%rdi), %rax
 7755 0017 48894424 		movq	%rax, 8(%rsp)
 7755      08
 7756              	.LVL959:
3094:fltk-1.3.4-1/png/pngread.c ****    png_structrp png_ptr = control->png_ptr;
 7757              		.loc 1 3094 0
 7758 001c 488B00   		movq	(%rax), %rax
 7759              	.LVL960:
3095:fltk-1.3.4-1/png/pngread.c ****    png_inforp info_ptr = control->info_ptr;
 7760              		.loc 1 3095 0
 7761 001f 488B28   		movq	(%rax), %rbp
 7762              	.LVL961:
3096:fltk-1.3.4-1/png/pngread.c **** 
 7763              		.loc 1 3096 0
 7764 0022 488B5808 		movq	8(%rax), %rbx
 7765              	.LVL962:
3100:fltk-1.3.4-1/png/pngread.c **** 
 7766              		.loc 1 3100 0
 7767 0026 4889EF   		movq	%rbp, %rdi
 7768              	.LVL963:
 7769 0029 E8000000 		call	png_image_skip_unused_chunks
 7769      00
 7770              	.LVL964:
3106:fltk-1.3.4-1/png/pngread.c ****       passes = png_set_interlace_handling(png_ptr);
 7771              		.loc 1 3106 0
 7772 002e 418B4648 		movl	72(%r14), %eax
 7773 0032 85C0     		testl	%eax, %eax
 7774 0034 0F84C601 		je	.L913
 7774      0000
 7775              	.LVL965:
 7776              	.L885:
3109:fltk-1.3.4-1/png/pngread.c **** 
 7777              		.loc 1 3109 0
 7778 003a 4889DE   		movq	%rbx, %rsi
 7779 003d 4889EF   		movq	%rbp, %rdi
 7780 0040 E8000000 		call	png_read_update_info
 7780      00
 7781              	.LVL966:
3112:fltk-1.3.4-1/png/pngread.c ****    {
 7782              		.loc 1 3112 0
 7783 0045 41837E48 		cmpl	$4, 72(%r14)
 7783      04
 7784 004a 0F87D500 		ja	.L886
 7784      0000
 7785 0050 418B4648 		movl	72(%r14), %eax
 7786 0054 FF24C500 		jmp	*.L888(,%rax,8)
 7786      000000
 7787              		.section	.rodata.png_image_read_colormapped,"a",@progbits
 7788              		.align 8
 7789              		.align 4
 7790              	.L888:
 7791 0000 00000000 		.quad	.L887
 7791      00000000 
 7792 0008 00000000 		.quad	.L889
 7792      00000000 
 7793 0010 00000000 		.quad	.L889
 7793      00000000 
 7794 0018 00000000 		.quad	.L890
 7794      00000000 
 7795 0020 00000000 		.quad	.L891
 7795      00000000 
 7796              		.section	.text.png_image_read_colormapped
 7797              	.L890:
3141:fltk-1.3.4-1/png/pngread.c ****             info_ptr->bit_depth == 8 &&
 7798              		.loc 1 3141 0
 7799 005b 66817B24 		cmpw	$520, 36(%rbx)
 7799      0802
 7800 0061 0F85BE00 		jne	.L886
 7800      0000
3142:fltk-1.3.4-1/png/pngread.c ****             png_ptr->screen_gamma == PNG_GAMMA_sRGB &&
 7801              		.loc 1 3142 0
 7802 0067 81BDB402 		cmpl	$220000, 692(%rbp)
 7802      0000605B 
 7802      0300
 7803 0071 0F85AE00 		jne	.L886
 7803      0000
3143:fltk-1.3.4-1/png/pngread.c ****             image->colormap_entries == 216)
 7804              		.loc 1 3143 0
 7805 0077 488B4424 		movq	8(%rsp), %rax
 7805      08
 7806 007c 81781CD8 		cmpl	$216, 28(%rax)
 7806      000000
 7807 0083 0F859C00 		jne	.L886
 7807      0000
 7808              	.L893:
 7809              	.LBB350:
3171:fltk-1.3.4-1/png/pngread.c **** 
 7810              		.loc 1 3171 0
 7811 0089 4D636610 		movslq	16(%r14), %r12
3170:fltk-1.3.4-1/png/pngread.c ****       ptrdiff_t row_bytes = display->row_stride;
 7812              		.loc 1 3170 0
 7813 008d 498B4608 		movq	8(%r14), %rax
 7814              	.LVL967:
3176:fltk-1.3.4-1/png/pngread.c ****       {
 7815              		.loc 1 3176 0
 7816 0091 4D85E4   		testq	%r12, %r12
 7817 0094 0F88BB00 		js	.L914
 7817      0000
 7818              	.L894:
 7819              	.LBE350:
3187:fltk-1.3.4-1/png/pngread.c ****    {
 7820              		.loc 1 3187 0
 7821 009a 4585ED   		testl	%r13d, %r13d
 7822              	.LBB353:
3183:fltk-1.3.4-1/png/pngread.c ****       display->row_bytes = row_bytes;
 7823              		.loc 1 3183 0
 7824 009d 49894630 		movq	%rax, 48(%r14)
3184:fltk-1.3.4-1/png/pngread.c ****    }
 7825              		.loc 1 3184 0
 7826 00a1 4D896638 		movq	%r12, 56(%r14)
 7827              	.LBE353:
3187:fltk-1.3.4-1/png/pngread.c ****    {
 7828              		.loc 1 3187 0
 7829 00a5 0F84CD00 		je	.L915
 7829      0000
 7830              	.LVL968:
 7831              	.L908:
 7832              	.LBB354:
3204:fltk-1.3.4-1/png/pngread.c ****       {
 7833              		.loc 1 3204 0
 7834 00ab 4183ED01 		subl	$1, %r13d
 7835              	.LVL969:
 7836 00af 783A     		js	.L916
 7837              		.p2align 4,,10
 7838 00b1 0F1F8000 		.p2align 3
 7838      000000
 7839              	.L901:
 7840              	.LVL970:
 7841              	.LBB355:
3209:fltk-1.3.4-1/png/pngread.c ****          {
 7842              		.loc 1 3209 0
 7843 00b8 488B4424 		movq	8(%rsp), %rax
 7843      08
3207:fltk-1.3.4-1/png/pngread.c **** 
 7844              		.loc 1 3207 0
 7845 00bd 4D8B7E30 		movq	48(%r14), %r15
 7846              	.LVL971:
3209:fltk-1.3.4-1/png/pngread.c ****          {
 7847              		.loc 1 3209 0
 7848 00c1 8B5810   		movl	16(%rax), %ebx
 7849 00c4 85DB     		testl	%ebx, %ebx
 7850 00c6 74E3     		je	.L908
 7851              	.LVL972:
 7852 00c8 0F1F8400 		.p2align 4,,10
 7852      00000000 
 7853              		.p2align 3
 7854              	.L906:
3211:fltk-1.3.4-1/png/pngread.c ****             row += row_bytes;
 7855              		.loc 1 3211 0
 7856 00d0 31D2     		xorl	%edx, %edx
 7857 00d2 4C89FE   		movq	%r15, %rsi
 7858 00d5 4889EF   		movq	%rbp, %rdi
 7859 00d8 E8000000 		call	png_read_row
 7859      00
 7860              	.LVL973:
3212:fltk-1.3.4-1/png/pngread.c ****          }
 7861              		.loc 1 3212 0
 7862 00dd 4D01E7   		addq	%r12, %r15
 7863              	.LVL974:
3209:fltk-1.3.4-1/png/pngread.c ****          {
 7864              		.loc 1 3209 0
 7865 00e0 83EB01   		subl	$1, %ebx
 7866              	.LVL975:
 7867 00e3 75EB     		jne	.L906
 7868              	.LVL976:
 7869              	.LBE355:
3204:fltk-1.3.4-1/png/pngread.c ****       {
 7870              		.loc 1 3204 0
 7871 00e5 4183ED01 		subl	$1, %r13d
 7872              	.LVL977:
 7873 00e9 79CD     		jns	.L901
 7874              	.LVL978:
 7875              	.L916:
 7876              	.LBE354:
3218:fltk-1.3.4-1/png/pngread.c **** 
 7877              		.loc 1 3218 0
 7878 00eb 4883C418 		addq	$24, %rsp
 7879              		.cfi_remember_state
 7880              		.cfi_def_cfa_offset 56
 7881              	.LBB356:
3216:fltk-1.3.4-1/png/pngread.c ****    }
 7882              		.loc 1 3216 0
 7883 00ef B8010000 		movl	$1, %eax
 7883      00
 7884              	.LBE356:
3218:fltk-1.3.4-1/png/pngread.c **** 
 7885              		.loc 1 3218 0
 7886 00f4 5B       		popq	%rbx
 7887              		.cfi_def_cfa_offset 48
 7888 00f5 5D       		popq	%rbp
 7889              		.cfi_def_cfa_offset 40
 7890              	.LVL979:
 7891 00f6 415C     		popq	%r12
 7892              		.cfi_def_cfa_offset 32
 7893              	.LVL980:
 7894 00f8 415D     		popq	%r13
 7895              		.cfi_def_cfa_offset 24
 7896              	.LVL981:
 7897 00fa 415E     		popq	%r14
 7898              		.cfi_def_cfa_offset 16
 7899              	.LVL982:
 7900 00fc 415F     		popq	%r15
 7901              		.cfi_def_cfa_offset 8
 7902 00fe C3       		ret
 7903              	.LVL983:
 7904              	.L889:
 7905              		.cfi_restore_state
3131:fltk-1.3.4-1/png/pngread.c ****             info_ptr->bit_depth == 8 &&
 7906              		.loc 1 3131 0
 7907 00ff 66817B24 		cmpw	$1032, 36(%rbx)
 7907      0804
 7908 0105 751E     		jne	.L886
3132:fltk-1.3.4-1/png/pngread.c ****             png_ptr->screen_gamma == PNG_GAMMA_sRGB &&
 7909              		.loc 1 3132 0
 7910 0107 81BDB402 		cmpl	$220000, 692(%rbp)
 7910      0000605B 
 7910      0300
 7911 0111 7512     		jne	.L886
3133:fltk-1.3.4-1/png/pngread.c ****             image->colormap_entries == 256)
 7912              		.loc 1 3133 0
 7913 0113 488B4424 		movq	8(%rsp), %rax
 7913      08
 7914 0118 81781C00 		cmpl	$256, 28(%rax)
 7914      010000
 7915 011f 0F8464FF 		je	.L893
 7915      FFFF
 7916              	.L886:
3162:fltk-1.3.4-1/png/pngread.c ****    }
 7917              		.loc 1 3162 0
 7918 0125 BE000000 		movl	$.LC61, %esi
 7918      00
 7919 012a 4889EF   		movq	%rbp, %rdi
 7920 012d E8000000 		call	png_error
 7920      00
 7921              	.LVL984:
 7922              	.L887:
3118:fltk-1.3.4-1/png/pngread.c ****             info_ptr->color_type == PNG_COLOR_TYPE_GRAY) &&
 7923              		.loc 1 3118 0
 7924 0132 0FB64325 		movzbl	37(%rbx), %eax
 7925 0136 3C03     		cmpb	$3, %al
 7926 0138 7404     		je	.L903
 7927 013a 84C0     		testb	%al, %al
 7928 013c 75E7     		jne	.L886
 7929              	.L903:
3119:fltk-1.3.4-1/png/pngread.c ****             info_ptr->bit_depth == 8)
 7930              		.loc 1 3119 0
 7931 013e 807B2408 		cmpb	$8, 36(%rbx)
 7932 0142 75E1     		jne	.L886
 7933              	.LBB357:
3171:fltk-1.3.4-1/png/pngread.c **** 
 7934              		.loc 1 3171 0
 7935 0144 4D636610 		movslq	16(%r14), %r12
3170:fltk-1.3.4-1/png/pngread.c ****       ptrdiff_t row_bytes = display->row_stride;
 7936              		.loc 1 3170 0
 7937 0148 498B4608 		movq	8(%r14), %rax
 7938              	.LVL985:
3176:fltk-1.3.4-1/png/pngread.c ****       {
 7939              		.loc 1 3176 0
 7940 014c 4D85E4   		testq	%r12, %r12
 7941 014f 0F8945FF 		jns	.L894
 7941      FFFF
 7942              	.L914:
 7943              	.LVL986:
 7944              	.LBB351:
3179:fltk-1.3.4-1/png/pngread.c ****          first_row = png_voidcast(png_voidp, ptr);
 7945              		.loc 1 3179 0
 7946 0155 488B4C24 		movq	8(%rsp), %rcx
 7946      08
 7947 015a 8B5110   		movl	16(%rcx), %edx
 7948              	.LBE351:
3184:fltk-1.3.4-1/png/pngread.c ****    }
 7949              		.loc 1 3184 0
 7950 015d 4D896638 		movq	%r12, 56(%r14)
 7951              	.LBB352:
3179:fltk-1.3.4-1/png/pngread.c ****          first_row = png_voidcast(png_voidp, ptr);
 7952              		.loc 1 3179 0
 7953 0161 83EA01   		subl	$1, %edx
 7954 0164 490FAFD4 		imulq	%r12, %rdx
 7955 0168 4829D0   		subq	%rdx, %rax
 7956              	.LVL987:
 7957              	.LBE352:
 7958              	.LBE357:
3187:fltk-1.3.4-1/png/pngread.c ****    {
 7959              		.loc 1 3187 0
 7960 016b 4585ED   		testl	%r13d, %r13d
 7961              	.LBB358:
3183:fltk-1.3.4-1/png/pngread.c ****       display->row_bytes = row_bytes;
 7962              		.loc 1 3183 0
 7963 016e 49894630 		movq	%rax, 48(%r14)
 7964              	.LBE358:
3187:fltk-1.3.4-1/png/pngread.c ****    {
 7965              		.loc 1 3187 0
 7966 0172 0F8533FF 		jne	.L908
 7966      FFFF
 7967              	.LVL988:
 7968              	.L915:
 7969              	.LBB359:
3190:fltk-1.3.4-1/png/pngread.c **** 
 7970              		.loc 1 3190 0
 7971 0178 4889DE   		movq	%rbx, %rsi
 7972 017b 4889EF   		movq	%rbp, %rdi
 7973 017e E8000000 		call	png_get_rowbytes
 7973      00
 7974              	.LVL989:
 7975 0183 4889EF   		movq	%rbp, %rdi
 7976 0186 4889C6   		movq	%rax, %rsi
 7977 0189 E8000000 		call	png_malloc
 7977      00
 7978              	.LVL990:
3193:fltk-1.3.4-1/png/pngread.c ****       display->local_row = NULL;
 7979              		.loc 1 3193 0
 7980 018e 488B7C24 		movq	8(%rsp), %rdi
 7980      08
3190:fltk-1.3.4-1/png/pngread.c **** 
 7981              		.loc 1 3190 0
 7982 0193 4989C4   		movq	%rax, %r12
 7983              	.LVL991:
3193:fltk-1.3.4-1/png/pngread.c ****       display->local_row = NULL;
 7984              		.loc 1 3193 0
 7985 0196 4C89F2   		movq	%r14, %rdx
3192:fltk-1.3.4-1/png/pngread.c ****       result = png_safe_execute(image, png_image_read_and_map, display);
 7986              		.loc 1 3192 0
 7987 0199 49894628 		movq	%rax, 40(%r14)
3193:fltk-1.3.4-1/png/pngread.c ****       display->local_row = NULL;
 7988              		.loc 1 3193 0
 7989 019d BE000000 		movl	$png_image_read_and_map, %esi
 7989      00
 7990 01a2 E8000000 		call	png_safe_execute
 7990      00
 7991              	.LVL992:
3194:fltk-1.3.4-1/png/pngread.c ****       png_free(png_ptr, row);
 7992              		.loc 1 3194 0
 7993 01a7 49C74628 		movq	$0, 40(%r14)
 7993      00000000 
3195:fltk-1.3.4-1/png/pngread.c **** 
 7994              		.loc 1 3195 0
 7995 01af 4C89E6   		movq	%r12, %rsi
 7996 01b2 4889EF   		movq	%rbp, %rdi
3193:fltk-1.3.4-1/png/pngread.c ****       display->local_row = NULL;
 7997              		.loc 1 3193 0
 7998 01b5 89C3     		movl	%eax, %ebx
 7999              	.LVL993:
3195:fltk-1.3.4-1/png/pngread.c **** 
 8000              		.loc 1 3195 0
 8001 01b7 E8000000 		call	png_free
 8001      00
 8002              	.LVL994:
 8003              	.LBE359:
3218:fltk-1.3.4-1/png/pngread.c **** 
 8004              		.loc 1 3218 0
 8005 01bc 4883C418 		addq	$24, %rsp
 8006              		.cfi_remember_state
 8007              		.cfi_def_cfa_offset 56
 8008              	.LBB360:
3197:fltk-1.3.4-1/png/pngread.c ****    }
 8009              		.loc 1 3197 0
 8010 01c0 89D8     		movl	%ebx, %eax
 8011              	.LBE360:
3218:fltk-1.3.4-1/png/pngread.c **** 
 8012              		.loc 1 3218 0
 8013 01c2 5B       		popq	%rbx
 8014              		.cfi_def_cfa_offset 48
 8015              	.LVL995:
 8016 01c3 5D       		popq	%rbp
 8017              		.cfi_def_cfa_offset 40
 8018              	.LVL996:
 8019 01c4 415C     		popq	%r12
 8020              		.cfi_def_cfa_offset 32
 8021              	.LVL997:
 8022 01c6 415D     		popq	%r13
 8023              		.cfi_def_cfa_offset 24
 8024              	.LVL998:
 8025 01c8 415E     		popq	%r14
 8026              		.cfi_def_cfa_offset 16
 8027              	.LVL999:
 8028 01ca 415F     		popq	%r15
 8029              		.cfi_def_cfa_offset 8
 8030 01cc C3       		ret
 8031              	.LVL1000:
 8032              	.L891:
 8033              		.cfi_restore_state
3151:fltk-1.3.4-1/png/pngread.c ****             info_ptr->bit_depth == 8 &&
 8034              		.loc 1 3151 0
 8035 01cd 66817B24 		cmpw	$1544, 36(%rbx)
 8035      0806
 8036 01d3 0F854CFF 		jne	.L886
 8036      FFFF
3152:fltk-1.3.4-1/png/pngread.c ****             png_ptr->screen_gamma == PNG_GAMMA_sRGB &&
 8037              		.loc 1 3152 0
 8038 01d9 81BDB402 		cmpl	$220000, 692(%rbp)
 8038      0000605B 
 8038      0300
 8039 01e3 0F853CFF 		jne	.L886
 8039      FFFF
3153:fltk-1.3.4-1/png/pngread.c ****             image->colormap_entries == 244 /* 216 + 1 + 27 */)
 8040              		.loc 1 3153 0
 8041 01e9 488B4424 		movq	8(%rsp), %rax
 8041      08
 8042 01ee 81781CF4 		cmpl	$244, 28(%rax)
 8042      000000
 8043 01f5 0F848EFE 		je	.L893
 8043      FFFF
 8044 01fb E925FFFF 		jmp	.L886
 8044      FF
 8045              	.LVL1001:
 8046              		.p2align 4,,10
 8047              		.p2align 3
 8048              	.L913:
3107:fltk-1.3.4-1/png/pngread.c **** 
 8049              		.loc 1 3107 0
 8050 0200 4889EF   		movq	%rbp, %rdi
 8051 0203 E8000000 		call	png_set_interlace_handling
 8051      00
 8052              	.LVL1002:
 8053 0208 4189C5   		movl	%eax, %r13d
 8054              	.LVL1003:
 8055 020b E92AFEFF 		jmp	.L885
 8055      FF
 8056              		.cfi_endproc
 8057              	.LFE89:
 8059              		.section	.text.unlikely.png_image_read_colormapped
 8060              	.LCOLDE62:
 8061              		.section	.text.png_image_read_colormapped
 8062              	.LHOTE62:
 8063              		.section	.text.unlikely.png_image_read_and_map,"ax",@progbits
 8064              	.LCOLDB63:
 8065              		.section	.text.png_image_read_and_map,"ax",@progbits
 8066              	.LHOTB63:
 8067              		.p2align 4,,15
 8069              	png_image_read_and_map:
 8070              	.LFB88:
2901:fltk-1.3.4-1/png/pngread.c ****    png_image_read_control *display = png_voidcast(png_image_read_control*,
 8071              		.loc 1 2901 0
 8072              		.cfi_startproc
 8073              	.LVL1004:
 8074 0000 4157     		pushq	%r15
 8075              		.cfi_def_cfa_offset 16
 8076              		.cfi_offset 15, -16
 8077 0002 4156     		pushq	%r14
 8078              		.cfi_def_cfa_offset 24
 8079              		.cfi_offset 14, -24
 8080 0004 4989FE   		movq	%rdi, %r14
 8081 0007 4155     		pushq	%r13
 8082              		.cfi_def_cfa_offset 32
 8083              		.cfi_offset 13, -32
 8084 0009 4154     		pushq	%r12
 8085              		.cfi_def_cfa_offset 40
 8086              		.cfi_offset 12, -40
 8087 000b 55       		pushq	%rbp
 8088              		.cfi_def_cfa_offset 48
 8089              		.cfi_offset 6, -48
 8090 000c 53       		pushq	%rbx
 8091              		.cfi_def_cfa_offset 56
 8092              		.cfi_offset 3, -56
 8093 000d 4883EC48 		subq	$72, %rsp
 8094              		.cfi_def_cfa_offset 128
2904:fltk-1.3.4-1/png/pngread.c ****    png_structrp png_ptr = image->opaque->png_ptr;
 8095              		.loc 1 2904 0
 8096 0011 488B07   		movq	(%rdi), %rax
 8097              	.LVL1005:
2905:fltk-1.3.4-1/png/pngread.c ****    int passes;
 8098              		.loc 1 2905 0
 8099 0014 488B10   		movq	(%rax), %rdx
 8100 0017 488B3A   		movq	(%rdx), %rdi
 8101              	.LVL1006:
2912:fltk-1.3.4-1/png/pngread.c ****    {
 8102              		.loc 1 2912 0
 8103 001a 0FB69774 		movzbl	628(%rdi), %edx
 8103      020000
2905:fltk-1.3.4-1/png/pngread.c ****    int passes;
 8104              		.loc 1 2905 0
 8105 0021 48893C24 		movq	%rdi, (%rsp)
 8106              	.LVL1007:
2912:fltk-1.3.4-1/png/pngread.c ****    {
 8107              		.loc 1 2912 0
 8108 0025 84D2     		testb	%dl, %dl
 8109 0027 0F840C05 		je	.L977
 8109      0000
 8110 002d 80FA01   		cmpb	$1, %dl
 8111 0030 0F859101 		jne	.L991
 8111      0000
2919:fltk-1.3.4-1/png/pngread.c ****          break;
 8112              		.loc 1 2919 0
 8113 0036 C744243C 		movl	$7, 60(%rsp)
 8113      07000000 
 8114              	.L919:
 8115              	.LVL1008:
 8116              	.LBB361:
2927:fltk-1.3.4-1/png/pngread.c ****       png_uint_32  width = image->width;
 8117              		.loc 1 2927 0
 8118 003e 8B7010   		movl	16(%rax), %esi
2928:fltk-1.3.4-1/png/pngread.c ****       int          proc = display->colormap_processing;
 8119              		.loc 1 2928 0
 8120 0041 8B400C   		movl	12(%rax), %eax
 8121              	.LVL1009:
 8122 0044 89442438 		movl	%eax, 56(%rsp)
2929:fltk-1.3.4-1/png/pngread.c ****       png_bytep    first_row = png_voidcast(png_bytep, display->first_row);
 8123              		.loc 1 2929 0
 8124 0048 418B4648 		movl	72(%r14), %eax
2927:fltk-1.3.4-1/png/pngread.c ****       png_uint_32  width = image->width;
 8125              		.loc 1 2927 0
 8126 004c 89742408 		movl	%esi, 8(%rsp)
 8127              	.LVL1010:
2929:fltk-1.3.4-1/png/pngread.c ****       png_bytep    first_row = png_voidcast(png_bytep, display->first_row);
 8128              		.loc 1 2929 0
 8129 0050 89442430 		movl	%eax, 48(%rsp)
 8130              	.LVL1011:
2930:fltk-1.3.4-1/png/pngread.c ****       ptrdiff_t    step_row = display->row_bytes;
 8131              		.loc 1 2930 0
 8132 0054 498B4630 		movq	48(%r14), %rax
 8133              	.LVL1012:
 8134 0058 48894424 		movq	%rax, 24(%rsp)
 8134      18
 8135              	.LVL1013:
2931:fltk-1.3.4-1/png/pngread.c ****       int pass;
 8136              		.loc 1 2931 0
 8137 005d 498B4638 		movq	56(%r14), %rax
 8138              	.LVL1014:
 8139 0061 48894424 		movq	%rax, 32(%rsp)
 8139      20
 8140              	.LVL1015:
 8141 0066 31C0     		xorl	%eax, %eax
 8142              	.LVL1016:
 8143              	.LBB362:
2939:fltk-1.3.4-1/png/pngread.c ****          {
 8144              		.loc 1 2939 0
 8145 0068 80FA01   		cmpb	$1, %dl
 8146 006b 0F84C100 		je	.L921
 8146      0000
 8147              	.LVL1017:
 8148              		.p2align 4,,10
 8149 0071 0F1F8000 		.p2align 3
 8149      000000
 8150              	.L1005:
 8151 0078 83C001   		addl	$1, %eax
 8152              	.LVL1018:
2953:fltk-1.3.4-1/png/pngread.c ****             startx = 0;
 8153              		.loc 1 2953 0
 8154 007b 4531ED   		xorl	%r13d, %r13d
2955:fltk-1.3.4-1/png/pngread.c ****          }
 8155              		.loc 1 2955 0
 8156 007e C744240C 		movl	$1, 12(%rsp)
 8156      01000000 
 8157 0086 89442434 		movl	%eax, 52(%rsp)
 8158 008a C7442428 		movl	$1, 40(%rsp)
 8158      01000000 
2954:fltk-1.3.4-1/png/pngread.c ****             stepx = stepy = 1;
 8159              		.loc 1 2954 0
 8160 0092 31ED     		xorl	%ebp, %ebp
 8161              	.LVL1019:
 8162              	.L922:
2958:fltk-1.3.4-1/png/pngread.c ****          {
 8163              		.loc 1 2958 0 discriminator 1
 8164 0094 44396C24 		cmpl	%r13d, 8(%rsp)
 8164      08
 8165 0099 7675     		jbe	.L924
 8166 009b 448B7C24 		movl	56(%rsp), %r15d
 8166      38
 8167 00a0 89E8     		movl	%ebp, %eax
 8168 00a2 4489ED   		movl	%r13d, %ebp
 8169 00a5 48894424 		movq	%rax, 16(%rsp)
 8169      10
 8170              	.LVL1020:
 8171              	.L965:
 8172              	.LBB363:
2961:fltk-1.3.4-1/png/pngread.c ****             png_const_bytep end_row = outrow + width;
 8173              		.loc 1 2961 0
 8174 00aa 89E8     		movl	%ebp, %eax
 8175 00ac 488B7C24 		movq	24(%rsp), %rdi
 8175      18
2960:fltk-1.3.4-1/png/pngread.c ****             png_bytep outrow = first_row + y * step_row;
 8176              		.loc 1 2960 0
 8177 00b1 498B5E28 		movq	40(%r14), %rbx
 8178              	.LVL1021:
2961:fltk-1.3.4-1/png/pngread.c ****             png_const_bytep end_row = outrow + width;
 8179              		.loc 1 2961 0
 8180 00b5 480FAF44 		imulq	32(%rsp), %rax
 8180      2420
2965:fltk-1.3.4-1/png/pngread.c **** 
 8181              		.loc 1 2965 0
 8182 00bb 31D2     		xorl	%edx, %edx
 8183 00bd 4889DE   		movq	%rbx, %rsi
2961:fltk-1.3.4-1/png/pngread.c ****             png_const_bytep end_row = outrow + width;
 8184              		.loc 1 2961 0
 8185 00c0 4C8D2C07 		leaq	(%rdi,%rax), %r13
 8186              	.LVL1022:
2965:fltk-1.3.4-1/png/pngread.c **** 
 8187              		.loc 1 2965 0
 8188 00c4 488B3C24 		movq	(%rsp), %rdi
2962:fltk-1.3.4-1/png/pngread.c **** 
 8189              		.loc 1 2962 0
 8190 00c8 4F8D643D 		leaq	0(%r13,%r15), %r12
 8190      00
 8191              	.LVL1023:
2965:fltk-1.3.4-1/png/pngread.c **** 
 8192              		.loc 1 2965 0
 8193 00cd E8000000 		call	png_read_row
 8193      00
 8194              	.LVL1024:
2971:fltk-1.3.4-1/png/pngread.c ****             switch (proc)
 8195              		.loc 1 2971 0
 8196 00d2 488B4424 		movq	16(%rsp), %rax
 8196      10
2972:fltk-1.3.4-1/png/pngread.c ****             {
 8197              		.loc 1 2972 0
 8198 00d7 8B7C2430 		movl	48(%rsp), %edi
2971:fltk-1.3.4-1/png/pngread.c ****             switch (proc)
 8199              		.loc 1 2971 0
 8200 00db 4C01E8   		addq	%r13, %rax
 8201              	.LVL1025:
2972:fltk-1.3.4-1/png/pngread.c ****             {
 8202              		.loc 1 2972 0
 8203 00de 83FF02   		cmpl	$2, %edi
 8204 00e1 0F847503 		je	.L926
 8204      0000
 8205 00e7 0F8EEB00 		jle	.L1003
 8205      0000
 8206 00ed 8B742430 		movl	48(%rsp), %esi
 8207 00f1 83FE03   		cmpl	$3, %esi
 8208 00f4 0F84BF02 		je	.L929
 8208      0000
 8209 00fa 83FE04   		cmpl	$4, %esi
 8210 00fd 0F849E01 		je	.L1004
 8210      0000
 8211              	.L925:
 8212              	.LBE363:
2958:fltk-1.3.4-1/png/pngread.c ****          {
 8213              		.loc 1 2958 0
 8214 0103 036C240C 		addl	12(%rsp), %ebp
 8215              	.LVL1026:
 8216 0107 396C2408 		cmpl	%ebp, 8(%rsp)
 8217 010b 779D     		ja	.L965
 8218              	.LVL1027:
 8219 010d 0F1F00   		.p2align 4,,10
 8220              		.p2align 3
 8221              	.L924:
 8222 0110 8B442434 		movl	52(%rsp), %eax
 8223              	.LBE362:
2934:fltk-1.3.4-1/png/pngread.c ****       {
 8224              		.loc 1 2934 0 discriminator 2
 8225 0114 3944243C 		cmpl	%eax, 60(%rsp)
 8226 0118 0F8E0704 		jle	.L982
 8226      0000
 8227 011e 488B3C24 		movq	(%rsp), %rdi
 8228 0122 0FB69774 		movzbl	628(%rdi), %edx
 8228      020000
 8229              	.LVL1028:
 8230              	.LBB380:
2939:fltk-1.3.4-1/png/pngread.c ****          {
 8231              		.loc 1 2939 0
 8232 0129 80FA01   		cmpb	$1, %dl
 8233 012c 0F8546FF 		jne	.L1005
 8233      FFFF
 8234              	.L921:
2942:fltk-1.3.4-1/png/pngread.c ****                continue;
 8235              		.loc 1 2942 0
 8236 0132 83F801   		cmpl	$1, %eax
 8237 0135 0F860B04 		jbe	.L923
 8237      0000
 8238 013b 8D5801   		leal	1(%rax), %ebx
2942:fltk-1.3.4-1/png/pngread.c ****                continue;
 8239              		.loc 1 2942 0 is_stmt 0 discriminator 1
 8240 013e BF070000 		movl	$7, %edi
 8240      00
 8241 0143 89C6     		movl	%eax, %esi
 8242 0145 29C7     		subl	%eax, %edi
 8243 0147 83E601   		andl	$1, %esi
 8244 014a B9030000 		movl	$3, %ecx
 8244      00
 8245 014f 89DA     		movl	%ebx, %edx
 8246 0151 D1FF     		sarl	%edi
 8247 0153 89F5     		movl	%esi, %ebp
 8248 0155 D1FA     		sarl	%edx
 8249 0157 895C2434 		movl	%ebx, 52(%rsp)
 8250 015b 29D1     		subl	%edx, %ecx
 8251 015d BA010000 		movl	$1, %edx
 8251      00
 8252 0162 D3E5     		sall	%cl, %ebp
 8253 0164 89F9     		movl	%edi, %ecx
 8254 0166 D3E2     		sall	%cl, %edx
 8255 0168 83EA01   		subl	$1, %edx
 8256 016b 29EA     		subl	%ebp, %edx
 8257 016d 03542438 		addl	56(%rsp), %edx
 8258              	.L968:
2942:fltk-1.3.4-1/png/pngread.c ****                continue;
 8259              		.loc 1 2942 0 discriminator 8
 8260 0171 89F9     		movl	%edi, %ecx
 8261 0173 D3EA     		shrl	%cl, %edx
 8262 0175 85D2     		testl	%edx, %edx
 8263 0177 7497     		je	.L924
2946:fltk-1.3.4-1/png/pngread.c ****             y = PNG_PASS_START_ROW(pass);
 8264              		.loc 1 2946 0 is_stmt 1
 8265 0179 B9070000 		movl	$7, %ecx
 8265      00
 8266 017e BB010000 		movl	$1, %ebx
 8266      00
2947:fltk-1.3.4-1/png/pngread.c ****             stepy = PNG_PASS_ROW_OFFSET(pass);
 8267              		.loc 1 2947 0
 8268 0183 89C2     		movl	%eax, %edx
2946:fltk-1.3.4-1/png/pngread.c ****             y = PNG_PASS_START_ROW(pass);
 8269              		.loc 1 2946 0
 8270 0185 29C1     		subl	%eax, %ecx
2947:fltk-1.3.4-1/png/pngread.c ****             stepy = PNG_PASS_ROW_OFFSET(pass);
 8271              		.loc 1 2947 0
 8272 0187 D1FA     		sarl	%edx
 8273 0189 83F601   		xorl	$1, %esi
2946:fltk-1.3.4-1/png/pngread.c ****             y = PNG_PASS_START_ROW(pass);
 8274              		.loc 1 2946 0
 8275 018c D1F9     		sarl	%ecx
2945:fltk-1.3.4-1/png/pngread.c ****             stepx = PNG_PASS_COL_OFFSET(pass);
 8276              		.loc 1 2945 0
 8277 018e 83E507   		andl	$7, %ebp
 8278              	.LVL1029:
2946:fltk-1.3.4-1/png/pngread.c ****             y = PNG_PASS_START_ROW(pass);
 8279              		.loc 1 2946 0
 8280 0191 D3E3     		sall	%cl, %ebx
2947:fltk-1.3.4-1/png/pngread.c ****             stepy = PNG_PASS_ROW_OFFSET(pass);
 8281              		.loc 1 2947 0
 8282 0193 B9030000 		movl	$3, %ecx
 8282      00
 8283 0198 29D1     		subl	%edx, %ecx
2946:fltk-1.3.4-1/png/pngread.c ****             y = PNG_PASS_START_ROW(pass);
 8284              		.loc 1 2946 0
 8285 019a 895C2428 		movl	%ebx, 40(%rsp)
 8286              	.LVL1030:
2947:fltk-1.3.4-1/png/pngread.c ****             stepy = PNG_PASS_ROW_OFFSET(pass);
 8287              		.loc 1 2947 0
 8288 019e D3E6     		sall	%cl, %esi
 8289 01a0 83E607   		andl	$7, %esi
2948:fltk-1.3.4-1/png/pngread.c ****          }
 8290              		.loc 1 2948 0
 8291 01a3 83F802   		cmpl	$2, %eax
2947:fltk-1.3.4-1/png/pngread.c ****             stepy = PNG_PASS_ROW_OFFSET(pass);
 8292              		.loc 1 2947 0
 8293 01a6 4189F5   		movl	%esi, %r13d
 8294              	.LVL1031:
2948:fltk-1.3.4-1/png/pngread.c ****          }
 8295              		.loc 1 2948 0
 8296 01a9 0F86C203 		jbe	.L978
 8296      0000
2948:fltk-1.3.4-1/png/pngread.c ****          }
 8297              		.loc 1 2948 0 is_stmt 0 discriminator 1
 8298 01af 8D48FF   		leal	-1(%rax), %ecx
 8299 01b2 41BC0800 		movl	$8, %r12d
 8299      0000
 8300 01b8 D1F9     		sarl	%ecx
 8301 01ba 41D3FC   		sarl	%cl, %r12d
 8302 01bd 44896424 		movl	%r12d, 12(%rsp)
 8302      0C
 8303 01c2 E9CDFEFF 		jmp	.L922
 8303      FF
 8304              	.LVL1032:
 8305              	.L991:
 8306              	.LBE380:
 8307              	.LBE361:
2923:fltk-1.3.4-1/png/pngread.c ****    }
 8308              		.loc 1 2923 0 is_stmt 1
 8309 01c7 488B3C24 		movq	(%rsp), %rdi
 8310              	.LVL1033:
 8311 01cb BE000000 		movl	$.LC57, %esi
 8311      00
 8312 01d0 E8000000 		call	png_error
 8312      00
 8313              	.LVL1034:
 8314              		.p2align 4,,10
 8315 01d5 0F1F00   		.p2align 3
 8316              	.L1003:
 8317              	.LBB383:
 8318              	.LBB381:
 8319              	.LBB374:
2972:fltk-1.3.4-1/png/pngread.c ****             {
 8320              		.loc 1 2972 0
 8321 01d8 83FF01   		cmpl	$1, %edi
 8322 01db 0F8522FF 		jne	.L925
 8322      FFFF
 8323 01e1 4189ED   		movl	%ebp, %r13d
 8324 01e4 4889DD   		movq	%rbx, %rbp
 8325              	.LVL1035:
 8326 01e7 8B5C2428 		movl	40(%rsp), %ebx
 8327              	.LVL1036:
 8328 01eb 0F1F4400 		.p2align 4,,10
 8328      00
 8329              		.p2align 3
 8330              	.L938:
2975:fltk-1.3.4-1/png/pngread.c ****                   {
 8331              		.loc 1 2975 0 discriminator 1
 8332 01f0 4939C4   		cmpq	%rax, %r12
 8333 01f3 7721     		ja	.L949
 8334 01f5 EB62     		jmp	.L992
 8335              	.LVL1037:
 8336 01f7 660F1F84 		.p2align 4,,10
 8336      00000000 
 8336      00
 8337              		.p2align 3
 8338              	.L1006:
 8339 0200 69D6E700 		imull	$231, %esi, %edx
 8339      0000
 8340 0206 83EA80   		subl	$-128, %edx
 8341 0209 C1EA08   		shrl	$8, %edx
 8342              	.LVL1038:
 8343              	.L948:
 8344              	.LBB364:
2999:fltk-1.3.4-1/png/pngread.c ****                   }
 8345              		.loc 1 2999 0
 8346 020c 8810     		movb	%dl, (%rax)
 8347              	.LBE364:
2975:fltk-1.3.4-1/png/pngread.c ****                   {
 8348              		.loc 1 2975 0
 8349 020e 4801D8   		addq	%rbx, %rax
 8350              	.LVL1039:
 8351 0211 4C39E0   		cmpq	%r12, %rax
 8352 0214 7343     		jnb	.L992
 8353              	.LVL1040:
 8354              	.L949:
 8355              	.LBB365:
2978:fltk-1.3.4-1/png/pngread.c ****                      unsigned int alpha = *inrow++;
 8356              		.loc 1 2978 0
 8357 0216 0FB67500 		movzbl	0(%rbp), %esi
 8358              	.LVL1041:
 8359 021a 4883C502 		addq	$2, %rbp
 8360              	.LVL1042:
2979:fltk-1.3.4-1/png/pngread.c ****                      unsigned int entry;
 8361              		.loc 1 2979 0
 8362 021e 0FB64DFF 		movzbl	-1(%rbp), %ecx
 8363              	.LVL1043:
2986:fltk-1.3.4-1/png/pngread.c ****                      {
 8364              		.loc 1 2986 0
 8365 0222 81F9E500 		cmpl	$229, %ecx
 8365      0000
 8366 0228 77D6     		ja	.L1006
2990:fltk-1.3.4-1/png/pngread.c ****                      {
 8367              		.loc 1 2990 0
 8368 022a 83F919   		cmpl	$25, %ecx
 8369 022d BAE7FFFF 		movl	$-25, %edx
 8369      FF
 8370 0232 76D8     		jbe	.L948
 8371              	.LVL1044:
 8372 0234 8D8C8982 		leal	130(%rcx,%rcx,4), %ecx
 8372      000000
 8373              	.LVL1045:
 8374 023b 8D94B682 		leal	130(%rsi,%rsi,4), %edx
 8374      000000
 8375 0242 C1E908   		shrl	$8, %ecx
 8376 0245 C1EA08   		shrl	$8, %edx
 8377 0248 8D0C49   		leal	(%rcx,%rcx,2), %ecx
 8378 024b 8D544AE2 		leal	-30(%rdx,%rcx,2), %edx
 8379              	.LVL1046:
2999:fltk-1.3.4-1/png/pngread.c ****                   }
 8380              		.loc 1 2999 0
 8381 024f 8810     		movb	%dl, (%rax)
 8382              	.LVL1047:
 8383              	.LBE365:
2975:fltk-1.3.4-1/png/pngread.c ****                   {
 8384              		.loc 1 2975 0
 8385 0251 4801D8   		addq	%rbx, %rax
 8386              	.LVL1048:
 8387 0254 4C39E0   		cmpq	%r12, %rax
 8388 0257 72BD     		jb	.L949
 8389              	.LVL1049:
 8390              	.L992:
 8391              	.LBE374:
2958:fltk-1.3.4-1/png/pngread.c ****          {
 8392              		.loc 1 2958 0
 8393 0259 44036C24 		addl	12(%rsp), %r13d
 8393      0C
 8394              	.LVL1050:
 8395 025e 44396C24 		cmpl	%r13d, 8(%rsp)
 8395      08
 8396 0263 0F86A7FE 		jbe	.L924
 8396      FFFF
 8397              	.LBB375:
2961:fltk-1.3.4-1/png/pngread.c ****             png_const_bytep end_row = outrow + width;
 8398              		.loc 1 2961 0
 8399 0269 4489E8   		movl	%r13d, %eax
 8400              	.LVL1051:
2960:fltk-1.3.4-1/png/pngread.c ****             png_bytep outrow = first_row + y * step_row;
 8401              		.loc 1 2960 0
 8402 026c 498B6E28 		movq	40(%r14), %rbp
 8403              	.LVL1052:
2965:fltk-1.3.4-1/png/pngread.c **** 
 8404              		.loc 1 2965 0
 8405 0270 488B3C24 		movq	(%rsp), %rdi
2961:fltk-1.3.4-1/png/pngread.c ****             png_const_bytep end_row = outrow + width;
 8406              		.loc 1 2961 0
 8407 0274 480FAF44 		imulq	32(%rsp), %rax
 8407      2420
2965:fltk-1.3.4-1/png/pngread.c **** 
 8408              		.loc 1 2965 0
 8409 027a 31D2     		xorl	%edx, %edx
 8410 027c 4889EE   		movq	%rbp, %rsi
2961:fltk-1.3.4-1/png/pngread.c ****             png_const_bytep end_row = outrow + width;
 8411              		.loc 1 2961 0
 8412 027f 48034424 		addq	24(%rsp), %rax
 8412      18
 8413              	.LVL1053:
2962:fltk-1.3.4-1/png/pngread.c **** 
 8414              		.loc 1 2962 0
 8415 0284 4E8D2438 		leaq	(%rax,%r15), %r12
 8416              	.LVL1054:
 8417 0288 48894424 		movq	%rax, 40(%rsp)
 8417      28
 8418              	.LVL1055:
2965:fltk-1.3.4-1/png/pngread.c **** 
 8419              		.loc 1 2965 0
 8420 028d E8000000 		call	png_read_row
 8420      00
 8421              	.LVL1056:
2971:fltk-1.3.4-1/png/pngread.c ****             switch (proc)
 8422              		.loc 1 2971 0
 8423 0292 488B4424 		movq	40(%rsp), %rax
 8423      28
 8424 0297 48034424 		addq	16(%rsp), %rax
 8424      10
 8425              	.LVL1057:
 8426 029c E94FFFFF 		jmp	.L938
 8426      FF
 8427              	.LVL1058:
 8428              	.L1004:
 8429 02a1 4189ED   		movl	%ebp, %r13d
 8430 02a4 4889DD   		movq	%rbx, %rbp
 8431              	.LVL1059:
 8432 02a7 8B5C2428 		movl	40(%rsp), %ebx
 8433              	.LVL1060:
 8434 02ab 0F1F4400 		.p2align 4,,10
 8434      00
 8435              		.p2align 3
 8436              	.L935:
3029:fltk-1.3.4-1/png/pngread.c ****                   {
 8437              		.loc 1 3029 0 discriminator 1
 8438 02b0 4939C4   		cmpq	%rax, %r12
 8439 02b3 774F     		ja	.L963
 8440 02b5 EB6D     		jmp	.L995
 8441              	.LVL1061:
 8442 02b7 660F1F84 		.p2align 4,,10
 8442      00000000 
 8442      00
 8443              		.p2align 3
 8444              	.L1007:
 8445              	.LBB366:
3039:fltk-1.3.4-1/png/pngread.c ****                            inrow[2]);
 8446              		.loc 1 3039 0
 8447 02c0 0FB65500 		movzbl	0(%rbp), %edx
 8448              	.LVL1062:
 8449 02c4 8D949282 		leal	130(%rdx,%rdx,4), %edx
 8449      000000
 8450 02cb C1FA08   		sarl	$8, %edx
 8451 02ce 8D0C52   		leal	(%rdx,%rdx,2), %ecx
 8452 02d1 0FB65501 		movzbl	1(%rbp), %edx
 8453 02d5 8D949282 		leal	130(%rdx,%rdx,4), %edx
 8453      000000
 8454 02dc C1FA08   		sarl	$8, %edx
 8455 02df 8D144A   		leal	(%rdx,%rcx,2), %edx
 8456 02e2 8D0C52   		leal	(%rdx,%rdx,2), %ecx
 8457 02e5 0FB65502 		movzbl	2(%rbp), %edx
 8458 02e9 8D949282 		leal	130(%rdx,%rdx,4), %edx
 8458      000000
 8459 02f0 C1FA08   		sarl	$8, %edx
 8460 02f3 8D144A   		leal	(%rdx,%rcx,2), %edx
 8461 02f6 8810     		movb	%dl, (%rax)
 8462              	.LVL1063:
 8463              	.L959:
 8464              	.LBE366:
3029:fltk-1.3.4-1/png/pngread.c ****                   {
 8465              		.loc 1 3029 0
 8466 02f8 4801D8   		addq	%rbx, %rax
 8467              	.LVL1064:
 8468              	.LBB368:
3074:fltk-1.3.4-1/png/pngread.c ****                   }
 8469              		.loc 1 3074 0
 8470 02fb 4883C504 		addq	$4, %rbp
 8471              	.LVL1065:
 8472              	.LBE368:
3029:fltk-1.3.4-1/png/pngread.c ****                   {
 8473              		.loc 1 3029 0
 8474 02ff 4C39E0   		cmpq	%r12, %rax
 8475 0302 7320     		jnb	.L995
 8476              	.L963:
 8477              	.LBB369:
3031:fltk-1.3.4-1/png/pngread.c **** 
 8478              		.loc 1 3031 0
 8479 0304 0FB65503 		movzbl	3(%rbp), %edx
 8480              	.LVL1066:
3038:fltk-1.3.4-1/png/pngread.c ****                         *outrow = PNG_RGB_INDEX(inrow[0], inrow[1],
 8481              		.loc 1 3038 0
 8482 0308 81FAC300 		cmpl	$195, %edx
 8482      0000
 8483 030e 77B0     		ja	.L1007
3042:fltk-1.3.4-1/png/pngread.c ****                         *outrow = PNG_CMAP_RGB_ALPHA_BACKGROUND;
 8484              		.loc 1 3042 0
 8485 0310 83FA3F   		cmpl	$63, %edx
 8486 0313 775B     		ja	.L960
3043:fltk-1.3.4-1/png/pngread.c **** 
 8487              		.loc 1 3043 0
 8488 0315 C600D8   		movb	$-40, (%rax)
 8489              	.LBE369:
3029:fltk-1.3.4-1/png/pngread.c ****                   {
 8490              		.loc 1 3029 0
 8491 0318 4801D8   		addq	%rbx, %rax
 8492              	.LVL1067:
 8493              	.LBB370:
3074:fltk-1.3.4-1/png/pngread.c ****                   }
 8494              		.loc 1 3074 0
 8495 031b 4883C504 		addq	$4, %rbp
 8496              	.LVL1068:
 8497              	.LBE370:
3029:fltk-1.3.4-1/png/pngread.c ****                   {
 8498              		.loc 1 3029 0
 8499 031f 4C39E0   		cmpq	%r12, %rax
 8500 0322 72E0     		jb	.L963
 8501              	.LVL1069:
 8502              	.L995:
 8503              	.LBE375:
2958:fltk-1.3.4-1/png/pngread.c ****          {
 8504              		.loc 1 2958 0
 8505 0324 44036C24 		addl	12(%rsp), %r13d
 8505      0C
 8506              	.LVL1070:
 8507 0329 44396C24 		cmpl	%r13d, 8(%rsp)
 8507      08
 8508 032e 0F86DCFD 		jbe	.L924
 8508      FFFF
 8509              	.LBB376:
2961:fltk-1.3.4-1/png/pngread.c ****             png_const_bytep end_row = outrow + width;
 8510              		.loc 1 2961 0
 8511 0334 4489E8   		movl	%r13d, %eax
 8512              	.LVL1071:
2960:fltk-1.3.4-1/png/pngread.c ****             png_bytep outrow = first_row + y * step_row;
 8513              		.loc 1 2960 0
 8514 0337 498B6E28 		movq	40(%r14), %rbp
 8515              	.LVL1072:
2965:fltk-1.3.4-1/png/pngread.c **** 
 8516              		.loc 1 2965 0
 8517 033b 488B3C24 		movq	(%rsp), %rdi
2961:fltk-1.3.4-1/png/pngread.c ****             png_const_bytep end_row = outrow + width;
 8518              		.loc 1 2961 0
 8519 033f 480FAF44 		imulq	32(%rsp), %rax
 8519      2420
2965:fltk-1.3.4-1/png/pngread.c **** 
 8520              		.loc 1 2965 0
 8521 0345 31D2     		xorl	%edx, %edx
 8522 0347 4889EE   		movq	%rbp, %rsi
2961:fltk-1.3.4-1/png/pngread.c ****             png_const_bytep end_row = outrow + width;
 8523              		.loc 1 2961 0
 8524 034a 48034424 		addq	24(%rsp), %rax
 8524      18
 8525              	.LVL1073:
2962:fltk-1.3.4-1/png/pngread.c **** 
 8526              		.loc 1 2962 0
 8527 034f 4E8D2438 		leaq	(%rax,%r15), %r12
 8528              	.LVL1074:
 8529 0353 48894424 		movq	%rax, 40(%rsp)
 8529      28
 8530              	.LVL1075:
2965:fltk-1.3.4-1/png/pngread.c **** 
 8531              		.loc 1 2965 0
 8532 0358 E8000000 		call	png_read_row
 8532      00
 8533              	.LVL1076:
2971:fltk-1.3.4-1/png/pngread.c ****             switch (proc)
 8534              		.loc 1 2971 0
 8535 035d 488B4424 		movq	40(%rsp), %rax
 8535      28
 8536 0362 48034424 		addq	16(%rsp), %rax
 8536      10
 8537              	.LVL1077:
 8538 0367 E944FFFF 		jmp	.L935
 8538      FF
 8539              	.LVL1078:
 8540 036c 0F1F4000 		.p2align 4,,10
 8541              		.p2align 3
 8542              	.L960:
 8543              	.LBB371:
 8544              	.LBB367:
3064:fltk-1.3.4-1/png/pngread.c ****                         if (inrow[0] & 0x40) back_i += 9;
 8545              		.loc 1 3064 0
 8546 0370 0FB64D00 		movzbl	0(%rbp), %ecx
 8547 0374 84C9     		testb	%cl, %cl
 8548 0376 7830     		js	.L961
3065:fltk-1.3.4-1/png/pngread.c ****                         if (inrow[0] & 0x80) back_i += 3; /* green */
 8549              		.loc 1 3065 0
 8550 0378 F6C140   		testb	$64, %cl
 8551 037b 7413     		je	.L980
3067:fltk-1.3.4-1/png/pngread.c ****                         if (inrow[0] & 0x80) back_i += 1; /* blue */
 8552              		.loc 1 3067 0
 8553 037d BAE50000 		movl	$229, %edx
 8553      00
 8554              	.LVL1079:
 8555              	.L976:
3069:fltk-1.3.4-1/png/pngread.c **** 
 8556              		.loc 1 3069 0 discriminator 1
 8557 0382 83C201   		addl	$1, %edx
 8558              	.LVL1080:
3071:fltk-1.3.4-1/png/pngread.c ****                      }
 8559              		.loc 1 3071 0 discriminator 1
 8560 0385 8810     		movb	%dl, (%rax)
 8561              	.LVL1081:
 8562 0387 E96CFFFF 		jmp	.L959
 8562      FF
 8563              	.LVL1082:
 8564 038c 0F1F4000 		.p2align 4,,10
 8565              		.p2align 3
 8566              	.L980:
3053:fltk-1.3.4-1/png/pngread.c **** 
 8567              		.loc 1 3053 0
 8568 0390 BAD90000 		movl	$217, %edx
 8568      00
 8569              	.LVL1083:
 8570              	.L962:
3068:fltk-1.3.4-1/png/pngread.c ****                         if (inrow[0] & 0x40) back_i += 1;
 8571              		.loc 1 3068 0
 8572 0395 80F980   		cmpb	$-128, %cl
 8573 0398 83DAFF   		sbbl	$-1, %edx
 8574              	.LVL1084:
3071:fltk-1.3.4-1/png/pngread.c ****                      }
 8575              		.loc 1 3071 0
 8576 039b 8810     		movb	%dl, (%rax)
 8577              	.LVL1085:
 8578 039d E956FFFF 		jmp	.L959
 8578      FF
 8579              	.LVL1086:
 8580              		.p2align 4,,10
 8581 03a2 660F1F44 		.p2align 3
 8581      0000
 8582              	.L961:
3065:fltk-1.3.4-1/png/pngread.c ****                         if (inrow[0] & 0x80) back_i += 3; /* green */
 8583              		.loc 1 3065 0
 8584 03a8 F6C140   		testb	$64, %cl
 8585 03ab BAE50000 		movl	$229, %edx
 8585      00
 8586              	.LVL1087:
 8587 03b0 74E3     		je	.L962
 8588              	.LVL1088:
3068:fltk-1.3.4-1/png/pngread.c ****                         if (inrow[0] & 0x40) back_i += 1;
 8589              		.loc 1 3068 0
 8590 03b2 BAF20000 		movl	$242, %edx
 8590      00
 8591 03b7 EBC9     		jmp	.L976
 8592              	.LVL1089:
 8593              	.L929:
 8594 03b9 4189ED   		movl	%ebp, %r13d
 8595 03bc 4889DD   		movq	%rbx, %rbp
 8596              	.LVL1090:
 8597 03bf 8B5C2428 		movl	40(%rsp), %ebx
 8598              	.LVL1091:
 8599              		.p2align 4,,10
 8600 03c3 0F1F4400 		.p2align 3
 8600      00
 8601              	.L936:
 8602              	.LBE367:
 8603              	.LBE371:
3021:fltk-1.3.4-1/png/pngread.c ****                   {
 8604              		.loc 1 3021 0 discriminator 1
 8605 03c8 4939C4   		cmpq	%rax, %r12
 8606 03cb 7647     		jbe	.L994
 8607 03cd 0F1F00   		.p2align 4,,10
 8608              		.p2align 3
 8609              	.L956:
3023:fltk-1.3.4-1/png/pngread.c ****                      inrow += 3;
 8610              		.loc 1 3023 0 discriminator 2
 8611 03d0 0FB65500 		movzbl	0(%rbp), %edx
3024:fltk-1.3.4-1/png/pngread.c ****                   }
 8612              		.loc 1 3024 0 discriminator 2
 8613 03d4 4883C503 		addq	$3, %rbp
 8614              	.LVL1092:
3023:fltk-1.3.4-1/png/pngread.c ****                      inrow += 3;
 8615              		.loc 1 3023 0 discriminator 2
 8616 03d8 8D949282 		leal	130(%rdx,%rdx,4), %edx
 8616      000000
 8617 03df C1FA08   		sarl	$8, %edx
 8618 03e2 8D0C52   		leal	(%rdx,%rdx,2), %ecx
 8619 03e5 0FB655FE 		movzbl	-2(%rbp), %edx
 8620 03e9 8D949282 		leal	130(%rdx,%rdx,4), %edx
 8620      000000
 8621 03f0 C1FA08   		sarl	$8, %edx
 8622 03f3 8D144A   		leal	(%rdx,%rcx,2), %edx
 8623 03f6 8D0C52   		leal	(%rdx,%rdx,2), %ecx
 8624 03f9 0FB655FF 		movzbl	-1(%rbp), %edx
 8625              	.LVL1093:
 8626 03fd 8D949282 		leal	130(%rdx,%rdx,4), %edx
 8626      000000
 8627 0404 C1FA08   		sarl	$8, %edx
 8628 0407 8D144A   		leal	(%rdx,%rcx,2), %edx
 8629 040a 8810     		movb	%dl, (%rax)
3021:fltk-1.3.4-1/png/pngread.c ****                   {
 8630              		.loc 1 3021 0 discriminator 2
 8631 040c 4801D8   		addq	%rbx, %rax
 8632              	.LVL1094:
 8633 040f 4C39E0   		cmpq	%r12, %rax
 8634 0412 72BC     		jb	.L956
 8635              	.L994:
 8636              	.LBE376:
2958:fltk-1.3.4-1/png/pngread.c ****          {
 8637              		.loc 1 2958 0
 8638 0414 44036C24 		addl	12(%rsp), %r13d
 8638      0C
 8639              	.LVL1095:
 8640 0419 44396C24 		cmpl	%r13d, 8(%rsp)
 8640      08
 8641 041e 0F86ECFC 		jbe	.L924
 8641      FFFF
 8642              	.LBB377:
2961:fltk-1.3.4-1/png/pngread.c ****             png_const_bytep end_row = outrow + width;
 8643              		.loc 1 2961 0
 8644 0424 4489E8   		movl	%r13d, %eax
 8645              	.LVL1096:
2960:fltk-1.3.4-1/png/pngread.c ****             png_bytep outrow = first_row + y * step_row;
 8646              		.loc 1 2960 0
 8647 0427 498B6E28 		movq	40(%r14), %rbp
 8648              	.LVL1097:
2965:fltk-1.3.4-1/png/pngread.c **** 
 8649              		.loc 1 2965 0
 8650 042b 488B3C24 		movq	(%rsp), %rdi
2961:fltk-1.3.4-1/png/pngread.c ****             png_const_bytep end_row = outrow + width;
 8651              		.loc 1 2961 0
 8652 042f 480FAF44 		imulq	32(%rsp), %rax
 8652      2420
2965:fltk-1.3.4-1/png/pngread.c **** 
 8653              		.loc 1 2965 0
 8654 0435 31D2     		xorl	%edx, %edx
 8655 0437 4889EE   		movq	%rbp, %rsi
2961:fltk-1.3.4-1/png/pngread.c ****             png_const_bytep end_row = outrow + width;
 8656              		.loc 1 2961 0
 8657 043a 48034424 		addq	24(%rsp), %rax
 8657      18
 8658              	.LVL1098:
2962:fltk-1.3.4-1/png/pngread.c **** 
 8659              		.loc 1 2962 0
 8660 043f 4E8D2438 		leaq	(%rax,%r15), %r12
 8661              	.LVL1099:
 8662 0443 48894424 		movq	%rax, 40(%rsp)
 8662      28
 8663              	.LVL1100:
2965:fltk-1.3.4-1/png/pngread.c **** 
 8664              		.loc 1 2965 0
 8665 0448 E8000000 		call	png_read_row
 8665      00
 8666              	.LVL1101:
2971:fltk-1.3.4-1/png/pngread.c ****             switch (proc)
 8667              		.loc 1 2971 0
 8668 044d 488B4424 		movq	40(%rsp), %rax
 8668      28
 8669 0452 48034424 		addq	16(%rsp), %rax
 8669      10
 8670              	.LVL1102:
 8671 0457 E96CFFFF 		jmp	.L936
 8671      FF
 8672              	.LVL1103:
 8673              	.L926:
 8674 045c 4189ED   		movl	%ebp, %r13d
 8675 045f 4889DD   		movq	%rbx, %rbp
 8676              	.LVL1104:
 8677 0462 8B5C2428 		movl	40(%rsp), %ebx
 8678              	.LVL1105:
 8679 0466 4C89E1   		movq	%r12, %rcx
3004:fltk-1.3.4-1/png/pngread.c ****                   {
 8680              		.loc 1 3004 0 discriminator 1
 8681 0469 4839C1   		cmpq	%rax, %rcx
 8682 046c 4989DC   		movq	%rbx, %r12
 8683              	.LVL1106:
 8684 046f 771A     		ja	.L954
 8685 0471 E9870000 		jmp	.L1008
 8685      00
 8686              	.LVL1107:
 8687 0476 662E0F1F 		.p2align 4,,10
 8687      84000000 
 8687      0000
 8688              		.p2align 3
 8689              	.L1010:
 8690              	.LBB372:
3010:fltk-1.3.4-1/png/pngread.c **** 
 8691              		.loc 1 3010 0
 8692 0480 C600FE   		movb	$-2, (%rax)
 8693              	.LVL1108:
 8694              	.LBE372:
3004:fltk-1.3.4-1/png/pngread.c ****                   {
 8695              		.loc 1 3004 0
 8696 0483 4C01E0   		addq	%r12, %rax
 8697              	.LVL1109:
 8698 0486 4839C8   		cmpq	%rcx, %rax
 8699 0489 7323     		jnb	.L1009
 8700              	.L954:
 8701              	.LVL1110:
 8702 048b 4883C502 		addq	$2, %rbp
 8703              	.LVL1111:
 8704              	.LBB373:
3009:fltk-1.3.4-1/png/pngread.c ****                         *outrow = PNG_CMAP_TRANS_BACKGROUND;
 8705              		.loc 1 3009 0
 8706 048f 807DFF00 		cmpb	$0, -1(%rbp)
 8707 0493 74EB     		je	.L1010
3006:fltk-1.3.4-1/png/pngread.c ****                      png_byte alpha = *inrow++;
 8708              		.loc 1 3006 0
 8709 0495 0FB655FE 		movzbl	-2(%rbp), %edx
3013:fltk-1.3.4-1/png/pngread.c **** 
 8710              		.loc 1 3013 0
 8711 0499 BFFFFFFF 		movl	$-1, %edi
 8711      FF
 8712 049e 80FAFE   		cmpb	$-2, %dl
 8713 04a1 0F44D7   		cmove	%edi, %edx
 8714 04a4 8810     		movb	%dl, (%rax)
 8715              	.LVL1112:
 8716              	.LBE373:
3004:fltk-1.3.4-1/png/pngread.c ****                   {
 8717              		.loc 1 3004 0
 8718 04a6 4C01E0   		addq	%r12, %rax
 8719              	.LVL1113:
 8720 04a9 4839C8   		cmpq	%rcx, %rax
 8721 04ac 72DD     		jb	.L954
 8722              	.L1009:
 8723              	.LBE377:
2958:fltk-1.3.4-1/png/pngread.c ****          {
 8724              		.loc 1 2958 0
 8725 04ae 44036C24 		addl	12(%rsp), %r13d
 8725      0C
 8726              	.LVL1114:
 8727 04b3 44396C24 		cmpl	%r13d, 8(%rsp)
 8727      08
 8728 04b8 0F8652FC 		jbe	.L924
 8728      FFFF
 8729              	.LBB378:
2961:fltk-1.3.4-1/png/pngread.c ****             png_const_bytep end_row = outrow + width;
 8730              		.loc 1 2961 0
 8731 04be 4489E8   		movl	%r13d, %eax
 8732              	.LVL1115:
 8733 04c1 488B7424 		movq	24(%rsp), %rsi
 8733      18
2960:fltk-1.3.4-1/png/pngread.c ****             png_bytep outrow = first_row + y * step_row;
 8734              		.loc 1 2960 0
 8735 04c6 498B6E28 		movq	40(%r14), %rbp
 8736              	.LVL1116:
2961:fltk-1.3.4-1/png/pngread.c ****             png_const_bytep end_row = outrow + width;
 8737              		.loc 1 2961 0
 8738 04ca 480FAF44 		imulq	32(%rsp), %rax
 8738      2420
 8739 04d0 488D1C06 		leaq	(%rsi,%rax), %rbx
 8740              	.LVL1117:
 8741              	.L1001:
2965:fltk-1.3.4-1/png/pngread.c **** 
 8742              		.loc 1 2965 0
 8743 04d4 488B3C24 		movq	(%rsp), %rdi
2962:fltk-1.3.4-1/png/pngread.c **** 
 8744              		.loc 1 2962 0
 8745 04d8 4A8D0C3B 		leaq	(%rbx,%r15), %rcx
 8746              	.LVL1118:
2965:fltk-1.3.4-1/png/pngread.c **** 
 8747              		.loc 1 2965 0
 8748 04dc 31D2     		xorl	%edx, %edx
 8749 04de 4889EE   		movq	%rbp, %rsi
2962:fltk-1.3.4-1/png/pngread.c **** 
 8750              		.loc 1 2962 0
 8751 04e1 48894C24 		movq	%rcx, 40(%rsp)
 8751      28
 8752              	.LVL1119:
2965:fltk-1.3.4-1/png/pngread.c **** 
 8753              		.loc 1 2965 0
 8754 04e6 E8000000 		call	png_read_row
 8754      00
 8755              	.LVL1120:
2971:fltk-1.3.4-1/png/pngread.c ****             switch (proc)
 8756              		.loc 1 2971 0
 8757 04eb 488B4424 		movq	16(%rsp), %rax
 8757      10
 8758 04f0 488B4C24 		movq	40(%rsp), %rcx
 8758      28
 8759 04f5 4801D8   		addq	%rbx, %rax
 8760              	.LVL1121:
3004:fltk-1.3.4-1/png/pngread.c ****                   {
 8761              		.loc 1 3004 0
 8762 04f8 4839C1   		cmpq	%rax, %rcx
 8763 04fb 778E     		ja	.L954
 8764              	.L1008:
 8765              	.LBE378:
2958:fltk-1.3.4-1/png/pngread.c ****          {
 8766              		.loc 1 2958 0
 8767 04fd 44036C24 		addl	12(%rsp), %r13d
 8767      0C
 8768              	.LVL1122:
 8769 0502 44396C24 		cmpl	%r13d, 8(%rsp)
 8769      08
 8770 0507 0F8603FC 		jbe	.L924
 8770      FFFF
 8771              	.LBB379:
2961:fltk-1.3.4-1/png/pngread.c ****             png_const_bytep end_row = outrow + width;
 8772              		.loc 1 2961 0
 8773 050d 4489E8   		movl	%r13d, %eax
 8774              	.LVL1123:
 8775 0510 488B7C24 		movq	24(%rsp), %rdi
 8775      18
2960:fltk-1.3.4-1/png/pngread.c ****             png_bytep outrow = first_row + y * step_row;
 8776              		.loc 1 2960 0
 8777 0515 498B6E28 		movq	40(%r14), %rbp
 8778              	.LVL1124:
2961:fltk-1.3.4-1/png/pngread.c ****             png_const_bytep end_row = outrow + width;
 8779              		.loc 1 2961 0
 8780 0519 480FAF44 		imulq	32(%rsp), %rax
 8780      2420
 8781 051f 488D1C07 		leaq	(%rdi,%rax), %rbx
 8782 0523 EBAF     		jmp	.L1001
 8783              	.LVL1125:
 8784              	.L982:
 8785              	.LBE379:
 8786              	.LBE381:
 8787              	.LBE383:
3086:fltk-1.3.4-1/png/pngread.c **** 
 8788              		.loc 1 3086 0
 8789 0525 4883C448 		addq	$72, %rsp
 8790              		.cfi_remember_state
 8791              		.cfi_def_cfa_offset 56
 8792              	.LVL1126:
 8793 0529 B8010000 		movl	$1, %eax
 8793      00
 8794 052e 5B       		popq	%rbx
 8795              		.cfi_def_cfa_offset 48
 8796 052f 5D       		popq	%rbp
 8797              		.cfi_def_cfa_offset 40
 8798 0530 415C     		popq	%r12
 8799              		.cfi_def_cfa_offset 32
 8800 0532 415D     		popq	%r13
 8801              		.cfi_def_cfa_offset 24
 8802 0534 415E     		popq	%r14
 8803              		.cfi_def_cfa_offset 16
 8804              	.LVL1127:
 8805 0536 415F     		popq	%r15
 8806              		.cfi_def_cfa_offset 8
 8807 0538 C3       		ret
 8808              	.LVL1128:
 8809              	.L977:
 8810              		.cfi_restore_state
2915:fltk-1.3.4-1/png/pngread.c ****          break;
 8811              		.loc 1 2915 0
 8812 0539 C744243C 		movl	$1, 60(%rsp)
 8812      01000000 
 8813 0541 E9F8FAFF 		jmp	.L919
 8813      FF
 8814              	.LVL1129:
 8815              	.L923:
 8816 0546 8D7801   		leal	1(%rax), %edi
 8817              	.LBB384:
 8818              	.LBB382:
2942:fltk-1.3.4-1/png/pngread.c ****                continue;
 8819              		.loc 1 2942 0
 8820 0549 B9030000 		movl	$3, %ecx
 8820      00
 8821 054e 89C5     		movl	%eax, %ebp
 8822 0550 89C6     		movl	%eax, %esi
 8823 0552 897C2434 		movl	%edi, 52(%rsp)
 8824 0556 D1FF     		sarl	%edi
 8825 0558 29F9     		subl	%edi, %ecx
 8826 055a BF030000 		movl	$3, %edi
 8826      00
 8827 055f D3E5     		sall	%cl, %ebp
 8828 0561 89EA     		movl	%ebp, %edx
 8829 0563 F7D2     		notl	%edx
 8830 0565 83E207   		andl	$7, %edx
 8831 0568 03542438 		addl	56(%rsp), %edx
 8832 056c E900FCFF 		jmp	.L968
 8832      FF
 8833              	.LVL1130:
 8834              	.L978:
2948:fltk-1.3.4-1/png/pngread.c ****          }
 8835              		.loc 1 2948 0
 8836 0571 C744240C 		movl	$8, 12(%rsp)
 8836      08000000 
 8837 0579 E916FBFF 		jmp	.L922
 8837      FF
 8838              	.LBE382:
 8839              	.LBE384:
 8840              		.cfi_endproc
 8841              	.LFE88:
 8843              		.section	.text.unlikely.png_image_read_and_map
 8844              	.LCOLDE63:
 8845              		.section	.text.png_image_read_and_map
 8846              	.LHOTE63:
 8847              		.section	.text.unlikely.png_read_rows,"ax",@progbits
 8848              	.LCOLDB64:
 8849              		.section	.text.png_read_rows,"ax",@progbits
 8850              	.LHOTB64:
 8851              		.p2align 4,,15
 8852              		.globl	png_read_rows
 8854              	png_read_rows:
 8855              	.LFB63:
 638:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 i;
 8856              		.loc 1 638 0
 8857              		.cfi_startproc
 8858              	.LVL1131:
 645:fltk-1.3.4-1/png/pngread.c ****       return;
 8859              		.loc 1 645 0
 8860 0000 4885FF   		testq	%rdi, %rdi
 8861 0003 7452     		je	.L1042
 638:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 i;
 8862              		.loc 1 638 0
 8863 0005 4155     		pushq	%r13
 8864              		.cfi_def_cfa_offset 16
 8865              		.cfi_offset 13, -16
 8866 0007 4154     		pushq	%r12
 8867              		.cfi_def_cfa_offset 24
 8868              		.cfi_offset 12, -24
 8869 0009 4989FC   		movq	%rdi, %r12
 8870 000c 55       		pushq	%rbp
 8871              		.cfi_def_cfa_offset 32
 8872              		.cfi_offset 6, -32
 8873 000d 53       		pushq	%rbx
 8874              		.cfi_def_cfa_offset 40
 8875              		.cfi_offset 3, -40
 8876 000e 4889D5   		movq	%rdx, %rbp
 8877              	.LVL1132:
 8878 0011 4889F3   		movq	%rsi, %rbx
 8879 0014 4883EC08 		subq	$8, %rsp
 8880              		.cfi_def_cfa_offset 48
 650:fltk-1.3.4-1/png/pngread.c ****       for (i = 0; i < num_rows; i++)
 8881              		.loc 1 650 0
 8882 0018 4885F6   		testq	%rsi, %rsi
 8883 001b 7443     		je	.L1013
 8884 001d 4885D2   		testq	%rdx, %rdx
 8885 0020 743E     		je	.L1013
 8886              	.LVL1133:
 651:fltk-1.3.4-1/png/pngread.c ****       {
 8887              		.loc 1 651 0 discriminator 1
 8888 0022 85C9     		testl	%ecx, %ecx
 8889 0024 7427     		je	.L1011
 8890 0026 8D41FF   		leal	-1(%rcx), %eax
 8891 0029 4C8D6CC6 		leaq	8(%rsi,%rax,8), %r13
 8891      08
 8892              	.LVL1134:
 8893 002e 6690     		.p2align 4,,10
 8894              		.p2align 3
 8895              	.L1015:
 8896              	.LBB385:
 653:fltk-1.3.4-1/png/pngread.c ****          png_bytep dptr = *dp++;
 8897              		.loc 1 653 0 discriminator 3
 8898 0030 4883C308 		addq	$8, %rbx
 8899              	.LVL1135:
 654:fltk-1.3.4-1/png/pngread.c **** 
 8900              		.loc 1 654 0 discriminator 3
 8901 0034 4883C508 		addq	$8, %rbp
 8902              	.LVL1136:
 656:fltk-1.3.4-1/png/pngread.c ****       }
 8903              		.loc 1 656 0 discriminator 3
 8904 0038 488B55F8 		movq	-8(%rbp), %rdx
 8905 003c 488B73F8 		movq	-8(%rbx), %rsi
 8906 0040 4C89E7   		movq	%r12, %rdi
 8907 0043 E8000000 		call	png_read_row
 8907      00
 8908              	.LVL1137:
 8909              	.LBE385:
 651:fltk-1.3.4-1/png/pngread.c ****       {
 8910              		.loc 1 651 0 discriminator 3
 8911 0048 4939DD   		cmpq	%rbx, %r13
 8912 004b 75E3     		jne	.L1015
 8913              	.LVL1138:
 8914              	.L1011:
 674:fltk-1.3.4-1/png/pngread.c **** #endif /* SEQUENTIAL_READ */
 8915              		.loc 1 674 0
 8916 004d 4883C408 		addq	$8, %rsp
 8917              		.cfi_def_cfa_offset 40
 8918 0051 5B       		popq	%rbx
 8919              		.cfi_restore 3
 8920              		.cfi_def_cfa_offset 32
 8921 0052 5D       		popq	%rbp
 8922              		.cfi_restore 6
 8923              		.cfi_def_cfa_offset 24
 8924              	.LVL1139:
 8925 0053 415C     		popq	%r12
 8926              		.cfi_restore 12
 8927              		.cfi_def_cfa_offset 16
 8928              	.LVL1140:
 8929 0055 415D     		popq	%r13
 8930              		.cfi_restore 13
 8931              		.cfi_def_cfa_offset 8
 8932              	.L1042:
 8933 0057 F3C3     		rep ret
 8934              	.LVL1141:
 8935 0059 0F1F8000 		.p2align 4,,10
 8935      000000
 8936              		.p2align 3
 8937              	.L1013:
 8938              		.cfi_def_cfa_offset 48
 8939              		.cfi_offset 3, -40
 8940              		.cfi_offset 6, -32
 8941              		.cfi_offset 12, -24
 8942              		.cfi_offset 13, -16
 659:fltk-1.3.4-1/png/pngread.c ****       for (i = 0; i < num_rows; i++)
 8943              		.loc 1 659 0
 8944 0060 4885DB   		testq	%rbx, %rbx
 8945 0063 743B     		je	.L1016
 8946              	.LVL1142:
 660:fltk-1.3.4-1/png/pngread.c ****       {
 8947              		.loc 1 660 0 discriminator 1
 8948 0065 85C9     		testl	%ecx, %ecx
 8949 0067 74E4     		je	.L1011
 8950 0069 8D41FF   		leal	-1(%rcx), %eax
 8951 006c 488D6CC3 		leaq	8(%rbx,%rax,8), %rbp
 8951      08
 8952              	.LVL1143:
 8953              		.p2align 4,,10
 8954 0071 0F1F8000 		.p2align 3
 8954      000000
 8955              	.L1017:
 8956              	.LBB386:
 663:fltk-1.3.4-1/png/pngread.c ****          rp++;
 8957              		.loc 1 663 0 discriminator 3
 8958 0078 488B33   		movq	(%rbx), %rsi
 8959 007b 31D2     		xorl	%edx, %edx
 8960 007d 4C89E7   		movq	%r12, %rdi
 664:fltk-1.3.4-1/png/pngread.c ****       }
 8961              		.loc 1 664 0 discriminator 3
 8962 0080 4883C308 		addq	$8, %rbx
 8963              	.LVL1144:
 663:fltk-1.3.4-1/png/pngread.c ****          rp++;
 8964              		.loc 1 663 0 discriminator 3
 8965 0084 E8000000 		call	png_read_row
 8965      00
 8966              	.LVL1145:
 8967              	.LBE386:
 660:fltk-1.3.4-1/png/pngread.c ****       {
 8968              		.loc 1 660 0 discriminator 3
 8969 0089 4839DD   		cmpq	%rbx, %rbp
 8970 008c 75EA     		jne	.L1017
 674:fltk-1.3.4-1/png/pngread.c **** #endif /* SEQUENTIAL_READ */
 8971              		.loc 1 674 0
 8972 008e 4883C408 		addq	$8, %rsp
 8973              		.cfi_remember_state
 8974              		.cfi_def_cfa_offset 40
 8975 0092 5B       		popq	%rbx
 8976              		.cfi_restore 3
 8977              		.cfi_def_cfa_offset 32
 8978              	.LVL1146:
 8979 0093 5D       		popq	%rbp
 8980              		.cfi_restore 6
 8981              		.cfi_def_cfa_offset 24
 8982 0094 415C     		popq	%r12
 8983              		.cfi_restore 12
 8984              		.cfi_def_cfa_offset 16
 8985              	.LVL1147:
 8986 0096 415D     		popq	%r13
 8987              		.cfi_restore 13
 8988              		.cfi_def_cfa_offset 8
 8989 0098 EBBD     		jmp	.L1042
 8990              	.LVL1148:
 8991 009a 660F1F44 		.p2align 4,,10
 8991      0000
 8992              		.p2align 3
 8993              	.L1016:
 8994              		.cfi_restore_state
 667:fltk-1.3.4-1/png/pngread.c ****       for (i = 0; i < num_rows; i++)
 8995              		.loc 1 667 0
 8996 00a0 4885ED   		testq	%rbp, %rbp
 8997 00a3 74A8     		je	.L1011
 8998              	.LVL1149:
 668:fltk-1.3.4-1/png/pngread.c ****       {
 8999              		.loc 1 668 0 discriminator 1
 9000 00a5 85C9     		testl	%ecx, %ecx
 9001 00a7 74A4     		je	.L1011
 9002 00a9 8D41FF   		leal	-1(%rcx), %eax
 9003 00ac 488D5CC5 		leaq	8(%rbp,%rax,8), %rbx
 9003      08
 9004              	.LVL1150:
 9005              		.p2align 4,,10
 9006 00b1 0F1F8000 		.p2align 3
 9006      000000
 9007              	.L1018:
 9008              	.LBB387:
 671:fltk-1.3.4-1/png/pngread.c ****          dp++;
 9009              		.loc 1 671 0 discriminator 3
 9010 00b8 488B5500 		movq	0(%rbp), %rdx
 9011 00bc 31F6     		xorl	%esi, %esi
 9012 00be 4C89E7   		movq	%r12, %rdi
 672:fltk-1.3.4-1/png/pngread.c ****       }
 9013              		.loc 1 672 0 discriminator 3
 9014 00c1 4883C508 		addq	$8, %rbp
 9015              	.LVL1151:
 671:fltk-1.3.4-1/png/pngread.c ****          dp++;
 9016              		.loc 1 671 0 discriminator 3
 9017 00c5 E8000000 		call	png_read_row
 9017      00
 9018              	.LVL1152:
 9019              	.LBE387:
 668:fltk-1.3.4-1/png/pngread.c ****       {
 9020              		.loc 1 668 0 discriminator 3
 9021 00ca 4839DD   		cmpq	%rbx, %rbp
 9022 00cd 75E9     		jne	.L1018
 9023 00cf E979FFFF 		jmp	.L1011
 9023      FF
 9024              		.cfi_endproc
 9025              	.LFE63:
 9027              		.section	.text.unlikely.png_read_rows
 9028              	.LCOLDE64:
 9029              		.section	.text.png_read_rows
 9030              	.LHOTE64:
 9031              		.section	.rodata.str1.8
 9032 0462 00000000 		.align 8
 9032      0000
 9033              	.LC65:
 9034 0468 496E7465 		.string	"Interlace handling should be turned on when using png_read_image"
 9034      726C6163 
 9034      65206861 
 9034      6E646C69 
 9034      6E672073 
 9035              		.section	.text.unlikely.png_read_image,"ax",@progbits
 9036              	.LCOLDB66:
 9037              		.section	.text.png_read_image,"ax",@progbits
 9038              	.LHOTB66:
 9039              		.p2align 4,,15
 9040              		.globl	png_read_image
 9042              	png_read_image:
 9043              	.LFB64:
 692:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 i, image_height;
 9044              		.loc 1 692 0
 9045              		.cfi_startproc
 9046              	.LVL1153:
 699:fltk-1.3.4-1/png/pngread.c ****       return;
 9047              		.loc 1 699 0
 9048 0000 4885FF   		testq	%rdi, %rdi
 9049 0003 0F849500 		je	.L1059
 9049      0000
 692:fltk-1.3.4-1/png/pngread.c ****    png_uint_32 i, image_height;
 9050              		.loc 1 692 0
 9051 0009 4157     		pushq	%r15
 9052              		.cfi_def_cfa_offset 16
 9053              		.cfi_offset 15, -16
 9054 000b 4156     		pushq	%r14
 9055              		.cfi_def_cfa_offset 24
 9056              		.cfi_offset 14, -24
 9057 000d 4155     		pushq	%r13
 9058              		.cfi_def_cfa_offset 32
 9059              		.cfi_offset 13, -32
 9060 000f 4154     		pushq	%r12
 9061              		.cfi_def_cfa_offset 40
 9062              		.cfi_offset 12, -40
 9063 0011 55       		pushq	%rbp
 9064              		.cfi_def_cfa_offset 48
 9065              		.cfi_offset 6, -48
 9066 0012 53       		pushq	%rbx
 9067              		.cfi_def_cfa_offset 56
 9068              		.cfi_offset 3, -56
 9069 0013 4889FB   		movq	%rdi, %rbx
 9070 0016 4883EC18 		subq	$24, %rsp
 9071              		.cfi_def_cfa_offset 80
 703:fltk-1.3.4-1/png/pngread.c ****    {
 9072              		.loc 1 703 0
 9073 001a F6873001 		testb	$64, 304(%rdi)
 9073      000040
 9074 0021 48897424 		movq	%rsi, 8(%rsp)
 9074      08
 9075 0026 0F849800 		je	.L1060
 9075      0000
 711:fltk-1.3.4-1/png/pngread.c ****           (png_ptr->transformations & PNG_INTERLACE) == 0)
 9076              		.loc 1 711 0
 9077 002c 80BF7402 		cmpb	$0, 628(%rdi)
 9077      000000
 9078 0033 756B     		jne	.L1061
 9079              	.LVL1154:
 9080              	.L1047:
 727:fltk-1.3.4-1/png/pngread.c ****    }
 9081              		.loc 1 727 0
 9082 0035 4889DF   		movq	%rbx, %rdi
 9083 0038 E8000000 		call	png_set_interlace_handling
 9083      00
 9084              	.LVL1155:
 9085 003d 4189C7   		movl	%eax, %r15d
 9086              	.LVL1156:
 9087              	.L1046:
 739:fltk-1.3.4-1/png/pngread.c ****    {
 9088              		.loc 1 739 0
 9089 0040 4585FF   		testl	%r15d, %r15d
 737:fltk-1.3.4-1/png/pngread.c **** 
 9090              		.loc 1 737 0
 9091 0043 448BB3FC 		movl	508(%rbx), %r14d
 9091      010000
 9092              	.LVL1157:
 739:fltk-1.3.4-1/png/pngread.c ****    {
 9093              		.loc 1 739 0
 9094 004a 7E44     		jle	.L1043
 9095 004c 488B4C24 		movq	8(%rsp), %rcx
 9095      08
 9096 0051 418D46FF 		leal	-1(%r14), %eax
 9097 0055 4531E4   		xorl	%r12d, %r12d
 9098 0058 488D6CC1 		leaq	8(%rcx,%rax,8), %rbp
 9098      08
 9099              	.LVL1158:
 9100 005d 0F1F00   		.p2align 4,,10
 9101              		.p2align 3
 9102              	.L1048:
 742:fltk-1.3.4-1/png/pngread.c ****       {
 9103              		.loc 1 742 0 discriminator 1
 9104 0060 4585F6   		testl	%r14d, %r14d
 9105 0063 4C8B6C24 		movq	8(%rsp), %r13
 9105      08
 9106 0068 741D     		je	.L1051
 9107              	.LVL1159:
 9108 006a 660F1F44 		.p2align 4,,10
 9108      0000
 9109              		.p2align 3
 9110              	.L1054:
 744:fltk-1.3.4-1/png/pngread.c ****          rp++;
 9111              		.loc 1 744 0 discriminator 3
 9112 0070 498B7500 		movq	0(%r13), %rsi
 9113 0074 31D2     		xorl	%edx, %edx
 9114 0076 4889DF   		movq	%rbx, %rdi
 745:fltk-1.3.4-1/png/pngread.c ****       }
 9115              		.loc 1 745 0 discriminator 3
 9116 0079 4983C508 		addq	$8, %r13
 9117              	.LVL1160:
 744:fltk-1.3.4-1/png/pngread.c ****          rp++;
 9118              		.loc 1 744 0 discriminator 3
 9119 007d E8000000 		call	png_read_row
 9119      00
 9120              	.LVL1161:
 742:fltk-1.3.4-1/png/pngread.c ****       {
 9121              		.loc 1 742 0 discriminator 3
 9122 0082 4939ED   		cmpq	%rbp, %r13
 9123 0085 75E9     		jne	.L1054
 9124              	.L1051:
 739:fltk-1.3.4-1/png/pngread.c ****    {
 9125              		.loc 1 739 0
 9126 0087 4183C401 		addl	$1, %r12d
 9127              	.LVL1162:
 9128 008b 4539E7   		cmpl	%r12d, %r15d
 9129 008e 75D0     		jne	.L1048
 9130              	.LVL1163:
 9131              	.L1043:
 748:fltk-1.3.4-1/png/pngread.c **** #endif /* SEQUENTIAL_READ */
 9132              		.loc 1 748 0
 9133 0090 4883C418 		addq	$24, %rsp
 9134              		.cfi_def_cfa_offset 56
 9135 0094 5B       		popq	%rbx
 9136              		.cfi_restore 3
 9137              		.cfi_def_cfa_offset 48
 9138              	.LVL1164:
 9139 0095 5D       		popq	%rbp
 9140              		.cfi_restore 6
 9141              		.cfi_def_cfa_offset 40
 9142 0096 415C     		popq	%r12
 9143              		.cfi_restore 12
 9144              		.cfi_def_cfa_offset 32
 9145 0098 415D     		popq	%r13
 9146              		.cfi_restore 13
 9147              		.cfi_def_cfa_offset 24
 9148 009a 415E     		popq	%r14
 9149              		.cfi_restore 14
 9150              		.cfi_def_cfa_offset 16
 9151              	.LVL1165:
 9152 009c 415F     		popq	%r15
 9153              		.cfi_restore 15
 9154              		.cfi_def_cfa_offset 8
 9155              	.LVL1166:
 9156              	.L1059:
 9157 009e F3C3     		rep ret
 9158              	.LVL1167:
 9159              	.L1061:
 9160              		.cfi_def_cfa_offset 80
 9161              		.cfi_offset 3, -56
 9162              		.cfi_offset 6, -48
 9163              		.cfi_offset 12, -40
 9164              		.cfi_offset 13, -32
 9165              		.cfi_offset 14, -24
 9166              		.cfi_offset 15, -16
 711:fltk-1.3.4-1/png/pngread.c ****           (png_ptr->transformations & PNG_INTERLACE) == 0)
 9167              		.loc 1 711 0 discriminator 1
 9168 00a0 F6873401 		testb	$2, 308(%rdi)
 9168      000002
 9169 00a7 758C     		jne	.L1047
 718:fltk-1.3.4-1/png/pngread.c ****             "using png_read_image");
 9170              		.loc 1 718 0
 9171 00a9 BE000000 		movl	$.LC65, %esi
 9171      00
 9172              	.LVL1168:
 9173 00ae E8000000 		call	png_warning
 9173      00
 9174              	.LVL1169:
 721:fltk-1.3.4-1/png/pngread.c ****       }
 9175              		.loc 1 721 0
 9176 00b3 8B83FC01 		movl	508(%rbx), %eax
 9176      0000
 9177 00b9 89830002 		movl	%eax, 512(%rbx)
 9177      0000
 9178 00bf E971FFFF 		jmp	.L1047
 9178      FF
 9179              	.LVL1170:
 9180              	.L1060:
 705:fltk-1.3.4-1/png/pngread.c ****       /* And make sure transforms are initialized. */
 9181              		.loc 1 705 0
 9182 00c4 E8000000 		call	png_set_interlace_handling
 9182      00
 9183              	.LVL1171:
 707:fltk-1.3.4-1/png/pngread.c ****    }
 9184              		.loc 1 707 0
 9185 00c9 4889DF   		movq	%rbx, %rdi
 705:fltk-1.3.4-1/png/pngread.c ****       /* And make sure transforms are initialized. */
 9186              		.loc 1 705 0
 9187 00cc 4189C7   		movl	%eax, %r15d
 9188              	.LVL1172:
 707:fltk-1.3.4-1/png/pngread.c ****    }
 9189              		.loc 1 707 0
 9190 00cf E8000000 		call	png_start_read_image
 9190      00
 9191              	.LVL1173:
 9192 00d4 E967FFFF 		jmp	.L1046
 9192      FF
 9193              		.cfi_endproc
 9194              	.LFE64:
 9196              		.section	.text.unlikely.png_read_image
 9197              	.LCOLDE66:
 9198              		.section	.text.png_read_image
 9199              	.LHOTE66:
 9200              		.section	.rodata.str1.8
 9201 04a9 00000000 		.align 8
 9201      000000
 9202              	.LC67:
 9203 04b0 52656164 		.string	"Read palette index exceeding num_palette"
 9203      2070616C 
 9203      65747465 
 9203      20696E64 
 9203      65782065 
 9204              		.section	.text.unlikely.png_read_end,"ax",@progbits
 9205              	.LCOLDB68:
 9206              		.section	.text.png_read_end,"ax",@progbits
 9207              	.LHOTB68:
 9208              		.p2align 4,,15
 9209              		.globl	png_read_end
 9211              	png_read_end:
 9212              	.LFB65:
 758:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED
 9213              		.loc 1 758 0
 9214              		.cfi_startproc
 9215              	.LVL1174:
 765:fltk-1.3.4-1/png/pngread.c ****       return;
 9216              		.loc 1 765 0
 9217 0000 4885FF   		testq	%rdi, %rdi
 9218 0003 0F84F501 		je	.L1108
 9218      0000
 758:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED
 9219              		.loc 1 758 0
 9220 0009 4155     		pushq	%r13
 9221              		.cfi_def_cfa_offset 16
 9222              		.cfi_offset 13, -16
 9223 000b 4154     		pushq	%r12
 9224              		.cfi_def_cfa_offset 24
 9225              		.cfi_offset 12, -24
 9226 000d 4989F5   		movq	%rsi, %r13
 9227 0010 55       		pushq	%rbp
 9228              		.cfi_def_cfa_offset 32
 9229              		.cfi_offset 6, -32
 9230 0011 53       		pushq	%rbx
 9231              		.cfi_def_cfa_offset 40
 9232              		.cfi_offset 3, -40
 772:fltk-1.3.4-1/png/pngread.c **** #endif
 9233              		.loc 1 772 0
 9234 0012 BE544144 		movl	$1229209940, %esi
 9234      49
 9235              	.LVL1175:
 9236 0017 4889FD   		movq	%rdi, %rbp
 758:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED
 9237              		.loc 1 758 0
 9238 001a 4883EC18 		subq	$24, %rsp
 9239              		.cfi_def_cfa_offset 64
 772:fltk-1.3.4-1/png/pngread.c **** #endif
 9240              		.loc 1 772 0
 9241 001e E8000000 		call	png_chunk_unknown_handling
 9241      00
 9242              	.LVL1176:
 9243 0023 85C0     		testl	%eax, %eax
 9244 0025 0F84A502 		je	.L1111
 9244      0000
 778:fltk-1.3.4-1/png/pngread.c ****       png_ptr->num_palette_max > png_ptr->num_palette)
 9245              		.loc 1 778 0
 9246 002b 80BD7702 		cmpb	$3, 631(%rbp)
 9246      000003
 9247 0032 754C     		jne	.L1096
 9248 0034 E9AC0200 		jmp	.L1112
 9248      00
 9249              	.LVL1177:
 9250 0039 0F1F8000 		.p2align 4,,10
 9250      000000
 9251              		.p2align 3
 9252              	.L1117:
 9253              	.LBB391:
 9254              	.LBB392:
 9255              	.LBB393:
 800:fltk-1.3.4-1/png/pngread.c ****          {
 9256              		.loc 1 800 0
 9257 0040 81FB5441 		cmpl	$1229209940, %ebx
 9257      4449
 9258 0046 0F84F401 		je	.L1113
 9258      0000
 806:fltk-1.3.4-1/png/pngread.c ****          if (chunk_name == png_PLTE)
 9259              		.loc 1 806 0
 9260 004c 89C1     		movl	%eax, %ecx
 9261 004e 4489E2   		movl	%r12d, %edx
 9262 0051 4C89EE   		movq	%r13, %rsi
 9263 0054 4889EF   		movq	%rbp, %rdi
 9264 0057 E8000000 		call	png_handle_unknown
 9264      00
 9265              	.LVL1178:
 807:fltk-1.3.4-1/png/pngread.c ****             png_ptr->mode |= PNG_HAVE_PLTE;
 9266              		.loc 1 807 0
 9267 005c 81FB4554 		cmpl	$1347179589, %ebx
 9267      4C50
 808:fltk-1.3.4-1/png/pngread.c ****       }
 9268              		.loc 1 808 0
 9269 0062 8B852C01 		movl	300(%rbp), %eax
 9269      0000
 807:fltk-1.3.4-1/png/pngread.c ****             png_ptr->mode |= PNG_HAVE_PLTE;
 9270              		.loc 1 807 0
 9271 0068 750E     		jne	.L1067
 808:fltk-1.3.4-1/png/pngread.c ****       }
 9272              		.loc 1 808 0
 9273 006a 83C802   		orl	$2, %eax
 9274 006d 89852C01 		movl	%eax, 300(%rbp)
 9274      0000
 9275              		.p2align 4,,10
 9276 0073 0F1F4400 		.p2align 3
 9276      00
 9277              	.L1067:
 9278              	.LBE393:
 914:fltk-1.3.4-1/png/pngread.c **** }
 9279              		.loc 1 914 0
 9280 0078 A810     		testb	$16, %al
 9281 007a 0F857401 		jne	.L1114
 9281      0000
 9282              	.LVL1179:
 9283              	.L1096:
 9284              	.LBB394:
 785:fltk-1.3.4-1/png/pngread.c ****       png_uint_32 chunk_name = png_ptr->chunk_name;
 9285              		.loc 1 785 0
 9286 0080 4889EF   		movq	%rbp, %rdi
 9287 0083 E8000000 		call	png_read_chunk_header
 9287      00
 9288              	.LVL1180:
 786:fltk-1.3.4-1/png/pngread.c **** 
 9289              		.loc 1 786 0
 9290 0088 8B9D1802 		movl	536(%rbp), %ebx
 9290      0000
 785:fltk-1.3.4-1/png/pngread.c ****       png_uint_32 chunk_name = png_ptr->chunk_name;
 9291              		.loc 1 785 0
 9292 008e 4189C4   		movl	%eax, %r12d
 9293              	.LVL1181:
 788:fltk-1.3.4-1/png/pngread.c ****          png_handle_IEND(png_ptr, info_ptr, length);
 9294              		.loc 1 788 0
 9295 0091 81FB444E 		cmpl	$1229278788, %ebx
 9295      4549
 9296 0097 0F846301 		je	.L1115
 9296      0000
 791:fltk-1.3.4-1/png/pngread.c ****          png_handle_IHDR(png_ptr, info_ptr, length);
 9297              		.loc 1 791 0
 9298 009d 81FB5244 		cmpl	$1229472850, %ebx
 9298      4849
 9299 00a3 0F847701 		je	.L1116
 9299      0000
 794:fltk-1.3.4-1/png/pngread.c ****          png_crc_finish(png_ptr, length);
 9300              		.loc 1 794 0
 9301 00a9 4D85ED   		testq	%r13, %r13
 9302 00ac 0F842901 		je	.L1077
 9302      0000
 798:fltk-1.3.4-1/png/pngread.c ****       {
 9303              		.loc 1 798 0
 9304 00b2 89DE     		movl	%ebx, %esi
 9305 00b4 4889EF   		movq	%rbp, %rdi
 9306 00b7 E8000000 		call	png_chunk_unknown_handling
 9306      00
 9307              	.LVL1182:
 9308 00bc 85C0     		testl	%eax, %eax
 9309 00be 7580     		jne	.L1117
 812:fltk-1.3.4-1/png/pngread.c ****       {
 9310              		.loc 1 812 0
 9311 00c0 81FB5441 		cmpl	$1229209940, %ebx
 9311      4449
 9312 00c6 0F84F400 		je	.L1118
 9312      0000
 823:fltk-1.3.4-1/png/pngread.c ****          png_handle_PLTE(png_ptr, info_ptr, length);
 9313              		.loc 1 823 0
 9314 00cc 81FB4554 		cmpl	$1347179589, %ebx
 9314      4C50
 9315 00d2 0F84B801 		je	.L1119
 9315      0000
 827:fltk-1.3.4-1/png/pngread.c ****          png_handle_bKGD(png_ptr, info_ptr, length);
 9316              		.loc 1 827 0
 9317 00d8 81FB4447 		cmpl	$1649100612, %ebx
 9317      4B62
 9318 00de 0F84CC01 		je	.L1120
 9318      0000
 832:fltk-1.3.4-1/png/pngread.c ****          png_handle_cHRM(png_ptr, info_ptr, length);
 9319              		.loc 1 832 0
 9320 00e4 81FB4D52 		cmpl	$1665684045, %ebx
 9320      4863
 9321 00ea 0F842002 		je	.L1121
 9321      0000
 837:fltk-1.3.4-1/png/pngread.c ****          png_handle_gAMA(png_ptr, info_ptr, length);
 9322              		.loc 1 837 0
 9323 00f0 81FB414D 		cmpl	$1732332865, %ebx
 9323      4167
 9324 00f6 0F844C02 		je	.L1122
 9324      0000
 842:fltk-1.3.4-1/png/pngread.c ****          png_handle_hIST(png_ptr, info_ptr, length);
 9325              		.loc 1 842 0
 9326 00fc 81FB5453 		cmpl	$1749635924, %ebx
 9326      4968
 9327 0102 0F846002 		je	.L1123
 9327      0000
 847:fltk-1.3.4-1/png/pngread.c ****          png_handle_oFFs(png_ptr, info_ptr, length);
 9328              		.loc 1 847 0
 9329 0108 81FB7346 		cmpl	$1866876531, %ebx
 9329      466F
 9330 010e 0F847402 		je	.L1124
 9330      0000
 852:fltk-1.3.4-1/png/pngread.c ****          png_handle_pCAL(png_ptr, info_ptr, length);
 9331              		.loc 1 852 0
 9332 0114 81FB4C41 		cmpl	$1883455820, %ebx
 9332      4370
 9333 011a 0F848802 		je	.L1125
 9333      0000
 857:fltk-1.3.4-1/png/pngread.c ****          png_handle_sCAL(png_ptr, info_ptr, length);
 9334              		.loc 1 857 0
 9335 0120 81FB4C41 		cmpl	$1933787468, %ebx
 9335      4373
 9336 0126 0F849C02 		je	.L1126
 9336      0000
 862:fltk-1.3.4-1/png/pngread.c ****          png_handle_pHYs(png_ptr, info_ptr, length);
 9337              		.loc 1 862 0
 9338 012c 81FB7359 		cmpl	$1883789683, %ebx
 9338      4870
 9339 0132 0F84A902 		je	.L1127
 9339      0000
 867:fltk-1.3.4-1/png/pngread.c ****          png_handle_sBIT(png_ptr, info_ptr, length);
 9340              		.loc 1 867 0
 9341 0138 81FB5449 		cmpl	$1933723988, %ebx
 9341      4273
 9342 013e 0F84E501 		je	.L1128
 9342      0000
 872:fltk-1.3.4-1/png/pngread.c ****          png_handle_sRGB(png_ptr, info_ptr, length);
 9343              		.loc 1 872 0
 9344 0144 81FB4247 		cmpl	$1934772034, %ebx
 9344      5273
 9345 014a 0F84AA02 		je	.L1129
 9345      0000
 877:fltk-1.3.4-1/png/pngread.c ****          png_handle_iCCP(png_ptr, info_ptr, length);
 9346              		.loc 1 877 0
 9347 0150 81FB5043 		cmpl	$1766015824, %ebx
 9347      4369
 9348 0156 0F84B702 		je	.L1130
 9348      0000
 882:fltk-1.3.4-1/png/pngread.c ****          png_handle_sPLT(png_ptr, info_ptr, length);
 9349              		.loc 1 882 0
 9350 015c 81FB544C 		cmpl	$1934642260, %ebx
 9350      5073
 9351 0162 0F84DD02 		je	.L1131
 9351      0000
 887:fltk-1.3.4-1/png/pngread.c ****          png_handle_tEXt(png_ptr, info_ptr, length);
 9352              		.loc 1 887 0
 9353 0168 81FB7458 		cmpl	$1950701684, %ebx
 9353      4574
 9354 016e 0F84EA02 		je	.L1132
 9354      0000
 892:fltk-1.3.4-1/png/pngread.c ****          png_handle_tIME(png_ptr, info_ptr, length);
 9355              		.loc 1 892 0
 9356 0174 81FB454D 		cmpl	$1950960965, %ebx
 9356      4974
 9357 017a 0F84F702 		je	.L1133
 9357      0000
 897:fltk-1.3.4-1/png/pngread.c ****          png_handle_tRNS(png_ptr, info_ptr, length);
 9358              		.loc 1 897 0
 9359 0180 81FB534E 		cmpl	$1951551059, %ebx
 9359      5274
 9360 0186 0F84A002 		je	.L1134
 9360      0000
 902:fltk-1.3.4-1/png/pngread.c ****          png_handle_zTXt(png_ptr, info_ptr, length);
 9361              		.loc 1 902 0
 9362 018c 81FB7458 		cmpl	$2052348020, %ebx
 9362      547A
 9363 0192 0F84F802 		je	.L1135
 9363      0000
 912:fltk-1.3.4-1/png/pngread.c ****             PNG_HANDLE_CHUNK_AS_DEFAULT);
 9364              		.loc 1 912 0
 9365 0198 31C9     		xorl	%ecx, %ecx
 907:fltk-1.3.4-1/png/pngread.c ****          png_handle_iTXt(png_ptr, info_ptr, length);
 9366              		.loc 1 907 0
 9367 019a 81FB7458 		cmpl	$1767135348, %ebx
 9367      5469
 9368 01a0 0F85AA00 		jne	.L1109
 9368      0000
 908:fltk-1.3.4-1/png/pngread.c **** #endif
 9369              		.loc 1 908 0
 9370 01a6 4489E2   		movl	%r12d, %edx
 9371 01a9 4C89EE   		movq	%r13, %rsi
 9372 01ac 4889EF   		movq	%rbp, %rdi
 9373 01af E8000000 		call	png_handle_iTXt
 9373      00
 9374              	.LVL1183:
 9375 01b4 8B852C01 		movl	300(%rbp), %eax
 9375      0000
 9376 01ba E9B9FEFF 		jmp	.L1067
 9376      FF
 9377              	.LVL1184:
 9378 01bf 90       		.p2align 4,,10
 9379              		.p2align 3
 9380              	.L1118:
 817:fltk-1.3.4-1/png/pngread.c ****              (png_ptr->mode & PNG_HAVE_CHUNK_AFTER_IDAT) != 0)
 9381              		.loc 1 817 0
 9382 01c0 4585E4   		testl	%r12d, %r12d
 9383 01c3 7509     		jne	.L1076
 9384 01c5 F6852D01 		testb	$32, 301(%rbp)
 9384      000020
 9385 01cc 740D     		je	.L1077
 9386              	.L1076:
 819:fltk-1.3.4-1/png/pngread.c **** 
 9387              		.loc 1 819 0
 9388 01ce BE000000 		movl	$.LC6, %esi
 9388      00
 9389 01d3 4889EF   		movq	%rbp, %rdi
 9390 01d6 E8000000 		call	png_benign_error
 9390      00
 9391              	.LVL1185:
 9392              	.L1077:
 821:fltk-1.3.4-1/png/pngread.c ****       }
 9393              		.loc 1 821 0
 9394 01db 4489E6   		movl	%r12d, %esi
 9395 01de 4889EF   		movq	%rbp, %rdi
 9396 01e1 E8000000 		call	png_crc_finish
 9396      00
 9397              	.LVL1186:
 9398 01e6 8B852C01 		movl	300(%rbp), %eax
 9398      0000
 9399              	.LBE394:
 914:fltk-1.3.4-1/png/pngread.c **** }
 9400              		.loc 1 914 0
 9401 01ec A810     		testb	$16, %al
 9402 01ee 0F848CFE 		je	.L1096
 9402      FFFF
 9403              	.L1114:
 9404              	.LBE392:
 9405              	.LBE391:
 915:fltk-1.3.4-1/png/pngread.c **** #endif /* SEQUENTIAL_READ */
 9406              		.loc 1 915 0
 9407 01f4 4883C418 		addq	$24, %rsp
 9408              		.cfi_def_cfa_offset 40
 9409 01f8 5B       		popq	%rbx
 9410              		.cfi_restore 3
 9411              		.cfi_def_cfa_offset 32
 9412              	.LVL1187:
 9413 01f9 5D       		popq	%rbp
 9414              		.cfi_restore 6
 9415              		.cfi_def_cfa_offset 24
 9416              	.LVL1188:
 9417 01fa 415C     		popq	%r12
 9418              		.cfi_restore 12
 9419              		.cfi_def_cfa_offset 16
 9420              	.LVL1189:
 9421 01fc 415D     		popq	%r13
 9422              		.cfi_restore 13
 9423              		.cfi_def_cfa_offset 8
 9424              	.LVL1190:
 9425              	.L1108:
 9426 01fe F3C3     		rep ret
 9427              	.LVL1191:
 9428              		.p2align 4,,10
 9429              		.p2align 3
 9430              	.L1115:
 9431              		.cfi_def_cfa_offset 64
 9432              		.cfi_offset 3, -40
 9433              		.cfi_offset 6, -32
 9434              		.cfi_offset 12, -24
 9435              		.cfi_offset 13, -16
 9436              	.LBB399:
 9437              	.LBB397:
 9438              	.LBB395:
 789:fltk-1.3.4-1/png/pngread.c **** 
 9439              		.loc 1 789 0
 9440 0200 89C2     		movl	%eax, %edx
 9441 0202 4C89EE   		movq	%r13, %rsi
 9442 0205 4889EF   		movq	%rbp, %rdi
 9443 0208 E8000000 		call	png_handle_IEND
 9443      00
 9444              	.LVL1192:
 9445 020d 8B852C01 		movl	300(%rbp), %eax
 9445      0000
 9446 0213 E960FEFF 		jmp	.L1067
 9446      FF
 9447              	.LVL1193:
 9448 0218 0F1F8400 		.p2align 4,,10
 9448      00000000 
 9449              		.p2align 3
 9450              	.L1116:
 792:fltk-1.3.4-1/png/pngread.c **** 
 9451              		.loc 1 792 0
 9452 0220 89C2     		movl	%eax, %edx
 9453 0222 4C89EE   		movq	%r13, %rsi
 9454 0225 4889EF   		movq	%rbp, %rdi
 9455 0228 E8000000 		call	png_handle_IHDR
 9455      00
 9456              	.LVL1194:
 9457 022d 8B852C01 		movl	300(%rbp), %eax
 9457      0000
 9458 0233 E940FEFF 		jmp	.L1067
 9458      FF
 9459              	.LVL1195:
 9460 0238 0F1F8400 		.p2align 4,,10
 9460      00000000 
 9461              		.p2align 3
 9462              	.L1113:
 802:fltk-1.3.4-1/png/pngread.c ****                 (png_ptr->mode & PNG_HAVE_CHUNK_AFTER_IDAT) != 0)
 9463              		.loc 1 802 0
 9464 0240 4585E4   		testl	%r12d, %r12d
 9465 0243 752B     		jne	.L1072
 9466 0245 F6852D01 		testb	$32, 301(%rbp)
 9466      000020
 9467 024c 7522     		jne	.L1072
 9468              	.LVL1196:
 9469              	.L1073:
 806:fltk-1.3.4-1/png/pngread.c ****          if (chunk_name == png_PLTE)
 9470              		.loc 1 806 0
 9471 024e 89C1     		movl	%eax, %ecx
 9472              	.L1109:
 912:fltk-1.3.4-1/png/pngread.c ****             PNG_HANDLE_CHUNK_AS_DEFAULT);
 9473              		.loc 1 912 0
 9474 0250 4489E2   		movl	%r12d, %edx
 9475 0253 4C89EE   		movq	%r13, %rsi
 9476 0256 4889EF   		movq	%rbp, %rdi
 9477 0259 E8000000 		call	png_handle_unknown
 9477      00
 9478              	.LVL1197:
 9479 025e 8B852C01 		movl	300(%rbp), %eax
 9479      0000
 9480 0264 E90FFEFF 		jmp	.L1067
 9480      FF
 9481              	.LVL1198:
 9482 0269 0F1F8000 		.p2align 4,,10
 9482      000000
 9483              		.p2align 3
 9484              	.L1072:
 804:fltk-1.3.4-1/png/pngread.c ****          }
 9485              		.loc 1 804 0
 9486 0270 BE000000 		movl	$.LC6, %esi
 9486      00
 9487 0275 4889EF   		movq	%rbp, %rdi
 9488 0278 8944240C 		movl	%eax, 12(%rsp)
 9489 027c E8000000 		call	png_benign_error
 9489      00
 9490              	.LVL1199:
 9491 0281 8B44240C 		movl	12(%rsp), %eax
 9492 0285 EBC7     		jmp	.L1073
 9493              	.LVL1200:
 9494 0287 660F1F84 		.p2align 4,,10
 9494      00000000 
 9494      00
 9495              		.p2align 3
 9496              	.L1119:
 824:fltk-1.3.4-1/png/pngread.c **** 
 9497              		.loc 1 824 0
 9498 0290 4489E2   		movl	%r12d, %edx
 9499 0293 4C89EE   		movq	%r13, %rsi
 9500 0296 4889EF   		movq	%rbp, %rdi
 9501 0299 E8000000 		call	png_handle_PLTE
 9501      00
 9502              	.LVL1201:
 9503 029e 8B852C01 		movl	300(%rbp), %eax
 9503      0000
 9504 02a4 E9CFFDFF 		jmp	.L1067
 9504      FF
 9505              	.LVL1202:
 9506 02a9 0F1F8000 		.p2align 4,,10
 9506      000000
 9507              		.p2align 3
 9508              	.L1120:
 828:fltk-1.3.4-1/png/pngread.c **** #endif
 9509              		.loc 1 828 0
 9510 02b0 4489E2   		movl	%r12d, %edx
 9511 02b3 4C89EE   		movq	%r13, %rsi
 9512 02b6 4889EF   		movq	%rbp, %rdi
 9513 02b9 E8000000 		call	png_handle_bKGD
 9513      00
 9514              	.LVL1203:
 9515 02be 8B852C01 		movl	300(%rbp), %eax
 9515      0000
 9516 02c4 E9AFFDFF 		jmp	.L1067
 9516      FF
 9517              	.LVL1204:
 9518 02c9 0F1F8000 		.p2align 4,,10
 9518      000000
 9519              		.p2align 3
 9520              	.L1111:
 9521              	.LBE395:
 9522              	.LBE397:
 9523              	.LBE399:
 774:fltk-1.3.4-1/png/pngread.c **** 
 9524              		.loc 1 774 0
 9525 02d0 4889EF   		movq	%rbp, %rdi
 9526 02d3 E8000000 		call	png_read_finish_IDAT
 9526      00
 9527              	.LVL1205:
 778:fltk-1.3.4-1/png/pngread.c ****       png_ptr->num_palette_max > png_ptr->num_palette)
 9528              		.loc 1 778 0
 9529 02d8 80BD7702 		cmpb	$3, 631(%rbp)
 9529      000003
 9530 02df 0F859BFD 		jne	.L1096
 9530      FFFF
 9531              	.L1112:
 778:fltk-1.3.4-1/png/pngread.c ****       png_ptr->num_palette_max > png_ptr->num_palette)
 9532              		.loc 1 778 0 is_stmt 0 discriminator 1
 9533 02e5 0FB78568 		movzwl	616(%rbp), %eax
 9533      020000
 9534 02ec 39856C02 		cmpl	%eax, 620(%rbp)
 9534      0000
 9535 02f2 0F8E88FD 		jle	.L1096
 9535      FFFF
 780:fltk-1.3.4-1/png/pngread.c **** #endif
 9536              		.loc 1 780 0 is_stmt 1
 9537 02f8 BE000000 		movl	$.LC67, %esi
 9537      00
 9538 02fd 4889EF   		movq	%rbp, %rdi
 9539 0300 E8000000 		call	png_benign_error
 9539      00
 9540              	.LVL1206:
 9541 0305 E976FDFF 		jmp	.L1096
 9541      FF
 9542              	.LVL1207:
 9543 030a 660F1F44 		.p2align 4,,10
 9543      0000
 9544              		.p2align 3
 9545              	.L1121:
 9546              	.LBB400:
 9547              	.LBB398:
 9548              	.LBB396:
 833:fltk-1.3.4-1/png/pngread.c **** #endif
 9549              		.loc 1 833 0
 9550 0310 4489E2   		movl	%r12d, %edx
 9551 0313 4C89EE   		movq	%r13, %rsi
 9552 0316 4889EF   		movq	%rbp, %rdi
 9553 0319 E8000000 		call	png_handle_cHRM
 9553      00
 9554              	.LVL1208:
 9555 031e 8B852C01 		movl	300(%rbp), %eax
 9555      0000
 9556 0324 E94FFDFF 		jmp	.L1067
 9556      FF
 9557              	.LVL1209:
 9558              	.L1128:
 868:fltk-1.3.4-1/png/pngread.c **** #endif
 9559              		.loc 1 868 0
 9560 0329 4489E2   		movl	%r12d, %edx
 9561 032c 4C89EE   		movq	%r13, %rsi
 9562 032f 4889EF   		movq	%rbp, %rdi
 9563 0332 E8000000 		call	png_handle_sBIT
 9563      00
 9564              	.LVL1210:
 9565 0337 8B852C01 		movl	300(%rbp), %eax
 9565      0000
 9566 033d E936FDFF 		jmp	.L1067
 9566      FF
 9567              	.LVL1211:
 9568              		.p2align 4,,10
 9569 0342 660F1F44 		.p2align 3
 9569      0000
 9570              	.L1122:
 838:fltk-1.3.4-1/png/pngread.c **** #endif
 9571              		.loc 1 838 0
 9572 0348 4489E2   		movl	%r12d, %edx
 9573 034b 4C89EE   		movq	%r13, %rsi
 9574 034e 4889EF   		movq	%rbp, %rdi
 9575 0351 E8000000 		call	png_handle_gAMA
 9575      00
 9576              	.LVL1212:
 9577 0356 8B852C01 		movl	300(%rbp), %eax
 9577      0000
 9578 035c E917FDFF 		jmp	.L1067
 9578      FF
 9579              	.LVL1213:
 9580              		.p2align 4,,10
 9581 0361 0F1F8000 		.p2align 3
 9581      000000
 9582              	.L1123:
 843:fltk-1.3.4-1/png/pngread.c **** #endif
 9583              		.loc 1 843 0
 9584 0368 4489E2   		movl	%r12d, %edx
 9585 036b 4C89EE   		movq	%r13, %rsi
 9586 036e 4889EF   		movq	%rbp, %rdi
 9587 0371 E8000000 		call	png_handle_hIST
 9587      00
 9588              	.LVL1214:
 9589 0376 8B852C01 		movl	300(%rbp), %eax
 9589      0000
 9590 037c E9F7FCFF 		jmp	.L1067
 9590      FF
 9591              	.LVL1215:
 9592              		.p2align 4,,10
 9593 0381 0F1F8000 		.p2align 3
 9593      000000
 9594              	.L1124:
 848:fltk-1.3.4-1/png/pngread.c **** #endif
 9595              		.loc 1 848 0
 9596 0388 4489E2   		movl	%r12d, %edx
 9597 038b 4C89EE   		movq	%r13, %rsi
 9598 038e 4889EF   		movq	%rbp, %rdi
 9599 0391 E8000000 		call	png_handle_oFFs
 9599      00
 9600              	.LVL1216:
 9601 0396 8B852C01 		movl	300(%rbp), %eax
 9601      0000
 9602 039c E9D7FCFF 		jmp	.L1067
 9602      FF
 9603              	.LVL1217:
 9604              		.p2align 4,,10
 9605 03a1 0F1F8000 		.p2align 3
 9605      000000
 9606              	.L1125:
 853:fltk-1.3.4-1/png/pngread.c **** #endif
 9607              		.loc 1 853 0
 9608 03a8 4489E2   		movl	%r12d, %edx
 9609 03ab 4C89EE   		movq	%r13, %rsi
 9610 03ae 4889EF   		movq	%rbp, %rdi
 9611 03b1 E8000000 		call	png_handle_pCAL
 9611      00
 9612              	.LVL1218:
 9613 03b6 8B852C01 		movl	300(%rbp), %eax
 9613      0000
 9614 03bc E9B7FCFF 		jmp	.L1067
 9614      FF
 9615              	.LVL1219:
 9616              		.p2align 4,,10
 9617 03c1 0F1F8000 		.p2align 3
 9617      000000
 9618              	.L1126:
 858:fltk-1.3.4-1/png/pngread.c **** #endif
 9619              		.loc 1 858 0
 9620 03c8 4489E2   		movl	%r12d, %edx
 9621 03cb 4C89EE   		movq	%r13, %rsi
 9622 03ce 4889EF   		movq	%rbp, %rdi
 9623 03d1 E8000000 		call	png_handle_sCAL
 9623      00
 9624              	.LVL1220:
 9625 03d6 8B852C01 		movl	300(%rbp), %eax
 9625      0000
 9626 03dc E997FCFF 		jmp	.L1067
 9626      FF
 9627              	.LVL1221:
 9628              	.L1127:
 863:fltk-1.3.4-1/png/pngread.c **** #endif
 9629              		.loc 1 863 0
 9630 03e1 4489E2   		movl	%r12d, %edx
 9631 03e4 4C89EE   		movq	%r13, %rsi
 9632 03e7 4889EF   		movq	%rbp, %rdi
 9633 03ea E8000000 		call	png_handle_pHYs
 9633      00
 9634              	.LVL1222:
 9635 03ef 8B852C01 		movl	300(%rbp), %eax
 9635      0000
 9636 03f5 E97EFCFF 		jmp	.L1067
 9636      FF
 9637              	.LVL1223:
 9638              	.L1129:
 873:fltk-1.3.4-1/png/pngread.c **** #endif
 9639              		.loc 1 873 0
 9640 03fa 4489E2   		movl	%r12d, %edx
 9641 03fd 4C89EE   		movq	%r13, %rsi
 9642 0400 4889EF   		movq	%rbp, %rdi
 9643 0403 E8000000 		call	png_handle_sRGB
 9643      00
 9644              	.LVL1224:
 9645 0408 8B852C01 		movl	300(%rbp), %eax
 9645      0000
 9646 040e E965FCFF 		jmp	.L1067
 9646      FF
 9647              	.LVL1225:
 9648              	.L1130:
 878:fltk-1.3.4-1/png/pngread.c **** #endif
 9649              		.loc 1 878 0
 9650 0413 4489E2   		movl	%r12d, %edx
 9651 0416 4C89EE   		movq	%r13, %rsi
 9652 0419 4889EF   		movq	%rbp, %rdi
 9653 041c E8000000 		call	png_handle_iCCP
 9653      00
 9654              	.LVL1226:
 9655 0421 8B852C01 		movl	300(%rbp), %eax
 9655      0000
 9656 0427 E94CFCFF 		jmp	.L1067
 9656      FF
 9657              	.LVL1227:
 9658              	.L1134:
 898:fltk-1.3.4-1/png/pngread.c **** #endif
 9659              		.loc 1 898 0
 9660 042c 4489E2   		movl	%r12d, %edx
 9661 042f 4C89EE   		movq	%r13, %rsi
 9662 0432 4889EF   		movq	%rbp, %rdi
 9663 0435 E8000000 		call	png_handle_tRNS
 9663      00
 9664              	.LVL1228:
 9665 043a 8B852C01 		movl	300(%rbp), %eax
 9665      0000
 9666 0440 E933FCFF 		jmp	.L1067
 9666      FF
 9667              	.LVL1229:
 9668              	.L1131:
 883:fltk-1.3.4-1/png/pngread.c **** #endif
 9669              		.loc 1 883 0
 9670 0445 4489E2   		movl	%r12d, %edx
 9671 0448 4C89EE   		movq	%r13, %rsi
 9672 044b 4889EF   		movq	%rbp, %rdi
 9673 044e E8000000 		call	png_handle_sPLT
 9673      00
 9674              	.LVL1230:
 9675 0453 8B852C01 		movl	300(%rbp), %eax
 9675      0000
 9676 0459 E91AFCFF 		jmp	.L1067
 9676      FF
 9677              	.LVL1231:
 9678              	.L1132:
 888:fltk-1.3.4-1/png/pngread.c **** #endif
 9679              		.loc 1 888 0
 9680 045e 4489E2   		movl	%r12d, %edx
 9681 0461 4C89EE   		movq	%r13, %rsi
 9682 0464 4889EF   		movq	%rbp, %rdi
 9683 0467 E8000000 		call	png_handle_tEXt
 9683      00
 9684              	.LVL1232:
 9685 046c 8B852C01 		movl	300(%rbp), %eax
 9685      0000
 9686 0472 E901FCFF 		jmp	.L1067
 9686      FF
 9687              	.LVL1233:
 9688              	.L1133:
 893:fltk-1.3.4-1/png/pngread.c **** #endif
 9689              		.loc 1 893 0
 9690 0477 4489E2   		movl	%r12d, %edx
 9691 047a 4C89EE   		movq	%r13, %rsi
 9692 047d 4889EF   		movq	%rbp, %rdi
 9693 0480 E8000000 		call	png_handle_tIME
 9693      00
 9694              	.LVL1234:
 9695 0485 8B852C01 		movl	300(%rbp), %eax
 9695      0000
 9696 048b E9E8FBFF 		jmp	.L1067
 9696      FF
 9697              	.LVL1235:
 9698              	.L1135:
 903:fltk-1.3.4-1/png/pngread.c **** #endif
 9699              		.loc 1 903 0
 9700 0490 4489E2   		movl	%r12d, %edx
 9701 0493 4C89EE   		movq	%r13, %rsi
 9702 0496 4889EF   		movq	%rbp, %rdi
 9703 0499 E8000000 		call	png_handle_zTXt
 9703      00
 9704              	.LVL1236:
 9705 049e 8B852C01 		movl	300(%rbp), %eax
 9705      0000
 9706 04a4 E9CFFBFF 		jmp	.L1067
 9706      FF
 9707              	.LBE396:
 9708              	.LBE398:
 9709              	.LBE400:
 9710              		.cfi_endproc
 9711              	.LFE65:
 9713              		.section	.text.unlikely.png_read_end
 9714              	.LCOLDE68:
 9715              		.section	.text.png_read_end
 9716              	.LHOTE68:
 9717              		.section	.text.unlikely.png_destroy_read_struct,"ax",@progbits
 9718              	.LCOLDB69:
 9719              		.section	.text.png_destroy_read_struct,"ax",@progbits
 9720              	.LHOTB69:
 9721              		.p2align 4,,15
 9722              		.globl	png_destroy_read_struct
 9724              	png_destroy_read_struct:
 9725              	.LFB67:
 987:fltk-1.3.4-1/png/pngread.c ****    png_structrp png_ptr = NULL;
 9726              		.loc 1 987 0
 9727              		.cfi_startproc
 9728              	.LVL1237:
 992:fltk-1.3.4-1/png/pngread.c ****       png_ptr = *png_ptr_ptr;
 9729              		.loc 1 992 0
 9730 0000 4885FF   		testq	%rdi, %rdi
 9731 0003 0F84AB01 		je	.L1154
 9731      0000
 987:fltk-1.3.4-1/png/pngread.c ****    png_structrp png_ptr = NULL;
 9732              		.loc 1 987 0
 9733 0009 4154     		pushq	%r12
 9734              		.cfi_def_cfa_offset 16
 9735              		.cfi_offset 12, -16
 9736 000b 55       		pushq	%rbp
 9737              		.cfi_def_cfa_offset 24
 9738              		.cfi_offset 6, -24
 9739 000c 53       		pushq	%rbx
 9740              		.cfi_def_cfa_offset 32
 9741              		.cfi_offset 3, -32
 993:fltk-1.3.4-1/png/pngread.c **** 
 9742              		.loc 1 993 0
 9743 000d 488B1F   		movq	(%rdi), %rbx
 9744              	.LVL1238:
 995:fltk-1.3.4-1/png/pngread.c ****       return;
 9745              		.loc 1 995 0
 9746 0010 4885DB   		testq	%rbx, %rbx
 9747 0013 0F849701 		je	.L1136
 9747      0000
 9748 0019 4889F0   		movq	%rsi, %rax
 9749 001c 4889FD   		movq	%rdi, %rbp
 9750 001f 4889D6   		movq	%rdx, %rsi
 9751              	.LVL1239:
 9752 0022 4989C4   		movq	%rax, %r12
1002:fltk-1.3.4-1/png/pngread.c ****    png_destroy_info_struct(png_ptr, info_ptr_ptr);
 9753              		.loc 1 1002 0
 9754 0025 4889DF   		movq	%rbx, %rdi
 9755              	.LVL1240:
 9756 0028 E8000000 		call	png_destroy_info_struct
 9756      00
 9757              	.LVL1241:
1003:fltk-1.3.4-1/png/pngread.c **** 
 9758              		.loc 1 1003 0
 9759 002d 4C89E6   		movq	%r12, %rsi
 9760 0030 4889DF   		movq	%rbx, %rdi
 9761 0033 E8000000 		call	png_destroy_info_struct
 9761      00
 9762              	.LVL1242:
 9763              	.LBB403:
 9764              	.LBB404:
 925:fltk-1.3.4-1/png/pngread.c **** #endif
 9765              		.loc 1 925 0
 9766 0038 4889DF   		movq	%rbx, %rdi
 9767              	.LBE404:
 9768              	.LBE403:
1005:fltk-1.3.4-1/png/pngread.c ****    png_read_destroy(png_ptr);
 9769              		.loc 1 1005 0
 9770 003b 48C74500 		movq	$0, 0(%rbp)
 9770      00000000 
 9771              	.LVL1243:
 9772              	.LBB407:
 9773              	.LBB405:
 925:fltk-1.3.4-1/png/pngread.c **** #endif
 9774              		.loc 1 925 0
 9775 0043 E8000000 		call	png_destroy_gamma_table
 9775      00
 9776              	.LVL1244:
 928:fltk-1.3.4-1/png/pngread.c ****    png_ptr->big_row_buf = NULL;
 9777              		.loc 1 928 0
 9778 0048 488BB338 		movq	1080(%rbx), %rsi
 9778      040000
 9779 004f 4889DF   		movq	%rbx, %rdi
 9780 0052 E8000000 		call	png_free
 9780      00
 9781              	.LVL1245:
 930:fltk-1.3.4-1/png/pngread.c ****    png_ptr->big_prev_row = NULL;
 9782              		.loc 1 930 0
 9783 0057 488BB3B0 		movq	1200(%rbx), %rsi
 9783      040000
 9784 005e 4889DF   		movq	%rbx, %rdi
 929:fltk-1.3.4-1/png/pngread.c ****    png_free(png_ptr, png_ptr->big_prev_row);
 9785              		.loc 1 929 0
 9786 0061 48C78338 		movq	$0, 1080(%rbx)
 9786      04000000 
 9786      000000
 930:fltk-1.3.4-1/png/pngread.c ****    png_ptr->big_prev_row = NULL;
 9787              		.loc 1 930 0
 9788 006c E8000000 		call	png_free
 9788      00
 9789              	.LVL1246:
 932:fltk-1.3.4-1/png/pngread.c ****    png_ptr->read_buffer = NULL;
 9790              		.loc 1 932 0
 9791 0071 488BB398 		movq	1176(%rbx), %rsi
 9791      040000
 9792 0078 4889DF   		movq	%rbx, %rdi
 931:fltk-1.3.4-1/png/pngread.c ****    png_free(png_ptr, png_ptr->read_buffer);
 9793              		.loc 1 931 0
 9794 007b 48C783B0 		movq	$0, 1200(%rbx)
 9794      04000000 
 9794      000000
 932:fltk-1.3.4-1/png/pngread.c ****    png_ptr->read_buffer = NULL;
 9795              		.loc 1 932 0
 9796 0086 E8000000 		call	png_free
 9796      00
 9797              	.LVL1247:
 936:fltk-1.3.4-1/png/pngread.c ****    png_ptr->palette_lookup = NULL;
 9798              		.loc 1 936 0
 9799 008b 488BB388 		movq	904(%rbx), %rsi
 9799      030000
 9800 0092 4889DF   		movq	%rbx, %rdi
 933:fltk-1.3.4-1/png/pngread.c **** 
 9801              		.loc 1 933 0
 9802 0095 48C78398 		movq	$0, 1176(%rbx)
 9802      04000000 
 9802      000000
 936:fltk-1.3.4-1/png/pngread.c ****    png_ptr->palette_lookup = NULL;
 9803              		.loc 1 936 0
 9804 00a0 E8000000 		call	png_free
 9804      00
 9805              	.LVL1248:
 938:fltk-1.3.4-1/png/pngread.c ****    png_ptr->quantize_index = NULL;
 9806              		.loc 1 938 0
 9807 00a5 488BB390 		movq	912(%rbx), %rsi
 9807      030000
 937:fltk-1.3.4-1/png/pngread.c ****    png_free(png_ptr, png_ptr->quantize_index);
 9808              		.loc 1 937 0
 9809 00ac 48C78388 		movq	$0, 904(%rbx)
 9809      03000000 
 9809      000000
 938:fltk-1.3.4-1/png/pngread.c ****    png_ptr->quantize_index = NULL;
 9810              		.loc 1 938 0
 9811 00b7 4889DF   		movq	%rbx, %rdi
 9812 00ba E8000000 		call	png_free
 9812      00
 9813              	.LVL1249:
 942:fltk-1.3.4-1/png/pngread.c ****    {
 9814              		.loc 1 942 0
 9815 00bf 8B93E803 		movl	1000(%rbx), %edx
 9815      0000
 939:fltk-1.3.4-1/png/pngread.c **** #endif
 9816              		.loc 1 939 0
 9817 00c5 48C78390 		movq	$0, 912(%rbx)
 9817      03000000 
 9817      000000
 942:fltk-1.3.4-1/png/pngread.c ****    {
 9818              		.loc 1 942 0
 9819 00d0 F6C610   		testb	$16, %dh
 9820 00d3 0F85AF00 		jne	.L1155
 9820      0000
 9821              	.L1138:
 947:fltk-1.3.4-1/png/pngread.c **** 
 9822              		.loc 1 947 0
 9823 00d9 89D0     		movl	%edx, %eax
 9824 00db 80E4EF   		andb	$239, %ah
 951:fltk-1.3.4-1/png/pngread.c ****    {
 9825              		.loc 1 951 0
 9826 00de 80E620   		andb	$32, %dh
 947:fltk-1.3.4-1/png/pngread.c **** 
 9827              		.loc 1 947 0
 9828 00e1 8983E803 		movl	%eax, 1000(%rbx)
 9828      0000
 951:fltk-1.3.4-1/png/pngread.c ****    {
 9829              		.loc 1 951 0
 9830 00e7 7577     		jne	.L1156
 9831              	.L1139:
 959:fltk-1.3.4-1/png/pngread.c **** 
 9832              		.loc 1 959 0
 9833 00e9 488DBB40 		leaq	320(%rbx), %rdi
 9833      010000
 956:fltk-1.3.4-1/png/pngread.c **** #endif
 9834              		.loc 1 956 0
 9835 00f0 80E4DF   		andb	$223, %ah
 9836 00f3 8983E803 		movl	%eax, 1000(%rbx)
 9836      0000
 959:fltk-1.3.4-1/png/pngread.c **** 
 9837              		.loc 1 959 0
 9838 00f9 E8000000 		call	inflateEnd
 9838      00
 9839              	.LVL1250:
 962:fltk-1.3.4-1/png/pngread.c ****    png_ptr->save_buffer = NULL;
 9840              		.loc 1 962 0
 9841 00fe 488BB340 		movq	832(%rbx), %rsi
 9841      030000
 9842 0105 4889DF   		movq	%rbx, %rdi
 9843 0108 E8000000 		call	png_free
 9843      00
 9844              	.LVL1251:
 968:fltk-1.3.4-1/png/pngread.c ****    png_ptr->unknown_chunk.data = NULL;
 9845              		.loc 1 968 0
 9846 010d 488BB378 		movq	1144(%rbx), %rsi
 9846      040000
 9847 0114 4889DF   		movq	%rbx, %rdi
 963:fltk-1.3.4-1/png/pngread.c **** #endif
 9848              		.loc 1 963 0
 9849 0117 48C78340 		movq	$0, 832(%rbx)
 9849      03000000 
 9849      000000
 968:fltk-1.3.4-1/png/pngread.c ****    png_ptr->unknown_chunk.data = NULL;
 9850              		.loc 1 968 0
 9851 0122 E8000000 		call	png_free
 9851      00
 9852              	.LVL1252:
 973:fltk-1.3.4-1/png/pngread.c ****    png_ptr->chunk_list = NULL;
 9853              		.loc 1 973 0
 9854 0127 488BB308 		movq	1032(%rbx), %rsi
 9854      040000
 9855 012e 4889DF   		movq	%rbx, %rdi
 969:fltk-1.3.4-1/png/pngread.c **** #endif
 9856              		.loc 1 969 0
 9857 0131 48C78378 		movq	$0, 1144(%rbx)
 9857      04000000 
 9857      000000
 973:fltk-1.3.4-1/png/pngread.c ****    png_ptr->chunk_list = NULL;
 9858              		.loc 1 973 0
 9859 013c E8000000 		call	png_free
 9859      00
 9860              	.LVL1253:
 974:fltk-1.3.4-1/png/pngread.c **** #endif
 9861              		.loc 1 974 0
 9862 0141 48C78308 		movq	$0, 1032(%rbx)
 9862      04000000 
 9862      000000
 9863              	.LVL1254:
 9864              	.LBE405:
 9865              	.LBE407:
1007:fltk-1.3.4-1/png/pngread.c **** }
 9866              		.loc 1 1007 0
 9867 014c 4889DF   		movq	%rbx, %rdi
1008:fltk-1.3.4-1/png/pngread.c **** 
 9868              		.loc 1 1008 0
 9869 014f 5B       		popq	%rbx
 9870              		.cfi_remember_state
 9871              		.cfi_restore 3
 9872              		.cfi_def_cfa_offset 24
 9873              	.LVL1255:
 9874 0150 5D       		popq	%rbp
 9875              		.cfi_restore 6
 9876              		.cfi_def_cfa_offset 16
 9877              	.LVL1256:
 9878 0151 415C     		popq	%r12
 9879              		.cfi_restore 12
 9880              		.cfi_def_cfa_offset 8
 9881              	.LVL1257:
1007:fltk-1.3.4-1/png/pngread.c **** }
 9882              		.loc 1 1007 0
 9883 0153 E9000000 		jmp	png_destroy_png_struct
 9883      00
 9884              	.LVL1258:
 9885 0158 0F1F8400 		.p2align 4,,10
 9885      00000000 
 9886              		.p2align 3
 9887              	.L1156:
 9888              		.cfi_restore_state
 9889              	.LBB408:
 9890              	.LBB406:
 953:fltk-1.3.4-1/png/pngread.c ****       png_ptr->trans_alpha = NULL;
 9891              		.loc 1 953 0
 9892 0160 488BB3F8 		movq	760(%rbx), %rsi
 9892      020000
 9893 0167 4889DF   		movq	%rbx, %rdi
 9894 016a E8000000 		call	png_free
 9894      00
 9895              	.LVL1259:
 954:fltk-1.3.4-1/png/pngread.c ****    }
 9896              		.loc 1 954 0
 9897 016f 48C783F8 		movq	$0, 760(%rbx)
 9897      02000000 
 9897      000000
 9898 017a 8B83E803 		movl	1000(%rbx), %eax
 9898      0000
 9899 0180 E964FFFF 		jmp	.L1139
 9899      FF
 9900              		.p2align 4,,10
 9901 0185 0F1F00   		.p2align 3
 9902              	.L1155:
 944:fltk-1.3.4-1/png/pngread.c ****       png_ptr->palette = NULL;
 9903              		.loc 1 944 0
 9904 0188 488BB360 		movq	608(%rbx), %rsi
 9904      020000
 9905 018f 4889DF   		movq	%rbx, %rdi
 9906 0192 E8000000 		call	png_zfree
 9906      00
 9907              	.LVL1260:
 945:fltk-1.3.4-1/png/pngread.c ****    }
 9908              		.loc 1 945 0
 9909 0197 48C78360 		movq	$0, 608(%rbx)
 9909      02000000 
 9909      000000
 9910 01a2 8B93E803 		movl	1000(%rbx), %edx
 9910      0000
 9911 01a8 E92CFFFF 		jmp	.L1138
 9911      FF
 9912              	.LVL1261:
 9913 01ad 0F1F00   		.p2align 4,,10
 9914              		.p2align 3
 9915              	.L1136:
 9916              	.LBE406:
 9917              	.LBE408:
1008:fltk-1.3.4-1/png/pngread.c **** 
 9918              		.loc 1 1008 0
 9919 01b0 5B       		popq	%rbx
 9920              		.cfi_restore 3
 9921              		.cfi_def_cfa_offset 24
 9922              	.LVL1262:
 9923 01b1 5D       		popq	%rbp
 9924              		.cfi_restore 6
 9925              		.cfi_def_cfa_offset 16
 9926 01b2 415C     		popq	%r12
 9927              		.cfi_restore 12
 9928              		.cfi_def_cfa_offset 8
 9929              	.LVL1263:
 9930              	.L1154:
 9931 01b4 F3C3     		rep ret
 9932              		.cfi_endproc
 9933              	.LFE67:
 9935              		.section	.text.unlikely.png_destroy_read_struct
 9936              	.LCOLDE69:
 9937              		.section	.text.png_destroy_read_struct
 9938              	.LHOTE69:
 9939              		.section	.rodata.str1.1
 9940              	.LC70:
 9941 015c 312E362E 		.string	"1.6.16"
 9941      313600
 9942              	.LC71:
 9943 0163 706E675F 		.string	"png_image_read: out of memory"
 9943      696D6167 
 9943      655F7265 
 9943      61643A20 
 9943      6F757420 
 9944              		.section	.rodata.str1.8
 9945 04d9 00000000 		.align 8
 9945      000000
 9946              	.LC72:
 9947 04e0 706E675F 		.string	"png_image_read: opaque pointer not NULL"
 9947      696D6167 
 9947      655F7265 
 9947      61643A20 
 9947      6F706171 
 9948              		.section	.text.unlikely.png_image_read_init,"ax",@progbits
 9949              	.LCOLDB73:
 9950              		.section	.text.png_image_read_init,"ax",@progbits
 9951              	.LHOTB73:
 9952              		.p2align 4,,15
 9954              	png_image_read_init:
 9955              	.LFB70:
1282:fltk-1.3.4-1/png/pngread.c ****    if (image->opaque == NULL)
 9956              		.loc 1 1282 0
 9957              		.cfi_startproc
 9958              	.LVL1264:
 9959 0000 55       		pushq	%rbp
 9960              		.cfi_def_cfa_offset 16
 9961              		.cfi_offset 6, -16
 9962 0001 53       		pushq	%rbx
 9963              		.cfi_def_cfa_offset 24
 9964              		.cfi_offset 3, -24
 9965 0002 4889FB   		movq	%rdi, %rbx
 9966 0005 4883EC28 		subq	$40, %rsp
 9967              		.cfi_def_cfa_offset 64
1282:fltk-1.3.4-1/png/pngread.c ****    if (image->opaque == NULL)
 9968              		.loc 1 1282 0
 9969 0009 64488B04 		movq	%fs:40, %rax
 9969      25280000 
 9969      00
 9970 0012 48894424 		movq	%rax, 24(%rsp)
 9970      18
 9971 0017 31C0     		xorl	%eax, %eax
1283:fltk-1.3.4-1/png/pngread.c ****    {
 9972              		.loc 1 1283 0
 9973 0019 48833F00 		cmpq	$0, (%rdi)
 9974 001d 7429     		je	.L1172
1325:fltk-1.3.4-1/png/pngread.c **** }
 9975              		.loc 1 1325 0
 9976 001f BE000000 		movl	$.LC72, %esi
 9976      00
 9977 0024 E8000000 		call	png_image_error
 9977      00
 9978              	.LVL1265:
 9979              	.L1163:
1326:fltk-1.3.4-1/png/pngread.c **** 
 9980              		.loc 1 1326 0 discriminator 1
 9981 0029 488B7424 		movq	24(%rsp), %rsi
 9981      18
 9982 002e 64483334 		xorq	%fs:40, %rsi
 9982      25280000 
 9982      00
 9983 0037 0F851201 		jne	.L1173
 9983      0000
1326:fltk-1.3.4-1/png/pngread.c **** 
 9984              		.loc 1 1326 0 is_stmt 0
 9985 003d 4883C428 		addq	$40, %rsp
 9986              		.cfi_remember_state
 9987              		.cfi_def_cfa_offset 24
 9988 0041 5B       		popq	%rbx
 9989              		.cfi_def_cfa_offset 16
 9990              	.LVL1266:
 9991 0042 5D       		popq	%rbp
 9992              		.cfi_def_cfa_offset 8
 9993 0043 C3       		ret
 9994              	.LVL1267:
 9995              		.p2align 4,,10
 9996 0044 0F1F4000 		.p2align 3
 9997              	.L1172:
 9998              		.cfi_restore_state
 9999              	.LBB420:
 10000              	.LBB421:
 10001              	.LBB422:
 10002              	.LBB423:
  33:fltk-1.3.4-1/png/pngread.c ****        warn_fn, NULL, NULL, NULL);
 10003              		.loc 1 33 0 is_stmt 1
 10004 0048 4883EC08 		subq	$8, %rsp
 10005              		.cfi_def_cfa_offset 72
 10006 004c 4531C9   		xorl	%r9d, %r9d
 10007 004f 4531C0   		xorl	%r8d, %r8d
 10008 0052 6A00     		pushq	$0
 10009              		.cfi_def_cfa_offset 80
 10010 0054 B9000000 		movl	$png_safe_warning, %ecx
 10010      00
 10011 0059 BA000000 		movl	$png_safe_error, %edx
 10011      00
 10012 005e 4889FE   		movq	%rdi, %rsi
 10013 0061 BF000000 		movl	$.LC70, %edi
 10013      00
 10014              	.LBE423:
 10015              	.LBE422:
 10016              	.LBB426:
 10017              	.LBB427:
  54:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  55:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  56:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  57:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memmove (void *__dest, const void *__src, size_t __len))
  58:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  59:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  60:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  61:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  62:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifdef __USE_GNU
  63:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  64:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
  65:/usr/include/x86_64-linux-gnu/bits/string3.h **** 		size_t __len))
  66:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  67:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
  68:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  69:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  70:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  71:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  72:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* The first two tests here help to catch a somewhat common problem
  73:/usr/include/x86_64-linux-gnu/bits/string3.h ****    where the second and third parameter are transposed.  This is
  74:/usr/include/x86_64-linux-gnu/bits/string3.h ****    especially problematic if the intended fill value is zero.  In this
  75:/usr/include/x86_64-linux-gnu/bits/string3.h ****    case no work is done at all.  We detect these problems by referring
  76:/usr/include/x86_64-linux-gnu/bits/string3.h ****    non-existing functions.  */
  77:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  78:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memset (void *__dest, int __ch, size_t __len))
  79:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  80:/usr/include/x86_64-linux-gnu/bits/string3.h ****   /* GCC-5.0 and newer implements these checks in the compiler, so we don't
  81:/usr/include/x86_64-linux-gnu/bits/string3.h ****      need them here.  */
  82:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  83:/usr/include/x86_64-linux-gnu/bits/string3.h ****   if (__builtin_constant_p (__len) && __len == 0
  84:/usr/include/x86_64-linux-gnu/bits/string3.h ****       && (!__builtin_constant_p (__ch) || __ch != 0))
  85:/usr/include/x86_64-linux-gnu/bits/string3.h ****     {
  86:/usr/include/x86_64-linux-gnu/bits/string3.h ****       __warn_memset_zero_len ();
  87:/usr/include/x86_64-linux-gnu/bits/string3.h ****       return __dest;
  88:/usr/include/x86_64-linux-gnu/bits/string3.h ****     }
  89:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  90:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 10018              		.loc 2 90 0
 10019 0066 31ED     		xorl	%ebp, %ebp
 10020              	.LBE427:
 10021              	.LBE426:
 10022              	.LBB431:
 10023              	.LBB424:
  33:fltk-1.3.4-1/png/pngread.c ****        warn_fn, NULL, NULL, NULL);
 10024              		.loc 1 33 0
 10025 0068 E8000000 		call	png_create_read_struct_2
 10025      00
 10026              	.LVL1268:
 10027              	.LBE424:
 10028              	.LBE431:
 10029              	.LBB432:
 10030              	.LBB428:
 10031              		.loc 2 90 0
 10032 006d 488D7B08 		leaq	8(%rbx), %rdi
 10033 0071 4889D9   		movq	%rbx, %rcx
 10034              	.LBE428:
 10035              	.LBE432:
1285:fltk-1.3.4-1/png/pngread.c ****           png_safe_error, png_safe_warning);
 10036              		.loc 1 1285 0
 10037 0074 48894424 		movq	%rax, 24(%rsp)
 10037      18
 10038              	.LBB433:
 10039              	.LBB425:
  33:fltk-1.3.4-1/png/pngread.c ****        warn_fn, NULL, NULL, NULL);
 10040              		.loc 1 33 0
 10041 0079 4889C2   		movq	%rax, %rdx
 10042              	.LVL1269:
 10043              	.LBE425:
 10044              	.LBE433:
 10045              	.LBB434:
 10046              	.LBB429:
 10047              		.loc 2 90 0
 10048 007c 4889E8   		movq	%rbp, %rax
 10049 007f 48C70300 		movq	$0, (%rbx)
 10049      000000
 10050 0086 4883E7F8 		andq	$-8, %rdi
 10051 008a 48C74360 		movq	$0, 96(%rbx)
 10051      00000000 
 10052 0092 4829F9   		subq	%rdi, %rcx
 10053              	.LVL1270:
 10054 0095 83C168   		addl	$104, %ecx
 10055 0098 C1E903   		shrl	$3, %ecx
 10056              	.LBE429:
 10057              	.LBE434:
1294:fltk-1.3.4-1/png/pngread.c ****       {
 10058              		.loc 1 1294 0
 10059 009b 4885D2   		testq	%rdx, %rdx
 10060              	.LBB435:
 10061              	.LBB430:
 10062              		.loc 2 90 0
 10063 009e F348AB   		rep stosq
 10064              	.LVL1271:
 10065              	.LBE430:
 10066              	.LBE435:
1292:fltk-1.3.4-1/png/pngread.c **** 
 10067              		.loc 1 1292 0
 10068 00a1 C7430801 		movl	$1, 8(%rbx)
 10068      000000
1294:fltk-1.3.4-1/png/pngread.c ****       {
 10069              		.loc 1 1294 0
 10070 00a8 58       		popq	%rax
 10071              		.cfi_def_cfa_offset 72
 10072 00a9 59       		popq	%rcx
 10073              		.cfi_def_cfa_offset 64
 10074 00aa 0F848D00 		je	.L1159
 10074      0000
 10075              	.LBB436:
1296:fltk-1.3.4-1/png/pngread.c **** 
 10076              		.loc 1 1296 0
 10077 00b0 4889D7   		movq	%rdx, %rdi
 10078 00b3 E8000000 		call	png_create_info_struct
 10078      00
 10079              	.LVL1272:
1298:fltk-1.3.4-1/png/pngread.c ****          {
 10080              		.loc 1 1298 0
 10081 00b8 4885C0   		testq	%rax, %rax
1296:fltk-1.3.4-1/png/pngread.c **** 
 10082              		.loc 1 1296 0
 10083 00bb 48894424 		movq	%rax, 16(%rsp)
 10083      10
1298:fltk-1.3.4-1/png/pngread.c ****          {
 10084              		.loc 1 1298 0
 10085 00c0 746D     		je	.L1160
 10086              	.LBB437:
1300:fltk-1.3.4-1/png/pngread.c ****                png_malloc_warn(png_ptr, (sizeof *control)));
 10087              		.loc 1 1300 0
 10088 00c2 488B7C24 		movq	8(%rsp), %rdi
 10088      08
 10089 00c7 BE300000 		movl	$48, %esi
 10089      00
 10090 00cc E8000000 		call	png_malloc_warn
 10090      00
 10091              	.LVL1273:
1303:fltk-1.3.4-1/png/pngread.c ****             {
 10092              		.loc 1 1303 0
 10093 00d1 4885C0   		testq	%rax, %rax
1300:fltk-1.3.4-1/png/pngread.c ****                png_malloc_warn(png_ptr, (sizeof *control)));
 10094              		.loc 1 1300 0
 10095 00d4 4889C2   		movq	%rax, %rdx
 10096              	.LVL1274:
1303:fltk-1.3.4-1/png/pngread.c ****             {
 10097              		.loc 1 1303 0
 10098 00d7 7447     		je	.L1161
 10099              	.LVL1275:
 10100              	.LBB438:
 10101              	.LBB439:
 10102              		.loc 2 90 0
 10103 00d9 488D7808 		leaq	8(%rax), %rdi
 10104 00dd 4889C1   		movq	%rax, %rcx
 10105 00e0 48C74028 		movq	$0, 40(%rax)
 10105      00000000 
 10106 00e8 4889E8   		movq	%rbp, %rax
 10107              	.LVL1276:
 10108 00eb 4883E7F8 		andq	$-8, %rdi
 10109 00ef 4829F9   		subq	%rdi, %rcx
 10110 00f2 83C130   		addl	$48, %ecx
 10111 00f5 C1E903   		shrl	$3, %ecx
 10112 00f8 F348AB   		rep stosq
 10113              	.LVL1277:
 10114              	.LBE439:
 10115              	.LBE438:
1311:fltk-1.3.4-1/png/pngread.c ****                return 1;
 10116              		.loc 1 1311 0
 10117 00fb 488913   		movq	%rdx, (%rbx)
1307:fltk-1.3.4-1/png/pngread.c ****                control->info_ptr = info_ptr;
 10118              		.loc 1 1307 0
 10119 00fe 488B4424 		movq	8(%rsp), %rax
 10119      08
1309:fltk-1.3.4-1/png/pngread.c **** 
 10120              		.loc 1 1309 0
 10121 0103 806228FE 		andb	$-2, 40(%rdx)
1307:fltk-1.3.4-1/png/pngread.c ****                control->info_ptr = info_ptr;
 10122              		.loc 1 1307 0
 10123 0107 488902   		movq	%rax, (%rdx)
1308:fltk-1.3.4-1/png/pngread.c ****                control->for_write = 0;
 10124              		.loc 1 1308 0
 10125 010a 488B4424 		movq	16(%rsp), %rax
 10125      10
 10126 010f 48894208 		movq	%rax, 8(%rdx)
1312:fltk-1.3.4-1/png/pngread.c ****             }
 10127              		.loc 1 1312 0
 10128 0113 B8010000 		movl	$1, %eax
 10128      00
 10129 0118 E90CFFFF 		jmp	.L1163
 10129      FF
 10130              	.LVL1278:
 10131 011d 0F1F00   		.p2align 4,,10
 10132              		.p2align 3
 10133              	.L1161:
1316:fltk-1.3.4-1/png/pngread.c ****          }
 10134              		.loc 1 1316 0
 10135 0120 488B7C24 		movq	8(%rsp), %rdi
 10135      08
 10136 0125 488D7424 		leaq	16(%rsp), %rsi
 10136      10
 10137 012a E8000000 		call	png_destroy_info_struct
 10137      00
 10138              	.LVL1279:
 10139              	.L1160:
 10140              	.LBE437:
1319:fltk-1.3.4-1/png/pngread.c ****       }
 10141              		.loc 1 1319 0
 10142 012f 488D7C24 		leaq	8(%rsp), %rdi
 10142      08
 10143 0134 31D2     		xorl	%edx, %edx
 10144 0136 31F6     		xorl	%esi, %esi
 10145 0138 E8000000 		call	png_destroy_read_struct
 10145      00
 10146              	.LVL1280:
 10147              	.L1159:
 10148              	.LBE436:
1322:fltk-1.3.4-1/png/pngread.c ****    }
 10149              		.loc 1 1322 0
 10150 013d BE000000 		movl	$.LC71, %esi
 10150      00
 10151 0142 4889DF   		movq	%rbx, %rdi
 10152 0145 E8000000 		call	png_image_error
 10152      00
 10153              	.LVL1281:
 10154 014a E9DAFEFF 		jmp	.L1163
 10154      FF
 10155              	.L1173:
 10156              	.LBE421:
 10157              	.LBE420:
1326:fltk-1.3.4-1/png/pngread.c **** 
 10158              		.loc 1 1326 0
 10159 014f E8000000 		call	__stack_chk_fail
 10159      00
 10160              	.LVL1282:
 10161              		.cfi_endproc
 10162              	.LFE70:
 10164              		.section	.text.unlikely.png_image_read_init
 10165              	.LCOLDE73:
 10166              		.section	.text.png_image_read_init
 10167              	.LHOTE73:
 10168              		.section	.text.unlikely.png_set_read_status_fn,"ax",@progbits
 10169              	.LCOLDB74:
 10170              		.section	.text.png_set_read_status_fn,"ax",@progbits
 10171              	.LHOTB74:
 10172              		.p2align 4,,15
 10173              		.globl	png_set_read_status_fn
 10175              	png_set_read_status_fn:
 10176              	.LFB68:
1012:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr == NULL)
 10177              		.loc 1 1012 0
 10178              		.cfi_startproc
 10179              	.LVL1283:
1013:fltk-1.3.4-1/png/pngread.c ****       return;
 10180              		.loc 1 1013 0
 10181 0000 4885FF   		testq	%rdi, %rdi
 10182 0003 7407     		je	.L1174
1016:fltk-1.3.4-1/png/pngread.c **** }
 10183              		.loc 1 1016 0
 10184 0005 4889B710 		movq	%rsi, 784(%rdi)
 10184      030000
 10185              	.L1174:
 10186 000c F3C3     		rep ret
 10187              		.cfi_endproc
 10188              	.LFE68:
 10190              		.section	.text.unlikely.png_set_read_status_fn
 10191              	.LCOLDE74:
 10192              		.section	.text.png_set_read_status_fn
 10193              	.LHOTE74:
 10194              		.section	.rodata.str1.8
 10195              		.align 8
 10196              	.LC75:
 10197 0508 496D6167 		.string	"Image is too high to process with png_read_png()"
 10197      65206973 
 10197      20746F6F 
 10197      20686967 
 10197      6820746F 
 10198              		.section	.text.unlikely.png_read_png,"ax",@progbits
 10199              	.LCOLDB76:
 10200              		.section	.text.png_read_png,"ax",@progbits
 10201              	.LHOTB76:
 10202              		.p2align 4,,15
 10203              		.globl	png_read_png
 10205              	png_read_png:
 10206              	.LFB69:
1026:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr == NULL || info_ptr == NULL)
 10207              		.loc 1 1026 0
 10208              		.cfi_startproc
 10209              	.LVL1284:
1027:fltk-1.3.4-1/png/pngread.c ****       return;
 10210              		.loc 1 1027 0
 10211 0000 4885FF   		testq	%rdi, %rdi
 10212 0003 0F840F01 		je	.L1251
 10212      0000
 10213 0009 4885F6   		testq	%rsi, %rsi
 10214 000c 0F840601 		je	.L1251
 10214      0000
1026:fltk-1.3.4-1/png/pngread.c ****    if (png_ptr == NULL || info_ptr == NULL)
 10215              		.loc 1 1026 0
 10216 0012 4155     		pushq	%r13
 10217              		.cfi_def_cfa_offset 16
 10218              		.cfi_offset 13, -16
 10219 0014 4154     		pushq	%r12
 10220              		.cfi_def_cfa_offset 24
 10221              		.cfi_offset 12, -24
 10222 0016 4989FC   		movq	%rdi, %r12
 10223              	.LVL1285:
 10224 0019 55       		pushq	%rbp
 10225              		.cfi_def_cfa_offset 32
 10226              		.cfi_offset 6, -32
 10227 001a 53       		pushq	%rbx
 10228              		.cfi_def_cfa_offset 40
 10229              		.cfi_offset 3, -40
 10230 001b 4889F5   		movq	%rsi, %rbp
 10231 001e 89D3     		movl	%edx, %ebx
 10232 0020 4883EC08 		subq	$8, %rsp
 10233              		.cfi_def_cfa_offset 48
 10234              	.LBB440:
 10235              	.LBB441:
 10236 0024 E8000000 		call	png_read_info.part.4
 10236      00
 10237              	.LVL1286:
 10238              	.LBE441:
 10239              	.LBE440:
1034:fltk-1.3.4-1/png/pngread.c ****       png_error(png_ptr, "Image is too high to process with png_read_png()");
 10240              		.loc 1 1034 0
 10241 0029 817D04FF 		cmpl	$536870911, 4(%rbp)
 10241      FFFF1F
 10242 0030 0F879302 		ja	.L1252
 10242      0000
1046:fltk-1.3.4-1/png/pngread.c ****      /* Added at libpng-1.5.4. "strip_16" produces the same result that it
 10243              		.loc 1 1046 0
 10244 0036 F6C780   		testb	$128, %bh
 10245 0039 0F856901 		jne	.L1253
 10245      0000
1060:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_STRIP_16_TO_8_SUPPORTED
 10246              		.loc 1 1060 0
 10247 003f F6C301   		testb	$1, %bl
 10248 0042 0F857101 		jne	.L1254
 10248      0000
 10249              	.L1183:
1070:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_STRIP_ALPHA_SUPPORTED
 10250              		.loc 1 1070 0
 10251 0048 F6C302   		testb	$2, %bl
 10252 004b 0F857901 		jne	.L1255
 10252      0000
 10253              	.L1184:
1080:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_PACK_SUPPORTED
 10254              		.loc 1 1080 0
 10255 0051 F6C304   		testb	$4, %bl
 10256 0054 0F858101 		jne	.L1256
 10256      0000
 10257              	.L1185:
1090:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_PACKSWAP_SUPPORTED
 10258              		.loc 1 1090 0
 10259 005a F6C308   		testb	$8, %bl
 10260 005d 0F858901 		jne	.L1257
 10260      0000
 10261              	.L1186:
1102:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_EXPAND_SUPPORTED
 10262              		.loc 1 1102 0
 10263 0063 F6C310   		testb	$16, %bl
 10264 0066 0F859101 		jne	.L1258
 10264      0000
 10265              	.L1187:
1114:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_INVERT_SUPPORTED
 10266              		.loc 1 1114 0
 10267 006c F6C320   		testb	$32, %bl
 10268 006f 0F85AB00 		jne	.L1259
 10268      0000
 10269              	.L1188:
1125:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_SHIFT_SUPPORTED
 10270              		.loc 1 1125 0
 10271 0075 F6C340   		testb	$64, %bl
 10272 0078 740A     		je	.L1189
 10273              	.L1268:
1127:fltk-1.3.4-1/png/pngread.c ****          png_set_shift(png_ptr, &info_ptr->sig_bit);
 10274              		.loc 1 1127 0
 10275 007a F6450802 		testb	$2, 8(%rbp)
 10276 007e 0F859401 		jne	.L1260
 10276      0000
 10277              	.L1189:
1134:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_BGR_SUPPORTED
 10278              		.loc 1 1134 0
 10279 0084 F6C380   		testb	$-128, %bl
 10280 0087 0F85B300 		jne	.L1261
 10280      0000
1142:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_SWAP_ALPHA_SUPPORTED
 10281              		.loc 1 1142 0
 10282 008d F6C701   		testb	$1, %bh
 10283 0090 0F85BB00 		jne	.L1262
 10283      0000
 10284              	.L1191:
1150:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_SWAP_SUPPORTED
 10285              		.loc 1 1150 0
 10286 0096 F6C702   		testb	$2, %bh
 10287 0099 0F85C300 		jne	.L1263
 10287      0000
 10288              	.L1192:
1159:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_INVERT_ALPHA_SUPPORTED
 10289              		.loc 1 1159 0
 10290 009f F6C704   		testb	$4, %bh
 10291 00a2 0F85CB00 		jne	.L1264
 10291      0000
 10292              	.L1193:
1168:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_GRAY_TO_RGB_SUPPORTED
 10293              		.loc 1 1168 0
 10294 00a8 F6C720   		testb	$32, %bh
 10295 00ab 0F85D300 		jne	.L1265
 10295      0000
 10296              	.L1194:
1176:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_EXPAND_16_SUPPORTED
 10297              		.loc 1 1176 0
 10298 00b1 80E740   		andb	$64, %bh
 10299              	.LVL1287:
 10300 00b4 0F85DB00 		jne	.L1266
 10300      0000
 10301              	.L1195:
1188:fltk-1.3.4-1/png/pngread.c **** 
 10302              		.loc 1 1188 0
 10303 00ba 4C89E7   		movq	%r12, %rdi
 10304 00bd E8000000 		call	png_set_interlace_handling
 10304      00
 10305              	.LVL1288:
1194:fltk-1.3.4-1/png/pngread.c **** 
 10306              		.loc 1 1194 0
 10307 00c2 4889EE   		movq	%rbp, %rsi
 10308 00c5 4C89E7   		movq	%r12, %rdi
 10309 00c8 E8000000 		call	png_read_update_info
 10309      00
 10310              	.LVL1289:
1198:fltk-1.3.4-1/png/pngread.c ****    if (info_ptr->row_pointers == NULL)
 10311              		.loc 1 1198 0
 10312 00cd 31C9     		xorl	%ecx, %ecx
 10313 00cf 4889EE   		movq	%rbp, %rsi
 10314 00d2 BA400000 		movl	$64, %edx
 10314      00
 10315 00d7 4C89E7   		movq	%r12, %rdi
 10316 00da E8000000 		call	png_free_data
 10316      00
 10317              	.LVL1290:
1199:fltk-1.3.4-1/png/pngread.c ****    {
 10318              		.loc 1 1199 0
 10319 00df 488BB550 		movq	336(%rbp), %rsi
 10319      010000
 10320 00e6 4885F6   		testq	%rsi, %rsi
 10321 00e9 0F844101 		je	.L1267
 10321      0000
 10322              	.L1196:
1216:fltk-1.3.4-1/png/pngread.c ****    info_ptr->valid |= PNG_INFO_IDAT;
 10323              		.loc 1 1216 0
 10324 00ef 4C89E7   		movq	%r12, %rdi
 10325 00f2 E8000000 		call	png_read_image
 10325      00
 10326              	.LVL1291:
1217:fltk-1.3.4-1/png/pngread.c **** 
 10327              		.loc 1 1217 0
 10328 00f7 814D0800 		orl	$32768, 8(%rbp)
 10328      800000
1223:fltk-1.3.4-1/png/pngread.c **** #endif /* INFO_IMAGE */
 10329              		.loc 1 1223 0
 10330 00fe 4883C408 		addq	$8, %rsp
 10331              		.cfi_def_cfa_offset 40
1220:fltk-1.3.4-1/png/pngread.c **** 
 10332              		.loc 1 1220 0
 10333 0102 4889EE   		movq	%rbp, %rsi
1223:fltk-1.3.4-1/png/pngread.c **** #endif /* INFO_IMAGE */
 10334              		.loc 1 1223 0
 10335 0105 5B       		popq	%rbx
 10336              		.cfi_restore 3
 10337              		.cfi_def_cfa_offset 32
1220:fltk-1.3.4-1/png/pngread.c **** 
 10338              		.loc 1 1220 0
 10339 0106 4C89E7   		movq	%r12, %rdi
1223:fltk-1.3.4-1/png/pngread.c **** #endif /* INFO_IMAGE */
 10340              		.loc 1 1223 0
 10341 0109 5D       		popq	%rbp
 10342              		.cfi_restore 6
 10343              		.cfi_def_cfa_offset 24
 10344              	.LVL1292:
 10345 010a 415C     		popq	%r12
 10346              		.cfi_restore 12
 10347              		.cfi_def_cfa_offset 16
 10348              	.LVL1293:
 10349 010c 415D     		popq	%r13
 10350              		.cfi_restore 13
 10351              		.cfi_def_cfa_offset 8
1220:fltk-1.3.4-1/png/pngread.c **** 
 10352              		.loc 1 1220 0
 10353 010e E9000000 		jmp	png_read_end
 10353      00
 10354              	.LVL1294:
 10355              		.p2align 4,,10
 10356 0113 0F1F4400 		.p2align 3
 10356      00
 10357              	.L1251:
 10358 0118 F3C3     		rep ret
 10359              	.LVL1295:
 10360 011a 660F1F44 		.p2align 4,,10
 10360      0000
 10361              		.p2align 3
 10362              	.L1259:
 10363              		.cfi_def_cfa_offset 48
 10364              		.cfi_offset 3, -40
 10365              		.cfi_offset 6, -32
 10366              		.cfi_offset 12, -24
 10367              		.cfi_offset 13, -16
1116:fltk-1.3.4-1/png/pngread.c **** #else
 10368              		.loc 1 1116 0
 10369 0120 4C89E7   		movq	%r12, %rdi
 10370 0123 E8000000 		call	png_set_invert_mono
 10370      00
 10371              	.LVL1296:
1125:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_SHIFT_SUPPORTED
 10372              		.loc 1 1125 0
 10373 0128 F6C340   		testb	$64, %bl
 10374 012b 0F8453FF 		je	.L1189
 10374      FFFF
 10375 0131 E944FFFF 		jmp	.L1268
 10375      FF
 10376 0136 662E0F1F 		.p2align 4,,10
 10376      84000000 
 10376      0000
 10377              		.p2align 3
 10378              	.L1261:
1136:fltk-1.3.4-1/png/pngread.c **** #else
 10379              		.loc 1 1136 0
 10380 0140 4C89E7   		movq	%r12, %rdi
 10381 0143 E8000000 		call	png_set_bgr
 10381      00
 10382              	.LVL1297:
1142:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_SWAP_ALPHA_SUPPORTED
 10383              		.loc 1 1142 0
 10384 0148 F6C701   		testb	$1, %bh
 10385 014b 0F8445FF 		je	.L1191
 10385      FFFF
 10386              	.L1262:
1144:fltk-1.3.4-1/png/pngread.c **** #else
 10387              		.loc 1 1144 0
 10388 0151 4C89E7   		movq	%r12, %rdi
 10389 0154 E8000000 		call	png_set_swap_alpha
 10389      00
 10390              	.LVL1298:
1150:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_SWAP_SUPPORTED
 10391              		.loc 1 1150 0
 10392 0159 F6C702   		testb	$2, %bh
 10393 015c 0F843DFF 		je	.L1192
 10393      FFFF
 10394              	.L1263:
1152:fltk-1.3.4-1/png/pngread.c **** #else
 10395              		.loc 1 1152 0
 10396 0162 4C89E7   		movq	%r12, %rdi
 10397 0165 E8000000 		call	png_set_swap
 10397      00
 10398              	.LVL1299:
1159:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_INVERT_ALPHA_SUPPORTED
 10399              		.loc 1 1159 0
 10400 016a F6C704   		testb	$4, %bh
 10401 016d 0F8435FF 		je	.L1193
 10401      FFFF
 10402              	.L1264:
1161:fltk-1.3.4-1/png/pngread.c **** #else
 10403              		.loc 1 1161 0
 10404 0173 4C89E7   		movq	%r12, %rdi
 10405 0176 E8000000 		call	png_set_invert_alpha
 10405      00
 10406              	.LVL1300:
1168:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_GRAY_TO_RGB_SUPPORTED
 10407              		.loc 1 1168 0
 10408 017b F6C720   		testb	$32, %bh
 10409 017e 0F842DFF 		je	.L1194
 10409      FFFF
 10410              	.L1265:
1170:fltk-1.3.4-1/png/pngread.c **** #else
 10411              		.loc 1 1170 0
 10412 0184 4C89E7   		movq	%r12, %rdi
 10413 0187 E8000000 		call	png_set_gray_to_rgb
 10413      00
 10414              	.LVL1301:
1176:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_EXPAND_16_SUPPORTED
 10415              		.loc 1 1176 0
 10416 018c 80E740   		andb	$64, %bh
 10417              	.LVL1302:
 10418 018f 0F8425FF 		je	.L1195
 10418      FFFF
 10419              	.L1266:
1178:fltk-1.3.4-1/png/pngread.c **** #else
 10420              		.loc 1 1178 0
 10421 0195 4C89E7   		movq	%r12, %rdi
 10422 0198 E8000000 		call	png_set_expand_16
 10422      00
 10423              	.LVL1303:
 10424 019d E918FFFF 		jmp	.L1195
 10424      FF
 10425              	.LVL1304:
 10426              		.p2align 4,,10
 10427 01a2 660F1F44 		.p2align 3
 10427      0000
 10428              	.L1253:
1051:fltk-1.3.4-1/png/pngread.c **** #else
 10429              		.loc 1 1051 0
 10430 01a8 4C89E7   		movq	%r12, %rdi
 10431 01ab E8000000 		call	png_set_scale_16
 10431      00
 10432              	.LVL1305:
1060:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_STRIP_16_TO_8_SUPPORTED
 10433              		.loc 1 1060 0
 10434 01b0 F6C301   		testb	$1, %bl
 10435 01b3 0F848FFE 		je	.L1183
 10435      FFFF
 10436              	.L1254:
1062:fltk-1.3.4-1/png/pngread.c **** #else
 10437              		.loc 1 1062 0
 10438 01b9 4C89E7   		movq	%r12, %rdi
 10439 01bc E8000000 		call	png_set_strip_16
 10439      00
 10440              	.LVL1306:
1070:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_STRIP_ALPHA_SUPPORTED
 10441              		.loc 1 1070 0
 10442 01c1 F6C302   		testb	$2, %bl
 10443 01c4 0F8487FE 		je	.L1184
 10443      FFFF
 10444              	.L1255:
1072:fltk-1.3.4-1/png/pngread.c **** #else
 10445              		.loc 1 1072 0
 10446 01ca 4C89E7   		movq	%r12, %rdi
 10447 01cd E8000000 		call	png_set_strip_alpha
 10447      00
 10448              	.LVL1307:
1080:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_PACK_SUPPORTED
 10449              		.loc 1 1080 0
 10450 01d2 F6C304   		testb	$4, %bl
 10451 01d5 0F847FFE 		je	.L1185
 10451      FFFF
 10452              	.L1256:
1082:fltk-1.3.4-1/png/pngread.c **** #else
 10453              		.loc 1 1082 0
 10454 01db 4C89E7   		movq	%r12, %rdi
 10455 01de E8000000 		call	png_set_packing
 10455      00
 10456              	.LVL1308:
1090:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_PACKSWAP_SUPPORTED
 10457              		.loc 1 1090 0
 10458 01e3 F6C308   		testb	$8, %bl
 10459 01e6 0F8477FE 		je	.L1186
 10459      FFFF
 10460              	.L1257:
1092:fltk-1.3.4-1/png/pngread.c **** #else
 10461              		.loc 1 1092 0
 10462 01ec 4C89E7   		movq	%r12, %rdi
 10463 01ef E8000000 		call	png_set_packswap
 10463      00
 10464              	.LVL1309:
1102:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_EXPAND_SUPPORTED
 10465              		.loc 1 1102 0
 10466 01f4 F6C310   		testb	$16, %bl
 10467 01f7 0F846FFE 		je	.L1187
 10467      FFFF
 10468              	.L1258:
1104:fltk-1.3.4-1/png/pngread.c **** #else
 10469              		.loc 1 1104 0
 10470 01fd 4C89E7   		movq	%r12, %rdi
 10471 0200 E8000000 		call	png_set_expand
 10471      00
 10472              	.LVL1310:
1114:fltk-1.3.4-1/png/pngread.c **** #ifdef PNG_READ_INVERT_SUPPORTED
 10473              		.loc 1 1114 0
 10474 0205 F6C320   		testb	$32, %bl
 10475 0208 0F8467FE 		je	.L1188
 10475      FFFF
 10476 020e E90DFFFF 		jmp	.L1259
 10476      FF
 10477              		.p2align 4,,10
 10478 0213 0F1F4400 		.p2align 3
 10478      00
 10479              	.L1260:
1128:fltk-1.3.4-1/png/pngread.c **** #else
 10480              		.loc 1 1128 0
 10481 0218 488DB5B0 		leaq	176(%rbp), %rsi
 10481      000000
 10482 021f 4C89E7   		movq	%r12, %rdi
 10483 0222 E8000000 		call	png_set_shift
 10483      00
 10484              	.LVL1311:
 10485 0227 E958FEFF 		jmp	.L1189
 10485      FF
 10486              	.LVL1312:
 10487 022c 0F1F4000 		.p2align 4,,10
 10488              		.p2align 3
 10489              	.L1267:
 10490              	.LBB442:
1203:fltk-1.3.4-1/png/pngread.c ****           info_ptr->height * (sizeof (png_bytep))));
 10491              		.loc 1 1203 0
 10492 0230 8B7504   		movl	4(%rbp), %esi
 10493 0233 4C89E7   		movq	%r12, %rdi
 10494 0236 48C1E603 		salq	$3, %rsi
 10495 023a E8000000 		call	png_malloc
 10495      00
 10496              	.LVL1313:
1206:fltk-1.3.4-1/png/pngread.c ****          info_ptr->row_pointers[iptr] = NULL;
 10497              		.loc 1 1206 0
 10498 023f 8B5504   		movl	4(%rbp), %edx
1203:fltk-1.3.4-1/png/pngread.c ****           info_ptr->height * (sizeof (png_bytep))));
 10499              		.loc 1 1203 0
 10500 0242 48898550 		movq	%rax, 336(%rbp)
 10500      010000
 10501              	.LVL1314:
1206:fltk-1.3.4-1/png/pngread.c ****          info_ptr->row_pointers[iptr] = NULL;
 10502              		.loc 1 1206 0
 10503 0249 85D2     		testl	%edx, %edx
 10504 024b 746D     		je	.L1197
1206:fltk-1.3.4-1/png/pngread.c ****          info_ptr->row_pointers[iptr] = NULL;
 10505              		.loc 1 1206 0 is_stmt 0 discriminator 3
 10506 024d 31D2     		xorl	%edx, %edx
 10507 024f EB0E     		jmp	.L1199
 10508              	.LVL1315:
 10509              		.p2align 4,,10
 10510 0251 0F1F8000 		.p2align 3
 10510      000000
 10511              	.L1269:
 10512 0258 488B8550 		movq	336(%rbp), %rax
 10512      010000
 10513              	.LVL1316:
 10514              	.L1199:
1207:fltk-1.3.4-1/png/pngread.c **** 
 10515              		.loc 1 1207 0 is_stmt 1 discriminator 3
 10516 025f 89D1     		movl	%edx, %ecx
1206:fltk-1.3.4-1/png/pngread.c ****          info_ptr->row_pointers[iptr] = NULL;
 10517              		.loc 1 1206 0 discriminator 3
 10518 0261 83C201   		addl	$1, %edx
 10519              	.LVL1317:
1207:fltk-1.3.4-1/png/pngread.c **** 
 10520              		.loc 1 1207 0 discriminator 3
 10521 0264 48C704C8 		movq	$0, (%rax,%rcx,8)
 10521      00000000 
1206:fltk-1.3.4-1/png/pngread.c ****          info_ptr->row_pointers[iptr] = NULL;
 10522              		.loc 1 1206 0 discriminator 3
 10523 026c 8B4504   		movl	4(%rbp), %eax
 10524 026f 39D0     		cmpl	%edx, %eax
 10525 0271 77E5     		ja	.L1269
1209:fltk-1.3.4-1/png/pngread.c **** 
 10526              		.loc 1 1209 0
 10527 0273 838D1C01 		orl	$64, 284(%rbp)
 10527      000040
 10528              	.LVL1318:
1211:fltk-1.3.4-1/png/pngread.c ****          info_ptr->row_pointers[iptr] = png_voidcast(png_bytep,
 10529              		.loc 1 1211 0
 10530 027a 85C0     		testl	%eax, %eax
 10531 027c 488BB550 		movq	336(%rbp), %rsi
 10531      010000
 10532 0283 0F8466FE 		je	.L1196
 10532      FFFF
1211:fltk-1.3.4-1/png/pngread.c ****          info_ptr->row_pointers[iptr] = png_voidcast(png_bytep,
 10533              		.loc 1 1211 0 is_stmt 0 discriminator 3
 10534 0289 31DB     		xorl	%ebx, %ebx
 10535              	.LVL1319:
 10536 028b 0F1F4400 		.p2align 4,,10
 10536      00
 10537              		.p2align 3
 10538              	.L1201:
1212:fltk-1.3.4-1/png/pngread.c ****             png_malloc(png_ptr, info_ptr->rowbytes));
 10539              		.loc 1 1212 0 is_stmt 1 discriminator 3
 10540 0290 89D8     		movl	%ebx, %eax
 10541 0292 4C89E7   		movq	%r12, %rdi
1211:fltk-1.3.4-1/png/pngread.c ****          info_ptr->row_pointers[iptr] = png_voidcast(png_bytep,
 10542              		.loc 1 1211 0 discriminator 3
 10543 0295 83C301   		addl	$1, %ebx
 10544              	.LVL1320:
1212:fltk-1.3.4-1/png/pngread.c ****             png_malloc(png_ptr, info_ptr->rowbytes));
 10545              		.loc 1 1212 0 discriminator 3
 10546 0298 4C8D2CC6 		leaq	(%rsi,%rax,8), %r13
 10547 029c 488B7510 		movq	16(%rbp), %rsi
 10548 02a0 E8000000 		call	png_malloc
 10548      00
 10549              	.LVL1321:
 10550 02a5 49894500 		movq	%rax, 0(%r13)
1211:fltk-1.3.4-1/png/pngread.c ****          info_ptr->row_pointers[iptr] = png_voidcast(png_bytep,
 10551              		.loc 1 1211 0 discriminator 3
 10552 02a9 395D04   		cmpl	%ebx, 4(%rbp)
 10553 02ac 488BB550 		movq	336(%rbp), %rsi
 10553      010000
 10554 02b3 77DB     		ja	.L1201
 10555 02b5 E935FEFF 		jmp	.L1196
 10555      FF
 10556              	.LVL1322:
 10557              	.L1197:
1209:fltk-1.3.4-1/png/pngread.c **** 
 10558              		.loc 1 1209 0
 10559 02ba 838D1C01 		orl	$64, 284(%rbp)
 10559      000040
 10560 02c1 4889C6   		movq	%rax, %rsi
 10561 02c4 E926FEFF 		jmp	.L1196
 10561      FF
 10562              	.LVL1323:
 10563              	.L1252:
 10564              	.LBE442:
1035:fltk-1.3.4-1/png/pngread.c **** 
 10565              		.loc 1 1035 0
 10566 02c9 BE000000 		movl	$.LC75, %esi
 10566      00
 10567 02ce 4C89E7   		movq	%r12, %rdi
 10568 02d1 E8000000 		call	png_error
 10568      00
 10569              	.LVL1324:
 10570              		.cfi_endproc
 10571              	.LFE69:
 10573              		.section	.text.unlikely.png_read_png
 10574              	.LCOLDE76:
 10575              		.section	.text.png_read_png
 10576              	.LHOTE76:
 10577              		.section	.rodata.str1.8
 10578 0539 00000000 		.align 8
 10578      000000
 10579              	.LC77:
 10580 0540 706E675F 		.string	"png_image_begin_read_from_stdio: invalid argument"
 10580      696D6167 
 10580      655F6265 
 10580      67696E5F 
 10580      72656164 
 10581 0572 00000000 		.align 8
 10581      0000
 10582              	.LC78:
 10583 0578 706E675F 		.string	"png_image_begin_read_from_stdio: incorrect PNG_IMAGE_VERSION"
 10583      696D6167 
 10583      655F6265 
 10583      67696E5F 
 10583      72656164 
 10584              		.section	.text.unlikely.png_image_begin_read_from_stdio,"ax",@progbits
 10585              	.LCOLDB79:
 10586              		.section	.text.png_image_begin_read_from_stdio,"ax",@progbits
 10587              	.LHOTB79:
 10588              		.p2align 4,,15
 10589              		.globl	png_image_begin_read_from_stdio
 10591              	png_image_begin_read_from_stdio:
 10592              	.LFB74:
1446:fltk-1.3.4-1/png/pngread.c ****    if (image != NULL && image->version == PNG_IMAGE_VERSION)
 10593              		.loc 1 1446 0
 10594              		.cfi_startproc
 10595              	.LVL1325:
1447:fltk-1.3.4-1/png/pngread.c ****    {
 10596              		.loc 1 1447 0
 10597 0000 4885FF   		testq	%rdi, %rdi
 10598 0003 7463     		je	.L1280
1447:fltk-1.3.4-1/png/pngread.c ****    {
 10599              		.loc 1 1447 0 is_stmt 0 discriminator 1
 10600 0005 837F0801 		cmpl	$1, 8(%rdi)
 10601 0009 740D     		je	.L1281
1468:fltk-1.3.4-1/png/pngread.c ****          "png_image_begin_read_from_stdio: incorrect PNG_IMAGE_VERSION");
 10602              		.loc 1 1468 0 is_stmt 1
 10603 000b BE000000 		movl	$.LC78, %esi
 10603      00
 10604              	.LVL1326:
 10605 0010 E9000000 		jmp	png_image_error
 10605      00
 10606              	.LVL1327:
 10607              		.p2align 4,,10
 10608 0015 0F1F00   		.p2align 3
 10609              	.L1281:
1449:fltk-1.3.4-1/png/pngread.c ****       {
 10610              		.loc 1 1449 0
 10611 0018 4885F6   		testq	%rsi, %rsi
 10612 001b 7453     		je	.L1274
1446:fltk-1.3.4-1/png/pngread.c ****    if (image != NULL && image->version == PNG_IMAGE_VERSION)
 10613              		.loc 1 1446 0
 10614 001d 55       		pushq	%rbp
 10615              		.cfi_def_cfa_offset 16
 10616              		.cfi_offset 6, -16
 10617 001e 53       		pushq	%rbx
 10618              		.cfi_def_cfa_offset 24
 10619              		.cfi_offset 3, -24
 10620 001f 4889F5   		movq	%rsi, %rbp
 10621 0022 4889FB   		movq	%rdi, %rbx
 10622 0025 4883EC08 		subq	$8, %rsp
 10623              		.cfi_def_cfa_offset 32
1451:fltk-1.3.4-1/png/pngread.c ****          {
 10624              		.loc 1 1451 0
 10625 0029 E8000000 		call	png_image_read_init
 10625      00
 10626              	.LVL1328:
 10627 002e 85C0     		testl	%eax, %eax
 10628 0030 750E     		jne	.L1282
1472:fltk-1.3.4-1/png/pngread.c **** 
 10629              		.loc 1 1472 0
 10630 0032 4883C408 		addq	$8, %rsp
 10631              		.cfi_remember_state
 10632              		.cfi_def_cfa_offset 24
 10633 0036 31C0     		xorl	%eax, %eax
 10634 0038 5B       		popq	%rbx
 10635              		.cfi_restore 3
 10636              		.cfi_def_cfa_offset 16
 10637              	.LVL1329:
 10638 0039 5D       		popq	%rbp
 10639              		.cfi_restore 6
 10640              		.cfi_def_cfa_offset 8
 10641              	.LVL1330:
 10642 003a C3       		ret
 10643              	.LVL1331:
 10644 003b 0F1F4400 		.p2align 4,,10
 10644      00
 10645              		.p2align 3
 10646              	.L1282:
 10647              		.cfi_restore_state
1457:fltk-1.3.4-1/png/pngread.c ****             return png_safe_execute(image, png_image_read_header, image);
 10648              		.loc 1 1457 0
 10649 0040 488B03   		movq	(%rbx), %rax
1458:fltk-1.3.4-1/png/pngread.c ****          }
 10650              		.loc 1 1458 0
 10651 0043 4889DA   		movq	%rbx, %rdx
 10652 0046 4889DF   		movq	%rbx, %rdi
 10653 0049 BE000000 		movl	$png_image_read_header, %esi
 10653      00
1457:fltk-1.3.4-1/png/pngread.c ****             return png_safe_execute(image, png_image_read_header, image);
 10654              		.loc 1 1457 0
 10655 004e 488B00   		movq	(%rax), %rax
 10656 0051 4889A808 		movq	%rbp, 264(%rax)
 10656      010000
1472:fltk-1.3.4-1/png/pngread.c **** 
 10657              		.loc 1 1472 0
 10658 0058 4883C408 		addq	$8, %rsp
 10659              		.cfi_def_cfa_offset 24
 10660 005c 5B       		popq	%rbx
 10661              		.cfi_restore 3
 10662              		.cfi_def_cfa_offset 16
 10663              	.LVL1332:
 10664 005d 5D       		popq	%rbp
 10665              		.cfi_restore 6
 10666              		.cfi_def_cfa_offset 8
 10667              	.LVL1333:
1458:fltk-1.3.4-1/png/pngread.c ****          }
 10668              		.loc 1 1458 0
 10669 005e E9000000 		jmp	png_safe_execute
 10669      00
 10670              	.LVL1334:
 10671              		.p2align 4,,10
 10672 0063 0F1F4400 		.p2align 3
 10672      00
 10673              	.L1280:
1472:fltk-1.3.4-1/png/pngread.c **** 
 10674              		.loc 1 1472 0
 10675 0068 31C0     		xorl	%eax, %eax
 10676 006a C3       		ret
 10677 006b 0F1F4400 		.p2align 4,,10
 10677      00
 10678              		.p2align 3
 10679              	.L1274:
1463:fltk-1.3.4-1/png/pngread.c ****             "png_image_begin_read_from_stdio: invalid argument");
 10680              		.loc 1 1463 0
 10681 0070 BE000000 		movl	$.LC77, %esi
 10681      00
 10682              	.LVL1335:
 10683 0075 E9000000 		jmp	png_image_error
 10683      00
 10684              	.LVL1336:
 10685              		.cfi_endproc
 10686              	.LFE74:
 10688              		.section	.text.unlikely.png_image_begin_read_from_stdio
 10689              	.LCOLDE79:
 10690              		.section	.text.png_image_begin_read_from_stdio
 10691              	.LHOTE79:
 10692              		.section	.rodata.str1.1
 10693              	.LC80:
 10694 0181 726200   		.string	"rb"
 10695              		.section	.rodata.str1.8
 10696 05b5 000000   		.align 8
 10697              	.LC81:
 10698 05b8 706E675F 		.string	"png_image_begin_read_from_file: invalid argument"
 10698      696D6167 
 10698      655F6265 
 10698      67696E5F 
 10698      72656164 
 10699 05e9 00000000 		.align 8
 10699      000000
 10700              	.LC82:
 10701 05f0 706E675F 		.string	"png_image_begin_read_from_file: incorrect PNG_IMAGE_VERSION"
 10701      696D6167 
 10701      655F6265 
 10701      67696E5F 
 10701      72656164 
 10702              		.section	.text.unlikely.png_image_begin_read_from_file,"ax",@progbits
 10703              	.LCOLDB83:
 10704              		.section	.text.png_image_begin_read_from_file,"ax",@progbits
 10705              	.LHOTB83:
 10706              		.p2align 4,,15
 10707              		.globl	png_image_begin_read_from_file
 10709              	png_image_begin_read_from_file:
 10710              	.LFB75:
1476:fltk-1.3.4-1/png/pngread.c ****    if (image != NULL && image->version == PNG_IMAGE_VERSION)
 10711              		.loc 1 1476 0
 10712              		.cfi_startproc
 10713              	.LVL1337:
1477:fltk-1.3.4-1/png/pngread.c ****    {
 10714              		.loc 1 1477 0
 10715 0000 4885FF   		testq	%rdi, %rdi
 10716 0003 747B     		je	.L1291
1477:fltk-1.3.4-1/png/pngread.c ****    {
 10717              		.loc 1 1477 0 is_stmt 0 discriminator 1
 10718 0005 837F0801 		cmpl	$1, 8(%rdi)
 10719 0009 740D     		je	.L1292
1506:fltk-1.3.4-1/png/pngread.c ****          "png_image_begin_read_from_file: incorrect PNG_IMAGE_VERSION");
 10720              		.loc 1 1506 0 is_stmt 1
 10721 000b BE000000 		movl	$.LC82, %esi
 10721      00
 10722              	.LVL1338:
 10723 0010 E9000000 		jmp	png_image_error
 10723      00
 10724              	.LVL1339:
 10725              		.p2align 4,,10
 10726 0015 0F1F00   		.p2align 3
 10727              	.L1292:
1479:fltk-1.3.4-1/png/pngread.c ****       {
 10728              		.loc 1 1479 0
 10729 0018 4885F6   		testq	%rsi, %rsi
 10730 001b 0F849F00 		je	.L1286
 10730      0000
1476:fltk-1.3.4-1/png/pngread.c ****    if (image != NULL && image->version == PNG_IMAGE_VERSION)
 10731              		.loc 1 1476 0
 10732 0021 55       		pushq	%rbp
 10733              		.cfi_def_cfa_offset 16
 10734              		.cfi_offset 6, -16
 10735 0022 53       		pushq	%rbx
 10736              		.cfi_def_cfa_offset 24
 10737              		.cfi_offset 3, -24
 10738 0023 4889F0   		movq	%rsi, %rax
 10739 0026 4889FB   		movq	%rdi, %rbx
 10740              	.LBB443:
1481:fltk-1.3.4-1/png/pngread.c **** 
 10741              		.loc 1 1481 0
 10742 0029 BE000000 		movl	$.LC80, %esi
 10742      00
 10743              	.LVL1340:
 10744 002e 4889C7   		movq	%rax, %rdi
 10745              	.LVL1341:
 10746              	.LBE443:
1476:fltk-1.3.4-1/png/pngread.c ****    if (image != NULL && image->version == PNG_IMAGE_VERSION)
 10747              		.loc 1 1476 0
 10748 0031 4883EC08 		subq	$8, %rsp
 10749              		.cfi_def_cfa_offset 32
 10750              	.LBB444:
1481:fltk-1.3.4-1/png/pngread.c **** 
 10751              		.loc 1 1481 0
 10752 0035 E8000000 		call	fopen
 10752      00
 10753              	.LVL1342:
1483:fltk-1.3.4-1/png/pngread.c ****          {
 10754              		.loc 1 1483 0
 10755 003a 4885C0   		testq	%rax, %rax
1481:fltk-1.3.4-1/png/pngread.c **** 
 10756              		.loc 1 1481 0
 10757 003d 4889C5   		movq	%rax, %rbp
 10758              	.LVL1343:
1483:fltk-1.3.4-1/png/pngread.c ****          {
 10759              		.loc 1 1483 0
 10760 0040 745E     		je	.L1287
1485:fltk-1.3.4-1/png/pngread.c ****             {
 10761              		.loc 1 1485 0
 10762 0042 4889DF   		movq	%rbx, %rdi
 10763 0045 E8000000 		call	png_image_read_init
 10763      00
 10764              	.LVL1344:
 10765 004a 85C0     		testl	%eax, %eax
 10766 004c 743A     		je	.L1288
1487:fltk-1.3.4-1/png/pngread.c ****                image->opaque->owned_file = 1;
 10767              		.loc 1 1487 0
 10768 004e 488B03   		movq	(%rbx), %rax
1489:fltk-1.3.4-1/png/pngread.c ****             }
 10769              		.loc 1 1489 0
 10770 0051 4889DA   		movq	%rbx, %rdx
 10771 0054 4889DF   		movq	%rbx, %rdi
 10772 0057 BE000000 		movl	$png_image_read_header, %esi
 10772      00
1487:fltk-1.3.4-1/png/pngread.c ****                image->opaque->owned_file = 1;
 10773              		.loc 1 1487 0
 10774 005c 488B00   		movq	(%rax), %rax
 10775 005f 4889A808 		movq	%rbp, 264(%rax)
 10775      010000
1488:fltk-1.3.4-1/png/pngread.c ****                return png_safe_execute(image, png_image_read_header, image);
 10776              		.loc 1 1488 0
 10777 0066 488B03   		movq	(%rbx), %rax
 10778 0069 80482802 		orb	$2, 40(%rax)
 10779              	.LBE444:
1510:fltk-1.3.4-1/png/pngread.c **** #endif /* STDIO */
 10780              		.loc 1 1510 0
 10781 006d 4883C408 		addq	$8, %rsp
 10782              		.cfi_def_cfa_offset 24
 10783 0071 5B       		popq	%rbx
 10784              		.cfi_restore 3
 10785              		.cfi_def_cfa_offset 16
 10786              	.LVL1345:
 10787 0072 5D       		popq	%rbp
 10788              		.cfi_restore 6
 10789              		.cfi_def_cfa_offset 8
 10790              	.LVL1346:
 10791              	.LBB445:
1489:fltk-1.3.4-1/png/pngread.c ****             }
 10792              		.loc 1 1489 0
 10793 0073 E9000000 		jmp	png_safe_execute
 10793      00
 10794              	.LVL1347:
 10795 0078 0F1F8400 		.p2align 4,,10
 10795      00000000 
 10796              		.p2align 3
 10797              	.L1291:
 10798              	.LBE445:
1510:fltk-1.3.4-1/png/pngread.c **** #endif /* STDIO */
 10799              		.loc 1 1510 0
 10800 0080 31C0     		xorl	%eax, %eax
 10801 0082 C3       		ret
 10802              	.LVL1348:
 10803              		.p2align 4,,10
 10804 0083 0F1F4400 		.p2align 3
 10804      00
 10805              	.L1288:
 10806              		.cfi_def_cfa_offset 32
 10807              		.cfi_offset 3, -24
 10808              		.cfi_offset 6, -16
 10809              	.LBB446:
1493:fltk-1.3.4-1/png/pngread.c ****          }
 10810              		.loc 1 1493 0
 10811 0088 4889EF   		movq	%rbp, %rdi
 10812 008b E8000000 		call	fclose
 10812      00
 10813              	.LVL1349:
 10814              	.LBE446:
1510:fltk-1.3.4-1/png/pngread.c **** #endif /* STDIO */
 10815              		.loc 1 1510 0
 10816 0090 4883C408 		addq	$8, %rsp
 10817              		.cfi_remember_state
 10818              		.cfi_def_cfa_offset 24
 10819 0094 31C0     		xorl	%eax, %eax
 10820 0096 5B       		popq	%rbx
 10821              		.cfi_restore 3
 10822              		.cfi_def_cfa_offset 16
 10823              	.LVL1350:
 10824 0097 5D       		popq	%rbp
 10825              		.cfi_restore 6
 10826              		.cfi_def_cfa_offset 8
 10827              	.LVL1351:
 10828 0098 C3       		ret
 10829              	.LVL1352:
 10830 0099 0F1F8000 		.p2align 4,,10
 10830      000000
 10831              		.p2align 3
 10832              	.L1287:
 10833              		.cfi_restore_state
 10834              	.LBB447:
1497:fltk-1.3.4-1/png/pngread.c ****       }
 10835              		.loc 1 1497 0
 10836 00a0 E8000000 		call	__errno_location
 10836      00
 10837              	.LVL1353:
 10838 00a5 8B38     		movl	(%rax), %edi
 10839 00a7 E8000000 		call	strerror
 10839      00
 10840              	.LVL1354:
 10841              	.LBE447:
1510:fltk-1.3.4-1/png/pngread.c **** #endif /* STDIO */
 10842              		.loc 1 1510 0
 10843 00ac 4883C408 		addq	$8, %rsp
 10844              		.cfi_def_cfa_offset 24
 10845              	.LBB448:
1497:fltk-1.3.4-1/png/pngread.c ****       }
 10846              		.loc 1 1497 0
 10847 00b0 4889DF   		movq	%rbx, %rdi
 10848 00b3 4889C6   		movq	%rax, %rsi
 10849              	.LBE448:
1510:fltk-1.3.4-1/png/pngread.c **** #endif /* STDIO */
 10850              		.loc 1 1510 0
 10851 00b6 5B       		popq	%rbx
 10852              		.cfi_restore 3
 10853              		.cfi_def_cfa_offset 16
 10854              	.LVL1355:
 10855 00b7 5D       		popq	%rbp
 10856              		.cfi_restore 6
 10857              		.cfi_def_cfa_offset 8
 10858              	.LVL1356:
 10859              	.LBB449:
1497:fltk-1.3.4-1/png/pngread.c ****       }
 10860              		.loc 1 1497 0
 10861 00b8 E9000000 		jmp	png_image_error
 10861      00
 10862              	.LVL1357:
 10863 00bd 0F1F00   		.p2align 4,,10
 10864              		.p2align 3
 10865              	.L1286:
 10866              	.LBE449:
1501:fltk-1.3.4-1/png/pngread.c ****             "png_image_begin_read_from_file: invalid argument");
 10867              		.loc 1 1501 0
 10868 00c0 BE000000 		movl	$.LC81, %esi
 10868      00
 10869              	.LVL1358:
 10870 00c5 E9000000 		jmp	png_image_error
 10870      00
 10871              	.LVL1359:
 10872              		.cfi_endproc
 10873              	.LFE75:
 10875              		.section	.text.unlikely.png_image_begin_read_from_file
 10876              	.LCOLDE83:
 10877              		.section	.text.png_image_begin_read_from_file
 10878              	.LHOTE83:
 10879              		.section	.rodata.str1.8
 10880 062c 00000000 		.align 8
 10881              	.LC84:
 10882 0630 706E675F 		.string	"png_image_begin_read_from_memory: invalid argument"
 10882      696D6167 
 10882      655F6265 
 10882      67696E5F 
 10882      72656164 
 10883 0663 00000000 		.align 8
 10883      00
 10884              	.LC85:
 10885 0668 706E675F 		.string	"png_image_begin_read_from_memory: incorrect PNG_IMAGE_VERSION"
 10885      696D6167 
 10885      655F6265 
 10885      67696E5F 
 10885      72656164 
 10886              		.section	.text.unlikely.png_image_begin_read_from_memory,"ax",@progbits
 10887              	.LCOLDB86:
 10888              		.section	.text.png_image_begin_read_from_memory,"ax",@progbits
 10889              	.LHOTB86:
 10890              		.p2align 4,,15
 10891              		.globl	png_image_begin_read_from_memory
 10893              	png_image_begin_read_from_memory:
 10894              	.LFB77:
1545:fltk-1.3.4-1/png/pngread.c ****    if (image != NULL && image->version == PNG_IMAGE_VERSION)
 10895              		.loc 1 1545 0
 10896              		.cfi_startproc
 10897              	.LVL1360:
1546:fltk-1.3.4-1/png/pngread.c ****    {
 10898              		.loc 1 1546 0
 10899 0000 4885FF   		testq	%rdi, %rdi
 10900 0003 744B     		je	.L1309
1546:fltk-1.3.4-1/png/pngread.c ****    {
 10901              		.loc 1 1546 0 is_stmt 0 discriminator 1
 10902 0005 837F0801 		cmpl	$1, 8(%rdi)
 10903 0009 740D     		je	.L1310
1571:fltk-1.3.4-1/png/pngread.c ****          "png_image_begin_read_from_memory: incorrect PNG_IMAGE_VERSION");
 10904              		.loc 1 1571 0 is_stmt 1
 10905 000b BE000000 		movl	$.LC85, %esi
 10905      00
 10906              	.LVL1361:
 10907 0010 E9000000 		jmp	png_image_error
 10907      00
 10908              	.LVL1362:
 10909              		.p2align 4,,10
 10910 0015 0F1F00   		.p2align 3
 10911              	.L1310:
1548:fltk-1.3.4-1/png/pngread.c ****       {
 10912              		.loc 1 1548 0
 10913 0018 4885F6   		testq	%rsi, %rsi
 10914 001b 7423     		je	.L1297
 10915 001d 4885D2   		testq	%rdx, %rdx
 10916 0020 741E     		je	.L1297
1545:fltk-1.3.4-1/png/pngread.c ****    if (image != NULL && image->version == PNG_IMAGE_VERSION)
 10917              		.loc 1 1545 0
 10918 0022 4154     		pushq	%r12
 10919              		.cfi_def_cfa_offset 16
 10920              		.cfi_offset 12, -16
 10921 0024 55       		pushq	%rbp
 10922              		.cfi_def_cfa_offset 24
 10923              		.cfi_offset 6, -24
 10924 0025 4989D4   		movq	%rdx, %r12
 10925 0028 53       		pushq	%rbx
 10926              		.cfi_def_cfa_offset 32
 10927              		.cfi_offset 3, -32
 10928 0029 4889F5   		movq	%rsi, %rbp
 10929 002c 4889FB   		movq	%rdi, %rbx
1550:fltk-1.3.4-1/png/pngread.c ****          {
 10930              		.loc 1 1550 0
 10931 002f E8000000 		call	png_image_read_init
 10931      00
 10932              	.LVL1363:
 10933 0034 85C0     		testl	%eax, %eax
 10934 0036 7520     		jne	.L1311
1575:fltk-1.3.4-1/png/pngread.c **** 
 10935              		.loc 1 1575 0
 10936 0038 5B       		popq	%rbx
 10937              		.cfi_restore 3
 10938              		.cfi_def_cfa_offset 24
 10939              	.LVL1364:
 10940 0039 31C0     		xorl	%eax, %eax
 10941 003b 5D       		popq	%rbp
 10942              		.cfi_restore 6
 10943              		.cfi_def_cfa_offset 16
 10944              	.LVL1365:
 10945 003c 415C     		popq	%r12
 10946              		.cfi_restore 12
 10947              		.cfi_def_cfa_offset 8
 10948              	.LVL1366:
 10949 003e C3       		ret
 10950              	.LVL1367:
 10951 003f 90       		.p2align 4,,10
 10952              		.p2align 3
 10953              	.L1297:
1566:fltk-1.3.4-1/png/pngread.c ****             "png_image_begin_read_from_memory: invalid argument");
 10954              		.loc 1 1566 0
 10955 0040 BE000000 		movl	$.LC84, %esi
 10955      00
 10956              	.LVL1368:
 10957 0045 E9000000 		jmp	png_image_error
 10957      00
 10958              	.LVL1369:
 10959 004a 660F1F44 		.p2align 4,,10
 10959      0000
 10960              		.p2align 3
 10961              	.L1309:
1575:fltk-1.3.4-1/png/pngread.c **** 
 10962              		.loc 1 1575 0
 10963 0050 31C0     		xorl	%eax, %eax
 10964 0052 C3       		ret
 10965              	.LVL1370:
 10966              		.p2align 4,,10
 10967 0053 0F1F4400 		.p2align 3
 10967      00
 10968              	.L1311:
 10969              		.cfi_def_cfa_offset 32
 10970              		.cfi_offset 3, -32
 10971              		.cfi_offset 6, -24
 10972              		.cfi_offset 12, -16
1556:fltk-1.3.4-1/png/pngread.c ****             image->opaque->size = size;
 10973              		.loc 1 1556 0
 10974 0058 488B03   		movq	(%rbx), %rax
1561:fltk-1.3.4-1/png/pngread.c ****          }
 10975              		.loc 1 1561 0
 10976 005b 4889DA   		movq	%rbx, %rdx
 10977 005e 4889DF   		movq	%rbx, %rdi
 10978 0061 BE000000 		movl	$png_image_read_header, %esi
 10978      00
1556:fltk-1.3.4-1/png/pngread.c ****             image->opaque->size = size;
 10979              		.loc 1 1556 0
 10980 0066 48896818 		movq	%rbp, 24(%rax)
1557:fltk-1.3.4-1/png/pngread.c ****             image->opaque->png_ptr->io_ptr = image;
 10981              		.loc 1 1557 0
 10982 006a 488B03   		movq	(%rbx), %rax
 10983 006d 4C896020 		movq	%r12, 32(%rax)
1558:fltk-1.3.4-1/png/pngread.c ****             image->opaque->png_ptr->read_data_fn = png_image_memory_read;
 10984              		.loc 1 1558 0
 10985 0071 488B03   		movq	(%rbx), %rax
 10986 0074 488B00   		movq	(%rax), %rax
 10987 0077 48899808 		movq	%rbx, 264(%rax)
 10987      010000
1559:fltk-1.3.4-1/png/pngread.c **** 
 10988              		.loc 1 1559 0
 10989 007e 488B03   		movq	(%rbx), %rax
 10990 0081 488B00   		movq	(%rax), %rax
 10991 0084 48C78000 		movq	$png_image_memory_read, 256(%rax)
 10991      01000000 
 10991      000000
1575:fltk-1.3.4-1/png/pngread.c **** 
 10992              		.loc 1 1575 0
 10993 008f 5B       		popq	%rbx
 10994              		.cfi_restore 3
 10995              		.cfi_def_cfa_offset 24
 10996              	.LVL1371:
 10997 0090 5D       		popq	%rbp
 10998              		.cfi_restore 6
 10999              		.cfi_def_cfa_offset 16
 11000              	.LVL1372:
 11001 0091 415C     		popq	%r12
 11002              		.cfi_restore 12
 11003              		.cfi_def_cfa_offset 8
 11004              	.LVL1373:
1561:fltk-1.3.4-1/png/pngread.c ****          }
 11005              		.loc 1 1561 0
 11006 0093 E9000000 		jmp	png_safe_execute
 11006      00
 11007              	.LVL1374:
 11008              		.cfi_endproc
 11009              	.LFE77:
 11011              		.section	.text.unlikely.png_image_begin_read_from_memory
 11012              	.LCOLDE86:
 11013              		.section	.text.png_image_begin_read_from_memory
 11014              	.LHOTE86:
 11015              		.section	.rodata.str1.8
 11016 06a6 0000     		.align 8
 11017              	.LC87:
 11018 06a8 706E675F 		.string	"png_image_finish_read[color-map]: no color-map"
 11018      696D6167 
 11018      655F6669 
 11018      6E697368 
 11018      5F726561 
 11019 06d7 00       		.align 8
 11020              	.LC88:
 11021 06d8 706E675F 		.string	"png_image_finish_read: invalid argument"
 11021      696D6167 
 11021      655F6669 
 11021      6E697368 
 11021      5F726561 
 11022              		.align 8
 11023              	.LC89:
 11024 0700 706E675F 		.string	"png_image_finish_read: damaged PNG_IMAGE_VERSION"
 11024      696D6167 
 11024      655F6669 
 11024      6E697368 
 11024      5F726561 
 11025              		.section	.text.unlikely.png_image_finish_read,"ax",@progbits
 11026              	.LCOLDB90:
 11027              		.section	.text.png_image_finish_read,"ax",@progbits
 11028              	.LHOTB90:
 11029              		.p2align 4,,15
 11030              		.globl	png_image_finish_read
 11032              	png_image_finish_read:
 11033              	.LFB93:
4052:fltk-1.3.4-1/png/pngread.c **** 
4053:fltk-1.3.4-1/png/pngread.c **** int PNGAPI
4054:fltk-1.3.4-1/png/pngread.c **** png_image_finish_read(png_imagep image, png_const_colorp background,
4055:fltk-1.3.4-1/png/pngread.c ****    void *buffer, png_int_32 row_stride, void *colormap)
4056:fltk-1.3.4-1/png/pngread.c **** {
 11034              		.loc 1 4056 0
 11035              		.cfi_startproc
 11036              	.LVL1375:
 11037 0000 55       		pushq	%rbp
 11038              		.cfi_def_cfa_offset 16
 11039              		.cfi_offset 6, -16
 11040 0001 53       		pushq	%rbx
 11041              		.cfi_def_cfa_offset 24
 11042              		.cfi_offset 3, -24
 11043 0002 4883EC68 		subq	$104, %rsp
 11044              		.cfi_def_cfa_offset 128
 11045              		.loc 1 4056 0
 11046 0006 64488B04 		movq	%fs:40, %rax
 11046      25280000 
 11046      00
 11047 000f 48894424 		movq	%rax, 88(%rsp)
 11047      58
 11048 0014 31C0     		xorl	%eax, %eax
4057:fltk-1.3.4-1/png/pngread.c ****    if (image != NULL && image->version == PNG_IMAGE_VERSION)
 11049              		.loc 1 4057 0
 11050 0016 4885FF   		testq	%rdi, %rdi
 11051 0019 0F840101 		je	.L1329
 11051      0000
 11052              		.loc 1 4057 0 is_stmt 0 discriminator 1
 11053 001f 8B4708   		movl	8(%rdi), %eax
 11054 0022 4889FB   		movq	%rdi, %rbx
 11055 0025 83F801   		cmpl	$1, %eax
 11056 0028 7426     		je	.L1343
4058:fltk-1.3.4-1/png/pngread.c ****    {
4059:fltk-1.3.4-1/png/pngread.c ****       png_uint_32 check;
4060:fltk-1.3.4-1/png/pngread.c **** 
4061:fltk-1.3.4-1/png/pngread.c ****       if (row_stride == 0)
4062:fltk-1.3.4-1/png/pngread.c ****          row_stride = PNG_IMAGE_ROW_STRIDE(*image);
4063:fltk-1.3.4-1/png/pngread.c **** 
4064:fltk-1.3.4-1/png/pngread.c ****       if (row_stride < 0)
4065:fltk-1.3.4-1/png/pngread.c ****          check = -row_stride;
4066:fltk-1.3.4-1/png/pngread.c **** 
4067:fltk-1.3.4-1/png/pngread.c ****       else
4068:fltk-1.3.4-1/png/pngread.c ****          check = row_stride;
4069:fltk-1.3.4-1/png/pngread.c **** 
4070:fltk-1.3.4-1/png/pngread.c ****       if (image->opaque != NULL && buffer != NULL &&
4071:fltk-1.3.4-1/png/pngread.c ****          check >= PNG_IMAGE_ROW_STRIDE(*image))
4072:fltk-1.3.4-1/png/pngread.c ****       {
4073:fltk-1.3.4-1/png/pngread.c ****          if ((image->format & PNG_FORMAT_FLAG_COLORMAP) == 0 ||
4074:fltk-1.3.4-1/png/pngread.c ****             (image->colormap_entries > 0 && colormap != NULL))
4075:fltk-1.3.4-1/png/pngread.c ****          {
4076:fltk-1.3.4-1/png/pngread.c ****             int result;
4077:fltk-1.3.4-1/png/pngread.c ****             png_image_read_control display;
4078:fltk-1.3.4-1/png/pngread.c **** 
4079:fltk-1.3.4-1/png/pngread.c ****             memset(&display, 0, (sizeof display));
4080:fltk-1.3.4-1/png/pngread.c ****             display.image = image;
4081:fltk-1.3.4-1/png/pngread.c ****             display.buffer = buffer;
4082:fltk-1.3.4-1/png/pngread.c ****             display.row_stride = row_stride;
4083:fltk-1.3.4-1/png/pngread.c ****             display.colormap = colormap;
4084:fltk-1.3.4-1/png/pngread.c ****             display.background = background;
4085:fltk-1.3.4-1/png/pngread.c ****             display.local_row = NULL;
4086:fltk-1.3.4-1/png/pngread.c **** 
4087:fltk-1.3.4-1/png/pngread.c ****             /* Choose the correct 'end' routine; for the color-map case all the
4088:fltk-1.3.4-1/png/pngread.c ****              * setup has already been done.
4089:fltk-1.3.4-1/png/pngread.c ****              */
4090:fltk-1.3.4-1/png/pngread.c ****             if ((image->format & PNG_FORMAT_FLAG_COLORMAP) != 0)
4091:fltk-1.3.4-1/png/pngread.c ****                result =
4092:fltk-1.3.4-1/png/pngread.c ****                   png_safe_execute(image, png_image_read_colormap, &display) &&
4093:fltk-1.3.4-1/png/pngread.c ****                   png_safe_execute(image, png_image_read_colormapped, &display);
4094:fltk-1.3.4-1/png/pngread.c **** 
4095:fltk-1.3.4-1/png/pngread.c ****             else
4096:fltk-1.3.4-1/png/pngread.c ****                result =
4097:fltk-1.3.4-1/png/pngread.c ****                   png_safe_execute(image, png_image_read_direct, &display);
4098:fltk-1.3.4-1/png/pngread.c **** 
4099:fltk-1.3.4-1/png/pngread.c ****             png_image_free(image);
4100:fltk-1.3.4-1/png/pngread.c ****             return result;
4101:fltk-1.3.4-1/png/pngread.c ****          }
4102:fltk-1.3.4-1/png/pngread.c **** 
4103:fltk-1.3.4-1/png/pngread.c ****          else
4104:fltk-1.3.4-1/png/pngread.c ****             return png_image_error(image,
4105:fltk-1.3.4-1/png/pngread.c ****                "png_image_finish_read[color-map]: no color-map");
4106:fltk-1.3.4-1/png/pngread.c ****       }
4107:fltk-1.3.4-1/png/pngread.c **** 
4108:fltk-1.3.4-1/png/pngread.c ****       else
4109:fltk-1.3.4-1/png/pngread.c ****          return png_image_error(image,
4110:fltk-1.3.4-1/png/pngread.c ****             "png_image_finish_read: invalid argument");
4111:fltk-1.3.4-1/png/pngread.c ****    }
4112:fltk-1.3.4-1/png/pngread.c **** 
4113:fltk-1.3.4-1/png/pngread.c ****    else if (image != NULL)
4114:fltk-1.3.4-1/png/pngread.c ****       return png_image_error(image,
 11057              		.loc 1 4114 0 is_stmt 1
 11058 002a BE000000 		movl	$.LC89, %esi
 11058      00
 11059              	.LVL1376:
 11060 002f E8000000 		call	png_image_error
 11060      00
 11061              	.LVL1377:
 11062              	.L1313:
4115:fltk-1.3.4-1/png/pngread.c ****          "png_image_finish_read: damaged PNG_IMAGE_VERSION");
4116:fltk-1.3.4-1/png/pngread.c **** 
4117:fltk-1.3.4-1/png/pngread.c ****    return 0;
4118:fltk-1.3.4-1/png/pngread.c **** }
 11063              		.loc 1 4118 0 discriminator 1
 11064 0034 488B7C24 		movq	88(%rsp), %rdi
 11064      58
 11065 0039 6448333C 		xorq	%fs:40, %rdi
 11065      25280000 
 11065      00
 11066 0042 0F855601 		jne	.L1344
 11066      0000
 11067              		.loc 1 4118 0 is_stmt 0
 11068 0048 4883C468 		addq	$104, %rsp
 11069              		.cfi_remember_state
 11070              		.cfi_def_cfa_offset 24
 11071 004c 5B       		popq	%rbx
 11072              		.cfi_def_cfa_offset 16
 11073 004d 5D       		popq	%rbp
 11074              		.cfi_def_cfa_offset 8
 11075 004e C3       		ret
 11076              	.LVL1378:
 11077 004f 90       		.p2align 4,,10
 11078              		.p2align 3
 11079              	.L1343:
 11080              		.cfi_restore_state
 11081              	.LBB450:
4061:fltk-1.3.4-1/png/pngread.c ****          row_stride = PNG_IMAGE_ROW_STRIDE(*image);
 11082              		.loc 1 4061 0 is_stmt 1
 11083 0050 85C9     		testl	%ecx, %ecx
 11084 0052 4189C9   		movl	%ecx, %r9d
 11085 0055 7515     		jne	.L1315
4062:fltk-1.3.4-1/png/pngread.c **** 
 11086              		.loc 1 4062 0
 11087 0057 8B4F14   		movl	20(%rdi), %ecx
 11088              	.LVL1379:
 11089 005a F6C108   		testb	$8, %cl
 11090 005d 7506     		jne	.L1316
4062:fltk-1.3.4-1/png/pngread.c **** 
 11091              		.loc 1 4062 0 is_stmt 0 discriminator 1
 11092 005f 83E103   		andl	$3, %ecx
 11093 0062 8D4101   		leal	1(%rcx), %eax
 11094              	.L1316:
4062:fltk-1.3.4-1/png/pngread.c **** 
 11095              		.loc 1 4062 0 discriminator 4
 11096 0065 0FAF430C 		imull	12(%rbx), %eax
 11097 0069 4189C1   		movl	%eax, %r9d
 11098              	.LVL1380:
 11099              	.L1315:
4065:fltk-1.3.4-1/png/pngread.c **** 
 11100              		.loc 1 4065 0 is_stmt 1
 11101 006c 4489C8   		movl	%r9d, %eax
 11102 006f C1F81F   		sarl	$31, %eax
 11103 0072 89C1     		movl	%eax, %ecx
 11104 0074 4431C9   		xorl	%r9d, %ecx
 11105 0077 29C1     		subl	%eax, %ecx
 11106              	.LVL1381:
4070:fltk-1.3.4-1/png/pngread.c ****          check >= PNG_IMAGE_ROW_STRIDE(*image))
 11107              		.loc 1 4070 0
 11108 0079 48833B00 		cmpq	$0, (%rbx)
 11109 007d 0F848300 		je	.L1319
 11109      0000
 11110 0083 4885D2   		testq	%rdx, %rdx
 11111 0086 747E     		je	.L1319
4071:fltk-1.3.4-1/png/pngread.c ****       {
 11112              		.loc 1 4071 0
 11113 0088 8B4314   		movl	20(%rbx), %eax
 11114 008b A808     		testb	$8, %al
 11115 008d 7469     		je	.L1345
4070:fltk-1.3.4-1/png/pngread.c ****          check >= PNG_IMAGE_ROW_STRIDE(*image))
 11116              		.loc 1 4070 0
 11117 008f 3B4B0C   		cmpl	12(%rbx), %ecx
 11118 0092 7272     		jb	.L1319
4074:fltk-1.3.4-1/png/pngread.c ****          {
 11119              		.loc 1 4074 0 discriminator 1
 11120 0094 8B431C   		movl	28(%rbx), %eax
 11121 0097 85C0     		testl	%eax, %eax
 11122 0099 0F84ED00 		je	.L1324
 11122      0000
 11123 009f 4D85C0   		testq	%r8, %r8
 11124 00a2 0F84E400 		je	.L1324
 11124      0000
 11125              	.LVL1382:
 11126              	.LBB451:
 11127              	.LBB452:
 11128              	.LBB453:
 11129              		.loc 2 90 0
 11130 00a8 31C0     		xorl	%eax, %eax
 11131 00aa B90A0000 		movl	$10, %ecx
 11131      00
 11132              	.LVL1383:
 11133 00af 4889E7   		movq	%rsp, %rdi
 11134 00b2 F348AB   		rep stosq
 11135              	.LVL1384:
 11136              	.LBE453:
 11137              	.LBE452:
4081:fltk-1.3.4-1/png/pngread.c ****             display.row_stride = row_stride;
 11138              		.loc 1 4081 0
 11139 00b5 48895424 		movq	%rdx, 8(%rsp)
 11139      08
4084:fltk-1.3.4-1/png/pngread.c ****             display.local_row = NULL;
 11140              		.loc 1 4084 0
 11141 00ba 48897424 		movq	%rsi, 32(%rsp)
 11141      20
4092:fltk-1.3.4-1/png/pngread.c ****                   png_safe_execute(image, png_image_read_colormapped, &display);
 11142              		.loc 1 4092 0
 11143 00bf 4889E2   		movq	%rsp, %rdx
 11144              	.LVL1385:
 11145 00c2 BE000000 		movl	$png_image_read_colormap, %esi
 11145      00
 11146              	.LVL1386:
 11147 00c7 4889DF   		movq	%rbx, %rdi
4080:fltk-1.3.4-1/png/pngread.c ****             display.buffer = buffer;
 11148              		.loc 1 4080 0
 11149 00ca 48891C24 		movq	%rbx, (%rsp)
4082:fltk-1.3.4-1/png/pngread.c ****             display.colormap = colormap;
 11150              		.loc 1 4082 0
 11151 00ce 44894C24 		movl	%r9d, 16(%rsp)
 11151      10
4083:fltk-1.3.4-1/png/pngread.c ****             display.background = background;
 11152              		.loc 1 4083 0
 11153 00d3 4C894424 		movq	%r8, 24(%rsp)
 11153      18
 11154              	.LBB456:
 11155              	.LBB454:
 11156              		.loc 2 90 0
 11157 00d8 4889E5   		movq	%rsp, %rbp
 11158              	.LBE454:
 11159              	.LBE456:
4092:fltk-1.3.4-1/png/pngread.c ****                   png_safe_execute(image, png_image_read_colormapped, &display);
 11160              		.loc 1 4092 0
 11161 00db E8000000 		call	png_safe_execute
 11161      00
 11162              	.LVL1387:
 11163 00e0 85C0     		testl	%eax, %eax
 11164 00e2 754C     		jne	.L1326
 11165 00e4 31ED     		xorl	%ebp, %ebp
 11166              	.L1325:
 11167              	.LVL1388:
4099:fltk-1.3.4-1/png/pngread.c ****             return result;
 11168              		.loc 1 4099 0
 11169 00e6 4889DF   		movq	%rbx, %rdi
 11170 00e9 E8000000 		call	png_image_free
 11170      00
 11171              	.LVL1389:
4100:fltk-1.3.4-1/png/pngread.c ****          }
 11172              		.loc 1 4100 0
 11173 00ee 89E8     		movl	%ebp, %eax
 11174 00f0 E93FFFFF 		jmp	.L1313
 11174      FF
 11175              	.LVL1390:
 11176              		.p2align 4,,10
 11177 00f5 0F1F00   		.p2align 3
 11178              	.L1345:
 11179              	.LBE451:
4070:fltk-1.3.4-1/png/pngread.c ****          check >= PNG_IMAGE_ROW_STRIDE(*image))
 11180              		.loc 1 4070 0 discriminator 1
 11181 00f8 83E003   		andl	$3, %eax
 11182 00fb 83C001   		addl	$1, %eax
 11183 00fe 0FAF430C 		imull	12(%rbx), %eax
 11184 0102 39C1     		cmpl	%eax, %ecx
 11185 0104 734A     		jnb	.L1346
 11186              	.L1319:
4109:fltk-1.3.4-1/png/pngread.c ****             "png_image_finish_read: invalid argument");
 11187              		.loc 1 4109 0
 11188 0106 BE000000 		movl	$.LC88, %esi
 11188      00
 11189              	.LVL1391:
 11190 010b 4889DF   		movq	%rbx, %rdi
 11191 010e E8000000 		call	png_image_error
 11191      00
 11192              	.LVL1392:
 11193 0113 E91CFFFF 		jmp	.L1313
 11193      FF
 11194              	.LVL1393:
 11195 0118 0F1F8400 		.p2align 4,,10
 11195      00000000 
 11196              		.p2align 3
 11197              	.L1329:
 11198              	.LBE450:
4117:fltk-1.3.4-1/png/pngread.c **** }
 11199              		.loc 1 4117 0
 11200 0120 31C0     		xorl	%eax, %eax
 11201 0122 E90DFFFF 		jmp	.L1313
 11201      FF
 11202              	.LVL1394:
 11203 0127 660F1F84 		.p2align 4,,10
 11203      00000000 
 11203      00
 11204              		.p2align 3
 11205              	.L1326:
 11206              	.LBB459:
 11207              	.LBB458:
4093:fltk-1.3.4-1/png/pngread.c **** 
 11208              		.loc 1 4093 0 discriminator 1
 11209 0130 4889EA   		movq	%rbp, %rdx
 11210 0133 BE000000 		movl	$png_image_read_colormapped, %esi
 11210      00
 11211 0138 4889DF   		movq	%rbx, %rdi
4092:fltk-1.3.4-1/png/pngread.c ****                   png_safe_execute(image, png_image_read_colormapped, &display);
 11212              		.loc 1 4092 0 discriminator 1
 11213 013b 31ED     		xorl	%ebp, %ebp
4093:fltk-1.3.4-1/png/pngread.c **** 
 11214              		.loc 1 4093 0 discriminator 1
 11215 013d E8000000 		call	png_safe_execute
 11215      00
 11216              	.LVL1395:
4092:fltk-1.3.4-1/png/pngread.c ****                   png_safe_execute(image, png_image_read_colormapped, &display);
 11217              		.loc 1 4092 0 discriminator 1
 11218 0142 85C0     		testl	%eax, %eax
 11219 0144 400F95C5 		setne	%bpl
 11220 0148 EB9C     		jmp	.L1325
 11221              	.LVL1396:
 11222 014a 660F1F44 		.p2align 4,,10
 11222      0000
 11223              		.p2align 3
 11224              	.L1346:
 11225              	.LBB457:
 11226              	.LBB455:
 11227              		.loc 2 90 0
 11228 0150 31C0     		xorl	%eax, %eax
 11229 0152 B90A0000 		movl	$10, %ecx
 11229      00
 11230              	.LVL1397:
 11231 0157 4889E7   		movq	%rsp, %rdi
 11232 015a F348AB   		rep stosq
 11233              	.LVL1398:
 11234              	.LBE455:
 11235              	.LBE457:
4081:fltk-1.3.4-1/png/pngread.c ****             display.row_stride = row_stride;
 11236              		.loc 1 4081 0
 11237 015d 48895424 		movq	%rdx, 8(%rsp)
 11237      08
4084:fltk-1.3.4-1/png/pngread.c ****             display.local_row = NULL;
 11238              		.loc 1 4084 0
 11239 0162 48897424 		movq	%rsi, 32(%rsp)
 11239      20
4096:fltk-1.3.4-1/png/pngread.c ****                   png_safe_execute(image, png_image_read_direct, &display);
 11240              		.loc 1 4096 0
 11241 0167 4889E2   		movq	%rsp, %rdx
 11242              	.LVL1399:
 11243 016a BE000000 		movl	$png_image_read_direct, %esi
 11243      00
 11244              	.LVL1400:
 11245 016f 4889DF   		movq	%rbx, %rdi
4080:fltk-1.3.4-1/png/pngread.c ****             display.buffer = buffer;
 11246              		.loc 1 4080 0
 11247 0172 48891C24 		movq	%rbx, (%rsp)
4082:fltk-1.3.4-1/png/pngread.c ****             display.colormap = colormap;
 11248              		.loc 1 4082 0
 11249 0176 44894C24 		movl	%r9d, 16(%rsp)
 11249      10
4083:fltk-1.3.4-1/png/pngread.c ****             display.background = background;
 11250              		.loc 1 4083 0
 11251 017b 4C894424 		movq	%r8, 24(%rsp)
 11251      18
4096:fltk-1.3.4-1/png/pngread.c ****                   png_safe_execute(image, png_image_read_direct, &display);
 11252              		.loc 1 4096 0
 11253 0180 E8000000 		call	png_safe_execute
 11253      00
 11254              	.LVL1401:
 11255 0185 89C5     		movl	%eax, %ebp
 11256              	.LVL1402:
 11257 0187 E95AFFFF 		jmp	.L1325
 11257      FF
 11258              	.LVL1403:
 11259              	.L1324:
 11260              	.LBE458:
4104:fltk-1.3.4-1/png/pngread.c ****                "png_image_finish_read[color-map]: no color-map");
 11261              		.loc 1 4104 0
 11262 018c BE000000 		movl	$.LC87, %esi
 11262      00
 11263              	.LVL1404:
 11264 0191 4889DF   		movq	%rbx, %rdi
 11265 0194 E8000000 		call	png_image_error
 11265      00
 11266              	.LVL1405:
 11267 0199 E996FEFF 		jmp	.L1313
 11267      FF
 11268              	.LVL1406:
 11269              	.L1344:
 11270              	.LBE459:
 11271              		.loc 1 4118 0
 11272 019e E8000000 		call	__stack_chk_fail
 11272      00
 11273              	.LVL1407:
 11274              		.cfi_endproc
 11275              	.LFE93:
 11277              		.section	.text.unlikely.png_image_finish_read
 11278              	.LCOLDE90:
 11279              		.section	.text.png_image_finish_read
 11280              	.LHOTE90:
 11281              		.section	.rodata.chunks_to_process.6930,"a",@progbits
 11282              		.align 16
 11285              	chunks_to_process.6930:
 11286 0000 62       		.byte	98
 11287 0001 4B       		.byte	75
 11288 0002 47       		.byte	71
 11289 0003 44       		.byte	68
 11290 0004 00       		.byte	0
 11291 0005 63       		.byte	99
 11292 0006 48       		.byte	72
 11293 0007 52       		.byte	82
 11294 0008 4D       		.byte	77
 11295 0009 00       		.byte	0
 11296 000a 67       		.byte	103
 11297 000b 41       		.byte	65
 11298 000c 4D       		.byte	77
 11299 000d 41       		.byte	65
 11300 000e 00       		.byte	0
 11301 000f 69       		.byte	105
 11302 0010 43       		.byte	67
 11303 0011 43       		.byte	67
 11304 0012 50       		.byte	80
 11305 0013 00       		.byte	0
 11306 0014 73       		.byte	115
 11307 0015 42       		.byte	66
 11308 0016 49       		.byte	73
 11309 0017 54       		.byte	84
 11310 0018 00       		.byte	0
 11311 0019 73       		.byte	115
 11312 001a 52       		.byte	82
 11313 001b 47       		.byte	71
 11314 001c 42       		.byte	66
 11315 001d 00       		.byte	0
 11316              		.text
 11317              	.Letext0:
 11318              		.section	.text.unlikely.png_image_memory_read
 11319              	.Letext_cold0:
 11320              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 11321              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 11322              		.file 5 "/usr/include/stdio.h"
 11323              		.file 6 "/usr/include/libio.h"
 11324              		.file 7 "/usr/include/x86_64-linux-gnu/bits/setjmp.h"
 11325              		.file 8 "/usr/include/x86_64-linux-gnu/bits/sigset.h"
 11326              		.file 9 "/usr/include/setjmp.h"
 11327              		.file 10 "fltk-1.3.4-1/png/pngconf.h"
 11328              		.file 11 "fltk-1.3.4-1/png/png.h"
 11329              		.file 12 "fltk-1.3.4-1/png/pngstruct.h"
 11330              		.file 13 "fltk-1.3.4-1/png/pnginfo.h"
 11331              		.file 14 "fltk-1.3.4-1/png/pngpriv.h"
 11332              		.file 15 "/usr/include/x86_64-linux-gnu/zconf.h"
 11333              		.file 16 "/usr/include/zlib.h"
 11334              		.file 17 "/usr/include/string.h"
 11335              		.file 18 "/usr/include/x86_64-linux-gnu/bits/errno.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 pngread.c
     /tmp/ccBCiSgN.s:18     .text.png_image_memory_read:0000000000000000 png_image_memory_read
     /tmp/ccBCiSgN.s:163    .text.png_image_skip_unused_chunks:0000000000000000 png_image_skip_unused_chunks
     /tmp/ccBCiSgN.s:11285  .rodata.chunks_to_process.6930:0000000000000000 chunks_to_process.6930
     /tmp/ccBCiSgN.s:218    .text.png_read_info.part.4:0000000000000000 png_read_info.part.4
     /tmp/ccBCiSgN.s:693    .text.png_image_read_header:0000000000000000 png_image_read_header
     /tmp/ccBCiSgN.s:912    .text.set_file_encoding:0000000000000000 set_file_encoding
     /tmp/ccBCiSgN.s:1046   .text.decode_gamma:0000000000000000 decode_gamma
     /tmp/ccBCiSgN.s:1183   .text.png_colormap_compose:0000000000000000 png_colormap_compose
     /tmp/ccBCiSgN.s:1320   .text.png_create_colormap_entry:0000000000000000 png_create_colormap_entry
     /tmp/ccBCiSgN.s:2086   .text.make_ga_colormap:0000000000000000 make_ga_colormap
     /tmp/ccBCiSgN.s:2247   .text.make_gray_colormap:0000000000000000 make_gray_colormap
     /tmp/ccBCiSgN.s:2316   .text.make_rgb_colormap:0000000000000000 make_rgb_colormap
     /tmp/ccBCiSgN.s:2488   .text.png_image_read_colormap:0000000000000000 png_image_read_colormap
     /tmp/ccBCiSgN.s:4612   .text.png_create_read_struct_2:0000000000000000 png_create_read_struct_2
     /tmp/ccBCiSgN.s:4672   .text.png_create_read_struct:0000000000000000 png_create_read_struct
     /tmp/ccBCiSgN.s:4704   .text.png_read_info:0000000000000000 png_read_info
     /tmp/ccBCiSgN.s:4738   .text.png_read_update_info:0000000000000000 png_read_update_info
     /tmp/ccBCiSgN.s:4824   .text.png_start_read_image:0000000000000000 png_start_read_image
     /tmp/ccBCiSgN.s:4876   .text.png_read_row:0000000000000000 png_read_row
     /tmp/ccBCiSgN.s:5479   .text.png_image_read_direct:0000000000000000 png_image_read_direct
     /tmp/ccBCiSgN.s:7307   .text.png_image_read_composite:0000000000000000 png_image_read_composite
     /tmp/ccBCiSgN.s:6360   .text.png_image_read_background:0000000000000000 png_image_read_background
     /tmp/ccBCiSgN.s:7726   .text.png_image_read_colormapped:0000000000000000 png_image_read_colormapped
     /tmp/ccBCiSgN.s:8069   .text.png_image_read_and_map:0000000000000000 png_image_read_and_map
     /tmp/ccBCiSgN.s:8854   .text.png_read_rows:0000000000000000 png_read_rows
     /tmp/ccBCiSgN.s:9042   .text.png_read_image:0000000000000000 png_read_image
     /tmp/ccBCiSgN.s:9211   .text.png_read_end:0000000000000000 png_read_end
     /tmp/ccBCiSgN.s:9724   .text.png_destroy_read_struct:0000000000000000 png_destroy_read_struct
     /tmp/ccBCiSgN.s:9954   .text.png_image_read_init:0000000000000000 png_image_read_init
     /tmp/ccBCiSgN.s:10175  .text.png_set_read_status_fn:0000000000000000 png_set_read_status_fn
     /tmp/ccBCiSgN.s:10205  .text.png_read_png:0000000000000000 png_read_png
     /tmp/ccBCiSgN.s:10591  .text.png_image_begin_read_from_stdio:0000000000000000 png_image_begin_read_from_stdio
     /tmp/ccBCiSgN.s:10709  .text.png_image_begin_read_from_file:0000000000000000 png_image_begin_read_from_file
     /tmp/ccBCiSgN.s:10893  .text.png_image_begin_read_from_memory:0000000000000000 png_image_begin_read_from_memory
     /tmp/ccBCiSgN.s:11032  .text.png_image_finish_read:0000000000000000 png_image_finish_read
                           .group:0000000000000000 wm4.0.cf9695abff4f49bdfe00dc4091904acd
                           .group:0000000000000000 wm4.stdcpredef.h.19.bf2bf6c5fb087dfb5ef2d2297c2795de
                           .group:0000000000000000 wm4.pngpriv.h.26.ca3d1719773cd86007410b516123e125
                           .group:0000000000000000 wm4.features.h.19.22780be97c2f806ec599b8b99aa89f7d
                           .group:0000000000000000 wm4.cdefs.h.19.56613e71f285ebad825b69b151170a81
                           .group:0000000000000000 wm4.wordsize.h.4.256e8fdbd37801980286acdbc40d0280
                           .group:0000000000000000 wm4.cdefs.h.432.619afd0aac7c4b439843706c1b28ddea
                           .group:0000000000000000 wm4.stubs64.h.10.918ceb5fa58268542bf143e4c1efbcf3
                           .group:0000000000000000 wm4.stdlib.h.27.59e2586c75bdbcb991b248ad7257b993
                           .group:0000000000000000 wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1
                           .group:0000000000000000 wm4.stdlib.h.37.e081b308f911db94d3185af615f2b2e2
                           .group:0000000000000000 wm4.string.h.23.8394011d5995a16f15d67d04e84a1d69
                           .group:0000000000000000 wm4.stddef.h.238.04cc7214bceba497b20d15c10fd97511
                           .group:0000000000000000 wm4.string.h.24.1b0dc67418e7128d207285861439c2f8
                           .group:0000000000000000 wm4.endian.h.19.ff00c9c0f5e9f9a9719c5de76ace57b4
                           .group:0000000000000000 wm4.endian.h.41.27d650ce666b76881e2a2a218ea61984
                           .group:0000000000000000 wm4.types.h.89.468e2451361e3b92f048f6cad51690ff
                           .group:0000000000000000 wm4.typesizes.h.24.40eb69a6270178f15d1bf3d7b6635a8b
                           .group:0000000000000000 wm4.string2.h.55.e4a4cfd7781cc64a4341475e67436ab1
                           .group:0000000000000000 wm4.string3.h.31.2b75bd65145c50aeedb61673ce0d3293
                           .group:0000000000000000 wm4.pnglibconf.h.15.30e2eea90e566ac06da4f4de487193d7
                           .group:0000000000000000 wm4.pngpriv.h.130.f65d93453b5b5837849611ffe82d627a
                           .group:0000000000000000 wm4.png.h.412.12a95b2193a7d0bc2282b72c70a28ce1
                           .group:0000000000000000 wm4.limits.h.23.f0fd92c175c1576df467c4d5fe2b091a
                           .group:0000000000000000 wm4.posix1_lim.h.25.28c8eb2d22697e7711efefdec5344a02
                           .group:0000000000000000 wm4.local_lim.h.25.97ee4129efb08ad296101237bcd3401b
                           .group:0000000000000000 wm4.limits.h.2.9ff59823e8adcf4502d980ef41362326
                           .group:0000000000000000 wm4.local_lim.h.42.9dc3935e0e3b94e23cda247e4e39bd8b
                           .group:0000000000000000 wm4.limits.h.60.eb7066f861c8b8edc7a0a399744b0335
                           .group:0000000000000000 wm4.stddef.h.39.d5a83c17f38162a5dd6f834eaf38f8ef
                           .group:0000000000000000 wm4.stdio.h.26.4719156f1aea2bb9662fd6c582dc9a4c
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:0000000000000000 wm4.stdio.h.36.2dd12c1fd035242ad5cfd0152a01be5a
                           .group:0000000000000000 wm4._G_config.h.5.b0f37d9e474454cf6e459063458db32f
                           .group:0000000000000000 wm4.wchar.h.80.eea3eba2d2a17aace9470a8e0d8218dc
                           .group:0000000000000000 wm4._G_config.h.46.5187c97b14fd664662cb32e6b94fc49e
                           .group:0000000000000000 wm4.libio.h.33.a775b9ecae273f33bc59931e9891e4ca
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.libio.h.51.dab170798ec1df48c625aea7c30e1b63
                           .group:0000000000000000 wm4.stdio.h.120.80cbf0ec1718a5b27e6428218e29c72d
                           .group:0000000000000000 wm4.stdio_lim.h.23.f8541119d1bcf759d7de9531671fd758
                           .group:0000000000000000 wm4.stdio.h.172.df21df34a7396d7da2e08f9b617d582f
                           .group:0000000000000000 wm4.stdio.h.26.e50fc3808d57d965ceefc6f6dd102eb7
                           .group:0000000000000000 wm4.sigset.h.20.f36413b6d2364ad847d3db53fb03e683
                           .group:0000000000000000 wm4.setjmp.h.67.51aa194c3c89a841663c00cb93fd90ff
                           .group:0000000000000000 wm4.time.h.26.6a3cabd4f228e226db6723a3b0c81ba6
                           .group:0000000000000000 wm4.time.h.40.99bfb90272c7e82357ef3c2f5c6fefc8
                           .group:0000000000000000 wm4.time.h.53.f8af6908497bac0ca16faea86fb8cd87
                           .group:0000000000000000 wm4.pngconf.h.86.6636b2584cb7be1618479e118d71e58c
                           .group:0000000000000000 wm4.png.h.506.fa53b6434c0b20c8e63094b04d7940c5
                           .group:0000000000000000 wm4.pngpriv.h.298.dc2c896ce0eddc5cfadee24e76e3c417
                           .group:0000000000000000 wm4.float.h.29.1cf88a0527b6b1225d49fbee2b32acb7
                           .group:0000000000000000 wm4.math.h.26.671af5ac9cd425a35e0730f7b6d7cde2
                           .group:0000000000000000 wm4.libmsimddeclstubs.h.34.75644856b74ba3d815155fe5fe7ecc56
                           .group:0000000000000000 wm4.mathdef.h.23.67c0aa4a204f1f427459dfc651aba565
                           .group:0000000000000000 wm4.math.h.55.cf380f99c57d42476a5252f30065036a
                           .group:0000000000000000 wm4.math.h.84.742292806c6be54f49dc607928a827f7
                           .group:0000000000000000 wm4.math.h.105.59ff0f83ebf6a04e70e145cef2d1185e
                           .group:0000000000000000 wm4.math.h.152.48a142bc1575e748473ff86330dee044
                           .group:0000000000000000 wm4.math.h.30.7cada3efe024725df2da4c705b6566be
                           .group:0000000000000000 wm4.pngpriv.h.481.f98e7c29eaaa759546a3f9808bc25c74
                           .group:0000000000000000 wm4.pngstruct.h.22.7b9573417641055ab8f42438aa8afadf
                           .group:0000000000000000 wm4.zconf.h.9.bbc7b5783b51507f7721a5620139b4ee
                           .group:0000000000000000 wm4.zconf.h.397.69c03305677a9a6792fe2a94f7c9f69b
                           .group:0000000000000000 wm4.types.h.23.92678977f3921b8dce508274ac68f78d
                           .group:0000000000000000 wm4.types.h.187.12f6c32afb936b45a5f241219964ce93
                           .group:0000000000000000 wm4.stdarg.h.31.48e922dd0aaedfb616aafd8a7b7a4949
                           .group:0000000000000000 wm4.unistd.h.23.c85a58a698f53edadcf64287ab24fecb
                           .group:0000000000000000 wm4.posix_opt.h.20.9a8aece77957db1725bd2b9521e5f9c5
                           .group:0000000000000000 wm4.unistd.h.213.4c582e35260d661b081322974b7c1e74
                           .group:0000000000000000 wm4.unistd.h.284.7e168706bc8bd978e02fd1da439d9bc3
                           .group:0000000000000000 wm4.confname.h.27.6b00117a32f457cc72e5ac810a9adade
                           .group:0000000000000000 wm4.zconf.h.457.505c3613686dd75e492569d7a56a6eb0
                           .group:0000000000000000 wm4.zlib.h.40.5a15529ab8e285cee4b0ddab32502c27
                           .group:0000000000000000 wm4.pngstruct.h.44.bc957704556ff8ddcb697678a008ffae
                           .group:0000000000000000 wm4.pngpriv.h.853.4585af3e74cfb155d8486c5333b94adf
                           .group:0000000000000000 wm4.pngdebug.h.36.e9c57d5f35e3128225fb629498ec6fc8
                           .group:0000000000000000 wm4.errno.h.21.234adedf0a908ba1512bb39778d0c13a
                           .group:0000000000000000 wm4.errnobase.h.2.3ec77d86fa6012e288bd2eb28191253f
                           .group:0000000000000000 wm4.errno.h.6.6707cf97e82b783d19d3d077217dd04e
                           .group:0000000000000000 wm4.errno.h.27.5f4b88dc9507696aecbaa61ffb4828e0

UNDEFINED SYMBOLS
memcpy
png_error
png_set_keep_unknown_chunks
png_read_sig
png_read_chunk_header
png_chunk_unknown_handling
png_handle_unknown
png_handle_IEND
png_handle_IHDR
png_chunk_benign_error
png_chunk_error
png_handle_PLTE
png_handle_bKGD
png_handle_cHRM
png_handle_gAMA
png_handle_hIST
png_handle_oFFs
png_handle_pCAL
png_handle_sCAL
png_handle_pHYs
png_handle_sBIT
png_handle_sRGB
png_handle_iCCP
png_handle_sPLT
png_handle_iTXt
png_handle_tEXt
png_handle_tIME
png_handle_tRNS
png_handle_zTXt
png_set_benign_errors
png_gamma_significant
png_reciprocal
png_gamma_16bit_correct
png_sRGB_table
png_sRGB_delta
png_sRGB_base
png_set_scale_16
png_set_alpha_mode_fixed
png_set_rgb_to_gray_fixed
png_set_background_fixed
memcmp
png_set_tRNS_to_alpha
png_set_packing
__stack_chk_fail
png_create_png_struct
png_set_read_fn
png_app_error
png_read_start_row
png_read_transform_info
png_read_IDAT_data
png_read_filter_row
png_combine_row
png_read_finish_row
png_do_read_transformations
png_do_read_interlace
png_set_expand
png_set_add_alpha
png_set_interlace_handling
png_set_expand_16
png_set_swap_alpha
png_muldiv
png_set_swap
png_get_rowbytes
png_malloc
png_safe_execute
png_free
png_set_gray_to_rgb
png_set_bgr
png_set_strip_alpha
png_get_channels
png_warning
png_benign_error
png_crc_finish
png_read_finish_IDAT
png_destroy_info_struct
png_destroy_gamma_table
inflateEnd
png_destroy_png_struct
png_zfree
png_image_error
png_safe_warning
png_safe_error
png_create_info_struct
png_malloc_warn
png_free_data
png_set_invert_mono
png_set_invert_alpha
png_set_strip_16
png_set_packswap
png_set_shift
fopen
fclose
__errno_location
strerror
png_image_free
