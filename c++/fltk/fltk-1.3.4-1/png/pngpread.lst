   1              		.file	"pngpread.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.unlikely.png_push_fill_buffer,"ax",@progbits
   5              	.LCOLDB0:
   6              		.section	.text.png_push_fill_buffer,"ax",@progbits
   7              	.LHOTB0:
   8              		.p2align 4,,15
   9              		.section	.text.unlikely.png_push_fill_buffer
  10              	.Ltext_cold0:
  11              		.section	.text.png_push_fill_buffer
  12              		.globl	png_push_fill_buffer
  14              	png_push_fill_buffer:
  15              	.LFB64:
  16              		.file 1 "fltk-1.3.4-1/png/pngpread.c"
   1:fltk-1.3.4-1/png/pngpread.c **** 
   2:fltk-1.3.4-1/png/pngpread.c **** /* pngpread.c - read a png file in push mode
   3:fltk-1.3.4-1/png/pngpread.c ****  *
   4:fltk-1.3.4-1/png/pngpread.c ****  * Last changed in libpng 1.6.15 [November 20, 2014]
   5:fltk-1.3.4-1/png/pngpread.c ****  * Copyright (c) 1998-2014 Glenn Randers-Pehrson
   6:fltk-1.3.4-1/png/pngpread.c ****  * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
   7:fltk-1.3.4-1/png/pngpread.c ****  * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
   8:fltk-1.3.4-1/png/pngpread.c ****  *
   9:fltk-1.3.4-1/png/pngpread.c ****  * This code is released under the libpng license.
  10:fltk-1.3.4-1/png/pngpread.c ****  * For conditions of distribution and use, see the disclaimer
  11:fltk-1.3.4-1/png/pngpread.c ****  * and license in png.h
  12:fltk-1.3.4-1/png/pngpread.c ****  */
  13:fltk-1.3.4-1/png/pngpread.c **** 
  14:fltk-1.3.4-1/png/pngpread.c **** #include "pngpriv.h"
  15:fltk-1.3.4-1/png/pngpread.c **** 
  16:fltk-1.3.4-1/png/pngpread.c **** #ifdef PNG_PROGRESSIVE_READ_SUPPORTED
  17:fltk-1.3.4-1/png/pngpread.c **** 
  18:fltk-1.3.4-1/png/pngpread.c **** /* Push model modes */
  19:fltk-1.3.4-1/png/pngpread.c **** #define PNG_READ_SIG_MODE   0
  20:fltk-1.3.4-1/png/pngpread.c **** #define PNG_READ_CHUNK_MODE 1
  21:fltk-1.3.4-1/png/pngpread.c **** #define PNG_READ_IDAT_MODE  2
  22:fltk-1.3.4-1/png/pngpread.c **** #define PNG_SKIP_MODE       3
  23:fltk-1.3.4-1/png/pngpread.c **** #define PNG_READ_tEXt_MODE  4
  24:fltk-1.3.4-1/png/pngpread.c **** #define PNG_READ_zTXt_MODE  5
  25:fltk-1.3.4-1/png/pngpread.c **** #define PNG_READ_DONE_MODE  6
  26:fltk-1.3.4-1/png/pngpread.c **** #define PNG_READ_iTXt_MODE  7
  27:fltk-1.3.4-1/png/pngpread.c **** #define PNG_ERROR_MODE      8
  28:fltk-1.3.4-1/png/pngpread.c **** 
  29:fltk-1.3.4-1/png/pngpread.c **** #define PNG_PUSH_SAVE_BUFFER_IF_FULL \
  30:fltk-1.3.4-1/png/pngpread.c **** if (png_ptr->push_length + 4 > png_ptr->buffer_size) \
  31:fltk-1.3.4-1/png/pngpread.c ****    { png_push_save_buffer(png_ptr); return; }
  32:fltk-1.3.4-1/png/pngpread.c **** #define PNG_PUSH_SAVE_BUFFER_IF_LT(N) \
  33:fltk-1.3.4-1/png/pngpread.c **** if (png_ptr->buffer_size < N) \
  34:fltk-1.3.4-1/png/pngpread.c ****    { png_push_save_buffer(png_ptr); return; }
  35:fltk-1.3.4-1/png/pngpread.c **** 
  36:fltk-1.3.4-1/png/pngpread.c **** void PNGAPI
  37:fltk-1.3.4-1/png/pngpread.c **** png_process_data(png_structrp png_ptr, png_inforp info_ptr,
  38:fltk-1.3.4-1/png/pngpread.c ****     png_bytep buffer, png_size_t buffer_size)
  39:fltk-1.3.4-1/png/pngpread.c **** {
  40:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr == NULL || info_ptr == NULL)
  41:fltk-1.3.4-1/png/pngpread.c ****       return;
  42:fltk-1.3.4-1/png/pngpread.c **** 
  43:fltk-1.3.4-1/png/pngpread.c ****    png_push_restore_buffer(png_ptr, buffer, buffer_size);
  44:fltk-1.3.4-1/png/pngpread.c **** 
  45:fltk-1.3.4-1/png/pngpread.c ****    while (png_ptr->buffer_size)
  46:fltk-1.3.4-1/png/pngpread.c ****    {
  47:fltk-1.3.4-1/png/pngpread.c ****       png_process_some_data(png_ptr, info_ptr);
  48:fltk-1.3.4-1/png/pngpread.c ****    }
  49:fltk-1.3.4-1/png/pngpread.c **** }
  50:fltk-1.3.4-1/png/pngpread.c **** 
  51:fltk-1.3.4-1/png/pngpread.c **** png_size_t PNGAPI
  52:fltk-1.3.4-1/png/pngpread.c **** png_process_data_pause(png_structrp png_ptr, int save)
  53:fltk-1.3.4-1/png/pngpread.c **** {
  54:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr != NULL)
  55:fltk-1.3.4-1/png/pngpread.c ****    {
  56:fltk-1.3.4-1/png/pngpread.c ****       /* It's easiest for the caller if we do the save; then the caller doesn't
  57:fltk-1.3.4-1/png/pngpread.c ****        * have to supply the same data again:
  58:fltk-1.3.4-1/png/pngpread.c ****        */
  59:fltk-1.3.4-1/png/pngpread.c ****       if (save != 0)
  60:fltk-1.3.4-1/png/pngpread.c ****          png_push_save_buffer(png_ptr);
  61:fltk-1.3.4-1/png/pngpread.c ****       else
  62:fltk-1.3.4-1/png/pngpread.c ****       {
  63:fltk-1.3.4-1/png/pngpread.c ****          /* This includes any pending saved bytes: */
  64:fltk-1.3.4-1/png/pngpread.c ****          png_size_t remaining = png_ptr->buffer_size;
  65:fltk-1.3.4-1/png/pngpread.c ****          png_ptr->buffer_size = 0;
  66:fltk-1.3.4-1/png/pngpread.c **** 
  67:fltk-1.3.4-1/png/pngpread.c ****          /* So subtract the saved buffer size, unless all the data
  68:fltk-1.3.4-1/png/pngpread.c ****           * is actually 'saved', in which case we just return 0
  69:fltk-1.3.4-1/png/pngpread.c ****           */
  70:fltk-1.3.4-1/png/pngpread.c ****          if (png_ptr->save_buffer_size < remaining)
  71:fltk-1.3.4-1/png/pngpread.c ****             return remaining - png_ptr->save_buffer_size;
  72:fltk-1.3.4-1/png/pngpread.c ****       }
  73:fltk-1.3.4-1/png/pngpread.c ****    }
  74:fltk-1.3.4-1/png/pngpread.c **** 
  75:fltk-1.3.4-1/png/pngpread.c ****    return 0;
  76:fltk-1.3.4-1/png/pngpread.c **** }
  77:fltk-1.3.4-1/png/pngpread.c **** 
  78:fltk-1.3.4-1/png/pngpread.c **** png_uint_32 PNGAPI
  79:fltk-1.3.4-1/png/pngpread.c **** png_process_data_skip(png_structrp png_ptr)
  80:fltk-1.3.4-1/png/pngpread.c **** {
  81:fltk-1.3.4-1/png/pngpread.c ****    png_uint_32 remaining = 0;
  82:fltk-1.3.4-1/png/pngpread.c **** 
  83:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr != NULL && png_ptr->process_mode == PNG_SKIP_MODE &&
  84:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->skip_length > 0)
  85:fltk-1.3.4-1/png/pngpread.c ****    {
  86:fltk-1.3.4-1/png/pngpread.c ****       /* At the end of png_process_data the buffer size must be 0 (see the loop
  87:fltk-1.3.4-1/png/pngpread.c ****        * above) so we can detect a broken call here:
  88:fltk-1.3.4-1/png/pngpread.c ****        */
  89:fltk-1.3.4-1/png/pngpread.c ****       if (png_ptr->buffer_size != 0)
  90:fltk-1.3.4-1/png/pngpread.c ****          png_error(png_ptr,
  91:fltk-1.3.4-1/png/pngpread.c ****             "png_process_data_skip called inside png_process_data");
  92:fltk-1.3.4-1/png/pngpread.c **** 
  93:fltk-1.3.4-1/png/pngpread.c ****       /* If is impossible for there to be a saved buffer at this point -
  94:fltk-1.3.4-1/png/pngpread.c ****        * otherwise we could not be in SKIP mode.  This will also happen if
  95:fltk-1.3.4-1/png/pngpread.c ****        * png_process_skip is called inside png_process_data (but only very
  96:fltk-1.3.4-1/png/pngpread.c ****        * rarely.)
  97:fltk-1.3.4-1/png/pngpread.c ****        */
  98:fltk-1.3.4-1/png/pngpread.c ****       if (png_ptr->save_buffer_size != 0)
  99:fltk-1.3.4-1/png/pngpread.c ****          png_error(png_ptr, "png_process_data_skip called with saved data");
 100:fltk-1.3.4-1/png/pngpread.c **** 
 101:fltk-1.3.4-1/png/pngpread.c ****       remaining = png_ptr->skip_length;
 102:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->skip_length = 0;
 103:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->process_mode = PNG_READ_CHUNK_MODE;
 104:fltk-1.3.4-1/png/pngpread.c ****    }
 105:fltk-1.3.4-1/png/pngpread.c **** 
 106:fltk-1.3.4-1/png/pngpread.c ****    return remaining;
 107:fltk-1.3.4-1/png/pngpread.c **** }
 108:fltk-1.3.4-1/png/pngpread.c **** 
 109:fltk-1.3.4-1/png/pngpread.c **** /* What we do with the incoming data depends on what we were previously
 110:fltk-1.3.4-1/png/pngpread.c ****  * doing before we ran out of data...
 111:fltk-1.3.4-1/png/pngpread.c ****  */
 112:fltk-1.3.4-1/png/pngpread.c **** void /* PRIVATE */
 113:fltk-1.3.4-1/png/pngpread.c **** png_process_some_data(png_structrp png_ptr, png_inforp info_ptr)
 114:fltk-1.3.4-1/png/pngpread.c **** {
 115:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr == NULL)
 116:fltk-1.3.4-1/png/pngpread.c ****       return;
 117:fltk-1.3.4-1/png/pngpread.c **** 
 118:fltk-1.3.4-1/png/pngpread.c ****    switch (png_ptr->process_mode)
 119:fltk-1.3.4-1/png/pngpread.c ****    {
 120:fltk-1.3.4-1/png/pngpread.c ****       case PNG_READ_SIG_MODE:
 121:fltk-1.3.4-1/png/pngpread.c ****       {
 122:fltk-1.3.4-1/png/pngpread.c ****          png_push_read_sig(png_ptr, info_ptr);
 123:fltk-1.3.4-1/png/pngpread.c ****          break;
 124:fltk-1.3.4-1/png/pngpread.c ****       }
 125:fltk-1.3.4-1/png/pngpread.c **** 
 126:fltk-1.3.4-1/png/pngpread.c ****       case PNG_READ_CHUNK_MODE:
 127:fltk-1.3.4-1/png/pngpread.c ****       {
 128:fltk-1.3.4-1/png/pngpread.c ****          png_push_read_chunk(png_ptr, info_ptr);
 129:fltk-1.3.4-1/png/pngpread.c ****          break;
 130:fltk-1.3.4-1/png/pngpread.c ****       }
 131:fltk-1.3.4-1/png/pngpread.c **** 
 132:fltk-1.3.4-1/png/pngpread.c ****       case PNG_READ_IDAT_MODE:
 133:fltk-1.3.4-1/png/pngpread.c ****       {
 134:fltk-1.3.4-1/png/pngpread.c ****          png_push_read_IDAT(png_ptr);
 135:fltk-1.3.4-1/png/pngpread.c ****          break;
 136:fltk-1.3.4-1/png/pngpread.c ****       }
 137:fltk-1.3.4-1/png/pngpread.c **** 
 138:fltk-1.3.4-1/png/pngpread.c ****       case PNG_SKIP_MODE:
 139:fltk-1.3.4-1/png/pngpread.c ****       {
 140:fltk-1.3.4-1/png/pngpread.c ****          png_push_crc_finish(png_ptr);
 141:fltk-1.3.4-1/png/pngpread.c ****          break;
 142:fltk-1.3.4-1/png/pngpread.c ****       }
 143:fltk-1.3.4-1/png/pngpread.c **** 
 144:fltk-1.3.4-1/png/pngpread.c ****       default:
 145:fltk-1.3.4-1/png/pngpread.c ****       {
 146:fltk-1.3.4-1/png/pngpread.c ****          png_ptr->buffer_size = 0;
 147:fltk-1.3.4-1/png/pngpread.c ****          break;
 148:fltk-1.3.4-1/png/pngpread.c ****       }
 149:fltk-1.3.4-1/png/pngpread.c ****    }
 150:fltk-1.3.4-1/png/pngpread.c **** }
 151:fltk-1.3.4-1/png/pngpread.c **** 
 152:fltk-1.3.4-1/png/pngpread.c **** /* Read any remaining signature bytes from the stream and compare them with
 153:fltk-1.3.4-1/png/pngpread.c ****  * the correct PNG signature.  It is possible that this routine is called
 154:fltk-1.3.4-1/png/pngpread.c ****  * with bytes already read from the signature, either because they have been
 155:fltk-1.3.4-1/png/pngpread.c ****  * checked by the calling application, or because of multiple calls to this
 156:fltk-1.3.4-1/png/pngpread.c ****  * routine.
 157:fltk-1.3.4-1/png/pngpread.c ****  */
 158:fltk-1.3.4-1/png/pngpread.c **** void /* PRIVATE */
 159:fltk-1.3.4-1/png/pngpread.c **** png_push_read_sig(png_structrp png_ptr, png_inforp info_ptr)
 160:fltk-1.3.4-1/png/pngpread.c **** {
 161:fltk-1.3.4-1/png/pngpread.c ****    png_size_t num_checked = png_ptr->sig_bytes, /* SAFE, does not exceed 8 */ 
 162:fltk-1.3.4-1/png/pngpread.c ****              num_to_check = 8 - num_checked;
 163:fltk-1.3.4-1/png/pngpread.c **** 
 164:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->buffer_size < num_to_check)
 165:fltk-1.3.4-1/png/pngpread.c ****    {
 166:fltk-1.3.4-1/png/pngpread.c ****       num_to_check = png_ptr->buffer_size;
 167:fltk-1.3.4-1/png/pngpread.c ****    }
 168:fltk-1.3.4-1/png/pngpread.c **** 
 169:fltk-1.3.4-1/png/pngpread.c ****    png_push_fill_buffer(png_ptr, &(info_ptr->signature[num_checked]),
 170:fltk-1.3.4-1/png/pngpread.c ****        num_to_check);
 171:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->sig_bytes = (png_byte)(png_ptr->sig_bytes + num_to_check);
 172:fltk-1.3.4-1/png/pngpread.c **** 
 173:fltk-1.3.4-1/png/pngpread.c ****    if (png_sig_cmp(info_ptr->signature, num_checked, num_to_check))
 174:fltk-1.3.4-1/png/pngpread.c ****    {
 175:fltk-1.3.4-1/png/pngpread.c ****       if (num_checked < 4 &&
 176:fltk-1.3.4-1/png/pngpread.c ****           png_sig_cmp(info_ptr->signature, num_checked, num_to_check - 4))
 177:fltk-1.3.4-1/png/pngpread.c ****          png_error(png_ptr, "Not a PNG file");
 178:fltk-1.3.4-1/png/pngpread.c **** 
 179:fltk-1.3.4-1/png/pngpread.c ****       else
 180:fltk-1.3.4-1/png/pngpread.c ****          png_error(png_ptr, "PNG file corrupted by ASCII conversion");
 181:fltk-1.3.4-1/png/pngpread.c ****    }
 182:fltk-1.3.4-1/png/pngpread.c ****    else
 183:fltk-1.3.4-1/png/pngpread.c ****    {
 184:fltk-1.3.4-1/png/pngpread.c ****       if (png_ptr->sig_bytes >= 8)
 185:fltk-1.3.4-1/png/pngpread.c ****       {
 186:fltk-1.3.4-1/png/pngpread.c ****          png_ptr->process_mode = PNG_READ_CHUNK_MODE;
 187:fltk-1.3.4-1/png/pngpread.c ****       }
 188:fltk-1.3.4-1/png/pngpread.c ****    }
 189:fltk-1.3.4-1/png/pngpread.c **** }
 190:fltk-1.3.4-1/png/pngpread.c **** 
 191:fltk-1.3.4-1/png/pngpread.c **** void /* PRIVATE */
 192:fltk-1.3.4-1/png/pngpread.c **** png_push_read_chunk(png_structrp png_ptr, png_inforp info_ptr)
 193:fltk-1.3.4-1/png/pngpread.c **** {
 194:fltk-1.3.4-1/png/pngpread.c ****    png_uint_32 chunk_name;
 195:fltk-1.3.4-1/png/pngpread.c **** #ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED
 196:fltk-1.3.4-1/png/pngpread.c ****    int keep; /* unknown handling method */
 197:fltk-1.3.4-1/png/pngpread.c **** #endif
 198:fltk-1.3.4-1/png/pngpread.c **** 
 199:fltk-1.3.4-1/png/pngpread.c ****    /* First we make sure we have enough data for the 4-byte chunk name
 200:fltk-1.3.4-1/png/pngpread.c ****     * and the 4-byte chunk length before proceeding with decoding the
 201:fltk-1.3.4-1/png/pngpread.c ****     * chunk data.  To fully decode each of these chunks, we also make
 202:fltk-1.3.4-1/png/pngpread.c ****     * sure we have enough data in the buffer for the 4-byte CRC at the
 203:fltk-1.3.4-1/png/pngpread.c ****     * end of every chunk (except IDAT, which is handled separately).
 204:fltk-1.3.4-1/png/pngpread.c ****     */
 205:fltk-1.3.4-1/png/pngpread.c ****    if ((png_ptr->mode & PNG_HAVE_CHUNK_HEADER) == 0)
 206:fltk-1.3.4-1/png/pngpread.c ****    {
 207:fltk-1.3.4-1/png/pngpread.c ****       png_byte chunk_length[4];
 208:fltk-1.3.4-1/png/pngpread.c ****       png_byte chunk_tag[4];
 209:fltk-1.3.4-1/png/pngpread.c **** 
 210:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_LT(8)
 211:fltk-1.3.4-1/png/pngpread.c ****       png_push_fill_buffer(png_ptr, chunk_length, 4);
 212:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->push_length = png_get_uint_31(png_ptr, chunk_length);
 213:fltk-1.3.4-1/png/pngpread.c ****       png_reset_crc(png_ptr);
 214:fltk-1.3.4-1/png/pngpread.c ****       png_crc_read(png_ptr, chunk_tag, 4);
 215:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->chunk_name = PNG_CHUNK_FROM_STRING(chunk_tag);
 216:fltk-1.3.4-1/png/pngpread.c ****       png_check_chunk_name(png_ptr, png_ptr->chunk_name);
 217:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->mode |= PNG_HAVE_CHUNK_HEADER;
 218:fltk-1.3.4-1/png/pngpread.c ****    }
 219:fltk-1.3.4-1/png/pngpread.c **** 
 220:fltk-1.3.4-1/png/pngpread.c ****    chunk_name = png_ptr->chunk_name;
 221:fltk-1.3.4-1/png/pngpread.c **** 
 222:fltk-1.3.4-1/png/pngpread.c ****    if (chunk_name == png_IDAT)
 223:fltk-1.3.4-1/png/pngpread.c ****    {
 224:fltk-1.3.4-1/png/pngpread.c ****       if ((png_ptr->mode & PNG_AFTER_IDAT) != 0)
 225:fltk-1.3.4-1/png/pngpread.c ****          png_ptr->mode |= PNG_HAVE_CHUNK_AFTER_IDAT;
 226:fltk-1.3.4-1/png/pngpread.c **** 
 227:fltk-1.3.4-1/png/pngpread.c ****       /* If we reach an IDAT chunk, this means we have read all of the
 228:fltk-1.3.4-1/png/pngpread.c ****        * header chunks, and we can start reading the image (or if this
 229:fltk-1.3.4-1/png/pngpread.c ****        * is called after the image has been read - we have an error).
 230:fltk-1.3.4-1/png/pngpread.c ****        */
 231:fltk-1.3.4-1/png/pngpread.c ****       if ((png_ptr->mode & PNG_HAVE_IHDR) == 0)
 232:fltk-1.3.4-1/png/pngpread.c ****          png_error(png_ptr, "Missing IHDR before IDAT");
 233:fltk-1.3.4-1/png/pngpread.c **** 
 234:fltk-1.3.4-1/png/pngpread.c ****       else if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE &&
 235:fltk-1.3.4-1/png/pngpread.c ****           (png_ptr->mode & PNG_HAVE_PLTE) == 0)
 236:fltk-1.3.4-1/png/pngpread.c ****          png_error(png_ptr, "Missing PLTE before IDAT");
 237:fltk-1.3.4-1/png/pngpread.c **** 
 238:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->mode |= PNG_HAVE_IDAT;
 239:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->process_mode = PNG_READ_IDAT_MODE;
 240:fltk-1.3.4-1/png/pngpread.c **** 
 241:fltk-1.3.4-1/png/pngpread.c ****       if ((png_ptr->mode & PNG_HAVE_CHUNK_AFTER_IDAT) == 0)
 242:fltk-1.3.4-1/png/pngpread.c ****          if (png_ptr->push_length == 0)
 243:fltk-1.3.4-1/png/pngpread.c ****             return;
 244:fltk-1.3.4-1/png/pngpread.c **** 
 245:fltk-1.3.4-1/png/pngpread.c ****       if ((png_ptr->mode & PNG_AFTER_IDAT) != 0)
 246:fltk-1.3.4-1/png/pngpread.c ****          png_benign_error(png_ptr, "Too many IDATs found");
 247:fltk-1.3.4-1/png/pngpread.c ****    }
 248:fltk-1.3.4-1/png/pngpread.c **** 
 249:fltk-1.3.4-1/png/pngpread.c ****    if (chunk_name == png_IHDR)
 250:fltk-1.3.4-1/png/pngpread.c ****    {
 251:fltk-1.3.4-1/png/pngpread.c ****       if (png_ptr->push_length != 13)
 252:fltk-1.3.4-1/png/pngpread.c ****          png_error(png_ptr, "Invalid IHDR length");
 253:fltk-1.3.4-1/png/pngpread.c **** 
 254:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_FULL
 255:fltk-1.3.4-1/png/pngpread.c ****       png_handle_IHDR(png_ptr, info_ptr, png_ptr->push_length);
 256:fltk-1.3.4-1/png/pngpread.c ****    }
 257:fltk-1.3.4-1/png/pngpread.c **** 
 258:fltk-1.3.4-1/png/pngpread.c ****    else if (chunk_name == png_IEND)
 259:fltk-1.3.4-1/png/pngpread.c ****    {
 260:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_FULL
 261:fltk-1.3.4-1/png/pngpread.c ****       png_handle_IEND(png_ptr, info_ptr, png_ptr->push_length);
 262:fltk-1.3.4-1/png/pngpread.c **** 
 263:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->process_mode = PNG_READ_DONE_MODE;
 264:fltk-1.3.4-1/png/pngpread.c ****       png_push_have_end(png_ptr, info_ptr);
 265:fltk-1.3.4-1/png/pngpread.c ****    }
 266:fltk-1.3.4-1/png/pngpread.c **** 
 267:fltk-1.3.4-1/png/pngpread.c **** #ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED
 268:fltk-1.3.4-1/png/pngpread.c ****    else if ((keep = png_chunk_unknown_handling(png_ptr, chunk_name)) != 0)
 269:fltk-1.3.4-1/png/pngpread.c ****    {
 270:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_FULL
 271:fltk-1.3.4-1/png/pngpread.c ****       png_handle_unknown(png_ptr, info_ptr, png_ptr->push_length, keep);
 272:fltk-1.3.4-1/png/pngpread.c **** 
 273:fltk-1.3.4-1/png/pngpread.c ****       if (chunk_name == png_PLTE)
 274:fltk-1.3.4-1/png/pngpread.c ****          png_ptr->mode |= PNG_HAVE_PLTE;
 275:fltk-1.3.4-1/png/pngpread.c ****    }
 276:fltk-1.3.4-1/png/pngpread.c **** #endif
 277:fltk-1.3.4-1/png/pngpread.c **** 
 278:fltk-1.3.4-1/png/pngpread.c ****    else if (chunk_name == png_PLTE)
 279:fltk-1.3.4-1/png/pngpread.c ****    {
 280:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_FULL
 281:fltk-1.3.4-1/png/pngpread.c ****       png_handle_PLTE(png_ptr, info_ptr, png_ptr->push_length);
 282:fltk-1.3.4-1/png/pngpread.c ****    }
 283:fltk-1.3.4-1/png/pngpread.c **** 
 284:fltk-1.3.4-1/png/pngpread.c ****    else if (chunk_name == png_IDAT)
 285:fltk-1.3.4-1/png/pngpread.c ****    {
 286:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->idat_size = png_ptr->push_length;
 287:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->process_mode = PNG_READ_IDAT_MODE;
 288:fltk-1.3.4-1/png/pngpread.c ****       png_push_have_info(png_ptr, info_ptr);
 289:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->zstream.avail_out =
 290:fltk-1.3.4-1/png/pngpread.c ****           (uInt) PNG_ROWBYTES(png_ptr->pixel_depth,
 291:fltk-1.3.4-1/png/pngpread.c ****           png_ptr->iwidth) + 1;
 292:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->zstream.next_out = png_ptr->row_buf;
 293:fltk-1.3.4-1/png/pngpread.c ****       return;
 294:fltk-1.3.4-1/png/pngpread.c ****    }
 295:fltk-1.3.4-1/png/pngpread.c **** 
 296:fltk-1.3.4-1/png/pngpread.c **** #ifdef PNG_READ_gAMA_SUPPORTED
 297:fltk-1.3.4-1/png/pngpread.c ****    else if (png_ptr->chunk_name == png_gAMA)
 298:fltk-1.3.4-1/png/pngpread.c ****    {
 299:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_FULL
 300:fltk-1.3.4-1/png/pngpread.c ****       png_handle_gAMA(png_ptr, info_ptr, png_ptr->push_length);
 301:fltk-1.3.4-1/png/pngpread.c ****    }
 302:fltk-1.3.4-1/png/pngpread.c **** 
 303:fltk-1.3.4-1/png/pngpread.c **** #endif
 304:fltk-1.3.4-1/png/pngpread.c **** #ifdef PNG_READ_sBIT_SUPPORTED
 305:fltk-1.3.4-1/png/pngpread.c ****    else if (png_ptr->chunk_name == png_sBIT)
 306:fltk-1.3.4-1/png/pngpread.c ****    {
 307:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_FULL
 308:fltk-1.3.4-1/png/pngpread.c ****       png_handle_sBIT(png_ptr, info_ptr, png_ptr->push_length);
 309:fltk-1.3.4-1/png/pngpread.c ****    }
 310:fltk-1.3.4-1/png/pngpread.c **** 
 311:fltk-1.3.4-1/png/pngpread.c **** #endif
 312:fltk-1.3.4-1/png/pngpread.c **** #ifdef PNG_READ_cHRM_SUPPORTED
 313:fltk-1.3.4-1/png/pngpread.c ****    else if (png_ptr->chunk_name == png_cHRM)
 314:fltk-1.3.4-1/png/pngpread.c ****    {
 315:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_FULL
 316:fltk-1.3.4-1/png/pngpread.c ****       png_handle_cHRM(png_ptr, info_ptr, png_ptr->push_length);
 317:fltk-1.3.4-1/png/pngpread.c ****    }
 318:fltk-1.3.4-1/png/pngpread.c **** 
 319:fltk-1.3.4-1/png/pngpread.c **** #endif
 320:fltk-1.3.4-1/png/pngpread.c **** #ifdef PNG_READ_sRGB_SUPPORTED
 321:fltk-1.3.4-1/png/pngpread.c ****    else if (chunk_name == png_sRGB)
 322:fltk-1.3.4-1/png/pngpread.c ****    {
 323:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_FULL
 324:fltk-1.3.4-1/png/pngpread.c ****       png_handle_sRGB(png_ptr, info_ptr, png_ptr->push_length);
 325:fltk-1.3.4-1/png/pngpread.c ****    }
 326:fltk-1.3.4-1/png/pngpread.c **** 
 327:fltk-1.3.4-1/png/pngpread.c **** #endif
 328:fltk-1.3.4-1/png/pngpread.c **** #ifdef PNG_READ_iCCP_SUPPORTED
 329:fltk-1.3.4-1/png/pngpread.c ****    else if (png_ptr->chunk_name == png_iCCP)
 330:fltk-1.3.4-1/png/pngpread.c ****    {
 331:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_FULL
 332:fltk-1.3.4-1/png/pngpread.c ****       png_handle_iCCP(png_ptr, info_ptr, png_ptr->push_length);
 333:fltk-1.3.4-1/png/pngpread.c ****    }
 334:fltk-1.3.4-1/png/pngpread.c **** 
 335:fltk-1.3.4-1/png/pngpread.c **** #endif
 336:fltk-1.3.4-1/png/pngpread.c **** #ifdef PNG_READ_sPLT_SUPPORTED
 337:fltk-1.3.4-1/png/pngpread.c ****    else if (chunk_name == png_sPLT)
 338:fltk-1.3.4-1/png/pngpread.c ****    {
 339:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_FULL
 340:fltk-1.3.4-1/png/pngpread.c ****       png_handle_sPLT(png_ptr, info_ptr, png_ptr->push_length);
 341:fltk-1.3.4-1/png/pngpread.c ****    }
 342:fltk-1.3.4-1/png/pngpread.c **** 
 343:fltk-1.3.4-1/png/pngpread.c **** #endif
 344:fltk-1.3.4-1/png/pngpread.c **** #ifdef PNG_READ_tRNS_SUPPORTED
 345:fltk-1.3.4-1/png/pngpread.c ****    else if (chunk_name == png_tRNS)
 346:fltk-1.3.4-1/png/pngpread.c ****    {
 347:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_FULL
 348:fltk-1.3.4-1/png/pngpread.c ****       png_handle_tRNS(png_ptr, info_ptr, png_ptr->push_length);
 349:fltk-1.3.4-1/png/pngpread.c ****    }
 350:fltk-1.3.4-1/png/pngpread.c **** 
 351:fltk-1.3.4-1/png/pngpread.c **** #endif
 352:fltk-1.3.4-1/png/pngpread.c **** #ifdef PNG_READ_bKGD_SUPPORTED
 353:fltk-1.3.4-1/png/pngpread.c ****    else if (chunk_name == png_bKGD)
 354:fltk-1.3.4-1/png/pngpread.c ****    {
 355:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_FULL
 356:fltk-1.3.4-1/png/pngpread.c ****       png_handle_bKGD(png_ptr, info_ptr, png_ptr->push_length);
 357:fltk-1.3.4-1/png/pngpread.c ****    }
 358:fltk-1.3.4-1/png/pngpread.c **** 
 359:fltk-1.3.4-1/png/pngpread.c **** #endif
 360:fltk-1.3.4-1/png/pngpread.c **** #ifdef PNG_READ_hIST_SUPPORTED
 361:fltk-1.3.4-1/png/pngpread.c ****    else if (chunk_name == png_hIST)
 362:fltk-1.3.4-1/png/pngpread.c ****    {
 363:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_FULL
 364:fltk-1.3.4-1/png/pngpread.c ****       png_handle_hIST(png_ptr, info_ptr, png_ptr->push_length);
 365:fltk-1.3.4-1/png/pngpread.c ****    }
 366:fltk-1.3.4-1/png/pngpread.c **** 
 367:fltk-1.3.4-1/png/pngpread.c **** #endif
 368:fltk-1.3.4-1/png/pngpread.c **** #ifdef PNG_READ_pHYs_SUPPORTED
 369:fltk-1.3.4-1/png/pngpread.c ****    else if (chunk_name == png_pHYs)
 370:fltk-1.3.4-1/png/pngpread.c ****    {
 371:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_FULL
 372:fltk-1.3.4-1/png/pngpread.c ****       png_handle_pHYs(png_ptr, info_ptr, png_ptr->push_length);
 373:fltk-1.3.4-1/png/pngpread.c ****    }
 374:fltk-1.3.4-1/png/pngpread.c **** 
 375:fltk-1.3.4-1/png/pngpread.c **** #endif
 376:fltk-1.3.4-1/png/pngpread.c **** #ifdef PNG_READ_oFFs_SUPPORTED
 377:fltk-1.3.4-1/png/pngpread.c ****    else if (chunk_name == png_oFFs)
 378:fltk-1.3.4-1/png/pngpread.c ****    {
 379:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_FULL
 380:fltk-1.3.4-1/png/pngpread.c ****       png_handle_oFFs(png_ptr, info_ptr, png_ptr->push_length);
 381:fltk-1.3.4-1/png/pngpread.c ****    }
 382:fltk-1.3.4-1/png/pngpread.c **** #endif
 383:fltk-1.3.4-1/png/pngpread.c **** 
 384:fltk-1.3.4-1/png/pngpread.c **** #ifdef PNG_READ_pCAL_SUPPORTED
 385:fltk-1.3.4-1/png/pngpread.c ****    else if (chunk_name == png_pCAL)
 386:fltk-1.3.4-1/png/pngpread.c ****    {
 387:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_FULL
 388:fltk-1.3.4-1/png/pngpread.c ****       png_handle_pCAL(png_ptr, info_ptr, png_ptr->push_length);
 389:fltk-1.3.4-1/png/pngpread.c ****    }
 390:fltk-1.3.4-1/png/pngpread.c **** 
 391:fltk-1.3.4-1/png/pngpread.c **** #endif
 392:fltk-1.3.4-1/png/pngpread.c **** #ifdef PNG_READ_sCAL_SUPPORTED
 393:fltk-1.3.4-1/png/pngpread.c ****    else if (chunk_name == png_sCAL)
 394:fltk-1.3.4-1/png/pngpread.c ****    {
 395:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_FULL
 396:fltk-1.3.4-1/png/pngpread.c ****       png_handle_sCAL(png_ptr, info_ptr, png_ptr->push_length);
 397:fltk-1.3.4-1/png/pngpread.c ****    }
 398:fltk-1.3.4-1/png/pngpread.c **** 
 399:fltk-1.3.4-1/png/pngpread.c **** #endif
 400:fltk-1.3.4-1/png/pngpread.c **** #ifdef PNG_READ_tIME_SUPPORTED
 401:fltk-1.3.4-1/png/pngpread.c ****    else if (chunk_name == png_tIME)
 402:fltk-1.3.4-1/png/pngpread.c ****    {
 403:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_FULL
 404:fltk-1.3.4-1/png/pngpread.c ****       png_handle_tIME(png_ptr, info_ptr, png_ptr->push_length);
 405:fltk-1.3.4-1/png/pngpread.c ****    }
 406:fltk-1.3.4-1/png/pngpread.c **** 
 407:fltk-1.3.4-1/png/pngpread.c **** #endif
 408:fltk-1.3.4-1/png/pngpread.c **** #ifdef PNG_READ_tEXt_SUPPORTED
 409:fltk-1.3.4-1/png/pngpread.c ****    else if (chunk_name == png_tEXt)
 410:fltk-1.3.4-1/png/pngpread.c ****    {
 411:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_FULL
 412:fltk-1.3.4-1/png/pngpread.c ****       png_handle_tEXt(png_ptr, info_ptr, png_ptr->push_length);
 413:fltk-1.3.4-1/png/pngpread.c ****    }
 414:fltk-1.3.4-1/png/pngpread.c **** 
 415:fltk-1.3.4-1/png/pngpread.c **** #endif
 416:fltk-1.3.4-1/png/pngpread.c **** #ifdef PNG_READ_zTXt_SUPPORTED
 417:fltk-1.3.4-1/png/pngpread.c ****    else if (chunk_name == png_zTXt)
 418:fltk-1.3.4-1/png/pngpread.c ****    {
 419:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_FULL
 420:fltk-1.3.4-1/png/pngpread.c ****       png_handle_zTXt(png_ptr, info_ptr, png_ptr->push_length);
 421:fltk-1.3.4-1/png/pngpread.c ****    }
 422:fltk-1.3.4-1/png/pngpread.c **** 
 423:fltk-1.3.4-1/png/pngpread.c **** #endif
 424:fltk-1.3.4-1/png/pngpread.c **** #ifdef PNG_READ_iTXt_SUPPORTED
 425:fltk-1.3.4-1/png/pngpread.c ****    else if (chunk_name == png_iTXt)
 426:fltk-1.3.4-1/png/pngpread.c ****    {
 427:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_FULL
 428:fltk-1.3.4-1/png/pngpread.c ****       png_handle_iTXt(png_ptr, info_ptr, png_ptr->push_length);
 429:fltk-1.3.4-1/png/pngpread.c ****    }
 430:fltk-1.3.4-1/png/pngpread.c **** #endif
 431:fltk-1.3.4-1/png/pngpread.c **** 
 432:fltk-1.3.4-1/png/pngpread.c ****    else
 433:fltk-1.3.4-1/png/pngpread.c ****    {
 434:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_FULL
 435:fltk-1.3.4-1/png/pngpread.c ****       png_handle_unknown(png_ptr, info_ptr, png_ptr->push_length,
 436:fltk-1.3.4-1/png/pngpread.c ****          PNG_HANDLE_CHUNK_AS_DEFAULT);
 437:fltk-1.3.4-1/png/pngpread.c ****    }
 438:fltk-1.3.4-1/png/pngpread.c **** 
 439:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->mode &= ~PNG_HAVE_CHUNK_HEADER;
 440:fltk-1.3.4-1/png/pngpread.c **** }
 441:fltk-1.3.4-1/png/pngpread.c **** 
 442:fltk-1.3.4-1/png/pngpread.c **** void /* PRIVATE */
 443:fltk-1.3.4-1/png/pngpread.c **** png_push_crc_skip(png_structrp png_ptr, png_uint_32 skip)
 444:fltk-1.3.4-1/png/pngpread.c **** {
 445:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->process_mode = PNG_SKIP_MODE;
 446:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->skip_length = skip;
 447:fltk-1.3.4-1/png/pngpread.c **** }
 448:fltk-1.3.4-1/png/pngpread.c **** 
 449:fltk-1.3.4-1/png/pngpread.c **** void /* PRIVATE */
 450:fltk-1.3.4-1/png/pngpread.c **** png_push_crc_finish(png_structrp png_ptr)
 451:fltk-1.3.4-1/png/pngpread.c **** {
 452:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->skip_length != 0 && png_ptr->save_buffer_size != 0)
 453:fltk-1.3.4-1/png/pngpread.c ****    {
 454:fltk-1.3.4-1/png/pngpread.c ****       png_size_t save_size = png_ptr->save_buffer_size;
 455:fltk-1.3.4-1/png/pngpread.c ****       png_uint_32 skip_length = png_ptr->skip_length;
 456:fltk-1.3.4-1/png/pngpread.c **** 
 457:fltk-1.3.4-1/png/pngpread.c ****       /* We want the smaller of 'skip_length' and 'save_buffer_size', but
 458:fltk-1.3.4-1/png/pngpread.c ****        * they are of different types and we don't know which variable has the
 459:fltk-1.3.4-1/png/pngpread.c ****        * fewest bits.  Carefully select the smaller and cast it to the type of
 460:fltk-1.3.4-1/png/pngpread.c ****        * the larger - this cannot overflow.  Do not cast in the following test
 461:fltk-1.3.4-1/png/pngpread.c ****        * - it will break on either 16 or 64 bit platforms.
 462:fltk-1.3.4-1/png/pngpread.c ****        */
 463:fltk-1.3.4-1/png/pngpread.c ****       if (skip_length < save_size)
 464:fltk-1.3.4-1/png/pngpread.c ****          save_size = (png_size_t)skip_length;
 465:fltk-1.3.4-1/png/pngpread.c **** 
 466:fltk-1.3.4-1/png/pngpread.c ****       else
 467:fltk-1.3.4-1/png/pngpread.c ****          skip_length = (png_uint_32)save_size;
 468:fltk-1.3.4-1/png/pngpread.c **** 
 469:fltk-1.3.4-1/png/pngpread.c ****       png_calculate_crc(png_ptr, png_ptr->save_buffer_ptr, save_size);
 470:fltk-1.3.4-1/png/pngpread.c **** 
 471:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->skip_length -= skip_length;
 472:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->buffer_size -= save_size;
 473:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->save_buffer_size -= save_size;
 474:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->save_buffer_ptr += save_size;
 475:fltk-1.3.4-1/png/pngpread.c ****    }
 476:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->skip_length != 0 && png_ptr->current_buffer_size != 0)
 477:fltk-1.3.4-1/png/pngpread.c ****    {
 478:fltk-1.3.4-1/png/pngpread.c ****       png_size_t save_size = png_ptr->current_buffer_size;
 479:fltk-1.3.4-1/png/pngpread.c ****       png_uint_32 skip_length = png_ptr->skip_length;
 480:fltk-1.3.4-1/png/pngpread.c **** 
 481:fltk-1.3.4-1/png/pngpread.c ****       /* We want the smaller of 'skip_length' and 'current_buffer_size', here,
 482:fltk-1.3.4-1/png/pngpread.c ****        * the same problem exists as above and the same solution.
 483:fltk-1.3.4-1/png/pngpread.c ****        */
 484:fltk-1.3.4-1/png/pngpread.c ****       if (skip_length < save_size)
 485:fltk-1.3.4-1/png/pngpread.c ****          save_size = (png_size_t)skip_length;
 486:fltk-1.3.4-1/png/pngpread.c **** 
 487:fltk-1.3.4-1/png/pngpread.c ****       else
 488:fltk-1.3.4-1/png/pngpread.c ****          skip_length = (png_uint_32)save_size;
 489:fltk-1.3.4-1/png/pngpread.c **** 
 490:fltk-1.3.4-1/png/pngpread.c ****       png_calculate_crc(png_ptr, png_ptr->current_buffer_ptr, save_size);
 491:fltk-1.3.4-1/png/pngpread.c **** 
 492:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->skip_length -= skip_length;
 493:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->buffer_size -= save_size;
 494:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->current_buffer_size -= save_size;
 495:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->current_buffer_ptr += save_size;
 496:fltk-1.3.4-1/png/pngpread.c ****    }
 497:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->skip_length == 0)
 498:fltk-1.3.4-1/png/pngpread.c ****    {
 499:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_LT(4)
 500:fltk-1.3.4-1/png/pngpread.c ****       png_crc_finish(png_ptr, 0);
 501:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->process_mode = PNG_READ_CHUNK_MODE;
 502:fltk-1.3.4-1/png/pngpread.c ****    }
 503:fltk-1.3.4-1/png/pngpread.c **** }
 504:fltk-1.3.4-1/png/pngpread.c **** 
 505:fltk-1.3.4-1/png/pngpread.c **** void PNGCBAPI
 506:fltk-1.3.4-1/png/pngpread.c **** png_push_fill_buffer(png_structp png_ptr, png_bytep buffer, png_size_t length)
 507:fltk-1.3.4-1/png/pngpread.c **** {
  17              		.loc 1 507 0
  18              		.cfi_startproc
  19              	.LVL0:
 508:fltk-1.3.4-1/png/pngpread.c ****    png_bytep ptr;
 509:fltk-1.3.4-1/png/pngpread.c **** 
 510:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr == NULL)
  20              		.loc 1 510 0
  21 0000 4885FF   		testq	%rdi, %rdi
  22 0003 745C     		je	.L17
 507:fltk-1.3.4-1/png/pngpread.c ****    png_bytep ptr;
  23              		.loc 1 507 0
  24 0005 4154     		pushq	%r12
  25              		.cfi_def_cfa_offset 16
  26              		.cfi_offset 12, -16
  27 0007 55       		pushq	%rbp
  28              		.cfi_def_cfa_offset 24
  29              		.cfi_offset 6, -24
  30 0008 4889F1   		movq	%rsi, %rcx
  31 000b 53       		pushq	%rbx
  32              		.cfi_def_cfa_offset 32
  33              		.cfi_offset 3, -32
 511:fltk-1.3.4-1/png/pngpread.c ****       return;
 512:fltk-1.3.4-1/png/pngpread.c **** 
 513:fltk-1.3.4-1/png/pngpread.c ****    ptr = buffer;
 514:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->save_buffer_size != 0)
  34              		.loc 1 514 0
  35 000c 4C8BA760 		movq	864(%rdi), %r12
  35      030000
  36 0013 4889FB   		movq	%rdi, %rbx
  37 0016 4889D5   		movq	%rdx, %rbp
  38              	.LVL1:
  39 0019 4D85E4   		testq	%r12, %r12
  40 001c 754A     		jne	.L19
  41              	.LVL2:
  42              	.L4:
 515:fltk-1.3.4-1/png/pngpread.c ****    {
 516:fltk-1.3.4-1/png/pngpread.c ****       png_size_t save_size;
 517:fltk-1.3.4-1/png/pngpread.c **** 
 518:fltk-1.3.4-1/png/pngpread.c ****       if (length < png_ptr->save_buffer_size)
 519:fltk-1.3.4-1/png/pngpread.c ****          save_size = length;
 520:fltk-1.3.4-1/png/pngpread.c **** 
 521:fltk-1.3.4-1/png/pngpread.c ****       else
 522:fltk-1.3.4-1/png/pngpread.c ****          save_size = png_ptr->save_buffer_size;
 523:fltk-1.3.4-1/png/pngpread.c **** 
 524:fltk-1.3.4-1/png/pngpread.c ****       memcpy(ptr, png_ptr->save_buffer_ptr, save_size);
 525:fltk-1.3.4-1/png/pngpread.c ****       length -= save_size;
 526:fltk-1.3.4-1/png/pngpread.c ****       ptr += save_size;
 527:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->buffer_size -= save_size;
 528:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->save_buffer_size -= save_size;
 529:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->save_buffer_ptr += save_size;
 530:fltk-1.3.4-1/png/pngpread.c ****    }
 531:fltk-1.3.4-1/png/pngpread.c ****    if (length != 0 && png_ptr->current_buffer_size != 0)
  43              		.loc 1 531 0
  44 001e 4885ED   		testq	%rbp, %rbp
  45 0021 743A     		je	.L1
  46              		.loc 1 531 0 is_stmt 0 discriminator 1
  47 0023 488B8378 		movq	888(%rbx), %rax
  47      030000
  48 002a 4885C0   		testq	%rax, %rax
  49 002d 742E     		je	.L1
  50 002f 4839C5   		cmpq	%rax, %rbp
  51              	.LBB117:
  52              	.LBB118:
  53              	.LBB119:
  54              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string3.h"
   1:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* Copyright (C) 2004-2016 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string3.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string3.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string3.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string3.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string3.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string3.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string3.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string3.h ****    <http://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef _STRING_H
  19:/usr/include/x86_64-linux-gnu/bits/string3.h **** # error "Never use <bits/string3.h> directly; include <string.h> instead."
  20:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  21:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  22:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  23:/usr/include/x86_64-linux-gnu/bits/string3.h **** __warndecl (__warn_memset_zero_len,
  24:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  25:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  26:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  27:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef __cplusplus
  28:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* XXX This is temporarily.  We should not redefine any of the symbols
  29:/usr/include/x86_64-linux-gnu/bits/string3.h ****    and instead integrate the error checking into the original
  30:/usr/include/x86_64-linux-gnu/bits/string3.h ****    definitions.  */
  31:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memcpy
  32:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memmove
  33:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memset
  34:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcat
  35:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcpy
  36:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncat
  37:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncpy
  38:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_GNU
  39:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef mempcpy
  40:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef stpcpy
  41:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  42:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_MISC
  43:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bcopy
  44:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bzero
  45:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  46:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  47:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  48:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  49:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  50:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  51:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	       size_t __len))
  52:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  53:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  55              		.loc 2 53 0 is_stmt 1
  56 0032 488BB348 		movq	840(%rbx), %rsi
  56      030000
  57 0039 4889CF   		movq	%rcx, %rdi
  58 003c 480F47E8 		cmova	%rax, %rbp
  59              	.LVL3:
  60 0040 4889EA   		movq	%rbp, %rdx
  61 0043 E8000000 		call	memcpy
  61      00
  62              	.LVL4:
  63              	.LBE119:
  64              	.LBE118:
 532:fltk-1.3.4-1/png/pngpread.c ****    {
 533:fltk-1.3.4-1/png/pngpread.c ****       png_size_t save_size;
 534:fltk-1.3.4-1/png/pngpread.c **** 
 535:fltk-1.3.4-1/png/pngpread.c ****       if (length < png_ptr->current_buffer_size)
 536:fltk-1.3.4-1/png/pngpread.c ****          save_size = length;
 537:fltk-1.3.4-1/png/pngpread.c **** 
 538:fltk-1.3.4-1/png/pngpread.c ****       else
 539:fltk-1.3.4-1/png/pngpread.c ****          save_size = png_ptr->current_buffer_size;
 540:fltk-1.3.4-1/png/pngpread.c **** 
 541:fltk-1.3.4-1/png/pngpread.c ****       memcpy(ptr, png_ptr->current_buffer_ptr, save_size);
 542:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->buffer_size -= save_size;
  65              		.loc 1 542 0
  66 0048 4829AB70 		subq	%rbp, 880(%rbx)
  66      030000
 543:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->current_buffer_size -= save_size;
  67              		.loc 1 543 0
  68 004f 4829AB78 		subq	%rbp, 888(%rbx)
  68      030000
 544:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->current_buffer_ptr += save_size;
  69              		.loc 1 544 0
  70 0056 4801AB48 		addq	%rbp, 840(%rbx)
  70      030000
  71              	.LVL5:
  72              	.L1:
  73              	.LBE117:
 545:fltk-1.3.4-1/png/pngpread.c ****    }
 546:fltk-1.3.4-1/png/pngpread.c **** }
  74              		.loc 1 546 0
  75 005d 5B       		popq	%rbx
  76              		.cfi_restore 3
  77              		.cfi_def_cfa_offset 24
  78              	.LVL6:
  79 005e 5D       		popq	%rbp
  80              		.cfi_restore 6
  81              		.cfi_def_cfa_offset 16
  82 005f 415C     		popq	%r12
  83              		.cfi_restore 12
  84              		.cfi_def_cfa_offset 8
  85              	.L17:
  86 0061 F3C3     		rep ret
  87              	.LVL7:
  88              		.p2align 4,,10
  89 0063 0F1F4400 		.p2align 3
  89      00
  90              	.L19:
  91              		.cfi_def_cfa_offset 32
  92              		.cfi_offset 3, -32
  93              		.cfi_offset 6, -24
  94              		.cfi_offset 12, -16
  95 0068 4939D4   		cmpq	%rdx, %r12
  96              	.LBB120:
  97              	.LBB121:
  98              	.LBB122:
  99              		.loc 2 53 0
 100 006b 488BB738 		movq	824(%rdi), %rsi
 100      030000
 101 0072 4889CF   		movq	%rcx, %rdi
 102 0075 4C0F47E2 		cmova	%rdx, %r12
 103              	.LVL8:
 104 0079 4C89E2   		movq	%r12, %rdx
 105              	.LVL9:
 106              	.LBE122:
 107              	.LBE121:
 525:fltk-1.3.4-1/png/pngpread.c ****       ptr += save_size;
 108              		.loc 1 525 0
 109 007c 4C29E5   		subq	%r12, %rbp
 110              	.LVL10:
 111              	.LBB124:
 112              	.LBB123:
 113              		.loc 2 53 0
 114 007f E8000000 		call	memcpy
 114      00
 115              	.LVL11:
 116 0084 4889C1   		movq	%rax, %rcx
 117              	.LVL12:
 118              	.LBE123:
 119              	.LBE124:
 527:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->save_buffer_size -= save_size;
 120              		.loc 1 527 0
 121 0087 4C29A370 		subq	%r12, 880(%rbx)
 121      030000
 528:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->save_buffer_ptr += save_size;
 122              		.loc 1 528 0
 123 008e 4C29A360 		subq	%r12, 864(%rbx)
 123      030000
 526:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->buffer_size -= save_size;
 124              		.loc 1 526 0
 125 0095 4C01E1   		addq	%r12, %rcx
 126              	.LVL13:
 529:fltk-1.3.4-1/png/pngpread.c ****    }
 127              		.loc 1 529 0
 128 0098 4C01A338 		addq	%r12, 824(%rbx)
 128      030000
 129 009f E97AFFFF 		jmp	.L4
 129      FF
 130              	.LBE120:
 131              		.cfi_endproc
 132              	.LFE64:
 134              		.section	.text.unlikely.png_push_fill_buffer
 135              	.LCOLDE0:
 136              		.section	.text.png_push_fill_buffer
 137              	.LHOTE0:
 138              		.section	.text.unlikely.png_read_push_finish_row.part.1,"ax",@progbits
 139              	.LCOLDB1:
 140              		.section	.text.png_read_push_finish_row.part.1,"ax",@progbits
 141              	.LHOTB1:
 142              		.p2align 4,,15
 144              	png_read_push_finish_row.part.1:
 145              	.LFB78:
 547:fltk-1.3.4-1/png/pngpread.c **** 
 548:fltk-1.3.4-1/png/pngpread.c **** void /* PRIVATE */
 549:fltk-1.3.4-1/png/pngpread.c **** png_push_save_buffer(png_structrp png_ptr)
 550:fltk-1.3.4-1/png/pngpread.c **** {
 551:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->save_buffer_size != 0)
 552:fltk-1.3.4-1/png/pngpread.c ****    {
 553:fltk-1.3.4-1/png/pngpread.c ****       if (png_ptr->save_buffer_ptr != png_ptr->save_buffer)
 554:fltk-1.3.4-1/png/pngpread.c ****       {
 555:fltk-1.3.4-1/png/pngpread.c ****          png_size_t i, istop;
 556:fltk-1.3.4-1/png/pngpread.c ****          png_bytep sp;
 557:fltk-1.3.4-1/png/pngpread.c ****          png_bytep dp;
 558:fltk-1.3.4-1/png/pngpread.c **** 
 559:fltk-1.3.4-1/png/pngpread.c ****          istop = png_ptr->save_buffer_size;
 560:fltk-1.3.4-1/png/pngpread.c ****          for (i = 0, sp = png_ptr->save_buffer_ptr, dp = png_ptr->save_buffer;
 561:fltk-1.3.4-1/png/pngpread.c ****              i < istop; i++, sp++, dp++)
 562:fltk-1.3.4-1/png/pngpread.c ****          {
 563:fltk-1.3.4-1/png/pngpread.c ****             *dp = *sp;
 564:fltk-1.3.4-1/png/pngpread.c ****          }
 565:fltk-1.3.4-1/png/pngpread.c ****       }
 566:fltk-1.3.4-1/png/pngpread.c ****    }
 567:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->save_buffer_size + png_ptr->current_buffer_size >
 568:fltk-1.3.4-1/png/pngpread.c ****        png_ptr->save_buffer_max)
 569:fltk-1.3.4-1/png/pngpread.c ****    {
 570:fltk-1.3.4-1/png/pngpread.c ****       png_size_t new_max;
 571:fltk-1.3.4-1/png/pngpread.c ****       png_bytep old_buffer;
 572:fltk-1.3.4-1/png/pngpread.c **** 
 573:fltk-1.3.4-1/png/pngpread.c ****       if (png_ptr->save_buffer_size > PNG_SIZE_MAX -
 574:fltk-1.3.4-1/png/pngpread.c ****           (png_ptr->current_buffer_size + 256))
 575:fltk-1.3.4-1/png/pngpread.c ****       {
 576:fltk-1.3.4-1/png/pngpread.c ****          png_error(png_ptr, "Potential overflow of save_buffer");
 577:fltk-1.3.4-1/png/pngpread.c ****       }
 578:fltk-1.3.4-1/png/pngpread.c **** 
 579:fltk-1.3.4-1/png/pngpread.c ****       new_max = png_ptr->save_buffer_size + png_ptr->current_buffer_size + 256;
 580:fltk-1.3.4-1/png/pngpread.c ****       old_buffer = png_ptr->save_buffer;
 581:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->save_buffer = (png_bytep)png_malloc_warn(png_ptr,
 582:fltk-1.3.4-1/png/pngpread.c ****           (png_size_t)new_max);
 583:fltk-1.3.4-1/png/pngpread.c **** 
 584:fltk-1.3.4-1/png/pngpread.c ****       if (png_ptr->save_buffer == NULL)
 585:fltk-1.3.4-1/png/pngpread.c ****       {
 586:fltk-1.3.4-1/png/pngpread.c ****          png_free(png_ptr, old_buffer);
 587:fltk-1.3.4-1/png/pngpread.c ****          old_buffer = NULL;
 588:fltk-1.3.4-1/png/pngpread.c ****          png_error(png_ptr, "Insufficient memory for save_buffer");
 589:fltk-1.3.4-1/png/pngpread.c ****       }
 590:fltk-1.3.4-1/png/pngpread.c **** 
 591:fltk-1.3.4-1/png/pngpread.c ****       memcpy(png_ptr->save_buffer, old_buffer, png_ptr->save_buffer_size);
 592:fltk-1.3.4-1/png/pngpread.c ****       png_free(png_ptr, old_buffer);
 593:fltk-1.3.4-1/png/pngpread.c ****       old_buffer = NULL;
 594:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->save_buffer_max = new_max;
 595:fltk-1.3.4-1/png/pngpread.c ****    }
 596:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->current_buffer_size)
 597:fltk-1.3.4-1/png/pngpread.c ****    {
 598:fltk-1.3.4-1/png/pngpread.c ****       memcpy(png_ptr->save_buffer + png_ptr->save_buffer_size,
 599:fltk-1.3.4-1/png/pngpread.c ****          png_ptr->current_buffer_ptr, png_ptr->current_buffer_size);
 600:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->save_buffer_size += png_ptr->current_buffer_size;
 601:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->current_buffer_size = 0;
 602:fltk-1.3.4-1/png/pngpread.c ****    }
 603:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->save_buffer_ptr = png_ptr->save_buffer;
 604:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->buffer_size = 0;
 605:fltk-1.3.4-1/png/pngpread.c **** }
 606:fltk-1.3.4-1/png/pngpread.c **** 
 607:fltk-1.3.4-1/png/pngpread.c **** void /* PRIVATE */
 608:fltk-1.3.4-1/png/pngpread.c **** png_push_restore_buffer(png_structrp png_ptr, png_bytep buffer,
 609:fltk-1.3.4-1/png/pngpread.c ****    png_size_t buffer_length)
 610:fltk-1.3.4-1/png/pngpread.c **** {
 611:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->current_buffer = buffer;
 612:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->current_buffer_size = buffer_length;
 613:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->buffer_size = buffer_length + png_ptr->save_buffer_size;
 614:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->current_buffer_ptr = png_ptr->current_buffer;
 615:fltk-1.3.4-1/png/pngpread.c **** }
 616:fltk-1.3.4-1/png/pngpread.c **** 
 617:fltk-1.3.4-1/png/pngpread.c **** void /* PRIVATE */
 618:fltk-1.3.4-1/png/pngpread.c **** png_push_read_IDAT(png_structrp png_ptr)
 619:fltk-1.3.4-1/png/pngpread.c **** {
 620:fltk-1.3.4-1/png/pngpread.c ****    if ((png_ptr->mode & PNG_HAVE_CHUNK_HEADER) == 0)
 621:fltk-1.3.4-1/png/pngpread.c ****    {
 622:fltk-1.3.4-1/png/pngpread.c ****       png_byte chunk_length[4];
 623:fltk-1.3.4-1/png/pngpread.c ****       png_byte chunk_tag[4];
 624:fltk-1.3.4-1/png/pngpread.c **** 
 625:fltk-1.3.4-1/png/pngpread.c ****       /* TODO: this code can be commoned up with the same code in push_read */
 626:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_LT(8)
 627:fltk-1.3.4-1/png/pngpread.c ****       png_push_fill_buffer(png_ptr, chunk_length, 4);
 628:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->push_length = png_get_uint_31(png_ptr, chunk_length);
 629:fltk-1.3.4-1/png/pngpread.c ****       png_reset_crc(png_ptr);
 630:fltk-1.3.4-1/png/pngpread.c ****       png_crc_read(png_ptr, chunk_tag, 4);
 631:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->chunk_name = PNG_CHUNK_FROM_STRING(chunk_tag);
 632:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->mode |= PNG_HAVE_CHUNK_HEADER;
 633:fltk-1.3.4-1/png/pngpread.c **** 
 634:fltk-1.3.4-1/png/pngpread.c ****       if (png_ptr->chunk_name != png_IDAT)
 635:fltk-1.3.4-1/png/pngpread.c ****       {
 636:fltk-1.3.4-1/png/pngpread.c ****          png_ptr->process_mode = PNG_READ_CHUNK_MODE;
 637:fltk-1.3.4-1/png/pngpread.c **** 
 638:fltk-1.3.4-1/png/pngpread.c ****          if ((png_ptr->flags & PNG_FLAG_ZSTREAM_ENDED) == 0)
 639:fltk-1.3.4-1/png/pngpread.c ****             png_error(png_ptr, "Not enough compressed data");
 640:fltk-1.3.4-1/png/pngpread.c **** 
 641:fltk-1.3.4-1/png/pngpread.c ****          return;
 642:fltk-1.3.4-1/png/pngpread.c ****       }
 643:fltk-1.3.4-1/png/pngpread.c **** 
 644:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->idat_size = png_ptr->push_length;
 645:fltk-1.3.4-1/png/pngpread.c ****    }
 646:fltk-1.3.4-1/png/pngpread.c **** 
 647:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->idat_size != 0 && png_ptr->save_buffer_size != 0)
 648:fltk-1.3.4-1/png/pngpread.c ****    {
 649:fltk-1.3.4-1/png/pngpread.c ****       png_size_t save_size = png_ptr->save_buffer_size;
 650:fltk-1.3.4-1/png/pngpread.c ****       png_uint_32 idat_size = png_ptr->idat_size;
 651:fltk-1.3.4-1/png/pngpread.c **** 
 652:fltk-1.3.4-1/png/pngpread.c ****       /* We want the smaller of 'idat_size' and 'current_buffer_size', but they
 653:fltk-1.3.4-1/png/pngpread.c ****        * are of different types and we don't know which variable has the fewest
 654:fltk-1.3.4-1/png/pngpread.c ****        * bits.  Carefully select the smaller and cast it to the type of the
 655:fltk-1.3.4-1/png/pngpread.c ****        * larger - this cannot overflow.  Do not cast in the following test - it
 656:fltk-1.3.4-1/png/pngpread.c ****        * will break on either 16 or 64 bit platforms.
 657:fltk-1.3.4-1/png/pngpread.c ****        */
 658:fltk-1.3.4-1/png/pngpread.c ****       if (idat_size < save_size)
 659:fltk-1.3.4-1/png/pngpread.c ****          save_size = (png_size_t)idat_size;
 660:fltk-1.3.4-1/png/pngpread.c **** 
 661:fltk-1.3.4-1/png/pngpread.c ****       else
 662:fltk-1.3.4-1/png/pngpread.c ****          idat_size = (png_uint_32)save_size;
 663:fltk-1.3.4-1/png/pngpread.c **** 
 664:fltk-1.3.4-1/png/pngpread.c ****       png_calculate_crc(png_ptr, png_ptr->save_buffer_ptr, save_size);
 665:fltk-1.3.4-1/png/pngpread.c **** 
 666:fltk-1.3.4-1/png/pngpread.c ****       png_process_IDAT_data(png_ptr, png_ptr->save_buffer_ptr, save_size);
 667:fltk-1.3.4-1/png/pngpread.c **** 
 668:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->idat_size -= idat_size;
 669:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->buffer_size -= save_size;
 670:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->save_buffer_size -= save_size;
 671:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->save_buffer_ptr += save_size;
 672:fltk-1.3.4-1/png/pngpread.c ****    }
 673:fltk-1.3.4-1/png/pngpread.c **** 
 674:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->idat_size != 0 && png_ptr->current_buffer_size != 0)
 675:fltk-1.3.4-1/png/pngpread.c ****    {
 676:fltk-1.3.4-1/png/pngpread.c ****       png_size_t save_size = png_ptr->current_buffer_size;
 677:fltk-1.3.4-1/png/pngpread.c ****       png_uint_32 idat_size = png_ptr->idat_size;
 678:fltk-1.3.4-1/png/pngpread.c **** 
 679:fltk-1.3.4-1/png/pngpread.c ****       /* We want the smaller of 'idat_size' and 'current_buffer_size', but they
 680:fltk-1.3.4-1/png/pngpread.c ****        * are of different types and we don't know which variable has the fewest
 681:fltk-1.3.4-1/png/pngpread.c ****        * bits.  Carefully select the smaller and cast it to the type of the
 682:fltk-1.3.4-1/png/pngpread.c ****        * larger - this cannot overflow.
 683:fltk-1.3.4-1/png/pngpread.c ****        */
 684:fltk-1.3.4-1/png/pngpread.c ****       if (idat_size < save_size)
 685:fltk-1.3.4-1/png/pngpread.c ****          save_size = (png_size_t)idat_size;
 686:fltk-1.3.4-1/png/pngpread.c **** 
 687:fltk-1.3.4-1/png/pngpread.c ****       else
 688:fltk-1.3.4-1/png/pngpread.c ****          idat_size = (png_uint_32)save_size;
 689:fltk-1.3.4-1/png/pngpread.c **** 
 690:fltk-1.3.4-1/png/pngpread.c ****       png_calculate_crc(png_ptr, png_ptr->current_buffer_ptr, save_size);
 691:fltk-1.3.4-1/png/pngpread.c **** 
 692:fltk-1.3.4-1/png/pngpread.c ****       png_process_IDAT_data(png_ptr, png_ptr->current_buffer_ptr, save_size);
 693:fltk-1.3.4-1/png/pngpread.c **** 
 694:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->idat_size -= idat_size;
 695:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->buffer_size -= save_size;
 696:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->current_buffer_size -= save_size;
 697:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->current_buffer_ptr += save_size;
 698:fltk-1.3.4-1/png/pngpread.c ****    }
 699:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->idat_size == 0)
 700:fltk-1.3.4-1/png/pngpread.c ****    {
 701:fltk-1.3.4-1/png/pngpread.c ****       PNG_PUSH_SAVE_BUFFER_IF_LT(4)
 702:fltk-1.3.4-1/png/pngpread.c ****       png_crc_finish(png_ptr, 0);
 703:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->mode &= ~PNG_HAVE_CHUNK_HEADER;
 704:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->mode |= PNG_AFTER_IDAT;
 705:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->zowner = 0;
 706:fltk-1.3.4-1/png/pngpread.c ****    }
 707:fltk-1.3.4-1/png/pngpread.c **** }
 708:fltk-1.3.4-1/png/pngpread.c **** 
 709:fltk-1.3.4-1/png/pngpread.c **** void /* PRIVATE */
 710:fltk-1.3.4-1/png/pngpread.c **** png_process_IDAT_data(png_structrp png_ptr, png_bytep buffer,
 711:fltk-1.3.4-1/png/pngpread.c ****    png_size_t buffer_length)
 712:fltk-1.3.4-1/png/pngpread.c **** {
 713:fltk-1.3.4-1/png/pngpread.c ****    /* The caller checks for a non-zero buffer length. */
 714:fltk-1.3.4-1/png/pngpread.c ****    if (!(buffer_length > 0) || buffer == NULL)
 715:fltk-1.3.4-1/png/pngpread.c ****       png_error(png_ptr, "No IDAT data (internal error)");
 716:fltk-1.3.4-1/png/pngpread.c **** 
 717:fltk-1.3.4-1/png/pngpread.c ****    /* This routine must process all the data it has been given
 718:fltk-1.3.4-1/png/pngpread.c ****     * before returning, calling the row callback as required to
 719:fltk-1.3.4-1/png/pngpread.c ****     * handle the uncompressed results.
 720:fltk-1.3.4-1/png/pngpread.c ****     */
 721:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->zstream.next_in = buffer;
 722:fltk-1.3.4-1/png/pngpread.c ****    /* TODO: WARNING: TRUNCATION ERROR: DANGER WILL ROBINSON: */
 723:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->zstream.avail_in = (uInt)buffer_length;
 724:fltk-1.3.4-1/png/pngpread.c **** 
 725:fltk-1.3.4-1/png/pngpread.c ****    /* Keep going until the decompressed data is all processed
 726:fltk-1.3.4-1/png/pngpread.c ****     * or the stream marked as finished.
 727:fltk-1.3.4-1/png/pngpread.c ****     */
 728:fltk-1.3.4-1/png/pngpread.c ****    while (png_ptr->zstream.avail_in > 0 &&
 729:fltk-1.3.4-1/png/pngpread.c ****       !(png_ptr->flags & PNG_FLAG_ZSTREAM_ENDED))
 730:fltk-1.3.4-1/png/pngpread.c ****    {
 731:fltk-1.3.4-1/png/pngpread.c ****       int ret;
 732:fltk-1.3.4-1/png/pngpread.c **** 
 733:fltk-1.3.4-1/png/pngpread.c ****       /* We have data for zlib, but we must check that zlib
 734:fltk-1.3.4-1/png/pngpread.c ****        * has someplace to put the results.  It doesn't matter
 735:fltk-1.3.4-1/png/pngpread.c ****        * if we don't expect any results -- it may be the input
 736:fltk-1.3.4-1/png/pngpread.c ****        * data is just the LZ end code.
 737:fltk-1.3.4-1/png/pngpread.c ****        */
 738:fltk-1.3.4-1/png/pngpread.c ****       if (!(png_ptr->zstream.avail_out > 0))
 739:fltk-1.3.4-1/png/pngpread.c ****       {
 740:fltk-1.3.4-1/png/pngpread.c ****          /* TODO: WARNING: TRUNCATION ERROR: DANGER WILL ROBINSON: */
 741:fltk-1.3.4-1/png/pngpread.c ****          png_ptr->zstream.avail_out = (uInt)(PNG_ROWBYTES(png_ptr->pixel_depth,
 742:fltk-1.3.4-1/png/pngpread.c ****              png_ptr->iwidth) + 1);
 743:fltk-1.3.4-1/png/pngpread.c **** 
 744:fltk-1.3.4-1/png/pngpread.c ****          png_ptr->zstream.next_out = png_ptr->row_buf;
 745:fltk-1.3.4-1/png/pngpread.c ****       }
 746:fltk-1.3.4-1/png/pngpread.c **** 
 747:fltk-1.3.4-1/png/pngpread.c ****       /* Using Z_SYNC_FLUSH here means that an unterminated
 748:fltk-1.3.4-1/png/pngpread.c ****        * LZ stream (a stream with a missing end code) can still
 749:fltk-1.3.4-1/png/pngpread.c ****        * be handled, otherwise (Z_NO_FLUSH) a future zlib
 750:fltk-1.3.4-1/png/pngpread.c ****        * implementation might defer output and therefore
 751:fltk-1.3.4-1/png/pngpread.c ****        * change the current behavior (see comments in inflate.c
 752:fltk-1.3.4-1/png/pngpread.c ****        * for why this doesn't happen at present with zlib 1.2.5).
 753:fltk-1.3.4-1/png/pngpread.c ****        */
 754:fltk-1.3.4-1/png/pngpread.c ****       ret = inflate(&png_ptr->zstream, Z_SYNC_FLUSH);
 755:fltk-1.3.4-1/png/pngpread.c **** 
 756:fltk-1.3.4-1/png/pngpread.c ****       /* Check for any failure before proceeding. */
 757:fltk-1.3.4-1/png/pngpread.c ****       if (ret != Z_OK && ret != Z_STREAM_END)
 758:fltk-1.3.4-1/png/pngpread.c ****       {
 759:fltk-1.3.4-1/png/pngpread.c ****          /* Terminate the decompression. */
 760:fltk-1.3.4-1/png/pngpread.c ****          png_ptr->flags |= PNG_FLAG_ZSTREAM_ENDED;
 761:fltk-1.3.4-1/png/pngpread.c ****          png_ptr->zowner = 0;
 762:fltk-1.3.4-1/png/pngpread.c **** 
 763:fltk-1.3.4-1/png/pngpread.c ****          /* This may be a truncated stream (missing or
 764:fltk-1.3.4-1/png/pngpread.c ****           * damaged end code).  Treat that as a warning.
 765:fltk-1.3.4-1/png/pngpread.c ****           */
 766:fltk-1.3.4-1/png/pngpread.c ****          if (png_ptr->row_number >= png_ptr->num_rows ||
 767:fltk-1.3.4-1/png/pngpread.c ****              png_ptr->pass > 6)
 768:fltk-1.3.4-1/png/pngpread.c ****             png_warning(png_ptr, "Truncated compressed data in IDAT");
 769:fltk-1.3.4-1/png/pngpread.c **** 
 770:fltk-1.3.4-1/png/pngpread.c ****          else
 771:fltk-1.3.4-1/png/pngpread.c ****             png_error(png_ptr, "Decompression error in IDAT");
 772:fltk-1.3.4-1/png/pngpread.c **** 
 773:fltk-1.3.4-1/png/pngpread.c ****          /* Skip the check on unprocessed input */
 774:fltk-1.3.4-1/png/pngpread.c ****          return;
 775:fltk-1.3.4-1/png/pngpread.c ****       }
 776:fltk-1.3.4-1/png/pngpread.c **** 
 777:fltk-1.3.4-1/png/pngpread.c ****       /* Did inflate output any data? */
 778:fltk-1.3.4-1/png/pngpread.c ****       if (png_ptr->zstream.next_out != png_ptr->row_buf)
 779:fltk-1.3.4-1/png/pngpread.c ****       {
 780:fltk-1.3.4-1/png/pngpread.c ****          /* Is this unexpected data after the last row?
 781:fltk-1.3.4-1/png/pngpread.c ****           * If it is, artificially terminate the LZ output
 782:fltk-1.3.4-1/png/pngpread.c ****           * here.
 783:fltk-1.3.4-1/png/pngpread.c ****           */
 784:fltk-1.3.4-1/png/pngpread.c ****          if (png_ptr->row_number >= png_ptr->num_rows ||
 785:fltk-1.3.4-1/png/pngpread.c ****              png_ptr->pass > 6)
 786:fltk-1.3.4-1/png/pngpread.c ****          {
 787:fltk-1.3.4-1/png/pngpread.c ****             /* Extra data. */
 788:fltk-1.3.4-1/png/pngpread.c ****             png_warning(png_ptr, "Extra compressed data in IDAT");
 789:fltk-1.3.4-1/png/pngpread.c ****             png_ptr->flags |= PNG_FLAG_ZSTREAM_ENDED;
 790:fltk-1.3.4-1/png/pngpread.c ****             png_ptr->zowner = 0;
 791:fltk-1.3.4-1/png/pngpread.c **** 
 792:fltk-1.3.4-1/png/pngpread.c ****             /* Do no more processing; skip the unprocessed
 793:fltk-1.3.4-1/png/pngpread.c ****              * input check below.
 794:fltk-1.3.4-1/png/pngpread.c ****              */
 795:fltk-1.3.4-1/png/pngpread.c ****             return;
 796:fltk-1.3.4-1/png/pngpread.c ****          }
 797:fltk-1.3.4-1/png/pngpread.c **** 
 798:fltk-1.3.4-1/png/pngpread.c ****          /* Do we have a complete row? */
 799:fltk-1.3.4-1/png/pngpread.c ****          if (png_ptr->zstream.avail_out == 0)
 800:fltk-1.3.4-1/png/pngpread.c ****             png_push_process_row(png_ptr);
 801:fltk-1.3.4-1/png/pngpread.c ****       }
 802:fltk-1.3.4-1/png/pngpread.c **** 
 803:fltk-1.3.4-1/png/pngpread.c ****       /* And check for the end of the stream. */
 804:fltk-1.3.4-1/png/pngpread.c ****       if (ret == Z_STREAM_END)
 805:fltk-1.3.4-1/png/pngpread.c ****          png_ptr->flags |= PNG_FLAG_ZSTREAM_ENDED;
 806:fltk-1.3.4-1/png/pngpread.c ****    }
 807:fltk-1.3.4-1/png/pngpread.c **** 
 808:fltk-1.3.4-1/png/pngpread.c ****    /* All the data should have been processed, if anything
 809:fltk-1.3.4-1/png/pngpread.c ****     * is left at this point we have bytes of IDAT data
 810:fltk-1.3.4-1/png/pngpread.c ****     * after the zlib end code.
 811:fltk-1.3.4-1/png/pngpread.c ****     */
 812:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->zstream.avail_in > 0)
 813:fltk-1.3.4-1/png/pngpread.c ****       png_warning(png_ptr, "Extra compression data in IDAT");
 814:fltk-1.3.4-1/png/pngpread.c **** }
 815:fltk-1.3.4-1/png/pngpread.c **** 
 816:fltk-1.3.4-1/png/pngpread.c **** void /* PRIVATE */
 817:fltk-1.3.4-1/png/pngpread.c **** png_push_process_row(png_structrp png_ptr)
 818:fltk-1.3.4-1/png/pngpread.c **** {
 819:fltk-1.3.4-1/png/pngpread.c ****    /* 1.5.6: row_info moved out of png_struct to a local here. */
 820:fltk-1.3.4-1/png/pngpread.c ****    png_row_info row_info;
 821:fltk-1.3.4-1/png/pngpread.c **** 
 822:fltk-1.3.4-1/png/pngpread.c ****    row_info.width = png_ptr->iwidth; /* NOTE: width of current interlaced row */
 823:fltk-1.3.4-1/png/pngpread.c ****    row_info.color_type = png_ptr->color_type;
 824:fltk-1.3.4-1/png/pngpread.c ****    row_info.bit_depth = png_ptr->bit_depth;
 825:fltk-1.3.4-1/png/pngpread.c ****    row_info.channels = png_ptr->channels;
 826:fltk-1.3.4-1/png/pngpread.c ****    row_info.pixel_depth = png_ptr->pixel_depth;
 827:fltk-1.3.4-1/png/pngpread.c ****    row_info.rowbytes = PNG_ROWBYTES(row_info.pixel_depth, row_info.width);
 828:fltk-1.3.4-1/png/pngpread.c **** 
 829:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_buf[0] > PNG_FILTER_VALUE_NONE)
 830:fltk-1.3.4-1/png/pngpread.c ****    {
 831:fltk-1.3.4-1/png/pngpread.c ****       if (png_ptr->row_buf[0] < PNG_FILTER_VALUE_LAST)
 832:fltk-1.3.4-1/png/pngpread.c ****          png_read_filter_row(png_ptr, &row_info, png_ptr->row_buf + 1,
 833:fltk-1.3.4-1/png/pngpread.c ****             png_ptr->prev_row + 1, png_ptr->row_buf[0]);
 834:fltk-1.3.4-1/png/pngpread.c ****       else
 835:fltk-1.3.4-1/png/pngpread.c ****          png_error(png_ptr, "bad adaptive filter value");
 836:fltk-1.3.4-1/png/pngpread.c ****    }
 837:fltk-1.3.4-1/png/pngpread.c **** 
 838:fltk-1.3.4-1/png/pngpread.c ****    /* libpng 1.5.6: the following line was copying png_ptr->rowbytes before
 839:fltk-1.3.4-1/png/pngpread.c ****     * 1.5.6, while the buffer really is this big in current versions of libpng
 840:fltk-1.3.4-1/png/pngpread.c ****     * it may not be in the future, so this was changed just to copy the
 841:fltk-1.3.4-1/png/pngpread.c ****     * interlaced row count:
 842:fltk-1.3.4-1/png/pngpread.c ****     */
 843:fltk-1.3.4-1/png/pngpread.c ****    memcpy(png_ptr->prev_row, png_ptr->row_buf, row_info.rowbytes + 1);
 844:fltk-1.3.4-1/png/pngpread.c **** 
 845:fltk-1.3.4-1/png/pngpread.c **** #ifdef PNG_READ_TRANSFORMS_SUPPORTED
 846:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->transformations != 0)
 847:fltk-1.3.4-1/png/pngpread.c ****       png_do_read_transformations(png_ptr, &row_info);
 848:fltk-1.3.4-1/png/pngpread.c **** #endif
 849:fltk-1.3.4-1/png/pngpread.c **** 
 850:fltk-1.3.4-1/png/pngpread.c ****    /* The transformed pixel depth should match the depth now in row_info. */
 851:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->transformed_pixel_depth == 0)
 852:fltk-1.3.4-1/png/pngpread.c ****    {
 853:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->transformed_pixel_depth = row_info.pixel_depth;
 854:fltk-1.3.4-1/png/pngpread.c ****       if (row_info.pixel_depth > png_ptr->maximum_pixel_depth)
 855:fltk-1.3.4-1/png/pngpread.c ****          png_error(png_ptr, "progressive row overflow");
 856:fltk-1.3.4-1/png/pngpread.c ****    }
 857:fltk-1.3.4-1/png/pngpread.c **** 
 858:fltk-1.3.4-1/png/pngpread.c ****    else if (png_ptr->transformed_pixel_depth != row_info.pixel_depth)
 859:fltk-1.3.4-1/png/pngpread.c ****       png_error(png_ptr, "internal progressive row size calculation error");
 860:fltk-1.3.4-1/png/pngpread.c **** 
 861:fltk-1.3.4-1/png/pngpread.c **** 
 862:fltk-1.3.4-1/png/pngpread.c **** #ifdef PNG_READ_INTERLACING_SUPPORTED
 863:fltk-1.3.4-1/png/pngpread.c ****    /* Expand interlaced rows to full size */
 864:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->interlaced != 0 &&
 865:fltk-1.3.4-1/png/pngpread.c ****        (png_ptr->transformations & PNG_INTERLACE) != 0)
 866:fltk-1.3.4-1/png/pngpread.c ****    {
 867:fltk-1.3.4-1/png/pngpread.c ****       if (png_ptr->pass < 6)
 868:fltk-1.3.4-1/png/pngpread.c ****          png_do_read_interlace(&row_info, png_ptr->row_buf + 1, png_ptr->pass,
 869:fltk-1.3.4-1/png/pngpread.c ****             png_ptr->transformations);
 870:fltk-1.3.4-1/png/pngpread.c **** 
 871:fltk-1.3.4-1/png/pngpread.c ****       switch (png_ptr->pass)
 872:fltk-1.3.4-1/png/pngpread.c ****       {
 873:fltk-1.3.4-1/png/pngpread.c ****          case 0:
 874:fltk-1.3.4-1/png/pngpread.c ****          {
 875:fltk-1.3.4-1/png/pngpread.c ****             int i;
 876:fltk-1.3.4-1/png/pngpread.c ****             for (i = 0; i < 8 && png_ptr->pass == 0; i++)
 877:fltk-1.3.4-1/png/pngpread.c ****             {
 878:fltk-1.3.4-1/png/pngpread.c ****                png_push_have_row(png_ptr, png_ptr->row_buf + 1);
 879:fltk-1.3.4-1/png/pngpread.c ****                png_read_push_finish_row(png_ptr); /* Updates png_ptr->pass */
 880:fltk-1.3.4-1/png/pngpread.c ****             }
 881:fltk-1.3.4-1/png/pngpread.c **** 
 882:fltk-1.3.4-1/png/pngpread.c ****             if (png_ptr->pass == 2) /* Pass 1 might be empty */
 883:fltk-1.3.4-1/png/pngpread.c ****             {
 884:fltk-1.3.4-1/png/pngpread.c ****                for (i = 0; i < 4 && png_ptr->pass == 2; i++)
 885:fltk-1.3.4-1/png/pngpread.c ****                {
 886:fltk-1.3.4-1/png/pngpread.c ****                   png_push_have_row(png_ptr, NULL);
 887:fltk-1.3.4-1/png/pngpread.c ****                   png_read_push_finish_row(png_ptr);
 888:fltk-1.3.4-1/png/pngpread.c ****                }
 889:fltk-1.3.4-1/png/pngpread.c ****             }
 890:fltk-1.3.4-1/png/pngpread.c **** 
 891:fltk-1.3.4-1/png/pngpread.c ****             if (png_ptr->pass == 4 && png_ptr->height <= 4)
 892:fltk-1.3.4-1/png/pngpread.c ****             {
 893:fltk-1.3.4-1/png/pngpread.c ****                for (i = 0; i < 2 && png_ptr->pass == 4; i++)
 894:fltk-1.3.4-1/png/pngpread.c ****                {
 895:fltk-1.3.4-1/png/pngpread.c ****                   png_push_have_row(png_ptr, NULL);
 896:fltk-1.3.4-1/png/pngpread.c ****                   png_read_push_finish_row(png_ptr);
 897:fltk-1.3.4-1/png/pngpread.c ****                }
 898:fltk-1.3.4-1/png/pngpread.c ****             }
 899:fltk-1.3.4-1/png/pngpread.c **** 
 900:fltk-1.3.4-1/png/pngpread.c ****             if (png_ptr->pass == 6 && png_ptr->height <= 4)
 901:fltk-1.3.4-1/png/pngpread.c ****             {
 902:fltk-1.3.4-1/png/pngpread.c ****                 png_push_have_row(png_ptr, NULL);
 903:fltk-1.3.4-1/png/pngpread.c ****                 png_read_push_finish_row(png_ptr);
 904:fltk-1.3.4-1/png/pngpread.c ****             }
 905:fltk-1.3.4-1/png/pngpread.c **** 
 906:fltk-1.3.4-1/png/pngpread.c ****             break;
 907:fltk-1.3.4-1/png/pngpread.c ****          }
 908:fltk-1.3.4-1/png/pngpread.c **** 
 909:fltk-1.3.4-1/png/pngpread.c ****          case 1:
 910:fltk-1.3.4-1/png/pngpread.c ****          {
 911:fltk-1.3.4-1/png/pngpread.c ****             int i;
 912:fltk-1.3.4-1/png/pngpread.c ****             for (i = 0; i < 8 && png_ptr->pass == 1; i++)
 913:fltk-1.3.4-1/png/pngpread.c ****             {
 914:fltk-1.3.4-1/png/pngpread.c ****                png_push_have_row(png_ptr, png_ptr->row_buf + 1);
 915:fltk-1.3.4-1/png/pngpread.c ****                png_read_push_finish_row(png_ptr);
 916:fltk-1.3.4-1/png/pngpread.c ****             }
 917:fltk-1.3.4-1/png/pngpread.c **** 
 918:fltk-1.3.4-1/png/pngpread.c ****             if (png_ptr->pass == 2) /* Skip top 4 generated rows */
 919:fltk-1.3.4-1/png/pngpread.c ****             {
 920:fltk-1.3.4-1/png/pngpread.c ****                for (i = 0; i < 4 && png_ptr->pass == 2; i++)
 921:fltk-1.3.4-1/png/pngpread.c ****                {
 922:fltk-1.3.4-1/png/pngpread.c ****                   png_push_have_row(png_ptr, NULL);
 923:fltk-1.3.4-1/png/pngpread.c ****                   png_read_push_finish_row(png_ptr);
 924:fltk-1.3.4-1/png/pngpread.c ****                }
 925:fltk-1.3.4-1/png/pngpread.c ****             }
 926:fltk-1.3.4-1/png/pngpread.c **** 
 927:fltk-1.3.4-1/png/pngpread.c ****             break;
 928:fltk-1.3.4-1/png/pngpread.c ****          }
 929:fltk-1.3.4-1/png/pngpread.c **** 
 930:fltk-1.3.4-1/png/pngpread.c ****          case 2:
 931:fltk-1.3.4-1/png/pngpread.c ****          {
 932:fltk-1.3.4-1/png/pngpread.c ****             int i;
 933:fltk-1.3.4-1/png/pngpread.c **** 
 934:fltk-1.3.4-1/png/pngpread.c ****             for (i = 0; i < 4 && png_ptr->pass == 2; i++)
 935:fltk-1.3.4-1/png/pngpread.c ****             {
 936:fltk-1.3.4-1/png/pngpread.c ****                png_push_have_row(png_ptr, png_ptr->row_buf + 1);
 937:fltk-1.3.4-1/png/pngpread.c ****                png_read_push_finish_row(png_ptr);
 938:fltk-1.3.4-1/png/pngpread.c ****             }
 939:fltk-1.3.4-1/png/pngpread.c **** 
 940:fltk-1.3.4-1/png/pngpread.c ****             for (i = 0; i < 4 && png_ptr->pass == 2; i++)
 941:fltk-1.3.4-1/png/pngpread.c ****             {
 942:fltk-1.3.4-1/png/pngpread.c ****                png_push_have_row(png_ptr, NULL);
 943:fltk-1.3.4-1/png/pngpread.c ****                png_read_push_finish_row(png_ptr);
 944:fltk-1.3.4-1/png/pngpread.c ****             }
 945:fltk-1.3.4-1/png/pngpread.c **** 
 946:fltk-1.3.4-1/png/pngpread.c ****             if (png_ptr->pass == 4) /* Pass 3 might be empty */
 947:fltk-1.3.4-1/png/pngpread.c ****             {
 948:fltk-1.3.4-1/png/pngpread.c ****                for (i = 0; i < 2 && png_ptr->pass == 4; i++)
 949:fltk-1.3.4-1/png/pngpread.c ****                {
 950:fltk-1.3.4-1/png/pngpread.c ****                   png_push_have_row(png_ptr, NULL);
 951:fltk-1.3.4-1/png/pngpread.c ****                   png_read_push_finish_row(png_ptr);
 952:fltk-1.3.4-1/png/pngpread.c ****                }
 953:fltk-1.3.4-1/png/pngpread.c ****             }
 954:fltk-1.3.4-1/png/pngpread.c **** 
 955:fltk-1.3.4-1/png/pngpread.c ****             break;
 956:fltk-1.3.4-1/png/pngpread.c ****          }
 957:fltk-1.3.4-1/png/pngpread.c **** 
 958:fltk-1.3.4-1/png/pngpread.c ****          case 3:
 959:fltk-1.3.4-1/png/pngpread.c ****          {
 960:fltk-1.3.4-1/png/pngpread.c ****             int i;
 961:fltk-1.3.4-1/png/pngpread.c **** 
 962:fltk-1.3.4-1/png/pngpread.c ****             for (i = 0; i < 4 && png_ptr->pass == 3; i++)
 963:fltk-1.3.4-1/png/pngpread.c ****             {
 964:fltk-1.3.4-1/png/pngpread.c ****                png_push_have_row(png_ptr, png_ptr->row_buf + 1);
 965:fltk-1.3.4-1/png/pngpread.c ****                png_read_push_finish_row(png_ptr);
 966:fltk-1.3.4-1/png/pngpread.c ****             }
 967:fltk-1.3.4-1/png/pngpread.c **** 
 968:fltk-1.3.4-1/png/pngpread.c ****             if (png_ptr->pass == 4) /* Skip top two generated rows */
 969:fltk-1.3.4-1/png/pngpread.c ****             {
 970:fltk-1.3.4-1/png/pngpread.c ****                for (i = 0; i < 2 && png_ptr->pass == 4; i++)
 971:fltk-1.3.4-1/png/pngpread.c ****                {
 972:fltk-1.3.4-1/png/pngpread.c ****                   png_push_have_row(png_ptr, NULL);
 973:fltk-1.3.4-1/png/pngpread.c ****                   png_read_push_finish_row(png_ptr);
 974:fltk-1.3.4-1/png/pngpread.c ****                }
 975:fltk-1.3.4-1/png/pngpread.c ****             }
 976:fltk-1.3.4-1/png/pngpread.c **** 
 977:fltk-1.3.4-1/png/pngpread.c ****             break;
 978:fltk-1.3.4-1/png/pngpread.c ****          }
 979:fltk-1.3.4-1/png/pngpread.c **** 
 980:fltk-1.3.4-1/png/pngpread.c ****          case 4:
 981:fltk-1.3.4-1/png/pngpread.c ****          {
 982:fltk-1.3.4-1/png/pngpread.c ****             int i;
 983:fltk-1.3.4-1/png/pngpread.c **** 
 984:fltk-1.3.4-1/png/pngpread.c ****             for (i = 0; i < 2 && png_ptr->pass == 4; i++)
 985:fltk-1.3.4-1/png/pngpread.c ****             {
 986:fltk-1.3.4-1/png/pngpread.c ****                png_push_have_row(png_ptr, png_ptr->row_buf + 1);
 987:fltk-1.3.4-1/png/pngpread.c ****                png_read_push_finish_row(png_ptr);
 988:fltk-1.3.4-1/png/pngpread.c ****             }
 989:fltk-1.3.4-1/png/pngpread.c **** 
 990:fltk-1.3.4-1/png/pngpread.c ****             for (i = 0; i < 2 && png_ptr->pass == 4; i++)
 991:fltk-1.3.4-1/png/pngpread.c ****             {
 992:fltk-1.3.4-1/png/pngpread.c ****                png_push_have_row(png_ptr, NULL);
 993:fltk-1.3.4-1/png/pngpread.c ****                png_read_push_finish_row(png_ptr);
 994:fltk-1.3.4-1/png/pngpread.c ****             }
 995:fltk-1.3.4-1/png/pngpread.c **** 
 996:fltk-1.3.4-1/png/pngpread.c ****             if (png_ptr->pass == 6) /* Pass 5 might be empty */
 997:fltk-1.3.4-1/png/pngpread.c ****             {
 998:fltk-1.3.4-1/png/pngpread.c ****                png_push_have_row(png_ptr, NULL);
 999:fltk-1.3.4-1/png/pngpread.c ****                png_read_push_finish_row(png_ptr);
1000:fltk-1.3.4-1/png/pngpread.c ****             }
1001:fltk-1.3.4-1/png/pngpread.c **** 
1002:fltk-1.3.4-1/png/pngpread.c ****             break;
1003:fltk-1.3.4-1/png/pngpread.c ****          }
1004:fltk-1.3.4-1/png/pngpread.c **** 
1005:fltk-1.3.4-1/png/pngpread.c ****          case 5:
1006:fltk-1.3.4-1/png/pngpread.c ****          {
1007:fltk-1.3.4-1/png/pngpread.c ****             int i;
1008:fltk-1.3.4-1/png/pngpread.c **** 
1009:fltk-1.3.4-1/png/pngpread.c ****             for (i = 0; i < 2 && png_ptr->pass == 5; i++)
1010:fltk-1.3.4-1/png/pngpread.c ****             {
1011:fltk-1.3.4-1/png/pngpread.c ****                png_push_have_row(png_ptr, png_ptr->row_buf + 1);
1012:fltk-1.3.4-1/png/pngpread.c ****                png_read_push_finish_row(png_ptr);
1013:fltk-1.3.4-1/png/pngpread.c ****             }
1014:fltk-1.3.4-1/png/pngpread.c **** 
1015:fltk-1.3.4-1/png/pngpread.c ****             if (png_ptr->pass == 6) /* Skip top generated row */
1016:fltk-1.3.4-1/png/pngpread.c ****             {
1017:fltk-1.3.4-1/png/pngpread.c ****                png_push_have_row(png_ptr, NULL);
1018:fltk-1.3.4-1/png/pngpread.c ****                png_read_push_finish_row(png_ptr);
1019:fltk-1.3.4-1/png/pngpread.c ****             }
1020:fltk-1.3.4-1/png/pngpread.c **** 
1021:fltk-1.3.4-1/png/pngpread.c ****             break;
1022:fltk-1.3.4-1/png/pngpread.c ****          }
1023:fltk-1.3.4-1/png/pngpread.c **** 
1024:fltk-1.3.4-1/png/pngpread.c ****          default:
1025:fltk-1.3.4-1/png/pngpread.c ****          case 6:
1026:fltk-1.3.4-1/png/pngpread.c ****          {
1027:fltk-1.3.4-1/png/pngpread.c ****             png_push_have_row(png_ptr, png_ptr->row_buf + 1);
1028:fltk-1.3.4-1/png/pngpread.c ****             png_read_push_finish_row(png_ptr);
1029:fltk-1.3.4-1/png/pngpread.c **** 
1030:fltk-1.3.4-1/png/pngpread.c ****             if (png_ptr->pass != 6)
1031:fltk-1.3.4-1/png/pngpread.c ****                break;
1032:fltk-1.3.4-1/png/pngpread.c **** 
1033:fltk-1.3.4-1/png/pngpread.c ****             png_push_have_row(png_ptr, NULL);
1034:fltk-1.3.4-1/png/pngpread.c ****             png_read_push_finish_row(png_ptr);
1035:fltk-1.3.4-1/png/pngpread.c ****          }
1036:fltk-1.3.4-1/png/pngpread.c ****       }
1037:fltk-1.3.4-1/png/pngpread.c ****    }
1038:fltk-1.3.4-1/png/pngpread.c ****    else
1039:fltk-1.3.4-1/png/pngpread.c ****    {
1040:fltk-1.3.4-1/png/pngpread.c ****       png_push_have_row(png_ptr, png_ptr->row_buf + 1);
1041:fltk-1.3.4-1/png/pngpread.c ****       png_read_push_finish_row(png_ptr);
1042:fltk-1.3.4-1/png/pngpread.c ****    }
1043:fltk-1.3.4-1/png/pngpread.c **** }
1044:fltk-1.3.4-1/png/pngpread.c **** 
1045:fltk-1.3.4-1/png/pngpread.c **** void /* PRIVATE */
1046:fltk-1.3.4-1/png/pngpread.c **** png_read_push_finish_row(png_structrp png_ptr)
 146              		.loc 1 1046 0
 147              		.cfi_startproc
 148              	.LVL14:
 149 0000 53       		pushq	%rbx
 150              		.cfi_def_cfa_offset 16
 151              		.cfi_offset 3, -16
 152              	.LBB125:
 153              	.LBB126:
  54:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  55:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  56:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  57:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memmove (void *__dest, const void *__src, size_t __len))
  58:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  59:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  60:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  61:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  62:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifdef __USE_GNU
  63:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  64:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
  65:/usr/include/x86_64-linux-gnu/bits/string3.h **** 		size_t __len))
  66:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  67:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
  68:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  69:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  70:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  71:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  72:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* The first two tests here help to catch a somewhat common problem
  73:/usr/include/x86_64-linux-gnu/bits/string3.h ****    where the second and third parameter are transposed.  This is
  74:/usr/include/x86_64-linux-gnu/bits/string3.h ****    especially problematic if the intended fill value is zero.  In this
  75:/usr/include/x86_64-linux-gnu/bits/string3.h ****    case no work is done at all.  We detect these problems by referring
  76:/usr/include/x86_64-linux-gnu/bits/string3.h ****    non-existing functions.  */
  77:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  78:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memset (void *__dest, int __ch, size_t __len))
  79:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  80:/usr/include/x86_64-linux-gnu/bits/string3.h ****   /* GCC-5.0 and newer implements these checks in the compiler, so we don't
  81:/usr/include/x86_64-linux-gnu/bits/string3.h ****      need them here.  */
  82:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  83:/usr/include/x86_64-linux-gnu/bits/string3.h ****   if (__builtin_constant_p (__len) && __len == 0
  84:/usr/include/x86_64-linux-gnu/bits/string3.h ****       && (!__builtin_constant_p (__ch) || __ch != 0))
  85:/usr/include/x86_64-linux-gnu/bits/string3.h ****     {
  86:/usr/include/x86_64-linux-gnu/bits/string3.h ****       __warn_memset_zero_len ();
  87:/usr/include/x86_64-linux-gnu/bits/string3.h ****       return __dest;
  88:/usr/include/x86_64-linux-gnu/bits/string3.h ****     }
  89:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  90:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 154              		.loc 2 90 0
 155 0001 488B8708 		movq	520(%rdi), %rax
 155      020000
 156              	.LBE126:
 157              	.LBE125:
 158              		.loc 1 1046 0
 159 0008 4889FB   		movq	%rdi, %rbx
1047:fltk-1.3.4-1/png/pngpread.c **** {
1048:fltk-1.3.4-1/png/pngpread.c ****    /* Arrays to facilitate easy interlacing - use pass (0 - 6) as index */
1049:fltk-1.3.4-1/png/pngpread.c **** 
1050:fltk-1.3.4-1/png/pngpread.c ****    /* Start of interlace block */
1051:fltk-1.3.4-1/png/pngpread.c ****    static PNG_CONST png_byte png_pass_start[] = {0, 4, 0, 2, 0, 1, 0};
1052:fltk-1.3.4-1/png/pngpread.c **** 
1053:fltk-1.3.4-1/png/pngpread.c ****    /* Offset to next interlace block */
1054:fltk-1.3.4-1/png/pngpread.c ****    static PNG_CONST png_byte png_pass_inc[] = {8, 8, 4, 4, 2, 2, 1};
1055:fltk-1.3.4-1/png/pngpread.c **** 
1056:fltk-1.3.4-1/png/pngpread.c ****    /* Start of interlace block in the y direction */
1057:fltk-1.3.4-1/png/pngpread.c ****    static PNG_CONST png_byte png_pass_ystart[] = {0, 0, 4, 0, 2, 0, 1};
1058:fltk-1.3.4-1/png/pngpread.c **** 
1059:fltk-1.3.4-1/png/pngpread.c ****    /* Offset to next interlace block in the y direction */
1060:fltk-1.3.4-1/png/pngpread.c ****    static PNG_CONST png_byte png_pass_yinc[] = {8, 8, 8, 4, 4, 2, 2};
1061:fltk-1.3.4-1/png/pngpread.c **** 
1062:fltk-1.3.4-1/png/pngpread.c ****    /* Height of interlace block.  This is not currently used - if you need
1063:fltk-1.3.4-1/png/pngpread.c ****     * it, uncomment it here and in png.h
1064:fltk-1.3.4-1/png/pngpread.c ****    static PNG_CONST png_byte png_pass_height[] = {8, 8, 4, 4, 2, 2, 1};
1065:fltk-1.3.4-1/png/pngpread.c ****    */
1066:fltk-1.3.4-1/png/pngpread.c **** #endif
1067:fltk-1.3.4-1/png/pngpread.c **** 
1068:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->row_number++;
1069:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
1070:fltk-1.3.4-1/png/pngpread.c ****       return;
1071:fltk-1.3.4-1/png/pngpread.c **** 
1072:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->interlaced != 0)
1073:fltk-1.3.4-1/png/pngpread.c ****    {
1074:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->row_number = 0;
 160              		.loc 1 1074 0
 161 000b C7871402 		movl	$0, 532(%rdi)
 161      00000000 
 161      0000
 162              	.LVL15:
 163              	.LBB128:
 164              	.LBB127:
 165              		.loc 2 90 0
 166 0015 488BBF20 		movq	544(%rdi), %rdi
 166      020000
 167              	.LVL16:
 168 001c 31F6     		xorl	%esi, %esi
 169 001e 488D5001 		leaq	1(%rax), %rdx
 170              	.LVL17:
 171 0022 E8000000 		call	memset
 171      00
 172              	.LVL18:
 173 0027 440FB683 		movzbl	629(%rbx), %r8d
 173      75020000 
 174 002f 90       		.p2align 4,,10
 175              		.p2align 3
 176              	.L33:
 177              	.LBE127:
 178              	.LBE128:
1075:fltk-1.3.4-1/png/pngpread.c ****       memset(png_ptr->prev_row, 0, png_ptr->rowbytes + 1);
1076:fltk-1.3.4-1/png/pngpread.c **** 
1077:fltk-1.3.4-1/png/pngpread.c ****       do
1078:fltk-1.3.4-1/png/pngpread.c ****       {
1079:fltk-1.3.4-1/png/pngpread.c ****          png_ptr->pass++;
 179              		.loc 1 1079 0
 180 0030 418D4001 		leal	1(%r8), %eax
1080:fltk-1.3.4-1/png/pngpread.c ****          if ((png_ptr->pass == 1 && png_ptr->width < 5) ||
 181              		.loc 1 1080 0
 182 0034 3C01     		cmpb	$1, %al
 183 0036 7428     		je	.L36
 184 0038 3C03     		cmpb	$3, %al
 185 003a 0F84D000 		je	.L37
 185      0000
1081:fltk-1.3.4-1/png/pngpread.c ****              (png_ptr->pass == 3 && png_ptr->width < 3) ||
 186              		.loc 1 1081 0
 187 0040 3C05     		cmpb	$5, %al
 188 0042 0F84A000 		je	.L38
 188      0000
1082:fltk-1.3.4-1/png/pngpread.c ****              (png_ptr->pass == 5 && png_ptr->width < 2))
1083:fltk-1.3.4-1/png/pngpread.c ****             png_ptr->pass++;
1084:fltk-1.3.4-1/png/pngpread.c **** 
1085:fltk-1.3.4-1/png/pngpread.c ****          if (png_ptr->pass > 7)
 189              		.loc 1 1085 0
 190 0048 3C07     		cmpb	$7, %al
 191 004a 0F86B400 		jbe	.L27
 191      0000
 192              	.L39:
1086:fltk-1.3.4-1/png/pngpread.c ****             png_ptr->pass--;
 193              		.loc 1 1086 0
 194 0050 83E801   		subl	$1, %eax
 195              	.L28:
 196 0053 88837502 		movb	%al, 629(%rbx)
 196      0000
1087:fltk-1.3.4-1/png/pngpread.c **** 
1088:fltk-1.3.4-1/png/pngpread.c ****          if (png_ptr->pass >= 7)
1089:fltk-1.3.4-1/png/pngpread.c ****             break;
1090:fltk-1.3.4-1/png/pngpread.c **** 
1091:fltk-1.3.4-1/png/pngpread.c ****          png_ptr->iwidth = (png_ptr->width +
1092:fltk-1.3.4-1/png/pngpread.c ****              png_pass_inc[png_ptr->pass] - 1 -
1093:fltk-1.3.4-1/png/pngpread.c ****              png_pass_start[png_ptr->pass]) /
1094:fltk-1.3.4-1/png/pngpread.c ****              png_pass_inc[png_ptr->pass];
1095:fltk-1.3.4-1/png/pngpread.c **** 
1096:fltk-1.3.4-1/png/pngpread.c ****          if ((png_ptr->transformations & PNG_INTERLACE) != 0)
1097:fltk-1.3.4-1/png/pngpread.c ****             break;
1098:fltk-1.3.4-1/png/pngpread.c **** 
1099:fltk-1.3.4-1/png/pngpread.c ****          png_ptr->num_rows = (png_ptr->height +
1100:fltk-1.3.4-1/png/pngpread.c ****              png_pass_yinc[png_ptr->pass] - 1 -
1101:fltk-1.3.4-1/png/pngpread.c ****              png_pass_ystart[png_ptr->pass]) /
1102:fltk-1.3.4-1/png/pngpread.c ****              png_pass_yinc[png_ptr->pass];
1103:fltk-1.3.4-1/png/pngpread.c **** 
1104:fltk-1.3.4-1/png/pngpread.c ****       } while (png_ptr->iwidth == 0 || png_ptr->num_rows == 0);
1105:fltk-1.3.4-1/png/pngpread.c ****    }
1106:fltk-1.3.4-1/png/pngpread.c **** }
 197              		.loc 1 1106 0
 198 0059 5B       		popq	%rbx
 199              		.cfi_remember_state
 200              		.cfi_def_cfa_offset 8
 201              	.LVL19:
 202 005a C3       		ret
 203              	.LVL20:
 204 005b 0F1F4400 		.p2align 4,,10
 204      00
 205              		.p2align 3
 206              	.L36:
 207              		.cfi_restore_state
1080:fltk-1.3.4-1/png/pngpread.c ****              (png_ptr->pass == 3 && png_ptr->width < 3) ||
 208              		.loc 1 1080 0
 209 0060 83BBF801 		cmpl	$4, 504(%rbx)
 209      000004
 210 0067 0F868B00 		jbe	.L22
 210      0000
 211 006d 41B80100 		movl	$1, %r8d
 211      0000
 212              	.L23:
1092:fltk-1.3.4-1/png/pngpread.c ****              png_pass_start[png_ptr->pass]) /
 213              		.loc 1 1092 0
 214 0073 410FB6F0 		movzbl	%r8b, %esi
1093:fltk-1.3.4-1/png/pngpread.c ****              png_pass_inc[png_ptr->pass];
 215              		.loc 1 1093 0
 216 0077 8B83F801 		movl	504(%rbx), %eax
 216      0000
1091:fltk-1.3.4-1/png/pngpread.c ****              png_pass_inc[png_ptr->pass] - 1 -
 217              		.loc 1 1091 0
 218 007d 0FB68E00 		movzbl	png_pass_inc.6882(%rsi), %ecx
 218      000000
1093:fltk-1.3.4-1/png/pngpread.c ****              png_pass_inc[png_ptr->pass];
 219              		.loc 1 1093 0
 220 0084 0FB69600 		movzbl	png_pass_start.6881(%rsi), %edx
 220      000000
 221 008b 8D4401FF 		leal	-1(%rcx,%rax), %eax
 222 008f 29D0     		subl	%edx, %eax
 223 0091 31D2     		xorl	%edx, %edx
 224 0093 F7F1     		divl	%ecx
1096:fltk-1.3.4-1/png/pngpread.c ****             break;
 225              		.loc 1 1096 0
 226 0095 F6833401 		testb	$2, 308(%rbx)
 226      000002
1093:fltk-1.3.4-1/png/pngpread.c ****              png_pass_inc[png_ptr->pass];
 227              		.loc 1 1093 0
 228 009c 89C1     		movl	%eax, %ecx
1091:fltk-1.3.4-1/png/pngpread.c ****              png_pass_inc[png_ptr->pass] - 1 -
 229              		.loc 1 1091 0
 230 009e 89831002 		movl	%eax, 528(%rbx)
 230      0000
1096:fltk-1.3.4-1/png/pngpread.c ****             break;
 231              		.loc 1 1096 0
 232 00a4 7534     		jne	.L35
1099:fltk-1.3.4-1/png/pngpread.c ****              png_pass_yinc[png_ptr->pass] - 1 -
 233              		.loc 1 1099 0
 234 00a6 0FB6BE00 		movzbl	png_pass_yinc.6884(%rsi), %edi
 234      000000
1101:fltk-1.3.4-1/png/pngpread.c ****              png_pass_yinc[png_ptr->pass];
 235              		.loc 1 1101 0
 236 00ad 8B83FC01 		movl	508(%rbx), %eax
 236      0000
 237 00b3 0FB69600 		movzbl	png_pass_ystart.6883(%rsi), %edx
 237      000000
 238 00ba 8D4407FF 		leal	-1(%rdi,%rax), %eax
 239 00be 29D0     		subl	%edx, %eax
 240 00c0 31D2     		xorl	%edx, %edx
 241 00c2 F7F7     		divl	%edi
1104:fltk-1.3.4-1/png/pngpread.c ****    }
 242              		.loc 1 1104 0
 243 00c4 85C0     		testl	%eax, %eax
1099:fltk-1.3.4-1/png/pngpread.c ****              png_pass_yinc[png_ptr->pass] - 1 -
 244              		.loc 1 1099 0
 245 00c6 89830002 		movl	%eax, 512(%rbx)
 245      0000
1104:fltk-1.3.4-1/png/pngpread.c ****    }
 246              		.loc 1 1104 0
 247 00cc 0F845EFF 		je	.L33
 247      FFFF
 248 00d2 85C9     		testl	%ecx, %ecx
 249 00d4 0F8456FF 		je	.L33
 249      FFFF
 250              	.L35:
 251 00da 44888375 		movb	%r8b, 629(%rbx)
 251      020000
 252              		.loc 1 1106 0
 253 00e1 5B       		popq	%rbx
 254              		.cfi_remember_state
 255              		.cfi_def_cfa_offset 8
 256              	.LVL21:
 257 00e2 C3       		ret
 258              	.LVL22:
 259              		.p2align 4,,10
 260 00e3 0F1F4400 		.p2align 3
 260      00
 261              	.L38:
 262              		.cfi_restore_state
1082:fltk-1.3.4-1/png/pngpread.c ****             png_ptr->pass++;
 263              		.loc 1 1082 0
 264 00e8 83BBF801 		cmpl	$1, 504(%rbx)
 264      000001
 265 00ef 7728     		ja	.L32
 266              		.p2align 4,,10
 267 00f1 0F1F8000 		.p2align 3
 267      000000
 268              	.L22:
1083:fltk-1.3.4-1/png/pngpread.c **** 
 269              		.loc 1 1083 0
 270 00f8 418D4002 		leal	2(%r8), %eax
1085:fltk-1.3.4-1/png/pngpread.c ****             png_ptr->pass--;
 271              		.loc 1 1085 0
 272 00fc 3C07     		cmpb	$7, %al
 273 00fe 0F874CFF 		ja	.L39
 273      FFFF
 274              	.L27:
1088:fltk-1.3.4-1/png/pngpread.c ****             break;
 275              		.loc 1 1088 0
 276 0104 3C06     		cmpb	$6, %al
 277 0106 7611     		jbe	.L32
 278 0108 E946FFFF 		jmp	.L28
 278      FF
 279 010d 0F1F00   		.p2align 4,,10
 280              		.p2align 3
 281              	.L37:
1081:fltk-1.3.4-1/png/pngpread.c ****              (png_ptr->pass == 5 && png_ptr->width < 2))
 282              		.loc 1 1081 0
 283 0110 83BBF801 		cmpl	$2, 504(%rbx)
 283      000002
 284 0117 76DF     		jbe	.L22
 285              	.L32:
1088:fltk-1.3.4-1/png/pngpread.c ****             break;
 286              		.loc 1 1088 0
 287 0119 4189C0   		movl	%eax, %r8d
 288 011c E952FFFF 		jmp	.L23
 288      FF
 289              		.cfi_endproc
 290              	.LFE78:
 292              		.section	.text.unlikely.png_read_push_finish_row.part.1
 293              	.LCOLDE1:
 294              		.section	.text.png_read_push_finish_row.part.1
 295              	.LHOTE1:
 296              		.section	.rodata.str1.8,"aMS",@progbits,1
 297              		.align 8
 298              	.LC2:
 299 0000 706E675F 		.string	"png_process_data_skip called inside png_process_data"
 299      70726F63 
 299      6573735F 
 299      64617461 
 299      5F736B69 
 300 0035 000000   		.align 8
 301              	.LC3:
 302 0038 706E675F 		.string	"png_process_data_skip called with saved data"
 302      70726F63 
 302      6573735F 
 302      64617461 
 302      5F736B69 
 303              		.section	.text.unlikely.png_process_data_skip,"ax",@progbits
 304              	.LCOLDB4:
 305              		.section	.text.png_process_data_skip,"ax",@progbits
 306              	.LHOTB4:
 307              		.p2align 4,,15
 308              		.globl	png_process_data_skip
 310              	png_process_data_skip:
 311              	.LFB58:
  80:fltk-1.3.4-1/png/pngpread.c ****    png_uint_32 remaining = 0;
 312              		.loc 1 80 0
 313              		.cfi_startproc
 314              	.LVL23:
 315 0000 4883EC08 		subq	$8, %rsp
 316              		.cfi_def_cfa_offset 16
  81:fltk-1.3.4-1/png/pngpread.c **** 
 317              		.loc 1 81 0
 318 0004 31C0     		xorl	%eax, %eax
  83:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->skip_length > 0)
 319              		.loc 1 83 0
 320 0006 4885FF   		testq	%rdi, %rdi
 321 0009 7409     		je	.L41
  83:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->skip_length > 0)
 322              		.loc 1 83 0 is_stmt 0 discriminator 1
 323 000b 83BF8003 		cmpl	$3, 896(%rdi)
 323      000003
 324 0012 740C     		je	.L50
 325              	.L41:
 326              	.LVL24:
 107:fltk-1.3.4-1/png/pngpread.c **** 
 327              		.loc 1 107 0 is_stmt 1
 328 0014 4883C408 		addq	$8, %rsp
 329              		.cfi_remember_state
 330              		.cfi_def_cfa_offset 8
 331 0018 C3       		ret
 332              	.LVL25:
 333 0019 0F1F8000 		.p2align 4,,10
 333      000000
 334              		.p2align 3
 335              	.L50:
 336              		.cfi_restore_state
  84:fltk-1.3.4-1/png/pngpread.c ****    {
 337              		.loc 1 84 0 discriminator 2
 338 0020 8B875C03 		movl	860(%rdi), %eax
 338      0000
  83:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->skip_length > 0)
 339              		.loc 1 83 0 discriminator 2
 340 0026 85C0     		testl	%eax, %eax
 341 0028 74EA     		je	.L41
  89:fltk-1.3.4-1/png/pngpread.c ****          png_error(png_ptr,
 342              		.loc 1 89 0
 343 002a 4883BF70 		cmpq	$0, 880(%rdi)
 343      03000000 
 344 0032 7523     		jne	.L51
  98:fltk-1.3.4-1/png/pngpread.c ****          png_error(png_ptr, "png_process_data_skip called with saved data");
 345              		.loc 1 98 0
 346 0034 4883BF60 		cmpq	$0, 864(%rdi)
 346      03000000 
 347 003c 7523     		jne	.L52
 348              	.LVL26:
 102:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->process_mode = PNG_READ_CHUNK_MODE;
 349              		.loc 1 102 0
 350 003e C7875C03 		movl	$0, 860(%rdi)
 350      00000000 
 350      0000
 103:fltk-1.3.4-1/png/pngpread.c ****    }
 351              		.loc 1 103 0
 352 0048 C7878003 		movl	$1, 896(%rdi)
 352      00000100 
 352      0000
 107:fltk-1.3.4-1/png/pngpread.c **** 
 353              		.loc 1 107 0
 354 0052 4883C408 		addq	$8, %rsp
 355              		.cfi_remember_state
 356              		.cfi_def_cfa_offset 8
 357 0056 C3       		ret
 358              	.LVL27:
 359              	.L51:
 360              		.cfi_restore_state
  90:fltk-1.3.4-1/png/pngpread.c ****             "png_process_data_skip called inside png_process_data");
 361              		.loc 1 90 0
 362 0057 BE000000 		movl	$.LC2, %esi
 362      00
 363 005c E8000000 		call	png_error
 363      00
 364              	.LVL28:
 365              	.L52:
  99:fltk-1.3.4-1/png/pngpread.c **** 
 366              		.loc 1 99 0
 367 0061 BE000000 		movl	$.LC3, %esi
 367      00
 368 0066 E8000000 		call	png_error
 368      00
 369              	.LVL29:
 370              		.cfi_endproc
 371              	.LFE58:
 373              		.section	.text.unlikely.png_process_data_skip
 374              	.LCOLDE4:
 375              		.section	.text.png_process_data_skip
 376              	.LHOTE4:
 377              		.section	.rodata.str1.1,"aMS",@progbits,1
 378              	.LC5:
 379 0000 4E6F7420 		.string	"Not a PNG file"
 379      6120504E 
 379      47206669 
 379      6C6500
 380              		.section	.rodata.str1.8
 381 0065 000000   		.align 8
 382              	.LC6:
 383 0068 504E4720 		.string	"PNG file corrupted by ASCII conversion"
 383      66696C65 
 383      20636F72 
 383      72757074 
 383      65642062 
 384              		.section	.text.unlikely.png_push_read_sig,"ax",@progbits
 385              	.LCOLDB7:
 386              		.section	.text.png_push_read_sig,"ax",@progbits
 387              	.LHOTB7:
 388              		.p2align 4,,15
 389              		.globl	png_push_read_sig
 391              	png_push_read_sig:
 392              	.LFB60:
 160:fltk-1.3.4-1/png/pngpread.c ****    png_size_t num_checked = png_ptr->sig_bytes, /* SAFE, does not exceed 8 */ 
 393              		.loc 1 160 0
 394              		.cfi_startproc
 395              	.LVL30:
 396 0000 4155     		pushq	%r13
 397              		.cfi_def_cfa_offset 16
 398              		.cfi_offset 13, -16
 399 0002 4154     		pushq	%r12
 400              		.cfi_def_cfa_offset 24
 401              		.cfi_offset 12, -24
 402 0004 4989F4   		movq	%rsi, %r12
 403 0007 55       		pushq	%rbp
 404              		.cfi_def_cfa_offset 32
 405              		.cfi_offset 6, -32
 406 0008 53       		pushq	%rbx
 407              		.cfi_def_cfa_offset 40
 408              		.cfi_offset 3, -40
 162:fltk-1.3.4-1/png/pngpread.c **** 
 409              		.loc 1 162 0
 410 0009 BB080000 		movl	$8, %ebx
 410      00
 160:fltk-1.3.4-1/png/pngpread.c ****    png_size_t num_checked = png_ptr->sig_bytes, /* SAFE, does not exceed 8 */ 
 411              		.loc 1 160 0
 412 000e 4889FD   		movq	%rdi, %rbp
 413 0011 4883EC08 		subq	$8, %rsp
 414              		.cfi_def_cfa_offset 48
 161:fltk-1.3.4-1/png/pngpread.c ****              num_to_check = 8 - num_checked;
 415              		.loc 1 161 0
 416 0015 440FB6AF 		movzbl	637(%rdi), %r13d
 416      7D020000 
 417              	.LVL31:
 164:fltk-1.3.4-1/png/pngpread.c ****    {
 418              		.loc 1 164 0
 419 001d 488B9770 		movq	880(%rdi), %rdx
 419      030000
 162:fltk-1.3.4-1/png/pngpread.c **** 
 420              		.loc 1 162 0
 421 0024 4C29EB   		subq	%r13, %rbx
 422              	.LVL32:
 169:fltk-1.3.4-1/png/pngpread.c ****        num_to_check);
 423              		.loc 1 169 0
 424 0027 4A8D742E 		leaq	44(%rsi,%r13), %rsi
 424      2C
 425              	.LVL33:
 426 002c 4839D3   		cmpq	%rdx, %rbx
 427 002f 480F47DA 		cmova	%rdx, %rbx
 428              	.LVL34:
 173:fltk-1.3.4-1/png/pngpread.c ****    {
 429              		.loc 1 173 0
 430 0033 4983C42C 		addq	$44, %r12
 431              	.LVL35:
 169:fltk-1.3.4-1/png/pngpread.c ****        num_to_check);
 432              		.loc 1 169 0
 433 0037 4889DA   		movq	%rbx, %rdx
 434 003a E8000000 		call	png_push_fill_buffer
 434      00
 435              	.LVL36:
 171:fltk-1.3.4-1/png/pngpread.c **** 
 436              		.loc 1 171 0
 437 003f 009D7D02 		addb	%bl, 637(%rbp)
 437      0000
 173:fltk-1.3.4-1/png/pngpread.c ****    {
 438              		.loc 1 173 0
 439 0045 4889DA   		movq	%rbx, %rdx
 440 0048 4C89EE   		movq	%r13, %rsi
 441 004b 4C89E7   		movq	%r12, %rdi
 442 004e E8000000 		call	png_sig_cmp
 442      00
 443              	.LVL37:
 444 0053 85C0     		testl	%eax, %eax
 445 0055 7429     		je	.L54
 175:fltk-1.3.4-1/png/pngpread.c ****           png_sig_cmp(info_ptr->signature, num_checked, num_to_check - 4))
 446              		.loc 1 175 0
 447 0057 4983FD03 		cmpq	$3, %r13
 448 005b 7713     		ja	.L55
 176:fltk-1.3.4-1/png/pngpread.c ****          png_error(png_ptr, "Not a PNG file");
 449              		.loc 1 176 0 discriminator 1
 450 005d 488D53FC 		leaq	-4(%rbx), %rdx
 451 0061 4C89EE   		movq	%r13, %rsi
 452 0064 4C89E7   		movq	%r12, %rdi
 453 0067 E8000000 		call	png_sig_cmp
 453      00
 454              	.LVL38:
 175:fltk-1.3.4-1/png/pngpread.c ****           png_sig_cmp(info_ptr->signature, num_checked, num_to_check - 4))
 455              		.loc 1 175 0 discriminator 1
 456 006c 85C0     		testl	%eax, %eax
 457 006e 7530     		jne	.L61
 458              	.L55:
 180:fltk-1.3.4-1/png/pngpread.c ****    }
 459              		.loc 1 180 0
 460 0070 BE000000 		movl	$.LC6, %esi
 460      00
 461 0075 4889EF   		movq	%rbp, %rdi
 462 0078 E8000000 		call	png_error
 462      00
 463              	.LVL39:
 464 007d 0F1F00   		.p2align 4,,10
 465              		.p2align 3
 466              	.L54:
 467              	.LBB131:
 468              	.LBB132:
 184:fltk-1.3.4-1/png/pngpread.c ****       {
 469              		.loc 1 184 0
 470 0080 80BD7D02 		cmpb	$7, 637(%rbp)
 470      000007
 471 0087 760A     		jbe	.L53
 186:fltk-1.3.4-1/png/pngpread.c ****       }
 472              		.loc 1 186 0
 473 0089 C7858003 		movl	$1, 896(%rbp)
 473      00000100 
 473      0000
 474              	.LVL40:
 475              	.L53:
 476              	.LBE132:
 477              	.LBE131:
 189:fltk-1.3.4-1/png/pngpread.c **** 
 478              		.loc 1 189 0
 479 0093 4883C408 		addq	$8, %rsp
 480              		.cfi_remember_state
 481              		.cfi_def_cfa_offset 40
 482 0097 5B       		popq	%rbx
 483              		.cfi_def_cfa_offset 32
 484              	.LVL41:
 485 0098 5D       		popq	%rbp
 486              		.cfi_def_cfa_offset 24
 487              	.LVL42:
 488 0099 415C     		popq	%r12
 489              		.cfi_def_cfa_offset 16
 490              	.LVL43:
 491 009b 415D     		popq	%r13
 492              		.cfi_def_cfa_offset 8
 493              	.LVL44:
 494 009d C3       		ret
 495              	.LVL45:
 496 009e 6690     		.p2align 4,,10
 497              		.p2align 3
 498              	.L61:
 499              		.cfi_restore_state
 177:fltk-1.3.4-1/png/pngpread.c **** 
 500              		.loc 1 177 0
 501 00a0 BE000000 		movl	$.LC5, %esi
 501      00
 502 00a5 4889EF   		movq	%rbp, %rdi
 503 00a8 E8000000 		call	png_error
 503      00
 504              	.LVL46:
 505              		.cfi_endproc
 506              	.LFE60:
 508              		.section	.text.unlikely.png_push_read_sig
 509              	.LCOLDE7:
 510              		.section	.text.png_push_read_sig
 511              	.LHOTE7:
 512              		.section	.text.unlikely.png_push_crc_skip,"ax",@progbits
 513              	.LCOLDB8:
 514              		.section	.text.png_push_crc_skip,"ax",@progbits
 515              	.LHOTB8:
 516              		.p2align 4,,15
 517              		.globl	png_push_crc_skip
 519              	png_push_crc_skip:
 520              	.LFB62:
 444:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->process_mode = PNG_SKIP_MODE;
 521              		.loc 1 444 0
 522              		.cfi_startproc
 523              	.LVL47:
 445:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->skip_length = skip;
 524              		.loc 1 445 0
 525 0000 C7878003 		movl	$3, 896(%rdi)
 525      00000300 
 525      0000
 446:fltk-1.3.4-1/png/pngpread.c **** }
 526              		.loc 1 446 0
 527 000a 89B75C03 		movl	%esi, 860(%rdi)
 527      0000
 528 0010 C3       		ret
 529              		.cfi_endproc
 530              	.LFE62:
 532              		.section	.text.unlikely.png_push_crc_skip
 533              	.LCOLDE8:
 534              		.section	.text.png_push_crc_skip
 535              	.LHOTE8:
 536              		.section	.rodata.str1.8
 537 008f 00       		.align 8
 538              	.LC9:
 539 0090 506F7465 		.string	"Potential overflow of save_buffer"
 539      6E746961 
 539      6C206F76 
 539      6572666C 
 539      6F77206F 
 540 00b2 00000000 		.align 8
 540      0000
 541              	.LC10:
 542 00b8 496E7375 		.string	"Insufficient memory for save_buffer"
 542      66666963 
 542      69656E74 
 542      206D656D 
 542      6F727920 
 543              		.section	.text.unlikely.png_push_save_buffer,"ax",@progbits
 544              	.LCOLDB11:
 545              		.section	.text.png_push_save_buffer,"ax",@progbits
 546              	.LHOTB11:
 547              		.p2align 4,,15
 548              		.globl	png_push_save_buffer
 550              	png_push_save_buffer:
 551              	.LFB65:
 550:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->save_buffer_size != 0)
 552              		.loc 1 550 0
 553              		.cfi_startproc
 554              	.LVL48:
 555 0000 4154     		pushq	%r12
 556              		.cfi_def_cfa_offset 16
 557              		.cfi_offset 12, -16
 558 0002 55       		pushq	%rbp
 559              		.cfi_def_cfa_offset 24
 560              		.cfi_offset 6, -24
 561 0003 53       		pushq	%rbx
 562              		.cfi_def_cfa_offset 32
 563              		.cfi_offset 3, -32
 551:fltk-1.3.4-1/png/pngpread.c ****    {
 564              		.loc 1 551 0
 565 0004 488B8F60 		movq	864(%rdi), %rcx
 565      030000
 550:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->save_buffer_size != 0)
 566              		.loc 1 550 0
 567 000b 4889FB   		movq	%rdi, %rbx
 551:fltk-1.3.4-1/png/pngpread.c ****    {
 568              		.loc 1 551 0
 569 000e 4885C9   		testq	%rcx, %rcx
 570 0011 0F840901 		je	.L64
 570      0000
 553:fltk-1.3.4-1/png/pngpread.c ****       {
 571              		.loc 1 553 0
 572 0017 488BB738 		movq	824(%rdi), %rsi
 572      030000
 573 001e 488BBF40 		movq	832(%rdi), %rdi
 573      030000
 574              	.LVL49:
 575 0025 4839FE   		cmpq	%rdi, %rsi
 576 0028 741D     		je	.L65
 577 002a 31C0     		xorl	%eax, %eax
 578 002c 0F1F4000 		.p2align 4,,10
 579              		.p2align 3
 580              	.L66:
 581              	.LVL50:
 582              	.LBB133:
 563:fltk-1.3.4-1/png/pngpread.c ****          }
 583              		.loc 1 563 0
 584 0030 0FB61406 		movzbl	(%rsi,%rax), %edx
 585 0034 881407   		movb	%dl, (%rdi,%rax)
 561:fltk-1.3.4-1/png/pngpread.c ****          {
 586              		.loc 1 561 0
 587 0037 4883C001 		addq	$1, %rax
 588              	.LVL51:
 560:fltk-1.3.4-1/png/pngpread.c ****              i < istop; i++, sp++, dp++)
 589              		.loc 1 560 0
 590 003b 4839C1   		cmpq	%rax, %rcx
 591 003e 75F0     		jne	.L66
 592 0040 488B8B60 		movq	864(%rbx), %rcx
 592      030000
 593              	.LVL52:
 594              	.L65:
 595              	.LBE133:
 567:fltk-1.3.4-1/png/pngpread.c ****        png_ptr->save_buffer_max)
 596              		.loc 1 567 0
 597 0047 488B9378 		movq	888(%rbx), %rdx
 597      030000
 598 004e 488D0411 		leaq	(%rcx,%rdx), %rax
 599 0052 483B8368 		cmpq	872(%rbx), %rax
 599      030000
 600 0059 766A     		jbe	.L67
 601              	.LBB134:
 573:fltk-1.3.4-1/png/pngpread.c ****           (png_ptr->current_buffer_size + 256))
 602              		.loc 1 573 0
 603 005b 4881C200 		addq	$256, %rdx
 603      010000
 604 0062 48F7D2   		notq	%rdx
 605 0065 4839D1   		cmpq	%rdx, %rcx
 606 0068 0F87E000 		ja	.L78
 606      0000
 607 006e 4889C2   		movq	%rax, %rdx
 608              	.L68:
 579:fltk-1.3.4-1/png/pngpread.c ****       old_buffer = png_ptr->save_buffer;
 609              		.loc 1 579 0
 610 0071 488DAA00 		leaq	256(%rdx), %rbp
 610      010000
 611              	.LVL53:
 581:fltk-1.3.4-1/png/pngpread.c ****           (png_size_t)new_max);
 612              		.loc 1 581 0
 613 0078 4889DF   		movq	%rbx, %rdi
 580:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->save_buffer = (png_bytep)png_malloc_warn(png_ptr,
 614              		.loc 1 580 0
 615 007b 4C8BA340 		movq	832(%rbx), %r12
 615      030000
 616              	.LVL54:
 581:fltk-1.3.4-1/png/pngpread.c ****           (png_size_t)new_max);
 617              		.loc 1 581 0
 618 0082 4889EE   		movq	%rbp, %rsi
 619 0085 E8000000 		call	png_malloc_warn
 619      00
 620              	.LVL55:
 584:fltk-1.3.4-1/png/pngpread.c ****       {
 621              		.loc 1 584 0
 622 008a 4885C0   		testq	%rax, %rax
 581:fltk-1.3.4-1/png/pngpread.c ****           (png_size_t)new_max);
 623              		.loc 1 581 0
 624 008d 48898340 		movq	%rax, 832(%rbx)
 624      030000
 584:fltk-1.3.4-1/png/pngpread.c ****       {
 625              		.loc 1 584 0
 626 0094 0F849C00 		je	.L79
 626      0000
 627              	.LVL56:
 628              	.LBB135:
 629              	.LBB136:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 630              		.loc 2 53 0
 631 009a 488B9360 		movq	864(%rbx), %rdx
 631      030000
 632 00a1 4C89E6   		movq	%r12, %rsi
 633 00a4 4889C7   		movq	%rax, %rdi
 634 00a7 E8000000 		call	memcpy
 634      00
 635              	.LVL57:
 636              	.LBE136:
 637              	.LBE135:
 592:fltk-1.3.4-1/png/pngpread.c ****       old_buffer = NULL;
 638              		.loc 1 592 0
 639 00ac 4C89E6   		movq	%r12, %rsi
 640 00af 4889DF   		movq	%rbx, %rdi
 641 00b2 E8000000 		call	png_free
 641      00
 642              	.LVL58:
 643 00b7 488B9378 		movq	888(%rbx), %rdx
 643      030000
 594:fltk-1.3.4-1/png/pngpread.c ****    }
 644              		.loc 1 594 0
 645 00be 4889AB68 		movq	%rbp, 872(%rbx)
 645      030000
 646              	.LVL59:
 647              	.L67:
 648              	.LBE134:
 596:fltk-1.3.4-1/png/pngpread.c ****    {
 649              		.loc 1 596 0
 650 00c5 4885D2   		testq	%rdx, %rdx
 651 00c8 7433     		je	.L70
 652              	.LVL60:
 653              	.LBB137:
 654              	.LBB138:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 655              		.loc 2 53 0
 656 00ca 488BBB60 		movq	864(%rbx), %rdi
 656      030000
 657 00d1 4803BB40 		addq	832(%rbx), %rdi
 657      030000
 658              	.LVL61:
 659 00d8 488BB348 		movq	840(%rbx), %rsi
 659      030000
 660 00df E8000000 		call	memcpy
 660      00
 661              	.LVL62:
 662              	.LBE138:
 663              	.LBE137:
 600:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->current_buffer_size = 0;
 664              		.loc 1 600 0
 665 00e4 488B8378 		movq	888(%rbx), %rax
 665      030000
 666 00eb 48018360 		addq	%rax, 864(%rbx)
 666      030000
 601:fltk-1.3.4-1/png/pngpread.c ****    }
 667              		.loc 1 601 0
 668 00f2 48C78378 		movq	$0, 888(%rbx)
 668      03000000 
 668      000000
 669              	.L70:
 603:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->buffer_size = 0;
 670              		.loc 1 603 0
 671 00fd 488B8340 		movq	832(%rbx), %rax
 671      030000
 604:fltk-1.3.4-1/png/pngpread.c **** }
 672              		.loc 1 604 0
 673 0104 48C78370 		movq	$0, 880(%rbx)
 673      03000000 
 673      000000
 603:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->buffer_size = 0;
 674              		.loc 1 603 0
 675 010f 48898338 		movq	%rax, 824(%rbx)
 675      030000
 605:fltk-1.3.4-1/png/pngpread.c **** 
 676              		.loc 1 605 0
 677 0116 5B       		popq	%rbx
 678              		.cfi_remember_state
 679              		.cfi_def_cfa_offset 24
 680              	.LVL63:
 681 0117 5D       		popq	%rbp
 682              		.cfi_def_cfa_offset 16
 683 0118 415C     		popq	%r12
 684              		.cfi_def_cfa_offset 8
 685 011a C3       		ret
 686              	.LVL64:
 687 011b 0F1F4400 		.p2align 4,,10
 687      00
 688              		.p2align 3
 689              	.L64:
 690              		.cfi_restore_state
 567:fltk-1.3.4-1/png/pngpread.c ****        png_ptr->save_buffer_max)
 691              		.loc 1 567 0
 692 0120 488B9778 		movq	888(%rdi), %rdx
 692      030000
 693 0127 48399768 		cmpq	%rdx, 872(%rdi)
 693      030000
 694 012e 0F823DFF 		jb	.L68
 694      FFFF
 695 0134 EB8F     		jmp	.L67
 696              	.LVL65:
 697              	.L79:
 698              	.LBB139:
 586:fltk-1.3.4-1/png/pngpread.c ****          old_buffer = NULL;
 699              		.loc 1 586 0
 700 0136 4C89E6   		movq	%r12, %rsi
 701 0139 4889DF   		movq	%rbx, %rdi
 702 013c E8000000 		call	png_free
 702      00
 703              	.LVL66:
 588:fltk-1.3.4-1/png/pngpread.c ****       }
 704              		.loc 1 588 0
 705 0141 BE000000 		movl	$.LC10, %esi
 705      00
 706 0146 4889DF   		movq	%rbx, %rdi
 707 0149 E8000000 		call	png_error
 707      00
 708              	.LVL67:
 709              	.L78:
 576:fltk-1.3.4-1/png/pngpread.c ****       }
 710              		.loc 1 576 0
 711 014e BE000000 		movl	$.LC9, %esi
 711      00
 712 0153 4889DF   		movq	%rbx, %rdi
 713 0156 E8000000 		call	png_error
 713      00
 714              	.LVL68:
 715              	.LBE139:
 716              		.cfi_endproc
 717              	.LFE65:
 719              		.section	.text.unlikely.png_push_save_buffer
 720              	.LCOLDE11:
 721              		.section	.text.png_push_save_buffer
 722              	.LHOTE11:
 723              		.section	.text.unlikely.png_process_data_pause,"ax",@progbits
 724              	.LCOLDB12:
 725              		.section	.text.png_process_data_pause,"ax",@progbits
 726              	.LHOTB12:
 727              		.p2align 4,,15
 728              		.globl	png_process_data_pause
 730              	png_process_data_pause:
 731              	.LFB57:
  53:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr != NULL)
 732              		.loc 1 53 0
 733              		.cfi_startproc
 734              	.LVL69:
  54:fltk-1.3.4-1/png/pngpread.c ****    {
 735              		.loc 1 54 0
 736 0000 4885FF   		testq	%rdi, %rdi
 737 0003 742B     		je	.L84
  59:fltk-1.3.4-1/png/pngpread.c ****          png_push_save_buffer(png_ptr);
 738              		.loc 1 59 0
 739 0005 85F6     		testl	%esi, %esi
 740 0007 752F     		jne	.L87
 741              	.LBB140:
  64:fltk-1.3.4-1/png/pngpread.c ****          png_ptr->buffer_size = 0;
 742              		.loc 1 64 0
 743 0009 488B8770 		movq	880(%rdi), %rax
 743      030000
 744              	.LVL70:
  70:fltk-1.3.4-1/png/pngpread.c ****             return remaining - png_ptr->save_buffer_size;
 745              		.loc 1 70 0
 746 0010 488B9760 		movq	864(%rdi), %rdx
 746      030000
  65:fltk-1.3.4-1/png/pngpread.c **** 
 747              		.loc 1 65 0
 748 0017 48C78770 		movq	$0, 880(%rdi)
 748      03000000 
 748      000000
  70:fltk-1.3.4-1/png/pngpread.c ****             return remaining - png_ptr->save_buffer_size;
 749              		.loc 1 70 0
 750 0022 4839D0   		cmpq	%rdx, %rax
 751 0025 7609     		jbe	.L84
  71:fltk-1.3.4-1/png/pngpread.c ****       }
 752              		.loc 1 71 0
 753 0027 4829D0   		subq	%rdx, %rax
 754              	.LVL71:
 755 002a C3       		ret
 756 002b 0F1F4400 		.p2align 4,,10
 756      00
 757              		.p2align 3
 758              	.L84:
 759              	.LBE140:
  75:fltk-1.3.4-1/png/pngpread.c **** }
 760              		.loc 1 75 0
 761 0030 31C0     		xorl	%eax, %eax
 762 0032 C3       		ret
 763              		.p2align 4,,10
 764 0033 0F1F4400 		.p2align 3
 764      00
 765              	.L87:
  53:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr != NULL)
 766              		.loc 1 53 0
 767 0038 4883EC08 		subq	$8, %rsp
 768              		.cfi_def_cfa_offset 16
  60:fltk-1.3.4-1/png/pngpread.c ****       else
 769              		.loc 1 60 0
 770 003c E8000000 		call	png_push_save_buffer
 770      00
 771              	.LVL72:
  75:fltk-1.3.4-1/png/pngpread.c **** }
 772              		.loc 1 75 0
 773 0041 31C0     		xorl	%eax, %eax
  76:fltk-1.3.4-1/png/pngpread.c **** 
 774              		.loc 1 76 0
 775 0043 4883C408 		addq	$8, %rsp
 776              		.cfi_def_cfa_offset 8
 777 0047 C3       		ret
 778              		.cfi_endproc
 779              	.LFE57:
 781              		.section	.text.unlikely.png_process_data_pause
 782              	.LCOLDE12:
 783              		.section	.text.png_process_data_pause
 784              	.LHOTE12:
 785              		.section	.text.unlikely.png_push_crc_finish,"ax",@progbits
 786              	.LCOLDB13:
 787              		.section	.text.png_push_crc_finish,"ax",@progbits
 788              	.LHOTB13:
 789              		.p2align 4,,15
 790              		.globl	png_push_crc_finish
 792              	png_push_crc_finish:
 793              	.LFB63:
 451:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->skip_length != 0 && png_ptr->save_buffer_size != 0)
 794              		.loc 1 451 0
 795              		.cfi_startproc
 796              	.LVL73:
 797 0000 4154     		pushq	%r12
 798              		.cfi_def_cfa_offset 16
 799              		.cfi_offset 12, -16
 800 0002 55       		pushq	%rbp
 801              		.cfi_def_cfa_offset 24
 802              		.cfi_offset 6, -24
 803 0003 53       		pushq	%rbx
 804              		.cfi_def_cfa_offset 32
 805              		.cfi_offset 3, -32
 452:fltk-1.3.4-1/png/pngpread.c ****    {
 806              		.loc 1 452 0
 807 0004 8BAF5C03 		movl	860(%rdi), %ebp
 807      0000
 451:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->skip_length != 0 && png_ptr->save_buffer_size != 0)
 808              		.loc 1 451 0
 809 000a 4889FB   		movq	%rdi, %rbx
 452:fltk-1.3.4-1/png/pngpread.c ****    {
 810              		.loc 1 452 0
 811 000d 85ED     		testl	%ebp, %ebp
 812 000f 0F84AB00 		je	.L89
 812      0000
 452:fltk-1.3.4-1/png/pngpread.c ****    {
 813              		.loc 1 452 0 is_stmt 0 discriminator 1
 814 0015 488B8760 		movq	864(%rdi), %rax
 814      030000
 815 001c 4885C0   		testq	%rax, %rax
 816 001f 7447     		je	.L90
 817              	.LVL74:
 818              	.LBB141:
 463:fltk-1.3.4-1/png/pngpread.c ****          save_size = (png_size_t)skip_length;
 819              		.loc 1 463 0 is_stmt 1
 820 0021 4189EC   		movl	%ebp, %r12d
 821 0024 4C39E0   		cmpq	%r12, %rax
 822 0027 0F86CB00 		jbe	.L110
 822      0000
 823              	.L91:
 824              	.LVL75:
 469:fltk-1.3.4-1/png/pngpread.c **** 
 825              		.loc 1 469 0
 826 002d 488BB338 		movq	824(%rbx), %rsi
 826      030000
 827 0034 4C89E2   		movq	%r12, %rdx
 828 0037 4889DF   		movq	%rbx, %rdi
 829              	.LVL76:
 830 003a E8000000 		call	png_calculate_crc
 830      00
 831              	.LVL77:
 471:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->buffer_size -= save_size;
 832              		.loc 1 471 0
 833 003f 8B835C03 		movl	860(%rbx), %eax
 833      0000
 472:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->save_buffer_size -= save_size;
 834              		.loc 1 472 0
 835 0045 4C29A370 		subq	%r12, 880(%rbx)
 835      030000
 473:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->save_buffer_ptr += save_size;
 836              		.loc 1 473 0
 837 004c 4C29A360 		subq	%r12, 864(%rbx)
 837      030000
 474:fltk-1.3.4-1/png/pngpread.c ****    }
 838              		.loc 1 474 0
 839 0053 4C01A338 		addq	%r12, 824(%rbx)
 839      030000
 471:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->buffer_size -= save_size;
 840              		.loc 1 471 0
 841 005a 29E8     		subl	%ebp, %eax
 842              	.LBE141:
 476:fltk-1.3.4-1/png/pngpread.c ****    {
 843              		.loc 1 476 0
 844 005c 85C0     		testl	%eax, %eax
 845              	.LBB142:
 471:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->buffer_size -= save_size;
 846              		.loc 1 471 0
 847 005e 89C5     		movl	%eax, %ebp
 848              	.LVL78:
 849 0060 89835C03 		movl	%eax, 860(%rbx)
 849      0000
 850              	.LBE142:
 476:fltk-1.3.4-1/png/pngpread.c ****    {
 851              		.loc 1 476 0
 852 0066 7458     		je	.L89
 853              	.LVL79:
 854              	.L90:
 476:fltk-1.3.4-1/png/pngpread.c ****    {
 855              		.loc 1 476 0 is_stmt 0 discriminator 1
 856 0068 488B8378 		movq	888(%rbx), %rax
 856      030000
 857 006f 4885C0   		testq	%rax, %rax
 858 0072 7445     		je	.L88
 859              	.LVL80:
 860              	.LBB143:
 484:fltk-1.3.4-1/png/pngpread.c ****          save_size = (png_size_t)skip_length;
 861              		.loc 1 484 0 is_stmt 1
 862 0074 4189EC   		movl	%ebp, %r12d
 863 0077 4C39E0   		cmpq	%r12, %rax
 864 007a 0F868800 		jbe	.L111
 864      0000
 865              	.L96:
 866              	.LVL81:
 490:fltk-1.3.4-1/png/pngpread.c **** 
 867              		.loc 1 490 0
 868 0080 488BB348 		movq	840(%rbx), %rsi
 868      030000
 869 0087 4C89E2   		movq	%r12, %rdx
 870 008a 4889DF   		movq	%rbx, %rdi
 871 008d E8000000 		call	png_calculate_crc
 871      00
 872              	.LVL82:
 492:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->buffer_size -= save_size;
 873              		.loc 1 492 0
 874 0092 8B835C03 		movl	860(%rbx), %eax
 874      0000
 493:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->current_buffer_size -= save_size;
 875              		.loc 1 493 0
 876 0098 4C29A370 		subq	%r12, 880(%rbx)
 876      030000
 494:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->current_buffer_ptr += save_size;
 877              		.loc 1 494 0
 878 009f 4C29A378 		subq	%r12, 888(%rbx)
 878      030000
 495:fltk-1.3.4-1/png/pngpread.c ****    }
 879              		.loc 1 495 0
 880 00a6 4C01A348 		addq	%r12, 840(%rbx)
 880      030000
 492:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->buffer_size -= save_size;
 881              		.loc 1 492 0
 882 00ad 29E8     		subl	%ebp, %eax
 883              	.LBE143:
 497:fltk-1.3.4-1/png/pngpread.c ****    {
 884              		.loc 1 497 0
 885 00af 85C0     		testl	%eax, %eax
 886              	.LBB144:
 492:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->buffer_size -= save_size;
 887              		.loc 1 492 0
 888 00b1 89835C03 		movl	%eax, 860(%rbx)
 888      0000
 889              	.LBE144:
 497:fltk-1.3.4-1/png/pngpread.c ****    {
 890              		.loc 1 497 0
 891 00b7 7407     		je	.L89
 892              	.LVL83:
 893              	.L88:
 503:fltk-1.3.4-1/png/pngpread.c **** 
 894              		.loc 1 503 0
 895 00b9 5B       		popq	%rbx
 896              		.cfi_remember_state
 897              		.cfi_def_cfa_offset 24
 898              	.LVL84:
 899 00ba 5D       		popq	%rbp
 900              		.cfi_def_cfa_offset 16
 901 00bb 415C     		popq	%r12
 902              		.cfi_def_cfa_offset 8
 903 00bd C3       		ret
 904              	.LVL85:
 905 00be 6690     		.p2align 4,,10
 906              		.p2align 3
 907              	.L89:
 908              		.cfi_restore_state
 499:fltk-1.3.4-1/png/pngpread.c ****       png_crc_finish(png_ptr, 0);
 909              		.loc 1 499 0
 910 00c0 4883BB70 		cmpq	$3, 880(%rbx)
 910      03000003 
 911 00c8 761E     		jbe	.L112
 500:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->process_mode = PNG_READ_CHUNK_MODE;
 912              		.loc 1 500 0
 913 00ca 4889DF   		movq	%rbx, %rdi
 914 00cd 31F6     		xorl	%esi, %esi
 915 00cf E8000000 		call	png_crc_finish
 915      00
 916              	.LVL86:
 501:fltk-1.3.4-1/png/pngpread.c ****    }
 917              		.loc 1 501 0
 918 00d4 C7838003 		movl	$1, 896(%rbx)
 918      00000100 
 918      0000
 503:fltk-1.3.4-1/png/pngpread.c **** 
 919              		.loc 1 503 0
 920 00de 5B       		popq	%rbx
 921              		.cfi_remember_state
 922              		.cfi_def_cfa_offset 24
 923              	.LVL87:
 924 00df 5D       		popq	%rbp
 925              		.cfi_def_cfa_offset 16
 926 00e0 415C     		popq	%r12
 927              		.cfi_def_cfa_offset 8
 928 00e2 C3       		ret
 929              	.LVL88:
 930              		.p2align 4,,10
 931 00e3 0F1F4400 		.p2align 3
 931      00
 932              	.L112:
 933              		.cfi_restore_state
 499:fltk-1.3.4-1/png/pngpread.c ****       png_crc_finish(png_ptr, 0);
 934              		.loc 1 499 0 discriminator 1
 935 00e8 4889DF   		movq	%rbx, %rdi
 503:fltk-1.3.4-1/png/pngpread.c **** 
 936              		.loc 1 503 0 discriminator 1
 937 00eb 5B       		popq	%rbx
 938              		.cfi_remember_state
 939              		.cfi_def_cfa_offset 24
 940              	.LVL89:
 941 00ec 5D       		popq	%rbp
 942              		.cfi_def_cfa_offset 16
 943 00ed 415C     		popq	%r12
 944              		.cfi_def_cfa_offset 8
 499:fltk-1.3.4-1/png/pngpread.c ****       png_crc_finish(png_ptr, 0);
 945              		.loc 1 499 0 discriminator 1
 946 00ef E9000000 		jmp	png_push_save_buffer
 946      00
 947              	.LVL90:
 948              		.p2align 4,,10
 949 00f4 0F1F4000 		.p2align 3
 950              	.L110:
 951              		.cfi_restore_state
 952              	.LBB145:
 467:fltk-1.3.4-1/png/pngpread.c **** 
 953              		.loc 1 467 0
 954 00f8 89C5     		movl	%eax, %ebp
 955              	.LVL91:
 956 00fa 4989C4   		movq	%rax, %r12
 957 00fd E92BFFFF 		jmp	.L91
 957      FF
 958              	.LVL92:
 959              		.p2align 4,,10
 960 0102 660F1F44 		.p2align 3
 960      0000
 961              	.L111:
 962              	.LBE145:
 963              	.LBB146:
 488:fltk-1.3.4-1/png/pngpread.c **** 
 964              		.loc 1 488 0
 965 0108 89C5     		movl	%eax, %ebp
 966              	.LVL93:
 967 010a 4989C4   		movq	%rax, %r12
 968 010d E96EFFFF 		jmp	.L96
 968      FF
 969              	.LBE146:
 970              		.cfi_endproc
 971              	.LFE63:
 973              		.section	.text.unlikely.png_push_crc_finish
 974              	.LCOLDE13:
 975              		.section	.text.png_push_crc_finish
 976              	.LHOTE13:
 977              		.section	.rodata.str1.1
 978              	.LC14:
 979 000f 4D697373 		.string	"Missing IHDR before IDAT"
 979      696E6720 
 979      49484452 
 979      20626566 
 979      6F726520 
 980              	.LC15:
 981 0028 4D697373 		.string	"Missing PLTE before IDAT"
 981      696E6720 
 981      504C5445 
 981      20626566 
 981      6F726520 
 982              	.LC16:
 983 0041 546F6F20 		.string	"Too many IDATs found"
 983      6D616E79 
 983      20494441 
 983      54732066 
 983      6F756E64 
 984              	.LC17:
 985 0056 496E7661 		.string	"Invalid IHDR length"
 985      6C696420 
 985      49484452 
 985      206C656E 
 985      67746800 
 986              		.section	.text.unlikely.png_push_read_chunk,"ax",@progbits
 987              	.LCOLDB18:
 988              		.section	.text.png_push_read_chunk,"ax",@progbits
 989              	.LHOTB18:
 990              		.p2align 4,,15
 991              		.globl	png_push_read_chunk
 993              	png_push_read_chunk:
 994              	.LFB61:
 193:fltk-1.3.4-1/png/pngpread.c ****    png_uint_32 chunk_name;
 995              		.loc 1 193 0
 996              		.cfi_startproc
 997              	.LVL94:
 998 0000 4154     		pushq	%r12
 999              		.cfi_def_cfa_offset 16
 1000              		.cfi_offset 12, -16
 1001 0002 55       		pushq	%rbp
 1002              		.cfi_def_cfa_offset 24
 1003              		.cfi_offset 6, -24
 1004 0003 4989F4   		movq	%rsi, %r12
 1005 0006 53       		pushq	%rbx
 1006              		.cfi_def_cfa_offset 32
 1007              		.cfi_offset 3, -32
 1008 0007 4889FB   		movq	%rdi, %rbx
 1009 000a 4883EC20 		subq	$32, %rsp
 1010              		.cfi_def_cfa_offset 64
 193:fltk-1.3.4-1/png/pngpread.c ****    png_uint_32 chunk_name;
 1011              		.loc 1 193 0
 1012 000e 64488B04 		movq	%fs:40, %rax
 1012      25280000 
 1012      00
 1013 0017 48894424 		movq	%rax, 24(%rsp)
 1013      18
 1014 001c 31C0     		xorl	%eax, %eax
 205:fltk-1.3.4-1/png/pngpread.c ****    {
 1015              		.loc 1 205 0
 1016 001e F6872D01 		testb	$1, 301(%rdi)
 1016      000001
 1017 0025 7564     		jne	.L114
 1018              	.LBB147:
 210:fltk-1.3.4-1/png/pngpread.c ****       png_push_fill_buffer(png_ptr, chunk_length, 4);
 1019              		.loc 1 210 0
 1020 0027 4883BF70 		cmpq	$7, 880(%rdi)
 1020      03000007 
 1021 002f 0F860B01 		jbe	.L128
 1021      0000
 211:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->push_length = png_get_uint_31(png_ptr, chunk_length);
 1022              		.loc 1 211 0
 1023 0035 BA040000 		movl	$4, %edx
 1023      00
 1024 003a 4889E6   		movq	%rsp, %rsi
 1025              	.LVL95:
 1026 003d E8000000 		call	png_push_fill_buffer
 1026      00
 1027              	.LVL96:
 212:fltk-1.3.4-1/png/pngpread.c ****       png_reset_crc(png_ptr);
 1028              		.loc 1 212 0
 1029 0042 4889E6   		movq	%rsp, %rsi
 1030 0045 4889DF   		movq	%rbx, %rdi
 1031 0048 E8000000 		call	png_get_uint_31
 1031      00
 1032              	.LVL97:
 213:fltk-1.3.4-1/png/pngpread.c ****       png_crc_read(png_ptr, chunk_tag, 4);
 1033              		.loc 1 213 0
 1034 004d 4889DF   		movq	%rbx, %rdi
 212:fltk-1.3.4-1/png/pngpread.c ****       png_reset_crc(png_ptr);
 1035              		.loc 1 212 0
 1036 0050 89835803 		movl	%eax, 856(%rbx)
 1036      0000
 213:fltk-1.3.4-1/png/pngpread.c ****       png_crc_read(png_ptr, chunk_tag, 4);
 1037              		.loc 1 213 0
 1038 0056 E8000000 		call	png_reset_crc
 1038      00
 1039              	.LVL98:
 214:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->chunk_name = PNG_CHUNK_FROM_STRING(chunk_tag);
 1040              		.loc 1 214 0
 1041 005b 488D7424 		leaq	16(%rsp), %rsi
 1041      10
 1042 0060 BA040000 		movl	$4, %edx
 1042      00
 1043 0065 4889DF   		movq	%rbx, %rdi
 1044 0068 E8000000 		call	png_crc_read
 1044      00
 1045              	.LVL99:
 1046 006d 8B742410 		movl	16(%rsp), %esi
 216:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->mode |= PNG_HAVE_CHUNK_HEADER;
 1047              		.loc 1 216 0
 1048 0071 4889DF   		movq	%rbx, %rdi
 1049 0074 0FCE     		bswap	%esi
 215:fltk-1.3.4-1/png/pngpread.c ****       png_check_chunk_name(png_ptr, png_ptr->chunk_name);
 1050              		.loc 1 215 0
 1051 0076 89B31802 		movl	%esi, 536(%rbx)
 1051      0000
 216:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->mode |= PNG_HAVE_CHUNK_HEADER;
 1052              		.loc 1 216 0
 1053 007c E8000000 		call	png_check_chunk_name
 1053      00
 1054              	.LVL100:
 217:fltk-1.3.4-1/png/pngpread.c ****    }
 1055              		.loc 1 217 0
 1056 0081 818B2C01 		orl	$256, 300(%rbx)
 1056      00000001 
 1056      0000
 1057              	.L114:
 1058              	.LBE147:
 220:fltk-1.3.4-1/png/pngpread.c **** 
 1059              		.loc 1 220 0
 1060 008b 8BAB1802 		movl	536(%rbx), %ebp
 1060      0000
 1061              	.LVL101:
 222:fltk-1.3.4-1/png/pngpread.c ****    {
 1062              		.loc 1 222 0
 1063 0091 81FD5441 		cmpl	$1229209940, %ebp
 1063      4449
 1064 0097 0F84CB00 		je	.L170
 1064      0000
 249:fltk-1.3.4-1/png/pngpread.c ****    {
 1065              		.loc 1 249 0
 1066 009d 81FD5244 		cmpl	$1229472850, %ebp
 1066      4849
 1067 00a3 7463     		je	.L171
 258:fltk-1.3.4-1/png/pngpread.c ****    {
 1068              		.loc 1 258 0
 1069 00a5 81FD444E 		cmpl	$1229278788, %ebp
 1069      4549
 1070 00ab 0F858701 		jne	.L127
 1070      0000
 260:fltk-1.3.4-1/png/pngpread.c ****       png_handle_IEND(png_ptr, info_ptr, png_ptr->push_length);
 1071              		.loc 1 260 0
 1072 00b1 8B935803 		movl	856(%rbx), %edx
 1072      0000
 1073 00b7 8D4204   		leal	4(%rdx), %eax
 1074 00ba 483B8370 		cmpq	880(%rbx), %rax
 1074      030000
 1075 00c1 777D     		ja	.L128
 261:fltk-1.3.4-1/png/pngpread.c **** 
 1076              		.loc 1 261 0
 1077 00c3 4C89E6   		movq	%r12, %rsi
 1078 00c6 4889DF   		movq	%rbx, %rdi
 1079 00c9 E8000000 		call	png_handle_IEND
 1079      00
 1080              	.LVL102:
 1081              	.LBB148:
 1082              	.LBB149:
1107:fltk-1.3.4-1/png/pngpread.c **** 
1108:fltk-1.3.4-1/png/pngpread.c **** void /* PRIVATE */
1109:fltk-1.3.4-1/png/pngpread.c **** png_push_have_info(png_structrp png_ptr, png_inforp info_ptr)
1110:fltk-1.3.4-1/png/pngpread.c **** {
1111:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->info_fn != NULL)
1112:fltk-1.3.4-1/png/pngpread.c ****       (*(png_ptr->info_fn))(png_ptr, info_ptr);
1113:fltk-1.3.4-1/png/pngpread.c **** }
1114:fltk-1.3.4-1/png/pngpread.c **** 
1115:fltk-1.3.4-1/png/pngpread.c **** void /* PRIVATE */
1116:fltk-1.3.4-1/png/pngpread.c **** png_push_have_end(png_structrp png_ptr, png_inforp info_ptr)
1117:fltk-1.3.4-1/png/pngpread.c **** {
1118:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->end_fn != NULL)
 1083              		.loc 1 1118 0
 1084 00ce 488B8330 		movq	816(%rbx), %rax
 1084      030000
 1085              	.LBE149:
 1086              	.LBE148:
 263:fltk-1.3.4-1/png/pngpread.c ****       png_push_have_end(png_ptr, info_ptr);
 1087              		.loc 1 263 0
 1088 00d5 C7838003 		movl	$6, 896(%rbx)
 1088      00000600 
 1088      0000
 1089              	.LVL103:
 1090              	.LBB151:
 1091              	.LBB150:
 1092              		.loc 1 1118 0
 1093 00df 4885C0   		testq	%rax, %rax
 1094 00e2 0F846802 		je	.L168
 1094      0000
1119:fltk-1.3.4-1/png/pngpread.c ****       (*(png_ptr->end_fn))(png_ptr, info_ptr);
 1095              		.loc 1 1119 0
 1096 00e8 4C89E6   		movq	%r12, %rsi
 1097 00eb 4889DF   		movq	%rbx, %rdi
 1098 00ee FFD0     		call	*%rax
 1099              	.LVL104:
 1100 00f0 8B832C01 		movl	300(%rbx), %eax
 1100      0000
 1101              	.LVL105:
 1102              	.L126:
 1103              	.LBE150:
 1104              	.LBE151:
 439:fltk-1.3.4-1/png/pngpread.c **** }
 1105              		.loc 1 439 0
 1106 00f6 80E4FE   		andb	$254, %ah
 1107 00f9 89832C01 		movl	%eax, 300(%rbx)
 1107      0000
 1108 00ff EB47     		jmp	.L113
 1109              		.p2align 4,,10
 1110 0101 0F1F8000 		.p2align 3
 1110      000000
 1111              	.L171:
 251:fltk-1.3.4-1/png/pngpread.c ****          png_error(png_ptr, "Invalid IHDR length");
 1112              		.loc 1 251 0
 1113 0108 83BB5803 		cmpl	$13, 856(%rbx)
 1113      00000D
 1114 010f 0F854A05 		jne	.L172
 1114      0000
 254:fltk-1.3.4-1/png/pngpread.c ****       png_handle_IHDR(png_ptr, info_ptr, png_ptr->push_length);
 1115              		.loc 1 254 0
 1116 0115 4883BB70 		cmpq	$16, 880(%rbx)
 1116      03000010 
 1117 011d 7621     		jbe	.L128
 255:fltk-1.3.4-1/png/pngpread.c ****    }
 1118              		.loc 1 255 0
 1119 011f BA0D0000 		movl	$13, %edx
 1119      00
 1120 0124 4C89E6   		movq	%r12, %rsi
 1121 0127 4889DF   		movq	%rbx, %rdi
 1122 012a E8000000 		call	png_handle_IHDR
 1122      00
 1123              	.LVL106:
 1124 012f 8B832C01 		movl	300(%rbx), %eax
 1124      0000
 1125 0135 EBBF     		jmp	.L126
 1126              	.LVL107:
 1127 0137 660F1F84 		.p2align 4,,10
 1127      00000000 
 1127      00
 1128              		.p2align 3
 1129              	.L128:
 254:fltk-1.3.4-1/png/pngpread.c ****       png_handle_IHDR(png_ptr, info_ptr, png_ptr->push_length);
 1130              		.loc 1 254 0 discriminator 1
 1131 0140 4889DF   		movq	%rbx, %rdi
 1132 0143 E8000000 		call	png_push_save_buffer
 1132      00
 1133              	.LVL108:
 1134              	.L113:
 440:fltk-1.3.4-1/png/pngpread.c **** 
 1135              		.loc 1 440 0
 1136 0148 488B4424 		movq	24(%rsp), %rax
 1136      18
 1137 014d 64483304 		xorq	%fs:40, %rax
 1137      25280000 
 1137      00
 1138 0156 0F85AB04 		jne	.L173
 1138      0000
 1139 015c 4883C420 		addq	$32, %rsp
 1140              		.cfi_remember_state
 1141              		.cfi_def_cfa_offset 32
 1142 0160 5B       		popq	%rbx
 1143              		.cfi_def_cfa_offset 24
 1144              	.LVL109:
 1145 0161 5D       		popq	%rbp
 1146              		.cfi_def_cfa_offset 16
 1147 0162 415C     		popq	%r12
 1148              		.cfi_def_cfa_offset 8
 1149              	.LVL110:
 1150 0164 C3       		ret
 1151              	.LVL111:
 1152              		.p2align 4,,10
 1153 0165 0F1F00   		.p2align 3
 1154              	.L170:
 1155              		.cfi_restore_state
 224:fltk-1.3.4-1/png/pngpread.c ****          png_ptr->mode |= PNG_HAVE_CHUNK_AFTER_IDAT;
 1156              		.loc 1 224 0
 1157 0168 8B832C01 		movl	300(%rbx), %eax
 1157      0000
 1158 016e A808     		testb	$8, %al
 1159 0170 0F858A00 		jne	.L174
 1159      0000
 1160              	.L118:
 231:fltk-1.3.4-1/png/pngpread.c ****          png_error(png_ptr, "Missing IHDR before IDAT");
 1161              		.loc 1 231 0
 1162 0176 A801     		testb	$1, %al
 1163 0178 0F84D404 		je	.L175
 1163      0000
 234:fltk-1.3.4-1/png/pngpread.c ****           (png_ptr->mode & PNG_HAVE_PLTE) == 0)
 1164              		.loc 1 234 0
 1165 017e 80BB7702 		cmpb	$3, 631(%rbx)
 1165      000003
 1166 0185 0F849500 		je	.L176
 1166      0000
 1167              	.L120:
 238:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->process_mode = PNG_READ_IDAT_MODE;
 1168              		.loc 1 238 0
 1169 018b 89C2     		movl	%eax, %edx
 239:fltk-1.3.4-1/png/pngpread.c **** 
 1170              		.loc 1 239 0
 1171 018d C7838003 		movl	$2, 896(%rbx)
 1171      00000200 
 1171      0000
 238:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->process_mode = PNG_READ_IDAT_MODE;
 1172              		.loc 1 238 0
 1173 0197 83CA04   		orl	$4, %edx
 241:fltk-1.3.4-1/png/pngpread.c ****          if (png_ptr->push_length == 0)
 1174              		.loc 1 241 0
 1175 019a F6C420   		testb	$32, %ah
 238:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->process_mode = PNG_READ_IDAT_MODE;
 1176              		.loc 1 238 0
 1177 019d 89932C01 		movl	%edx, 300(%rbx)
 1177      0000
 241:fltk-1.3.4-1/png/pngpread.c ****          if (png_ptr->push_length == 0)
 1178              		.loc 1 241 0
 1179 01a3 746B     		je	.L177
 1180              	.L121:
 245:fltk-1.3.4-1/png/pngpread.c ****          png_benign_error(png_ptr, "Too many IDATs found");
 1181              		.loc 1 245 0
 1182 01a5 A808     		testb	$8, %al
 1183 01a7 0F85B301 		jne	.L178
 1183      0000
 1184              	.L122:
 268:fltk-1.3.4-1/png/pngpread.c ****    {
 1185              		.loc 1 268 0
 1186 01ad BE544144 		movl	$1229209940, %esi
 1186      49
 1187 01b2 4889DF   		movq	%rbx, %rdi
 1188 01b5 E8000000 		call	png_chunk_unknown_handling
 1188      00
 1189              	.LVL112:
 1190 01ba 85C0     		testl	%eax, %eax
 1191 01bc 0F840E02 		je	.L179
 1191      0000
 1192              	.L152:
 270:fltk-1.3.4-1/png/pngpread.c ****       png_handle_unknown(png_ptr, info_ptr, png_ptr->push_length, keep);
 1193              		.loc 1 270 0
 1194 01c2 8B935803 		movl	856(%rbx), %edx
 1194      0000
 1195 01c8 8D4A04   		leal	4(%rdx), %ecx
 1196 01cb 483B8B70 		cmpq	880(%rbx), %rcx
 1196      030000
 1197 01d2 0F8768FF 		ja	.L128
 1197      FFFF
 271:fltk-1.3.4-1/png/pngpread.c **** 
 1198              		.loc 1 271 0
 1199 01d8 89C1     		movl	%eax, %ecx
 1200 01da 4C89E6   		movq	%r12, %rsi
 1201 01dd 4889DF   		movq	%rbx, %rdi
 1202 01e0 E8000000 		call	png_handle_unknown
 1202      00
 1203              	.LVL113:
 273:fltk-1.3.4-1/png/pngpread.c ****          png_ptr->mode |= PNG_HAVE_PLTE;
 1204              		.loc 1 273 0
 1205 01e5 81FD4554 		cmpl	$1347179589, %ebp
 1205      4C50
 274:fltk-1.3.4-1/png/pngpread.c ****    }
 1206              		.loc 1 274 0
 1207 01eb 8B832C01 		movl	300(%rbx), %eax
 1207      0000
 273:fltk-1.3.4-1/png/pngpread.c ****          png_ptr->mode |= PNG_HAVE_PLTE;
 1208              		.loc 1 273 0
 1209 01f1 0F85FFFE 		jne	.L126
 1209      FFFF
 274:fltk-1.3.4-1/png/pngpread.c ****    }
 1210              		.loc 1 274 0
 1211 01f7 83C802   		orl	$2, %eax
 1212 01fa E9F7FEFF 		jmp	.L126
 1212      FF
 1213 01ff 90       		.p2align 4,,10
 1214              		.p2align 3
 1215              	.L174:
 225:fltk-1.3.4-1/png/pngpread.c **** 
 1216              		.loc 1 225 0
 1217 0200 80CC20   		orb	$32, %ah
 1218 0203 89832C01 		movl	%eax, 300(%rbx)
 1218      0000
 1219 0209 E968FFFF 		jmp	.L118
 1219      FF
 1220 020e 6690     		.p2align 4,,10
 1221              		.p2align 3
 1222              	.L177:
 242:fltk-1.3.4-1/png/pngpread.c ****             return;
 1223              		.loc 1 242 0
 1224 0210 8B935803 		movl	856(%rbx), %edx
 1224      0000
 1225 0216 85D2     		testl	%edx, %edx
 1226 0218 758B     		jne	.L121
 1227 021a E929FFFF 		jmp	.L113
 1227      FF
 1228 021f 90       		.p2align 4,,10
 1229              		.p2align 3
 1230              	.L176:
 234:fltk-1.3.4-1/png/pngpread.c ****           (png_ptr->mode & PNG_HAVE_PLTE) == 0)
 1231              		.loc 1 234 0 discriminator 1
 1232 0220 A802     		testb	$2, %al
 1233 0222 0F8563FF 		jne	.L120
 1233      FFFF
 236:fltk-1.3.4-1/png/pngpread.c **** 
 1234              		.loc 1 236 0
 1235 0228 BE000000 		movl	$.LC15, %esi
 1235      00
 1236 022d 4889DF   		movq	%rbx, %rdi
 1237 0230 E8000000 		call	png_error
 1237      00
 1238              	.LVL114:
 1239              		.p2align 4,,10
 1240 0235 0F1F00   		.p2align 3
 1241              	.L127:
 268:fltk-1.3.4-1/png/pngpread.c ****    {
 1242              		.loc 1 268 0
 1243 0238 89EE     		movl	%ebp, %esi
 1244 023a 4889DF   		movq	%rbx, %rdi
 1245 023d E8000000 		call	png_chunk_unknown_handling
 1245      00
 1246              	.LVL115:
 1247 0242 85C0     		testl	%eax, %eax
 1248 0244 0F8578FF 		jne	.L152
 1248      FFFF
 278:fltk-1.3.4-1/png/pngpread.c ****    {
 1249              		.loc 1 278 0
 1250 024a 81FD4554 		cmpl	$1347179589, %ebp
 1250      4C50
 1251 0250 0F844A01 		je	.L180
 1251      0000
 297:fltk-1.3.4-1/png/pngpread.c ****    {
 1252              		.loc 1 297 0
 1253 0256 8B831802 		movl	536(%rbx), %eax
 1253      0000
 1254              	.LVL116:
 299:fltk-1.3.4-1/png/pngpread.c ****       png_handle_gAMA(png_ptr, info_ptr, png_ptr->push_length);
 1255              		.loc 1 299 0
 1256 025c 8B935803 		movl	856(%rbx), %edx
 1256      0000
 297:fltk-1.3.4-1/png/pngpread.c ****    {
 1257              		.loc 1 297 0
 1258 0262 3D414D41 		cmpl	$1732332865, %eax
 1258      67
 1259 0267 0F84C301 		je	.L181
 1259      0000
 305:fltk-1.3.4-1/png/pngpread.c ****    {
 1260              		.loc 1 305 0
 1261 026d 3D544942 		cmpl	$1933723988, %eax
 1261      73
 1262 0272 0F840001 		je	.L182
 1262      0000
 313:fltk-1.3.4-1/png/pngpread.c ****    {
 1263              		.loc 1 313 0
 1264 0278 3D4D5248 		cmpl	$1665684045, %eax
 1264      63
 1265 027d 0F84FD01 		je	.L183
 1265      0000
 321:fltk-1.3.4-1/png/pngpread.c ****    {
 1266              		.loc 1 321 0
 1267 0283 81FD4247 		cmpl	$1934772034, %ebp
 1267      5273
 1268 0289 0F841702 		je	.L184
 1268      0000
 329:fltk-1.3.4-1/png/pngpread.c ****    {
 1269              		.loc 1 329 0
 1270 028f 3D504343 		cmpl	$1766015824, %eax
 1270      69
 331:fltk-1.3.4-1/png/pngpread.c ****       png_handle_iCCP(png_ptr, info_ptr, png_ptr->push_length);
 1271              		.loc 1 331 0
 1272 0294 8D4204   		leal	4(%rdx), %eax
 329:fltk-1.3.4-1/png/pngpread.c ****    {
 1273              		.loc 1 329 0
 1274 0297 0F842F02 		je	.L185
 1274      0000
 337:fltk-1.3.4-1/png/pngpread.c ****    {
 1275              		.loc 1 337 0
 1276 029d 81FD544C 		cmpl	$1934642260, %ebp
 1276      5073
 1277 02a3 0F844602 		je	.L186
 1277      0000
 345:fltk-1.3.4-1/png/pngpread.c ****    {
 1278              		.loc 1 345 0
 1279 02a9 81FD534E 		cmpl	$1951551059, %ebp
 1279      5274
 1280 02af 0F845D02 		je	.L187
 1280      0000
 353:fltk-1.3.4-1/png/pngpread.c ****    {
 1281              		.loc 1 353 0
 1282 02b5 81FD4447 		cmpl	$1649100612, %ebp
 1282      4B62
 1283 02bb 0F847402 		je	.L188
 1283      0000
 361:fltk-1.3.4-1/png/pngpread.c ****    {
 1284              		.loc 1 361 0
 1285 02c1 81FD5453 		cmpl	$1749635924, %ebp
 1285      4968
 1286 02c7 0F848B02 		je	.L189
 1286      0000
 369:fltk-1.3.4-1/png/pngpread.c ****    {
 1287              		.loc 1 369 0
 1288 02cd 81FD7359 		cmpl	$1883789683, %ebp
 1288      4870
 1289 02d3 0F84A202 		je	.L190
 1289      0000
 377:fltk-1.3.4-1/png/pngpread.c ****    {
 1290              		.loc 1 377 0
 1291 02d9 81FD7346 		cmpl	$1866876531, %ebp
 1291      466F
 1292 02df 0F84B902 		je	.L191
 1292      0000
 385:fltk-1.3.4-1/png/pngpread.c ****    {
 1293              		.loc 1 385 0
 1294 02e5 81FD4C41 		cmpl	$1883455820, %ebp
 1294      4370
 1295 02eb 0F84D002 		je	.L192
 1295      0000
 393:fltk-1.3.4-1/png/pngpread.c ****    {
 1296              		.loc 1 393 0
 1297 02f1 81FD4C41 		cmpl	$1933787468, %ebp
 1297      4373
 1298 02f7 0F84E702 		je	.L193
 1298      0000
 401:fltk-1.3.4-1/png/pngpread.c ****    {
 1299              		.loc 1 401 0
 1300 02fd 81FD454D 		cmpl	$1950960965, %ebp
 1300      4974
 1301 0303 0F840303 		je	.L194
 1301      0000
 409:fltk-1.3.4-1/png/pngpread.c ****    {
 1302              		.loc 1 409 0
 1303 0309 81FD7458 		cmpl	$1950701684, %ebp
 1303      4574
 1304 030f 0F841A03 		je	.L195
 1304      0000
 417:fltk-1.3.4-1/png/pngpread.c ****    {
 1305              		.loc 1 417 0
 1306 0315 81FD7458 		cmpl	$2052348020, %ebp
 1306      547A
 1307 031b 0F846E03 		je	.L196
 1307      0000
 425:fltk-1.3.4-1/png/pngpread.c ****    {
 1308              		.loc 1 425 0
 1309 0321 81FD7458 		cmpl	$1767135348, %ebp
 1309      5469
 1310 0327 0F843F03 		je	.L197
 1310      0000
 434:fltk-1.3.4-1/png/pngpread.c ****       png_handle_unknown(png_ptr, info_ptr, png_ptr->push_length,
 1311              		.loc 1 434 0
 1312 032d 483B8370 		cmpq	880(%rbx), %rax
 1312      030000
 1313 0334 0F8706FE 		ja	.L128
 1313      FFFF
 435:fltk-1.3.4-1/png/pngpread.c ****          PNG_HANDLE_CHUNK_AS_DEFAULT);
 1314              		.loc 1 435 0
 1315 033a 31C9     		xorl	%ecx, %ecx
 1316 033c 4C89E6   		movq	%r12, %rsi
 1317 033f 4889DF   		movq	%rbx, %rdi
 1318 0342 E8000000 		call	png_handle_unknown
 1318      00
 1319              	.LVL117:
 1320 0347 660F1F84 		.p2align 4,,10
 1320      00000000 
 1320      00
 1321              		.p2align 3
 1322              	.L168:
 1323 0350 8B832C01 		movl	300(%rbx), %eax
 1323      0000
 1324 0356 E99BFDFF 		jmp	.L126
 1324      FF
 1325 035b 0F1F4400 		.p2align 4,,10
 1325      00
 1326              		.p2align 3
 1327              	.L178:
 246:fltk-1.3.4-1/png/pngpread.c ****    }
 1328              		.loc 1 246 0
 1329 0360 BE000000 		movl	$.LC16, %esi
 1329      00
 1330 0365 4889DF   		movq	%rbx, %rdi
 1331 0368 E8000000 		call	png_benign_error
 1331      00
 1332              	.LVL118:
 1333 036d E93BFEFF 		jmp	.L122
 1333      FF
 1334              		.p2align 4,,10
 1335 0372 660F1F44 		.p2align 3
 1335      0000
 1336              	.L182:
 307:fltk-1.3.4-1/png/pngpread.c ****       png_handle_sBIT(png_ptr, info_ptr, png_ptr->push_length);
 1337              		.loc 1 307 0
 1338 0378 8D4204   		leal	4(%rdx), %eax
 1339 037b 483B8370 		cmpq	880(%rbx), %rax
 1339      030000
 1340 0382 0F87B8FD 		ja	.L128
 1340      FFFF
 308:fltk-1.3.4-1/png/pngpread.c ****    }
 1341              		.loc 1 308 0
 1342 0388 4C89E6   		movq	%r12, %rsi
 1343 038b 4889DF   		movq	%rbx, %rdi
 1344 038e E8000000 		call	png_handle_sBIT
 1344      00
 1345              	.LVL119:
 1346 0393 8B832C01 		movl	300(%rbx), %eax
 1346      0000
 1347 0399 E958FDFF 		jmp	.L126
 1347      FF
 1348              	.LVL120:
 1349 039e 6690     		.p2align 4,,10
 1350              		.p2align 3
 1351              	.L180:
 280:fltk-1.3.4-1/png/pngpread.c ****       png_handle_PLTE(png_ptr, info_ptr, png_ptr->push_length);
 1352              		.loc 1 280 0
 1353 03a0 8B935803 		movl	856(%rbx), %edx
 1353      0000
 1354 03a6 8D4204   		leal	4(%rdx), %eax
 1355              	.LVL121:
 1356 03a9 483B8370 		cmpq	880(%rbx), %rax
 1356      030000
 1357 03b0 0F878AFD 		ja	.L128
 1357      FFFF
 281:fltk-1.3.4-1/png/pngpread.c ****    }
 1358              		.loc 1 281 0
 1359 03b6 4C89E6   		movq	%r12, %rsi
 1360 03b9 4889DF   		movq	%rbx, %rdi
 1361 03bc E8000000 		call	png_handle_PLTE
 1361      00
 1362              	.LVL122:
 1363 03c1 8B832C01 		movl	300(%rbx), %eax
 1363      0000
 1364 03c7 E92AFDFF 		jmp	.L126
 1364      FF
 1365              	.LVL123:
 1366 03cc 0F1F4000 		.p2align 4,,10
 1367              		.p2align 3
 1368              	.L179:
 286:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->process_mode = PNG_READ_IDAT_MODE;
 1369              		.loc 1 286 0
 1370 03d0 8B835803 		movl	856(%rbx), %eax
 1370      0000
 1371              	.LVL124:
 287:fltk-1.3.4-1/png/pngpread.c ****       png_push_have_info(png_ptr, info_ptr);
 1372              		.loc 1 287 0
 1373 03d6 C7838003 		movl	$2, 896(%rbx)
 1373      00000200 
 1373      0000
 1374              	.LVL125:
 286:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->process_mode = PNG_READ_IDAT_MODE;
 1375              		.loc 1 286 0
 1376 03e0 89835802 		movl	%eax, 600(%rbx)
 1376      0000
 1377              	.LBB152:
 1378              	.LBB153:
1111:fltk-1.3.4-1/png/pngpread.c ****       (*(png_ptr->info_fn))(png_ptr, info_ptr);
 1379              		.loc 1 1111 0
 1380 03e6 488B8320 		movq	800(%rbx), %rax
 1380      030000
 1381 03ed 4885C0   		testq	%rax, %rax
 1382 03f0 7408     		je	.L132
1112:fltk-1.3.4-1/png/pngpread.c **** }
 1383              		.loc 1 1112 0
 1384 03f2 4C89E6   		movq	%r12, %rsi
 1385 03f5 4889DF   		movq	%rbx, %rdi
 1386 03f8 FFD0     		call	*%rax
 1387              	.LVL126:
 1388              	.L132:
 1389              	.LBE153:
 1390              	.LBE152:
 290:fltk-1.3.4-1/png/pngpread.c ****           png_ptr->iwidth) + 1;
 1391              		.loc 1 290 0
 1392 03fa 0FB6837A 		movzbl	634(%rbx), %eax
 1392      020000
 291:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->zstream.next_out = png_ptr->row_buf;
 1393              		.loc 1 291 0
 1394 0401 3C07     		cmpb	$7, %al
 1395 0403 765B     		jbe	.L133
 291:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->zstream.next_out = png_ptr->row_buf;
 1396              		.loc 1 291 0 is_stmt 0 discriminator 1
 1397 0405 C0E803   		shrb	$3, %al
 1398 0408 0FB6C0   		movzbl	%al, %eax
 1399 040b 0FAF8310 		imull	528(%rbx), %eax
 1399      020000
 1400 0412 83C001   		addl	$1, %eax
 1401              	.L134:
 289:fltk-1.3.4-1/png/pngpread.c ****           (uInt) PNG_ROWBYTES(png_ptr->pixel_depth,
 1402              		.loc 1 289 0 is_stmt 1
 1403 0415 89836001 		movl	%eax, 352(%rbx)
 1403      0000
 292:fltk-1.3.4-1/png/pngpread.c ****       return;
 1404              		.loc 1 292 0
 1405 041b 488B8328 		movq	552(%rbx), %rax
 1405      020000
 1406 0422 48898358 		movq	%rax, 344(%rbx)
 1406      010000
 293:fltk-1.3.4-1/png/pngpread.c ****    }
 1407              		.loc 1 293 0
 1408 0429 E91AFDFF 		jmp	.L113
 1408      FF
 1409 042e 6690     		.p2align 4,,10
 1410              		.p2align 3
 1411              	.L181:
 299:fltk-1.3.4-1/png/pngpread.c ****       png_handle_gAMA(png_ptr, info_ptr, png_ptr->push_length);
 1412              		.loc 1 299 0
 1413 0430 8D4204   		leal	4(%rdx), %eax
 1414 0433 483B8370 		cmpq	880(%rbx), %rax
 1414      030000
 1415 043a 0F8700FD 		ja	.L128
 1415      FFFF
 300:fltk-1.3.4-1/png/pngpread.c ****    }
 1416              		.loc 1 300 0
 1417 0440 4C89E6   		movq	%r12, %rsi
 1418 0443 4889DF   		movq	%rbx, %rdi
 1419 0446 E8000000 		call	png_handle_gAMA
 1419      00
 1420              	.LVL127:
 1421 044b 8B832C01 		movl	300(%rbx), %eax
 1421      0000
 1422 0451 E9A0FCFF 		jmp	.L126
 1422      FF
 1423 0456 662E0F1F 		.p2align 4,,10
 1423      84000000 
 1423      0000
 1424              		.p2align 3
 1425              	.L133:
 291:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->zstream.next_out = png_ptr->row_buf;
 1426              		.loc 1 291 0 discriminator 2
 1427 0460 8B931002 		movl	528(%rbx), %edx
 1427      0000
 1428 0466 480FAFC2 		imulq	%rdx, %rax
 1429 046a 4883C007 		addq	$7, %rax
 1430 046e 48C1E803 		shrq	$3, %rax
 1431 0472 83C001   		addl	$1, %eax
 1432 0475 EB9E     		jmp	.L134
 1433 0477 660F1F84 		.p2align 4,,10
 1433      00000000 
 1433      00
 1434              		.p2align 3
 1435              	.L183:
 315:fltk-1.3.4-1/png/pngpread.c ****       png_handle_cHRM(png_ptr, info_ptr, png_ptr->push_length);
 1436              		.loc 1 315 0
 1437 0480 8D4204   		leal	4(%rdx), %eax
 1438 0483 483B8370 		cmpq	880(%rbx), %rax
 1438      030000
 1439 048a 0F87B0FC 		ja	.L128
 1439      FFFF
 316:fltk-1.3.4-1/png/pngpread.c ****    }
 1440              		.loc 1 316 0
 1441 0490 4C89E6   		movq	%r12, %rsi
 1442 0493 4889DF   		movq	%rbx, %rdi
 1443 0496 E8000000 		call	png_handle_cHRM
 1443      00
 1444              	.LVL128:
 1445 049b 8B832C01 		movl	300(%rbx), %eax
 1445      0000
 1446 04a1 E950FCFF 		jmp	.L126
 1446      FF
 1447              	.L184:
 323:fltk-1.3.4-1/png/pngpread.c ****       png_handle_sRGB(png_ptr, info_ptr, png_ptr->push_length);
 1448              		.loc 1 323 0
 1449 04a6 8D4204   		leal	4(%rdx), %eax
 1450 04a9 483B8370 		cmpq	880(%rbx), %rax
 1450      030000
 1451 04b0 0F878AFC 		ja	.L128
 1451      FFFF
 324:fltk-1.3.4-1/png/pngpread.c ****    }
 1452              		.loc 1 324 0
 1453 04b6 4C89E6   		movq	%r12, %rsi
 1454 04b9 4889DF   		movq	%rbx, %rdi
 1455 04bc E8000000 		call	png_handle_sRGB
 1455      00
 1456              	.LVL129:
 1457 04c1 8B832C01 		movl	300(%rbx), %eax
 1457      0000
 1458 04c7 E92AFCFF 		jmp	.L126
 1458      FF
 1459              	.L185:
 331:fltk-1.3.4-1/png/pngpread.c ****       png_handle_iCCP(png_ptr, info_ptr, png_ptr->push_length);
 1460              		.loc 1 331 0
 1461 04cc 483B8370 		cmpq	880(%rbx), %rax
 1461      030000
 1462 04d3 0F8767FC 		ja	.L128
 1462      FFFF
 332:fltk-1.3.4-1/png/pngpread.c ****    }
 1463              		.loc 1 332 0
 1464 04d9 4C89E6   		movq	%r12, %rsi
 1465 04dc 4889DF   		movq	%rbx, %rdi
 1466 04df E8000000 		call	png_handle_iCCP
 1466      00
 1467              	.LVL130:
 1468 04e4 8B832C01 		movl	300(%rbx), %eax
 1468      0000
 1469 04ea E907FCFF 		jmp	.L126
 1469      FF
 1470              	.L186:
 339:fltk-1.3.4-1/png/pngpread.c ****       png_handle_sPLT(png_ptr, info_ptr, png_ptr->push_length);
 1471              		.loc 1 339 0
 1472 04ef 483B8370 		cmpq	880(%rbx), %rax
 1472      030000
 1473 04f6 0F8744FC 		ja	.L128
 1473      FFFF
 340:fltk-1.3.4-1/png/pngpread.c ****    }
 1474              		.loc 1 340 0
 1475 04fc 4C89E6   		movq	%r12, %rsi
 1476 04ff 4889DF   		movq	%rbx, %rdi
 1477 0502 E8000000 		call	png_handle_sPLT
 1477      00
 1478              	.LVL131:
 1479 0507 8B832C01 		movl	300(%rbx), %eax
 1479      0000
 1480 050d E9E4FBFF 		jmp	.L126
 1480      FF
 1481              	.L187:
 347:fltk-1.3.4-1/png/pngpread.c ****       png_handle_tRNS(png_ptr, info_ptr, png_ptr->push_length);
 1482              		.loc 1 347 0
 1483 0512 483B8370 		cmpq	880(%rbx), %rax
 1483      030000
 1484 0519 0F8721FC 		ja	.L128
 1484      FFFF
 348:fltk-1.3.4-1/png/pngpread.c ****    }
 1485              		.loc 1 348 0
 1486 051f 4C89E6   		movq	%r12, %rsi
 1487 0522 4889DF   		movq	%rbx, %rdi
 1488 0525 E8000000 		call	png_handle_tRNS
 1488      00
 1489              	.LVL132:
 1490 052a 8B832C01 		movl	300(%rbx), %eax
 1490      0000
 1491 0530 E9C1FBFF 		jmp	.L126
 1491      FF
 1492              	.L188:
 355:fltk-1.3.4-1/png/pngpread.c ****       png_handle_bKGD(png_ptr, info_ptr, png_ptr->push_length);
 1493              		.loc 1 355 0
 1494 0535 483B8370 		cmpq	880(%rbx), %rax
 1494      030000
 1495 053c 0F87FEFB 		ja	.L128
 1495      FFFF
 356:fltk-1.3.4-1/png/pngpread.c ****    }
 1496              		.loc 1 356 0
 1497 0542 4C89E6   		movq	%r12, %rsi
 1498 0545 4889DF   		movq	%rbx, %rdi
 1499 0548 E8000000 		call	png_handle_bKGD
 1499      00
 1500              	.LVL133:
 1501 054d 8B832C01 		movl	300(%rbx), %eax
 1501      0000
 1502 0553 E99EFBFF 		jmp	.L126
 1502      FF
 1503              	.L189:
 363:fltk-1.3.4-1/png/pngpread.c ****       png_handle_hIST(png_ptr, info_ptr, png_ptr->push_length);
 1504              		.loc 1 363 0
 1505 0558 483B8370 		cmpq	880(%rbx), %rax
 1505      030000
 1506 055f 0F87DBFB 		ja	.L128
 1506      FFFF
 364:fltk-1.3.4-1/png/pngpread.c ****    }
 1507              		.loc 1 364 0
 1508 0565 4C89E6   		movq	%r12, %rsi
 1509 0568 4889DF   		movq	%rbx, %rdi
 1510 056b E8000000 		call	png_handle_hIST
 1510      00
 1511              	.LVL134:
 1512 0570 8B832C01 		movl	300(%rbx), %eax
 1512      0000
 1513 0576 E97BFBFF 		jmp	.L126
 1513      FF
 1514              	.L190:
 371:fltk-1.3.4-1/png/pngpread.c ****       png_handle_pHYs(png_ptr, info_ptr, png_ptr->push_length);
 1515              		.loc 1 371 0
 1516 057b 483B8370 		cmpq	880(%rbx), %rax
 1516      030000
 1517 0582 0F87B8FB 		ja	.L128
 1517      FFFF
 372:fltk-1.3.4-1/png/pngpread.c ****    }
 1518              		.loc 1 372 0
 1519 0588 4C89E6   		movq	%r12, %rsi
 1520 058b 4889DF   		movq	%rbx, %rdi
 1521 058e E8000000 		call	png_handle_pHYs
 1521      00
 1522              	.LVL135:
 1523 0593 8B832C01 		movl	300(%rbx), %eax
 1523      0000
 1524 0599 E958FBFF 		jmp	.L126
 1524      FF
 1525              	.L191:
 379:fltk-1.3.4-1/png/pngpread.c ****       png_handle_oFFs(png_ptr, info_ptr, png_ptr->push_length);
 1526              		.loc 1 379 0
 1527 059e 483B8370 		cmpq	880(%rbx), %rax
 1527      030000
 1528 05a5 0F8795FB 		ja	.L128
 1528      FFFF
 380:fltk-1.3.4-1/png/pngpread.c ****    }
 1529              		.loc 1 380 0
 1530 05ab 4C89E6   		movq	%r12, %rsi
 1531 05ae 4889DF   		movq	%rbx, %rdi
 1532 05b1 E8000000 		call	png_handle_oFFs
 1532      00
 1533              	.LVL136:
 1534 05b6 8B832C01 		movl	300(%rbx), %eax
 1534      0000
 1535 05bc E935FBFF 		jmp	.L126
 1535      FF
 1536              	.L192:
 387:fltk-1.3.4-1/png/pngpread.c ****       png_handle_pCAL(png_ptr, info_ptr, png_ptr->push_length);
 1537              		.loc 1 387 0
 1538 05c1 483B8370 		cmpq	880(%rbx), %rax
 1538      030000
 1539 05c8 0F8772FB 		ja	.L128
 1539      FFFF
 388:fltk-1.3.4-1/png/pngpread.c ****    }
 1540              		.loc 1 388 0
 1541 05ce 4C89E6   		movq	%r12, %rsi
 1542 05d1 4889DF   		movq	%rbx, %rdi
 1543 05d4 E8000000 		call	png_handle_pCAL
 1543      00
 1544              	.LVL137:
 1545 05d9 8B832C01 		movl	300(%rbx), %eax
 1545      0000
 1546 05df E912FBFF 		jmp	.L126
 1546      FF
 1547              	.L193:
 395:fltk-1.3.4-1/png/pngpread.c ****       png_handle_sCAL(png_ptr, info_ptr, png_ptr->push_length);
 1548              		.loc 1 395 0
 1549 05e4 483B8370 		cmpq	880(%rbx), %rax
 1549      030000
 1550 05eb 0F874FFB 		ja	.L128
 1550      FFFF
 396:fltk-1.3.4-1/png/pngpread.c ****    }
 1551              		.loc 1 396 0
 1552 05f1 4C89E6   		movq	%r12, %rsi
 1553 05f4 4889DF   		movq	%rbx, %rdi
 1554 05f7 E8000000 		call	png_handle_sCAL
 1554      00
 1555              	.LVL138:
 1556 05fc 8B832C01 		movl	300(%rbx), %eax
 1556      0000
 1557 0602 E9EFFAFF 		jmp	.L126
 1557      FF
 1558              	.LVL139:
 1559              	.L173:
 440:fltk-1.3.4-1/png/pngpread.c **** 
 1560              		.loc 1 440 0
 1561 0607 E8000000 		call	__stack_chk_fail
 1561      00
 1562              	.LVL140:
 1563              	.L194:
 403:fltk-1.3.4-1/png/pngpread.c ****       png_handle_tIME(png_ptr, info_ptr, png_ptr->push_length);
 1564              		.loc 1 403 0
 1565 060c 483B8370 		cmpq	880(%rbx), %rax
 1565      030000
 1566 0613 0F8727FB 		ja	.L128
 1566      FFFF
 404:fltk-1.3.4-1/png/pngpread.c ****    }
 1567              		.loc 1 404 0
 1568 0619 4C89E6   		movq	%r12, %rsi
 1569 061c 4889DF   		movq	%rbx, %rdi
 1570 061f E8000000 		call	png_handle_tIME
 1570      00
 1571              	.LVL141:
 1572 0624 8B832C01 		movl	300(%rbx), %eax
 1572      0000
 1573 062a E9C7FAFF 		jmp	.L126
 1573      FF
 1574              	.L195:
 411:fltk-1.3.4-1/png/pngpread.c ****       png_handle_tEXt(png_ptr, info_ptr, png_ptr->push_length);
 1575              		.loc 1 411 0
 1576 062f 483B8370 		cmpq	880(%rbx), %rax
 1576      030000
 1577 0636 0F8704FB 		ja	.L128
 1577      FFFF
 412:fltk-1.3.4-1/png/pngpread.c ****    }
 1578              		.loc 1 412 0
 1579 063c 4C89E6   		movq	%r12, %rsi
 1580 063f 4889DF   		movq	%rbx, %rdi
 1581 0642 E8000000 		call	png_handle_tEXt
 1581      00
 1582              	.LVL142:
 1583 0647 8B832C01 		movl	300(%rbx), %eax
 1583      0000
 1584 064d E9A4FAFF 		jmp	.L126
 1584      FF
 1585              	.L175:
 232:fltk-1.3.4-1/png/pngpread.c **** 
 1586              		.loc 1 232 0
 1587 0652 BE000000 		movl	$.LC14, %esi
 1587      00
 1588 0657 4889DF   		movq	%rbx, %rdi
 1589 065a E8000000 		call	png_error
 1589      00
 1590              	.LVL143:
 1591              	.L172:
 252:fltk-1.3.4-1/png/pngpread.c **** 
 1592              		.loc 1 252 0
 1593 065f BE000000 		movl	$.LC17, %esi
 1593      00
 1594 0664 4889DF   		movq	%rbx, %rdi
 1595 0667 E8000000 		call	png_error
 1595      00
 1596              	.LVL144:
 1597              	.L197:
 427:fltk-1.3.4-1/png/pngpread.c ****       png_handle_iTXt(png_ptr, info_ptr, png_ptr->push_length);
 1598              		.loc 1 427 0
 1599 066c 483B8370 		cmpq	880(%rbx), %rax
 1599      030000
 1600 0673 0F87C7FA 		ja	.L128
 1600      FFFF
 428:fltk-1.3.4-1/png/pngpread.c ****    }
 1601              		.loc 1 428 0
 1602 0679 4C89E6   		movq	%r12, %rsi
 1603 067c 4889DF   		movq	%rbx, %rdi
 1604 067f E8000000 		call	png_handle_iTXt
 1604      00
 1605              	.LVL145:
 1606 0684 8B832C01 		movl	300(%rbx), %eax
 1606      0000
 1607 068a E967FAFF 		jmp	.L126
 1607      FF
 1608              	.L196:
 419:fltk-1.3.4-1/png/pngpread.c ****       png_handle_zTXt(png_ptr, info_ptr, png_ptr->push_length);
 1609              		.loc 1 419 0
 1610 068f 483B8370 		cmpq	880(%rbx), %rax
 1610      030000
 1611 0696 0F87A4FA 		ja	.L128
 1611      FFFF
 420:fltk-1.3.4-1/png/pngpread.c ****    }
 1612              		.loc 1 420 0
 1613 069c 4C89E6   		movq	%r12, %rsi
 1614 069f 4889DF   		movq	%rbx, %rdi
 1615 06a2 E8000000 		call	png_handle_zTXt
 1615      00
 1616              	.LVL146:
 1617 06a7 8B832C01 		movl	300(%rbx), %eax
 1617      0000
 1618 06ad E944FAFF 		jmp	.L126
 1618      FF
 1619              		.cfi_endproc
 1620              	.LFE61:
 1622              		.section	.text.unlikely.png_push_read_chunk
 1623              	.LCOLDE18:
 1624              		.section	.text.png_push_read_chunk
 1625              	.LHOTE18:
 1626              		.section	.text.unlikely.png_push_restore_buffer,"ax",@progbits
 1627              	.LCOLDB19:
 1628              		.section	.text.png_push_restore_buffer,"ax",@progbits
 1629              	.LHOTB19:
 1630              		.p2align 4,,15
 1631              		.globl	png_push_restore_buffer
 1633              	png_push_restore_buffer:
 1634              	.LFB66:
 610:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->current_buffer = buffer;
 1635              		.loc 1 610 0
 1636              		.cfi_startproc
 1637              	.LVL147:
 612:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->buffer_size = buffer_length + png_ptr->save_buffer_size;
 1638              		.loc 1 612 0
 1639 0000 48899778 		movq	%rdx, 888(%rdi)
 1639      030000
 613:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->current_buffer_ptr = png_ptr->current_buffer;
 1640              		.loc 1 613 0
 1641 0007 48039760 		addq	864(%rdi), %rdx
 1641      030000
 1642              	.LVL148:
 611:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->current_buffer_size = buffer_length;
 1643              		.loc 1 611 0
 1644 000e 4889B750 		movq	%rsi, 848(%rdi)
 1644      030000
 614:fltk-1.3.4-1/png/pngpread.c **** }
 1645              		.loc 1 614 0
 1646 0015 4889B748 		movq	%rsi, 840(%rdi)
 1646      030000
 613:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->current_buffer_ptr = png_ptr->current_buffer;
 1647              		.loc 1 613 0
 1648 001c 48899770 		movq	%rdx, 880(%rdi)
 1648      030000
 614:fltk-1.3.4-1/png/pngpread.c **** }
 1649              		.loc 1 614 0
 1650 0023 C3       		ret
 1651              		.cfi_endproc
 1652              	.LFE66:
 1654              		.section	.text.unlikely.png_push_restore_buffer
 1655              	.LCOLDE19:
 1656              		.section	.text.png_push_restore_buffer
 1657              	.LHOTE19:
 1658              		.section	.rodata.str1.1
 1659              	.LC20:
 1660 006a 62616420 		.string	"bad adaptive filter value"
 1660      61646170 
 1660      74697665 
 1660      2066696C 
 1660      74657220 
 1661              	.LC21:
 1662 0084 70726F67 		.string	"progressive row overflow"
 1662      72657373 
 1662      69766520 
 1662      726F7720 
 1662      6F766572 
 1663              		.section	.rodata.str1.8
 1664 00dc 00000000 		.align 8
 1665              	.LC22:
 1666 00e0 696E7465 		.string	"internal progressive row size calculation error"
 1666      726E616C 
 1666      2070726F 
 1666      67726573 
 1666      73697665 
 1667              		.section	.text.unlikely.png_push_process_row,"ax",@progbits
 1668              	.LCOLDB23:
 1669              		.section	.text.png_push_process_row,"ax",@progbits
 1670              	.LHOTB23:
 1671              		.p2align 4,,15
 1672              		.globl	png_push_process_row
 1674              	png_push_process_row:
 1675              	.LFB69:
 818:fltk-1.3.4-1/png/pngpread.c ****    /* 1.5.6: row_info moved out of png_struct to a local here. */
 1676              		.loc 1 818 0
 1677              		.cfi_startproc
 1678              	.LVL149:
 1679 0000 55       		pushq	%rbp
 1680              		.cfi_def_cfa_offset 16
 1681              		.cfi_offset 6, -16
 1682 0001 53       		pushq	%rbx
 1683              		.cfi_def_cfa_offset 24
 1684              		.cfi_offset 3, -24
 1685 0002 4889FB   		movq	%rdi, %rbx
 1686 0005 4883EC28 		subq	$40, %rsp
 1687              		.cfi_def_cfa_offset 64
 822:fltk-1.3.4-1/png/pngpread.c ****    row_info.color_type = png_ptr->color_type;
 1688              		.loc 1 822 0
 1689 0009 8B8F1002 		movl	528(%rdi), %ecx
 1689      0000
 818:fltk-1.3.4-1/png/pngpread.c ****    /* 1.5.6: row_info moved out of png_struct to a local here. */
 1690              		.loc 1 818 0
 1691 000f 64488B04 		movq	%fs:40, %rax
 1691      25280000 
 1691      00
 1692 0018 48894424 		movq	%rax, 24(%rsp)
 1692      18
 1693 001d 31C0     		xorl	%eax, %eax
 823:fltk-1.3.4-1/png/pngpread.c ****    row_info.bit_depth = png_ptr->bit_depth;
 1694              		.loc 1 823 0
 1695 001f 0FB68777 		movzbl	631(%rdi), %eax
 1695      020000
 822:fltk-1.3.4-1/png/pngpread.c ****    row_info.color_type = png_ptr->color_type;
 1696              		.loc 1 822 0
 1697 0026 890C24   		movl	%ecx, (%rsp)
 823:fltk-1.3.4-1/png/pngpread.c ****    row_info.bit_depth = png_ptr->bit_depth;
 1698              		.loc 1 823 0
 1699 0029 88442410 		movb	%al, 16(%rsp)
 824:fltk-1.3.4-1/png/pngpread.c ****    row_info.channels = png_ptr->channels;
 1700              		.loc 1 824 0
 1701 002d 0FB68778 		movzbl	632(%rdi), %eax
 1701      020000
 1702 0034 88442411 		movb	%al, 17(%rsp)
 825:fltk-1.3.4-1/png/pngpread.c ****    row_info.pixel_depth = png_ptr->pixel_depth;
 1703              		.loc 1 825 0
 1704 0038 0FB6877B 		movzbl	635(%rdi), %eax
 1704      020000
 1705 003f 88442412 		movb	%al, 18(%rsp)
 826:fltk-1.3.4-1/png/pngpread.c ****    row_info.rowbytes = PNG_ROWBYTES(row_info.pixel_depth, row_info.width);
 1706              		.loc 1 826 0
 1707 0043 0FB6877A 		movzbl	634(%rdi), %eax
 1707      020000
 827:fltk-1.3.4-1/png/pngpread.c **** 
 1708              		.loc 1 827 0
 1709 004a 3C07     		cmpb	$7, %al
 826:fltk-1.3.4-1/png/pngpread.c ****    row_info.rowbytes = PNG_ROWBYTES(row_info.pixel_depth, row_info.width);
 1710              		.loc 1 826 0
 1711 004c 88442413 		movb	%al, 19(%rsp)
 827:fltk-1.3.4-1/png/pngpread.c **** 
 1712              		.loc 1 827 0
 1713 0050 0F862A01 		jbe	.L200
 1713      0000
 827:fltk-1.3.4-1/png/pngpread.c **** 
 1714              		.loc 1 827 0 is_stmt 0 discriminator 1
 1715 0056 C0E803   		shrb	$3, %al
 1716 0059 89CA     		movl	%ecx, %edx
 1717 005b 0FB6C0   		movzbl	%al, %eax
 1718 005e 480FAFD0 		imulq	%rax, %rdx
 1719              	.L201:
 829:fltk-1.3.4-1/png/pngpread.c ****    {
 1720              		.loc 1 829 0 is_stmt 1 discriminator 4
 1721 0062 488BB328 		movq	552(%rbx), %rsi
 1721      020000
 827:fltk-1.3.4-1/png/pngpread.c **** 
 1722              		.loc 1 827 0 discriminator 4
 1723 0069 48895424 		movq	%rdx, 8(%rsp)
 1723      08
 829:fltk-1.3.4-1/png/pngpread.c ****    {
 1724              		.loc 1 829 0 discriminator 4
 1725 006e 440FB606 		movzbl	(%rsi), %r8d
 1726 0072 4584C0   		testb	%r8b, %r8b
 1727 0075 7430     		je	.L202
 831:fltk-1.3.4-1/png/pngpread.c ****          png_read_filter_row(png_ptr, &row_info, png_ptr->row_buf + 1,
 1728              		.loc 1 831 0
 1729 0077 4180F804 		cmpb	$4, %r8b
 1730 007b 0F877A08 		ja	.L203
 1730      0000
 832:fltk-1.3.4-1/png/pngpread.c ****             png_ptr->prev_row + 1, png_ptr->row_buf[0]);
 1731              		.loc 1 832 0
 1732 0081 488B8320 		movq	544(%rbx), %rax
 1732      020000
 1733 0088 488D5601 		leaq	1(%rsi), %rdx
 1734 008c 4889DF   		movq	%rbx, %rdi
 1735              	.LVL150:
 1736 008f 4889E6   		movq	%rsp, %rsi
 1737 0092 488D4801 		leaq	1(%rax), %rcx
 1738 0096 E8000000 		call	png_read_filter_row
 1738      00
 1739              	.LVL151:
 1740 009b 488B5424 		movq	8(%rsp), %rdx
 1740      08
 1741 00a0 488BB328 		movq	552(%rbx), %rsi
 1741      020000
 1742              	.L202:
 1743              	.LVL152:
 1744              	.LBB154:
 1745              	.LBB155:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 1746              		.loc 2 53 0
 1747 00a7 488BBB20 		movq	544(%rbx), %rdi
 1747      020000
 1748 00ae 4883C201 		addq	$1, %rdx
 1749              	.LVL153:
 1750 00b2 E8000000 		call	memcpy
 1750      00
 1751              	.LVL154:
 1752              	.LBE155:
 1753              	.LBE154:
 846:fltk-1.3.4-1/png/pngpread.c ****       png_do_read_transformations(png_ptr, &row_info);
 1754              		.loc 1 846 0
 1755 00b7 8B833401 		movl	308(%rbx), %eax
 1755      0000
 1756 00bd 85C0     		testl	%eax, %eax
 1757 00bf 0F857301 		jne	.L393
 1757      0000
 1758              	.L204:
 851:fltk-1.3.4-1/png/pngpread.c ****    {
 1759              		.loc 1 851 0
 1760 00c5 0FB6837F 		movzbl	639(%rbx), %eax
 1760      020000
 1761 00cc 84C0     		testb	%al, %al
 1762 00ce 0F84C400 		je	.L394
 1762      0000
 858:fltk-1.3.4-1/png/pngpread.c ****       png_error(png_ptr, "internal progressive row size calculation error");
 1763              		.loc 1 858 0
 1764 00d4 3A442413 		cmpb	19(%rsp), %al
 1765 00d8 0F852A08 		jne	.L395
 1765      0000
 1766              	.L206:
 864:fltk-1.3.4-1/png/pngpread.c ****        (png_ptr->transformations & PNG_INTERLACE) != 0)
 1767              		.loc 1 864 0
 1768 00de 80BB7402 		cmpb	$0, 628(%rbx)
 1768      000000
 1769 00e5 0F84D500 		je	.L207
 1769      0000
 865:fltk-1.3.4-1/png/pngpread.c ****    {
 1770              		.loc 1 865 0 discriminator 1
 1771 00eb 8B8B3401 		movl	308(%rbx), %ecx
 1771      0000
 864:fltk-1.3.4-1/png/pngpread.c ****        (png_ptr->transformations & PNG_INTERLACE) != 0)
 1772              		.loc 1 864 0 discriminator 1
 1773 00f1 F6C102   		testb	$2, %cl
 1774 00f4 0F84C600 		je	.L207
 1774      0000
 867:fltk-1.3.4-1/png/pngpread.c ****          png_do_read_interlace(&row_info, png_ptr->row_buf + 1, png_ptr->pass,
 1775              		.loc 1 867 0
 1776 00fa 0FB69375 		movzbl	629(%rbx), %edx
 1776      020000
 1777 0101 80FA05   		cmpb	$5, %dl
 1778 0104 0F864601 		jbe	.L396
 1778      0000
 1779              	.L209:
 1780              	.LVL155:
 1781              	.LBB156:
 1782              	.LBB157:
1120:fltk-1.3.4-1/png/pngpread.c **** }
1121:fltk-1.3.4-1/png/pngpread.c **** 
1122:fltk-1.3.4-1/png/pngpread.c **** void /* PRIVATE */
1123:fltk-1.3.4-1/png/pngpread.c **** png_push_have_row(png_structrp png_ptr, png_bytep row)
1124:fltk-1.3.4-1/png/pngpread.c **** {
1125:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_fn != NULL)
 1783              		.loc 1 1125 0
 1784 010a 488B8328 		movq	808(%rbx), %rax
 1784      030000
 1785 0111 4885C0   		testq	%rax, %rax
 1786 0114 7419     		je	.L281
1126:fltk-1.3.4-1/png/pngpread.c ****       (*(png_ptr->row_fn))(png_ptr, row, png_ptr->row_number,
 1787              		.loc 1 1126 0
 1788 0116 488BBB28 		movq	552(%rbx), %rdi
 1788      020000
 1789 011d 0FB6CA   		movzbl	%dl, %ecx
 1790 0120 8B931402 		movl	532(%rbx), %edx
 1790      0000
 1791 0126 488D7701 		leaq	1(%rdi), %rsi
 1792 012a 4889DF   		movq	%rbx, %rdi
 1793 012d FFD0     		call	*%rax
 1794              	.LVL156:
 1795              	.L281:
 1796              	.LBE157:
 1797              	.LBE156:
 1798              	.LBB158:
 1799              	.LBB159:
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 1800              		.loc 1 1068 0
 1801 012f 8B831402 		movl	532(%rbx), %eax
 1801      0000
 1802 0135 83C001   		addl	$1, %eax
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 1803              		.loc 1 1069 0
 1804 0138 3B830002 		cmpl	512(%rbx), %eax
 1804      0000
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 1805              		.loc 1 1068 0
 1806 013e 89831402 		movl	%eax, 532(%rbx)
 1806      0000
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 1807              		.loc 1 1069 0
 1808 0144 720D     		jb	.L282
1072:fltk-1.3.4-1/png/pngpread.c ****    {
 1809              		.loc 1 1072 0
 1810 0146 80BB7402 		cmpb	$0, 628(%rbx)
 1810      000000
 1811 014d 0F856507 		jne	.L397
 1811      0000
 1812              	.L282:
 1813              	.LVL157:
 1814              	.LBE159:
 1815              	.LBE158:
1030:fltk-1.3.4-1/png/pngpread.c ****                break;
 1816              		.loc 1 1030 0
 1817 0153 80BB7502 		cmpb	$6, 629(%rbx)
 1817      000006
 1818 015a 0F85B800 		jne	.L199
 1818      0000
 1819              	.L388:
 1820              	.LVL158:
 1821              	.LBB161:
 1822              	.LBB162:
1125:fltk-1.3.4-1/png/pngpread.c ****       (*(png_ptr->row_fn))(png_ptr, row, png_ptr->row_number,
 1823              		.loc 1 1125 0
 1824 0160 488B8328 		movq	808(%rbx), %rax
 1824      030000
 1825 0167 4885C0   		testq	%rax, %rax
 1826 016a 747D     		je	.L284
 1827              		.loc 1 1126 0
 1828 016c 8B931402 		movl	532(%rbx), %edx
 1828      0000
 1829 0172 B9060000 		movl	$6, %ecx
 1829      00
 1830 0177 31F6     		xorl	%esi, %esi
 1831 0179 4889DF   		movq	%rbx, %rdi
 1832 017c FFD0     		call	*%rax
 1833              	.LVL159:
 1834 017e EB69     		jmp	.L284
 1835              	.LVL160:
 1836              		.p2align 4,,10
 1837              		.p2align 3
 1838              	.L200:
 1839              	.LBE162:
 1840              	.LBE161:
 827:fltk-1.3.4-1/png/pngpread.c **** 
 1841              		.loc 1 827 0 discriminator 2
 1842 0180 89CA     		movl	%ecx, %edx
 1843 0182 480FAFD0 		imulq	%rax, %rdx
 1844 0186 4883C207 		addq	$7, %rdx
 1845 018a 48C1EA03 		shrq	$3, %rdx
 1846 018e E9CFFEFF 		jmp	.L201
 1846      FF
 1847              		.p2align 4,,10
 1848 0193 0F1F4400 		.p2align 3
 1848      00
 1849              	.L394:
 853:fltk-1.3.4-1/png/pngpread.c ****       if (row_info.pixel_depth > png_ptr->maximum_pixel_depth)
 1850              		.loc 1 853 0
 1851 0198 0FB64424 		movzbl	19(%rsp), %eax
 1851      13
 854:fltk-1.3.4-1/png/pngpread.c ****          png_error(png_ptr, "progressive row overflow");
 1852              		.loc 1 854 0
 1853 019d 3A837E02 		cmpb	638(%rbx), %al
 1853      0000
 853:fltk-1.3.4-1/png/pngpread.c ****       if (row_info.pixel_depth > png_ptr->maximum_pixel_depth)
 1854              		.loc 1 853 0
 1855 01a3 88837F02 		movb	%al, 639(%rbx)
 1855      0000
 854:fltk-1.3.4-1/png/pngpread.c ****          png_error(png_ptr, "progressive row overflow");
 1856              		.loc 1 854 0
 1857 01a9 0F862FFF 		jbe	.L206
 1857      FFFF
 855:fltk-1.3.4-1/png/pngpread.c ****    }
 1858              		.loc 1 855 0
 1859 01af BE000000 		movl	$.LC21, %esi
 1859      00
 1860 01b4 4889DF   		movq	%rbx, %rdi
 1861 01b7 E8000000 		call	png_error
 1861      00
 1862              	.LVL161:
 1863 01bc 0F1F4000 		.p2align 4,,10
 1864              		.p2align 3
 1865              	.L207:
 1866              	.LBB163:
 1867              	.LBB164:
1125:fltk-1.3.4-1/png/pngpread.c ****       (*(png_ptr->row_fn))(png_ptr, row, png_ptr->row_number,
 1868              		.loc 1 1125 0
 1869 01c0 488B8328 		movq	808(%rbx), %rax
 1869      030000
 1870 01c7 4885C0   		testq	%rax, %rax
 1871 01ca 741D     		je	.L284
 1872              		.loc 1 1126 0
 1873 01cc 488BBB28 		movq	552(%rbx), %rdi
 1873      020000
 1874 01d3 0FB68B75 		movzbl	629(%rbx), %ecx
 1874      020000
 1875 01da 8B931402 		movl	532(%rbx), %edx
 1875      0000
 1876 01e0 488D7701 		leaq	1(%rdi), %rsi
 1877 01e4 4889DF   		movq	%rbx, %rdi
 1878 01e7 FFD0     		call	*%rax
 1879              	.LVL162:
 1880              	.L284:
 1881              	.LBE164:
 1882              	.LBE163:
 1883              	.LBB165:
 1884              	.LBB166:
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 1885              		.loc 1 1068 0
 1886 01e9 8B831402 		movl	532(%rbx), %eax
 1886      0000
 1887 01ef 83C001   		addl	$1, %eax
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 1888              		.loc 1 1069 0
 1889 01f2 3B830002 		cmpl	512(%rbx), %eax
 1889      0000
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 1890              		.loc 1 1068 0
 1891 01f8 89831402 		movl	%eax, 532(%rbx)
 1891      0000
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 1892              		.loc 1 1069 0
 1893 01fe 7218     		jb	.L199
 1894              	.LBE166:
 1895              	.LBE165:
 1896              	.LBB167:
 1897              	.LBB168:
 1898              	.LBB169:
1072:fltk-1.3.4-1/png/pngpread.c ****    {
 1899              		.loc 1 1072 0
 1900 0200 80BB7402 		cmpb	$0, 628(%rbx)
 1900      000000
 1901 0207 740F     		je	.L199
 1902 0209 4889DF   		movq	%rbx, %rdi
 1903 020c E8000000 		call	png_read_push_finish_row.part.1
 1903      00
 1904              	.LVL163:
 1905              		.p2align 4,,10
 1906 0211 0F1F8000 		.p2align 3
 1906      000000
 1907              	.L199:
 1908              	.LBE169:
 1909              	.LBE168:
 1910              	.LBE167:
1043:fltk-1.3.4-1/png/pngpread.c **** 
 1911              		.loc 1 1043 0
 1912 0218 488B4424 		movq	24(%rsp), %rax
 1912      18
 1913 021d 64483304 		xorq	%fs:40, %rax
 1913      25280000 
 1913      00
 1914 0226 0F85CA06 		jne	.L398
 1914      0000
 1915 022c 4883C428 		addq	$40, %rsp
 1916              		.cfi_remember_state
 1917              		.cfi_def_cfa_offset 24
 1918 0230 5B       		popq	%rbx
 1919              		.cfi_def_cfa_offset 16
 1920              	.LVL164:
 1921 0231 5D       		popq	%rbp
 1922              		.cfi_def_cfa_offset 8
 1923 0232 C3       		ret
 1924              	.LVL165:
 1925              		.p2align 4,,10
 1926 0233 0F1F4400 		.p2align 3
 1926      00
 1927              	.L393:
 1928              		.cfi_restore_state
 847:fltk-1.3.4-1/png/pngpread.c **** #endif
 1929              		.loc 1 847 0
 1930 0238 4889E6   		movq	%rsp, %rsi
 1931 023b 4889DF   		movq	%rbx, %rdi
 1932 023e E8000000 		call	png_do_read_transformations
 1932      00
 1933              	.LVL166:
 1934 0243 E97DFEFF 		jmp	.L204
 1934      FF
 1935 0248 0F1F8400 		.p2align 4,,10
 1935      00000000 
 1936              		.p2align 3
 1937              	.L396:
 868:fltk-1.3.4-1/png/pngpread.c ****             png_ptr->transformations);
 1938              		.loc 1 868 0
 1939 0250 488B8328 		movq	552(%rbx), %rax
 1939      020000
 1940 0257 4889E7   		movq	%rsp, %rdi
 1941 025a 488D7001 		leaq	1(%rax), %rsi
 1942 025e E8000000 		call	png_do_read_interlace
 1942      00
 1943              	.LVL167:
 1944 0263 0FB69375 		movzbl	629(%rbx), %edx
 1944      020000
 871:fltk-1.3.4-1/png/pngpread.c ****       {
 1945              		.loc 1 871 0
 1946 026a 80FA05   		cmpb	$5, %dl
 1947 026d 0F8797FE 		ja	.L209
 1947      FFFF
 1948 0273 FF24D500 		jmp	*.L211(,%rdx,8)
 1948      000000
 1949              		.section	.rodata.png_push_process_row,"a",@progbits
 1950              		.align 8
 1951              		.align 4
 1952              	.L211:
 1953 0000 00000000 		.quad	.L210
 1953      00000000 
 1954 0008 00000000 		.quad	.L212
 1954      00000000 
 1955 0010 00000000 		.quad	.L213
 1955      00000000 
 1956 0018 00000000 		.quad	.L214
 1956      00000000 
 1957 0020 00000000 		.quad	.L215
 1957      00000000 
 1958 0028 00000000 		.quad	.L216
 1958      00000000 
 1959              		.section	.text.png_push_process_row
 1960 027a 660F1F44 		.p2align 4,,10
 1960      0000
 1961              		.p2align 3
 1962              	.L215:
 871:fltk-1.3.4-1/png/pngpread.c ****       {
 1963              		.loc 1 871 0 is_stmt 0 discriminator 4
 1964 0280 BD020000 		movl	$2, %ebp
 1964      00
 1965              	.L267:
 1966              	.LVL168:
 1967              	.LBB186:
 1968              	.LBB187:
 1969              	.LBB188:
1125:fltk-1.3.4-1/png/pngpread.c ****       (*(png_ptr->row_fn))(png_ptr, row, png_ptr->row_number,
 1970              		.loc 1 1125 0 is_stmt 1 discriminator 4
 1971 0285 488B8328 		movq	808(%rbx), %rax
 1971      030000
 1972 028c 4885C0   		testq	%rax, %rax
 1973 028f 741B     		je	.L264
 1974              		.loc 1 1126 0
 1975 0291 488BBB28 		movq	552(%rbx), %rdi
 1975      020000
 1976 0298 8B931402 		movl	532(%rbx), %edx
 1976      0000
 1977 029e B9040000 		movl	$4, %ecx
 1977      00
 1978 02a3 488D7701 		leaq	1(%rdi), %rsi
 1979 02a7 4889DF   		movq	%rbx, %rdi
 1980 02aa FFD0     		call	*%rax
 1981              	.LVL169:
 1982              	.L264:
 1983              	.LBE188:
 1984              	.LBE187:
 1985              	.LBB189:
 1986              	.LBB190:
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 1987              		.loc 1 1068 0
 1988 02ac 8B831402 		movl	532(%rbx), %eax
 1988      0000
 1989 02b2 83C001   		addl	$1, %eax
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 1990              		.loc 1 1069 0
 1991 02b5 3B830002 		cmpl	512(%rbx), %eax
 1991      0000
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 1992              		.loc 1 1068 0
 1993 02bb 89831402 		movl	%eax, 532(%rbx)
 1993      0000
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 1994              		.loc 1 1069 0
 1995 02c1 720D     		jb	.L265
1072:fltk-1.3.4-1/png/pngpread.c ****    {
 1996              		.loc 1 1072 0
 1997 02c3 80BB7402 		cmpb	$0, 628(%rbx)
 1997      000000
 1998 02ca 0F85CE05 		jne	.L399
 1998      0000
 1999              	.L265:
 2000              	.LVL170:
 2001              	.LBE190:
 2002              	.LBE189:
 984:fltk-1.3.4-1/png/pngpread.c ****             {
 2003              		.loc 1 984 0 discriminator 4
 2004 02d0 83ED01   		subl	$1, %ebp
 2005              	.LVL171:
 2006 02d3 0F84D703 		je	.L266
 2006      0000
 984:fltk-1.3.4-1/png/pngpread.c ****             {
 2007              		.loc 1 984 0 is_stmt 0 discriminator 3
 2008 02d9 0FB68375 		movzbl	629(%rbx), %eax
 2008      020000
 2009 02e0 3C04     		cmpb	$4, %al
 2010 02e2 74A1     		je	.L267
 2011              	.LVL172:
 2012              		.p2align 4,,10
 2013 02e4 0F1F4000 		.p2align 3
 2014              	.L278:
 2015              	.LBE186:
 2016              	.LBB199:
1015:fltk-1.3.4-1/png/pngpread.c ****             {
 2017              		.loc 1 1015 0 is_stmt 1
 2018 02e8 3C06     		cmpb	$6, %al
 2019 02ea 0F8528FF 		jne	.L199
 2019      FFFF
 2020 02f0 E96BFEFF 		jmp	.L388
 2020      FF
 2021              		.p2align 4,,10
 2022 02f5 0F1F00   		.p2align 3
 2023              	.L214:
 2024              	.LBE199:
 871:fltk-1.3.4-1/png/pngpread.c ****       {
 2025              		.loc 1 871 0 discriminator 4
 2026 02f8 BD040000 		movl	$4, %ebp
 2026      00
 2027              	.L260:
 2028              	.LVL173:
 2029              	.LBB206:
 2030              	.LBB207:
 2031              	.LBB208:
1125:fltk-1.3.4-1/png/pngpread.c ****       (*(png_ptr->row_fn))(png_ptr, row, png_ptr->row_number,
 2032              		.loc 1 1125 0 discriminator 4
 2033 02fd 488B8328 		movq	808(%rbx), %rax
 2033      030000
 2034 0304 4885C0   		testq	%rax, %rax
 2035 0307 741B     		je	.L256
 2036              		.loc 1 1126 0
 2037 0309 488BBB28 		movq	552(%rbx), %rdi
 2037      020000
 2038 0310 8B931402 		movl	532(%rbx), %edx
 2038      0000
 2039 0316 B9030000 		movl	$3, %ecx
 2039      00
 2040 031b 488D7701 		leaq	1(%rdi), %rsi
 2041 031f 4889DF   		movq	%rbx, %rdi
 2042 0322 FFD0     		call	*%rax
 2043              	.LVL174:
 2044              	.L256:
 2045              	.LBE208:
 2046              	.LBE207:
 2047              	.LBB209:
 2048              	.LBB210:
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 2049              		.loc 1 1068 0
 2050 0324 8B831402 		movl	532(%rbx), %eax
 2050      0000
 2051 032a 83C001   		addl	$1, %eax
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 2052              		.loc 1 1069 0
 2053 032d 3B830002 		cmpl	512(%rbx), %eax
 2053      0000
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 2054              		.loc 1 1068 0
 2055 0333 89831402 		movl	%eax, 532(%rbx)
 2055      0000
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 2056              		.loc 1 1069 0
 2057 0339 720D     		jb	.L257
1072:fltk-1.3.4-1/png/pngpread.c ****    {
 2058              		.loc 1 1072 0
 2059 033b 80BB7402 		cmpb	$0, 628(%rbx)
 2059      000000
 2060 0342 0F855004 		jne	.L400
 2060      0000
 2061              	.L257:
 2062              	.LVL175:
 2063              	.LBE210:
 2064              	.LBE209:
 962:fltk-1.3.4-1/png/pngpread.c ****             {
 2065              		.loc 1 962 0 discriminator 4
 2066 0348 83ED01   		subl	$1, %ebp
 2067              	.LVL176:
 2068 034b 0FB68375 		movzbl	629(%rbx), %eax
 2068      020000
 2069 0352 740C     		je	.L259
 962:fltk-1.3.4-1/png/pngpread.c ****             {
 2070              		.loc 1 962 0 is_stmt 0 discriminator 3
 2071 0354 3C03     		cmpb	$3, %al
 2072 0356 74A5     		je	.L260
 2073 0358 0F1F8400 		.p2align 4,,10
 2073      00000000 
 2074              		.p2align 3
 2075              	.L259:
 968:fltk-1.3.4-1/png/pngpread.c ****             {
 2076              		.loc 1 968 0 is_stmt 1
 2077 0360 3C04     		cmpb	$4, %al
 2078 0362 0F85B0FE 		jne	.L199
 2078      FFFF
 2079 0368 BD020000 		movl	$2, %ebp
 2079      00
 2080              	.LVL177:
 2081              	.L263:
 2082              	.LBB212:
 2083              	.LBB213:
1125:fltk-1.3.4-1/png/pngpread.c ****       (*(png_ptr->row_fn))(png_ptr, row, png_ptr->row_number,
 2084              		.loc 1 1125 0
 2085 036d 488B8328 		movq	808(%rbx), %rax
 2085      030000
 2086 0374 4885C0   		testq	%rax, %rax
 2087 0377 7412     		je	.L261
 2088              		.loc 1 1126 0
 2089 0379 8B931402 		movl	532(%rbx), %edx
 2089      0000
 2090 037f B9040000 		movl	$4, %ecx
 2090      00
 2091 0384 31F6     		xorl	%esi, %esi
 2092 0386 4889DF   		movq	%rbx, %rdi
 2093 0389 FFD0     		call	*%rax
 2094              	.LVL178:
 2095              	.L261:
 2096              	.LBE213:
 2097              	.LBE212:
 2098              	.LBB214:
 2099              	.LBB215:
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 2100              		.loc 1 1068 0
 2101 038b 8B831402 		movl	532(%rbx), %eax
 2101      0000
 2102 0391 83C001   		addl	$1, %eax
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 2103              		.loc 1 1069 0
 2104 0394 3B830002 		cmpl	512(%rbx), %eax
 2104      0000
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 2105              		.loc 1 1068 0
 2106 039a 89831402 		movl	%eax, 532(%rbx)
 2106      0000
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 2107              		.loc 1 1069 0
 2108 03a0 720D     		jb	.L262
1072:fltk-1.3.4-1/png/pngpread.c ****    {
 2109              		.loc 1 1072 0
 2110 03a2 80BB7402 		cmpb	$0, 628(%rbx)
 2110      000000
 2111 03a9 0F852005 		jne	.L401
 2111      0000
 2112              	.L262:
 2113              	.LVL179:
 2114              	.LBE215:
 2115              	.LBE214:
 970:fltk-1.3.4-1/png/pngpread.c ****                {
 2116              		.loc 1 970 0 discriminator 4
 2117 03af 83ED01   		subl	$1, %ebp
 2118              	.LVL180:
 2119 03b2 0F8460FE 		je	.L199
 2119      FFFF
 970:fltk-1.3.4-1/png/pngpread.c ****                {
 2120              		.loc 1 970 0 is_stmt 0 discriminator 3
 2121 03b8 80BB7502 		cmpb	$4, 629(%rbx)
 2121      000004
 2122 03bf 74AC     		je	.L263
 2123 03c1 E952FEFF 		jmp	.L199
 2123      FF
 2124              	.LVL181:
 2125 03c6 662E0F1F 		.p2align 4,,10
 2125      84000000 
 2125      0000
 2126              		.p2align 3
 2127              	.L213:
 2128              	.LBE206:
 871:fltk-1.3.4-1/png/pngpread.c ****       {
 2129              		.loc 1 871 0 is_stmt 1 discriminator 4
 2130 03d0 BD040000 		movl	$4, %ebp
 2130      00
 2131              	.L247:
 2132              	.LVL182:
 2133              	.LBB219:
 2134              	.LBB220:
 2135              	.LBB221:
1125:fltk-1.3.4-1/png/pngpread.c ****       (*(png_ptr->row_fn))(png_ptr, row, png_ptr->row_number,
 2136              		.loc 1 1125 0 discriminator 4
 2137 03d5 488B8328 		movq	808(%rbx), %rax
 2137      030000
 2138 03dc 4885C0   		testq	%rax, %rax
 2139 03df 741B     		je	.L244
 2140              		.loc 1 1126 0
 2141 03e1 488BBB28 		movq	552(%rbx), %rdi
 2141      020000
 2142 03e8 8B931402 		movl	532(%rbx), %edx
 2142      0000
 2143 03ee B9020000 		movl	$2, %ecx
 2143      00
 2144 03f3 488D7701 		leaq	1(%rdi), %rsi
 2145 03f7 4889DF   		movq	%rbx, %rdi
 2146 03fa FFD0     		call	*%rax
 2147              	.LVL183:
 2148              	.L244:
 2149              	.LBE221:
 2150              	.LBE220:
 2151              	.LBB222:
 2152              	.LBB223:
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 2153              		.loc 1 1068 0
 2154 03fc 8B831402 		movl	532(%rbx), %eax
 2154      0000
 2155 0402 83C001   		addl	$1, %eax
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 2156              		.loc 1 1069 0
 2157 0405 3B830002 		cmpl	512(%rbx), %eax
 2157      0000
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 2158              		.loc 1 1068 0
 2159 040b 89831402 		movl	%eax, 532(%rbx)
 2159      0000
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 2160              		.loc 1 1069 0
 2161 0411 720D     		jb	.L245
1072:fltk-1.3.4-1/png/pngpread.c ****    {
 2162              		.loc 1 1072 0
 2163 0413 80BB7402 		cmpb	$0, 628(%rbx)
 2163      000000
 2164 041a 0F858803 		jne	.L402
 2164      0000
 2165              	.L245:
 2166              	.LVL184:
 2167              	.LBE223:
 2168              	.LBE222:
 934:fltk-1.3.4-1/png/pngpread.c ****             {
 2169              		.loc 1 934 0 discriminator 4
 2170 0420 83ED01   		subl	$1, %ebp
 2171              	.LVL185:
 2172 0423 0F84F702 		je	.L246
 2172      0000
 934:fltk-1.3.4-1/png/pngpread.c ****             {
 2173              		.loc 1 934 0 is_stmt 0 discriminator 3
 2174 0429 0FB68375 		movzbl	629(%rbx), %eax
 2174      020000
 2175 0430 3C02     		cmpb	$2, %al
 2176 0432 74A1     		je	.L247
 2177              	.LVL186:
 2178              		.p2align 4,,10
 2179 0434 0F1F4000 		.p2align 3
 2180              	.L248:
 946:fltk-1.3.4-1/png/pngpread.c ****             {
 2181              		.loc 1 946 0 is_stmt 1
 2182 0438 3C04     		cmpb	$4, %al
 2183 043a 0F85D8FD 		jne	.L199
 2183      FFFF
 2184 0440 BD020000 		movl	$2, %ebp
 2184      00
 2185              	.L255:
 2186              	.LVL187:
 2187              	.LBB225:
 2188              	.LBB226:
1125:fltk-1.3.4-1/png/pngpread.c ****       (*(png_ptr->row_fn))(png_ptr, row, png_ptr->row_number,
 2189              		.loc 1 1125 0
 2190 0445 488B8328 		movq	808(%rbx), %rax
 2190      030000
 2191 044c 4885C0   		testq	%rax, %rax
 2192 044f 7412     		je	.L253
 2193              		.loc 1 1126 0
 2194 0451 8B931402 		movl	532(%rbx), %edx
 2194      0000
 2195 0457 B9040000 		movl	$4, %ecx
 2195      00
 2196 045c 31F6     		xorl	%esi, %esi
 2197 045e 4889DF   		movq	%rbx, %rdi
 2198 0461 FFD0     		call	*%rax
 2199              	.LVL188:
 2200              	.L253:
 2201              	.LBE226:
 2202              	.LBE225:
 2203              	.LBB227:
 2204              	.LBB228:
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 2205              		.loc 1 1068 0
 2206 0463 8B831402 		movl	532(%rbx), %eax
 2206      0000
 2207 0469 83C001   		addl	$1, %eax
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 2208              		.loc 1 1069 0
 2209 046c 3B830002 		cmpl	512(%rbx), %eax
 2209      0000
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 2210              		.loc 1 1068 0
 2211 0472 89831402 		movl	%eax, 532(%rbx)
 2211      0000
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 2212              		.loc 1 1069 0
 2213 0478 720D     		jb	.L254
1072:fltk-1.3.4-1/png/pngpread.c ****    {
 2214              		.loc 1 1072 0
 2215 047a 80BB7402 		cmpb	$0, 628(%rbx)
 2215      000000
 2216 0481 0F855504 		jne	.L403
 2216      0000
 2217              	.L254:
 2218              	.LVL189:
 2219              	.LBE228:
 2220              	.LBE227:
 948:fltk-1.3.4-1/png/pngpread.c ****                {
 2221              		.loc 1 948 0 discriminator 4
 2222 0487 83ED01   		subl	$1, %ebp
 2223              	.LVL190:
 2224 048a 0F8488FD 		je	.L199
 2224      FFFF
 948:fltk-1.3.4-1/png/pngpread.c ****                {
 2225              		.loc 1 948 0 is_stmt 0 discriminator 3
 2226 0490 80BB7502 		cmpb	$4, 629(%rbx)
 2226      000004
 2227 0497 74AC     		je	.L255
 2228 0499 E97AFDFF 		jmp	.L199
 2228      FF
 2229              	.LVL191:
 2230 049e 6690     		.p2align 4,,10
 2231              		.p2align 3
 2232              	.L210:
 2233              	.LBE219:
 871:fltk-1.3.4-1/png/pngpread.c ****       {
 2234              		.loc 1 871 0 is_stmt 1 discriminator 4
 2235 04a0 BD080000 		movl	$8, %ebp
 2235      00
 2236 04a5 EB21     		jmp	.L221
 2237              	.LVL192:
 2238 04a7 660F1F84 		.p2align 4,,10
 2238      00000000 
 2238      00
 2239              		.p2align 3
 2240              	.L218:
 2241              	.LBB238:
 876:fltk-1.3.4-1/png/pngpread.c ****             {
 2242              		.loc 1 876 0 discriminator 4
 2243 04b0 83ED01   		subl	$1, %ebp
 2244              	.LVL193:
 2245 04b3 0FB68375 		movzbl	629(%rbx), %eax
 2245      020000
 2246 04ba 0F845001 		je	.L220
 2246      0000
 876:fltk-1.3.4-1/png/pngpread.c ****             {
 2247              		.loc 1 876 0 is_stmt 0 discriminator 3
 2248 04c0 84C0     		testb	%al, %al
 2249 04c2 0F854801 		jne	.L220
 2249      0000
 2250              	.LVL194:
 2251              	.L221:
 2252              	.LBB170:
 2253              	.LBB171:
1125:fltk-1.3.4-1/png/pngpread.c ****       (*(png_ptr->row_fn))(png_ptr, row, png_ptr->row_number,
 2254              		.loc 1 1125 0 is_stmt 1 discriminator 4
 2255 04c8 488B8328 		movq	808(%rbx), %rax
 2255      030000
 2256 04cf 4885C0   		testq	%rax, %rax
 2257 04d2 7418     		je	.L217
 2258              		.loc 1 1126 0
 2259 04d4 488BBB28 		movq	552(%rbx), %rdi
 2259      020000
 2260 04db 8B931402 		movl	532(%rbx), %edx
 2260      0000
 2261 04e1 31C9     		xorl	%ecx, %ecx
 2262 04e3 488D7701 		leaq	1(%rdi), %rsi
 2263 04e7 4889DF   		movq	%rbx, %rdi
 2264 04ea FFD0     		call	*%rax
 2265              	.LVL195:
 2266              	.L217:
 2267              	.LBE171:
 2268              	.LBE170:
 2269              	.LBB172:
 2270              	.LBB173:
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 2271              		.loc 1 1068 0
 2272 04ec 8B831402 		movl	532(%rbx), %eax
 2272      0000
 2273 04f2 83C001   		addl	$1, %eax
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 2274              		.loc 1 1069 0
 2275 04f5 3B830002 		cmpl	512(%rbx), %eax
 2275      0000
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 2276              		.loc 1 1068 0
 2277 04fb 89831402 		movl	%eax, 532(%rbx)
 2277      0000
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 2278              		.loc 1 1069 0
 2279 0501 72AD     		jb	.L218
1072:fltk-1.3.4-1/png/pngpread.c ****    {
 2280              		.loc 1 1072 0
 2281 0503 80BB7402 		cmpb	$0, 628(%rbx)
 2281      000000
 2282 050a 74A4     		je	.L218
 2283 050c 4889DF   		movq	%rbx, %rdi
 2284 050f E8000000 		call	png_read_push_finish_row.part.1
 2284      00
 2285              	.LVL196:
 2286 0514 EB9A     		jmp	.L218
 2287              	.LVL197:
 2288 0516 662E0F1F 		.p2align 4,,10
 2288      84000000 
 2288      0000
 2289              		.p2align 3
 2290              	.L212:
 2291              	.LBE173:
 2292              	.LBE172:
 2293              	.LBE238:
 871:fltk-1.3.4-1/png/pngpread.c ****       {
 2294              		.loc 1 871 0 discriminator 4
 2295 0520 BD080000 		movl	$8, %ebp
 2295      00
 2296 0525 EB21     		jmp	.L240
 2297              	.LVL198:
 2298 0527 660F1F84 		.p2align 4,,10
 2298      00000000 
 2298      00
 2299              		.p2align 3
 2300              	.L237:
 2301              	.LBB239:
 912:fltk-1.3.4-1/png/pngpread.c ****             {
 2302              		.loc 1 912 0 discriminator 4
 2303 0530 83ED01   		subl	$1, %ebp
 2304              	.LVL199:
 2305 0533 0FB68375 		movzbl	629(%rbx), %eax
 2305      020000
 2306 053a 0F840001 		je	.L239
 2306      0000
 912:fltk-1.3.4-1/png/pngpread.c ****             {
 2307              		.loc 1 912 0 is_stmt 0 discriminator 3
 2308 0540 3C01     		cmpb	$1, %al
 2309 0542 0F85F800 		jne	.L239
 2309      0000
 2310              	.LVL200:
 2311              	.L240:
 2312              	.LBB240:
 2313              	.LBB241:
1125:fltk-1.3.4-1/png/pngpread.c ****       (*(png_ptr->row_fn))(png_ptr, row, png_ptr->row_number,
 2314              		.loc 1 1125 0 is_stmt 1 discriminator 4
 2315 0548 488B8328 		movq	808(%rbx), %rax
 2315      030000
 2316 054f 4885C0   		testq	%rax, %rax
 2317 0552 741B     		je	.L236
 2318              		.loc 1 1126 0
 2319 0554 488BBB28 		movq	552(%rbx), %rdi
 2319      020000
 2320 055b 8B931402 		movl	532(%rbx), %edx
 2320      0000
 2321 0561 B9010000 		movl	$1, %ecx
 2321      00
 2322 0566 488D7701 		leaq	1(%rdi), %rsi
 2323 056a 4889DF   		movq	%rbx, %rdi
 2324 056d FFD0     		call	*%rax
 2325              	.LVL201:
 2326              	.L236:
 2327              	.LBE241:
 2328              	.LBE240:
 2329              	.LBB242:
 2330              	.LBB243:
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 2331              		.loc 1 1068 0
 2332 056f 8B831402 		movl	532(%rbx), %eax
 2332      0000
 2333 0575 83C001   		addl	$1, %eax
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 2334              		.loc 1 1069 0
 2335 0578 3B830002 		cmpl	512(%rbx), %eax
 2335      0000
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 2336              		.loc 1 1068 0
 2337 057e 89831402 		movl	%eax, 532(%rbx)
 2337      0000
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 2338              		.loc 1 1069 0
 2339 0584 72AA     		jb	.L237
1072:fltk-1.3.4-1/png/pngpread.c ****    {
 2340              		.loc 1 1072 0
 2341 0586 80BB7402 		cmpb	$0, 628(%rbx)
 2341      000000
 2342 058d 74A1     		je	.L237
 2343 058f 4889DF   		movq	%rbx, %rdi
 2344 0592 E8000000 		call	png_read_push_finish_row.part.1
 2344      00
 2345              	.LVL202:
 2346 0597 EB97     		jmp	.L237
 2347              	.LVL203:
 2348 0599 0F1F8000 		.p2align 4,,10
 2348      000000
 2349              		.p2align 3
 2350              	.L216:
 2351              	.LBE243:
 2352              	.LBE242:
 2353              	.LBE239:
 871:fltk-1.3.4-1/png/pngpread.c ****       {
 2354              		.loc 1 871 0 discriminator 4
 2355 05a0 BD020000 		movl	$2, %ebp
 2355      00
 2356              	.L279:
 2357              	.LVL204:
 2358              	.LBB250:
 2359              	.LBB200:
 2360              	.LBB201:
1125:fltk-1.3.4-1/png/pngpread.c ****       (*(png_ptr->row_fn))(png_ptr, row, png_ptr->row_number,
 2361              		.loc 1 1125 0 discriminator 4
 2362 05a5 488B8328 		movq	808(%rbx), %rax
 2362      030000
 2363 05ac 4885C0   		testq	%rax, %rax
 2364 05af 741B     		je	.L275
 2365              		.loc 1 1126 0
 2366 05b1 488B8B28 		movq	552(%rbx), %rcx
 2366      020000
 2367 05b8 8B931402 		movl	532(%rbx), %edx
 2367      0000
 2368 05be 4889DF   		movq	%rbx, %rdi
 2369 05c1 488D7101 		leaq	1(%rcx), %rsi
 2370 05c5 B9050000 		movl	$5, %ecx
 2370      00
 2371 05ca FFD0     		call	*%rax
 2372              	.LVL205:
 2373              	.L275:
 2374              	.LBE201:
 2375              	.LBE200:
 2376              	.LBB202:
 2377              	.LBB203:
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 2378              		.loc 1 1068 0
 2379 05cc 8B831402 		movl	532(%rbx), %eax
 2379      0000
 2380 05d2 83C001   		addl	$1, %eax
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 2381              		.loc 1 1069 0
 2382 05d5 3B830002 		cmpl	512(%rbx), %eax
 2382      0000
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 2383              		.loc 1 1068 0
 2384 05db 89831402 		movl	%eax, 532(%rbx)
 2384      0000
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 2385              		.loc 1 1069 0
 2386 05e1 720D     		jb	.L276
1072:fltk-1.3.4-1/png/pngpread.c ****    {
 2387              		.loc 1 1072 0
 2388 05e3 80BB7402 		cmpb	$0, 628(%rbx)
 2388      000000
 2389 05ea 0F859402 		jne	.L404
 2389      0000
 2390              	.L276:
 2391              	.LVL206:
 2392              	.LBE203:
 2393              	.LBE202:
1009:fltk-1.3.4-1/png/pngpread.c ****             {
 2394              		.loc 1 1009 0 discriminator 4
 2395 05f0 83ED01   		subl	$1, %ebp
 2396              	.LVL207:
 2397 05f3 0FB68375 		movzbl	629(%rbx), %eax
 2397      020000
 2398 05fa 0F84E8FC 		je	.L278
 2398      FFFF
1009:fltk-1.3.4-1/png/pngpread.c ****             {
 2399              		.loc 1 1009 0 is_stmt 0 discriminator 3
 2400 0600 3C05     		cmpb	$5, %al
 2401 0602 74A1     		je	.L279
 2402 0604 E9DFFCFF 		jmp	.L278
 2402      FF
 2403              	.LVL208:
 2404 0609 0F1F8000 		.p2align 4,,10
 2404      000000
 2405              		.p2align 3
 2406              	.L220:
 2407              	.LBE250:
 2408              	.LBB251:
 882:fltk-1.3.4-1/png/pngpread.c ****             {
 2409              		.loc 1 882 0 is_stmt 1
 2410 0610 3C02     		cmpb	$2, %al
 2411 0612 0F841002 		je	.L405
 2411      0000
 2412              	.LVL209:
 2413              	.L222:
 891:fltk-1.3.4-1/png/pngpread.c ****             {
 2414              		.loc 1 891 0
 2415 0618 3C04     		cmpb	$4, %al
 2416 061a 0F849501 		je	.L406
 2416      0000
 2417              	.L227:
 900:fltk-1.3.4-1/png/pngpread.c ****             {
 2418              		.loc 1 900 0
 2419 0620 3C06     		cmpb	$6, %al
 2420 0622 0F85F0FB 		jne	.L199
 2420      FFFF
 900:fltk-1.3.4-1/png/pngpread.c ****             {
 2421              		.loc 1 900 0 is_stmt 0 discriminator 1
 2422 0628 83BBFC01 		cmpl	$4, 508(%rbx)
 2422      000004
 2423 062f 0F862BFB 		jbe	.L388
 2423      FFFF
 2424 0635 E9DEFBFF 		jmp	.L199
 2424      FF
 2425              	.LVL210:
 2426 063a 660F1F44 		.p2align 4,,10
 2426      0000
 2427              		.p2align 3
 2428              	.L239:
 2429              	.LBE251:
 2430              	.LBB252:
 918:fltk-1.3.4-1/png/pngpread.c ****             {
 2431              		.loc 1 918 0 is_stmt 1
 2432 0640 3C02     		cmpb	$2, %al
 2433 0642 0F85D0FB 		jne	.L199
 2433      FFFF
 2434 0648 BD040000 		movl	$4, %ebp
 2434      00
 2435              	.LVL211:
 2436              	.L243:
 2437              	.LBB244:
 2438              	.LBB245:
1125:fltk-1.3.4-1/png/pngpread.c ****       (*(png_ptr->row_fn))(png_ptr, row, png_ptr->row_number,
 2439              		.loc 1 1125 0
 2440 064d 488B8328 		movq	808(%rbx), %rax
 2440      030000
 2441 0654 4885C0   		testq	%rax, %rax
 2442 0657 7412     		je	.L241
 2443              		.loc 1 1126 0
 2444 0659 8B931402 		movl	532(%rbx), %edx
 2444      0000
 2445 065f B9020000 		movl	$2, %ecx
 2445      00
 2446 0664 31F6     		xorl	%esi, %esi
 2447 0666 4889DF   		movq	%rbx, %rdi
 2448 0669 FFD0     		call	*%rax
 2449              	.LVL212:
 2450              	.L241:
 2451              	.LBE245:
 2452              	.LBE244:
 2453              	.LBB246:
 2454              	.LBB247:
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 2455              		.loc 1 1068 0
 2456 066b 8B831402 		movl	532(%rbx), %eax
 2456      0000
 2457 0671 83C001   		addl	$1, %eax
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 2458              		.loc 1 1069 0
 2459 0674 3B830002 		cmpl	512(%rbx), %eax
 2459      0000
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 2460              		.loc 1 1068 0
 2461 067a 89831402 		movl	%eax, 532(%rbx)
 2461      0000
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 2462              		.loc 1 1069 0
 2463 0680 720D     		jb	.L242
1072:fltk-1.3.4-1/png/pngpread.c ****    {
 2464              		.loc 1 1072 0
 2465 0682 80BB7402 		cmpb	$0, 628(%rbx)
 2465      000000
 2466 0689 0F851C02 		jne	.L407
 2466      0000
 2467              	.L242:
 2468              	.LVL213:
 2469              	.LBE247:
 2470              	.LBE246:
 920:fltk-1.3.4-1/png/pngpread.c ****                {
 2471              		.loc 1 920 0 discriminator 4
 2472 068f 83ED01   		subl	$1, %ebp
 2473              	.LVL214:
 2474 0692 0F8480FB 		je	.L199
 2474      FFFF
 920:fltk-1.3.4-1/png/pngpread.c ****                {
 2475              		.loc 1 920 0 is_stmt 0 discriminator 3
 2476 0698 80BB7502 		cmpb	$2, 629(%rbx)
 2476      000002
 2477 069f 74AC     		je	.L243
 2478 06a1 E972FBFF 		jmp	.L199
 2478      FF
 2479              	.LVL215:
 2480 06a6 662E0F1F 		.p2align 4,,10
 2480      84000000 
 2480      0000
 2481              		.p2align 3
 2482              	.L266:
 2483              	.LBE252:
 2484              	.LBB253:
 2485 06b0 BD020000 		movl	$2, %ebp
 2485      00
 2486              	.LVL216:
 2487              	.L271:
 990:fltk-1.3.4-1/png/pngpread.c ****             {
 2488              		.loc 1 990 0 is_stmt 1 discriminator 3
 2489 06b5 0FB68375 		movzbl	629(%rbx), %eax
 2489      020000
 2490 06bc 3C04     		cmpb	$4, %al
 2491 06be 0F8524FC 		jne	.L278
 2491      FFFF
 2492              	.LVL217:
 2493              	.LBB192:
 2494              	.LBB193:
1125:fltk-1.3.4-1/png/pngpread.c ****       (*(png_ptr->row_fn))(png_ptr, row, png_ptr->row_number,
 2495              		.loc 1 1125 0
 2496 06c4 488B8328 		movq	808(%rbx), %rax
 2496      030000
 2497 06cb 4885C0   		testq	%rax, %rax
 2498 06ce 7412     		je	.L269
 2499              		.loc 1 1126 0
 2500 06d0 8B931402 		movl	532(%rbx), %edx
 2500      0000
 2501 06d6 B9040000 		movl	$4, %ecx
 2501      00
 2502 06db 31F6     		xorl	%esi, %esi
 2503 06dd 4889DF   		movq	%rbx, %rdi
 2504 06e0 FFD0     		call	*%rax
 2505              	.LVL218:
 2506              	.L269:
 2507              	.LBE193:
 2508              	.LBE192:
 2509              	.LBB194:
 2510              	.LBB195:
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 2511              		.loc 1 1068 0
 2512 06e2 8B831402 		movl	532(%rbx), %eax
 2512      0000
 2513 06e8 83C001   		addl	$1, %eax
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 2514              		.loc 1 1069 0
 2515 06eb 3B830002 		cmpl	512(%rbx), %eax
 2515      0000
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 2516              		.loc 1 1068 0
 2517 06f1 89831402 		movl	%eax, 532(%rbx)
 2517      0000
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 2518              		.loc 1 1069 0
 2519 06f7 720D     		jb	.L270
1072:fltk-1.3.4-1/png/pngpread.c ****    {
 2520              		.loc 1 1072 0
 2521 06f9 80BB7402 		cmpb	$0, 628(%rbx)
 2521      000000
 2522 0700 0F858B01 		jne	.L408
 2522      0000
 2523              	.L270:
 2524              	.LVL219:
 2525              	.LBE195:
 2526              	.LBE194:
 990:fltk-1.3.4-1/png/pngpread.c ****             {
 2527              		.loc 1 990 0 discriminator 4
 2528 0706 83ED01   		subl	$1, %ebp
 2529              	.LVL220:
 2530 0709 75AA     		jne	.L271
 2531 070b 0FB68375 		movzbl	629(%rbx), %eax
 2531      020000
 2532 0712 E9D1FBFF 		jmp	.L278
 2532      FF
 2533              	.LVL221:
 2534 0717 660F1F84 		.p2align 4,,10
 2534      00000000 
 2534      00
 2535              		.p2align 3
 2536              	.L246:
 2537              	.LBE253:
 2538              	.LBB254:
 2539 0720 BD040000 		movl	$4, %ebp
 2539      00
 2540              	.LVL222:
 2541              	.L251:
 940:fltk-1.3.4-1/png/pngpread.c ****             {
 2542              		.loc 1 940 0 discriminator 3
 2543 0725 0FB68375 		movzbl	629(%rbx), %eax
 2543      020000
 2544 072c 3C02     		cmpb	$2, %al
 2545 072e 0F8504FD 		jne	.L248
 2545      FFFF
 2546              	.LVL223:
 2547              	.LBB230:
 2548              	.LBB231:
1125:fltk-1.3.4-1/png/pngpread.c ****       (*(png_ptr->row_fn))(png_ptr, row, png_ptr->row_number,
 2549              		.loc 1 1125 0
 2550 0734 488B8328 		movq	808(%rbx), %rax
 2550      030000
 2551 073b 4885C0   		testq	%rax, %rax
 2552 073e 7412     		je	.L249
 2553              		.loc 1 1126 0
 2554 0740 8B931402 		movl	532(%rbx), %edx
 2554      0000
 2555 0746 B9020000 		movl	$2, %ecx
 2555      00
 2556 074b 31F6     		xorl	%esi, %esi
 2557 074d 4889DF   		movq	%rbx, %rdi
 2558 0750 FFD0     		call	*%rax
 2559              	.LVL224:
 2560              	.L249:
 2561              	.LBE231:
 2562              	.LBE230:
 2563              	.LBB232:
 2564              	.LBB233:
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 2565              		.loc 1 1068 0
 2566 0752 8B831402 		movl	532(%rbx), %eax
 2566      0000
 2567 0758 83C001   		addl	$1, %eax
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 2568              		.loc 1 1069 0
 2569 075b 3B830002 		cmpl	512(%rbx), %eax
 2569      0000
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 2570              		.loc 1 1068 0
 2571 0761 89831402 		movl	%eax, 532(%rbx)
 2571      0000
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 2572              		.loc 1 1069 0
 2573 0767 7209     		jb	.L250
1072:fltk-1.3.4-1/png/pngpread.c ****    {
 2574              		.loc 1 1072 0
 2575 0769 80BB7402 		cmpb	$0, 628(%rbx)
 2575      000000
 2576 0770 7516     		jne	.L409
 2577              	.L250:
 2578              	.LVL225:
 2579              	.LBE233:
 2580              	.LBE232:
 940:fltk-1.3.4-1/png/pngpread.c ****             {
 2581              		.loc 1 940 0 discriminator 4
 2582 0772 83ED01   		subl	$1, %ebp
 2583              	.LVL226:
 2584 0775 75AE     		jne	.L251
 2585 0777 0FB68375 		movzbl	629(%rbx), %eax
 2585      020000
 2586 077e E9B5FCFF 		jmp	.L248
 2586      FF
 2587              	.LVL227:
 2588              		.p2align 4,,10
 2589 0783 0F1F4400 		.p2align 3
 2589      00
 2590              	.L409:
 2591              	.LBB235:
 2592              	.LBB234:
 2593 0788 4889DF   		movq	%rbx, %rdi
 2594 078b E8000000 		call	png_read_push_finish_row.part.1
 2594      00
 2595              	.LVL228:
 2596 0790 EBE0     		jmp	.L250
 2597              	.LVL229:
 2598              		.p2align 4,,10
 2599 0792 660F1F44 		.p2align 3
 2599      0000
 2600              	.L400:
 2601              	.LBE234:
 2602              	.LBE235:
 2603              	.LBE254:
 2604              	.LBB255:
 2605              	.LBB217:
 2606              	.LBB211:
 2607 0798 4889DF   		movq	%rbx, %rdi
 2608 079b E8000000 		call	png_read_push_finish_row.part.1
 2608      00
 2609              	.LVL230:
 2610 07a0 E9A3FBFF 		jmp	.L257
 2610      FF
 2611              	.LVL231:
 2612              		.p2align 4,,10
 2613 07a5 0F1F00   		.p2align 3
 2614              	.L402:
 2615              	.LBE211:
 2616              	.LBE217:
 2617              	.LBE255:
 2618              	.LBB256:
 2619              	.LBB236:
 2620              	.LBB224:
 2621 07a8 4889DF   		movq	%rbx, %rdi
 2622 07ab E8000000 		call	png_read_push_finish_row.part.1
 2622      00
 2623              	.LVL232:
 2624 07b0 E96BFCFF 		jmp	.L245
 2624      FF
 2625              	.LVL233:
 2626              	.L406:
 2627              	.LBE224:
 2628              	.LBE236:
 2629              	.LBE256:
 2630              	.LBB257:
 891:fltk-1.3.4-1/png/pngpread.c ****             {
 2631              		.loc 1 891 0 discriminator 1
 2632 07b5 83BBFC01 		cmpl	$4, 508(%rbx)
 2632      000004
 2633 07bc 0F8756FA 		ja	.L199
 2633      FFFF
 2634 07c2 BD020000 		movl	$2, %ebp
 2634      00
 2635              	.L233:
 2636              	.LVL234:
 2637              	.LBB174:
 2638              	.LBB175:
1125:fltk-1.3.4-1/png/pngpread.c ****       (*(png_ptr->row_fn))(png_ptr, row, png_ptr->row_number,
 2639              		.loc 1 1125 0
 2640 07c7 488B8328 		movq	808(%rbx), %rax
 2640      030000
 2641 07ce 4885C0   		testq	%rax, %rax
 2642 07d1 7412     		je	.L230
 2643              		.loc 1 1126 0
 2644 07d3 8B931402 		movl	532(%rbx), %edx
 2644      0000
 2645 07d9 B9040000 		movl	$4, %ecx
 2645      00
 2646 07de 31F6     		xorl	%esi, %esi
 2647 07e0 4889DF   		movq	%rbx, %rdi
 2648 07e3 FFD0     		call	*%rax
 2649              	.LVL235:
 2650              	.L230:
 2651              	.LBE175:
 2652              	.LBE174:
 2653              	.LBB176:
 2654              	.LBB177:
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 2655              		.loc 1 1068 0
 2656 07e5 8B831402 		movl	532(%rbx), %eax
 2656      0000
 2657 07eb 83C001   		addl	$1, %eax
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 2658              		.loc 1 1069 0
 2659 07ee 3B830002 		cmpl	512(%rbx), %eax
 2659      0000
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 2660              		.loc 1 1068 0
 2661 07f4 89831402 		movl	%eax, 532(%rbx)
 2661      0000
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 2662              		.loc 1 1069 0
 2663 07fa 720D     		jb	.L231
1072:fltk-1.3.4-1/png/pngpread.c ****    {
 2664              		.loc 1 1072 0
 2665 07fc 80BB7402 		cmpb	$0, 628(%rbx)
 2665      000000
 2666 0803 0F85E000 		jne	.L410
 2666      0000
 2667              	.L231:
 2668              	.LVL236:
 2669              	.LBE177:
 2670              	.LBE176:
 893:fltk-1.3.4-1/png/pngpread.c ****                {
 2671              		.loc 1 893 0 discriminator 4
 2672 0809 83ED01   		subl	$1, %ebp
 2673              	.LVL237:
 2674 080c 0FB68375 		movzbl	629(%rbx), %eax
 2674      020000
 2675 0813 0F8407FE 		je	.L227
 2675      FFFF
 893:fltk-1.3.4-1/png/pngpread.c ****                {
 2676              		.loc 1 893 0 is_stmt 0 discriminator 3
 2677 0819 3C04     		cmpb	$4, %al
 2678 081b 74AA     		je	.L233
 2679 081d E9FEFDFF 		jmp	.L227
 2679      FF
 2680              	.LVL238:
 2681              		.p2align 4,,10
 2682 0822 660F1F44 		.p2align 3
 2682      0000
 2683              	.L405:
 2684 0828 BD040000 		movl	$4, %ebp
 2684      00
 2685              	.LVL239:
 2686              	.L226:
 2687              	.LBB179:
 2688              	.LBB180:
1125:fltk-1.3.4-1/png/pngpread.c ****       (*(png_ptr->row_fn))(png_ptr, row, png_ptr->row_number,
 2689              		.loc 1 1125 0 is_stmt 1
 2690 082d 488B8328 		movq	808(%rbx), %rax
 2690      030000
 2691 0834 4885C0   		testq	%rax, %rax
 2692 0837 7412     		je	.L223
 2693              		.loc 1 1126 0
 2694 0839 8B931402 		movl	532(%rbx), %edx
 2694      0000
 2695 083f B9020000 		movl	$2, %ecx
 2695      00
 2696 0844 31F6     		xorl	%esi, %esi
 2697 0846 4889DF   		movq	%rbx, %rdi
 2698 0849 FFD0     		call	*%rax
 2699              	.LVL240:
 2700              	.L223:
 2701              	.LBE180:
 2702              	.LBE179:
 2703              	.LBB181:
 2704              	.LBB182:
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 2705              		.loc 1 1068 0
 2706 084b 8B831402 		movl	532(%rbx), %eax
 2706      0000
 2707 0851 83C001   		addl	$1, %eax
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 2708              		.loc 1 1069 0
 2709 0854 3B830002 		cmpl	512(%rbx), %eax
 2709      0000
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 2710              		.loc 1 1068 0
 2711 085a 89831402 		movl	%eax, 532(%rbx)
 2711      0000
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 2712              		.loc 1 1069 0
 2713 0860 7209     		jb	.L224
1072:fltk-1.3.4-1/png/pngpread.c ****    {
 2714              		.loc 1 1072 0
 2715 0862 80BB7402 		cmpb	$0, 628(%rbx)
 2715      000000
 2716 0869 755A     		jne	.L411
 2717              	.L224:
 2718              	.LVL241:
 2719              	.LBE182:
 2720              	.LBE181:
 884:fltk-1.3.4-1/png/pngpread.c ****                {
 2721              		.loc 1 884 0 discriminator 4
 2722 086b 83ED01   		subl	$1, %ebp
 2723              	.LVL242:
 2724 086e 0FB68375 		movzbl	629(%rbx), %eax
 2724      020000
 2725 0875 0F849DFD 		je	.L222
 2725      FFFF
 884:fltk-1.3.4-1/png/pngpread.c ****                {
 2726              		.loc 1 884 0 is_stmt 0 discriminator 3
 2727 087b 3C02     		cmpb	$2, %al
 2728 087d 74AE     		je	.L226
 2729 087f E994FDFF 		jmp	.L222
 2729      FF
 2730              	.LVL243:
 2731              	.L404:
 2732              	.LBE257:
 2733              	.LBB258:
 2734              	.LBB205:
 2735              	.LBB204:
 2736 0884 4889DF   		movq	%rbx, %rdi
 2737 0887 E8000000 		call	png_read_push_finish_row.part.1
 2737      00
 2738              	.LVL244:
 2739 088c E95FFDFF 		jmp	.L276
 2739      FF
 2740              	.LVL245:
 2741              	.L408:
 2742              	.LBE204:
 2743              	.LBE205:
 2744              	.LBE258:
 2745              	.LBB259:
 2746              	.LBB197:
 2747              	.LBB196:
 2748 0891 4889DF   		movq	%rbx, %rdi
 2749 0894 E8000000 		call	png_read_push_finish_row.part.1
 2749      00
 2750              	.LVL246:
 2751 0899 E968FEFF 		jmp	.L270
 2751      FF
 2752              	.LVL247:
 2753              	.L399:
 2754              	.LBE196:
 2755              	.LBE197:
 2756              	.LBB198:
 2757              	.LBB191:
 2758 089e 4889DF   		movq	%rbx, %rdi
 2759 08a1 E8000000 		call	png_read_push_finish_row.part.1
 2759      00
 2760              	.LVL248:
 2761 08a6 E925FAFF 		jmp	.L265
 2761      FF
 2762              	.LVL249:
 2763              	.L407:
 2764              	.LBE191:
 2765              	.LBE198:
 2766              	.LBE259:
 2767              	.LBB260:
 2768              	.LBB249:
 2769              	.LBB248:
 2770 08ab 4889DF   		movq	%rbx, %rdi
 2771 08ae E8000000 		call	png_read_push_finish_row.part.1
 2771      00
 2772              	.LVL250:
 2773 08b3 E9D7FDFF 		jmp	.L242
 2773      FF
 2774              	.LVL251:
 2775              	.L397:
 2776              	.LBE248:
 2777              	.LBE249:
 2778              	.LBE260:
 2779              	.LBB261:
 2780              	.LBB160:
 2781 08b8 4889DF   		movq	%rbx, %rdi
 2782 08bb E8000000 		call	png_read_push_finish_row.part.1
 2782      00
 2783              	.LVL252:
 2784 08c0 E98EF8FF 		jmp	.L282
 2784      FF
 2785              	.LVL253:
 2786              	.L411:
 2787              	.LBE160:
 2788              	.LBE261:
 2789              	.LBB262:
 2790              	.LBB184:
 2791              	.LBB183:
 2792 08c5 4889DF   		movq	%rbx, %rdi
 2793 08c8 E8000000 		call	png_read_push_finish_row.part.1
 2793      00
 2794              	.LVL254:
 2795 08cd EB9C     		jmp	.L224
 2796              	.LVL255:
 2797              	.L401:
 2798              	.LBE183:
 2799              	.LBE184:
 2800              	.LBE262:
 2801              	.LBB263:
 2802              	.LBB218:
 2803              	.LBB216:
 2804 08cf 4889DF   		movq	%rbx, %rdi
 2805 08d2 E8000000 		call	png_read_push_finish_row.part.1
 2805      00
 2806              	.LVL256:
 2807 08d7 E9D3FAFF 		jmp	.L262
 2807      FF
 2808              	.LVL257:
 2809              	.L403:
 2810              	.LBE216:
 2811              	.LBE218:
 2812              	.LBE263:
 2813              	.LBB264:
 2814              	.LBB237:
 2815              	.LBB229:
 2816 08dc 4889DF   		movq	%rbx, %rdi
 2817 08df E8000000 		call	png_read_push_finish_row.part.1
 2817      00
 2818              	.LVL258:
 2819 08e4 E99EFBFF 		jmp	.L254
 2819      FF
 2820              	.LVL259:
 2821              	.L410:
 2822              	.LBE229:
 2823              	.LBE237:
 2824              	.LBE264:
 2825              	.LBB265:
 2826              	.LBB185:
 2827              	.LBB178:
 2828 08e9 4889DF   		movq	%rbx, %rdi
 2829 08ec E8000000 		call	png_read_push_finish_row.part.1
 2829      00
 2830              	.LVL260:
 2831 08f1 E913FFFF 		jmp	.L231
 2831      FF
 2832              	.LVL261:
 2833              	.L398:
 2834              	.LBE178:
 2835              	.LBE185:
 2836              	.LBE265:
1043:fltk-1.3.4-1/png/pngpread.c **** 
 2837              		.loc 1 1043 0 is_stmt 1
 2838 08f6 E8000000 		call	__stack_chk_fail
 2838      00
 2839              	.LVL262:
 2840              	.L203:
 835:fltk-1.3.4-1/png/pngpread.c ****    }
 2841              		.loc 1 835 0
 2842 08fb BE000000 		movl	$.LC20, %esi
 2842      00
 2843 0900 4889DF   		movq	%rbx, %rdi
 2844 0903 E8000000 		call	png_error
 2844      00
 2845              	.LVL263:
 2846              	.L395:
 859:fltk-1.3.4-1/png/pngpread.c **** 
 2847              		.loc 1 859 0
 2848 0908 BE000000 		movl	$.LC22, %esi
 2848      00
 2849 090d 4889DF   		movq	%rbx, %rdi
 2850 0910 E8000000 		call	png_error
 2850      00
 2851              	.LVL264:
 2852              		.cfi_endproc
 2853              	.LFE69:
 2855              		.section	.text.unlikely.png_push_process_row
 2856              	.LCOLDE23:
 2857              		.section	.text.png_push_process_row
 2858              	.LHOTE23:
 2859              		.section	.rodata.str1.1
 2860              	.LC24:
 2861 009d 4E6F2049 		.string	"No IDAT data (internal error)"
 2861      44415420 
 2861      64617461 
 2861      2028696E 
 2861      7465726E 
 2862              		.section	.rodata.str1.8
 2863              		.align 8
 2864              	.LC25:
 2865 0110 5472756E 		.string	"Truncated compressed data in IDAT"
 2865      63617465 
 2865      6420636F 
 2865      6D707265 
 2865      73736564 
 2866              		.section	.rodata.str1.1
 2867              	.LC26:
 2868 00bb 4465636F 		.string	"Decompression error in IDAT"
 2868      6D707265 
 2868      7373696F 
 2868      6E206572 
 2868      726F7220 
 2869              	.LC27:
 2870 00d7 45787472 		.string	"Extra compressed data in IDAT"
 2870      6120636F 
 2870      6D707265 
 2870      73736564 
 2870      20646174 
 2871              		.section	.rodata.str1.8
 2872 0132 00000000 		.align 8
 2872      0000
 2873              	.LC28:
 2874 0138 45787472 		.string	"Extra compression data in IDAT"
 2874      6120636F 
 2874      6D707265 
 2874      7373696F 
 2874      6E206461 
 2875              		.section	.text.unlikely.png_process_IDAT_data,"ax",@progbits
 2876              	.LCOLDB29:
 2877              		.section	.text.png_process_IDAT_data,"ax",@progbits
 2878              	.LHOTB29:
 2879              		.p2align 4,,15
 2880              		.globl	png_process_IDAT_data
 2882              	png_process_IDAT_data:
 2883              	.LFB68:
 712:fltk-1.3.4-1/png/pngpread.c ****    /* The caller checks for a non-zero buffer length. */
 2884              		.loc 1 712 0
 2885              		.cfi_startproc
 2886              	.LVL265:
 2887 0000 55       		pushq	%rbp
 2888              		.cfi_def_cfa_offset 16
 2889              		.cfi_offset 6, -16
 2890 0001 53       		pushq	%rbx
 2891              		.cfi_def_cfa_offset 24
 2892              		.cfi_offset 3, -24
 2893 0002 4889FB   		movq	%rdi, %rbx
 2894 0005 4883EC18 		subq	$24, %rsp
 2895              		.cfi_def_cfa_offset 48
 714:fltk-1.3.4-1/png/pngpread.c ****       png_error(png_ptr, "No IDAT data (internal error)");
 2896              		.loc 1 714 0
 2897 0009 4885D2   		testq	%rdx, %rdx
 2898 000c 0F84A601 		je	.L430
 2898      0000
 2899 0012 4885F6   		testq	%rsi, %rsi
 2900 0015 0F849D01 		je	.L430
 2900      0000
 721:fltk-1.3.4-1/png/pngpread.c ****    /* TODO: WARNING: TRUNCATION ERROR: DANGER WILL ROBINSON: */
 2901              		.loc 1 721 0
 2902 001b 4889B740 		movq	%rsi, 320(%rdi)
 2902      010000
 723:fltk-1.3.4-1/png/pngpread.c **** 
 2903              		.loc 1 723 0
 2904 0022 89D0     		movl	%edx, %eax
 2905 0024 89974801 		movl	%edx, 328(%rdi)
 2905      0000
 2906              	.LBB266:
 754:fltk-1.3.4-1/png/pngpread.c **** 
 2907              		.loc 1 754 0
 2908 002a 488DAF40 		leaq	320(%rdi), %rbp
 2908      010000
 2909              	.LBE266:
 728:fltk-1.3.4-1/png/pngpread.c ****       !(png_ptr->flags & PNG_FLAG_ZSTREAM_ENDED))
 2910              		.loc 1 728 0
 2911 0031 E9880000 		jmp	.L427
 2911      00
 2912              	.LVL266:
 2913 0036 662E0F1F 		.p2align 4,,10
 2913      84000000 
 2913      0000
 2914              		.p2align 3
 2915              	.L441:
 2916              	.LBB267:
 741:fltk-1.3.4-1/png/pngpread.c ****              png_ptr->iwidth) + 1);
 2917              		.loc 1 741 0 discriminator 1
 2918 0040 C0E803   		shrb	$3, %al
 2919 0043 0FB6C0   		movzbl	%al, %eax
 2920 0046 0FAF8310 		imull	528(%rbx), %eax
 2920      020000
 2921 004d 83C001   		addl	$1, %eax
 2922              	.L418:
 741:fltk-1.3.4-1/png/pngpread.c ****              png_ptr->iwidth) + 1);
 2923              		.loc 1 741 0 is_stmt 0 discriminator 4
 2924 0050 89836001 		movl	%eax, 352(%rbx)
 2924      0000
 744:fltk-1.3.4-1/png/pngpread.c ****       }
 2925              		.loc 1 744 0 is_stmt 1 discriminator 4
 2926 0056 488B8328 		movq	552(%rbx), %rax
 2926      020000
 2927 005d 48898358 		movq	%rax, 344(%rbx)
 2927      010000
 2928              	.L416:
 754:fltk-1.3.4-1/png/pngpread.c **** 
 2929              		.loc 1 754 0
 2930 0064 BE020000 		movl	$2, %esi
 2930      00
 2931 0069 4889EF   		movq	%rbp, %rdi
 2932 006c E8000000 		call	inflate
 2932      00
 2933              	.LVL267:
 757:fltk-1.3.4-1/png/pngpread.c ****       {
 2934              		.loc 1 757 0
 2935 0071 83F801   		cmpl	$1, %eax
 2936 0074 0F87F600 		ja	.L437
 2936      0000
 778:fltk-1.3.4-1/png/pngpread.c ****       {
 2937              		.loc 1 778 0
 2938 007a 488B8B28 		movq	552(%rbx), %rcx
 2938      020000
 2939 0081 48398B58 		cmpq	%rcx, 344(%rbx)
 2939      010000
 2940 0088 7429     		je	.L422
 784:fltk-1.3.4-1/png/pngpread.c ****              png_ptr->pass > 6)
 2941              		.loc 1 784 0
 2942 008a 8B930002 		movl	512(%rbx), %edx
 2942      0000
 2943 0090 39931402 		cmpl	%edx, 532(%rbx)
 2943      0000
 2944 0096 0F839400 		jnb	.L423
 2944      0000
 784:fltk-1.3.4-1/png/pngpread.c ****              png_ptr->pass > 6)
 2945              		.loc 1 784 0 is_stmt 0 discriminator 1
 2946 009c 80BB7502 		cmpb	$6, 629(%rbx)
 2946      000006
 2947 00a3 0F878700 		ja	.L423
 2947      0000
 799:fltk-1.3.4-1/png/pngpread.c ****             png_push_process_row(png_ptr);
 2948              		.loc 1 799 0 is_stmt 1
 2949 00a9 8B936001 		movl	352(%rbx), %edx
 2949      0000
 2950 00af 85D2     		testl	%edx, %edx
 2951 00b1 745D     		je	.L438
 2952              	.L422:
 804:fltk-1.3.4-1/png/pngpread.c ****          png_ptr->flags |= PNG_FLAG_ZSTREAM_ENDED;
 2953              		.loc 1 804 0
 2954 00b3 83F801   		cmpl	$1, %eax
 2955 00b6 746D     		je	.L439
 2956              	.LVL268:
 2957              	.L435:
 2958 00b8 8B834801 		movl	328(%rbx), %eax
 2958      0000
 2959              	.L427:
 2960              	.LBE267:
 728:fltk-1.3.4-1/png/pngpread.c ****       !(png_ptr->flags & PNG_FLAG_ZSTREAM_ENDED))
 2961              		.loc 1 728 0
 2962 00be 85C0     		testl	%eax, %eax
 2963 00c0 0F848800 		je	.L412
 2963      0000
 728:fltk-1.3.4-1/png/pngpread.c ****       !(png_ptr->flags & PNG_FLAG_ZSTREAM_ENDED))
 2964              		.loc 1 728 0 is_stmt 0 discriminator 1
 2965 00c6 F6833001 		testb	$8, 304(%rbx)
 2965      000008
 2966 00cd 0F858500 		jne	.L440
 2966      0000
 2967              	.LBB268:
 738:fltk-1.3.4-1/png/pngpread.c ****       {
 2968              		.loc 1 738 0 is_stmt 1
 2969 00d3 8B8B6001 		movl	352(%rbx), %ecx
 2969      0000
 2970 00d9 85C9     		testl	%ecx, %ecx
 2971 00db 7587     		jne	.L416
 741:fltk-1.3.4-1/png/pngpread.c ****              png_ptr->iwidth) + 1);
 2972              		.loc 1 741 0
 2973 00dd 0FB6837A 		movzbl	634(%rbx), %eax
 2973      020000
 2974 00e4 3C07     		cmpb	$7, %al
 2975 00e6 0F8754FF 		ja	.L441
 2975      FFFF
 741:fltk-1.3.4-1/png/pngpread.c ****              png_ptr->iwidth) + 1);
 2976              		.loc 1 741 0 is_stmt 0 discriminator 2
 2977 00ec 8B931002 		movl	528(%rbx), %edx
 2977      0000
 2978 00f2 480FAFC2 		imulq	%rdx, %rax
 2979 00f6 4883C007 		addq	$7, %rax
 2980 00fa 48C1E803 		shrq	$3, %rax
 2981 00fe 83C001   		addl	$1, %eax
 2982 0101 E94AFFFF 		jmp	.L418
 2982      FF
 2983              	.LVL269:
 2984 0106 662E0F1F 		.p2align 4,,10
 2984      84000000 
 2984      0000
 2985              		.p2align 3
 2986              	.L438:
 800:fltk-1.3.4-1/png/pngpread.c ****       }
 2987              		.loc 1 800 0 is_stmt 1
 2988 0110 4889DF   		movq	%rbx, %rdi
 2989 0113 8944240C 		movl	%eax, 12(%rsp)
 2990 0117 E8000000 		call	png_push_process_row
 2990      00
 2991              	.LVL270:
 2992 011c 8B44240C 		movl	12(%rsp), %eax
 804:fltk-1.3.4-1/png/pngpread.c ****          png_ptr->flags |= PNG_FLAG_ZSTREAM_ENDED;
 2993              		.loc 1 804 0
 2994 0120 83F801   		cmpl	$1, %eax
 2995 0123 7593     		jne	.L435
 2996              	.LVL271:
 2997              	.L439:
 805:fltk-1.3.4-1/png/pngpread.c ****    }
 2998              		.loc 1 805 0
 2999 0125 838B3001 		orl	$8, 304(%rbx)
 2999      000008
 3000 012c EB8A     		jmp	.L435
 3001              	.LVL272:
 3002 012e 6690     		.p2align 4,,10
 3003              		.p2align 3
 3004              	.L423:
 788:fltk-1.3.4-1/png/pngpread.c ****             png_ptr->flags |= PNG_FLAG_ZSTREAM_ENDED;
 3005              		.loc 1 788 0
 3006 0130 BE000000 		movl	$.LC27, %esi
 3006      00
 3007 0135 4889DF   		movq	%rbx, %rdi
 3008 0138 E8000000 		call	png_warning
 3008      00
 3009              	.LVL273:
 789:fltk-1.3.4-1/png/pngpread.c ****             png_ptr->zowner = 0;
 3010              		.loc 1 789 0
 3011 013d 838B3001 		orl	$8, 304(%rbx)
 3011      000008
 790:fltk-1.3.4-1/png/pngpread.c **** 
 3012              		.loc 1 790 0
 3013 0144 C7833801 		movl	$0, 312(%rbx)
 3013      00000000 
 3013      0000
 3014              	.L412:
 3015              	.LBE268:
 814:fltk-1.3.4-1/png/pngpread.c **** 
 3016              		.loc 1 814 0
 3017 014e 4883C418 		addq	$24, %rsp
 3018              		.cfi_remember_state
 3019              		.cfi_def_cfa_offset 24
 3020 0152 5B       		popq	%rbx
 3021              		.cfi_def_cfa_offset 16
 3022              	.LVL274:
 3023 0153 5D       		popq	%rbp
 3024              		.cfi_def_cfa_offset 8
 3025              	.LVL275:
 3026 0154 C3       		ret
 3027              	.LVL276:
 3028              		.p2align 4,,10
 3029 0155 0F1F00   		.p2align 3
 3030              	.L440:
 3031              		.cfi_restore_state
 3032 0158 4883C418 		addq	$24, %rsp
 3033              		.cfi_remember_state
 3034              		.cfi_def_cfa_offset 24
 813:fltk-1.3.4-1/png/pngpread.c **** }
 3035              		.loc 1 813 0
 3036 015c 4889DF   		movq	%rbx, %rdi
 3037 015f BE000000 		movl	$.LC28, %esi
 3037      00
 814:fltk-1.3.4-1/png/pngpread.c **** 
 3038              		.loc 1 814 0
 3039 0164 5B       		popq	%rbx
 3040              		.cfi_def_cfa_offset 16
 3041              	.LVL277:
 3042 0165 5D       		popq	%rbp
 3043              		.cfi_def_cfa_offset 8
 813:fltk-1.3.4-1/png/pngpread.c **** }
 3044              		.loc 1 813 0
 3045 0166 E9000000 		jmp	png_warning
 3045      00
 3046              	.LVL278:
 3047 016b 0F1F4400 		.p2align 4,,10
 3047      00
 3048              		.p2align 3
 3049              	.L437:
 3050              		.cfi_restore_state
 3051              	.LBB269:
 760:fltk-1.3.4-1/png/pngpread.c ****          png_ptr->zowner = 0;
 3052              		.loc 1 760 0
 3053 0170 838B3001 		orl	$8, 304(%rbx)
 3053      000008
 766:fltk-1.3.4-1/png/pngpread.c ****              png_ptr->pass > 6)
 3054              		.loc 1 766 0
 3055 0177 8B830002 		movl	512(%rbx), %eax
 3055      0000
 3056              	.LVL279:
 3057 017d 39831402 		cmpl	%eax, 532(%rbx)
 3057      0000
 761:fltk-1.3.4-1/png/pngpread.c **** 
 3058              		.loc 1 761 0
 3059 0183 C7833801 		movl	$0, 312(%rbx)
 3059      00000000 
 3059      0000
 766:fltk-1.3.4-1/png/pngpread.c ****              png_ptr->pass > 6)
 3060              		.loc 1 766 0
 3061 018d 7309     		jnb	.L420
 766:fltk-1.3.4-1/png/pngpread.c ****              png_ptr->pass > 6)
 3062              		.loc 1 766 0 is_stmt 0 discriminator 1
 3063 018f 80BB7502 		cmpb	$6, 629(%rbx)
 3063      000006
 3064 0196 7613     		jbe	.L421
 3065              	.L420:
 3066              	.LBE269:
 814:fltk-1.3.4-1/png/pngpread.c **** 
 3067              		.loc 1 814 0 is_stmt 1
 3068 0198 4883C418 		addq	$24, %rsp
 3069              		.cfi_remember_state
 3070              		.cfi_def_cfa_offset 24
 813:fltk-1.3.4-1/png/pngpread.c **** }
 3071              		.loc 1 813 0
 3072 019c 4889DF   		movq	%rbx, %rdi
 3073              	.LBB270:
 768:fltk-1.3.4-1/png/pngpread.c **** 
 3074              		.loc 1 768 0
 3075 019f BE000000 		movl	$.LC25, %esi
 3075      00
 3076              	.LBE270:
 814:fltk-1.3.4-1/png/pngpread.c **** 
 3077              		.loc 1 814 0
 3078 01a4 5B       		popq	%rbx
 3079              		.cfi_def_cfa_offset 16
 3080              	.LVL280:
 3081 01a5 5D       		popq	%rbp
 3082              		.cfi_def_cfa_offset 8
 813:fltk-1.3.4-1/png/pngpread.c **** }
 3083              		.loc 1 813 0
 3084 01a6 E9000000 		jmp	png_warning
 3084      00
 3085              	.LVL281:
 3086              	.L421:
 3087              		.cfi_restore_state
 3088              	.LBB271:
 771:fltk-1.3.4-1/png/pngpread.c **** 
 3089              		.loc 1 771 0
 3090 01ab BE000000 		movl	$.LC26, %esi
 3090      00
 3091 01b0 4889DF   		movq	%rbx, %rdi
 3092 01b3 E8000000 		call	png_error
 3092      00
 3093              	.LVL282:
 3094              	.L430:
 3095              	.LBE271:
 715:fltk-1.3.4-1/png/pngpread.c **** 
 3096              		.loc 1 715 0
 3097 01b8 BE000000 		movl	$.LC24, %esi
 3097      00
 3098              	.LVL283:
 3099 01bd 4889DF   		movq	%rbx, %rdi
 3100 01c0 E8000000 		call	png_error
 3100      00
 3101              	.LVL284:
 3102              		.cfi_endproc
 3103              	.LFE68:
 3105              		.section	.text.unlikely.png_process_IDAT_data
 3106              	.LCOLDE29:
 3107              		.section	.text.png_process_IDAT_data
 3108              	.LHOTE29:
 3109              		.section	.rodata.str1.1
 3110              	.LC30:
 3111 00f5 4E6F7420 		.string	"Not enough compressed data"
 3111      656E6F75 
 3111      67682063 
 3111      6F6D7072 
 3111      65737365 
 3112              		.section	.text.unlikely.png_push_read_IDAT,"ax",@progbits
 3113              	.LCOLDB31:
 3114              		.section	.text.png_push_read_IDAT,"ax",@progbits
 3115              	.LHOTB31:
 3116              		.p2align 4,,15
 3117              		.globl	png_push_read_IDAT
 3119              	png_push_read_IDAT:
 3120              	.LFB67:
 619:fltk-1.3.4-1/png/pngpread.c ****    if ((png_ptr->mode & PNG_HAVE_CHUNK_HEADER) == 0)
 3121              		.loc 1 619 0
 3122              		.cfi_startproc
 3123              	.LVL285:
 3124 0000 4154     		pushq	%r12
 3125              		.cfi_def_cfa_offset 16
 3126              		.cfi_offset 12, -16
 3127 0002 55       		pushq	%rbp
 3128              		.cfi_def_cfa_offset 24
 3129              		.cfi_offset 6, -24
 3130 0003 53       		pushq	%rbx
 3131              		.cfi_def_cfa_offset 32
 3132              		.cfi_offset 3, -32
 3133 0004 4889FB   		movq	%rdi, %rbx
 3134 0007 4883EC20 		subq	$32, %rsp
 3135              		.cfi_def_cfa_offset 64
 619:fltk-1.3.4-1/png/pngpread.c ****    if ((png_ptr->mode & PNG_HAVE_CHUNK_HEADER) == 0)
 3136              		.loc 1 619 0
 3137 000b 64488B04 		movq	%fs:40, %rax
 3137      25280000 
 3137      00
 3138 0014 48894424 		movq	%rax, 24(%rsp)
 3138      18
 3139 0019 31C0     		xorl	%eax, %eax
 620:fltk-1.3.4-1/png/pngpread.c ****    {
 3140              		.loc 1 620 0
 3141 001b F6872D01 		testb	$1, 301(%rdi)
 3141      000001
 3142 0022 751C     		jne	.L443
 3143              	.LBB272:
 626:fltk-1.3.4-1/png/pngpread.c ****       png_push_fill_buffer(png_ptr, chunk_length, 4);
 3144              		.loc 1 626 0
 3145 0024 4883BF70 		cmpq	$7, 880(%rdi)
 3145      03000007 
 3146 002c 0F874E01 		ja	.L469
 3146      0000
 3147              	.LVL286:
 3148              	.L452:
 3149              	.LBE272:
 701:fltk-1.3.4-1/png/pngpread.c ****       png_crc_finish(png_ptr, 0);
 3150              		.loc 1 701 0 discriminator 1
 3151 0032 4889DF   		movq	%rbx, %rdi
 3152 0035 E8000000 		call	png_push_save_buffer
 3152      00
 3153              	.LVL287:
 3154 003a EB3E     		jmp	.L442
 3155 003c 0F1F4000 		.p2align 4,,10
 3156              		.p2align 3
 3157              	.L443:
 3158 0040 8BAF5802 		movl	600(%rdi), %ebp
 3158      0000
 3159              	.L447:
 647:fltk-1.3.4-1/png/pngpread.c ****    {
 3160              		.loc 1 647 0
 3161 0046 85ED     		testl	%ebp, %ebp
 3162 0048 7556     		jne	.L470
 3163              	.L449:
 701:fltk-1.3.4-1/png/pngpread.c ****       png_crc_finish(png_ptr, 0);
 3164              		.loc 1 701 0
 3165 004a 4883BB70 		cmpq	$3, 880(%rbx)
 3165      03000003 
 3166 0052 76DE     		jbe	.L452
 702:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->mode &= ~PNG_HAVE_CHUNK_HEADER;
 3167              		.loc 1 702 0
 3168 0054 31F6     		xorl	%esi, %esi
 3169 0056 4889DF   		movq	%rbx, %rdi
 3170 0059 E8000000 		call	png_crc_finish
 3170      00
 3171              	.LVL288:
 704:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->zowner = 0;
 3172              		.loc 1 704 0
 3173 005e 8B832C01 		movl	300(%rbx), %eax
 3173      0000
 705:fltk-1.3.4-1/png/pngpread.c ****    }
 3174              		.loc 1 705 0
 3175 0064 C7833801 		movl	$0, 312(%rbx)
 3175      00000000 
 3175      0000
 704:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->zowner = 0;
 3176              		.loc 1 704 0
 3177 006e 80E4FE   		andb	$254, %ah
 3178 0071 83C808   		orl	$8, %eax
 3179 0074 89832C01 		movl	%eax, 300(%rbx)
 3179      0000
 3180              	.L442:
 707:fltk-1.3.4-1/png/pngpread.c **** 
 3181              		.loc 1 707 0
 3182 007a 488B4424 		movq	24(%rsp), %rax
 3182      18
 3183 007f 64483304 		xorq	%fs:40, %rax
 3183      25280000 
 3183      00
 3184 0088 0F858301 		jne	.L471
 3184      0000
 3185 008e 4883C420 		addq	$32, %rsp
 3186              		.cfi_remember_state
 3187              		.cfi_def_cfa_offset 32
 3188 0092 5B       		popq	%rbx
 3189              		.cfi_def_cfa_offset 24
 3190              	.LVL289:
 3191 0093 5D       		popq	%rbp
 3192              		.cfi_def_cfa_offset 16
 3193 0094 415C     		popq	%r12
 3194              		.cfi_def_cfa_offset 8
 3195 0096 C3       		ret
 3196              	.LVL290:
 3197 0097 660F1F84 		.p2align 4,,10
 3197      00000000 
 3197      00
 3198              		.p2align 3
 3199              	.L470:
 3200              		.cfi_restore_state
 647:fltk-1.3.4-1/png/pngpread.c ****    {
 3201              		.loc 1 647 0 discriminator 1
 3202 00a0 488B8360 		movq	864(%rbx), %rax
 3202      030000
 3203 00a7 4885C0   		testq	%rax, %rax
 3204 00aa 745E     		je	.L450
 3205              	.LVL291:
 3206              	.LBB273:
 658:fltk-1.3.4-1/png/pngpread.c ****          save_size = (png_size_t)idat_size;
 3207              		.loc 1 658 0
 3208 00ac 4189EC   		movl	%ebp, %r12d
 3209 00af 4C39E0   		cmpq	%r12, %rax
 3210 00b2 7705     		ja	.L451
 662:fltk-1.3.4-1/png/pngpread.c **** 
 3211              		.loc 1 662 0
 3212 00b4 89C5     		movl	%eax, %ebp
 3213              	.LVL292:
 3214 00b6 4989C4   		movq	%rax, %r12
 3215              	.LVL293:
 3216              	.L451:
 664:fltk-1.3.4-1/png/pngpread.c **** 
 3217              		.loc 1 664 0
 3218 00b9 488BB338 		movq	824(%rbx), %rsi
 3218      030000
 3219 00c0 4C89E2   		movq	%r12, %rdx
 3220 00c3 4889DF   		movq	%rbx, %rdi
 3221 00c6 E8000000 		call	png_calculate_crc
 3221      00
 3222              	.LVL294:
 666:fltk-1.3.4-1/png/pngpread.c **** 
 3223              		.loc 1 666 0
 3224 00cb 488BB338 		movq	824(%rbx), %rsi
 3224      030000
 3225 00d2 4C89E2   		movq	%r12, %rdx
 3226 00d5 4889DF   		movq	%rbx, %rdi
 3227 00d8 E8000000 		call	png_process_IDAT_data
 3227      00
 3228              	.LVL295:
 668:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->buffer_size -= save_size;
 3229              		.loc 1 668 0
 3230 00dd 8B835802 		movl	600(%rbx), %eax
 3230      0000
 669:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->save_buffer_size -= save_size;
 3231              		.loc 1 669 0
 3232 00e3 4C29A370 		subq	%r12, 880(%rbx)
 3232      030000
 670:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->save_buffer_ptr += save_size;
 3233              		.loc 1 670 0
 3234 00ea 4C29A360 		subq	%r12, 864(%rbx)
 3234      030000
 671:fltk-1.3.4-1/png/pngpread.c ****    }
 3235              		.loc 1 671 0
 3236 00f1 4C01A338 		addq	%r12, 824(%rbx)
 3236      030000
 668:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->buffer_size -= save_size;
 3237              		.loc 1 668 0
 3238 00f8 29E8     		subl	%ebp, %eax
 3239              	.LBE273:
 674:fltk-1.3.4-1/png/pngpread.c ****    {
 3240              		.loc 1 674 0
 3241 00fa 85C0     		testl	%eax, %eax
 3242              	.LBB274:
 668:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->buffer_size -= save_size;
 3243              		.loc 1 668 0
 3244 00fc 89C5     		movl	%eax, %ebp
 3245              	.LVL296:
 3246 00fe 89835802 		movl	%eax, 600(%rbx)
 3246      0000
 3247              	.LBE274:
 674:fltk-1.3.4-1/png/pngpread.c ****    {
 3248              		.loc 1 674 0
 3249 0104 0F8440FF 		je	.L449
 3249      FFFF
 3250              	.LVL297:
 3251              	.L450:
 674:fltk-1.3.4-1/png/pngpread.c ****    {
 3252              		.loc 1 674 0 is_stmt 0 discriminator 1
 3253 010a 488B8378 		movq	888(%rbx), %rax
 3253      030000
 3254 0111 4885C0   		testq	%rax, %rax
 3255 0114 0F8460FF 		je	.L442
 3255      FFFF
 3256              	.LVL298:
 3257              	.LBB275:
 684:fltk-1.3.4-1/png/pngpread.c ****          save_size = (png_size_t)idat_size;
 3258              		.loc 1 684 0 is_stmt 1
 3259 011a 4189EC   		movl	%ebp, %r12d
 3260 011d 4C39E0   		cmpq	%r12, %rax
 3261 0120 7705     		ja	.L455
 688:fltk-1.3.4-1/png/pngpread.c **** 
 3262              		.loc 1 688 0
 3263 0122 89C5     		movl	%eax, %ebp
 3264              	.LVL299:
 3265 0124 4989C4   		movq	%rax, %r12
 3266              	.LVL300:
 3267              	.L455:
 690:fltk-1.3.4-1/png/pngpread.c **** 
 3268              		.loc 1 690 0
 3269 0127 488BB348 		movq	840(%rbx), %rsi
 3269      030000
 3270 012e 4C89E2   		movq	%r12, %rdx
 3271 0131 4889DF   		movq	%rbx, %rdi
 3272 0134 E8000000 		call	png_calculate_crc
 3272      00
 3273              	.LVL301:
 692:fltk-1.3.4-1/png/pngpread.c **** 
 3274              		.loc 1 692 0
 3275 0139 488BB348 		movq	840(%rbx), %rsi
 3275      030000
 3276 0140 4C89E2   		movq	%r12, %rdx
 3277 0143 4889DF   		movq	%rbx, %rdi
 3278 0146 E8000000 		call	png_process_IDAT_data
 3278      00
 3279              	.LVL302:
 694:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->buffer_size -= save_size;
 3280              		.loc 1 694 0
 3281 014b 8B835802 		movl	600(%rbx), %eax
 3281      0000
 695:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->current_buffer_size -= save_size;
 3282              		.loc 1 695 0
 3283 0151 4C29A370 		subq	%r12, 880(%rbx)
 3283      030000
 696:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->current_buffer_ptr += save_size;
 3284              		.loc 1 696 0
 3285 0158 4C29A378 		subq	%r12, 888(%rbx)
 3285      030000
 697:fltk-1.3.4-1/png/pngpread.c ****    }
 3286              		.loc 1 697 0
 3287 015f 4C01A348 		addq	%r12, 840(%rbx)
 3287      030000
 694:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->buffer_size -= save_size;
 3288              		.loc 1 694 0
 3289 0166 29E8     		subl	%ebp, %eax
 3290              	.LBE275:
 699:fltk-1.3.4-1/png/pngpread.c ****    {
 3291              		.loc 1 699 0
 3292 0168 85C0     		testl	%eax, %eax
 3293              	.LBB276:
 694:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->buffer_size -= save_size;
 3294              		.loc 1 694 0
 3295 016a 89835802 		movl	%eax, 600(%rbx)
 3295      0000
 3296              	.LBE276:
 699:fltk-1.3.4-1/png/pngpread.c ****    {
 3297              		.loc 1 699 0
 3298 0170 0F8504FF 		jne	.L442
 3298      FFFF
 3299 0176 E9CFFEFF 		jmp	.L449
 3299      FF
 3300              	.LVL303:
 3301 017b 0F1F4400 		.p2align 4,,10
 3301      00
 3302              		.p2align 3
 3303              	.L469:
 3304              	.LBB277:
 627:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->push_length = png_get_uint_31(png_ptr, chunk_length);
 3305              		.loc 1 627 0
 3306 0180 BA040000 		movl	$4, %edx
 3306      00
 3307 0185 4889E6   		movq	%rsp, %rsi
 3308 0188 E8000000 		call	png_push_fill_buffer
 3308      00
 3309              	.LVL304:
 628:fltk-1.3.4-1/png/pngpread.c ****       png_reset_crc(png_ptr);
 3310              		.loc 1 628 0
 3311 018d 4889E6   		movq	%rsp, %rsi
 3312 0190 4889DF   		movq	%rbx, %rdi
 3313 0193 E8000000 		call	png_get_uint_31
 3313      00
 3314              	.LVL305:
 629:fltk-1.3.4-1/png/pngpread.c ****       png_crc_read(png_ptr, chunk_tag, 4);
 3315              		.loc 1 629 0
 3316 0198 4889DF   		movq	%rbx, %rdi
 628:fltk-1.3.4-1/png/pngpread.c ****       png_reset_crc(png_ptr);
 3317              		.loc 1 628 0
 3318 019b 89835803 		movl	%eax, 856(%rbx)
 3318      0000
 629:fltk-1.3.4-1/png/pngpread.c ****       png_crc_read(png_ptr, chunk_tag, 4);
 3319              		.loc 1 629 0
 3320 01a1 E8000000 		call	png_reset_crc
 3320      00
 3321              	.LVL306:
 630:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->chunk_name = PNG_CHUNK_FROM_STRING(chunk_tag);
 3322              		.loc 1 630 0
 3323 01a6 488D7424 		leaq	16(%rsp), %rsi
 3323      10
 3324 01ab BA040000 		movl	$4, %edx
 3324      00
 3325 01b0 4889DF   		movq	%rbx, %rdi
 3326 01b3 E8000000 		call	png_crc_read
 3326      00
 3327              	.LVL307:
 3328 01b8 8B442410 		movl	16(%rsp), %eax
 632:fltk-1.3.4-1/png/pngpread.c **** 
 3329              		.loc 1 632 0
 3330 01bc 818B2C01 		orl	$256, 300(%rbx)
 3330      00000001 
 3330      0000
 3331 01c6 0FC8     		bswap	%eax
 634:fltk-1.3.4-1/png/pngpread.c ****       {
 3332              		.loc 1 634 0
 3333 01c8 3D544144 		cmpl	$1229209940, %eax
 3333      49
 631:fltk-1.3.4-1/png/pngpread.c ****       png_ptr->mode |= PNG_HAVE_CHUNK_HEADER;
 3334              		.loc 1 631 0
 3335 01cd 89831802 		movl	%eax, 536(%rbx)
 3335      0000
 634:fltk-1.3.4-1/png/pngpread.c ****       {
 3336              		.loc 1 634 0
 3337 01d3 742B     		je	.L446
 638:fltk-1.3.4-1/png/pngpread.c ****             png_error(png_ptr, "Not enough compressed data");
 3338              		.loc 1 638 0
 3339 01d5 F6833001 		testb	$8, 304(%rbx)
 3339      000008
 636:fltk-1.3.4-1/png/pngpread.c **** 
 3340              		.loc 1 636 0
 3341 01dc C7838003 		movl	$1, 896(%rbx)
 3341      00000100 
 3341      0000
 638:fltk-1.3.4-1/png/pngpread.c ****             png_error(png_ptr, "Not enough compressed data");
 3342              		.loc 1 638 0
 3343 01e6 0F858EFE 		jne	.L442
 3343      FFFF
 639:fltk-1.3.4-1/png/pngpread.c **** 
 3344              		.loc 1 639 0
 3345 01ec BE000000 		movl	$.LC30, %esi
 3345      00
 3346 01f1 4889DF   		movq	%rbx, %rdi
 3347 01f4 E8000000 		call	png_error
 3347      00
 3348              	.LVL308:
 3349 01f9 0F1F8000 		.p2align 4,,10
 3349      000000
 3350              		.p2align 3
 3351              	.L446:
 644:fltk-1.3.4-1/png/pngpread.c ****    }
 3352              		.loc 1 644 0
 3353 0200 8BAB5803 		movl	856(%rbx), %ebp
 3353      0000
 3354 0206 89AB5802 		movl	%ebp, 600(%rbx)
 3354      0000
 3355 020c E935FEFF 		jmp	.L447
 3355      FF
 3356              	.L471:
 3357              	.LBE277:
 707:fltk-1.3.4-1/png/pngpread.c **** 
 3358              		.loc 1 707 0
 3359 0211 E8000000 		call	__stack_chk_fail
 3359      00
 3360              	.LVL309:
 3361              		.cfi_endproc
 3362              	.LFE67:
 3364              		.section	.text.unlikely.png_push_read_IDAT
 3365              	.LCOLDE31:
 3366              		.section	.text.png_push_read_IDAT
 3367              	.LHOTE31:
 3368              		.section	.text.unlikely.png_process_some_data,"ax",@progbits
 3369              	.LCOLDB32:
 3370              		.section	.text.png_process_some_data,"ax",@progbits
 3371              	.LHOTB32:
 3372              		.p2align 4,,15
 3373              		.globl	png_process_some_data
 3375              	png_process_some_data:
 3376              	.LFB59:
 114:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr == NULL)
 3377              		.loc 1 114 0
 3378              		.cfi_startproc
 3379              	.LVL310:
 115:fltk-1.3.4-1/png/pngpread.c ****       return;
 3380              		.loc 1 115 0
 3381 0000 4885FF   		testq	%rdi, %rdi
 3382 0003 743E     		je	.L472
 118:fltk-1.3.4-1/png/pngpread.c ****    {
 3383              		.loc 1 118 0
 3384 0005 8B878003 		movl	896(%rdi), %eax
 3384      0000
 3385 000b 83F801   		cmpl	$1, %eax
 3386 000e 7440     		je	.L475
 3387 0010 7E16     		jle	.L483
 3388 0012 83F802   		cmpl	$2, %eax
 3389 0015 7431     		je	.L478
 3390 0017 83F803   		cmpl	$3, %eax
 3391 001a 751C     		jne	.L474
 140:fltk-1.3.4-1/png/pngpread.c ****          break;
 3392              		.loc 1 140 0
 3393 001c E9000000 		jmp	png_push_crc_finish
 3393      00
 3394              	.LVL311:
 3395              		.p2align 4,,10
 3396 0021 0F1F8000 		.p2align 3
 3396      000000
 3397              	.L483:
 118:fltk-1.3.4-1/png/pngpread.c ****    {
 3398              		.loc 1 118 0
 3399 0028 85C0     		testl	%eax, %eax
 3400 002a 750C     		jne	.L474
 122:fltk-1.3.4-1/png/pngpread.c ****          break;
 3401              		.loc 1 122 0
 3402 002c E9000000 		jmp	png_push_read_sig
 3402      00
 3403              	.LVL312:
 3404              		.p2align 4,,10
 3405 0031 0F1F8000 		.p2align 3
 3405      000000
 3406              	.L474:
 146:fltk-1.3.4-1/png/pngpread.c ****          break;
 3407              		.loc 1 146 0
 3408 0038 48C78770 		movq	$0, 880(%rdi)
 3408      03000000 
 3408      000000
 3409              	.L472:
 3410 0043 F3C3     		rep ret
 3411              		.p2align 4,,10
 3412 0045 0F1F00   		.p2align 3
 3413              	.L478:
 134:fltk-1.3.4-1/png/pngpread.c ****          break;
 3414              		.loc 1 134 0
 3415 0048 E9000000 		jmp	png_push_read_IDAT
 3415      00
 3416              	.LVL313:
 3417 004d 0F1F00   		.p2align 4,,10
 3418              		.p2align 3
 3419              	.L475:
 128:fltk-1.3.4-1/png/pngpread.c ****          break;
 3420              		.loc 1 128 0
 3421 0050 E9000000 		jmp	png_push_read_chunk
 3421      00
 3422              	.LVL314:
 3423              		.cfi_endproc
 3424              	.LFE59:
 3426              		.section	.text.unlikely.png_process_some_data
 3427              	.LCOLDE32:
 3428              		.section	.text.png_process_some_data
 3429              	.LHOTE32:
 3430              		.section	.text.unlikely.png_process_data,"ax",@progbits
 3431              	.LCOLDB33:
 3432              		.section	.text.png_process_data,"ax",@progbits
 3433              	.LHOTB33:
 3434              		.p2align 4,,15
 3435              		.globl	png_process_data
 3437              	png_process_data:
 3438              	.LFB56:
  39:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr == NULL || info_ptr == NULL)
 3439              		.loc 1 39 0
 3440              		.cfi_startproc
 3441              	.LVL315:
  40:fltk-1.3.4-1/png/pngpread.c ****       return;
 3442              		.loc 1 40 0
 3443 0000 4885FF   		testq	%rdi, %rdi
 3444 0003 7456     		je	.L496
 3445 0005 4885F6   		testq	%rsi, %rsi
 3446 0008 7451     		je	.L496
  39:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr == NULL || info_ptr == NULL)
 3447              		.loc 1 39 0
 3448 000a 55       		pushq	%rbp
 3449              		.cfi_def_cfa_offset 16
 3450              		.cfi_offset 6, -16
 3451 000b 53       		pushq	%rbx
 3452              		.cfi_def_cfa_offset 24
 3453              		.cfi_offset 3, -24
 3454 000c 4889F5   		movq	%rsi, %rbp
 3455 000f 4889FB   		movq	%rdi, %rbx
 3456              	.LVL316:
 3457 0012 4883EC08 		subq	$8, %rsp
 3458              		.cfi_def_cfa_offset 32
 3459              	.LBB278:
 3460              	.LBB279:
 612:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->buffer_size = buffer_length + png_ptr->save_buffer_size;
 3461              		.loc 1 612 0
 3462 0016 48898F78 		movq	%rcx, 888(%rdi)
 3462      030000
 613:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->current_buffer_ptr = png_ptr->current_buffer;
 3463              		.loc 1 613 0
 3464 001d 48038F60 		addq	864(%rdi), %rcx
 3464      030000
 3465              	.LVL317:
 611:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->current_buffer_size = buffer_length;
 3466              		.loc 1 611 0
 3467 0024 48899750 		movq	%rdx, 848(%rdi)
 3467      030000
 614:fltk-1.3.4-1/png/pngpread.c **** }
 3468              		.loc 1 614 0
 3469 002b 48899748 		movq	%rdx, 840(%rdi)
 3469      030000
 3470              	.LBE279:
 3471              	.LBE278:
  45:fltk-1.3.4-1/png/pngpread.c ****    {
 3472              		.loc 1 45 0
 3473 0032 4885C9   		testq	%rcx, %rcx
 3474              	.LBB281:
 3475              	.LBB280:
 613:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->current_buffer_ptr = png_ptr->current_buffer;
 3476              		.loc 1 613 0
 3477 0035 48898F70 		movq	%rcx, 880(%rdi)
 3477      030000
 3478              	.LBE280:
 3479              	.LBE281:
  45:fltk-1.3.4-1/png/pngpread.c ****    {
 3480              		.loc 1 45 0
 3481 003c 7417     		je	.L484
 3482              	.LVL318:
 3483 003e 6690     		.p2align 4,,10
 3484              		.p2align 3
 3485              	.L491:
  47:fltk-1.3.4-1/png/pngpread.c ****    }
 3486              		.loc 1 47 0
 3487 0040 4889EE   		movq	%rbp, %rsi
 3488 0043 4889DF   		movq	%rbx, %rdi
 3489 0046 E8000000 		call	png_process_some_data
 3489      00
 3490              	.LVL319:
  45:fltk-1.3.4-1/png/pngpread.c ****    {
 3491              		.loc 1 45 0
 3492 004b 4883BB70 		cmpq	$0, 880(%rbx)
 3492      03000000 
 3493 0053 75EB     		jne	.L491
 3494              	.L484:
  49:fltk-1.3.4-1/png/pngpread.c **** 
 3495              		.loc 1 49 0
 3496 0055 4883C408 		addq	$8, %rsp
 3497              		.cfi_def_cfa_offset 24
 3498 0059 5B       		popq	%rbx
 3499              		.cfi_restore 3
 3500              		.cfi_def_cfa_offset 16
 3501              	.LVL320:
 3502 005a 5D       		popq	%rbp
 3503              		.cfi_restore 6
 3504              		.cfi_def_cfa_offset 8
 3505              	.LVL321:
 3506              	.L496:
 3507 005b F3C3     		rep ret
 3508              		.cfi_endproc
 3509              	.LFE56:
 3511              		.section	.text.unlikely.png_process_data
 3512              	.LCOLDE33:
 3513              		.section	.text.png_process_data
 3514              	.LHOTE33:
 3515              		.section	.text.unlikely.png_read_push_finish_row,"ax",@progbits
 3516              	.LCOLDB34:
 3517              		.section	.text.png_read_push_finish_row,"ax",@progbits
 3518              	.LHOTB34:
 3519              		.p2align 4,,15
 3520              		.globl	png_read_push_finish_row
 3522              	png_read_push_finish_row:
 3523              	.LFB70:
1047:fltk-1.3.4-1/png/pngpread.c ****    /* Arrays to facilitate easy interlacing - use pass (0 - 6) as index */
 3524              		.loc 1 1047 0
 3525              		.cfi_startproc
 3526              	.LVL322:
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 3527              		.loc 1 1068 0
 3528 0000 8B871402 		movl	532(%rdi), %eax
 3528      0000
 3529 0006 83C001   		addl	$1, %eax
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 3530              		.loc 1 1069 0
 3531 0009 3B870002 		cmpl	512(%rdi), %eax
 3531      0000
1068:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_number < png_ptr->num_rows)
 3532              		.loc 1 1068 0
 3533 000f 89871402 		movl	%eax, 532(%rdi)
 3533      0000
1069:fltk-1.3.4-1/png/pngpread.c ****       return;
 3534              		.loc 1 1069 0
 3535 0015 7209     		jb	.L497
1072:fltk-1.3.4-1/png/pngpread.c ****    {
 3536              		.loc 1 1072 0
 3537 0017 80BF7402 		cmpb	$0, 628(%rdi)
 3537      000000
 3538 001e 7508     		jne	.L499
 3539              	.L497:
 3540 0020 F3C3     		rep ret
 3541              		.p2align 4,,10
 3542 0022 660F1F44 		.p2align 3
 3542      0000
 3543              	.L499:
 3544 0028 E9000000 		jmp	png_read_push_finish_row.part.1
 3544      00
 3545              	.LVL323:
 3546              		.cfi_endproc
 3547              	.LFE70:
 3549              		.section	.text.unlikely.png_read_push_finish_row
 3550              	.LCOLDE34:
 3551              		.section	.text.png_read_push_finish_row
 3552              	.LHOTE34:
 3553              		.section	.text.unlikely.png_push_have_info,"ax",@progbits
 3554              	.LCOLDB35:
 3555              		.section	.text.png_push_have_info,"ax",@progbits
 3556              	.LHOTB35:
 3557              		.p2align 4,,15
 3558              		.globl	png_push_have_info
 3560              	png_push_have_info:
 3561              	.LFB71:
1110:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->info_fn != NULL)
 3562              		.loc 1 1110 0
 3563              		.cfi_startproc
 3564              	.LVL324:
1111:fltk-1.3.4-1/png/pngpread.c ****       (*(png_ptr->info_fn))(png_ptr, info_ptr);
 3565              		.loc 1 1111 0
 3566 0000 488B8720 		movq	800(%rdi), %rax
 3566      030000
 3567 0007 4885C0   		testq	%rax, %rax
 3568 000a 7404     		je	.L500
1112:fltk-1.3.4-1/png/pngpread.c **** }
 3569              		.loc 1 1112 0
 3570 000c FFE0     		jmp	*%rax
 3571              	.LVL325:
 3572 000e 6690     		.p2align 4,,10
 3573              		.p2align 3
 3574              	.L500:
 3575 0010 F3C3     		rep ret
 3576              		.cfi_endproc
 3577              	.LFE71:
 3579              		.section	.text.unlikely.png_push_have_info
 3580              	.LCOLDE35:
 3581              		.section	.text.png_push_have_info
 3582              	.LHOTE35:
 3583              		.section	.text.unlikely.png_push_have_end,"ax",@progbits
 3584              	.LCOLDB36:
 3585              		.section	.text.png_push_have_end,"ax",@progbits
 3586              	.LHOTB36:
 3587              		.p2align 4,,15
 3588              		.globl	png_push_have_end
 3590              	png_push_have_end:
 3591              	.LFB72:
1117:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->end_fn != NULL)
 3592              		.loc 1 1117 0
 3593              		.cfi_startproc
 3594              	.LVL326:
1118:fltk-1.3.4-1/png/pngpread.c ****       (*(png_ptr->end_fn))(png_ptr, info_ptr);
 3595              		.loc 1 1118 0
 3596 0000 488B8730 		movq	816(%rdi), %rax
 3596      030000
 3597 0007 4885C0   		testq	%rax, %rax
 3598 000a 7404     		je	.L502
1119:fltk-1.3.4-1/png/pngpread.c **** }
 3599              		.loc 1 1119 0
 3600 000c FFE0     		jmp	*%rax
 3601              	.LVL327:
 3602 000e 6690     		.p2align 4,,10
 3603              		.p2align 3
 3604              	.L502:
 3605 0010 F3C3     		rep ret
 3606              		.cfi_endproc
 3607              	.LFE72:
 3609              		.section	.text.unlikely.png_push_have_end
 3610              	.LCOLDE36:
 3611              		.section	.text.png_push_have_end
 3612              	.LHOTE36:
 3613              		.section	.text.unlikely.png_push_have_row,"ax",@progbits
 3614              	.LCOLDB37:
 3615              		.section	.text.png_push_have_row,"ax",@progbits
 3616              	.LHOTB37:
 3617              		.p2align 4,,15
 3618              		.globl	png_push_have_row
 3620              	png_push_have_row:
 3621              	.LFB73:
1124:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr->row_fn != NULL)
 3622              		.loc 1 1124 0
 3623              		.cfi_startproc
 3624              	.LVL328:
1125:fltk-1.3.4-1/png/pngpread.c ****       (*(png_ptr->row_fn))(png_ptr, row, png_ptr->row_number,
 3625              		.loc 1 1125 0
 3626 0000 488B8728 		movq	808(%rdi), %rax
 3626      030000
 3627 0007 4885C0   		testq	%rax, %rax
 3628 000a 7414     		je	.L504
 3629              		.loc 1 1126 0
 3630 000c 0FB68F75 		movzbl	629(%rdi), %ecx
 3630      020000
 3631 0013 8B971402 		movl	532(%rdi), %edx
 3631      0000
 3632 0019 FFE0     		jmp	*%rax
 3633              	.LVL329:
 3634 001b 0F1F4400 		.p2align 4,,10
 3634      00
 3635              		.p2align 3
 3636              	.L504:
 3637 0020 F3C3     		rep ret
 3638              		.cfi_endproc
 3639              	.LFE73:
 3641              		.section	.text.unlikely.png_push_have_row
 3642              	.LCOLDE37:
 3643              		.section	.text.png_push_have_row
 3644              	.LHOTE37:
 3645              		.section	.text.unlikely.png_progressive_combine_row,"ax",@progbits
 3646              	.LCOLDB38:
 3647              		.section	.text.png_progressive_combine_row,"ax",@progbits
 3648              	.LHOTB38:
 3649              		.p2align 4,,15
 3650              		.globl	png_progressive_combine_row
 3652              	png_progressive_combine_row:
 3653              	.LFB74:
1127:fltk-1.3.4-1/png/pngpread.c ****          (int)png_ptr->pass);
1128:fltk-1.3.4-1/png/pngpread.c **** }
1129:fltk-1.3.4-1/png/pngpread.c **** 
1130:fltk-1.3.4-1/png/pngpread.c **** void PNGAPI
1131:fltk-1.3.4-1/png/pngpread.c **** png_progressive_combine_row(png_const_structrp png_ptr, png_bytep old_row,
1132:fltk-1.3.4-1/png/pngpread.c ****     png_const_bytep new_row)
1133:fltk-1.3.4-1/png/pngpread.c **** {
 3654              		.loc 1 1133 0
 3655              		.cfi_startproc
 3656              	.LVL330:
1134:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr == NULL)
1135:fltk-1.3.4-1/png/pngpread.c ****       return;
1136:fltk-1.3.4-1/png/pngpread.c **** 
1137:fltk-1.3.4-1/png/pngpread.c ****    /* new_row is a flag here - if it is NULL then the app callback was called
1138:fltk-1.3.4-1/png/pngpread.c ****     * from an empty row (see the calls to png_struct::row_fn below), otherwise
1139:fltk-1.3.4-1/png/pngpread.c ****     * it must be png_ptr->row_buf+1
1140:fltk-1.3.4-1/png/pngpread.c ****     */
1141:fltk-1.3.4-1/png/pngpread.c ****    if (new_row != NULL)
 3657              		.loc 1 1141 0
 3658 0000 4885D2   		testq	%rdx, %rdx
 3659 0003 7413     		je	.L506
 3660 0005 4885FF   		testq	%rdi, %rdi
 3661 0008 740E     		je	.L506
1142:fltk-1.3.4-1/png/pngpread.c ****       png_combine_row(png_ptr, old_row, 1/*blocky display*/);
 3662              		.loc 1 1142 0
 3663 000a BA010000 		movl	$1, %edx
 3663      00
 3664              	.LVL331:
 3665 000f E9000000 		jmp	png_combine_row
 3665      00
 3666              	.LVL332:
 3667              		.p2align 4,,10
 3668 0014 0F1F4000 		.p2align 3
 3669              	.L506:
 3670 0018 F3C3     		rep ret
 3671              		.cfi_endproc
 3672              	.LFE74:
 3674              		.section	.text.unlikely.png_progressive_combine_row
 3675              	.LCOLDE38:
 3676              		.section	.text.png_progressive_combine_row
 3677              	.LHOTE38:
 3678              		.section	.text.unlikely.png_set_progressive_read_fn,"ax",@progbits
 3679              	.LCOLDB39:
 3680              		.section	.text.png_set_progressive_read_fn,"ax",@progbits
 3681              	.LHOTB39:
 3682              		.p2align 4,,15
 3683              		.globl	png_set_progressive_read_fn
 3685              	png_set_progressive_read_fn:
 3686              	.LFB75:
1143:fltk-1.3.4-1/png/pngpread.c **** }
1144:fltk-1.3.4-1/png/pngpread.c **** 
1145:fltk-1.3.4-1/png/pngpread.c **** void PNGAPI
1146:fltk-1.3.4-1/png/pngpread.c **** png_set_progressive_read_fn(png_structrp png_ptr, png_voidp progressive_ptr,
1147:fltk-1.3.4-1/png/pngpread.c ****     png_progressive_info_ptr info_fn, png_progressive_row_ptr row_fn,
1148:fltk-1.3.4-1/png/pngpread.c ****     png_progressive_end_ptr end_fn)
1149:fltk-1.3.4-1/png/pngpread.c **** {
 3687              		.loc 1 1149 0
 3688              		.cfi_startproc
 3689              	.LVL333:
1150:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr == NULL)
 3690              		.loc 1 1150 0
 3691 0000 4885FF   		testq	%rdi, %rdi
 3692 0003 7423     		je	.L514
1151:fltk-1.3.4-1/png/pngpread.c ****       return;
1152:fltk-1.3.4-1/png/pngpread.c **** 
1153:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->info_fn = info_fn;
 3693              		.loc 1 1153 0
 3694 0005 48899720 		movq	%rdx, 800(%rdi)
 3694      030000
1154:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->row_fn = row_fn;
 3695              		.loc 1 1154 0
 3696 000c 48898F28 		movq	%rcx, 808(%rdi)
 3696      030000
1155:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->end_fn = end_fn;
1156:fltk-1.3.4-1/png/pngpread.c **** 
1157:fltk-1.3.4-1/png/pngpread.c ****    png_set_read_fn(png_ptr, progressive_ptr, png_push_fill_buffer);
 3697              		.loc 1 1157 0
 3698 0013 BA000000 		movl	$png_push_fill_buffer, %edx
 3698      00
 3699              	.LVL334:
1155:fltk-1.3.4-1/png/pngpread.c ****    png_ptr->end_fn = end_fn;
 3700              		.loc 1 1155 0
 3701 0018 4C898730 		movq	%r8, 816(%rdi)
 3701      030000
 3702              		.loc 1 1157 0
 3703 001f E9000000 		jmp	png_set_read_fn
 3703      00
 3704              	.LVL335:
 3705              		.p2align 4,,10
 3706 0024 0F1F4000 		.p2align 3
 3707              	.L514:
 3708 0028 F3C3     		rep ret
 3709              		.cfi_endproc
 3710              	.LFE75:
 3712              		.section	.text.unlikely.png_set_progressive_read_fn
 3713              	.LCOLDE39:
 3714              		.section	.text.png_set_progressive_read_fn
 3715              	.LHOTE39:
 3716              		.section	.text.unlikely.png_get_progressive_ptr,"ax",@progbits
 3717              	.LCOLDB40:
 3718              		.section	.text.png_get_progressive_ptr,"ax",@progbits
 3719              	.LHOTB40:
 3720              		.p2align 4,,15
 3721              		.globl	png_get_progressive_ptr
 3723              	png_get_progressive_ptr:
 3724              	.LFB76:
1158:fltk-1.3.4-1/png/pngpread.c **** }
1159:fltk-1.3.4-1/png/pngpread.c **** 
1160:fltk-1.3.4-1/png/pngpread.c **** png_voidp PNGAPI
1161:fltk-1.3.4-1/png/pngpread.c **** png_get_progressive_ptr(png_const_structrp png_ptr)
1162:fltk-1.3.4-1/png/pngpread.c **** {
 3725              		.loc 1 1162 0
 3726              		.cfi_startproc
 3727              	.LVL336:
1163:fltk-1.3.4-1/png/pngpread.c ****    if (png_ptr == NULL)
 3728              		.loc 1 1163 0
 3729 0000 4885FF   		testq	%rdi, %rdi
 3730 0003 740B     		je	.L518
1164:fltk-1.3.4-1/png/pngpread.c ****       return (NULL);
1165:fltk-1.3.4-1/png/pngpread.c **** 
1166:fltk-1.3.4-1/png/pngpread.c ****    return png_ptr->io_ptr;
 3731              		.loc 1 1166 0
 3732 0005 488B8708 		movq	264(%rdi), %rax
 3732      010000
 3733 000c C3       		ret
 3734 000d 0F1F00   		.p2align 4,,10
 3735              		.p2align 3
 3736              	.L518:
1164:fltk-1.3.4-1/png/pngpread.c ****       return (NULL);
 3737              		.loc 1 1164 0
 3738 0010 31C0     		xorl	%eax, %eax
1167:fltk-1.3.4-1/png/pngpread.c **** }
 3739              		.loc 1 1167 0
 3740 0012 C3       		ret
 3741              		.cfi_endproc
 3742              	.LFE76:
 3744              		.section	.text.unlikely.png_get_progressive_ptr
 3745              	.LCOLDE40:
 3746              		.section	.text.png_get_progressive_ptr
 3747              	.LHOTE40:
 3748              		.section	.rodata.png_pass_ystart.6883,"a",@progbits
 3751              	png_pass_ystart.6883:
 3752 0000 00       		.byte	0
 3753 0001 00       		.byte	0
 3754 0002 04       		.byte	4
 3755 0003 00       		.byte	0
 3756 0004 02       		.byte	2
 3757 0005 00       		.byte	0
 3758 0006 01       		.byte	1
 3759              		.section	.rodata.png_pass_yinc.6884,"a",@progbits
 3762              	png_pass_yinc.6884:
 3763 0000 08       		.byte	8
 3764 0001 08       		.byte	8
 3765 0002 08       		.byte	8
 3766 0003 04       		.byte	4
 3767 0004 04       		.byte	4
 3768 0005 02       		.byte	2
 3769 0006 02       		.byte	2
 3770              		.section	.rodata.png_pass_start.6881,"a",@progbits
 3773              	png_pass_start.6881:
 3774 0000 00       		.byte	0
 3775 0001 04       		.byte	4
 3776 0002 00       		.byte	0
 3777 0003 02       		.byte	2
 3778 0004 00       		.byte	0
 3779 0005 01       		.byte	1
 3780 0006 00       		.byte	0
 3781              		.section	.rodata.png_pass_inc.6882,"a",@progbits
 3784              	png_pass_inc.6882:
 3785 0000 08       		.byte	8
 3786 0001 08       		.byte	8
 3787 0002 04       		.byte	4
 3788 0003 04       		.byte	4
 3789 0004 02       		.byte	2
 3790 0005 02       		.byte	2
 3791 0006 01       		.byte	1
 3792              		.text
 3793              	.Letext0:
 3794              		.section	.text.unlikely.png_push_fill_buffer
 3795              	.Letext_cold0:
 3796              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 3797              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 3798              		.file 5 "/usr/include/libio.h"
 3799              		.file 6 "/usr/include/x86_64-linux-gnu/bits/setjmp.h"
 3800              		.file 7 "/usr/include/x86_64-linux-gnu/bits/sigset.h"
 3801              		.file 8 "/usr/include/setjmp.h"
 3802              		.file 9 "fltk-1.3.4-1/png/pngconf.h"
 3803              		.file 10 "fltk-1.3.4-1/png/png.h"
 3804              		.file 11 "fltk-1.3.4-1/png/pngstruct.h"
 3805              		.file 12 "fltk-1.3.4-1/png/pnginfo.h"
 3806              		.file 13 "/usr/include/x86_64-linux-gnu/zconf.h"
 3807              		.file 14 "/usr/include/zlib.h"
 3808              		.file 15 "/usr/include/stdio.h"
 3809              		.file 16 "fltk-1.3.4-1/png/pngpriv.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 pngpread.c
     /tmp/cc0h7PKf.s:14     .text.png_push_fill_buffer:0000000000000000 png_push_fill_buffer
     /tmp/cc0h7PKf.s:144    .text.png_read_push_finish_row.part.1:0000000000000000 png_read_push_finish_row.part.1
     /tmp/cc0h7PKf.s:3784   .rodata.png_pass_inc.6882:0000000000000000 png_pass_inc.6882
     /tmp/cc0h7PKf.s:3773   .rodata.png_pass_start.6881:0000000000000000 png_pass_start.6881
     /tmp/cc0h7PKf.s:3762   .rodata.png_pass_yinc.6884:0000000000000000 png_pass_yinc.6884
     /tmp/cc0h7PKf.s:3751   .rodata.png_pass_ystart.6883:0000000000000000 png_pass_ystart.6883
     /tmp/cc0h7PKf.s:310    .text.png_process_data_skip:0000000000000000 png_process_data_skip
     /tmp/cc0h7PKf.s:391    .text.png_push_read_sig:0000000000000000 png_push_read_sig
     /tmp/cc0h7PKf.s:519    .text.png_push_crc_skip:0000000000000000 png_push_crc_skip
     /tmp/cc0h7PKf.s:550    .text.png_push_save_buffer:0000000000000000 png_push_save_buffer
     /tmp/cc0h7PKf.s:730    .text.png_process_data_pause:0000000000000000 png_process_data_pause
     /tmp/cc0h7PKf.s:792    .text.png_push_crc_finish:0000000000000000 png_push_crc_finish
     /tmp/cc0h7PKf.s:993    .text.png_push_read_chunk:0000000000000000 png_push_read_chunk
     /tmp/cc0h7PKf.s:1633   .text.png_push_restore_buffer:0000000000000000 png_push_restore_buffer
     /tmp/cc0h7PKf.s:1674   .text.png_push_process_row:0000000000000000 png_push_process_row
     /tmp/cc0h7PKf.s:2882   .text.png_process_IDAT_data:0000000000000000 png_process_IDAT_data
     /tmp/cc0h7PKf.s:3119   .text.png_push_read_IDAT:0000000000000000 png_push_read_IDAT
     /tmp/cc0h7PKf.s:3375   .text.png_process_some_data:0000000000000000 png_process_some_data
     /tmp/cc0h7PKf.s:3437   .text.png_process_data:0000000000000000 png_process_data
     /tmp/cc0h7PKf.s:3522   .text.png_read_push_finish_row:0000000000000000 png_read_push_finish_row
     /tmp/cc0h7PKf.s:3560   .text.png_push_have_info:0000000000000000 png_push_have_info
     /tmp/cc0h7PKf.s:3590   .text.png_push_have_end:0000000000000000 png_push_have_end
     /tmp/cc0h7PKf.s:3620   .text.png_push_have_row:0000000000000000 png_push_have_row
     /tmp/cc0h7PKf.s:3652   .text.png_progressive_combine_row:0000000000000000 png_progressive_combine_row
     /tmp/cc0h7PKf.s:3685   .text.png_set_progressive_read_fn:0000000000000000 png_set_progressive_read_fn
     /tmp/cc0h7PKf.s:3723   .text.png_get_progressive_ptr:0000000000000000 png_get_progressive_ptr
                           .group:0000000000000000 wm4.0.cf9695abff4f49bdfe00dc4091904acd
                           .group:0000000000000000 wm4.stdcpredef.h.19.bf2bf6c5fb087dfb5ef2d2297c2795de
                           .group:0000000000000000 wm4.pngpriv.h.26.ca3d1719773cd86007410b516123e125
                           .group:0000000000000000 wm4.features.h.19.22780be97c2f806ec599b8b99aa89f7d
                           .group:0000000000000000 wm4.cdefs.h.19.56613e71f285ebad825b69b151170a81
                           .group:0000000000000000 wm4.wordsize.h.4.256e8fdbd37801980286acdbc40d0280
                           .group:0000000000000000 wm4.cdefs.h.432.619afd0aac7c4b439843706c1b28ddea
                           .group:0000000000000000 wm4.stubs64.h.10.918ceb5fa58268542bf143e4c1efbcf3
                           .group:0000000000000000 wm4.stdlib.h.27.59e2586c75bdbcb991b248ad7257b993
                           .group:0000000000000000 wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1
                           .group:0000000000000000 wm4.stdlib.h.37.e081b308f911db94d3185af615f2b2e2
                           .group:0000000000000000 wm4.string.h.23.8394011d5995a16f15d67d04e84a1d69
                           .group:0000000000000000 wm4.stddef.h.238.04cc7214bceba497b20d15c10fd97511
                           .group:0000000000000000 wm4.string.h.24.1b0dc67418e7128d207285861439c2f8
                           .group:0000000000000000 wm4.endian.h.19.ff00c9c0f5e9f9a9719c5de76ace57b4
                           .group:0000000000000000 wm4.endian.h.41.27d650ce666b76881e2a2a218ea61984
                           .group:0000000000000000 wm4.types.h.89.468e2451361e3b92f048f6cad51690ff
                           .group:0000000000000000 wm4.typesizes.h.24.40eb69a6270178f15d1bf3d7b6635a8b
                           .group:0000000000000000 wm4.string2.h.55.e4a4cfd7781cc64a4341475e67436ab1
                           .group:0000000000000000 wm4.string3.h.31.2b75bd65145c50aeedb61673ce0d3293
                           .group:0000000000000000 wm4.pnglibconf.h.15.30e2eea90e566ac06da4f4de487193d7
                           .group:0000000000000000 wm4.pngpriv.h.130.f65d93453b5b5837849611ffe82d627a
                           .group:0000000000000000 wm4.png.h.412.12a95b2193a7d0bc2282b72c70a28ce1
                           .group:0000000000000000 wm4.limits.h.23.f0fd92c175c1576df467c4d5fe2b091a
                           .group:0000000000000000 wm4.posix1_lim.h.25.28c8eb2d22697e7711efefdec5344a02
                           .group:0000000000000000 wm4.local_lim.h.25.97ee4129efb08ad296101237bcd3401b
                           .group:0000000000000000 wm4.limits.h.2.9ff59823e8adcf4502d980ef41362326
                           .group:0000000000000000 wm4.local_lim.h.42.9dc3935e0e3b94e23cda247e4e39bd8b
                           .group:0000000000000000 wm4.limits.h.60.eb7066f861c8b8edc7a0a399744b0335
                           .group:0000000000000000 wm4.stddef.h.39.d5a83c17f38162a5dd6f834eaf38f8ef
                           .group:0000000000000000 wm4.stdio.h.26.4719156f1aea2bb9662fd6c582dc9a4c
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:0000000000000000 wm4.stdio.h.36.2dd12c1fd035242ad5cfd0152a01be5a
                           .group:0000000000000000 wm4._G_config.h.5.b0f37d9e474454cf6e459063458db32f
                           .group:0000000000000000 wm4.wchar.h.80.eea3eba2d2a17aace9470a8e0d8218dc
                           .group:0000000000000000 wm4._G_config.h.46.5187c97b14fd664662cb32e6b94fc49e
                           .group:0000000000000000 wm4.libio.h.33.a775b9ecae273f33bc59931e9891e4ca
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.libio.h.51.dab170798ec1df48c625aea7c30e1b63
                           .group:0000000000000000 wm4.stdio.h.120.80cbf0ec1718a5b27e6428218e29c72d
                           .group:0000000000000000 wm4.stdio_lim.h.23.f8541119d1bcf759d7de9531671fd758
                           .group:0000000000000000 wm4.stdio.h.172.df21df34a7396d7da2e08f9b617d582f
                           .group:0000000000000000 wm4.stdio.h.26.e50fc3808d57d965ceefc6f6dd102eb7
                           .group:0000000000000000 wm4.sigset.h.20.f36413b6d2364ad847d3db53fb03e683
                           .group:0000000000000000 wm4.setjmp.h.67.51aa194c3c89a841663c00cb93fd90ff
                           .group:0000000000000000 wm4.time.h.26.6a3cabd4f228e226db6723a3b0c81ba6
                           .group:0000000000000000 wm4.time.h.40.99bfb90272c7e82357ef3c2f5c6fefc8
                           .group:0000000000000000 wm4.time.h.53.f8af6908497bac0ca16faea86fb8cd87
                           .group:0000000000000000 wm4.pngconf.h.86.6636b2584cb7be1618479e118d71e58c
                           .group:0000000000000000 wm4.png.h.506.fa53b6434c0b20c8e63094b04d7940c5
                           .group:0000000000000000 wm4.pngpriv.h.298.dc2c896ce0eddc5cfadee24e76e3c417
                           .group:0000000000000000 wm4.float.h.29.1cf88a0527b6b1225d49fbee2b32acb7
                           .group:0000000000000000 wm4.math.h.26.671af5ac9cd425a35e0730f7b6d7cde2
                           .group:0000000000000000 wm4.libmsimddeclstubs.h.34.75644856b74ba3d815155fe5fe7ecc56
                           .group:0000000000000000 wm4.mathdef.h.23.67c0aa4a204f1f427459dfc651aba565
                           .group:0000000000000000 wm4.math.h.55.cf380f99c57d42476a5252f30065036a
                           .group:0000000000000000 wm4.math.h.84.742292806c6be54f49dc607928a827f7
                           .group:0000000000000000 wm4.math.h.105.59ff0f83ebf6a04e70e145cef2d1185e
                           .group:0000000000000000 wm4.math.h.152.48a142bc1575e748473ff86330dee044
                           .group:0000000000000000 wm4.math.h.30.7cada3efe024725df2da4c705b6566be
                           .group:0000000000000000 wm4.pngpriv.h.481.f98e7c29eaaa759546a3f9808bc25c74
                           .group:0000000000000000 wm4.pngstruct.h.22.7b9573417641055ab8f42438aa8afadf
                           .group:0000000000000000 wm4.zconf.h.9.bbc7b5783b51507f7721a5620139b4ee
                           .group:0000000000000000 wm4.zconf.h.397.69c03305677a9a6792fe2a94f7c9f69b
                           .group:0000000000000000 wm4.types.h.23.92678977f3921b8dce508274ac68f78d
                           .group:0000000000000000 wm4.types.h.187.12f6c32afb936b45a5f241219964ce93
                           .group:0000000000000000 wm4.stdarg.h.31.48e922dd0aaedfb616aafd8a7b7a4949
                           .group:0000000000000000 wm4.unistd.h.23.c85a58a698f53edadcf64287ab24fecb
                           .group:0000000000000000 wm4.posix_opt.h.20.9a8aece77957db1725bd2b9521e5f9c5
                           .group:0000000000000000 wm4.unistd.h.213.4c582e35260d661b081322974b7c1e74
                           .group:0000000000000000 wm4.unistd.h.284.7e168706bc8bd978e02fd1da439d9bc3
                           .group:0000000000000000 wm4.confname.h.27.6b00117a32f457cc72e5ac810a9adade
                           .group:0000000000000000 wm4.zconf.h.457.505c3613686dd75e492569d7a56a6eb0
                           .group:0000000000000000 wm4.zlib.h.40.5a15529ab8e285cee4b0ddab32502c27
                           .group:0000000000000000 wm4.pngstruct.h.44.bc957704556ff8ddcb697678a008ffae
                           .group:0000000000000000 wm4.pngpriv.h.853.4585af3e74cfb155d8486c5333b94adf
                           .group:0000000000000000 wm4.pngdebug.h.36.e9c57d5f35e3128225fb629498ec6fc8

UNDEFINED SYMBOLS
memcpy
memset
png_error
png_sig_cmp
png_malloc_warn
png_free
png_calculate_crc
png_crc_finish
png_get_uint_31
png_reset_crc
png_crc_read
png_check_chunk_name
png_handle_IEND
png_handle_IHDR
png_chunk_unknown_handling
png_handle_unknown
png_benign_error
png_handle_sBIT
png_handle_PLTE
png_handle_gAMA
png_handle_cHRM
png_handle_sRGB
png_handle_iCCP
png_handle_sPLT
png_handle_tRNS
png_handle_bKGD
png_handle_hIST
png_handle_pHYs
png_handle_oFFs
png_handle_pCAL
png_handle_sCAL
__stack_chk_fail
png_handle_tIME
png_handle_tEXt
png_handle_iTXt
png_handle_zTXt
png_read_filter_row
png_do_read_transformations
png_do_read_interlace
inflate
png_warning
png_combine_row
png_set_read_fn
