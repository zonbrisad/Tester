   1              		.file	"pngwrite.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.unlikely.png_reset_filter_heuristics,"ax",@progbits
   5              	.LCOLDB0:
   6              		.section	.text.png_reset_filter_heuristics,"ax",@progbits
   7              	.LHOTB0:
   8              		.p2align 4,,15
   9              		.section	.text.unlikely.png_reset_filter_heuristics
  10              	.Ltext_cold0:
  11              		.section	.text.png_reset_filter_heuristics
  13              	png_reset_filter_heuristics:
  14              	.LFB73:
  15              		.file 1 "fltk-1.3.4-1/png/pngwrite.c"
   1:fltk-1.3.4-1/png/pngwrite.c **** 
   2:fltk-1.3.4-1/png/pngwrite.c **** /* pngwrite.c - general routines to write a PNG file
   3:fltk-1.3.4-1/png/pngwrite.c ****  *
   4:fltk-1.3.4-1/png/pngwrite.c ****  * Last changed in libpng 1.6.15 [November 20, 2014]
   5:fltk-1.3.4-1/png/pngwrite.c ****  * Copyright (c) 1998-2014 Glenn Randers-Pehrson
   6:fltk-1.3.4-1/png/pngwrite.c ****  * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
   7:fltk-1.3.4-1/png/pngwrite.c ****  * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
   8:fltk-1.3.4-1/png/pngwrite.c ****  *
   9:fltk-1.3.4-1/png/pngwrite.c ****  * This code is released under the libpng license.
  10:fltk-1.3.4-1/png/pngwrite.c ****  * For conditions of distribution and use, see the disclaimer
  11:fltk-1.3.4-1/png/pngwrite.c ****  * and license in png.h
  12:fltk-1.3.4-1/png/pngwrite.c ****  */
  13:fltk-1.3.4-1/png/pngwrite.c **** 
  14:fltk-1.3.4-1/png/pngwrite.c **** #include "pngpriv.h"
  15:fltk-1.3.4-1/png/pngwrite.c **** #if defined(PNG_SIMPLIFIED_WRITE_SUPPORTED) && defined(PNG_STDIO_SUPPORTED)
  16:fltk-1.3.4-1/png/pngwrite.c **** #  include <errno.h>
  17:fltk-1.3.4-1/png/pngwrite.c **** #endif
  18:fltk-1.3.4-1/png/pngwrite.c **** 
  19:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_SUPPORTED
  20:fltk-1.3.4-1/png/pngwrite.c **** 
  21:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED
  22:fltk-1.3.4-1/png/pngwrite.c **** /* Write out all the unknown chunks for the current given location */
  23:fltk-1.3.4-1/png/pngwrite.c **** static void
  24:fltk-1.3.4-1/png/pngwrite.c **** write_unknown_chunks(png_structrp png_ptr, png_const_inforp info_ptr,
  25:fltk-1.3.4-1/png/pngwrite.c ****    unsigned int where)
  26:fltk-1.3.4-1/png/pngwrite.c **** {
  27:fltk-1.3.4-1/png/pngwrite.c ****    if (info_ptr->unknown_chunks_num != 0)
  28:fltk-1.3.4-1/png/pngwrite.c ****    {
  29:fltk-1.3.4-1/png/pngwrite.c ****       png_const_unknown_chunkp up;
  30:fltk-1.3.4-1/png/pngwrite.c **** 
  31:fltk-1.3.4-1/png/pngwrite.c ****       png_debug(5, "writing extra chunks");
  32:fltk-1.3.4-1/png/pngwrite.c **** 
  33:fltk-1.3.4-1/png/pngwrite.c ****       for (up = info_ptr->unknown_chunks;
  34:fltk-1.3.4-1/png/pngwrite.c ****            up < info_ptr->unknown_chunks + info_ptr->unknown_chunks_num;
  35:fltk-1.3.4-1/png/pngwrite.c ****            ++up)
  36:fltk-1.3.4-1/png/pngwrite.c ****          if ((up->location & where) != 0)
  37:fltk-1.3.4-1/png/pngwrite.c ****       {
  38:fltk-1.3.4-1/png/pngwrite.c ****          /* If per-chunk unknown chunk handling is enabled use it, otherwise
  39:fltk-1.3.4-1/png/pngwrite.c ****           * just write the chunks the application has set.
  40:fltk-1.3.4-1/png/pngwrite.c ****           */
  41:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_SET_UNKNOWN_CHUNKS_SUPPORTED
  42:fltk-1.3.4-1/png/pngwrite.c ****          int keep = png_handle_as_unknown(png_ptr, up->name);
  43:fltk-1.3.4-1/png/pngwrite.c **** 
  44:fltk-1.3.4-1/png/pngwrite.c ****          /* NOTE: this code is radically different from the read side in the
  45:fltk-1.3.4-1/png/pngwrite.c ****           * matter of handling an ancillary unknown chunk.  In the read side
  46:fltk-1.3.4-1/png/pngwrite.c ****           * the default behavior is to discard it, in the code below the default
  47:fltk-1.3.4-1/png/pngwrite.c ****           * behavior is to write it.  Critical chunks are, however, only
  48:fltk-1.3.4-1/png/pngwrite.c ****           * written if explicitly listed or if the default is set to write all
  49:fltk-1.3.4-1/png/pngwrite.c ****           * unknown chunks.
  50:fltk-1.3.4-1/png/pngwrite.c ****           *
  51:fltk-1.3.4-1/png/pngwrite.c ****           * The default handling is also slightly weird - it is not possible to
  52:fltk-1.3.4-1/png/pngwrite.c ****           * stop the writing of all unsafe-to-copy chunks!
  53:fltk-1.3.4-1/png/pngwrite.c ****           *
  54:fltk-1.3.4-1/png/pngwrite.c ****           * TODO: REVIEW: this would seem to be a bug.
  55:fltk-1.3.4-1/png/pngwrite.c ****           */
  56:fltk-1.3.4-1/png/pngwrite.c ****          if (keep != PNG_HANDLE_CHUNK_NEVER &&
  57:fltk-1.3.4-1/png/pngwrite.c ****              ((up->name[3] & 0x20) /* safe-to-copy overrides everything */ ||
  58:fltk-1.3.4-1/png/pngwrite.c ****               keep == PNG_HANDLE_CHUNK_ALWAYS ||
  59:fltk-1.3.4-1/png/pngwrite.c ****               (keep == PNG_HANDLE_CHUNK_AS_DEFAULT &&
  60:fltk-1.3.4-1/png/pngwrite.c ****                png_ptr->unknown_default == PNG_HANDLE_CHUNK_ALWAYS)))
  61:fltk-1.3.4-1/png/pngwrite.c **** #endif
  62:fltk-1.3.4-1/png/pngwrite.c ****          {
  63:fltk-1.3.4-1/png/pngwrite.c ****             /* TODO: review, what is wrong with a zero length unknown chunk? */
  64:fltk-1.3.4-1/png/pngwrite.c ****             if (up->size == 0)
  65:fltk-1.3.4-1/png/pngwrite.c ****                png_warning(png_ptr, "Writing zero-length unknown chunk");
  66:fltk-1.3.4-1/png/pngwrite.c **** 
  67:fltk-1.3.4-1/png/pngwrite.c ****             png_write_chunk(png_ptr, up->name, up->data, up->size);
  68:fltk-1.3.4-1/png/pngwrite.c ****          }
  69:fltk-1.3.4-1/png/pngwrite.c ****       }
  70:fltk-1.3.4-1/png/pngwrite.c ****    }
  71:fltk-1.3.4-1/png/pngwrite.c **** }
  72:fltk-1.3.4-1/png/pngwrite.c **** #endif /* WRITE_UNKNOWN_CHUNKS */
  73:fltk-1.3.4-1/png/pngwrite.c **** 
  74:fltk-1.3.4-1/png/pngwrite.c **** /* Writes all the PNG information.  This is the suggested way to use the
  75:fltk-1.3.4-1/png/pngwrite.c ****  * library.  If you have a new chunk to add, make a function to write it,
  76:fltk-1.3.4-1/png/pngwrite.c ****  * and put it in the correct location here.  If you want the chunk written
  77:fltk-1.3.4-1/png/pngwrite.c ****  * after the image data, put it in png_write_end().  I strongly encourage
  78:fltk-1.3.4-1/png/pngwrite.c ****  * you to supply a PNG_INFO_ flag, and check info_ptr->valid before writing
  79:fltk-1.3.4-1/png/pngwrite.c ****  * the chunk, as that will keep the code from breaking if you want to just
  80:fltk-1.3.4-1/png/pngwrite.c ****  * write a plain PNG file.  If you have long comments, I suggest writing
  81:fltk-1.3.4-1/png/pngwrite.c ****  * them in png_write_end(), and compressing them.
  82:fltk-1.3.4-1/png/pngwrite.c ****  */
  83:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
  84:fltk-1.3.4-1/png/pngwrite.c **** png_write_info_before_PLTE(png_structrp png_ptr, png_const_inforp info_ptr)
  85:fltk-1.3.4-1/png/pngwrite.c **** {
  86:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_write_info_before_PLTE");
  87:fltk-1.3.4-1/png/pngwrite.c **** 
  88:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL || info_ptr == NULL)
  89:fltk-1.3.4-1/png/pngwrite.c ****       return;
  90:fltk-1.3.4-1/png/pngwrite.c **** 
  91:fltk-1.3.4-1/png/pngwrite.c ****    if ((png_ptr->mode & PNG_WROTE_INFO_BEFORE_PLTE) == 0)
  92:fltk-1.3.4-1/png/pngwrite.c ****    {
  93:fltk-1.3.4-1/png/pngwrite.c ****    /* Write PNG signature */
  94:fltk-1.3.4-1/png/pngwrite.c ****    png_write_sig(png_ptr);
  95:fltk-1.3.4-1/png/pngwrite.c **** 
  96:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_MNG_FEATURES_SUPPORTED
  97:fltk-1.3.4-1/png/pngwrite.c ****    if ((png_ptr->mode & PNG_HAVE_PNG_SIGNATURE) != 0 && \
  98:fltk-1.3.4-1/png/pngwrite.c ****        png_ptr->mng_features_permitted != 0)
  99:fltk-1.3.4-1/png/pngwrite.c ****    {
 100:fltk-1.3.4-1/png/pngwrite.c ****       png_warning(png_ptr, "MNG features are not allowed in a PNG datastream");
 101:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->mng_features_permitted = 0;
 102:fltk-1.3.4-1/png/pngwrite.c ****    }
 103:fltk-1.3.4-1/png/pngwrite.c **** #endif
 104:fltk-1.3.4-1/png/pngwrite.c **** 
 105:fltk-1.3.4-1/png/pngwrite.c ****    /* Write IHDR information. */
 106:fltk-1.3.4-1/png/pngwrite.c ****    png_write_IHDR(png_ptr, info_ptr->width, info_ptr->height,
 107:fltk-1.3.4-1/png/pngwrite.c ****        info_ptr->bit_depth, info_ptr->color_type, info_ptr->compression_type,
 108:fltk-1.3.4-1/png/pngwrite.c ****        info_ptr->filter_type,
 109:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_INTERLACING_SUPPORTED
 110:fltk-1.3.4-1/png/pngwrite.c ****        info_ptr->interlace_type
 111:fltk-1.3.4-1/png/pngwrite.c **** #else
 112:fltk-1.3.4-1/png/pngwrite.c ****        0
 113:fltk-1.3.4-1/png/pngwrite.c **** #endif
 114:fltk-1.3.4-1/png/pngwrite.c ****       );
 115:fltk-1.3.4-1/png/pngwrite.c **** 
 116:fltk-1.3.4-1/png/pngwrite.c ****    /* The rest of these check to see if the valid field has the appropriate
 117:fltk-1.3.4-1/png/pngwrite.c ****     * flag set, and if it does, writes the chunk.
 118:fltk-1.3.4-1/png/pngwrite.c ****     *
 119:fltk-1.3.4-1/png/pngwrite.c ****     * 1.6.0: COLORSPACE support controls the writing of these chunks too, and
 120:fltk-1.3.4-1/png/pngwrite.c ****     * the chunks will be written if the WRITE routine is there and information
 121:fltk-1.3.4-1/png/pngwrite.c ****     * is available in the COLORSPACE.  (See png_colorspace_sync_info in png.c
 122:fltk-1.3.4-1/png/pngwrite.c ****     * for where the valid flags get set.)
 123:fltk-1.3.4-1/png/pngwrite.c ****     *
 124:fltk-1.3.4-1/png/pngwrite.c ****     * Under certain circumstances the colorspace can be invalidated without
 125:fltk-1.3.4-1/png/pngwrite.c ****     * syncing the info_struct 'valid' flags; this happens if libpng detects and
 126:fltk-1.3.4-1/png/pngwrite.c ****     * error and calls png_error while the color space is being set, yet the
 127:fltk-1.3.4-1/png/pngwrite.c ****     * application continues writing the PNG.  So check the 'invalid' flag here
 128:fltk-1.3.4-1/png/pngwrite.c ****     * too.
 129:fltk-1.3.4-1/png/pngwrite.c ****     */
 130:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_GAMMA_SUPPORTED
 131:fltk-1.3.4-1/png/pngwrite.c **** #  ifdef PNG_WRITE_gAMA_SUPPORTED
 132:fltk-1.3.4-1/png/pngwrite.c ****       if ((info_ptr->colorspace.flags & PNG_COLORSPACE_INVALID) == 0 &&
 133:fltk-1.3.4-1/png/pngwrite.c ****           (info_ptr->colorspace.flags & PNG_COLORSPACE_FROM_gAMA) != 0 &&
 134:fltk-1.3.4-1/png/pngwrite.c ****           (info_ptr->valid & PNG_INFO_gAMA) != 0)
 135:fltk-1.3.4-1/png/pngwrite.c ****          png_write_gAMA_fixed(png_ptr, info_ptr->colorspace.gamma);
 136:fltk-1.3.4-1/png/pngwrite.c **** #  endif
 137:fltk-1.3.4-1/png/pngwrite.c **** #endif
 138:fltk-1.3.4-1/png/pngwrite.c **** 
 139:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_COLORSPACE_SUPPORTED
 140:fltk-1.3.4-1/png/pngwrite.c ****    /* Write only one of sRGB or an ICC profile.  If a profile was supplied
 141:fltk-1.3.4-1/png/pngwrite.c ****     * and it matches one of the known sRGB ones issue a warning.
 142:fltk-1.3.4-1/png/pngwrite.c ****     */
 143:fltk-1.3.4-1/png/pngwrite.c **** #  ifdef PNG_WRITE_iCCP_SUPPORTED
 144:fltk-1.3.4-1/png/pngwrite.c ****       if ((info_ptr->colorspace.flags & PNG_COLORSPACE_INVALID) == 0 &&
 145:fltk-1.3.4-1/png/pngwrite.c ****           (info_ptr->valid & PNG_INFO_iCCP) != 0)
 146:fltk-1.3.4-1/png/pngwrite.c ****       {
 147:fltk-1.3.4-1/png/pngwrite.c **** #        ifdef PNG_WRITE_sRGB_SUPPORTED
 148:fltk-1.3.4-1/png/pngwrite.c ****             if ((info_ptr->valid & PNG_INFO_sRGB) != 0)
 149:fltk-1.3.4-1/png/pngwrite.c ****                png_app_warning(png_ptr,
 150:fltk-1.3.4-1/png/pngwrite.c ****                   "profile matches sRGB but writing iCCP instead");
 151:fltk-1.3.4-1/png/pngwrite.c **** #        endif
 152:fltk-1.3.4-1/png/pngwrite.c **** 
 153:fltk-1.3.4-1/png/pngwrite.c ****          png_write_iCCP(png_ptr, info_ptr->iccp_name,
 154:fltk-1.3.4-1/png/pngwrite.c ****             info_ptr->iccp_profile);
 155:fltk-1.3.4-1/png/pngwrite.c ****       }
 156:fltk-1.3.4-1/png/pngwrite.c **** #     ifdef PNG_WRITE_sRGB_SUPPORTED
 157:fltk-1.3.4-1/png/pngwrite.c ****          else
 158:fltk-1.3.4-1/png/pngwrite.c **** #     endif
 159:fltk-1.3.4-1/png/pngwrite.c **** #  endif
 160:fltk-1.3.4-1/png/pngwrite.c **** 
 161:fltk-1.3.4-1/png/pngwrite.c **** #  ifdef PNG_WRITE_sRGB_SUPPORTED
 162:fltk-1.3.4-1/png/pngwrite.c ****       if ((info_ptr->colorspace.flags & PNG_COLORSPACE_INVALID) == 0 &&
 163:fltk-1.3.4-1/png/pngwrite.c ****           (info_ptr->valid & PNG_INFO_sRGB) != 0)
 164:fltk-1.3.4-1/png/pngwrite.c ****          png_write_sRGB(png_ptr, info_ptr->colorspace.rendering_intent);
 165:fltk-1.3.4-1/png/pngwrite.c **** #  endif /* WRITE_sRGB */
 166:fltk-1.3.4-1/png/pngwrite.c **** #endif /* COLORSPACE */
 167:fltk-1.3.4-1/png/pngwrite.c **** 
 168:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_sBIT_SUPPORTED
 169:fltk-1.3.4-1/png/pngwrite.c ****    if ((info_ptr->valid & PNG_INFO_sBIT) != 0)
 170:fltk-1.3.4-1/png/pngwrite.c ****       png_write_sBIT(png_ptr, &(info_ptr->sig_bit), info_ptr->color_type);
 171:fltk-1.3.4-1/png/pngwrite.c **** #endif
 172:fltk-1.3.4-1/png/pngwrite.c **** 
 173:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_COLORSPACE_SUPPORTED
 174:fltk-1.3.4-1/png/pngwrite.c **** #  ifdef PNG_WRITE_cHRM_SUPPORTED
 175:fltk-1.3.4-1/png/pngwrite.c ****       if ((info_ptr->colorspace.flags & PNG_COLORSPACE_INVALID) == 0 &&
 176:fltk-1.3.4-1/png/pngwrite.c ****          (info_ptr->colorspace.flags & PNG_COLORSPACE_FROM_cHRM) != 0 &&
 177:fltk-1.3.4-1/png/pngwrite.c ****          (info_ptr->valid & PNG_INFO_cHRM) != 0)
 178:fltk-1.3.4-1/png/pngwrite.c ****          png_write_cHRM_fixed(png_ptr, &info_ptr->colorspace.end_points_xy);
 179:fltk-1.3.4-1/png/pngwrite.c **** #  endif
 180:fltk-1.3.4-1/png/pngwrite.c **** #endif
 181:fltk-1.3.4-1/png/pngwrite.c **** 
 182:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED
 183:fltk-1.3.4-1/png/pngwrite.c ****       write_unknown_chunks(png_ptr, info_ptr, PNG_HAVE_IHDR);
 184:fltk-1.3.4-1/png/pngwrite.c **** #endif
 185:fltk-1.3.4-1/png/pngwrite.c **** 
 186:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->mode |= PNG_WROTE_INFO_BEFORE_PLTE;
 187:fltk-1.3.4-1/png/pngwrite.c ****    }
 188:fltk-1.3.4-1/png/pngwrite.c **** }
 189:fltk-1.3.4-1/png/pngwrite.c **** 
 190:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
 191:fltk-1.3.4-1/png/pngwrite.c **** png_write_info(png_structrp png_ptr, png_const_inforp info_ptr)
 192:fltk-1.3.4-1/png/pngwrite.c **** {
 193:fltk-1.3.4-1/png/pngwrite.c **** #if defined(PNG_WRITE_TEXT_SUPPORTED) || defined(PNG_WRITE_sPLT_SUPPORTED)
 194:fltk-1.3.4-1/png/pngwrite.c ****    int i;
 195:fltk-1.3.4-1/png/pngwrite.c **** #endif
 196:fltk-1.3.4-1/png/pngwrite.c **** 
 197:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_write_info");
 198:fltk-1.3.4-1/png/pngwrite.c **** 
 199:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL || info_ptr == NULL)
 200:fltk-1.3.4-1/png/pngwrite.c ****       return;
 201:fltk-1.3.4-1/png/pngwrite.c **** 
 202:fltk-1.3.4-1/png/pngwrite.c ****    png_write_info_before_PLTE(png_ptr, info_ptr);
 203:fltk-1.3.4-1/png/pngwrite.c **** 
 204:fltk-1.3.4-1/png/pngwrite.c ****    if ((info_ptr->valid & PNG_INFO_PLTE) != 0)
 205:fltk-1.3.4-1/png/pngwrite.c ****       png_write_PLTE(png_ptr, info_ptr->palette,
 206:fltk-1.3.4-1/png/pngwrite.c ****           (png_uint_32)info_ptr->num_palette);
 207:fltk-1.3.4-1/png/pngwrite.c **** 
 208:fltk-1.3.4-1/png/pngwrite.c ****    else if ((info_ptr->color_type == PNG_COLOR_TYPE_PALETTE) !=0)
 209:fltk-1.3.4-1/png/pngwrite.c ****       png_error(png_ptr, "Valid palette required for paletted images");
 210:fltk-1.3.4-1/png/pngwrite.c **** 
 211:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_tRNS_SUPPORTED
 212:fltk-1.3.4-1/png/pngwrite.c ****    if ((info_ptr->valid & PNG_INFO_tRNS) !=0)
 213:fltk-1.3.4-1/png/pngwrite.c ****    {
 214:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_INVERT_ALPHA_SUPPORTED
 215:fltk-1.3.4-1/png/pngwrite.c ****       /* Invert the alpha channel (in tRNS) */
 216:fltk-1.3.4-1/png/pngwrite.c ****       if ((png_ptr->transformations & PNG_INVERT_ALPHA) != 0 &&
 217:fltk-1.3.4-1/png/pngwrite.c ****           info_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
 218:fltk-1.3.4-1/png/pngwrite.c ****       {
 219:fltk-1.3.4-1/png/pngwrite.c ****          int j;
 220:fltk-1.3.4-1/png/pngwrite.c ****          for (j = 0; j<(int)info_ptr->num_trans; j++)
 221:fltk-1.3.4-1/png/pngwrite.c ****             info_ptr->trans_alpha[j] =
 222:fltk-1.3.4-1/png/pngwrite.c ****                (png_byte)(255 - info_ptr->trans_alpha[j]);
 223:fltk-1.3.4-1/png/pngwrite.c ****       }
 224:fltk-1.3.4-1/png/pngwrite.c **** #endif
 225:fltk-1.3.4-1/png/pngwrite.c ****       png_write_tRNS(png_ptr, info_ptr->trans_alpha, &(info_ptr->trans_color),
 226:fltk-1.3.4-1/png/pngwrite.c ****           info_ptr->num_trans, info_ptr->color_type);
 227:fltk-1.3.4-1/png/pngwrite.c ****    }
 228:fltk-1.3.4-1/png/pngwrite.c **** #endif
 229:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_bKGD_SUPPORTED
 230:fltk-1.3.4-1/png/pngwrite.c ****    if ((info_ptr->valid & PNG_INFO_bKGD) != 0)
 231:fltk-1.3.4-1/png/pngwrite.c ****       png_write_bKGD(png_ptr, &(info_ptr->background), info_ptr->color_type);
 232:fltk-1.3.4-1/png/pngwrite.c **** #endif
 233:fltk-1.3.4-1/png/pngwrite.c **** 
 234:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_hIST_SUPPORTED
 235:fltk-1.3.4-1/png/pngwrite.c ****    if ((info_ptr->valid & PNG_INFO_hIST) != 0)
 236:fltk-1.3.4-1/png/pngwrite.c ****       png_write_hIST(png_ptr, info_ptr->hist, info_ptr->num_palette);
 237:fltk-1.3.4-1/png/pngwrite.c **** #endif
 238:fltk-1.3.4-1/png/pngwrite.c **** 
 239:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_oFFs_SUPPORTED
 240:fltk-1.3.4-1/png/pngwrite.c ****    if ((info_ptr->valid & PNG_INFO_oFFs) != 0)
 241:fltk-1.3.4-1/png/pngwrite.c ****       png_write_oFFs(png_ptr, info_ptr->x_offset, info_ptr->y_offset,
 242:fltk-1.3.4-1/png/pngwrite.c ****           info_ptr->offset_unit_type);
 243:fltk-1.3.4-1/png/pngwrite.c **** #endif
 244:fltk-1.3.4-1/png/pngwrite.c **** 
 245:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_pCAL_SUPPORTED
 246:fltk-1.3.4-1/png/pngwrite.c ****    if ((info_ptr->valid & PNG_INFO_pCAL) != 0)
 247:fltk-1.3.4-1/png/pngwrite.c ****       png_write_pCAL(png_ptr, info_ptr->pcal_purpose, info_ptr->pcal_X0,
 248:fltk-1.3.4-1/png/pngwrite.c ****           info_ptr->pcal_X1, info_ptr->pcal_type, info_ptr->pcal_nparams,
 249:fltk-1.3.4-1/png/pngwrite.c ****           info_ptr->pcal_units, info_ptr->pcal_params);
 250:fltk-1.3.4-1/png/pngwrite.c **** #endif
 251:fltk-1.3.4-1/png/pngwrite.c **** 
 252:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_sCAL_SUPPORTED
 253:fltk-1.3.4-1/png/pngwrite.c ****    if ((info_ptr->valid & PNG_INFO_sCAL) != 0)
 254:fltk-1.3.4-1/png/pngwrite.c ****       png_write_sCAL_s(png_ptr, (int)info_ptr->scal_unit,
 255:fltk-1.3.4-1/png/pngwrite.c ****           info_ptr->scal_s_width, info_ptr->scal_s_height);
 256:fltk-1.3.4-1/png/pngwrite.c **** #endif /* sCAL */
 257:fltk-1.3.4-1/png/pngwrite.c **** 
 258:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_pHYs_SUPPORTED
 259:fltk-1.3.4-1/png/pngwrite.c ****    if ((info_ptr->valid & PNG_INFO_pHYs) != 0)
 260:fltk-1.3.4-1/png/pngwrite.c ****       png_write_pHYs(png_ptr, info_ptr->x_pixels_per_unit,
 261:fltk-1.3.4-1/png/pngwrite.c ****           info_ptr->y_pixels_per_unit, info_ptr->phys_unit_type);
 262:fltk-1.3.4-1/png/pngwrite.c **** #endif /* pHYs */
 263:fltk-1.3.4-1/png/pngwrite.c **** 
 264:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_tIME_SUPPORTED
 265:fltk-1.3.4-1/png/pngwrite.c ****    if ((info_ptr->valid & PNG_INFO_tIME) != 0)
 266:fltk-1.3.4-1/png/pngwrite.c ****    {
 267:fltk-1.3.4-1/png/pngwrite.c ****       png_write_tIME(png_ptr, &(info_ptr->mod_time));
 268:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->mode |= PNG_WROTE_tIME;
 269:fltk-1.3.4-1/png/pngwrite.c ****    }
 270:fltk-1.3.4-1/png/pngwrite.c **** #endif /* tIME */
 271:fltk-1.3.4-1/png/pngwrite.c **** 
 272:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_sPLT_SUPPORTED
 273:fltk-1.3.4-1/png/pngwrite.c ****    if ((info_ptr->valid & PNG_INFO_sPLT) != 0)
 274:fltk-1.3.4-1/png/pngwrite.c ****       for (i = 0; i < (int)info_ptr->splt_palettes_num; i++)
 275:fltk-1.3.4-1/png/pngwrite.c ****          png_write_sPLT(png_ptr, info_ptr->splt_palettes + i);
 276:fltk-1.3.4-1/png/pngwrite.c **** #endif /* sPLT */
 277:fltk-1.3.4-1/png/pngwrite.c **** 
 278:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_TEXT_SUPPORTED
 279:fltk-1.3.4-1/png/pngwrite.c ****    /* Check to see if we need to write text chunks */
 280:fltk-1.3.4-1/png/pngwrite.c ****    for (i = 0; i < info_ptr->num_text; i++)
 281:fltk-1.3.4-1/png/pngwrite.c ****    {
 282:fltk-1.3.4-1/png/pngwrite.c ****       png_debug2(2, "Writing header text chunk %d, type %d", i,
 283:fltk-1.3.4-1/png/pngwrite.c ****           info_ptr->text[i].compression);
 284:fltk-1.3.4-1/png/pngwrite.c ****       /* An internationalized chunk? */
 285:fltk-1.3.4-1/png/pngwrite.c ****       if (info_ptr->text[i].compression > 0)
 286:fltk-1.3.4-1/png/pngwrite.c ****       {
 287:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_iTXt_SUPPORTED
 288:fltk-1.3.4-1/png/pngwrite.c ****          /* Write international chunk */
 289:fltk-1.3.4-1/png/pngwrite.c ****          png_write_iTXt(png_ptr,
 290:fltk-1.3.4-1/png/pngwrite.c ****              info_ptr->text[i].compression,
 291:fltk-1.3.4-1/png/pngwrite.c ****              info_ptr->text[i].key,
 292:fltk-1.3.4-1/png/pngwrite.c ****              info_ptr->text[i].lang,
 293:fltk-1.3.4-1/png/pngwrite.c ****              info_ptr->text[i].lang_key,
 294:fltk-1.3.4-1/png/pngwrite.c ****              info_ptr->text[i].text);
 295:fltk-1.3.4-1/png/pngwrite.c ****          /* Mark this chunk as written */
 296:fltk-1.3.4-1/png/pngwrite.c ****          if (info_ptr->text[i].compression == PNG_TEXT_COMPRESSION_NONE)
 297:fltk-1.3.4-1/png/pngwrite.c ****             info_ptr->text[i].compression = PNG_TEXT_COMPRESSION_NONE_WR;
 298:fltk-1.3.4-1/png/pngwrite.c ****          else
 299:fltk-1.3.4-1/png/pngwrite.c ****             info_ptr->text[i].compression = PNG_TEXT_COMPRESSION_zTXt_WR;
 300:fltk-1.3.4-1/png/pngwrite.c **** #else
 301:fltk-1.3.4-1/png/pngwrite.c ****          png_warning(png_ptr, "Unable to write international text");
 302:fltk-1.3.4-1/png/pngwrite.c **** #endif
 303:fltk-1.3.4-1/png/pngwrite.c ****       }
 304:fltk-1.3.4-1/png/pngwrite.c **** 
 305:fltk-1.3.4-1/png/pngwrite.c ****       /* If we want a compressed text chunk */
 306:fltk-1.3.4-1/png/pngwrite.c ****       else if (info_ptr->text[i].compression == PNG_TEXT_COMPRESSION_zTXt)
 307:fltk-1.3.4-1/png/pngwrite.c ****       {
 308:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_zTXt_SUPPORTED
 309:fltk-1.3.4-1/png/pngwrite.c ****          /* Write compressed chunk */
 310:fltk-1.3.4-1/png/pngwrite.c ****          png_write_zTXt(png_ptr, info_ptr->text[i].key,
 311:fltk-1.3.4-1/png/pngwrite.c ****              info_ptr->text[i].text, info_ptr->text[i].compression);
 312:fltk-1.3.4-1/png/pngwrite.c ****          /* Mark this chunk as written */
 313:fltk-1.3.4-1/png/pngwrite.c ****          info_ptr->text[i].compression = PNG_TEXT_COMPRESSION_zTXt_WR;
 314:fltk-1.3.4-1/png/pngwrite.c **** #else
 315:fltk-1.3.4-1/png/pngwrite.c ****          png_warning(png_ptr, "Unable to write compressed text");
 316:fltk-1.3.4-1/png/pngwrite.c **** #endif
 317:fltk-1.3.4-1/png/pngwrite.c ****       }
 318:fltk-1.3.4-1/png/pngwrite.c **** 
 319:fltk-1.3.4-1/png/pngwrite.c ****       else if (info_ptr->text[i].compression == PNG_TEXT_COMPRESSION_NONE)
 320:fltk-1.3.4-1/png/pngwrite.c ****       {
 321:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_tEXt_SUPPORTED
 322:fltk-1.3.4-1/png/pngwrite.c ****          /* Write uncompressed chunk */
 323:fltk-1.3.4-1/png/pngwrite.c ****          png_write_tEXt(png_ptr, info_ptr->text[i].key,
 324:fltk-1.3.4-1/png/pngwrite.c ****              info_ptr->text[i].text,
 325:fltk-1.3.4-1/png/pngwrite.c ****              0);
 326:fltk-1.3.4-1/png/pngwrite.c ****          /* Mark this chunk as written */
 327:fltk-1.3.4-1/png/pngwrite.c ****          info_ptr->text[i].compression = PNG_TEXT_COMPRESSION_NONE_WR;
 328:fltk-1.3.4-1/png/pngwrite.c **** #else
 329:fltk-1.3.4-1/png/pngwrite.c ****          /* Can't get here */
 330:fltk-1.3.4-1/png/pngwrite.c ****          png_warning(png_ptr, "Unable to write uncompressed text");
 331:fltk-1.3.4-1/png/pngwrite.c **** #endif
 332:fltk-1.3.4-1/png/pngwrite.c ****       }
 333:fltk-1.3.4-1/png/pngwrite.c ****    }
 334:fltk-1.3.4-1/png/pngwrite.c **** #endif /* tEXt */
 335:fltk-1.3.4-1/png/pngwrite.c **** 
 336:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED
 337:fltk-1.3.4-1/png/pngwrite.c ****    write_unknown_chunks(png_ptr, info_ptr, PNG_HAVE_PLTE);
 338:fltk-1.3.4-1/png/pngwrite.c **** #endif
 339:fltk-1.3.4-1/png/pngwrite.c **** }
 340:fltk-1.3.4-1/png/pngwrite.c **** 
 341:fltk-1.3.4-1/png/pngwrite.c **** /* Writes the end of the PNG file.  If you don't want to write comments or
 342:fltk-1.3.4-1/png/pngwrite.c ****  * time information, you can pass NULL for info.  If you already wrote these
 343:fltk-1.3.4-1/png/pngwrite.c ****  * in png_write_info(), do not write them again here.  If you have long
 344:fltk-1.3.4-1/png/pngwrite.c ****  * comments, I suggest writing them here, and compressing them.
 345:fltk-1.3.4-1/png/pngwrite.c ****  */
 346:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
 347:fltk-1.3.4-1/png/pngwrite.c **** png_write_end(png_structrp png_ptr, png_inforp info_ptr)
 348:fltk-1.3.4-1/png/pngwrite.c **** {
 349:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_write_end");
 350:fltk-1.3.4-1/png/pngwrite.c **** 
 351:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
 352:fltk-1.3.4-1/png/pngwrite.c ****       return;
 353:fltk-1.3.4-1/png/pngwrite.c **** 
 354:fltk-1.3.4-1/png/pngwrite.c ****    if ((png_ptr->mode & PNG_HAVE_IDAT) == 0)
 355:fltk-1.3.4-1/png/pngwrite.c ****       png_error(png_ptr, "No IDATs written into file");
 356:fltk-1.3.4-1/png/pngwrite.c **** 
 357:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_CHECK_FOR_INVALID_INDEX_SUPPORTED
 358:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr->num_palette_max > png_ptr->num_palette)
 359:fltk-1.3.4-1/png/pngwrite.c ****       png_benign_error(png_ptr, "Wrote palette index exceeding num_palette");
 360:fltk-1.3.4-1/png/pngwrite.c **** #endif
 361:fltk-1.3.4-1/png/pngwrite.c **** 
 362:fltk-1.3.4-1/png/pngwrite.c ****    /* See if user wants us to write information chunks */
 363:fltk-1.3.4-1/png/pngwrite.c ****    if (info_ptr != NULL)
 364:fltk-1.3.4-1/png/pngwrite.c ****    {
 365:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_TEXT_SUPPORTED
 366:fltk-1.3.4-1/png/pngwrite.c ****       int i; /* local index variable */
 367:fltk-1.3.4-1/png/pngwrite.c **** #endif
 368:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_tIME_SUPPORTED
 369:fltk-1.3.4-1/png/pngwrite.c ****       /* Check to see if user has supplied a time chunk */
 370:fltk-1.3.4-1/png/pngwrite.c ****       if ((info_ptr->valid & PNG_INFO_tIME) != 0 &&
 371:fltk-1.3.4-1/png/pngwrite.c ****           (png_ptr->mode & PNG_WROTE_tIME) == 0)
 372:fltk-1.3.4-1/png/pngwrite.c ****          png_write_tIME(png_ptr, &(info_ptr->mod_time));
 373:fltk-1.3.4-1/png/pngwrite.c **** 
 374:fltk-1.3.4-1/png/pngwrite.c **** #endif
 375:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_TEXT_SUPPORTED
 376:fltk-1.3.4-1/png/pngwrite.c ****       /* Loop through comment chunks */
 377:fltk-1.3.4-1/png/pngwrite.c ****       for (i = 0; i < info_ptr->num_text; i++)
 378:fltk-1.3.4-1/png/pngwrite.c ****       {
 379:fltk-1.3.4-1/png/pngwrite.c ****          png_debug2(2, "Writing trailer text chunk %d, type %d", i,
 380:fltk-1.3.4-1/png/pngwrite.c ****             info_ptr->text[i].compression);
 381:fltk-1.3.4-1/png/pngwrite.c ****          /* An internationalized chunk? */
 382:fltk-1.3.4-1/png/pngwrite.c ****          if (info_ptr->text[i].compression > 0)
 383:fltk-1.3.4-1/png/pngwrite.c ****          {
 384:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_iTXt_SUPPORTED
 385:fltk-1.3.4-1/png/pngwrite.c ****             /* Write international chunk */
 386:fltk-1.3.4-1/png/pngwrite.c ****             png_write_iTXt(png_ptr,
 387:fltk-1.3.4-1/png/pngwrite.c ****                 info_ptr->text[i].compression,
 388:fltk-1.3.4-1/png/pngwrite.c ****                 info_ptr->text[i].key,
 389:fltk-1.3.4-1/png/pngwrite.c ****                 info_ptr->text[i].lang,
 390:fltk-1.3.4-1/png/pngwrite.c ****                 info_ptr->text[i].lang_key,
 391:fltk-1.3.4-1/png/pngwrite.c ****                 info_ptr->text[i].text);
 392:fltk-1.3.4-1/png/pngwrite.c ****             /* Mark this chunk as written */
 393:fltk-1.3.4-1/png/pngwrite.c ****             if (info_ptr->text[i].compression == PNG_TEXT_COMPRESSION_NONE)
 394:fltk-1.3.4-1/png/pngwrite.c ****                info_ptr->text[i].compression = PNG_TEXT_COMPRESSION_NONE_WR;
 395:fltk-1.3.4-1/png/pngwrite.c ****             else
 396:fltk-1.3.4-1/png/pngwrite.c ****                info_ptr->text[i].compression = PNG_TEXT_COMPRESSION_zTXt_WR;
 397:fltk-1.3.4-1/png/pngwrite.c **** #else
 398:fltk-1.3.4-1/png/pngwrite.c ****             png_warning(png_ptr, "Unable to write international text");
 399:fltk-1.3.4-1/png/pngwrite.c **** #endif
 400:fltk-1.3.4-1/png/pngwrite.c ****          }
 401:fltk-1.3.4-1/png/pngwrite.c **** 
 402:fltk-1.3.4-1/png/pngwrite.c ****          else if (info_ptr->text[i].compression >= PNG_TEXT_COMPRESSION_zTXt)
 403:fltk-1.3.4-1/png/pngwrite.c ****          {
 404:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_zTXt_SUPPORTED
 405:fltk-1.3.4-1/png/pngwrite.c ****             /* Write compressed chunk */
 406:fltk-1.3.4-1/png/pngwrite.c ****             png_write_zTXt(png_ptr, info_ptr->text[i].key,
 407:fltk-1.3.4-1/png/pngwrite.c ****                 info_ptr->text[i].text, info_ptr->text[i].compression);
 408:fltk-1.3.4-1/png/pngwrite.c ****             /* Mark this chunk as written */
 409:fltk-1.3.4-1/png/pngwrite.c ****             info_ptr->text[i].compression = PNG_TEXT_COMPRESSION_zTXt_WR;
 410:fltk-1.3.4-1/png/pngwrite.c **** #else
 411:fltk-1.3.4-1/png/pngwrite.c ****             png_warning(png_ptr, "Unable to write compressed text");
 412:fltk-1.3.4-1/png/pngwrite.c **** #endif
 413:fltk-1.3.4-1/png/pngwrite.c ****          }
 414:fltk-1.3.4-1/png/pngwrite.c **** 
 415:fltk-1.3.4-1/png/pngwrite.c ****          else if (info_ptr->text[i].compression == PNG_TEXT_COMPRESSION_NONE)
 416:fltk-1.3.4-1/png/pngwrite.c ****          {
 417:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_tEXt_SUPPORTED
 418:fltk-1.3.4-1/png/pngwrite.c ****             /* Write uncompressed chunk */
 419:fltk-1.3.4-1/png/pngwrite.c ****             png_write_tEXt(png_ptr, info_ptr->text[i].key,
 420:fltk-1.3.4-1/png/pngwrite.c ****                 info_ptr->text[i].text, 0);
 421:fltk-1.3.4-1/png/pngwrite.c ****             /* Mark this chunk as written */
 422:fltk-1.3.4-1/png/pngwrite.c ****             info_ptr->text[i].compression = PNG_TEXT_COMPRESSION_NONE_WR;
 423:fltk-1.3.4-1/png/pngwrite.c **** #else
 424:fltk-1.3.4-1/png/pngwrite.c ****             png_warning(png_ptr, "Unable to write uncompressed text");
 425:fltk-1.3.4-1/png/pngwrite.c **** #endif
 426:fltk-1.3.4-1/png/pngwrite.c ****          }
 427:fltk-1.3.4-1/png/pngwrite.c ****       }
 428:fltk-1.3.4-1/png/pngwrite.c **** #endif
 429:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED
 430:fltk-1.3.4-1/png/pngwrite.c ****       write_unknown_chunks(png_ptr, info_ptr, PNG_AFTER_IDAT);
 431:fltk-1.3.4-1/png/pngwrite.c **** #endif
 432:fltk-1.3.4-1/png/pngwrite.c ****    }
 433:fltk-1.3.4-1/png/pngwrite.c **** 
 434:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->mode |= PNG_AFTER_IDAT;
 435:fltk-1.3.4-1/png/pngwrite.c **** 
 436:fltk-1.3.4-1/png/pngwrite.c ****    /* Write end of PNG file */
 437:fltk-1.3.4-1/png/pngwrite.c ****    png_write_IEND(png_ptr);
 438:fltk-1.3.4-1/png/pngwrite.c **** 
 439:fltk-1.3.4-1/png/pngwrite.c ****    /* This flush, added in libpng-1.0.8, removed from libpng-1.0.9beta03,
 440:fltk-1.3.4-1/png/pngwrite.c ****     * and restored again in libpng-1.2.30, may cause some applications that
 441:fltk-1.3.4-1/png/pngwrite.c ****     * do not set png_ptr->output_flush_fn to crash.  If your application
 442:fltk-1.3.4-1/png/pngwrite.c ****     * experiences a problem, please try building libpng with
 443:fltk-1.3.4-1/png/pngwrite.c ****     * PNG_WRITE_FLUSH_AFTER_IEND_SUPPORTED defined, and report the event to
 444:fltk-1.3.4-1/png/pngwrite.c ****     * png-mng-implement at lists.sf.net .
 445:fltk-1.3.4-1/png/pngwrite.c ****     */
 446:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_FLUSH_SUPPORTED
 447:fltk-1.3.4-1/png/pngwrite.c **** #  ifdef PNG_WRITE_FLUSH_AFTER_IEND_SUPPORTED
 448:fltk-1.3.4-1/png/pngwrite.c ****    png_flush(png_ptr);
 449:fltk-1.3.4-1/png/pngwrite.c **** #  endif
 450:fltk-1.3.4-1/png/pngwrite.c **** #endif
 451:fltk-1.3.4-1/png/pngwrite.c **** }
 452:fltk-1.3.4-1/png/pngwrite.c **** 
 453:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_CONVERT_tIME_SUPPORTED
 454:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
 455:fltk-1.3.4-1/png/pngwrite.c **** png_convert_from_struct_tm(png_timep ptime, PNG_CONST struct tm * ttime)
 456:fltk-1.3.4-1/png/pngwrite.c **** {
 457:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_convert_from_struct_tm");
 458:fltk-1.3.4-1/png/pngwrite.c **** 
 459:fltk-1.3.4-1/png/pngwrite.c ****    ptime->year = (png_uint_16)(1900 + ttime->tm_year);
 460:fltk-1.3.4-1/png/pngwrite.c ****    ptime->month = (png_byte)(ttime->tm_mon + 1);
 461:fltk-1.3.4-1/png/pngwrite.c ****    ptime->day = (png_byte)ttime->tm_mday;
 462:fltk-1.3.4-1/png/pngwrite.c ****    ptime->hour = (png_byte)ttime->tm_hour;
 463:fltk-1.3.4-1/png/pngwrite.c ****    ptime->minute = (png_byte)ttime->tm_min;
 464:fltk-1.3.4-1/png/pngwrite.c ****    ptime->second = (png_byte)ttime->tm_sec;
 465:fltk-1.3.4-1/png/pngwrite.c **** }
 466:fltk-1.3.4-1/png/pngwrite.c **** 
 467:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
 468:fltk-1.3.4-1/png/pngwrite.c **** png_convert_from_time_t(png_timep ptime, time_t ttime)
 469:fltk-1.3.4-1/png/pngwrite.c **** {
 470:fltk-1.3.4-1/png/pngwrite.c ****    struct tm *tbuf;
 471:fltk-1.3.4-1/png/pngwrite.c **** 
 472:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_convert_from_time_t");
 473:fltk-1.3.4-1/png/pngwrite.c **** 
 474:fltk-1.3.4-1/png/pngwrite.c ****    tbuf = gmtime(&ttime);
 475:fltk-1.3.4-1/png/pngwrite.c ****    png_convert_from_struct_tm(ptime, tbuf);
 476:fltk-1.3.4-1/png/pngwrite.c **** }
 477:fltk-1.3.4-1/png/pngwrite.c **** #endif
 478:fltk-1.3.4-1/png/pngwrite.c **** 
 479:fltk-1.3.4-1/png/pngwrite.c **** /* Initialize png_ptr structure, and allocate any memory needed */
 480:fltk-1.3.4-1/png/pngwrite.c **** PNG_FUNCTION(png_structp,PNGAPI
 481:fltk-1.3.4-1/png/pngwrite.c **** png_create_write_struct,(png_const_charp user_png_ver, png_voidp error_ptr,
 482:fltk-1.3.4-1/png/pngwrite.c ****     png_error_ptr error_fn, png_error_ptr warn_fn),PNG_ALLOCATED)
 483:fltk-1.3.4-1/png/pngwrite.c **** {
 484:fltk-1.3.4-1/png/pngwrite.c **** #ifndef PNG_USER_MEM_SUPPORTED
 485:fltk-1.3.4-1/png/pngwrite.c ****    png_structrp png_ptr = png_create_png_struct(user_png_ver, error_ptr,
 486:fltk-1.3.4-1/png/pngwrite.c ****        error_fn, warn_fn, NULL, NULL, NULL);
 487:fltk-1.3.4-1/png/pngwrite.c **** #else
 488:fltk-1.3.4-1/png/pngwrite.c ****    return png_create_write_struct_2(user_png_ver, error_ptr, error_fn,
 489:fltk-1.3.4-1/png/pngwrite.c ****        warn_fn, NULL, NULL, NULL);
 490:fltk-1.3.4-1/png/pngwrite.c **** }
 491:fltk-1.3.4-1/png/pngwrite.c **** 
 492:fltk-1.3.4-1/png/pngwrite.c **** /* Alternate initialize png_ptr structure, and allocate any memory needed */
 493:fltk-1.3.4-1/png/pngwrite.c **** PNG_FUNCTION(png_structp,PNGAPI
 494:fltk-1.3.4-1/png/pngwrite.c **** png_create_write_struct_2,(png_const_charp user_png_ver, png_voidp error_ptr,
 495:fltk-1.3.4-1/png/pngwrite.c ****     png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,
 496:fltk-1.3.4-1/png/pngwrite.c ****     png_malloc_ptr malloc_fn, png_free_ptr free_fn),PNG_ALLOCATED)
 497:fltk-1.3.4-1/png/pngwrite.c **** {
 498:fltk-1.3.4-1/png/pngwrite.c ****    png_structrp png_ptr = png_create_png_struct(user_png_ver, error_ptr,
 499:fltk-1.3.4-1/png/pngwrite.c ****        error_fn, warn_fn, mem_ptr, malloc_fn, free_fn);
 500:fltk-1.3.4-1/png/pngwrite.c **** #endif /* USER_MEM */
 501:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr != NULL)
 502:fltk-1.3.4-1/png/pngwrite.c ****    {
 503:fltk-1.3.4-1/png/pngwrite.c ****       /* Set the zlib control values to defaults; they can be overridden by the
 504:fltk-1.3.4-1/png/pngwrite.c ****        * application after the struct has been created.
 505:fltk-1.3.4-1/png/pngwrite.c ****        */
 506:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->zbuffer_size = PNG_ZBUF_SIZE;
 507:fltk-1.3.4-1/png/pngwrite.c **** 
 508:fltk-1.3.4-1/png/pngwrite.c ****       /* The 'zlib_strategy' setting is irrelevant because png_default_claim in
 509:fltk-1.3.4-1/png/pngwrite.c ****        * pngwutil.c defaults it according to whether or not filters will be
 510:fltk-1.3.4-1/png/pngwrite.c ****        * used, and ignores this setting.
 511:fltk-1.3.4-1/png/pngwrite.c ****        */
 512:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->zlib_strategy = PNG_Z_DEFAULT_STRATEGY;
 513:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->zlib_level = PNG_Z_DEFAULT_COMPRESSION;
 514:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->zlib_mem_level = 8;
 515:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->zlib_window_bits = 15;
 516:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->zlib_method = 8;
 517:fltk-1.3.4-1/png/pngwrite.c **** 
 518:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_COMPRESSED_TEXT_SUPPORTED
 519:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->zlib_text_strategy = PNG_TEXT_Z_DEFAULT_STRATEGY;
 520:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->zlib_text_level = PNG_TEXT_Z_DEFAULT_COMPRESSION;
 521:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->zlib_text_mem_level = 8;
 522:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->zlib_text_window_bits = 15;
 523:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->zlib_text_method = 8;
 524:fltk-1.3.4-1/png/pngwrite.c **** #endif /* WRITE_COMPRESSED_TEXT */
 525:fltk-1.3.4-1/png/pngwrite.c **** 
 526:fltk-1.3.4-1/png/pngwrite.c ****       /* This is a highly dubious configuration option; by default it is off,
 527:fltk-1.3.4-1/png/pngwrite.c ****        * but it may be appropriate for private builds that are testing
 528:fltk-1.3.4-1/png/pngwrite.c ****        * extensions not conformant to the current specification, or of
 529:fltk-1.3.4-1/png/pngwrite.c ****        * applications that must not fail to write at all costs!
 530:fltk-1.3.4-1/png/pngwrite.c ****        */
 531:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_BENIGN_WRITE_ERRORS_SUPPORTED
 532:fltk-1.3.4-1/png/pngwrite.c ****       /* In stable builds only warn if an application error can be completely
 533:fltk-1.3.4-1/png/pngwrite.c ****        * handled.
 534:fltk-1.3.4-1/png/pngwrite.c ****        */
 535:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->flags |= PNG_FLAG_BENIGN_ERRORS_WARN;
 536:fltk-1.3.4-1/png/pngwrite.c **** #endif
 537:fltk-1.3.4-1/png/pngwrite.c **** 
 538:fltk-1.3.4-1/png/pngwrite.c ****       /* App warnings are warnings in release (or release candidate) builds but
 539:fltk-1.3.4-1/png/pngwrite.c ****        * are errors during development.
 540:fltk-1.3.4-1/png/pngwrite.c ****        */
 541:fltk-1.3.4-1/png/pngwrite.c **** #if PNG_LIBPNG_BUILD_BASE_TYPE >= PNG_LIBPNG_BUILD_RC
 542:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->flags |= PNG_FLAG_APP_WARNINGS_WARN;
 543:fltk-1.3.4-1/png/pngwrite.c **** #endif
 544:fltk-1.3.4-1/png/pngwrite.c **** 
 545:fltk-1.3.4-1/png/pngwrite.c ****       /* TODO: delay this, it can be done in png_init_io() (if the app doesn't
 546:fltk-1.3.4-1/png/pngwrite.c ****        * do it itself) avoiding setting the default function if it is not
 547:fltk-1.3.4-1/png/pngwrite.c ****        * required.
 548:fltk-1.3.4-1/png/pngwrite.c ****        */
 549:fltk-1.3.4-1/png/pngwrite.c ****       png_set_write_fn(png_ptr, NULL, NULL, NULL);
 550:fltk-1.3.4-1/png/pngwrite.c ****    }
 551:fltk-1.3.4-1/png/pngwrite.c **** 
 552:fltk-1.3.4-1/png/pngwrite.c ****    return png_ptr;
 553:fltk-1.3.4-1/png/pngwrite.c **** }
 554:fltk-1.3.4-1/png/pngwrite.c **** 
 555:fltk-1.3.4-1/png/pngwrite.c **** 
 556:fltk-1.3.4-1/png/pngwrite.c **** /* Write a few rows of image data.  If the image is interlaced,
 557:fltk-1.3.4-1/png/pngwrite.c ****  * either you will have to write the 7 sub images, or, if you
 558:fltk-1.3.4-1/png/pngwrite.c ****  * have called png_set_interlace_handling(), you will have to
 559:fltk-1.3.4-1/png/pngwrite.c ****  * "write" the image seven times.
 560:fltk-1.3.4-1/png/pngwrite.c ****  */
 561:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
 562:fltk-1.3.4-1/png/pngwrite.c **** png_write_rows(png_structrp png_ptr, png_bytepp row,
 563:fltk-1.3.4-1/png/pngwrite.c ****     png_uint_32 num_rows)
 564:fltk-1.3.4-1/png/pngwrite.c **** {
 565:fltk-1.3.4-1/png/pngwrite.c ****    png_uint_32 i; /* row counter */
 566:fltk-1.3.4-1/png/pngwrite.c ****    png_bytepp rp; /* row pointer */
 567:fltk-1.3.4-1/png/pngwrite.c **** 
 568:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_write_rows");
 569:fltk-1.3.4-1/png/pngwrite.c **** 
 570:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
 571:fltk-1.3.4-1/png/pngwrite.c ****       return;
 572:fltk-1.3.4-1/png/pngwrite.c **** 
 573:fltk-1.3.4-1/png/pngwrite.c ****    /* Loop through the rows */
 574:fltk-1.3.4-1/png/pngwrite.c ****    for (i = 0, rp = row; i < num_rows; i++, rp++)
 575:fltk-1.3.4-1/png/pngwrite.c ****    {
 576:fltk-1.3.4-1/png/pngwrite.c ****       png_write_row(png_ptr, *rp);
 577:fltk-1.3.4-1/png/pngwrite.c ****    }
 578:fltk-1.3.4-1/png/pngwrite.c **** }
 579:fltk-1.3.4-1/png/pngwrite.c **** 
 580:fltk-1.3.4-1/png/pngwrite.c **** /* Write the image.  You only need to call this function once, even
 581:fltk-1.3.4-1/png/pngwrite.c ****  * if you are writing an interlaced image.
 582:fltk-1.3.4-1/png/pngwrite.c ****  */
 583:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
 584:fltk-1.3.4-1/png/pngwrite.c **** png_write_image(png_structrp png_ptr, png_bytepp image)
 585:fltk-1.3.4-1/png/pngwrite.c **** {
 586:fltk-1.3.4-1/png/pngwrite.c ****    png_uint_32 i; /* row index */
 587:fltk-1.3.4-1/png/pngwrite.c ****    int pass, num_pass; /* pass variables */
 588:fltk-1.3.4-1/png/pngwrite.c ****    png_bytepp rp; /* points to current row */
 589:fltk-1.3.4-1/png/pngwrite.c **** 
 590:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
 591:fltk-1.3.4-1/png/pngwrite.c ****       return;
 592:fltk-1.3.4-1/png/pngwrite.c **** 
 593:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_write_image");
 594:fltk-1.3.4-1/png/pngwrite.c **** 
 595:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_INTERLACING_SUPPORTED
 596:fltk-1.3.4-1/png/pngwrite.c ****    /* Initialize interlace handling.  If image is not interlaced,
 597:fltk-1.3.4-1/png/pngwrite.c ****     * this will set pass to 1
 598:fltk-1.3.4-1/png/pngwrite.c ****     */
 599:fltk-1.3.4-1/png/pngwrite.c ****    num_pass = png_set_interlace_handling(png_ptr);
 600:fltk-1.3.4-1/png/pngwrite.c **** #else
 601:fltk-1.3.4-1/png/pngwrite.c ****    num_pass = 1;
 602:fltk-1.3.4-1/png/pngwrite.c **** #endif
 603:fltk-1.3.4-1/png/pngwrite.c ****    /* Loop through passes */
 604:fltk-1.3.4-1/png/pngwrite.c ****    for (pass = 0; pass < num_pass; pass++)
 605:fltk-1.3.4-1/png/pngwrite.c ****    {
 606:fltk-1.3.4-1/png/pngwrite.c ****       /* Loop through image */
 607:fltk-1.3.4-1/png/pngwrite.c ****       for (i = 0, rp = image; i < png_ptr->height; i++, rp++)
 608:fltk-1.3.4-1/png/pngwrite.c ****       {
 609:fltk-1.3.4-1/png/pngwrite.c ****          png_write_row(png_ptr, *rp);
 610:fltk-1.3.4-1/png/pngwrite.c ****       }
 611:fltk-1.3.4-1/png/pngwrite.c ****    }
 612:fltk-1.3.4-1/png/pngwrite.c **** }
 613:fltk-1.3.4-1/png/pngwrite.c **** 
 614:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_MNG_FEATURES_SUPPORTED
 615:fltk-1.3.4-1/png/pngwrite.c **** /* Performs intrapixel differencing  */
 616:fltk-1.3.4-1/png/pngwrite.c **** static void
 617:fltk-1.3.4-1/png/pngwrite.c **** png_do_write_intrapixel(png_row_infop row_info, png_bytep row)
 618:fltk-1.3.4-1/png/pngwrite.c **** {
 619:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_do_write_intrapixel");
 620:fltk-1.3.4-1/png/pngwrite.c **** 
 621:fltk-1.3.4-1/png/pngwrite.c ****    if ((row_info->color_type & PNG_COLOR_MASK_COLOR) != 0)
 622:fltk-1.3.4-1/png/pngwrite.c ****    {
 623:fltk-1.3.4-1/png/pngwrite.c ****       int bytes_per_pixel;
 624:fltk-1.3.4-1/png/pngwrite.c ****       png_uint_32 row_width = row_info->width;
 625:fltk-1.3.4-1/png/pngwrite.c ****       if (row_info->bit_depth == 8)
 626:fltk-1.3.4-1/png/pngwrite.c ****       {
 627:fltk-1.3.4-1/png/pngwrite.c ****          png_bytep rp;
 628:fltk-1.3.4-1/png/pngwrite.c ****          png_uint_32 i;
 629:fltk-1.3.4-1/png/pngwrite.c **** 
 630:fltk-1.3.4-1/png/pngwrite.c ****          if (row_info->color_type == PNG_COLOR_TYPE_RGB)
 631:fltk-1.3.4-1/png/pngwrite.c ****             bytes_per_pixel = 3;
 632:fltk-1.3.4-1/png/pngwrite.c **** 
 633:fltk-1.3.4-1/png/pngwrite.c ****          else if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
 634:fltk-1.3.4-1/png/pngwrite.c ****             bytes_per_pixel = 4;
 635:fltk-1.3.4-1/png/pngwrite.c **** 
 636:fltk-1.3.4-1/png/pngwrite.c ****          else
 637:fltk-1.3.4-1/png/pngwrite.c ****             return;
 638:fltk-1.3.4-1/png/pngwrite.c **** 
 639:fltk-1.3.4-1/png/pngwrite.c ****          for (i = 0, rp = row; i < row_width; i++, rp += bytes_per_pixel)
 640:fltk-1.3.4-1/png/pngwrite.c ****          {
 641:fltk-1.3.4-1/png/pngwrite.c ****             *(rp)     = (png_byte)((*rp       - *(rp + 1)) & 0xff);
 642:fltk-1.3.4-1/png/pngwrite.c ****             *(rp + 2) = (png_byte)((*(rp + 2) - *(rp + 1)) & 0xff);
 643:fltk-1.3.4-1/png/pngwrite.c ****          }
 644:fltk-1.3.4-1/png/pngwrite.c ****       }
 645:fltk-1.3.4-1/png/pngwrite.c **** 
 646:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_16BIT_SUPPORTED
 647:fltk-1.3.4-1/png/pngwrite.c ****       else if (row_info->bit_depth == 16)
 648:fltk-1.3.4-1/png/pngwrite.c ****       {
 649:fltk-1.3.4-1/png/pngwrite.c ****          png_bytep rp;
 650:fltk-1.3.4-1/png/pngwrite.c ****          png_uint_32 i;
 651:fltk-1.3.4-1/png/pngwrite.c **** 
 652:fltk-1.3.4-1/png/pngwrite.c ****          if (row_info->color_type == PNG_COLOR_TYPE_RGB)
 653:fltk-1.3.4-1/png/pngwrite.c ****             bytes_per_pixel = 6;
 654:fltk-1.3.4-1/png/pngwrite.c **** 
 655:fltk-1.3.4-1/png/pngwrite.c ****          else if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
 656:fltk-1.3.4-1/png/pngwrite.c ****             bytes_per_pixel = 8;
 657:fltk-1.3.4-1/png/pngwrite.c **** 
 658:fltk-1.3.4-1/png/pngwrite.c ****          else
 659:fltk-1.3.4-1/png/pngwrite.c ****             return;
 660:fltk-1.3.4-1/png/pngwrite.c **** 
 661:fltk-1.3.4-1/png/pngwrite.c ****          for (i = 0, rp = row; i < row_width; i++, rp += bytes_per_pixel)
 662:fltk-1.3.4-1/png/pngwrite.c ****          {
 663:fltk-1.3.4-1/png/pngwrite.c ****             png_uint_32 s0   = (*(rp    ) << 8) | *(rp + 1);
 664:fltk-1.3.4-1/png/pngwrite.c ****             png_uint_32 s1   = (*(rp + 2) << 8) | *(rp + 3);
 665:fltk-1.3.4-1/png/pngwrite.c ****             png_uint_32 s2   = (*(rp + 4) << 8) | *(rp + 5);
 666:fltk-1.3.4-1/png/pngwrite.c ****             png_uint_32 red  = (png_uint_32)((s0 - s1) & 0xffffL);
 667:fltk-1.3.4-1/png/pngwrite.c ****             png_uint_32 blue = (png_uint_32)((s2 - s1) & 0xffffL);
 668:fltk-1.3.4-1/png/pngwrite.c ****             *(rp    ) = (png_byte)((red >> 8) & 0xff);
 669:fltk-1.3.4-1/png/pngwrite.c ****             *(rp + 1) = (png_byte)(red & 0xff);
 670:fltk-1.3.4-1/png/pngwrite.c ****             *(rp + 4) = (png_byte)((blue >> 8) & 0xff);
 671:fltk-1.3.4-1/png/pngwrite.c ****             *(rp + 5) = (png_byte)(blue & 0xff);
 672:fltk-1.3.4-1/png/pngwrite.c ****          }
 673:fltk-1.3.4-1/png/pngwrite.c ****       }
 674:fltk-1.3.4-1/png/pngwrite.c **** #endif /* WRITE_16BIT */
 675:fltk-1.3.4-1/png/pngwrite.c ****    }
 676:fltk-1.3.4-1/png/pngwrite.c **** }
 677:fltk-1.3.4-1/png/pngwrite.c **** #endif /* MNG_FEATURES */
 678:fltk-1.3.4-1/png/pngwrite.c **** 
 679:fltk-1.3.4-1/png/pngwrite.c **** /* Called by user to write a row of image data */
 680:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
 681:fltk-1.3.4-1/png/pngwrite.c **** png_write_row(png_structrp png_ptr, png_const_bytep row)
 682:fltk-1.3.4-1/png/pngwrite.c **** {
 683:fltk-1.3.4-1/png/pngwrite.c ****    /* 1.5.6: moved from png_struct to be a local structure: */
 684:fltk-1.3.4-1/png/pngwrite.c ****    png_row_info row_info;
 685:fltk-1.3.4-1/png/pngwrite.c **** 
 686:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
 687:fltk-1.3.4-1/png/pngwrite.c ****       return;
 688:fltk-1.3.4-1/png/pngwrite.c **** 
 689:fltk-1.3.4-1/png/pngwrite.c ****    png_debug2(1, "in png_write_row (row %u, pass %d)",
 690:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->row_number, png_ptr->pass);
 691:fltk-1.3.4-1/png/pngwrite.c **** 
 692:fltk-1.3.4-1/png/pngwrite.c ****    /* Initialize transformations and other stuff if first time */
 693:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr->row_number == 0 && png_ptr->pass == 0)
 694:fltk-1.3.4-1/png/pngwrite.c ****    {
 695:fltk-1.3.4-1/png/pngwrite.c ****       /* Make sure we wrote the header info */
 696:fltk-1.3.4-1/png/pngwrite.c ****       if ((png_ptr->mode & PNG_WROTE_INFO_BEFORE_PLTE) == 0)
 697:fltk-1.3.4-1/png/pngwrite.c ****          png_error(png_ptr,
 698:fltk-1.3.4-1/png/pngwrite.c ****              "png_write_info was never called before png_write_row");
 699:fltk-1.3.4-1/png/pngwrite.c **** 
 700:fltk-1.3.4-1/png/pngwrite.c ****       /* Check for transforms that have been set but were defined out */
 701:fltk-1.3.4-1/png/pngwrite.c **** #if !defined(PNG_WRITE_INVERT_SUPPORTED) && defined(PNG_READ_INVERT_SUPPORTED)
 702:fltk-1.3.4-1/png/pngwrite.c ****       if ((png_ptr->transformations & PNG_INVERT_MONO) != 0)
 703:fltk-1.3.4-1/png/pngwrite.c ****          png_warning(png_ptr, "PNG_WRITE_INVERT_SUPPORTED is not defined");
 704:fltk-1.3.4-1/png/pngwrite.c **** #endif
 705:fltk-1.3.4-1/png/pngwrite.c **** 
 706:fltk-1.3.4-1/png/pngwrite.c **** #if !defined(PNG_WRITE_FILLER_SUPPORTED) && defined(PNG_READ_FILLER_SUPPORTED)
 707:fltk-1.3.4-1/png/pngwrite.c ****       if ((png_ptr->transformations & PNG_FILLER) != 0)
 708:fltk-1.3.4-1/png/pngwrite.c ****          png_warning(png_ptr, "PNG_WRITE_FILLER_SUPPORTED is not defined");
 709:fltk-1.3.4-1/png/pngwrite.c **** #endif
 710:fltk-1.3.4-1/png/pngwrite.c **** #if !defined(PNG_WRITE_PACKSWAP_SUPPORTED) && \
 711:fltk-1.3.4-1/png/pngwrite.c ****     defined(PNG_READ_PACKSWAP_SUPPORTED)
 712:fltk-1.3.4-1/png/pngwrite.c ****       if ((png_ptr->transformations & PNG_PACKSWAP) != 0)
 713:fltk-1.3.4-1/png/pngwrite.c ****          png_warning(png_ptr,
 714:fltk-1.3.4-1/png/pngwrite.c ****              "PNG_WRITE_PACKSWAP_SUPPORTED is not defined");
 715:fltk-1.3.4-1/png/pngwrite.c **** #endif
 716:fltk-1.3.4-1/png/pngwrite.c **** 
 717:fltk-1.3.4-1/png/pngwrite.c **** #if !defined(PNG_WRITE_PACK_SUPPORTED) && defined(PNG_READ_PACK_SUPPORTED)
 718:fltk-1.3.4-1/png/pngwrite.c ****       if ((png_ptr->transformations & PNG_PACK) != 0)
 719:fltk-1.3.4-1/png/pngwrite.c ****          png_warning(png_ptr, "PNG_WRITE_PACK_SUPPORTED is not defined");
 720:fltk-1.3.4-1/png/pngwrite.c **** #endif
 721:fltk-1.3.4-1/png/pngwrite.c **** 
 722:fltk-1.3.4-1/png/pngwrite.c **** #if !defined(PNG_WRITE_SHIFT_SUPPORTED) && defined(PNG_READ_SHIFT_SUPPORTED)
 723:fltk-1.3.4-1/png/pngwrite.c ****       if ((png_ptr->transformations & PNG_SHIFT) != 0)
 724:fltk-1.3.4-1/png/pngwrite.c ****          png_warning(png_ptr, "PNG_WRITE_SHIFT_SUPPORTED is not defined");
 725:fltk-1.3.4-1/png/pngwrite.c **** #endif
 726:fltk-1.3.4-1/png/pngwrite.c **** 
 727:fltk-1.3.4-1/png/pngwrite.c **** #if !defined(PNG_WRITE_BGR_SUPPORTED) && defined(PNG_READ_BGR_SUPPORTED)
 728:fltk-1.3.4-1/png/pngwrite.c ****       if ((png_ptr->transformations & PNG_BGR) != 0)
 729:fltk-1.3.4-1/png/pngwrite.c ****          png_warning(png_ptr, "PNG_WRITE_BGR_SUPPORTED is not defined");
 730:fltk-1.3.4-1/png/pngwrite.c **** #endif
 731:fltk-1.3.4-1/png/pngwrite.c **** 
 732:fltk-1.3.4-1/png/pngwrite.c **** #if !defined(PNG_WRITE_SWAP_SUPPORTED) && defined(PNG_READ_SWAP_SUPPORTED)
 733:fltk-1.3.4-1/png/pngwrite.c ****       if ((png_ptr->transformations & PNG_SWAP_BYTES) != 0)
 734:fltk-1.3.4-1/png/pngwrite.c ****          png_warning(png_ptr, "PNG_WRITE_SWAP_SUPPORTED is not defined");
 735:fltk-1.3.4-1/png/pngwrite.c **** #endif
 736:fltk-1.3.4-1/png/pngwrite.c **** 
 737:fltk-1.3.4-1/png/pngwrite.c ****       png_write_start_row(png_ptr);
 738:fltk-1.3.4-1/png/pngwrite.c ****    }
 739:fltk-1.3.4-1/png/pngwrite.c **** 
 740:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_INTERLACING_SUPPORTED
 741:fltk-1.3.4-1/png/pngwrite.c ****    /* If interlaced and not interested in row, return */
 742:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr->interlaced != 0 &&
 743:fltk-1.3.4-1/png/pngwrite.c ****        (png_ptr->transformations & PNG_INTERLACE) != 0)
 744:fltk-1.3.4-1/png/pngwrite.c ****    {
 745:fltk-1.3.4-1/png/pngwrite.c ****       switch (png_ptr->pass)
 746:fltk-1.3.4-1/png/pngwrite.c ****       {
 747:fltk-1.3.4-1/png/pngwrite.c ****          case 0:
 748:fltk-1.3.4-1/png/pngwrite.c ****             if ((png_ptr->row_number & 0x07) != 0)
 749:fltk-1.3.4-1/png/pngwrite.c ****             {
 750:fltk-1.3.4-1/png/pngwrite.c ****                png_write_finish_row(png_ptr);
 751:fltk-1.3.4-1/png/pngwrite.c ****                return;
 752:fltk-1.3.4-1/png/pngwrite.c ****             }
 753:fltk-1.3.4-1/png/pngwrite.c ****             break;
 754:fltk-1.3.4-1/png/pngwrite.c **** 
 755:fltk-1.3.4-1/png/pngwrite.c ****          case 1:
 756:fltk-1.3.4-1/png/pngwrite.c ****             if ((png_ptr->row_number & 0x07) != 0 || png_ptr->width < 5)
 757:fltk-1.3.4-1/png/pngwrite.c ****             {
 758:fltk-1.3.4-1/png/pngwrite.c ****                png_write_finish_row(png_ptr);
 759:fltk-1.3.4-1/png/pngwrite.c ****                return;
 760:fltk-1.3.4-1/png/pngwrite.c ****             }
 761:fltk-1.3.4-1/png/pngwrite.c ****             break;
 762:fltk-1.3.4-1/png/pngwrite.c **** 
 763:fltk-1.3.4-1/png/pngwrite.c ****          case 2:
 764:fltk-1.3.4-1/png/pngwrite.c ****             if ((png_ptr->row_number & 0x07) != 4)
 765:fltk-1.3.4-1/png/pngwrite.c ****             {
 766:fltk-1.3.4-1/png/pngwrite.c ****                png_write_finish_row(png_ptr);
 767:fltk-1.3.4-1/png/pngwrite.c ****                return;
 768:fltk-1.3.4-1/png/pngwrite.c ****             }
 769:fltk-1.3.4-1/png/pngwrite.c ****             break;
 770:fltk-1.3.4-1/png/pngwrite.c **** 
 771:fltk-1.3.4-1/png/pngwrite.c ****          case 3:
 772:fltk-1.3.4-1/png/pngwrite.c ****             if ((png_ptr->row_number & 0x03) != 0 || png_ptr->width < 3)
 773:fltk-1.3.4-1/png/pngwrite.c ****             {
 774:fltk-1.3.4-1/png/pngwrite.c ****                png_write_finish_row(png_ptr);
 775:fltk-1.3.4-1/png/pngwrite.c ****                return;
 776:fltk-1.3.4-1/png/pngwrite.c ****             }
 777:fltk-1.3.4-1/png/pngwrite.c ****             break;
 778:fltk-1.3.4-1/png/pngwrite.c **** 
 779:fltk-1.3.4-1/png/pngwrite.c ****          case 4:
 780:fltk-1.3.4-1/png/pngwrite.c ****             if ((png_ptr->row_number & 0x03) != 2)
 781:fltk-1.3.4-1/png/pngwrite.c ****             {
 782:fltk-1.3.4-1/png/pngwrite.c ****                png_write_finish_row(png_ptr);
 783:fltk-1.3.4-1/png/pngwrite.c ****                return;
 784:fltk-1.3.4-1/png/pngwrite.c ****             }
 785:fltk-1.3.4-1/png/pngwrite.c ****             break;
 786:fltk-1.3.4-1/png/pngwrite.c **** 
 787:fltk-1.3.4-1/png/pngwrite.c ****          case 5:
 788:fltk-1.3.4-1/png/pngwrite.c ****             if ((png_ptr->row_number & 0x01) != 0 || png_ptr->width < 2)
 789:fltk-1.3.4-1/png/pngwrite.c ****             {
 790:fltk-1.3.4-1/png/pngwrite.c ****                png_write_finish_row(png_ptr);
 791:fltk-1.3.4-1/png/pngwrite.c ****                return;
 792:fltk-1.3.4-1/png/pngwrite.c ****             }
 793:fltk-1.3.4-1/png/pngwrite.c ****             break;
 794:fltk-1.3.4-1/png/pngwrite.c **** 
 795:fltk-1.3.4-1/png/pngwrite.c ****          case 6:
 796:fltk-1.3.4-1/png/pngwrite.c ****             if ((png_ptr->row_number & 0x01) == 0)
 797:fltk-1.3.4-1/png/pngwrite.c ****             {
 798:fltk-1.3.4-1/png/pngwrite.c ****                png_write_finish_row(png_ptr);
 799:fltk-1.3.4-1/png/pngwrite.c ****                return;
 800:fltk-1.3.4-1/png/pngwrite.c ****             }
 801:fltk-1.3.4-1/png/pngwrite.c ****             break;
 802:fltk-1.3.4-1/png/pngwrite.c **** 
 803:fltk-1.3.4-1/png/pngwrite.c ****          default: /* error: ignore it */
 804:fltk-1.3.4-1/png/pngwrite.c ****             break;
 805:fltk-1.3.4-1/png/pngwrite.c ****       }
 806:fltk-1.3.4-1/png/pngwrite.c ****    }
 807:fltk-1.3.4-1/png/pngwrite.c **** #endif
 808:fltk-1.3.4-1/png/pngwrite.c **** 
 809:fltk-1.3.4-1/png/pngwrite.c ****    /* Set up row info for transformations */
 810:fltk-1.3.4-1/png/pngwrite.c ****    row_info.color_type = png_ptr->color_type;
 811:fltk-1.3.4-1/png/pngwrite.c ****    row_info.width = png_ptr->usr_width;
 812:fltk-1.3.4-1/png/pngwrite.c ****    row_info.channels = png_ptr->usr_channels;
 813:fltk-1.3.4-1/png/pngwrite.c ****    row_info.bit_depth = png_ptr->usr_bit_depth;
 814:fltk-1.3.4-1/png/pngwrite.c ****    row_info.pixel_depth = (png_byte)(row_info.bit_depth * row_info.channels);
 815:fltk-1.3.4-1/png/pngwrite.c ****    row_info.rowbytes = PNG_ROWBYTES(row_info.pixel_depth, row_info.width);
 816:fltk-1.3.4-1/png/pngwrite.c **** 
 817:fltk-1.3.4-1/png/pngwrite.c ****    png_debug1(3, "row_info->color_type = %d", row_info.color_type);
 818:fltk-1.3.4-1/png/pngwrite.c ****    png_debug1(3, "row_info->width = %u", row_info.width);
 819:fltk-1.3.4-1/png/pngwrite.c ****    png_debug1(3, "row_info->channels = %d", row_info.channels);
 820:fltk-1.3.4-1/png/pngwrite.c ****    png_debug1(3, "row_info->bit_depth = %d", row_info.bit_depth);
 821:fltk-1.3.4-1/png/pngwrite.c ****    png_debug1(3, "row_info->pixel_depth = %d", row_info.pixel_depth);
 822:fltk-1.3.4-1/png/pngwrite.c ****    png_debug1(3, "row_info->rowbytes = %lu", (unsigned long)row_info.rowbytes);
 823:fltk-1.3.4-1/png/pngwrite.c **** 
 824:fltk-1.3.4-1/png/pngwrite.c ****    /* Copy user's row into buffer, leaving room for filter byte. */
 825:fltk-1.3.4-1/png/pngwrite.c ****    memcpy(png_ptr->row_buf + 1, row, row_info.rowbytes);
 826:fltk-1.3.4-1/png/pngwrite.c **** 
 827:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_INTERLACING_SUPPORTED
 828:fltk-1.3.4-1/png/pngwrite.c ****    /* Handle interlacing */
 829:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr->interlaced && png_ptr->pass < 6 &&
 830:fltk-1.3.4-1/png/pngwrite.c ****        (png_ptr->transformations & PNG_INTERLACE) != 0)
 831:fltk-1.3.4-1/png/pngwrite.c ****    {
 832:fltk-1.3.4-1/png/pngwrite.c ****       png_do_write_interlace(&row_info, png_ptr->row_buf + 1, png_ptr->pass);
 833:fltk-1.3.4-1/png/pngwrite.c ****       /* This should always get caught above, but still ... */
 834:fltk-1.3.4-1/png/pngwrite.c ****       if (row_info.width == 0)
 835:fltk-1.3.4-1/png/pngwrite.c ****       {
 836:fltk-1.3.4-1/png/pngwrite.c ****          png_write_finish_row(png_ptr);
 837:fltk-1.3.4-1/png/pngwrite.c ****          return;
 838:fltk-1.3.4-1/png/pngwrite.c ****       }
 839:fltk-1.3.4-1/png/pngwrite.c ****    }
 840:fltk-1.3.4-1/png/pngwrite.c **** #endif
 841:fltk-1.3.4-1/png/pngwrite.c **** 
 842:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_TRANSFORMS_SUPPORTED
 843:fltk-1.3.4-1/png/pngwrite.c ****    /* Handle other transformations */
 844:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr->transformations != 0)
 845:fltk-1.3.4-1/png/pngwrite.c ****       png_do_write_transformations(png_ptr, &row_info);
 846:fltk-1.3.4-1/png/pngwrite.c **** #endif
 847:fltk-1.3.4-1/png/pngwrite.c **** 
 848:fltk-1.3.4-1/png/pngwrite.c ****    /* At this point the row_info pixel depth must match the 'transformed' depth,
 849:fltk-1.3.4-1/png/pngwrite.c ****     * which is also the output depth.
 850:fltk-1.3.4-1/png/pngwrite.c ****     */
 851:fltk-1.3.4-1/png/pngwrite.c ****    if (row_info.pixel_depth != png_ptr->pixel_depth ||
 852:fltk-1.3.4-1/png/pngwrite.c ****       row_info.pixel_depth != png_ptr->transformed_pixel_depth)
 853:fltk-1.3.4-1/png/pngwrite.c ****       png_error(png_ptr, "internal write transform logic error");
 854:fltk-1.3.4-1/png/pngwrite.c **** 
 855:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_MNG_FEATURES_SUPPORTED
 856:fltk-1.3.4-1/png/pngwrite.c ****    /* Write filter_method 64 (intrapixel differencing) only if
 857:fltk-1.3.4-1/png/pngwrite.c ****     * 1. Libpng was compiled with PNG_MNG_FEATURES_SUPPORTED and
 858:fltk-1.3.4-1/png/pngwrite.c ****     * 2. Libpng did not write a PNG signature (this filter_method is only
 859:fltk-1.3.4-1/png/pngwrite.c ****     *    used in PNG datastreams that are embedded in MNG datastreams) and
 860:fltk-1.3.4-1/png/pngwrite.c ****     * 3. The application called png_permit_mng_features with a mask that
 861:fltk-1.3.4-1/png/pngwrite.c ****     *    included PNG_FLAG_MNG_FILTER_64 and
 862:fltk-1.3.4-1/png/pngwrite.c ****     * 4. The filter_method is 64 and
 863:fltk-1.3.4-1/png/pngwrite.c ****     * 5. The color_type is RGB or RGBA
 864:fltk-1.3.4-1/png/pngwrite.c ****     */
 865:fltk-1.3.4-1/png/pngwrite.c ****    if ((png_ptr->mng_features_permitted & PNG_FLAG_MNG_FILTER_64) != 0 &&
 866:fltk-1.3.4-1/png/pngwrite.c ****        (png_ptr->filter_type == PNG_INTRAPIXEL_DIFFERENCING))
 867:fltk-1.3.4-1/png/pngwrite.c ****    {
 868:fltk-1.3.4-1/png/pngwrite.c ****       /* Intrapixel differencing */
 869:fltk-1.3.4-1/png/pngwrite.c ****       png_do_write_intrapixel(&row_info, png_ptr->row_buf + 1);
 870:fltk-1.3.4-1/png/pngwrite.c ****    }
 871:fltk-1.3.4-1/png/pngwrite.c **** #endif
 872:fltk-1.3.4-1/png/pngwrite.c **** 
 873:fltk-1.3.4-1/png/pngwrite.c **** /* Added at libpng-1.5.10 */
 874:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_CHECK_FOR_INVALID_INDEX_SUPPORTED
 875:fltk-1.3.4-1/png/pngwrite.c ****    /* Check for out-of-range palette index */
 876:fltk-1.3.4-1/png/pngwrite.c ****    if (row_info.color_type == PNG_COLOR_TYPE_PALETTE &&
 877:fltk-1.3.4-1/png/pngwrite.c ****        png_ptr->num_palette_max >= 0)
 878:fltk-1.3.4-1/png/pngwrite.c ****       png_do_check_palette_indexes(png_ptr, &row_info);
 879:fltk-1.3.4-1/png/pngwrite.c **** #endif
 880:fltk-1.3.4-1/png/pngwrite.c **** 
 881:fltk-1.3.4-1/png/pngwrite.c ****    /* Find a filter if necessary, filter the row and write it out. */
 882:fltk-1.3.4-1/png/pngwrite.c ****    png_write_find_filter(png_ptr, &row_info);
 883:fltk-1.3.4-1/png/pngwrite.c **** 
 884:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr->write_row_fn != NULL)
 885:fltk-1.3.4-1/png/pngwrite.c ****       (*(png_ptr->write_row_fn))(png_ptr, png_ptr->row_number, png_ptr->pass);
 886:fltk-1.3.4-1/png/pngwrite.c **** }
 887:fltk-1.3.4-1/png/pngwrite.c **** 
 888:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_FLUSH_SUPPORTED
 889:fltk-1.3.4-1/png/pngwrite.c **** /* Set the automatic flush interval or 0 to turn flushing off */
 890:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
 891:fltk-1.3.4-1/png/pngwrite.c **** png_set_flush(png_structrp png_ptr, int nrows)
 892:fltk-1.3.4-1/png/pngwrite.c **** {
 893:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_flush");
 894:fltk-1.3.4-1/png/pngwrite.c **** 
 895:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
 896:fltk-1.3.4-1/png/pngwrite.c ****       return;
 897:fltk-1.3.4-1/png/pngwrite.c **** 
 898:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->flush_dist = (nrows < 0 ? 0 : nrows);
 899:fltk-1.3.4-1/png/pngwrite.c **** }
 900:fltk-1.3.4-1/png/pngwrite.c **** 
 901:fltk-1.3.4-1/png/pngwrite.c **** /* Flush the current output buffers now */
 902:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
 903:fltk-1.3.4-1/png/pngwrite.c **** png_write_flush(png_structrp png_ptr)
 904:fltk-1.3.4-1/png/pngwrite.c **** {
 905:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_write_flush");
 906:fltk-1.3.4-1/png/pngwrite.c **** 
 907:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
 908:fltk-1.3.4-1/png/pngwrite.c ****       return;
 909:fltk-1.3.4-1/png/pngwrite.c **** 
 910:fltk-1.3.4-1/png/pngwrite.c ****    /* We have already written out all of the data */
 911:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr->row_number >= png_ptr->num_rows)
 912:fltk-1.3.4-1/png/pngwrite.c ****       return;
 913:fltk-1.3.4-1/png/pngwrite.c **** 
 914:fltk-1.3.4-1/png/pngwrite.c ****    png_compress_IDAT(png_ptr, NULL, 0, Z_SYNC_FLUSH);
 915:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->flush_rows = 0;
 916:fltk-1.3.4-1/png/pngwrite.c ****    png_flush(png_ptr);
 917:fltk-1.3.4-1/png/pngwrite.c **** }
 918:fltk-1.3.4-1/png/pngwrite.c **** #endif /* WRITE_FLUSH */
 919:fltk-1.3.4-1/png/pngwrite.c **** 
 920:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
 921:fltk-1.3.4-1/png/pngwrite.c **** static void png_reset_filter_heuristics(png_structrp png_ptr);/* forward decl */
 922:fltk-1.3.4-1/png/pngwrite.c **** #endif
 923:fltk-1.3.4-1/png/pngwrite.c **** 
 924:fltk-1.3.4-1/png/pngwrite.c **** /* Free any memory used in png_ptr struct without freeing the struct itself. */
 925:fltk-1.3.4-1/png/pngwrite.c **** static void
 926:fltk-1.3.4-1/png/pngwrite.c **** png_write_destroy(png_structrp png_ptr)
 927:fltk-1.3.4-1/png/pngwrite.c **** {
 928:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_write_destroy");
 929:fltk-1.3.4-1/png/pngwrite.c **** 
 930:fltk-1.3.4-1/png/pngwrite.c ****    /* Free any memory zlib uses */
 931:fltk-1.3.4-1/png/pngwrite.c ****    if ((png_ptr->flags & PNG_FLAG_ZSTREAM_INITIALIZED) != 0)
 932:fltk-1.3.4-1/png/pngwrite.c ****       deflateEnd(&png_ptr->zstream);
 933:fltk-1.3.4-1/png/pngwrite.c **** 
 934:fltk-1.3.4-1/png/pngwrite.c ****    /* Free our memory.  png_free checks NULL for us. */
 935:fltk-1.3.4-1/png/pngwrite.c ****    png_free_buffer_list(png_ptr, &png_ptr->zbuffer_list);
 936:fltk-1.3.4-1/png/pngwrite.c ****    png_free(png_ptr, png_ptr->row_buf);
 937:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->row_buf = NULL;
 938:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_FILTER_SUPPORTED
 939:fltk-1.3.4-1/png/pngwrite.c ****    png_free(png_ptr, png_ptr->prev_row);
 940:fltk-1.3.4-1/png/pngwrite.c ****    png_free(png_ptr, png_ptr->sub_row);
 941:fltk-1.3.4-1/png/pngwrite.c ****    png_free(png_ptr, png_ptr->up_row);
 942:fltk-1.3.4-1/png/pngwrite.c ****    png_free(png_ptr, png_ptr->avg_row);
 943:fltk-1.3.4-1/png/pngwrite.c ****    png_free(png_ptr, png_ptr->paeth_row);
 944:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->prev_row = NULL;
 945:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->sub_row = NULL;
 946:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->up_row = NULL;
 947:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->avg_row = NULL;
 948:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->paeth_row = NULL;
 949:fltk-1.3.4-1/png/pngwrite.c **** #endif
 950:fltk-1.3.4-1/png/pngwrite.c **** 
 951:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
 952:fltk-1.3.4-1/png/pngwrite.c ****    /* Use this to save a little code space, it doesn't free the filter_costs */
 953:fltk-1.3.4-1/png/pngwrite.c ****    png_reset_filter_heuristics(png_ptr);
 954:fltk-1.3.4-1/png/pngwrite.c ****    png_free(png_ptr, png_ptr->filter_costs);
 955:fltk-1.3.4-1/png/pngwrite.c ****    png_free(png_ptr, png_ptr->inv_filter_costs);
 956:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->filter_costs = NULL;
 957:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->inv_filter_costs = NULL;
 958:fltk-1.3.4-1/png/pngwrite.c **** #endif
 959:fltk-1.3.4-1/png/pngwrite.c **** 
 960:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_SET_UNKNOWN_CHUNKS_SUPPORTED
 961:fltk-1.3.4-1/png/pngwrite.c ****    png_free(png_ptr, png_ptr->chunk_list);
 962:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->chunk_list = NULL;
 963:fltk-1.3.4-1/png/pngwrite.c **** #endif
 964:fltk-1.3.4-1/png/pngwrite.c **** 
 965:fltk-1.3.4-1/png/pngwrite.c ****    /* The error handling and memory handling information is left intact at this
 966:fltk-1.3.4-1/png/pngwrite.c ****     * point: the jmp_buf may still have to be freed.  See png_destroy_png_struct
 967:fltk-1.3.4-1/png/pngwrite.c ****     * for how this happens.
 968:fltk-1.3.4-1/png/pngwrite.c ****     */
 969:fltk-1.3.4-1/png/pngwrite.c **** }
 970:fltk-1.3.4-1/png/pngwrite.c **** 
 971:fltk-1.3.4-1/png/pngwrite.c **** /* Free all memory used by the write.
 972:fltk-1.3.4-1/png/pngwrite.c ****  * In libpng 1.6.0 this API changed quietly to no longer accept a NULL value for
 973:fltk-1.3.4-1/png/pngwrite.c ****  * *png_ptr_ptr.  Prior to 1.6.0 it would accept such a value and it would free
 974:fltk-1.3.4-1/png/pngwrite.c ****  * the passed in info_structs but it would quietly fail to free any of the data
 975:fltk-1.3.4-1/png/pngwrite.c ****  * inside them.  In 1.6.0 it quietly does nothing (it has to be quiet because it
 976:fltk-1.3.4-1/png/pngwrite.c ****  * has no png_ptr.)
 977:fltk-1.3.4-1/png/pngwrite.c ****  */
 978:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
 979:fltk-1.3.4-1/png/pngwrite.c **** png_destroy_write_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr)
 980:fltk-1.3.4-1/png/pngwrite.c **** {
 981:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_destroy_write_struct");
 982:fltk-1.3.4-1/png/pngwrite.c **** 
 983:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr_ptr != NULL)
 984:fltk-1.3.4-1/png/pngwrite.c ****    {
 985:fltk-1.3.4-1/png/pngwrite.c ****       png_structrp png_ptr = *png_ptr_ptr;
 986:fltk-1.3.4-1/png/pngwrite.c **** 
 987:fltk-1.3.4-1/png/pngwrite.c ****       if (png_ptr != NULL) /* added in libpng 1.6.0 */
 988:fltk-1.3.4-1/png/pngwrite.c ****       {
 989:fltk-1.3.4-1/png/pngwrite.c ****          png_destroy_info_struct(png_ptr, info_ptr_ptr);
 990:fltk-1.3.4-1/png/pngwrite.c **** 
 991:fltk-1.3.4-1/png/pngwrite.c ****          *png_ptr_ptr = NULL;
 992:fltk-1.3.4-1/png/pngwrite.c ****          png_write_destroy(png_ptr);
 993:fltk-1.3.4-1/png/pngwrite.c ****          png_destroy_png_struct(png_ptr);
 994:fltk-1.3.4-1/png/pngwrite.c ****       }
 995:fltk-1.3.4-1/png/pngwrite.c ****    }
 996:fltk-1.3.4-1/png/pngwrite.c **** }
 997:fltk-1.3.4-1/png/pngwrite.c **** 
 998:fltk-1.3.4-1/png/pngwrite.c **** /* Allow the application to select one or more row filters to use. */
 999:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
1000:fltk-1.3.4-1/png/pngwrite.c **** png_set_filter(png_structrp png_ptr, int method, int filters)
1001:fltk-1.3.4-1/png/pngwrite.c **** {
1002:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_filter");
1003:fltk-1.3.4-1/png/pngwrite.c **** 
1004:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
1005:fltk-1.3.4-1/png/pngwrite.c ****       return;
1006:fltk-1.3.4-1/png/pngwrite.c **** 
1007:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_MNG_FEATURES_SUPPORTED
1008:fltk-1.3.4-1/png/pngwrite.c ****    if ((png_ptr->mng_features_permitted & PNG_FLAG_MNG_FILTER_64) != 0 &&
1009:fltk-1.3.4-1/png/pngwrite.c ****        (method == PNG_INTRAPIXEL_DIFFERENCING))
1010:fltk-1.3.4-1/png/pngwrite.c ****       method = PNG_FILTER_TYPE_BASE;
1011:fltk-1.3.4-1/png/pngwrite.c **** 
1012:fltk-1.3.4-1/png/pngwrite.c **** #endif
1013:fltk-1.3.4-1/png/pngwrite.c ****    if (method == PNG_FILTER_TYPE_BASE)
1014:fltk-1.3.4-1/png/pngwrite.c ****    {
1015:fltk-1.3.4-1/png/pngwrite.c ****       switch (filters & (PNG_ALL_FILTERS | 0x07))
1016:fltk-1.3.4-1/png/pngwrite.c ****       {
1017:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_FILTER_SUPPORTED
1018:fltk-1.3.4-1/png/pngwrite.c ****          case 5:
1019:fltk-1.3.4-1/png/pngwrite.c ****          case 6:
1020:fltk-1.3.4-1/png/pngwrite.c ****          case 7: png_app_error(png_ptr, "Unknown row filter for method 0");
1021:fltk-1.3.4-1/png/pngwrite.c ****             /* FALL THROUGH */
1022:fltk-1.3.4-1/png/pngwrite.c **** #endif /* WRITE_FILTER */
1023:fltk-1.3.4-1/png/pngwrite.c ****          case PNG_FILTER_VALUE_NONE:
1024:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->do_filter = PNG_FILTER_NONE; break;
1025:fltk-1.3.4-1/png/pngwrite.c **** 
1026:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_FILTER_SUPPORTED
1027:fltk-1.3.4-1/png/pngwrite.c ****          case PNG_FILTER_VALUE_SUB:
1028:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->do_filter = PNG_FILTER_SUB; break;
1029:fltk-1.3.4-1/png/pngwrite.c **** 
1030:fltk-1.3.4-1/png/pngwrite.c ****          case PNG_FILTER_VALUE_UP:
1031:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->do_filter = PNG_FILTER_UP; break;
1032:fltk-1.3.4-1/png/pngwrite.c **** 
1033:fltk-1.3.4-1/png/pngwrite.c ****          case PNG_FILTER_VALUE_AVG:
1034:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->do_filter = PNG_FILTER_AVG; break;
1035:fltk-1.3.4-1/png/pngwrite.c **** 
1036:fltk-1.3.4-1/png/pngwrite.c ****          case PNG_FILTER_VALUE_PAETH:
1037:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->do_filter = PNG_FILTER_PAETH; break;
1038:fltk-1.3.4-1/png/pngwrite.c **** 
1039:fltk-1.3.4-1/png/pngwrite.c ****          default:
1040:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->do_filter = (png_byte)filters; break;
1041:fltk-1.3.4-1/png/pngwrite.c **** #else
1042:fltk-1.3.4-1/png/pngwrite.c ****          default:
1043:fltk-1.3.4-1/png/pngwrite.c ****             png_app_error(png_ptr, "Unknown row filter for method 0");
1044:fltk-1.3.4-1/png/pngwrite.c **** #endif /* WRITE_FILTER */
1045:fltk-1.3.4-1/png/pngwrite.c ****       }
1046:fltk-1.3.4-1/png/pngwrite.c **** 
1047:fltk-1.3.4-1/png/pngwrite.c ****       /* If we have allocated the row_buf, this means we have already started
1048:fltk-1.3.4-1/png/pngwrite.c ****        * with the image and we should have allocated all of the filter buffers
1049:fltk-1.3.4-1/png/pngwrite.c ****        * that have been selected.  If prev_row isn't already allocated, then
1050:fltk-1.3.4-1/png/pngwrite.c ****        * it is too late to start using the filters that need it, since we
1051:fltk-1.3.4-1/png/pngwrite.c ****        * will be missing the data in the previous row.  If an application
1052:fltk-1.3.4-1/png/pngwrite.c ****        * wants to start and stop using particular filters during compression,
1053:fltk-1.3.4-1/png/pngwrite.c ****        * it should start out with all of the filters, and then add and
1054:fltk-1.3.4-1/png/pngwrite.c ****        * remove them after the start of compression.
1055:fltk-1.3.4-1/png/pngwrite.c ****        */
1056:fltk-1.3.4-1/png/pngwrite.c ****       if (png_ptr->row_buf != NULL)
1057:fltk-1.3.4-1/png/pngwrite.c ****       {
1058:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_FILTER_SUPPORTED
1059:fltk-1.3.4-1/png/pngwrite.c ****          if ((png_ptr->do_filter & PNG_FILTER_SUB) != 0 &&
1060:fltk-1.3.4-1/png/pngwrite.c ****              png_ptr->sub_row == NULL)
1061:fltk-1.3.4-1/png/pngwrite.c ****          {
1062:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->sub_row = (png_bytep)png_malloc(png_ptr,
1063:fltk-1.3.4-1/png/pngwrite.c ****                 (png_ptr->rowbytes + 1));
1064:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->sub_row[0] = PNG_FILTER_VALUE_SUB;
1065:fltk-1.3.4-1/png/pngwrite.c ****          }
1066:fltk-1.3.4-1/png/pngwrite.c **** 
1067:fltk-1.3.4-1/png/pngwrite.c ****          if ((png_ptr->do_filter & PNG_FILTER_UP) != 0 &&
1068:fltk-1.3.4-1/png/pngwrite.c ****               png_ptr->up_row == NULL)
1069:fltk-1.3.4-1/png/pngwrite.c ****          {
1070:fltk-1.3.4-1/png/pngwrite.c ****             if (png_ptr->prev_row == NULL)
1071:fltk-1.3.4-1/png/pngwrite.c ****             {
1072:fltk-1.3.4-1/png/pngwrite.c ****                png_warning(png_ptr, "Can't add Up filter after starting");
1073:fltk-1.3.4-1/png/pngwrite.c ****                png_ptr->do_filter = (png_byte)(png_ptr->do_filter &
1074:fltk-1.3.4-1/png/pngwrite.c ****                    ~PNG_FILTER_UP);
1075:fltk-1.3.4-1/png/pngwrite.c ****             }
1076:fltk-1.3.4-1/png/pngwrite.c **** 
1077:fltk-1.3.4-1/png/pngwrite.c ****             else
1078:fltk-1.3.4-1/png/pngwrite.c ****             {
1079:fltk-1.3.4-1/png/pngwrite.c ****                png_ptr->up_row = (png_bytep)png_malloc(png_ptr,
1080:fltk-1.3.4-1/png/pngwrite.c ****                    (png_ptr->rowbytes + 1));
1081:fltk-1.3.4-1/png/pngwrite.c ****                png_ptr->up_row[0] = PNG_FILTER_VALUE_UP;
1082:fltk-1.3.4-1/png/pngwrite.c ****             }
1083:fltk-1.3.4-1/png/pngwrite.c ****          }
1084:fltk-1.3.4-1/png/pngwrite.c **** 
1085:fltk-1.3.4-1/png/pngwrite.c ****          if ((png_ptr->do_filter & PNG_FILTER_AVG) != 0 &&
1086:fltk-1.3.4-1/png/pngwrite.c ****               png_ptr->avg_row == NULL)
1087:fltk-1.3.4-1/png/pngwrite.c ****          {
1088:fltk-1.3.4-1/png/pngwrite.c ****             if (png_ptr->prev_row == NULL)
1089:fltk-1.3.4-1/png/pngwrite.c ****             {
1090:fltk-1.3.4-1/png/pngwrite.c ****                png_warning(png_ptr, "Can't add Average filter after starting");
1091:fltk-1.3.4-1/png/pngwrite.c ****                png_ptr->do_filter = (png_byte)(png_ptr->do_filter &
1092:fltk-1.3.4-1/png/pngwrite.c ****                    ~PNG_FILTER_AVG);
1093:fltk-1.3.4-1/png/pngwrite.c ****             }
1094:fltk-1.3.4-1/png/pngwrite.c **** 
1095:fltk-1.3.4-1/png/pngwrite.c ****             else
1096:fltk-1.3.4-1/png/pngwrite.c ****             {
1097:fltk-1.3.4-1/png/pngwrite.c ****                png_ptr->avg_row = (png_bytep)png_malloc(png_ptr,
1098:fltk-1.3.4-1/png/pngwrite.c ****                    (png_ptr->rowbytes + 1));
1099:fltk-1.3.4-1/png/pngwrite.c ****                png_ptr->avg_row[0] = PNG_FILTER_VALUE_AVG;
1100:fltk-1.3.4-1/png/pngwrite.c ****             }
1101:fltk-1.3.4-1/png/pngwrite.c ****          }
1102:fltk-1.3.4-1/png/pngwrite.c **** 
1103:fltk-1.3.4-1/png/pngwrite.c ****          if ((png_ptr->do_filter & PNG_FILTER_PAETH) != 0 &&
1104:fltk-1.3.4-1/png/pngwrite.c ****              png_ptr->paeth_row == NULL)
1105:fltk-1.3.4-1/png/pngwrite.c ****          {
1106:fltk-1.3.4-1/png/pngwrite.c ****             if (png_ptr->prev_row == NULL)
1107:fltk-1.3.4-1/png/pngwrite.c ****             {
1108:fltk-1.3.4-1/png/pngwrite.c ****                png_warning(png_ptr, "Can't add Paeth filter after starting");
1109:fltk-1.3.4-1/png/pngwrite.c ****                png_ptr->do_filter &= (png_byte)(~PNG_FILTER_PAETH);
1110:fltk-1.3.4-1/png/pngwrite.c ****             }
1111:fltk-1.3.4-1/png/pngwrite.c **** 
1112:fltk-1.3.4-1/png/pngwrite.c ****             else
1113:fltk-1.3.4-1/png/pngwrite.c ****             {
1114:fltk-1.3.4-1/png/pngwrite.c ****                png_ptr->paeth_row = (png_bytep)png_malloc(png_ptr,
1115:fltk-1.3.4-1/png/pngwrite.c ****                    (png_ptr->rowbytes + 1));
1116:fltk-1.3.4-1/png/pngwrite.c ****                png_ptr->paeth_row[0] = PNG_FILTER_VALUE_PAETH;
1117:fltk-1.3.4-1/png/pngwrite.c ****             }
1118:fltk-1.3.4-1/png/pngwrite.c ****          }
1119:fltk-1.3.4-1/png/pngwrite.c **** 
1120:fltk-1.3.4-1/png/pngwrite.c ****          if (png_ptr->do_filter == PNG_NO_FILTERS)
1121:fltk-1.3.4-1/png/pngwrite.c **** #endif /* WRITE_FILTER */
1122:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->do_filter = PNG_FILTER_NONE;
1123:fltk-1.3.4-1/png/pngwrite.c ****       }
1124:fltk-1.3.4-1/png/pngwrite.c ****    }
1125:fltk-1.3.4-1/png/pngwrite.c ****    else
1126:fltk-1.3.4-1/png/pngwrite.c ****       png_error(png_ptr, "Unknown custom filter method");
1127:fltk-1.3.4-1/png/pngwrite.c **** }
1128:fltk-1.3.4-1/png/pngwrite.c **** 
1129:fltk-1.3.4-1/png/pngwrite.c **** /* This allows us to influence the way in which libpng chooses the "best"
1130:fltk-1.3.4-1/png/pngwrite.c ****  * filter for the current scanline.  While the "minimum-sum-of-absolute-
1131:fltk-1.3.4-1/png/pngwrite.c ****  * differences metric is relatively fast and effective, there is some
1132:fltk-1.3.4-1/png/pngwrite.c ****  * question as to whether it can be improved upon by trying to keep the
1133:fltk-1.3.4-1/png/pngwrite.c ****  * filtered data going to zlib more consistent, hopefully resulting in
1134:fltk-1.3.4-1/png/pngwrite.c ****  * better compression.
1135:fltk-1.3.4-1/png/pngwrite.c ****  */
1136:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED      /* GRR 970116 */
1137:fltk-1.3.4-1/png/pngwrite.c **** /* Convenience reset API. */
1138:fltk-1.3.4-1/png/pngwrite.c **** static void
1139:fltk-1.3.4-1/png/pngwrite.c **** png_reset_filter_heuristics(png_structrp png_ptr)
1140:fltk-1.3.4-1/png/pngwrite.c **** {
  16              		.loc 1 1140 0
  17              		.cfi_startproc
  18              	.LVL0:
  19 0000 53       		pushq	%rbx
  20              		.cfi_def_cfa_offset 16
  21              		.cfi_offset 3, -16
1141:fltk-1.3.4-1/png/pngwrite.c ****    /* Clear out any old values in the 'weights' - this must be done because if
1142:fltk-1.3.4-1/png/pngwrite.c ****     * the app calls set_filter_heuristics multiple times with different
1143:fltk-1.3.4-1/png/pngwrite.c ****     * 'num_weights' values we would otherwise potentially have wrong sized
1144:fltk-1.3.4-1/png/pngwrite.c ****     * arrays.
1145:fltk-1.3.4-1/png/pngwrite.c ****     */
1146:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->num_prev_filters = 0;
1147:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->heuristic_method = PNG_FILTER_HEURISTIC_UNWEIGHTED;
1148:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr->prev_filters != NULL)
  22              		.loc 1 1148 0
  23 0001 488BB7A0 		movq	928(%rdi), %rsi
  23      030000
1140:fltk-1.3.4-1/png/pngwrite.c ****    /* Clear out any old values in the 'weights' - this must be done because if
  24              		.loc 1 1140 0
  25 0008 4889FB   		movq	%rdi, %rbx
1146:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->heuristic_method = PNG_FILTER_HEURISTIC_UNWEIGHTED;
  26              		.loc 1 1146 0
  27 000b C6879903 		movb	$0, 921(%rdi)
  27      000000
1147:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr->prev_filters != NULL)
  28              		.loc 1 1147 0
  29 0012 C6879803 		movb	$1, 920(%rdi)
  29      000001
  30              		.loc 1 1148 0
  31 0019 4885F6   		testq	%rsi, %rsi
  32 001c 7410     		je	.L2
  33              	.LVL1:
  34              	.LBB100:
1149:fltk-1.3.4-1/png/pngwrite.c ****    {
1150:fltk-1.3.4-1/png/pngwrite.c ****       png_bytep old = png_ptr->prev_filters;
1151:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->prev_filters = NULL;
  35              		.loc 1 1151 0
  36 001e 48C787A0 		movq	$0, 928(%rdi)
  36      03000000 
  36      000000
1152:fltk-1.3.4-1/png/pngwrite.c ****       png_free(png_ptr, old);
  37              		.loc 1 1152 0
  38 0029 E8000000 		call	png_free
  38      00
  39              	.LVL2:
  40              	.L2:
  41              	.LBE100:
1153:fltk-1.3.4-1/png/pngwrite.c ****    }
1154:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr->filter_weights != NULL)
  42              		.loc 1 1154 0
  43 002e 488BB3A8 		movq	936(%rbx), %rsi
  43      030000
  44 0035 4885F6   		testq	%rsi, %rsi
  45 0038 7413     		je	.L3
  46              	.LVL3:
  47              	.LBB101:
1155:fltk-1.3.4-1/png/pngwrite.c ****    {
1156:fltk-1.3.4-1/png/pngwrite.c ****       png_uint_16p old = png_ptr->filter_weights;
1157:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->filter_weights = NULL;
  48              		.loc 1 1157 0
  49 003a 48C783A8 		movq	$0, 936(%rbx)
  49      03000000 
  49      000000
1158:fltk-1.3.4-1/png/pngwrite.c ****       png_free(png_ptr, old);
  50              		.loc 1 1158 0
  51 0045 4889DF   		movq	%rbx, %rdi
  52 0048 E8000000 		call	png_free
  52      00
  53              	.LVL4:
  54              	.L3:
  55              	.LBE101:
1159:fltk-1.3.4-1/png/pngwrite.c ****    }
1160:fltk-1.3.4-1/png/pngwrite.c **** 
1161:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr->inv_filter_weights != NULL)
  56              		.loc 1 1161 0
  57 004d 488BB3B0 		movq	944(%rbx), %rsi
  57      030000
  58 0054 4885F6   		testq	%rsi, %rsi
  59 0057 7417     		je	.L1
  60              	.LVL5:
  61              	.LBB102:
1162:fltk-1.3.4-1/png/pngwrite.c ****    {
1163:fltk-1.3.4-1/png/pngwrite.c ****       png_uint_16p old = png_ptr->inv_filter_weights;
1164:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->inv_filter_weights = NULL;
  62              		.loc 1 1164 0
  63 0059 48C783B0 		movq	$0, 944(%rbx)
  63      03000000 
  63      000000
1165:fltk-1.3.4-1/png/pngwrite.c ****       png_free(png_ptr, old);
  64              		.loc 1 1165 0
  65 0064 4889DF   		movq	%rbx, %rdi
  66              	.LBE102:
1166:fltk-1.3.4-1/png/pngwrite.c ****    }
1167:fltk-1.3.4-1/png/pngwrite.c **** 
1168:fltk-1.3.4-1/png/pngwrite.c ****    /* Leave the filter_costs - this array is fixed size. */
1169:fltk-1.3.4-1/png/pngwrite.c **** }
  67              		.loc 1 1169 0
  68 0067 5B       		popq	%rbx
  69              		.cfi_remember_state
  70              		.cfi_def_cfa_offset 8
  71              	.LVL6:
  72              	.LBB103:
1165:fltk-1.3.4-1/png/pngwrite.c ****       png_free(png_ptr, old);
  73              		.loc 1 1165 0
  74 0068 E9000000 		jmp	png_free
  74      00
  75              	.LVL7:
  76 006d 0F1F00   		.p2align 4,,10
  77              		.p2align 3
  78              	.L1:
  79              		.cfi_restore_state
  80              	.LBE103:
  81              		.loc 1 1169 0
  82 0070 5B       		popq	%rbx
  83              		.cfi_def_cfa_offset 8
  84              	.LVL8:
  85 0071 C3       		ret
  86              		.cfi_endproc
  87              	.LFE73:
  89              		.section	.text.unlikely.png_reset_filter_heuristics
  90              	.LCOLDE0:
  91              		.section	.text.png_reset_filter_heuristics
  92              	.LHOTE0:
  93              		.section	.text.unlikely.png_unpremultiply.part.1,"ax",@progbits
  94              	.LCOLDB1:
  95              		.section	.text.png_unpremultiply.part.1,"ax",@progbits
  96              	.LHOTB1:
  97              		.p2align 4,,15
  99              	png_unpremultiply.part.1:
 100              	.LFB99:
1170:fltk-1.3.4-1/png/pngwrite.c **** 
1171:fltk-1.3.4-1/png/pngwrite.c **** static int
1172:fltk-1.3.4-1/png/pngwrite.c **** png_init_filter_heuristics(png_structrp png_ptr, int heuristic_method,
1173:fltk-1.3.4-1/png/pngwrite.c ****    int num_weights)
1174:fltk-1.3.4-1/png/pngwrite.c **** {
1175:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
1176:fltk-1.3.4-1/png/pngwrite.c ****       return 0;
1177:fltk-1.3.4-1/png/pngwrite.c **** 
1178:fltk-1.3.4-1/png/pngwrite.c ****    /* Clear out the arrays */
1179:fltk-1.3.4-1/png/pngwrite.c ****    png_reset_filter_heuristics(png_ptr);
1180:fltk-1.3.4-1/png/pngwrite.c **** 
1181:fltk-1.3.4-1/png/pngwrite.c ****    /* Check arguments; the 'reset' function makes the correct settings for the
1182:fltk-1.3.4-1/png/pngwrite.c ****     * unweighted case, but we must handle the weight case by initializing the
1183:fltk-1.3.4-1/png/pngwrite.c ****     * arrays for the caller.
1184:fltk-1.3.4-1/png/pngwrite.c ****     */
1185:fltk-1.3.4-1/png/pngwrite.c ****    if (heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
1186:fltk-1.3.4-1/png/pngwrite.c ****    {
1187:fltk-1.3.4-1/png/pngwrite.c ****       int i;
1188:fltk-1.3.4-1/png/pngwrite.c **** 
1189:fltk-1.3.4-1/png/pngwrite.c ****       if (num_weights > 0)
1190:fltk-1.3.4-1/png/pngwrite.c ****       {
1191:fltk-1.3.4-1/png/pngwrite.c ****          png_ptr->prev_filters = (png_bytep)png_malloc(png_ptr,
1192:fltk-1.3.4-1/png/pngwrite.c ****              (png_uint_32)((sizeof (png_byte)) * num_weights));
1193:fltk-1.3.4-1/png/pngwrite.c **** 
1194:fltk-1.3.4-1/png/pngwrite.c ****          /* To make sure that the weighting starts out fairly */
1195:fltk-1.3.4-1/png/pngwrite.c ****          for (i = 0; i < num_weights; i++)
1196:fltk-1.3.4-1/png/pngwrite.c ****          {
1197:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->prev_filters[i] = 255;
1198:fltk-1.3.4-1/png/pngwrite.c ****          }
1199:fltk-1.3.4-1/png/pngwrite.c **** 
1200:fltk-1.3.4-1/png/pngwrite.c ****          png_ptr->filter_weights = (png_uint_16p)png_malloc(png_ptr,
1201:fltk-1.3.4-1/png/pngwrite.c ****              (png_uint_32)((sizeof (png_uint_16)) * num_weights));
1202:fltk-1.3.4-1/png/pngwrite.c **** 
1203:fltk-1.3.4-1/png/pngwrite.c ****          png_ptr->inv_filter_weights = (png_uint_16p)png_malloc(png_ptr,
1204:fltk-1.3.4-1/png/pngwrite.c ****              (png_uint_32)((sizeof (png_uint_16)) * num_weights));
1205:fltk-1.3.4-1/png/pngwrite.c **** 
1206:fltk-1.3.4-1/png/pngwrite.c ****          for (i = 0; i < num_weights; i++)
1207:fltk-1.3.4-1/png/pngwrite.c ****          {
1208:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->inv_filter_weights[i] =
1209:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->filter_weights[i] = PNG_WEIGHT_FACTOR;
1210:fltk-1.3.4-1/png/pngwrite.c ****          }
1211:fltk-1.3.4-1/png/pngwrite.c **** 
1212:fltk-1.3.4-1/png/pngwrite.c ****          /* Safe to set this now */
1213:fltk-1.3.4-1/png/pngwrite.c ****          png_ptr->num_prev_filters = (png_byte)num_weights;
1214:fltk-1.3.4-1/png/pngwrite.c ****       }
1215:fltk-1.3.4-1/png/pngwrite.c **** 
1216:fltk-1.3.4-1/png/pngwrite.c ****       /* If, in the future, there are other filter methods, this would
1217:fltk-1.3.4-1/png/pngwrite.c ****        * need to be based on png_ptr->filter.
1218:fltk-1.3.4-1/png/pngwrite.c ****        */
1219:fltk-1.3.4-1/png/pngwrite.c ****       if (png_ptr->filter_costs == NULL)
1220:fltk-1.3.4-1/png/pngwrite.c ****       {
1221:fltk-1.3.4-1/png/pngwrite.c ****          png_ptr->filter_costs = (png_uint_16p)png_malloc(png_ptr,
1222:fltk-1.3.4-1/png/pngwrite.c ****              (png_uint_32)((sizeof (png_uint_16)) * PNG_FILTER_VALUE_LAST));
1223:fltk-1.3.4-1/png/pngwrite.c **** 
1224:fltk-1.3.4-1/png/pngwrite.c ****          png_ptr->inv_filter_costs = (png_uint_16p)png_malloc(png_ptr,
1225:fltk-1.3.4-1/png/pngwrite.c ****              (png_uint_32)((sizeof (png_uint_16)) * PNG_FILTER_VALUE_LAST));
1226:fltk-1.3.4-1/png/pngwrite.c ****       }
1227:fltk-1.3.4-1/png/pngwrite.c **** 
1228:fltk-1.3.4-1/png/pngwrite.c ****       for (i = 0; i < PNG_FILTER_VALUE_LAST; i++)
1229:fltk-1.3.4-1/png/pngwrite.c ****       {
1230:fltk-1.3.4-1/png/pngwrite.c ****          png_ptr->inv_filter_costs[i] =
1231:fltk-1.3.4-1/png/pngwrite.c ****          png_ptr->filter_costs[i] = PNG_COST_FACTOR;
1232:fltk-1.3.4-1/png/pngwrite.c ****       }
1233:fltk-1.3.4-1/png/pngwrite.c **** 
1234:fltk-1.3.4-1/png/pngwrite.c ****       /* All the arrays are inited, safe to set this: */
1235:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->heuristic_method = PNG_FILTER_HEURISTIC_WEIGHTED;
1236:fltk-1.3.4-1/png/pngwrite.c **** 
1237:fltk-1.3.4-1/png/pngwrite.c ****       /* Return the 'ok' code. */
1238:fltk-1.3.4-1/png/pngwrite.c ****       return 1;
1239:fltk-1.3.4-1/png/pngwrite.c ****    }
1240:fltk-1.3.4-1/png/pngwrite.c ****    else if (heuristic_method == PNG_FILTER_HEURISTIC_DEFAULT ||
1241:fltk-1.3.4-1/png/pngwrite.c ****       heuristic_method == PNG_FILTER_HEURISTIC_UNWEIGHTED)
1242:fltk-1.3.4-1/png/pngwrite.c ****    {
1243:fltk-1.3.4-1/png/pngwrite.c ****       return 1;
1244:fltk-1.3.4-1/png/pngwrite.c ****    }
1245:fltk-1.3.4-1/png/pngwrite.c ****    else
1246:fltk-1.3.4-1/png/pngwrite.c ****    {
1247:fltk-1.3.4-1/png/pngwrite.c ****       png_warning(png_ptr, "Unknown filter heuristic method");
1248:fltk-1.3.4-1/png/pngwrite.c ****       return 0;
1249:fltk-1.3.4-1/png/pngwrite.c ****    }
1250:fltk-1.3.4-1/png/pngwrite.c **** }
1251:fltk-1.3.4-1/png/pngwrite.c **** 
1252:fltk-1.3.4-1/png/pngwrite.c **** /* Provide floating and fixed point APIs */
1253:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_FLOATING_POINT_SUPPORTED
1254:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
1255:fltk-1.3.4-1/png/pngwrite.c **** png_set_filter_heuristics(png_structrp png_ptr, int heuristic_method,
1256:fltk-1.3.4-1/png/pngwrite.c ****     int num_weights, png_const_doublep filter_weights,
1257:fltk-1.3.4-1/png/pngwrite.c ****     png_const_doublep filter_costs)
1258:fltk-1.3.4-1/png/pngwrite.c **** {
1259:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_filter_heuristics");
1260:fltk-1.3.4-1/png/pngwrite.c **** 
1261:fltk-1.3.4-1/png/pngwrite.c ****    /* The internal API allocates all the arrays and ensures that the elements of
1262:fltk-1.3.4-1/png/pngwrite.c ****     * those arrays are set to the default value.
1263:fltk-1.3.4-1/png/pngwrite.c ****     */
1264:fltk-1.3.4-1/png/pngwrite.c ****    if (png_init_filter_heuristics(png_ptr, heuristic_method, num_weights) == 0)
1265:fltk-1.3.4-1/png/pngwrite.c ****       return;
1266:fltk-1.3.4-1/png/pngwrite.c **** 
1267:fltk-1.3.4-1/png/pngwrite.c ****    /* If using the weighted method copy in the weights. */
1268:fltk-1.3.4-1/png/pngwrite.c ****    if (heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
1269:fltk-1.3.4-1/png/pngwrite.c ****    {
1270:fltk-1.3.4-1/png/pngwrite.c ****       int i;
1271:fltk-1.3.4-1/png/pngwrite.c ****       for (i = 0; i < num_weights; i++)
1272:fltk-1.3.4-1/png/pngwrite.c ****       {
1273:fltk-1.3.4-1/png/pngwrite.c ****          if (filter_weights[i] <= 0.0)
1274:fltk-1.3.4-1/png/pngwrite.c ****          {
1275:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->inv_filter_weights[i] =
1276:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->filter_weights[i] = PNG_WEIGHT_FACTOR;
1277:fltk-1.3.4-1/png/pngwrite.c ****          }
1278:fltk-1.3.4-1/png/pngwrite.c **** 
1279:fltk-1.3.4-1/png/pngwrite.c ****          else
1280:fltk-1.3.4-1/png/pngwrite.c ****          {
1281:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->inv_filter_weights[i] =
1282:fltk-1.3.4-1/png/pngwrite.c ****                 (png_uint_16)(PNG_WEIGHT_FACTOR*filter_weights[i]+.5);
1283:fltk-1.3.4-1/png/pngwrite.c **** 
1284:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->filter_weights[i] =
1285:fltk-1.3.4-1/png/pngwrite.c ****                 (png_uint_16)(PNG_WEIGHT_FACTOR/filter_weights[i]+.5);
1286:fltk-1.3.4-1/png/pngwrite.c ****          }
1287:fltk-1.3.4-1/png/pngwrite.c ****       }
1288:fltk-1.3.4-1/png/pngwrite.c **** 
1289:fltk-1.3.4-1/png/pngwrite.c ****       /* Here is where we set the relative costs of the different filters.  We
1290:fltk-1.3.4-1/png/pngwrite.c ****        * should take the desired compression level into account when setting
1291:fltk-1.3.4-1/png/pngwrite.c ****        * the costs, so that Paeth, for instance, has a high relative cost at low
1292:fltk-1.3.4-1/png/pngwrite.c ****        * compression levels, while it has a lower relative cost at higher
1293:fltk-1.3.4-1/png/pngwrite.c ****        * compression settings.  The filter types are in order of increasing
1294:fltk-1.3.4-1/png/pngwrite.c ****        * relative cost, so it would be possible to do this with an algorithm.
1295:fltk-1.3.4-1/png/pngwrite.c ****        */
1296:fltk-1.3.4-1/png/pngwrite.c ****       for (i = 0; i < PNG_FILTER_VALUE_LAST; i++) if (filter_costs[i] >= 1.0)
1297:fltk-1.3.4-1/png/pngwrite.c ****       {
1298:fltk-1.3.4-1/png/pngwrite.c ****          png_ptr->inv_filter_costs[i] =
1299:fltk-1.3.4-1/png/pngwrite.c ****              (png_uint_16)(PNG_COST_FACTOR / filter_costs[i] + .5);
1300:fltk-1.3.4-1/png/pngwrite.c **** 
1301:fltk-1.3.4-1/png/pngwrite.c ****          png_ptr->filter_costs[i] =
1302:fltk-1.3.4-1/png/pngwrite.c ****              (png_uint_16)(PNG_COST_FACTOR * filter_costs[i] + .5);
1303:fltk-1.3.4-1/png/pngwrite.c ****       }
1304:fltk-1.3.4-1/png/pngwrite.c ****    }
1305:fltk-1.3.4-1/png/pngwrite.c **** }
1306:fltk-1.3.4-1/png/pngwrite.c **** #endif /* FLOATING_POINT */
1307:fltk-1.3.4-1/png/pngwrite.c **** 
1308:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_FIXED_POINT_SUPPORTED
1309:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
1310:fltk-1.3.4-1/png/pngwrite.c **** png_set_filter_heuristics_fixed(png_structrp png_ptr, int heuristic_method,
1311:fltk-1.3.4-1/png/pngwrite.c ****     int num_weights, png_const_fixed_point_p filter_weights,
1312:fltk-1.3.4-1/png/pngwrite.c ****     png_const_fixed_point_p filter_costs)
1313:fltk-1.3.4-1/png/pngwrite.c **** {
1314:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_filter_heuristics_fixed");
1315:fltk-1.3.4-1/png/pngwrite.c **** 
1316:fltk-1.3.4-1/png/pngwrite.c ****    /* The internal API allocates all the arrays and ensures that the elements of
1317:fltk-1.3.4-1/png/pngwrite.c ****     * those arrays are set to the default value.
1318:fltk-1.3.4-1/png/pngwrite.c ****     */
1319:fltk-1.3.4-1/png/pngwrite.c ****    if (png_init_filter_heuristics(png_ptr, heuristic_method, num_weights) == 0)
1320:fltk-1.3.4-1/png/pngwrite.c ****       return;
1321:fltk-1.3.4-1/png/pngwrite.c **** 
1322:fltk-1.3.4-1/png/pngwrite.c ****    /* If using the weighted method copy in the weights. */
1323:fltk-1.3.4-1/png/pngwrite.c ****    if (heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
1324:fltk-1.3.4-1/png/pngwrite.c ****    {
1325:fltk-1.3.4-1/png/pngwrite.c ****       int i;
1326:fltk-1.3.4-1/png/pngwrite.c ****       for (i = 0; i < num_weights; i++)
1327:fltk-1.3.4-1/png/pngwrite.c ****       {
1328:fltk-1.3.4-1/png/pngwrite.c ****          if (filter_weights[i] <= 0)
1329:fltk-1.3.4-1/png/pngwrite.c ****          {
1330:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->inv_filter_weights[i] =
1331:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->filter_weights[i] = PNG_WEIGHT_FACTOR;
1332:fltk-1.3.4-1/png/pngwrite.c ****          }
1333:fltk-1.3.4-1/png/pngwrite.c **** 
1334:fltk-1.3.4-1/png/pngwrite.c ****          else
1335:fltk-1.3.4-1/png/pngwrite.c ****          {
1336:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->inv_filter_weights[i] = (png_uint_16)
1337:fltk-1.3.4-1/png/pngwrite.c ****                ((PNG_WEIGHT_FACTOR*filter_weights[i]+PNG_FP_HALF)/PNG_FP_1);
1338:fltk-1.3.4-1/png/pngwrite.c **** 
1339:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->filter_weights[i] = (png_uint_16)((PNG_WEIGHT_FACTOR*
1340:fltk-1.3.4-1/png/pngwrite.c ****                PNG_FP_1+(filter_weights[i]/2))/filter_weights[i]);
1341:fltk-1.3.4-1/png/pngwrite.c ****          }
1342:fltk-1.3.4-1/png/pngwrite.c ****       }
1343:fltk-1.3.4-1/png/pngwrite.c **** 
1344:fltk-1.3.4-1/png/pngwrite.c ****       /* Here is where we set the relative costs of the different filters.  We
1345:fltk-1.3.4-1/png/pngwrite.c ****        * should take the desired compression level into account when setting
1346:fltk-1.3.4-1/png/pngwrite.c ****        * the costs, so that Paeth, for instance, has a high relative cost at low
1347:fltk-1.3.4-1/png/pngwrite.c ****        * compression levels, while it has a lower relative cost at higher
1348:fltk-1.3.4-1/png/pngwrite.c ****        * compression settings.  The filter types are in order of increasing
1349:fltk-1.3.4-1/png/pngwrite.c ****        * relative cost, so it would be possible to do this with an algorithm.
1350:fltk-1.3.4-1/png/pngwrite.c ****        */
1351:fltk-1.3.4-1/png/pngwrite.c ****       for (i = 0; i < PNG_FILTER_VALUE_LAST; i++)
1352:fltk-1.3.4-1/png/pngwrite.c ****          if (filter_costs[i] >= PNG_FP_1)
1353:fltk-1.3.4-1/png/pngwrite.c ****       {
1354:fltk-1.3.4-1/png/pngwrite.c ****          png_uint_32 tmp;
1355:fltk-1.3.4-1/png/pngwrite.c **** 
1356:fltk-1.3.4-1/png/pngwrite.c ****          /* Use a 32 bit unsigned temporary here because otherwise the
1357:fltk-1.3.4-1/png/pngwrite.c ****           * intermediate value will be a 32 bit *signed* integer (ANSI rules)
1358:fltk-1.3.4-1/png/pngwrite.c ****           * and this will get the wrong answer on division.
1359:fltk-1.3.4-1/png/pngwrite.c ****           */
1360:fltk-1.3.4-1/png/pngwrite.c ****          tmp = PNG_COST_FACTOR*PNG_FP_1 + (filter_costs[i]/2);
1361:fltk-1.3.4-1/png/pngwrite.c ****          tmp /= filter_costs[i];
1362:fltk-1.3.4-1/png/pngwrite.c **** 
1363:fltk-1.3.4-1/png/pngwrite.c ****          png_ptr->inv_filter_costs[i] = (png_uint_16)tmp;
1364:fltk-1.3.4-1/png/pngwrite.c **** 
1365:fltk-1.3.4-1/png/pngwrite.c ****          tmp = PNG_COST_FACTOR * filter_costs[i] + PNG_FP_HALF;
1366:fltk-1.3.4-1/png/pngwrite.c ****          tmp /= PNG_FP_1;
1367:fltk-1.3.4-1/png/pngwrite.c **** 
1368:fltk-1.3.4-1/png/pngwrite.c ****          png_ptr->filter_costs[i] = (png_uint_16)tmp;
1369:fltk-1.3.4-1/png/pngwrite.c ****       }
1370:fltk-1.3.4-1/png/pngwrite.c ****    }
1371:fltk-1.3.4-1/png/pngwrite.c **** }
1372:fltk-1.3.4-1/png/pngwrite.c **** #endif /* FIXED_POINT */
1373:fltk-1.3.4-1/png/pngwrite.c **** #endif /* WRITE_WEIGHTED_FILTER */
1374:fltk-1.3.4-1/png/pngwrite.c **** 
1375:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
1376:fltk-1.3.4-1/png/pngwrite.c **** png_set_compression_level(png_structrp png_ptr, int level)
1377:fltk-1.3.4-1/png/pngwrite.c **** {
1378:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_compression_level");
1379:fltk-1.3.4-1/png/pngwrite.c **** 
1380:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
1381:fltk-1.3.4-1/png/pngwrite.c ****       return;
1382:fltk-1.3.4-1/png/pngwrite.c **** 
1383:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->zlib_level = level;
1384:fltk-1.3.4-1/png/pngwrite.c **** }
1385:fltk-1.3.4-1/png/pngwrite.c **** 
1386:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
1387:fltk-1.3.4-1/png/pngwrite.c **** png_set_compression_mem_level(png_structrp png_ptr, int mem_level)
1388:fltk-1.3.4-1/png/pngwrite.c **** {
1389:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_compression_mem_level");
1390:fltk-1.3.4-1/png/pngwrite.c **** 
1391:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
1392:fltk-1.3.4-1/png/pngwrite.c ****       return;
1393:fltk-1.3.4-1/png/pngwrite.c **** 
1394:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->zlib_mem_level = mem_level;
1395:fltk-1.3.4-1/png/pngwrite.c **** }
1396:fltk-1.3.4-1/png/pngwrite.c **** 
1397:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
1398:fltk-1.3.4-1/png/pngwrite.c **** png_set_compression_strategy(png_structrp png_ptr, int strategy)
1399:fltk-1.3.4-1/png/pngwrite.c **** {
1400:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_compression_strategy");
1401:fltk-1.3.4-1/png/pngwrite.c **** 
1402:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
1403:fltk-1.3.4-1/png/pngwrite.c ****       return;
1404:fltk-1.3.4-1/png/pngwrite.c **** 
1405:fltk-1.3.4-1/png/pngwrite.c ****    /* The flag setting here prevents the libpng dynamic selection of strategy.
1406:fltk-1.3.4-1/png/pngwrite.c ****     */
1407:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->flags |= PNG_FLAG_ZLIB_CUSTOM_STRATEGY;
1408:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->zlib_strategy = strategy;
1409:fltk-1.3.4-1/png/pngwrite.c **** }
1410:fltk-1.3.4-1/png/pngwrite.c **** 
1411:fltk-1.3.4-1/png/pngwrite.c **** /* If PNG_WRITE_OPTIMIZE_CMF_SUPPORTED is defined, libpng will use a
1412:fltk-1.3.4-1/png/pngwrite.c ****  * smaller value of window_bits if it can do so safely.
1413:fltk-1.3.4-1/png/pngwrite.c ****  */
1414:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
1415:fltk-1.3.4-1/png/pngwrite.c **** png_set_compression_window_bits(png_structrp png_ptr, int window_bits)
1416:fltk-1.3.4-1/png/pngwrite.c **** {
1417:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
1418:fltk-1.3.4-1/png/pngwrite.c ****       return;
1419:fltk-1.3.4-1/png/pngwrite.c **** 
1420:fltk-1.3.4-1/png/pngwrite.c ****    /* Prior to 1.6.0 this would warn but then set the window_bits value, this
1421:fltk-1.3.4-1/png/pngwrite.c ****     * meant that negative window bits values could be selected which would cause
1422:fltk-1.3.4-1/png/pngwrite.c ****     * libpng to write a non-standard PNG file with raw deflate or gzip
1423:fltk-1.3.4-1/png/pngwrite.c ****     * compressed IDAT or ancillary chunks.  Such files can be read and there is
1424:fltk-1.3.4-1/png/pngwrite.c ****     * no warning on read, so this seems like a very bad idea.
1425:fltk-1.3.4-1/png/pngwrite.c ****     */
1426:fltk-1.3.4-1/png/pngwrite.c ****    if (window_bits > 15)
1427:fltk-1.3.4-1/png/pngwrite.c ****    {
1428:fltk-1.3.4-1/png/pngwrite.c ****       png_warning(png_ptr, "Only compression windows <= 32k supported by PNG");
1429:fltk-1.3.4-1/png/pngwrite.c ****       window_bits = 15;
1430:fltk-1.3.4-1/png/pngwrite.c ****    }
1431:fltk-1.3.4-1/png/pngwrite.c **** 
1432:fltk-1.3.4-1/png/pngwrite.c ****    else if (window_bits < 8)
1433:fltk-1.3.4-1/png/pngwrite.c ****    {
1434:fltk-1.3.4-1/png/pngwrite.c ****       png_warning(png_ptr, "Only compression windows >= 256 supported by PNG");
1435:fltk-1.3.4-1/png/pngwrite.c ****       window_bits = 8;
1436:fltk-1.3.4-1/png/pngwrite.c ****    }
1437:fltk-1.3.4-1/png/pngwrite.c **** 
1438:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->zlib_window_bits = window_bits;
1439:fltk-1.3.4-1/png/pngwrite.c **** }
1440:fltk-1.3.4-1/png/pngwrite.c **** 
1441:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
1442:fltk-1.3.4-1/png/pngwrite.c **** png_set_compression_method(png_structrp png_ptr, int method)
1443:fltk-1.3.4-1/png/pngwrite.c **** {
1444:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_compression_method");
1445:fltk-1.3.4-1/png/pngwrite.c **** 
1446:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
1447:fltk-1.3.4-1/png/pngwrite.c ****       return;
1448:fltk-1.3.4-1/png/pngwrite.c **** 
1449:fltk-1.3.4-1/png/pngwrite.c ****    /* This would produce an invalid PNG file if it worked, but it doesn't and
1450:fltk-1.3.4-1/png/pngwrite.c ****     * deflate will fault it, so it is harmless to just warn here.
1451:fltk-1.3.4-1/png/pngwrite.c ****     */
1452:fltk-1.3.4-1/png/pngwrite.c ****    if (method != 8)
1453:fltk-1.3.4-1/png/pngwrite.c ****       png_warning(png_ptr, "Only compression method 8 is supported by PNG");
1454:fltk-1.3.4-1/png/pngwrite.c **** 
1455:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->zlib_method = method;
1456:fltk-1.3.4-1/png/pngwrite.c **** }
1457:fltk-1.3.4-1/png/pngwrite.c **** 
1458:fltk-1.3.4-1/png/pngwrite.c **** /* The following were added to libpng-1.5.4 */
1459:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_CUSTOMIZE_ZTXT_COMPRESSION_SUPPORTED
1460:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
1461:fltk-1.3.4-1/png/pngwrite.c **** png_set_text_compression_level(png_structrp png_ptr, int level)
1462:fltk-1.3.4-1/png/pngwrite.c **** {
1463:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_text_compression_level");
1464:fltk-1.3.4-1/png/pngwrite.c **** 
1465:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
1466:fltk-1.3.4-1/png/pngwrite.c ****       return;
1467:fltk-1.3.4-1/png/pngwrite.c **** 
1468:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->zlib_text_level = level;
1469:fltk-1.3.4-1/png/pngwrite.c **** }
1470:fltk-1.3.4-1/png/pngwrite.c **** 
1471:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
1472:fltk-1.3.4-1/png/pngwrite.c **** png_set_text_compression_mem_level(png_structrp png_ptr, int mem_level)
1473:fltk-1.3.4-1/png/pngwrite.c **** {
1474:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_text_compression_mem_level");
1475:fltk-1.3.4-1/png/pngwrite.c **** 
1476:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
1477:fltk-1.3.4-1/png/pngwrite.c ****       return;
1478:fltk-1.3.4-1/png/pngwrite.c **** 
1479:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->zlib_text_mem_level = mem_level;
1480:fltk-1.3.4-1/png/pngwrite.c **** }
1481:fltk-1.3.4-1/png/pngwrite.c **** 
1482:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
1483:fltk-1.3.4-1/png/pngwrite.c **** png_set_text_compression_strategy(png_structrp png_ptr, int strategy)
1484:fltk-1.3.4-1/png/pngwrite.c **** {
1485:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_text_compression_strategy");
1486:fltk-1.3.4-1/png/pngwrite.c **** 
1487:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
1488:fltk-1.3.4-1/png/pngwrite.c ****       return;
1489:fltk-1.3.4-1/png/pngwrite.c **** 
1490:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->zlib_text_strategy = strategy;
1491:fltk-1.3.4-1/png/pngwrite.c **** }
1492:fltk-1.3.4-1/png/pngwrite.c **** 
1493:fltk-1.3.4-1/png/pngwrite.c **** /* If PNG_WRITE_OPTIMIZE_CMF_SUPPORTED is defined, libpng will use a
1494:fltk-1.3.4-1/png/pngwrite.c ****  * smaller value of window_bits if it can do so safely.
1495:fltk-1.3.4-1/png/pngwrite.c ****  */
1496:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
1497:fltk-1.3.4-1/png/pngwrite.c **** png_set_text_compression_window_bits(png_structrp png_ptr, int window_bits)
1498:fltk-1.3.4-1/png/pngwrite.c **** {
1499:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
1500:fltk-1.3.4-1/png/pngwrite.c ****       return;
1501:fltk-1.3.4-1/png/pngwrite.c **** 
1502:fltk-1.3.4-1/png/pngwrite.c ****    if (window_bits > 15)
1503:fltk-1.3.4-1/png/pngwrite.c ****    {
1504:fltk-1.3.4-1/png/pngwrite.c ****       png_warning(png_ptr, "Only compression windows <= 32k supported by PNG");
1505:fltk-1.3.4-1/png/pngwrite.c ****       window_bits = 15;
1506:fltk-1.3.4-1/png/pngwrite.c ****    }
1507:fltk-1.3.4-1/png/pngwrite.c **** 
1508:fltk-1.3.4-1/png/pngwrite.c ****    else if (window_bits < 8)
1509:fltk-1.3.4-1/png/pngwrite.c ****    {
1510:fltk-1.3.4-1/png/pngwrite.c ****       png_warning(png_ptr, "Only compression windows >= 256 supported by PNG");
1511:fltk-1.3.4-1/png/pngwrite.c ****       window_bits = 8;
1512:fltk-1.3.4-1/png/pngwrite.c ****    }
1513:fltk-1.3.4-1/png/pngwrite.c **** 
1514:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->zlib_text_window_bits = window_bits;
1515:fltk-1.3.4-1/png/pngwrite.c **** }
1516:fltk-1.3.4-1/png/pngwrite.c **** 
1517:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
1518:fltk-1.3.4-1/png/pngwrite.c **** png_set_text_compression_method(png_structrp png_ptr, int method)
1519:fltk-1.3.4-1/png/pngwrite.c **** {
1520:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_text_compression_method");
1521:fltk-1.3.4-1/png/pngwrite.c **** 
1522:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
1523:fltk-1.3.4-1/png/pngwrite.c ****       return;
1524:fltk-1.3.4-1/png/pngwrite.c **** 
1525:fltk-1.3.4-1/png/pngwrite.c ****    if (method != 8)
1526:fltk-1.3.4-1/png/pngwrite.c ****       png_warning(png_ptr, "Only compression method 8 is supported by PNG");
1527:fltk-1.3.4-1/png/pngwrite.c **** 
1528:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->zlib_text_method = method;
1529:fltk-1.3.4-1/png/pngwrite.c **** }
1530:fltk-1.3.4-1/png/pngwrite.c **** #endif /* WRITE_CUSTOMIZE_ZTXT_COMPRESSION */
1531:fltk-1.3.4-1/png/pngwrite.c **** /* end of API added to libpng-1.5.4 */
1532:fltk-1.3.4-1/png/pngwrite.c **** 
1533:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
1534:fltk-1.3.4-1/png/pngwrite.c **** png_set_write_status_fn(png_structrp png_ptr, png_write_status_ptr write_row_fn)
1535:fltk-1.3.4-1/png/pngwrite.c **** {
1536:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
1537:fltk-1.3.4-1/png/pngwrite.c ****       return;
1538:fltk-1.3.4-1/png/pngwrite.c **** 
1539:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->write_row_fn = write_row_fn;
1540:fltk-1.3.4-1/png/pngwrite.c **** }
1541:fltk-1.3.4-1/png/pngwrite.c **** 
1542:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_USER_TRANSFORM_SUPPORTED
1543:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
1544:fltk-1.3.4-1/png/pngwrite.c **** png_set_write_user_transform_fn(png_structrp png_ptr, png_user_transform_ptr
1545:fltk-1.3.4-1/png/pngwrite.c ****     write_user_transform_fn)
1546:fltk-1.3.4-1/png/pngwrite.c **** {
1547:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_write_user_transform_fn");
1548:fltk-1.3.4-1/png/pngwrite.c **** 
1549:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
1550:fltk-1.3.4-1/png/pngwrite.c ****       return;
1551:fltk-1.3.4-1/png/pngwrite.c **** 
1552:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->transformations |= PNG_USER_TRANSFORM;
1553:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->write_user_transform_fn = write_user_transform_fn;
1554:fltk-1.3.4-1/png/pngwrite.c **** }
1555:fltk-1.3.4-1/png/pngwrite.c **** #endif
1556:fltk-1.3.4-1/png/pngwrite.c **** 
1557:fltk-1.3.4-1/png/pngwrite.c **** 
1558:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_INFO_IMAGE_SUPPORTED
1559:fltk-1.3.4-1/png/pngwrite.c **** void PNGAPI
1560:fltk-1.3.4-1/png/pngwrite.c **** png_write_png(png_structrp png_ptr, png_inforp info_ptr,
1561:fltk-1.3.4-1/png/pngwrite.c ****     int transforms, voidp params)
1562:fltk-1.3.4-1/png/pngwrite.c **** {
1563:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL || info_ptr == NULL)
1564:fltk-1.3.4-1/png/pngwrite.c ****       return;
1565:fltk-1.3.4-1/png/pngwrite.c **** 
1566:fltk-1.3.4-1/png/pngwrite.c ****    if ((info_ptr->valid & PNG_INFO_IDAT) == 0)
1567:fltk-1.3.4-1/png/pngwrite.c ****    {
1568:fltk-1.3.4-1/png/pngwrite.c ****       png_app_error(png_ptr, "no rows for png_write_image to write");
1569:fltk-1.3.4-1/png/pngwrite.c ****       return;
1570:fltk-1.3.4-1/png/pngwrite.c ****    }
1571:fltk-1.3.4-1/png/pngwrite.c **** 
1572:fltk-1.3.4-1/png/pngwrite.c ****    /* Write the file header information. */
1573:fltk-1.3.4-1/png/pngwrite.c ****    png_write_info(png_ptr, info_ptr);
1574:fltk-1.3.4-1/png/pngwrite.c **** 
1575:fltk-1.3.4-1/png/pngwrite.c ****    /* ------ these transformations don't touch the info structure ------- */
1576:fltk-1.3.4-1/png/pngwrite.c **** 
1577:fltk-1.3.4-1/png/pngwrite.c ****    /* Invert monochrome pixels */
1578:fltk-1.3.4-1/png/pngwrite.c ****    if ((transforms & PNG_TRANSFORM_INVERT_MONO) != 0)
1579:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_INVERT_SUPPORTED
1580:fltk-1.3.4-1/png/pngwrite.c ****       png_set_invert_mono(png_ptr);
1581:fltk-1.3.4-1/png/pngwrite.c **** #else
1582:fltk-1.3.4-1/png/pngwrite.c ****       png_app_error(png_ptr, "PNG_TRANSFORM_INVERT_MONO not supported");
1583:fltk-1.3.4-1/png/pngwrite.c **** #endif
1584:fltk-1.3.4-1/png/pngwrite.c **** 
1585:fltk-1.3.4-1/png/pngwrite.c ****    /* Shift the pixels up to a legal bit depth and fill in
1586:fltk-1.3.4-1/png/pngwrite.c ****     * as appropriate to correctly scale the image.
1587:fltk-1.3.4-1/png/pngwrite.c ****     */
1588:fltk-1.3.4-1/png/pngwrite.c ****    if ((transforms & PNG_TRANSFORM_SHIFT) != 0)
1589:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_SHIFT_SUPPORTED
1590:fltk-1.3.4-1/png/pngwrite.c ****       if ((info_ptr->valid & PNG_INFO_sBIT) != 0)
1591:fltk-1.3.4-1/png/pngwrite.c ****          png_set_shift(png_ptr, &info_ptr->sig_bit);
1592:fltk-1.3.4-1/png/pngwrite.c **** #else
1593:fltk-1.3.4-1/png/pngwrite.c ****       png_app_error(png_ptr, "PNG_TRANSFORM_SHIFT not supported");
1594:fltk-1.3.4-1/png/pngwrite.c **** #endif
1595:fltk-1.3.4-1/png/pngwrite.c **** 
1596:fltk-1.3.4-1/png/pngwrite.c ****    /* Pack pixels into bytes */
1597:fltk-1.3.4-1/png/pngwrite.c ****    if ((transforms & PNG_TRANSFORM_PACKING) != 0)
1598:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_PACK_SUPPORTED
1599:fltk-1.3.4-1/png/pngwrite.c ****       png_set_packing(png_ptr);
1600:fltk-1.3.4-1/png/pngwrite.c **** #else
1601:fltk-1.3.4-1/png/pngwrite.c ****       png_app_error(png_ptr, "PNG_TRANSFORM_PACKING not supported");
1602:fltk-1.3.4-1/png/pngwrite.c **** #endif
1603:fltk-1.3.4-1/png/pngwrite.c **** 
1604:fltk-1.3.4-1/png/pngwrite.c ****    /* Swap location of alpha bytes from ARGB to RGBA */
1605:fltk-1.3.4-1/png/pngwrite.c ****    if ((transforms & PNG_TRANSFORM_SWAP_ALPHA) != 0)
1606:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_SWAP_ALPHA_SUPPORTED
1607:fltk-1.3.4-1/png/pngwrite.c ****       png_set_swap_alpha(png_ptr);
1608:fltk-1.3.4-1/png/pngwrite.c **** #else
1609:fltk-1.3.4-1/png/pngwrite.c ****       png_app_error(png_ptr, "PNG_TRANSFORM_SWAP_ALPHA not supported");
1610:fltk-1.3.4-1/png/pngwrite.c **** #endif
1611:fltk-1.3.4-1/png/pngwrite.c **** 
1612:fltk-1.3.4-1/png/pngwrite.c ****    /* Remove a filler (X) from XRGB/RGBX/AG/GA into to convert it into
1613:fltk-1.3.4-1/png/pngwrite.c ****     * RGB, note that the code expects the input color type to be G or RGB; no
1614:fltk-1.3.4-1/png/pngwrite.c ****     * alpha channel.
1615:fltk-1.3.4-1/png/pngwrite.c ****     */
1616:fltk-1.3.4-1/png/pngwrite.c ****    if ((transforms & (PNG_TRANSFORM_STRIP_FILLER_AFTER|
1617:fltk-1.3.4-1/png/pngwrite.c ****       PNG_TRANSFORM_STRIP_FILLER_BEFORE)) != 0)
1618:fltk-1.3.4-1/png/pngwrite.c ****    {
1619:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_FILLER_SUPPORTED
1620:fltk-1.3.4-1/png/pngwrite.c ****       if ((transforms & PNG_TRANSFORM_STRIP_FILLER_AFTER) != 0)
1621:fltk-1.3.4-1/png/pngwrite.c ****       {
1622:fltk-1.3.4-1/png/pngwrite.c ****          if ((transforms & PNG_TRANSFORM_STRIP_FILLER_BEFORE) != 0)
1623:fltk-1.3.4-1/png/pngwrite.c ****             png_app_error(png_ptr,
1624:fltk-1.3.4-1/png/pngwrite.c ****                "PNG_TRANSFORM_STRIP_FILLER: BEFORE+AFTER not supported");
1625:fltk-1.3.4-1/png/pngwrite.c **** 
1626:fltk-1.3.4-1/png/pngwrite.c ****          /* Continue if ignored - this is the pre-1.6.10 behavior */
1627:fltk-1.3.4-1/png/pngwrite.c ****          png_set_filler(png_ptr, 0, PNG_FILLER_AFTER);
1628:fltk-1.3.4-1/png/pngwrite.c ****       }
1629:fltk-1.3.4-1/png/pngwrite.c **** 
1630:fltk-1.3.4-1/png/pngwrite.c ****       else if ((transforms & PNG_TRANSFORM_STRIP_FILLER_BEFORE) != 0)
1631:fltk-1.3.4-1/png/pngwrite.c ****          png_set_filler(png_ptr, 0, PNG_FILLER_BEFORE);
1632:fltk-1.3.4-1/png/pngwrite.c **** #else
1633:fltk-1.3.4-1/png/pngwrite.c ****       png_app_error(png_ptr, "PNG_TRANSFORM_STRIP_FILLER not supported");
1634:fltk-1.3.4-1/png/pngwrite.c **** #endif
1635:fltk-1.3.4-1/png/pngwrite.c ****    }
1636:fltk-1.3.4-1/png/pngwrite.c **** 
1637:fltk-1.3.4-1/png/pngwrite.c ****    /* Flip BGR pixels to RGB */
1638:fltk-1.3.4-1/png/pngwrite.c ****    if ((transforms & PNG_TRANSFORM_BGR) != 0)
1639:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_BGR_SUPPORTED
1640:fltk-1.3.4-1/png/pngwrite.c ****       png_set_bgr(png_ptr);
1641:fltk-1.3.4-1/png/pngwrite.c **** #else
1642:fltk-1.3.4-1/png/pngwrite.c ****       png_app_error(png_ptr, "PNG_TRANSFORM_BGR not supported");
1643:fltk-1.3.4-1/png/pngwrite.c **** #endif
1644:fltk-1.3.4-1/png/pngwrite.c **** 
1645:fltk-1.3.4-1/png/pngwrite.c ****    /* Swap bytes of 16-bit files to most significant byte first */
1646:fltk-1.3.4-1/png/pngwrite.c ****    if ((transforms & PNG_TRANSFORM_SWAP_ENDIAN) != 0)
1647:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_SWAP_SUPPORTED
1648:fltk-1.3.4-1/png/pngwrite.c ****       png_set_swap(png_ptr);
1649:fltk-1.3.4-1/png/pngwrite.c **** #else
1650:fltk-1.3.4-1/png/pngwrite.c ****       png_app_error(png_ptr, "PNG_TRANSFORM_SWAP_ENDIAN not supported");
1651:fltk-1.3.4-1/png/pngwrite.c **** #endif
1652:fltk-1.3.4-1/png/pngwrite.c **** 
1653:fltk-1.3.4-1/png/pngwrite.c ****    /* Swap bits of 1, 2, 4 bit packed pixel formats */
1654:fltk-1.3.4-1/png/pngwrite.c ****    if ((transforms & PNG_TRANSFORM_PACKSWAP) != 0)
1655:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_PACKSWAP_SUPPORTED
1656:fltk-1.3.4-1/png/pngwrite.c ****       png_set_packswap(png_ptr);
1657:fltk-1.3.4-1/png/pngwrite.c **** #else
1658:fltk-1.3.4-1/png/pngwrite.c ****       png_app_error(png_ptr, "PNG_TRANSFORM_PACKSWAP not supported");
1659:fltk-1.3.4-1/png/pngwrite.c **** #endif
1660:fltk-1.3.4-1/png/pngwrite.c **** 
1661:fltk-1.3.4-1/png/pngwrite.c ****    /* Invert the alpha channel from opacity to transparency */
1662:fltk-1.3.4-1/png/pngwrite.c ****    if ((transforms & PNG_TRANSFORM_INVERT_ALPHA) != 0)
1663:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_INVERT_ALPHA_SUPPORTED
1664:fltk-1.3.4-1/png/pngwrite.c ****       png_set_invert_alpha(png_ptr);
1665:fltk-1.3.4-1/png/pngwrite.c **** #else
1666:fltk-1.3.4-1/png/pngwrite.c ****       png_app_error(png_ptr, "PNG_TRANSFORM_INVERT_ALPHA not supported");
1667:fltk-1.3.4-1/png/pngwrite.c **** #endif
1668:fltk-1.3.4-1/png/pngwrite.c **** 
1669:fltk-1.3.4-1/png/pngwrite.c ****    /* ----------------------- end of transformations ------------------- */
1670:fltk-1.3.4-1/png/pngwrite.c **** 
1671:fltk-1.3.4-1/png/pngwrite.c ****    /* Write the bits */
1672:fltk-1.3.4-1/png/pngwrite.c ****    png_write_image(png_ptr, info_ptr->row_pointers);
1673:fltk-1.3.4-1/png/pngwrite.c **** 
1674:fltk-1.3.4-1/png/pngwrite.c ****    /* It is REQUIRED to call this to finish writing the rest of the file */
1675:fltk-1.3.4-1/png/pngwrite.c ****    png_write_end(png_ptr, info_ptr);
1676:fltk-1.3.4-1/png/pngwrite.c **** 
1677:fltk-1.3.4-1/png/pngwrite.c ****    PNG_UNUSED(params)
1678:fltk-1.3.4-1/png/pngwrite.c **** }
1679:fltk-1.3.4-1/png/pngwrite.c **** #endif
1680:fltk-1.3.4-1/png/pngwrite.c **** 
1681:fltk-1.3.4-1/png/pngwrite.c **** 
1682:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_SIMPLIFIED_WRITE_SUPPORTED
1683:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_STDIO_SUPPORTED /* currently required for png_image_write_* */
1684:fltk-1.3.4-1/png/pngwrite.c **** /* Initialize the write structure - general purpose utility. */
1685:fltk-1.3.4-1/png/pngwrite.c **** static int
1686:fltk-1.3.4-1/png/pngwrite.c **** png_image_write_init(png_imagep image)
1687:fltk-1.3.4-1/png/pngwrite.c **** {
1688:fltk-1.3.4-1/png/pngwrite.c ****    png_structp png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING, image,
1689:fltk-1.3.4-1/png/pngwrite.c ****           png_safe_error, png_safe_warning);
1690:fltk-1.3.4-1/png/pngwrite.c **** 
1691:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr != NULL)
1692:fltk-1.3.4-1/png/pngwrite.c ****    {
1693:fltk-1.3.4-1/png/pngwrite.c ****       png_infop info_ptr = png_create_info_struct(png_ptr);
1694:fltk-1.3.4-1/png/pngwrite.c **** 
1695:fltk-1.3.4-1/png/pngwrite.c ****       if (info_ptr != NULL)
1696:fltk-1.3.4-1/png/pngwrite.c ****       {
1697:fltk-1.3.4-1/png/pngwrite.c ****          png_controlp control = png_voidcast(png_controlp,
1698:fltk-1.3.4-1/png/pngwrite.c ****             png_malloc_warn(png_ptr, (sizeof *control)));
1699:fltk-1.3.4-1/png/pngwrite.c **** 
1700:fltk-1.3.4-1/png/pngwrite.c ****          if (control != NULL)
1701:fltk-1.3.4-1/png/pngwrite.c ****          {
1702:fltk-1.3.4-1/png/pngwrite.c ****             memset(control, 0, (sizeof *control));
1703:fltk-1.3.4-1/png/pngwrite.c **** 
1704:fltk-1.3.4-1/png/pngwrite.c ****             control->png_ptr = png_ptr;
1705:fltk-1.3.4-1/png/pngwrite.c ****             control->info_ptr = info_ptr;
1706:fltk-1.3.4-1/png/pngwrite.c ****             control->for_write = 1;
1707:fltk-1.3.4-1/png/pngwrite.c **** 
1708:fltk-1.3.4-1/png/pngwrite.c ****             image->opaque = control;
1709:fltk-1.3.4-1/png/pngwrite.c ****             return 1;
1710:fltk-1.3.4-1/png/pngwrite.c ****          }
1711:fltk-1.3.4-1/png/pngwrite.c **** 
1712:fltk-1.3.4-1/png/pngwrite.c ****          /* Error clean up */
1713:fltk-1.3.4-1/png/pngwrite.c ****          png_destroy_info_struct(png_ptr, &info_ptr);
1714:fltk-1.3.4-1/png/pngwrite.c ****       }
1715:fltk-1.3.4-1/png/pngwrite.c **** 
1716:fltk-1.3.4-1/png/pngwrite.c ****       png_destroy_write_struct(&png_ptr, NULL);
1717:fltk-1.3.4-1/png/pngwrite.c ****    }
1718:fltk-1.3.4-1/png/pngwrite.c **** 
1719:fltk-1.3.4-1/png/pngwrite.c ****    return png_image_error(image, "png_image_write_: out of memory");
1720:fltk-1.3.4-1/png/pngwrite.c **** }
1721:fltk-1.3.4-1/png/pngwrite.c **** 
1722:fltk-1.3.4-1/png/pngwrite.c **** /* Arguments to png_image_write_main: */
1723:fltk-1.3.4-1/png/pngwrite.c **** typedef struct
1724:fltk-1.3.4-1/png/pngwrite.c **** {
1725:fltk-1.3.4-1/png/pngwrite.c ****    /* Arguments: */
1726:fltk-1.3.4-1/png/pngwrite.c ****    png_imagep      image;
1727:fltk-1.3.4-1/png/pngwrite.c ****    png_const_voidp buffer;
1728:fltk-1.3.4-1/png/pngwrite.c ****    png_int_32      row_stride;
1729:fltk-1.3.4-1/png/pngwrite.c ****    png_const_voidp colormap;
1730:fltk-1.3.4-1/png/pngwrite.c ****    int             convert_to_8bit;
1731:fltk-1.3.4-1/png/pngwrite.c ****    /* Local variables: */
1732:fltk-1.3.4-1/png/pngwrite.c ****    png_const_voidp first_row;
1733:fltk-1.3.4-1/png/pngwrite.c ****    ptrdiff_t       row_bytes;
1734:fltk-1.3.4-1/png/pngwrite.c ****    png_voidp       local_row;
1735:fltk-1.3.4-1/png/pngwrite.c **** } png_image_write_control;
1736:fltk-1.3.4-1/png/pngwrite.c **** 
1737:fltk-1.3.4-1/png/pngwrite.c **** /* Write png_uint_16 input to a 16-bit PNG; the png_ptr has already been set to
1738:fltk-1.3.4-1/png/pngwrite.c ****  * do any necessary byte swapping.  The component order is defined by the
1739:fltk-1.3.4-1/png/pngwrite.c ****  * png_image format value.
1740:fltk-1.3.4-1/png/pngwrite.c ****  */
1741:fltk-1.3.4-1/png/pngwrite.c **** static int
1742:fltk-1.3.4-1/png/pngwrite.c **** png_write_image_16bit(png_voidp argument)
1743:fltk-1.3.4-1/png/pngwrite.c **** {
1744:fltk-1.3.4-1/png/pngwrite.c ****    png_image_write_control *display = png_voidcast(png_image_write_control*,
1745:fltk-1.3.4-1/png/pngwrite.c ****       argument);
1746:fltk-1.3.4-1/png/pngwrite.c ****    png_imagep image = display->image;
1747:fltk-1.3.4-1/png/pngwrite.c ****    png_structrp png_ptr = image->opaque->png_ptr;
1748:fltk-1.3.4-1/png/pngwrite.c **** 
1749:fltk-1.3.4-1/png/pngwrite.c ****    png_const_uint_16p input_row = png_voidcast(png_const_uint_16p,
1750:fltk-1.3.4-1/png/pngwrite.c ****       display->first_row);
1751:fltk-1.3.4-1/png/pngwrite.c ****    png_uint_16p output_row = png_voidcast(png_uint_16p, display->local_row);
1752:fltk-1.3.4-1/png/pngwrite.c ****    png_uint_16p row_end;
1753:fltk-1.3.4-1/png/pngwrite.c ****    const int channels = (image->format & PNG_FORMAT_FLAG_COLOR) != 0 ? 3 : 1;
1754:fltk-1.3.4-1/png/pngwrite.c ****    int aindex = 0;
1755:fltk-1.3.4-1/png/pngwrite.c ****    png_uint_32 y = image->height;
1756:fltk-1.3.4-1/png/pngwrite.c **** 
1757:fltk-1.3.4-1/png/pngwrite.c ****    if ((image->format & PNG_FORMAT_FLAG_ALPHA) != 0)
1758:fltk-1.3.4-1/png/pngwrite.c ****    {
1759:fltk-1.3.4-1/png/pngwrite.c **** #     ifdef PNG_SIMPLIFIED_WRITE_AFIRST_SUPPORTED
1760:fltk-1.3.4-1/png/pngwrite.c ****          if ((image->format & PNG_FORMAT_FLAG_AFIRST) != 0)
1761:fltk-1.3.4-1/png/pngwrite.c ****          {
1762:fltk-1.3.4-1/png/pngwrite.c ****             aindex = -1;
1763:fltk-1.3.4-1/png/pngwrite.c ****             ++input_row; /* To point to the first component */
1764:fltk-1.3.4-1/png/pngwrite.c ****             ++output_row;
1765:fltk-1.3.4-1/png/pngwrite.c ****          }
1766:fltk-1.3.4-1/png/pngwrite.c **** 
1767:fltk-1.3.4-1/png/pngwrite.c ****          else
1768:fltk-1.3.4-1/png/pngwrite.c **** #     endif
1769:fltk-1.3.4-1/png/pngwrite.c ****          aindex = channels;
1770:fltk-1.3.4-1/png/pngwrite.c ****    }
1771:fltk-1.3.4-1/png/pngwrite.c **** 
1772:fltk-1.3.4-1/png/pngwrite.c ****    else
1773:fltk-1.3.4-1/png/pngwrite.c ****       png_error(png_ptr, "png_write_image: internal call error");
1774:fltk-1.3.4-1/png/pngwrite.c **** 
1775:fltk-1.3.4-1/png/pngwrite.c ****    /* Work out the output row end and count over this, note that the increment
1776:fltk-1.3.4-1/png/pngwrite.c ****     * above to 'row' means that row_end can actually be beyond the end of the
1777:fltk-1.3.4-1/png/pngwrite.c ****     * row; this is correct.
1778:fltk-1.3.4-1/png/pngwrite.c ****     */
1779:fltk-1.3.4-1/png/pngwrite.c ****    row_end = output_row + image->width * (channels+1);
1780:fltk-1.3.4-1/png/pngwrite.c **** 
1781:fltk-1.3.4-1/png/pngwrite.c ****    while (y-- > 0)
1782:fltk-1.3.4-1/png/pngwrite.c ****    {
1783:fltk-1.3.4-1/png/pngwrite.c ****       png_const_uint_16p in_ptr = input_row;
1784:fltk-1.3.4-1/png/pngwrite.c ****       png_uint_16p out_ptr = output_row;
1785:fltk-1.3.4-1/png/pngwrite.c **** 
1786:fltk-1.3.4-1/png/pngwrite.c ****       while (out_ptr < row_end)
1787:fltk-1.3.4-1/png/pngwrite.c ****       {
1788:fltk-1.3.4-1/png/pngwrite.c ****          const png_uint_16 alpha = in_ptr[aindex];
1789:fltk-1.3.4-1/png/pngwrite.c ****          png_uint_32 reciprocal = 0;
1790:fltk-1.3.4-1/png/pngwrite.c ****          int c;
1791:fltk-1.3.4-1/png/pngwrite.c **** 
1792:fltk-1.3.4-1/png/pngwrite.c ****          out_ptr[aindex] = alpha;
1793:fltk-1.3.4-1/png/pngwrite.c **** 
1794:fltk-1.3.4-1/png/pngwrite.c ****          /* Calculate a reciprocal.  The correct calculation is simply
1795:fltk-1.3.4-1/png/pngwrite.c ****           * component/alpha*65535 << 15. (I.e. 15 bits of precision); this
1796:fltk-1.3.4-1/png/pngwrite.c ****           * allows correct rounding by adding .5 before the shift.  'reciprocal'
1797:fltk-1.3.4-1/png/pngwrite.c ****           * is only initialized when required.
1798:fltk-1.3.4-1/png/pngwrite.c ****           */
1799:fltk-1.3.4-1/png/pngwrite.c ****          if (alpha > 0 && alpha < 65535)
1800:fltk-1.3.4-1/png/pngwrite.c ****             reciprocal = ((0xffff<<15)+(alpha>>1))/alpha;
1801:fltk-1.3.4-1/png/pngwrite.c **** 
1802:fltk-1.3.4-1/png/pngwrite.c ****          c = channels;
1803:fltk-1.3.4-1/png/pngwrite.c ****          do /* always at least one channel */
1804:fltk-1.3.4-1/png/pngwrite.c ****          {
1805:fltk-1.3.4-1/png/pngwrite.c ****             png_uint_16 component = *in_ptr++;
1806:fltk-1.3.4-1/png/pngwrite.c **** 
1807:fltk-1.3.4-1/png/pngwrite.c ****             /* The following gives 65535 for an alpha of 0, which is fine,
1808:fltk-1.3.4-1/png/pngwrite.c ****              * otherwise if 0/0 is represented as some other value there is more
1809:fltk-1.3.4-1/png/pngwrite.c ****              * likely to be a discontinuity which will probably damage
1810:fltk-1.3.4-1/png/pngwrite.c ****              * compression when moving from a fully transparent area to a
1811:fltk-1.3.4-1/png/pngwrite.c ****              * nearly transparent one.  (The assumption here is that opaque
1812:fltk-1.3.4-1/png/pngwrite.c ****              * areas tend not to be 0 intensity.)
1813:fltk-1.3.4-1/png/pngwrite.c ****              */
1814:fltk-1.3.4-1/png/pngwrite.c ****             if (component >= alpha)
1815:fltk-1.3.4-1/png/pngwrite.c ****                component = 65535;
1816:fltk-1.3.4-1/png/pngwrite.c **** 
1817:fltk-1.3.4-1/png/pngwrite.c ****             /* component<alpha, so component/alpha is less than one and
1818:fltk-1.3.4-1/png/pngwrite.c ****              * component*reciprocal is less than 2^31.
1819:fltk-1.3.4-1/png/pngwrite.c ****              */
1820:fltk-1.3.4-1/png/pngwrite.c ****             else if (component > 0 && alpha < 65535)
1821:fltk-1.3.4-1/png/pngwrite.c ****             {
1822:fltk-1.3.4-1/png/pngwrite.c ****                png_uint_32 calc = component * reciprocal;
1823:fltk-1.3.4-1/png/pngwrite.c ****                calc += 16384; /* round to nearest */
1824:fltk-1.3.4-1/png/pngwrite.c ****                component = (png_uint_16)(calc >> 15);
1825:fltk-1.3.4-1/png/pngwrite.c ****             }
1826:fltk-1.3.4-1/png/pngwrite.c **** 
1827:fltk-1.3.4-1/png/pngwrite.c ****             *out_ptr++ = component;
1828:fltk-1.3.4-1/png/pngwrite.c ****          }
1829:fltk-1.3.4-1/png/pngwrite.c ****          while (--c > 0);
1830:fltk-1.3.4-1/png/pngwrite.c **** 
1831:fltk-1.3.4-1/png/pngwrite.c ****          /* Skip to next component (skip the intervening alpha channel) */
1832:fltk-1.3.4-1/png/pngwrite.c ****          ++in_ptr;
1833:fltk-1.3.4-1/png/pngwrite.c ****          ++out_ptr;
1834:fltk-1.3.4-1/png/pngwrite.c ****       }
1835:fltk-1.3.4-1/png/pngwrite.c **** 
1836:fltk-1.3.4-1/png/pngwrite.c ****       png_write_row(png_ptr, png_voidcast(png_const_bytep, display->local_row));
1837:fltk-1.3.4-1/png/pngwrite.c ****       input_row += display->row_bytes/(sizeof (png_uint_16));
1838:fltk-1.3.4-1/png/pngwrite.c ****    }
1839:fltk-1.3.4-1/png/pngwrite.c **** 
1840:fltk-1.3.4-1/png/pngwrite.c ****    return 1;
1841:fltk-1.3.4-1/png/pngwrite.c **** }
1842:fltk-1.3.4-1/png/pngwrite.c **** 
1843:fltk-1.3.4-1/png/pngwrite.c **** /* Given 16-bit input (1 to 4 channels) write 8-bit output.  If an alpha channel
1844:fltk-1.3.4-1/png/pngwrite.c ****  * is present it must be removed from the components, the components are then
1845:fltk-1.3.4-1/png/pngwrite.c ****  * written in sRGB encoding.  No components are added or removed.
1846:fltk-1.3.4-1/png/pngwrite.c ****  *
1847:fltk-1.3.4-1/png/pngwrite.c ****  * Calculate an alpha reciprocal to reverse pre-multiplication.  As above the
1848:fltk-1.3.4-1/png/pngwrite.c ****  * calculation can be done to 15 bits of accuracy; however, the output needs to
1849:fltk-1.3.4-1/png/pngwrite.c ****  * be scaled in the range 0..255*65535, so include that scaling here.
1850:fltk-1.3.4-1/png/pngwrite.c ****  */
1851:fltk-1.3.4-1/png/pngwrite.c **** #define UNP_RECIPROCAL(alpha) ((((0xffff*0xff)<<7)+(alpha>>1))/alpha)
1852:fltk-1.3.4-1/png/pngwrite.c **** 
1853:fltk-1.3.4-1/png/pngwrite.c **** static png_byte
1854:fltk-1.3.4-1/png/pngwrite.c **** png_unpremultiply(png_uint_32 component, png_uint_32 alpha,
 101              		.loc 1 1854 0
 102              		.cfi_startproc
 103              	.LVL9:
1855:fltk-1.3.4-1/png/pngwrite.c ****    png_uint_32 reciprocal/*from the above macro*/)
1856:fltk-1.3.4-1/png/pngwrite.c **** {
1857:fltk-1.3.4-1/png/pngwrite.c ****    /* The following gives 1.0 for an alpha of 0, which is fine, otherwise if 0/0
1858:fltk-1.3.4-1/png/pngwrite.c ****     * is represented as some other value there is more likely to be a
1859:fltk-1.3.4-1/png/pngwrite.c ****     * discontinuity which will probably damage compression when moving from a
1860:fltk-1.3.4-1/png/pngwrite.c ****     * fully transparent area to a nearly transparent one.  (The assumption here
1861:fltk-1.3.4-1/png/pngwrite.c ****     * is that opaque areas tend not to be 0 intensity.)
1862:fltk-1.3.4-1/png/pngwrite.c ****     *
1863:fltk-1.3.4-1/png/pngwrite.c ****     * There is a rounding problem here; if alpha is less than 128 it will end up
1864:fltk-1.3.4-1/png/pngwrite.c ****     * as 0 when scaled to 8 bits.  To avoid introducing spurious colors into the
1865:fltk-1.3.4-1/png/pngwrite.c ****     * output change for this too.
1866:fltk-1.3.4-1/png/pngwrite.c ****     */
1867:fltk-1.3.4-1/png/pngwrite.c ****    if (component >= alpha || alpha < 128)
1868:fltk-1.3.4-1/png/pngwrite.c ****       return 255;
1869:fltk-1.3.4-1/png/pngwrite.c **** 
1870:fltk-1.3.4-1/png/pngwrite.c ****    /* component<alpha, so component/alpha is less than one and
1871:fltk-1.3.4-1/png/pngwrite.c ****     * component*reciprocal is less than 2^31.
1872:fltk-1.3.4-1/png/pngwrite.c ****     */
1873:fltk-1.3.4-1/png/pngwrite.c ****    else if (component > 0)
1874:fltk-1.3.4-1/png/pngwrite.c ****    {
1875:fltk-1.3.4-1/png/pngwrite.c ****       /* The test is that alpha/257 (rounded) is less than 255, the first value
1876:fltk-1.3.4-1/png/pngwrite.c ****        * that becomes 255 is 65407.
1877:fltk-1.3.4-1/png/pngwrite.c ****        * NOTE: this must agree with the PNG_DIV257 macro (which must, therefore,
1878:fltk-1.3.4-1/png/pngwrite.c ****        * be exact!)  [Could also test reciprocal != 0]
1879:fltk-1.3.4-1/png/pngwrite.c ****        */
1880:fltk-1.3.4-1/png/pngwrite.c ****       if (alpha < 65407)
 104              		.loc 1 1880 0
 105 0000 81FE7EFF 		cmpl	$65406, %esi
 105      0000
 106 0006 7738     		ja	.L14
1881:fltk-1.3.4-1/png/pngwrite.c ****       {
1882:fltk-1.3.4-1/png/pngwrite.c ****          component *= reciprocal;
 107              		.loc 1 1882 0
 108 0008 0FAFD7   		imull	%edi, %edx
 109              	.LVL10:
1883:fltk-1.3.4-1/png/pngwrite.c ****          component += 64; /* round to nearest */
 110              		.loc 1 1883 0
 111 000b 83C240   		addl	$64, %edx
 112              	.LVL11:
1884:fltk-1.3.4-1/png/pngwrite.c ****          component >>= 7;
 113              		.loc 1 1884 0
 114 000e C1EA07   		shrl	$7, %edx
 115              	.LVL12:
 116              	.L15:
1885:fltk-1.3.4-1/png/pngwrite.c ****       }
1886:fltk-1.3.4-1/png/pngwrite.c **** 
1887:fltk-1.3.4-1/png/pngwrite.c ****       else
1888:fltk-1.3.4-1/png/pngwrite.c ****          component *= 255;
1889:fltk-1.3.4-1/png/pngwrite.c **** 
1890:fltk-1.3.4-1/png/pngwrite.c ****       /* Convert the component to sRGB. */
1891:fltk-1.3.4-1/png/pngwrite.c ****       return (png_byte)PNG_sRGB_FROM_LINEAR(component);
 117              		.loc 1 1891 0
 118 0011 89D1     		movl	%edx, %ecx
 119 0013 81E2FF7F 		andl	$32767, %edx
 119      0000
 120              	.LVL13:
 121 0019 C1E90F   		shrl	$15, %ecx
 122              	.LVL14:
 123 001c 0FB68100 		movzbl	png_sRGB_delta(%rcx), %eax
 123      000000
 124 0023 0FB78C09 		movzwl	png_sRGB_base(%rcx,%rcx), %ecx
 124      00000000 
 125 002b 0FAFD0   		imull	%eax, %edx
 126 002e C1EA0C   		shrl	$12, %edx
 127 0031 8D040A   		leal	(%rdx,%rcx), %eax
 128 0034 C1E808   		shrl	$8, %eax
1892:fltk-1.3.4-1/png/pngwrite.c ****    }
1893:fltk-1.3.4-1/png/pngwrite.c **** 
1894:fltk-1.3.4-1/png/pngwrite.c ****    else
1895:fltk-1.3.4-1/png/pngwrite.c ****       return 0;
1896:fltk-1.3.4-1/png/pngwrite.c **** }
 129              		.loc 1 1896 0
 130 0037 C3       		ret
 131              	.LVL15:
 132 0038 0F1F8400 		.p2align 4,,10
 132      00000000 
 133              		.p2align 3
 134              	.L14:
1888:fltk-1.3.4-1/png/pngwrite.c **** 
 135              		.loc 1 1888 0
 136 0040 89FA     		movl	%edi, %edx
 137              	.LVL16:
 138 0042 C1E208   		sall	$8, %edx
 139 0045 29FA     		subl	%edi, %edx
 140              	.LVL17:
 141 0047 EBC8     		jmp	.L15
 142              		.cfi_endproc
 143              	.LFE99:
 145              		.section	.text.unlikely.png_unpremultiply.part.1
 146              	.LCOLDE1:
 147              		.section	.text.png_unpremultiply.part.1
 148              	.LHOTE1:
 149              		.section	.rodata.str1.8,"aMS",@progbits,1
 150              		.align 8
 151              	.LC2:
 152 0000 57726974 		.string	"Writing zero-length unknown chunk"
 152      696E6720 
 152      7A65726F 
 152      2D6C656E 
 152      67746820 
 153              		.section	.text.unlikely.write_unknown_chunks.isra.2.part.3,"ax",@progbits
 154              	.LCOLDB3:
 155              		.section	.text.write_unknown_chunks.isra.2.part.3,"ax",@progbits
 156              	.LHOTB3:
 157              		.p2align 4,,15
 159              	write_unknown_chunks.isra.2.part.3:
 160              	.LFB101:
  24:fltk-1.3.4-1/png/pngwrite.c ****    unsigned int where)
 161              		.loc 1 24 0
 162              		.cfi_startproc
 163              	.LVL18:
 164 0000 4156     		pushq	%r14
 165              		.cfi_def_cfa_offset 16
 166              		.cfi_offset 14, -16
 167 0002 4155     		pushq	%r13
 168              		.cfi_def_cfa_offset 24
 169              		.cfi_offset 13, -24
 170 0004 4154     		pushq	%r12
 171              		.cfi_def_cfa_offset 32
 172              		.cfi_offset 12, -32
 173 0006 4989D4   		movq	%rdx, %r12
 174 0009 55       		pushq	%rbp
 175              		.cfi_def_cfa_offset 40
 176              		.cfi_offset 6, -40
 177              	.LBB104:
  33:fltk-1.3.4-1/png/pngwrite.c ****            up < info_ptr->unknown_chunks + info_ptr->unknown_chunks_num;
 178              		.loc 1 33 0
 179 000a 49630424 		movslq	(%r12), %rax
 180              	.LBE104:
  24:fltk-1.3.4-1/png/pngwrite.c ****    unsigned int where)
 181              		.loc 1 24 0
 182 000e 53       		pushq	%rbx
 183              		.cfi_def_cfa_offset 48
 184              		.cfi_offset 3, -48
  24:fltk-1.3.4-1/png/pngwrite.c ****    unsigned int where)
 185              		.loc 1 24 0
 186 000f 89CB     		movl	%ecx, %ebx
 187              	.LBB107:
  33:fltk-1.3.4-1/png/pngwrite.c ****            up < info_ptr->unknown_chunks + info_ptr->unknown_chunks_num;
 188              		.loc 1 33 0
 189 0011 488B16   		movq	(%rsi), %rdx
 190              	.LVL19:
 191 0014 4889C1   		movq	%rax, %rcx
 192              	.LVL20:
 193 0017 48C1E005 		salq	$5, %rax
 194 001b 4801D0   		addq	%rdx, %rax
 195 001e 4839C2   		cmpq	%rax, %rdx
 196 0021 0F839100 		jnb	.L16
 196      0000
 197 0027 4889FD   		movq	%rdi, %rbp
 198 002a 4989F5   		movq	%rsi, %r13
 199 002d 4989D6   		movq	%rdx, %r14
 200 0030 EB19     		jmp	.L29
 201              	.LVL21:
 202              		.p2align 4,,10
 203 0032 660F1F44 		.p2align 3
 203      0000
 204              	.L19:
 205 0038 4863C1   		movslq	%ecx, %rax
  35:fltk-1.3.4-1/png/pngwrite.c ****          if ((up->location & where) != 0)
 206              		.loc 1 35 0
 207 003b 4983C620 		addq	$32, %r14
 208              	.LVL22:
  33:fltk-1.3.4-1/png/pngwrite.c ****            up < info_ptr->unknown_chunks + info_ptr->unknown_chunks_num;
 209              		.loc 1 33 0
 210 003f 48C1E005 		salq	$5, %rax
 211 0043 4801D0   		addq	%rdx, %rax
 212 0046 4939C6   		cmpq	%rax, %r14
 213 0049 736D     		jnb	.L16
 214              	.L29:
  36:fltk-1.3.4-1/png/pngwrite.c ****       {
 215              		.loc 1 36 0
 216 004b 410FB646 		movzbl	24(%r14), %eax
 216      18
 217 0050 85D8     		testl	%ebx, %eax
 218 0052 74E4     		je	.L19
 219              	.LBB105:
  42:fltk-1.3.4-1/png/pngwrite.c **** 
 220              		.loc 1 42 0
 221 0054 4C89F6   		movq	%r14, %rsi
 222 0057 4889EF   		movq	%rbp, %rdi
 223 005a E8000000 		call	png_handle_as_unknown
 223      00
 224              	.LVL23:
  56:fltk-1.3.4-1/png/pngwrite.c ****              ((up->name[3] & 0x20) /* safe-to-copy overrides everything */ ||
 225              		.loc 1 56 0
 226 005f 83F801   		cmpl	$1, %eax
 227 0062 741C     		je	.L34
  57:fltk-1.3.4-1/png/pngwrite.c ****               keep == PNG_HANDLE_CHUNK_ALWAYS ||
 228              		.loc 1 57 0
 229 0064 41F64603 		testb	$32, 3(%r14)
 229      20
 230 0069 7525     		jne	.L21
 231 006b 83F803   		cmpl	$3, %eax
 232 006e 7420     		je	.L21
  58:fltk-1.3.4-1/png/pngwrite.c ****               (keep == PNG_HANDLE_CHUNK_AS_DEFAULT &&
 233              		.loc 1 58 0
 234 0070 85C0     		testl	%eax, %eax
 235 0072 750C     		jne	.L34
  59:fltk-1.3.4-1/png/pngwrite.c ****                png_ptr->unknown_default == PNG_HANDLE_CHUNK_ALWAYS)))
 236              		.loc 1 59 0
 237 0074 83BD0004 		cmpl	$3, 1024(%rbp)
 237      000003
 238 007b 7413     		je	.L21
 239 007d 0F1F00   		.p2align 4,,10
 240              		.p2align 3
 241              	.L34:
 242 0080 498B5500 		movq	0(%r13), %rdx
 243 0084 418B0C24 		movl	(%r12), %ecx
 244 0088 EBAE     		jmp	.L19
 245 008a 660F1F44 		.p2align 4,,10
 245      0000
 246              		.p2align 3
 247              	.L21:
  64:fltk-1.3.4-1/png/pngwrite.c ****                png_warning(png_ptr, "Writing zero-length unknown chunk");
 248              		.loc 1 64 0
 249 0090 498B4E10 		movq	16(%r14), %rcx
 250 0094 4885C9   		testq	%rcx, %rcx
 251 0097 742F     		je	.L35
 252              	.LVL24:
 253              	.L22:
  67:fltk-1.3.4-1/png/pngwrite.c ****          }
 254              		.loc 1 67 0
 255 0099 498B5608 		movq	8(%r14), %rdx
 256 009d 4C89F6   		movq	%r14, %rsi
 257 00a0 4889EF   		movq	%rbp, %rdi
 258 00a3 E8000000 		call	png_write_chunk
 258      00
 259              	.LVL25:
 260 00a8 498B5500 		movq	0(%r13), %rdx
 261 00ac 418B0C24 		movl	(%r12), %ecx
 262 00b0 EB86     		jmp	.L19
 263              	.LVL26:
 264              		.p2align 4,,10
 265 00b2 660F1F44 		.p2align 3
 265      0000
 266              	.L16:
 267              	.LBE105:
 268              	.LBE107:
  71:fltk-1.3.4-1/png/pngwrite.c **** #endif /* WRITE_UNKNOWN_CHUNKS */
 269              		.loc 1 71 0
 270 00b8 5B       		popq	%rbx
 271              		.cfi_remember_state
 272              		.cfi_def_cfa_offset 40
 273              	.LVL27:
 274 00b9 5D       		popq	%rbp
 275              		.cfi_def_cfa_offset 32
 276 00ba 415C     		popq	%r12
 277              		.cfi_def_cfa_offset 24
 278 00bc 415D     		popq	%r13
 279              		.cfi_def_cfa_offset 16
 280 00be 415E     		popq	%r14
 281              		.cfi_def_cfa_offset 8
 282 00c0 C3       		ret
 283              	.LVL28:
 284              		.p2align 4,,10
 285 00c1 0F1F8000 		.p2align 3
 285      000000
 286              	.L35:
 287              		.cfi_restore_state
 288              	.LBB108:
 289              	.LBB106:
  65:fltk-1.3.4-1/png/pngwrite.c **** 
 290              		.loc 1 65 0
 291 00c8 BE000000 		movl	$.LC2, %esi
 291      00
 292 00cd 4889EF   		movq	%rbp, %rdi
 293 00d0 E8000000 		call	png_warning
 293      00
 294              	.LVL29:
 295 00d5 498B4E10 		movq	16(%r14), %rcx
 296 00d9 EBBE     		jmp	.L22
 297              	.LBE106:
 298              	.LBE108:
 299              		.cfi_endproc
 300              	.LFE101:
 302              		.section	.text.unlikely.write_unknown_chunks.isra.2.part.3
 303              	.LCOLDE3:
 304              		.section	.text.write_unknown_chunks.isra.2.part.3
 305              	.LHOTE3:
 306              		.section	.rodata.str1.8
 307 0022 00000000 		.align 8
 307      0000
 308              	.LC4:
 309 0028 556E6B6E 		.string	"Unknown filter heuristic method"
 309      6F776E20 
 309      66696C74 
 309      65722068 
 309      65757269 
 310              		.section	.text.unlikely.png_init_filter_heuristics,"ax",@progbits
 311              	.LCOLDB5:
 312              		.section	.text.png_init_filter_heuristics,"ax",@progbits
 313              	.LHOTB5:
 314              		.p2align 4,,15
 316              	png_init_filter_heuristics:
 317              	.LFB74:
1174:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
 318              		.loc 1 1174 0
 319              		.cfi_startproc
 320              	.LVL30:
1176:fltk-1.3.4-1/png/pngwrite.c **** 
 321              		.loc 1 1176 0
 322 0000 31C0     		xorl	%eax, %eax
1175:fltk-1.3.4-1/png/pngwrite.c ****       return 0;
 323              		.loc 1 1175 0
 324 0002 4885FF   		testq	%rdi, %rdi
 325 0005 7435     		je	.L53
1174:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
 326              		.loc 1 1174 0
 327 0007 4154     		pushq	%r12
 328              		.cfi_def_cfa_offset 16
 329              		.cfi_offset 12, -16
 330 0009 55       		pushq	%rbp
 331              		.cfi_def_cfa_offset 24
 332              		.cfi_offset 6, -24
 333 000a 4189F4   		movl	%esi, %r12d
 334 000d 53       		pushq	%rbx
 335              		.cfi_def_cfa_offset 32
 336              		.cfi_offset 3, -32
 337 000e 89D5     		movl	%edx, %ebp
 338 0010 4889FB   		movq	%rdi, %rbx
1179:fltk-1.3.4-1/png/pngwrite.c **** 
 339              		.loc 1 1179 0
 340 0013 E8000000 		call	png_reset_filter_heuristics
 340      00
 341              	.LVL31:
1185:fltk-1.3.4-1/png/pngwrite.c ****    {
 342              		.loc 1 1185 0
 343 0018 4183FC02 		cmpl	$2, %r12d
 344 001c 7422     		je	.L54
1240:fltk-1.3.4-1/png/pngwrite.c ****       heuristic_method == PNG_FILTER_HEURISTIC_UNWEIGHTED)
 345              		.loc 1 1240 0
 346 001e 4183FC01 		cmpl	$1, %r12d
1243:fltk-1.3.4-1/png/pngwrite.c ****    }
 347              		.loc 1 1243 0
 348 0022 B8010000 		movl	$1, %eax
 348      00
1240:fltk-1.3.4-1/png/pngwrite.c ****       heuristic_method == PNG_FILTER_HEURISTIC_UNWEIGHTED)
 349              		.loc 1 1240 0
 350 0027 760F     		jbe	.L37
1247:fltk-1.3.4-1/png/pngwrite.c ****       return 0;
 351              		.loc 1 1247 0
 352 0029 BE000000 		movl	$.LC4, %esi
 352      00
 353 002e 4889DF   		movq	%rbx, %rdi
 354 0031 E8000000 		call	png_warning
 354      00
 355              	.LVL32:
1248:fltk-1.3.4-1/png/pngwrite.c ****    }
 356              		.loc 1 1248 0
 357 0036 31C0     		xorl	%eax, %eax
 358              	.L37:
1250:fltk-1.3.4-1/png/pngwrite.c **** 
 359              		.loc 1 1250 0
 360 0038 5B       		popq	%rbx
 361              		.cfi_restore 3
 362              		.cfi_def_cfa_offset 24
 363              	.LVL33:
 364 0039 5D       		popq	%rbp
 365              		.cfi_restore 6
 366              		.cfi_def_cfa_offset 16
 367              	.LVL34:
 368 003a 415C     		popq	%r12
 369              		.cfi_restore 12
 370              		.cfi_def_cfa_offset 8
 371              	.LVL35:
 372              	.L53:
 373 003c F3C3     		rep ret
 374              	.LVL36:
 375 003e 6690     		.p2align 4,,10
 376              		.p2align 3
 377              	.L54:
 378              		.cfi_def_cfa_offset 32
 379              		.cfi_offset 3, -32
 380              		.cfi_offset 6, -24
 381              		.cfi_offset 12, -16
 382              	.LBB112:
 383              	.LBB113:
1189:fltk-1.3.4-1/png/pngwrite.c ****       {
 384              		.loc 1 1189 0
 385 0040 85ED     		testl	%ebp, %ebp
 386 0042 0F8E9C00 		jle	.L39
 386      0000
1191:fltk-1.3.4-1/png/pngwrite.c ****              (png_uint_32)((sizeof (png_byte)) * num_weights));
 387              		.loc 1 1191 0
 388 0048 4863F5   		movslq	%ebp, %rsi
 389 004b 4889DF   		movq	%rbx, %rdi
 390 004e E8000000 		call	png_malloc
 390      00
 391              	.LVL37:
 392 0053 31C9     		xorl	%ecx, %ecx
 393 0055 488983A0 		movq	%rax, 928(%rbx)
 393      030000
 394              	.LVL38:
 395 005c EB09     		jmp	.L41
 396              	.LVL39:
 397 005e 6690     		.p2align 4,,10
 398              		.p2align 3
 399              	.L55:
 400 0060 488B83A0 		movq	928(%rbx), %rax
 400      030000
 401              	.L41:
 402              	.LVL40:
1197:fltk-1.3.4-1/png/pngwrite.c ****          }
 403              		.loc 1 1197 0
 404 0067 C60408FF 		movb	$-1, (%rax,%rcx)
 405              	.LVL41:
 406 006b 4883C101 		addq	$1, %rcx
 407              	.LVL42:
1195:fltk-1.3.4-1/png/pngwrite.c ****          {
 408              		.loc 1 1195 0
 409 006f 39CD     		cmpl	%ecx, %ebp
 410 0071 7FED     		jg	.L55
1200:fltk-1.3.4-1/png/pngwrite.c ****              (png_uint_32)((sizeof (png_uint_16)) * num_weights));
 411              		.loc 1 1200 0
 412 0073 448D642D 		leal	(%rbp,%rbp), %r12d
 412      00
 413              	.LVL43:
 414 0078 4889DF   		movq	%rbx, %rdi
 415 007b 4C89E6   		movq	%r12, %rsi
 416 007e E8000000 		call	png_malloc
 416      00
 417              	.LVL44:
1203:fltk-1.3.4-1/png/pngwrite.c ****              (png_uint_32)((sizeof (png_uint_16)) * num_weights));
 418              		.loc 1 1203 0
 419 0083 4C89E6   		movq	%r12, %rsi
1200:fltk-1.3.4-1/png/pngwrite.c ****              (png_uint_32)((sizeof (png_uint_16)) * num_weights));
 420              		.loc 1 1200 0
 421 0086 488983A8 		movq	%rax, 936(%rbx)
 421      030000
1203:fltk-1.3.4-1/png/pngwrite.c ****              (png_uint_32)((sizeof (png_uint_16)) * num_weights));
 422              		.loc 1 1203 0
 423 008d 4889DF   		movq	%rbx, %rdi
 424 0090 E8000000 		call	png_malloc
 424      00
 425              	.LVL45:
 426 0095 8D75FF   		leal	-1(%rbp), %esi
 427 0098 488983B0 		movq	%rax, 944(%rbx)
 427      030000
 428              	.LVL46:
 429 009f 31C9     		xorl	%ecx, %ecx
 430 00a1 4801F6   		addq	%rsi, %rsi
 431 00a4 EB15     		jmp	.L43
 432              	.LVL47:
 433 00a6 662E0F1F 		.p2align 4,,10
 433      84000000 
 433      0000
 434              		.p2align 3
 435              	.L56:
 436 00b0 488B83B0 		movq	944(%rbx), %rax
 436      030000
 437 00b7 4883C102 		addq	$2, %rcx
 438              	.L43:
1209:fltk-1.3.4-1/png/pngwrite.c ****          }
 439              		.loc 1 1209 0
 440 00bb 488B93A8 		movq	936(%rbx), %rdx
 440      030000
 441 00c2 41B80001 		movl	$256, %r8d
 441      0000
1208:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->filter_weights[i] = PNG_WEIGHT_FACTOR;
 442              		.loc 1 1208 0
 443 00c8 41B90001 		movl	$256, %r9d
 443      0000
1206:fltk-1.3.4-1/png/pngwrite.c ****          {
 444              		.loc 1 1206 0
 445 00ce 4839CE   		cmpq	%rcx, %rsi
1209:fltk-1.3.4-1/png/pngwrite.c ****          }
 446              		.loc 1 1209 0
 447 00d1 66448904 		movw	%r8w, (%rdx,%rcx)
 447      0A
1208:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->filter_weights[i] = PNG_WEIGHT_FACTOR;
 448              		.loc 1 1208 0
 449 00d6 6644890C 		movw	%r9w, (%rax,%rcx)
 449      08
1206:fltk-1.3.4-1/png/pngwrite.c ****          {
 450              		.loc 1 1206 0
 451 00db 75D3     		jne	.L56
1213:fltk-1.3.4-1/png/pngwrite.c ****       }
 452              		.loc 1 1213 0
 453 00dd 4088AB99 		movb	%bpl, 921(%rbx)
 453      030000
 454              	.L39:
1219:fltk-1.3.4-1/png/pngwrite.c ****       {
 455              		.loc 1 1219 0
 456 00e4 488B8BB8 		movq	952(%rbx), %rcx
 456      030000
 457 00eb 4885C9   		testq	%rcx, %rcx
 458 00ee 7450     		je	.L44
 459 00f0 488B83C0 		movq	960(%rbx), %rax
 459      030000
 460              	.L45:
 461              	.LVL48:
1224:fltk-1.3.4-1/png/pngwrite.c ****              (png_uint_32)((sizeof (png_uint_16)) * PNG_FILTER_VALUE_LAST));
 462              		.loc 1 1224 0
 463 00f7 31D2     		xorl	%edx, %edx
 464              	.LVL49:
 465              	.L47:
1231:fltk-1.3.4-1/png/pngwrite.c ****       }
 466              		.loc 1 1231 0
 467 00f9 BE080000 		movl	$8, %esi
 467      00
1230:fltk-1.3.4-1/png/pngwrite.c ****          png_ptr->filter_costs[i] = PNG_COST_FACTOR;
 468              		.loc 1 1230 0
 469 00fe BF080000 		movl	$8, %edi
 469      00
1231:fltk-1.3.4-1/png/pngwrite.c ****       }
 470              		.loc 1 1231 0
 471 0103 66893411 		movw	%si, (%rcx,%rdx)
1230:fltk-1.3.4-1/png/pngwrite.c ****          png_ptr->filter_costs[i] = PNG_COST_FACTOR;
 472              		.loc 1 1230 0
 473 0107 66893C10 		movw	%di, (%rax,%rdx)
 474 010b 4883C202 		addq	$2, %rdx
1228:fltk-1.3.4-1/png/pngwrite.c ****       {
 475              		.loc 1 1228 0
 476 010f 4883FA0A 		cmpq	$10, %rdx
 477 0113 7413     		je	.L46
 478 0115 488B83C0 		movq	960(%rbx), %rax
 478      030000
 479 011c 488B8BB8 		movq	952(%rbx), %rcx
 479      030000
 480 0123 EBD4     		jmp	.L47
 481              		.p2align 4,,10
 482 0125 0F1F00   		.p2align 3
 483              	.L46:
1235:fltk-1.3.4-1/png/pngwrite.c **** 
 484              		.loc 1 1235 0
 485 0128 C6839803 		movb	$2, 920(%rbx)
 485      000002
 486              	.LVL50:
 487 012f B8010000 		movl	$1, %eax
 487      00
 488              	.LBE113:
 489              	.LBE112:
1250:fltk-1.3.4-1/png/pngwrite.c **** 
 490              		.loc 1 1250 0
 491 0134 5B       		popq	%rbx
 492              		.cfi_remember_state
 493              		.cfi_restore 3
 494              		.cfi_def_cfa_offset 24
 495              	.LVL51:
 496 0135 5D       		popq	%rbp
 497              		.cfi_restore 6
 498              		.cfi_def_cfa_offset 16
 499              	.LVL52:
 500 0136 415C     		popq	%r12
 501              		.cfi_restore 12
 502              		.cfi_def_cfa_offset 8
 503 0138 E9FFFEFF 		jmp	.L53
 503      FF
 504              	.LVL53:
 505 013d 0F1F00   		.p2align 4,,10
 506              		.p2align 3
 507              	.L44:
 508              		.cfi_restore_state
 509              	.LBB115:
 510              	.LBB114:
1221:fltk-1.3.4-1/png/pngwrite.c ****              (png_uint_32)((sizeof (png_uint_16)) * PNG_FILTER_VALUE_LAST));
 511              		.loc 1 1221 0
 512 0140 BE0A0000 		movl	$10, %esi
 512      00
 513 0145 4889DF   		movq	%rbx, %rdi
 514 0148 E8000000 		call	png_malloc
 514      00
 515              	.LVL54:
1224:fltk-1.3.4-1/png/pngwrite.c ****              (png_uint_32)((sizeof (png_uint_16)) * PNG_FILTER_VALUE_LAST));
 516              		.loc 1 1224 0
 517 014d BE0A0000 		movl	$10, %esi
 517      00
1221:fltk-1.3.4-1/png/pngwrite.c ****              (png_uint_32)((sizeof (png_uint_16)) * PNG_FILTER_VALUE_LAST));
 518              		.loc 1 1221 0
 519 0152 488983B8 		movq	%rax, 952(%rbx)
 519      030000
1224:fltk-1.3.4-1/png/pngwrite.c ****              (png_uint_32)((sizeof (png_uint_16)) * PNG_FILTER_VALUE_LAST));
 520              		.loc 1 1224 0
 521 0159 4889DF   		movq	%rbx, %rdi
 522 015c E8000000 		call	png_malloc
 522      00
 523              	.LVL55:
 524 0161 488B8BB8 		movq	952(%rbx), %rcx
 524      030000
 525 0168 488983C0 		movq	%rax, 960(%rbx)
 525      030000
 526 016f EB86     		jmp	.L45
 527              	.LBE114:
 528              	.LBE115:
 529              		.cfi_endproc
 530              	.LFE74:
 532              		.section	.text.unlikely.png_init_filter_heuristics
 533              	.LCOLDE5:
 534              		.section	.text.png_init_filter_heuristics
 535              	.LHOTE5:
 536              		.section	.text.unlikely.png_image_set_PLTE.isra.5,"ax",@progbits
 537              	.LCOLDB6:
 538              		.section	.text.png_image_set_PLTE.isra.5,"ax",@progbits
 539              	.LHOTB6:
 540              		.p2align 4,,15
 542              	png_image_set_PLTE.isra.5:
 543              	.LFB103:
1897:fltk-1.3.4-1/png/pngwrite.c **** 
1898:fltk-1.3.4-1/png/pngwrite.c **** static int
1899:fltk-1.3.4-1/png/pngwrite.c **** png_write_image_8bit(png_voidp argument)
1900:fltk-1.3.4-1/png/pngwrite.c **** {
1901:fltk-1.3.4-1/png/pngwrite.c ****    png_image_write_control *display = png_voidcast(png_image_write_control*,
1902:fltk-1.3.4-1/png/pngwrite.c ****       argument);
1903:fltk-1.3.4-1/png/pngwrite.c ****    png_imagep image = display->image;
1904:fltk-1.3.4-1/png/pngwrite.c ****    png_structrp png_ptr = image->opaque->png_ptr;
1905:fltk-1.3.4-1/png/pngwrite.c **** 
1906:fltk-1.3.4-1/png/pngwrite.c ****    png_const_uint_16p input_row = png_voidcast(png_const_uint_16p,
1907:fltk-1.3.4-1/png/pngwrite.c ****       display->first_row);
1908:fltk-1.3.4-1/png/pngwrite.c ****    png_bytep output_row = png_voidcast(png_bytep, display->local_row);
1909:fltk-1.3.4-1/png/pngwrite.c ****    png_uint_32 y = image->height;
1910:fltk-1.3.4-1/png/pngwrite.c ****    const int channels = (image->format & PNG_FORMAT_FLAG_COLOR) != 0 ? 3 : 1;
1911:fltk-1.3.4-1/png/pngwrite.c **** 
1912:fltk-1.3.4-1/png/pngwrite.c ****    if ((image->format & PNG_FORMAT_FLAG_ALPHA) != 0)
1913:fltk-1.3.4-1/png/pngwrite.c ****    {
1914:fltk-1.3.4-1/png/pngwrite.c ****       png_bytep row_end;
1915:fltk-1.3.4-1/png/pngwrite.c ****       int aindex;
1916:fltk-1.3.4-1/png/pngwrite.c **** 
1917:fltk-1.3.4-1/png/pngwrite.c **** #     ifdef PNG_SIMPLIFIED_WRITE_AFIRST_SUPPORTED
1918:fltk-1.3.4-1/png/pngwrite.c ****          if ((image->format & PNG_FORMAT_FLAG_AFIRST) != 0)
1919:fltk-1.3.4-1/png/pngwrite.c ****          {
1920:fltk-1.3.4-1/png/pngwrite.c ****             aindex = -1;
1921:fltk-1.3.4-1/png/pngwrite.c ****             ++input_row; /* To point to the first component */
1922:fltk-1.3.4-1/png/pngwrite.c ****             ++output_row;
1923:fltk-1.3.4-1/png/pngwrite.c ****          }
1924:fltk-1.3.4-1/png/pngwrite.c **** 
1925:fltk-1.3.4-1/png/pngwrite.c ****          else
1926:fltk-1.3.4-1/png/pngwrite.c **** #     endif
1927:fltk-1.3.4-1/png/pngwrite.c ****          aindex = channels;
1928:fltk-1.3.4-1/png/pngwrite.c **** 
1929:fltk-1.3.4-1/png/pngwrite.c ****       /* Use row_end in place of a loop counter: */
1930:fltk-1.3.4-1/png/pngwrite.c ****       row_end = output_row + image->width * (channels+1);
1931:fltk-1.3.4-1/png/pngwrite.c **** 
1932:fltk-1.3.4-1/png/pngwrite.c ****       while (y-- > 0)
1933:fltk-1.3.4-1/png/pngwrite.c ****       {
1934:fltk-1.3.4-1/png/pngwrite.c ****          png_const_uint_16p in_ptr = input_row;
1935:fltk-1.3.4-1/png/pngwrite.c ****          png_bytep out_ptr = output_row;
1936:fltk-1.3.4-1/png/pngwrite.c **** 
1937:fltk-1.3.4-1/png/pngwrite.c ****          while (out_ptr < row_end)
1938:fltk-1.3.4-1/png/pngwrite.c ****          {
1939:fltk-1.3.4-1/png/pngwrite.c ****             png_uint_16 alpha = in_ptr[aindex];
1940:fltk-1.3.4-1/png/pngwrite.c ****             png_byte alphabyte = (png_byte)PNG_DIV257(alpha);
1941:fltk-1.3.4-1/png/pngwrite.c ****             png_uint_32 reciprocal = 0;
1942:fltk-1.3.4-1/png/pngwrite.c ****             int c;
1943:fltk-1.3.4-1/png/pngwrite.c **** 
1944:fltk-1.3.4-1/png/pngwrite.c ****             /* Scale and write the alpha channel. */
1945:fltk-1.3.4-1/png/pngwrite.c ****             out_ptr[aindex] = alphabyte;
1946:fltk-1.3.4-1/png/pngwrite.c **** 
1947:fltk-1.3.4-1/png/pngwrite.c ****             if (alphabyte > 0 && alphabyte < 255)
1948:fltk-1.3.4-1/png/pngwrite.c ****                reciprocal = UNP_RECIPROCAL(alpha);
1949:fltk-1.3.4-1/png/pngwrite.c **** 
1950:fltk-1.3.4-1/png/pngwrite.c ****             c = channels;
1951:fltk-1.3.4-1/png/pngwrite.c ****             do /* always at least one channel */
1952:fltk-1.3.4-1/png/pngwrite.c ****                *out_ptr++ = png_unpremultiply(*in_ptr++, alpha, reciprocal);
1953:fltk-1.3.4-1/png/pngwrite.c ****             while (--c > 0);
1954:fltk-1.3.4-1/png/pngwrite.c **** 
1955:fltk-1.3.4-1/png/pngwrite.c ****             /* Skip to next component (skip the intervening alpha channel) */
1956:fltk-1.3.4-1/png/pngwrite.c ****             ++in_ptr;
1957:fltk-1.3.4-1/png/pngwrite.c ****             ++out_ptr;
1958:fltk-1.3.4-1/png/pngwrite.c ****          } /* while out_ptr < row_end */
1959:fltk-1.3.4-1/png/pngwrite.c **** 
1960:fltk-1.3.4-1/png/pngwrite.c ****          png_write_row(png_ptr, png_voidcast(png_const_bytep,
1961:fltk-1.3.4-1/png/pngwrite.c ****             display->local_row));
1962:fltk-1.3.4-1/png/pngwrite.c ****          input_row += display->row_bytes/(sizeof (png_uint_16));
1963:fltk-1.3.4-1/png/pngwrite.c ****       } /* while y */
1964:fltk-1.3.4-1/png/pngwrite.c ****    }
1965:fltk-1.3.4-1/png/pngwrite.c **** 
1966:fltk-1.3.4-1/png/pngwrite.c ****    else
1967:fltk-1.3.4-1/png/pngwrite.c ****    {
1968:fltk-1.3.4-1/png/pngwrite.c ****       /* No alpha channel, so the row_end really is the end of the row and it
1969:fltk-1.3.4-1/png/pngwrite.c ****        * is sufficient to loop over the components one by one.
1970:fltk-1.3.4-1/png/pngwrite.c ****        */
1971:fltk-1.3.4-1/png/pngwrite.c ****       png_bytep row_end = output_row + image->width * channels;
1972:fltk-1.3.4-1/png/pngwrite.c **** 
1973:fltk-1.3.4-1/png/pngwrite.c ****       while (y-- > 0)
1974:fltk-1.3.4-1/png/pngwrite.c ****       {
1975:fltk-1.3.4-1/png/pngwrite.c ****          png_const_uint_16p in_ptr = input_row;
1976:fltk-1.3.4-1/png/pngwrite.c ****          png_bytep out_ptr = output_row;
1977:fltk-1.3.4-1/png/pngwrite.c **** 
1978:fltk-1.3.4-1/png/pngwrite.c ****          while (out_ptr < row_end)
1979:fltk-1.3.4-1/png/pngwrite.c ****          {
1980:fltk-1.3.4-1/png/pngwrite.c ****             png_uint_32 component = *in_ptr++;
1981:fltk-1.3.4-1/png/pngwrite.c **** 
1982:fltk-1.3.4-1/png/pngwrite.c ****             component *= 255;
1983:fltk-1.3.4-1/png/pngwrite.c ****             *out_ptr++ = (png_byte)PNG_sRGB_FROM_LINEAR(component);
1984:fltk-1.3.4-1/png/pngwrite.c ****          }
1985:fltk-1.3.4-1/png/pngwrite.c **** 
1986:fltk-1.3.4-1/png/pngwrite.c ****          png_write_row(png_ptr, output_row);
1987:fltk-1.3.4-1/png/pngwrite.c ****          input_row += display->row_bytes/(sizeof (png_uint_16));
1988:fltk-1.3.4-1/png/pngwrite.c ****       }
1989:fltk-1.3.4-1/png/pngwrite.c ****    }
1990:fltk-1.3.4-1/png/pngwrite.c **** 
1991:fltk-1.3.4-1/png/pngwrite.c ****    return 1;
1992:fltk-1.3.4-1/png/pngwrite.c **** }
1993:fltk-1.3.4-1/png/pngwrite.c **** 
1994:fltk-1.3.4-1/png/pngwrite.c **** static void
1995:fltk-1.3.4-1/png/pngwrite.c **** png_image_set_PLTE(png_image_write_control *display)
 544              		.loc 1 1995 0
 545              		.cfi_startproc
 546 0000 4157     		pushq	%r15
 547              		.cfi_def_cfa_offset 16
 548              		.cfi_offset 15, -16
 549 0002 4156     		pushq	%r14
 550              		.cfi_def_cfa_offset 24
 551              		.cfi_offset 14, -24
 552              	.LBB116:
 553              	.LBB117:
 554              		.file 2 "/usr/include/x86_64-linux-gnu/bits/string3.h"
   1:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* Copyright (C) 2004-2016 Free Software Foundation, Inc.
   2:/usr/include/x86_64-linux-gnu/bits/string3.h ****    This file is part of the GNU C Library.
   3:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   4:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is free software; you can redistribute it and/or
   5:/usr/include/x86_64-linux-gnu/bits/string3.h ****    modify it under the terms of the GNU Lesser General Public
   6:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License as published by the Free Software Foundation; either
   7:/usr/include/x86_64-linux-gnu/bits/string3.h ****    version 2.1 of the License, or (at your option) any later version.
   8:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
   9:/usr/include/x86_64-linux-gnu/bits/string3.h ****    The GNU C Library is distributed in the hope that it will be useful,
  10:/usr/include/x86_64-linux-gnu/bits/string3.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/usr/include/x86_64-linux-gnu/bits/string3.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:/usr/include/x86_64-linux-gnu/bits/string3.h ****    Lesser General Public License for more details.
  13:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  14:/usr/include/x86_64-linux-gnu/bits/string3.h ****    You should have received a copy of the GNU Lesser General Public
  15:/usr/include/x86_64-linux-gnu/bits/string3.h ****    License along with the GNU C Library; if not, see
  16:/usr/include/x86_64-linux-gnu/bits/string3.h ****    <http://www.gnu.org/licenses/>.  */
  17:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  18:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef _STRING_H
  19:/usr/include/x86_64-linux-gnu/bits/string3.h **** # error "Never use <bits/string3.h> directly; include <string.h> instead."
  20:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  21:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  22:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  23:/usr/include/x86_64-linux-gnu/bits/string3.h **** __warndecl (__warn_memset_zero_len,
  24:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	    "memset used with constant zero length parameter; this could be due to transposed parameters")
  25:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  26:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  27:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifndef __cplusplus
  28:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* XXX This is temporarily.  We should not redefine any of the symbols
  29:/usr/include/x86_64-linux-gnu/bits/string3.h ****    and instead integrate the error checking into the original
  30:/usr/include/x86_64-linux-gnu/bits/string3.h ****    definitions.  */
  31:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memcpy
  32:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memmove
  33:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef memset
  34:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcat
  35:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strcpy
  36:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncat
  37:/usr/include/x86_64-linux-gnu/bits/string3.h **** # undef strncpy
  38:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_GNU
  39:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef mempcpy
  40:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef stpcpy
  41:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  42:/usr/include/x86_64-linux-gnu/bits/string3.h **** # ifdef __USE_MISC
  43:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bcopy
  44:/usr/include/x86_64-linux-gnu/bits/string3.h **** #  undef bzero
  45:/usr/include/x86_64-linux-gnu/bits/string3.h **** # endif
  46:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  47:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  48:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  49:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  50:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
  51:/usr/include/x86_64-linux-gnu/bits/string3.h **** 	       size_t __len))
  52:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  53:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  54:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  55:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  56:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  57:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memmove (void *__dest, const void *__src, size_t __len))
  58:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  59:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memmove_chk (__dest, __src, __len, __bos0 (__dest));
  60:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  61:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  62:/usr/include/x86_64-linux-gnu/bits/string3.h **** #ifdef __USE_GNU
  63:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  64:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (mempcpy (void *__restrict __dest, const void *__restrict __src,
  65:/usr/include/x86_64-linux-gnu/bits/string3.h **** 		size_t __len))
  66:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  67:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___mempcpy_chk (__dest, __src, __len, __bos0 (__dest));
  68:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
  69:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  70:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  71:/usr/include/x86_64-linux-gnu/bits/string3.h **** 
  72:/usr/include/x86_64-linux-gnu/bits/string3.h **** /* The first two tests here help to catch a somewhat common problem
  73:/usr/include/x86_64-linux-gnu/bits/string3.h ****    where the second and third parameter are transposed.  This is
  74:/usr/include/x86_64-linux-gnu/bits/string3.h ****    especially problematic if the intended fill value is zero.  In this
  75:/usr/include/x86_64-linux-gnu/bits/string3.h ****    case no work is done at all.  We detect these problems by referring
  76:/usr/include/x86_64-linux-gnu/bits/string3.h ****    non-existing functions.  */
  77:/usr/include/x86_64-linux-gnu/bits/string3.h **** __fortify_function void *
  78:/usr/include/x86_64-linux-gnu/bits/string3.h **** __NTH (memset (void *__dest, int __ch, size_t __len))
  79:/usr/include/x86_64-linux-gnu/bits/string3.h **** {
  80:/usr/include/x86_64-linux-gnu/bits/string3.h ****   /* GCC-5.0 and newer implements these checks in the compiler, so we don't
  81:/usr/include/x86_64-linux-gnu/bits/string3.h ****      need them here.  */
  82:/usr/include/x86_64-linux-gnu/bits/string3.h **** #if !__GNUC_PREREQ (5,0)
  83:/usr/include/x86_64-linux-gnu/bits/string3.h ****   if (__builtin_constant_p (__len) && __len == 0
  84:/usr/include/x86_64-linux-gnu/bits/string3.h ****       && (!__builtin_constant_p (__ch) || __ch != 0))
  85:/usr/include/x86_64-linux-gnu/bits/string3.h ****     {
  86:/usr/include/x86_64-linux-gnu/bits/string3.h ****       __warn_memset_zero_len ();
  87:/usr/include/x86_64-linux-gnu/bits/string3.h ****       return __dest;
  88:/usr/include/x86_64-linux-gnu/bits/string3.h ****     }
  89:/usr/include/x86_64-linux-gnu/bits/string3.h **** #endif
  90:/usr/include/x86_64-linux-gnu/bits/string3.h ****   return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
 555              		.loc 2 90 0
 556 0004 41BA2000 		movl	$32, %r10d
 556      0000
 557              	.LBE117:
 558              	.LBE116:
 559              		.loc 1 1995 0
 560 000a 4155     		pushq	%r13
 561              		.cfi_def_cfa_offset 32
 562              		.cfi_offset 13, -32
 563 000c 4154     		pushq	%r12
 564              		.cfi_def_cfa_offset 40
 565              		.cfi_offset 12, -40
 566              	.LBB123:
 567              	.LBB118:
 568              		.loc 2 90 0
 569 000e 4C89D1   		movq	%r10, %rcx
 570              	.LBE118:
 571              	.LBE123:
 572              		.loc 1 1995 0
 573 0011 55       		pushq	%rbp
 574              		.cfi_def_cfa_offset 48
 575              		.cfi_offset 6, -48
 576 0012 53       		pushq	%rbx
 577              		.cfi_def_cfa_offset 56
 578              		.cfi_offset 3, -56
 579 0013 4881ECA8 		subq	$1192, %rsp
 579      040000
 580              		.cfi_def_cfa_offset 1248
1996:fltk-1.3.4-1/png/pngwrite.c **** {
1997:fltk-1.3.4-1/png/pngwrite.c ****    const png_imagep image = display->image;
1998:fltk-1.3.4-1/png/pngwrite.c ****    const void *cmap = display->colormap;
1999:fltk-1.3.4-1/png/pngwrite.c ****    const int entries = image->colormap_entries > 256 ? 256 :
2000:fltk-1.3.4-1/png/pngwrite.c ****       (int)image->colormap_entries;
2001:fltk-1.3.4-1/png/pngwrite.c **** 
2002:fltk-1.3.4-1/png/pngwrite.c ****    /* NOTE: the caller must check for cmap != NULL and entries != 0 */
2003:fltk-1.3.4-1/png/pngwrite.c ****    const png_uint_32 format = image->format;
 581              		.loc 1 2003 0
 582 001a 8B5F14   		movl	20(%rdi), %ebx
1995:fltk-1.3.4-1/png/pngwrite.c **** {
 583              		.loc 1 1995 0
 584 001d 64488B04 		movq	%fs:40, %rax
 584      25280000 
 584      00
 585 0026 48898424 		movq	%rax, 1176(%rsp)
 585      98040000 
 586 002e 31C0     		xorl	%eax, %eax
 587              	.LVL56:
1999:fltk-1.3.4-1/png/pngwrite.c ****       (int)image->colormap_entries;
 588              		.loc 1 1999 0
 589 0030 817F1C00 		cmpl	$256, 28(%rdi)
 589      010000
 590 0037 B8000100 		movl	$256, %eax
 590      00
1995:fltk-1.3.4-1/png/pngwrite.c **** {
 591              		.loc 1 1995 0
 592 003c 48897C24 		movq	%rdi, 40(%rsp)
 592      28
1999:fltk-1.3.4-1/png/pngwrite.c ****       (int)image->colormap_entries;
 593              		.loc 1 1999 0
 594 0041 0F46471C 		cmovbe	28(%rdi), %eax
2004:fltk-1.3.4-1/png/pngwrite.c ****    const int channels = PNG_IMAGE_SAMPLE_CHANNELS(format);
 595              		.loc 1 2004 0
 596 0045 4189D8   		movl	%ebx, %r8d
 597              	.LBB124:
 598              	.LBB119:
 599              		.loc 2 90 0
 600 0048 488DBC24 		leaq	912(%rsp), %rdi
 600      90030000 
 601              	.LVL57:
 602              	.LBE119:
 603              	.LBE124:
 604              		.loc 1 2004 0
 605 0050 4183E003 		andl	$3, %r8d
2005:fltk-1.3.4-1/png/pngwrite.c **** 
2006:fltk-1.3.4-1/png/pngwrite.c **** #  if defined(PNG_FORMAT_BGR_SUPPORTED) &&\
2007:fltk-1.3.4-1/png/pngwrite.c ****       defined(PNG_SIMPLIFIED_WRITE_AFIRST_SUPPORTED)
2008:fltk-1.3.4-1/png/pngwrite.c ****       const int afirst = (format & PNG_FORMAT_FLAG_AFIRST) != 0 &&
2009:fltk-1.3.4-1/png/pngwrite.c ****          (format & PNG_FORMAT_FLAG_ALPHA) != 0;
2010:fltk-1.3.4-1/png/pngwrite.c **** #  else
2011:fltk-1.3.4-1/png/pngwrite.c **** #     define afirst 0
2012:fltk-1.3.4-1/png/pngwrite.c **** #  endif
2013:fltk-1.3.4-1/png/pngwrite.c **** 
2014:fltk-1.3.4-1/png/pngwrite.c **** #  ifdef PNG_FORMAT_BGR_SUPPORTED
2015:fltk-1.3.4-1/png/pngwrite.c ****       const int bgr = (format & PNG_FORMAT_FLAG_BGR) != 0 ? 2 : 0;
 606              		.loc 1 2015 0
 607 0054 89DA     		movl	%ebx, %edx
1995:fltk-1.3.4-1/png/pngwrite.c **** {
 608              		.loc 1 1995 0
 609 0056 48897424 		movq	%rsi, 8(%rsp)
 609      08
 610              	.LVL58:
1999:fltk-1.3.4-1/png/pngwrite.c ****       (int)image->colormap_entries;
 611              		.loc 1 1999 0
 612 005b 89C5     		movl	%eax, %ebp
 613              	.LVL59:
2008:fltk-1.3.4-1/png/pngwrite.c ****          (format & PNG_FORMAT_FLAG_ALPHA) != 0;
 614              		.loc 1 2008 0
 615 005d 89D8     		movl	%ebx, %eax
 616              	.LVL60:
 617 005f 83E021   		andl	$33, %eax
 618 0062 83F821   		cmpl	$33, %eax
 619 0065 4189C6   		movl	%eax, %r14d
 620 0068 89842488 		movl	%eax, 136(%rsp)
 620      000000
 621              	.LBB125:
 622              	.LBB120:
 623              		.loc 2 90 0
 624 006f 48C7C0FF 		movq	$-1, %rax
 624      FFFFFF
 625              	.LBE120:
 626              	.LBE125:
2008:fltk-1.3.4-1/png/pngwrite.c ****          (format & PNG_FORMAT_FLAG_ALPHA) != 0;
 627              		.loc 1 2008 0
 628 0076 410F94C1 		sete	%r9b
 629              	.LVL61:
 630              		.loc 1 2015 0
 631 007a C1EA03   		shrl	$3, %edx
 632              	.LVL62:
 633              	.LBB126:
 634              	.LBB121:
 635              		.loc 2 90 0
 636 007d F348AB   		rep stosq
 637              	.LBE121:
 638              	.LBE126:
 639              	.LBB127:
 640              	.LBB128:
 641 0080 488DBC24 		leaq	144(%rsp), %rdi
 641      90000000 
 642              	.LBE128:
 643              	.LBE127:
 644              		.loc 1 2015 0
 645 0088 83E202   		andl	$2, %edx
 646              	.LVL63:
2016:fltk-1.3.4-1/png/pngwrite.c **** #  else
2017:fltk-1.3.4-1/png/pngwrite.c **** #     define bgr 0
2018:fltk-1.3.4-1/png/pngwrite.c **** #  endif
2019:fltk-1.3.4-1/png/pngwrite.c **** 
2020:fltk-1.3.4-1/png/pngwrite.c ****    int i, num_trans;
2021:fltk-1.3.4-1/png/pngwrite.c ****    png_color palette[256];
2022:fltk-1.3.4-1/png/pngwrite.c ****    png_byte tRNS[256];
2023:fltk-1.3.4-1/png/pngwrite.c **** 
2024:fltk-1.3.4-1/png/pngwrite.c ****    memset(tRNS, 255, (sizeof tRNS));
2025:fltk-1.3.4-1/png/pngwrite.c ****    memset(palette, 0, (sizeof palette));
2026:fltk-1.3.4-1/png/pngwrite.c **** 
2027:fltk-1.3.4-1/png/pngwrite.c ****    for (i=num_trans=0; i<entries; ++i)
 647              		.loc 1 2027 0
 648 008b 85ED     		testl	%ebp, %ebp
 649              	.LBB130:
 650              	.LBB122:
 651              		.loc 2 90 0
 652 008d 4989CA   		movq	%rcx, %r10
 653              	.LVL64:
 654              	.LBE122:
 655              	.LBE130:
 656              	.LBB131:
 657              	.LBB129:
 658 0090 B9600000 		movl	$96, %ecx
 658      00
 659 0095 4C89D0   		movq	%r10, %rax
 660 0098 F348AB   		rep stosq
 661              	.LVL65:
 662              	.LBE129:
 663              	.LBE131:
 664              		.loc 1 2027 0
 665 009b 0F84EF04 		je	.L59
 665      0000
 666              	.LBB132:
2028:fltk-1.3.4-1/png/pngwrite.c ****    {
2029:fltk-1.3.4-1/png/pngwrite.c ****       /* This gets automatically converted to sRGB with reversal of the
2030:fltk-1.3.4-1/png/pngwrite.c ****        * pre-multiplication if the color-map has an alpha channel.
2031:fltk-1.3.4-1/png/pngwrite.c ****        */
2032:fltk-1.3.4-1/png/pngwrite.c ****       if ((format & PNG_FORMAT_FLAG_LINEAR) != 0)
2033:fltk-1.3.4-1/png/pngwrite.c ****       {
2034:fltk-1.3.4-1/png/pngwrite.c ****          png_const_uint_16p entry = png_voidcast(png_const_uint_16p, cmap);
2035:fltk-1.3.4-1/png/pngwrite.c **** 
2036:fltk-1.3.4-1/png/pngwrite.c ****          entry += i * channels;
2037:fltk-1.3.4-1/png/pngwrite.c **** 
2038:fltk-1.3.4-1/png/pngwrite.c ****          if ((channels & 1) != 0) /* no alpha */
2039:fltk-1.3.4-1/png/pngwrite.c ****          {
2040:fltk-1.3.4-1/png/pngwrite.c ****             if (channels >= 3) /* RGB */
2041:fltk-1.3.4-1/png/pngwrite.c ****             {
2042:fltk-1.3.4-1/png/pngwrite.c ****                palette[i].blue = (png_byte)PNG_sRGB_FROM_LINEAR(255 *
 667              		.loc 1 2042 0
 668 00a1 89D0     		movl	%edx, %eax
 669 00a3 410FB6F1 		movzbl	%r9b, %esi
 670              	.LVL66:
 671 00a7 83E304   		andl	$4, %ebx
 672              	.LVL67:
 673 00aa 83F002   		xorl	$2, %eax
 674 00ad 895C2414 		movl	%ebx, 20(%rsp)
 675 00b1 458D5801 		leal	1(%r8), %r11d
 676              	.LVL68:
 677 00b5 4863C8   		movslq	%eax, %rcx
 678 00b8 4D01C0   		addq	%r8, %r8
 679 00bb 4183FE21 		cmpl	$33, %r14d
 680 00bf 488D3C09 		leaq	(%rcx,%rcx), %rdi
2043:fltk-1.3.4-1/png/pngwrite.c ****                   entry[(2 ^ bgr)]);
2044:fltk-1.3.4-1/png/pngwrite.c ****                palette[i].green = (png_byte)PNG_sRGB_FROM_LINEAR(255 *
2045:fltk-1.3.4-1/png/pngwrite.c ****                   entry[1]);
2046:fltk-1.3.4-1/png/pngwrite.c ****                palette[i].red = (png_byte)PNG_sRGB_FROM_LINEAR(255 *
 681              		.loc 1 2046 0
 682 00c3 4863CA   		movslq	%edx, %rcx
 683 00c6 4D0F45D0 		cmovne	%r8, %r10
 684 00ca 4C895424 		movq	%r10, 32(%rsp)
 684      20
 685 00cf 4C8D8424 		leaq	144(%rsp), %r8
 685      90000000 
2038:fltk-1.3.4-1/png/pngwrite.c ****          {
 686              		.loc 1 2038 0
 687 00d7 4189EF   		movl	%ebp, %r15d
2042:fltk-1.3.4-1/png/pngwrite.c ****                   entry[(2 ^ bgr)]);
 688              		.loc 1 2042 0
 689 00da 48897C24 		movq	%rdi, 80(%rsp)
 689      50
 690              		.loc 1 2046 0
 691 00df 488D3C09 		leaq	(%rcx,%rcx), %rdi
 692              	.LBB133:
2047:fltk-1.3.4-1/png/pngwrite.c ****                   entry[bgr]);
2048:fltk-1.3.4-1/png/pngwrite.c ****             }
2049:fltk-1.3.4-1/png/pngwrite.c **** 
2050:fltk-1.3.4-1/png/pngwrite.c ****             else /* Gray */
2051:fltk-1.3.4-1/png/pngwrite.c ****                palette[i].blue = palette[i].red = palette[i].green =
2052:fltk-1.3.4-1/png/pngwrite.c ****                   (png_byte)PNG_sRGB_FROM_LINEAR(255 * *entry);
2053:fltk-1.3.4-1/png/pngwrite.c ****          }
2054:fltk-1.3.4-1/png/pngwrite.c **** 
2055:fltk-1.3.4-1/png/pngwrite.c ****          else /* alpha */
2056:fltk-1.3.4-1/png/pngwrite.c ****          {
2057:fltk-1.3.4-1/png/pngwrite.c ****             png_uint_16 alpha = entry[afirst ? 0 : channels-1];
2058:fltk-1.3.4-1/png/pngwrite.c ****             png_byte alphabyte = (png_byte)PNG_DIV257(alpha);
2059:fltk-1.3.4-1/png/pngwrite.c ****             png_uint_32 reciprocal = 0;
2060:fltk-1.3.4-1/png/pngwrite.c **** 
2061:fltk-1.3.4-1/png/pngwrite.c ****             /* Calculate a reciprocal, as in the png_write_image_8bit code above
2062:fltk-1.3.4-1/png/pngwrite.c ****              * this is designed to produce a value scaled to 255*65535 when
2063:fltk-1.3.4-1/png/pngwrite.c ****              * divided by 128 (i.e. asr 7).
2064:fltk-1.3.4-1/png/pngwrite.c ****              */
2065:fltk-1.3.4-1/png/pngwrite.c ****             if (alphabyte > 0 && alphabyte < 255)
2066:fltk-1.3.4-1/png/pngwrite.c ****                reciprocal = (((0xffff*0xff)<<7)+(alpha>>1))/alpha;
2067:fltk-1.3.4-1/png/pngwrite.c **** 
2068:fltk-1.3.4-1/png/pngwrite.c ****             tRNS[i] = alphabyte;
2069:fltk-1.3.4-1/png/pngwrite.c ****             if (alphabyte < 255)
2070:fltk-1.3.4-1/png/pngwrite.c ****                num_trans = i+1;
2071:fltk-1.3.4-1/png/pngwrite.c **** 
2072:fltk-1.3.4-1/png/pngwrite.c ****             if (channels >= 3) /* RGB */
2073:fltk-1.3.4-1/png/pngwrite.c ****             {
2074:fltk-1.3.4-1/png/pngwrite.c ****                palette[i].blue = png_unpremultiply(entry[afirst + (2 ^ bgr)],
 693              		.loc 1 2074 0
 694 00e3 8D0C30   		leal	(%rax,%rsi), %ecx
 695 00e6 488D1C09 		leaq	(%rcx,%rcx), %rbx
 696 00ea 4889C8   		movq	%rcx, %rax
 697              	.LBE133:
2046:fltk-1.3.4-1/png/pngwrite.c ****                   entry[bgr]);
 698              		.loc 1 2046 0
 699 00ed 48897C24 		movq	%rdi, 88(%rsp)
 699      58
 700              	.LBE132:
 701              	.LBB163:
2075:fltk-1.3.4-1/png/pngwrite.c ****                   alpha, reciprocal);
2076:fltk-1.3.4-1/png/pngwrite.c ****                palette[i].green = png_unpremultiply(entry[afirst + 1], alpha,
2077:fltk-1.3.4-1/png/pngwrite.c ****                   reciprocal);
2078:fltk-1.3.4-1/png/pngwrite.c ****                palette[i].red = png_unpremultiply(entry[afirst + bgr], alpha,
2079:fltk-1.3.4-1/png/pngwrite.c ****                   reciprocal);
2080:fltk-1.3.4-1/png/pngwrite.c ****             }
2081:fltk-1.3.4-1/png/pngwrite.c **** 
2082:fltk-1.3.4-1/png/pngwrite.c ****             else /* gray */
2083:fltk-1.3.4-1/png/pngwrite.c ****                palette[i].blue = palette[i].red = palette[i].green =
2084:fltk-1.3.4-1/png/pngwrite.c ****                   png_unpremultiply(entry[afirst], alpha, reciprocal);
2085:fltk-1.3.4-1/png/pngwrite.c ****          }
2086:fltk-1.3.4-1/png/pngwrite.c ****       }
2087:fltk-1.3.4-1/png/pngwrite.c **** 
2088:fltk-1.3.4-1/png/pngwrite.c ****       else /* Color-map has sRGB values */
2089:fltk-1.3.4-1/png/pngwrite.c ****       {
2090:fltk-1.3.4-1/png/pngwrite.c ****          png_const_bytep entry = png_voidcast(png_const_bytep, cmap);
2091:fltk-1.3.4-1/png/pngwrite.c **** 
2092:fltk-1.3.4-1/png/pngwrite.c ****          entry += i * channels;
2093:fltk-1.3.4-1/png/pngwrite.c **** 
2094:fltk-1.3.4-1/png/pngwrite.c ****          switch (channels)
2095:fltk-1.3.4-1/png/pngwrite.c ****          {
2096:fltk-1.3.4-1/png/pngwrite.c ****             case 4:
2097:fltk-1.3.4-1/png/pngwrite.c ****                tRNS[i] = entry[afirst ? 0 : 3];
2098:fltk-1.3.4-1/png/pngwrite.c ****                if (tRNS[i] < 255)
2099:fltk-1.3.4-1/png/pngwrite.c ****                   num_trans = i+1;
2100:fltk-1.3.4-1/png/pngwrite.c ****                /* FALL THROUGH */
2101:fltk-1.3.4-1/png/pngwrite.c ****             case 3:
2102:fltk-1.3.4-1/png/pngwrite.c ****                palette[i].blue = entry[afirst + (2 ^ bgr)];
 702              		.loc 1 2102 0
 703 00f2 4898     		cltq
 704              	.LBE163:
 705              	.LBB164:
 706              	.LBB154:
2074:fltk-1.3.4-1/png/pngwrite.c ****                   alpha, reciprocal);
 707              		.loc 1 2074 0
 708 00f4 48895C24 		movq	%rbx, 96(%rsp)
 708      60
2076:fltk-1.3.4-1/png/pngwrite.c ****                   reciprocal);
 709              		.loc 1 2076 0
 710 00f9 410FB6D9 		movzbl	%r9b, %ebx
 711              	.LBE154:
 712              	.LBE164:
 713              	.LBB165:
 714              		.loc 1 2102 0
 715 00fd 48894424 		movq	%rax, 64(%rsp)
 715      40
 716              	.LBE165:
 717              	.LBB166:
 718              	.LBB155:
2076:fltk-1.3.4-1/png/pngwrite.c ****                   reciprocal);
 719              		.loc 1 2076 0
 720 0102 488D4B01 		leaq	1(%rbx), %rcx
 721 0106 48895C24 		movq	%rbx, 48(%rsp)
 721      30
2084:fltk-1.3.4-1/png/pngwrite.c ****          }
 722              		.loc 1 2084 0
 723 010b 41B90100 		movl	$1, %r9d
 723      0000
2076:fltk-1.3.4-1/png/pngwrite.c ****                   reciprocal);
 724              		.loc 1 2076 0
 725 0111 48894C24 		movq	%rcx, 56(%rsp)
 725      38
 726 0116 4801C9   		addq	%rcx, %rcx
 727 0119 48894C24 		movq	%rcx, 104(%rsp)
 727      68
2078:fltk-1.3.4-1/png/pngwrite.c ****                   reciprocal);
 728              		.loc 1 2078 0
 729 011e 8D0C32   		leal	(%rdx,%rsi), %ecx
 730 0121 488D3409 		leaq	(%rcx,%rcx), %rsi
 731              	.LVL69:
 732 0125 4889CA   		movq	%rcx, %rdx
 733              	.LVL70:
 734 0128 31C9     		xorl	%ecx, %ecx
 735 012a 4183FE21 		cmpl	$33, %r14d
 736              	.LBE155:
 737              	.LBE166:
 738              	.LBB167:
2103:fltk-1.3.4-1/png/pngwrite.c ****                palette[i].green = entry[afirst + 1];
2104:fltk-1.3.4-1/png/pngwrite.c ****                palette[i].red = entry[afirst + bgr];
 739              		.loc 1 2104 0
 740 012e 4863C2   		movslq	%edx, %rax
 741              	.LBE167:
 742              	.LBB168:
 743              	.LBB156:
2078:fltk-1.3.4-1/png/pngwrite.c ****                   reciprocal);
 744              		.loc 1 2078 0
 745 0131 48897424 		movq	%rsi, 112(%rsp)
 745      70
2084:fltk-1.3.4-1/png/pngwrite.c ****          }
 746              		.loc 1 2084 0
 747 0136 488D341B 		leaq	(%rbx,%rbx), %rsi
 748 013a 0F95C1   		setne	%cl
 749              	.LBE156:
 750              	.LBE168:
 751              	.LBB169:
 752              		.loc 1 2104 0
 753 013d 48894424 		movq	%rax, 72(%rsp)
 753      48
 754              	.LBE169:
 755              	.LBB170:
2038:fltk-1.3.4-1/png/pngwrite.c ****          {
 756              		.loc 1 2038 0
 757 0142 4489D8   		movl	%r11d, %eax
 758 0145 488D9C24 		leaq	912(%rsp), %rbx
 758      90030000 
 759              	.LVL71:
 760              	.LBB157:
2084:fltk-1.3.4-1/png/pngwrite.c ****          }
 761              		.loc 1 2084 0
 762 014d 48897424 		movq	%rsi, 120(%rsp)
 762      78
 763 0152 488D3449 		leaq	(%rcx,%rcx,2), %rsi
 764              	.LBE157:
2038:fltk-1.3.4-1/png/pngwrite.c ****          {
 765              		.loc 1 2038 0
 766 0156 83E001   		andl	$1, %eax
 767              	.LBB158:
2084:fltk-1.3.4-1/png/pngwrite.c ****          }
 768              		.loc 1 2084 0
 769 0159 4531D2   		xorl	%r10d, %r10d
 770 015c 4531F6   		xorl	%r14d, %r14d
 771              	.LBE158:
2038:fltk-1.3.4-1/png/pngwrite.c ****          {
 772              		.loc 1 2038 0
 773 015f 89442418 		movl	%eax, 24(%rsp)
 774 0163 4889B424 		movq	%rsi, 128(%rsp)
 774      80000000 
 775 016b E9F00000 		jmp	.L80
 775      00
 776              	.LVL72:
 777              		.p2align 4,,10
 778              		.p2align 3
 779              	.L109:
2036:fltk-1.3.4-1/png/pngwrite.c **** 
 780              		.loc 1 2036 0
 781 0170 488B7424 		movq	8(%rsp), %rsi
 781      08
 782 0175 4C8D2C46 		leaq	(%rsi,%rax,2), %r13
 783              	.LVL73:
2038:fltk-1.3.4-1/png/pngwrite.c ****          {
 784              		.loc 1 2038 0
 785 0179 8B442418 		movl	24(%rsp), %eax
 786 017d 85C0     		testl	%eax, %eax
 787 017f 0F844301 		je	.L61
 787      0000
2040:fltk-1.3.4-1/png/pngwrite.c ****             {
 788              		.loc 1 2040 0
 789 0185 4183FB02 		cmpl	$2, %r11d
 790 0189 0F8E6902 		jle	.L62
 790      0000
2042:fltk-1.3.4-1/png/pngwrite.c ****                   entry[(2 ^ bgr)]);
 791              		.loc 1 2042 0
 792 018f 488B4424 		movq	80(%rsp), %rax
 792      50
 793 0194 4489CD   		movl	%r9d, %ebp
 794 0197 410FB754 		movzwl	0(%r13,%rax), %edx
 794      0500
 795 019d 89D0     		movl	%edx, %eax
 796 019f C1E008   		sall	$8, %eax
 797 01a2 29D0     		subl	%edx, %eax
 798 01a4 89C2     		movl	%eax, %edx
 799 01a6 25FF7F00 		andl	$32767, %eax
 799      00
 800 01ab C1FA0F   		sarl	$15, %edx
 801 01ae 4863D2   		movslq	%edx, %rdx
 802 01b1 0FB68A00 		movzbl	png_sRGB_delta(%rdx), %ecx
 802      000000
 803 01b8 0FB79412 		movzwl	png_sRGB_base(%rdx,%rdx), %edx
 803      00000000 
 804 01c0 0FAFC1   		imull	%ecx, %eax
 805 01c3 C1F80C   		sarl	$12, %eax
 806 01c6 01D0     		addl	%edx, %eax
 807 01c8 C1F808   		sarl	$8, %eax
 808 01cb 41884002 		movb	%al, 2(%r8)
2044:fltk-1.3.4-1/png/pngwrite.c ****                   entry[1]);
 809              		.loc 1 2044 0
 810 01cf 410FB755 		movzwl	2(%r13), %edx
 810      02
 811 01d4 89D0     		movl	%edx, %eax
 812 01d6 C1E008   		sall	$8, %eax
 813 01d9 29D0     		subl	%edx, %eax
 814 01db 89C2     		movl	%eax, %edx
 815 01dd 25FF7F00 		andl	$32767, %eax
 815      00
 816 01e2 C1FA0F   		sarl	$15, %edx
 817 01e5 4863D2   		movslq	%edx, %rdx
 818 01e8 0FB68A00 		movzbl	png_sRGB_delta(%rdx), %ecx
 818      000000
 819 01ef 0FB79412 		movzwl	png_sRGB_base(%rdx,%rdx), %edx
 819      00000000 
 820 01f7 0FAFC1   		imull	%ecx, %eax
 821 01fa C1F80C   		sarl	$12, %eax
 822 01fd 01D0     		addl	%edx, %eax
 823 01ff C1F808   		sarl	$8, %eax
 824 0202 41884001 		movb	%al, 1(%r8)
2046:fltk-1.3.4-1/png/pngwrite.c ****                   entry[bgr]);
 825              		.loc 1 2046 0
 826 0206 488B4424 		movq	88(%rsp), %rax
 826      58
 827 020b 410FB754 		movzwl	0(%r13,%rax), %edx
 827      0500
 828 0211 89D0     		movl	%edx, %eax
 829 0213 C1E008   		sall	$8, %eax
 830 0216 29D0     		subl	%edx, %eax
 831 0218 89C2     		movl	%eax, %edx
 832 021a 25FF7F00 		andl	$32767, %eax
 832      00
 833 021f C1FA0F   		sarl	$15, %edx
 834 0222 4863D2   		movslq	%edx, %rdx
 835 0225 0FB68A00 		movzbl	png_sRGB_delta(%rdx), %ecx
 835      000000
 836 022c 0FB79412 		movzwl	png_sRGB_base(%rdx,%rdx), %edx
 836      00000000 
 837 0234 0FAFC1   		imull	%ecx, %eax
 838 0237 C1F80C   		sarl	$12, %eax
 839 023a 01D0     		addl	%edx, %eax
 840 023c C1F808   		sarl	$8, %eax
 841 023f 418800   		movb	%al, (%r8)
 842              	.LVL74:
 843              		.p2align 4,,10
 844 0242 660F1F44 		.p2align 3
 844      0000
 845              	.L63:
 846 0248 4183C101 		addl	$1, %r9d
 847 024c 4983C003 		addq	$3, %r8
 848 0250 4883C301 		addq	$1, %rbx
 849 0254 4501DA   		addl	%r11d, %r10d
 850              	.LBE170:
2027:fltk-1.3.4-1/png/pngwrite.c ****    {
 851              		.loc 1 2027 0
 852 0257 4139EF   		cmpl	%ebp, %r15d
 853 025a 0F8E3002 		jle	.L108
 853      0000
 854              	.LVL75:
 855              	.L80:
2032:fltk-1.3.4-1/png/pngwrite.c ****       {
 856              		.loc 1 2032 0
 857 0260 8B542414 		movl	20(%rsp), %edx
 858              	.LBB171:
2036:fltk-1.3.4-1/png/pngwrite.c **** 
 859              		.loc 1 2036 0
 860 0264 4963C2   		movslq	%r10d, %rax
 861              	.LBE171:
2032:fltk-1.3.4-1/png/pngwrite.c ****       {
 862              		.loc 1 2032 0
 863 0267 85D2     		testl	%edx, %edx
 864 0269 0F8501FF 		jne	.L109
 864      FFFF
 865              	.LVL76:
 866              	.LBB172:
2092:fltk-1.3.4-1/png/pngwrite.c **** 
 867              		.loc 1 2092 0
 868 026f 48034424 		addq	8(%rsp), %rax
 868      08
 869              	.LVL77:
2094:fltk-1.3.4-1/png/pngwrite.c ****          {
 870              		.loc 1 2094 0
 871 0274 4183FB03 		cmpl	$3, %r11d
 872 0278 0F84C201 		je	.L73
 872      0000
 873 027e 4183FB04 		cmpl	$4, %r11d
 874 0282 0F84E801 		je	.L74
 874      0000
 875 0288 4183FB02 		cmpl	$2, %r11d
 876 028c 4489CD   		movl	%r9d, %ebp
 877 028f 751D     		jne	.L77
2105:fltk-1.3.4-1/png/pngwrite.c ****                break;
2106:fltk-1.3.4-1/png/pngwrite.c **** 
2107:fltk-1.3.4-1/png/pngwrite.c ****             case 2:
2108:fltk-1.3.4-1/png/pngwrite.c ****                tRNS[i] = entry[1 ^ afirst];
 878              		.loc 1 2108 0
 879 0291 31D2     		xorl	%edx, %edx
 880 0293 83BC2488 		cmpl	$33, 136(%rsp)
 880      00000021 
 881 029b 4489CD   		movl	%r9d, %ebp
 882 029e 0F95C2   		setne	%dl
 883 02a1 0FB61410 		movzbl	(%rax,%rdx), %edx
 884 02a5 80FAFF   		cmpb	$-1, %dl
 885 02a8 8813     		movb	%dl, (%rbx)
 886 02aa 450F45F1 		cmovne	%r9d, %r14d
 887              	.LVL78:
 888              	.L77:
2109:fltk-1.3.4-1/png/pngwrite.c ****                if (tRNS[i] < 255)
2110:fltk-1.3.4-1/png/pngwrite.c ****                   num_trans = i+1;
2111:fltk-1.3.4-1/png/pngwrite.c ****                /* FALL THROUGH */
2112:fltk-1.3.4-1/png/pngwrite.c ****             case 1:
2113:fltk-1.3.4-1/png/pngwrite.c ****                palette[i].blue = palette[i].red = palette[i].green =
2114:fltk-1.3.4-1/png/pngwrite.c ****                   entry[afirst];
 889              		.loc 1 2114 0
 890 02ae 488B7C24 		movq	48(%rsp), %rdi
 890      30
 891 02b3 0FB60438 		movzbl	(%rax,%rdi), %eax
 892              	.LVL79:
 893              	.L104:
2113:fltk-1.3.4-1/png/pngwrite.c ****                   entry[afirst];
 894              		.loc 1 2113 0
 895 02b7 41884001 		movb	%al, 1(%r8)
 896 02bb 418800   		movb	%al, (%r8)
 897 02be 41884002 		movb	%al, 2(%r8)
 898 02c2 EB84     		jmp	.L63
 899              	.LVL80:
 900              		.p2align 4,,10
 901 02c4 0F1F4000 		.p2align 3
 902              	.L61:
 903              	.LBE172:
 904              	.LBB173:
 905              	.LBB159:
2057:fltk-1.3.4-1/png/pngwrite.c ****             png_byte alphabyte = (png_byte)PNG_DIV257(alpha);
 906              		.loc 1 2057 0
 907 02c8 488B4424 		movq	32(%rsp), %rax
 907      20
2059:fltk-1.3.4-1/png/pngwrite.c **** 
 908              		.loc 1 2059 0
 909 02cd C744241C 		movl	$0, 28(%rsp)
 909      00000000 
2057:fltk-1.3.4-1/png/pngwrite.c ****             png_byte alphabyte = (png_byte)PNG_DIV257(alpha);
 910              		.loc 1 2057 0
 911 02d5 450FB764 		movzwl	0(%r13,%rax), %r12d
 911      0500
2058:fltk-1.3.4-1/png/pngwrite.c ****             png_uint_32 reciprocal = 0;
 912              		.loc 1 2058 0
 913 02db 4489E1   		movl	%r12d, %ecx
2057:fltk-1.3.4-1/png/pngwrite.c ****             png_byte alphabyte = (png_byte)PNG_DIV257(alpha);
 914              		.loc 1 2057 0
 915 02de 4489E0   		movl	%r12d, %eax
 916              	.LVL81:
2058:fltk-1.3.4-1/png/pngwrite.c ****             png_uint_32 reciprocal = 0;
 917              		.loc 1 2058 0
 918 02e1 C1E108   		sall	$8, %ecx
 919 02e4 4429E1   		subl	%r12d, %ecx
 920 02e7 81C17F80 		addl	$32895, %ecx
 920      0000
 921 02ed C1E910   		shrl	$16, %ecx
 922              	.LVL82:
2065:fltk-1.3.4-1/png/pngwrite.c ****                reciprocal = (((0xffff*0xff)<<7)+(alpha>>1))/alpha;
 923              		.loc 1 2065 0
 924 02f0 8D51FF   		leal	-1(%rcx), %edx
 925 02f3 80FAFD   		cmpb	$-3, %dl
 926 02f6 7713     		ja	.L64
2066:fltk-1.3.4-1/png/pngwrite.c **** 
 927              		.loc 1 2066 0
 928 02f8 66D1E8   		shrw	%ax
 929 02fb 0FB7C0   		movzwl	%ax, %eax
 930 02fe 0580807F 		addl	$2139062400, %eax
 930      7F
 931 0303 99       		cltd
 932 0304 41F7FC   		idivl	%r12d
 933 0307 8944241C 		movl	%eax, 28(%rsp)
 934              	.LVL83:
 935              	.L64:
 936 030b 81F9FF00 		cmpl	$255, %ecx
 936      0000
2068:fltk-1.3.4-1/png/pngwrite.c ****             if (alphabyte < 255)
 937              		.loc 1 2068 0
 938 0311 880B     		movb	%cl, (%rbx)
 939 0313 4489CD   		movl	%r9d, %ebp
 940 0316 450F45F1 		cmovne	%r9d, %r14d
 941              	.LVL84:
2072:fltk-1.3.4-1/png/pngwrite.c ****             {
 942              		.loc 1 2072 0
 943 031a 4183FB02 		cmpl	$2, %r11d
 944 031e 0F8E9400 		jle	.L67
 944      0000
 945              	.LVL85:
2074:fltk-1.3.4-1/png/pngwrite.c ****                   alpha, reciprocal);
 946              		.loc 1 2074 0
 947 0324 488B4424 		movq	96(%rsp), %rax
 947      60
 948              	.LBB134:
 949              	.LBB135:
1867:fltk-1.3.4-1/png/pngwrite.c ****       return 255;
 950              		.loc 1 1867 0
 951 0329 4183FC7F 		cmpl	$127, %r12d
 952 032d 0F96C1   		setbe	%cl
 953              	.LVL86:
 954              	.LBE135:
 955              	.LBE134:
2074:fltk-1.3.4-1/png/pngwrite.c ****                   alpha, reciprocal);
 956              		.loc 1 2074 0
 957 0330 410FB77C 		movzwl	0(%r13,%rax), %edi
 957      0500
 958              	.LVL87:
 959              	.LBB139:
 960              	.LBB136:
1867:fltk-1.3.4-1/png/pngwrite.c ****       return 255;
 961              		.loc 1 1867 0
 962 0336 4139FC   		cmpl	%edi, %r12d
 963 0339 0F86D901 		jbe	.L85
 963      0000
 964 033f 84C9     		testb	%cl, %cl
 965 0341 0F85D101 		jne	.L85
 965      0000
1895:fltk-1.3.4-1/png/pngwrite.c **** }
 966              		.loc 1 1895 0
 967 0347 31C0     		xorl	%eax, %eax
1873:fltk-1.3.4-1/png/pngwrite.c ****    {
 968              		.loc 1 1873 0
 969 0349 85FF     		testl	%edi, %edi
 970 034b 0F851F02 		jne	.L110
 970      0000
 971              	.LVL88:
 972              	.L68:
 973              	.LBE136:
 974              	.LBE139:
2074:fltk-1.3.4-1/png/pngwrite.c ****                   alpha, reciprocal);
 975              		.loc 1 2074 0
 976 0351 41884002 		movb	%al, 2(%r8)
2076:fltk-1.3.4-1/png/pngwrite.c ****                   reciprocal);
 977              		.loc 1 2076 0
 978 0355 488B4424 		movq	104(%rsp), %rax
 978      68
 979 035a 410FB77C 		movzwl	0(%r13,%rax), %edi
 979      0500
 980              	.LVL89:
 981              	.LBB140:
 982              	.LBB141:
1867:fltk-1.3.4-1/png/pngwrite.c ****       return 255;
 983              		.loc 1 1867 0
 984 0360 4139FC   		cmpl	%edi, %r12d
 985 0363 0F86CF01 		jbe	.L87
 985      0000
 986 0369 84C9     		testb	%cl, %cl
 987 036b 0F85C701 		jne	.L87
 987      0000
1895:fltk-1.3.4-1/png/pngwrite.c **** }
 988              		.loc 1 1895 0
 989 0371 31C0     		xorl	%eax, %eax
1873:fltk-1.3.4-1/png/pngwrite.c ****    {
 990              		.loc 1 1873 0
 991 0373 85FF     		testl	%edi, %edi
 992 0375 0F85CD01 		jne	.L111
 992      0000
 993              	.LVL90:
 994              	.L69:
 995              	.LBE141:
 996              	.LBE140:
2076:fltk-1.3.4-1/png/pngwrite.c ****                   reciprocal);
 997              		.loc 1 2076 0
 998 037b 41884001 		movb	%al, 1(%r8)
2078:fltk-1.3.4-1/png/pngwrite.c ****                   reciprocal);
 999              		.loc 1 2078 0
 1000 037f 488B4424 		movq	112(%rsp), %rax
 1000      70
 1001 0384 410FB77C 		movzwl	0(%r13,%rax), %edi
 1001      0500
 1002              	.LVL91:
 1003              	.LBB143:
 1004              	.LBB144:
1867:fltk-1.3.4-1/png/pngwrite.c ****       return 255;
 1005              		.loc 1 1867 0
 1006 038a 4139FC   		cmpl	%edi, %r12d
 1007 038d 0F869501 		jbe	.L89
 1007      0000
 1008 0393 84C9     		testb	%cl, %cl
 1009 0395 0F858D01 		jne	.L89
 1009      0000
1895:fltk-1.3.4-1/png/pngwrite.c **** }
 1010              		.loc 1 1895 0
 1011 039b 31C0     		xorl	%eax, %eax
1873:fltk-1.3.4-1/png/pngwrite.c ****    {
 1012              		.loc 1 1873 0
 1013 039d 85FF     		testl	%edi, %edi
 1014 039f 740C     		je	.L105
 1015 03a1 8B54241C 		movl	28(%rsp), %edx
 1016 03a5 4489E6   		movl	%r12d, %esi
 1017 03a8 E8000000 		call	png_unpremultiply.part.1
 1017      00
 1018              	.LVL92:
 1019              	.L105:
 1020              	.LBE144:
 1021              	.LBE143:
 1022              	.LBE159:
 1023              	.LBE173:
 1024              	.LBB174:
2104:fltk-1.3.4-1/png/pngwrite.c ****                break;
 1025              		.loc 1 2104 0
 1026 03ad 418800   		movb	%al, (%r8)
 1027              	.LVL93:
 1028 03b0 E993FEFF 		jmp	.L63
 1028      FF
 1029              	.LVL94:
 1030              		.p2align 4,,10
 1031 03b5 0F1F00   		.p2align 3
 1032              	.L67:
 1033              	.LBE174:
 1034              	.LBB175:
 1035              	.LBB160:
2084:fltk-1.3.4-1/png/pngwrite.c ****          }
 1036              		.loc 1 2084 0
 1037 03b8 488B4424 		movq	120(%rsp), %rax
 1037      78
 1038 03bd 410FB77C 		movzwl	0(%r13,%rax), %edi
 1038      0500
 1039              	.LVL95:
 1040              	.LBB146:
 1041              	.LBB147:
1867:fltk-1.3.4-1/png/pngwrite.c ****       return 255;
 1042              		.loc 1 1867 0
 1043 03c3 4139FC   		cmpl	%edi, %r12d
 1044 03c6 0F863C01 		jbe	.L91
 1044      0000
 1045 03cc 4183FC7F 		cmpl	$127, %r12d
 1046 03d0 0F863201 		jbe	.L91
 1046      0000
1895:fltk-1.3.4-1/png/pngwrite.c **** }
 1047              		.loc 1 1895 0
 1048 03d6 31C0     		xorl	%eax, %eax
1873:fltk-1.3.4-1/png/pngwrite.c ****    {
 1049              		.loc 1 1873 0
 1050 03d8 85FF     		testl	%edi, %edi
 1051 03da 0F84D7FE 		je	.L104
 1051      FFFF
 1052 03e0 8B54241C 		movl	28(%rsp), %edx
 1053 03e4 4489E6   		movl	%r12d, %esi
 1054 03e7 E8000000 		call	png_unpremultiply.part.1
 1054      00
 1055              	.LVL96:
 1056 03ec E9C6FEFF 		jmp	.L104
 1056      FF
 1057              	.LVL97:
 1058              		.p2align 4,,10
 1059 03f1 0F1F8000 		.p2align 3
 1059      000000
 1060              	.L62:
 1061              	.LBE147:
 1062              	.LBE146:
 1063              	.LBE160:
2052:fltk-1.3.4-1/png/pngwrite.c ****          }
 1064              		.loc 1 2052 0
 1065 03f8 410FB755 		movzwl	0(%r13), %edx
 1065      00
 1066 03fd 4489CD   		movl	%r9d, %ebp
 1067 0400 89D0     		movl	%edx, %eax
 1068 0402 C1E008   		sall	$8, %eax
 1069 0405 29D0     		subl	%edx, %eax
 1070 0407 89C2     		movl	%eax, %edx
 1071 0409 25FF7F00 		andl	$32767, %eax
 1071      00
 1072 040e C1FA0F   		sarl	$15, %edx
 1073 0411 4863D2   		movslq	%edx, %rdx
 1074 0414 0FB68A00 		movzbl	png_sRGB_delta(%rdx), %ecx
 1074      000000
 1075 041b 0FB79412 		movzwl	png_sRGB_base(%rdx,%rdx), %edx
 1075      00000000 
 1076 0423 0FAFC1   		imull	%ecx, %eax
 1077 0426 C1F80C   		sarl	$12, %eax
 1078 0429 01D0     		addl	%edx, %eax
 1079 042b C1F808   		sarl	$8, %eax
2051:fltk-1.3.4-1/png/pngwrite.c ****                   (png_byte)PNG_sRGB_FROM_LINEAR(255 * *entry);
 1080              		.loc 1 2051 0
 1081 042e 41884001 		movb	%al, 1(%r8)
 1082 0432 418800   		movb	%al, (%r8)
 1083 0435 41884002 		movb	%al, 2(%r8)
 1084 0439 E90AFEFF 		jmp	.L63
 1084      FF
 1085              	.LVL98:
 1086 043e 6690     		.p2align 4,,10
 1087              		.p2align 3
 1088              	.L73:
 1089 0440 4489CD   		movl	%r9d, %ebp
 1090              	.LVL99:
 1091              	.L76:
 1092              	.LBE175:
 1093              	.LBB176:
2102:fltk-1.3.4-1/png/pngwrite.c ****                palette[i].green = entry[afirst + 1];
 1094              		.loc 1 2102 0
 1095 0443 488B7424 		movq	64(%rsp), %rsi
 1095      40
2103:fltk-1.3.4-1/png/pngwrite.c ****                palette[i].red = entry[afirst + bgr];
 1096              		.loc 1 2103 0
 1097 0448 488B7C24 		movq	56(%rsp), %rdi
 1097      38
2102:fltk-1.3.4-1/png/pngwrite.c ****                palette[i].green = entry[afirst + 1];
 1098              		.loc 1 2102 0
 1099 044d 0FB61430 		movzbl	(%rax,%rsi), %edx
2104:fltk-1.3.4-1/png/pngwrite.c ****                break;
 1100              		.loc 1 2104 0
 1101 0451 488B7424 		movq	72(%rsp), %rsi
 1101      48
2102:fltk-1.3.4-1/png/pngwrite.c ****                palette[i].green = entry[afirst + 1];
 1102              		.loc 1 2102 0
 1103 0456 41885002 		movb	%dl, 2(%r8)
2103:fltk-1.3.4-1/png/pngwrite.c ****                palette[i].red = entry[afirst + bgr];
 1104              		.loc 1 2103 0
 1105 045a 0FB61438 		movzbl	(%rax,%rdi), %edx
 1106 045e 41885001 		movb	%dl, 1(%r8)
2104:fltk-1.3.4-1/png/pngwrite.c ****                break;
 1107              		.loc 1 2104 0
 1108 0462 0FB60430 		movzbl	(%rax,%rsi), %eax
 1109              	.LVL100:
 1110 0466 418800   		movb	%al, (%r8)
 1111              	.LVL101:
 1112 0469 E9DAFDFF 		jmp	.L63
 1112      FF
 1113              	.LVL102:
 1114 046e 6690     		.p2align 4,,10
 1115              		.p2align 3
 1116              	.L74:
2097:fltk-1.3.4-1/png/pngwrite.c ****                if (tRNS[i] < 255)
 1117              		.loc 1 2097 0
 1118 0470 488BB424 		movq	128(%rsp), %rsi
 1118      80000000 
 1119 0478 4489CD   		movl	%r9d, %ebp
 1120 047b 0FB61430 		movzbl	(%rax,%rsi), %edx
 1121 047f 80FAFF   		cmpb	$-1, %dl
 1122 0482 8813     		movb	%dl, (%rbx)
 1123 0484 450F45F1 		cmovne	%r9d, %r14d
 1124              	.LVL103:
 1125 0488 EBB9     		jmp	.L76
 1126              	.LVL104:
 1127 048a 660F1F44 		.p2align 4,,10
 1127      0000
 1128              		.p2align 3
 1129              	.L108:
 1130              	.LBE176:
2115:fltk-1.3.4-1/png/pngwrite.c ****                break;
2116:fltk-1.3.4-1/png/pngwrite.c **** 
2117:fltk-1.3.4-1/png/pngwrite.c ****             default:
2118:fltk-1.3.4-1/png/pngwrite.c ****                break;
2119:fltk-1.3.4-1/png/pngwrite.c ****          }
2120:fltk-1.3.4-1/png/pngwrite.c ****       }
2121:fltk-1.3.4-1/png/pngwrite.c ****    }
2122:fltk-1.3.4-1/png/pngwrite.c **** 
2123:fltk-1.3.4-1/png/pngwrite.c **** #  ifdef afirst
2124:fltk-1.3.4-1/png/pngwrite.c **** #     undef afirst
2125:fltk-1.3.4-1/png/pngwrite.c **** #  endif
2126:fltk-1.3.4-1/png/pngwrite.c **** #  ifdef bgr
2127:fltk-1.3.4-1/png/pngwrite.c **** #     undef bgr
2128:fltk-1.3.4-1/png/pngwrite.c **** #  endif
2129:fltk-1.3.4-1/png/pngwrite.c **** 
2130:fltk-1.3.4-1/png/pngwrite.c ****    png_set_PLTE(image->opaque->png_ptr, image->opaque->info_ptr, palette,
 1131              		.loc 1 2130 0
 1132 0490 488B5C24 		movq	40(%rsp), %rbx
 1132      28
 1133 0495 488D9424 		leaq	144(%rsp), %rdx
 1133      90000000 
 1134 049d 4489F9   		movl	%r15d, %ecx
 1135 04a0 4489FD   		movl	%r15d, %ebp
 1136              	.LVL105:
 1137 04a3 488B03   		movq	(%rbx), %rax
 1138 04a6 488B7008 		movq	8(%rax), %rsi
 1139 04aa 488B38   		movq	(%rax), %rdi
 1140 04ad E8000000 		call	png_set_PLTE
 1140      00
 1141              	.LVL106:
2131:fltk-1.3.4-1/png/pngwrite.c ****       entries);
2132:fltk-1.3.4-1/png/pngwrite.c **** 
2133:fltk-1.3.4-1/png/pngwrite.c ****    if (num_trans > 0)
 1142              		.loc 1 2133 0
 1143 04b2 4585F6   		testl	%r14d, %r14d
 1144 04b5 741D     		je	.L81
 1145              	.LVL107:
2134:fltk-1.3.4-1/png/pngwrite.c ****       png_set_tRNS(image->opaque->png_ptr, image->opaque->info_ptr, tRNS,
 1146              		.loc 1 2134 0
 1147 04b7 488B03   		movq	(%rbx), %rax
 1148 04ba 488D9424 		leaq	912(%rsp), %rdx
 1148      90030000 
 1149 04c2 4531C0   		xorl	%r8d, %r8d
 1150 04c5 4489F1   		movl	%r14d, %ecx
 1151 04c8 488B7008 		movq	8(%rax), %rsi
 1152 04cc 488B38   		movq	(%rax), %rdi
 1153 04cf E8000000 		call	png_set_tRNS
 1153      00
 1154              	.LVL108:
 1155              	.L81:
2135:fltk-1.3.4-1/png/pngwrite.c ****          num_trans, NULL);
2136:fltk-1.3.4-1/png/pngwrite.c **** 
2137:fltk-1.3.4-1/png/pngwrite.c ****    image->colormap_entries = entries;
 1156              		.loc 1 2137 0
 1157 04d4 488B4424 		movq	40(%rsp), %rax
 1157      28
 1158 04d9 89681C   		movl	%ebp, 28(%rax)
2138:fltk-1.3.4-1/png/pngwrite.c **** }
 1159              		.loc 1 2138 0
 1160 04dc 488B8424 		movq	1176(%rsp), %rax
 1160      98040000 
 1161 04e4 64483304 		xorq	%fs:40, %rax
 1161      25280000 
 1161      00
 1162 04ed 0F85C000 		jne	.L112
 1162      0000
 1163 04f3 4881C4A8 		addq	$1192, %rsp
 1163      040000
 1164              		.cfi_remember_state
 1165              		.cfi_def_cfa_offset 56
 1166 04fa 5B       		popq	%rbx
 1167              		.cfi_def_cfa_offset 48
 1168 04fb 5D       		popq	%rbp
 1169              		.cfi_def_cfa_offset 40
 1170              	.LVL109:
 1171 04fc 415C     		popq	%r12
 1172              		.cfi_def_cfa_offset 32
 1173 04fe 415D     		popq	%r13
 1174              		.cfi_def_cfa_offset 24
 1175 0500 415E     		popq	%r14
 1176              		.cfi_def_cfa_offset 16
 1177 0502 415F     		popq	%r15
 1178              		.cfi_def_cfa_offset 8
 1179 0504 C3       		ret
 1180              	.LVL110:
 1181              		.p2align 4,,10
 1182 0505 0F1F00   		.p2align 3
 1183              	.L91:
 1184              		.cfi_restore_state
 1185              	.LBB177:
 1186              	.LBB161:
 1187              	.LBB149:
 1188              	.LBB148:
1868:fltk-1.3.4-1/png/pngwrite.c **** 
 1189              		.loc 1 1868 0
 1190 0508 B8FFFFFF 		movl	$-1, %eax
 1190      FF
 1191              	.LVL111:
 1192 050d E9A5FDFF 		jmp	.L104
 1192      FF
 1193              	.LVL112:
 1194              		.p2align 4,,10
 1195 0512 660F1F44 		.p2align 3
 1195      0000
 1196              	.L85:
 1197              	.LBE148:
 1198              	.LBE149:
 1199              	.LBB150:
 1200              	.LBB137:
 1201 0518 B8FFFFFF 		movl	$-1, %eax
 1201      FF
 1202 051d E92FFEFF 		jmp	.L68
 1202      FF
 1203              	.LVL113:
 1204              		.p2align 4,,10
 1205 0522 660F1F44 		.p2align 3
 1205      0000
 1206              	.L89:
 1207              	.LBE137:
 1208              	.LBE150:
 1209              	.LBB151:
 1210              	.LBB145:
 1211 0528 B8FFFFFF 		movl	$-1, %eax
 1211      FF
 1212              	.LVL114:
 1213              	.LBE145:
 1214              	.LBE151:
 1215              	.LBE161:
 1216              	.LBE177:
 1217              	.LBB178:
2104:fltk-1.3.4-1/png/pngwrite.c ****                break;
 1218              		.loc 1 2104 0
 1219 052d 418800   		movb	%al, (%r8)
 1220              	.LVL115:
 1221 0530 E913FDFF 		jmp	.L63
 1221      FF
 1222              	.LVL116:
 1223              		.p2align 4,,10
 1224 0535 0F1F00   		.p2align 3
 1225              	.L87:
 1226              	.LBE178:
 1227              	.LBB179:
 1228              	.LBB162:
 1229              	.LBB152:
 1230              	.LBB142:
1868:fltk-1.3.4-1/png/pngwrite.c **** 
 1231              		.loc 1 1868 0
 1232 0538 B8FFFFFF 		movl	$-1, %eax
 1232      FF
 1233 053d E939FEFF 		jmp	.L69
 1233      FF
 1234              		.p2align 4,,10
 1235 0542 660F1F44 		.p2align 3
 1235      0000
 1236              	.L111:
 1237 0548 8B54241C 		movl	28(%rsp), %edx
 1238 054c 4489E6   		movl	%r12d, %esi
 1239 054f 888C248F 		movb	%cl, 143(%rsp)
 1239      000000
 1240 0556 E8000000 		call	png_unpremultiply.part.1
 1240      00
 1241              	.LVL117:
 1242 055b 0FB68C24 		movzbl	143(%rsp), %ecx
 1242      8F000000 
 1243 0563 E913FEFF 		jmp	.L69
 1243      FF
 1244              	.LVL118:
 1245 0568 0F1F8400 		.p2align 4,,10
 1245      00000000 
 1246              		.p2align 3
 1247              	.L110:
 1248              	.LBE142:
 1249              	.LBE152:
 1250              	.LBB153:
 1251              	.LBB138:
 1252 0570 8B54241C 		movl	28(%rsp), %edx
 1253 0574 4489E6   		movl	%r12d, %esi
 1254 0577 888C248F 		movb	%cl, 143(%rsp)
 1254      000000
 1255 057e E8000000 		call	png_unpremultiply.part.1
 1255      00
 1256              	.LVL119:
 1257 0583 0FB68C24 		movzbl	143(%rsp), %ecx
 1257      8F000000 
 1258 058b E9C1FDFF 		jmp	.L68
 1258      FF
 1259              	.LVL120:
 1260              	.L59:
 1261              	.LBE138:
 1262              	.LBE153:
 1263              	.LBE162:
 1264              	.LBE179:
2130:fltk-1.3.4-1/png/pngwrite.c ****       entries);
 1265              		.loc 1 2130 0
 1266 0590 488B4424 		movq	40(%rsp), %rax
 1266      28
 1267 0595 488D9424 		leaq	144(%rsp), %rdx
 1267      90000000 
 1268              	.LVL121:
 1269 059d 31C9     		xorl	%ecx, %ecx
 1270 059f 488B00   		movq	(%rax), %rax
 1271 05a2 488B7008 		movq	8(%rax), %rsi
 1272 05a6 488B38   		movq	(%rax), %rdi
 1273 05a9 E8000000 		call	png_set_PLTE
 1273      00
 1274              	.LVL122:
 1275 05ae E921FFFF 		jmp	.L81
 1275      FF
 1276              	.LVL123:
 1277              	.L112:
 1278              		.loc 1 2138 0
 1279 05b3 E8000000 		call	__stack_chk_fail
 1279      00
 1280              	.LVL124:
 1281              		.cfi_endproc
 1282              	.LFE103:
 1284              		.section	.text.unlikely.png_image_set_PLTE.isra.5
 1285              	.LCOLDE6:
 1286              		.section	.text.png_image_set_PLTE.isra.5
 1287              	.LHOTE6:
 1288              		.section	.rodata.str1.8
 1289              		.align 8
 1290              	.LC7:
 1291 0048 4D4E4720 		.string	"MNG features are not allowed in a PNG datastream"
 1291      66656174 
 1291      75726573 
 1291      20617265 
 1291      206E6F74 
 1292 0079 00000000 		.align 8
 1292      000000
 1293              	.LC8:
 1294 0080 70726F66 		.string	"profile matches sRGB but writing iCCP instead"
 1294      696C6520 
 1294      6D617463 
 1294      68657320 
 1294      73524742 
 1295              		.section	.text.unlikely.png_write_info_before_PLTE,"ax",@progbits
 1296              	.LCOLDB9:
 1297              		.section	.text.png_write_info_before_PLTE,"ax",@progbits
 1298              	.LHOTB9:
 1299              		.p2align 4,,15
 1300              		.globl	png_write_info_before_PLTE
 1302              	png_write_info_before_PLTE:
 1303              	.LFB57:
  85:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_write_info_before_PLTE");
 1304              		.loc 1 85 0
 1305              		.cfi_startproc
 1306              	.LVL125:
  88:fltk-1.3.4-1/png/pngwrite.c ****       return;
 1307              		.loc 1 88 0
 1308 0000 4885FF   		testq	%rdi, %rdi
 1309 0003 740E     		je	.L152
 1310 0005 4885F6   		testq	%rsi, %rsi
 1311 0008 7409     		je	.L152
  91:fltk-1.3.4-1/png/pngwrite.c ****    {
 1312              		.loc 1 91 0
 1313 000a F6872D01 		testb	$4, 301(%rdi)
 1313      000004
 1314 0011 7405     		je	.L154
 1315              	.L152:
 188:fltk-1.3.4-1/png/pngwrite.c **** 
 1316              		.loc 1 188 0
 1317 0013 C3       		ret
 1318              		.p2align 4,,10
 1319 0014 0F1F4000 		.p2align 3
 1320              	.L154:
  85:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_write_info_before_PLTE");
 1321              		.loc 1 85 0
 1322 0018 55       		pushq	%rbp
 1323              		.cfi_def_cfa_offset 16
 1324              		.cfi_offset 6, -16
 1325 0019 53       		pushq	%rbx
 1326              		.cfi_def_cfa_offset 24
 1327              		.cfi_offset 3, -24
 1328 001a 4889FD   		movq	%rdi, %rbp
 1329              	.LVL126:
 1330 001d 4889F3   		movq	%rsi, %rbx
 1331              	.LVL127:
 1332 0020 4883EC08 		subq	$8, %rsp
 1333              		.cfi_def_cfa_offset 32
 1334              	.LBB184:
 1335              	.LBB185:
  94:fltk-1.3.4-1/png/pngwrite.c **** 
 1336              		.loc 1 94 0
 1337 0024 E8000000 		call	png_write_sig
 1337      00
 1338              	.LVL128:
  97:fltk-1.3.4-1/png/pngwrite.c ****        png_ptr->mng_features_permitted != 0)
 1339              		.loc 1 97 0
 1340 0029 F6852D01 		testb	$16, 301(%rbp)
 1340      000010
 1341 0030 740E     		je	.L115
 1342 0032 8BB51804 		movl	1048(%rbp), %esi
 1342      0000
 1343 0038 85F6     		testl	%esi, %esi
 1344 003a 0F85F000 		jne	.L155
 1344      0000
 1345              	.L115:
 106:fltk-1.3.4-1/png/pngwrite.c ****        info_ptr->bit_depth, info_ptr->color_type, info_ptr->compression_type,
 1346              		.loc 1 106 0
 1347 0040 0FB64328 		movzbl	40(%rbx), %eax
 1348 0044 0FB64B24 		movzbl	36(%rbx), %ecx
 1349 0048 4889EF   		movq	%rbp, %rdi
 1350 004b 8B5304   		movl	4(%rbx), %edx
 1351 004e 50       		pushq	%rax
 1352              		.cfi_def_cfa_offset 40
 1353 004f 0FB64327 		movzbl	39(%rbx), %eax
 1354 0053 50       		pushq	%rax
 1355              		.cfi_def_cfa_offset 48
 1356 0054 440FB64B 		movzbl	38(%rbx), %r9d
 1356      26
 1357 0059 440FB643 		movzbl	37(%rbx), %r8d
 1357      25
 1358 005e 8B33     		movl	(%rbx), %esi
 1359 0060 E8000000 		call	png_write_IHDR
 1359      00
 1360              	.LVL129:
 132:fltk-1.3.4-1/png/pngwrite.c ****           (info_ptr->colorspace.flags & PNG_COLORSPACE_FROM_gAMA) != 0 &&
 1361              		.loc 1 132 0
 1362 0065 0FB7437E 		movzwl	126(%rbx), %eax
 1363 0069 5A       		popq	%rdx
 1364              		.cfi_def_cfa_offset 40
 1365 006a 59       		popq	%rcx
 1366              		.cfi_def_cfa_offset 32
 1367 006b 6685C0   		testw	%ax, %ax
 1368 006e 7870     		js	.L116
 1369 0070 A808     		testb	$8, %al
 134:fltk-1.3.4-1/png/pngwrite.c ****          png_write_gAMA_fixed(png_ptr, info_ptr->colorspace.gamma);
 1370              		.loc 1 134 0
 1371 0072 8B4308   		movl	8(%rbx), %eax
 132:fltk-1.3.4-1/png/pngwrite.c ****           (info_ptr->colorspace.flags & PNG_COLORSPACE_FROM_gAMA) != 0 &&
 1372              		.loc 1 132 0
 1373 0075 7408     		je	.L118
 133:fltk-1.3.4-1/png/pngwrite.c ****           (info_ptr->valid & PNG_INFO_gAMA) != 0)
 1374              		.loc 1 133 0
 1375 0077 A801     		testb	$1, %al
 1376 0079 0F85E900 		jne	.L156
 1376      0000
 1377              	.L118:
 144:fltk-1.3.4-1/png/pngwrite.c ****           (info_ptr->valid & PNG_INFO_iCCP) != 0)
 1378              		.loc 1 144 0
 1379 007f F6C410   		testb	$16, %ah
 1380 0082 747C     		je	.L120
 148:fltk-1.3.4-1/png/pngwrite.c ****                png_app_warning(png_ptr,
 1381              		.loc 1 148 0
 1382 0084 F6C408   		testb	$8, %ah
 1383 0087 0F851B01 		jne	.L157
 1383      0000
 1384              	.L121:
 153:fltk-1.3.4-1/png/pngwrite.c ****             info_ptr->iccp_profile);
 1385              		.loc 1 153 0
 1386 008d 488B9388 		movq	136(%rbx), %rdx
 1386      000000
 1387 0094 488BB380 		movq	128(%rbx), %rsi
 1387      000000
 1388 009b 4889EF   		movq	%rbp, %rdi
 1389 009e E8000000 		call	png_write_iCCP
 1389      00
 1390              	.LVL130:
 1391              	.L122:
 169:fltk-1.3.4-1/png/pngwrite.c ****       png_write_sBIT(png_ptr, &(info_ptr->sig_bit), info_ptr->color_type);
 1392              		.loc 1 169 0
 1393 00a3 F6430802 		testb	$2, 8(%rbx)
 1394 00a7 753D     		jne	.L129
 1395              	.L124:
 175:fltk-1.3.4-1/png/pngwrite.c ****          (info_ptr->colorspace.flags & PNG_COLORSPACE_FROM_cHRM) != 0 &&
 1396              		.loc 1 175 0
 1397 00a9 0FB7437E 		movzwl	126(%rbx), %eax
 1398 00ad 6685C0   		testw	%ax, %ax
 1399 00b0 780E     		js	.L126
 1400              	.L125:
 1401 00b2 A810     		testb	$16, %al
 1402 00b4 740A     		je	.L126
 176:fltk-1.3.4-1/png/pngwrite.c ****          (info_ptr->valid & PNG_INFO_cHRM) != 0)
 1403              		.loc 1 176 0
 1404 00b6 F6430804 		testb	$4, 8(%rbx)
 1405 00ba 0F85D000 		jne	.L158
 1405      0000
 1406              	.L126:
 1407              	.LVL131:
 1408              	.LBB186:
 1409              	.LBB187:
  27:fltk-1.3.4-1/png/pngwrite.c ****    {
 1410              		.loc 1 27 0
 1411 00c0 8B832801 		movl	296(%rbx), %eax
 1411      0000
 1412 00c6 85C0     		testl	%eax, %eax
 1413 00c8 7546     		jne	.L159
 1414              	.L128:
 1415              	.LVL132:
 1416              	.LBE187:
 1417              	.LBE186:
 186:fltk-1.3.4-1/png/pngwrite.c ****    }
 1418              		.loc 1 186 0
 1419 00ca 818D2C01 		orl	$1024, 300(%rbp)
 1419      00000004 
 1419      0000
 1420              	.LBE185:
 1421              	.LBE184:
 188:fltk-1.3.4-1/png/pngwrite.c **** 
 1422              		.loc 1 188 0
 1423 00d4 4883C408 		addq	$8, %rsp
 1424              		.cfi_remember_state
 1425              		.cfi_def_cfa_offset 24
 1426 00d8 5B       		popq	%rbx
 1427              		.cfi_restore 3
 1428              		.cfi_def_cfa_offset 16
 1429              	.LVL133:
 1430 00d9 5D       		popq	%rbp
 1431              		.cfi_restore 6
 1432              		.cfi_def_cfa_offset 8
 1433              	.LVL134:
 1434 00da C3       		ret
 1435              	.LVL135:
 1436 00db 0F1F4400 		.p2align 4,,10
 1436      00
 1437              		.p2align 3
 1438              	.L116:
 1439              		.cfi_restore_state
 1440              	.LBB191:
 1441              	.LBB190:
 169:fltk-1.3.4-1/png/pngwrite.c ****       png_write_sBIT(png_ptr, &(info_ptr->sig_bit), info_ptr->color_type);
 1442              		.loc 1 169 0
 1443 00e0 F6430802 		testb	$2, 8(%rbx)
 1444 00e4 74DA     		je	.L126
 1445              	.L129:
 170:fltk-1.3.4-1/png/pngwrite.c **** #endif
 1446              		.loc 1 170 0
 1447 00e6 0FB65325 		movzbl	37(%rbx), %edx
 1448 00ea 488DB3B0 		leaq	176(%rbx), %rsi
 1448      000000
 1449 00f1 4889EF   		movq	%rbp, %rdi
 1450 00f4 E8000000 		call	png_write_sBIT
 1450      00
 1451              	.LVL136:
 1452 00f9 EBAE     		jmp	.L124
 1453 00fb 0F1F4400 		.p2align 4,,10
 1453      00
 1454              		.p2align 3
 1455              	.L120:
 162:fltk-1.3.4-1/png/pngwrite.c ****           (info_ptr->valid & PNG_INFO_sRGB) != 0)
 1456              		.loc 1 162 0
 1457 0100 F6C408   		testb	$8, %ah
 1458 0103 754B     		jne	.L160
 169:fltk-1.3.4-1/png/pngwrite.c ****       png_write_sBIT(png_ptr, &(info_ptr->sig_bit), info_ptr->color_type);
 1459              		.loc 1 169 0
 1460 0105 A802     		testb	$2, %al
 1461 0107 75DD     		jne	.L129
 175:fltk-1.3.4-1/png/pngwrite.c ****          (info_ptr->colorspace.flags & PNG_COLORSPACE_FROM_cHRM) != 0 &&
 1462              		.loc 1 175 0
 1463 0109 0FB7437E 		movzwl	126(%rbx), %eax
 1464 010d EBA3     		jmp	.L125
 1465              	.LVL137:
 1466 010f 90       		.p2align 4,,10
 1467              		.p2align 3
 1468              	.L159:
 1469 0110 488D9328 		leaq	296(%rbx), %rdx
 1469      010000
 1470 0117 488DB320 		leaq	288(%rbx), %rsi
 1470      010000
 1471              	.LBB189:
 1472              	.LBB188:
 1473 011e B9010000 		movl	$1, %ecx
 1473      00
 1474 0123 4889EF   		movq	%rbp, %rdi
 1475 0126 E8000000 		call	write_unknown_chunks.isra.2.part.3
 1475      00
 1476              	.LVL138:
 1477 012b EB9D     		jmp	.L128
 1478              	.LVL139:
 1479 012d 0F1F00   		.p2align 4,,10
 1480              		.p2align 3
 1481              	.L155:
 1482              	.LBE188:
 1483              	.LBE189:
 100:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->mng_features_permitted = 0;
 1484              		.loc 1 100 0
 1485 0130 BE000000 		movl	$.LC7, %esi
 1485      00
 1486 0135 4889EF   		movq	%rbp, %rdi
 1487 0138 E8000000 		call	png_warning
 1487      00
 1488              	.LVL140:
 101:fltk-1.3.4-1/png/pngwrite.c ****    }
 1489              		.loc 1 101 0
 1490 013d C7851804 		movl	$0, 1048(%rbp)
 1490      00000000 
 1490      0000
 1491 0147 E9F4FEFF 		jmp	.L115
 1491      FF
 1492 014c 0F1F4000 		.p2align 4,,10
 1493              		.p2align 3
 1494              	.L160:
 164:fltk-1.3.4-1/png/pngwrite.c **** #  endif /* WRITE_sRGB */
 1495              		.loc 1 164 0
 1496 0150 0FB7737C 		movzwl	124(%rbx), %esi
 1497 0154 4889EF   		movq	%rbp, %rdi
 1498 0157 E8000000 		call	png_write_sRGB
 1498      00
 1499              	.LVL141:
 1500 015c E942FFFF 		jmp	.L122
 1500      FF
 1501              		.p2align 4,,10
 1502 0161 0F1F8000 		.p2align 3
 1502      000000
 1503              	.L156:
 135:fltk-1.3.4-1/png/pngwrite.c **** #  endif
 1504              		.loc 1 135 0
 1505 0168 8B7334   		movl	52(%rbx), %esi
 1506 016b 4889EF   		movq	%rbp, %rdi
 1507 016e E8000000 		call	png_write_gAMA_fixed
 1507      00
 1508              	.LVL142:
 144:fltk-1.3.4-1/png/pngwrite.c ****           (info_ptr->valid & PNG_INFO_iCCP) != 0)
 1509              		.loc 1 144 0
 1510 0173 66837B7E 		cmpw	$0, 126(%rbx)
 1510      00
 1511 0178 0F8862FF 		js	.L116
 1511      FFFF
 1512 017e 8B4308   		movl	8(%rbx), %eax
 1513 0181 E9F9FEFF 		jmp	.L118
 1513      FF
 1514 0186 662E0F1F 		.p2align 4,,10
 1514      84000000 
 1514      0000
 1515              		.p2align 3
 1516              	.L158:
 178:fltk-1.3.4-1/png/pngwrite.c **** #  endif
 1517              		.loc 1 178 0
 1518 0190 488D7338 		leaq	56(%rbx), %rsi
 1519 0194 4889EF   		movq	%rbp, %rdi
 1520 0197 E8000000 		call	png_write_cHRM_fixed
 1520      00
 1521              	.LVL143:
 1522 019c E91FFFFF 		jmp	.L126
 1522      FF
 1523              		.p2align 4,,10
 1524 01a1 0F1F8000 		.p2align 3
 1524      000000
 1525              	.L157:
 149:fltk-1.3.4-1/png/pngwrite.c ****                   "profile matches sRGB but writing iCCP instead");
 1526              		.loc 1 149 0
 1527 01a8 BE000000 		movl	$.LC8, %esi
 1527      00
 1528 01ad 4889EF   		movq	%rbp, %rdi
 1529 01b0 E8000000 		call	png_app_warning
 1529      00
 1530              	.LVL144:
 1531 01b5 E9D3FEFF 		jmp	.L121
 1531      FF
 1532              	.LBE190:
 1533              	.LBE191:
 1534              		.cfi_endproc
 1535              	.LFE57:
 1537              		.section	.text.unlikely.png_write_info_before_PLTE
 1538              	.LCOLDE9:
 1539              		.section	.text.png_write_info_before_PLTE
 1540              	.LHOTE9:
 1541              		.section	.rodata.str1.8
 1542 00ae 0000     		.align 8
 1543              	.LC10:
 1544 00b0 56616C69 		.string	"Valid palette required for paletted images"
 1544      64207061 
 1544      6C657474 
 1544      65207265 
 1544      71756972 
 1545              		.section	.text.unlikely.png_write_info.part.7,"ax",@progbits
 1546              	.LCOLDB11:
 1547              		.section	.text.png_write_info.part.7,"ax",@progbits
 1548              	.LHOTB11:
 1549              		.p2align 4,,15
 1551              	png_write_info.part.7:
 1552              	.LFB105:
 191:fltk-1.3.4-1/png/pngwrite.c **** {
 1553              		.loc 1 191 0
 1554              		.cfi_startproc
 1555              	.LVL145:
 1556 0000 4155     		pushq	%r13
 1557              		.cfi_def_cfa_offset 16
 1558              		.cfi_offset 13, -16
 1559 0002 4154     		pushq	%r12
 1560              		.cfi_def_cfa_offset 24
 1561              		.cfi_offset 12, -24
 1562 0004 4989FD   		movq	%rdi, %r13
 1563 0007 55       		pushq	%rbp
 1564              		.cfi_def_cfa_offset 32
 1565              		.cfi_offset 6, -32
 1566 0008 53       		pushq	%rbx
 1567              		.cfi_def_cfa_offset 40
 1568              		.cfi_offset 3, -40
 1569 0009 4889F3   		movq	%rsi, %rbx
 1570 000c 4883EC08 		subq	$8, %rsp
 1571              		.cfi_def_cfa_offset 48
 202:fltk-1.3.4-1/png/pngwrite.c **** 
 1572              		.loc 1 202 0
 1573 0010 E8000000 		call	png_write_info_before_PLTE
 1573      00
 1574              	.LVL146:
 204:fltk-1.3.4-1/png/pngwrite.c ****       png_write_PLTE(png_ptr, info_ptr->palette,
 1575              		.loc 1 204 0
 1576 0015 8B4308   		movl	8(%rbx), %eax
 1577 0018 A808     		testb	$8, %al
 1578 001a 0F85F801 		jne	.L221
 1578      0000
 208:fltk-1.3.4-1/png/pngwrite.c ****       png_error(png_ptr, "Valid palette required for paletted images");
 1579              		.loc 1 208 0
 1580 0020 807B2503 		cmpb	$3, 37(%rbx)
 1581 0024 0F842803 		je	.L222
 1581      0000
 1582              	.L163:
 212:fltk-1.3.4-1/png/pngwrite.c ****    {
 1583              		.loc 1 212 0
 1584 002a A810     		testb	$16, %al
 1585 002c 7430     		je	.L164
 216:fltk-1.3.4-1/png/pngwrite.c ****           info_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
 1586              		.loc 1 216 0
 1587 002e 41F68536 		testb	$8, 310(%r13)
 1587      01000008 
 217:fltk-1.3.4-1/png/pngwrite.c ****       {
 1588              		.loc 1 217 0
 1589 0036 440FB643 		movzbl	37(%rbx), %r8d
 1589      25
 216:fltk-1.3.4-1/png/pngwrite.c ****           info_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
 1590              		.loc 1 216 0
 1591 003b 0F856701 		jne	.L223
 1591      0000
 1592              	.L219:
 1593 0041 0FB74B22 		movzwl	34(%rbx), %ecx
 1594              	.L166:
 225:fltk-1.3.4-1/png/pngwrite.c ****           info_ptr->num_trans, info_ptr->color_type);
 1595              		.loc 1 225 0
 1596 0045 488BB3B8 		movq	184(%rbx), %rsi
 1596      000000
 1597 004c 488D93C0 		leaq	192(%rbx), %rdx
 1597      000000
 1598 0053 4C89EF   		movq	%r13, %rdi
 1599 0056 E8000000 		call	png_write_tRNS
 1599      00
 1600              	.LVL147:
 1601 005b 8B4308   		movl	8(%rbx), %eax
 1602              	.L164:
 230:fltk-1.3.4-1/png/pngwrite.c ****       png_write_bKGD(png_ptr, &(info_ptr->background), info_ptr->color_type);
 1603              		.loc 1 230 0
 1604 005e A820     		testb	$32, %al
 1605 0060 0F85CA02 		jne	.L224
 1605      0000
 1606              	.L169:
 235:fltk-1.3.4-1/png/pngwrite.c ****       png_write_hIST(png_ptr, info_ptr->hist, info_ptr->num_palette);
 1607              		.loc 1 235 0
 1608 0066 A840     		testb	$64, %al
 1609 0068 0F85A202 		jne	.L225
 1609      0000
 1610              	.L170:
 240:fltk-1.3.4-1/png/pngwrite.c ****       png_write_oFFs(png_ptr, info_ptr->x_offset, info_ptr->y_offset,
 1611              		.loc 1 240 0
 1612 006e F6C401   		testb	$1, %ah
 1613 0071 0F85B901 		jne	.L226
 1613      0000
 246:fltk-1.3.4-1/png/pngwrite.c ****       png_write_pCAL(png_ptr, info_ptr->pcal_purpose, info_ptr->pcal_X0,
 1614              		.loc 1 246 0
 1615 0077 F6C404   		testb	$4, %ah
 1616 007a 0F85D701 		jne	.L227
 1616      0000
 1617              	.L172:
 253:fltk-1.3.4-1/png/pngwrite.c ****       png_write_sCAL_s(png_ptr, (int)info_ptr->scal_unit,
 1618              		.loc 1 253 0
 1619 0080 F6C440   		testb	$64, %ah
 1620 0083 0F851302 		jne	.L228
 1620      0000
 1621              	.L173:
 259:fltk-1.3.4-1/png/pngwrite.c ****       png_write_pHYs(png_ptr, info_ptr->x_pixels_per_unit,
 1622              		.loc 1 259 0
 1623 0089 A880     		testb	$-128, %al
 1624 008b 0F853302 		jne	.L229
 1624      0000
 1625              	.L174:
 265:fltk-1.3.4-1/png/pngwrite.c ****    {
 1626              		.loc 1 265 0
 1627 0091 F6C402   		testb	$2, %ah
 1628 0094 0F855102 		jne	.L230
 1628      0000
 1629              	.L175:
 273:fltk-1.3.4-1/png/pngwrite.c ****       for (i = 0; i < (int)info_ptr->splt_palettes_num; i++)
 1630              		.loc 1 273 0
 1631 009a F6C420   		testb	$32, %ah
 1632 009d 7432     		je	.L179
 1633              	.LVL148:
 274:fltk-1.3.4-1/png/pngwrite.c ****          png_write_sPLT(png_ptr, info_ptr->splt_palettes + i);
 1634              		.loc 1 274 0
 1635 009f 8B933801 		movl	312(%rbx), %edx
 1635      0000
 1636 00a5 85D2     		testl	%edx, %edx
 1637 00a7 7E28     		jle	.L179
 1638 00a9 4531E4   		xorl	%r12d, %r12d
 1639 00ac 31ED     		xorl	%ebp, %ebp
 1640              	.LVL149:
 1641 00ae 6690     		.p2align 4,,10
 1642              		.p2align 3
 1643              	.L180:
 275:fltk-1.3.4-1/png/pngwrite.c **** #endif /* sPLT */
 1644              		.loc 1 275 0
 1645 00b0 4C89E6   		movq	%r12, %rsi
 1646 00b3 4803B330 		addq	304(%rbx), %rsi
 1646      010000
 1647 00ba 4C89EF   		movq	%r13, %rdi
 274:fltk-1.3.4-1/png/pngwrite.c ****          png_write_sPLT(png_ptr, info_ptr->splt_palettes + i);
 1648              		.loc 1 274 0
 1649 00bd 83C501   		addl	$1, %ebp
 1650              	.LVL150:
 1651 00c0 4983C420 		addq	$32, %r12
 275:fltk-1.3.4-1/png/pngwrite.c **** #endif /* sPLT */
 1652              		.loc 1 275 0
 1653 00c4 E8000000 		call	png_write_sPLT
 1653      00
 1654              	.LVL151:
 274:fltk-1.3.4-1/png/pngwrite.c ****          png_write_sPLT(png_ptr, info_ptr->splt_palettes + i);
 1655              		.loc 1 274 0
 1656 00c9 3BAB3801 		cmpl	312(%rbx), %ebp
 1656      0000
 1657 00cf 7CDF     		jl	.L180
 1658              	.LVL152:
 1659              	.L179:
 280:fltk-1.3.4-1/png/pngwrite.c ****    {
 1660              		.loc 1 280 0
 1661 00d1 8B8B9400 		movl	148(%rbx), %ecx
 1661      0000
 1662 00d7 31ED     		xorl	%ebp, %ebp
 1663 00d9 4531E4   		xorl	%r12d, %r12d
 1664 00dc 85C9     		testl	%ecx, %ecx
 1665 00de 7F48     		jg	.L205
 1666 00e0 E9AB0000 		jmp	.L178
 1666      00
 1667              	.LVL153:
 1668              		.p2align 4,,10
 1669 00e5 0F1F00   		.p2align 3
 1670              	.L231:
 289:fltk-1.3.4-1/png/pngwrite.c ****              info_ptr->text[i].compression,
 1671              		.loc 1 289 0
 1672 00e8 488B5008 		movq	8(%rax), %rdx
 1673 00ec 488B4828 		movq	40(%rax), %rcx
 1674 00f0 4C89EF   		movq	%r13, %rdi
 1675 00f3 4C8B4810 		movq	16(%rax), %r9
 1676 00f7 4C8B4030 		movq	48(%rax), %r8
 1677 00fb E8000000 		call	png_write_iTXt
 1677      00
 1678              	.LVL154:
 296:fltk-1.3.4-1/png/pngwrite.c ****             info_ptr->text[i].compression = PNG_TEXT_COMPRESSION_NONE_WR;
 1679              		.loc 1 296 0
 1680 0100 4889EA   		movq	%rbp, %rdx
 1681 0103 480393A0 		addq	160(%rbx), %rdx
 1681      000000
 297:fltk-1.3.4-1/png/pngwrite.c ****          else
 1682              		.loc 1 297 0
 1683 010a 31C0     		xorl	%eax, %eax
 1684 010c 833AFF   		cmpl	$-1, (%rdx)
 1685 010f 0F95C0   		setne	%al
 1686 0112 83E803   		subl	$3, %eax
 1687 0115 8902     		movl	%eax, (%rdx)
 1688              	.L185:
 280:fltk-1.3.4-1/png/pngwrite.c ****    {
 1689              		.loc 1 280 0
 1690 0117 4183C401 		addl	$1, %r12d
 1691              	.LVL155:
 1692 011b 4883C538 		addq	$56, %rbp
 1693 011f 443BA394 		cmpl	148(%rbx), %r12d
 1693      000000
 1694 0126 7D68     		jge	.L178
 1695              	.LVL156:
 1696              	.L205:
 285:fltk-1.3.4-1/png/pngwrite.c ****       {
 1697              		.loc 1 285 0
 1698 0128 4889E8   		movq	%rbp, %rax
 1699 012b 480383A0 		addq	160(%rbx), %rax
 1699      000000
 1700 0132 8B30     		movl	(%rax), %esi
 1701 0134 83FE00   		cmpl	$0, %esi
 1702 0137 7FAF     		jg	.L231
 306:fltk-1.3.4-1/png/pngwrite.c ****       {
 1703              		.loc 1 306 0
 1704 0139 742D     		je	.L232
 319:fltk-1.3.4-1/png/pngwrite.c ****       {
 1705              		.loc 1 319 0
 1706 013b 83FEFF   		cmpl	$-1, %esi
 1707 013e 75D7     		jne	.L185
 323:fltk-1.3.4-1/png/pngwrite.c ****              info_ptr->text[i].text,
 1708              		.loc 1 323 0
 1709 0140 488B5010 		movq	16(%rax), %rdx
 1710 0144 488B7008 		movq	8(%rax), %rsi
 1711 0148 31C9     		xorl	%ecx, %ecx
 1712 014a 4C89EF   		movq	%r13, %rdi
 1713 014d E8000000 		call	png_write_tEXt
 1713      00
 1714              	.LVL157:
 327:fltk-1.3.4-1/png/pngwrite.c **** #else
 1715              		.loc 1 327 0
 1716 0152 488B83A0 		movq	160(%rbx), %rax
 1716      000000
 1717 0159 C70428FD 		movl	$-3, (%rax,%rbp)
 1717      FFFFFF
 1718 0160 EBB5     		jmp	.L185
 1719              		.p2align 4,,10
 1720 0162 660F1F44 		.p2align 3
 1720      0000
 1721              	.L232:
 310:fltk-1.3.4-1/png/pngwrite.c ****              info_ptr->text[i].text, info_ptr->text[i].compression);
 1722              		.loc 1 310 0
 1723 0168 488B5010 		movq	16(%rax), %rdx
 1724 016c 488B7008 		movq	8(%rax), %rsi
 1725 0170 31C9     		xorl	%ecx, %ecx
 1726 0172 4C89EF   		movq	%r13, %rdi
 1727 0175 E8000000 		call	png_write_zTXt
 1727      00
 1728              	.LVL158:
 313:fltk-1.3.4-1/png/pngwrite.c **** #else
 1729              		.loc 1 313 0
 1730 017a 488B83A0 		movq	160(%rbx), %rax
 1730      000000
 1731 0181 C70428FE 		movl	$-2, (%rax,%rbp)
 1731      FFFFFF
 1732 0188 EB8D     		jmp	.L185
 1733              	.LVL159:
 1734 018a 660F1F44 		.p2align 4,,10
 1734      0000
 1735              		.p2align 3
 1736              	.L178:
 1737              	.LBB192:
 1738              	.LBB193:
  27:fltk-1.3.4-1/png/pngwrite.c ****    {
 1739              		.loc 1 27 0
 1740 0190 8B832801 		movl	296(%rbx), %eax
 1740      0000
 1741 0196 85C0     		testl	%eax, %eax
 1742 0198 7556     		jne	.L233
 1743              	.LBE193:
 1744              	.LBE192:
 339:fltk-1.3.4-1/png/pngwrite.c **** 
 1745              		.loc 1 339 0
 1746 019a 4883C408 		addq	$8, %rsp
 1747              		.cfi_remember_state
 1748              		.cfi_def_cfa_offset 40
 1749 019e 5B       		popq	%rbx
 1750              		.cfi_def_cfa_offset 32
 1751              	.LVL160:
 1752 019f 5D       		popq	%rbp
 1753              		.cfi_def_cfa_offset 24
 1754 01a0 415C     		popq	%r12
 1755              		.cfi_def_cfa_offset 16
 1756 01a2 415D     		popq	%r13
 1757              		.cfi_def_cfa_offset 8
 1758              	.LVL161:
 1759 01a4 C3       		ret
 1760              	.LVL162:
 1761              		.p2align 4,,10
 1762 01a5 0F1F00   		.p2align 3
 1763              	.L223:
 1764              		.cfi_restore_state
 216:fltk-1.3.4-1/png/pngwrite.c ****           info_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
 1765              		.loc 1 216 0
 1766 01a8 4180F803 		cmpb	$3, %r8b
 1767 01ac 0F858FFE 		jne	.L219
 1767      FFFF
 1768              	.LVL163:
 1769              	.LBB196:
 220:fltk-1.3.4-1/png/pngwrite.c ****             info_ptr->trans_alpha[j] =
 1770              		.loc 1 220 0
 1771 01b2 66837B22 		cmpw	$0, 34(%rbx)
 1771      00
 1772 01b7 0F848E01 		je	.L188
 1772      0000
 1773 01bd 31D2     		xorl	%edx, %edx
 1774 01bf 31C0     		xorl	%eax, %eax
 1775              	.LVL164:
 1776              		.p2align 4,,10
 1777 01c1 0F1F8000 		.p2align 3
 1777      000000
 1778              	.L168:
 222:fltk-1.3.4-1/png/pngwrite.c ****       }
 1779              		.loc 1 222 0
 1780 01c8 4889D1   		movq	%rdx, %rcx
 1781 01cb 48038BB8 		addq	184(%rbx), %rcx
 1781      000000
 220:fltk-1.3.4-1/png/pngwrite.c ****             info_ptr->trans_alpha[j] =
 1782              		.loc 1 220 0
 1783 01d2 83C001   		addl	$1, %eax
 1784              	.LVL165:
 1785 01d5 4883C201 		addq	$1, %rdx
 221:fltk-1.3.4-1/png/pngwrite.c ****                (png_byte)(255 - info_ptr->trans_alpha[j]);
 1786              		.loc 1 221 0
 1787 01d9 F611     		notb	(%rcx)
 220:fltk-1.3.4-1/png/pngwrite.c ****             info_ptr->trans_alpha[j] =
 1788              		.loc 1 220 0
 1789 01db 0FB74B22 		movzwl	34(%rbx), %ecx
 1790 01df 39C8     		cmpl	%ecx, %eax
 1791 01e1 7CE5     		jl	.L168
 1792 01e3 440FB643 		movzbl	37(%rbx), %r8d
 1792      25
 1793 01e8 E958FEFF 		jmp	.L166
 1793      FF
 1794              	.LVL166:
 1795 01ed 0F1F00   		.p2align 4,,10
 1796              		.p2align 3
 1797              	.L233:
 1798              	.LBE196:
 339:fltk-1.3.4-1/png/pngwrite.c **** 
 1799              		.loc 1 339 0
 1800 01f0 4883C408 		addq	$8, %rsp
 1801              		.cfi_remember_state
 1802              		.cfi_def_cfa_offset 40
 1803 01f4 488D9328 		leaq	296(%rbx), %rdx
 1803      010000
 1804 01fb 488DB320 		leaq	288(%rbx), %rsi
 1804      010000
 1805              	.LBB197:
 1806              	.LBB194:
 1807 0202 4C89EF   		movq	%r13, %rdi
 1808 0205 B9020000 		movl	$2, %ecx
 1808      00
 1809              	.LBE194:
 1810              	.LBE197:
 1811 020a 5B       		popq	%rbx
 1812              		.cfi_def_cfa_offset 32
 1813              	.LVL167:
 1814 020b 5D       		popq	%rbp
 1815              		.cfi_def_cfa_offset 24
 1816 020c 415C     		popq	%r12
 1817              		.cfi_def_cfa_offset 16
 1818 020e 415D     		popq	%r13
 1819              		.cfi_def_cfa_offset 8
 1820              	.LVL168:
 1821              	.LBB198:
 1822              	.LBB195:
 1823 0210 E9000000 		jmp	write_unknown_chunks.isra.2.part.3
 1823      00
 1824              	.LVL169:
 1825              		.p2align 4,,10
 1826 0215 0F1F00   		.p2align 3
 1827              	.L221:
 1828              		.cfi_restore_state
 1829              	.LBE195:
 1830              	.LBE198:
 205:fltk-1.3.4-1/png/pngwrite.c ****           (png_uint_32)info_ptr->num_palette);
 1831              		.loc 1 205 0
 1832 0218 0FB75320 		movzwl	32(%rbx), %edx
 1833 021c 488B7318 		movq	24(%rbx), %rsi
 1834 0220 4C89EF   		movq	%r13, %rdi
 1835 0223 E8000000 		call	png_write_PLTE
 1835      00
 1836              	.LVL170:
 1837 0228 8B4308   		movl	8(%rbx), %eax
 1838 022b E9FAFDFF 		jmp	.L163
 1838      FF
 1839              		.p2align 4,,10
 1840              		.p2align 3
 1841              	.L226:
 241:fltk-1.3.4-1/png/pngwrite.c ****           info_ptr->offset_unit_type);
 1842              		.loc 1 241 0
 1843 0230 0FB68BDC 		movzbl	220(%rbx), %ecx
 1843      000000
 1844 0237 8B93D800 		movl	216(%rbx), %edx
 1844      0000
 1845 023d 4C89EF   		movq	%r13, %rdi
 1846 0240 8BB3D400 		movl	212(%rbx), %esi
 1846      0000
 1847 0246 E8000000 		call	png_write_oFFs
 1847      00
 1848              	.LVL171:
 1849 024b 8B4308   		movl	8(%rbx), %eax
 246:fltk-1.3.4-1/png/pngwrite.c ****       png_write_pCAL(png_ptr, info_ptr->pcal_purpose, info_ptr->pcal_X0,
 1850              		.loc 1 246 0
 1851 024e F6C404   		testb	$4, %ah
 1852 0251 0F8429FE 		je	.L172
 1852      FFFF
 1853              	.L227:
 247:fltk-1.3.4-1/png/pngwrite.c ****           info_ptr->pcal_X1, info_ptr->pcal_type, info_ptr->pcal_nparams,
 1854              		.loc 1 247 0
 1855 0257 440FB68B 		movzbl	281(%rbx), %r9d
 1855      19010000 
 1856 025f 440FB683 		movzbl	280(%rbx), %r8d
 1856      18010000 
 1857 0267 4C89EF   		movq	%r13, %rdi
 1858 026a 488BB3F8 		movq	248(%rbx), %rsi
 1858      000000
 1859 0271 8B8B0401 		movl	260(%rbx), %ecx
 1859      0000
 1860 0277 8B930001 		movl	256(%rbx), %edx
 1860      0000
 1861 027d FFB31001 		pushq	272(%rbx)
 1861      0000
 1862              		.cfi_def_cfa_offset 56
 1863 0283 FFB30801 		pushq	264(%rbx)
 1863      0000
 1864              		.cfi_def_cfa_offset 64
 1865 0289 E8000000 		call	png_write_pCAL
 1865      00
 1866              	.LVL172:
 1867 028e 8B4308   		movl	8(%rbx), %eax
 1868 0291 5E       		popq	%rsi
 1869              		.cfi_def_cfa_offset 56
 1870 0292 5F       		popq	%rdi
 1871              		.cfi_def_cfa_offset 48
 253:fltk-1.3.4-1/png/pngwrite.c ****       png_write_sCAL_s(png_ptr, (int)info_ptr->scal_unit,
 1872              		.loc 1 253 0
 1873 0293 F6C440   		testb	$64, %ah
 1874 0296 0F84EDFD 		je	.L173
 1874      FFFF
 1875              	.L228:
 254:fltk-1.3.4-1/png/pngwrite.c ****           info_ptr->scal_s_width, info_ptr->scal_s_height);
 1876              		.loc 1 254 0
 1877 029c 0FB6B33C 		movzbl	316(%rbx), %esi
 1877      010000
 1878 02a3 488B8B48 		movq	328(%rbx), %rcx
 1878      010000
 1879 02aa 4C89EF   		movq	%r13, %rdi
 1880 02ad 488B9340 		movq	320(%rbx), %rdx
 1880      010000
 1881 02b4 E8000000 		call	png_write_sCAL_s
 1881      00
 1882              	.LVL173:
 1883 02b9 8B4308   		movl	8(%rbx), %eax
 259:fltk-1.3.4-1/png/pngwrite.c ****       png_write_pHYs(png_ptr, info_ptr->x_pixels_per_unit,
 1884              		.loc 1 259 0
 1885 02bc A880     		testb	$-128, %al
 1886 02be 0F84CDFD 		je	.L174
 1886      FFFF
 1887              	.L229:
 260:fltk-1.3.4-1/png/pngwrite.c ****           info_ptr->y_pixels_per_unit, info_ptr->phys_unit_type);
 1888              		.loc 1 260 0
 1889 02c4 0FB68BE8 		movzbl	232(%rbx), %ecx
 1889      000000
 1890 02cb 8B93E400 		movl	228(%rbx), %edx
 1890      0000
 1891 02d1 4C89EF   		movq	%r13, %rdi
 1892 02d4 8BB3E000 		movl	224(%rbx), %esi
 1892      0000
 1893 02da E8000000 		call	png_write_pHYs
 1893      00
 1894              	.LVL174:
 1895 02df 8B4308   		movl	8(%rbx), %eax
 265:fltk-1.3.4-1/png/pngwrite.c ****    {
 1896              		.loc 1 265 0
 1897 02e2 F6C402   		testb	$2, %ah
 1898 02e5 0F84AFFD 		je	.L175
 1898      FFFF
 1899              	.L230:
 267:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->mode |= PNG_WROTE_tIME;
 1900              		.loc 1 267 0
 1901 02eb 488DB3A8 		leaq	168(%rbx), %rsi
 1901      000000
 1902 02f2 4C89EF   		movq	%r13, %rdi
 1903 02f5 E8000000 		call	png_write_tIME
 1903      00
 1904              	.LVL175:
 268:fltk-1.3.4-1/png/pngwrite.c ****    }
 1905              		.loc 1 268 0
 1906 02fa 41818D2C 		orl	$512, 300(%r13)
 1906      01000000 
 1906      020000
 1907 0305 8B4308   		movl	8(%rbx), %eax
 1908 0308 E98DFDFF 		jmp	.L175
 1908      FF
 1909 030d 0F1F00   		.p2align 4,,10
 1910              		.p2align 3
 1911              	.L225:
 236:fltk-1.3.4-1/png/pngwrite.c **** #endif
 1912              		.loc 1 236 0
 1913 0310 0FB75320 		movzwl	32(%rbx), %edx
 1914 0314 488BB3F0 		movq	240(%rbx), %rsi
 1914      000000
 1915 031b 4C89EF   		movq	%r13, %rdi
 1916 031e E8000000 		call	png_write_hIST
 1916      00
 1917              	.LVL176:
 1918 0323 8B4308   		movl	8(%rbx), %eax
 1919 0326 E943FDFF 		jmp	.L170
 1919      FF
 1920 032b 0F1F4400 		.p2align 4,,10
 1920      00
 1921              		.p2align 3
 1922              	.L224:
 231:fltk-1.3.4-1/png/pngwrite.c **** #endif
 1923              		.loc 1 231 0
 1924 0330 0FB65325 		movzbl	37(%rbx), %edx
 1925 0334 488DB3CA 		leaq	202(%rbx), %rsi
 1925      000000
 1926 033b 4C89EF   		movq	%r13, %rdi
 1927 033e E8000000 		call	png_write_bKGD
 1927      00
 1928              	.LVL177:
 1929 0343 8B4308   		movl	8(%rbx), %eax
 1930 0346 E91BFDFF 		jmp	.L169
 1930      FF
 1931              	.LVL178:
 1932              	.L188:
 1933              	.LBB199:
 220:fltk-1.3.4-1/png/pngwrite.c ****             info_ptr->trans_alpha[j] =
 1934              		.loc 1 220 0
 1935 034b 31C9     		xorl	%ecx, %ecx
 1936 034d E9F3FCFF 		jmp	.L166
 1936      FF
 1937              	.LVL179:
 1938              	.L222:
 1939              	.LBE199:
 209:fltk-1.3.4-1/png/pngwrite.c **** 
 1940              		.loc 1 209 0
 1941 0352 BE000000 		movl	$.LC10, %esi
 1941      00
 1942 0357 4C89EF   		movq	%r13, %rdi
 1943 035a E8000000 		call	png_error
 1943      00
 1944              	.LVL180:
 1945              		.cfi_endproc
 1946              	.LFE105:
 1948              		.section	.text.unlikely.png_write_info.part.7
 1949              	.LCOLDE11:
 1950              		.section	.text.png_write_info.part.7
 1951              	.LHOTE11:
 1952              		.section	.text.unlikely.png_write_info,"ax",@progbits
 1953              	.LCOLDB12:
 1954              		.section	.text.png_write_info,"ax",@progbits
 1955              	.LHOTB12:
 1956              		.p2align 4,,15
 1957              		.globl	png_write_info
 1959              	png_write_info:
 1960              	.LFB58:
 192:fltk-1.3.4-1/png/pngwrite.c **** #if defined(PNG_WRITE_TEXT_SUPPORTED) || defined(PNG_WRITE_sPLT_SUPPORTED)
 1961              		.loc 1 192 0
 1962              		.cfi_startproc
 1963              	.LVL181:
 199:fltk-1.3.4-1/png/pngwrite.c ****       return;
 1964              		.loc 1 199 0
 1965 0000 4885FF   		testq	%rdi, %rdi
 1966 0003 740B     		je	.L234
 1967 0005 4885F6   		testq	%rsi, %rsi
 1968 0008 7406     		je	.L234
 1969 000a E9000000 		jmp	png_write_info.part.7
 1969      00
 1970              	.LVL182:
 1971 000f 90       		.p2align 4,,10
 1972              		.p2align 3
 1973              	.L234:
 1974 0010 F3C3     		rep ret
 1975              		.cfi_endproc
 1976              	.LFE58:
 1978              		.section	.text.unlikely.png_write_info
 1979              	.LCOLDE12:
 1980              		.section	.text.png_write_info
 1981              	.LHOTE12:
 1982              		.section	.rodata.str1.1,"aMS",@progbits,1
 1983              	.LC13:
 1984 0000 4E6F2049 		.string	"No IDATs written into file"
 1984      44415473 
 1984      20777269 
 1984      7474656E 
 1984      20696E74 
 1985              		.section	.rodata.str1.8
 1986 00db 00000000 		.align 8
 1986      00
 1987              	.LC14:
 1988 00e0 57726F74 		.string	"Wrote palette index exceeding num_palette"
 1988      65207061 
 1988      6C657474 
 1988      6520696E 
 1988      64657820 
 1989              		.section	.text.unlikely.png_write_end,"ax",@progbits
 1990              	.LCOLDB15:
 1991              		.section	.text.png_write_end,"ax",@progbits
 1992              	.LHOTB15:
 1993              		.p2align 4,,15
 1994              		.globl	png_write_end
 1996              	png_write_end:
 1997              	.LFB59:
 348:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_write_end");
 1998              		.loc 1 348 0
 1999              		.cfi_startproc
 2000              	.LVL183:
 351:fltk-1.3.4-1/png/pngwrite.c ****       return;
 2001              		.loc 1 351 0
 2002 0000 4885FF   		testq	%rdi, %rdi
 2003 0003 0F847701 		je	.L258
 2003      0000
 348:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_write_end");
 2004              		.loc 1 348 0
 2005 0009 4155     		pushq	%r13
 2006              		.cfi_def_cfa_offset 16
 2007              		.cfi_offset 13, -16
 2008 000b 4154     		pushq	%r12
 2009              		.cfi_def_cfa_offset 24
 2010              		.cfi_offset 12, -24
 2011 000d 4989FD   		movq	%rdi, %r13
 2012 0010 55       		pushq	%rbp
 2013              		.cfi_def_cfa_offset 32
 2014              		.cfi_offset 6, -32
 2015 0011 53       		pushq	%rbx
 2016              		.cfi_def_cfa_offset 40
 2017              		.cfi_offset 3, -40
 2018 0012 4889F5   		movq	%rsi, %rbp
 2019 0015 4883EC08 		subq	$8, %rsp
 2020              		.cfi_def_cfa_offset 48
 354:fltk-1.3.4-1/png/pngwrite.c ****       png_error(png_ptr, "No IDATs written into file");
 2021              		.loc 1 354 0
 2022 0019 F6872C01 		testb	$4, 300(%rdi)
 2022      000004
 2023 0020 0F845C01 		je	.L260
 2023      0000
 358:fltk-1.3.4-1/png/pngwrite.c ****       png_benign_error(png_ptr, "Wrote palette index exceeding num_palette");
 2024              		.loc 1 358 0
 2025 0026 0FB78768 		movzwl	616(%rdi), %eax
 2025      020000
 2026 002d 39876C02 		cmpl	%eax, 620(%rdi)
 2026      0000
 2027 0033 0F8F2F01 		jg	.L261
 2027      0000
 2028              	.LVL184:
 2029              	.L239:
 363:fltk-1.3.4-1/png/pngwrite.c ****    {
 2030              		.loc 1 363 0
 2031 0039 4885ED   		testq	%rbp, %rbp
 2032 003c 0F84E300 		je	.L241
 2032      0000
 2033              	.LBB200:
 370:fltk-1.3.4-1/png/pngwrite.c ****           (png_ptr->mode & PNG_WROTE_tIME) == 0)
 2034              		.loc 1 370 0
 2035 0042 F6450902 		testb	$2, 9(%rbp)
 2036 0046 0F85F400 		jne	.L262
 2036      0000
 2037              	.L242:
 2038              	.LVL185:
 377:fltk-1.3.4-1/png/pngwrite.c ****       {
 2039              		.loc 1 377 0 discriminator 1
 2040 004c 8B959400 		movl	148(%rbp), %edx
 2040      0000
 2041 0052 31DB     		xorl	%ebx, %ebx
 2042 0054 4531E4   		xorl	%r12d, %r12d
 2043 0057 85D2     		testl	%edx, %edx
 2044 0059 7F45     		jg	.L254
 2045 005b E9A00000 		jmp	.L251
 2045      00
 2046              	.LVL186:
 2047              		.p2align 4,,10
 2048              		.p2align 3
 2049              	.L263:
 386:fltk-1.3.4-1/png/pngwrite.c ****                 info_ptr->text[i].compression,
 2050              		.loc 1 386 0
 2051 0060 488B5008 		movq	8(%rax), %rdx
 2052 0064 488B4828 		movq	40(%rax), %rcx
 2053 0068 4C89EF   		movq	%r13, %rdi
 2054 006b 4C8B4810 		movq	16(%rax), %r9
 2055 006f 4C8B4030 		movq	48(%rax), %r8
 2056 0073 E8000000 		call	png_write_iTXt
 2056      00
 2057              	.LVL187:
 393:fltk-1.3.4-1/png/pngwrite.c ****                info_ptr->text[i].compression = PNG_TEXT_COMPRESSION_NONE_WR;
 2058              		.loc 1 393 0
 2059 0078 4889DA   		movq	%rbx, %rdx
 2060 007b 480395A0 		addq	160(%rbp), %rdx
 2060      000000
 394:fltk-1.3.4-1/png/pngwrite.c ****             else
 2061              		.loc 1 394 0
 2062 0082 31C0     		xorl	%eax, %eax
 2063 0084 833AFF   		cmpl	$-1, (%rdx)
 2064 0087 0F95C0   		setne	%al
 2065 008a 83E803   		subl	$3, %eax
 2066 008d 8902     		movl	%eax, (%rdx)
 2067              	.L248:
 377:fltk-1.3.4-1/png/pngwrite.c ****       {
 2068              		.loc 1 377 0 discriminator 2
 2069 008f 4183C401 		addl	$1, %r12d
 2070              	.LVL188:
 2071 0093 4883C338 		addq	$56, %rbx
 2072 0097 4439A594 		cmpl	%r12d, 148(%rbp)
 2072      000000
 2073 009e 7E60     		jle	.L251
 2074              	.LVL189:
 2075              	.L254:
 382:fltk-1.3.4-1/png/pngwrite.c ****          {
 2076              		.loc 1 382 0
 2077 00a0 4889D8   		movq	%rbx, %rax
 2078 00a3 480385A0 		addq	160(%rbp), %rax
 2078      000000
 2079 00aa 8B30     		movl	(%rax), %esi
 2080 00ac 83FE00   		cmpl	$0, %esi
 2081 00af 7FAF     		jg	.L263
 402:fltk-1.3.4-1/png/pngwrite.c ****          {
 2082              		.loc 1 402 0
 2083 00b1 7525     		jne	.L249
 406:fltk-1.3.4-1/png/pngwrite.c ****                 info_ptr->text[i].text, info_ptr->text[i].compression);
 2084              		.loc 1 406 0
 2085 00b3 488B5010 		movq	16(%rax), %rdx
 2086 00b7 488B7008 		movq	8(%rax), %rsi
 2087 00bb 31C9     		xorl	%ecx, %ecx
 2088 00bd 4C89EF   		movq	%r13, %rdi
 2089 00c0 E8000000 		call	png_write_zTXt
 2089      00
 2090              	.LVL190:
 409:fltk-1.3.4-1/png/pngwrite.c **** #else
 2091              		.loc 1 409 0
 2092 00c5 488B85A0 		movq	160(%rbp), %rax
 2092      000000
 2093 00cc C70418FE 		movl	$-2, (%rax,%rbx)
 2093      FFFFFF
 2094 00d3 EBBA     		jmp	.L248
 2095              		.p2align 4,,10
 2096 00d5 0F1F00   		.p2align 3
 2097              	.L249:
 415:fltk-1.3.4-1/png/pngwrite.c ****          {
 2098              		.loc 1 415 0
 2099 00d8 83FEFF   		cmpl	$-1, %esi
 2100 00db 75B2     		jne	.L248
 419:fltk-1.3.4-1/png/pngwrite.c ****                 info_ptr->text[i].text, 0);
 2101              		.loc 1 419 0
 2102 00dd 488B5010 		movq	16(%rax), %rdx
 2103 00e1 488B7008 		movq	8(%rax), %rsi
 2104 00e5 31C9     		xorl	%ecx, %ecx
 2105 00e7 4C89EF   		movq	%r13, %rdi
 2106 00ea E8000000 		call	png_write_tEXt
 2106      00
 2107              	.LVL191:
 422:fltk-1.3.4-1/png/pngwrite.c **** #else
 2108              		.loc 1 422 0
 2109 00ef 488B85A0 		movq	160(%rbp), %rax
 2109      000000
 2110 00f6 C70418FD 		movl	$-3, (%rax,%rbx)
 2110      FFFFFF
 2111 00fd EB90     		jmp	.L248
 2112              	.LVL192:
 2113 00ff 90       		.p2align 4,,10
 2114              		.p2align 3
 2115              	.L251:
 2116              	.LBB201:
 2117              	.LBB202:
  27:fltk-1.3.4-1/png/pngwrite.c ****    {
 2118              		.loc 1 27 0
 2119 0100 8B852801 		movl	296(%rbp), %eax
 2119      0000
 2120 0106 85C0     		testl	%eax, %eax
 2121 0108 741B     		je	.L241
 2122 010a 488D9528 		leaq	296(%rbp), %rdx
 2122      010000
 2123 0111 488DB520 		leaq	288(%rbp), %rsi
 2123      010000
 2124 0118 B9080000 		movl	$8, %ecx
 2124      00
 2125 011d 4C89EF   		movq	%r13, %rdi
 2126 0120 E8000000 		call	write_unknown_chunks.isra.2.part.3
 2126      00
 2127              	.LVL193:
 2128              	.L241:
 2129              	.LBE202:
 2130              	.LBE201:
 2131              	.LBE200:
 434:fltk-1.3.4-1/png/pngwrite.c **** 
 2132              		.loc 1 434 0
 2133 0125 41838D2C 		orl	$8, 300(%r13)
 2133      01000008 
 451:fltk-1.3.4-1/png/pngwrite.c **** 
 2134              		.loc 1 451 0
 2135 012d 4883C408 		addq	$8, %rsp
 2136              		.cfi_remember_state
 2137              		.cfi_def_cfa_offset 40
 437:fltk-1.3.4-1/png/pngwrite.c **** 
 2138              		.loc 1 437 0
 2139 0131 4C89EF   		movq	%r13, %rdi
 451:fltk-1.3.4-1/png/pngwrite.c **** 
 2140              		.loc 1 451 0
 2141 0134 5B       		popq	%rbx
 2142              		.cfi_restore 3
 2143              		.cfi_def_cfa_offset 32
 2144 0135 5D       		popq	%rbp
 2145              		.cfi_restore 6
 2146              		.cfi_def_cfa_offset 24
 2147              	.LVL194:
 2148 0136 415C     		popq	%r12
 2149              		.cfi_restore 12
 2150              		.cfi_def_cfa_offset 16
 2151 0138 415D     		popq	%r13
 2152              		.cfi_restore 13
 2153              		.cfi_def_cfa_offset 8
 2154              	.LVL195:
 437:fltk-1.3.4-1/png/pngwrite.c **** 
 2155              		.loc 1 437 0
 2156 013a E9000000 		jmp	png_write_IEND
 2156      00
 2157              	.LVL196:
 2158 013f 90       		.p2align 4,,10
 2159              		.p2align 3
 2160              	.L262:
 2161              		.cfi_restore_state
 2162              	.LBB203:
 370:fltk-1.3.4-1/png/pngwrite.c ****           (png_ptr->mode & PNG_WROTE_tIME) == 0)
 2163              		.loc 1 370 0 discriminator 1
 2164 0140 41F6852D 		testb	$2, 301(%r13)
 2164      01000002 
 2165 0148 0F85FEFE 		jne	.L242
 2165      FFFF
 372:fltk-1.3.4-1/png/pngwrite.c **** 
 2166              		.loc 1 372 0
 2167 014e 488DB5A8 		leaq	168(%rbp), %rsi
 2167      000000
 2168 0155 4C89EF   		movq	%r13, %rdi
 2169 0158 E8000000 		call	png_write_tIME
 2169      00
 2170              	.LVL197:
 2171 015d E9EAFEFF 		jmp	.L242
 2171      FF
 2172              	.LVL198:
 2173              		.p2align 4,,10
 2174 0162 660F1F44 		.p2align 3
 2174      0000
 2175              	.L261:
 2176              	.LBE203:
 359:fltk-1.3.4-1/png/pngwrite.c **** #endif
 2177              		.loc 1 359 0
 2178 0168 BE000000 		movl	$.LC14, %esi
 2178      00
 2179              	.LVL199:
 2180 016d E8000000 		call	png_benign_error
 2180      00
 2181              	.LVL200:
 2182 0172 E9C2FEFF 		jmp	.L239
 2182      FF
 2183              	.LVL201:
 2184 0177 660F1F84 		.p2align 4,,10
 2184      00000000 
 2184      00
 2185              		.p2align 3
 2186              	.L258:
 2187              		.cfi_def_cfa_offset 8
 2188              		.cfi_restore 3
 2189              		.cfi_restore 6
 2190              		.cfi_restore 12
 2191              		.cfi_restore 13
 2192 0180 F3C3     		rep ret
 2193              	.L260:
 2194              		.cfi_def_cfa_offset 48
 2195              		.cfi_offset 3, -40
 2196              		.cfi_offset 6, -32
 2197              		.cfi_offset 12, -24
 2198              		.cfi_offset 13, -16
 355:fltk-1.3.4-1/png/pngwrite.c **** 
 2199              		.loc 1 355 0
 2200 0182 BE000000 		movl	$.LC13, %esi
 2200      00
 2201              	.LVL202:
 2202 0187 E8000000 		call	png_error
 2202      00
 2203              	.LVL203:
 2204              		.cfi_endproc
 2205              	.LFE59:
 2207              		.section	.text.unlikely.png_write_end
 2208              	.LCOLDE15:
 2209              		.section	.text.png_write_end
 2210              	.LHOTE15:
 2211              		.section	.text.unlikely.png_convert_from_struct_tm,"ax",@progbits
 2212              	.LCOLDB16:
 2213              		.section	.text.png_convert_from_struct_tm,"ax",@progbits
 2214              	.LHOTB16:
 2215              		.p2align 4,,15
 2216              		.globl	png_convert_from_struct_tm
 2218              	png_convert_from_struct_tm:
 2219              	.LFB60:
 456:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_convert_from_struct_tm");
 2220              		.loc 1 456 0
 2221              		.cfi_startproc
 2222              	.LVL204:
 459:fltk-1.3.4-1/png/pngwrite.c ****    ptime->month = (png_byte)(ttime->tm_mon + 1);
 2223              		.loc 1 459 0
 2224 0000 0FB74614 		movzwl	20(%rsi), %eax
 2225 0004 66056C07 		addw	$1900, %ax
 2226 0008 668907   		movw	%ax, (%rdi)
 460:fltk-1.3.4-1/png/pngwrite.c ****    ptime->day = (png_byte)ttime->tm_mday;
 2227              		.loc 1 460 0
 2228 000b 0FB64610 		movzbl	16(%rsi), %eax
 2229 000f 83C001   		addl	$1, %eax
 2230 0012 884702   		movb	%al, 2(%rdi)
 461:fltk-1.3.4-1/png/pngwrite.c ****    ptime->hour = (png_byte)ttime->tm_hour;
 2231              		.loc 1 461 0
 2232 0015 8B460C   		movl	12(%rsi), %eax
 2233 0018 884703   		movb	%al, 3(%rdi)
 462:fltk-1.3.4-1/png/pngwrite.c ****    ptime->minute = (png_byte)ttime->tm_min;
 2234              		.loc 1 462 0
 2235 001b 8B4608   		movl	8(%rsi), %eax
 2236 001e 884704   		movb	%al, 4(%rdi)
 463:fltk-1.3.4-1/png/pngwrite.c ****    ptime->second = (png_byte)ttime->tm_sec;
 2237              		.loc 1 463 0
 2238 0021 8B4604   		movl	4(%rsi), %eax
 2239 0024 884705   		movb	%al, 5(%rdi)
 464:fltk-1.3.4-1/png/pngwrite.c **** }
 2240              		.loc 1 464 0
 2241 0027 8B06     		movl	(%rsi), %eax
 2242 0029 884706   		movb	%al, 6(%rdi)
 2243 002c C3       		ret
 2244              		.cfi_endproc
 2245              	.LFE60:
 2247              		.section	.text.unlikely.png_convert_from_struct_tm
 2248              	.LCOLDE16:
 2249              		.section	.text.png_convert_from_struct_tm
 2250              	.LHOTE16:
 2251              		.section	.text.unlikely.png_convert_from_time_t,"ax",@progbits
 2252              	.LCOLDB17:
 2253              		.section	.text.png_convert_from_time_t,"ax",@progbits
 2254              	.LHOTB17:
 2255              		.p2align 4,,15
 2256              		.globl	png_convert_from_time_t
 2258              	png_convert_from_time_t:
 2259              	.LFB61:
 469:fltk-1.3.4-1/png/pngwrite.c ****    struct tm *tbuf;
 2260              		.loc 1 469 0
 2261              		.cfi_startproc
 2262              	.LVL205:
 2263 0000 53       		pushq	%rbx
 2264              		.cfi_def_cfa_offset 16
 2265              		.cfi_offset 3, -16
 2266 0001 4889FB   		movq	%rdi, %rbx
 2267 0004 4883EC10 		subq	$16, %rsp
 2268              		.cfi_def_cfa_offset 32
 474:fltk-1.3.4-1/png/pngwrite.c ****    png_convert_from_struct_tm(ptime, tbuf);
 2269              		.loc 1 474 0
 2270 0008 488D7C24 		leaq	8(%rsp), %rdi
 2270      08
 2271              	.LVL206:
 469:fltk-1.3.4-1/png/pngwrite.c ****    struct tm *tbuf;
 2272              		.loc 1 469 0
 2273 000d 48897424 		movq	%rsi, 8(%rsp)
 2273      08
 474:fltk-1.3.4-1/png/pngwrite.c ****    png_convert_from_struct_tm(ptime, tbuf);
 2274              		.loc 1 474 0
 2275 0012 E8000000 		call	gmtime
 2275      00
 2276              	.LVL207:
 2277              	.LBB204:
 2278              	.LBB205:
 459:fltk-1.3.4-1/png/pngwrite.c ****    ptime->month = (png_byte)(ttime->tm_mon + 1);
 2279              		.loc 1 459 0
 2280 0017 0FB74814 		movzwl	20(%rax), %ecx
 2281 001b 8D916C07 		leal	1900(%rcx), %edx
 2281      0000
 2282 0021 668913   		movw	%dx, (%rbx)
 460:fltk-1.3.4-1/png/pngwrite.c ****    ptime->day = (png_byte)ttime->tm_mday;
 2283              		.loc 1 460 0
 2284 0024 0FB67010 		movzbl	16(%rax), %esi
 2285 0028 8D5601   		leal	1(%rsi), %edx
 2286 002b 885302   		movb	%dl, 2(%rbx)
 461:fltk-1.3.4-1/png/pngwrite.c ****    ptime->hour = (png_byte)ttime->tm_hour;
 2287              		.loc 1 461 0
 2288 002e 8B500C   		movl	12(%rax), %edx
 2289 0031 885303   		movb	%dl, 3(%rbx)
 462:fltk-1.3.4-1/png/pngwrite.c ****    ptime->minute = (png_byte)ttime->tm_min;
 2290              		.loc 1 462 0
 2291 0034 8B5008   		movl	8(%rax), %edx
 2292 0037 885304   		movb	%dl, 4(%rbx)
 463:fltk-1.3.4-1/png/pngwrite.c ****    ptime->second = (png_byte)ttime->tm_sec;
 2293              		.loc 1 463 0
 2294 003a 8B5004   		movl	4(%rax), %edx
 2295 003d 885305   		movb	%dl, 5(%rbx)
 464:fltk-1.3.4-1/png/pngwrite.c **** }
 2296              		.loc 1 464 0
 2297 0040 8B00     		movl	(%rax), %eax
 2298              	.LVL208:
 2299 0042 884306   		movb	%al, 6(%rbx)
 2300              	.LVL209:
 2301              	.LBE205:
 2302              	.LBE204:
 476:fltk-1.3.4-1/png/pngwrite.c **** #endif
 2303              		.loc 1 476 0
 2304 0045 4883C410 		addq	$16, %rsp
 2305              		.cfi_def_cfa_offset 16
 2306 0049 5B       		popq	%rbx
 2307              		.cfi_def_cfa_offset 8
 2308              	.LVL210:
 2309 004a C3       		ret
 2310              		.cfi_endproc
 2311              	.LFE61:
 2313              		.section	.text.unlikely.png_convert_from_time_t
 2314              	.LCOLDE17:
 2315              		.section	.text.png_convert_from_time_t
 2316              	.LHOTE17:
 2317              		.section	.text.unlikely.png_create_write_struct_2,"ax",@progbits
 2318              	.LCOLDB18:
 2319              		.section	.text.png_create_write_struct_2,"ax",@progbits
 2320              	.LHOTB18:
 2321              		.p2align 4,,15
 2322              		.globl	png_create_write_struct_2
 2324              	png_create_write_struct_2:
 2325              	.LFB63:
 497:fltk-1.3.4-1/png/pngwrite.c ****    png_structrp png_ptr = png_create_png_struct(user_png_ver, error_ptr,
 2326              		.loc 1 497 0
 2327              		.cfi_startproc
 2328              	.LVL211:
 2329 0000 53       		pushq	%rbx
 2330              		.cfi_def_cfa_offset 16
 2331              		.cfi_offset 3, -16
 498:fltk-1.3.4-1/png/pngwrite.c ****        error_fn, warn_fn, mem_ptr, malloc_fn, free_fn);
 2332              		.loc 1 498 0
 2333 0001 4883EC08 		subq	$8, %rsp
 2334              		.cfi_def_cfa_offset 24
 2335 0005 FF742418 		pushq	24(%rsp)
 2336              		.cfi_def_cfa_offset 32
 2337 0009 E8000000 		call	png_create_png_struct
 2337      00
 2338              	.LVL212:
 501:fltk-1.3.4-1/png/pngwrite.c ****    {
 2339              		.loc 1 501 0
 2340 000e 4885C0   		testq	%rax, %rax
 498:fltk-1.3.4-1/png/pngwrite.c ****        error_fn, warn_fn, mem_ptr, malloc_fn, free_fn);
 2341              		.loc 1 498 0
 2342 0011 4889C3   		movq	%rax, %rbx
 2343              	.LVL213:
 501:fltk-1.3.4-1/png/pngwrite.c ****    {
 2344              		.loc 1 501 0
 2345 0014 5A       		popq	%rdx
 2346              		.cfi_def_cfa_offset 24
 2347 0015 59       		popq	%rcx
 2348              		.cfi_def_cfa_offset 16
 2349 0016 0F848600 		je	.L268
 2349      0000
 542:fltk-1.3.4-1/png/pngwrite.c **** #endif
 2350              		.loc 1 542 0
 2351 001c 81883001 		orl	$2097152, 304(%rax)
 2351      00000000 
 2351      2000
 506:fltk-1.3.4-1/png/pngwrite.c **** 
 2352              		.loc 1 506 0
 2353 0026 C780B801 		movl	$8192, 440(%rax)
 2353      00000020 
 2353      0000
 549:fltk-1.3.4-1/png/pngwrite.c ****    }
 2354              		.loc 1 549 0
 2355 0030 31C9     		xorl	%ecx, %ecx
 512:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->zlib_level = PNG_Z_DEFAULT_COMPRESSION;
 2356              		.loc 1 512 0
 2357 0032 C780CC01 		movl	$1, 460(%rax)
 2357      00000100 
 2357      0000
 513:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->zlib_mem_level = 8;
 2358              		.loc 1 513 0
 2359 003c C780BC01 		movl	$-1, 444(%rax)
 2359      0000FFFF 
 2359      FFFF
 549:fltk-1.3.4-1/png/pngwrite.c ****    }
 2360              		.loc 1 549 0
 2361 0046 31D2     		xorl	%edx, %edx
 514:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->zlib_window_bits = 15;
 2362              		.loc 1 514 0
 2363 0048 C780C801 		movl	$8, 456(%rax)
 2363      00000800 
 2363      0000
 515:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->zlib_method = 8;
 2364              		.loc 1 515 0
 2365 0052 C780C401 		movl	$15, 452(%rax)
 2365      00000F00 
 2365      0000
 549:fltk-1.3.4-1/png/pngwrite.c ****    }
 2366              		.loc 1 549 0
 2367 005c 31F6     		xorl	%esi, %esi
 516:fltk-1.3.4-1/png/pngwrite.c **** 
 2368              		.loc 1 516 0
 2369 005e C780C001 		movl	$8, 448(%rax)
 2369      00000800 
 2369      0000
 549:fltk-1.3.4-1/png/pngwrite.c ****    }
 2370              		.loc 1 549 0
 2371 0068 4889C7   		movq	%rax, %rdi
 519:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->zlib_text_level = PNG_TEXT_Z_DEFAULT_COMPRESSION;
 2372              		.loc 1 519 0
 2373 006b C780E001 		movl	$0, 480(%rax)
 2373      00000000 
 2373      0000
 520:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->zlib_text_mem_level = 8;
 2374              		.loc 1 520 0
 2375 0075 C780D001 		movl	$-1, 464(%rax)
 2375      0000FFFF 
 2375      FFFF
 521:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->zlib_text_window_bits = 15;
 2376              		.loc 1 521 0
 2377 007f C780DC01 		movl	$8, 476(%rax)
 2377      00000800 
 2377      0000
 522:fltk-1.3.4-1/png/pngwrite.c ****       png_ptr->zlib_text_method = 8;
 2378              		.loc 1 522 0
 2379 0089 C780D801 		movl	$15, 472(%rax)
 2379      00000F00 
 2379      0000
 523:fltk-1.3.4-1/png/pngwrite.c **** #endif /* WRITE_COMPRESSED_TEXT */
 2380              		.loc 1 523 0
 2381 0093 C780D401 		movl	$8, 468(%rax)
 2381      00000800 
 2381      0000
 549:fltk-1.3.4-1/png/pngwrite.c ****    }
 2382              		.loc 1 549 0
 2383 009d E8000000 		call	png_set_write_fn
 2383      00
 2384              	.LVL214:
 2385              	.L268:
 553:fltk-1.3.4-1/png/pngwrite.c **** 
 2386              		.loc 1 553 0
 2387 00a2 4889D8   		movq	%rbx, %rax
 2388 00a5 5B       		popq	%rbx
 2389              		.cfi_def_cfa_offset 8
 2390              	.LVL215:
 2391 00a6 C3       		ret
 2392              		.cfi_endproc
 2393              	.LFE63:
 2395              		.section	.text.unlikely.png_create_write_struct_2
 2396              	.LCOLDE18:
 2397              		.section	.text.png_create_write_struct_2
 2398              	.LHOTE18:
 2399              		.section	.text.unlikely.png_create_write_struct,"ax",@progbits
 2400              	.LCOLDB19:
 2401              		.section	.text.png_create_write_struct,"ax",@progbits
 2402              	.LHOTB19:
 2403              		.p2align 4,,15
 2404              		.globl	png_create_write_struct
 2406              	png_create_write_struct:
 2407              	.LFB62:
 483:fltk-1.3.4-1/png/pngwrite.c **** #ifndef PNG_USER_MEM_SUPPORTED
 2408              		.loc 1 483 0
 2409              		.cfi_startproc
 2410              	.LVL216:
 2411 0000 4883EC10 		subq	$16, %rsp
 2412              		.cfi_def_cfa_offset 24
 488:fltk-1.3.4-1/png/pngwrite.c ****        warn_fn, NULL, NULL, NULL);
 2413              		.loc 1 488 0
 2414 0004 4531C9   		xorl	%r9d, %r9d
 2415 0007 4531C0   		xorl	%r8d, %r8d
 2416 000a 6A00     		pushq	$0
 2417              		.cfi_def_cfa_offset 32
 2418 000c E8000000 		call	png_create_write_struct_2
 2418      00
 2419              	.LVL217:
 490:fltk-1.3.4-1/png/pngwrite.c **** 
 2420              		.loc 1 490 0
 2421 0011 4883C418 		addq	$24, %rsp
 2422              		.cfi_def_cfa_offset 8
 2423 0015 C3       		ret
 2424              		.cfi_endproc
 2425              	.LFE62:
 2427              		.section	.text.unlikely.png_create_write_struct
 2428              	.LCOLDE19:
 2429              		.section	.text.png_create_write_struct
 2430              	.LHOTE19:
 2431              		.section	.rodata.str1.8
 2432 010a 00000000 		.align 8
 2432      0000
 2433              	.LC20:
 2434 0110 706E675F 		.string	"png_write_info was never called before png_write_row"
 2434      77726974 
 2434      655F696E 
 2434      666F2077 
 2434      6173206E 
 2435 0145 000000   		.align 8
 2436              	.LC21:
 2437 0148 696E7465 		.string	"internal write transform logic error"
 2437      726E616C 
 2437      20777269 
 2437      74652074 
 2437      72616E73 
 2438              		.section	.text.unlikely.png_write_row,"ax",@progbits
 2439              	.LCOLDB22:
 2440              		.section	.text.png_write_row,"ax",@progbits
 2441              	.LHOTB22:
 2442              		.p2align 4,,15
 2443              		.globl	png_write_row
 2445              	png_write_row:
 2446              	.LFB67:
 682:fltk-1.3.4-1/png/pngwrite.c ****    /* 1.5.6: moved from png_struct to be a local structure: */
 2447              		.loc 1 682 0
 2448              		.cfi_startproc
 2449              	.LVL218:
 2450 0000 55       		pushq	%rbp
 2451              		.cfi_def_cfa_offset 16
 2452              		.cfi_offset 6, -16
 2453 0001 53       		pushq	%rbx
 2454              		.cfi_def_cfa_offset 24
 2455              		.cfi_offset 3, -24
 2456 0002 4883EC38 		subq	$56, %rsp
 2457              		.cfi_def_cfa_offset 80
 682:fltk-1.3.4-1/png/pngwrite.c ****    /* 1.5.6: moved from png_struct to be a local structure: */
 2458              		.loc 1 682 0
 2459 0006 64488B04 		movq	%fs:40, %rax
 2459      25280000 
 2459      00
 2460 000f 48894424 		movq	%rax, 40(%rsp)
 2460      28
 2461 0014 31C0     		xorl	%eax, %eax
 686:fltk-1.3.4-1/png/pngwrite.c ****       return;
 2462              		.loc 1 686 0
 2463 0016 4885FF   		testq	%rdi, %rdi
 2464 0019 0F848101 		je	.L275
 2464      0000
 693:fltk-1.3.4-1/png/pngwrite.c ****    {
 2465              		.loc 1 693 0
 2466 001f 8B8F1402 		movl	532(%rdi), %ecx
 2466      0000
 2467 0025 4889FB   		movq	%rdi, %rbx
 2468 0028 85C9     		testl	%ecx, %ecx
 2469 002a 7525     		jne	.L277
 693:fltk-1.3.4-1/png/pngwrite.c ****    {
 2470              		.loc 1 693 0 is_stmt 0 discriminator 1
 2471 002c 80BF7502 		cmpb	$0, 629(%rdi)
 2471      000000
 2472 0033 751C     		jne	.L277
 696:fltk-1.3.4-1/png/pngwrite.c ****          png_error(png_ptr,
 2473              		.loc 1 696 0 is_stmt 1
 2474 0035 F6872D01 		testb	$4, 301(%rdi)
 2474      000004
 2475 003c 0F84D503 		je	.L348
 2475      0000
 2476 0042 48897424 		movq	%rsi, 8(%rsp)
 2476      08
 737:fltk-1.3.4-1/png/pngwrite.c ****    }
 2477              		.loc 1 737 0
 2478 0047 E8000000 		call	png_write_start_row
 2478      00
 2479              	.LVL219:
 2480 004c 488B7424 		movq	8(%rsp), %rsi
 2480      08
 2481              	.LVL220:
 2482              	.L277:
 742:fltk-1.3.4-1/png/pngwrite.c ****        (png_ptr->transformations & PNG_INTERLACE) != 0)
 2483              		.loc 1 742 0
 2484 0051 80BB7402 		cmpb	$0, 628(%rbx)
 2484      000000
 2485 0058 7446     		je	.L279
 742:fltk-1.3.4-1/png/pngwrite.c ****        (png_ptr->transformations & PNG_INTERLACE) != 0)
 2486              		.loc 1 742 0 is_stmt 0 discriminator 1
 2487 005a F6833401 		testb	$2, 308(%rbx)
 2487      000002
 2488 0061 743D     		je	.L279
 745:fltk-1.3.4-1/png/pngwrite.c ****       {
 2489              		.loc 1 745 0 is_stmt 1
 2490 0063 80BB7502 		cmpb	$6, 629(%rbx)
 2490      000006
 2491 006a 7734     		ja	.L279
 2492 006c 0FB68375 		movzbl	629(%rbx), %eax
 2492      020000
 2493 0073 FF24C500 		jmp	*.L281(,%rax,8)
 2493      000000
 2494              		.section	.rodata.png_write_row,"a",@progbits
 2495              		.align 8
 2496              		.align 4
 2497              	.L281:
 2498 0000 00000000 		.quad	.L280
 2498      00000000 
 2499 0008 00000000 		.quad	.L282
 2499      00000000 
 2500 0010 00000000 		.quad	.L283
 2500      00000000 
 2501 0018 00000000 		.quad	.L284
 2501      00000000 
 2502 0020 00000000 		.quad	.L285
 2502      00000000 
 2503 0028 00000000 		.quad	.L286
 2503      00000000 
 2504 0030 00000000 		.quad	.L287
 2504      00000000 
 2505              		.section	.text.png_write_row
 2506 007a 660F1F44 		.p2align 4,,10
 2506      0000
 2507              		.p2align 3
 2508              	.L286:
 788:fltk-1.3.4-1/png/pngwrite.c ****             {
 2509              		.loc 1 788 0
 2510 0080 F6831402 		testb	$1, 532(%rbx)
 2510      000001
 2511 0087 0F85BB01 		jne	.L288
 2511      0000
 788:fltk-1.3.4-1/png/pngwrite.c ****             {
 2512              		.loc 1 788 0 is_stmt 0 discriminator 1
 2513 008d 83BBF801 		cmpl	$1, 504(%rbx)
 2513      000001
 2514 0094 0F86AE01 		jbe	.L288
 2514      0000
 2515 009a 660F1F44 		.p2align 4,,10
 2515      0000
 2516              		.p2align 3
 2517              	.L279:
 810:fltk-1.3.4-1/png/pngwrite.c ****    row_info.width = png_ptr->usr_width;
 2518              		.loc 1 810 0 is_stmt 1
 2519 00a0 0FB68377 		movzbl	631(%rbx), %eax
 2519      020000
 813:fltk-1.3.4-1/png/pngwrite.c ****    row_info.pixel_depth = (png_byte)(row_info.bit_depth * row_info.channels);
 2520              		.loc 1 813 0
 2521 00a7 0FB68B79 		movzbl	633(%rbx), %ecx
 2521      020000
 811:fltk-1.3.4-1/png/pngwrite.c ****    row_info.channels = png_ptr->usr_channels;
 2522              		.loc 1 811 0
 2523 00ae 8BBB0402 		movl	516(%rbx), %edi
 2523      0000
 810:fltk-1.3.4-1/png/pngwrite.c ****    row_info.width = png_ptr->usr_width;
 2524              		.loc 1 810 0
 2525 00b4 88442420 		movb	%al, 32(%rsp)
 812:fltk-1.3.4-1/png/pngwrite.c ****    row_info.bit_depth = png_ptr->usr_bit_depth;
 2526              		.loc 1 812 0
 2527 00b8 0FB6837C 		movzbl	636(%rbx), %eax
 2527      020000
 811:fltk-1.3.4-1/png/pngwrite.c ****    row_info.channels = png_ptr->usr_channels;
 2528              		.loc 1 811 0
 2529 00bf 897C2410 		movl	%edi, 16(%rsp)
 813:fltk-1.3.4-1/png/pngwrite.c ****    row_info.pixel_depth = (png_byte)(row_info.bit_depth * row_info.channels);
 2530              		.loc 1 813 0
 2531 00c3 884C2421 		movb	%cl, 33(%rsp)
 812:fltk-1.3.4-1/png/pngwrite.c ****    row_info.bit_depth = png_ptr->usr_bit_depth;
 2532              		.loc 1 812 0
 2533 00c7 88442422 		movb	%al, 34(%rsp)
 814:fltk-1.3.4-1/png/pngwrite.c ****    row_info.rowbytes = PNG_ROWBYTES(row_info.pixel_depth, row_info.width);
 2534              		.loc 1 814 0
 2535 00cb 0FAFC1   		imull	%ecx, %eax
 815:fltk-1.3.4-1/png/pngwrite.c **** 
 2536              		.loc 1 815 0
 2537 00ce 3C07     		cmpb	$7, %al
 814:fltk-1.3.4-1/png/pngwrite.c ****    row_info.rowbytes = PNG_ROWBYTES(row_info.pixel_depth, row_info.width);
 2538              		.loc 1 814 0
 2539 00d0 88442423 		movb	%al, 35(%rsp)
 815:fltk-1.3.4-1/png/pngwrite.c **** 
 2540              		.loc 1 815 0
 2541 00d4 0F87E600 		ja	.L349
 2541      0000
 815:fltk-1.3.4-1/png/pngwrite.c **** 
 2542              		.loc 1 815 0 is_stmt 0 discriminator 2
 2543 00da 89FA     		movl	%edi, %edx
 2544 00dc 0FB6C0   		movzbl	%al, %eax
 2545 00df 480FAFD0 		imulq	%rax, %rdx
 2546 00e3 4883C207 		addq	$7, %rdx
 2547 00e7 48C1EA03 		shrq	$3, %rdx
 2548              	.L290:
 2549              	.LBB214:
 2550              	.LBB215:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 2551              		.loc 2 53 0 is_stmt 1 discriminator 4
 2552 00eb 488B8328 		movq	552(%rbx), %rax
 2552      020000
 2553              	.LBE215:
 2554              	.LBE214:
 815:fltk-1.3.4-1/png/pngwrite.c **** 
 2555              		.loc 1 815 0 discriminator 4
 2556 00f2 48895424 		movq	%rdx, 24(%rsp)
 2556      18
 2557              	.LVL221:
 2558              	.LBB217:
 2559              	.LBB216:
  53:/usr/include/x86_64-linux-gnu/bits/string3.h **** }
 2560              		.loc 2 53 0 discriminator 4
 2561 00f7 488D7801 		leaq	1(%rax), %rdi
 2562              	.LVL222:
 2563 00fb E8000000 		call	memcpy
 2563      00
 2564              	.LVL223:
 2565              	.LBE216:
 2566              	.LBE217:
 829:fltk-1.3.4-1/png/pngwrite.c ****        (png_ptr->transformations & PNG_INTERLACE) != 0)
 2567              		.loc 1 829 0 discriminator 4
 2568 0100 80BB7402 		cmpb	$0, 628(%rbx)
 2568      000000
 2569 0107 7410     		je	.L291
 829:fltk-1.3.4-1/png/pngwrite.c ****        (png_ptr->transformations & PNG_INTERLACE) != 0)
 2570              		.loc 1 829 0 is_stmt 0 discriminator 1
 2571 0109 0FB69375 		movzbl	629(%rbx), %edx
 2571      020000
 2572 0110 80FA05   		cmpb	$5, %dl
 2573 0113 0F86F700 		jbe	.L350
 2573      0000
 2574              	.L291:
 2575 0119 8B833401 		movl	308(%rbx), %eax
 2575      0000
 2576              	.L292:
 844:fltk-1.3.4-1/png/pngwrite.c ****       png_do_write_transformations(png_ptr, &row_info);
 2577              		.loc 1 844 0 is_stmt 1
 2578 011f 85C0     		testl	%eax, %eax
 2579 0121 0F85B100 		jne	.L351
 2579      0000
 2580              	.L293:
 851:fltk-1.3.4-1/png/pngwrite.c ****       row_info.pixel_depth != png_ptr->transformed_pixel_depth)
 2581              		.loc 1 851 0
 2582 0127 0FB64424 		movzbl	35(%rsp), %eax
 2582      23
 2583 012c 3A837A02 		cmpb	634(%rbx), %al
 2583      0000
 2584 0132 0F85CD02 		jne	.L294
 2584      0000
 851:fltk-1.3.4-1/png/pngwrite.c ****       row_info.pixel_depth != png_ptr->transformed_pixel_depth)
 2585              		.loc 1 851 0 is_stmt 0 discriminator 1
 2586 0138 3A837F02 		cmpb	639(%rbx), %al
 2586      0000
 2587 013e 0F85C102 		jne	.L294
 2587      0000
 865:fltk-1.3.4-1/png/pngwrite.c ****        (png_ptr->filter_type == PNG_INTRAPIXEL_DIFFERENCING))
 2588              		.loc 1 865 0 is_stmt 1
 2589 0144 48B80400 		movabsq	$1095216660484, %rax
 2589      0000FF00 
 2589      0000
 2590 014e 48238318 		andq	1048(%rbx), %rax
 2590      040000
 2591 0155 48BA0400 		movabsq	$274877906948, %rdx
 2591      00004000 
 2591      0000
 2592 015f 4839D0   		cmpq	%rdx, %rax
 2593 0162 0FB65424 		movzbl	32(%rsp), %edx
 2593      20
 2594 0167 0F84EB00 		je	.L352
 2594      0000
 2595              	.L297:
 876:fltk-1.3.4-1/png/pngwrite.c ****        png_ptr->num_palette_max >= 0)
 2596              		.loc 1 876 0
 2597 016d 80FA03   		cmpb	$3, %dl
 2598 0170 488D6C24 		leaq	16(%rsp), %rbp
 2598      10
 2599 0175 7479     		je	.L353
 2600              	.L303:
 882:fltk-1.3.4-1/png/pngwrite.c **** 
 2601              		.loc 1 882 0
 2602 0177 4889EE   		movq	%rbp, %rsi
 2603 017a 4889DF   		movq	%rbx, %rdi
 2604 017d E8000000 		call	png_write_find_filter
 2604      00
 2605              	.LVL224:
 884:fltk-1.3.4-1/png/pngwrite.c ****       (*(png_ptr->write_row_fn))(png_ptr, png_ptr->row_number, png_ptr->pass);
 2606              		.loc 1 884 0
 2607 0182 488B8318 		movq	792(%rbx), %rax
 2607      030000
 2608 0189 4885C0   		testq	%rax, %rax
 2609 018c 7412     		je	.L275
 885:fltk-1.3.4-1/png/pngwrite.c **** }
 2610              		.loc 1 885 0
 2611 018e 0FB69375 		movzbl	629(%rbx), %edx
 2611      020000
 2612 0195 8BB31402 		movl	532(%rbx), %esi
 2612      0000
 2613 019b 4889DF   		movq	%rbx, %rdi
 2614 019e FFD0     		call	*%rax
 2615              	.LVL225:
 2616              	.L275:
 886:fltk-1.3.4-1/png/pngwrite.c **** 
 2617              		.loc 1 886 0
 2618 01a0 488B4424 		movq	40(%rsp), %rax
 2618      28
 2619 01a5 64483304 		xorq	%fs:40, %rax
 2619      25280000 
 2619      00
 2620 01ae 0F855E02 		jne	.L354
 2620      0000
 2621 01b4 4883C438 		addq	$56, %rsp
 2622              		.cfi_remember_state
 2623              		.cfi_def_cfa_offset 24
 2624 01b8 5B       		popq	%rbx
 2625              		.cfi_def_cfa_offset 16
 2626 01b9 5D       		popq	%rbp
 2627              		.cfi_def_cfa_offset 8
 2628 01ba C3       		ret
 2629              	.LVL226:
 2630 01bb 0F1F4400 		.p2align 4,,10
 2630      00
 2631              		.p2align 3
 2632              	.L349:
 2633              		.cfi_restore_state
 815:fltk-1.3.4-1/png/pngwrite.c **** 
 2634              		.loc 1 815 0 discriminator 1
 2635 01c0 C0E803   		shrb	$3, %al
 2636 01c3 89FA     		movl	%edi, %edx
 2637 01c5 0FB6C0   		movzbl	%al, %eax
 2638 01c8 480FAFD0 		imulq	%rax, %rdx
 2639 01cc E91AFFFF 		jmp	.L290
 2639      FF
 2640              		.p2align 4,,10
 2641 01d1 0F1F8000 		.p2align 3
 2641      000000
 2642              	.L351:
 845:fltk-1.3.4-1/png/pngwrite.c **** #endif
 2643              		.loc 1 845 0
 2644 01d8 488D6C24 		leaq	16(%rsp), %rbp
 2644      10
 2645 01dd 4889DF   		movq	%rbx, %rdi
 2646 01e0 4889EE   		movq	%rbp, %rsi
 2647 01e3 E8000000 		call	png_do_write_transformations
 2647      00
 2648              	.LVL227:
 2649 01e8 E93AFFFF 		jmp	.L293
 2649      FF
 2650 01ed 0F1F00   		.p2align 4,,10
 2651              		.p2align 3
 2652              	.L353:
 876:fltk-1.3.4-1/png/pngwrite.c ****        png_ptr->num_palette_max >= 0)
 2653              		.loc 1 876 0 discriminator 1
 2654 01f0 8B836C02 		movl	620(%rbx), %eax
 2654      0000
 2655 01f6 85C0     		testl	%eax, %eax
 2656 01f8 0F8879FF 		js	.L303
 2656      FFFF
 878:fltk-1.3.4-1/png/pngwrite.c **** #endif
 2657              		.loc 1 878 0
 2658 01fe 4889EE   		movq	%rbp, %rsi
 2659 0201 4889DF   		movq	%rbx, %rdi
 2660 0204 E8000000 		call	png_do_check_palette_indexes
 2660      00
 2661              	.LVL228:
 2662 0209 E969FFFF 		jmp	.L303
 2662      FF
 2663 020e 6690     		.p2align 4,,10
 2664              		.p2align 3
 2665              	.L350:
 830:fltk-1.3.4-1/png/pngwrite.c ****    {
 2666              		.loc 1 830 0 discriminator 2
 2667 0210 8B833401 		movl	308(%rbx), %eax
 2667      0000
 829:fltk-1.3.4-1/png/pngwrite.c ****        (png_ptr->transformations & PNG_INTERLACE) != 0)
 2668              		.loc 1 829 0 discriminator 2
 2669 0216 A802     		testb	$2, %al
 2670 0218 0F8401FF 		je	.L292
 2670      FFFF
 832:fltk-1.3.4-1/png/pngwrite.c ****       /* This should always get caught above, but still ... */
 2671              		.loc 1 832 0
 2672 021e 488B8328 		movq	552(%rbx), %rax
 2672      020000
 2673 0225 488D6C24 		leaq	16(%rsp), %rbp
 2673      10
 2674 022a 4889EF   		movq	%rbp, %rdi
 2675 022d 488D7001 		leaq	1(%rax), %rsi
 2676 0231 E8000000 		call	png_do_write_interlace
 2676      00
 2677              	.LVL229:
 834:fltk-1.3.4-1/png/pngwrite.c ****       {
 2678              		.loc 1 834 0
 2679 0236 8B542410 		movl	16(%rsp), %edx
 2680 023a 85D2     		testl	%edx, %edx
 2681 023c 0F85D7FE 		jne	.L291
 2681      FFFF
 2682              		.p2align 4,,10
 2683 0242 660F1F44 		.p2align 3
 2683      0000
 2684              	.L288:
 750:fltk-1.3.4-1/png/pngwrite.c ****                return;
 2685              		.loc 1 750 0
 2686 0248 4889DF   		movq	%rbx, %rdi
 2687 024b E8000000 		call	png_write_finish_row
 2687      00
 2688              	.LVL230:
 751:fltk-1.3.4-1/png/pngwrite.c ****             }
 2689              		.loc 1 751 0
 2690 0250 E94BFFFF 		jmp	.L275
 2690      FF
 2691              		.p2align 4,,10
 2692 0255 0F1F00   		.p2align 3
 2693              	.L352:
 2694              	.LVL231:
 2695              	.LBB218:
 2696              	.LBB219:
 621:fltk-1.3.4-1/png/pngwrite.c ****    {
 2697              		.loc 1 621 0
 2698 0258 F6C202   		testb	$2, %dl
 2699 025b 0F840CFF 		je	.L297
 2699      FFFF
 2700              	.LBB220:
 625:fltk-1.3.4-1/png/pngwrite.c ****       {
 2701              		.loc 1 625 0
 2702 0261 0FB64C24 		movzbl	33(%rsp), %ecx
 2702      21
 2703              	.LBE220:
 2704              	.LBE219:
 2705              	.LBE218:
 869:fltk-1.3.4-1/png/pngwrite.c ****    }
 2706              		.loc 1 869 0
 2707 0266 488B8328 		movq	552(%rbx), %rax
 2707      020000
 2708 026d 448B4424 		movl	16(%rsp), %r8d
 2708      10
 2709              	.LVL232:
 2710 0272 4883C001 		addq	$1, %rax
 2711              	.LBB230:
 2712              	.LBB228:
 2713              	.LBB226:
 625:fltk-1.3.4-1/png/pngwrite.c ****       {
 2714              		.loc 1 625 0
 2715 0276 80F908   		cmpb	$8, %cl
 2716 0279 0F843101 		je	.L355
 2716      0000
 647:fltk-1.3.4-1/png/pngwrite.c ****       {
 2717              		.loc 1 647 0
 2718 027f 80F910   		cmpb	$16, %cl
 2719 0282 0F85E5FE 		jne	.L297
 2719      FFFF
 2720              	.LBB221:
 652:fltk-1.3.4-1/png/pngwrite.c ****             bytes_per_pixel = 6;
 2721              		.loc 1 652 0
 2722 0288 80FA02   		cmpb	$2, %dl
 2723 028b 0F845F01 		je	.L311
 2723      0000
 655:fltk-1.3.4-1/png/pngwrite.c ****             bytes_per_pixel = 8;
 2724              		.loc 1 655 0
 2725 0291 80FA06   		cmpb	$6, %dl
 2726 0294 0F85D3FE 		jne	.L297
 2726      FFFF
 656:fltk-1.3.4-1/png/pngwrite.c **** 
 2727              		.loc 1 656 0
 2728 029a 41B90800 		movl	$8, %r9d
 2728      0000
 2729              	.L301:
 2730              	.LVL233:
 661:fltk-1.3.4-1/png/pngwrite.c ****          {
 2731              		.loc 1 661 0
 2732 02a0 31FF     		xorl	%edi, %edi
 2733 02a2 4585C0   		testl	%r8d, %r8d
 2734 02a5 0F845001 		je	.L345
 2734      0000
 2735              	.LVL234:
 2736 02ab 0F1F4400 		.p2align 4,,10
 2736      00
 2737              		.p2align 3
 2738              	.L332:
 2739              	.LBB222:
 664:fltk-1.3.4-1/png/pngwrite.c ****             png_uint_32 s2   = (*(rp + 4) << 8) | *(rp + 5);
 2740              		.loc 1 664 0
 2741 02b0 0FB77002 		movzwl	2(%rax), %esi
 666:fltk-1.3.4-1/png/pngwrite.c ****             png_uint_32 blue = (png_uint_32)((s2 - s1) & 0xffffL);
 2742              		.loc 1 666 0
 2743 02b4 0FB708   		movzwl	(%rax), %ecx
 2744              	.LBE222:
 661:fltk-1.3.4-1/png/pngwrite.c ****          {
 2745              		.loc 1 661 0
 2746 02b7 83C701   		addl	$1, %edi
 2747              	.LVL235:
 2748              	.LBB223:
 667:fltk-1.3.4-1/png/pngwrite.c ****             *(rp    ) = (png_byte)((red >> 8) & 0xff);
 2749              		.loc 1 667 0
 2750 02ba 0FB75004 		movzwl	4(%rax), %edx
 664:fltk-1.3.4-1/png/pngwrite.c ****             png_uint_32 s2   = (*(rp + 4) << 8) | *(rp + 5);
 2751              		.loc 1 664 0
 2752 02be 66C1C608 		rolw	$8, %si
 666:fltk-1.3.4-1/png/pngwrite.c ****             png_uint_32 blue = (png_uint_32)((s2 - s1) & 0xffffL);
 2753              		.loc 1 666 0
 2754 02c2 66C1C108 		rolw	$8, %cx
 664:fltk-1.3.4-1/png/pngwrite.c ****             png_uint_32 s2   = (*(rp + 4) << 8) | *(rp + 5);
 2755              		.loc 1 664 0
 2756 02c6 0FB7F6   		movzwl	%si, %esi
 2757              	.LVL236:
 667:fltk-1.3.4-1/png/pngwrite.c ****             *(rp    ) = (png_byte)((red >> 8) & 0xff);
 2758              		.loc 1 667 0
 2759 02c9 66C1C208 		rolw	$8, %dx
 2760              	.LVL237:
 666:fltk-1.3.4-1/png/pngwrite.c ****             png_uint_32 blue = (png_uint_32)((s2 - s1) & 0xffffL);
 2761              		.loc 1 666 0
 2762 02cd 29F1     		subl	%esi, %ecx
 667:fltk-1.3.4-1/png/pngwrite.c ****             *(rp    ) = (png_byte)((red >> 8) & 0xff);
 2763              		.loc 1 667 0
 2764 02cf 29F2     		subl	%esi, %edx
 666:fltk-1.3.4-1/png/pngwrite.c ****             png_uint_32 blue = (png_uint_32)((s2 - s1) & 0xffffL);
 2765              		.loc 1 666 0
 2766 02d1 0FB7C9   		movzwl	%cx, %ecx
 2767              	.LVL238:
 667:fltk-1.3.4-1/png/pngwrite.c ****             *(rp    ) = (png_byte)((red >> 8) & 0xff);
 2768              		.loc 1 667 0
 2769 02d4 0FB7D2   		movzwl	%dx, %edx
 2770              	.LVL239:
 668:fltk-1.3.4-1/png/pngwrite.c ****             *(rp + 1) = (png_byte)(red & 0xff);
 2771              		.loc 1 668 0
 2772 02d7 89CE     		movl	%ecx, %esi
 2773              	.LVL240:
 669:fltk-1.3.4-1/png/pngwrite.c ****             *(rp + 4) = (png_byte)((blue >> 8) & 0xff);
 2774              		.loc 1 669 0
 2775 02d9 884801   		movb	%cl, 1(%rax)
 2776              	.LVL241:
 670:fltk-1.3.4-1/png/pngwrite.c ****             *(rp + 5) = (png_byte)(blue & 0xff);
 2777              		.loc 1 670 0
 2778 02dc 89D1     		movl	%edx, %ecx
 2779              	.LVL242:
 668:fltk-1.3.4-1/png/pngwrite.c ****             *(rp + 1) = (png_byte)(red & 0xff);
 2780              		.loc 1 668 0
 2781 02de C1EE08   		shrl	$8, %esi
 2782              	.LVL243:
 670:fltk-1.3.4-1/png/pngwrite.c ****             *(rp + 5) = (png_byte)(blue & 0xff);
 2783              		.loc 1 670 0
 2784 02e1 C1E908   		shrl	$8, %ecx
 671:fltk-1.3.4-1/png/pngwrite.c ****          }
 2785              		.loc 1 671 0
 2786 02e4 885005   		movb	%dl, 5(%rax)
 2787              	.LVL244:
 668:fltk-1.3.4-1/png/pngwrite.c ****             *(rp + 1) = (png_byte)(red & 0xff);
 2788              		.loc 1 668 0
 2789 02e7 408830   		movb	%sil, (%rax)
 670:fltk-1.3.4-1/png/pngwrite.c ****             *(rp + 5) = (png_byte)(blue & 0xff);
 2790              		.loc 1 670 0
 2791 02ea 884804   		movb	%cl, 4(%rax)
 2792              	.LBE223:
 661:fltk-1.3.4-1/png/pngwrite.c ****          {
 2793              		.loc 1 661 0
 2794 02ed 4C01C8   		addq	%r9, %rax
 2795              	.LVL245:
 2796 02f0 4139F8   		cmpl	%edi, %r8d
 2797 02f3 75BB     		jne	.L332
 2798              	.LVL246:
 2799              	.L344:
 2800 02f5 0FB65424 		movzbl	32(%rsp), %edx
 2800      20
 2801 02fa E96EFEFF 		jmp	.L297
 2801      FF
 2802              	.LVL247:
 2803 02ff 90       		.p2align 4,,10
 2804              		.p2align 3
 2805              	.L285:
 2806              	.LBE221:
 2807              	.LBE226:
 2808              	.LBE228:
 2809              	.LBE230:
 780:fltk-1.3.4-1/png/pngwrite.c ****             {
 2810              		.loc 1 780 0
 2811 0300 8B831402 		movl	532(%rbx), %eax
 2811      0000
 2812 0306 83E003   		andl	$3, %eax
 2813 0309 83F802   		cmpl	$2, %eax
 2814 030c 0F8536FF 		jne	.L288
 2814      FFFF
 2815 0312 E989FDFF 		jmp	.L279
 2815      FF
 2816 0317 660F1F84 		.p2align 4,,10
 2816      00000000 
 2816      00
 2817              		.p2align 3
 2818              	.L284:
 772:fltk-1.3.4-1/png/pngwrite.c ****             {
 2819              		.loc 1 772 0
 2820 0320 F6831402 		testb	$3, 532(%rbx)
 2820      000003
 2821 0327 0F851BFF 		jne	.L288
 2821      FFFF
 772:fltk-1.3.4-1/png/pngwrite.c ****             {
 2822              		.loc 1 772 0 is_stmt 0 discriminator 1
 2823 032d 83BBF801 		cmpl	$2, 504(%rbx)
 2823      000002
 2824 0334 0F860EFF 		jbe	.L288
 2824      FFFF
 2825 033a E961FDFF 		jmp	.L279
 2825      FF
 2826 033f 90       		.p2align 4,,10
 2827              		.p2align 3
 2828              	.L283:
 764:fltk-1.3.4-1/png/pngwrite.c ****             {
 2829              		.loc 1 764 0 is_stmt 1
 2830 0340 8B831402 		movl	532(%rbx), %eax
 2830      0000
 2831 0346 83E007   		andl	$7, %eax
 2832 0349 83F804   		cmpl	$4, %eax
 2833 034c 0F85F6FE 		jne	.L288
 2833      FFFF
 2834 0352 E949FDFF 		jmp	.L279
 2834      FF
 2835 0357 660F1F84 		.p2align 4,,10
 2835      00000000 
 2835      00
 2836              		.p2align 3
 2837              	.L282:
 756:fltk-1.3.4-1/png/pngwrite.c ****             {
 2838              		.loc 1 756 0
 2839 0360 F6831402 		testb	$7, 532(%rbx)
 2839      000007
 2840 0367 0F85DBFE 		jne	.L288
 2840      FFFF
 756:fltk-1.3.4-1/png/pngwrite.c ****             {
 2841              		.loc 1 756 0 is_stmt 0 discriminator 1
 2842 036d 83BBF801 		cmpl	$4, 504(%rbx)
 2842      000004
 2843 0374 0F86CEFE 		jbe	.L288
 2843      FFFF
 2844 037a E921FDFF 		jmp	.L279
 2844      FF
 2845 037f 90       		.p2align 4,,10
 2846              		.p2align 3
 2847              	.L280:
 748:fltk-1.3.4-1/png/pngwrite.c ****             {
 2848              		.loc 1 748 0 is_stmt 1
 2849 0380 F6831402 		testb	$7, 532(%rbx)
 2849      000007
 2850 0387 0F8413FD 		je	.L279
 2850      FFFF
 2851 038d E9B6FEFF 		jmp	.L288
 2851      FF
 2852              		.p2align 4,,10
 2853 0392 660F1F44 		.p2align 3
 2853      0000
 2854              	.L287:
 796:fltk-1.3.4-1/png/pngwrite.c ****             {
 2855              		.loc 1 796 0
 2856 0398 F6831402 		testb	$1, 532(%rbx)
 2856      000001
 2857 039f 0F85FBFC 		jne	.L279
 2857      FFFF
 2858 03a5 E99EFEFF 		jmp	.L288
 2858      FF
 2859              	.LVL248:
 2860 03aa 660F1F44 		.p2align 4,,10
 2860      0000
 2861              		.p2align 3
 2862              	.L355:
 2863              	.LBB231:
 2864              	.LBB229:
 2865              	.LBB227:
 2866              	.LBB224:
 630:fltk-1.3.4-1/png/pngwrite.c ****             bytes_per_pixel = 3;
 2867              		.loc 1 630 0
 2868 03b0 80FA02   		cmpb	$2, %dl
 2869 03b3 7434     		je	.L309
 633:fltk-1.3.4-1/png/pngwrite.c ****             bytes_per_pixel = 4;
 2870              		.loc 1 633 0
 2871 03b5 80FA06   		cmpb	$6, %dl
 2872 03b8 0F85AFFD 		jne	.L297
 2872      FFFF
 634:fltk-1.3.4-1/png/pngwrite.c **** 
 2873              		.loc 1 634 0
 2874 03be BE040000 		movl	$4, %esi
 2874      00
 2875              	.L299:
 2876              	.LVL249:
 639:fltk-1.3.4-1/png/pngwrite.c ****          {
 2877              		.loc 1 639 0
 2878 03c3 31D2     		xorl	%edx, %edx
 2879 03c5 4585C0   		testl	%r8d, %r8d
 2880 03c8 7431     		je	.L345
 2881              	.LVL250:
 2882 03ca 660F1F44 		.p2align 4,,10
 2882      0000
 2883              		.p2align 3
 2884              	.L331:
 641:fltk-1.3.4-1/png/pngwrite.c ****             *(rp + 2) = (png_byte)((*(rp + 2) - *(rp + 1)) & 0xff);
 2885              		.loc 1 641 0
 2886 03d0 0FB64801 		movzbl	1(%rax), %ecx
 639:fltk-1.3.4-1/png/pngwrite.c ****          {
 2887              		.loc 1 639 0
 2888 03d4 83C201   		addl	$1, %edx
 2889              	.LVL251:
 641:fltk-1.3.4-1/png/pngwrite.c ****             *(rp + 2) = (png_byte)((*(rp + 2) - *(rp + 1)) & 0xff);
 2890              		.loc 1 641 0
 2891 03d7 2808     		subb	%cl, (%rax)
 642:fltk-1.3.4-1/png/pngwrite.c ****          }
 2892              		.loc 1 642 0
 2893 03d9 284802   		subb	%cl, 2(%rax)
 639:fltk-1.3.4-1/png/pngwrite.c ****          {
 2894              		.loc 1 639 0
 2895 03dc 4801F0   		addq	%rsi, %rax
 2896              	.LVL252:
 2897 03df 4139D0   		cmpl	%edx, %r8d
 2898 03e2 75EC     		jne	.L331
 2899 03e4 E90CFFFF 		jmp	.L344
 2899      FF
 2900              	.LVL253:
 2901              	.L309:
 631:fltk-1.3.4-1/png/pngwrite.c **** 
 2902              		.loc 1 631 0
 2903 03e9 BE030000 		movl	$3, %esi
 2903      00
 2904 03ee EBD3     		jmp	.L299
 2905              	.L311:
 2906              	.LBE224:
 2907              	.LBB225:
 653:fltk-1.3.4-1/png/pngwrite.c **** 
 2908              		.loc 1 653 0
 2909 03f0 41B90600 		movl	$6, %r9d
 2909      0000
 2910 03f6 E9A5FEFF 		jmp	.L301
 2910      FF
 2911              	.L345:
 2912 03fb 488D6C24 		leaq	16(%rsp), %rbp
 2912      10
 2913              	.LVL254:
 2914 0400 E972FDFF 		jmp	.L303
 2914      FF
 2915              	.LVL255:
 2916              	.L294:
 2917              	.LBE225:
 2918              	.LBE227:
 2919              	.LBE229:
 2920              	.LBE231:
 853:fltk-1.3.4-1/png/pngwrite.c **** 
 2921              		.loc 1 853 0
 2922 0405 BE000000 		movl	$.LC21, %esi
 2922      00
 2923 040a 4889DF   		movq	%rbx, %rdi
 2924 040d E8000000 		call	png_error
 2924      00
 2925              	.LVL256:
 2926              	.L354:
 886:fltk-1.3.4-1/png/pngwrite.c **** 
 2927              		.loc 1 886 0
 2928 0412 E8000000 		call	__stack_chk_fail
 2928      00
 2929              	.LVL257:
 2930              	.L348:
 697:fltk-1.3.4-1/png/pngwrite.c ****              "png_write_info was never called before png_write_row");
 2931              		.loc 1 697 0
 2932 0417 BE000000 		movl	$.LC20, %esi
 2932      00
 2933              	.LVL258:
 2934 041c E8000000 		call	png_error
 2934      00
 2935              	.LVL259:
 2936              		.cfi_endproc
 2937              	.LFE67:
 2939              		.section	.text.unlikely.png_write_row
 2940              	.LCOLDE22:
 2941              		.section	.text.png_write_row
 2942              	.LHOTE22:
 2943              		.section	.text.unlikely.png_write_rows,"ax",@progbits
 2944              	.LCOLDB23:
 2945              		.section	.text.png_write_rows,"ax",@progbits
 2946              	.LHOTB23:
 2947              		.p2align 4,,15
 2948              		.globl	png_write_rows
 2950              	png_write_rows:
 2951              	.LFB64:
 564:fltk-1.3.4-1/png/pngwrite.c ****    png_uint_32 i; /* row counter */
 2952              		.loc 1 564 0
 2953              		.cfi_startproc
 2954              	.LVL260:
 570:fltk-1.3.4-1/png/pngwrite.c ****       return;
 2955              		.loc 1 570 0
 2956 0000 4885FF   		testq	%rdi, %rdi
 2957 0003 7433     		je	.L366
 2958              	.LVL261:
 574:fltk-1.3.4-1/png/pngwrite.c ****    {
 2959              		.loc 1 574 0 discriminator 1
 2960 0005 85D2     		testl	%edx, %edx
 2961 0007 742F     		je	.L366
 2962 0009 8D42FF   		leal	-1(%rdx), %eax
 564:fltk-1.3.4-1/png/pngwrite.c ****    png_uint_32 i; /* row counter */
 2963              		.loc 1 564 0
 2964 000c 4154     		pushq	%r12
 2965              		.cfi_def_cfa_offset 16
 2966              		.cfi_offset 12, -16
 2967 000e 55       		pushq	%rbp
 2968              		.cfi_def_cfa_offset 24
 2969              		.cfi_offset 6, -24
 2970 000f 4889FD   		movq	%rdi, %rbp
 2971 0012 53       		pushq	%rbx
 2972              		.cfi_def_cfa_offset 32
 2973              		.cfi_offset 3, -32
 2974 0013 4889F3   		movq	%rsi, %rbx
 2975 0016 4C8D64C6 		leaq	8(%rsi,%rax,8), %r12
 2975      08
 2976              	.LVL262:
 2977 001b 0F1F4400 		.p2align 4,,10
 2977      00
 2978              		.p2align 3
 2979              	.L359:
 576:fltk-1.3.4-1/png/pngwrite.c ****    }
 2980              		.loc 1 576 0 discriminator 3
 2981 0020 488B33   		movq	(%rbx), %rsi
 2982 0023 4889EF   		movq	%rbp, %rdi
 574:fltk-1.3.4-1/png/pngwrite.c ****    {
 2983              		.loc 1 574 0 discriminator 3
 2984 0026 4883C308 		addq	$8, %rbx
 2985              	.LVL263:
 576:fltk-1.3.4-1/png/pngwrite.c ****    }
 2986              		.loc 1 576 0 discriminator 3
 2987 002a E8000000 		call	png_write_row
 2987      00
 2988              	.LVL264:
 574:fltk-1.3.4-1/png/pngwrite.c ****    {
 2989              		.loc 1 574 0 discriminator 3
 2990 002f 4939DC   		cmpq	%rbx, %r12
 2991 0032 75EC     		jne	.L359
 578:fltk-1.3.4-1/png/pngwrite.c **** 
 2992              		.loc 1 578 0
 2993 0034 5B       		popq	%rbx
 2994              		.cfi_restore 3
 2995              		.cfi_def_cfa_offset 24
 2996              	.LVL265:
 2997 0035 5D       		popq	%rbp
 2998              		.cfi_restore 6
 2999              		.cfi_def_cfa_offset 16
 3000              	.LVL266:
 3001 0036 415C     		popq	%r12
 3002              		.cfi_restore 12
 3003              		.cfi_def_cfa_offset 8
 3004              	.L366:
 3005 0038 F3C3     		rep ret
 3006              		.cfi_endproc
 3007              	.LFE64:
 3009              		.section	.text.unlikely.png_write_rows
 3010              	.LCOLDE23:
 3011              		.section	.text.png_write_rows
 3012              	.LHOTE23:
 3013              		.section	.text.unlikely.png_write_image,"ax",@progbits
 3014              	.LCOLDB24:
 3015              		.section	.text.png_write_image,"ax",@progbits
 3016              	.LHOTB24:
 3017              		.p2align 4,,15
 3018              		.globl	png_write_image
 3020              	png_write_image:
 3021              	.LFB65:
 585:fltk-1.3.4-1/png/pngwrite.c ****    png_uint_32 i; /* row index */
 3022              		.loc 1 585 0
 3023              		.cfi_startproc
 3024              	.LVL267:
 590:fltk-1.3.4-1/png/pngwrite.c ****       return;
 3025              		.loc 1 590 0
 3026 0000 4885FF   		testq	%rdi, %rdi
 3027 0003 7477     		je	.L383
 585:fltk-1.3.4-1/png/pngwrite.c ****    png_uint_32 i; /* row index */
 3028              		.loc 1 585 0
 3029 0005 4157     		pushq	%r15
 3030              		.cfi_def_cfa_offset 16
 3031              		.cfi_offset 15, -16
 3032 0007 4156     		pushq	%r14
 3033              		.cfi_def_cfa_offset 24
 3034              		.cfi_offset 14, -24
 3035 0009 4989F6   		movq	%rsi, %r14
 3036 000c 4155     		pushq	%r13
 3037              		.cfi_def_cfa_offset 32
 3038              		.cfi_offset 13, -32
 3039 000e 4154     		pushq	%r12
 3040              		.cfi_def_cfa_offset 40
 3041              		.cfi_offset 12, -40
 604:fltk-1.3.4-1/png/pngwrite.c ****    {
 3042              		.loc 1 604 0
 3043 0010 4531ED   		xorl	%r13d, %r13d
 585:fltk-1.3.4-1/png/pngwrite.c ****    png_uint_32 i; /* row index */
 3044              		.loc 1 585 0
 3045 0013 55       		pushq	%rbp
 3046              		.cfi_def_cfa_offset 48
 3047              		.cfi_offset 6, -48
 3048 0014 53       		pushq	%rbx
 3049              		.cfi_def_cfa_offset 56
 3050              		.cfi_offset 3, -56
 3051 0015 4989FC   		movq	%rdi, %r12
 3052 0018 4883EC08 		subq	$8, %rsp
 3053              		.cfi_def_cfa_offset 64
 599:fltk-1.3.4-1/png/pngwrite.c **** #else
 3054              		.loc 1 599 0
 3055 001c E8000000 		call	png_set_interlace_handling
 3055      00
 3056              	.LVL268:
 604:fltk-1.3.4-1/png/pngwrite.c ****    {
 3057              		.loc 1 604 0
 3058 0021 85C0     		testl	%eax, %eax
 599:fltk-1.3.4-1/png/pngwrite.c **** #else
 3059              		.loc 1 599 0
 3060 0023 4189C7   		movl	%eax, %r15d
 3061              	.LVL269:
 604:fltk-1.3.4-1/png/pngwrite.c ****    {
 3062              		.loc 1 604 0
 3063 0026 7E46     		jle	.L367
 3064              	.LVL270:
 3065 0028 0F1F8400 		.p2align 4,,10
 3065      00000000 
 3066              		.p2align 3
 3067              	.L376:
 607:fltk-1.3.4-1/png/pngwrite.c ****       {
 3068              		.loc 1 607 0 discriminator 1
 3069 0030 418B8424 		movl	508(%r12), %eax
 3069      FC010000 
 3070 0038 31DB     		xorl	%ebx, %ebx
 3071 003a 4C89F5   		movq	%r14, %rbp
 3072 003d 85C0     		testl	%eax, %eax
 3073 003f 7424     		je	.L373
 3074              	.LVL271:
 3075              		.p2align 4,,10
 3076 0041 0F1F8000 		.p2align 3
 3076      000000
 3077              	.L377:
 609:fltk-1.3.4-1/png/pngwrite.c ****       }
 3078              		.loc 1 609 0 discriminator 3
 3079 0048 488B7500 		movq	0(%rbp), %rsi
 3080 004c 4C89E7   		movq	%r12, %rdi
 607:fltk-1.3.4-1/png/pngwrite.c ****       {
 3081              		.loc 1 607 0 discriminator 3
 3082 004f 83C301   		addl	$1, %ebx
 3083              	.LVL272:
 3084 0052 4883C508 		addq	$8, %rbp
 3085              	.LVL273:
 609:fltk-1.3.4-1/png/pngwrite.c ****       }
 3086              		.loc 1 609 0 discriminator 3
 3087 0056 E8000000 		call	png_write_row
 3087      00
 3088              	.LVL274:
 607:fltk-1.3.4-1/png/pngwrite.c ****       {
 3089              		.loc 1 607 0 discriminator 3
 3090 005b 41399C24 		cmpl	%ebx, 508(%r12)
 3090      FC010000 
 3091 0063 77E3     		ja	.L377
 3092              	.LVL275:
 3093              	.L373:
 604:fltk-1.3.4-1/png/pngwrite.c ****    {
 3094              		.loc 1 604 0
 3095 0065 4183C501 		addl	$1, %r13d
 3096              	.LVL276:
 3097 0069 4539EF   		cmpl	%r13d, %r15d
 3098 006c 75C2     		jne	.L376
 3099              	.LVL277:
 3100              	.L367:
 612:fltk-1.3.4-1/png/pngwrite.c **** 
 3101              		.loc 1 612 0
 3102 006e 4883C408 		addq	$8, %rsp
 3103              		.cfi_def_cfa_offset 56
 3104 0072 5B       		popq	%rbx
 3105              		.cfi_restore 3
 3106              		.cfi_def_cfa_offset 48
 3107 0073 5D       		popq	%rbp
 3108              		.cfi_restore 6
 3109              		.cfi_def_cfa_offset 40
 3110 0074 415C     		popq	%r12
 3111              		.cfi_restore 12
 3112              		.cfi_def_cfa_offset 32
 3113              	.LVL278:
 3114 0076 415D     		popq	%r13
 3115              		.cfi_restore 13
 3116              		.cfi_def_cfa_offset 24
 3117 0078 415E     		popq	%r14
 3118              		.cfi_restore 14
 3119              		.cfi_def_cfa_offset 16
 3120              	.LVL279:
 3121 007a 415F     		popq	%r15
 3122              		.cfi_restore 15
 3123              		.cfi_def_cfa_offset 8
 3124              	.LVL280:
 3125              	.L383:
 3126 007c F3C3     		rep ret
 3127              		.cfi_endproc
 3128              	.LFE65:
 3130              		.section	.text.unlikely.png_write_image
 3131              	.LCOLDE24:
 3132              		.section	.text.png_write_image
 3133              	.LHOTE24:
 3134              		.section	.text.unlikely.png_write_image_8bit,"ax",@progbits
 3135              	.LCOLDB25:
 3136              		.section	.text.png_write_image_8bit,"ax",@progbits
 3137              	.LHOTB25:
 3138              		.p2align 4,,15
 3140              	png_write_image_8bit:
 3141              	.LFB93:
1900:fltk-1.3.4-1/png/pngwrite.c ****    png_image_write_control *display = png_voidcast(png_image_write_control*,
 3142              		.loc 1 1900 0
 3143              		.cfi_startproc
 3144              	.LVL281:
 3145 0000 4157     		pushq	%r15
 3146              		.cfi_def_cfa_offset 16
 3147              		.cfi_offset 15, -16
 3148 0002 4156     		pushq	%r14
 3149              		.cfi_def_cfa_offset 24
 3150              		.cfi_offset 14, -24
 3151 0004 4155     		pushq	%r13
 3152              		.cfi_def_cfa_offset 32
 3153              		.cfi_offset 13, -32
 3154 0006 4154     		pushq	%r12
 3155              		.cfi_def_cfa_offset 40
 3156              		.cfi_offset 12, -40
 3157 0008 55       		pushq	%rbp
 3158              		.cfi_def_cfa_offset 48
 3159              		.cfi_offset 6, -48
 3160 0009 53       		pushq	%rbx
 3161              		.cfi_def_cfa_offset 56
 3162              		.cfi_offset 3, -56
 3163 000a 4883EC68 		subq	$104, %rsp
 3164              		.cfi_def_cfa_offset 160
1903:fltk-1.3.4-1/png/pngwrite.c ****    png_structrp png_ptr = image->opaque->png_ptr;
 3165              		.loc 1 1903 0
 3166 000e 488B17   		movq	(%rdi), %rdx
 3167              	.LVL282:
1906:fltk-1.3.4-1/png/pngwrite.c ****       display->first_row);
 3168              		.loc 1 1906 0
 3169 0011 488B4F28 		movq	40(%rdi), %rcx
1900:fltk-1.3.4-1/png/pngwrite.c ****    png_image_write_control *display = png_voidcast(png_image_write_control*,
 3170              		.loc 1 1900 0
 3171 0015 48897C24 		movq	%rdi, 80(%rsp)
 3171      50
1904:fltk-1.3.4-1/png/pngwrite.c **** 
 3172              		.loc 1 1904 0
 3173 001a 488B02   		movq	(%rdx), %rax
1910:fltk-1.3.4-1/png/pngwrite.c **** 
 3174              		.loc 1 1910 0
 3175 001d 8B7214   		movl	20(%rdx), %esi
1906:fltk-1.3.4-1/png/pngwrite.c ****       display->first_row);
 3176              		.loc 1 1906 0
 3177 0020 48894C24 		movq	%rcx, 56(%rsp)
 3177      38
1904:fltk-1.3.4-1/png/pngwrite.c **** 
 3178              		.loc 1 1904 0
 3179 0025 488B00   		movq	(%rax), %rax
 3180 0028 48894424 		movq	%rax, 72(%rsp)
 3180      48
 3181              	.LVL283:
1906:fltk-1.3.4-1/png/pngwrite.c ****       display->first_row);
 3182              		.loc 1 1906 0
 3183 002d 4889F8   		movq	%rdi, %rax
 3184              	.LVL284:
 3185 0030 4889CF   		movq	%rcx, %rdi
 3186              	.LVL285:
1908:fltk-1.3.4-1/png/pngwrite.c ****    png_uint_32 y = image->height;
 3187              		.loc 1 1908 0
 3188 0033 488B4038 		movq	56(%rax), %rax
 3189              	.LVL286:
1909:fltk-1.3.4-1/png/pngwrite.c ****    const int channels = (image->format & PNG_FORMAT_FLAG_COLOR) != 0 ? 3 : 1;
 3190              		.loc 1 1909 0
 3191 0037 8B4A10   		movl	16(%rdx), %ecx
 3192              	.LVL287:
1908:fltk-1.3.4-1/png/pngwrite.c ****    png_uint_32 y = image->height;
 3193              		.loc 1 1908 0
 3194 003a 4989C0   		movq	%rax, %r8
 3195 003d 48894424 		movq	%rax, 64(%rsp)
 3195      40
 3196              	.LVL288:
1910:fltk-1.3.4-1/png/pngwrite.c **** 
 3197              		.loc 1 1910 0
 3198 0042 89F0     		movl	%esi, %eax
 3199              	.LVL289:
 3200 0044 83E002   		andl	$2, %eax
 3201 0047 83F801   		cmpl	$1, %eax
 3202 004a 19C0     		sbbl	%eax, %eax
 3203 004c 83E0FE   		andl	$-2, %eax
 3204 004f 83C003   		addl	$3, %eax
 3205              	.LVL290:
1912:fltk-1.3.4-1/png/pngwrite.c ****    {
 3206              		.loc 1 1912 0
 3207 0052 40F6C601 		testb	$1, %sil
 3208 0056 0F843F01 		je	.L386
 3208      0000
 3209              	.LBB232:
1918:fltk-1.3.4-1/png/pngwrite.c ****          {
 3210              		.loc 1 1918 0
 3211 005c 83E620   		andl	$32, %esi
1927:fltk-1.3.4-1/png/pngwrite.c **** 
 3212              		.loc 1 1927 0
 3213 005f 4863D8   		movslq	%eax, %rbx
1918:fltk-1.3.4-1/png/pngwrite.c ****          {
 3214              		.loc 1 1918 0
 3215 0062 741F     		je	.L387
 3216              	.LVL291:
1921:fltk-1.3.4-1/png/pngwrite.c ****             ++output_row;
 3217              		.loc 1 1921 0
 3218 0064 4889FE   		movq	%rdi, %rsi
1920:fltk-1.3.4-1/png/pngwrite.c ****             ++input_row; /* To point to the first component */
 3219              		.loc 1 1920 0
 3220 0067 48C7C3FF 		movq	$-1, %rbx
 3220      FFFFFF
1921:fltk-1.3.4-1/png/pngwrite.c ****             ++output_row;
 3221              		.loc 1 1921 0
 3222 006e 4883C602 		addq	$2, %rsi
 3223 0072 48897424 		movq	%rsi, 56(%rsp)
 3223      38
 3224              	.LVL292:
1922:fltk-1.3.4-1/png/pngwrite.c ****          }
 3225              		.loc 1 1922 0
 3226 0077 4C89C6   		movq	%r8, %rsi
 3227              	.LVL293:
 3228 007a 4883C601 		addq	$1, %rsi
 3229 007e 48897424 		movq	%rsi, 64(%rsp)
 3229      40
 3230              	.LVL294:
 3231              	.L387:
1930:fltk-1.3.4-1/png/pngwrite.c **** 
 3232              		.loc 1 1930 0
 3233 0083 8D7001   		leal	1(%rax), %esi
 3234 0086 89F7     		movl	%esi, %edi
 3235 0088 0FAF7A0C 		imull	12(%rdx), %edi
 3236 008c 4889FA   		movq	%rdi, %rdx
 3237              	.LVL295:
 3238 008f 48035424 		addq	64(%rsp), %rdx
 3238      40
1932:fltk-1.3.4-1/png/pngwrite.c ****       {
 3239              		.loc 1 1932 0
 3240 0094 85C9     		testl	%ecx, %ecx
1930:fltk-1.3.4-1/png/pngwrite.c **** 
 3241              		.loc 1 1930 0
 3242 0096 48895424 		movq	%rdx, 24(%rsp)
 3242      18
 3243              	.LVL296:
1932:fltk-1.3.4-1/png/pngwrite.c ****       {
 3244              		.loc 1 1932 0
 3245 009b 0F840D01 		je	.L389
 3245      0000
 3246 00a1 8D50FF   		leal	-1(%rax), %edx
 3247              	.LVL297:
 3248 00a4 4C8D241B 		leaq	(%rbx,%rbx), %r12
 3249 00a8 894C245C 		movl	%ecx, 92(%rsp)
 3250 00ac 488D7412 		leaq	2(%rdx,%rdx), %rsi
 3250      02
 3251 00b1 4889D0   		movq	%rdx, %rax
 3252 00b4 4898     		cltq
 3253 00b6 48897424 		movq	%rsi, 40(%rsp)
 3253      28
 3254 00bb 488D7412 		leaq	4(%rdx,%rdx), %rsi
 3254      04
 3255 00c0 4883C002 		addq	$2, %rax
 3256 00c4 48894424 		movq	%rax, 48(%rsp)
 3256      30
 3257 00c9 48897424 		movq	%rsi, 32(%rsp)
 3257      20
 3258              	.LVL298:
 3259              	.L394:
 3260              	.LBB233:
1937:fltk-1.3.4-1/png/pngwrite.c ****          {
 3261              		.loc 1 1937 0
 3262 00ce 488B4424 		movq	64(%rsp), %rax
 3262      40
 3263 00d3 488B4C24 		movq	24(%rsp), %rcx
 3263      18
 3264 00d8 4C8B7424 		movq	56(%rsp), %r14
 3264      38
 3265 00dd 4839C8   		cmpq	%rcx, %rax
 3266 00e0 4989C7   		movq	%rax, %r15
 3267 00e3 0F837C01 		jnb	.L396
 3267      0000
 3268              	.LVL299:
 3269 00e9 0F1F8000 		.p2align 4,,10
 3269      000000
 3270              		.p2align 3
 3271              	.L407:
 3272              	.LBB234:
1939:fltk-1.3.4-1/png/pngwrite.c ****             png_byte alphabyte = (png_byte)PNG_DIV257(alpha);
 3273              		.loc 1 1939 0
 3274 00f0 470FB714 		movzwl	(%r14,%r12), %r10d
 3274      26
1941:fltk-1.3.4-1/png/pngwrite.c ****             int c;
 3275              		.loc 1 1941 0
 3276 00f5 31ED     		xorl	%ebp, %ebp
1940:fltk-1.3.4-1/png/pngwrite.c ****             png_uint_32 reciprocal = 0;
 3277              		.loc 1 1940 0
 3278 00f7 4489D0   		movl	%r10d, %eax
1939:fltk-1.3.4-1/png/pngwrite.c ****             png_byte alphabyte = (png_byte)PNG_DIV257(alpha);
 3279              		.loc 1 1939 0
 3280 00fa 4489D2   		movl	%r10d, %edx
 3281              	.LVL300:
1940:fltk-1.3.4-1/png/pngwrite.c ****             png_uint_32 reciprocal = 0;
 3282              		.loc 1 1940 0
 3283 00fd C1E008   		sall	$8, %eax
 3284 0100 4429D0   		subl	%r10d, %eax
 3285 0103 057F8000 		addl	$32895, %eax
 3285      00
 3286 0108 C1E810   		shrl	$16, %eax
 3287              	.LVL301:
1945:fltk-1.3.4-1/png/pngwrite.c **** 
 3288              		.loc 1 1945 0
 3289 010b 4188041F 		movb	%al, (%r15,%rbx)
1947:fltk-1.3.4-1/png/pngwrite.c ****                reciprocal = UNP_RECIPROCAL(alpha);
 3290              		.loc 1 1947 0
 3291 010f 83E801   		subl	$1, %eax
 3292              	.LVL302:
 3293 0112 3CFD     		cmpb	$-3, %al
 3294 0114 7711     		ja	.L390
1948:fltk-1.3.4-1/png/pngwrite.c **** 
 3295              		.loc 1 1948 0
 3296 0116 66D1EA   		shrw	%dx
 3297 0119 0FB7C2   		movzwl	%dx, %eax
 3298 011c 0580807F 		addl	$2139062400, %eax
 3298      7F
 3299 0121 99       		cltd
 3300 0122 41F7FA   		idivl	%r10d
 3301 0125 89C5     		movl	%eax, %ebp
 3302              	.LVL303:
 3303              	.L390:
 3304 0127 488B4424 		movq	40(%rsp), %rax
 3304      28
 3305 012c 4183FA7F 		cmpl	$127, %r10d
1941:fltk-1.3.4-1/png/pngwrite.c ****             int c;
 3306              		.loc 1 1941 0
 3307 0130 4C893424 		movq	%r14, (%rsp)
 3308 0134 410F96C5 		setbe	%r13b
 3309 0138 4C897C24 		movq	%r15, 8(%rsp)
 3309      08
 3310 013d 44895424 		movl	%r10d, 88(%rsp)
 3310      58
 3311 0142 4D8D1C06 		leaq	(%r14,%rax), %r11
 3312 0146 4C895C24 		movq	%r11, 16(%rsp)
 3312      10
 3313 014b EB2C     		jmp	.L392
 3314              	.LVL304:
 3315 014d 0F1F00   		.p2align 4,,10
 3316              		.p2align 3
 3317              	.L421:
 3318              	.LBB235:
 3319              	.LBB236:
1867:fltk-1.3.4-1/png/pngwrite.c ****       return 255;
 3320              		.loc 1 1867 0 discriminator 1
 3321 0150 4584ED   		testb	%r13b, %r13b
 3322 0153 753F     		jne	.L405
1895:fltk-1.3.4-1/png/pngwrite.c **** }
 3323              		.loc 1 1895 0
 3324 0155 31C0     		xorl	%eax, %eax
 3325              	.LVL305:
1873:fltk-1.3.4-1/png/pngwrite.c ****    {
 3326              		.loc 1 1873 0
 3327 0157 85FF     		testl	%edi, %edi
 3328 0159 7407     		je	.L391
 3329 015b 89EA     		movl	%ebp, %edx
 3330 015d E8000000 		call	png_unpremultiply.part.1
 3330      00
 3331              	.LVL306:
 3332              	.L391:
 3333              	.LBE236:
 3334              	.LBE235:
1953:fltk-1.3.4-1/png/pngwrite.c **** 
 3335              		.loc 1 1953 0
 3336 0162 488B4C24 		movq	16(%rsp), %rcx
 3336      10
 3337 0167 48390C24 		cmpq	%rcx, (%rsp)
1952:fltk-1.3.4-1/png/pngwrite.c ****             while (--c > 0);
 3338              		.loc 1 1952 0
 3339 016b 488B5424 		movq	8(%rsp), %rdx
 3339      08
 3340 0170 8842FF   		movb	%al, -1(%rdx)
1953:fltk-1.3.4-1/png/pngwrite.c **** 
 3341              		.loc 1 1953 0
 3342 0173 0F84D700 		je	.L420
 3342      0000
 3343              	.L392:
 3344              	.LVL307:
1952:fltk-1.3.4-1/png/pngwrite.c ****             while (--c > 0);
 3345              		.loc 1 1952 0 discriminator 1
 3346 0179 48830424 		addq	$2, (%rsp)
 3346      02
 3347              	.LVL308:
 3348              	.LBB239:
 3349              	.LBB237:
1867:fltk-1.3.4-1/png/pngwrite.c ****       return 255;
 3350              		.loc 1 1867 0 discriminator 1
 3351 017e 8B742458 		movl	88(%rsp), %esi
 3352              	.LBE237:
 3353              	.LBE239:
1952:fltk-1.3.4-1/png/pngwrite.c ****             while (--c > 0);
 3354              		.loc 1 1952 0 discriminator 1
 3355 0182 488B0424 		movq	(%rsp), %rax
 3356              	.LVL309:
 3357 0186 48834424 		addq	$1, 8(%rsp)
 3357      0801
 3358              	.LVL310:
 3359 018c 0FB778FE 		movzwl	-2(%rax), %edi
 3360              	.LVL311:
 3361              	.LBB240:
 3362              	.LBB238:
1867:fltk-1.3.4-1/png/pngwrite.c ****       return 255;
 3363              		.loc 1 1867 0 discriminator 1
 3364 0190 39FE     		cmpl	%edi, %esi
 3365 0192 77BC     		ja	.L421
 3366              	.L405:
1868:fltk-1.3.4-1/png/pngwrite.c **** 
 3367              		.loc 1 1868 0
 3368 0194 B8FFFFFF 		movl	$-1, %eax
 3368      FF
 3369              	.LVL312:
 3370 0199 EBC7     		jmp	.L391
 3371              	.LVL313:
 3372              	.L386:
 3373              	.LBE238:
 3374              	.LBE240:
 3375              	.LBE234:
 3376              	.LBE233:
 3377              	.LBE232:
 3378              	.LBB242:
1971:fltk-1.3.4-1/png/pngwrite.c **** 
 3379              		.loc 1 1971 0
 3380 019b 0FAF420C 		imull	12(%rdx), %eax
 3381 019f 488B7424 		movq	64(%rsp), %rsi
 3381      40
1973:fltk-1.3.4-1/png/pngwrite.c ****       {
 3382              		.loc 1 1973 0
 3383 01a4 85C9     		testl	%ecx, %ecx
 3384 01a6 89CB     		movl	%ecx, %ebx
1971:fltk-1.3.4-1/png/pngwrite.c **** 
 3385              		.loc 1 1971 0
 3386 01a8 488D2C06 		leaq	(%rsi,%rax), %rbp
 3387              	.LVL314:
1973:fltk-1.3.4-1/png/pngwrite.c ****       {
 3388              		.loc 1 1973 0
 3389 01ac 7514     		jne	.L418
 3390              	.LVL315:
 3391              	.L389:
 3392              	.LBE242:
1992:fltk-1.3.4-1/png/pngwrite.c **** 
 3393              		.loc 1 1992 0
 3394 01ae 4883C468 		addq	$104, %rsp
 3395              		.cfi_remember_state
 3396              		.cfi_def_cfa_offset 56
 3397 01b2 B8010000 		movl	$1, %eax
 3397      00
 3398 01b7 5B       		popq	%rbx
 3399              		.cfi_def_cfa_offset 48
 3400 01b8 5D       		popq	%rbp
 3401              		.cfi_def_cfa_offset 40
 3402 01b9 415C     		popq	%r12
 3403              		.cfi_def_cfa_offset 32
 3404 01bb 415D     		popq	%r13
 3405              		.cfi_def_cfa_offset 24
 3406 01bd 415E     		popq	%r14
 3407              		.cfi_def_cfa_offset 16
 3408 01bf 415F     		popq	%r15
 3409              		.cfi_def_cfa_offset 8
 3410 01c1 C3       		ret
 3411              	.LVL316:
 3412              	.L418:
 3413              		.cfi_restore_state
 3414 01c2 4C8B7424 		movq	56(%rsp), %r14
 3414      38
 3415 01c7 4C8B7C24 		movq	64(%rsp), %r15
 3415      40
 3416 01cc 4C8B6424 		movq	72(%rsp), %r12
 3416      48
 3417 01d1 4C8B6C24 		movq	80(%rsp), %r13
 3417      50
 3418              	.LVL317:
 3419              	.L408:
 3420              	.LBB246:
 3421              	.LBB243:
1978:fltk-1.3.4-1/png/pngwrite.c ****          {
 3422              		.loc 1 1978 0
 3423 01d6 4939EF   		cmpq	%rbp, %r15
 3424 01d9 4C89F9   		movq	%r15, %rcx
 3425 01dc 4C89F6   		movq	%r14, %rsi
 3426 01df 7346     		jnb	.L401
 3427              	.LVL318:
 3428              		.p2align 4,,10
 3429 01e1 0F1F8000 		.p2align 3
 3429      000000
 3430              	.L409:
 3431              	.LBB244:
1980:fltk-1.3.4-1/png/pngwrite.c **** 
 3432              		.loc 1 1980 0
 3433 01e8 4883C602 		addq	$2, %rsi
 3434              	.LVL319:
 3435 01ec 0FB756FE 		movzwl	-2(%rsi), %edx
 3436              	.LVL320:
1983:fltk-1.3.4-1/png/pngwrite.c ****          }
 3437              		.loc 1 1983 0
 3438 01f0 4883C101 		addq	$1, %rcx
 3439              	.LVL321:
1982:fltk-1.3.4-1/png/pngwrite.c ****             *out_ptr++ = (png_byte)PNG_sRGB_FROM_LINEAR(component);
 3440              		.loc 1 1982 0
 3441 01f4 89D0     		movl	%edx, %eax
 3442 01f6 C1E008   		sall	$8, %eax
 3443 01f9 29D0     		subl	%edx, %eax
 3444              	.LVL322:
1983:fltk-1.3.4-1/png/pngwrite.c ****          }
 3445              		.loc 1 1983 0
 3446 01fb 89C7     		movl	%eax, %edi
 3447 01fd 25FF7F00 		andl	$32767, %eax
 3447      00
 3448              	.LVL323:
 3449 0202 C1EF0F   		shrl	$15, %edi
 3450              	.LVL324:
 3451 0205 0FB69700 		movzbl	png_sRGB_delta(%rdi), %edx
 3451      000000
 3452              	.LVL325:
 3453 020c 0FAFC2   		imull	%edx, %eax
 3454 020f 0FB7943F 		movzwl	png_sRGB_base(%rdi,%rdi), %edx
 3454      00000000 
 3455 0217 C1E80C   		shrl	$12, %eax
 3456 021a 01D0     		addl	%edx, %eax
 3457 021c C1E808   		shrl	$8, %eax
 3458              	.LBE244:
1978:fltk-1.3.4-1/png/pngwrite.c ****          {
 3459              		.loc 1 1978 0
 3460 021f 4839CD   		cmpq	%rcx, %rbp
 3461              	.LBB245:
1983:fltk-1.3.4-1/png/pngwrite.c ****          }
 3462              		.loc 1 1983 0
 3463 0222 8841FF   		movb	%al, -1(%rcx)
 3464              	.LVL326:
 3465              	.LBE245:
1978:fltk-1.3.4-1/png/pngwrite.c ****          {
 3466              		.loc 1 1978 0
 3467 0225 75C1     		jne	.L409
 3468              	.L401:
1986:fltk-1.3.4-1/png/pngwrite.c ****          input_row += display->row_bytes/(sizeof (png_uint_16));
 3469              		.loc 1 1986 0
 3470 0227 4C89FE   		movq	%r15, %rsi
 3471              	.LVL327:
 3472 022a 4C89E7   		movq	%r12, %rdi
 3473 022d E8000000 		call	png_write_row
 3473      00
 3474              	.LVL328:
1987:fltk-1.3.4-1/png/pngwrite.c ****       }
 3475              		.loc 1 1987 0
 3476 0232 498B4530 		movq	48(%r13), %rax
 3477 0236 4883E0FE 		andq	$-2, %rax
 3478 023a 4901C6   		addq	%rax, %r14
 3479              	.LVL329:
 3480              	.LBE243:
1973:fltk-1.3.4-1/png/pngwrite.c ****       {
 3481              		.loc 1 1973 0
 3482 023d 83EB01   		subl	$1, %ebx
 3483              	.LVL330:
 3484 0240 7594     		jne	.L408
 3485 0242 E967FFFF 		jmp	.L389
 3485      FF
 3486              	.LVL331:
 3487 0247 660F1F84 		.p2align 4,,10
 3487      00000000 
 3487      00
 3488              		.p2align 3
 3489              	.L420:
 3490 0250 4C037C24 		addq	48(%rsp), %r15
 3490      30
 3491 0255 4C037424 		addq	32(%rsp), %r14
 3491      20
 3492              	.LVL332:
 3493              	.LBE246:
 3494              	.LBB247:
 3495              	.LBB241:
1937:fltk-1.3.4-1/png/pngwrite.c ****          {
 3496              		.loc 1 1937 0
 3497 025a 4C397C24 		cmpq	%r15, 24(%rsp)
 3497      18
 3498 025f 0F878BFE 		ja	.L407
 3498      FFFF
 3499              	.LVL333:
 3500              	.L396:
1960:fltk-1.3.4-1/png/pngwrite.c ****             display->local_row));
 3501              		.loc 1 1960 0
 3502 0265 4C8B7424 		movq	80(%rsp), %r14
 3502      50
 3503              	.LVL334:
 3504 026a 488B7C24 		movq	72(%rsp), %rdi
 3504      48
 3505 026f 498B7638 		movq	56(%r14), %rsi
 3506 0273 E8000000 		call	png_write_row
 3506      00
 3507              	.LVL335:
1962:fltk-1.3.4-1/png/pngwrite.c ****       } /* while y */
 3508              		.loc 1 1962 0
 3509 0278 498B4630 		movq	48(%r14), %rax
 3510 027c 48890424 		movq	%rax, (%rsp)
 3511 0280 4883E0FE 		andq	$-2, %rax
 3512 0284 48014424 		addq	%rax, 56(%rsp)
 3512      38
 3513              	.LVL336:
 3514              	.LBE241:
1932:fltk-1.3.4-1/png/pngwrite.c ****       {
 3515              		.loc 1 1932 0
 3516 0289 836C245C 		subl	$1, 92(%rsp)
 3516      01
 3517              	.LVL337:
 3518 028e 0F853AFE 		jne	.L394
 3518      FFFF
 3519 0294 E915FFFF 		jmp	.L389
 3519      FF
 3520              	.LBE247:
 3521              		.cfi_endproc
 3522              	.LFE93:
 3524              		.section	.text.unlikely.png_write_image_8bit
 3525              	.LCOLDE25:
 3526              		.section	.text.png_write_image_8bit
 3527              	.LHOTE25:
 3528              		.section	.rodata.str1.8
 3529 016d 000000   		.align 8
 3530              	.LC26:
 3531 0170 706E675F 		.string	"png_write_image: internal call error"
 3531      77726974 
 3531      655F696D 
 3531      6167653A 
 3531      20696E74 
 3532              		.section	.text.unlikely.png_write_image_16bit,"ax",@progbits
 3533              	.LCOLDB27:
 3534              		.section	.text.png_write_image_16bit,"ax",@progbits
 3535              	.LHOTB27:
 3536              		.p2align 4,,15
 3538              	png_write_image_16bit:
 3539              	.LFB91:
1743:fltk-1.3.4-1/png/pngwrite.c ****    png_image_write_control *display = png_voidcast(png_image_write_control*,
 3540              		.loc 1 1743 0
 3541              		.cfi_startproc
 3542              	.LVL338:
 3543 0000 4157     		pushq	%r15
 3544              		.cfi_def_cfa_offset 16
 3545              		.cfi_offset 15, -16
 3546 0002 4156     		pushq	%r14
 3547              		.cfi_def_cfa_offset 24
 3548              		.cfi_offset 14, -24
 3549 0004 4155     		pushq	%r13
 3550              		.cfi_def_cfa_offset 32
 3551              		.cfi_offset 13, -32
 3552 0006 4154     		pushq	%r12
 3553              		.cfi_def_cfa_offset 40
 3554              		.cfi_offset 12, -40
 3555 0008 55       		pushq	%rbp
 3556              		.cfi_def_cfa_offset 48
 3557              		.cfi_offset 6, -48
 3558 0009 53       		pushq	%rbx
 3559              		.cfi_def_cfa_offset 56
 3560              		.cfi_offset 3, -56
 3561 000a 4889FD   		movq	%rdi, %rbp
 3562 000d 4883EC28 		subq	$40, %rsp
 3563              		.cfi_def_cfa_offset 96
1746:fltk-1.3.4-1/png/pngwrite.c ****    png_structrp png_ptr = image->opaque->png_ptr;
 3564              		.loc 1 1746 0
 3565 0011 488B0F   		movq	(%rdi), %rcx
 3566              	.LVL339:
1749:fltk-1.3.4-1/png/pngwrite.c ****       display->first_row);
 3567              		.loc 1 1749 0
 3568 0014 4C8B6F28 		movq	40(%rdi), %r13
1747:fltk-1.3.4-1/png/pngwrite.c **** 
 3569              		.loc 1 1747 0
 3570 0018 488B01   		movq	(%rcx), %rax
1753:fltk-1.3.4-1/png/pngwrite.c ****    int aindex = 0;
 3571              		.loc 1 1753 0
 3572 001b 8B7114   		movl	20(%rcx), %esi
1747:fltk-1.3.4-1/png/pngwrite.c **** 
 3573              		.loc 1 1747 0
 3574 001e 488B00   		movq	(%rax), %rax
 3575 0021 48894424 		movq	%rax, 16(%rsp)
 3575      10
 3576              	.LVL340:
1751:fltk-1.3.4-1/png/pngwrite.c ****    png_uint_16p row_end;
 3577              		.loc 1 1751 0
 3578 0026 488B4738 		movq	56(%rdi), %rax
 3579              	.LVL341:
1755:fltk-1.3.4-1/png/pngwrite.c **** 
 3580              		.loc 1 1755 0
 3581 002a 8B7910   		movl	16(%rcx), %edi
 3582              	.LVL342:
1751:fltk-1.3.4-1/png/pngwrite.c ****    png_uint_16p row_end;
 3583              		.loc 1 1751 0
 3584 002d 4889C3   		movq	%rax, %rbx
 3585 0030 48894424 		movq	%rax, 8(%rsp)
 3585      08
 3586              	.LVL343:
1753:fltk-1.3.4-1/png/pngwrite.c ****    int aindex = 0;
 3587              		.loc 1 1753 0
 3588 0035 89F0     		movl	%esi, %eax
 3589              	.LVL344:
 3590 0037 83E002   		andl	$2, %eax
 3591 003a 83F801   		cmpl	$1, %eax
 3592 003d 19C0     		sbbl	%eax, %eax
 3593 003f 83E0FE   		andl	$-2, %eax
 3594 0042 83C003   		addl	$3, %eax
 3595              	.LVL345:
1757:fltk-1.3.4-1/png/pngwrite.c ****    {
 3596              		.loc 1 1757 0
 3597 0045 40F6C601 		testb	$1, %sil
 3598 0049 0F841401 		je	.L424
 3598      0000
1760:fltk-1.3.4-1/png/pngwrite.c ****          {
 3599              		.loc 1 1760 0
 3600 004f 83E620   		andl	$32, %esi
1769:fltk-1.3.4-1/png/pngwrite.c ****    }
 3601              		.loc 1 1769 0
 3602 0052 4863D0   		movslq	%eax, %rdx
1760:fltk-1.3.4-1/png/pngwrite.c ****          {
 3603              		.loc 1 1760 0
 3604 0055 7414     		je	.L425
 3605              	.LVL346:
1764:fltk-1.3.4-1/png/pngwrite.c ****          }
 3606              		.loc 1 1764 0
 3607 0057 4883C302 		addq	$2, %rbx
 3608              	.LVL347:
1763:fltk-1.3.4-1/png/pngwrite.c ****             ++output_row;
 3609              		.loc 1 1763 0
 3610 005b 4983C502 		addq	$2, %r13
 3611              	.LVL348:
1762:fltk-1.3.4-1/png/pngwrite.c ****             ++input_row; /* To point to the first component */
 3612              		.loc 1 1762 0
 3613 005f 48C7C2FF 		movq	$-1, %rdx
 3613      FFFFFF
1764:fltk-1.3.4-1/png/pngwrite.c ****          }
 3614              		.loc 1 1764 0
 3615 0066 48895C24 		movq	%rbx, 8(%rsp)
 3615      08
 3616              	.LVL349:
 3617              	.L425:
1779:fltk-1.3.4-1/png/pngwrite.c **** 
 3618              		.loc 1 1779 0
 3619 006b 8D7001   		leal	1(%rax), %esi
 3620 006e 89F3     		movl	%esi, %ebx
 3621 0070 0FAF590C 		imull	12(%rcx), %ebx
1781:fltk-1.3.4-1/png/pngwrite.c ****    {
 3622              		.loc 1 1781 0
 3623 0074 85FF     		testl	%edi, %edi
1779:fltk-1.3.4-1/png/pngwrite.c **** 
 3624              		.loc 1 1779 0
 3625 0076 4889D9   		movq	%rbx, %rcx
 3626              	.LVL350:
 3627 0079 488B5C24 		movq	8(%rsp), %rbx
 3627      08
 3628 007e 4C8D244B 		leaq	(%rbx,%rcx,2), %r12
 3629              	.LVL351:
1781:fltk-1.3.4-1/png/pngwrite.c ****    {
 3630              		.loc 1 1781 0
 3631 0082 0F84C700 		je	.L427
 3631      0000
 3632 0088 8D58FF   		leal	-1(%rax), %ebx
 3633 008b 4C8D3412 		leaq	(%rdx,%rdx), %r14
 3634 008f 897C241C 		movl	%edi, 28(%rsp)
 3635 0093 4C8D7C1B 		leaq	4(%rbx,%rbx), %r15
 3635      04
 3636 0098 4883C301 		addq	$1, %rbx
 3637              	.LVL352:
 3638              	.L432:
 3639              	.LBB248:
1786:fltk-1.3.4-1/png/pngwrite.c ****       {
 3640              		.loc 1 1786 0
 3641 009c 488B4424 		movq	8(%rsp), %rax
 3641      08
 3642 00a1 4D89EB   		movq	%r13, %r11
 3643 00a4 4C39E0   		cmpq	%r12, %rax
 3644 00a7 4889C7   		movq	%rax, %rdi
 3645 00aa 737F     		jnb	.L434
 3646              	.LVL353:
 3647 00ac 0F1F4000 		.p2align 4,,10
 3648              		.p2align 3
 3649              	.L443:
 3650              	.LBB249:
1788:fltk-1.3.4-1/png/pngwrite.c ****          png_uint_32 reciprocal = 0;
 3651              		.loc 1 1788 0
 3652 00b0 430FB734 		movzwl	(%r11,%r14), %esi
 3652      33
 3653              	.LVL354:
1789:fltk-1.3.4-1/png/pngwrite.c ****          int c;
 3654              		.loc 1 1789 0
 3655 00b5 31C0     		xorl	%eax, %eax
1799:fltk-1.3.4-1/png/pngwrite.c ****             reciprocal = ((0xffff<<15)+(alpha>>1))/alpha;
 3656              		.loc 1 1799 0
 3657 00b7 8D56FF   		leal	-1(%rsi), %edx
1792:fltk-1.3.4-1/png/pngwrite.c **** 
 3658              		.loc 1 1792 0
 3659 00ba 66428934 		movw	%si, (%rdi,%r14)
 3659      37
1799:fltk-1.3.4-1/png/pngwrite.c ****             reciprocal = ((0xffff<<15)+(alpha>>1))/alpha;
 3660              		.loc 1 1799 0
 3661 00bf 6683FAFD 		cmpw	$-3, %dx
 3662 00c3 7713     		ja	.L428
1800:fltk-1.3.4-1/png/pngwrite.c **** 
 3663              		.loc 1 1800 0
 3664 00c5 89F0     		movl	%esi, %eax
 3665 00c7 0FB7CE   		movzwl	%si, %ecx
 3666 00ca 66D1E8   		shrw	%ax
 3667 00cd 0FB7C0   		movzwl	%ax, %eax
 3668 00d0 050080FF 		addl	$2147450880, %eax
 3668      7F
 3669 00d5 99       		cltd
 3670 00d6 F7F9     		idivl	%ecx
 3671              	.LVL355:
 3672              	.L428:
1789:fltk-1.3.4-1/png/pngwrite.c ****          int c;
 3673              		.loc 1 1789 0
 3674 00d8 31D2     		xorl	%edx, %edx
 3675 00da EB28     		jmp	.L430
 3676              	.LVL356:
 3677 00dc 0F1F4000 		.p2align 4,,10
 3678              		.p2align 3
 3679              	.L452:
 3680              	.LBB250:
1820:fltk-1.3.4-1/png/pngwrite.c ****             {
 3681              		.loc 1 1820 0
 3682 00e0 6685C9   		testw	%cx, %cx
 3683 00e3 7412     		je	.L429
 3684 00e5 6683FEFF 		cmpw	$-1, %si
 3685 00e9 740C     		je	.L429
 3686              	.LBB251:
1822:fltk-1.3.4-1/png/pngwrite.c ****                calc += 16384; /* round to nearest */
 3687              		.loc 1 1822 0
 3688 00eb 0FAFC8   		imull	%eax, %ecx
 3689              	.LVL357:
1824:fltk-1.3.4-1/png/pngwrite.c ****             }
 3690              		.loc 1 1824 0
 3691 00ee 81C10040 		addl	$16384, %ecx
 3691      0000
 3692              	.LVL358:
 3693 00f4 C1E90F   		shrl	$15, %ecx
 3694              	.LVL359:
 3695              	.L429:
 3696              	.LBE251:
1827:fltk-1.3.4-1/png/pngwrite.c ****          }
 3697              		.loc 1 1827 0
 3698 00f7 66890C57 		movw	%cx, (%rdi,%rdx,2)
 3699 00fb 4883C201 		addq	$1, %rdx
 3700              	.LVL360:
 3701              	.LBE250:
1829:fltk-1.3.4-1/png/pngwrite.c **** 
 3702              		.loc 1 1829 0
 3703 00ff 4839DA   		cmpq	%rbx, %rdx
 3704 0102 741C     		je	.L451
 3705              	.LVL361:
 3706              	.L430:
 3707              	.LBB252:
1805:fltk-1.3.4-1/png/pngwrite.c **** 
 3708              		.loc 1 1805 0
 3709 0104 410FB70C 		movzwl	(%r11,%rdx,2), %ecx
 3709      53
 3710              	.LVL362:
1814:fltk-1.3.4-1/png/pngwrite.c ****                component = 65535;
 3711              		.loc 1 1814 0
 3712 0109 6639CE   		cmpw	%cx, %si
 3713 010c 77D2     		ja	.L452
1815:fltk-1.3.4-1/png/pngwrite.c **** 
 3714              		.loc 1 1815 0
 3715 010e B9FFFFFF 		movl	$-1, %ecx
 3715      FF
 3716              	.LVL363:
1827:fltk-1.3.4-1/png/pngwrite.c ****          }
 3717              		.loc 1 1827 0
 3718 0113 66890C57 		movw	%cx, (%rdi,%rdx,2)
 3719 0117 4883C201 		addq	$1, %rdx
 3720              	.LVL364:
 3721              	.LBE252:
1829:fltk-1.3.4-1/png/pngwrite.c **** 
 3722              		.loc 1 1829 0
 3723 011b 4839DA   		cmpq	%rbx, %rdx
 3724 011e 75E4     		jne	.L430
 3725              	.LVL365:
 3726              	.L451:
 3727 0120 4C01FF   		addq	%r15, %rdi
 3728 0123 4D01FB   		addq	%r15, %r11
 3729              	.LVL366:
 3730              	.LBE249:
1786:fltk-1.3.4-1/png/pngwrite.c ****       {
 3731              		.loc 1 1786 0
 3732 0126 4939FC   		cmpq	%rdi, %r12
 3733 0129 7785     		ja	.L443
 3734              	.LVL367:
 3735              	.L434:
1836:fltk-1.3.4-1/png/pngwrite.c ****       input_row += display->row_bytes/(sizeof (png_uint_16));
 3736              		.loc 1 1836 0
 3737 012b 488B7538 		movq	56(%rbp), %rsi
 3738 012f 488B7C24 		movq	16(%rsp), %rdi
 3738      10
 3739              	.LVL368:
 3740 0134 E8000000 		call	png_write_row
 3740      00
 3741              	.LVL369:
1837:fltk-1.3.4-1/png/pngwrite.c ****    }
 3742              		.loc 1 1837 0
 3743 0139 488B4530 		movq	48(%rbp), %rax
 3744 013d 4883E0FE 		andq	$-2, %rax
 3745 0141 4901C5   		addq	%rax, %r13
 3746              	.LVL370:
 3747              	.LBE248:
1781:fltk-1.3.4-1/png/pngwrite.c ****    {
 3748              		.loc 1 1781 0
 3749 0144 836C241C 		subl	$1, 28(%rsp)
 3749      01
 3750              	.LVL371:
 3751 0149 0F854DFF 		jne	.L432
 3751      FFFF
 3752              	.L427:
1841:fltk-1.3.4-1/png/pngwrite.c **** 
 3753              		.loc 1 1841 0
 3754 014f 4883C428 		addq	$40, %rsp
 3755              		.cfi_remember_state
 3756              		.cfi_def_cfa_offset 56
 3757 0153 B8010000 		movl	$1, %eax
 3757      00
 3758 0158 5B       		popq	%rbx
 3759              		.cfi_def_cfa_offset 48
 3760 0159 5D       		popq	%rbp
 3761              		.cfi_def_cfa_offset 40
 3762              	.LVL372:
 3763 015a 415C     		popq	%r12
 3764              		.cfi_def_cfa_offset 32
 3765              	.LVL373:
 3766 015c 415D     		popq	%r13
 3767              		.cfi_def_cfa_offset 24
 3768              	.LVL374:
 3769 015e 415E     		popq	%r14
 3770              		.cfi_def_cfa_offset 16
 3771 0160 415F     		popq	%r15
 3772              		.cfi_def_cfa_offset 8
 3773 0162 C3       		ret
 3774              	.LVL375:
 3775              	.L424:
 3776              		.cfi_restore_state
1773:fltk-1.3.4-1/png/pngwrite.c **** 
 3777              		.loc 1 1773 0
 3778 0163 488B7C24 		movq	16(%rsp), %rdi
 3778      10
 3779              	.LVL376:
 3780 0168 BE000000 		movl	$.LC26, %esi
 3780      00
 3781 016d E8000000 		call	png_error
 3781      00
 3782              	.LVL377:
 3783              		.cfi_endproc
 3784              	.LFE91:
 3786              		.section	.text.unlikely.png_write_image_16bit
 3787              	.LCOLDE27:
 3788              		.section	.text.png_write_image_16bit
 3789              	.LHOTE27:
 3790              		.section	.text.unlikely.png_set_flush,"ax",@progbits
 3791              	.LCOLDB28:
 3792              		.section	.text.png_set_flush,"ax",@progbits
 3793              	.LHOTB28:
 3794              		.p2align 4,,15
 3795              		.globl	png_set_flush
 3797              	png_set_flush:
 3798              	.LFB68:
 892:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_flush");
 3799              		.loc 1 892 0
 3800              		.cfi_startproc
 3801              	.LVL378:
 895:fltk-1.3.4-1/png/pngwrite.c ****       return;
 3802              		.loc 1 895 0
 3803 0000 4885FF   		testq	%rdi, %rdi
 3804 0003 7410     		je	.L453
 898:fltk-1.3.4-1/png/pngwrite.c **** }
 3805              		.loc 1 898 0
 3806 0005 85F6     		testl	%esi, %esi
 3807 0007 B8000000 		movl	$0, %eax
 3807      00
 3808 000c 0F48F0   		cmovs	%eax, %esi
 3809              	.LVL379:
 3810 000f 89B7A802 		movl	%esi, 680(%rdi)
 3810      0000
 3811              	.L453:
 3812 0015 F3C3     		rep ret
 3813              		.cfi_endproc
 3814              	.LFE68:
 3816              		.section	.text.unlikely.png_set_flush
 3817              	.LCOLDE28:
 3818              		.section	.text.png_set_flush
 3819              	.LHOTE28:
 3820              		.section	.text.unlikely.png_write_flush,"ax",@progbits
 3821              	.LCOLDB29:
 3822              		.section	.text.png_write_flush,"ax",@progbits
 3823              	.LHOTB29:
 3824              		.p2align 4,,15
 3825              		.globl	png_write_flush
 3827              	png_write_flush:
 3828              	.LFB69:
 904:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_write_flush");
 3829              		.loc 1 904 0
 3830              		.cfi_startproc
 3831              	.LVL380:
 907:fltk-1.3.4-1/png/pngwrite.c ****       return;
 3832              		.loc 1 907 0
 3833 0000 4885FF   		testq	%rdi, %rdi
 3834 0003 740E     		je	.L464
 911:fltk-1.3.4-1/png/pngwrite.c ****       return;
 3835              		.loc 1 911 0
 3836 0005 8B870002 		movl	512(%rdi), %eax
 3836      0000
 3837 000b 39871402 		cmpl	%eax, 532(%rdi)
 3837      0000
 3838 0011 7205     		jb	.L465
 3839              	.L464:
 3840 0013 F3C3     		rep ret
 3841              		.p2align 4,,10
 3842 0015 0F1F00   		.p2align 3
 3843              	.L465:
 904:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_write_flush");
 3844              		.loc 1 904 0
 3845 0018 53       		pushq	%rbx
 3846              		.cfi_def_cfa_offset 16
 3847              		.cfi_offset 3, -16
 914:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->flush_rows = 0;
 3848              		.loc 1 914 0
 3849 0019 B9020000 		movl	$2, %ecx
 3849      00
 3850 001e 4889FB   		movq	%rdi, %rbx
 3851 0021 31D2     		xorl	%edx, %edx
 3852 0023 31F6     		xorl	%esi, %esi
 3853 0025 E8000000 		call	png_compress_IDAT
 3853      00
 3854              	.LVL381:
 915:fltk-1.3.4-1/png/pngwrite.c ****    png_flush(png_ptr);
 3855              		.loc 1 915 0
 3856 002a C783AC02 		movl	$0, 684(%rbx)
 3856      00000000 
 3856      0000
 916:fltk-1.3.4-1/png/pngwrite.c **** }
 3857              		.loc 1 916 0
 3858 0034 4889DF   		movq	%rbx, %rdi
 917:fltk-1.3.4-1/png/pngwrite.c **** #endif /* WRITE_FLUSH */
 3859              		.loc 1 917 0
 3860 0037 5B       		popq	%rbx
 3861              		.cfi_restore 3
 3862              		.cfi_def_cfa_offset 8
 3863              	.LVL382:
 916:fltk-1.3.4-1/png/pngwrite.c **** }
 3864              		.loc 1 916 0
 3865 0038 E9000000 		jmp	png_flush
 3865      00
 3866              	.LVL383:
 3867              		.cfi_endproc
 3868              	.LFE69:
 3870              		.section	.text.unlikely.png_write_flush
 3871              	.LCOLDE29:
 3872              		.section	.text.png_write_flush
 3873              	.LHOTE29:
 3874              		.section	.text.unlikely.png_destroy_write_struct,"ax",@progbits
 3875              	.LCOLDB30:
 3876              		.section	.text.png_destroy_write_struct,"ax",@progbits
 3877              	.LHOTB30:
 3878              		.p2align 4,,15
 3879              		.globl	png_destroy_write_struct
 3881              	png_destroy_write_struct:
 3882              	.LFB71:
 980:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_destroy_write_struct");
 3883              		.loc 1 980 0
 3884              		.cfi_startproc
 3885              	.LVL384:
 983:fltk-1.3.4-1/png/pngwrite.c ****    {
 3886              		.loc 1 983 0
 3887 0000 4885FF   		testq	%rdi, %rdi
 3888 0003 0F846501 		je	.L480
 3888      0000
 980:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_destroy_write_struct");
 3889              		.loc 1 980 0
 3890 0009 55       		pushq	%rbp
 3891              		.cfi_def_cfa_offset 16
 3892              		.cfi_offset 6, -16
 3893 000a 53       		pushq	%rbx
 3894              		.cfi_def_cfa_offset 24
 3895              		.cfi_offset 3, -24
 3896 000b 4883EC08 		subq	$8, %rsp
 3897              		.cfi_def_cfa_offset 32
 3898              	.LBB256:
 985:fltk-1.3.4-1/png/pngwrite.c **** 
 3899              		.loc 1 985 0
 3900 000f 488B1F   		movq	(%rdi), %rbx
 3901              	.LVL385:
 987:fltk-1.3.4-1/png/pngwrite.c ****       {
 3902              		.loc 1 987 0
 3903 0012 4885DB   		testq	%rbx, %rbx
 3904 0015 0F844D01 		je	.L466
 3904      0000
 3905 001b 4889FD   		movq	%rdi, %rbp
 989:fltk-1.3.4-1/png/pngwrite.c **** 
 3906              		.loc 1 989 0
 3907 001e 4889DF   		movq	%rbx, %rdi
 3908              	.LVL386:
 3909 0021 E8000000 		call	png_destroy_info_struct
 3909      00
 3910              	.LVL387:
 991:fltk-1.3.4-1/png/pngwrite.c ****          png_write_destroy(png_ptr);
 3911              		.loc 1 991 0
 3912 0026 48C74500 		movq	$0, 0(%rbp)
 3912      00000000 
 3913              	.LVL388:
 3914              	.LBB257:
 3915              	.LBB258:
 931:fltk-1.3.4-1/png/pngwrite.c ****       deflateEnd(&png_ptr->zstream);
 3916              		.loc 1 931 0
 3917 002e F6833001 		testb	$2, 304(%rbx)
 3917      000002
 3918 0035 0F851501 		jne	.L481
 3918      0000
 3919              	.L468:
 935:fltk-1.3.4-1/png/pngwrite.c ****    png_free(png_ptr, png_ptr->row_buf);
 3920              		.loc 1 935 0
 3921 003b 488DB3B0 		leaq	432(%rbx), %rsi
 3921      010000
 3922 0042 4889DF   		movq	%rbx, %rdi
 3923 0045 E8000000 		call	png_free_buffer_list
 3923      00
 3924              	.LVL389:
 936:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->row_buf = NULL;
 3925              		.loc 1 936 0
 3926 004a 488BB328 		movq	552(%rbx), %rsi
 3926      020000
 3927 0051 4889DF   		movq	%rbx, %rdi
 3928 0054 E8000000 		call	png_free
 3928      00
 3929              	.LVL390:
 939:fltk-1.3.4-1/png/pngwrite.c ****    png_free(png_ptr, png_ptr->sub_row);
 3930              		.loc 1 939 0
 3931 0059 488BB320 		movq	544(%rbx), %rsi
 3931      020000
 3932 0060 4889DF   		movq	%rbx, %rdi
 937:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_FILTER_SUPPORTED
 3933              		.loc 1 937 0
 3934 0063 48C78328 		movq	$0, 552(%rbx)
 3934      02000000 
 3934      000000
 939:fltk-1.3.4-1/png/pngwrite.c ****    png_free(png_ptr, png_ptr->sub_row);
 3935              		.loc 1 939 0
 3936 006e E8000000 		call	png_free
 3936      00
 3937              	.LVL391:
 940:fltk-1.3.4-1/png/pngwrite.c ****    png_free(png_ptr, png_ptr->up_row);
 3938              		.loc 1 940 0
 3939 0073 488BB330 		movq	560(%rbx), %rsi
 3939      020000
 3940 007a 4889DF   		movq	%rbx, %rdi
 3941 007d E8000000 		call	png_free
 3941      00
 3942              	.LVL392:
 941:fltk-1.3.4-1/png/pngwrite.c ****    png_free(png_ptr, png_ptr->avg_row);
 3943              		.loc 1 941 0
 3944 0082 488BB338 		movq	568(%rbx), %rsi
 3944      020000
 3945 0089 4889DF   		movq	%rbx, %rdi
 3946 008c E8000000 		call	png_free
 3946      00
 3947              	.LVL393:
 942:fltk-1.3.4-1/png/pngwrite.c ****    png_free(png_ptr, png_ptr->paeth_row);
 3948              		.loc 1 942 0
 3949 0091 488BB340 		movq	576(%rbx), %rsi
 3949      020000
 3950 0098 4889DF   		movq	%rbx, %rdi
 3951 009b E8000000 		call	png_free
 3951      00
 3952              	.LVL394:
 943:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->prev_row = NULL;
 3953              		.loc 1 943 0
 3954 00a0 488BB348 		movq	584(%rbx), %rsi
 3954      020000
 3955 00a7 4889DF   		movq	%rbx, %rdi
 3956 00aa E8000000 		call	png_free
 3956      00
 3957              	.LVL395:
 953:fltk-1.3.4-1/png/pngwrite.c ****    png_free(png_ptr, png_ptr->filter_costs);
 3958              		.loc 1 953 0
 3959 00af 4889DF   		movq	%rbx, %rdi
 944:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->sub_row = NULL;
 3960              		.loc 1 944 0
 3961 00b2 48C78320 		movq	$0, 544(%rbx)
 3961      02000000 
 3961      000000
 945:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->up_row = NULL;
 3962              		.loc 1 945 0
 3963 00bd 48C78330 		movq	$0, 560(%rbx)
 3963      02000000 
 3963      000000
 946:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->avg_row = NULL;
 3964              		.loc 1 946 0
 3965 00c8 48C78338 		movq	$0, 568(%rbx)
 3965      02000000 
 3965      000000
 947:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->paeth_row = NULL;
 3966              		.loc 1 947 0
 3967 00d3 48C78340 		movq	$0, 576(%rbx)
 3967      02000000 
 3967      000000
 948:fltk-1.3.4-1/png/pngwrite.c **** #endif
 3968              		.loc 1 948 0
 3969 00de 48C78348 		movq	$0, 584(%rbx)
 3969      02000000 
 3969      000000
 953:fltk-1.3.4-1/png/pngwrite.c ****    png_free(png_ptr, png_ptr->filter_costs);
 3970              		.loc 1 953 0
 3971 00e9 E8000000 		call	png_reset_filter_heuristics
 3971      00
 3972              	.LVL396:
 954:fltk-1.3.4-1/png/pngwrite.c ****    png_free(png_ptr, png_ptr->inv_filter_costs);
 3973              		.loc 1 954 0
 3974 00ee 488BB3B8 		movq	952(%rbx), %rsi
 3974      030000
 3975 00f5 4889DF   		movq	%rbx, %rdi
 3976 00f8 E8000000 		call	png_free
 3976      00
 3977              	.LVL397:
 955:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->filter_costs = NULL;
 3978              		.loc 1 955 0
 3979 00fd 488BB3C0 		movq	960(%rbx), %rsi
 3979      030000
 3980 0104 4889DF   		movq	%rbx, %rdi
 3981 0107 E8000000 		call	png_free
 3981      00
 3982              	.LVL398:
 961:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->chunk_list = NULL;
 3983              		.loc 1 961 0
 3984 010c 488BB308 		movq	1032(%rbx), %rsi
 3984      040000
 3985 0113 4889DF   		movq	%rbx, %rdi
 956:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->inv_filter_costs = NULL;
 3986              		.loc 1 956 0
 3987 0116 48C783B8 		movq	$0, 952(%rbx)
 3987      03000000 
 3987      000000
 957:fltk-1.3.4-1/png/pngwrite.c **** #endif
 3988              		.loc 1 957 0
 3989 0121 48C783C0 		movq	$0, 960(%rbx)
 3989      03000000 
 3989      000000
 961:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->chunk_list = NULL;
 3990              		.loc 1 961 0
 3991 012c E8000000 		call	png_free
 3991      00
 3992              	.LVL399:
 962:fltk-1.3.4-1/png/pngwrite.c **** #endif
 3993              		.loc 1 962 0
 3994 0131 48C78308 		movq	$0, 1032(%rbx)
 3994      04000000 
 3994      000000
 3995              	.LVL400:
 3996              	.LBE258:
 3997              	.LBE257:
 3998              	.LBE256:
 996:fltk-1.3.4-1/png/pngwrite.c **** 
 3999              		.loc 1 996 0
 4000 013c 4883C408 		addq	$8, %rsp
 4001              		.cfi_remember_state
 4002              		.cfi_def_cfa_offset 24
 4003              	.LBB261:
 993:fltk-1.3.4-1/png/pngwrite.c ****       }
 4004              		.loc 1 993 0
 4005 0140 4889DF   		movq	%rbx, %rdi
 4006              	.LBE261:
 996:fltk-1.3.4-1/png/pngwrite.c **** 
 4007              		.loc 1 996 0
 4008 0143 5B       		popq	%rbx
 4009              		.cfi_restore 3
 4010              		.cfi_def_cfa_offset 16
 4011              	.LVL401:
 4012 0144 5D       		popq	%rbp
 4013              		.cfi_restore 6
 4014              		.cfi_def_cfa_offset 8
 4015              	.LVL402:
 4016              	.LBB262:
 993:fltk-1.3.4-1/png/pngwrite.c ****       }
 4017              		.loc 1 993 0
 4018 0145 E9000000 		jmp	png_destroy_png_struct
 4018      00
 4019              	.LVL403:
 4020 014a 660F1F44 		.p2align 4,,10
 4020      0000
 4021              		.p2align 3
 4022              	.L481:
 4023              		.cfi_restore_state
 4024              	.LBB260:
 4025              	.LBB259:
 932:fltk-1.3.4-1/png/pngwrite.c **** 
 4026              		.loc 1 932 0
 4027 0150 488DBB40 		leaq	320(%rbx), %rdi
 4027      010000
 4028 0157 E8000000 		call	deflateEnd
 4028      00
 4029              	.LVL404:
 4030 015c E9DAFEFF 		jmp	.L468
 4030      FF
 4031              	.LVL405:
 4032              		.p2align 4,,10
 4033 0161 0F1F8000 		.p2align 3
 4033      000000
 4034              	.L466:
 4035              	.LBE259:
 4036              	.LBE260:
 4037              	.LBE262:
 996:fltk-1.3.4-1/png/pngwrite.c **** 
 4038              		.loc 1 996 0
 4039 0168 4883C408 		addq	$8, %rsp
 4040              		.cfi_def_cfa_offset 24
 4041 016c 5B       		popq	%rbx
 4042              		.cfi_restore 3
 4043              		.cfi_def_cfa_offset 16
 4044              	.LVL406:
 4045 016d 5D       		popq	%rbp
 4046              		.cfi_restore 6
 4047              		.cfi_def_cfa_offset 8
 4048              	.LVL407:
 4049              	.L480:
 4050 016e F3C3     		rep ret
 4051              		.cfi_endproc
 4052              	.LFE71:
 4054              		.section	.text.unlikely.png_destroy_write_struct
 4055              	.LCOLDE30:
 4056              		.section	.text.png_destroy_write_struct
 4057              	.LHOTE30:
 4058              		.section	.rodata.str1.8
 4059 0195 000000   		.align 8
 4060              	.LC31:
 4061 0198 556E6B6E 		.string	"Unknown row filter for method 0"
 4061      6F776E20 
 4061      726F7720 
 4061      66696C74 
 4061      65722066 
 4062              		.align 8
 4063              	.LC32:
 4064 01b8 43616E27 		.string	"Can't add Up filter after starting"
 4064      74206164 
 4064      64205570 
 4064      2066696C 
 4064      74657220 
 4065 01db 00000000 		.align 8
 4065      00
 4066              	.LC33:
 4067 01e0 43616E27 		.string	"Can't add Average filter after starting"
 4067      74206164 
 4067      64204176 
 4067      65726167 
 4067      65206669 
 4068              		.align 8
 4069              	.LC34:
 4070 0208 43616E27 		.string	"Can't add Paeth filter after starting"
 4070      74206164 
 4070      64205061 
 4070      65746820 
 4070      66696C74 
 4071              		.section	.rodata.str1.1
 4072              	.LC35:
 4073 001b 556E6B6E 		.string	"Unknown custom filter method"
 4073      6F776E20 
 4073      63757374 
 4073      6F6D2066 
 4073      696C7465 
 4074              		.section	.text.unlikely.png_set_filter,"ax",@progbits
 4075              	.LCOLDB36:
 4076              		.section	.text.png_set_filter,"ax",@progbits
 4077              	.LHOTB36:
 4078              		.p2align 4,,15
 4079              		.globl	png_set_filter
 4081              	png_set_filter:
 4082              	.LFB72:
1001:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_filter");
 4083              		.loc 1 1001 0
 4084              		.cfi_startproc
 4085              	.LVL408:
1004:fltk-1.3.4-1/png/pngwrite.c ****       return;
 4086              		.loc 1 1004 0
 4087 0000 4885FF   		testq	%rdi, %rdi
 4088 0003 0F849000 		je	.L522
 4088      0000
1001:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_filter");
 4089              		.loc 1 1001 0
 4090 0009 53       		pushq	%rbx
 4091              		.cfi_def_cfa_offset 16
 4092              		.cfi_offset 3, -16
1008:fltk-1.3.4-1/png/pngwrite.c ****        (method == PNG_INTRAPIXEL_DIFFERENCING))
 4093              		.loc 1 1008 0
 4094 000a F6871804 		testb	$4, 1048(%rdi)
 4094      000004
 4095 0011 4889FB   		movq	%rdi, %rbx
 4096 0014 7405     		je	.L507
 4097 0016 83FE40   		cmpl	$64, %esi
 4098 0019 7408     		je	.L484
 4099              	.L507:
1013:fltk-1.3.4-1/png/pngwrite.c ****    {
 4100              		.loc 1 1013 0
 4101 001b 85F6     		testl	%esi, %esi
 4102 001d 0F853602 		jne	.L486
 4102      0000
 4103              	.L484:
 4104              	.LVL409:
1015:fltk-1.3.4-1/png/pngwrite.c ****       {
 4105              		.loc 1 1015 0
 4106 0023 0FB6C2   		movzbl	%dl, %eax
 4107 0026 83F807   		cmpl	$7, %eax
 4108 0029 0F872901 		ja	.L487
 4108      0000
 4109 002f FF24C500 		jmp	*.L489(,%rax,8)
 4109      000000
 4110              		.section	.rodata.png_set_filter,"a",@progbits
 4111              		.align 8
 4112              		.align 4
 4113              	.L489:
 4114 0000 00000000 		.quad	.L488
 4114      00000000 
 4115 0008 00000000 		.quad	.L490
 4115      00000000 
 4116 0010 00000000 		.quad	.L491
 4116      00000000 
 4117 0018 00000000 		.quad	.L492
 4117      00000000 
 4118 0020 00000000 		.quad	.L493
 4118      00000000 
 4119 0028 00000000 		.quad	.L494
 4119      00000000 
 4120 0030 00000000 		.quad	.L494
 4120      00000000 
 4121 0038 00000000 		.quad	.L494
 4121      00000000 
 4122              		.section	.text.png_set_filter
 4123 0036 662E0F1F 		.p2align 4,,10
 4123      84000000 
 4123      0000
 4124              		.p2align 3
 4125              	.L494:
1020:fltk-1.3.4-1/png/pngwrite.c ****             /* FALL THROUGH */
 4126              		.loc 1 1020 0
 4127 0040 BE000000 		movl	$.LC31, %esi
 4127      00
 4128 0045 4889DF   		movq	%rbx, %rdi
 4129              	.LVL410:
 4130 0048 E8000000 		call	png_app_error
 4130      00
 4131              	.LVL411:
 4132              	.L488:
1024:fltk-1.3.4-1/png/pngwrite.c **** 
 4133              		.loc 1 1024 0
 4134 004d C6837602 		movb	$8, 630(%rbx)
 4134      000008
 4135              	.L495:
1056:fltk-1.3.4-1/png/pngwrite.c ****       {
 4136              		.loc 1 1056 0
 4137 0054 4883BB28 		cmpq	$0, 552(%rbx)
 4137      02000000 
 4138 005c 743A     		je	.L482
 4139              	.L499:
1067:fltk-1.3.4-1/png/pngwrite.c ****               png_ptr->up_row == NULL)
 4140              		.loc 1 1067 0
 4141 005e 0FB68376 		movzbl	630(%rbx), %eax
 4141      020000
 4142 0065 A820     		testb	$32, %al
 4143 0067 740E     		je	.L500
1067:fltk-1.3.4-1/png/pngwrite.c ****               png_ptr->up_row == NULL)
 4144              		.loc 1 1067 0 is_stmt 0 discriminator 1
 4145 0069 4883BB38 		cmpq	$0, 568(%rbx)
 4145      02000000 
 4146 0071 0F844901 		je	.L524
 4146      0000
 4147              	.L500:
1085:fltk-1.3.4-1/png/pngwrite.c ****               png_ptr->avg_row == NULL)
 4148              		.loc 1 1085 0 is_stmt 1
 4149 0077 A840     		testb	$64, %al
 4150 0079 740E     		je	.L502
1085:fltk-1.3.4-1/png/pngwrite.c ****               png_ptr->avg_row == NULL)
 4151              		.loc 1 1085 0 is_stmt 0 discriminator 1
 4152 007b 4883BB40 		cmpq	$0, 576(%rbx)
 4152      02000000 
 4153 0083 0F84F700 		je	.L525
 4153      0000
 4154              	.L502:
1103:fltk-1.3.4-1/png/pngwrite.c ****              png_ptr->paeth_row == NULL)
 4155              		.loc 1 1103 0 is_stmt 1
 4156 0089 84C0     		testb	%al, %al
 4157 008b 7813     		js	.L526
 4158              	.L504:
1120:fltk-1.3.4-1/png/pngwrite.c **** #endif /* WRITE_FILTER */
 4159              		.loc 1 1120 0
 4160 008d 84C0     		testb	%al, %al
 4161 008f 7507     		jne	.L482
1122:fltk-1.3.4-1/png/pngwrite.c ****       }
 4162              		.loc 1 1122 0
 4163 0091 C6837602 		movb	$8, 630(%rbx)
 4163      000008
 4164              	.L482:
1127:fltk-1.3.4-1/png/pngwrite.c **** 
 4165              		.loc 1 1127 0
 4166 0098 5B       		popq	%rbx
 4167              		.cfi_restore 3
 4168              		.cfi_def_cfa_offset 8
 4169              	.LVL412:
 4170              	.L522:
 4171 0099 F3C3     		rep ret
 4172              	.LVL413:
 4173 009b 0F1F4400 		.p2align 4,,10
 4173      00
 4174              		.p2align 3
 4175              	.L526:
 4176              		.cfi_def_cfa_offset 16
 4177              		.cfi_offset 3, -16
1103:fltk-1.3.4-1/png/pngwrite.c ****              png_ptr->paeth_row == NULL)
 4178              		.loc 1 1103 0 discriminator 1
 4179 00a0 4883BB48 		cmpq	$0, 584(%rbx)
 4179      02000000 
 4180 00a8 75EE     		jne	.L482
1106:fltk-1.3.4-1/png/pngwrite.c ****             {
 4181              		.loc 1 1106 0
 4182 00aa 4883BB20 		cmpq	$0, 544(%rbx)
 4182      02000000 
 4183 00b2 0F847F01 		je	.L527
 4183      0000
1114:fltk-1.3.4-1/png/pngwrite.c ****                    (png_ptr->rowbytes + 1));
 4184              		.loc 1 1114 0
 4185 00b8 488B8308 		movq	520(%rbx), %rax
 4185      020000
 4186 00bf 4889DF   		movq	%rbx, %rdi
 4187 00c2 488D7001 		leaq	1(%rax), %rsi
 4188 00c6 E8000000 		call	png_malloc
 4188      00
 4189              	.LVL414:
 4190 00cb 48898348 		movq	%rax, 584(%rbx)
 4190      020000
1116:fltk-1.3.4-1/png/pngwrite.c ****             }
 4191              		.loc 1 1116 0
 4192 00d2 C60004   		movb	$4, (%rax)
 4193 00d5 0FB68376 		movzbl	630(%rbx), %eax
 4193      020000
 4194 00dc EBAF     		jmp	.L504
 4195              	.LVL415:
 4196 00de 6690     		.p2align 4,,10
 4197              		.p2align 3
 4198              	.L490:
1056:fltk-1.3.4-1/png/pngwrite.c ****       {
 4199              		.loc 1 1056 0
 4200 00e0 4883BB28 		cmpq	$0, 552(%rbx)
 4200      02000000 
1028:fltk-1.3.4-1/png/pngwrite.c **** 
 4201              		.loc 1 1028 0
 4202 00e8 C6837602 		movb	$16, 630(%rbx)
 4202      000010
1056:fltk-1.3.4-1/png/pngwrite.c ****       {
 4203              		.loc 1 1056 0
 4204 00ef 74A7     		je	.L482
 4205              	.LVL416:
 4206              	.L498:
1059:fltk-1.3.4-1/png/pngwrite.c ****              png_ptr->sub_row == NULL)
 4207              		.loc 1 1059 0
 4208 00f1 4883BB30 		cmpq	$0, 560(%rbx)
 4208      02000000 
 4209 00f9 0F855FFF 		jne	.L499
 4209      FFFF
1062:fltk-1.3.4-1/png/pngwrite.c ****                 (png_ptr->rowbytes + 1));
 4210              		.loc 1 1062 0
 4211 00ff 488B8308 		movq	520(%rbx), %rax
 4211      020000
 4212 0106 4889DF   		movq	%rbx, %rdi
 4213 0109 488D7001 		leaq	1(%rax), %rsi
 4214 010d E8000000 		call	png_malloc
 4214      00
 4215              	.LVL417:
 4216 0112 48898330 		movq	%rax, 560(%rbx)
 4216      020000
1064:fltk-1.3.4-1/png/pngwrite.c ****          }
 4217              		.loc 1 1064 0
 4218 0119 C60001   		movb	$1, (%rax)
 4219 011c E93DFFFF 		jmp	.L499
 4219      FF
 4220              	.LVL418:
 4221              		.p2align 4,,10
 4222 0121 0F1F8000 		.p2align 3
 4222      000000
 4223              	.L491:
1031:fltk-1.3.4-1/png/pngwrite.c **** 
 4224              		.loc 1 1031 0
 4225 0128 C6837602 		movb	$32, 630(%rbx)
 4225      000020
 4226 012f E920FFFF 		jmp	.L495
 4226      FF
 4227              		.p2align 4,,10
 4228 0134 0F1F4000 		.p2align 3
 4229              	.L492:
1034:fltk-1.3.4-1/png/pngwrite.c **** 
 4230              		.loc 1 1034 0
 4231 0138 C6837602 		movb	$64, 630(%rbx)
 4231      000040
 4232 013f E910FFFF 		jmp	.L495
 4232      FF
 4233              		.p2align 4,,10
 4234 0144 0F1F4000 		.p2align 3
 4235              	.L493:
1037:fltk-1.3.4-1/png/pngwrite.c **** 
 4236              		.loc 1 1037 0
 4237 0148 C6837602 		movb	$-128, 630(%rbx)
 4237      000080
 4238 014f E900FFFF 		jmp	.L495
 4238      FF
 4239              		.p2align 4,,10
 4240 0154 0F1F4000 		.p2align 3
 4241              	.L487:
1056:fltk-1.3.4-1/png/pngwrite.c ****       {
 4242              		.loc 1 1056 0
 4243 0158 4883BB28 		cmpq	$0, 552(%rbx)
 4243      02000000 
1040:fltk-1.3.4-1/png/pngwrite.c **** #else
 4244              		.loc 1 1040 0
 4245 0160 88937602 		movb	%dl, 630(%rbx)
 4245      0000
1056:fltk-1.3.4-1/png/pngwrite.c ****       {
 4246              		.loc 1 1056 0
 4247 0166 0F842CFF 		je	.L482
 4247      FFFF
1059:fltk-1.3.4-1/png/pngwrite.c ****              png_ptr->sub_row == NULL)
 4248              		.loc 1 1059 0
 4249 016c 83E210   		andl	$16, %edx
 4250              	.LVL419:
 4251 016f 7580     		jne	.L498
 4252 0171 E9E8FEFF 		jmp	.L499
 4252      FF
 4253 0176 662E0F1F 		.p2align 4,,10
 4253      84000000 
 4253      0000
 4254              		.p2align 3
 4255              	.L525:
1088:fltk-1.3.4-1/png/pngwrite.c ****             {
 4256              		.loc 1 1088 0
 4257 0180 4883BB20 		cmpq	$0, 544(%rbx)
 4257      02000000 
 4258 0188 0F848700 		je	.L528
 4258      0000
1097:fltk-1.3.4-1/png/pngwrite.c ****                    (png_ptr->rowbytes + 1));
 4259              		.loc 1 1097 0
 4260 018e 488B8308 		movq	520(%rbx), %rax
 4260      020000
 4261 0195 4889DF   		movq	%rbx, %rdi
 4262 0198 488D7001 		leaq	1(%rax), %rsi
 4263 019c E8000000 		call	png_malloc
 4263      00
 4264              	.LVL420:
 4265 01a1 48898340 		movq	%rax, 576(%rbx)
 4265      020000
1099:fltk-1.3.4-1/png/pngwrite.c ****             }
 4266              		.loc 1 1099 0
 4267 01a8 C60003   		movb	$3, (%rax)
 4268 01ab 0FB68376 		movzbl	630(%rbx), %eax
 4268      020000
 4269 01b2 E9D2FEFF 		jmp	.L502
 4269      FF
 4270 01b7 660F1F84 		.p2align 4,,10
 4270      00000000 
 4270      00
 4271              		.p2align 3
 4272              	.L524:
1070:fltk-1.3.4-1/png/pngwrite.c ****             {
 4273              		.loc 1 1070 0
 4274 01c0 4883BB20 		cmpq	$0, 544(%rbx)
 4274      02000000 
 4275 01c8 7429     		je	.L529
1079:fltk-1.3.4-1/png/pngwrite.c ****                    (png_ptr->rowbytes + 1));
 4276              		.loc 1 1079 0
 4277 01ca 488B8308 		movq	520(%rbx), %rax
 4277      020000
 4278 01d1 4889DF   		movq	%rbx, %rdi
 4279 01d4 488D7001 		leaq	1(%rax), %rsi
 4280 01d8 E8000000 		call	png_malloc
 4280      00
 4281              	.LVL421:
 4282 01dd 48898338 		movq	%rax, 568(%rbx)
 4282      020000
1081:fltk-1.3.4-1/png/pngwrite.c ****             }
 4283              		.loc 1 1081 0
 4284 01e4 C60002   		movb	$2, (%rax)
 4285 01e7 0FB68376 		movzbl	630(%rbx), %eax
 4285      020000
 4286 01ee E984FEFF 		jmp	.L500
 4286      FF
 4287              	.L529:
1072:fltk-1.3.4-1/png/pngwrite.c ****                png_ptr->do_filter = (png_byte)(png_ptr->do_filter &
 4288              		.loc 1 1072 0
 4289 01f3 BE000000 		movl	$.LC32, %esi
 4289      00
 4290 01f8 4889DF   		movq	%rbx, %rdi
 4291 01fb E8000000 		call	png_warning
 4291      00
 4292              	.LVL422:
1073:fltk-1.3.4-1/png/pngwrite.c ****                    ~PNG_FILTER_UP);
 4293              		.loc 1 1073 0
 4294 0200 0FB68376 		movzbl	630(%rbx), %eax
 4294      020000
 4295 0207 83E0DF   		andl	$-33, %eax
 4296 020a 88837602 		movb	%al, 630(%rbx)
 4296      0000
 4297 0210 E962FEFF 		jmp	.L500
 4297      FF
 4298              	.L528:
1090:fltk-1.3.4-1/png/pngwrite.c ****                png_ptr->do_filter = (png_byte)(png_ptr->do_filter &
 4299              		.loc 1 1090 0
 4300 0215 BE000000 		movl	$.LC33, %esi
 4300      00
 4301 021a 4889DF   		movq	%rbx, %rdi
 4302 021d E8000000 		call	png_warning
 4302      00
 4303              	.LVL423:
1091:fltk-1.3.4-1/png/pngwrite.c ****                    ~PNG_FILTER_AVG);
 4304              		.loc 1 1091 0
 4305 0222 0FB68376 		movzbl	630(%rbx), %eax
 4305      020000
 4306 0229 83E0BF   		andl	$-65, %eax
 4307 022c 88837602 		movb	%al, 630(%rbx)
 4307      0000
 4308 0232 E952FEFF 		jmp	.L502
 4308      FF
 4309              	.L527:
1108:fltk-1.3.4-1/png/pngwrite.c ****                png_ptr->do_filter &= (png_byte)(~PNG_FILTER_PAETH);
 4310              		.loc 1 1108 0
 4311 0237 BE000000 		movl	$.LC34, %esi
 4311      00
 4312 023c 4889DF   		movq	%rbx, %rdi
 4313 023f E8000000 		call	png_warning
 4313      00
 4314              	.LVL424:
1109:fltk-1.3.4-1/png/pngwrite.c ****             }
 4315              		.loc 1 1109 0
 4316 0244 0FB68376 		movzbl	630(%rbx), %eax
 4316      020000
 4317 024b 83E07F   		andl	$127, %eax
 4318 024e 88837602 		movb	%al, 630(%rbx)
 4318      0000
 4319 0254 E934FEFF 		jmp	.L504
 4319      FF
 4320              	.LVL425:
 4321              	.L486:
1126:fltk-1.3.4-1/png/pngwrite.c **** }
 4322              		.loc 1 1126 0
 4323 0259 BE000000 		movl	$.LC35, %esi
 4323      00
 4324              	.LVL426:
 4325 025e 4889DF   		movq	%rbx, %rdi
 4326 0261 E8000000 		call	png_error
 4326      00
 4327              	.LVL427:
 4328              		.cfi_endproc
 4329              	.LFE72:
 4331              		.section	.text.unlikely.png_set_filter
 4332              	.LCOLDE36:
 4333              		.section	.text.png_set_filter
 4334              	.LHOTE36:
 4335              		.section	.rodata.str1.8
 4336 022e 0000     		.align 8
 4337              	.LC37:
 4338 0230 6E6F2063 		.string	"no color-map for color-mapped image"
 4338      6F6C6F72 
 4338      2D6D6170 
 4338      20666F72 
 4338      20636F6C 
 4339 0254 00000000 		.align 8
 4340              	.LC38:
 4341 0258 706E675F 		.string	"png_write_image: unsupported transformation"
 4341      77726974 
 4341      655F696D 
 4341      6167653A 
 4341      20756E73 
 4342              		.section	.text.unlikely.png_image_write_main,"ax",@progbits
 4343              	.LCOLDB39:
 4344              		.section	.text.png_image_write_main,"ax",@progbits
 4345              	.LHOTB39:
 4346              		.p2align 4,,15
 4348              	png_image_write_main:
 4349              	.LFB95:
2139:fltk-1.3.4-1/png/pngwrite.c **** 
2140:fltk-1.3.4-1/png/pngwrite.c **** static int
2141:fltk-1.3.4-1/png/pngwrite.c **** png_image_write_main(png_voidp argument)
2142:fltk-1.3.4-1/png/pngwrite.c **** {
 4350              		.loc 1 2142 0
 4351              		.cfi_startproc
 4352              	.LVL428:
 4353 0000 4157     		pushq	%r15
 4354              		.cfi_def_cfa_offset 16
 4355              		.cfi_offset 15, -16
 4356 0002 4156     		pushq	%r14
 4357              		.cfi_def_cfa_offset 24
 4358              		.cfi_offset 14, -24
 4359 0004 4155     		pushq	%r13
 4360              		.cfi_def_cfa_offset 32
 4361              		.cfi_offset 13, -32
 4362 0006 4154     		pushq	%r12
 4363              		.cfi_def_cfa_offset 40
 4364              		.cfi_offset 12, -40
 4365 0008 4989FD   		movq	%rdi, %r13
 4366 000b 55       		pushq	%rbp
 4367              		.cfi_def_cfa_offset 48
 4368              		.cfi_offset 6, -48
 4369 000c 53       		pushq	%rbx
 4370              		.cfi_def_cfa_offset 56
 4371              		.cfi_offset 3, -56
 4372 000d 4883EC28 		subq	$40, %rsp
 4373              		.cfi_def_cfa_offset 96
2143:fltk-1.3.4-1/png/pngwrite.c ****    png_image_write_control *display = png_voidcast(png_image_write_control*,
2144:fltk-1.3.4-1/png/pngwrite.c ****       argument);
2145:fltk-1.3.4-1/png/pngwrite.c ****    png_imagep image = display->image;
 4374              		.loc 1 2145 0
 4375 0011 488B2F   		movq	(%rdi), %rbp
 4376              	.LVL429:
2146:fltk-1.3.4-1/png/pngwrite.c ****    png_structrp png_ptr = image->opaque->png_ptr;
 4377              		.loc 1 2146 0
 4378 0014 488B4500 		movq	0(%rbp), %rax
2147:fltk-1.3.4-1/png/pngwrite.c ****    png_inforp info_ptr = image->opaque->info_ptr;
2148:fltk-1.3.4-1/png/pngwrite.c ****    png_uint_32 format = image->format;
 4379              		.loc 1 2148 0
 4380 0018 448B7D14 		movl	20(%rbp), %r15d
2146:fltk-1.3.4-1/png/pngwrite.c ****    png_structrp png_ptr = image->opaque->png_ptr;
 4381              		.loc 1 2146 0
 4382 001c 488B18   		movq	(%rax), %rbx
 4383              	.LVL430:
2147:fltk-1.3.4-1/png/pngwrite.c ****    png_inforp info_ptr = image->opaque->info_ptr;
 4384              		.loc 1 2147 0
 4385 001f 488B4008 		movq	8(%rax), %rax
2149:fltk-1.3.4-1/png/pngwrite.c **** 
2150:fltk-1.3.4-1/png/pngwrite.c ****    /* The following four ints are actually booleans */
2151:fltk-1.3.4-1/png/pngwrite.c ****    int colormap = (format & PNG_FORMAT_FLAG_COLORMAP);
2152:fltk-1.3.4-1/png/pngwrite.c ****    int linear = !colormap && (format & PNG_FORMAT_FLAG_LINEAR); /* input */
 4386              		.loc 1 2152 0
 4387 0023 4589FC   		movl	%r15d, %r12d
 4388 0026 4183E408 		andl	$8, %r12d
2147:fltk-1.3.4-1/png/pngwrite.c ****    png_inforp info_ptr = image->opaque->info_ptr;
 4389              		.loc 1 2147 0
 4390 002a 48894424 		movq	%rax, 8(%rsp)
 4390      08
 4391              	.LVL431:
 4392              		.loc 1 2152 0
 4393 002f 0F85AB02 		jne	.L567
 4393      0000
 4394              		.loc 1 2152 0 is_stmt 0 discriminator 1
 4395 0035 4489FA   		movl	%r15d, %edx
 4396 0038 31C0     		xorl	%eax, %eax
 4397              	.LVL432:
 4398 003a 83E204   		andl	$4, %edx
 4399 003d 0F95C0   		setne	%al
 4400 0040 89442414 		movl	%eax, 20(%rsp)
 4401              	.LVL433:
2153:fltk-1.3.4-1/png/pngwrite.c ****    int alpha = !colormap && (format & PNG_FORMAT_FLAG_ALPHA);
 4402              		.loc 1 2153 0 is_stmt 1 discriminator 1
 4403 0044 4489F8   		movl	%r15d, %eax
 4404              	.LVL434:
 4405 0047 83E001   		andl	$1, %eax
2154:fltk-1.3.4-1/png/pngwrite.c ****    int write_16bit = linear && !colormap && (display->convert_to_8bit == 0);
 4406              		.loc 1 2154 0 discriminator 1
 4407 004a 85D2     		testl	%edx, %edx
2153:fltk-1.3.4-1/png/pngwrite.c ****    int alpha = !colormap && (format & PNG_FORMAT_FLAG_ALPHA);
 4408              		.loc 1 2153 0 discriminator 1
 4409 004c 8944241C 		movl	%eax, 28(%rsp)
 4410              	.LVL435:
 4411              		.loc 1 2154 0 discriminator 1
 4412 0050 0F842104 		je	.L568
 4412      0000
 4413 0056 8B7F20   		movl	32(%rdi), %edi
 4414              	.LVL436:
 4415 0059 4531F6   		xorl	%r14d, %r14d
 4416 005c 85FF     		testl	%edi, %edi
 4417 005e 410F94C6 		sete	%r14b
 4418              	.LVL437:
 4419              	.L531:
2155:fltk-1.3.4-1/png/pngwrite.c **** 
2156:fltk-1.3.4-1/png/pngwrite.c **** #  ifdef PNG_BENIGN_ERRORS_SUPPORTED
2157:fltk-1.3.4-1/png/pngwrite.c ****       /* Make sure we error out on any bad situation */
2158:fltk-1.3.4-1/png/pngwrite.c ****       png_set_benign_errors(png_ptr, 0/*error*/);
 4420              		.loc 1 2158 0 discriminator 6
 4421 0062 31F6     		xorl	%esi, %esi
 4422 0064 4889DF   		movq	%rbx, %rdi
 4423 0067 E8000000 		call	png_set_benign_errors
 4423      00
 4424              	.LVL438:
2159:fltk-1.3.4-1/png/pngwrite.c **** #  endif
2160:fltk-1.3.4-1/png/pngwrite.c **** 
2161:fltk-1.3.4-1/png/pngwrite.c ****    /* Default the 'row_stride' parameter if required. */
2162:fltk-1.3.4-1/png/pngwrite.c ****    if (display->row_stride == 0)
 4425              		.loc 1 2162 0 discriminator 6
 4426 006c 418B7510 		movl	16(%r13), %esi
 4427 0070 85F6     		testl	%esi, %esi
 4428 0072 7519     		jne	.L532
2163:fltk-1.3.4-1/png/pngwrite.c ****       display->row_stride = PNG_IMAGE_ROW_STRIDE(*image);
 4429              		.loc 1 2163 0
 4430 0074 8B4D14   		movl	20(%rbp), %ecx
 4431 0077 BA010000 		movl	$1, %edx
 4431      00
 4432 007c F6C108   		testb	$8, %cl
 4433 007f 0F84BB02 		je	.L606
 4433      0000
 4434              	.L533:
 4435              		.loc 1 2163 0 is_stmt 0 discriminator 4
 4436 0085 0FAF550C 		imull	12(%rbp), %edx
 4437 0089 41895510 		movl	%edx, 16(%r13)
 4438              	.L532:
2164:fltk-1.3.4-1/png/pngwrite.c **** 
2165:fltk-1.3.4-1/png/pngwrite.c ****    /* Set the required transforms then write the rows in the correct order. */
2166:fltk-1.3.4-1/png/pngwrite.c ****    if ((format & PNG_FORMAT_FLAG_COLORMAP) != 0)
 4439              		.loc 1 2166 0 is_stmt 1
 4440 008d 41F6C708 		testb	$8, %r15b
 4441 0091 0F84A901 		je	.L534
 4441      0000
2167:fltk-1.3.4-1/png/pngwrite.c ****    {
2168:fltk-1.3.4-1/png/pngwrite.c ****       if (display->colormap != NULL && image->colormap_entries > 0)
 4442              		.loc 1 2168 0
 4443 0097 49837D18 		cmpq	$0, 24(%r13)
 4443      00
 4444 009c 0F84C403 		je	.L535
 4444      0000
 4445              		.loc 1 2168 0 is_stmt 0 discriminator 1
 4446 00a2 8B551C   		movl	28(%rbp), %edx
 4447 00a5 85D2     		testl	%edx, %edx
 4448 00a7 0F84B903 		je	.L535
 4448      0000
 4449              	.LVL439:
 4450              	.LBB263:
2169:fltk-1.3.4-1/png/pngwrite.c ****       {
2170:fltk-1.3.4-1/png/pngwrite.c ****          png_uint_32 entries = image->colormap_entries;
2171:fltk-1.3.4-1/png/pngwrite.c **** 
2172:fltk-1.3.4-1/png/pngwrite.c ****          png_set_IHDR(png_ptr, info_ptr, image->width, image->height,
 4451              		.loc 1 2172 0 is_stmt 1
 4452 00ad 83FA10   		cmpl	$16, %edx
 4453 00b0 41B80800 		movl	$8, %r8d
 4453      0000
 4454 00b6 0F865C02 		jbe	.L607
 4454      0000
 4455              	.L536:
 4456              		.loc 1 2172 0 is_stmt 0 discriminator 3
 4457 00bc 4883EC08 		subq	$8, %rsp
 4458              		.cfi_def_cfa_offset 104
 4459 00c0 8B4D10   		movl	16(%rbp), %ecx
 4460 00c3 8B550C   		movl	12(%rbp), %edx
 4461              	.LVL440:
 4462 00c6 6A00     		pushq	$0
 4463              		.cfi_def_cfa_offset 112
 4464              	.LVL441:
 4465 00c8 6A00     		pushq	$0
 4466              		.cfi_def_cfa_offset 120
 4467 00ca 41B90300 		movl	$3, %r9d
 4467      0000
 4468 00d0 6A00     		pushq	$0
 4469              		.cfi_def_cfa_offset 128
 4470 00d2 488B7424 		movq	40(%rsp), %rsi
 4470      28
 4471 00d7 4889DF   		movq	%rbx, %rdi
 4472 00da E8000000 		call	png_set_IHDR
 4472      00
 4473              	.LVL442:
2173:fltk-1.3.4-1/png/pngwrite.c ****             entries > 16 ? 8 : (entries > 4 ? 4 : (entries > 2 ? 2 : 1)),
2174:fltk-1.3.4-1/png/pngwrite.c ****             PNG_COLOR_TYPE_PALETTE, PNG_INTERLACE_NONE,
2175:fltk-1.3.4-1/png/pngwrite.c ****             PNG_COMPRESSION_TYPE_BASE, PNG_FILTER_TYPE_BASE);
2176:fltk-1.3.4-1/png/pngwrite.c **** 
2177:fltk-1.3.4-1/png/pngwrite.c ****          png_image_set_PLTE(display);
 4474              		.loc 1 2177 0 is_stmt 1 discriminator 3
 4475 00df 498B7518 		movq	24(%r13), %rsi
 4476 00e3 498B7D00 		movq	0(%r13), %rdi
 4477 00e7 4883C420 		addq	$32, %rsp
 4478              		.cfi_def_cfa_offset 96
 4479 00eb E8000000 		call	png_image_set_PLTE.isra.5
 4479      00
 4480              	.LVL443:
 4481              	.LBE263:
2178:fltk-1.3.4-1/png/pngwrite.c ****       }
2179:fltk-1.3.4-1/png/pngwrite.c **** 
2180:fltk-1.3.4-1/png/pngwrite.c ****       else
2181:fltk-1.3.4-1/png/pngwrite.c ****          png_error(image->opaque->png_ptr,
2182:fltk-1.3.4-1/png/pngwrite.c ****             "no color-map for color-mapped image");
2183:fltk-1.3.4-1/png/pngwrite.c ****    }
2184:fltk-1.3.4-1/png/pngwrite.c **** 
2185:fltk-1.3.4-1/png/pngwrite.c ****    else
2186:fltk-1.3.4-1/png/pngwrite.c ****       png_set_IHDR(png_ptr, info_ptr, image->width, image->height,
2187:fltk-1.3.4-1/png/pngwrite.c ****          write_16bit ? 16 : 8,
2188:fltk-1.3.4-1/png/pngwrite.c ****          ((format & PNG_FORMAT_FLAG_COLOR) ? PNG_COLOR_MASK_COLOR : 0) +
2189:fltk-1.3.4-1/png/pngwrite.c ****          ((format & PNG_FORMAT_FLAG_ALPHA) ? PNG_COLOR_MASK_ALPHA : 0),
2190:fltk-1.3.4-1/png/pngwrite.c ****          PNG_INTERLACE_NONE, PNG_COMPRESSION_TYPE_BASE, PNG_FILTER_TYPE_BASE);
2191:fltk-1.3.4-1/png/pngwrite.c **** 
2192:fltk-1.3.4-1/png/pngwrite.c ****    /* Counter-intuitively the data transformations must be called *after*
2193:fltk-1.3.4-1/png/pngwrite.c ****     * png_write_info, not before as in the read code, but the 'set' functions
2194:fltk-1.3.4-1/png/pngwrite.c ****     * must still be called before.  Just set the color space information, never
2195:fltk-1.3.4-1/png/pngwrite.c ****     * write an interlaced image.
2196:fltk-1.3.4-1/png/pngwrite.c ****     */
2197:fltk-1.3.4-1/png/pngwrite.c **** 
2198:fltk-1.3.4-1/png/pngwrite.c ****    if (write_16bit != 0)
 4482              		.loc 1 2198 0 discriminator 3
 4483 00f0 4585F6   		testl	%r14d, %r14d
 4484 00f3 0F859401 		jne	.L608
 4484      0000
 4485              	.L540:
2199:fltk-1.3.4-1/png/pngwrite.c ****    {
2200:fltk-1.3.4-1/png/pngwrite.c ****       /* The gamma here is 1.0 (linear) and the cHRM chunk matches sRGB. */
2201:fltk-1.3.4-1/png/pngwrite.c ****       png_set_gAMA_fixed(png_ptr, info_ptr, PNG_GAMMA_LINEAR);
2202:fltk-1.3.4-1/png/pngwrite.c **** 
2203:fltk-1.3.4-1/png/pngwrite.c ****       if ((image->flags & PNG_IMAGE_FLAG_COLORSPACE_NOT_sRGB) == 0)
2204:fltk-1.3.4-1/png/pngwrite.c ****          png_set_cHRM_fixed(png_ptr, info_ptr,
2205:fltk-1.3.4-1/png/pngwrite.c ****             /* color      x       y */
2206:fltk-1.3.4-1/png/pngwrite.c ****             /* white */ 31270, 32900,
2207:fltk-1.3.4-1/png/pngwrite.c ****             /* red   */ 64000, 33000,
2208:fltk-1.3.4-1/png/pngwrite.c ****             /* green */ 30000, 60000,
2209:fltk-1.3.4-1/png/pngwrite.c ****             /* blue  */ 15000,  6000
2210:fltk-1.3.4-1/png/pngwrite.c ****          );
2211:fltk-1.3.4-1/png/pngwrite.c ****    }
2212:fltk-1.3.4-1/png/pngwrite.c **** 
2213:fltk-1.3.4-1/png/pngwrite.c ****    else if ((image->flags & PNG_IMAGE_FLAG_COLORSPACE_NOT_sRGB) == 0)
 4486              		.loc 1 2213 0
 4487 00f9 F6451801 		testb	$1, 24(%rbp)
 4488 00fd 0F84FD01 		je	.L609
 4488      0000
2214:fltk-1.3.4-1/png/pngwrite.c ****       png_set_sRGB(png_ptr, info_ptr, PNG_sRGB_INTENT_PERCEPTUAL);
2215:fltk-1.3.4-1/png/pngwrite.c **** 
2216:fltk-1.3.4-1/png/pngwrite.c ****    /* Else writing an 8-bit file and the *colors* aren't sRGB, but the 8-bit
2217:fltk-1.3.4-1/png/pngwrite.c ****     * space must still be gamma encoded.
2218:fltk-1.3.4-1/png/pngwrite.c ****     */
2219:fltk-1.3.4-1/png/pngwrite.c ****    else
2220:fltk-1.3.4-1/png/pngwrite.c ****       png_set_gAMA_fixed(png_ptr, info_ptr, PNG_GAMMA_sRGB_INVERSE);
 4489              		.loc 1 2220 0
 4490 0103 488B7424 		movq	8(%rsp), %rsi
 4490      08
 4491 0108 BA8FB100 		movl	$45455, %edx
 4491      00
 4492 010d 4889DF   		movq	%rbx, %rdi
 4493 0110 E8000000 		call	png_set_gAMA_fixed
 4493      00
 4494              	.LVL444:
 4495              	.L543:
 4496              	.LBB264:
 4497              	.LBB265:
 199:fltk-1.3.4-1/png/pngwrite.c ****       return;
 4498              		.loc 1 199 0
 4499 0115 4885DB   		testq	%rbx, %rbx
 4500 0118 0F944424 		sete	27(%rsp)
 4500      1B
 4501 011d 48837C24 		cmpq	$0, 8(%rsp)
 4501      0800
 4502 0123 0FB64424 		movzbl	27(%rsp), %eax
 4502      1B
 4503 0128 0F94C2   		sete	%dl
 4504 012b 08C2     		orb	%al, %dl
 4505 012d 0F844C03 		je	.L610
 4505      0000
 4506              	.LVL445:
 4507              	.L565:
 4508              	.LBE265:
 4509              	.LBE264:
2221:fltk-1.3.4-1/png/pngwrite.c **** 
2222:fltk-1.3.4-1/png/pngwrite.c ****    /* Write the file header. */
2223:fltk-1.3.4-1/png/pngwrite.c ****    png_write_info(png_ptr, info_ptr);
2224:fltk-1.3.4-1/png/pngwrite.c **** 
2225:fltk-1.3.4-1/png/pngwrite.c ****    /* Now set up the data transformations (*after* the header is written),
2226:fltk-1.3.4-1/png/pngwrite.c ****     * remove the handled transformations from the 'format' flags for checking.
2227:fltk-1.3.4-1/png/pngwrite.c ****     *
2228:fltk-1.3.4-1/png/pngwrite.c ****     * First check for a little endian system if writing 16 bit files.
2229:fltk-1.3.4-1/png/pngwrite.c ****     */
2230:fltk-1.3.4-1/png/pngwrite.c ****    if (write_16bit != 0)
2231:fltk-1.3.4-1/png/pngwrite.c ****    {
2232:fltk-1.3.4-1/png/pngwrite.c ****       PNG_CONST png_uint_16 le = 0x0001;
2233:fltk-1.3.4-1/png/pngwrite.c **** 
2234:fltk-1.3.4-1/png/pngwrite.c ****       if ((*(png_const_bytep) & le) != 0)
2235:fltk-1.3.4-1/png/pngwrite.c ****          png_set_swap(png_ptr);
2236:fltk-1.3.4-1/png/pngwrite.c ****    }
2237:fltk-1.3.4-1/png/pngwrite.c **** 
2238:fltk-1.3.4-1/png/pngwrite.c **** #  ifdef PNG_SIMPLIFIED_WRITE_BGR_SUPPORTED
2239:fltk-1.3.4-1/png/pngwrite.c ****       if ((format & PNG_FORMAT_FLAG_BGR) != 0)
 4510              		.loc 1 2239 0
 4511 0133 41F6C710 		testb	$16, %r15b
 4512 0137 7413     		je	.L544
2240:fltk-1.3.4-1/png/pngwrite.c ****       {
2241:fltk-1.3.4-1/png/pngwrite.c ****          if (colormap == 0 && (format & PNG_FORMAT_FLAG_COLOR) != 0)
 4513              		.loc 1 2241 0
 4514 0139 4585E4   		testl	%r12d, %r12d
 4515 013c 750A     		jne	.L545
 4516              		.loc 1 2241 0 is_stmt 0 discriminator 1
 4517 013e 41F6C702 		testb	$2, %r15b
 4518 0142 0F859802 		jne	.L611
 4518      0000
 4519              	.L545:
2242:fltk-1.3.4-1/png/pngwrite.c ****             png_set_bgr(png_ptr);
2243:fltk-1.3.4-1/png/pngwrite.c ****          format &= ~PNG_FORMAT_FLAG_BGR;
 4520              		.loc 1 2243 0 is_stmt 1
 4521 0148 4183E7EF 		andl	$-17, %r15d
 4522              	.LVL446:
 4523              	.L544:
2244:fltk-1.3.4-1/png/pngwrite.c ****       }
2245:fltk-1.3.4-1/png/pngwrite.c **** #  endif
2246:fltk-1.3.4-1/png/pngwrite.c **** 
2247:fltk-1.3.4-1/png/pngwrite.c **** #  ifdef PNG_SIMPLIFIED_WRITE_AFIRST_SUPPORTED
2248:fltk-1.3.4-1/png/pngwrite.c ****       if ((format & PNG_FORMAT_FLAG_AFIRST) != 0)
 4524              		.loc 1 2248 0
 4525 014c 41F6C720 		testb	$32, %r15b
 4526 0150 7413     		je	.L546
2249:fltk-1.3.4-1/png/pngwrite.c ****       {
2250:fltk-1.3.4-1/png/pngwrite.c ****          if (colormap == 0 && (format & PNG_FORMAT_FLAG_ALPHA) != 0)
 4527              		.loc 1 2250 0
 4528 0152 4585E4   		testl	%r12d, %r12d
 4529 0155 750A     		jne	.L547
 4530              		.loc 1 2250 0 is_stmt 0 discriminator 1
 4531 0157 41F6C701 		testb	$1, %r15b
 4532 015b 0F858F02 		jne	.L612
 4532      0000
 4533              	.L547:
2251:fltk-1.3.4-1/png/pngwrite.c ****             png_set_swap_alpha(png_ptr);
2252:fltk-1.3.4-1/png/pngwrite.c ****          format &= ~PNG_FORMAT_FLAG_AFIRST;
 4534              		.loc 1 2252 0 is_stmt 1
 4535 0161 4183E7DF 		andl	$-33, %r15d
 4536              	.LVL447:
 4537              	.L546:
2253:fltk-1.3.4-1/png/pngwrite.c ****       }
2254:fltk-1.3.4-1/png/pngwrite.c **** #  endif
2255:fltk-1.3.4-1/png/pngwrite.c **** 
2256:fltk-1.3.4-1/png/pngwrite.c ****    /* If there are 16 or fewer color-map entries we wrote a lower bit depth
2257:fltk-1.3.4-1/png/pngwrite.c ****     * above, but the application data is still byte packed.
2258:fltk-1.3.4-1/png/pngwrite.c ****     */
2259:fltk-1.3.4-1/png/pngwrite.c ****    if (colormap != 0 && image->colormap_entries <= 16)
 4538              		.loc 1 2259 0
 4539 0165 4585E4   		testl	%r12d, %r12d
 4540 0168 740A     		je	.L548
 4541              		.loc 1 2259 0 is_stmt 0 discriminator 1
 4542 016a 837D1C10 		cmpl	$16, 28(%rbp)
 4543 016e 0F868C02 		jbe	.L613
 4543      0000
 4544              	.L548:
2260:fltk-1.3.4-1/png/pngwrite.c ****       png_set_packing(png_ptr);
2261:fltk-1.3.4-1/png/pngwrite.c **** 
2262:fltk-1.3.4-1/png/pngwrite.c ****    /* That should have handled all (both) the transforms. */
2263:fltk-1.3.4-1/png/pngwrite.c ****    if ((format & ~(png_uint_32)(PNG_FORMAT_FLAG_COLOR | PNG_FORMAT_FLAG_LINEAR |
 4545              		.loc 1 2263 0 is_stmt 1
 4546 0174 4183E7F0 		andl	$-16, %r15d
 4547              	.LVL448:
 4548 0178 0F85D202 		jne	.L614
 4548      0000
 4549              	.LBB269:
2264:fltk-1.3.4-1/png/pngwrite.c ****          PNG_FORMAT_FLAG_ALPHA | PNG_FORMAT_FLAG_COLORMAP)) != 0)
2265:fltk-1.3.4-1/png/pngwrite.c ****       png_error(png_ptr, "png_write_image: unsupported transformation");
2266:fltk-1.3.4-1/png/pngwrite.c **** 
2267:fltk-1.3.4-1/png/pngwrite.c ****    {
2268:fltk-1.3.4-1/png/pngwrite.c ****       png_const_bytep row = png_voidcast(png_const_bytep, display->buffer);
2269:fltk-1.3.4-1/png/pngwrite.c ****       ptrdiff_t row_bytes = display->row_stride;
2270:fltk-1.3.4-1/png/pngwrite.c **** 
2271:fltk-1.3.4-1/png/pngwrite.c ****       if (linear != 0)
 4550              		.loc 1 2271 0
 4551 017e 8B4C2414 		movl	20(%rsp), %ecx
2268:fltk-1.3.4-1/png/pngwrite.c ****       ptrdiff_t row_bytes = display->row_stride;
 4552              		.loc 1 2268 0
 4553 0182 498B5508 		movq	8(%r13), %rdx
 4554              	.LVL449:
2269:fltk-1.3.4-1/png/pngwrite.c **** 
 4555              		.loc 1 2269 0
 4556 0186 49634510 		movslq	16(%r13), %rax
 4557              	.LVL450:
 4558              		.loc 1 2271 0
 4559 018a 85C9     		testl	%ecx, %ecx
 4560 018c 7403     		je	.L551
2272:fltk-1.3.4-1/png/pngwrite.c ****          row_bytes *= (sizeof (png_uint_16));
 4561              		.loc 1 2272 0
 4562 018e 4801C0   		addq	%rax, %rax
 4563              	.LVL451:
 4564              	.L551:
2273:fltk-1.3.4-1/png/pngwrite.c **** 
2274:fltk-1.3.4-1/png/pngwrite.c ****       if (row_bytes < 0)
 4565              		.loc 1 2274 0
 4566 0191 4885C0   		testq	%rax, %rax
 4567 0194 0F881602 		js	.L615
 4567      0000
 4568              	.L552:
2275:fltk-1.3.4-1/png/pngwrite.c ****          row += (image->height-1) * (-row_bytes);
2276:fltk-1.3.4-1/png/pngwrite.c **** 
2277:fltk-1.3.4-1/png/pngwrite.c ****       display->first_row = row;
 4569              		.loc 1 2277 0
 4570 019a 49895528 		movq	%rdx, 40(%r13)
2278:fltk-1.3.4-1/png/pngwrite.c ****       display->row_bytes = row_bytes;
 4571              		.loc 1 2278 0
 4572 019e 49894530 		movq	%rax, 48(%r13)
 4573              	.LBE269:
2279:fltk-1.3.4-1/png/pngwrite.c ****    }
2280:fltk-1.3.4-1/png/pngwrite.c **** 
2281:fltk-1.3.4-1/png/pngwrite.c ****    /* Apply 'fast' options if the flag is set. */
2282:fltk-1.3.4-1/png/pngwrite.c ****    if ((image->flags & PNG_IMAGE_FLAG_FAST) != 0)
 4574              		.loc 1 2282 0
 4575 01a2 F6451802 		testb	$2, 24(%rbp)
 4576 01a6 0F85DC01 		jne	.L616
 4576      0000
 4577              	.LVL452:
 4578              	.L554:
2283:fltk-1.3.4-1/png/pngwrite.c ****    {
2284:fltk-1.3.4-1/png/pngwrite.c ****       png_set_filter(png_ptr, PNG_FILTER_TYPE_BASE, PNG_NO_FILTERS);
2285:fltk-1.3.4-1/png/pngwrite.c ****       /* NOTE: determined by experiment using pngstest, this reflects some
2286:fltk-1.3.4-1/png/pngwrite.c ****        * balance between the time to write the image once and the time to read
2287:fltk-1.3.4-1/png/pngwrite.c ****        * it about 50 times.  The speed-up in pngstest was about 10-20% of the
2288:fltk-1.3.4-1/png/pngwrite.c ****        * total (user) time on a heavily loaded system.
2289:fltk-1.3.4-1/png/pngwrite.c ****        */
2290:fltk-1.3.4-1/png/pngwrite.c ****       png_set_compression_level(png_ptr, 3);
2291:fltk-1.3.4-1/png/pngwrite.c ****    }
2292:fltk-1.3.4-1/png/pngwrite.c **** 
2293:fltk-1.3.4-1/png/pngwrite.c ****    /* Check for the cases that currently require a pre-transform on the row
2294:fltk-1.3.4-1/png/pngwrite.c ****     * before it is written.  This only applies when the input is 16-bit and
2295:fltk-1.3.4-1/png/pngwrite.c ****     * either there is an alpha channel or it is converted to 8-bit.
2296:fltk-1.3.4-1/png/pngwrite.c ****     */
2297:fltk-1.3.4-1/png/pngwrite.c ****    if ((linear != 0 && alpha != 0 ) ||
 4579              		.loc 1 2297 0
 4580 01ac 8B4C241C 		movl	28(%rsp), %ecx
 4581 01b0 854C2414 		testl	%ecx, 20(%rsp)
 4582 01b4 7515     		jne	.L556
 4583              		.loc 1 2297 0 is_stmt 0 discriminator 1
 4584 01b6 4585E4   		testl	%r12d, %r12d
 4585 01b9 0F859101 		jne	.L557
 4585      0000
2298:fltk-1.3.4-1/png/pngwrite.c ****        (colormap == 0 && display->convert_to_8bit != 0))
 4586              		.loc 1 2298 0 is_stmt 1
 4587 01bf 418B4520 		movl	32(%r13), %eax
 4588 01c3 85C0     		testl	%eax, %eax
 4589 01c5 0F848501 		je	.L557
 4589      0000
 4590              	.L556:
 4591              	.LBB270:
2299:fltk-1.3.4-1/png/pngwrite.c ****    {
2300:fltk-1.3.4-1/png/pngwrite.c ****       png_bytep row = png_voidcast(png_bytep, png_malloc(png_ptr,
 4592              		.loc 1 2300 0
 4593 01cb 488B7424 		movq	8(%rsp), %rsi
 4593      08
 4594 01d0 4889DF   		movq	%rbx, %rdi
 4595 01d3 E8000000 		call	png_get_rowbytes
 4595      00
 4596              	.LVL453:
 4597 01d8 4889DF   		movq	%rbx, %rdi
 4598 01db 4889C6   		movq	%rax, %rsi
 4599 01de E8000000 		call	png_malloc
 4599      00
 4600              	.LVL454:
2301:fltk-1.3.4-1/png/pngwrite.c ****          png_get_rowbytes(png_ptr, info_ptr)));
2302:fltk-1.3.4-1/png/pngwrite.c ****       int result;
2303:fltk-1.3.4-1/png/pngwrite.c **** 
2304:fltk-1.3.4-1/png/pngwrite.c ****       display->local_row = row;
2305:fltk-1.3.4-1/png/pngwrite.c ****       if (write_16bit != 0)
 4601              		.loc 1 2305 0
 4602 01e3 4585F6   		testl	%r14d, %r14d
2300:fltk-1.3.4-1/png/pngwrite.c ****          png_get_rowbytes(png_ptr, info_ptr)));
 4603              		.loc 1 2300 0
 4604 01e6 4989C4   		movq	%rax, %r12
 4605              	.LVL455:
2304:fltk-1.3.4-1/png/pngwrite.c ****       if (write_16bit != 0)
 4606              		.loc 1 2304 0
 4607 01e9 49894538 		movq	%rax, 56(%r13)
2306:fltk-1.3.4-1/png/pngwrite.c ****          result = png_safe_execute(image, png_write_image_16bit, display);
 4608              		.loc 1 2306 0
 4609 01ed 4C89EA   		movq	%r13, %rdx
2305:fltk-1.3.4-1/png/pngwrite.c ****          result = png_safe_execute(image, png_write_image_16bit, display);
 4610              		.loc 1 2305 0
 4611 01f0 0F84D201 		je	.L558
 4611      0000
 4612              	.LVL456:
 4613              		.loc 1 2306 0
 4614 01f6 4889EF   		movq	%rbp, %rdi
 4615 01f9 BE000000 		movl	$png_write_image_16bit, %esi
 4615      00
 4616 01fe E8000000 		call	png_safe_execute
 4616      00
 4617              	.LVL457:
 4618 0203 89C5     		movl	%eax, %ebp
 4619              	.LVL458:
 4620              	.L559:
2307:fltk-1.3.4-1/png/pngwrite.c ****       else
2308:fltk-1.3.4-1/png/pngwrite.c ****          result = png_safe_execute(image, png_write_image_8bit, display);
2309:fltk-1.3.4-1/png/pngwrite.c ****       display->local_row = NULL;
 4621              		.loc 1 2309 0
 4622 0205 49C74538 		movq	$0, 56(%r13)
 4622      00000000 
2310:fltk-1.3.4-1/png/pngwrite.c **** 
2311:fltk-1.3.4-1/png/pngwrite.c ****       png_free(png_ptr, row);
 4623              		.loc 1 2311 0
 4624 020d 4C89E6   		movq	%r12, %rsi
 4625 0210 4889DF   		movq	%rbx, %rdi
 4626 0213 E8000000 		call	png_free
 4626      00
 4627              	.LVL459:
2312:fltk-1.3.4-1/png/pngwrite.c **** 
2313:fltk-1.3.4-1/png/pngwrite.c ****       /* Skip the 'write_end' on error: */
2314:fltk-1.3.4-1/png/pngwrite.c ****       if (result == 0)
2315:fltk-1.3.4-1/png/pngwrite.c ****          return 0;
 4628              		.loc 1 2315 0
 4629 0218 31C0     		xorl	%eax, %eax
2314:fltk-1.3.4-1/png/pngwrite.c ****          return 0;
 4630              		.loc 1 2314 0
 4631 021a 85ED     		testl	%ebp, %ebp
 4632 021c 7412     		je	.L591
 4633              	.LVL460:
 4634              	.L561:
 4635              	.LBE270:
2316:fltk-1.3.4-1/png/pngwrite.c ****    }
2317:fltk-1.3.4-1/png/pngwrite.c **** 
2318:fltk-1.3.4-1/png/pngwrite.c ****    /* Otherwise this is the case where the input is in a format currently
2319:fltk-1.3.4-1/png/pngwrite.c ****     * supported by the rest of the libpng write code; call it directly.
2320:fltk-1.3.4-1/png/pngwrite.c ****     */
2321:fltk-1.3.4-1/png/pngwrite.c ****    else
2322:fltk-1.3.4-1/png/pngwrite.c ****    {
2323:fltk-1.3.4-1/png/pngwrite.c ****       png_const_bytep row = png_voidcast(png_const_bytep, display->first_row);
2324:fltk-1.3.4-1/png/pngwrite.c ****       ptrdiff_t row_bytes = display->row_bytes;
2325:fltk-1.3.4-1/png/pngwrite.c ****       png_uint_32 y = image->height;
2326:fltk-1.3.4-1/png/pngwrite.c **** 
2327:fltk-1.3.4-1/png/pngwrite.c ****       while (y-- > 0)
2328:fltk-1.3.4-1/png/pngwrite.c ****       {
2329:fltk-1.3.4-1/png/pngwrite.c ****          png_write_row(png_ptr, row);
2330:fltk-1.3.4-1/png/pngwrite.c ****          row += row_bytes;
2331:fltk-1.3.4-1/png/pngwrite.c ****       }
2332:fltk-1.3.4-1/png/pngwrite.c ****    }
2333:fltk-1.3.4-1/png/pngwrite.c **** 
2334:fltk-1.3.4-1/png/pngwrite.c ****    png_write_end(png_ptr, info_ptr);
 4636              		.loc 1 2334 0
 4637 021e 488B7424 		movq	8(%rsp), %rsi
 4637      08
 4638 0223 4889DF   		movq	%rbx, %rdi
 4639 0226 E8000000 		call	png_write_end
 4639      00
 4640              	.LVL461:
2335:fltk-1.3.4-1/png/pngwrite.c ****    return 1;
 4641              		.loc 1 2335 0
 4642 022b B8010000 		movl	$1, %eax
 4642      00
 4643              	.L591:
2336:fltk-1.3.4-1/png/pngwrite.c **** }
 4644              		.loc 1 2336 0
 4645 0230 4883C428 		addq	$40, %rsp
 4646              		.cfi_remember_state
 4647              		.cfi_def_cfa_offset 56
 4648 0234 5B       		popq	%rbx
 4649              		.cfi_def_cfa_offset 48
 4650              	.LVL462:
 4651 0235 5D       		popq	%rbp
 4652              		.cfi_def_cfa_offset 40
 4653 0236 415C     		popq	%r12
 4654              		.cfi_def_cfa_offset 32
 4655 0238 415D     		popq	%r13
 4656              		.cfi_def_cfa_offset 24
 4657 023a 415E     		popq	%r14
 4658              		.cfi_def_cfa_offset 16
 4659 023c 415F     		popq	%r15
 4660              		.cfi_def_cfa_offset 8
 4661 023e C3       		ret
 4662              	.LVL463:
 4663 023f 90       		.p2align 4,,10
 4664              		.p2align 3
 4665              	.L534:
 4666              		.cfi_restore_state
2189:fltk-1.3.4-1/png/pngwrite.c ****          PNG_INTERLACE_NONE, PNG_COMPRESSION_TYPE_BASE, PNG_FILTER_TYPE_BASE);
 4667              		.loc 1 2189 0
 4668 0240 4489FE   		movl	%r15d, %esi
2188:fltk-1.3.4-1/png/pngwrite.c ****          ((format & PNG_FORMAT_FLAG_ALPHA) ? PNG_COLOR_MASK_ALPHA : 0),
 4669              		.loc 1 2188 0
 4670 0243 4589F8   		movl	%r15d, %r8d
2186:fltk-1.3.4-1/png/pngwrite.c ****          write_16bit ? 16 : 8,
 4671              		.loc 1 2186 0
 4672 0246 8B4D10   		movl	16(%rbp), %ecx
2189:fltk-1.3.4-1/png/pngwrite.c ****          PNG_INTERLACE_NONE, PNG_COMPRESSION_TYPE_BASE, PNG_FILTER_TYPE_BASE);
 4673              		.loc 1 2189 0
 4674 0249 83E601   		andl	$1, %esi
2188:fltk-1.3.4-1/png/pngwrite.c ****          ((format & PNG_FORMAT_FLAG_ALPHA) ? PNG_COLOR_MASK_ALPHA : 0),
 4675              		.loc 1 2188 0
 4676 024c 4183E002 		andl	$2, %r8d
2186:fltk-1.3.4-1/png/pngwrite.c ****          write_16bit ? 16 : 8,
 4677              		.loc 1 2186 0
 4678 0250 8B550C   		movl	12(%rbp), %edx
2189:fltk-1.3.4-1/png/pngwrite.c ****          PNG_INTERLACE_NONE, PNG_COMPRESSION_TYPE_BASE, PNG_FILTER_TYPE_BASE);
 4679              		.loc 1 2189 0
 4680 0253 F7DE     		negl	%esi
 4681 0255 83E604   		andl	$4, %esi
2186:fltk-1.3.4-1/png/pngwrite.c ****          write_16bit ? 16 : 8,
 4682              		.loc 1 2186 0
 4683 0258 4183FE01 		cmpl	$1, %r14d
 4684 025c 19FF     		sbbl	%edi, %edi
 4685 025e 4883EC08 		subq	$8, %rsp
 4686              		.cfi_def_cfa_offset 104
 4687 0262 468D0C06 		leal	(%rsi,%r8), %r9d
 4688 0266 6A00     		pushq	$0
 4689              		.cfi_def_cfa_offset 112
 4690 0268 83E7F8   		andl	$-8, %edi
 4691 026b 6A00     		pushq	$0
 4692              		.cfi_def_cfa_offset 120
 4693 026d 6A00     		pushq	$0
 4694              		.cfi_def_cfa_offset 128
 4695 026f 488B7424 		movq	40(%rsp), %rsi
 4695      28
 4696 0274 448D4710 		leal	16(%rdi), %r8d
 4697 0278 4889DF   		movq	%rbx, %rdi
 4698 027b E8000000 		call	png_set_IHDR
 4698      00
 4699              	.LVL464:
 4700 0280 4883C420 		addq	$32, %rsp
 4701              		.cfi_def_cfa_offset 96
2198:fltk-1.3.4-1/png/pngwrite.c ****    {
 4702              		.loc 1 2198 0
 4703 0284 4585F6   		testl	%r14d, %r14d
 4704 0287 0F846CFE 		je	.L540
 4704      FFFF
 4705              	.L608:
2201:fltk-1.3.4-1/png/pngwrite.c **** 
 4706              		.loc 1 2201 0
 4707 028d 488B7424 		movq	8(%rsp), %rsi
 4707      08
 4708 0292 BAA08601 		movl	$100000, %edx
 4708      00
 4709 0297 4889DF   		movq	%rbx, %rdi
 4710 029a E8000000 		call	png_set_gAMA_fixed
 4710      00
 4711              	.LVL465:
2203:fltk-1.3.4-1/png/pngwrite.c ****          png_set_cHRM_fixed(png_ptr, info_ptr,
 4712              		.loc 1 2203 0
 4713 029f F6451801 		testb	$1, 24(%rbp)
 4714 02a3 0F846701 		je	.L617
 4714      0000
 4715              	.L541:
 4716              	.LVL466:
 4717              	.LBB271:
 4718              	.LBB266:
 199:fltk-1.3.4-1/png/pngwrite.c ****       return;
 4719              		.loc 1 199 0
 4720 02a9 4885DB   		testq	%rbx, %rbx
 4721 02ac 0F94C2   		sete	%dl
 4722 02af 48837C24 		cmpq	$0, 8(%rsp)
 4722      0800
 4723 02b5 0F94C1   		sete	%cl
 4724 02b8 08D1     		orb	%dl, %cl
 4725 02ba 884C241B 		movb	%cl, 27(%rsp)
 4726 02be 0F859901 		jne	.L618
 4726      0000
 4727 02c4 488B7424 		movq	8(%rsp), %rsi
 4727      08
 4728 02c9 4889DF   		movq	%rbx, %rdi
 4729 02cc E8000000 		call	png_write_info.part.7
 4729      00
 4730              	.LVL467:
 4731              	.L563:
 4732              	.LBE266:
 4733              	.LBE271:
 4734              	.LBB272:
2235:fltk-1.3.4-1/png/pngwrite.c ****    }
 4735              		.loc 1 2235 0
 4736 02d1 4889DF   		movq	%rbx, %rdi
 4737 02d4 E8000000 		call	png_set_swap
 4737      00
 4738              	.LVL468:
 4739 02d9 E955FEFF 		jmp	.L565
 4739      FF
 4740              	.LVL469:
 4741 02de 6690     		.p2align 4,,10
 4742              		.p2align 3
 4743              	.L567:
 4744              	.LBE272:
 4745 02e0 C7442414 		movl	$0, 20(%rsp)
 4745      00000000 
2153:fltk-1.3.4-1/png/pngwrite.c ****    int write_16bit = linear && !colormap && (display->convert_to_8bit == 0);
 4746              		.loc 1 2153 0
 4747 02e8 C744241C 		movl	$0, 28(%rsp)
 4747      00000000 
2154:fltk-1.3.4-1/png/pngwrite.c **** 
 4748              		.loc 1 2154 0
 4749 02f0 4531F6   		xorl	%r14d, %r14d
 4750 02f3 E96AFDFF 		jmp	.L531
 4750      FF
 4751              	.LVL470:
 4752 02f8 0F1F8400 		.p2align 4,,10
 4752      00000000 
 4753              		.p2align 3
 4754              	.L609:
2214:fltk-1.3.4-1/png/pngwrite.c **** 
 4755              		.loc 1 2214 0
 4756 0300 488B7424 		movq	8(%rsp), %rsi
 4756      08
 4757 0305 31D2     		xorl	%edx, %edx
 4758 0307 4889DF   		movq	%rbx, %rdi
 4759 030a E8000000 		call	png_set_sRGB
 4759      00
 4760              	.LVL471:
 4761 030f E901FEFF 		jmp	.L543
 4761      FF
 4762              	.LVL472:
 4763              		.p2align 4,,10
 4764 0314 0F1F4000 		.p2align 3
 4765              	.L607:
 4766              	.LBB273:
2173:fltk-1.3.4-1/png/pngwrite.c ****             PNG_COLOR_TYPE_PALETTE, PNG_INTERLACE_NONE,
 4767              		.loc 1 2173 0
 4768 0318 83FA04   		cmpl	$4, %edx
 4769 031b 41B80400 		movl	$4, %r8d
 4769      0000
 4770 0321 0F8795FD 		ja	.L536
 4770      FFFF
2173:fltk-1.3.4-1/png/pngwrite.c ****             PNG_COLOR_TYPE_PALETTE, PNG_INTERLACE_NONE,
 4771              		.loc 1 2173 0 is_stmt 0 discriminator 1
 4772 0327 83FA03   		cmpl	$3, %edx
 4773 032a 4519C0   		sbbl	%r8d, %r8d
 4774 032d 4183C002 		addl	$2, %r8d
 4775 0331 E986FDFF 		jmp	.L536
 4775      FF
 4776              	.LVL473:
 4777 0336 662E0F1F 		.p2align 4,,10
 4777      84000000 
 4777      0000
 4778              		.p2align 3
 4779              	.L606:
 4780              	.LBE273:
2163:fltk-1.3.4-1/png/pngwrite.c **** 
 4781              		.loc 1 2163 0 is_stmt 1 discriminator 1
 4782 0340 83E103   		andl	$3, %ecx
 4783 0343 8D5101   		leal	1(%rcx), %edx
 4784 0346 E93AFDFF 		jmp	.L533
 4784      FF
 4785              	.LVL474:
 4786 034b 0F1F4400 		.p2align 4,,10
 4786      00
 4787              		.p2align 3
 4788              	.L557:
 4789              	.LBB274:
2325:fltk-1.3.4-1/png/pngwrite.c **** 
 4790              		.loc 1 2325 0
 4791 0350 448B6510 		movl	16(%rbp), %r12d
 4792              	.LVL475:
2323:fltk-1.3.4-1/png/pngwrite.c ****       ptrdiff_t row_bytes = display->row_bytes;
 4793              		.loc 1 2323 0
 4794 0354 4D8B7528 		movq	40(%r13), %r14
 4795              	.LVL476:
2324:fltk-1.3.4-1/png/pngwrite.c ****       png_uint_32 y = image->height;
 4796              		.loc 1 2324 0
 4797 0358 4D8B6D30 		movq	48(%r13), %r13
 4798              	.LVL477:
2327:fltk-1.3.4-1/png/pngwrite.c ****       {
 4799              		.loc 1 2327 0
 4800 035c 4585E4   		testl	%r12d, %r12d
 4801 035f 0F84B9FE 		je	.L561
 4801      FFFF
 4802              	.LVL478:
 4803              		.p2align 4,,10
 4804 0365 0F1F00   		.p2align 3
 4805              	.L562:
2329:fltk-1.3.4-1/png/pngwrite.c ****          row += row_bytes;
 4806              		.loc 1 2329 0
 4807 0368 4C89F6   		movq	%r14, %rsi
 4808 036b 4889DF   		movq	%rbx, %rdi
2330:fltk-1.3.4-1/png/pngwrite.c ****       }
 4809              		.loc 1 2330 0
 4810 036e 4D01EE   		addq	%r13, %r14
 4811              	.LVL479:
2329:fltk-1.3.4-1/png/pngwrite.c ****          row += row_bytes;
 4812              		.loc 1 2329 0
 4813 0371 E8000000 		call	png_write_row
 4813      00
 4814              	.LVL480:
2327:fltk-1.3.4-1/png/pngwrite.c ****       {
 4815              		.loc 1 2327 0
 4816 0376 4183EC01 		subl	$1, %r12d
 4817              	.LVL481:
 4818 037a 75EC     		jne	.L562
 4819 037c E99DFEFF 		jmp	.L561
 4819      FF
 4820              	.LVL482:
 4821              		.p2align 4,,10
 4822 0381 0F1F8000 		.p2align 3
 4822      000000
 4823              	.L616:
 4824              	.LBE274:
2284:fltk-1.3.4-1/png/pngwrite.c ****       /* NOTE: determined by experiment using pngstest, this reflects some
 4825              		.loc 1 2284 0
 4826 0388 31D2     		xorl	%edx, %edx
 4827              	.LVL483:
 4828 038a 31F6     		xorl	%esi, %esi
 4829 038c 4889DF   		movq	%rbx, %rdi
 4830 038f E8000000 		call	png_set_filter
 4830      00
 4831              	.LVL484:
 4832              	.LBB275:
 4833              	.LBB276:
1380:fltk-1.3.4-1/png/pngwrite.c ****       return;
 4834              		.loc 1 1380 0
 4835 0394 807C241B 		cmpb	$0, 27(%rsp)
 4835      00
 4836 0399 0F850DFE 		jne	.L554
 4836      FFFF
1383:fltk-1.3.4-1/png/pngwrite.c **** }
 4837              		.loc 1 1383 0
 4838 039f C783BC01 		movl	$3, 444(%rbx)
 4838      00000300 
 4838      0000
 4839 03a9 E9FEFDFF 		jmp	.L554
 4839      FF
 4840              	.LVL485:
 4841 03ae 6690     		.p2align 4,,10
 4842              		.p2align 3
 4843              	.L615:
 4844              	.LBE276:
 4845              	.LBE275:
 4846              	.LBB277:
2275:fltk-1.3.4-1/png/pngwrite.c **** 
 4847              		.loc 1 2275 0
 4848 03b0 8B4D10   		movl	16(%rbp), %ecx
 4849 03b3 83E901   		subl	$1, %ecx
 4850 03b6 480FAFC8 		imulq	%rax, %rcx
 4851 03ba 4829CA   		subq	%rcx, %rdx
 4852              	.LVL486:
 4853 03bd E9D8FDFF 		jmp	.L552
 4853      FF
 4854              	.LVL487:
 4855              		.p2align 4,,10
 4856 03c2 660F1F44 		.p2align 3
 4856      0000
 4857              	.L558:
 4858              	.LBE277:
 4859              	.LBB278:
2308:fltk-1.3.4-1/png/pngwrite.c ****       display->local_row = NULL;
 4860              		.loc 1 2308 0
 4861 03c8 4889EF   		movq	%rbp, %rdi
 4862 03cb BE000000 		movl	$png_write_image_8bit, %esi
 4862      00
 4863 03d0 E8000000 		call	png_safe_execute
 4863      00
 4864              	.LVL488:
 4865 03d5 89C5     		movl	%eax, %ebp
 4866              	.LVL489:
 4867 03d7 E929FEFF 		jmp	.L559
 4867      FF
 4868              	.LVL490:
 4869 03dc 0F1F4000 		.p2align 4,,10
 4870              		.p2align 3
 4871              	.L611:
 4872              	.LBE278:
2242:fltk-1.3.4-1/png/pngwrite.c ****          format &= ~PNG_FORMAT_FLAG_BGR;
 4873              		.loc 1 2242 0
 4874 03e0 4889DF   		movq	%rbx, %rdi
 4875 03e3 E8000000 		call	png_set_bgr
 4875      00
 4876              	.LVL491:
 4877 03e8 E95BFDFF 		jmp	.L545
 4877      FF
 4878 03ed 0F1F00   		.p2align 4,,10
 4879              		.p2align 3
 4880              	.L612:
2251:fltk-1.3.4-1/png/pngwrite.c ****          format &= ~PNG_FORMAT_FLAG_AFIRST;
 4881              		.loc 1 2251 0
 4882 03f0 4889DF   		movq	%rbx, %rdi
 4883 03f3 E8000000 		call	png_set_swap_alpha
 4883      00
 4884              	.LVL492:
 4885 03f8 E964FDFF 		jmp	.L547
 4885      FF
 4886 03fd 0F1F00   		.p2align 4,,10
 4887              		.p2align 3
 4888              	.L613:
2260:fltk-1.3.4-1/png/pngwrite.c **** 
 4889              		.loc 1 2260 0
 4890 0400 4889DF   		movq	%rbx, %rdi
 4891 0403 E8000000 		call	png_set_packing
 4891      00
 4892              	.LVL493:
 4893 0408 E967FDFF 		jmp	.L548
 4893      FF
 4894 040d 0F1F00   		.p2align 4,,10
 4895              		.p2align 3
 4896              	.L617:
2204:fltk-1.3.4-1/png/pngwrite.c ****             /* color      x       y */
 4897              		.loc 1 2204 0
 4898 0410 68701700 		pushq	$6000
 4898      00
 4899              		.cfi_def_cfa_offset 104
 4900 0415 68983A00 		pushq	$15000
 4900      00
 4901              		.cfi_def_cfa_offset 112
 4902 041a 41B9E880 		movl	$33000, %r9d
 4902      0000
 4903 0420 6860EA00 		pushq	$60000
 4903      00
 4904              		.cfi_def_cfa_offset 120
 4905 0425 68307500 		pushq	$30000
 4905      00
 4906              		.cfi_def_cfa_offset 128
 4907 042a 41B800FA 		movl	$64000, %r8d
 4907      0000
 4908 0430 488B7424 		movq	40(%rsp), %rsi
 4908      28
 4909 0435 B9848000 		movl	$32900, %ecx
 4909      00
 4910 043a BA267A00 		movl	$31270, %edx
 4910      00
 4911 043f 4889DF   		movq	%rbx, %rdi
 4912 0442 E8000000 		call	png_set_cHRM_fixed
 4912      00
 4913              	.LVL494:
 4914 0447 4883C420 		addq	$32, %rsp
 4915              		.cfi_def_cfa_offset 96
 4916 044b E959FEFF 		jmp	.L541
 4916      FF
 4917              	.LVL495:
 4918              	.L614:
2265:fltk-1.3.4-1/png/pngwrite.c **** 
 4919              		.loc 1 2265 0
 4920 0450 BE000000 		movl	$.LC38, %esi
 4920      00
 4921 0455 4889DF   		movq	%rbx, %rdi
 4922 0458 E8000000 		call	png_error
 4922      00
 4923              	.LVL496:
 4924              	.L618:
 4925              	.LBB279:
 4926              	.LBB267:
 199:fltk-1.3.4-1/png/pngwrite.c ****       return;
 4927              		.loc 1 199 0
 4928 045d 8854241B 		movb	%dl, 27(%rsp)
 4929 0461 E96BFEFF 		jmp	.L563
 4929      FF
 4930              	.LVL497:
 4931              	.L535:
 4932              	.LBE267:
 4933              	.LBE279:
2181:fltk-1.3.4-1/png/pngwrite.c ****             "no color-map for color-mapped image");
 4934              		.loc 1 2181 0
 4935 0466 488B4500 		movq	0(%rbp), %rax
 4936 046a BE000000 		movl	$.LC37, %esi
 4936      00
 4937 046f 488B38   		movq	(%rax), %rdi
 4938 0472 E8000000 		call	png_error
 4938      00
 4939              	.LVL498:
 4940              	.L568:
2154:fltk-1.3.4-1/png/pngwrite.c **** 
 4941              		.loc 1 2154 0
 4942 0477 4531F6   		xorl	%r14d, %r14d
 4943 047a E9E3FBFF 		jmp	.L531
 4943      FF
 4944              	.LVL499:
 4945              	.L610:
 4946              	.LBB280:
 4947              	.LBB268:
 4948 047f 488B7424 		movq	8(%rsp), %rsi
 4948      08
 4949 0484 4889DF   		movq	%rbx, %rdi
 4950 0487 E8000000 		call	png_write_info.part.7
 4950      00
 4951              	.LVL500:
 199:fltk-1.3.4-1/png/pngwrite.c ****       return;
 4952              		.loc 1 199 0
 4953 048c C644241B 		movb	$0, 27(%rsp)
 4953      00
 4954 0491 E99DFCFF 		jmp	.L565
 4954      FF
 4955              	.LBE268:
 4956              	.LBE280:
 4957              		.cfi_endproc
 4958              	.LFE95:
 4960              		.section	.text.unlikely.png_image_write_main
 4961              	.LCOLDE39:
 4962              		.section	.text.png_image_write_main
 4963              	.LHOTE39:
 4964              		.section	.text.unlikely.png_set_filter_heuristics,"ax",@progbits
 4965              	.LCOLDB45:
 4966              		.section	.text.png_set_filter_heuristics,"ax",@progbits
 4967              	.LHOTB45:
 4968              		.p2align 4,,15
 4969              		.globl	png_set_filter_heuristics
 4971              	png_set_filter_heuristics:
 4972              	.LFB75:
1258:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_filter_heuristics");
 4973              		.loc 1 1258 0
 4974              		.cfi_startproc
 4975              	.LVL501:
 4976 0000 4156     		pushq	%r14
 4977              		.cfi_def_cfa_offset 16
 4978              		.cfi_offset 14, -16
 4979 0002 4155     		pushq	%r13
 4980              		.cfi_def_cfa_offset 24
 4981              		.cfi_offset 13, -24
 4982 0004 4189F5   		movl	%esi, %r13d
 4983 0007 4154     		pushq	%r12
 4984              		.cfi_def_cfa_offset 32
 4985              		.cfi_offset 12, -32
 4986 0009 55       		pushq	%rbp
 4987              		.cfi_def_cfa_offset 40
 4988              		.cfi_offset 6, -40
 4989 000a 4189D6   		movl	%edx, %r14d
 4990 000d 53       		pushq	%rbx
 4991              		.cfi_def_cfa_offset 48
 4992              		.cfi_offset 3, -48
1258:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_filter_heuristics");
 4993              		.loc 1 1258 0
 4994 000e 4889CD   		movq	%rcx, %rbp
 4995 0011 4889FB   		movq	%rdi, %rbx
 4996 0014 4D89C4   		movq	%r8, %r12
1264:fltk-1.3.4-1/png/pngwrite.c ****       return;
 4997              		.loc 1 1264 0
 4998 0017 E8000000 		call	png_init_filter_heuristics
 4998      00
 4999              	.LVL502:
1268:fltk-1.3.4-1/png/pngwrite.c ****    {
 5000              		.loc 1 1268 0
 5001 001c 4183FD02 		cmpl	$2, %r13d
 5002 0020 0F851C01 		jne	.L619
 5002      0000
 5003 0026 85C0     		testl	%eax, %eax
 5004 0028 0F841401 		je	.L619
 5004      0000
 5005              	.LVL503:
 5006              	.LBB281:
1271:fltk-1.3.4-1/png/pngwrite.c ****       {
 5007              		.loc 1 1271 0 discriminator 1
 5008 002e 4585F6   		testl	%r14d, %r14d
 5009 0031 0F8E9F00 		jle	.L628
 5009      0000
 5010 0037 418D46FF 		leal	-1(%r14), %eax
1271:fltk-1.3.4-1/png/pngwrite.c ****       {
 5011              		.loc 1 1271 0 is_stmt 0
 5012 003b 31D2     		xorl	%edx, %edx
 5013 003d 660FEFDB 		pxor	%xmm3, %xmm3
 5014 0041 488D7400 		leaq	2(%rax,%rax), %rsi
 5014      02
1281:fltk-1.3.4-1/png/pngwrite.c ****                 (png_uint_16)(PNG_WEIGHT_FACTOR*filter_weights[i]+.5);
 5015              		.loc 1 1281 0 is_stmt 1
 5016 0046 F20F1015 		movsd	.LC41(%rip), %xmm2
 5016      00000000 
 5017 004e F20F100D 		movsd	.LC42(%rip), %xmm1
 5017      00000000 
 5018 0056 EB45     		jmp	.L627
 5019              	.LVL504:
 5020 0058 0F1F8400 		.p2align 4,,10
 5020      00000000 
 5021              		.p2align 3
 5022              	.L639:
 5023 0060 F20F59C2 		mulsd	%xmm2, %xmm0
 5024 0064 488B8BB0 		movq	944(%rbx), %rcx
 5024      030000
 5025 006b F20F58C1 		addsd	%xmm1, %xmm0
 5026 006f F20F2CC0 		cvttsd2si	%xmm0, %eax
1284:fltk-1.3.4-1/png/pngwrite.c ****                 (png_uint_16)(PNG_WEIGHT_FACTOR/filter_weights[i]+.5);
 5027              		.loc 1 1284 0
 5028 0073 660F28C2 		movapd	%xmm2, %xmm0
1281:fltk-1.3.4-1/png/pngwrite.c ****                 (png_uint_16)(PNG_WEIGHT_FACTOR*filter_weights[i]+.5);
 5029              		.loc 1 1281 0
 5030 0077 66890411 		movw	%ax, (%rcx,%rdx)
1284:fltk-1.3.4-1/png/pngwrite.c ****                 (png_uint_16)(PNG_WEIGHT_FACTOR/filter_weights[i]+.5);
 5031              		.loc 1 1284 0
 5032 007b 488B8BA8 		movq	936(%rbx), %rcx
 5032      030000
 5033 0082 F20F5E44 		divsd	0(%rbp,%rdx,4), %xmm0
 5033      9500
 5034 0088 F20F58C1 		addsd	%xmm1, %xmm0
 5035 008c F20F2CC0 		cvttsd2si	%xmm0, %eax
 5036 0090 66890411 		movw	%ax, (%rcx,%rdx)
 5037 0094 4883C202 		addq	$2, %rdx
1271:fltk-1.3.4-1/png/pngwrite.c ****       {
 5038              		.loc 1 1271 0
 5039 0098 4839F2   		cmpq	%rsi, %rdx
 5040 009b 7439     		je	.L628
 5041              	.L627:
1273:fltk-1.3.4-1/png/pngwrite.c ****          {
 5042              		.loc 1 1273 0
 5043 009d F20F1044 		movsd	0(%rbp,%rdx,4), %xmm0
 5043      9500
 5044 00a3 660F2ED8 		ucomisd	%xmm0, %xmm3
 5045 00a7 72B7     		jb	.L639
1276:fltk-1.3.4-1/png/pngwrite.c ****          }
 5046              		.loc 1 1276 0
 5047 00a9 488B8BA8 		movq	936(%rbx), %rcx
 5047      030000
1275:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->filter_weights[i] = PNG_WEIGHT_FACTOR;
 5048              		.loc 1 1275 0
 5049 00b0 4889D0   		movq	%rdx, %rax
 5050 00b3 480383B0 		addq	944(%rbx), %rax
 5050      030000
1276:fltk-1.3.4-1/png/pngwrite.c ****          }
 5051              		.loc 1 1276 0
 5052 00ba BF000100 		movl	$256, %edi
 5052      00
1275:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->filter_weights[i] = PNG_WEIGHT_FACTOR;
 5053              		.loc 1 1275 0
 5054 00bf 41B80001 		movl	$256, %r8d
 5054      0000
1276:fltk-1.3.4-1/png/pngwrite.c ****          }
 5055              		.loc 1 1276 0
 5056 00c5 66893C11 		movw	%di, (%rcx,%rdx)
 5057 00c9 4883C202 		addq	$2, %rdx
1271:fltk-1.3.4-1/png/pngwrite.c ****       {
 5058              		.loc 1 1271 0
 5059 00cd 4839F2   		cmpq	%rsi, %rdx
1275:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->filter_weights[i] = PNG_WEIGHT_FACTOR;
 5060              		.loc 1 1275 0
 5061 00d0 66448900 		movw	%r8w, (%rax)
1271:fltk-1.3.4-1/png/pngwrite.c ****       {
 5062              		.loc 1 1271 0
 5063 00d4 75C7     		jne	.L627
 5064              	.L628:
 5065 00d6 F20F101D 		movsd	.LC43(%rip), %xmm3
 5065      00000000 
 5066 00de 31C0     		xorl	%eax, %eax
1298:fltk-1.3.4-1/png/pngwrite.c ****              (png_uint_16)(PNG_COST_FACTOR / filter_costs[i] + .5);
 5067              		.loc 1 1298 0
 5068 00e0 F20F1015 		movsd	.LC44(%rip), %xmm2
 5068      00000000 
 5069 00e8 F20F100D 		movsd	.LC42(%rip), %xmm1
 5069      00000000 
 5070              	.L623:
1296:fltk-1.3.4-1/png/pngwrite.c ****       {
 5071              		.loc 1 1296 0 discriminator 4
 5072 00f0 F2410F10 		movsd	(%r12,%rax,4), %xmm0
 5072      0484
 5073 00f6 660F2EC3 		ucomisd	%xmm3, %xmm0
 5074 00fa 723C     		jb	.L629
1298:fltk-1.3.4-1/png/pngwrite.c ****              (png_uint_16)(PNG_COST_FACTOR / filter_costs[i] + .5);
 5075              		.loc 1 1298 0
 5076 00fc 660F28E2 		movapd	%xmm2, %xmm4
 5077 0100 488B8BC0 		movq	960(%rbx), %rcx
 5077      030000
 5078 0107 F20F5EE0 		divsd	%xmm0, %xmm4
 5079 010b 660F28C4 		movapd	%xmm4, %xmm0
 5080 010f F20F58C1 		addsd	%xmm1, %xmm0
 5081 0113 F20F2CD0 		cvttsd2si	%xmm0, %edx
 5082 0117 66891401 		movw	%dx, (%rcx,%rax)
1301:fltk-1.3.4-1/png/pngwrite.c ****              (png_uint_16)(PNG_COST_FACTOR * filter_costs[i] + .5);
 5083              		.loc 1 1301 0
 5084 011b 488B8BB8 		movq	952(%rbx), %rcx
 5084      030000
 5085 0122 F2410F10 		movsd	(%r12,%rax,4), %xmm0
 5085      0484
 5086 0128 F20F59C2 		mulsd	%xmm2, %xmm0
 5087 012c F20F58C1 		addsd	%xmm1, %xmm0
 5088 0130 F20F2CD0 		cvttsd2si	%xmm0, %edx
 5089 0134 66891401 		movw	%dx, (%rcx,%rax)
 5090              	.L629:
 5091 0138 4883C002 		addq	$2, %rax
1296:fltk-1.3.4-1/png/pngwrite.c ****       {
 5092              		.loc 1 1296 0 discriminator 2
 5093 013c 4883F80A 		cmpq	$10, %rax
 5094 0140 75AE     		jne	.L623
 5095              	.L619:
 5096              	.LBE281:
1305:fltk-1.3.4-1/png/pngwrite.c **** #endif /* FLOATING_POINT */
 5097              		.loc 1 1305 0
 5098 0142 5B       		popq	%rbx
 5099              		.cfi_def_cfa_offset 40
 5100              	.LVL505:
 5101 0143 5D       		popq	%rbp
 5102              		.cfi_def_cfa_offset 32
 5103              	.LVL506:
 5104 0144 415C     		popq	%r12
 5105              		.cfi_def_cfa_offset 24
 5106              	.LVL507:
 5107 0146 415D     		popq	%r13
 5108              		.cfi_def_cfa_offset 16
 5109              	.LVL508:
 5110 0148 415E     		popq	%r14
 5111              		.cfi_def_cfa_offset 8
 5112              	.LVL509:
 5113 014a C3       		ret
 5114              		.cfi_endproc
 5115              	.LFE75:
 5117              		.section	.text.unlikely.png_set_filter_heuristics
 5118              	.LCOLDE45:
 5119              		.section	.text.png_set_filter_heuristics
 5120              	.LHOTE45:
 5121              		.section	.text.unlikely.png_set_filter_heuristics_fixed,"ax",@progbits
 5122              	.LCOLDB46:
 5123              		.section	.text.png_set_filter_heuristics_fixed,"ax",@progbits
 5124              	.LHOTB46:
 5125              		.p2align 4,,15
 5126              		.globl	png_set_filter_heuristics_fixed
 5128              	png_set_filter_heuristics_fixed:
 5129              	.LFB76:
1313:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_filter_heuristics_fixed");
 5130              		.loc 1 1313 0
 5131              		.cfi_startproc
 5132              	.LVL510:
 5133 0000 4156     		pushq	%r14
 5134              		.cfi_def_cfa_offset 16
 5135              		.cfi_offset 14, -16
 5136 0002 4155     		pushq	%r13
 5137              		.cfi_def_cfa_offset 24
 5138              		.cfi_offset 13, -24
 5139 0004 4189F5   		movl	%esi, %r13d
 5140 0007 4154     		pushq	%r12
 5141              		.cfi_def_cfa_offset 32
 5142              		.cfi_offset 12, -32
 5143 0009 55       		pushq	%rbp
 5144              		.cfi_def_cfa_offset 40
 5145              		.cfi_offset 6, -40
 5146 000a 4189D6   		movl	%edx, %r14d
 5147 000d 53       		pushq	%rbx
 5148              		.cfi_def_cfa_offset 48
 5149              		.cfi_offset 3, -48
1313:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_filter_heuristics_fixed");
 5150              		.loc 1 1313 0
 5151 000e 4889CD   		movq	%rcx, %rbp
 5152 0011 4889FB   		movq	%rdi, %rbx
 5153 0014 4D89C4   		movq	%r8, %r12
1319:fltk-1.3.4-1/png/pngwrite.c ****       return;
 5154              		.loc 1 1319 0
 5155 0017 E8000000 		call	png_init_filter_heuristics
 5155      00
 5156              	.LVL511:
1323:fltk-1.3.4-1/png/pngwrite.c ****    {
 5157              		.loc 1 1323 0
 5158 001c 4183FD02 		cmpl	$2, %r13d
 5159 0020 0F850101 		jne	.L641
 5159      0000
 5160 0026 85C0     		testl	%eax, %eax
 5161 0028 0F84F900 		je	.L641
 5161      0000
 5162              	.LVL512:
 5163              	.LBB282:
1326:fltk-1.3.4-1/png/pngwrite.c ****       {
 5164              		.loc 1 1326 0 discriminator 1
 5165 002e 4585F6   		testl	%r14d, %r14d
 5166 0031 0F8E9A00 		jle	.L649
 5166      0000
 5167 0037 418D46FF 		leal	-1(%r14), %eax
1326:fltk-1.3.4-1/png/pngwrite.c ****       {
 5168              		.loc 1 1326 0 is_stmt 0
 5169 003b 31FF     		xorl	%edi, %edi
1336:fltk-1.3.4-1/png/pngwrite.c ****                ((PNG_WEIGHT_FACTOR*filter_weights[i]+PNG_FP_HALF)/PNG_FP_1);
 5170              		.loc 1 1336 0 is_stmt 1
 5171 003d 41B889B5 		movl	$351843721, %r8d
 5171      F814
 5172 0043 488D4C00 		leaq	2(%rax,%rax), %rcx
 5172      02
 5173 0048 EB52     		jmp	.L648
 5174              	.LVL513:
 5175 004a 660F1F44 		.p2align 4,,10
 5175      0000
 5176              		.p2align 3
 5177              	.L646:
 5178 0050 C1E008   		sall	$8, %eax
 5179 0053 4C8B8BB0 		movq	944(%rbx), %r9
 5179      030000
 5180 005a 8DB050C3 		leal	50000(%rax), %esi
 5180      0000
 5181 0060 89F0     		movl	%esi, %eax
 5182 0062 C1FE1F   		sarl	$31, %esi
 5183 0065 41F7E8   		imull	%r8d
 5184 0068 C1FA0D   		sarl	$13, %edx
 5185 006b 29F2     		subl	%esi, %edx
 5186 006d 66418914 		movw	%dx, (%r9,%rdi)
 5186      39
1340:fltk-1.3.4-1/png/pngwrite.c ****          }
 5187              		.loc 1 1340 0
 5188 0072 8B747D00 		movl	0(%rbp,%rdi,2), %esi
1339:fltk-1.3.4-1/png/pngwrite.c ****                PNG_FP_1+(filter_weights[i]/2))/filter_weights[i]);
 5189              		.loc 1 1339 0
 5190 0076 4C8B8BA8 		movq	936(%rbx), %r9
 5190      030000
 5191 007d 89F0     		movl	%esi, %eax
 5192 007f C1E81F   		shrl	$31, %eax
 5193 0082 01F0     		addl	%esi, %eax
 5194 0084 D1F8     		sarl	%eax
 5195 0086 0500A086 		addl	$25600000, %eax
 5195      01
 5196 008b 99       		cltd
 5197 008c F7FE     		idivl	%esi
 5198 008e 66418904 		movw	%ax, (%r9,%rdi)
 5198      39
 5199 0093 4883C702 		addq	$2, %rdi
1326:fltk-1.3.4-1/png/pngwrite.c ****       {
 5200              		.loc 1 1326 0
 5201 0097 4839CF   		cmpq	%rcx, %rdi
 5202 009a 7435     		je	.L649
 5203              	.L648:
1328:fltk-1.3.4-1/png/pngwrite.c ****          {
 5204              		.loc 1 1328 0
 5205 009c 8B447D00 		movl	0(%rbp,%rdi,2), %eax
 5206 00a0 85C0     		testl	%eax, %eax
 5207 00a2 7FAC     		jg	.L646
1331:fltk-1.3.4-1/png/pngwrite.c ****          }
 5208              		.loc 1 1331 0
 5209 00a4 488B93A8 		movq	936(%rbx), %rdx
 5209      030000
1330:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->filter_weights[i] = PNG_WEIGHT_FACTOR;
 5210              		.loc 1 1330 0
 5211 00ab 4889F8   		movq	%rdi, %rax
 5212 00ae 480383B0 		addq	944(%rbx), %rax
 5212      030000
1331:fltk-1.3.4-1/png/pngwrite.c ****          }
 5213              		.loc 1 1331 0
 5214 00b5 BE000100 		movl	$256, %esi
 5214      00
1330:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->filter_weights[i] = PNG_WEIGHT_FACTOR;
 5215              		.loc 1 1330 0
 5216 00ba 41B90001 		movl	$256, %r9d
 5216      0000
1331:fltk-1.3.4-1/png/pngwrite.c ****          }
 5217              		.loc 1 1331 0
 5218 00c0 6689343A 		movw	%si, (%rdx,%rdi)
 5219 00c4 4883C702 		addq	$2, %rdi
1326:fltk-1.3.4-1/png/pngwrite.c ****       {
 5220              		.loc 1 1326 0
 5221 00c8 4839CF   		cmpq	%rcx, %rdi
1330:fltk-1.3.4-1/png/pngwrite.c ****             png_ptr->filter_weights[i] = PNG_WEIGHT_FACTOR;
 5222              		.loc 1 1330 0
 5223 00cb 66448908 		movw	%r9w, (%rax)
1326:fltk-1.3.4-1/png/pngwrite.c ****       {
 5224              		.loc 1 1326 0
 5225 00cf 75CB     		jne	.L648
 5226              	.L649:
 5227 00d1 31C9     		xorl	%ecx, %ecx
 5228              	.LBB283:
1368:fltk-1.3.4-1/png/pngwrite.c ****       }
 5229              		.loc 1 1368 0
 5230 00d3 BFC55A7C 		movl	$175921861, %edi
 5230      0A
 5231              	.L645:
 5232              	.LBE283:
1352:fltk-1.3.4-1/png/pngwrite.c ****       {
 5233              		.loc 1 1352 0
 5234 00d8 418B344C 		movl	(%r12,%rcx,2), %esi
 5235 00dc 81FE9F86 		cmpl	$99999, %esi
 5235      0100
 5236 00e2 7E39     		jle	.L650
 5237              	.LBB284:
1360:fltk-1.3.4-1/png/pngwrite.c ****          tmp /= filter_costs[i];
 5238              		.loc 1 1360 0
 5239 00e4 89F0     		movl	%esi, %eax
1363:fltk-1.3.4-1/png/pngwrite.c **** 
 5240              		.loc 1 1363 0
 5241 00e6 31D2     		xorl	%edx, %edx
 5242 00e8 4C8B83C0 		movq	960(%rbx), %r8
 5242      030000
1360:fltk-1.3.4-1/png/pngwrite.c ****          tmp /= filter_costs[i];
 5243              		.loc 1 1360 0
 5244 00ef D1F8     		sarl	%eax
 5245 00f1 0500350C 		addl	$800000, %eax
 5245      00
 5246              	.LVL514:
1363:fltk-1.3.4-1/png/pngwrite.c **** 
 5247              		.loc 1 1363 0
 5248 00f6 F7F6     		divl	%esi
 5249              	.LVL515:
 5250 00f8 66418904 		movw	%ax, (%r8,%rcx)
 5250      08
1365:fltk-1.3.4-1/png/pngwrite.c ****          tmp /= PNG_FP_1;
 5251              		.loc 1 1365 0
 5252 00fd 418B044C 		movl	(%r12,%rcx,2), %eax
 5253              	.LVL516:
1368:fltk-1.3.4-1/png/pngwrite.c ****       }
 5254              		.loc 1 1368 0
 5255 0101 488BB3B8 		movq	952(%rbx), %rsi
 5255      030000
 5256              	.LVL517:
1365:fltk-1.3.4-1/png/pngwrite.c ****          tmp /= PNG_FP_1;
 5257              		.loc 1 1365 0
 5258 0108 8D14C550 		leal	50000(,%rax,8), %edx
 5258      C30000
 5259              	.LVL518:
1368:fltk-1.3.4-1/png/pngwrite.c ****       }
 5260              		.loc 1 1368 0
 5261 010f C1EA05   		shrl	$5, %edx
 5262              	.LVL519:
 5263 0112 89D0     		movl	%edx, %eax
 5264              	.LVL520:
 5265 0114 F7E7     		mull	%edi
 5266 0116 C1EA07   		shrl	$7, %edx
 5267 0119 6689140E 		movw	%dx, (%rsi,%rcx)
 5268              	.LVL521:
 5269              	.L650:
 5270 011d 4883C102 		addq	$2, %rcx
 5271              	.LBE284:
1351:fltk-1.3.4-1/png/pngwrite.c ****          if (filter_costs[i] >= PNG_FP_1)
 5272              		.loc 1 1351 0 discriminator 2
 5273 0121 4883F90A 		cmpq	$10, %rcx
 5274 0125 75B1     		jne	.L645
 5275              	.L641:
 5276              	.LBE282:
1371:fltk-1.3.4-1/png/pngwrite.c **** #endif /* FIXED_POINT */
 5277              		.loc 1 1371 0
 5278 0127 5B       		popq	%rbx
 5279              		.cfi_def_cfa_offset 40
 5280              	.LVL522:
 5281 0128 5D       		popq	%rbp
 5282              		.cfi_def_cfa_offset 32
 5283              	.LVL523:
 5284 0129 415C     		popq	%r12
 5285              		.cfi_def_cfa_offset 24
 5286              	.LVL524:
 5287 012b 415D     		popq	%r13
 5288              		.cfi_def_cfa_offset 16
 5289              	.LVL525:
 5290 012d 415E     		popq	%r14
 5291              		.cfi_def_cfa_offset 8
 5292              	.LVL526:
 5293 012f C3       		ret
 5294              		.cfi_endproc
 5295              	.LFE76:
 5297              		.section	.text.unlikely.png_set_filter_heuristics_fixed
 5298              	.LCOLDE46:
 5299              		.section	.text.png_set_filter_heuristics_fixed
 5300              	.LHOTE46:
 5301              		.section	.text.unlikely.png_set_compression_level,"ax",@progbits
 5302              	.LCOLDB47:
 5303              		.section	.text.png_set_compression_level,"ax",@progbits
 5304              	.LHOTB47:
 5305              		.p2align 4,,15
 5306              		.globl	png_set_compression_level
 5308              	png_set_compression_level:
 5309              	.LFB77:
1377:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_compression_level");
 5310              		.loc 1 1377 0
 5311              		.cfi_startproc
 5312              	.LVL527:
1380:fltk-1.3.4-1/png/pngwrite.c ****       return;
 5313              		.loc 1 1380 0
 5314 0000 4885FF   		testq	%rdi, %rdi
 5315 0003 7406     		je	.L658
1383:fltk-1.3.4-1/png/pngwrite.c **** }
 5316              		.loc 1 1383 0
 5317 0005 89B7BC01 		movl	%esi, 444(%rdi)
 5317      0000
 5318              	.L658:
 5319 000b F3C3     		rep ret
 5320              		.cfi_endproc
 5321              	.LFE77:
 5323              		.section	.text.unlikely.png_set_compression_level
 5324              	.LCOLDE47:
 5325              		.section	.text.png_set_compression_level
 5326              	.LHOTE47:
 5327              		.section	.text.unlikely.png_set_compression_mem_level,"ax",@progbits
 5328              	.LCOLDB48:
 5329              		.section	.text.png_set_compression_mem_level,"ax",@progbits
 5330              	.LHOTB48:
 5331              		.p2align 4,,15
 5332              		.globl	png_set_compression_mem_level
 5334              	png_set_compression_mem_level:
 5335              	.LFB78:
1388:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_compression_mem_level");
 5336              		.loc 1 1388 0
 5337              		.cfi_startproc
 5338              	.LVL528:
1391:fltk-1.3.4-1/png/pngwrite.c ****       return;
 5339              		.loc 1 1391 0
 5340 0000 4885FF   		testq	%rdi, %rdi
 5341 0003 7406     		je	.L663
1394:fltk-1.3.4-1/png/pngwrite.c **** }
 5342              		.loc 1 1394 0
 5343 0005 89B7C801 		movl	%esi, 456(%rdi)
 5343      0000
 5344              	.L663:
 5345 000b F3C3     		rep ret
 5346              		.cfi_endproc
 5347              	.LFE78:
 5349              		.section	.text.unlikely.png_set_compression_mem_level
 5350              	.LCOLDE48:
 5351              		.section	.text.png_set_compression_mem_level
 5352              	.LHOTE48:
 5353              		.section	.text.unlikely.png_set_compression_strategy,"ax",@progbits
 5354              	.LCOLDB49:
 5355              		.section	.text.png_set_compression_strategy,"ax",@progbits
 5356              	.LHOTB49:
 5357              		.p2align 4,,15
 5358              		.globl	png_set_compression_strategy
 5360              	png_set_compression_strategy:
 5361              	.LFB79:
1399:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_compression_strategy");
 5362              		.loc 1 1399 0
 5363              		.cfi_startproc
 5364              	.LVL529:
1402:fltk-1.3.4-1/png/pngwrite.c ****       return;
 5365              		.loc 1 1402 0
 5366 0000 4885FF   		testq	%rdi, %rdi
 5367 0003 740D     		je	.L668
1407:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->zlib_strategy = strategy;
 5368              		.loc 1 1407 0
 5369 0005 838F3001 		orl	$1, 304(%rdi)
 5369      000001
1408:fltk-1.3.4-1/png/pngwrite.c **** }
 5370              		.loc 1 1408 0
 5371 000c 89B7CC01 		movl	%esi, 460(%rdi)
 5371      0000
 5372              	.L668:
 5373 0012 F3C3     		rep ret
 5374              		.cfi_endproc
 5375              	.LFE79:
 5377              		.section	.text.unlikely.png_set_compression_strategy
 5378              	.LCOLDE49:
 5379              		.section	.text.png_set_compression_strategy
 5380              	.LHOTE49:
 5381              		.section	.rodata.str1.8
 5382 0284 00000000 		.align 8
 5383              	.LC50:
 5384 0288 4F6E6C79 		.string	"Only compression windows <= 32k supported by PNG"
 5384      20636F6D 
 5384      70726573 
 5384      73696F6E 
 5384      2077696E 
 5385 02b9 00000000 		.align 8
 5385      000000
 5386              	.LC51:
 5387 02c0 4F6E6C79 		.string	"Only compression windows >= 256 supported by PNG"
 5387      20636F6D 
 5387      70726573 
 5387      73696F6E 
 5387      2077696E 
 5388              		.section	.text.unlikely.png_set_compression_window_bits,"ax",@progbits
 5389              	.LCOLDB52:
 5390              		.section	.text.png_set_compression_window_bits,"ax",@progbits
 5391              	.LHOTB52:
 5392              		.p2align 4,,15
 5393              		.globl	png_set_compression_window_bits
 5395              	png_set_compression_window_bits:
 5396              	.LFB80:
1416:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
 5397              		.loc 1 1416 0
 5398              		.cfi_startproc
 5399              	.LVL530:
1417:fltk-1.3.4-1/png/pngwrite.c ****       return;
 5400              		.loc 1 1417 0
 5401 0000 4885FF   		testq	%rdi, %rdi
 5402 0003 7415     		je	.L682
1426:fltk-1.3.4-1/png/pngwrite.c ****    {
 5403              		.loc 1 1426 0
 5404 0005 83FE0F   		cmpl	$15, %esi
1416:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
 5405              		.loc 1 1416 0
 5406 0008 53       		pushq	%rbx
 5407              		.cfi_def_cfa_offset 16
 5408              		.cfi_offset 3, -16
 5409 0009 4889FB   		movq	%rdi, %rbx
1426:fltk-1.3.4-1/png/pngwrite.c ****    {
 5410              		.loc 1 1426 0
 5411 000c 7F12     		jg	.L683
1432:fltk-1.3.4-1/png/pngwrite.c ****    {
 5412              		.loc 1 1432 0
 5413 000e 83FE07   		cmpl	$7, %esi
 5414 0011 7E2D     		jle	.L684
1438:fltk-1.3.4-1/png/pngwrite.c **** }
 5415              		.loc 1 1438 0
 5416 0013 89B3C401 		movl	%esi, 452(%rbx)
 5416      0000
1439:fltk-1.3.4-1/png/pngwrite.c **** 
 5417              		.loc 1 1439 0
 5418 0019 5B       		popq	%rbx
 5419              		.cfi_restore 3
 5420              		.cfi_def_cfa_offset 8
 5421              	.LVL531:
 5422              	.L682:
 5423 001a F3C3     		rep ret
 5424              	.LVL532:
 5425 001c 0F1F4000 		.p2align 4,,10
 5426              		.p2align 3
 5427              	.L683:
 5428              		.cfi_def_cfa_offset 16
 5429              		.cfi_offset 3, -16
1428:fltk-1.3.4-1/png/pngwrite.c ****       window_bits = 15;
 5430              		.loc 1 1428 0
 5431 0020 BE000000 		movl	$.LC50, %esi
 5431      00
 5432              	.LVL533:
 5433 0025 E8000000 		call	png_warning
 5433      00
 5434              	.LVL534:
1429:fltk-1.3.4-1/png/pngwrite.c ****    }
 5435              		.loc 1 1429 0
 5436 002a BE0F0000 		movl	$15, %esi
 5436      00
 5437              	.LVL535:
1438:fltk-1.3.4-1/png/pngwrite.c **** }
 5438              		.loc 1 1438 0
 5439 002f 89B3C401 		movl	%esi, 452(%rbx)
 5439      0000
1439:fltk-1.3.4-1/png/pngwrite.c **** 
 5440              		.loc 1 1439 0
 5441 0035 5B       		popq	%rbx
 5442              		.cfi_remember_state
 5443              		.cfi_restore 3
 5444              		.cfi_def_cfa_offset 8
 5445              	.LVL536:
 5446 0036 EBE2     		jmp	.L682
 5447              	.LVL537:
 5448 0038 0F1F8400 		.p2align 4,,10
 5448      00000000 
 5449              		.p2align 3
 5450              	.L684:
 5451              		.cfi_restore_state
1434:fltk-1.3.4-1/png/pngwrite.c ****       window_bits = 8;
 5452              		.loc 1 1434 0
 5453 0040 BE000000 		movl	$.LC51, %esi
 5453      00
 5454              	.LVL538:
 5455 0045 E8000000 		call	png_warning
 5455      00
 5456              	.LVL539:
1435:fltk-1.3.4-1/png/pngwrite.c ****    }
 5457              		.loc 1 1435 0
 5458 004a BE080000 		movl	$8, %esi
 5458      00
 5459              	.LVL540:
1438:fltk-1.3.4-1/png/pngwrite.c **** }
 5460              		.loc 1 1438 0
 5461 004f 89B3C401 		movl	%esi, 452(%rbx)
 5461      0000
1439:fltk-1.3.4-1/png/pngwrite.c **** 
 5462              		.loc 1 1439 0
 5463 0055 5B       		popq	%rbx
 5464              		.cfi_restore 3
 5465              		.cfi_def_cfa_offset 8
 5466              	.LVL541:
 5467 0056 EBC2     		jmp	.L682
 5468              		.cfi_endproc
 5469              	.LFE80:
 5471              		.section	.text.unlikely.png_set_compression_window_bits
 5472              	.LCOLDE52:
 5473              		.section	.text.png_set_compression_window_bits
 5474              	.LHOTE52:
 5475              		.section	.rodata.str1.8
 5476 02f1 00000000 		.align 8
 5476      000000
 5477              	.LC53:
 5478 02f8 4F6E6C79 		.string	"Only compression method 8 is supported by PNG"
 5478      20636F6D 
 5478      70726573 
 5478      73696F6E 
 5478      206D6574 
 5479              		.section	.text.unlikely.png_set_compression_method,"ax",@progbits
 5480              	.LCOLDB54:
 5481              		.section	.text.png_set_compression_method,"ax",@progbits
 5482              	.LHOTB54:
 5483              		.p2align 4,,15
 5484              		.globl	png_set_compression_method
 5486              	png_set_compression_method:
 5487              	.LFB81:
1443:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_compression_method");
 5488              		.loc 1 1443 0
 5489              		.cfi_startproc
 5490              	.LVL542:
1446:fltk-1.3.4-1/png/pngwrite.c ****       return;
 5491              		.loc 1 1446 0
 5492 0000 4885FF   		testq	%rdi, %rdi
 5493 0003 7426     		je	.L696
1443:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_compression_method");
 5494              		.loc 1 1443 0
 5495 0005 55       		pushq	%rbp
 5496              		.cfi_def_cfa_offset 16
 5497              		.cfi_offset 6, -16
 5498 0006 53       		pushq	%rbx
 5499              		.cfi_def_cfa_offset 24
 5500              		.cfi_offset 3, -24
 5501 0007 89F5     		movl	%esi, %ebp
 5502 0009 4889FB   		movq	%rdi, %rbx
 5503 000c 4883EC08 		subq	$8, %rsp
 5504              		.cfi_def_cfa_offset 32
1452:fltk-1.3.4-1/png/pngwrite.c ****       png_warning(png_ptr, "Only compression method 8 is supported by PNG");
 5505              		.loc 1 1452 0
 5506 0010 83FE08   		cmpl	$8, %esi
 5507 0013 740A     		je	.L687
1453:fltk-1.3.4-1/png/pngwrite.c **** 
 5508              		.loc 1 1453 0
 5509 0015 BE000000 		movl	$.LC53, %esi
 5509      00
 5510              	.LVL543:
 5511 001a E8000000 		call	png_warning
 5511      00
 5512              	.LVL544:
 5513              	.L687:
1455:fltk-1.3.4-1/png/pngwrite.c **** }
 5514              		.loc 1 1455 0
 5515 001f 89ABC001 		movl	%ebp, 448(%rbx)
 5515      0000
1456:fltk-1.3.4-1/png/pngwrite.c **** 
 5516              		.loc 1 1456 0
 5517 0025 4883C408 		addq	$8, %rsp
 5518              		.cfi_def_cfa_offset 24
 5519 0029 5B       		popq	%rbx
 5520              		.cfi_restore 3
 5521              		.cfi_def_cfa_offset 16
 5522              	.LVL545:
 5523 002a 5D       		popq	%rbp
 5524              		.cfi_restore 6
 5525              		.cfi_def_cfa_offset 8
 5526              	.LVL546:
 5527              	.L696:
 5528 002b F3C3     		rep ret
 5529              		.cfi_endproc
 5530              	.LFE81:
 5532              		.section	.text.unlikely.png_set_compression_method
 5533              	.LCOLDE54:
 5534              		.section	.text.png_set_compression_method
 5535              	.LHOTE54:
 5536              		.section	.text.unlikely.png_set_text_compression_level,"ax",@progbits
 5537              	.LCOLDB55:
 5538              		.section	.text.png_set_text_compression_level,"ax",@progbits
 5539              	.LHOTB55:
 5540              		.p2align 4,,15
 5541              		.globl	png_set_text_compression_level
 5543              	png_set_text_compression_level:
 5544              	.LFB82:
1462:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_text_compression_level");
 5545              		.loc 1 1462 0
 5546              		.cfi_startproc
 5547              	.LVL547:
1465:fltk-1.3.4-1/png/pngwrite.c ****       return;
 5548              		.loc 1 1465 0
 5549 0000 4885FF   		testq	%rdi, %rdi
 5550 0003 7406     		je	.L697
1468:fltk-1.3.4-1/png/pngwrite.c **** }
 5551              		.loc 1 1468 0
 5552 0005 89B7D001 		movl	%esi, 464(%rdi)
 5552      0000
 5553              	.L697:
 5554 000b F3C3     		rep ret
 5555              		.cfi_endproc
 5556              	.LFE82:
 5558              		.section	.text.unlikely.png_set_text_compression_level
 5559              	.LCOLDE55:
 5560              		.section	.text.png_set_text_compression_level
 5561              	.LHOTE55:
 5562              		.section	.text.unlikely.png_set_text_compression_mem_level,"ax",@progbits
 5563              	.LCOLDB56:
 5564              		.section	.text.png_set_text_compression_mem_level,"ax",@progbits
 5565              	.LHOTB56:
 5566              		.p2align 4,,15
 5567              		.globl	png_set_text_compression_mem_level
 5569              	png_set_text_compression_mem_level:
 5570              	.LFB83:
1473:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_text_compression_mem_level");
 5571              		.loc 1 1473 0
 5572              		.cfi_startproc
 5573              	.LVL548:
1476:fltk-1.3.4-1/png/pngwrite.c ****       return;
 5574              		.loc 1 1476 0
 5575 0000 4885FF   		testq	%rdi, %rdi
 5576 0003 7406     		je	.L702
1479:fltk-1.3.4-1/png/pngwrite.c **** }
 5577              		.loc 1 1479 0
 5578 0005 89B7DC01 		movl	%esi, 476(%rdi)
 5578      0000
 5579              	.L702:
 5580 000b F3C3     		rep ret
 5581              		.cfi_endproc
 5582              	.LFE83:
 5584              		.section	.text.unlikely.png_set_text_compression_mem_level
 5585              	.LCOLDE56:
 5586              		.section	.text.png_set_text_compression_mem_level
 5587              	.LHOTE56:
 5588              		.section	.text.unlikely.png_set_text_compression_strategy,"ax",@progbits
 5589              	.LCOLDB57:
 5590              		.section	.text.png_set_text_compression_strategy,"ax",@progbits
 5591              	.LHOTB57:
 5592              		.p2align 4,,15
 5593              		.globl	png_set_text_compression_strategy
 5595              	png_set_text_compression_strategy:
 5596              	.LFB84:
1484:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_text_compression_strategy");
 5597              		.loc 1 1484 0
 5598              		.cfi_startproc
 5599              	.LVL549:
1487:fltk-1.3.4-1/png/pngwrite.c ****       return;
 5600              		.loc 1 1487 0
 5601 0000 4885FF   		testq	%rdi, %rdi
 5602 0003 7406     		je	.L707
1490:fltk-1.3.4-1/png/pngwrite.c **** }
 5603              		.loc 1 1490 0
 5604 0005 89B7E001 		movl	%esi, 480(%rdi)
 5604      0000
 5605              	.L707:
 5606 000b F3C3     		rep ret
 5607              		.cfi_endproc
 5608              	.LFE84:
 5610              		.section	.text.unlikely.png_set_text_compression_strategy
 5611              	.LCOLDE57:
 5612              		.section	.text.png_set_text_compression_strategy
 5613              	.LHOTE57:
 5614              		.section	.text.unlikely.png_set_text_compression_window_bits,"ax",@progbits
 5615              	.LCOLDB58:
 5616              		.section	.text.png_set_text_compression_window_bits,"ax",@progbits
 5617              	.LHOTB58:
 5618              		.p2align 4,,15
 5619              		.globl	png_set_text_compression_window_bits
 5621              	png_set_text_compression_window_bits:
 5622              	.LFB85:
1498:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
 5623              		.loc 1 1498 0
 5624              		.cfi_startproc
 5625              	.LVL550:
1499:fltk-1.3.4-1/png/pngwrite.c ****       return;
 5626              		.loc 1 1499 0
 5627 0000 4885FF   		testq	%rdi, %rdi
 5628 0003 7415     		je	.L721
1502:fltk-1.3.4-1/png/pngwrite.c ****    {
 5629              		.loc 1 1502 0
 5630 0005 83FE0F   		cmpl	$15, %esi
1498:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
 5631              		.loc 1 1498 0
 5632 0008 53       		pushq	%rbx
 5633              		.cfi_def_cfa_offset 16
 5634              		.cfi_offset 3, -16
 5635 0009 4889FB   		movq	%rdi, %rbx
1502:fltk-1.3.4-1/png/pngwrite.c ****    {
 5636              		.loc 1 1502 0
 5637 000c 7F12     		jg	.L722
1508:fltk-1.3.4-1/png/pngwrite.c ****    {
 5638              		.loc 1 1508 0
 5639 000e 83FE07   		cmpl	$7, %esi
 5640 0011 7E2D     		jle	.L723
1514:fltk-1.3.4-1/png/pngwrite.c **** }
 5641              		.loc 1 1514 0
 5642 0013 89B3D801 		movl	%esi, 472(%rbx)
 5642      0000
1515:fltk-1.3.4-1/png/pngwrite.c **** 
 5643              		.loc 1 1515 0
 5644 0019 5B       		popq	%rbx
 5645              		.cfi_restore 3
 5646              		.cfi_def_cfa_offset 8
 5647              	.LVL551:
 5648              	.L721:
 5649 001a F3C3     		rep ret
 5650              	.LVL552:
 5651 001c 0F1F4000 		.p2align 4,,10
 5652              		.p2align 3
 5653              	.L722:
 5654              		.cfi_def_cfa_offset 16
 5655              		.cfi_offset 3, -16
1504:fltk-1.3.4-1/png/pngwrite.c ****       window_bits = 15;
 5656              		.loc 1 1504 0
 5657 0020 BE000000 		movl	$.LC50, %esi
 5657      00
 5658              	.LVL553:
 5659 0025 E8000000 		call	png_warning
 5659      00
 5660              	.LVL554:
1505:fltk-1.3.4-1/png/pngwrite.c ****    }
 5661              		.loc 1 1505 0
 5662 002a BE0F0000 		movl	$15, %esi
 5662      00
 5663              	.LVL555:
1514:fltk-1.3.4-1/png/pngwrite.c **** }
 5664              		.loc 1 1514 0
 5665 002f 89B3D801 		movl	%esi, 472(%rbx)
 5665      0000
1515:fltk-1.3.4-1/png/pngwrite.c **** 
 5666              		.loc 1 1515 0
 5667 0035 5B       		popq	%rbx
 5668              		.cfi_remember_state
 5669              		.cfi_restore 3
 5670              		.cfi_def_cfa_offset 8
 5671              	.LVL556:
 5672 0036 EBE2     		jmp	.L721
 5673              	.LVL557:
 5674 0038 0F1F8400 		.p2align 4,,10
 5674      00000000 
 5675              		.p2align 3
 5676              	.L723:
 5677              		.cfi_restore_state
1510:fltk-1.3.4-1/png/pngwrite.c ****       window_bits = 8;
 5678              		.loc 1 1510 0
 5679 0040 BE000000 		movl	$.LC51, %esi
 5679      00
 5680              	.LVL558:
 5681 0045 E8000000 		call	png_warning
 5681      00
 5682              	.LVL559:
1511:fltk-1.3.4-1/png/pngwrite.c ****    }
 5683              		.loc 1 1511 0
 5684 004a BE080000 		movl	$8, %esi
 5684      00
 5685              	.LVL560:
1514:fltk-1.3.4-1/png/pngwrite.c **** }
 5686              		.loc 1 1514 0
 5687 004f 89B3D801 		movl	%esi, 472(%rbx)
 5687      0000
1515:fltk-1.3.4-1/png/pngwrite.c **** 
 5688              		.loc 1 1515 0
 5689 0055 5B       		popq	%rbx
 5690              		.cfi_restore 3
 5691              		.cfi_def_cfa_offset 8
 5692              	.LVL561:
 5693 0056 EBC2     		jmp	.L721
 5694              		.cfi_endproc
 5695              	.LFE85:
 5697              		.section	.text.unlikely.png_set_text_compression_window_bits
 5698              	.LCOLDE58:
 5699              		.section	.text.png_set_text_compression_window_bits
 5700              	.LHOTE58:
 5701              		.section	.text.unlikely.png_set_text_compression_method,"ax",@progbits
 5702              	.LCOLDB59:
 5703              		.section	.text.png_set_text_compression_method,"ax",@progbits
 5704              	.LHOTB59:
 5705              		.p2align 4,,15
 5706              		.globl	png_set_text_compression_method
 5708              	png_set_text_compression_method:
 5709              	.LFB86:
1519:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_text_compression_method");
 5710              		.loc 1 1519 0
 5711              		.cfi_startproc
 5712              	.LVL562:
1522:fltk-1.3.4-1/png/pngwrite.c ****       return;
 5713              		.loc 1 1522 0
 5714 0000 4885FF   		testq	%rdi, %rdi
 5715 0003 7426     		je	.L735
1519:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_text_compression_method");
 5716              		.loc 1 1519 0
 5717 0005 55       		pushq	%rbp
 5718              		.cfi_def_cfa_offset 16
 5719              		.cfi_offset 6, -16
 5720 0006 53       		pushq	%rbx
 5721              		.cfi_def_cfa_offset 24
 5722              		.cfi_offset 3, -24
 5723 0007 89F5     		movl	%esi, %ebp
 5724 0009 4889FB   		movq	%rdi, %rbx
 5725 000c 4883EC08 		subq	$8, %rsp
 5726              		.cfi_def_cfa_offset 32
1525:fltk-1.3.4-1/png/pngwrite.c ****       png_warning(png_ptr, "Only compression method 8 is supported by PNG");
 5727              		.loc 1 1525 0
 5728 0010 83FE08   		cmpl	$8, %esi
 5729 0013 740A     		je	.L726
1526:fltk-1.3.4-1/png/pngwrite.c **** 
 5730              		.loc 1 1526 0
 5731 0015 BE000000 		movl	$.LC53, %esi
 5731      00
 5732              	.LVL563:
 5733 001a E8000000 		call	png_warning
 5733      00
 5734              	.LVL564:
 5735              	.L726:
1528:fltk-1.3.4-1/png/pngwrite.c **** }
 5736              		.loc 1 1528 0
 5737 001f 89ABD401 		movl	%ebp, 468(%rbx)
 5737      0000
1529:fltk-1.3.4-1/png/pngwrite.c **** #endif /* WRITE_CUSTOMIZE_ZTXT_COMPRESSION */
 5738              		.loc 1 1529 0
 5739 0025 4883C408 		addq	$8, %rsp
 5740              		.cfi_def_cfa_offset 24
 5741 0029 5B       		popq	%rbx
 5742              		.cfi_restore 3
 5743              		.cfi_def_cfa_offset 16
 5744              	.LVL565:
 5745 002a 5D       		popq	%rbp
 5746              		.cfi_restore 6
 5747              		.cfi_def_cfa_offset 8
 5748              	.LVL566:
 5749              	.L735:
 5750 002b F3C3     		rep ret
 5751              		.cfi_endproc
 5752              	.LFE86:
 5754              		.section	.text.unlikely.png_set_text_compression_method
 5755              	.LCOLDE59:
 5756              		.section	.text.png_set_text_compression_method
 5757              	.LHOTE59:
 5758              		.section	.text.unlikely.png_set_write_status_fn,"ax",@progbits
 5759              	.LCOLDB60:
 5760              		.section	.text.png_set_write_status_fn,"ax",@progbits
 5761              	.LHOTB60:
 5762              		.p2align 4,,15
 5763              		.globl	png_set_write_status_fn
 5765              	png_set_write_status_fn:
 5766              	.LFB87:
1535:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL)
 5767              		.loc 1 1535 0
 5768              		.cfi_startproc
 5769              	.LVL567:
1536:fltk-1.3.4-1/png/pngwrite.c ****       return;
 5770              		.loc 1 1536 0
 5771 0000 4885FF   		testq	%rdi, %rdi
 5772 0003 7407     		je	.L736
1539:fltk-1.3.4-1/png/pngwrite.c **** }
 5773              		.loc 1 1539 0
 5774 0005 4889B718 		movq	%rsi, 792(%rdi)
 5774      030000
 5775              	.L736:
 5776 000c F3C3     		rep ret
 5777              		.cfi_endproc
 5778              	.LFE87:
 5780              		.section	.text.unlikely.png_set_write_status_fn
 5781              	.LCOLDE60:
 5782              		.section	.text.png_set_write_status_fn
 5783              	.LHOTE60:
 5784              		.section	.text.unlikely.png_set_write_user_transform_fn,"ax",@progbits
 5785              	.LCOLDB61:
 5786              		.section	.text.png_set_write_user_transform_fn,"ax",@progbits
 5787              	.LHOTB61:
 5788              		.p2align 4,,15
 5789              		.globl	png_set_write_user_transform_fn
 5791              	png_set_write_user_transform_fn:
 5792              	.LFB88:
1546:fltk-1.3.4-1/png/pngwrite.c ****    png_debug(1, "in png_set_write_user_transform_fn");
 5793              		.loc 1 1546 0
 5794              		.cfi_startproc
 5795              	.LVL568:
1549:fltk-1.3.4-1/png/pngwrite.c ****       return;
 5796              		.loc 1 1549 0
 5797 0000 4885FF   		testq	%rdi, %rdi
 5798 0003 7411     		je	.L741
1552:fltk-1.3.4-1/png/pngwrite.c ****    png_ptr->write_user_transform_fn = write_user_transform_fn;
 5799              		.loc 1 1552 0
 5800 0005 818F3401 		orl	$1048576, 308(%rdi)
 5800      00000000 
 5800      1000
1553:fltk-1.3.4-1/png/pngwrite.c **** }
 5801              		.loc 1 1553 0
 5802 000f 4889B718 		movq	%rsi, 280(%rdi)
 5802      010000
 5803              	.L741:
 5804 0016 F3C3     		rep ret
 5805              		.cfi_endproc
 5806              	.LFE88:
 5808              		.section	.text.unlikely.png_set_write_user_transform_fn
 5809              	.LCOLDE61:
 5810              		.section	.text.png_set_write_user_transform_fn
 5811              	.LHOTE61:
 5812              		.section	.rodata.str1.8
 5813 0326 0000     		.align 8
 5814              	.LC62:
 5815 0328 6E6F2072 		.string	"no rows for png_write_image to write"
 5815      6F777320 
 5815      666F7220 
 5815      706E675F 
 5815      77726974 
 5816 034d 000000   		.align 8
 5817              	.LC63:
 5818 0350 504E475F 		.string	"PNG_TRANSFORM_STRIP_FILLER: BEFORE+AFTER not supported"
 5818      5452414E 
 5818      53464F52 
 5818      4D5F5354 
 5818      5249505F 
 5819              		.section	.text.unlikely.png_write_png,"ax",@progbits
 5820              	.LCOLDB64:
 5821              		.section	.text.png_write_png,"ax",@progbits
 5822              	.LHOTB64:
 5823              		.p2align 4,,15
 5824              		.globl	png_write_png
 5826              	png_write_png:
 5827              	.LFB89:
1562:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL || info_ptr == NULL)
 5828              		.loc 1 1562 0
 5829              		.cfi_startproc
 5830              	.LVL569:
1563:fltk-1.3.4-1/png/pngwrite.c ****       return;
 5831              		.loc 1 1563 0
 5832 0000 4885FF   		testq	%rdi, %rdi
 5833 0003 0F84B700 		je	.L797
 5833      0000
 5834 0009 4885F6   		testq	%rsi, %rsi
 5835 000c 0F84AE00 		je	.L797
 5835      0000
1566:fltk-1.3.4-1/png/pngwrite.c ****    {
 5836              		.loc 1 1566 0
 5837 0012 F6460980 		testb	$-128, 9(%rsi)
 5838 0016 0F84AC00 		je	.L798
 5838      0000
1562:fltk-1.3.4-1/png/pngwrite.c ****    if (png_ptr == NULL || info_ptr == NULL)
 5839              		.loc 1 1562 0
 5840 001c 4154     		pushq	%r12
 5841              		.cfi_def_cfa_offset 16
 5842              		.cfi_offset 12, -16
 5843 001e 55       		pushq	%rbp
 5844              		.cfi_def_cfa_offset 24
 5845              		.cfi_offset 6, -24
 5846 001f 4989F4   		movq	%rsi, %r12
 5847 0022 53       		pushq	%rbx
 5848              		.cfi_def_cfa_offset 32
 5849              		.cfi_offset 3, -32
 5850 0023 89D3     		movl	%edx, %ebx
 5851 0025 4889FD   		movq	%rdi, %rbp
 5852              	.LVL570:
 5853              	.LBB285:
 5854              	.LBB286:
 5855 0028 E8000000 		call	png_write_info.part.7
 5855      00
 5856              	.LVL571:
 5857              	.LBE286:
 5858              	.LBE285:
1578:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_INVERT_SUPPORTED
 5859              		.loc 1 1578 0
 5860 002d F6C320   		testb	$32, %bl
 5861 0030 0F85D200 		jne	.L799
 5861      0000
 5862              	.L749:
1588:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_SHIFT_SUPPORTED
 5863              		.loc 1 1588 0
 5864 0036 F6C340   		testb	$64, %bl
 5865 0039 740C     		je	.L750
1590:fltk-1.3.4-1/png/pngwrite.c ****          png_set_shift(png_ptr, &info_ptr->sig_bit);
 5866              		.loc 1 1590 0
 5867 003b 41F64424 		testb	$2, 8(%r12)
 5867      0802
 5868 0041 0F85A900 		jne	.L800
 5868      0000
 5869              	.L750:
1597:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_PACK_SUPPORTED
 5870              		.loc 1 1597 0
 5871 0047 F6C304   		testb	$4, %bl
 5872 004a 0F85D800 		jne	.L801
 5872      0000
 5873              	.L751:
1605:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_SWAP_ALPHA_SUPPORTED
 5874              		.loc 1 1605 0
 5875 0050 F6C701   		testb	$1, %bh
 5876 0053 0F85BF00 		jne	.L802
 5876      0000
 5877              	.L752:
1616:fltk-1.3.4-1/png/pngwrite.c ****       PNG_TRANSFORM_STRIP_FILLER_BEFORE)) != 0)
 5878              		.loc 1 1616 0
 5879 0059 F6C718   		testb	$24, %bh
 5880 005c 741D     		je	.L753
1620:fltk-1.3.4-1/png/pngwrite.c ****       {
 5881              		.loc 1 1620 0
 5882 005e F6C710   		testb	$16, %bh
 5883 0061 7475     		je	.L754
1622:fltk-1.3.4-1/png/pngwrite.c ****             png_app_error(png_ptr,
 5884              		.loc 1 1622 0
 5885 0063 F6C708   		testb	$8, %bh
 5886 0066 0F850C01 		jne	.L803
 5886      0000
 5887              	.L755:
1627:fltk-1.3.4-1/png/pngwrite.c ****       }
 5888              		.loc 1 1627 0
 5889 006c BA010000 		movl	$1, %edx
 5889      00
 5890 0071 31F6     		xorl	%esi, %esi
 5891 0073 4889EF   		movq	%rbp, %rdi
 5892 0076 E8000000 		call	png_set_filler
 5892      00
 5893              	.LVL572:
 5894              	.L753:
1638:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_BGR_SUPPORTED
 5895              		.loc 1 1638 0
 5896 007b F6C380   		testb	$-128, %bl
 5897 007e 0F85E400 		jne	.L804
 5897      0000
 5898              	.L756:
1646:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_SWAP_SUPPORTED
 5899              		.loc 1 1646 0
 5900 0084 F6C702   		testb	$2, %bh
 5901 0087 0F85CB00 		jne	.L805
 5901      0000
 5902              	.L757:
1654:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_PACKSWAP_SUPPORTED
 5903              		.loc 1 1654 0
 5904 008d F6C308   		testb	$8, %bl
 5905 0090 0F85B200 		jne	.L806
 5905      0000
 5906              	.L758:
1662:fltk-1.3.4-1/png/pngwrite.c **** #ifdef PNG_WRITE_INVERT_ALPHA_SUPPORTED
 5907              		.loc 1 1662 0
 5908 0096 80E704   		andb	$4, %bh
 5909              	.LVL573:
 5910 0099 0F859900 		jne	.L807
 5910      0000
 5911              	.L759:
1672:fltk-1.3.4-1/png/pngwrite.c **** 
 5912              		.loc 1 1672 0
 5913 009f 498BB424 		movq	336(%r12), %rsi
 5913      50010000 
 5914 00a7 4889EF   		movq	%rbp, %rdi
 5915 00aa E8000000 		call	png_write_image
 5915      00
 5916              	.LVL574:
1678:fltk-1.3.4-1/png/pngwrite.c **** #endif
 5917              		.loc 1 1678 0
 5918 00af 5B       		popq	%rbx
 5919              		.cfi_restore 3
 5920              		.cfi_def_cfa_offset 24
1675:fltk-1.3.4-1/png/pngwrite.c **** 
 5921              		.loc 1 1675 0
 5922 00b0 4C89E6   		movq	%r12, %rsi
 5923 00b3 4889EF   		movq	%rbp, %rdi
1678:fltk-1.3.4-1/png/pngwrite.c **** #endif
 5924              		.loc 1 1678 0
 5925 00b6 5D       		popq	%rbp
 5926              		.cfi_restore 6
 5927              		.cfi_def_cfa_offset 16
 5928              	.LVL575:
 5929 00b7 415C     		popq	%r12
 5930              		.cfi_restore 12
 5931              		.cfi_def_cfa_offset 8
 5932              	.LVL576:
1675:fltk-1.3.4-1/png/pngwrite.c **** 
 5933              		.loc 1 1675 0
 5934 00b9 E9000000 		jmp	png_write_end
 5934      00
 5935              	.LVL577:
 5936 00be 6690     		.p2align 4,,10
 5937              		.p2align 3
 5938              	.L797:
 5939 00c0 F3C3     		rep ret
 5940              		.p2align 4,,10
 5941 00c2 660F1F44 		.p2align 3
 5941      0000
 5942              	.L798:
1568:fltk-1.3.4-1/png/pngwrite.c ****       return;
 5943              		.loc 1 1568 0
 5944 00c8 BE000000 		movl	$.LC62, %esi
 5944      00
 5945              	.LVL578:
 5946 00cd E9000000 		jmp	png_app_error
 5946      00
 5947              	.LVL579:
 5948              		.p2align 4,,10
 5949 00d2 660F1F44 		.p2align 3
 5949      0000
 5950              	.L754:
 5951              		.cfi_def_cfa_offset 32
 5952              		.cfi_offset 3, -32
 5953              		.cfi_offset 6, -24
 5954              		.cfi_offset 12, -16
1630:fltk-1.3.4-1/png/pngwrite.c ****          png_set_filler(png_ptr, 0, PNG_FILLER_BEFORE);
 5955              		.loc 1 1630 0
 5956 00d8 F6C708   		testb	$8, %bh
 5957 00db 749E     		je	.L753
1631:fltk-1.3.4-1/png/pngwrite.c **** #else
 5958              		.loc 1 1631 0
 5959 00dd 31D2     		xorl	%edx, %edx
 5960 00df 31F6     		xorl	%esi, %esi
 5961 00e1 4889EF   		movq	%rbp, %rdi
 5962 00e4 E8000000 		call	png_set_filler
 5962      00
 5963              	.LVL580:
 5964 00e9 EB90     		jmp	.L753
 5965 00eb 0F1F4400 		.p2align 4,,10
 5965      00
 5966              		.p2align 3
 5967              	.L800:
1591:fltk-1.3.4-1/png/pngwrite.c **** #else
 5968              		.loc 1 1591 0
 5969 00f0 498DB424 		leaq	176(%r12), %rsi
 5969      B0000000 
 5970 00f8 4889EF   		movq	%rbp, %rdi
 5971 00fb E8000000 		call	png_set_shift
 5971      00
 5972              	.LVL581:
 5973 0100 E942FFFF 		jmp	.L750
 5973      FF
 5974              		.p2align 4,,10
 5975 0105 0F1F00   		.p2align 3
 5976              	.L799:
1580:fltk-1.3.4-1/png/pngwrite.c **** #else
 5977              		.loc 1 1580 0
 5978 0108 4889EF   		movq	%rbp, %rdi
 5979 010b E8000000 		call	png_set_invert_mono
 5979      00
 5980              	.LVL582:
 5981 0110 E921FFFF 		jmp	.L749
 5981      FF
 5982              		.p2align 4,,10
 5983 0115 0F1F00   		.p2align 3
 5984              	.L802:
1607:fltk-1.3.4-1/png/pngwrite.c **** #else
 5985              		.loc 1 1607 0
 5986 0118 4889EF   		movq	%rbp, %rdi
 5987 011b E8000000 		call	png_set_swap_alpha
 5987      00
 5988              	.LVL583:
 5989 0120 E934FFFF 		jmp	.L752
 5989      FF
 5990              		.p2align 4,,10
 5991 0125 0F1F00   		.p2align 3
 5992              	.L801:
1599:fltk-1.3.4-1/png/pngwrite.c **** #else
 5993              		.loc 1 1599 0
 5994 0128 4889EF   		movq	%rbp, %rdi
 5995 012b E8000000 		call	png_set_packing
 5995      00
 5996              	.LVL584:
 5997 0130 E91BFFFF 		jmp	.L751
 5997      FF
 5998              	.LVL585:
 5999              		.p2align 4,,10
 6000 0135 0F1F00   		.p2align 3
 6001              	.L807:
1664:fltk-1.3.4-1/png/pngwrite.c **** #else
 6002              		.loc 1 1664 0
 6003 0138 4889EF   		movq	%rbp, %rdi
 6004 013b E8000000 		call	png_set_invert_alpha
 6004      00
 6005              	.LVL586:
 6006 0140 E95AFFFF 		jmp	.L759
 6006      FF
 6007              	.LVL587:
 6008              		.p2align 4,,10
 6009 0145 0F1F00   		.p2align 3
 6010              	.L806:
1656:fltk-1.3.4-1/png/pngwrite.c **** #else
 6011              		.loc 1 1656 0
 6012 0148 4889EF   		movq	%rbp, %rdi
 6013 014b E8000000 		call	png_set_packswap
 6013      00
 6014              	.LVL588:
 6015 0150 E941FFFF 		jmp	.L758
 6015      FF
 6016              		.p2align 4,,10
 6017 0155 0F1F00   		.p2align 3
 6018              	.L805:
1648:fltk-1.3.4-1/png/pngwrite.c **** #else
 6019              		.loc 1 1648 0
 6020 0158 4889EF   		movq	%rbp, %rdi
 6021 015b E8000000 		call	png_set_swap
 6021      00
 6022              	.LVL589:
 6023 0160 E928FFFF 		jmp	.L757
 6023      FF
 6024              		.p2align 4,,10
 6025 0165 0F1F00   		.p2align 3
 6026              	.L804:
1640:fltk-1.3.4-1/png/pngwrite.c **** #else
 6027              		.loc 1 1640 0
 6028 0168 4889EF   		movq	%rbp, %rdi
 6029 016b E8000000 		call	png_set_bgr
 6029      00
 6030              	.LVL590:
 6031 0170 E90FFFFF 		jmp	.L756
 6031      FF
 6032              		.p2align 4,,10
 6033 0175 0F1F00   		.p2align 3
 6034              	.L803:
1623:fltk-1.3.4-1/png/pngwrite.c ****                "PNG_TRANSFORM_STRIP_FILLER: BEFORE+AFTER not supported");
 6035              		.loc 1 1623 0
 6036 0178 BE000000 		movl	$.LC63, %esi
 6036      00
 6037 017d 4889EF   		movq	%rbp, %rdi
 6038 0180 E8000000 		call	png_app_error
 6038      00
 6039              	.LVL591:
 6040 0185 E9E2FEFF 		jmp	.L755
 6040      FF
 6041              		.cfi_endproc
 6042              	.LFE89:
 6044              		.section	.text.unlikely.png_write_png
 6045              	.LCOLDE64:
 6046              		.section	.text.png_write_png
 6047              	.LHOTE64:
 6048              		.section	.rodata.str1.1
 6049              	.LC65:
 6050 0038 312E362E 		.string	"1.6.16"
 6050      313600
 6051              		.section	.rodata.str1.8
 6052 0387 00       		.align 8
 6053              	.LC66:
 6054 0388 706E675F 		.string	"png_image_write_: out of memory"
 6054      696D6167 
 6054      655F7772 
 6054      6974655F 
 6054      3A206F75 
 6055              		.align 8
 6056              	.LC67:
 6057 03a8 706E675F 		.string	"png_image_write_to_stdio: invalid argument"
 6057      696D6167 
 6057      655F7772 
 6057      6974655F 
 6057      746F5F73 
 6058 03d3 00000000 		.align 8
 6058      00
 6059              	.LC68:
 6060 03d8 706E675F 		.string	"png_image_write_to_stdio: incorrect PNG_IMAGE_VERSION"
 6060      696D6167 
 6060      655F7772 
 6060      6974655F 
 6060      746F5F73 
 6061              		.section	.text.unlikely.png_image_write_to_stdio,"ax",@progbits
 6062              	.LCOLDB69:
 6063              		.section	.text.png_image_write_to_stdio,"ax",@progbits
 6064              	.LHOTB69:
 6065              		.p2align 4,,15
 6066              		.globl	png_image_write_to_stdio
 6068              	png_image_write_to_stdio:
 6069              	.LFB96:
2337:fltk-1.3.4-1/png/pngwrite.c **** 
2338:fltk-1.3.4-1/png/pngwrite.c **** int PNGAPI
2339:fltk-1.3.4-1/png/pngwrite.c **** png_image_write_to_stdio(png_imagep image, FILE *file, int convert_to_8bit,
2340:fltk-1.3.4-1/png/pngwrite.c ****    const void *buffer, png_int_32 row_stride, const void *colormap)
2341:fltk-1.3.4-1/png/pngwrite.c **** {
 6070              		.loc 1 2341 0
 6071              		.cfi_startproc
 6072              	.LVL592:
 6073 0000 4157     		pushq	%r15
 6074              		.cfi_def_cfa_offset 16
 6075              		.cfi_offset 15, -16
 6076 0002 4156     		pushq	%r14
 6077              		.cfi_def_cfa_offset 24
 6078              		.cfi_offset 14, -24
 6079 0004 4155     		pushq	%r13
 6080              		.cfi_def_cfa_offset 32
 6081              		.cfi_offset 13, -32
 6082 0006 4154     		pushq	%r12
 6083              		.cfi_def_cfa_offset 40
 6084              		.cfi_offset 12, -40
 6085 0008 55       		pushq	%rbp
 6086              		.cfi_def_cfa_offset 48
 6087              		.cfi_offset 6, -48
 6088 0009 53       		pushq	%rbx
 6089              		.cfi_def_cfa_offset 56
 6090              		.cfi_offset 3, -56
 6091 000a 4883EC68 		subq	$104, %rsp
 6092              		.cfi_def_cfa_offset 160
 6093              		.loc 1 2341 0
 6094 000e 64488B04 		movq	%fs:40, %rax
 6094      25280000 
 6094      00
 6095 0017 48894424 		movq	%rax, 88(%rsp)
 6095      58
 6096 001c 31C0     		xorl	%eax, %eax
2342:fltk-1.3.4-1/png/pngwrite.c ****    /* Write the image to the given (FILE*). */
2343:fltk-1.3.4-1/png/pngwrite.c ****    if (image != NULL && image->version == PNG_IMAGE_VERSION)
 6097              		.loc 1 2343 0
 6098 001e 4885FF   		testq	%rdi, %rdi
 6099 0021 746D     		je	.L817
 6100              		.loc 1 2343 0 is_stmt 0 discriminator 1
 6101 0023 837F0801 		cmpl	$1, 8(%rdi)
 6102 0027 4889FB   		movq	%rdi, %rbx
 6103 002a 746C     		je	.L829
2344:fltk-1.3.4-1/png/pngwrite.c ****    {
2345:fltk-1.3.4-1/png/pngwrite.c ****       if (file != NULL)
2346:fltk-1.3.4-1/png/pngwrite.c ****       {
2347:fltk-1.3.4-1/png/pngwrite.c ****          if (png_image_write_init(image) != 0)
2348:fltk-1.3.4-1/png/pngwrite.c ****          {
2349:fltk-1.3.4-1/png/pngwrite.c ****             png_image_write_control display;
2350:fltk-1.3.4-1/png/pngwrite.c ****             int result;
2351:fltk-1.3.4-1/png/pngwrite.c **** 
2352:fltk-1.3.4-1/png/pngwrite.c ****             /* This is slightly evil, but png_init_io doesn't do anything other
2353:fltk-1.3.4-1/png/pngwrite.c ****              * than this and we haven't changed the standard IO functions so
2354:fltk-1.3.4-1/png/pngwrite.c ****              * this saves a 'safe' function.
2355:fltk-1.3.4-1/png/pngwrite.c ****              */
2356:fltk-1.3.4-1/png/pngwrite.c ****             image->opaque->png_ptr->io_ptr = file;
2357:fltk-1.3.4-1/png/pngwrite.c **** 
2358:fltk-1.3.4-1/png/pngwrite.c ****             memset(&display, 0, (sizeof display));
2359:fltk-1.3.4-1/png/pngwrite.c ****             display.image = image;
2360:fltk-1.3.4-1/png/pngwrite.c ****             display.buffer = buffer;
2361:fltk-1.3.4-1/png/pngwrite.c ****             display.row_stride = row_stride;
2362:fltk-1.3.4-1/png/pngwrite.c ****             display.colormap = colormap;
2363:fltk-1.3.4-1/png/pngwrite.c ****             display.convert_to_8bit = convert_to_8bit;
2364:fltk-1.3.4-1/png/pngwrite.c **** 
2365:fltk-1.3.4-1/png/pngwrite.c ****             result = png_safe_execute(image, png_image_write_main, &display);
2366:fltk-1.3.4-1/png/pngwrite.c ****             png_image_free(image);
2367:fltk-1.3.4-1/png/pngwrite.c ****             return result;
2368:fltk-1.3.4-1/png/pngwrite.c ****          }
2369:fltk-1.3.4-1/png/pngwrite.c **** 
2370:fltk-1.3.4-1/png/pngwrite.c ****          else
2371:fltk-1.3.4-1/png/pngwrite.c ****             return 0;
2372:fltk-1.3.4-1/png/pngwrite.c ****       }
2373:fltk-1.3.4-1/png/pngwrite.c **** 
2374:fltk-1.3.4-1/png/pngwrite.c ****       else
2375:fltk-1.3.4-1/png/pngwrite.c ****          return png_image_error(image,
2376:fltk-1.3.4-1/png/pngwrite.c ****             "png_image_write_to_stdio: invalid argument");
2377:fltk-1.3.4-1/png/pngwrite.c ****    }
2378:fltk-1.3.4-1/png/pngwrite.c **** 
2379:fltk-1.3.4-1/png/pngwrite.c ****    else if (image != NULL)
2380:fltk-1.3.4-1/png/pngwrite.c ****       return png_image_error(image,
 6104              		.loc 1 2380 0 is_stmt 1
 6105 002c BE000000 		movl	$.LC68, %esi
 6105      00
 6106              	.LVL593:
 6107 0031 E8000000 		call	png_image_error
 6107      00
 6108              	.LVL594:
 6109              	.L810:
2381:fltk-1.3.4-1/png/pngwrite.c ****          "png_image_write_to_stdio: incorrect PNG_IMAGE_VERSION");
2382:fltk-1.3.4-1/png/pngwrite.c **** 
2383:fltk-1.3.4-1/png/pngwrite.c ****    else
2384:fltk-1.3.4-1/png/pngwrite.c ****       return 0;
2385:fltk-1.3.4-1/png/pngwrite.c **** }
 6110              		.loc 1 2385 0 discriminator 1
 6111 0036 488B7424 		movq	88(%rsp), %rsi
 6111      58
 6112 003b 64483334 		xorq	%fs:40, %rsi
 6112      25280000 
 6112      00
 6113 0044 0F856501 		jne	.L830
 6113      0000
 6114              		.loc 1 2385 0 is_stmt 0
 6115 004a 4883C468 		addq	$104, %rsp
 6116              		.cfi_remember_state
 6117              		.cfi_def_cfa_offset 56
 6118 004e 5B       		popq	%rbx
 6119              		.cfi_def_cfa_offset 48
 6120 004f 5D       		popq	%rbp
 6121              		.cfi_def_cfa_offset 40
 6122 0050 415C     		popq	%r12
 6123              		.cfi_def_cfa_offset 32
 6124 0052 415D     		popq	%r13
 6125              		.cfi_def_cfa_offset 24
 6126 0054 415E     		popq	%r14
 6127              		.cfi_def_cfa_offset 16
 6128 0056 415F     		popq	%r15
 6129              		.cfi_def_cfa_offset 8
 6130 0058 C3       		ret
 6131              	.LVL595:
 6132 0059 0F1F8000 		.p2align 4,,10
 6132      000000
 6133              		.p2align 3
 6134              	.L815:
 6135              		.cfi_restore_state
 6136              	.LBB300:
 6137              	.LBB301:
 6138              	.LBB302:
 6139              	.LBB303:
1713:fltk-1.3.4-1/png/pngwrite.c ****       }
 6140              		.loc 1 1713 0 is_stmt 1
 6141 0060 488B7C24 		movq	8(%rsp), %rdi
 6141      08
 6142 0065 488D7424 		leaq	16(%rsp), %rsi
 6142      10
 6143 006a E8000000 		call	png_destroy_info_struct
 6143      00
 6144              	.LVL596:
 6145              	.L814:
 6146              	.LBE303:
1716:fltk-1.3.4-1/png/pngwrite.c ****    }
 6147              		.loc 1 1716 0
 6148 006f 488D7C24 		leaq	8(%rsp), %rdi
 6148      08
 6149 0074 31F6     		xorl	%esi, %esi
 6150 0076 E8000000 		call	png_destroy_write_struct
 6150      00
 6151              	.LVL597:
 6152              	.L813:
 6153              	.LBE302:
1719:fltk-1.3.4-1/png/pngwrite.c **** }
 6154              		.loc 1 1719 0
 6155 007b BE000000 		movl	$.LC66, %esi
 6155      00
 6156 0080 4889DF   		movq	%rbx, %rdi
 6157 0083 E8000000 		call	png_image_error
 6157      00
 6158              	.LVL598:
 6159              	.LBE301:
 6160              	.LBE300:
2347:fltk-1.3.4-1/png/pngwrite.c ****          {
 6161              		.loc 1 2347 0
 6162 0088 85C0     		testl	%eax, %eax
 6163 008a 0F852401 		jne	.L831
 6163      0000
 6164              	.LVL599:
 6165              	.L817:
2384:fltk-1.3.4-1/png/pngwrite.c **** }
 6166              		.loc 1 2384 0
 6167 0090 31C0     		xorl	%eax, %eax
 6168 0092 EBA2     		jmp	.L810
 6169              	.LVL600:
 6170              		.p2align 4,,10
 6171 0094 0F1F4000 		.p2align 3
 6172              	.L829:
2345:fltk-1.3.4-1/png/pngwrite.c ****       {
 6173              		.loc 1 2345 0
 6174 0098 4885F6   		testq	%rsi, %rsi
 6175 009b 4889F5   		movq	%rsi, %rbp
 6176 009e 0F84FC00 		je	.L812
 6176      0000
 6177              	.LBB311:
 6178              	.LBB310:
 6179              	.LBB307:
 6180              	.LBB308:
 488:fltk-1.3.4-1/png/pngwrite.c ****        warn_fn, NULL, NULL, NULL);
 6181              		.loc 1 488 0
 6182 00a4 4883EC08 		subq	$8, %rsp
 6183              		.cfi_def_cfa_offset 168
 6184 00a8 4889FE   		movq	%rdi, %rsi
 6185              	.LVL601:
 6186 00ab 4189D4   		movl	%edx, %r12d
 6187 00ae 6A00     		pushq	$0
 6188              		.cfi_def_cfa_offset 176
 6189 00b0 BA000000 		movl	$png_safe_error, %edx
 6189      00
 6190              	.LVL602:
 6191 00b5 4989CF   		movq	%rcx, %r15
 6192 00b8 4589C6   		movl	%r8d, %r14d
 6193 00bb B9000000 		movl	$png_safe_warning, %ecx
 6193      00
 6194              	.LVL603:
 6195 00c0 4531C0   		xorl	%r8d, %r8d
 6196              	.LVL604:
 6197 00c3 4D89CD   		movq	%r9, %r13
 6198              	.LVL605:
 6199 00c6 BF000000 		movl	$.LC65, %edi
 6199      00
 6200 00cb 4531C9   		xorl	%r9d, %r9d
 6201              	.LVL606:
 6202 00ce E8000000 		call	png_create_write_struct_2
 6202      00
 6203              	.LVL607:
 6204              	.LBE308:
 6205              	.LBE307:
1691:fltk-1.3.4-1/png/pngwrite.c ****    {
 6206              		.loc 1 1691 0
 6207 00d3 4885C0   		testq	%rax, %rax
1688:fltk-1.3.4-1/png/pngwrite.c ****           png_safe_error, png_safe_warning);
 6208              		.loc 1 1688 0
 6209 00d6 48894424 		movq	%rax, 24(%rsp)
 6209      18
1691:fltk-1.3.4-1/png/pngwrite.c ****    {
 6210              		.loc 1 1691 0
 6211 00db 5A       		popq	%rdx
 6212              		.cfi_def_cfa_offset 168
 6213 00dc 59       		popq	%rcx
 6214              		.cfi_def_cfa_offset 160
 6215 00dd 749C     		je	.L813
 6216              	.LBB309:
1693:fltk-1.3.4-1/png/pngwrite.c **** 
 6217              		.loc 1 1693 0
 6218 00df 4889C7   		movq	%rax, %rdi
 6219 00e2 E8000000 		call	png_create_info_struct
 6219      00
 6220              	.LVL608:
1695:fltk-1.3.4-1/png/pngwrite.c ****       {
 6221              		.loc 1 1695 0
 6222 00e7 4885C0   		testq	%rax, %rax
1693:fltk-1.3.4-1/png/pngwrite.c **** 
 6223              		.loc 1 1693 0
 6224 00ea 48894424 		movq	%rax, 16(%rsp)
 6224      10
1695:fltk-1.3.4-1/png/pngwrite.c ****       {
 6225              		.loc 1 1695 0
 6226 00ef 0F847AFF 		je	.L814
 6226      FFFF
 6227              	.LBB306:
1697:fltk-1.3.4-1/png/pngwrite.c ****             png_malloc_warn(png_ptr, (sizeof *control)));
 6228              		.loc 1 1697 0
 6229 00f5 488B7C24 		movq	8(%rsp), %rdi
 6229      08
 6230 00fa BE300000 		movl	$48, %esi
 6230      00
 6231 00ff E8000000 		call	png_malloc_warn
 6231      00
 6232              	.LVL609:
1700:fltk-1.3.4-1/png/pngwrite.c ****          {
 6233              		.loc 1 1700 0
 6234 0104 4885C0   		testq	%rax, %rax
1697:fltk-1.3.4-1/png/pngwrite.c ****             png_malloc_warn(png_ptr, (sizeof *control)));
 6235              		.loc 1 1697 0
 6236 0107 4889C2   		movq	%rax, %rdx
 6237              	.LVL610:
1700:fltk-1.3.4-1/png/pngwrite.c ****          {
 6238              		.loc 1 1700 0
 6239 010a 0F8450FF 		je	.L815
 6239      FFFF
 6240              	.LVL611:
 6241              	.LBB304:
 6242              	.LBB305:
 6243              		.loc 2 90 0
 6244 0110 488D7808 		leaq	8(%rax), %rdi
 6245 0114 4889C1   		movq	%rax, %rcx
 6246 0117 48C74028 		movq	$0, 40(%rax)
 6246      00000000 
 6247 011f 31C0     		xorl	%eax, %eax
 6248              	.LVL612:
 6249 0121 4883E7F8 		andq	$-8, %rdi
 6250 0125 4829F9   		subq	%rdi, %rcx
 6251 0128 83C130   		addl	$48, %ecx
 6252 012b C1E903   		shrl	$3, %ecx
 6253 012e F348AB   		rep stosq
 6254              	.LVL613:
 6255              	.LBE305:
 6256              	.LBE304:
1708:fltk-1.3.4-1/png/pngwrite.c ****             return 1;
 6257              		.loc 1 1708 0
 6258 0131 488913   		movq	%rdx, (%rbx)
 6259              	.LVL614:
1704:fltk-1.3.4-1/png/pngwrite.c ****             control->info_ptr = info_ptr;
 6260              		.loc 1 1704 0
 6261 0134 488B4424 		movq	8(%rsp), %rax
 6261      08
1705:fltk-1.3.4-1/png/pngwrite.c ****             control->for_write = 1;
 6262              		.loc 1 1705 0
 6263 0139 488B4C24 		movq	16(%rsp), %rcx
 6263      10
1706:fltk-1.3.4-1/png/pngwrite.c **** 
 6264              		.loc 1 1706 0
 6265 013e 804A2801 		orb	$1, 40(%rdx)
1704:fltk-1.3.4-1/png/pngwrite.c ****             control->info_ptr = info_ptr;
 6266              		.loc 1 1704 0
 6267 0142 488902   		movq	%rax, (%rdx)
1705:fltk-1.3.4-1/png/pngwrite.c ****             control->for_write = 1;
 6268              		.loc 1 1705 0
 6269 0145 48894A08 		movq	%rcx, 8(%rdx)
 6270              	.L816:
 6271              	.LVL615:
 6272              	.LBE306:
 6273              	.LBE309:
 6274              	.LBE310:
 6275              	.LBE311:
 6276              	.LBB312:
 6277              	.LBB313:
 6278              	.LBB314:
 6279              	.LBB315:
 6280              		.loc 2 90 0
 6281 0149 488D5424 		leaq	16(%rsp), %rdx
 6281      10
 6282              	.LBE315:
 6283              	.LBE314:
2356:fltk-1.3.4-1/png/pngwrite.c **** 
 6284              		.loc 1 2356 0
 6285 014e 4889A808 		movq	%rbp, 264(%rax)
 6285      010000
 6286              	.LVL616:
 6287              	.LBB318:
 6288              	.LBB316:
 6289              		.loc 2 90 0
 6290 0155 B9080000 		movl	$8, %ecx
 6290      00
 6291 015a 31C0     		xorl	%eax, %eax
 6292              	.LBE316:
 6293              	.LBE318:
2365:fltk-1.3.4-1/png/pngwrite.c ****             png_image_free(image);
 6294              		.loc 1 2365 0
 6295 015c BE000000 		movl	$png_image_write_main, %esi
 6295      00
 6296              	.LBB319:
 6297              	.LBB317:
 6298              		.loc 2 90 0
 6299 0161 4889D7   		movq	%rdx, %rdi
 6300 0164 F348AB   		rep stosq
 6301              	.LVL617:
 6302              	.LBE317:
 6303              	.LBE319:
2365:fltk-1.3.4-1/png/pngwrite.c ****             png_image_free(image);
 6304              		.loc 1 2365 0
 6305 0167 4889DF   		movq	%rbx, %rdi
2359:fltk-1.3.4-1/png/pngwrite.c ****             display.buffer = buffer;
 6306              		.loc 1 2359 0
 6307 016a 48895C24 		movq	%rbx, 16(%rsp)
 6307      10
2360:fltk-1.3.4-1/png/pngwrite.c ****             display.row_stride = row_stride;
 6308              		.loc 1 2360 0
 6309 016f 4C897C24 		movq	%r15, 24(%rsp)
 6309      18
2361:fltk-1.3.4-1/png/pngwrite.c ****             display.colormap = colormap;
 6310              		.loc 1 2361 0
 6311 0174 44897424 		movl	%r14d, 32(%rsp)
 6311      20
2362:fltk-1.3.4-1/png/pngwrite.c ****             display.convert_to_8bit = convert_to_8bit;
 6312              		.loc 1 2362 0
 6313 0179 4C896C24 		movq	%r13, 40(%rsp)
 6313      28
2363:fltk-1.3.4-1/png/pngwrite.c **** 
 6314              		.loc 1 2363 0
 6315 017e 44896424 		movl	%r12d, 48(%rsp)
 6315      30
2365:fltk-1.3.4-1/png/pngwrite.c ****             png_image_free(image);
 6316              		.loc 1 2365 0
 6317 0183 E8000000 		call	png_safe_execute
 6317      00
 6318              	.LVL618:
2366:fltk-1.3.4-1/png/pngwrite.c ****             return result;
 6319              		.loc 1 2366 0
 6320 0188 4889DF   		movq	%rbx, %rdi
2365:fltk-1.3.4-1/png/pngwrite.c ****             png_image_free(image);
 6321              		.loc 1 2365 0
 6322 018b 89C5     		movl	%eax, %ebp
 6323              	.LVL619:
2366:fltk-1.3.4-1/png/pngwrite.c ****             return result;
 6324              		.loc 1 2366 0
 6325 018d E8000000 		call	png_image_free
 6325      00
 6326              	.LVL620:
 6327 0192 89E8     		movl	%ebp, %eax
 6328 0194 E99DFEFF 		jmp	.L810
 6328      FF
 6329              	.LVL621:
 6330 0199 0F1F8000 		.p2align 4,,10
 6330      000000
 6331              		.p2align 3
 6332              	.L812:
 6333              	.LBE313:
 6334              	.LBE312:
2375:fltk-1.3.4-1/png/pngwrite.c ****             "png_image_write_to_stdio: invalid argument");
 6335              		.loc 1 2375 0
 6336 01a0 BE000000 		movl	$.LC67, %esi
 6336      00
 6337              	.LVL622:
 6338 01a5 E8000000 		call	png_image_error
 6338      00
 6339              	.LVL623:
 6340 01aa E987FEFF 		jmp	.L810
 6340      FF
 6341              	.LVL624:
 6342              	.L830:
 6343              		.loc 1 2385 0
 6344 01af E8000000 		call	__stack_chk_fail
 6344      00
 6345              	.LVL625:
 6346              	.L831:
 6347 01b4 488B03   		movq	(%rbx), %rax
 6348 01b7 488B00   		movq	(%rax), %rax
 6349 01ba EB8D     		jmp	.L816
 6350              		.cfi_endproc
 6351              	.LFE96:
 6353              		.section	.text.unlikely.png_image_write_to_stdio
 6354              	.LCOLDE69:
 6355              		.section	.text.png_image_write_to_stdio
 6356              	.LHOTE69:
 6357              		.section	.rodata.str1.1
 6358              	.LC70:
 6359 003f 776200   		.string	"wb"
 6360              		.section	.rodata.str1.8
 6361 040e 0000     		.align 8
 6362              	.LC71:
 6363 0410 706E675F 		.string	"png_image_write_to_file: invalid argument"
 6363      696D6167 
 6363      655F7772 
 6363      6974655F 
 6363      746F5F66 
 6364 043a 00000000 		.align 8
 6364      0000
 6365              	.LC72:
 6366 0440 706E675F 		.string	"png_image_write_to_file: incorrect PNG_IMAGE_VERSION"
 6366      696D6167 
 6366      655F7772 
 6366      6974655F 
 6366      746F5F66 
 6367              		.section	.text.unlikely.png_image_write_to_file,"ax",@progbits
 6368              	.LCOLDB73:
 6369              		.section	.text.png_image_write_to_file,"ax",@progbits
 6370              	.LHOTB73:
 6371              		.p2align 4,,15
 6372              		.globl	png_image_write_to_file
 6374              	png_image_write_to_file:
 6375              	.LFB97:
2386:fltk-1.3.4-1/png/pngwrite.c **** 
2387:fltk-1.3.4-1/png/pngwrite.c **** int PNGAPI
2388:fltk-1.3.4-1/png/pngwrite.c **** png_image_write_to_file(png_imagep image, const char *file_name,
2389:fltk-1.3.4-1/png/pngwrite.c ****    int convert_to_8bit, const void *buffer, png_int_32 row_stride,
2390:fltk-1.3.4-1/png/pngwrite.c ****    const void *colormap)
2391:fltk-1.3.4-1/png/pngwrite.c **** {
 6376              		.loc 1 2391 0
 6377              		.cfi_startproc
 6378              	.LVL626:
 6379 0000 4157     		pushq	%r15
 6380              		.cfi_def_cfa_offset 16
 6381              		.cfi_offset 15, -16
 6382 0002 4156     		pushq	%r14
 6383              		.cfi_def_cfa_offset 24
 6384              		.cfi_offset 14, -24
 6385 0004 4155     		pushq	%r13
 6386              		.cfi_def_cfa_offset 32
 6387              		.cfi_offset 13, -32
 6388 0006 4154     		pushq	%r12
 6389              		.cfi_def_cfa_offset 40
 6390              		.cfi_offset 12, -40
 6391 0008 55       		pushq	%rbp
 6392              		.cfi_def_cfa_offset 48
 6393              		.cfi_offset 6, -48
 6394 0009 53       		pushq	%rbx
 6395              		.cfi_def_cfa_offset 56
 6396              		.cfi_offset 3, -56
 6397 000a 4883EC18 		subq	$24, %rsp
 6398              		.cfi_def_cfa_offset 80
2392:fltk-1.3.4-1/png/pngwrite.c ****    /* Write the image to the named file. */
2393:fltk-1.3.4-1/png/pngwrite.c ****    if (image != NULL && image->version == PNG_IMAGE_VERSION)
 6399              		.loc 1 2393 0
 6400 000e 4885FF   		testq	%rdi, %rdi
 6401 0011 0F84C100 		je	.L840
 6401      0000
 6402              		.loc 1 2393 0 is_stmt 0 discriminator 1
 6403 0017 837F0801 		cmpl	$1, 8(%rdi)
 6404 001b 741B     		je	.L844
2394:fltk-1.3.4-1/png/pngwrite.c ****    {
2395:fltk-1.3.4-1/png/pngwrite.c ****       if (file_name != NULL)
2396:fltk-1.3.4-1/png/pngwrite.c ****       {
2397:fltk-1.3.4-1/png/pngwrite.c ****          FILE *fp = fopen(file_name, "wb");
2398:fltk-1.3.4-1/png/pngwrite.c **** 
2399:fltk-1.3.4-1/png/pngwrite.c ****          if (fp != NULL)
2400:fltk-1.3.4-1/png/pngwrite.c ****          {
2401:fltk-1.3.4-1/png/pngwrite.c ****             if (png_image_write_to_stdio(image, fp, convert_to_8bit, buffer,
2402:fltk-1.3.4-1/png/pngwrite.c ****                row_stride, colormap) != 0)
2403:fltk-1.3.4-1/png/pngwrite.c ****             {
2404:fltk-1.3.4-1/png/pngwrite.c ****                int error; /* from fflush/fclose */
2405:fltk-1.3.4-1/png/pngwrite.c **** 
2406:fltk-1.3.4-1/png/pngwrite.c ****                /* Make sure the file is flushed correctly. */
2407:fltk-1.3.4-1/png/pngwrite.c ****                if (fflush(fp) == 0 && ferror(fp) == 0)
2408:fltk-1.3.4-1/png/pngwrite.c ****                {
2409:fltk-1.3.4-1/png/pngwrite.c ****                   if (fclose(fp) == 0)
2410:fltk-1.3.4-1/png/pngwrite.c ****                      return 1;
2411:fltk-1.3.4-1/png/pngwrite.c **** 
2412:fltk-1.3.4-1/png/pngwrite.c ****                   error = errno; /* from fclose */
2413:fltk-1.3.4-1/png/pngwrite.c ****                }
2414:fltk-1.3.4-1/png/pngwrite.c **** 
2415:fltk-1.3.4-1/png/pngwrite.c ****                else
2416:fltk-1.3.4-1/png/pngwrite.c ****                {
2417:fltk-1.3.4-1/png/pngwrite.c ****                   error = errno; /* from fflush or ferror */
2418:fltk-1.3.4-1/png/pngwrite.c ****                   (void)fclose(fp);
2419:fltk-1.3.4-1/png/pngwrite.c ****                }
2420:fltk-1.3.4-1/png/pngwrite.c **** 
2421:fltk-1.3.4-1/png/pngwrite.c ****                (void)remove(file_name);
2422:fltk-1.3.4-1/png/pngwrite.c ****                /* The image has already been cleaned up; this is just used to
2423:fltk-1.3.4-1/png/pngwrite.c ****                 * set the error (because the original write succeeded).
2424:fltk-1.3.4-1/png/pngwrite.c ****                 */
2425:fltk-1.3.4-1/png/pngwrite.c ****                return png_image_error(image, strerror(error));
2426:fltk-1.3.4-1/png/pngwrite.c ****             }
2427:fltk-1.3.4-1/png/pngwrite.c **** 
2428:fltk-1.3.4-1/png/pngwrite.c ****             else
2429:fltk-1.3.4-1/png/pngwrite.c ****             {
2430:fltk-1.3.4-1/png/pngwrite.c ****                /* Clean up: just the opened file. */
2431:fltk-1.3.4-1/png/pngwrite.c ****                (void)fclose(fp);
2432:fltk-1.3.4-1/png/pngwrite.c ****                (void)remove(file_name);
2433:fltk-1.3.4-1/png/pngwrite.c ****                return 0;
2434:fltk-1.3.4-1/png/pngwrite.c ****             }
2435:fltk-1.3.4-1/png/pngwrite.c ****          }
2436:fltk-1.3.4-1/png/pngwrite.c **** 
2437:fltk-1.3.4-1/png/pngwrite.c ****          else
2438:fltk-1.3.4-1/png/pngwrite.c ****             return png_image_error(image, strerror(errno));
2439:fltk-1.3.4-1/png/pngwrite.c ****       }
2440:fltk-1.3.4-1/png/pngwrite.c **** 
2441:fltk-1.3.4-1/png/pngwrite.c ****       else
2442:fltk-1.3.4-1/png/pngwrite.c ****          return png_image_error(image,
2443:fltk-1.3.4-1/png/pngwrite.c ****             "png_image_write_to_file: invalid argument");
2444:fltk-1.3.4-1/png/pngwrite.c ****    }
2445:fltk-1.3.4-1/png/pngwrite.c **** 
2446:fltk-1.3.4-1/png/pngwrite.c ****    else if (image != NULL)
2447:fltk-1.3.4-1/png/pngwrite.c ****       return png_image_error(image,
 6405              		.loc 1 2447 0 is_stmt 1
 6406 001d BE000000 		movl	$.LC72, %esi
 6406      00
 6407              	.LVL627:
 6408              	.L843:
2448:fltk-1.3.4-1/png/pngwrite.c ****          "png_image_write_to_file: incorrect PNG_IMAGE_VERSION");
2449:fltk-1.3.4-1/png/pngwrite.c **** 
2450:fltk-1.3.4-1/png/pngwrite.c ****    else
2451:fltk-1.3.4-1/png/pngwrite.c ****       return 0;
2452:fltk-1.3.4-1/png/pngwrite.c **** }
 6409              		.loc 1 2452 0
 6410 0022 4883C418 		addq	$24, %rsp
 6411              		.cfi_remember_state
 6412              		.cfi_def_cfa_offset 56
 6413 0026 5B       		popq	%rbx
 6414              		.cfi_def_cfa_offset 48
 6415 0027 5D       		popq	%rbp
 6416              		.cfi_def_cfa_offset 40
 6417 0028 415C     		popq	%r12
 6418              		.cfi_def_cfa_offset 32
 6419 002a 415D     		popq	%r13
 6420              		.cfi_def_cfa_offset 24
 6421 002c 415E     		popq	%r14
 6422              		.cfi_def_cfa_offset 16
 6423 002e 415F     		popq	%r15
 6424              		.cfi_def_cfa_offset 8
2447:fltk-1.3.4-1/png/pngwrite.c ****          "png_image_write_to_file: incorrect PNG_IMAGE_VERSION");
 6425              		.loc 1 2447 0
 6426 0030 E9000000 		jmp	png_image_error
 6426      00
 6427              	.LVL628:
 6428              		.p2align 4,,10
 6429 0035 0F1F00   		.p2align 3
 6430              	.L844:
 6431              		.cfi_restore_state
2395:fltk-1.3.4-1/png/pngwrite.c ****       {
 6432              		.loc 1 2395 0
 6433 0038 4885F6   		testq	%rsi, %rsi
 6434 003b 0F84FF00 		je	.L835
 6434      0000
 6435 0041 4889F5   		movq	%rsi, %rbp
 6436 0044 4889FB   		movq	%rdi, %rbx
 6437              	.LBB320:
2397:fltk-1.3.4-1/png/pngwrite.c **** 
 6438              		.loc 1 2397 0
 6439 0047 BE000000 		movl	$.LC70, %esi
 6439      00
 6440              	.LVL629:
 6441 004c 4889EF   		movq	%rbp, %rdi
 6442              	.LVL630:
 6443 004f 4C894C24 		movq	%r9, 8(%rsp)
 6443      08
 6444 0054 4589C6   		movl	%r8d, %r14d
 6445 0057 4989CD   		movq	%rcx, %r13
 6446 005a 4189D4   		movl	%edx, %r12d
 6447 005d E8000000 		call	fopen
 6447      00
 6448              	.LVL631:
2399:fltk-1.3.4-1/png/pngwrite.c ****          {
 6449              		.loc 1 2399 0
 6450 0062 4885C0   		testq	%rax, %rax
2397:fltk-1.3.4-1/png/pngwrite.c **** 
 6451              		.loc 1 2397 0
 6452 0065 4989C7   		movq	%rax, %r15
 6453              	.LVL632:
2399:fltk-1.3.4-1/png/pngwrite.c ****          {
 6454              		.loc 1 2399 0
 6455 0068 0F849200 		je	.L836
 6455      0000
2401:fltk-1.3.4-1/png/pngwrite.c ****                row_stride, colormap) != 0)
 6456              		.loc 1 2401 0
 6457 006e 4C8B4C24 		movq	8(%rsp), %r9
 6457      08
 6458 0073 4489E2   		movl	%r12d, %edx
 6459 0076 4889DF   		movq	%rbx, %rdi
 6460 0079 4589F0   		movl	%r14d, %r8d
 6461 007c 4C89E9   		movq	%r13, %rcx
 6462 007f 4889C6   		movq	%rax, %rsi
 6463 0082 E8000000 		call	png_image_write_to_stdio
 6463      00
 6464              	.LVL633:
 6465 0087 85C0     		testl	%eax, %eax
 6466 0089 4189C4   		movl	%eax, %r12d
 6467              	.LVL634:
 6468              	.LBB321:
2407:fltk-1.3.4-1/png/pngwrite.c ****                {
 6469              		.loc 1 2407 0
 6470 008c 4C89FF   		movq	%r15, %rdi
 6471              	.LBE321:
2401:fltk-1.3.4-1/png/pngwrite.c ****                row_stride, colormap) != 0)
 6472              		.loc 1 2401 0
 6473 008f 745F     		je	.L837
 6474              	.LBB322:
2407:fltk-1.3.4-1/png/pngwrite.c ****                {
 6475              		.loc 1 2407 0
 6476 0091 E8000000 		call	fflush
 6476      00
 6477              	.LVL635:
 6478 0096 85C0     		testl	%eax, %eax
 6479 0098 750C     		jne	.L838
2407:fltk-1.3.4-1/png/pngwrite.c ****                {
 6480              		.loc 1 2407 0 is_stmt 0 discriminator 1
 6481 009a 4C89FF   		movq	%r15, %rdi
 6482 009d E8000000 		call	ferror
 6482      00
 6483              	.LVL636:
 6484 00a2 85C0     		testl	%eax, %eax
 6485 00a4 747A     		je	.L845
 6486              	.L838:
2417:fltk-1.3.4-1/png/pngwrite.c ****                   (void)fclose(fp);
 6487              		.loc 1 2417 0 is_stmt 1
 6488 00a6 E8000000 		call	__errno_location
 6488      00
 6489              	.LVL637:
2418:fltk-1.3.4-1/png/pngwrite.c ****                }
 6490              		.loc 1 2418 0
 6491 00ab 4C89FF   		movq	%r15, %rdi
2417:fltk-1.3.4-1/png/pngwrite.c ****                   (void)fclose(fp);
 6492              		.loc 1 2417 0
 6493 00ae 448B20   		movl	(%rax), %r12d
 6494              	.LVL638:
2418:fltk-1.3.4-1/png/pngwrite.c ****                }
 6495              		.loc 1 2418 0
 6496 00b1 E8000000 		call	fclose
 6496      00
 6497              	.LVL639:
 6498              	.L839:
2421:fltk-1.3.4-1/png/pngwrite.c ****                /* The image has already been cleaned up; this is just used to
 6499              		.loc 1 2421 0
 6500 00b6 4889EF   		movq	%rbp, %rdi
 6501 00b9 E8000000 		call	remove
 6501      00
 6502              	.LVL640:
2425:fltk-1.3.4-1/png/pngwrite.c ****             }
 6503              		.loc 1 2425 0
 6504 00be 4489E7   		movl	%r12d, %edi
 6505 00c1 E8000000 		call	strerror
 6505      00
 6506              	.LVL641:
 6507 00c6 4889DF   		movq	%rbx, %rdi
 6508 00c9 4889C6   		movq	%rax, %rsi
 6509 00cc E951FFFF 		jmp	.L843
 6509      FF
 6510              	.LVL642:
 6511              		.p2align 4,,10
 6512 00d1 0F1F8000 		.p2align 3
 6512      000000
 6513              	.L840:
 6514              	.LBE322:
 6515              	.LBE320:
2451:fltk-1.3.4-1/png/pngwrite.c **** }
 6516              		.loc 1 2451 0
 6517 00d8 4531E4   		xorl	%r12d, %r12d
 6518              	.LVL643:
 6519              	.L833:
 6520              		.loc 1 2452 0
 6521 00db 4883C418 		addq	$24, %rsp
 6522              		.cfi_remember_state
 6523              		.cfi_def_cfa_offset 56
 6524 00df 4489E0   		movl	%r12d, %eax
 6525 00e2 5B       		popq	%rbx
 6526              		.cfi_def_cfa_offset 48
 6527 00e3 5D       		popq	%rbp
 6528              		.cfi_def_cfa_offset 40
 6529 00e4 415C     		popq	%r12
 6530              		.cfi_def_cfa_offset 32
 6531 00e6 415D     		popq	%r13
 6532              		.cfi_def_cfa_offset 24
 6533 00e8 415E     		popq	%r14
 6534              		.cfi_def_cfa_offset 16
 6535 00ea 415F     		popq	%r15
 6536              		.cfi_def_cfa_offset 8
 6537 00ec C3       		ret
 6538              	.LVL644:
 6539 00ed 0F1F00   		.p2align 4,,10
 6540              		.p2align 3
 6541              	.L837:
 6542              		.cfi_restore_state
 6543              	.LBB325:
2431:fltk-1.3.4-1/png/pngwrite.c ****                (void)remove(file_name);
 6544              		.loc 1 2431 0
 6545 00f0 E8000000 		call	fclose
 6545      00
 6546              	.LVL645:
2432:fltk-1.3.4-1/png/pngwrite.c ****                return 0;
 6547              		.loc 1 2432 0
 6548 00f5 4889EF   		movq	%rbp, %rdi
 6549 00f8 E8000000 		call	remove
 6549      00
 6550              	.LVL646:
2433:fltk-1.3.4-1/png/pngwrite.c ****             }
 6551              		.loc 1 2433 0
 6552 00fd EBDC     		jmp	.L833
 6553              	.LVL647:
 6554 00ff 90       		.p2align 4,,10
 6555              		.p2align 3
 6556              	.L836:
2438:fltk-1.3.4-1/png/pngwrite.c ****       }
 6557              		.loc 1 2438 0
 6558 0100 E8000000 		call	__errno_location
 6558      00
 6559              	.LVL648:
 6560 0105 8B38     		movl	(%rax), %edi
 6561 0107 E8000000 		call	strerror
 6561      00
 6562              	.LVL649:
 6563 010c 4889DF   		movq	%rbx, %rdi
 6564 010f 4889C6   		movq	%rax, %rsi
 6565 0112 E90BFFFF 		jmp	.L843
 6565      FF
 6566              	.LVL650:
 6567 0117 660F1F84 		.p2align 4,,10
 6567      00000000 
 6567      00
 6568              		.p2align 3
 6569              	.L845:
 6570              	.LBB323:
2409:fltk-1.3.4-1/png/pngwrite.c ****                      return 1;
 6571              		.loc 1 2409 0
 6572 0120 4C89FF   		movq	%r15, %rdi
 6573 0123 E8000000 		call	fclose
 6573      00
 6574              	.LVL651:
 6575 0128 85C0     		testl	%eax, %eax
 6576 012a 741E     		je	.L841
2412:fltk-1.3.4-1/png/pngwrite.c ****                }
 6577              		.loc 1 2412 0
 6578 012c E8000000 		call	__errno_location
 6578      00
 6579              	.LVL652:
 6580 0131 448B20   		movl	(%rax), %r12d
 6581              	.LVL653:
 6582 0134 EB80     		jmp	.L839
 6583              	.LVL654:
 6584 0136 662E0F1F 		.p2align 4,,10
 6584      84000000 
 6584      0000
 6585              		.p2align 3
 6586              	.L835:
 6587              	.LBE323:
 6588              	.LBE325:
2442:fltk-1.3.4-1/png/pngwrite.c ****             "png_image_write_to_file: invalid argument");
 6589              		.loc 1 2442 0
 6590 0140 BE000000 		movl	$.LC71, %esi
 6590      00
 6591              	.LVL655:
 6592 0145 E9D8FEFF 		jmp	.L843
 6592      FF
 6593              	.LVL656:
 6594              	.L841:
 6595              	.LBB326:
 6596              	.LBB324:
2410:fltk-1.3.4-1/png/pngwrite.c **** 
 6597              		.loc 1 2410 0
 6598 014a 41BC0100 		movl	$1, %r12d
 6598      0000
 6599 0150 EB89     		jmp	.L833
 6600              	.LBE324:
 6601              	.LBE326:
 6602              		.cfi_endproc
 6603              	.LFE97:
 6605              		.section	.text.unlikely.png_image_write_to_file
 6606              	.LCOLDE73:
 6607              		.section	.text.png_image_write_to_file
 6608              	.LHOTE73:
 6609              		.section	.rodata.cst8,"aM",@progbits,8
 6610              		.align 8
 6611              	.LC41:
 6612 0000 00000000 		.long	0
 6613 0004 00007040 		.long	1081081856
 6614              		.align 8
 6615              	.LC42:
 6616 0008 00000000 		.long	0
 6617 000c 0000E03F 		.long	1071644672
 6618              		.align 8
 6619              	.LC43:
 6620 0010 00000000 		.long	0
 6621 0014 0000F03F 		.long	1072693248
 6622              		.align 8
 6623              	.LC44:
 6624 0018 00000000 		.long	0
 6625 001c 00002040 		.long	1075838976
 6626              		.text
 6627              	.Letext0:
 6628              		.section	.text.unlikely.png_reset_filter_heuristics
 6629              	.Letext_cold0:
 6630              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 6631              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 6632              		.file 5 "/usr/include/stdio.h"
 6633              		.file 6 "/usr/include/libio.h"
 6634              		.file 7 "/usr/include/x86_64-linux-gnu/bits/setjmp.h"
 6635              		.file 8 "/usr/include/x86_64-linux-gnu/bits/sigset.h"
 6636              		.file 9 "/usr/include/setjmp.h"
 6637              		.file 10 "/usr/include/time.h"
 6638              		.file 11 "fltk-1.3.4-1/png/pngconf.h"
 6639              		.file 12 "fltk-1.3.4-1/png/png.h"
 6640              		.file 13 "fltk-1.3.4-1/png/pngstruct.h"
 6641              		.file 14 "fltk-1.3.4-1/png/pnginfo.h"
 6642              		.file 15 "fltk-1.3.4-1/png/pngpriv.h"
 6643              		.file 16 "/usr/include/x86_64-linux-gnu/zconf.h"
 6644              		.file 17 "/usr/include/zlib.h"
 6645              		.file 18 "/usr/include/x86_64-linux-gnu/bits/errno.h"
 6646              		.file 19 "/usr/include/string.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 pngwrite.c
     /tmp/ccU70wA9.s:13     .text.png_reset_filter_heuristics:0000000000000000 png_reset_filter_heuristics
     /tmp/ccU70wA9.s:99     .text.png_unpremultiply.part.1:0000000000000000 png_unpremultiply.part.1
     /tmp/ccU70wA9.s:159    .text.write_unknown_chunks.isra.2.part.3:0000000000000000 write_unknown_chunks.isra.2.part.3
     /tmp/ccU70wA9.s:316    .text.png_init_filter_heuristics:0000000000000000 png_init_filter_heuristics
     /tmp/ccU70wA9.s:542    .text.png_image_set_PLTE.isra.5:0000000000000000 png_image_set_PLTE.isra.5
     /tmp/ccU70wA9.s:1302   .text.png_write_info_before_PLTE:0000000000000000 png_write_info_before_PLTE
     /tmp/ccU70wA9.s:1551   .text.png_write_info.part.7:0000000000000000 png_write_info.part.7
     /tmp/ccU70wA9.s:1959   .text.png_write_info:0000000000000000 png_write_info
     /tmp/ccU70wA9.s:1996   .text.png_write_end:0000000000000000 png_write_end
     /tmp/ccU70wA9.s:2218   .text.png_convert_from_struct_tm:0000000000000000 png_convert_from_struct_tm
     /tmp/ccU70wA9.s:2258   .text.png_convert_from_time_t:0000000000000000 png_convert_from_time_t
     /tmp/ccU70wA9.s:2324   .text.png_create_write_struct_2:0000000000000000 png_create_write_struct_2
     /tmp/ccU70wA9.s:2406   .text.png_create_write_struct:0000000000000000 png_create_write_struct
     /tmp/ccU70wA9.s:2445   .text.png_write_row:0000000000000000 png_write_row
     /tmp/ccU70wA9.s:2950   .text.png_write_rows:0000000000000000 png_write_rows
     /tmp/ccU70wA9.s:3020   .text.png_write_image:0000000000000000 png_write_image
     /tmp/ccU70wA9.s:3140   .text.png_write_image_8bit:0000000000000000 png_write_image_8bit
     /tmp/ccU70wA9.s:3538   .text.png_write_image_16bit:0000000000000000 png_write_image_16bit
     /tmp/ccU70wA9.s:3797   .text.png_set_flush:0000000000000000 png_set_flush
     /tmp/ccU70wA9.s:3827   .text.png_write_flush:0000000000000000 png_write_flush
     /tmp/ccU70wA9.s:3881   .text.png_destroy_write_struct:0000000000000000 png_destroy_write_struct
     /tmp/ccU70wA9.s:4081   .text.png_set_filter:0000000000000000 png_set_filter
     /tmp/ccU70wA9.s:4348   .text.png_image_write_main:0000000000000000 png_image_write_main
     /tmp/ccU70wA9.s:4971   .text.png_set_filter_heuristics:0000000000000000 png_set_filter_heuristics
     /tmp/ccU70wA9.s:5128   .text.png_set_filter_heuristics_fixed:0000000000000000 png_set_filter_heuristics_fixed
     /tmp/ccU70wA9.s:5308   .text.png_set_compression_level:0000000000000000 png_set_compression_level
     /tmp/ccU70wA9.s:5334   .text.png_set_compression_mem_level:0000000000000000 png_set_compression_mem_level
     /tmp/ccU70wA9.s:5360   .text.png_set_compression_strategy:0000000000000000 png_set_compression_strategy
     /tmp/ccU70wA9.s:5395   .text.png_set_compression_window_bits:0000000000000000 png_set_compression_window_bits
     /tmp/ccU70wA9.s:5486   .text.png_set_compression_method:0000000000000000 png_set_compression_method
     /tmp/ccU70wA9.s:5543   .text.png_set_text_compression_level:0000000000000000 png_set_text_compression_level
     /tmp/ccU70wA9.s:5569   .text.png_set_text_compression_mem_level:0000000000000000 png_set_text_compression_mem_level
     /tmp/ccU70wA9.s:5595   .text.png_set_text_compression_strategy:0000000000000000 png_set_text_compression_strategy
     /tmp/ccU70wA9.s:5621   .text.png_set_text_compression_window_bits:0000000000000000 png_set_text_compression_window_bits
     /tmp/ccU70wA9.s:5708   .text.png_set_text_compression_method:0000000000000000 png_set_text_compression_method
     /tmp/ccU70wA9.s:5765   .text.png_set_write_status_fn:0000000000000000 png_set_write_status_fn
     /tmp/ccU70wA9.s:5791   .text.png_set_write_user_transform_fn:0000000000000000 png_set_write_user_transform_fn
     /tmp/ccU70wA9.s:5826   .text.png_write_png:0000000000000000 png_write_png
     /tmp/ccU70wA9.s:6068   .text.png_image_write_to_stdio:0000000000000000 png_image_write_to_stdio
     /tmp/ccU70wA9.s:6374   .text.png_image_write_to_file:0000000000000000 png_image_write_to_file
     /tmp/ccU70wA9.s:6611   .rodata.cst8:0000000000000000 .LC41
     /tmp/ccU70wA9.s:6615   .rodata.cst8:0000000000000008 .LC42
     /tmp/ccU70wA9.s:6619   .rodata.cst8:0000000000000010 .LC43
     /tmp/ccU70wA9.s:6623   .rodata.cst8:0000000000000018 .LC44
                           .group:0000000000000000 wm4.0.cf9695abff4f49bdfe00dc4091904acd
                           .group:0000000000000000 wm4.stdcpredef.h.19.bf2bf6c5fb087dfb5ef2d2297c2795de
                           .group:0000000000000000 wm4.pngpriv.h.26.ca3d1719773cd86007410b516123e125
                           .group:0000000000000000 wm4.features.h.19.22780be97c2f806ec599b8b99aa89f7d
                           .group:0000000000000000 wm4.cdefs.h.19.56613e71f285ebad825b69b151170a81
                           .group:0000000000000000 wm4.wordsize.h.4.256e8fdbd37801980286acdbc40d0280
                           .group:0000000000000000 wm4.cdefs.h.432.619afd0aac7c4b439843706c1b28ddea
                           .group:0000000000000000 wm4.stubs64.h.10.918ceb5fa58268542bf143e4c1efbcf3
                           .group:0000000000000000 wm4.stdlib.h.27.59e2586c75bdbcb991b248ad7257b993
                           .group:0000000000000000 wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1
                           .group:0000000000000000 wm4.stdlib.h.37.e081b308f911db94d3185af615f2b2e2
                           .group:0000000000000000 wm4.string.h.23.8394011d5995a16f15d67d04e84a1d69
                           .group:0000000000000000 wm4.stddef.h.238.04cc7214bceba497b20d15c10fd97511
                           .group:0000000000000000 wm4.string.h.24.1b0dc67418e7128d207285861439c2f8
                           .group:0000000000000000 wm4.endian.h.19.ff00c9c0f5e9f9a9719c5de76ace57b4
                           .group:0000000000000000 wm4.endian.h.41.27d650ce666b76881e2a2a218ea61984
                           .group:0000000000000000 wm4.types.h.89.468e2451361e3b92f048f6cad51690ff
                           .group:0000000000000000 wm4.typesizes.h.24.40eb69a6270178f15d1bf3d7b6635a8b
                           .group:0000000000000000 wm4.string2.h.55.e4a4cfd7781cc64a4341475e67436ab1
                           .group:0000000000000000 wm4.string3.h.31.2b75bd65145c50aeedb61673ce0d3293
                           .group:0000000000000000 wm4.pnglibconf.h.15.30e2eea90e566ac06da4f4de487193d7
                           .group:0000000000000000 wm4.pngpriv.h.130.f65d93453b5b5837849611ffe82d627a
                           .group:0000000000000000 wm4.png.h.412.12a95b2193a7d0bc2282b72c70a28ce1
                           .group:0000000000000000 wm4.limits.h.23.f0fd92c175c1576df467c4d5fe2b091a
                           .group:0000000000000000 wm4.posix1_lim.h.25.28c8eb2d22697e7711efefdec5344a02
                           .group:0000000000000000 wm4.local_lim.h.25.97ee4129efb08ad296101237bcd3401b
                           .group:0000000000000000 wm4.limits.h.2.9ff59823e8adcf4502d980ef41362326
                           .group:0000000000000000 wm4.local_lim.h.42.9dc3935e0e3b94e23cda247e4e39bd8b
                           .group:0000000000000000 wm4.limits.h.60.eb7066f861c8b8edc7a0a399744b0335
                           .group:0000000000000000 wm4.stddef.h.39.d5a83c17f38162a5dd6f834eaf38f8ef
                           .group:0000000000000000 wm4.stdio.h.26.4719156f1aea2bb9662fd6c582dc9a4c
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:0000000000000000 wm4.stdio.h.36.2dd12c1fd035242ad5cfd0152a01be5a
                           .group:0000000000000000 wm4._G_config.h.5.b0f37d9e474454cf6e459063458db32f
                           .group:0000000000000000 wm4.wchar.h.80.eea3eba2d2a17aace9470a8e0d8218dc
                           .group:0000000000000000 wm4._G_config.h.46.5187c97b14fd664662cb32e6b94fc49e
                           .group:0000000000000000 wm4.libio.h.33.a775b9ecae273f33bc59931e9891e4ca
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.libio.h.51.dab170798ec1df48c625aea7c30e1b63
                           .group:0000000000000000 wm4.stdio.h.120.80cbf0ec1718a5b27e6428218e29c72d
                           .group:0000000000000000 wm4.stdio_lim.h.23.f8541119d1bcf759d7de9531671fd758
                           .group:0000000000000000 wm4.stdio.h.172.df21df34a7396d7da2e08f9b617d582f
                           .group:0000000000000000 wm4.stdio.h.26.e50fc3808d57d965ceefc6f6dd102eb7
                           .group:0000000000000000 wm4.sigset.h.20.f36413b6d2364ad847d3db53fb03e683
                           .group:0000000000000000 wm4.setjmp.h.67.51aa194c3c89a841663c00cb93fd90ff
                           .group:0000000000000000 wm4.time.h.26.6a3cabd4f228e226db6723a3b0c81ba6
                           .group:0000000000000000 wm4.time.h.40.99bfb90272c7e82357ef3c2f5c6fefc8
                           .group:0000000000000000 wm4.time.h.53.f8af6908497bac0ca16faea86fb8cd87
                           .group:0000000000000000 wm4.pngconf.h.86.6636b2584cb7be1618479e118d71e58c
                           .group:0000000000000000 wm4.png.h.506.fa53b6434c0b20c8e63094b04d7940c5
                           .group:0000000000000000 wm4.pngpriv.h.298.dc2c896ce0eddc5cfadee24e76e3c417
                           .group:0000000000000000 wm4.float.h.29.1cf88a0527b6b1225d49fbee2b32acb7
                           .group:0000000000000000 wm4.math.h.26.671af5ac9cd425a35e0730f7b6d7cde2
                           .group:0000000000000000 wm4.libmsimddeclstubs.h.34.75644856b74ba3d815155fe5fe7ecc56
                           .group:0000000000000000 wm4.mathdef.h.23.67c0aa4a204f1f427459dfc651aba565
                           .group:0000000000000000 wm4.math.h.55.cf380f99c57d42476a5252f30065036a
                           .group:0000000000000000 wm4.math.h.84.742292806c6be54f49dc607928a827f7
                           .group:0000000000000000 wm4.math.h.105.59ff0f83ebf6a04e70e145cef2d1185e
                           .group:0000000000000000 wm4.math.h.152.48a142bc1575e748473ff86330dee044
                           .group:0000000000000000 wm4.math.h.30.7cada3efe024725df2da4c705b6566be
                           .group:0000000000000000 wm4.pngpriv.h.481.f98e7c29eaaa759546a3f9808bc25c74
                           .group:0000000000000000 wm4.pngstruct.h.22.7b9573417641055ab8f42438aa8afadf
                           .group:0000000000000000 wm4.zconf.h.9.bbc7b5783b51507f7721a5620139b4ee
                           .group:0000000000000000 wm4.zconf.h.397.69c03305677a9a6792fe2a94f7c9f69b
                           .group:0000000000000000 wm4.types.h.23.92678977f3921b8dce508274ac68f78d
                           .group:0000000000000000 wm4.types.h.187.12f6c32afb936b45a5f241219964ce93
                           .group:0000000000000000 wm4.stdarg.h.31.48e922dd0aaedfb616aafd8a7b7a4949
                           .group:0000000000000000 wm4.unistd.h.23.c85a58a698f53edadcf64287ab24fecb
                           .group:0000000000000000 wm4.posix_opt.h.20.9a8aece77957db1725bd2b9521e5f9c5
                           .group:0000000000000000 wm4.unistd.h.213.4c582e35260d661b081322974b7c1e74
                           .group:0000000000000000 wm4.unistd.h.284.7e168706bc8bd978e02fd1da439d9bc3
                           .group:0000000000000000 wm4.confname.h.27.6b00117a32f457cc72e5ac810a9adade
                           .group:0000000000000000 wm4.zconf.h.457.505c3613686dd75e492569d7a56a6eb0
                           .group:0000000000000000 wm4.zlib.h.40.5a15529ab8e285cee4b0ddab32502c27
                           .group:0000000000000000 wm4.pngstruct.h.44.bc957704556ff8ddcb697678a008ffae
                           .group:0000000000000000 wm4.pngpriv.h.853.4585af3e74cfb155d8486c5333b94adf
                           .group:0000000000000000 wm4.pngdebug.h.36.e9c57d5f35e3128225fb629498ec6fc8
                           .group:0000000000000000 wm4.errno.h.21.234adedf0a908ba1512bb39778d0c13a
                           .group:0000000000000000 wm4.errnobase.h.2.3ec77d86fa6012e288bd2eb28191253f
                           .group:0000000000000000 wm4.errno.h.6.6707cf97e82b783d19d3d077217dd04e
                           .group:0000000000000000 wm4.errno.h.27.5f4b88dc9507696aecbaa61ffb4828e0

UNDEFINED SYMBOLS
png_free
png_sRGB_delta
png_sRGB_base
png_handle_as_unknown
png_write_chunk
png_warning
png_malloc
png_set_PLTE
png_set_tRNS
__stack_chk_fail
png_write_sig
png_write_IHDR
png_write_iCCP
png_write_sBIT
png_write_sRGB
png_write_gAMA_fixed
png_write_cHRM_fixed
png_app_warning
png_write_tRNS
png_write_sPLT
png_write_iTXt
png_write_tEXt
png_write_zTXt
png_write_PLTE
png_write_oFFs
png_write_pCAL
png_write_sCAL_s
png_write_pHYs
png_write_tIME
png_write_hIST
png_write_bKGD
png_error
png_write_IEND
png_benign_error
gmtime
png_create_png_struct
png_set_write_fn
png_write_start_row
memcpy
png_write_find_filter
png_do_write_transformations
png_do_check_palette_indexes
png_do_write_interlace
png_write_finish_row
png_set_interlace_handling
png_compress_IDAT
png_flush
png_destroy_info_struct
png_free_buffer_list
png_destroy_png_struct
deflateEnd
png_app_error
png_set_benign_errors
png_set_IHDR
png_set_gAMA_fixed
png_get_rowbytes
png_safe_execute
png_set_swap
png_set_sRGB
png_set_bgr
png_set_swap_alpha
png_set_packing
png_set_cHRM_fixed
png_set_filler
png_set_shift
png_set_invert_mono
png_set_invert_alpha
png_set_packswap
png_image_error
png_safe_error
png_safe_warning
png_create_info_struct
png_malloc_warn
png_image_free
fopen
fflush
ferror
__errno_location
fclose
remove
strerror
